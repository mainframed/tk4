//GILBERTF JOB (ACCT#),FASTPATH,
// NOTIFY=&SYSUID,
// CLASS=A,MSGCLASS=X,COND=(0,NE)
//ASMH EXEC PGM=ASMA90,PARM=(NODECK,OBJECT,NOESD,NORLD,NOXREF,
//*SYSPARM(STOP522),
// BATCH),REGION=5M
*PROCESS BATCH,USING(NOMAP,WARN(8))
***********************************************************************
*                                                                     *
* MODULE NAME = FASTPATH                                              *
*                                                                     *
* DESCRIPTIVE NAME = ISPF fast-path command processor                 *
*                                                                     *
* STATUS = R135                                                       *
*                                                                     *
* FUNCTION = This program allows the use of fast-path commands        *
*            without requiring customization of the ISPF              *
*            environment.  It provides two types of functions:        *
*                                                                     *
*            1. Initialization                                        *
*                                                                     *
*               a. add fast-path commands to the user's               *
*                  in-storage copy of ISPCMDS                         *
*               b. pre-load specific modules to enhance performance   *
*                  and allow access from a private LOAD library       *
*               c. issue STIMER to prevent S522 time-out abends       *
*                                                                     *
*            2. Processing                                            *
*                                                                     *
*               a. invoke EDIT, BROWSE, VIEW, WorkPlace and SDSF      *
*                  with the appropriate NEWAPPL parameter             *
*               b. store and retrieves parameters associated          *
*                  with user-specified tags                           *
*               c. retrieve a dsname under which the cursor           *
*                  is positionned                                     *
*                                                                     *
* AUTHOR = Gilbert Saint-flour <gsf@pobox.com>                        *
*                                                                     *
* ENVIRONMENT = SEE BELOW                                             *
*                                                                     *
*    DEPENDENCIES: MVS/ESA 4.3 (or above)                             *
*                  TSO/E 2.4 (or above)                               *
*                  ISPF/PDF V3 (or above)                             *
*                  STRING macro R507                                  *
*                                                                     *
* MODULE TYPE = PROCEDURE, (CSECT TYPE)                               *
*                                                                     *
*    PROCESSOR = IBM OS/ASSEMBLER H VERSION 2 OR                      *
*                IBM HIGH LEVEL ASSEMBLER/MVS                         *
*                                                                     *
*    MODULE SIZE = 24K                                                *
*                                                                     *
*    ATTRIBUTES = REENTERABLE, RMODE ANY, AMODE 31,                   *
*                 PROBLEM STATE, KEY 8                                *
*                 APF AUTHORIZATION: NONE                             *
*                                                                     *
* OPERATION = SEE BELOW                                               *
*                                                                     *
*   When it is invoked as a command, or without a parm, FASTPATH      *
*   adds (or replaces) fast path commands to the in-storage copy      *
*   of the ISPCMDS table.                                             *
*                                                                     *
*   When invoked as a program with a PARM, FASTPATH processes a       *
*   fast path command according to the parameters.                    *
*                                                                     *
* PARAMETERS = The parm field is used to pass parameters to the       *
*              program as a comma-delimited string.                   *
*                                                                     *
* RETURN-CODES = SEE BELOW                                            *
*                                                                     *
*          0                    OK                                    *
*          4                    Already Initialized                   *
*         16                    ISPF not active                       *
*                                                                     *
* CHANGE ACTIVITY                                                     *
*                                                                     *
*  $100 Initial release                                               *
*  $101 Add STIMER function to prevent S522 abends                    *
*  $102 Use ISPZ000 message instead of ISRZ000                        *
*  $103 VPUT for EDBR0001 fails when EDBR0000 is created              *
*  $104 Add variable for VIEW function of ISPF 4.1                    *
*  $105 Implement PRELOAD routine (from ISPTASK5)                     *
*  $106 Issue "ISPCMDS Updated" message                               *
*  $107 Reorg initialisation phase                                    *
*  $108 Add support for Work-place shell (ISPF 4.2)                   *
*  $109 Fix addressability problem in PRELOAD routine                 *
*  $110 Extract dsn under cursor when a ED/BR/VI/WP command           *
*       is entered without an option.                                 *
*  $111 If Zvprof='' THEN Zvprof=Prof                                 *
*  $112 Check for R1=>A(TLD) when invoked from ISPTASK                *
*  $113 Simulate WP with %DSLIST in ISPF V3 or V4R1                   *
*       Do not issue STIMER if running with TIME=1440                 *
*  $114 Add MACLIB function to VIEW MACLIB/MODGEN member              *
*  $115 FSHELP function (Full-screen HELP)                            *
*  $116 Name of builtin functions changed (E becomes EDIT)            *
*       New functions added: E V B (Direct Edit, View and Browse)     *
*  $117 FTINCL Function                                               *
*       If cursor-driven BROWSE fails, invoke BR (the VSAM Browser)   *
*  $118 Replace FSHELP with TSOFS which is more generic               *
*       Add CNTL and TIME functions                                   *
*  $119 Concatenate PVTMACS to MACLIB/MODGEN if it is cataloged       *
*       Add SYSID function                                            *
*  $120 CRASH/LOGON/LOGOFF functions                                  *
*       Add D function (delete member)                                *
*  $121 Make sure I've been link'd with the RENT attribute            *
*       Use external copy of ISPLINK module                           *
*  $122 Use new CRASH function for LOGON & LOGOFF                     *
*  $123 PARMLIB function for OS/390 R2                                *
*       Prevent MSGIKJ56400A when CRASH LOGON or CRASH LOGOFF         *
*       is issued and a CLIST or EXEC command is active               *
*       Add NOENQ option to DELMBR function                           *
*  $124 Prevent S0C9 in dsname extraction routine when TLDCLSWD=0     *
*  $125 Support ZEDITWS and ZVIEWWS variables                         *
*  $126 Add PROFILE option on WorkPlace VPUT                          *
*  $127 New function: EXECPGM                                         *
*  $128 Reset ECTIOWA when CRASH is entered with no operand           *
*  $129 Rewrite dsname extraction routine.                            *
*       Use VIEW if user doesn't have update auth to SYS1.PARMLIB     *
*  $130 Add CALENDAR function                                         *
*       Add CONNECT function to start/display connection to WS        *
*       Add LOAD and UNLOAD functions
*       Add NETSTAT function (full-screen NETSTAT)                    *
*       Add REXXTRY function                                          *
*       Add VERASE function to delete a variable from profile         *
*       Add ZDEL function to display/set ZDEL variable.               *
*       Enhanced ED/VI/BR/WP functions:                               *
*         Data Set Reference List                                     *
*         Work-station files                                          *
*         Compatibility with CNAEBROW/CNAEEDIT  *                     *
*       Delete duplicate entries from SITE and USER command tables    *
*       Change SYSID function to use ZDEL instead of ";".             *
*       CRASH * issues command from ZTSICMD                           *
*       STOP522 code only generated if assembled with SYSPARM(STOP522)*
*       FASTPATH can now be link-edited under a different name        *
*  $131 Add OPENCMDS and FSPASTE functions                            *
*       LOAD function supports LIBDEF ISPLLIB                         *
*       Enhance TSOFS and UNLOAD functions                            *
*       Enhance CRASH: =pli, close ISRxLIST tables                    *
*       Add LC command                                                *
*       Issue RACROUTE to prevent S913 abends in BR/ED/VI             *
*       Use VARLISTW for WP variables to prevent corruption           *
*       Restructure the code to work around addressability problems   *
*  $132 Check for * and % in EDBR                                     *
*       Add LIBRARY(ISPSPROF) to TBCLOSE service                      *
*  $133 Reorganize initialization code and add SELECT function        *
*       Detect migrated data sets and allow user to prevent HRECALL   *
*       Replace relative generation number with .G*V%%                *
*       Allow volser in direct ED/BR/VI/WP: ED ISP.SISPPENU/OS39R7    *
*       Do not prefix &ZPREFIX if the unqualified name is cataloged   *
*       Add profile on MAClib/PARMLib functions                       *
*       Add VIEW/EDIT option to PARMLib function                      *
*       Fix BEGIN_PROC for HLASM R3 (requires STRING 506 or 404)      *
*  $134 A + sign at the end of a command starts a new logical screen  *
*       Prompt user before creating a new Tag entry                   *
*       Do not issue RACROUTE with ACF2 or Top-Secret                 *
*       Remove LOCTR option in STRING GENERATE instruction            *
*       Replace LINK EP=IEANTxx with BALR to prevent S406-04          *
*       Init ZREFTYPE and ZWRKVOL variables to X'40'                  *
*       Drop trailing blank lines in FSPASTE                          *
*  $135 Use PGM(ISRDSLST) PARM(PL1 REFLIST) instead of RL1 in ISPF 4.8*
*       Check for migrated data sets in all situations                *
*       Support ALIAS names on non SMS-managed volumes                *
*                                                                     *
&REL     SETC  'R135'                                                 *
***********************************************************************
         PUNCH ' ORDER FASTPATH(P),JUL2DAYS,@STRING,ISPCMDS,PRELOAD'
FASTPATH CSECT
FASTPATH RMODE ANY
         SAVE  (14,12),,'GSF Utilities - FASTPATH &REL'
         LR    R11,R15                 1st base reg
         USING FASTPATH,R11
         LA    R0,DYNAML               LENGTH OF DYNAMIC STORAGE AREA
         GETMAIN R,LV=(0)              ALLOCATE DYNAMIC STORAGE
         ST    R13,4(,R1)
         ST    R1,8(,R13)
         LA    R14,72(,R1)             clear working storage
         LA    R15,DYNAML-72           clear working storage
         SLR   R1,R1                   clear working storage
         MVCL  R14,R0                  clear working storage
         LM    R13,R1,8(R13)           SET R13, RELOAD R14-R1
         LR    R9,R1                   save PARM/CPPL address
         USING DYNAM,R13
         ST    R13,DYNAM               PARM FOR READ ROUTINE
         MVI   BLANKS,C' '
         MVC   BLANKS+1(L'BLANKS-1),BLANKS
         MVC   OPT,BLANKS
*---------------------------------------------------------------------*
*                                                                     *
*        Retrieve the address of the LIBDEF ISPLLIB DCB               *
*                                                                     *
*---------------------------------------------------------------------*
FINDDCB  L     R4,PSATOLD-PSA          My TCB
         USING TCB,R4
         L     R1,TCBRBP               current PRB
         L     R2,RBGRS15-RBBASIC(,R1) SVC 6 PARM LIST
         MVC   LLIBDCB+1(3),5(R2)      addr of LIBDEF DCB or zero
*---------------------------------------------------------------------*
*                                                                     *
*        Locate/validate my CDE on the JPAQ                           *
*                                                                     *
*---------------------------------------------------------------------*
FINDCDE  L     R5,TCBJSTCB             job-step TCB
         L     R5,TCBJPQ-TCB(,R5)      first CDE on JPAQ
         USING CDENTRY,R5
*loop
FINDCDE2 CL    R11,CDENTPT             IS IT MY OWN ENTRY?
         BE    FINDCDE5                YES, EXIT
         ICM   R5,B'1111',CDCHAIN      NEXT CDE
         BNZ   FINDCDE2                CHECK NEXT CDE
*endloop
         MVC   OWNNAME,=C'*UNKNOWN'    own name not found
         B     INIT_ERROR              error
FINDCDE5 MVC   OWNNAME,CDNAME          save own name
         ST    R5,CDE@                 save CDE address
         TM    CDATTR,CDREN            RENT module?
         BNO   INIT_ERROR              no, error
         DROP  R5                      CDENTRY
*---------------------------------------------------------------------*
*                                                                     *
*        Locate/validate ISPF control blocks: TLD, TSI                *
*                                                                     *
*---------------------------------------------------------------------*
*loop
FINDTLD2 L     R1,TCBFSA               first save area
         CLI   24(R1),00               24-bit address?
         BNE   FINDTLD3                no, ignore
         L     R1,24(,R1)              R1 SLOT (ADDR OF TLD PTR)
         CLI   0(R1),00                24-bit address?
         BNE   FINDTLD3                no, ignore
         L     R5,0(,R1)               R5 -> TLD
         USING TLD,R5
         CLC   =C'TLD',TLDTBLID        is this the TLD?
         BE    FINDTLD5                yes, exit loop
FINDTLD3 L     R4,TCBOTC               previous TCB (ISPTASK)
         CL    R4,TCBJSTCB             am I lost?
         BNE   FINDTLD2                no, keep on going
*endloop
         B     INIT_ERROR              error
FINDTLD5 EQU   *
         ST    R5,TLD@                 save TLD address
         L     R4,TLDTSIP              R4 -> TSI
         USING TSI,R4
         CLC   =C'ISPTSI',TSITBLID     am I lost?
         BNE   INIT_ERROR              yes, error
         ST    R4,TSI@                 save TSI address
         PACK  ISPFVM,TSIRMZ(1)        4.2 -> X'4F'
         MVN   ISPFVM,TSIRMZ+2         4.2 -> X'42'
*
*        Retrieve the current command from the TLD.  The last
*        character of the cmd is checked for a + sign later on.
*
         L     R6,TLD+092              point at the last command
         LA    R7,008(,R6)             start of the command
         ICM   R8,B'1111',004(R6)      length of the command
         BZ    FINDTLD8                no command, exit
         ALR   R8,R7                   end of command
         CLI   0(R8),C' '              find last non-blank character
         BNE   *+8                     find last non-blank character
         BCT   R8,*-8                  find last non-blank character
         STM   R7,R8,CMD@              save addr, end-addr
*
*        Extract the name of the command and save into CMDNAME
*
         LA    R0,L'CMDNAME            loop counter
         LR    R1,R7                   start of command
         CLI   0(R1),C' '              end of command name?
         BE    FINDTLD7                yes, exit
         LA    R1,1(,R1)               bump index
         BCT   R0,*-12                 next character
FINDTLD7 EQU   *
         STRING ((R7),(R1)),INTO=CMDNAME save the cmd name
FINDTLD8 EQU   *
         DROP  R4,R5                   TLD,TSI
***********************************************************************
*                                                                     *
*        INITIALISATION                                               *
*                                                                     *
*        1. invoked from ISPTASK with R1=>A(TLD): perform SETUP       *
*           (it's too early for ADDCMDS)                              *
*        2. invoked as a Command processor (R1 points to a CPPL):     *
*           perform SETUP then re-invoke myself as a program.         *
*        3. invoked as a program with PARM='' via the CALL command:   *
*           add commands to ISPCMDS                                   *
*        4. invoked as a program with a non-null parm:                *
*           process the requested function                            *
*                                                                     *
***********************************************************************
INIT00   EQU   *
         L     R1,0(,R9)               point at PARM/CBUF/TLD
         CLC   =C'TLD',0(R1)           invoked from ISPTASK4?
         BE    INIT20                  yes, perform set-up
*
*        ISPEXEC CONTROL ERRORS RETURN
*
         LA    R1,=A($CONTROL,$ERRORS,$RETURN+VL)
         LINK  SF=(E,ISPLINK$)         CONTROL ERRORS RETURN
         LTR   R7,R15                  ISPF active?
         BNZ   GOBACK                  no, exit
*
         L     R1,PSATOLD-PSA          My TCB
         CLC   TCBFSA-TCB(,R1),4(R13)  invoked via CALL or as a CP?
         BNE   INIT30                  no, continue
         BAL   R14,ADDCMDS          <- add commands to ISPCMDS
*
INIT20   EQU   *
         BAL   R14,SETUP00          <- SETUP (URP)
         SLR   R7,R7                   rc=0
         B     GOBACK                  exit with rc=0
*
INIT_ERROR EQU *
         STRING 'Module ',(OWNNAME,,T),' failed initialization;',      X
               ' CDE=',(CDE@+1,3,X),' TLD=',(TLD@+1,3,X),              X
               ' TSI=',(TSI@+1,3,X),INTO=LONGMSG
         TPUT  LONGMSG,(R15)           issue error message
         LA    R7,16                   rc=16
         B     GOBACK                  exit with rc=16
*
*        Force a PAGEIN of the FASTPATH module
*
INIT30   L     R7,=V(ISPCMDS)          first table entry
         PGSER R,LOAD,A=(R11),EA=(R7),ECB=0
*
         MACRO                                                    macro
&NAME    ISPLINK &OPRNDS,&ERRET=                                  macro
&NAME    LINK  SF=(E,ISPLINK$),PARAM=&OPRNDS,MF=(E,PARMLIST),VL=1 macro
         AIF   (T'&ERRET EQ 'O').MEND                             macro
         LTR   R15,R15                 Any error?
         BNZ   &ERRET                  yes, jump
.MEND    MEND                                                     macro
*---------------------------------------------------------------------*
*                                                                     *
*        Retrieve ISPF variables                                      *
*                                                                     *
*---------------------------------------------------------------------*
INIT40   LA    R14,L'ZENVIR            max length
         LA    R15,L'ZAPPLID           max length
         LA    R0,L'ZUSER              max length
         LA    R1,L'ZPREFIX            max length
         LA    R2,L'ZSCREEN            max length
         LA    R3,L'ZDEL               max length
         LA    R4,L'ZSPLIT             max length
         LA    R5,L'ZWSCON             max length
         STM   R14,R5,TENWORDS         length array
&VARS    SETC  'ZENVIR ZAPPLID ZUSER ZPREFIX ZSCREEN'
&VARS    SETC  '&VARS ZDEL ZSPLIT ZWSCON'
         ISPLINK ($VCOPY,=C'(&VARS)',TENWORDS,ZENVIR,$MOVE)
         MVC   NEWAPPL,=C'ISR '        new appl (default)
         MVC   NEWPGM,OWNNAME          NEW PROGRAM
*
*        Bump my own use count if I haven't been already
*        made resident at the URP level.
*
         L     R5,CDE@                 own CDE
         LA    R0,1                    R0=1
         CH    R0,CDUSE-CDENTRY(R5)    own CDUSE=1 ?
         BNE   INIT50                  no, jump
         LOAD  EPLOC=OWNNAME           bump my use count
         MVC   OWNNAME2,OWNNAME        save OWNNAME for UNLOAD function
*---------------------------------------------------------------------*
*                                                                     *
*        I've been invoked as a program via the SELECT service.       *
*        The value of ZAPPLID doesn't matter at this point.           *
*                                                                     *
*        If PARM='', change to PARM=SELECT to perform initialization. *
*                                                                     *
*---------------------------------------------------------------------*
INIT50   L     R3,0(,R9)               point at parm
         LH    R5,0(,R3)               parm length
         LTR   R5,R5                   do we have a parm?
         BP    INIT60                  yes, jump
         BAL   R3,INIT55               branch around constant
         DC    Y(6),C'SELECT'          Simulate PARM(SELECT)
INIT55   LH    R5,0(,R3)               parm length
*---------------------------------------------------------------------*
*                                                                     *
*        Parse the parm                                               *
*                                                                     *
*              Input:   PARM='EDIT,abcd,efgh,ijkl'                    *
*                                                                     *
*              output:  FUNCTION='EDIT '                              *
*                       OPT='abcd,efgh,ijkl'                          *
*                       OPT8='ABCD,EFG'                               *
*                                                                     *
*---------------------------------------------------------------------*
INIT60   LA    R4,2(,R3)               parm address
*loop
INIT61   CLI   0(R4),C','              end of function?
         BE    INIT62                  yes, leave
         CLI   0(R4),C' '              end of function?
         BE    INIT62                  yes, leave
         LA    R4,1(,R4)               bump ptr
         BCT   R5,INIT61               keep loopin
*endloop
INIT62   STRING (2(R3),(R4)),INTO=FUNCTION
         OC    FUNCTION,BLANKS         Convert to upper-case
         LTR   R5,R5                   any options?
         BZ    INIT63                  no, jump
         BCTR  R5,0                    yes, subtract length of comma
         LA    R4,1(,R4)               skip comma
INIT63   ST    R4,OPTADDR              save address
         ST    R5,OPTLEN               save length
         STRING ((R4),(R5)),INTO=OPT   save options
         MVC   OPT2,OPT                save options
         MVC   OPT8,OPT                Save first 8 bytes
         OC    OPT8,BLANKS             Convert to upper-case
*---------------------------------------------------------------------*
*                                                                     *
*        Invoke function processor                                    *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
        $TABLE &KW,&ADDR,&PLUS
         DC    AL2(&ADDR-*),CL5'&KW',CL1'&PLUS '
         MEND
         BAL   R2,SELFUNC2
        $TABLE B,EDBRVIWP              Direct Browse
        $TABLE BROWSE,EDBRVIWP,%       Builtin: Browse
        $TABLE CALENDAR,CALENDAR       Display Calendar
        $TABLE CNTL,CNTL,+             CNTL,0
        $TABLE WSCON,CONNECT           CONNECT to WorkStation
        $TABLE CRASH,CRASH             CRASH/LOGON/LOGOFF
        $TABLE D,DELMBR                Delete Member
        $TABLE E,EDBRVIWP              Direct Edit
        $TABLE EDIT,EDBRVIWP,%         Builtin: Edit
        $TABLE EXECPGM,EXECPGM         Exec pgm from link-list
        $TABLE FSPASTE,FSPASTE,+       Full-Screen PASTE
        $TABLE FTINCL,FTINCL           FTINCL,&skel,&panel
        $TABLE ICS,ICS,+               ISPF Command Shell
        $TABLE LOAD,LOAD00,+           Preload a module
        $TABLE MACLIB,MACLIB,+         MACLIB
        $TABLE OPENCMDS,OPENCMDS       OPENCMDS
        $TABLE NETSTAT,NETSTAT,+       NETSTAT
        $TABLE SELECT,SELECT           Start Initial Command
        $TABLE PARMLIB,PARMLIB,+       PARMLIB
        $TABLE REXXTRY,REXXTRY         REXXTRY
        $TABLE SDSF,SDSF,+             SDSF
        $TABLE SYSID,SYSID,+           SYSID
        $TABLE TIME,TIME,+             TIME
        $TABLE TSOFS,TSOFS,%           Full-screen TSO
        $TABLE UNLOAD,UNLOAD00,+       Unload a module
        $TABLE UTIL,UTIL,+             PDF Utilities
        $TABLE V,EDBRVIWP              Direct View
        $TABLE VERASE,VERASE,+         VERASE
        $TABLE VIEW,EDBRVIWP,%         Builtin: View
        $TABLE WP,EDBRVIWP,%           Builtin: Work-place
        $TABLE ZDEL,ZDELFUNC,+         ZDEL
         DC    X'FF',0Y(0)
*LOOP
SELFUNC2 CLC   FUNCTION(5),2(R2)       SAME FUNCTION?
         BE    SELFUNC4                YES, EXIT LOOP
         LA    R2,2+5+1(,R2)           NEXT TYPE
         CLI   0(R2),X'FF'             END OF TABLE?
         BNE   SELFUNC2                NOT YET
*ENDLOOP
         STRING 'Unsupported Function',INTO=SHORTMSG
         STRING 'FASTPATH release &REL does not support the ',         X
               (FUNCTION,,T),' function.',                             X
               INTO=LONGMSG
         MVI   ALARM,C'Y'              error, beep.
         BAL   R14,SETMSG              send message
         LA    R7,12                   rc=12
         B     GOBACK                  unknown function, exit
*
*        Process new-screen option
*
SELFUNC4 LM    R7,R8,CMD@              cmd addr, end-addr
         CLI   0(R8),C'+'              user requested new screen?
         BNE   SELFUNC8                no, go execute function
         MVI   PLUSSIGN,C'+'           tell EDBRVIWP and TSOFS
         CLI   2+5(R2),C'+'            new screen allowed?
         BE    NEWSCREEN               yes, re-issue the command
         CLI   2+5(R2),C'%'            new screen allowed?
         BNE   SELFUNC8                no, go execute function
*
*        Blank out the last + sign for EDBRVIWP
*
         L     R1,OPTLEN               L'OPT2
         LA    R1,OPT2-1(R1)           last char
         CLI   0(R1),C'+'              blank out last + sign
         BE    *+8                     blank out last + sign
         BCT   R1,*-8                  blank out last + sign
         MVI   0(R1),C' '              blank out last + sign
*
*        Pass control to functional routine
*
SELFUNC8 LR    R15,R2                  Pass address of table entry
         AH    R15,0(,R15)             Add offset to functional rtne
         BALR  R14,R15             <== EXECUTE FUNCTION
         B     *+4(R1)                 take return action based on R1
         B     XCTL00                  r1=0: invoke ISPF service
         B     EXIT90                  r1=4: exit with rc=(15)
         B     APPL_ISR                r1=8: switch to APPL=ISR
         B     XCTL30                  r1=12: other ISPF service
         B     NEWSCREEN               r1=16: re-issue the command
***********************************************************************
*                                                                     *
*        Function=SDSF                                                *
*                                                                     *
***********************************************************************
SDSF     MVC   NEWAPPL,=C'ISF '        NEW APPL
         MVC   NEWPGM,=CL8'ISFISP'     NEW PROGRAM
         B     XCTL00                  INVOKE ISPF SERVICE
***********************************************************************
*                                                                     *
*        Function=UTIL (PDF Utilities)                                *
*                                                                     *
***********************************************************************
UTIL     MVC   NEWPANEL,=CL8'ISRUTIL'  NEW PANEL
         B     XCTL00                  INVOKE ISPF SERVICE
*
BACKLVL  STRING 'Not Supported',INTO=SHORTMSG
         STRING 'Function ',(FUNCTION,,T),                             X
               ' is not supported in this environment.',               X
               INTO=LONGMSG
         MVI   ALARM,C'Y'              error, beep.
         BAL   R14,SETMSG              send message
         LR    R7,R15                  pass rc=8
         B     GOBACK                  quit with RC=8
*
ISPG054  ISPLINK ($SETMSG,=C'ISPG054 ') Command Parm is missing
         LA    R7,8                    pass rc=8
         B     GOBACK
***********************************************************************
*                                                                     *
*        Goback to ISPF                                               *
*                                                                     *
***********************************************************************
EXIT90   LTR   R7,R15                  DIALOG'S RETURN CODE
         BZ    GOBACK                  OK, EXIT
         LA    R0,L'ZERRMSG            max length
         ST    R0,DWD                  max length
         ISPLINK ($VCOPY,$ZERRMSG,DWD,ZERRMSG,$MOVE),ERRET=GOBACK
         ISPLINK ($SETMSG,ZERRMSG)
*
GOBACK   LR    R1,R13                  Work area
         L     R13,4(,R13)
         LA    R0,DYNAML               LENGTH OF DYNAMIC STORAGE AREA
         FREEMAIN R,LV=(0),A=(1)       FREE DYNAMIC STORAGE
         LR    R15,R7                  Return code
         RETURN (14,12),RC=(15)
***********************************************************************
*                                                                     *
*        PARM='SELECT <service>'                                      *
*                                                                     *
*        The SELECT function allows FASTPATH to be invoked at ISPF    *
*        start to perform initialization tasks such as ADDCMDS and    *
*        PRELOAD; SELECT then starts the main ISPF service,           *
*        typically a primary option menu such as ISR@PRIM.            *
*        The main ISPF service is specified as follows:               *
*                                                                     *
*        ISPF PGM(FASTPATH) PARM(SELECT PANEL(APRIOPT) NEWAPPL(MVS))  *
*                                                                     *
*        If the main ISPF service is not specified, FASTPATH          *
*        uses the following default:                                  *
*                                                                     *
*              SELECT PANEL(ISR@PRIM) NEWAPPL(ISR)                    *
*                                                                     *
***********************************************************************
SELECT   CLC   =C'1 ',ZSCREEN          FIRST SCREEN?
         BNE   SELECT2                 no, jump
         BAL   R14,SETUP00          <- perform setup functions
         BAL   R14,ADDCMDS          <- add commands to ISPCMDS
SELECT2  EQU   *
         ICM   R0,B'1111',OPTLEN       any parm specified?
         BZ    SELECT7                 no, use default panel
         STRING $SELECT,(OPT,(R0)),INTO=COMMAND
         B     XCTL30                  user specified command
SELECT7  EQU   *
         MVC   NEWPANEL,=C'ISR@PRIM'   default panel
         B     XCTL00
***********************************************************************
*                                                                     *
*        Start New Screen                                             *
*                                                                     *
***********************************************************************
NEWSCREEN LM   R7,R8,CMD@              cmd addr, end-addr
         STRING ((R7),(R8)),INTO=OPT   copy command, drop trailing +
         ST    R15,OPTLEN              length
         MVC   NEWPGM,=CL8'ISPSTRT'    SPLIT NEW
***********************************************************************
*                                                                     *
*        Invoke a program, panel or command via the SELECT service.   *
*                                                                     *
***********************************************************************
XCTL00   STRING 'SELECT PANEL(',(NEWPANEL,,T),                         X
               ') OPT(',(OPT,,T),')',                                  X
               INTO=COMMAND
         CLI   NEWPANEL,0              SELECT PANEL ?
         BNE   XCTL20                  YES, JUMP
         STRING 'SELECT CMD(',(NEWCMD,,T),')',                         X
               INTO=COMMAND
         CLI   NEWCMD,0                SELECT CMD ?
         BNE   XCTL20                  YES, JUMP
         STRING 'SELECT PGM(',(NEWPGM,,T),                             X
               ') PARM(',(OPT,,T),')',                                 X
               INTO=COMMAND
XCTL20   CLC   ZAPPLID,NEWAPPL         CURRENT APPLID OK?
         BE    XCTL30                  YES, JUMP
         CLI   NEWAPPL,C' '            New APPLID OK?
         BNE   XCTL27                  No, change it
         B     XCTL30                  YES, Continue
*
*        Re-invoke myself with NEWAPPL(ISR)
*
APPL_ISR L     R3,0(,R9)               point at parm
         LH    R5,0(,R3)               parm length
         STRING 'SELECT PGM(',(OWNNAME,,T),                            X
               ') PARM(',(2(R3),(R5),T),')',                           X
               INTO=COMMAND
*
*        Switch APPLID
*
XCTL27   STRING 'Applid Switched',INTO=SHORTMSG
         STRING 'Applid switched from ',(ZAPPLID,,T),' to ',NEWAPPL,   X
               INTO=LONGMSG
         BAL   R14,SETMSG              send message
         STRING (COMMAND,,T),' NEWAPPL(',NEWAPPL,')',INTO=COMMAND
*---------------------------------------------------------------------*
*                                                                     *
*        XCTL TO ISPEXEC                                              *
*                                                                     *
*---------------------------------------------------------------------*
XCTL30   EQU   *
         BAL   R14,XCTLGET          <- find XCTL Work Area
         LR    R8,R1                   A(XCTLWORK)
         USING XCTLWORK,R8
         STRING (COMMAND,,T),INTO=XCTLCMD
         ST    R15,XCTLLEN             STORE LENGTH OF COMMAND
         LA    R15,XCTLLEN             length of command
         LA    R0,XCTLCMD              text of command
         STM   R15,R0,XCTLPARM         parm list for ISPEXEC
         OI    XCTLPARM+4,X'80'        parm list for ISPEXEC
         LR    R1,R13                  A(DYNAM)
         L     R13,4(,R13)             caller's save area
         LA    R0,DYNAML               LENGTH OF DYNAMIC STORAGE AREA
         FREEMAIN R,LV=(0),A=(1)       FREE DYNAMIC STORAGE
         LA    R1,XCTLPARM             parm list for ISPEXEC
         XCTL  (2,12),EPLOC=$ISPEXEC   pass control to ISPEXEC
         DROP  R8                      was XCTLWORK
*---------------------------------------------------------------------*
*        ISPEXEC routine                                              *
*---------------------------------------------------------------------*
ISPEXEC  ST    R15,TOKEN               store length
         LA    R15,TOKEN               length of command
         LA    R0,COMMAND              text of command
         STM   R15,R0,PARMLIST         parm list for ISPEXEC
         OI    PARMLIST+4,X'80'        parm list for ISPEXEC
         LOAD  EPLOC=$ISPEXEC          V(ISPEXEC)
         LR    R15,R0                  V(ISPEXEC)
         LA    R1,PARMLIST             parm list for ISPEXEC
         BR    R15                     invoke ISPEXEC
*---------------------------------------------------------------------*
*        JPASEARCH routine                                            *
*---------------------------------------------------------------------*
JPASEARCH BAKR R14,0
         L     R3,CVTPTR               point to CVT
         USING CVTMAP,R3
         L     R4,PSATOLD-PSA          point to TCB
         USING TCB,R4
         L     R4,TCBJSTCB             point to JS TCB
         LA    R8,TCBJPQ               START OF CDE CHAIN
         LR    R9,R1                   Module name
         L     R15,CVTQCDSR            CDE SEARCH ROUTINE
         BALR  R14,R15                 USES R0, R1, R8, R9, R11
         B     JPASCH9-*(,R14)     +0  FOUND, QUIT
JPASCH8  LA    R15,4                   RC=4 (not found)
         PR
JPASCH9  SLR   R15,R15                 RC=0 (found)
         PR
         DROP  R3,R4                   CVT,TCB
***********************************************************************
         MACRO                                                    macro
&NAME    BEGIN_PROC &SAVE=BAKR,&LVL=,&OPT=,&APPL=                 macro
$LTORG   LOCTR
&NAME2   SETC  '&NAME'                                            macro
         AIF   (T'&LVL EQ 'O').LVL9                               macro
&NAME2   CLI   ISPFVM,X'&LVL'          function supported in ISPF?
         BL    BACKLVL                 no, exit
&NAME2   SETC  ''                                                 macro
.LVL9    ANOP                                                     macro
         AIF   ('&OPT' NE 'YES').OPT9                             macro
&NAME2   CLI   OPT,C' '                required parm present?
         BE    ISPG054                 no, exit
&NAME2   SETC  ''                                                 macro
.OPT9    ANOP                                                     macro
         AIF   (T'&APPL EQ 'O').APPL9                             macro
&NAME2   CLC   ZAPPLID,NEWAPPL         Current APPL OK?
         BNE   APPL_ISR                no, switch applid
&NAME2   SETC  ''                                                 macro
.APPL9   ANOP                                                     macro
&NAME2   BAL   R15,$STRING2            =X'4AFF,0000,07FF'
         DC    Y(&NAME._START-*)
$FARRTNE LOCTR
         DS    0D
         AIF   ('&SAVE' EQ 'BAKR').BAKR
&NAME._START SAVE (14,12),,&NAME
         LR    R12,R15
         USING &NAME._START,R12
         MEXIT                                                    macro
.BAKR    DC    CL8'&NAME'
&NAME._START BAKR R14,0                SAVE REGISTERS
         LR    R12,R15
         USING &NAME._START,R12
         MEND                                                     macro
***********************************************************************
*                                                                     *
*        Function=CALENDAR (Display Status Area's Calendar)           *
*                                                                     *
***********************************************************************
CALENDAR BEGIN_PROC LVL=41,APPL=ISR
         ISPLINK ($VREPLACE,=C'ZSAREAP ',=F'3',=C'CAL')
         ISPLINK ($VPUT,=C'ZSAREAP ',$PROFILE)
         MVC   NEWPGM,=CL8'ISPSAM'     Status Area program
         MVC   OPT(3),=C'POP'          PARM(POP)
         LA    R1,0                    Execute command
         PR
***********************************************************************
*                                                                     *
*        Function=CNTL (Edit SPFTEMPn)                                *
*                                                                     *
***********************************************************************
CNTL     BEGIN_PROC APPL=ISR
         BAL   R14,PARSE3              parse options
         CLI   PARM3,C' '              profile specified?
         BNE   CNTL2                   yes, jump
         MVC   PARM3(4),=C'CNTL'       default profile
CNTL2    LA    R0,L'ZTEMPN             LENGTH
         ST    R0,DWD                  LENGTH
         ISPLINK ($VCOPY,=C'ZTEMPN ',DWD,ZTEMPN,$MOVE)
         CLC   =C'0 ',OPT              edit SPFTEMP0 ?
         BNE   CNTL10                  no, jump
         MVC   ZTEMPN,=C'ISPCTL0 '     ddname for SPFTEMP0.CNTL
         DEVTYPE ZTEMPN,DWD            check if DD is allocated
         LTR   R15,R15                 ISPCTL0 allocated?
         BZ    CNTL10                  yes, jump
         STRING (ZUSER,,T),'.SPFTEMP0.CNTL',INTO=ZWRKDSN
         STRING 'EDIT DATASET(''',(ZWRKDSN,,T),'''',                   X
               ') PROFILE(',(PARM3,,T),')',                            X
               INTO=COMMAND
         BAL   R14,ISPEXEC          <- execute EDIT command
         LR    R7,R15                  save return code
         B     CNTL90                  exit
CNTL10   EQU   *
         STRING 'LMINIT DATAID(ID1) DDNAME(',ZTEMPN,') ENQ(SHRW)',     X
               INTO=COMMAND
         BAL   R14,ISPEXEC          <- execute LMINIT command
         LTR   R15,R15                 COMMAND OK ?
         BNZ   CNTL99                  NO, EXIT
         LA    R0,L'DATAID             max length
         ST    R0,DWD                  max length
         ISPLINK ($VCOPY,=C'ID1 ',DWD,DATAID,$MOVE),ERRET=CNTL99
         STRING 'EDIT DATAID(',DATAID,                                 X
               ') PROFILE(',(PARM3,,T),')',                            X
               INTO=COMMAND
         BAL   R14,ISPEXEC          <- execute EDIT command
         LR    R7,R15                  save return code
         STRING 'LMFREE DATAID(',DATAID,')',INTO=COMMAND
         BAL   R14,ISPEXEC          <- execute LMFREE command
CNTL90   EQU   *
         LTR   R15,R7                  data saved?
         BNZ   CNTL99                  no, jump
         STRING 'Data Set Saved',INTO=SHORTMSG
         STRING 'Control Data Set Saved: ',ZTEMPN,INTO=LONGMSG
         BAL   R14,SETMSG              send message
CNTL99   EQU   *
         LA    R1,4                    Exit with rc=(15)
         PR
***********************************************************************
*                                                                     *
*        Function=CONNECT                                             *
*                                                                     *
***********************************************************************
CONNECT  BEGIN_PROC LVL=42,APPL=ISR
         CLI   ZWSCON,C' '             already connected?
         BE    CONNECT5                no, jump
         ISPLINK ($SETMSG,=C'ISPO908 ') Already Connected
CONNECT5 STRING 'SETTINGS',ZDEL,'GUIINIT',INTO=COMMAND
         ST    R15,DWD                 store length
         ISPLINK ($VREPLACE,=C'CMD ',DWD,COMMAND)
         STRING 'DISPLAY PANEL(ISPSTRTP) COMMAND(CMD)',INTO=COMMAND
         BAL   R14,ISPEXEC          <- execute command
         LA    R1,4                    Exit with rc=(15)
         PR
***********************************************************************
*                                                                     *
*        PARM='CRASH<,command>'   (Quick exit from ISPF)              *
*                                                                     *
***********************************************************************
CRASH    BEGIN_PROC
*---------------------------------------------------------------------*
*                                                                     *
*        Special processing for LOGON & LOGOFF commands               *
*                                                                     *
*        This code prevents the TMP from issuing the                  *
*        IKJ56400A ENTER LOGON OR LOGOFF prompt when the user enters  *
*        a CRASH LOGON or CRASH LOGOFF command while CLISTs or EXECs  *
*        are executing in some of the logical screens.                *
*                                                                     *
*---------------------------------------------------------------------*
         CLC   =C'LOGOFF ',OPT8        LOGON/LOGOFF ?
         BE    CRASH32                 YES, JUMP
         CLC   =C'LOGON ',OPT8         LOGON/LOGOFF ?
         BNE   CRASH51                 no, exit
         MVC   OPT8+6(2),BLANKS        "LOGON XX" => "LOGON   "
*
CRASH32  L     R2,CVTPTR               CVT ADDR
         L     R2,CVTLINK-CVTMAP(,R2)  DCB for SYS1.LINKLIB
         LOAD  EPLOC=OPT8,DCB=(R2)     PRE-LOAD LOGON/LOGOFF
         STRING 'CMD(TSOEXEC ',(OPT,,T),') MODE(FSCR)',INTO=COMMAND
         ST    R15,DWD                 STORE LENGTH OF COMMAND
         LOAD  EPLOC=COMMAND+4,DCB=(R2) PRE-LOAD TSOEXEC
         ISPLINK ($SELECT,DWD,COMMAND)
         LTR   R7,R15                  DIALOG'S RETURN CODE
         BZ    CRASH71                 GOOD, CONTINUE
         LA    R1,4                    Exit with rc=(15)
         PR                            command failed
*---------------------------------------------------------------------*
*                                                                     *
*        STACK a TSO command                                          *
*                                                                     *
*---------------------------------------------------------------------*
CRASH51  EQU   *
         L     R4,TSI@                 R4->TSI
         USING TSI,R4
         CLC   =C'READY ',OPT8         go back to READY prompt?
         BE    CRASH71                 yes, skip STACK macro
         L     R7,OPTADDR              1st byte of command
         ICM   R8,B'1111',OPTLEN       anything to add to the stack?
         BZ    CRASH61                 no, jump
*
         CLI   OPT,C'='                User entered "CRASH ="  ?
         BE    CRASH53                 yes, jump
         BAL   R14,CRASH58          <- build LSD and issue STACK macro
         B     CRASH71                 continue
*
*        User entered CRASH =xxx: validate xxx options
*
CRASH53  EQU   *
         LA    R0,L'OPT8               max length
         CLR   R8,R0                   option string too long?
         BH    CRASH59                 yes, error
         LA    R5,OPT8+1               1st option
         LR    R6,R8                   l'opt8
         BCTR  R6,0                    skip "="
*loop
CRASH53B EQU   *
         CLI   0(R5),C'P'              CRASH =P (PARM)
         BE    CRASH53N                yes, jump
         CLI   0(R5),C'L'              CRASH =L (LOGONCMD)
         BE    CRASH53N                yes, jump
         CLI   0(R5),C'I'              CRASH =I (ISPF)
         BNE   CRASH59                 no, error
CRASH53N LA    R5,1(,R5)               next option
         BCT   R6,CRASH53B             next option
*endloop
*
*        User entered CRASH =xxx: stack commands
*
         LR    R6,R8                   l'opt8
         BCTR  R6,0                    skip "="
         LA    R5,OPT8(R6)             last option
*loop
CRASH54  EQU   *
         CLI   0(R5),C'L'              CRASH =L (LOGONCMD)
         BE    CRASH54L                yes, jump
         CLI   0(R5),C'I'              CRASH =I (ISPF)
         BE    CRASH54I                yes, jump
*
*        If the user entered CRASH =P, retrieve the PARM
*        specified in the TSO LOGON procedure.
*
CRASH54P L     R14,PSATOLD-PSA         job step control block
         USING TCB,R14
         L     R14,TCBJSCB             job step control block
         USING IEZJSCB,R14
         L     R14,JSCSCT              Current step's SCT prefix
         USING INSMSCT-16,R14
         LH    R8,SCTSEXEC             parm length
         ICM   R14,B'0111',SCTXBTTR    address of SCTX (SCT extension)
         USING SCTXIN-16,R14
         LA    R7,SCTXPARM             TMP PARM
         LTR   R8,R8                   is there a PARM?
         BNZ   CRASH54S                yes, issue STACK
         B     CRASH54N                no, continue
         DROP  R14
*
*        If the user entered CRASH =L, retrieve the command
*        the user specified on the TSO/E LOGON panel.
*
CRASH54L L     R1,PSAAOLD-PSA          MY ASCB
         L     R2,ASCBASXB-ASCB(,R1)   MY ASXB
         L     R3,ASXBLWA-ASXB(,R2)    LOGON WORK AREA
         LA    R7,LWALGCMD-LWA(,R3)    LOGON command
         LA    R8,L'LWALGCMD           max length
         B     CRASH54S                issue STACK
*
*        If the user entered CRASH =I, retrieve the command
*        used to invoke ISPF.
*
CRASH54I LA    R7,RACFWORK             work area
         LA    R8,L'RACFWORK           max length
         ST    R8,DWD                  max length
         ISPLINK ($VCOPY,=C'ZTSICMD ',DWD,(R7),$MOVE)
         L     R8,DWD                  get length of ZTSICMD
*
CRASH54S EQU   *
         BAL   R14,CRASH58          <- build LSD and issue STACK macro
CRASH54N EQU   *
         BCTR  R5,0                    prev option
         BCT   R6,CRASH54              prev option
*endloop
         B     CRASH71                 continue
*
*        Build List Source Descriptor (LSD) and issue STACK macro
*
CRASH58  BAKR  R14,0
         LA    R0,LSD_LENGTH(R8)       length of the LSD + text
         GETMAIN RU,LV=(0),SP=78,LOC=BELOW
         LR    R9,R1                   ADDRESS OF THE LSD
         USING LSD,R9
         XC    LSD(LSD_LENGTH),LSD     Clear LSD
         LA    R1,LSD+LSD_LENGTH       POINT TO IN-STORAGE LIST
         ST    R1,LSDADATA             save addr into LSD
         ST    R1,LSDANEXT             save addr into LSD
         STH   R8,LSDTOTLN             store total length
         STH   R8,LSDRCLEN             length of F-len rec
         STRING ((R7),(R8)),INTO=(LSD+LSD_LENGTH,(R8))
         DROP  R9                      LSD
*
         L     R5,TSIECTP              ECT ADDRESS
         L     R6,TSIUPTP              UPT ADDRESS
         STACK PARM=STACKL,ECT=(R5),UPT=(R6),ECB=DWD,                  X
               STORAGE=((R9),PROCL),MF=(E,TENWORDS)
         PR
*
*        Invalid option string
*
CRASH59  EQU   *
         STRING 'Invalid Option',INTO=SHORTMSG
         STRING 'Option "',(OPT,,T),'" is invalid, should be "=pli"',  X
               INTO=LONGMSG
         MVI   ALARM,C'Y'              error, beep.
         BAL   R14,SETMSG              send message
         LA    R1,4                    Exit with rc=(15)
         PR
*---------------------------------------------------------------------*
*                                                                     *
*        If CRASH is entered without any operand, reset the ECTIOWA   *
*        field in the primary ECT to the value it contained when ISPF *
*        was entered.  This ensures that, if ISPF is invoked from a   *
*        CLIST, processing will resume at the next CLIST statement.   *
*                                                                     *
*---------------------------------------------------------------------*
CRASH61  EQU   *
         L     R4,TSITPDP              A(TPD)
         USING TPD,R4
         CLC   =C'TPD',TPDTBLID        am I lost?
         BNE   CRASH69                 yes, exit
         L     R4,TPDDTLDP             A(TLD0)
         USING TLD,R4
         CLC   =C'TLD0',TLDTBLID       am I lost?
         BNE   CRASH69                 yes, exit
         L     R5,TLDECTP              load ECT Address
         USING ECT,R5
         MVC   ECTIOWA,TLDIOWA         restore ECT Address
         DROP  R4,R5                   TLD,ECT
CRASH69  EQU   *
*---------------------------------------------------------------------*
*                                                                     *
*        Close Referral list tables                                   *
*                                                                     *
*---------------------------------------------------------------------*
CRASH71  EQU   *
         STRING 'TBCLOSE ISRJLIST LIBRARY(ISPPROF)',INTO=COMMAND
         BAL   R14,ISPEXEC             close referal list
         STRING 'TBCLOSE ISRLLIST LIBRARY(ISPPROF)',INTO=COMMAND
         BAL   R14,ISPEXEC             close referal list
         STRING 'TBCLOSE ISRPLIST LIBRARY(ISPPROF)',INTO=COMMAND
         BAL   R14,ISPEXEC             close referal list
         STRING 'TBCLOSE ISRRLIST LIBRARY(ISPPROF)',INTO=COMMAND
         BAL   R14,ISPEXEC             close referal list
*---------------------------------------------------------------------*
*                                                                     *
*        Terminate ISPF by abending the IKJEFT09 sub-task             *
*                                                                     *
*---------------------------------------------------------------------*
CRASH81  EQU   *
         LA    R1,CRASH85              address of the abend routine
         STRING ((R1),,X),INTO=URPNAME address in EBCDIC
         IDENTIFY EPLOC=URPNAME,ENTRY=(R1)
         BAL   R14,EXECURP          <- Execute CRASH75 as a URP
CRASH85  ABEND X'222',,,SYSTEM         This is my URP !!!
***********************************************************************
*                                                                     *
*        Function='D,dsname,member,NOENQ' (Delete Member)             *
*                                                                     *
***********************************************************************
DELMBR   BEGIN_PROC
         BAL   R14,PARSE3              parse options
         STRING 'LMINIT DATAID(ID1) DATASET(''',(OPT,,T),              X
               '''),ENQ(SHRW)',INTO=COMMAND
         BAL   R14,ISPEXEC          <- execute command
         LTR   R15,R15                 COMMAND OK ?
         BNZ   DELMBR99                NO, EXIT
         LA    R0,L'DATAID             max length
         ST    R0,DWD                  max length
         ISPLINK ($VCOPY,=C'ID1 ',DWD,DATAID,$MOVE),ERRET=DELMBR99
         STRING 'LMOPEN DATAID(',DATAID,') OPTION(OUTPUT)',            X
               INTO=COMMAND
         BAL   R14,ISPEXEC          <- execute command
         LTR   R15,R15                 COMMAND OK ?
         BNZ   DELMBR98                NO, EXIT
         STRING 'LMMDEL DATAID(',DATAID,') MEMBER(',(PARM3,,T),')',    X
               INTO=COMMAND
         CLI   PARM4,C' '              NOENQ?
         BE    DELMBR85                NO, JUMP
         CLI   ISPFVM,X'41'            ISPF V4 or up?
         BL    DELMBR85                NO, JUMP
         STRING (COMMAND,,T),1X,PARM4,INTO=COMMAND
DELMBR85 EQU   *
         BAL   R14,ISPEXEC          <- execute command
         LTR   R15,R15                 COMMAND OK ?
         BNZ   DELMBR98                NO, EXIT
         STRING 'Member Deleted',INTO=SHORTMSG
         STRING 'Member ''',(OPT,,T),'(',(PARM3,,T),                   X
               ')'' has been deleted',INTO=LONGMSG
         BAL   R14,SETMSG              send message
DELMBR98 EQU   *
         LR    R7,R15                  save return code
         STRING 'LMFREE DATAID(',DATAID,')',INTO=COMMAND
         BAL   R14,ISPEXEC          <- execute command
         LR    R15,R7                  restore return code
DELMBR99 EQU   *
         LA    R1,4                    Exit with rc=(15)
         PR                            command failed
***********************************************************************
*                                                                     *
*        PARM='EXECPGM,pgm<,parm>' (EXEC PGM from Link-list)          *
*                                                                     *
***********************************************************************
EXECPGM  BEGIN_PROC
         BAL   R14,PARSE3              parse options
         STRING (PARM3,,T),INTO=(STRING1+2,L'STRING1-2)
         STH   R15,STRING1             length of parm
         LA    R0,STRING1              addr of parm
         ST    R0,PARMLIST             build parm
         OI    PARMLIST,X'80'          build parm
         LA    R1,PARMLIST             A(PARM)
         L     R2,CVTPTR               CVT address
         L     R2,CVTLINK-CVTMAP(,R2)  DCB for SYS1.LINKLIB
         ATTACH EPLOC=OPT,ECB=DWD,TASKLIB=(R2),SF=(E,ATTACHL)
         ST    R1,DWD+4                save TCB address
         WAIT  1,ECB=DWD               wait for completion
         DETACH DWD+4                  detach sub-task
         LH    R15,DWD+2               return code
         LA    R1,4                    Exit with rc=(15)
         PR
***********************************************************************
*                                                                     *
*        FUNCTION=FSPASTE  (full-screen paste)                        *
*                                                                     *
***********************************************************************
FSPASTE  BEGIN_PROC
         GTSIZE ,                      get screen size
         ST    R0,ZSCREEND             SCREEN DEPTH (ROWS)
         ST    R1,ZSCREENW             SCREEN WIDTH (COLUMNS)
         MR    R0,R0                   screen end = rows * columns
         LR    R3,R1                   pass screen size
         GETMAIN R,LV=(R3)             GET FULL-SCREEN BUFFER
         LR    R4,R1                   pass address
         MVC   PARM3(9),=X'C3,11,4040,13,3C,0,0,40' WCC,SBA,1,1,IC,RA
         LR    R0,R3                   screen length
         BCTR  R0,0                    minus one
         STCM  R0,B'0011',PARM3+6      BINARY SCREEN ADDR (14 BITS)
         STRING 'CONTROL DISPLAY ','SAVE',INTO=COMMAND
         BAL   R14,ISPEXEC          <- execute command
*
*        If we're in 24X80 mode on a model 5,
*        tell ISPF to clear the screen
*
         L     R1,TLD@                 R1->TLD
         L     R1,TLDMPSWD-TLD(,R1)    max line width
         CL    R1,ZSCREENW             SIZE=MAX?
         BE    FSPASTE3                yes, do not clear screen
         STRING 'CONTROL DISPLAY ','LINE START(1)',INTO=COMMAND
         BAL   R14,ISPEXEC          <- execute command
FSPASTE3 EQU   *
         TPUT  PARM3,9,FULLSCR         CLEAR THE SCREEN WITH SPACES
         LTR   R15,R15                 TPUT OK?
         BNZ   FSPASTE8                NO, EXIT
         TGET  (R4),(R3)               READ REPLY
         LTR   R15,R15                 TGET OK?
         BNZ   FSPASTE8                NO, EXIT
         STRING ((R4),(R1),T),INTO=((R4),(R3)) find end of data
         SLR   R14,R14
         D     R14,ZSCREENW            calculate number of lines
         ST    R15,DWD+4               save it for RDRTNE
         ST    R4,DWD                  PASS BUFFER ADDRESS
         ISPLINK (=C'EDIF',            ISPF SERVICE                    X
               FSPASTE7,               Title                           X
               =C'FSPASTE ',           PROFILE NAME                    X
               =C'F ',                 RECFM                           X
               ZSCREENW,               LRECL                           X
               =A(RDRTNE),             READ ROUTINE                    X
               =A(WRITERTN),           WRITE ROUTINE                   X
               0,                      COMMAND EXIT                    X
               DYNAM)                  PARM FOR READ ROUTINE
FSPASTE8 FREEMAIN R,LV=(R3),A=(R4)     FREE FULL-SCREEN BUFFER
         STRING 'CONTROL DISPLAY ','RESTORE',INTO=COMMAND
         BAL   R14,ISPEXEC          <- execute command
         LA    R1,4                    exit
         PR
FSPASTE7 DC    C'Full-Screen
*
         PUSH  USING
         DROP
RDRTNE   SAVE  (14,12),,FSPASTE-RDRTNE
         LR    R12,R15
         USING RDRTNE,R12
         L     R11,12(,R1)             PTR TO DIALOG DATA AREA
         L     R11,0(,R11)             A(DYNAM)
         USING DYNAM,R11
         L     R6,00(,R1)              RECORD ADDR
         L     R5,CURRLINE             CURRENT LINE NUMBER
         CL    R5,ZSCREEND             LAST LINE ?
         BE    RDRTN88                 YES, EXIT
 ORG *-8
         CL    R5,DWD+4                LAST LINE ?
         BH    RDRTN88                 YES, EXIT
         LA    R0,1(,R5)               NEXT LINE
         ST    R0,CURRLINE             NEXT RECORD
         MH    R5,ZSCREENW+2           MULT BY LINE LENGTH
         AL    R5,DWD                  CHANGE OFFSET TO ADDRESS
         ST    R5,0(,R6)               PASS DATA ADDRESS
         RETURN (14,12),RC=0           GOBACK TO EDIT
RDRTN88  RETURN (14,12),RC=8           GOBACK TO BRIF
*
WRITERTN LA    R15,0                   simulate successful write
         BR    R14                     GOBACK
         POP   USING
***********************************************************************
*                                                                     *
*        PARM='FTINCL,&skel,&panel,&applid'                           *
*                                                                     *
*              opt=&skel,parm3=&panel,parm4=&applid                   *
*                                                                     *
***********************************************************************
FTINCL   BEGIN_PROC
         BAL   R14,PARSE3              parse options
         CLI   PARM4,C' '              APPLID SPECIFIED?
         BE    FTINCL2                 NO, DO NOT SWITCH APPLID
         MVC   NEWAPPL,PARM4           MOVE APPLID
         CLC   ZAPPLID,NEWAPPL         Current APPL OK?
         BE    FTINCL2                 yes, continue
         LA    R1,8                    no, switch to APPL=PARM4
         PR
FTINCL2  EQU   *
         CLI   PARM3,C' '              ENTER PANEL?
         BE    FTINCL3                 NO, JUMP
* ISPEXEC DISPLAY PANEL(&panel)
         STRING 'DISPLAY PANEL(',(PARM3,,T),')',INTO=COMMAND
         BAL   R14,ISPEXEC          <- execute command
         LTR   R15,R15
         BNZ   FTINCL9                 RC>0 (ERROR)
* ISPEXEC FTOPEN TEMP
FTINCL3  STRING 'FTOPEN TEMP',INTO=COMMAND
         BAL   R14,ISPEXEC          <- execute command
         CH    R15,=H'8'
         BH    FTINCL9                 RC>8 (ERROR)
* ISPEXEC FTINCL &skel
         STRING 'FTINCL ',OPT,INTO=COMMAND
         BAL   R14,ISPEXEC          <- execute command
         LR    R7,R15                  SAVE RETURN CODE
* ISPEXEC FTCLOSE
         STRING 'FTCLOSE ',INTO=COMMAND
         BAL   R14,ISPEXEC          <- execute command
         LTR   R15,R7                  ERROR IN FTINCL?
         BNZ   FTINCL9                 RC>0 (ERROR)
* ISPEXEC SELECT PGM(FASTPATH) PARM(CNTL)
         MVC   NEWPGM,OWNNAME          PGM(FASTPATH)
         STRING 'CNTL',INTO=OPT        PARM(CNTL)
         LA    R1,0                    Execute command
         PR
FTINCL9  EQU   *
         LA    R1,4                    Exit with rc=(15)
         PR
***********************************************************************
*                                                                     *
*        Function=ICS   (ISPF Command Shell)                          *
*                                                                     *
***********************************************************************
ICS      BEGIN_PROC
         MVC   NEWPGM,=CL8'ISRRCL'     NEW PROGRAM
         MVC   OPT(2),=C'C1'           PARM
         CLI   ISPFVM,X'40'            ISPF 4.1 or up?
         BH    ICS8                    yes, jump
         MVC   NEWPGM,=CL8'ISRPTC'     NEW PROGRAM (ISPF 3.x)
         MVC   OPT,BLANKS              NO PARM
ICS8     LA    R1,0                    Invoke ISPF service
         PR
***********************************************************************
*                                                                     *
*        FUNCTION=EDIT, BROWSE, VIEW, WP                              *
*                                                                     *
***********************************************************************
EDBRVIWP BEGIN_PROC
         BAL   R14,PARSE3              parse options
         MVC   PROF,PARM3              EDIT profile
         CLI   FUNCTION,C'W'           PARM=WP?
         BNE   EDBR010                 no, jump
         CLI   ISPFVM,X'42'            ISPF 4.2 or up?
         BNL   EDBR010                 yes, jump
         STRING '%DSLIST',INTO=NEWCMD  TSO %DSLIST
         B     EDBR980                 execute command
*
EDBR010  CLI   OPT,C' '                OPT=''?
         BE    EDBR700                 yes, jump
         CLI   FUNCTION+1,C' '         PARM=E/B/V  direct browse/edit
         BE    EDBR800                 yes, jump there
*
         CLI   PLUSSIGN,C'+'           start new screen?
         BE    EDBR9816                yes, do it
*---------------------------------------------------------------------*
*                                                                     *
*        I've been invoked with PARM='EDIT,opt' or 'BROWSE,opt'.      *
*                                                                     *
*---------------------------------------------------------------------*
EDBR020  CLC   ZAPPLID,NEWAPPL         Current APPL OK?
         BNE   EDBR_ISR                no, jump
         OC    OPT,BLANKS              convert to uppercase
*
*        Define profile variables used on EDIT/BROWSE panels
*
         ISPLINK ($VDEFINE,VARLIST,PRJ1,$CHAR,=F'8')
         ISPLINK ($VDEFINE,=C'ZWRKVOL ',ZWRKVOL,$CHAR,=F'6')
         ISPLINK ($VDEFINE,=C'ZREFTYPE ',ZREFTYPE,$CHAR,=F'1')
         ISPLINK ($VDEFINE,=C'ZWRKDSN ',ZWRKDSN,$CHAR,=A(L'ZWRKDSN))
*
*        Check for ED MY.DATA.SET or ED CLIST(MBR)
*
         CLC   =C'* ',OPT              previous data set?
         BE    EDBR620                 yes, jump
         CLI   OPT,C''''               fully-qualified dsname?
         BE    EDBR660                 yes, jump
         CLC   =C'/ ',OPT              reflist?
         BE    EDBR580                 yes, jump
         CLI   OPT+0,C'/'              work-station file (UNIX) ?
         BE    EDBR900                 yes, jump
         CLI   OPT+0,C'~'              work-station file (?) ?
         BE    EDBR900                 yes, jump
         CLI   OPT+1,C':'              work-station file (DOS, OS/2) ?
         BE    EDBR900                 yes, jump
         CLI   OPT+6,C':'              volser:dsname?
         BE    EDBR670                 yes, exit
         LA    R1,OPT                  1st pos of dsname
         LA    R2,9                    search 9 characters
*loop
EDBR031  CLI   0(R1),C'.'              does this look like a dsname?
         BE    EDBR670                 yes, exit
         CLI   0(R1),C'*'              does this look like a dsname?
         BE    EDBR670                 yes, exit
         CLI   0(R1),C'%'              does this look like a dsname?
         BE    EDBR670                 yes, exit
         CLI   0(R1),C'('              does this look like a dsname?
         BE    EDBR670                 yes, exit
         CLI   0(R1),C'/'              volser at the end?
         BE    EDBR670                 yes, exit
         LA    R1,1(,R1)               bump index up
         BCT   R2,EDBR031              scan rest of dsname
*endloop
*
*        Get the value of the EDBR0000 profile variable.  It contains
*        the highest nnnn ever assigned to an EDBRnnnn variable.
*
EDBR080  ISPLINK ($VDEFINE,$EDBR0000,EDBR0000,$CHAR,=F'4')
         LA    R6,1                    index
         MVC   EDBRNNNN,$EDBR0000      EDBR0000
         MVI   EDBRNNNN+7,C'1'         EDBR0001
         LA    R1,=A($VGET,$EDBR0000+VL)
         LINK  SF=(E,ISPLINK$)         VGET EDBR0000
         LTR   R15,R15                 first time ever?
         BNZ   EDBR193                 yes, jump
         PACK  DWD,EDBR0000            Z'0123' -> P'123'
         CVB   R7,DWD                  high water-mark
*---------------------------------------------------------------------*
*                                                                     *
*        Scan all EDBRnnnn variables for &OPT                         *
*                                                                     *
*---------------------------------------------------------------------*
*LOOP
EDBR111  CVD   R6,DWD                  NNN%
         OI    DWD+7,15                NNNN
         UNPK  EDBRNNNN+4(4),DWD       EDBRNNNN
         ISPLINK ($VGET,EDBRNNNN),ERRET=EDBR180
         LA    R0,L'STRING1            max length of variable
         ST    R0,DWD                  max length of variable
         ISPLINK ($VCOPY,EDBRNNNN,DWD,STRING1,$MOVE),                  X
               ERRET=EDBR180
         LA    R4,STRING1              VARIABLE VALUE
         L     R5,DWD                  VARIABLE LENGTH
         BAL   R14,PARSE_PARM          split OPT2
         DC    S(L'OPT2,OPT2)          search argument
         DC    S(L'PRJ1,PRJ1)
         DC    S(L'LIB1,LIB1)
         DC    S(L'LIB2,LIB2)
         DC    S(L'LIB3,LIB3)
         DC    S(L'LIB4,LIB4)
         DC    S(L'TYP1,TYP1)
         DC    S(L'PROF,PROF)
         DC    S(L'MIX,MIX)
         DC    S(L'FNAM,FNAM)
         DC    S(L'ZEDLOCK,ZEDLOCK)
         DC    S(L'ZEDLOCKP,ZEDLOCKP)
         DC    S(L'ZPCFMCN,ZPCFMCN)
         DC    S(L'ZVIEW,ZVIEW)
         DC    S(L'ZVIMAC,ZVIMAC)
         DC    S(L'ZVPROF,ZVPROF)
         DC    S(L'ZREFTYPE,ZREFTYPE)  WP SHELL
         DC    S(L'ZWRKVOL,ZWRKVOL)    WP SHELL
         DC    S(L'ZWRKDSN,ZWRKDSN)    WP SHELL
         DC    S(L'ZEDITWS,ZEDITWS)    view/edit 4.2
         DC    S(L'ZVIEWWS,ZVIEWWS)    view/edit 4.2
         CLC   OPT,OPT2                IS THIS WHAT I'M LOOKING FOR?
         BNE   EDBR190                 NO, TRY NEXT ONE
         OC    ZREFTYPE(L'ZREFTYPE+L'ZWRKVOL+L'ZWRKDSN),BLANKS
         CLI   ZREFTYPE,C' '           FIRST TIME?
         BNE   *+8                     NO, JUMP
         MVI   ZREFTYPE,C'L'           YES, DEFAULT TYPE IS LIBRARY
         CLI   ZVPROF,C' '             FIRST TIME?
         BNE   *+10                    NO, JUMP
         MVC   ZVPROF,PROF             YES, COPY EDIT PROFILE
         CLI   PROF,C' '               FIRST TIME?
         BNE   *+10                    NO, JUMP
         MVC   PROF,ZVPROF             YES, COPY VIEW PROFILE
         B     EDBR200                 exit loop
*
EDBR180  ICM   R0,B'1111',GAP          first gap?
         BNZ   EDBR190                 no, jump
         ST    R6,GAP                  yes, remember it
EDBR190  LA    R6,1(,R6)               increment index
         CLR   R6,R7                   hwm reached yet?
         BNH   EDBR111                 next EDBRnnnn variable
*ENDLOOP
*---------------------------------------------------------------------*
*                                                                     *
*        &OPT has not been found in the profile variables;            *
*        Check if it's a user data set such as CLIST                  *
*                                                                     *
*---------------------------------------------------------------------*
         CLI   ZPREFIX,C' '            ZPREFIX=''?
         BE    EDBR192                 yes, jump
         STRING (ZPREFIX,,T),'.',(OPT,,T),INTO=ZWRKDSN
         BAL   R14,LISTDSI             check existence of data set
         LTR   R15,R15                 RC=0 from LOCATE?
         BNZ   EDBR192                 no, jump
         MVC   OPT2,OPT                restore dsname
         B     EDBR677                 yes, jump
*---------------------------------------------------------------------*
*                                                                     *
*        Assign the next available EDBRnnn number.                    *
*                                                                     *
*---------------------------------------------------------------------*
EDBR192  EQU   *
         STRING 'Tag ',(OPT,,T),INTO=STRING1,                          X
               ' does not exist; enter Y to create it:'
         TPUT  STRING1,(R15),ASIS      write message (WRITENR)
         TGET  DWD,1                   get reply (one byte only)
         OI    DWD,C' '                uppercase
         CLI   DWD,C'Y'                REPLY=Y ?
         BNE   EDBR998                 no, exit with rc=8
*
         ICM   R0,B'1111',GAP          did we find a gap?
         BNZ   EDBR194                 yes, jump
*
*        no gap found, use hwm+1 and update EDBR0000
*
EDBR193  CVD   R6,DWD                  NNN%
         OI    DWD+7,15                NNNN
         UNPK  EDBR0000,DWD            NNNN
         LA    R1,=A($VPUT,$EDBR0000,$PROFILE+VL)
         LINK  SF=(E,ISPLINK$)         VPUT EDBR0000 PROFILE
         LR    R0,R6                   gap=hwm+1
*
*        reuse first gap
*
EDBR194  CVD   R0,DWD                  NNN%
         OI    DWD+7,15                NNNN
         UNPK  EDBRNNNN+4(4),DWD       EDBRNNNN
*
EDBR196  XC    STRING1,STRING1         clear work area
         BAL   R14,ZVIEW00             set ZVIEW to YES/NO for VI/BR
         BAL   R14,VPUT00              update EDBRnnnn variable
         B     EDBR500                 do edit/browse
*---------------------------------------------------------------------*
*                                                                     *
*        &OPT has been found in the profile.                          *
*        pass PRJ1-ZEDLOCKP values to edit/browse                     *
*                                                                     *
*---------------------------------------------------------------------*
EDBR200  BAL   R14,ZVIEW00             set ZVIEW to YES/NO for VI/BR
         LA    R1,=A($VPUT,VARLIST+VL)
         LINK  SF=(E,ISPLINK$)         VPUT (&VARLIST)
         LA    R1,=A($VPUT,VARLISTW+VL)
         LINK  SF=(E,ISPLINK$)         VPUT (&VARLISTW)
*---------------------------------------------------------------------*
*                                                                     *
*        Display the EDIT, BROWSE or VIEW Entry Panel                 *
*                                                                     *
*---------------------------------------------------------------------*
EDBR500  STRING 'PGM(ISREDIT) PARM(P,ISREDM01)',INTO=COMMAND
         CLI   FUNCTION,C'E'           FUNCTION=E?
         BE    EDBR530                 yes, jump
         STRING 'PGM(ISRUDA) PARM(ISRWORK)',INTO=COMMAND
         CLI   FUNCTION,C'W'           FUNCTION=W?
         BE    EDBR530                 yes, jump
         STRING 'PGM(ISRBRO) PARM(ISRBRO01)',INTO=COMMAND
EDBR530  ISPLINK ($SELECT,=A(L'COMMAND),COMMAND)
*
*        The user has modified the values of PRJ1-ZEDLOCKP
*        Update the corresponding EDBRnnnn variable
*
         BAL   R14,VPUT00              update EDBRnnnn variable
*
*        Delete all variables in function pool
*
         LA    R1,=A($VRESET+VL)
         LINK  SF=(E,ISPLINK$)         VRESET
         B     EDBR990                 exit
***********************************************************************
*                                                                     *
*        Edit, Browse and View with data-set reference list           *
*                                                                     *
*          PARM='EDIT,/'                                              *
*                                                                     *
***********************************************************************
EDBR580  CLC   ZAPPLID,NEWAPPL         Current APPL OK?
         BNE   EDBR_ISR                no, switch applid
         ISPLINK ($VREPLACE,=C'ZREFMDE ',=F'2',=C'ON')  ZREFMDE='ON'
         STRING 'PGM(ISRDSLST) PARM(PL1 REFLIST) SUSPEND',INTO=COMMAND
         CLI   ISPFVM,X'48'            ISPF 4.8 or up?
         BNL   EDBR581                 yes, jump
         STRING 'PGM(ISRDSLST) PARM(RL1) SUSPEND',INTO=COMMAND
EDBR581  EQU   *
         ISPLINK ($SELECT,=A(L'COMMAND),COMMAND)
         ISPLINK ($VGET,=C'(ZRDSN ZRVOL)',=C'SHARED')
         LA    R0,L'OPT                max length
         ST    R0,OPTLEN               max length
         ISPLINK ($VCOPY,=C'ZRDSN ',OPTLEN,OPT,$MOVE),ERRET=EDBR920
         LA    R0,L'BRVOL              max length
         ST    R0,DWD                  max length
         ISPLINK ($VCOPY,=C'ZRVOL ',DWD,BRVOL,$MOVE)
         STRING 'VERASE ','(ZRDSN ZRVOL ZREFMDE) SHARED',INTO=COMMAND
         BAL   R14,ISPEXEC          <- execute command
*
         CLI   OPT,C' '                dsname returned?
         BE    EDBR994                 no, exit with rc=4
*
*        check for a work-station file name
*
         CLI   OPT+0,C'/'              work-station file (UNIX) ?
         BE    EDBR900                 yes, jump
         CLI   OPT+0,C'~'              work-station file (?) ?
         BE    EDBR900                 yes, jump
         CLI   OPT+1,C':'              work-station file (DOS, OS/2) ?
         BE    EDBR900                 yes, jump
 ORG *-24 WSFN can't happen in ISPF 4.5
         MVC   OPT2,OPT                copy dsname
         CLI   OPT,C''''               dsname enclosed in apostrophes?
         BE    EDBR660                 yes, remove them
         B     EDBR670                 no, add prefix
***********************************************************************
*                                                                     *
*        Direct Edit, Browse and View (CNAEBROW/CNAEEDIT)             *
*                                                                     *
*          PARM='EDIT,CLIST(MBR)'                                     *
*                                                                     *
***********************************************************************
*
*        Retrieve BRDSN/BRMEM when invoked with 'EDIT,*'
*
EDBR620  EQU   *
         LA    R0,L'OPT                max length
         ST    R0,OPTLEN               max length
         ISPLINK ($VCOPY,=C'BRDSN ',OPTLEN,OPT,$MOVE),ERRET=EDBR920
         LA    R0,L'OPT8               max length
         ST    R0,DWD                  max length
         ISPLINK ($VCOPY,=C'BRMEM ',DWD,OPT8,$MOVE),ERRET=EDBR626
         CLI   OPT8,C' '               do we have a member name?
         BE    EDBR626                 yes, jump
         STRING (OPT,,T),'(',(OPT8,,T),')',INTO=OPT
         ST    R15,OPTLEN              update length
EDBR626  EQU   *
         LA    R0,L'BRVOL              max length
         ST    R0,DWD                  max length
         ISPLINK ($VCOPY,=C'BRVOL ',DWD,BRVOL,$MOVE)
         B     EDBR800
*
*        Remove apostrophes that surround a fully-qualified dsname
*
EDBR660  EQU   *
         L     R1,OPTLEN               get L'&OPT
         BCTR  R1,0                    minus 1
         BCTR  R1,0                    minus 2
         STRING (OPT2+1,(R1)),INTO=OPT remove surrounding quotes
         ST    R15,OPTLEN              update length
         BAL   R14,EDBR690             Extract /VOLSER
         B     EDBR680
*
*        Prefix &zprefix to a non fully-qualified dsname
*
EDBR670  EQU   *
         BAL   R14,EDBR690             Extract /VOLSER
         CLI   BRVOL,C' '              BRVOL=''?
         BH    EDBR680                 no, jump
         CLI   ZPREFIX,C' '            ZPREFIX=''?
         BE    EDBR680                 yes, jump
         STRING (ZPREFIX,,T),'.',(OPT,,T),INTO=ZWRKDSN
         BAL   R14,LISTDSI             check catalog status
         LTR   R15,R15                 found in catalog?
         BZ    EDBR677                 yes, jump
         MVC   ZWRKDSN,OPT2            no prefix
         BAL   R14,LISTDSI             check catalog status
         LTR   R15,R15                 found in catalog?
         BNZ   EDBR800                 no, quit
EDBR677  EQU   *
         STRING (ZPREFIX,,T),'.',(OPT2,,T),INTO=OPT
         STRING (ZWRKDSN,,T),INTO=OPT
         ST    R15,OPTLEN              update length
*
*        Update BRDSN/BRMEM/BRVOL in profile
*
EDBR680  EQU   *
         OC    OPT,BLANKS              UPPER-CASE
         OC    BRVOL,BLANKS            UPPER-CASE
         ISPLINK ($VREPLACE,=C'BRDSN ',OPTLEN,OPT)
         ISPLINK ($VREPLACE,=C'BRMEM ',=F'1',BLANKS)    BRMEM=''
         ISPLINK ($VREPLACE,=C'BRVOL ',=F'6',BRVOL)
         ISPLINK ($VPUT,=C'(BRDSN BRMEM BRVOL)',$PROFILE)
         B     EDBR800                 invoke PDF service
*
*        Extract volser if dsname ends in /VOLSER
*
EDBR690  EQU   *
         L     R1,OPTLEN               length of dsname
         SH    R1,=H'7'                length of /SYSRES
         CLI   OPT+6,C':'              volser:dsname?
         BE    EDBR692                 yes, jump
         LA    R15,OPT(R1)             point to / in AA.BB.CC/SYSRES
         CLI   0(R15),C'/'             volser present at end of dsname?
         BNER  R14                     no, goback
         MVC   BRVOL,1(R15)            save volser
         MVC   0(7,R15),BLANKS         blank out /VOLSER
         B     EDBR697
EDBR692  EQU   *
         MVC   BRVOL,OPT               save volser
         MVC   OPT(L'OPT-7),OPT+7      blank out VOLSER:
EDBR697  EQU   *
         ST    R1,OPTLEN               adjust length
         MVC   OPT2,OPT                update copy of dsname
         BR    R14                     goback
***********************************************************************
*                                                                     *
*        No dsn or tag has been specified (OPT='').                   *
*        Check for a cursor-driven invocation                         *
*                                                                     *
***********************************************************************
EDBR700  BAL   R14,CURSOR              get dsn at cursor location
         LTR   R1,R1                   Dsname extracted?
         BNP   EDBR920                 no, jump
         STRING ((R1),(R0)),INTO=OPT
         ST    R15,OPTLEN              update length
*---------------------------------------------------------------------*
*                                                                     *
*        Check if the dsname contains a relative generation number    *
*        such as AA.BB(+1) or CC.DD(-2).  If one is found, replace    *
*        it with .G*V%% and force FUNCTION=W to allow the user to     *
*        obtain a dslist of all the generations in the catalog.       *
*                                                                     *
*---------------------------------------------------------------------*
         LA    R1,OPT                  START OF DSNAME
EDBR721  CLI   0(R1),C'('              member name?
         BE    EDBR723                 yes, exit loop
         LA    R1,1(,R1)               bump pointer
         BCT   R15,EDBR721             next character
         B     EDBR729                 exit
EDBR723  CLI   1(R1),C'+'              AA.BB.CC(+1) ?
         BE    EDBR725                 yes, jump
         CLI   1(R1),C'-'              AA.BB.CC(-1) ?
         BNE   EDBR729                 no, exit
EDBR725  STRING (OPT,(R1)),'.G*V%%',INTO=OPT
         ST    R15,OPTLEN              length of new dsname
         CLI   FUNCTION,C'W'           function=WP ?
         BE    EDBR729                 yes, exit
         STRING 'Relative Generation',INTO=SHORTMSG
&STR   SETC 'because the dsname contains a relative generation number.'
         STRING 'The ISPF WorkPlace has been invoked instead of ',     X
               (FUNCTION,,T),' &STR',INTO=LONGMSG
         MVI   ALARM,C'Y'              error, beep.
         BAL   R14,SETMSG              send message
         MVI   FUNCTION,C'W'           change B/E/V to W
         MVI   CMDNAME,C'W'            change BR/ED/VI to WP
         MVI   CMDNAME+1,C'P'          change BR/ED/VI to WP
EDBR729  EQU   *
*
*        If we have to start a new screen, build new cmd and exit
*
         CLI   PLUSSIGN,C'+'           start new screen?
         BNE   EDBR749                 no, continue
         STRING (CMDNAME,,T),1X,(OPT,,T),INTO=LONGMSG
         LA    R14,LONGMSG             TSOFS command ds.name
         STM   R14,R15,CMD@            update command for NEWSCREEN
         LA    R1,16                   r1=16: start new screen
         PR
EDBR749  EQU   *
*
         CLI   PROF,C' '               profile specified?
         BNE   EDBR800                 yes, jump
         MVC   PROF(3),=C'STD'         no, use default profile
***********************************************************************
*                                                                     *
*        Direct Edit, Browse and View                                 *
*                                                                     *
*          PARM='E,GILBERT.JCL(XYZ),STD'                              *
*                                                                     *
***********************************************************************
EDBR800  EQU   *
         CLC   ZAPPLID,NEWAPPL         Current APPL OK?
         BNE   EDBR_ISR                no, switch applid
*
*        Check for a migrated data set (B/E/V/W)
*
         CLI   BRVOL,0                 volser supplied?
         BNE   EDBR815                 yes, skip LISTDSI
         MVC   ZWRKDSN,OPT             move dsname for LISTDSI
         BAL   R14,LISTDSI             check catalog status
         LTR   R15,R15                 found in catalog?
         BNZ   EDBR817                 no, exit
EDBR815  EQU   *
         BAL   R14,CHKMIGR             check for a migrated data set
         LTR   R15,R15                 HRECALL denied?
         BZ    EDBR817                 no, exit
         CLI   FUNCTION,C'W'           FUNCTION=W?
         BNE   EDBR998                 no, exit with rc=8
EDBR817  EQU   *
*
*        delete () at end of dsname if no member has been specified
*
         L     R6,OPTLEN               L'&OPT
         LA    R1,OPT-2(R6)            last 2 chars of dsname
         CLI   0(R1),C'('              GILBERT.JCL()   ?
         BNE   EDBR818                 NO, JUMP
         MVC   0(2,R1),BLANKS          blank out ()
         BCTR  R6,0                    yes, delete ()
         BCTR  R6,0                    yes, delete ()
         ST    R6,OPTLEN               L'&OPT
EDBR818  EQU   *
*
         CLI   FUNCTION,C'W'           FUNCTION=W?
         BE    EDBR950                 yes, invoke Workplace
*
*        Check RACF authorization; change EDIT to VIEW if ACCESS(READ)
*
         STRING (OPT,(R6)),INTO=ZWRKDSN
         BAL   R14,RACHECK             check authorization
         CLI   RACHECK_ACCESS,ACCESS_READ ACCESS(READ) ?
         BL    EDBR880                 NO, FAIL
         BH    EDBR827                 ACCESS(UPDATE), jump
         CLI   FUNCTION,C'E'           EDIT?
         BNE   EDBR827                 no, jump
         MVI   FUNCTION,C'V'           EDIT->VIEW if ACCESS(READ)
EDBR827  EQU   *
*
*        Set up the BROWSE, EDIT or VIEW command
*
         CLI   FUNCTION,C'B'           BROWSE?
         BE    EDBR870                 yes, execute command
         STRING 'EDIT DATASET(''',(OPT,(R6)),''')',INTO=COMMAND
         CLI   FUNCTION,C'E'           EDIT?
         BE    EDBR855                 yes, jump
         CLI   ISPFVM,X'41'            ISPF 4.1 or up?
         BL    EDBR855                 no, jump
         MVC   COMMAND(4),=C'VIEW'     EDIT->VIEW
EDBR855  EQU   *
         CLI   PROF,C' '               profile specified?
         BE    EDBR856                 no, jump
         STRING (COMMAND,,T),' PROFILE(',(PROF,,T),')',INTO=COMMAND
EDBR856  EQU   *
         CLI   BRVOL,C' '              volser available?
         BNH   EDBR857                 no, jump
         STRING (COMMAND,,T),' VOLUME(',(BRVOL,,T),')',INTO=COMMAND
EDBR857  EQU   *
*
*        Invoke the BROWSE, EDIT or VIEW service.
*
EDBR860  LA    R15,L'COMMAND           length of command
         BAL   R14,ISPEXEC          <- execute command
         LTR   R7,R15                  DIALOG'S RETURN CODE
         BZ    EDBR907                 zero, jump
         B     EDBR990                 error, exit with rc=(r7)
*
*        If PGM(BR) is available, invoke it in case it's a VSAM file.
*
EDBR870  EQU   *
         MVC   NEWPGM,=CL8'BR'         VSAM BROWSE PGM
         LA    R1,NEWPGM               VSAM BROWSE PGM
         BAL   R14,JPASEARCH           Check for PGM(BR)
         LTR   R15,R15                 PGM(BR) available?
         BNZ   EDBR875                 no, use BROWSE service
         MVC   OPT2,OPT                fully-qualified dsname
         STRING (OPT2,,T),',',BRVOL,INTO=OPT for BR command
         B     EDBR980                 invoke PGM(BR) PARM(&dsn,&vol)
*
*        If PGM(BR) is not available, use the BROWSE service.
*
EDBR875  EQU   *
         STRING 'BROWSE DATASET(''',(OPT,(R6)),''')',INTO=COMMAND
         CLI   BRVOL,C' '              volser available?
         BNH   EDBR876                 no, jump
         STRING (COMMAND,,T),' VOLUME(',(BRVOL,,T),')',INTO=COMMAND
EDBR876  EQU   *
         B     EDBR_SVC                invoke ISPF service
*
EDBR880  EQU   *
         ISPLINK ($SETMSG,=C'ISPG132 ') Authorization Failed
         LA    R15,12                  DIALOG'S RETURN CODE
         B     EDBR990                 exit
***********************************************************************
*                                                                     *
*        Process a workstation file (EDIT/VIEW only)                  *
*                                                                     *
***********************************************************************
EDBR900  CLI   FUNCTION,C'B'           BROWSE?
         BE    EDBR909                 yes, error
         CLI   FUNCTION,C'W'           FUNCTION=W?
         BE    EDBR909                 yes, error
         L     R6,OPTLEN               L'&OPT
         ISPLINK ($VREPLACE,=C'WSFN ',OPTLEN,OPT)
         STRING 'EDIT WSFN(WSFN) PROFILE(WS)',INTO=COMMAND
         CLI   FUNCTION,C'E'           EDIT?
         BE    EDBR905                 yes, jump
         MVC   COMMAND(4),=C'VIEW'     EDIT->VIEW
EDBR905  LA    R15,L'COMMAND           length of command
         BAL   R14,ISPEXEC          <- execute command
         LTR   R7,R15                  Check EDIT/VIEW return code
         BNZ   EDBR990                 non-zero, exit
*
*        If EDIT returns RC=0, display "file saved" message
*
EDBR907  EQU   *
         CLI   FUNCTION,C'E'           EDIT?
         BNE   EDBR990                 NO, EXIT
         STRING 'File Saved',INTO=SHORTMSG
         STRING (OPT,(R6)),' has been saved',INTO=LONGMSG
         BAL   R14,SETMSG              send message
         LR    R15,R7                  DIALOG'S RETURN CODE
         B     EDBR990                 exit
*
EDBR909  STRING 'Not Supported',INTO=SHORTMSG
         STRING 'This Service does not support Work-station Files.',   X
               INTO=LONGMSG
         MVI   ALARM,C'Y'              error, beep.
         BAL   R14,SETMSG              send message
         B     EDBR998                 quit with RC=8
***********************************************************************
*                                                                     *
*        Not a cursor-driven invocation                               *
*        XCTL to ISREDIT/ISRBRO/ISRUDA directly                       *
*                                                                     *
***********************************************************************
EDBR920  CLI   PLUSSIGN,C'+'           start new screen?
         BE    EDBR9816                yes, do it
         CLI   FUNCTION,C'W'           FUNCTION=W?
         BE    EDBR960                 invoke ISPF service
         MVC   NEWPGM,$ISREDIT         EDIT PGM
         MVC   OPT(10),=C'P,ISREDM01'  EDIT PARM
         CLI   FUNCTION,C'E'           FUNCTION=E?
         BE    EDBR980                 invoke ISPF service
         CLC   ZAPPLID,NEWAPPL         Current APPL OK?
         BNE   EDBR_ISR                no, jump
         MVC   NEWPGM,$ISRBRO          BROWSE PGM
         MVC   OPT(10),=C'ISRBRO01  '  BROWSE PARM
         BAL   R14,ZVIEW00             set ZVIEW to YES/NO for VI/BR
         ISPLINK ($VREPLACE,=C'ZVIEW ',=F'3',ZVIEW)
         ISPLINK ($VPUT,=C'ZVIEW ',$PROFILE)
         B     EDBR980                 invoke ISPF service
***********************************************************************
*                                                                     *
*        Invoke the Work-place                                        *
*                                                                     *
***********************************************************************
EDBR950  STRING '''',(OPT,,T),INTO=ZWRKDSN
         ST    R15,DWD                 length of dsname
         ISPLINK ($VREPLACE,=C'ZWRKDSN ',DWD,ZWRKDSN)
         ISPLINK ($VREPLACE,=C'ZWRKVOL ',=F'6',BRVOL)   Volser
         ISPLINK ($VREPLACE,=C'ZREFTYPE ',=F'1',=C'D')  view=dataset
         LA    R1,=A($VPUT,VARLISTW,$PROFILE+VL)
         LINK  SF=(E,ISPLINK$)         VPUT (&VARLISTW) PROFILE
EDBR960  MVC   NEWPGM,$ISRUDA          Work-place
         STRING 'ISRWORK',INTO=OPT     WP PARM
EDBR980  EQU   *
         LA    R1,0                    invoke ISPF service
         PR
EDBR990  EQU   *                       rc=(15)
         LA    R1,4                    exit
         PR
EDBR994  LA    R15,4                   rc=4
         LA    R1,4                    exit
         PR
EDBR998  LA    R15,8                   rc=8
         LA    R1,4                    exit
         PR
EDBR_ISR EQU   *
         LA    R1,8                    R1=8:switch to APPL=ISR
         PR
EDBR_SVC LA    R1,12                   R1=12: other ISPF service
         PR
EDBR9816 EQU   *
**       STRING 'TSOFS ',((R7),(R8)),INTO=LONGMSG
**       LA    R14,LONGMSG             TSOFS command ds.name
**       STM   R14,R15,CMD@            update command for NEWSCREEN
         LA    R1,16                   r1=16: start new screen
         PR
***********************************************************************
*                                                                     *
*        Update the EDBRnnnn profile variable                         *
*                                                                     *
*          1.  retrieve the values the user has entered on the        *
*              EDIT/BROWSE panel or, if FUNCTION=WP, retrieve the     *
*              variables for the current view (data set or Library)   *
*                                                                     *
*          2.  compare with the previous values in STRING1;           *
*              if different, issue VREPLACE/VPUT                      *
*                                                                     *
***********************************************************************
VPUT00   BAKR  R14,0                   save return address
         CLI   FUNCTION,C'W'           FUNCTION=W?
         BNE   VPUT26                  no, jump
         LA    R1,=A($VGET,VARLISTW+1+VL)
         LINK  SF=(E,ISPLINK$)         VGET (ZREFTYPE)
         CLI   ZREFTYPE,C'L'           VIEW=LIBRARY ?
         BE    VPUT26                  yes, handle like EDIT
         LA    R1,=A($VGET,VARLISTW+VL)
         LINK  SF=(E,ISPLINK$)         VGET (&VARLISTW)
         OC    ZREFTYPE(L'ZREFTYPE+L'ZWRKVOL+L'ZWRKDSN),BLANKS
         B     VPUT28
VPUT26   EQU   *
         LA    R1,=A($VGET,VARLIST+VL)
         LINK  SF=(E,ISPLINK$)         VGET (&VARLIST)
VPUT28   EQU   *
         STRING (OPT,,T),',',(PRJ1,,T),',',(LIB1,,T),',',(LIB2,,T),',',X
               (LIB3,,T),',',(LIB4,,T),',',(TYP1,,T),',',(PROF,,T),',',X
               (MIX,,T),',',(FNAM,,T),',',(ZEDLOCK,,T),',',            X
               (ZEDLOCKP,,T),',',(ZPCFMCN,,T),',',(ZVIEW,,T),',',      X
               (ZVIMAC,,T),',',(ZVPROF,,T),',',                        X
               (ZREFTYPE,,T),',',(ZWRKVOL,,T),',',(ZWRKDSN,,T),',',    X
               (ZEDITWS,,T),',',(ZVIEWWS,,T),',', view/edit 4.2        X
               INTO=LONGMSG
         ST    R15,DWD                 length
         CLC   STRING1,LONGMSG         any variable changed?
         BE    VPUT99                  no, exit
         ISPLINK ($VREPLACE,EDBRNNNN,DWD,LONGMSG)
         ISPLINK ($VPUT,EDBRNNNN,$PROFILE)
VPUT99   PR                            return
VARLIST  DC    C'(PRJ1 LIB1 LIB2 LIB3 LIB4 TYP1 PROF MIX FNAM ZEDLOCK  X
               ZEDLOCKP ZPCFMCN ZVIEW ZVIMAC ZVPROF ZEDITWS ZVIEWWS)'
VARLISTW DC    C'(ZREFTYPE ZWRKVOL ZWRKDSN)' Work-place
***********************************************************************
*                                                                     *
*        Set ZVIEW to YES/NO for VIEW/BROWSE                          *
*                                                                     *
***********************************************************************
ZVIEW00  CLI   FUNCTION,C'B'           FUNCTION=BROWSE?
         BNE   *+10                    no, jump
         MVC   ZVIEW(3),=C'NO '        yes, set ZVIEW=NO
         CLI   FUNCTION,C'V'           FUNCTION=VIEW?
         BNER  R14                     no, goback
         MVC   ZVIEW(3),=C'YES'        yes, set ZVIEW=YES
         BR    R14                     goback
***********************************************************************
*                                                                     *
*        Function=LOAD (preload a REUS module)                        *
*                                                                     *
***********************************************************************
LOAD00   BEGIN_PROC OPT=YES
         ICM   R2,B'1111',LLIBDCB      LIBDEF ISPLLIB DCB
         BZ    LOAD11                  no LIBDEF DCB
         LOAD  EPLOC=OPT8,DCB=(R2),ERRET=LOAD11 check for S806-04
         B     LOAD12
LOAD11   LOAD  EPLOC=OPT8,ERRET=LOAD20 check for S806-04
LOAD12   CSVQUERY SEARCH=JPALPA,       SEARCH JPAQ                     +
               INEPNAME=OPT8,          EP name                         +
               OUTATTR1=ATTR1,         CDATTR                          +
               OUTLOADPT=LOADLEN,      load-point                      +
               OUTLENGTH=LOADLEN+4,    length                          +
               MF=(E,CSVQRYWK)         WORK AREA
         TM    ATTR1,CDSER             REUS module?
         BZ    LOAD30                  no, quit
         LA    R1,LOAD75               address of the LOAD routine
         STRING ((R1),,X),INTO=URPNAME address in EBCDIC
         IDENTIFY EPLOC=URPNAME,ENTRY=(R1)
         BAL   R14,EXECURP          <- Execute LOAD75 as a URP
         DELETE EPLOC=OPT8             delete at ISPTASK level
         STRING (OPT8,,T),' loaded',INTO=SHORTMSG
         STRING 'Module ',(OPT8,,T),                                   X
               ' loaded at address ',(LOADLEN,,X),                     X
               ', length ',(LOADLEN+5,3,X),'.',                        X
               INTO=LONGMSG
         B     LOAD49                  send message, set r15=0
*
*        Module not found (S806-04)
*
LOAD20   LR    R0,R15                  reason code
         STRING ((R1),,X),((R0),,X),INTO=STRING1     00000806,00000004
         STRING 'Module not loaded',INTO=SHORTMSG
         STRING 'Module ',(OPT8,,T),' was not loaded, abend S',        X
               (STRING1+5,3),'-',(STRING1+14,2),                       X
               INTO=LONGMSG
         B     LOAD48                  issue message, exit rc=8
*
*        Module is NOREUS
*
LOAD30   DELETE EPLOC=OPT8             delete at ISPTASK level
         STRING 'Not reusable',INTO=SHORTMSG
         STRING 'Module ',(OPT8,,T),' is not reusable.',               X
               INTO=LONGMSG
*
LOAD48   EQU   *
         MVI   ALARM,C'Y'              error, beep.
LOAD49   EQU   *
         BAL   R14,SETMSG              send message, set r15
*
LOAD50   LA    R1,4                    r1=4: exit
         PR
*
*        This code executes as a URP
*
         PUSH  USING
         DROP
LOAD75   BAKR  R14,0                   save regs
         L     R10,4(,R1)              A(DYNAM)
         L     R10,0(,R10)             A(DYNAM)
         USING DYNAM,R10
         LOAD  EPLOC=OPT8              load at TMP level
         PR
         POP   USING
***********************************************************************
*                                                                     *
*        Function=(MACLIB,&member,&profile)                           *
*                                                                     *
*            ALLOC DD($$MACLIB) DS('SYS1.MACLIB' 'SYS1.MODGEN') SHR   *
*            LMINIT DATAID(ID1) DDN($$MACLIB) ENQ(SHRW)               *
*            VIEW DATAID(&ID1) MEMBER(&OPT) PROFILE(STD)              *
*            LMFREE DATAID(ID1)                                       *
*                                                                     *
*        Check for the existence of additional macro libraries        *
*        based on the dsname table.                                   *
*                                                                     *
***********************************************************************
MACLIB   BEGIN_PROC APPL=ISR
         BAL   R14,PARSE3              parse options
         MVC   MACLIBDD,=CL8'$$MACLIB' MOVE DDNAME
         MVC   VIEWEDIT,=C'VIEW'       USE VIEW FOR MACLIB
         CLI   PARM3,C' '              profile specified?
         BNE   *+10                    yes, jump
         MVC   PARM3,=CL8'MACLIB'      no, use default profile
         DEVTYPE MACLIBDD,DWD
         LTR   R15,R15                 ALREADY ALLOCATED?
         BZ    MACLIB20                YES, JUMP
         BAL   R3,MACLIB10             branch around dsname table
         DC    AL1(11),C'SYS1.MACLIB'
         DC    AL1(11),C'SYS1.MODGEN'
         DC    AL1(14),C'TCPIP.SEZACMAC'
         DC    AL1(12),C'SYS1.PVTMACS'
         DC    AL1(11),C'CEE.SCEEMAC'
         DC    AL1(12),C'SYS1.AMODGEN'
         DC    AL1(12),C'SYS1.AMACLIB'
         DC    X'FF',0H'0'             end of table
MACLIB10 SLR   R4,R4                   init length
         SLR   R5,R5                   init dsn count
         STRING BLANKS,INTO=STRING1    init work area
*LOOP
MACLIB11 IC    R4,0(,R3)               length of dsname
         STRING (1(R3),(R4)),INTO=ZWRKDSN expand dsn to 44 chars
         CLI   1(R3),C'.'              .PVTMACS ?
         BNE   MACLIB12                no, jump
         STRING (ZUSER,,T),(1(R3),(R4)),INTO=ZWRKDSN
MACLIB12 XC    CATVOL,CATVOL           force LISTDSI to issue LOCATE
         BAL   R14,LISTDSI             check existence of PVTMACS
         LTR   R15,R15                 RC=0 from LOCATE?
         BNZ   MACLIB18                no, ignore
         BAL   R14,RACHECK             check authorization
         CLI   RACHECK_ACCESS,ACCESS_READ ACCESS(READ) ?
         BL    MACLIB18                no, ignore
         STRING (STRING1,,T),' ''',(ZWRKDSN,,T),'''',INTO=STRING1
         LA    R5,1(,R5)               count libraries
         CH    R5,=H'4'                ISPF maximum reached?
         BE    MACLIB20                yes, exit
MACLIB18 LA    R3,1(R4,R3)             next dsname
         CLI   0(R3),X'FF'             end of table?
         BNE   MACLIB11                no, try next dsname
*ENDLOOP
MACLIB20 EQU   *
         LTR   R5,R5                   any library selected?
         BZ    MACLIB98                no, exit
         BAL   R14,LMVIEW           <- VIEW/BROWSE
         LA    R1,4                    exit with rc=(15)
         PR
*
*        User doesn't have READ access to SYS1.MACLIB
*
MACLIB98 MVI   ALARM,C'Y'              error, beep.
         BAL   R14,SETMSG              send message, set r15=8
         LA    R1,4                    exit with rc=(15)
         PR
***********************************************************************
*                                                                     *
*        Function=NETSTAT (full-screen NETSTAT)                       *
*                                                                     *
*          "NETSTAT STACK" opt                                        *
*          PUSH;DO i=1 TO QUEUED();PARSE PULL l.i;END;l.i=""          *
*          CALL STEMDISP "BROWSE","L.",,i,"NETSTAT" opt               *
*                                                                     *
***********************************************************************
NETSTAT  BEGIN_PROC
         L     R1,CVTPTR               CVT address
         L     R2,CVTECVT-CVTMAP(,R1)  ECVT address
         ICM   R0,B'1111',ECVTTCP-ECVT(R2) TCP/IP 3.2 or above?
         BZ    NETSTAT8                no, exit
         CLC   ZAPPLID,NEWAPPL         Current APPL OK?
         BNE   NETSTAT7                no, switch applid
         STRING '"NETSTAT STACK ',(OPT,,T),'";cc=rc;PUSH;',            X
               'DO i=1 TO QUEUED();PARSE PULL l.i;END;l.i="";',        X
               'CALL STEMDISP "BROWSE","l.",,i,"NETSTAT ',(OPT,,T),    X
               '";EXIT cc',                                            X
               INTO=STRING1
         LA    R14,STRING1             addr of REXX stmt
         STM   R14,R15,DWD             store addr/len
         LA    R1,DWD                  FIRST STMT ADDR/LEN
         LA    R0,8                    LENGTH OF ADDR/LEN ARRAY
         SLR   R2,R2                   No arguments
         BAL   R14,RUNEXEC             execute a REXX EXEC
         B     NETSTAT9                exit
NETSTAT7 EQU   *
         LA    R1,8                    switch to APPL=ISR
         PR
NETSTAT8 STRING 'Not Available',INTO=SHORTMSG
         STRING 'TCP/IP is not installed on this system.',             X
               INTO=LONGMSG
         MVI   ALARM,C'Y'              error, beep.
         BAL   R14,SETMSG              send message, set r15
NETSTAT9 EQU   *
         LA    R1,4                    exit with rc=(15)
         PR
***********************************************************************
*                                                                     *
*        Function=OPENCMDS (open user/site cmd table)                 *
*                                                                     *
*              OPENCMDS,USERCMDS,U,AFTER                              *
*              OPENCMDS,SITECMDS,L                                    *
*                                                                     *
***********************************************************************
OPENCMDS BEGIN_PROC LVL=42
         L     R4,TSI@                 R4->TSI
         USING TSI,R4
         MVC   LIB2,TSILCTAB           name of current table (local)
         CLI   PARM3,C'U'              User table?
         BNE   *+10                    no, jump
         MVC   LIB2,TSIUCTAB           name of current table (user)
*
         CLC   OPT8,BLANKS             any new table name?
         BE    OPENCMD4                no, exit
         SLR   R15,R15                 force rc=0
         CLC   OPT8,LIB2               same table?
         BE    OPENCMD9                yes, exit
*
*        Open new table to make sure it exists
*
         STRING 'TBOPEN ',OPT8,' SHARE NOWRITE',INTO=COMMAND
         BAL   R14,ISPEXEC             open new table
         LTR   R15,R15                 TBOPEN OK?
         BZ    OPENCMD2                no, exit
*
*        new table does not exist, display an error message
*
         CH    R15,=H'8'               zerrmsg set?
         BH    OPENCMD9                yes, exit
         STRING (OPT8,,T),' not found',INTO=SHORTMSG
         STRING (OPT8,,T),' command table could not be opened',        X
               INTO=LONGMSG
         MVI   ALARM,C'Y'              error, beep.
         BAL   R14,SETMSG              send message
         B     OPENCMD9                exit
*
OPENCMD2 EQU   *
         STRING (OPT8,,T),' open',INTO=SHORTMSG
         STRING 'Local command table ',(OPT8,,T),' is now open.',      X
               INTO=LONGMSG
         BAL   R14,SETMSG              send message
*
OPENCMD4 EQU   *
         CLC   LIB2,BLANKS             any old table name?
         BE    OPENCMD6                no, jump
         STRING 'TBCLOSE ',LIB2,INTO=COMMAND
         BAL   R14,ISPEXEC             close current table, if any
         LTR   R15,R15                 TBCLOSE OK?
         BNZ   OPENCMD8                no, jump
         CLC   OPT8,BLANKS             any new table name?
         BNE   OPENCMD6                yes, update TSI
         STRING (LIB2,,T),' closed',INTO=SHORTMSG
         STRING 'Local command table ',(LIB2,,T),' is now closed.',    X
               INTO=LONGMSG
         BAL   R14,SETMSG              send message
*
*        Store new cmd table name into TSIxCTAB field
*
OPENCMD6 SLR   R15,R15                 force rc=0
         MVC   TSILCTAB,OPT8           new table name (local)
         CLI   PARM3,C'U'              User table?
         BNE   OPENCMD9                no, jump
         MVC   TSIUCTAB,OPT8           new table name (user)
*AFTER   NI    TSIUCTAB,255-8          reset AFTER flag
         CLI   PARM4,C'A'              User table AFTER ISP table?
         BNE   OPENCMD9                no, jump
*AFTER   OI    TSIUCTAB,8              yes, set AFTER flag
         B     OPENCMD9                exit
*
*        Close new table when we couldn't close the old one
*
OPENCMD8 CLC   OPT8,BLANKS             any new table name?
         BNE   OPENCMD9                yes, update TSI
         STRING 'TBCLOSE ',OPT8,INTO=COMMAND
         BAL   R14,ISPEXEC             close current table, if any
*
OPENCMD9 EQU   *
         LA    R1,4                    exit with rc=(15)
         PR
         DROP  R4                      TSI
***********************************************************************
*                                                                     *
*        Function=(PARMLIB,&member,&profile,&view)                    *
*                                                                     *
*        In OS/390 R2 and above, issue IEFPRMLB REQUEST=ALLOCATE      *
*        to access the PARMLIB concatenation.  Otherwise, use:        *
*                                                                     *
*            ALLOC DD($PARMLIB) DS('SYS1.PARMLIB') SHR                *
*                                                                     *
***********************************************************************
         CVT DSECT=YES,LIST=NO         Define CVT for PARMLIB function
PARMLIB  BEGIN_PROC APPL=ISR
         BAL   R14,PARSE3              parse options
         CLI   PARM3,C' '              profile specified?
         BNE   *+10                    yes, jump
         MVC   PARM3,=CL8'PARMLIB'     no, use default profile
         MVC   MACLIBDD,=CL8'$PARMLIB' MOVE DDNAME
         MVC   VIEWEDIT,=C'VIEW'       USE VIEW FOR PARMLIB
         STRING 'SYS1.PARMLIB',INTO=ZWRKDSN
         BAL   R14,RACHECK             check authorization
         CLI   RACHECK_ACCESS,ACCESS_READ ACCESS(READ) ?
         BL    PARMLIB8                no, error
         CLI   RACHECK_ACCESS,ACCESS_UPDATE ACCESS(UPDATE) ?
         BL    PARMLIB2                NO, USE VIEW
         CLI   PARM4,C'V'              PARM=(,,,VIEW) ?
         BE    PARMLIB2                YES, USE VIEW
         MVC   VIEWEDIT,=C'EDIT'       YES, USE EDIT
PARMLIB2 EQU   *
         DEVTYPE MACLIBDD,DWD          Prevent IEF761I
         LTR   R15,R15                 ALREADY ALLOCATED?
         BZ    PARMLIB6                YES, JUMP
         AIF   (NOT D'CVTPARMC).PARMLIB5
         L     R1,CVTPTR               CVT ADDR
         TM    CVTOSLV1-CVTMAP(R1),CVTPARMC OS/390 R2?
         BNO   PARMLIB5                no, jump
         IEFPRMLB REQUEST=ALLOCATE,                                    X
               ALLOCDDNAME=MACLIBDD,                                   X
               CALLERNAME=OWNNAME,                                     X
               MF=(E,STRING1,COMPLETE)
         CH    R15,=H'4'               ALLOCATED?
         BNH   PARMLIB6                YES, JUMP
PARMLIB5 EQU   *
.PARMLIB5 ANOP
         STRING '''SYS1.PARMLIB''',INTO=STRING1
PARMLIB6 EQU   *
         BAL   R14,LMVIEW           <- VIEW/BROWSE
         LA    R1,4                    exit with rc=(15)
         PR
*
PARMLIB8 MVI   ALARM,C'Y'              error, beep.
         BAL   R14,SETMSG              send message, set r15=8
         LA    R1,4                    exit with rc=(15)
         PR
***********************************************************************
*                                                                     *
*        Function=REXXTRY                                             *
*                                                                     *
*              PARM='REXXTRY,SAY DATE(,98222,J)'                      *
*                                                                     *
***********************************************************************
REXXTRY  BEGIN_PROC OPT=YES
         LA    R1,OPTADDR              FIRST STMT ADDR/LEN
         LA    R0,8                    LENGTH OF ADDR/LEN ARRAY
         SLR   R2,R2                   No arguments
         BAL   R14,RUNEXEC             execute a REXX EXEC
         LTR   R15,R15                 return code from IRXEXEC
         BNZ   REXXT50                 error, exit
         LTR   R1,R1                   any value returned?
         BNP   REXXT50                 error, exit
         STRING 'RC=',((R1),,L),INTO=SHORTMSG
         STRING 'The EXEC ended with return-code ',((R1),,L),          X
               INTO=LONGMSG
         BAL   R14,SETMSG              send message
*
REXXT50  LA    R1,4                    r1=4: exit rc=(15)
         PR
***********************************************************************
*                                                                     *
*        Function=SYSID (ISPF 4.2 or up)                              *
*                                                                     *
*        The SYSID function uses SCRNAME to permanently display the   *
*        SMF system-id in the upper left-hand corner of the screen.   *
*                                                                     *
*        I learned the trick from Henrik Salminen who posted his      *
*        THSCRNAM EXEC on the ISPF Cforum on TALKLINK.                *
*                                                                     *
***********************************************************************
SYSID    BEGIN_PROC LVL=42
         STRING 'SCRNAME OFF',INTO=COMMAND
         CLC   =C'OFF ',OPT8           SYSID OFF ?
         BE    SYSIDCMD                yes, jump
         L     R1,CVTPTR               CVT ADDRESS
         L     R4,CVTSMCA-CVTMAP(,R1)  SMCA ADDRESS
         USING SMCABASE,R4
         STRING 'PANELID OFF',ZDEL,'SCRNAME ON',ZDEL,                  X
               'SCRNAME ',(SMCASID,,T),'#',ZSCREEN,' PERM',            X
               INTO=COMMAND
         DROP  R4                      was SMCA
SYSIDCMD EQU   *
         ST    R15,DWD                 store length
         ISPLINK ($VREPLACE,=C'CMD ',DWD,COMMAND)
         STRING 'DISPLAY PANEL(ISPSTRTP) COMMAND(CMD)',INTO=COMMAND
         BAL   R14,ISPEXEC          <- execute command
         LA    R1,4                    r1=4: exit rc=(15)
         PR
***********************************************************************
*                                                                     *
*        Function=TIME                                                *
*                                                                     *
*        The TIME function displays the time and date in a short      *
*        message, and the Julian date in the long message.            *
*                                                                     *
***********************************************************************
TIME     BEGIN_PROC
         TIME  DEC
         STM   R0,R1,TENWORDS          HHMMSSHH 0CYYDDDF
         STRING (TENWORDS+4,P,YYYY-MM-DD),1X,                          X
               (TENWORDS+0,1,X),'.',   HH.                             X
               (TENWORDS+1,1,X),'.',   HH.MM.                          X
               (TENWORDS+2,1,X),       HH.MM.SS                        X
               INTO=SHORTMSG
         L     R15,=V(JUL2DAYS)        julian-days calc rtne
         BALR  R14,R15                 calc num of days since 1901.001
         LR    R6,R1                   POINT TO DAY-OF-THE-WEEK
         PACK  DWD,SHORTMSG+5(2)       MM
         CVB   R1,DWD                  R1=MM
         MH    R1,=H'3'                mult by 3
         LA    R7,MONTHTBL-3(R1)       point at month name
         STRING ((R6),9,T),1X,         Wednesday                       X
               (SHORTMSG+08,2),1X,     Wednesday 19                    X
               ((R7),3),1X,            Wednesday 19 Nov                X
               (SHORTMSG+0,4),2X,      Wednesday 19 Nov 1995           X
               (SHORTMSG+0,4),'.',     1995.                           X
               (TENWORDS+6,P,R3Z),2X,  1995.033                        X
               (SHORTMSG+11,8),        HH.MM.SS                        X
               INTO=LONGMSG
         BAL   R14,SETMSG              send message
         LA    R1,4                    r1=4: exit rc=0
         PR
MONTHTBL DC    C'JanFebMarAprMayJunJulAugSepOctNovDec'
***********************************************************************
*                                                                     *
*        Function=TSOFS (TSO Full-screen)                             *
*                                                                     *
*          rc=OUTTRAP("L.")                                           *
*          "command"                                                  *
*          cc=rc                                                      *
*          rc=OUTTRAP("OFF")                                          *
*          CALL STEMDISP "BROWSE","L.",,,command                      *
*          EXIT cc                                                    *
*                                                                     *
***********************************************************************
TSOFS    BEGIN_PROC APPL=ISR
         LM    R7,R8,OPTADDR           addr/len of command
         LTR   R8,R8                   any parm?
         BZ    TSOFS2P                 no, display panel(isrtso)
         CLI   PLUSSIGN,C'+'           SPLIT NEW requested?
         BNE   TSOFS1K                 no, jump
         CH    R8,=H'1'                1-char command?
         BE    TSOFS60                 yes, exit
TSOFS1K  EQU   *
*
*        replace %DSNAME with dsname under cursor
*
TSOFS2   LM    R2,R3,OPTADDR           addr/len of command
*loop
TSOFS2B  CLC   =C'%DSNAME',0(R2)       Search for %DSNAME
         BE    TSOFS2F                 Search for %DSNAME
         LA    R2,1(,R2)               Search for %DSNAME
         BCT   R3,TSOFS2B              Search for %DSNAME
*endloop
         B     TSOFS2X                 %DSNAME not found
TSOFS2F  EQU   *
         BAL   R14,CURSOR              get dsn at cursor location
         LTR   R1,R1                   Dsname extracted?
         BNP   TSOFS2R                 no, error
         ALR   R8,R7                   end of command
         STRING ((R7),(R2)),((R1),(R0)),(7(R2),(R8)),INTO=RACFWORK
         LA    R7,RACFWORK             update addr
         LR    R8,R15                  update length
         B     TSOFS2X
*
*        Display ISRTSO panel if user did not specify a command
*
TSOFS2P  EQU   *
         ISPLINK ($VGET,ISRPTCV,$PROFILE)
         STRING 'DISPLAY PANEL(','ISRTSO)',INTO=COMMAND
         BAL   R14,ISPEXEC          <- execute command
         LTR   R1,R15                  END/RETURN?
         BNZ   TSOFS50                 yes, exit
         ISPLINK ($VPUT,ISRPTCV,$PROFILE)
         LA    R0,L'RACFWORK           max length
         ST    R0,DWD                  max length
         ISPLINK ($VCOPY,=C'ZCMD ',DWD,RACFWORK,$MOVE)
         LA    R7,RACFWORK             update addr
         L     R8,DWD                  update length
         B     TSOFS2X
ISRPTCV  DC    C'(PTCRET01 PTCRET02 PTCRET03 PTCRET04 PTCRET05 PTCRET06-
                PTCRET07 PTCRET08 PTCRET09 PTCRET10 PTCAMODE PTCDMODE  -
                PTCFMODE PTCZAO   PTCSELM  PTCWCMD)'
*
*        Execute the command
*
TSOFS2X  EQU   *
         CLI   PLUSSIGN,C'+'           SPLIT NEW requested?
         BE    TSOFS61                 yes, exit
         STRING 'rc=OUTTRAP("L.");"',                                  X
               ((R7),(R8)),'";',                                       X
               'cc=rc;',                                               X
               'rc=OUTTRAP("OFF");',                                   X
               'CALL STEMDISP "BROWSE","L.",,,"',((R7),(R8)),'";',     X
               'EXIT cc',                                              X
               INTO=LONGMSG
         LA    R14,LONGMSG             addr of REXX stmt
         STM   R14,R15,DWD             store addr/len
         LA    R1,DWD                  FIRST STMT ADDR/LEN
         LA    R0,8                    LENGTH OF ADDR/LEN ARRAY
         SLR   R2,R2                   No arguments
         BAL   R14,RUNEXEC             execute a REXX EXEC
         B     TSOFS50                 exit
TSOFS2R  EQU   *
         STRING 'Dsname not found',INTO=SHORTMSG
         STRING 'You must position the cursor under a dsname before entX
               ering this command.',                                   X
               INTO=LONGMSG
         MVI   ALARM,C'Y'              error, beep.
         BAL   R14,SETMSG              send message, set r15
TSOFS50  LA    R1,4                    r1=4: exit rc=(15)
         PR
*
*        Build an updated command for ISPSTRT
*
TSOFS60  EQU   *
         SLR   R8,R8                   no command
TSOFS61  EQU   *
         STRING 'TSOFS ',((R7),(R8)),INTO=LONGMSG
         LA    R14,LONGMSG             TSOFS command ds.name
         STM   R14,R15,CMD@            update command for NEWSCREEN
         LA    R1,16                   r1=16: start new screen
         PR
***********************************************************************
*                                                                     *
*        Function=UNLOAD (unload a module)                            *
*                                                                     *
***********************************************************************
UNLOAD00 BEGIN_PROC OPT=YES
         CLC   OWNNAME,OPT8            is this FASTPATH?
         BNE   UNLOAD02                no, error
         DELETE EPLOC=OWNNAME2         save OWNNAME for UNLOAD function
         L     R5,CDE@                 own CDE
         LA    R0,1                    R0=1
         CH    R0,CDUSE-CDENTRY(R5)    own CDUSE=1 ?
         BE    UNLOAD20                yes, error
UNLOAD02 EQU   *
         CSVQUERY SEARCH=JPALPA,       SEARCH JPAQ                     +
               INEPNAME=OPT8,          ADDRESS                         +
               OUTLOADPT=LOADLEN+0,    LOAD POINT                      +
               OUTLENGTH=LOADLEN+4,    MODULE LENGTH IN BYTES          +
               MF=(E,CSVQRYWK)         WORK AREA
         LTR   R15,R15                 module currently loaded?
         BNZ   UNLOAD20                no, exit
         LM    R0,R1,LOADLEN           loadpt,length
         ALR   R1,R0                   R1=end address
         STM   R0,R1,LOADLEN           loadpt,endaddr
         LA    R1,UNLOAD75             address of the UNLOAD routine
         STRING ((R1),,X),INTO=URPNAME address in EBCDIC
         IDENTIFY EPLOC=URPNAME,ENTRY=(R1)
         BAL   R14,EXECURP          <- Execute UNLOAD75 as a URP
         LA    R1,DYNAM                pass A(DYNAM) to timer rtne
         BAL   R14,UNLOAD80         <- cancel timer
UNLOAD17 DELETE EPLOC=OPT8             delete at ISPTASK level
         LTR   R15,R15                 LLCOUNT=0?
         BZ    UNLOAD17                not yet, do it once more.
*
*        check if the module is still loaded
*
         CSVQUERY SEARCH=JPALPA,       SEARCH JPAQ                     +
               INEPNAME=OPT8,          ADDRESS                         +
               MF=(E,CSVQRYWK)         WORK AREA
         LTR   R15,R15                 module still loaded?
         BNZ   UNLOAD19                no, we're OK
         CLC   OWNNAME,OPT8            is this FASTPATH?
         BNE   UNLOAD22                no, error
         L     R5,CDE@                 own CDE
         LA    R0,1                    R0=1
         CH    R0,CDUSE-CDENTRY(R5)    own CDUSE=1 ?
         BNE   UNLOAD22                no, error
UNLOAD19 EQU   *
         STRING (OPT8,,T),' unloaded',INTO=SHORTMSG
         STRING 'Module ',(OPT8,,T),' unloaded',                       X
               INTO=LONGMSG
         B     UNLOAD49                issue msg, exit rc=0
*
UNLOAD20 STRING (OPT8,,T),' not found',INTO=SHORTMSG
         STRING 'Module ',(OPT8,,T),' is not in memory at this time.', X
               INTO=LONGMSG
         B     UNLOAD48                issue msg, exit rc=8
*
UNLOAD22 STRING (OPT8,,T),' not unloaded',INTO=SHORTMSG
         STRING 'Module ',(OPT8,,T),' could not be unloaded.',         X
               INTO=LONGMSG
*
UNLOAD48 EQU   *
         MVI   ALARM,C'Y'              error, beep.
UNLOAD49 EQU   *
         BAL   R14,SETMSG              send message, set r15
*
UNLOAD50 LA    R1,4                    r1=4: exit rc=(15)
         PR
*---------------------------------------------------------------------*
*                                                                     *
*        This code executes as a URP to delete modules                *
*        loaded by the PRELOAD routine.                               *
*                                                                     *
*---------------------------------------------------------------------*
         PUSH  USING
         DROP
UNLOAD75 BAKR  R14,0                   save regs
         L     R10,4(,R1)              A(DYNAM)
         L     R10,0(,R10)             A(DYNAM)
         USING DYNAM,R10
         LR    R12,R15                 A(UNLOAD75)
         USING UNLOAD75,R12
         LA    R1,DYNAM                pass A(DYNAM) to timer rtne
         BAL   R14,UNLOAD80         <- cancel timer
UNLOAD77 DELETE EPLOC=OPT8             load at TMP level
         LTR   R15,R15                 LLCOUNT=0?
         BZ    UNLOAD77                not yet, do it once more.
         PR
         DROP
*---------------------------------------------------------------------*
*                                                                     *
*        Cancel timer if exit addr points to module being unloaded.   *
*                                                                     *
*---------------------------------------------------------------------*
UNLOAD80 BAKR  R14,0                   save regs
         BALR  R12,0                   base regs
         USING *,R12
         LR    R10,R1                  A(DYNAM)
         USING DYNAM,R10
         L     R4,PSATOLD-PSA          current TCB
         USING TCB,R4
         ICM   R5,B'1111',TCBTME       any timer here?
         BZ    UNLOAD89                no, jump
         USING TQE,R5
*loop
UNLOAD81 L     R1,TQEEXIT              EXIT ADDRESS
         LA    R1,0(,R1)               clean up AMODE bit
         CL    R1,LOADLEN              compare to load-point
         BL    UNLOAD85                too low, iterate
         CL    R1,LOADLEN+4            compare to end address
         BH    UNLOAD85                too high, iterate
         STIMERM CANCEL,ID=TQEID,MF=(E,STIMERL)
         LTR   R15,R15                 STIMERM CANCEL OK?
         BNZ   UNLOAD85                no, iterate
         LA    R5,TCBTME-(TQELINK-TQE) yes, go back to start of chain
UNLOAD85 ICM   R5,B'1111',TQELINK      end of chain?
         BNZ   UNLOAD81                no, loop
*endloop
UNLOAD89 PR
         POP   USING
***********************************************************************
*                                                                     *
*        Function=VERASE                                              *
*                                                                     *
*        This function issues VERASE to delete a variable from        *
*        the shared and/or profile pool.                              *
*                                                                     *
***********************************************************************
VERASE   BEGIN_PROC
         STRING 'VERASE ',(OPT,,T),INTO=COMMAND
         BAL   R14,ISPEXEC          <- execute command
         LTR   R15,R15
         BNZ   VERASE6                 RC>0 (ERROR)
         STRING 'Variable(s) deleted',INTO=SHORTMSG
      STRING 'The specified variables have been successfully deleted.',X
               INTO=LONGMSG
         B     VERASE49                issue message and exit with rc=0
VERASE6  CH    R15,=H'8'               severe error?
         BH    VERASE50                RC>8 (ERROR)
         STRING 'Variable(s) not found',INTO=SHORTMSG
         STRING 'At least one specified variable does not exist',      X
               INTO=LONGMSG
         MVI   ALARM,C'Y'              error, beep.
VERASE49 BAL   R14,SETMSG              send message, set r15
VERASE50 LA    R1,4                    r1=4: exit rc=(15)
         PR
***********************************************************************
*                                                                     *
*        Function=ZDEL                                                *
*                                                                     *
*        This function uses an undocumented interface to retrieve     *
*        and set the command delimiter character.                     *
*                                                                     *
*        Tested in 3.5, 4.2 and 4.4.                                  *
*                                                                     *
***********************************************************************
ZDELFUNC BEGIN_PROC
         CLC   OPTLEN,=F'1'            one char specified?
         BNE   ZDELSHOW                no, display
*
*        validate new character: anything but A-Z 0-9 = .
*
         CLI   OPT8,C'.'               valid char?
         BE    ZDELBADC                no, bad parm
         CLI   OPT8,C'='               valid char?
         BE    ZDELBADC                no, bad parm
         CLI   OPT8,C'A'               valid char? 41-C0
         BL    ZDELUPD                 yes, update
         CLI   OPT8,C'I'               valid char?  A-I
         BNH   ZDELBADC                no, bad parm
         CLI   OPT8,C'J'               valid char? CA-D0
         BL    ZDELUPD                 yes, update
         CLI   OPT8,C'R'               valid char?  J-R
         BNH   ZDELBADC                no, bad parm
         CLI   OPT8,C'S'               valid char? DA-E1
         BL    ZDELUPD                 yes, update
         CLI   OPT8,C'Z'               valid char?  S-Z
         BNH   ZDELBADC                no, bad parm
         CLI   OPT8,C'0'               valid char? EA-EF
         BL    ZDELUPD                 yes, update
         CLI   OPT8,C'9'               valid char?  0-9
         BH    ZDELUPD                 yes, update
ZDELBADC ISPLINK ($SETMSG,=C'ISPO903 ') Invalid Character
         LA    R15,8                   rc=8
         B     ZDELF50                 exit with RC=(15)
*
*        update ZDEL in the TSV and update ISPSPROF
*
ZDELUPD  L     R4,TLD@                 load TLD address
         USING TLD,R4
         L     R5,TLDTSVP              System Variables Table
         USING TSV,R5
         MVC   TSVZDEL,OPT8            update ZDEL field in TSV
         LA    R1,TLD@                 TLD pointer
         L     R15,TLDTSCP             ISPTSC0
         L     R15,272(,R15)           ISPCUP (Update Profile)
         BALR  R14,R15                 refresh ZDEL
         STRING 'Delimiter set to ',TSVZDEL,INTO=SHORTMSG
         STRING 'Command Delimiter changed from ',ZDEL,                X
               ' to ',TSVZDEL,INTO=LONGMSG
         B     ZDELF49                 send msg, exit with RC=0
         DROP  R4,R5                   TLD,TSV
*
*        Display current ZDEL value
*
ZDELSHOW CLI   OPT8,C' '               ZDEL display?
         BNE   ZDELLENG                no, bad parm
         STRING 'Delimiter is ',ZDEL,INTO=SHORTMSG
         STRING 'Command Delimiter is currently set to ',ZDEL,         X
               INTO=LONGMSG
         B     ZDELF49                 send msg, exit with RC=0
*
*        Specified parameter has invalid format
*
ZDELLENG STRING 'Invalid Parameter',INTO=SHORTMSG
         STRING 'Parameter must be specified as a single character.',  X
               INTO=LONGMSG
*
ZDELF48  EQU   *
         MVI   ALARM,C'Y'              error, beep.
ZDELF49  EQU   *
         BAL   R14,SETMSG              send message, set r15
*
ZDELF50  LA    R1,4                    r1=4: exit rc=(15)
         PR
*---------------------------------------------------------------------*
*                                                                     *
*        Parse the parm options into OPT,PARM3,PARM4                  *
*                                                                     *
*              Input:   PARM='EDIT,abcd,efgh,ikjl'                    *
*                                                                     *
*              output:  FUNCTION='EDIT '                              *
*                       OPT='abcd'                                    *
*                       PARM3='efgh'                                  *
*                       PARM4='ijkl'                                  *
*                                                                     *
*---------------------------------------------------------------------*
PARSE3   BEGIN_PROC
         LA    R4,OPT2                 saved options
         L     R5,OPTLEN               length of options
         BAL   R14,PARSE_PARM          parse parm into function,opt
         DC    S(L'OPT,OPT)            second operand
         DC    S(L'PARM3,PARM3)        third operand
         DC    S(L'PARM4,PARM4)        fourth operand
         STRING (OPT,,T),INTO=OPT2     count characters
         ST    R15,OPTLEN              length of &OPT
         PR
         TITLE 'CURSOR: Extract Data Set Name from Screen Buffer'
***********************************************************************
*                                                                     *
*        Scan data at the cursor position for a dsname                *
*                                                                     *
*        Some of this code has been lifted from ISPCDSN,              *
*        in file 270 of the CBT tape.                                 *
*                                                                     *
***********************************************************************
CURSOR   BEGIN_PROC
         L     R6,TLD@                 R6->TLD
         USING TLD,R6
*
*        Retrieve screen buffer address and cursor position.
*
         ICM   R15,B'1111',TLDCLSWD    screen width (zero if ISPSTRT)
         BZ    CURSOR98                zero, exit to prevent S0C9
         SLR   R0,R0                   prepare "DR"
         L     R1,TLDCSR               get cursor offset
         DR    R0,R15                  get line # (R0) and offset (R1)
         LR    R5,R0                   cursor offset in line
         M     R0,TLDCLSWD             get offset to current line
         AL    R1,TLDTLSP              change offset to addr
         LR    R4,R1                   Current line in screen image
*---------------------------------------------------------------------*
*                                                                     *
*        Build scan table for TRT.                                    *
*                                                                     *
*---------------------------------------------------------------------*
CURSOR21 MVI   TRNTBL,255              fill table with X'FF'
         MVC   TRNTBL+1(255),TRNTBL    fill table with X'FF'
         BAL   R1,CURSOR22             branch around table, set R1
         DC    C'$',AL1(1)             $
         DC    C'.',AL1(1)             .
         DC    C'#',AL1(2)             #@
         DC    C'a',AL1(9)             a-i
         DC    C'j',AL1(9)             j-r
         DC    C's',AL1(8)             s-z
         DC    C'{',AL1(1)             C0
         DC    C'-',AL1(1)             60
         DC    C'A',AL1(9)             A-I
         DC    C'J',AL1(9)             J-R
         DC    C'S',AL1(8)             S-Z
         DC    C'0',AL1(10)            0-9
         DC    X'00',0H'0'             end of table
*LOOP
CURSOR22 SLR   R3,R3                   clear work reg
         IC    R3,0(,R1)               FIRST BYTE
         LA    R2,TRNTBL(R3)           point to TRNTBL+X'4A'
         IC    R3,1(,R1)               length
         SLR   R15,R15                 padding=X'00'
         MVCL  R2,R14                  clear (R3) bytes
         LA    R1,2(,R1)               NEXT ENTRY IN TABLE
         CLI   0(R1),0                 END OF TABLE?
         BNE   CURSOR22                NEXT STRING
*ENDLOOP
*---------------------------------------------------------------------*
*                                                                     *
*        Extend current line to facilitate dsname extraction          *
*                                                                     *
*---------------------------------------------------------------------*
         L     R1,TLDCLSWD             line length
         STRING 56X,((R4),(R1)),INTO=LONGMSG
         LA    R4,LONGMSG              new line
         LA    R5,56(R5,R4)            cursor address
         SLR   R7,R7                   no left paren
         DROP  R6                      was TLD
*---------------------------------------------------------------------*
*                                                                     *
*        If the cursor is placed under DSN= or DSNAME= then           *
*        move it under the 1st char to the right of the = sign.       *
*                                                                     *
*---------------------------------------------------------------------*
CURSOR30 BAL   R2,CURSOR31             branch around table
         DC    AL1(3),C'DSN='          JCL
         DC    AL1(6),C'DSNAME='       JCL
         DC    X'00',0H'0'             end of table
*loop
CURSOR31 SLR   R3,R3
         IC    R3,0(,R2)               length of literal
         LA    R0,1(,R3)               length of scan area
         LR    R1,R5                   current position
         SR    R1,R3                   start of scan area
*--loop
CURSOR32 EX    R3,CURSOR36             execute CLC
         BE    CURSOR38                found, exit
         LA    R1,1(,R1)               bump index
         BCT   R0,CURSOR32             scan further
*--endloop
         LA    R2,1+1(R3,R2)           next entry in literal table
         CLI   0(R2),0                 end of table?
         BNE   CURSOR31                no, search for next literal
*endloop
         B     CURSOR39
CURSOR36 CLC   0(*-*,R1),1(R2)         scan for "DSN="
CURSOR38 LA    R5,1(R3,R1)             start of dsname
CURSOR39 EQU   *
*---------------------------------------------------------------------*
*                                                                     *
*        If the cursor is positionned under a parenthesis, ignore it. *
*                                                                     *
*---------------------------------------------------------------------*
CURSOR42 EQU   *
         CLI   0(R5),C'('              Is it left paren?
         BNE   CURSOR43                no, jump
         LA    R5,1(,R5)               yes, skip to next char
         B     CURSOR42                there may be several of them
CURSOR43 EQU   *
         CLI   0(R5),C')'              Is it right paren?
         BNE   CURSOR44                no, jump
         BCTR  R5,0                    yes, try char to the left
         B     CURSOR43                there may be several of them
CURSOR44 EQU   *
*---------------------------------------------------------------------*
*                                                                     *
*        Check that the cursor is under a valid dsname character      *
*                                                                     *
*---------------------------------------------------------------------*
         TRT   0(1,R5),TRNTBL          cursor under a data set name?
         BZ    CURSOR50                Yes, begin scanning for start
         CLI   0(R5),C''''             Is it a quote?
         BNE   CURSOR98                No, cursor invalid
         MVI   QFLAG,X'80'             Yes, indicate left quote
         TRT   1(1,R5),TRNTBL          Is dsn to right of quote?
         BZ    CURSOR59                Yes, prepare to extract it
         BCTR  R5,0                    No,  check left of quote
         CLI   0(R5),C')'              'my.dsn(mymbr)' ?
         BE    CURSOR48                Yes, accept it
         TRT   0(1,R5),TRNTBL          Was it there?
         BNZ   CURSOR98                No,  cursor invalid
CURSOR48 MVI   QFLAG,X'01'             Yes, indicate right quote
*---------------------------------------------------------------------*
*                                                                     *
*        Scan backwards to locate beginning of dsname                 *
*                                                                     *
*        If we pass over a left parenthesis, look for a period        *
*        to determine if the parenthesis marks the beginning of       *
*        the dsname or of the member name.                            *
*                                                                     *
*---------------------------------------------------------------------*
CURSOR50 LR    R2,R5                   current position
         SR    R2,R4                   subtract addr of pos 1
*loop
CURSOR52 BCTR  R5,0                    R5-> cursor location
         TRT   0(1,R5),TRNTBL          valid dsn char?
         BZ    CURSOR54                yes, iterate
         CLI   0(R5),C'('              Was delimiter left paren?
         BNE   CURSOR56                No, include parens in dsn
         MVI   TRNTBL+C'.',255         set period invalid for scan
         TRT   1(9,R5),TRNTBL          find delimiter
         MVI   TRNTBL+C'.',0           reset period in scan table
         BZ    CURSOR54                no dlm, continue
         CLI   0(R1),C'.'              period found?
         BE    CURSOR61                yes, must be dsn
         LTR   R7,R7                   first left paren?
         BNZ   CURSOR61                no, leave
         LR    R7,R5                   yes, remember it
CURSOR54 BCT   R2,CURSOR52             Yes, decr offset; check next
*endloop
CURSOR56 LA    R0,1(,R5)               1st byte of dsname
         CLR   R0,R7                   left paren at start of dsn?
         BNE   CURSOR59                No, jump
         SLR   R7,R7                   yes, forget all about it
         LA    R5,1(,R5)               make "(" the dlm
*
*        R5 now points to start of dsname
*
CURSOR59 EQU   *
         CLI   0(R5),C''''             Was delimiter a quote?
         BNE   CURSOR61                No,  leave bits unchanged
         OI    QFLAG,X'80'             Yes, indicate left quote
*---------------------------------------------------------------------*
*                                                                     *
*        scan dsname to locate its right boundary                     *
*                                                                     *
*---------------------------------------------------------------------*
CURSOR61 LA    R5,1(,R5)               R5-> start of dsname
         LTR   R7,R7                   do we have a member name?
         BNZ   CURSOR65                no, do not look for right paren
*
*        no mbr name found yet, check for a left parenthesis
*
         TRT   0(56,R5),TRNTBL         Scan until not in table
         BZ    CURSOR98                end dlm not found, exit
         LR    R2,R1                   R2-> right delimiter
         CLI   0(R1),C'('              Was delimiter a left paren?
         BNE   CURSOR66                no, this is the end of the dsn
         LR    R7,R1                   R7-> start of mbr name
         CLI   1(R7),C'+'              AA.BB.CC(+1)
         BNE   *+8                     no, jump
         LA    R7,1(,R7)               SKIP + SIGN
*GILBERT.FILE183.PDS(FA*H)
         MVI   TRNTBL+C'*',0           member name can be generic
         MVI   TRNTBL+C'%',0           member name can be generic
*
*        Find end of member name
*
CURSOR65 TRT   1(9,R7),TRNTBL          Scan for right paren
         BZ    CURSOR98                not found, ignore mbr name
         CLI   0(R1),C')'              Was delimiter a right paren?
         BNE   CURSOR98                no, ignore mbr name
         LA    R2,1(,R1)               point R2 past right paren
*
CURSOR66 EQU   *
         CLI   0(R2),C''''             Was delimiter a quote?
         BNE   CURSOR68                No,  leave bits unchanged
         OI    QFLAG,X'01'             Yes, indicate right quote
CURSOR68 TM    QFLAG,X'81'             Quotes surrounding dsname ?
         BM    CURSOR98                no matching quotes
*---------------------------------------------------------------------*
*                                                                     *
*        remove LISTCAT header                                        *
*                                                                     *
*---------------------------------------------------------------------*
CURSOR80 BAL   R1,CURSOR81             branch around table
         DC    C'AIX------'
         DC    C'CLUSTER--'
         DC    C'DATA-----'
         DC    C'GDG------'
         DC    C'INDEX----'
         DC    C'NONVSAM--'
         DC    C'PATH-----'
         DC    C'USERCAT--'
         DC    X'00',0H'0'             end of table
*loop
CURSOR81 CLC   0(9,R1),0(R5)           compare header
         BE    CURSOR82                found, exit
         LA    R1,9(,R1)               next entry in header table
         CLI   0(R1),0                 end of table?
         BNE   CURSOR81                no, check next header
*endloop
         B     CURSOR90
CURSOR82 LA    R5,9(,R5)               skip header
*---------------------------------------------------------------------*
*                                                                     *
*        return dsname address and length to invoking routine         *
*
*---------------------------------------------------------------------*
CURSOR90 LR    R0,R2                   R0 = first byte after dsname
         LR    R1,R5                   R1 = first byte of dsname
         SLR   R0,R1                   R0 = length
         PR                            exit
*
CURSOR98 SLR   R0,R0                   no dsname
         SLR   R1,R1                   no dsname
*
CURSOR99 PR                            GOBACK
***********************************************************************
         MACRO                                                    macro
&NAME   $LINK  &EP=,&PARAM=,&ERRET=                               macro
&NAME    LA    R0,=CL8'&EP'            EP name
         L     R1,CVTPTR               CVT
         L     R1,CVTLINK-CVTMAP(,R1)  SYS1.LINKLIB
         STM   R0,R1,12(R13)           SF=L
         LINK  SF=(E,12(,R13)),PARAM=&PARAM,VL=1,MF=(E,TENWORDS)
         AIF   (T'&ERRET EQ 'O').MEND                             macro
         LTR   R15,R15                 Any error?
         BNZ   &ERRET                  yes, jump
.MEND    MEND                                                     macro
         TITLE 'SETUP: Perform Initialization'
***********************************************************************
*                                                                     *
*        SETUP (first time only)                                      *
*                                                                     *
*        1. Make myself permanently resident in memory.               *
*                                                                     *
*        2. Call the PRELOAD routine                                  *
*                                                                     *
*        3. Define the RESET edit macro                               *
*                                                                     *
***********************************************************************
SETUP00  BEGIN_PROC
         LA    R1,SETUP500             SETUP URP
         STRING ((R1),,X),INTO=URPNAME SETUP URP
         IDENTIFY EPLOC=URPNAME,ENTRY=(R1)
         LTR   R15,R15                 First time?
         BNZ   SETUP99                 NO, EXIT
*
*        Invoke the PRELOAD routine.  If I've been invoked via CALL,
*        the tasklib will be first in the search sequence.
*
SETUP20  L     R15,=A(PRELOAD)         pre-load routine
         BALR  R14,R15                 invoke it
*
*        Execute the SETUP500 routine as a URP to issue LOAD and
*        ensure that I stay in memory until ISPF terminates.
*
         LA    R1,SETUP500             init routine
         BAL   R14,EXECURP          <- Execute SETUP500 as a URP
         LTR   R15,R15                 OK?
         BNZ   SETUP90                 no, jump
         DELETE EPLOC=OWNNAME          reduce use cnt at ISPTASK level
*---------------------------------------------------------------------*
*                                                                     *
*        Define the "RESET" EDIT macro                                *
*                                                                     *
*        Note that this will prevent you from accessing a program     *
*        or TSO CP called RESET; if it is a problem, comment out      *
*        the IDENTIFY macro below.                                    *
*                                                                     *
*---------------------------------------------------------------------*
SETUP90  EQU   *
         IDENTIFY EP=RESET,ENTRY=SETUP800
*
SETUP99  PR
*---------------------------------------------------------------------*
*                                                                     *
*        Execute the routine at (R1) as a URP                         *
*                                                                     *
*        Invoke the Un-authorized Resource Processor Service Routine. *
*        It schedules an IRB at the IKJEFT09 level to execute the     *
*        routine whose address is passed in R1.                       *
*                                                                     *
*---------------------------------------------------------------------*
EXECURP  BEGIN_PROC
         ST    R13,TOKEN               pass A(DYNAM)
         L     R4,TSI@                 V(TSI)
         USING TSI,R4
        $LINK  EP=IKJURPS,                                             +
               PARAM=(TSIECTP,    1    ECT ADDRESS                     +
               URPNAME,           2    EP name                         +
               TOKEN,             3    parameter                       +
               RETCODE,           4    RETCODE FROM SETUP500           +
               REASON,            5    REASON CODE FROM SETUP500       +
               RETCODE2,          6    RETCODE FROM IKJURPS            +
               DUMMY,             7    *DUMMY*                         +
               DUMMY,             8    *DUMMY*                         +
               DUMMY,             9    *DUMMY*                         +
               =F'1')            10    issue messages
         PR
         DROP  R4,R12                  TSI,base
         PUSH  USING
         DROP
*---------------------------------------------------------------------*
*                                                                     *
*        RESET EDIT macro                                             *
*                                                                     *
*---------------------------------------------------------------------*
SETUP800 BAKR  R14,0                   LOCAL BASE
         LR    R12,R15                 base reg
         USING SETUP800,R12
         L     R11,BASEADDR-SETUP800(,R15) literal pool
         USING FASTPATH,R11
*  ISREDIT MACRO
         LA    R1,ISREDIT1             ISREDIT MACRO
         LINK  SF=(E,ISPLINK$)         ISREDIT MACRO
*  ISREDIT RESET
         LA    R1,ISREDIT2             ISREDIT RESET
         LINK  SF=(E,ISPLINK$)         ISREDIT MACRO
*  RETURN TO SYSTEM
         SLR   R15,R15                 RETURN CODE
         PR                            GOBACK WITH RC=00
         DROP
ISREDIT1 DC    AL4($ISREDIT,F5,*+X'80000004'),C'MACRO'
ISREDIT2 DC    AL4($ISREDIT,F5,*+X'80000004'),C'RESET'
F5       DC    FL4'5'
         DROP
*---------------------------------------------------------------------*
*                                                                     *
*        URP Routine (executes under the IKJEFT09 TCB)                *
*                                                                     *
*        1. make myself resident                                      *
*        2. invoke the PRELOAD routine                                *
*        3. prime the timer to prevent S522 abends                    *
*                                                                     *
*---------------------------------------------------------------------*
SETUP500 BAKR  R14,0                   save regs
         LR    R12,R15                 A(STOP522)
         USING SETUP500,R12
         L     R11,BASEADDR-SETUP500(,R15) literal pool
         USING FASTPATH,R11
         L     R10,4(,R1)              A(DYNAM)
         L     R10,0(,R10)             A(DYNAM)
         USING DYNAM,R10
*
*        Prime the timer (unless we have TIME=1440)
*
         L     R14,PSATOLD-PSA         job step control block
         USING TCB,R14
         L     R14,TCBJSCB             job step control block
         USING IEZJSCB,R14
         L     R14,JSCSCT              Current step's SCT prefix
         USING INSMSCT-16,R14
         ICM   R14,B'0111',SCTXBTTR    address of SCTX (SCT extension)
         USING SCTXIN-16,R14
         CLC   SCTXSTL,=A(1440*60*100) TIME=1440?
         BE    SETUP520                yes, do not issue STIMER
         DROP  R14                     temp base
         L     R15,=A(STOP522)         PRIME TIMER
         BALR  R14,R15                 PRIME TIMER
SETUP520 EQU   *
*
         LOAD  EPLOC=OWNNAME           bump my use count
*
         L     R15,=A(PRELOAD)         jpa modules
         BALR  R14,R15                 preload some ISP/ISR modules
         SLR   R15,R15                 RC=0
         PR                            goback
BASEADDR DC    A(FASTPATH)             base addr for literal pool
         DROP
*---------------------------------------------------------------------*
*                                                                     *
*        TIMER EXIT RTNE                                              *
*                                                                     *
*---------------------------------------------------------------------*
STOP522  BAKR  R14,0                   save regs
&STOP522 SETC  'NO'                    STOP522(NO)
         AIF   ('&SYSPARM' NE 'STOP522').STOP522X
&STOP522 SETC  'YES'                   STOP522(YES)
         LR    R12,R15                 A(STOP522)
         USING STOP522,R12
         TIME  DEC                     R0=HHMMSSHH
         CLM   R0,B'1100',STOP522T     PAST 7PM?
         BH    STOP522X                YES, ALLOW S522 AGAIN
         LA    R10,DYNAML              length of dynamic storage area
         GETMAIN R,LV=(R10)            get dynamic storage
         LR    R13,R1
         USING DYNAM,R13
         L     R1,CVTPTR               CVTPTR
         L     R1,CVTSMCA-CVT(,R1)     SMF SMCA
         L     R1,SMCAJWT-SMCABASE(,R1) JWT BIT 31 IS 1.048576 SECONDS
         LA    R0,100                  prepare MR
         MR    R0,R0                   APPROX TIME IN 1/100 TH OF A SEC
         ST    R1,DWD                  STORE FOR STOP522 RTNE
         STIMERM SET,                                                  X
               ID=DUMMY,               dummy parm                      X
               BINTVL=DWD,             interval                        X
               EXIT=STOP522,           exit addr                       X
               MF=(E,STIMERL)
         FREEMAIN R,LV=(R10),A=(R13)   free dynamic storage
.STOP522X ANOP
STOP522X PR                            GOBACK
*
STOP522T DC    X'1900'                 7 PM
*
         POP   USING
***********************************************************************
*                                                                     *
*        Add Fast-path commands to ISPCMDS                            *
*                                                                     *
***********************************************************************
ADDCMDS  BEGIN_PROC
         L     R7,=V(ISPCMDS)          first table entry
         STRING 'ISPCMDS updated',INTO=SHORTMSG
&REST    SETC  'The following fast-path commands have been installed:'
         STRING (OWNNAME,,T),' &REL STOP522(&STOP522) - &REST',        X
               INTO=LONGMSG
*LOOP
ADDCMDS1 LA    R1,=A($TBTOP,$ISPCMDS+VL)
         LINK  SF=(E,ISPLINK$)         TBTOP ISPCMDS
*
*        Build Command String for opening message
*
         STRING (LONGMSG,,T),1X,((R7),8),INTO=LONGMSG
*
         MVC   DWD,0(R7)               move verb
         OC    DWD,BLANKS              ALL CAPS
         ISPLINK ($VREPLACE,$ZCTVERB,=F'8',DWD)
         LA    R7,8(,R7)               skip verb
*
*        delete the table entry if it exists in ISPCMDS already
*
         LA    R1,=A($TBSCAN,$ISPCMDS,$ZCTVERB+VL)
         LINK  SF=(E,ISPLINK$)         TBSCAN ISPCMDS ZCTVERB
         LTR   R15,R15
         BNZ   ADDCMDS3
         LA    R1,=A($TBDELETE,$ISPCMDS+VL)
         LINK  SF=(E,ISPLINK$)         TBDELETE ISPCMDS
*
*        Delete duplicate entries from SITE and USER command tables
*
ADDCMDS3 EQU   *
         CLI   ISPFVM,X'42'            ISPF 4.2 or up?
         BL    ADDCMDS5                no, jump
         L     R4,TSI@                 R4->TSI
         USING TSI,R4
         ISPLINK ($TBTOP,TSILCTAB),ERRET=ADDCMDS4
         ISPLINK ($TBSCAN,TSILCTAB,$ZCTVERB),ERRET=ADDCMDS4
         ISPLINK ($TBDELETE,TSILCTAB)  TBDELETE SITECMDS
ADDCMDS4 EQU   *
         ISPLINK ($TBTOP,TSIUCTAB),ERRET=ADDCMDS5
         ISPLINK ($TBSCAN,TSIUCTAB,$ZCTVERB),ERRET=ADDCMDS5
         ISPLINK ($TBDELETE,TSIUCTAB)  TBDELETE USERCMDS
         DROP  R4                      TSI
ADDCMDS5 EQU   *
         SLR   R2,R2
         ISPLINK ($VREPLACE,$ZCTTRUNC,=F'1',(R7))
         LA    R7,1(,R7)               skip trunc
*
         IC    R2,0(,R7)               L'&ACT
         ST    R2,DWD                  L'&ACT
         STRING (1(R7),(R2)),INTO=COMMAND
         CLC   =C'SELECT PGM(FASTPATH) ',COMMAND
         BNE   *+10
         MVC   COMMAND+11(L'OWNNAME),OWNNAME  FASTPATH->TESTPATH
         ISPLINK ($VREPLACE,$ZCTACT,DWD,COMMAND)
         LA    R7,1(R2,R7)             point past &ACT
*
         IC    R2,0(,R7)               L'&DESC
         ST    R2,DWD                  length
         ISPLINK ($VREPLACE,$ZCTDESC,DWD,1(R7))
         LA    R7,1(R2,R7)             point past &DESC
*
         LA    R1,=A($TBADD,$ISPCMDS+VL)
         LINK  SF=(E,ISPLINK$)         TBADD ISPCMDS
*
         CLI   0(R7),X'00'             end of table?
         BNE   ADDCMDS1                not yet, keep doing it
*ENDLOOP
         LA    R1,=A($TBTOP,$ISPCMDS+VL)
         LINK  SF=(E,ISPLINK$)         TBTOP ISPCMDS
         BAL   R14,SETMSG              send message
*
         PR                            GOBACK
*---------------------------------------------------------------------*
*        Issue message                                                *
*---------------------------------------------------------------------*
SETMSG   BEGIN_PROC
         STRING (SHORTMSG,,T),INTO=SHORTMSG count characters in message
         ST    R15,DWD                 store length
         ISPLINK ($VREPLACE,$ZEDSMSG,DWD,SHORTMSG)
         STRING (LONGMSG,,T),INTO=LONGMSG count characters in message
         ST    R15,DWD                 store length
         ISPLINK ($VREPLACE,$ZEDLMSG,DWD,LONGMSG)
         LA    R7,0                    rc=0 (alarm=n)
         LA    R1,=A($SETMSG,$ISRZ000,$COND+VL)
         CLI   ALARM,C'Y'              ALARM=YES?
         BNE   SETMSG6                 no, jump
         LA    R7,8                    rc=8 (alarm=y)
         LA    R1,=A($SETMSG,$ISRZ001,$COND+VL)  yes, use ISRZ001
SETMSG6  EQU   *
         MVI   ALARM,C'N'              ALARM=NO (default)
         LINK  SF=(E,ISPLINK$)         SETMSG ISRZ000
         LR    R15,R7                  pass return code
         PR                            GOBACK
***********************************************************************
*                                                                     *
*        PARSE A COMMA-DELIMITED JCL PARM                             *
*                                                                     *
*        LA    R4,PARM                 PARM VALUE                     *
*        LH    R5,LENGTH               PARM LENGTH                    *
*        BAL   R14,PARSE_PARM                                         *
*        DC    S(L'PARM1,PARM1)        LENGTH,ADDR                    *
*        DC    S(L'PARM2,PARM2)        LENGTH,ADDR                    *
*                                                                     *
***********************************************************************
PARSE_PARM BEGIN_PROC SAVE=SAVE
         BCTR  R4,0                    START OF PARM - 1
         ALR   R5,R4                   LAST BYTE OF PARM
*LOOP
PARSE_PARM1 SLR R0,R0                  R0 = 00000000
         ICM   R0,B'0011',2(R14)       R0 = 0000BDDD
         SRDL  R0,12(0)                R0 = 0000000B, R1= BBB.....
         SRL   R1,20(0)                R1 = 00000DDD DISPLACEMENT
         ALR   R1,R13                  ADD CALLER'S SAVE AREA ADDR
         LR    R6,R1                   ADDR OF TARGET FIELD
         LH    R7,0(,R14)              LENGTH OF TARGET FIELD
*
         LA    R2,1(,R4)               FIRST BYTE OF CURRENT PARAMETER
*--LOOP
PARSE_PARM2 LA R4,1(,R4)               BUMP POINTER
         CLR   R4,R5                   END OF PARM REACHED?
         BH    PARSE_PARM3             YES, EXIT LOOP
         CLI   0(R4),C','              DELIMITER?
         BNE   PARSE_PARM2             NO, KEEP LOOPIN'
*--ENDLOOP
PARSE_PARM3 LR R3,R4                   POSITION OF ','
         SR    R3,R2                   LENGTH OF SOURCE PARAM
         ICM   R3,B'1000',BLANKS       PADDING
         MVCL  R6,R2                   MOVE SOURCE TO TARGET
         LA    R14,2+2(,R14)           NEXT TARGET
         CLI   0(R14),0                IS THIS A FIELD DESCRIPTOR?
         BE    PARSE_PARM1             YES, PROCESS IT
*ENDLOOP
         RETURN (0,12)                 goback
***********************************************************************
*                                                                     *
*        Execute an in-storage REXX EXEC                              *
*                                                                     *
*          LA  R1,=A(stmt1,L'stmt1)    FIRST STMT ADDR/LEN            *
*          LA  R0,8                    LENGTH OF ADDR/LEN ARRAY       *
*          LA  R2,TENWORDS+16          ADDR OF ARG LIST OR ZERO       *
*                                                                     *
***********************************************************************
RUNEXEC  BEGIN_PROC
         LA    R6,DYNAM_INSTBLK_HEADER ADDR OF IN-STORAGE BLOCK
         USING INSTBLK_HEADER,R6
         ST    R1,INSTBLK_ADDRESS      STORE INTO IN-STORAGE BLOCK
         ST    R0,INSTBLK_USEDLEN      COUNT STATEMENTS
         ST    R6,PTR_INSTBLK          ADDR OF IN-STORAGE BLOCK
         MVC   INSTBLK_ACRONYM,=C'IRXINSTB'
         MVC   INSTBLK_HDRLEN,=A(L'INSTBLK_HEADER)
         MVC   INSTBLK_MEMBER,BLANKS
         MVC   INSTBLK_DDNAME,=C'SYSIN   '
         MVC   INSTBLK_SUBCOM,BLANKS
*
         LA    R7,DYNAM_EVALBLOCK      ADDR OF EVAL BLOCK
         USING EVALBLOCK,R7
         ST    R7,PTR_EVALBLOCK        ADDR OF EXEC BLOCK
         LA    R0,EVALBLOCK_LENGTH/8   LENGTH IN DOUBLE-WORDS
         ST    R0,EVALBLOCK_EVSIZE     LENGTH IN DOUBLE-WORDS
         LA    R0,256                  LENGTH OF DATA IN BYTES
         ST    R0,EVALBLOCK_EVLEN      LENGTH OF DATA IN BYTES
*
        $LINK  EP=IRXEXEC,             REXX Interpreter                X
               PARAM=(=A(0),           EXEC BLOCK                      X
               (R2),                   ARGUMENTS,                      X
               =X'80000000',           Invoke as a command             X
               PTR_INSTBLK,            IN-STORAGE BLOCK                X
               =A(0),                  CPPL                            X
               PTR_EVALBLOCK,          EVAL BLOCK                      X
               =A(0),                  WORK AREA                       X
               =A(0))                  USER WORK AREA
         ICM   R1,B'1111',EVALBLOCK_EVLEN length of the returned data
         BNP   RUNEXEC8                no data returned, exit
         BCTR  R1,0                    for "EX"
         EX    R1,RUNEXECP             pack the result
         CVB   R1,DWD                  return code from EXEC
         PR
RUNEXEC8 EQU   *
         BSM   R1,0                    no RC, return negative value
         PR
RUNEXECP PACK  DWD,EVALBLOCK_EVDATA(*-*) pack the result
         DROP  R6,R7
***********************************************************************
*                                                                     *
*        Issue RACROUTE to check level of access to a data set        *
*                                                                     *
*        Input: ZWRKDSN contains dsname                               *
*                                                                     *
*        Output: R0 = 12  access(UNKNOWN)                             *
*                R0 = 0   access(NONE)                                *
*                R0 = 4   access(READ)                                *
*                R0 = 8   access(UPDATE)                              *
*                R0 = 12  access(CONTROL)                             *
*                R0 = 16  access(ALTER)                               *
*                                                                     *
***********************************************************************
RACHECK  BEGIN_PROC
         BAL   R14,LISTDSI             FLAGS
         LTR   R15,R15                 catalogued data set?
         BNZ   RACHECK9                no, use default
*
*        Check for ACF2 or Top-Secret
*
         L     R6,CVTPTR               CVT
         USING CVTMAP,R6
         ICM   R6,B'1111',CVTRAC       RACF VECTOR TABLE
         BZ    RACHECK9                no security system, exit
         USING RCVT,R6
         CLC   RCVTID,=C'ACF2'         Is this ACF2?
         BE    RACHECK9                yes, exit
         CLC   RCVTID,=C'RTSS'         Is this Top-secret?
         BE    RACHECK9                yes, exit
*
*        Check if ACF2 is on the system when RACFID='RCVT'
*
         TM    RCVTSTAT,RCVTRNA        RACF Inactive?
         BO    RACHECK9                yes, exit
         CLI   RCVTDSNL,0              Is it really RACF?
         BZ    RACHECK9                no, exit
*
*        Check RACF status
*
         LA    R6,RACF_DYN             POINT TO MY SAF PARM LIST
         USING SAFP,R6
         MVC   SAFP(RACF_LEN),RACF_MOD
         RACROUTE REQUEST=AUTH,                                        X
               ENTITY=RACFDSN,         DATA SET NAME                   X
               WORKA=RACFWORK,                                         X
               MF=(E,SAFP)
         LR    R2,R15                  save SAF return code
*
*        build a RACHECK failure message in case the invoker needs it.
*
         STRING 'Authorization Failed',INTO=SHORTMSG
         STRING 'RACROUTE REQUEST=AUTH,STATUS=ACCESS returned the folloX
               wing: R15=',((R2),,R3Z),                                X
               ' SAFPRRET=',(SAFPRRET,F,R3Z),                          X
               ' SAFPRREA=',(SAFPRREA,F,R3Z),                          X
               ' DSNAME=''',(RACFDSN,,T),'''',                         X
               INTO=LONGMSG
         LTR   R15,R2                  any RACF decision ?
         BNZ   RACHECK9                no, use default
         CLI   SAFPRRET+3,20           access returned?
         BNE   RACHECK9                no, use default
         L     R0,SAFPRREA             access into R0
         STC   R0,RACHECK_ACCESS       save for caller
         PR
RACHECK9 EQU   *
         MVI   RACHECK_ACCESS,ACCESS_CONTROL Default access
         PR
         DROP  R6                      SAFP
*
RACF_MOD RACROUTE REQUEST=AUTH,        CHECK AUTHORIZATION             X
               CLASS='DATASET',        CHECK FOR DATASET AUTHORITY     X
               DSTYPE=M,               MODEL                           X
               STATUS=ACCESS,          RETURN USER'S CURRENT ACCESS    X
               RELEASE=1.9,            RACF LEVEL                      X
               MF=L
***********************************************************************
*                                                                     *
*        Check if a data set is migrated by HSM.                      *
*        If it is, ask for permission to HRECALL it.                  *
*                                                                     *
***********************************************************************
CHKMIGR  BEGIN_PROC
         CLC   CATVOL,=C'MIGRAT'       MIGRATED BY HSM?
         BNE   CHKMIGR9                no, exit
         MVI   DWD,C'1'                ML1 (disk)
         CLI   CATDEVT+2,X'80'         migrated to tape?
         BNE   *+8                     no, jump
         MVI   DWD,C'2'                ML2 (tape)
         STRING 'Dataset(',(ZWRKDSN,,T),                               X
               ') is migrated to ML',(DWD,1),                          X
               '; Enter Y to RECALL it:',                              X
               INTO=STRING1
         TPUT  STRING1,(R15),ASIS      write message (WRITENR)
         TGET  DWD+4,1                 get reply (one byte only)
         OI    DWD+4,C' '              uppercase
         CLI   DWD+4,C'Y'              REPLY=Y ?
         BE    CHKMIGR9                yes, exit
         STRING 'Migrated Data Set',INTO=SHORTMSG
         STRING 'Dataset(',(ZWRKDSN,,T),                               X
               ') is migrated to ML',(DWD,1),                          X
               INTO=LONGMSG
         MVI   ALARM,C'Y'              error, beep.
         BAL   R14,SETMSG              send message
         LA    R15,4                   no, RC=4
         PR
CHKMIGR9 SLR   R15,R15                 not migrated (RC=0)
         PR
***********************************************************************
*                                                                     *
*        Issue LOCATE macro to check for the existence of a data set  *
*                                                                     *
***********************************************************************
LISTDSI  BEGIN_PROC
         CLI   CATVOL,0                LOCATE performed already?
         BNE   LISTDSI8                yes, exit
*
*        Remove member name and copy dsname to RACFDSN
*
         LA    R0,L'RACFDSN            max length of dsname
         LA    R2,ZWRKDSN              START OF DSNAME
LISTDSI2 CLI   0(R2),C'('              member name?
         BE    LISTDSI3                yes, exit loop
         LA    R2,1(,R2)               bump pointer
         BCT   R0,LISTDSI2
LISTDSI3 STRING (ZWRKDSN,(R2)),INTO=RACFDSN move dsname w/o mbr name
         OC    RACFDSN,BLANKS          upper-case
*
*        Remove member name and copy dsname to RACFDSN
*
         L     R14,LISTDSI_CAMLST      FLAGS
         LA    R15,RACFDSN             DSNAME
         SLR   R0,R0                   NO CVOL
         LA    R1,RACFWORK             265 BYTES
         STM   R14,R1,TENWORDS         relocate CAMLST
         LOCATE TENWORDS               read catalog
         LTR   R15,R15                 CATALOGUED DSN?
         BNZ   LISTDSI7                no, exit
         MVC   CATVOL,RACFWORK+6       yes, save volser
         MVC   CATDEVT,RACFWORK+2      yes, save device type
*
*        Rebuild DSNAME(MEMBER) with true name instead of alias
*
         STRING (RACFDSN,44,T),((R2),ZWRKDSN+L'ZWRKDSN),               X
               INTO=(RACFWORK+44,L'ZWRKDSN)
         MVC   ZWRKDSN,RACFWORK+44     true name
         SLR   R15,R15                 rc=0 (cataloged)
LISTDSI7 PR
*
LISTDSI8 SLR   R15,R15                 rc=0 (already LOCATEd)
         PR
LISTDSI_CAMLST CAMLST NAME,0,,0
***********************************************************************
*                                                                     *
*        LMINIT/VIEW/LMFREE via DDname                                *
*                                                                     *
*        MACLIBDD contains the DDname                                 *
*        STRING1 contains the dsnames                                 *
*                                                                     *
***********************************************************************
LMVIEW   BEGIN_PROC
         DEVTYPE MACLIBDD,DWD
         LTR   R15,R15                 ALREADY ALLOCATED?
         BZ    LMVIEW3                 YES, JUMP
*
*        Issue ALLOCATE command to allocate specified data sets
*
         STRING 'CMD(ALLOCATE DD(',MACLIBDD,') SHR DS(',(STRING1,,T),  X
               ')) MODE(FSCR)',INTO=COMMAND
         ST    R15,DWD                 store length
         L     R1,CVTPTR               CVT ADDR
         L     R1,CVTLINK-CVTMAP(,R1)  DCB for SYS1.LINKLIB
         LOAD  EP=ALLOC,DCB=(R1)       pre-load ALLOCATE command
         ISPLINK ($SELECT,DWD,COMMAND),ERRET=LMVIEW9
*
*        Issue LMINIT/VIEW/LMFREE
*
LMVIEW3  EQU   *
         STRING 'LMINIT DATAID(ID1) DDNAME(',MACLIBDD,') ENQ(SHRW)',   X
               INTO=COMMAND
         BAL   R14,ISPEXEC          <- execute command
         LTR   R15,R15                 COMMAND OK ?
         BNZ   LMVIEW9                 NO, EXIT
         LA    R0,L'DATAID             max length
         ST    R0,DWD                  max length
         ISPLINK ($VCOPY,=C'ID1 ',DWD,DATAID,$MOVE),ERRET=LMVIEW9
         STRING VIEWEDIT,' DATAID(',DATAID,') MEMBER(',(OPT,,T),       X
               ') PROFILE(',(PARM3,8,T),')',INTO=COMMAND
         CLI   VIEWEDIT,C'V'           VIEW?
         BNE   LMVIEW4                 no, jump
         CLI   ISPFVM,X'41'            ISPF 4.1 or up?
         BNL   LMVIEW4                 yes, jump
         STRING 'BROWSE DATAID(',DATAID,') MEMBER(',(OPT,,T),')',      X
               INTO=COMMAND
LMVIEW4  EQU   *
         BAL   R14,ISPEXEC          <- execute command
         LR    R7,R15                  save return code
         STRING 'LMFREE DATAID(',DATAID,')',INTO=COMMAND
         BAL   R14,ISPEXEC          <- execute command
         LR    R15,R7                  restore return code
LMVIEW9  EQU   *
         PR
***********************************************************************
*                                                                     *
*        Allocate or retrieve the XCTL Reusable Work Area             *
*                                                                     *
***********************************************************************
XCTLGET  BEGIN_PROC
         L     R1,CVTPTR               CVT addr
         L     R2,CVTLINK-CVTMAP(,R1)  addr of SYS1.LINKLIB DCB
         LA    R3,=A(IEANT_TASK_LEVEL) SCOPE
         LA    R4,XCTLNAME             NAME (16 bytes)
         LA    R5,RACFWORK             TOKEN (16 bytes)
         LA    R6,RETCODE              RETURN CODE
         STM   R3,R6,PARMLIST          BUILD PARM LIST
         OI    PARMLIST+12,X'80'       BUILD PARM LIST
         LOAD  EP=IEANTRT,DCB=(R2)     SYS1.CSSLIB
         LR    R15,R0                  pass EP addr
         LA    R1,PARMLIST             parms for IEANTRT
         BASR  R14,R15              <- invoke IEANTRT
         LTR   R15,R15                 already allocated?
         BZ    XCTLGET9                yes, exit
         GETMAIN RU,LV=XCTLWORKL,LOC=ANY allocate work area
         XC    RACFWORK(16),RACFWORK   clear 16 bytes
         ST    R1,RACFWORK
         LA    R6,=F'0'                PERSIST option
         LA    R7,RETCODE              RETURN CODE
         STM   R3,R7,PARMLIST          BUILD PARM LIST
         OI    PARMLIST+16,X'80'       BUILD PARM LIST
         LOAD  EP=IEANTCR,DCB=(R2)     SYS1.CSSLIB
         LR    R15,R0                  pass EP addr
         LA    R1,PARMLIST             parms for IEANTRT
         BASR  R14,R15              <- invoke IEANTCR
XCTLGET9 L     R1,RACFWORK             return area address
         PR
         DROP  R12                     local base
*
XCTLNAME DC    CL16'FASTPATHXCTLWORK'  name for N/T service
IEANT_TASK_LEVEL EQU 1
*
XCTLWORK DSECT                         XCTL Reusable Work Area
XCTLPARM DS    A(XCTLLEN,XCTLCMD)
XCTLLEN  DS    A(L'XCTLCMD)
XCTLCMD  DS    CL(L'COMMAND)
XCTLWORKL EQU  *-XCTLWORK
***********************************************************************
$LTORG   LOCTR
$STRING2 AH    R15,0(R15)
         BR    R15
ISPLINK$ LINK  EP=ISPLINK,SF=L
$ISPEXEC  DC   C'ISPEXEC '             PROGRAM
$ISREDIT  DC   C'ISREDIT '             PROGRAM
$ISRBRO   DC   C'ISRBRO  '             PROGRAM
$ISRUDA   DC   C'ISRUDA  '             PROGRAM
$CONTROL  DC   C'CONTROL'              FUNCTION
$SELECT   DC   C'SELECT '              FUNCTION
$SETMSG   DC   C'SETMSG'               FUNCTION
$TBADD    DC   C'TBADD'                FUNCTION
$TBDELETE DC   C'TBDELETE'             FUNCTION
$TBSCAN   DC   C'TBSCAN'               FUNCTION
$TBTOP    DC   C'TBTOP'                FUNCTION
$VCOPY    DC   C'VCOPY'                FUNCTION
$VDEFINE  DC   C'VDEFINE'              FUNCTION
$VERASE   DC   C'VERASE'               FUNCTION
$VGET     DC   C'VGET'                 FUNCTION
$VPUT     DC   C'VPUT'                 FUNCTION
$VREPLACE DC   C'VREPLACE'             FUNCTION
$VRESET   DC   C'VRESET'               FUNCTION
$CHAR     DC   C'CHAR'                 OPTION
$ERRORS   DC   C'ERRORS'               OPTION
$MOVE     DC   C'MOVE'                 OPTION
$PROFILE  DC   C'PROFILE'              OPTION
$RETURN   DC   C'RETURN'               OPTION
$ZERRMSG  DC   C'ZERRMSG '             VARIABLE
$EDBR0000 DC   C'EDBR0000'             VARIABLE
$ISPCMDS  DC   C'ISPCMDS '             VARIABLE
$ZCTACT   DC   C'ZCTACT '              VARIABLE
$ZCTDESC  DC   C'ZCTDESC '             VARIABLE
$ZCTTRUNC DC   C'ZCTTRUNC'             VARIABLE
$ZCTVERB  DC   C'ZCTVERB '             VARIABLE
$ISRZ000  DC   C'ISRZ000 '             MSGID (ALARM=NO)
$ISRZ001  DC   C'ISRZ001 '             MSGID (ALARM=YES)
$ZEDLMSG  DC   C'ZEDLMSG '             VARIABLE
$ZEDSMSG  DC   C'ZEDSMSG '             VARIABLE
$COND     DC   C'COND '                OPTION
VL       EQU   X'80000000'             end of list indicator
***********************************************************************
*                                                                     *
*        Dynamic Storage           <-- R13                            *
*                                                                     *
***********************************************************************
DYNAM    DSECT
         DS    18F                     SAVE AREA
TENWORDS DS    10F                     WORK AREA
PARMLIST DS    12F                     parm list for ISPLINK/ISPEXEC
DWD      DS    D                       WORK AREA
LLIBDCB  DS    V(IHADCB)               LIBDEF ISPLLIB DCB
CDE@     DS    V(CDENTRY)              own CDE
TLD@     DS    V(TLD)                  ISPF TLD
TSI@     DS    V(TSI)                  ISPF TSI
CMD@     DS    A,F                     cmd entered by user (addr,len)
OWNNAME  DS    CL8'FASTPATH'           my own name
OWNNAME2 DS    CL8'FASTPATH'           my own name (UNLOAD)
CMDNAME  DS    CL8'TSOFS'              Name of the ISPF command
*
ZENVIR   DS    CL32'ISPF 3.2'          CURRENT ISPF LEVEL
ZAPPLID  DS    C'ISF '                 CURRENT ISPF APPLICATION ID
ZUSER    DS    C'GILBERT'              USER ID
ZPREFIX  DS    CL8'SYSTEM99'           Data Set Prefix
ZSCREEN  DS    C'32'                   Screen number
ZDEL     DS    C';'                    Command Delimiter ";"
ZSPLIT   DS    C'YES'                  Split screen
ZWSCON   DS    C'IP:255.255.255.255:65535' Workstation connection
*
         DS    0D
FUNCTION DS    CL8                     FUNCTION
OPT      DS    CL56                    2ND OPTION FROM PARM
PARM3    DS    CL100                   3RD OPTION FROM PARM
PARM4    DS    CL8                     4TH OPTION FROM PARM
NEWAPPL  DS    C'ISR '                 NEW ISPF APPL ID
NEWPGM   DS    CL8                     NEXT PGM
NEWPANEL DS    CL8                     NEXT PANEL
NEWCMD   DS    CL8                     NEXT COMMAND
OPT8     DS    CL8                     1st 8 chars of OPT
OPTADDR  DS    A(OPT,L'OPT)            addr of 2nd parm
OPTLEN   EQU   OPTADDR+4,4,C'F'        length of 2nd parm
OPT2     DS    CL(L'OPT)               work area
BLANKS   DS    CL(L'ZREFTYPE+L'ZWRKVOL+L'ZWRKDSN)' '
         DC    0S((L'BLANKS-L'OPT-4095)/4096)  ASSERT L'BLANKS,GE,L'OPT
GAP      DS    F                       first gap found
PRJ1     DS    CL8                   1
LIB1     DS    CL8                   2
LIB2     DS    CL8                   3
LIB3     DS    CL8                   4
LIB4     DS    CL8                   5
TYP1     DS    CL8                   6
PROF     DS    CL8                   7
MIX      DS    CL8                   8
FNAM     DS    CL8                   9
ZEDLOCK  DS    CL8                  10
ZEDLOCKP DS    CL8                  11
ZPCFMCN  DS    CL8                  12
ZVIEW    DS    CL8                  13
ZVIMAC   DS    CL8                  14
ZVPROF   DS    CL8                  15
ZEDITWS  DS    CL8                  16 view/edit 4.2
ZVIEWWS  DS    CL8                  17 view/edit 4.2
*
ZREFTYPE DS    CL1                   1 WORK-PLACE
ZWRKVOL  DS    CL6                   2 WORK-PLACE
ZWRKDSN  DS    CL56                  3 WORK-PLACE
*
         DS    0D
STRING1  DS    CL200,CL100
COMMAND  DS    CL200
SHORTMSG DS    CL20                    ISREZ000
LONGMSG  DS    CL512                   ISREZ000
TRNTBL   EQU   RACFWORK,256,C'C'       TRT Table
PLUSSIGN DS    C'+'                    last char of the command
ISPFVM   DS    X'35'                   CURRENT ISPF LEVEL
ALARM    DS    C'N'                    ALARM=Y/N for SETMSG rtne
QFLAG    DS    X
ATTR1    DS    X                       CDATTR
RACHECK_ACCESS DS FL1                  RACHECK
ACCESS_READ EQU 4                      READ access
ACCESS_UPDATE EQU 8                    UPDATE access
ACCESS_CONTROL EQU 12                  CONTROL access
URPNAME  DS    CL8                     name of the URP
BRDSN    DS    CL44                    CNAEEDIT/CNAEBROW
BRMEM    DS    CL8                     CNAEEDIT/CNAEBROW
BRVOL    DS    C'VOLSER'               CNAEEDIT/CNAEBROW
CATVOL   DS    C'VOLSER'               volser from LOCATE macro
CATDEVT  DS    XL4                     device type from LOCATE macro
MACLIBDD DS    CL8'$$MACLIB'           ddname for MACLIB/PARMLIB
VIEWEDIT DS    CL4'VIEW'               VIEW/EDIT FOR MACLIB/PARMLIB
ZERRMSG  DS    C'ZERRMSG '             VARIABLE
ZTEMPN   DS    C'ISR12345'             VARIABLE
EDBRNNNN DS    C'EDBRNNNN '            VARIABLE NAME
EDBR0000 DS    C'NNNN'                 VARIABLE VALUE
DATAID   DS    CL8                     LMINIT
TOKEN    DS    F                       IKJURPS
RETCODE  DS    F                       IKJURPS
REASON   DS    F                       IKJURPS
RETCODE2 DS    F                       IKJURPS
REASON2  DS    F                       IKJURPS
         CSVQUERY MF=(L,CSVQRYWK)
LOADLEN  DS    A,F                     load point address & length
DUMMY    DS    F                       dummy return area
STIMERL  STIMERM SET,MF=L
ATTACHL  ATTACH SF=L
PTR_INSTBLK DS A(DYNAM_INSTBLK_HEADER)
DYNAM_INSTBLK_HEADER DS XL(L'INSTBLK_HEADER)
PTR_EVALBLOCK DS A(DYNAM_EVALBLOCK)
DYNAM_EVALBLOCK DS XL(EVALBLOCK_LENGTH)
STACKL   STACK MF=L
*
ZSCREEND DS    F'24'                   SCREEN DEPTH (ROWS)
ZSCREENW DS    F'80'                   SCREEN WIDTH (COLUMNS)
CURRLINE DC    F'0'                    CURRENT LINE
*
RACF_DYN RACROUTE REQUEST=AUTH,RELEASE=1.9,MF=L
RACF_LEN EQU   *-RACF_DYN
RACFWORK DS    XL512                   RACROUTE WORK AREA
RACFDSN  DS    CL44                    dsname for RACROUTE
DYNAML   EQU   *-DYNAM
*
SCRATCHPAD_DSECT DSECT                 Used by XCTL function
SCRATCHPAD DS  CL256
         STRING GENERATE
         DROP
***********************************************************************
*                                                                     *
*        Make some PDF modules resident in JPAQ                       *
*                                                                     *
*        The purpose of this routine is to speed up access            *
*        to some PDF functions (Edit, Browse) when ISPLLIB and        *
*        STEPLIB contain large numbers of libraries.                  *
*                                                                     *
*        LOAD and IDENTIFY macros are used to clone the LPDE,         *
*        create two CDEs and one XTLST for each module and chain      *
*        the CDEs to the JPAQ.  Note that the modules                 *
*        themselves are not duplicated, the only version that         *
*        exists is the one in PLPA; all we do here is to create       *
*        entries in the JPAQ that point to the PLPA modules.          *
*                                                                     *
*        Using this technique allows you to avoid time-consuming      *
*        directory searches whenever you invoke the most common       *
*        PDF functions.                                               *
*                                                                     *
*        If you're lucky enough that you have no ISPLLIB or           *
*        STEPLIB, this won't do you any good, but it won't do         *
*        you any harm either.                                         *
*                                                                     *
*        If you're so unlucky that ISPF/PDF is in the link-list       *
*        and not in the LPA on your system (shame on your system      *
*        programmers), then this will definitely help you.            *
*                                                                     *
***********************************************************************
PRELOAD  CSECT
PRELOAD  RMODE ANY
         BAKR  R14,0                   save registers
         LR    R12,R15
         USING PRELOAD,R12
         BAL   R7,PRELOAD1             issue LOAD/IDENTIFY
         DC    C'ISRBRO  '             PDF 1
         DC    C'ISREDIT '             PDF 2
         DC    C'ISRUDA  '             PDF 3.1 & 3.2
         DC    C'ISRUMC  '             PDF 3.3
         DC    C'ISRUDL  '             PDF 3.4
         DC    C'ISRPTC  '             PDF 6
         DC    C'ISRSUBS '             PDF RMODE31 routines
         DC    C'ISRSUBX '             PDF RMODE24 routines
*
         DC    C'ISPEXEC '             ISPF application interface
         DC    C'ISPQRY  '             ISPF application interface
         DC    C'ISPSAM  '             ISPF Status Area Manager
         DC    C'ISPTUTOR'             ISPF Tutorial
*
         DC    C'IKJURPS '             TSO/E Unauth Resource Processor
         DC    C'IEANTCR '             Name/Token Create
         DC    C'IEANTRT '             Name/Token Retrieve
*
         DC    C'IRXINIT '             REXX main pgm
         DC    C'IRXEXEC '             REXX interpreter
         DC    C'IRXSTAMP'             REXX stack manager
         DC    C'IRXAPPC '             REXX APPC interface
         DC    C'IRXECUSP'             REXX ?
*
         DC    C'ALLOCATE'             TSO ALLOCATE command
         DC    C'EXEC    '             TSO EXEC command
         DC    C'CALL    '             TSO CALL command
         DC    C'DELETE  '             TSO DELETE command
         DC    C'IDCSATO '             IDCAMS interface for TSO
         DC    C'HELP    '             TSO HELP command
         DC    C'SUBMIT  '             TSO SUBMIT command
         DC    C'RECEIVE '             TSO RECEIVE command
         DC    C'END     '             TSO END command
*
*
         DC    C'IEFEB4UV'             DEVICE TYPE SCAN ROUTINE
         DC    C'CUTPGM  '             CUT/PASTE EDIT macros
         DC    C'ROUTEPGM'             ROUTE EDIT macro
         DC    C'BR      '             BROWSE command
         DC    C'RXSMS   '             RXSMS program
         DC    C'STEMDISP'             STEMDISP sub-rtne (REXX)
         DC    C'IGGCSI00'             Catalog Search Interface
         DC    C'REXXTRY '             REXXTRY command
*
         DC    X'FFFF'                 end of table
*loop
PRELOAD1 L     R3,CVTPTR
         USING CVTMAP,R3
         GETMAIN R,LV=80               work area for BLDL
         XC    0(16,R1),0(R1)          clear 16 bytes
         LR    R4,R1                   pass the address
         USING PDS2-4,R4
         MVI   1(R4),1                 BLDLIST
         MVI   3(R4),80                BLDLIST
         MVC   PDS2NAME,0(R7)          module name
*
*        JOB PACK AREA (JPAQ)
*
         L     R8,PSATOLD-PSA          my TCB
         L     R8,TCBJSTCB-TCB(,R8)    job-step TCB
         LA    R8,TCBJPQ-TCB(,R8)      START OF CDE CHAIN (JPAQ)
         LR    R9,R7                   EP NAME
         L     R15,CVTQCDSR            CDE SEARCH ROUTINE
         BALR  R14,R15                 USES R0, R1, R8, R9, R11
         B     PRELOAD4            +0  FOUND, re-issue LOAD
*
*        Issue BLDL
*
         BLDL  0,PDS2-4                search step/task/link lib
         LTR   R15,R15                 BLDL OK?
         BNZ   PRELOAD5                no, search LPA
*
*        Load the module into the JPAQ
*
         CLI   PDS2LIBF,PDS2LJOB       found in tasklib/steplib?
         BL    PRELOAD5                no, look in LPA and LNKLST
         LOAD  EPLOC=PDS2NAME          load from tasklib/steplib
         B     PRELOAD9                next module
*
*        Load the module in to the JPAQ
*
PRELOAD4 LOAD  EPLOC=PDS2NAME          bump use count
         B     PRELOAD9                next module
*
*        ACTIVE LPA Q
*
PRELOAD5 L     R8,CVTQLPAQ             START OF CDE CHAIN (ALPAQ)
         LR    R9,R7                   EP NAME
         L     R15,CVTQCDSR            CDE SEARCH ROUTINE
         BALR  R14,R15                 USES R0, R1, R8, R9, R11
         B     PRELOAD9            +0  FOUND, IGNORE
*
*        PLPA DIRECTORY
*
         LM    R0,R1,PDS2NAME          EP NAME
         L     R15,CVTLPDSR            LPA SEARCH ROUTINE
         BALR  R14,R15                 USES R6-R9
         B     PRELOAD7            +0  FOUND, JUMP
*
*        LOAD from link-list
*
         CLI   PDS2LIBF,PDS2LLNK       found in link-list?
         BNE   PRELOAD9                no, give up
         TM    PDS2ATR1,PDS2REUS       REUS bit on?
         BNO   PRELOAD9                no, give up
         L     R2,CVTLINK              DCB for SYS1.LINKLIB
         LOAD  EPLOC=PDS2NAME,DCB=(R2) load from link-list
         B     PRELOAD9                next module
*
*        create JPAQ entries for PLPA modules
*
PRELOAD7 EQU   *
         USING LPDE,R8                 set by LPDSR
         L     R2,LPDENTP              entry-point address
         TM    LPDEATTR,LPDEMIN        ALIAS?
         BO    PRELOAD8                yes, issue IDENTIFY
         DROP  R8
         L     R2,CVTLINK              LINKLIST DCB
         LOAD  EPLOC=(R7),             load ISRBRO                     X
               DCB=(R2)                CVTLINK
         LR    R2,R0                   save entry point addr
         LA    R4,4(,R4)               point at member name
         MVI   3(R4),C'_'              convert ISRBRO to ISR_BRO
         MVC   4(4,R4),3(R7)           convert ISRBRO to ISR_BRO
         IDENTIFY EPLOC=(R4),ENTRY=(R2) define ISR_BRO
         LTR   R15,R15
         BNZ   PRELOAD9
         LOAD  EPLOC=(R4)              load ISR_BRO
         DELETE EPLOC=(R7)             delete ISRBRO
PRELOAD8 EQU   *
         IDENTIFY EPLOC=(R7),ENTRY=(R2) define ISRBRO onto ISR_BRO
*
PRELOAD9 LA    R7,8(,R7)               next entry
         CLI   0(R7),X'FF'             end of table reached?
         BNE   PRELOAD1                not yet, process next entry
*endloop
         FREEMAIN R,LV=80,A=(R4)       FREE BLDL WORK AREA
         PR
*---------------------------------------------------------------------*
*        DSECTs                                                       *
*---------------------------------------------------------------------*
         PRINT NOGEN
         YREGS
         IHAECVT                       ECVT
         AIF   (D'ECVTTCP).ECVT2
ECVTTCP  EQU   ECVT+X'B0',4,C'A'       TCP/IP Server Anchor Block
.ECVT2   ANOP
PSA      DSECT
PSATOLD  EQU   *+X'021C'               addr of my TCB
PSAAOLD  EQU   *+X'0224'               addr of my ASCB
         IHALPDE                       LPA Directory Entry
         IEESMCA                       SMF
RCVT     ICHPRCVT                      RACF CVT
*
         IKJTCB                        TCB
         IKJRB                         RB
         IHAASCB                       ASCB
         IHAASXB                       ASXB
         IKJEFLWA                      LWA
         IHAPDS PDSBLDL=YES            directory entry
         IHACDE                        Contents Directory Entry
         IKJECT                        Environment Control Table
         IHATQE                        Timer Queue Element
*
         IKJLSD                        List Source Descriptor
LSD_LENGTH EQU *-LSD
*
         IEZJSCB                       Job Step Control Block
         IEFASCTB                      Step Control Block
         IEFSCTX DSECT=YES             Step Control Block Extension
         AIF   (D'SCTXSTL).SCTX2
SCTXSTL  EQU   SCTX+X'7C',4,C'F'       step time limit (HBB4410)
.SCTX2   ANOP
         ICHSAFP DSECT=YES             RACROUTE
         IRXINSTB                      IN-STORAGE BLOCK
         IRXEVALB                      EVALUATION BLOCK
         ORG   EVALBLOCK_EVDATA+256    256 bytes of data
EVALBLOCK_LENGTH EQU *-EVALBLOCK
*
TLD      DSECT                         ISPF LOGICAL DISPLAY TABLE
TLDTBLID DS    C'TLD'                  TLD TABLE ID
TLDID    DS    C'1'                    TLD ID ('0','1',...)
         ORG   TLD+X'034'
TLDTSCP  DS    V(TSC)                  Common Subroutine Table
TLDTSIP  DS    V(TSI)                  System Interface Table
TLDTSVP  DS    V(TSV)                  System Variables Table
         ORG   TLD+X'60'
TLDTLSP  DS    V(TLS)                  Logical Screen Table
         ORG   TLD+X'A4'
TLDCSR   DS    F                       Cursor Offset
         ORG   TLD+X'C0'
TLDCLSWD DS    F                       Current Line Width
         ORG   TLD+X'D0'
TLDMPSWD DS    F                       Max Line Width
         ORG   TLD+X'1F4'
TLDECTP  DS    V(ECT)                  Environment Control Table
         ORG   TLD+X'210'
TLDIOWA  DS    V(IORLS)                I/O routine work area
*
TSI      DSECT                         System Interface Table
TSITBLID DS    C'ISPTSI  '
TSIRMZ   DS    C'3.5.0000'             V.R.M
         ORG   TSI+X'03C'
TSITPDP  DS    A(TPD)                  Physical Display Table
         ORG   TSI+X'0B8'
TSICBUFP DS    V(CBUF)                 CPPLCBUF
TSIUPTP  DS    V(UPT)                  CPPLUPT
TSIPSCBP DS    V(PSCB)                 CPPLPSCB
TSIECTP  DS    V(ECT)                  CPPLECT
         ORG   TSI+X'1BC'
TSIUCTAB DS    C'USERCMDS'             User command table
         DS    F'8'                    ?
         DS    C'DT357   '             ?
TSILCTAB DS    C'SITECMDS'             Local command table
*
TSV      DSECT                         System Variables Table
         ORG   TSV+X'018'
         DS    C'='                    Jump character
         DS    C':'                    Line Command char
         DS    C'>'                    Command Table bypass
TSVZDEL  DS    C';'                    Command Delimiter
*
TPD      DSECT                         Physical Display Table
TPDTBLID DS    C'TPD     '
         ORG   TPD+X'080'
TPDDTLDP DS    A(TLD)                  DUMMY TLD (TLD0)
         END   FASTPATH
         TITLE 'JUL2DAYS - Julian-to-days conversion routine'
***********************************************************************
*                                                                     *
*        Convert a packed julian date obtained from the TIME macro    *
*        to an integer that represents the number of days since       *
*        1900/12/31.                                                  *
*                                                                     *
*        Input: R1=YYYYDDDF    julian date from TIME macro            *
*                                                                     *
*                 The first byte of R1 is 00 for years 1900-1999      *
*                 and 01 for years 2000-2099.                         *
*                                                                     *
*        Output:  R15=day of the week (1=monday, 7=sunday)            *
*                                                                     *
*                 R0=number of days since 1900/12/31                  *
*                                                                     *
*                 R1=pointer to a 9-byte character string that        *
*                            represents the day of the week.          *
*                                                                     *
***********************************************************************
JUL2DAYS CSECT
JUL2DAYS RMODE ANY
         SAVE  (14,1),,*
         MVO   32(8,R13),24(2,R13)     00000YYY?
         OI    32+7(R13),X'0F'         00000YYYF
         CVB   R14,32(,R13)            R14=YEAR
         LA    R0,365                  number of days in a year
         LR    R1,R14                  R1=years since 1900
         MR    R0,R0                   years*365
         BCTR  R14,0                   R14=YEAR-1
         SRL   R14,2                   number of leap years since 1901
         AR    R14,R1                  NUMBER OF DAYS IN PREVIOUS YEARS
         XC    20(6,R13),20(R13)       zero YYYY in 00000000YYYYDDDF
         CVB   R0,20(,R13)             NUMBER OF DAYS THIS YEAR
         AR    R0,R14                  number of days since 1900/12/31
*
*        DETERMINE DAY OF THE WEEK
*
         SLR   R14,R14                 PREPARE DIVISION
         LR    R15,R0                  DAYS SINCE 1900/12/31
         BCTR  R15,0                   DAYS-1
         LA    R1,7                    NUMBER OF DAYS IN WEEK
         DR    R14,R1                  DIVIDE BY NUM OF DAYS IN WEEK
         LA    R15,1(,R14)             Day of the week (1=monday)
         BALR  R1,0                    local base
         USING *,R1
         MH    R14,JUL2D_H9            MULT BY LENGTH OF A TABLE ENTRY
         LA    R1,JUL2D_TD(R14)        POINT TO DAY-OF-THE-WEEK
         RETURN (14)                   goback
*
JUL2D_H9 DC    H'9'                    length of a table entry
JUL2D_TD DC    C'Monday   Tuesday  WednesdayThursday Friday   Saturday X
               Sunday    '
         YREGS
**********************************************************************
         MACRO
         ISPCMDS &VERB=,&TRUNC=,&ACT=,&DESC=
         DC    CL8'&VERB'              verb
         DC    C'&TRUNC'               truncation
&LQ      SETC  'L'''
&LABEL   SETC  'ISP&SYSNDX'
         DC    AL1(&LQ&LABEL.A)        K'&ACT-2
&LABEL.A DC    C&ACT                   DESCRIPTION
         DC    AL1(&LQ&LABEL.D)        K'&ACT-2
&LABEL.D DC    C&DESC                  DESCRIPTION
         MEND
***********************************************************************
*                                                                     *
*        Command Table Entries                                        *
*                                                                     *
***********************************************************************
ISPCMDS  CSECT
ISPCMDS  RMODE ANY
         ISPCMDS VERB=BOTtom,                                          X
               TRUNC=3,                                                X
               ACT='ALIAS DOWN MAX',                                   X
               DESC='Abbreviated BOTTOM command'
*
         ISPCMDS VERB=BR,                                              X
               TRUNC=0,                                                X
               ACT='SELECT PGM(FASTPATH) PARM(BROWSE,&&ZPARM)',        X
               DESC='Fast Path Command: BROWSE'
*
         ISPCMDS VERB=CALendar,                                        X
               TRUNC=3,                                                X
               ACT='SELECT PGM(FASTPATH) PARM(CALENDAR)',              X
               DESC='Display Calendar'
*
         ISPCMDS VERB=CNTL,                                            X
               TRUNC=0,                                                X
               ACT='SELECT PGM(FASTPATH) PARM(CNTL,&&ZPARM,STD)',      X
               DESC='Fast Path Command: CNTL'
*
         ISPCMDS VERB=CONNECT,                                         X
               TRUNC=4,                                                X
               ACT='SELECT PGM(FASTPATH) PARM(WSCON)',                 X
               DESC='Establish connection to work-station'
*
         ISPCMDS VERB=CRASH,                                           X
               TRUNC=0,                                                X
               ACT='SELECT PGM(FASTPATH) PARM(CRASH,&&ZPARM)',         X
               DESC='Quick exit from ISPF'
*
         ISPCMDS VERB=D2X,                                             X
               TRUNC=0,                                                X
               ACT='SELECT PGM(FASTPATH) PARM(REXXT,SAY D2X(&&ZPARM))',X
               DESC='Convert decimal to hex'
*
         ISPCMDS VERB=ED,                                              X
               TRUNC=0,                                                X
               ACT='SELECT PGM(FASTPATH) PARM(EDIT,&&ZPARM)',          X
               DESC='Fast Path Command: EDIT'
*
         ISPCMDS VERB=FSPASTE,                                         X
               TRUNC=0,                                                X
               ACT='SELECT PGM(FASTPATH) PARM(FSPASTE)',               X
               DESC='Full-screen PASTE'
*
&HANDBOOK SETC '&&&&ZUSER..HANDBOOK'
         ISPCMDS VERB=HANDBook,                                        X
               TRUNC=5,                                                X
               ACT='SELECT PGM(FASTPATH) PARM(B,&HANDBOOK.(&&ZPARM))', X
               DESC='On-line Macro listing'
*
         ISPCMDS VERB=ICS,                                             X
               TRUNC=0,                                                X
               ACT='SELECT PGM(FASTPATH) PARM(ICS,&&ZPARM)',           X
               DESC='ISPF Command Shell'
*
         ISPCMDS VERB=IND$FILE,                                        X
               TRUNC=0,                                                X
               ACT='SELECT CMD(IND$FILE &&ZPARM) MODE(FSCR)',          X
               DESC='PC/3270 File Transfer'
*
         ISPCMDS VERB=LC,                                              X
               TRUNC=0,                                                X
               ACT='SELECT PGM(FASTPATH) PARM(TSOFS,LISTCAT ENT(''%DSNAX
               ME'') ALL',                                             X
               DESC='IDCAMS LISTCAT'
*
         ISPCMDS VERB=LISTBc,                                          X
               TRUNC=5,                                                X
               ACT='SELECT CMD(LISTBC &&ZPARM) MODE(FSCR)',            X
               DESC='List Broadcast Messages'
*
         ISPCMDS VERB=LOAD,                                            X
               TRUNC=0,                                                X
               ACT='SELECT PGM(FASTPATH) PARM(LOAD,&&ZPARM)',          X
               DESC='Load a module into memory'
*
         ISPCMDS VERB=LOGOFf,                                          X
               TRUNC=5,                                                X
               ACT='SELECT PGM(FASTPATH) PARM(CRASH,LOGOFF)',          X
               DESC='Quick LOGOFF from ISPF'
*
         ISPCMDS VERB=LOGON,                                           X
               TRUNC=0,                                                X
               ACT='SELECT PGM(FASTPATH) PARM(CRASH,LOGON &&ZPARM)',   X
               DESC='Quick re-LOGON from within ISPF'
*
         ISPCMDS VERB=MAClib,                                          X
               TRUNC=3,                                                X
               ACT='SELECT PGM(FASTPATH) PARM(MACLIB,&&ZPARM,STD)',    X
               DESC='Fast Path Command: MACLIB'
*
         ISPCMDS VERB=OPENCmds,                                        X
               TRUNC=5,                                                X
               ACT='SELECT PGM(FASTPATH) PARM(OPENC,&&ZPARM)',         X
               DESC='Fast Path Command: OPEN command table'
*
         ISPCMDS VERB=NETStat,                                         X
               TRUNC=4,                                                X
               ACT='SELECT PGM(FASTPATH) PARM(NETSTAT,&&ZPARM)',       X
               DESC='Fast Path Command: NETSTAT'
*
         ISPCMDS VERB=MAIL,                                            X
               TRUNC=0,                                                X
               ACT='SELECT CMD(%NEWAPPL MAIL)',                        X
               DESC='TSOMAIL Application'
*
         ISPCMDS VERB=PARMLib,                                         X
               TRUNC=5,                                                X
               ACT='SELECT PGM(FASTPATH) PARM(PARMLIB,&&ZPARM,STD,E)', X
               DESC='Fast Path Command: Edit Parmlib Member'
*
         ISPCMDS VERB=RECEive,                                         X
               TRUNC=4,                                                X
               ACT='SELECT CMD(RECEIVE &&ZPARM) MODE(FSCR)',           X
               DESC='TSO Interactive Transmit/Receive Facility'
*
         ISPCMDS VERB=REXXTry,                                         X
               TRUNC=5,                                                X
               ACT='SELECT PGM(FASTPATH) PARM(REXXTRY,&&ZPARM)',       X
               DESC='Execute REXX statement'
*
         ISPCMDS VERB=RMFmon,                                          X
               TRUNC=3,                                                X
               ACT='SELECT CMD(RMFMON &&ZPARM) MODE(FSCR)',            X
               DESC='RMFMON Command'
*
         ISPCMDS VERB=SDsf,                                            X
               TRUNC=2,                                                X
               ACT='SELECT PGM(FASTPATH) PARM(SDSF,&&ZPARM)',          X
               DESC='Fast Path Command: SDSF'
*
         ISPCMDS VERB=SHOWMvs,                                         X
               TRUNC=5,                                                X
               ACT='SELECT CMD(SHOWMVS &&ZPARM) MODE(FSCR)',           X
               DESC='SHOWMVS Utility'
*
         ISPCMDS VERB=SYSID,                                           X
               TRUNC=0,                                                X
               ACT='SELECT PGM(FASTPATH) PARM(SYSID,&&ZPARM)',         X
               DESC='Display System ID on every panel'
*
         ISPCMDS VERB=TIME,                                            X
               TRUNC=0,                                                X
               ACT='SELECT PGM(FASTPATH) PARM(TIME)',                  X
               DESC='Fast Path Command: TIME'
*
         ISPCMDS VERB=TSOFs,                                           X
               TRUNC=4,                                                X
               ACT='SELECT PGM(FASTPATH) PARM(TSOFS,&&ZPARM)',         X
               DESC='TSO Full-screen Command'
*
         ISPCMDS VERB=UNLOAD,                                          X
               TRUNC=0,                                                X
               ACT='SELECT PGM(FASTPATH) PARM(UNLOAD,&&ZPARM)',        X
               DESC='Unload a module from memory'
*
         ISPCMDS VERB=UTil,                                            X
               TRUNC=2,                                                X
               ACT='SELECT PGM(FASTPATH) PARM(UTIL,&&ZPARM)',          X
               DESC='Fast Path Command: PDF Utilities'
*
         ISPCMDS VERB=VERAse,                                          X
               TRUNC=4,                                                X
               ACT='SELECT PGM(FASTPATH) PARM(VERASE,&&ZPARM)',        X
               DESC='Remove Variables from Shared and/or Profile Pool'
*
         ISPCMDS VERB=VI,                                              X
               TRUNC=0,                                                X
               ACT='SELECT PGM(FASTPATH) PARM(VIEW,&&ZPARM)',          X
               DESC='Fast Path Command: VIEW'
*
         ISPCMDS VERB=WHOami,                                          X
               TRUNC=3,                                                X
               ACT='SELECT CMD(%WHOAMI)',                              X
               DESC='Display System ID and User ID in large letters'
*
         ISPCMDS VERB=WP,                                              X
               TRUNC=2,                                                X
               ACT='SELECT PGM(FASTPATH) PARM(WP,&&ZPARM)',            X
               DESC='Fast Path Command: Work-Place'
*
         ISPCMDS VERB=X2D,                                             X
               TRUNC=0,                                                X
               ACT='SELECT PGM(FASTPATH) PARM(REXXT,SAY X2D(&&ZPARM))',X
               DESC='Convert hex to decimal'
*
         ISPCMDS VERB=ZDEL,                                            X
               TRUNC=0,                                                X
               ACT='SELECT PGM(FASTPATH) PARM(ZDEL,&&ZPARM)',          X
               DESC='Display/Set Command Delimiter'
*
         DC    X'00'                   end of table
         END
//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB
//         DD DISP=SHR,DSN=SYS1.MODGEN             LWA/ASXB
//         DD DISP=SHR,DSN=GILBERT.FILE183.PDS     STRING MACRO
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD UNIT=VIO,SPACE=(TRK,2),DISP=(,PASS),BLKSIZE=3200
//*-------------------------------------------------------------------
//LKED    EXEC PGM=IEWL,PARM='LIST,MAP,RENT'
//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,PASS)
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,1)
//SYSLMOD  DD DISP=SHR,DSN=GILBERT.LOAD(FASTPATH)
//SYSPRINT DD SYSOUT=*
