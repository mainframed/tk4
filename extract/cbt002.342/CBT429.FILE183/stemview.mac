//GILBERTV JOB (ACCT#),STEMVIEW,
// NOTIFY=&SYSUID,
// CLASS=A,MSGCLASS=X,COND=(0,NE)
//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF,BATCH)
***********************************************************************
*                                                                     *
* MODULE NAME = STEMVIEW                                              *
*                                                                     *
* DESCRIPTIVE NAME = Display Stem Variables using BRIF or EDIF.       *
*                                                                     *
* STATUS = R108                                                       *
*                                                                     *
* FUNCTION = This assembler sub-routine can be invoked in a REXX      *
*            EXEC to display the contents of stem variables using     *
*            the ISPF BRIF or EDIF service.  STEMVIEW is a nice       *
*            complement to the REXX OUTTRAP function.                 *
*                                                                     *
*            STEMVIEW can also PULL lines from the data stack.        *
*                                                                     *
* AUTHOR = Gilbert Saint-flour <gsf@pobox.com>                        *
*                                                                     *
* ENVIRONMENT = SEE BELOW                                             *
*                                                                     *
*    DEPENDENCIES: TSO/E V2                                           *
*                  ISPF/PDF V3 (or above)                             *
*                                                                     *
* MODULE TYPE = PROCEDURE, (CSECT TYPE)                               *
*                                                                     *
*    PROCESSOR = IBM OS/ASSEMBLER H VERSION 2 OR                      *
*                IBM HIGH LEVEL ASSEMBLER/MVS                         *
*                                                                     *
*    MODULE SIZE = 2K                                                 *
*                                                                     *
*    ATTRIBUTES = REENTERABLE, RMODE ANY, AMODE 31,                   *
*                 PROBLEM STATE, KEY 8                                *
*                 APF AUTHORIZATION: NONE                             *
*                                                                     *
* SYNTAX  =  See below                                                *
*                                                                     *
*    CALL STEMVIEW  service,                                          *
*                   stemname                                          *
*                   <,firstelem>                                      *
*                   <,stemcount>                                      *
*                   <,title>                                          *
*                   <,panel>                                          *
*                   <,lrecl>                                          *
*                   <,recfm>                                          *
*                   <,profile>                                        *
*                                                                     *
*    Arguments:                                                       *
*                                                                     *
*         service   This argument must be coded as 'BROWSE' or 'VIEW'.*
*                   It indicates which of the BRIF or EDIF services   *
*                   will be used for display.                         *
*                                                                     *
*                   If the BROWSE service is requested, the user can  *
*                   enter the E or V commands on the BROWSE screen    *
*                   to switch to VIEW.  This allows the data to       *
*                   be saved using CREATE/REPLACE, CUT or ROUTE.      *
*                                                                     *
*         stemname  the stem of the family of variables to display.   *
*                   The combined lengths of the stemname argument     *
*                   and the largest subscript (plus the period, if    *
*                   specified) cannot exceed 80 characters.           *
*                   If stemname is a true REXX stem, code a period    *
*                   as the last character.  If you do not specify     *
*                   the period, the subscripts will be concatenated   *
*                   to the stem name without an intervening period.   *
*                   For example, if you specify a stemname of "ABC.", *
*                   STEMVIEW will look for variables of the form      *
*                   "ABC.1", "ABC.2", etc. If you specify a stemname  *
*                   of "XYZ" (no period), STEMVIEW will look for      *
*                   variables of the form "XYZ1", "XYZ2", etc.        *
*                                                                     *
*                   If the first argument is coded as "VIEW" and      *
*                   stemname is omitted, STEMVIEW PULLs lines from    *
*                   the stack.                                        *
*                                                                     *
*         firstelem the element of the pseudo-array to begin the      *
*                   display on.  The default value is element 1.      *
*                                                                     *
*         stemcount the number of elements to display.                *
*                   If you do not specify stemcount, STEMVIEW will    *
*                   display variables beginning with firstelem, and   *
*                   continuing until an un-initialized variable is    *
*                   found (i.e., a variable which has its name for    *
*                   a value).                                         *
*                                                                     *
*         title     an arbitrary character string which identifies    *
*                   the data which is being displayed.  The maximum   *
*                   length of this string is 54 characters.           *
*                                                                     *
*         panel     a 1 to 8 character name of the panel member to    *
*                   use for the display. The default panel is         *
*                   ISRBROBF for BROWSE and ISREDDEx for VIEW,        *
*                   where x is 2 for ISPF V3 and 3 for ISPF V4.       *
*                                                                     *
*         lrecl     the record length that should be passed           *
*                   to EDIF when the VIEW service is requested.       *
*                   The default value is 255.                         *
*                                                                     *
*         recfm     the record format that should be passed to        *
*                   EDIF when the VIEW service is requested.          *
*                   Possible values are F, FA, FM, V, VA, VM, or U.   *
*                   The default value is V.                           *
*                                                                     *
*         profile   the 8-char name of the profile that should be     *
*                   used by EDIF when the VIEW service is requested.  *
*                   The default value is TEXT.                        *
*                                                                     *
*    Examples:                                                        *
*                                                                     *
*         Call the STEMVIEW routine to display the output of the      *
*         TSO "LISTCAT" command.  The variables to display            *
*         begin with the characters "LINE.":                          *
*                                                                     *
*            CALL OUTTRAP 'LINE.'                                     *
*            "LISTCAT"                                                *
*            CALL STEMVIEW 'BROWSE','LINE.',,,'List Catalog'          *
*                                                                     *
*         QUEUE JCL to the data stack and call the STEMVIEW           *
*         routine to VIEW it:                                         *
*                                                                     *
*            "MAKEBUF"                                                *
*            QUEUE '//MYJOB JOB 12345,CLASS=A'                        *
*            QUEUE '//STEP2 EXEC PGM=IEFBR14'                         *
*            CALL STEMVIEW 'VIEW',,,,'Sample JCL'                     *
*            "DROPBUF"                                                *
*                                                                     *
* RETURN-CODES = See below                                            *
*                                                                     *
*         The STEMVIEW function returns a return code that indicates  *
*         whether the display worked.  The returned value is          *
*         contained in the RC special variable.                       *
*                                                                     *
*         The following STEMVIEW return code values are possible:     *
*                                                                     *
*         0    The display was successful.                            *
*                                                                     *
*         4    There were no stems matching the description given     *
*              in stemname.                                           *
*                                                                     *
*         12   Invalid Service requested.                             *
*                                                                     *
*         16   BRIF or EDIF failed.                                   *
*                                                                     *
* COMPATIBILITY                                                       *
*                                                                     *
*        STEMVIEW has been designed to be compatible with             *
*        the STEMDISP function of the REXXTOOLS product from          *
*        Open Software Technologies, with the following               *
*        exceptions:                                                  *
*                                                                     *
*        1. STEMDISP does not support the VIEW service                *
*                                                                     *
*        2. the length of the fully-qualified variable name           *
*           is limited to 80 characters (STEMDISP allows 255          *
*           characters).                                              *
*                                                                     *
*        3. the length of a data line is limited to 255 characters    *
*           (STEMDISP allows 32760 characters).                       *
*                                                                     *
*        4. STEMDISP stops after 100000 variables if stemcount        *
*           is not specified.                                         *
*                                                                     *
*        5. STEMDISP does not have the ability to PULL data           *
*           from the stack.                                           *
*                                                                     *
* CHANGE ACTIVITY                                                     *
*                                                                     *
*  $100 Initial release                                               *
*  $101 Fix S0C4 in RDRTNE                                            *
*  $102 EDIT support                                                  *
*  $103 Convert 2nd argument to uppercase (variable name)             *
*       Add support for 3rd and 4th arguments                         *
*  $104 Change module name from STEMDISP to STEMVIEW                  *
*       Punch ' ALIAS STEMDISP ' for compatibility with REXXTOOLS     *
*       Change name of EDIT function to VIEW                          *
*       Issue CONTROL DISPLAY REFRESH before BROWSE/EDIT              *
*       Pass address of environment block to IRXEXCOM                 *
*  $105 PULL data from the stack when no variable name specified      *
*       Prompt user before saving data in VIEW mode                   *
*       Lrecl can be specified in 7th argument                        *
*       Check for missing parms to prevent S0C4                       *
*       Replace STRING macro with in-line code                        *
*       Accept SHVTRUNC as valid RC from IRXEXCOM                     *
*  $106 Truncate Title                                                *
*  $107 E or V command switches from BROWSE to VIEW                   *
*  $108 Set ZVMODET='VIEW' to show VIEW instead of EDIT on ISREDDEx   *
*       Add recfm and profile parameters for VIEW                     *
*       Display error message after BRIF/EDIF failure                 *
*       Display STEMVIEW Arguments Syntax if not invoked from REXX    *
*                                                                     *
&REL     SETC  'R108'                                                 *
***********************************************************************
         PUNCH ' ALIAS STEMDISP (compatibility with REXXTOOLS) '
STEMVIEW CSECT
STEMVIEW RMODE ANY
         SAVE  (14,12),,'GSF UTILITIES - STEMVIEW &REL'
         LR    R12,R15
         USING STEMVIEW,R12
*---------------------------------------------------------------------*
*                                                                     *
*        ALLOCATE DYNAMIC STORAGE                                     *
*                                                                     *
*---------------------------------------------------------------------*
         GETMAIN R,LV=DYNAML
         ST    R13,4(,R1)
         ST    R1,8(,R13)
         LA    R14,72(,R1)             CLEAR WORKING STORAGE
         LA    R15,DYNAML-72           CLEAR WORKING STORAGE
         SLR   R1,R1                   CLEAR WORKING STORAGE
         MVCL  R14,R0                  CLEAR WORKING STORAGE
         LM    R13,R1,8(R13)           SET R13, RELOAD R1
         USING DYNAM,R13
         STM   R15,R1,R15R0R1          save regs for cmd rtne
         L     R11,EFPLARG-EFPL(,R1)   ADDR OF ARG LIST
         MVI   BLANKS,C' '             a bunch of blanks
         MVC   BLANKS+1(L'BLANKS-1),BLANKS
         MVI   STEMCOUNT,1             default count: X'01000000'
         MVC   TITLE,BLANKS            default title
         MVC   PANEL_NAME,BLANKS       default panel name
*---------------------------------------------------------------------*
*                                                                     *
*        BUILD THE SHVBLOCK                                           *
*                                                                     *
*---------------------------------------------------------------------*
         LA    R10,DYNAM_SHVB
         USING SHVBLOCK,R10
         MVI   SHVCODE,SHVFETCH        FETCH VARIABLE
         LA    R0,L'LINE               LENGTH OF 'FETCH' VALUE BUFFER
         ST    R0,SHVBUFL              LENGTH OF 'FETCH' VALUE BUFFER
         ST    R0,LRECL                default lrecl for BRIF and EDIF
         MVC   RECFM,=C'V '            default RECFM is V
         MVC   PROFILE_NAME,=CL8'TEXT' default profile name
         LA    R0,LINE                 ADDRESS OF VALUE BUFFER
         ST    R0,SHVVALA              ADDRESS OF VALUE BUFFER
         LA    R0,VARNAME              ADDRESS OF VARIABLE NAME
         ST    R0,SHVNAMA              ADDRESS OF VARIABLE NAME
         L     R15,ADDR_OF_ENVBLOCK    Environment block
         CLC   =C'ENVBLOCK',0(R15)     Invoked from REXX?
         BNE   NOREXX                  no, quit
         L     R15,ENVBLOCK_IRXEXTE-ENVBLOCK(,R15) A(IRXEXTE)
         L     R15,IRXEXCOM-IRXEXTE(,R15)          A(IRXEXCOM)
         L     R0,ADDR_OF_ENVBLOCK     ENVIRONMENT BLOCK
         LA    R1,IRXEXCOM_PARM        parm list
         STM   R15,R1,IRXEXCOM_REGS    A(IRXEXCOM,ENVBLK,IRXPARM)
         LA    R14,=C'IRXEXCOM'        Shared Variable Routine
         SLR   R15,R15                 PARM2=0
         SLR   R0,R0                   PARM3=0
         LA    R1,SHVBLOCK             PARM4
         STM   R14,R1,IRXEXCOM_PARM    build parm list for IRXEXCOM
         OI    IRXEXCOM_PARM+12,X'80'  VL=1
*---------------------------------------------------------------------*
*                                                                     *
*        PROCESS ARGUMENTS                                            *
*                                                                     *
*---------------------------------------------------------------------*
         LM    R2,R3,8*1-8(R11)        1st ARG (BROWSE/EDIT)
         LTR   R3,R3                   service specified?
         BNP   ARG1N                   no, error
         CH    R3,=AL2(L'SERVICE)      name too long?
         BH    ARG1N                   yes, error
         BCTR  R3,0                    prepare "EX"
         MVC   SERVICE(*-*),0(R2)      move string
         EX    R3,*-6                  execute MVC
         OC    SERVICE,BLANKS          convert to uppercase
         CLC   =C'BROWSE',SERVICE      BROWSE?
         BE    ARG1X                   yes, exit
         CLC   =C'VIEW  ',SERVICE      VIEW?
         BE    ARG1X                   yes, exit
ARG1N    EQU   *                       no service specified
         LA    R7,12                   rc=12
         B     EXIT                    no service, exit with RC=12
ARG1X    EQU   *
*
         LM    R2,R3,8*2-8(R11)        2ND ARG (VAR NAME)
         STM   R2,R3,STEMNAME          2ND ARG (VAR NAME)
         LTR   R3,R3                   stemname specified?
         BNP   ARG2N                   no, jump
         OI    0(R2),X'40'             convert to uppercase
         LA    R2,1(,R2)               convert to uppercase
         BCT   R3,*-8                  convert to uppercase
         B     ARG2X
ARG2N    EQU   *                       no stemname specified
         LA    R7,12                   rc=12
         CLI   SERVICE,C'V'            SERVICE=VIEW?
         BNE   EXIT                    no, exit with RC=12
         LA    R14,=CL8'PULL'          FUNCTION
         LA    R15,SHVVALA             ADDRESS OF DATA RETURNED
         LA    R0,SHVVALL              LENGTH OF DATA RETURNED
         LA    R1,VALUE                VALUE RETURNED BY IRXSTK
         LA    R2,ADDR_OF_ENVBLOCK     Environment block
         LA    R3,RETCODE              RETURN CODE
         STM   R14,R3,IRXSTK_PARM      BUILD PARM LIST
         OI    IRXSTK_PARM+20,X'80'    BUILD PARM LIST
ARG2X    EQU   *
*
         LM    R2,R3,8*3-8(R11)        3rd ARG (first element)
         LTR   R3,R3                   zero length?
         BZ    ARG3X                   yes, jump
         BM    ARG9X                   eof, exit
         BCTR  R3,0                    decrement
         PACK  DWD,0(,R2)              *executed*
         EX    R3,*-6                  pack the value
         CVB   R0,DWD                  make it binary
         BCTR  R0,0                    relative to zero
         ST    R0,CURRECNO             save it for later
ARG3X    EQU   *
*
         LM    R2,R3,8*4-8(R11)        4th ARG (stem count)
         LTR   R3,R3                   zero length?
         BZ    ARG4X                   yes, jump
         BM    ARG9X                   eof, exit
         BCTR  R3,0                    decrement
         PACK  DWD,0(,R2)              *executed*
         EX    R3,*-6                  pack the value
         CVB   R0,DWD                  make it binary
         AL    R0,CURRECNO             add origin
         ST    R0,STEMCOUNT            save it for later
ARG4X    EQU   *
*
         LM    R2,R3,8*5-8(R11)        5TH ARG (TITLE)
         LTR   R3,R3                   zero length?
         BZ    ARG5X                   yes, jump
         BM    ARG9X                   eof, exit
         LA    R1,TITLE                start of output area
         CH    R3,=Y(L'TITLE)          title too long?
         BNH   ARG5M                   no, jump
         LH    R3,=Y(L'TITLE)          yes, truncate it
ARG5M    MVC   0(1,R1),0(R2)           move one character
         CLI   0(R1),C' '              X'40' -> X'00'
         BNE   *+8                     X'40' -> X'00'
         MVI   0(R1),0                 X'40' -> X'00'
         LA    R1,1(,R1)               next output char
         LA    R2,1(,R2)               next input char
         BCT   R3,ARG5M                move title, one char at a time
ARG5X    EQU   *
*
         LM    R2,R3,8*6-8(R11)        6TH ARG (PANEL)
         LTR   R2,R2                   SPECIFIED?
         BZ    ARG6X                   no, jump
         BM    ARG9X                   eof, exit
         BCTR  R3,0                    prepare "EX"
         MVC   PANEL_NAME(*-*),0(R2)   move string
         EX    R3,*-6                  execute MVC
ARG6X    EQU   *
*
         LM    R2,R3,8*7-8(R11)        7th ARG (lrecl)
         LTR   R3,R3                   zero length?
         BZ    ARG7X                   yes, jump
         BM    ARG9X                   eof, exit
         BCTR  R3,0                    decrement
         PACK  DWD,0(,R2)              *executed*
         EX    R3,*-6                  pack the value
         CVB   R0,DWD                  make it binary
         ST    R0,LRECL                save it for later
         CH    R0,=Y(L'LINE)           lrecl too big?
         BH    EXIT                    yes, exit with RC=12
ARG7X    EQU   *
*
         LM    R2,R3,8*8-8(R11)        8TH ARG (recfm)
         LTR   R2,R2                   SPECIFIED?
         BZ    ARG8X                   no, jump
         BM    ARG9X                   eof, exit
         CLI   SERVICE,C'V'            SERVICE=VIEW?
         BNE   EXIT                    no, exit with RC=12
         CH    R3,=Y(L'RECFM)          too long?
         BH    EXIT                    yes, exit with RC=12
         BCTR  R3,0                    prepare "EX"
         MVC   RECFM(*-*),0(R2)        move string
         EX    R3,*-6                  execute MVC
         OC    RECFM,BLANKS            upper-case
ARG8X    EQU   *
*
         LM    R2,R3,8*9-8(R11)        9TH ARG (profile)
         LTR   R2,R2                   SPECIFIED?
         BZ    ARG9X                   no, jump
         BM    ARG9X                   eof, exit
         CLI   SERVICE,C'V'            SERVICE=VIEW?
         BNE   EXIT                    no, exit with RC=12
         CH    R3,=Y(L'PROFILE_NAME)   too long?
         BH    EXIT                    yes, exit with RC=12
         BCTR  R3,0                    prepare "EX"
         MVC   PROFILE_NAME(*-*),0(R2) move string
         EX    R3,*-6                  execute MVC
*
ARG9X    EQU   *                       end of arg list
*---------------------------------------------------------------------*
*                                                                     *
*        Invoke BRIF or EDIF Service                                  *
*                                                                     *
*---------------------------------------------------------------------*
         L     R0,ISPLINK$             =CL8'ISPLINK'
         LOAD  EPLOC=(0)               preload ISPLINK
         LA    R1,=A($CONTROL,$ERRORS,$RETURN+VL)
         LINK  SF=(E,ISPLINK$)         CONTROL ERRORS RETURN
         LA    R1,=A($CONTROL,$DISPLAY,$REFRESH+VL)
         LINK  SF=(E,ISPLINK$)         CONTROL DISPLAY REFRESH
         LA    R0,SAVE2                PARM FOR READ ROUTINE
         ST    R0,SAVE2                PARM FOR READ ROUTINE
         CLI   SERVICE,C'V'            SERVICE=VIEW?
         BE    EDIF                    yes, jump
         LINK  SF=(E,ISPLINK$),        ISPF INTERFACE                  X
               PARAM=(=C'BRIF',        ISPF SERVICE                    X
               TITLE,                  DSNAME                          X
               RECFM,                  RECFM                           X
               LRECL,                  LRECL                           X
               =A(RDRTNE),             READ ROUTINE                    X
               =A(CMDRTNE),            COMMAND ROUTINE                 X
               SAVE2,                  PARM FOR READ ROUTINE           X
               PANEL_NAME),            PANEL (ISRBROBF/ISRBROBA)       X
               MF=(E,PARMLIST),        PARM LIST                       X
               VL=1
         CH    R15,=H'12'              no data to browse?
         BE    GOBACK4                 yes, jump
         B     GOBACK
EDIF     L     R15,=V(ENDVIEW)         Trap END/RETURN/SAVE
         BALR  R14,R15                 set up IMACRO
         LR    R2,R1                   name of IMACRO
         LINK  SF=(E,ISPLINK$),        ISPF INTERFACE                  X
               PARAM=(=C'EDIF',        ISPF SERVICE                    X
               TITLE,                  DSNAME                          X
               PROFILE_NAME,           PROFILE NAME                    X
               RECFM,                  RECFM                           X
               LRECL,                  LRECL                           X
               =A(RDRTNE),             READ ROUTINE                    X
               =A(WRITERTN),           WRITE ROUTINE                   X
               0,                      COMMAND EXIT                    X
               SAVE2,                  PARM FOR READ ROUTINE           X
               0,                      Edit Length                     X
               PANEL_NAME,             PANEL (ISREDDE2/ISREDDE3)       X
               (R2)),                  Initial Macro (ENDVIEW)         X
               MF=(E,PARMLIST),        PARM LIST                       X
               VL=1
*---------------------------------------------------------------------*
*                                                                     *
*        Set return code                                              *
*                                                                     *
*---------------------------------------------------------------------*
GOBACK   EQU   *
         LTR   R7,R15                  OK?
         BZ    GOBACK40                yes, jump
         CH    R7,=H'4'                Severe error in BRIF or EDIF?
         BH    GOBACK16                yes, jump
         SLR   R7,R7                   RC=0: OK
         B     GOBACK40
GOBACK4  LA    R7,4                    RC=4: "no data to browse"
         B     GOBACK40
*
*        BRIF/EDIF error: display error message
*
GOBACK16 LA    R7,1000(,R7)            RC=10nn: rc nn from BRIF/EDIF
         LA    R0,L'ZERRMSG            max length
         ST    R0,DWD                  max length
         LINK  SF=(E,ISPLINK$),        ISPF INTERFACE                  X
               PARAM=($VCOPY,$ZERRMSG,DWD,ZERRMSG,$MOVE),              X
               MF=(E,PARMLIST),VL=1
         LTR   R15,R15                 OK?
         BNZ   GOBACK40                no, skip SETMSG
         LINK  SF=(E,ISPLINK$),PARAM=($SETMSG,ZERRMSG),                X
               MF=(E,PARMLIST),VL=1
*---------------------------------------------------------------------*
*                                                                     *
*        Pass return code in RC variable                              *
*                                                                     *
*---------------------------------------------------------------------*
GOBACK40 EQU   *
         LA    R0,LINE                 ADDRESS OF VALUE BUFFER
         ST    R0,SHVVALA              ADDRESS OF VALUE BUFFER
         CVD   R7,DWD                  convert to decimal
         OI    DWD+7,15                convert to decimal
         UNPK  LINE(5),DWD             convert to decimal
         LA    R15,5                   LENGTH OF VARIABLE NAME
         ST    R15,SHVVALL             length
         MVC   VARNAME(2),=C'RC'       variable name
         LA    R15,2                   LENGTH OF VARIABLE NAME
         ST    R15,SHVNAML             LENGTH OF VARIABLE NAME
         MVI   SHVCODE,SHVSTORE        STORE VARIABLE
         LM    R15,R1,IRXEXCOM_REGS    A(IRXEXCOM,ENVBLK,IRXPARM)
         BALR  R14,R15                 STORE VARIABLE
         SLR   R7,R7                   RC=0
         B     EXIT
*---------------------------------------------------------------------*
*                                                                     *
*        STEMVIEW was not invoked from a REXX exec                    *
*        Display argument syntax using TPUT                           *
*                                                                     *
*---------------------------------------------------------------------*
NOREXX   MVC   LINE(L'SYNTAXMSG),SYNTAXMSG move text to 24-bit storage
         TPUT  LINE,L'SYNTAXMSG        display syntax
         SLR   R7,R7                   RC=0
*---------------------------------------------------------------------*
*                                                                     *
*        CLEAN-UP AND EXIT                                            *
*                                                                     *
*---------------------------------------------------------------------*
EXIT     LR    R1,R13                  A(DYNAM)
         L     R13,4(,R13)
         FREEMAIN R,LV=DYNAML,A=(R1)
         LR    R15,R7                  pass return code
         RETURN (14,12),RC=(15)
         DROP
***********************************************************************
*                                                                     *
*        BRIF Command Routine                                         *
*                                                                     *
*        This routine is invoked by BRIF each time a command is       *
*        entered on the BROWSE screen.  If the user enters the E      *
*        or V command, then STEMVIEW reinvokes itself with VIEW       *
*        instead of BROWSE.                                           *
*                                                                     *
***********************************************************************
CMDRTNE  SAVE  (14,12),,*
         LR    R12,R15
         USING CMDRTNE,R12
         LR    R14,R13                 CALLER'S SAVE AREA
         L     R13,04(,R1)             PTR TO DIALOG DATA AREA
         L     R13,0(,R13)             A(SAVE2)
         ST    R14,4(,R13)             CHAIN SAVE AREAS
         ST    R13,8(,R14)             CHAIN SAVE AREAS
         USING SAVE2,R13
         L     R6,00(,R1)              Function Code
         CLC   =F'20',0(R6)            UNKNOWN COMMAND?
         BNE   CMDRTNE4                NO, EXIT
         LA    R0,L'LINE               max length of variable
         ST    R0,DWD                  max length of variable
         LINK  SF=(E,ISPLINK$),PARAM=($VCOPY,$ZCMD,DWD,LINE,$MOVE),    X
               MF=(E,PARMLIST),VL=1
         OC    LINE,BLANKS             upper-case
         CLC   =C'E ',LINE             ZCMD="E" ?
         BE    CMDRTNE7                yes, do it
         CLC   =C'V ',LINE             ZCMD="V" ?
         BE    CMDRTNE7                yes, do it
CMDRTNE4 L     R13,4(,R13)             BRIF SAVE AREA
         RETURN (14,12),RC=4           ISPF will process the command
*
CMDRTNE7 LM    R15,R1,R15R0R1          restore regs at entry
         L     R11,EFPLARG-EFPL(,R1)   ADDR OF ARG LIST
         LA    R2,$VIEW                service=VIEW
         LA    R3,L'$VIEW              length
         STM   R2,R3,0(R11)            update service name
         BALR  R14,R15                 re-invoke myself for VIEW
         L     R13,4(,R13)             BRIF SAVE AREA
         RETURN (14,12),RC=0           command processed
         DROP
***********************************************************************
*                                                                     *
*        BRIF/EDIF READ Routine                                       *
*                                                                     *
*        This routine is invoked by BRIF and EDIF to                  *
*        return the address of a record.                              *
*                                                                     *
***********************************************************************
RDRTNE   SAVE  (14,12),,*
         LR    R12,R15
         USING RDRTNE,R12
         LR    R14,R13                 CALLER'S SAVE AREA
         L     R13,12(,R1)             PTR TO DIALOG DATA AREA
         L     R13,0(,R13)             A(SAVE2)
         ST    R14,4(,R13)             CHAIN SAVE AREAS
         ST    R13,8(,R14)             CHAIN SAVE AREAS
         USING SAVE2,R13
         L     R6,00(,R1)              RECORD DATA READ
         L     R7,04(,R1)              LENGTH
         L     R4,08(,R1)              RELATIVE RECORD NUMBER
         CLI   SERVICE,C'V'            EDIF?
         BE    RDRTNE06                YES, JUMP
         L     R5,0(,R4)               LINE NUMBER REQUESTED BY BRIF
         AL    R5,CURRECNO             add first element (4th arg)
         B     RDRTNE07
RDRTNE06 EQU   *
         LA    R5,1                    NEXT LINE FOR EDIT
         AL    R5,CURRECNO             RECORD NUMBER
         ST    R5,CURRECNO             RECORD NUMBER
RDRTNE07 EQU   *
*
         LA    R10,DYNAM_SHVB
         USING SHVBLOCK,R10
         CL    R5,STEMCOUNT            end reached?
         BH    RDRTN79                 yes, exit with RC=8
*
*        Retrieve value of current variable
*
         BAL   R14,FETCHVAR            retrieve stemmed variable
         CLI   SHVRET,SHVCLEAN         OK?
         BE    RDRTN70                 yes, pass line to BRIF
         CLI   SHVRET,SHVTRUNC         truncated value?
         BE    RDRTN70                 yes, pass line to BRIF
         CLI   SHVRET,SHVNEWV          this variable exists?
         BE    RDRTN80                 NO, EXIT
*
*        If IRXEXCOM fails, display R15 and SHVRET values.
*
         MVC   LINE(L'VARNAME),VARNAME move variable name
         L     R1,SHVNAML              length of variable name
         LA    R2,LINE(R1)             length of variable name
         MVC   0(5,R2),=C' R15='       move literal
         CVD   R15,DWD                 save return code
         OI    DWD+7,15                convert to decimal
         UNPK  5(3,R2),DWD             move return code: R15=008
         MVC   8(8,R2),=C',SHVRET='    move literal
         UNPK  16(3,R2),SHVRET(2)      hex display
         TR    16(2,R2),HEXTAB-240     hex display
         LA    R15,18(,R1)             data length
         ST    R15,SHVVALL             length
*
*        Return value of variable
*
RDRTN70  L     R0,SHVVALA              DATA ADDRESS
         L     R1,SHVVALL              DATA LENGTH
         CLI   RECFM,C'F'              RECFM=F?
         BNE   RDRTN74                 no, jump
         CL    R1,LRECL                needs padding?
         BNL   RDRTN74                 no, jump
         LA    R14,LINE                "to" address
         L     R15,LRECL               "to" length
         ICM   R1,B'1000',BLANKS       padding
         MVCL  R14,R0                  move data to LINE
         LA    R0,LINE                 DATA ADDRESS
         L     R1,LRECL                DATA LENGTH
RDRTN74  EQU   *
         ST    R0,0(,R6)               PASS DATA ADDRESS
         ST    R1,0(,R7)               PASS DATA LENGTH
         ST    R5,LASTLINE             CURRENT LINE NUMBER
         L     R13,4(,R13)             BRIF SAVE AREA
         RETURN (14,12),RC=0           GOBACK TO EDIT
*---------------------------------------------------------------------*
*                                                                     *
*        Scan variables to find the highest one                       *
*                                                                     *
*        This section determines the number of the last line          *
*        and passes it to BRIF along with the EOF indicator.          *
*                                                                     *
*---------------------------------------------------------------------*
RDRTN79  L     R5,STEMCOUNT            eof
         B     RDRTN81
RDRTN80  BCTR  R5,0                    previous line
RDRTN81  EQU   *
         CL    R5,LASTLINE             was good?
         BE    RDRTN88                 yes, exit
         L     R5,LASTLINE             previous line
*loop
RDRTN84  LA    R5,1(,R5)               BUMP LINE NUMBER
         BAL   R14,FETCHVAR            retrieve stemmed variable
         CLI   SHVRET,SHVCLEAN         OK?
         BE    RDRTN84                 yes, try next variable
*endloop
RDRTN87  BCTR  R5,0                    previous line
RDRTN88  ST    R5,0(,R4)               LAST LINE
*
*        EDIF only: set ZVMODET='VIEW'
*
         CLI   SERVICE,C'V'            EDIF?
         BNE   RDRTN89                 no, skip VDEFINE
         LA    R1,=A($VERASE,$ZVMODET+VL)
         LINK  SF=(E,ISPLINK$)
         LA    R1,=A($VDEFINE,$ZVMODET,$VIEW,$CHAR,F4+VL)
         LINK  SF=(E,ISPLINK$)
RDRTN89  EQU   *
         L     R13,4(,R13)             BRIF SAVE AREA
         RETURN (14,12),RC=8           GOBACK TO BRIF (EOF)
*
ISPLINK$ LINK  EP=ISPLINK,SF=L         ISPF INTERFACE
$CONTROL DC    C'CONTROL '
$ERRORS  DC    C'ERRORS  '
$RETURN  DC    C'RETURN  '
$DISPLAY DC    C'DISPLAY '
$REFRESH DC    C'REFRESH '
$VCOPY   DC    C'VCOPY   '
$VERASE  DC    C'VERASE  '
$SETMSG  DC    C'SETMSG  '
$VDEFINE DC    C'VDEFINE '
$ZERRMSG DC    C'ZERRMSG '
$ZCMD    DC    C'ZCMD    '
$ZVMODET DC    C'ZVMODET '
$VIEW    DC    C'VIEW'
F4       DC    FL4'4'
$CHAR    DC    C'CHAR'
$MOVE    DC    C'MOVE'
VL       EQU   X'80000000'             END-OF-LIST FLAG
SYNTAXMSG DC     C'Syntax: CALL STEMVIEW service<,stemname><,firstelem>X
               <,stemcount><,title><,panel><,lrecl><,recfm><,profile>'
*---------------------------------------------------------------------*
*                                                                     *
*        Fetch value of a variable                                    *
*                                                                     *
*        1. build variable name by concatenating the stem name        *
*           (such as "LINE.") to the sequence number in R5            *
*        2. pass control to IRXEXCOM                                  *
*                                                                     *
*---------------------------------------------------------------------*
FETCHVAR LM    R2,R3,STEMNAME          2ND ARG (VAR NAME)
         LTR   R3,R3                   variable name specified?
         BNP   FETCHV50                no, PULL from stack
         LA    R0,VARNAME              "to" addr
         LR    R1,R3                   "to" length
         MVCL  R0,R2                   move stem name "LINE."
         CVD   R5,DWD                  seqno
         MVC   LINE(8),=X'4020202020202020'
         EDMK  LINE(8),DWD+4           unpack 7 digits
         LR    R2,R1                   addr of 1st non-zero byte
         LA    R3,LINE+8               calc length
         SLR   R3,R2                   calc length
         LR    R1,R3                   "to" length
         MVCL  R0,R2                   move seq number
         LA    R1,VARNAME              "to" addr
         SLR   R0,R1                   calc length of variable name
         ST    R0,SHVNAML              LENGTH OF VARIABLE NAME
         LM    R15,R1,IRXEXCOM_REGS    A(IRXEXCOM,ENVBLK,IRXPARM)
         BR    R15                     FETCH VARIABLE
*
*        PULL an element from the data stack
*
FETCHV50 LR    R2,R14                  save return address
         L     R15,ADDR_OF_ENVBLOCK    Environment block
         L     R15,ENVBLOCK_IRXEXTE-ENVBLOCK(,R15) A(IRXEXTE)
         L     R15,IRXSTK-IRXEXTE(,R15) STACK MANAGER
         LA    R1,IRXSTK_PARM          PARM LIST
         BALR  R14,R15              <- CALL IRXSTK
         LTR   R15,R15                 EOF yet?
         BZR   R2                      no, goback
         MVI   SHVRET,SHVNEWV          yes, simulate EOF
         BR    R2                      and goback
         DROP
HEXTAB   DC    C'0123456789ABCDEF'
*---------------------------------------------------------------------*
*        Dummy write routine for EDIF                                 *
*---------------------------------------------------------------------*
WRITERTN LA    R15,16                  OUTPUT ERROR
         BR    R14                     GOBACK
***********************************************************************
*                                                                     *
*        Dynamic Storage Area                                         *
*                                                                     *
***********************************************************************
DYNAM    DSECT
         DS    18F                     MAIN-LINE
PANEL_NAME DS  C'ISRBROBF'             PANEL (6th arg)
TITLE    DS    CL54                    Title
*
SAVE2    DS    18F                     READ ROUTINE
DWD      DS    D                       work area
R15R0R1  DS    A(R15,R0,R1)            regs at entry to STEMVIEW
ADDR_OF_ENVBLOCK EQU R15R0R1+4,4,C'A'  ENVIRONMENT BLOCK
SERVICE  DS    C'BROWSE'               ISPF Service ("B" or "V")
RECFM    DS    C'V '                   record format
PROFILE_NAME DS CL8'TEXT'              profile name for EDIF
STEMNAME DS    A,F                     ADDR/LEN OF STEM NAME
CURRECNO DS    F                       first element (3rd parm)
STEMCOUNT DS   F                       number of variables (4th parm)
LASTLINE DS    F                       last line number
LRECL    DS    F                       record length (7th arg)
PARMLIST DS    12F                     EDIF/BRIF
IRXEXCOM_REGS DS A(R15,R0,R1)          IRXEXCOM
IRXEXCOM_PARM DS 4A                    IRXEXCOM
IRXSTK_PARM DS 6A                      IRXSTK
DYNAM_SHVB DS  XL(SHVBLEN)             SHVB (IRXEXCOM)
ADDRESS  DS    A                       ADDRESS
LENGTH   DS    F                       ADDRESS
RETCODE  DS    F                       RETURN CODE
VALUE    DS    F                       VALUE RETURNED BY FUNCTION
ZERRMSG  DS    CL8                     error message
VARNAME  DS    CL80                    variable name
LINE     DS    CL255
BLANKS   DS    CL256                   a bunch of blanks
DYNAML   EQU   *-DYNAM
         PRINT NOGEN
         IRXEFPL DSECT=YES             External Function Parm List
         IRXENVB                       Environment Block
         IRXEXTE                       External Function Entry Points
         IRXSHVB                       Shared REXX Variable Req Block
         YREGS                         Register Equates (R0-R15)
         END
***********************************************************************
*                                                                     *
* MODULE NAME = ENDVIEW
*                                                                     *
* DESCRIPTIVE NAME = Prompt user at the end of a VIEW session.        *
*                                                                     *
* STATUS = R100                                                       *
*                                                                     *
* FUNCTION = This assembler sub-routine can be invoked from a         *
*            program that uses EDIF to view data.  If the data        *
*            has been modified, ENDVIEW automatically prompts         *
*            the user when END or RETURN commands are issued.         *
*            ENDVIEW also displays a prompt panel when the user       *
*            issues the SAVE command.                                 *
*                                                                     *
* AUTHOR = Gilbert Saint-flour <gsf@pobox.com>                        *
*                                                                     *
* ENVIRONMENT = SEE BELOW                                             *
*                                                                     *
*    DEPENDENCIES = ISPF V4                                           *
*                                                                     *
* MODULE TYPE = PROCEDURE, (CSECT TYPE)                               *
*                                                                     *
*    PROCESSOR = IBM OS/ASSEMBLER H VERSION 2 OR                      *
*                IBM HIGH LEVEL ASSEMBLER/MVS                         *
*                                                                     *
*    MODULE SIZE = 1K                                                 *
*                                                                     *
*    ATTRIBUTES = REENTERABLE, RMODE ANY, AMODE 31,                   *
*                 PROBLEM STATE, KEY 8                                *
*                 APF AUTHORIZATION: NONE                             *
*                                                                     *
* SYNTAX  =  See below                                                *
*                                                                     *
*        CALL  ENDVIEW            install ENDVIEW                     *
*        MVC   IMACRO,0(R1)       save name of Initial Macro for EDIF *
*                                                                     *
***********************************************************************
ENDVIEW  CSECT
ENDVIEW  RMODE ANY
         SAVE  (14,12),,*
         LR    R12,R15
         USING ENDVIEW,R12
         L     R0,ISPLINK$             =CL8'ISPLINK'
         LOAD  EPLOC=(0)               preload ISPLINK
         IDENTIFY EP=$IMACRO,ENTRY=IMACRO Initial Macro
         IDENTIFY EP=$ENDMAC,ENTRY=ENDMAC END/RETURN
         IDENTIFY EP=$SAVEMAC,ENTRY=SAVEMAC SAVE
         LA    R1,=CL8'!$IMACRO'       name of IMACRO
         SAVE  (1)                     return it to caller
         RETURN (14,12),RC=0
*---------------------------------------------------------------------*
*                                                                     *
*        Initial EDIT Macro for EDIF                                  *
*                                                                     *
*          "ISREDIT MACRO"                                            *
*          "ISREDIT RESET"                                            *
*          "ISREDIT DEFINE $ENDMAC MACRO PGM"                         *
*          "ISREDIT DEFINE END ALIAS $ENDMAC"                         *
*          "ISREDIT DEFINE $SAVEMAC MACRO PGM"                        *
*          "ISREDIT DEFINE SAVE ALIAS $SAVEMAC"                       *
*                                                                     *
*---------------------------------------------------------------------*
IMACRO   BAKR  R14,0
         LR    R12,R15
         USING IMACRO,R12
*
         LA    R1,=A($ISREDIT,F8,$MACRO+VL)
         LINK  SF=(E,ISPLINK$)       ISREDIT MACRO
*
         LA    R1,=A($ISREDIT,F8,$RESET+VL)
         LINK  SF=(E,ISPLINK$)       ISREDIT RESET
*
         LA    R1,=A($ISREDIT,F28,DEFINE1+VL)
         LINK  SF=(E,ISPLINK$)       ISREDIT DEFINE $ENDMAC MACRO PGM
*
         LA    R1,=A($ISREDIT,F28,DEFINE2+VL)
         LINK  SF=(E,ISPLINK$)       ISREDIT DEFINE END ALIAS $ENDMAC
*
         LA    R1,=A($ISREDIT,F28,DEFINE3+VL)
         LINK  SF=(E,ISPLINK$)       ISREDIT DEFINE $SAVEMAC MACRO PGM
*
         LA    R1,=A($ISREDIT,F28,DEFINE4+VL)
         LINK  SF=(E,ISPLINK$)       ISREDIT DEFINE SAVE ALIAS $SAVEMAC
         PR
DEFINE1  DC    CL28'DEFINE $ENDMAC MACRO PGM'
DEFINE2  DC    CL28'DEFINE END    ALIAS $ENDMAC'
DEFINE3  DC    CL28'DEFINE $SAVEMAC MACRO PGM'
DEFINE4  DC    CL28'DEFINE SAVE   ALIAS $SAVEMAC'
*---------------------------------------------------------------------*
*                                                                     *
*        SAVE EDIT Macro                                              *
*                                                                     *
*          "ISREDIT MACRO"                                            *
*          "CONTROL ERRORS RETURN"                                    *
*          "ADDPOP"                                                   *
*          "DISPLAY PANEL(ISREVQST)"                                  *
*           EXIT                                                      *
*                                                                     *
*---------------------------------------------------------------------*
SAVEMAC  BAKR  R14,0
         LR    R12,R15
         USING SAVEMAC,R12
*
         LA    R1,=A($ISREDIT,F8,$MACRO+VL)
         LINK  SF=(E,ISPLINK$)         ISREDIT MACRO
*
         LA    R1,=A($CONTROL,$ERRORS,$RETURN+VL)
         LINK  SF=(E,ISPLINK$)         CONTROL ERRORS RETURN
*
         LA    R1,=A($ADDPOP+VL)
         LINK  SF=(E,ISPLINK$)         ISPEXEC ADDPOP
*
         LINK  SF=(E,ISPLINK$),        ISPEXEC DISPLAY PANEL(ISREVQST) X
               PARAM=($DISPLAY,ISREVQST),VL=1
         PR
*---------------------------------------------------------------------*
*                                                                     *
*        END/RETURN EDIT Macro                                        *
*                                                                     *
*          "ISREDIT MACRO"                                            *
*          "ISREDIT (DC) = DATA_CHANGED"                              *
*          IF DC='NO' THEN                                            *
*            "ISREDIT CANCEL"                                         *
*          ELSE DO                                                    *
*            "CONTROL ERRORS RETURN"                                  *
*            "ADDPOP"                                                 *
*            "DISPLAY PANEL(ISREVIEW)"                                *
*            IF RC=0 THEN                                             *
*              "ISREDIT CANCEL"                                       *
*            END                                                      *
*                                                                     *
*---------------------------------------------------------------------*
ENDMAC   BAKR  R14,0
         LR    R12,R15
         USING ENDMAC,R12
         GETMAIN R,LV=DYNAML           allocate dynamic storage
         LR    R13,R1                  A(DYNAM)
         USING DYNAM,R13
*
         LA    R1,=A($ISREDIT,F8,$MACRO+VL)
         LINK  SF=(E,ISPLINK$)         ISREDIT MACRO
*
         LINK  SF=(E,ISPLINK$),        VDEFINE (DC)                    X
               PARAM=($VDEFINE,DATA_CHANGED,DWD,$CHAR,F8),VL=1,        X
               MF=(E,PARMLIST)
*
         LA    R1,=A($ISREDIT,F20,DATA_CHANGED+VL)
         LINK  SF=(E,ISPLINK$)         ISREDIT (DC) = DATA_CHANGED
         LTR   R7,R15                  save return code
         CLI   DWD,C'N'                DATA_CHANGED ?
         BE    ENDMAC8                 no, issue ISREDIT CANCEL
*
         LA    R1,=A($CONTROL,$ERRORS,$RETURN+VL)
         LINK  SF=(E,ISPLINK$)         CONTROL ERRORS RETURN
*
         LA    R1,=A($ADDPOP+VL)
         LINK  SF=(E,ISPLINK$)         ISPEXEC ADDPOP
*
         LINK  SF=(E,ISPLINK$),        ISPEXEC DISPLAY PANEL(ISREVIEW) X
               PARAM=($DISPLAY,ISREVIEW),VL=1
         LTR   R7,R15                  user pressed ENTER?
         BZ    ENDMAC8                 yes, issue ISREDIT CANCEL
         CH    R15,=H'12'              panel not found (ISPF V3) ?
         BNE   ENDMAC9                 no, go back to VIEW
*
ENDMAC8  LA    R1,=A($ISREDIT,F8,$CANCEL+VL)
         LINK  SF=(E,ISPLINK$)         ISREDIT CANCEL
*
ENDMAC9  FREEMAIN R,LV=DYNAML,A=(R13)  free dynamic storage
         LR    R15,R7                  rc from DISPLAY service
         PR
DATA_CHANGED DC CL20'(DC) = DATA_CHANGED'
*---------------------------------------------------------------------*
*                                                                     *
*        Constants                                                    *
*                                                                     *
*---------------------------------------------------------------------*
ISPLINK$ LINK  EP=ISPLINK,SF=L         ISPF INTERFACE
F8       DC    F'8'
F20      DC    F'20'
F28      DC    F'28'
$ISREDIT DC    C'ISREDIT '
$MACRO   DC    C'MACRO   '
$RESET   DC    C'RESET   '
$CANCEL  DC    C'CANCEL  '
$CONTROL DC    C'CONTROL '             FUNCTION
$ERRORS  DC    C'ERRORS  '             OPTION
$RETURN  DC    C'RETURN  '             OPTION
$ADDPOP  DC    C'ADDPOP  '
$VDEFINE DC    C'VDEFINE '
$DISPLAY DC    C'DISPLAY '
ISREVIEW DC    C'ISREVIEW'             PANEL FOR END/RETURN
ISREVQST DC    C'ISREVQST'             PANEL FOR SAVE
$CHAR    DC    C'CHAR'
VL       EQU   X'80000000'             END-OF-LIST FLAG
*---------------------------------------------------------------------*
*                                                                     *
*        Dynamic Storage Area                                         *
*                                                                     *
*---------------------------------------------------------------------*
DYNAM    DSECT
         DS    18F                     MAIN-LINE
DWD      DS    D                       work area
PARMLIST DS    12F                     EDIF/BRIF
DYNAML   EQU   *-DYNAM
         YREGS
         END
//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200
//*
//LKED    EXEC PGM=IEWL,PARM='MAP,RENT'
//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,PASS)
//SYSLMOD  DD DISP=SHR,DSN=GILBERT.LOAD(STEMVIEW)
//SYSPRINT DD SYSOUT=*
