//GILBERTL JOB (ACCT#),LOADMLPA,
// NOTIFY=&SYSUID,
// CLASS=A,MSGCLASS=X,COND=(0,NE)
//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF,RENT)
*PROCESS BATCH,USING(NOMAP,WARN(8))
***********************************************************************
*                                                                     *
* MODULE NAME = LOADMLPA                                              *
*                                                                     *
* DESCRIPTIVE NAME = INSTALL A REENTRANT MODULE INTO THE MLPA.        *
*                                                                     *
* FUNCTION = THIS PROGRAM LOADS A REENTRANT MODULE INTO THE           *
*            CSA AND ADDS AN ENTRY TO THE ACTIVE LPA QUEUE.           *
*                                                                     *
* STATUS = R302                                                       *
*                                                                     *
* AUTHOR = GILBERT SAINT-FLOUR <GSF@POBOX.COM>                        *
*                                                                     *
* NOTES = SEE BELOW                                                   *
*                                                                     *
*    DEPENDENCIES = MVS/XA, MVS/ESA                                   *
*                                                                     *
*    AUTHORIZATION = APF                                              *
*                                                                     *
*    RESTRICTIONS = INVOKER MUST HAVE UPDATE AUTHORITY TO             *
*                   SYS1.PARMLIB.                                     *
*                                                                     *
* MODULE TYPE = PROCEDURE, (BATCH PROGRAM)                            *
*                                                                     *
*    PROCESSOR = IBM OS/ASSEMBLER H VERSION 2 OR                      *
*                IBM HIGH LEVEL ASSEMBLER/MVS                         *
*                                                                     *
*    MODULE SIZE = 4K                                                 *
*                                                                     *
*    ATTRIBUTES = REENTERABLE, RMODE ANY, AMODE 31,                   *
*                 SUPERVISOR STATE, KEY 0                             *
*                                                                     *
* OPERATION = LOADMLPA BUILDS A CDE AND EXTENT-LIST TO REPRESENT      *
*             THE MODULE, THEN CHAINS THE CDE TO THE BOTTOM OF THE    *
*             ACTIVE LPA QUEUE (ALPAQ). IF THE MODULE IS AN ALIAS,    *
*             THEN TWO CDE'S ARE CREATED AND ADDED TO THE ALPAQ.      *
*                                                                     *
*             LOADMLPA CHECKS FOR EXISTING ENTRIES IN THE LPAQ.       *
*             IF THE ENTRY-POINT (OR THE CORRESPONDING MAJOR NAME)    *
*             IS (OR ARE) ALREADY IN THE LPAQ, THEN THE PROGRAM       *
*             TERMINATES WITH RC=12.                                  *
*                                                                     *
*             IF AN OLD VERSION OF THE MODULE IS ALREADY IN PLPA,     *
*             THE NEW COPY MUST BE LOADED FROM A STEPLIB.             *
*                                                                     *
* INVOCATION = LOADMLPA IS INVOKED VIA JCL, AS FOLLOWS:               *
*                                                                     *
*        //LOADMLPA EXEC PGM=LOADMLPA,PARM='LOAD,MMMMMMMM'            *
*                                                                     *
*            MMMMMMMM IS THE NAME OF A LOAD MODULE (OR ALIAS)         *
*                 THAT YOU WANT TO INSTALL IN MLPA.  IT MUST          *
*                 COME FROM AN AUTHORIZED LIBRARY (JOBLIB,            *
*                 STEPLIB OR LINK-LIST)                               *
*                                                                     *
*        //REMOVE EXEC PGM=LOADMLPA,PARM='DELETE,MMMMMMMM'            *
*                                                                     *
*            MMMMMMMM IS THE NAME OF THE LOAD MODULE (OR ALIAS)       *
*                 THAT YOU WANT TO REMOVE FROM MLPA.                  *
*                                                                     *
*                                                                     *
* RETURN CODES = LOADMLPA PRODUCES RETURN-CODES AND ABENDS,           *
*                AS FOLLOWS:                                          *
*                                                                     *
*    RETURN-CODES:                                                    *
*                                                                     *
*        0  SUCCESSFUL COMPLETION: MODULE HAS BEEN LOADED INTO MLPA   *
*                                                                     *
*        4  MODULE NOT IN MLPA (DELETE FUNCTION)                      *
*                                                                     *
*        8  USER NOT AUTHORIZED TO UPDATE SYS1.PARMLIB                *
*                                                                     *
*       12  MODULE ALREADY PRESENT IN MLPA                            *
*                                                                     *
*       16  PARM IS INVALID                                           *
*                                                                     *
*       20  MODULE FOUND IN PLPA; LOAD IT FROM A STEPLIB              *
*                                                                     *
*    ABENDS:                                                          *
*                                                                     *
*      S047     LOADMLPA MODULE NOT AUTHORIZED                        *
*                                                                     *
*      S306-08  TARGET MODULE NOT RE-ENTRANT                          *
*                                                                     *
*      S306-0C  TARGET MODULE NOT FROM AN AUTHORIZED LIBRARY          *
*                                                                     *
* CHANGE ACTIVITY                                                     *
*                                                                     *
*  $301  NEW PACKAGING FOR CBT TAPE                                   *
*  $302  FIX BAD BRANCH TO EXIT20 LABEL                               *
*                                                                     *
***********************************************************************
LOADMLPA CSECT
LOADMLPA RMODE ANY
         SAVE  (14,12),,'GSF UTILITIES - LOADMLPA R302'
         LR    R12,R15
         USING LOADMLPA,R12
         L     R11,0(,R1)              PARM ADDRESS
         USING PARM,R11
*
*        GET ABENDS047 IF THE PROGRAM IS NOT APF-AUTHORIZED
*
         MODESET MODE=PROB             CHECK APF AUTHORIZATION
*
*        ALLOCATE DYNAMIC STORAGE
*
         GETMAIN R,LV=DYNAML           DYNAMIC STORAGE
         ST    R13,4(,R1)
         ST    R1,8(,R13)
         LR    R13,R1
         USING DYNAM,R13
         LA    R14,DYNAM+72            CLEAR WORK AREA
         LA    R15,DYNAML-72           CLEAR WORK AREA
         SLR   R1,R1                   CLEAR WORK AREA
         MVCL  R14,R0                  CLEAR WORK AREA
*
*        PROCESS JCL PARM
*
PARM00   LA    R0,PARMFUNC+5           1ST BYTE AFTER FUNCTION
         CLC   =C'LOAD,',PARMFUNC      FUNCTION=LOAD?
         BE    PARM10                  YES, JUMP
         LA    R0,PARMFUNC+7           1ST BYTE AFTER FUNCTION
         CLC   =C'DELETE,',PARMFUNC    FUNCTION=DELETE?
         BNE   EXIT16                  NO, QUIT
*
PARM10   LA    R14,MODULE              MODULE NAME
         LA    R15,L'MODULE            MAX LENGTH
         MVC   FUNCTION,PARMFUNC       L=LOAD, D=DELETE
*
*        MOVE MODULE NAME TO WORK AREA
*
*
PARM20   LH    R1,PARMLEN              PARM LENGTH
         LA    R1,PARMFUNC(R1)         FIRST BYTE AFTER PARM
         SR    R1,R0                   LENGTH OF NAME
         BZ    EXIT16                  NO NAME, QUIT
         CLR   R1,R15                  LENGTH > 8?
         BH    EXIT16                  YES, QUIT
         ICM   R1,B'1000',=X'40'       PADDING CHARACTER
         MVCL  R14,R0                  MOVE MODULE NAME, PAD WITH X'40'
         DROP  R11
***********************************************************************
*                                                                     *
*        CHECK THAT THE USER HAS "UPDATE" AUTHORITY TO SYS1.PARMLIB.  *
*                                                                     *
*        IF HE DOESN'T, EXIT WITH RC=8                                *
*                                                                     *
***********************************************************************
         L     R14,RACF_CML            CAMLST 1ST WORD
         LA    R15,RACF_DSN            DATA SET NAME
         SLR   R0,R0
         LA    R1,RACFWORK             WORK AREA
         STM   R14,R1,SIXWORDS         STORE RELOCATED CAMLST
         LOCATE SIXWORDS               GET VOLSER AND DEVICE TYPE
         LTR   R15,R15                 CHECK FOR SUCCESSFUL COMPLETION
         BNZ   EXIT8                   LOCATE FAILED, EXIT
         MVC   RACF_VOL,RACFWORK+6     VOLSER
*
         MVC   RACF_DYN(RACF_LEN),RACF_MOD
         RACROUTE REQUEST=AUTH,                                        X
               WORKA=RACFWORK,                                         X
               VOLSER=RACF_VOL,        VOLUME                          X
               MF=(E,RACF_DYN)
         LTR   R15,R15                 USER AUTHORIZED?
         BZ    CHKFUNC                 YES, CONTINUE
*
         L     R2,PSAAOLD-PSA          POINT TO MY ASCB.
         L     R2,ASCBASXB-ASCB(,R2)   POINT TO MY ASXB.
         L     R2,ASXBSENV-ASXB(,R2)   POINT TO MY ACEE.
         USING ACEE,R2
         CLC   =CL8'IBMUSER',ACEEUSRI  AUTHORIZED USER?
         BE    CHKFUNC                 YES, CONTINUE
         DROP  R2                      ACEE
         B     EXIT8                   NO, QUIT
*
RACF_MOD RACROUTE REQUEST=AUTH,        CHECK AUTHORIZATION             X
               LOG=NONE,               DO NOT LOG FAILURES             X
               CLASS='DATASET',        CHECK FOR DATASET AUTHORITY     X
               ENTITY=RACF_DSN,        DATA SET NAME                   X
               ATTR=UPDATE,            MUST BE ALLOWED TO UPDATE       X
               MF=L
RACF_DSN DC    CL44'SYS1.PARMLIB'
RACF_CML CAMLST NAME,*-*,,*-*          CAMLST FOR LOCATE
*
CHKFUNC  CLI   FUNCTION,C'D'           PARM=DELETE?
         BE    DEL00                   YES, JUMP
***********************************************************************
*                                                                     *
*        LOAD THE MODULE TO CREATE A CDE/XTLST                        *
*                                                                     *
*        THIS IS A TRIAL LOAD OF THE MODULE TO CHECK                  *
*        ITS EXISTENCE, VALIDITY, ETC.                                *
*                                                                     *
*        IF THE LOAD IS SUCCESSFUL, THE CDE AND XTLST CREATED BY      *
*        LOAD ARE RETRIEVED FROM THE JPAQ AND USED AS A MODEL TO      *
*        CREATE THE CDE AND XTLST IN SQA.                             *
*                                                                     *
*        ONCE THE CDE (AND XTLST) HAVE BEEN PROCESSED, A DELETE       *
*        MACRO IS ISSUED TO FREE UP THE SPACE.                        *
*                                                                     *
***********************************************************************
JPAQ00   L     R4,PSATOLD-PSA          PSATOLD (MY TCB)
         USING TCB,R4
         ICM   R2,B'1111',TCBJLB       JOBLIB/STEPLIB/TASKLIB DCB
         BNZ   JPAQ12                  OK, JUMP
         L     R1,CVTPTR               NO STEPLIB, USE LINKLIST
         L     R2,CVTLINK-CVT(,R1)     DCB FOR SYS1.LINKLIB
JPAQ12   ST    R2,STEPLIB              SAVE FOR 2ND LOAD
*
         LOAD  EPLOC=MODULE,           ENTRY-POINT NAME                X
               GLOBAL=YES,             LOAD INTO SP 241                X
               DCB=(R2),               JOBLIB/STEPLIB OR LINKLIST      X
               SF=(E,LOAD1L)
*
*        RETRIEVE THE CDE FROM THE JPAQ
*
         L     R4,TCBJSTCB             THE JOB STEP TCB
         L     R5,TCBJPQ               POINT TO FIRST CDE IN CHAIN
         USING CDENTRY,R5
*LOOP
JPAQ21   CLC   MODULE,CDNAME           IS THIS MY MODULE?
         BE    SCAN00                  YES, EXIT
         ICM   R5,B'1111',CDCHAIN      CHECK FOR END OF CHAIN
         BNZ   JPAQ21                  LOOP THROUGH RB TABLE
*ENDLOOP
         B     EXIT20                  NOT FOUND IN JPAQ
         DROP  R4                      TCB
***********************************************************************
*                                                                     *
*        SCAN THE JPAQ TO CHECK IF THE MODULE IS ALREADY THERE        *
*                                                                     *
*        IF IT'S FOUND, EXIT WITH RC=12                               *
*                                                                     *
***********************************************************************
SCAN00   MVC   MAJNAME,CDNAME          MAJOR NAME
         TM    CDATTR,CDMIN            IS THIS A MINOR CDE?
         BZ    SCAN12                  NO, JUMP
         L     R1,CDXLMJP              POINT TO MAJOR CDE
         MVC   MAJNAME,CDNAME-CDENTRY(R1)   MAJOR NAME
*
SCAN12   L     R3,CVTPTR
         L     R6,CVTQLPAQ-CVT(,R3)    ACTIVE LPA QUEUE
         USING CDENTRY,R6
*LOOP
SCAN31   CLC   MODULE,CDNAME           IS THIS MY NAME?
         BE    EXIT12                  YES, QUIT
         CLC   MAJNAME,CDNAME          IS THIS MY NAME?
         BE    EXIT12                  YES, QUIT
         ICM   R6,B'1111',CDCHAIN      END OF CHAIN?
         BNZ   SCAN31                  NO, LOOP
*ENDLOOP
         DROP  R6
***********************************************************************
*                                                                     *
*        ALLOCATE SPACE IN SQA FOR THE CDE & XTLST                    *
*                                                                     *
*        IF THE ENTRY-POINT IS AN ALIAS, GET SPACE FOR 2 CDE'S        *
*                                                                     *
***********************************************************************
BUILD10  LA    R2,CDE_LEN+XTL_LEN      LENGTH OF CDE + XTLST
         TM    CDATTR,CDMIN            IS THIS A MINOR CDE?
         BZ    BUILD12                 NO, JUMP
         ST    R5,JPAMINOR             SAVE ADDR OF MINOR CDE
         L     R5,CDXLMJP              POINT TO MAJOR CDE
         LA    R2,CDE_LEN+XTL_LEN+CDE_LEN   ROOM FOR 2 CDE'S AND 1 XTL
*
BUILD12  GETMAIN R,                    GET STORAGE FOR CDE/XTLST       X
               SP=245,                 SQA, FIXED                      X
               LV=(R2)                 LENGTH OF CDE + XTLST
         ST    R1,LPAMAJOR             SAVE ADDRESS
*
         LR    R6,R1                   NEW CDE
         USING CDENTRY,R6
         MODESET KEY=ZERO
         MVC   CDENTRY(CDE_LEN),0(R5)  MOVE MAJOR CDE
         XC    CDCHAIN,CDCHAIN         END OF CHAIN
         OI    CDATTR,CDNIP            NIP=1,JPAQ=0
         NI    CDATTR,255-CDJPA        NIP=1,JPAQ=0
         MVI   CDATTRB,0               RESET CDEX FLAG
         XC    CDUSE,CDUSE             USE COUNT IS ZERO
*
         LA    R7,CDENTRY+CDE_LEN      NEW XTLST
         USING XTLST,R7
         L     R1,CDXLMJP              ADDR OF ORIGINAL XTLST
         MVC   XTLST(XTL_LEN),0(R1)    MOVE XTLST
         ST    R7,CDXLMJP              ADDR OF NEW XTLST
*
*        SET-UP THE MINOR CDE IF THE ENTRY-POINT IS AN ALIAS
*
         ICM   R5,B'1111',JPAMINOR     POINT TO THE MINOR CDE
         BZ    BUILD38                 NO MINOR CDE, JUMP
*
         LA    R1,CDENTRY+CDE_LEN+XTL_LEN  MY MINOR CDE
         ST    R1,CDCHAIN              MAJOR-->MINOR
         LR    R6,R1                   MY MINOR CDE
         MVC   CDENTRY(CDE_LEN),0(R5)  MOVE MINOR CDE
         XC    CDCHAIN,CDCHAIN         END OF CHAIN
         OI    CDATTR,CDNIP            NIP=1,JPAQ=0
         NI    CDATTR,255-CDJPA        NIP=1,JPAQ=0
         MVI   CDATTRB,0               RESET CDEX FLAG
         MVC   CDXLMJP,LPAMAJOR        POINT TO MAJOR CDE
*
*        FREE UP THE TRIAL COPY OF THE MODULE
*
BUILD38  MODESET KEY=NZERO
         DELETE EPLOC=MODULE           DELETE PATTERN MODULE
*
***********************************************************************
*                                                                     *
*        LOAD THE MODULE INTO THE CSA (SP=241,KEY=0)                  *
*                                                                     *
*        UPDATE LOAD-POINT AND ENTRY-POINT ADDRESSES IN CDE/XTLST     *
*                                                                     *
***********************************************************************
*
LOAD00   SLR   R2,R2
         ICM   R2,B'0111',XTLMSBLN     24-BIT LENGTH
         MODESET KEY=ZERO
         CLI   XTLMSBAD,0              RMODE=ANY?
         BNE   LOAD31                  YES, JUMP
*
*        ALLOCATE CSA SPACE (RMODE=24)
*
         GETMAIN R,                    RMODE=24                        X
               SP=241,                 CSA, KEY=0                      X
               LV=(R2)                 LENGTH OF THE MODULE
         B     LOAD40
*
*        ALLOCATE CSA SPACE (RMODE=ANY)
*
LOAD31   GETMAIN RU,                   RMODE=ANY                       X
               SP=241,                 CSA, KEY=0                      X
               LV=(R2),                LENGTH OF THE MODULE            X
               LOC=ANY                 RMODE=31
*
*        LOAD MODULE INTO CSA (USING MAJOR ENTRY POINT NAME)
*
LOAD40   LR    R2,R1                   LOAD POINT ADDRESS
         L     R3,STEPLIB              STEPLIB DCB
         L     R6,LPAMAJOR             MAJOR CDE
         LOAD  EPLOC=MAJNAME,          MODULE NAME                     X
               ADDR=(R2),              LOAD INTO CSA (SP 241)          X
               DCB=(R3),               JOBLIB/STEPLIB/TASKLIB/LINKLIST X
               SF=(E,LOAD2L)
         ST    R0,CDENTPT              ENTRY POINT OF MAJOR NAME
*
*        SET UP ADDR OF MINOR ENTRY-POINT
*
         ICM   R6,B'1111',CDCHAIN      DO WE HAVE A MINOR ENTRY POINT?
         BZ    LOAD90                  NO, QUIT
         ST    R6,LPAMINOR             YES, KEEP IT FOR DSPLY
         L     R0,CDENTPT              GET JPAQ ENTRY-POINT
         SL    R0,XTLMSBAD             OFFSET TO MINOR EP
         ALR   R0,R2                   CHANGE OFFSET TO ADDRESS
         ST    R0,CDENTPT              STORE RELOCATED ENTRY POINT
*
LOAD90   ST    R2,XTLMSBAD             LOAD-POINT
         DROP  R6,R7                   CDE, XTLST
*---------------------------------------------------------------------*
*                                                                     *
*        CHAIN THE CDE AT THE BOTTOM OF THE LPAQ                      *
*                                                                     *
*---------------------------------------------------------------------*
CHAIN    MODESET KEY=ZERO,MODE=SUP
         SETLOCK OBTAIN,                                               X
               TYPE=LOCAL,             LOCAL LOCK                      X
               MODE=UNCOND,                                            X
               REGS=USE,               DO NOT CHANGE R11-R13           X
               RELATED=CHAIN9
         SETLOCK OBTAIN,                                               X
               TYPE=CMS,               CROSS-MEMORY SERVICES           X
               MODE=UNCOND,                                            X
               REGS=USE,               DO NOT CHANGE R11-R13           X
               RELATED=CHAIN9
*
         L     R3,CVTPTR
         L     R6,CVTQLPAQ-CVT(,R3)    ACTIVE LPA QUEUE
         L     R0,0(,R6)               FIRST CDE IN LPAQ
*LOOP
CHAIN3   LR    R6,R0                   PASS ADDR OF NEXT CDE
         USING CDENTRY,R6
         ICM   R0,B'1111',CDCHAIN      END OF CHAIN?
         BNZ   CHAIN3                  NO, LOOP
*ENDLOOP
         MVC   CDCHAIN,LPAMAJOR        UPDATE FWD PTR
         DROP  R6
*
CHAIN9   SETLOCK RELEASE,                                              X
               TYPE=ALL,               LOCAL AND CMS                   X
               REGS=USE,               DO NOT CHANGE R11-R13           X
               RELATED=CHAIN1
         MODESET KEY=NZERO,MODE=PROB
*---------------------------------------------------------------------*
*                                                                     *
*        DISPLAY CDE/XTLST ON CONSOLE                                 *
*                                                                     *
*---------------------------------------------------------------------*
DSPLY00  WTO   MF=(E,WTO1L)            DISPLAY HEADER
         MVC   WTO1M(WTO1LL),WTO1L     MOVE MODEL WTO
         MVC   WTO1TEXT+1(L'WTO1TEXT-1),WTO1TEXT  BLANK HEADER OUT
*
DSPLY20  L     R6,LPAMAJOR             POINT TO MAJOR CDE
         USING CDENTRY,R6
         L     R7,CDXLMJP              POINT TO XTLST (OR MAJOR CDE)
         USING XTLST,R7
         MVC   WTO1TEXT+3(L'CDNAME),CDNAME
         ICM   R0,B'1111',CDENTPT      CONVERT TO HEX
         BAL   R14,DSPLYHEX            CONVERT TO HEX
         MVC   WTO1TEXT+12(8),SIXWORDS
         ICM   R0,B'1111',CDATTRB      CONVERT TO HEX
         BAL   R14,DSPLYHEX            CONVERT TO HEX
         MVC   WTO1TEXT+23(2),SIXWORDS
         ICM   R0,B'1111',CDSP         CONVERT TO HEX
         BAL   R14,DSPLYHEX            CONVERT TO HEX
         MVC   WTO1TEXT+27(2),SIXWORDS
         ICM   R0,B'1111',CDATTR       CONVERT TO HEX
         BAL   R14,DSPLYHEX            CONVERT TO HEX
         MVC   WTO1TEXT+31(2),SIXWORDS
         ICM   R0,B'1111',CDATTR2      CONVERT TO HEX
         BAL   R14,DSPLYHEX            CONVERT TO HEX
         MVC   WTO1TEXT+37(2),SIXWORDS
         ICM   R0,B'1111',CDUSE        CONVERT TO HEX
         BAL   R14,DSPLYHEX            CONVERT TO HEX
         MVC   WTO1TEXT+43(4),SIXWORDS
         ICM   R0,B'1111',XTLMSBLN     CONVERT TO HEX
         BAL   R14,DSPLYHEX            CONVERT TO HEX
         MVC   WTO1TEXT+60(6),SIXWORDS
         ICM   R0,B'1111',XTLMSBAD     CONVERT TO HEX
         BAL   R14,DSPLYHEX            CONVERT TO HEX
         MVC   WTO1TEXT+69(8),SIXWORDS
         ICM   R0,B'1111',LPAMAJOR+1   CONVERT TO HEX
         BAL   R14,DSPLYHEX            CONVERT TO HEX
         MVC   WTO1TEXT+81(6),SIXWORDS
         ICM   R0,B'1111',CDXLMJP+1    CONVERT TO HEX
         BAL   R14,DSPLYHEX            CONVERT TO HEX
         MVC   WTO1TEXT+90(6),SIXWORDS
         WTO   MF=(E,WTO1M)            DISPLAY MAJOR CDE
*
DSPLY40  ICM   R6,B'1111',LPAMINOR     DO WE HAVE A MINOR CDE?
         BZ    DSPLY99                 NO MINOR CDE, EXIT
         MVC   WTO1TEXT+3(L'CDNAME),CDNAME
         ICM   R0,B'1111',CDENTPT      CONVERT TO HEX
         BAL   R14,DSPLYHEX            CONVERT TO HEX
         MVC   WTO1TEXT+12(8),SIXWORDS
         ICM   R0,B'1111',CDATTRB      CONVERT TO HEX
         BAL   R14,DSPLYHEX            CONVERT TO HEX
         MVC   WTO1TEXT+23(2),SIXWORDS
         ICM   R0,B'1111',CDATTR       CONVERT TO HEX
         BAL   R14,DSPLYHEX            CONVERT TO HEX
         MVC   WTO1TEXT+31(2),SIXWORDS
         ICM   R0,B'1111',CDATTR2      CONVERT TO HEX
         BAL   R14,DSPLYHEX            CONVERT TO HEX
         MVC   WTO1TEXT+37(2),SIXWORDS
         MVC   WTO1TEXT+49(8),MAJNAME
         ICM   R0,B'1111',LPAMINOR+1   CONVERT TO HEX
         BAL   R14,DSPLYHEX            CONVERT TO HEX
         MVC   WTO1TEXT+81(6),SIXWORDS
         MVC   WTO1TEXT+90(6),WTO1TEXT+89   ERASE XTLST
         WTO   MF=(E,WTO1M)            DISPLAY MINOR CDE
*
DSPLY99  SLR   R15,R15                 RC=00
         B     EXIT
*
&TEXT    SETC  '   NAME     ENTPT    ATTRB SP ATTR  ATTR2  USE'
&TEXT    SETC  '&TEXT   MAJ-CDE    LENGTH   LOAD-PNT     CDE     XTLST'
&TEXTL   SETA  K'&TEXT
WTO1L    WTO   '&TEXT ',ROUTCDE=2,MF=L
WTO1LL   EQU   *-WTO1L
*
*        CONVERT (R0) TO HEXADECIMAL FOR DISPLAY
*
DSPLYHEX ST    R0,SIXWORDS+20          HEX VALUE
         UNPK  SIXWORDS(9),SIXWORDS+20(5)
         TR    SIXWORDS(8),DSPLYTAB-C'0'
         BR    R14
DSPLYTAB DC    C'0123456789ABCDEF'
*
***********************************************************************
*                                                                     *
*        FUNCTION=DELETE                                              *
*                                                                     *
***********************************************************************
*
DEL00    MODESET KEY=ZERO,MODE=SUP
         SETLOCK OBTAIN,                                               X
               TYPE=LOCAL,             LOCAL LOCK                      X
               MODE=UNCOND,                                            X
               REGS=USE,               DO NOT CHANGE R11-R13           X
               RELATED=DEL32
         SETLOCK OBTAIN,                                               X
               TYPE=CMS,               CROSS-MEMORY SERVICES           X
               MODE=UNCOND,                                            X
               REGS=USE,               DO NOT CHANGE R11-R13           X
               RELATED=DEL32
*
         L     R3,CVTPTR
         L     R6,CVTQLPAQ-CVT(,R3)    ACTIVE LPA QUEUE
         USING CDENTRY,R6
*LOOP
DEL23    CLC   MODULE,CDNAME           IS THIS MY CDE?
         BE    DEL31                   YES, EXIT LOOP
         LR    R3,R6                   SAVE ADDR OF PREVIOUS CDE
         ICM   R6,B'1111',CDCHAIN      END OF CHAIN?
         BNZ   DEL23                   NO, LOOP
*ENDLOOP
         B     DEL32                   MODULE NOT FOUND
*
*        CDE FOUND ON QUEUE, REMOVE IT
*
DEL31    MVC   CDCHAIN-CDENTRY(,R3),CDCHAIN    REMOVE MY CDE FROM CHAIN
*
DEL32    SETLOCK RELEASE,                                              X
               TYPE=ALL,               LOCAL AND CMS                   X
               REGS=USE,               DO NOT CHANGE R11-R13           X
               RELATED=DEL21
         MODESET KEY=NZERO,MODE=PROB
         LTR   R6,R6                   MODULE FOUND?
         BZ    EXIT4                   NO, QUIT
*
*        FREE MODULE AND XTLST (MAJOR CDE ONLY)
*
         TM    CDATTR,CDMIN            IS THIS A MINOR CDE?
         BO    DEL77                   YES, JUMP
         L     R7,CDXLMJP              ADDR OF XTLST
         USING XTLST,R7
*
*        FREE THE MODULE (CSA, SP=241)
*
         MODESET KEY=ZERO              SWITCH TO KEY=ZERO FOR FREEMAIN
         SLR   R0,R0
         ICM   R0,B'0111',XTLMSBLN     24-BIT LENGTH
         L     R1,XTLMSBAD             31-BIT ADDRESS
         FREEMAIN RU,                  FREE MODULE                     X
               SP=241,                 SQA, FIXED                      X
               A=(R1),                 A(MODULE)                       X
               LV=(R0)                 LENGTH OF MODULE
         MODESET KEY=NZERO             SWITCH TO KEY=TCB
*
*        FREE XTLST (SQA,SP=245)
*
         FREEMAIN R,                   FREE XTLST                      X
               SP=245,                 SQA, FIXED                      X
               A=(R7),                 A(XTLST)                        X
               LV=XTL_LEN              LENGTH OF XTLST
*
*        FREE CDE (SQA,SP=245)
*
DEL77    FREEMAIN R,                   FREE CDE                        X
               SP=245,                 SQA, FIXED                      X
               A=(R6),                 A(CDENTRY)                      X
               LV=CDE_LEN              LENGTH OF CDE
*
DEL99    SLR   R15,R15                 RC=00
         B     EXIT
*
***********************************************************************
*                                                                     *
*        GOBACK TO CALLER                                             *
*                                                                     *
***********************************************************************
*
EXIT4    LA    R15,4                   MODULE NOT FOUND ON LPAQ
         B     EXIT
*
EXIT8    LA    R15,8                   USER IS NOT AUTHORIZED
         B     EXIT
*
EXIT12   LA    R15,12                  MODULE ALREADY IN LPA
         B     EXIT
*
EXIT16   LA    R15,16                  PARM INVALID OR OMITTED
         B     EXIT
*
EXIT20   LA    R15,20                  MODULE FOUND IN PLPA
*
EXIT     LR    R1,R13                  A(DYNAM)
         LR    R2,R15                  RETURN_CODE
         L     R13,4(,R13)
         FREEMAIN R,LV=DYNAML,A=(1)    FREE DYNAMIC STORAGE
         LR    R15,R2                  RETURN_CODE
         RETURN (14,12),RC=(15)
*
***********************************************************************
*                                                                     *
*        INPUT PARM (FROM EXEC STATEMENT)                             *
*                                                                     *
***********************************************************************
PARM     DSECT
PARMLEN  DS    H                      LENGTH OF PARM
PARMFUNC DS    C'LOAD,'               FUNCTION: LOAD/DELETE
PARMNAME DS    CL8                    NAME OF LOAD MODULE
***********************************************************************
*                                                                     *
*        DYNAMIC STORAGE                                              *
*                                                                     *
***********************************************************************
DYNAM    DSECT
         DS    18F                    SAVE AREA
MODULE   DS    CL8                    ENTRY-POINT NAME
MAJNAME  DS    CL8                    MAJOR NAME
FUNCTION DS    C'L'                   L=LOAD  D=DELETE
JPAMINOR DS    A(CDENTRY)             ADDR OF THE MINOR CDE (IN JPAQ)
LPAMAJOR DS    A(CDENTRY)             ADDR OF MY MAJOR CDE (IN SQA)
LPAMINOR DS    A(CDENTRY)             ADDR OF MY MINOR CDE (IN SQA)
STEPLIB  DS    A                      DCB ADDRESS
SIXWORDS DS    6F                     WORK AREA
*
LOAD1L   LOAD  SF=L
LOAD2L   LOAD  SF=L
*
RACF_DYN RACROUTE REQUEST=AUTH,MF=L
RACF_LEN EQU   *-RACF_DYN
RACFWORK DS    64D                    RACROUTE WORK AREA (512 BYTES)
RACF_VOL DS    C'SYSRES'              VOLSER
*
WTO1M    WTO   '&TEXT',ROUTCDE=2,MF=L
WTO1TEXT EQU   WTO1M+4,&TEXTL         TEXT
*
DYNAML   EQU   *-DYNAM
***********************************************************************
*                                                                     *
*        MVS CONTROL BLOCKS USED IN LOADMLPA                          *
*                                                                     *
***********************************************************************
         PRINT NOGEN
PRINT    OPSYN ANOP
         IHAPSA DSECT=YES
         CVT   DSECT=YES,LIST=NO
         IKJTCB DSECT=YES,LIST=NO
         IHAASCB
         IHAASXB
         IHAACEE
         IHACDE
         DS    0F                      ALIGNMENT
CDE_LEN  EQU   *-CDENTRY
         IHAXTLST
         DS    0F                      ALIGNMENT
XTL_LEN  EQU   *-XTLST
         YREGS
         END
//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB
//         DD DISP=SHR,DSN=SYS1.MODGEN
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,3)
//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200
//SYSPRINT DD SYSOUT=*
//*
//LKED    EXEC PGM=LINKLLA,PARM='MAP,RENT,AC=1'
//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,DELETE)
//SYSLMOD  DD DISP=SHR,DSN=SYS1.P390.LINKLIB(LOADMLPA)
//SYSPRINT DD SYSOUT=*
//
//*
//INSTALL EXEC PGM=LOADMLPA,PARM=(LOAD,EXECPGM)
//REMOVE  EXEC PGM=LOADMLPA,PARM=(DELETE,EXECPGM)
//SYSUDUMP DD SYSOUT=*
//ABNLTERM DD SYSOUT=*
//
//
//
