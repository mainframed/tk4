//GILBERTC JOB (ACCT#),CUTPGM,
// NOTIFY=&SYSUID,
// CLASS=A,MSGCLASS=X,COND=(0,NE)
//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)
***********************************************************************
*                                                                     *
* MODULE NAME = CUTPGM                                                *
*                                                                     *
* DESCRIPTIVE NAME = UTILITY PROGRAM FOR THE CUT & PASTE EDIT MACROS  *
*                                                                     *
* FUNCTION = THIS PGM IS INVOKED BY THE CUT AND PASTE EDIT MACROS     *
*            TO CREATE AND MAINTAIN CLIP-BOARDS USING DATA SPACES,    *
*            NAME/TOKEN PAIRS AND COMPRESSION/EXPANSION SERVICES.     *
*                                                                     *
* STATUS = R402                                                       *
*                                                                     *
* AUTHOR = GILBERT SAINT-FLOUR <GSF@POBOX.COM>                        *
*                                                                     *
* ENVIRONMENT = SEE BELOW                                             *
*                                                                     *
*    DEPENDENCIES: MVS/ESA 4.2.2                                      *
*                  ISPF/PDF V3                                        *
*                  CUT & PASTE EDIT MACROS R300                       *
*                                                                     *
* MODULE TYPE = PROCEDURE, (CSECT TYPE)                               *
*                                                                     *
*    PROCESSOR = IBM OS/ASSEMBLER H VERSION 2 OR                      *
*                IBM HIGH LEVEL ASSEMBLER/MVS                         *
*                                                                     *
*    MODULE SIZE = 2K                                                 *
*                                                                     *
*    ATTRIBUTES = REENTERABLE, RMODE ANY, AMODE 31,                   *
*                 PROBLEM STATE, KEY 8                                *
*                 APF AUTHORIZATION: NONE                             *
*                                                                     *
* OPERATION = SEE BELOW                                               *
*                                                                     *
*   CUTPGM IS INVOKED BY THE CUT AND PASTE EDIT MACROS AND,           *
*   DEPENDING ON THE PARM PASSED BY THE INVOKER, PROVIDES THE         *
*   "CUT", "PASTE" AND "DUMP" FUNCTIONS.                              *
*                                                                     *
*   1. "CUT" DEFINES A CLIP-BOARD AND COPIES DATA FROM THE EDIT       *
*      SESSION TO THE CLIP-BOARD.  DATA MAY OR MAY NOT BE             *
*      COMPRESSED DURING THE COPY PROCESS, BASED ON A PARM OPTION.    *
*                                                                     *
*   2. "PASTE" RETRIEVES DATA FROM THE CLIP-BOARD AND INSERTS IT      *
*      INTO THE CURRENT EDIT DATA.                                    *
*                                                                     *
*   3. "DUMP" DISPLAYS THE CONTENTS OF A CLIP-BOARD USING THE         *
*      "BRIF" SERVICE.  THIS FUNCTION IS INTENDED FOR DEBUGGING       *
*      PURPOSES ONLY.                                                 *
*                                                                     *
*   THE PARM FIELD IS USED TO PASS PARAMETERS TO THE PROGRAM.         *
*   PLEASE REFER TO THE "PARM" DSECT FOR THE FORMAT OF THE            *
*   PARM FIELD.                                                       *
*                                                                     *
*   CLIP-BOARD NAMES HAVE THE SAME FORMAT AS PDS MEMBER NAMES.        *
*   THE NUMBER OF CLIP-BOARDS IN USE AT A GIVEN TIME IS ONLY          *
*   LIMITED BY THE SYSTEM.  CLIP-BOARDS GET DELETED AT THE END        *
*   OF THE TSO SESSION (I.E. AT LOGOFF TIME).                         *
*                                                                     *
*   EACH CLIP-BOARD IS ACTUALLY A DATA SPACE NAMED 'NNNNNCUT',        *
*   WHERE NNNNN IS A SEQUENCE NUMBER GENERATED BY THE SYSTEM          *
*   WHEN THE DSPSERV MACRO IS ISSUED TO CREATE A DATA SPACE.          *
*                                                                     *
*   THIS PROGRAM USES NAME/TOKEN PAIRS TO RETRIEVE THE STOKEN AND     *
*   ALET OF THE DATA SPACES IT CREATES.  NAME/TOKEN PAIRS IS A        *
*   FEATURE INTRODUCED IN MVS/ESA 4.2.2.  CONSEQUENTLY, THIS          *
*   PROGRAM WON'T LINK NOR EXECUTE ON MVS SYSTEMS PRIOR TO 4.2.2.     *
*                                                                     *
*   TO REDUCE PAGING, DATA CAN BE STORED IN COMPRESSED FORMAT,        *
*   DEPENDING ON A PARM OPTION.  THREE LEVELS ARE AVAILABLE:          *
*                                                                     *
*   1. WHEN COMPRESS=0, DATA IS NOT COMPRESSED AND EACH RECORD        *
*      USES UP TO LRECL+2 BYTES OF STORAGE.                           *
*                                                                     *
*   2. WHEN COMPRESS=1, TRAILING BLANKS ARE REMOVED.                  *
*                                                                     *
*   3. WHEN COMPRESS=2, MVS COMPRESSION/EXPANSION SERVICES            *
*      (CSECRSRV MACRO) ARE USED TO COMPRESS STRINGS OF               *
*      REDUNDANT CHARACTERS.                                          *
*                                                                     *
* RETURN-CODES = SEE BELOW                                            *
*                                                                     *
*          0                    OK                                    *
*         12                    UNDEFINED CLIP-BOARD          (PASTE) *
*         20                    INVALID FUNCTION                      *
*        1NN                    VDEFINE        FAILED WITH RC=NN      *
*        2NN                    ISREDIT        FAILED WITH RC=NN      *
*        5NN                    CSECRSRV       FAILED WITH RC=NN      *
*        6NN                    OPEN           FAILED WITH RC=NN      *
*        7NN                    BRIF           FAILED WITH RC=NN      *
*       1NNN                    TCBTOKEN MACRO FAILED WITH RC=NNN     *
*       2NNN                    DSPSERV CREATE FAILED WITH RC=NNN     *
*       3NNN                    ALESERV ADD    FAILED WITH RC=NNN     *
*       4NNN                    IEANTCR CALL   FAILED WITH RC=NNN     *
*                                                                     *
* CHANGE ACTIVITY                                                     *
*                                                                     *
*  $400 COMPLETE REWRITE FOR ESA 4.2.2                                *
*  $401 ISSUE LOAD TO MAKE MYSELF RESIDENT IN MEMORY                  *
*  $402 FIX PADDING ERROR IN PASTE ROUTINE                            *
*                                                                     *
&REL     SETC  'R402'                                                 *
***********************************************************************
CUTPGM   CSECT
CUTPGM   RMODE ANY
         SAVE  (14,12),,'GSF UTILITIES - CUTPGM &REL'
         LR    R12,R15                 BASE REG
         USING CUTPGM,R12
         L     R11,0(,R1)              A(PARM)
         USING PARM,R11
*---------------------------------------------------------------------*
*                                                                     *
*        INITIALISATION                                               *
*                                                                     *
*        1. ALLOCATE WORKING-STORAGE                                  *
*        2. RETRIEVE THE STOKEN/ALET OF THE DATA SPACE                *
*        3. CHECK PARAMETERS COMMON TO CUT AND PASTE FUNCTIONS        *
*                                                                     *
*---------------------------------------------------------------------*
         STORAGE OBTAIN,               GET DYNAMIC STORAGE             X
               LENGTH=DYNAML,          LENGTH                          X
               LOC=BELOW,              SNAPDCB                         X
               BNDRY=PAGE              INITIALIZE WITH X'00'
         ST    R13,4(,R1)
         ST    R1,8(,R13)
         LM    R13,R1,8(R13)           A(DYNAM)
         USING DYNAM,R13
*
         LOAD  EP=CUTPGM               MAKE MYSELF RESIDENT
*
         LOAD  EP=ISPLINK              ISPF INTERFACE
         ST    R0,ISPLINK@             SAVE THE ADDRESS
*
         MVC   CLIPNAME,=C'CUTPASTE'   NAME OF MY DATA SPACE
         MVC   CLIPNAME+8(8),CLIPBOARD BUFFER ID
*
*        RETRIEVE THE STOKEN/ALET OF THE DATA SPACE
*
         CALL  IEANTRT,                RETRIEVE                        X
               (=A(IEANT_HOME_LEVEL),  SCOPE                           X
               CLIPNAME,DSPCSTKN,      NAME/TOKEN                      X
               DWD),                   RETURN CODE                     X
               MF=(E,TENWORDS)
         LTR   R15,R15                 DATA SPACE EXISTS ALREADY?
         BNZ   INIT30                  NO, JUMP
         L     R2,DSPCORG              ORIGIN
         LAM   R2,R2,DSPCALET          POINT TO THE DATA SPACE
         SAC   512                     MODE=AR
         MVC   HEADER,0(R2)            MOVE HEADER FROM "CUT"
         SAC   0                       MODE=PRIMARY
*
INIT30   CLI   FUNCTION,C'D'           FUNCTION=DUMP?
         BE    DUMP00                  YES, GO THERE
*
         PACK  LINE1,LINE1             FIRST LINE
*
         CLI   FUNCTION,C'C'           FUNCTION=CUT?
         BE    CUT00                   YES, GO THERE
         CLI   FUNCTION,C'P'           FUNCTION=PASTE?
         BE    PASTE00                 YES, GO THERE
         LA    R15,20                  RC=20 (INVALID FUNCTION)
         B     EXIT15                  QUIT
***********************************************************************
*                                                                     *
*        "DUMP" FUNCTION: DISPLAY THE CONTENTS OF THE DATA SPACE      *
*                         USING THE ISPF/PDF BROWSE INTERFACE (BRIF). *
*                                                                     *
***********************************************************************
DUMP00   LA    R15,12                  DATA SPACE NOT FOUND
         OC    HDRTCB,HDRTCB           DATA SPACE LOCATED?
         BZ    EXIT15                  NO, QUIT
         LA    R0,DYNAM                DIALOG DATA ADDR
         ST    R0,DWD                  DIALOG DATA PTR
         LA    R14,=C'BRIF'            ISPF FUNCTION
         LA    R15,CLIPNAME            DSNAME
         LA    R0,=C'F '               RECFM
         LA    R1,=F'80'               LRECL
         LA    R2,=A(DUMP500)          READ ROUTINE
         SLR   R3,R3                   COMMAND RTNE ADDR
         LA    R4,DWD                  PARM FOR READ ROUTINE
         STM   R14,R4,TENWORDS         PARAMETER LIST
         OI    TENWORDS+24,X'80'       END OF PARAMETER LIST
         LA    R1,TENWORDS             PARAMETER LIST
         L     R15,ISPLINK@            ISPF INTERFACE
         BALR  R14,R15              <- BRIF
         LTR   R15,R15                 BRIF OK?
         BZ    EXIT00                  YES, EXIT
         LA    R15,700(,R15)           ERROR: BRIF FAILED
         B     EXIT15                  NO, QUIT
*
*        BRIF READ ROUTINE
*
         PUSH  USING
DUMP500  BAKR  R14,0                   SAVE REGS
         LR    R11,R15                 BASE REG
         USING DUMP500,R11
         LM    R2,R5,0(R1)             LOAD PARM ADDR
         L     R13,0(,R5)              POINT TO DYNAMIC STORAGE AREA
         L     R7,0(,R4)               LINE NUMBER REQUESTED BY BRIF
         BCTR  R7,0                    RELATIVE TO ZERO
         M     R6,=F'80'               MULT BY LINE LENGTH
*L R0,DSPCALET
         LAM   R7,R7,DSPCALET          POINT TO THE DATA SPACE
         SAC   512                     MODE=AR
         MVC   LINE(80),0(R7)          MOVE LINE TO ADDRESS SPACE
         SAC   0                       MODE=PRIMARY
         LA    R0,LINE                 ADDRESS OF CURRENT RECORD
         ST    R0,0(,R2)               PASS ADDR BACK TO BRIF
*STM R2,R7,LINE
DUMP590  SLR   R15,R15                 GOBACK WITH RC=00
         PR
         POP   USING
***********************************************************************
*                                                                     *
*        "CUT" FUNCTION                                               *
*                                                                     *
*        1. PROCESS PARM                                              *
*        2. DEFINE THE DATA SPACE                                     *
*        3. RETRIEVE DATA LINES AND STORE THEM INTO THE DATA SPACE    *
*        4. UPDATE DATA SPACE HEADER                                  *
*                                                                     *
***********************************************************************
CUT00    PACK  LINE2,LINE2             LAST LINE
*
         BAL   R14,DEFSPC              DEFINE DATA SPACE
         LTR   R15,R15                 OK?
         BNZ   EXIT15                  NO, QUIT
*
         CLI   APPEND,C'+'             APPEND OPTION ?
         BE    CUT40                   YES, DO NOT RESET POINTERS
         MVC   HDRCOMPR,COMPRESS       SAVE COMPRESSION LEVEL
         XC    HDRLINES,HDRLINES       RESET LINE COUNTER
*
         L     R4,DSPCORG              ORIGIN
         LA    R4,L'HEADER(,R4)        SKIP HEADER
         ST    R4,HDRNEXTB             FIRST BYTE OF DATA
*
         PACK  DWD,LRECL               MAX RECORD SIZE
         CVB   R0,DWD                  LENGTH
         ST    R0,HDRLRECL             LENGTH
*
CUT40    BAL   R14,VDEFLINE            VDEFINE LINE
         LTR   R15,R15                 CHECK RETURN CODE
         BNZ   ERROR100                ISPLINK FAILED
*
CUT50    L     R4,HDRNEXTB             FIRST BYTE OF DATA
         LAM   R4,R4,DSPCALET          POINT TO THE DATA SPACE
*
         L     R5,HDRBLKS              SIZE OF THE DATA SPACE (PAGES)
         SLL   R5,12                   SIZE OF THE DATA SPACE (BYTES)
         SL    R5,DSPCORG              MINUS ORIGIN
         SLR   R5,R4                   SIZE OF THE DATA PORTION
*
         MVC   COMMAND(20),=C'(LINE) = LINE 123456'
*---------------------------------------------------------------------*
*                                                                     *
*        "CUT" FUNCTION: COPY DATA TO THE BUFFER                      *
*                                                                     *
*---------------------------------------------------------------------*
*LOOP
CUT80    OI    LINE1+L'LINE1-1,15      SUPPRESS SIGN
         UNPK  COMMAND+14(6),LINE1     123456
         LA    R0,20                   LENGTH OF COMMAND
         BAL   R14,ISREDIT
         LTR   R15,R15                 CHECK RETURN CODE
         BNZ   ERROR200                ISREDIT FAILED
*
*        MOVE LINE TO BUFFER
*
CUT81    LAE   R2,LINE                 SOURCE TEXT
         L     R3,HDRLRECL             LENGTH OF SOURCE TEXT
         SAC   512                     MODE=AR
         CLI   HDRCOMPR,C'0'           COMPRESS=NONE ?
         BE    CUT84                   YES, JUMP
         CLI   HDRCOMPR,C'2'           COMPRESS=CSRCE ?
         BE    CUT85                   YES, JUMP
*
*        TRUNCATE TRAILING BLANKS      (COMPRESS=1)
*
         LA    R1,LINE(R3)             FIRST BYTE AFTER LINE
CUT82    BCTR  R1,0
         CLI   0(R1),C' '              IS IT A SPACE ?
         BNE   CUT84                   NO, EXIT
         BCT   R3,CUT82
         LA    R3,1                    LENGTH=1
*
CUT84    STH   R3,0(,R4)               STORE LENGTH
         LA    R4,2(,R4)               SKIP LENGTH COUNTER
         LR    R5,R3                   RECORD SIZE
         MVCL  R4,R2                   MOVE DATA
         SAC   0                       MODE=PRIMARY
         B     CUT88                   NEXT LINE
*
*        COMPRESS DATA USING MVS COMPRESSION/EXPANSION SERVICES
*
CUT85    SLR   R1,R1                   NO WORK AREA
         LAE   R6,0(,R4)               SAVE ADDRESS
         LA    R4,2(,R4)               SKIP COUNT
         BCTR  R5,0
         BCTR  R5,0
.OW10890 LAE   14,0                    PREVENT S0C4 IN CSRCE
         CSRCESRV SERVICE=COMPRESS     BUFFER<=LINE
         LR    R1,R4                   CALC LENGTH OF COMPRESSED TEXT
         SR    R1,R6                   CALC LENGTH OF COMPRESSED TEXT
         BCTR  R1,0                    CALC LENGTH OF COMPRESSED TEXT
         BCTR  R1,0                    CALC LENGTH OF COMPRESSED TEXT
         STH   R1,0(,R6)               SAVE LENGTH OF COMPRESSED TEXT
****     MVI   0(R4),X'FF'             END OF FILE MARK
         SAC   0                       MODE=PRIMARY
         LTR   R15,R15                 OK?
         BNZ   ERROR500                NO, EXIT
*
CUT88    LA    R0,1                    NUMBER OF LINES IN BUFFER
         AL    R0,HDRLINES             NUMBER OF LINES IN BUFFER
         ST    R0,HDRLINES             NUMBER OF LINES IN BUFFER
*
         AP    LINE1,=P'1'             INCREMENT LINE NUMBER
         CP    LINE1,LINE2             LAST LINE REACHED?
         BNH   CUT80                   NOT YET, PROCESS NEXT LINE
*ENDLOOP
         ST    R4,HDRNEXTB             SAVE ADDR OF NEXT BYTE
         L     R4,DSPCORG              POINT TO HEADER
         SAC   512                     MODE=AR
         MVC   0(L'HEADER,R4),HEADER   MOVE HEADER FOR "PASTE"
         SAC   0                       MODE=PRIMARY
         B     EXIT00
***********************************************************************
*                                                                     *
*        "PASTE" FUNCTION                                             *
*                                                                     *
*        RETRIEVE DATA LINES FROM THE DATA SPACE AND INSERT THEM      *
*        AFTER &LINE1                                                 *
*                                                                     *
***********************************************************************
PASTE00  LA    R15,12                  DATA SPACE NOT FOUND
         OC    HDRTCB,HDRTCB           DATA SPACE LOCATED?
         BZ    EXIT15                  NO, QUIT
         BAL   R14,VDEFLINE            VDEFINE LINE
         LA    R2,L'HEADER(,R2)        POINT AT COMPRESSED TEXT
         L     R8,HDRLINES             NUMBER OF LINES IN BUFFER
         MVC   COMMAND(35),=C'LINE_AFTER 123456 = DATALINE (LINE)'
*
*        GET LINES FROM THE DATA SPACE AND PASS THEM TO ISPF EDIT
*LOOP
PASTE50  SAC   512                     MODE=AR
         LH    R3,0(,R2)               SIZE OF RECORD STORED IN BUFFER
         LA    R2,2(,R2)               SKIP RCD LEN
         LAE   R4,LINE                 SOURCE TEXT
         L     R5,HDRLRECL             LENGTH OF SOURCE TEXT
         CLI   HDRCOMPR,C'2'           COMPRESS=CSRCE ?
         BE    PASTE55                 YES, JUMP
*
         ICM   R3,B'1000',=C' '        PADDING
         MVCL  R4,R2                   MOVE FROM BUFFER
         SAC   0                       MODE=PRIMARY
         B     PASTE57                 NEXT LINE
*
*        EXPAND DATA USING MVS COMPRESSION/EXPANSION SERVICES
*
PASTE55  SLR   R1,R1                   NO WORK AREA
         CSRCESRV SERVICE=EXPAND       BUFFER=>LINE
         SAC   0                       MODE=PRIMARY
         LTR   R15,R15                 OK?
         BNZ   ERROR500                NO, EXIT
*
*        INSERT A LINE AFTER CURRENT
*
PASTE57  OI    LINE1+L'LINE1-1,15      SUPPRESS SIGN
         UNPK  COMMAND+11(6),LINE1     123456
         LA    R0,35                   LENGTH OF THE ISREDIT COMMAND
         BAL   R14,ISREDIT
         CH    R15,=H'4'               LINE TRUNCATED?
         BH    ERROR200                BAD, QUIT
*
         AP    LINE1,=P'1'             NEXT LINE NUMBER
         BCT   R8,PASTE50              KEEP ON DOING IT
*ENDLOOP
***********************************************************************
*                                                                     *
*        RETURN TO CALLER                                             *
*                                                                     *
***********************************************************************
EXIT00   SLR   R15,R15                 RC=00
         B     EXIT15
*
ERROR100 LA    R15,100(,R15)           ISPLINK FAILED (VDEFINE)
         B     EXIT15
*
ERROR200 LA    R15,200(,R15)           ISPLINK FAILED (ISREDIT)
         B     EXIT15
*
ERROR500 LA    R15,500(,R15)           CSRCESRV FAILED
         B     EXIT15
*
EXIT15   LR    R2,R15                  SAVE RETURN CODE
         LR    R1,R13                  A(DYNAM)
         L     R13,4(,R13)
         STORAGE RELEASE,LENGTH=DYNAML,ADDR=(1) FREE DYNAMIC STORAGE
         LR    R15,R2                  PASS RETURN CODE
         RETURN (14,12),RC=(15)        GOBACK TO CALLER WITH RC IN R15
*---------------------------------------------------------------------*
*                                                                     *
*        ISPLINK VDEFINE (LINE) CHAR                                  *
*                                                                     *
*---------------------------------------------------------------------*
VDEFLINE BAKR  R14,0
         LA    R14,=C'VDEFINE'         FUNCTION
         LA    R15,=C'LINE '           NAME
         LA    R0,LINE                 ADDRESS
         LA    R1,=C'CHAR'             TYPE
         LA    R2,HDRLRECL             LENGTH
         STM   R14,R2,TENWORDS         BUILD PARM LIST
         OI    TENWORDS+16,X'80'       MARK END OF LIST
         L     R15,ISPLINK@            PICK UP ISPF INTERFACE ADDRESS
         LA    R1,TENWORDS             PARAM
         BALR  R14,R15                 GOTO ISPLINK
         PR
*---------------------------------------------------------------------*
*                                                                     *
*        DEFINE THE DATA SPACE (FUNCTION=CUT)                         *
*                                                                     *
*---------------------------------------------------------------------*
DEFSPC   BAKR  R14,0
         OC    HDRTCB,HDRTCB           DATA SPACE CREATED ALREADY?
         BNZ   DEFSPC7                 YES, JUMP
*
         PACK  DWD,BLOCKS              SIZE OF DATA SPACE IN BLOCKS
         CVB   R0,DWD                  SIZE OF DATA SPACE IN BLOCKS
         ST    R0,HDRBLKS              SIZE OF DATA SPACE IN BLOCKS
*
*        RETRIEVE THE TCBTOKEN OF MY JOB-STEP TCB
*
         TCBTOKEN TTOKEN=STEPTOKN,     TCBTOKEN OF MY JS TCB           X
               TYPE=JOBSTEP,                                           X
               MF=(E,TCBTOKN1)
         LTR   R15,R15                 OK?
         LA    R15,1000(,R15)          RC=10NN        TCBTOKEN
         BNZ   DEFSPC9                 NO, EXIT
*
*        DEFINE A DATA SPACE AND ASSIGN OWNERSHIP TO MY JOB-STEP TCB
*
         DSPSERV CREATE,                                               X
               NAME=CLIPNAME,          C'CUTPASTE'                     X
               GENNAME=YES,            DSPSERV GENERATES A NAME        X
               OUTNAME=DSPCNAME,       NAME OF DATA SPACE              X
               BLOCKS=HDRBLKS,         16 MEGS                         X
               STOKEN=DSPCSTKN,                                        X
               TTOKEN=STEPTOKN,        TCBTOKEN OF MY JS TCB           X
               ORIGIN=DSPCORG,                                         X
               MF=(E,DSPSERV1)
         LTR   R15,R15                 OK?
         LA    R15,2000(,R15)          RC=20NN         DSPSERV
         BNZ   DEFSPC9                 NO, EXIT
         MVC   HDRTCB,PSATOLD-PSA      OWNER OF THE DATA SPACE
         MVI   APPEND,C'-'             APPEND OPTION OFF
*
*        ADD THE DATA SPACE TO THE PASN-AL TO ALLOW ACESS FROM
*        ANY TASK IN MY ADDRESS SPACE.
*
         ALESERV ADD,                                                  X
               STOKEN=DSPCSTKN,                                        X
               ALET=DSPCALET,                                          X
               AL=PASN,                MAKE IT PUBLIC                  X
               MF=(E,ALESERV1)
         LTR   R15,R15                 OK?
         LA    R15,3000(,R15)          RC=30NN         ALESERV
         BNZ   DEFSPC9                 NO, EXIT
*
*        CREATE A NAME/TOKEN PAIR TO BE ABLE TO RETRIEVE
*        THE DATA SPACE LATER ON.
*
         CALL  IEANTCR,                CREATE A NAME/TOKEN PAIR        X
               (=A(IEANT_HOME_LEVEL),                                  X
               CLIPNAME,DSPCSTKN,      NAME/TOKEN                      X
               =F'0',                  PERSIST OPTION                  X
               DWD),                                                   X
               MF=(E,TENWORDS)
         LTR   R15,R15                 OK?
         BZ    DEFSPC8                 YES, JUMP
         LA    R15,4000(,R15)          RC=40NN         IEANTCR
         B     DEFSPC9                 NO, EXIT
*
*        IF THE DATA SPACE EXISTS ALREADY AND I OWN IT,
*        ISSUE DSPSERV RELEASE TO PREVENT UNNECESSARY PAGING.
*
DEFSPC7  CLI   APPEND,C'+'             APPEND OPTION ?
         BE    DEFSPC8                 YES, DO NOT ISSUE RELEASE
         CLC   HDRTCB,PSATOLD-PSA      DO I OWN THIS DATA SPACE?
         BNE   DEFSPC8                 NO, DO NOT ISSUE RELEASE
         DSPSERV RELEASE,              FREE PAGING SPACE               X
               STOKEN=DSPCSTKN,                                        X
               BLOCKS=HDRBLKS,         SIZE                            X
               START=DSPCORG,          ORIGIN                          X
               MF=(E,DSPSERV1)
*
DEFSPC8  SLR   R15,R15                 RC=0
DEFSPC9  PR
*---------------------------------------------------------------------*
*                                                                     *
*        EXECUTE ISREDIT FUNCTION                                     *
*                                                                     *
*---------------------------------------------------------------------*
ISREDIT  ST    R0,TENWORDS+16          LENGTH OF THE COMMAND
         LA    R15,=C'ISREDIT '        COMMAND
         LA    R0,TENWORDS+16          LENGTH
         LA    R1,COMMAND              COMMAND
         STM   R15,R1,TENWORDS         BUILD PARM LIST
         OI    TENWORDS+8,X'80'        MARK END OF LIST
         L     R15,ISPLINK@            ISPF INTERFACE
         LA    R1,TENWORDS             PARAM
         BR    R15                     GOTO ISPLINK
*---------------------------------------------------------------------*
*                                                                     *
*        INPUT PARAMETERS                                             *
*                                                                     *
*---------------------------------------------------------------------*
PARM     DSECT
         DS    H                       LENGTH
FUNCTION DS    C'C'                    FUNCTION: C/P/D
CLIPBOARD DS   C'12345678'             CLIP BOARD
LINE1    DS    Z'123456'               FIRST LINE (.ZF)
APPEND   DS    C'+'                    APPEND/REPLACE     (CUT ONLY)
COMPRESS DS    C'0'                    COMPRESSION LEVEL  (CUT ONLY)
LRECL    DS    Z'32767'                MAX RECORD SIZE    (CUT ONLY)
LINE2    DS    Z'123456'               LAST LINE (.ZL)    (CUT ONLY)
BLOCKS   DS    Z'123456'               SIZE OF DATA SPACE (CUT ONLY)
*---------------------------------------------------------------------*
*                                                                     *
*        WORKING-STORAGE AREA                                         *
*                                                                     *
*---------------------------------------------------------------------*
DYNAM    DSECT
         DS    18F
ISPLINK@ DS    V(ISPLINK)
TENWORDS DS    10F
TCBTOKN1 TCBTOKEN MF=L
         DSPSERV MF=(L,DSPSERV1)
ALESERV1 ALESERV MF=L
*
STEPTOKN DS    XL16                    TCBTOKEN OF MY JS TCB
DWD      DS    D
COMMAND  DS    CL40                    ISREDIT COMMAND
*
*        NAME/TOKEN PAIR
*
         DS    0F
CLIPNAME DS    C'CUTPASTE',XL8'00'     NAME OF THE CLIP-BOARD
DSPCSTKN DS    XL8                  0  AS TOKEN
DSPCALET DS    F                    8  ALET
DSPCORG  DS    F                   12  ORIGIN
*
*        DATA SPACE HEADER
*
         DS    0F
HEADER   DS    0CL32                   DATA SPACE HEADER
HDRBLKS  DS    F                       NUMBER OF BLOCKS
HDRTCB   DS    A                       TCB THAT OWNS THE DATA SPACE
HDRLRECL DS    F                       RECORD LENGTH
HDRLINES DS    F                       NUMBER OF LINES
HDRNEXTB DS    A                       NEXT AVAILABLE BYTE
HDRCOMPR DS    C                       COMPRESSION LEVEL
         DS    3X                      RESERVED
DSPCNAME DS    C'12345CUT'             NAME OF DATA SPACE
*
         DS    0D
LINE     DS    CL32767                 RECORD AREA
DYNAML   EQU   *-DYNAM
*430     IEANTASM                      NAME/TOKEN EQUATES
IEANT_HOME_LEVEL EQU 2
*        IHAPSA
PSA      DSECT
PSATOLD  EQU   *+X'021C'               A(TCB)
         YREGS
         END
//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,1)
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),BLKSIZE=3200
//*
//LKED    EXEC PGM=HEWL,PARM='MAP,RENT'
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,DELETE)
//SYSLIB   DD DISP=SHR,DSN=SYS1.CSSLIB
//SYSLMOD  DD DISP=SHR,DSN=GILBERT.LOAD(CUTPGM)
