//GILBERTV JOB (ACCT#),VSAMVIEW,
// NOTIFY=&SYSUID,
// CLASS=A,MSGCLASS=X,COND=(0,NE)
//ASMH EXEC PGM=ASMA90,PARM=(NODECK,OBJECT,NOESD,NORLD,NOXREF)
         PUNCH ' ALIAS VV'          <- "VV" IS AN ALIAS FOR "VSAMVIEW"
***********************************************************************
*                                                                     *
* MODULE NAME = VSAMVIEW                                              *
*                                                                     *
* DESCRIPTIVE NAME = VIEW A VSAM DATA SET UNDER ISPF                  *
*                                                                     *
* FUNCTION = THIS COMMAND ALLOWS YOU TO VIEW A VSAM DATA SET IN       *
*            ISPF USING EDIF.  THE SAVE COMMAND IS DISABLED, BUT      *
*            ALL OTHER EDIT FACILITIES ARE AVAILABLE (CREATE, ETC).   *
*                                                                     *
* STATUS = R100                                                       *
*                                                                     *
* AUTHOR = GILBERT SAINT-FLOUR <GSF@POBOX.COM>                        *
*                                                                     *
* NOTES = SEE BELOW                                                   *
*                                                                     *
*    DEPENDENCIES = MVS/370, MVS/XA, MVS/ESA                          *
*                   ISPF/PDF V2R3                                     *
*                                                                     *
*    AUTHORIZATION = NONE                                             *
*                                                                     *
*    RESTRICTIONS = NONE                                              *
*                                                                     *
* MODULE TYPE = PROCEDURE, (TSO COMMAND PROCESSOR)                    *
*                                                                     *
*    PROCESSOR = IBM OS/ASSEMBLER H VERSION 2 OR                      *
*                IBM HIGH LEVEL ASSEMBLER/MVS                         *
*                                                                     *
*    MODULE SIZE = 3K                                                 *
*                                                                     *
*    ATTRIBUTES = REENTERABLE, RMODE 24, AMODE 31,                    *
*                 PROBLEM STATE, KEY 8                                *
*                                                                     *
* OPERATION = SEE COMMENTS IN SOURCE CODE                             *
*                                                                     *
* SYNTAX = SEE BELOW                                                  *
*                                                                     *
*        VSAMVIEW 'DATA-SET-NAME'                                     *
*                 RECSIZE('MAX-RECORD-LENGTH')                        *
*                 SKIP('COUNT')                                       *
*                 COUNT('COUNT')                                      *
*                                                                     *
*        REQUIRED: DATA-SET-NAME                                      *
*                                                                     *
* CHANGE ACTIVITY                                                     *
*                                                                     *
*   $100 INITIAL RELEASE                                              *
*                                                                     *
***********************************************************************
VSAMVIEW CSECT
VSAMVIEW AMODE 31
         SAVE  (14,12),,'GSF UTILITIES - VSAMVIEW R100'
         LR    R11,R15
         USING VSAMVIEW,R11
         LA    R12,VSAMVIEW+4095
         USING VSAMVIEW+4095,R12
         LR    R9,R1                   SAVE CPPL ADDRESS
         USING CPPL,R9                 SET UP ADDRESSABILITY TO CPPL
         ICM   R2,B'1111',CPPL         INVOKED AS A PGM?
         BM    ALLOCATE                YES, JUMP
         LA    R3,DYNAML               LENGTH OF DYNAMIC STORAGE AREA
         GETMAIN R,LV=(R3)             ALLOCATE DYNAMIC STORAGE
         LR    R2,R1                   CLEAR DYNAMIC STORAGE
         SLR   R15,R15                 CLEAR DYNAMIC STORAGE
         MVCL  R2,R14                  CLEAR DYNAMIC STORAGE
         ST    R13,4(,R1)
         ST    R1,8(,R13)
         LM    R13,R1,8(R13)           SET R13, RELOAD R14-R1
         USING DYNAM,R13
         STM   R11,R12,BASEREGS        FOR READ ROUTINES
***********************************************************************
*                                                                     *
*        BUILD PARSE PARM LIST, CALL IKJPARS                          *
*                                                                     *
***********************************************************************
CALLPARS LA    R1,TENWORDS             POINT TO PPL
         USING PPL,R1                  SET UP ADDRESSABILITY TO PPL
         L     R0,CPPLUPT              USER PROFILE TABLE
         ST    R0,PPLUPT               STORE UPT ADDRESS IN PPL
         L     R0,CPPLECT              ENVIRONMENT CONTROL TABLE
         ST    R0,PPLECT               STORE ECT IN PPL
         LA    R0,ECB1                 EVENT CONTROL BLOCK
         ST    R0,PPLECB               STORE ECB IN PPL
         MVC   PPLPCL,=A(PCLCSECT)     STORE PCL ADDR INTO PPL
         LA    R0,DYNANSWR             ANSWER AREA
         ST    R0,PPLANS               STORE ANSWER ADDRESS IN PPL
         L     R0,CPPLCBUF             COMMAND BUFFER
         ST    R0,PPLCBUF              STORE BUFFER ADDRESS IN PPL
         LA    R14,=C'IKJPARS '        NAME OF PARSE ROUTINE
         L     R15,16                  CVTPTR
         L     R15,8(,R15)             CVTLINK
         STM   R14,R15,DWD             BUILD LINK PARMLIST
         LINK  SF=(E,DWD)              CALL THE PARSE ROUTINE
         LTR   R7,R15                  CHECK FOR ZERO PARSE RETURN
         BNZ   QUIT16                  GO AWAY UPSET
         DROP  R1,R9                   PPL, CPPL
***********************************************************************
*                                                                     *
*        PROCESS PARSED PARAMETERS                                    *
*                                                                     *
***********************************************************************
PARSE100 L     R2,DYNANSWR             LOAD PDL ADDRESS
         USING IKJPARMD,R2             SET UP ADDRESSABILITY TO PDL
         LA    R14,DSNAME              44-BYTE AREA
         LA    R15,L'DSNAME            GET LENGTH
         L     R0,DSNPCE               GET ADDRESS
         LH    R1,DSNPCE+4             ACTUAL LENGTH OF DSN
         ICM   R1,B'1000',=C' '        PADDING
         MVCL  R14,R0                  MOVE DATA SET NAME
*TPUT DSNAME,L'DSNAME
PARSE180 LA    R1,RECSZIDL             LOAD POINTER TO RECSZ FIELD
         BAL   R14,PACKCVB             CONVERT PARAMETER
         ST    R0,RECSIZE              STORE RECORD SIZE
         LA    R1,SKIPIDL              LOAD POINTER TO SKIP FIELD
         BAL   R14,PACKCVB             CONVERT PARAMETER
         ST    R0,RECSKIP              STORE SKIP COUNT
         LA    R1,COUNTIDL             LOAD POINTER TO COUNT FIELD
         BAL   R14,PACKCVB             CONVERT PARAMETER
         AL    R0,RECSKIP              ADD SKIP COUNT
         ST    R0,RECCOUNT             STORE UPPER LIMIT
*
*        FREE-UP STORAGE ACQUIRED BY PARSE
*
         IKJRLSA DYNANSWR              FREE PDL
*
*        BUMP MY USE COUNT TO PREVENT S0C4 ON $SELECT
*
         L     R1,X'021C'              PSATOLD (MY TCB)
         L     R1,0(,R1)               TCBRBP (MY PRB)
         ICM   R1,B'0111',X'00D'(R1)   RBCDE1 (MY CDE)
         MVC   OWNNAME,CDNAME-CDENTRY(R1) MOVE OWN NAME
         LOAD  EPLOC=OWNNAME           BUMP CDUSE
*
*        RE-INVOKE MYSELF AS A PGM AND PASS THE ADDR OF THE DYNAMIC
*        STORAGE AREA IN THE PARM.
*
         STRING 'PGM(',(OWNNAME,,T),') PARM(',((R13),,R8Z),')',        X
               INTO=MESSAGE
         ST    R15,DWD                 LENGTH
         LA    R14,$SELECT             SERVICE
         LA    R15,DWD                 LENGTH
         LA    R0,MESSAGE              PARAMETERS
         STM   R14,R1,TENWORDS         PARM LIST
         OI    TENWORDS+8,X'80'        PARM LIST
         LA    R1,TENWORDS             PARM LIST
         L     R13,4(,R13)             CALLER'S SAVE AREA
         XCTL  (2,12),EPLOC=$ISPLINK
*---------------------------------------------------------------------*
*        PACKCVB SUB-ROUTINE                                          *
*---------------------------------------------------------------------*
PACKCVB  LH    R15,4(,R1)              LOAD LENGTH
         LTR   R0,R15                  THIS PARM SPECIFIED?
         BZR   R14                     NO, GOBACK WITH R0=0
         L     R1,0(,R1)               LOAD ADDRESS
         BCTR  R15,0                   DECREMENT R15 FOR EXECUTE
         EX    R15,PACKCVBX            PACK VALUE
         CVB   R0,DWD                  CONVERT ZONED TO BINARY
         BR    R14
PACKCVBX PACK  DWD,0(,R1)              *EXECUTED*
*---------------------------------------------------------------------*
         MACRO                                                    MACRO
&NAME    ISPLINK &OPRNDS,&ERRET=                                  MACRO
         GBLB  &IHBSWA                                            MACRO
&IHBSWA  SETB  1                       VL=1                       MACRO
&NAME    LA    R1,TENWORDS             PARM LIST                  MACRO
         IHBOPLST ,&OPRNDS,MF=(E,(1))                             MACRO
         L     R15,ISPLINK@            ISPLINK BOOTSTRAP
         BALR  R14,R15                 INVOKE ISPLINK
         AIF   (T'&ERRET EQ 'O').MEND                             MACRO
         LTR   R15,R15                 ANY ERROR?
         BNZ   &ERRET                  YES, JUMP
.MEND    MEND                                                     MACRO
***********************************************************************
*                                                                     *
*        ALLOCATE THE DATA SET                                        *
*                                                                     *
***********************************************************************
ALLOCATE PACK  16(8,R13),2(8,R2)       PACK THE PARM
         CVB   R1,16(,R13)             GET IT IN BINARY
         ST    R13,4(,R1)
         ST    R1,8(,R13)
         LM    R13,R1,8(R13)           SET R13, RELOAD R14-R1
         USING DYNAM,R13
*---------------------------------------------------------------------*
*        ISPEXEC CONTROL ERRORS RETURN                                *
*---------------------------------------------------------------------*
         LOAD  EPLOC=$ISPLINK
         ST    R0,ISPLINK@             SAVE ISPLINK ADDRESS
         LA    R1,=A($CONTROL,$ERRORS,$RETURN+X'80000000')
         L     R15,ISPLINK@
         BALR  R14,R15                 CONTROL ERRORS RETURN
         LTR   R15,R15
         BNZ   QUIT16                  ISPF NOT ACTIVE
*---------------------------------------------------------------------*
*                                                                     *
*        ALLOCATE THE DATA SET                                        *
*                                                                     *
*---------------------------------------------------------------------*
         MVC   S99RB,=X'14,01,2000'    SVC 99 REQUEST BLOCK
         LA    R1,S99TUPTR             TEXT UNIT POINTERS
         ST    R1,S99RB+8              TEXT UNIT POINTERS
*
         LA    R14,S99T1                   RETURN DDNAME
         MVC   S99T1(6),=X'0055,0001,0008' RETURN DDNAME
         LA    R15,S99T2                   DSNAME
         MVC   S99T2(6),=X'0002,0001,002C' DSNAME
         LA    R0,=X'0004,0001,0001,08'    DISP=SHR
         LA    R1,=X'001C,0000'            FREE=CLOSE
         STM   R14,R1,S99TUPTR             TEXT-UNIT POINTERS
         OI    S99TUPTR+12,X'80'           END OF LIST
*
         LA    R1,S99RB                BUILD SVC99 PARM LIST
         ST    R1,S99RBPTR             BUILD SVC99 PARM LIST
         OI    S99RBPTR,X'80'          BUILD SVC99 PARM LIST
         LA    R1,S99RBPTR
         DYNALLOC ,                    ALLOCATE THE DATA SET
         LTR   R15,R15
 NOP 0   BNZ   ALLOC900                SVC99 FAILED, JUMP
*---------------------------------------------------------------------*
*                                                                     *
*        INITIALIZE VSAM CONTROL BLOCKS (ACB, RPL)                    *
*                                                                     *
*---------------------------------------------------------------------*
         MVC   IFGACB(ACB1_L),ACB1_M   MOVE ACB,RPL
         MVC   ACBDDNM,DDNAME          MOVE DDNAME
         LA    R2,IFGACB               POINT TO ACB
         ST    R2,OPENLIST             BUILD OPEN LIST
         MVI   OPENLIST,X'80'          BUILD OPEN LIST
         OPEN  MF=(E,OPENLIST)         OPEN VSAM DATA SET
         CH    R15,=H'4'               OPEN OK?
         BH    OPENR160                NO, QUIT
*
         SHOWCB ACB=(R2),AREA=(S,MAXRECNO),LENGTH=12,                  X
               FIELDS=(NLOGR,LRECL),MF=(G,MESSAGE)
         ICM   R0,B'1111',MAXLRECL     LRECL=0 (LDS)
         BZ    OPENR160                YES, JUMP
*
         ICM   R0,B'1111',MAXRECNO     EMPTY/OPEN ?
         BNZ   OPENVS4                 NO, JUMP
         MVI   MAXRECNO,X'7F'          YES, SET MAX NUMBER
         ICM   R0,B'1111',RECCOUNT     COUNT SPECIFIED?
         BZ    OPENVS4                 NO, JUMP
         ST    R0,MAXRECNO             YES, USE COUNT
OPENVS4  EQU   *
*
*        SET UP RPL FOR ESDS/KSDS
*
         MVC   IFGRPL(RPL1_L),RPL1_M   MOVE ACB,RPL
*TPUT =C'ST R2,RPLDACB',13
         ST    R2,RPLDACB              STORE ACB ADDRESS INTO RPL
         LA    R0,RECAD                THE RIGHT WORD
         ST    R0,RPLAREA              STORE AREA ADDRESS INTO RPL
         LA    R0,L'RECAD              ADDRESS
         ST    R0,RPLBUFL              STORE AREA LENGTH INTO RPL
*
         TESTCB ACB=(R2),ATRB=KSDS,MF=(G,MESSAGE) IS THIS A KSDS?
         BE    OPENKSDS                YES, JUMP
         TESTCB ACB=(R2),ATRB=RRDS,MF=(G,MESSAGE) IS THIS AN RRDS?
         BE    OPENRRDS                YES, JUMP
         TESTCB ACB=(R2),ATRB=ESDS,MF=(G,MESSAGE) IS THIS AN ESDS?
         BNE   OPENR160                UNSUPPORTED TYPE
*
OPENESDS MVI   VS_TYPE,C'E'            CLUSTER IS AN ESDS
         B     OPENVS6
*
OPENKSDS MVI   VS_TYPE,C'K'            CLUSTER IS A KSDS
         B     OPENVS6
*
OPENRRDS MVI   VS_TYPE,C'R'            CLUSTER IS AN RRDS
         LA    R0,CURRECNO             RECORD NUMBER
         ST    R0,RPLARG               RECORD NUMBER
         OI    RPLOPT1,RPLDIR          OPTCD=(DIR,KEY)
*
OPENVS6  EQU   *
         LOAD  EP=ISRCONFG             PDF CONFIG TABLE
         LR    R1,R0                   ENTRY ADDRESS
         L     R2,X'190'(,R1)          UNDOSIZE (IN K)
         SLL   R2,10                   UNDOSIZE (IN BYTES)
         ST    R2,UNDOSIZE             ADD SIZE OF UNDO BUFFER
*
         ICM   R0,B'1111',RECSIZE      RECSIZE PARM SPECIFIED?
         BNZ   *+10                    NO, EXIT
         MVC   RECSIZE,MAXLRECL        USE CALLER'S RECORD SIZE
*
         B     EDIF
*
*        VSAM OPEN ERROR
*
OPENR160 CLI   ACBERFLG,160            EMPTY DATA SET?
         BNE   QUIT16                  NO, QUIT
         MVC   ZERRMSG,=C'ISRB603 '    "NO DATA TO BROWSE"
         LA    R7,4                    RC=4
         B     SETMSG8                 ISSUE MESSAGE
***********************************************************************
*
*        INVOKE ISPF/PDF EDIF SERVICE
*
***********************************************************************
EDIF     LA    R0,SAVERRTN             DDATA FOR EDIF
         ST    R0,SAVERRTN             DDATA FOR EDIF
*
         ISPLINK (=C'EDIF',            SERVICE                         X
               DSNAME,                 DATA SET NAME                   X
               =C'VSAMVIEW',           PROFILE NAME                    X
               =C'V ',                 RECFM                           X
               RECSIZE,                RECORD LENGTH                   X
               =A(READRTNE),           READ ROUTINE                    X
               =A(WRITERTN),           WRITE ROUTINE                   X
               0,                      COMMAND EXIT                    X
               SAVERRTN)               DIALOG DATA ADDR
         LR    R7,R15                  SAVE RETURN CODE FROM EDIF
***********************************************************************
*
*        PROGRAM EXIT
*
*           1. ISSUE ERROR MESSAGE
*           2. CLEAN UP
*           3. GOBACK TO CALLER
*
***********************************************************************
SETMSG   LTR   R7,R7                   CHECK RC FROM EDIF
         BZ    QUIT50                  OK, EXIT
         LA    R0,L'ZERRMSG
         ST    R0,DWD
         ISPLINK (=C'VCOPY ',=C'ZERRMSG ',DWD,ZERRMSG,=C'MOVE ')
         LTR   R15,R15                 CHECK RC
         BNZ   QUIT50                  BAD, EXIT
SETMSG8  ISPLINK (=C'SETMSG ',ZERRMSG)
         B     QUIT50
*
QUIT16   LA    R7,16                   RC=16
*---------------------------------------------------------------------*
*
*        FREE WORK AREA AND GOBACK TO ISPF
*
*---------------------------------------------------------------------*
QUIT50   TM    OPENLIST,X'80'          OPEN LIST OK?
         BZ    QUIT53                  NO, JUMP
         CLOSE MF=(E,OPENLIST)         CLOSE ACB/DCB
*
QUIT53   TM    S99RBPTR,X'80'          SVC 99 REQ BLK OK?
         BNO   QUIT90                  NO, JUMP
         MVI   S99RB+1,2               VERB=FREE
         OI    S99TUPTR,X'80'          ONLY 1 T.U.
         MVI   S99T1+1,1               X'55' -> X'01'
         LA    R1,S99RBPTR
         DYNALLOC ,                    FREE THE DATA SET
*
QUIT90   LR    R15,R7                  RETURN CODE
         L     R13,4(,R13)
         RETURN (14,12),RC=(15)
***********************************************************************
*
*        VSAM READ ROUTINE
*
***********************************************************************
READRTNE SAVE  (14,12),,'VSAMVIEW READ ROUTINE'
         LM    R4,R7,0(R1)             INPUT PARMS
         L     R7,0(,R7)               A(SAVERRTN)
         ST    R13,4(,R7)              CHAIN SAVE AREA
         ST    R7,8(,R13)              CHAIN SAVE AREA
         LR    R13,R7                  NEW SAVE AREA
         USING SAVERRTN,R13
         LM    R11,R12,BASEREGS        BASE REGISTERS
*LOOP
READVS10 EQU   *
         LA    R3,1                    RECORD NUMBER
         AL    R3,CURRECNO             RECORD NUMBER
         ST    R3,CURRECNO             RECORD NUMBER
         C     R3,MAXRECNO             BEYOND END OF FILE?
         BH    READVS80                YES, EXIT
*
         ICM   R0,B'1111',RECCOUNT     COUNT SPECIFIED?
         BZ    READVS12                NO, JUMP
         CLR   R0,R3                   USER LIMIT REACHED?
         BL    READVS80                YES, QUIT
READVS12 EQU   *
*
         SLR   R0,R0
         LR    R1,R3                   RECORD NUMBER
         D     R0,=F'1000'             DIVIDE BY SIZE OF A SEGMENT
         LTR   R0,R0                   START OF A NEW SEGMENT?
         BNZ   READVS20                NO, JUMP
         LA    R1,32                   LENGTH OF EDIF HEADER
         AL    R1,RECSIZE              ADD RECORD LENGTH
         M     R0,=F'1000'             CALCULATE SIZE OF A SEGMENT
         AL    R1,=F'100000'           ADD ANOTHER 100K TO BE SAFE
         AL    R1,UNDOSIZE             ADD SIZE OF UNDO BUFFER
         GETMAIN RC,LV=(R1),LOC=ANY    ALLOC ROOM FOR 1000 RECORDS
         LTR   R15,R15                 ENOUGH STORAGE LEFT?
         BZ    READVS17                YES, JUMP
         LR    R2,R0                   CUSHION SIZE IN BYTES
         SRL   R2,10                   CUSHION SIZE IN K
*
         STRING 'INSUFFICIENT STORAGE',INTO=MESSAGE
         ST    R15,DWD                 LENGTH OF SHORT MESSAGE
         ISPLINK (=C'VREPLACE',=C'ZEDSMSG ',DWD,MESSAGE)
         STRING 'TOTAL RECORDS: ',(MAXRECNO,F,L),                      X
               ' RECORDS PROCESSED: ',((R3),,L),                       X
               ' CUSHION: ',((R2),,L),'K',                             X
               INTO=MESSAGE
         ST    R15,DWD                 LENGTH OF LONG MESSAGE
         ISPLINK (=C'VREPLACE',=C'ZEDLMSG ',DWD,MESSAGE)
         ISPLINK (=C'SETMSG ',=C'ISRZ001 ')
*
         ST    R3,MAXRECNO             NO, TRUNCATE DATA SET
         L     R0,RECSIZE              RECORD LENGTH
         LA    R2,MESSAGE              POINT TO MESSAGE AREA
         STRING '++++++ DATA TRUNCATED ++++++',INTO=((R2),(R0))
         B     READVS77                PASS MESSAGE TO EDIF
*
READVS17 FREEMAIN RC,LV=(0),A=(1)      FREE UP THE CUSHION
*
READVS20 GET   RPL=IFGRPL              GET NEXT RECORD
         LTR   R15,R15                 OK?
         BZ    READVS70                YES, JUMP
*
*        ACTUAL END OF DATA (SHOULD ONLY OCCUR WHEN SHOWCB
*        RETURNED MAXRECNO=0)
*
         CLI   RPLRTNCD,X'08'          IS THIS A LOGICAL ERROR?
         BNE   READVS90                NO, QUIT
         CLI   RPLFDB3,X'04'           END OF DATA?
         BE    READVS80                YES, EXIT
*
*        THE FIRST TIME A SPANNED RECORD IS READ (FDBK=X'84'),
*        SWITCH IFGRPL FROM OPTCD=LOC TO OPTCD=MVE.
*        FROM THAT POINT ON, ALL GETS WILL BE MOVE MODE.
*        NOTE THAT A CLUSTER DEFINED WITH THE SPANNED ATTRIBUTE
*        DOES NOT NECESSARILY CONTAIN SPANNED RECORDS (IE RECORDS
*        MADE UP OF MORE THAN ONE SEGMENT).
*
READVS34 CLI   RPLFDB3,X'48'           OPTCD=KEY WITH DATA COMPONENT?
         BE    READVS35                YES, JUMP
*
         CLI   RPLFDB3,X'84'           OPTCD=LOC WITH SPANNED RECORDS?
         BNE   READVS90                NO, ERROR
*
         NI    RPLOPT1,255-RPLLOC      OPTCD=MVE
         L     R0,MAXLRECL             MAX RECORD SIZE
         GETMAIN RU,LV=(0),LOC=ANY     ALLOC BUFFER FOR SPANNED RECORDS
         ST    R0,RPLBUFL              AREALEN=MAXLRECL
         ST    R1,RPLAREA              STORE AREA ADDRESS INTO RPL
         B     READVS40
*
READVS35 MVI   VS_TYPE,C'E'            CLUSTER IS AN ESDS
         MVI   RPLOPT2,RPLADR          OPTCD=ADR
*
*        RE-READ A RECORD AFTER X'48' OR X'84'
*
READVS40 EQU   *
         GET   RPL=IFGRPL              RE-READ RECORD AFTER 48 OR 84
         LTR   R15,R15                 OK?
         BNZ   READVS90                NO, QUIT
*
*        RETURN RECORD JUST READ TO EDIF
*
READVS70 CL    R3,RECSKIP              SHOULD I SKIP THIS RECORD?
*STRING ((R3)),(RECSKIP,F),INTO=MESSAGE
*TPUT MESSAGE,44
*CL R3,RECSKIP
         BNH   READVS10                YES, READ ANOTHER
*ENDLOOP
         L     R0,RPLRLEN              PICK UP RECORD LENGTH
         L     R2,RPLAREA              NO, GET RECORD ADDR (OPTCD=MVE)
         TM    RPLOPTCD,RPLLOC         OPTCD=MVE?
         BZ    READVS77                YES, JUMP
         L     R2,0(,R2)               GET RECORD ADDR (OPTCD=LOC)
*
READVS77 ST    R2,0(,R4)               PASS RECORD ADDRESS TO EDIF
         ST    R0,0(,R5)               PASS RECORD LENGTH TO EDIF
         L     R13,4(,R13)
         RETURN (14,12),RC=00
*
*        RECORD NUMBER TOO HIGH, RETURN NUMBER OF HIGHEST RCD TO EDIF
*
READVS80 MVC   0(4,R6),MAXRECNO        RETURN MAX RECORD NUMBER
         TM    RPLOPT1,RPLLOC          OPTCD=LOC
         BO    READVS81                YES, JUMP
         L     R0,RPLBUFL              R0=AREALEN
         FREEMAIN RU,LV=(0),A=RPLAREA  FREE MOVE MODE BUFFER
READVS81 CLOSE MF=(E,OPENLIST)         CLOSE THE ACB
         L     R13,4(,R13)
         RETURN (14,12),RC=8
*
*        ERROR IN GET MACRO, SHOW FEEDBACK CODE
*
READVS90 STRING '** ERROR ** RPLFDBWD=',(RPLFDBWD,,X),                 X
               ' REQ=',(RPLREQ,,X),' OPTCD=',(RPLOPTCD,2,X),           X
               ' RRN=',((R3),,L),' MAXRECNO=',(MAXRECNO,F,L),          X
               INTO=MESSAGE
         ST    R3,0(,R6)               END OF FILE
         ST    R3,MAXRECNO             END OF FILE
         LA    R15,008                 RC=8 (EOF)
.@TEST2 SR 15,15
*
*        RETURN ERROR MESSAGE TO EDIF
*
READVS95 LA    R0,MESSAGE              MESSAGE
         ST    R0,0(,R4)               PASS ADDRESS
         LA    R0,L'MESSAGE            LENGTH
         ST    R0,0(,R5)               PASS LENGTH
         L     R13,4(,R13)
         RETURN (14,12),RC=(15)
*---------------------------------------------------------------------*
*        DUMMY WRITE ROUTINE                                          *
*---------------------------------------------------------------------*
WRITERTN SAVE  (14,12),,WRITERTN
         RETURN (14,12),RC=16
*---------------------------------------------------------------------*
*        CONSTANTS
*---------------------------------------------------------------------*
$ISPLINK DC    C'ISPLINK '             ISPF COMMAND INTERFACE
$SELECT  DC    C'SELECT'               SERVICE
$CONTROL DC    C'CONTROL'              FUNCTION
$ERRORS  DC    C'ERRORS'               OPTION
$RETURN  DC    C'RETURN'               OPTION
         PRINT NOGEN
ACB1_M   ACB   MACRF=SEQ,RMODE31=ALL,BUFSP=200000
ACB1_L   EQU   *-ACB1_M
RPL1_M   RPL   ACB=*-*,OPTCD=(SEQ,LOC),AREA=*-*,AREALEN=4
RPL1_L   EQU   *-RPL1_M
***********************************************************************
*                                                                     *
*        DYNAMIC STORAGE           <-- R13                            *
*                                                                     *
***********************************************************************
DYNAM    DSECT
         DS    18F                     SAVE AREA (MAIN LINE)
SAVERRTN DS    18F                     SAVE AREA (READ ROUTINE)
BASEREGS DS    A(VSAMVIEW,VSAMVIEW+4095)
TENWORDS DS    10F
DWD      DS    D
OWNNAME  DS    CL8                     MY OWN NAME
ZERRMSG  DS    C'12345678'             ERROR MESSAGE
RECSIZE  DS    F                       INVOCATION PARAMETER
RECSKIP  DS    F                       INVOCATION PARAMETER
RECCOUNT DS    F                       INVOCATION PARAMETER
ISPLINK@ DS    V(ISPLINK)              ISPF INTERFACE
UNDOSIZE DS    F                       STORAGE FOR SETUNDO STG
DYNANSWR DS    F                       PARSE
ECB1     DS    F                       PARSE
VS_TYPE  DS    C'K'                    VSAM TYPE: K E R
OPENLIST OPEN  IFGACB,MF=L
         IFGACB DSECT=NO
         IFGRPL DSECT=NO
RECAD    DS    A                       RECORD ADDRESS
CURRECNO DS    F'12345678'             CURRENT RECORD NUMBER
SPANBUFF DS    F,A                     VBS BUFFER
*
MAXRECNO DS    F'12345678'          +0 MAX RECORD NUMBER
MAXLRECL DS    F'32760'             +4 MAX LRECL
*
S99RBPTR DS    A(S99RB+X'80000000')
S99RB    DS    A(X'14012000',0,S99TUPTR,0,0)
S99TUPTR DS    4A
S99T1    DS    X'0055,0001',AL2(L'DDNAME)   RETURN DDNAME
DDNAME   DS    CL8       '
S99T2    DS    X'0002,0001',AL2(L'DSNAME)   DSNAME
DSNAME   DS    CL44,C                       DATA SET NAME
*
MESSAGE  DS    CL120
DYNAML   EQU   *-DYNAM
         STRING GENERATE
***********************************************************************
*                                                                     *
*        DEFINE INPUT PARAMETERS FOR IKJPARS                          *
*                                                                     *
***********************************************************************
PCLCSECT IKJPARM
DSNPCE   IKJPOSIT DSNAME,LIST,USID,PROMPT='DATA SET NAME',             X
               HELP='NAME OF THE VSAM DATA SET TO BE EDITED'
RECSZPCE IKJKEYWD
         IKJNAME 'RECSIZE',SUBFLD=RECSZPCL
SKIPPCE  IKJKEYWD
         IKJNAME 'SKIP',SUBFLD=SKIPPCL
COUNTPCE IKJKEYWD
         IKJNAME 'COUNT',SUBFLD=COUNTPCL
*SUB-FIELDS
RECSZPCL IKJSUBF
RECSZIDL IKJIDENT 'NUMBER',MAXLNTH=5,FIRST=NUMERIC,OTHER=NUMERIC,      X
               PROMPT='RECORD SIZE',                                   X
               HELP='RECORD SIZE FOR EDIT'
SKIPPCL IKJSUBF
SKIPIDL IKJIDENT 'NUMBER',MAXLNTH=8,FIRST=NUMERIC,OTHER=NUMERIC,       X
               PROMPT='RECORD SKIP',                                   X
               HELP='NUMBER OF RECORDS TO SKIP'
COUNTPCL IKJSUBF
COUNTIDL IKJIDENT 'NUMBER',MAXLNTH=8,FIRST=NUMERIC,OTHER=NUMERIC,      X
               PROMPT='RECORD COUNT',                                  X
               HELP='NUMBER OF RECORDS TO EDIT'
         IKJENDP
*
         IKJCPPL                       COMMAND BUFFER PARM LIST
         IKJPPL                        PARSE PARM LIST (IKJPARS)
         YREGS
         IHACDE
         END
//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB            DIV
//         DD DISP=SHR,DSN=SYS1.MODGEN            OBTAIN/IECSDSL1
//         DD DISP=SHR,DSN=GILBERT.FILE183.PDS    STRING
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200
//*-------------------------------------------------------------------
//LKED    EXEC PGM=HEWL,PARM='LIST,MAP,RENT'
//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,PASS)
//SYSLMOD  DD DISP=SHR,DSN=GILBERT.LOAD(VSAMVIEW)
//SYSPRINT DD SYSOUT=*
