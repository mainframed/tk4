//ASSEM   EXEC  ASMHCL,
//        PARM.C='OBJECT,XREF(SHORT),TERM,SYSPARM(ESA)'  OR '(XA)'
//C.SYSLIB  DD  DSN=SYS1.MACLIB,DISP=SHR,DCB=BLKSIZE=32000
//          DD  DSN=SYS1.MODGEN,DISP=SHR
//SYSIN     DD   *
 COPY $DOC
 TITLE '>>> LSPACE: OBTAIN SYSRES DEVICE CHARATERISTICS AND FREE SPACE +
               &SYSDATE._&SYSTIME <<<'
*---------------------------------------------------------------------*
*                                                                     *
* MODULE NAME   LSPACE                                                *
*                                                                     *
* CSECT  NAME   LSPACE                                                *
*                                                                     *
* DESCRIPTIVE NAME   LSPACE SVC ROUTINE EXPLORED                      *
*                                                                     *
* FUNCTION                                                            *
*                                                                     *
*  THIS ROUTINE IS AN EXAMPLE OF HOW TO IMPLEMENT THE NEWLY SUPPORTED *
*  LSPACE SVC. IT PERFORMS THE FOLLOWING FUNCTIONS:                   *
*                                                                     *
*   1). OBTAINS UNITNAME, VOLSER, AND FREE SPACE INFORMATION FROM     *
*       THE SYSRES UNIT ADDRESS.                                      *
*                                                                     *
*   2). CONDITIONALLY PRESENTS THE RESULTS TO THE TERMINAL OR         *
*       TO DDNAME SYSPRINT                                            *
*                                                                     *
* OPERATION   LSPACE  PERFORMS THE FOLLOWING FUNCTION:                *
*                                                                     *
*    0   IDENTIFIES OPERATING ENVIRONMENT VIA 'SYSPARM' OF ASSEMBLER. *
*        EITHER 'SYSPARM(XA)' OR 'SYSPARM(ESA)' FOR CONDITIONAL       *
*        ASSEMBLY.                                                    *
*                                                                     *
*          'SYSPARM(XA)' USES THE STANDARD 'SAVE' AND 'RETURN'*       *
*           MACROS AND THE GETMAIN/FREEMAIN SVC'S.                    *
*                                                                     *
*          'SYSPARM(ESA)' USES THE THE BAKR/PR ESA STACK AND THE      *
*           STORAGE MACRO FOR OBTAINING A SAVE AREA.                  *
*                                                                     *
*    1   SETUP BASE REG (R12)                                         *
*    2   OBATINS STORAGE FOR SAVE AREA VIA (GETMAIN/STORAGE)          *
*    3   LOCATES CVT AND DETERMINES IF USER IS IN FOREGROUND: SETS FLG*
*    5   OBTAINS SYSRES UCB FROM CVTSYSAD                             *
*    6   ISSUES LSPACE MACRO (SVC 78)                                 *
*    7   TESTS RETURN CODE FROM LSPACE                                *
*    8   PRESENTS RESULTS TO TERMINAL/FILE, IF GOOD RETURN CODE       *
*    9   DOES A FREEMAIN/(STORAGE RELEASE) OF STORAGE: SAVE AREA      *
*   10   LOADS REGISTER 14 WITH RETURN ADDRESS                        *
*   11   SETS THE RETURN CODE IN REGISTER 15                          *
*   12   LOADS REGISTERS R0   R12 WITH CALLER'S ENTRY CONTENTS        *
*   13   RETURNS TO CALLER                                            *
*                                                                     *
* RECOVERY OPERATION                                                  *
*                                                                     *
*          NONE.                                                      *
*                                                                     *
* NOTES                                                               *
*                                                                     *
*                                                                     *
* DEPENDENCIES   MVS/XA AND DFP/XA 2.2 AND ABOVE,                     *
*                ASSEMBLER H V2 AND ABOVE                             *
*                                                                     *
*                                                                     *
 EJECT
*                                                                     *
* RESTRICTIONS   NONE.                                                *
*                                                                     *
* ERROR MESSAGES   NONE                                               *
*                                                                     *
* ABEND CODES   NONE                                                  *
*                                                                     *
* ERROR CONDITIONS   NONE                                             *
*                                                                     *
* LINKAGES: NONE.                                                     *
*                                                                     *
* MODULE(S) CALLED: NONE                                              *
*                                                                     *
* ENTRY POINT   LSPACE                                                *
*                                                                     *
* EXIT CONDITIONS                                                     *
*                                                                     *
*        NONE.                                                        *
*                                                                     *
* REFERENCES                                                          *
*                                                                     *
*        ROUTINES     NONE                                            *
*                                                                     *
*        DATA AREAS   NONE                                            *
*                                                                     *
*            MACROS   CVT, IEFUCBOB, OPEN, CLOSE, PUT, TPUT,          *
*                     LSPACE, SAVE, RETURN, TIME             (IBM)    *
*                     MODE                                  (LOCAL)   *
*                                                                     *
*            DSECTS   CVT, UCB, LSPACE                                *
*                                                                     *
*        TABLES       NONE                                            *
*                                                                     *
* GLOBALS:                                                            *
*                                                                     *
*       PASSED VIA 'SYSPARM' IN ASSEMBLER FOR MVS/SP V3, 'ESA', OR    *
*       FOR MVS/SP V2, 'XA'                                           *
*                                                                     *
*                                                                     *
* MODULE ATTRIBUTES                                                   *
*                     AMODE(31)                                       *
*                     RMODE(24),                                      *
*                     UNAUTHORIZED                                    *
*                                                                     *
* INPUT   NONE.                                                       *
* OUTPUT   TPUT, IF TSO                                               *
*          SYSPRINT FILE, VIA QSAM PUTS, IF BATCH                     *
*                                                                     *
* CHANGE ACTIVITY:  NONE.                                             *
*                                                                     *
*                                                                     *
              EJECT
              MACRO
&NAME         MODE &TYPE,&REG=14
.*                                                                    *
.* FUNCTION: MACRO TO SWITCH MODES: EITHER AMODE 24 OR AMODE 31       *
.*     VARS: TYPE      EITHER 'ABOVE' OR 'BELOW', OR '24' OR '31'     *
.*     REGS: R14                                                      *
.*                                                                    *
&NAME         CNOP  2,4                     * FORCE FULL WORD ALIGNMENT
              AIF   ('&TYPE' EQ 'BELOW').BELOW
              AIF   ('&TYPE' EQ 'ABOVE').ABOVE
              AIF   ('&TYPE' EQ '24').BELOW
              AIF   ('&TYPE' EQ '31').ABOVE
              MNOTE 08,'INVALID TYPE SPECIFIED: &TYPE.'
              MNOTE 08,'... EITHER ABOVE OR BELOW'
              AGO   .MEND
.BELOW        LA    &REG,*+6                * POINT TO AMODE = 24 CODE
              BSM   0,&REG                  * BRANCH TO AMODE = 24 CODE
              AGO   .MEND
.ABOVE        LA    &REG,*+14               * POINT TO AMODE = 31 CODE
              O     &REG,*+6                * TURN ON AMODE = 31 BIT
              BSM   0,&REG                  * BRANCH TO AMODE = 31 CODE
              DC    X'80000000'             * AMODE = 31 BIT
.MEND         MEND
              PRINT    NOGEN
 TITLE '>>> CVT      <<<'
              CVT      PREFIX=NO,LIST=NO,DSECT=YES
 TITLE '>>> UCB      <<<'
              IEFUCBOB PREFIX=YES,LIST=NO,DEVCLAS=DA
 TITLE '>>> PSA      <<<'
              IHAPSA
 TITLE '>>> ASCB     <<<'
              IHAASCB
              PRINT    GEN
 TITLE '>>> LSPACE CALL AND RETURN DATA DSECTS <<<'
LSPACE_DATA_DSECT  LSPACE   MF=(D,DATA)
              SPACE
LSPACE_CALL_DSECT  LSPACE   MF=D
              SPACE
 TITLE '>>> LSPACE: OBTAIN SYSRES DEVICE CHARATERISTICS AND FREE SPACE +
               &SYSDATE._&SYSTIME <<<'
LSPACE        AMODE    31                   * ADDRESS EVERY THING
LSPACE        RMODE    24                   * ALLOW FOR TPUTS/PUTS
LSPACE        CSECT
              AIF      ('&SYSPARM' NE 'ESA').NESA1     SYSPARM(ESA) ??
              BAKR     R14,0                * LOAD ESA STAX
.NESA1        LR       R12,R15              * SETUP BASE
             USING     LSPACE,R12
              BSM      R14,0                * SAVE MODE
              AIF      ('&SYSPARM' EQ 'ESA').ESA1      SYSPARM(ESA) ??
              SAVE     (14,12),,,'LSPACE_&SYSDATE._&SYSTIME'
GET_STOR      GETMAIN  RU,LV=STOR_LEN,LOC=RES
              ST       R1,STORADDR          * SAVE FOR LATER
              XC       0(STOR_LEN,R1),0(R1) * CLEAR STORAGE
              ST       R13,4(,R1)           * SAVE FORWARD
              ST       R1,8(,R1)            * BACKWARDS
              LR       R13,R1               * POINT TO 18F WORDS
              AGO      .START               .* SKIP ESA STUFF
.ESA1         ANOP
              B        GET_STOR             * SKIP OVER CONSTANTS
              DC       C'LSPACE_&SYSDATE._&SYSTIME'
GET_STOR      STORAGE  OBTAIN,              * GET STOR FOR SAVE AREA   +
               LENGTH=STOR_LEN,LOC=RES
              ST       R1,STORADDR          * SAVE FOR LATER
              LR       R13,R1               * POINT R13 TO SAVE AREA   +
                                              EVEN THOUGH WE DON'T USE +
                                              IT SOMEONE ELSE MIGHT.
              XC       0(STOR_LEN,R13),0(R13) CLEAR STORAGE
              ST       R13,4(,R1)           * SAVE FORWARD
              ST       R1,8(,R1)            * BACKWARDS
              LR       R13,R1               * POINT TO 18F WORDS
              MVC      4(4,R1),=C'F1SA'     * REQUIREMENT
.START        ANOP
              EJECT
              MVC      UCB_RECORD,BLANKS    * CLEAR OUTPUT RECORD
              SPACE
** LET'S GET TO DAYS DATE DEPENDING ON MVS RELEASE
              L        R1,CVTPTR            * GET CVT POINTER
              AIF      ('&SYSPARM' NE 'ESA').NESA1A
              TM       CVTDCB-CVT(R1),X'08' * CVTOSLVL?
              BNO      NOT_ESA4             * WE ARN'T ESA ANY VERSION
              TM       CVTOSLVL-CVT(R1),X'08' .ESA V4.1 OR ABOVE ?
              BNO      NOT_ESA4             * NOPE
              TIME     DEC,TIME_DATE,                                  +
               ZONE=LT,DATETYPE=MMDDYYYY,LINKAGE=SYSTEM
              MVC      WORK(30),BLANKS
              MVC      WORK(11),=XL11'4021206120206120202020'
              ED       WORK(11),TIME_DATE+8
              CLI      WORK+01,C' '
              BNE      *+08
              MVI      WORK+01,C'0'
              MVC      WORK+12(08),=XL08'21207A20207A2020'
              ED       WORK+11(09),TIME_DATE+00
              MVC      WORK+30(10+9),WORK+1
              MVC      WORK(20),WORK+30
              MVC      TIME_DATE(20),WORK
              B        PAST_TIME
NOT_ESA4      DS       0H
.NESA1A       ANOP
              TIME     DEC
              STM      R0,R1,DWORD
              MVC      WORK(07),=XL07'4021204B202020'
              ED       WORK(07),DWORD+05
              MVC      TIME_DATE(6),WORK+01
              MVC      WORK(09),=XL9'4021207A20207A2020'
              ED       WORK(09),DWORD+00
              MVC      TIME_DATE+7(8),WORK+01
PAST_TIME     DS       0H
              L        R1,CVTPTR            * GET CVT POINTER
              SPACE
*                                                                     *
*  DISCOVER WETHER WE ARE A FOREGROUND TASK OR BATCH JOB              *
*                                                                     *
              L        R15,CVTTCBP-CVT(,R1) * CVTTCBP, =A(NEXT_TCB)
              XC       DWORD,DWORD          * CLEAR
              ST       R15,DWORD            * SAVE IT
              LM       R14,R15,DWORD        *  NEXT+CUR. TCB
              L        R15,PSAAOLD-PSA(,R15) * ASCB OLD POINTER.
              L        R15,ASCBTSB-ASCB(,R15)  ADDR OF TSB
              LTR      R15,R15              * IS IT ZERO
              BZ       *+8                  * YEP,  WE ARE BATCH
              MVI      TSO_FLAG,YES         * NOPE, WE ARE TSO
              SPACE
*                                                                     *
*  OBTAIN SYSRES UCB ADDRESS FROM CVT SPECIFIED IN REG1               *
*                                                                     *
              L        R1,CVTPTR            * GET CVT POINTER
              L        R2,CVTSYSAD-CVT(,R1) * GET SYSRES UCB
              ST       R2,UCB_ADDR          * SAVE UCB ADDRESS
              LA       R1,UCBPRFX           * LENGTH OF UCB PREFIX
              SR       R2,R1                * ADDRESS IT
              MVC      UNITNAME(L'UCBNAME),UCBNAME-UCB(R2) * UNIT NAME
              MVC      VOLSER(L'UCBVOLI),UCBVOLI-UCB(R2)   * VOLSER
              SPACE
*                                                                     *
*  SETUP FOR CALL TO LSPACE: SVC 78                                   *
*                                                                     *
              LSPACE UCB=UCB_ADDR,          * UCB ADDRESS              +
               DATA=LSPACE_DATA,            * RESULTS                  +
               F4DSCB=FORMAT4_DSCB,         * AREA FOR FORMAT4 DSCB    +
               MF=(E,LSPACE_CALL)           * USE EXEC FORM,
              SPACE
              LTR      R15,R15              * GOOD RC ?
              BNZ      ERROR_LSPACE         * NOPE, PROCESS RESULTS
              EJECT
*                                                                     *
*  PROCESS GOOD LSPACE CALL                                           *
*                                                                     *
GOOD_LSPACE   DS       0H
              LA       R9,LSPACE_DATA       * ADDRESS OUTPUT AREA
             USING     LSPACE_DATA_DSECT,R9 * USE SUPPLIED NAMES
              TM       LSPDSTAT,LSPDIXDS    * CHECK FOR INDEX
              BNO      *+10                 * NOPE, SKIP BELOW
              MVC      INDEX_VTOC(12),=CL12'INDEXED'
              TM       LSPDSTAT,LSPDIXDS+LSPDIXAC (INDEX AND ACTIVE)
              BNO      *+10                 * NOPE, SKIP
              MVC      INDEX_VTOC(12),=CL12'INDEX ACTIVE'
              L        R1,LSPDNEXT          * EXTENTS
              BAS      BALREG,CONVERT
              MVC      EXTENTS(4),4(R1)
              L        R1,LSPDTCYL          * TOTAL CYLS
              BAS      BALREG,CONVERT
              MVC      TOTAL_CYLS(4),4(R1)
              L        R1,LSPDTTRK          * TOTAL TRACKS
              BAS      BALREG,CONVERT
              MVC      TOTAL_TRKS(4),4(R1)
              L        R1,LSPDLCYL          * CONTIG CYLS
              BAS      BALREG,CONVERT
              MVC      CONTG_CYLS(4),4(R1)
              L        R1,LSPDLTRK          * AVAIL TRACKS
              BAS      BALREG,CONVERT
              MVC      AVAIL_TRKS(4),4(R1)
              L        R1,LSPDF0S           * FREE FROMAT0 DSCBS
              BAS      BALREG,CONVERT
              MVC      AVAIL_FMT0(4),4(R1)
              L        R1,LSPDVIRS          * AVAIL VIRS
              BAS      BALREG,CONVERT
              MVC      AVAIL_VIRS(4),4(R1)
              L        R1,LSPDFRAG          * FRAGMENTATION INDEX
              BAS      BALREG,CONVERT
              MVC      FRAG_INDEX(6),2(R1)
              SPACE
* WRITE RESULTS TO TERMINAL OR TO FILE SYSPRINT, BASED ON WHO WE ARE ..
              CLI      TSO_FLAG,YES
              BNE      BATCH_OK
TSO_OK        DS       0H
              MODE     BELOW                * AMODE(24)
              TPUT     TIME_DATE,L'TIME_DATE
              TPUT     UCB_TITLES,L'UCB_TITLES
              TPUT     UCB_RECORD,L'UCB_RECORD
              MODE     ABOVE                * AMODE(31)
              B        FINE
BATCH_OK      DS       0H
              OPEN     (SYSPRINT,OUTPUT),MODE=31
              MODE     BELOW                * AMODE(24)
              PUT      SYSPRINT,BLANKS+255+L'TIME_DATE-LRECL
              PUT      SYSPRINT,UCB_TITLES
              PUT      SYSPRINT,UCB_RECORD
              MODE     ABOVE                * AMODE(31)
              CLOSE    (SYSPRINT),MODE=31
             DROP      R9
              B        FINE
              SPACE
FINE          DS       0H                   *
              AIF      ('&SYSPARM' EQ 'ESA').ESA#3
              L        R2,STORADDR          * STORAGE ADDRESS
              L        R13,4(,R2)           * RELOAD FORWARD
              FREEMAIN RU,LV=STOR_LEN,A=(R2)
              RETURN   (14,12),T,RC=(15)    * RESTORE REGS
              SPACE
              AGO      .DONE
.ESA#3        L        R2,STORADDR          * ALL THROUGH WITH STORAGE
              STORAGE  RELEASE,                                        +
               LENGTH=STOR_LEN,ADDR=(R2)
              PR       ,                    * RELOAD ESA STAX
              AGO      .DONE
              SPACE
.DONE         ANOP
              EJECT
*                                                                     *
* LSPACE RC > 00, PROCESSING RETURN CODES AND WRITE RESULTS           *
*                                                                     *
              SPACE
ERROR_LSPACE  DS       0H
              LA       R9,LSPACE_CALL
             USING     LSPACE_CALL_DSECT,R9
              XR       R1,R1
              ICM      R1,B'0001',LSPAERCD  * RETURN CODE
              BAS      BALREG,CONVERT
              MVC      RETURN_CODE(2),6(R1)
              ICM      R1,B'0001',LSPASFID  * SUB FUNCTION ID REQUESTED
              BAS      BALREG,CONVERT
              MVC      SUBFUNCT_ID(2),6(R1)
              ICM      R1,B'0001',LSPASFRT  * SUB FUNCTION RC
              BAS      BALREG,CONVERT
              MVC      SUBFUNCT_RC(2),6(R1)
              ICM      R1,B'0001',LSPASFRS  * SUB FUNCTION REASON CODE
              BAS      BALREG,CONVERT
              MVC      SUBFUNCT_REASON(2),6(R1)
              SPACE
* WRITE RESULTS TO TERMINAL OR TO FILE SYSPRINT
              CLI      TSO_FLAG,YES
              BNE      BATCH_ERROR
TSO_ERROR     DS       0H
              MODE     BELOW
              TPUT     TIME_DATE,L'TIME_DATE
              TPUT     UCB_TITLES,L'UCB_TITLES
              TPUT     UCB_RECORD,L'UCB_RECORD
              TPUT     LSPACE_ERROR_MSG,L'LSPACE_ERROR_MSG
              MODE     ABOVE
              B        FINE
BATCH_ERROR   DS       0H
              OPEN     (SYSPRINT,OUTPUT),MODE=31
              MODE     BELOW
              PUT      SYSPRINT,BLANKS+255+L'TIME_DATE-LRECL
              PUT      SYSPRINT,UCB_TITLES
              PUT      SYSPRINT,UCB_RECORD
              PUT      SYSPRINT,LSPACE_ERROR_MSG
              MODE     ABOVE
              CLOSE    (SYSPRINT),MODE=31
* PROCESS BASED ON ABOVE RESULTS HERE ....
             DROP      R9
              B        FINE
              EJECT
*                                                                     *
* CONVERT HEX TO EBCDIC, SUBROUTINE                                   *
*                                                                     *
              SPACE
CONVERT       CVD      R1,DWORD             * CONVERT HEX TO DEC
              MVC      WORK(16),=XL16'40202020202020202020202020202021'
              ED       WORK(16),DWORD
              CLI      WORK+15,C' '
              BNE      *+8
              MVI      WORK+15,C'0'
              LA       R1,WORK+08
              BR       BALREG               * RETURN
 TITLE '>>> LSPACE: DATA AREAS AND EQUATES   &SYSDATE._&SYSTIME <<<'
STOR_LEN      EQU      18*4                 * 18 FULL WORDS
              SPACE
BALREG        EQU      10                   * BAL REG
              SPACE
LRECL         EQU      80                   * LRECL FOR TPUT/SYSPRINT
              SPACE
YES           EQU      X'FF'                *
NO            EQU      X'00'                *
              SPACE
              YREGS                         * IBM EQUATES
              EJECT
TSO_FLAG      DC       XL1'00'
              DS      0D
DWORD         DS       D                    * DOUBLE WORD WORK AREA
RC            DS       F                    * FUNCTION RETURN CODES
STORADDR      DS       F                    * GETMAIN/STORAGE ADDR
BLANKS        DC       CL255' '             * USED TO CLEAR STUFF
TIME_DATE     DC       CL20' '
WORK          DC       CL100' '             * USE PART OF ABOVE AREA
UCB_ADDR      DS       F                    * SYSRES UCB ADDRESS
              SPACE
UCB_TITLES    DC       CL(LRECL)' '         * TITLE LINE
              ORG      UCB_TITLES+00
              DC       CL(L'UCBNAME+2)'UNIT'
              DC       CL(L'UCBVOLI+2)'VOLSER'
              DC       CL6'TCYL'
              DC       CL6'TTRK'
              DC       CL6' EXT'
              DC       CL6'CCYL'
              DC       CL6'CTRK'
              DC       CL6'FMT0'
              DC       CL6'VIRS'
              DC       CL7'FRAG-I'
              DC       CL13'VTOC-INDX'
              ORG      ,
              DS      0F
UCB_RECORD    DS       CL(LRECL)            * TARGET FIELDS
              ORG      UCB_RECORD+00
UNITNAME      DS       CL(L'UCBNAME),CL2
VOLSER        DS       CL(L'UCBVOLI),CL2
TOTAL_CYLS    DS       CL4,CL2
TOTAL_TRKS    DS       CL4,CL2
EXTENTS       DS       CL4,CL2
CONTG_CYLS    DS       CL4,CL2
AVAIL_TRKS    DS       CL4,CL2
AVAIL_FMT0    DS       CL4,CL2
AVAIL_VIRS    DS       CL4,CL2
FRAG_INDEX    DS       CL6,CL2
INDEX_VTOC    DS       CL12
              ORG      ,
LSPACE_ERROR_MSG   DC  CL(LRECL)' '
              ORG      LSPACE_ERROR_MSG+00
              DC       CL12'RETURN CODE='
RETURN_CODE   DC       CL03' '
              DC       CL13'SUBFUNCTION: '
              DC       CL03'ID='
SUBFUNCT_ID   DC       CL03' '
              DC       CL03'RC='
SUBFUNCT_RC   DC       CL03' '
              DC       CL07'REASON='
SUBFUNCT_REASON DC     CL03' '
              ORG      ,
              PRINT    NOGEN
SYSPRINT      DCB      DDNAME=SYSPRINT,LRECL=LRECL,BLKSIZE=(LRECL*10), +
               RECFM=FB,DSORG=PS,MACRF=PM
              PRINT    GEN
 TITLE '>>> LSPACE CALL AND RETURN DATA AREAS <<<'
LSPACE_CALL   LSPACE   MF=L
              SPACE    2
LSPACE_DATA   LSPACE   MF=(L,DATA)
              SPACE
 TITLE '>>> FORMAT 4 DSCB <<<'
FORMAT4_DSCB  DS      0F
              IECSDSL1 (4)
              LTORG
*---------------------------------------------------------------------*
*                                                                     *
*    Sys/Stat for MVS is an integrated ISPF MVS search and display    *
*    facility that uses the latest technology to improve systems      *
*    programmers productvity.  Please call for a no obligation        *
*    evaluation.                                                      *
*                                                                     *
*    Advent Software                                                  *
*    340 West Butterfield Road                                        *
*    Suite 4B                                                         *
*    Elmhurst, IL 60126                                               *
*    (708) 279-5449                                                   *
*                                                                     *
*---------------------------------------------------------------------*
              END
//
