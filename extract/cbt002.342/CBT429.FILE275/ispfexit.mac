//PROCS JCLLIB ORDER=Your.proclib
//   EXEC ASMHCL
//C.SYSLIB DD DSN=SYS1.MACLIB,DISP=SHR
//         DD DSN=SYS1.MODGEN,DISP=SHR
//C.SYSIN DD *
 COPY $DOC
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
*                                                                     *
*      MODULE NAME = SYSISPFE                                         *
*                                                                     *
*      DESCRIPTIVE NAME = ISPF 4.1 and ISPF 4.2 Primary/Panel Exit    *
*                                                                     *
*      OPERATING ENVIRONMENT = MVS/XA 2.3 and ISPF 4.1 or above       *
*                                                                     *
*      FUNCTION = Display MVS system information on an ISPF panel     *
*                 using panel exit technology.                        *
*                                                                     *
*      REGISTER USAGE:                                                *
*                                                                     *
*                   R1 ..... ISPF passes us data here                 *
*                   R2 .....                                          *
*                   R3 .....                                          *
*                   R4 .....                                          *
*                   R5 .....                                          *
*                   R6 .....                                          *
*                   R7 .....                                          *
*                   R8 .....                                          *
*                   R9 .....                                          *
*                  R10 ..... Base+4096+4096                           *
*                  R11 ..... Base+4096                                *
*                  R12 ..... Base                                     *
*                  R13 .....                                          *
*                  R14 .....                                          *
*                  R15 ..... 00                                       *
*                                                                     *
*      MACROS = IBM:                                                  *
*                    GETMAIN                                          *
*                    YREGS                                            *
*                                                                     *
*             OTHER:                                                  *
*                                                                     *
*                                                                     *
* SUBROUTINES =                                                       *
*                                                                     *
*      DSECTS = IBM: CVT                                              *
*                    IHAECVT                                          *
*                    IHAASCB                                          *
*                    IHAASVT                                          *
*                    IEESMCA                                          *
*                    IEECHAIN                                         *
*                    IRAOUCB                                          *
*                                                                     *
*                                                                     *
*             OTHER:                                                  *
*                                                                     *
*                                                                     *
*      MODULE TYPE = PROCEDURE                                        *
*                                                                     *
*         PROCESSOR = ASMH V2                                         *
*                                                                     *
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
  EJECT
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
*                                                                     *
*      ENTRY POINTS = SYSISPFE (ONLY ENTRY POINT)                     *
*                                                                     *
*      INPUT = ISPF parameters Via R1                                 *
*                                                                     *
*      OUTPUT = none directly                                         *
*                                                                     *
*                                                                     *
*      EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14          *
*                                                                     *
*      EXIT - ERROR =                                                 *
*                                                                     *
*      EXTERNAL REFERENCES =                                          *
*                                                                     *
*      TABLES =                                                       *
*                                                                     *
*      AUTHOR = MARK V. HEDGES -                                      *
*                                                                     *
*    Sys/Stat for MVS is an integrated ISPF MVS search and display    *
*    facility that uses the latest technology to improve systems      *
*    programmers productvity.  Please call for a no obligation        *
*    evaluation.                                                      *
*                                                                     *
*    Advent Software                                                  *
*    340 West Butterfield Road                                        *
*    Suite 4B                                                         *
*    Elmhurst, IL 60126                                               *
*    (708) 279-5449                                                   *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*      MESSAGES =                                                     *
*                                                                     *
*      ABEND CODES =                                                  *
*                                                                     *
*                                                                     *
* NOTE(S):                                                            *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
* -----------------------  CHANGE SECTION  ---------------------------*
*                                                                     *
* 11/01/95 - all new                                                  *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
                                                             EJECT
*---------------------------------------------------------------------*
*  Panel definition...
* )PANEL KEYLIST(ISRSAB,ISR)
* )ATTR.....
@LOW_HILITE        EQU    C'#'
@HIGH_HILITE       EQU    C'$'
@MIDDLE_HILITE     EQU    X'5F'
CPU_MIDDLE_VALUE   EQU    75
CPU_HIGH_VALUE     EQU    90
*   \  type(output)   color(green)   caps(off)
*   $  type(dataout)  color(red)     caps(off)
*   ^  type(dataout)  color(yellow)  caps(off)
*   #  type(dataout)  color(green)   caps(off)
*   @  area(dynamic)
* )BODY
* +CPU:@CPU @\CPUM       +Rel\REL     +ID\ID  +IPL\IPLD    +SysPlex\PLEX
* )INIT
*  /* Do NOT alter the number of X's in the following variables    */
* &CPU = XXXXX             /* CPU Busy Percentage  (dynamic area)*/
* &REL = XXXXXXXX          /* 'SP V.M.R' MVS level               */
* &ID  = XXXX              /* Systems ID                         */
* &CPUM= XXXXXXXXXXX       /* CPU Model-Serial                   */
* &FMID= XXXXXXXX          /* MVS FMID                           */
* &IPLD= XXXXXXXX          /* IPL Date                           */
* &IPLT= XXXXXXXX          /* IPL Time                           */
* &JOB = XXXX              /* # Active Jobs                      */
* &TSU = XXXX              /* # Active TSO Users                 */
* &STC = XXXX              /* # Active STC's                     */
* &INI = XXXX              /* # Active Inits                     */
* &PLEX= XXXXXXXXXXX       /* SysPlex Name '-PlexID' (if esa 5.1+*/
* PANEXIT ((CPU,REL,ID,CPUM,FMID,IPLD,IPLT,JOB,TSU,STC,INI,PLEX),+
* LOAD,SYSISPFE)
* )REINIT
* )PROC
* )END
*---------------------------------------------------------------------*
 TITLE 'Local DSECTS'
SYSISPFE_RECORD      DSECT
CPU_HILITE           DS       CL01
CPU                  DS       CL04
REL                  DS       CL(L'MVS_RELEASE)
ID                   DS       CL(L'MVS_SYSID)
CPUM                 DS       CL(L'MVS_MODEL+1+L'MVS_SERIAL)
FMID                 DS       CL(L'MVS_FMID)
IPLD                 DS       CL08
IPLT                 DS       CL08
JOB                  DS       CL04
TSO                  DS       CL04
STC                  DS       CL04
INIT                 DS       CL04
PLEX                 DS       CL11   * SYSPLEX
SYSISPFE_RECORD_LEN  EQU      *-SYSISPFE_RECORD
                                                                SPACE 1
*  Getmain'd storage area for RENT Code
STORAGE_AREA  DSECT
STORAGE_SAVE  DS     20F                    * MANDATORY SAVE AREA 18F
STORAGE_ADDR  DS       F                    * "    SAVE GETMAIN ADDR
STORAGE_LENGTH DS      F                    * "    SAVE GETMAIN LENGTH
STORAGE_BASES DS      3F                    * "    BASE REGS
STORAGE_PGMNAME DS     CL8                  * "    PROGRAM NAME
INSTR_ADDR    DS      2A                    * "    ESTAE NEXT INSTR.
MVS_RELEASE   DS       CL8                  *
MVS_FMID      DS       CL8                  *
MVS_SERIAL    DS       CL6                  *
MVS_MODEL     DS       CL4                  *
MVS_SYSID     DS       CL4                  *
FULL_WORDS    DS     18F                    * GENERAL USE
TENWORDS      EQU      FULL_WORDS+(8*4)
BALREG_SAVE   DS     10F                    * 'BAL/BAS' SAVE AREAS
BALREG_SAVE1  EQU      BALREG_SAVE+4        *
BALREG_SAVE2  EQU      BALREG_SAVE+8        *
BALREG_SAVE3  EQU      BALREG_SAVE+12       *
BALREG_SAVE4  EQU      BALREG_SAVE+16       *
BALREG_SAVE5  EQU      BALREG_SAVE+20       *
SAVE_AREA     DS     18F                    * GENERAL
SAVE_REGS     DS      8F                    * BALR'D ROUTINES
SETUP_SAVE    EQU      SAVE_REGS+00         *
GATHER_SAVE   EQU      SAVE_REGS+04         *
PRESENT_SAVE  EQU      SAVE_REGS+08         *
PROCESS_SAVE  EQU      SAVE_REGS+12         *
CLOSE_SAVE    EQU      SAVE_REGS+16         *
BUILD_SAVE    EQU      SAVE_REGS+20         *
SAVE_REG1     EQU      SAVE_REGS+24         *
              DS      0D
DWORD         DS       D                    * DOUBLE WORD
DWORD1        DS       D                    * "
DWORD2        DS       D                    * "
WORK_AREA     DS       CL133                * GENERAL, CLEARED
              DS       CL(265-133)            Used by @LOCSVC !!
BLANKS        DS       CL256                * SET TO BLANKS
RC            DS       F                    * RETURN CODE ON EXIT
              DS      0F
EDITMSK       DS       XL22                 * EDIT MASK AREA
ISPF_ACTIVE   DS       XL1                  * ISPF ACTIVE FLAG: ALL
MVSLVL        DS       XL1                  * Mvs Level: X'21' - X'53'
              DS      0D
CVT_FIX       DS       F
RMCT_ADDR     DS       F
GM_ADDR       DS       F
GM_ADDR80     DS       F
              DS     0D
              DS       CL16                * Avoid 0C4's
STORAGE_LEN   EQU      *-STORAGE_AREA
 TITLE 'SYSISPFE ISPF 4.1 and 4.2 Panel Exit Routine'
SYSISPFE      AMODE 31
SYSISPFE      RMODE ANY
SYSISPFE      CSECT
              BSM   R14,0                   * Save Mode
              SAVE  (14,12)
              LR    R12,R15                 * Base register
              LR    R2,R1                   * Save passed Parm
             USING  SYSISPFE,R12,R11,R10
              B     @CSECT_BASES
              DC    C'ISPF EXIT &SYSDATE..&SYSTIME'   * ASMH
*HLA          DC    C'ISPF EXIT &SYSDATC..&SYSTIME'   * HLA Only
              DS   0F
@CSECT_BASE_REGS    EQU   *
              DC    AL4(SYSISPFE+4096)      * Base Reg
              DC    AL4(SYSISPFE+8192)      * Base Reg
STORAGE_LEN_DC DC   AL4(STORAGE_LEN)          *. > 4K
                                                                SPACE 1
@CSECT_BASES  DS     0H
              L      R11,@CSECT_BASE_REGS+0
              L      R10,@CSECT_BASE_REGS+4
              GETMAIN RU,LV=STORAGE_LEN,LOC=RES
              LR    R14,R1                  * Save Getmain address
              LR    R15,R1                  * =A(Area to clear)
              LR    R1,R0                   * L'Size-of-area
              LA    R0,0(,R1)               * Clear high order byte
              SRDL  R0,8                    * /256
              SRL   R1,24                   * Isolate remainder
              LTR   R0,R0                   * is quotient zero ?
              BZ    @CSECT_CLFINE           *.Yep,
@CSECT_CLEAR  XC    0(256,R15),0(R15)       * Clear 256 bytes
              LA    R15,256(,R15)           * Point to next 256
              BCT   R0,@CSECT_CLEAR         *.Loop until EOF
@CSECT_CLFINE LTR   R1,R1                   * Is remainder zero ?
              BZ    @CSECT_CLDONE           *.Yep, Save reg Pointer
              BCTR  R1,0                    * -1
              B     *+10
              XC    0(*-*,R15),0(R15)
              EX    R1,*-6                  * Clear the remainder
@CSECT_CLDONE DS    0H
              LR    R1,R14                  * Restore R1
             USING  STORAGE_AREA,R1         * Address storage
              ST    R13,STORAGE_SAVE+04     * Forward pionter
              ST    R1,08(,R13)             * Backwards pointer
              ST    R1,STORAGE_ADDR         * Save storage address
              LR    R13,R1                  * Address storage
             DROP   R1
             USING  STORAGE_AREA,R13
              L     R1,STORAGE_LEN_DC
              ST    R1,STORAGE_LENGTH       * SAVE FOR DEBUG
              XC    STORAGE_BASES(6*4),STORAGE_BASES
              ST    R12,STORAGE_BASES+0
              ST    R11,STORAGE_BASES+4
              ST    R10,STORAGE_BASES+8
              MVC   STORAGE_PGMNAME(08),=CL8'SYSISPFE'
              MVI   BLANKS,C' '             * Set BLANKS TO C' '
              MVC   BLANKS+01(255),BLANKS   * Propagate Blanks
              ST    R2,SAVE_REG1            * Save =A(=A(l'Parm Parm))
              XC    RC(4),RC                * Clear RC
*  MVS Release level: XL01'51' = MVS/ESA 5.1
              L     R15,CVTPTR              * CVT pointer
              SH    R15,=Y(CVTMAP-CVTFIX)   * Prefix
             USING  CVTFIX,R15
              TM    CVTDCB,X'08'            * ESA?
              BNO   @MVSXA                  .Nope, XA
              TM    CVTOSLV0,X'08'          * ESA 4.1
              BNO   @MVSESA3                .Nope, ESA 3.+
              TM    CVTOSLV0,X'40'          * ESA 4.2?
              BNO   @MVSESA41               .Nope, ESA 4.1
              TM    CVTOSLV1,X'80'          * ESA 4.3
              BNO   @MVSESA42               .Nope, ESA 4.2
              TM    CVTOSLV1,X'20'          * ESA 5.1
              BNO   @MVSESA43               .Nope, ESA 4.3
              TM    CVTOSLV1,X'10'          * ESA 5.2
              BNO   @MVSESA51               .Nope, ESA 5.1
              TM    CVTOSLV2,X'80'  ??      * ESA 5.3
              BNO   @MVSESA52               .Nope, ESA 5.2
@MVSESA53     MVI   MVSLVL,X'53'            .Yep, ESA 5.3
              B     @REL_DONE
@MVSESA52     MVI   MVSLVL,X'52'
              B     @REL_DONE
@MVSESA51     MVI   MVSLVL,X'51'
              B     @REL_DONE
@MVSESA43     MVI   MVSLVL,X'43'
              B     @REL_DONE
@MVSESA42     MVI   MVSLVL,X'42'
              B     @REL_DONE
@MVSESA41     MVI   MVSLVL,X'41'
              B     @REL_DONE
@MVSESA3      MVI   MVSLVL,X'31'            * Set default
              TM    CVTOSLV0,X'20'          * ESA 3.1.3?
              BNO   *+08                    .Nope, 3.1
              MVI   MVSLVL,X'33'            .Yep, 3.1.3
              B     @REL_DONE
@MVSXA        MVI   MVSLVL,X'23'
              B     @REL_DONE
@REL_DONE     EQU    *
                                                                SPACE 1
              MVC   MVS_RELEASE(8),CVTPRODN * Product Number
              MVC   MVS_FMID(8),CVTPRODI    * Product FMID
              MVC   MVS_SERIAL(05),=X'4020202021'
              ED    MVS_SERIAL(05),CVTMDL   * CPU NAME
              MVC   MVS_MODEL(04),MVS_SERIAL+1
              XC    MVS_SERIAL,MVS_SERIAL
              XR    R14,R14
              L     R1,CVTPCCAT             * PCCAVT (X'2FC')
              LA    R0,16                   * 16 CPUS
L0001         ICM   R14,15,0(R1)            * UNIPROCESSOR
              BNZ   CPU0001                 * MOVE CPU INFO
              LA    R1,04(,R1)
              BCT   R0,L0001
              B     REL0001                 * SKIP IT
CPU0001       MVC   MVS_SERIAL(06),6(R14)   * SAVE IT
REL0001       EQU   *
              L     R15,CVTSMCA             * Get SMCA
             DROP   R15 ,                   * Done with CVTFIX
              MVC   MVS_SYSID(04),SMCASID-SMCABASE(R15)
                                                                SPACE 1
START_UP      EQU    *
              L      R1,CVTPTR
              SH     R1,=Y(CVTMAP-CVTFIX)
              ST     R1,CVT_FIX
              L      R1,CVTOPCTP-CVTFIX(,R1)  Point to RMCT
              ST     R1,RMCT_ADDR           *.Save
              L      R14,4(,R13)           Get previous save area
              LM     R15,R1,16(R14)        Capture R1
              MVC    FULL_WORDS(32),0(R1)  Save 32 bytes of R1
              L      R6,FULL_WORDS+28      Load record area
             USING   SYSISPFE_RECORD,R6
              MVC    0(SYSISPFE_RECORD_LEN,R6),BLANKS
              MVC    REL(L'MVS_RELEASE),MVS_RELEASE
              MVC    FMID(L'MVS_FMID),MVS_FMID
              MVC    ID(L'MVS_SYSID),MVS_SYSID
              MVC    CPUM+00(L'MVS_MODEL),MVS_MODEL
              MVI    CPUM+L'MVS_MODEL,C'-'
              MVC    CPUM+L'MVS_MODEL+1(L'MVS_SERIAL),MVS_SERIAL
              L      R1,CVT_FIX             *.save
              L      R3,CVTSMCA-CVTFIX(,R1) * GET SMF ADDR FROM CVT
              ICM    R1,B'1111',SMCAIDTE-SMCABASE(R3)
              BAS    BALREG,PROCEESS_DATE
              MVC    IPLD(06),0(R1)
              MVC    IPLD+06(02),8(R1)
              ICM    R1,B'1111',SMCAITME-SMCABASE(R3)
              BAS    BALREG,PROCESS_TIME
              MVC    IPLT(08),0(R1)
              MVC    CPU,BLANKS
              L      R2,RMCT_ADDR           *.Save
              L      R2,X'E4'(,R2)          * RCT
              LH     R1,X'38'(,R2)          * RCT+X'38' RCVCPUA/CPUBUSY
              SRL    R1,4                   * DIVIDE BY 16
              MVI    CPU_HILITE,@LOW_HILITE * CPU < CPU_MIDDLE
              C      R1,CPU_MIDDLE
              BL     *+08
              MVI    CPU_HILITE,@MIDDLE_HILITE * CPU > CPU_MIDDLE
              C      R1,CPU_HIGH
              BL     *+08
              MVI    CPU_HILITE,@HIGH_HILITE * CPU > CPU_HIGH
              CVD    1,DWORD
              MVC    EDITMSK(16),@EDITM16
              ED     EDITMSK(16),DWORD
              MVC    CPU(3),EDITMSK+1+12
              CLI    CPU+2,C' '
              BNE    *+8
              MVI    CPU+2,C'0'
              MVI    CPU+L'CPU-1,C'%'
              XC     INIT(4),INIT
              XC     JOB(4),JOB
              XC     STC(4),STC
              XC     TSO(4),TSO
              STM    R1,R4,FULL_WORDS
              L      R1,CVTPTR                   * CVT
              L      R1,CVTASVT-CVTMAP(,R1)      * ASVT
              L      R15,ASVTMAXU-ASVT(,R1)      * Max addr spaces
              LA     R1,ASVTFRST-ASVT(,R1)       * 1st ASCB
              ST     R1,FULL_WORDS+24            * Save ASCB
@TASK_LOOP    L      R1,FULL_WORDS+24            * Save ASCB
              LA     R1,04(,R1)                  * 1st ASCB + 04
              ST     R1,FULL_WORDS+24            * Save ASCB
              ICM    R14,B'1111',0(R1)           * ASCB
              BM     @TASK_NEXT_ASCB             .Nope, invalid
              L      R2,ASCBOUCB-ASCB(,R14)      * Get OUCB
              LA     R2,0(,R2)                   * Clear high order
              LTR    R2,R2                       * Any ?
              BZ     @TASK_NEXT_ASCB             .Not OUCB
              TM     OUCBSFL-OUCB(R2),OUCBINV    * Valid OUCB ?
              BO     @TASK_NEXT_ASCB             .Nope, Next ACB
              L      R2,ASCBJBNI-ASCB(,R14)      * JOB ?
              LA     R2,0(,R2)                   * Clear high order
              LTR    R2,R2                       * Anything there?
              BZ     @TASK_NJOB                  .Nope, Not a JOB
              L      R1,CVTPTR                   * CVT
              TM     CVTOSLV0-CVTMAP(R1),X'08'   * ESA 4 or above?
              BO     @TASK4                      .Nope, don't subtract
              SH     R2,=H'8'                    .Yep, go back
              B      *+08
@TASK4        L      R2,CHCSCBP-CHNAME(,R2)
@TASK_JOB     SLR    R1,R1
              ICM    R1,B'1111',JOB
              LA     R1,1(,R1)
              STCM   R1,B'1111',JOB
              B      @TASK_NEXT_ASCB
@TASK_NJOB    EQU    *
              L      R2,ASCBCSCB-ASCB(,R14)      * CSCB
              LA     R2,0(,R2)
              LTR    R2,R2
              BZ     @TASK_NCSCB                 * Any CSCB
              L      R1,ASCBOUCB-ASCB(,R14)      * Reget OUCB
              TM     OUCBYFL-OUCB(R1),OUCBSTT+OUCBMNT * STC or Mount
              BZ     @TASK_TSO                   .Must by TSO
              CLC    CHCLS-CHAIN(04,R2),=CL04'INIT' Init?
              BE     @TASK_INIT                  .Yep, we have one
              CLC    CHCLS-CHAIN(07,R2),=CL07'ASCHINT' APPC Init?
              BE     @TASK_INIT                  .Yep, we have an APPC
              CLC    CHCLS-CHAIN(08,R2),BLANKS
              BE     @TASK_NEXT_ASCB
@TASK_STC     SRL    R1,R1
              ICM    R1,B'1111',STC
              LA     R1,1(,R1)
              STCM   R1,B'1111',STC
              B      @TASK_NEXT_ASCB
@TASK_INIT    SLR    R1,R1
              ICM    R1,B'1111',INIT
              LA     R1,1(,R1)
              STCM   R1,B'1111',INIT
              B      @TASK_NEXT_ASCB
@TASK_TSO     EQU    *
              L      R1,ASCBOUCB-ASCB(,R14)      * Reget OUCB
              TM     OUCBYFL-OUCB(R1),OUCBLOG    * TSO ?
              BNO    @TASK_NTSO
              SLR    R1,R1
              ICM    R1,B'1111',TSO
              LA     R1,1(,R1)
              STCM   R1,B'1111',TSO
@TASK_NTSO    B      @TASK_NEXT_ASCB
                                                                SPACE 1
@TASK_NCSCB   EQU    *                           * TASK IS 'STARTING'
                                                                SPACE 1
@TASK_NEXT_ASCB BCT  R15,@TASK_LOOP
              SLR    R1,R1
              ICM    R1,B'1111',TSO
              CVD    R1,DWORD
              MVC    EDITMSK(16),@EDITM16
              ED     EDITMSK(16),DWORD
              MVC    TSO(4),EDITMSK+1+11
              CLI    TSO+3,C' '
              BNE    *+8
              MVI    TSO+3,C'0'
              SLR    R1,R1
              ICM    R1,B'1111',JOB
              CVD    R1,DWORD
              MVC    EDITMSK(16),@EDITM16
              ED     EDITMSK(16),DWORD
              MVC    JOB(4),EDITMSK+1+11
              CLI    JOB+3,C' '
              BNE    *+8
              MVI    JOB+3,C'0'
              SLR    R1,R1
              ICM    R1,B'1111',STC
              CVD    R1,DWORD
              MVC    EDITMSK(16),@EDITM16
              ED     EDITMSK(16),DWORD
              MVC    STC(4),EDITMSK+1+11
              CLI    STC+3,C' '
              BNE    *+8
              MVI    STC+3,C'0'
              SLR    R1,R1
              ICM    R1,B'1111',INIT
              CVD    R1,DWORD
              MVC    EDITMSK(16),@EDITM16
              ED     EDITMSK(16),DWORD
              MVC    INIT(4),EDITMSK+1+11
              CLI    INIT+3,C' '
              BNE    *+8
              MVI    INIT+3,C'0'
              LM     R1,R4,FULL_WORDS
              L      R1,CVT_FIX             *.save
              L      R1,CVTECVT-CVTFIX(,R1) * ECVT
              MVC    PLEX(08),ECVTSPLX-ECVT(R1) SYSPLEX NAME
              CLI    MVSLVL,X'51'
              BL     NO_PLEXID
              MVI    PLEX+08,C'-'
              MVC    PLEX+09(02),X'108'(R1) * SYSPLEX ID
NO_PLEXID     DS     0H
              XC     RC,RC
              DROP    R6
                                                                SPACE 1
@END_PROGRAM  EQU  *
              LR    R2,R1                   * Save possible data Addr
              L     R3,RC                   * Save RC from PGM
              L     R1,STORAGE_ADDR         * LOAD GETMAIN'D ADDR
              L     R4,04(,R13)             * Reload old save area
*                                             don't Mess wWth this one
              FREEMAIN RU,LV=STORAGE_LEN,A=(R1)
              XR    R15,R15                 * FORCE RC=0
              LR    R15,R3                  * Return code saved before
              LR    R13,R4                  * Save area recalled
              L     R14,12(,R13)            * Reload R14
              L     R0,20(,R13)             * Reload R0
              LR    R1,R2                   * Reload R1 from stored R2
              LM    R2,R12,28(R13)          * Reload R2-R12, Skip R1
              OI    15(R13),X'01'           * SET RC
              BSM   0,R14                   * GO BACK
                                                                SPACE 1
 TITLE 'Subroutines'
PROCESS_TIME  ST    BALREG,BALREG_SAVE3
              STM   R0,R4,SAVE_AREA         * RESTORE REGS
              LR    R1,R1
              XR    R0,R0
              D     R0,=F'100'              * MAKE INTO SECONDS
              LR    R2,R1                   * SAVE SECONDS   R2
              XR    R0,R0                   * CLEAR
              D     R0,=F'3600'             * GET HOURS
              LR    R3,R1                   * STORE HOURS:   R3
              M     R0,=F'3600'             * HOURS * 3600 = MINUTES
              SR    R2,R1                   * REMOVE HOURS
              LR    R1,R2
              XR    R0,R0                   * CLEAR
              D     R0,=F'60'               * GET MINUTES
              LR    R4,R1                   * STORE MINS:    R4
              M     R0,=F'60'               * REMOVE MINUTES
              SR    R2,1                    * SAVE DIFFERENCE
              CVD   R3,DWORD
              UNPK  WORK_AREA(2),DWORD+6(2)
              OI    WORK_AREA+1,X'F0'
              CVD   R4,DWORD
              UNPK  WORK_AREA+3(2),DWORD+6(2)
              OI    WORK_AREA+1+3,X'F0'     * OR 1/2 BYTE
              CVD   R2,DWORD
              UNPK  WORK_AREA+3+3(2),DWORD+6(2)
              OI    WORK_AREA+1+3+3,X'F0'   * OR 1/2 BYTE
              MVI   WORK_AREA+2,C':'        * ADD HH:MM:SS
              MVI   WORK_AREA+5,C':'        * ...
              LM    R0,R4,SAVE_AREA         * RESTORE REGS
              LA    R1,WORK_AREA
              L     BALREG,BALREG_SAVE3
              BR    BALREG
                                                                SPACE 1
PROCEESS_DATE ST BALREG,BALREG_SAVE3
           LR     R1,1
           LTR    R1,R1
           BZ     NONE_0017
           XC     SAVE_AREA,SAVE_AREA
           STM    R0,R4,SAVE_AREA            * Save calling REGS
           MVC    SAVE_AREA+20(12),MONTBL    * Move month table
           XC     DWORD,DWORD                * Clear
           LR     R4,R1                      * Save date
           SRL    R1,4*4                     * Kill 'DDDF'
           SLL    R1,4*1                     * make: '000Y YYY0'
           LTR    R1,R1
           BZ     NONE_0017
           ST     R1,DWORD+4                 * save it
           OI     DWORD+7,X'0F'              * make: '000Y YYYF' packe
           UNPK   WORK_AREA+6(4),DWORD+5(3)  * save year
           CVB    R1,DWORD                   * make binary
           XR     R0,R0                      * clear
           D      R0,=F'4'                   * divide YR by 4
           LTR    R0,R0                      * any remainder
           BNZ    *+08                       * nope, not leap year
           MVI    SAVE_AREA+20+01,X'1D'      *
           LR     R2,R4                      * restore 'YYYYDDDF'
           SLL    R2,4*4                     * kill ...
           SRL    R2,4*4                     *          'YYYY'
           XC     DWORD,DWORD                * clear
           ST     R2,DWORD+4                 * store: '0000 0DDDF'
           CVB    R2,DWORD                   * convert it
           LA     R1,SAVE_AREA+20            * load tbl address
           LA     R3,12                      * number of months
DO0017     XR     R0,R0                      * clear
           ICM    R0,B'0001',0(1)            * get month in hex
           SR     R2,R0                      * current-next
           LTR    R2,R2                      * are we past ?
           BNP    DON0017                    .Yep,
           A      R1,=F'1'                   .Nope, next tbl entry
           BCT    R3,DO0017                  * do some more
           LA     R15,8
           B      D0017                      * reload'm
DON0017    AR     R2,R0                      * add back to make posit.
           CVD    R2,DWORD                   * make decimal
           UNPK   WORK_AREA+3(2),DWORD+6(2)  * edit results
           OI     WORK_AREA+4,X'F0'          * edit results
           A      R1,=F'1'                   * move addr back 1
           LA     R3,SAVE_AREA+20            * load tbl addr
           SR     R1,R3                      * what month we in ?
           CVD    R1,DWORD                   * make decimal
           UNPK   WORK_AREA+0(2),DWORD+6(2)  * edit
           OI     WORK_AREA+1,X'F0'          * edit &rsults
           MVI    WORK_AREA+2,C'/'           * add 'mm/dd/yyyy'
           MVI    WORK_AREA+5,C'/'           *
           CLI    WORK_AREA+6,C'0'
           BNE    *+10
           MVC    WORK_AREA+6(2),=C'19'      * Not ESA 4 assume...
           XR     R15,R15
D0017      LM     R0,R4,SAVE_AREA            * RELOAD'M
           LA     R1,WORK_AREA               * ADDR OF &RSULTS
FINE_0017  EQU    *
NONE_0017  LA     R15,8                      * NO DATE OR INVALID
PAST0017   EQU    *
           LA     R1,WORK_AREA
           L      BALREG,BALREG_SAVE3
           BR     BALREG
           DROP   ,
                                                                SPACE 1
 TITLE 'DATA SECTION'
              DS    0F
              DC     CL16'   CPU HIGH PER:'  * Keep @ CL16
CPU_MIDDLE    DC     AL04(CPU_MIDDLE_VALUE)
CPU_HIGH      DC     AL04(CPU_HIGH_VALUE)
MONTBL        DC     XL12'1F1C1F1E1F1E1F1F1E1F1E1F'  = 3F
ZERO          DC     F'0'
ONE           DC     F'1'
TWO           DC     F'2'
THREE         DC     F'3'
FOUR          DC     F'4'
@EDITM16      DC     XL16'40202020202020202020202020202021'
BALREG        EQU    14
NO            EQU    X'0F'
YES           EQU    X'F0'
              LTORG
SYSISPFE_PGM_LENGTH  EQU   *
 TITLE 'DSECTS'
                YREGS
                IHAASCB
                IHAASVT
                CVT      DSECT=YES,LIST=NO,PREFIX=YES
                IHAECVT  DSECT=YES,LIST=NO
                IEECHAIN
                IRAOUCB
                IEESMCA
               END
/*
//L.SYSLMOD DD DSN=YOUR.LIBRARY(SYSISPFE),DISP=SHR
