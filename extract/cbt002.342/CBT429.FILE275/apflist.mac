// EXEC ASMHLC
//C.SYSLIB DD  DISP=SHR,DSN=SYS1.MACLIB
//         DD  DISP=SHR,DSN=SYS1.MODGEN
//C.SYSIN DD *
 COPY $DOC
* Note: This is an ESA-only program due to the use of BAKR etc..
*
APFLIST       AMODE    31
APFLIST       RMODE    ANY
APFLIST       CSECT
              BAKR     R14,0                * Load ESA Stack
              LR       R12,R15              * Establish Base
             USING     APFLIST,R12
              BSM      R14,0                * Save mode
              B        GET_STOR             * Skip constants
              DC       C'APFLIST_&SYSDATE._&SYSTIME.'
GET_STOR      STORAGE  OBTAIN,              * Get storage for save area+
               LENGTH=STORAGE_LEN,LOC=RES
              ST       R1,STORADDR          * Save for later
              LR       R13,R1               * Point R13 to save area   +
                                              even though we don't use +
                                              it someone might!
              XC       0(STORAGE_LEN,R13),0(R13)
              ST       R13,4(,R1)           * Save forward
              ST       R1,8(,R1)            * Backwards
              LR       R13,R1               * Point to 18F words
              MVC      4(4,R1),=C'F1SA'     * Storage macro
             USING     STORAGE,R13          * Talk to our storage area
*  Determine MVS level and APF level
              MVI    DYNAMIC_APF_LIST,NO    * Set initial flag
              L      R9,CVTPTR              * CVT
             USING   CVTMAP,R9              *
              TM     CVTDCB,CVTOSEXT        * Are we ESA?
              BZ     NOT_ESA                *.Nope, must be static APF
              TM     CVTOSLV1,X'80'         * ESA 4.3?
              BZ     NOT_ESA43              *.Nope, use static APF
*  Determine if APF is Dynamic
              CSVAPF REQUEST=QUERYFORMAT,FORMAT=APF_FORMAT
              CLI    APF_FORMAT,CSVAPFFORMATDYNAMIC
              BNE    STATIC_APF             *.nope, static
              MVI    DYNAMIC_APF_LIST,YES   *.yep, set flag
DYNAMIC_APF   DS     0H
              L      R2,=F'16816'           * 300 * 56 + 16
              ST     R2,APF_GETMAIN_LEN     * Save length
              SPACE
GET_APF_STOR  L      R2,APF_GETMAIN_LEN     * Load length
              GETMAIN RU,LV=(R2),LOC=RES    * Get some storage
              ST     R1,APF_GETMAIN_ADDR    *.Save storage address
              LR     R3,R1                  *
              CSVAPF REQUEST=LIST,                                     +
               ANSAREA=(R3),                * Our storage area         +
               ANSLEN=APF_GETMAIN_LEN,      *...how big it is          +
               RETCODE=APF_RETCODE,         * return code              +
               RSNCODE=APF_RSNCODE,         * reason code              +
               MF=(E,CSVAPF)                * execute form
*  Are we good for it?
              CLC    APF_RETCODE,=AL4(CSVAPFRC_OK)
              BE     GOOD_DYM_LIST          * Everything OK
              CLC    APF_RETCODE,=AL4(CSVAPFRC_WARN)
              BE     WARN_DYM_LIST          * Write your own
              NC     APF_RETCODE,=AL4(CSVAPFRSNCODEMASK)
              CLC    APF_RSNCODE,=AL4(CSVAPFRSNNOTALLDATARETURNED)
              BNE    ERROR_DYM_CODES        * Write your own
*  We have eliminated all other errors, our storage area is too SMALL!
              L      R4,APFHTLEN-APFHDR(,R4)  From answer area, needed +
                                              amount of core for all   +
                                              APF entries
              L      R2,APF_GETMAIN_LEN     * Load old Size
              L      R3,APF_GETMAIN_ADDR    * Load old address
              FREEMAIN RU,LV=(R2),A=(R3)    * Free old stuff
              ST     R4,APF_GETMAIN_LEN     * Save new size
              B      GET_APF_STOR           * GETMAIN again
              SPACE
GOOD_DYM_LIST DS     0H                     *
              L      R9,APF_GETMAIN_ADDR    * Load our storage address
              L      R8,APFH#REC-APFHDR(,R9)  Get the num. of entries
              ST     R8,APF_ENTRIES         *.save
              L      R8,APFHOFF-APFHDR(,R9) * =a(1st APFE)
              AR     R8,R9                  * Go past header
              L      R6,APF_ENTRIES         * Number of entries in R6
             USING   APFE,R8                * here we are
NEXT_DYM_DSN  TM     APFEFLAGS,APFESMS      * SMS MANAGED?
              BNO    NOT_SMS                *
              MVI    APFSMS,C'Y'            *
NOT_SMS       MVC    APFVOL(6),APFEVOLUME   * Save APFVOL
              XR     R2,R2
              ICM    R2,B'0001',APFEDSLEN   * Get Length DSNAME
              BCTR   R2,0
              MVC    APFDSN(*-*),APFEDSNAME * Save DSNAME
              EX     R2,*-6
* Do something with it...
              ICM    R1,B'0011',APFELEN     * Length of this entry
              AR     R8,R1                  * Point to next entry
              BCT    R6,NEXT_DYM_DSN        * goback
             DROP    R8
FINE_DYM      L      R2,APF_GETMAIN_LEN
              L      R4,APF_GETMAIN_ADDR
              FREEMAIN RU,LV=(R2),A=(R4)    * Free core
FINE          L        R2,STORADDR          * ALL THROUGH WITH STORAGE
              STORAGE  RELEASE,LENGTH=STORAGE_LEN,ADDR=(R2)
              PR     ,                      * Reload ESA STAX
WARN_DYM_LIST        DS    0H
              B      FINE_DYM
ERROR_DYM_CODES      DS    0h
              B      FINE_DYM
STATIC_APF    DS     0H                     *
NOT_ESA43     DS     0H                     * =A(STATIC-APF)
NOT_ESA       L      R8,CVTAUTHL            * =A(static-APF)
              ST     R8,CVT_AUTHL           *.SAVE IT
              XR     R7,R7                  * CLEAR
              ICM    R7,B'0001',1(R8)       * Total APF entries
              ST     R7,APF_LENGTH          *.save it
              LA     R8,4(,R8)
             USING   APF_DSECT,R8
* do something with the old static tabel
             DROP    R8
              B      FINE
              CSVAPF MF=(L,CSVAPF)
STORADDR        DC       F'0'
                LTORG
STORAGE         DSECT
SAVE_AREA       DS       18F
APF_GETMAIN_LEN DS       F
APF_GETMAIN_ADDR DS      F
APF_RETCODE     DS       F
APF_RSNCODE     DS       F
APF_ENTRIES     DS       F
APF_LENGTH      DS       F
CVT_AUTHL       DS       F
DYNAMIC_APF_LIST DS      XL1
APFDSN          DS       CL44
APFSMS          DS       CL1
APFVOL          DS       CL6
APF_FORMAT      DS       CL1
                DS       0D
STORAGE_LEN     EQU      *-STORAGE
                CVT  DSECT=YES,LIST=NO.PREFIX=NO
                IHAXTLST
                YREGS
YES             EQU       C'Y'
NO              EQU       C'N'
                CSVAPFAA
 TITLE '>>> APF DSECT FOR STATIC TABLE <<<'
APF_DSECT       DSECT    WHAT THE APF TABLE IN MEMORY LOOKS LIKE ...
APF_LEN         DS       XL1           * ENTRIES LENGTH
APF_VOL         DS       CL6           * ENTRIES VOLSER
APF_DSN         DS       CL44          * ENTRIES DSN
*---------------------------------------------------------------------*
*                                                                     *
*    Sys/Stat for MVS is an integrated ISPF MVS search and display    *
*    facility that uses the latest technology to improve systems      *
*    programmers productvity.  Please call for a no obligation        *
*    evaluation.                                                      *
*                                                                     *
*    Advent Software                                                  *
*    340 West Butterfield Road                                        *
*    Suite 4B                                                         *
*    Elmhurst, IL 60126                                               *
*    (708) 279-5449                                                   *
*                                                                     *
*---------------------------------------------------------------------*
                END
//L.SYSLMOD DD DSN=&&TEMP(APFLIST),DISP=(,PASS),UNIT=VIO,
// DCB=SYS1.LINKLIB,SPACE=(TRK,(2,1,10))
