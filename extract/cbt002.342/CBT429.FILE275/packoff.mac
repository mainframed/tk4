//ASMHCL  PROC RENT=NORENT,AC=
//C       EXEC PGM=ASMA90,REGION=4M,
//       PARM=('TERM','OBJECT','NODECK','XREF(SHORT)','&RENT',
//       'LINECOUNT(9999)')
//STEPLIB  DD  DSN=HLA.SASMMOD1,DISP=SHR
//         DD  DSN=HLA.SASMMOD2,DISP=SHR
//SYSTERM  DD  SYSOUT=(,)
//SYSPRINT DD  SYSOUT=(,)
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSALLDA,SPACE=(CYL,(3,5))
//SYSIN    DD  DSN=NULLFILE,DISP=SHR
//SYSLIN   DD  DSN=&&OBJ,DISP=(,PASS),UNIT=SYSALLDA,SPACE=(CYL,(1,1)),
//         DCB=BLKSIZE=800
//*
//L       EXEC PGM=HEWLH096,REGION=1M,COND=(6,LT,C),
//        PARM='XREF,LET,LIST,NCAL,&RENT.&AC'
//SYSPRINT DD  SYSOUT=(,)
//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,(2,1))
//SYSLIN   DD  DSN=&&OBJ,DISP=(OLD,DELETE)
//         DD  DDNAME=SYSIN
//SYSLMOD  DD  DISP=(,PASS),UNIT=SYSALLDA,SPACE=(CYL,(1,,45)),
//         DSN=&&GO(GO)
// PEND
// EXEC ASMHCL
//C.SYSIN  DD   *
 TITLE 'ISPFUNPK - Unpack ISPF Packed Data'
*=====================================================================*
* Module Name: ISPFUNPK                                               *
*                                                                     *
*         VRM: 1.1.0                                                  *
*                                                                     *
* Operating Environment:  MVS/ESA                                     *
*                                                                     *
*  Request Function(s)/Purpose :                                      *
*                                                                     *
*            This routine processes ISPF packed data set (SYSIN) and  *
*            unpacks the results into a file (SYSPUNCH).              *
*                                                                     *
*                                                                     *
*  Register Usage:                                                    *
*             R0......                                                *
*             R1......                                                *
*             R2......                                                *
*             R3......                                                *
*             R4......                                                *
*             R5......                                                *
*             R6......                                                *
*             R7......                                                *
*             R8......                                                *
*             R9......                                                *
*             R10.....                                                *
*             R11.....                                                *
*             R12.....Base                                            *
*             R13.....Storage base                                    *
*             R14.....                                                *
*             R15.....                                                *
*       Note: All registers are saved at entry                        *
*                                                                     *
*  Macros:  CLOSE                                                     *
*           OPEN                                                      *
*           STORAGE                                                   *
*           YREGS                                                     *
*           WTO                                                       *
*           @24                                                       *
*           @31                                                       *
*                                                                     *
*  DSECTS:  DCBD                                                      *
*                                                                     *
*                                                                     *
*                                                                     *
*  Operating Attributes                                               *
*    AMODE: 31                                                        *
*    RMODE: 24                                                        *
*       AC: none                                                      *
*     RENT: NORENT                                                    *
*     REUS: NOREUS                                                    *
*                                                                     *
*  Pseudo Code                                                        *
*   - Open SYSIN file                                                 *
*   - Obtain SYSIN DCB LRECL and BLKSIZE                              *
*   - - Copy DCB Attributes to SYSPUNCH                               *
*   - Open SYSPUNCH FIle                                              *
*   - Loop:  Read  SYSIN                                              *
*            Call  PACKOFF                                            *
*            Write to SYSPUNCH                                        *
*            Branch to LOOP until EOF(SYSIN)                          *
*   - EOF-SYSIN                                                       *
*     - Close Files                                                   *
*   - Return                                                          *
*                                                                     *
*  Example                                                            *
*  // EXEC PGM=ISPFUNPK                                               *
*  //SYSIN    DD DISP=SHR,DSN=file.name,DCB=RECFM=U                   *
*  //SYSPUNCH DD SYSOUT(,)                                            *
*                                                                     *
*                                                                     *
*                                                                     *
* -----------------------  Change  Section  ------------------------- *
* 05/17/96 - All new                                             MVH  *
*                                                                     *
*=====================================================================*
              MACRO
&NAME         @24   &REG=14
&NAME         LA    &REG,*+06
              BSM   0,&REG
              MEND
              MACRO
&NAME         @31   &REG=14
&NAME         CNOP  2,4
              LA    &REG,*+14
              O     &REG,*+06
              BSM   0,&REG
              DC    X'80000000'
              MEND
ISPFUNPK      AMODE 31
ISPFUNPK      RMODE 24
ISPFUNPK      CSECT
              BAKR  R14,0                   Save stack
              LR    R12,R15                 Callers addr
              USING ISPFUNPK,R12            Addr pgm
              B     COPYWRITE
              DC    C'ISPFUNPK V1.1.0 &SYSDATE._&SYSTIME'
              DS    0F
COPYWRITE     EQU   *
              STORAGE  OBTAIN,              Get storage for save area  +
               LENGTH=STORAGE_LEN,LOC=BELOW (Below for DCB's)
              LR    R13,R1                  Point R13 to save area     +
                                            even though we don't use   +
                                            it someone might!
              XC    000(255,R13),000(R13)   clear
              XC    255(STORAGE_LEN-255,R13),255(R13)  clear
              ST    R13,04(,R1)             Save forward
              ST    R1,08(,R1)              Backwards
              LR    R13,R1                  Point to 18F words
              MVC   04(04,R1),=CL04'F1SA'   Storage macro
             USING  STORAGE,R13             Talk to our storage area
*  Copy DCB Models
              MVC   SYSIN(SYSINML),SYSINM
              MVC   SYSPUNCH(SYSPUNCHML),SYSPUNCHM
              MVC   OPEN(OPENMDLL),OPENMDL
              MVC   CLOSE(CLOSEMDLL),CLOSEMDL
*  Open Sysin FIle and obtain DCB attributes
              LA    R2,SYSIN
              LA    R1,OPEN
             USING  IHADCB,R2
              OPEN  ((R2),),MF=(E,(R1)),MODE=31
              LA    R1,SYSPUNCH             Syspunch DDName
              MVC   LRECL(02),DCBLRECL
              MVC   DCBLRECL-IHADCB(02,R1),DCBLRECL
              MVC   BLKSIZE(02),DCBBLKSI
              MVC   DCBBLKSI-IHADCB(02,R1),DCBBLKSI
             DROP   R2
*  Open Syspunch
              LA    R2,SYSPUNCH
              LA    R1,OPEN
              OPEN  ((R2),OUTPUT),MF=(E,(R1)),MODE=31
*  Read a 1st record from sysin
              BAS   R14,READ_SYSIN
              MVI   TENWORDS+00,00          reset pack/unpk flag
              MVI   TENWORDS+01,C'F'        RECFM=F
              B     FIRST_BLK               Process 1st block

LOOP          BAS   R14,READ_SYSIN
FIRST_BLK     MVC   TENWORDS+02(02),SYSIN+82  Pass blk length

UNPACK_REC    LA    R0,TENWORDS             UnPack work area
              L     R15,=A(PACKOFF)         UnPack routine
              BASR  R14,R15             <== Invoke "packoff" routine
              LTR   R15,R15                 Do I need another record?
              BNZ   LOOP                    Yes, get one
              LR    R3,R1                   Pass addr of unpk'd record
              LA    R2,SYSPUNCH             DCB
              @24
              PUT   (2),(3)                 Print it
              @31
              B     UNPACK_REC

*  Close our DCB's and go away
EOF_SYSIN     DS    0H
              @31   ,                       Back to A31  (a must)
              LA    R1,CLOSE                Close model
              LA    R2,SYSIN                SYSIN DCB
              LA    R3,SYSPUNCH             SYSPUNCH DCB
              CLOSE ((2),,(3)),MF=(E,(R1)),MODE=31
              STORAGE  RELEASE,             Release                   ++
               LENGTH=STORAGE_LEN,ADDR=(R13)
              PR     ,                      Reload stack
 TITLE '>>> Subroutines <<<'
READ_SYSIN    ST    R14,R14_SAVE
              LA    R1,SYSIN
              @24
              GET   (1)
              @31
              L     R14,R14_SAVE
              BR    R14
 TITLE '>>> Data Area <<<'
PATCH         DC    50CL02'AB'              Patch area
                                                           PRINT NOGEN
SYSINM        DCB   DSORG=PS,MACRF=GL,DDNAME=SYSIN,RECFM=U,           ++
               EODAD=EOF_SYSIN
SYSINML       EQU   *-SYSINM
SYSPUNCHM     DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPUNCH,RECFM=FB,       ++
               LRECL=0,BLKSIZE=0
                                                          PRINT ON,GEN
SYSPUNCHML    EQU   *-SYSPUNCHM
OPENMDL       OPEN  (,),MODE=31,MF=L
OPENMDLL      EQU   *-OPENMDL
CLOSEMDL      OPEN  (,),MODE=31,MF=L
CLOSEMDLL     EQU   *-CLOSEMDL
WTOM            WTO      '123456789012345678901234567890123456789012345X
               67890123456789012345678901234567890',                   X
               ROUTCDE=(11),DESC=(06),MF=L
WTOML           EQU      *-WTOM
 TITLE '>>> Storage Area <<<'
STORAGE         DSECT
SAVEAREA        DS    20F                 (Must be 1st 18 words)
R14_SAVE        DS      F
DWORD           DS      0D,D
SYSIN           DS      0D,CL(SYSINML)
SYSPUNCH        DS      0D,CL(SYSPUNCHML)
OPEN            DS      0D,CL(OPENMDLL)
CLOSE           DS      0D,CL(CLOSEMDLL)
TENWORDS        DS     12F
LRECL           DS       XL02
BLKSIZE         DS       XL02
WTO             DS       CL(WTOML)
                ORG      WTO
                DS       AL2                 * L'MESSAGE+4, =AL2(84)
                DS       XL2
WTOMSG          DS       CL(WTOML-4-4)
                DS       XL2
                DS       XL2
STORAGE_LEN     EQU     (((*-STORAGE)*16)/16)+08
 TITLE 'PACKOFF - Unpack ISPF Packed Data'

***********************************************************************
*
*        PACKOFF ROUTINE  - UnModified !!!
*
***********************************************************************
PACKOFF  CSECT
         SAVE  (14,12),,*              SAVE REGISTERS
         BALR  R10,0                   ,
         USING *,R10                   ,
         LR    R9,R0                   WORK AREA
         USING UNPKWORK,R9             WORK AREA
*
*              #1.  C'U' UNPACKED FILE
*              #2.  C'P' RE-ENTRY (NEXT LINE REQUESTED)
*              #3.  C'P' RE-ENTRY (FORCED EXIT FOR NEW INPUT REC)
*              #4.  X'00' FIRST TIME
*
         CLI   UNPKWORK,C'U'           IS IT UNPACKED?
         BE    UNPK990                 YES, GOBACK                 (#1)
         L     R2,UNPKSAVE+4           CURRENT POS IN INPUT RECORD
         CLI   UNPKSAVE,X'FF'          FORCED EXIT?
         BE    UNPK110                 NO, BUILD NEXT RECORD       (#2)
         LA    R2,0(,R1)               PASS RCD ADDR, CLEAR HI-BIT
         LR    R3,R2                   PASS ADDR
         AH    R3,UNPKWORK+2           ADD RECORD LENGTH
         LM    R15,R1,UNPKSAVE         RESTORE R14, R0, R1
         STM   R2,R3,UNPKSAVE+4        BEGIN/END OF INREC
         CLI   UNPKWORK,0              FIRST TIME?
         BNER  R15                     NO, RESUME PROCESSING       (#3)
*
*        FIRST TIME - DETERMINE WHETHER THIS IS A PACKED FILE      (#4)
*
UNPK050  MVI   UNPKWORK,C'U'           SET "PACK OFF" FLAG
         MVI   UNPKSAVE,00             INIT "PACK OFF" RETURN CODE
         CLI   UNPKWORK+1,C'F'         RECFM=F?
         BNE   UNPK990                 NO, QUIT
***      CLC   0(8,R2),=X'0001,40,C6,0000,0050'
         CLI   0(R2),00                PACKED FILE?
         BNE   UNPK990                 PACK OFF, JUMP
         CLI   1(R2),1                 CHECK LEVEL
         BNE   UNPK990                 PACK OFF, JUMP
***      CLC   3(1,R2),UNPKWORK+1      COMPARE RECFM
***      BNE   UNPK990                 PACK OFF, JUMP
***      CLC   6(2,R2),UNPKWORK+2      COMPARE LRECL
***      BNE   UNPK990                 PACK OFF, JUMP
*
         MVI   UNPKWORK,C'P'           SET "PACK ON" FLAG
         MVC   UNPKWHDR,0(R2)          SAVE HEADER
         LA    R2,8(,R2)               FIRST CONTROL BYTE
*NEW INREC
UNPK110  ICM   R0,B'1111',UNPKW255+4   LOAD/TEST ADDR OF RECORD AREA
         BNZ   UNPK200                 ALREADY ALLOCATED, JUMP
         GETMAIN R,LV=255              GET A RECORD AREA
         STM   R0,R1,UNPKW255          SAVE LEN/ADDR OF RECORD AREA
         LR    R0,R1                   PASS ADDRESS
*--LOOP
UNPK200  CL    R2,UNPKSAVE+4+4         END OF LINE REACHED?
         BL    UNPK205                 NOT YET, JUMP
         BAL   R14,UNPK600             READ NEW INPUT RECORD
*
UNPK205  CLI   0(R2),X'FF'             END OF FILE OR MEMBER?
         BE    UNPK980                 YES, NEXT MEMBER OR EODAD
         TM    0(R2),X'80'             IS IT A STRING?
         BO    UNPK220                 YES, JUMP
         CLI   0(R2),X'7A'             IS IT A REPEATED CHARACTER?
         BE    UNPK230                 YES, JUMP
*SPACES
UNPK210  SLR   R1,R1
         IC    R1,0(,R2)               GET REPEAT FACTOR -1
         LA    R1,1(,R1)               LENGTH OF STRING
         SLR   R3,R3
         ICM   R3,B'1000',UNPKWHDR+2   PICK UP CHARACTER TO REPEAT
         LA    R2,1(,R2)               BUMP UP PTR IN INPUT RCD
         B     UNPK290                 MOVE SPACES
*STRING
UNPK220  LA    R15,X'0000007F'         MASK FOR "NR"
         IC    R1,0(,R2)               STRING LENGTH-1+X80
         NR    R1,R15                  STRING LENGTH-1
         LA    R1,1(,R1)               LENGTH OF STRING
         LA    R2,1(,R2)               SKIP OVER CONTROL BYTE
         L     R3,UNPKSAVE+4+4         1ST BYTE AFTER INREC
         SR    R3,R2                   LENGTH REMAINING IN INPUT RECORD
         BZ    UNPK220L                CTL BYTE IS LAST BYTE, RE-READ
         CR    R3,R1                   BYTES LEFT, STRING LENGTH
         BNL   UNPK290                 NOT BROKEN, MOVE FULL STRING
*BROKEN STRING
         XR    R1,R3                   SWAP "FROM" AND "TO" LENGTHS
         XR    R3,R1                   SWAP "FROM" AND "TO" LENGTHS
         XR    R1,R3                   SWAP "FROM" AND "TO" LENGTHS
         MVCL  R0,R2                   MOVE 1ST PART OF STRING
         LR    R1,R3                   NUMBER OF BYTES LEFT
UNPK220L BAL   R14,UNPK600             READ NEXT INREC
         LR    R3,R1                   REMAINING LENGTH
         B     UNPK290                 MOVE REST OF STRING
*ALLCHAR
UNPK230  L     R1,UNPKSAVE+4+4         1ST BYTE AFTER INREC
         SLR   R1,R2                   REMAINING LENGTH
         LA    R15,0002                PREPARE "CR"
         CR    R1,R15                  2 BYTES LEFT?
         BE    UNPK232                 YES, JUMP
         BH    UNPK233                 AT LEAST 3, JUMP
*SPLIT ALLCHAR (1)
UNPK231  BAL   R14,UNPK600             READ NEXT INREC
         SLR   R1,R1
         IC    R1,0(,R2)               GET REPEAT FACTOR
         LA    R2,1(,R2)               BUMP UP OVER REPEAT FACTOR
         B     UNPK240                 MOVE ALL CHARS TO OUTPUT RECORD
*SPLIT ALLCHAR (2)
UNPK232  SLR   R1,R1
         IC    R1,1(,R2)               GET REPEAT FACTOR
         BAL   R14,UNPK600             READ NEXT INREC
         B     UNPK240                 MOVE ALL CHARS TO OUTPUT RECORD
*ALLCHAR (3)
UNPK233  SLR   R1,R1
         IC    R1,1(,R2)               GET REPEAT FACTOR
         LA    R2,2(,R2)               BUMP UP OVER 7A02
*
UNPK240  LA    R1,1(,R1)               "TO" LENGTH
         LA    R3,0001                 MOVE JUST ONE BYTE
         ICM   R3,B'1000',0(R2)        INSERT PADDING CHARACTER
*
*     MOVE  STRING - R0=UNPKW255 R1=OUTLEN R2=INADDR   R3=INLEN+PADDING
*
UNPK290  MVCL  R0,R2                   MOVE CHARS TO UNPKW255
UNPK291  L     R1,UNPKW255+4           OUTPUT RECORD
         AH    R1,UNPKWHDR+6           LRECL
         CR    R0,R1                   EOL REACHED YET?
         BL    UNPK200                 NO, LOOP
*--ENDLOOP
         ST    R2,UNPKSAVE+4           CURRENT POS IN INPUT RECORD
         MVC   24(4,R13),UNPKW255+4    PASS ADDR OF UNPACKED RECORD
         MVI   UNPKSAVE,X'FF'          INVALIDATE ADDRESS
         RETURN (14,12),RC=0           NORMAL EXIT
*
*        FORCED EXIT (TO REQUEST NEXT INPUT RECORD)
*
UNPK600  LR    R15,R14                 SAVE RETURN ADDRESS
         STM   R15,R1,UNPKSAVE         SAVE R14, R0, R1
         RETURN (14,12),RC=4
UNPK980  MVI   UNPKSAVE,X'00'          INVALIDATE ADDRESS
         RETURN (14,12),RC=8           END OF FILE (X'FF')
*
*        "PACK OFF" EXIT (SENDS ALTERNATIVELY RC0 AND RC 4)
*
UNPK990  SLR   R15,R15                 INVALIDATE ADDRESS
         IC    R15,UNPKSAVE            PICK UP RETURN CODE
         XI    UNPKSAVE,X'04'          TOGGLE RETCODE
         RETURN (14,12),RC=(15)        "PACK OFF" EXIT
UNPKWORK DSECT
         DS    X'00'               +0  X'00' C'P' C'U'
         DS    C'F'                +1  RECORD FORMAT
         DS    H'00'  80/2         +2  LENGTH OF INPUT RECORD/BLOCK
UNPKW255 DS    F,A                 +4  LENGTH/ADDRESS OF RECORD AREA
UNPKWHDR DS    0XL8,X'0001,40,C6,0000,0050'
UNPKSAVE DS    A(R15,R0,R1)            FORCED EXIT
         DS    (UNPKWORK+32-*)X        MAX SIZE IS 8 WORDS
         DS    CL30
         DCBD  DSORG=PS,DEVD=DA
         YREGS
*---------------------------------------------------------------------*
*                                                                     *
*    Sys/Stat for MVS is an integrated ISPF MVS search and display    *
*    facility that uses the latest technology to improve systems      *
*    programmers productvity.  Please call for a no obligation        *
*    evaluation.                                                      *
*                                                                     *
*    Advent Software                                                  *
*    340 West Butterfield Road                                        *
*    Suite 4B                                                         *
*    Elmhurst, IL 60126                                               *
*    (708) 279-5449                                                   *
*                                                                     *
*---------------------------------------------------------------------*
         END
//*L.SYSLMOD DD DISP=SHR,DSN=some.syslmod(ISPFUNPK)
