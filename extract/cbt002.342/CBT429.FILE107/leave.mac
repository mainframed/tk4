         MACRO
         LEAVE &BLOCK=,                 LEAVE BLOCK                    $
               &LOOP=,                  LEAVE LOOP                     $
               &IF=,                    LEAVE IF                       $
               &CASEBLK=                LEAVE CASEBLK
.*--------------------------------------------------------------------*
.*
.*  (C) COPYRIGHT 1983.  CLEMSON UNIVERSITY COMPUTER CENTER.
.*
.*  MACRO      LEAVE
.*
.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED
.*             PROGRAMMING MACROS - LEAVE
.*
.*  PURPOSE    STRUCTURED MACRO USED TO LEAVE A STRUCTURE.
.*
.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON
.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:
.*
.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED
.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.
.*
.*  ACTIVITY   11/01/83 MGG - NEW
.*             11/21/83 MGG - &ENBLK WAS UNDEFINED
.*              7/14/85 MGG - &PBSMWA WAS UNDEFINED                 @C1
.*
.*--------------------------------------------------------------------*
         GBLB  &#PBXA                   XA
         GBLB  &#PB370                  370
         GBLA  &#MNDX                   MASTER TAG INDEX
         GBLA  &#MLVL                   STRUCTURAL LEVEL
         GBLA  &#BMLVL(20)              STRUCTURAL LEVEL OF BLOCK
         GBLC  &#BNAME(20)              BLOCK NAME
         GBLA  &#BLVL                   BLOCK LEVEL
         GBLA  &#BNDX(20)               BLOCK TAG INDEX
         GBLC  &#BTYPE(20)              BLOCK TYPE
         GBLC  &#BAMODE(20)             ADDRESSING MODE OF BLOCK
         GBLC  &#BSV1(20)               BLOCK SAVE PARM 1
         GBLC  &#BSV2(20)               BLOCK SAVE PARM 2
         GBLC  &#BSV3(20)               BLOCK SAVE PARM 3
         GBLA  &#DMLVL(20)              STRUCTURAL LEVEL OF LOOP
         GBLC  &#DNAME(20)              LOOP NAME
         GBLA  &#DLVL                   LOOP LEVEL
         GBLA  &#DNDX(20)               LOOP TAG INDEX
         GBLA  &#IMLVL(20)              STRUCTURAL LEVEL OF IF
         GBLC  &#INAME(20)              IF NAME
         GBLA  &#ILVL                   IF LEVEL
         GBLA  &#INDX(20)               IF TAG INDEX
         GBLA  &#CMLVL(20)              STRUCTURAL LEVEL OF CASEBLK
         GBLC  &#CNAME(20)              CASEBLK NAME
         GBLA  &#CLVL                   CASELBK LEVEL
         GBLA  &#CNDX(20)               CASEBLK TAG INDEX
         GBLC  &#PBSMWA                 STRUCTURED MACRO WA TAG     @C1
         LCLA  &CTR                     WORK COUNTER
         LCLA  &ENBLK                   WORK VARIABLE
         LCLC  &NAME                    NAME OF THING LEAVING
         LCLC  &STRUC                   TYPE OF STRUCTURE LEAVING
         LCLC  &TAG                     LEAVE TAG NAME
         LCLC  &TAG2,&TAG3              WORK TAGS
         LCLC  &FTAG                    LEAVE FAIL TAG NAME
         LCLC  &STAG                    LEAVE SUCCESS TAG NAME
         LCLC  &LOGIC                   LOGIC FOR ##COND
         LCLA  &SMLVL                   LEAVE TO THIS STRUCTURAL LEVEL
&#MNDX   SETA  &#MNDX+1
.PRC1000 AIF   ('&BLOCK' EQ '').PRC2000
.*--------------------------------------------------------------------*
.* LEAVE BLOCK.
.*--------------------------------------------------------------------*
         AIF   ('&LOOP' NE '').ERR0001
         AIF   ('&IF' NE '').ERR0001
         AIF   ('&CASEBLK' NE '').ERR0001
&STRUC   SETC  'BLOCK'
&NAME    SETC  '&BLOCK'
         AIF   (&#BLVL LE 0).ERR0002
         AIF   ('&NAME' NE '*').PRC1100
&TAG     SETC  '#BE&#BNDX(&#BLVL)'
&SMLVL   SETA  &#BMLVL(&#BLVL)
         AGO   .PRC8000
.PRC1100 ANOP
&CTR     SETA  &#BLVL                   BLOCK LEVEL
.PRC1110 AIF   ('&NAME' EQ '&#BNAME(&CTR)').PRC1200
&CTR     SETA  &CTR-1
         AIF   (&CTR GT 0).PRC1110      LOOP
         AGO   .ERR0003
.PRC1200 ANOP
&TAG     SETC  '#BE&#BNDX(&CTR)'
&SMLVL   SETA  &#BMLVL(&CTR)
         AGO   .PRC8000
.PRC2000 AIF   ('&IF' EQ '').PRC3000
.*--------------------------------------------------------------------*
.* LEAVE IF.
.*--------------------------------------------------------------------*
         AIF   ('&LOOP' NE '').ERR0001
         AIF   ('&BLOCK' NE '').ERR0001
         AIF   ('&CASEBLK' NE '').ERR0001
&STRUC   SETC  'IF'
&NAME    SETC  '&IF'
         AIF   (&#BLVL LE 0).ERR0002
         AIF   ('&NAME' NE '*').PRC2100
&TAG     SETC  '#IE&#INDX(&#ILVL)'
&SMLVL   SETA  &#IMLVL(&#ILVL)
         AGO   .PRC8000
.PRC2100 ANOP
&CTR     SETA  &#ILVL                   IF LEVEL
.PRC2110 AIF   ('&NAME' EQ '&#INAME(&CTR)').PRC2200
&CTR     SETA  &CTR-1
         AIF   (&CTR GT 0).PRC2110      LOOP
         AGO   .ERR0003
.PRC2200 ANOP
&TAG     SETC  '#IE&#INDX(&CTR)'
&SMLVL   SETA  &#IMLVL(&CTR)
         AGO   .PRC8000
.PRC3000 AIF   ('&LOOP' EQ '').PRC4000
.*--------------------------------------------------------------------*
.* LEAVE LOOP.
.*--------------------------------------------------------------------*
         AIF   ('&IF' NE '').ERR0001
         AIF   ('&BLOCK' NE '').ERR0001
         AIF   ('&CASEBLK' NE '').ERR0001
&STRUC   SETC  'LOOP'
&NAME    SETC  '&LOOP'
         AIF   (&#DLVL LE 0).ERR0002
         AIF   ('&NAME' NE '*').PRC3100
&TAG     SETC  '#DE&#DNDX(&#DLVL)'
&SMLVL   SETA  &#DMLVL(&#DLVL)
         AGO   .PRC8000
.PRC3100 ANOP
&CTR     SETA  &#DLVL                   LOOP LEVEL
.PRC3110 AIF   ('&NAME' EQ '&#DNAME(&CTR)').PRC3200
&CTR     SETA  &CTR-1
         AIF   (&CTR GT 0).PRC3110      LOOP
         AGO   .ERR0003
.PRC3200 ANOP
&TAG     SETC  '#DE&#DNDX(&CTR)'
&SMLVL   SETA  &#DMLVL(&CTR)
         AGO   .PRC8000
.PRC4000 AIF   ('&CASEBLK' EQ '').PRC5000
.*--------------------------------------------------------------------*
.* LEAVE CASEBLK.
.*--------------------------------------------------------------------*
         AIF   ('&BLOCK' NE '').ERR0001
         AIF   ('&IF' NE '').ERR0001
         AIF   ('&LOOP' NE '').ERR0001
&STRUC   SETC  'CASEBLK'
&NAME    SETC  '&CASEBLK'
         AIF   (&#CLVL LE 0).ERR0002
         AIF   ('&NAME' NE '*').PRC4100
&TAG     SETC  '#CE&#CNDX(&#CLVL)'
&SMLVL   SETA  &#CMLVL(&#CLVL)
         AGO   .PRC8000
.PRC4100 ANOP
&CTR     SETA  &#CLVL                   CASEBLK LEVEL
.PRC4110 AIF   ('&NAME' EQ '&#CNAME(&CTR)').PRC4200
&CTR     SETA  &CTR-1
         AIF   (&CTR GT 0).PRC4110      CASEBLK
         AGO   .ERR0003
.PRC4200 ANOP
&TAG     SETC  '#CE&#CNDX(&CTR)'
&SMLVL   SETA  &#CMLVL(&CTR)
         AGO   .PRC8000
.PRC5000 AGO   .ERR0004                 NO KEYWORD SPECIFIED
.*--------------------------------------------------------------------*
.* FIND LEVEL OF ENCLOSING BLOCK.
.*--------------------------------------------------------------------*
.PRC8000 ANOP
&ENBLK   SETA  &#BLVL
.PRC8100 AIF   (&#BMLVL(&ENBLK) LE &SMLVL).PRC8110
&ENBLK   SETA  &ENBLK-1
         AIF   (&ENBLK GT 0).PRC8100
.*--------------------------------------------------------------------*
.* IF (ENCLOSEING BLOCK IS NOT INNERMOST BLOCK AND
.* (AMODE OF CONTAINING BLOCK IS NOT EQUATE TO INNERMOST BLOCK
.* AND (STRUCTURE WE ARE LEAVING IS NOT BLOCK OR (STRUCTURE
.* WE ARE LEAVING IS BLOCK AND IT'S ENCLOSING BLOCK IS SAME
.* ADDRESSING MODE))) OR BLOCKS CONTAINED SAVE REGISTERS) THEN
.* SPECIAL PROCESSING IS REQUIRED.
.*--------------------------------------------------------------------*
         AGO   .PRC8600                 OUTSIDE OF BLOCK
.PRC8110 AIF   (&ENBLK GE &#BLVL).PRC8600
         AIF   (&#BAMODE(&ENBLK) EQ &#BAMODE(&#BLVL)).PRC8190
         AIF   ('&STRUC' NE 'BLOCK').PRC8500
         AIF   (&#BLVL LE 1).PRC8500
         AIF   (&#BAMODE(&ENBLK) EQ &#BAMODE(&ENBLK-1)).PRC8500
.PRC8190 ANOP
&CTR     SETA  &ENBLK+1
.PRC8200 AIF   ('&#BSV1(&CTR)' NE '').PRC8500
&CTR     SETA  &CTR+1
         AIF   (&CTR LE &#BLVL).PRC8200
         AGO   .PRC8600
.*--------------------------------------------------------------------*
.* SPECIAL RESTORES AND/OR AMODE CHANGES NEEDED IF HERE.
.*--------------------------------------------------------------------*
.PRC8500 AIF   (N'&SYSLIST EQ 0).PRC9000
&STAG    SETC  '#LS&#MNDX'              SUCCESS TAG
&FTAG    SETC  '#LF&#MNDX'              FAIL TAG
&LOGIC   SETC  'N'                      NEGATIVE LOGIC
         AGO   .PRC8700
.*--------------------------------------------------------------------*
.* NO SPECIAL RESTORES OR AMODE CHANGES NEEDED IF HERE.
.*--------------------------------------------------------------------*
.PRC8600 AIF   (N'&SYSLIST EQ 0).PRC9800
&STAG    SETC  '&TAG'                   SUCCESS TAG NAME
&FTAG    SETC  '#LF&#MNDX'              FAIL TAG NAME
&LOGIC   SETC  'P'                      POSITIVE LOGIC
.*--------------------------------------------------------------------*
.* GENERATE CONDITION TESTS.
.*--------------------------------------------------------------------*
.PRC8700 ANOP
&CTR     SETA  N'&SYSLIST               GET NUMBER OF POSITIONAL PARMS
         ##COND &SYSLIST(1),&SYSLIST(2),                               $
               &SYSLIST(3),&SYSLIST(4),&SYSLIST(5),&SYSLIST(6),        $
               &SYSLIST(7),&SYSLIST(8),&SYSLIST(9),&SYSLIST(10),       $
               &SYSLIST(11),&SYSLIST(12),&SYSLIST(13),&SYSLIST(14),    $
               &SYSLIST(15),&SYSLIST(16),&SYSLIST(17),&SYSLIST(18),    $
               &SYSLIST(19),&SYSLIST(20),&SYSLIST(21),&SYSLIST(22),    $
               &SYSLIST(23),&SYSLIST(24),&SYSLIST(25),&SYSLIST(26),    $
               &SYSLIST(27),&SYSLIST(28),&SYSLIST(29),&SYSLIST(30),    $
               &SYSLIST(31),&SYSLIST(32),&SYSLIST(33),                 $
               &SYSLIST(34),&SYSLIST(35),&SYSLIST(36),                 $
               &SYSLIST(37),&SYSLIST(38),&SYSLIST(39),                 $
               &SYSLIST(40),&SYSLIST(41),&SYSLIST(42),                 $
               &SYSLIST(43),&SYSLIST(44),&SYSLIST(45),                 $
               &SYSLIST(46),&SYSLIST(47),&SYSLIST(48),                 $
               &SYSLIST(49),&SYSLIST(50),&SYSLIST(51),                 $
               F=&FTAG,S=&STAG,E=&CTR,B=1,L=&LOGIC,T=B
.*--------------------------------------------------------------------*
.* IF NO SPECIAL RESTORES OR AMODE CHANGES ARE NEEDED THEN GENERATE
.* LEAVE CONDITION FAIL TAG AND EXIT MACRO.
.*--------------------------------------------------------------------*
         AIF   ('&LOGIC' EQ 'P').PRC8800
&STAG    DS    0H                       LEAVE CONDITIONS MET
         AGO   .PRC9000
.PRC8800 ANOP
&FTAG    DS    0H                       LEAVE NOT DONE
         MEXIT
.*--------------------------------------------------------------------*
.* GENERATE SPECIAL RESTORES AND AMODE CHANGES.
.*--------------------------------------------------------------------*
.PRC9000 ANOP
&CTR     SETA  &#BLVL
.PRC9100 AIF   (&CTR LE &ENBLK).PRC9200
         AIF   ('&#BSV1(&CTR)' EQ '').PRC9190
         ##RST R15=NO,LVL=&CTR
.PRC9190 ANOP
&CTR     SETA  &CTR-1
         AGO   .PRC9100
.*--------------------------------------------------------------------*
.*  IF OPTIONS XA AND AMODE OF THE ENCLOSING BLOCK IS DIFFERENT FROM
.*  THE AMODE OF THE INNERMOST BLOCK AND (STRUCTURE IS NOT BLOCK
.*  STRUCTURE) OR (STRUCTURE IS BLOCK STRUCTURE AND BLOCK CONTAINING
.*  ENCLOSING BLOCK HAS THE SAME ADDRESS MODE AS THE ENCLOSING BLOCK)
.*  THEN GENERATE AMODE CHANGE.
.*--------------------------------------------------------------------*
.PRC9200 AIF   (NOT &#PBXA).PRC9300
         AIF   ('&#BAMODE(&#BLVL)' EQ '&#BAMODE(&ENBLK)').PRC9300
         AIF   ('&STRUC' NE 'BLOCK').PRC9205
         AIF   (&ENBLK LE 0).PRC9205
         AIF   ('&#BAMODE(&ENBLK-1)' NE '&#BAMODE(&ENBLK)').PRC9300
.*--------------------------------------------------------------------*
.*  IF OPTIONS XA AND 370, GENERATE TEST FOR XA
.*--------------------------------------------------------------------*
.PRC9205 ANOP
&TAG3    SETC  '#LV&#MNDX'
         ##SWREG R15                    SAVE WORK REGISTER
         AIF   (NOT &#PB370).PRC9210
         L     R15,16                   POINT R15 TO CVT
         TM    X'74'(R15),X'80'         RUNNING UNDER XA?
         BZ    &TAG3                    SKIP AMODE SETTING
.*--------------------------------------------------------------------*
.*  GENERATE CHANGE CODE.
.*--------------------------------------------------------------------*
.PRC9210 ANOP
         AIF   ('&#BAMODE(&ENBLK)' NE '31').PRC9220
&TAG2    SETC  '#LW&#MNDX'
         ICM   R15,B'1111',&TAG2        LOAD ADDR OF END OF STRUCTURE
         BSM   0,R15                    SET NEW MODE
&TAG2    DC    AL4(&TAG3+X'80000000')   AMODE 31
         AGO   .PRC9290
.PRC9220 LA    R15,&TAG3                LOAD ADDR OF END OF STRUCTURE
.PRC9230 AIF   ('&#BAMODE(&ENBLK)' NE 'ANY').PRC9250
         AIF   ('&#PBSMWA' NE '').PRC9240
         MNOTE 8,'SMWA= keyword needs to be specified on program block $
               macro'
         AGO   .PRC9250
.PRC9240 O     R15,&#PBSMWA+4           SET HIGH BIT TO AMODE AT ENTRY
.PRC9250 BSM   0,R15                    SET NEW MODE
.PRC9290 ANOP
&TAG3    ##RWREG R15
.PRC9300 ANOP
         B     &TAG                     LEAVE STRUCTURE
&FTAG    DS    0H                       LEAVE NOT DONE
         MEXIT
.*
.* BRANCH TO LEAVE TAG.
.PRC9800 ANOP
         B     &TAG                     LEAVE STRUCTURE
         MEXIT
.ERR0001 MNOTE 8,'Only one keyword can be specified on LEAVE'
         MEXIT
.ERR0002 MNOTE 8,'Nesting level for &STRUC is zero'
         MEXIT
.ERR0003 MNOTE 8,'&NAME is not an active &STRUC name'
         MEXIT
.ERR0004 MNOTE 8,'One keyword must be specified on LEAVE'
         MEND
