         MACRO
         ##PPPLI &NAME,                 NAME OF BLOCK                  $
               &OPTIONS,                OPTIONS                        $
               &SUBOPTS,                DEFAULT SUBROUTINE OPTIONS     $
               &BASEREG,                BASE REGS                      $
               &PWAREG,                 PWA REGS                       $
               &SVAREA,                 SAVE AREA TAG NAME             $
               &CPYRGHT,                COPYRIGHT NOTICE               $
               &AMODE,                  ADDRESSING MODE                $
               &RMODE,                  RESIDENCE MODE                 $
               &R1SAVE,                 PARM SAVE REGISTER             $
               &SMWA,                   STRUCTURED MACRO WORK AREA     $
               &DYNSIZE,                SIZE OF DYNAMIC STORAGE        $
               &DYNERR,                 DYNAMIC STORAGE ERROR EXIT     $
               &SWAREG,                 SWA BASE REGS                  $
               &PWASP                   PROGRAM WORK AREA SUB POOL
.*--------------------------------------------------------------------*
.*
.*  (C) COPYRIGHT 1986.  CLEMSON UNIVERSITY COMPUTER CENTER.
.*
.*  MACRO      ##PPPLI
.*
.*  TITLE      CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED
.*             PROGRAMMING MACROS - ##PPPLI
.*
.*  PURPOSE    INTERNAL MACRO USED AS THE DEFAULT FOR PROGRAM BLOCK
.*             PROLOG.
.*
.*  NOTE       SEE THE FOLLOWING DOCUMENT FOR MORE INFORMATION ON
.*             THIS AND OTHER STRUCTURED PROGRAMMING MACROS:
.*
.*             . CLEMSON UNIVERSITY COMPUTER CENTER STRUCTURED
.*               PROGRAMMING MACROS USER'S GUIDE AND REFERENCE.
.*
.*  ACTIVITY   12/18/86 MGG - BROKEN APART FROM BLOCK MACRO AND
.*                            RESTRUCTURED
.*              5/08/89 MGG - REMOVED &WAID AND &SDID PARAMETERS    @C1
.*                            AND CHANGED &PBWAID REFERENCES TO     @C1
.*                            &PWA.  ADDED PSD TAG.                 @C1
.*
.*--------------------------------------------------------------------*
         GBLC  &#BAMODE(20)             ADDRESSING MODE OF BLOCK
         GBLA  &#BLVL                   BLOCK LEVEL
         GBLA  &#BNDX(20)               BLOCK TAG INDEXS
         GBLA  &#MNDX                   LAST TAG INDEX USED
         GBLA  &#PB#C                   PROGRAM BLOCK NUMBER
         GBLC  &#PBAMOD                 AMODE OF PROGRAM
         GBLB  &#PBDSWA       ENDPWA SHOULD DEFINE STORAGE FOR PWA
         GBLB  &#PBDYN                  DYNAMIC STORAGE OPTION
         GBLB  &#PBLOCR                 DO LOCATR IN PROGRAM
         GBLB  &#PBLONG                 LONG PROGRAM OPTION
         GBLB  &#PBMAIN                 MAIN OPTION
         GBLC  &#PBNAME                 PROGRAM BLOCK CSECT NAME
         GBLA  &#PBPLMX                 MAX PL ENTRIES IN PROGRAM
         GBLB  &#PBPWA                  PWA OPTION
         GBLC  &#PBRMOD                 RMODE OF PROGRAM
         GBLC  &#PBSMWA                 TAG OF SMWA
         GBLB  &#PBVL                   DEFAULT VL OPTION
         GBLC  &PWA                     PWA ID                      @C1
         GBLC  &PSD                     PSD ID                      @C1
         GBLA  &#PBWAMX                 MAX SMWA IN PROGRAM
         GBLB  &#PBXA                   XA OPTION
         GBLB  &#PB370                  370 OPTION
         GBLB  &#SBSU                   SAVEUSING OPTION
         LCLA  &CTR                     WORK COUNTER
         LCLA  &NDX                     #MNDX VALUE AT START OF MACRO
         LCLB  &OCLRPWA                 CLEARPWA OPTION
         LCLB  &OID                     ID OPTION
         LCLB  &OMODE                   MODE OPTION
         LCLC  &OPT                     OPTIONS WORK FIELD
         LCLB  &OREGEQU                 REGEQU OPTION
         LCLC  &PGMN                    PROGRAM NAME
         LCLC  &PWAL                    TAG FOR DC FOR PWA LENGTH
         LCLC  &TAG                     WORK TAG
.*--------------------------------------------------------------------*
&NDX     SETA  &#MNDX                   SAVE INDEX VALUE TO USE
.*--------------------------------------------------------------------*
.*  RESET REGISTERS USED.  R12-R1 ARE RESERVED.
.*--------------------------------------------------------------------*
         ##MREG RESET                   RESET REGISTERS USED
         ##MREG USE,R12                 RESERVED FOR TCA
.*--------------------------------------------------------------------*
.*  SET FLAGS THAT ARE ALWAYS CONSTANT FOR ENVIRON=PLI
.*--------------------------------------------------------------------*
&#PBPWA  SETB  1  ALWAYS HAVE PWA
&#PBDYN  SETB  0  ALWAYS OFF
&#PBDSWA SETB  0  NEVER DS PROGRAM WORK AREA
&#PBMAIN SETB  0  NEVER USER MAIN
.*--------------------------------------------------------------------*
.*  SET DEFAULTS FOR GLOBAL OPTIONS.
.*--------------------------------------------------------------------*
&#PBXA   SETB  0
&#PB370  SETB  0
&#PBVL   SETB  0
&#PBLONG SETB  0
&#PBLOCR SETB  0
.*--------------------------------------------------------------------*
.*  SET VARIOUS VARIABLES.
.*--------------------------------------------------------------------*
&#PBPLMX SETA  0  RESET MAXIMUM PARMS TO ZERO
&#PBWAMX SETA  2
&#PBSMWA SETC  '#PBW&#PB#C'
&#SBUSWA SETB  0  RESET
&#SBSU   SETB  0  RESET
&#PBRMOD SETC  '&RMODE'
&#PBAMOD SETC  '&AMODE'
&#BAMODE(1) SETC '&AMODE'
.*--------------------------------------------------------------------*
.*  CHECK FOR IGNORED KEYWORDS
.*--------------------------------------------------------------------*
         ##IGMSG &SVAREA,SVAREA
         ##IGMSG &R1SAVE,R1SAVE
         ##IGMSG &SMWA,SMWA
         ##IGMSG &DYNSIZE,DYNSIZE
         ##IGMSG &DYNERR,DYNERR
         ##IGMSG &SWAREG,SWAREG
         ##IGMSG &PWASP,PWASP
.*--------------------------------------------------------------------*
.*  SET OPTIONS.
.*--------------------------------------------------------------------*
&CTR     SETA  1                        SET OPTIONS
.SPO0010 AIF   (N'&OPTIONS LT &CTR).SPO9999
&OPT     SETC  '&OPTIONS(&CTR)'
.SPO0020 AIF   ('&OPT' NE 'REGEQU').SPO0030
&OREGEQU SETB  1
         AGO   .SPO9000
.SPO0030 AIF   ('&OPT' NE 'NOREGEQU').SPO0040
&OREGEQU SETB  0
         AGO   .SPO9000
.SPO0040 AIF   ('&OPT' NE 'CLEARPWA').SPO0050
&OCLRPWA SETB  1
         AGO   .SPO9000
.SPO0050 AIF   ('&OPT' NE 'NOCLEARPWA').SPO0060
&OCLRPWA SETB  0
         AGO   .SPO9000
.SPO0060 AIF   ('&OPT' NE 'ID').SPO0070
&OID     SETB  1
         AGO   .SPO9000
.SPO0070 AIF   ('&OPT' NE 'NOID').SPO0100
&OID     SETB  0
         AGO   .SPO9000
.SPO0100 AIF   ('&OPT' NE 'MODE').SPO0110
&OMODE   SETB  1
         AGO   .SPO9000
.SPO0110 AIF   ('&OPT' NE 'NOMODE').SPO0120
&OMODE   SETB  0
         AGO   .SPO9000
.SPO0120 AIF   ('&OPT' NE 'XA').SPO0130
&#PBXA   SETB  1
         AGO   .SPO9000
.SPO0130 AIF   ('&OPT' NE 'NOXA').SPO0140
&#PBXA   SETB  0
         AGO   .SPO9000
.SPO0140 AIF   ('&OPT' NE '370').SPO0150
&#PB370  SETB  1
         AGO   .SPO9000
.SPO0150 AIF   ('&OPT' NE 'NO370').SPO0160
&#PB370  SETB  0
         AGO   .SPO9000
.SPO0160 AIF   ('&OPT' NE 'VL').SPO0170
&#PBVL   SETB  1
         AGO   .SPO9000
.SPO0170 AIF   ('&OPT' NE 'NOVL').SPO0180
&#PBVL   SETB  0
         AGO   .SPO9000
.SPO0180 AIF   ('&OPT' NE 'LOCTR').SPO0190
&#PBLOCR SETB  1
         AGO   .SPO9000
.SPO0190 AIF   ('&OPT' NE 'NOLOCTR').SPO0200
&#PBLOCR SETB  0
         AGO   .SPO9000
.SPO0200 AIF   ('&OPT' NE 'LONG').SPO0210
&#PBLONG SETB  1
         AGO   .SPO9000
.SPO0210 AIF   ('&OPT' NE 'NOLONG').SPO0220
&#PBLONG SETB  0
         AGO   .SPO9000
.SPO0220 ANOP
.SPO0500 AIF   ('&OPT' NE '*STDPLI').SPO0510
&OCLRPWA SETB  1         CLEARPWA OPTION
&OID     SETB  1         ID OPTION
&OREGEQU SETB  1         REGEQU OPTION
&OMODE   SETB  1         MODE OPTION
&#PBXA   SETB  0         NOXA OPTION
&#PB370  SETB  0         NO370 OPTION
&#PBVL   SETB  1         VL OPTION
&#PBLOCR SETB  1         LOCTR OPTION
&#PBLONG SETB  0         NOLONG OPTION
         AGO   .SPO9000
.SPO0510 ANOP
         MNOTE 8,'Invalid option &OPT'
.SPO9000 ANOP
&CTR     SETA  &CTR+1
         AGO   .SPO0010
.SPO9999 ANOP
.*------------------------------------------------------------------
.*  SET DEFAULT SUBROUTINE OPTIONS BASED ON SUBOPT
.*------------------------------------------------------------------
         ##SUBOPT &SUBOPTS,DEFAULT=YES
.*------------------------------------------------------------------
.*  CHECK OPTIONS AND KEYWORDS
.*------------------------------------------------------------------
         AIF   ('&BASEREG' EQ '').CHK0100
         AIF   ('&BASEREG(1)' EQ 'R11').CHK0100
         MNOTE 8,'With ENVIRON=PLI, first BASEREG must be R11'
.CHK0100 ANOP
         AIF   ('&BASEREG' EQ '').CHK0200
         AIF   ('&BASEREG(1)' EQ 'R11').CHK0200
         MNOTE 8,'With ENVIRON=PLI, first PWAREG must be R13'
.CHK0200 ANOP
&PGMN    SETC  '&NAME'
         AIF   ('&NAME' NE '').CHK0300
         MNOTE 8,'Name required on program block macro'
&PGMN    SETC  'TEMPNAM'
.CHK0300 ANOP
.*--------------------------------------------------------------------*
.*  GENERATE CSECT, AMODE, RMODE, AND LOCTR STATEMENTS.
.*--------------------------------------------------------------------*
.INT0000 ANOP
&#PBNAME SETC  '&PGMN.1'                                            @C1
&#PBNAME CSECT ,                        START OF CSECT
.INT0100 AIF   (NOT &#PBLOCR).INT0105
&#PBNAME LOCTR ,                        LOCTR FOR PROGRAM BLOCK INST
         PSD   TYPE=PARTIAL
&PSD     EQU   *                                                    @C1
         ENDPSD ,
.INT0105 AIF   ('&AMODE' EQ '' AND '&RMODE' EQ '').INT0200
         AIF   (&OMODE).INT0110
         MNOTE 4,'RMODE and AMODE ignored if MODE option not specified'
         AGO   .INT0200
.INT0110 AIF   (&#PBXA).INT0120
         MNOTE 4,'RMODE and AMODE ignored if XA option not specified'
         AGO   .INT0200
.INT0120 AIF   ('&AMODE' EQ '').INT0130
&PGMN    AMODE &AMODE                   ADDRESSING MODE
.INT0130 ANOP
&#PBAMOD SETC  '24'
         AGO   .INT0140
         AIF   ('&RMODE' EQ 'ANY').INT0140
&#PBAMOD SETC  '31'
.INT0140 AIF   ('&RMODE' EQ '').INT0150
&PGMN    RMODE &RMODE                   RESIDENCE MODE
         AGO   .INT0180
.INT0150 ANOP
&#PBRMOD SETC  '24'
.INT0180 AGO   .INT0900
.INT0200 ANOP
&#PBRMOD SETC  '24'
&#PBAMOD SETC  '24'
.INT0900 ANOP
*---------------------------------------------------------------------*
*  PL/I TO ASSEMBLER INITIALIZATION                                   *
*                                                                     *
*  MORE INFORMATION ABOUT THIS INITIALIZATION CAN BE FOUND IN THE     *
*  OS PL/I OPTIMIZING COMPILER: PROGRAMMER'S GUIDE AND                *
*  OS PL/I OPTIMIZING COMPILER: EXECUTION LOGIC'.                     *
*                                                                     *
*  THIS INITIALIZATION FOLLOWS RECOMMENDATIONS STATED IN THE          *
*  PROGRAMMER'S GUIDE.  THIS INITIALIZATION IS REENTRENT.             *
*                                                                     *
*---------------------------------------------------------------------*
.*--------------------------------------------------------------------*
.*  ENTRY POINT MUST BE PRECEEDED BY THE ENTRY POINT NAME.  THIS IS
.*  SO THE ERROR MESSAGE AND PLIDUMP CAN USE THE NAME IN THEIR PRINT.
.*--------------------------------------------------------------------*
&LENNAME SETA  (K'&PGMN/2)*2+1          GET ODD LENGTH >= ACTUAL
         DC    CL&LENNAME'&PGMN'        ENTRY NAME
         DC    AL1(&LENNAME)
.*--------------------------------------------------------------------*
.*  THE FOLLOWING TAG REPRESENTS THE START OF EXECUTABLE INSTRUCTIONS.
.*  IT IS THE REAL ENTRY TO CSECT.
.*--------------------------------------------------------------------*
         ENTRY &PGMN
&PGMN    EQU   *                        FIRST EXECUTABLE INSTRUCTION
         USING &PGMN,R15                ESTABLISH TEMPORARY PGM BASE
.*--------------------------------------------------------------------*
.* GENERATE ID AND CONSTANTS.
.*--------------------------------------------------------------------*
&TAG     SETC  '#BP&NDX'
         B     &TAG
         AIF   (NOT &OID).GID0010
         DC    C'&SYSDATE &SYSTIME '
         AIF   ('&CPYRGHT' EQ '').GID0010
         DC    C&CPYRGHT
.GID0010 ANOP
&PWAL    SETC  '#BJ&NDX'
&PWAL    DC    AL4(&PWA.PLLEN)                                      @C1
&TAG     DS    0H
.*--------------------------------------------------------------------*
.*  SAVE REGISTERS AND LOAD PROGRAM BASE
.*--------------------------------------------------------------------*
         USING &PWA,R13                 ESTABLISH BASE FOR DSA      @C1
         STM   R14,R12,12(R13)          SAVE REGS IN CALLER'S DSA
         LR    R11,R15                  LOAD ENTRY ADDRESS
         DROP  R15                      DROP TEMPORARY PROGRAM BASE
         ##LDBS &PGMN,&BASEREG,R11      ESTABLISH PROGRAM BASE
.*--------------------------------------------------------------------*
.*  GET STORAGE FOR NEW DSA AND INITIALIZE IT
.*--------------------------------------------------------------------*
         ICM   R0,B'1111',&PWAL         LOAD LENGTH OF DSA
         L     R1,&PWA.XANAB            LOAD ADDR OF NAB            @C1
         ALR   R0,R1                    ADD LENGTH OF DSA TO NAB
         CL    R0,12(,R12)              COMPARE TO ADDRESS OF LAST BYTE
&TAG     SETC  '#BS&NDX'
         BNH   &TAG                     SKIP CALL IF SPACE AVAILABLE
         L     R15,116(,R12)            LOAD AND BRANCH TO PLI STORAGE
         BALR  R14,R15                    OVERFLOW ROUTINE TO ATTEMPT
*                                         TO OBTAIN MORE STORAGE
         AIF   (NOT &OCLRPWA).PRC0200
&TAG     ICM   R2,B'1111',&PWAL         LOAD R2 WITH LENGTH OF NEW DSA
&TAG     SETC  ''
         LR    R3,R1                    POINT R3 TO NEW DSA
         SLR   R14,R14                  CLEAR R14
         SLR   R15,R15                  CLEAR R15
         MVCL  R2,R14                   CLEAR NEW DSA
.PRC0200 ANOP
&TAG     ST    R0,&PWA.XANAB-&PWA.(,R1) STORE NAB IN NEW DSA        @C1
         ST    R13,&PWA.XBCH-&PWA.(,R1) BACKCHAIN                   @C1
         MVC   &PWA.XALWS-&PWA.(4,R1),&PWA.XALWS COPY->LWS          @C1
.*--------------------------------------------------------------------*
.*  LOAD R13 WITH ADDRESS OF NEW DSA AND PRESERVE PL/I ERROR HANDLING.
.*--------------------------------------------------------------------*
         LR    R13,R1                   POINT R13 TO NEW DSA
         ##LDBS &PWA,&PWAREG,R13        ESTABLISH BASE FOR DSA      @C1
         MVI   &PWA.XF1A,X'80'          SET FLAGS IN DSA TO         @C1
         MVI   &PWA.XF1B,X'00'            PRESERVE PL/I             @C1
         MVI   &PWA.XCEC,X'91'            ERROR-HANDLEING           @C1
         MVI   &PWA.XCEC+1,X'C0'          IN THE ASSEMBLER ROUTINE  @C1
.SAM0000 ANOP
.*--------------------------------------------------------------------*
.*  GENERATE CODE TO SAVE ADDRESS MODE IF NEEDED
.*--------------------------------------------------------------------*
&TAG     SETC  '#BY&#BNDX(&#BLVL)'      MAKE UP TAG
         AIF   (NOT &#PBXA).SAM0200
         AIF   (NOT &#PB370).SAM0100
         L     R15,16                   POINT R15 TO CVT
         TM    X'74'(R15),X'80'         RUNNING UNDER XA?
         BZ    &TAG                     SKIP AMODE SETTING
.SAM0100 ANOP
         SLR   R15,R15                  CLEAR R15
         AIF   (NOT &#PBXA).SAM0110
         BSM   R15,0                    SET AMODE IN HIGH BIT
.SAM0110 ST    R15,&#PBSMWA+4           SAVE ADDRESS MODE
         AIF   (NOT &#PB370).SAM0200
&TAG     DS    0H
.SAM0200 ANOP
.SAM0999 ANOP
.*--------------------------------------------------------------------*
.*  RESTORE PARMAMETER LIST POINTER
.*--------------------------------------------------------------------*
         L     R1,&PWA.XBCH             POINT TO PREVIOUS DSA       @C1
         L     R1,&PWA.XS1-&PWA.(,R1) RESTORE R1 ON ENTRY           @C1
.*--------------------------------------------------------------------*
.*  GENERATE REGISTER EQUATES IF REQUESTED
.*--------------------------------------------------------------------*
.REQ0000 AIF   (NOT &OREGEQU).REQ0010
*---------------------------------------------------------------------*
*                       W A R N I N G                                 *
*                                                                     *
*  REGISTER 12 POINT TO THE TASK COMMUNICATIONS AREA (TCA) AND        *
*  SHOULD NEVER BE MODIFIED BY THE ASSEMBLER ROUTINE.                 *
*                                                                     *
*  REGISTER 13 POINT TO THE CURRENT DYNAMIC STORAGE AREA (DSA)        *
*  AND SHOULD NEVER BE MODIFIED BY THE ASSEMBLER ROUTINE.             *
*---------------------------------------------------------------------*
         ##REGS
.REQ0010 ANOP
.EXIT    MEND
