         MACRO
         ##PLIST &PL=,&DS=              PARAMETER LIST
.*--------------------------------------------------------------------*
.*
.*  (C) COPYRIGHT 1989.  CLEMSON UNIVERSITY COMPUTER CENTER.
.*
.*  MACRO      ##PLIST
.*
.*  TITLE      Clemson University Computer Center Structured
.*             Programming Macros - ##PLIST
.*
.*  PURPOSE    Internal macro used to build parameter lists.
.*
.*  SYNTAX     ##PLIST START{,PL=TAG}{,DS=PWA×SWA×WA}
.*             ##PLIST PARM,ADDR*
.*             ##PLIST PLIST,(ADDR+)
.*             ##PLIST END,VL×NOVL
.*
.*  NOTE       See the following document for more information on
.*             this and other structured programming macros:
.*
.*             . Clemson University Computer Center Structured
.*               Programming Macros User's Guide and Reference.
.*
.*  ACTIVITY    9/26/89 MGG - NEW
.*
.*--------------------------------------------------------------------*
         GBLA  &##PLIST__NUMBER_OF_PARAMETERS
         GBLA  &#BLVL                   BLOCK LEVEL
         GBLA  &#BMLVL(20)              BLOCK STRUCTURAL LEVEL
         GBLA  &#BNDX(20)               BLOCK TAG INDEXS
         GBLA  &#MNDX                   LAST TAG INDEX USED
         GBLA  &#PB#C                   CURRENT PROGRAM BLOCK NUMBER
         GBLA  &#PBPLMX                 MAXIMUM PL FOR PROGRAM
         GBLA  &#SB#C                   CURRENT SUBROUTINE BLOCK NUMBER
         GBLA  &#SBPLMX                 MAXIMUM PL FOR SUBROUTINE
         GBLB  &##PLIST__STARTED
         GBLB  &##PLIST__STD_PLIST
         GBLC  &##PLIST__PL1            PL PARAMETER 1
         GBLC  &##PLIST__PL2            PL PARAMETER 2
         GBLC  &##PLIST__DS             DS PARAMETER
         GBLB  &#PBDYN                  DYN OPTION FOR PROGRAM BLOCK
         GBLB  &#PBPWA                  PWA OPTION FOR PROGRAM BLOCK
         GBLB  &#PBVL                   VL OPTION
         GBLB  &#PBXA                   XA OPTION
         GBLB  &#PB370                  370 OPTION
         GBLB  &#SBSWA                  SWA OPTION FOR SUBROUTINE BLOCK
         GBLB  &#XAWARN                 XA WARNING MESSAGE ISSUED
         GBLC  &#BAMODE(20)             ADDRESSING MODE OF BLOCK
         GBLC  &#BNAME(20)              BLOCK NAMES
         GBLC  &#BPL1(20)               BLOCK PL PARAMETER 1
         GBLC  &#BPL2(20)               BLOCK PL PARAMETER 2
         GBLC  &#BTYPE(20)              BLOCK TYPE
         GBLC  &#PBAMOD                 AMODE OF PROGRAM
         GBLC  &#PBSMWA                 TAG OF SMWA
         LCLA  &CNT,&DISP               WORK VARIABLES
.* Require at least type parameter.
         AIF   (N'&SYSLIST GE 1).CHECK_10
         MNOTE 8,'Missing TYPE parameter.'
         MEXIT
.CHECK_10 ANOP
.*
.* Process based on type.
.*
         AIF   ('&SYSLIST(1)' EQ 'START').START
         AIF   ('&SYSLIST(1)' EQ 'PARM').PARM
         AIF   ('&SYSLIST(1)' EQ 'PLIST').PLIST
         AIF   ('&SYSLIST(1)' EQ 'END').END
         MNOTE 8,'Invalid TYPE parameter - &SYSLIST(1)'
         MEXIT
.*
.* Process type START.
.*
.START   ANOP
&##PLIST__NUMBER_OF_PARAMETERS SETA 0
&##PLIST__STD_PLIST            SETB 0
         AIF   (N'&SYSLIST EQ 1).START_10
         MNOTE 8,'Too many parameters for type START.'
.START_10 AIF  (NOT &##PLIST__STARTED).START_20
         MNOTE 8,'A parameter list build is already active.'
         MEXIT
.START_20 AIF  (N'&PL LE 2).START_30
         MNOTE 8,'Too many parameters on PL keyword.'
         MEXIT
.START_30 ANOP
&##PLIST__STARTED SETB 1
&##PLIST__PL1 SETC '&PL(1)'
&##PLIST__PL2 SETC '&PL(2)'
&##PLIST__DS  SETC '&DS'
.*   Process DS keyword.
         AIF   ('&##PLIST__DS' EQ '').DS_OK
.HAVE_DS AIF   ('&##PLIST__PL1' NE '').CHK_DS
         MNOTE 8,'First operand of PL keyword is required if DS keyword$
                is specified.'
         MEXIT
.CHK_DS  AIF   ('&##PLIST__DS' EQ 'PWA').DS_OK
         AIF   ('&##PLIST__DS' EQ 'SWA').DS_OK
         AIF   ('&##PLIST__DS' EQ 'WA').DS_OK
         MNOTE 8,'&##PLIST__DS is not valid on the DS keyword.'
         MEXIT
.DS_OK   ANOP
.*   Process PL keyword.
         AIF   ('&PL' NE '').PL_LA
&CNT     SETA  &#BLVL+1
.PL_LOOP AIF   (&CNT LE 1).PL_STD
&CNT     SETA  &CNT-1
         AIF   ('&#BPL1(&CNT)' EQ '').PL_LOOP
&##PLIST__PL1 SETC '&#BPL1(&CNT)'
&##PLIST__PL2 SETC '&#BPL2(&CNT)'
         AGO   .PL_LA
.PL_STD  ANOP
&##PLIST__STD_PLIST            SETB 1
         AIF   (NOT &#PBPWA).PL_ERR
         AIF   ('&#BTYPE(1)' EQ 'SUBROUTINE').PL_SUB
         AIF   ('&#BTYPE(1)' EQ 'ERREXIT').PL_PROG
         AIF   ('&#BTYPE(1)' EQ 'PROGRAM').PL_PROG
.PL_ERR  MNOTE 8,'The PL keyword must be specified on this macro or on $
               an enclosing BLOCK macro.'
         MEXIT
.PL_PROG ANOP
&##PLIST__PL1 SETC '#PBP&#PB#C'
         AGO   .PL_LA
.PL_SUB  ANOP
&##PLIST__PL1 SETC '#SBP&#SB#C'
.PL_LA   LA    R1,&##PLIST__PL1         POINT R1 TO PARAMETER LIST
         MEXIT
.*
.* Process type PARM.
.*
.PARM    AIF   (&##PLIST__STARTED).PARM_10
         MNOTE 8,'A ##PLIST start must be specified first.'
         MEXIT
.PARM_10 ANOP
&CTR     SETA  2
&DISP    SETA  &##PLIST__NUMBER_OF_PARAMETERS*4
.PRC2100 AIF   (&CTR GT N'&SYSLIST).PRC2900
&##PLIST__NUMBER_OF_PARAMETERS SETA &##PLIST__NUMBER_OF_PARAMETERS+1
         AIF   ('&SYSLIST(&CTR)' EQ '*').PRC2200
         AIF   ('&SYSLIST(&CTR)' EQ '').PRC2150
         AIF   ('&SYSLIST(&CTR)'(1,1) NE '(').PRC2150
         ST    &SYSLIST(&CTR),&DISP.(,R1)
         AGO   .PRC2200
.PRC2150 ##LA  R14,&SYSLIST(&CTR)     LOAD ADDRESS OF PARAMETER.
         ST    R14,&DISP.(,R1)        STORE ADDRESS IN PARAMETER LIST.
.PRC2200 ANOP
&DISP    SETA  &DISP+4
&CTR     SETA  &CTR+1
         AGO   .PRC2100
.PRC2900 ANOP
         MEXIT
.*
.* Process type PLIST.
.*
.PLIST   AIF   (&##PLIST__STARTED).PLIST_10
         MNOTE 8,'A ##PLIST start must be specified first.'
         MEXIT
.PLIST_10 AIF  (N'&SYSLIST LE 2).PLIST_20
         MNOTE 8,'Too many parameters for type PLIST.'
.PLIST_20 ANOP
&CTR     SETA  1
&DISP    SETA  &##PLIST__NUMBER_OF_PARAMETERS*4
.PRC3100 AIF   (&CTR GT N'&SYSLIST(2)).PRC3900
&##PLIST__NUMBER_OF_PARAMETERS SETA &##PLIST__NUMBER_OF_PARAMETERS+1
         AIF   ('&SYSLIST(2,&CTR)' EQ '*').PRC3200
         AIF   ('&SYSLIST(2,&CTR)' EQ '').PRC3150
         AIF   ('&SYSLIST(2,&CTR)'(1,1) NE '(').PRC3150
         ST    &SYSLIST(2,&CTR),&DISP.(,R1)
         AGO   .PRC3200
.PRC3150 ##LA  R14,&SYSLIST(2,&CTR)   LOAD ADDRESS OF PARAMETER.
         ST    R14,&DISP.(,R1)        STORE ADDRESS IN PARAMETER LIST.
.PRC3200 ANOP
&DISP    SETA  &DISP+4
&CTR     SETA  &CTR+1
         AGO   .PRC3100
.PRC3900 ANOP
         MEXIT
.*
.* Process type END.
.*
.END     AIF   (&##PLIST__STARTED).END_SOK
         MNOTE 8,'A ##PLIST start must be specified first.'
         MEXIT
.END_SOK ANOP
&##PLIST__STARTED SETB 0
         AIF   (N'&SYSLIST EQ 1).DEFAULT_VL
         AIF   (N'&SYSLIST EQ 2).END_NOK
         MNOTE 8,'Too many parameters for type END.'
.END_NOK AIF   ('&SYSLIST(2)' EQ 'VL').SET_VL
         AIF   ('&SYSLIST(2)' EQ 'NOVL').PAST_VL
         AIF   ('&SYSLIST(2)' EQ '').DEFAULT_VL
         MNOTE 8,'Invalid VL parameter - &SYSLIST(2)..'
.DEFAULT_VL AIF (NOT &#PBVL).PAST_VL
.SET_VL  AIF   (&##PLIST__NUMBER_OF_PARAMETERS EQ 0).PAST_VL
&DISP    SETA  &##PLIST__NUMBER_OF_PARAMETERS*4-4
         OI    &DISP.(R1),X'80'       SET ON HIGH BIT.
.PAST_VL ANOP
         AIF   (&##PLIST__STD_PLIST).DS_STD
         AIF   ('&##PLIST__DS' EQ 'WA').DS_WA
         AIF   ('&##PLIST__DS' EQ 'PWA').DS_PWA
         AIF   ('&##PLIST__DS' EQ 'SWA').DS_SWA
         AIF   ('&##PLIST__DS' EQ '').DS_SPECIFIED
         MNOTE 8,'Invalid DS value &DS.'
         MEXIT
.DS_STD  ANOP
         AIF   ('&#BTYPE(1)' EQ 'SUBROUTINE').UPD_SWA_MX
         AIF   (&#PBPLMX GE &##PLIST__NUMBER_OF_PARAMETERS).PAST_DS
&#PBPLMX SETA   &##PLIST__NUMBER_OF_PARAMETERS
         AGO   .PAST_DS
.UPD_SWA_MX ANOP
         AIF   (&#SBPLMX GE &##PLIST__NUMBER_OF_PARAMETERS).PAST_DS
&#SBPLMX SETA  &##PLIST__NUMBER_OF_PARAMETERS
         AGO   .PAST_DS
.DS_WA   AIF   ('&#BTYPE(1)' EQ 'SUBROUTINE').DS_SWA
.DS_PWA  AIF   ('&##PLIST__PL2' NE '').DS_PWA_20
         PWA   TYPE=PARTIAL
&##PLIST__PL1 DS (&##PLIST__NUMBER_OF_PARAMETERS.)F
         ENDPWA
         AGO   .PAST_DS
.DS_PWA_20 AIF (&##PLIST__NUMBER_OF_PARAMETERS LE &##PLIST__PL2).DS_PWA+
               _30
         MNOTE 8,'There are more parameters than the number specified w+
               ith the PL keyword.'
.DS_PWA_30 ANOP
         PWA   TYPE=PARTIAL
&##PLIST__PL1 DS (&##PLIST__PL2.)F
         ENDPWA
         AGO   .PAST_DS
.DS_SWA  AIF   ('&##PLIST__PL2' NE '').DS_SWA_20
         SWA   TYPE=PARTIAL
&##PLIST__PL1 DS (&##PLIST__NUMBER_OF_PARAMETERS.)F
         ENDSWA
         AGO   .PAST_DS
.DS_SWA_20 AIF (&##PLIST__NUMBER_OF_PARAMETERS LE &##PLIST__PL2).DS_SWA+
               _30
         MNOTE 8,'There are more parameters than the number specified w+
               ith the PL keyword.'
.DS_SWA_30 ANOP
         SWA   TYPE=PARTIAL
&##PLIST__PL1 DS (&##PLIST__PL2.)F
         ENDSWA
         AGO   .PAST_DS
.DS_SPECIFIED ANOP
         AIF   ('&##PLIST__PL2' NE '').PL2_SPEC
    AIF   (L'&##PLIST__PL1 GE &##PLIST__NUMBER_OF_PARAMETERS*4).PAST_DS
         MNOTE 8,'&##PLIST__PL1 is not large enough for the number of p+
               arameters specified.'
         AGO   .PAST_DS
.PL2_SPEC AIF  (&##PLIST__PL2 GE &##PLIST__NUMBER_OF_PARAMETERS).PAST_D+
               S
         MNOTE 8,'There are more parameters than the number specified w+
               ith the PL keyword.'
.PAST_DS ANOP
.EXIT    MEND
