  RESCUE                                     3/26/90    R. Stecker

   The RESCUE system is our Contingency operating system. This operating
  system is a subset of the Program Products on the Production system,
  created by copying the Production system's libraries. The major
  advantage to the RESCUE system is that the entire system resides on
  a single volume. This enables us to IPL the RESCUE system if a problem
  develops with the Production system that disables it. This could be
  caused by any number of hardware and/or software problems.
   The RESCUE system is not designed as an alternative Production system
  Many of the normal Program Products are not supported in the facility
  that creates the RESCUE system (CA-1, Top Secret, M204, COBOL, SAS,
  etc.). In addition, system performance under a normal load would be
  poor, at best. The RESCUE system is designed as a vehicle to fix the
  problem(s) with the Production system and get it back on the air.


  -Creating the RESCUE system

   The RESCUE system is created by assembling a macro (RESCUE) that
  creates the JCL for 5 jobs. These jobs are subsequently run to create
  the complete RESCUE system including Master Catalog, Page datasets,
  JES2 datasets, other system datasets and the libraries. The process
  includes the initialization of the volume, so any changes made to a
  prior version of RESCUE will be lost unless they are incorporated in
  the creation process. The process to (re)create the RESCUE system is
  as follows:

   1). Review the JCL to assemble the macro, along with member DOCNOTES
      in the macro library to see if any changes are required.  The JCL
      to assemble the macro is member RESQASM in this library (COMB.XA.
      GENLIB).  The macro and other documentation reside in
      'COMB.RESCUE.CNTL'.  Hopefully, the macro variables provide enough
      flexibility to prevent changes to the macro. The RESCUE members in
      PARMLIB, PROCLIB, etc. (those ending in RQ, RSQ, & RESQ) should
      also be reviewed to make sure that they will still work,
      considering the changes that have occurred since the last time the
      RESCUE system was created.  It may be a good idea to compress
      'COMB.RESCUE.CNTL' at this time to prevent a D37 when you assemble
      the macro, as it punches RESQJCL (approx. 1300 lines) into the
      macro library.

   2). Submit the JCL to assemble the macro (RESQASM).  This runs fairly
      quickly.  It creates (or overlays) member RESQJCL in the macro
      library, and prints the member just created. Both steps of this
      job should end with cond code 0000.

   3). Edit RESQJCL and remove the quotes in the job accounting info of
      the 5 RESCUEx jobs. So far, I don't know an easy way to get the
      macro to punch multiple fields into the job accounting without
      using quotes, and the JCL interpreter doesn't like them one bit,
      so they have to be removed prior to submitting the jobs.

   4). Submit member RESQSUB in the macro library. This submits RESQJCL
      via the internal reader. This is required due to STEPCATs in some
      of the jobs (that are commented out by our TSO SUBMIT exit).  This
      will put RESCUE0-4 on the input queue in HOLD (provided you coded
      &TYPRUN that way when you popped the macro).

   5). Release each job, one at a time. They must run in order, and the
      prior job must be done before the next job is released. Sometimes
      they appear out of order while on the input queue, so make sure
      to release them 0,1,2,3,4. Some notes on the RESCUEx jobs:
      -All steps of all jobs should end with 0000. Investigate any other
       return code.
      -If you have any problems with the RESCUEx jobs (unusual return
       codes, etc), it is usually easier to start over by submitting
       RESQSUB (and then running RESCUE0,1,etc.).  Some of the RESCUEx
       jobs do things that prevent them (or a previous RESCUEx job) from
       being rerun.
      -RESCUE0 inits the volume and requires a response from ICKDSF. If
       COMMAND=Y is used (and I recommend it for us), you will not need
       to dismount or mount the volume.
      -RESCUE2 does all of the IEBCOPYs and some other setup. This job
       usually takes about 8-10 min.
      -RESCUE4 is a verification and backup job. If you back up the
       volume, the job takes about 10-15 min. RESCUE4 also produces
       output that should be checked VERY carefully (or you may not be
       able to IPL RESCUE).  PLEASE NOTE that you can, if necessary,
       make changes to the PROCs, PARMs, etc.  on RESCUE, but by this
       time the backup tape has been created, and the changes will
       disappear anyway the next time RESCUE0-4 are run, so if there are
       any changes, I recommend that you change them in the Production
       system's libraries and start over with RESQSUB.  Check the
       following:
       +IEASYS00 is printed. Check each parameter, especially those that
        call in another member of PARMLIB at IPL time. A member list of
        RESCUE's PARMLIB is included in RESCUE4, so you can verify that
        the members exist. You may want to browse them to make sure that
        they are OK.
       +IEACMD00 is printed. Verify that it issues the appropriate
        commands.
       +The JES2 proc is printed. Make sure that you have brought all of
        the datasets in the proc with you, and check the INIT deck
        (//HASPPARM DD) to be sure all is well with it.
       +The VTAM proc is printed. Verify all datasets, as above. COMTEN
        loads are intentionally excluded.
       +VTAM0 is slightly different than the one used in production,
        since we did not include 'OCSE.XA.PARMLIB'. Verify that the
        appropriate commands are issued.
       +The logon proc, $RESCUE is printed. The proc was kept short to
        help insure that we can at least log on. It executes the CLIST
        'RESQISPF', which has most of the 'ALLOCs' for ISPF in it. This
        CLIST is in 'IPO88D.CMDPROC'. Make sure that all datasets in it
        are included. I may try to enhance RESCUE in the future to build
        this based on the products included. For now, though, you must
        check it (especially if DSN's and/or products change).
       +The VTAM start parms, ATCSTR00, are printed from VTAMLST. This
        allows us to start VTAM with the same command we use in
        production. Verify that the CONFIG (ATCCONxx) exists (a member
        list of VTAMLST is included), and that other parms look OK.
       +Check the VTOC listing(s). The short one is nice to verify that
        all the datasets you think you included are on the volume, and
        to make sure that they are all in 1 extent. The longer one can
        be used if more detailed info is needed.
       +Verify that the backup was successful.

   6). You're now ready to IPL.


  -IPLing the RESCUE system

   The RESCUE system IPL's very much like the production system with the
  exception that fewer things are started, and some things must be
  started manually, since we don't have TSSAUTO. To IPL:

  1) At the 'SYSTEM' console:
    PRESS:    ATTN

  2) The command line of the console will display: 'ATTN FLAG SET'
              If a System Activity Display was active, the above will
              be followed by 'SYSTEM ACTIVITY DISPLAY ENDED BY OPERATOR
              REQUEST'
     KEY: F OPRCTL
    PRESS: ENTER

  3) When the 'OPERATOR CONTROL' menu is displayed:
     KEY: O6
    PRESS: ENTER

  4) When the area in the lower right corner of the System Console
    displays 'PSW2= 00000000 00000000':
     KEY: L1
    PRESS: ENTER

  5) When the cursor is positioned under the field following
    '1-UNIT ADR/T':
     KEY: the address of the RESCUE volume, preceded by a '0' (4 chars)
    PRESS: ENTER

  6) When the command line displays 'CURSOR INPUT ACCEPTED. OPERATION
    COMPLETED':
     KEY: O7
    PRESS: ENTER - This starts the IPL.

  7) At the Operator Console:
    The console will display: 'IEA101A SPECIFY SYSTEM PARAMETERS ....'

    A) If this is the first IPL of this iteration of the RESCUE system:
      KEY: R 00,CLPA
      PRESS: ENTER

    B) If the RESCUE system has been IPL'ed before (and you're not
      adding anything to it that would require a CLPA):
      KEY: R 00
      PRESS: ENTER

  8) The console will display: 'IEA347A SPECIFY MASTER CATALOG PARAMETER
     KEY: R 00
    PRESS: ENTER

  9) The console will display: '$HASP426 SPECIFY OPTIONS - JES2 SP ....'

    A) If this is the first IPL of this iteration of the RESCUE system:
      KEY: R 00,COLD,FORMAT
      PRESS: ENTER
      The console will display: 'xx,$HASP441 REPLY 'Y' TO CONTINUE
          INITIALIZATION OR 'N' TO TERMINATE'
      KEY: R xx,Y   -where xx is the reply number associated with
          the $HASP441 message
      PRESS: ENTER
      The console will display: '$HASP400 ENTER REQUESTS'
      KEY: $S
      PRESS: ENTER

    B) If this iteration of the RESCUE system has been IPL'ed before:
      KEY: R 00,WARM,NOREQ
      PRESS: ENTER

 10)  The console will display: '$HASP099 ALL AVAILABLE FUNCTIONS
          COMPLETE'
     KEY: S VTAM
    PRESS: ENTER
    KEY: S VTAM0
    PRESS: ENTER

 11) The console will display 2 messages:
      A)'xx, IST051A ENTER VTAM START PARAMETERS' and
      B)'xx, REPLY U WHEN VTAM IS ACTIVE OR Z TO CANCEL THIS JOB'
     KEY: R xx    -where xx is the reply number associated with the
                   IST051A message
    PRESS: ENTER

 12) The console will display 'IST020I VTAM INITIALIZATION COMPLETE'
     KEY: R xx,U  -where xx is the reply number associated with the
                   message regarding VTAM being active
    PRESS: ENTER

 13) The console will display: '$HASP395 VTAM0 ended'
     KEY: D A,L
    PRESS: ENTER   - Verify that the proper tasks are active
    JES2, VTAM, LLA, RMF, TSO

 14) KEY: D NET,ID=S0LOC2
    PRESS: ENTER   - Verify that S0LOC2 is active

 15) You should now be able to logon to TSO


  -Logging on to the RESCUE system

   The local controller is the only one made active. Other VTAM access
  must be handled individually and only if necessary. Therefore, unless
  you go through such an exercise, our terminals and those in the
  Computer room will be the only ones available. To Logon, use your
  normal logon sequence with the following changes on the LOGON screen:
  1) Your password will be RESCUE
  2) You must change PROCEDURE to $RESCUE
  3) If you have a COMMAND, blank it out.

   This will bring up the 'CBIPO MASTER APPLICATION MENU'. Some of the
  products listed may not have been brought over to RESCUE, so don't be
  surprised if you attempt to go to SMP/E (or something else) and get an
  ISPF error or ABEND.  The important things (PDF, SDSF, etc.) should
  work if you have included them.
   From here, you shouldn't need me anymore.


  -Additional notes

   Each iteration of the RESCUE system must be test IPL'ed to be sure
  that it works.
   Even if RESCUE will not IPL when you need it (due to problems on
  itself), the backup tape enables you to do a single Stand-Alone
  Restore to have a system that will IPL.
   Even though many of our other products are not included, if there is
  a need for them, you have several ways of getting them. Since most of
  the rest of the DASD farm will probably be okay, you can either copy
  what you need over to RESCUE or just catalog the required datasets
  (NONVSAM only) in RESCUE's catalog (with 3.2, 3.4, ISMF, etc.).
   The same applies to PROCS in 'OCSE.PROCLIB'. Copy them into one of
  the PROCLIBs that RESCUE knows about. This won't affect the production
  system.
   If necessary, the various user catalogs can be IMPORTed to RESCUE's
  Master Catalog. However, ALIASes must be defined individually, and you
  must be careful since some datasets that are in user catalogs on the
  Production system are in the Master Catalog under RESCUE (like the
  ISPF profiles). This is not insurmountable, but be aware of it. It may
  be easier to locate the desired datasets and catalog them in RESCUE's
  Master Catalog (NONVSAM only).
   If ISMF is included, this is a better way to find datasets than 3.4,
  since you can specify things like 'STOR*' for a volume name, and it
  will search all STORxx volumes. If you're not already friendly with
  ISMF, get to know it better. As time goes on, IBM will be providing
  much of their Storage Management support via ISMF.


