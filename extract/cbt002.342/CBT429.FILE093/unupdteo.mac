*  UPDTE,UNUPDTE SYSTEM FROM PL1 MODS TAPE DATED 9/85.
*  SPLA NUMBER 360D.032.019 - FILE 4.
*
         PRINT GEN
*
*  PROGRAM NAME - UNUPDTE
*
*  FUNCTION     - CREATE A SEQUENTIAL DATASET FROM A PDS, WITH
*                 INTERSPERSED ./ ADD CARDS.
*
*  FILES:
*    SYSPRINT   - MESSAGES, INFORMATIONAL AND DIAGNOSTIC
*    SYSUT1     - INPUT PDS. EACH MEMBER AND/OR ALIAS WILL BE
*                 COPIED TO THE OUTPUT FILE.
*    SYSUT2     - OUTPUT SEQUENTIAL DATA SET. ALL MEMBERS ARE PLACED
*                 IN SEQUENTIAL FORM, WITH A PRECEDING ./ ADD LINE.
*                 DCB PARAMETERS MUST BE SUPPLIED.
*
*  RESTRICTIONS - THE RECORD FORMATS OF SYSUT1 AND SYSUT2 MUST BE THE
*                 SAME.
*
UNUPDTE  CSECT
         USING *,R15
         SAVE  (14,12),,*
         LA    R2,SAVE001              SET UP SAVEAREA LINKAGE
         ST    R13,SAVE001+4           *
         ST    R2,8(,R13)              *
         LR    R13,R2                  *
         DROP  R15
         USING SAVE001,R13
         B     SAVE001A                GO TO REAL PROGRAM
SAVE001  DS    18F
SAVE001A EQU   *
         OPEN  (SYSPRINT,(OUTPUT),SYSUT1,(INPUT),DIRECTRY,(INPUT))
         LA    R12,SYSUT1              THE INPUT DCB ADDRESS
         USING IHADCB,R12              TELL THE ASSEMBLER
         MVC   ALLDONE,DCBRECFM        TEST THE RECFM FOR VALIDITY
         NI    ALLDONE,X'C0'           ONLY THE F/V BITS
         TM    ALLDONE,X'C0'           *
         BNM   FAIL1                   *
         TM    DCBRECFM,X'80'          *IS IT FIXED?
         BO    FB1                     *BRANCH IF IT IS
         LA    R11,SYSUT2V             FOR LATER USE AS A BASE
         OPEN  (SYSUT2V,(OUTPUT))
         B     CM1                     AND CONTINUE ON THE COMMON PATH
FB1      DS    0H
         LA    R11,SYSUT2F             AGAIN FOR A BASE LATER
         OPEN  (SYSUT2F,(OUTPUT))
         CLC   DCBLRECL,DCBLRECL-IHADCB(R11)
         BE    CM1                     IF THEY ARE THE SAME LRECL
         PUT   SYSPRINT,WMSG1          TELL HIM THEY ARE DIFFERENT
CM1      DS    0H
         NC    ALLDONE,DCBRECFM-IHADCB(R11)
         BZ    FAIL2                   IF THEY'RE NOT THE SAME TELL HIM
         MVI   ALLDONE,0               A FLAG FOR LATER
NXTDIR   DS    0H
         GET   DIRECTRY                GET THE NEXT DIRECTORY BLOCK
         LR    R2,R1                   A POINTER TO NEXT MEMBER NAME
         LH    R9,0(,R2)               GET THE NUMBER OF BYTES USED
         S     R9,=F'2'                IT STARTS OUT COUNTING IT SELF
         LA    R2,2(,R2)               POINT TO CORRECT STARTING LOC
         BNP   NXTDIR                  IF NO DATA IN THIS DIRBLK
NEXTMEM  DS    0H
         CLI   0(R2),X'FF'             ARE WE DONE WITH THIS BLOCK?
         BE    NXTDIR                  BRANCH IF WE ARE
         MVC   MEMBADD,0(R2)           SAVE THE MEMBER NAME
         TM    DCBRECFM,X'80'          FIXED?
         BO    FB2                     BRANCH IF SO
         PUT   SYSUT2V,VADDLINE        WRITE THE ADD RECORD
         B     CM2                     AND REJOIN THE COMMON STREAM
FB2      DS    0H
         PUT   SYSUT2F                 GET A BUFFER FOR OUTPUT
         MVI   0(R1),C' '              CLEAR FIRST BYTE
         LH    R5,DCBLRECL-IHADCB(R12) SET UP CLEARING MVCL
         BCTR  R5,0                    *
         LA    R4,1(,R1)               *
         LA    R15,1                   *
         O     R15,=X'40000000'        *
         LR    R14,R1                  *
         MVCL  R4,R14                  *
         MVC   0(29,R1),FADDLINE       PUT THE ADD LINE IN BUFFER
CM2      DS    0H
         MVC   TTR,8(R2)               POINT TO THE RIGHT PLACE IN PDS
         POINT SYSUT1,TTR              *
         SR    R8,R8                   RECORD COUNTER
NXTBLOCK DS    0H
         READ  DECB,SF,SYSUT1,BLOCKIN
         CHECK DECB                    DID IT GET HERE OK?
         TM    DCBRECFM,X'80'          FIXED?
         BO    FB3                     GO IF SO
         L     R4,=A(BLOCKIN)          THE FIRST RECORD ADDRESS
         LH    R3,0(,R4)               GET THE LENGTH
         LA    R4,4(,R4)               MOVE TO THE 1ST RECORD
         S     R3,=F'4'                CORRECT FOR BCW
NEXTLINV DS    0H
         PUT   SYSUT2V,(R4)            WRITE THE OUTPUT RECORD
         LA    R8,1(,R8)               COUNT THE OUTPUT RECORDS
         LH    R15,0(,R4)              MOVE TO THE NEXT RECORD
         AR    R4,R15                  *
         SR    R3,R15                  *
         BP    NEXTLINV                *GO IF THERE IS MORE IN BLOCK
         B     NXTBLOCK                ELSE GET ANOTHER BLOCK
FB3      DS    0H
         L     R4,=A(BLOCKIN)          FIRST RECORD ADDRESS
         L     R1,DECB+16              THE IOB ADDRESS
         LH    R3,DCBBLKSI             THE MAXIMUM BLOCK SIZE
         SH    R3,14(,R1)              THE RESIDUAL COUNT
NEXTLINF DS    0H
         LH    R5,DCBLRECL             SOURCE RECORD LENGTH
         PUT   SYSUT2F                 GET AN OUTPUT BUFFER
         LR    R6,R1                   SAVE THE BUFFER ADDRESS
         LH    R7,DCBLRECL-IHADCB(,R11)     THE TARGET LENGTH
         O     R5,=X'40000000'         FILL CHARACTER
         MVCL  R6,R4                   MOVE INPUT RECORD TO OUTPUT BUFF
         LA    R8,1(,R8)               COUNT THE OUTPUT RECORDS
         SH    R3,DCBLRECL-IHADCB(,R11)
         BP    NEXTLINF                ANY DATA LEFT IN BUFFER
         B     NXTBLOCK                ELSE GET ANOTHER BLOCK
ENDMEM   DS    0H
         MVC   PRTMEM,0(R2)            PRINT AN INFORMATION LINE
         CVD   R8,DUBL                 *
         MVC   PRTCTR,=X'402020202020' *
         ED    PRTCTR,DUBL+5           *
         PUT   SYSPRINT,OUTLINE        *
         IC    R1,11(,R2)              THE NUMBER OF USER HALFWORDS
         N     R1,=F'31'               KILL THE TRASH BITS
         SLL   R1,1                    DOUBLE IT FOR BYTES
         LA    R1,12(,R1)              COMPUTE THE NEXT MEMBER'S DISP
         AR    R2,R1                   GET THE ADDRESS
         SR    R9,R1                   NUMBER OF BYTES REMAINING IN BLK
         BP    NEXTMEM                 IF SOME LEFT
         B     NXTDIR                  OTHERWISE
ENDDIR   DS    0H
         PUT   SYSPRINT,ALLDNMSG       SAY GOOD-BYE
         CLOSE (SYSUT1,,(R11),,SYSPRINT,,DIRECTRY)
         L     R13,4(,R13)             GO BACK TO THE CALLER(OS?)
         LM    R14,R12,12(R13)         *
         SR    R15,R15                 *
         BR    R14                     *
FAIL1    DS    0H
         PUT   SYSPRINT,MSG1           TELL WHY
         ABEND 1111,DUMP
FAIL2    PUT   SYSPRINT,MSG2           SAY WHY
         ABEND 2222,DUMP
SYNAD1   DS    0H
         LR    R5,R15                  ESTABLISH ADDRESSABILITY
         USING SYNAD1,R5               TELL THE ASSEMBLER
         SYNADAF ACSMETH=BPAM          GET THE DIAGNOSTIC MESSAGE
         MVC   SYNADLIN+1(62),50(R1)   MAKE IT PRINTABLE
         PUT   SYSPRINT,SYNADLIN       PRINT IT
         ABEND 999,DUMP
SYSPRINT DCB   BLKSIZE=121,LRECL=121,RECFM=FA,DSORG=PS,                *
               DDNAME=SYSPRINT,MACRF=PM
SYSUT1   DCB   DDNAME=SYSUT1,DSORG=PO,MACRF=R,EODAD=ENDMEM,            *
               SYNAD=SYNAD1
DIRECTRY DCB   BLKSIZE=256,LRECL=256,RECFM=F,DDNAME=SYSUT1,            *
               MACRF=GL,DSORG=PS,EODAD=ENDDIR
SYSUT2F  DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=PL
SYSUT2V  DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=PM
ALLDONE  DC    X'00'
SYNADLIN DC    CL121' '
ALLDNMSG DC    CL50'0',CL71'ALL PROCESSING COMPLETE'
VADDLINE DC    H'33,0'
FADDLINE DC    CL29'./ ADD LIST=ALL,NAME=????????'
         ORG   *-8
MEMBADD  DS    CL8
         ORG
         DS    0F
TTR      DC    XL3'00'
         DC    X'00'
OUTLINE  DC    CL121' '
         ORG   OUTLINE+1
         DC    C'MEMBER '
PRTMEM   DC    CL8' '
         DC    C' COPIED. NUMBER OF RECORDS'
PRTCTR   DC    CL6' '
         ORG
WMSG1    DC    CL121' TRUNCATION/PADDING WILL OCCUR. LRECL''S UNEQUAL'
MSG1     DC    CL121' RECRM NOT V OF F IN SYSUT1'
MSG2     DC    CL121' RECFM''S NOT THE SAME IN SYSUT1 AND SYSUT2'
DUBL     DC    D'0'
         LTORG
BLOCKIN  DS    CL32767
         IHADCB DSORG=PO
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
