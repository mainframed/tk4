         TITLE '   P D S L O A D    '
*$DOC@*****************************************************************
*                                                                     *
*        'PDSLOAD'                                                    *
*                                                                     *
***********************************************************************
******************************************************************* NWK
*   THIS VERSION OF THE PDSLOAD PROGRAM HAS BEEN MODIFIED WITH      NWK
*    A GLOBAL VARIABLE SO THE LRECL OF THE INPUT AND OUTPUT         NWK
*    DATASETS CAN BE CHANGED MERELY BY MODIFYING THE GLOBAL AND     NWK
*    REASSEMBLING THE PROGRAM.  AN EYECATCHER HAS BEEN ADDED SO     NWK
*    THAT YOU CAN SEE THE ASSEMBLED LRECL BY BROWSING THE LOAD      NWK
*    MODULE.  SEE LABEL "&LRECL".                                   NWK
*                                                                   NWK
*   YOU NEED TO REASSEMBLE THE PROGRAM EVERY TIME YOU WANT TO       NWK
*    CHANGE THE LRECL THAT THE PROGRAM TAKES.  (ADMITTEDLY IT'S     NWK
*    BETTER TO DO THIS WITH A PARM AT EXECUTION TIME.)  BUT THIS    NWK
*    WORKS.  (IT HAS NOT BEEN TESTED WITH LRECL MUCH LESS THAN 80.) NWK
*                                                                   NWK
*             S. GOLOB - NEWSWEEK - MOUNTAIN LAKES, N.J. - JULY 87  NWK
******************************************************************* NWK
*
*         WRITTEN BY. BILL GODFREY, PLANNING RESEARCH CORPORATION.
*         INSTALLATION. PRC COMPUTER CENTER INC, MCLEAN VA.
*         DATE WRITTEN. NOVEMBER 25 1980.
*         DATE UPDATED. MAY 28 1981.
*         ATTRIBUTES. RE-ENTRANT.
*
*         THIS PROGRAM CONVERTS A SEQUENTIAL DATA SET OF PDS
*         MEMBERS IN 'IEBUPDTE' FORMAT TO A PARTITIONED DATA SET.
*
*         THE IEBUPDTE UTILITY PROGRAM CAN DO THE SAME THING,
*         BUT THIS PROGRAM HAS THE FOLLOWING ADDED CAPABILITIES:
*         .  STORES SPF STATISTICS IN A MEMBER'S DIRECTORY ENTRY
*            IF THEY ARE PRESENT ON THE './ ADD' STATEMENT,
*         .  CAN GENERATE SPF STATISTICS IF NONE ARE PRESENT,
*         .  CAN SELECT ONE MEMBER FROM INPUT FILE,
*         .  RESTORES MODIFIED IEBUPDTE STATEMENTS WITHIN A MEMBER
*            (CHANGES '/.' BACK TO './').
*         .  DOES NOT LIST THE DATA IN THE MEMBER,
*         .  PRINTS NUMBER OF RECORDS FOR EACH MEMBER WRITTEN.
*
*         IF PARM='UPDTE(XX)' IS SPECIFIED, THEN ALL OCCURRENCES
*         OF THE 2 CHARACTERS IN PARENTHESES WILL BE CHANGED TO
*         './' BEFORE BEING WRITTEN TO THE PDS, IF THEY OCCUR
*         IN COLUMNS 1-2 OF THE DATA.  THIS IS USED IN CONJUNCTION
*         WITH ANOTHER PROGRAM WHICH CREATES IEBUPDTE-FORMAT
*         DATA SETS FROM A PDS, AND IN SO DOING CHANGES ALL
*         OCCURRENCES OF './' IN COLUMNS 1-2 OF THE DATA WITHIN
*         THE MEMBERS TO ANOTHER CONSTANT, SO IEBUPDTE AND THIS
*         PROGRAM WILL NOT TREAT THE DATA RECORDS AS CONTROL CARDS.
*         IEBUPDTE DOESNT CHANGE THE DATA BACK. THIS PROGRAM DOES.
*
*         LOG OF CHANGES.
*          28MAY81 - SUPPORT NAME= AS SECOND OPERAND (FOLLOWING SSI).
*          28MAY81 - SINGLE MEMBER MAY BE SPECIFIED IN PARM.
*                    PARM='S(ABC)' WILL SELECT MEMBER 'ABC' ONLY.
*          28MAY81 - PARM=SPF WILL FORCE SPF STATS TO BE GENERATED.
*                    IF SPF IS SPECIFIED IN PARM, IT MUST BE FIRST.
*                    IF UPDTE(XX) IS SPECIFIED, IT MUST BE LAST.
*
***********************************************************************
         EJECT
***********************************************************************
*
*         THE ONLY IEBUPDTE CONTROL STATEMENTS THAT ARE ACCEPTABLE
*         ARE THE ./ ADD STATEMENT AND THE ./ ALIAS STATEMENT.
*         THE 'NAME=' OPERAND MUST BE SPECIFIED AS THE FIRST OR
*         SECOND OPERAND (SOMETIMES SSI= IS SPECIFIED FIRST).
*         ANY OTHER IEBUPDTE OPERAND (EXCEPT SSI=) IS INVALID AND
*         WILL PREVENT SUBSEQUENT OPERANDS FROM BEING PROCESSED.
*
*         THESE ADD STATEMENTS WILL BE PROCESSED CORRECTLY -
*         ./ ADD NAME=XYZ
*         ./ ADD NAME=XYZ,SSI=0012C06A
*         ./ ADD SSI=1234ABCD,NAME=XYZ
*
*         IN ORDER FOR SPF STATISTICS TO BE STORED, THE './ ADD'
*         STATEMENT MUST LOOK LIKE THIS:
*
*            COL     DESCRIPTION
*            1-20    ./ ADD NAME=XXXXXXXX
*            21      BLANK
*            22-71   VVMM-YYDDD-YYDDD-HHMM-NNNNN-NNNNN-NNNNN-UUUUUUUUUU
*                    VER CREATE LASTMODIFY  SIZE  INIT   MOD   ID
*
*         THE 'LISTPDS' UTILITY PROGRAM (FROM NASA GODDARD) HAS
*         BEEN LOCALLY MODIFIED TO PUNCH AN IEBUPDTE DECK WITH
*         SPF STATISTICS IN THE ABOVE FORMAT. IT DOES NOT PUNCH
*         ./ ALIAS STATEMENTS, HOWEVER.
*
*         THE SPF DATA IS IN THE 'COMMENTS' AREA OF THE STATEMENT
*         SO THE INPUT COULD BE RUN THRU 'IEBUPDTE' SUCCESSFULLY.
*         IT WOULD JUST IGNORE THE SPF DATA.
*
*         THE FORMAT OF THE 50-BYTE SPF FIELD IS FIXED. EACH VALUE
*         MUST HAVE THE CORRECT NUMBER OF DIGITS (USE LEADING ZEROES
*         IF NECESSARY). ONLY THE 10-BYTE 'ID' FIELD AT THE END
*         MAY HAVE A VARIABLE LENGTH. NO IMBEDDED BLANKS ALLOWED.
*         VALUES MUST BE SEPARATED BY A HYPEN AS ABOVE. IF THE
*         DATA DOES NOT CONFORM TO THESE RULES, THE MEMBER WILL
*         STILL BE WRITTEN BUT WITHOUT SPF STATISTICS.
*
*         INPUT (SYSUT1) DCB ATTRIBUTES NEED NOT BE SPECIFIED IF
*         THE FILE HAS STANDARD LABELS. IF IT IS AN UNLABELED TAPE,
*         ONLY THE BLKSIZE NEED BE SPECIFIED (IF IT IS NOT &LRECL).
*
*         IF THE OUTPUT FILE DOES NOT HAVE ATTRIBUTES IN ITS LABEL
*         AND NONE ARE SPECIFIED IN THE SYSUT2 DD STATEMENT, THE
*         PROGRAM WILL SET THEM TO LRECL=&LRECL, BLKSIZE=39*&LRECL. NWK
*
*$DOC$*****************************************************************
         SPACE
         GBLC  &LRECL                                               NWK
&LRECL   SETC  '80'    U CHANGE IT. PROGRAM DEFAULTS TO LRECL=80    NWK
PDSLOAD  START
         USING *,R10,R11
         B     @PROLOG-*(,15)
         DC    AL1(11),CL11'PDSLOAD'
         DC    CL16' &SYSDATE &SYSTIME '
         DC    C' ASSEMBLED LRECL FOR INPUT AND OUTPUT IS &LRECL '  NWK
@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)
@PROLOG  STM   14,12,12(13)
         LR    R10,15              BASE REGISTER
         LA    R15,4095
         LA    R11,1(R15,R10)      BASE REGISTER
         LR    R2,R1
         L     R0,@SIZE
         GETMAIN R,LV=(0)
         ST    13,4(,1)
         ST    1,8(,13)
         LR    13,1
         USING @DATA,R13
         SPACE
         ZAP   REPORTPG,=P'0'      INITIAL PAGE COUNTER
         ZAP   REPORTLN,=P'0'      INITIAL LINE COUNTER
         ZAP   REPORTMX,=P'50'     INITIAL LINES PER PAGE
         MVI   REPORTO-1,X'40'     BLANK PROPOGATOR
         MVI   LINE-1,X'40'        BLANK PROPOGATOR
         MVI   STATUS,0
         MVI   FLAG1,0
         SPACE
         MVC   MEMSEL,=CL8' '
         MVC   UPDTE,=C'./'
         L     R1,0(,R2)           POINT TO PARM
         LH    R0,0(R1)            GET LENGTH OF PARM
         LTR   R0,R0
         BZ    PARMX
         LA    R1,2(,R1)           POINT TO PARM DATA
         CH    R0,=H'3'            IS PARM LONG ENOUGH FOR SPF
         BL    PARMSX              NO, BYPASS COMPARE
         CLC   0(3,R1),=C'SPF'     IS IT SPF
         BNE   PARMSX
         OI    FLAG1,GENSPF        YES GENERATE SPF STATISTICS
         LA    R1,3(,R1)
         SH    R0,=H'3'
         BZ    PARMX
         CLI   0(R1),C','
         BNE   PARMERR
         LA    R1,1(,R1)           POINT PAST COMMA
         SH    R0,=H'1'
         BZ    PARMX
PARMSX   EQU   *
PARMM    CH    R0,=H'3'            LONG ENOUGH FOR S(X
         BL    PARMERR             NO
         CLC   0(2,R1),=C'S('      IS IT S(
         BNE   PARMMX              NO, BRANCH
         LA    R1,2(,R1)           YES, POINT PAST PAREN
         SH    R0,=H'2'
         LA    R15,MEMSEL
         LA    R14,MEMSEL+8
PARMML   CLI   0(R1),C')'
         BE    PARMME
         CR    R15,R14             IS MEMBER NAME TOO LONG
         BNL   PARMMIG             YES, IGNORE EXTRA CHARACTERS
         MVC   0(1,R15),0(R1)      COPY ONE BYTE OF MEMBER NAME
         LA    R15,1(,R15)
         LA    R1,1(,R1)
PARMMIG  BCT   R0,PARMML
         B     PARMX
PARMME   LA    R1,1(,R1)           POINT PAST PAREN
         SH    R0,=H'1'
         BZ    PARMX
         CLI   0(R1),C','
         BNE   PARMERR
         LA    R1,1(,R1)           POINT PAST COMMA
         SH    R0,=H'1'
         BZ    PARMERR
PARMMX   EQU   *
         CH    R0,=H'9'            IS PARM LONG ENOUGH FOR UPDTE(XX)
         BNE   PARMERR
         CLC   0(6,R1),=C'UPDTE('
         BNE   PARMERR
         CLI   08(R1),C')'
         BNE   PARMERR
         MVC   UPDTE,6(R1)         LOOK FOR XX INSTEAD OF ./
         B     PARMX
PARMERR  ABEND 100
PARMX    EQU   *
         EJECT
************************************************************
*                                                          *
*        OPEN THE DCB'S                                    *
*                                                          *
************************************************************
         SPACE
         MVC   PRTDCBW(PRTDCBL),PRTDCB
         MVC   UT1DCBW(UT1DCBL),UT1DCB
         MVC   PDSDCBW(PDSDCBL),PDSDCB
         LA    R3,PRTDCBW
         LA    R4,UT1DCBW
         LA    R5,PDSDCBW
         SPACE
         IC    R0,EXLST(,R3)
         LA    R14,PRTEXLST
         ST    R14,EXLST(,R3)
         STC   R0,EXLST(,R3)       SYSPRINT EXLST=PRTEXLST
         SPACE
         LA    R0,PRTEXO
         ST    R0,0(,R14)
         MVI   0(R14),X'85'        DCB EXIT
         SPACE
         IC    R0,EODAD(,R4)
         LA    R14,EODUT1
         ST    R14,EODAD(,R4)
         STC   R0,EODAD(,R4)       SYSUT1 EODAD=EODUT1
         SPACE
         IC    R0,EXLST(,R4)
         LA    R14,UT1EXLST
         ST    R14,EXLST(,R4)
         STC   R0,EXLST(,R4)       SYSUT1 EXLST=PDSEXLST
         SPACE
         LA    R0,UT1EXO
         ST    R0,0(,R14)
         MVI   0(R14),X'85'        DCB EXIT
         SPACE
         IC    R0,EXLST(,R5)
         LA    R14,PDSEXLST
         ST    R14,EXLST(,R5)
         STC   R0,EXLST(,R5)       SYSUT2 EXLST=PDSEXLST
         SPACE
         LA    R0,UT2EXO
         ST    R0,0(,R14)
         MVI   0(R14),X'85'        DCB EXIT
         SPACE
         LA    R6,OPEN
         MVI   0(R6),X'80'
         SPACE
         OPEN  ((R3),OUTPUT),MF=(E,(R6))
         SPACE
         TM    OFLGS(R3),X'10'
         BO    OKPRT
         LA    R15,16
         B     EXIT
PRTEXO   CLC   BLKSI(2,R1),=H'0'
         BNER  R14
         MVC   BLKSI(2,R1),LRECL(R1)
         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FBA TO FA
         BR    R14
OKPRT    OI    STATUS,PRT          SYSPRINT IS OPEN
         SPACE
         OPEN  ((R4),INPUT),MF=(E,(R6))
         SPACE
         TM    OFLGS(R4),X'10'
         BO    OKUT1
         LA    R15,16
         B     EXIT
UT1EXO   CLC   BLKSI(2,R1),=H'0'   IS BLKSIZE SPECIFIED
         BNER  R14                 YES, RETURN
         MVC   BLKSI(2,R1),LRECL(R1)  NO, DEFAULT IS UNBLOCKED
         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FB TO F
         BR    R14                 RETURN
OKUT1    OI    STATUS,UT1          SYSUT1 IS OPEN
         SPACE
         OPEN  ((R5),OUTPUT),MF=(E,(R6))
         SPACE
         TM    OFLGS(R5),X'10'
         BO    OKUT2
         LA    R15,16
         B     EXIT
UT2EXO   CLC   BLKSI(2,R1),=H'0'
         BNER  R14
         MVC   BLKSI(2,R1),=AL2(39*&LRECL)
         BR    R14
OKUT2    OI    STATUS,UT2          SYSUT2 IS OPEN
         SPACE
         LH    R0,BLKSI(,R5)
         SLL   R0,1                DOUBLE BLKSIZE
         ST    R0,FREEM
         GETMAIN R,LV=(0)
         ST    R1,FREEM+4
         ST    R1,PUTPDSX          BUFFER 1 ADDRESS
         ST    R1,PUTPDSX+4        BUFFER 1 ADDRESS
         AH    R1,BLKSI(,R5)
         ST    R1,PUTPDSY          BUFFER 2 ADDRESS
         ST    R1,PUTPDSY+4        BUFFER 2 ADDRESS
         LH    R0,LRECL(,R5)       GET LRECL
         LTR   R0,R0               IF LRECL ZERO
         BNZ   *+8                  THEN
         LH    R0,BLKSI(,R5)         USE BLKSI AS LRECL
         SR    R1,R0               BACK UP ONE RECORD
         ST    R1,PUTPDSX+8        LAST RECORD IN BUFFER 1
         AR    R1,R0               POINT TO BUFFER 2
         AH    R1,BLKSI(,R5)       END OF BUFFER 2
         SR    R1,R0               BACK UP 1 RECORD
         ST    R1,PUTPDSY+8        LAST RECORD IN BUFFER 2
         LA    R1,PDSDECB1
         MVC   0(PDSDECBL,R1),PDSDECB
         ST    R1,PUTPDSX+12
         LA    R1,PDSDECB2
         MVC   0(PDSDECBL,R1),PDSDECB
         ST    R1,PUTPDSY+12
         SPACE
         MVC   LINE,LINE-1
         MVC   MEMBER,=CL8' '      BLANK OUT MEMBER NAME
         SR    R1,R1
         ST    R1,SEQ
         ST    R1,UPR
         BAL   R14,REPORT          FORCE A HEADER
         EJECT
************************************************************
*                                                          *
*        READ AN INPUT RECORD                              *
*                                                          *
************************************************************
         SPACE
READ     EQU   *
         GET   (R4),INREC
         SPACE
         L     R1,COUNTIN
         A     R1,=F'1'
         ST    R1,COUNTIN
         MVC   LINE,LINE-1
         CLC   INREC(2),=C'./'
         BNE   COPY
         SPACE
************************************************************
*                                                          *
*         PARSE THE CONTROL STATEMENT                      *
*                                                          *
************************************************************
         SPACE
         LA    R15,INREC           POINT TO COLUMN 1
         LA    R3,72-1             LENGTH CODE OF CONTROL STATEMENT
         LA    R6,ODL              POINT TO OPERAND DESCRIPTOR LIST
         XC    0(ODLL,R6),0(R6)    ZERO THE ODL
         SR    R1,R1               INSURE HI ORDER BYTE ZERO
         LA    R0,ODLL/8-1         NUMBER OF ENTRIES IN O.D.L.
*                                  MINUS 1 (LAST ODE WILL REMAIN ZERO)
         B     LOOP
TRTNONBL TRT   0(0,R15),TABNONBL   (EXECUTED)
TRTBLANK TRT   0(0,R15),TABBLANK   (EXECUTED)
LOOP     XC    0(8,R6),0(R6)       ZERO THE OPERAND DESCRIPTOR ENTRY
         EX    R3,TRTNONBL         FIND A NONBLANK
         BZ    DONE                BRANCH IF ALL BLANKS
         LR    R14,R1              GET ADDRESS OF STRING
         SR    R14,R15             GET LENGTH OF PRECEDING BLANKS
         SR    R3,R14              GET LENGTH OF REMAINING TEXT
         LR    R15,R1              GET ADDRESS OF NONBLANK
         EX    R3,TRTBLANK         FIND A BLANK
         BZ    LAST                BRANCH IF NOT FOUND
         LR    R14,R1              GET ADDRESS OF BLANK
         SR    R14,R15             GET LENGTH OF FIELD
         OI    6(R6),X'80'         OPERAND PRESENT
         ST    R15,0(,R6)          ADDRESS OF OPERAND
         STH   R14,4(,R6)          LENGTH OF OPERAND
         SR    R3,R14              GET LENGTH CODE OF REMAINING TEXT
         BZ    DONE                BRANCH IF ONE TRAILING BLANK
         LA    R6,8(,R6)           POINT TO NEXT O.D.E.
         LR    R15,R1              POINT TO BLANK
         BCT   R0,LOOP
         B     DONE
LAST     LA    R14,1(,R3)          GET LENGTH
         OI    6(R6),X'80'         OPERAND PRESENT
         ST    R15,0(,R6)          ADDRESS OF OPERAND
         STH   R14,4(,R6)          LENGTH OF OPERAND
DONE     EQU   *
         SPACE
************************************************************
*                                                          *
*         DETERMINE TYPE OF CONTROL STATEMENT              *
*                                                          *
************************************************************
         SPACE
         LA    R6,ODE1             POINT TO FIRST O.D.E.
         TM    6(R6),X'80'         ANYTHING PRESENT
         BZ    COPY                BRANCH IF WHOLE STATEMENT BLANK
         L     R1,0(,R6)           POINT TO FIRST STRING
         LH    R15,4(,R6)          GET LENGTH OF STRING
         LA    R0,3                MAX VALID LENGTH
         CR    R15,R0              IS STRING TOO LONG ?
         BH    COPY                BRANCH IF TOO LONG
         SLL   R15,2               MULTIPLY LENGTH BY 4
         B     *(R15)              BRANCH TO ONE OF NEXT 7
         B     COPY                1 CHAR
         B     CONTROL             2 CHAR
         B     COPY                3 CHAR
         SPACE
COPY     EQU   *
         CLI   MEMBER,C' '         HAS A ./ADD RECORD BEEN READ
         BE    COPYERR             NO, PRINT A MESSAGE
         LA    R1,1
         A     R1,SEQ              COUNT THE RECORDS IN THIS MEMBER
         ST    R1,SEQ
         SPACE
         TM    FLAG1,SELECT        ARE WE SELECTING THIS MEMBER
         BZ    READ                NO, BRANCH
         SPACE
*        MVC   INREC+72(8),=C'00000000'
*        CVD   R1,DOUBLE
*        OI    DOUBLE+7,X'0F'
*        UNPK  INREC+72(5),DOUBLE+5(3)
         SPACE
         CLC   INREC(2),UPDTE      IS THIS XX OF UPDTE(XX)
         BNE   NOTUPDTE            NO, SKIP MVC
         MVC   INREC(2),=C'./'     YES, CHANGE TO ./
         LA    R1,1
         A     R1,UPR              COUNT THE MODIFIED RECORDS
         ST    R1,UPR
NOTUPDTE EQU   *
         SPACE
         BAL   R14,PUTPDS
         B     READ
         SPACE
COPYERR  TM    STATUS,COPYM        HAS MESSAGE BEEN ISSUED?
         BO    READ                YES, BRANCH
         OI    STATUS,COPYM
         MVC   LINE,LINE-1
         MVC   LINE+1(24),=C'SKIPPING FOR ./ ADD CARD'
         BAL   R14,REPORT
         B     READ
         EJECT
************************************************************
*                                                          *
*         WRITE A LOGICAL RECORD TO THE PDS                *
*                                                          *
************************************************************
         SPACE
PUTPDS   LM    R6,R9,PUTPDSX       FIRST, CURRENT, LAST, DECB
         MVC   0(&LRECL,R7),INREC  MOVE RECORD INTO BLOCK
         CR    R7,R8               LAST RECORD IN BLOCK
         BE    PUTPDS1             YES, GO WRITE THE BLOCK
         LA    R7,&LRECL.(,R7)     NO, BUMP CURRENT POINTER
         ST    R7,PUTPDSX+4        SAVE SLOT ADDRESS
         BR    R14                 RETURN
PUTPDS1  ST    R14,PUTPDSR
         TM    STATUS,DECB         ANY WRITES OUTSTANDING
         BZ    PUTPDS2             NO, BRANCH
         L     R1,PUTPDSY+12       GET LAST DECB
         CHECK (1)
PUTPDS2  EQU   *
         WRITE (R9),SF,(R5),(R6),MF=E
         MVC   PUTPDSX(16),PUTPDSY SWAP
         STM   R6,R9,PUTPDSY       SWAP
         ST    R6,PUTPDSY+4
         OI    STATUS,DECB
         L     R14,PUTPDSR
         BR    R14
         EJECT
************************************************************
*                                                          *
*         PROCESS EACH ./ STATEMENT                        *
*                                                          *
************************************************************
         SPACE
CONTROL  BAL   R14,STOW            FINISH PREVIOUS MEMBER
         MVC   MEMBER,=CL8' '      RESET
         NI    STATUS,255-COPYM     RESET
         NI    STATUS,255-SPF        RESET
         NI    STATUS,255-SSI         RESET
         SR    R1,R1                   RESET
         ST    R1,SEQ                   RESET
         ST    R1,UPR                    RESET
         NI    FLAG1,255-SELECT           RESET
         SPACE
         MVC   LINE,LINE-1         PRINT
         MVC   LINE+1(72),INREC     THE
         BAL   R14,REPORT            ./ADD STATEMENT
         CLC   0(12,R1),=C'./ ADD NAME='
         BE    SIMPLE
         LA    R6,ODE2             POINT TO SECOND O.D.E.
         TM    6(R6),X'80'         ANYTHING PRESENT
         BZ    COPY                BRANCH IF NO OPERAND
         CLC   4(2,R6),=H'3'       LENGTH OF 'ADD'
         BNE   NOTADD
         L     R1,0(,R6)           POINT TO OPERAND
         CLC   0(3,R1),=C'ADD'
         BNE   COPY
         SPACE
************************************************************
*                                                          *
*         PROCESS THE ./ ADD STATEMENT                     *
*                                                          *
************************************************************
         SPACE
SIMPLE   MVC   MEMBER,=CL8' '
         LA    R6,ODE3             POINT TO FIRST OPERAND DESCRIPTOR
         TM    6(R6),X'80'         ANYTHING PRESENT
         BZ    COPY                BRANCH IF NO OPERAND
         LH    R15,4(,R6)          GET LENGTH OF STRING
         SH    R15,=H'5'           LENGTH OF 'NAME='
         BNP   OP2NAME             BRANCH IF TOO SHORT FOR NAME=
         L     R1,0(,R6)           POINT TO OPERAND
         CLC   0(5,R1),=C'NAME='   IS IT NAME=
         BNE   OP2NAME             NO, ITS PROBABLY SSI=
         LA    R1,5(,R1)
         LA    R0,8                MAX VALID LENGTH
         CR    R15,R0              IS STRING TOO LONG ?
         BH    COPY                BRANCH IF TOO LONG
         MVC   MEMBER,=CL8' '
         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX
         B     *+10
         MVC   MEMBER(0),0(R1)     (EXECUTED)
         EX    R15,*-6             MOVE NAME TO MEMBER NAME
         TRT   MEMBER,ALPHANUM     IS MEMBER NAME VALID
         BNZ   ILLMEM              NO, BRANCH
         CLI   MEMBER,C'0'         IS FIRST CHAR NUMERIC
         BNL   ILLMEM              YES, BRANCH
         CLI   MEMBER,C'-'         IS FIRST CHAR HYPHEN
         BE    ILLMEM
         CLI   MEMSEL,C' '         ARE WE SELECTING ALL MEMBERS
         BE    SELMEM1             YES, BRANCH
         CLC   MEMSEL,MEMBER       NO, IS THIS THE SPECIFIED MEMBER
         BNE   *+8                 NO
SELMEM1  OI    FLAG1,SELECT        INDICATE THIS MEMBER SELECTED
         B     OP2SSI
*
*              SSI= WAS PROBABLY SPECIFIED FIRST,
*              SEE IF NAME= IS SECOND
*
OP2NAME  LA    R6,ODE4             POINT TO SECOND OPERAND
         TM    6(R6),X'80'         ANYTHING PRESENT
         BZ    COPY                BRANCH IF NO OPERAND
         LH    R15,4(,R6)          GET LENGTH OF STRING
         SH    R15,=H'5'           LENGTH OF 'NAME='
         BNP   COPY                BRANCH IF TOO SHORT FOR NAME=
         L     R1,0(,R6)           POINT TO OPERAND
         CLC   0(5,R1),=C'NAME='
         BNE   COPY
         LA    R1,5(,R1)
         LA    R0,8                MAX VALID LENGTH
         CR    R15,R0              IS STRING TOO LONG ?
         BH    COPY                BRANCH IF TOO LONG
         MVC   MEMBER,=CL8' '
         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX
         B     *+10
         MVC   MEMBER(0),0(R1)     (EXECUTED)
         EX    R15,*-6             MOVE NAME TO MEMBER NAME
         TRT   MEMBER,ALPHANUM     IS MEMBER NAME VALID
         BNZ   ILLMEM              NO, BRANCH
         CLI   MEMBER,C'0'         IS FIRST CHAR NUMERIC
         BNL   ILLMEM              YES, BRANCH
         CLI   MEMBER,C'-'         IS FIRST CHAR HYPHEN
         BE    ILLMEM
         CLI   MEMSEL,C' '         ARE WE SELECTING ALL MEMBERS
         BE    SELMEM2             YES, BRANCH
         CLC   MEMSEL,MEMBER       NO, IS THIS THE SPECIFIED MEMBER
         BNE   *+8                 NO
SELMEM2  OI    FLAG1,SELECT        INDICATE THIS MEMBER SELECTED
         SPACE
         LA    R6,ODE3             POINT TO FIRST OPERAND
         LH    R15,4(,R6)          LENGTH
         L     R6,0(,R6)           POINT TO OPERAND
         CH    R15,=H'12'          IS LENGTH RIGHT FOR SSI=XXXXXXXX
         BNE   NOUSER              NO, IGNORE FIRST OPND, NO USER DATA
         CLC   0(4,R6),=C'SSI='    IS IT SSI=
         BE    SSICVT              YES, GO PROCESS SSI
         B     NOUSER              NO, IGNORE FIRST OPND, NO USER DATA
*
*              NAME= WAS SPECIFIED FIRST
*              CHECK FOR SSI= OR SPF STATS
*
OP2SSI   LA    R6,ODE4             POINT TO 2ND OPERAND DESCRIPTOR
         TM    6(R6),X'80'         ANYTHING PRESENT
         BZ    NOUSER              NO USER DATA TO BE STOWED
         LH    R15,4(,R6)          LENGTH
         L     R6,0(,R6)           POINT TO OPERAND
         USING XPF,R6
         CH    R15,=H'12'          IS LENGTH RIGHT FOR SSI=XXXXXXXX
         BNE   NOSSI               NO, BRANCH
         CLC   0(4,R6),=C'SSI='    IS IT SSI=
         BNE   NOSSI               NO, BRANCH
SSICVT   MVC   MEMUSER(8),4(R6)    MOVE 8 HEX CHARACTERS
         LA    R1,MEMUSER          POINT TO DATA TO BE CONVERTED
         LA    R0,4                LENGTH/2 OF DATA TO BE CONVERTED
         BAL   R14,PACK            CONVERT HEX TO BINARY
         OI    STATUS,SSI          SET FLAG FOR STOW
         B     READ
NOSSI    EQU   *
         SH    R15,=H'41'          MINIMUM LENGTH 41
         BM    NOSPF
         CH    R15,=H'9'           ID LENGTH CODE MAY BE 0 TO 9
         BH    NOSPF               TOTAL LENGTH EXCEEDS 50
         CLI   4(R6),C'-'
         BNE   NOSPF
         CLI   10(R6),C'-'
         BNE   NOSPF
         CLI   16(R6),C'-'
         BNE   NOSPF
         CLI   21(R6),C'-'
         BNE   NOSPF
         CLI   27(R6),C'-'
         BNE   NOSPF
         CLI   33(R6),C'-'
         BNE   NOSPF
         CLI   39(R6),C'-'
         BNE   NOSPF
         PACK  DOUBLE,XPFVM+0(2)   GET V OF V.M
         CVB   R0,DOUBLE
         STC   R0,SPFVM
         PACK  DOUBLE,XPFVM+2(2)   GET M OF V.M
         CVB   R0,DOUBLE
         STC   R0,SPFVM+1
         PACK  DOUBLE,XPFCREDT     GET YYDDD
         OI    DOUBLE+7,X'0F'
         MVC   SPFCREDT,DOUBLE+4
         PACK  DOUBLE,XPFCHGDT     GET YYDDD
         OI    DOUBLE+7,X'0F'
         MVC   SPFCHGDT,DOUBLE+4   DATE LAST MODIFIED
         PACK  DOUBLE,XPFHHMM
         L     R0,DOUBLE+4         GET 000HHMMC
         SRL   R0,4                GET 0000HHMM
         STH   R0,SPFHHMM          TIME LAST MODIFIED
         PACK  DOUBLE,XPFCCNT      SIZE
         CVB   R0,DOUBLE
         STH   R0,SPFCCNT          CURRENT SIZE
         PACK  DOUBLE,XPFICNT      SIZE
         CVB   R0,DOUBLE
         STH   R0,SPFICNT          INITIAL SIZE
         PACK  DOUBLE,XPFMOD       MOD
         CVB   R0,DOUBLE
         STH   R0,SPFMOD           LINES MODIFIED
         MVC   SPFUSER,=CL10' '    PAD WITH BLANKS
         B     *+10
         MVC   SPFUSER(0),XPFUSER
         EX    R15,*-6
         OI    STATUS,SPF          SET FLAG FOR STOW
NOSPF    EQU   *
NOUSER   EQU   *
         B     READ
         SPACE
ILLMEM   MVC   MEMBER,=CL8' '      SUPPRESS COPY
         B     COPY
         SPACE
PACK     ST    R14,PACKR
         LR    R15,R1              REG 15 --> SENDING/RECEIVING FIELD
         SR    R14,R14
         IC    R14,0(,R1)          REG 14  =  1ST CHAR
         CLI   0(R1),C'0'          NUMBER OR LETTER
         BNL   *+8                 NUMBER - BRANCH
         LA    R14,57(,R14)        LETTER - CONVERT TO FA-FF
         SLL   R14,4               SHIFT LEFT 4 BITS
         STC   R14,0(,R15)         STORE THE LEFT HALF
         IC    R14,1(,R1)          REG 14  =  2ND CHAR
         CLI   1(R1),C'0'          NUMBER OR LETTER
         BNL   *+8                 NUMBER - BRANCH
         LA    R14,57(,R14)        LETTER - CONVERT
         SLL   R14,28              SHIFT LEFT HALF TO OBLIVION
         SRL   R14,28              SHIFT BACK AGAIN
         STC   R14,1(,R15)         STORE RIGHT HALF
         OC    0(1,R15),1(R15)     'OR' RIGHT HALF OVER LEFT HALF
         LA    R1,2(,R1)           INCREMENT SENDING FIELD
         LA    R15,1(,R15)         INCREMENT RECEIVING FLD
         BCT   R0,PACK+6           LOOP USING LENGTH IN REG 0
         L     R14,PACKR
         BR    R14                 EXIT
         EJECT
************************************************************
*                                                          *
*         PROCESS THE ./ ALIAS STATEMENT                   *
*                                                          *
************************************************************
         SPACE
NOTADD   CLC   4(2,R6),=H'5'       LENGTH OF 'ALIAS'
         BNE   COPY
         L     R1,0(,R6)           POINT TO OPERAND
         CLC   0(5,R1),=C'ALIAS'
         BNE   COPY
         LA    R6,ODE3             POINT TO THIRD O.D.E.
         TM    6(R6),X'80'         ANYTHING PRESENT
         BZ    COPY                BRANCH IF NO OPERAND
         LH    R15,4(,R6)          GET LENGTH OF STRING
         SH    R15,=H'5'           LENGTH OF 'NAME='
         BNP   COPY
         L     R1,0(,R6)           POINT TO OPERAND
         CLC   0(5,R1),=C'NAME='
         BNE   COPY
         LA    R1,5(,R1)
         LA    R0,8                MAX VALID LENGTH
         CR    R15,R0              IS STRING TOO LONG ?
         BH    COPY                BRANCH IF TOO LONG
         MVC   MEMBER,=CL8' '
         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX
         B     *+10
         MVC   MEMBER(0),0(R1)     (EXECUTED)
         EX    R15,*-6             MOVE NAME TO MEMBER NAME
         TRT   MEMBER,ALPHANUM     IS MEMBER NAME VALID
         BNZ   ILLMEM              NO, BRANCH
         CLI   MEMBER,C'0'         IS FIRST CHAR NUMERIC
         BNL   ILLMEM              YES, BRANCH
         CLI   MEMBER,C'-'         IS FIRST CHAR HYPHEN
         BE    ILLMEM
         MVC   LINE,LINE-1
         MVC   LINE+32(05),=C'ALIAS'
         MVC   LINE+39(08),MEMBER
         LA    R6,MEMBER
         OI    11(R6),X'80'        SET ALIAS BIT ON
         STOW  (R5),(R6),R
         LA    R14,ALIASR          RETURN ADDRESS FROM STOWAR
         ST    R14,STOWR           RETURN ADDRESS FROM STOWAR
         B     STOWAR(R15)
ALIASR   MVC   MEMBER,=CL8' '
         B     READ
         EJECT
************************************************************
*                                                          *
*        ADD OR REPLACE A MEMBER                           *
*                                                          *
************************************************************
         SPACE
STOW     EQU   *
         ST    R14,STOWR
         TM    STATUS,DECB         ANY WRITES OUTSTANDING
         BZ    STOWW               NO, BRANCH
         L     R1,PUTPDSY+12       GET LAST DECB
         CHECK (1)
         NI    STATUS,255-DECB     NO OUTSTANDING WRITES
STOWW    LM    R6,R9,PUTPDSX       GET WRITE REGISTERS
         SR    R7,R6               GET LENGTH OF FINAL BLOCK
         BZ    STOWSET             BRANCH IF NOTHING IN BUFFER
         LH    R8,BLKSI(,R5)       SAVE ORIGINAL BLKSIZE
         STH   R7,BLKSI(,R5)       STORE LENGTH OF FINAL BLOCK
         WRITE (R9),SF,(R5),(R6),MF=E
         CHECK (R9)
         STH   R8,BLKSI(,R5)       RESTORE DCB BLKSIZE FOR NEXT MEMBER
STOWSET  MVC   PUTPDSX+4(4),PUTPDSX
         MVC   PUTPDSY+4(4),PUTPDSY
         MVC   LINE,LINE-1
         CLI   MEMBER,C' '         IS THERE A MEMBER NAME
         BE    STOWX               NO, BRANCH
         TM    FLAG1,SELECT        WAS THIS MEMBER SELECTED
         BZ    STOWX               NO, BRANCH
         MVI   MEMC,0
         TM    STATUS,SPF          IS THERE SPF USERDATA
         BZ    STOWNSPF            NO, BRANCH
         MVI   MEMC,15             LENGTH OF USER DATA IN HALFWORDS
         B     STOWNSSI
STOWNSPF EQU   *
         TM    FLAG1,GENSPF        SPF STATS TO BE GENERATED
         BZ    STOWNGEN            NO, BRANCH
         MVI   MEMC,15             LENGTH OF USER DATA IN HALFWORDS
         XC    MEMUSER(30),MEMUSER
         MVI   SPFVM,1             1.0
         XC    SPFRESV,SPFRESV     ZERO RESERVED BYTES
         TIME  DEC
         ST    R1,SPFCREDT         DATE CREATED
         ST    R1,SPFCHGDT         DATE OF LAST CHANGE
         SRL   R0,16
         STH   R0,SPFHHMM          TIME OF LAST CHANGE
         L     R1,SEQ              SIZE
         STH   R1,SPFICNT
         STH   R1,SPFCCNT
         MVC   SPFUSER,=CL10'PDSLOAD'
         B     STOWNSSI
STOWNGEN EQU   *
         TM    STATUS,SSI          IS THERE SSI USERDATA
         BZ    STOWNSSI            NO, BRANCH
         MVI   MEMC,2              LENGTH OF USERDATA SSI IN HALFWORDS
STOWNSSI EQU   *
         MVC   LINE+32(06),=C'MEMBER'
         MVC   LINE+39(08),MEMBER
         LA    R6,MEMBER
         XC    8(03,R6),8(R6)      TTR
         SPACE
         STOW  (R5),(R6),R
         SPACE
         B     STOWAR(R15)          R             A
STOWAR   B     STOWAR00             REPLACED      ADDED
         B     STOWAR04             N/A           NOT ADDED, EXISTS
         B     STOWAR08             ADDED         N/A
         B     STOWAR0C
         B     STOWAR10
         B     STOWAR14
         B     STOWAR18
         SPACE
RESULT   EQU   LINE+48
         SPACE
STOWAR00 TRT   LINE+39(9),TABBLANK
         MVC   1(8,R1),=CL8'REPLACED'
         LA    R1,9(,R1)
         B     STOWCOMW
STOWAR04 MVC   RESULT(23),=CL32'NOT ADDED *** ALREADY EXISTS ***'
         B     STOWCOM
STOWAR08 TRT   LINE+39(9),TABBLANK
         MVC   1(5,R1),=CL5'ADDED'
         LA    R1,6(,R1)
         B     STOWCOMW
STOWAR0C MVC   RESULT(33),=CL33'NOT STOWED *** DIRECTORY FULL ***'
         B     STOWCOM
STOWAR10 MVC   RESULT(28),=CL28'NOT STOWED *** I/O ERROR ***'
         B     STOWCOM
STOWAR14 MVC   RESULT(28),=CL28'NOT STOWED *** DCB ERROR ***'
         B     STOWCOM
STOWAR18 MVC   RESULT(32),=CL32'NOT STOWED *** STORAGE ERROR ***'
         B     STOWCOM
         SPACE
STOWCOM  EQU   *
         MVI   RC+1,4
STOWCOMW EQU   *
         TM    MEMC,X'80'          WAS THAT AN ALIAS
         BO    STOWXA              YES, BRANCH
         ST    R1,STOWSVR1
         L     R15,SEQ
         CVD   R15,DOUBLE
         MVC   1(7,R1),=X'4020206B202120'
         ED    1(7,R1),DOUBLE+5
         MVI   1(R1),C'('
         LA    R1,2(,R1)
STOWCOMJ CLI   0(R1),C' '
         BNE   STOWCOMK
         MVC   0(7,R1),1(R1)
         B     STOWCOMJ
STOWCOMK LA    R1,1(,R1)
         CLI   0(R1),C' '
         BNE   STOWCOMK
         MVC   1(08,R1),=C'RECORDS)'
         CH    R15,=H'1'           ONE RECORD
         BNE   *+10                NO, SKIP NEXT INSTRUCTION
         MVC   7(2,R1),=C') '      CHANGE RECORDS TO RECORD
         BAL   R14,REPORT
         L     R15,UPR
         LTR   R15,R15
         BZ    STOWX
         MVC   LINE,LINE-1
         L     R1,STOWSVR1
         CVD   R15,DOUBLE
         MVC   1(7,R1),=X'4020206B202120'
         ED    1(7,R1),DOUBLE+5
         MVI   1(R1),C'('
         LA    R1,2(,R1)
STOWUPRJ CLI   0(R1),C' '
         BNE   STOWUPRK
         MVC   0(7,R1),1(R1)
         B     STOWUPRJ
STOWUPRK LA    R1,1(,R1)
         CLI   0(R1),C' '
         BNE   STOWUPRK
         MVC   1(09,R1),=C'MODIFIED)'
STOWXA   BAL   R14,REPORT
STOWX    L     R14,STOWR
         BR    R14
         SPACE
         EJECT
************************************************************
*                                                          *
*         REPORT WRITER                                    *
*                                                          *
************************************************************
         SPACE
REPORT   LA    R1,LINE
         LA    R0,121
REPORTW  STM   R14,R2,REPORTS
         LA    R3,PRTDCBW          POINT R3 TO DCB
         CP    REPORTLN,REPORTMX   IS LINECOUNT LIMIT REACHED
         BNH   *+10                NO
         ZAP   REPORTLN,=P'0'      YES, FORCE NEW PAGE
         CP    REPORTLN,=P'0'      IS NEW PAGE REQUESTED?
         BE    REPORTH             YES, GO PRINT HEADING
REPORTD  CH    R0,=H'121'          IS OUTPUT LINE LENGTH OK?
         BNL   REPORTP             YES, BRANCH
         MVC   REPORTO,REPORTO-1   BLANK THE WORK AREA
         BCTR  R14,0               LENGTH MINUS 1
         B     *+10
         MVC   REPORTO(0),0(R1)    COPY OUTPUT LINE
         EX    R14,*-6             EXECUTE MVC
REPORTB  LA    R1,REPORTO          POINT TO NEW OUTPUT LINE
REPORTP  LR    R2,R1               POINT R2 TO OUTPUT LINE
         PUT   (R3),(R2)           WRITE OUTPUT LINE
         AP    REPORTLN,=P'1'      INCREMENT LINE COUNTER
REPORTX  LM    R14,R2,REPORTS      RESTORE REGS
         BR    R14                 RETURN
REPORTH  AP    REPORTPG,=P'1'      INCREMENT PAGE COUNTER
         MVC   REPORTO,REPORTO-1   BLANK HEADING
         MVI   REPORTO,C'1'        CC = NEW PAGE
         MVC   REPORTO+1(L'HEAD1),HEAD1
         LA    R1,REPORTO+075-9    RIGHT EDGE PAGE NO
         MVC   3(6,R1),=X'402020202020' EDIT MASK
         ED    3(6,R1),REPORTPG    UNPACK PAGE NO
         MVC   0(4,R1),=C'PAGE'    INSERT 'PAGE'
         PUT   (R3),REPORTO        PUT HEADING LINE 1
         MVC   REPORTO,REPORTO-1   BLANK LINE
         PUT   (R3),REPORTO        PUT HEADING LINE 2
         LM    R0,R1,REPORTS+8     RESTORE R0 AND R1
         B     REPORTD             GO PRINT DETAIL LINE
         EJECT
************************************************************
*                                                          *
*         END OF FILE                                      *
*                                                          *
************************************************************
         SPACE
EODUT1   EQU   *
         BAL   R14,STOW
EXITRC   LH    R15,RC
EXIT     LR    R2,R15              SAVE RETURN CODE
         LA    R6,CLOSE
         MVI   0(R6),X'80'
         TM    STATUS,UT2          IS SYSUT2 OPEN?
         BZ    EXITC5X             NO, SKIP CLOSE
         CLOSE ((R5)),MF=(E,(R6))
         FREEPOOL (R5)
         TM    STATUS,PDS
         BZ    EXITC5X
         LM    R0,R1,FREEM         GET LENGTH AND LOCATION OF BUFFERS
         FREEMAIN R,LV=(0),A=(1)
EXITC5X  EQU   *
         TM    STATUS,UT1          IS SYSUT1 OPEN?
         BZ    EXITC4X             NO, SKIP CLOSE
         CLOSE ((R4)),MF=(E,(R6))
         FREEPOOL (R4)
EXITC4X  EQU   *
         TM    STATUS,PRT          IS SYSPRINT OPEN?
         BZ    EXITC3X             NO, SKIP CLOSE
         LA    R3,PRTDCBW          POINT R3 TO DCB
         CLOSE ((R3)),MF=(E,(R6))
         FREEPOOL (R3)
EXITC3X  EQU   *
         SPACE 1
         LR    1,13
         L     R0,@SIZE
         L     13,4(,13)
         FREEMAIN R,A=(1),LV=(0)
         LR    R15,R2              RESTORE RETURN CODE
         LM    0,12,20(13)
         L     14,12(,13)
         BR    14
         EJECT
************************************************************
*                                                          *
*        CONSTANTS                                         *
*                                                          *
************************************************************
         SPACE
         LTORG
         SPACE
HEAD1    DC    C'--- PDSLOAD --- PDS MEMBER RELOAD UTILITY ---'
         PRINT GEN
         SPACE
PRTDCB   DCB   DDNAME=SYSPRINT,MACRF=(PM),DSORG=PS,                    +
               RECFM=FBA,LRECL=121
PRTDCBL  EQU   *-PRTDCB
         SPACE
UT1DCB   DCB   DDNAME=SYSUT1,MACRF=(GM),DSORG=PS,RECFM=FB,             +
               LRECL=&LRECL
UT1DCBL  EQU   *-UT1DCB
         SPACE
PDSDCB   DCB   DDNAME=SYSUT2,MACRF=(W),DSORG=PO,RECFM=FB,              +
               BUFNO=2,LRECL=&LRECL
PDSDCBL  EQU   *-PDSDCB
         SPACE
         PRINT GEN
         SPACE
         WRITE PDSDECB,SF,MF=L
PDSDECBL EQU   *-PDSDECB
         SPACE
ADDMODEL DC    CL&LRECL'./ ADD NAME='
         SPACE
TABNONBL DC    64X'FF'
         DC    X'00'               BLANK
         DC    42X'FF'
         DC    X'00'               COMMA
         DC    148X'FF'
TABBLANK DC    64X'00'
         DC    X'40'               BLANK
         DC    42X'00'
         DC    X'6B'               COMMA
         DC    148X'00'
         SPACE
ALPHANUM DC    0D'0',64X'FF',X'00',26X'FF'
*                            SPACE
         DC    X'00',4X'FF',X'00',26X'FF',2X'00',68X'FF',09X'00'
*                $            -              #@           A-I
         DC    7X'FF',9X'00',8X'FF',8X'00',6X'FF',10X'00',6X'FF'
*                       J-R            S-Z            0-9
         SPACE
*              THE ABOVE TABLE CAN BE USED TO TEST FOR ALPHANUMERIC
*              (PLUS NATIONALS, HYPHEN, AND BLANK)
*              WITH A 'TRT' INSTRUCTION.
*              IF THE FIELD IS VALID, CONDITION CODE IS 0.
*              WARNING: 'TRT' CAN CHANGE THE LOW ORDER 8 BITS
*              OF REGISTER 2 AND LOW ORDER 24 BITS OF REG 1.
         SPACE
EODAD    EQU   32                  OFFSET INTO DCB
RECFM    EQU   36                  OFFSET INTO DCB
EXLST    EQU   36                  OFFSET INTO DCB
OFLGS    EQU   48                  OFFSET INTO DCB
DDNAM    EQU   40                  OFFSET INTO DCB
BLKSI    EQU   62                  OFFSET INTO DCB
LRECL    EQU   82                  OFFSET INTO DCB
         EJECT
************************************************************
*                                                          *
*        DSECTS                                            *
*                                                          *
************************************************************
         SPACE
@DATA    DSECT
         DS    18F                 REGISTER SAVEAREA
WORK     DS    0F
DOUBLE   DS    D
OPEN     DS    F
CLOSE    EQU   OPEN
COUNTIN  DS    F
SEQ      DS    F
UPR      DS    F
STOWSVR1 DS    F
OPTIONS  DS    H
RC       DS    H
UPDTE    DS    CL2
PRTDCBW  DS    0F,(PRTDCBL)X
UT1DCBW  DS    0F,(UT1DCBL)X
PDSDCBW  DS    0F,(PDSDCBL)X
UT1EXLST DS    F
PDSEXLST DS    F
PRTEXLST DS    F
FREEM    DS    2F
PUTPDSR  DS    F
PUTPDSX  DS    4F
PUTPDSY  DS    4F
PDSDECB1 DS    0F,(PDSDECBL)X
PDSDECB2 DS    0F,(PDSDECBL)X
STOWR    DS    F
PACKR    DS    F
INREC    DS    0D,CL&LRECL
ADD      DS    CL&LRECL
ODL      DS    0F                  OPERAND DESCRIPTOR LIST
ODE1     DS    2F                  OPERAND DESCRIPTOR ENTRY 1
ODE2     DS    2F                  OPERAND DESCRIPTOR ENTRY 2
ODE3     DS    2F                  OPERAND DESCRIPTOR ENTRY 3
ODE4     DS    2F                  OPERAND DESCRIPTOR ENTRY 4
ODE5     DS    2F                  OPERAND DESCRIPTOR ENTRY 5
ODLL     EQU   *-ODL
STATUS   DS    C
PRT      EQU   X'80'
UT1      EQU   X'40'
UT2      EQU   X'20'
PDS      EQU   X'10'
DECB     EQU   X'08'
COPYM    EQU   X'04'
SPF      EQU   X'02'
SSI      EQU   X'01'
FLAG1    DS    C
SELECT   EQU   X'80'
GENSPF   EQU   X'40'               GENERATE SPF STATS
         DS    C                   LINE-1
LINE     DS    CL133
LINEH1   DS    CL133
*
MEMSEL   DS    D
MEMBER   DS    D
MEMTTR   DS    XL3
MEMC     DS    XL1                 LENGTH/2 OF MEMUSER
MEMUSER  DS    CL30                SPF STATISTICS OR SSI
         ORG   *-30
SPFVM    DS    XL2                 VERSION, LEVEL
SPFRESV  DS    XL2                 RESERVED
SPFCREDT DS    PL4                 DATE CREATED
SPFCHGDT DS    PL4                 DATE LAST UPDATED
SPFHHMM  DS    XL2                 TIME LAST UPDATED
SPFCCNT  DS    H                   CURRENT SIZE
SPFICNT  DS    H                   INITIAL SIZE
SPFMOD   DS    H                   MODS
SPFUSER  DS    CL10                USERID
*
REPORTS  DS    6F                  REGISTER SAVE AREA
REPORTPG DS    PL3                 PAGE COUNT, INIT P'0'
REPORTLN DS    PL2                 LINE COUNT, INIT P'0'
REPORTMX DS    PL2                 LINES/PAGE, INIT P'50'
REPORTOB DS    CL1                 REPORTO-1 (INIT BLANK)
REPORTO  DS    CL133               OUTPUT AREA
         DS    0D
@DATAL   EQU   *-@DATA
         SPACE
XPF      DSECT
XPFVM    DS    CL4,C               VERSION, LEVEL
XPFCREDT DS    CL5,C               DATE CREATED
XPFCHGDT DS    CL5,C               DATE LAST UPDATED
XPFHHMM  DS    CL4,C               TIME LAST UPDATED
XPFCCNT  DS    CL5,C               CURRENT SIZE
XPFICNT  DS    CL5,C               INITIAL SIZE
XPFMOD   DS    CL5,C               MODS
XPFUSER  DS    CL10                USERID
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
