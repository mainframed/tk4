                       THE EXCP-COUNT MODIFICATION

                                   by Sam Golob,
                                   NEWSWEEK, INC.
                                   Mountain Lakes, New Jersey 07046

       Nearly every computer user who runs a job wants to know what
his job DID.  If it read files and produced reports, and everything
looks good, it probably did what it was supposed to.  But you can't
say much more than that.  Very often you don't KNOW more than that.

       Trust the machine?  We all have to, but it would be better if
the machine would tell us more.

       There is one way to get the machine to tell you quite a bit
more.  We'll show you how to make it tell you all of its file I/O
activity.  For FREE.

       File I/O in IBM/370 architecture is done by "executing channel
programs" (EXCP for short).  This means that the "channels", which can
be viewed as connectors between the CPU and peripheral devices, are
instructed (or programmed) how to transmit data between the computer
itself and the connected device.

       EXCP is the "rock bottom" of File I/O, in the same sense as
MACHINE INSTRUCTIONS are the "rock bottom" of program execution in a
CPU.  You can write a program in a higher-level language, such as
COBOL or PL/1, but before it can be run, it must be converted (or
"compiled") into machine instructions. It is the machine instructions
which actually RUN.

       Same with File I/O.  You can tell the machine using ACCESS
METHODS such as QSAM, BSAM, or VSAM, what you want it to do with
files, with reading or writing data.  But the "access method source"
cannot do any transfer of data itself, just as COBOL SOURCE statements
cannot tell a CPU what to do.  The "access methods" must first convert
your I/O orders into EXCP before any data transfers can be done.  The
data transfer machinery only understands EXCP; it does not understand
"access method source" directly.

       Counting the NUMBER OF TIMES a channel program was executed to
a particular file gives some indication of how much file I/O activity
there was.  This measure of file activity is called EXCP COUNTS.  A
number of vendor products are available to supply that kind of
information for your jobs.  I personally haven't done a survey of them
because I have a FREE method of providing the data, which is probably
better than all of them.  We can actually MAKE THE MVS OPERATING
SYSTEM ITSELF supply us with EXCP counts to EACH ALLOCATED DD NAME,
right in the JCL allocation messages themselves!

       How can we accomplish this wonderful thing?

       First let me tell you what you'll get.  If you're running MVS,
you've all seen JCL allocation messages for files on your job printouts.
They look like:

  IEF285I   SYS1.LINKLIB       KEPT
  IEF285I   VOL SER NOS= MVSRES.

After you've done our magic, you get:

  IEF285I   SYS1.LINKLIB       KEPT  *----1,294
  IEF285I   VOL SER NOS= MVSRES.

You get this for all allocated ddnames.  On my system, I've even
seen the counts on the MASTER JCL that was executed at IPL time.
The counts can be seen on the SYSLOG from the very beginning of
system initialization. MVS itself is made to provide them.  You
don't have to rely on SMF records, as many of the vendor packages
do.

       OK, OK. I'll tell you how it's done.  The system module which
produces the IEF285I messages is called IEFAB4B0.  On MVS/370, the
module has not changed since base version 3.8.  On MVS/XA, it has also
not changed since the base level.  This is how the counts are obtained.
IEFAB4B0 is expanded to add a patch area at the end.  Code is inserted
into the patch area which obtains the counts and puts them into the
IEF285I message.  The code works as follows:  It goes back into the
module which CALLS IEFAB4B0 (its name is IEFAB4A2) by accessing the
saved registers from the calling program.  It is this calling program,
IEFAB4A2, which has access to the DSAB control block that contains the
EXCP-count information.  The patched code in IEFAB4B0 uses ITS CALLER's
REGISTERS and acts for a while as if it were really executing in the
caller, IEFAB4A2. After the information is obtained, it is formatted
and inserted into the IEF285I message.

       Cool!  This is the concept.  Now how can you install it?

       The code is on the Connecticut Bank and Trust MVS Mods Tape,
known as the CBT tape, FILE 369, and it was donated by Dick Sziede and
his staff of the Planning Research Corporation at Dulles Airport in
Virginia.  Dick is running MVS/XA in his shop.  His old MVS/370
version is maintained by me, and that code is in File 369 also.  The
zap is applied to IEFAB4B0 in the form of an SMP usermod, but the
usermod is generated in a very novel manner.

       Howard Gilbert of Yale University Computer Center, one of the
geniuses of user-written MVS software, has a PL/1 program called
ASMTOZAP, whose SOURCE is on File 369 of the CBT tape. (The LOAD MODULE
is on FILE 035 of most recent versions of the CBT tape.)  ASMTOZAP
allows you to code SYSTEM ZAPS as if they were ASSEMBLER PROGRAMS.

       This is how ASMTOZAP works.  Certain control statements are
coded as comments in your assember source code telling ASMTOZAP where
to start the VER statements and where to start the REP statements.
(You don't have to do this in the EXCP-count mod, because it is already
done.)  You assemble the source code (NO LINKEDIT please) and create a
LISTING on a disk file.  You then run the PL/1 program ASMTOZAP against
the LISTING. In our case, it produces an already-coded SMP USERMOD,
which has the zap in it.

       Now.  After editing the generated usermod to your installation's
taste, and applying it, the LMOD, which is called IEFW21SD, is changed
in LPALIB, and an IPL with CLPA will allow you to test the mod.

       ONE WARNING is in order.  The calling mod IEFAB4A2 is sensitive
to IBM maintenance.  Whenever IEFAB4A2 is changed, you must look into
the FICHE of the new PTF level for the field called DSABPTR.  In my
current version on MVS/370, this is at displacement +138 hex, into
IEFAB4A2.  This displacement must be hard-coded into your usermod.
Notes in the assembler source will tell you where to code it.  The
displacement of the DSABPTR has been known to change with fairly recent
modifications of IEFAB4A2, and you must check it with every change to
that module.  I safeguard myself by doing a UCLIN of my USERMOD NUMBER
as a UMID to IEFAB4A2, even though IEFAB4A2 is not itself affected by
applying the usermod.  This gives me an ID check in SMP whenever
maintenance hits this module.  The other module IEFAB4B0 which has the
zap in it, never has gotten maintenance to it.

       There are 2 versions of the mod, one for MVS/370 and one for XA.
The one for XA has been worked over at Planning Research Corp.  to
handle I/O counts to multi-volume disk datasets, whereas the MVS/370
one has not been so reworked.  It is on my wish list to rework it.  The
370 version shows the I/O's to the last volume only.  The mod is still
great, however.

       Just a final note.  The USERMOD as supplied by File 369 has a
linkedit EXPAND statement in it.  This EXPAND only has to be done once.
In my shop, I separated the EXPAND into a separate USERMOD that PREs
the zap.  This way, if I have to repeat the APPLYing of the zap, it
won't keep expanding the size of the IEFAB4B0 module.

       You are referred to additional members of this file which will
show you what this modification looks like, both in original assembler
source and in generated zap form as it is applied at my shop.  Also
included is ASMTOZAP execution JCL.

       Good luck.  Everyone in your shop will enjoy this one!


