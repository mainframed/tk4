                   PUBLIC MVS SOFTWARE - THE CBT TAPES

                                      Sam Golob
                                      MVS Systems Programmer
                                      Newsweek, Inc.
                                      Mountain Lakes, New Jersey 07046
                                      (201) 316-2328



      It is my belief that an MVS shop cannot "live well" with IBM's
offerings alone.  I have a funny feeling that this may be IBM's position
too.  (This statement, believe it or not, is to IBM's praise.)  I hope
that the matter will soon become clear to you.

      IBM, in designing the MVS operating system, has been omniscient
enough to provide a wide variety of system interfaces and system
services together with it.  This gives users the opportunity to access
many parts of the system and "hack around" in them.  Such activities
are not the exclusive domain of the software vendors.  Anyone can do it.
In fact, the vendors do the exact thing we do.  They also write
assembler-language programs and use the standard interfaces.  IBM is
usually nice enough to provide helpful and accurate documentation in
its various manuals, source materials, and fiche.

      So who has taken advantage of this, you say?  Many people sitting
in MVS installations have, and some of them are very skilled.  Each has
addressed a need, or a whim, and has written tools for his company and
for himself.  If you'll take a tour of MVS shops around your area, I'm
sure you'll find many programs being used which didn't come from IBM
and didn't come from vendors.

      Most of them probably didn't come from that shop either.  If so,
how did they get there?

      I asked myself that too, and for a long time I didn't know.  It
was only after a visit to a friend in his shop, as my mouth hung open
watching him do undreamed-of miracles and wonders, that he introduced
me to the great secret.  He gave me a copy of my first CBT tape.

      Once you've been initiated, tapping into that great gold mine is
not that big a deal.  It is a vast collection of public software for
MVS.  It fills (I mean FILLS) a 2400 foot tape reel.  (This is after
most of the stuff has been compressed.)  Its administrator, Arnold
Casinghino of the Connecticut Bank and Trust Company (hence the name
CBT) has had to make sweeping deletions on three recent occasions, just
to have room on the tape for new stuff.  This article aims to guide the
reader through the tape, and to discuss some of its offerings.

     First things first.  How do you get a copy?  Send 30 dollars and
an empty 2400 foot reel or (preferably) a 3480 tape cartridge to:

                 Arnold Casinghino
                 Connecticut Bank and Trust Company
                 Technical Support Section F04L
                 99 Founders Plaza
                 East Hartford, CT. 06108-3292
                   phone: (203) 244-5495

Arnie's current level is something like version 275.  He puts out an
updated level roughly once a month.

     The tape is non-labeled (NL) and currently has 471 files.  (Yes,
that's what I said--four hundred seventy-one.)  It is true that some of
them are empty.  The first three files are RECFM=FB, LRECL=80,
BLKSIZE=32720.  These are the key to the rest of the tape.  When I
get a new tape, I load these first three files onto a PDS
(appropriately titled PREFIX.CBT.PDS) which has LRECL=80.  File 1 is
the documentation.  It describes every file on the tape, and
documents the updates and differences between each level and the
previous ones.  File 2 is assembler source for the compress-
decompress program used for many of the files on the tape.  File 3 is
JCL needed to load down the entire tape.  You can customize this JCL
on a separate member of the CBT.PDS to load back a few files at a
time.  After doing this, you should print a copy of File 1, and spend
some time leafing through it.

     Our aim in the rest of this article is to describe some of the more
notable offerings on the tape, at least for getting started.  In future
articles on this subject, I hope to delve into more of the useful
products and tools you can use.

     In my opinion, the best files to start on are:  300 and 316,
(Air Force utility collection), 182 and 296 (PDS command product),
and 299 (tapemap).  File 300 has close to one hundred TSO commands, and
file 316 has a like number of batch utilities.  The one thing from file
300 which every systems programmer should install is the full-screen
zap program, appropriately called "ZAP".  It need only be assembled and
link-edited into any load library that your TSO account can get a hold
of, preferably an authorized one (authorization is only necessary for
zapping VTOCs).  You get a full-screen view of a few-hundred bytes of
any disk file, and you can change anything in a jiffy.  There is a
"find" command for any string, hex or EBCDIC, and there are many other
useful features.  If you zap a load module, an IDR record with your TSO
id is created to leave a trail.  A zap log records all the changes.
Try it.  You'll not only like it--you won't be able to do without it!
Type a question mark "?" and you get a full tutorial.  From the
tutorial, type a "U", and you're back where you were.

     File 299 (TAPEMAP program) is another "indispensable" one, once
you know about it.  It makes possible the complete cataloging and
quick recall of information from tape libraries, when used together
with the PDS command (from file 182).  I'll show you a bit later how to
set this up.  If you have a private "tech support" collection of tapes
(and who hasn't), you can implement this program to find anything you
want from your tape library, quickly.  By the way, the TAPEMAP program
will even do what a tapemap program is supposed to do, and tell you
what files are on an individual tape!

     Why is this TAPEMAP program different from all other tapemap
programs, you ask?  Because it produces TWO reports.  Report number one
is not too different from that of other such programs.  It dumps the
contents of the labels for labeled tapes, and for non-labeled tapes,
it will report on the RECFM and blocksizes and number of blocks.  Upon
closer examination, you'll see that it's a good deal more thorough than
other programs in the information it presents.  One of the notable
extras, and this is important, is that it calculates the length in
feet, quite accurately, of each file.  It also reports on the total
length in feet, taken up by all files up to the end of the current
file.  If the tape had a bad spot, the first report will also interpret
all the bits in the sense information.

     We haven't gotten there yet with this TAPEMAP.  Its capabilities
are far greater.  As it reads the tape, the program will examine each
file for conformity to one of 10 or 11 different formats:  IEBCOPY,
IEBUPDTE, FDR, SMPPTFIN, and others.  If the format of a tape file is
known to the program, its name appears in Report One, but for many of
the special formats, the NAMES OF ALL THE PDS MEMBERS (in the case of
IEBCOPY or IEBUPDTE), or the PTF NUMBERS (in the case of SMPPTFIN) are
LISTED in Report TWO.  An FDR backup tape produces a COMPAKTOR-like
listing of the backed-up files, in REPORT TWO.  You can really find out
what's on a tape.  You can see if a missing module appeared on last
month's tape, before a change was made, for example.  The answer is
obtained by merely reading through the tape.  You don't have to go to
the trouble of dumping the contents.

     Taking this a step further, suppose you have a private tape
library, and you want to inquire about a tape.  Or, you have a file
on a tape somewhere and you don't know what tape it's on.  STORING
THESE TAPEMAPS ON DISK will help you.  Now think a moment.  What is
an efficient way to store the maps on disk?  You can put them on a PDS,
or on a PANVALET library or its equivalent.  You can then use ISPF
browse or edit to search the members.  In the case of PANVALET or
equivalent, if you had an ISPF interface, this would amount to the same
thing.  If you knew which member to look at, you'd eventually find out
about the tape contents without having to mount a tape.

     We haven't arrived at a really efficient tape library inquiry
system yet.  Suppose that you mapped each tape in your library to two
PANVALET members, or to two members of a "tapemap pds" whose names
reflect the VOLSER of the tape being mapped.  Remember that the record
length of the file is 133 for the reports on disk.  A SCAN of these
members to look for a file name or a module name would quickly yield
the desired results.  The PANVALET ++SCAN option (of the PAN#8 program)
can be run.  This is fine if your shop has PANVALET, but it's also
slow.  In the case of the "tapemap pds", a faster (and FREE)
alternative is available with the PDS program from file 182 of the CBT
tape.  You can search the members of the "map pds" ONLINE, with short
response time, and this results in a FULL TAPE LIBRARY INQUIRY SYSTEM.

     The PDS command from file 182, about which we will talk at length,
has as one of its features a "global find" capability which locates a
given string in an entire pds library, or in a subset of members.  (The
feature is so powerful that an entire pds of any block size or RECFM
may be searched.)  If you have the PDS program pointing to your
"tapemap pds", and you issue a PDS subcommand of the type:
              FIND : /string/
you will quickly get a report of all members of the "tapemap pds" which
contain the string, and you'll graphically see all the occurrences of
the name you searched for.  This will yield which tape(s) and which
file(s) you have to load.  Once the PDS program is set up, our tape
library inquiry system will be complete.  (At this writing, I have
heard that the newest version of ISPF from IBM has a "global find"
also, but this does not detract from the worthiness of PDS, which is
extremely multi-faceted.)

     From here, it doesn't take much to figure out that you could now
find source modules on the IBM symbolic (source module) tapes, which
are in IEBUPDTE format.  You can also locate any PTF on your PUT TAPES
with the greatest of ease, if this is set up.  This is not to mention
your system backups and private backups.  There are a lot of
possibilities.  See file 188 on the CBT tape for an example of how
to retrieve IBM machine-readable source.  I must therefore talk about
the inquiry tool, the PDS command product, to complete the picture.
But meanwhile, before you set up PDS, you can start using TAPEMAP to
find out what's on your individual tapes.  Just run it and get the
reports on paper.

     The PDS command from file 182 and 296 merits an entire article by
itself, maybe even two or three or four installments.  It is probably
the biggest single piece of software on the CBT tape.  Although it's
free, if it sold for money, it would sell for a lot of money.  I have
taught a two-day course to INTRODUCE the TSO user to PDS.  It is a world
in itself, and it incorporates the function of a hundred separate
utilities into one package.

     PDS is an outgrowth of an old utility called "PDS", or "LPDS",
which does certain functions in partitioned data sets, and which is
quite widespread in MVS shops.  The original version was written at THE
FIREMEN'S FUND in 1972.  You can rename, delete, list, or add an alias
to a pds member.  You can map load modules or view the linkedit history
of their component csects.  These functions are useful, and the program
in its original form is still a popular tool.  The current program, now
at version 8.1, has thirty-fold more function, but it still has all the
old function of the original program.  Bruce Leland and Steve Smith, in
California, support PDS expertly.  (Their addresses and phone numbers
are on the CBT tape.)  I will try here to do the difficult job of
telling you in a short space what the new PDS is about.  Perhaps a
longer article will follow later.

     PDS manipulates partitioned or sequential datasets.  It can do
almost ANYTHING to them.  Besides incorporating utility functions, such
as finding strings, listing attributes of members, renaming members,
assigning load module attributes, etc., it has the great strength of
dealing with GROUPS of members together, in one shot.  For example, you
can delete or rename all members beginning with the letters ADR.  You
can also select all load modules containing a company's logo, for
example, so if you have a vendor's package installed, and he puts his
logo on all the load modules, you can delete them or copy them to
another dataset all at once.  This just gives you a taste of how
powerful PDS is.  It is the tiniest tip of the iceberg.  I have used
PDS for two years.  I have given a course on it, and I have yet to
fathom it to its depths.  I haven't even come close.

     To install PDS quickly, you can copy its load module from file 35
of the CBT tape into one of your TSO load libraries.  This will only
get you "line-mode".  To get "ISPMODE", you have to copy its ISPF
panels and messages into your ISPF libraries from file 182.  There is a
job on file 182 that does this all at once.  A proper installation from
files 182 and 296 is much better.  PDS has many "generation options",
and you should examine the #PDSGEN options member on file 182
carefully.  Follow the installation instructions to the letter, and
you'll be pleased with the result.  You can call the authors (phone
numbers are listed on the file) or you can call me (file 428 or any of
my other files) if you want help.

     When you execute PDS, you must point it at a dataset, which can be
either partitioned or sequential.  There must always be a "current
dataset", but once you are in PDS, the current dataset can be changed
easily with a "change" subcommand.  PDS operates in two modes.  They
are called "line-mode" and "ISPMODE".  PDS in line-mode is purely a
TSO command processor, with the results of the subcommands going to the
terminal (the SYSTSPRT ddname).  In ISPMODE, PDS is an ISPF dialog,
with results of the subcommands going to a special scrollable log,
which occupies the bottom of the screen.  PDS can also be run in
line-mode under TSO IN BATCH.

     Most of the line-mode functions of PDS are also available under
ISPMODE.  In ISPMODE, PDS is a full dialog, such as SPFEDIT is, for
example, but it is far more inclusive and has much more function
included in the dialog.  There are approximately 48 options, or
"subcommands", and most of these have myriad variations and multiple
functions.  There is a 6000-line TSO help member, but if PDS is
properly installed, with all the utilities from file 296, there is a
full-screen help facility that is quick.  (Installation hint:  The
help member must be called PDS81 - in the current level PDS 8.1 -
for this to work properly.)

     Why ISPMODE?  For one thing, ISPMODE has a log of all the PDS
commands and their results, that came during the current session.  This
log can be browsed and scrolled in its entirety, and it can be spliced
and/or copied to a dataset.  Then there is MEMLIST in ISPMODE, which
provides a list of all or some of the PDS members.  This may not seem
like much at first glance, but there are over 20 options that you
can exercise from this member list.  You can BROWSE or SPFEDIT or
RENAME from the same list, without having to go to a different list,
as in normal ISPF.  Once you are familiar, you will see that the
possibilities go much farther.  ISPMODE has two other modes:  LISTA,
which lists the datasets and ddnames allocated to your session,
and LISTV, which lists mounted disk volumes and their attributes.
PDS version 8.1 provides four separate ISPF tables for these four
modes, and you can easily switch from one to another.  Steve Smith,
who supports the ISPMODE part of PDS, tells me that he plans other
ISPMODE functions in future releases of PDS.

     Now, to complete our tape library inquiry system, suppose for
example that all our tapes were mapped into the pds called TAPELIB.MAPS.
Suppose for simplicity that we have one tape, called MYTAPE, mapped
with TAPEMAP, and the two reports were copied into TAPELIB.MAPS.
REPORT ONE was copied to member MYTAPE, and REPORT TWO was copied to
member MYTAPEM.  The tape has five files on it in IEBCOPY format,
and there is a module called IEFAB4B0 on file 3.  We would get
into PDS in ISPMODE by entering:
        PDS 'TAPELIB.MAPS' ISPMODE
from TSO READY.  (This requires that the ISPF panels and messages in
CBT tape file 182 have been copied to your appropriate libraries.)
You will see the ISPMODE header and the ISPMODE log on your screen.
Then we enter:
        FIND : /IEFAB4B0/
This will yield a report in the log, detailing on which maps the
module IEFAB4B0 appears.  A quick BROWSE or EDIT of the member
MYTAPEM, done by entering from the command line:
        B MYTAPEM  or  E MYTAPEM     followed by
        F IEFAB4B0
while in the browse or edit, will show that IEFAB4B0 is on file 3.

     We shall postpone more detailed discussion of PDS for future
articles.  I hope to have achieved the purpose here, of giving you a
glimpse at how tremendously useful the free software on the CBT tape
can be.






