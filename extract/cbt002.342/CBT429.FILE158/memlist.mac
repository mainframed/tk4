/* MEMLIST   ************************************************* Rexx */
/*   Created by: IAPPINI,R.                                         */
/*   When: 12/15/92                                                 */
/*   What: MEMLIST, a Rexx EXEC,                                    */
/*                                                                  */
/* MEMLIST   ************************************************* Rexx */
Address 'TSO'
Arg p1
Call Initialize
Call Process_main
Call Eoj
Exit

Process_main:
   Do i_dsn = 1 To Words(dataset)
      Call Process_dsn Word(dataset,i_dsn)
      End i_dsn
   Return
/*
 SYSDSNAME              Data set name
 SYSVOLUME              Volume serial number
 SYSUNIT                Device type for volume
 SYSDSORG               Data set's organization
 SYSRECFM               Data set's record format
 SYSLRECL               Data set's logical record length
 SYSBLKSIZE             Data set's block size
 SYSKEYLEN              Data set's key length
 SYSALLOC               Space allocation quantity
 SYSUSED                Space used quantity
 SYSPRIMARY             Primary allocation quantity
 SYSSECONDS             Secondary allocation quantity
 SYSUNITS               Space units (CYLINDER, TRACK, BLOCK)
 SYSEXTENTS             Number of DASD extents used
 SYSCREATE              Data set's creation date yyyy/ddd
 SYSREFDATE             Data set's last ref. date yyyy/ddd
 SYSEXDATE              Data set's expiration date yyyy/ddd
 SYSPASSWORD            Password protection status - NONE,
                        READ, or WRITE
 SYSRACFA               RACF indication - NONE, GENERIC, or
                        DISCRETE
 SYSUPDATED             Data set change indicator (YES or NO)
 SYSTRKSCYL             Tracks per cylinder for unit the data
                        set is allocated on
 SYSBLKSTRK             Directory blocks per track for unit
                        the data set is allocated on
 SYSADIRBLK             Directory blocks allocated - PDS only
 SYSUDIRBLK             Directory blocks used - PDS only
 SYSMEMBERS             Number of members - PDS only
 SYSMSGLVL1             1st level message if error
 SYSMSGLVL2             2nd level message if error
*/
Process_dsn:
   Arg dsn
   say_cnt = 0
   xx = Listdsi(dsn directory)
   x_dsn = Sysdsname
   Call Say_msg dsn
   Call Say_msg "directory blocks("sysadirblk","sysudirblk")",
                "members("sysmembers")"
   xx = Outtrap(tso.)
   "LISTD "dsn "M"
   xx = Outtrap("OFF")
   Do i_tso = 1 To tso.0
      t_msg = tso.i_tso
      Select
         When "--MEMBERS--" = Left(t_msg,11) Then Call Get_members
         Otherwise Nop
         End /* End of Select ... */
      End i_tso
   If fullscreen Then,
      Call Stemdisp "BROWSE","SAY.",,,dsn "member list"
   If print × disk Then Do
      Address "TSO"
      "DELETE "x_dsn".LIST"
      "ALLOC  FI(MEMOUT) DA("x_dsn".LIST) SP(1 1) TRA DSO(PS)",
          "LRECL(80) BLK(6160) RECFM(F B) REUSE"
      "EXECIO * DISKW MEMOUT (STEM SAY. FINIS)"
      "FREE FI(MEMOUT)"
      If print Then "QPRT "x_dsn".LIST"
      If ^disk Then "DELETE "x_dsn".LIST"
      End
   Return;

Get_members:
  memlist. = ""
  mem_ndx  = 1
  membrs   = 0
  Do i_tso = i_tso + 1 To tso.0
     t_msg = tso.i_tso
     Select
        When Wordpos("EXIST WITHOUT TRUE",t_msg) > 0 Then,
           Call Hanging_alias
        Otherwise Do
           Call Add_mem_tolist " "Left(Word(t_msg,1),9)
           Call Process_alias Word(t_msg,2)
           End
        End /* End of Select ... */
     End i_tso
  If Words(memlist.mem_ndx) > 0 Then,
     Call Say_msg memlist.mem_ndx /* get last line of members */
  If fullscreen Then,
     Call Stemdisp "BROWSE","MEMLIST.",,,dsn "contains "membrs" members"
  Return;

Hanging_alias:
  If Words(memlist.mem_ndx) > 0 Then,
     Call Say_msg memlist.mem_ndx /* get last line of members */
  mem_ndx = mem_ndx + 1
  prev_membrs = membrs
  membrs = 0
  Call Say_msg t_msg
  Call Add_mem_tolist " -------- "
  Do i_tso = i_tso+1 To tso.0
     t_msg = tso.i_tso
     Call Process_alias Strip(t_msg,"B")
     End i_tso
  membrs = membrs + prev_membrs
  Return;

Process_alias:
   Arg alias_msg
   Select
      When Left(alias_msg,6) = "ALIAS(" Then Do
         Parse Var t_msg "ALIAS(" alias ")" .
         Do more_alias = i_tso+1 By 1 While Right(alias,1) = ","
            t_msg = tso.more_alias
            Select
               When Right(t_msg,1) = "," Then,
                  alias = alias t_msg
               Otherwise Do /* Gets last of multiline alias */
                  aliad = alias t_msg
                  i_tso = more_alias
                  Leave more_alias
                  End
               End /* End of Select ... */
            End more_alias
         alias = Space(Translate(alias,"",",)"))
         Do i_a = 1 To Words(alias)
            Call Add_mem_tolist "*"Left(Word(alias,i_a),9)
            End i_a
         End
      Otherwise Nop
      End /* End of Select ... */
  Return;

Add_mem_tolist:
  Arg add_mem
  membrs = membrs + 1
  memlist.mem_ndx = memlist.mem_ndx ×× add_mem
  If membrs // 7 = 0 Then Do
     Call Say_msg memlist.mem_ndx
     mem_ndx = mem_ndx + 1
     End
  Return;

Say_msg:
   Parse Arg msg
   If ^fullscreen & ^nodisplay Then Say msg
   say_cnt = say_cnt + 1
   say.say_cnt = msg
   Return

Eoj:
   Return;

Initialize:
   Parse Source environment . exec_name .
   If Sysvar(sysispf) ^= "ACTIVE" Then Do
      "ISPF CMD(%"exec_name p1")"
      Exit
      End
   proc_stmt = "PROC 1 DATASET FULLSCREEN NODISPLAY PRINT DISK"
   Call Proctso p1,proc_stmt
   Interpret result
   If fullscreen = "" Then fullscreen = 0
   Else fullscreen = 1
   If nodisplay = "" Then nodisplay = 0
   Else nodisplay = 1
   If print = "" Then print = 0
   Else print = 1
   If disk = "" Then disk = 0
   Else disk = 1
   dataset = Translate(dataset,"","()") /* possible list processing */
   Return;
