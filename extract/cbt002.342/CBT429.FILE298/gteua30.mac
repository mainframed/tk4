         PRINT GEN
         LCLC  &MYNAME                  LOCAL CONSTANT
*
&MYNAME  SETC  'GTEUA30'                CSECT NAME
RBASE    EQU   12                       BASE REGISTER FOR CSECT
RBAL     EQU   10                       BAL REGISTER
*
         TITLE '&MYNAME'                LISTING TITLE
**********************************************************************
***                                                                ***
***                   GTEUA30                                      ***
***                                                                ***
***  DESCRIPTION:                                                  ***
***                                                                ***
***    The function of this program is to return directory         ***
***    information about a member of a PDS, and to make a copy     ***
***    of the member in a sequential file.                         ***
***                                                                ***
***    The program accepts the name of the member from the         ***
***    first eight bytes of a 42-byte input parm.  If it finds     ***
***    the member, and the directory entry has ISPF statistics,    ***
***    the ISPF-stats directory entry is converted from 48-byte    ***
***    BLDL format to 42-byte STOW format, which can be used       ***
***    later by the caller to update the directory of the PDS.     ***
***                                                                ***
***    If the program finds the member, but it does not have ISPF  ***
***    statistics, the program will create and return a 42-byte    ***
***    STOW entry for later use by the caller.  The entry will     ***
***    contain the following stats:                                ***
***                                                                ***
***    NAME:  Member name from input                               ***
***    TTR:   Actual TTR                                           ***
***    C:     X'0F' for member,  X'8F' for alias                   ***
***    VER:   001                                                  ***
***    MOD:   00                                                   ***
***    SIZE:  Line count                                           ***
***    INIT:  Line count                                           ***
***    MOD:   00                                                   ***
***    ID:    First seven characters of Jobname from TIOTNJOB      ***
***           field of the TIOT (Task I/O Table).                  ***
***                                                                ***
***    If the program does not find the member, it will create     ***
***    a dummy entry as above, with the TTR field set to X'000000' ***
***    Also, the sequential output file will be opened and closed  ***
***    to erase it.                                                ***
***                                                                ***
***    RECFM, LRECL, and BLKSIZE information will be copied from   ***
***    the PDS to the sequential output dataset.                   ***
***                                                                ***
***    The PDS must have a LRECL=80, must be a PDS, and must have  ***
***    a fixed-length record format, with BLKSIZE at least 80.     ***
***                                                                ***
***    BPAM is used for manipulating the directory of the PDS,     ***
***    BSAM is used for copying the PDS member to the output       ***
***    sequential dataset.                                         ***
***                                                                ***
**********************************************************************
         EJECT
**********************************************************************
***                                                                ***
***  Invoking this program:                                        ***
***                                                                ***
***    This program is a callable subroutine.  The caller passes   ***
***    the addresses of two parameters to this subroutine:         ***
***                                                                ***
***      1.  The address of a 42-byte area containing an 8-byte    ***
***          member name.  ISPF statistics in STOW format will     ***
***          be returned in this area.                             ***
***                                                                ***
***      2.  The address of an opened DCB with DSORG=PO,MACRF=R.   ***
***                                                                ***
***    This program is Reenterable, Reusable, and Refreshable.     ***
***    The following is sample reenterable code for invoking the   ***
***    program.                                                    ***
***                                                                ***
*** *  ---------------------------------------------------------   ***
*** *                                                              ***
***          MVC   PDSDCB(PDSDCBL),PDSDCBD     INITIALIZE DCB      ***
*** *                                                              ***
***          MVC   PDOPENL(PDOPENLN),PDOPEND INITIALIZE OPEN LIST  ***
***          OPEN  (PDSDCB,(INPUT)),MF=(E,PDOPENL) OPEN IT         ***
*** *                                                              ***
***          MVC   GU01NAM(8),PARMIN        MOVE NAME TO DIR ENTRY ***
*** *                                                              ***
***          LA    R15,PDSDCB               ADDR OF DCB            ***
***          ST    R15,PARM30+00              INTO PARM LIST       ***
***          LA    R15,DIRENTRY             ADR OF DIRECTORY ENTRY ***
***          ST    R15,PARM30+04              INTO PARM LIST       ***
***          OI    PARM30+04,X'80'          MARK END OF LIST       ***
***          LA    R1,PARM30                ADDRESS OF PARM LIST   ***
***          L     R15,=V(GTEUA30)          ADDRESS OF SUBROUTINE  ***
***          BALR  R14,R15                  PERFORM THE SUBROUTINE ***
*** *                                                              ***
***          MVC   PDCLOSL(PDCLOSLN),PDCLOSD INITIALIZE CLOSE LIST ***
***          CLOSE (PDSDCB),MF=(E,PDCLOSL)  CLOSE IT               ***
*** *                                                              ***
*** *  ---------------------------------------------------------   ***
*** PDOPEND  OPEN  (,),MF=L                                        ***
*** PDCLOSD  CLOSE (),MF=L                                         ***
*** *                                                              ***
*** PDSDCBD  DCB   DDNAME=PDS,DSORG=PO,MACRF=R                     ***
*** *  ---------------------------------------------------------   ***
*** WORKD    DSECT                                                 ***
*** PARMIN   DS    CL8                      INPUT PARM             ***
*** DIRENTRY GTEUM01 DSECT=NO               DIRECTORY ENTRY        ***
*** PARM30   DS    2F                       PARM LIST FOR GTEUA30  ***
*** *                                                              ***
*** PDOPENL  OPEN  (,),MF=L                                        ***
*** PDOPENLN EQU *-PDOPENL                                         ***
*** PDCLOSL  CLOSE (),MF=L                                         ***
*** PDCLOSLN EQU *-PDCLOSL                                         ***
*** *                                                              ***
*** PDSDCB   DCB   DDNAME=PDS,DSORG=PO,MACRF=R                     ***
*** PDSDCBL  EQU   *-PDSDCB                                        ***
*** *  ---------------------------------------------------------   ***
***                                                                ***
**********************************************************************
         EJECT
**********************************************************************
***                                                                ***
***  FUNCTION:                                                     ***
***                                                                ***
***  1. Check for correct DCB information in the PDS.              ***
***  2. Open the output sequential dataset.                        ***
***  3. Try to locate the entry in the directory of the PDS.       ***
***  4. If the member is not found, create dummy statistics, then  ***
***     close the output sequential dataset and return to the      ***
***     caller.                                                    ***
***  5. If the member is found, check for the existence of ISPF    ***
***     statistics in the directory entry.                         ***
***  6. If the entry does not have statistics, create them in      ***
***     the returned data area.                                    ***
***  7. Copy the member into the output sequential dataset.        ***
***  8. Close the output sequential dataset.                       ***
***  9. Set the return code, free storage, and return to the       ***
***     caller.                                                    ***
***                                                                ***
***  NOTES:                                                        ***
***                                                                ***
***  1. The output file DDNAME is in the macro at label PDSDCBD.   ***
***                                                                ***
***  2. The first bit of the 'C' field, at offset +11 (X'0B')      ***
***     in the returned directory information field indicates      ***
***     that the entry is an alias, not a true name.               ***
***                                                                ***
***                                                                ***
***  RETURN CODES:                                                 ***
***                                                                ***
***     00 - Member found, had ISPF stats, copied to output file.  ***
***                                                                ***
***     04 - Member found, had no ISPF stats, stats created,       ***
***            member copied to output file.                       ***
***                                                                ***
***     08 - Member not found, stats created, output file erased.  ***
***                                                                ***
***     16 - A.  DSORG of PDS not PO or POU                        ***
***          B.  RECFM of PDS not F, FB, FA, or FBA                ***
***          C.  LRECL of PDS not 80                               ***
***          D.  BLKSIZE of PDS less than 80                       ***
***          E.  Not enough storage for FIND of directory entry.   ***
***          F.  I/O error during FIND of directory entry.         ***
***                                                                ***
**********************************************************************
         EJECT
**********************************************************************
***                                                                ***
***  REGISTER USAGE:                                               ***
***                                                                ***
***     R0-R3   - Used by macros, and work registers.              ***
***     R4-R5   - Work registers, not used to pass information     ***
***               between routines.                                ***
***     R6      - <unused>                                         ***
***     R7      - <unused>                                         ***
***     R8      - Base address of PDS DCB passed by caller.        ***
***     R9      - Base address of directory entry work area.       ***
***     R10     - Linkage register used with BAL.                  ***
***     R11     - <unused>                                         ***
***     R12     - Base register of program code.                   ***
***     R13     - Linkage registers and base of WORKD data area.   ***
***     R14-R15 - Linkage registers.                               ***
***                                                                ***
***                                                                ***
***  NON-IBM MACROS USED:                                          ***
***                                                                ***
***     GTEUM01  - Describes directory entry in STOW format.       ***
***     GTEUM02  - Describes directory entry in BLDL format.       ***
***                                                                ***
***                                                                ***
***  ASSEMBLER OPTIONS:       RENT                                 ***
***  LINKAGE EDITOR OPTIONS:  RENT, REUS, REFR                     ***
***                                                                ***
**********************************************************************
         EJECT
**********************************************************************
***                                                                ***
***  CULPRIT:                                                      ***
***                                                                ***
***     Chuck Hoffman, IBM Systems Programming                     ***
***     GTE Laboratories, Technical Computation Center             ***
***     40 Sylvan Road                                             ***
***     Waltham, Massachusetts  02254                              ***
***                                                                ***
***                     617/466-2131    V/N 679-2131               ***
***                                                                ***
**********************************************************************
         SPACE 3
**********************************************************************
***                                                                ***
***  MAINTENANCE HISTORY:                                          ***
***                                                                ***
***  1.  A.  Initial version.                                      ***
***                                                                ***
***                                                                ***
***                                                                ***
***                                                                ***
***                                                                ***
***                                                                ***
***                                                                ***
***                                                                ***
***                                                                ***
***                                                                ***
***                                                                ***
***                                                                ***
***                                                                ***
***                                                                ***
***                                                                ***
***                                                                ***
**********************************************************************
         EJECT
***********************************************************************
***                                                                 ***
***      LINKAGE CONVENTIONS ENTERING PROGRAM                       ***
***                                                                 ***
***********************************************************************
&MYNAME  CSECT ,
         STM   R14,R12,12(R13)          SAVE REGS TO CALLER S.A.
         B     (BEGIN-&MYNAME)(R15)     BRANCH AROUND EYECATCHER
         DC    A(L'NAME)                LENGTH OF CSECT NAME
NAME     DC    C'&MYNAME'               CSECT NAME
         DC    C' &SYSDATE &SYSTIME '   ASSEMBLY DATE/TIME STAMP
         PRINT NOGEN
BEGIN    LR    RBASE,R15                LOAD BASE REGISTER
         USING &MYNAME,RBASE              ADDRESSABILITY
         GETMAIN R,LV=WORKDLEN          GET SAVE/WORK AREA
         ST    R1,8(0,R13)              MY S.A. ADDR INTO CALLER S.A.
         ST    R13,4(0,R1)              CALLER S.A. ADDR INTO MY S.A.
         LR    R13,R1                   R13 POINTS TO MY S.A.
         USING WORKD,R13                ADDRESSABILITY OF SAVE AREA
         L     R1,4(0,R13)              R1 POINTS TO CALLER S.A.
         LM    R15,R1,16(R1)            R15 R0 AND R1 ARE RESTORED
*
         EJECT
***********************************************************************
***                                                                 ***
***      MAINLINE ROUTINE                                           ***
***                                                                 ***
***********************************************************************
MAIN     EQU   *                        BEGIN MAINLINE ROUTINE
         ST    R1,R1SAVE                SAVE INITIAL R1
         XC    COMPCODE,COMPCODE        CLEAR COMPLETION CODE
         MVI   SWITCH0,B'00000000'      INITIALIZE SWITCH AREA 0
*
         LM    R8,R9,0(R1)              R8 POINTS TO THE OPEN PDS DCB
*                                       R9 POINTS TO DIR ENTRY AREA
         USING PDSDCB,R8                ADDRESSABILITY
         USING DIRENTRY,R9              ADDRESSABILITY
*
MACHKDCB BAL   RBAL,CHKDCB              CHECK DCB INFORMATION
         CLC   RETCDE,=F'4'             IF NOT F, 80, PO
         BE    END16                      BRANCH TO BAD ENDING
*
MAOPNWRK BAL   RBAL,WOPEN               OPEN THE WORK DATASET
*
MAFIND   BAL   RBAL,FINDENT             FIND ENTRY WITH BLDL
         CLC   RETCDE,=F'8'             IF I/O ERROR, OR VS SHORTAGE
         BE    END16                      BRANCH TO BAD ENDING
MANOTFND CLC   RETCDE,=F'4'             IF MEMBER NOT FOUND
         BNE   MAFOUND                    THEN
         BAL   RBAL,DUMMYST                 RETURN DUMMY STATS
         B     END08                        AND RETURN WITH CC=08
*
MAFOUND  BAL   RBAL,STATCHK             CHECK FOR ISPF STATS
MANOSTAT CLC   RETCDE,=F'4'             IF NO STATS
         BNE   MASTAT                     THEN
         BAL   RBAL,DUMMYST                 RETURN DUMMY STATS
         B     MAUNLOAD                 ELSE
MASTAT   BAL   RBAL,COPYSTAT              RETURN COPIED STATS
*
MAUNLOAD BAL   RBAL,UNLOAD              COPY THE DATA OUT
*
         TM    SWITCH0,X'80'            IF DUMMY STATS CREATED
         BO    END04                      BRANCH TO RC=04
         B     END00                    ELSE BRANCH TO RC=00
*
         EJECT
***********************************************************************
***                                                                 ***
***      LINKAGE CONVENTIONS EXITING PROGRAM                        ***
***                                                                 ***
***********************************************************************
END00    LA    R15,0                    SET COMPLETION CODE 00
         ST    R15,COMPCODE               INTO STORAGE
         B     ENDING                   GO TO ENDING
*
END04    LA    R15,4                    SET COMPLETION CODE 04
         ST    R15,COMPCODE               INTO STORAGE
         B     ENDING                   GO TO ENDING
*
END08    LA    R15,8                    SET COMPLETION CODE 08
         ST    R15,COMPCODE               INTO STORAGE
         B     ENDING                   GO TO ENDING
*
END16    LA    R15,16                   SET COMPLETION CODE 16
         ST    R15,COMPCODE               INTO STORAGE
         B     ENDING                   GO TO ENDING
*
ENDING   BAL   RBAL,WCLOSE              CLOSE THE PDS
*
ENDLINK  L     R14,COMPCODE             R14 SAVES COMP CODE
         LR    R1,R13                   R1 SAVES ADDR OF MY S.A.
         L     R13,4(0,R1)              R13 RESTORED, PTR CALLER S.A.
         FREEMAIN R,LV=WORKDLEN,A=(R1)  FREE MY SAVE/WORK AREA
         LR    R15,R14                  R15 SET TO COMP CODE
         LM    R0,R12,20(R13)           R0-R12 RESTORED
         L     R14,12(0,R13)            R14 RESTORED
         MVI   12(R13),X'FF'            SET COMPLETION SIGNAL
         BR    R14                      RETURN TO CALLER
*
         EJECT
**********************************************************************
***                                                                ***
***  CHECK PDS DCB FOR CORRECT INFORMATION                         ***
***                                                                ***
**********************************************************************
CHKDCB   ST    RBAL,CHRBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
         TM    PDSDCB+(DCBDSORG-IHADCB),DCBDSGPO IF NOT PARTITIONED
         BNO   CHRET04                             GO TO BAD ENDING
         TM    PDSDCB+(DCBRECFM-IHADCB),DCBRECF  IF NOT FIXED RECFM
         BNO   CHRET04                             GO TO BAD ENDING
         CLC   PDSDCB+(DCBLRECL-IHADCB)(2),=H'80' IF NOT LRECL 80
         BNE   CHRET04                             GO TO BAD ENDING
         CLC   PDSDCB+(DCBBLKSI-IHADCB)(2),=H'80' IF NOT BLKSI GT 80
         BL    CHRET04                             GO TO BAD ENDING
*
         B     CHEND
*
CHRET04  LA    R15,X'04'                RETURN CODE TO R15
         ST    R15,RETCDE               SAVE IT
         B     CHEND                    BRANCH TO ENDING
*
CHEND    L     RBAL,CHRBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
         EJECT
**********************************************************************
***                                                                ***
***   OPEN THE WORK DCB                                            ***
***                                                                ***
**********************************************************************
WOPEN    ST    RBAL,WORBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
         MVC   WRKDCB(WRKDCBL),WRKDCBD     INITIALIZE DCB
*
         LH    R2,PDSDCB+(DCBBLKSI-IHADCB) R2 HAS INPUT BLKSIZE
         STH   R2,WRKDCB+(DCBBLKSI-IHADCB) STORE IN WORK DCB
         ST    R2,SAVBLKSI                   AND ALSO SAVE IT
*
         LH    R2,PDSDCB+(DCBLRECL-IHADCB) R2 HAS INPUT LRECL
         STH   R2,WRKDCB+(DCBLRECL-IHADCB) STORE IN WORK DCB
         ST    R2,SAVLRECL                   AND ALSO SAVE IT
*
         LH    R2,PDSDCB+(DCBRECFM-IHADCB) R2 HAS INPUT RECFM
         STH   R2,WRKDCB+(DCBRECFM-IHADCB) STORE IN WORK DCB
*
         MVC   WKOPENL(WKOPENLN),WKOPEND   INITIALIZE OPEN LIST
         OPEN  (WRKDCB,(OUTPUT)),MF=(E,WKOPENL)  OPEN IT
*
         B     WOEND
*
WORET04  LA    R15,X'04'                RETURN CODE TO R15
         ST    R15,RETCDE               SAVE IT
         B     WOEND                    BRANCH TO ENDING
*
WOEND    L     RBAL,WORBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
*
         EJECT
**********************************************************************
***                                                                ***
***  CLOSE THE WORK DCB                                            ***
***                                                                ***
**********************************************************************
WCLOSE   ST    RBAL,WCRBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
         MVC   WKCLOSL(WKCLOSLN),WKCLOSD  INITIALIZE CLOSE LIST
         CLOSE (WRKDCB),MF=(E,WKCLOSL)    CLOSE IT
*
         B     WCEND
*
WCRET04  LA    R15,X'04'                RETURN CODE TO R15
         ST    R15,RETCDE               SAVE IT
         B     WCEND                    BRANCH TO ENDING
*
WCEND    L     RBAL,WCRBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
         EJECT
**********************************************************************
***                                                                ***
***   USE PARM DIR ENTRY FIELDS FOR BLDL.                          ***
***   CREATE A BLDL ENTRY WITH BLDL.                               ***
***                                                                ***
**********************************************************************
FINDENT  ST    RBAL,FIRBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
         NI    SWITCH0,X'FF'-X'40'      SET SWITCH TO MEMBER NOT FOUND
*
         XC    BLDLNTRY(BLDLLEN),BLDLNTRY  CLEAR ENTRY WORK AREA
         MVI   GU02FF+1,X'01'           SET ENTRY COUNT TO 1
         MVI   GU02LL+1,X'50'           SET ENTRY LENGTH TO 80
         MVC   GU02NAM,GU01NAM          COPY MEMBNAME INTO BLDL AREA
         LA    R1,PDSDCB                R1 POINTS TO OPEN DCB
         LA    R0,BLDLNTRY              R0 POINTS TO BLDL ENTRY AREA
         BLDL  (R1),(R0)                EXECUTE BLDL
         ST    R15,RETCDE               SAVE THE RETURN CODE
*                                         00 - FOUND
*                                         04 - NOT FOUND
*                                         08 - I/O ERROR OR VS SHORTAGE
*
         LTR   R15,R15                  IF MEMBER WAS FOUND
         BNZ   FIEND                      THEN
         OI    SWITCH0,X'40'                TURN ON MEMBER FOUND SWITCH
         TM    GU02C,X'80'                  IF ALSO AN ALIAS
         BNO   FIEND                          THEN
         OI    SWITCH0,X'20'                    TURN ON ALIAS SWITCH
*
         B     FIEND
*
FIRET04  LA    R15,X'04'                RETURN CODE TO R15
         ST    R15,RETCDE               SAVE IT
         B     FIEND                    BRANCH TO ENDING
*
FIEND    L     RBAL,FIRBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
         EJECT
**********************************************************************
***                                                                ***
***  CREATE A DUMMY ISPF STATS PDS DIRECTORY ENTRY.  FILL IN ALL   ***
***  USER DATA FIELDS EXCEPT MEMBER NAME AND SIZE.                 ***
***                                                                ***
**********************************************************************
DUMMYST  ST    RBAL,DURBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
DUCOPY   TM    SWITCH0,X'40'            IF MEMBER WAS FOUND
         BNO   DUTTR                      THEN
         MVC   GU01TTR(3),GU02TTR           COPY 'TTR'
DUC      MVC   GU01C(DIRMOC),DUMMYC         INITIALIZE FROM 'C' ON
         TM    SWITCH0,X'20'                IF IT WAS AN ALIAS ENTRY
         BNO   DUTIME                         THEN
         OI    GU01C,X'80'                      MAKE THIS AN ALIAS TOO
         B     DUTIME                     ELSE
DUTTR    MVC   GU01TTR(DIRMOTTR),DUMMYTTR    INITIALIZE FROM 'TTR' ON
*
DUTIME   TIME  DEC                      R0=DATE MMDDHHTH
*                                       R1=00YYDDDF
         ST    R1,GU01DATC              SAVE DATE CREATED  00YYDDDF
         ST    R1,GU01DATM              SAVE DATE MODIFIED 00YYDDDF
         STCM  R0,B'1100',GU01TIMM      SAVE TIME MODIFIED HHMM
*
         XR    R15,R15                  ADDRESS OF PSA
         USING PSA,R15                    ASSIGN ADDRESSABILITY
         L     R14,FLCCVT               ADDRESS OF CVT
         USING CVTMAP,R14                 ASSIGN ADDRESSABILITY
         DROP  R15                        DROP ADDRESSABILITY
         L     R15,CVTTCBP              ADDRESS OF NEXT TCB POINTER
         L     R15,4(0,R15)             ADDRESS OF CURRENT TCB
         USING TCB,R15                    ASSIGN ADDRESSABILITY
         DROP  R14                        DROP ADDRESSABILITY
         L     R14,TCBTIO               ADDRESS OF TIOT
         USING TIOT,R14                   ASSIGN ADDRESSABILITY
         MVC   JOBNAME(8),TIOCNJOB      JOBNAME TO STORAGE
         DROP  R14,R15                    DROP ADDRESSABILITY
*
         MVC   GU01ID(7),JOBNAME        JOBNAME CHARS 1-7 TO ID
*
         OI    SWITCH0,X'80'            INDICATE DUMMY STATS CREATED
*
         B     DUEND
*
DURET04  LA    R15,X'04'                RETURN CODE TO R15
         ST    R15,RETCDE               SAVE IT
         B     DUEND                    BRANCH TO ENDING
*
DUEND    L     RBAL,DURBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
         EJECT
**********************************************************************
***                                                                ***
***  FIND OUT IF BLDL ENTRY CONTAINS ISPF STATISTICS.              ***
***                                                                ***
**********************************************************************
STATCHK  ST    RBAL,STRBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
         CLI   GU02C,X'0F'              IF NOT RIGHT LENGTH
         BE    *+16                       OR
         CLI   GU02C,X'8F'              IF ALIAS AND NOT RIGHT LENGTH
         BE    *+8                        THEN
         B     STRET04                      GO TO BAD COMPLETION
*
         CLI   GU02MOD,X'63'            IF MOD NUMBER GT 99
         BH    STRET04                    GO TO BAD COMPLETION
*
         CLI   GU02DATC,X'00'           IF 00YY GREATER THAN 0099
         BH    STRET04                    GO TO BAD COMPLETION
         TRT   GU02DATC+1(2),PACKTBL1   IF NOT
         BNZ   STRET04                    A PACKED
         TRT   GU02DATC+3(1),PACKTBL2       NUMBER
         BNZ   STRET04                        GO TO BAD COMPLETION
         CLC   GU02DATC+2(2),=X'366F'   IF DDD GREATER THAN 366F
         BH    STRET04                    GO TO BAD COMPLETION
*
         CLI   GU02DATM,X'00'           IF 00YY GREATER THAN 0099
         BH    STRET04                    GO TO BAD COMPLETION
         TRT   GU02DATM+1(2),PACKTBL1   IF NOT
         BNZ   STRET04                    A PACKED
         TRT   GU02DATM+3(1),PACKTBL2       NUMBER
         BNZ   STRET04                        GO TO BAD COMPLETION
         CLC   GU02DATM+2(2),=X'366F'   IF DDD GREATER THAN 366F
         BH    STRET04                    GO TO BAD COMPLETION
*
         TRT   GU02TIMM(1),TIMETBL1     IF HH NOT PACKED 00-24
         BNZ   STRET04                    GO TO BAD COMPLETION
         TRT   GU02TIMM+1(1),TIMETBL2   IF MM NOT PACKED 00-59
         BNZ   STRET04                    GO TO BAD COMPLETION
*
         B     STEND
*
STRET04  LA    R15,X'04'                RETURN CODE TO R15
         ST    R15,RETCDE               SAVE IT
         B     STEND                    BRANCH TO ENDING
*
STEND    L     RBAL,STRBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
         EJECT
**********************************************************************
***                                                                ***
***   COPY INFORMATION FROM RETURNED BLDL LIST INTO PDS DIRECTORY  ***
***   ENTRY PARM DATA AREA.                                        ***
***                                                                ***
**********************************************************************
COPYSTAT ST    RBAL,CORBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
         MVC   GU01TTR,GU02TTR          COPY TTR
         MVC   GU01C(DIRENLEN-GU01C+DIRENTRY),GU02C
*                                         COPY:  C,VER,MOD,FILLER,
*                                                DATC,DATM,TIMM,SIZE,
*                                                INIT,MODL,ID,FILLER
*
         B     COEND
*
CORET04  LA    R15,X'04'                RETURN CODE TO R15
         ST    R15,RETCDE               SAVE IT
         B     COEND                    BRANCH TO ENDING
*
COEND    L     RBAL,CORBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
         EJECT
**********************************************************************
***                                                                ***
***  UNLOAD THE PDS MEMBER TO A SEQUENTIAL WORK DATASET.           ***
***                                                                ***
**********************************************************************
UNLOAD   ST    RBAL,UNRBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
*
UNSTOR   L     R3,SAVBLKSI              R3 HAS WORK AREA LENGTH (BLKSI)
         GETMAIN R,LV=(R3)              GET ONE BLKSIZE OF STORAGE
         LR    R2,R1                    R2 POINTS TO STORAGE
*
UNEOF1   MVC   SAVEODA,PDSDCB+(DCBEODA-IHADCB)    SAVE PDS EODAD
         MVC   PDSDCB+(DCBEODA-IHADCB)(3),AUNPDEOF+1  MY EODAD ADDR
*
UNDECB1  MVC   PDSDECB(PDDECBLN),PDSDECBD        INITIALIZE DECB
         MVC   WRKDECB(WKDECBLN),WRKDECBD        INITIALIZE DECB
*
*UNFIND  FIND  PDSDCB,GU01TTR,C  <=== S001-1 ABENDS.  DON'T KNOW WHY.
UNFIND   FIND  PDSDCB,GU01NAM,D         POINT TO PDS MEMBER
         XR    R5,R5                    CLEAR R5 FOR COUNTER
*
UNPDSIN  READ  PDSDECB,SF,PDSDCB,(R2),'S',MF=E   READ A BLOCK
         CHECK PDSDECB                             WAIT FOR READ
         L     R4,SAVBLKSI                       R4 HAS REQUSTED BYTES
         L     R15,PDSDECB+16                    R15 POINTS TO IOB
         LH    R15,14(0,R15)                     R15 HAS RESID BYT CNT
         SR    R4,R15                            R4 HAS BYTES READ
         STH   R4,WRKDCB+(DCBBLKSI-IHADCB)         INTO OUTPUT BLKSIZE
         AR    R5,R4                               ADD TO BYTE COUNT
         WRITE WRKDECB,SF,WRKDCB,(R2),'S',MF=E   WRITE THE BLOCK
         CHECK WRKDECB                             WAIT FOR READ
UNPDSEOL B     UNPDSIN                           LOOP UP TILL EOF
*
*                                           ===> EOF POINT
UNPDSEOF MVC   PDSDCB+(DCBEODA-IHADCB)(3),SAVEODA  RESTORE EODAD ADDR
         FREEMAIN R,LV=(R3),A=(R2)      FREE STORAGE
*
         XR    R4,R4                    CLEAR R4 FOR DIVIDE
         D     R4,SAVLRECL              R5 NOW HAS RECORD COUNT
         STCM  R5,3,GU01SIZE              INTO SIZE STATS FIELD
         TM    SWITCH0,X'80'              IF DUMMY STATS WERE CREATED
         BNO   *+8                          THEN
         STCM  R5,3,GU01INIT                ALSO INTO INIT STATS FIELD
*
         B     UNEND
*
UNRET04  LA    R15,X'04'                RETURN CODE TO R15
         ST    R15,RETCDE               SAVE IT
         B     UNEND                    BRANCH TO ENDING
*
UNEND    L     RBAL,UNRBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
         EJECT
***********************************************************************
***                                                                 ***
***      FIXED DATA AREA                                            ***
***                                                                 ***
***********************************************************************
AUNPDEOF DC    A(UNPDSEOF)              EOF BRANCH ADDRESS
F0       DC    F'0'                     CONSTANT
BLANKS   DC    CL80' '                  LITERAL
X00S     DC    XL40'00'                 LITERAL
*
DUMMYENT DS    0D                       DUMMY PDS STATS ENTRY
DUMMYNAM DC    CL8' '                     NAME
DUMMYTTR DC    XL3'000000'                TTR
DUMMYC   DC    XL1'0F'                    C
DUMMYVER DC    XL4'01000000'              VER,MOD,FILLER X'0000'
         DC    2XL4'0080001F'             DATEC,DATEM 01/01/80
         DC    XL8'00'                    TIMEM,SIZE,INIT,MODL
         DC    CL10' '                    ID,FILLER X'404040'
*
WKOPEND  OPEN  (,),MF=L
WKCLOSD  CLOSE (),MF=L
WRKDCBD  DCB   DDNAME=WRK001,DSORG=PS,MACRF=W
*
         READ  PDSDECBD,SF,MF=L
         WRITE WRKDECBD,SF,MF=L
*
         EJECT
PACKTBL1 DS    0D   0 1  2 3  4 5  6 7  8 9  A B  C D  E F
         DC    XL2'0000,0000,0000,0000,0000,0101,0101,0101' X'00'-X'0F'
         DC    XL2'0000,0000,0000,0000,0000,0101,0101,0101' X'10'-X'1F'
         DC    XL2'0000,0000,0000,0000,0000,0101,0101,0101' X'20'-X'2F'
         DC    XL2'0000,0000,0000,0000,0000,0101,0101,0101' X'30'-X'3F'
         DC    XL2'0000,0000,0000,0000,0000,0101,0101,0101' X'40'-X'4F'
         DC    XL2'0000,0000,0000,0000,0000,0101,0101,0101' X'50'-X'5F'
         DC    XL2'0000,0000,0000,0000,0000,0101,0101,0101' X'60'-X'6F'
         DC    XL2'0000,0000,0000,0000,0000,0101,0101,0101' X'70'-X'7F'
         DC    XL2'0000,0000,0000,0000,0000,0101,0101,0101' X'80'-X'8F'
         DC    XL2'0000,0000,0000,0000,0000,0101,0101,0101' X'90'-X'9F'
         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'A0'-X'AF'
         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'B0'-X'BF'
         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'C0'-X'CF'
         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'D0'-X'DF'
         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'E0'-X'EF'
         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'F0'-X'FF'
*
PACKTBL2 DS    0D   0 1  2 3  4 5  6 7  8 9  A B  C D  E F
         DC    XL2'0101,0101,0101,0101,0101,0101,0202,0100' X'00'-X'0F'
         DC    XL2'0101,0101,0101,0101,0101,0101,0202,0100' X'10'-X'1F'
         DC    XL2'0101,0101,0101,0101,0101,0101,0202,0100' X'20'-X'2F'
         DC    XL2'0101,0101,0101,0101,0101,0101,0202,0100' X'30'-X'3F'
         DC    XL2'0101,0101,0101,0101,0101,0101,0202,0100' X'40'-X'4F'
         DC    XL2'0101,0101,0101,0101,0101,0101,0202,0100' X'50'-X'5F'
         DC    XL2'0101,0101,0101,0101,0101,0101,0202,0100' X'60'-X'6F'
         DC    XL2'0101,0101,0101,0101,0101,0101,0202,0100' X'70'-X'7F'
         DC    XL2'0101,0101,0101,0101,0101,0101,0202,0100' X'80'-X'8F'
         DC    XL2'0101,0101,0101,0101,0101,0101,0202,0100' X'90'-X'9F'
         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'A0'-X'AF'
         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'B0'-X'BF'
         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'C0'-X'CF'
         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'D0'-X'DF'
         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'E0'-X'EF'
         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'F0'-X'FF'
*
         EJECT
TIMETBL1 DS    0D   0 1  2 3  4 5  6 7  8 9  A B  C D  E F
         DC    XL2'0000,0000,0000,0000,0000,0101,0101,0101' X'00'-X'0F'
         DC    XL2'0000,0000,0000,0000,0000,0101,0101,0101' X'10'-X'1F'
         DC    XL2'0000,0000,0001,0101,0101,0101,0101,0101' X'20'-X'2F'
         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'30'-X'3F'
         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'40'-X'4F'
         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'50'-X'5F'
         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'60'-X'6F'
         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'70'-X'7F'
         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'80'-X'8F'
         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'90'-X'9F'
         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'A0'-X'AF'
         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'B0'-X'BF'
         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'C0'-X'CF'
         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'D0'-X'DF'
         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'E0'-X'EF'
         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'F0'-X'FF'
*
TIMETBL2 DS    0D   0 1  2 3  4 5  6 7  8 9  A B  C D  E F
         DC    XL2'0000,0000,0000,0000,0000,0101,0101,0101' X'00'-X'0F'
         DC    XL2'0000,0000,0000,0000,0000,0101,0101,0101' X'10'-X'1F'
         DC    XL2'0000,0000,0000,0000,0000,0101,0101,0101' X'20'-X'2F'
         DC    XL2'0000,0000,0000,0000,0000,0101,0101,0101' X'30'-X'3F'
         DC    XL2'0000,0000,0000,0000,0000,0101,0101,0101' X'40'-X'4F'
         DC    XL2'0000,0000,0000,0000,0000,0101,0101,0101' X'50'-X'5F'
         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'60'-X'6F'
         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'70'-X'7F'
         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'80'-X'8F'
         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'90'-X'9F'
         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'A0'-X'AF'
         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'B0'-X'BF'
         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'C0'-X'CF'
         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'D0'-X'DF'
         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'E0'-X'EF'
         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'F0'-X'FF'
*
         LTORG
*
         EJECT
***********************************************************************
***                                                                 ***
***      DSECT FOR MY SAVE AREA AND VARIABLES.                      ***
***                                                                 ***
***********************************************************************
WORKD    DSECT
MYSAVE   DS    18F                      MY REGISTER SAVE AREA
COMPCODE DS    F                        PROGRAM COMPLETION CODE
RETCDE   DS    F                        INTERNAL RETURN CODE
R1SAVE   DS    F                        INITIAL VALUE IN R1
*
FIRBALSV DS    F                        RETURN ADDRESS SAVE AREA
DURBALSV DS    F                        RETURN ADDRESS SAVE AREA
STRBALSV DS    F                        RETURN ADDRESS SAVE AREA
CORBALSV DS    F                        RETURN ADDRESS SAVE AREA
UNRBALSV DS    F                        RETURN ADDRESS SAVE AREA
WORBALSV DS    F                        RETURN ADDRESS SAVE AREA
WCRBALSV DS    F                        RETURN ADDRESS SAVE AREA
CHRBALSV DS    F                        RETURN ADDRESS SAVE AREA
*
SWITCH0  DS    B'00000000'              SWITCH AREA 0
*                1.......                X'80' - DUMMY STATS CREATED
*                .1......                X'40' - MEMBER WAS FOUND
*                ..1.....                X'20' - MEMBER WAS AN ALIAS
*                ...11111                (UNUSED)
*
WKOPENL  OPEN  (,),MF=L
WKOPENLN EQU   *-WKOPENL
WKCLOSL  CLOSE (),MF=L
WKCLOSLN EQU   *-WKCLOSL
         READ  PDSDECB,SF,MF=L          DECB FOR PDS
PDDECBLN EQU   *-PDSDECB
         WRITE WRKDECB,SF,MF=L          DECB FOR WORK FILE
WKDECBLN EQU   *-WRKDECB
*
         DS    0F
SAVEODA  DS    AL3                      SAVE AREA FOR EODAD ADDRESS
*
WRKDCB   DCB   DDNAME=WRK001,DSORG=PS,MACRF=W
WRKDCBL  EQU    *-WRKDCB
*
SAVBLKSI DS    F                        SAVED INPUT BLOCKSIZE
SAVLRECL DS    F                        SAVED INPUT LRECL
*
BLDLNTRY GTEUM02 DSECT=NO               BLDL FORMAT ENTRY
BLDLLEN  EQU   *-BLDLNTRY                 LENGTH OF BLDL ENTRY
*
JOBNAME  DS    CL8                      JOB NAME
*
         DS    0D
WORKDLEN EQU   *-WORKD
*
         EJECT
***********************************************************************
***                                                                 ***
***      MAPPING DSECTS                                             ***
***                                                                 ***
***********************************************************************
*
         IHADCB DSORG=PO,DEVD=DA
*
DIRENTRY GTEUM01
DIRMOTTR EQU    *-GU01TTR               LENGTH OF MOVE INCLUDING TTR
DIRMOC   EQU    *-GU01C                 LENGTH OF MOVE EXCLUDING TTR
DIRENLEN EQU    *-DIRENTRY              LENGTH OF WHOLE ENTRY
*
         IHAPSA                         MAP OF PSA  DSECT=PSA
         IKJTCB                         MAP OF TCB  DSECT=TCB
TIOT     DSECT
         IEFTIOT1                       MAP OF TIOT
         CVT   DSECT=YES                MAP OF CVT  DSECT=CVTMAP
*
PDSDCB   DSECT                          OPEN DCB PASSED FROM CALLER
         DCB   DDNAME=PDS,DSORG=PO,MACRF=R
*
         EJECT
***********************************************************************
***                                                                 ***
***      REGISTER EQUATES                                           ***
***                                                                 ***
***********************************************************************
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*
         END
