         TITLE 'PUP - CP TO EXECUTE PDS UPDATE UTILITIES'
         MACRO
&LABEL   TEXTBILD &AREA=,&TEXT=
.*+-----------------------------------------------------------------+
.*×  MACRO TO BUILD TEXT LINES FROM INDIVIDUAL WORDS AND PHRASES.   ×
.*×   E.G.                                                          ×
.*×           TEXTBILD  AREA=OUTAREA,TEXT=(AVALUE,BVALUE,CVALUE)    ×
.*×                                                                 ×
.*×  AVALUE   DC  H'5',C'ALPHA'                                     ×
.*×  BVALUE   DC  H'7',C'-BRAVO-'                                   ×
.*×  CVALUE   DC  H'7',C'CHARLIE'                                   ×
.*×                                                                 ×
.*×  OUTAREA  DS  CL80                                              ×
.*×                                                                 ×
.*×  CLEARS THE OUTAREA DATA ITEM WITH BLANKS, THEN                 ×
.*×  PRODUCES THE FOLLOWING IN OUTAREA: 'ALPHA-BRAVO-CHARLIE'       ×
.*×                                                                 ×
.*×  UPON COMPLETION:  R1  POINTS TO OUTAREA                        ×
.*×                    R15 HAS TOTAL LENGTH OF TEXT (19)            ×
.*×                                                                 ×
.*×  NOTES 1.  THE LENGTH OF THE CLEAR OPERATION IS TAKEN FROM      ×
.*×            THE DEFINED LENGTH OF THE 'AREA' DATA ITEM.          ×
.*×        2.  THE CODE PRODUCED BY THIS MACRO IS REENTERABLE.      ×
.*+-----------------------------------------------------------------+
         LCLA  &N1,&N2
&N1      SETA  N'&TEXT                  NUMBER OF TEXT OPERANDS
&N2      SETA  1                        INDEX OF INITIAL TEXT OPERAND
.*
&LABEL   MVI   &AREA,X'40'              CLEAR THE TEXT LINE
         MVC   &AREA+1(L'&AREA-1),&AREA   WITH BLANKS
.*
         LA    15,&AREA                 R15 POINTS TO TEXT BEGIN
.LOOP1   ANOP
         LH    1,&TEXT(&N2)             R1 HAS LENGTH OF TEXT
         BCTR  1,0                        MINUS 1 FOR EXEC
         B     *+10                     BRANCH AROUND MOVE
         MVC   0(*-*,15),&TEXT(&N2)+2     MOVE THE DATA
         EX    1,*-6                    EXECUTE THE MOVE
         LA    15,1(1,15)               R15 POINTS JUST BEYOND CHARS
&N2      SETA  &N2+1                    POINT TO NEXT TEXT OPERAND
         AIF   (&N2 LE &N1).LOOP1       LOOP BACK UP
.*
         LA    1,&AREA                  R1 HAS ADDR OF AREA
         SR    15,1                     R15 HAS TOTAL LENGTH OF TEXT
.*
         MEND
*
         EJECT
         PRINT NOGEN
**********************************************************************
***                                                                ***
***                   PUP                                          ***
***                                                                ***
**********************************************************************
         EJECT
**********************************************************************
***                                                                ***
***   Attributes -                                                 ***
***       ASM - RENT (TEST)                                        ***
***      LKED - REUS, RENT, REFR(/TEST)                            ***
***                                                                ***
***   Register Usage -                                             ***
***       R0-R1 - Macros, Linkage conventions                      ***
***       R2-R3 - Macros, work                                     ***
***       R4-R6 - Work                                             ***
***          R7 - (unused)                                         ***
***          R8 - Base of WORK8 DSECT (SP-001)                     ***
***          R9 - Base of various PARMPDLx DSECTs.                 ***
***         R10 - BAL register                                     ***
***         R11 - First base register of main program.             ***
***         R12 - Second base reg of main program, base of exits   ***
***         R13 - Linkage conventions, Base of WORKD DSECT         ***
***     R14-R15 - Linkage conventions                              ***
***                                                                ***
***                                                                ***
***   Return Codes -                                               ***
***        0000 - Normal                                           ***
***        0004 - ABEND processing took place.                     ***
***                                                                ***
***                                                                ***
***   CSECTs -                                                     ***
***                                                                ***
***     PUPxx    - Main program.                                   ***
***     ESTXIT   - User exit for ABEND processing.                 ***
***     ATTNXIT  - User exit for Attention interrupts.             ***
***     APARMPCL - PARSE Control Element List (UPDATE).            ***
***     BPARMPCL - PARSE Control Element List (RESTORE).           ***
***     CPARMPCL - PARSE Control Element List (DELETE, STATS).     ***
***     DPARMPCL - PARSE Control Element List (ALAIS).             ***
***     PDSMEM   - PARSE Validation Routine for xPOSDSN.           ***
***                                                                ***
***   Non-IBM macros used:                                         ***
***                                                                ***
***     GTEDADOC - Not used, this is documentation for the         ***
***                following three macros.                         ***
***                                                                ***
***     GTEDADAT - Creates data areas and control blocks for       ***
***                SVC-99 (DYNALLOC) and IKJEFF18 (DAIRFAIL).      ***
***     GTEDASET - Links together control blocks and data areas    ***
***                created by GTEDADAT.                            ***
***     GTEDAALC - Execute SVC-99 and IKJEFF18.                    ***
***                                                                ***
**********************************************************************
         EJECT
**********************************************************************
***                                                                ***
***   Non-IBM subprograms called:                                  ***
***                                                                ***
***     GTEUA00  - Utility to update PDS member and Pan library.   ***
***                Method of call:  LINK macro                     ***
***                                                                ***
***     GTEUA01  - Utility to restore PDS member from Pan library. ***
***                Method of call:  LINK macro                     ***
***                                                                ***
***     GTEUA02  - Utility to delete PDS member.                   ***
***                Method of call:  LINK macro                     ***
***                                                                ***
***     GTEUA03  - Utility to add an alias for a PDS member.       ***
***                Method of call:  LINK macro                     ***
***                                                                ***
***     GTEUA04  - Utility to display statistics for PDS member GU00301
***                and Panvalet members.                        GU00301
***                Method of call:  LINK macro                  GU00301
***                                                             GU00301
***     GTEUA05  - Utility to backup a PDS member into a Pan    GU00401
***                Library.                                     GU00401
***                Method of call:  LINK macro                  GU00401
***                                                             GU00401
***     PANINDEX - TSO command processor to list selected infor-   ***
***                mation from a Panvalet directory.               ***
***                Method of call:  LINK macro                     ***
***                                                                ***
***     PDS      - TSO command processor to manipulate partitioned ***
***                datasets (used to list directory information).  ***
***                Method of call:  LINK macro                     ***
***                                                                ***
**********************************************************************
         EJECT
**********************************************************************
***                                                                ***
***  CULPRIT:                                                      ***
***                                                                ***
***     Chuck Hoffman, IBM Systems Programming                  GU00102
***     GTE Laboratories, Technical Computation Center          GU00102
***     40 Sylvan Road                                          GU00102
***     Waltham, Massachusetts  02254                           GU00102
***                                                             GU00102
***                     617/466-2131    V/N 679-2131            GU00102
***                                                                ***
**********************************************************************
         SPACE 3
**********************************************************************
***                                                                ***
***  MAINTENANCE HISTORY:                                          ***
***                                                                ***
***  1.  A.  Initial install.                                      ***
***                                                                ***
***  2.  A.  Addition of STATUS synonym for STATS subcommand.   GU00102
***      B.  Add documentation.                                 GU00102
***                                                                ***
***  3.  A.  Change STATS to link to GTEUA04.                   GU00301
***      B.  Add TSTATS to perform old STATS function via the   GU00301
***          PANINDEX and PDS commands.                         GU00301
***                                                             GU00401
***  4.  A.  Add BACKUP function to link to GTEUA05.            GU00401
***                                                                ***
***                                                                ***
**********************************************************************
         EJECT
**********************************************************************
***                                                                ***
***   PROLOG                                                       ***
***                                                                ***
***     1.  Linkage conventions and addressability.                ***
***     2.  Clear the completion code                              ***
***     3.  Save the pointer to the CPPL.                          ***
***                                                                ***
**********************************************************************
*
PUP1A    CSECT
         STM   R14,R12,12(R13)          SAVE INTO CALLERS S.A.
         B     BASE-PUP1A(0,R15)        BRANCH TO AROUND EYECATCHER
         DC    AL1(L'NAME)                LENGTH OF NAME
NAME     DC    C'PUP1A'                   MODULE NAME
         DC    C' &SYSDATE &SYSTIME '     DD.MM.YY HH.MM
         DC    CL32' '
         DC    C'THIS COMMAND WAS NAMED PUP BY ERNIE LEVENSON AND AL '
         DC    C'BUCZYNSKI ON AUGUST 27 1986 AT GTE LABORATORIES IN '
         DC    C'WALTHAM MASS'
         DC    CL32' '
*
BASE     LR    RBASE,R15                RBASE IS BASE REGISTER
         LA    RBASE2,X'800'(0,RBASE)   COMPUTE VALUE FOR
         LA    RBASE2,X'800'(0,RBASE2)    SECOND BASE REGISTER
         USING PUP1A,RBASE,RBASE2       TELL ASSEMBLER
*
         GETMAIN  R,LV=WORKDLEN,SP=0    GET AREA FOR MYSAVE AND WORK
         ST    R13,4(0,R1)              CALLERS S.A. ADDR TO MY S.A.
         ST    R1,8(0,R13)              MY S.A. ADDR TO CALLERS S.A.
         LM    R15,R1,16(R13)           RESTORE REGS USED BY GETMAIN
         L     R13,8(0,R13)             R13 POINTS TO MY S.A.
         USING WORKD,R13                  TELL ASSEMBLER
*
         XC    COMPCODE,COMPCODE        CLEAR COMPLETION CODE TO ZERO
         ST    R1,CPPLPTR               SAVE CPPL POINTER
*
         GETMAIN  R,LV=WORK8LEN,SP=1    GET STORAGE FOR COMMAND SCAN
         LR    R8,R1                    R8 POINTS TO WORK8 AREA
         USING WORK8,R8                   ADDRESSABILITY
*
         B     MAINLINE
*
         EJECT
**********************************************************************
***                                                                ***
***   MAIN LINE ROUTINE                                            ***
***                                                                ***
***   This MAINLINE routine is now a loop.  Exit from the loop     ***
***   comes after label MADECIDE, when the value in SUADDR is      ***
***   the address of the prolog routine called ENDING.  That       ***
***   value is obtained by the SUBCHECK routine from SUTBL.        ***
***                                                                ***
**********************************************************************
*
MAINLINE BAL   RBAL,ABEND               SET UP ABEND EXIT
         BAL   RBAL,INTATTN             SET UP ATTENTION INTERRUPT EXIT
         BAL   RBAL,PPLSETUP            SET UP PARSE PARM LIST
         BAL   RBAL,AWORK               ALLOCATE WORK DATASETS
*
MAPROMPT LA    R15,0                    SELECT PUTLINE MSG #0 (BLANK)
         BAL   RBAL,PUTLPROC            WRITE THE BLANK LINE
         LA    R15,2                    SELECT PUTLINE MESSAGE #2
         BAL   RBAL,PUTLPROC            PROMPT THE USER
         CLC   RETCDE(4),F0             IF RETURN CODE IS BAD
         BNE   MAPROMPT                   REPROMPT FOREVER
         BAL   RBAL,GETLPROC            GET THE USER'S REPLY
         CLC   RETCDE(4),F0             IF RETURN CODE IS BAD
         BNE   MAPROMPT                   REPROMPT FOREVER
*
MASCAN   BAL   RBAL,SCAN                PERFORM SCAN OF PUTGET MSG
         CLC   RETCDE(4),F0             IF RETURN CODE IS BAD
         BNE   MAPROMPT                   GO BACK UP TO PROMPT FOREVER
*
MASUBCHK BAL   RBAL,SUBCHECK            CHECK FOR SUBCOMMAND IN TABLE
         CLC   RETCDE(4),F0             IF RETURN CODE IS BAD
         BNE   MAPROMPT                   GO BACK UP TO PROMPT FOREVER
*
MADECIDE L     R15,SUADDR               R15 IS BRANCH ADDR FROM SUBTBL
         BALR  RBAL,R15                   PERFORM THE APPROPRIATE PROC
*
MAEND    B     MAPROMPT                 BRANCH BACK UP
*
MABEND   LA    R15,X'04'(0,0)           RETURN CODE TO R15
         ST    R15,COMPCODE               SAVE IN COMPLETION CODE
         B     MAPROMPT                 BRANCH BACK UP
         EJECT
**********************************************************************
***                                                                ***
***   EPILOG                                                       ***
***                                                                ***
***     1.  Unallocate files.                                      ***
***     2.  Free storage used by IKJSCAN.                          ***
***     3.  Linkage conventions.                                   ***
***                                                                ***
**********************************************************************
ENDING   BAL      RBAL,DWORK              UNALLOCATE WORK/PRINT FILES
         BAL      RBAL,DPDSPAN            UNALLOCATE PAN/PDS FILES
         BAL      RBAL,DSEQ               UNALLOCATE SEQ FILE
*
         FREEMAIN R,LV=WORK8LEN,SP=1,A=(R8)  FREE STORAGE FOR IKJSCAN
*
ENDABEND ESTAE    0                       CANCEL THE ABEND EXIT
*
         L        R14,COMPCODE            R14 TEMPORARILY HAS COMP CODE
         LR       R15,R13                 R15 HAS MY SAVE AREA ADDRESS
         L        R13,4(0,R13)            R13 RESTORE, PNT TO CALLER SA
         FREEMAIN R,LV=WORKDLEN,SP=0,A=(R15)  FREE MYSAVE,COMPCODE,ETC
         LM       R0,R12,20(R13)          R0-R12 RESTORE FROM CALLER SA
         LR       R15,R14                 R15 GETS COMP CODE
         L        R14,12(0,R13)           R14 RESTORE FROM CALLERS S.A.
         MVI      12(R13),X'FF'           SIGNAL MODULE COMPLETE
         BR       R14                     RETURN
*
         EJECT
**********************************************************************
***                                                                ***
***           SET UP EXIT FOR ABENDS                               ***
***                                                                ***
***  Use ESTAE to set up an environment to trap ABENDs.            ***
***                                                                ***
***  1.  The exit is ESTXIT.                                       ***
***  2.  The return point is at label ENDING in the main routine.  ***
***  3.  The parm list passed to the exit will be:                 ***
***                                                                ***
***         ESTUPL                                                 ***
***         +-----------+                                          ***
***         ×           ×==> Return point                          ***
***         +-----------+                                          ***
***         ×           ×==> User work area                        ***
***         +-----------+    +-----------+                         ***
***                          × Register  ×                         ***
***                          × save area ×                         ***
***                         ---         ---                        ***
***                         ---         ---                        ***
***                          ×           ×                         ***
***                          +-----------+                         ***
***                          × Other data×                         ***
***                          +-----------+                         ***
***                                                                ***
**********************************************************************
ABEND    ST    RBAL,ABRBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
         MVC   ESTAEL(ESTAELLN),ESTAED  INITIALIZE ESTAE PARM LIST
         LA    R15,MABEND               ADDRESS OF RETURN POINT
         ST    R15,ESTUPL                 INTO USER PARM LIST
         LA    R15,ESTUWK               ADDRESS OF USER WORK AREA
         ST    R15,ESTUPL+4               INTO USER PARM LIST
         LA    R4,ESTUPL                R4 HAS ADDRESS OF USER PARM LST
         L     R5,VESTXIT               R5 HAS ADDRESS OF ESTAE EXIT
*
ABESTAE  ESTAE (R5),PARAM=(R4),MF=(E,ESTAEL)  EXECUTE ESTAE
*
ABENDEND L     RBAL,ABRBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
         EJECT
**********************************************************************
***                                                                ***
***           SET UP EXIT FOR ATTENTION INTERRUPT                  ***
***                                                                ***
**********************************************************************
INTATTN  ST    RBAL,INRBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
         LA    R15,ATTSAVE              ADDRESS OF SAVE AREA
         ST    R15,ATTUPSAV               INTO USER PARM LIST
         LA    R15,ATTECB               ADDRESS OF ECB
         ST    R15,ATTUPECB               INTO USER PARM LIST
         OI    ATTUPECB,X'80'           MARK END OF LIST
*
INSTAX   MVC   STAXL(STAXLLN),STAXD     INITIALIZE PARM LIST
         L     R2,VATTNXIT              R2 HAS ADDRESS OF ATTN EXIT
         LA    R3,ATTIBUF               R3 HAS IBUF ADDRESS
         LA    R4,L'ATTIBUF             R4 IS LENGTH OF IBUF
         LA    R5,ATTUPARM              R5 IS ADDRESS OF USER PARMS
*
INATTN   STAX  (R2),OBUF=(ATTOBUF,L'ATTOBUF),IBUF=((R3),(R4)),         X
               USADDR=(R5),MF=(E,STAXL)
*
INEND    L     RBAL,INRBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
         EJECT
**********************************************************************
***                                                                ***
***        CREATE PARSE PARAMETER LIST AND I/O PARM LIST           ***
***        AND COMMAND SCAN PARM LIST                              ***
***                                                                ***
***        PARSE                                                   ***
***          1.  Copy addresses of UPT, ECT and CBUF from CPPL.    ***
***          2.  Add addresses of own ECB, ANS and UWA, and        ***
***              address of PCE List (PCL) created by macros.      ***
***          3.  Zero the CBUF field.  This will be filled in      ***
***              from the CSPLCBUF field after scan.  Initially    ***
***              the address will come from the PGPBIBUF input     ***
***              buffer address after PUTGET.                      ***
***          4.  Zero the PCL field.  It will be filled in just    ***
***              prior to each execution of the PARSE routine.     ***
***                                                                ***
***        I/O                                                     ***
***          1.  Copy addresses of UPT and ECT from CPPL.          ***
***          2.  Add address of own I/O ECB.                       ***
***          3.  Zero the IOPLIOPB pointer.  This will point to    ***
***              the parm block for the appropriate I/O routine.   ***
***              It will be filled in by the execute form of the   ***
***              STACK, GETLINE, PUTLINE or PUTGET macro when      ***
***              executed.                                         ***
***                                                                ***
***        SCAN                                                    ***
***          1.  Copy addresses of UPT and ECT from CPPL.          ***
***          2.  ADDRESSES OF OWN CP ECB, FLG WORD AND CSOA.       ***
***          3.  Zero the CSPLCBUF field.  This will be filled     ***
***              in from the GTPBIBUF field after GETLINE.         ***
**********************************************************************
PPLSETUP ST    RBAL,PPRBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
         L     R4,CPPLPTR               ADDRESS OF CMD PROC PARM LIST
         USING CPPL,R4                    ADDRESSABILITY
         LA    R6,MYPPL                 ADDRESS OF MY PARSE PARM LIST
         USING PPL,R6                     ADDRESSABILITY
*
         MVC   PPLUPT(4),CPPLUPT        UPT  (CPPL)
         MVC   PPLECT(4),CPPLECT        ECT  (CPPL)
         LA    R5,MYECB
         ST    R5,PPLECB                ECB  (MINE)
         XC    PPLPCL,PPLPCL            PCL  (0000)
         LA    R5,MYANS
         ST    R5,PPLANS                ANS  (MINE)
         XC    PPLCBUF,PPLCBUF          CBUF (0000)
         LA    R5,MYUWA
         ST    R5,PPLUWA                UWA  (MINE)
         DROP  R6                       DROP ADDRESSABILITY
*
         LA    R6,MYIOPL                ADDRESS OF MY IO PARM LIST
         USING IOPL,R6                    ADDRESSABILITY
         MVC   IOPLUPT(4),CPPLUPT       UPT  (CPPL)
         MVC   IOPLECT(4),CPPLECT       ECT  (CPPL)
         LA    R15,MYIOECB
         ST    R15,IOPLECB              ECB  (MINE)
         XC    IOPLIOPB(4),IOPLIOPB     IOPB (0000)
         DROP  R6                       DROP ADDRESSABILITY
*
         LA    R6,MYCSPL                ADDRESS OF MY CMD SCAN PRM LST
         USING CSPL,R6                    ADDRESSABILITY
         MVC   CSPLUPT(4),CPPLUPT       UPT  (CPPL)
         MVC   CSPLECT(4),CPPLECT       ECT  (CPPL)
         LA    R15,MYCSECB
         ST    R15,CSPLECB              ECB  (MINE)
         LA    R15,MYFLG
         ST    R15,CSPLFLG              FLG  (MINE)
         LA    R15,MYCSOA
         ST    R15,CSPLOA               OA   (MINE)
         XC    CSPLCBUF,CSPLCBUF        CBUF (0000)
         DROP  R4,R6                    DROP ADDRESSABILITY
*
PPEND    L     RBAL,PPRBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
         EJECT
**********************************************************************
***                                                                ***
***  ALLOCATE THE WORK AND PRINT DATASETS                       GU00301
***                                                                ***
**********************************************************************
AWORK    ST    RBAL,AWRBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
         BAL   RBAL,DWORK               DEALLOCATE FILE NAMES
*
         MVC   AWK(AWKLEN),@WK          INITIALIZE DATA AREAS
         GTEDASET AWK,CPPLPTR=CPPLPTR   LINK DATA AREAS TOGETHER
*
AWWORKS  LA    R3,4                     R3 IS COUNTER FOR LOOP
         LA    R4,AWKLIST-8             R4 POINTS TO -1 ENTRY IN LIST
AWLOOP1  LA    R4,8(0,R4)               R4 POINTS TO NEXT DDNAME
         MVC   AWKDDNAM(8),0(R4)        MOVE DDNAME TO TEXT UNIT
         GTEDAALC AWK,VERB=AL,ERRMSG=YES   ALLOCATE
         CLC   AWKS99RC,F0              IF RETURN NOT OKAY
         BNE   AWRET04                    GO TO HIGH ENDING
         BCT   R3,AWLOOP1               IF MORE REMAIN, LOOP BACK UP
*
AWPRINT  MVC   APR(APRLEN),@PR          INITIALIZE DATA AREAS
         GTEDASET APR,CPPLPTR=CPPLPTR   LINK DATA AREAS TOGETHER
         GTEDAALC APR,VERB=AL,ERRMSG=YES   ALLOCATE
         CLC   APRS99RC,F0              IF RETURN NOT OKAY
         BNE   AWRET04                    GO TO HIGH ENDING
*
         B     AWEND
*
AWRET04  LA    R15,X'04'                RETURN CODE TO R15
         ST    R15,RETCDE               SAVE IT
         B     AWEND                    BRANCH TO ENDING
*
AWEND    L     RBAL,AWRBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
*
         EJECT
**********************************************************************
***                                                                ***
***  UNALLOCATE THE WORK DATASETS AND THE PRINT FILE               ***
***                                                                ***
**********************************************************************
DWORK    ST    RBAL,DWRBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
         MVC   DWK(DWKLEN),#WK          INITIALIZE DATA AREAS
         GTEDASET DWK,CPPLPTR=CPPLPTR   LINK DATA AREAS TOGETHER
*
DWWORKS  LA    R3,5                     R3 IS COUNTER FOR LOOP
         LA    R4,DWKLIST-8             R4 POINTS TO -1 ENTRY IN LIST
DWLOOP1  LA    R4,8(0,R4)               R4 POINTS TO NEXT DDNAME
         MVC   DWKDDNAM(8),0(R4)        MOVE DDNAME TO TEXT UNIT
         GTEDAALC DWK,VERB=UN,ERRMSG=YES   UNALLOCATE
         BCT   R3,DWLOOP1               IF MORE REMAIN, LOOP BACK UP
*
         B     DWEND
*
DWRET04  LA    R15,X'04'                RETURN CODE TO R15
         ST    R15,RETCDE               SAVE IT
         B     DWEND                    BRANCH TO ENDING
*
DWEND    L     RBAL,DWRBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
*
         EJECT
**********************************************************************
***                                                                ***
***    SCAN THE INPUT PARAMETER STRING                             ***
***                                                                ***
***      1.  Fill in CSPLCBUF from GTPBIBUF, to point to input.    ***
***      2.  Set FLG word to X'00' to syntax check the command.    ***
***      3.  Execute IKJSCAN with CALLTSSR using own CSPL.         ***
***                                                                ***
***                                                                ***
***    Completion of IKJSCAN is indicated by two fields, the       ***
***    R15 return code, and the CSOAFLG field.                     ***
***                                                                ***
***    R15 Return codes:                                           ***
***      00 - IKJSCAN completed, see CSOAFLG field for results.    ***
***      04 - IKJSCAN was passed invalid parameters.               ***
***                                                                ***
***    CSOAFLG bit patterns:                                       ***
***        CSOAVWP   X'80'  VALID WITH PARAMETERS                  ***
***        CSOAVNP   X'40'  VALID NO   PARAMS                      ***
***        CSOAQM    X'20'  QUESTION MARK                          ***
***        CSOANOC   X'10'  NO COMMAND                             ***
***        CSOABAD   X'08'  BAD CMD NAME                           ***
***        CSOAEXEC  X'04'  IMPLICIT EXEC COMMAND NAME             ***
***                                                                ***
**********************************************************************
SCAN     ST    RBAL,SCRBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
*                                       PTR TO INPUT BUFFER TO CSPL
         MVC   MYCSPL+(CSPLCBUF-CSPL),MYGTPB+(GTPBIBUF-GTPB)
         XC    MYFLG,MYFLG              ZERO THE FLAG WORD
*
         XC    MYCSECB,MYCSECB          ZERO THE ECB FOR SCAN
SCANIT   CALLTSSR EP=IKJSCAN,MF=(E,MYCSPL)  SCAN THE INPUT COMMAND
         LTR   R15,R15                  IF RETURN IS BAD
         BNZ   SCERR04                    GO TO SET ERROR CODE
*                                       CHECK FOR EITHER VALID RETURN
         TM    MYCSOA+(CSOAFLG-CSOA),CSOAVWP+CSOAVNP
         BZ    SCERR04                  IF NEITHER, GO SET ERROR CODE
         B     SCEND                      ELSE INDICATE GOOD RETURN
*
SCERR04  LA    R15,X'04'(0,0)           SET VALUE
         ST    R15,RETCDE                 INTO INTERNAL RETURN CODE
*
SCEND    L     RBAL,SCRBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
         EJECT
**********************************************************************
***                                                                ***
***   CHECK FOR SUBCOMMAND IN TABLE                                ***
***                                                                ***
***   1.  Compare scanned input string with table entry.           ***
***   2.  When there is a match, save the branch address from the  ***
***       table entry and copy the subcommand name into the ECT.   ***
***   3.  Match will occur where input string first matches        ***
***       leading characters in table entry.                       ***
***                                                                ***
**********************************************************************
SUBCHECK ST    RBAL,SURBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
         XC    SUADDR,SUADDR            CLEAR THE BRANCH ADDRESS
*
         L     R4,MYCSOA+(CSOACNM-CSOA) R4 POINTS TO SUBCOMMAND
         LH    R5,MYCSOA+(CSOALNM-CSOA) R5 IS LENGTH OF SUBCOMMAND
         BCTR  R5,0                       MINUS 1 FOR EXEC
         LA    R6,SUTBL-12              R6 POINTS TO -1 ENTRY IN TABLE
*
SULOOP   LA    R6,12(0,R6)              R6 POINTS TO NEXT ENTRY
         CLI   0(R6),X'FF'              IF END OF LIST
         BE    SUERR04                    GO TO ERROR ENDING
         B     *+10                     BRANCH AROUND COMPARE
         CLC   0(0,R4),0(R6)              COMPARE SUBCOMMAND TO TABLE
         EX    R5,*-6                   EXECUTE THE COMPARE
         BNE   SULOOP                   IF NO MATCH, LOOP BACK UP
*
SUFOUND  MVC   SUADDR(4),8(R6)          MOVE BRANCH ADDR INTO STORAGE
         L     R4,CPPLPTR               R4 POINTS TO CPPL
         L     R4,(CPPLECT-CPPL)(R4)    R4 POINTS TO ECT
         LA    R4,(ECTSCMD-ECT)(R4)     R4 POINTS TO ECTSCMD FIELD
         MVC   0(8,R4),0(R6)            MOVE SUBCOMMAND NAME TO ECT
         B     SUEND                    GO TO ENDING
*
SUERR04  LA    R15,X'04'(0,0)           SET VALUE
         ST    R15,RETCDE                 INTO INTERNAL RETURN CODE
*
SUEND    L     RBAL,SURBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
*
         EJECT
**********************************************************************
***                                                                ***
***  INVOKE THE UPDATE FUNCTION                                    ***
***                                                                ***
**********************************************************************
A0UPDT   ST    RBAL,A0RBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
A0PARSE  MVC   PCLAD,AAPCL              ADDR OF APARMPCL TO STORAGE
         BAL   RBAL,PARSE               PARSE THE INPUT PARAMETERS
         CLC   RETCDE(4),F0             IF RETURN CODE IS BAD
         BE    *+14                     THEN
         MVC   COMPCODE(4),F12            SET RETURN CODE TO 12
         B     A0END                      AND GO TO END OF ROUTINE
*
         USING APARMPDL,R9              ADDRESSABILITY OF PARMS
*
A0ALLOC  MVC   APDDSN(44),BLANKS        CLEAR THE DSN FIELD
         L     R1,APOSDSN+0             R1 POINTS TO THE DSN
         LH    R2,APOSDSN+4             R2 HAS LENGTH
         BCTR  R2,0                       MINUS 1 FOR EXEC
         B     *+10                     BRANCH AROUND THE MOVE
         MVC   APDDSN(0),0(R1)            MOVE DSN FROM PARM
         EX    R2,*-6                   EXECUTE THE MOVE
         MVC   APADSN(44),APDDSN        COPY PDS DSN TO PAN DSN
         LA    R2,APADSN+1(R2)          R2 POINTS JUST BEYOND NAME
         MVI   0(R2),C'.'               ADD THE DOT
         MVC   1(L'PANSUFF,R2),PANSUFF  ADD THE PANVALET SUFFIX
         BAL   RBAL,APDSPAN             ALLOCATE PDS AND PAN LIBRARIES
         CLC   RETCDE,F0                IF RETURN BAD
         BNE   A0RET04                    GO TO HIGH ENDING
*
A0SEQ    BAL   RBAL,ASEQ                ALLOCATE THE SEQUENTIAL DSN
         CLC   RETCDE,F0                IF RETURN BAD
         BNE   A0RET04                    GO TO HIGH ENDING
*
A0PRM    LA    R15,A0PARM               ADDRESS OF PARM LIST
         ST    R15,A0PARML                INTO PARM LIST
         OI    A0PARML,X'80'            MARK END OF LIST
         XC    A0PARM(102),A0PARM       CLEAR THE PARM
         MVC   A0PARM(2),APOSDSN+12     MEMBER NAME LENGTH TO PARM
         L     R1,APOSDSN+8             R1 POINTS TO MEMBER NAME
         MVC   A0PARM+2(8),0(R1)        MOVE NAME TO PARM
         LA    R1,A0PARML               R1 POINTS TO PARM LIST
*
A0LINK   LINK  EP=GTEUA00               LINK TO THE UPDATE UTILITY
         ST    R15,A0RETCDE             SAVE THE RETURN CODE
         BAL   RBAL,CONDCODE            WRITE CONDITION CODE
*
         B     A0END
*
A0RET04  LA    R15,X'04'                RETURN CODE TO R15
         ST    R15,RETCDE               SAVE IT
         B     A0END                    BRANCH TO ENDING
*
         DROP  R9                       DROP ADDRESSABILITY
*
A0END    LA       R2,MYPPL+(PPLANS-PPL)   ADDRESS OF PTR TO PDL
         L        R2,0(0,R2)              R4 POINTS TO PDL
         IKJRLSA  (R2)                    FREE STORAGE OF PDL
         L     RBAL,A0RBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
*
         EJECT
**********************************************************************
***                                                                ***
***  INVOKE THE RESTORE FUNCTION                                   ***
***                                                                ***
**********************************************************************
A1REST   ST    RBAL,A1RBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
A1PARSE  MVC   PCLAD,ABPCL              ADDR OF SELECTED PCL FOR PARSE
         BAL   RBAL,PARSE               PARSE THE INPUT PARAMETERS
         CLC   RETCDE(4),F0             IF RETURN CODE IS BAD
         BE    *+14                     THEN
         MVC   COMPCODE(4),F12            SET RETURN CODE TO 12
         B     A1END                      AND GO TO END OF ROUTINE
*
         USING BPARMPDL,R9              ADDRESSABILITY OF PARMS
*
A1ALLOC  MVC   APDDSN(44),BLANKS        CLEAR THE DSN FIELD
         L     R1,BPOSDSN+0             R1 POINTS TO THE DSN
         LH    R2,BPOSDSN+4             R2 HAS LENGTH
         BCTR  R2,0                       MINUS 1 FOR EXEC
         B     *+10                     BRANCH AROUND THE MOVE
         MVC   APDDSN(0),0(R1)            MOVE DSN FROM PARM
         EX    R2,*-6                   EXECUTE THE MOVE
         MVC   APADSN(44),APDDSN        COPY PDS DSN TO PAN DSN
         LA    R2,APADSN+1(R2)          R2 POINTS JUST BEYOND NAME
         MVI   0(R2),C'.'               ADD THE DOT
         MVC   1(L'PANSUFF,R2),PANSUFF  ADD THE PANVALET SUFFIX
         BAL   RBAL,APDSPAN             ALLOCATE PDS AND PAN LIBRARIES
         CLC   RETCDE,F0                IF RETURN BAD
         BNE   A1RET04                    GO TO HIGH ENDING
*
A1VER    L     R5,BSVERS                R5 POINTS TO PARM
         L     R4,0(0,R5)               R4 HAS BINARY PARM
         CVD   R4,COPACK8               COPACK8 HAS PACKED PARM
         OI    COPACK8+7,X'0F'          KILL THE SIGN
         UNPK  A1VERS(2),COPACK8(8)     CONVERT TO DISPLAY
*
A1PRM    LA    R15,A1PARM               ADDRESS OF PARM LIST
         ST    R15,A1PARML                INTO PARM LIST
         OI    A1PARML,X'80'            MARK END OF LIST
         XC    A1PARM(102),A1PARM       CLEAR THE PARM
         L     R1,BPOSDSN+8             R1 POINTS TO MEMBER NAME
         LH    R2,BPOSDSN+12            R2 HAS LENGTH
         BCTR  R2,0                       MINUS 1 FOR EXEC
         B     *+10                     BRANCH AROUND MOVE
         MVC   A1PARM+2(0),0(R1)          MOVE THE MEMBER NAME TO PARM
         EX    R2,*-6                   EXECUTE THE MOVE
         LA    R1,A1PARM+2+1(R2)        POINT JUST BEYOND NAME
         MVC   0(2,R1),A1VERS           SUFFIX VERS NUMBER ONTO NAME
         LA    R2,1+2(0,R2)             R2 IS LENGTH OF NAME + SUFFIX
         STH   R2,A1PARM+0              MOVE IT TO PARM LENGTH
*
A1LINK   LA    R1,A1PARML               R1 POINTS TO PARM LIST
         LINK  EP=GTEUA01               LINK TO THE UPDATE UTILITY
         ST    R15,A1RETCDE             SAVE THE RETURN CODE
         BAL   RBAL,CONDCODE            WRITE THE CONDITION CODE
*
         B     A1END
*
A1RET04  LA    R15,X'04'                RETURN CODE TO R15
         ST    R15,RETCDE               SAVE IT
         B     A1END                    BRANCH TO ENDING
*
A1END    LA       R2,MYPPL+(PPLANS-PPL)   ADDRESS OF PTR TO PDL
         L        R2,0(0,R2)              R4 POINTS TO PDL
         IKJRLSA  (R2)                    FREE STORAGE OF PDL
         L     RBAL,A1RBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
*
         DROP  R9                       DROP ADDRESSABILITY
*
         EJECT
**********************************************************************
***                                                                ***
***  INVOKE THE DELETE FUNCTION                                    ***
***                                                                ***
**********************************************************************
A2DELT   ST    RBAL,A2RBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
A2PARSE  MVC   PCLAD,ACPCL              ADDR OF SELECTED PCL FOR PARSE
         BAL   RBAL,PARSE               PARSE THE INPUT PARAMETERS
         CLC   RETCDE(4),F0             IF RETURN CODE IS BAD
         BE    *+14                     THEN
         MVC   COMPCODE(4),F12            SET RETURN CODE TO 12
         B     A2END                      AND GO TO END OF ROUTINE
*
         USING CPARMPDL,R9              ADDRESSABILITY OF PARMS
*
A2ALLOC  MVC   APDDSN(44),BLANKS        CLEAR THE DSN FIELD
         L     R1,CPOSDSN+0             R1 POINTS TO THE DSN
         LH    R2,CPOSDSN+4             R2 HAS LENGTH
         BCTR  R2,0                       MINUS 1 FOR EXEC
         B     *+10                     BRANCH AROUND THE MOVE
         MVC   APDDSN(0),0(R1)            MOVE DSN FROM PARM
         EX    R2,*-6                   EXECUTE THE MOVE
         MVC   APADSN(44),APDDSN        COPY PDS DSN TO PAN DSN
         LA    R2,APADSN+1(R2)          R2 POINTS JUST BEYOND NAME
         MVI   0(R2),C'.'               ADD THE DOT
         MVC   1(L'PANSUFF,R2),PANSUFF  ADD THE PANVALET SUFFIX
         BAL   RBAL,APDSPAN             ALLOCATE PDS AND PAN LIBRARIES
         CLC   RETCDE,F0                IF RETURN BAD
         BNE   A2RET04                    GO TO HIGH ENDING
*
A2PRM    LA    R15,A2PARM               ADDRESS OF PARM LIST
         ST    R15,A2PARML                INTO PARM LIST
         OI    A2PARML,X'80'            MARK END OF LIST
         XC    A2PARM(102),A2PARM       CLEAR THE PARM
         MVC   A2PARM(2),CPOSDSN+12     MEMBER NAME LENGTH TO PARM
         L     R1,CPOSDSN+8             R1 POINTS TO MEMBER NAME
         MVC   A2PARM+2(8),0(R1)        MOVE NAME TO PARM
*
A2LINK   LA    R1,A2PARML               R1 POINTS TO PARM LIST
         LINK  EP=GTEUA02               LINK TO THE UPDATE UTILITY
         ST    R15,A2RETCDE             SAVE THE RETURN CODE
         BAL   RBAL,CONDCODE            WRITE THE CONDITION CODE
*
         B     A2END
*
A2RET04  LA    R15,X'04'                RETURN CODE TO R15
         ST    R15,RETCDE               SAVE IT
         B     A2END                    BRANCH TO ENDING
*
A2END    LA       R2,MYPPL+(PPLANS-PPL)   ADDRESS OF PTR TO PDL
         L        R2,0(0,R2)              R4 POINTS TO PDL
         IKJRLSA  (R2)                    FREE STORAGE OF PDL
         L     RBAL,A2RBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
*
         DROP  R9                       DROP ADDRESSABILITY
*
         EJECT
**********************************************************************
***                                                                ***
***  INVOKE THE ALIAS FUNCTION                                     ***
***                                                                ***
**********************************************************************
A3ALIS   ST    RBAL,A3RBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
A3PARSE  MVC   PCLAD,ADPCL              ADDR OF SELECTED PCL FOR PARSE
         BAL   RBAL,PARSE               PARSE THE INPUT PARAMETERS
         CLC   RETCDE(4),F0             IF RETURN CODE IS BAD
         BE    *+14                     THEN
         MVC   COMPCODE(4),F12            SET RETURN CODE TO 12
         B     A3END                      AND GO TO END OF ROUTINE
*
         USING DPARMPDL,R9              ADDRESSABILITY OF PARMS
*
A3ALLOC  MVC   APDDSN(44),BLANKS        CLEAR THE DSN FIELD
         L     R1,DPOSDSN+0             R1 POINTS TO THE DSN
         LH    R2,DPOSDSN+4             R2 HAS LENGTH
         BCTR  R2,0                       MINUS 1 FOR EXEC
         B     *+10                     BRANCH AROUND THE MOVE
         MVC   APDDSN(0),0(R1)            MOVE DSN FROM PARM
         EX    R2,*-6                   EXECUTE THE MOVE
         MVC   APADSN(44),APDDSN        COPY PDS DSN TO PAN DSN
         LA    R2,APADSN+1(R2)          R2 POINTS JUST BEYOND NAME
         MVI   0(R2),C'.'               ADD THE DOT
         MVC   1(L'PANSUFF,R2),PANSUFF  ADD THE PANVALET SUFFIX
         BAL   RBAL,APDSPAN             ALLOCATE PDS AND PAN LIBRARIES
         CLC   RETCDE,F0                IF RETURN BAD
         BNE   A3RET04                    GO TO HIGH ENDING
*
A3PRM    LA    R15,A3PARMLN             ADDRESS OF PARM LENGTH
         ST    R15,A3PARML                INTO PARM LIST
         OI    A3PARML,X'80'            MARK END OF LIST
         XC    A3PARM(102),A3PARM       CLEAR THE PARM
*
         L     R1,DPOSDSN+8             R1 POINTS TO MEMBER NAME
         LH    R2,DPOSDSN+12            R2 HAS LENGTH
         STH   R2,APDMEMLN              SAVE THE LEN FOR TEXTBILD
         BCTR  R2,0                     R2 IS LEN-1 FOR EXEC
         B     *+10                     BRANCH AROUND MOVE
         MVC   APDMEMBR(0),0(R1)          MOVE MEMBER NAME FOR TEXTBILD
         EX    R2,*-6                   EXECUTE THE MOVE
*
         L     R1,DPOSALIS+0            R1 POINTS TO ALIAS NAME
         LH    R2,DPOSALIS+4            R2 HAS LENGTH
         STH   R2,APDALILN              SAVE THE LEN FOR TEXTBILD
         BCTR  R2,0                     R2 IS LEN-1 FOR EXEC
         B     *+10                     BRANCH AROUND MOVE
         MVC   APDALIS(0),0(R1)           MOVE MEMBER NAME FOR TEXTBILD
         EX    R2,*-6                   EXECUTE THE MOVE
*
         TEXTBILD AREA=A3PARM,TEXT=(APDMEM,COMMA,APDALI) BUILD PARM
         STH   R15,A3PARMLN             INSERT THE LENGTH
*
A3LINK   LA    R1,A3PARML               R1 POINTS TO PARM LIST
         LINK  EP=GTEUA03               LINK TO THE UPDATE UTILITY
         ST    R15,A3RETCDE             SAVE THE RETURN CODE
         BAL   RBAL,CONDCODE            WRITE THE CONDITION CODE
*
         B     A3END
*
A3RET04  LA    R15,X'04'                RETURN CODE TO R15
         ST    R15,RETCDE               SAVE IT
         B     A3END                    BRANCH TO ENDING
*
A3END    LA       R2,MYPPL+(PPLANS-PPL)   ADDRESS OF PTR TO PDL
         L        R2,0(0,R2)              R4 POINTS TO PDL
         IKJRLSA  (R2)                    FREE STORAGE OF PDL
         L     RBAL,A3RBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
*
         DROP  R9                       DROP ADDRESSABILITY
*                                                               GU00301
         EJECT                                                  GU00301
*************************************************************** GU00301
***                                                         *** GU00301
***  INVOKE THE STATS FUNCTION                              *** GU00301
***                                                         *** GU00301
*************************************************************** GU00301
A4STAT   ST    RBAL,A4RBALSV            SAVE RETURN ADDRESS     GU00301
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO  GU00301
*                                                               GU00301
A4PARSE  MVC   PCLAD,ACPCL              ADDR OF SELECTED PCL FO GU00301
         BAL   RBAL,PARSE               PARSE THE INPUT PARAMET GU00301
         CLC   RETCDE(4),F0             IF RETURN CODE IS BAD   GU00301
         BE    *+14                     THEN                    GU00301
         MVC   COMPCODE(4),F12            SET RETURN CODE TO 12 GU00301
         B     A4END                      AND GO TO END OF ROUT GU00301
*                                                               GU00301
         USING CPARMPDL,R9              ADDRESSABILITY OF PARMS GU00301
*                                                               GU00301
A4ALLOC  MVC   APDDSN(44),BLANKS        CLEAR THE DSN FIELD     GU00301
         L     R1,CPOSDSN+0             R1 POINTS TO THE DSN    GU00301
         LH    R2,CPOSDSN+4             R2 HAS LENGTH           GU00301
         BCTR  R2,0                       MINUS 1 FOR EXEC      GU00301
         B     *+10                     BRANCH AROUND THE MOVE  GU00301
         MVC   APDDSN(0),0(R1)            MOVE DSN FROM PARM    GU00301
         EX    R2,*-6                   EXECUTE THE MOVE        GU00301
         MVC   APADSN(44),APDDSN        COPY PDS DSN TO PAN DSN GU00301
         LA    R2,APADSN+1(R2)          R2 POINTS JUST BEYOND N GU00301
         MVI   0(R2),C'.'               ADD THE DOT             GU00301
         MVC   1(L'PANSUFF,R2),PANSUFF  ADD THE PANVALET SUFFIX GU00301
         BAL   RBAL,APDSPAN             ALLOCATE PDS AND PAN LI GU00301
         CLC   RETCDE,F0                IF RETURN BAD           GU00301
         BNE   A4RET04                    GO TO HIGH ENDING     GU00301
*                                                               GU00301
A4PRM    LA    R15,A4PARM               ADDRESS OF PARM LIST    GU00301
         ST    R15,A4PARML                INTO PARM LIST        GU00301
         OI    A4PARML,X'80'            MARK END OF LIST        GU00301
         XC    A4PARM(102),A4PARM       CLEAR THE PARM          GU00301
         MVC   A4PARM(2),CPOSDSN+12     MEMBER NAME LENGTH TO P GU00301
         L     R1,CPOSDSN+8             R1 POINTS TO MEMBER NAM GU00301
         MVC   A4PARM+2(8),0(R1)        MOVE NAME TO PARM       GU00301
         LA    R1,A4PARML               R1 POINTS TO PARM LIST  GU00301
*                                                               GU00301
A4LINK   LA    R1,A4PARML               R1 POINTS TO PARM LIST  GU00301
         LINK  EP=GTEUA04               LINK TO THE UPDATE UTIL GU00301
         ST    R15,A4RETCDE             SAVE THE RETURN CODE    GU00301
         BAL   RBAL,CONDCODE            WRITE THE CONDITION COD GU00301
*                                                               GU00301
         B     A4END                                            GU00301
*                                                               GU00301
A4RET04  LA    R15,X'04'                RETURN CODE TO R15      GU00301
         ST    R15,RETCDE               SAVE IT                 GU00301
         B     A4END                    BRANCH TO ENDING        GU00301
*                                                               GU00301
A4END    LA       R2,MYPPL+(PPLANS-PPL)   ADDRESS OF PTR TO PDL GU00301
         L        R2,0(0,R2)              R4 POINTS TO PDL      GU00301
         IKJRLSA  (R2)                    FREE STORAGE OF PDL   GU00301
         L     RBAL,A4RBALSV            RESTORE RETURN ADDRESS  GU00301
         BR    RBAL                     RETURN                  GU00301
*                                                               GU00301
         DROP  R9                       DROP ADDRESSABILITY     GU00301
*                                                               GU00401
         EJECT                                                  GU00401
*************************************************************** GU00401
***                                                         *** GU00401
***  INVOKE THE BACKUP FUNCTION                             *** GU00401
***                                                         *** GU00401
*************************************************************** GU00401
A5BKUP   ST    RBAL,A5RBALSV            SAVE RETURN ADDRESS     GU00401
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO  GU00401
*                                                               GU00401
A5PARSE  MVC   PCLAD,ACPCL              ADDR OF APARMPCL TO STO GU00401
         BAL   RBAL,PARSE               PARSE THE INPUT PARAMET GU00401
         CLC   RETCDE(4),F0             IF RETURN CODE IS BAD   GU00401
         BE    *+14                     THEN                    GU00401
         MVC   COMPCODE(4),F12            SET RETURN CODE TO 12 GU00401
         B     A5END                      AND GO TO END OF ROUT GU00401
*                                                               GU00401
         USING CPARMPDL,R9              ADDRESSABILITY OF PARMS GU00401
*                                                               GU00401
A5ALLOC  MVC   APDDSN(44),BLANKS        CLEAR THE DSN FIELD     GU00401
         L     R1,CPOSDSN+0             R1 POINTS TO THE DSN    GU00401
         LH    R2,CPOSDSN+4             R2 HAS LENGTH           GU00401
         BCTR  R2,0                       MINUS 1 FOR EXEC      GU00401
         B     *+10                     BRANCH AROUND THE MOVE  GU00401
         MVC   APDDSN(0),0(R1)            MOVE DSN FROM PARM    GU00401
         EX    R2,*-6                   EXECUTE THE MOVE        GU00401
         MVC   APADSN(44),APDDSN        COPY PDS DSN TO PAN DSN GU00401
         LA    R2,APADSN+1(R2)          R2 POINTS JUST BEYOND N GU00401
         MVI   0(R2),C'.'               ADD THE DOT             GU00401
         MVC   1(L'PANSUFF,R2),PANSUFF  ADD THE PANVALET SUFFIX GU00401
         BAL   RBAL,APDSPAN             ALLOCATE PDS AND PAN LI GU00401
         CLC   RETCDE,F0                IF RETURN BAD           GU00401
         BNE   A5RET04                    GO TO HIGH ENDING     GU00401
*                                                               GU00401
A5PRM    LA    R15,A5PARM               ADDRESS OF PARM LIST    GU00401
         ST    R15,A5PARML                INTO PARM LIST        GU00401
         OI    A5PARML,X'80'            MARK END OF LIST        GU00401
         XC    A5PARM(102),A5PARM       CLEAR THE PARM          GU00401
         MVC   A5PARM(2),CPOSDSN+12     MEMBER NAME LENGTH TO P GU00401
         L     R1,CPOSDSN+8             R1 POINTS TO MEMBER NAM GU00401
         MVC   A5PARM+2(8),0(R1)        MOVE NAME TO PARM       GU00401
         LA    R1,A5PARML               R1 POINTS TO PARM LIST  GU00401
*                                                               GU00401
A5LINK   LINK  EP=GTEUA05               LINK TO THE UPDATE UTIL GU00401
         ST    R15,A5RETCDE             SAVE THE RETURN CODE    GU00401
         BAL   RBAL,CONDCODE            WRITE CONDITION CODE    GU00401
*                                                               GU00401
         B     A5END                                            GU00401
*                                                               GU00401
A5RET04  LA    R15,X'04'                RETURN CODE TO R15      GU00401
         ST    R15,RETCDE               SAVE IT                 GU00401
         B     A5END                    BRANCH TO ENDING        GU00401
*                                                               GU00401
         DROP  R9                       DROP ADDRESSABILITY     GU00401
*                                                               GU00401
A5END    LA       R2,MYPPL+(PPLANS-PPL)   ADDRESS OF PTR TO PDL GU00401
         L        R2,0(0,R2)              R4 POINTS TO PDL      GU00401
         IKJRLSA  (R2)                    FREE STORAGE OF PDL   GU00401
         L     RBAL,A5RBALSV            RESTORE RETURN ADDRESS  GU00401
         BR    RBAL                     RETURN                  GU00401
*
         EJECT
**********************************************************************
***                                                                ***
***  ALLOCATE PDS AND PANVALET LIBRARIES                           ***
***                                                                ***
**********************************************************************
APDSPAN  ST    RBAL,APRBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
         BAL   RBAL,DPDSPAN             FREE THE PDS AND PAN LIBRARIES
*
         MVC   APD(APDLEN),@PD          INITIALIZE CONTROL BLOCKS
         GTEDASET APD,CPPLPTR=CPPLPTR   LINK BLOCKS TOGETHER
*
         LA    R3,DPLIST-8              R3 POINTS TO -1 DDNAME
         LA    R4,APLIST-44             R4 POINTS TO -1 DSNAME
         LA    R5,2                     R5 IS COUNTER
APLOOP1  LA    R3,8(0,R3)               R3 POINTS TO NEXT DDNAME
         LA    R4,44(0,R4)              R4 POINTS TO NEXT DSNAME
         MVC   APDDDNAM(8),0(R3)        MOVE DDNAME TO T.U.
         MVC   APDDSNAM(44),0(R4)       MOVE DSNAME TO T.U.
         GTEDAALC APD,VERB=AL,ERRMSG=YES  ALLOCATE
         CLC   APDS99RC,F0              IF RETURN NOT OKAY
         BNE   APRET04                    GO TO BAD ENDING
         BCT   R5,APLOOP1               ELSE LOOP BACK UP
*
         B     APEND
*
APRET04  LA    R15,X'04'                RETURN CODE TO R15
         ST    R15,RETCDE               SAVE IT
         B     APEND                    BRANCH TO ENDING
*
APEND    L     RBAL,APRBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
*
         EJECT
**********************************************************************
***                                                                ***
***  FREE THE PANVALET AND PDS LIBRARIES                           ***
***                                                                ***
**********************************************************************
DPDSPAN  ST    RBAL,DPRBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
         LA    R3,2                     R3 IS COUNTER
         LA    R4,DPLIST-8              R4 POINTS TO -1 DDNAME
DPLOOP1  LA    R4,8(0,R4)               R4 POINTS TO NEXT DDNAME
         MVC   DWKDDNAM(8),0(R4)        MOVE DDNAME TO T.U.
         GTEDAALC DWK,VERB=UN,ERRMSG=YES  FREE THE DDNAME
         BCT   R3,DPLOOP1               LOOP BACK UP
*
         B     DPEND
*
DPRET04  LA    R15,X'04'                RETURN CODE TO R15
         ST    R15,RETCDE               SAVE IT
         B     DPEND                    BRANCH TO ENDING
*
DPEND    L     RBAL,DPRBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
*
         EJECT
**********************************************************************
***                                                                ***
***  ALLOCATE THE SEQUENTIAL INPUT DATASET                         ***
***                                                                ***
**********************************************************************
ASEQ     ST    RBAL,ASRBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
         USING APARMPDL,R9              ADDRESSABILITY OF PARMS
*
         BAL   RBAL,DSEQ                FREE THE SEQUENTIAL FILE
*
         MVC   ASQ(ASQLEN),@SQ          INITIALIZE DATA AREAS
         GTEDASET ASQ,CPPLPTR=CPPLPTR   LINK AREAS TOGETHER
         MVC   ASQDDNAM(8),=CL8'SEQ'    MOVE IN DDNAME
         MVC   ASQDSNAM(44),BLANKS      CLEAR DSNAME
         L     R1,ASFDSN+0              R1 POINTS TO PARM DSNAME
         LH    R2,ASFDSN+4              R2 HAS LENGTH
         BCTR  R2,0                       MINUS 1 FOR EXEC
         B     *+10                     BRANCH AROUND MOVE
         MVC   ASQDSNAM(0),0(R1)          MOVE PARM DSN TO T.U.
         EX    R2,*-6                   EXECUTE THE MOVE
         TM    ASFDSN+14,X'80'          IF A MEMBER NAME PRESENT
         BO    ASFMEMB                    BRANCH
         XC    ASQMEMBR-6(2),ASQMEMBR-6 ELSE KILL THE MEMBER KEY
         B     ASALLOC                    AND GO TO ALLOCATE
ASFMEMB  MVC   ASQMEMBR(8),BLANKS       CLEAR THE MEMBER NAME FIELD
         L     R1,ASFDSN+8              R1 POINTS TO MEMBER NAME
         LH    R2,ASFDSN+12             R2 HAS LENGTH
         BCTR  R2,0                       MINUS 1 FOR EXEC
         B     *+10                     BRANCH AROUND MOVE
         MVC   ASQMEMBR(0),0(R1)          MOVE PARM MEMBER TO T.U.
         EX    R2,*-6                   EXECUTE THE MOVE
ASALLOC  GTEDAALC ASQ,VERB=AL,ERRMSG=YES  ALLOCATE
         CLC   ASQS99RC,F0              IF RETURN NOT ZERO
         BNE   ASRET04                    GO TO HIGH ENDING
*
         DROP  R9
*
         B     ASEND
*
ASRET04  LA    R15,X'04'                RETURN CODE TO R15
         ST    R15,RETCDE               SAVE IT
         B     ASEND                    BRANCH TO ENDING
*
ASEND    L     RBAL,ASRBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
*
         EJECT
**********************************************************************
***                                                                ***
***  FREE THE SEQUENTIAL FILE                                      ***
***                                                                ***
**********************************************************************
DSEQ     ST    RBAL,DSRBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
         MVC   DWKDDNAM(8),=CL8'SEQ'    MOVE 'SEQ' TO FILE NAME
         GTEDAALC  DWK,VERB=UN,ERRMSG=YES
*
         B     DSEND
*
DSRET04  LA    R15,X'04'                RETURN CODE TO R15
         ST    R15,RETCDE               SAVE IT
         B     DSEND                    BRANCH TO ENDING
*
DSEND    L     RBAL,DSRBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
*
         EJECT
**********************************************************************
***                                                                ***
***    PARSE THE INPUT PARAMETER STRING                            ***
***                                                                ***
***      1.  Execute IKJPARS with CALLTSSR using own PPL.          ***
***      2.  Load address of Parm Descriptor Element List (PDL)    ***
***          from own ANS word into R9 for addressability.         ***
***                                                                ***
**********************************************************************
PARSE    ST    RBAL,PARBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
*                                       COPY BUFFER ADDR FROM CSPL
         MVC   MYPPL+(PPLCBUF-PPL)(4),MYCSPL+(CSPLCBUF-CSPL)
*
         MVC   MYPPL+(PPLPCL-PPL)(4),PCLAD   COPY IN PCL ADDRESS
*
         XC    MYECB,MYECB              ZERO THE ECB FOR PARSE
PARSEIT  CALLTSSR EP=IKJPARS,MF=(E,MYPPL)  PARSE THE PARMS
         L     R9,MYPPL+(PPLANS-PPL)    POINTER TO PDL ADDRESS
         L     R9,0(0,R9)               ADDRESSABILITY OF PDL
*
PAEND    L     RBAL,PARBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
         EJECT
**********************************************************************
***                                                                ***
***   UNALLOCATE FILES                                             ***
***                                                                ***
**********************************************************************
UNALLOC  ST    RBAL,UNRBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
*                                     INITIALIZE SVC-99 CONTROL BOLCKS
UNSET    MVC   MY0(MY0LEN),@M0          INITIALIZE DATA
         GTEDASET MY0,CPPLPTR=CPPLPTR   LINK BLOCKS TOGETHER
*
*
UNEND    L     RBAL,UNRBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
*
UNDYNALC GTEDAALC MY0,VERB=UN,ERRMSG=NO PERFORM SVC-99/DAIRFAIL
         BR    R4
         EJECT
**********************************************************************
***                                                                ***
***   WRITE THE PROGRAM COMPLETION CODE                            ***
***                                                                ***
**********************************************************************
CONDCODE ST    RBAL,CORBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
CORETCD  CVD   R15,COPACK8              CONVERT RETURN CODE TO DECIMAL
         MVC   MSG0001B(8),WRK0001B     INITIALIZE MESSAGE SEGMENT
         UNPK  MSG0001B+4(4),COPACK8+5(3) CONVERT TO ZONED DECIMAL
         OI    MSG0001B+7,X'F0'         KILL THE SIGN
         LA    R15,0                    SELECT PUTLINE MSG #0 (BLANK)
         BAL   RBAL,PUTLPROC              GO PERFORM PUTLINE
         LA    R15,1                    SELECT PUTLINE MESSAGE #1
         BAL   RBAL,PUTLPROC              GO PERFORM PUTLINE
*
COEND    L     RBAL,CORBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
*
         EJECT
**********************************************************************
***                                                                ***
***   WRITE MESSAGE WITH PUTLINE                                   ***
***                                                                ***
***    1.  IOPL was initialized at beginning of program, IOPLIOPB  ***
***        field will be filled in by PUTLINE execute macro.       ***
***    2.  PTPB will be filled in by PUTLINE execute macro.        ***
***    3.  OLD will be filled in by this procedure.                ***
***                                                                ***
***    Message number in R15 is multiplied by four and used as     ***
***    offset into PUTABLE.  PUTABLE contains branch addresses     ***
***    for processing appropriate message.                         ***
**********************************************************************
PUTLPROC ST    RBAL,PURBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
         SLL   R15,2                    R15 IS NOW OFFSET INTO PUTABLE
         L     R15,PUTABLE(R15)         R15 NOW POINTS TO PROCESSING
         BR    R15                      GO TO APPROPRIATE PROCESSING
*
PUTABLE  DC    A(PU0000)                PROCESS ADDR FOR BLANK LINE
         DC    A(PU0001)                PROCESS ADDR FOR PDU0001I
         DC    A(PU0002)                PROCESS ADDR FOR PDU0002I
*
PU0000   LA    R15,1(0,0)               SEGMENTS = 1
         ST    R15,MYOLD                  INTO O.L.D.
         LA    R15,MSG0000              ADDR OF BLANK LINE
         ST    R15,MYOLD+4                INTO O.L.D.
         B     PUOUTPUT                 GO WRITE IT
*
PU0001   LA    R15,2(0,0)               SEGMENTS = 2
         ST    R15,MYOLD                  INTO O.L.D.
         LA    R15,MSG0001A             ADDR OF PDU0001I, SEG #1
         ST    R15,MYOLD+4                INTO O.L.D.
         LA    R15,MSG0001B             ADDR OF PDU0001I, SEG #2
         ST    R15,MYOLD+8                INTO O.L.D.
         B     PUOUTPUT                 GO WRITE IT
*
PU0002   LA    R15,1(0,0)               SEGMENTS = 1
         ST    R15,MYOLD                  INTO O.L.D.
         LA    R15,MSG0002              ADDR OF PDU0002I
         ST    R15,MYOLD+4                INTO O.L.D.
         B     PUOUTPUT                 GO WRITE IT
*
PUOUTPUT XC    MYPTPB(MYPTPBLN),MYPTPB  ZERO THE PUTLINE PARM BLOCK
         XC    MYIOECB,MYIOECB          ZERO THE ECB
         PUTLINE PARM=MYPTPB,OUTPUT=MYOLD,MF=(E,MYIOPL)
         LTR   R15,R15                  IF RETURN IS ZERO
         BZ    PUEND                      GO TO END
         B     PUERR04                  ELSE GO TO ERROR
*
PUERR04  LA    R15,X'04'(0,0)           SET VALUE
         ST    R15,RETCDE                 INTO INTERNAL RETURN CODE
*
PUEND    L     RBAL,PURBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
         EJECT
**********************************************************************
***                                                                ***
***   READ INPUT WITH GETLINE                                      ***
***                                                                ***
***    1.  IOPL was initialized at beginning of program, IOPLIOPB  ***
***        field will be filled in by GETLINE execute macro.       ***
***    2.  GTPB will be filled in by GETLINE execute macro.        ***
***                                                                ***
**********************************************************************
GETLPROC ST    RBAL,GERBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
GEINPUT  XC    MYGTPB(MYGTPBLN),MYGTPB  ZERO THE PARM BLOCK
         XC    MYIOECB,MYIOECB          ZERO THE ECB
         GETLINE PARM=MYGTPB,TERMGET=(),MF=(E,MYIOPL)
         C     R15,F4                   IF RETURN IS NOT GT 4
         BNH   GEEND                      GO TO END
         B     GEERR04                  ELSE GO TO ERROR
*
GEERR04  LA    R15,X'04'(0,0)           SET VALUE
         ST    R15,RETCDE                 INTO INTERNAL RETURN CODE
*
GEEND    L     RBAL,GERBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
*
         EJECT
**********************************************************************
***                                                                ***
***   PROCESS HELP SUBCOMMAND                                      ***
***                                                                ***
***     1.  Build a CPPL in SP-001.                                ***
***     2.  LINK to program HELP.                                  ***
***                                                                ***
**********************************************************************
HELPPROC ST    RBAL,HERBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
HELPCPPL L     R4,CPPLPTR               POINT TO ORIGINAL CPPL
         MVC   HPCPPL(16),0(R4)         COPY MAIN CPPL INTO HELP CPPL
*                                       COPY CBUF PTR FROM CMD SCAN
         MVC   HPCPPL+(CPPLCBUF-CPPL)(4),MYCSPL+(CSPLCBUF-CSPL)
*
HELPIT   LA    R1,HPCPPL                POINT TO HELP CPPL
         LINK  EP=HELP                  LINK TO HELP COMMAND
*
*                                       REMOVE IN-USE ON FILE SYSHELP
HENOTUSE MVC MY3(MY3LEN),@M3              INITIALIZE SVC99 BLOCKS
         GTEDASET MY3,CPPLPTR=CPPLPTR     LINK BLOCKS TOGETHER
         GTEDAALC MY3,VERB=UN,ERRMSG=NO   REMOVE INUSE ATTR
*
HEEND    L     RBAL,HERBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
         EJECT
**********************************************************************
***                                                                ***
***   PROCESS TSTATS SUBCOMMAND                                 GU00301
***                                                                ***
***     1.  Allocate the PAN and PDS datasets.                     ***
***     2.  Build a CPPL in SP-001.                                ***
***     3.  Build command buffers.                                 ***
***     4.  LINK to TSO commands PANINDEX and PDS.                 ***
***                                                                ***
**********************************************************************
STATPROC ST    RBAL,STRBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
STPARSE  MVC   PCLAD,ACPCL              ADDR OF SELECTED PCL FOR PARSE
         BAL   RBAL,PARSE               PARSE THE INPUT PARAMETERS
         CLC   RETCDE(4),F0             IF RETURN CODE IS BAD
         BE    *+14                     THEN
         MVC   COMPCODE(4),F12            SET RETURN CODE TO 12
         B     STEND                      AND GO TO END OF ROUTINE
*
         USING CPARMPDL,R9              ADDRESSABILITY OF PARMS
*
STALLOC  MVC   APDDSN(44),BLANKS        CLEAR THE DSN FIELD
         L     R1,CPOSDSN+0             R1 POINTS TO THE DSN
         LH    R2,CPOSDSN+4             R2 HAS LENGTH
         BCTR  R2,0                       MINUS 1 FOR EXEC
         B     *+10                     BRANCH AROUND THE MOVE
         MVC   APDDSN(0),0(R1)            MOVE DSN FROM PARM
         EX    R2,*-6                   EXECUTE THE MOVE
         MVC   APADSN(44),APDDSN        COPY PDS DSN TO PAN DSN
         LA    R2,APADSN+1(R2)          R2 POINTS JUST BEYOND NAME
         MVI   0(R2),C'.'               ADD THE DOT
         MVC   1(L'PANSUFF,R2),PANSUFF  ADD THE PANVALET SUFFIX
         BAL   RBAL,APDSPAN             ALLOCATE PDS AND PAN LIBRARIES
         CLC   RETCDE,F0                IF RETURN BAD
         BNE   STRET04                    GO TO HIGH ENDING
*
STATCPPL L     R4,CPPLPTR               POINT TO ORIGINAL CPPL
         MVC   STCPPL(16),0(R4)         COPY MAIN CPPL INTO STAT CPPL
*
STPANIPM L     R1,CPOSDSN+8             R1 POINTS TO MEMBER NAME
         LH    R2,CPOSDSN+12            R2 HAS LENGTH
         XC    PI2TEXT(10),PI2TEXT      CLEAR FOR LATER USE
         STH   R2,PI2TEXT               STORE THE LENGTH FOR TEXTBILD
         BCTR  R2,0                     R2 HAS LENGTH-1 FOR EXEC
         B     *+10                     BRANCH AROUND MOVE
         MVC   PI2TEXT+2(0),0(R1)         MOVE MEMB NAME FOR TEXTBILD
         EX    R2,*-6                   EXECUTE THE MOVE
         TEXTBILD  AREA=STCBUFTX,TEXT=(PI1TEXT,PI2TEXT,PI3TEXT)
         LA    R15,4(0,R15)             R15 HAS TOTAL LENGTH OF BUFFER
         STH   R15,STCBUFLN             MOVE BUFFER LENGTH TO BUFFER
         MVC   STCBUFOF,=H'9'           MOVE OPERAND OFFSET TO BUFFER
*
         LA    R15,STCBUF               R15 POINTS TO COMMAND BUFFER
         ST    R15,STCPPL+(CPPLCBUF-CPPL)  PUT ADDRESS INTO CPPL
*
STPANI   LA    R1,STCPPL                POINT TO STAT CPPL
         LINK  EP=PANINDEX              LINK TO PANI COMMAND
*
STPDSPM  L     R1,CPOSDSN+0             R1 POINTS TO DSN
         LH    R2,CPOSDSN+4             R2 HAS LENGTH
         XC    PD2TEXT(10),PD2TEXT      CLEAR FOR LATER USE
         STH   R2,PD2TEXT               STORE THE LENGTH FOR TEXTBILD
         BCTR  R2,0                     R2 HAS LENGTH-1 FOR EXEC
         B     *+10                     BRANCH AROUND MOVE
         MVC   PD2TEXT+2(0),0(R1)         MOVE DSN FOR TEXTBILD
         EX    R2,*-6                   EXECUTE THE MOVE
         L     R1,CPOSDSN+8             R1 POINTS TO MEMBER NAME
         LH    R2,CPOSDSN+12            R2 HAS LENGTH
         XC    PD4TEXT(10),PD4TEXT      CLEAR FOR LATER USE
         STH   R2,PD4TEXT               STORE THE LENGTH FOR TEXTBILD
         BCTR  R2,0                     R2 HAS LENGTH-1 FOR EXEC
         B     *+10                     BRANCH AROUND MOVE
         MVC   PD4TEXT+2(0),0(R1)         MOVE MEMB NAME FOR TEXTBILD
         EX    R2,*-6                   EXECUTE THE MOVE
         TEXTBILD  AREA=STCBUFTX,TEXT=(PD1TEXT,PD2TEXT,PD3TEXT,PD4TEXT)
         LA    R15,4(0,R15)             R15 HAS TOTAL LENGTH OF BUFFER
         STH   R15,STCBUFLN             MOVE BUFFER LENGTH TO BUFFER
         MVC   STCBUFOF,=H'4'           MOVE OPERAND OFFSET TO BUFFER
*
         LA    R15,STCBUF               R15 POINTS TO COMMAND BUFFER
         ST    R15,STCPPL+(CPPLCBUF-CPPL)  PUT ADDRESS INTO CPPL
*
*                         NOTE - PDS CMD WILL OVERLAY PCMD FIELD IN
*                                THE ECT.  THIS IS THE &SYSPCMD FIELD.
*                                IT MUST BE RESTORED FOR HELP TO WORK.
STECTPCM L     R4,CPPLPTR               R4 POINTS TO CPPL
         L     R4,(CPPLECT-CPPL)(R4)    R4 POINTS TO ECT
         LA    R4,(ECTPCMD-ECT)(R4)     R4 POINTS TO &SYSPCMD FIELD
         MVC   STPCMD(8),0(R4)          SAVE IT TEMPORARILY
*
STPDS    LA    R1,STCPPL                POINT TO STAT CPPL
         LINK  EP=PDS                   LINK TO PDS COMMAND
         MVC   0(8,R4),STPCMD           RESTORE THE &SYSPCMD FIELD
*
         B     STEND
*
STRET04  LA    R15,X'04'                RETURN CODE TO R15
         ST    R15,RETCDE               SAVE IT
         B     STEND                    GO TO ENDING
*
STEND    LA       R2,MYPPL+(PPLANS-PPL)   ADDRESS OF PTR TO PDL
         L        R2,0(0,R2)              R4 POINTS TO PDL
         IKJRLSA  (R2)                    FREE STORAGE OF PDL
         L     RBAL,STRBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
*
         DROP  R9                       DROP ADDRESSABILITY
*
         EJECT
**********************************************************************
***                                                                ***
***   DATA CONSTANTS                                               ***
***                                                                ***
**********************************************************************
CONSTDTA DS    0D                       AREA FOR DATA CONSTANTS
AAPCL DC       A(APARMPCL)              ADDR OF PARM CONTROL LIST
ABPCL DC       A(BPARMPCL)              ADDR OF PARM CONTROL LIST
ACPCL DC       A(CPARMPCL)              ADDR OF PARM CONTROL LIST
ADPCL DC       A(DPARMPCL)              ADDR OF PARM CONTROL LIST
VATTNXIT DC    V(ATTNXIT)               ADDR OF ATTENTION EXIT
VESTXIT  DC    V(ESTXIT)                ADDR OF ABEND EXIT
*
F0       DC    F'0'                     CONSTANT
F4       DC    F'4'                     CONSTANT
F12      DC    F'12'                    CONSTANT
BLANKS   DC    CL80' '                  BLANK LINE
*                              0....+....1....+....2....+....3....+
MSG0000  DC    H'06',H'00',CL02'  '
MSG0001A DC    H'37',H'00',CL33'PDU0001I Function completed (CC=)'
WRK0001B DC    H'08',H'32',CL4'0000'  (TO BE MODIFIED)
MSG0002  DC    H'41',H'00',CL37'PDU0002I Type in subcommand, or HELP:'
ATTOBUF  DC    CL66'Interrupt.  Enter a null line to continue, or PA-1 X
               (BREAK) to end.'
*
@M0      GTEDADAT DDNAM=X,UNALC=YES
@M3      GTEDADAT DDNAM=SYSHELP,REMOV=Y
*
STAXD    STAX  MF=L                     INITIALIZED STAX PARM LIST
*
ESTAED   ESTAE MF=L
*
AWKLIST  DC    CL8'WRK001'              WORK FILE NAME
         DC    CL8'WRK002'              WORK FILE NAME
         DC    CL8'PCWORK1'             WORK FILE NAME
         DC    CL8'PCWORK2'             WORK FILE NAME
*
DWKLIST  DC    CL8'WRK001'              WORK FILE NAME
         DC    CL8'WRK002'              WORK FILE NAME
         DC    CL8'PCWORK1'             WORK FILE NAME
         DC    CL8'PCWORK2'             WORK FILE NAME
         DC    CL8'SYSPRINT'            PRINT FILE NAME
*
PANSUFF  DC    C'PANUPDTE'              PAN LIBRARY SUFFIX
*
DPLIST   DC    CL8'PDS'                 PDS DDNAME
         DC    CL8'PANDD1'              PAN DDNAME
*
@PD      GTEDADAT DDNAM=X,DSNAM=X,PERMA=YES,STATS=SHR
*
@WK      GTEDADAT DDNAM=X,STATS=NEW,NDISP=PASS,CDISP=DELETE,           X
               TRK=YES,PRIME=1,SECND=1,UNIT=SYSTSO,PERMA=YES
*
@PR      GTEDADAT DDNAM=SYSPRINT,TERM=YES,PERMA=YES,                   X
               BLKSZ=1330,LRECL=133,RECFM=FBA
*
@SQ      GTEDADAT DDNAM=SEQ,DSNAM=X,MEMBR=X,STATS=SHR,PERMA=YES
*
#WK      GTEDADAT DDNAM=X,UNALC=YES
*
PI1TEXT  DC    H'18',CL18'PANINDEX CATEGORY('
PI3TEXT  DC    H'01',CL01')'
*
PD1TEXT  DC    H'05',CL05'PDS '''
PD3TEXT  DC    H'07',CL07''' ATTR '
*
COMMA    DC    H'01',CL01','
*                                                               GU00301
         EJECT                                                  GU00301
*************************************************************** GU00301
***                                                         *** GU00301
***   SUBCOMMAND TABLE                                      *** GU00301
***                                                         *** GU00301
*************************************************************** GU00301
*                                                               GU00301
SUTBL    DS    0F  SUBCOMMD  BRANCH ADDRESS                     GU00301
*                  --------  --------------                     GU00301
         DC    CL8'STATS   ',A(A4STAT)                          GU00301
         DC    CL8'STATUS  ',A(A4STAT)   <== alias for STATS    GU00301
         DC    CL8'UPDATE  ',A(A0UPDT)                          GU00301
         DC    CL8'ADD     ',A(A0UPDT)   <== alias for UPDATE   GU00301
         DC    CL8'CHANGE  ',A(A0UPDT)   <== alias for UPDATE   GU00301
         DC    CL8'BACKUP  ',A(A5BKUP)                          GU00401
         DC    CL8'ALIAS   ',A(A3ALIS)                          GU00301
         DC    CL8'RESTORE ',A(A1REST)                          GU00301
         DC    CL8'DELETE  ',A(A2DELT)                          GU00301
         DC    CL8'POOF    ',A(A2DELT)   <== alias for DELETE   GU00301
         DC    CL8'HELP    ',A(HELPPROC)                        GU00301
         DC    CL8'END     ',A(ENDING)                          GU00301
         DC    CL8'ABEND0C1',A(F0)       <== causes S0C1 ABEND  GU00301
         DC    CL8'TSTATS  ',A(STATPROC)                        GU00301
         DC    CL8'TSTATUS ',A(STATPROC) <== alias for TSTATS   GU00301
SUTBLEND DC    X'FF'                                            GU00301
*
CONSTEND DS    0D
CONSTLEN EQU   *-CONSTDTA               TOTAL LENGTH OF CONSTANTS
         EJECT
**********************************************************************
***                                                                ***
***    COMMAND OPERANDS                                            ***
***                                                                ***
***    UPDATE  pds-dsn(pds-member)  FROM(in-dsn{(in-member)})      ***
***                                 WITH                           ***
***                                USING                           ***
***                                                                ***
**********************************************************************
APARMPCL IKJPARM  DSECT=APARMPDL
*
APOSDSN  IKJPOSIT DSNAME,                                              X
               USID,                                                   X
               VALIDCK=PDSMEM,                                         X
               PROMPT='THE NAME OF THE OUTPUT PDS AND MEMBER',         X
               HELP='1-44 CHAR DSNAME AND 1-8 CHAR MEMBER NAME'
*
AKEYFROM IKJKEYWD  DEFAULT='FROM'
         IKJNAME  'FROM',                                              X
               ALIAS=('WITH','USING'),                                 X
               SUBFLD=ASUBFROM
*
ASUBFROM IKJSUBF
ASFDSN   IKJPOSIT DSNAME,                                              X
               USID,                                                   X
               PROMPT='THE NAME OF THE INPUT DATASET',                 X
               HELP='1-44 CHARACTER DSNAME WITH OPTIONAL MEMBER NAME'
*
         IKJENDP
*
         EJECT
**********************************************************************
***                                                                ***
***    COMMAND OPERANDS                                            ***
***                                                                ***
***    RESTORE  pds-dsn(pds-member)  FROM  VERSION(pan-suffix)     ***
***                                  WITH                          ***
***                                 USING                          ***
***                                                                ***
**********************************************************************
BPARMPCL IKJPARM  DSECT=BPARMPDL
*
BPOSDSN  IKJPOSIT DSNAME,                                              X
               USID,                                                   X
               VALIDCK=PDSMEM,                                         X
               PROMPT='THE NAME OF THE OUTPUT PDS AND MEMBER',         X
               HELP='1-44 CHAR DSNAME AND 1-8 CHAR MEMBER NAME'
*
BKEYFROM IKJKEYWD
         IKJNAME  'FROM',                                              X
               ALIAS=('WITH','USING')
*
BKEYVERS IKJKEYWD  DEFAULT='VERSION'
         IKJNAME  'VERSION',                                           X
               SUBFLD=BSUBVERS
*
BSUBVERS IKJSUBF
BSVERS   IKJIDENT  'VERSION NUMBER',                                   X
               MAXLNTH=2,                                              X
               PROMPT='1-2 DIGIT PANVALET SUFFIX, 0-99',               X
               INTEG,                                                  X
               HELP='2-CHARACTER SUFFIX FROM PANINDEX OR PAN PRINT'
*
         IKJENDP
*
         EJECT
**********************************************************************
***                                                                ***
***    COMMAND OPERANDS                                            ***
***                                                                ***
***    DELETE  pds-dsn(pds-member)                                 ***
***    STATS                                                       ***
***    TSTATS                                                   GU00301
***    BACKUP                                                   GU00401
***                                                                ***
**********************************************************************
CPARMPCL IKJPARM  DSECT=CPARMPDL
*
CPOSDSN  IKJPOSIT DSNAME,                                              X
               USID,                                                   X
               VALIDCK=PDSMEM,                                         X
               PROMPT='THE NAME OF THE PDS AND MEMBER',                X
               HELP='1-44 CHAR DSNAME AND 1-8 CHAR MEMBER NAME'
*
         IKJENDP
*
         EJECT
**********************************************************************
***                                                                ***
***    COMMAND OPERANDS                                            ***
***                                                                ***
***    ALIAS  pds-dsn(pds-member)  alias                           ***
***                                                                ***
**********************************************************************
DPARMPCL IKJPARM  DSECT=DPARMPDL
*
DPOSDSN  IKJPOSIT DSNAME,                                              X
               USID,                                                   X
               VALIDCK=PDSMEM,                                         X
               PROMPT='THE NAME OF THE PDS AND MEMBER',                X
               HELP='1-44 CHAR DSNAME AND 1-8 CHAR MEMBER NAME'
*
DPOSALIS IKJIDENT 'ALIAS NAME',                                        X
               MAXLNTH=8,                                              X
               FIRST=ALPHA,OTHER=ALPHANUM,                             X
               PROMPT='THE ALIAS NAME FOR THE MEMBER',                 X
               CHAR,                                                   X
               HELP='1-8 CHARACTER MEMBER NAME'
*
         IKJENDP
*
         EJECT
**********************************************************************
***                                                                ***
***   DATA AREA IN SUBPOOL 000                                     ***
***                                                                ***
**********************************************************************
WORKD    DSECT                          AREA-13 FOR VARIABLES
MYSAVE   DS    18F                      REGISTER SAVE AREA
CPPLPTR  DS    F                        INITIAL VALUE OF R1 (CPPLADDR)
RETCDE   DS    F                        INTERNAL RETURN CODE
COMPCODE DS    F                        PROGRAM COMPLETION CODE
*
INRBALSV DS    F                        RETURN ADDRESS SAVE AREA
ABRBALSV DS    F                        RETURN ADDRESS SAVE AREA
PPRBALSV DS    F                        RETURN ADDRESS SAVE AREA
PARBALSV DS    F                        RETURN ADDRESS SAVE AREA
UNRBALSV DS    F                        RETURN ADDRESS SAVE AREA
CORBALSV DS    F                        RETURN ADDRESS SAVE AREA
PURBALSV DS    F                        RETURN ADDRESS SAVE AREA
GERBALSV DS    F                        RETURN ADDRESS SAVE AREA
SCRBALSV DS    F                        RETURN ADDRESS SAVE AREA
SURBALSV DS    F                        RETURN ADDRESS SAVE AREA
HERBALSV DS    F                        RETURN ADDRESS SAVE AREA
STRBALSV DS    F                        RETURN ADDRESS SAVE AREA
A0RBALSV DS    F                        RETURN ADDRESS SAVE AREA
A1RBALSV DS    F                        RETURN ADDRESS SAVE AREA
A2RBALSV DS    F                        RETURN ADDRESS SAVE AREA
A3RBALSV DS    F                        RETURN ADDRESS SAVE AREA
A4RBALSV DS    F                        RETURN ADDRESS SAVE ARE GU00301
A5RBALSV DS    F                        RETURN ADDRESS SAVE ARE GU00401
AWRBALSV DS    F                        RETURN ADDRESS SAVE AREA
DWRBALSV DS    F                        RETURN ADDRESS SAVE AREA
APRBALSV DS    F                        RETURN ADDRESS SAVE AREA
DPRBALSV DS    F                        RETURN ADDRESS SAVE AREA
ASRBALSV DS    F                        RETURN ADDRESS SAVE AREA
DSRBALSV DS    F                        RETURN ADDRESS SAVE AREA
*
MYPPL    DS    7F                       PARSE PARAMETER LIST
MYECB    DS    F                        ECB FOR PARSE
MYANS    DS    F                        POINTER TO THE PDL
*
PCLAD    DS    A                        ADDR OF SELECTED PCL FOR PARSE
*
MYUWA    DS    0D                       WORK/SAVE AREA FOR PARSE EXITS
MYUWASV  DS    18F                      SAVE AREA FOR EXITS
MYUWAWRK DS    14F                      WORK AREA FOR EXITS
*
APLIST   DS    0CL1
APDDSN   DS    CL44                     WORK AREA FOR PDS DSN
APADSN   DS    CL44                     WORK AREA FOR PAN DSN
*
APDMEM   DS    0H                       WORK AREA FOR PDS MEMBER
APDMEMLN DS    H
APDMEMBR DS    CL8
*
APDALI   DS    0H                       WORK AREA FOR PDS ALIAS
APDALILN DS    H
APDALIS  DS    CL8
*
*
MY0      GTEDADAT MAP=ONLY,DDNAM=X,UNALC=YES
MY3      GTEDADAT DDNAM=SYSHELP,REMOV=Y
*
APD      GTEDADAT MAP=ONLY,DDNAM=X,DSNAM=X,PERMA=YES,STATS=SHR
*
AWK      GTEDADAT MAP=ONLY,DDNAM=X,STATS=NEW,NDISP=PASS,CDISP=DELETE,  X
               TRK=YES,PRIME=1,SECND=1,UNIT=SYSTSO,PERMA=YES
*
APR      GTEDADAT MAP=ONLY,DDNAM=SYSPRINT,TERM=YES,PERMA=YES,          X
               BLKSZ=1330,LRECL=133,RECFM=FBA
*
DWK      GTEDADAT MAP=ONLY,DDNAM=X,UNALC=YES
*
ASQ      GTEDADAT DDNAM=SEQ,DSNAM=X,MEMBR=X,STATS=SHR,PERMA=YES,       X
               MAP=ONLY
*
PI2TEXT  DS    H,CL8                    PANINDEX CATEGORY NAME
*
PD2TEXT  DS    H,CL44                   PDS COMMAND DSN
PD4TEXT  DS    H,CL8                    PDS COMMAND MEMBER NAME
*
STAXL    STAX  MF=L                     PARM LIST FOR STAX
STAXLLN  EQU   *-STAXL                    LENGTH OF PARM LIST
*
COPACK8  DS    D                        DOUBLEWORD FOR CVD
A1VERS   DS    CL2                      TWO CHARACTERS FOR PARM
*
MSG0001B DS    H,H,CL4                  SEGMENT TWO OF MESSAGE
*
MYIOPL   DS    4F                       IO PARM LIST
MYIOECB  DS    F                        ECB FOR I/O ROUTINES
MYPTPB   PUTLINE MF=L                   PUTLINE PARM BLOCK (PTPB)
MYPTPBLN EQU   *-MYPTPB                   LENGTH OF PTPB
MYGTPB   GETLINE MF=L                   GETLINE PARM BLOCK (GTPB)
MYGTPBLN EQU   *-MYGTPB                   LENGTH OF PTPB
*                                       OUTPUT LINE DESCRIPTOR, 1 LEVEL
MYOLD    DS    F                          NUMBER OF SEGMENTS
         DS    5A                         ADDRS OF UP TO FIVE SEGMENTS
*
MYCSECB  DS    F                        ECB FOR COMMAND SCAN
SUADDR   DS    F                        BRANCH ADDRESS FOR SUBCOMMAND
*
STCBUF   DS    0H                       STATS COMMAND BUFFER
STCBUFLN DS    H                          LENGTH OF BUFFER
STCBUFOF DS    H                          OFFSET OF OPERAND INTO TEXT
STCBUFTX DS    CL100                      TEXT OF COMMAND
*
STPCMD   DS    CL8                      TEMP STORAGE FOR &SYSPCMD FIELD
*
ATTUPARM DS    0F                       USER PARM LIST FOR ATTENTION
ATTUPSAV DS    A                          ADDRESS OF SAVE AREA
ATTUPECB DS    A                          ADDRESS OF ECB
*
ATTSAVE  DS    18F                      SAVE AREA FOR ATTENTION EXIT
ATTECB   DS    F                        ECB FOR ATTENTION EXIT
ATTIBUF  DS    CL256                    ATTENTION EXIT INPUT BUFFER
*
ESTAEL   ESTAE MF=L
ESTAELLN EQU   *-ESTAEL
ESTUPL   DS    0D                       ESTAE USER PARM LIST
         DS    A                          ADDRESS OF RETURN POINT
         DS    A                          ADDRESS OF USER WORK AREA
ESTUWK   DS    0D                       ESTAE USER WORK AREA
         DS    18F                        REGISTER SAVE AREA
         DS    D                          DOUBLE WORD FOR UNPACK
         DS    F                          BAL REGISTER SAVE AREA
         WTO   '.+....1....+....2....+....3....+....4....+....5',      X
               ROUTCDE=(11),DESC=(7),MF=L
*
A0PARML  DS    A                        PARM LIST FOR UPDATE
A0PARM   DS    H,CL100                  PARM FOR UPDATE
A0RETCDE DS    F                        RETURN CODE
*
A1PARML  DS    A                        PARM LIST FOR RESTORE
A1PARM   DS    H,CL100                  PARM FOR RESTORE
A1RETCDE DS    F                        RETURN CODE
*
A2PARML  DS    A                        PARM LIST FOR DELETE
A2PARM   DS    H,CL100                  PARM FOR DELETE
A2RETCDE DS    F                        RETURN CODE
*
A3PARML  DS    A                        PARM LIST FOR ALIAS
A3PARMLN DS    H                        PARM LENGTH FOR ALIAS
A3PARM   DS    CL100                    PARM TEXT FOR ALIAS
A3RETCDE DS    F                        RETURN CODE
*                                                               GU00301
A4PARML  DS    A                        PARM LIST FOR STATS     GU00301
A4PARM   DS    H,CL100                  PARM FOR RESTORE        GU00301
A4RETCDE DS    F                        RETURN CODE             GU00301
*                                                               GU00401
A5PARML  DS    A                        PARM LIST FOR STATS     GU00401
A5PARM   DS    H,CL100                  PARM FOR RESTORE        GU00401
A5RETCDE DS    F                        RETURN CODE             GU00401
*
WORKDEND DS    0D
WORKDLEN EQU   *-WORKD                  TOTAL LENGTH OF WORK-13 AREA
         EJECT
**********************************************************************
***                                                                ***
***   DATA AREA IN SUBPOOL 001                                     ***
***                                                                ***
**********************************************************************
WORK8    DSECT                          AREA-8 FOR VARIABLES
MYCSPL   DS    6F                       COMMAND SCAN PARM LIST
MYFLG    DS    F                        COMMAND SCAN FLAG WORD
MYCSOA   DS    2F                       COMMAND SCAN OUTPUT AREA
*
HPCPPL   DS    4F                       HELP COMMAND PROCESSOR PARM LST
STCPPL   DS    4F                       STAT COMMAND PROCESSOR PARM LST
*
WORK8END DS    0D
WORK8LEN EQU   *-WORK8                  TOTAL LENGTH OF WORK-8 AREA
         EJECT
**********************************************************************
***                                                                ***
***   MAPPING DSECTS                                               ***
***                                                                ***
**********************************************************************
VALPARML DSECT                          PARM LIST FOR PARSE VALIDATION
PDEADR   DS    A                          ADDR OF PDE BEING CHECKED
USERWORD DS    A                          ADDR OF MYUWA
VALMSG   DS    A                          ADDR OF OPTIONAL MESSAGE
*
         CVT   DSECT=YES              , CVTMAP FOR IKJPARS
         IKJCPPL                        COMMAND PROCESSOR PARM LIST
         IKJPPL                         PARSE PARM LIST
         IKJIOPL                        I/O PARM LIST
         IKJGTPB                        GETLINE PARM BLOCK
         IKJCSPL                        COMMAND SCAN PARM LIST
         IKJCSOA                        COMMAND SCAN OUTPUT AREA
         IKJECT                         ENVIRONMENT CONTROL TABLE
*
         IKJEFFDF DFDSECT=YES,DFDSEC2=YES  MAPS DAIRFAIL CONTROL BLOCKS
         IEFZB4D0                       MAPS SVC99 CONTROL BLOCKS
*
         IHASDWA                      , SDWA FOR ESTAE EXIT
         EJECT
**********************************************************************
***                                                                ***
***   EQUATES                                                      ***
***                                                                ***
**********************************************************************
RBASE    EQU   11                       BASE REGISTER
RBASE2   EQU   12                       BASE REGISTER
RBAL     EQU   10                       BAL REGISTER
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
**********************************************************************
***   PARSE VALIDATION CHECK FOR MEMBER NAME.                      ***
***   On entry, R1 points to parm list described by VALPARML.      ***
***                                                                ***
***      R1               VALPARML         xPOSDSN                 ***
***        +-----------+    +-----------+    +-----------+    +--- ***
***        ×           ×===>× PDEADR    ×===>×           ×===>×dsn ***
***        +-----------+    +-----------+    +-----+--+--+    +--- ***
***                         × USERWORD  ×    ×00 01×80×  ×         ***
***                         +-----------+    +-----+--+--+    +--- ***
***                         ×00 00 00 00×    ×           ×===>×mem ***
***                         +-----------+    +-----+--+--+    +--- ***
***                                          ×00 01×80×  ×         ***
***                                          +-----+--+--+    +--- ***
***                                          ×           ×===>×psw ***
***                                          +-----+--+--+    +--- ***
***                                          ×00 01×80×  ×         ***
***                                          +-----+--+--+         ***
***                                                                ***
***   If member name is present, signal okay with RC=0.            ***
***   If member name is not present, signal to prompt with RC=4.   ***
***                                                                ***
***   After linkage conventions in, R13 points to MYUWA (in main   ***
***   CSECT) whose address is in USERWORD, the second address in   ***
***   the parm list.  The length of MYUWA is arbitrary.  This      ***
***   program uses the first 18 fullwords for its own save area.   ***
**********************************************************************
PDSMEM CSECT
         STM   R14,R12,12(R13)          SAVE INTO PARSE'S SAVE AREA
         L     R14,4(0,R1)              R14 POINTS TO MYUWA SAVE/WORK
         ST    R14,8(0,R13)             PARSE'S S.A. POINTS TO MINE
         ST    R13,4(0,R14)             MY S/W AREA POINTS TO PARSE'S
         L     R14,12(0,R13)            RESTORE R14
         L     R13,8(0,R13)             R13 POINTS MYUWA SAVE/WORK AREA
*
         LR    RBASE,R15                CREATE OWN BASE REGISTER
         USING PDSMEM,RBASE             ADDRESSABILITY
         LR    R9,R1                    BASE OF PARM LIST
         USING VALPARML,R9              ADDRESSABILITY OF PARM LIST
*
         L     R2,0(0,R9)               R2 POINTS TO PDE
         TM    14(R2),X'80'             IF MEMBER NAME PRESENT
         BO    PDSMEND0                   SIGNAL OKAY
*                                       ELSE
PDSMEND4 LA    R15,4                      SIGNAL TO PROMPT
         B     PDSMEND                    GO TO END
*
PDSMEND0 XR    R15,R15                  SIGNAL OKAY
*
PDSMEND  L     R13,4(0,R13)             RESTORE R13 FROM MY S/W AREA
         LM    R0,R12,20(R13)           RESTORE R0-12 FROM PARSE'S S.A.
         L     R14,12(0,R13)            RESTORE R14 FROM PARSE'S S.A
         BR    R14                      RETURN
*
         EJECT
**********************************************************************
***                  ESTAE (ABEND) EXIT                            ***
***                                                                ***
***   This exit will receive control from RTM during ABEND         ***
***   processing.  Data areas available to this exit will be       ***
***   the System Diagnostic Work Area (SDWA) provided by the       ***
***   RTM, and the user parm list and the areas it points to       ***
***   which are provided by the main routine.                      ***
***                                                                ***
***   This exit will format an ABEND message, and write it         ***
***   with a WTO.  It will then return to RTM.                     ***
***                                                                ***
***   The register save area used by this exit has already been    ***
***   obtained by a GETMAIN by the main program, prior to the      ***
***   execution of the ESTAE macro.                                ***
***                                                                ***
***   This exit is entered by RTM with standard MVS linkage        ***
***   conventions.  Upon entry, the following relationships        ***
***   exist:                                                       ***
***                                                                ***
*** R1              SDWA (IHASDWA)   ESTUSRPL                      ***
*** +-----------+   +------------+   +-----------+                 ***
*** ×           ×==>× SDWAPARM   ×==>× ESURETA   ×==> Return point ***
*** +-----------+   +------------+   +-----------+                 ***
***                 × SDWAABCC   ×   × ESUWRKA   ×==> ESUWKD       ***
***                 +------------+   +-----------+   +-----------+ ***
***                 ×            ×                   × Save area × ***
***                ---          ---                 ---         ---***
***                ---          ---                 ---         ---***
***                 ×            ×                   ×           × ***
***                 +------------+                   +-----------+ ***
***                 × SDWAGR15   ×                   × Other work× ***
***                 +------------+                   ×   areas   × ***
***                 ×            ×                   +-----------+ ***
***                ---          ---                                ***
***                ---          ---                                ***
***                 ×            ×                                 ***
***                 +------------+                                 ***
***                                                                ***
**********************************************************************
         EJECT
**********************************************************************
***                                                                ***
***          SEE DOCUMENTATION ON PREVIOUS PAGE                    ***
***                                                                ***
**********************************************************************
ESTXIT   CSECT
         STM   R14,R12,12(R13)          SAVE REGS INTO CALLER'S S.A.
         LR    R12,R15                  R12 HAS BASE ADDRESS
         USING ESTXIT,R12                 ADDRESSABILITY
         LR    R11,R1                   R11 POINTS TO SDWA
         USING SDWA,R11                   ADDRESSABILITY
         L     R10,SDWAPARM             R10 POINTS TO USER PARM LIST
         USING ESTUSRPL,R10               ADDRESSABILITY
         L     R15,ESUSRWKA             R15 POINTS TO USER WORK AREA
         ST    R13,4(0,R15)             CALLER'S S.A. ADDR TO OWN S.A.
         ST    R15,8(0,R13)             OWN S.A. ADDR TO CALLER'S S.A.
         LR    R13,R15                  R13 POINTS TO OWN S.A.
         USING ESUWKD,R13                 ADDRESSABILITY
*
ESTMESSG BAL   R9,ESMSG                 FORMAT AND WRITE A MESSAGE
*
         PRINT GEN
         L     R4,ESURETA               R4 CONTAINS RETURN ADDRESS
ESTSETRP SETRP WKAREA=(R11),RC=4,RETADDR=(R4),RETREGS=YES,FRESDWA=YES
         PRINT NOGEN
*
ESTEND   XR    R15,R15                  CLEAR RETURN CODE
         L     R13,4(0,R13)             RESTORE R13, PNT TO CALLER'S SA
         LM    R0,R12,20(R13)           RESTORE R0-R12 FROM CALLER'S SA
         L     R14,12(0,R13)            RESTORE R14 FROM CALLER'S S.A.
         BR    R14                      RETURN
         EJECT
**********************************************************************
***                                                                ***
***                  WRITE ABEND MESSAGE                           ***
***                                                                ***
**********************************************************************
ESMSG    ST    R9,ESUBALS1              SAVE BAL REGISTER
*
         MVC   WTOL(WTOLLEN),WTOD       INITIALIZE WTO PARM LIST
*
ESSYSCDE L     R3,SDWAABCC              R3 HAS ABEND CODES
         SLL   R3,8                     LEFT JUSTIFY SYSTEM CODE
         LA    R4,WTOL+26               R4 POINTS INTO MESSAGE
         LA    R5,3                     R5 COUNTER SET TO 3
         BAL   R9,ESHEX                 CONVERT TO DISPLAYABLE HEX
*
ESR15CDE L     R3,SDWAGR15              R3 HAS ABEND R15 CONTENTS
         LA    R4,WTOL+42               R4 POINTS INTO MESSAGE
         LA    R5,8                     R5 COUNTER SET TO 8
         BAL   R9,ESHEX                 CONVERT TO DISPLAYABLE HEX
*
ESUSRCDE L     R3,SDWAABCC              R3 HAS ABEND CODES
         N     R3,ESXFFF                R3 HAS ONLY USER CODE
         CVD   R3,ESUWKDBL              CONVERT TO DECIMAL
         OI    ESUWKDBL+7,X'0F'         KILL THE SIGN
         UNPK  WTOL+33(4),ESUWKDBL(8)   UNPACK INTO MESSAGE
*
ESWTO    WTO   MF=(E,WTOL)              WRITE THE MESSAGE
*
ESMSGEND L     R9,ESUBALS1              RESTORE THE BAL REGISTER
         BR    R9                       RETURN
*
*
ESHEX    XR    R2,R2                    CLEAR EVEN REG OF EVEN/ODD
         SLDL  R2,4                     R2 RECEIVES ONE HEX DIGIT
         LA    R4,1(0,R4)               R4 POINTS TO NEXT MESSAGE CHAR
         LA    R2,ESHEXTBL(R2)          R2 POINTS TO CHAR IN TABLE
         MVC   0(1,R4),0(R2)            MOVE CHAR FROM TABLE TO MESSAGE
         BCT   R5,ESHEX                 LOOP BACK UP
         BR    R9                       RETURN
*
         EJECT
**********************************************************************
***                                                                ***
***          DATA AREAS AND DSECTS FOR ESTAE EXIT                  ***
***                                                                ***
**********************************************************************
ESHEXTBL DC    CL16'0123456789ABCDEF'   TRANSLATE TABLE
         DS    0F                       ALIGN
ESXFFF   DC    X'00000FFF'              MASK TO CLEAR BITS 0-19
WTOD     WTO   '*** ABEND ***  Codes: SXXX, U9999, R15=XXXXXXXX',      X
               ROUTCDE=(11),DESC=(7),MF=L
*
*
*
ESTUSRPL DSECT                          USER PARM LIST
ESURETA  DS    A                          RETURN ADDRESS FOR RTM
ESUSRWKA DS    A                          WORK AREA ADDRESS FOR ME
*
*
*
ESUWKD   DSECT                          USER WORK AREA
ESUWKSAV DS    18F                        REGISTER SAVE AREA
ESUWKDBL DS    D                          DOUBLE WORD FOR UNPACK
ESUBALS1 DS    F                          BAL REGISTER SAVE AREA
WTOL     WTO   '.+....1....+....2....+....3....+....4....+....5',      X
               ROUTCDE=(11),DESC=(7),MF=L
WTOLLEN  EQU   *-WTOL                     LENGTH OF WTO PARM LIST
*
         EJECT
**********************************************************************
***                  ATTENTION EXIT                                ***
***                                                                ***
***  This code is entered after the attention prompt is displayed  ***
***  and the user's response has been copied into the input buffer.***
***                                                                ***
***  This attention exit simply POSTs the ECB which will be        ***
***  checked by other routines.                                    ***
***                                                                ***
***  Upon entry, the following pointers are in place:              ***
***                                                                ***
***  R1             Attn prm lst                                   ***
***  +-----------+   +-----------+                                 ***
***  ×           ×==>×           ×==> TAIE (**)                    ***
***  +-----------+   +-----------+                                 ***
***                  ×           ×==> IBUF                         ***
***                  +-----------+                                 ***
***                  ×           ×==> ATTUPARM (*)                 ***
***                  +-----------+    +-----------+                ***
***                                   ×           ×==> Save area   ***
***                                   +-----------+                ***
***                                   ×           ×==> ATTECB      ***
***                                   +-----------+                ***
***   * ATTUPARM is the user's own parm.  It can contain anything  ***
***     the user wants it to.  This exit expects the parm to be    ***
***     a multiple-word list of addresses.  The addresses are the  ***
***     address of a register save area which this exit will use   ***
***     as its own, and the address of an ECB which this exit will ***
***     POST.  The GETMAIN for these two data areas was already    ***
***     done by the main program.                                  ***
***                                                                ***
***  ** The TAIE is mapped by IKJTAIE and contains the input       ***
***     message length, input TGET return code, interruption       ***
***     address, and the contents of registers 0-15 at the         ***
***     time of the interrupt.  (It is not used by this exit.)     ***
***                                                                ***
***             TAIE                                               ***
***             +-----+--+--+                                      ***
***          +0 ×Len. ×RC×  ×                                      ***
***             +-----+--+--+                                      ***
***          +4 ×Int. Addr  ×                                      ***
***             +-----------+                                      ***
***          +8 ×64 bytes   ×                                      ***
***             ×containing ×                                      ***
***             ×contents of×                                      ***
***             ×R0-R15, in ×                                      ***
***             ×this order.×                                      ***
***             ×           ×                                      ***
***            ---         ---                                     ***
***            ---         ---                                     ***
***             ×           ×                                      ***
***             +-----------+                                      ***
**********************************************************************
         EJECT
**********************************************************************
***                                                                ***
***          SEE DOCUMENTATION ON PREVIOUS PAGE                    ***
***                                                                ***
**********************************************************************
ATTNXIT  CSECT
         STM   R14,R12,12(R13)          SAVE REGISTERS
         LR    R12,R15                  BASE REGISTER
         USING ATTNXIT,R12                ADDRESSABILITY
         L     R15,8(0,R1)              R15 POINTS TO ATTUPARM
         L     R15,0(0,R15)             R15 POINTS TO SAVE AREA
         ST    R15,8(0,R13)             OWN S.A. ADDR TO CALLER'S S.A.
         ST    R13,4(0,R15)             CALLER'S S.A. ADDR TO OWN S.A.
         LR    R13,R15                  R13 POINTS TO OWN S.A.
*
         LR    R2,R1                    SAVE CONTENTS OF R1
         L     R3,8(0,R2)               R3 POINTS TO ATTUPARM
         L     R3,4(0,R3)               R3 POINTS TO ECB
         POST  (R3)                     POST THE ECB
*
ATTNEND  XR    R15,R15                  CLEAR RETURN CODE TO 00
         L     R13,4(0,R13)             RESTORE R13
         LM    R0,R12,20(R13)           RESTORE R0-R12
         L     R14,12(0,R13)            RESTORE R14
         BR    R14                      RETURN
         END
