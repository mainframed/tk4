         PRINT GEN
         MACRO
&LABEL   TEXTBILD &AREA=,&TEXT=
.*+-----------------------------------------------------------------+
.*×  MACRO TO BUILD TEXT LINES FROM INDIVIDUAL WORDS AND PHRASES.   ×
.*×   E.G.                                                          ×
.*×           TEXTBILD  AREA=OUTAREA,TEXT=(AVALUE,BVALUE,CVALUE)    ×
.*×                                                                 ×
.*×  AVALUE   DC  H'5',C'ALPHA'                                     ×
.*×  BVALUE   DC  H'7',C'-BRAVO-'                                   ×
.*×  CVALUE   DC  H'7',C'CHARLIE'                                   ×
.*×                                                                 ×
.*×  OUTAREA  DS  CL80                                              ×
.*×                                                                 ×
.*×  CLEARS THE OUTAREA DATA ITEM WITH BLANKS, THEN                 ×
.*×  PRODUCES THE FOLLOWING IN OUTAREA: 'ALPHA-BRAVO-CHARLIE'       ×
.*×                                                                 ×
.*×  UPON COMPLETION:  R1  POINTS TO OUTAREA                        ×
.*×                    R15 HAS TOTAL LENGTH OF TEXT (19)            ×
.*×                                                                 ×
.*×  NOTES 1.  THE LENGTH OF THE CLEAR OPERATION IS TAKEN FROM      ×
.*×            THE DEFINED LENGTH OF THE 'AREA' DATA ITEM.          ×
.*×        2.  THE CODE PRODUCED BY THIS MACRO IS REENTERABLE.      ×
.*+-----------------------------------------------------------------+
         LCLA  &N1,&N2
&N1      SETA  N'&TEXT                  NUMBER OF TEXT OPERANDS
&N2      SETA  1                        INDEX OF INITIAL TEXT OPERAND
.*
&LABEL   MVI   &AREA,X'40'              CLEAR THE TEXT LINE
         MVC   &AREA+1(L'&AREA-1),&AREA   WITH BLANKS
.*
         LA    15,&AREA                 R15 POINTS TO TEXT BEGIN
.LOOP1   ANOP
         LH    1,&TEXT(&N2)             R1 HAS LENGTH OF TEXT
         BCTR  1,0                        MINUS 1 FOR EXEC
         B     *+10                     BRANCH AROUND MOVE
         MVC   0(*-*,15),&TEXT(&N2)+2     MOVE THE DATA
         EX    1,*-6                    EXECUTE THE MOVE
         LA    15,1(1,15)               R15 POINTS JUST BEYOND CHARS
&N2      SETA  &N2+1                    POINT TO NEXT TEXT OPERAND
         AIF   (&N2 LE &N1).LOOP1       LOOP BACK UP
.*
         LA    1,&AREA                  R1 HAS ADDR OF AREA
         SR    15,1                     R15 HAS TOTAL LENGTH OF TEXT
.*
         MEND
*
         EJECT
         LCLC  &MYNAME                  LOCAL CONSTANT
&MYNAME  SETC  'GTEUAD0'                CSECT NAME
RBASE    EQU   12                       BASE REGISTER FOR CSECT
RBAL     EQU   11                       BAL REGISTER
*
         TITLE '&MYNAME'                LISTING TITLE
**********************************************************************
***                                                                ***
***                   GTEUAD0                                      ***
***                                                                ***
***  DESCRIPTION:                                                  ***
***    The function of this program is to do some checking of      ***
***    a member of a CLIST library against installation standards, ***
***    then to check for required entries in a help library.       ***
***                                                                ***
***  To execute this program the following CLIST may be used:      ***
***                                                                ***
***  CLIST name: HELPCHK                                           ***
***                                                                ***
***     PROC 1 NAME                                                ***
***     /******************************************************/   ***
***     /* CLIST TO EXECUTE THE CLIST VS HELP LIBRARY CHECKER */   ***
***     /*                                                    */   ***
***     /* CATEGORY=MANAGE                                    */   ***
***     /* TEST DATASET = (NONE)                              */   ***
***     /******************************************************/   ***
***     ALLOC: +                                                   ***
***       FREE DD(PDS HELP SYSPRINT)                               ***
***       ALLOC DD(PDS) DSN('SYS1.CMDPROC') SHR                    ***
***       ALLOC DD(HELP) DSN('SYS1.PPHELP') SHR                    ***
***       ALLOC DD(SYSPRINT) DSN(*)                                ***
***     CALL: +                                                    ***
***       LIBCALL GTEUAD0 '&NAME'                                  ***
***       SET &PGMCC EQ &LASTCC                                    ***
***     REPORT: +                                                  ***
***       WRITE *** HELPCHK COMPLETE, CC=&PGMCC                    ***
***     CLEANUP: +                                                 ***
***       FREE DD(PDS HELP SYSPRINT)                               ***
***     ENDING: +                                                  ***
***       EXIT CODE(&PGMCC)                                        ***
***                                                                ***
***   EXEC mylib.clist(helpchk) 'xxx'                              ***
***                                                                ***
***                                                                ***
***  To execute this program the following JCL may be used:        ***
***                                                                ***
***     //HELPCHK  PROC  NAME=                                     ***
***     //HELPCHK  EXEC  PGM=GTEUAD0,PARM='&NAME'                  ***
***     //SYSPRINT  DD   SYSOUT=*                                  ***
***     //PDS       DD   DSN=SYS1.CMDPROC,DISP=SHR                 ***
***     //HELP      DD   DSN=SYS1.PPHELP,DISP=SHR                  ***
***     //HELPCHK  PEND                                            ***
***     //*                                                        ***
***     //*                                                        ***
***     //STEP1  EXEC  HELPCHK,NAME=XXX                            ***
***                                                                ***
**********************************************************************
         EJECT
**********************************************************************
***                                                                ***
***  FUNCTION:                                                     ***
***                                                                ***
***  1.  Examine the PARM field for validity.  Must be 1-8         ***
***      National characters.                                      ***
***                                                                ***
***  2.  Dynamically allocate and read an 'exception list' of      ***
***      names of CLISTs and HELPs which are exceptions from       ***
***      standards.  Then close and free the input file.           ***
***                                                                ***
***  3.  For the input PDS and HELP files, initialize the DCBs,    ***
***      open the files, get storage for input buffers, and        ***
***      initialize DECBs.                                         ***
***                                                                ***
***  4.  Find the CLIST member in the PDS file, and scan it for    ***
***      the presence of the following two items on comment cards. ***
***                                                                ***
***      A.  'CATEGORY=name', where 'name' is the name of a HELP   ***
***          member which contains a 1-line description of all     ***
***          HELP items in a category.                             ***
***                                                                ***
***      B.  'TEST DATASET = '                                     ***
***                                                                ***
***      The items listed above can be all on the same comment     ***
***      card.                                                     ***
***                                                                ***
***  5.  Find the HELP member with the same name as the CLIST      ***
***      member.                                                   ***
***                                                                ***
***  6.  Find the HELP member 'name', from 3.A., above, and scan   ***
***      it for the CLIST/HELP name in positions 1-8.              ***
***                                                                ***
***  7.  Close the PDS and HELP files, and release storage used    ***
***      for buffers.                                              ***
***                                                                ***
***  8.  If there have been any errors, open the SYSPRINT file     ***
***      and write error messages.  Then close the SYSPRINT file.  ***
***                                                                ***
**********************************************************************
         EJECT
**********************************************************************
***                                                                ***
***  NOTES:                                                        ***
***                                                                ***
***  1.  An actual dataset name on the 'TEST DATASET = ' comment   ***
***      is not required.  The following comment would pass the    ***
***      scan:                                                     ***
***                                                                ***
***          /*  TEST DATASET = (NONE)       */                    ***
***                                                                ***
***  2.  The PDS and HELP file must be fixed length, 80-byte       ***
***      records.                                                  ***
***                                                                ***
***                                                                ***
***  RETURN CODES:                                                 ***
***      0 - OK                                                    ***
***      4 - Error in CLIST or HELP text.  Error message will go   ***
***          to SYSPRINT file.                                     ***
***     12 - Error in input parm, or in blocksize of PDS or HELP   ***
***          dataset.                                              ***
***                                                                ***
***                                                                ***
***                                                                ***
***  REGISTER USAGE:                                               ***
***                                                                ***
***     R0-R3   - Linkage conventions, work, macros.               ***
***     R4      - Work registers, not used to pass information     ***
***               between routines.                                ***
***     R5      - (unused)                                         ***
***     R6      - (unused)                                         ***
***     R7      - (unused)                                         ***
***     R8      - (unused)                                         ***
***     R9      - Base of input block from PDS file (CLIST).       ***
***     R10     - Base of input block from HELP file.              ***
***     R11     - Linkage register used with BAL instructions.     ***
***     R12     - Base register of program code.                   ***
***     R13-R15 - Linkage conventions, work, macros.               ***
***                                                                ***
***                                                                ***
***  NON-IBM MACROS USED:                                          ***
***     None                                                       ***
***                                                                ***
***                                                                ***
***  ASSEMBLER OPTIONS:       RENT                                 ***
***  LINKAGE EDITOR OPTIONS:  RENT, REUS, ALIAS(...)               ***
***                                                                ***
**********************************************************************
         EJECT
**********************************************************************
***                                                                ***
***  CULPRIT:                                                      ***
***                                                                ***
***     Chuck Hoffman, IBM Systems Programming                     ***
***     GTE Laboratories, Technical Computation Center             ***
***     40 Sylvan Road                                             ***
***     Waltham, Massachusetts  02254                              ***
***                                                                ***
***                     617/466-2131    V/N 679-2131               ***
***                                                                ***
**********************************************************************
         SPACE 3
**********************************************************************
***                                                                ***
***  MAINTENANCE HISTORY:                                          ***
***                                                                ***
***  1.  A.  Initial install.                                      ***
***  2.  A.  Correct bypass of the 'exception' error message.   GU00201
***                                                                ***
***                                                                ***
***                                                                ***
**********************************************************************
         EJECT
***********************************************************************
***                                                                 ***
***      LINKAGE CONVENTIONS ENTERING PROGRAM                       ***
***                                                                 ***
***********************************************************************
&MYNAME  CSECT ,
         STM   R14,R12,12(R13)          SAVE REGS TO CALLER S.A.
         B     (BEGIN-&MYNAME)(R15)     BRANCH AROUND EYECATCHER
         DC    A(L'NAME)                LENGTH OF CSECT NAME
NAME     DC    C'&MYNAME'               CSECT NAME
         DC    C' &SYSDATE &SYSTIME '   ASSEMBLY DATE/TIME STAMP
BEGIN    LR    RBASE,R15                LOAD BASE REGISTER
         USING &MYNAME,RBASE              ADDRESSABILITY
         PRINT NOGEN
         GETMAIN R,LV=WORKDLEN          GET SAVE/WORK AREA
         ST    R1,8(0,R13)              MY S.A. ADDR INTO CALLER S.A.
         ST    R13,4(0,R1)              CALLER S.A. ADDR INTO MY S.A.
         LR    R13,R1                   R13 POINTS TO MY S.A.
         USING WORKD,R13                ADDRESSABILITY OF SAVE AREA
         L     R1,4(0,R13)              R1 POINTS TO CALLER S.A.
         LM    R15,R1,16(R1)            R15 R0 AND R1 ARE RESTORED
*
         EJECT
***********************************************************************
***                                                                 ***
***      MAINLINE ROUTINE                                           ***
***                                                                 ***
***********************************************************************
MAIN     EQU   *                        BEGIN MAINLINE ROUTINE
         ST    R1,R1SAVE                SAVE INITIAL R1
         XC    COMPCODE,COMPCODE        CLEAR COMPLETION CODE
         MVI   SWITCH0,B'00000000'      INITIALIZE SWITCH AREA
*
         USING HELBLOCK,R10             ADDRESSABILITY OF HELP BLOCK
         USING PDSBLOCK,R9              ADDRESSABILITY OF CLIST BLOCK
*
MAPARM   BAL   RBAL,PARM                PROCESS INPUT PARM
         CLC   RETCDE,F0                IF NOT CLEAN
         BE    MAEXCPTN                   THEN
         OI    SWITCH0,X'02'                SET ERROR SWITCH
         B     END12                        GO TO HIGH ENDING
*
MAEXCPTN BAL   RBAL,EXCPTN              DO EXCEPTION PROCESSING
*
MAOPEN   BAL   RBAL,OPEN                OPEN THE FILES
*
MARPDS   BAL   RBAL,RPDS                READ/SCAN THE CLIST MEMBER
         CLC   RETCDE,F0                IF BLKSIZE NOT N * 80
         BE    *+16                       THEN
         BAL   RBAL,CLOSE                   CLOSE THE FILES
         OI    SWITCH0,X'02'                SET ERROR SWITCH
         B     END12                        GO TO HIGH ENDING
*
MARHELP  BAL   RBAL,RHELP               LOCATE HELP MEMBER
*
MARCAT   BAL   RBAL,RCAT                READ/SCAN THE CATEGORY MEMBER
         CLC   RETCDE,F0                IF BLKSIZE NOT N * 80
         BE    *+16                       THEN
         BAL   RBAL,CLOSE                   CLOSE THE FILES
         OI    SWITCH0,X'02'                SET ERROR SWITCH
         B     END12                        GO TO HIGH ENDING
*
MACLOSE  BAL   RBAL,CLOSE               CLOSE THE FILES
*
         B     END00                    GO TO ENDING
*
         EJECT
***********************************************************************
***                                                                 ***
***      LINKAGE CONVENTIONS EXITING PROGRAM                        ***
***                                                                 ***
***********************************************************************
*
END00    LA    R15,00                   IF PROPOSED COMPLETION CODE
         C     R15,COMPCODE               IS GREATER THAN STORED CODE
         BNH   *+8                          THEN
         ST    R15,COMPCODE                   STORE THE PROPOSED CODE
         B     ENDING                   GO TO ENDING
*
END12    LA    R15,12                   IF PROPOSED COMPLETION CODE
         C     R15,COMPCODE               IS GREATER THAN STORED CODE
         BNH   *+8                          THEN
         ST    R15,COMPCODE                   STORE THE PROPOSED CODE
         B     ENDING                   GO TO ENDING
*
ENDING   BAL   RBAL,ERRORS              WRITE ANY ERROR MESSAGES
         L     R14,COMPCODE             R14 SAVES COMP CODE
         LR    R1,R13                   R1 SAVES ADDR OF MY S.A.
         L     R13,4(0,R1)              R13 RESTORED, PTR CALLER S.A.
         FREEMAIN R,LV=WORKDLEN,A=(R1)  FREE MY SAVE/WORK AREA
         LR    R15,R14                  R15 SET TO COMP CODE
         LM    R0,R12,20(R13)           R0-R12 RESTORED
         L     R14,12(0,R13)            R14 RESTORED
         MVI   12(R13),X'FF'            SET COMPLETION SIGNAL
         BR    R14                      RETURN TO CALLER
*
         EJECT
**********************************************************************
***                                                                ***
***  PROCESS INPUT PARM                                            ***
***                                                                ***
**********************************************************************
PARM     ST    RBAL,PARBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
         L     R2,R1SAVE                R2 POINTS TO PARM LIST
         L     R2,0(0,R2)               R2 POINTS TO PARM
         LH    R3,0(0,R2)               R3 HAS LENGTH OF PARM
         STH   R3,PARMLEN               SAVE IT
         LTR   R3,R3                    IF ZERO LENGTH
         BZ    PARET04                    GO TO HIGH ENDING
         C     R3,=F'8'                 IF LENGTH GREATER THAN 8
         BH    PARET04                    GO TO HIGH ENDING
         MVC   PARMIN(8),BLANKS         CLEAR PARMIN FIELD
         BCTR  R3,0                     LENGTH -1 FOR EXEC
         B     *+10                     BRANCH AROUND MOVE
         MVC   PARMIN(0),2(R2)            MOVE PARM CHARACTERS
         EX    R3,*-6                   EXECUTE THE MOVE
         B     *+10                     BRANCH AROUND TRANSLATE+TEST
         TRT   PARMIN(0),TRTNAT           CHECK FOR NATIONAL CHARS
         EX    R3,*-6                   EXECUTE THE TRANSLATE+TEST
         BNZ   PARET04                  IF NOT, GO TO HIGH ENDING
*
         B     PAEND
*
PARET04  LA    R15,X'04'                RETURN CODE TO R15
         ST    R15,RETCDE               SAVE IT
         B     PAEND                    BRANCH TO ENDING
*
PAEND    L     RBAL,PARBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
*
         EJECT
**********************************************************************
***                                                                ***
***  CHECK TO SEE IF THE NAME IS AN EXCEPTION                      ***
***                                                                ***
**********************************************************************
EXCPTN   ST    RBAL,EXRBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
EXDCBL   MVC   EXDCB(EXDCBLN),EXDCBD    INITIALIZE DCB
         MVC   EXDCB+(DCBDDNAM-IHADCB)(8),BLANKS  CLEAR DDNAME FIELD
*
EXALLOC  MVC   EX(EXLEN),EXD            INITIALIZE DYNALC DATA
         GTEDASET  EX,CPPLPTR=R1SAVE    LINK BLOCKS TOGETHER
         GTEDAALC  EX,VERB=AL,ERRMSG=NO ALLOCATE
         CLC   EXS99RC,F0               IF ALLOCATION FAILED
         BNE   EXEND                      GO TO THE ENDING
*
EXDDN    XR    R2,R2                    CLEAR R2 FOR INSERT
         ICM   R2,3,EXRTDDN-2           R2 HAS LENGTH OF RET DDNAME
         BCTR  R2,0                       MINUS 1 FOR EXEC
         B     *+10                     BRANCH AROUND MOVE
         MVC   EXDCB+(DCBDDNAM-IHADCB)(0),EXRTDDN  DDNAME INTO DCB
         EX    R2,*-6                   EXECUTE THE MOVE
*
EXOPEN   MVC   OPENEL(OPENELN),OPENED   INITIALIZE OPEN PARM LIST
         OPEN  (EXDCB,(INPUT)),MF=(E,OPENEL)  OPEN THE FILE
*
EXLOOP1  GET   EXDCB,EXINREC            GET AN INPUT RECORD
         CLC   PARMIN(8),EXINREC        IF NO MATCH WITH PARM NAME
         BNE   EXLOOP1                    GO GET ANOTHER RECORD
*
EXSWITCH OI    SWITCH0,X'01'            TURN ON EXCEPTION SWITCH
*
EXEOF    MVC   CLOSEL(CLOSELN),CLOSED   INITIALIZE CLOSE PARM LIST
         CLOSE (EXDCB),MF=(E,CLOSEL)    CLOSE THE FILE
*
EXUNALC  MVC   EXRTDDN-6(2),=X'0001'    CHANGE RTDDN T.U. TO DDN
         OC    EXDSNAM-6(2),EXDSNAM     KILL THE DSN KEY
         OC    EXSTATS(2),EXSTATS       KILL THE STATUS KEY
         GTEDAALC  EX,VERB=UN,ERRMSG=NO UNALLOCATE THE FILE
*
         B     EXEND
*
EXRET04  LA    R15,X'04'                RETURN CODE TO R15
         ST    R15,RETCDE               SAVE IT
         B     EXEND                    BRANCH TO ENDING
*
EXEND    L     RBAL,EXRBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
*
         EJECT
**********************************************************************
***                                                                ***
***  OPEN THE FILES                                                ***
***                                                                ***
**********************************************************************
OPEN     ST    RBAL,OPRBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
         MVC   HELDCB(HELDCBLN),HELDCBD INITIALIZE DCB FOR HELP
         MVC   PDSDCB(PDSDCBLN),PDSDCBD INITIALIZE DCB FOR CLIST
*
         MVC   OPENL(OPENLLN),OPENLD    INITIALIZE OPEN PARM LIST
         OPEN  (HELDCB,(INPUT),PDSDCB,(INPUT)),MF=(E,OPENL)  OPEN
*
         MVC   HELBLKSI(2),HELDCB+(DCBBLKSI-IHADCB)  SAVE HELP BLKSI
         MVC   PDSBLKSI(2),PDSDCB+(DCBBLKSI-IHADCB)  SAVE CLIST BLKSI
         LH    R3,HELBLKSI               R3 IS BLOCKSIZE OF HELP
         AH    R3,PDSBLKSI                 PLUS BLOCKSIZE OF CLIST
         GETMAIN R,LV=(R3)               GET STORAGE
         ST    R1,HELBUFAD               SAVE THE ADDR FOR HELP RECS
         LR    R10,R1                    SAVE IT FOR ADDRESSABILITY
         AH    R1,HELBLKSI               COMPUTE ADDR FOR CLIST RECS
         ST    R1,PDSBUFAD               SAVE THE ADDR FOR CLIST RECS
         LR    R9,R1                     SAVE IT FOR ADDRESSABILITY
*
         MVC   HELDECB(HELDECBL),HELDECBD  INITIALIZE DECB FOR HELP
         MVC   PDSDECB(PDSDECBL),PDSDECBD  INITIALIZE DECB FOR CLIST
*
         B     OPEND
*
OPRET04  LA    R15,X'04'                RETURN CODE TO R15
         ST    R15,RETCDE               SAVE IT
         B     OPEND                    BRANCH TO ENDING
*
OPEND    L     RBAL,OPRBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
*
         EJECT
**********************************************************************
***                                                                ***
***  CLOSE THE FILES                                               ***
***                                                                ***
**********************************************************************
CLOSE    ST    RBAL,CLRBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
         MVC   CLOSL(CLOSLLN),CLOSD     INITIALIZE CLOSE PARM LIST
         CLOSE (HELDCB,,PDSDCB),MF=(E,CLOSL)  CLOSE THE FILES
*
         L     R2,HELBUFAD               R2 POINTS TO I/O STORAGE
         LH    R3,HELBLKSI               R3 IS BLOCKSIZE OF HELP
         AH    R3,PDSBLKSI                 PLUS BLOCKSIZE OF CLIST
         FREEMAIN R,LV=(R3),A=(R2)       FREE STORAGE
*
         B     CLEND
*
CLRET04  LA    R15,X'04'                RETURN CODE TO R15
         ST    R15,RETCDE               SAVE IT
         B     CLEND                    BRANCH TO ENDING
*
CLEND    L     RBAL,CLRBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
*
         EJECT
**********************************************************************
***                                                                ***
***  READ THE CLIST MEMBER                                         ***
***                                                                ***
**********************************************************************
RPDS     ST    RBAL,RPRBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
RPFIND   MVC   PDSNAME(8),PARMIN        SET NAME
         XC    PDSTTRC(4),PDSTTRC       CLEAR TTR AND C FIELDS
         FIND  PDSDCB,PDSNAME,D         POINT TO PDS MEMBER
         LTR   R15,R15                  IF MEMBER DOESN'T EXIST
         BNZ   RPEND                      GO TO ENDING
         OI    SWITCH0,X'80'            TURN ON PDS-MEMB FOUND SWITCH
*
RPREAD   TM    SWITCH0,X'40'+X'20'      IF SCAN ALREADY COMPLETE
         BO    RPEND                      GO TO ENDING
         READ  PDSDECB,SF,PDSDCB,PDSBLOCK,'S',MF=E   READ A BLOCK
         CHECK PDSDECB                                 AND WAIT FOR IT
         LH    R3,PDSBLKSI              R3 HAS REQUESTED BYTES
         L     R2,PDSDECB+16            R2 POINTS TO THE IOB
         LH    R2,14(0,R2)              R2 HAS RESIDUAL BYTE COUNT
         SR    R3,R2                    R3 HAS BYTES READ
         STH   R3,PDSBYTES              SAVE IT FOR OTHER PROCEDURE
         BAL   RBAL,PSCAN               PERFORM SCAN
         CLC   RETCDE,F0                IF SCAN IS BAD
         BNE   RPRET04                    GO TO HIGH RETURN
         B     RPREAD                   LOOP BACK UP
*
RPEOF    B     RPEND
*
RPRET04  LA    R15,X'04'                RETURN CODE TO R15
         ST    R15,RETCDE               SAVE IT
         B     RPEND                    BRANCH TO ENDING
*
RPEND    L     RBAL,RPRBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
*
         EJECT
**********************************************************************
***                                                                ***
***  LOCATE THE HELP MEMBER                                        ***
***                                                                ***
**********************************************************************
RHELP    ST    RBAL,RHRBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
RHFIND   MVC   HELNAME(8),PARMIN        INPUT NAME TO HELP NAME
         XC    HELTTRC(4),HELTTRC       CLEAR TTR AND C FIELDS
         FIND  HELDCB,HELNAME,D         POINT TO PDS MEMBER
         LTR   R15,R15                  IF MEMBER DOESN'T EXIST
         BNZ   RHEND                      GO TO ENDING
         OI    SWITCH0,X'04'            TURN ON PDS-MEMB FOUND SWITCH
*
         B     RHEND
*
RHRET04  LA    R15,X'04'                RETURN CODE TO R15
         ST    R15,RETCDE               SAVE IT
         B     RHEND                    BRANCH TO ENDING
*
RHEND    L     RBAL,RHRBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
*
         EJECT
**********************************************************************
***                                                                ***
***  SCAN INPUT LRECS FOR 'CATEGORY=name' OR 'CATEGORY = name'     ***
***  SCAN INPUT Lrecs FOR 'TEST DATASET = ' OR 'TEST DATASET='     ***
***                                                                ***
**********************************************************************
PSCAN    ST    RBAL,PSRBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
         LH    R2,PDSBYTES              R2 IS NUMBER OF BYTES READ
         SRA   R2,32                    R2-R3 SET UP FOR DIVIDE
         D     R2,=F'80'                R3 IS NUMBER OF INPUT RECORDS
         LTR   R3,R3                    IF INPUT RECORDS ARE ZERO
         BZ    PSEND                      BYPASS THIS PROCEDURE
         LTR   R2,R2                    R2 IS REMAINDER (SHOULD BE 0)
         BNZ   PSRET04                    IF NOT, HIGH RETURN
*
         LA    R2,PDSBLOCK              R2 POINTS TO PDSP BLOCK
         S     R2,=F'80'                R2 POINTS TO -1 RECORD
PSLOOP1  LA    R2,80(0,R2)              R2 POINTS TO NEXT RECORD
         CLC   0(2,R2),=CL2'/*'         IF NOT A COMMENT
         BNE   PSLOOP1N                   GO TO END OF LOOP
*
         LA    R4,1(0,R2)               R4 POINTS JUST BEFORE TEXT
         LA    R1,60                    R1 IS COUNTER FOR SCAN
PSLOOP2  LA    R4,1(0,R4)               R4 POINTS TO NEXT CHARACTER
         CLC   0(9,R4),=CL9'CATEGORY='  IF IT IS 'CATEGORY='
         BNE   PSLOOP2N                   THEN
         MVC   PDSCAT(8),9(R4)              SAVE THE NEXT 8 CHARS
         OI    SWITCH0,X'40'                TURN ON CAT FOUND SWITCH
         B     *+8                          LEAVE THE LOOP
PSLOOP2N BCT   R1,PSLOOP2               ELSE LOOP BACK UP
*
         LA    R4,1(0,R2)               R4 POINTS JUST BEFORE TEXT
         LA    R1,54                    R1 IS COUNTER FOR SCAN
PSLOOP3  LA    R4,1(0,R4)               R4 POINTS TO NEXT CHARACTER
         CLC   0(15,R4),=CL15'TEST DATASET = '  IF LITERAL MATCHES
         BNE   PSLOOP3N                   THEN
         OI    SWITCH0,X'20'                TURN ON CAT FOUND SWITCH
         B     *+8                          LEAVE THE LOOP
PSLOOP3N BCT   R1,PSLOOP3               ELSE LOOP BACK UP
*
         LA    R4,1(0,R2)               R4 POINTS JUST BEFORE TEXT
         LA    R1,58                    R1 IS COUNTER FOR SCAN
PSLOOP4  LA    R4,1(0,R4)               R4 POINTS TO NEXT CHARACTER
         CLC   0(11,R4),=CL11'CATEGORY = '  IF IT IS 'CATEGORY = '
         BNE   PSLOOP4N                   THEN
         MVC   PDSCAT(8),11(R4)             SAVE THE NEXT 8 CHARS
         OI    SWITCH0,X'40'                TURN ON CAT FOUND SWITCH
         B     *+8                          LEAVE THE LOOP
PSLOOP4N BCT   R1,PSLOOP4               ELSE LOOP BACK UP
*
         LA    R4,1(0,R2)               R4 POINTS JUST BEFORE TEXT
         LA    R1,56                    R1 IS COUNTER FOR SCAN
PSLOOP5  LA    R4,1(0,R4)               R4 POINTS TO NEXT CHARACTER
         CLC   0(13,R4),=CL13'TEST DATASET='  IF LITERAL MATCHES
         BNE   PSLOOP5N                   THEN
         OI    SWITCH0,X'20'                TURN ON CAT FOUND SWITCH
         B     *+8                          LEAVE THE LOOP
PSLOOP5N BCT   R1,PSLOOP5               ELSE LOOP BACK UP
*
PSLOOP1N BCT   R3,PSLOOP1               IF MORE RECORDS, LOOP BACK UP
         B     PSEND                      ELSE GO TO END OF PROCEDURE
*
PSRET04  LA    R15,X'04'                RETURN CODE TO R15
         ST    R15,RETCDE               SAVE IT
         B     PSEND                    BRANCH TO ENDING
*
PSEND    L     RBAL,PSRBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
*
         EJECT
**********************************************************************
***                                                                ***
***  READ THE HELP CATEGORY MEMBER                                 ***
***                                                                ***
**********************************************************************
RCAT     ST    RBAL,RCRBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
RCATCHK  TM    SWITCH0,X'40'            IF 'CATEGORY=' WAS NOT FOUND
         BNO   RCEND                      SKIP THIS PROCEDURE
*
         MVC   CATIN(8),BLANKS          CLEAR CATEGORY NAME FIELD
         LA    R3,8                     R3 IS COUNTER, MAX NAME LENGTH
         XR    R4,R4                    R4 WILL BE NAME LENGTH
         LA    R1,CATIN-1               R1 POINTS JUST BEFORE TGT NAME
         LA    R2,PDSCAT-1              R2 POINTS JUST BEFORE INPUT
RCLOOPA  LA    R1,1(0,R1)               R1 POINTS TO NEXT TGT CHAR
         LA    R2,1(0,R2)               R2 POINTS TO NEXT INPUT CHAR
         TRT   0(1,R2),TRTNAT           IF INPUT CHAR IS NOT NATIONAL
         BNZ   RCLOOPAN                   LEAVE THE LOOP
         MVC   0(1,R1),0(R2)            MOVE INPUT CHARACTER TO TARGET
         LA    R4,1(0,R4)               INCREASE NAME LENGTH BY 1
         BCT   R3,RCLOOPA               LOOP BACK UP
RCLOOPAN STH   R4,CATLEN                SAVE THE CATEGORY NAME LENGTH
         LTR   R4,R4                    IF LENGTH IS ZERO
         BE    RCEND                      GO TO ERROR ENDING
*
RCFIND   MVC   HELNAME(8),CATIN         SET NAME
         XC    HELTTRC(4),HELTTRC       CLEAR TTR AND C FIELDS
         FIND  HELDCB,HELNAME,D         POINT TO PDS MEMBER
         LTR   R15,R15                  IF MEMBER DOESN'T EXIST
         BNZ   RCEND                      GO TO ENDING
         OI    SWITCH0,X'10'            TURN ON CAT-MEMB FOUND SWITCH
*
RCREAD   TM    SWITCH0,X'08'            IF SCAN IS ALREADY COMPLETE
         BO    RCEND                      GO TO ENDING
         READ  HELDECB,SF,HELDCB,HELBLOCK,'S',MF=E   READ A BLOCK
         CHECK HELDECB                                 AND WAIT FOR IT
         LH    R3,HELBLKSI              R3 HAS REQUESTED BYTES
         L     R2,HELDECB+16            R2 POINTS TO THE IOB
         LH    R2,14(0,R2)              R2 HAS RESIDUAL BYTE COUNT
         SR    R3,R2                    R3 HAS BYTES READ
         STH   R3,HELBYTES              SAVE IT FOR OTHER PROCEDURE
         BAL   RBAL,CSCAN               PERFORM SCAN
         CLC   RETCDE,F0                IF SCAN IS BAD
         BNE   RCRET04                    GO TO HIGH RETURN
         B     RCREAD                   LOOP BACK UP
*
RCEOF    B     RCEND
*
RCRET04  LA    R15,X'04'                RETURN CODE TO R15
         ST    R15,RETCDE               SAVE IT
         B     RCEND                    BRANCH TO ENDING
*
RCEND    L     RBAL,RCRBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
*
         EJECT
**********************************************************************
***                                                                ***
***  SCAN CATEGORY ENTRY FOR CLIST NAME IN COLS 1-8                ***
***                                                                ***
**********************************************************************
CSCAN    ST    RBAL,CSRBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
         LH    R2,HELBYTES              R2 IS NUMBER OF BYTES READ
         SRA   R2,32                    R2-R3 SET UP FOR DIVIDE
         D     R2,=F'80'                R3 IS NUMBER OF INPUT RECORDS
         LTR   R3,R3                    IF INPUT RECORDS ARE ZERO
         BZ    CSEND                      BYPASS THIS PROCEDURE
         LTR   R2,R2                    R2 IS REMAINDER (SHOULD BE 0)
         BNZ   CSRET04                    IF NOT, HIGH RETURN
*
         LA    R2,HELBLOCK              R2 POINTS TO HELP BLOCK
         S     R2,=F'80'                R2 POINTS TO -1 RECORD
CSLOOP1  LA    R2,80(0,R2)              R2 POINTS TO NEXT RECORD
         CLI   0(R2),C'*'               IF A COMMENT
         BE    CSLOOP1N                   GO TO END OF LOOP
         CLI   0(R2),C')'               IF A CONTROL LINE
         BE    CSLOOP1N                   GO TO END OF LOOP
*
         CLC   0(8,R2),PARMIN           IF NAME IS NOT IN CC 1-8
         BNE   CSLOOP1N                   GO TO END OF LOOP
         OI    SWITCH0,X'08'            ELSE TURN ON CAT-TEXT FOUND
         B     CSEND                      AND LEAVE THIS PROCEDURE
*
CSLOOP1N BCT   R3,CSLOOP1               IF MORE RECORDS, LOOP BACK UP
         B     CSEND                      ELSE GO TO END OF PROCEDURE
*
CSRET04  LA    R15,X'04'                RETURN CODE TO R15
         ST    R15,RETCDE               SAVE IT
         B     CSEND                    BRANCH TO ENDING
*
CSEND    L     RBAL,CSRBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
*
         EJECT
**********************************************************************
***                                                                ***
***  WRITE ANY ERROR MESSAGES                                      ***
***                                                                ***
**********************************************************************
ERRORS   ST    RBAL,ERRBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
ERCHECK  TM    SWITCH0,B'11111100'      IF ANY ONE OF THESE IS NOT ON
         BNO   EROPEN                     PROCESS ERROR MESSAGES
         TM    SWITCH0,B'00000010'      ELSE IF ERROR FROM MAIN ROUTINE
         BO    EROPEN                     PROCESS ERROR MESSAGES
         B     EREND                    ELSE BYPASS THE WHOLE THING
*
EROPEN   MVC   SYSDCB(SYSDCBLN),SYSDCBD INITIALIZE SYSPRINT DCB
         MVC   OPENS(OPENSLN),OPENSL    INITIALIZE OPEN PARM LIST
         OPEN  (SYSDCB,(OUTPUT)),MF=(E,OPENS)  OPEN THE SYSPRINT FILE
*
ER01     TM    SWITCH0,X'01'            IF EXCEPTION SWITCH IS ON
         BNO   ER80                     AND
         TM    SWITCH0,B'11111100'      IF ANY ONE OF THESE IS NOT ON
         BO    ER80                       THEN                  GU00201
         TEXTBILD  AREA=SYSLINE,            BUILD                      X
               TEXT=(ERMSG01A,PARMLEN,ERMSG01B)   MESSAGE
         BAL   R3,ERWRTBLT                  WRITE BUILT MESSAGE
*
ER80     TM    SWITCH0,X'80'            IF SWITCH IS NOT ON
         BO    *+16                       THEN
         LA    R2,ERMSG80                   POINT TO ERROR MESSAGE
         BAL   R3,ERWRITE                   WRITE THE MESSAGE
         B     ER04                         SKIP MSG 20,40,10,08
*
ER20     TM    SWITCH0,X'20'            IF SWITCH IS NOT ON
         BO    *+12                       THEN
         LA    R2,ERMSG20                   POINT TO ERROR MESSAGE
         BAL   R3,ERWRITE                   WRITE THE MESSAGE
*
ER40     TM    SWITCH0,X'40'            IF SWITCH IS NOT ON
         BO    *+16                       THEN
         LA    R2,ERMSG40                   POINT TO ERROR MESSAGE
         BAL   R3,ERWRITE                   WRITE THE MESSAGE
         B     ER04                         SKIP MSG 10 AND 08
*
ER10     TM    SWITCH0,X'10'            IF SWITCH IS NOT ON
         BO    *+16                       THEN
         LA    R2,ERMSG10                   POINT TO ERROR MESSAGE
         BAL   R3,ERWRITE                   WRITE THE MESSAGE
         B     ER04                         SKIP MESSAGE 08
*
ER08     TM    SWITCH0,X'08'            IF SWITCH IS NOT ON
         BO    *+12                       THEN
         LA    R2,ERMSG08                   POINT TO ERROR MESSAGE
         BAL   R3,ERWRITE                   WRITE THE MESSAGE
*
ER04     TM    SWITCH0,X'04'            IF SWITCH IS NOT ON
         BO    *+12                       THEN
         LA    R2,ERMSG04                   POINT TO ERROR MESSAGE
         BAL   R3,ERWRITE                   WRITE THE MESSAGE
*
ER02     TM    SWITCH0,X'02'            IF SWITCH IS ON
         BNO   *+12                       THEN
         LA    R2,ERMSG02                   POINT TO ERROR MESSAGE
         BAL   R3,ERWRITE                   WRITE THE MESSAGE
*
ERCLOSE  MVC   CLOSS(CLOSSLN),CLOSSL    INITIALIZE CLOSE PARM LIST
         CLOSE (SYSDCB),MF=(E,CLOSS)    CLOSE THE SYSPRINT FILE
*
ERRET04  LA    R15,04                   IF PROPOSED COMPLETION CODE
         C     R15,COMPCODE               IS GREATER THAN STORED CODE
         BNH   *+8                          THEN
         ST    R15,COMPCODE                   STORE THE PROPOSED CODE
         B     EREND                          BRANCH TO ENDING
*
ERWRITE  LH    R4,0(0,R2)               MESSAGE LENGTH TO R4
         BCTR  R4,0                       MINUS 1 FOR EXEC
         MVC   SYSLINE(133),BLANKS      CLEAR THE OUTPUT LINE
         B     *+10                     BRANCH AROUND THE MOVE
         MVC   SYSLINE(0),2(R2)           MOVE MESSAGE TO THE LINE
         EX    R4,*-6                   EXECUTE THE MOVE
ERWRTBLT PUT   SYSDCB,SYSLINE           WRITE THE LINE
         BR    R3                       RETURN
*
EREND    L     RBAL,ERRBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
*
         EJECT
***********************************************************************
***                                                                 ***
***      FIXED DATA AREA                                            ***
***                                                                 ***
***********************************************************************
F0       DC    F'0'                     CONSTANT
BLANKS   DC    CL133' '                 LITERAL
X00S     DC    XL40'00'                 LITERAL
*
         LTORG
*
HELDCBD  DCB   DDNAME=HELP,DSORG=PO,MACRF=R,EODAD=RCEOF
PDSDCBD  DCB   DDNAME=PDS,DSORG=PO,MACRF=R,EODAD=RPEOF
SYSDCBD  DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,                      X
               RECFM=FBA,LRECL=133,BLKSIZE=6118
EXDCBD   DCB   DDNAME=X,DSORG=PS,MACRF=GM,EODAD=EXEOF
*
         READ  HELDECBD,SF,MF=L         DECB
         READ  PDSDECBD,SF,MF=L         DECB
*
OPENLD   OPEN  (,,,),MF=L               OPEN PARM LIST
CLOSD    CLOSE (,,),MF=L                CLOSE PARM LIST
OPENSL   OPEN  (,),MF=L                 SYSPRINT OPEN PARM LIST
CLOSSL   CLOSE (),MF=L                  SYSPRINT CLOSE PARM LIST
OPENED   OPEN  (,),MF=L                 EXCEPTION OPEN PARM LIST
CLOSED   CLOSE (),MF=L                  EXCEPTION CLOSE PARM LIST
*
EXD      GTEDADAT  DSNAM=SYS1.GTEU.EXCEPTNS,                           X
               RTDDN=X,STATS=SHR
*
         EJECT
*                      ....+....1....+....2....+....3....+....4....+...x
               .5....+....6....+....7....+....8
ERMSG80  DC    H'26',C' Did not find CLIST member'
ERMSG40  DC    H'68',C' CLIST comments did not contain ''CATEGORY=name'x
               ' or ''CATEGORY = name'''
ERMSG20  DC    H'68',C' CLIST comments did not contain ''TEST DATASET='X
               ' or ''TEST DATASET = '''
ERMSG10  DC    H'27',C' Did not find HELP category'
ERMSG08  DC    H'46',C' HELP category doesn''t contain entry for CLIST'
ERMSG04  DC    H'25',C' Did not find HELP member'
ERMSG02  DC    H'44',C' Error in input name or CLIST/HELP blocksize'
ERMSG01A DC    H'11',C' ** Note:  '
ERMSG01B DC    H'40',C' is an exception to CLIST/HELP standards'
*                      ....+....1....+....2....+....3....+....4....+...
         EJECT
*                TRT TABLE FOR NATIONAL CHARACTERS
TRTNAT   DS 0D   0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F
         DC XL1'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11' 0
         DC XL1'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11' 1
         DC XL1'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11' 2
         DC XL1'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11' 3
         DC XL1'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11' 4
         DC XL1'11,11,11,11,11,11,11,11,11,11,11,00,11,11,11,11' 5
         DC XL1'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11' 6
         DC XL1'11,11,11,11,11,11,11,11,11,11,11,00,00,11,11,11' 7
         DC XL1'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11' 8
         DC XL1'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11' 9
         DC XL1'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11' A
         DC XL1'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11' B
         DC XL1'11,00,00,00,00,00,00,00,00,00,11,11,11,11,11,11' C
         DC XL1'11,00,00,00,00,00,00,00,00,00,11,11,11,11,11,11' D
         DC XL1'11,11,00,00,00,00,00,00,00,00,11,11,11,11,11,11' E
         DC XL1'00,00,00,00,00,00,00,00,00,00,11,11,11,11,11,11' F
         EJECT
***********************************************************************
***                                                                 ***
***      DSECT FOR MY SAVE AREA AND VARIABLES.                      ***
***                                                                 ***
***********************************************************************
WORKD    DSECT
MYSAVE   DS    18F                      MY REGISTER SAVE AREA
COMPCODE DS    F                        PROGRAM COMPLETION CODE
RETCDE   DS    F                        INTERNAL RETURN CODE
R1SAVE   DS    F                        INITIAL VALUE IN R1
*
SWITCH0  DS    B'00000000'              SWITCH AREA
*                1.......               X'80' - PDS-MEMBER FOUND
*                .1......               X'40' - FOUND 'CATEGORY=' TEXT
*                ..1.....               X'20' - FOUND 'TEST DATASET = '
*                ...1....               X'10' - CATEGORY-MEMBER FOUND
*                ....1...               X'08' - CAT-TEXT FOUND
*                .....1..               X'04' - HELP-MEMBER FOUND
*                ......1.               X'02' - BAD PARM OR BLOCKSIZE
*                .......1               X'01' - NAME ON EXCEPTION LIST
*
PARBALSV DS    F                        RETURN ADDRESS SAVE AREA
EXRBALSV DS    F                        RETURN ADDRESS SAVE AREA
OPRBALSV DS    F                        RETURN ADDRESS SAVE AREA
CLRBALSV DS    F                        RETURN ADDRESS SAVE AREA
RPRBALSV DS    F                        RETURN ADDRESS SAVE AREA
RHRBALSV DS    F                        RETURN ADDRESS SAVE AREA
PSRBALSV DS    F                        RETURN ADDRESS SAVE AREA
RCRBALSV DS    F                        RETURN ADDRESS SAVE AREA
CSRBALSV DS    F                        RETURN ADDRESS SAVE AREA
ERRBALSV DS    F                        RETURN ADDRESS SAVE AREA
*
PARMLEN  DS    H                        LENGTH OF INPUT PARM
PARMIN   DS    CL8                      INPUT PARM
CATLEN   DS    H                        LENGTH OF CATEGORY NAME
CATIN    DS    CL8                      CATEGORY NAME
*
PDSCAT   DS    CL8                      CATEGORY FROM HELP ENTRY
PDSBYTES DS    H                        NUMBER OF BYTES READ FROM CLIST
HELBYTES DS    H                        NUMBER OF BYTES READ FROM HELP
*
HELDCB   DCB   DDNAME=HELP,DSORG=PO,MACRF=R,EODAD=RCEOF
HELDCBLN EQU   *-HELDCB
PDSDCB   DCB   DDNAME=PDS,DSORG=PO,MACRF=R,EODAD=RPEOF
PDSDCBLN EQU   *-PDSDCB
SYSDCB   DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,                      X
               RECFM=FBA,LRECL=133,BLKSIZE=6118
SYSDCBLN EQU   *-SYSDCB
EXDCB    DCB   DDNAME=X,DSORG=PS,MACRF=GM,EODAD=EXEOF
EXDCBLN  EQU   *-EXDCB
*
SYSLINE  DS    CL133                    SYSPRINT OUTPUT LINE
*
HELBLKSI DS    H                        BLOCKSIZE OF HELP
HELBUFAD DS    A                        BUFFER ADDRESS FOR HELP
PDSBLKSI DS    H                        BLOCKSIZE OF CLIST
PDSBUFAD DS    A                        BUFFER ADDRESS FOR CLIST
*
HELENTRY DS    0D                       DIRECTORY ENTRY FOR FIND
HELNAME  DS    CL8                        NAME
HELTTRC  DS    XL3,XL1                    TTR AND C FIELDS
*
PDSENTRY DS    0D                       DIRECTORY ENTRY FOR FIND
PDSNAME  DS    CL8                        NAME
PDSTTRC  DS    XL3,XL1                    TTR AND C FIELDS
*
         READ  HELDECB,SF,MF=L          DECB
HELDECBL EQU   *-HELDECB
         READ  PDSDECB,SF,MF=L          DECB
PDSDECBL EQU   *-PDSDECB
*
OPENL    OPEN  (,,,),MF=L               OPEN PARM LIST
OPENLLN  EQU   *-OPENL
CLOSL    CLOSE (,,),MF=L                CLOSE PARM LIST
CLOSLLN  EQU   *-CLOSL
*
OPENS    OPEN  (,),MF=L                 SYSPRINT OPEN PARM LIST
OPENSLN  EQU   *-OPENS
CLOSS    CLOSE (),MF=L                  SYSPRINT CLOSE PARM LIST
CLOSSLN  EQU   *-CLOSS
*
OPENEL   OPEN  (,),MF=L                 EXCEPTION OPEN PARM LIST
OPENELN  EQU   *-OPENEL
CLOSEL   CLOSE (),MF=L                  EXCEPTION CLOSE PARM LIST
CLOSELN  EQU   *-CLOSEL
*
EXINREC  DS    CL80                     EXCEPTION INPUT RECORD
*
EX       GTEDADAT  DSNAM=SYS1.GTEU.EXCEPTNS,                           X
               RTDDN=X,STATS=SHR,MAP=ONLY
*
         DS    0D
WORKDLEN EQU   *-WORKD
*
         EJECT
***********************************************************************
***                                                                 ***
***      MAPPING DSECTS                                             ***
***                                                                 ***
***********************************************************************
         IHADCB DSORG=PO,DEVD=DA        DCB
*
         IEFZB4D0                          SVC-99 CONTROL BLOCKS
         IKJEFFDF DFDSECT=YES,DFDSEC2=YES  IKJEFF18 CONTROL BLOCKS
*
HELBLOCK DSECT
         DS     CL1                     INPUT HELP BLOCK
*
PDSBLOCK DSECT
         DS     CL1                     INPUT CLIST BLOCK
*
         EJECT
***********************************************************************
***                                                                 ***
***      REGISTER EQUATES                                           ***
***                                                                 ***
***********************************************************************
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*
         END
