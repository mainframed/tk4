         /*Copyright 11 Oct 1999 by JBG REXX ShowDP                  */
         /*----------------------------------------------------------*/
         /* Syntax: ShowDP                                           */
         /*----------------------------------------------------------*/
         /* JBG  11.10.1999 BERNING Works under OS/390 1.3, ISPF 4.4,*/
         /* JBG  11.10.1999 BERNING JES2 1.3 & SDSF 1.6.             */
         /* JBG  12.10.1999 BERNING If SDSF is under RACF-Security   */
         /* JBG  12.10.1999 BERNING Read-Access is required for      */
         /* JBG  12.10.1999 BERNING GROUP.<Your Group>.*             */
         /* JBG  12.10.1999 BERNING Use the SDSF-Who-Command to get  */
         /* JBG  12.10.1999 BERNING <GRPNAME=<Your Group>>           */
         /* JBG  12.10.1999 BERNING joerg.berning(at)gmx.net or      */
         /* JBG  12.10.1999 BERNING joerg_berning(at)de.sonymusic.com*/
         /*----------------------------------------------------------*/
         trace off
         /*----------------------------------------------------------*/
         /* JBG  12.10.1999 BERNING Alter input if necessary         */
         /*----------------------------------------------------------*/
         myIPSInputDataset = "SYS1.PARMLIB(IEAIPS00)"
         /*----------------------------------------------------------*/
         /* JBG  12.10.1999 BERNING Get a list of all AddressSpaces  */
         /*----------------------------------------------------------*/
         "alloc f(isfout) recfm(v b) lrecl(255) new unit(vio)",
           "delete cylinders space(1,1) reuse dsorg(PS)"
         "alloc f(isfin) recfm(f b) lrecl(80) new unit(vio)",
           "delete cylinders space(1,1) reuse dsorg(PS)"
         "dropbuf"
         queue "PRE *"
         queue "DA"
         queue "SORT PGN A JOBNAME A"
         queue "++ALL"
         queue ""
         "execio * diskW isfin(fini"
         address linkmvs "SDSF"
         if rc <> 0 then
           do
             "execio * diskR isfout(fini"
             do queued()
               parse pull line
               say line
             end /* of do queued */
             "free f(isfout isfin)"
             exit 12
           end /* of if */
         "execio * diskR isfout(fini stem myTemp."
         "free f(isfout isfin)"
         /*----------------------------------------------------------*/
         /* JBG  12.10.1999 BERNING We're only interested in the     */
         /* JBG  12.10.1999 BERNING sorted AddressSpaces at the end  */
         /* JBG  12.10.1999 BERNING of the SDSF-Output starting with */
         /* JBG  12.10.1999 BERNING *MASTER*.                        */
         /*----------------------------------------------------------*/
         do i = myTemp.0 to 1 by -1
           if myTemp.i <> "" then
             if pos("*MASTER*",myTemp.i) <> 0 then
               leave
         end /* of do i */
         /*----------------------------------------------------------*/
         /* JBG  12.10.1999 BERNING Getting rid of headers...        */
         /*----------------------------------------------------------*/
         mySDSFWantedCounter = 0
         do j = i to myTemp.0
           mySubword = subword(myTemp.j,1,1)
           if mySubword <> "COMMAND" & mySubword <> "1" &,
               mySubword <> "NP" & mySubword <> copies("00"x,122) then
             do
               mySDSFWantedCounter = mySDSFWantedCounter +1
               mySDSFWanted.mySDSFWantedCounter = myTemp.j
             end /* of do */
         end /* of do i */
         "alloc f(in) da('"myIPSInputDataset"') shr reuse"
         "execio * diskR in(fini stem myIPS."
         "free f(in)"
         /*----------------------------------------------------------*/
         /* JBG  12.10.1999 BERNING Get dispatching algorithm and    */
         /* JBG  12.10.1999 BERNING priority of all initiators and   */
         /* JBG  12.10.1999 BERNING all other privileged jobs as     */
         /* JBG  12.10.1999 BERNING specified in the program         */
         /* JBG  12.10.1999 BERNING properties table and associated  */
         /* JBG  12.10.1999 BERNING with performance group 0         */
         /*----------------------------------------------------------*/
         do i = 1 to myIPS.0
           parse var myIPS.i myPVLDP "=" myPrivDP dummy
           if myPVLDP = "PVLDP" then
             leave
         end /* of do i */
         /*----------------------------------------------------------*/
         /* JBG  12.10.1999 BERNING Assigning for each currently     */
         /* JBG  12.10.1999 BERNING active address space a           */
         /* JBG  12.10.1999 BERNING dispatching priority.            */
         /*----------------------------------------------------------*/
         "dropbuf"
         mySDSFWanted.0 = mySDSFWantedCounter
         do i = 1 to mySDSFWanted.0
           parse value mySDSFWanted.i with  8 myJobName,
                                           16 dummy,
                                           63 myActPgn,
                                           65 dummy,
                                          129 myActDmn,
                                          130 dummy
         /*----------------------------------------------------------*/
         /* JBG  12.10.1999 BERNING The master scheduler's address   */
         /* JBG  12.10.1999 BERNING is always assigned the highest   */
         /* JBG  12.10.1999 BERNING priority (x'FF') regardless of   */
         /* JBG  12.10.1999 BERNING the PVLDP value. Instead of FF   */
         /* JBG  12.10.1999 BERNING F99 is used because of sorting   */
         /* JBG  12.10.1999 BERNING *MASTER* to the top of the list. */
         /*----------------------------------------------------------*/
           if myActPgn = 0 then
             do
               if myJobname = "*MASTER*" then
                 myIPSDP = "F99"
               else
                 myIPSDP = myPrivDp
               queue " "myJobName,
                 left(myActPgn,7),
                 left(myIPSDP,6),
                 left("--(0)PvlDp",10),
                 myActDmn
               iterate
             end /* of do */
           do j = 1 to myIPS.0
             parse var myIPS.j myIPSPgnString "=" myIPSPgn,
               ",(DMN=" myIPSDmn ",DP=" myIPSDP ")" dummy
             if myIPSPgnString = "PGN" &,
                 myIPSPgn = myActPgn then
               queue " "myJobName,
                 left(myActPgn,7),
                 left(myIPSDP,6),
                 left(myIPSDmn,10),
                 myActDmn
           end /* of do j */
         end /* of do i */
         /*----------------------------------------------------------*/
         /* JBG  12.10.1999 BERNING Dispatching priorities in        */
         /* JBG  12.10.1999 BERNING descending order...              */
         /*----------------------------------------------------------*/
         queue ""
         "alloc f(sortin) recfm(v b) lrecl(255) new unit(vio)",
           "delete cylinders space(1,1) reuse dsorg(PS)"
         "execio * diskW sortin(fini"
         "alloc f(sortout) recfm(v b) lrecl(255) new unit(vio)",
           "delete cylinders space(1,1) reuse dsorg(PS)"
         "alloc f(sysin) recfm(f b) lrecl(80) new unit(vio)",
           "delete cylinders space(1,1) reuse dsorg(PS)"
         "alloc f(sysout) recfm(v b) lrecl(255) new unit(vio)",
           "delete cylinders space(1,1) reuse dsorg(PS)"
         "dropbuf"
         queue " SORT FIELDS=(24,2,CH,D)"
         queue ""
         "execio * diskW sysin(fini"
         address linkmvs "SORT"
         if rc <> 0 then
           do
             "execio * diskR sysout(fini"
             do queued()
               parse pull line
               say line
             end /* of do queued */
             "free f(sysout sysin sortin sortout)"
             exit 12
           end /* of if */
         "free f(sortin sysin sysout)"
         /*----------------------------------------------------------*/
         /* JBG  12.10.1999 BERNING Header & display                 */
         /*----------------------------------------------------------*/
         "dropbuf"
         myDate = date("S")
         parse value myDate with myYY 5 myMM 7 myDD
         myDate = myDD"."myMM"."myYY
         queue " Jobname ",
           left("Act_PGN",7),
           left("IPS_DP",6),
           "IPS_Domain",
           "Act_Domain("myDate"," time()")"
         "execio * diskR sortout(fini"
         "free f(sortout)"
         myFi = "F"××time(s)
         "alloc f("myFi") recfm(v b) lrecl(255) new unit(vio)",
           "delete cylinders space(1,1) reuse dsorg(PS) "
         queue ""
         "execio * diskW "myFi"(fini"
         address ispexec
         "LMINIT DATAID(MYDATAID) DDNAME("myFi")"
         "EDIT DATAID("myDataID") MACRO(MACRORES)"
         "LMFREE DATAID("myDataID")"
         address tso
         "free f("myFi")"
