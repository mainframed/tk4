         /*Copyright 6 Aug 1998 by AL13429 REXX ListVTOC             */
         /*----------------------------------------------------------*/
         /* Syntax: ListVTOC <Volser>                                */
         /*----------------------------------------------------------*/
         /* 31.08.1999 UNIT(VIO) for temp-DS added.                  */
         /* 17.08.1999 Really get rid of "SYSTEMS SUPPORT UTILITIES--*/
         /* 17.08.1999 -IEHLIST"-line.                               */
         /* 15.03.1999 Fewer typos, thanks to Sam Golob =)           */
         /* 10.03.1999 Alternate-Tracks-Support added.               */
         /* 22.01.1999 Cyl-0-Support added.                          */
         /* 20.01.1999 Check for VTOC-Index.                         */
         /* 14.01.1999 List of all free extents at the bottom.       */
         /* 14.01.1999 Support for DeviceTypes <> 3390 added.        */
         /* 14.01.1999 I have to use INDEXDSN=SYS1.VTOCIX.<volser> to*/
         /* 14.01.1999 get the maximum amount of cylinders on that   */
         /* 14.01.1999 DASD. The drawback: slightly higher elapse    */
         /* 14.01.1999 time. CPU, too ;>                             */
         /* This Exec uses IEHLIST to produce a readable ListVTOC.   */
         /* A similar function is in Serena's StarTools VMap-Command.*/
         /* ... is used with OS/390 2.4, TSO 2.6, DFSMS 1.4, ISPF 4.4*/
         /* also used with OS/390 1.3, TSO 2.5, DFSMS 1.3, ISPF 4.4  */
         /* The author can be reached at joerg.berning(at)gmx.net    */
         /*----------------------------------------------------------*/
         trace off
         arg myVolser
         if myVolser = "" then
           do
             zErrSM = "Volser×"
             zErrLM = "Syntax: ListVTOC <Volser>"
             zErrAlrm = "YES"
             zErrHM = "ISR2MACR"
             address ispexec
             "VPUT (ZERRSM ZERRLM ZERRALRM ZERRHM)"
             "SETMSG MSG(ISRZ002)"
             exit 12
           end
         "alloc f(sysprint) recfm(f b a) lrecl(121) new unit(vio)",
           "delete cylinders space(1,1) reuse dsorg(PS)"
         "alloc f(sysin) recfm(f b) lrecl(80) new unit(vio)",
           "delete cylinders space(1,1) reuse dsorg(PS)"
         /*----------------------------------------------------------*/
         /* For simulating the JCL-Allocation                        */
         /* //MYVTOC   DD  DISP=SHR,UNIT=3390,VOL=SER=<myVolser>     */
         /* via TSO ALLOC the following alloc statement is used:     */
         /*----------------------------------------------------------*/
         myCheckDSN = "SYS1.VTOCIX."myVolser
         rc = listdsi("'"myCheckDSN"' volume("myVolser")")
         if rc <> 0 then
           do
             if sysreason = 22 then
               myExplanation = "Volume "myVolser" not mounted."
             else
               myExplanation = ""
             zErrSM = "Volser×"
             zErrLM = "Couldn't find "myCheckDSN" on Volume",
               myVolser"." myExplanation
             zErrAlrm = "YES"
             zErrHM = "ISR2MACR"
             address ispexec
             "VPUT (ZERRSM ZERRLM ZERRALRM ZERRHM)"
             "SETMSG MSG(ISRZ002)"
             exit 12
           end /* of if */
         "alloc f(myVTOC) da('"myCheckDSN"') volume("myVolser") shr",
           "unit("sysunit")"
         queue " LISTVTOC FORMAT,VOL="sysunit"="myVolser","××,
           "INDEXDSN=SYS1.VTOCIX."myVolser
         "execio 1 diskW sysin(fini"
         address linkmvs "IEHLIST"
         if rc <> 0 then
           do
             "execio * diskR sysprint(fini"
             do queued()
               parse pull line
               say line
             end /* of do queued */
             "free f(sysprint sysin)"
             exit 12
           end /* of if */
         "dropbuf"
         "execio * diskR sysprint(fini stem myTemp."
         "free f(sysprint sysin myVTOC)"
         j = 0
         do i = 1 to myTemp.0
           if pos("SYSTEMS SUPPORT UTILITIES---IEHLIST",myTemp.i) = 0 th
             do
               j = j +1
               myLine.j = myTemp.i
             end /* of do */
         end /* of do i */
         myLine.0 = j
         myFirstRow = "---------------DATA SET NAME----------------"
         myFirstRowLength = length(myFirstRow)
         myExtentLineCounter = 1
         do i = 1 to myLine.0
           if substr(myLine.i,96,11) = "VTOC EXTENT" then
             do
               j = i +2
               myVTOCExtent = substr(myLine.j,92,18)
               parse value myVTOCExtent with myVTOCCylFrom,
                 myVTOCTrackFrom myVTOCCylTo myVTOCTrackTo
/* Insert an entry for Cyl-0/Track-0                                 */
               myExtentLow.myExtentLineCounter = 0
               myExtentHigh.myExtentLineCounter = 0
               myDSN.myExtentLineCounter = "+IPLText?+"
               myExtentLineCounter = myExtentLineCounter +1
/* Insert an entry for the VTOC                                      */
               myExtentLow.myExtentLineCounter =,
                 myVTOCCylFrom *15 + myVTOCTrackFrom
               myExtentHigh.myExtentLineCounter =,
                 myVTOCCylTo *15 + myVTOCTrackTo
               myDSN.myExtentLineCounter = "+VTOC Extent+"
               myExtentLineCounter = myExtentLineCounter +1
/* If available, insert an entry for alternate Tracks                */
               myAltTracks = substr(myLine.j,48,20)
               parse value myAltTracks with my#OfAltTracks,
                 myAltCylFrom myAltTrackFrom
               if my#OfAltTracks <> 0 then
                 do
                   myExtentLow.myExtentLineCounter =,
                     myAltCylFrom *15 + myAltTrackFrom
                   myExtentHigh.myExtentLineCounter =,
                     myAltCylFrom *15 + myAltTrackFrom,
                     +my#OfAltTracks -1
                   myDSN.myExtentLineCounter = "+Alternate Tracks+"
                   myExtentLineCounter = myExtentLineCounter +1
                 end /* of if */
             end /* of if */
           if substr(myLine.i,2,17) = "VTOC MAP OF DSCBS" then
             do
               j = i -1
               myMaxTracks = (substr(myLine.j,2,8) +1)
               myMaxTracks = myMaxTracks *15
             end /* of if */
           if substr(myLine.i,2,myFirstRowLength) = myFirstRow then
             do
               myRowPointer = i +1
               myDSN = subword(myLine.myRowPointer,1,1)
               myRowPointer = i +5
               do forever
                 myCylinder = substr(myLine.myRowPointer,26,6)
                 if myCylinder = "" then
                   leave
                 myTrack = substr(myLine.myRowPointer,33,2)
                 myExtentLow.myExtentLineCounter =,
                   myCylinder *15 + myTrack
                 myCylinder = substr(myLine.myRowPointer,38,6)
                 myTrack = substr(myLine.myRowPointer,45,2)
                 myExtentHigh.myExtentLineCounter =,
                   myCylinder *15 + myTrack
                 myDSN.myExtentLineCounter = myDSN
                 myExtentLineCounter = myExtentLineCounter +1
                 /* */
                 myCylinder = substr(myLine.myRowPointer,54,6)
                 if myCylinder = "" then
                   leave
                 myTrack = substr(myLine.myRowPointer,61,2)
                 myExtentLow.myExtentLineCounter =,
                   myCylinder *15 + myTrack
                 myCylinder = substr(myLine.myRowPointer,66,6)
                 myTrack = substr(myLine.myRowPointer,73,2)
                 myExtentHigh.myExtentLineCounter =,
                   myCylinder *15 + myTrack
                 myDSN.myExtentLineCounter = myDSN
                 myExtentLineCounter = myExtentLineCounter +1
                 /* */
                 myCylinder = substr(myLine.myRowPointer,82,6)
                 if myCylinder = "" then
                   leave
                 myTrack = substr(myLine.myRowPointer,89,2)
                 myExtentLow.myExtentLineCounter =,
                   myCylinder *15 + myTrack
                 myCylinder = substr(myLine.myRowPointer,94,6)
                 myTrack = substr(myLine.myRowPointer,101,2)
                 myExtentHigh.myExtentLineCounter =,
                   myCylinder *15 + myTrack
                 myDSN.myExtentLineCounter = myDSN
                 myExtentLineCounter = myExtentLineCounter +1
                 myRowPointer = myRowPointer +1
               end /* of do forever */
             end /* of if */
         end /* of do i */
         "dropbuf"
         parse value myVTOCExtent with myVTOCCylFrom,
           myVTOCTrackFrom myVTOCCylTo myVTOCTrackTo
         do i = 1 to myExtentLineCounter -1  /* -1 wegen inc am Ende */
           queue right(myExtentLow.i,6) right(myExtentHigh.i,6),
             myDSN.i
         end /* of do i */
         "alloc f(sortin) recfm(v b) lrecl(255) new unit(vio)",
           "delete cylinders space(15,15) reuse dsorg(PS)"
         queue ""
         "execio * diskW sortin(fini"
         "alloc f(sortout) recfm(v b) lrecl(255) new unit(vio)",
           "delete cylinders space(1,1) reuse dsorg(PS)"
         "alloc f(sysin) recfm(f b) lrecl(80) new unit(vio)",
           "delete cylinders space(1,1) reuse dsorg(PS)"
         "alloc f(sysout) recfm(v b) lrecl(255) new unit(vio)",
           "delete cylinders space(1,1) reuse dsorg(PS)"
         "dropbuf"
         queue " SORT FIELDS=(5,6,CH,A)"              /* +4 wegen VB */
         "execio 1 diskW sysin(fini"
         address linkmvs "SORT"
         "execio * diskR sortout(fini stem myLine."
         "free f(sortin sortout sysin sysout)"
         "dropbuf"
         queue "Track  Track  Cyl    Tr Cyl    Tr Tracks  Datasetname"
         queue "from   to     from   ac to     ac"
         myAllFreeTracks = ""
         do i = 1 to myLine.0
           parse var myLine.i myExtentLow myExtentHigh myDSN
           myExtentLowCyl = myExtentLow % 15
           myExtentLowTrack = myExtentLow // 15
           myExtentHighCyl = myExtentHigh % 15
           myExtentHighTrack = myExtentHigh // 15
           myUsedTracks = myExtentHigh - myExtentLow +1
           queue right(myExtentLow,6,"0"),
             right(myExtentHigh,6,"0"),
             right(myExtentLowCyl,6,"0"),
             right(myExtentLowTrack,2,"0"),
             right(myExtentHighCyl,6,"0"),
             right(myExtentHighTrack,2,"0"),
             right(myUsedTracks,7),
             myDSN
           j = i +1
           if j <= myLine.0 then
             parse var myLine.j myExtentLow2 myExtentHigh2 myDSN2
           else
             myExtentLow2 = myMaxTracks
           if myExtentLow2 -1 <> myExtentHigh then
             do
               myExtentLowCyl = (myExtentHigh +1) % 15
               myExtentLowTrack = (myExtentHigh +1) // 15
               myExtentHighCyl = (myExtentLow2 -1) % 15
               myExtentHighTrack = (myExtentLow2 -1) // 15
               myFreeTracks = myExtentLow2 - myExtentHigh -1
               myAllFreeTracks = myAllFreeTracks myFreeTracks
               queue right(myExtentHigh +1,6,"0"),
                 right(myExtentLow2 -1,6,"0"),
                 right(myExtentLowCyl,6,"0"),
                 right(myExtentLowTrack,2,"0"),
                 right(myExtentHighCyl,6,"0"),
                 right(myExtentHighTrack,2,"0"),
                 "*"right(myExtentLow2 - myExtentHigh -1,6),
                 "Free"
             end /* of if */
         end /* of do queued */
         my#OfFreeExtents = words(myAllFreeTracks)
         queue " "
         if my#OfFreeExtents = 1 then
           queue "One free extent(in Tracks) on volume "myVolser":"
         else
           queue my#OfFreeExtents "free extents(in Tracks) on volume",
             myVolser"."
         myLargestExtent = 0
         do i = 1 to my#OfFreeExtents
           myCurrentFreeTracks = word(myAllFreeTracks,i)
           if myLargestExtent < myCurrentFreeTracks then
             myLargestExtent = myCurrentFreeTracks
           queue right(myCurrentFreeTracks,6)
         end /* of do i */
         myFi = "F"××time("S")
         "alloc f("myFi") recfm(v b) lrecl(255) new unit(vio)",
           "delete cylinders space(1,1) reuse dsorg(PS) "
         queue ""
         "execio * diskW "myFi"(fini"
         address ispexec
         "LMINIT DATAID(MYDATAID) DDNAME("myFi")"
         select
           when my#OfFreeExtents = 0 then
             do
               zErrSM = "Full"
               zErrLM = "No free extents on volume "myVolser
             end /* of when */
           when my#OfFreeExtents = 1 then
             do
               zErrSM = "Largest Extent:"myLargestExtent
               zErrLM = my#OfFreeExtents "free extent on volume "myVolse
             end /* of when */
           otherwise
             do
               zErrSM = "Largest Extent:"myLargestExtent
               zErrLM = my#OfFreeExtents "free extents on volume "myVols
             end /* of when */
         end /* of select */
         zErrAlrm = "YES"
         zErrHM = "ISR2MACR"
         address ispexec
         "VPUT (ZERRSM ZERRLM ZERRALRM ZERRHM)"
         "SETMSG MSG(ISRZ002)"
         /*----------------------------------------------------------*/
         /* MacroRes includes:                                       */
         /* ISREDIT MACRO                                            */
         /* ISREDIT RESET                                            */
         /*----------------------------------------------------------*/
         "EDIT DATAID("myDataID") MACRO(MACRORES)"
         "LMFREE DATAID("myDataID")"
         address tso
         "free f("myFi")"
