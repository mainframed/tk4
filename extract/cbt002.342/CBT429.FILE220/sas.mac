./ ADD NAME=APFPDUP  0100-94267-94267-1200-00058-00058-00000-CONYERS
//MS01@APF JOB (MS01,228),'CONYERS - APFPDUP ',MSGCLASS=T,CLASS=A,
//         NOTIFY=MS01VC1,MSGLEVEL=(1,1),TIME=(,14)
//*********************************************************************
//*   THIS PROCEDURE SCANS AN APF LIBRARY CONTENTS DATA BASE AND
//*     PRODUCES VARIOUS ANALYSES USING THE SAS SOFTWARE PRODUCT
//*********************************************************************
//STEP01   EXEC SAS
//APFPGMS  DD DISP=SHR,DSN=MS01.CONYERS.APFPGMS.DATA.WORK
DATA APF  ;
  INFILE APFPGMS OBS=99999 ;      /* Limit control for testing */
  INPUT
        @2    APFLIB $CHAR44.
        @47   APFVOL $CHAR6.
        @55   APFPGM $CHAR8.
        @68   APFTTR $CHAR6.
        @81   APFIND $CHAR2.
        @90   APFAT1 $CHAR2.
        @93   APFAT2 $CHAR2.
        @101  APFSIZ $CHAR6.
        @113  APFMAJ $CHAR8.
        @125  APFACD $CHAR2.
        @134  APFDBK $CHAR4.
        @143  APFUDL $CHAR2.
        @150  APFBIX $CHAR3.   ;
  LABEL APFLIB = 'Library Name'
        APFVOL = 'VOLSER'
        APFPGM = 'Program Load Module Name'
        APFTTR = 'Program DASD TTR Address'
        APFIND = 'Program PDS2INDC Byte'
        APFAT1 = 'Program PDS2ATR1 Byte'
        APFAT2 = 'Program PDS2ATR2 Byte'
        APFSIZ = 'Program PDS2STOR Field (module size)'
        APFMAJ = 'Program Major Name if APFPGM is alias'
        APFACD = 'Program PDSAPFAC Byte (AC=00,01,40)'
        APFDBK = 'APFLIB Directory Block'
        APFUDL = 'Directory Entry User Data Length'
        APFBIX = 'Block Index to Next Directory Entry'      ;
  TITLE1 "APF Library Contents Analysis" ;
  PROC SORT NODUPS ;
    BY APFPGM APFLIB ;
  PROC FREQ ORDER=FREQ;
    TABLES APFPGM / OUT=SUMOUT NOPERCENT NOPRINT ;
    TITLE2 "Duplicate Program Names" ;
DATA FREQOUT ;
  SET SUMOUT ;
  IF COUNT > 1 ;
  PROC PRINT ;
    VAR APFPGM COUNT ;
    SUM COUNT ;
  PROC SORT ;
    BY APFPGM ;
DATA MATCHUP ;
  MERGE APF FREQOUT(IN=F) ;
  BY APFPGM ;
  IF F ;
  PROC PRINT ;
    VAR APFPGM APFSIZ APFACD APFMAJ APFLIB APFVOL ;
   BY APFPGM ;
./ ADD NAME=APFPGMS  0100-94267-94267-1200-00061-00061-00000-CONYERS
//MS01@APF JOB (MS01,228),'CONYERS - APFPGMS ',MSGCLASS=T,CLASS=A,
//         NOTIFY=MS01VC1,MSGLEVEL=(1,1),TIME=(,14)
//*********************************************************************
//*   THIS PROCEDURE SCANS AN APF LIBRARY CONTENTS DATA BASE AND
//*     PRODUCES VARIOUS ANALYSES USING THE SAS SOFTWARE PRODUCT
//*********************************************************************
//STEP01   EXEC SAS
//APFPGMS  DD DISP=SHR,DSN=MS01.CONYERS.APFPGMS.DATA.WORK
DATA APF  ;
  INFILE APFPGMS OBS=99999 ;      /* Limit control for testing */
  INPUT
        @2    APFLIB $CHAR44.
        @47   APFVOL $CHAR6.
        @55   APFPGM $CHAR8.
        @68   APFTTR $CHAR6.
        @81   APFIND $CHAR2.
        @90   APFAT1 $CHAR2.
        @93   APFAT2 $CHAR2.
        @101  APFSIZ $CHAR6.
        @113  APFMAJ $CHAR8.
        @125  APFACD $CHAR2.
        @134  APFDBK $CHAR4.
        @143  APFUDL $CHAR2.
        @150  APFBIX $CHAR3.   ;
  LABEL APFLIB = 'Library Name'
        APFVOL = 'VOLSER'
        APFPGM = 'Program Load Module Name'
        APFTTR = 'Program DASD TTR Address'
        APFIND = 'Program PDS2INDC Byte'
        APFAT1 = 'Program PDS2ATR1 Byte'
        APFAT2 = 'Program PDS2ATR2 Byte'
        APFSIZ = 'Program PDS2STOR Field (module size)'
        APFMAJ = 'Program Major Name if APFPGM is alias'
        APFACD = 'Program PDSAPFAC Byte (AC=00,01,40)'
        APFDBK = 'APFLIB Directory Block'
        APFUDL = 'Directory Entry User Data Length'
        APFBIX = 'Block Index to Next Directory Entry'      ;
  TITLE1 "APF Library Contents Analysis" ;
  PROC FREQ ;
    TABLES APFACD ;
    TITLE2 "Authorization (AC) Profile" ;
DATA ALIASES ;
  SET APF ;
  IF APFMAJ NE '        ' ;
  PROC SORT NODUPS ;
    BY APFPGM APFLIB ;
  PROC PRINT ;
    VAR APFPGM APFMAJ APFSIZ APFACD APFLIB APFVOL ;
    TITLE2 "Alias Report by Program Name (Alias)" ;
  PROC SORT NODUPS ;
    BY APFMAJ APFPGM APFLIB;
  PROC PRINT ;
    VAR APFMAJ APFPGM APFSIZ APFACD APFLIB APFVOL ;
    TITLE2 "Alias Report by Program Name (Major)" ;
DATA ALLPGMS ;
  SET APF ;
  PROC SORT NODUPS ;
    BY APFPGM APFLIB ;
  PROC PRINT ;
    VAR APFPGM APFMAJ APFSIZ APFACD APFLIB APFVOL ;
    TITLE2 "Detail Report by Program" ;
./ ADD NAME=ESRLIST  0100-94267-94267-1200-00046-00046-00000-CONYERS
//MS01@ESR JOB (MS01,228),'CONYERS - ESRLIST ',MSGCLASS=T,CLASS=A,
//         NOTIFY=MS01VC1,MSGLEVEL=(1,1),TIME=(,14)
//*********************************************************************
//*   THIS PROCEDURE SCANS AN ESR TABLE CONTENTS DATA BASE AND
//*     PRODUCES VARIOUS ANALYSES USING THE SAS SOFTWARE PRODUCT
//*********************************************************************
//STEP01   EXEC SAS
//ESRS     DD DISP=SHR,DSN=MS01.CONYERS.ESRS.DATA.WORK
DATA ESRLIST ;
  INFILE ESRS OBS=99999 ;     /* Limit control for testing */
  INPUT
        @2    ESRLIB  $CHAR44.
        @47   ESRNUM  $CHAR6.
        @59   SVCNUM  $CHAR6.
        @76   ESRTYPE $CHAR3.
        @80   ESREPA  $CHAR8.
        @89   ESRLOC  $CHAR5.
        @95   ESRSPEC $CHAR3.   ;
  LABEL ESRLIB  = 'Library Name'
        ESRNUM  = 'ESR Number'
        SVCNUM  = 'SVC Number'
        ESRTYPE = 'Type (1-4,6)'
        ESREPA  = 'Entry Address'
        ESRLOC  = 'Entry Location'
        ESRSPEC = 'Special (APF)'    ;
  TITLE1 "ESR Tables Contents Analysis" ;
 ********************************************************************;
 /* Generate a comment if location exception detected              */
  COMMENT = '                    ' ;
  IF ESRTYPE = '1  ' AND ESRLOC ^= 'NUC'
     THEN COMMENT = 'TYPE 1   NOT NUC' ;
  IF ESRTYPE = '2  ' AND ESRLOC ^= 'NUC'
     THEN COMMENT = 'TYPE 2   NOT NUC' ;
  IF ESRTYPE = '6  ' AND ESRLOC ^= 'NUC'
     THEN COMMENT = 'TYPE 6   NOT NUC' ;
  IF ESRTYPE = '3/4' AND (ESRLOC ^= 'PLPA' AND ESRLOC ^= 'EPLPA')
     THEN COMMENT = 'TYPE 3/4 NOT PLPA' ;
 ********************************************************************;
  PROC FREQ ;
    TABLES ESRTYPE ESRLOC ESRSPEC COMMENT ;
    TITLE2 "ESR Tables Entry Counts" ;
  PROC SORT NODUPS ;
    BY SVCNUM ESRNUM ;
  PROC PRINT ;
    VAR SVCNUM ESRNUM ESRSPEC ESRTYPE ESREPA ESRLOC COMMENT ;
    TITLE2 "Detail Report by ESR Table Entry" ;
./ ADD NAME=ESRMATCH 0100-94267-94267-1200-00129-00129-00000-CONYERS
//MS01@ESR JOB (MS01,228),'CONYERS - ESRMATCH',MSGCLASS=T,CLASS=A,
//         NOTIFY=MS01VC1,MSGLEVEL=(1,1),TIME=(,14)
//*********************************************************************
//*   THIS PROCEDURE SCANS AN ESR TABLE OUTPUT DATA BASE AND
//*     MATCHES ENTRY POINTS WITH LPAQ, PLPA, AND NUCMAP ENTRIES.
//*********************************************************************
//STEP01   EXEC SAS
//ESRS     DD DISP=SHR,DSN=MS01.CONYERS.ESRS.DATA.WORK
//LPAQMODS DD DISP=SHR,DSN=MS01.CONYERS.LPAQMODS.DATA.WORK
//PLPAMODS DD DISP=SHR,DSN=MS01.CONYERS.PLPAMODS.DATA.WORK
//NUCMAP   DD DISP=SHR,DSN=MS01.CONYERS.NUCMAP.DATA.WORK
  TITLE1 "ESR Table Contents Analysis" ;
DATA ESRLIST ;
  INFILE ESRS OBS=99999 ;     /* Limit control for testing */
  INPUT
        @2    ESRLIB  $CHAR44.
        @47   ESRNUM  $CHAR6.
        @59   SVCNUM  $CHAR6.
        @76   ESRTYPE $CHAR3.
        @80   ESREPA  $CHAR8.
        @89   ESRLOC  $CHAR5.
        @95   ESRSPEC $CHAR3.   ;
  LABEL ESRLIB  = 'Library Name'
        ESRNUM  = 'ESR Number'
        SVCNUM  = 'SVC Number'
        ESRTYPE = 'Type (1-4,6)'
        ESREPA  = 'Entry Address'
        ESRLOC  = 'Entry Location'
        ESRSPEC = 'Special (APF)'    ;
  EPADDR = SUBSTR(ESREPA,2,7) ;
  PROC SORT DATA=ESRLIST ; BY EPADDR ;
DATA LPAQ ;
  INFILE LPAQMODS OBS=99999 ;     /* Limit control for testing */
  INPUT
        @2    LPAQLIB $CHAR44.
        @47   LPAQSEQ $CHAR4.
        @52   LPAQPGM $CHAR8.
        @61   LPAQEPA $CHAR8.
        @70   LPAQLOC $CHAR5.
        @80   LPAQUSE $CHAR5.
        @89   LPAQACD $CHAR1.
        @101  LPAQMAJ $CHAR8.   ;
  LABEL LPAQLIB = 'Library Name'
        LPAQSEQ = 'LPAQ Sequence Number'
        LPAQPGM = 'Program Load Module Name'
        LPAQEPA = 'Program Entry Point Address'
        LPAQLOC = 'Program Location'
        LPAQUSE = 'Program Use Count'
        LPAQACD = 'Program AC Flag (AC=0,1)'
        LPAQMAJ = 'Program Major Name if LPAQPGM is alias' ;
  EPADDR = SUBSTR(LPAQEPA,2,7) ;
  PROC SORT DATA=LPAQ ; BY EPADDR ;
*********************************************************************;
DATA PLPA ;
  INFILE PLPAMODS OBS=99999 ;     /* Limit control for testing */
  INPUT
        @2   PLPALIB $CHAR44.
        @47  PLPASEQ $CHAR8.
        @56  PLPAPGM $CHAR8.
        @65  PLPAEPA $CHAR8.
        @74  PLPALOC $CHAR5.
        @85  PLPASIZ $CHAR8.
        @97  PLPAACD $CHAR1.
        @109 PLPAMAJ $CHAR8.   ;
  LABEL PLPALIB = 'Library Name'
        PLPASEQ = 'PLPA Sequence Number'
        PLPAPGM = 'Load Module Name'
        PLPAEPA = 'Entry Point Address'
        PLPALOC = 'Module Location'
        PLPASIZ = 'Module Size'
        PLPAACD = 'Authorization Code'
        PLPAMAJ = 'Major Name if PLPAPGM is Alias'   ;
  EPADDR = SUBSTR(PLPAEPA,2,7) ;
  PROC SORT DATA=PLPA ; BY EPADDR ;
*********************************************************************;
DATA NUCM ;
  INFILE NUCMAP OBS=99999 ;     /* Limit control for testing */
  INPUT
        @2    NUCMSEQ  $CHAR8.
        @11   NUCMEPN  $CHAR8.
        @20   NUCMEPA  $CHAR8.
        @31   NUCCSECT $CHAR1.
        @37   NUCRSECT $CHAR1.
        @42   NUCRMODE $CHAR3.
        @48   NUCAMODE $CHAR3.
        @53   NUCMLEN  $CHAR6.    ;
  LABEL NUCMSEQ  = 'NUCMAP Sequence'
        NUCMEPN  = 'Entry Name'
        NUCMEPA  = 'Entry Point Address'
        NUCCSECT = 'CSECT Flag'
        NUCRSECT = 'RSECT Flag'
        NUCRMODE = 'RMODE'
        NUCAMODE = 'AMODE'
        NUCMLEN  = 'Entry Length'        ;
  EPADDR = SUBSTR(NUCMEPA,2,7) ;
  PROC SORT DATA=NUCM ; BY EPADDR ;
*********************************************************************;
DATA ESR_ALL ;
  MERGE ESRLIST(IN=ESRLIST) LPAQ(IN=LPAQ) PLPA(IN=PLPA) NUCM(IN=NUCM);
    BY EPADDR ;
  IN_E=ESRLIST ; IN_L=LPAQ ; IN_P=PLPA ; IN_N=NUCM ; /* debug */
  IF ESRLIST ;
  PROC SORT DATA=ESR_ALL ; BY SVCNUM ESRNUM ;
  PROC PRINT ;
    VAR SVCNUM ESRNUM ESRTYPE ESREPA ESRLOC ESRSPEC
        LPAQPGM PLPAPGM NUCMEPN ;
    BY SVCNUM ;
    TITLE2 "ESRs Matched with LPAQ, PLPA, and NUCMAP" ;
*********************************************************************;
DATA ESR_ERR ;
  SET ESR_ALL ;
  IF IN_E AND NUCMEPN = 'IGXERROR' ;
  PROC SORT DATA=ESR_ERR ; BY SVCNUM ESRNUM ;
  PROC PRINT ;
    VAR SVCNUM ESRNUM ESRTYPE ESREPA ESRLOC ESRSPEC
        LPAQPGM PLPAPGM NUCMEPN ;
    TITLE2 "ESRs Matched with LPAQ, PLPA, and NUCMAP" ;
    TITLE3 "ESRs Pointing to Nucleus Error Routine" ;
*********************************************************************;
DATA ESR_MISS ;
  SET ESR_ALL ;
  IF IN_E
       AND NOT IN_L AND NOT IN_P AND NOT IN_N ;
  PROC SORT DATA=ESR_MISS ; BY SVCNUM ESRNUM ;
  PROC PRINT ;
    VAR SVCNUM ESRNUM ESRTYPE ESREPA ESRLOC ESRSPEC
        LPAQPGM PLPAPGM NUCMEPN ;
    TITLE2 "ESRs NOT Matched with LPAQ, PLPA, and NUCMAP" ;
    TITLE3 "Storage Residency Exceptions" ;
./ ADD NAME=LLTPDUP  0100-94267-94267-1200-00058-00058-00000-CONYERS
//MS01@LLT JOB (MS01,228),'CONYERS - LLTPDUP ',MSGCLASS=T,CLASS=A,
//         NOTIFY=MS01VC1,MSGLEVEL=(1,1),TIME=(,14)
//*********************************************************************
//*   THIS PROCEDURE SCANS A LINKLIST LIBRARY CONTENTS DATA BASE AND
//*     PRODUCES VARIOUS ANALYSES USING THE SAS SOFTWARE PRODUCT
//*********************************************************************
//STEP01   EXEC SAS
//LLTPGMS  DD DISP=SHR,DSN=MS01.CONYERS.LLTPGMS.DATA.WORK
DATA LLT  ;
  INFILE LLTPGMS OBS=99999 ;      /* Limit control for testing */
  INPUT
        @2    LLTLIB $CHAR44.
        @47   LLTSEQ $CHAR3.
        @52   LLTPGM $CHAR8.
        @65   LLTTTR $CHAR6.
        @78   LLTIND $CHAR2.
        @87   LLTAT1 $CHAR2.
        @90   LLTAT2 $CHAR2.
        @98   LLTSIZ $CHAR6.
        @110  LLTMAJ $CHAR8.
        @122  LLTACD $CHAR2.
        @131  LLTDBK $CHAR4.
        @140  LLTUDL $CHAR2.
        @147  LLTBIX $CHAR3.   ;
  LABEL LLTLIB = 'Library Name'
        LLTSEQ = 'LLT Sequence Number'
        LLTPGM = 'Program Load Module Name'
        LLTTTR = 'Program DASD TTR Address'
        LLTIND = 'Program PDS2INDC Byte'
        LLTAT1 = 'Program PDS2ATR1 Byte'
        LLTAT2 = 'Program PDS2ATR2 Byte'
        LLTSIZ = 'Program PDS2STOR Field (module size)'
        LLTMAJ = 'Program Major Name if LLTPGM is alias'
        LLTACD = 'Program PDSLLTAC Byte (AC=00,01,40)'
        LLTDBK = 'LLTLIB Directory Block'
        LLTUDL = 'Directory Entry User Data Length'
        LLTBIX = 'Block Index to Next Directory Entry'      ;
  TITLE1 "LLT Library Contents Analysis" ;
  PROC SORT NODUPS ;
    BY LLTPGM LLTSEQ LLTLIB ;
  PROC FREQ ORDER=FREQ;
    TABLES LLTPGM / OUT=SUMOUT NOPERCENT NOPRINT ;
    TITLE2 "Duplicate Program Names" ;
DATA FREQOUT ;
  SET SUMOUT ;
  IF COUNT > 1 ;
  PROC PRINT ;
    VAR LLTPGM COUNT ;
    SUM COUNT ;
  PROC SORT ;
    BY LLTPGM ;
DATA MATCHUP ;
  MERGE LLT FREQOUT(IN=F) ;
  BY LLTPGM ;
  IF F ;
  PROC PRINT ;
    VAR LLTPGM LLTSIZ LLTACD LLTMAJ LLTLIB LLTSEQ ;
   BY LLTPGM ;
./ ADD NAME=LLTPGMS  0100-94267-94267-1200-00061-00061-00000-CONYERS
//MS01@LLT JOB (MS01,228),'CONYERS - LLTPGMS ',MSGCLASS=T,CLASS=A,
//         NOTIFY=MS01VC1,MSGLEVEL=(1,1),TIME=(,14)
//*********************************************************************
//*   THIS PROCEDURE SCANS A LINKLIST LIBRARY CONTENTS DATA BASE AND
//*     PRODUCES VARIOUS ANALYSES USING THE SAS SOFTWARE PRODUCT
//*********************************************************************
//STEP01   EXEC SAS
//LLTPGMS  DD DISP=SHR,DSN=MS01.CONYERS.LLTPGMS.DATA.WORK
DATA LLT  ;
  INFILE LLTPGMS OBS=99999 ;      /* Limit control for testing */
  INPUT
        @2    LLTLIB $CHAR44.
        @47   LLTSEQ $CHAR3.
        @52   LLTPGM $CHAR8.
        @65   LLTTTR $CHAR6.
        @78   LLTIND $CHAR2.
        @87   LLTAT1 $CHAR2.
        @90   LLTAT2 $CHAR2.
        @98   LLTSIZ $CHAR6.
        @110  LLTMAJ $CHAR8.
        @122  LLTACD $CHAR2.
        @131  LLTDBK $CHAR4.
        @140  LLTUDL $CHAR2.
        @147  LLTBIX $CHAR3.   ;
  LABEL LLTLIB = 'Library Name'
        LLTSEQ = 'LLT Sequence Number'
        LLTPGM = 'Program Load Module Name'
        LLTTTR = 'Program DASD TTR Address'
        LLTIND = 'Program PDS2INDC Byte'
        LLTAT1 = 'Program PDS2ATR1 Byte'
        LLTAT2 = 'Program PDS2ATR2 Byte'
        LLTSIZ = 'Program PDS2STOR Field (module size)'
        LLTMAJ = 'Program Major Name if LLTPGM is alias'
        LLTACD = 'Program PDSLLTAC Byte (AC=00,01,40)'
        LLTDBK = 'LLTLIB Directory Block'
        LLTUDL = 'Directory Entry User Data Length'
        LLTBIX = 'Block Index to Next Directory Entry'      ;
  TITLE1 "LLT Library Contents Analysis" ;
  PROC FREQ ;
    TABLES LLTACD ;
    TITLE2 "Authorization (AC) Profile" ;
DATA ALIASES ;
  SET LLT ;
  IF LLTMAJ NE '        ' ;
  PROC SORT NODUPS ;
    BY LLTPGM LLTSEQ ;
  PROC PRINT ;
    VAR LLTPGM LLTMAJ LLTSIZ LLTACD LLTLIB LLTSEQ ;
    TITLE2 "Alias Report by Program Name (Alias)" ;
  PROC SORT NODUPS ;
    BY LLTMAJ LLTPGM LLTLIB;
  PROC PRINT ;
    VAR LLTMAJ LLTPGM LLTSIZ LLTACD LLTLIB LLTSEQ ;
    TITLE2 "Alias Report by Program Name (Major)" ;
DATA ALLPGMS ;
  SET LLT ;
  PROC SORT NODUPS ;
    BY LLTPGM LLTSEQ ;
  PROC PRINT ;
    VAR LLTPGM LLTMAJ LLTSIZ LLTACD LLTLIB LLTSEQ ;
    TITLE2 "Detail Report by Program" ;
./ ADD NAME=LPAPDUP  0100-94267-94267-1200-00058-00058-00000-CONYERS
//MS01@LPA JOB (MS01,228),'CONYERS - LPAPDUP ',MSGCLASS=T,CLASS=A,
//         NOTIFY=MS01VC1,MSGLEVEL=(1,1),TIME=(,14)
//*********************************************************************
//*   THIS PROCEDURE SCANS A LPAT LIBRARY CONTENTS DATA BASE AND
//*     PRODUCES VARIOUS ANALYSES USING THE SAS SOFTWARE PRODUCT
//*********************************************************************
//STEP01   EXEC SAS
//LPAPGMS  DD DISP=SHR,DSN=MS01.CONYERS.LPAPGMS.DATA.WORK
DATA LPA  ;
  INFILE LPAPGMS OBS=99999 ;      /* Limit control for testing */
  INPUT
        @2    LPALIB $CHAR44.
        @47   LPASEQ $CHAR3.
        @52   LPAPGM $CHAR8.
        @65   LPATTR $CHAR6.
        @78   LPAIND $CHAR2.
        @87   LPAAT1 $CHAR2.
        @90   LPAAT2 $CHAR2.
        @98   LPASIZ $CHAR6.
        @110  LPAMAJ $CHAR8.
        @122  LPAACD $CHAR2.
        @131  LPADBK $CHAR4.
        @140  LPAUDL $CHAR2.
        @147  LPABIX $CHAR3.   ;
  LABEL LPALIB = 'Library Name'
        LPASEQ = 'LPA Sequence Number'
        LPAPGM = 'Program Load Module Name'
        LPATTR = 'Program DASD TTR Address'
        LPAIND = 'Program PDS2INDC Byte'
        LPAAT1 = 'Program PDS2ATR1 Byte'
        LPAAT2 = 'Program PDS2ATR2 Byte'
        LPASIZ = 'Program PDS2STOR Field (module size)'
        LPAMAJ = 'Program Major Name if LPAPGM is alias'
        LPAACD = 'Program PDSLPAAC Byte (AC=00,01,40)'
        LPADBK = 'LPALIB Directory Block'
        LPAUDL = 'Directory Entry User Data Length'
        LPABIX = 'Block Index to Next Directory Entry'      ;
  TITLE1 "LPA Library Contents Analysis" ;
  PROC SORT NODUPS ;
    BY LPAPGM LPASEQ LPALIB ;
  PROC FREQ ORDER=FREQ;
    TABLES LPAPGM / OUT=SUMOUT NOPERCENT NOPRINT ;
    TITLE2 "Duplicate Program Names" ;
DATA FREQOUT ;
  SET SUMOUT ;
  IF COUNT > 1 ;
  PROC PRINT ;
    VAR LPAPGM COUNT ;
    SUM COUNT ;
  PROC SORT ;
    BY LPAPGM ;
DATA MATCHUP ;
  MERGE LPA FREQOUT(IN=F) ;
  BY LPAPGM ;
  IF F ;
  PROC PRINT ;
    VAR LPAPGM LPASIZ LPAACD LPAMAJ LPALIB LPASEQ ;
   BY LPAPGM ;
./ ADD NAME=LPAPGMS  0100-94267-94267-1200-00061-00061-00000-CONYERS
//MS01@LPA JOB (MS01,228),'CONYERS - LPAPGMS ',MSGCLASS=T,CLASS=A,
//         NOTIFY=MS01VC1,MSGLEVEL=(1,1),TIME=(,14)
//*********************************************************************
//*   THIS PROCEDURE SCANS A LPAT LIBRARY CONTENTS DATA BASE AND
//*     PRODUCES VARIOUS ANALYSES USING THE SAS SOFTWARE PRODUCT
//*********************************************************************
//STEP01   EXEC SAS
//LPAPGMS  DD DISP=SHR,DSN=MS01.CONYERS.LPAPGMS.DATA.WORK
DATA LPA  ;
  INFILE LPAPGMS OBS=99999 ;      /* Limit control for testing */
  INPUT
        @2    LPALIB $CHAR44.
        @47   LPASEQ $CHAR3.
        @52   LPAPGM $CHAR8.
        @65   LPATTR $CHAR6.
        @78   LPAIND $CHAR2.
        @87   LPAAT1 $CHAR2.
        @90   LPAAT2 $CHAR2.
        @98   LPASIZ $CHAR6.
        @110  LPAMAJ $CHAR8.
        @122  LPAACD $CHAR2.
        @131  LPADBK $CHAR4.
        @140  LPAUDL $CHAR2.
        @147  LPABIX $CHAR3.   ;
  LABEL LPALIB = 'Library Name'
        LPASEQ = 'LPA Sequence Number'
        LPAPGM = 'Program Load Module Name'
        LPATTR = 'Program DASD TTR Address'
        LPAIND = 'Program PDS2INDC Byte'
        LPAAT1 = 'Program PDS2ATR1 Byte'
        LPAAT2 = 'Program PDS2ATR2 Byte'
        LPASIZ = 'Program PDS2STOR Field (module size)'
        LPAMAJ = 'Program Major Name if LPAPGM is alias'
        LPAACD = 'Program PDSLPAAC Byte (AC=00,01,40)'
        LPADBK = 'LPALIB Directory Block'
        LPAUDL = 'Directory Entry User Data Length'
        LPABIX = 'Block Index to Next Directory Entry'      ;
  TITLE1 "LPA Library Contents Analysis" ;
  PROC FREQ ;
    TABLES LPAACD ;
    TITLE2 "Authorization (AC) Profile" ;
DATA ALIASES ;
  SET LPA ;
  IF LPAMAJ NE '        ' ;
  PROC SORT NODUPS ;
    BY LPAPGM LPASEQ ;
  PROC PRINT ;
    VAR LPAPGM LPAMAJ LPASIZ LPAACD LPALIB LPASEQ ;
    TITLE2 "Alias Report by Program Name (Alias)" ;
  PROC SORT NODUPS ;
    BY LPAMAJ LPAPGM LPALIB;
  PROC PRINT ;
    VAR LPAMAJ LPAPGM LPASIZ LPAACD LPALIB LPASEQ ;
    TITLE2 "Alias Report by Program Name (Major)" ;
DATA ALLPGMS ;
  SET LPA ;
  PROC SORT NODUPS ;
    BY LPAPGM LPASEQ ;
  PROC PRINT ;
    VAR LPAPGM LPAMAJ LPASIZ LPAACD LPALIB LPASEQ ;
    TITLE2 "Detail Report by Program" ;
./ ADD NAME=LPAQMODS 0100-94267-94267-1200-00089-00089-00000-CONYERS
//MS01@LPQ JOB (MS01,228),'CONYERS - LPAQMODS',MSGCLASS=T,CLASS=A,
//         NOTIFY=MS01VC1,MSGLEVEL=(1,1),TIME=(,14)
//*********************************************************************
//*   THIS PROCEDURE SCANS A LPAQ CDE CHAIN CONTENTS DATA BASE AND
//*     PRODUCES VARIOUS ANALYSES USING THE SAS SOFTWARE PRODUCT
//*********************************************************************
//STEP01   EXEC SAS
//LPAQMODS DD DISP=SHR,DSN=MS01.CONYERS.LPAQMODS.DATA.WORK
DATA LPAQ ;
  INFILE LPAQMODS OBS=99999 ;     /* Limit control for testing */
  INPUT
        @2    LPAQLIB $CHAR44.
        @47   LPAQSEQ $CHAR4.
        @52   LPAQPGM $CHAR8.
        @61   LPAQEPA $CHAR8.
        @70   LPAQLOC $CHAR5.
        @80   LPAQUSE $CHAR5.
        @89   LPAQACD $CHAR1.
        @101  LPAQMAJ $CHAR8.   ;
  LABEL LPAQLIB = 'Library Name'
        LPAQSEQ = 'LPAQ Sequence Number'
        LPAQPGM = 'Program Load Module Name'
        LPAQEPA = 'Program Entry Point Address'
        LPAQLOC = 'Program Location'
        LPAQUSE = 'Program Use Count'
        LPAQACD = 'Program AC Flag (AC=0,1)'
        LPAQMAJ = 'Program Major Name if LPAQPGM is alias' ;
  TITLE1 "LPAQ CDE Chain Contents Analysis" ;
 ********************************************************************;
  PROC SORT NODUPS ;
    BY LPAQLIB LPAQPGM ;
  PROC PRINT ;
    VAR LPAQPGM LPAQSEQ LPAQEPA LPAQLOC LPAQACD LPAQMAJ ;
    BY LPAQLIB ; PAGEBY LPAQLIB ;
    TITLE2 "Detail Report by Library" ;
  PROC SORT NODUPS ;
    BY LPAQLOC LPAQPGM ;
  PROC PRINT ;
    VAR LPAQLOC LPAQPGM LPAQEPA LPAQACD LPAQMAJ ;
    BY LPAQLOC ; PAGEBY LPAQLOC ;
    TITLE2 "Detail Report by Storage Location" ;
  PROC SORT NODUPS ;
    BY LPAQLOC LPAQEPA LPAQPGM ;
  PROC PRINT ;
    VAR LPAQLOC LPAQEPA LPAQPGM LPAQACD LPAQMAJ ;
    BY LPAQLOC ; PAGEBY LPAQLOC ;
    TITLE2 "Detail Report by Entry Point Address" ;
  PROC SORT NODUPS ;
    BY LPAQSEQ ;
  PROC PRINT ;
    VAR LPAQSEQ LPAQPGM LPAQLOC LPAQEPA LPAQACD LPAQMAJ LPAQLIB ;
    TITLE2 "Detail Report by CDE Chain Order" ;
  PROC FREQ ;
    TABLES LPAQACD ;
    TITLE2 "Authorization (AC) Profile" ;
DATA ALIASES ;
  SET LPAQ ;
  IF LPAQMAJ NE '        ' ;
  PROC SORT NODUPS ;
    BY LPAQPGM LPAQSEQ ;
  PROC PRINT ;
    VAR LPAQPGM LPAQMAJ LPAQEPA LPAQACD LPAQLIB LPAQSEQ ;
    TITLE2 "Alias Report by Program Name (Alias)" ;
  PROC SORT NODUPS ;
    BY LPAQMAJ LPAQPGM LPAQLIB;
  PROC PRINT ;
    VAR LPAQMAJ LPAQPGM LPAQEPA LPAQACD LPAQLIB LPAQSEQ ;
    TITLE2 "Alias Report by Program Name (Major)" ;
 ********************************************************************;
 PROC SORT NODUPS DATA=LPAQ ;   /* BRING BACK LPAQ WORKING SET HERE */
   BY LPAQPGM LPAQSEQ LPAQLIB ;
 PROC FREQ ORDER=FREQ;
   TABLES LPAQPGM / OUT=SUMOUT NOPERCENT NOPRINT ;
   TITLE2 "Duplicate Program Names" ;
 DATA FREQOUT ;
   SET SUMOUT ;
   IF COUNT > 1 ;
   PROC PRINT ;
     VAR LPAQPGM COUNT ;
     SUM COUNT ;
   PROC SORT ;
     BY LPAQPGM ;
 DATA MATCHUP ;
   MERGE LPAQ FREQOUT(IN=F) ;
   BY LPAQPGM ;
   IF F ;
   PROC PRINT ;
     VAR LPAQPGM LPAQACD LPAQMAJ LPAQSEQ LPAQEPA LPAQLOC ;
     BY LPAQPGM ;
./ ADD NAME=NUCMLIST 0100-94267-94267-1200-00044-00044-00000-CONYERS
//MS01@NUC JOB (MS01,228),'CONYERS - NUCMLIST',MSGCLASS=T,CLASS=A,
//         NOTIFY=MS01VC1,MSGLEVEL=(1,1),TIME=(,14)
//*********************************************************************
//*   THIS PROCEDURE SCANS A NUCLEUS MAP TABLE DATA BASE AND
//*     PRODUCES VARIOUS ANALYSES USING THE SAS SOFTWARE PRODUCT
//*********************************************************************
//STEP01   EXEC SAS
//NUCMAP   DD DISP=SHR,DSN=MS01.CONYERS.NUCMAP.DATA.WORK
DATA NUCMLIST ;
  INFILE NUCMAP OBS=99999 ;     /* Limit control for testing */
  INPUT
        @2    NUCMSEQ  $CHAR8.
        @11   NUCMEPN  $CHAR8.
        @20   NUCMEPA  $CHAR8.
        @31   NUCCSECT $CHAR1.
        @37   NUCRSECT $CHAR1.
        @42   NUCRMODE $CHAR3.
        @48   NUCAMODE $CHAR3.
        @53   NUCMLEN  $CHAR6.    ;
  LABEL NUCMSEQ  = 'NUCMAP Sequence'
        NUCMEPN  = 'Entry Name'
        NUCMEPA  = 'Entry Point Address'
        NUCCSECT = 'CSECT Flag'
        NUCRSECT = 'RSECT Flag'
        NUCRMODE = 'RMODE'
        NUCAMODE = 'AMODE'
        NUCMLEN  = 'Entry Length'        ;
  TITLE1 "Nucleus Map Table Contents Analysis" ;
 ********************************************************************;
  PROC FREQ ;
    TABLES NUCCSECT NUCRSECT NUCRMODE NUCAMODE ;
    TITLE2 "Table Entry Counts" ;
  PROC SORT NODUPS ;
    BY NUCMEPN ;
  PROC PRINT ;
    VAR NUCMEPN NUCMEPA NUCMLEN NUCCSECT NUCRSECT
        NUCRMODE NUCAMODE NUCMSEQ ;
    TITLE2 "Detail Report by Table Entry Name" ;
  PROC SORT NODUPS ;
    BY NUCMSEQ ;
  PROC PRINT ;
    VAR NUCMEPN NUCMEPA NUCMLEN NUCCSECT NUCRSECT
        NUCRMODE NUCAMODE NUCMSEQ ;
    TITLE2 "Detail Report by Table Entry Address" ;
./ ADD NAME=PCLIST   0100-94267-94267-1200-00043-00043-00000-CONYERS
//MS01@PC  JOB (MS01,228),'CONYERS - PCLIST  ',MSGCLASS=T,CLASS=A,
//         NOTIFY=MS01VC1,MSGLEVEL=(1,1),TIME=(,14)
//*********************************************************************
//*   THIS PROCEDURE SCANS A PCDATA SNAP OUTPUT DATA BASE AND
//*     PRODUCES VARIOUS ANALYSES USING THE SAS SOFTWARE PRODUCT
//*********************************************************************
//STEP01   EXEC SAS
//PCAUTH   DD DISP=SHR,DSN=MS01.CONYERS.PCAUTH.DATA.WORK
DATA PCLIST ;
  INFILE PCAUTH OBS=99999 ;     /* Limit control for testing */
  INPUT
        @2    PCAULIB $CHAR44.
        @47   PCNUM   $CHAR6.
         @47  PCNUMLX $CHAR4.
         @51  PCNUMEX $CHAR2.
        @54   PCAKM   $CHAR4.
        @59   PCEXAS  $CHAR4.
        @64   PCEXASN $CHAR8.
        @73   PCENAD  $CHAR8.
        @82   PCENLOC $CHAR5.
        @88   PCEXST  $CHAR1.
        @90   PCEKM   $CHAR4.   ;
  LABEL PCAULIB = 'Library Name'
        PCNUM   = 'PC Number'
        PCNUMLX = 'Linkage Index'
        PCNUMEX = 'Entry Index'
        PCAKM   = 'Auth Key Mask'
        PCEXAS  = 'Exec ASID'
        PCEXASN = 'Exec ASID Name'
        PCENAD  = 'Entry Address'
        PCENLOC = 'Entry Location'
        PCEXST  = 'Exec State'
        PCEKM   = 'Exec Key Mask'        ;
  TITLE1 "PCAUTH Table Contents Analysis" ;
 ********************************************************************;
  PROC FREQ ;
    TABLES PCNUMLX PCAKM PCEXASN PCENLOC PCEXST PCEKM ;
    TITLE2 "PC Table Entry Counts" ;
  PROC SORT NODUPS ;
    BY PCNUM ;
  PROC PRINT ;
    VAR PCNUM PCAKM PCEXAS PCEXASN PCENAD PCENLOC PCEXST PCEKM ;
    TITLE2 "Detail Report by PC Table Entry" ;
./ ADD NAME=PCMATCH  0100-94267-94267-1200-00145-00145-00000-CONYERS
//MS01@PC  JOB (MS01,228),'CONYERS - PCMATCH ',MSGCLASS=T,CLASS=A,
//         NOTIFY=MS01VC1,MSGLEVEL=(1,1),TIME=(,14)
//*********************************************************************
//*   THIS PROCEDURE SCANS A PCDATA SNAP OUTPUT DATA BASE AND
//*     MATCHES ENTRY POINTS WITH LPAQ, PLPA, AND NUCMAP ENTRIES.
//*********************************************************************
//STEP01   EXEC SAS
//PCAUTH   DD DISP=SHR,DSN=MS01.CONYERS.PCAUTH.DATA.WORK
//LPAQMODS DD DISP=SHR,DSN=MS01.CONYERS.LPAQMODS.DATA.WORK
//PLPAMODS DD DISP=SHR,DSN=MS01.CONYERS.PLPAMODS.DATA.WORK
//NUCMAP   DD DISP=SHR,DSN=MS01.CONYERS.NUCMAP.DATA.WORK
  TITLE1 "PCAUTH Table Contents Analysis" ;
DATA PCLIST ;
  INFILE PCAUTH OBS=99999 ;     /* Limit control for testing */
  INPUT
        @2    PCAULIB $CHAR44.
        @47   PCNUM   $CHAR6.
        @47   PCNUM_X $HEX6.       /* GET HEX VALUE FOR SORT */
         @47  PCNUMLX $CHAR4.
         @51  PCNUMEX $CHAR2.
        @54   PCAKM   $CHAR4.
        @59   PCEXAS  $CHAR4.
        @64   PCEXASN $CHAR8.
        @73   PCENAD  $CHAR8.
        @82   PCENLOC $CHAR5.
        @88   PCEXST  $CHAR1.
        @90   PCEKM   $CHAR4.   ;
  LABEL PCAULIB = 'Library Name'
        PCNUM   = 'PC Number'
        PCNUMLX = 'Linkage Index'
        PCNUMEX = 'Entry Index'
        PCAKM   = 'Auth Key Mask'
        PCEXAS  = 'Exec ASID'
        PCEXASN = 'Exec ASID Name'
        PCENAD  = 'Entry Address'
        PCENLOC = 'Entry Location'
        PCEXST  = 'Exec State'
        PCEKM   = 'Exec Key Mask'        ;
  EPADDR = SUBSTR(PCENAD,2,7) ;
  PROC SORT DATA=PCLIST ; BY EPADDR ;
DATA LPAQ ;
  INFILE LPAQMODS OBS=99999 ;     /* Limit control for testing */
  INPUT
        @2    LPAQLIB $CHAR44.
        @47   LPAQSEQ $CHAR4.
        @52   LPAQPGM $CHAR8.
        @61   LPAQEPA $CHAR8.
        @70   LPAQLOC $CHAR5.
        @80   LPAQUSE $CHAR5.
        @89   LPAQACD $CHAR1.
        @101  LPAQMAJ $CHAR8.   ;
  LABEL LPAQLIB = 'Library Name'
        LPAQSEQ = 'LPAQ Sequence Number'
        LPAQPGM = 'Program Load Module Name'
        LPAQEPA = 'Program Entry Point Address'
        LPAQLOC = 'Program Location'
        LPAQUSE = 'Program Use Count'
        LPAQACD = 'Program AC Flag (AC=0,1)'
        LPAQMAJ = 'Program Major Name if LPAQPGM is alias' ;
  EPADDR = SUBSTR(LPAQEPA,2,7) ;
  PROC SORT DATA=LPAQ ; BY EPADDR ;
*********************************************************************;
DATA PLPA ;
  INFILE PLPAMODS OBS=99999 ;     /* Limit control for testing */
  INPUT
        @2   PLPALIB $CHAR44.
        @47  PLPASEQ $CHAR8.
        @56  PLPAPGM $CHAR8.
        @65  PLPAEPA $CHAR8.
        @74  PLPALOC $CHAR5.
        @85  PLPASIZ $CHAR8.
        @97  PLPAACD $CHAR1.
        @109 PLPAMAJ $CHAR8.   ;
  LABEL PLPALIB = 'Library Name'
        PLPASEQ = 'PLPA Sequence Number'
        PLPAPGM = 'Load Module Name'
        PLPAEPA = 'Entry Point Address'
        PLPALOC = 'Module Location'
        PLPASIZ = 'Module Size'
        PLPAACD = 'Authorization Code'
        PLPAMAJ = 'Major Name if PLPAPGM is Alias'   ;
  EPADDR = SUBSTR(PLPAEPA,2,7) ;
  PROC SORT DATA=PLPA ; BY EPADDR ;
*********************************************************************;
DATA NUCM ;
  INFILE NUCMAP OBS=99999 ;     /* Limit control for testing */
  INPUT
        @2    NUCMSEQ  $CHAR8.
        @11   NUCMEPN  $CHAR8.
        @20   NUCMEPA  $CHAR8.
        @31   NUCCSECT $CHAR1.
        @37   NUCRSECT $CHAR1.
        @42   NUCRMODE $CHAR3.
        @48   NUCAMODE $CHAR3.
        @53   NUCMLEN  $CHAR6.    ;
  LABEL NUCMSEQ  = 'NUCMAP Sequence'
        NUCMEPN  = 'Entry Name'
        NUCMEPA  = 'Entry Point Address'
        NUCCSECT = 'CSECT Flag'
        NUCRSECT = 'RSECT Flag'
        NUCRMODE = 'RMODE'
        NUCAMODE = 'AMODE'
        NUCMLEN  = 'Entry Length'        ;
  EPADDR = SUBSTR(NUCMEPA,2,7) ;
  PROC SORT DATA=NUCM ; BY EPADDR ;
*********************************************************************;
DATA PC_ALL ;
  MERGE PCLIST(IN=PCLIST) LPAQ(IN=LPAQ) PLPA(IN=PLPA) NUCM(IN=NUCM) ;
    BY EPADDR ;
  IN_PC=PCLIST ; IN_L=LPAQ ; IN_P=PLPA ; IN_N=NUCM ; /* debug */
  IF PCLIST ;
  PROC SORT DATA=PC_ALL ; BY PCNUM_X ;
  PROC PRINT ;
    VAR PCNUM PCAKM PCEXASN PCENAD PCENLOC
        LPAQPGM PLPAPGM NUCMEPN ;
    TITLE2 "PCs Matched with LPAQ, PLPA, and NUCMAP" ;
*********************************************************************;
DATA PC_XABE ;
  SET PC_ALL ;
  IF IN_PC AND NUCMEPN = 'IEAVXABE' ;
  PROC SORT DATA=PC_XABE ; BY PCNUM_X ;
  PROC PRINT ;
    VAR PCNUM PCAKM PCEXASN PCENAD PCENLOC
        LPAQPGM PLPAPGM NUCMEPN ;
    TITLE2 "PCs Matched with LPAQ, PLPA, and NUCMAP" ;
    TITLE3 "PCs Pointing to Nucleus Error Routine" ;
*********************************************************************;
DATA PC_MISS ;
  SET PC_ALL ;
  LOCTEST = '    ' ;     /* Filter out PRIV, CSA, and SQA items */
  IF PCENLOC =: 'NUC'   OR
     PCENLOC =: 'MLPA'  OR
     PCENLOC =: 'FLPA'  OR
     PCENLOC =: 'PLPA'  OR
     PCENLOC =: 'EMLPA' OR
     PCENLOC =: 'EFLPA' OR
     PCENLOC =: 'EPLPA' THEN LOCTEST = 'KEEP' ;
  IF IN_PC
       AND NOT IN_L AND NOT IN_P AND NOT IN_N AND LOCTEST = 'KEEP' ;
  PROC SORT DATA=PC_MISS ; BY PCNUM_X ;
  PROC PRINT ;
    VAR PCNUM PCAKM PCEXASN PCENAD PCENLOC
        LPAQPGM PLPAPGM NUCMEPN ;
    TITLE2 "PCs NOT Matched with LPAQ, PLPA, and NUCMAP" ;
    TITLE3 "Storage Residency Exceptions" ;
./ ADD NAME=PLPAMODS 0100-94267-94267-1200-00036-00036-00000-CONYERS
//MS01@PLP JOB (MS01,228),'CONYERS - PLPAMODS',MSGCLASS=T,CLASS=A,
//         NOTIFY=MS01VC1,MSGLEVEL=(1,1),TIME=(,14)
//*********************************************************************
//*   THIS PROCEDURE SCANS A PLPA MODULE CONTENTS DATA BASE AND
//*     PRODUCES VARIOUS ANALYSES USING THE SAS SOFTWARE PRODUCT
//*********************************************************************
//STEP01   EXEC SAS
//PLPAMODS DD DISP=SHR,DSN=MS01.CONYERS.PLPAMODS.DATA.WORK
DATA PLPA ;
  INFILE PLPAMODS OBS=99999 ;      /* Limit control for testing */
  INPUT
        @2   PLPALIB $CHAR44.
        @47  PLPASEQ $CHAR8.
        @56  PLPAPGM $CHAR8.
        @65  PLPAEPA $CHAR8.
        @74  PLPALOC $CHAR5.
        @85  PLPASIZ $CHAR8.
        @97  PLPAACD $CHAR1.
        @109 PLPAMAJ $CHAR8.   ;
  LABEL PLPALIB = 'Library Name'
        PLPASEQ = 'PLPA Sequence Number'
        PLPAPGM = 'Load Module Name'
        PLPAEPA = 'Entry Point Address'
        PLPALOC = 'Module Location'
        PLPASIZ = 'Module Size'
        PLPAACD = 'Authorization Code'
        PLPAMAJ = 'Major Name if PLPAPGM is Alias'   ;
  TITLE1 "PLPA Contents Analysis" ;
  PROC FREQ ;
    TABLES PLPALOC PLPAACD ;
    TITLE2 "Location/Authorization Profile" ;
  PROC SORT NODUPS ;
    BY PLPAPGM ;
  PROC PRINT ;
    VAR PLPAPGM PLPAEPA PLPALOC PLPASIZ PLPAACD PLPAMAJ ;
    TITLE2 "Detail Report by Program" ;
./ ADD NAME=SVCLIST  0100-94267-94267-1200-00053-00053-00000-CONYERS
//MS01@SVC JOB (MS01,228),'CONYERS - SVCLIST ',MSGCLASS=T,CLASS=A,
//         NOTIFY=MS01VC1,MSGLEVEL=(1,1),TIME=(,14)
//*********************************************************************
//*   THIS PROCEDURE SCANS AN SVC TABLE CONTENTS DATA BASE AND
//*     PRODUCES VARIOUS ANALYSES USING THE SAS SOFTWARE PRODUCT
//*********************************************************************
//STEP01   EXEC SAS
//SVCS     DD DISP=SHR,DSN=MS01.CONYERS.SVCS.DATA.WORK
DATA SVCLIST ;
  INFILE SVCS OBS=99999 ;     /* Limit control for testing */
  INPUT
        @2    SVCLIB  $CHAR44.
        @47   SVCNUM  $CHAR6.
        @64   SVCTYPE $CHAR3.
        @68   SVCEPA  $CHAR8.
        @77   SVCLOC  $CHAR5.
        @83   SVCSPEC $CHAR3.   ;
  LABEL SVCLIB  = 'Library Name'
        SVCNUM  = 'SVC Number'
        SVCTYPE = 'Type (1-4,6)'
        SVCEPA  = 'Entry Address'
        SVCLOC  = 'Entry Location'
        SVCSPEC = 'Special (APF,ESR)'    ;
  TITLE1 "SVC Table Contents Analysis" ;
 ********************************************************************;
 /* Generate a comment if location exception detected              */
  COMMENT = '                    ' ;
  IF SVCNUM > 'SVC199' AND SVCSPEC = '   '
     THEN COMMENT = 'User SVC not APF';
  IF SVCTYPE = '1  ' AND SVCLOC ^= 'NUC'
     THEN COMMENT = 'T1 not in NUC   ' ;
  IF SVCTYPE = '2  ' AND SVCLOC ^= 'NUC'
     THEN COMMENT = 'T2 not in NUC   ' ;
  IF SVCTYPE = '6  ' AND SVCLOC ^= 'NUC'
     THEN COMMENT = 'T6 not in NUC   ' ;
  IF SVCTYPE = '3/4' AND (SVCLOC ^= 'PLPA' AND SVCLOC ^= 'EPLPA')
     THEN COMMENT = 'T3/4 not in PLPA' ;
 ********************************************************************;
  PROC FREQ ;
    TABLES SVCTYPE SVCLOC SVCSPEC COMMENT ;
    TITLE2 "SVC Table Entry Counts" ;
  PROC SORT NODUPS ; BY SVCNUM ;
  PROC PRINT ;
    VAR SVCNUM SVCSPEC SVCTYPE SVCEPA SVCLOC COMMENT ;
    TITLE2 "Detail Report by SVC Table Entry" ;
DATA SVCEXCP ;
  SET SVCLIST ;
  IF COMMENT ^=  '                    ' ;
  PROC SORT NODUPS ; BY COMMENT SVCNUM ;
  PROC PRINT ;
    VAR SVCNUM SVCSPEC SVCTYPE SVCEPA SVCLOC COMMENT ;
    BY COMMENT ;
    TITLE2 "SVC Entry Point Address Exceptions" ;
./ ADD NAME=SVCMATCH 0100-94267-94267-1200-00126-00126-00000-CONYERS
//MS01@SVC JOB (MS01,228),'CONYERS - SVCMATCH',MSGCLASS=T,CLASS=A,
//         NOTIFY=MS01VC1,MSGLEVEL=(1,1),TIME=(,14)
//*********************************************************************
//*   THIS PROCEDURE SCANS AN SVC TABLE OUTPUT DATA BASE AND
//*     MATCHES ENTRY POINTS WITH LPAQ, PLPA, AND NUCMAP ENTRIES.
//*********************************************************************
//STEP01   EXEC SAS
//SVCS     DD DISP=SHR,DSN=MS01.CONYERS.SVCS.DATA.WORK
//LPAQMODS DD DISP=SHR,DSN=MS01.CONYERS.LPAQMODS.DATA.WORK
//PLPAMODS DD DISP=SHR,DSN=MS01.CONYERS.PLPAMODS.DATA.WORK
//NUCMAP   DD DISP=SHR,DSN=MS01.CONYERS.NUCMAP.DATA.WORK
  TITLE1 "SVC Table Contents Analysis" ;
DATA SVCLIST ;
  INFILE SVCS OBS=99999 ;     /* Limit control for testing */
  INPUT
        @2    SVCLIB  $CHAR44.
        @47   SVCNUM  $CHAR6.
        @64   SVCTYPE $CHAR3.
        @68   SVCEPA  $CHAR8.
        @77   SVCLOC  $CHAR5.
        @83   SVCSPEC $CHAR3.   ;
  LABEL SVCLIB  = 'Library Name'
        SVCNUM  = 'SVC Number'
        SVCTYPE = 'Type (1-4,6)'
        SVCEPA  = 'Entry Address'
        SVCLOC  = 'Entry Location'
        SVCSPEC = 'Special (APF,ESR)'    ;
  EPADDR = SUBSTR(SVCEPA,2,7) ;
  PROC SORT DATA=SVCLIST ; BY EPADDR ;
DATA LPAQ ;
  INFILE LPAQMODS OBS=99999 ;     /* Limit control for testing */
  INPUT
        @2    LPAQLIB $CHAR44.
        @47   LPAQSEQ $CHAR4.
        @52   LPAQPGM $CHAR8.
        @61   LPAQEPA $CHAR8.
        @70   LPAQLOC $CHAR5.
        @80   LPAQUSE $CHAR5.
        @89   LPAQACD $CHAR1.
        @101  LPAQMAJ $CHAR8.   ;
  LABEL LPAQLIB = 'Library Name'
        LPAQSEQ = 'LPAQ Sequence Number'
        LPAQPGM = 'Program Load Module Name'
        LPAQEPA = 'Program Entry Point Address'
        LPAQLOC = 'Program Location'
        LPAQUSE = 'Program Use Count'
        LPAQACD = 'Program AC Flag (AC=0,1)'
        LPAQMAJ = 'Program Major Name if LPAQPGM is alias' ;
  EPADDR = SUBSTR(LPAQEPA,2,7) ;
  PROC SORT DATA=LPAQ ; BY EPADDR ;
*********************************************************************;
DATA PLPA ;
  INFILE PLPAMODS OBS=99999 ;     /* Limit control for testing */
  INPUT
        @2   PLPALIB $CHAR44.
        @47  PLPASEQ $CHAR8.
        @56  PLPAPGM $CHAR8.
        @65  PLPAEPA $CHAR8.
        @74  PLPALOC $CHAR5.
        @85  PLPASIZ $CHAR8.
        @97  PLPAACD $CHAR1.
        @109 PLPAMAJ $CHAR8.   ;
  LABEL PLPALIB = 'Library Name'
        PLPASEQ = 'PLPA Sequence Number'
        PLPAPGM = 'Load Module Name'
        PLPAEPA = 'Entry Point Address'
        PLPALOC = 'Module Location'
        PLPASIZ = 'Module Size'
        PLPAACD = 'Authorization Code'
        PLPAMAJ = 'Major Name if PLPAPGM is Alias'   ;
  EPADDR = SUBSTR(PLPAEPA,2,7) ;
  PROC SORT DATA=PLPA ; BY EPADDR ;
*********************************************************************;
DATA NUCM ;
  INFILE NUCMAP OBS=99999 ;     /* Limit control for testing */
  INPUT
        @2    NUCMSEQ  $CHAR8.
        @11   NUCMEPN  $CHAR8.
        @20   NUCMEPA  $CHAR8.
        @31   NUCCSECT $CHAR1.
        @37   NUCRSECT $CHAR1.
        @42   NUCRMODE $CHAR3.
        @48   NUCAMODE $CHAR3.
        @53   NUCMLEN  $CHAR6.    ;
  LABEL NUCMSEQ  = 'NUCMAP Sequence'
        NUCMEPN  = 'Entry Name'
        NUCMEPA  = 'Entry Point Address'
        NUCCSECT = 'CSECT Flag'
        NUCRSECT = 'RSECT Flag'
        NUCRMODE = 'RMODE'
        NUCAMODE = 'AMODE'
        NUCMLEN  = 'Entry Length'        ;
  EPADDR = SUBSTR(NUCMEPA,2,7) ;
  PROC SORT DATA=NUCM ; BY EPADDR ;
*********************************************************************;
DATA SVC_ALL ;
  MERGE SVCLIST(IN=SVCLIST) LPAQ(IN=LPAQ) PLPA(IN=PLPA) NUCM(IN=NUCM);
    BY EPADDR ;
  IN_S=SVCLIST ; IN_L=LPAQ ; IN_P=PLPA ; IN_N=NUCM ; /* debug */
  IF SVCLIST ;
  PROC SORT DATA=SVC_ALL ; BY SVCNUM ;
  PROC PRINT ;
    VAR SVCNUM SVCTYPE SVCEPA SVCLOC SVCSPEC
        LPAQPGM PLPAPGM NUCMEPN ;
    TITLE2 "SVCs Matched with LPAQ, PLPA, and NUCMAP" ;
*********************************************************************;
DATA SVC_ERR ;
  SET SVC_ALL ;
  IF IN_S AND NUCMEPN = 'IGCERROR' ;
  PROC SORT DATA=SVC_ERR ; BY SVCNUM ;
  PROC PRINT ;
    VAR SVCNUM SVCTYPE SVCEPA SVCLOC SVCSPEC
        LPAQPGM PLPAPGM NUCMEPN ;
    TITLE2 "SVCs Matched with LPAQ, PLPA, and NUCMAP" ;
    TITLE3 "SVCs Pointing to Nucleus Error Routine" ;
*********************************************************************;
DATA SVC_MISS ;
  SET SVC_ALL ;
  IF IN_S
       AND NOT IN_L AND NOT IN_P AND NOT IN_N ;
  PROC SORT DATA=SVC_MISS ; BY SVCNUM ;
  PROC PRINT ;
    VAR SVCNUM SVCTYPE SVCEPA SVCLOC SVCSPEC
        LPAQPGM PLPAPGM NUCMEPN ;
    TITLE2 "SVCs NOT Matched with LPAQ, PLPA, and NUCMAP" ;
    TITLE3 "Storage Residency Exceptions" ;
