./ ADD NAME=$$README 0100-94267-94267-1200-00126-00126-00000-CONYERS
+-----------------------------------------------------------------------
|
|                <<<<<<<<<<  EDP AUDIT SHAREWARE >>>>>>>>>>
|
|                 Volume Number: ADVCAATS_01
|                          Name: DISASSEMBLER
|                Primary Source: CBT TAPE
|                   Value-Added: Teresa Mosby, Lee Conyers
|                                U.S. Department of Transportation
|                                Office of Inspector General
|                                Washington, DC
|                          Date: MAY 5, 1988
|
+-----------------------------------------------------------------------
| HISTORY:
|           o  First distribution given to advanced EDP audit students o
|               May 10, 1988 at Federal Reserve Bank - New York, NY.
|
|           o  Second distribution given to attendees of the Information
|               Systems Security Association (ISSA) on February 8, 1989
|               in Washington, DC.
|
|           o  Third distribution given to attendees of the EDPAA Nation
|               Capital Area Chapter's Auditing MVS Seminar on April 19,
|               1993.
|
|           o  -open-
|
+-----------------------------------------------------------------------
| DESIRABLE ENHANCEMENTS IF YOU WISH TO CONTRIBUTE:
|
|     (a)  Update op-code tables to include complete 370 instruction set
|     (b)  Develop an SVC-mode to recognize SVC register conventions.
|     (c)  Convert to interactive TSO CP kind of like the UCLA superzap.
|     (d)  Add more intelligence to disassembly output comment field.
|     (e)  Enable multi-CSECT disassemblies per disassembler run.
+-----------------------------------------------------------------------


Disassembler documentation files:

        $DOC     --  Standard instructions from CBT tape.   <======!!

        $REQU    --  More documentation.

Disassembler source code files:

        DISASM   --  Front-end for LOAD MODULE disassembly.

        DISASM1  --  Phase 1 disassembly logic (used by DISASM & DISASM3

        DISASM2  --  Phase 2 disassembly logic (used by DISASM & DISASM3

        DISASM3  --  Front-end for IN-STORAGE disassembly BELOW 16MB LIN

        REQU     --  Register symbol equates macro.

        OPCTABLE --  370 instruction code tables & SVC table.
                      (I usually customize it once and then copy
                      it into DISASM1 and DISASM2, both need it.
                      You will find these tables at the end of
                      both disassembler source modules.)

Sample JCL and DYL-280 usage example files:

        ASSEMBLE --  MVS/SP 1.3.6 ASM/LKED JCL showing our DDNAMES, etc.
                      You must assemble the four disassembler load
                      modules DISASM, DISASM1, DISASM2, and DISASM3.
                      Remember, MVS/SP 2.x versions of XA introduced new
                      assembler, linkage editor, and macro libraries.

        TEST     --  JCL to disassemble a load module (SPZAP syntax).

        DISVC200 --  JCL and DYL code to disassemble all in-storage
                      user SVCs.  (Requires SVCTABLE analysis program
                      which we could not include; but it shows what one
                      can do with a little imagination.)

        DISANSVC --  JCL and DYL code to disassemble one in-storage
                      user SVC.  (Requires SVCTABLE analysis program
                      which is not included.  However, you may hardcode
                      any EP address below 16MB and length to disassembl
                      in the DYL-280 program variables DISPARM1 and
                      DISPARM2, respectively.)

                  (Note:  since DYL invokes the disassembler
                   modules using standard IBM linkage conventions,
                   they should work fine with SAS, etc.  Also, the
                   in-storage disassembly routine only needs an
                   EP address and length, which may be obtained
                   by first using AMBLIST or EXAMINE/MVS.)

Sample disassembler output SYSPUNCH files:

        $AUTHSPF --  A load module designed to reside in PLPA
                      which calls an "authorization" SVC to be
                      able to do things from within ISPF sessions.
                      Latest versions of ISPF do not need it.

        $SVC243  --  Type 3 SVC with utility functions, such as,
                      granting caller APF-authorization.  It's
                      "integrity check" is zapped out with a NOPR.

        $DODIAG  --  Nonsense code used to test disassembler mods
                      to identify "user SVCs" and the 370 diagnose
                      instruction (for which there is no mnemonic).

                      MVS guests use the diagnose instruction to
                      talk to (thwart) the VM/CP.  If you can find
                      an integrity exposure in an MVS guest to get
                      into SUPV state and KEY ZERO, then you may
                      want to try asking VM/CP to do something for
                      you!  See the VM systems programming guide.

Additional Comments:

   This disassembler is a last resort tool since it has serious limitati
   For example, the opcode tables have not been updated to reflect new
   instructions added by IBM for ESA and S/390 hardware enhancements.  U
   modifications are made for 31-bit addressing in the DISASMx design, i
   also will not be able to disassemble any virtual storage locations th
   reside above the 16MB line.  Small jobs can be handled by the TSO TES
   command's LIST subcommand support.  Strongly recommend obtaining a ve
   supported tool, such as, Serena's PDSTools, Cole Software's XDC, or
   Legent's Sysview/E.  In spite of these limitations, however, this fre
   software is a valuable learning tool for the advanced MVS auditor.
./ ADD NAME=$AUTHSPF 0100-94267-94267-1200-00131-00131-00000-CONYERS
AUTHISPF CSECT
         B     36(,R15)
         DC    X'0B'
         DC    C'AUTHISPF'
         DC    C'    06'
         DC    X'61'
         DC    C'06'
         DC    X'61'
         DC    C'85 16'
         DC    X'4B'
         DC    C'14 '
         DC    F'00160'
         STM   R14,R12,12(R13)             SAVE REGS
         LR    R12,R15
         LR    R2,R1
         L     R2,0(,R2)
         L     R0,32(,R12)
         BAL   R1,56(,R12)                 PARM SET BRCH
         SVC   10                          GET/FREEMAIN R
         ST    R13,4(,R1)
         ST    R1,8(,R13)
         LR    R13,R1
         LR    R11,R1
         LA    R1,80(,R12)
         B     20(,R1)
         DC    H'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    X'20000000'
         SVC   96                          STAX
         LA    R3,40
         LTR   R15,R15
         BNZ   258(,R12)
         LA    R4,312(,R12)
         LA    R5,72(,R11)
         ST    R11,72(,R11)
         MVC   136(20,R11),288(R12)
         LA    R1,136(,R11)
         STCM  R4,7,1(R1)
         OI    0(R1),X'10'
         ST    R5,4(,R1)
         NI    0(R1),X'D7'
         NI    12(R1),X'64'
         XC    13(3,R1),13(R1)
         LA    R0,256
         SVC   60                          (E)STAE/STAI
         LA    R3,44
         LTR   R15,R15
         BNZ   226(,R12)
         SR    R0,R0
         SR    R1,R1
         CLC   2(2,R2),428(R12)
         BE    204(,R12)
         CLC   2(2,R2),430(R12)
         BE    214(,R12)
         B     220(,R12)
         LA    R1,1
         DC    X'0A'
         DC    C'3'
         B     220(,R12)
         LA    R1,0
         DC    X'0A'
         DC    C'3'
         LA    R0,132
         SVC   60                          (E)STAE/STAI
         LA    R1,236(,R12)
         B     20(,R1)
         DC    H'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    X'10000000'
         SVC   96                          STAX
         LR    R1,R13
         L     R0,32(,R12)
         L     R13,4(,R13)
         LA    R1,0(,R1)
         SVC   10                          GET/FREEMAIN R
         LA    R15,0
         L     R14,12(,R13)
         LM    R0,R12,20(R13)              RESTORE REGS
         DC    H'2046'
         DC    X'16000000'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         C     R0,112(,R15)
         BNE   62(,R15)
         L     R11,0(,R2)
         STM   R14,R12,76(R11)             SAVE REGS
         LR    R12,R15
         SR    R0,R0
         SR    R1,R1
         DC    X'0A'
         DC    C'3'
         LA    R1,32(,R12)
         B     20(,R1)
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    X'10000000'
         SVC   96                          STAX
         LM    R14,R12,76(R11)             RESTORE REGS
         XR    R15,R15
         BR    R14                         EXIT
         STM   R14,R12,12(R13)             SAVE REGS
         LR    R12,R15
         LR    R11,R1
         SR    R0,R0
         SR    R1,R1
         DC    X'0A'
         DC    C'3'
         LA    R1,84(,R12)
         B     20(,R1)
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    X'10000000'
         DC    X'0A60181B'
         DC    F'0'
         DC    F'00012'
         DC    C'ONOF'
         REQU
         END
./ ADD NAME=$DOC     0100-94267-94267-1200-00426-00426-00000-CONYERS
                ***** DISASSEMBLER *****

*
*
*  DISASM IS A ONE-PASS DISASSEMBLER WHICH PRODUCES AN ASSEMBLER
*  LANGUAGE SOURCE PROGRAM FROM A CSECT WITHIN A LOAD MODULE.
*  CONTROL CARDS PERMIT SPECIFICATION OF AREAS CONTAINING NO
*  INSTRUCTIONS, ALLOW BASE REGISTERS TO BE PROVIDED SO THAT
*  SYMBOLIC LABELS MAY BE CREATED DURING DISASSEMBLY, AND
*  DEFINITION OF DSECTS TO BE USED DURING DISASSEMBLY. CONDITIONAL
*  BRANCH INSTRUCTIONS USE THE EXTENDED MNEMONICS, WHERE POSSIBLE,
*  AND EXPLICIT REGISTERS ARE DENOTED BY R0, R1, ... R15. INFORMATIONAL
*  COMMENTS ARE GIVEN ON SVC'S, AND VARIOUS BAL INSTRUCTIONS TO AID
*  IN CREATING A DOCUMENTED SOURCE PROGRAM.
*
*  1. JCL REQUIREMENTS:
*        A. EXEC CARD:        TO EXECUTE PGM=DISASM. A PARM FIELD MAY
*                             BE SPECIFIED IF FLOATING POINT AND/OR
*                             PRIVILEGED INSTRUCTIONS ARE TO BE
*                             FOUND IN THE MODULE.
*        B. STEPLIB DD CARD:  OPTIONAL, SPECIFY THE PDS CONTAINING
*                             THE MODULE DISASM.
*        C. LOADLIB DD CARD:  OPTIONAL, SPECIFY PDS CONTAINING THE
*                             MODULES DISASM1 AND DISASM2, IF OTHER THAN
*                             SYS1.LINKLIB OR STEPLIB.
*        D. SYSLIB DD CARD:   SPECIFY PDS CONTAINING THE MODULE TO BE
*                             DISASSEMBLED.
*        E. SYSPRINT DD CARD: OPTIONAL, SPECIFY THE PRINTED      FIX***
*                             OUTPUT DATASET. BLKSIZE MUST BE    FIX***
*                             SPECIFIED AS A MULTIPLE OF 121.    FIX***
*                             RECFM=FBA,LRECL=121 IS HARD CODED. FIX***
*        F. SYSPUNCH DD CARD: OPTIONAL, SPECIFY PRINTED OUTPUT   FIX***
*                             DATASET. BLKSIZE MUST BE SPECIFIED FIX***
*                             AS A MULTIPLE OF 80.               FIX***
*                             RECFM=FB,LRECL=80 IS HARD CODED.   FIX***
*        G. SYSIN DD CARD:    CONTAINS CONTROL CARDS. THE MODULE-CSECT
*                             CARD IS REQUIRED. BLKSIZE MUST BE A
*                             MULTIPLE OF 80. RECFM=FB,LRECL=80 IS
*                             HARD-CODED.
*
*    JCL EXAMPLE: DISASSEMBLE CSECT IECIOSCN IN MODULE IEANUC01,
*                  WHICH IS IN THE PDS SYS1.NUCLEUS. THE MODULES
*                  DISASM, DISASM1, AND DISASM2 ARE ALL IN THE PDS
*                  SYS1.TECHLOAD. A PRINTED LISTING IS TO BE MADE,
*                  AND THE SOURCE PROGRAM OUTPUT WILL BE PLACED IN
*                  THE SEQUENTIAL DATASET USER02.IECIOSCN.ASM.
*
*        //DISASM EXEC PGM=DISASM
*        //STEPLIB DD DSN=SYS1.TECHLOAD,DISP=SHR
*        //SYSPRINT DD SYSOUT=A,DCB=BLKSIZE=121
*        //SYSLIB DD DSN=SYS1.NUCLEUS,DISP=SHR
*        //SYSPUNCH DD DSN=USER02.IECIOSCN.ASM,DISP=(,CATLG),
*                      UNIT=SYSTS,DCB=18960,
*                      SPACE=(TRK,(5,2),RLSE)
*        //SYSIN DD *
*        IEANUC01 IECIOSCN
*
*
*
*  2. PARM FIELD ON THE EXEC CARD: OMIT THE PARM FIELD, UNLESS
*          FLOATING POINT AND/OR PRIVILEGED INSTRUCTIONS ARE TO
*          BE FOUND IN THE CSECT BEING DISASSEMBLED. WHEN THE PARM
*          FIELD IS NOT SPECIFIED, ENTRIES FOR THE PRIVILEGED AND
*          FLOATING POINT INSTRUCTIONS ARE ERASED FROM THE INTERNAL
*          INSTRUCTION TABLES USED DURING DISASSEMBLY. VALID PARM
*          FIELDS ARE:
*            PARM=(SUPVR)     ASSEMBLE PRIVILEGED INSTRUCTIONS
*            PARM=(FLTPT)     ASSEMBLE FLOATING POINT INSTRUCTIONS
*            PARM=(SUPVR,FLTPT) ASSEMBLE BOTH PRIVILEGED AND
*                             FLOATING POINT INSTRUCTIONS.
*
*
*  3. CONTROL CARDS ENTERED IN THE SYSIN DATASET. DATA IS
*                   CONTAINED ONLY IN COLUMNS 1-72. COLUMNS
*                   73-80 MAY BE USED FOR ANY DESIRED PURPOSE.
*                   IN ADDITION, COLUMNS BEYOND THE LAST
*                   SPECIFIED MAY BE USED FOR ANY PURPOSE.
*                   LEADING ZEROS MUST BE INCLUDED IN ALL
*                   FIELDS GIVING HEX OR DECIMAL DATA. NAME
*                   FIELDS MUST BE LEFT JUSTIFIED WITH
*                   TRAILING BLANKS. HEX FIELDS MAY CONTAIN
*                   ONLY THE HEX DIGITS 0-9 AND A-F, WHILE
*                   DECIMAL FIELDS MAY CONTAIN ONLY DIGITS 0-9.
*                   THE MODULE-CSECT CARD MUST BE THE FIRST
*                   CARD IN THE INPUT STREAM. DSECT DEFINITIONS
*                   MAY NOT INCLUDE ANY OTHER CONTROL CARDS.
*                   USING CARDS FOR DSECTS MUST BE ENTERED AT
*                   SOME POINT AFTER THE DSECT DEFINITION.
*                   DATA-ONLY CARDS AND PROGRAM USING CARDS
*                   MAY BE ENTERED IN ANY ORDER EXCEPT
*                   WITHIN DSECT DEFINITIONS.
*
*
*     A. MODULE-CSECT CARD (REQUIRED), MUST BE THE FIRST CARD IN
*                     THE SYSIN STREAM. SPECIFIES THE MODULE NAME
*                     AND CSECT NAME. MODULE NAME IS REQUIRED, AND
*                     MUST NAME AN ENTRY IN THE DIRECTORY OF THE
*                     PDS SPECIFIED BY THE SYSLIB DD CARD. CSECT
*                     NAME IS OPTIONAL. IF SPECIFIED, THE NAMED CSECT
*                     MUST EXIST IN THE MODULE. IF OMITTED, THE
*                     CSECT WITH ESDID=0001 IS DISASSEMBLED.
*        FORMAT: FREE-FORM, WITH MODULE NAME PRECEDING CSECT NAME.
*                AT LEAST ONE BLANK MUST SEPARATE MODULE NAME AND
*                CSECT NAME. THE NAMES MAY BE SURROUNDED BY ANY NUMBER
*                OF BLANKS.
*                FOR EXAMPLE, SEE THE JCL EXAMPLE.
*
*
*
*     B. DATA-ONLY CARD (OPTIONAL), USED TO DESCRIBE AREAS OF THE
*                  CSECT BEING DISASSEMBLED WHICH CONTAIN NO
*                  INSTRUCTIONS. USE OF THIS CARD ELIMINATES
*                  CREATION OF INSTRUCTIONS FROM CONSTANT DATA.
*                  UP TO 256 DATA-ONLY CARDS MAY BE ENTERED. THESE
*                  CARDS MAY OCCUR ANYWHERE IN THE SYSIN STREAM
*                  AFTER THE MODULE-CSECT CARD, BUT NOT WITHIN
*                  A DSECT DEFINITION SET.
*        FORMAT:
*                COL  1-4  : LITERAL 'DATA'
*                COL   5   : BLANK
*                COL  6-11 : OFFSET TO BEGINNING OF AREA IN HEX
*                COL   12  : BLANK
*                COL 13-18 : OFFSET TO END OF AREA IN HEX
*
*
*
*     C. DSECT DEFINITIONS (OPTIONAL). A DSECT IS DEFINED BY A
*                HEADER CARD FOLLOWED BY A VARIABLE NUMBER OF
*                FIELD DEFINITION CARDS (UP TO 9999 OF THEM).
*                NO OTHER CONTROL CARD MAY BE ENTERED WITHIN A
*                DSECT DEFINITION. UP TO 256 DSECT DEFINITIONS
*                MAY BE ENTERED.
*
*        DSECT HEADER CARD FORMAT:
*             COL 1-8    : DSECT NAME
*             COL 9      : BLANK
*             COL 10-14  : LITERAL 'DSECT'
*             COL 15     : BLANK
*             COL 16-19  : NUMBER OF FIELD CARDS TO FOLLOW (DECIMAL)
*
*        DSECT FIELD CARD FORMAT:
*             COL 1-8    : FIELD NAME
*             COL 9      : BLANK
*             COL 10-13  : OFFSET TO LEFT END OF FIELD (DECIMAL)
*                          MAXIMUM OFFSET IS 4095
*             COL 14     : BLANK
*             COL 15-17  : LENGTH OF FIELD IN BYTES (DECIMAL)
*                          MAXIMUM LENGTH IS 256
*
*
*
*     D. ULABL CARDS. THESE CARDS DEFINE USER LABELS TO BE PLACED
*                   ON STATEMENTS WITHIN THE PROGRAM. IF PROGRAM
*                   BASE REGISTERS ARE SET UP WITH USING CARDS,
*                   THESE WILL ALSO BE GENERATED AS SYMBOLIC
*                   OPERANDS ON INSTRUCTIONS. FORMAT IS:
*
*             COL  1-5   : LITERAL 'ULABL'
*             COL   6    : BLANK
*             COL  7-14  : LABEL NAME
*             COL  15    : BLANK
*             COL 16-21  : OFFSET TO LEFT END OF FIELD, IN HEX.
*             COL  22    : BLANK
*             COL 23-25  : LENGTH OF FIELD IN DEC. 256 IS MAX.   FIX***
*
*
*
*     E. USING CARDS. THESE CARDS DEFINE BASE REGISTER USAGE.
*                   UP TO 256 USING CARDS MAY BE ENTERED. USE
*                   OF THESE CARDS PERMITS THE DISASSEMBLER TO
*                   CONVERT EXPLICIT BASE-DISPLACEMENT ADDRESSES
*                   TO SYMBOLIC LABELS. LABELS CREATED WITHIN
*                   THE PROGRAM WILL BE 7 CHARACTERS LONG. THE
*                   FIRST CHARACTER IS 'A', FOLLOWED BY THE
*                   6-HEX-DIGIT OFFSET TO THE LABEL. A USING
*                   CARD MUST BE ENTERED FOR EACH DSECT TO
*                   BE USED.
*
*       FORMAT:
*
*            COL 1-5   : LITERAL 'USING'
*            COL 6     : BLANK
*            COL 7-12  : OFFSET TO BEGIN LOC FOR USING RANGE IN HEX
*                        (THIS IS WHERE THE USING STATEMENT WILL OCCUR)
*            COL 13    : BLANK
*            COL 14-19 : OFFSET TO ENDING LOC FOR USING RANGE IN HEX
*                        (THIS IS WHERE THE DROP STATEMENT WILL OCCUR)
*            COL 20    : BLANK
*            COL 21    : BASE RESISTER TO BE USED (HEX, 1-F)
*            COL 22    : BLANK
*            COL 23    : TYPE, P=PROGRAM BASE, D=DSECT BASE
*            COL 24    : BLANK
*            COL 25-30 : INITIAL BASE REGISTER VALUE IF TYPE P IN HEX
*            COL 25-32 : DSECT NAME IF TYPE D
*
*
*
*  4. SUGGESTIONS FOR USE: ON THE FIRST PASS, DO NOT USE A SYSPUNCH
*                 DD CARD, BUT PRINT THE SYSPRINT LISTING. USE THE
*                 LISTING TO DETERMINE WHICH REGISTERS SRE USED AS
*                 PROGRAM BASE REGISTERS, THEIR INITIAL VALUES, AND
*                 THEIR RANGES. MAKE UP USING CARDS FOR THESE. FIND
*                 ANY PLACES WHERE NO INSTRUCTIONS SHOULD BE GENERATED
*                 (ONLY CONSTANTS), AND MAKE UP DATA-ONLY CARDS FOR
*                 THESE RANGES. IF YOU CAN DETERMINE ANY REGISTERS
*                 THAT ARE BASES FOR AREAS WHICH CAN BE USED FOR
*                 DSECTS (CVT REFERENCE, ETC.), DETERMINE THE
*                 RANGE OF VALID USE, AND MAKE UP DSECT DEFIN
*                 ITIONS AND USING CARDS FOR THESE. MAKE A SECOND
*                 RUN, INCLUDING THE ABOVE CARDS, AND CREATING
*                 A SOURCE PROGRAM OUTPUT WITH THE SYSPUNCH
*                 DD CARD.
*
*
*
*  5. OUTPUT DESCRIPTION:
*
*     A. SYSPUNCH: THIS OUTPUT CONTAINS THE DISASSEMBLED SOURCE
*                  PROGRAM. STATEMENT NAMES BEGIN IN COLUMN 1,
*                  MNEMONICS BEGIN IN COLUMN 10, OPERANDS IN COL
*                  16, AND AN OCCASIONAL COMMENT BEGINS IN COL-
*                  UMN 44. A SEQUENCE NUMBER (BY TENS) IS IN
*                  COLUMNS 73-80. COMMENTS ARE INCLUDED TO SHOW
*                  THE MACRO NAME ASSOCIATED WITH SVC'S, AND OTHER
*                  STATEMENTS ARE FLAGGED TO AID IN IDENTIFICATION
*                  OF CERTAIN OPERATIONS:
*                  BALR 14,15              STD LINKAGE
*                  BALR X,0                ADDRESS SET
*                  OTHER BALR'S            NON-STD LINKAGE
*                  BAL 0,XXX AND BAL 1,XXX PARM SET BRCH
*                  BAL X,XXX               PERFORM
*                  STM INSTRUCTIONS        SAVE REGS
*                  LM  INSTRUCTIONS        RESTORE REGS
*                  BR R14                  EXIT
*                  ABS. LOCATION HEX 10    CVT ADDRESS
*                  ABS. LOCATION HEX 4C    CVT ADDRESS
*                  OTHER ABS. LOCATIONS    PSA REFERENCE
*                  WHEN USED IN EXPLICITLY IN INSTRUCTIONS, REGISTERS
*                  ARE SPECIFIED AS R0, R1, R2,... R15. AN REQU MACRO
*                  IS GENERATED AT THE END OF THE PROGRAM TO CREATE
*                  THE APPROPRIATE EQU STATEMENTS. IF ANY DSECTS
*                  WERE DEFINED IN THE SYSIN DATASET, THEY WILL
*                  BE NEAR THE END OF THE SOURCE PROGRAM.
*                  THE EXTENDED MNEMONICS ARE USED FOR CONDITIONAL
*                  BRANCHES WHEREVER POSSIBLE.
*
*
*
*      B. SYSPRINT CONTENT:
*
*         DIRECTORY INFORMATION: CONTAINS DATA FROM THE DIRECTORY
*                                ENTRY OF THE MODULE CONTAINING
*                                THE CSECT TO BE DISASSEMBLED.
*         ESD TABLE: A FORMATTED LIST OF ALL EXTERNAL SYMBOL ENTRIES
*                                FOUND IN THE MODULE.
*         RLD TABLE: A FORMATTED LISTING OF ALL RELOCATION DICTIONARY
*                                ENTRIES PERTAINING TO THIS CSECT.
*         USER ENTERED CARDS: A LIST OF THE CARDS ENTERED BY THE USER,
*                                WITH DIAGNOSTICS, IF APPROPRIATE.
*         PHASE 1 LABEL TABLE: A LIST OF ALL THE LABELS TO BE USED
*                                DURING DISASSEMBLY INCLUDING THOSE
*                                DEVELOPED FROM ESD ENTRIES, RLD
*                                ENTRIES, AND GENERATED NAMES
*                                RESULTING FROM USING CARD PROCESSING.
*         TEXT: A STORAGE-DUMP FORMATTED LISTING OF THE TEXT WHICH
*                                COMPRISES THE CSECT BEING DIS
*                                ASSEMBLED.
*         SOURCE LISTING: A PRINTOUT OF THE GENERATED SOURCE PROGRAM
*                                STATEMENTS, INCLUDING THE HEX VALUE
*                                WHICH RESULTED IN THE INSTRUCTION'S
*                                CREATION.
*
*
*
* 6. PROGRAM PROCESSING DESCRIPTION.
*
*   THE DISASSEMBLER IS COMPOSED OF THREE MODULES. THE FIRST IS
*   CALLED DISASM. THE SECOND PHASE IS DISASM1, AND THE THIRD IS
*   DISASM2. THE SECOND AND THIRD PHASES ARE LOAD'ED AND PERFORMED
*   BY A BALR 14,15 FROM DISASM.
*
*
*      DISASM FUNCTIONS:
*
*      . PROCESS THE PARM FIELD, IF ANY: SET INDICATORS USED BY
*        DISASM1 AND DISASM2 TO SET UP THEIR INSTRUCTION TABLES.
*      . OPEN ALL FILES.
*      . GET STORAGE FOR THE SYMBOL TABLE, RLD TABLE, AND DATA-ONLY
*        TABLES (109,544 BYTES TOTAL).
*      . PROCESS THE MODULE-CSECT CARD TO OBTAIN THE MEMBER
*        AND CSECT NAMES.
*      . ISSUE BLDL AGAINST SYSLIB TO OBTAIN DIRECTORY INFO FOR
*        THE MEMBER SPECIFIED. IF THE SPECIFIED MEMBER IS AN
*        ALIAS, RE-ISSUE A BLDL FOR THE REAL MEMBER. PRINT
*        DIRECTORY INFORMATION.
*      . POINT TO THE MEMBER IN THE SYSLIB PDS, AND PROCESS THE
*        MEMBER. LOAD MODULES CONTAIN AN EXTERNAL SYMBOL DICTIONARY
*        FOLLOWED BY TEXT AND RELOCATION DICTIONARY INFORMATION.
*        ALL ESD INFO FOR THE MODULE PRECEDES THE FIRST CONTROL
*        RECORD. A CONTROL RECORD PRECEDES EACH BLOCK OF TEXT.
*        RLD INFO FOR THE TEXT FOLLOWS EACH TEXT BLOCK. PROCESSING
*        OF LOAD MODULE INFORMATION IS AS FOLLOWS:
*        A. BUILD AN EXTERNAL SYMBOL TABLE, USING THE CESD BLOCKS.
*        B. SEARCH FOR THE DESIRED CSECT AS THE TABLE IS BEING
*           BUILT. THIS CSECT MUST BE FOUND BEFORE THE FIRST
*           CONTROL RECORD.
*        C. READ BLOCKS UNTIL A CONTROL RECORD FOR THE DESIRED
*           CSECT IS FOUND (BY ESD-ID).
*        D. WHEN FOUND, ISSUE GETMAIN FOR AN AREA LARGE ENOUGH
*           TO CONTAIN THE ENTIRE TEXT.
*        E. PLACE TEXT BLOCKS IN CONTIGUOUS STORAGE LOCATIONS
*           AND MAINTAIN DURING DISASSEMBLY.
*        F. USE RLD INFORMATION FOR THE CSECT TO BUILD THE RLD
*           RLD TABLE.
*      . LOAD AND PERFORM DISASM1.
*      . IF ANY ERRORS FOUND BY DISASM1, TERMINATE PROCESSING.
*      . PRINT THE FINAL LABEL TABLE TO BE USED DURING DISASSEMBLY.
*      . LOAD AND EXECUTE DISASM2.
*      . GENERATE THE DSECT ENTRIES.
*      . GENERATE THE REQU MACRO AND END STATEMENTS
*      . TERMINATE PROCESSING
*
*
*
*       DISASM1 FUNCTIONS:
*
*     DISASM1 IS THE SECOND PHASE OF DISASSEMBLY, AND IS PERFORMED
*     BY DISASM. A COMMON DATA AREA, DEFINED IN DISASM, IS
*     PASSED TO THIS PROGRAM ON ENTRY.
*
*     THE SYSIN FILE IS READ TO EXHAUSTION. USING CARDS ARE
*     REFORMATTED AND STORED IN A TABLE - UP TO 256 USING
*     STATEMENTS MAY BE ENTERED. DSECT CARDS MAY FOLLOW THE
*     USING STATEMENTS. WHEN USED, DSECT STATEMENTS ARE
*     REFORMATTED, AND BUILT INTO TABLES. A MAXIMUM OF 256 DSECTS
*     MAY BE ENTERED. DATA ONLY CARDS MAY BE INCLUDED BEFORE, BETWEEN,
*     OR AFTER DSECTS TO SHOW AREAS IN THE PROGRAM WHERE NO INSTRUCTIONS
*     OCCUR. UP TO 256 DATA ONLY AREAS MAY BE SPECIFIED.
*
*     AT EOF ON SYSIN, A PSEUDO DIS-ASSEMBLY PASS IS MADE
*     USING THE TEXT STORED BY DISASM. ANY RESOLVABLE ADDRESS
*     WITHIN THE TEXT IS USED TO CREATE A NEW ENTRY IN THE
*     LABEL TABLE, WHICH WILL BE USED BY DISASM2 IN THE
*     ACTUAL DIS-ASSEMBLY PASS.
*
*     DISASSEMBLY TABLES ARE SET UP SIMILARLY TO THOSE USED BY
*     DISASM2 FOR THE SIMULATED DISASSEMBLY PERFORMED IN THIS
*     MODULE WHEN ANY PROGRAM BASE REGISTER USING STATEMENTS
*     ARE ENTERED.
*
*     STORAGE IS OBTAINED FOR THE DSECT TABLE AND USING TABLE,
*     AND ADDRESSES OF THESE TABLES ARE STORED IN THE COMMON PARAMETER
*     AREA. USING AND DSECT CARDS ARE EDITED, REFORMATTED, AND PLACED
*     IN THE APPROPRIATE TABLES. IF ANY ERRORS ARE FOUND, THEY ARE
*     PRINTED, AND THE DISASSEMBLY WILL BE TERMINATED ON RETURN
*     TO DISASM.
*
*     STORAGE IS OBTAINED FOR THE LABEL TABLE, AND A SIMULATED
*     DIS-ASSEMBLY IS PERFORMED TO CREATE LABEL TABLE ENTRIES FOR
*     LABELS WHICH WILL BE GENERATED FOR BASE-DISPLACEMENT ADDRESSES
*     BY DISASM2. ON RETURN TO DISASM, THESE LABELS WILL BE SORTED
*     WITH EXTERNAL SYMBOL AND RLD LABELS TO FORM THE FINAL LABEL
*     TABLE TO BE USED BY DISASM2.
*
*
*
*       DISASM2 FUNCTIONS:
*
*     THIS SUB-PROGRAM IS CALLED BY DISASM AFTER COMPLETION OF
*     PROCESSING BY DISASM1. THE FINAL LABEL TABLE
*     AND MODULE TEXT IS IN AN AREA OF STORAGE. A COMMON PARAMETER
*     AREA IS DEFINED IN DISASM, AND PASSED TO THIS PROGRAM.
*
*     TEXT BYTES ARE USED TO CREATE ASSEMBLY LANGUAGE STATEMENTS,
*     AND MACHINE INSTRUCTION STATEMENTS. OUTPUT IS WRITTEN
*     TO THE SYSPUNCH DATASET FOR FURTHER PROCESSING BY OTHER
*     MODULES.
*
*     A TEXT BYTE IS CONSIDERED TO BE AN INSTRUCTION IF
*     IT OCCURS ON A HALFWORD BOUNDARY, IS A VALID OP-CODE,
*     AND IS FOLLOWED BY A VALID OP-CODE. UNCONDITIONAL BRANCHES
*     NEED NOT BE FOLLOWED BY A VALID OP-CODE, HOWEVER. THE
*     PRIVILEGED AND FLOATING POINT INSTRUCTIONS ARE NOT
*     TREATED AS INSTRUCTIONS UNLESS THE USER SPECIFIED
*     THEIR INCLUSION AT EXEC TIME.
*
*
*
* 7. INSTALLATION.
*
*     A. ASSEMBLE AND LINK THE THREE PROGRAMS, DISASM, DISASM1, AND
*        DISASM2.
*     B. IF A SINGLE LOAD MODULE IS DESIRED, THE LOAD AND BALR CODE
*        IN PROGRAM DISASM, LINES 10490-10590, AND LINES 11620-11720
*        MAY BE CHANGED TO CALLS, PASSING THE ADDRESS OF THE COMMON
*        PARAMETER AREA AS A PARAMETER. THE THREE PROGRAMS WILL ALL
*        BE LINKED INTO A SINGLE MODULE WITH ENTRY POINT DISASM, IF
*        THIS IS DONE.
*     C. IF STORAGE UTILIZATION IS FOUND TO BE EXCESSIVE, INVESTIGATE
*        THE POSSIBILITY OF REDUCING THE SIZE OF THE TABLE GETMAINS
*        IN DISASM LINES 1360, 1380, 1440, 1500, 5460, AND 9450, AND
*        IN DISASM1 LINES 1520, 1610, 4160. THE PROGRAMS WERE WRITTEN
*        FOR EASE OF USE WITH AN MVS OPERATING SYSTEM, AND MAY CAUSE
*        PROBLEMS IN A STORAGE CONSTRAINED ENVIRONMENT.
*     D. THE SVC TABLE AND INSTRUCTION OP CODE TABLES IN DISASM1 AND
*        DISASM2 SHOULD BE CHECKED FOR OPERATING SYSTEM VALIDITY,
*        AND CURRENCY WITH THE HARDWARE FROM TIME TO TIME.
*     E. MACROS USED BY THE DISASSEMBLER INCLUDE SVLNK AND REQU.
*        SVLNK IS USED TO ESTABLISH ADDRESSABILITY AND CHAIN
*        SAVE AREAS DURING INITIALIZATION IN EACH PROGRAM, AND
*        SET UP REGISTER EQUATES BY USE OF THE REQU MACRO. THE
*        REQU MACRO IS ALSO PLACED IN EACH DISASSEMBLED PROGRAM
*        IF THESE MACROS ARE USED, THEY SHOULD BE PLACED IN A MACRO
*        LIBRARY OR PREFIXED TO THE SOURCE BEFORE ASSEMBLY. IF
*        OTHER MACROS ARE USED IN THEIR PLACE, MAKE APPROPRIATE
*        SOURCE CODE CHANGES IN DISASM, DISASM1, AND DISASM2
*        BEFORE ASSEMBLY.
*     F. DIRECT TECHNICAL INQUIRIES, COMMENTS, SUGGESTIONS FOR
*        IMPROVEMENTS, ETC, TO:
*             DICK THORNTON
*             BLUE CROSS OF VIRGINIA
*             2015 STAPLES MILL ROAD
*             RICHMOND, VA. 23279
*
*             PHONE: (804) 359-7248
*
./ ADD NAME=$DODIAG  0100-94267-94267-1200-00100-00100-00000-CONYERS
DODIAG   CSECT
         STM   R14,R12,12(R13)             SAVE REGS
         LR    R12,R15
         ST    R13,228(,R12)
         LR    R2,R13
         LA    R13,224(,R12)
         ST    R13,8(R2)
         LR    R7,R1
         MVI   0(R7),X'00'
         L     R2,0(,R7)
         STPT  320(R12)
         SR    R9,R9
         LH    R9,0(R2)
         SH    R9,328(,R12)
         STC   R9,61(,R12)
         STC   R9,153(,R12)
         LA    R2,2(R2)
         LA    R7,330(,R12)
         MVC   0(1,R7),0(R2)
         SR    R7,R7
         SR    R9,R9
         SR    R2,R2
         L     R3,16                       CVT ADDRESS
         L     R4,0(,R3)
         L     R4,4(R4)
         L     R5,0(,R4)
         L     R15,300(,R12)
         LA    R14,106(,R12)
         L     R0,296(,R12)
         LA    R1,312(,R12)
         SVC   232                         << USER SVC >>
         SR    R9,R9
         L     R15,368(,R12)
         BALR  R14,R15                     STD LINKAGE
         ICM   R9,15,0(R1)
         BZ    184(,R12)
         L     R15,548                     PSA REFERENCE
         LH    R15,36(,R15)
         SLL   R15,5
         AL    R15,100(,R9)
         ICM   R7,15,28(R15)
         BZ    184(,R12)
         LR    R8,R7
         A     R8,308(,R12)
         CLC   0(20,R7),330(R12)
         BE    176(,R12)
         LA    R7,1(R7)
         CR    R7,R8
         BH    184(,R12)
         B     152(,R12)
         S     R7,304(,R12)
         MVI   0(R7),X'FF'
         BAL   R1,192(,R12)                PARM SET BRCH
         DC    F'00036'
         L     R1,0(,R1)
         SVC   107                         MODESET
         LA    R6,350(,R12)
         LA    R10,11
         DIAGN R6,R10,8                    PSA REFERENCE
         L     R13,228(,R12)
         LM    R14,R12,12(R13)             RESTORE REGS
         LA    R15,0
         BCR   R15,R14
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    C'CDMS'
         DC    F'0'
         DC    F'00003'
         DC    X'000007'
         DC    C'DKEY '
         DC    X'0E010000'
         DC    F'0'
         DC    F'0'
         DC    H'0001'
         DC    C'        '
         DC    C'        '
         DC    C'    QUER'
         DC    C'Y FILES'
         DC    X'00'
         DC    H'0'
         DC    F'0'
         DC    V($ACFGCVT)
         REQU
         END
./ ADD NAME=$REQU    0100-94267-94267-1200-00026-00026-00000-CONYERS
         MACRO
         REQU
**                           EQUATES FOR SYMBOLIC REG USAGE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
RA       EQU   10
RB       EQU   11
RC       EQU   12
RD       EQU   13
RE       EQU   14
RF       EQU   15
         MEND
./ ADD NAME=$SVC243  0100-94267-94267-1200-00131-00131-00000-CONYERS
IGC0024C CSECT
         BALR  R6,R0                       ADDRESS SET
         BCTR  R6,R0
         BCTR  R6,R0
         B     46(,R6)
         DC    C'SVC 243 '
         DC    C'SPF COMP'
         DC    C'RESS 06'
         DC    X'61'
         SRP   504(16,R6),1344(R15),04
         MVO   3061(16,R4),2112(5,R15)
         LA    R11,5
         CR    R0,R11
         BCR   2,R14
         LTR   R0,R0
         BCR   4,R14
         LR    R11,R0
         SLL   R11,2
         B     68(R11,R6)
         B     92(,R6)
         B     124(,R6)
         B     196(,R6)
         B     220(,R6)
         B     240(,R6)
         B     254(,R6)
         L     R11,28(R5)
         CLC   21(3,R11),361(R3)
         NOPR  R0                    <--- thar tis!
         L     R11,180(,R4)
         BCT   R1,118(,R6)
         OI    236(R11),X'01'
         BR    R14                         EXIT
         NI    236(R11),X'FE'
         BR    R14                         EXIT
         LR    R11,R7
         LA    R15,4
         LTR   R1,R1
         BCR   4,R14
         BC    8,180(,R6)
         L     R11,556(,R3)
         C     R1,516(,R11)
         BCR   2,R14
         LA    R11,528(,R11)
         LA    R1,1(,R1)
         SLL   R1,2
         LA    R11,0(R1,R11)
         SRL   R1,2
         BCTR  R1,R0
         TM    0(R11),X'80'
         BCR   1,R14
         L     R11,0(,R11)
         L     R11,60(,R11)
         LTR   R11,R11
         BCR   8,R14
         LH    R1,82(,R11)
         SLR   R15,R15
         BR    R14                         EXIT
         L     R11,60(,R7)
         LA    R11,0(,R11)
         LA    R15,4
         LTR   R11,R11
         BCR   8,R14
         SLR   R15,R15
         LM    R0,R1,104(R11)              RESTORE REGS
         BR    R14                         EXIT
         L     R1,60(,R7)
         SLR   R15,R15
         LTR   R0,R1
         BCR   8,R14
         LH    R0,36(,R1)
         L     R1,44(,R1)
         BR    R14                         EXIT
         BR    R14                         EXIT
         BAL   R8,318(,R6)                 PERFORM
         BCR   7,R14
         LM    R0,R13,32(R5)               RESTORE REGS
         BR    R15
         BR    R14                         EXIT
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    H'0'
         L     R11,172(,R7)
         LA    R11,0(,R11)
         SLR   R12,R12
         LTR   R11,R11
         BZ    346(,R6)
         CLC   0(2,R11),432(R6)
         BNE   410(,R6)
         BR    R8
         L     R11,60(,R7)
         LA    R11,0(,R11)
         LTR   R11,R11
         BZ    416(,R6)
         L     R11,176(,R7)
         LTR   R11,R11
         BCR   8,R8
         CLC   0(2,R11),432(R6)
         BNE   410(,R6)
         L     R11,180(,R4)
         LA    R11,0(,R11)
         LTR   R11,R11
         BZ    410(,R6)
         L     R11,264(,R11)
         LA    R11,0(,R11)
         LTR   R11,R11
         BZ    410(,R6)
         SR    R12,R12
         BR    R8
         BCTR  R12,R0
         CLR   R12,R8
         BR    R8
         L     R11,128(,R7)
         CLC   0(5,R11),434(R6)
         BCR   8,R8
         B     410(,R6)
         DC    C'SSTSSO '
         REQU
         END
./ ADD NAME=ASSEMBLE 0100-94267-94267-1200-00025-00025-00000-CONYERS
//M301DISA JOB (T201,B-71),'CONYERS - TEST',NOTIFY=AUDIT01,CLASS=A,
//         MSGLEVEL=(1,1),MSGCLASS=T,TIME=(,10)
//*
//ASM      EXEC PGM=ASMBLR,PARM='TERM,XREF(SHORT),LOAD,NODECK'
//SYSLIB   DD DSN=SYS1.AMODGEN,DISP=SHR
//         DD DSN=SYS1.MACLIB,DISP=SHR
//         DD DSN=M3.M301XXMV.CNTL,DISP=SHR
//SYSTERM  DD SYSOUT=*
//SYSPRINT DD SYSOUT=*,DCB=(RECFM=FBM,LRECL=121,BLKSIZE=3146)
//SYSGO    DD UNIT=3380,DSN=&OBJMOD,DISP=(MOD,PASS),
//         SPACE=(3120,(20,20)),DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)
//SYSUT1   DD UNIT=3380,SPACE=(3120,(80,80)),DSN=&SYSUT1
//SYSUT2   DD UNIT=3380,SPACE=(3120,(80,80)),DSN=&SYSUT2
//SYSUT3   DD UNIT=3380,SPACE=(3120,(80,80)),DSN=&SYSUT3
//SYSIN    DD DSN=M3.M301XXDS.CNTL(DISASM3),DISP=SHR
//*
//LINK     EXEC PGM=IEWL,PARM='TEST,LET,XREF,LIST,NCAL,SIZE=(,)',
//         REGION=240K,COND=(4,LT,ASM)
//SYSLMOD  DD DSN=M3.M301XXDS.LOAD,DISP=SHR
//SYSPRINT DD SYSOUT=*,DCB=(RECFM=FBA,LRECL=121,BLKSIZE=3146)
//SYSUT1   DD UNIT=3380,SPACE=(3120,(80,80)),DSN=&SYSUT1
//SYSLIN   DD DSN=&OBJMOD,DISP=(OLD,DELETE)
//         DD DDNAME=SYSIN
//SYSIN    DD *
   NAME DISASM3(R)
./ ADD NAME=DISANSVC 0100-94267-94267-1200-00056-00056-00000-CONYERS
//M301SVCX JOB (T201,B-71),'CONYERS - DISANSVC',CLASS=A,TIME=(,05),
//         NOTIFY=AUDIT01,MSGLEVEL=(1,1),MSGCLASS=T
//STEP01   EXEC PGM=DYL280,REGION=2000K
//STEPLIB  DD DSN=T2.T201XXXX.DYLLIB,DISP=SHR <--- DYL-280
//         DD DSN=M3.M301XXDS.LOAD,DISP=SHR   <--- DISASM
//         DD DSN=M3.M301XXMV.LOAD,DISP=SHR   <--- ASHAVCV2
//SYSPRINT DD SYSOUT=*
//SYS280R  DD SYSOUT=*
//SYS004   DD DSN=&&WORK280,DISP=(,PASS),UNIT=SYSDA,
//         SPACE=(TRK,(5,5))
//OIGPRINT DD SYSOUT=*
//SYSIN    DD *
*
* USES DISASM3 TO DISASSEMBLE AN SVC
*
FILE SYSIN CARD DUMMY
WORKAREA
  SVC       8 1
  SVCNUM    4 1   BI    (SVC'NUM)       ; SVC NUM FOR CALL
  SVCADR    4 1   BI  A (ENTRY'ADDRESS) ; ENTRY POINT ADDR
  HIGHBIT   1 1   BI                    ;
  SVCATT    2 5   BI    (ATTRIBUTES)    ;
  SVCTYPE   1 5   BI                    ;
*                           X'00' TYPE 1 SVC
*                           X'80' TYPE 2 SVC
*                           X'C0' TYPE 3 OR 4 SVC
*                           X'20' TYPE 6 SVC
*                           X'08' APF AUTHORIZED
*                           X'04' SVC IS A PART OF ESR
*                           X'02' NON-PREEMPTIVE SVC
*                           X'01' SVC CAN BE ASSISTED
  SVCRESRV  1 6    BI                    ; RESERVED BYTE
  SVCLOCKS  2 7    BI
*                           X'80' LOCAL LOCK NEEDED
*                           X'40' CMS LOCK NEEDED
*                           X'20' OPT LOCK NEEDED
*                           X'10' SALLOC LOCK NEEDED
*                           X'08' DISP LOCK NEEDED
*
WORKAREA
  DISPARMS  8  1                  ;DISASM CONTROL BLOCK
  DISPARM1  4  1  BI              ;  STORAGE LOCATION TO START DISASM
  DISPARM2  4  5  BI              ;  LENGTH IN DECIMAL
*
SVCPART:
*
  SVCNUM = 232
* ASHAVCV2 RETURNS SVC STUFF FROM IN-STORAGE SVCTABLE
  CALL ASHSVCV2 USING SVC
* UNCOMMENT THE FOLLOWING LINE IF ON XA SYSTEM   <--- LOOK!
* COMBINE BITS X'7F' AND HIGHBIT
  DISPARM1 = SVCADR
  DISPARM2 = 500
  CALL DISASM3 USING DISPARMS
  STOP
FIN
./ ADD NAME=DISASM   0100-94267-94267-1200-01683-01683-00000-CONYERS
DIS      TITLE '***** DISASSEMBLY PHASE 0 *****'
         MACRO
&NAME    SVLNK &REG1,&REG2,&REG3,&IND,&LV=
         GBLC  &EQU
         GBLC  &GM
         GBLC  &CSECT
         LCLC  &REGA
         AIF   (T'&NAME EQ 'O').NOCSECT
         AIF   ('&NAME' EQ '*').NOCSECT
&CSECT   SETC  '&NAME'
&CSECT   CSECT 
         AGO   .RST
.NOCSECT ANOP
&CSECT   SETC  '*'
         CSECT 
.RST     ANOP
         AIF   ('&EQU' EQ 'ON').NRQ
&EQU     SETC  'ON'
*
***REGISTER EQUATES***
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
.NRQ     ANOP
*
*******************  PROGRAM INITIALIZATION  *************************
*
         AIF   (T'&REG1 EQ 'O').NOREG
&REGA    SETC  '&REG1'
         AIF   (T'&REG2 EQ 'O').ONEREG
         USING &CSECT,&REGA,&REG2 
         AGO   .BYUSE
.NOREG   ANOP
&REGA    SETC  'R3'
.ONEREG  USING &CSECT,&REGA 
.BYUSE   ANOP
         STM   R14,R12,12(R13) :       STORE REGS IN HIGH SAVE AREA
         LR    &REGA,R15 
         AIF   (T'&REG2 EQ 'O').NOLA
         LA    &REG2,4095(&REGA) 
         LA    &REG2,1(&REG2) 
.NOLA    ANOP
         AIF   (T'&REG3 EQ 'O').NOLNK
         L     &REG3,0(R1) 
.NOLNK   ANOP
         AIF (T'&IND EQ 'O').GETIT
         CNOP  0,4
         BAL   R15,SAVEAREA+72 
SAVEAREA DS    18F 
         ST    R15,8(R13)
         ST    R13,SAVEAREA+4
         LR    R13,R15
         AGO   .NOSAVE
.GETIT   ANOP
         AIF   (T'&LV EQ 'O').GMD
&GM      SETC  '&LV'
         AGO   .DGM
.GMD     ANOP
&GM      SETC  '72'
.DGM     ANOP
*
***GET MAIN STORAGE FOR SAVE AREA***
*
         AIF   ('&GM' LT '4096').LA
         GETMAIN R,LV=&GM 
         AGO   .EGM
.LA      ANOP
         LA    R0,&GM                  GET &GM BYTES
         GETMAIN R,LV=(0)
.EGM     ANOP
*
***SET UP SAVE AREA POINTERS***
*
         ST    R1,8(R13) 
         ST    R13,4(R1) 
         LR    R13,R1 
         AIF   (T'&REG3  NE 'O').NOSAVE
         L     R1,4(R13) 
         L     R1,24(R1) 
.NOSAVE  ANOP
         AIF   ('&CSECT' EQ '*').EXIT
         B     *+12
         DC    CL8'&CSECT'  
.EXIT    ANOP
*
*********************  END INITIALIZATION  ***************************
*
         MEND
         EJECT
DISASM   SVLNK R3,R4
         PRINT NOGEN
*DISASSEMBLER PROGRAM TO CREATE AN ASSEMBLER SOURCE PROGRAM
*FROM A LOAD MODULE IN A PDS. DD CARDS REQUIRED INCLUDE
*SYSPRINT FOR MESSAGES AND DIAGNOSTICS USING BLKSIZE A MULTIPLE
*OF 121, SYSLIB SPECIFYING THE PDS CONTAINING THE MEMBER,        FIX***
*WHICH MUST BE A PDS, SYSPUNCH FOR THE ASSEMBLER SOURCE
*PROGRAM, HAVING BLKSIZE A MULTIPLE OF 80, AND SYSIN
*FOR THE CONTROL CARD INPUT. CONTROL INPUT MAY OPTIONALLY
*BE ENTERED VIA THE PARM ON THE EXECUTE CARD. CONTROL
*INFORMATION INCLUDES THE MEMBER NAME AND CSECT NAME
*TO BE DISASSEMBLED. IF CSECT NAME IS OMITTED, THE CSECT
*FOR ESD-ID 0001 WILL BE USED.
*
*
* FILES USED BY THIS PROGRAM INCLUDE THE FOLLOWING:
*
* DDNAME SYSLIB: RECFM=U. INPUT LOAD MODULE LIBRARY.
*
* DDNAME SYSPUNCH: RECFM=FB,LRECL=80. OUTPUT FILE CONTAINING
*                 DISASSEMBLED TEXT. (MAXBLK=18,960)
*
* DDNAME SYSPRINT: RECFM=FBA,LRECL=121.  PRINTED OUTPUT CONTAINING A
*                LIST OF THE ESD TABLE, RLD TABLE, AND TEXT.
*                (MAXBLK=18997)
* DDNAME LOADLIB: (OPTIONAL) NAMES A PDS CONTAINING THE
*                 MODULES OF DISASM IF DIFFERENT FROM
*                 THE STEPLIB. USED PRIMARILY FOR TSO.
*
* DDNAME SYSIN: RECFM=FB, LRECL=80. CONTROL CARD INPUT.
*
*
* THE CONTROL CARD PROVIDES THE MEMBER NAME AND CSECT NAME
* OF THE PROGRAM TO BE DISASSEMBLED. MEMBER NAME IS REQUIRED.
* IF CSECT NAME IS OMITTED, THE CSECT WITH ESDID 0001 WILL
* BE USED. FORMAT IS FREE-FORM. MEMBER NAME MUST PRECEDE CSECT
* NAME. ANY NUMBER OF BLANKS MAY PRECEDE AND FOLLOW MEMBER NAME.
* A COMMA MAY IMMEDIATELY FOLLOW MEMBER NAME IF DESIRED.
*
*
* PARM DATA FROM THE EXECUTE CARD MAY BE USED TO SPECIFY
* VALIDITY OF PRIVILEGED OR FLOATING POINT INSTRUCTIONS.
* IF NOT SPECIFIED, PRIVILEGED AND FLOATING POINT OPERATION
* CODES WILL NOT BE TREATED AS INSTRUCTION OP-CODES. TO
* INCLUDE THESE INSTRUCTIONS, CODE:
*     PARM=(SUPVR)      PRIVILEGED INSTRUCTIONS
*     PARM=(FLTPT)      FLOATING POINT INSTRUCTIONS
*     PARM=(SUPVR,FLTPT) BOTH
*
*
*PROCESSING FLOW:
* 1. PROCESS THE CONTROL INFORMATION TO OBTAIN THE MEMBER
*    AND CSECT NAMES.
* 2. ISSUE BLDL AGAINST SYSLIB TO OBTAIN DIRECTORY INFO FOR
*    THE MEMBER SPECIFIED. IF THE SPECIFIED MEMBER IS AN
*    ALIAS, RE-ISSUE A BLDL FOR THE REAL MEMBER. PRINT
*    DIRECTORY INFORMATION.
* 3. POINT TO THE MEMBER IN THE SYSLIB PDS, AND PROCESS THE
*    MEMBER. LOAD MODULES CONTAIN AN EXTERNAL SYMBOL DICTIONARY
*    FOLLOWED BY TEXT AND RELOCATION DICTIONARY INFORMATION.
*    ALL ESD INFO FOR THE MODULE PRECEDES THE FIRST CONTROL
*    RECORD. A CONTROL RECORD PRECEDES EACH BLOCK OF TEXT.
*    RLD INFO FOR THE TEXT FOLLOWS EACH TEXT BLOCK. PROCESSING
*    OF LOAD MODULE INFORMATION IS AS FOLLOWS:
*    A. BUILD AN EXTERNAL SYMBOL TABLE, USING THE CESD BLOCKS.
*    B. SEARCH FOR THE DESIRED CSECT AS THE TABLE IS BEING
*       BUILT. THIS CSECT MUST BE FOUND BEFORE THE FIRST
*       CONTROL RECORD.
*    C. READ BLOCKS UNTIL A CONTROL RECORD FOR THE DESIRED
*       CSECT IS FOUND (BY ESD-ID). WHEN FOUND, SAVE THE
*       TEXT FOR DISASSEMBLY, AND USE THE FOLLOWING RLD
*       INFORMATION TO BUILD A RELOCATION DICTIONARY TO BE USED
*       DURING DISASSEMBLY.
* 4. DISASSEMBLY USES THE EXTERNAL SYMBOL TABLE, RELOCATION
*    DICTIONARY, AND TEXT BUILT BY THE PREVIOUS STEPS.
*
*
* AUTHOR R THORNTON - NOV 1977
*
*
****************************************************************
*                                                              *
* PROCESS THE PARM FIELD, IF ANY.                              *
*                                                              *
****************************************************************
*
         L     R12,0(R1)               GET PARM FIELD ADDRESS
         SR    R1,R1                   CLEAR WORK REG
         ICM   R1,3,0(R12)             PICK UP PARM LENGTH
         BZ    OPENS                   NO PARM INFO ENTERED
         CH    R1,H5                   5-BYTES OF PARM
         BE    SGLPARM                 YES, SINGLE PARM FIELD
         CH    R1,H11                  11-BYTES OF PARM
         BE    DBLPARM                 YES, BOTH PARMS
BADPARM  WTO   'INVALID PARM, SPECIFY ONLY SUPVR AND/OR FLTPT',        X
               ROUTCDE=11
         ABEND 777,DUMP
SGLPARM  CLC   2(5,R12),=C'SUPVR'      IS PARM=SUPVR
         BE    SUPARM                  YES
         CLC   2(5,R12),=C'FLTPT'      PARM IS FLTPT
         BNE   BADPARM                 NO, ERROR
         MVI   FLPTASM,1               SET FLOATING POINT O.K.
         B     OPENS                   CONTINUE
DBLPARM  CLC   2(5,R12),=C'SUPVR'      IS 1ST PARM SUPVR
         BE    CK2FPT                  YES
         CLC   2(5,R12),=C'FLTPT'      IS 1ST PARM FLTPT
         BNE   BADPARM                 NO, ERROR
         CLC   8(5,R12),=C'SUPVR'      IS 2ND PARM SUPVR         FIX***
         BNE   BADPARM                 NO, ERROR
         B     FPT2PARM                BOTH O.K.
CK2FPT   CLC   8(5,R12),=C'FLTPT'      IS 2ND PARM FLTPT         FIX***
         BNE   BADPARM                 YES
FPT2PARM MVI   FLPTASM,1               SET FLOATING POINT O.K.
SUPARM   MVI   PRIVASM,1               SET PRIVILEGED INSTR O.K.
OPENS    RDJFCB LOADLIB                WAS LOADLIB DD CARD INCLUDED
         LTR   R15,R15                 JFCB READ O.K.
         BNZ   OPEN1                   NO, DONT OPEN
         OPEN  LOADLIB                 GOT DD CARD, OPEN FILE
*
****************************************************************
*                                                              *
* GET STORAGE FOR THE SYMBOL TABLE, RLD TABLE, AND DATA-ONLY   *
* TABLES, AND OPEN FILES.                                      *
*                                                              *
****************************************************************
*
OPEN1    OPEN  (SYSPRINT,OUTPUT,SYSPUNCH,OUTPUT)
         OPEN  (SYSLIB,,SYSIN)         OPEN FILES
         TM    SYSIN+48,X'10'          DID SYSIN OPEN O.K.
         BZ    NOCTL                   NO
         BAL   R9,GETCTL               EXTRACT DESIRED MEMBER AND CSECT
         BAL   R9,BLDL                 ISSUE BLDL AND PRINT
         MVI   CCAT,0                  INSURE TTR0
         POINT SYSLIB,TTRMOD           POINT TO 1ST BLOCK OF MODULE
         GETMAIN R,LV=40000            GET BUFFER STORAGE
         ST    R1,BUFAD                SAVE BUFFER ADDRESS
         GETMAIN R,LV=76000            GET SYMBOL TABLE STORAGE
         ST    R1,SYMTBAD              SAVE SYMBOL TABLE ADDRESS
         ST    R1,CURRSYM              SAVE CURRENT SYMBOL ADDR
         MVI   0(R1),X'FF'             TABLE END INDIC
         A     R1,ENDSYM               COMPUTE END ADDR
         ST    R1,ENDSYM               STORE TBL END ADDR
         GETMAIN R,LV=120000           GET RLD TABLE STORAGE
         ST    R1,RLDTBL               SAVE RLD TABLE ADDRESS
         ST    R1,CURRLD               SAVE CURRENT RLD ADDR
         MVI   0(R1),X'FF'             TABLE END INDIC
         A     R1,ENDRLD               COMPUTE END ADDR
         ST    R1,ENDRLD               STORE TBL END ADDR
         GETMAIN R,LV=3088             GET DATA ONLY TABLE STORAGE
         ST    R1,DATONLY              SAVE TBL ADDRESS
         MVC   0(3,R1),HIVAL           SET END VALUE
         ST    R1,DATOCUR              SET CURRENT ADDRESS
         A     R1,ENDATO               COMPUTE TABLE END ADDR
         ST    R1,DATOEND              SAVE END ADDR
         MVC   PRT+15(29),=C'*** EXTERNAL SYMBOL TABLE ***'
         MVI   PCC,C'-'                SET SKIP 3 LINES
         BAL   R9,PRINT                PRINT
         MVC   PRTLINE,SYMHDR          SYM TBL HEADER
         BAL   R9,PRINT                PRINT
*
*
*
****************************************************************
*                                                              *
* MAINLINE PROCESSING FOR THE LOAD MODULE. THE DIRECTORY ENTRY *
* AND TEXT ARE PROCESSED.                                      *
*                                                              *
****************************************************************
*
MAINLINE EQU   *                       MAINLINE ROUTINE
         L     R6,BUFAD                GET BUFFER ADDRESS
         READ  DECB,SF,SYSLIB,(6),'S'  READ BLOCK FROM MEMBER
         CHECK DECB                    AWAIT COMPLETION
         CLI   0(R6),X'20'             CESD RECORD
         BNE   TESTOTHR                NO
         BAL   R9,CESDREC              PROCESS CESD RECORDS
         B     MAINLINE                GO READ AGAIN
TESTOTHR LA    R9,CNTLRECS             ASSUME CONTROL RECORD
         CLI   0(R6),1                 IT IS CONTROL
         BE    PERFORM                 YES
         CLI   0(R6),5                 IS IT CONTROL
         BE    PERFORM                 YES
         CLI   0(R6),13                IS IT CONTROL
         BE    PERFORM                 YES
         LA    R9,RLDRECS              ASSUME RLD RECORD
         CLI   0(R6),2                 IS IT RLD
         BE    PERFORM                 YES
         CLI   0(R6),6                 IS IT RLD
         BE    PERFORM                 YES
         CLI   0(R6),14                IS IT RLD
         BE    PERFORM                 YES
         LA    R9,CTRLRECS             ASSUME CONTROL AND RLD
         CLI   0(R6),3                 IS IT CTL AND RLD
         BE    PERFORM                 YES
         CLI   0(R6),7                 IS IT CTL AND RLD
         BE    PERFORM                 YES
         CLI   0(R6),15                IS IT CTL AND RLD
         BE    PERFORM                 YES
         B     MAINLINE                NONE OF THESE, SKIP
PERFORM  TM    PROCESS,X'80'           WAS CSECT FOUND
         BZ    MISSCS                  NO, ERROR
         BALR  R9,R9                   PERFORM APPROPRIATE ROUTINE
         TM    PROCESS,X'40'           MODULE PROCESSING DONE
         BZ    MAINLINE                NO, GO READ AGAIN
         MVI   EOFSW+1,0               SET END OF FILE SWITCH
         B     ENDINIT                 GO COMPLETE PROCESSING
*
*
*
****************************************************************
*                                                              *
* PROCESS LOAD MODULE CONTROL RECORDS. THESE RECORDS PRECEDE   *
* TEXT RECORDS, WHICH ARE READ AND PLACED IN STORAGE IN CONTIG-*
* UOUS LOCATIONS SO THAT THE TEXT FOR THE DESIRED CSECT WILL   *
* ALL BE IN STORAGE FOR THE REMAINDER OF DISASSEMBLY.          *
*                                                              *
****************************************************************
*
CNTLRECS EQU   *                       CONTROL RECORD PROCESSING
         ST    R9,CT9                  SAVE RETURN ADDR
         SR    R8,R8                   CLEAR WORK
         ICM   R8,7,9(R6)              LKED ASGND @ OF TXT
         TM    0(R6),X'08'             RECORD PRECEDES LAST RECORD OF M
         BZ    CNCKTYP                 NO
         OI    PROCESS,X'40'           YES, SHOW PROCESSING COMPLETE
CNCKTYP  TM    0(R6),X'02'             CONTROL AND RLD
         BO    CNPASRLD                YES
         LA    R12,16(R6)              @ CESD ENTRY NBR
         B     CNCKESD                 CONTINUE
CNPASRLD LH    R12,6(R6)               GET RLD SECTION LENGTH
         LA    R12,16(R6,R12)          @ CESD ENTRY NBR
CNCKESD  LH    R11,4(R6)               LENGTH OF CONTROL INFO SECTION
         SRL   R11,2                   COMPUTE NBR CNTL ENTRIES
         SR    R10,R10                 OFFSET TO 1ST BYTE
         SR    R9,R9                   LENGTH OF TEXT
CNCKESD1 CLC   ESDID,0(R12)            THIS THE DESIRED ESD   FIX***
         BE    CNFNDIT                 YES
         AH    R10,2(R12)              MAINTAIN OFFSET TO 1ST TEXT BYTE
         LA    R12,4(R12)              TO NEXT CNTL ENTRY
         BCT   R11,CNCKESD1            LOOP THRU CNTL ENTRIES  FIX***
         B     READTEXT                GO READ FOLLOWING TEXT
CNFNDIT  LH    R9,2(R12)               GET TEXT LENGTH
READTEXT READ  DECB,SF,,(6),MF=E       READ FOLLOWING TEXT RECORD
         CHECK DECB                    AWAIT COMPLETION
         LTR   R9,R9                   DOES IT CONTAIN DESIRED TEXT
         BZ    CTXIT                   NO, SKIP IT
         S     R8,START                (-) OFFSET IN MODULE    FIX***
         AR    R8,R10                  ADD OFFSET OF PORTION IN RCD  **
*           R8 SHOULD NOW CONTAIN THE OFFSET WITHIN THE CSECT
*           THAT THIS BLOCK CONTAINS (TRICKY).
*
         A     R10,BUFAD               @ 1ST TEXT BYTE
***      S     R8,START    MOVED UP    RELATIVIZE TEXT ADDR    FIX***
         A     R8,TXTSTRT              @ PLACE TO MOVE TEXT
         LR    R11,R9                  COPY LENGTH TO MOVE
         MVCL  R8,R10                  MOVE TEXT TO STORAGE
CTXIT    L     R9,CT9                  GET RETURN ADDR
         BR    R9                      EXIT
*
*
*
****************************************************************
*                                                              *
* PROCESS RLD RECORDS. A TABLE OF RLD DATA IS BUILT WHICH WILL *
* LATER BE USED TO BUILD PROGRAM LABELS AND ADCONS.            *
*                                                              *
****************************************************************
*
RLDRECS  EQU   *                       RLD RECORD PROCESSING
         TM    0(R6),X'08'             LAST RECORD OF MODULE
         BZ    RLSV9                   NO
         OI    PROCESS,X'40'           SHOW PROCESSING COMPLETE
RLSV9    ST    R9,RL9                  SAVE RETURN ADDR
RLDSW    NOP   RLDST                   FIRST TIME SWITCH
         MVI   RLDSW+1,C'0'            RESET 1ST TIME SW
         MVC   PRT+15(20),=C'***** RLD INFO *****'
         MVI   PCC,C'-'                SKIP 3 LINES
         BAL   R9,PRINT                PRINT
         MVC   PRTLINE,RLDHDR          RLD HEADER
         BAL   R9,PRINT                PRINT RLD HEADER
RLDST    LH    R8,6(R6)                NBR BYTES OF RLD DATA
         LA    R6,16(R6)               @ 1ST BYTE OF RLD DATA
         AR    R8,R6                   END OF RLD DATA ADDR
         L     R7,CURRLD               @ NEXT RLD TBL ENTRY
         USING RLDTBLD,R7
         LH    R10,0(R6)               RELOCATION POINTER
         LH    R11,2(R6)               POSITION POINTER
         LA    R6,4(R6)                PASS POINTERS
RLDNXT   CLC   1(3,R6),START+1         RLD ADDR BELOW CSECT
         BL    RLDSTEP                 LOW, IGNORE
         CLC   1(3,R6),END+1           RLD ADDR ABOVE CSECT
         BH    RLDSTEP                 HIGH, IGNORE
         C     R7,ENDRLD               END OF RLD TBL
         BE    RLDFULL                 YES, ERROR
         STH   R10,RLDRP               SAVE RELOC PTR
         STH   R11,RLDPP               POS PTR
         PACK  RLDTYPE,0(1,R6)         INVERT FLAG BYTE
         NI    RLDTYPE,X'0F'           CLEAR HI-ORDER
         CLI   RLDTYPE,9               UNRESOLVED
         BNE   RLDMOVLN                NO
         MVI   RLDTYPE,8               YES, USE PREFERRED VALUE
RLDMOVLN MVC   RLDLEN,0(R6)            FLAG BYTE
         NI    RLDLEN,X'0F'            CLEAR HI-ORDER
         SR    R12,R12                 CLEAR WORK
         IC    R12,RLDLEN              PICK UP BYTE
         SRL   R12,2                   SHIFT OUT DIR, IND BITS
         LA    R12,1(R12)              ADD 1 = LENGTH
         STC   R12,RLDLEN              LENGTH CODE
         MVI   RLDDIR,C'+'             ASSUME POS RELOC
         TM    0(R6),2                 IS IT POSITIVE
         BZ    RLADMV                  YES
         MVI   RLDDIR,C'-'             NO, SHOW NEGATIVE
RLADMV   SR    R1,R1                   CLEAR WORK REG
         ICM   R1,7,1(R6)              PICK UP ADDRESS
         S     R1,START                RELATIVIZE WITHIN CSECT
         STCM  R1,7,RLDADDR            SAVE RELATIVE ADDRESS
         LA    R12,RLDRP               @ RELOC PTR
         BAL   R9,HEXPRT2              CONVERT
         MVC   PRT+6(4),PRTABL         RELOC PTR
         LA    R12,RLDPP               @ POS PTR
         BAL   R9,HEXPRT2              CONVERT
         MVC   PRT+14(4),PRTABL        POS PTR
         MVC   PRT+24(4),=C'ACON'      ASSUME A TYPE ADCON
         CLI   RLDTYPE,0               IS IT ADCON
         BE    RLDLN                   YES
         MVC   PRT+24(4),=C'VCON'      ASSUME VCON
         CLI   RLDTYPE,1               IS IT VCON
         BE    RLDLN                   YES
         MVC   PRT+22(6),=C'PRDISP'    ASSUME PSEUDO REG DISPL
         CLI   RLDTYPE,2               IS IT P.R. DISPL
         BE    RLDLN                   YES
         MVC   PRT+22(6),=C'PRCUM'     ASSUME PSEUDO REG CUMUL DISPL
         CLI   RLDTYPE,3               IS IT P.R. CUM DISPL
         BE    RLDLN                   YES
         MVC   PRT+21(10),=C'UNRESOLVED' ASSUME UNRESOLVED
         CLI   RLDTYPE,8               IS IT UNRESOLVED
         BE    RLDLN                   YES
         MVC   PRT+21(10),BLANX        CLEAR FIELD
         MVC   PRT+24(3),=C'??:'
         LA    R12,RLDTYPE             @ TYPE
         BAL   R9,HEXPRT1              CONVERT
         MVC   PRT+27(1),PRTABL+1      TYPE
RLDLN    MVC   PRT+35(1),RLDLEN        LENGTH
         OI    PRT+35,C'0'             CLEAR ZONE
         MVC   PRT+42(1),RLDDIR        RELOCATION DIRECTION
         LA    R12,RLDADDR             @ ADDRESS
         BAL   R9,HEXPRT3              CONVERT
         MVC   PRT+46(6),PRTABL        ADDRESS
         XC    RLDNAME(9),RLDNAME      CLEAR
         LH    R15,RLDRP               GET RELOCATION POINTER
         BCTR  R15,R0                  DEDUCT 1
         LTR   R15,R15                 TEST DIFFERENCE
         BM    RLPRT                   NEG, ERROR
         MH    R15,SYMLEN              TIMES SYM TBL ENTRY LENG
         A     R15,SYMTBAD             @ ESD SYMBOL TBL ENTRY
         C     R15,CURRSYM             PAST END OF TABLE
         BH    RLPRT                   YES, ERROR
         USING SYMTBL,R15
         MVC   RLDNAME,EXTSYM          ESD SYMBOL TO RLD TBL ENTRY
         MVC   RLDESDTP,TYPSYM         ESD TYPE TO RLD ENTRY
         DROP  R15
         MVC   PRT+60(8),RLDNAME       NAME TO PRINT
         MVC   PRT+70(2),=C'LR'        ASSUME LR
         CLI   RLDESDTP,3              IS IT LR
         BE    RLPRT                   YES
         MVC   PRT+70(2),=C'SD'        ASSUME SD
         CLI   RLDESDTP,0              IS IT SD
         BE    RLPRT                   YES
         MVC   PRT+70(2),=C'ER'        ASSUME ER
         CLI   RLDESDTP,2              IS IT ER
         BE    RLPRT                   YES
         MVC   PRT+70(2),=C'PC'        ASSUME PC
         CLI   RLDESDTP,4              IS IT PC
         BE    RLPRT                   YES
         MVC   PRT+70(2),=C'PR'        ASSUME PR
         CLI   RLDESDTP,6              IS IT PR
         BE    RLPRT                   YES
         MVC   PRT+70(2),=C'CM'        ASSUME CM
         CLI   RLDESDTP,5              IS IT CM
         BE    RLPRT                   YES
         MVC   PRT+70(2),=C'WX'        ASSUME WX
         CLI   RLDESDTP,X'0A'          IS IT WX
         BE    RLPRT                   YES
         MVC   PRT+70(4),=C'NULL'      ASSUME NULL
         CLI   RLDESDTP,7              IS IT NULL
         BE    RLPRT                   YES
         MVC   PRT+70(6),=C'E/STAB'    ASSUME E/STAB
         CLI   RLDESDTP,X'0F'          IS IT E/STAB
         BE    RLPRT                   YES
         MVC   PRT+70(6),=C'??????'    UNKNOWN YPE
RLPRT    BAL   R9,PRINT                PRINT
         CLC   RLDNAME,CSECT           RLD NAME IS CSECT NAME
         BNE   GOODRLD                 NO
         CLC   RLDADDR,XZROS           RELATIVE OFFSET IS ZERO
         BE    RLDSTEP                 YES, IGNORE ENTRY
GOODRLD  LA    R7,L'RLDENT(R7)         TO NEXT TBL ENTRY
RLDSTEP  TM    0(R6),1                 NEXT ITEM HAS REL AND POS PTRS
         BO    RLSAME                  NO
         LH    R10,4(R6)               PICK UP NEW REL PTR
         LH    R11,6(R6)               PICK UP NEW POS PTR
         LA    R6,4(R6)                STEP OVER 4 BYTES
RLSAME   LA    R6,4(R6)                TO NEXT RLD ITEM
         CR    R6,R8                   END OF RLD DATA
         BL    RLDNXT                  NO
         MVI   0(R7),X'FF'             SET TBL END INDIC
         ST    R7,CURRLD               SET NEW CURRENT ADDRESS
         L     R9,RL9                  GET RETURN ADDR
         BR    R9                      EXIT
         DROP  R7
*
*
*
****************************************************************
*                                                              *
* PROCESS CONTROL AND RLD RECORDS. THESE RECORDS CONTAIN BOTH  *
* RLD AND CONTROL INFORMATION, AND ARE PROCESSED BY BOTH       *
* THE RLDRECS AND CNTLRECS ROUTINES.                           *
*                                                              *
****************************************************************
*
CTRLRECS EQU   *                       CONTROL AND RLD RECORDS
         ST    R9,CR9                  SAVE RETURN ADDR
         BAL   R9,RLDRECS              PROCESS RLD DATA
         L     R6,BUFAD                RESET BUFFER ADDRESS
         BAL   R9,CNTLRECS             PROCESS CONTROL DATA
         L     R9,CR9                  GET RETURN ADDR
         BR    R9                      EXIT
*
*
*
*
*
*
****************************************************************
*                                                              *
* PROCESS COMPOSITE ESD RECORDS. DATA FROM THESE RECORDS IS    *
* PLACED IN THE SYMBOL TABLE, AND IS USED TO CREATE PROGRAM    *
* ENTRY STATEMENTS, AND TO IDENTIFY THE NAMES OF EXTERNAL      *
* SYMBOLS USED BY THE PROGRAM.                                 *
*                                                              *
****************************************************************
*
CESDREC  EQU   *                       CESD RECORD PROCESSING
         ST    R9,CES9                 SAVE RETURN
         L     R7,CURRSYM              GET SYMBOL TBL ADDR
         USING SYMTBL,R7
         LH    R10,4(R6)               GET ESD ID OF 1ST ITEM
         LH    R8,6(R6)                NBR BYTES OF ESD DATA
         SRL   R8,4                    COMPUTE NBR ENTRIES
         LA    R6,8(R6)                STEP TO 1ST RECORD ESD ITEM
CESDNXT  C     R7,ENDSYM               END OF TABLE
         BNL   SYMFULL                 YES, ERROR
         MVC   EXTSYM,0(R6)            SYMBOL NAME
         MVC   TYPSYM,8(R6)            TYPE
         NI    TYPSYM,X'0F'            CLEAR BITS 0-3
         MVC   SYMIND,8(R6)            INDICATOR BYTE
         NI    SYMIND,X'0F'            CLEAR BITS 4-7
         TM    8(R6),X'14'             POSSIBLE ENTAB/SEGTAB
         BNO   CEMVAD                  NO
         TM    8(R6),X'03'             IS IT ENTAB/SEGTAB
         BNZ   CEMVAD                  NO
         MVC   TYPSYM(2),=X'0F00'      SHOW ENTAB/SEGTAB
CEMVAD   MVC   SYMADDR,9(R6)           ADDRESS OF SYMBOL
         MVC   SYMSEG,12(R6)           SEGMENT WHERE DEFINED
         MVC   SYMLENG,13(R6)          LENGTH OR LR ESD ID
         STCM  R10,3,SYMESDID          ESD ID
         MVC   PRT+5(8),EXTSYM         SYMBOL NAME
         MVC   PRT+20(2),=C'SD'        ASSUME SD
         CLI   TYPSYM,0                IS IT SD
         BE    CEPIND                  YES
         MVC   PRT+20(2),=C'LR'        ASSUME LR
         CLI   TYPSYM,3                IS IT LR
         BE    CEPIND                  YES
         MVC   PRT+20(2),=C'ER'        ASSUME ER
         CLI   TYPSYM,2                IS IT ER
         BE    CEPIND                  YES
         MVC   PRT+20(2),=C'PC'        ASSUME PC
         CLI   TYPSYM,4                IS IT PC
         BE    CEPIND                  YES
         MVC   PRT+20(2),=C'PR'        ASSUME PR
         CLI   TYPSYM,6                IS IT PR
         BE    CEPIND                  YES
         MVC   PRT+20(2),=C'CM'        ASSUME CM
         CLI   TYPSYM,5                IS IT CM
         BE    CEPIND                  YES
         MVC   PRT+20(2),=C'WX'        ASSUME WX
         CLI   TYPSYM,X'0A'            IS IT WX
         BE    CEPIND                  YES
         MVC   PRT+19(4),=C'NULL'      ASSUME NULL
         CLI   TYPSYM,7                IS IT NULL
         BE    CEPIND                  YES
         MVC   PRT+18(6),=C'E/STAB'    ASSUME ENTAB/SEGTAB
         CLI   TYPSYM,X'0F'            IS IT ENTAB/SEGTAB
         BE    CEPIND                  YES
         MVC   PRT+18(4),=C' ??: '     UNIDENTIFIABLE TYPE
         LA    R12,TYPSYM              @ TYPE
         BAL   R9,HEXPRT1              CONVERT
         MVC   PRT+23(2),PRTABL        TYPE
CEPIND   LA    R12,SYMIND              @ INDICATOR
         BAL   R9,HEXPRT1              CONVERT
         MVC   PRT+27(1),PRTABL        INDICATOR
         LA    R12,SYMADDR             @ SYMBOL ADDR
         BAL   R9,HEXPRT3              CONVERT
         MVC   PRT+30(6),PRTABL        SYMBOL ADDR
         LA    R12,SYMSEG              @ SEGMENT NBR
         BAL   R9,HEXPRT1              CONVERT
         MVC   PRT+39(2),PRTABL        SEGMENT NBR
         CLI   TYPSYM,2                IS IT ER
         BE    CEESD                   YES
         CLI   TYPSYM,3                IS IT AN LR
         BNE   CENOTLR                 NO
         LA    R12,SYMLRID             @ LR ESD ID
         BAL   R9,HEXPRT2              CONVERT
         MVC   PRT+43(4),PRTABL        LR ESD ID
         B     CEESD                   CONTINUE
CENOTLR  LA    R12,SYMLENG             @ LENGTH
         BAL   R9,HEXPRT3              CONVERT
         MVC   PRT+49(6),PRTABL        SYMBOL LENGTH
CEESD    LA    R12,SYMESDID            @ ESD ID
         BAL   R9,HEXPRT2              CONVERT
         MVC   PRT+57(4),PRTABL        ESD ID
         TM    PROCESS,X'80'           FOUND CSECT
         BO    CESDPT                  YES
         CLI   TYPSYM,0                SD
         BE    CECKCSB                 YES
         CLI   TYPSYM,4                PC
         BNE   CESDPT                  NO
CECKCSB  CLC   CSECT,BLANX             ANY CSECT NAME ENTERED
         BNE   CECKNM                  YES
         MVC   CSECT,EXTSYM            NAME TO CSECT
         B     CSGOTCS                 CONTINUE
CECKNM   CLI   TYPSYM,4                PC
         BE    CESDPT                  YES
         CLC   CSECT,EXTSYM            FOUND DESIRED NAME
         BNE   CESDPT                  NO
         TM    PROCESS,X'80'           ALREADY FOUND CSECT
         BZ    CSGOTCS                 NO
         MVC   PRT+15(2),=C'??'        SHOW DUPL
         B     CESDPT                  CONTINUE
CSGOTCS  OI    PROCESS,X'80'           SHOW CSECT FOUND
         MVC   PRT+15(2),=C'**'        FLAG ON PRINTOUT
         MVC   ESDID,SYMESDID          SAVE ESD ID FOUND
         MVC   START+1,SYMADDR         SAVE CSECT START ADDR
         MVC   LENGTH+1(3),SYMLENG     SAVE CSECT LENGTH
         L     R1,LENGTH               PICK UP LENGTH
         A     R1,START                COMPUTE CSECT END ADDR
         ST    R1,END                  SAVE CSECT END ADDR
         L     R11,LENGTH              TEXT LENGTH
         LA    R11,256(R11)            ADD FOR SAFETY
         GETMAIN R,LV=(11)             GET STORAGE FOR TEXT
         ST    R1,TXTSTRT              SAVE TEXT ADDR
         SH    R11,H256                DEDUCT SAFETY FACTOR
         AR    R1,R11                  TXT END ADDR
         ST    R1,TXTEND               SAVE TEXT END ADDR
CESDPT   BAL   R9,PRINT                PRINT
         LA    R7,L'SYMENT(R7)         TO NEXT TBL ENTRY LOCATION
         LA    R10,1(R10)              ADD 1 TO ESD COUNTER
         LA    R6,16(R6)               TO NEXT ESD ITEM IN INPUT
         BCT   R8,CESDNXT              LOOP THRU INPUT RECORD
         MVI   0(R7),X'FF'             SET END OF TABLE INDIC
         ST    R7,CURRSYM              SAVE NEXT TABLE ADDR
         L     R9,CES9                 GET RETURN ADDR
         BR    R9                      EXIT
         DROP  R7
*
*
*
****************************************************************
*                                                              *
* ISSUE BLDL FOR THE MAIN MODULE, AND PRINT MODULE RELATED INFO*
*                                                              *
****************************************************************
*
BLDL     EQU   *                       ISSUE BLDL AND PRINT INFO
         ST    R9,BL9                  SAVE RETURN ADDR
ISSBLDL  BLDL  SYSLIB,BLDLIST          ISSUE BLDL
         LTR   R15,R15                 ANY ERRORS
         BNZ   MISSMEM                 YES
         LA    R1,MEMBER+35            END OF BASIC PORTION
         TM    ATTR2,X'10'             SSI PRESENT
         BZ    BLREFA1                 NO
         LA    R1,4(R1)                ADD FOR SSI
BLREFA1  TM    ALIASIND,X'80'          ALIAS
         BZ    BLREFA2                 NO
         LA    R1,11(R1)               ADD FOR ALIAS
BLREFA2  TM    ATTR1A,X'04'            SCATTER FORMAT
         BZ    BLREFA3                 NO
         LA    R1,8(R1)                ADD FOR SCATTER
BLREFA3  MVC   AUTHLEN(2),0(R1)        AUTH LENGTH AND CODE
         TM    ATTR2,X'10'             SSI PRESENT
         BZ    BLCKALI                 NO
         LA    R1,MEMBER+35            END OF BASIC PORTION
         TM    ATTR1A,X'04'            SCATTER FORMAT
         BZ    BLSSI2                  NO
         TM    ALIASIND,X'80'          ALIAS
         BO    BLFMTED                 YES, NO REFORMAT NEEDED
         LA    R1,8(R1)                NO, STEP PAST SCATTER SECTION
         B     BLMVSSI                 GO MOVE SSI
BLSSI2   TM    ALIASIND,X'80'          ALIAS
         BZ    BLMVSSI                 NO
         LA    R1,11(R1)               YES, STEP PAST ALIAS SECTION
BLMVSSI  MVC   SSI,0(R1)               MOVE SSI DATA
BLCKALI  TM    ALIASIND,X'80'          ALIAS
         BO    BLASC                   YES
         B     BLFMTED                 FINISHED
BLASC    TM    ATTR1A,X'04'            SCATTER FORMAT
         BO    BLFMTED                 YES, NO REFORMAT NEEDED
         MVC   ALMEM,MEMBER+38         MOVE ALIAS MEMBER
         MVC   ALEPA(3),MEMBER+35      YES, MOVE ALIAS DATA
BLFMTED  MVC   PRT(26),=C'DIRECTORY INFO FOR MODULE '
         MVC   PRT+27(8),MEMBER        MEMBER NAME TO PRINT
         BAL   R9,PRINT                PRINT
         MVC   PRT+10(14),=C'TTR OF MODULE='
         LA    R12,TTRMOD              @ TTR
         BAL   R9,HEXPRT3              CONVERT
         MVC   PRT+24(6),PRTABL        TTR TO PRINT
         BAL   R9,PRINT                PRINT
         MVC   PRT+10(18),=C'CONCATENATION NBR='
         LA    R12,CCAT                @ CONCATENATION NBR
         BAL   R9,HEXPRT1              CONVERT
         MVC   PRT+28(2),PRTABL        CONCATENATION NBR
         BAL   R9,PRINT                PRINT
         MVC   PRT+10(12),=C'ALIAS INDIC='
         LA    R12,ALIASIND            @ ALIAS INDICATOR
         BAL   R9,HEXPRT1              CONVERT
         MVC   PRT+22(2),PRTABL        ALIAS INDICATOR
         TM    ALIASIND,X'80'          IS IT AN ALIAS
         BZ    BLALPRT                 NO
         MVC   PRT+50(13),=C'*** ALIAS ***'
BLALPRT  BAL   R9,PRINT                PRINT
         MVC   PRT+10(18),=C'TTR, 1ST TXT RECD='
         LA    R12,TTR1TXT             @ TTR
         BAL   R9,HEXPRT3              CONVERT
         MVC   PRT+28(6),PRTABL        TTR OF 1ST TXT BLOCK
         BAL   R9,PRINT                PRINT
         MVC   PRT+10(25),=C'TTR OF NOTE/SCATTER LIST='
         LA    R12,TTRNS               @ TTR
         BAL   R9,HEXPRT3              CONVERT
         MVC   PRT+35(6),PRTABL        TTR OF NOTE/SCATTER
         BAL   R9,PRINT                PRINT
         MVC   PRT+10(17),=C'NBR NOTE ENTRIES='
         LA    R12,NNOTE               @ NBR NOTES
         BAL   R9,HEXPRT1              CONVERT
         MVC   PRT+27(2),PRTABL        NBR NOTE ENTRIES
         BAL   R9,PRINT                PRINT
         MVC   PRT+10(13),=C'ATTRIBUTES 1='
         LA    R12,ATTR1A              @ ATTRIBUTES
         BAL   R9,HEXPRT2              CONVERT
         MVC   PRT+23(4),PRTABL        ATTRIBUTES 1
         TM    ATTR1A,X'80'            RENT
         BZ    BLAT1A                  NO
         MVC   PRT+30(4),=C'RENT'
BLAT1A   TM    ATTR1A,X'40'            REUS
         BZ    BLAT1B                  NO
         MVC   PRT+35(4),=C'REUS'
BLAT1B   TM    ATTR1A,X'20'            OVLY
         BZ    BLAT1C                  NO
         MVC   PRT+40(4),=C'OVLY'
BLAT1C   TM    ATTR1A,X'10'            TEST
         BZ    BLAT1D                  NO
         MVC   PRT+45(4),=C'TEST'
BLAT1D   TM    ATTR1B,X'08'            OL
         BZ    BLAT1E                  NO
         MVC   PRT+50(2),=C'OL'
BLAT1E   TM    ATTR1A,X'04'            SCTR
         BZ    BLAT1F                  NO
         MVC   PRT+53(4),=C'SCTR'
BLAT1F   TM    ATTR1A,X'02'            EXEC
         BZ    BLAT1G                  NO
         MVC   PRT+58(4),=C'EXEC'
BLAT1G   TM    ATTR1B,X'01'            REFR
         BZ    BLAT1PRT                NO
         MVC   PRT+63(4),=C'REFR'
BLAT1PRT BAL   R9,PRINT                PRINT
         MVC   PRT+10(13),=C'TOTAL LENGTH='
         LA    R12,TOTVIRT             @ TOTAL LENGTH
         BAL   R9,HEXPRT3              CONVERT
         MVC   PRT+23(6),PRTABL        TOTAL LENGTH OF MODULE
         BAL   R9,PRINT                PRINT
         MVC   PRT+10(23),=C'LENGTH OF 1ST TXT RECD='
         LA    R12,LENG1               @ 1ST TXT LENG
         BAL   R9,HEXPRT2              CONVERT
         MVC   PRT+33(4),PRTABL        LENGTH OF 1ST TXT BLOCK
         BAL   R9,PRINT                PRINT
         MVC   PRT+10(11),=C'E. P. ADDR='
         LA    R12,LKEPA               @ E.P. ADDR
         BAL   R9,HEXPRT3              CONVERT
         MVC   PRT+21(6),PRTABL        E.P. ADDR
         BAL   R9,PRINT                PRINT
         MVC   PRT+10(13),=C'ATTRIBUTES 2='
         LA    R12,ATTR2               @ ATTRIBUTES 2
         BAL   R9,HEXPRT1              CONVERT
         MVC   PRT+23(2),PRTABL        ATTRIBUTES 2
         TM    ATTR2,X'20'             PAGE ALIGNMENT
         BZ    BLAT3A                  NO
         MVC   PRT+30(16),=C'PAGE ALIGN REQRD'
BLAT3A   TM    ATTR2,X'10'             SSI PRESENT
         BZ    BLAT3PRT                NO
         MVC   PRT+50(11),=C'SSI PRESENT'
BLAT3PRT BAL   R9,PRINT                PRINT
         TM    ATTR1A,X'04'            SCATTER FORMAT
         BZ    BLFAL                   NO
         MVC   PRT+10(8),=C'SCTRLEN='
         LA    R12,SCTRLEN             @ SCATTER LIST LENGTH
         BAL   R9,HEXPRT2              CONVERT
         MVC   PRT+18(4),PRTABL        SCATTER LIST LENGTH
         BAL   R9,PRINT                PRINT
         MVC   PRT+10(18),=C'TRANSLATE TBL LEN='
         LA    R12,TTLEN               @ TRANS TBL LEN
         BAL   R9,HEXPRT2              CONVERT
         MVC   PRT+28(4),PRTABL        TRANSLATION TABLE LENGTH
         BAL   R9,PRINT                PRINT
         MVC   PRT+10(18),=C'ESD ID OF 1ST TXT='
         LA    R12,SCESDID             @ ESD ID
         BAL   R9,HEXPRT2              CONVERT
         MVC   PRT+28(4),PRTABL        ESD ID OF 1ST TXT
         BAL   R9,PRINT                PRINT
         MVC   PRT+10(23),=C'ESD ID CONTAINING E.P.='
         LA    R12,SCEPESD             @ ESD ID
         BAL   R9,HEXPRT2              CONVERT
         MVC   PRT+33(4),PRTABL        @ ESD ID OF CSECT CONTAINING E.P
         BAL   R9,PRINT                PRINT
BLFAL    TM    ALIASIND,X'80'          ALIAS
         BZ    BLFSSI                  NO
         MVC   PRT+10(28),=C'E.P. ADDRESS OF THIS MEMBER='
         LA    R12,ALEPA               @ E.P. ADDR
         BAL   R9,HEXPRT3              CONVERT
         MVC   PRT+38(6),PRTABL        E.P. ADDR
         BAL   R9,PRINT
         MVC   PRT+10(17),=C'REAL MEMBER NAME='
         MVC   PRT+27(8),ALMEM         REAL MEMBER NAME
         BAL   R9,PRINT
BLFSSI   TM    ATTR2,X'10'             ANY SSI INFO
         BZ    BLAUTHC                 NO
         MVC   PRT+10(9),=C'SSI INFO='
         LA    R12,SSI                 @ SSI INFO
         BAL   R9,HEXPRT4              CONVERT
         MVC   PRT+19(8),PRTABL        SSI INFO
         BAL   R9,PRINT                PRINT
BLAUTHC  MVC   PRT+10(10),=C'AUTH CODE='
         LA    R12,AUTHCOD             @ AUTH CODE
         BAL   R9,HEXPRT1              CONVERT
         MVC   PRT+20(2),PRTABL        AUTH CODE
         BAL   R9,PRINT                PRINT
         TM    ALIASIND,X'80'          ALIAS
         BZ    BLXIT                   NO
         MVC   PRT+5(38),=C'***** REAL MEMBER DIRECTORY INFO *****'
         MVI   PCC,C'0'                DOUBLE SPACE
         BAL   R9,PRINT                PRINT
         MVC   MEMBER,ALMEM            REAL MEMBER NAME TO LIST
         B     ISSBLDL                 DO OVER FOR REAL MEMBER
BLXIT    L     R9,BL9                  GET RETURN ADDR
         BR    R9                      EXIT
*
*
*
****************************************************************
*                                                              *
* CREATE PRINTABLE HEX FROM HEX. ON ENTRY, REG 12 CONTAINS THE *
* ADDRESS OF THE DATA TO BE REFORMATTED. ENTRY POINT USED      *
* DETERMINES THE SIZE OF THE FIELD. OUTPUT DATA IS PLACED IN   *
* THE PRTABL FIELD, 2 CHARACTERS PER BYTE.                     *
*                                                              *
****************************************************************
*
HEXPRT   EQU   *                       HEX TO PRINTABLE ROUTINE
HEXPRT1  UNPK  PRTABL(3),0(2,R12)      UNPACK HEX
         B     HEXCLTR                 CONTINUE
HEXPRT2  UNPK  PRTABL(5),0(3,R12)      UNPACK HEX
         B     HEXCLTR                 CONTINUE
HEXPRT3  UNPK  PRTABL(7),0(4,R12)      UNPACK HEX
         B     HEXCLTR                 CONTINUE
HEXPRT4  UNPK  PRTABL(9),0(5,R12)      UNPACK HEX
HEXCLTR  MVZ   PRTABL(8),XZROS         CLEAR FOR TRANSLATE
         TR    PRTABL(8),TRTBL         MAKE PRINTABLE
         BR    R9                      EXIT
*
*
*
****************************************************************
*                                                              *
* PRINT USING SYSPRINT.                                        *
*                                                              *
****************************************************************
*
PRINT    EQU   *                       PRINT ROUTINE
         TM    SYSPRINT+48,X'10'       IS SYSPRINT OPEN
         BNO   CLRPRT                  NO
         PUT   SYSPRINT,PRTLINE        WRITE PRINT LINE
CLRPRT   MVC   PRT,BLANX               CLEAR PRINT LINE
         AP    LINECT,P1               INCR LINE COUNTER
         CLI   PCC,C' '                SINGLE SPACED
         BE    SETSGL                  YES
         AP    LINECT,P1               INCR LINE COUNTER
         CLI   PCC,C'0'                DOUBLE SPACED
         BE    SETSGL                  YES
         AP    LINECT,P1               INCR LINE COUNTER
         CLI   PCC,C'-'                TRIPLE SPACED
         BE    SETSGL                  YES
         ZAP   LINECT,P0               NO, MUST BE NEW PAGE
SETSGL   MVI   PCC,C' '                SET SINGLE SPACING
         CP    LINECT,P58              PAST END OF PAGE
         BH    NEWPAGE                 YES
         BR    R9                      EXIT
NEWPAGE  MVI   PCC,C'1'                SET SKIP TO HOF
         ZAP   LINECT,P0               RESET LINE COUNTER
         BR    R9                      EXIT
*
*
****************************************************************
*                                                              *
* PROCESS THE CONTROL CARD CONTAINING MODULE NAME AND CSECT.   *
* THIS MUST BE THE FIRST CARD IN THE SYSIN DECK.               *
*                                                              *
****************************************************************
*
GETCTL   EQU   *                       EXTRACT DESIRED MEMBER/CSECT
         GET   SYSIN                   READ THE CONTROL CARD
         LA    R12,72                  LENGTH OF CONTROL CARD
         LA    R11,8                   MAX LENGTH OF MEMBER NAME
         LA    R10,MEMBER              @ MEMBER NAME FIELD
CKBLK1   CLI   0(R1),C' '              CONTROL BYTE IS BLANK
         BNE   GCMEMOV                 NO, GO MOVE MEMBER NAME
         LA    R1,0(R1)                TO NEXT CONTROL BYTE
         BCT   R12,CKBLK1              SUBTRACT 1 FROM REMAINING LENGTH
         B     GCEND                   ALL BLANKS, EXIT
GCMEMOV  MVC   0(1,R10),0(R1)          CONTROL BYTE TO MEMBER NAME
         LA    R1,1(R1)                TO NEXT CONTROL BYTE
         BCTR  R12,R0                  SUBTRACT 1 FROM LENGTH
         LA    R10,1(R10)              TO NEXT NAME BYTE
         BCTR  R11,R0                  SUBTRACT 1 FROM LENGTH
         CLI   0(R1),C' '              GOT A BLANK
         BE    GCSETUP2                YES
         CLI   0(R1),C','              GOT A COMMA
         BE    GCSETUP2                YES
         LTR   R12,R12                 END OF CONTROL DATA
         BE    GCEND                   YES
         LTR   R11,R11                 NAME FULL
         BNZ   GCMEMOV                 NO, CONTINUE
         B     NAMEOV8                 YES, NAME TOO LONG
GCSETUP2 LA    R11,8                   CSECT NAME MAX LENGTH
         LA    R10,CSECT               @ CSECT NAME FIELD
GCSTEP2  LA    R1,1(R1)                STEP PAST BLANK
         BCT   R12,GCHKBK2             CHECK NEXT FOR BLANK
         B     GCEND                   END OF SCAN
GCHKBK2  CLI   0(R1),C' '              CONTROL DATA IS BLANK
         BE    GCSTEP2                 YES
GCCSMOV  MVC   0(1,R10),0(R1)          CONTROL BYTE TO CSECT NAME
         LA    R1,1(R1)                TO NEXT CONTROL BYTE
         LA    R10,1(R10)              TO NEXT NAME BYTE
         BCTR  R12,R0                  DEDUCT 1 FROM CONTROL LENGTH
         BCTR  R11,R0                  DEDUCT 1 FROM NAME LENGTH
         LTR   R12,R12                 ANY CONTROL BYTES LEFT
         BZ    GCEND                   NO
         CLI   0(R1),C' '              NEXT CONTROL BYTE BLANK
         BE    GCEND                   YES
         LTR   R11,R11                 ANY NAME BYTES LEFT
         BNZ   GCCSMOV                 YES, LOOP
         B     NAMEOV8                 NAME TOO LONG, ERROR
GCEND    CLC   MEMBER,BLANX            ANY MEMBER NAME FOUND
         BE    NOMBR                   NO
         BR    R9                      EXIT
*
*
*
****************************************************************
*                                                              *
* MISCELLANEOUS ERROR MESSAGES.                                *
*                                                              *
****************************************************************
*
ERRORS   EQU   *                       ERROR END MESSAGES
NOCTL    MVC   PRT(L'NOCNTRL),NOCNTRL  NO CONTROL INFO MESSAGE
         B     ERREND                  GO PRINT
NAMEOV8  MVC   PRT(L'OVER8),OVER8      NAME OVER 8 MESSAGE
         B     ERREND                  GO PRINT
NOMBR    MVC   PRT(L'NOMEM),NOMEM      MISSING MEMBER NAME MESSAGE
         B     ERREND                  GO PRINT
MISSMEM  MVC   PRT(L'INVMEM),INVMEM    MEMBER NOT IN PDS MESSAGE
         B     ERREND                  GO PRINT
MISSCS   MVC   PRT(L'INVCSECT),INVCSECT CSECT NOT IN MEMBER MESSAGE
         B     ERREND                  GO PRINT
SYMFULL  MVC   PRT(L'FULLSYM),FULLSYM  FULL SYM TBL MSG
         B     ERREND                  GO PRINT
RLDFULL  MVC   PRT(L'FULLRLD),FULLRLD  RLD TBL FULL MSDG
         B     ERREND                  GO PRINT
ERREND   BAL   R9,PRINT                GO PRINT MESSAGE
         ABEND 777,DUMP                ABEND
*
*
*
*
****************************************************************
*                                                              *
* COUNT THE ENTRIES IN THE ESD TABLE WHICH WILL RESULT IN      *
* ENTRIES IN THE LABEL TABLE.                                  *
*                                                              *
****************************************************************
ENDINIT  EQU   *                       *** FINAL PROCESSING ***
*
         L     R6,SYMTBAD              GET @ ESD TABLE
         USING SYMTBL,R6
         LA    R7,4                    INITIAL LABEL COUNT VALUE
SYMCNT   CLI   0(R6),X'FF'             END OF ESD TBL
         BE    RLDCNT                  YES
         CLI   TYPSYM,3                IS ESD AN LR ENTRY
         BNE   SCSTP                   NO, IGNORE
         CLC   SYMADDR,START+1         ADDR BELOW DESIRED CSECT
         BL    SCSTP                   YES, IGNORE
         CLC   SYMADDR,END+1           ADDR ABOVE DESIRED CSECT
         BH    SCSTP                   YES, IGNORE
         LA    R7,1(R7)                ADD TO LABEL COUNT
         MVC   SYMLENG,=C'***'         FLAG AS USABLE
SCSTP    LA    R6,L'SYMENT(R6)         TO NEXT ESD ENTRY
         B     SYMCNT
         DROP  R6
*
****************************************************************
*                                                              *
* COUNT THE ENTRIES IN THE RLD TABLE WHICH WILL RESULT IN      *
* ENTRIES IN THE LABEL TABLE.                                  *
*                                                              *
****************************************************************
*
RLDCNT   L     R6,RLDTBL               GET RLD TBL ADDR
         USING RLDTBLD,R6
RLDCEND  CLI   0(R6),X'FF'             END OF RLD TABLE
         BE    LBLGET                  YES
         CLC   RLDRP,ESDID             ESDID SAME AS DESIRED CSECT
         BNE   RLDC1                   NO, EXTRN REF
         LA    R7,1(R7)                ADD 1 TO LABEL COUNT
RLDC1    LA    R7,1(R7)                ADD 1 TO LABEL COUNT
         LA    R6,L'RLDENT(R6)         TO NEXT RLD ENTRY
         B     RLDCEND                 LOOP THRU RLD TBL
         DROP  R6
LBLGET   MH    R7,LBLLGTH              COMPUTE LABEL TABLE SIZE
         L     R1,LENGTH               GET CSECT LENGTH
         SRL   R1,2                    DIVIDE BY 4
         MH    R1,LBLLGTH              TIMES LABEL ENTRY LENGTH
         AR    R7,R1                   TOTAL LABEL TABLE LENGTH
*
****************************************************************
*                                                              *
* CREATE INITIAL ENTRIES IN THE LABEL TABLE USING DATA FROM    *
* THE ESD AND RLD TABLES.                                      *
*                                                              *
****************************************************************
*
         GETMAIN R,LV=(7)              GET LABEL TBL STORAGE
         ST    R1,LBLTBL               SAVE LABEL TBL ADDR
         ST    R1,CURRLBL              SAVE CURRENT LABEL ADDR
         AR    R1,R7                   COMPUTE LABEL TBL END ADDR
         ST    R1,ENDLBL               SAVE END OF LBL TBL ADDR
         L     R6,LBLTBL               GET @ LABEL TABLE
         USING LABELD,R6
         L     R7,SYMTBAD              GET ESD TBL ADDR
         USING SYMTBL,R7
         CLC   LKEPA,XZROS             E.P. ADDR ZERO
         BE    LRENTS                  YES
         SR    R1,R1                   CLEAR WORK
         ICM   R1,7,LKEPA              PICK UP E.P. ADDR
         S     R1,START                RELATIVIZE IN CSECT
         BM    LRENTS                  NEG, ERROR
         STCM  R1,7,LBLADR             SAVE OFFSET
         MVI   LBLTYP,C'L'             SET LABEL TYPE IN ENTRY
         LA    R12,LBLADR              POINT TO OFFSET
         BAL   R9,HEXPRT3              CONVERT TO PRINTABLE
         MVI   LBLNAME,C'A'            1ST CHAR OF LABEL IS 'A'
         MVC   LBLNAME+1(6),PRTABL     END OF LABEL IS OFFSET
         LA    R6,L'LABEL(R6)          TO NEXT LABEL ENTRY
         ST    R6,CURRLBL              SAVE IT'S ADDRESS
LRENTS   CLI   0(R7),X'FF'             END OF ESD TBL
         BE    RLDLBLS                 YES
         CLC   SYMLENG,=C'***'         THIS DESIRED LR ENTRY
         BE    GOTLR                   YES
LRESTP   LA    R7,L'SYMENT(R7)         TO NEXT ESD ENTRY
         B     LRENTS                  LOOP THRU ESD TBL
GOTLR    SR    R12,R12                 CLEAR WORK REG
         ICM   R12,7,SYMADDR           GET SYMBOL ADDR
         S     R12,START               RELATIVIZE IN CSECT
         STCM  R12,7,LBLADR            SAVE RELATIVE ADDR
         MVC   LBLNAME,EXTSYM          SYMBOL NAME TO OUTPUT
         MVI   LBLTYP,C'L'             SHOW LABEL ENTRY
         LA    R6,L'LABEL(R6)          TO NEXT LABEL ENTRY
         ST    R6,CURRLBL              SAVE NEXT LABEL ENTRY ADDR
         B     LRESTP                  CONTINUE ESD PROCESSING
         DROP  R7
RLDLBLS  L     R7,RLDTBL               GET RLD TBL ADDR
         USING RLDTBLD,R7
RLDLBND  CLI   0(R7),X'FF'             END OF RLD TABLE
         BE    PHASE1                  YES
         CLC   RLDRP,ESDID             RLD ESDID = DESIRED CSECT ESDID
         BE    INTREFS                 YES, INTERNAL ADCON
         CLI   RLDTYPE,1               VCON
         BE    EXTREFS                 YES
         CLI   RLDTYPE,8               IS IT UNRESOLVED
         BE    EXTREFS                 YES
RLLSTP   LA    R7,L'RLDENT(R7)         TO NEXT RLD ENTRY
         B     RLDLBND                 LOOP THRU RLD TABLE
EXTREFS  CLI   RLDESDTP,X'0A'          W-CON
         BNE   VCONLBL                 NO, BUILD V-CON
         MVI   LBLTYP,C'W'             SHOW W-CON
         B     FXTLBL                  CONTINUE LABEL ENTRY FORMAT
VCONLBL  MVI   LBLTYP,C'V'             SHOW V-CON
FXTLBL   MVC   LBLNAME,RLDNAME         NAME TO LABEL ENTRY
FINLBL   MVC   LBLADR,RLDADDR          ADDRESS TO LABEL ENTRY
         MVC   LBLLEN,RLDLEN           LENGTH TO LABEL ENTRY
         LA    R6,L'LABEL(R6)          TO NEXT LABEL TBL ENTRY
         ST    R6,CURRLBL              SAVE CURRENT LABEL TBL ADDR
         B     RLLSTP                  CONTINUE LABEL TABLE BUILD
INTREFS  CLI   RLDTYPE,0               A-CON
         BNE   RLLSTP                  NO, IGNORE
         MVI   LBLTYP,C'L'             SHOW LABEL ENTRY TYPE
         SR    R12,R12                 CLEAR WORK REG
         ICM   R12,7,RLDADDR           GET RLD ADDR
         A     R12,TXTSTRT             FIND LOC IN TEXT
         MVC   LBLADR,1(R12)           MOVE TO LABEL ENTRY
         CLI   RLDLEN,4                ADCON IS 4-BYTES
         BE    INTGOTL                 YES
         MVC   LBLADR,0(R12)           TEXT TO LABEL ENTRY
         CLI   RLDLEN,3                ADCON IS 3-BYTES
         BE    INTGOTL                 YES
         MVC   LBLADR+1(2),0(R12)      TEXT TO LABEL ENTRY
         MVI   LBLADR,0                CLEAR 1ST BYTE
         CLI   RLDLEN,2                ADCON IS 2-BYTES
         BE    INTGOTL                 YES
         XC    LBLADR,LBLADR           CLEAR LABEL ENTRY ADDR
         MVC   LBLADR+2(1),0(R12)      TEXT TO LABEL ENTRY
INTGOTL  SR    R12,R12                 CLEAR WORK
         ICM   R12,7,LBLADR            GET ADDRESS
         S     R12,START               RELATIVIZE IN CSECT
         BM    RLLSTP                  NEGATIVE, IGNORE
         STCM  R12,7,LBLADR            STORE RELATIVE ADDRESS
         LA    R12,LBLADR              POINT TO ADDRESS
         BAL   R9,HEXPRT3              CONVERT TO PRINTABLE
         MVI   LBLNAME,C'A'            SET LABEL ENTRY TYPE
         MVC   LBLNAME+1(6),PRTABL     LOW ORDER NAME POSITIONS
         MVI   LBLNAME+7,C' '          CLEAR LAST NAME BYTE
         MVC   L'LABEL(L'LABEL,R6),0(R6) COPY THIS ENTRY TO NEXT
         MVI   LBLLEN,0                SET LENGTH = 0
         LA    R6,L'LABEL(R6)          STEP TO NEXT
         MVI   LBLTYP,C'A'             SHOW TYPE
         B     FINLBL                  FINISH LABEL
         DROP  R6
         DROP  R7
*
****************************************************************
*                                                              *
* LOAD AND EXECUTE PHASE 1: DISASM1                            *
*                                                              *
****************************************************************
*
PHASE1   MVC   0(3,R6),HIVAL           SET END OF LABEL TABLE  FIX***
         TM    LOADLIB+48,X'10'        LOADLIB DD CARD ENTERED
         BZ    NODCB1                  NO
         LOAD  EP=DISASM1,DCB=LOADLIB  LOAD PHASE1
         B     EXEC1                   CONTINUE
NODCB1   LOAD  EP=DISASM1              LOAD PHASE1
EXEC1    LR    R15,R0                  COPY E.P. ADDRESS
         LA    R1,=A(COMMPARM)         @ PARAMETER LIST
         BALR  R14,R15                 LINK TO PHASE1
         DELETE EP=DISASM1             DELETE AFTER USE
         CLI   USERR,0                 ANY ERRORS
         BNE   CLOSES                  YES, STOP THE RUN
*
****************************************************************
*                                                              *
* PRINT THE LABEL TABLE AFTER PHASE 1 COMPLETION.              *
*                                                              *
****************************************************************
*
         MVC   PRTLINE,PH1LBL          HEADER 1
         BAL   R9,PRINT                PRINT IT
         MVC   PRTLINE,PH1HDR          HEADER 2
         BAL   R9,PRINT                PRINT IT
         L     R6,LBLTBL               GET LABEL TABLE ADDR
         USING LABELD,R6
LPEND    C     R6,CURRLBL              END OF TABLE       FIX****
         BNL   FREESTRG                YES                FIX****
         LA    R12,LBLADR              @ LABEL ADDRESS
         BAL   R9,HEXPRT3              CONVERT
         MVC   PRT(6),PRTABL           ADDRESS TO PRINT
         MVC   PRT+9(1),LBLTYP         TYPE TO PRINT
         MVC   PRT+12(8),LBLNAME       SYMBOL TO PRINT
         CLI   LBLLEN,0                ANY LENGTH
         BE    LTPPRT                  NO
         LA    R12,LBLLEN              GET @ LENGTH
         BAL   R9,HEXPRT1              CONVERT
         MVC   PRT+22(2),PRTABL        LENGTH TO PRINT
LTPPRT   BAL   R9,PRINT                PRINT TBL ENTRY
         LA    R6,L'LABEL(R6)          TO NEXT ENTRY
         B     LPEND                   LOOP THRU TABLE
FREESTRG L     R12,RLDTBL              @ RLD TABLE
         FREEMAIN R,A=(12),LV=120000   FREE RLD TABLE
*
****************************************************************
*                                                              *
* PRINT THE TEXT FOR THE CSECT TO BE DISASSEMBLED.             *
*                                                              *
****************************************************************
*
         MVI   PCC,C'1'                SET SKIP TO HEAD
         MVC   PRT+50(19),=C'***** T E X T *****'
         BAL   R9,PRINT                PRINT TEXT HEADER
         MVI   PCC,C'0'                SET DOUBLE SPACING
         L     R11,TXTSTRT             GET TEXT START ADDRESS
PNEXLIN  LA    R10,2                   GROUPS PER LINE
         LA    R12,POFSET+1            @ OFFSET
         BAL   R9,HEXPRT3              CONVERT
         MVC   PRT(6),PRTABL           OFFSET TO PRINT
         MVC   PRT+85(32),0(R11)       TEXT TO PRINT
         TR    PRT+85(32),PRTCHAR      TRANSLATE TO PRINTABLE
         LA    R8,PRT+9                @ 1ST PRINT WORD
         LA    R7,4                    4 WORDS PER GROUP
PGRP     LA    R12,0(R11)              @ TEXT WORD
         BAL   R9,HEXPRT4              CONVERT
         MVC   0(8,R8),PRTABL          TEXT TO PRINT WORD
         LA    R11,4(R11)              TO NEXT TEXT WORD
         LA    R8,9(R8)                TO NEXT PRINT LOC
         BCT   R7,PGRP                 DO 4 TIMES
         LA    R8,2(R8)                SPACE BETWEEN GROUPS
         LA    R7,4                    FOR 2ND GROUP
         BCT   R10,PGRP                DO 4 MORE TIMES
         BAL   R9,PRINT                PRINT THE LINE
         L     R9,POFSET               GET OFFSET
         LA    R9,32(R9)               ADD 32 BYTES
         ST    R9,POFSET               UPDATE OFFSET
         C     R11,TXTEND              END OF TEXT
         BL    PNEXLIN                 NO, CONTINUE
         MVI   PCC,C'1'                SET SKIP TO HEAD
         MVC   WORKREC,BLANX           CLEAR OUTPUT RECORD
         MVC   NAME,CSECT              CSECT NAME
*
****************************************************************
*                                                              *
* CREATE THE INITIAL CSECT INSTRUCTION, AND ANY ENTRY STATE-   *
* MENTS WHICH MAY BE INDICATED BY ESD TABLE ENTRIES.           *
*                                                              *
****************************************************************
*
         MVC   MNEMONIC,=C'CSECT'      SET MNEMONIC
         BAL   R9,WRTOUT               WRITE OUTPUT RECORD
         BAL   R9,PRINT                AND PRINT IT
         L     R7,SYMTBAD              GET ESD TBL ADDR
         USING SYMTBL,R7
LREFSS   CLI   0(R7),X'FF'             END OF ESD TBL
         BE    CKLDLB                  YES
         CLC   SYMLENG,=C'***'         THIS DESIRED LR ENTRY
         BE    MAKEXT                  YES
ESDTSTP  LA    R7,L'SYMENT(R7)         TO NEXT ESD ENTRY
         B     LREFSS                  LOOP THRU ESD TBL
MAKEXT   MVC   MNEMONIC,=C'ENTRY'      MNEMONIC IS ENTRY
         MVC   OPNDS(8),EXTSYM         SYMBOL TO OPERAND
         BAL   R9,WRTOUT               WRITE OUTPUT RECORD
         BAL   R9,PRINT                AND PRINT IT
         B     ESDTSTP                 CONTINUE ESD PROCESSING
         DROP  R7
         DROP  R6
CKLDLB   L     R12,SYMTBAD             @ ESD SYMBOL TABLE
*
****************************************************************
*                                                              *
* LOAD AND EXECUTE PHASE 2: DISASM2                            *
*                                                              *
****************************************************************
*
         FREEMAIN R,A=(12),LV=76000    FREE SYMBOL TABLE
         TM    LOADLIB+48,X'10'        LOADLIB DD CARD SUPPLIED
         BZ    NODCB                   NO
         LOAD  EP=DISASM2,DCB=LOADLIB  LOAD DISASM2
         B     EXEC2                   CONTINUE
NODCB    LOAD  EP=DISASM2              LOAD DISASM2
EXEC2    LR    R15,R0                  COPY E.P. ADDRESS
         LA    R1,=A(COMMPARM)         GET PARAMETER ADDRESS
         BALR  R14,R15                 CALL DISASM2
         DELETE EP=DISASM2             DELETE AFTER USE
         B     EOJ                     GO FINISH
*
*
*
*
*
*
****************************************************************
*                                                              *
* WRITE OUTPUT TO SYSPUNCH.                                    *
*                                                              *
****************************************************************
*
WRTOUT   EQU   *                       WRITE OUTPUT RECORDS
         MVC   PRT(80),WORKREC         SAVE IN PRINT
         TM    SYSPUNCH+48,X'10'       IS FILE OPEN
         BZ    CLRWKR                  NO
         AP    CARDNO,=P'10'           INCREMENT CARD NO
         UNPK  SEQNBR,CARDNO           UNPACK INTO CARD
         OI    SEQNBR+7,C'0'           CLEAR SIGN
         PUT   SYSPUNCH,WORKREC        WRITE SOURCE CARD
CLRWKR   MVC   WORKREC,BLANX           CLEAR OUTPUT RECORD
         BR    R9                      RETURN
*
*
*
****************************************************************
*                                                              *
* END OF JOB. DISASSEMBLY COMPLETE.                            *
*                                                              *
****************************************************************
EOJ      EQU   *                       END OF JOB
EOFSW    B     NOCTL                   RESET IF CTL CARD FOUND
         MVC   MNEMONIC,=CL5'REQU'     SET MNEMONIC
         BAL   R9,WRTOUT               WRITE RECORD
         BAL   R9,PRINT                GO PRINT IT
         L     R12,DTBSTRT             @ DSECT HEADER TBL
CENDSTB  CLI   0(R12),X'FF'            END OF TABLE
         BE    ENDSTMT                 YES
         MVC   NAME,0(R12)             DSECT NAME TO RECORD
         MVC   MNEMONIC(5),=C'DSECT'   OPERATION IS DSECT
         BAL   R9,WRTOUT               WRITE DSECT HEADER
         BAL   R9,PRINT                AND PRINT IT
         ICM   R11,7,8(R12)            GET FIELD TABLE ADDR
         USING DSECTD,R11
CENDFTB  CLI   0(R11),X'FF'            END OF FIELD TABLE
         BNE   DFMTFLD                 NO
         LA    R12,11(R12)             TO NEXT DSECT HEADER
         B     CENDSTB                 LOOP
DFMTFLD  MVC   NAME,DSNAME             NAME TO RECORD
         MVC   MNEMONIC(3),=C'EQU'     OPERATION IS EQU
         MVC   OPNDS(8),0(R12)         BASE NAME TO OPERAND
         LA    R10,OPNDS+7             @ NAME RHE
CFRHE    CLI   0(R10),C' '             AT RHE
         BNE   CFPLUS                  YES
         BCT   R10,CFRHE               BACK UP 1 AND LOOP
CFPLUS   LA    R10,1(R10)              TO NEXT POS
         MVI   0(R10),C'+'             DELIMITER
         SR    R1,R1                   CLEAR WORK
         ICM   R1,7,DSOFSET            GET OFFSET
         CVD   R1,DBLWD                CONVERT
         UNPK  DBLWD(4),DBLWD+4(4)     UNPACK
         OI    DBLWD+3,C'0'            CLEAR SIGN
         CH    R1,H1000                OFFSET < 1000
         BL    CFO100                  YES
         MVC   1(4,R10),DBLWD          NO, MOVE 4-DIGIT OFFSET
         LA    R10,5(R10)              TO NEXT POS
         B     CFCMA                   CONTINUE
CFO100   CH    R1,H100                 OFFSET < 100
         BL    CFO10                   YES
         MVC   1(3,R10),DBLWD+1        NO, MOVE 3-DIGIT OFFSET
         LA    R10,4(R10)              TO NEXT POS
         B     CFCMA                   CONTINUE
CFO10    CH    R1,H10                  OFFSET < 10
         BL    CFO1                    YES
         MVC   1(2,R10),DBLWD+2        MOVE 2-DIGIT OFFSET
         LA    R10,3(R10)              TO NEXT POS
         B     CFCMA                   CONTINUE
CFO1     LTR   R1,R1                   ANY OFFSET
         BZ    CFCMA                   NO
         MVC   1(1,R10),DBLWD+3        YES, MOVE 1-DIGIT OFFSET
         LA    R10,2(R10)              TO NEXT POS
CFCMA    MVI   0(R10),C','             DELIMITER
         SR    R1,R1                   CLEAR WORK
         IC    R1,DSLENG               PICK UP LENGTH
         CVD   R1,DBLWD                CONVERT
         UNPK  DBLWD(3),DBLWD+4(4)     UNPACK
         OI    DBLWD+2,C'0'            CLEAR SIGN
         CH    R1,H100                 LENGTH < 100
         BL    CFL10                   YES
         MVC   1(3,R10),DBLWD          NO, MOVE 3-DIGIT LENGTH
         B     CFWRT                   CONTINUE
CFL10    CH    R1,H10                  LENGTH < 10
         BL    CFL1                    YES
         MVC   1(2,R10),DBLWD+1        NO, MOVE 2-DIGIT LENGTH
         B     CFWRT                   CONTINUE
CFL1     MVC   1(1,R10),DBLWD+2        MOVE 1-DIGIT LENGTH
CFWRT    BAL   R9,WRTOUT               WRITE THE RECORD
         BAL   R9,PRINT                PRINT THE RECORD
         LA    R11,L'DSECT(R11)        TO NEXT FIELD ENTRY
         B     CENDFTB                 LOOP
ENDSTMT  MVC   MNEMONIC,=CL5'END'      MNEMONIC TO OUTPUT RECORD
         MVC   OPNDS(8),ENDLBLNM       POINT END STMT TO BEGIN LOC
         BAL   R9,WRTOUT               WRITE THE RECORD
         BAL   R9,PRINT                GO PRINT IT
CLOSES   CLOSE (SYSLIB,,SYSPUNCH,,SYSPRINT,,SYSIN) CLOSE FILES
         L     R13,4(R13)              GET POINTER TO CALLER'S SAVE ARE
         LM    R14,R12,12(R13)         RESTORE CALLER'S REGS
         SR    R15,R15                 CLEAR RETURN CODE
         BR    R14                     RETURN TO CALLER
         DROP  R11
*
*
*
*                 *** DATA AND WORK AREAS ***
****************************************************************
*
* FOLLOWING FIELDS: COMMPARM THRU COMMEND ARE COMMON AREAS SHARED
* BY THIS, AND CALLED SUB-PROGRAMS. ALL CHANGES MUST BE COORDINTAED
* WITH ALL OTHER PROGRAMS.
*
****************************************************************
*
         DS    0D
COMMPARM EQU   *                       COMMON AREAS
DBLWD    DS    D                       DOUBLEWORD WORK AREA
PUNCHDCB DC    A(SYSPUNCH)             @ SYSPUNCH DCB
PRINTDCB DC    A(SYSPRINT)             @ SYSPRINT DCB
INDCB    DC    A(SYSIN)                @ SYSIN DCB
CSECT    DC    CL8' '                  SPECIFIED CSECT NAME
ESDID    DC    X'0001'                 ESD ID OF SPECIFIED CSECT
ENDLBLNM DC    CL8' '                  SYMBOL FOR END STMT BEGIN POINTE
LINECT   DC    PL2'0'                  PRINT LINE COUNTER
START    DC    F'0'                    LKED ASSIGNED START ADDR OF CSEC
END      DC    F'0'                    CSECT END ADDRESS
LENGTH   DC    F'0'                    LENGTH OF SPECIFIED CSECT
LBLTBL   DS    F                       @ LABEL TABLE
CURRLBL  DS    F                       CURRENT LABEL ENTRY ADDR
ENDLBL   DS    F                       @ END OF LABEL TBL
LBLLGTH  DC    AL2(L'LABEL)            LENGTH OF LABEL ENTRY         */
TXTSTRT  DS    F                       @ TEXT STORAGE AREA
TXTEND   DS    F                       @ END OF TEXT AREA
TXTCURR  DS    F                       @ CURRENT TEXT LOC
DTBCURR  DC    F'0'                    DSECT TABLE CURRENT ENTRY ADDR
DTBEND   DC    F'0'                    DSECT TABLE END ADDR
DTBSTRT  DC    A(HIVAL)                DSECT TABLE START ADDR
USGSTRT  DC    A(HIVAL)                USING TABLE START ADDR
USGCUR   DC    F'0'                    USING TABLE CURRENT ADDR
USGEND   DC    F'0'                    USING TABLE END ADDR
DATONLY  DS    F                       DATA ONLY TABLE ADDR
DATOCUR  DS    F                       CURRENT DATA ONLY ADDR
DATOEND  DS    F                       END OF DATA ONLY TABLE
FLPTASM  DC    X'00'                   FLOATING POINT INDICATOR
PRIVASM  DC    X'00'                   PRIVILEGED INDICATOR
USERR    DC    X'00'                   ERROR INDIC FOR DISASM1
NBRLBLS  DC    H'0'                    NBR LABELS FROM DISASM1
*
*
*
WORKREC  DS    0CL80                   DISASSEMBLY WORK AREA
NAME     DS    CL8                     NAME
         DS    CL1
MNEMONIC DS    CL5                     INSTRUCTION MNEMONIC
         DS    CL1
OPNDS    DS    CL27                    1ST OPERAND
         DS    CL1
COMMENT  DS    CL28                    COMMENT
COL72    DS    CL1
SEQNBR   DS    CL8                     CARD SEQ NBR
*
*
*
CARDNO   DC    PL4'0'                  OUTPUT CARD NBR
PRTLINE  DS    0CL121                  PRINT LINE
PCC      DC    C'1'                    CARRIAGE CONTROL
PRT      DC    CL120' '                PRINT DATA
*
*
*
         DS    0F
BLDLIST  DS    0CL62                   BLDL LIST
         DC    H'1'                    ONE ENTRY
         DC    H'58'                   LENGTH OF ENTRY
MEMBER   DC    CL8' '                  MEMBER NAME
TTRMOD   DC    XL3'000000'             TTR OF MODULE
CCAT     DC    XL1'00'                 CONCATENATION NUMBER
         DC    XL1'00'
ALIASIND DC    XL1'00'                 ALIAS AND MISC INDICATOR
*                           80=ALIAS
TTR1TXT  DC    XL3'000000'             TTR OF 1ST TXT RECORD
         DC    XL1'00'
TTRNS    DC    XL3'000000'             TTR OF NOTE OR SCATTER LIST
NNOTE    DC    XL1'00'                 NBR ENTRIES IN NOTE LIST
ATTR1A   DC    XL1'00'                 MODULE ATTRIBUTES 1, BYTE 1
*                           80=RENT
*                           40=REUS
*                           20=OVERLAY
*                           10=UNDER TEST
*                           08=ONLY LOADABLE
*                           04=SCATTER FORMAT
*                           02=EXECUTABLE
*                           01=ONE TXT, NO RLD RECORDS
ATTR1B   DC    XL1'00'                 ATTRIBUTES 1, BYTE 2
*                           80=CANNOT BE REPROCESSED BY LKED E
*                           40=ORIGIN OF 1ST TXT RECORD IS ZERO
*                           20=ASSIGNED ENTRY POINT ADDR IS ZERO
*                           10=CONTAINS NO RLD RECORD
*                           08=CANNOT BE REPROCESSED BY LKED
*                           04=CONTAINS TESTRAN SYMBOLS
*                           02=CREATED BY LKED
*                           01=REFR
TOTVIRT  DC    XL3'000000'             TOTAL VIRTUAL STRG REQRD FOR MOD
LENG1    DC    XL2'0000'               LENGTH OF 1ST TEXT RECORD
LKEPA    DC    XL3'000000'             ASSIGNED ENTRY POINT ADDR
ATTR2    DC    XL1'00'                 ATTRIBUTES 2
*                           80=PROCESSED BY OS/VS LKED
*                           20=PAGE ALIGNMENT REQUIRED FOR MODULE
*                           10=SSI PRESENT
         DC    XL2'0000'
SCTRLEN  DC    XL2'0000'               SCATTER LIST LENGTH
TTLEN    DC    XL2'0000'               TRANSLATION TABLE LENGTH
SCESDID  DC    XL2'0000'               CESD NBR FOR 1ST TXT RECD
SCEPESD  DC    XL2'0000'               CESD NBR FOR ENTRY POINT
ALEPA    DC    XL3'000000'             ENTRY POINT OF THE MEMBER NAME
ALMEM    DC    CL8' '                  REAL MEMBER NAME FOR ALIAS
SSI      DS    XL4'00000000'           SSI BYTES
AUTHLEN  DC    XL1'00'                 AUTH CODE LENGTH
AUTHCOD  DC    XL1'00'                 AUTH CODE
*
*
*
COMMEND  EQU   *
*
*
*
LABELD   DSECT ,                       LABEL TABLE ENTRY
LABEL    DS    0CL13                   13-BYTE ENTRIES
LBLADR   DS    XL3                     RELATIVE ADDR IN TEXT
LBLTYP   DS    CL1                     TYPE: L=LABEL, A=ADCON, V=VCON,
LBLNAME  DS    CL8                     NAME (SYMBOL)
LBLLEN   DS    XL1                     LENGTH IF A, V, OR W
*
*
*
USINGD   DSECT ,                       USING TABLE ENTRY
USING    DS    0CL11
USBGN    DS    XL3                     OFFSET TO BEGINNING OF RANGE
USEND    DS    XL3                     OFFSET TO END OF RANGE
USREG    DS    XL1                     BASE REGISTER USED
USTYPE   DS    XL1                     TYPE:P=PGM,D=DSECT
USVALU   DS    XL3                     BASE REG VALUE
*
*
*
DSECTD   DSECT ,                       DSECT FIELD TABLE ENTRY
DSECT    DS    0CL13
DSOFSET  DS    XL3                     OFFSET TO 1ST BYTE OF FIELD
DSLBTYP  DS    CL1                     LABEL TYPE = L
DSNAME   DS    CL8                     FIELD NAME
DSLENG   DS    XL1                     FIELD LENGTH
*
*
*
DISASM   CSECT
*
*
*
*
*
*
RLDTBLD  DSECT ,                       RELOCATION DICTIONARY TABLE
RLDENT   DS    0CL20                   11 BYTE ENTRIES
RLDRP    DS    XL2                     RELOCATION POINTER
RLDPP    DS    XL2                     POS PTR (SYMBOL CESD NBR)
RLDTYPE  DS    XL1                     TYPE
*                    00=A-TYPE ADCON
*                    01=V-TYPE ADCON
*                    02=PSEUDO REGISTER DISPLACEMENT
*                    03=PSEUDO REG CUMULATIVE DISPL
*                    08=UNRESOLVED
RLDLEN   DS    XL1                     LENGTH OF CONSTANT
RLDDIR   DS    CL1                     RELOCATION DIRECTION, + OR
RLDADDR  DS    XL3                     LKED ASSGND ADDR OF CONSTANT
RLDNAME  DS    CL8                     NAME FROM ASSOC ESD
RLDESDTP DS    XL1                     TYPE FROM ASSOC ESD
         DS    XL1
DISASM   CSECT
*
*
*
SYMTBL   DSECT ,                       EXTERNAL SYMBOL TABLE ENTRY
SYMENT   DS    0CL19                   19 BYTE ENTRIES
EXTSYM   DS    CL8                     EXTERNAL SYMBOL NAME
TYPSYM   DS    XL1                     SYMBOL TYPE
*                        00=SD (NAMED CSECT)
*                        02=ER (EXTRN)
*                        03=LR (ENTRY)
*                        04=PC (UNNAMED CSECT)
*                        05=CM (COM)
*                        06=PR (PSEUDO REGISTER)
*                        07=NULL
*                        0A=WX (WXTRN)
*                        0F=ENTAB OR SEGTAB
SYMIND   DS    XL1                     INDICATOR
*                        BIT 0 = MAP
*                        BIT 1 = CHAIN
*                        BIT 2 = INSERT
*                        BIT 3 = DELETE/REPLACE
SYMADDR  DS    XL3                     SYMBOL ADDRESS (0 FOR ER, WX, NU
SYMSEG   DS    XL1                     SEGMENT ID (0 FOR ER, WX, NULL)
SYMLRID  DS    0XL2                    ESD ID OF DEF FOR LR
SYMLENG  DS    XL3                     LENGTH FOR SD, PC, CM, PR
*                        0 FOR ER, WX, NULL
SYMESDID DS    XL2                     ESD ID OF THIS ITEM
DISASM   CSECT
*
*
*
BUFAD    DS    F                       SYSLIB BUFFER ADDR
SYMTBAD  DS    F                       SYMBOL TABLE ADDRESS
CURRSYM  DS    F                       CURRENT SYM TBL ADDR
ENDSYM   DC    F'76000'                SYM TBL END ADDR
RLDTBL   DS    F                       ADDR OF RLD TABLE
CURRLD   DS    F                       CURR RLD TBL ADDR
ENDRLD   DC    F'120000'               RLD TBL END ADDR
ENDATO   DC    F'3072'                 DATA ONLY TBL LENGTH
PROCESS  DC    XL1'00'                 PROCESS INDIC 80=SYM TBL BUILT
CES9     DS    F                       CESDREC RETURN ADDR
BL9      DS    F                       BLDL RTN RETURN ADDR
CR9      DS    F                       CTRLRECS RETURN ADDR
CT9      DS    F                       CNTLRECS RETURN ADDR
RL9      DS    F                       RLDRECS RETURN ADDR
TX9      DS    F                       TXTFMT RETURN ADDR
HIVAL    DC    4X'FF'                  CONSTANT F'S
H1000    DC    H'1000'                 CONSTANT 1000
H100     DC    H'100'                  CONSTANT 100
H10      DC    H'10'                   CONSTANT 10
SYMLEN   DC    AL2(L'SYMENT)           LENGTH OF SYMTBL ENTRY        */
PRTABL   DS    CL9                     HEX-PRINTABLE CONVERSION AREA
P0       DC    P'0'                    CONSTANT 0
P1       DC    P'1'                    CONSTANT 1
P58      DC    P'58'                   CONSTANT 58
JFCBAD   DS    0F                      DCB EXIT LIST
         DC    X'87'                   RDJFCB, END OF LIST
         DC    AL3(JFCB)               ADDRESS OF JFCB READ AREA
JFCB     DS    CL176                   JFCB
SYMHDR   DC    C'0     SYMBOL        TYPE   IND  ADDR'
         DC    C'    SEG  LRID   LENG  ESDID'
         DC    CL64' '
*
*
*
RLDHDR   DC    C'0     RELPTR  POSPTR      TYPE     LEN'
         DC    C'    DIR   ADDR'
         DC    CL90' '
*
*
*
PH1LBL   DC    CL121'1***** PHASE 1 LABEL TABLE *****'
PH1HDR   DC    CL121'0  ADDR TYPE  SYMBOL  LEN'
*
*
*
H1       DC    H'1'                    CONSTANT 1
H5       DC    H'5'                    CONSTANT 5
H11      DC    H'11'                   CONSTANT 11
H16      DC    H'16'                   CONSTANT 16
H256     DC    H'256'                  CONSTANT 256
BLANX    DC    CL121' '                CONSTANT BLANKS
XZROS    DC    8X'00'                  CONSTANT ZEROS
TRTBL    DC    C'0123456789ABCDEF'     TRANSLATE TBL
NOCNTRL  DC    C'MEMBER AND CSECT MUST BE ENTERED VIA SYSIN'
OVER8    DC    C'MEMBER OR CSECT NAME OVER 8 CHARACTERS'
NOMEM    DC    C'NO MEMBER NAME FOUND IN CONTROL CARD OR PARM'
INVMEM   DC    C'SPECIFIED MEMBER NOT FOUND IN SYSLIB PDS'
INVCSECT DC    C'SPECIFIED CSECT NOT FOUND IN MEMBER'
FULLSYM  DC    C'SYMBOL TABLE FULL: OVER 4000 ENTRIES'
FULLRLD  DC    C'RLD TABLE FULL: OVER 6000 ENTRIES'
POFSET   DC    F'0'                    OFFSET FOR TEXT PRINT
PRTCHAR  DC    256C'.'                 CHARACTER TRANSLATE TABLE
         ORG   PRTCHAR+C' '
         DC    C' '
         ORG   PRTCHAR+C'A'
         DC    C'ABCDEFGHI'
         ORG   PRTCHAR+C'J'
         DC    C'JKLMNOPQR'
         ORG   PRTCHAR+C'S'
         DC    C'STUVWXYZ'
         ORG   PRTCHAR+C'0'
         DC    C'0123456789'
         ORG
*
*
*
SYSPUNCH DCB   DSORG=PS,MACRF=(PM,GM),DDNAME=SYSPUNCH,                 X
               RECFM=FB,LRECL=80
SYSIN    DCB   DSORG=PS,MACRF=GL,DDNAME=SYSIN,                         X
               RECFM=FB,LRECL=80,EODAD=NOCTL
SYSLIB   DCB   DSORG=PO,MACRF=R,DDNAME=SYSLIB,                         X
               RECFM=U,NCP=1
SYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,                      X
               RECFM=FBA,LRECL=121
LOADLIB  DCB   DSORG=PO,MACRF=R,DDNAME=LOADLIB,EXLST=JFCBAD
         END
./ ADD NAME=DISASM1  0100-94267-94267-1200-02194-02194-00000-CONYERS
DIS1     TITLE '*** DISASSEMBLY PHASE 1 ***'
         MACRO
&NAME    SVLNK &REG1,&REG2,&REG3,&IND,&LV=
         GBLC  &EQU
         GBLC  &GM
         GBLC  &CSECT
         LCLC  &REGA
         AIF   (T'&NAME EQ 'O').NOCSECT
         AIF   ('&NAME' EQ '*').NOCSECT
&CSECT   SETC  '&NAME'
&CSECT   CSECT 
         AGO   .RST
.NOCSECT ANOP
&CSECT   SETC  '*'
         CSECT 
.RST     ANOP
         AIF   ('&EQU' EQ 'ON').NRQ
&EQU     SETC  'ON'
*
***REGISTER EQUATES***
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
.NRQ     ANOP
*
*******************  PROGRAM INITIALIZATION  *************************
*
         AIF   (T'&REG1 EQ 'O').NOREG
&REGA    SETC  '&REG1'
         AIF   (T'&REG2 EQ 'O').ONEREG
         USING &CSECT,&REGA,&REG2 
         AGO   .BYUSE
.NOREG   ANOP
&REGA    SETC  'R3'
.ONEREG  USING &CSECT,&REGA 
.BYUSE   ANOP
         STM   R14,R12,12(R13) :       STORE REGS IN HIGH SAVE AREA
         LR    &REGA,R15 
         AIF   (T'&REG2 EQ 'O').NOLA
         LA    &REG2,4095(&REGA) 
         LA    &REG2,1(&REG2) 
.NOLA    ANOP
         AIF   (T'&REG3 EQ 'O').NOLNK
         L     &REG3,0(R1) 
.NOLNK   ANOP
         AIF (T'&IND EQ 'O').GETIT
         CNOP  0,4
         BAL   R15,SAVEAREA+72 
SAVEAREA DS    18F 
         ST    R15,8(R13)
         ST    R13,SAVEAREA+4
         LR    R13,R15
         AGO   .NOSAVE
.GETIT   ANOP
         AIF   (T'&LV EQ 'O').GMD
&GM      SETC  '&LV'
         AGO   .DGM
.GMD     ANOP
&GM      SETC  '72'
.DGM     ANOP
*
***GET MAIN STORAGE FOR SAVE AREA***
*
         AIF   ('&GM' LT '4096').LA
         GETMAIN R,LV=&GM 
         AGO   .EGM
.LA      ANOP
         LA    R0,&GM                  GET &GM BYTES
         GETMAIN R,LV=(0)
.EGM     ANOP
*
***SET UP SAVE AREA POINTERS***
*
         ST    R1,8(R13) 
         ST    R13,4(R1) 
         LR    R13,R1 
         AIF   (T'&REG3  NE 'O').NOSAVE
         L     R1,4(R13) 
         L     R1,24(R1) 
.NOSAVE  ANOP
         AIF   ('&CSECT' EQ '*').EXIT
         B     *+12
         DC    CL8'&CSECT'  
.EXIT    ANOP
*
*********************  END INITIALIZATION  ***************************
*
         MEND
         EJECT
DISASM1  SVLNK R3,R4
         PRINT NOGEN
* THIS SUB-PROGRAM IS CALLED BY DISASM, AND IS PHASE 2 OF
* THE DISASSEMBLY PROCESS. A COMMON DATA
* AREA IS DEFINED IN DISASM, AND PASSED TO THIS PROGRAM.
*
*    THE SYSIN FILE IS READ TO EXHAUSTION. USING CARDS ARE
* REFORMATTED AND STORED IN A TABLE - UP TO 256 USING
* STATEMENTS MAY BE ENTERED. DSECT CARDS MAY FOLLOW THE
* USING STATEMENTS. WHEN USED, DSECT STATEMENTS ARE
* REFORMATTED, AND BUILT INTO TABLES. A MAXIMUM OF 256 DSECTS
* MAY BE ENTERED. DATA ONLY CARDS MAY BE INCLUDED BEFORE, BETWEEN,
* OR AFTER DSECTS TO SHOW AREAS IN THE PROGRAM WHERE NO INSTRUCTIONS
* OCCUR. UP TO 256 DATA ONLY AREAS MAY BE SPECIFIED.
*
*     AT EOF ON SYSIN, A PSEUDO DIS-ASSEMBLY PASS IS MADE
* USING THE TEXT STORED BY DISASM. ANY RESOLVABLE ADDRESS
* WITHIN THE TEXT IS USED TO CREATE A NEW ENTRY IN THE
* LABEL TABLE, WHICH WILL BE USED BY DISASM2 IN THE
* ACTUAL DIS-ASSEMBLY PASS.
*
* THE USING CARDS FOR BASE REGISTERS ASSOCIATED WITH DSECT DEFINITIONS
* MUST BE ENTERED AT SOME POINT AFTER THE DSECT CARDS HAVE BEEN
* INCLUDED. USING CARDS FOR PROGRAM BASE REGISTERS MAY BE ENTERED
* AT ANY POINT. THE USING CARD FORMAT IS:
*       COL 1-5   : LITERAL 'USING'
*       COL 6     : BLANK
*       COL 7-12  : OFFSET TO BEGIN LOCATION FOR USING RANGE (HEX)
*       COL 13    : BLANK
*       COL 14-19 : OFFSET TO ENDING LOCATION FOR USING RANGE (HEX)
*       COL 20    : BLANK
*       COL 21    : BASE RESISTER TO BE USED (HEX, 1-F)
*       COL 22    : BLANK
*       COL 23    : TYPE, P=PROGRAM BASE, D=DSECT BASE
*       COL 24    : BLANK
*       COL 25-30 : INITIAL BASE REGISTER VALUE IF TYPE P (HEX)
*       COL 25-32 : DSECT NAME IF TYPE D
*
*     A DSECT IS ENTERED USING A HEADER CARD,FOLLOWED BY
* ONE OR MORE FIELD DEFINITION CARDS. ALL FIELD DEFINITION
* CARDS MUST FOLLOW THE DSECT HEADER CARD. USING CARDS MAY
* NOT BE INTERSPERSED WITH DSECT DEFINITIONS, BUT MAY PRECEDE
* OR FOLLOW ANY DSECT.
*     DSECT HEADER CARD FORMAT:
*        COL 1-8    : DSECT NAME
*        COL 9      : BLANK
*        COL 10-14  : LITERAL 'DSECT'
*        COL 15     : BLANK
*        COL 16-19  : NUMBER OF FIELD CARDS TO FOLLOW (DECIMAL)
*
*     DSECT FIELD CARD FORMAT:
*        COL 1-8    : FIELD NAME
*        COL 9      : BLANK
*        COL 10-13  : OFFSET TO LEFT END OF FIELD (DECIMAL)
*        COL 14     : BLANK
*        COL 15-17  : LENGTH OF FIELD IN BYTES (DECIMAL)
*
*     A DATA ONLY CARD IS USED TO DESIGNATE A RANGE OF OFFSETS
* BETWEEN WHICH NO INSTRUCTIONS EXIST. USE OF THESE CARDS ELIMINATES
* THE CHANCE THAT DATA ELEMENTS WILL BE TREATED AS INSTRUCTIONS
* BETWEEN THE OFFSETS SPECIFIED. FORMAT IS:
*        COL 1-4    : LITERAL 'DATA'
*        COL 5      : BLANK
*        COL 6-11   : OFFSET TO BEGINNING OF AREA (HEX)
*        COL 12     : BLANK
*        COL 13-18  : OFFSET TO END OF AREA (HEX)
*
*
*     USER LABEL CARDS ARE USED TO PERMIT SPECIFICATION OF
* LABELS OTHER THAN THE AXXXXXX NAMES CREATED BY DISASM. THEY
* MAY APPEAR ANYWHERE IN THE SYSIN STREAM EXCEPT AS THE FIRST
* CARD, OR WITHIN A DSECT DEFINITION.
*        COL  1-5  : LITERAL 'ULABL'
*        COL   6   : BLANK
*        COL  7-14 : FIELD NAME
*        COL   15  : BLANK
*        COL 16-21 : OFFSET TO LEFT END OF AREA (HEX)
*        COL   22  : BLANK
*        COL 23-25 : FIELD LENGTH (DECIMAL)
*
*      DISASSEMBLY TABLES ARE SET UP IDENTICALLY TO THOSE USED BY
* DISASM2 FOR THE SIMULATED DISASSEMBLY PERFORMED IN THIS
* MODULE WHEN ANY PROGRAM BASE REGISTER USING STATEMENTS
* ARE ENTERED.
*
*     STORAGE IS OBTAINED FOR THE DSECT TABLE AND USING TABLE,
* AND ADDRESSES OF THESE TABLES ARE STORED IN THE COMMON PARAMETER
* AREA. USING AND DSECT CARDS ARE EDITED, REFORMATTED, AND PLACED
* IN THE APPROPRIATE TABLES. IF ANY ERRORS ARE FOUND, THEY ARE
* PRINTED, AND THE DISASSEMBLY WILL BE TERMINATED ON RETURN
* TO DISASM.
*
*     STORAGE IS OBTAINED FOR THE LABEL TABLE, AND A SIMULATED
* DIS-ASSEMBLY IS PERFORMED TO CREATE LABEL TABLE ENTRIES FOR
* LABELS WHICH WILL BE GENERATED FOR BASE-DISPLACEMENT ADDRESSES
* BY DISASM2. ON RETURN TO DISASM, THESE LABELS WILL BE SORTED
* WITH EXTERNAL SYMBOL AND RLD LABELS TO FORM THE FINAL LABEL
* TABLE TO BE USED BY DISASM2.
*
*
*
*
* AUTHOR R THORNTON - FEB 1978
*
*
******************************************************************
*                                                                *
* CHECK FOR PRIVILEGED AND/OR FLOATING POINT INSTRUCTION OPTION. *
* IF THESE INSTRUCTIONS ARE NOT TO BE ASSEMBLED, CLEAR THEIR     *
* INSTRUCTION TABLE ENTRIES.                                     *
*                                                                *
******************************************************************
*
         L     R5,0(R1)                GET PARM FIELD ADDRESS
         USING COMMPARM,R5
         CLI   FLPTASM,1               FLOATING POINT INSTR O.K.
         BE    TSTPRIV                 YES
         LA    R12,SGLOP               POINT TO OP-CODE TBL
TSTOPND  CLI   0(R12),X'FF'            END OF TBL
         BE    TSTPRIV                 YES
         TM    ICLASS-INSTENT(R12),FLTPT IS IT FLOATING POINT
         BZ    FLPSTP                  NO
         XC    0(L'SGLOP,R12),0(R12)   CLEAR ENTRY
FLPSTP   LA    R12,L'SGLOP(R12)        TO NEXT ENTRY
         B     TSTOPND                 LOOP THRU TABLE
TSTPRIV  CLI   PRIVASM,1               PRIVILEGED INSTR O.K.
         BE    GETUSGTB                YES
         LA    R12,SGLOP               POINT TO OP-CODE TBL
TTOPND   CLI   0(R12),X'FF'            END OF TABLE
         BE    CKDBLS                  YES
         TM    ICLASS-INSTENT(R12),PRIV PRIVILEGED INSTR
         BZ    PRIVSTP                 NO
         XC    0(L'SGLOP,R12),0(R12)   YES, CLEAR ENTRY
PRIVSTP  LA    R12,L'SGLOP(R12)        TO NEXT ENTRY
         B     TTOPND                  LOOP THRU TABLE
CKDBLS   L     R12,DBLOPAD             @ 2-BYTE OP-CODE TBL
CKDBND   CLI   0(R12),X'FF'            END OF TBL
         BE    GETUSGTB                YES
         TM    ICLASS-INSTENT+2(R12),PRIV PRIVILEGED OP-CODE
         BZ    DBSTP                   NO
         XC    0(L'DBLOP,R12),0(R12)   YES, CLEAR ENTRY
DBSTP    LA    R12,L'DBLOP(R12)        TO NEXT ENTRY
         B     CKDBND                  LOOP THRU TABLE
*
******************************************************************
*                                                                *
* GET STORAGE FOR USING AND DSECT POINTER TABLES.                *
*                                                                *
******************************************************************
*
GETUSGTB GETMAIN R,LV=2864             GET STORAGE FOR USING TABLE
         MVI   0(R1),X'FF'             SET TABLE END INDIC
         ST    R1,USGSTRT              SAVE TABLE START ADDR
         ST    R1,USGCUR               SET TABLE CURRENT ADDR
         LA    R1,2816(R1)             COMPUTE TABLE END ADDR
         ST    R1,USGEND               SAVE USING TABLE END ADDR
         L     R2,INDCB                GET SYSIN DCB ADDR
         LA    R1,EOFCARD              GET EOF ADDR
         STCM  R1,7,33(R2)             SET EOF ADDR IN DCB
         GETMAIN R,LV=2864             GET STORAGE FOR DSECT TABLE
         MVI   0(R1),X'FF'             SET TABLE END ADDR
         ST    R1,DTBSTRT              SAVE DSECT TABLE START ADDR
         ST    R1,DTBCUR               SAVE DSECT TABLE CURRENT ADDR
         LA    R1,2816(R1)             COMPUTE TABLE END ADDR
         ST    R1,DTBEND               SAVE DSECT TABLE END ADDR
         L     R1,INDCB                @ SYSIN DCB
         TM    48(R1),X'10'            IS IT OPEN
         BZ    EOFCARD                 NO
*
*
*
******************************************************************
*                                                                *
* READ SYSIN CARDS, AND DISTRIBUTE TO THE APPROPRIATE PROCESSING *
* ROUTINE: USINGS, DSECTS, OR DATAS. DETECT ANY ERRORS AND PRINT *
* ALL CARDS WITH MESSAGES AS NECESSARY.                          *
*                                                                *
******************************************************************
*
RDCARD   EQU   *                       *** PROCESS SYSIN CARDS ***
         L     R1,INDCB                GET SYSIN DCB ADDR
         GET   (1)                     READ NEXT CARD
         MVC   WORKREC,0(R1)           MOVE IT TO WORK AREA
         NOP   MVPRT                   FIRST TIME SWITCH
         MVI   *-3,C'0'                RESET FIRST TIME SWITCH
         MVI   PCC,C'1'                SET SKIP TO HEAD
         MVC   PRT+10(26),=C'*** USER ENTERED CARDS ***'
         BAL   R9,PRINT                GO PRINT
MVPRT    MVC   PRT(80),WORKREC         CARD TO PRINT
RDGRTN   LA    R9,RCCKERR              GET RETURN ADDRESS
         CLC   WORKREC(5),=C'USING'    IS IT A USING CARD
         BE    USINGS                  YES
         CLC   WORKREC+9(5),=C'DSECT'  IS IT A DSECT HEADER
         BE    DSECTS                  YES
         CLC   WORKREC(4),=C'DATA'     IS IT DATA ONLY CARD
         BE    DATAS                   YES
         CLC   WORKREC(5),=C'ULABL'    IS IT A USER LABEL
         BE    ULABLS                  YES
         MVC   PRT+85(21),=C'UNIDENT OR OUT OF SEQ'
         MVI   USERR,X'FF'             SET ERROR FLAG
RCCKERR  NI    USERR,X'FE'             RESET CURRENT ERROR FLAG
         BAL   R9,PRINT                GO PRINT
         B     RDCARD                  CONTINUE
EOFCARD  CLI   USERR,0                 ANY ERRORS FOUND
         BNE   EOJ                     YES, EXIT
*
******************************************************************
*                                                                *
* CHECK FOR ANY USING CARDS ENTERED. IF NOT, NO PRE-ASSEMBLY IS  *
* NECESSARY. IF ANY USING CARDS FOUND, CREATE LABEL TABLE ENTRIES*
* SO THAT USING STATEMENTS WILL BE VALID.                        *
*                                                                *
******************************************************************
*
         L     R1,DATOCUR              GET CURRENT DATA ONLY @
         MVC   NOINAD,DATONLY          SAVE DATA ONLY TBL ADDR
         MVC   0(3,R1),HIVAL           SET END
         L     R11,USGSTRT             GET USING TBL ADDR
CUSNGND  CLI   0(R11),X'FF'            END OF TABLE
         BE    CKPRE                   GO CHECK FOR PRE-DISASM
         L     R10,CURRLBL             GET LABEL ADDRESS
         USING USINGD,R11
         USING LABELD,R10
         MVC   LBLADR,USVALU           OFFSET TO LABEL
         MVI   LBLTYP,C'L'             LABEL TYPE ENTRY
         MVI   LBLLEN,1                SET LENGTH TO 1
         MVI   LBLNAME,C'A'            1ST CHAR OF NAME
         LA    R12,USVALU              @ OFFSET
         BAL   R9,HEXPRT3              CONVERT
         MVC   LBLNAME+1(6),PRTABL     MIDDLE OF NAME
         MVI   LBLNAME+7,C' '          BLANK LAST POS
         LA    R10,L'LABEL(R10)        STEP TO NEXT LABEL
         ST    R10,CURRLBL             SAVE IN CURRLBL     FIX******
         MVC   0(3,R10),HIVAL          SET END VALUE       FIX******
         LA    R11,L'USING(R11)        STEP TO NEXT USING
         B     CUSNGND                 LOOP
         DROP  R10
         DROP  R11
CKPRE    L     R1,USGSTRT              GET USING TBL START ADDR
         CLI   0(R1),X'FF'             ANY ENTRIES
         BNE   MAINLINE                YES, GO TO PRE-DISASM
         B     EOJ                     OTHERWISE GET OUT
*
*
*
*
******************************************************************
*                                                                *
* EDIT USING CARDS FOR VALIDITY. PUT APPROPRIATE COMMENT IN PRINT*
* LINE WHEN INVALID. WHEN NO ERRORS FOUND, CREATE AN ENTRY IN THE*
* USING TABLE.                                                   *
*                                                                *
******************************************************************
*
USINGS   EQU   *                       *** USING CARD PROCESSING ***
         L     R12,USGCUR              GET CURRENT USING TBL ADDR
         C     R12,USGEND              END OF TBL
         BNL   UERR6                   YES, TABLE FULL
         USING USINGD,R12
         TR    WORKREC+6(6),TRHEX      TRANSLATE TO MAKE HEX
         TRT   WORKREC+6(6),TRTHEX     CHECK VALID
         BNZ   UERR1                   INVALID BEGIN ADDR
         TR    WORKREC+13(6),TRHEX     TRANSLATE TO MAKE HEX
         TRT   WORKREC+13(6),TRTHEX    CHECK VALID
         BNZ   UERR2                   INVALID END ADDR
         TR    WORKREC+20(1),TRHEX     TRANSLATE TO MAKE HEX
         TRT   WORKREC+20(1),TRTHEX    CHECK VALID
         BNZ   UERR3                   INVALID BASE REG
         CLI   WORKREC+20,0            VALID BASE REG
         BE    UERR3                   NO
         CLI   WORKREC+22,C'P'         VALID TYPE
         BE    CKINIT                  YES, PROGRAM BASE
         CLI   WORKREC+22,C'D'         VALID TYPE
         BNE   UERR8                   NO, ERROR
         L     R1,DTBSTRT              GET DSECT TABLE STRT
CKDSEND  CLI   0(R1),X'FF'             END OF TABLE
         BE    UERR5                   YES, MISSING DSECT
         CLC   0(8,R1),WORKREC+24      THIS THE DSECT ENTRY
         BE    USDSMV                  YES
         LA    R1,11(R1)               TO NEXT ENTRY
         B     CKDSEND                 LOOP THRU DSECT TABLE
USDSMV   MVC   USVALU,8(R1)            MOVE DSECT TBL ADDR
         B     USFINI                  CONTINUE
CKINIT   TR    WORKREC+24(6),TRHEX     TRANSLATE TO MAKE HEX
         TRT   WORKREC+24(6),TRTHEX    CHECK VALIDITY
         BNZ   UERR4                   INVALID BASE REG VALUE
         PACK  DBLWD(4),WORKREC+24(7)  PACK TO MAKE HEX
         MVC   USVALU,DBLWD            BASE REG VALUE TO USING TBL
USFINI   PACK  DBLWD(4),WORKREC+6(7)   PACK TO MAKE HEX
         MVC   USBGN,DBLWD             BEGIN ADDR TO USING TABLE
         PACK  DBLWD(4),WORKREC+13(7)  PACK TO MAKE HEX
         MVC   USEND,DBLWD             END ADDR TO USING TABLE
         TM    USEND+2,1               IS IT ODD
         BO    UERR2                   YES, ERROR
         CLI   WORKREC+22,C'D'         DSECT BASE
         BE    USFREG                  YES
         CLC   USEND,LENGTH+1          WITHIN PROGRAM
         BH    UERR2                   YES, ERROR
USFREG   MVC   USREG,WORKREC+20        BASE REG TO USING TABLE
         MVC   USTYPE,WORKREC+22       TYPE TO USING TABLE
         CLC   USBGN,USEND             END < BEGIN
         BH    UERR7                   YES, ERROR
         LA    R12,L'USING(R12)        TO NEXT USING TBL ENTRY
         MVI   0(R12),X'FF'            SET TABLE END INDIC
         ST    R12,USGCUR              SAVE UPDATED TABLE ADDR
         BR    R9                      EXIT
UERR1    MVC   PRT+85(22),=C'INVALID BEGIN COL 7-12'
         B     UERRS                   CONTINUE
UERR2    MVC   PRT+85(21),=C'INVALID END COL 14-19'
         B     UERRS                   CONTINUE
UERR3    MVC   PRT+85(18),=C'INVALID REG COL 21'
         B     UERRS                   CONTINUE
UERR4    MVC   PRT+85(25),=C'INVALID ADDRESS COL 25-30'
         B     UERRS                   CONTINUE
UERR5    MVC   PRT+85(25),=C'UNDEFINED DSECT COL 25-32'
         B     UERRS                   CONTINUE
UERR6    MVC   PRT+85(20),=C'OVER 256 USING CARDS'
         B     UERRS                   CONTINUE
UERR7    MVC   PRT+85(16),=C'END BEFORE BEGIN'
         B     UERRS                   CONTINUE
UERR8    MVC   PRT+85(19),=C'INVALID TYPE COL 23'
UERRS    MVI   USBGN,X'FF'             INSURE TABLE END INDIC
         MVI   USERR,X'FF'             SHOW ERROR
         BR    R9                      EXIT
         DROP  R12
*
*
*
******************************************************************
*                                                                *
* EDIT ULABL CARDS FOR VALIDITY. PUT APPROPRIATE COMMENT IN PRINT*
* LINE WHEN INVALID. WHEN NO ERRORS FOUND, CREATE AN ENTRY IN THE*
* LABEL TABLE. SEARCH FOR ANY TYPE A (ADCON) ENTRIES HAVING A    *
* SYMBOL OF AXXXXXX, WHERE XXXXXX IS THE HEX OFFSET TO THE USER  *
* LABEL. IF AN A TYPE ENTRY IS FOUND, CHANGE ITS SYMBOLIC NAME TO*
* THAT OF THE USER LABEL.                                        *
*                                                                *
******************************************************************
*
ULABLS   EQU   *                       PROCESS USER LABEL CARDS
         STM   R6,R12,ULSAV            SAVE REGS
         CLI   WORKREC+6,C' '          NAME VALID
         BE    ULERR1                  NO, 1ST CHAR CANNOT BE BLANK
         MVC   UNAME+1(6),WORKREC+15   BUILD AXXXXXX NAME
         TR    WORKREC+15(6),TRHEX     TRANSLATE TO MAKE HEX
         TRT   WORKREC+15(6),TRTHEX    CHECK VALID HEX
         BNZ   ULERR2                  NOT VALID
         MVZ   NUMCK,WORKREC+22        ZONES FOR NUMERIC TEST
         CLC   NUMCK(3),ZEROS          LENGTH IS NUMERIC
         BNE   ULERR3                  NO, ERROR
         L     R6,CURRLBL              GET CURRENT LABEL TABLE ADDRESS
         USING LABELD,R6
         C     R6,ENDLBL               END OF TABLE
         BNL   ULERR4                  YES, ERROR
         MVC   LBLNAME,WORKREC+6       NAME TO LABEL ENTRY
         MVI   LBLTYP,C'U'             TYPE TO LABEL ENTRY
         PACK  DBLWD,WORKREC+22(3)     PACK LENGTH
         CP    DBLWD,P256              LENGTH > 256
         BH    ULERR2                  YES, ERROR
         CVB   R12,DBLWD               CONVERT TO BINARY
         STC   R12,LBLLEN              LENGTH TO LABEL ENTRY
         PACK  DBLWD(4),WORKREC+15(7)  PACK TO MAKE VALID HEX
         MVC   LBLADR,DBLWD            OFFSET TO LABEL
         LA    R7,L'LABEL(R6)          @ NEXT LABEL ENTRY
         MVC   0(3,R7),HIVAL           SET END INDIC
         ST    R7,CURRLBL              SET NEW TABLE END ADDR
         LR    R7,R6                   SAVE NEW ENTRY ADDRESS
         L     R6,LBLTBL               GET 1ST LABEL ENTRY ADDR
ULBCKND  C     R6,CURRLBL              END OF TABLE
         BNL   ULXIT                   YES, EXIT
         CLI   LBLTYP,C'A'             IS IT ADCON ENTRY
         BNE   ULBSTEP                 NO
         CLC   LBLNAME,UNAME           ADCON SYMBOL AT USER LBL ADDR
         BNE   ULBSTEP                 NO
         MVC   LBLNAME,LBLNAME-LABEL(R7) SET USER SYMBOL IN ADCON
ULBSTEP  LA    R6,L'LABEL(R6)          TO NEXT LABEL ENTRY
         B     ULBCKND                 LOOP THRU LABEL TABLE
         B     ULXIT                   EXIT
ULERR1   MVC   PRT+85(21),=C'INVALID NAME COL 7-14'
         B     ULERRS                  CONTINUE
ULERR2   MVC   PRT+85(28),=C'INVALID HEX OFFSET COL 16-21'
         B     ULERRS                  CONTINUE
ULERR3   MVC   PRT+85(32),=C'INVALID DECIMAL LENGTH COL 23-25'
         B     ULERRS                  CONTINUE
ULERR4   MVC   PRT+85(20),=C'LABEL TABLE OVERFLOW'
ULERRS   MVI   USERR,X'FF'             SET ERROR FLAG
ULXIT    LM    R6,R12,ULSAV            RESTORE REGS
         BR    R9                      EXIT
*
*
*
******************************************************************
*                                                                *
* EDIT DSECT CARDS FOR VALIDITY. PUT APPROPRIATE COMMENT IN PRINT*
* LINE WHEN INVALID. WHEN NO ERRORS FOUND, CREATE AN ENTRY IN THE*
* DSECT HEADER TABLE, GETMAIN AN AREA TO CONTAIN THE FIELD       *
* DESCRIPTION ENTRIES, READ AND BUILD FIELD ENTRIES FOR ALL FIELD*
* DESCRIPTION CARDS ENTERED.                                     *
*                                                                *
******************************************************************
*
DSECTS   EQU   *                       *** DSECT PROCESSING ***
         ST    R9,DSCT9                SAVE RETURN ADDR
         CLI   WORKREC,C' '            NAME IS BLANK
         BE    DSERR1                  YES, ERROR
         MVZ   NUMCK,WORKREC+15        ZONES FOR CHECK
         CLC   NUMCK,ZEROS             IS NBR FIELDS NUMERIC
         BNE   DSERR2                  NO, ERROR
         L     R12,DTBCUR              GET CURRENT DSECT TBL ADDR
         C     R12,DTBEND              AT END OF TABLE
         BNL   DSERR3                  YES, ERROR
         MVC   0(8,R12),WORKREC        NAME TO DSECT TABLE
         PACK  DBLWD,WORKREC+15(4)     PACK NBR ENTRIES
         CVB   R10,DBLWD               CONVERT TO BINARY
         LA    R10,4(R10)              ADD FOR SAFETY
         MH    R10,DTBLEN              TIMES ENTRY LENGTH
         GETMAIN R,LV=(10)             GET STORAGE FOR FIELD TABLE
         STCM  R1,7,8(R12)             SAVE FIELD TABLE ADDRESS
         LA    R12,11(R12)             TO NEXT DSECT TABLE ENTRY
         ST    R12,DTBCUR              UPDATE CURRENT DSECT TBL ADDR
         MVI   0(R12),X'FF'            SET END INDIC
         LR    R12,R1                  COPY FIELD TABLE ADDR
         BAL   R9,PRINT                PRINT DSECT RECORD
         USING DSECTD,R12
         CVB   R11,DBLWD               NBR ENTRIES IN LOOP REG
RDFLD    L     R1,INDCB                GET SYSIN DCB ADDR
         GET   (1)                     READ NEXT CARD
         MVC   WORKREC,0(R1)           MOVE RECORD TO WORK AREA
         MVC   PRT(80),WORKREC         MOVE RECORD TO PRINT AREA
         CLI   WORKREC,C' '            NAME FIELD BLANK
         BE    DSERR1                  YES, ERROR
         MVC   DSNAME,WORKREC          NAME TO ENTRY
         MVI   DSLBTYP,C'L'            SET LABEL TYPE
         MVZ   NUMCK,WORKREC+9         ZONES FOR TEST
         CLC   NUMCK,ZEROS             IS OFFSET NUMERIC
         BNE   DSERR3                  NO, ERROR
         PACK  DBLWD,WORKREC+9(4)      PACK OFFSET
         CP    DBLWD,P4096             OFFSET > 4096
         BH    DSERR3                  YES, ERROR
         CVB   R1,DBLWD                CONVERT
         STCM  R1,7,DSOFSET            OFFSET TO TABLE ENTRY
         MVZ   NUMCK(3),WORKREC+14     ZONES FOR TEST
         CLC   NUMCK(3),ZEROS          IS LENGTH NUMERIC
         BNE   DSERR4                  NO, ERROR
         PACK  DBLWD,WORKREC+14(3)     PACK LENGTH
         CP    DBLWD,P256              LENGTH OVER 256
         BH    DSERR4                  YES, ERROR
         CVB   R1,DBLWD                CONVERT
         LTR   R1,R1                   LENGTH IS ZERO
         BZ    DSERR4                  YES, ERROR
         STC   R1,DSLENG               LENGTH TO TABLE ENTRY
         LA    R12,L'DSECT(R12)        TO NEXT ENTRY
         MVI   0(R12),X'FF'            SET TBL END INDIC
         BAL   R9,PRINT                GO PRINT CARD
         BCT   R11,RDFLD               LOOP THRU DSECT
         MVC   DSOFSET,HIVAL           TABLE STOPPER
         L     R9,DSCT9                GET RETURN ADDR
         BR    R9                      EXIT
DSERR1   MVC   PRT+85(20),=C'INVALID NAME COL 1-8'
         B     DSERRS                  CONTINUE
DSERR2   MVC   PRT+85(28),=C'INVALID NBR FIELDS COL 16-19'
         B     DSERRS                  CONTINUE
DSERR3   MVC   PRT+85(24),=C'INVALID OFFSET COL 10-13'
         B     DSERRS                  CONTINUE
DSERR4   MVC   PRT+85(24),=C'INVALID LENGTH COL 15-18'
         B     DSERRS                  CONTINUE
DSERRS   MVI   USERR,X'FF'             SHOW ERROR FOUND
         L     R9,DSCT9                GET RETURN ADDR
         BR    R9                      EXIT
         DROP  R12
*
*
*
******************************************************************
*                                                                *
* EDIT DATA ONLY CARDS FOR VALIDITY. PLACE ERROR DESCRIPTION IN  *
* PRINT LINE IF ERRORS FOUND. CREATE DATA ONLY TABLE ENTRY IF NO *
* ERRORS ARE FOUND.                                              *
*                                                                *
******************************************************************
*
DATAS    EQU   *                       *** DATA CARD PROCESSING ***
         TR    WORKREC+5(6),TRHEX      TRANSLATE TO MAKE HEX
         TRT   WORKREC+5(6),TRTHEX     CHECK VALID
         BNZ   DERR1                   INVALID HEX
         TR    WORKREC+12(6),TRHEX     TRANSLATE TO MAKE HEX
         TRT   WORKREC+12(6),TRTHEX    CHECK VALID
         BNZ   DERR2                   INVALID HEX
         PACK  DBLWD(4),WORKREC+5(7)   PACK TO MAKE HEX
         PACK  DBLWD+4(4),WORKREC+12(7) PACK TO MAKE HEX
         CLC   DBLWD(3),DBLWD+4        CHECK 1ST LOW
         BNL   DERR3                   1ST NOT LOW, ERROR
         L     R1,DATOCUR              GET TBL ADDR
         MVC   0(3,R1),DBLWD           MOVE 1ST OFFSET TO TBL
         MVC   3(3,R1),DBLWD+4         MOVE 2ND OFFSET TO TBL
         LA    R1,6(R1)                TO NEXT ENTRY
         ST    R1,DATOCUR              SAVE CURRENT ENTRY ADDR
         BR    R9                      EXIT
DERR1    MVC   PRT+85(22),=C'1ST OFFSET INVALID HEX'
         B     DERRS                   CONTINUE
DERR2    MVC   PRT+85(22),=C'2ND OFFSET INVALID HEX'
         B     DERRS                   CONTINUE
DERR3    MVC   PRT+85(23),=C'END OFFSET BEFORE BEGIN'
DERRS    MVI   USERR,X'FF'             FLAG ERROR
         BR    R9                      EXIT
*
*
*
******************************************************************
*                                                                *
* MAINLINE ROUTINE FOR THE PRE-DISASSEMBLY. PURPOSE OF THIS PART *
* OF THE PROGRAM IS TO ATTEMPT TO CREATE A LABEL ENTRY FOR INSTR-*
* UCTIONS HAVING STORAGE OPERANDS. THE RESULTING LABEL TABLE WILL*
* BE SORTED, AND DUPLICATE ENTRIES ELIMINATED BEFORE EXIT FROM   *
* THIS PHASE OF DISASSEMBLY.                                     *
*                                                                *
******************************************************************
*
MAINLINE EQU   *                       MAINLINE ROUTINE
         L     R6,LBLTBL               @ LABEL TABLE
         USING LABELD,R6
         MVC   TXTCURR,TXTSTRT         COPY TEXT START ADDR
GETCURR  L     R7,TXTCURR              @ CURRENT TXT BYTE
         C     R7,TXTEND               END OF TEXT
         BNL   EOJ                     YES             FIX********
         LR    R12,R7                  COPY TEXT ADDR
         S     R12,TXTSTRT             COMPUTE OFFSET
         ST    R12,TXTOFST             SAVE OFFSET TO THIS BYTE
         CLC   NEXCHG,TXTOFSET         TIME TO CHANGE USING TBLS
         BH    CKDARNG                 NO
         BAL   R9,NEXUSG               YES, GO DO IT
CKDARNG  L     R12,NOINAD              GET DATA ONLY ENTRY ADDRESS
         CLC   TXTOFSET,0(R12)         NOT YET TO THIS RANGE
         BL    CKLOSEQ                 TRUE
         CLC   TXTOFSET,3(R12)         NOW IN THE RANGE
         BNH   CONST                   TRUE, TREAT AS CONSTANT
         LA    R12,6(R12)              PAST THIS ONE, STEP TO NEXT
         ST    R12,NOINAD              SAVE NEW ADDRESS
         B     CKDARNG                 AND CHECK AGAIN
CKLOSEQ  CLC   TXTOFSET,LBLADR         LABEL ENTRY OUT OF SEQ
         BNH   GCKODD                  NO, CONTINUE
         BAL   R9,FORCONST             YES, FORCE ANY CONSTANT OUT
         LA    R6,L'LABEL(R6)          TO NEXT LABEL
         B     CKLOSEQ                 CONTINUE SEQ CHK
GCKODD   TM    TXTCURR+3,1             ODD ADDRESS
         BO    CONST                   YES, NOT INSTR
         CLC   1(3,R7),0(R7)           4 CONSEC IDENTICAL BYTES
         BE    CONST                   YES, NOT INSTR
         TRT   0(1,R7),CHARTRAN        TEST TEXT BYTE
         BNZ   CKINSTR                 NOT CHARACTER
         CLI   CONPROG,1               IS CONSTANT IN PROGRESS
         BNE   CK6                     NO
         CLI   CONTYPE,C'C'            IS IT CHARACTER TYPE
         BE    CONST                   YES, ADD THIS TO CONSTANT
CK6      TRT   0(6,R7),CHARTRAN        6 CONSECUTIVE CHARACTERS
         BZ    CONST                   YES, NOT INSTRUCTION
CKINSTR  SR    R8,R8                   CLEAR WORK
         IC    R8,0(R7)                PICK UP TXT BYTE
         MH    R8,SGOPLEN              TIMES TABLE LENGTH
         LA    R8,SGLOP(R8)            @ INSTR TBL ENTRY
         MVC   INSTENT,0(R8)           SAVE INSTRUCTION TBL ENTRY
         CLI   INAME,0                 IS IT AN INSTR OP-CODE
         BE    CONST                   NO
         CLI   ITYPE,TWO               TWO-BYTE OP-CODE
         BNE   INSTR                   NO
         L     R8,DBLOPAD              YES, GET 2-BYTE TBL ADDR
DBLND    CLI   0(R8),X'FF'             END OF TABLE
         BE    CONST                   YES, NOT INSTR
         CLC   0(2,R8),0(R7)           THIS ENTRY MATCHES TXT
         BE    GOTDBLI                 YES
         LA    R8,L'DBLOP(R8)          TO NEXT ENTRY
         B     DBLND                   LOOP THRU TBL
GOTDBLI  LA    R8,2(R8)                PASS OP-CODE BYTES
*
*
*
******************************************************************
*                                                                *
* CHECK TO SEE IF THIS BYTE OF THE PROGRAM IS AN INSTRUCTION OP  *
* CODE. IF SO, PERFORM THE APPROPRIATE PROCESSING ROUTINE.       *
*                                                                *
******************************************************************
*
INSTR    EQU   *                       *** INSTRUCTIONS (POSSIBLY) ***
         MVC   ILENG+1(1),INLNG        SET INSTR LENGTH
         LH    R12,ILENG               PICK UP LENGTH
         AR    R12,R7                  ADDR OF NEXT OP CODE
         SR    R15,R15                 CLEAR WORK
         IC    R15,0(R12)              PICK UP NEXT OP-CODE
         MH    R15,SGOPLEN             TIMES TBL ENTRY LENG
         LA    R15,SGLOP(R15)          INSTR TBL ENTRY ADDR
         CLI   INAME-INSTENT(R15),0    IS IT AN OP-CODE
         BNE   ICKSEC                  YES
         CLI   0(R7),X'45'             IS IT BAL
         BE    ICKTBL                  YES, CONTINUE
         CLI   0(R7),7                 NO, IS IT BRCH
         BE    POSSB                   YES
         CLI   0(R7),X'47'             IS IT BRCH
         BNE   CONST                   NO, THEN THIS NOT INSTR
POSSB    TM    1(R7),X'F0'             IS IT UNCONDL BRCH
         BNO   CONST                   NO, THEN THIS NOT INSTR
         B     ICKTBL                  ACCEPT UNCOND BRCHS
ICKSEC   SR    R1,R1                   CLEAR WORK
         IC    R1,INLNG-INSTENT(R15)   GET INSTR LENGTH
         AR    R1,R12                  ADDR OF NEXT OP CODE
         SR    R14,R14                 CLEAR WORK
         IC    R14,0(R1)               PICK UP NEXT OP-CODE
         MH    R14,SGOPLEN             TIMES TBL ENTRY LENG
         LA    R14,SGLOP(R14)          INSTR TBL ENTRY ADDR
         CLI   INAME-INSTENT(R14),0    IS IT AN OP-CODE
         BNE   ICKTBL                  YES
         CLI   0(R12),X'45'            IS IT BAL
         BE    ICKTBL                  YES, CONTINUE
         CLI   0(R12),X'07'            NO, IS IT BRCH
         BE    POSSB2                  YES
         CLI   0(R12),X'47'            IS IT BRCH
         BNE   CONST                   NO, THEN THIS NOT INSTR
POSSB2   TM    1(R12),X'F0'            IS IT UNCONDL BRCH
         BNO   CONST                   NO, THEN THIS NOT INSTR
ICKTBL   LH    R12,ILENG               GET INSTR LENGTH
         AR    R12,R7                  @ NEXT TEXT LOC
         BCTR  R12,R0                  BACK UP 1
         S     R12,TXTSTRT             RELATIVIZE IN CSECT
         CLM   R12,7,LBLADR            LBL TBL ADDR HERE
         BL    NOILBL                  NO
         CLC   TXTOFSET,LBLADR         LABEL AT INSTR START
         BNE   CONST                   NO, MUST BE CONSTANT
         CLI   LBLTYP,C'L'             IS IT A LABEL ONLY
         BNE   CONST                   NO
         CLI   CONPROG,1               CONSTANT IN PROGRESS
         BNE   SETLBL                  NO
         BAL   R9,FORCONST             YES, FORCE IT OUT
SETLBL   LA    R6,L'LABEL(R6)          TO NEXT LABEL TBL ENTRY
         B     ICKTBL                  GO CHECK NEXT LABEL
NOILBL   CLI   CONPROG,1               CONSTANT IN PROGRESS
         BNE   MVMNE                   NO
         BAL   R9,FORCONST             YES, FORCE IT OUT
MVMNE    MVC   MNEMONIC,0(R8)          SET INSTR MNEMONIC
         MVC   OFFSET,TXTOFSET         SET OFFSET
         MVC   INSTYP,5(R8)            SET INSTR TYPE
         MVI   TYPE,X'0D'              SHOW IT IS AN INSTRUCTION
         MVC   LEN,ILENG+1             SHOW LENGTH
         MVC   TEXT(6),0(R7)           MOVE ACTUAL TEXT
OPNDFMT  TM    ICLASS,FLTPT            FLOATING POINT OP-CODE
         BO    FPVERFY                 YES, GO VERIFY
         CLI   IEDT,0                  ANY EDIT REQUIRED
         BE    PFMFMT                  NO
         B     IVERFY                  YES, GO EDIT
PFMFMT   SR    R1,R1                   CLEAR WORK
         IC    R1,INSTYP               GET INSTRUCTION TYPE
         L     R9,OPND9                GET FORMAT ROUTINE RETURN ADDR
         B     *+4(R1)                 TO APPROPRIATE FORMATTING ROUTIN
         B     INSTOUT                 TYPE=0, RR
         B     RXOPND                  TYPE=4, RX
         B     SOPND                   TYPE=8, S
         B     SIOPND                  TYPE=C, SI
         B     RSOPND                  TYPE=10, RS
         B     SS1OPND                 TYPE=14, 1-LENGTH SS
         B     SS2OPND                 TYPE=18, 2-LENGTH SS
         B     SOPND                   TYPE=1C, 2-BYTE OP-CODES
         B     RXOPND                  TYPE=20, CONDITIONAL BRANCH
         B     SVCOPND                 TYPE=24, SVC
OPNDRTN  B     INSTOUT                 NORMAL OPERAND FORMAT RETURN
         B     CONST                   ERROR INSTRUCTION, TREAT AS CONS
INSTOUT  AH    R7,ILENG                STEP TO NEXT TEXT BYTE
         ST    R7,TXTCURR              SAVE NEXT ADDR
         MVC   CCTYPE,ICCSET           SHOW COND CODE SET TYPE
         B     GETCURR                 CONTINUE TXT PROCESSING
*
*
*
******************************************************************
*                                                                *
* GENERAL OP-CODE TESTS TO VERIFY THAT NON-FLOATING-POINT OP     *
* CODES ARE INDEED OP-CODES.                                     *
*                                                                *
******************************************************************
*
IVERFY   EQU   *                       *** VERIFY POSSIBLE INSTRUCTION
         TM    IEDT,EPR                EVEN-ODD REG PAIR
         BZ    IVE2                    NO
         TM    1(R7),X'10'             R1 IS ODD
         BO    CONST                   YES, NOT INSTR
         CLI   0(R7),X'0E'             IS IT MVCL
         BE    IVTRG2                  YES
         CLI   0(R7),X'0F'             IS IT CLCL
         BNE   IVE2                    NO
IVTRG2   TM    1(R7),X'01'             R2 IS ODD
         BO    CONST                   YES, NOT INSTR
         SR    R1,R1                   CLEAR WORK
         SR    R2,R2                   CLEAR WORK
         IC    R1,1(R7)                GET R1R2
         SRL   R1,4                    SHIFT OUT R2
         PACK  DBLWD(1),1(1,R7)        FLIP R1R2 BYTE
         IC    R2,DBLWD                PICK UP R2R1
         SRL   R2,4                    SHIFT OUT R1
         CR    R1,R2                   R1=R2
         BE    CONST                   YES, NOT INSTR
         B     PFMFMT                  NO, GOOD INSTR
IVE2     TM    IEDT,E2                 HALFWORD STORAGE ALIGNMENT
         BZ    IVE4                    NO
         TM    3(R7),X'01'             DISPL IS ODD
         BZ    IVES2                   NO, O.K.
         TM    2(R7),X'F0'             BASE REG = 0
         BNZ   IVES2                   NO, CONTINUE
         CLI   0(R7),X'44'             EX OP CODE
         BE    CONST                   YES, NOT INSTR
         CLI   0(R7),X'47'             BC OP CODE
         BE    CONST                   YES, NOT INSTR
         CLI   ITYPE,RS                RS INSTRUCTION
         BE    CONST                   YES, NOT INSTR
         TM    1(R7),X'0F'             INDEX REG IS 0
         BZ    CONST                   YES, NOT INSTR
         B     IVES2                   CONTINUE
IVE4     TM    IEDT,E4                 2ND OPND ON FULLWORD BOUND
         BZ    IVE8                    NO
         TM    3(R7),X'03'             DISPL DIV BY 4
         BZ    IVES2                   YES, O.K.
         TM    2(R7),X'F0'             BASE REG = 0
         BNZ   IVES2                   NO, CONTINUE
         CLI   ITYPE,RS                RS INSTRUCTION OP CODE
         BE    CONST                   YES, NOT INSTR
         TM    1(R7),X'0F'             INDEX REG = 0
         BZ    CONST                   YES, NOT INSTR
         B     IVES2                   NO, CONTINUE
IVE8     TM    IEDT,E8                 2ND OPND ON DBLWD BOUND
         BZ    IVES2                   NO
         TM    3(R7),X'07'             DISPL DIV BY 8
         BZ    IVES2                   YES, O.K.
         TM    2(R7),X'F0'             BASE REG = 0
         BNZ   IVES2                   NO
         TM    1(R7),X'0F'             INDEX REG = 0
         BZ    CONST                   YES, NOT INSTR
IVES2    CLI   PRIVASM,1               PRIVILEGED INSTR O.K.
         BE    PFMFMT                  YES
         TM    IEDT,S2                 OPND2 MUST HAVE BASE
         BZ    IVES1                   NO
         TM    2(R7),X'F0'             BASE REG = 0
         BNZ   PFMFMT                  NO, O.K.
         CLI   ITYPE,RS                RS INSTRUCTION
         BE    CONST                   YES, NOT INSTR
         CLI   0(R7),X'92'             IS IT MVI OP CODE
         BE    CONST                   YES, NOT INSTR
         TM    1(R7),X'0F'             INDEX REG = 0
         BZ    CONST                   YES, NOT INSTR
         B     PFMFMT                  NO, GOOD INSTR
IVES1    TM    IEDT,S1                 1ST OPND MUST HAVE BASE
         BZ    PFMFMT                  NO, CONTINUE
         TM    2(R7),X'F0'             1ST OPND HAS BASE
         BZ    CONST                   NO, NOT INSTR
         B     PFMFMT                  YES, INSTR O.K.
*
*
*
******************************************************************
*                                                                *
* GENERAL OP-CODE TESTS TO VERIFY THAT FLOATING-POINT OP-CODES   *
* ARE INDEED OP-CODES.                                           *
*                                                                *
******************************************************************
*
FPVERFY  EQU   *                       *** VALIDATE FLOATING POINT OP-C
         TM    1(R7),X'90'             R1 IS 0, 2, 4, OR 6
         BNZ   CONST                   NO, NOT INSTR
         CLI   0(R7),X'27'             MXDR OP-CODE
         BE    FPR1EXT                 YES
         CLI   0(R7),X'67'             MXD OP-CODE
         BNE   FPCKTYP                 NO
FPR1EXT  TM    1(R7),X'B0'             R1 IS 0 OR 4
         BNZ   CONST                   NO, NOT INSTR
FPCKTYP  CLI   ITYPE,RR                RR TYPE INSTRUCTION
         BNE   FPRXVER                 NO
         TM    1(R7),X'09'             R2 IS 0, 2, 4, 6
         BNZ   CONST                   NO, NOT INSTR
         CLI   0(R7),X'25'             LRDR OP CODE
         BE    FPR2EXT                 YES
         CLI   0(R7),X'37'             SXR OP-CODE
         BE    FPR2EXT                 YES
         CLI   0(R7),X'26'             MXR OP-CODE
         BE    FPR2EXT                 YES
         CLI   0(R7),X'36'             AXR OP-CODE
         BNE   PFMFMT                  NO, GOOD INSTR
FPR2EXT  TM    1(R7),X'0B'             R2 IS 0 OR 4
         BZ    PFMFMT                  YES, GOOD INSTR
         B     CONST                   NO, NOT INSTR
FPRXVER  CLI   PRIVASM,1               PRIVILEGED INSTRUCTIONS O.K.
         BE    FPALIGN                 YES
         TM    2(R7),X'F0'             ANT BASE REG
         BNZ   FPALIGN                 YES
         TM    1(R7),X'0F'             ANY INDEX REG
         BZ    CONST                   NO, NOT INSTR
FPALIGN  TM    2(R7),X'F0'             ANY BASE REG
         BNZ   PFMFMT                  YES, ACCEPT INSTR
         TM    1(R7),X'0F'             ANY INDEX REG
         BNZ   PFMFMT                  YES, ACCEPT INSTR
         TM    3(R7),X'03'             DISPL DIV BY 4
         BNZ   CONST                   NO, NOT INSTR
         TM    ICLASS,FLSHT            SHORT PRECISION
         BO    PFMFMT                  YES, ACCEPT INSTRUCTION
         TM    3(R7),X'07'             DISPL DIV BY 8
         BZ    PFMFMT                  YES, ACCEPT INSTR
         B     CONST                   NO, NOT INSTR
*
*
*
******************************************************************
*                                                                *
* PROCESS TEXT BYTES DETERMINED TO BE CONSTANT DATA.             *
*                                                                *
******************************************************************
*
CONST    EQU   *                       *** PROCESS CONSTANTS ***
         MVC   WORKREC,BLANX           CLEAR WORK RECORD AREA
         CLI   CONPROG,1               CONSTANT IN PROGRESS
         BNE   CCNEW                   NO
         CLC   TXTOFSET,LBLADR         LABEL ENTRY HAS THIS OFFSET
         BNE   CGETYP                  NO
CSTNEW   BAL   R9,FORCONST             FORCE IT OUT
         B     CCNEW                   GO START A NEW ONE
CGETYP   TRT   0(1,R7),CHARTRAN        CHECK DATA TYPE OF BYTE
         BNZ   CHEX                    IT'S HEX
         MVI   CCKTYP+1,C'C'           SET TYPE IN COMPARE
         B     CCKTYP                  GO COMPARE
CHEX     MVI   CCKTYP+1,C'X'           SET TYPE IN COMPARE
CCKTYP   CLI   CONTYPE,C' '            TYPE IN PROG SAME AS THIS BYTE
         BNE   CSTNEW                  NO
CUPDCON  LH    R11,CONLEN              GET CURRENT LENGTH
         LA    R11,1(R11)              ADD 1
         STH   R11,CONLEN              UPDATE LENGTH
         CLI   CONTYPE,C'C'            CHARACTER CONSTANT
         BE    CCK8                    YES
         TM    CONOFST+3,1             OFFSET IS ODD
         BO    CCFIN1                  YES
         TM    CONOFST+3,2             HALFWORD OFFSET
         BZ    CCFWD                   NO
         CLI   CONLEN+1,1              HALFWORD, IS LENGTH = 1
         BE    CCXIT1                  YES
         B     CCFIN1                  NO
CCFWD    CLI   CONLEN+1,4              NO, IS HEX CONST 4 BYTES
         BL    CCXIT1                  NOT YET
CCFIN1   BAL   R9,FORCONST             MAX LENG, FORCE IT OUT
         B     CCXIT1                  FINISH
CCK8     CLC   CONLEN,H8               CHAR CONSTANT 8 BYTES
         BNL   CCFIN1                  YES
CCXIT1   LA    R7,1(R7)                STEP OVER 1 BYTE IN TEXT
         ST    R7,TXTCURR              UPDATE TEXT ADDR
         B     GETCURR                 CONTINUE TEXT PROCESSING
CCNEW    MVI   CONPROG,1               SHOW CONSTANT IN PROGRESS
         MVC   CONOFST,TXTOFST         SET OFFSET TO 1ST BYTE
         MVC   CONLEN,XZROS            CLEAR LENGTH
         CLC   TXTOFSET,LBLADR         LABEL AT THIS OFFSET
         BE    CLBLD                   YES
TRTYPE   TRT   0(1,R7),CHARTRAN        CHECK DATA TYPE OF BYTE
         BNZ   CCSHX                   IT'S HEX
         MVI   CONTYPE,C'C'            IT'S CHAR, SO INDICATE
         B     CUPDCON                 GO COMPLETE
CCSHX    MVI   CONTYPE,C'X'            IT'S HEX, SO INDICATE
         B     CUPDCON                 GO COMPLETE
CLBLD    CLI   LBLTYP,C'L'             IS IT A LABEL ONLY
         BNE   CDATACON                NO
         LA    R6,L'LABEL(R6)          TO NEXT LABEL ENTRY
         CLC   TXTOFSET,LBLADR         THIS LABEL AT SAME ADDR
         BNE   TRTYPE                  NO
         CLI   LBLTYP,C'L'             THIS ANOTHER LABEL ONLY
         BNE   CDATACON                NO
         LA    R6,L'LABEL(R6)          TO NEXT LABEL ENTRY
         B     CCNEW                   GO TO NEXT LABEL
CDATACON MVC   CONTYPE,LBLTYP          TYPE TO CONSTANT AREA
         SR    R1,R1                   CLEAR WORK
         IC    R1,LBLLEN               PICK UP CONSTNT LENGTH
         STH   R1,CONLEN               SAVE CONSTANT LENGTH
         SR    R11,R11                 CLEAR WORK REG
         IC    R11,LBLLEN              PICK UP LENGTH
         AR    R7,R11                  STEP PAST TEXT
         ST    R7,TXTCURR              UPDATE TEXT ADDRESS
         BAL   R9,FORCONST             FORCE CONSTANT OUT
         LA    R6,L'LABEL(R6)          STEP TO NEXT LABEL ENTRY
         B     GETCURR                 CONTINUE TEXT PROCESS
         DROP  R6
*
*
*
******************************************************************
*                                                                *
* CLEAR OUT AREAS SET UP FOR CONSTANT DATA.                      *
*                                                                *
******************************************************************
*
FORCONST EQU   *                       *** FORCE OUT CONSTANT IN PROGRE
         MVI   CONPROG,0               RESET CONSTANT IN PROGRESS
         MVI   CONTYPE,0               RESET TYPE
         XC    CONLEN,CONLEN           CLEAR LENGTH
         MVC   CONOFST,XZROS           CLEAR OFFSET TO CONSTANT
         BR    R9                      EXIT
*
*
*
******************************************************************
*                                                                *
* PROCESS RX-FORMAT INSTRUCTIONS. THE BASE-DISPLACEMENT ADDRESS  *
* WILL BE SENT TO THE BDLADR ROUTINE FOR LABEL CREATION.         *
*                                                                *
******************************************************************
*
RXOPND   EQU   *                       *** RX FORMAT INSTRUCTIONS ***
         SR    R11,R11                 CLEAR WORK REG
         ICM   R11,3,TEXT+2            GET BDDD
         LA    R10,4                   SET LENGTH = 4
         TM    INLNG,E4                FULLWORD OPERAND
         BO    RXBDDD                  YES
         LA    R10,2                   SET LENGTH = 2
         TM    INLNG,E2                HALFWORD OPERAND
         BO    RXBDDD                  YES
         LA    R10,1                   SET LENGTH = 1
         TM    INLNG,E8                DOUBLEWORD OPERAND
         BZ    RXBDDD                  NO
         LA    R10,8                   YES, SET LENGTH = 8
RXBDDD   B     BDLADR                  CHECK LABEL
*
*
*
******************************************************************
*                                                                *
* PROCESS S-FORMAT INSTRUCTIONS. THE BASE-DISPLACEMENT ADDRESS   *
* WILL BE SENT TO THE BDLADR ROUTINE FOR LABEL CREATION.         *
*                                                                *
******************************************************************
*
SOPND    EQU   *                       *** S FORMAT INSTRUCTIONS ***
         CLI   1(R7),0                 BYTE 2 OF INSTR IS ZERO
         BE    SCK2                    YES
         CLI   0(R7),X'80'             NO, IS IT SSM
         BE    4(R9)                   YES, NOT INSTR
         CLI   0(R7),X'82'             NO, IS IT LPSW
         BE    4(R9)                   YES, NOT INSTR
         CLI   0(R7),X'93'             NO, IS IT TS
         BE    4(R9)                   YES, NOT INSTR
SCK2     CLI   0(R7),X'B2'             OP-CODE IS B2
         BNE   SSTRT                   NO
         CLC   2(2,R7),XZROS           3RD AND 4TH BYTES ZERO
         BE    SSTRT                   YES
         CLI   1(R7),X'0B'             IPK INSTRUCTION
         BE    4(R9)                   YES, NOT INSTR
         CLI   1(R7),X'0D'             PTLB INSTR
         BE    4(R9)                   YES, NOT INSTR
SSTRT    SR    R11,R11                 CLEAR WORK
         ICM   R11,3,TEXT+2            GET BDDD
         LA    R10,4                   SET LENGTH = 4
         TM    INLNG,E4                FULLWORD OPERAND
         BO    SBDDD                   YES
         LA    R10,2                   SET LENGTH = 2
         TM    INLNG,E2                HALFWORD OPERAND
         BO    SBDDD                   YES
         LA    R10,1                   SET LENGTH = 1
         TM    INLNG,E8                DOUBLEWORD OPERAND
         BZ    SBDDD                   NO
         LA    R10,8                   YES, SET LENGTH = 8
SBDDD    B     BDLADR                  CHECK FOR LABEL
*
*
*
******************************************************************
*                                                                *
* PROCESS SI-FORMAT INSTRUCTIONS. THE BASE-DISPLACEMENT ADDRESS  *
* WILL BE SENT TO THE BDLADR ROUTINE FOR LABEL CREATION.         *
*                                                                *
******************************************************************
*
SIOPND   EQU   *                       *** SI FORMAT INSTRUCTIONS ***
         SR    R11,R11                 CLEAR WORK
         ICM   R11,3,TEXT+2            GET BDDD ADDRESS
         LA    R10,0                   LENGTH=DON'T CARE
         B     BDLADR                  CHECK FOR LABEL
*
*
*
******************************************************************
*                                                                *
* PROCESS RS-FORMAT INSTRUCTIONS. THE BASE-DISPLACEMENT ADDRESS  *
* WILL BE SENT TO THE BDLADR ROUTINE FOR LABEL CREATION.         *
*                                                                *
******************************************************************
*
RSOPND   EQU   *                       *** RS FORMAT INSTRUCTIONS ***
         CLI   0(R7),X'88'             IS IT SHIFT INSTR
         BL    RSCMA1                  NO
         CLI   0(R7),X'8F'             IS IT SHIFT INSTR
         BH    RSCMA1                  NO
         TM    1(R7),X'0F'             SHIFT, IS R3 POS = 0
         BZ    0(R9)                   YES, GOOD SHIFT
         B     4(R9)                   NO, NOT INSTR
RSCMA1   SR    R11,R11                 CLEAR WORK
         ICM   R11,3,TEXT+2            GET BDD ADDRESS
         LA    R10,4                   SET LENGTH = 4
         TM    INLNG,E4                FULLWORD OPERAND
         BO    RSBDDD                  YES
         LA    R10,2                   SET LENGTH = 2
         TM    INLNG,E2                HALFWORD OPERAND
         BO    RSBDDD                  YES
         LA    R10,1                   SET LENGTH = 1
         TM    INLNG,E8                DOUBLEWORD OPERAND
         BZ    RSBDDD                  NO
         LA    R10,8                   YES, SET LENGTH = 8
RSBDDD   B     BDLADR                  CHECK FOR LABEL
*
*
*
******************************************************************
*                                                                *
* PROCESS SS-FORMAT INSTRUCTIONS. THE BASE-DISPLACEMENT ADDRESSES*
* WILL BE SENT TO THE BDLADR ROUTINE FOR LABEL CREATION. THE     *
* SINGLE-LENGTH SS FORMAT INSTRUCTIONS ARE HANDLED HERE.         *
*                                                                *
******************************************************************
*
SS1OPND  EQU   *                       *** SS FORMAT INSTRUCTIONS - SIN
         SR    R10,R10                 CLEAR WORK
         IC    R10,TEXT+1              GET LENGTH CODE
         LA    R10,1(R10)              COMPUTE ACTUAL LENGTH
         SR    R11,R11                 CLEAR WORK
         ICM   R11,3,TEXT+2            GET BDDD ADDRESS
         LA    R1,SS1RTN               GET RTEURN ADDR
         MVC   SAVOP9,OPND9            SAVE NORMAL RETURN ADDR
         ST    R1,OPND9                CHANGE RETURN ADDR
         B     BDLADR                  CHECK LABEL
SS1RTN   MVC   OPND9,SAVOP9            RESTORE NORMAL RETURN ADDR
         SR    R11,R11                 CLEAR WORK
         ICM   R11,3,TEXT+4            GET SECOND BDDD ADDRESS
         SR    R10,R10                 CLEAR LENGTH REG
         IC    R10,TEXT+1              GET INSTR LENGTH
         LA    R10,1(R10)              COMPUTE ACTUAL LENGTH
         B     BDLADR                  CHECK FOR LABEL
*
*
*
******************************************************************
*                                                                *
* PROCESS SS-FORMAT INSTRUCTIONS. THE BASE-DISPLACEMENT ADDRESSES*
* WILL BE SENT TO THE BDLADR ROUTINE FOR LABEL CREATION. THE     *
* DOUBLE-LENGTH SS FORMAT INSTRUCTIONS ARE HANDLED HERE.         *
*                                                                *
******************************************************************
*
SS2OPND  EQU   *                       *** SS FORMAT INSTRUCTIONS - 2 L
         SR    R10,R10                 CLEAR WORK
         IC    R10,TEXT+1              GET L1L2
         SRL   R10,4                   SHIFT OUT L2
         LA    R10,1(R10)              COMPUTE ACTUAL LENGTH
         SR    R11,R11                 CLEAR WORK
         ICM   R11,3,TEXT+2            GET BDDD ADDRESS
         LA    R1,SS2RTN               GET RETURN ADDR
         MVC   SAVOP9,OPND9            SAVE NORMAL RETURN ADDR
         ST    R1,OPND9                CHANGE RETURN ADDRESS
         B     BDLADR                  CHECK LABEL
SS2RTN   MVC   OPND9,SAVOP9            RESTORE NORMAL RETURN ADDR
         SR    R11,R11                 CLEAR WORK
         ICM   R11,3,TEXT+4            GET 2ND BDDD ADDR
         PACK  DBLWD(1),TEXT+1(1)      FLIP LENGTH BYTE
         SR    R10,R10                 CLEAR WORK
         IC    R10,DBLWD               PICK UP L2L1
         SRL   R10,4                   SHIFT OUT L1
         CLI   TEXT,X'F0'              SRP OP-CODE
         BNE   SS2BDDD                 NO
         IC    R10,TEXT+1              GET INSTR LENGTH
         SRL   R10,4                   SHIFT OUT I3
SS2BDDD  LA    R10,1(R10)              COMPUTE ACTUAL LENGTH
         B     BDLADR                  CHECK LABEL
*
*
*
******************************************************************
*                                                                *
* PROCESS SVC INSTRUCTIONS. THE SOLE PROCESSING IS TO VERIFY THAT*
* THIS IS A VALID SVC.                                           *
*                                                                *
******************************************************************
*
SVCOPND  EQU   *                       *** SVC INSTRUCTIONS ***
         CLI   TEXT+1,255              VALID OPERAND
         BH    NOTSVC                  NO, NOT SVC
         L     R1,SVCTBLAD             GET SVC TABLE ADDRESS
SVCKND   CLI   0(R1),X'FF'             END OF SVC TABLE
         BE    NOTSVC                  YES, MUST NOT BE SVC
         CLC   0(1,R1),TEXT+1          THIS THE ENTRY
         BE    GOTSVC                  YES
         LA    R1,L'SVCOP(R1)          STEP TO NEXT ENTRY
         B     SVCKND                  LOOP THRU TABLE
NOTSVC   B     4(R9)                   ERROR RETURN
GOTSVC   BR    R9                      EXIT, NO STORAGE OPND
*
*
*
******************************************************************
*                                                                *
* SET UP CURRENT BASE REGISTERS IN THE BASE TABLE. THE USING     *
* TABLE IS SCANNED FOR ENTRIES VALID AT THE CURRENT TEXT OFFSET. *
* WHEN A BASE REGISTER ENTRY IS FOUND TO BE VALID AT THE CURRENT *
* TEXT OFFSET, THE USING ENTRY IS MOVED TO THE APPROPRIATE LOC-  *
* ATION IN THE BASE TABLE FOR USE BY THE BDLADR ROUTINE. THE TEXT*
* OFFSET TO THE NEXT BASE REGISTER CHANGE IS SET SO THAT THIS    *
* ROUTINE WILL AGAIN BE ENTERED WHEN THE CURRENT BASE REGISTERS  *
* ARE EXHAUSTED.                                                 *
*                                                                *
******************************************************************
*
NEXUSG   EQU   *                       *** GET NEXT BASE REGS ***
         MVI   MORUSG,0                RESET INDICATOR
         XC    BASES,BASES             CLEAR OLD BASE REG VALUES
         MVC   NEXCHG,HIVAL            SET NEXT CHANGE LOC HIGH
         L     R2,USGSTRT              GET USING TBL START
         USING USINGD,R2
ENDUS    CLI   0(R2),X'FF'             END OF TABLE
         BCR   8,R9                    YES, EXIT
         CLC   TXTOFSET,USEND          PAST THIS ONE
         BNL   ECSTEP                  YES
         OI    MORUSG,1                SHOW MORE BASES AVAILABLE
USBGCK   CLC   TXTOFSET,USBGN          THIS STARTS LATER
         BNL   CKNEWLO                 NO
         CLC   USBGN,NEXCHG            BEGINS BEFORE NEXT CHG
         DS    0H
         BNL   ECSTEP                  NO
         MVC   NEXCHG,USBGN            YES, SET NEW CHANGE OFFSET
         B     ECSTEP                  CONTINUE
CKNEWLO  CLC   USEND,NEXCHG            NEW LOW CHANGE ADDR
         BNL   ECMVC                   NO
         MVC   NEXCHG,USEND            YES, SET LOWER OFFSET
ECMVC    SR    R1,R1                   CLEAR WORK
         IC    R1,USREG                PICK UP REGISTER
         MH    R1,USGLEN               TIMES ENTRY LENGTH
         LA    R1,BASES(R1)            @ TABLE ENTRY
         MVC   0(L'USING,R1),USING     ENTRY TO TABLE
         OI    MORUSG,X'80'            SHOW BASE REG CURRENT
ECSTEP   LA    R2,L'USING(R2)          TO NEXT USING TBL ENTRY
         B     ENDUS                   LOOP THRU USING TBL
         DROP  R2
*
*
*
******************************************************************
*                                                                *
* A BASE-DISPLACEMENT IS PROVIDED IN REG 11 ON ENTRY. IF ANY     *
* BASE REGISTERS ARE CURRENT, AND THE BASE REGISTER FOR THE GIVEN*
* ADDRESS IS A CURRENT PROGRAM BASE REGISTER, A LABEL ENTRY IS   *
* BUILT. OFFSET TO THE LABEL WILL BE FOUND BY ADDING THE ASSUMED *
* BASE REGISTER VALUE TO THE GIVEN DISPLACEMENT. THE LABEL NAME  *
* WILL BE THE LETTER 'A' FOLLOWED BY THE OFFSET.                 *
*                                                                *
******************************************************************
*
BDLADR   EQU   *                       *** BUILD LABEL ENTRIES ***
         TM    MORUSG,1                ANY BASES CURRENT
         BZ    BDLXIT                  NO
         LR    R2,R11                  COPY BDDD ADDRESS
         SRL   R2,12                   RIGHT JUSTIFY BASE REG
         MH    R2,USGLEN               TIMES ENTRY LENGTH
         LA    R2,BASES(R2)            @ BASE REG TABLE ENTRY
         USING USINGD,R2
         CLI   USTYPE,C'P'             IS IT A PROGRAM BASE
         BNE   BDLXIT                  NO
         SLL   R11,20                  ISOLATE THE
         SRL   R11,20                  DDD IN R11
         SR    R1,R1                   CLEAR WORK
         ICM   R1,7,USVALU             GET BASE REG VALUE
         AR    R11,R1                  COMPUTE PROGRAM OFFSET
         DROP  R2
         L     R1,CURRLBL              GET LBL TBL ADDR
         C     R1,ENDLBL               END OF TABLE
         BL    GOTHOLE                 NO
         BAL   R9,COMPLBL              YES, COMPRESS DUPLICATES
         L     R1,CURRLBL              GET NEW CURRENT LBL ADDR
         C     R1,ENDLBL               STILL AT END
         BNL   TXTEND                  YES, TERMINATE THIS STAGE
         USING LABELD,R1
GOTHOLE  STCM  R11,7,LBLADR            SET LABEL ENTRY OFFSET
         MVI   LBLNAME,C'A'            BEGIN LABEL NAME
         LA    R12,LBLADR              @ OFFSET
         BAL   R9,HEXPRT3              GO CONVERT
         MVC   LBLNAME+1(6),PRTABL     REST OF NAME
         MVI   LBLNAME+7,C' '          FINAL BLANK IN NAME
         MVI   LBLTYP,C'L'             SET LABEL TYPE
         CLI   TEXT,X'47'              THIS A CONDITIONAL BRANCH
         BE    INSTREF                 YES
         CLI   TEXT,X'45'              BAL INSTR
         BE    INSTREF                 YES
         CLI   TEXT,X'46'              BCT INSTR
         BE    INSTREF                 YES
         CLI   TEXT,X'44'              EX INSTR
         BE    INSTREF                 YES
         CLI   TEXT,X'87'              BXLE INSTRUCTION
         BE    INSTREF                 YES
         CLI   TEXT,X'86'              BXH INSTRUCTION
         BNE   BDLSTP                  NO
INSTREF  SR    R12,R12                 CLEAR WORK REG
         A     R11,TXTSTRT             BRCH ADDR IN STORED TEXT
         LA    R10,4                   ASSUME LENGTH IS 4
         TM    0(R11),X'C0'            TEST HI 2-BITS OF OP-CODE
         BM    BDLSTP                  01 OR 10 IS 4-BYTE INSTR
         BO    BDLSIX                  YES, SIX-BYTE INSTR
         LA    R10,2                   BOTH OFF, 2-BYTE INSTR
         B     BDLSTP                  CONTINUE
BDLSIX   LA    R10,6                   SET LENGTH TO 6
BDLSTP   STC   R10,LBLLEN              LENGTH TO LABEL ENTRY
         LA    R1,L'LABEL(R1)          TO NEXT ENTRY
         ST    R1,CURRLBL              SAVE UPDATED TBL ADDR
BDLXIT   L     R9,OPND9                GET RETURN ADDR
         BR    R9                      EXIT
         DROP  R1
*
*
*
******************************************************************
*                                                                *
* SORT THE LABEL TABLE AND ELIMINATE ANY DUPLICATE ENTRIES.      *
*                                                                *
******************************************************************
*
COMPLBL  EQU   *                       *** COMPRESS AND SORT LABEL TABL
         USING LABELD,R6
         L     R6,LBLTBL               GET LABEL TABLE ADDR
LBSTPASS LA    R7,L'LABEL(R6)          @ NEXT LABEL TABLE ENTRY
LBLND    C     R7,CURRLBL              AT TABLE END
         BL    LBSAMPS                 NO
NEXPAS0  LA    R6,L'LABEL(R6)          TO NEXT LABEL ENTRY
         C     R6,CURRLBL              END OF TABLE
         BL    LBSTPASS                NO
         B     LBFEND                  YES, FIND END
LBSAMPS  CLC   LBLADR,LBLADR-LABEL(R7) IDENTICAL OFFSETS
         BH    LBSWCH                  NO, FIRST HIGH, SWITCH
         BL    LBSTP                   NO, LOW, CONTINUE SCAN
         CLC   LABEL,0(R7)             ENTRIES ARE IDENTICAL
         BNE   LBCKLBL                 NO
LBNULL2  MVC   LBLADR-LABEL(3,R7),HIVAL YES, NULL 2ND
         B     LBSTP                   AND CONTINUE SCAN
LBCKLBL  CLC   LBLNAME,LBLNAME-LABEL(R7) IDENTICAL LABELS
         BNE   LBCKTYP                 NO, CHECK TYPES
LBCKLN   CLI   LBLLEN,0                THIS ENTRY LENGTH = 0
         BNE   LBCKLN2                 NO
         MVI   LBLLEN,X'FF'            YES, SET HIGH LENGTH
LBCKLN2  CLC   LBLLEN,LBLLEN-LABEL(R7) COMPARE LENGTHS
         BH    LBSWCH                  1ST LENGTH HIGH, SWITCH ENTRIES
         B     LBNULL2                 1ST LOW/=, NULL 2ND
LBCKTYP  CLC   LBLTYP,LBLTYP-LABEL(R7) SAME ENTRY TYPE
         BNE   LBCK1L                  NO, CHK TYPE ORDER
         CLI   LBLTYP,C'L'             ARE THEY TYPE L
         BE    LBSTP                   YES, CONTINUE SCAN
         CLI   LBLTYP,C'U'             USER LABEL
         BNE   LBNULL2                 NO
         B     LBSTP                   YES
LBCK1L   CLI   LBLTYP,C'U'             1ST IS USER LABEL
         BNE   LBCK2L                  NO
         CLI   LBLTYP-LABEL(R7),C'L'   2ND IS TYPE L
         BE    LBNULL2                 YES, NULL THE 2ND
         B     LBSTP                   CONTINUE SCAN
LBCK2L   CLI   LBLTYP-LABEL(R7),C'U'   2ND IS USER LABEL
         BE    LBSWCH                  YES
         CLI   LBLTYP,C'L'             1ST IS LABEL TYPE
         BE    LBSTP                   YES, CONTINUE SCAN
LBSWCH   MVC   WORKREC(L'LABEL),LABEL  HOLD 1ST ENTRY
         MVC   LABEL,0(R7)             MOVE 2ND ENTRY TO 1ST
         MVC   0(L'LABEL,R7),WORKREC   1ST ENTRY TO 2ND LOCATION
         B     LBSAMPS                 GO RECHECK
LBSTP    LA    R7,L'LABEL(R7)          TO NEXT LABEL ENTRY
         B     LBLND                   CONTINUE SCAN
LBFEND   L     R6,LBLTBL               @ LABEL TABLE
LBFCKFF  CLI   LABEL,X'FF'             NULL ENTRY
         BE    LBSTCURR                YES
         C     R6,CURRLBL              AT FORMER END
         BE    LBSTCURR                YES
         LA    R6,L'LABEL(R6)          TO NEXT ENTRY
         B     LBFCKFF                 LOOP TO FIND END
LBSTCURR ST    R6,CURRLBL              SAVE NEW TBL END ADDR
         BR    R9                      EXIT
         DROP  R6
*
*
*
******************************************************************
*                                                                *
* END OF PHASE 1. SORT/COMPRESS THE LABEL TABLE AND RETURN.      *
*                                                                *
******************************************************************
*
EOJ      EQU   *                       END OF JOB
         BAL   R9,COMPLBL              SORT/COMPRESS LABEL TBL
         L     R6,LBLTBL               GET LABEL TABLE ADDR
         USING LABELD,R6
EOJCKND  C     R6,CURRLBL              END OF TABLE
         BNL   EOJ2                    YES
         CLI   LBLTYP,C'U'             USER LABEL
         BNE   EOJSTEP                 NO
         MVI   LBLTYP,C'L'             YES, CHANGE TO TYPE L
EOJSTEP  LA    R6,L'LABEL(R6)          TO NEXT ENTRY
         B     EOJCKND                 CONTINUE LOOP
         DROP  R6
EOJ2     MVC   PRT,BLANX               CLEAR PRINT
         L     R13,4(R13)              GET POINTER TO CALLER'S SAVE ARE
         LM    R14,R12,12(R13)         RESTORE CALLER'S REGS
         SR    R15,R15                 CLEAR RETURN CODE
         BR    R14                     RETURN TO CALLER
*
*
*
******************************************************************
*                                                                *
* CONVERT HEX BYTES TO THEIR PRINTABLE EQUIVALENTS. ON ENTRY, REG*
* 12 CONTAINS THE ADDRESS OF THE FIRST BYTE TO BE CONVERTED. THE *
* NUMBER OF BYTES IS DETERMINED BY THE ENTRY SELECTED. PRINTABLE *
* HEX IS PLACED IN THE FIELD PRTABL, TWO CHARACTERS PER BYTE.    *
*                                                                *
******************************************************************
*
HEXPRT   EQU   *                       HEX TO PRINTABLE ROUTINE
HEXPRT1  UNPK  PRTABL(3),0(2,R12)      UNPACK HEX
         B     HEXCLTR                 CONTINUE
HEXPRT2  UNPK  PRTABL(5),0(3,R12)      UNPACK HEX
         B     HEXCLTR                 CONTINUE
HEXPRT3  UNPK  PRTABL(7),0(4,R12)      UNPACK HEX
         B     HEXCLTR                 CONTINUE
HEXPRT4  UNPK  PRTABL(9),0(5,R12)      UNPACK HEX
HEXCLTR  MVZ   PRTABL(8),XZROS         CLEAR FOR TRANSLATE
         TR    PRTABL(8),TRTBL         MAKE PRINTABLE
         BR    R9                      EXIT
*
*
*
******************************************************************
*                                                                *
* PRINT A LINE USING THE SYSPRINT DCB DEFINED IN DISASM PHASE 0. *
*                                                                *
******************************************************************
*
PRINT    EQU   *                       PRINT ROUTINE
         L     R1,PRINTDCB             @ SYSPRINT DCB
         TM    48(R1),X'10'            IS SYSPRINT OPEN
         BNO   CLRPRT                  NO
         PUT   (1),PRTLINE             WRITE PRINT LINE
CLRPRT   MVC   PRT,BLANX               CLEAR PRINT LINE
         AP    LINECT,P1               INCR LINE COUNTER
         CLI   PCC,C' '                SINGLE SPACED
         BE    SETSGL                  YES
         AP    LINECT,P1               INCR LINE COUNTER
         CLI   PCC,C'0'                DOUBLE SPACED
         BE    SETSGL                  YES
         AP    LINECT,P1               INCR LINE COUNTER
         CLI   PCC,C'-'                TRIPLE SPACED
         BE    SETSGL                  YES
         ZAP   LINECT,P0               NO, MUST BE NEW PAGE
SETSGL   MVI   PCC,C' '                SET SINGLE SPACING
         CP    LINECT,P58              PAST END OF PAGE
         BH    NEWPAGE                 YES
         BR    R9                      EXIT
NEWPAGE  MVI   PCC,C'1'                SET SKIP TO HOF
         ZAP   LINECT,P0               RESET LINE COUNTER
         BR    R9                      EXIT
*
*
*
*                 *** DATA AND WORK AREAS ***
*
******************************************************************
*                                                                *
* FOLLOWING FIELDS: COMMPARM THRU COMMEND ARE COMMON AREAS SHARED
* BY THIS, AND CALLED SUB-PROGRAMS. ALL CHANGES MUST BE COORDINTAED
* WITH ALL OTHER PROGRAMS.
*
******************************************************************
*
         DS    0D
COMMPARM DSECT ,                       COMMON AREAS
DBLWD    DS    D                       DOUBLEWORD WORK AREA
PUNCHDCB DS    F                       @ SYSPUNCH DCB
PRINTDCB DS    F                       @ SYSPRINT DCB
INDCB    DS    F                       @ SYSIN DCB
CSECT    DS    CL8                     SPECIFIED CSECT NAME
ESDID    DS    XL2                     ESD ID OF SPECIFIED CSECT
ENDLBLNM DS    CL8                     SYMBOL FOR END STMT BEGIN POINTE
LINECT   DS    PL2                     PRINT LINE COUNTER
START    DS    A                       LKED ASSIGNED START ADDR OF CSEC
END      DS    A                       CSECT END ADDRESS
LENGTH   DS    F                       LENGTH OF SPECIFIED CSECT
LBLTBL   DS    F                       @ LABEL TABLE
CURRLBL  DS    F                       CURRENT LABEL ENTRY ADDR
ENDLBL   DS    F                       @ END OF LABEL TBL
LBLLGTH  DS    AL2                     LENGTH OF LABEL ENTRY
TXTSTRT  DS    F                       @ TEXT STORAGE AREA
TXTEND   DS    F                       @ END OF TEXT AREA
TXTCURR  DS    F                       @ CURRENT TEXT LOC
DTBCUR   DS    F                       @ CURRENT DSECT TBL ENTRY
DTBEND   DS    F                       @ DSECT TBL END
DTBSTRT  DS    F                       @ DSECT TBL START
USGSTRT  DS    F                       @ USING TBL START
USGCUR   DS    F                       @ CURRENT USING TBL ENTRY
USGEND   DS    F                       @ USING TBL END
DATONLY  DS    F                       @ DATA ONLY TABLE
DATOCUR  DS    F                       @ CURRENT DATA ONLY ENTRY
DATOEND  DS    F                       @ END OF DATA ONLY TABLE
FLPTASM  DS    XL1                     FLOATING POINT INDICATOR
PRIVASM  DS    XL1                     PRIVILEGED INDICATOR
USERR    DS    XL1                     ERROR INDIC FOR DISASM1
NBRLBLS  DS    H                       NBR LABELS FROM DISASM1
*
*
*
WORKREC  DS    0CL80                   DISASSEMBLY WORK AREA
NAME     DS    CL8                     NAME
         DS    CL1
MNEMONIC DS    CL5                     INSTRUCTION MNEMONIC
         DS    CL1
OPNDS    DS    CL27                    1ST OPERAND
         DS    CL1
COMMENT  DS    CL28                    COMMENT
COL72    DS    CL1                     CONTINUATION COLUMN
SEQNBR   DS    CL8                     CARD SEQUENCE NBR
*
*
*
CARDNO   DS    PL4                     CURRENT OUTPUT CARD NBR
PRTLINE  DS    0CL121                  PRINT LINE
PCC      DS    CL1                     CARRIAGE CONTROL
PRT      DS    CL120                   PRINT DATA
*
*
*
         DS    0F
BLDLIST  DS    0CL62                   BLDL LIST
         DC    H'1'                    ONE ENTRY
         DC    H'58'                   LENGTH OF ENTRY
MEMBER   DC    CL8' '                  MEMBER NAME
TTRMOD   DC    XL3'000000'             TTR OF MODULE
CCAT     DC    XL1'00'                 CONCATENATION NUMBER
         DC    XL1'00'
ALIASIND DC    XL1'00'                 ALIAS AND MISC INDICATOR
*                           80=ALIAS
TTR1TXT  DC    XL3'000000'             TTR OF 1ST TXT RECORD
         DC    XL1'00'
TTRNS    DC    XL3'000000'             TTR OF NOTE OR SCATTER LIST
NNOTE    DC    XL1'00'                 NBR ENTRIES IN NOTE LIST
ATTR1A   DC    XL1'00'                 MODULE ATTRIBUTES 1, BYTE 1
*                           80=RENT
*                           40=REUS
*                           20=OVERLAY
*                           10=UNDER TEST
*                           08=ONLY LOADABLE
*                           04=SCATTER FORMAT
*                           02=EXECUTABLE
*                           01=ONE TXT, NO RLD RECORDS
ATTR1B   DC    XL1'00'                 ATTRIBUTES 1, BYTE 2
*                           80=CANNOT BE REPROCESSED BY LKED E
*                           40=ORIGIN OF 1ST TXT RECORD IS ZERO
*                           20=ASSIGNED ENTRY POINT ADDR IS ZERO
*                           10=CONTAINS NO RLD RECORD
*                           08=CANNOT BE REPROCESSED BY LKED
*                           04=CONTAINS TESTRAN SYMBOLS
*                           02=CREATED BY LKED
*                           01=REFR
TOTVIRT  DC    XL3'000000'             TOTAL VIRTUAL STRG REQRD FOR MOD
LENG1    DC    XL2'0000'               LENGTH OF 1ST TEXT RECORD
LKEPA    DC    XL3'000000'             ASSIGNED ENTRY POINT ADDR
ATTR2    DC    XL1'00'                 ATTRIBUTES 2
*                           80=PROCESSED BY OS/VS LKED
*                           20=PAGE ALIGNMENT REQUIRED FOR MODULE
*                           10=SSI PRESENT
         DC    XL2'0000'
SCTRLEN  DC    XL2'0000'               SCATTER LIST LENGTH
TTLEN    DC    XL2'0000'               TRANSLATION TABLE LENGTH
SCESDID  DC    XL2'0000'               CESD NBR FOR 1ST TXT RECD
SCEPESD  DC    XL2'0000'               CESD NBR FOR ENTRY POINT
ALEPA    DC    XL3'000000'             ENTRY POINT OF THE MEMBER NAME
ALMEM    DC    CL8' '                  REAL MEMBER NAME FOR ALIAS
SSI      DS    XL4'00000000'           SSI BYTES
AUTHLEN  DC    XL1'00'                 AUTH CODE LENGTH
AUTHCOD  DC    XL1'00'                 AUTH CODE
*
*
*
COMMEND  EQU   *
*
*
*
LABELD   DSECT ,                       LABEL TABLE ENTRY
LABEL    DS    0CL13                   13-BYTE ENTRIES
LBLADR   DS    XL3                     RELATIVE ADDR IN TEXT
LBLTYP   DS    CL1                     TYPE: L=LABEL, A=ADCON, V=VCON,
LBLNAME  DS    CL8                     NAME (SYMBOL)
LBLLEN   DS    XL1                     LENGTH IF A, V, OR W
*
*
*
USINGD   DSECT ,                       USING TABLE ENTRY
USING    DS    0CL11
USBGN    DS    XL3                     OFFSET TO BEGINNING OF RANGE
USEND    DS    XL3                     OFFSET TO END OF RANGE
USREG    DS    XL1                     BASE REGISTER USED
USTYPE   DS    XL1                     TYPE:P=PGM,D=DSECT
USVALU   DS    XL3                     BASE REG VALUE
*
*
*
DSECTD   DSECT ,                       DSECT FIELD TABLE ENTRY
DSECT    DS    0CL13
DSOFSET  DS    XL3                     OFFSET TO 1ST BYTE OF FIELD
DSLBTYP  DS    CL1                     LABEL TYPE = L
DSNAME   DS    CL8                     FIELD NAME
DSLENG   DS    XL1                     FIELD LENGTH
*
*
*
DISASM1  CSECT
*
*
*
SVCTBLAD DC    A(SVCOP)                @ SVC TABLE
DBLOPAD  DC    A(DBLOP)                @ TWO-BYTE OP-CODE TBL
OPND9    DC    A(OPNDRTN)              RETURN ADDR FOR OPERAND ROUTINES
DSCT9    DS    F                       RETURN FOR DSECTS
SAVOP9   DS    F                       SAVE AREA FOR OPND9
ULSAV    DS    7F                      SAVE AREA FOR CKADCON
NOINAD   DS    F                       DATA ONLY TABLE ADDRESS
SGOPLEN DC AL2(L'SGLOP) SINGLE BYTE OP COD TBL LEN                   */
DTBLEN DC AL2(L'DSECT) DSECT TABLE ENTRY LENGTH                      */
NUMCK    DC    C'0000'                 NUMERIC CHECK AREA
ZEROS    DC    C'0000'                 CONSTANT ZEROS
ILENG    DC    H'0'                    INSTRUCTION LENGTH  FIX***
CONPROG  DC    X'00'                   CONSTANT IN PROGRESS INDIC
BASES    DC    XL256'0'                CURRENT BASE REGS
HIVAL    DC    4X'FF'                  CONSTANT F'S
         DS    0H
USGLEN DC AL2(L'USING) LENGTH OF USING TBL ENTRY                     */
NEXCHG   DC    XL3'00'                 NEXT BASE REG CHG OFFSET
MORUSG   DC    X'00'                   80=CURRENT BASE, 0=NO MORE BASES
CONTYPE  DS    CL1                     TYPE
CONLEN   DS    H                       CONSTANT LENGTH
CONOFST  DS    F                       RELATIVE OFFSET TO CONSTANT
CCTYPE   DC    X'00'                   CC SET TYPE OF INSTR SETTING
TXTOFST  DS    0F
         DS    X
TXTOFSET DS    XL3                     OFFSET TO TEXT BYTE
OFFSET   DS    XL3                     OFFSET FROM PGM START
INSTYP   DS    CL1                     INSTRUCTION TYPE
TYPE     DS    XL1                     TYPE CODE
*                                       0=CSECT, 1=ADCON, 2=CONST
*                                       E=USING, D=INSTRUCTION
*                                       C=COMMENT, 9=ENTRY
*                                       A=EQU
LEN      DS    XL1                     TEXT LENGTH
TEXT     DS    XL8                     TEXT
H1       DC    H'1'                    CONSTANT 1
H2       DC    H'2'                    CONSTANT 2
H4       DC    H'4'                    CONSTANT 4
H7       DC    H'7'                    CONSTANT 7
H8       DC    H'8'                    CONSTANT 8
H10      DC    H'10'                   CONSTANT 10
H11      DC    H'11'                   CONSTANT 11
H13      DC    H'13'                   CONSTANT 13
H14      DC    H'14'                   CONSTANT 14
H100     DC    H'100'                  CONSTANT 100
H1000    DC    H'1000'                 CONSTANT 1000
P0       DC    P'0'                    CONSTANT 0
P1       DC    P'1'                    CONSTANT 1
P58      DC    P'58'                   CONSTANT 58
P256     DC    P'256'                  CONSTANT 256
P4096    DC    P'4096'                 CONSTANT 4096
BLANX    DC    CL121' '                CONSTANT BLANKS
UNAME    DC    CL8'A'                  USER NAME AREA
XZROS    DC    8X'00'                  CONSTANT ZEROS
TRTBL    DC    C'0123456789ABCDEF'     TRANSLATE TBL
PRTABL   DS    CL9                     PRINTABLE HEX WORK
CHARTRAN DC    256X'FF'                TRT TABLE FOR CHAR/HEX DETERMINA
         ORG   CHARTRAN+C' '
         DC    X'00'                   BLANK IS CHARACTER
         ORG   CHARTRAN+C'A'
         DC    9X'00'                  A-I ARE CHARACTERS
         ORG   CHARTRAN+C'J'
         DC    9X'00'                  J-R ARE CHARACTERS
         ORG   CHARTRAN+C'S'
         DC    8X'00'                  S-Z ARE CHARACTERS
         ORG   CHARTRAN+C'0'
         DC    10X'00'                 0-9 ARE CHARACTERS
         ORG
TRHEX    DC    256X'FF'                HEX TRANSLATION TABLE
         ORG   TRHEX+C'A'
         DC    X'0A0B0C0D0E0F'
         ORG   TRHEX+C'0'
         DC    X'00010203040506070809'
         ORG
TRTHEX   DS    0X                      VERIFY HEX TABLE
         DC    XL16'00'
         DC    XL240'FF'
         ORG
         LTORG
*
* INSTRUCTION DISASSEMBLY TABLES. THESE TABLES DEFINE VALID
* INSTRUCTION OP-CODES, AND GIVE MNEMONICS, FORMAT-TYPES,
* AND AN INDICATOR TO SHOW CONDITION SETTING INSTRUCTIONS,
* PRIVILEGED INSTRUCTIONS, AND FLOATING POINT INSTRUCTIONS.
*
*
INSTENT  DS    0CL10                   CURRENT INSTRUCTION ENTRY
INAME    DS    CL5                     INSTR NAME (MNEMONIC)
ITYPE    DS    XL1                     INSTRUCTION TYPE
RR       EQU   0                       RR FORMAT
RX       EQU   4                       RX FORMAT
S        EQU   8                       S FORMAT
SI       EQU   12                      SI FORMAT
RS       EQU   16                      RS FORMAT
SS1      EQU   20                      SS FORMAT, SINGLE LENGTH
SS2      EQU   24                      SS FORMAT, 2 LENGTHS
TWO      EQU   28                      TWO BYTE OP-CODE
CONDBR   EQU   32                      CONDITIONAL BRANCH
SVC      EQU   36                      SUPERVISOR CALL
ICLASS   DS    XL1                     INSTRUCTION CLASS
PRIV     EQU   2                       PRIVILEGED INSTRUCTION
FLTPT    EQU   4                       FLOATING POINT INSTRUCTION
FLSHT    EQU   5                       SHORT PREC FLT PT INSTR
IEDT     DS    XL1                     INSTRUCTION EDITS
EPR      EQU   X'40'                   EVEN-ODD REGISTER PAIR
E2       EQU   X'20'                   2ND OPND ON HALFWORD BOUND
E4       EQU   X'10'                   2ND OPND ON FULLWORD BOUND
E8       EQU   X'08'                   2ND OPND ON DBL WORD BOUND
S1       EQU   X'02'                   1ST OPND MUST HAVE BASE/INDEX
S2       EQU   X'01'                   2ND OPND MUST HAVE BASE
ICCSET   DS    XL1                     TYPE CONDITION CODE SET
ARITH    EQU   X'80'                   ARITHMETIC TYPE
CPR      EQU   X'40'                   COMPARE TYPE
ZRO8     EQU   X'20'                   BC 8 MAY BE BZ
INLNG    DS    XL1                     INSTRUCTION LENGTH
*
*
*
SGLOP    DS    0CL10                   SINGLE BYTE OP-CODE TABLE
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'02' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'02' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'02' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'02' NOT INSTR
         DC    CL5'SPM',AL1(RR),AL1(0),AL1(0),AL1(0),X'02' 04
         DC    CL5'BALR',AL1(RR),AL1(0),AL1(0),AL1(0),X'02' 05
         DC    CL5'BCTR',AL1(RR),AL1(0),AL1(0),AL1(0),X'02' 06
         DC    CL5'BCR',AL1(RR),AL1(0),AL1(0),AL1(0),X'02' 07
         DC    CL5'SSK',AL1(RR),AL1(PRIV),AL1(0),AL1(0),X'02' 08
         DC    CL5'ISK',AL1(RR),AL1(PRIV),AL1(0),AL1(0),X'02' 09
         DC    CL5'SVC',AL1(SVC),AL1(0),AL1(0),AL1(0),X'02' 0A
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'02' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'02' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'02' NOT INSTR
         DC    CL5'MVCL',AL1(RR),AL1(0),AL1(EPR),AL1(0),X'02' 0E
         DC    CL5'CLCL',AL1(RR),AL1(0),AL1(EPR),AL1(0),X'02' 0F
         DC    CL5'LPR',AL1(RR),AL1(0),AL1(0),AL1(ARITH),X'02' 10
         DC    CL5'LNR',AL1(RR),AL1(0),AL1(0),AL1(ARITH),X'02' 11
         DC    CL5'LTR',AL1(RR),AL1(0),AL1(0),AL1(ARITH),X'02' 12
         DC    CL5'LCR',AL1(RR),AL1(0),AL1(0),AL1(ARITH),X'02' 13
         DC    CL5'NR',AL1(RR),AL1(0),AL1(0),AL1(ZRO8),X'02' 14
         DC    CL5'CLR',AL1(RR),AL1(0),AL1(0),AL1(CPR),X'02' 15
         DC    CL5'OR',AL1(RR),AL1(0),AL1(0),AL1(ZRO8),X'02' 16
         DC    CL5'XR',AL1(RR),AL1(0),AL1(0),AL1(ZRO8),X'02' 17
         DC    CL5'LR',AL1(RR),AL1(0),AL1(0),AL1(0),X'02' 18
         DC    CL5'CR',AL1(RR),AL1(0),AL1(0),AL1(CPR),X'02' 19
         DC    CL5'AR',AL1(RR),AL1(0),AL1(0),AL1(ARITH),X'02' 1A
         DC    CL5'SR',AL1(RR),AL1(0),AL1(0),AL1(ARITH),X'02' 1B
         DC    CL5'MR',AL1(RR),AL1(0),AL1(EPR),AL1(0),X'02' 1C
         DC    CL5'DR',AL1(RR),AL1(0),AL1(EPR),AL1(0),X'02' 1D
         DC    CL5'ALR',AL1(RR),AL1(0),AL1(0),AL1(0),X'02' 1E
         DC    CL5'SLR',AL1(RR),AL1(0),AL1(0),AL1(0),X'02' 1F
         DC    CL5'LPDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 20
         DC    CL5'LNDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 21
         DC    CL5'LTDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 22
         DC    CL5'LCDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 23
         DC    CL5'HDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02' 24
         DC    CL5'LRDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02' 25
         DC    CL5'MXR',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02' 26
         DC    CL5'MXDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02' 27
         DC    CL5'LDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02' 28
         DC    CL5'CDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(CPR),X'02' 29
         DC    CL5'ADR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 2A
         DC    CL5'SDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 2B
         DC    CL5'MDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02' 2C
         DC    CL5'DDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02' 2D
         DC    CL5'AWR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 2E
         DC    CL5'SWR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 2F
         DC    CL5'LPER',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 30
         DC    CL5'LNER',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 31
         DC    CL5'LTER',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 32
         DC    CL5'LCER',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 33
         DC    CL5'HER',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02' 34
         DC    CL5'LRER',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02' 35
         DC    CL5'AXR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 36
         DC    CL5'SXR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 37
         DC    CL5'LER',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02' 38
         DC    CL5'CER',AL1(RR),AL1(FLTPT),AL1(0),AL1(CPR),X'02' 39
         DC    CL5'AER',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 3A
         DC    CL5'SER',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 3B
         DC    CL5'MER',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02' 3C
         DC    CL5'DER',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02' 3D
         DC    CL5'AUR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 3E
         DC    CL5'SUR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 3F
         DC    CL5'STH',AL1(RX),AL1(0),AL1(E2+S2),AL1(0),X'04' 40
         DC    CL5'LA',AL1(RX),AL1(0),AL1(0),AL1(0),X'04' 41
         DC    CL5'STC',AL1(RX),AL1(0),AL1(S2),AL1(0),X'04' 42
         DC    CL5'IC',AL1(RX),AL1(0),AL1(0),AL1(0),X'04' 43
         DC    CL5'EX',AL1(RX),AL1(0),AL1(E2+S2),AL1(0),X'04' 44
         DC    CL5'BAL',AL1(RX),AL1(0),AL1(E2),AL1(0),X'04' 45
         DC    CL5'BCT',AL1(RX),AL1(0),AL1(E2+S2),AL1(0),X'04' 46
         DC    CL5'BC',AL1(CONDBR),AL1(0),AL1(E2),AL1(0),X'04' 47
         DC    CL5'LH',AL1(RX),AL1(0),AL1(E2),AL1(0),X'04' 48
         DC    CL5'CH',AL1(RX),AL1(0),AL1(E2),AL1(CPR),X'04' 49
         DC    CL5'AH',AL1(RX),AL1(0),AL1(E2),AL1(ARITH),X'04' 4A
         DC    CL5'SH',AL1(RX),AL1(0),AL1(E2),AL1(ARITH),X'04' 4B
         DC    CL5'MH',AL1(RX),AL1(0),AL1(E2),AL1(0),X'04' 4C
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    CL5'CVD',AL1(RX),AL1(0),AL1(E8+S2),AL1(0),X'04' 4E
         DC    CL5'CVB',AL1(RX),AL1(0),AL1(E8),AL1(0),X'04' 4F
         DC    CL5'ST',AL1(RX),AL1(0),AL1(E4+S2),AL1(0),X'04' 50
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    CL5'N',AL1(RX),AL1(0),AL1(E4),AL1(ZRO8),X'04' 54
         DC    CL5'CL',AL1(RX),AL1(0),AL1(E4),AL1(CPR),X'04' 55
         DC    CL5'O',AL1(RX),AL1(0),AL1(E4),AL1(ZRO8),X'04' 56
         DC    CL5'X',AL1(RX),AL1(0),AL1(E4),AL1(ZRO8),X'04' 57
         DC    CL5'L',AL1(RX),AL1(0),AL1(E4),AL1(0),X'04' 58
         DC    CL5'C',AL1(RX),AL1(0),AL1(E4),AL1(CPR),X'04' 59
         DC    CL5'A',AL1(RX),AL1(0),AL1(E4),AL1(ARITH),X'04' 5A
         DC    CL5'S',AL1(RX),AL1(0),AL1(E4),AL1(ARITH),X'04' 5B
         DC    CL5'M',AL1(RX),AL1(0),AL1(E4+EPR),AL1(0),X'04' 5C
         DC    CL5'D',AL1(RX),AL1(0),AL1(E4+EPR),AL1(0),X'04' 5D
         DC    CL5'AL',AL1(RX),AL1(0),AL1(E4),AL1(0),X'04' 5E
         DC    CL5'SL',AL1(RX),AL1(0),AL1(E4),AL1(0),X'04' 5F
         DC    CL5'STD',AL1(RX),AL1(FLTPT),AL1(0),AL1(0),X'04' 60
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    CL5'MXD',AL1(RX),AL1(FLTPT),AL1(0),AL1(0),X'04' 67
         DC    CL5'LD',AL1(RX),AL1(FLTPT),AL1(0),AL1(0),X'04' 68
         DC    CL5'CD',AL1(RX),AL1(FLTPT),AL1(0),AL1(CPR),X'04' 69
         DC    CL5'AD',AL1(RX),AL1(FLTPT),AL1(0),AL1(ARITH),X'04' 6A
         DC    CL5'SD',AL1(RX),AL1(FLTPT),AL1(0),AL1(ARITH),X'04' 6B
         DC    CL5'MD',AL1(RX),AL1(FLTPT),AL1(0),AL1(0),X'04' 6C
         DC    CL5'DD',AL1(RX),AL1(FLTPT),AL1(0),AL1(0),X'04' 6D
         DC    CL5'AW',AL1(RX),AL1(FLTPT),AL1(0),AL1(ARITH),X'04' 6E
         DC    CL5'SW',AL1(RX),AL1(FLTPT),AL1(0),AL1(ARITH),X'04' 6F
         DC    CL5'STE',AL1(RX),AL1(FLSHT),AL1(0),AL1(0),X'04' 70
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    CL5'LE',AL1(RX),AL1(FLSHT),AL1(0),AL1(0),X'04' 78
         DC    CL5'CE',AL1(RX),AL1(FLSHT),AL1(0),AL1(CPR),X'04' 79
         DC    CL5'AE',AL1(RX),AL1(FLSHT),AL1(0),AL1(ARITH),X'04' 7A
         DC    CL5'SE',AL1(RX),AL1(FLSHT),AL1(0),AL1(ARITH),X'04' 7B
         DC    CL5'ME',AL1(RX),AL1(FLSHT),AL1(0),AL1(0),X'04' 7C
         DC    CL5'DE',AL1(RX),AL1(FLSHT),AL1(0),AL1(0),X'04' 7D
         DC    CL5'AU',AL1(RX),AL1(FLSHT),AL1(0),AL1(ARITH),X'04' 7E
         DC    CL5'SU',AL1(RX),AL1(FLSHT),AL1(0),AL1(ARITH),X'04' 7F
         DC    CL5'SSM',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04' 80
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    CL5'LPSW',AL1(S),AL1(PRIV),AL1(E8),AL1(0),X'04' 82
         DC    CL5'DIAGN',AL1(RS),AL1(PRIV),AL1(0),AL1(0),X'04' 83
         DC    CL5'WRD',AL1(SI),AL1(PRIV),AL1(0),AL1(0),X'04' 84
         DC    CL5'RDD',AL1(SI),AL1(PRIV),AL1(0),AL1(0),X'04' 85
         DC    CL5'BXH',AL1(RS),AL1(0),AL1(E2+S2),AL1(0),X'04' 86
         DC    CL5'BXLE',AL1(RS),AL1(0),AL1(E2+S2),AL1(0),X'04' 87
         DC    CL5'SRL',AL1(RS),AL1(0),AL1(0),AL1(ARITH),X'04' 88
         DC    CL5'SLL',AL1(RS),AL1(0),AL1(0),AL1(ARITH),X'04' 89
         DC    CL5'SRA',AL1(RS),AL1(0),AL1(0),AL1(ARITH),X'04' 8A
         DC    CL5'SLA',AL1(RS),AL1(0),AL1(0),AL1(ARITH),X'04' 8B
         DC    CL5'SRDL',AL1(RS),AL1(0),AL1(EPR),AL1(ARITH),X'04' 8C
         DC    CL5'SLDL',AL1(RS),AL1(0),AL1(EPR),AL1(ARITH),X'04' 8D
         DC    CL5'SRDA',AL1(RS),AL1(0),AL1(EPR),AL1(ARITH),X'04' 8E
         DC    CL5'SLDA',AL1(RS),AL1(0),AL1(EPR),AL1(ARITH),X'04' 8F
         DC    CL5'STM',AL1(RS),AL1(0),AL1(E4+S2),AL1(0),X'04' 90
         DC    CL5'TM',AL1(SI),AL1(0),AL1(0),AL1(ARITH),X'04' 91
         DC    CL5'MVI',AL1(SI),AL1(0),AL1(S2),AL1(0),X'04' 92
         DC    CL5'TS',AL1(S),AL1(0),AL1(0),AL1(0),X'04' 93
         DC    CL5'NI',AL1(SI),AL1(0),AL1(0),AL1(ZRO8),X'04' 94
         DC    CL5'CLI',AL1(SI),AL1(0),AL1(0),AL1(CPR),X'04' 95
         DC    CL5'OI',AL1(SI),AL1(0),AL1(0),AL1(ZRO8),X'04' 96
         DC    CL5'XI',AL1(SI),AL1(0),AL1(0),AL1(ZRO8),X'04' 97
         DC    CL5'LM',AL1(RS),AL1(0),AL1(E4),AL1(0),X'04' 98
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    CL5' ',AL1(TWO),AL1(0),AL1(0),AL1(0),X'04' 9C
         DC    CL5' ',AL1(TWO),AL1(0),AL1(0),AL1(0),X'04' 9D
         DC    CL5' ',AL1(TWO),AL1(0),AL1(0),AL1(0),X'04' 9E
         DC    CL5' ',AL1(TWO),AL1(0),AL1(0),AL1(0),X'04' 9F
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    CL5'STNSM',AL1(SI),AL1(PRIV),AL1(0),AL1(0),X'04' AC
         DC    CL5'STOSM',AL1(SI),AL1(PRIV),AL1(0),AL1(0),X'04' AD
         DC    CL5'SIGP',AL1(RS),AL1(PRIV),AL1(0),AL1(0),X'04' AE
         DC    CL5'MC',AL1(SI),AL1(0),AL1(0),AL1(0),X'04' AF
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    CL5'LRA',AL1(RX),AL1(PRIV),AL1(0),AL1(0),X'04' B1
         DC    CL5' ',AL1(TWO),AL1(0),AL1(0),AL1(0),X'04' B2
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    CL5'STCTL',AL1(RS),AL1(PRIV),AL1(0),AL1(0),X'04' B6
         DC    CL5'LCTL',AL1(RS),AL1(PRIV),AL1(E4),AL1(0),X'04' B7
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    CL5'CS',AL1(RS),AL1(0),AL1(E4+EPR),AL1(0),X'04' BA
         DC    CL5'CDS',AL1(RS),AL1(0),AL1(E4+EPR),AL1(0),X'04' BB
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    CL5'CLM',AL1(RS),AL1(0),AL1(0),AL1(CPR),X'04' BD
         DC    CL5'STCM',AL1(RS),AL1(0),AL1(S2),AL1(0),X'04' BE
         DC    CL5'ICM',AL1(RS),AL1(0),AL1(0),AL1(ZRO8),X'04' BF
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    CL5'MVN',AL1(SS1),AL1(0),AL1(S1),AL1(0),X'06' D1
         DC    CL5'MVC',AL1(SS1),AL1(0),AL1(S1),AL1(0),X'06' D2
         DC    CL5'MVZ',AL1(SS1),AL1(0),AL1(S1),AL1(0),X'06' D3
         DC    CL5'NC',AL1(SS1),AL1(0),AL1(S1),AL1(ZRO8),X'06' D4
         DC    CL5'CLC',AL1(SS1),AL1(0),AL1(0),AL1(CPR),X'06' D5
         DC    CL5'OC',AL1(SS1),AL1(0),AL1(S1),AL1(ZRO8),X'06' D6
         DC    CL5'XC',AL1(SS1),AL1(0),AL1(S1),AL1(ZRO8),X'06' D7
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    CL5'TR',AL1(SS1),AL1(0),AL1(S1),AL1(0),X'06' DC
         DC    CL5'TRT',AL1(SS1),AL1(0),AL1(0),AL1(ZRO8),X'06' DD
         DC    CL5'ED',AL1(SS1),AL1(0),AL1(S1),AL1(ARITH),X'06' DE
         DC    CL5'EDMK',AL1(SS1),AL1(0),AL1(S1),AL1(ARITH),X'06' DF
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    CL5'SRP',AL1(SS2),AL1(0),AL1(S1),AL1(ARITH),X'06' F0
         DC    CL5'MVO',AL1(SS2),AL1(0),AL1(S1),AL1(0),X'06' F1
         DC    CL5'PACK',AL1(SS2),AL1(0),AL1(S1),AL1(0),X'06' F2
         DC    CL5'UNPK',AL1(SS2),AL1(0),AL1(S1),AL1(0),X'06' F3
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    CL5'ZAP',AL1(SS2),AL1(0),AL1(S1),AL1(ARITH),X'06' F8
         DC    CL5'CP',AL1(SS2),AL1(0),AL1(0),AL1(CPR),X'06' F9
         DC    CL5'AP',AL1(SS2),AL1(0),AL1(S1),AL1(ARITH),X'06' FA
         DC    CL5'SP',AL1(SS2),AL1(0),AL1(S1),AL1(ARITH),X'06' FB
         DC    CL5'MP',AL1(SS2),AL1(0),AL1(S1),AL1(0),X'06' FC
         DC    CL5'DP',AL1(SS2),AL1(0),AL1(S1),AL1(0),X'06' FD
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    X'FFFF'                 TABLE END
*
*
*
DBLOP    DS    0CL12                   TWO-BYTE OP-CODE TABLE
         DC    X'9C00',CL5'SIO',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'9C01',CL5'SIOF',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'9D00',CL5'TIO',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'9D01',CL5'CLRIO',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'9E00',CL5'HIO',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'9E01',CL5'HDV',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'9F00',CL5'TCH',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B20B',CL5'IPK',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B20D',CL5'PTLB',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B213',CL5'RRB',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B204',CL5'SCK',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B206',CL5'SCKC',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B208',CL5'SPT',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B210',CL5'SPX',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B20A',CL5'SPKA',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B203',CL5'STIDC',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B205',CL5'STCK',AL1(S),AL1(0),AL1(E8+S2),AL1(0),X'04'
         DC    X'B207',CL5'STCKC',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B212',CL5'STAP',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B202',CL5'STIDP',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B209',CL5'STPT',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B211',CL5'STPX',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'FFFF'                 TABLE END
*
*
*
SVCOP    DS    0CL15                   SVC NAME TABLE
         DC    AL1(0),CL14'EXCP/XDAP'
         DC    AL1(1),CL14'WAIT/WAITR'
         DC    AL1(2),CL14'POST/PRTOV'
         DC    AL1(3),CL14'EXIT'
         DC    AL1(4),CL14'GETMAIN'
         DC    AL1(5),CL14'FREEMAIN'
         DC    AL1(6),CL14'LINK'
         DC    AL1(7),CL14'XCTL'
         DC    AL1(8),CL14'LOAD'
         DC    AL1(9),CL14'DELETE'
         DC    AL1(10),CL14'GET/FREEMAIN R'
         DC    AL1(11),CL14'TIME'
         DC    AL1(12),CL14'SYNCH'
         DC    AL1(13),CL14'ABEND'
         DC    AL1(14),CL14'SPIE'
         DC    AL1(15),CL14'ERREXCP'
         DC    AL1(16),CL14'PURGE'
         DC    AL1(17),CL14'RESTORE'
         DC    AL1(18),CL14'BLDL/FIND'
         DC    AL1(19),CL14'OPEN'
         DC    AL1(20),CL14'CLOSE'
         DC    AL1(21),CL14'STOW'
         DC    AL1(22),CL14'OPEN TYPE J'
         DC    AL1(23),CL14'CLOSE TYPE T'
         DC    AL1(24),CL14'DEVTYPE'
         DC    AL1(25),CL14'TRKBAL'
         DC    AL1(26),CL14'LOCATE, ETC'
         DC    AL1(27),CL14'OBTAIN'
         DC    AL1(28),CL14'CVOL'
         DC    AL1(29),CL14'SCRATCH'
         DC    AL1(30),CL14'RENAME'
         DC    AL1(31),CL14'FEOV'
         DC    AL1(32),CL14'(NO MACRO)'
         DC    AL1(33),CL14'IOHALT'
         DC    AL1(34),CL14'MGCR/QEDIT'
         DC    AL1(35),CL14'WTO/WTOR'
         DC    AL1(36),CL14'WTL'
         DC    AL1(37),CL14'SEGLD/SEGWT'
         DC    AL1(39),CL14'LABEL'
         DC    AL1(40),CL14'EXTRACT'
         DC    AL1(41),CL14'IDENTIFY'
         DC    AL1(42),CL14'ATTACH'
         DC    AL1(43),CL14'CIRB'
         DC    AL1(44),CL14'CHAP'
         DC    AL1(45),CL14'OVLYBRCH'
         DC    AL1(46),CL14'TTIMER'
         DC    AL1(47),CL14'STIMER'
         DC    AL1(48),CL14'DEQ'
         DC    AL1(51),CL14'SNAP/SDUMP'
         DC    AL1(52),CL14'RESTART'
         DC    AL1(53),CL14'RELEX'
         DC    AL1(54),CL14'DISABLE'
         DC    AL1(55),CL14'EOV'
         DC    AL1(56),CL14'ENQ/RESERVE'
         DC    AL1(57),CL14'FREEDBUF'
         DC    AL1(58),CL14'RELBUF/REQBUF'
         DC    AL1(59),CL14'OLTEP'
         DC    AL1(60),CL14'(E)STAE/STAI'
         DC    AL1(61),CL14'IKJEGS6A'
         DC    AL1(62),CL14'DETACH'
         DC    AL1(63),CL14'CHKPT'
         DC    AL1(64),CL14'RDJFCB'
         DC    AL1(66),CL14'BTAMTEST'
         DC    AL1(67),CL14'SYNADAF'
         DC    AL1(68),CL14'SYNADRLS'
         DC    AL1(69),CL14'BSP'
         DC    AL1(70),CL14'GSERV'
         DC    AL1(71),CL14'ASGNBFR, ETC'
         DC    AL1(72),CL14'CHATR'
         DC    AL1(73),CL14'SPAR'
         DC    AL1(74),CL14'DAR'
         DC    AL1(75),CL14'DQUEUE'
         DC    AL1(76),CL14'(NO MACRO)'
         DC    AL1(78),CL14'(NO MACRO)'
         DC    AL1(79),CL14'STATUS'
         DC    AL1(81),CL14'SETPRT'
         DC    AL1(82),CL14'DASDR'
         DC    AL1(83),CL14'SMFWTM'
         DC    AL1(84),CL14'GRAPHICS'
         DC    AL1(85),CL14'DDRSWAP'
         DC    AL1(86),CL14'ATLAS'
         DC    AL1(87),CL14'DOM'
         DC    AL1(88),CL14'MOD88'
         DC    AL1(91),CL14'VOLSTAT'
         DC    AL1(92),CL14'TCBEXCP'
         DC    AL1(93),CL14'TGET/TPUT'
         DC    AL1(94),CL14'STCC'
         DC    AL1(95),CL14'SYSEVENT'
         DC    AL1(96),CL14'STAX'
         DC    AL1(97),CL14'TSO TEST'
         DC    AL1(98),CL14'PROTECT'
         DC    AL1(99),CL14'DDDYNAM'
         DC    AL1(100),CL14'IKJEFFIB'
         DC    AL1(101),CL14'QTIP'
         DC    AL1(102),CL14'AQCTL'
         DC    AL1(103),CL14'XLATE'
         DC    AL1(104),CL14'TOPCTL'
         DC    AL1(105),CL14'IMAGLIB'
         DC    AL1(107),CL14'MODESET'
         DC    AL1(109),CL14'ESR TYPE 4'
         DC    AL1(110),CL14'DSTATUS'
         DC    AL1(111),CL14'(NO MACRO)'
         DC    AL1(112),CL14'PGRLSE'
         DC    AL1(113),CL14'PGFIX,CL14' ETC'
         DC    AL1(114),CL14'EXCPVR'
         DC    AL1(116),CL14'ESR TYPE 1'
         DC    AL1(117),CL14'DEBCHK'
         DC    AL1(119),CL14'TESTAUTH'
         DC    AL1(120),CL14'GETMAIN/FREEMAIN'
         DC    AL1(121),CL14'VSAM'
         DC    AL1(122),CL14'EVENTS'
         DC    AL1(123),CL14'PURGEDQ'
         DC    AL1(124),CL14'TPIO'
         DC    AL1(125),CL14'EVENTS'
         DC    AL1(126),CL14'MSS INTERFACE'
         DC    AL1(200),CL14'<< USER SVC >>'
         DC    AL1(201),CL14'<< USER SVC >>'
         DC    AL1(202),CL14'<< USER SVC >>'
         DC    AL1(203),CL14'<< USER SVC >>'
         DC    AL1(204),CL14'<< USER SVC >>'
         DC    AL1(205),CL14'<< USER SVC >>'
         DC    AL1(206),CL14'<< USER SVC >>'
         DC    AL1(207),CL14'<< USER SVC >>'
         DC    AL1(208),CL14'<< USER SVC >>'
         DC    AL1(209),CL14'<< USER SVC >>'
         DC    AL1(210),CL14'<< USER SVC >>'
         DC    AL1(211),CL14'<< USER SVC >>'
         DC    AL1(212),CL14'<< USER SVC >>'
         DC    AL1(213),CL14'<< USER SVC >>'
         DC    AL1(214),CL14'<< USER SVC >>'
         DC    AL1(215),CL14'<< USER SVC >>'
         DC    AL1(216),CL14'<< USER SVC >>'
         DC    AL1(217),CL14'<< USER SVC >>'
         DC    AL1(218),CL14'<< USER SVC >>'
         DC    AL1(219),CL14'<< USER SVC >>'
         DC    AL1(220),CL14'<< USER SVC >>'
         DC    AL1(221),CL14'<< USER SVC >>'
         DC    AL1(222),CL14'<< USER SVC >>'
         DC    AL1(223),CL14'<< USER SVC >>'
         DC    AL1(224),CL14'<< USER SVC >>'
         DC    AL1(225),CL14'<< USER SVC >>'
         DC    AL1(226),CL14'<< USER SVC >>'
         DC    AL1(227),CL14'<< USER SVC >>'
         DC    AL1(228),CL14'<< USER SVC >>'
         DC    AL1(229),CL14'<< USER SVC >>'
         DC    AL1(230),CL14'<< USER SVC >>'
         DC    AL1(231),CL14'<< USER SVC >>'
         DC    AL1(232),CL14'<< USER SVC >>'
         DC    AL1(233),CL14'<< USER SVC >>'
         DC    AL1(234),CL14'<< USER SVC >>'
         DC    AL1(235),CL14'<< USER SVC >>'
         DC    AL1(236),CL14'<< USER SVC >>'
         DC    AL1(237),CL14'<< USER SVC >>'
         DC    AL1(238),CL14'<< USER SVC >>'
         DC    AL1(239),CL14'<< USER SVC >>'
         DC    AL1(240),CL14'<< USER SVC >>'
         DC    AL1(241),CL14'<< USER SVC >>'
         DC    AL1(242),CL14'<< USER SVC >>'
         DC    AL1(243),CL14'<< USER SVC >>'
         DC    AL1(244),CL14'<< USER SVC >>'
         DC    AL1(245),CL14'<< USER SVC >>'
         DC    AL1(246),CL14'<< USER SVC >>'
         DC    AL1(247),CL14'<< USER SVC >>'
         DC    AL1(248),CL14'<< USER SVC >>'
         DC    AL1(249),CL14'<< USER SVC >>'
         DC    AL1(250),CL14'<< USER SVC >>'
         DC    AL1(251),CL14'<< USER SVC >>'
         DC    AL1(252),CL14'<< USER SVC >>'
         DC    AL1(253),CL14'<< USER SVC >>'
         DC    AL1(254),CL14'<< USER SVC >>'
         DC    AL1(255),CL14'<< USER SVC >>'
         DC    X'FF'                   END OF TABLE
         END
./ ADD NAME=DISASM2  0100-94267-94267-1200-02705-02705-00000-CONYERS
DIS2     TITLE '*** DISASSEMBLY PHASE 2 ***'
         MACRO
&NAME    SVLNK &REG1,&REG2,&REG3,&IND,&LV=
         GBLC  &EQU
         GBLC  &GM
         GBLC  &CSECT
         LCLC  &REGA
         AIF   (T'&NAME EQ 'O').NOCSECT
         AIF   ('&NAME' EQ '*').NOCSECT
&CSECT   SETC  '&NAME'
&CSECT   CSECT 
         AGO   .RST
.NOCSECT ANOP
&CSECT   SETC  '*'
         CSECT 
.RST     ANOP
         AIF   ('&EQU' EQ 'ON').NRQ
&EQU     SETC  'ON'
*
***REGISTER EQUATES***
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
.NRQ     ANOP
*
*******************  PROGRAM INITIALIZATION  *************************
*
         AIF   (T'&REG1 EQ 'O').NOREG
&REGA    SETC  '&REG1'
         AIF   (T'&REG2 EQ 'O').ONEREG
         USING &CSECT,&REGA,&REG2 
         AGO   .BYUSE
.NOREG   ANOP
&REGA    SETC  'R3'
.ONEREG  USING &CSECT,&REGA 
.BYUSE   ANOP
         STM   R14,R12,12(R13) :       STORE REGS IN HIGH SAVE AREA
         LR    &REGA,R15 
         AIF   (T'&REG2 EQ 'O').NOLA
         LA    &REG2,4095(&REGA) 
         LA    &REG2,1(&REG2) 
.NOLA    ANOP
         AIF   (T'&REG3 EQ 'O').NOLNK
         L     &REG3,0(R1) 
.NOLNK   ANOP
         AIF (T'&IND EQ 'O').GETIT
         CNOP  0,4
         BAL   R15,SAVEAREA+72 
SAVEAREA DS    18F 
         ST    R15,8(R13)
         ST    R13,SAVEAREA+4
         LR    R13,R15
         AGO   .NOSAVE
.GETIT   ANOP
         AIF   (T'&LV EQ 'O').GMD
&GM      SETC  '&LV'
         AGO   .DGM
.GMD     ANOP
&GM      SETC  '72'
.DGM     ANOP
*
***GET MAIN STORAGE FOR SAVE AREA***
*
         AIF   ('&GM' LT '4096').LA
         GETMAIN R,LV=&GM 
         AGO   .EGM
.LA      ANOP
         LA    R0,&GM                  GET &GM BYTES
         GETMAIN R,LV=(0)
.EGM     ANOP
*
***SET UP SAVE AREA POINTERS***
*
         ST    R1,8(R13) 
         ST    R13,4(R1) 
         LR    R13,R1 
         AIF   (T'&REG3  NE 'O').NOSAVE
         L     R1,4(R13) 
         L     R1,24(R1) 
.NOSAVE  ANOP
         AIF   ('&CSECT' EQ '*').EXIT
         B     *+12
         DC    CL8'&CSECT'  
.EXIT    ANOP
*
*********************  END INITIALIZATION  ***************************
*
         MEND
         EJECT
DISASM2  SVLNK R3,R4
         PRINT NOGEN
* THIS SUB-PROGRAM IS CALLED BY DISASM AFTER THE DIRECTORY
* ENTRY AND LOAD MODULE ARE PROCESSED. THE ESD AND RLD
* ENTRIES HAVE BEEN USED TO CREATE A PROGRAM LABEL TABLE,
* AND MODULE TEXT IS IN AN AREA OF STORAGE. A COMMON PARAMETER
* AREA IS DEFINED IN DISASM, AND PASSED TO THIS PROGRAM.
*
* TEXT BYTES ARE USED TO CREATE ASSEMBLY LANGUAGE STATEMENTS,
* AND MACHINE INSTRUCTION STATEMENTS. OUTPUT IS WRITTEN
* TO THE WORK1 DATASET FOR FURTHER PROCESSING BY OTHER
* MODULES.
*   A TEXT BYTE IS CONSIDERED TO BE AN INSTRUCTION IF
* IT OCCURS ON A HALFWORD BOUNDARY, IS A VALID OP-CODE,
* AND IS FOLLOWED BY A VALID OP-CODE. UNCONDITIONAL BRANCHES
* NEED NOT BE FOLLOWED BY A VALID OP-CODE, HOWEVER. THE
* PRIVILEGED AND FLOATING POINT INSTRUCTIONS ARE NOT
* TREATED AS INSTRUCTIONS UNLESS THE USER SPECIFIED
* THEIR INCLUSION AT EXEC TIME.
*
*
*
*
* AUTHOR R THORNTON - NOV 1977
*
*
******************************************************************
*                                                                *
* CHECK IF USER WISHES FLOATING POINT AND PRIVILEGED INSTRUCTIONS*
* IF NOT, CLEAR THE APPROPRIATE ENTRIES IN THE INSTRUCTION OP    *
* CODE TABLES.                                                   *
*                                                                *
******************************************************************
*
         L     R5,0(R1)                GET PARM FIELD ADDRESS
         USING COMMPARM,R5
         CLI   FLPTASM,1               FLOATING POINT INSTR O.K.
         BE    TSTPRIV                 YES
         LA    R12,SGLOP               POINT TO OP-CODE TBL
TSTOPND  CLI   0(R12),X'FF'            END OF TBL
         BE    TSTPRIV                 YES
         TM    ICLASS-INSTENT(R12),FLTPT IS IT FLOATING POINT
         BZ    FLPSTP                  NO
         XC    0(L'SGLOP,R12),0(R12)   CLEAR ENTRY
FLPSTP   LA    R12,L'SGLOP(R12)        TO NEXT ENTRY
         B     TSTOPND                 LOOP THRU TABLE
TSTPRIV  CLI   PRIVASM,1               PRIVILEGED INSTR O.K.
         BE    MAINLINE                YES
         LA    R12,SGLOP               POINT TO OP-CODE TBL
TTOPND   CLI   0(R12),X'FF'            END OF TABLE
         BE    CKDBLS                  YES
         TM    ICLASS-INSTENT(R12),PRIV PRIVILEGED INSTR
         BZ    PRIVSTP                 NO
         XC    0(L'SGLOP,R12),0(R12)   YES, CLEAR ENTRY
PRIVSTP  LA    R12,L'SGLOP(R12)        TO NEXT ENTRY
         B     TTOPND                  LOOP THRU TABLE
CKDBLS   L     R12,DBLOPAD             @ 2-BYTE OP-CODE TBL
CKDBND   CLI   0(R12),X'FF'            END OF TBL
         BE    MAINLINE                YES
         TM    ICLASS-INSTENT+2(R12),PRIV PRIVILEGED OP-CODE
         BZ    DBSTP                   NO
         XC    0(L'DBLOP,R12),0(R12)   YES, CLEAR ENTRY
DBSTP    LA    R12,L'DBLOP(R12)        TO NEXT ENTRY
         B     CKDBND                  LOOP THRU TABLE
*
*
*
******************************************************************
*                                                                *
* MAINLINE ROUTINE FOR DISASSEMBLY. EACH BYTE OF TEXT IS CHECKED *
* TO DETERMINE WHETHER IT MAY BE AN INSTRUCTION OP-CODE. IF NOT, *
* THE CONST ROUTINE IS PERFORMED TO HANDLE CONSTANT DATA. IF IT  *
* APPEARS TO BE AN OP-CODE, THE INSTR ROUTINE IS PERFORMED.      *
* WHEN TEXT IS EXHAUSTED, THIS PHASE TERMINATES.                 *
*                                                                *
******************************************************************
*
MAINLINE EQU   *                       MAINLINE ROUTINE
         L     R6,LBLTBL               @ LABEL TABLE
         USING LABELD,R6
         MVC   TXTCURR,TXTSTRT         COPY TEXT START ADDR
GETCURR  L     R7,TXTCURR              @ CURRENT TXT BYTE
         C     R7,TXTEND               END OF TEXT
         BNL   EOJ                     YES          FIX******
         LR    R12,R7                  COPY TEXT ADDR
         S     R12,TXTSTRT             COMPUTE OFFSET
         ST    R12,TXTOFST             SAVE OFFSET TO THIS BYTE
         CLC   NEXCHG,TXTOFSET         TIME TO CHANGE BASES
         BH    CKDARNG                 NO
         BAL   R9,NEXUSG               YES, GO DO IT
CKDARNG  L     R12,DATONLY             GET DATA ONLY TBL ADDR
         CLC   TXTOFSET,0(R12)         RANGE BEGINS LATER
         BL    CKLOSEQ                 YES
         CLC   TXTOFSET,3(R12)         THIS BYTE IN THE RANGE
         BNH   CONST                   YES
         LA    R12,6(R12)              PAST THIS ENTRY, STEP OVER 1
         ST    R12,DATONLY             SAVE UPDATED ADDR
         B     CKDARNG                 GO CHECK AGAIN
CKLOSEQ  CLC   TXTOFSET,LBLADR         LABEL ENTRY OUT OF SEQ
         BNH   GCKODD                  NO, CONTINUE
         BAL   R9,FORCONST             YES, FORCE ANY CONSTANT OUT
         MVC   NAME,LBLNAME            NAME TO OUTPUT
         MVC   MNEMONIC,=CL5'EQU'      MNEMONIC
         MVI   OPNDS,C'*'              OPERAND
         MVC   COMMENT(14),=14C'?'     SHOW ERROR
         BAL   R9,WRTOUT               WRITE ERROR RECORD
         BAL   R9,PRINT                GO PRINT IT
         LA    R6,L'LABEL(R6)          TO NEXT LABEL
         B     CKLOSEQ                 CONTINUE SEQ CHK
GCKODD   TM    TXTCURR+3,1             ODD ADDRESS
         BO    CONST                   YES, NOT INSTR
         CLC   1(3,R7),0(R7)           4 CONSEC IDENTICAL BYTES
         BE    CONST                   YES, NOT INSTR
         TRT   0(1,R7),CHARTRAN        TEST TEXT BYTE
         BNZ   CKINSTR                 NOT CHARACTER
         CLI   CONPROG,1               IS CONSTANT IN PROGRESS
         BNE   CK6                     NO
         CLI   CONTYPE,C'C'            IS IT CHARACTER TYPE
         BE    CONST                   YES, ADD THIS TO CONSTANT
CK6      TRT   0(6,R7),CHARTRAN        6 CONSECUTIVE CHARACTERS
         BZ    CONST                   YES, NOT INSTRUCTION
CKINSTR  SR    R8,R8                   CLEAR WORK
         IC    R8,0(R7)                PICK UP TXT BYTE
         MH    R8,SGOPLEN              TIMES TABLE LENGTH
         LA    R8,SGLOP(R8)            @ INSTR TBL ENTRY
         MVC   INSTENT,0(R8)           SAVE INSTRUCTION TBL ENTRY
         CLI   INAME,0                 IS IT AN INSTR OP-CODE
         BE    CONST                   NO
         CLI   ITYPE,TWO               TWO-BYTE OP-CODE
         BNE   INSTR                   NO
         L     R8,DBLOPAD              YES, GET 2-BYTE TBL ADDR
DBLND    CLI   0(R8),X'FF'             END OF TABLE
         BE    CONST                   YES, NOT INSTR
         CLC   0(2,R8),0(R7)           THIS ENTRY MATCHES TXT
         BE    GOTDBLI                 YES
         LA    R8,L'DBLOP(R8)          TO NEXT ENTRY
         B     DBLND                   LOOP THRU TBL
GOTDBLI  LA    R8,2(R8)                PASS OP-CODE BYTES
         MVC   INSTENT,0(R8)           SAVE INSTR TBL ENTRY
*
*
*
******************************************************************
*                                                                *
* THIS ROUTINE IS ENTERED WHEN CURSORY CHECKS IN THE MAINLINE    *
* INDICATE THIS TEXT BYTE IS AN INSTRUCTION OP-CODE. FURTHER     *
* TESTING IS DONE BY THE IVERFY (NON-FLOATING POINT), OR FPVERFY *
* (FLOATING POINT) ROUTINES. BYTES PASSING THESE TESTS ARE       *
* ACCEPTED AS OP-CODES, AND ARE PASSED TO THE APPROPRIATE FORMAT *
* ROUTINES. FORMAT ROUTINES ARE ENTERED VIA A BRANCH TABLE USING *
* A BYTE IN THE INSTRUCTION OP-CODE TABLE ENTRY.                 *
*                                                                *
******************************************************************
*
INSTR    EQU   *                       *** INSTRUCTIONS (POSSIBLY) ***
         MVC   ILENG+1(1),INLNG        SET INSTR LENGTH
         LH    R12,ILENG               PICK UP LENGTH
         AR    R12,R7                  ADDR OF NEXT OP CODE
         SR    R15,R15                 CLEAR WORK
         IC    R15,0(R12)              PICK UP NEXT OP-CODE
         MH    R15,SGOPLEN             TIMES TBL ENTRY LENG
         LA    R15,SGLOP(R15)          INSTR TBL ENTRY ADDR
         CLI   INAME-INSTENT(R15),0    IS IT AN OP-CODE
         BNE   ICKSEC                  YES
         CLI   0(R7),X'45'             IS IT BAL
         BE    ICKTBL                  YES, CONTINUE
         CLI   0(R7),7                 NO, IS IT BRCH
         BE    POSSB                   YES
         CLI   0(R7),X'47'             IS IT BRCH
         BNE   CONST                   NO, THEN THIS NOT INSTR
POSSB    TM    1(R7),X'F0'             IS IT UNCONDL BRCH
         BNO   CONST                   NO, THEN THIS NOT INSTR
         B     ICKTBL                  ACCEPT UNCOND BRCHS
ICKSEC   SR    R1,R1                   CLEAR WORK
         IC    R1,INLNG-INSTENT(R15)   GET INSTR LENGTH
         AR    R1,R12                  ADDR OF NEXT OP CODE
         SR    R14,R14                 CLEAR WORK
         IC    R14,0(R1)               PICK UP NEXT OP-CODE
         MH    R14,SGOPLEN             TIMES TBL ENTRY LENG
         LA    R14,SGLOP(R14)          INSTR TBL ENTRY ADDR
         CLI   INAME-INSTENT(R14),0    IS IT AN OP-CODE
         BNE   ICKTBL                  YES
         CLI   0(R12),X'45'            IS IT BAL
         BE    ICKTBL                  YES, CONTINUE
         CLI   0(R12),X'07'            NO, IS IT BRCH
         BE    POSSB2                  YES
         CLI   0(R12),X'47'            IS IT BRCH
         BNE   CONST                   NO, THEN THIS NOT INSTR
POSSB2   TM    1(R12),X'F0'            IS IT UNCONDL BRCH
         BNO   CONST                   NO, THEN THIS NOT INSTR
ICKTBL   LH    R12,ILENG               GET INSTR LENGTH
         AR    R12,R7                  @ NEXT TEXT LOC
         BCTR  R12,R0                  BACK UP 1
         S     R12,TXTSTRT             RELATIVIZE IN CSECT
         CLM   R12,7,LBLADR            LBL TBL ADDR HERE
         BL    NOILBL                  NO
         CLC   TXTOFSET,LBLADR         LABEL AT INSTR START
         BNE   NOTINST                 NO, MUST BE CONSTANT      FIX***
         CLI   LBLTYP,C'L'             IS IT A LABEL ONLY
         BNE   NOTINST                 NO                        FIX***
         CLI   CONPROG,1               CONSTANT IN PROGRESS
         BNE   CKLBLNG                 NO
         BAL   R9,FORCONST             YES, FORCE IT OUT
CKLBLNG  CLC   LBLLEN,INLNG            LENGTHS SAME
         BE    SETLBL                  YES
         CLI   LBLLEN,0                DON'T CARE LENGTH
         BE    SETLBL                  YES
         BAL   R9,EQUSTMT              NO, BUILD EQU STATEMENT
         B     ISTPLBL                 CONTINUE
SETLBL   MVC   NAME,LBLNAME            LABEL ENTRY NAME TO INSTR
         MVC   CONLEN,LBLLEN           SET CONSTANT LENGTH IN CASE
ISTPLBL  LA    R6,L'LABEL(R6)          TO NEXT LABEL TBL ENTRY
         CLM   R6,7,LBLADR             THIS ENTRY SAME ADDR
         BNE   ICKTBL                  NO
         SH    R6,LBLLGTH              BACK UP TO 1ST ENTRY
         BAL   R9,EQUSTMT              GO BUILD EQU STATEMENT
         LA    R6,L'LABEL(R6)          TO NEXT ENTRY
         B     ICKTBL                  GO CHECK NEXT LABEL
NOILBL   CLI   CONPROG,1               CONSTANT IN PROGRESS
         BNE   MVMNE                   NO
         BAL   R9,FORCONST             YES, FORCE IT OUT
MVMNE    MVC   MNEMONIC,0(R8)          SET INSTR MNEMONIC
         MVC   OFFSET,TXTOFSET         SET OFFSET
         MVC   INSTYP,5(R8)            SET INSTR TYPE
         MVI   TYPE,X'0D'              SHOW IT IS AN INSTRUCTION
         MVC   LEN,ILENG+1             SHOW LENGTH
         MVC   TEXT(6),0(R7)           MOVE ACTUAL TEXT
OPNDFMT  TM    ICLASS,FLTPT            FLOATING POINT OP-CODE
         BO    FPVERFY                 YES, GO VERIFY
         CLI   IEDT,0                  ANY EDIT REQUIRED
         BE    PFMFMT                  NO
         B     IVERFY                  YES, GO EDIT
PFMFMT   SR    R1,R1                   CLEAR WORK
         IC    R1,INSTYP               GET INSTRUCTION TYPE
         L     R9,OPND9                GET FORMAT ROUTINE RETURN ADDR
         B     *+4(R1)                 TO APPROPRIATE FORMATTING ROUTIN
         B     RROPND                  TYPE=0, RR
         B     RXOPND                  TYPE=4, RX
         B     SOPND                   TYPE=8, S
         B     SIOPND                  TYPE=C, SI
         B     RSOPND                  TYPE=10, RS
         B     SS1OPND                 TYPE=14, 1-LENGTH SS
         B     SS2OPND                 TYPE=18, 2-LENGTH SS
         B     SOPND                   TYPE=1C, 2-BYTE OP-CODES
         B     BCOPND                  TYPE=20, CONDITIONAL BRANCH
         B     SVCOPND                 TYPE=24, SVC
OPNDRTN  B     INSTOUT                 NORMAL OPERAND FORMAT RETURN
         MVC   CONNAME,NAME            ANY NAME TO CONSTANT AREA
         B     CONST                   ERROR INSTRUCTION, TREAT AS CONS
NOTINST  CLC   NAME,BLANX              IS NAME FILLED IN?        FIX***
         BE    CONST                                             FIX***
         SH    R6,LBLLGTH              BACK UP                   FIX***
         B     CONST                                             FIX***
INSTOUT  BAL   R9,WRTOUT               WRITE INSTRUCTION RECORD
         BAL   R9,TXTFMT               FORMAT HEX DATA
         BAL   R9,PRINT                GO PRINT IT
         AH    R7,ILENG                STEP TO NEXT TEXT BYTE
         ST    R7,TXTCURR              SAVE NEXT ADDR
         MVC   CCTYPE,ICCSET           SHOW COND CODE SET TYPE
         B     GETCURR                 CONTINUE TXT PROCESSING
*
*
*
******************************************************************
*                                                                *
* THIS ROUTINE IS ENTERED FROM THE INSTR ROUTINE FOR NON FLOATING*
* POINT INSTRUCTIONS. VARIOUS EDITS ARE PERFORMED TO INSURE THE  *
* INPUT TEXT BYTE IS AN OP-CODE. IF IT IS, RETURN IS TO LABEL    *
* PFMFMT, OTHERWISE THE CONST ROUTINE IS PERFORMED.              *
*                                                                *
******************************************************************
*
IVERFY   EQU   *                       *** VERIFY POSSIBLE INSTRUCTION
         TM    IEDT,EPR                EVEN-ODD REG PAIR
         BZ    IVE2                    NO
         TM    1(R7),X'10'             R1 IS ODD
         BO    CONST                   YES, NOT INSTR
         CLI   0(R7),X'0E'             IS IT MVCL
         BE    IVTRG2                  YES
         CLI   0(R7),X'0F'             IS IT CLCL
         BNE   IVE2                    NO
IVTRG2   TM    1(R7),X'01'             R2 IS ODD
         BO    CONST                   YES, NOT INSTR
         SR    R1,R1                   CLEAR WORK
         SR    R2,R2                   CLEAR WORK
         IC    R1,1(R7)                GET R1R2
         SRL   R1,4                    SHIFT OUT R2
         PACK  DBLWD(1),1(1,R7)        FLIP R1R2 BYTE
         IC    R2,DBLWD                PICK UP R2R1
         SRL   R2,4                    SHIFT OUT R1
         CR    R1,R2                   R1=R2
         BE    CONST                   YES, NOT INSTR
         B     PFMFMT                  NO, GOOD INSTR
IVE2     TM    IEDT,E2                 HALFWORD STORAGE ALIGNMENT
         BZ    IVE4                    NO
         TM    3(R7),X'01'             DISPL IS ODD
         BZ    IVES2                   NO, O.K.
         TM    2(R7),X'F0'             BASE REG = 0
         BNZ   IVES2                   NO, CONTINUE
         CLI   0(R7),X'44'             EX OP CODE
         BE    CONST                   YES, NOT INSTR
         CLI   0(R7),X'47'             BC OP CODE
         BE    CONST                   YES, NOT INSTR
         CLI   ITYPE,RS                RS INSTRUCTION
         BE    CONST                   YES, NOT INSTR
         TM    1(R7),X'0F'             INDEX REG IS 0
         BZ    CONST                   YES, NOT INSTR
         B     IVES2                   CONTINUE
IVE4     TM    IEDT,E4                 2ND OPND ON FULLWORD BOUND
         BZ    IVE8                    NO
         TM    3(R7),X'03'             DISPL DIV BY 4
         BZ    IVES2                   YES, O.K.
         TM    2(R7),X'F0'             BASE REG = 0
         BNZ   IVES2                   NO, CONTINUE
         CLI   ITYPE,RS                RS INSTRUCTION OP CODE
         BE    CONST                   YES, NOT INSTR
         TM    1(R7),X'0F'             INDEX REG = 0
         BZ    CONST                   YES, NOT INSTR
         B     IVES2                   NO, CONTINUE
IVE8     TM    IEDT,E8                 2ND OPND ON DBLWD BOUND
         BZ    IVES2                   NO
         TM    3(R7),X'07'             DISPL DIV BY 8
         BZ    IVES2                   YES, O.K.
         TM    2(R7),X'F0'             BASE REG = 0
         BNZ   IVES2                   NO
         TM    1(R7),X'0F'             INDEX REG = 0
         BZ    CONST                   YES, NOT INSTR
IVES2    CLI   PRIVASM,1               PRIVILEGED INSTR O.K.
         BE    PFMFMT                  YES
         TM    IEDT,S2                 OPND2 MUST HAVE BASE
         BZ    IVES1                   NO
         TM    2(R7),X'F0'             BASE REG = 0
         BNZ   PFMFMT                  NO, O.K.
         CLI   ITYPE,RS                RS INSTRUCTION
         BE    CONST                   YES, NOT INSTR
         CLI   0(R7),X'92'             IS IT MVI OP CODE
         BE    CONST                   YES, NOT INSTR
         TM    1(R7),X'0F'             INDEX REG = 0
         BZ    CONST                   YES, NOT INSTR
         B     PFMFMT                  NO, GOOD INSTR
IVES1    TM    IEDT,S1                 1ST OPND MUST HAVE BASE
         BZ    PFMFMT                  NO, CONTINUE
         TM    2(R7),X'F0'             1ST OPND HAS BASE
         BZ    CONST                   NO, NOT INSTR
         B     PFMFMT                  YES, INSTR O.K.
*
*
*
******************************************************************
*                                                                *
* THIS ROUTINE IS ENTERED FROM THE INSTR ROUTINE FOR FLOATING    *
* POINT INSTRUCTIONS. VARIOUS EDITS ARE PERFORMED TO INSURE THE  *
* INPUT TEXT BYTE IS AN OP-CODE. IF IT IS, RETURN IS TO LABEL    *
* PFMFMT, OTHERWISE THE CONST ROUTINE IS PERFORMED.              *
*                                                                *
******************************************************************
*
FPVERFY  EQU   *                       *** VALIDATE FLOATING POINT OP-C
         TM    1(R7),X'90'             R1 IS 0, 2, 4, OR 6
         BNZ   CONST                   NO, NOT INSTR
         CLI   0(R7),X'27'             MXDR OP-CODE
         BE    FPR1EXT                 YES
         CLI   0(R7),X'67'             MXD OP-CODE
         BNE   FPCKTYP                 NO
FPR1EXT  TM    1(R7),X'B0'             R1 IS 0 OR 4
         BNZ   CONST                   NO, NOT INSTR
FPCKTYP  CLI   ITYPE,RR                RR TYPE INSTRUCTION
         BNE   FPRXVER                 NO
         TM    1(R7),X'09'             R2 IS 0, 2, 4, 6
         BNZ   CONST                   NO, NOT INSTR
         CLI   0(R7),X'25'             LRDR OP CODE
         BE    FPR2EXT                 YES
         CLI   0(R7),X'37'             SXR OP-CODE
         BE    FPR2EXT                 YES
         CLI   0(R7),X'26'             MXR OP-CODE
         BE    FPR2EXT                 YES
         CLI   0(R7),X'36'             AXR OP-CODE
         BNE   PFMFMT                  NO, GOOD INSTR
FPR2EXT  TM    1(R7),X'0B'             R2 IS 0 OR 4
         BZ    PFMFMT                  YES, GOOD INSTR
         B     CONST                   NO, NOT INSTR
FPRXVER  CLI   PRIVASM,1               PRIVILEGED INSTRUCTIONS O.K.
         BE    FPALIGN                 YES
         TM    2(R7),X'F0'             ANT BASE REG
         BNZ   FPALIGN                 YES
         TM    1(R7),X'0F'             ANY INDEX REG
         BZ    CONST                   NO, NOT INSTR
FPALIGN  TM    2(R7),X'F0'             ANY BASE REG
         BNZ   PFMFMT                  YES, ACCEPT INSTR
         TM    1(R7),X'0F'             ANY INDEX REG
         BNZ   PFMFMT                  YES, ACCEPT INSTR
         TM    3(R7),X'03'             DISPL DIV BY 4
         BNZ   CONST                   NO, NOT INSTR
         TM    ICLASS,FLSHT            SHORT PRECISION
         BO    PFMFMT                  YES, ACCEPT INSTRUCTION
         TM    3(R7),X'07'             DISPL DIV BY 8
         BZ    PFMFMT                  YES, ACCEPT INSTR
         B     CONST                   NO, NOT INSTR
*
*
*
******************************************************************
*                                                                *
* THIS ROUTINE IS ENTERED FROM VARIOUS OTHER ROUTINES WHEN THE   *
* CURRENT TEXT BYTE IS DETERMINED NOT TO BE AN INSTRUCTION OP    *
* CODE. A CONSTANT AREA IS BUILT TO CONTAIN THE CONSTANT, IT'S   *
* DATA TYPE, SYMBOL TO BE USED FOR ADCONS, LABEL TO BE USED, IF  *
* ANY, ETC. THE CONSTANT IS BUILT BYTE BY BYTE, AND IS TERMINATED*
* FOR OUTPUT BY THE FORCONST ROUTINE. THIS ROUTINE DETECTS END OF*
* CONSTANT WHEN THE CONSTANT IN PROGRESS EXCEEDS 2 BYTES FOR A   *
* HALFWORD, 4 BYTES FOR A FULLWORD, OR 8 BYTES AS A MAXIMUM. IT  *
* IS ALSO TERMINATED WHEN A CHANGE IN DATA TYPE OCCURS.          *
*                                                                *
******************************************************************
*
CONST    EQU   *                       *** PROCESS CONSTANTS ***
         MVC   WORKREC,BLANX           CLEAR WORK RECORD AREA
         CLI   CONPROG,1               CONSTANT IN PROGRESS
         BNE   CCNEW                   NO
         CLC   TXTOFSET,LBLADR         LABEL ENTRY HAS THIS OFFSET
         BNE   CGETYP                  NO
CSTNEW   BAL   R9,FORCONST             FORCE IT OUT
         B     CCNEW                   GO START A NEW ONE
CGETYP   TRT   0(1,R7),CHARTRAN        CHECK DATA TYPE OF BYTE
         BNZ   CHEX                    IT'S HEX
         MVI   CCKTYP+1,C'C'           SET TYPE IN COMPARE
         B     CCKTYP                  GO COMPARE
CHEX     MVI   CCKTYP+1,C'X'           SET TYPE IN COMPARE
CCKTYP   CLI   CONTYPE,C' '            TYPE IN PROG SAME AS THIS BYTE
         BNE   CSTNEW                  NO
CUPDCON  LH    R11,CONLEN              GET CURRENT LENGTH
         LA    R11,1(R11)              ADD 1
         STH   R11,CONLEN              UPDATE LENGTH
         L     R11,CONLOC              GET CURRENT LOC IN CONST DATA
         MVC   0(1,R11),0(R7)          MOVE BYTE TO DATA
         LA    R11,1(R11)              STEP OVER ONE BYTE
         ST    R11,CONLOC              SAVE UPDATED DATA ADDR
         CLI   CONTYPE,C'C'            CHARACTER CONSTANT
         BE    CCK8                    YES
         TM    CONOFST+3,1             OFFSET IS ODD
         BO    CCFIN1                  YES
         TM    CONOFST+3,2             HALFWORD OFFSET
         BZ    CCFWD                   NO
         CLI   CONLEN+1,1              HALFWORD, IS LENGTH = 1
         BE    CCXIT1                  YES
         B     CCFIN1                  NO
CCFWD    CLI   CONLEN+1,4              NO, IS HEX CONST 4 BYTES
         BL    CCXIT1                  NOT YET
CCFIN1   BAL   R9,FORCONST             MAX LENG, FORCE IT OUT
         B     CCXIT1                  FINISH
CCK8     CLC   CONLEN,H8               CHAR CONSTANT 8 BYTES
         BNL   CCFIN1                  YES
CCXIT1   LA    R7,1(R7)                STEP OVER 1 BYTE IN TEXT
         ST    R7,TXTCURR              UPDATE TEXT ADDR
         B     GETCURR                 CONTINUE TEXT PROCESSING
CCNEW    MVI   CONPROG,1               SHOW CONSTANT IN PROGRESS
         MVC   CONOFST,TXTOFST         SET OFFSET TO 1ST BYTE
         MVC   CONNAME,BLANX           CLEAR NAME
         XC    CONDATA,CONDATA         CLEAR DATA AREA
         MVC   CONSYM,BLANX            CLEAR SYMBOL NAME
         MVC   CONLEN,XZROS            CLEAR LENGTH
         LA    R11,CONDATA             GET 1ST DATA BYTE ADDR
         ST    R11,CONLOC              SET STARTING ADDRESS OF DATA
         CLC   TXTOFSET,LBLADR         LABEL AT THIS OFFSET
         BE    CLBLD                   YES
TRTYPE   TRT   0(1,R7),CHARTRAN        CHECK DATA TYPE OF BYTE
         BNZ   CCSHX                   IT'S HEX
         MVI   CONTYPE,C'C'            IT'S CHAR, SO INDICATE
         B     CUPDCON                 GO COMPLETE
CCSHX    MVI   CONTYPE,C'X'            IT'S HEX, SO INDICATE
         B     CUPDCON                 GO COMPLETE
CLBLD    CLI   LBLTYP,C'L'             IS IT A LABEL ONLY
         BNE   CDATACON                NO
         MVC   CONNAME,LBLNAME         NAME TO CONSTANT WORK AREA
         MVC   CONLLEN,LBLLEN         SAVE LENGTH
         LA    R6,L'LABEL(R6)          TO NEXT LABEL ENTRY
         CLC   TXTOFSET,LBLADR         THIS LABEL AT SAME ADDR
         BNE   TRTYPE                  NO
         CLI   LBLTYP,C'L'             THIS ANOTHER LABEL ONLY
         BNE   CDATACON                NO
         SH    R6,LBLLGTH             BACK UP TO LABEL ENTRY
         BAL   R9,EQUSTMT             GO BUILD EQU STATEMENT
         LA    R6,L'LABEL(R6)          TO NEXT LABELENTRY
         B     CCNEW                   GO TO NEXT LABEL
CDATACON MVC   CONTYPE,LBLTYP          TYPE TO CONSTANT AREA
         SR    R1,R1                   CLEAR WORK
         IC    R1,LBLLEN               PICK UP CONSTNT LENGTH
         STH   R1,CONLEN               SAVE CONSTANT LENGTH
         BCTR  R1,R0                   COMPUTE CONSTANT LENGTH CODE
         STC   R1,MCD+1                SET MOVE LENGTH CODE
MCD      MVC   CONDATA,0(R7)           MOVE DATA TO RECORD
         MVC   CONSYM,LBLNAME          SYMBOL TO CONSTANT AREA
         SR    R11,R11                 CLEAR WORK REG
         IC    R11,LBLLEN              PICK UP LENGTH
         AR    R7,R11                  STEP PAST TEXT
         ST    R7,TXTCURR              UPDATE TEXT ADDRESS
         BAL   R9,FORCONST             FORCE CONSTANT OUT
         LA    R6,L'LABEL(R6)          STEP TO NEXT LABEL ENTRY
         B     GETCURR                 CONTINUE TEXT PROCESS
*
*
*
******************************************************************
*                                                                *
* THIS ROUTINE IS ENTERED BY VARIOUS ROUTINES WHEN IT IS         *
* NECESSARY TO WRITE THE CONSTANT CURRENTLY IN PROGRESS, AND     *
* CLEAR FIELDS FOR THE NEXT CONSTANT TO BE CREATED.              *
*                                                                *
******************************************************************
*
FORCONST EQU   *                       *** FORCE OUT CONSTANT IN PROGRE
         ST    R9,FC9                  SAVE RETURN ADDR
         CLC   CONNAME,BLANX           ANY LABEL NAME SET UP
         BE    CKCNPRG                 NO, CONTINUE
         CLC   CONLLEN,CONLEN+1        LENGTHS SAME
         BE    CKCNPRG                 YES, CONTINUE
         ST    R6,FC6                  SAVE LABEL TABLE ADDR
         LA    R6,CONPSLBL             @ PSEUDO LABEL ENTRY
         BAL   R9,EQUSTMT              GO BUILD EQU STATEMENT
         MVC   CONNAME,BLANX           CLEAR STATEMENT LABEL FIELD
         L     R6,FC6                  RESTORE LABEL TABLE POINTER
CKCNPRG  CLI   CONPROG,1               CONSTANT IN PROGRESS
         BNE   FCCLR                   NO
         CLI   CONLEN+1,0              ANY DATA LENGTH
         BE    FCCLR                   NO
         XC    TEXT,TEXT               CLEAR TEXT FIELD
         MVC   MNEMONIC(2),=C'DC'      SET MNEMONIC
         MVC   OPNDS(1),CONTYPE        SET TYPE
         MVI   OPNDS+1,C''''           OPERAND DELIMITER
         MVC   NAME,CONNAME            NAME TO RECORD
         MVC   OFFSET,CONOFST+1        OFFSET TO RECORD
         MVI   INSTYP,0                NOT AN INSTRUCTION
         MVI   TYPE,2                  NON-ADDRESS CONSTANT
         MVC   LEN,CONLEN+1            DATA LENGTH
         LH    R11,CONLEN              DATA LENGTH
         BCTR  R11,R0                  DATA LENGTH CODE
         STC   R11,FMCON+1             MOVE LENGTH TO MVC
FMCON    MVC   TEXT,CONDATA            DATA TO RECORD
         CLI   CONTYPE,C'C'            CHARACTER TYPE
         BE    FCHAR                   YES
         CLI   CONTYPE,C'X'            HEX TYPE
         BNE   FSYMBOL                 NO
         TM    CONOFST+3,1             OFFSET TO CONSTANT IS ODD
         BO    FHEX                    YES
         TM    CONLEN+1,1              LENGTH IS ODD
         BO    FHEX                    YES
         TM    CONOFST+3,2             OFFSET DIVISIBLE BY 4
         BO    FHWD                    NO
         CLI   CONLEN+1,4              IS IT 4-BYTES
         BNE   FHWD                    NO, JUST HALFWORD
         CLC   CONDATA(4),XZROS        CONSTANT IS ALL ZEROS
         BNE   FFCKNEG                 NO
         MVC   OPNDS(4),=C'F''0'''     BUILD OPERANDS
         B     FCWRT                   CONTINUE
FFCKNEG  ICM   R11,15,CONDATA          GET DATA
         BM    FHEX                    NEG, TREAT AS HEX
         C     R11,=F'99999'           VALUE EXCEEDS 99,999
         BH    FHEX                    YES, TREAT AS HEX
         MVC   OPNDS(2),=C'F'''        OPERAND DATA TYPE IS F
         CVD   R11,DBLWD               CONVERT VALUE TO PACKED
         UNPK  OPNDS+2(5),DBLWD+5(3)   UNPACK INTO OPERAND
         OI    OPNDS+6,C'0'            SET SIGN = F
         MVI   OPNDS+7,C''''           ENDING QUOTE
         B     FCWRT                   CONTINUE
FHWD     LH    R11,CONDATA             PICK UP HALFWORD
         LTR   R11,R11                 TEST CONSTANT VALUE
         BM    FHEX                    NEGATIVE, TREAT AS HEX
         BNZ   FHCMAX                  NOT ZERO, CHECK MAX VALUE
         MVC   OPNDS(4),=C'H''0'''     SET OPERAND FOR ZERO
         B     FCWRT                   CONTINUE
FHCMAX   CH    R11,=H'9999'            VALUE EXCEEDS 9,999
         BH    FHEX                    YES, TREAT AS HEX
         CVD   R11,DBLWD               CONVERT TO PACKED
         OI    DBLWD+7,X'0F'           CLEAR SIGN TO F
         MVC   OPNDS(2),=C'H'''        SET DELIMITER IN OPERAND
         UNPK  OPNDS+2(4),DBLWD+5(3)   UNPACK VALUE TO OPERAND
         MVI   OPNDS+6,C''''           ENDING DELIMITER
         B     FCWRT                   CONTINUE
FCHAR    MVC   OPNDS(2),=C'C'''        OPERAND DELIMITER FOR CHARACTER
         LH    R11,CONLEN              GET DATA LENGTH
         BCTR  R11,R0                  LENGTH CODE
         STC   R11,FMCNT+1             SET MOVE LENGTH
FMCNT    MVC   OPNDS+2,CONDATA         DATA TO OPERAND
         LA    R11,OPNDS+3(R11)        STEP PAST OPERAND DATA
         MVI   0(R11),C''''            ENDING QUOTE
         B     FCWRT                   CONTINUE
FSYMBOL  CLC   CONSYM,BLANX            IS IT BLANK
         BE    FHEX                    YES, TREAT AS HEX
         CLI   CONLEN+1,4              LENGTH IS 4
         BH    FHEX                    NO, GREATER
         BE    AC4                     YES, 4 BYTES
         CLI   CONLEN+1,3              LENGTH IS 3
         BE    AC3                     YES
         CLI   CONLEN+1,2              LENGTH IS 2
         BE    AC2                     YES
         MVC   OPNDS+1(2),=C'L1'       OPND LENGTH
         B     FSLHE1                  CONTINUE
AC2      MVC   OPNDS+1(2),=C'L2'       OPND LGTH
         B     FSLHE1                  CONTINUE
AC3      MVC   OPNDS+1(2),=C'L3'       OPND LENGTH
         B     FSLHE1                  CONTINUE
AC4      LA    R11,OPNDS+1             STEP TO ( POS
         B     FSLHE                   CONTINUE
FSLHE1   LA    R11,OPNDS+3             STEP TO ( POS
FSLHE    MVI   0(R11),C'('             DELIMITER
         MVC   1(8,R11),CONSYM         SYMBOL TO RECORD
         LA    R11,9(R11)              @ RHE SYMBOL IN OPERAND
FRHE     CLI   0(R11),C' '             CHARACTER IS BLANK
         BNE   SETRPAR                 NO
         BCT   R11,FRHE                LOOP TO FIND RHE
SETRPAR  MVI   1(R11),C')'             SET CLOSING PAREN
         B     FCWRT                   CONTINUE
FHEX     MVC   OPNDS(2),=C'X'''        TYPE AND BEGIN QUOTE
         LA    R12,CONDATA             @ CONSTANT DATA
         BAL   R9,HEXPRT4              CONVERT TO PRINTABLE
         LH    R12,CONLEN              GET DATA LENGTH
         SLL   R12,1                   DOUBLE IT
         BCTR  R12,R0                  -1 = LENGTH CODE
         STC   R12,MVHX+1              SET MOVE LENGTH
MVHX     MVC   OPNDS+2(1),PRTABL       HEX CHARS TO OPERAND
         LA    R12,OPNDS+2(R12)        OPERAND END ADDRESS
         MVI   1(R12),C''''            ENDING QUOTE
         B     FCWRT                   CONTINUE
FCWRT    BAL   R9,WRTOUT               WRITE RECORD
         BAL   R9,TXTFMT               GO FORMAT HEX DATA
         BAL   R9,PRINT                GO PRINT IT
FCCLR    MVI   CONPROG,0               RESET CONSTANT IN PROGRESS
         MVC   CONNAME,BLANX           CLEAR NAME
         MVI   CONTYPE,0               RESET TYPE
         XC    CONDATA,CONDATA         CLEAR CONSTANT DATA
         MVC   CONSYM,BLANX            CLEAR SYMBOL
         XC    CONLEN,CONLEN           CLEAR LENGTH
         MVC   CONLOC,XZROS            CLEAR LOCATION
         MVC   CONOFST,XZROS           CLEAR OFFSET TO CONSTANT
         L     R9,FC9                  GET RETURN ADDR
         BR    R9                      EXIT
*
*
*
******************************************************************
*                                                                *
* THIS ROUTINE FORMATS RR-FORMAT INSTRUCTIONS FOR OUTPUT.        *
*                                                                *
******************************************************************
*
RROPND   EQU   *                       *** RR FORMAT INSTRUCTIONS ***
         CLI   0(R7),X'05'             IS IT BALR
         BNE   RRSTRT
         CLI   1(R7),X'EF'             IS IT BALR 14,15
         BE    RRSTDL                  YES
         TM    1(R7),X'0F'             NO, IS R2 = 0
         BNZ   RRNSTD                  NO
         MVC   COMMENT(11),=C'ADDRESS SET'
         B     RRSTRT                  CONTINUE
RRSTDL   MVC   COMMENT(11),=C'STD LINKAGE'
         B     RRSTRT                  CONTINUE
RRNSTD   MVC   COMMENT(14),=C'NONSTD LINKAGE'
RRSTRT   SR    R1,R1                   CLEAR WORK
         IC    R1,TEXT+1               GET 2ND BYTE
         SRL   R1,4                    SHIFT OUT R2
         CVD   R1,DBLWD                CONVERT
         OI    DBLWD+7,X'0F'           CLEAR SIGN
         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK
         MVI   OPNDS,C'R'              BEGIN R1 OPERAND
         CH    R1,H10                  REG NBR > 9
         BL    RR11                    NO, 0-9
         MVC   OPNDS+1(2),DBLWD        YES, 10-15
         LA    R1,OPNDS+3              TO NEXT POS
         B     RRCMA                   CONTINUE
RR11     MVC   OPNDS+1(1),DBLWD+1      MOVE REG NBR
         LA    R1,OPNDS+2              TO NEXT POS
RRCMA    CLI   TEXT,X'04'              IS IT SPM
         BNE   RRCMA1                  NO
         TM    1(R7),X'0F'             YES, IS R2 FIELD = 0
         BZ    RRXIT                   YES, GOOD INSTR
         B     4(R9)                   ERROR RETURN (NOT INSTR)
RRCMA1   MVC   0(2,R1),=C',R'          DELIMITERS
         PACK  DBLWD(1),TEXT+1(1)      FLIP 2ND BYTE
         SR    R15,R15                 CLEAR WORK
         IC    R15,DBLWD               GET R2R1
         SRL   R15,4                   SHIFT OUT R1
         CVD   R15,DBLWD               CONVERT
         OI    DBLWD+7,X'0F'           CLEAR SIGN
         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK
         CH    R15,H10                 R2 > 9
         BL    RR21                    NO, 0-9
         MVC   2(2,R1),DBLWD           YES, MOVE REG 10-15
         BR    R9                      EXIT
RR21     MVC   2(1,R1),DBLWD+1         MOVE REG 0-9
RRXIT    BR    R9                      EXIT
*
*
*
******************************************************************
*                                                                *
* THIS ROUTINE IS CALLED BY THE INSTR ROUTINE TO FORMAT RX-TYPE  *
* INSTRUCTIONS. THE BDXADR ROUTINE IS CALLED TO FORMAT THE       *
* STORAGE OPERAND.                                               *
*                                                                *
******************************************************************
*
RXOPND   EQU   *                       *** RX FORMAT INSTRUCTIONS ***
         CLI   0(R7),X'45'             IS IT BAL OP CODE
         BNE   RXSTRT                  NO
         MVC   COMMENT(7),=C'PERFORM'
         TM    1(R7),X'E0'             R1 = 0 OR 1
         BNZ   RXSTRT                  NO
         MVC   COMMENT(13),=C'PARM SET BRCH'
RXSTRT   SR    R1,R1                   CLEAR WORK
         IC    R1,TEXT+1               GET R1X2
         SRL   R1,4                    SHIFT OUT X2
         CVD   R1,DBLWD                CONVERT
         OI    DBLWD+7,X'0F'           CLEAR SIGN
         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK
         MVI   OPNDS,C'R'              BEGIN 1ST OPERAND
         CH    R1,H10                  R1 < 10
         BL    RXR11                   YES, 0-9
         MVC   OPNDS+1(2),DBLWD        NO, MOVE REG 10-15
         LA    R15,OPNDS+3             TO NEXT POS
         B     RXCMA                   CONTINUE
RXR11    MVC   OPNDS+1(1),DBLWD+1      MOVE REG 0-9
         LA    R15,OPNDS+2             TO NEXT POS
RXCMA    MVI   0(R15),C','             DELIMITER
         PACK  DBLWD(1),TEXT+1(1)      FLIP 2ND BYTE
         SR    R10,R10                 CLEAR WORK
         IC    R10,DBLWD               PICK UP X2R1
         SRL   R10,4                   SHIFT OUT R1
         SR    R11,R11                 CLEAR WORK
         ICM   R11,3,TEXT+2            GET BDDD
         BAL   R9,BDXADR               CONVERT RX ADDRESS
         STC   R10,BDXMVC+1            SET MOVE LENGTH
BDXMVC   MVC   1(1,R15),OPNDWK         MOVE RX OPERAND
         L     R9,OPND9                GET RETURN ADDR
         BR    R9                      EXIT
*
*
*
******************************************************************
*                                                                *
* THIS ROUTINE IS CALLED BY THE INSTR ROUTINE TO FORMAT S-TYPE   *
* INSTRUCTIONS. THE BDADR ROUTINE IS CALLED TO FORMAT THE        *
* STORAGE OPERAND.                                               *
*                                                                *
******************************************************************
*
SOPND    EQU   *                       *** S FORMAT INSTRUCTIONS ***
         CLI   1(R7),0                 BYTE 2 OF INSTR IS ZERO
         BE    SCK2                    YES
         CLI   0(R7),X'80'             NO, IS IT SSM
         BE    4(R9)                   YES, NOT INSTR
         CLI   0(R7),X'82'             NO, IS IT LPSW
         BE    4(R9)                   YES, NOT INSTR
         CLI   0(R7),X'93'             NO, IS IT TS
         BE    4(R9)                   YES, NOT INSTR
SCK2     CLI   0(R7),X'B2'             OP-CODE IS B2
         BNE   SSTRT                   NO
         CLC   2(2,R7),XZROS           3RD AND 4TH BYTES ZERO
         BE    SSTRT                   YES
         CLI   1(R7),X'0B'             IPK INSTRUCTION
         BE    4(R9)                   YES, NOT INSTR
         CLI   1(R7),X'0D'             PTLB INSTR
         BE    4(R9)                   YES, NOT INSTR
SSTRT    SR    R11,R11                 CLEAR WORK
         ICM   R11,3,TEXT+2            GET BDDD
         BAL   R9,BDADR                CONVERT BDDD ADDRESS
         STC   R10,SOPMVC+1            SET MOVE LENGTH
SOPMVC   MVC   OPNDS,OPNDWK            MOVE OPERAND
         L     R9,OPND9                GET RETURN ADDR
         BR    R9                      EXIT
*
*
*
******************************************************************
*                                                                *
* THIS ROUTINE IS CALLED BY THE INSTR ROUTINE TO FORMAT SI-TYPE  *
* INSTRUCTIONS. THE BDADR ROUTINE IS CALLED TO FORMAT THE        *
* STORAGE OPERAND.                                               *
*                                                                *
******************************************************************
*
SIOPND   EQU   *                       *** SI FORMAT INSTRUCTIONS ***
         SR    R11,R11                 CLEAR WORK
         ICM   R11,3,TEXT+2            GET BDDD ADDRESS
         BAL   R9,BDADR                CONVERT ADDRESS
         STC   R10,SIOMVC+1            SET MOVE LENGTH
SIOMVC   MVC   OPNDS,OPNDWK            MOVE BDDD OPERAND
         LA    R15,OPNDS+1(R10)        TO NEXT POS
         MVI   0(R15),C','             DELIMITER
         TRT   TEXT+1(1),CHARTRAN      TEST IF CHARACTER
         BNZ   HEXIMM                  NO, HEX
         CLI   TEXT,X'95'              IS IT CLI
         BE    CHIMM                   YES
         CLI   TEXT,X'92'              IS IT MVI
         BNE   HEXIMM                  NO
CHIMM    MVC   1(2,R15),=C'C'''        DELIMITER
         MVC   3(1,R15),TEXT+1         CHARACTER TO OPERAND
         MVI   4(R15),C''''            ENDING DELIMITER
         L     R9,OPND9                GET RETURN ADDR
         BR    R9                      EXIT
HEXIMM   MVC   1(2,R15),=C'X'''        DELIMITER FOR HEX
         LA    R12,TEXT+1              @ HEX BYTE
         BAL   R9,HEXPRT1              CONVERT
         MVC   3(2,R15),PRTABL         PRINTABLE HEX TO OPERAND
         MVI   5(R15),C''''            FINAL QUOTE
         L     R9,OPND9                GET RETURN ADDR
         BR    R9                      EXIT
*
*
*
******************************************************************
*                                                                *
* THIS ROUTINE IS CALLED BY THE INSTR ROUTINE TO FORMAT RS-TYPE  *
* INSTRUCTIONS. THE BDADR ROUTINE IS CALLED TO FORMAT THE        *
* STORAGE OPERAND.                                               *
*                                                                *
******************************************************************
*
RSOPND   EQU   *                       *** RS FORMAT INSTRUCTIONS ***
         CLI   TEXT,X'90'              IS IT STM
         BE    RSSTM                   YES
         CLI   TEXT,X'98'              IS IT LM
         BNE   RSCLR1                  NO
         MVC   COMMENT(12),=C'RESTORE REGS'
         B     RSCLR1                  CONTINUE
RSSTM    MVC   COMMENT(9),=C'SAVE REGS'
RSCLR1   SR    R1,R1                   CLEAR WORK
         IC    R1,TEXT+1               PICK UP R1R3
         SRL   R1,4                    SHIFT OUT R3
         CVD   R1,DBLWD                CONVERT
         OI    DBLWD+7,X'0F'           CLEAR SIGN
         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK
         MVI   OPNDS,C'R'              BEGINNING OPERAND 1
         CH    R1,H10                  REG NBR < 10
         BL    RSR11                   YES
         MVC   OPNDS+1(2),DBLWD        MOVE REG 10-15
         LA    R15,OPNDS+3             TO NEXT POS
         B     RSCMA                   CONTINUE
RSR11    MVC   OPNDS+1(1),DBLWD+1      MOVE REG 0-9
         LA    R15,OPNDS+2             TO NEXT POS
RSCMA    CLI   0(R7),X'88'             IS IT SHIFT INSTR
         BL    RSCMA1                  NO
         CLI   0(R7),X'8F'             IS IT SHIFT INSTR
         BH    RSCMA1                  NO
         TM    1(R7),X'0F'             SHIFT, IS R3 POS = 0
         BZ    RSBDD                   YES, GOOD SHIFT
         B     4(R9)                   NO, NOT INSTR
RSCMA1   MVC   0(2,R15),=C',R'         DELIMITERS
         CLI   0(R7),X'BD'             CLM, STCM, OR ICM
         BL    RSPK2                   NO
         CLI   0(R7),X'BF'             CLM,STCM, OR ICM
         BH    RSPK2                   NO
         BCTR  R15,R0                  CLM, STCM, ICM HAVE MASK IN R3 P
RSPK2    PACK  DBLWD(1),TEXT+1(1)      FLIP 2ND BYTE
         SR    R1,R1                   CLEAR WORK
         IC    R1,DBLWD                GET R3R1
         SRL   R1,4                    SHIFT OUT R1
         CVD   R1,DBLWD                CONVERT
         OI    DBLWD+7,X'0F'           CLEAR SIGN
         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK
         CH    R1,H10                  REG NBR < 10
         BL    RSR31                   YES, 0-9
         MVC   2(2,R15),DBLWD          MOVE REG 10-15
         LA    R15,4(R15)              TO NEXT POS
         B     RSBDD                   CONTINUE
RSR31    MVC   2(1,R15),DBLWD+1        MOVE REG 0-9
         LA    R15,3(R15)              TO NEXT POS
RSBDD    MVI   0(R15),C','             DELIMITER
         SR    R11,R11                 CLEAR WORK
         ICM   R11,3,TEXT+2            GET BDD ADDRESS
         BAL   R9,BDADR                CONVERT BDDD ADDRESS
         STC   R10,RSMVC+1             SET MOVE LENGTH
RSMVC    MVC   1(1,R15),OPNDWK         MOVE BDDD ADDRESS
         L     R9,OPND9                GET RETURN ADDR
         BR    R9                      EXIT
*
*
*
******************************************************************
*                                                                *
* THIS ROUTINE IS CALLED BY THE INSTR ROUTINE TO FORMAT SS-TYPE  *
* INSTRUCTIONS OF THE SINGLE LENGTH VARIETY. THE BDLADR ROUTINE  *
* IS CALLED TO FORMAT THE 1ST STRG OPND, AND BDADR FOR THE 2ND.  *
*                                                                *
******************************************************************
*
SS1OPND  EQU   *                       *** SS FORMAT INSTRUCTIONS - SIN
         SR    R10,R10                 CLEAR WORK
         IC    R10,TEXT+1              GET LENGTH CODE
         SR    R11,R11                 CLEAR WORK
         ICM   R11,3,TEXT+2            GET BDDD ADDRESS
         BAL   R9,BDLADR               CONVERT ADDRESS
         STC   R10,SS1MV1+1            SET MOVE LENGTH
SS1MV1   MVC   OPNDS,OPNDWK            MOVE ADDRESS
         LA    R15,OPNDS+1(R10)        TO NEXT POS
         MVI   0(R15),C','             DELIMITER
         SR    R11,R11                 CLEAR WORK
         ICM   R11,3,TEXT+4            GET SECOND BDDD ADDRESS
         BAL   R9,BDADR                CONVERT ADDRESS
         STC   R10,SS1MV2+1            SET MOVE LENGTH
SS1MV2   MVC   1(1,R15),OPNDWK         MOVE 2ND OPERAND
         L     R9,OPND9                GET RETURN ADDR
         BR    R9                      EXIT
*
*
*
******************************************************************
*                                                                *
* THIS ROUTINE IS CALLED BY THE INSTR ROUTINE TO FORMAT SS-TYPE  *
* INSTRUCTIONS OF THE DOUBLE LENGTH VARIETY. THE BDLADR ROUTINE  *
* IS CALLED TO FORMAT THE STORAGE OPERANDS.                      *
*                                                                *
******************************************************************
*
SS2OPND  EQU   *                       *** SS FORMAT INSTRUCTIONS - 2 L
         SR    R10,R10                 CLEAR WORK
         IC    R10,TEXT+1              GET L1L2
         SRL   R10,4                   SHIFT OUT L2
         SR    R11,R11                 CLEAR WORK
         ICM   R11,3,TEXT+2            GET BDDD ADDRESS
         BAL   R9,BDLADR               CONVERT ADDRESS
         STC   R10,SS2MV1+1            SET MOVE LENGTH
SS2MV1   MVC   OPNDS,OPNDWK            MOVE 1ST OPERAND
         LA    R15,OPNDS+1(R10)        TO NEXT POS
         MVI   0(R15),C','             DELIMITER
         SR    R11,R11                 CLEAR WORK
         ICM   R11,3,TEXT+4            GET 2ND BDDD ADDR
         PACK  DBLWD(1),TEXT+1(1)      FLIP LENGTH BYTE
         SR    R10,R10                 CLEAR WORK
         IC    R10,DBLWD               PICK UP L2L1
         SRL   R10,4                   SHIFT OUT L1
         CLI   TEXT,X'F0'              SRP OP-CODE
         BE    SRPOP2                  YES
         BAL   R9,BDLADR               CONVERT ADDRESS
         STC   R10,SS2MV2+1            SET MOVE LENGTH
SS2MV2   MVC   1(1,R15),OPNDWK         MOVE 2ND OPERAND
SS2XIT   L     R9,OPND9                GET RETURN ADDR
         BR    R9                      EXIT
SRPOP2   BAL   R9,BDADR                GO BUILD OPERAND 2
         STC   R10,SRMV1+1             SET MOVE LENGTH
SRMV1    MVC   1(1,R15),OPNDWK         MOVE OPERAND 2
         LA    R15,2(R10,R15)          TO NEXT OPERAND POS  FIX***
         PACK  DBLWD(1),TEXT+1(1)      FLIP LENGTH BYTE
         SR    R10,R10                 CLEAR WORK
         IC    R10,DBLWD               PICK UP I3L1
         SRL   R10,4                   SHIFT OUT L1
         CVD   R10,DBLWD               CONVERT I3
         OI    DBLWD+7,X'0F'           CLEAR SIGN
         MVI   0(R15),C','             OPERAND SEPARATOR    FIX***
         UNPK  1(1,R15),DBLWD+7(1)     UNPACK I3 TO OPERAND FIX***
         CH    R2,H10                  I3 < 10
         BL    SS2XIT                  YES
         UNPK  1(2,R15),DBLWD+6(2)     NO, UNPACK MORE
         B     SS2XIT                  CONTINUE
*
*
*
******************************************************************
*                                                                *
* THIS ROUTINE IS CALLED BY THE INSTR ROUTINE TO FORMAT COND-    *
* ITIONAL BRANCH INSTRUCTIONS. AN ATTEMPT IS MADE TO USE THE     *
* EXTENDED MNEMONICS WHERE POSSIBLE. FOR RR-TYPE BRANCHES, ONLY  *
* THE BR AND NOPR MNEMONICS ARE USED. FOR RX-TYPE BRANCHES, THE  *
* FULL SET OF EXTENDED MNEMONICS IS USED. THE TYPES USED ARE     *
* ARITHMETIC, COMPARE, AND 8=ZERO TYPES. THE SET TO BE USED IS   *
* DETERMINED BY THE TYPE SAVED BY THE LAST CONDITION-CODE-SETTING*
* INSTRUCTION GENERATED.                                         *
*
******************************************************************
*
BCOPND   EQU   *                       *** CONDITIONAL BRANCH INSTRUCTI
         TM    TEXT+1,X'F0'            UNCONDITIONAL BRANCH
         BZ    NOPS                    NO, NOP
         BO    UNCNDS                  YES, UNCONDITIONAL
         SR    R11,R11                 CLEAR WORK
         IC    R11,TEXT+1              PICK UP M1X2
         SRL   R11,4                   SHIFT OUT ALL BUT M1
         CLI   TEXT,X'07'              BCR OP CODE
         BE    NOEXTND                 YES, NO EXTENDED MNEMONICS
         CLI   CCTYPE,0                LAST INSTR SET CC
         BE    NOEXTND                 NO
         TM    CCTYPE,ARITH            YES, WAS IT ARITHMETIC
         BO    EXTARITH                YES
         TM    CCTYPE,CPR              WAS IT COMPARE
         BO    EXTCPR                  YES
         TM    CCTYPE,ZRO8             IS IT VALID FOR 8 = BZ
         BO    EXTZRO                  YES
NOEXTND  CVD   R11,DBLWD               CONVERT
         OI    DBLWD+7,X'0F'           CLEAR SIGN
         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK
         CH    R11,H10                 MASK < 10
         BL    BCM1                    YES, SINGLE DIGIT MASK
         MVC   OPNDS(2),DBLWD          2-DIGIT MASK TO OPERAND
         LA    R15,OPNDS+2             TO NEXT POS
         B     BCCMA                   CONTINUE
BCM1     MVC   OPNDS(1),DBLWD+1        SINGLE DIGIT MASK TO OPERAND
         LA    R15,OPNDS+1             TO NEXT POS
BCCMA    MVI   0(R15),C','             DELIMITER
         CLI   TEXT,X'07'              RR BRANCH
         BE    BCROPND                 YES
BCXOPND  PACK  DBLWD(1),TEXT+1(1)      PACK 2ND BYTE
         SR    R10,R10                 CLEAR WORK
         IC    R10,DBLWD               PICK UP X2M1
         SRL   R10,4                   SHIFT OUT M1
         SR    R11,R11                 CLEAR WORK
         ICM   R11,3,TEXT+2            PICK UP BDDD ADDRESS
         BAL   R9,BDXADR               CONVERT ADDRESS
         STC   R10,BLDXMVC+1           SET MOVE LENGTH
BLDXMVC  MVC   1(1,R15),OPNDWK         MOVE OPERAND
         B     BCOXIT                  GO TO EXIT
BCROPND  MVI   1(R15),C'R'             REGISTER DELIMITER
         SR    R10,R10                 CLEAR WORK
         PACK  DBLWD(1),TEXT+1(1)      FLIP 2ND BYTE
         IC    R10,DBLWD               PICK UP R2M1
         SRL   R10,4                   SHIFT OUT M1
         CVD   R10,DBLWD               CONVERT
         OI    DBLWD+7,X'0F'           CLEAR SIGN
         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK
         CH    R10,H10                 REG NBR < 10
         BL    BCRR1                   YES, 0-9
         MVC   2(2,R15),DBLWD          MOVE 2-DIGIT REG NBR
         B     BCOXIT                  GO TO EXIT
BCRR1    MVC   2(1,R15),DBLWD+1        MOVE 1-DIGIT REG NBR
         B     BCOXIT                  GO TO EXIT
NOPS     CLI   TEXT,X'07'              RR NOP
         BNE   BCXNOP                  NO, RX
         MVC   MNEMONIC,=CL5'NOPR'     SET MNEMONIC
         LA    R15,OPNDS-1             TO OPND POS
         B     BCROPND                 FINISH
BCXNOP   MVC   MNEMONIC,=CL5'NOP'      SET MNEMONIC
         LA    R15,OPNDS               TO OPND POS
         B     BCXOPND                 FINISH
UNCNDS   CLI   TEXT,X'07'              IS IT RR BRANCH
         BNE   BCXBRCH                 NO, RX
         MVC   MNEMONIC,=CL5'BR'       SET MNEMONIC
         LA    R15,OPNDS-1             OPERAND ADDR
         CLI   TEXT+1,X'FE'            IS IT BR 14
         BNE   BCROPND                 NO
         MVC   COMMENT(4),=C'EXIT'     COMMENT
         B     BCROPND                 FINISH FORMATTING
BCXBRCH  MVC   MNEMONIC(5),=CL5'B'     SET MNEMONIC
BCXTFIN  LA    R15,OPNDS-1             SET OPND POS
         B     BCXOPND                 FINISH FORMAT
BCOXIT   L     R9,OPND9                GET RETURN ADDR
         BR    R9                      EXIT
EXTARITH CH    R11,H8                  COND CODE = 8
         BE    ARBZ                    YES
         BL    ARLOW                   NO, LOWER
         CH    R11,H14                 COND CODE = 14
         BE    ARBNO                   YES
         CH    R11,H13                 COND CODE = 13
         BE    ARBNP                   YES
         CH    R11,H11                 COND CODE = 11
         BE    ARBNM                   YES
         B     NOEXTND                 NO, NOT EXTENDED
ARLOW    CH    R11,H7                  COND CODE = 7
         BE    ARBNZ                   YES
         CH    R11,H1                  COND CODE = 1
         BE    ARBO                    YES
         CH    R11,H2                  COND CODE = 2
         BE    ARBP                    YES
         CH    R11,H4                  COND CODE = 4
         BE    ARBM                    YES
         B     NOEXTND                 NO, NOT EXTENDED
ARBZ     MVC   MNEMONIC(2),=C'BZ'      SET EXT MNEMONIC
         B     BCXTFIN                 CONTINUE
ARBNO    MVC   MNEMONIC(3),=C'BNO'     SET EXTENDED MNEMONIC
         B     BCXTFIN                 CONTINUE
ARBNP    MVC   MNEMONIC(3),=C'BNP'     SET EXT MNEMONIC
         B     BCXTFIN                 CONTINUE
ARBNM    MVC   MNEMONIC(3),=C'BNM'     SET EXT MNEMONIC
         B     BCXTFIN                 CONTINUE
ARBNZ    MVC   MNEMONIC(3),=C'BNZ'     SET EXT MNEMONIC
         B     BCXTFIN                 CONTINUE
ARBO     MVC   MNEMONIC(2),=C'BO'      SET EXT MNEMONIC
         B     BCXTFIN                 CONTINUE
ARBP     MVC   MNEMONIC(2),=C'BP'      SET EXT MNEMONIC
         B     BCXTFIN                 CONTINUE
ARBM     MVC   MNEMONIC(2),=C'BM'      SET EXT MNEMONIC
         B     BCXTFIN                 CONTINUE
EXTZRO   CH    R11,H8                  COND CODE = 8
         BE    ARBZ                    YES, USE BZ MNEMONIC
         CH    R11,H7                  COND CODE IS 7
         BE    ARBNZ                   YES
         B     NOEXTND                 NO, NOT EXTENDED
EXTCPR   CH    R11,H8                  COND CODE = 8
         BE    CPBE                    YES
         CH    R11,H7                  COND CODE = 7
         BE    CPBNE                   YES
         BL    CPLOW                   NO, LOWER
         CH    R11,H13                 COND CODE = 13
         BE    CPBNH                   YES
         CH    R11,H11                 COND CODE = 11
         BE    CPBNL                   YES
         B     NOEXTND                 NO, NOT EXTENDED
CPLOW    CH    R11,H4                  COND CODE = 4
         BE    CPBL                    YES
         CH    R11,H2                  COND CODE = 2
         BE    CPBH                    YES
         B     NOEXTND                 NO, NOT EXTENDED
CPBE     MVC   MNEMONIC(2),=C'BE'      SET EXT MNEMONIC
         B     BCXTFIN                 CONTINUE
CPBNE    MVC   MNEMONIC(3),=C'BNE'     SET EXT MNEMONIC
         B     BCXTFIN                 CONTINUE
CPBNH    MVC   MNEMONIC(3),=C'BNH'     SET EXT MNEMONIC
         B     BCXTFIN                 CONTINUE
CPBNL    MVC   MNEMONIC(3),=C'BNL'     SET EXT MNEMONIC
         B     BCXTFIN                 CONTINUE
CPBL     MVC   MNEMONIC(2),=C'BL'      SET EXT MNEMONIC
         B     BCXTFIN                 CONTINUE
CPBH     MVC   MNEMONIC(2),=C'BH'      SET EXTENDED MNEMONIC
         B     BCXTFIN                 CONTINUE
*
*
*
******************************************************************
*                                                                *
* VALIDATE AND FORMAT SVC INSTRUCTIONS. IF THE SVC OP-CODE IS    *
* FOUND IN THE SVC TABLE, IT IS ACCEPTED AS AN SVC, AND THE TABLE*
* LITERAL IS MOVED TO THE COMMENTS FIELD OF THE INSTRUCTION.     *
*                                                                *
******************************************************************
*
SVCOPND  EQU   *                       *** SVC INSTRUCTIONS ***
         CLI   TEXT+1,255              VALID OPERAND
         BH    NOTSVC                  NO, NOT SVC
         L     R1,SVCTBLAD             GET SVC TABLE ADDRESS
SVCKND   CLI   0(R1),X'FF'             END OF SVC TABLE
         BE    NOTSVC                  YES, MUST NOT BE SVC
         CLC   0(1,R1),TEXT+1          THIS THE ENTRY
         BE    GOTSVC                  YES
         LA    R1,L'SVCOP(R1)          STEP TO NEXT ENTRY
         B     SVCKND                  LOOP THRU TABLE
NOTSVC   B     4(R9)                   ERROR RETURN
GOTSVC   MVC   COMMENT(14),1(R1)       COMMENT TO WORK AREA
         SR    R1,R1                   CLEAR WORK
         IC    R1,TEXT+1               GET SVC OPERAND
         CVD   R1,DBLWD                CONVERT
         OI    DBLWD+7,X'0F'           CLEAR SIGN
         UNPK  DBLWD(3),DBLWD+6(2)     UNPACK
         CH    R1,H100                 OPERAND > 100
         BL    SVCK10                  YES
         MVC   OPNDS(3),DBLWD          MOVE 3-DIGIT OPERAND
         B     SVCXIT                  EXIT
SVCK10   CH    R1,H10                  OPERAND < 10
         BL    SVCL10                  YES
         MVC   OPNDS(2),DBLWD+1        MOVE 2-DIGIT OPERAND
         B     SVCXIT                  EXIT
SVCL10   MVC   OPNDS(1),DBLWD+2        MOVE 1-DIGIT OPERAND
SVCXIT   BR    R9                      EXIT
*
*
*
******************************************************************
* BUILD EQU STATEMENTS USING THE LABEL TABLE ENTRY ADDRESSED BY  *
* REG 6 ON ENTRY.                                                *
*                                                                *
******************************************************************
*                                                                *
EQUSTMT  EQU   *                       BUILD EQU STATEMENTS
         ST    R9,EQU9                 SAVE RETURN ADDR
         USING LABELD,R6
         MVC     NAME,LBLNAME          NAME TO EQU STMT
         MVC   MNEMONIC,=CL5'EQU'      BUILD EQU STATEMENT
         MVI   OPNDS,C'*'              SET EQU OPERAND
         CLI   LBLLEN,1                LENGTH 0 OR 1
         BNH   CCXEQU                  YES
         SR    R9,R9                   CLEAR WORK
         IC    R9,LBLLEN               GET LENGTH
         CVD   R9,DBLWD                CONVERT
         UNPK  DBLWD(3),DBLWD+6(2)     UNPACK
         OI    DBLWD+2,C'0'            CLEAR SIGN
         CH    R9,H100                 LENGTH < 100
         BL    CCXQ10                  YES
         MVC   OPNDS+2(3),DBLWD        MOVE LENGTH
         B     CCXEQC                  GO SET COMMA
CCXQ10   CH    R9,H10                  LENGTH < 10
         BL    CCXQ1                   YES
         MVC   OPNDS+2(2),DBLWD+1      MOVE 2-DIGIT LENGTH
         B     CCXEQC                  GO SET COMMA
CCXQ1    MVC   OPNDS+2(1),DBLWD+2      MOVE 1-DIGIT LENGTH
CCXEQC   MVI   OPNDS+1,C','            SET COMMA
CCXEQU   BAL   R9,WRTOUT               OUTPUT EQU STATEMENT
         BAL   R9,PRINT                GO PRINT IT
         L     R9,EQU9                 GET RETURN ADDR
         BR    R9                      RETURN
         DROP  R6
*
*
*
******************************************************************
*                                                                *
* BUILDS STORAGE OPERANDS CONTAINING BASE, DISPLACEMENT, AND     *
* LENGTH. ON ENTRY, REG 11 CONTAINS THE BDDD ADDRESS, AND REG 10 *
* CONTAINS THE LENGTH. THE SCHLBL ROUTINE IS CALLED TO CREATE A  *
* LABEL REFERENCE, IF THE BASE REG IS CURRENT, AND A LABEL EXISTS*
* IF SCHLBL IS UNSUCCESSFUL, AN EXPLICIT ADDRESS OF THE FORM     *
* DDDD(LLL,RRR) IS CREATED.                                      *
*                                                                *
******************************************************************
*
BDLADR   EQU   *                       *** FORMAT DDDD(LLL,RRR) OPERAND
         ST    R9,BDL9                 SAVE RETURN ADDR
         SR    R0,R0                   CLEAR WORK REG
         LR    R1,R11                  COPY BDDD ADDRESS
         SLDL  R0,20                   BASE REG TO R0
         LTR   R0,R0                   IS BASE REG 0
         BNZ   BDLSCHL                 NO
         SRL   R1,20                   RIGHT JUSTIFY DISPL
         CH    R1,H16                  REFERENCE TO CVT ADDR
         BE    BDLCVTR                 YES
         CH    R1,H76                  REF TO ALTERNATE CVT ADDR
         BE    BDLCVTR                 YES
         MVC   COMMENT(13),=C'PSA REFERENCE'
         B     BDLSCHL                 CONTINUE
BDLCVTR  MVC   COMMENT(11),=C'CVT ADDRESS'
BDLSCHL  BAL   R9,SCHLBL               SEARCH FOR LABEL
         B     BDLGLBL                 BRANCH IF LABEL FOUND
         LR    R1,R11                  COPY BDDD ADDRESS
         SLL   R1,20                   SHIFT OUT B
         SRL   R1,20                   RIGHT JUSTIFY DDD
         CVD   R1,DBLWD                CONVERT DDD
         OI    DBLWD+7,X'0F'           CLEAR SIGN
         UNPK  DBLWD(4),DBLWD+5(3)     UNPACK
         MVC   OPNDWK,BLANX            CLEAR WORK AREA
         CH    R1,H1000                DISPL < 1000
         BL    BDLD100                 YES
         MVC   OPNDWK(4),DBLWD         MOVE 4-DIGIT DISPL
         LA    R1,OPNDWK+4             TO NEXT POS
         B     BDLLPN                  CONTINUE
BDLD100  CH    R1,H100                 DISPL < 100
         BL    BDLD10                  YES
         MVC   OPNDWK(3),DBLWD+1       MOVE 3-DIGIT DISPL
         LA    R1,OPNDWK+3             TO NEXT POS
         B     BDLLPN                  CONTINUE
BDLD10   CH    R1,H10                  DISPL < 10
         BL    BDLD1                   YES
         MVC   OPNDWK(2),DBLWD+2       MOVE 2-DIGIT DISPL
         LA    R1,OPNDWK+2             TO NEXT POS
         B     BDLLPN                  CONTINUE
BDLD1    MVC   OPNDWK(1),DBLWD+3       MOVE 1-DIGIT DISPL
         LA    R1,OPNDWK+1             TO NEXT POS
BDLLPN   MVI   0(R1),C'('              LEFT PAREN DELIMITER
         LA    R10,1(R10)              COMPUTE ACTUAL LENGTH FROM LENG
         CVD   R10,DBLWD               CONVERT
         OI    DBLWD+7,X'0F'           CLEAR SIGN
         UNPK  DBLWD(3),DBLWD+6(2)     UNPACK
         CH    R10,H100                LENGTH < 100
         BL    BDLL10                  YES
         MVC   1(3,R1),DBLWD           MOVE 3-DIGIT LENGTH
         LA    R1,4(R1)                TO NEXT POS
         B     BDLCMA                  CONTINUE
BDLL10   CH    R10,H10                 LENGTH < 10
         BL    BDLL1                   YES
         MVC   1(2,R1),DBLWD+1         MOVE 2-DIGIT LENGTH
         LA    R1,3(R1)                TO NEXT POS
         B     BDLCMA                  CONTINUE
BDLL1    MVC   1(1,R1),DBLWD+2         MOVE 1-DIGIT LENGTH
         LA    R1,2(R1)                TO NEXT POS
BDLCMA   MVC   0(2,R1),=C',R'          DELIMITERS
         SRL   R11,12                  RT JUSTIFY BASE REG
         CVD   R11,DBLWD               CONVERT
         OI    DBLWD+7,X'0F'           CLEAR SIGN
         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK
         CH    R11,H10                 REG < 10
         BL    BDLR1                   YES
         MVC   2(2,R1),DBLWD           MOVE 2-DIGIT REGISTER
         LA    R1,4(R1)                TO NEXT POS
         B     BDLRPN                  CONTINUE
BDLR1    MVC   2(1,R1),DBLWD+1         MOVE 1-DIGIT REG
         CLI   2(R1),C'0'              IS REG = 0
         BNE   BDLB1                   NO
         MVC   0(2,R1),BLANX           YES, BLANK IT
***      BCTR  R1,R0                   BACK UP 1            FIX***
         B     BDLRPN                  CONTINUE
BDLB1    LA    R1,3(R1)                TO NEXT POS
BDLRPN   MVI   0(R1),C')'              FINAL DELIMITER
         LR    R10,R1                  COPY END ADDRESS
         S     R10,OWSTRT              COMPUTE OPERAND LENGTH CODE
         L     R9,BDL9                 GET RETURN ADDR
         BR    R9                      EXIT
         USING LABELD,R12
BDLGLBL  MVC   OPNDWK(8),LBLNAME       LABEL ENTRY NAME TO WORK
         LA    R10,1(R10)              COMPUTE ACTUAL LENGTH
         LA    R1,OPNDWK+7             @ LAST POSS CHARACTER
BDLGRHE  CLI   0(R1),C' '              AT RHE
         BNE   BDLGCKLN                YES
         BCT   R1,BDLGRHE              LOOP TO RHE
BDLGCKLN CLM   R10,1,LBLLEN            LBL AND INSTR LENGTHS SAME
         BE    BDLGCMP                 YES
         MVI   1(R1),C'('              NO, DELIMITER
         CVD   R10,DBLWD               CONVERT LENGTH
         UNPK  DBLWD(3),DBLWD+5(3)     UNPACK
         OI    DBLWD+2,C'0'            CLEAR SIGN
         CH    R10,H100                LENGTH < 100
         BL    BDLG10                  YES
         MVC   2(3,R1),DBLWD           MOVE 3-DIGIT LENGTH
         LA    R1,5(R1)                TO NEXT POS
         B     BDLGRPN                 CONTINUE
BDLG10   CH    R10,H10                 LENGTH < 10
         BL    BDLG1                   YES
         MVC   2(2,R1),DBLWD+1         MOVE 2-DIGIT LENGTH
         LA    R1,4(R1)                TO NEXT POS
         B     BDLGRPN                 CONTINUE
BDLG1    MVC   2(1,R1),DBLWD+2         MOVE 1-DIGIT LENGTH
         LA    R1,3(R1)                TO NEXT POS
BDLGRPN  MVI   0(R1),C')'              FINAL DELIMITER
BDLGCMP  LR    R10,R1                  COPY END ADDRESS
         S     R10,OWSTRT              COMPUTE LENGTH CODE
         L     R12,SLSAV+12            RESTORE R12
         L     R9,BDL9                 GET RETURN ADDR
         BR    R9                      EXIT
         DROP  R12
*
*
*
******************************************************************
*                                                                *
* BUILDS STORAGE OPERANDS CONTAINING BASE AND DISPLACEMENT.      *
* THE SCHLBL ROUTINE IS CALLED TO SEE WHETHER A LABEL REFERENCE  *
* MAY BE USED, RATHER THAN AN EXPLICIT ADDRESS. IF LBLSCH IS NOT *
* SUCCESSFUL, AN EXPLICIT ADDRESS OF THE FORM DDDD(RRR) IS FORMED*
* ON ENTRY, REG 11 CONTAINS THE BDDD ADDRESS.                    *
*                                                                *
******************************************************************
*
BDADR    EQU   *                       *** FORMAT DDDD(RRR) OPERANDS **
         ST    R9,BD9                  SAVE RETURN ADDR
         SR    R0,R0                   CLEAR WORK REG
         LR    R1,R11                  COPY BDDD ADDRESS
         SLDL  R0,20                   BASE REG TO R0
         LTR   R0,R0                   IS BASE REG 0
         BNZ   BDSCHL                  NO
         CLI   TEXT,X'8F'              IS IT SLDA??              FIX***
         BH    BDSADR1                 YES                       FIX***
         CLI   TEXT,X'88'              IS IT SRL                 FIX***
         BNL   BDSCHL                  YES                       FIX***
BDSADR1  SRL   R1,20                   RIGHT JUSTIFY DISPL       FIX***
         CH    R1,H16                  REFERENCE TO CVT ADDR
         BE    BDCVTR                  YES
         CH    R1,H76                  REF TO ALTERNATE CVT ADDR
         BE    BDCVTR                  YES
         MVC   COMMENT(13),=C'PSA REFERENCE'
         B     BDSCHL                  CONTINUE
BDCVTR   MVC   COMMENT(11),=C'CVT ADDRESS'
BDSCHL   BAL   R9,SCHLBL               GO SEARCH FOR LABEL
         B     BDGLBL                  BRANCH IF FOUND
         LR    R1,R11                  COPY BDDD ADDRESS
         SLL   R1,20                   SHIFT OUT B
         SRL   R1,20                   RIGHT JUSTIFY DDD
         CVD   R1,DBLWD                CONVERT DISPL
         OI    DBLWD+7,X'0F'           CLEAR SIGN
         UNPK  DBLWD(4),DBLWD+5(3)     UNPACK
         CH    R1,H1000                DISPL < 1000
         BL    BDAD100                 YES
         MVC   OPNDWK(4),DBLWD         MOVE 4-DIGIT DISPL
         LA    R1,OPNDWK+4             TO NEXT POS
         B     BDALPN                  CONTINUE
BDAD100  CH    R1,H100                 DISPL < 100
         BL    BDAD10                  YES
         MVC   OPNDWK(3),DBLWD+1       MOVE 3-DIGIT DISPL
         LA    R1,OPNDWK+3             TO NEXT POS
         B     BDALPN                  CONTINUE
BDAD10   CH    R1,H10                  DISPL < 10
         BL    BDAD1                   YES
         MVC   OPNDWK(2),DBLWD+2       MOVE 2-DIGIT DISPL
         LA    R1,OPNDWK+2             TO NEXT POS
         B     BDALPN                  CONTINUE
BDAD1    MVC   OPNDWK(1),DBLWD+3       MOVE 1-DIGIT DISPL
         LA    R1,OPNDWK+1             TO NEXT POS
BDALPN   MVC   0(2,R1),=C'(R'          DELIMITERS
         SRL   R11,12                  RT JUSTIFY BASE REG
         CVD   R11,DBLWD               CONVERT
         OI    DBLWD+7,X'0F'           CLEAR SIGN
         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK
         CH    R11,H10                 BASE REG < 10
         BL    BDAR1                   YES
         MVC   2(2,R1),DBLWD           MOVE 2-DIGIT BASE REG
         LA    R1,4(R1)                TO NEXT POS
         B     BDARPN                  CONTINUE
BDAR1    MVC   2(1,R1),DBLWD+1         MOVE 1-DIGIT BASE REG
         LA    R1,3(R1)                TO NEXT POS
BDARPN   MVI   0(R1),C')'              FINAL DELIMITER
         LR    R2,R1                   COPY END ADDRESS
         SH    R2,H4                   BACK UP 4
         CLC   1(4,R2),=C'(R0)'        BASE REG IS ZERO
         BNE   BDCE                    NO
         MVC   1(4,R2),BLANX           CLEAR BASE REG
         LR    R1,R2                   COPY NEW END ADDR
BDCE     LR    R10,R1                  COPY END ADDR
         S     R10,OWSTRT              COMPUTE LENGTH CODE
         L     R9,BD9                  GET RETURN ADDR
         BR    R9                      EXIT
         USING LABELD,R12
BDGLBL   MVC   OPNDWK(8),LBLNAME       LABEL ENTRY NAME TO WORK
         LA    R1,OPNDWK+7             @ LAST POSS CHARACTER
BDGRHE   CLI   0(R1),C' '              AT RHE
         BNE   BDGCMP                  YES
         BCT   R1,BDGRHE               LOOP TO RHE
BDGCMP   LR    R10,R1                  COPY END ADDRESS
         S     R10,OWSTRT              COMPUTE LENGTH CODE
         L     R12,SLSAV+12            RESTORE R12
         L     R9,BD9                  GET RETURN ADDR
         BR    R9                      EXIT
*
*
*
******************************************************************
*                                                                *
* BUILDS STORAGE OPERANDS CONTAINING BASE, DISPLACEMENT, AND     *
* INDEX. ON ENTRY, REG 11 CONTAINS THE BDDD ADDRESS, AND REG 10  *
* CONTAINS THE INDEX. THE SCHLBL ROUTINE IS CALLED TO CREATE A   *
* LABEL REFERENCE, IF THE BASE REG IS CURRENT, AND A LABEL EXISTS*
* IF SCHLBL IS UNSUCCESSFUL, AN EXPLICIT ADDRESS OF THE FORM     *
* DDDD(XXX,RRR) IS CREATED.                                      *
*                                                                *
******************************************************************
*
BDXADR   EQU   *                       *** FORMAT DDDD(XXX,BBB) OPERAND
         ST    R9,BDX9                 SAVE RETURN ADDR
         LTR   R10,R10                 ANY INDEX REG
         BNZ   BDXSCHL                 YES
         SR    R0,R0                   CLEAR WORK REG
         LR    R1,R11                  COPY BDDD ADDRESS
         SLDL  R0,20                   BASE REG TO R0
         LTR   R0,R0                   IS BASE REG 0
         BNZ   BDXSCHL                 NO
         CLI   TEXT,X'41'              IS IT LA
         BE    BDXSCHL                 YES
         SRL   R1,20                   RIGHT JUSTIFY DISPL
         CH    R1,H16                  REFERENCE TO CVT ADDR
         BE    BDXCVTR                 YES
         CH    R1,H76                  REF TO ALTERNATE CVT ADDR
         BE    BDXCVTR                 YES
         MVC   COMMENT(13),=C'PSA REFERENCE'
         B     BDXSCHL                 CONTINUE
BDXCVTR  MVC   COMMENT(11),=C'CVT ADDRESS'
BDXSCHL  BAL   R9,SCHLBL               GO SEARCH FOR LABEL
         B     BDXGLBL                 BRANCH IF FOUND
         LR    R1,R11                  COPY BDDD ADDRESS
         SLL   R1,20                   SHIFT OUT BASE REG
         SRL   R1,20                   RIGHT JUSTIFY DISPL
         SRL   R11,12                  RT JUSTIFY BASE REG
         CVD   R1,DBLWD                CONVERT
         OI    DBLWD+7,X'0F'           CLEAR SIGN
         UNPK  DBLWD(4),DBLWD+5(3)     UNPACK
         CH    R1,H1000                DISPL < 1000
         BL    BDXD100                 YES
         MVC   OPNDWK(4),DBLWD         MOVE 4-DIGIT DISPL
         LA    R1,OPNDWK+4             TO NEXT POS
         B     BDXLPN                  CONTINUE
BDXD100  CH    R1,H100                 DISPL < 100
         BL    BDXD10                  YES
         MVC   OPNDWK(3),DBLWD+1       MOVE 3-DIGIT DISPL
         LA    R1,OPNDWK+3             TO NEXT POS
         B     BDXLPN                  CONTINUE
BDXD10   CH    R1,H10                  DISPL < 10
         BL    BDXD1                   YES
         MVC   OPNDWK(2),DBLWD+2       MOVE 2-DIGIT DISPL
         LA    R1,OPNDWK+2             TO NEXT POS
         B     BDXLPN                  CONTINUE
BDXD1    MVC   OPNDWK(1),DBLWD+3       MOVE 1-DIGIT DISPL
         LA    R1,OPNDWK+1             TO NEXT POS
BDXLPN   LTR   R10,R10                 ANY INDEX REG
         BNZ   BDXLPNR                 YES
         LTR   R11,R11                 ANY BASE REG
         BNZ   PREPB                   YES
         BCTR  R1,R0                   NO, BACK UP TO RHE
         B     BDXCE                   CONTINUE
PREPB    MVC   0(3,R1),=C'(,R'         DELIMITERS
         LA    R1,1(R1)                STEP OVER 1 BYTE
         B     BDXCBAS                 CONTINUE
BDXLPNR  MVC   0(2,R1),=C'(R'          DELIMITERS
         CVD   R10,DBLWD               CONVERT INDEX REG
         OI    DBLWD+7,X'0F'           CLEAR SIGN
         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK
         CH    R10,H10                 INDEX REG < 10
         BL    BDXX1                   YES
         MVC   2(2,R1),DBLWD           MOVE 2-DIGIT INDEX REG
         LA    R1,4(R1)                TO NEXT POS
         B     BDXCMA                  CONTINUE
BDXX1    MVC   2(1,R1),DBLWD+1         MOVE 1-DIGIT INDEX REG
         LA    R1,3(R1)                TO NEXT POS
BDXCMA   LTR   R11,R11                 ANY BASE REG
         BZ    BDXRPN                  NO
         MVC   0(2,R1),=C',R'          DELIMITERS
BDXCBAS  CVD   R11,DBLWD               CONVERT
         OI    DBLWD+7,X'0F'           CLEAR SIGN
         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK
         CH    R11,H10                 BASE REG < 10
         BL    BDXB1                   YES
         MVC   2(2,R1),DBLWD           MOVE 2-DIGIT BASE REG
         LA    R1,4(R1)                TO NEXT POS
         B     BDXRPN                  CONTINUE
BDXB1    MVC   2(1,R1),DBLWD+1         MOVE 1-DIGIT BASE REG
         LA    R1,3(R1)                TO NEXT POS
BDXRPN   MVI   0(R1),C')'              FINAL DELIMITER
BDXCE    LR    R10,R1                  COPY END ADDR
         S     R10,OWSTRT              COMPUTE LENGTH CODE
         L     R9,BDX9                 GET RETURN ADDR
         BR    R9                      EXIT
         USING LABELD,R12
BDXGLBL  MVC   OPNDWK(8),LBLNAME       LABEL ENTRY NAME TO WORK
         LA    R1,OPNDWK+7             @ LAST POSS CHARACTER
BDXGRHE  CLI   0(R1),C' '              AT RHE
         BNE   BDXGCKLN                YES
         BCT   R1,BDXGRHE              LOOP TO RHE
BDXGCKLN LTR   R10,R10                 ANY INDEX REGISTER
         BZ    BDXGCMP                 NO
         MVI   1(R1),C'('              YES, DELIMITER
         CVD   R10,DBLWD               CONVERT LENGTH
         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK
         OI    DBLWD+1,C'0'            CLEAR SIGN
BDXG10   CH    R10,H10                 LENGTH < 10
         BL    BDXG1                   YES
         MVC   2(2,R1),DBLWD           MOVE 2-DIGIT LENGTH
         LA    R1,4(R1)                TO NEXT POS
         B     BDXGRPN                 CONTINUE
BDXG1    MVC   2(1,R1),DBLWD+1         MOVE 1-DIGIT LENGTH
         LA    R1,3(R1)                TO NEXT POS
BDXGRPN  MVI   0(R1),C')'              FINAL DELIMITER
BDXGCMP  LR    R10,R1                  COPY END ADDRESS
         S     R10,OWSTRT              COMPUTE LENGTH CODE
         L     R12,SLSAV+12            RESTORE R12
         L     R9,BDX9                 GET RETURN ADDR
         BR    R9                      EXIT
*
*
*
WRTOUT   EQU   *                       WRITE OUTPUT RECORDS
         L     R1,PUNCHDCB             @ SYSPUNCH DCB
         MVC   PRT(80),WORKREC         SAVE IN PRINT
         TM    48(R1),X'10'            IS FILE OPEN
         BZ    CLRWKR                  NO
         AP    CARDNO,=P'10'           INCREMENT CARD NO
         UNPK  SEQNBR,CARDNO           UNPACK INTO CARD
         OI    SEQNBR+7,C'0'           CLEAR SIGN
         PUT   (1),WORKREC             WRITE SOURCE CARD
CLRWKR   MVC   WORKREC,BLANX           CLEAR OUTPUT RECORD
         BR    R9                      RETURN
*
*
*
******************************************************************
*                                                                *
* SEARCHES THE BASE REGISTER TABLE TO FIND THE BASE REGISTER     *
* ASSOCIATED WITH THE BDDD OPERAND ADDRESS PASSED IN REG 11 ON   *
* ENTRY. IF THE BASE REGISTER GIVEN IS NOT A CURRENT BASE REG    *
* THE UNSUCCESSFUL RETURN IS MADE TO 4 BYTES PAST THE ADDRESS    *
* IN REG 9 ON ENTRY. WHEN THE CURRENT BASE REGISTER ENTRY IS FOR *
* A PROGRAM BASE REG, THE DISPLACEMENT IS ADDED TO THE ASSUMED   *
* BASE REGISTER VALUE IS ADDED TO THE DISPLACEMENT TO GIVE AN    *
* OFFSET IN THE PROGRAM. THE LABEL TABLE IS SEARCHED FOR AN ENTRY*
* WITH THIS OFFSET, AND IF FOUND, IS RETURNED TO THE CALLER. WHEN*
* THE BASE REGISTER FOUND IS FOR A DSECT, THE DSECT HEADER ENTRY *
* ADDRESS IS GIVEN IN THE BASE TABLE ENTRY. THE DSECT HEADER HAS *
* THE ADDRESS OF THE FIELD DEFINITION TABLE FOR THE DSECT. THE   *
* FIELD DEFINITION TABLE IS SEARCHED FOR AN ENTRY HAVING THE     *
* DISPLACEMENT IN THE BDDD INSTRUCTION, AND IF FOUND IS PASSED   *
* BACK TO THE CALLER. IF THE LABEL/FIELD TABLE SEARCHES ARE      *
* UNSUCCESSFUL, RETURN IS TO 4 BYTES PAST REG 9.                 *
*                                                                *
******************************************************************
*
SCHLBL   EQU   *                       *** SEARCH FOR LABEL AT BDDD ADD
         TM    MORUSG,X'80'            ANY BASES ACTIVE
         BZ    4(R9)                   NO, UNSUCCESSFUL EXIT
         STM   R9,R12,SLSAV            YES, SAVE REGS USED
         LR    R12,R11                 COPY BDDD ADDRESS
         SRL   R12,12                  CLEAR WORK REG
         LTR   R12,R12                 IS BASE REG ZERO
         BZ    SCHNF                   YES, NO LABEL
         MH    R12,USGLEN              BASE X BASE TBL ENTRY LENG
         LA    R12,BASES(R12)          @ BASE TBL ENTRY
         USING USINGD,R12
         CLI   USTYPE,0                ENTRY IN USE
         BE    SCHNF                   NO, EXIT
         LR    R9,R11                  COPY BDDD ADDRESS
         SLL   R9,20                   SHIFT OUT BASE
         SRL   R9,20                   RIGHT JUSTIFY DDD
         ICM   R11,7,USVALU            GET BASE REG VALUE
         LA    R11,0(R11)              CLEAR HI-ORDER
         CLI   USTYPE,C'P'             PROGRAM BASE REG
         BE    PGMBASE                 YES
         DROP  R12
         LR    R12,R11                 COPY DSECT FIELD TBL ADDRESS
         USING DSECTD,R12
CKDSCTND CLM   R9,7,DSOFSET            THIS THE ENTRY
         BE    SCHFD                   YES
         CLC   DSOFSET,HIVAL           NO, AT TABLE END
         BE    SCHNF                   YES, NO LABEL FOUND
         LA    R12,L'DSECT(R12)        STEP TO NEXT ENTRY
         B     CKDSCTND                LOOP THRU DSECT FIELDS
PGMBASE  AR    R9,R11                  COMPUTE OFFSET
         DROP  R12
         L     R12,LBLTBL              @ LABEL TABLE
         USING LABELD,R12
CKENTFD  CLM   R9,7,LBLADR             THIS THE ENTRY
         BE    SCHFD                   YES
         LA    R12,L'LABEL(R12)        TO NEXT ENTRY
         C     R12,CURRLBL             END OF TBL
         BNL   SCHNF                   YES, NO LABEL
         B     CKENTFD                 NO, CONTINUE SEARCH
SCHNF    LM    R9,R12,SLSAV            NOT FOUND, RESTORE REGS
         B     4(R9)                   NOT FOUND RETURN
SCHFD    LM    R9,R11,SLSAV            FOUND RESTORE ALL BUT 12
         BR    R9                      FOUND RETURN
         DROP  R12
*
*
*
******************************************************************
*                                                                *
* PRINT A LINE USING THE SYSPRINT DCB DEFINED IN DISASM PHASE 0. *
*                                                                *
******************************************************************
*
PRINT    EQU   *                       PRINT ROUTINE
         L     R1,PRINTDCB             @ SYSPRINT DCB
         TM    48(R1),X'10'            IS SYSPRINT OPEN
         BNO   CLRPRT                  NO
         PUT   (1),PRTLINE             WRITE PRINT LINE
CLRPRT   MVC   PRT,BLANX               CLEAR PRINT LINE
         AP    LINECT,P1               INCR LINE COUNTER
         CLI   PCC,C' '                SINGLE SPACED
         BE    SETSGL                  YES
         AP    LINECT,P1               INCR LINE COUNTER
         CLI   PCC,C'0'                DOUBLE SPACED
         BE    SETSGL                  YES
         AP    LINECT,P1               INCR LINE COUNTER
         CLI   PCC,C'-'                TRIPLE SPACED
         BE    SETSGL                  YES
         ZAP   LINECT,P0               NO, MUST BE NEW PAGE
SETSGL   MVI   PCC,C' '                SET SINGLE SPACING
         CP    LINECT,P58              PAST END OF PAGE
         BH    NEWPAGE                 YES
         BR    R9                      EXIT
NEWPAGE  MVI   PCC,C'1'                SET SKIP TO HOF
         ZAP   LINECT,P0               RESET LINE COUNTER
         BR    R9                      EXIT
*
*
*
******************************************************************
*                                                                *
* CONVERT HEX DATA TO PRINTABLE FORM: 2 CHARACTERS PER BYTE. ON  *
* ENTRY, REG 12 CONTAINS THE ADDRESS OF THE LEFT END OF THE FIELD*
* TO BE CONVERTED, AND THE ENTRY POINT USED DETERMINES THE LENGTH*
* FORMATTED OUTPUT IS PLACED IN THE PRTABL FIELD.                *
*                                                                *
******************************************************************
*
HEXPRT   EQU   *                       HEX TO PRINTABLE ROUTINE
HEXPRT1  UNPK  PRTABL(3),0(2,R12)      UNPACK HEX
         B     HEXCLTR                 CONTINUE
HEXPRT2  UNPK  PRTABL(5),0(3,R12)      UNPACK HEX
         B     HEXCLTR                 CONTINUE
HEXPRT3  UNPK  PRTABL(7),0(4,R12)      UNPACK HEX
         B     HEXCLTR                 CONTINUE
HEXPRT4  UNPK  PRTABL(9),0(5,R12)      UNPACK HEX
HEXCLTR  MVZ   PRTABL(8),XZROS         CLEAR FOR TRANSLATE
         TR    PRTABL(8),TRTBL         MAKE PRINTABLE
         BR    R9                      EXIT
*
*
*
******************************************************************
*                                                                *
* FORMATS THE HEX DATA CORRESPONDING TO THE FORMATTED INSTRUCTION*
* BEING OUTPUT. PRINTABLE HEX IS PLACED AT THE RIGHT OF THE LINE *
* ON THE SYSPRINT OUTPUT.                                        *
*                                                                *
******************************************************************
*
TXTFMT   EQU   *                       *** FORMAT TEXT FOR PRINT ***
         ST    R9,TX9                  SAVE RETURN ADDR
         LA    R11,PRT                 @ PRINT LINE
         CLI   TYPE,1                  ADCON
         BE    TFOFST                  YES
         CLI   TYPE,2                  CONSTANT
         BE    TFOFST                  YES
         CLI   TYPE,X'0D'              INSTRUCTION
         BNE   TXTCLEAN                NO
TFOFST   LA    R12,OFFSET              @ OFFSET TO INSTR
         BAL   R9,HEXPRT3              CONVERT TO PRINTABLE
         MVC   PRT+80(6),PRTABL        OFFSET TO PRINT
         LA    R12,LEN                 @ DATA LENGTH
         BAL   R9,HEXPRT1              MAKE PRINTABLE
         MVC   PRT+88(2),PRTABL        LENGTH TO PRINT
         LA    R12,TEXT                @ TEXT TO PRINT
         BAL   R9,HEXPRT4              CONVERT 1ST 4 BYTES
         CLI   LEN,4                   IS IT 4 BYTES
         BNL   TXT4                    YES, OR MORE
         CLI   LEN,3                   IS IT 3 BYTES
         BE    TXT3                    YES
         CLI   LEN,2                   IS IT 2 BYTES
         BE    TXT2                    YES
         MVC   PRT+94(2),PRTABL        TEXT TO PRINT
         B     TXTCLEAN                FINISH
TXT2     MVC   PRT+94(4),PRTABL        TEXT TO PRINT
         B     TXTCLEAN                FINISH
TXT3     MVC   PRT+94(6),PRTABL        TEXT TO PRINT
         B     TXTCLEAN                FINISH
TXT4     MVC   PRT+94(8),PRTABL        TEXT TO PRINT
         CLI   LEN,4                   IS IT 4 BYTES
         BE    TXTCLEAN                YES, FINISH
         LA    R12,TEXT+4              @ TEXT
         BAL   R9,HEXPRT4              CONVERT
         CLI   LEN,8                   8 BYTES OF TEXT
         BE    TXT8                    YES
         CLI   LEN,7                   7 BYTES OF TEXT
         BE    TXT7                    YES
         CLI   LEN,6                   6 BYTES OF TEXT
         BE    TXT6                    YES
         MVC   PRT+98(2),PRTABL        TEXT TO PRINT
         B     TXTCLEAN                FINISH
TXT6     MVC   PRT+102(4),PRTABL       TEXT TO PRINT
         B     TXTCLEAN                FINISH
TXT7     MVC   PRT+102(6),PRTABL       TEXT TO PRINT
         B     TXTCLEAN                FINISH
TXT8     MVC   PRT+102(8),PRTABL       TEXT TO PRINT
TXTCLEAN XC    OFFSET,OFFSET           CLEAR
         L     R9,TX9                  GET RETURN ADDR
         BR    R9                      EXIT
*
*
*
******************************************************************
*                                                                *
* ENTERED WHENEVER THE CURRENT TEXT OFFSET IS PAST THE NEXCHG    *
* FIELD VALUE. THIS ROUTINE CREATES DROP CARDS FOR EXHAUSTED BASE*
* REGISTERS, AND USING STATEMENTS FOR NEW BASE REGISTERS. THE    *
* BASES TABLE IS SCANNED, AND ANY ENTRY WHICH IS NO LONGER IN USE*
* IS ZEROED OUT, AND A DROP RECORD IS CREATED. NEXT, THE USING   *
* TABLE IS SCANNED. WHEN AN ENTRY IS FOUND WHICH IS VALID AT THE *
* CURRENT OFFSET, THE BASE TABLE IS CHECKED. IF THE ENTRY IS NOT *
* IN USE, A USING STATEMENT IN CREATED, AND THE USING TABLE ENTRY*
* IS MOVED TO THE BASES TABLE. THE NEXCHG FIELD IS CHANGED TO    *
* CONTAIN THE OFFSET AT WHICH THE NEXT SCAN MUST BE MADE. AN IND-*
* ICATOR CALLED MORUSG IS SET TO SHOW WHEN ANY BASE REGISTERS ARE*
* CURRENTLY IN USE. WHEN NO MORE REGISTERS ARE AVAILABLE, THE    *
* NEXCHG FIELD IS SET TO HEX FF'S.                               *
*                                                                *
******************************************************************
*
NEXUSG   EQU   *                       *** GET NEXT BASE REG SET ***
         MVC   NEXCHG,HIVAL            RESET NEXT CHANGE ADDR
         MVI   MORUSG,0                CLEAR BASE REG AVAIL INDIC
         ST    R9,USG9                 SAVE RETURN ADDR
         XC    BASES(L'USING),BASES    CLEAR R0 ELEMENT
         MVC   BASES+16*L'USING(4),HIVAL SET TABLE STOPPER
         USING USINGD,R2
         LA    R2,BASES+L'USING        @ R1'S ELEMENT
DRPCKND  CLI   0(R2),X'FF'             END OF TABLE
         BE    USGUSG                  YES
         CLC   USEND,XZROS             ENTRY USED
         BE    DRPSTEP                 NO
         CLC   TXTOFSET,USEND          PAST END OF THIS ONE
         BL    DRPSTEP                 NO
         MVC   MNEMONIC(4),=C'DROP'    OPERATION IS DROP
         MVI   OPNDS,C'R'              DELIMITER FOR REGS
         SR    R12,R12                 CLEAR WORK
         IC    R12,USREG               GET REG
         CVD   R12,DBLWD               CONVERT TO PACKED
         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK
         OI    DBLWD+1,C'0'            CLEAR SIGN
         CH    R12,H10                 REG < 10
         BL    DPR1                    YES
         MVC   OPNDS+1(2),DBLWD        MOVE REG NBR
         B     WRTDROP                 GO WRITE DROP
DPR1     MVC   OPNDS+1(1),DBLWD+1      MOVE 1-DIGIT REG
WRTDROP  BAL   R9,WRTOUT               WRITE DROP RECORD
         BAL   R9,PRINT                PRINT DROP RECORD
         XC    USING,USING             CLEAR THE ENTRY
DRPSTEP  LA    R2,L'USING(R2)          TO NEXT BASE ELEMENT
         B     DRPCKND                 LOOP
USGUSG   L     R2,USGSTRT              GET FIRST USING TBL ADDR
ENDUS    CLI   0(R2),X'FF'             END OF TABLE
         BE    XITUS                   YES
         CLC   TXTOFSET,USEND          PAST END OF THIS ONE
         BNL   ECSTEP                  YES
         OI    MORUSG,1                SHOW MORE BASES AVAIL
USBGCK   CLC   TXTOFSET,USBGN          CURR LOC BEFORE THIS
         BNL   CKNEWLO                 NO
         CLC   USBGN,NEXCHG            BEGINS BEFORE NEXT CHANGE
         BNL   ECSTEP                  NO
         MVC   NEXCHG,USBGN            YES, SET LOWER CHANGE OFFSET
         B     ECSTEP                  CONTINUE
CKNEWLO  CLC   USEND,NEXCHG            THIS ENTRY ENDS EARLIER
         BNL   ECMVC                   NO
         MVC   NEXCHG,USEND            YES, SET NEW END
ECMVC    SR    R1,R1                   CLEAR WORK
         IC    R1,USREG                PICK UP REG
         MH    R1,USGLEN               TIMES ENTRY LENGTH
         LA    R1,BASES(R1)            @ BASE TABLE ENTRY
         OI    MORUSG,X'80'            SHOW BASE IN USE
         CLC   USING,0(R1)             OLD AND NEW IDENTICAL
         BE    ECSTEP                  YES
MAKUSG   MVC   0(L'USING,R1),USING     NEW USING TO TABLE
         MVC   MNEMONIC(5),=C'USING'   OPERATION IS USING
         CLI   USTYPE,C'D'             IS IT A DSECT
         BNE   CKUTPS                  NO
         ICM   R12,7,USVALU            YES, GET DSECT HEADER ADDR
         L     R11,DTBSTRT             @ 1ST DSECT HEADER ENTRY
DSCTEND  C     R11,DTBCURR             END OF TABLE
         BH    MVDSNAME                YES
         CLM   R12,7,8(11)             THIS THE HEADER ENTRY
         BNE   DSCTSTEP                NO
         LR    R12,R11                 YES, COPY IT'S ADDRESS
         B     MVDSNAME                CONTINUE
DSCTSTEP LA    R11,11(R11)             TO NEXT HEADER ENTRY
         B     DSCTEND                 LOOP THRU TABLE
MVDSNAME MVC   OPNDS(8),0(R12)         DSECT NAME TO OPERANDS
         LA    R12,OPNDS+7             TO END OF NAME
USFRHED  CLI   0(R12),C' '             FOUND RHE
         BNE   USFMADD                 YES
         BCT   R12,USFRHED             BACK UP 1 AND LOOP
USFMADD  LA    R12,1(R12)              TO NEXT BYTE
USFMCMA  MVC   0(2,R12),=C',R'         DELIMITERS
         SR    R11,R11                 CLEAR WORK
         IC    R11,USREG               GET REGISTER NBR
         CVD   R11,DBLWD               CONVERT TO PACKED
         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK REG NBR
         OI    DBLWD+1,C'0'            CLEAR SIGN
         CH    R11,H10                 REG < 10
         BL    USFMR1                  YES
         MVC   2(2,R12),DBLWD          MOVE 2-DIGIT REG NBR
         B     USINGOUT                GO WRITE USING
USFMR1   MVC   2(1,R12),DBLWD+1        MOVE 1-DIGIT REG NBR
USINGOUT BAL   R9,WRTOUT               WRITE USING STMT
         BAL   R9,PRINT                PRINT USING STMT
         B     ECSTEP                  CONTINUE
CKUTPS   CLC   USVALU,TXTOFSET         USING AT CURR LOC
         BNE   USFMLBL                 NO
         MVI   OPNDS,C'*'              SET CURRENT LOC SYMBOL IN OPERAN
         LA    R12,OPNDS+1             GET NEXT POS ADDR
         B     USFMCMA                 GO FORMAT REG
USFMLBL  MVI   OPNDS,C'A'              SET 1ST CHAR OF LABEL NAME
         LA    R12,USVALU              GET OFFSET
         BAL   R9,HEXPRT3              CONVERT TO PRINTABLE
         MVC   OPNDS+1(6),PRTABL       PRINTABLE HEX TO LABEL
         LA    R12,OPNDS+7             TO NEXT LOC
         B     USFMCMA                 FORMAT REG
ECSTEP   LA    R2,L'USING(R2)          TO NEXT USING ENTRY
         B     ENDUS                   CONTINUE SCAN
XITUS    L     R9,USG9                 GET RETURN ADDR
         BR    R9                      EXIT
*
*
*
******************************************************************
*                                                                *
* END OF PHASE 2 - RETURN TO PHASE 0                             *
*                                                                *
******************************************************************
*
EOJ      EQU   *                       END OF JOB
         BAL   R9,FORCONST             YES, FORCE IT OUT
         L     R13,4(R13)              GET POINTER TO CALLER'S SAVE ARE
         LM    R14,R12,12(R13)         RESTORE CALLER'S REGS
         SR    R15,R15                 CLEAR RETURN CODE
         BR    R14                     RETURN TO CALLER
*
*
*
*                 *** DATA AND WORK AREAS ***
******************************************************************
*                                                                *
*
* FOLLOWING FIELDS: COMMPARM THRU COMMEND ARE COMMON AREAS SHARED
* BY THIS, AND CALLED SUB-PROGRAMS. ALL CHANGES MUST BE COORDINTAED
* WITH ALL OTHER PROGRAMS.
*
******************************************************************
*
         DS    0D
COMMPARM DSECT ,                       COMMON AREAS
DBLWD    DS    D                       DOUBLEWORD WORK AREA
PUNCHDCB DS    F                       @ SYSPUNCH DCB
PRINTDCB DS    F                       @ SYSPRINT DCB
INDCB    DS    F                       @ SYSIN DCB
CSECT    DS    CL8                     SPECIFIED CSECT NAME
ESDID    DS    XL2                     ESD ID OF SPECIFIED CSECT
ENDLBLNM DS    CL8                     SYMBOL FOR END STMT BEGIN POINTE
LINECT   DS    PL2                     PRINT LINE COUNTER
START    DS    A                       LKED ASSIGNED START ADDR OF CSEC
END      DS    A                       CSECT END ADDRESS
LENGTH   DS    F                       LENGTH OF SPECIFIED CSECT
LBLTBL   DS    F                       @ LABEL TABLE
CURRLBL  DS    F                       CURRENT LABEL ENTRY ADDR
ENDLBL   DS    F                       @ END OF LABEL TBL
LBLLGTH  DS    AL2                     LENGTH OF LABEL ENTRY
TXTSTRT  DS    F                       @ TEXT STORAGE AREA
TXTEND   DS    F                       @ END OF TEXT AREA
TXTCURR  DS    F                       @ CURRENT TEXT LOC
DTBCURR  DS    F                       @ CURRENT DSECT TABLE ENTRY
DTBEND   DS    F                       @ DSECT TABLE END
DTBSTRT  DS    F                       @ DSECT TABLE START
USGSTRT  DS    F                       @ USING TABLE START
USGCUR   DS    F                       @ CURRENT USING TABLE ENTRY
USGEND   DS    F                       @ USING TABLE END
DATONLY  DS    F                       @ DATA ONLY TABLE
DATOCUR  DS    F                       @ CURRENT DATA ONLY ENTRY
DATEND   DS    F                       @ END OF DATA ONLY TABLE
FLPTASM  DS    XL1                     FLOATING POINT INDICATOR
PRIVASM  DS    XL1                     PRIVILEGED INDICATOR
USERR    DS    XL1                     ERROR INDIC FOR DISASM1
NBRLBLS  DS    H                       NBR LABELS FROM DISASM1
*
*
*
WORKREC  DS    0CL80                   DISASSEMBLY WORK AREA
NAME     DS    CL8                     NAME
         DS    CL1
MNEMONIC DS    CL5                     INSTRUCTION MNEMONIC
         DS    CL1
OPNDS    DS    CL27                    1ST OPERAND
         DS    CL1
COMMENT  DS    CL28                    COMMENT
COL72    DS    CL1                     CONTINUATION COLUMN
SEQNBR   DS    CL8                     CARD SEQUENCE NBR
*
*
*
CARDNO   DS    PL4                     CURRENT OUTPUT CARD NBR
PRTLINE  DS    0CL121                  PRINT LINE
PCC      DS    CL1                     CARRIAGE CONTROL
PRT      DS    CL120                   PRINT DATA
*
*
*
         DS    0F
BLDLIST  DS    0CL62                   BLDL LIST
         DC    H'1'                    ONE ENTRY
         DC    H'58'                   LENGTH OF ENTRY
MEMBER   DC    CL8' '                  MEMBER NAME
TTRMOD   DC    XL3'000000'             TTR OF MODULE
CCAT     DC    XL1'00'                 CONCATENATION NUMBER
         DC    XL1'00'
ALIASIND DC    XL1'00'                 ALIAS AND MISC INDICATOR
*                           80=ALIAS
TTR1TXT  DC    XL3'000000'             TTR OF 1ST TXT RECORD
         DC    XL1'00'
TTRNS    DC    XL3'000000'             TTR OF NOTE OR SCATTER LIST
NNOTE    DC    XL1'00'                 NBR ENTRIES IN NOTE LIST
ATTR1A   DC    XL1'00'                 MODULE ATTRIBUTES 1, BYTE 1
*                           80=RENT
*                           40=REUS
*                           20=OVERLAY
*                           10=UNDER TEST
*                           08=ONLY LOADABLE
*                           04=SCATTER FORMAT
*                           02=EXECUTABLE
*                           01=ONE TXT, NO RLD RECORDS
ATTR1B   DC    XL1'00'                 ATTRIBUTES 1, BYTE 2
*                           80=CANNOT BE REPROCESSED BY LKED E
*                           40=ORIGIN OF 1ST TXT RECORD IS ZERO
*                           20=ASSIGNED ENTRY POINT ADDR IS ZERO
*                           10=CONTAINS NO RLD RECORD
*                           08=CANNOT BE REPROCESSED BY LKED
*                           04=CONTAINS TESTRAN SYMBOLS
*                           02=CREATED BY LKED
*                           01=REFR
TOTVIRT  DC    XL3'000000'             TOTAL VIRTUAL STRG REQRD FOR MOD
LENG1    DC    XL2'0000'               LENGTH OF 1ST TEXT RECORD
LKEPA    DC    XL3'000000'             ASSIGNED ENTRY POINT ADDR
ATTR2    DC    XL1'00'                 ATTRIBUTES 2
*                           80=PROCESSED BY OS/VS LKED
*                           20=PAGE ALIGNMENT REQUIRED FOR MODULE
*                           10=SSI PRESENT
         DC    XL2'0000'
SCTRLEN  DC    XL2'0000'               SCATTER LIST LENGTH
TTLEN    DC    XL2'0000'               TRANSLATION TABLE LENGTH
SCESDID  DC    XL2'0000'               CESD NBR FOR 1ST TXT RECD
SCEPESD  DC    XL2'0000'               CESD NBR FOR ENTRY POINT
ALEPA    DC    XL3'000000'             ENTRY POINT OF THE MEMBER NAME
ALMEM    DC    CL8' '                  REAL MEMBER NAME FOR ALIAS
SSI      DS    XL4'00000000'           SSI BYTES
AUTHLEN  DC    XL1'00'                 AUTH CODE LENGTH
AUTHCOD  DC    XL1'00'                 AUTH CODE
*
*
*
COMMEND  EQU   *
*
*
*
LABELD   DSECT ,                       LABEL TABLE ENTRY
LABEL    DS    0CL13                   13-BYTE ENTRIES
LBLADR   DS    XL3                     RELATIVE ADDR IN TEXT
LBLTYP   DS    CL1                     TYPE: L=LABEL, A=ADCON, V=VCON,
LBLNAME  DS    CL8                     NAME (SYMBOL)
LBLLEN   DS    XL1                     LENGTH IF A, V, OR W
*
*
*
USINGD   DSECT ,                       USING TABLE ENTRY
USING    DS    0CL11
USBGN    DS    XL3                     OFFSET TO BEGINNING OF RANGE
USEND    DS    XL3                     OFFSET TO END OF RANGE
USREG    DS    XL1                     BASE REGISTER USED
USTYPE   DS    XL1                     TYPE:P=PGM,D=DSECT
USVALU   DS    XL3                     BASE REG VALUE
*
*
*
DSECTD   DSECT ,                       DSECT FIELD TABLE ENTRY
DSECT    DS    0CL13
DSOFSET  DS    XL3                     OFFSET TO 1ST BYTE OF FIELD
DSLBTYP  DS    CL1                     LABEL TYPE = L
DSNAME   DS    CL8                     FIELD NAME
DSLENG   DS    XL1                     FIELD LENGTH
*
*
*
DISASM2  CSECT
*
*
*
*
*
*
SVCTBLAD DC    A(SVCOP)                @ SVC TABLE
DBLOPAD  DC    A(DBLOP)                @ TWO-BYTE OP-CODE TBL
OWSTRT   DC    A(OPNDWK)               @ OPERAND WORK AREA
OPND9    DC    A(OPNDRTN)              RETURN ADDR FOR OPERAND ROUTINES
USG12    DS    2F                      REG SAVE AREA
USG9     DS    F                       RETURN SAVE
EQU9     DS    F                       RETURN ADDR FOR EQUSTMT
FC6      DS    F                       SAVE AREA FOR R6
FC9      DS    F                       FORCONST RETURN ADDR
TX9      DS    F                       RETURN ADDR FOR TXTFMT
BD9      DS    F                       RETURN FOR BDADR
BDX9     DS    F                       RETURN FOR BDXADR
BDL9     DS    F                       RETURN FOR BDLADR
SLSAV    DS    4F                      SAVE FOR SCHLBL
SGOPLEN DC AL2(L'SGLOP) SINGLE BYTE OP COD TBL LEN                   */
ILENG    DC    H'0'                    INSTRUCTION LENGTH  FIX***
CONPROG  DC    X'00'                   CONSTANT IN PROGRESS INDIC
CONPSLBL DS    0CL13                   PSEUDO LABEL ENTRY FOR CONSTANTS
         DS    XL4
CONNAME  DS    CL8                     CONSTANT NAME
CONLLEN  DS    XL1                     LABEL LENGTH
CONTYPE  DS    CL1                     TYPE
         DS    0H
CONDATA  DS    XL8                     CONSTANT DATA
CONSYM   DS    CL8                     CONSTANT SYMBOL
CONLEN   DS    H                       CONSTANT LENGTH
CONOFST  DS    F                       RELATIVE OFFSET TO CONSTANT
CONLOC   DS    F                       @ CURRENT BYTE IN CONSTANT
CCTYPE   DC    X'00'                   CC SET TYPE OF INSTR SETTING
TXTOFST  DS    0F
         DS    X
TXTOFSET DS    XL3                     OFFSET TO TEXT BYTE
OPNDWK   DS    CL13                    OPERAND BUILD AREA
OFFSET   DS    XL3                     OFFSET FROM PGM START
INSTYP   DS    CL1                     INSTRUCTION TYPE
TYPE     DS    XL1                     TYPE CODE
*                                       0=CSECT, 1=ADCON, 2=CONST
*                                       E=USING, D=INSTRUCTION
*                                       C=COMMENT, 9=ENTRY
*                                       A=EQU
LEN      DS    XL1                     TEXT LENGTH
TEXT     DS    XL8                     TEXT
H1       DC    H'1'                    CONSTANT 1
H2       DC    H'2'                    CONSTANT 2
H4       DC    H'4'                    CONSTANT 4
H7       DC    H'7'                    CONSTANT 7
H8       DC    H'8'                    CONSTANT 8
H10      DC    H'10'                   CONSTANT 10
H11      DC    H'11'                   CONSTANT 11
H13      DC    H'13'                   CONSTANT 13
H14      DC    H'14'                   CONSTANT 14
H16      DC    H'16'                   CONSTANT 16
H76      DC    H'76'                   CONSTANT 76
H100     DC    H'100'                  CONSTANT 100
H1000    DC    H'1000'                 CONSTANT 1000
P0       DC    P'0'                    CONSTANT 0
P1       DC    P'1'                    CONSTANT 1
P58      DC    P'58'                   CONSTANT 58
BLANX    DC    CL121' '                CONSTANT BLANKS
XZROS    DC    16X'00'                 CONSTANT ZEROS
HIVAL    DC    4X'FF'                  CONSTANT X F'S
NEXCHG   DC    XL3'00'                 OFFSET TO NEXT BASE REG CHG
USGLEN DC AL2(L'USING) LENGTH OF USING TBL ENTRIES
MORUSG   DC    X'00'                   0=NO MORE BASES, 80=MORE BASES A
TRTBL    DC    C'0123456789ABCDEF'     TRANSLATE TBL
PRTABL   DS    CL9                     PRINTABLE HEX WORK
BASES    DC    XL256'00'               BASE REG TABLE
CHARTRAN DC    256X'FF'                TRT TABLE FOR CHAR/HEX DETERMINA
         ORG   CHARTRAN+C' '
         DC    X'00'                   BLANK IS CHARACTER
         ORG   CHARTRAN+C'A'
         DC    9X'00'                  A-I ARE CHARACTERS
         ORG   CHARTRAN+C'J'
         DC    9X'00'                  J-R ARE CHARACTERS
         ORG   CHARTRAN+C'S'
         DC    8X'00'                  S-Z ARE CHARACTERS
         ORG   CHARTRAN+C'0'
         DC    10X'00'                 0-9 ARE CHARACTERS
         ORG
         LTORG
*
* INSTRUCTION DISASSEMBLY TABLES. THESE TABLES DEFINE VALID
* INSTRUCTION OP-CODES, AND GIVE MNEMONICS, FORMAT-TYPES,
* AND AN INDICATOR TO SHOW CONDITION SETTING INSTRUCTIONS,
* PRIVILEGED INSTRUCTIONS, AND FLOATING POINT INSTRUCTIONS.
*
*
INSTENT  DS    0CL10                   CURRENT INSTRUCTION ENTRY
INAME    DS    CL5                     INSTR NAME (MNEMONIC)
ITYPE    DS    XL1                     INSTRUCTION TYPE
RR       EQU   0                       RR FORMAT
RX       EQU   4                       RX FORMAT
S        EQU   8                       S FORMAT
SI       EQU   12                      SI FORMAT
RS       EQU   16                      RS FORMAT
SS1      EQU   20                      SS FORMAT, SINGLE LENGTH
SS2      EQU   24                      SS FORMAT, 2 LENGTHS
TWO      EQU   28                      TWO BYTE OP-CODE
CONDBR   EQU   32                      CONDITIONAL BRANCH
SVC      EQU   36                      SUPERVISOR CALL
ICLASS   DS    XL1                     INSTRUCTION CLASS
PRIV     EQU   2                       PRIVILEGED INSTRUCTION
FLTPT    EQU   4                       FLOATING POINT INSTRUCTION
FLSHT    EQU   5                       SHORT PREC FLT PT INSTR
IEDT     DS    XL1                     INSTRUCTION EDITS
EPR      EQU   X'40'                   EVEN-ODD REGISTER PAIR
E2       EQU   X'20'                   2ND OPND ON HALFWORD BOUND
E4       EQU   X'10'                   2ND OPND ON FULLWORD BOUND
E8       EQU   X'08'                   2ND OPND ON DBL WORD BOUND
S1       EQU   X'02'                   1ST OPND MUST HAVE BASE/INDEX
S2       EQU   X'01'                   2ND OPND MUST HAVE BASE
ICCSET   DS    XL1                     TYPE CONDITION CODE SET
ARITH    EQU   X'80'                   ARITHMETIC TYPE
CPR      EQU   X'40'                   COMPARE TYPE
ZRO8     EQU   X'20'                   BC 8 MAY BE BZ
INLNG    DS    XL1                     INSTRUCTION LENGTH
*
*
*
SGLOP    DS    0CL10                   SINGLE BYTE OP-CODE TABLE
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'02' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'02' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'02' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'02' NOT INSTR
         DC    CL5'SPM',AL1(RR),AL1(0),AL1(0),AL1(0),X'02' 04
         DC    CL5'BALR',AL1(RR),AL1(0),AL1(0),AL1(0),X'02' 05
         DC    CL5'BCTR',AL1(RR),AL1(0),AL1(0),AL1(0),X'02' 06
         DC    CL5'BCR',AL1(RR),AL1(0),AL1(0),AL1(0),X'02' 07
         DC    CL5'SSK',AL1(RR),AL1(PRIV),AL1(0),AL1(0),X'02' 08
         DC    CL5'ISK',AL1(RR),AL1(PRIV),AL1(0),AL1(0),X'02' 09
         DC    CL5'SVC',AL1(SVC),AL1(0),AL1(0),AL1(0),X'02' 0A
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'02' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'02' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'02' NOT INSTR
         DC    CL5'MVCL',AL1(RR),AL1(0),AL1(EPR),AL1(0),X'02' 0E
         DC    CL5'CLCL',AL1(RR),AL1(0),AL1(EPR),AL1(0),X'02' 0F
         DC    CL5'LPR',AL1(RR),AL1(0),AL1(0),AL1(ARITH),X'02' 10
         DC    CL5'LNR',AL1(RR),AL1(0),AL1(0),AL1(ARITH),X'02' 11
         DC    CL5'LTR',AL1(RR),AL1(0),AL1(0),AL1(ARITH),X'02' 12
         DC    CL5'LCR',AL1(RR),AL1(0),AL1(0),AL1(ARITH),X'02' 13
         DC    CL5'NR',AL1(RR),AL1(0),AL1(0),AL1(ZRO8),X'02' 14
         DC    CL5'CLR',AL1(RR),AL1(0),AL1(0),AL1(CPR),X'02' 15
         DC    CL5'OR',AL1(RR),AL1(0),AL1(0),AL1(ZRO8),X'02' 16
         DC    CL5'XR',AL1(RR),AL1(0),AL1(0),AL1(ZRO8),X'02' 17
         DC    CL5'LR',AL1(RR),AL1(0),AL1(0),AL1(0),X'02' 18
         DC    CL5'CR',AL1(RR),AL1(0),AL1(0),AL1(CPR),X'02' 19
         DC    CL5'AR',AL1(RR),AL1(0),AL1(0),AL1(ARITH),X'02' 1A
         DC    CL5'SR',AL1(RR),AL1(0),AL1(0),AL1(ARITH),X'02' 1B
         DC    CL5'MR',AL1(RR),AL1(0),AL1(EPR),AL1(0),X'02' 1C
         DC    CL5'DR',AL1(RR),AL1(0),AL1(EPR),AL1(0),X'02' 1D
         DC    CL5'ALR',AL1(RR),AL1(0),AL1(0),AL1(0),X'02' 1E
         DC    CL5'SLR',AL1(RR),AL1(0),AL1(0),AL1(0),X'02' 1F
         DC    CL5'LPDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 20
         DC    CL5'LNDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 21
         DC    CL5'LTDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 22
         DC    CL5'LCDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 23
         DC    CL5'HDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02' 24
         DC    CL5'LRDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02' 25
         DC    CL5'MXR',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02' 26
         DC    CL5'MXDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02' 27
         DC    CL5'LDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02' 28
         DC    CL5'CDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(CPR),X'02' 29
         DC    CL5'ADR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 2A
         DC    CL5'SDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 2B
         DC    CL5'MDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02' 2C
         DC    CL5'DDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02' 2D
         DC    CL5'AWR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 2E
         DC    CL5'SWR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 2F
         DC    CL5'LPER',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 30
         DC    CL5'LNER',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 31
         DC    CL5'LTER',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 32
         DC    CL5'LCER',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 33
         DC    CL5'HER',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02' 34
         DC    CL5'LRER',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02' 35
         DC    CL5'AXR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 36
         DC    CL5'SXR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 37
         DC    CL5'LER',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02' 38
         DC    CL5'CER',AL1(RR),AL1(FLTPT),AL1(0),AL1(CPR),X'02' 39
         DC    CL5'AER',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 3A
         DC    CL5'SER',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 3B
         DC    CL5'MER',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02' 3C
         DC    CL5'DER',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02' 3D
         DC    CL5'AUR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 3E
         DC    CL5'SUR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 3F
         DC    CL5'STH',AL1(RX),AL1(0),AL1(E2+S2),AL1(0),X'04' 40
         DC    CL5'LA',AL1(RX),AL1(0),AL1(0),AL1(0),X'04' 41
         DC    CL5'STC',AL1(RX),AL1(0),AL1(S2),AL1(0),X'04' 42
         DC    CL5'IC',AL1(RX),AL1(0),AL1(0),AL1(0),X'04' 43
         DC    CL5'EX',AL1(RX),AL1(0),AL1(E2+S2),AL1(0),X'04' 44
         DC    CL5'BAL',AL1(RX),AL1(0),AL1(E2),AL1(0),X'04' 45
         DC    CL5'BCT',AL1(RX),AL1(0),AL1(E2+S2),AL1(0),X'04' 46
         DC    CL5'BC',AL1(CONDBR),AL1(0),AL1(E2),AL1(0),X'04' 47
         DC    CL5'LH',AL1(RX),AL1(0),AL1(E2),AL1(0),X'04' 48
         DC    CL5'CH',AL1(RX),AL1(0),AL1(E2),AL1(CPR),X'04' 49
         DC    CL5'AH',AL1(RX),AL1(0),AL1(E2),AL1(ARITH),X'04' 4A
         DC    CL5'SH',AL1(RX),AL1(0),AL1(E2),AL1(ARITH),X'04' 4B
         DC    CL5'MH',AL1(RX),AL1(0),AL1(E2),AL1(0),X'04' 4C
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    CL5'CVD',AL1(RX),AL1(0),AL1(E8+S2),AL1(0),X'04' 4E
         DC    CL5'CVB',AL1(RX),AL1(0),AL1(E8),AL1(0),X'04' 4F
         DC    CL5'ST',AL1(RX),AL1(0),AL1(E4+S2),AL1(0),X'04' 50
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    CL5'N',AL1(RX),AL1(0),AL1(E4),AL1(ZRO8),X'04' 54
         DC    CL5'CL',AL1(RX),AL1(0),AL1(E4),AL1(CPR),X'04' 55
         DC    CL5'O',AL1(RX),AL1(0),AL1(E4),AL1(ZRO8),X'04' 56
         DC    CL5'X',AL1(RX),AL1(0),AL1(E4),AL1(ZRO8),X'04' 57
         DC    CL5'L',AL1(RX),AL1(0),AL1(E4),AL1(0),X'04' 58
         DC    CL5'C',AL1(RX),AL1(0),AL1(E4),AL1(CPR),X'04' 59
         DC    CL5'A',AL1(RX),AL1(0),AL1(E4),AL1(ARITH),X'04' 5A
         DC    CL5'S',AL1(RX),AL1(0),AL1(E4),AL1(ARITH),X'04' 5B
         DC    CL5'M',AL1(RX),AL1(0),AL1(E4+EPR),AL1(0),X'04' 5C
         DC    CL5'D',AL1(RX),AL1(0),AL1(E4+EPR),AL1(0),X'04' 5D
         DC    CL5'AL',AL1(RX),AL1(0),AL1(E4),AL1(0),X'04' 5E
         DC    CL5'SL',AL1(RX),AL1(0),AL1(E4),AL1(0),X'04' 5F
         DC    CL5'STD',AL1(RX),AL1(FLTPT),AL1(0),AL1(0),X'04' 60
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    CL5'MXD',AL1(RX),AL1(FLTPT),AL1(0),AL1(0),X'04' 67
         DC    CL5'LD',AL1(RX),AL1(FLTPT),AL1(0),AL1(0),X'04' 68
         DC    CL5'CD',AL1(RX),AL1(FLTPT),AL1(0),AL1(CPR),X'04' 69
         DC    CL5'AD',AL1(RX),AL1(FLTPT),AL1(0),AL1(ARITH),X'04' 6A
         DC    CL5'SD',AL1(RX),AL1(FLTPT),AL1(0),AL1(ARITH),X'04' 6B
         DC    CL5'MD',AL1(RX),AL1(FLTPT),AL1(0),AL1(0),X'04' 6C
         DC    CL5'DD',AL1(RX),AL1(FLTPT),AL1(0),AL1(0),X'04' 6D
         DC    CL5'AW',AL1(RX),AL1(FLTPT),AL1(0),AL1(ARITH),X'04' 6E
         DC    CL5'SW',AL1(RX),AL1(FLTPT),AL1(0),AL1(ARITH),X'04' 6F
         DC    CL5'STE',AL1(RX),AL1(FLSHT),AL1(0),AL1(0),X'04' 70
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    CL5'LE',AL1(RX),AL1(FLSHT),AL1(0),AL1(0),X'04' 78
         DC    CL5'CE',AL1(RX),AL1(FLSHT),AL1(0),AL1(CPR),X'04' 79
         DC    CL5'AE',AL1(RX),AL1(FLSHT),AL1(0),AL1(ARITH),X'04' 7A
         DC    CL5'SE',AL1(RX),AL1(FLSHT),AL1(0),AL1(ARITH),X'04' 7B
         DC    CL5'ME',AL1(RX),AL1(FLSHT),AL1(0),AL1(0),X'04' 7C
         DC    CL5'DE',AL1(RX),AL1(FLSHT),AL1(0),AL1(0),X'04' 7D
         DC    CL5'AU',AL1(RX),AL1(FLSHT),AL1(0),AL1(ARITH),X'04' 7E
         DC    CL5'SU',AL1(RX),AL1(FLSHT),AL1(0),AL1(ARITH),X'04' 7F
         DC    CL5'SSM',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04' 80
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    CL5'LPSW',AL1(S),AL1(PRIV),AL1(E8),AL1(0),X'04' 82
         DC    CL5'DIAGN',AL1(RS),AL1(PRIV),AL1(0),AL1(0),X'04' 83
         DC    CL5'WRD',AL1(SI),AL1(PRIV),AL1(0),AL1(0),X'04' 84
         DC    CL5'RDD',AL1(SI),AL1(PRIV),AL1(0),AL1(0),X'04' 85
         DC    CL5'BXH',AL1(RS),AL1(0),AL1(E2+S2),AL1(0),X'04' 86
         DC    CL5'BXLE',AL1(RS),AL1(0),AL1(E2+S2),AL1(0),X'04' 87
         DC    CL5'SRL',AL1(RS),AL1(0),AL1(0),AL1(ARITH),X'04' 88
         DC    CL5'SLL',AL1(RS),AL1(0),AL1(0),AL1(ARITH),X'04' 89
         DC    CL5'SRA',AL1(RS),AL1(0),AL1(0),AL1(ARITH),X'04' 8A
         DC    CL5'SLA',AL1(RS),AL1(0),AL1(0),AL1(ARITH),X'04' 8B
         DC    CL5'SRDL',AL1(RS),AL1(0),AL1(EPR),AL1(ARITH),X'04' 8C
         DC    CL5'SLDL',AL1(RS),AL1(0),AL1(EPR),AL1(ARITH),X'04' 8D
         DC    CL5'SRDA',AL1(RS),AL1(0),AL1(EPR),AL1(ARITH),X'04' 8E
         DC    CL5'SLDA',AL1(RS),AL1(0),AL1(EPR),AL1(ARITH),X'04' 8F
         DC    CL5'STM',AL1(RS),AL1(0),AL1(E4+S2),AL1(0),X'04' 90
         DC    CL5'TM',AL1(SI),AL1(0),AL1(0),AL1(ARITH),X'04' 91
         DC    CL5'MVI',AL1(SI),AL1(0),AL1(S2),AL1(0),X'04' 92
         DC    CL5'TS',AL1(S),AL1(0),AL1(0),AL1(0),X'04' 93
         DC    CL5'NI',AL1(SI),AL1(0),AL1(0),AL1(ZRO8),X'04' 94
         DC    CL5'CLI',AL1(SI),AL1(0),AL1(0),AL1(CPR),X'04' 95
         DC    CL5'OI',AL1(SI),AL1(0),AL1(0),AL1(ZRO8),X'04' 96
         DC    CL5'XI',AL1(SI),AL1(0),AL1(0),AL1(ZRO8),X'04' 97
         DC    CL5'LM',AL1(RS),AL1(0),AL1(E4),AL1(0),X'04' 98
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    CL5' ',AL1(TWO),AL1(0),AL1(0),AL1(0),X'04' 9C
         DC    CL5' ',AL1(TWO),AL1(0),AL1(0),AL1(0),X'04' 9D
         DC    CL5' ',AL1(TWO),AL1(0),AL1(0),AL1(0),X'04' 9E
         DC    CL5' ',AL1(TWO),AL1(0),AL1(0),AL1(0),X'04' 9F
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    CL5'STNSM',AL1(SI),AL1(PRIV),AL1(0),AL1(0),X'04' AC
         DC    CL5'STOSM',AL1(SI),AL1(PRIV),AL1(0),AL1(0),X'04' AD
         DC    CL5'SIGP',AL1(RS),AL1(PRIV),AL1(0),AL1(0),X'04' AE
         DC    CL5'MC',AL1(SI),AL1(0),AL1(0),AL1(0),X'04' AF
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    CL5'LRA',AL1(RX),AL1(PRIV),AL1(0),AL1(0),X'04' B1
         DC    CL5' ',AL1(TWO),AL1(0),AL1(0),AL1(0),X'04' B2
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    CL5'STCTL',AL1(RS),AL1(PRIV),AL1(0),AL1(0),X'04' B6
         DC    CL5'LCTL',AL1(RS),AL1(PRIV),AL1(E4),AL1(0),X'04' B7
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    CL5'CS',AL1(RS),AL1(0),AL1(E4+EPR),AL1(0),X'04' BA
         DC    CL5'CDS',AL1(RS),AL1(0),AL1(E4+EPR),AL1(0),X'04' BB
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    CL5'CLM',AL1(RS),AL1(0),AL1(0),AL1(CPR),X'04' BD
         DC    CL5'STCM',AL1(RS),AL1(0),AL1(S2),AL1(0),X'04' BE
         DC    CL5'ICM',AL1(RS),AL1(0),AL1(0),AL1(ZRO8),X'04' BF
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    CL5'MVN',AL1(SS1),AL1(0),AL1(S1),AL1(0),X'06' D1
         DC    CL5'MVC',AL1(SS1),AL1(0),AL1(S1),AL1(0),X'06' D2
         DC    CL5'MVZ',AL1(SS1),AL1(0),AL1(S1),AL1(0),X'06' D3
         DC    CL5'NC',AL1(SS1),AL1(0),AL1(S1),AL1(ZRO8),X'06' D4
         DC    CL5'CLC',AL1(SS1),AL1(0),AL1(0),AL1(CPR),X'06' D5
         DC    CL5'OC',AL1(SS1),AL1(0),AL1(S1),AL1(ZRO8),X'06' D6
         DC    CL5'XC',AL1(SS1),AL1(0),AL1(S1),AL1(ZRO8),X'06' D7
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    CL5'TR',AL1(SS1),AL1(0),AL1(S1),AL1(0),X'06' DC
         DC    CL5'TRT',AL1(SS1),AL1(0),AL1(0),AL1(ZRO8),X'06' DD
         DC    CL5'ED',AL1(SS1),AL1(0),AL1(S1),AL1(ARITH),X'06' DE
         DC    CL5'EDMK',AL1(SS1),AL1(0),AL1(S1),AL1(ARITH),X'06' DF
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    CL5'SRP',AL1(SS2),AL1(0),AL1(S1),AL1(ARITH),X'06' F0
         DC    CL5'MVO',AL1(SS2),AL1(0),AL1(S1),AL1(0),X'06' F1
         DC    CL5'PACK',AL1(SS2),AL1(0),AL1(S1),AL1(0),X'06' F2
         DC    CL5'UNPK',AL1(SS2),AL1(0),AL1(S1),AL1(0),X'06' F3
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    CL5'ZAP',AL1(SS2),AL1(0),AL1(S1),AL1(ARITH),X'06' F8
         DC    CL5'CP',AL1(SS2),AL1(0),AL1(0),AL1(CPR),X'06' F9
         DC    CL5'AP',AL1(SS2),AL1(0),AL1(S1),AL1(ARITH),X'06' FA
         DC    CL5'SP',AL1(SS2),AL1(0),AL1(S1),AL1(ARITH),X'06' FB
         DC    CL5'MP',AL1(SS2),AL1(0),AL1(S1),AL1(0),X'06' FC
         DC    CL5'DP',AL1(SS2),AL1(0),AL1(S1),AL1(0),X'06' FD
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    X'FFFF'                 TABLE END
*
*
*
DBLOP    DS    0CL12                   TWO-BYTE OP-CODE TABLE
         DC    X'9C00',CL5'SIO',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'9C01',CL5'SIOF',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'9D00',CL5'TIO',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'9D01',CL5'CLRIO',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'9E00',CL5'HIO',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'9E01',CL5'HDV',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'9F00',CL5'TCH',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B20B',CL5'IPK',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B20D',CL5'PTLB',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B213',CL5'RRB',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B204',CL5'SCK',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B206',CL5'SCKC',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B208',CL5'SPT',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B210',CL5'SPX',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B20A',CL5'SPKA',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B203',CL5'STIDC',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B205',CL5'STCK',AL1(S),AL1(0),AL1(E8+S2),AL1(0),X'04'
         DC    X'B207',CL5'STCKC',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B212',CL5'STAP',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B202',CL5'STIDP',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B209',CL5'STPT',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B211',CL5'STPX',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'FFFF'                 TABLE END
*
*
*
SVCOP    DS    0CL15                   SVC NAME TABLE
         DC    AL1(0),CL14'EXCP/XDAP'
         DC    AL1(1),CL14'WAIT/WAITR'
         DC    AL1(2),CL14'POST/PRTOV'
         DC    AL1(3),CL14'EXIT'
         DC    AL1(4),CL14'GETMAIN'
         DC    AL1(5),CL14'FREEMAIN'
         DC    AL1(6),CL14'LINK'
         DC    AL1(7),CL14'XCTL'
         DC    AL1(8),CL14'LOAD'
         DC    AL1(9),CL14'DELETE'
         DC    AL1(10),CL14'GET/FREEMAIN R'
         DC    AL1(11),CL14'TIME'
         DC    AL1(12),CL14'SYNCH'
         DC    AL1(13),CL14'ABEND'
         DC    AL1(14),CL14'SPIE'
         DC    AL1(15),CL14'ERREXCP'
         DC    AL1(16),CL14'PURGE'
         DC    AL1(17),CL14'RESTORE'
         DC    AL1(18),CL14'BLDL/FIND'
         DC    AL1(19),CL14'OPEN'
         DC    AL1(20),CL14'CLOSE'
         DC    AL1(21),CL14'STOW'
         DC    AL1(22),CL14'OPEN TYPE J'
         DC    AL1(23),CL14'CLOSE TYPE T'
         DC    AL1(24),CL14'DEVTYPE'
         DC    AL1(25),CL14'TRKBAL'
         DC    AL1(26),CL14'LOCATE, ETC'
         DC    AL1(27),CL14'OBTAIN'
         DC    AL1(28),CL14'CVOL'
         DC    AL1(29),CL14'SCRATCH'
         DC    AL1(30),CL14'RENAME'
         DC    AL1(31),CL14'FEOV'
         DC    AL1(32),CL14'(NO MACRO)'
         DC    AL1(33),CL14'IOHALT'
         DC    AL1(34),CL14'MGCR/QEDIT'
         DC    AL1(35),CL14'WTO/WTOR'
         DC    AL1(36),CL14'WTL'
         DC    AL1(37),CL14'SEGLD/SEGWT'
         DC    AL1(39),CL14'LABEL'
         DC    AL1(40),CL14'EXTRACT'
         DC    AL1(41),CL14'IDENTIFY'
         DC    AL1(42),CL14'ATTACH'
         DC    AL1(43),CL14'CIRB'
         DC    AL1(44),CL14'CHAP'
         DC    AL1(45),CL14'OVLYBRCH'
         DC    AL1(46),CL14'TTIMER'
         DC    AL1(47),CL14'STIMER'
         DC    AL1(48),CL14'DEQ'
         DC    AL1(51),CL14'SNAP/SDUMP'
         DC    AL1(52),CL14'RESTART'
         DC    AL1(53),CL14'RELEX'
         DC    AL1(54),CL14'DISABLE'
         DC    AL1(55),CL14'EOV'
         DC    AL1(56),CL14'ENQ/RESERVE'
         DC    AL1(57),CL14'FREEDBUF'
         DC    AL1(58),CL14'RELBUF/REQBUF'
         DC    AL1(59),CL14'OLTEP'
         DC    AL1(60),CL14'(E)STAE/STAI'
         DC    AL1(61),CL14'IKJEGS6A'
         DC    AL1(62),CL14'DETACH'
         DC    AL1(63),CL14'CHKPT'
         DC    AL1(64),CL14'RDJFCB'
         DC    AL1(66),CL14'BTAMTEST'
         DC    AL1(67),CL14'SYNADAF'
         DC    AL1(68),CL14'SYNADRLS'
         DC    AL1(69),CL14'BSP'
         DC    AL1(70),CL14'GSERV'
         DC    AL1(71),CL14'ASGNBFR, ETC'
         DC    AL1(72),CL14'CHATR'
         DC    AL1(73),CL14'SPAR'
         DC    AL1(74),CL14'DAR'
         DC    AL1(75),CL14'DQUEUE'
         DC    AL1(76),CL14'(NO MACRO)'
         DC    AL1(78),CL14'(NO MACRO)'
         DC    AL1(79),CL14'STATUS'
         DC    AL1(81),CL14'SETPRT'
         DC    AL1(82),CL14'DASDR'
         DC    AL1(83),CL14'SMFWTM'
         DC    AL1(84),CL14'GRAPHICS'
         DC    AL1(85),CL14'DDRSWAP'
         DC    AL1(86),CL14'ATLAS'
         DC    AL1(87),CL14'DOM'
         DC    AL1(88),CL14'MOD88'
         DC    AL1(91),CL14'VOLSTAT'
         DC    AL1(92),CL14'TCBEXCP'
         DC    AL1(93),CL14'TGET/TPUT'
         DC    AL1(94),CL14'STCC'
         DC    AL1(95),CL14'SYSEVENT'
         DC    AL1(96),CL14'STAX'
         DC    AL1(97),CL14'TSO TEST'
         DC    AL1(98),CL14'PROTECT'
         DC    AL1(99),CL14'DDDYNAM'
         DC    AL1(100),CL14'IKJEFFIB'
         DC    AL1(101),CL14'QTIP'
         DC    AL1(102),CL14'AQCTL'
         DC    AL1(103),CL14'XLATE'
         DC    AL1(104),CL14'TOPCTL'
         DC    AL1(105),CL14'IMAGLIB'
         DC    AL1(107),CL14'MODESET'
         DC    AL1(109),CL14'ESR TYPE 4'
         DC    AL1(110),CL14'DSTATUS'
         DC    AL1(111),CL14'(NO MACRO)'
         DC    AL1(112),CL14'PGRLSE'
         DC    AL1(113),CL14'PGFIX,CL14' ETC'
         DC    AL1(114),CL14'EXCPVR'
         DC    AL1(116),CL14'ESR TYPE 1'
         DC    AL1(117),CL14'DEBCHK'
         DC    AL1(119),CL14'TESTAUTH'
         DC    AL1(120),CL14'GETMAIN/FREEMAIN'
         DC    AL1(121),CL14'VSAM'
         DC    AL1(122),CL14'EVENTS'
         DC    AL1(123),CL14'PURGEDQ'
         DC    AL1(124),CL14'TPIO'
         DC    AL1(125),CL14'EVENTS'
         DC    AL1(126),CL14'MSS INTERFACE'
         DC    AL1(200),CL14'<< USER SVC >>'
         DC    AL1(201),CL14'<< USER SVC >>'
         DC    AL1(202),CL14'<< USER SVC >>'
         DC    AL1(203),CL14'<< USER SVC >>'
         DC    AL1(204),CL14'<< USER SVC >>'
         DC    AL1(205),CL14'<< USER SVC >>'
         DC    AL1(206),CL14'<< USER SVC >>'
         DC    AL1(207),CL14'<< USER SVC >>'
         DC    AL1(208),CL14'<< USER SVC >>'
         DC    AL1(209),CL14'<< USER SVC >>'
         DC    AL1(210),CL14'<< USER SVC >>'
         DC    AL1(211),CL14'<< USER SVC >>'
         DC    AL1(212),CL14'<< USER SVC >>'
         DC    AL1(213),CL14'<< USER SVC >>'
         DC    AL1(214),CL14'<< USER SVC >>'
         DC    AL1(215),CL14'<< USER SVC >>'
         DC    AL1(216),CL14'<< USER SVC >>'
         DC    AL1(217),CL14'<< USER SVC >>'
         DC    AL1(218),CL14'<< USER SVC >>'
         DC    AL1(219),CL14'<< USER SVC >>'
         DC    AL1(220),CL14'<< USER SVC >>'
         DC    AL1(221),CL14'<< USER SVC >>'
         DC    AL1(222),CL14'<< USER SVC >>'
         DC    AL1(223),CL14'<< USER SVC >>'
         DC    AL1(224),CL14'<< USER SVC >>'
         DC    AL1(225),CL14'<< USER SVC >>'
         DC    AL1(226),CL14'<< USER SVC >>'
         DC    AL1(227),CL14'<< USER SVC >>'
         DC    AL1(228),CL14'<< USER SVC >>'
         DC    AL1(229),CL14'<< USER SVC >>'
         DC    AL1(230),CL14'<< USER SVC >>'
         DC    AL1(231),CL14'<< USER SVC >>'
         DC    AL1(232),CL14'<< USER SVC >>'
         DC    AL1(233),CL14'<< USER SVC >>'
         DC    AL1(234),CL14'<< USER SVC >>'
         DC    AL1(235),CL14'<< USER SVC >>'
         DC    AL1(236),CL14'<< USER SVC >>'
         DC    AL1(237),CL14'<< USER SVC >>'
         DC    AL1(238),CL14'<< USER SVC >>'
         DC    AL1(239),CL14'<< USER SVC >>'
         DC    AL1(240),CL14'<< USER SVC >>'
         DC    AL1(241),CL14'<< USER SVC >>'
         DC    AL1(242),CL14'<< USER SVC >>'
         DC    AL1(243),CL14'<< USER SVC >>'
         DC    AL1(244),CL14'<< USER SVC >>'
         DC    AL1(245),CL14'<< USER SVC >>'
         DC    AL1(246),CL14'<< USER SVC >>'
         DC    AL1(247),CL14'<< USER SVC >>'
         DC    AL1(248),CL14'<< USER SVC >>'
         DC    AL1(249),CL14'<< USER SVC >>'
         DC    AL1(250),CL14'<< USER SVC >>'
         DC    AL1(251),CL14'<< USER SVC >>'
         DC    AL1(252),CL14'<< USER SVC >>'
         DC    AL1(253),CL14'<< USER SVC >>'
         DC    AL1(254),CL14'<< USER SVC >>'
         DC    AL1(255),CL14'<< USER SVC >>'
         DC    X'FF'                   END OF TABLE
         END
./ ADD NAME=DISASM3  0100-94267-94267-1200-00201-00201-00000-CONYERS
******************************************************************
*
*                DISASM3   IBM ASM    11/25/87
*       (USED FOR DISASSEMBLING MULTIPLE STORAGE AREAS)
*
*
* FLOATING POINT AND PRIVILEGED INSTRUCTION INDICATORS ARE
*      FORCED ON.
*
* USER PASSES ADDRESS OF AN 8 BYTE WORK AREA WHICH CONTAINS
* CONTROL INFORMATION FOR THE DISASSEMBLER.
*
*       START   LENGTH   TYPE     PURPOSE
*       -----   ------   ----     -------
*         1       4       BI      STARTING ADDRESS FOR DISASSEMBLER
*         5       4       BI      NUMBER OF BYTES TO DISASSEMBLE
*
******************************************************************
*
*
DISASM3  CSECT
         STM   14,12,12(13)
         LR    12,15
         USING DISASM3,12
BEGIN    ST    13,SAVE+4
         LR    2,13
         LA    13,SAVE
         ST    13,8(2)
         L     8,0(1)
         MVC   TXTSTRT,0(8)
         MVC   TXTCURR,0(8)
         L     9,0(8)
         L     10,4(8)
         AR    9,10
         ST    9,TXTEND
         OPEN  (OIGPRINT,OUTPUT)
         MVC   EJP40(6),EPMASK
         ED    EJP40(6),EPCNT
         AP    EPCNT,EPONE
         ZAP   LINECT,EPONE
         PUT   OIGPRINT,EJPAGE
         LOAD  EP=DISASM2
DISCALL  LR    15,0
         LA    1,=A(COMMPARM)
         BALR  14,15
         DELETE EP=DISASM2
         CLOSE (OIGPRINT)
GOBACK   L     13,SAVE+4
         RETURN (14,12),RC=0
*
*
*
SYSPUNCH DCB   DSORG=PS,MACRF=(PM,GM),DDNAME=SYSPUNCH,                 X
               RECFM=FB,LRECL=80
OIGIN    DCB   DSORG=PS,MACRF=GL,DDNAME=OIGIN,                         X
               RECFM=FB,LRECL=80,EODAD=GOBACK
SYSLIB   DCB   DSORG=PO,MACRF=R,DDNAME=SYSLIB,                         X
               RECFM=U,NCP=1
OIGPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=OIGPRINT,                      X
               RECFM=FBA,LRECL=121
*
*
*
         DS    0F
SAVE     DS    18F'0'
*
* FOLLOWING FIELDS: COMMPARM THRU COMMEND ARE COMMON AREAS SHARED
* BY THIS, AND CALLED SUB-PROGRAMS. ALL CHANGES MUST BE COORDINTAED
* WITH ALL OTHER PROGRAMS.
*
****************************************************************
*
HIVAL    DC    4X'FF'
EJPAGE   DS    0CL121                  PRINT LINE
EJPCC    DC    C'1'                    CARRIAGE CONTROL
         DC    CL13'STORAGE AREA '
EJP40    DC    CL107' '                BLANKS
EPMASK   DC    XL6'402020202021'
EPCNT    DC    PL3'0'
EPONE    DC    PL1'1'
         DS    0D
COMMPARM EQU   *                       COMMON AREAS
DBLWD    DS    D                       DOUBLEWORD WORK AREA
PUNCHDCB DC    A(SYSPUNCH)             @ SYSPUNCH DCB
PRINTDCB DC    A(OIGPRINT)             @ SYSPRINT DCB
INDCB    DC    A(OIGIN)                @ SYSIN DCB
CSECT    DC    8CL1' '                 SPECIFIED CSECT NAME
ESDID    DC    X'0001'                 ESD ID OF SPECIFIED CSECT
ENDLBLNM DC    CL8' '                  SYMBOL FOR END STMT BEGIN POINTE
LINECT   DC    PL2'0'                  PRINT LINE COUNTER
START    DC    F'0'                    LKED ASSIGNED START ADDR OF CSEC
END      DC    F'0'                    CSECT END ADDRESS
LENGTH   DC    F'0'                    LENGTH OF SPECIFIED CSECT
LBLTBL   DS    F                       @ LABEL TABLE
CURRLBL  DS    F                       CURRENT LABEL ENTRY ADDR
ENDLBL   DS    F                       @ END OF LABEL TBL
LBLLGTH  DC    AL2(L'LABEL)            LENGTH OF LABEL ENTRY         */
TXTSTRT  DS    F                       @ TEXT STORAGE AREA
TXTEND   DS    F                       @ END OF TEXT AREA
TXTCURR  DS    F                       @ CURRENT TEXT LOC
DTBCURR  DC    F'0'                    DSECT TABLE CURRENT ENTRY ADDR
DTBEND   DC    F'0'                    DSECT TABLE END ADDR
DTBSTRT  DC    A(HIVAL)                DSECT TABLE START ADDR
USGSTRT  DC    A(HIVAL)                USING TABLE START ADDR
USGCUR   DC    F'0'                    USING TABLE CURRENT ADDR
USGEND   DC    F'0'                    USING TABLE END ADDR
DATONLY  DS    F                       DATA ONLY TABLE ADDR
DATOCUR  DS    F                       CURRENT DATA ONLY ADDR
DATOEND  DS    F                       END OF DATA ONLY TABLE
FLPTASM  DC    X'01'                   FLOATING POINT INDICATOR
PRIVASM  DC    X'01'                   PRIVILEGED INDICATOR
USERR    DC    X'00'                   ERROR INDIC FOR DISASM1
NBRLBLS  DC    H'0'                    NBR LABELS FROM DISASM1
*
*
*
WORKREC  DS    0CL80                   DISASSEMBLY WORK AREA
NAME     DS    CL8                     NAME
         DS    CL1
MNEMONIC DS    CL5                     INSTRUCTION MNEMONIC
         DS    CL1
OPNDS    DS    CL27                    1ST OPERAND
         DS    CL1
COMMENT  DS    CL28                    COMMENT
COL72    DS    CL1
SEQNBR   DS    CL8                     CARD SEQ NBR
*
*
*
CARDNO   DC    PL4'0'                  OUTPUT CARD NBR
PRTLINE  DS    0CL121                  PRINT LINE
PCC      DC    C'1'                    CARRIAGE CONTROL
PRT      DC    CL120' '                PRINT DATA
*
*
*
         DS    0F
BLDLIST  DS    0CL62                   BLDL LIST
         DC    H'1'                    ONE ENTRY
         DC    H'58'                   LENGTH OF ENTRY
MEMBER   DC    CL8' '                  MEMBER NAME
TTRMOD   DC    XL3'000000'             TTR OF MODULE
CCAT     DC    XL1'00'                 CONCATENATION NUMBER
         DC    XL1'00'
ALIASIND DC    XL1'00'                 ALIAS AND MISC INDICATOR
*                           80=ALIAS
TTR1TXT  DC    XL3'000000'             TTR OF 1ST TXT RECORD
         DC    XL1'00'
TTRNS    DC    XL3'000000'             TTR OF NOTE OR SCATTER LIST
NNOTE    DC    XL1'00'                 NBR ENTRIES IN NOTE LIST
ATTR1A   DC    XL1'00'                 MODULE ATTRIBUTES 1, BYTE 1
*                           80=RENT
*                           40=REUS
*                           20=OVERLAY
*                           10=UNDER TEST
*                           08=ONLY LOADABLE
*                           04=SCATTER FORMAT
*                           02=EXECUTABLE
*                           01=ONE TXT, NO RLD RECORDS
ATTR1B   DC    XL1'00'                 ATTRIBUTES 1, BYTE 2
*                           80=CANNOT BE REPROCESSED BY LKED E
*                           40=ORIGIN OF 1ST TXT RECORD IS ZERO
*                           20=ASSIGNED ENTRY POINT ADDR IS ZERO
*                           10=CONTAINS NO RLD RECORD
*                           08=CANNOT BE REPROCESSED BY LKED
*                           04=CONTAINS TESTRAN SYMBOLS
*                           02=CREATED BY LKED
*                           01=REFR
TOTVIRT  DC    XL3'000000'             TOTAL VIRTUAL STRG REQRD FOR MOD
LENG1    DC    XL2'0000'               LENGTH OF 1ST TEXT RECORD
LKEPA    DC    XL3'000000'             ASSIGNED ENTRY POINT ADDR
ATTR2    DC    XL1'00'                 ATTRIBUTES 2
*                           80=PROCESSED BY OS/VS LKED
*                           20=PAGE ALIGNMENT REQUIRED FOR MODULE
*                           10=SSI PRESENT
         DC    XL2'0000'
SCTRLEN  DC    XL2'0000'               SCATTER LIST LENGTH
TTLEN    DC    XL2'0000'               TRANSLATION TABLE LENGTH
SCESDID  DC    XL2'0000'               CESD NBR FOR 1ST TXT RECD
SCEPESD  DC    XL2'0000'               CESD NBR FOR ENTRY POINT
ALEPA    DC    XL3'000000'             ENTRY POINT OF THE MEMBER NAME
ALMEM    DC    CL8' '                  REAL MEMBER NAME FOR ALIAS
SSI      DS    XL4'00000000'           SSI BYTES
AUTHLEN  DC    XL1'00'                 AUTH CODE LENGTH
AUTHCOD  DC    XL1'00'                 AUTH CODE
*
*
*
COMMEND  EQU   *
*
*
*
LABELD   DSECT
LABEL    DS    0CL13
LBLADR   DS    XL3
LBLTYP   DS    CL1
LBLNAME  DS    CL8
LBLLEN   DS    XL1
*
*
         END
./ ADD NAME=DISVC200 0100-94267-94267-1200-00063-00063-00000-CONYERS
//M301SVCX JOB (T201,B-71),'CONYERS - DISVC200',CLASS=A,TIME=(,05),
//         NOTIFY=AUDIT01,MSGLEVEL=(1,1),MSGCLASS=T
//STEP01   EXEC PGM=DYL280,REGION=2000K
//STEPLIB  DD DSN=T2.T201XXXX.DYLLIB,DISP=SHR <--- DYL-280
//         DD DSN=M3.M301XXDS.LOAD,DISP=SHR   <--- DISASM
//         DD DSN=M3.M301XXMV.LOAD,DISP=SHR   <--- ASHAVCV2
//SYSPRINT DD SYSOUT=*
//SYS280R  DD SYSOUT=*
//SYS004   DD DSN=&&WORK280,DISP=(,PASS),UNIT=SYSDA,
//         SPACE=(TRK,(5,5))
//OIGPRINT DD SYSOUT=*
//SYSIN    DD *
*
* USES DISASM3 TO DISASSEMBLE SVCS 200 - 255
*
FILE SYSIN CARD DUMMY
WORKAREA
  SVC       8 1
  SVCNUM    4 1   BI    (SVC'NUM)       ; SVC NUM FOR CALL
  SVCADR    4 1   BI  A (ENTRY'ADDRESS) ; ENTRY POINT ADDR
  HIGHBIT   1 1   BI                    ;
  SVCATT    2 5   BI    (ATTRIBUTES)    ;
  SVCTYPE   1 5   BI                    ;
*                           X'00' TYPE 1 SVC
*                           X'80' TYPE 2 SVC
*                           X'C0' TYPE 3 OR 4 SVC
*                           X'20' TYPE 6 SVC
*                           X'08' APF AUTHORIZED
*                           X'04' SVC IS A PART OF ESR
*                           X'02' NON-PREEMPTIVE SVC
*                           X'01' SVC CAN BE ASSISTED
  SVCRESRV  1 6    BI                    ; RESERVED BYTE
  SVCLOCKS  2 7    BI
*                           X'80' LOCAL LOCK NEEDED
*                           X'40' CMS LOCK NEEDED
*                           X'20' OPT LOCK NEEDED
*                           X'10' SALLOC LOCK NEEDED
*                           X'08' DISP LOCK NEEDED
*
WORKAREA
  DISPARMS  8  1                  ;DISASM CONTROL BLOCK
  DISPARM1  4  1  BI              ;  STORAGE LOCATION TO START DISASM
  DISPARM2  4  5  BI              ;  LENGTH IN DECIMAL
*
WORKAREA
  SVCCNT    2  1  PD  VALUE 200   ;SVCTABLE STARTING ENTRY
*
SVCPART:
*
  SVCNUM = SVCCNT
* ASHAVCV2 RETURNS SVC STUFF FROM IN-STORAGE SVCTABLE
  CALL ASHSVCV2 USING SVC
* UNCOMMENT THE FOLLOWING LINE IF ON XA SYSTEM   <--- LOOK!
* COMBINE BITS X'7F' AND HIGHBIT
  DISPARM1 = SVCADR
  DISPARM2 = 100
  CALL DISASM3 USING DISPARMS
  SVCCNT = SVCCNT + DYLONE
  IF SVCCNT GT 255
     STOP
     ELSE GOTO SVCPART
     ENDIF
FIN
./ ADD NAME=OPCTABLE 0100-94267-94267-1200-00499-00499-00000-CONYERS
* INSTRUCTION DISASSEMBLY TABLES. THESE TABLES DEFINE VALID
* INSTRUCTION OP-CODES, AND GIVE MNEMONICS, FORMAT-TYPES,
* AND AN INDICATOR TO SHOW CONDITION SETTING INSTRUCTIONS,
* PRIVILEGED INSTRUCTIONS, AND FLOATING POINT INSTRUCTIONS.
*
*
INSTENT  DS    0CL10                   CURRENT INSTRUCTION ENTRY
INAME    DS    CL5                     INSTR NAME (MNEMONIC)
ITYPE    DS    XL1                     INSTRUCTION TYPE
RR       EQU   0                       RR FORMAT
RX       EQU   4                       RX FORMAT
S        EQU   8                       S FORMAT
SI       EQU   12                      SI FORMAT
RS       EQU   16                      RS FORMAT
SS1      EQU   20                      SS FORMAT, SINGLE LENGTH
SS2      EQU   24                      SS FORMAT, 2 LENGTHS
TWO      EQU   28                      TWO BYTE OP-CODE
CONDBR   EQU   32                      CONDITIONAL BRANCH
SVC      EQU   36                      SUPERVISOR CALL
ICLASS   DS    XL1                     INSTRUCTION CLASS
PRIV     EQU   2                       PRIVILEGED INSTRUCTION
FLTPT    EQU   4                       FLOATING POINT INSTRUCTION
FLSHT    EQU   5                       SHORT PREC FLT PT INSTR
IEDT     DS    XL1                     INSTRUCTION EDITS
EPR      EQU   X'40'                   EVEN-ODD REGISTER PAIR
E2       EQU   X'20'                   2ND OPND ON HALFWORD BOUND
E4       EQU   X'10'                   2ND OPND ON FULLWORD BOUND
E8       EQU   X'08'                   2ND OPND ON DBL WORD BOUND
S1       EQU   X'02'                   1ST OPND MUST HAVE BASE/INDEX
S2       EQU   X'01'                   2ND OPND MUST HAVE BASE
ICCSET   DS    XL1                     TYPE CONDITION CODE SET
ARITH    EQU   X'80'                   ARITHMETIC TYPE
CPR      EQU   X'40'                   COMPARE TYPE
ZRO8     EQU   X'20'                   BC 8 MAY BE BZ
INLNG    DS    XL1                     INSTRUCTION LENGTH
*
*
*
SGLOP    DS    0CL10                   SINGLE BYTE OP-CODE TABLE
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'02' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'02' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'02' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'02' NOT INSTR
         DC    CL5'SPM',AL1(RR),AL1(0),AL1(0),AL1(0),X'02' 04
         DC    CL5'BALR',AL1(RR),AL1(0),AL1(0),AL1(0),X'02' 05
         DC    CL5'BCTR',AL1(RR),AL1(0),AL1(0),AL1(0),X'02' 06
         DC    CL5'BCR',AL1(RR),AL1(0),AL1(0),AL1(0),X'02' 07
         DC    CL5'SSK',AL1(RR),AL1(PRIV),AL1(0),AL1(0),X'02' 08
         DC    CL5'ISK',AL1(RR),AL1(PRIV),AL1(0),AL1(0),X'02' 09
         DC    CL5'SVC',AL1(SVC),AL1(0),AL1(0),AL1(0),X'02' 0A
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'02' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'02' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'02' NOT INSTR
         DC    CL5'MVCL',AL1(RR),AL1(0),AL1(EPR),AL1(0),X'02' 0E
         DC    CL5'CLCL',AL1(RR),AL1(0),AL1(EPR),AL1(0),X'02' 0F
         DC    CL5'LPR',AL1(RR),AL1(0),AL1(0),AL1(ARITH),X'02' 10
         DC    CL5'LNR',AL1(RR),AL1(0),AL1(0),AL1(ARITH),X'02' 11
         DC    CL5'LTR',AL1(RR),AL1(0),AL1(0),AL1(ARITH),X'02' 12
         DC    CL5'LCR',AL1(RR),AL1(0),AL1(0),AL1(ARITH),X'02' 13
         DC    CL5'NR',AL1(RR),AL1(0),AL1(0),AL1(ZRO8),X'02' 14
         DC    CL5'CLR',AL1(RR),AL1(0),AL1(0),AL1(CPR),X'02' 15
         DC    CL5'OR',AL1(RR),AL1(0),AL1(0),AL1(ZRO8),X'02' 16
         DC    CL5'XR',AL1(RR),AL1(0),AL1(0),AL1(ZRO8),X'02' 17
         DC    CL5'LR',AL1(RR),AL1(0),AL1(0),AL1(0),X'02' 18
         DC    CL5'CR',AL1(RR),AL1(0),AL1(0),AL1(CPR),X'02' 19
         DC    CL5'AR',AL1(RR),AL1(0),AL1(0),AL1(ARITH),X'02' 1A
         DC    CL5'SR',AL1(RR),AL1(0),AL1(0),AL1(ARITH),X'02' 1B
         DC    CL5'MR',AL1(RR),AL1(0),AL1(EPR),AL1(0),X'02' 1C
         DC    CL5'DR',AL1(RR),AL1(0),AL1(EPR),AL1(0),X'02' 1D
         DC    CL5'ALR',AL1(RR),AL1(0),AL1(0),AL1(0),X'02' 1E
         DC    CL5'SLR',AL1(RR),AL1(0),AL1(0),AL1(0),X'02' 1F
         DC    CL5'LPDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 20
         DC    CL5'LNDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 21
         DC    CL5'LTDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 22
         DC    CL5'LCDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 23
         DC    CL5'HDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02' 24
         DC    CL5'LRDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02' 25
         DC    CL5'MXR',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02' 26
         DC    CL5'MXDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02' 27
         DC    CL5'LDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02' 28
         DC    CL5'CDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(CPR),X'02' 29
         DC    CL5'ADR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 2A
         DC    CL5'SDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 2B
         DC    CL5'MDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02' 2C
         DC    CL5'DDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02' 2D
         DC    CL5'AWR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 2E
         DC    CL5'SWR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 2F
         DC    CL5'LPER',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 30
         DC    CL5'LNER',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 31
         DC    CL5'LTER',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 32
         DC    CL5'LCER',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 33
         DC    CL5'HER',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02' 34
         DC    CL5'LRER',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02' 35
         DC    CL5'AXR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 36
         DC    CL5'SXR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 37
         DC    CL5'LER',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02' 38
         DC    CL5'CER',AL1(RR),AL1(FLTPT),AL1(0),AL1(CPR),X'02' 39
         DC    CL5'AER',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 3A
         DC    CL5'SER',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 3B
         DC    CL5'MER',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02' 3C
         DC    CL5'DER',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02' 3D
         DC    CL5'AUR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 3E
         DC    CL5'SUR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 3F
         DC    CL5'STH',AL1(RX),AL1(0),AL1(E2+S2),AL1(0),X'04' 40
         DC    CL5'LA',AL1(RX),AL1(0),AL1(0),AL1(0),X'04' 41
         DC    CL5'STC',AL1(RX),AL1(0),AL1(S2),AL1(0),X'04' 42
         DC    CL5'IC',AL1(RX),AL1(0),AL1(0),AL1(0),X'04' 43
         DC    CL5'EX',AL1(RX),AL1(0),AL1(E2+S2),AL1(0),X'04' 44
         DC    CL5'BAL',AL1(RX),AL1(0),AL1(E2),AL1(0),X'04' 45
         DC    CL5'BCT',AL1(RX),AL1(0),AL1(E2+S2),AL1(0),X'04' 46
         DC    CL5'BC',AL1(CONDBR),AL1(0),AL1(E2),AL1(0),X'04' 47
         DC    CL5'LH',AL1(RX),AL1(0),AL1(E2),AL1(0),X'04' 48
         DC    CL5'CH',AL1(RX),AL1(0),AL1(E2),AL1(CPR),X'04' 49
         DC    CL5'AH',AL1(RX),AL1(0),AL1(E2),AL1(ARITH),X'04' 4A
         DC    CL5'SH',AL1(RX),AL1(0),AL1(E2),AL1(ARITH),X'04' 4B
         DC    CL5'MH',AL1(RX),AL1(0),AL1(E2),AL1(0),X'04' 4C
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    CL5'CVD',AL1(RX),AL1(0),AL1(E8+S2),AL1(0),X'04' 4E
         DC    CL5'CVB',AL1(RX),AL1(0),AL1(E8),AL1(0),X'04' 4F
         DC    CL5'ST',AL1(RX),AL1(0),AL1(E4+S2),AL1(0),X'04' 50
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    CL5'N',AL1(RX),AL1(0),AL1(E4),AL1(ZRO8),X'04' 54
         DC    CL5'CL',AL1(RX),AL1(0),AL1(E4),AL1(CPR),X'04' 55
         DC    CL5'O',AL1(RX),AL1(0),AL1(E4),AL1(ZRO8),X'04' 56
         DC    CL5'X',AL1(RX),AL1(0),AL1(E4),AL1(ZRO8),X'04' 57
         DC    CL5'L',AL1(RX),AL1(0),AL1(E4),AL1(0),X'04' 58
         DC    CL5'C',AL1(RX),AL1(0),AL1(E4),AL1(CPR),X'04' 59
         DC    CL5'A',AL1(RX),AL1(0),AL1(E4),AL1(ARITH),X'04' 5A
         DC    CL5'S',AL1(RX),AL1(0),AL1(E4),AL1(ARITH),X'04' 5B
         DC    CL5'M',AL1(RX),AL1(0),AL1(E4+EPR),AL1(0),X'04' 5C
         DC    CL5'D',AL1(RX),AL1(0),AL1(E4+EPR),AL1(0),X'04' 5D
         DC    CL5'AL',AL1(RX),AL1(0),AL1(E4),AL1(0),X'04' 5E
         DC    CL5'SL',AL1(RX),AL1(0),AL1(E4),AL1(0),X'04' 5F
         DC    CL5'STD',AL1(RX),AL1(FLTPT),AL1(0),AL1(0),X'04' 60
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    CL5'MXD',AL1(RX),AL1(FLTPT),AL1(0),AL1(0),X'04' 67
         DC    CL5'LD',AL1(RX),AL1(FLTPT),AL1(0),AL1(0),X'04' 68
         DC    CL5'CD',AL1(RX),AL1(FLTPT),AL1(0),AL1(CPR),X'04' 69
         DC    CL5'AD',AL1(RX),AL1(FLTPT),AL1(0),AL1(ARITH),X'04' 6A
         DC    CL5'SD',AL1(RX),AL1(FLTPT),AL1(0),AL1(ARITH),X'04' 6B
         DC    CL5'MD',AL1(RX),AL1(FLTPT),AL1(0),AL1(0),X'04' 6C
         DC    CL5'DD',AL1(RX),AL1(FLTPT),AL1(0),AL1(0),X'04' 6D
         DC    CL5'AW',AL1(RX),AL1(FLTPT),AL1(0),AL1(ARITH),X'04' 6E
         DC    CL5'SW',AL1(RX),AL1(FLTPT),AL1(0),AL1(ARITH),X'04' 6F
         DC    CL5'STE',AL1(RX),AL1(FLSHT),AL1(0),AL1(0),X'04' 70
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    CL5'LE',AL1(RX),AL1(FLSHT),AL1(0),AL1(0),X'04' 78
         DC    CL5'CE',AL1(RX),AL1(FLSHT),AL1(0),AL1(CPR),X'04' 79
         DC    CL5'AE',AL1(RX),AL1(FLSHT),AL1(0),AL1(ARITH),X'04' 7A
         DC    CL5'SE',AL1(RX),AL1(FLSHT),AL1(0),AL1(ARITH),X'04' 7B
         DC    CL5'ME',AL1(RX),AL1(FLSHT),AL1(0),AL1(0),X'04' 7C
         DC    CL5'DE',AL1(RX),AL1(FLSHT),AL1(0),AL1(0),X'04' 7D
         DC    CL5'AU',AL1(RX),AL1(FLSHT),AL1(0),AL1(ARITH),X'04' 7E
         DC    CL5'SU',AL1(RX),AL1(FLSHT),AL1(0),AL1(ARITH),X'04' 7F
         DC    CL5'SSM',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04' 80
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    CL5'LPSW',AL1(S),AL1(PRIV),AL1(E8),AL1(0),X'04' 82
         DC    CL5'DIAGN',AL1(RS),AL1(PRIV),AL1(0),AL1(0),X'04' 83
         DC    CL5'WRD',AL1(SI),AL1(PRIV),AL1(0),AL1(0),X'04' 84
         DC    CL5'RDD',AL1(SI),AL1(PRIV),AL1(0),AL1(0),X'04' 85
         DC    CL5'BXH',AL1(RS),AL1(0),AL1(E2+S2),AL1(0),X'04' 86
         DC    CL5'BXLE',AL1(RS),AL1(0),AL1(E2+S2),AL1(0),X'04' 87
         DC    CL5'SRL',AL1(RS),AL1(0),AL1(0),AL1(ARITH),X'04' 88
         DC    CL5'SLL',AL1(RS),AL1(0),AL1(0),AL1(ARITH),X'04' 89
         DC    CL5'SRA',AL1(RS),AL1(0),AL1(0),AL1(ARITH),X'04' 8A
         DC    CL5'SLA',AL1(RS),AL1(0),AL1(0),AL1(ARITH),X'04' 8B
         DC    CL5'SRDL',AL1(RS),AL1(0),AL1(EPR),AL1(ARITH),X'04' 8C
         DC    CL5'SLDL',AL1(RS),AL1(0),AL1(EPR),AL1(ARITH),X'04' 8D
         DC    CL5'SRDA',AL1(RS),AL1(0),AL1(EPR),AL1(ARITH),X'04' 8E
         DC    CL5'SLDA',AL1(RS),AL1(0),AL1(EPR),AL1(ARITH),X'04' 8F
         DC    CL5'STM',AL1(RS),AL1(0),AL1(E4+S2),AL1(0),X'04' 90
         DC    CL5'TM',AL1(SI),AL1(0),AL1(0),AL1(ARITH),X'04' 91
         DC    CL5'MVI',AL1(SI),AL1(0),AL1(S2),AL1(0),X'04' 92
         DC    CL5'TS',AL1(S),AL1(0),AL1(0),AL1(0),X'04' 93
         DC    CL5'NI',AL1(SI),AL1(0),AL1(0),AL1(ZRO8),X'04' 94
         DC    CL5'CLI',AL1(SI),AL1(0),AL1(0),AL1(CPR),X'04' 95
         DC    CL5'OI',AL1(SI),AL1(0),AL1(0),AL1(ZRO8),X'04' 96
         DC    CL5'XI',AL1(SI),AL1(0),AL1(0),AL1(ZRO8),X'04' 97
         DC    CL5'LM',AL1(RS),AL1(0),AL1(E4),AL1(0),X'04' 98
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    CL5' ',AL1(TWO),AL1(0),AL1(0),AL1(0),X'04' 9C
         DC    CL5' ',AL1(TWO),AL1(0),AL1(0),AL1(0),X'04' 9D
         DC    CL5' ',AL1(TWO),AL1(0),AL1(0),AL1(0),X'04' 9E
         DC    CL5' ',AL1(TWO),AL1(0),AL1(0),AL1(0),X'04' 9F
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    CL5'STNSM',AL1(SI),AL1(PRIV),AL1(0),AL1(0),X'04' AC
         DC    CL5'STOSM',AL1(SI),AL1(PRIV),AL1(0),AL1(0),X'04' AD
         DC    CL5'SIGP',AL1(RS),AL1(PRIV),AL1(0),AL1(0),X'04' AE
         DC    CL5'MC',AL1(SI),AL1(0),AL1(0),AL1(0),X'04' AF
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    CL5'LRA',AL1(RX),AL1(PRIV),AL1(0),AL1(0),X'04' B1
         DC    CL5' ',AL1(TWO),AL1(0),AL1(0),AL1(0),X'04' B2
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    CL5'STCTL',AL1(RS),AL1(PRIV),AL1(0),AL1(0),X'04' B6
         DC    CL5'LCTL',AL1(RS),AL1(PRIV),AL1(E4),AL1(0),X'04' B7
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    CL5'CS',AL1(RS),AL1(0),AL1(E4+EPR),AL1(0),X'04' BA
         DC    CL5'CDS',AL1(RS),AL1(0),AL1(E4+EPR),AL1(0),X'04' BB
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR
         DC    CL5'CLM',AL1(RS),AL1(0),AL1(0),AL1(CPR),X'04' BD
         DC    CL5'STCM',AL1(RS),AL1(0),AL1(S2),AL1(0),X'04' BE
         DC    CL5'ICM',AL1(RS),AL1(0),AL1(0),AL1(ZRO8),X'04' BF
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    CL5'MVN',AL1(SS1),AL1(0),AL1(S1),AL1(0),X'06' D1
         DC    CL5'MVC',AL1(SS1),AL1(0),AL1(S1),AL1(0),X'06' D2
         DC    CL5'MVZ',AL1(SS1),AL1(0),AL1(S1),AL1(0),X'06' D3
         DC    CL5'NC',AL1(SS1),AL1(0),AL1(S1),AL1(ZRO8),X'06' D4
         DC    CL5'CLC',AL1(SS1),AL1(0),AL1(0),AL1(CPR),X'06' D5
         DC    CL5'OC',AL1(SS1),AL1(0),AL1(S1),AL1(ZRO8),X'06' D6
         DC    CL5'XC',AL1(SS1),AL1(0),AL1(S1),AL1(ZRO8),X'06' D7
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    CL5'TR',AL1(SS1),AL1(0),AL1(S1),AL1(0),X'06' DC
         DC    CL5'TRT',AL1(SS1),AL1(0),AL1(0),AL1(ZRO8),X'06' DD
         DC    CL5'ED',AL1(SS1),AL1(0),AL1(S1),AL1(ARITH),X'06' DE
         DC    CL5'EDMK',AL1(SS1),AL1(0),AL1(S1),AL1(ARITH),X'06' DF
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    CL5'SRP',AL1(SS2),AL1(0),AL1(S1),AL1(ARITH),X'06' F0
         DC    CL5'MVO',AL1(SS2),AL1(0),AL1(S1),AL1(0),X'06' F1
         DC    CL5'PACK',AL1(SS2),AL1(0),AL1(S1),AL1(0),X'06' F2
         DC    CL5'UNPK',AL1(SS2),AL1(0),AL1(S1),AL1(0),X'06' F3
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    CL5'ZAP',AL1(SS2),AL1(0),AL1(S1),AL1(ARITH),X'06' F8
         DC    CL5'CP',AL1(SS2),AL1(0),AL1(0),AL1(CPR),X'06' F9
         DC    CL5'AP',AL1(SS2),AL1(0),AL1(S1),AL1(ARITH),X'06' FA
         DC    CL5'SP',AL1(SS2),AL1(0),AL1(S1),AL1(ARITH),X'06' FB
         DC    CL5'MP',AL1(SS2),AL1(0),AL1(S1),AL1(0),X'06' FC
         DC    CL5'DP',AL1(SS2),AL1(0),AL1(S1),AL1(0),X'06' FD
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR
         DC    X'FFFF'                 TABLE END
*
*
*
DBLOP    DS    0CL12                   TWO-BYTE OP-CODE TABLE
         DC    X'9C00',CL5'SIO',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'9C01',CL5'SIOF',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'9D00',CL5'TIO',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'9D01',CL5'CLRIO',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'9E00',CL5'HIO',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'9E01',CL5'HDV',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'9F00',CL5'TCH',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B20B',CL5'IPK',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B20D',CL5'PTLB',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B213',CL5'RRB',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B204',CL5'SCK',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B206',CL5'SCKC',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B208',CL5'SPT',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B210',CL5'SPX',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B20A',CL5'SPKA',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B203',CL5'STIDC',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B205',CL5'STCK',AL1(S),AL1(0),AL1(E8+S2),AL1(0),X'04'
         DC    X'B207',CL5'STCKC',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B212',CL5'STAP',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B202',CL5'STIDP',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B209',CL5'STPT',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'B211',CL5'STPX',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'
         DC    X'FFFF'                 TABLE END
*
*
*
SVCOP    DS    0CL15                   SVC NAME TABLE
         DC    AL1(0),CL14'EXCP/XDAP'
         DC    AL1(1),CL14'WAIT/WAITR'
         DC    AL1(2),CL14'POST/PRTOV'
         DC    AL1(3),CL14'EXIT'
         DC    AL1(4),CL14'GETMAIN'
         DC    AL1(5),CL14'FREEMAIN'
         DC    AL1(6),CL14'LINK'
         DC    AL1(7),CL14'XCTL'
         DC    AL1(8),CL14'LOAD'
         DC    AL1(9),CL14'DELETE'
         DC    AL1(10),CL14'GET/FREEMAIN R'
         DC    AL1(11),CL14'TIME'
         DC    AL1(12),CL14'SYNCH'
         DC    AL1(13),CL14'ABEND'
         DC    AL1(14),CL14'SPIE'
         DC    AL1(15),CL14'ERREXCP'
         DC    AL1(16),CL14'PURGE'
         DC    AL1(17),CL14'RESTORE'
         DC    AL1(18),CL14'BLDL/FIND'
         DC    AL1(19),CL14'OPEN'
         DC    AL1(20),CL14'CLOSE'
         DC    AL1(21),CL14'STOW'
         DC    AL1(22),CL14'OPEN TYPE J'
         DC    AL1(23),CL14'CLOSE TYPE T'
         DC    AL1(24),CL14'DEVTYPE'
         DC    AL1(25),CL14'TRKBAL'
         DC    AL1(26),CL14'LOCATE, ETC'
         DC    AL1(27),CL14'OBTAIN'
         DC    AL1(28),CL14'CVOL'
         DC    AL1(29),CL14'SCRATCH'
         DC    AL1(30),CL14'RENAME'
         DC    AL1(31),CL14'FEOV'
         DC    AL1(32),CL14'(NO MACRO)'
         DC    AL1(33),CL14'IOHALT'
         DC    AL1(34),CL14'MGCR/QEDIT'
         DC    AL1(35),CL14'WTO/WTOR'
         DC    AL1(36),CL14'WTL'
         DC    AL1(37),CL14'SEGLD/SEGWT'
         DC    AL1(39),CL14'LABEL'
         DC    AL1(40),CL14'EXTRACT'
         DC    AL1(41),CL14'IDENTIFY'
         DC    AL1(42),CL14'ATTACH'
         DC    AL1(43),CL14'CIRB'
         DC    AL1(44),CL14'CHAP'
         DC    AL1(45),CL14'OVLYBRCH'
         DC    AL1(46),CL14'TTIMER'
         DC    AL1(47),CL14'STIMER'
         DC    AL1(48),CL14'DEQ'
         DC    AL1(51),CL14'SNAP/SDUMP'
         DC    AL1(52),CL14'RESTART'
         DC    AL1(53),CL14'RELEX'
         DC    AL1(54),CL14'DISABLE'
         DC    AL1(55),CL14'EOV'
         DC    AL1(56),CL14'ENQ/RESERVE'
         DC    AL1(57),CL14'FREEDBUF'
         DC    AL1(58),CL14'RELBUF/REQBUF'
         DC    AL1(59),CL14'OLTEP'
         DC    AL1(60),CL14'(E)STAE/STAI'
         DC    AL1(61),CL14'IKJEGS6A'
         DC    AL1(62),CL14'DETACH'
         DC    AL1(63),CL14'CHKPT'
         DC    AL1(64),CL14'RDJFCB'
         DC    AL1(66),CL14'BTAMTEST'
         DC    AL1(67),CL14'SYNADAF'
         DC    AL1(68),CL14'SYNADRLS'
         DC    AL1(69),CL14'BSP'
         DC    AL1(70),CL14'GSERV'
         DC    AL1(71),CL14'ASGNBFR, ETC'
         DC    AL1(72),CL14'CHATR'
         DC    AL1(73),CL14'SPAR'
         DC    AL1(74),CL14'DAR'
         DC    AL1(75),CL14'DQUEUE'
         DC    AL1(76),CL14'(NO MACRO)'
         DC    AL1(78),CL14'(NO MACRO)'
         DC    AL1(79),CL14'STATUS'
         DC    AL1(81),CL14'SETPRT'
         DC    AL1(82),CL14'DASDR'
         DC    AL1(83),CL14'SMFWTM'
         DC    AL1(84),CL14'GRAPHICS'
         DC    AL1(85),CL14'DDRSWAP'
         DC    AL1(86),CL14'ATLAS'
         DC    AL1(87),CL14'DOM'
         DC    AL1(88),CL14'MOD88'
         DC    AL1(91),CL14'VOLSTAT'
         DC    AL1(92),CL14'TCBEXCP'
         DC    AL1(93),CL14'TGET/TPUT'
         DC    AL1(94),CL14'STCC'
         DC    AL1(95),CL14'SYSEVENT'
         DC    AL1(96),CL14'STAX'
         DC    AL1(97),CL14'TSO TEST'
         DC    AL1(98),CL14'PROTECT'
         DC    AL1(99),CL14'DDDYNAM'
         DC    AL1(100),CL14'IKJEFFIB'
         DC    AL1(101),CL14'QTIP'
         DC    AL1(102),CL14'AQCTL'
         DC    AL1(103),CL14'XLATE'
         DC    AL1(104),CL14'TOPCTL'
         DC    AL1(105),CL14'IMAGLIB'
         DC    AL1(107),CL14'MODESET'
         DC    AL1(109),CL14'ESR TYPE 4'
         DC    AL1(110),CL14'DSTATUS'
         DC    AL1(111),CL14'(NO MACRO)'
         DC    AL1(112),CL14'PGRLSE'
         DC    AL1(113),CL14'PGFIX,CL14' ETC'
         DC    AL1(114),CL14'EXCPVR'
         DC    AL1(116),CL14'ESR TYPE 1'
         DC    AL1(117),CL14'DEBCHK'
         DC    AL1(119),CL14'TESTAUTH'
         DC    AL1(120),CL14'GETMAIN/FREEMAIN'
         DC    AL1(121),CL14'VSAM'
         DC    AL1(122),CL14'EVENTS'
         DC    AL1(123),CL14'PURGEDQ'
         DC    AL1(124),CL14'TPIO'
         DC    AL1(125),CL14'EVENTS'
         DC    AL1(126),CL14'MSS INTERFACE'
         DC    AL1(200),CL14'<< USER SVC >>'
         DC    AL1(201),CL14'<< USER SVC >>'
         DC    AL1(202),CL14'<< USER SVC >>'
         DC    AL1(203),CL14'<< USER SVC >>'
         DC    AL1(204),CL14'<< USER SVC >>'
         DC    AL1(205),CL14'<< USER SVC >>'
         DC    AL1(206),CL14'<< USER SVC >>'
         DC    AL1(207),CL14'<< USER SVC >>'
         DC    AL1(208),CL14'<< USER SVC >>'
         DC    AL1(209),CL14'<< USER SVC >>'
         DC    AL1(210),CL14'<< USER SVC >>'
         DC    AL1(211),CL14'<< USER SVC >>'
         DC    AL1(212),CL14'<< USER SVC >>'
         DC    AL1(213),CL14'<< USER SVC >>'
         DC    AL1(214),CL14'<< USER SVC >>'
         DC    AL1(215),CL14'<< USER SVC >>'
         DC    AL1(216),CL14'<< USER SVC >>'
         DC    AL1(217),CL14'<< USER SVC >>'
         DC    AL1(218),CL14'<< USER SVC >>'
         DC    AL1(219),CL14'<< USER SVC >>'
         DC    AL1(220),CL14'<< USER SVC >>'
         DC    AL1(221),CL14'<< USER SVC >>'
         DC    AL1(222),CL14'<< USER SVC >>'
         DC    AL1(223),CL14'<< USER SVC >>'
         DC    AL1(224),CL14'<< USER SVC >>'
         DC    AL1(225),CL14'<< USER SVC >>'
         DC    AL1(226),CL14'<< USER SVC >>'
         DC    AL1(227),CL14'<< USER SVC >>'
         DC    AL1(228),CL14'<< USER SVC >>'
         DC    AL1(229),CL14'<< USER SVC >>'
         DC    AL1(230),CL14'<< USER SVC >>'
         DC    AL1(231),CL14'<< USER SVC >>'
         DC    AL1(232),CL14'<< USER SVC >>'
         DC    AL1(233),CL14'<< USER SVC >>'
         DC    AL1(234),CL14'<< USER SVC >>'
         DC    AL1(235),CL14'<< USER SVC >>'
         DC    AL1(236),CL14'<< USER SVC >>'
         DC    AL1(237),CL14'<< USER SVC >>'
         DC    AL1(238),CL14'<< USER SVC >>'
         DC    AL1(239),CL14'<< USER SVC >>'
         DC    AL1(240),CL14'<< USER SVC >>'
         DC    AL1(241),CL14'<< USER SVC >>'
         DC    AL1(242),CL14'<< USER SVC >>'
         DC    AL1(243),CL14'<< USER SVC >>'
         DC    AL1(244),CL14'<< USER SVC >>'
         DC    AL1(245),CL14'<< USER SVC >>'
         DC    AL1(246),CL14'<< USER SVC >>'
         DC    AL1(247),CL14'<< USER SVC >>'
         DC    AL1(248),CL14'<< USER SVC >>'
         DC    AL1(249),CL14'<< USER SVC >>'
         DC    AL1(250),CL14'<< USER SVC >>'
         DC    AL1(251),CL14'<< USER SVC >>'
         DC    AL1(252),CL14'<< USER SVC >>'
         DC    AL1(253),CL14'<< USER SVC >>'
         DC    AL1(254),CL14'<< USER SVC >>'
         DC    AL1(255),CL14'<< USER SVC >>'
         DC    X'FF'                   END OF TABLE
./ ADD NAME=REQU     0100-94267-94267-1200-00040-00040-00000-CONYERS
         MACRO
&LABEL   REQU &RF,&RL
.* MACRO TO GENERATE EQUATES FOR REGISTERS: 0(R0) TO 15(R15).
.* IF NO OPERAND IS SPECIFIED 0-15 ASSUMED.
.* TWO OPERANDS MAY BE CODED FOR A SERIES OF REGISTERS.
.* ERROR CHECKING IS FOR LESS THAN 0 OR GREATER THAN 15.
.* IN CASE OF ERROR CONDITION, 0-15 ARE GENERATED WITH MNOTE.
         LCLA  &NUM,&MAX
         AIF   (T'&RF EQ 'O').ALL
         AIF   ('&RF' LT '0' OR '&RL' GT '15').OPERR
         AIF   ('&RL' LT '&RF').OPERR
         AIF   (N'&SYSLIST NE 2).OPERR
&NUM     SETA &RF
&MAX     SETA  &RL
         AGO   .GEN
.OPERR   ANOP
         MNOTE 0,'IMPROPER REGISTER SPECIFICATION. R0-R15 GENERATED.'
.ALL     ANOP
&NUM     SETA  0
&MAX     SETA  15
.GEN     ANOP
*****   EQUATES FOR REGISTERS   *****
.LOOP    ANOP
R&NUM    EQU   &NUM
         AIF   ('&NUM' EQ '&MAX').END
&NUM     SETA  &NUM+1
         AGO   .LOOP
.END     ANOP
         SPACE 2
MASK80   EQU   X'80'
MASK40   EQU   X'40'
MASK20   EQU   X'20'
MASK10   EQU   X'10'
MASK08   EQU   X'08'
MASK04   EQU   X'04'
MASK02   EQU   X'02'
MASK01   EQU   X'01'
         EJECT
         MEXIT
         MEND
./ ADD NAME=TEST     0100-94267-94267-1200-00010-00010-00000-CONYERS
//M301DISA JOB (T201,B-71),'CONYERS - TEST',NOTIFY=AUDIT01,CLASS=A,
//         MSGLEVEL=(1,1),MSGCLASS=T,TIME=(,10)
//SHOWALC  EXEC PGM=DISASM,PARM=(SUPVR,FLTPT)
//STEPLIB  DD DSN=M3.M301XXDS.LOAD,DISP=SHR
//SYSLIB   DD DSN=M3.M301XXMV.LOAD,DISP=SHR
//SYSPRINT DD SYSOUT=*
//*YSPUNCH DD DISP=SHR,DSN=M3.M301XXDS.CNTL($DODIAG)
//SYSOUT   DD SYSOUT=*
//SYSIN    DD *
DODIAG DODIAG
