JES2 EXIT 6 AT SCE
------------------

April 24, 1998

This doc describes the JES2 exit 6 (converter exit) in use at
Southern California Edison Co.  Originally obtained before my
time from John V. Hooper at Northwestern Bank, it's been modified
heavily over the years to do the things we've needed.

Please remember that the code is specifically tailored to our
environment, and would never work as-is for anyone else.  Still, it
may provide chunks of code someone may want to copy and modify for
their own use.

Also remember that this code was modified under pressure, as I
assume all production code is.  I did most of the mods myself over
many years, and was happy enough when the code worked - not caring too
much how elegant, concise, or efficient the code might be.  I'm
certainly not a JES2 or Assembler expert, but when something works,
what can you say? :)

Good Luck!
Tom Brennan

Southern California Edison Co.
2255 Walnut Grove Ave.
Rosemead, CA   91770
626-302-7212
brennatg@sce.com  or  tombrennan@earthlink.net

Or yell at me in the bit.listserv.ibm-main newsgroup - a great place
for people like me to listen to the real experts.


=======================================================================


This code is free for anyone to use or copy, as long as you don't
hold me or SCE responsible for any outcome (but you knew that already)


=======================================================================

Background Notes About the SCE Environment
------------------------------------------

 Datagroups
 ----------

   At SCE we have an 8 byte 'datagroup name' that is associated
   with a particular group of users.  Originally designed before SMS
   to group user data on a specific set of volumes, it evolved to
   include a lot more information about the user group - including
   the computer system the group belongs to, what catalogs they
   use, and even the job classes associated with the group.

 Catalogs
 --------

   In the 80's we seemed to be buying or upgrading machines every
   other month, so we were often moving user groups (their dasd)
   from one system to another.  We found the easiest method to do
   this was by pre-import-connecting catalogs in the datagroup onto
   all our computer systems (no dasd was shared at SCE at that
   time), and then defining each alias of the 'home' system on all
   systems.  This way, when moving groups all we had to do was vary
   dasd off one system, and on to another.  The catalog pointers were
   already setup if we did our jobs right.  The reason I mention
   this is because there is code in exit 6 to support some problems
   caused by those 'dummy' catalog alias.

 ACF2 or RACF ?
 --------------

   The exit originally used ACF2 to verify the user's ability to
   do certain 'protected' JCL functions.  Later this code was
   changed to use either ACF2 or RACF (depending on what was
   running) and after that, only RACF.  You'll probably see
   remnants of ACF2 names throughout the code and comments, although
   only RACF code really remains.  Clean up?  What's that?

 Integrity and Security
 ----------------------

   This code is not perfect, and doesn't have to be at SCE.  If
   it fails to see tapes in the jobstream and places a tape
   job into a non-tape class (for example), nobody will be
   admonished.  As long as it catches 98% of the tape jobs, we are
   in pretty good shape.  Same philosophy goes for the RACF
   protected items.

 Other notes
 -----------

   The exit is passed data from our exit 4 (through the JCT user
   fields), makes use of our CSA datagroup table, calls SLS code for
   tape location information, calls RACF for access information, etc.
   Obviously all this code will have to be removed or altered for
   your own environment.


=======================================================================

What Does Our Exit 6 Do For Us?
-------------------------------

  o  Selects an appropriate job class, based on the following items:

      -  the datagroup name passed to us by exit 4
      -  the original CLASS= card (some classes are not altered)
      -  the number of tapes used in the job
      -  the estimated CPU time the job will use
      -  other stuff - I forgot!

  o  Enforces a few JCL standards, such as:

      -  accounting information

  o  Limits (by RACF) ability to use certain JCL items:

      -  production datagroup names
      -  production job and sysout classes
      -  time=1440
      -  tape retention over 120 days
      -  programs such as AMASPZAP (leftover from long ago)
      -  tape robot usage (the silos)
      -  jobcat and stepcat

  o  Creates /*SETUP messages for each tape that is not already
     in the silo.

  o  Displays a summary of job steps, including:

      - step and proc name
      - number of tapes used by this step
      - estimated time for this step
      - region size for this step

  o  For TSO and STC's, this exit calls a routine to gather
     the room number, programmer name, and accounting string,
     and move them into the JCT.  Also adds the datagroup name
     as the 10th accounting field, so it's available in the
     ACT for later use by any program.

  o  Checked each non-new dataset name in the job to make sure
     that the catalog for the high-level-index was online to
     the system converting the job.  With our unusual (abnormal?)
     idea of dummy aliases on all systems, this helped eliminate
     a lot of catalog dasd mount requests when a user typed a
     high-level belonging to another system.

  o  The exit also (unfortunately) must check simple items like
     the length of step names and dataset names, because it needs
     to put these items in a table.  Errors in these lengths result
     in errors from Exit 6, which can be confusing to users who
     normally get a real JES2 error message for those mistakes.


=======================================================================

Strange Things I Did When Testing
---------------------------------

  o  I remember IPLing each time I made a code change until one
     of the senior programmers mentioned all I needed was an
     LLA refresh (our lmod is in linklist) and a JES2 hot start.
     As we say in Los Angeles - duh...

  o  I never could get an IF per trap to match with code loaded
     into the JES2 address space.  Instead I used Omegamon to
     cross-memory-zap some zeros at appropriate places in the
     running code, and examine the resulting 0C1 dumps.  Don't
     do this if the boss is watching though.  :)

  o  I had a few assembler variables that would change the code
     to include some debugging features.  They are:

       &TRACE=YES/NO

         I replaced strategic "label DS 0H" statements with
         a "label LABEL" macro statement.  With TRACE=YES, these
         would expand into a WTO to show me where the exit is
         at.  Not for the faint of heart or the short on
         WTO buffer's - but you get the idea.

       &ESTAE=YES/NO

         This program has an ESTAE routine, as recommended by
         the IBM doc.  But I don't think it really needs one.
         The converter runs under it's own TCB and I believe
         everything our exit does is 'cleanupable' by RTM.
         Turn it off if you use the zero-zap debugging method.
         And consider removing it if you don't do anything in your
         exit that RTM can't clean up.

       &TEST=YES/NO

         This is (by far) the strangest of my development
         methods.  When TEST=YES, certain assembled items are
         bypassed or replaced with code that works under TSO.
         I then made a driver program that would call the
         exit6 code under TSO TEST, passing parameters to
         simulate a call from JES2.  I had to supply a JCT
         and other control blocks that the exit needed, but
         of course only the fields the exit looked at needed
         to be filled in those blocks.

         Internal text from various test jobs was gathered by
         turning INPUT ON in SDSF and printing the visible
         internal text to a dataset read by the driver program.

         Am I crazy?  I think this proves it!  But running the
         exit under TEST saved countless hours of 0C1 zaps
         and JES2 restarts when working on the more complicated
         code.  Plus, I could work this way during the day and
         without the risk of a secondary JES.


=======================================================================

Descriptions of Selected Code Areas
-----------------------------------

Well, if you've read this far I guess you must be at least a little
bit interested in the code we use.  Maybe I can help out a bit by
going over a few spots in the program and describing what that area
does, what I think it does, or just give some general comments:

Mainline Code
-------------

 Label     Description
 --------  -----------------------------------------------------------

 EXIT6     Ok, ok.  The program uses 3 base registers.  Before MVS
           I worked with microprocessors, and I never heard of this
           4K segment problem.  My solution was to just keep adding
           base registers until I ran out.  I figure I can add
           about 12 more still.

 CHKFAIL   Exit 6 is passed internal text a line at a time.  If
           there was a problem and we're going to cancel the job
           anyway, we don't bother counting tapes or checking
           anything else.  Kind of like the old compilers that
           would give you one error only at each run.  Don't ask
           me why we did it this way.  I don't remember.

 GETMAIN   Get some storage and divide it up into separate areas.
           At one level of this program, I did a getmain for 32k,
           then goofed and freemain'ed only 3k. Each job submission
           left 29K in the JES2 address space.  I think that's when
           I learned that RTM cleaned up nicely after a production
           JES2 hot start (lucky for me!)

           The getmain is done once per job, and the address saved
           in a JCT user field.

 CHECKJCT  All sorts of nice bits are passed to the exit to indicate
           where we are in the current job processing and what kind
           of statement we are looking at.

 JOBCARD   A large section that checks the jobcard info, etc.  One
           advantage exit 6 has over other JCL scan exit points is
           that the entire card (including continuation) is converted
           to a single line of internal text.  Much easier to parse,
           but we still have to parse.

 EXECARD   This section checks EXEC card info, such as step time
           and region size.  Also, an EXEC entry is placed into a large
           table so we can refer back to it if needed.  I believe
           most of this referback code came from the original writer.
           Thank you wherever you are.  As with the job card,
           items requiring special authority will check RACF.

 JDTCARD   I believe this section gets called for OUTPUT cards, which
           could be used to indicate sysout class.  We check for this
           and make sure the user has the appropriate RACF auth to
           use that class.

 DDCARD    By far the largest section of code, this handles all the
           DD parms we are interested in, checks RACF authority to
           those items, LOCATE's dataset names as needed, issues
           /*SETUP card WTO's, etc. etc.

 PROCARD   Handles PROC cards.  Not much to do other than check a
           couple of items and save the entry in the large table
           for later reference.

 EOF       At this point we are done with the job stream, and we
           can look things over and set the job class, print
           summary lines to the joblog, etc.

 ENDOFIT   Clean up any mess we made and return to JES2


Subroutines of Note
-------------------

 REFBACK   Mostly unmodified from the original code, this section
           searches the table we create of exec cards, dd cards,
           etc, when there's some kind of dataset referback.

 SETUP     Handles automatic tape /*SETUP processing

 CATLOC    Makes sure that the catalog for the dataset we are
           checking is online to this system.  This code is needed
           because of the way we duplicated aliases on all systems,
           even though the catalog is only available on one system.
           I doubt if anyone but us needs this code, and the
           associated UCBSEAR search routine.

 UCBSEAR   Obviously this code has been bypassed - probably about
           the time UCB's became dynamic.  But you can get an idea
           of the trouble we had to go to because of our datagrouping
           methods.

 GETDGN    This routing is passed an 8 character datagroup name and
           returns lots of data associated with that datagroup,
           including a jobclass list (used for jobclass selection).
           Of course, this only works at SCE.

 SCECHECK  Both these routines call RACF to init and check
 RACFINIT  authorization to various items.  As you can see sometimes
           I used SAF routines (RACROUTE) and other times called
           RACF directly (RACINIT).  Who knows why - probably because
           I was learning the macros at the time.  Should I go back
           and fix it?  Nawww!  Not until we get Top Secret.

 ACCOUNT   Adds parms from RACF to account information in JCT.
           Mostly this was used so TSO and STC tasks would have
           some decent routing identification on their sysout.

 TSORTN    Called for TSU's and STC's to gather and store
           account and routing info.


=======================================================================

That's it!
----------

The rest you can determine from the code itself, if you are
interested.  Hopefully, this example may save you some time and show
you how to do a few things during JES2 exit 6 converter processing.

And it may also show you a few things NOT to do!  :)

Good luck with your exit coding!
Tom Brennan


**************************** Bottom of Data ****************************
