//*********************************************************************
//*     ASSEMBLE JES2 EXIT 6
//*********************************************************************
//*
//ASM EXEC HLASMCL,PARM.ASM='OBJECT,NODECK,XREF(SHORT),USING(WARN(0))',
//         PARM.LKED='LIST,LET,XREF'
//ASM.SYSLIB DD DSN=OSR24.SMPE.MVST100.SMPMTS,DISP=SHR
//           DD DSN=OSR24.SMPE.MVST100.SMPSTS,DISP=SHR
//           DD DSN=OSR24.SYS1.SHASMAC,DISP=SHR
//           DD DSN=TED000.MACLIB,DISP=SHR
//           DD DSN=TED000.INSTALL.HSC.SLSMAC,DISP=SHR
//           DD DSN=SYS1.MACLIB,DISP=SHR
//           DD DSN=SYS1.AMODGEN,DISP=SHR
//LKED.SYSLMOD DD DSN=USERID.T.LOAD(SCEX006),DISP=SHR
//ASM.SYSIN  DD *
         TITLE 'JES2 EXIT 6 - JOBCLASSING EXIT'
**********************************************************************
**********************************************************************
**********************************************************************
***
***
***
***
***                   J E S 2   E X I T   6
***
***
***
***
**********************************************************************
**********************************************************************
**********************************************************************
         TITLE 'JES2 EXIT 6 - CHANGES'
**********************************************************************
*                           C H A N G E S
*---------------------------------------------------------------------
* 03/01/85 - ADDED CODE TO VALIDATE SYSOUT CLASS CHARACTER. MUST BE A
*            A-Z OR 0-9 CHARACTER BEFORE CALLING ACF VALIDATION.
*                     CHANGES DENOTED BY TGB01     T.BRENNAN
*---------------------------------------------------------------------
* 03/05/85 - TOOK OUT TSO MESSAGE CODE SO THAT 120 DAY TAPE RETENTION
*            IS NOW ENFORCED.
*                     CHANGES DENOTED BY TGB02     T.BRENNAN
*---------------------------------------------------------------------
* 03/29/85 - ADDED CODE TO PRINT BETTER MESSAGE INDICATING THAT THE
*            LOGINID RECORD WAS NOT OBTAINABLE.
*                     CHANGES DENOTED BY TGB03     T.BRENNAN
*---------------------------------------------------------------------
* 03/29/85 - SET JCTUSER3 TO X'01' AT JOBERROR LABEL, SO THAT WE
*            WILL NOT PROCESS ANY FURTHER IF AN ERROR OCCURS.
*                     CHANGES DENOTED BY TGB04     T.BRENNAN
*---------------------------------------------------------------------
* 04/04/85 - IF JCT TYPRUN=SCAN OR TYPRUN=COPY BITS ARE SET THEN WE
*            BYPASS EXIT6 PROCESSING COMPLETELY.
*                     CHANGES DENOTED BY TGB05     T.BRENNAN
*---------------------------------------------------------------------
* 04/08/85 - IN ESTAE EXIT, SET JCTUSER3 TO X'01' SO EXIT 6 WILL
*            NOT TRY TO GETMAIN AGAIN AFTER ABENDING
*                     CHANGES DENOTED BY TGB06     T.BRENNAN
*---------------------------------------------------------------------
* 04/11/85 - ADDED 'LABEL' MACRO TO HELP DEBUGGING. SEE MACRO
*            COMMENTS FOR HOW TO USE IT.
*                     CHANGES DENOTED BY TGB07     T.BRENNAN
*---------------------------------------------------------------------
* 04/11/85 - CREATED SEPARATE ENTRY FOR MESSAGES SO THIS PROGRAM
*            WOULD ASSEMBLE WITHOUT MORE BASE REGISTERS.
*                     CHANGES DENOTED BY TGB08     T.BRENNAN
*---------------------------------------------------------------------
* 04/15/85 - ADDED CODE TO GET ROOM NUMBER AND PROGRAMMER NAME FOR
*            TSO JOBS (FROM ACF 'UMAIL' AND NAME)
*            (CURRENTLY NOT ACTIVE)
*                     CHANGES DENOTED BY TGB09     T.BRENNAN
*---------------------------------------------------------------------
* 04/23/85 - ADDED HIGH-LEVEL INDEX TABLE TO 'CATLOC' ROUTINE SO THAT
*            WE DON'T NEED TO CHECK TO SEE IF A CATALOG IS ONLINE
*            MORE THAN ONCE.
*                     CHANGES DENOTED BY TGB10     T.BRENNAN
*---------------------------------------------------------------------
*    SMP PTF = JX00624 CONTAINS ALL MODIFICATIONS ABOVE
*---------------------------------------------------------------------
* 06/18/85 - REWROTE THE ACF2 INTERFACE TO CALL A SEPARATE ENTRY
*            POINT AND TO IGNORE THE NON-CANCEL FLAG, AND OTHER
*            ACF RELATED CHANGES.
*                     CHANGES DENOTED BY TGB11     T.BRENNAN
*---------------------------------------------------------------------
* 07/05/85 - ELIMINATED DUPLICATE CODE, MADE CODE EASIER TO WORK WITH
*            AND DEBUG, CREATED TSO TEST DRIVER ROUTINE, AMONG OTHER
*            THINGS. TO MANY CHANGES TO HAVE A 'TGB' IDENTIFIER.
*                                                  T.BRENNAN
*---------------------------------------------------------------------
* 07/05/85 - ADDED CODE TO PRINT ACF2 MESSAGE IF LOGONID IS NOT
*            AVAILABLE.
*                     CHANGES DENOTED BY TGB12     T.BRENNAN
*---------------------------------------------------------------------
* 07/05/85 - ADDED CODE TO FIX BUG IN EXPDT CODE - (YEAR WRAP)
*            ALSO SET RETPD AND EXPDT CODE TO USE DECBIN SUBROUTINE
*                     CHANGES DENOTED BY TGB13     T.BRENNAN
*---------------------------------------------------------------------
* 07/05/85 - MODIFIED STEP MESSAGE CODE TO PRINT REGION SIZE CORRECTLY
*            (IN K OR M) AND IF LESS THAN 1 K PRINT 1K (NOT 0K)
*                     CHANGES DENOTED BY TGB14     T.BRENNAN
*---------------------------------------------------------------------
* 07/05/85 - ADDED CODE SO THAT JOBS WILL STILL BE SUBMITTED IF ACF
*            IS NOT ACTIVE, OR THE EXIT6 TABLE CANNOT BE LOADED
*                     CHANGES DENOTED BY TGB15     T.BRENNAN
*---------------------------------------------------------------------
* 07/05/85 - ADDED CODE SO THAT 'OSSG' CAN SUBMIT JOBS THAT WILL
*            BYPASS EXIT6 IN AN EMERGENCY.
*                     CHANGES DENOTED BY TGB16     T.BRENNAN
*---------------------------------------------------------------------
* 07/05/85 - ADDED 'SYSOUT' LOOKASIDE BUFFER SO THAT SYSOUT CLASS ONLY
*            NEEDS TO CALL ACF ONCE FOR VALIDATION.
*                     CHANGES DENOTED BY TGB17     T.BRENNAN
*---------------------------------------------------------------------
* 07/08/85 - TOOK OUT SOME CODE SO THAT VOL=REF= WORKS EVEN IF THE
*            VOLSER WAS NOT SPECIFIED ON THE REFERENCED DDNAME.
*                     CHANGES DENOTED BY TGB18     T.BRENNAN
*---------------------------------------------------------------------
* 09/18/85 - ADDED CODE TO OBTAIN DATAGROUP NAME FROM ACF2 AND XEQ CARD
*            AND CREATE 10TH ACCOUNT SUBPARM IN INTERNAL TEXT
*                     CHANGES DENOTED BY TGB19     T.BRENNAN
*---------------------------------------------------------------------
********* SMP PTF = JX00626 CONTAINS ALL MODIFICATIONS ABOVE
*---------------------------------------------------------------------
* 10/16/85 - PUT DUMMY DD PROCESSING BACK IN (IT GOT TAKEN OUT
*            SOMEHOW).
*                     CHANGES DENOTED BY TGB20     T.BRENNAN
*---------------------------------------------------------------------
********* SMP PTF = JX00627 CONTAINS ALL MODIFICATIONS ABOVE
*---------------------------------------------------------------------
* 11/06/85 - REWORKED RETPD AND EXPDT PROCESSING TO CHECK ACF
*            RESOURCE RULE 'R-MSC-RETPD'
*                     CHANGES DENOTED BY TGB21     T.BRENNAN
*---------------------------------------------------------------------
* 11/06/85 - FIXED PROBLEM WITH EXIT6 CONTINUING PROCESSING EVEN IF
*            THE CONVERTER GOT AN ERROR (AND CAUSING AN 0C4)
*                     CHANGES DENOTED BY TGB22     T.BRENNAN
*---------------------------------------------------------------------
* 11/06/85 - MODIFIED TO USE SCE COMMON DATAGROUP NAME LOOKUP ROUTINE
*            'SCEDGLKP' RATHER THAN EXIT6 TABLE.
*                     CHANGES DENOTED BY TGB23     T.BRENNAN
*---------------------------------------------------------------------
* 11/21/85 - FIXED LOCATE PROBLEM. DATASETS WITH MEMBER NAMES WERE
*            BEING TREATED LIKE GDG'S (A GENERIC LOCATE WAS DONE)
*                     CHANGES DENOTED BY TGB24     T.BRENNAN
*---------------------------------------------------------------------
* 11/21/85 - MODIFIED LOCATE TO LOOK AT ONLY THE (+0) GDG DATASET IF
*            NO GDG OFFSET WAS GIVEN.
*                     CHANGES DENOTED BY TGB25     T.BRENNAN
*---------------------------------------------------------------------
* 12/02/85 - ADDED CODE TO PRINT USERID WHEN USER IS UNAUTORIZED FOR
*            A CERTAIN FUNCTION.
*                     CHANGES DENOTED BY TGB26     T.BRENNAN
*---------------------------------------------------------------------
* 12/19/85 - ADDED CODE TO CHECK FOR 3 POS PARMS ON JOBCARD BEFORE
*            MODIFYING THE INTERNAL TEXT - CONTIUATION OF FIX TGB22
*                     CHANGES DENOTED BY TGB27     T.BRENNAN
*---------------------------------------------------------------------
* 04/01/88 - INCLUDED THE FOLLOWING CHANGES:
*            MODIFICATIONS FOR JES2 2.1.5
*            ADD ROOM # AND OTHER INFO TO STARTED TASK JCT'S
*            PROC  'TIME' OVERRIDES - ETIMES
*            ROOM # CHEKING PROBLEM
*            ACF2 4.1.2 - USE JOBNAME FOR TSO & STC     S.CHUCHEV
*---------------------------------------------------------------------
********* SMP PTF = JX00654 CONTAINS ALL MODIFICATIONS ABOVE
*---------------------------------------------------------------------
* 12/22/88 - MODIFIED FOR ACF2 OR RACF - AND ALTERED TO USE USERID
*            FROM JCTJNAME OR NJE HEADER INSTEAD OF JCTUSER5
*          - CHANGED BLDSMF FIELD TO BLDAUTH (DGNAME AUTH)
*          - ADDED UNIT=3480 TO UNIT TABLE
*                     CHANGES DENOTED BY TGB28     T.BRENNAN
*---------------------------------------------------------------------
* 05/16/89 - FIXED TO USE ANY AVAILABLE ACEE INST FIELDS IN ACFINIT
*                     CHANGES DENOTED BY TGB29     T.BRENNAN
*---------------------------------------------------------------------
* 09/18/89 - MODIFIED TO USE THE $NHDGET MACRO TO OBTAIN THE
*            LOCATION OF THE JES2 SECTION OF THE NJE HEADER.
*            TH1S CHANGE WILL MAKE EXIT UPWARD AND DOWNWARD
*            COMPATIBLE BETWEEN JES2 2.2.1 AND 3.1.1
*                     CHANGES DENOTED BY RWS01     R.SEIDEL
*---------------------------------------------------------------------
* 01/15/90 - FIXED PROBLEM WITH JOB/STEP TIME CALCULATION
*                     CHANGES DENOTED BY TGB30     T.BRENNAN
*---------------------------------------------------------------------
* 01/22/90 - FIXED SYSOUT LOOKASIDE LOGIC TO WORK EVEN IF ACCESS FAILS
*                     CHANGES DENOTED BY TGB31     T.BRENNAN
*---------------------------------------------------------------------
* 04/30/90 - REMOVED LINES WHICH CAUSED TAPE COUNT PROBLEMS
*                     CHANGES DENOTED BY TGB32     T.BRENNAN
*---------------------------------------------------------------------
* 05/23/90 - ADDED RACF RULE CHECK FOR UNIT=TAPEK (ROBOT TAPE UNITS)
*                     CHANGES DENOTED BY TGB33     T.BRENNAN
*---------------------------------------------------------------------
* 01/30/91 - ADDED CHECK FOR GROUP=STARTASK, USER=UCC7.  IF SO, THEN
*            A /*JOBFROM IS SUMULATED.
*            (TEMP SUPPORT FOR USERID PROPAGATION FROM A STC)
*                     CHANGES DENOTED BY TGB34     T.BRENNAN
*---------------------------------------------------------------------
* 03/29/91 - ALLOWED 8 CHARACTER JOB ACCOUNT NUMBER (FOR SDGE JOBS)
*                     CHANGES DENOTED BY TGB35     T.BRENNAN
*---------------------------------------------------------------------
* 04/11/91 - MODIFIED TO IGNORE PRODUCTION JOB CLASS IF USER IS NOT
*            AUTHORIZED, RATHER THAN CANCELLING THE JOB.
*                     CHANGES DENOTED BY TGB36     T.BRENNAN
*---------------------------------------------------------------------
* 05/28/91 - FIXED BUG IN TAPE COUNT PROCESSING THAT WAS MAKING BLANK
*            VOLSER'S LOOK LIKE REFERBACKS AND NOT COUNTING THEM
*                     CHANGES DENOTED BY TGB37     T.BRENNAN
*---------------------------------------------------------------------
* 11/15/91 - MOVED ROOM#/PGMR NAME ACCOUNT STUFF TO EXIT4
*            GET USERID FROM JCTUSER4/5 (EXIT 4 PUTS IT THERE)
*            BECAUSE NJE HEADER IS NOT AVAILBLE IN EXIT6 FOR 4.2.0
*            ALSO ADDED RACF ERROR MESSAGES
*            ALSO MODIFIED CODE FOR NEW TIME= VALUES
*            ALSO ALLOWED NEW IF/THEN/ELSE/ENDIF STATEMENTS
*                     CHANGES DENOTED BY TGB38      T.BRENNAN
*---------------------------------------------------------------------
* 04/08/92 - ADDED CHECK TO DSNAME PROCESSING TO CHECK FOR SUB PARMS
*                     CHANGES DENOTED BY TGB39     T.BRENNAN
*---------------------------------------------------------------------
* 01/06/93 - WITH JES2 4.3, JOBCARD WAS NOT BEING SENT TO EXIT6 WHEN
*            THE JOBNAME WAS LONGER THAN 8 CHARACTERS, SO CODE WAS
*            ADDED TO PREVENT PROCESSING UNLESS JOBCARD WAS SEEN.
*                     CHANGES DENOTED BY TGB40     T.BRENNAN
*---------------------------------------------------------------------
* 03/02/93 - COPIED ROOM NUMBER FROM INTERNAL TEXT TO FIELD JCTROOMN
*            IN THE JCT.  WITH FIXES APPLIED (LEVEL 49.4) THIS FIELD
*            WAS NOT BEING UPDATED, CAUSING PRINT DISTRIBUTION PRBLEMS.
*                     CHANGES DENOTED BY TGB41     T.BRENNAN
*---------------------------------------------------------------------
* 10/19/93 - ADDED RACF CHECK FOR TAPEKR AND TAPE9R UNITS
*                     CHANGES DENOTED BY TGB42     T.BRENNAN
*---------------------------------------------------------------------
* 07/21/94 - TEMPORARILY REMOVED UCB CODE
*                     CHANGES DENOTED BY TGB43     T.BRENNAN
*---------------------------------------------------------------------
* 11/18/94 - OBTAIN USERID FROM JCTJUSID INSTEAD OF FROM JCTUSER4
*            PASSED FROM EXIT4. UPDATED JCTPNAME, JCTROOM, AND
*            JCTROOMN SINCE THAT CODE WAS REMOVED FROM EXIT4.
*            REMOVED ANY ACF CODE.
*---------------------------------------------------------------------
* 06/08/96 - T.BRENNAN - ADDED CODE FOR AUTOMATIC TAPE SETUP      TGB45
*---------------------------------------------------------------------
* 10/09/97 - T.BRENNAN - MODIFIED TO IGNORE MIGRATE TAPES         TGB46
*---------------------------------------------------------------------
* 01/24/98 - T.BRENNAN - REMOVED CODE THAT UPDATES JQEJCLAS       TGB47
*---------------------------------------------------------------------
* 03/23/98 - T.BRENNAN - ONLY PRINT ONE SETUP OF A PARTICULAR VOL TGB48
*---------------------------------------------------------------------
**********************************************************************
         TITLE 'JES2 EXIT 6 - DOCUMENTATION'
**********************************************************************
*
*    ENVIRONMENT   MVS SP 2.1.3           LEVEL 8502
*                  JES2 FOR SP 1.3.4      LEVELSET 8501
*                  ACF2 4.0 (SKK INC.)
*
*    THIS JES2 EXIT PROGRAM IS DESIGNED TO RUN AT CONVERTER
*    TIME TO ENFORCE INSTALLATION JCL STANDARDS AND TO DETERMINE
*    THE APPROPRIATE JOB CLASS BASED ON DEVICE UTILIZATION.
*
*    VIOLATIONS OF JCL STANDARDS ARE DOCUMENTED BY MESSAGES
*    WRITTEN TO THE JES2 MESSAGE DATA SET FOR THE JOB AND
*    FLAGGED FOR JCL ERROR BY THE USE OF THE JES2 EXIT RETURN
*    CODE TO THE JES2 CONVERTER SUB-TASK.
*
*    THIS EXIT USES THE INTERNAL TEXT DATA SET FOR ITS
*    PROCESSING. JES2 PASSES EACH INTERNAL TEXT STATEMENT
*    TO THIS EXIT FOR EXAMINATION AND/OR MODIFICATION. THE
*    EXIT WILL MAINTAIN A TABLE OF DATASET NAMES AND DEVICE
*    COUNTS TO BE USED AT END OF PROCESSING FOR DETERMINING
*    JOB CLASS. THE ACB FOR THE MESSAGE DATA SET IS IN THE
*    PCE WORK AREA AND CAN BE USED TO ISSUE ERROR MESSAGES
*    TO THE JOB MESSAGE PORTION OF THE LISTING.
*
*    ALSO, THE CONVERTER IS A DUMB ANIMAL WHEN IT COMES TO
*    SYNTAX CHECKING. CHECKING IS MADE FOR KEYWORD VALUES,
*    BUT NONE IS MADE ON THE VALUE FOR THE KEYWORD. IE.,
*    50 CHARACTER DATA SET NAMES, 20 CHARACTER VOLUME SERIAL
*    NUMBERS, AND NUMEROUS SYNTAX ERRORS CAN PASS UNDETECTED
*    THROUGH THE CONVERTER. THESE ERRORS WILL BE CAUGHT BY
*    THE INTERPRETER WHEN THE JOB GOES INTO EXECUTION, BUT
*    THIS EXIT MUST PROCESS THEM. CURRENTLY, ALL ERRORS OF
*    THIS TYPE WILL ISSUE A MESSAGE TO THE EFFECT OF AN INTERNAL
*    ERROR AND FLUSH THE JOB.
*
*        WRITTEN BY:
*                        JOHN V. HOOPER
*                        NORTHWESTERN BANK
*                        P.O. BOX 310
*                        NORTH WILKESBORO, N.C. 28674
*
*
**********************************************************************
*
*   TYPICAL REGISTER USAGE:
*
*     NOTE: REGISTERS FLAGGED WITH '*' SHOULD PROBABLY NOT BE USED
*           FOR ANOTHER PURPOSE WITHOUT SAVING AND RESTORING.
*
*       R0:   TEMP (CONTAINS EXIT 6 INFO ON ENTRY)
*
*       R1:   TEMP (POINTS TO EXIT 6 PARMS ON ENTRY)
*
*    *  R2:   GENERALLY POINTS TO THE CURRENT POSITION IN THE INTERNAL
*             TEXT STRING. BUMPED ALONG AS NEEDED TO PARSE TEXT.
*             SOMETIMES USED AS POINTER TO THE JCT.
*
*       R3:   GENERALLY USED TO GET THE LENGTH OF A TEXT PARM.
*
*       R4:   GENERALLY USED AS A SUBPARM COUNTER
*
*       R5:   GENERAL WORK REGISTER, SOMTIMES USED AS SUBPARM POINTER.
*             RETURN ADDRESS FOR SOME SUBROUTINES
*
*    *  R6:   POINTER TO THE START OF INTERNAL TEXT FIELD
*             (PASSED TO EXIT6 BY JES2)
*             POINTER TO RPL IN MSG I/O ROUTINES
*
*    *  R7:   POINTER INTO LARGE EXIT 6 SAVE TABLE.
*
*       R8:   PCE POINTER (FOR A SHORT TIME)
*             BASE REGISTER IN ESTAE ROUTINE
*
*       R9:   WORK REGISTER
*
*    *  R10:  THIRD BASE REGISTER
*
*    *  R11:  SECOND BASE REGISTER
*
*    *  R12:  FIRST BASE REGISTER
*
*    *  R13:  POINTER TO MAIN WORK AREA.
*             ALSO USED WITHIN SOME SUBROUTINES SUCH AS 'UCBSEAR'
*             (AFTER SAVING THE WORKAREA ADDRESS FIRST)
*
*       R14:  GENERALLY USED AS A SUBROUTINE LINKAGE REGISTER
*             (DO NOT ALTER IN A SUBROUTINE)
*
*       R15:  GENERALLY USED AS A RETURN CODE REGISTER, OR A MESSAGE
*             CODE FOR THE ERROR ROUTINE (ERRORTN)
*
**********************************************************************
*
**********************************************************************
*                 JES2 CONTROL BLOCK USAGE
**********************************************************************
*
*  JCT  -   JCTUSER1 - JCTUSER2    8 BYTE XEQ DATAGROUP NAME PASSED TO
*                                  THIS PGM FROM EXIT 4
*
*           JCTUSER3               1 BYTE OF FLAGS USED BY SCE EXITS
*
*                                  X'80'    EXIT 4 SAW A /*DEFER CARD
*                                  X'40'    USED BY EXIT 4
*                                  X'20'    USED BY EXIT 4
*                                  X'10'    USED BY EXIT 4
*                                  X'04'    AUTO SETUP FOR TAPES  TGB45
*                                  X'02'    JOBCARD WAS SEEN ALREADY
*                                  X'01'    EXIT 6 HAS FAILED
*
*                                  RIGHT 3 BYTES UNUSED AT PRESENT
*
*           JCTUSERB               ADDRESS OF THE EXIT6 WORKAREA
*
**********************************************************************
         TITLE  'JES2 EXIT 6 - ASSEMBLY VARIABLES'
**********************************************************************
*              SET CONDITIONAL ASSEMBLY VARIABLES
**********************************************************************
*
*  TYPICALLY - FOR PRODUCTION SETUP   TRACE=NO  TEST=NO  ESTAE=YES
*              FOR TSO TESTING SET    TRACE=YES TEST=YES ESTAE=NO
*
**********************************************************************
*
         GBLC &TRACE
&TRACE   SETC 'NO'         DEBUGGING WTO OR TPUT TRACE
         GBLC &TEST
&TEST    SETC 'NO'         SETUP FOR TSO TEST RUN
         GBLC &ESTAE
&ESTAE   SETC 'YES'        ESTAE PROCESSING
*
         TITLE 'JES2 EXIT 6 - INLINE MACROS'
**********************************************************************
**********************************************************************
**********************************************************************
***
***
***
***
***                    I N L I N E   M A C R O S
***
***
***
***
**********************************************************************
**********************************************************************
**********************************************************************
         EJECT
***************************************************************** TGB07
*                         MACRO LABEL                             TGB07
***************************************************************** TGB07
*                                                                 TGB07
* USE THIS MACRO INSTEAD OF 'LABEL DS 0H' IN PLACES THAT REQUIRE  TGB07
* TRACING DURING DEBUGGING. SET GLBL VARIABLE 'TRACE' TO 'YES' IF TGB07
* TRACING IS NEEDED, AND 'NO' IF NOT.                             TGB07
*                                                                 TGB07
* THE WORKAREA MUST BE ADDRESSABLE WHEN USING THIS MACRO.         TGB07
*                                                                 TGB07
***************************************************************** TGB07
*                                                                 TGB07
         MACRO                                                    TGB07
&NAME    LABEL ,                                                  TGB07
&NAME    DS   0H                                                  TGB07
         GBLC &TRACE                                              TGB07
         AIF  ('&TRACE' NE 'YES').NOLABL                          TGB07
         STM  R15,R2,LABELSV                                      TGB07
         L    R15,LABELA                                          TGB07
         BASR R2,R15                                              TGB07
         DC   CL8'&NAME'                                          TGB07
         LM   R15,R2,LABELSV                                      TGB07
.NOLABL  ANOP                                                     TGB07
         MEND                                                     TGB07
*
***************************************************************** TGB11
*                       MACRO SCECHK                              TGB11
***************************************************************** TGB11
*                                                                 TGB11
* USE THIS MACRO TO CALL RACF FOR A RESOURCE VALIDATION.          TGB11
*                                                                 TGB11
*    EXAMPLE:   (NAME)  SCECHK KEY,NAME,LEN                       TGB11
*                                                                 TGB11
*          KEY = ADDRESS OF 4 BYTE RESOURCE KEY (=C'RMSG')        TGB11
*          NAME = ADDRESS OF 'N' BYTE RESOURCE NAME (=C'TIME')    TGB11
*          LEN  = LENGTH OF RESOURCE NAME (4 IN THIS EXAMPLE)     TGB11
*                                                                 TGB11
*       RESULT:   CC = 0 , USER IS AUTHORIZED FOR RESOURCE        TGB11
*                 CC ^ 0 , USER IS NOT AUTHORIZED                 TGB11
*                                                                 TGB11
***************************************************************** TGB11
*                                                                 TGB11
         MACRO                                                    TGB11
&LABEL   SCECHK &KEY,&NAME,&L                                     TGB11
&LABEL   MVC   RACFKEY,&KEY           MOVE KEY TO KEY AREA        TGB11
         MVC   RACFNAME,BLANKS        CLEAR NAME AREA             TGB11
         MVC   RACFNAME(&L),&NAME     MOVE NAME TO NAME AREA      TGB11
         BAS   R14,SCECHECK                                       TGB11
         MEND                                                     TGB11
*
         EJECT
**********************************************************************
*                           MACRO XWTO
**********************************************************************
*
*  USE THIS MACRO TO ISSUE A $$WTO OR A NORMAL WTO DEPENDING ON THE
*  STATE OF GLOBAL VARIABLE &TEST.
*
*  EXAMPLE:    (NAME)  XWTO  LIST,LEN
*
*          'LIST' IS THE ADDRESS OF WTO LIST FORM
*          'LEN' IS LENGTH OF WTO LIST FORM
*
**********************************************************************
*
         MACRO
&LABEL   XWTO  &LIST,&LEN
         GBLC  &TEST
         AIF   ('&TEST' EQ 'NO').NOTSO2
&LABEL   TPUT  &LIST+4,&LEN-4
         MEXIT
.NOTSO2  ANOP
         L     R1,HCTADDR          POINT TO HCT TO GET COM CHAR
         USING HCT,R1              AND USE
&LABEL   MVC   WTOLIST(&LEN),&LIST MOVE MESSAGE TO WTO AREA
         $$WTO WTOLIST             ISSUE JES2 STYLE WTO
         DROP  R1
         MEND
*
         TITLE 'JES2 EXIT 6 - JES2 CONTROL BLOCKS, ETC.'
**********************************************************************
**********************************************************************
**********************************************************************
***
***
***
***
***            E X I T   6   E X E C U T A B L E   C O D E
***
***
***
***
**********************************************************************
**********************************************************************
**********************************************************************
         EJECT
**********************************************************************
*                       HASP CONTROL BLOCKS
**********************************************************************
*
         COPY  $HASPGBL
SCEX006  $MODULE SYSP=(GEN,GEN,NODATA,NOGEN,NOGEN),                    X
               ENVIRON=SUBTASK,                                        X
               CVT,                                                    X
               DEB,                                                    X
               KEYS,                                                   X
               TEXT,                                                   X
               WPL,                                                    X
               RPL,                                                    X
               SDWA,                                                   X
               $HASPEQU,                                               X
               $HCT,                                                   X
               $CAT,                                                   X
               $PCE,                                                   X
               $BUFFER,                                                X
               $JQE,                                                   X
               $JCT,                                                   X
               $MIT,                                                   X
               $NHD,                                                   X
               $DTECNV,                                                X
               $TQE,                                                   X
               $DTE,                                                   X
               $XECB,                                                  X
               $ERA,                                                   X
               $PADDR,                                                 X
               $CNVWORK
*
         DROP  ,           DROP ALL USINGS SPECIFIED IN DSECT'S
*
         TITLE 'JES2 EXIT 6 - ENTRY POINT'
**********************************************************************
*
*                J E S 2    E N T R Y    P O I N T
*
**********************************************************************
*
EXIT6    $ENTRY  BASE=(R12,R11,R10)
         SAVE  (14,12)        SAVE CALLERS REGISTERS
         LR    R9,R1          SAVE PARM ADDRESS FOR LATER
*
         L     R2,12(R1)      SAVE JCT ADDRESS
         USING JCT,R2         SET ADDRESSABILITY TO JCT
*
         L     R6,4(R1)       LOAD ADDRESS OF INTERNAL TEXT RECORD
         USING TEXT,R6        SET ADDRESSABILITY TO TEXT RECORD
*
         LR    R3,R11         SAVE HCT ADDRESS
*
         LR    R4,R0          SAVE REG 0
*
         LR    R12,R15        ESTABLISH BASE REGISTER
         LA    R11,2048(R12)   SET SECOND
         LA    R11,2048(R11)    BASE REGISTER
         LA    R10,2048(R11)   SET THIRD
         LA    R10,2048(R10)    BASE REGISTER
*
**********************************************************************
*        DO NOT PROCESS JOBS WITH TYPRUN=SCAN OR TYPRUN=COPY
**********************************************************************
*
         TM    JCTJOBFL,JCTTSCAN+JCTTCOPY  JOB FOR SCAN OR COPY?  TGB05
         BZ    CHKJOB                      NO -  CHECK FOR JOBS   TGB05
RETURN0  SLR   R15,R15                    YES - CLEAR RETURN CODE TGB05
         B     RETURN                      AND RETURN             TGB05
*
**********************************************************************
*              CALL TSORTN IF THIS IS AN STC OR TSU
**********************************************************************
*
CHKJOB   DS    0H
         TM    JCTJOBFL,JCTBATCH  IS THIS A BATCH JOB?
         BO    CHKFAIL            YES  CONTINUE
         BAS   R7,TSORTN          NO - CALL TSO ROUTINE           TGB09
         B     RETURN0        RETURN ZERO EVEN IF ERROR OCCURRED  TGB09
*
**********************************************************************
*          CHECK TO SEE IF WE HAVE FAILED THE JOB ALREADY
**********************************************************************
*
CHKFAIL  DS    0H
         TM    JCTUSER3,X'01'     HAS JOB BEEN FAILED BY EXIT ?
         LA    R15,8              (SET RC 8)
         BO    RETURN             YES - GO BACK TO JES2, IGNORE TEXT
*
**********************************************************************
*           SEE IF WE SHOULD GETMAIN A WORK AREA OR NOT
**********************************************************************
*
NOBYPASS DS    0H
         ICM   R1,15,JCTUSERB GET WORK AREA ADDRESS
         BNZ   NOGET          NOT ZERO - DON'T DO ANOTHER GETMAIN
*
         TITLE 'JES2 EXIT 6 - GETMAIN'
**********************************************************************
*
*                         G E T M A I N
*
**********************************************************************
*
* NOTE: THE WORKAREA ARE OBTAINED AS ONE LARGE WORKAREA, TOO LARGE TO
*       BE ADDRESSED BY A SINGLE REGISTER. DURING THE PROGRAM THE
*       MAIN 'WORKAREA' IS POINTED TO BY REGISTER 13, AND ANY 'SUB'
*       WORKAREAS ARE POINTED TO BY ADDRESSES THAT CAN BE FOUND
*       WITHIN THE MAIN WORKAREA (OFF OF R13).
*
**********************************************************************
*
GETMAIN  DS    0H
*
         L     R0,GETLEN      GET LENGTH OF WORKAREA
         GETMAIN R,LV=(0)     GET THE STORAGE
         LR    R5,R1          SAVE ADDRESS FOR THE MOMENT
*
**********************************************************************
*                CLEAR GETMAINED AREA TO ZEROS
**********************************************************************
*
         LR    R0,R1          SETUP FOR CLEAR
         L     R1,GETLEN      SETUP FOR CLEAR
         SLR   R15,R15        SETUP FOR CLEAR
         MVCL  R0,R14         CLEAR ENTIRE AREA TO ZEROS
*
**********************************************************************
*          ESTABLISH ADDRESSABILITY TO NEW WORK AREA
**********************************************************************
*
         ST    R13,4(R5)      SAVE OLD ADDRESS IN NEW SAVE AREA
         ST    R5,8(R13)      SAVE NEW ADDRESS IN OLD SAVE AREA
         LR    R13,R5         POINT TO NEW SAVE AREA
         ST    R13,JCTUSERB   SAVE GETMAINED ADDRESS IN JCT
         USING WORKAREA,R13   USE MAIN WORKAREA
*
**********************************************************************
*               FIGURE OUT SUB WORK AREA ADDRESSES
**********************************************************************
*
* NOTE: DOING THINGS THIS WAY SAVES DOING MULTIPLE GETMAINS
*       BUT RESULTS IN THE SAME THING
*
**********************************************************************
*
         LR    R1,R13                    GET ADDRESS OF WORKAREA
         A     R1,=A(RACFAREA-WORKAREA)  FIGURE SUB AREA ADDRESS
         ST    R1,RACFWORK               SAVE SUB AREA ADDRESS
*
         LR    R1,R13                    GET ADDRESS OF WORKAREA
         A     R1,=A(INDXAREA-WORKAREA)  FIGURE SUB AREA ADDRESS
         ST    R1,INDXTABL               SAVE SUB AREA ADDRESS
*
         LR    R1,R13                    GET ADDRESS OF WORKAREA
         A     R1,=A(SUBAREA-WORKAREA)   FIGURE SUB AREA ADDRESS
         ST    R1,SUBTABLE               SAVE SUB AREA ADDRESS
*
         LR    R1,R13                    GET ADDRESS OF WORKAREA
         A     R1,=A(DGNWAREA-WORKAREA)  FIGURE SUB AREA ADDRESS
         ST    R1,DGNWORK                SAVE SUB AREA ADDRESS
*
         LR    R1,R13                    GET ADDRESS OF WORKAREA
         A     R1,=A(DGNRAREA-WORKAREA)  FIGURE SUB AREA ADDRESS
         ST    R1,DGNRETN                SAVE SUB AREA ADDRESS
*
         LR    R1,R13                    GET ADDRESS OF WORKAREA TGB48
         A     R1,=A(SETAREA-WORKAREA)   FIGURE SETUP AREA ADDR  TGB48
         ST    R1,SETTABLE               SAVE SETUP AREA ADDRESS TGB48
         MVI   0(R1),X'FF'               MARK END OF TABLE       TGB48
*
**********************************************************************
*            INIT CERTAIN ADDRESSES IN THE WORK AREA
**********************************************************************
*
         ST    R2,JCTADDR     SAVE JCT ADDRESS                    TGB04
         ST    R6,TEXTSTAR    SAVE TEXT STARTING ADDRESS          TGB04
         ST    R3,HCTADDR     SAVE HCT ADDRESS                    TGB04
*
         LA    R15,MSGRPL     LOAD OUTPUT RPL ADDRESS             TGB04
         ST    R15,OUTRPL     SAVE OUTPUT RPL ADDRESS             TGB04
         LA    R1,CODAREA
         ST    R1,POINTER
*
         AIF   ('&TEST' EQ 'YES').NODTE
*
         L     R8,8(R9)       GET DTE ADDRESS
         ST    R8,DTEADDR     SAVE FOR LATER MAYBE
         USING DTE,R8         SET ADDRESSABILITY DTE
         LA    R15,DCNVMSG    LOAD OUTPUT ACB ADDRESS
         ST    R15,OUTACB     SAVE OUTPUT ACB ADDRESS             TGB04
         DROP  R8             DROP ADDR TO DTE
.NODTE   ANOP
*
         DROP  R2             DONE WITH JCT FOR NOW
*
**********************************************************************
*                    LOAD EXIT 6 CLASS TABLE
**********************************************************************
*
*  A PRE-ASSEMBLED TABLE CONTAINING A LIST OF JOBCLASSES NOT TO   TGB23
*  BE CHANGED                                                     TGB23
*
**********************************************************************
*
         LA    R1,EX6TABLE    POINT TO TABLE NAME
         LA    R5,LOADERR     POINT TO ERROR ROUTINE
         LOAD  EPLOC=(1),ERRET=(5)   LOAD CLASS TABLE
         ST    R0,EXCPTAB     SAVE ADDRESS OF EXCEPTION TABLE     TGB23
GOTTAB   DS    0H                                                 TGB15
*
*                                                                 TGB45
***************************************************************** TGB45
*               LOAD ADDRESS OF HSC LOOKUP ROUTINE                TGB45
***************************************************************** TGB45
*                                                                 TGB45
         L     R2,JCTADDR     LOAD JCT ADDRESS                    TGB45
         USING JCT,R2         SET ADDRESSABILITY TO JCT           TGB45
*                                                                 TGB45
         TM    JCTUSER3,X'04'          AUTO SET UP (FROM EXIT 4)  TGB45
         BNO   NOHSC                   NO - NO HSC NEEDED         TGB45
         MVC   SLSXCAL,=F'0'           INDICATE NO ROUTINE FOUND  TGB45
         LOAD  EP=SLSXCAL,ERRET=NOHSC TRY TO LOAD SCE CODE        TGB45
         ST    R0,SLSXCAL              SAVE ADDRESS FOR LATER     TGB45
         OI    FLAGS,FSETUP            INDICATE SETUP AUTO        TGB45
NOHSC    DS    0H                                                 TGB45
*                                                                 TGB45
         DROP  R2                                                 TGB45
         B     DOESTAE                 BRANCH AROUND ENTRY STUFF
*
**********************************************************************
*             ESTABLISH ADDRESSABILITY TO WORKAREA
**********************************************************************
*
NOGET    ST    R13,4(R1)      SAVE OLD SAVE ADDR IN NEW SAVE AREA
         ST    R1,8(R13)      SAVE NEW SAVE ADDR IN OLD SAVE AREA
*
         LR    R13,R1         POINT TO WORKAREA FOR ENTIRE PROGRAM
         USING WORKAREA,R13   SET ADDRESSABILITY
*
         TITLE 'JES2 EXIT 6 - ESTAE'
**********************************************************************
*                   ESTABLISH ESTAE ENVIRONMENT
**********************************************************************
*
DOESTAE  LABEL
*
         AIF   ('&ESTAE' EQ 'NO').NOESTAE
         MVC   ESTAEL(LESTAEL),ESTAE INITIALIZE ESTAE LIST FORM
         STM   R14,R12,STAEREGS+12 SAVE CURRENT REGISTERS
         LA    R1,STAERTRY    LOAD ADDRESS OF STAERTRY
         ST    R1,RETRY       SAVE IN WORKAREA
         LA    R1,ESTAEL      LOAD ADDRESS OF ESTAE LIST FORM
         ESTAE STAEXIT,CT,PARAM=(13),XCTL=NO,PURGE=NONE,ASYNCH=NO,     X
               RECORD=YES,TERM=NO,MF=(E,(1))
.NOESTAE ANOP
*
         TITLE 'JES2 EXIT 6 - CHECK FOR LAST LINE OF INTERNAL TEXT'
**********************************************************************
*          SEE IF THIS WE ARE FINISHED WITH THIS JOB'S TEXT
**********************************************************************
*
         LTR   R4,R4          LAST LINE OF TEXT ALREADY PROCESSED ?
         BNZ   EOF            YES - FINISH UP PROCESSING FOR JOB
*
         TITLE 'JES2 EXIT 6 - CHECK CONVERTER ERRORS'
**********************************************************************
*         SEE IF WE SHOULD BOTHER PROCESSING ANY FURTHER
**********************************************************************
*
CHECKJCT LABEL
         TM    STRJINDC,JTXJOBFL  HAS JOB BEEN FAILED BY CONVERTER ?
         BNO   RECORD1            NO - THEN CONTINUE PROCESSING
         TM    STRINDCS,JOBSTR    IS THIS A JOB CARD ?
         BO    JOBERR1            YES - THEN QUIT EXIT6 PROCESSING
*
         TITLE 'JES2 EXIT 6 - CHECK FOR LAST STATEMENT OF A GROUP'
**********************************************************************
*
*    WE MUST DETERMINE IF THE CURRENT STATEMENT IS THE LAST
*    STATEMENT FOR THE STEP. IF THE STATEMENT IS A DD STATEMENT
*    AND IT IS THE LAST STATEMENT OF THE STEP, THE TEXT INDICATOR
*    WILL REFLECT LAST STATEMENT OF THE STEP. IF, HOWEVER, THE
*    CURRENT STATEMENT IS AN EXEC STATEMENT AND IT HAS NO DD
*    STATEMENTS, THIS INDICATOR WILL NOT BE ON, SO WE HAVE TO
*    CHECK FOR THIS CONDITION ALSO.
*
**********************************************************************
*
RECORD1  LABEL
*
         L     R2,JCTADDR     LOAD JCT ADDRESS
         USING JCT,R2         SET ADDRESSABILITY TO JCT
*
         L     R7,SUBTABLE       POINT TO SUB TABLE
         USING SAVTABLE,R7       SET ADDRESSABILITY
*
         TM    STRINDCS,LASTSTMT LAST STMT FOR STEP?
         BO    RECORD3           YES, BRANCH
         TM    STRINDCS,EXECSTR  EXEC STMT?
         BNO   RECORD2           NO, BRANCH
         TM    STREINDC,ETXNODD  STEP HAS NO DD STMTS?
         BO    RECORD3           TRUE, ALSO LAST STMT FOR STEP
*
**********************************************************************
*        AT THIS POINT THE STMT IS NOT THE LAST STMT FOR STEP
**********************************************************************
*
RECORD2  NI    FLAGS,NOT-ENDSTEP TURN OFF LAST STMT IND
         B     RECORD4        GET OUT
*
**********************************************************************
*        AT THIS POINT THE STMT IS THE LAST STMT FOR STEP
**********************************************************************
*
RECORD3  OI    FLAGS,ENDSTEP  TURN ON LAST STMT IND
RECORD4  TM    STRINDCS,JOBSTR JOB STATEMENT?
         BO    JOBCARD        YES, BRANCH
         TM    JCTUSER3,X'02' JOBCARD SEEN YET ?                  TGB40
         BO    RECORD5        YES - CONTINUE                      TGB40
         LA    R15,3          NO  - SOME KIND OF JOBCARD ERROR    TGB40
         B     JOBERR2        DO ERROR STUFF AND GET NEXT CARD    TGB40
RECORD5  TM    STRINDCS,EXECSTR EXEC STATEMENT?                   TGB40
         BO    EXECARD        YES, BRANCH
         TM    STRINDCS,DDSTR DD STATEMENT?
         BO    DDCARD         YES, BRANCH
         TM    STRINDCS,PROCSTR PROC STATEMENT?
         BO    GETNEXT        YES, BRANCH
         TM    STRINDCS,JDVBSTR JDT DEFINED STATEMENT?
         BO    JDTCARD        YES, BRANCH
         B     GETNEXT        NO  - JUST GO GET NEXT CARD         TGB38
*
         TITLE 'JES2 EXIT 6 - JOB CARD PROCESSING'
**********************************************************************
**********************************************************************
**********************************************************************
***
***
***
***
***                       J O B C A R D
***
***
***
***
**********************************************************************
**********************************************************************
**********************************************************************
*
*    THE TEXT OF THE JOBCARD IS AS FOLLOWS:
*        1)  2 BYTE LENGTH OF TEXT STRING INCLUDING ITSELF
*        2)  1 BYTE INDICATOR COMMON TO ALL TEXT RECORDS
*        3)  3 BYTES OF MISCELLANEOUS INDICATORS
*        4)  1 BYTE INDICATOR X'B4' INDICATING JOB POS PARAMS
*        5)  1 BYTE NUMBER OF POSITIONAL PARAMETERS
*              1ST POS PARAM IS JOBNAME
*              2ND POS PARAM IS ACCT PARAM LIST
*              3RD POS PARAM IS PGMR NAME
*        5A) JOBNAME PRECEDED BY A 1 BYTE LENGTH FIELD
*        5B) HASP ACCOUNTING PARAMETERS PRECEDED BY A
*            1 BYTE LENGTH FIELD LOOKS LIKE THE FOLLOWING
*            THE 1ST HALF BYTE IS '8' IF MORE THAN 1 ACCT ENTRY
*            IF MORE THAN 1 ACCT ENTRY -
*            THE 2ND HALF BYTE IS THE NUMBER OF ACCT ENTRIES
*            FOLLOWED BY A VARIABLE LENGTH LIST OF HASP PARAMETERS
*            EACH PRECEDED BY A 1 BYTE LENGTH FIELD
*            IF ONLY 1 ACCT ENTRY -
*            THE 2ND HALF BYTE IS THE LENGTH OF THE ACCT ENTRY
*            FOLLOWED BY THE ACCOUNTING ENTRY
*        5C) PGMR NAME PRECEDED BY A 1 BYTE LENGTH FIELD
*        6)  VARIABLE LENGTH LIST OF KEYWORD PARAMETERS
*            EACH IS PRECEDED BY A 1 BYTE KEY, 1 BYTE NUMBER OF
*            POSITIONAL SUBPARAMETERS PRESENT, AND A LIST OF
*            SUBPARAMETERS EACH PRECEDED BY A 1 BYTE LENGTH FIELD
*            WHICH MAY BE ZERO IF OMITTED AND FOLLOWED BY ANOTHER
*            POSITIONAL PARAMETER.
*
**********************************************************************
*
JOBCARD  LABEL
         OI    JCTUSER3,X'02'   SHOW WE HAVE SEEN JOBCARD         TGB40
*
**********************************************************************
*        INITIALIZE ENTRY IN TABLE SINCE ONE MUST ALWAYS BE CREATED
**********************************************************************
*
JOBINIT  DS    0H
         MVI   ENTRYTYP,TYPJOB SET TO JOB ENTRY
         MVI   JENTRY,C' '    BLANK FIRST BYTE OF JOB INFO
         MVC   JENTRY+1(30),JENTRY BLANK ENTIRE JOB INFO
         ST    R7,LASTENT     SAVE ADDR OF LAST ENTRY IN TABLE
         ST    R7,FIRSTENT    SAVE ADDR OF FIRST ENTRY IN TABLE
         XC    CLASSFLD,CLASSFLD ZERO DETERMINED JOB CLASS
         XC    MAXTIME,MAXTIME CLEAR MAXIMUM CPU TIME
         XC    EXECTIME,EXECTIME  CLEAR SETP CPU TIME
*
**********************************************************************
*         INITIALIZE MSG HANDLER PARAMETERS ON FIRST ENTRY
**********************************************************************
*
         LA    R15,1          SET REG TO 1
         ST    R15,CARDNO     SET CARD COUNT TO 1
         XC    MSGCOUNT,MSGCOUNT ZERO MESSAGE COUNTER
         XC    RESOURCE,RESOURCE CLEAR JES2 RESOURCES
         MVI   INCLASS,C'A'   SET INPUT DEFAULT CLASS TO 'A'
*
         EJECT
***************************************************************** TGB11
*                    INIT FOR RACF PROCESSING                     TGB11
***************************************************************** TGB11
*                                                                 TGB11
         L     R2,JCTADDR          POINT TO JCT FOR RACFINIT      TGB11
         MVC   USERID,JCTJUSID     GET USERID                     TGB38
         L     R5,RACFWORK         POINT TO RACF WORK AREA        TGB11
         BAS   R14,RACFINIT        CALL RACF INIT ROUTINE         TGB11
         BNZ   RACFERR             ERROR
*
***************************************************************** TGB27
*      CHECK FOR VALID POSITINAL PARMS BEFORE MODIFYING TEXT      TGB27
***************************************************************** TGB27
*                                                                 TGB27
         CLI   7(R6),3             ARE THERE 3 POS PARMS ?        TGB27
         BNE   GOTACCT             NO - SKIP ACCOUNT ADDITIONS    TGB27
         TM    JOBIND,JOBFAIL      HAS JOB BEEN FAILED ?
         BO    GOTACCT             YES - SKIP ACCOUNT ADDITION
*
***************************************************************** TGB19
*      OBTAIN DATAGROUP NAME AND ADD TO ACCOUNT (SUBPARM 10)      TGB19
***************************************************************** TGB19
*                                                                 TGB19
         LA    R1,PROCTXT          BORROW PROC WORK AREA          TGB19
         L     R2,JCTADDR          POINT TO JCT                   TGB19
         BAS   R14,ACCOUNT         CALL ACCOUNT MOD ROUTINE       TGB19
         AIF   ('&TEST' EQ 'YES').NOERR9
         BZ    GOTACCT             OK - CONTINUE                  TGB19
         LA    R15,9               SETUP ERROR NUMBER             TGB19
         BAL   R14,ERRORTN         INDICATE TOO MANY SUBPARMS     TGB19
.NOERR9  ANOP
*
GOTACCT  DS    0H
*                                                                 TGB19
***************************************************************** TGB23
*   FIGURE OUT WHICH DATAGROUP NAME TO USE FOR CLASS SELECTION    TGB23
***************************************************************** TGB23
*                                                                 TGB23
*  IF XEQ CARD WAS PASSED FROM EXIT 4 (JCTUSER1,2) USE IT FIRST   TGB23
*  IF RACF DATAGROUP NAME IS THERE, USE IT NEXT                   TGB23
*  IF NEITHER ABOVE IS THERE, MAKE UP 'SYSX' BASED ON SMF ID      TGB23
*                                                                 TGB23
***************************************************************** TGB23
*                                                                 TGB23
         L     R2,JCTADDR          POINT TO JCT                   TGB23
         USING JCT,R2              R2 POINTS TO JCT               TGB23
*                                                                 TGB23
         MVC   DGNNAME,JCTUSER1    ASSUME XEQ CARD                TGB23
         CLI   JCTUSER1,0          ANY XEQ CARD ?                 TGB23
         BNE   GOTNAME             YES - WE GOT IT                TGB23
*                                                                 TGB23
         MVC   DGNNAME,DGROUP      ASSUME RACF DATAGROUP IS THERE TGB28
         CLI   DGROUP,C' '         ANY DATAGROUP ?                TGB28
         BNE   GOTNAME             YES - WE GOT IT                TGB23
*                                                                 TGB23
         MVC   DGNNAME,=CL8'SYSA'  SETUP FOR DEFAULT GROUP        TGB23
         L     R1,16               POINT TO CVT                   TGB23
         ICM   R1,15,X'C4'(R1)     POINT TO SMF CONTROL AREA      TGB23
         BZ    GOTNAME             SORRY - NO SMF HERE            TGB23
         MVC   DGNNAME+3(1),19(R1) GET THIS SYSTEMS SMF ID        TGB23
*                                                                 TGB23
GOTNAME  DS    0H                                                 TGB23
*                                                                 TGB23
***************************************************************** TGB23
*        OBTAIN CLASS TABLE AND VALIDATE DATAGROUP NAME           TGB23
***************************************************************** TGB23
*                                                                 TGB23
         BAS   R5,GETDGN           LOOKUP DATAGROUP NAME          TGB23
*                                                                 TGB23
         L     R8,DGNRETN          POINT TO RETURN AREA           TGB23
         USING DGTABLE,R8          R8 POINTS TO DGN AREA          TGB23
*                                                                 TGB23
         TM    BLDAFLG,BLDAUTH     IS AUTH REQUIRED ?             TGB28
         BNO   DGNAUTH             NO  - ALL USERS AUTHORIZED     TGB23
         SCECHK =C'RDGN',DGNNAME,8 CHECK AUTHORIZATION            TGB23
         BZ    DGNAUTH             OK -  USER AUTHORIZED          TGB23
*                                                                 TGB23
         LA    R15,41              ERROR - NOT AUTHORIZED         TGB23
         BAS   R14,ERRORTN         CALL ERROR ROUTINE             TGB23
*                                                                 TGB23
DGNAUTH  DS    0H                                                 TGB23
*                                                                 TGB23
***************************************************************** TGB23
*          OBTAIN NEW CLASS TABLE FOR DEFERRED JOBS               TGB23
***************************************************************** TGB23
*                                                                 TGB23
         TM    JCTUSER3,X'80'      IS DEFER BIT SET (FROM EXIT 4) TGB23
         BNO   NODEFER             NO  - JOB IS NOT DEFERRED      TGB23
*                                                                 TGB23
         MVC   DGNNAME,=CL8'DEFERA' SETUP DEFAULT DEFER NAME      TGB23
         MVC   DGNNAME+5(1),BLDSYS+3  BASE IT ON DGN SYSID        TGB23
         BAS   R5,GETDGN           GET NEW DEFERRED TABLE         TGB23
*                                                                 TGB23
NODEFER  DS    0H                                                 TGB23
*                                                                 TGB23
         DROP  R2                  DROP JCT                       TGB23
         DROP  R8                  DROP DGTABLE                   TGB23
*
         EJECT
**********************************************************************
*
*    START SCAN OF JOB CARD POSITIONAL PARAMETERS
*        1ST POS PARAM IS ACCT NUMBER UNLESS ONLY 1 ENTRY
*        2ND POS PARAM IS BIN LOC UNLESS ONLY 2 ENTRIES
*        3RD POS PARAM IS EST TIME UNLESS ONLY 3 ENTRIES
*        LAST ENTRY IS ALWAYS PROGRAMMER NAME
*
**********************************************************************
*
JOBSTART LABEL
*
         XC    LASTEXEC,LASTEXEC NO PREVIOUS EXEC CARD
         LA    R2,STRJKEY     LOAD START OF TRUE TEXT
         ST    R2,PARMADDR    SAVE START OF PARAMETER ADDRESS
         LA    R2,1(R2)       INCR PAST JOB POSITIONAL PARM KEYWORD
         SLR   R15,R15        CLEAR REGISTER FOR IC
         IC    R15,0(R2)      LOAD NUMBER OF POS SUBPARAMS
         CH    R15,=H'3'      SEE IF THREE (JOBNAME, ACCT, PRMRNAME)
         LA    R15,42         SET ERROR NUMBER
         BNE   JOBERR         AND INDICATE ERROR
*
JOBCK1   LA    R2,1(R2)       INCR PAST NUM OF POS SUBPARAMS
JOBNM    SLR   R3,R3          CLEAR REG FOR ICM
         ICM   R3,1,0(R2)     LOAD JOB NAME LENGTH
         BZ    JOBNM2         LENGTH ZERO, DO NOT MOVE
         CH    R3,=H'8'       SEE IF LENGTH > 8
         BNH   JOBNM3         NO, CONTINUE
         LA    R15,3          SET ERROR NUMBER
         B     JOBERR         BYPASS FIELDS
JOBNM3   BCTR  R3,0           MAKE MACHINE LENGTH
         EX    R3,MOVE1       MOVE JOB NAME TO SAVE TABLE
         LA    R3,1(R3)       RESTORE LENGTH
JOBNM2   LA    R2,1(R3,R2)    INCREMENT PAST JOB NAME
*
JOBACT   SLR   R4,R4          CLEAR REGISTER FOR ICM
         ICM   R4,1,0(R2)     INSERT CONTROL BYTE
         BNM   JOBACT1        HIGH BIT NOT ON, ONLY 1 PARAMETER
         N     R4,=X'0000007F' 'AND' OUT THE HIGH ORDER BIT
         CH    R4,=H'2'       COMPARE TO 2
         BL    JOBACT1        ONLY ONE PARAMETER, ISSUE MESSAGE
         LA    R2,1(R2)       INCREMENT PAST CONTROL BYTE
         B     JOBACT2        BRANCH
JOBACT1  SLR   R3,R3          CLEAR LENGTH COUNT
         LA    R15,35         SET ERROR NUMBER
         B     JOBERR         BYPASS FIELDS
*
MOVE1    MVC   JNAME(0),1(R2) ********* EXECUTED *********
*
         EJECT
**********************************************************************
*
*    WE ARE CHECKING THE ACCOUNTING FIELDS FOR FORMATTING
*    ERRORS. THE LENGTH OF THE ACCOUNT NUMBER IS 10, & ROOM NUM
*    4. ACCOUNT NUMBER AND ROOM NUMBER ARE REQUIRED, AND MUST
*    BE ALPHANUMERIC. PROGRAMMER NAME IS ALSO REQUIRED, AND
*    MUST BE 20 BYTES OR LESS.
*
**********************************************************************
*
JOBACT2  ICM   R3,1,0(R2)     LOAD PARAMETER LENGTH
         BNZ   JOBACT2A       NOT ZERO, BRANCH
         LA    R15,35         SET ERROR NUMBER
         BAL   R14,ERRORTN    GO ISSUE ERROR MSG
         B     JOBACT13       BYPASS ACCT NUM
*
**********************************************************************
*         CHECK THE LENGTH OF THE ACCOUNT NUMBER FOR 10.
**********************************************************************
*
JOBACT2A CH    R3,=H'10'      COMPARE LENGTH TO 10
         BE    JOBACT3        ACCT LENGTH = 10, BRANCH
         CH    R3,=H'8'       COMPARE LENGTH TO 8                 TGB35
         BE    JOBACT3        ACCT LENGTH = 8, BRANCH             TGB35
         LA    R15,4          SET ERROR NUMBER
         B     JOBERR         BYPASS FIELDS
*
MOVE2    MVC   JACCTNO(0),1(R2)    *********** EXECUTED ************
MOVE16   MVC   JACCT(0),1(R2)      *********** EXECUTED ************
*
*
JOBACT3  BCTR  R3,0           MAKE MACHINE LENGTH
         EX    R3,MOVE2       MOVE ACCT NUM TO SAVE TABLE
         EX    R3,MOVE16      MOVE ACCT NUM TO WORK AREA
         LA    R3,1(R3)       RESTORE LENGTH
         STC   R3,JACCTLEN    SAVE LENGTH OF ACCT NUM
*
**********************************************************************
*               CHECK ACCOUNT NUMBER FOR ALPHANUMERIC
**********************************************************************
*
         LA    R1,1(R2)       POINT TO ACCOUNT NUMBER
         LR    R5,R3          GET LENGTH OF FIELD                 TGB35
*
JOBACT5  BAL   R14,ALPHANUM   SEE IF ALPHANUMERIC
         BNZ   JOBACT7        NO - NOT ALPHA
         LA    R1,1(R1)       INCREMENT TO NEXT POSITION OF ACCT
         BCT   R5,JOBACT5     LOOP UNTIL DONE
         B     JOBACT8        GO CHECK REST OF ACCOUNTING FIELD
*
JOBACT7  LA    R15,36         SET ERROR NUMBER
         BAL   R14,ERRORTN    GO ISSUE ERROR MSG
*
**********************************************************************
*        CHECK ROOM NUMBER FOR LENGTH OF 4 AND ALPHANUMERIC.
**********************************************************************
*
JOBACT8  LA    R2,1(R3,R2)    INCREMENT PAST ACCOUNT NUMBER
         ICM   R3,1,0(R2)     LOAD LENGTH OF ROOM NUMBER
         BNZ   JOBACT9        NOT ZERO, BRANCH
         LA    R15,35         SET ERROR NUMBER
         B     JOBERR         GO ISSUE ERROR MESSAGE  NEW
*
JOBACT9  CH    R3,=H'4'       COMPARE LENGTH TO 4
         BE    JOBACT9A       ROOM NUMBER = 4, BRANCH
         LA    R15,18         SET ERROR NUMBER
         BAL   R14,ERRORTN    GO ISSUE ERROR MSG
         B     JOBACT13       SKIP ALPHANUMERIC TEST
*
JOBACT9A LA    R1,1(R2)       POINT TO ROOM NUMBER
         L     R15,JCTADDR    POINT TO JCT                        TGB41
         USING JCT,R15        AND USE                             TGB41
         MVC   JCTROOMN,0(R1) MOVE ROOM NUMBER TO JCT             TGB41
         DROP  R15                                                TGB41
         LA    R5,4           SET LENGTH OF FIELD
JOBACT10 BAL   R14,ALPHANUM   SEE IF ALPHANUMERIC
         BNZ   JOBACT12       NO - NOT ALPHA
         LA    R1,1(R1)       INCREMENT TO NEXT POSITION OF ACCT
         BCT   R5,JOBACT10    LOOP UNTIL DONE
         B     JOBACT13       GO CHECK REST OF ACCOUNTING FIELD
*
JOBACT12 LA    R15,37         SET ERROR NUMBER
         BAL   R14,ERRORTN    GO ISSUE ERROR MSG
*
JOBACT13 S     R4,=F'2'       DECREMENT FOR TWO PARMS ALREADY PASSED
JOBACT14 LA    R2,1(R3,R2)    INCREMENT PAST PARM
         ICM   R3,1,0(R2)     LOAD LENGTH OF NEXT PARM
         LTR   R4,R4          TEST FOR ZERO
         BZ    JOBPGMR        YES, GO HANDLE PROGRAMMER NAME
         BCTR  R4,0           DECREMENT COUNTER
         B     JOBACT14       LOOP UNTIL PROCESSED ALL ACCT FIELDS
*
**********************************************************************
*                   SAVE THE PROGRAMMER NAME
**********************************************************************
*
JOBPGMR  ICM   R3,1,0(R2)     LOAD PGMR NAME LENGTH
         BNZ   JOBPGMR1       NO, CONTINUE
         LA    R15,6          SET ERROR NUMBER
         B     JOBERR         BYPASS FIELDS
*
JOBPGMR1 CH    R3,=H'20'      SEE IF LENGTH > 20
         BNH   JOBPGMR2       NO, CONTINUE
         LA    R15,5          SET ERROR NUMBER
         B     JOBERR         BYPASS FIELDS
*
JOBPGMR2 CH    R3,=H'10'      SEE IF LENGTH > 10
         BNH   PGMR10         IF NOT > 10, OK
         LH    R3,=H'10'      MAKE LENGTH = 10
*
PGMR10   BCTR  R3,0           MAKE MACHINE LENGTH
         EX    R3,MOVE3       MOVE PGMR NAME TO SAVE TABLE
         ICM   R3,1,0(R2)     RELOAD PGMR NAME LENGTH
         CLC   20(2,R2),=X'0080'
         BNE   JOBLOOP
         OI    JOBIND,X'20'
         B     JOBLOOP        BYPASS FIELDS
*
MOVE3    MVC   JPGMRNM(0),1(R2)    *********** EXECUTED ************
*
         EJECT
**********************************************************************
*
*    WE ARE LOOKING FOR INVALID KEYWORDS OR KEYWORDS HAVING
*    ILLEGAL VALUES OR OTHER THAN DEFAULT
*
*    KEYWORD ENTRIES ARE NORMALLY AS FOLLOWS:
*        1)      1 BYTE HEX KEYWORD
*        2)      1 BYTE NUMBER OF SUBPARAMETERS
*        3)      LIST OF POSITIONAL SUBPARAMETERS EACH PRECEDED BY A
*            1 BYTE LENGTH FIELD
*    THERE ARE OCCASIONS WHEN THE POSITIONAL SUBPARAMETERS WILL
*    HAVE POSITIONAL SUBPARAMETERS THEMSELVES
*    THIS WILL BE FLAGGED IN THE LENGTH FIELD FOR THAT SUBPARAM
*    BY A HIGH ORDER BIT IN THE FIELD.      IN THIS CASE, THIS IS NOT
*    A LENGTH FIELD, BUT A COUNT OF SUBPARAMETERS, WHICH WILL BE
*    A LIST OF PARAMETERS, EACH PRECEDED BY A 1 BYTE LENGTH FIELD.
*    THUS THE ENTRY FOR A SUBPARAMETER WITH SUBPARAMETERS WILL
*    APPEAR AS FOLLOWS:
*        1)      A 1 BYTE NUMBER OF SUBPARAMS AS INDICATED BY A
*            HIGH ORDER BIT
*        2)      A LIST OF SUBPARAMETERS EACH PRECEDED BY A 1 BYTE
*            LENGTH FIELD
*
**********************************************************************
*
JOBPARMS CLI   0(R2),ENDK     END OF TEXT STRING?????
         BNE   JCLASS         NO, BRANCH
*
**********************************************************************
*        CHECK FOR ADDRSP=REAL WITH REGION>256K
**********************************************************************
*
*  THERE IS A LOOPHOLE HERE, WHAT IF REGION HAS NOT BEEN SPECIFIED YET
*
         TM    JOBIND,JOBADDR SEE IF ADDRSP=REAL WAS SPECIFIED
         BNO   GETNEXT        NO, BYPASS CHECK
         LH    R15,REGION     GET REGION SIZE
         CH    R15,=H'256'    CHECK FOR REGION>256K
         BNH   GETNEXT        LESS THAN 256K, OK
         LA    R15,7          SET ERROR NUMBER
         B     GETERR         ERROR
*
**********************************************************************
*                           JOB CLASS
**********************************************************************
*
* NOTE: FOR SOME REASON - WE ONLY CHECK RACF AUTHORITY ON JOB
*       CLASSES IN THE EX6TABLE. WATCH OUT FOR THIS.
*
**********************************************************************
*
JCLASS   CLI   0(R2),CLASSJK  SEE IF CLASS=KEY
         BNE   JMSG           NO, BRANCH
*
         MVC   INCLASS,3(R2)  SAVE INPUT CLASS
*
**********************************************************************
*       DETERMINE IF JOB WAS SUBMITTED IN A PRODUCTION JOBCLASS
*         - IF SO, VALIDATE AUTHORITY
*         - FAIL JOB IF NOT AUTH
**********************************************************************
*
         L     R3,EXCPTAB          GET ADDRESS OF EXCEPTION TABLE
EXCEPT1  CLI   0(R3),X'FF'         END OF TABLE ?
         BE    JOBLOOP             YES, BYPASS VALIDATION AND GET OUT
         CLC   INCLASS,0(R3)       IS THIS AN EXCEPTION ?
         BE    JCLASS1             YES, GO VALIDATE
         LA    R3,1(R3)            INCREMENT BY 1 BYTE
         B     EXCEPT1             LOOP
*
JCLASS1  SCECHK =C'RJCL',INCLASS,1 VALIDATE THE SUBMISSION        TGB11
         BZ    JCLASS2             ERROR                          TGB36
         LA    R15,38              SET ERROR NUMBER               TGB36
         MVC   SAVEIND,JOBIND      SAVE CURRENT ERROR FLAG        TGB36
         BAS   R14,ERRORTN         CALL ERROR ROUTINE             TGB36
         MVC   JOBIND,SAVEIND      RESTORE ERROR FLAG             TGB36
         B     JOBLOOP             GET NEXT JOB PARM              TGB36
*
JCLASS2  OI    JOBIND,JOBPROD      AUTHORIZED, TURN ON PRODUCTION FLAG
         B     JOBLOOP             GO GET NEXT PARAMETER
*
         EJECT
**********************************************************************
*                         MESSAGE CLASS
**********************************************************************
*
JMSG     CLI   0(R2),MSGCLAJK SEE IF MSGCLASS=KEY
         BNE   JADDR          NO, BRANCH
*
         MVC   JMSGCLAS,3(R2) SAVE MSG CLASS
*
         SCECHK =C'RMSG',JMSGCLAS,1 VALIDATE THE MSGCLASS         TGB11
         LA    R15,39              SET ERROR NUMBER
         BNZ   JOBERR              ERROR
*
         EJECT
**********************************************************************
*                          JOB ADDRSPC
**********************************************************************
*
JADDR    CLI   0(R2),ADRSPJK  SEE IF ADDRSPC= KEY
         BNE   JESTIME        NO, BRANCH
*
         CLC   3(4,R2),=C'REAL'  IS REAL SPECIFIED ?
         BNE   JOBLOOP        NO,  BYPASS FIELD
         OI    JOBIND,JOBADDR SET FLAG, REAL STORAGE REQUESTED
         B     JOBLOOP
*
         EJECT
**********************************************************************
*                             JOB TIME
**********************************************************************
*
JESTIME  CLI   0(R2),TIMEJK   SEE IF TIME= KEY
         BNE   JREGN          NO, BRANCH
*
         LA    R2,1(R2)       INCREMENT PAST KEYWORD DESCR
         SLR   R4,R4          CLEAR REGISTER FOR ICM
         ICM   R4,1,0(R2)     INSERT NUMBER OF SUBPARAMETERS
         BZ    JOBLOOP        NONE, IGNORE
         MVC   MAXTIME,=F'1'  SET DEFAULT CPU TIME
         LA    R2,1(R2)       INCREMENT PAST CONTROL BYTE
*                                                                 TGB38
         CLI   0(R2),7        7 BYTE PARM ?                       TGB38
         BNE   JESTIME0       NO  - CONTINUE                      TGB38
         CLC   =C'MAXIMUM',1(R2) TIME=MAXIMUM ?                   TGB38
         BNE   JESTIME1       NO  - CONTINUE                      TGB38
         L     R1,=F'357912'  YES - GET MAX TIME IN SECONDS       TGB38
         B     JESTIME2       AND CONTINUE                        TGB38
JESTIME1 CLC   =C'NOLIMIT',1(R2) TIME=NOLIMIT ?                   TGB38
         BNE   JESTIME0       NO  - GO TRY DEC CONVERSION         TGB38
         L     R1,=F'1440'    YES - THEN SET TIME=1440            TGB38
         OI    JOBIND,JOBT1440  SET BIT ALSO                      TGB38
         B     JESTIME2       AND CONTINUE                        TGB38
JESTIME0 DS    0H                                                 TGB38
         CLI   0(R2),6        IS TIME OVER 6 CHARACTERS ?         TGB38
         BH    JESTIME7       YES - ERROR                         TGB38
         BAL   R14,DECBIN     CONVERT PARM TO BINARY
         BM    JESTIME2       NO PARM - TRY SECONDS
         BNZ   JESTIME4       NOT NUMERIC - ERROR
*
         CH    R1,=H'0'       SEE IF ZERO
         BE    JESTIME2       ZERO, ONLY SECONDS ENTERED, GET'EM
         CH    R1,=H'1440'    SEE IF TIME = 1440
         BNE   JESTIME2       NO, CHECK FOR SECONDS
         OI    JOBIND,JOBT1440 INDICATE TIME=1440 SPECIFIED
*
JESTIME2 M     R0,=F'60'      CONVERT TO SECONDS
         ST    R1,MAXTIME     SAVE CPU TIME
         CH    R4,=H'2'       SECONDS ?
         BNE   JESTIME5       NO, GET OUT
         SLR   R3,R3          CLEAR FOR ICM
         ICM   R3,1,0(R2)     RELOAD LENGTH OF MINUTES
         LA    R2,1(R3,R2)    INCREMENT PAST MINUTES
*
         BAL   R14,DECBIN     CONVERT PARM TO BINARY
         BM    JESTIME5       NO PARM - CHECK FOR 1440
         BNZ   JESTIME4       NOT NUMERIC - ERROR
*
         CH    R1,=H'0'       SEE IF ZERO
         BE    JOBLOOP        YES, BAIL OUT
*
         L     R0,MAXTIME     RETRIEVE MINUTES
         AR    R0,R1          ADD SECONDS
         ST    R0,MAXTIME     PUT IT BACK
*
**********************************************************************
*             CALL SCECHK TO VALIDATE TIME=1440 AUTH.
**********************************************************************
*
JESTIME5 TM    JOBIND,JOBT1440     WAS TIME=1440 SPECIFIED ?
         BNO   JOBLOOP             NO, SKIP CHECK
*
         SCECHK =C'RMSC',=C'TIME',4  VALIDATE TIME=1440           TGB11
         LA    R15,40              SET ERROR NUMBER
         BNZ   JOBERR              ERROR
         B     JOBLOOP             GO GET NEXT PARM
*
JESTIME4 LA    R15,8               SET ERROR NUMBER
         B     JOBERR
*
JESTIME7 LA    R15,49              SET ERROR NUMBER
         B     JOBERR
*
         EJECT
**********************************************************************
*                           JOB REGION
**********************************************************************
*
JREGN    CLI   0(R2),REGINJK  SEE IF REGION= KEY
         BNE   JOBLOOP        NO, GET OUT
*
         LA    R2,2(R2)       INCREMENT PAST KEY, & NO OF FIELDS
*
         BAL   R14,DECBIN     CONVERT PARM TO BINARY
         BM    JOBLOOP        NO PARM - DO NOTHING
         LA    R15,29         SET ERROR NUMBER
         BNZ   JOBERR         NOT NUMERIC - ERROR
*
         STH   R1,REGION      STORE REGION SIZE IN TABLE
         B     JOBLOOP        GET OUT
*
         EJECT
**********************************************************************
*
*    THIS ROUTINE WILL INCREMENT PAST THE STRING(S) BEING
*    PROCESSED. NOTE THAT FOLLOWING THE KEYWORD DESCRIPTOR
*    FIELD IS A COUNT OF SUBPARAMETERS. FOLLOWING THE COUNT
*    WILL BE A LENGTH OR DESCRIPTOR FIELD. IF THE HIGH ORDER
*    BIT IS ON, THE FIELD IS A COUNT FIELD OF THE NUMBER OF
*    SUBPARAMETERS WHICH THE SUBPARAMETER ITSELF MAY HAVE.
*    IF THIS IS TRUE, THE DESCRIPTOR FIELD WILL BE FOLLOWED BY
*    A LENGTH FIELD FOR THE FIRST SUBPARAMETER. IF THE HIGH
*    ORDER BIT IS NOT ON, IT IS ONLY A LENGTH FIELD FOR A
*    SINGLE SUBPARAMETER.
*                                                                 TGB12
*    NOTE: IF ENTERED AT 'JOBERR', R15 MUST CONTAIN AN ERROR MSG  TGB12
*          NUMBER.                                                TGB12
*                                                                 TGB12
**********************************************************************
*
JOBERR   BAS   R14,ERRORTN    CALL ERROR MESSAGE ROUTINE          TGB12
*
JOBLOOP  LABEL
         L     R2,PARMADDR    RESTORE START OF PARAMETER ADDRESS
         SLR   R5,R5          CLEAR REGISTER FOR ICM
         LA    R2,1(R2)       INCREMENT PAST KEYWORD
         ICM   R5,1,0(R2)     LOAD SUBPARAMETER COUNT
         BNZ   JOBLOOP1       OK, BRANCH INTO ROUTINE
         LA    R2,1(R2)       NONE, INCREMENT PAST COUNT
         B     JOBLOOP5       AND GET OUT OF ROUTINE
JOBLOOP1 LA    R2,1(R2)       INCREMENT PAST KEYWORD DESCR
JOBLOOP2 SLR   R4,R4          CLEAR REGISTER FOR ICM
         ICM   R4,1,0(R2)     LOAD PARAMETER LENGTH
         BNM   JOBLOOP3       HIGH BIT NOT ON, ONLY 1 PARAMETER
         N     R4,=X'0000007F' 'AND' OUT THE HIGH ORDER BIT
         LA    R2,1(R2)       INCREMENT PAST CONTROL BYTE
         B     JOBLOOP4       BRANCH
JOBLOOP3 LA    R4,1           SET PARAM COUNT TO 1
JOBLOOP4 SLR   R3,R3          CLEAR REGISTER FOR ICM
         ICM   R3,1,0(R2)     LOAD PARAMETER LENGTH
         LA    R2,1(R3,R2)    INCREMENT PAST PARM
         BCT   R4,JOBLOOP4    LOOP UNTIL PROCESSED ALL PARMS
         BCT   R5,JOBLOOP2    LOOP UNTIL PROCESSED ALL PARMS
JOBLOOP5 ST    R2,PARMADDR    SAVE START OF PARAMETER ADDRESS
         B     JOBPARMS       CONTINUE
*
JOBERR2  BAS   R14,ERRORTN    CALL ERROR MESSAGE ROUTINE          TGB40
         B     GETNEXT        AND IGNORE THIS CARD                TGB40
*
*
         TITLE 'JES2 EXIT 6 - EXEC CARD PROCESSING'
**********************************************************************
**********************************************************************
**********************************************************************
***
***
***
***
***                       E X E C C A R D
***
***
***
***
**********************************************************************
**********************************************************************
**********************************************************************
*
*    THE TEXT OF THE EXEC CARD TEXT IS AS FOLLOWS
*        1)      2 BYTE LENGTH OF TEXT STRING INCLUDING ITSELF
*        2)      1 BYTE INDICATOR COMMON TO ALL TEXT RECORDS
*        3)      1 BYTE OF MISCELLANEOUS INDICATORS
*        4)      1 BYTE INDICATOR X'94' INDICATING EXEC POS INFORMATN
*        5)      1 BYTE NUMBER OF EXEC POSITIONAL PARAMETERS
*            THE 1ST POS PARAMETER IS THE STEP NAME
*            ALL OTHER POS PARAMETERS WILL BE IGNORED
*        6)      VARIABLE LENGTH LIST OF EXEC POS PARAMETERS
*            EACH PRECEDED BY A 1 BYTE LENGTH FIELD
*        7)      VARIABLE LENGTH LIST OF KEYWORD PARAMETERS
*            EACH IS PRECEDED BY A 1 BYTE KEY, 1 BYTE NUMBER OF
*            POSITIONAL SUBPARAMETERS PRESENT, AND A LIST OF
*            SUBPARAMETERS EACH PRECEDED BY A 1 BYTE LENGTH FIELD
*            WHICH MAY BE ZERO IF OMITTED AND FOLLOWED BY ANOTHER
*            POSITIONAL PARAMETER.
*
**********************************************************************
*
EXECARD  LABEL
*
**********************************************************************
*        UPDATE LAST EXEC TABLE (IF NEEDED) WITH UNIT INFO
**********************************************************************
*
EXECUPDT L     R7,LASTEXEC     LOAD ADDR OF LAST EXEC ENTRY
         LTR   R7,R7           SEE IF ADDR = 0
         BZ    EUPDT1          IF ZERO, NO UPDATE
         MVC   ETAPES,TAPECNT  MOVE STEP TAPE UNIT CNT TO TABLE
         MVC   ETIMES,EXECTIME MOVE STEP TIME TO TABLE
         XC    TAPECNT,TAPECNT ZERO TAPE UNIT CNT
         XC    LASTEXEC,LASTEXEC ZERO ADDR OF LAST EXEC ENTRY
EUPDT1   TM    STREINDC,ETXPRCV STATEMENT INVOKE A PROCEDURE?
         BO    PROCARD        YES, BRANCH
*
**********************************************************************
*               INITIALIZE NEW STEP ENTRY IN TABLE
**********************************************************************
*
EXECINIT LH    R15,ENTCOUNT   LOAD TABLE ENTRY COUNT
         LA    R15,1(R15)     ADD 1 TO COUNT
         CH    R15,MAXENTS    SEE IF MAXIMUM REACHED
         BNL   TBLFULL        MAXIMUM REACHED, TAKE DUMP & EXIT
         STH   R15,ENTCOUNT   STORE NEW ENTRY COUNT
         L     R7,LASTENT     LOAD ADDR OF LAST ENTRY IN TABLE
         LA    R7,ENTLEN(R7)  INCREMENT TO NEXT ENTRY
         ST    R7,LASTENT     SAVE ADDR OF LAST ENTRY IN TABLE
         ST    R7,LASTEXEC    SAVE ADDR OF LAST EXEC ENTRY
         MVI   ENTRYTYP,TYPEXEC SET TO EXEC ENTRY
         MVI   EENTRY,C' ' BLANK 1ST BYTE OF EXEC INFO
         MVC   EENTRY+1(23),EENTRY BLANK MOST OF EXEC INFO
         XC    ELIBIND(7),ELIBIND ZERO REST OF EXEC INFO
         LH    R3,REGION      GET REGION FROM JOB CARD
         CH    R3,=H'256'     GREATER THAN STEP DEFAULT?
         BNH   EX1            NO, SET STEP DEFAULT
         STH   R3,EREGION     YES, SET STEP REGION SAME AS JOB
         B     EX2
EX1      MVC   EREGION,=H'256' SET DEFAULT REGION SIZE TO 256K
EX2      TM    STREINDC,ETXPROC STATEMENT FROM A PROC??
         BNO   EINIT1         NO, BRANCH
         MVC   EJSTEP,SAVEPROC MOVE JOB STEP NAME TO TABLE
EINIT1   TM    STREINDC,ETXSTPLB STEP HAVE STEPLIB DD??
         BNO   EINIT2         NO, BRANCH
         OI    ELIBIND,ESTEPLIB SET INDICATOR IN TABLE
EINIT2   TM    JOBIND,JOBLIB  DOES JOB HAVE JOBLIB??
         BNO   EXECSTAR       NO, BRANCH
         OI    ELIBIND,EJOBLIB SET INDICATOR IN TABLE
EXECSTAR MVC   ECARDNO,CARDNO SAVE CARD NUMBER OF THIS STATEMENT
         LA    R2,STREKEY     LOAD START OF TRUE TEXT
         ST    R2,PARMADDR    SAVE START OF PARAMETER ADDRESS
EXECPARM CLI   0(R2),ENDK     END OF TEXT STRING?????
         BE    PROCSEAR       YES, GO SEE IF FROM A PROC
*
         EJECT
**********************************************************************
*                          EXEC STEPNAME
**********************************************************************
*
ESTEPN   CLI   0(R2),EXECK    SEE IF STEPNAME KEY
         BNE   EPGM           NO, BRANCH
*
         SLR   R4,R4          CLEAR REG FOR ICM
         ICM   R4,1,1(R2)     LOAD NUMBER OF SUBPARAMS
         BZ    EXELOOP        ZERO, NO STEP NAME
         SLR   R3,R3          CLEAR REG FOR ICM
         ICM   R3,1,2(R2)     LOAD LENGTH OF 1ST POS SUBPARAM
         BZ    EXELOOP        ZERO, NO STEP NAME, BRANCH
         CH    R3,=H'8'       SEE IF MAX LENGTH EXCEEDED
         BNH   ESTEPN2        NO, CONTINUE
         LA    R15,11         SET ERROR NUMBER
         B     EXECERR        GET OUT
*
ESTEPN2  BCTR  R3,0           MAKE MACHINE LENGTH
         TM    STREINDC,ETXPROC STATEMENT FROM A PROC
         BO    ESTEPN1        YES, THEN NAME IS PROC STEP NAME
         EX    R3,MOVE5       MOVE NAME TO JOBSTEP NAME
         B     EXELOOP        BRANCH
*
MOVE5    MVC   EJSTEP(0),3(R2)     *********** EXECUTED ************
*
ESTEPN1  EX    R3,MOVE6       MOVE NAME TO PROCSTEP NAME
         B     EXELOOP        BRANCH
*
MOVE6    MVC   EPSTEP(0),3(R2)     *********** EXECUTED ************
*
         EJECT
**********************************************************************
*                         EXEC PGM
**********************************************************************
*
EPGM     CLI   0(R2),PGMEK    SEE IF PGM= KEY
         BNE   EREGN          NO, BRANCH
*
         SLR   R3,R3          CLEAR REG FOR ICM
         ICM   R3,1,2(R2)     LOAD LENGTH OF PGM NAME
         BZ    EXELOOP        ZERO, NULL, BRANCH
         BM    EXELOOP        HIGH BIT ON, REFERBACK, IGNORE
         CH    R3,=H'8'       SEE IF LENGTH > 8
         LA    R15,12         (SET ERROR NUMBER)
         BH    EXECERR        YES - ERROR
*
         BCTR  R3,0           MAKE MACHINE LENGTH
         EX    R3,MOVE7       MOVE PGM NAME TO TABLE
*
**********************************************************************
*          CALL SCECHK TO VALIDATE SUPER ZAP AUTHORITY
**********************************************************************
*
         CLC   =C'IMASPZAP',3(R2) ZAP PGM NAME ?
         BE    EPGM1          YES, VALIDATE AUTHORITY
         CLC   =C'AMASPZAP',3(R2) ZAP NAME ?
         BNE   EXELOOP        NO, GET OUT
*
EPGM1    SCECHK =C'RMSC',=C'ZAP',3 VALIDATE THE SUBMISSION        TGB11
         LA    R15,10              SET ERROR NUMBER
         BNZ   EXECERR             ERROR
         B     EXELOOP             GET OUT
*
MOVE7    MVC   EPGMNM(0),3(R2)     *********** EXECUTED ************
*
         EJECT
**********************************************************************
*                          EXEC REGION
**********************************************************************
*
EREGN    CLI   0(R2),REGINEEK SEE IF REGION= KEY
         BNE   EREGN@         NO, BRANCH
*
         LA    R2,1(R2)       INCREMENT PAST KEYWORD
         SLR   R3,R3          CLEAR REG FOR ICM
         ICM   R3,1,0(R2)     LOAD SUBPARAMETER COUNT
         BZ    EXELOOP        NO SUBPARAMETERS, BRANCH
         LA    R2,1(R2)       INCREMENT PAST NUMBER OF FIELDS
*
EREGN0   ICM   R3,1,0(R2)     LOAD LENGTH OF REGION PARAM
         BZ    EXELOOP        ZERO, NULL, BRANCH
         CH    R3,=H'8'       SEE IF MAX LENGTH EXCEEDED
         LA    R15,13         (SET ERROR NUMBER)
         BH    EXECERR        YES - ERROR
*
         LA    R15,0(R3,R2)   POINT TO LAST CHAR OF REGION SIZE
         CLI   0(R15),C'K'    END IN 'K'
         BNE   EREGN5         NO, BRANCH
         BCTR  R3,0           REDUCE REGION LENGTH BY 1
         OI    ELIBIND,EREGIONK REMEMBER REGION SIZE IN 'K'
         B     EREGN1         SKIP CHECK FOR MEGABYTES
*
EREGN5   CLI   0(R15),C'M'    END IN 'M'
         BNE   EREGN1         NO, BRANCH
         BCTR  R3,0           REDUCE REGION LENGTH BY 1
         OI    ELIBIND,EREGIONM REMEMBER REGION SIZE IN 'M'
*
EREGN1   BAL   R14,DECBIN     CONVERT PARM TO BINARY
         BM    EREGN1         NO PARM - WE TESTED THIS ALREADY
         LA    R15,14         SET ERROR NUMBER
         BNZ   EXECERR        ERROR
*
         TM    ELIBIND,EREGIONK+EREGIONM    WAS A LETTER SPECIFIED ?
         BNZ   EREGN3         YES - BRANCH
         SRA   R1,10          DIVIDE BY 1024 FOR 'K' VALUE
         BNZ   EREGN3         NOT ZERO - USE IT                   TGB14
         LA    R1,1           ZERO - SHOW 1K USED MINIMUM         TGB14
EREGN3   STH   R1,EREGION     STORE REGION SIZE IN TABLE
         B     EXELOOP        BRANCH
*
         EJECT
**********************************************************************
*                         EXEC REGION.
**********************************************************************
*
EREGN@   CLI 0(R2),REGINPEK SEE IF REGION. KEY
         BNE   ETIME          NO, BRANCH
*
         LA    R2,1(R2)       INCREMENT PAST KEYWORD
         SLR   R4,R4          ZERO REGISTER
         ICM   R4,1,0(R2)     LOAD NUMBER OF SUBPARAMS
         LA    R15,13         (SET ERROR NUMBER)
         BZ    EXECERR        ZERO - ERROR
*
         CH    R4,=H'2'       CHECK NUMBER OF SUBPARAMS
         BH    EXECERR        > 2 - ERROR
*
         LA    R2,1(R2)       INCREMENT PAST NUMBER OF SUBPARAMETERS
         SLR   R3,R3          ZERO REGISTER
         ICM   R3,1,0(R2)     LOAD LENGTH OF STEPNAME
         BZ    EXECERR        ZERO - ERROR
*
         CH    R3,=H'8'       SEE IF MAX LENGTH EXCEEDED
         BH    EXECERR        YES - ERROR
*
         BCTR  R3,0           MAKE MACHINE LENGTH
         EX    R3,COMPARE3    SEE IF OVERRIDE FOR CURRENT STEP
         BNE   EXELOOP        NO, GET OUT
*
         LA    R2,2(R2,R3)    SET REG TO START OF 2ND PARAM
         B     EREGN0         BRANCH INTO MIDDLE OF EREGN ROUTINE
*
COMPARE3 CLC   1(0,R2),EPSTEP      *********** EXECUTED ************
*
         EJECT
**********************************************************************
*                            EXEC TIME
**********************************************************************
*
ETIME    CLI   0(R2),TIMEEEK  SEE IF TIME= KEY
         BNE   ETIME@         NO, BRANCH
*
         LA    R2,1(R2)       INCREMENT PAST KEYWORD DESCR
         SLR   R1,R1          CLEAR REGISTER FOR ICM
         ICM   R3,1,0(R2)     LOAD NUMBER OF SUBPARAMETERS
         BZ    EXELOOP        ZERO, IGNORE
*
         LA    R2,1(R2)       INCREMENT PAST CONTROL BYTE
*
ETIME0   CLI   0(R2),7        7 BYTE PARM ?                       TGB38
         BNE   ETIMEX0        NO  - CONTINUE                      TGB38
         CLC   =C'MAXIMUM',1(R2) TIME=MAXIMUM ?                   TGB38
         BNE   ETIMEX1        NO  - CONTINUE                      TGB38
         L     R1,=F'357912'  YES - GET MAX TIME IN SECONDS       TGB38
         B     ETIME2         AND CONTINUE                        TGB38
ETIMEX1  CLC   =C'NOLIMIT',1(R2) TIME=NOLIMIT ?                   TGB38
         BNE   ETIMEX0        NO  - GO TRY DEC CONVERSION         TGB38
         L     R1,=F'1440'    YES - THEN SET TIME=1440            TGB38
         OI    JOBIND,EXEC1440  SET BIT ALSO                      TGB38
         B     ETIME2         AND CONTINUE                        TGB38
ETIMEX0  DS     0H                                                TGB38
         CLI   0(R2),6        IS TIME OVER 6 CHARACTERS ?         TGB38
         BH    ETIMEX7        YES - ERROR                         TGB38
*                                                                 TGB38
         BAL   R14,DECBIN     CONVERT PARM TO BINARY
         BM    ETIME2         NO PARM - GO TRY NEXT
         BNZ   ETIME4         ERROR
*
         CH    R1,=H'1440'    SEE IF TIME = 1440
         BNE   ETIME2         NO, CHECK FOR SECONDS
         OI    JOBIND,EXEC1440 INDICATE TIME=1440 SPECIFIED
*
ETIME2   M     R0,=F'60'      CONVERT TO SECONDS
         ST    R1,EXECTIME    SAVE CPU TIME
         CH    R3,=H'2'       SECONDS GIVEN ?
         BNE   ETIME5         NO, GET OUT
         SLR   R4,R4          CLEAR FOR ICM
         ICM   R4,1,0(R2)     RELOAD LENGTH OF MINUTES
         LA    R2,1(R4,R2)    INCREMENT PAST MINUTES
*
         BAL   R14,DECBIN     CONVERT PARM TO BINARY
         BM    ETIME5         NO PARM - GO VALIDATE AUTH
         BNZ   ETIME4         ERROR
*
         L     R0,EXECTIME    RETRIEVE MINUTES
         AR    R0,R1          ADD SECONDS
         ST    R0,EXECTIME    PUT IT BACK
*
ETIME5   L     R0,EXECTIME         RETRIEVE STEP TIME IN SECONDS
         C     R0,MAXEXEC          COMPARE TO MAX STEP TIME SPECIFIED
         BNH   ETIME6              LOWER, LEAVE MAXEXEC ALONE
         ST    R0,MAXEXEC          HIGHER, STORE NEW VALUE
*
ETIME6   TM    JOBIND,EXEC1440     WAS TIME=1440 SPECIFIED ON EXEC ?
         BNO   EXELOOP             NO, GET OUT
         TM    JOBIND,JOBT1440     WAS TIME=1440 SPECIFIED ON JOB ?
         BO    EXELOOP             YES, AUTHORIZED FROM JOB CARD
*
         SCECHK =C'RMSC',=C'TIME',4 VALIDATE THE SUBMISSION       TGB11
         LA    R15,16              SET ERROR NUMBER
         BNZ   EXECERR             ERROR
         B     EXELOOP             GO GET NEXT PARM
*
ETIME4   LA    R15,51              SET ERROR NUMBER
         B     EXECERR             GET OUT
*
ETIMEX7  LA    R15,49              SET ERROR NUMBER
         B     EXECERR             GET OUT
*
         EJECT
**********************************************************************
*                         EXEC TIME.
**********************************************************************
*
ETIME@   CLI 0(R2),TIMEPEK SEE IF TIME. KEY
         BNE   EADDR          NO, BRANCH
*
         SLR   R3,R3          ZERO WORK REG
         SLR   R4,R4          ZERO WORK REG
         LA    R2,1(R2)       INCREMENT PAST KEYWORD
         ICM   R3,1,0(R2)     LOAD NUMBER OF SUBPARAMS
         BZ    EXELOOP        NO SUBPARAMS, BRANCH
         CH    R3,=H'3'       SEE IF MORE THAN 3 SUBPARAMS
         LA    R15,15         (SET ERROR NUMBER)
         BH    EXECERR        YES - ERROR
*
         LA    R2,1(R2)       INCREMENT PAST NUMBER OF SUBPARAMETERS
         CH    R3,=H'2'       SEE IF AT LEAST 2 SUBPARAMS
         BL    EXELOOP        ONLY ONE, IGNORE STEPNAME
         ICM   R4,1,0(R2)     LOAD LENGTH OF STEPNAME
         BZ    EXELOOP        NO STEPNAME, BRANCH
         CH    R4,=H'8'       SEE IF MAX LENGTH EXCEEDED
         BH    EXECERR        YES - ERROR
*
         BCTR  R4,0           MAKE MACHINE LENGTH
         EX    R4,COMPARE3    SEE IF CORRECT STEPNAME
         BNE   EXELOOP        NO, GET OUT
*
         LA    R2,2(R2,R4)    LOAD ADDR OF 2ND SUBPARAM
         BCTR  R3,0           DROP STEPNAME FROM SUBPARM COUNTER
         B     ETIME0         BRANCH TO MIDDLE OF ETIME ROUTINE
*
         EJECT
**********************************************************************
*                 EXEC ADDRSPC OR EXEC ADDRSPC.
**********************************************************************
*
EADDR    CLI   0(R2),ADRSPEEK SEE IF ADDRSPC= KEY
         BE    EADDR0         YES - BRANCH
         CLI   0(R2),ADRSPPEK SEE IF ADDRSPC. KEY
         BNE   EDPRTY         NO
*
EADDR0   CLC   3(4,R2),=C'REAL'  IS REAL STORAGE REQUESTED ?
         BNE   EXELOOP        NO, CONTINUE
         OI    JOBIND,EXADDR  YES, SET FLAG
         B     EXELOOP        GET OUT
*
         EJECT
**********************************************************************
*                   EXEC DPRTY OR EXEC DPRTY.
**********************************************************************
*
EDPRTY   CLI   0(R2),SDPEEK        SEE IF  DPRTY= KEY
         BE    EDPRTY0             YES - BRANCH
         CLI   0(R2),SDPPEK        SEE IF  DPRTY. KEY
         BNE   EXELOOP             NO
*
EDPRTY0  SCECHK =C'RMSC',=C'DPRTY',5 VALIDATE AUTHORITY           TGB11
         LA    R15,19              SET ERROR NUMBER
         BNZ   EXECERR             ERROR
         B     EXELOOP             OK
*
         EJECT
**********************************************************************
*
*    THIS ROUTINE WILL INCREMENT PAST THE STRING(S) BEING
*    PROCESSED. NOTE THAT FOLLOWING THE KEYWORD DESCRIPTOR
*    FIELD IS A COUNT OF SUBPARAMETERS. FOLLOWING THE COUNT
*    WILL BE A LENGTH OR DESCRIPTOR FIELD. IF THE HIGH ORDER
*    BIT IS ON, THE FIELD IS A COUNT FIELD OF THE NUMBER OF
*    SUBPARAMETERS WHICH THE SUBPARAMETER ITSELF MAY HAVE.
*    IF THIS IS TRUE, THE DESCRIPTOR FIELD WILL BE FOLLOWED BY
*    A LENGTH FIELD FOR THE FIRST SUBPARAMETER. IF THE HIGH
*    ORDER BIT IS NOT ON, IT IS ONLY A LENGTH FIELD FOR A
*    SINGLE SUBPARAMETER.
*                                                                 TGB12
*   NOTE: ENTER AT LABEL 'EXECERR' WILL ISSUE MESSAGE NUMBER      TGB12
*         (PRE-LOADED INTO R15)                                   TGB12
*                                                                 TGB12
**********************************************************************
*
EXECERR  BAS   R14,ERRORTN    ISSUE ERROR MESSAGE                 TGB12
*
EXELOOP  LABEL
         L     R2,PARMADDR    RESTORE START OF PARAMETER ADDRESS
         SLR   R5,R5          CLEAR REGISTER FOR ICM
         LA    R2,1(R2)       INCREMENT PAST KEYWORD
         ICM   R5,1,0(R2)     LOAD SUBPARAMETER COUNT
         BNZ   EXELOOP1       OK, BRANCH INTO ROUTINE
         LA    R2,1(R2)       NONE, INCREMENT PAST COUNT
         B     EXELOOP5       AND GET OUT OF ROUTINE
EXELOOP1 LA    R2,1(R2)       INCREMENT PAST KEYWORD DESCR
EXELOOP2 SLR   R4,R4          CLEAR REGISTER FOR ICM
         ICM   R4,1,0(R2)     LOAD PARAMETER LENGTH
         BNM   EXELOOP3       HIGH BIT NOT ON, ONLY 1 PARAMETER
         N     R4,=X'0000007F' 'AND' OUT THE HIGH ORDER BIT
         LA    R2,1(R2)       INCREMENT PAST CONTROL BYTE
         B     EXELOOP4       BRANCH
EXELOOP3 LA    R4,1           SET PARAM COUNT TO 1
EXELOOP4 SLR   R3,R3          CLEAR REGISTER FOR ICM
         ICM   R3,1,0(R2)     LOAD PARAMETER LENGTH
         LA    R2,1(R3,R2)    INCREMENT PAST PARM
         BCT   R4,EXELOOP4    LOOP UNTIL PROCESSED ALL PARMS
         BCT   R5,EXELOOP2    LOOP UNTIL PROCESSED ALL PARMS
EXELOOP5 ST    R2,PARMADDR    SAVE START OF PARAMETER ADDRESS
         B     EXECPARM       CONTINUE
*
         EJECT
**********************************************************************
*
*    THIS ROUTINE WILL INCREMENT THRU THE OUTPUT JCL CARD
*    PARAMETERS. NOTE THAT FOLLOWING THE KEYWORD DESCRIPTOR
*    FIELD IS A COUNT OF SUBPARAMETERS. FOLLOWING THE COUNT
*    WILL BE A LENGTH. THIS IS THE LENGTH OF THE KEYWORD.
*    FOLLOWING THE KEYWORD WILL BE A LENGTH OF THE SUBPARM
*    VALUE, FOLLOWED BY THE SUBPARM VALUE ITSELF. THIS IS
*    FOLLOWED BY THE LENGTH OF THE NEXT SUBPARM, AND SO ON.
*    THE KEYWORD DESCRIPTOR FOR THE OUTPUT VERB IS X'BE'.
*    THE KEYWORD DESCRIPTOR FOR ALL SUBPARMS IS X'1A'.
*    THE END OF THE STRING IS FLAGGED BY X'FE'.
*
**********************************************************************
*
JDTCARD  DS    0H
*
JDTLOOP  LA    R2,STRSKEY     POINT TO TEXT STRING
JDTLOOP1 CLI   0(R2),X'FE'    END OF STRING ?
         BE    GETNEXT        YES, GO GET ANOTHER STATEMENT
         SLR   R5,R5          CLEAR REGISTER FOR ICM
         ICM   R5,1,1(R2)     LOAD SUBPARAMETER COUNT
         BNZ   JDTLOOP2       OK, BRANCH INTO ROUTINE
         B     GETNEXT        AND GET OUT OF ROUTINE
JDTLOOP2 LA    R2,2(R2)       INCREMENT PAST KEYWORD DESCR
JDTLOOP3 SLR   R3,R3          CLEAR REGISTER FOR ICM
         ICM   R3,1,0(R2)     LOAD PARAMETER LENGTH
         CH    R3,=H'5'       IS KEYWORD 5 BYTES LONG ?
         BNE   JDTCARD1       NO, CONTINUE
         CLC   1(5,R2),=C'CLASS'  IS IT THE CLASS KEYWORD ?
         BE    JDTCARD3       YES, GO PROCESS
JDTCARD1 LA    R2,1(R3,R2)    INCREMENT PAST PARM
         BCT   R5,JDTLOOP3    LOOP UNTIL PROCESSED ALL PARMS
         B     JDTLOOP1       LOOP UNTIL PROCESSED ALL PARMS
JDTCARD2 B     GETNEXT        GO GET ANOTHER STATEMENT
JDTCARD3 LA    R2,1(R3,R2)    INCREMENT PAST CLASS KEYWORD
         CLI   1(R2),C'*'     ASTERISK ?
         BE    GETNEXT        YES, CHECKED ON JOB CARD, GET OUT
*
         LA    R1,1(R2)            POINT TO CHARACTER TO CHECK    TGB01
         BAL   R14,ALPHANUM        CHECK CHARACTER AT (R1)        TGB01
         LA    R15,52              SET ERROR NUMBER               TGB01
         BNZ   GETERR              ERROR - NOT ALPHANUMERIC       TGB01
*
         SCECHK =C'RMSG',1(R2),1   CHECK SYSOUT AUTH              TGB11
         BZ    GETNEXT             IF OK - CONTINUE ON WITHOUT ERROR
         LA    R15,44              SET ERROR NUMBER
         B     GETERR              ERROR
*
         TITLE 'JES2 EXIT 6 - DD CARD PROCESSING'
**********************************************************************
**********************************************************************
**********************************************************************
***
***
***
***
***                       D D     C A R D
***
***
***
***
**********************************************************************
**********************************************************************
**********************************************************************
*
*    THE TEXT OF THE DD CARD TEXT IS AS FOLLOWS
*        1)  2 BYTE LENGTH OF TEXT STRING INCLUDING ITSELF
*        2)  1 BYTE INDICATOR COMMON TO ALL TEXT RECORDS
*        3)  1 BYTE OF MISCELLANEOUS INDICATORS
*        4)  1 BYTE INDICATOR X'6E' INDICATING DD POS INFORMATION
*        5)  1 BYTE NUMBER OF DD POSITIONAL PARAMETERS
*            THE 1ST POS PARAMETER IS THE DDNAME IF PRESENT
*            ALL OTHER POS PARAMETERS WILL BE IGNORED
*        6)  VARIABLE LENGTH LIST OF DD POS PARAMETERS
*            EACH PRECEDED BY A 1 BYTE LENGTH FIELD
*        7)  VARIABLE LENGTH LIST OF KEYWORD PARAMETERS
*            EACH IS PRECEDED BY A 1 BYTE KEY, 1 BYTE NUMBER OF
*            POSITIONAL SUBPARAMETERS PRESENT, AND A LIST OF
*            SUBPARAMETERS EACH PRECEDED BY A 1 BYTE LENGTH FIELD
*            WHICH MAY BE ZERO IF OMITTED AND FOLLOWED BY ANOTHER
*            POSITIONAL PARAMETER.
*
**********************************************************************
*
DDCARD   LABEL
*
         TM    STRDINDC,DTXDDNM  SEE IF DD DDNAME= STATEMENT
         BO    GETNEXT           YES, BYPASS
         TM    STRDINDC,DTXDYNAM SEE IF DD DYNAM STATEMENT
         BO    GETNEXT           YES, BYPASS
         TM    STRDINDC,DTXSYSIN SEE IF DD INPUT SPOOL FILE
         BO    GETNEXT           YES, BYPASS
*
**********************************************************************
*        INITIALIZE TEMPORARY ENTRY WHICH WILL BE USED
*        IF PRIV OR TAPE UNIT
**********************************************************************
*
         XC    UNITIND,UNITIND ZERO UNIT TYPE IND
         XC    DISPIND,DISPIND ZERO DISP IND
         MVI   UNITCOUN,X'01' SET DEFAULT UNIT COUNT TO 1
         MVI   TENTRY,C' '    BLANK FIRST BYTE OF TEMP ENTRY
         MVC   TENTRY+1(52),TENTRY BLANK ENTIRE TEMP ENTRY
         XC    TTYPE,TTYPE    ZERO TEMPORARY UNIT TYPE
         XC    TVOLSER,TVOLSER ZERO TEMP 1ST VOLSER
DDSTART  LA    R2,STRDKEY     LOAD START OF TRUE TEXT
         ST    R2,PARMADDR    SAVE START OF PARAMETER ADDRESS
DDPARM   CLI   0(R2),ENDK     END OF TEXT STRING??
         BE    DDEND          YES, GO CHECK FOR UPDATE
*
         EJECT
**********************************************************************
*                           DD DDNAME
**********************************************************************
*
DDDNAME  CLI   0(R2),DDK      SEE IF DDNAME KEY
         BNE   DDDUMMY        NO, BRANCH                          TGB20
*
         SLR   R3,R3          CLEAR REG FOR ICM
         ICM   R4,1,1(R2)     LOAD NUMBER OF SUBPARAMS
         BZ    DDLOOP         ZERO, NO SUBPARAMS
         SLR   R3,R3          CLEAR REG FOR ICM
         ICM   R3,1,2(R2)     LOAD LENGTH OF DDNAME
         BZ    DDLOOP         YES, CONCATINATED DD, LOOP
         CH    R3,=H'8'       SEE IF MAX LENGTH EXCEEDED
         LA    R15,20         SET ERROR NUMBER
         BH    DDERR          YES - ERROR
*
         BCTR  R3,0           MAKE MACHINE LENGTH
         EX    R3,MOVE8       MOVE DDNAME TO TEMP ENTRY
         B     DDLOOP         GO GET NEXT PARAM
*
MOVE8    MVC   TDDN(0),3(R2)       *********** EXECUTED ************
*
         EJECT                                                    TGB20
******************************************************************TGB20
*                           DD DUMMY                              TGB20
******************************************************************TGB20
*                                                                 TGB20
DDDUMMY  CLI   0(R2),DUMMK    SEE IF DUMMY KEY                    TGB20
         BNE   DDSNAME        NO, BRANCH                          TGB20
         B     GETNEXT        DUMMY STATEMENTS ARE IGNORED        TGB20
*                                                                 TGB20
         EJECT
**********************************************************************
*                         DD DSNAME
**********************************************************************
*
DDSNAME  CLI   0(R2),DSNAMEK  SEE IF DSNAME KEY
         BNE   DDISP          NO, BRANCH
*
         CLI   1(R2),0        ANY DSNAME PARM HERE ?              TGB39
         BE    DDISP          NO, BRANCH                          TGB39
         SLR   R3,R3          CLEAR REG FOR ICM
         ICM   R3,1,2(R2)     LOAD LENGTH OF DSN
         BZ    DDLOOP         ZERO, NULL, BRANCH
         BNM   DSNSTD         HIGH BIT NOT ON, STANDARD DSN
         CLI   4(R2),C'*'     SEE IF 1ST PARAM = * (REFERBACK)
         BE    DSNREFBK       YES, REFERBACK
*
DSNPDS   LA    R4,3(R2)       LOAD ADDR OF LENGTH OF 1ST PARM
         SLR   R3,R3          CLEAR R3
         ICM   R3,1,0(R4)     LOAD LENGTH OF 1ST PARM
         LA    R4,2(R3,R4)    BUMP TO 1ST CHAR OF 2ND PARM
         CLI   0(R4),C'-'     MINUS SIGN ?
         BE    DSNPDS3        YES - MUST BE A GDG
         CLI   0(R4),C'+'     PLUS SIGN  ?
         BE    DSNPDS3        YES - MUST BE A GDG
         CLI   0(R4),C'0'     LESS THAN 0 ?
         BL    DSNPDS1        YES - MUST BE A PDS
         CLI   0(R4),C'9'     LESS THAN OR = 9 ?
         BNH   DSNPDS3        YES - MUST BE A GDG
*
DSNPDS1  LA    R4,3(R2)       LOAD ADDR OF LENGTH OF 1ST PARM
         SLR   R3,R3          CLEAR R3
         ICM   R3,1,0(R4)     LOAD LENGTH OF DSN
         CH    R3,=H'44'      SEE OF MAX LENGTH EXCEEDED
         LA    R15,22         SET ERROR NUMBER
         BH    DDERR          YES - ERROR
         BCTR  R3,0           MAKE MACHINE LENGTH
         MVC   TDSN,BLANKS    CLEAR AREA FOR VARIABLE MVC         TGB24
         EX    R3,MOVE14      MOVE DSN TO TEMP ENTRY
         B     DDLOOP         GOT DSNAME                          TGB24
*
MOVE14   MVC   TDSN(0),1(R4)       *********** EXECUTED ************
*
**********************************************************************
*       DSNAME LOOKS LIKE A GDG - MOVE OFFSET TO END OF DSNAME
**********************************************************************
*
DSNPDS3  SLR   R3,R3          CLEAR R3
         ICM   R3,1,2(R2)     LOAD PARAM COUNT BYTE TO R3
         N     R3,=X'0000007F' TURN OFF HIGH ORDER BIT
         CH    R3,=H'2'       SEE IF TWO SUBPARAMS
         LA    R15,21         SET ERROR NUMBER
         BNE   DDERR          NO - ERROR
*
         LA    R4,3(R2)       LOAD ADDR OF START OF 1ST ENTRY
         IC    R3,0(R4)       LOAD LENGTH OF 1ST ENTRY
         CH    R3,=H'35'      SEE IF MAX LENGTH EXCEEDED
         LA    R15,23         SET ERROR NUMBER
         BH    DDERR          YES - ERROR
*
         BCTR  R3,0           MAKE MACHINE LENGTH
         EX    R3,MOVE14      MOVE 1ST PART DSN TO TEMP ENTRY
         LA    R3,1(R3)       MAKE TRUE LENGTH AGAIN
         LA    R4,1(R3,R4)    INCREMENT TO 2ND ENTRY
         LA    R5,TDSN        LOAD ADDR OF TEMPORARY DSN
         AR    R5,R3          LOAD ADDR WITHIN TDSN FOR GEN #
         LR    R0,R3          SAVE LENGTH OF 1ST PART DSN
         ICM   R3,1,0(R4)     LOAD LENGTH OF 2ND PART DSN
         LA    R15,21         SET ERROR NUMBER
         BZ    DDERR          YES - ERROR
*
         AR    R0,R3          ADD NEW LENGTH OF 2ND PART TO 1ST
         CH    R0,=H'42'      SEE IF TOTAL LENGTH EXCEEDS MAX
         LA    R15,23         SET ERROR NUMBER
         BH    DDERR          YES - ERROR
*
         MVI   0(R5),C'('     PUT PARENS FOR GEN #
         LA    R5,1(R5)       INCREMENT TO START TRUE GEN #
         BCTR  R3,0           MAKE MACHINE LENGTH
         EX    R3,MOVE15      MOVE GEN # TO TDSN
         LA    R5,1(R3,R5)    INCREMENT TO END OF TDSN FIELD
         MVI   0(R5),C')'     FINISH PARENS FOR GEN #
         B     DDLOOP         GO GET NEXT ENTRY
*
MOVE15   MVC   0(0,R5),1(R4)       *********** EXECUTED ************
*
**********************************************************************
*                  DSNAME PROBABLY A REFERBACK
**********************************************************************
*
DSNREFBK BAL   R14,REFBACK    GO TO REFERBACK RTN
         MVC   TDSN,REFDSN    SAVE REFERBACK DSNAME
         B     DDLOOP         GO GET NEXT ENTRY
*
**********************************************************************
*                    DSNAME PROBABLY STANDARD
**********************************************************************
*
DSNSTD   CH    R3,=H'44'      SEE IF > MAX LENGTH
         LA    R15,22         SET ERROR NUMBER
         BH    DDERR          YES - ERROR
*
         CLC   3(8,R2),=C'NULLFILE' SEE IF DSN=NULLFILE
         BE    GETNEXT        YES, DUMMY, IGNORE STATEMENT
         BCTR  R3,0           MAKE MACHINE LENGTH
         EX    R3,MOVE9       MOVE DSN TO TEMP ENTRY
         B     DDLOOP         GO GET NEXT ENTRY
*
MOVE9    MVC   TDSN(0),3(R2)       *********** EXECUTED ************
*
         EJECT
**********************************************************************
*                         DD DISP
**********************************************************************
*
DDISP    CLI   0(R2),DISPK    SEE IF DISP= KEYWORD
         BNE   DUNIT          NO, BRANCH
         SLR   R4,R4          CLEAR REG FOR ICM
         ICM   R4,1,1(R2)     LOAD NUMBER SUBPARAMS
         BZ    DDLOOP         ZERO, NULL, BRANCH
         LA    R2,2(R2)       LOAD START ADDR OF SUBPARAMS
         CH    R4,=H'3'       SEE IF NUMBER > 3
         LA    R15,23         SET ERROR NUMBER
         BH    DDERR          YES - ERROR
*
         SLR   R5,R5          ZERO WORK REG
DSPLOO1  LA    R5,1(R5)       ADD 1 TO COUNTER
         CR    R5,R4          SEE IF ALL PROCESSED
         BH    DISPCHK        YES, GO CHECK RESULTS
         SLR   R3,R3          ZERO WORK REG
         IC    R3,0(R2)       LOAD LEN OF PARAM
         CH    R5,=H'1'       SEE IF 1ST PARAM
         BE    DSPLOO2        YES, BRANCH TO PROCESS
         CH    R5,=H'2'       SEE IF 2ND PARAM
         BE    DSPLOO7        YES, BRANCH TO PROCESS
         B     DSPLOO9        BRANCH TO PROCESS
*
***********************************************************************
*                      FIRST DISP PARAMETER
**********************************************************************
*
DSPLOO2  LTR   R3,R3          SEE IF LENGTH = 0
         BZ    DSPLOO3        YES, GO SET TO NEW
         CLC   1(3,R2),=C'NEW' SEE IF NEW
         BNE   DSPLOO4        NO, BRANCH
DSPLOO3  OI    DISPIND,NEW    SET TO NEW
         B     DSPLOO14       GO GET NEXT
DSPLOO4  CLC   1(3,R2),=C'SHR' SEE IF SHR
         BNE   DSPLOO5        NO, BRANCH
         OI    DISPIND,SHR    SET TO SHR
         B     DSPLOO14       GO GET NEXT
DSPLOO5  CLC   1(3,R2),=C'OLD' SEE IF OLD
         BNE   DSPLOO6        NO, MUST BE "MOD", BRANCH
         OI    DISPIND,OLD    SET TO OLD
         B     DSPLOO14       GO GET NEXT
DSPLOO6  OI    DISPIND,MOD    SET TO MOD
         B     DSPLOO14       GO GET NEXT
*
**********************************************************************
*                     SECOND DISP PARAMETER
**********************************************************************
*
DSPLOO7  LTR   R3,R3          SEE IF LENGTH = 0
         BNZ   DSPLOO9        NOT ZERO, NO DEFAULT
         TM    DISPIND,OLD    SEE IF OLD
         BO    DSPLOO8        YES, GO SET DEFAULT TO KEEP
         TM    DISPIND,SHR    SEE IF SHR
         BO    DSPLOO8        YES, GO SET DEFAULT TO KEEP
         TM    DISPIND,MOD    SEE IF MOD
         BO    DSPLOO8        YES, GO SET DEFAULT TO KEEP
         OI    DISPIND,DELETE SET DEFAULT TO DELETE FOR "NEW"
         B     DSPLOO14       GO GET NEXT
DSPLOO8  OI    DISPIND,KEEP   SET TO KEEP
         B     DSPLOO14       GO GET NEXT
*
**********************************************************************
*                     THIRD DISP PARAMETER
**********************************************************************
*
DSPLOO9  LTR   R3,R3          SEE IF LENGTH = 0
         BZ    DSPLOO14       YES, USE DEFAULT OF PREVIOUS PARAMETER
         CLC   1(4,R2),=C'KEEP' SEE IF KEEP
         BNE   DSPLOO10       NO, BRANCH
         OI    DISPIND,KEEP   SET TO KEEP
         B     DSPLOO14       GO GET NEXT
DSPLOO10 CLC   1(4,R2),=C'PASS' SEE IF PASS
         BNE   DSPLOO11       NO, BRANCH
         OI    DISPIND,PASS   SET TO PASS
         B     DSPLOO14       GO GET NEXT
DSPLOO11 CLC   1(5,R2),=C'CATLG' SEE IF CATLG
         BNE   DSPLOO12       NO, BRANCH
         OI    DISPIND,CATLG  SET TO CATLG
         B     DSPLOO14       GO GET NEXT
DSPLOO12 CLC   1(6,R2),=C'DELETE' SEE IF DELETE
         BNE   DSPLOO13       NO, GO SET TO "UNCATLG"
         OI    DISPIND,DELETE SET TO DELETE
         B     DSPLOO14       GO GET NEXT
DSPLOO13 OI    DISPIND1,UNCATLG SET TO UNCATLG
DSPLOO14 LA    R2,1(R3,R2)    INCREMENT TO NEXT ENTRY
         B     DSPLOO1        LOOP
*
**********************************************************************
*     CHECK RESULTS OF PROCESSING ALL DISP PARAMETERS
*     IF ONLY 1 DISP PARAMETER WAS ENTERED, THE DEFAULT
*     FOR THE SECOND PARAMETER MUST BE DETERMINED.
**********************************************************************
*
DISPCHK  CH    R4,=H'1'       SEE IF ONLY 1 ENTRY
         BNE   DISPEND        NO, DO NOT SET DEFAULT
         TM    DISPIND,OLD    SEE IF OLD
         BO    DISPCHK2       YES, BRANCH
         TM    DISPIND,SHR    SEE IF SHR
         BO    DISPCHK2       YES, BRANCH
         TM    DISPIND,MOD    SEE IF MOD
         BO    DISPCHK2       YES, BRANCH
*
**********************************************************************
*                   DISP=NEW  DEFAULT TO DELETE
**********************************************************************
*
DISPCHK1 OI    DISPIND,DELETE SET TO DELETE
         B     DISPEND        GET OUT
*
**********************************************************************
*              DISP=OLD, MOD, OR SHR  DEFAULT TO KEEP
**********************************************************************
*
DISPCHK2 OI    DISPIND,KEEP   SET TO KEEP
DISPEND  B     DDLOOP         GO GET NEXT PARAM
*
         EJECT
**********************************************************************
*                          DD UNIT
**********************************************************************
*
DUNIT    CLI   0(R2),UNITK    SEE IF UNIT= PARAM
         BNE   DAFF           NO, BRANCH
*
         ICM   R4,1,1(R2)     GET NUMBER OF POS SUBPARAMS
         BZ    DDLOOP         ZERO, NO POS SUBPARAMS
         CH    R4,=H'3'       SEE IF NUMBER > 3
         LA    R15,24         SET ERROR NUMBER
         BH    DDERR          YES - ERROR
*
         LA    R2,2(R2)       LOAD START OF POS PARAMS
         SLR   R5,R5          ZERO WORK REG
*
**********************************************************************
*    LOOP ON NUMBER OF PARAMETERS.  NOTE THAT THE FIRST
*    PARAMETER (UNITNAME) AND THE SECOND PARAMETER (UNIT
*    COUNT) ARE ALL WE ARE INTERESTED IN.
**********************************************************************
*
UNITLOO1 LA    R5,1(R5)       ADD 1 TO COUNT
         CR    R5,R4          SEE IF PROCESSED ALL SUBPARAMS
         BH    DDLOOP         YES, GO GET NEXT PARM
         SLR   R3,R3          ZERO WORK REG
         ICM   R3,1,0(R2)     LOAD LENGTH OF SUBPARAM
         BZ    UNITLOO2       ZERO, GO GET NEXT SUBPARAM
         CH    R3,=H'8'       SEE IF LENGTH > 8
         LA    R15,24         SET ERROR NUMBER
         BH    DDERR          YES - ERROR
*
         CH    R5,=H'1'       SEE IF 1ST POS SUBP
         BE    UNITNM1        YES, BRANCH
         CH    R5,=H'2'       SEE IF 2ND POS SUBP
         BE    UNITCT         YES, BRANCH
         B     UNITLOO2       ANYTHING ELSE NOT WANTED
UNITNM1  DS    0H
*
***************************************************************** TGB33
*              CHECK FOR ROBOT TAPE UNIT AUTHORITY                TGB33
***************************************************************** TGB33
*                                                                 TGB33
         CLC   =C'TAPEK',1(R2)  TAPEK UNIT ?                      TGB33
         BNE   UNITNM1A       NO  - SKIP THE RACF CHECK           TGB33
         SCECHK =C'RMSC',=C'TAPEK',5    CHECK FOR TAPEK AUTH      TGB33
         LA    R15,54         (SET ERROR NUMBER)                  TGB33
         BNZ   DDERR          NO AUTH - ERROR                     TGB33
UNITNM1A DS    0H                                                 TGB33
*
***************************************************************** TGB42
*              CHECK FOR REMOTE TAPE UNIT AUTHORITY               TGB42
***************************************************************** TGB42
*                                                                 TGB42
         CLC   =C'TAPE9R',1(R2)  TAPEK UNIT ?                     TGB42
         BE    UNITNM1B       YES - CHECK RACF AUTH               TGB42
         CLC   =C'TAPEKR',1(R2)  TAPEK UNIT ?                     TGB42
         BNE   UNITNM1C       NO  - SKIP THE RACF CHECK           TGB42
UNITNM1B SCECHK =C'RMSC',=C'TAPER',5    CHECK FOR TAPEK AUTH      TGB42
         LA    R15,55         (SET ERROR NUMBER)                  TGB42
         BNZ   DDERR          NO AUTH - ERROR                     TGB42
UNITNM1C DS    0H                                                 TGB42
*
**********************************************************************
*                    PROCESS UNIT NAME
**********************************************************************
*
         SLR   R15,R15        CLEAR REG 15
         LA    R1,DEVTABLE    LOAD ADDR OF DEV TABLE
         BCTR  R3,0           MAKE MACHINE LENGTH
         CH    R3,=H'2'       POSSIBLE ABSOLUTE ALLOC(CUU)?
         BNE   UNITNM2        NO, CHK FOR CLASS DEVICES
         CLI   1(R2),C'0'     CHAN NOS  NUMERIC?
         BL    UNITNM2        NO, CAN'T BE DEDICATED DEVICE
         OI    RESOURCE+1,DEDICATE YES, ADD 'DEDICATE' RESOURCE
*
**********************************************************************
*        SEARCH THE DEVICE TABLE FOR A MATCH ON UNIT NAME TO
*        DETERMINE THE ATTRIBUTES OF THE UNIT NAME.
**********************************************************************
*
UNITNM2  CLI   1(R1),X'00'    SEE IF END OF TABLE
         BE    UNITNM3        YES, BRANCH
         IC    R15,1(R1)      INSERT LENGTH OF UNIT NAME
         EX    R15,COMPARE2   SEE IF UNIT NAME MATCH
         BE    UNITNM3        YES, BRANCH
         LA    R1,10(R1)      INCREMENT TO NEXT ENTRY
         B     UNITNM2        LOOP
*
COMPARE2 CLC   1(0,R2),2(R1)       *********** EXECUTED ************
*
UNITNM3  LA    R3,1(R3)       MAKE ORIG LENGTH
         OC    UNITIND,0(R1)  'OR' IN THE UNIT TYPE BITS
         B     UNITLOO2       GO PROCESS NEXT POS PARAM
*
UNITCT   CLI   1(R2),C'P'     PARALLEL MOUNTING?
         BNE   UNITCT1        NO, BRANCH
         MVI   UNITCOUN,C'P'  SET UNIT COUNT TO 'P'
         B     UNITLOO2
*
**********************************************************************
*                      PROCESS UNIT COUNT
**********************************************************************
*
UNITCT1  BAL   R14,DECBIN     CONVERT PARM TO BINARY
         BM    UNITLOO2       NO PARM - TRY NEXT
         LA    R15,25         SET ERROR CODE
         BNZ   DDERR          NOT NUMERIC - ERROR
*
         STC   R1,UNITCOUN    SAVE UNIT COUNT
*
UNITLOO2 LA    R2,1(R3,R2)    INCREMENT TO NEXT ENTRY
         B     UNITLOO1       GO PROCESS NEXT SUBPARAM
*
         EJECT
**********************************************************************
*                       DD UNIT=AFF
**********************************************************************
*
DAFF     CLI   0(R2),AFFMK    SEE IF UNIT=AFF= KEY
         BNE   DVOL           NO, BRANCH
*
         MVI   REFERBCK,C' '  BLANK START OF REFERBACK WORK AREA
         MVC   REFERBCK+1(23),REFERBCK BLANK ENTIRE FIELD
         LA    R2,2(R2)       LOAD ADDR OF AFF FIELD
         SLR   R3,R3          CLEAR REG FOR ICM
         ICM   R3,1,0(R2)     LOAD LENGTH OF DDNAME
         BZ    DDLOOP         YES, GO PROCESS NEXT PARAM
         CH    R3,=H'8'       SEE IF LENGTH > 8
         LA    R15,24         SET ERROR NUMBER
         BH    DDERR          YES - ERROR
*
         BCTR  R3,0           MAKE MACHINE LENGTH
         EX    R3,MOVE10      MOVE DDNAME TO REFERBACK FIELD
         L     R7,LASTEXEC    LOAD ADDR LAST EXEC ENTRY
         MVI   UNITIND,UNITFND SET UNIT FOUND IND
AFFLOOP  LA    R7,ENTLEN(R7) INCREMENT TO NEXT DD ENTRY
         CLI   ENTRYTYP,TYPEND END OF TABLE?
         BE    AFFEND         YES, BRANCH
         CLC   REFDDN,DDDN    MATCH DDNAME?
         BE    AFFOUND        YES, BRANCH
         B     AFFLOOP        LOOP
AFFOUND  OC    UNITIND,DTYPE SET UNIT TYPE FROM PREV
         OI    UNITIND,AFF    TURN ON FOUND BY AFF IND
AFFEND   B     DDLOOP         GO PROCESS NEXT ENTRY
*
MOVE10   MVC   REFDDN(0),1(R2)     *********** EXECUTED ************
*
         EJECT
**********************************************************************
*                            DD VOL
**********************************************************************
*
DVOL     CLI   0(R2),VOLUMEK  SEE IF VOL= KEYWORD
         BNE   DSER           NO, BRANCH
*
         ICM   R4,1,1(R2)     LOAD NUM OF SUBPARAMS
         BZ    DDLOOP         YES, GO GET NEXT PARAM
         CH    R4,=H'4'       SEE IF AT LEAST 4 PARAMS
         BL    DDLOOP         LESS THAN 4, NONE NEEDED
         LA    R15,26         SET ERROR NUMBER
         BH    DDERR          YES - ERROR
*
**********************************************************************
*            WE NEED ONLY THE 4TH PARAM (VOL COUNT)
**********************************************************************
*
         SR    R5,R5          ZERO WORK REG
         LA    R2,2(R2)       LOAD START OF SUBPARAMS
VOLOOP1  LA    R5,1(R5)       ADD 1 TO COUNTER
         SLR   R3,R3          CLEAR REG FOR IC
         IC    R3,0(R2)       LOAD LENGTH OF SUBPARAM
         CH    R5,=H'4'       SEE IF 4TH PARAM
         BL    VOLOOP3        LESS THAN 4, GO GET NEXT
         BH    DDLOOP         GREATER THAN 4, GET OUT
*
         CH    R3,=H'8'       SEE IF LENGTH > 8
         LA    R15,26         SET ERROR NUMBER
         BH    DDERR          YES - ERROR
*
         BAL   R14,DECBIN     CONVERT PARM TO BINARY
         BM    DDLOOP         NO PARM - TRY NEXT
         LA    R15,27         SET ERROR CODE
         BNZ   DDERR          NOT NUMERIC - ERROR
*
         STC   R1,VOLCNT      SAVE VOL CNT
*
VOLOOP3  LA    R2,1(R3,R2)    INCRMENT TO NEXT POS SUBPARAM
         B     VOLOOP1        LOOP
*
         EJECT
**********************************************************************
*                           DD VOL=SER
**********************************************************************
*
DSER     CLI   0(R2),SERMK    SEE IF VOL=SER= KEYWORD
         BNE   DREF           NO, BRANCH
*
**********************************************************************
*    ALL WE NEED IS THE NUMBER OF VOL/SER'S
*    AND THE 1ST VOLSER IN THE LIST IF PRESENT
**********************************************************************
*
         ICM   R4,1,1(R2)     LOAD NUMBER OF SUBPARAMS
         STC   R4,SERCNT      SAVE NUMBER OF VOL/SER'S
         BZ    DDLOOP         ZERO SUBPARAMS, GET OUT
         ICM   R3,1,2(R2)     LOAD LEN OF 1ST VOLSER
         BZ    DDLOOP         NULL VOLSER, GET OUT
         CH    R3,=H'6'       SEE IF MAX LEN EXCEEDED
         LA    R15,28         SET ERROR NUMBER
         BH    DDERR          YES - ERROR
*
         BCTR  R3,0           MAKE MACHINE LENGTH
         EX    R3,MOVE13      MOVE 1ST VOLSER TO SAVE
         B     DDLOOP         GO GET NEXT PARAM
*
MOVE13   MVC   TVOLSER(0),3(R2)    *********** EXECUTED ************
*
         EJECT
**********************************************************************
*                          DD VOL=REF
**********************************************************************
*
DREF     CLI   0(R2),REFMK    SEE IF VOL=REF= KEYWORD
         BNE   DLABEL         NO, BRANCH
*
         SLR   R4,R4          CLEAR REG FOR ICM
         ICM   R4,1,2(R2)     LOAD 'LENGTH' OF REFERBACK
         BZ    DDLOOP         ZERO LENGTH, NULL, BRANCH
         BP    DREF00         HIGH BIT NOT ON, NOT A REFERBACK
         BAL   R14,REFBACK    GO TO REFERBACK ROUTINE
         OI    UNITIND,UNITFND SET UNIT FOUND IND
         OC    UNITIND,REFUNIT SAVE UNIT OF PREV DD
         MVC   TVOLSER,REFVOL SAVE REFERBACK VOLSER
         B     DDLOOP         GO GET NEXT PARAM
*
**********************************************************************
*    AT THIS POINT, THE REFERBACK IS PROBABLY TO A CATALOGED
*    DATA SET.
**********************************************************************
*
DREF00   CH    R4,=H'44'      SEE IF LENGTH OF DSNAME EXCEEDS MAX
         LA    R15,34         SET ERROR NUMBER
         BH    DDERR          YES - ERROR
*
         MVC   LDSN,BLANKS    BLANK DSNAME
         BCTR  R4,0           MAKE MACHINE LENGTH
         EX    R4,MOVE17      MOVE DSNAME TO SAVE
         L     R7,FIRSTENT    LOAD START OF TABLE
         LA    R7,ENTLEN(R7)  INCREMENT PAST JOB ENTRY
DREF01   CLI   ENTRYTYP,TYPEDD  SEE IF DD ENTRY
         BE    DREF02         YES, GO SEE IF MATCH
         CLI   ENTRYTYP,TYPEND  SEE IF END OF TABLE
         BE    HILEVEL1       NOT FOUND, GO CHECK CATALOG
         B     DREF03         LOOP
DREF02   CLC   DDSN,3(R2)     SEE IF SAME DSNAME
         BE    DREF04         YES, CHARGE FOR THE DSNAME
DREF03   LA    R7,ENTLEN(R7)  INCREMENT TO NEXT DD ENTRY
         B     DREF01         LOOP UNTIL DONE
DREF04   OI    UNITIND,UNITFND SET UNIT FOUND IND
         OC    UNITIND,DTYPE  SAVE UNIT TYPE FROM TABLE
         MVC   TVOLSER,DVOLSER SAVE VOLSER FROM TABLE
         B     DDLOOP         GO GET NEXT PARAM
*
MOVE17   MVC   LDSN(0),3(R2)       *********** EXECUTED ************
*
**********************************************************************
*                    SEE IF CATALOG IS MOUNTED
**********************************************************************
*
HILEVEL1 BAL   R5,CATLOC          GO GET CATALOG VOLSER
         LTR   R15,R15            TEST RETURN CODE
         BZ    DREF05             CATALOG ONLINE - DO FULL LOCATE TGB10
         LA    R15,33             SET ERROR NUMBER
         B     DDERR              ERROR
*
**********************************************************************
*                    TRY TO LOCATE THE DATASET
**********************************************************************
*                                                                 TGB24
*  NOTE: WHY IS THERE NO GDG TEST HERE ???                        TGB24
*
DREF05   BAL   R5,LOCATE      GO READ CATALOG
         LTR   R15,R15        TEST RETURN CODE
         BNZ   DDLOOP         NOT CATALOGED, IGNORE IT
*
         CLC   CAMLCNT,=H'0'  ANY VOLUME ENTRIES?
         BE    DDLOOP         NO, IGNORE IT
         CLI   CAMVOL,X'00'   MAKE USER THAT THERE IS A VOLSER
         BE    DDLOOP         NO, VSAM LIED AGAIN, IGNORE THIS ENTRY
         MVC   VOLCNT,CAMLCNT SAVE VOLUME COUNT
         MVC   TVOLSER,CAMVOL SAVE VOLSER FROM CATALOG
         CLC   TVOLSER,=C'MIGRAT'      HSM MIGRATION ?            TGB46
         BE    DDLOOP                  YES - GO GET NEXT PARM     TGB46
         TM    UCBTYP3,X'80'  TAPE UNIT?
         BNO   DDLOOP         NO - GO GET NEXT PARM
         OI    UNITIND,TAPE   YES - TURN ON TAPE IND
         B     DDLOOP         GO GET NEXT PARAM
*
         EJECT
**********************************************************************
*                         DD LABEL
**********************************************************************
*
DLABEL   CLI   0(R2),LABELK   SEE IF LABEL= KEYWORD
         BNE   DRETPD         NO, BRANCH
*
         B     DDLOOP         OVERRIDE TO BYPASS LABEL PROCESSING
         SLR   R4,R4          CLEAR REG FOR ICM
         ICM   R4,1,1(R2)     LOAD NUMBER SUBPARAMS
         CH    R4,=H'2'       SEE IF AT LEAST 2 SUBPARAMETERS
         BL    DDLOOP         NO, BRANCH
         SLR   R3,R3          CLEAR REG FOR ICM
         ICM   R3,1,2(R2)     LOAD LENGTH OF FIRST SUBPARAM
         LA    R2,3(R3,R2)    LOAD START ADDR OF SECOND SUBPARAMETER
         ICM   R3,1,0(R2)     LOAD LENGTH OF SECOND SUBPARAM
         B     DDLOOP
*
**********************************************************************
*
*        DD LABEL=RETPD
*           - LIMIT RETENTION PERIOD TO 120 DAYS
*           - PRODUCTION JOBS EXEMPTED
*
**********************************************************************
*
DRETPD   CLI   0(R2),RETPDMK  LABEL = RETPD ?
         BNE   DEXPDT         NO, BRANCH
*
         SLR   R3,R3          CLEAR FOR ICM                       TGB13
         ICM   R3,1,1(R2)     GET SUBPARM COUNT                   TGB13
         BZ    DDLOOP         NO PARMS - CONTINUE WITH DD CARD    TGB13
         LA    R2,2(R2)       SKIP PAST KEY AND PARM COUNT        TGB13
         BAL   R14,DECBIN     CONVERT RETPD TO BINARY             TGB13
         BM    DDLOOP         NO PARM - IGNORE RETPD              TGB13
         BNZ   DDLOOP         NOT NUMERIC - LET JES2 HANDLE IT    TGB13
*                                                                 TGB13
         CH    R1,=H'120'     IS RETPD GREATER THAN 120 DAYS ?    TGB13
         BNH   DDLOOP         NO - KEEP GOING                     TGB21
*                                                                 TGB21
         SCECHK =C'RMSC',=C'RETPD',5    CHECK FOR RETPD AUTH      TGB21
         BZ     DDLOOP        AUTHORIZED - IGNORE RETPD           TGB21
*
         LA    R15,45         (SET ERROR NUMBER)                  TGB13
         B     DDERR          YES - ERROR                         TGB21
*
**********************************************************************
*
*        DD LABEL=EXPDT
*           - LIMIT EXPDT TO 120 DAYS FROM CURRENT DATE
*           - COMPARE IS FOR 121 SINCE LEAP YEAR CHECK IS NOT MADE
*           - EXPDT=98000 IS OK (TMS SPECIAL EXPDT)
*
**********************************************************************
*
DEXPDT   CLI   0(R2),EXPDTMK  SEE IF LABEL=EXPDT KEYWORD
         BNE   DSYSOUT        NO, BRANCH
*
         SLR   R3,R3          CLEAR REG FOR ICM
         ICM   R3,1,1(R2)     LOAD NUMBER SUBPARAMS
         BZ    DDLOOP         NONE - CONTINUE WITH DD CARD
         ICM   R3,1,2(R2)     LOAD LENGTH OF FIRST SUBPARAM
         CH    R3,=H'5'       SEE IF LENGTH = 5
         BNE   DDLOOP         NO - LET JES2 FAIL BAD DATE
*                                                                 TGB13
         LA    R2,2(R2)       SKIP PAST KEY AND PARM COUNT
         BAL   R14,DECBIN     CONVERT TO PACKED                   TGB13
         BM    DDLOOP         NO PARM - IGNORE THIS ONE           TGB13
         BNZ   DDLOOP         NOT NUMERIC - LET JES2 FAIL IT      TGB13
*                                                                 TGB13
         C     R1,=F'98000'   IS EXPDT = 98000 ? (TMS)            TGB13
         BE    DDLOOP         YES - ALLOW THIS ONE                TGB13
*                                                                 TGB13
         TIME  DEC            GET DATE IN R1, PD FORMAT
         STCM  R1,7,PDDATE    STORE DATE
*                                                                 TGB13
         CLC   DOUBLE+5(1),PDDATE ARE YEARS THE SAME ?            TGB13
         BE    DEXPDT1        YES - THEN SUBTRACT WILL WORK OK    TGB13
         AP    PDDATE,=P'635' FIX UP DATE FOR SUBTRACT            TGB13
*                                                                 TGB13
DEXPDT1  SP    DOUBLE+5(3),PDDATE SUB CURRENT DATE FROM EXPDT
         CP    DOUBLE+5(3),=P'121' GREATER THAN 121 ?
         BNH   DDLOOP         NO  - ALLOW EXPDT
*
         SCECHK =C'RMSC',=C'RETPD',5    CHECK FOR RETPD AUTH      TGB21
         BZ     DDLOOP        AUTHORIZED - IGNORE EXPDT           TGB21
*
         LA    R15,46         SET ERROR NUMBER
         B     DDERR          ERROR
*
         EJECT
**********************************************************************
*    DD SYSOUT
*       IF SYSOUT = * OR (, THEN IT REFERRED BACK TO THE
*       MESSAGE CLASS WHICH IS CHECKED ON THE JOB CARD, AND
*       DOES NOT NEED TO BE RE-CHECKED HERE
*        ADDED SYSOUT CLASS LOOKASIDE BUFFER (SYSTABLE)           TGB17
**********************************************************************
*
DSYSOUT  CLI   0(R2),SYSOUTK  SEE IF SYSOUT= KEYWORD
         BNE   DDLOOP         NO, BRANCH
*
         SLR   R4,R4          CLEAR REG FOR ICM
         ICM   R4,1,1(R2)     LOAD NUMBER SUBPARAMS
         BZ    DDLOOP         NONE, BRANCH
         CLI   3(R2),C'*'     IS SYSOUT=*
         BE    DDLOOP         YES, SKIP RACF CHECK
         CLI   3(R2),X'00'    IS SYSOUT=(,
         BE    DDLOOP         YES, SKIP RACF CHECK
*
         LA    R1,3(R2)       POINT TO CHARACTER TO CHECK         TGB01
         BAL   R14,ALPHANUM   CHECK CHARACTER AT (R1)             TGB01
         LA    R15,52         (SET ERROR NUMBER)
         BNZ   DDERR          ERROR - NOT ALPHANUMERIC
*
         LA    R15,50         SET ERROR NUMBER                    TGB31
         SLR   R3,R3          CLEAR FOR IC                        TGB17
         IC    R3,3(R2)       GET SYSOUT CLASS CHARACTER          TGB17
         SH    R3,=X'00C1'    CONVERT TO TABLE INDEX              TGB17
         LA    R3,SYSTABLE(R3) CONVERT TO TABLE ADDRESS           TGB17
         CLI   0(R3),X'01'    HAS CLASS BEEN CHECKED OK ALREADY?  TGB31
         BE    DDLOOP         YES - WE ARE DONE HERE              TGB31
         CLI   0(R3),X'02'    HAS CLASS BEEN CHECKED BAD ?        TGB31
         BE    DDERR          YES - ERROR                         TGB31
*
         SCECHK =C'RMSG',3(R2),1   VALIDATE THE SUBMISSION        TGB31
         LA    R15,50         SET ERROR NUMBER
         BNZ   DSYSOUT1       ERROR - SET FLAG AND DISALLOW       TGB31
         MVI   0(R3),X'01'    SET FLAG SHOWING CLASS IS OK        TGB17
         B     DDLOOP         CONTINUE WITH DD CARD               TGB17
DSYSOUT1 MVI   0(R3),X'02'    SET FLAG SHOWING CLASS IS NOT OK    TGB31
         B     DDERR          AND INDICATE ERROR                  TGB31
*                                                                 TGB31
         EJECT
**********************************************************************
*
*    THIS ROUTINE WILL INCREMENT PAST THE STRING(S) BEING
*    PROCESSED.  NOTE THAT FOLLOWING THE KEYWORD DESCRIPTOR
*    FIELD IS A COUNT OF SUBPARAMETERS.  FOLLOWING THE COUNT
*    WILL BE A LENGTH OR DESCRIPTOR FIELD.  IF THE HIGH ORDER
*    BIT IS ON, THE FIELD IS A COUNT FIELD OF THE NUMBER OF
*    SUBPARAMETERS WHICH THE SUBPARAMETER ITSELF MAY HAVE.
*    IF THIS IS TRUE, THE DESCRIPTOR FIELD WILL BE FOLLOWED BY
*    A LENGTH FIELD FOR THE FIRST SUBPARAMETER.  IF THE HIGH
*    ORDER BIT IS NOT ON, IT IS ONLY A LENGTH FIELD FOR A
*    SINGLE SUBPARAMETER.
*
**********************************************************************
*
DDERR    BAL   R14,ERRORTN    CALL ERROR ROUTINE                  TGB12
*
DDLOOP   LABEL
         L     R2,PARMADDR    RESTORE START OF PARAMETER ADDRESS
         SLR   R5,R5          CLEAR REGISTER FOR ICM
         LA    R2,1(R2)       INCREMENT PAST KEYWORD
         ICM   R5,1,0(R2)     LOAD SUBPARAMETER COUNT
         BNZ   DDLOOP1        OK, BRANCH INTO ROUTINE
         LA    R2,1(R2)       NONE, INCREMENT PAST COUNT
         B     DDLOOP5        AND GET OUT OF ROUTINE
DDLOOP1  LA    R2,1(R2)       INCREMENT PAST KEYWORD DESCR
DDLOOP2  SLR   R4,R4          CLEAR REGISTER FOR ICM
         ICM   R4,1,0(R2)     LOAD PARAMETER LENGTH
         BNM   DDLOOP3        HIGH BIT NOT ON, ONLY 1 PARAMETER
         N     R4,=X'0000007F' 'AND' OUT THE HIGH ORDER BIT
         LA    R2,1(R2)       INCREMENT PAST CONTROL BYTE
         B     DDLOOP4        BRANCH
DDLOOP3  LA    R4,1           SET PARAM COUNT TO 1
DDLOOP4  SLR   R3,R3          CLEAR REGISTER FOR ICM
         ICM   R3,1,0(R2)     LOAD PARAMETER LENGTH
         LA    R2,1(R3,R2)    INCREMENT PAST PARM
         BCT   R4,DDLOOP4     LOOP UNTIL PROCESSED ALL PARMS
         BCT   R5,DDLOOP2     LOOP UNTIL PROCESSED ALL PARMS
DDLOOP5  ST    R2,PARMADDR    SAVE START OF PARAMETER ADDRESS
         B     DDPARM         CONTINUE
*
         EJECT
**********************************************************************
*
*   END OF SINGLE DD CARD PROCESSING - AT THIS POINT WE DO:
*
*   1) TRY TO OBTAIN UNIT INFO IF 'UNIT=' WAS NOT SPECIFIED
*         A) TRY TO FIND DDNAME PREVIOUSLY IN THE TABLE
*         B) IF NOT FOUND - ISSUE LOCATE MACRO FOR THE DATASET
*         C) IF NOT FOUND - ASSUME GDG NAME AND ADD '(0)' TO DATASET
*                           AND TRY TO LOCATE AGAIN.
*         D) IF NOT FOUND AFTER ALL THIS, ASSUME DATASET IS NOT TAPE
*
*   2) IF UNIT=TAPE:
*         A) IF UNIT=AFF, DO NOT ADD TO TAPE DRIVE COUNT
*         B) IF VOLSER WAS USED PREV IN THIS STEP, DO NOT ADD TO CNT
*         C) CHECK AUTH FOR USE OF JOBCAT/STEPCAT
*            (THIS REALLY SHOULD HAVE BEEN DONE IN DD PROCESSING)
*
**********************************************************************
*
**********************************************************************
*              SEE IF NAME TABLE MAINTAINED BY THIS EXIT
**********************************************************************
*
DDEND    DS    0H                                                 TGB45
         TM    UNITIND,AFF             UNIT=AFF= ?                TGB45
         BNO   DDEND1                  NO  - CONTINUE             TGB45
         TM    FLAGS,FSETUP            SETUP AUTO ?               TGB45
         BO    DDEND60                 YES - FORCE LOCATE         TGB45
DDEND1   CLI   UNITIND,X'00'  SEE IF UNIT HAS BEEN DETERMINED     TGB45
         BNE   DDEND150       YES, BRANCH
*
**********************************************************************
*          SEARCH THE DSNAME TABLE MAINTAINED BY THIS EXIT
**********************************************************************
*
         L     R7,FIRSTENT    POINT TO EXIT6 TABLE
*
DDEND50  LA    R7,ENTLEN(R7)  INCREMENT TO NEXT ENTRY
         CLI   ENTRYTYP,TYPEND END OF TABLE?
         BE    DDEND60        YES, GO CHECK CATALOG
         TM    ENTRYTYP,TYPEDD DD ENTRY?
         BNO   DDEND50        NO, LOOP
         CLC   DDSN,TDSN      DSN MATCH?
         BNE   DDEND50        NO, LOOP
         OC    UNITIND,DTYPE  SAVE UNIT INFO
         MVC   TVOLSER,DVOLSER SAVE VOLSER INFO
         B     DDEND150       GET OUT
*
**********************************************************************
*          DSNAME NOT YET IN TABLE - WE NEED TO LOCATE
**********************************************************************
*
DDEND60  DS    0H
         TM    STRDINDC,DTXSYOUT SEE IF DD OUTPUT SPOOL FILE
         BO    DDEND150       YES, NO NEED TO CAMLST
*
**********************************************************************
*        MAKE SURE CATALOG IS MOUNTED BEFORE TRYING TO LOCATE
**********************************************************************
*
         MVC   LDSN,TDSN          SETUP NAME FOR LOCATE
         BAL   R5,CATLOC          GO GET CATALOG VOLSER
         LTR   R15,R15            TEST RETURN CODE
         BZ    DDEND65            CATALOG ONLINE - DO FULL LOCATE TGB10
         LA    R15,33             SET ERROR NUMBER
         BAL   R14,ERRORTN        GO ISSUE ERROR MESSAGE
         B     GETNEXT
*
**********************************************************************
*               ISSUE LOCATE FOR THE DATASET NAME
**********************************************************************
*
DDEND65  DS    0H
         BAL   R5,LOCATE      GO READ CATALOG
         LTR   R15,R15        TEST RETURN CODE
         BZ    DDEND70        ZERO, BRANCH
*
****************************************************************  TGB24
*            CHECK FOR GDG WITHOUT AN INDEX                       TGB24
****************************************************************  TGB24
*                                                                 TGB24
         CH    R15,=H'8'      POSSIBLY A GDG NAME WITH NO INDEX?
         BNE   DDEND150       NO - ASSUME DATASET IS NOT TAPE
*
****************************************************************  TGB24
*         ADD (0) TO GDG NAME AND TRY TO LOCATE AGAIN             TGB24
****************************************************************  TGB24
*                                                                 TGB24
         LA    R5,LDSN        POINT TO DSNAME AREA                TGB24
         LA    R4,44          LENGTH OF DSNAME AREA               TGB24
DDENDA1  CLI   0(R5),C' '     FIND THE BLANK                      TGB24
         BE    DDENDA2        FOUND - END OF DSNAME               TGB24
         LA    R5,1(R5)       ADD 1 TO POINTER                    TGB24
         BCT   R4,DDENDA1     LOOP UNTIL END OF DSNAME            TGB24
DDENDA2  CH    R4,=H'8'       ROOM FOR GDG NAME ?                 TGB24
         BL    DDEND150       NO - ASSUME DSNAME NOT FOUND        TGB24
         MVC   0(3,R5),=C'(0)'  MOVE GDG INDEX TO DSNAME          TGB24
*                                                                 TGB24
         BAL   R5,LOCATE      TRY AGAIN ON GDG NAME WITH INDEX    TGB24
         LTR   R15,R15        TEST RETURN CODE                    TGB24
         BNZ   DDEND150       NOT FOUND - ASSUME NON-TAPE         TGB24
*                                                                 TGB24
****************************************************************  TGB24
*            CHECK WORKAREA RETURNED FROM LOCATE                  TGB24
****************************************************************  TGB24
*                                                                 TGB24
DDEND70  CLC   CAMLCNT,=H'0'  ANY VOLUME ENTRIES?
         BE    DDEND150       NO, BRANCH
         CLI   CAMVOL,X'00'   MAKE USER THAT THERE IS A VOLSER
         BE    DDEND150       NO, VSAM LIED AGAIN, IGNORE THIS ENTRY
         MVC   VOLCNT,CAMLCNT+1 SAVE VOLUME COUNT
         MVC   TVOLSER,CAMVOL SAVE VOLSER FROM CATALOG
         CLC   TVOLSER,=C'MIGRAT'      HSM MIGRATION ?            TGB46
         BE    DDEND150                YES - GO GET NEXT PARM     TGB46
         TM    UCBTYP3,X'80'  TAPE UNIT?
         BNO   DDEND150       NO, BYPASS ROUTINES
         OI    UNITIND,TAPE   TURN ON TAPE IND
         BAS   R5,SETUP                GO DO SETUP WORK           TGB45

**********************************************************************
*    PROCESS ONLY DD STATEMENTS WHICH ARE FOR MOUNTABLE
*    DEVICES.
*    TEST FOR 'UNITONDD' IS TO CHECK FOR DATASETS WHERE DISK UNIT
*    WAS SPECIFIED ON DD STMT., BUT DSN MAY NOT HAVE BEEN CATA-
*    LOGED, BUT WAS PASSED TO SUBSEQUENT STEPS.  WE MUST SAVE THE
*    DD INFO IN TABLE TO SEARCH LATER.
**********************************************************************
*
DDEND150 TM    UNITIND,TAPE   IS THIS A TAPE DD?
         BO    DDEND160       YES, BRANCH
*TGB32   TM    UNITIND,UNITONDD  WAS UNIT OTHER THAN TAPE SPECIFIED?
*TGB32   BNO   DDEND240       NO, DO NOT SAVE DD INFO
*TGB32   TM    DISPIND,PASS   WAS DISP=PASS SPECIFIED?
*TGB32   BO    DDEND230       YES, SAVE DD INFO FOR LATER STEP
         B     DDEND240       GO CHECK FOR JOBCAT/STEPCAT
*
**********************************************************************
*    IF THE UNIT WAS DETERMINED BY UNIT=AFF, DO NOT CHARGE
*    FOR THE DEVICE BUT SAVE THE TABLE ENTRY FOR POSSIBLE
*    REFERBACKS BY SUBSEQUENT STATEMENTS.
**********************************************************************
*
DDEND160 TM    UNITIND,AFF    UNIT=AFF DD STATEMENT
         BO    DDEND230       YES, DO NOT ADD TO UNIT COUNTS
         L     R7,LASTEXEC    LOAD ADDR LAST EXEC ENTRY
*
**********************************************************************
*    SEE IF THE VOLSER WAS USED PREVIOUSLY IN THIS STEP.
*    IF SO, DO NOT CHARGE FOR THE DEVIDE BUT AGAIN SAVE THE
*    TABLE ENTRY FOR POSSIBLE REFERBACKS BY FOLLOWING
*    STATEMENTS.
**********************************************************************
*
DDEND170 LA    R7,ENTLEN(R7)  INCREMENT TO NEXT ENTRY
         CLI   ENTRYTYP,TYPEND SEE IF END OF TABLE
         BE    DDEND180       YES, NO MATCH, BRANCH
         CLI   DVOLSER,0      ANY VOLUME SUPPLIED ?               TGB37
         BE    DDEND170       NO - SKIP THIS ENTRY                TGB37
         CLC   TVOLSER,DVOLSER SEE IF VOLSER ALREADY REFERENCED
         BE    DDEND230       YES, DO NOT CHARGE FOR IT
         B     DDEND170       LOOP
*
**********************************************************************
*    IF PARALLEL MOUNTING WAS REQUESTED, CHARGE THE GREATER
*    OF THE DEVICES SPECIFIED BY THE UNITCOUNT FIELD OR THE
*    NUMBER OF VOLUMES.
**********************************************************************
*
DDEND180 CLI   UNITCOUN,C'P'  SEE IF PARALLEL MOUNTING
         BE    DDEND190       YES, BRANCH
         MVC   ADDCOUNT,UNITCOUN MOVE UNIT COUNT TO COMMON
         B     DDEND210       BRANCH
DDEND190 CLC   VOLCNT,SERCNT COMPARE VOL COUNT & SERIAL CNT
         BL    DDEND200       SERIAL COUNT GREATER
         MVC   ADDCOUNT,VOLCNT MOVE VOLUME COUNT TO COMMON
         B     DDEND210       BRANCH
DDEND200 MVC   ADDCOUNT,SERCNT MOVE SERIAL COUNT TO COMMON
*
**********************************************************************
*        ADD THE DEVICE COUNT TO THE APPROPRIATE ACCUMULATOR.
**********************************************************************
*
DDEND210 SLR   R15,R15        ZERO WORK REG
         IC    R15,ADDCOUNT   MOVE UNIT COUNT TO REG
         TM    UNITIND,TAPE   IS THIS A TAPE DD?
         BO    DDEND220       YES, BRANCH
         B     DDEND230       SKIP PRIVATE MOUNT
         AH    R15,PRIVCNT    ADD RUNNING COUNT TO THIS ONE
         STH   R15,PRIVCNT    SAVE NEW RUNNING COUNT
         B     DDEND230       BRANCH
DDEND220 AH    R15,TAPECNT    ADD RUNNING COUNT TO THIS ONE
         STH   R15,TAPECNT    SAVE NEW RUNNING COUNT
*
**********************************************************************
*    SAVE THE CURRENT TEMPORARY ENTRY SINCE IT SPECIFIES A
*    MOUNTABLE DEVICE TYPE.
**********************************************************************
*
DDEND230 OC    TTYPE,UNITIND  SAVE UNIT INFO
         LH    R14,ENTCOUNT   LOAD TABLE ENTRY COUNT
         LA    R14,1(R14)     ADD 1 TO COUNT
         CH    R14,MAXENTS    SEE IF MAXIMUM REACHED
         BNL   TBLFULL        MAXIMUM REACHED, TAKE DUMP & EXIT
         STH   R14,ENTCOUNT   STORE NEW ENTRY COUNT
         L     R7,LASTENT     LOAD ADDR OF LAST ENTRY
         LA    R7,ENTLEN(R7)  INCREMENT TO NEXT ENTRY
         MVI   ENTRYTYP,TYPEDD SET ENTRY TO DD
         MVC   DENTRY,TENTRY  MOVE TEMPORARY ENTRY TO TABLE
         MVC   DVOLSER,TVOLSER MOVE TEMP VOLSER TO TABLE
         MVC   DTYPE,UNITIND  SAVE UNIT INDICATOR
         ST    R7,LASTENT     SAVE ADDR OF LAST ENTRY
*
**********************************************************************
*    IF THE DD STATEMENT IS FOR A JOBCAT OR STEPCAT, CHECK AUTH
**********************************************************************
*
DDEND240 CLC   TDDN,=CL8'JOBCAT' SEE IF JOBCAT DD
         BE    DDEND250       YES, BRANCH
         CLC   TDDN,=CL8'STEPCAT' SEE IF STEPCAT DD
         BNE   GETNEXT        NO - GO GET NEXT CARD
*
         SCECHK =C'RMSC',=C'STEPCAT',7  CHECK AUTH                TGB11
         BZ    GETNEXT             IF SO - CONTINUE ON WITHOUT ERROR
         LA    R15,47              SET ERROR NUMBER
         B     GETERR              ERROR
*
DDEND250 SCECHK =C'RMSC',=C'JOBCAT',6  CHECK AUTH                 TGB11
         BZ    GETNEXT             OK - CONTINUE
         LA    R15,43              SET ERROR NUMBER
         B     GETERR              ERROR
*
***********************************************************************
*    IF THE DD STATEMENT IS FOR A STEPCAT, THE JOB MUST BE AUTHORIZED
***********************************************************************
*
         TITLE 'JES2 EXIT 6 - PROC CARD PROCESSING'
**********************************************************************
**********************************************************************
**********************************************************************
***
***
***
***
***                     P R O C     C A R D
***
***
***
***
**********************************************************************
**********************************************************************
**********************************************************************
*
*    THE TEXT OF THE EXEC CARD WHICH CALLS A PROC IS AS FOLLOWS
*        1)  2 BYTE LENGTH OF TEXT STRING INCLUDING ITSELF
*        2)  1 BYTE INDICATOR COMMON TO ALL TEXT RECORDS
*        3)  1 BYTE OF MISCELLANEOUS INDICATORS
*        4)  1 BYTE INDICATOR X'94' INDICATING EXEC POS INFORMATN
*        5)  1 BYTE NUMBER OF EXEC POSITIONAL PARAMETERS
*            THE 1ST POS PARAMETER IS THE JOB STEP NAME
*            THE 2ND POS PARAMETER IS THE PROC NAME
*        6)  VARIABLE LENGTH LIST OF EXEC POS PARAMETERS
*            EACH PRECEDED BY A 1 BYTE LENGTH FIELD
*        7)  THE REST OF THE RECORD WILL BE IGNORED
*
*    THE TEXT OF THE PROC CARD WILL BE SAVED FOR SUBSEQUENT
*    EXEC CARD PROCESSING.  THE STEP NAME WILL BE SAVED FROM
*    THE PROC CARD AND AND A POINTER SAVED TO THE START OF
*    THE FIRST KEYWORD PARM.  AFTER THE NORMAL EXEC CARD HAS
*    BEEN PROCESSED, THE PROC CARD TEXT WILL BE PROCESSED
*    WHICH WILL OVERRIDE ANY PREVIOUSLY PROCESSED PARAMETERS
*    ON THE EXEC CARD.
*
*    SAVE THE ENTIRE TEXT OF THE EXECUTE STATEMENT WHICH
*    CALLS A PROCEDURE SO THAT ALL PROC OVERRIDES MAY BE
*    PROCESSED.
*
**********************************************************************
*
PROCARD  LABEL
*
PROCSTAR LR    R4,R6          SAVE ADDRESS OF CURRENT RECORD
         LH    R5,STRLTH      LOAD LENGTH OF TEXT RECORD
         CH    R5,=H'512'     SEE IF LENGTH EXCEEDS 512 BYTES
         LA    R15,30         SET ERROR NUMBER
         BH    GETERR         YES - ERROR
         LA    R0,PROCTXT     LOAD ADDR OF TEXT SAVE AREA
         LR    R1,R5          LET REG 1 ALSO CONTAIN THE LENGTH
         MVCL  R0,R4          MOVE TEXT STRING TO SAVE
         LA    R6,PROCTXT     POINT TO START OF COPIED TEXT
         LA    R2,STREKEY     LOAD START OF TRUE TEXT
         ST    R2,PARMADDR    SAVE START OF PARAMETER ADDRESS
         LA    R2,1(R2)       INCR PAST EXEC POS IND
         SLR   R4,R4          CLEAR REG FOR ICM
         ICM   R4,1,0(R2)     LOAD NUMBER OF SUBPARAMETERS
         BNZ   PROCEND1       NOT ZERO, BRANCH
         LA    R2,1(R2)       ZERO, INCREMENT PAST COUNT
         B     PROCEND3       GET OUT
*
**********************************************************************
*                    SAVE THE PROC STEP NAME
**********************************************************************
*
PROCEND1 LA    R2,1(R2)       INCREMENT PAST COUNT
         MVI   SAVEPROC,C' '  MOVE BLANK TO 1ST POS SAVE
         MVC   SAVEPROC+1(7),SAVEPROC BLANK ENTIRE STEP NAME SAVE
         SLR   R3,R3          CLEAR REG FOR ICM
         ICM   R3,1,0(R2)     LOAD LENGTH OF JOB STEP NAME
         BZ    PROCEND2       IF ZERO, NO JOB STEP NAME
         CH    R3,=H'8'       SEE IF LENGTH > 8
         LA    R15,31         SET ERROR NUMBER
         BH    GETERR         YES - ERROR
         BCTR  R3,0           MAKE MACHINE LENGTH
         EX    R3,MOVE4       MOVE STEP NAME TO SAVE AREA
PROCEND2 ICM   R3,1,0(R2)     LOAD LENGTH OF SUBPARAMETER
         LA    R2,1(R3,R2)    INCREMENT TO NEXT SUBPARAMETER
         BCT   R4,PROCEND2    LOOP UNTIL DONE
*
**********************************************************************
*        SAVE POINTER TO THE FIRST KEYWORD ON THE STATEMENT
**********************************************************************
*
PROCEND3 ST    R2,PROCTEXT    SAVE ADDRESS OF FIRST KEYWORD PARM
         B     GETNEXT        GET OUT
*
MOVE4    MVC   SAVEPROC(0),1(R2)   *********** EXECUTED ************
*
         EJECT
**********************************************************************
*
*    IF THE CURRENT EXECUTE STATEMENT IS FROM A PROCEDURE,
*    LOAD THE ADDRESS OF THE PREVIOUS STATEMENT WHICH CALLED
*    THE PROCEDURE AND RETURN TO THE EXECUTE CARD PROCESSOR
*    TO PROCESS THE OVERRIDES WHICH MAY HAVE BEEN ENTERED
*    ON THAT STATEMENT.
*
**********************************************************************
*
PROCSEAR TM    STREINDC,ETXPROC STATEMENT FROM A PROCEDURE?
         BNO   PROC1          NO, GET OUT
         XI    PROCIND,X'01'  FLIP-FLOP SWITCH
         BZ    PROC1          NOW ZERO, ALREADY PROCESSED PROC TEXT
         L     R2,PROCTEXT    LOAD ADDR OF PROC TEXT
         ST    R2,PARMADDR    SAVE START OF PARAMETER ADDRESS
         B     EXECPARM       GO PROCESS ADDITIONAL TEXT
*
PROC1    TM    JOBIND,EXADDR  WAS ADDRSP=REAL SPECIFIED ?
         BNO   GETNEXT        NO, BAIL OUT
         LH    R15,EREGION
         CH    R15,=H'256'    YES, IS REGION > 256K
         BNH   GETNEXT        NO, OK
         LA    R15,7          SET MESSAGE NUMBER
         B     GETERR         ERROR
*
         TITLE 'JES2 EXIT 6 - LAST LINE OF TEXT PROCESSING'
**********************************************************************
**********************************************************************
**********************************************************************
***
***
***
***
***               L A S T    L I N E    O F    T E X T
***
***
***
***
**********************************************************************
**********************************************************************
**********************************************************************
*
**********************************************************************
*        UPDATE LAST EXEC TABLE (IF NEEDED) WITH UNIT INFO
**********************************************************************
*
EOF      LABEL
*
         TM    JOBIND,JOBFAIL  WAS JOB FAILED BY EXIT?
         BO    JOBERROR        YES, BRANCH
*
         L     R7,LASTEXEC     LOAD ADDR OF LAST EXEC ENTRY
         LTR   R7,R7           SEE IF ADDR = 0
         BZ    EOF1            IF ZERO, NO UPDATE, BRANCH
         MVC   ETAPES,TAPECNT  MOVE STEP TAPE UNIT CNT TO TABLE
         MVC   ETIMES,EXECTIME MOVE STEP TIME TO TABLE
         MVC   EPRIVS,PRIVCNT  MOVE STEP PRIV UNIT CNT TO TABLE
         XC    TAPECNT,TAPECNT ZERO TAPE UNIT CNT
         XC    PRIVCNT,PRIVCNT ZERO PRIV UNIT CNT
*
**********************************************************************
*
*    THIS ROUTINE SEARCHES THE TABLE SAVED FOR JOB, EXEC AND DD
*    ENTRIES TO DETERMINE THE MAXIMUM RESOURCES USED BY THE JOB
*    THIS INFORMATION WILL BE USED TO COMPARE AGAINST A CLASS
*    TABLE TO DETERMINE THE CLASS WHICH SHOULD BE SET FOR THE JOB.
*
**********************************************************************
*
EOF3     MVC   STEPM,MSG0     INITIALIZE STEP MESSAGE
         MVC   JOBM,MSG1      INITIALIZE JOB CLASS MESSAGE
         MVC   JOBMSG(10),BLANKS BLANK MESSAGE PREFIX
         XC    MAXTAPE,MAXTAPE ZERO MAX FIELD
         XC    MAXPRIV,MAXPRIV ZERO MAX FIELD
         XC    MAXTOTAL,MAXTOTAL ZERO MAX FIELD
         XC    MAXREGN,MAXREGN ZERO MAX FIELD
         XC    MAXEXEC,MAXEXEC ZERO MAX STEP CPU TIME
         L     R7,FIRSTENT    LOAD START OF TABLE
         CLC   ENTLEN(2,R7),=H'0' SEE IF ONLY JOB ENTRY
         BE    JOBERROR       ZEROS, NO OTHER ENTRIES, FLUSH JOB
*
EOFLOOP1 CLI   ENTRYTYP,TYPJOB SEE IF JOB ENTRY
         BE    EOFLOOP2       YES, BRANCH
         CLI   ENTRYTYP,TYPEXEC SEE IF EXEC ENTRY
         BE    EOFEXEC        YES, BRANCH
         CLI   ENTRYTYP,TYPEND SEE IF END OF TABLE
         BE    EOF1           YES, BRANCH                         TGB30
         B     EOFLOOP2       LOOP
*
**********************************************************************
*    PRODUCE A STEP RESOURCE STATISTICS MESSAGE FOR EACH STEP
*    TO BE WRITTEN TO THE JES2 MESSAGE DATA SET.
**********************************************************************
*
EOFEXEC  L     R4,ECARDNO     LOAD CARD NUMBER
         CVD   R4,DOUBLE      CONVERT CARD NUMBER TO PACKED
         MVC   STEPMSG-1(11),PREFIX MOVE MSG PREFIX TO MESSAGE
         ED    STEPMSG-1(6),DOUBLE+5 EDIT CARD NUMBER TO PREFIX
         MVC   STEPM+8(8),EJSTEP   MOVE JOB STEP TO MESSAGE
         MVC   STEPM+17(8),EPSTEP  MOVE PROC STEP TO MESSAGE
         LH    R4,ETAPES      LOAD NUMBER OF TAPES FOR STEP
         LA    R1,STEPM+32    POINT TO OUTPUT POSITION            TGB38
         MVC   0(5,R1),BLANKS CLEAR AREA                          TGB38
         CVD   R4,DOUBLE      CONVERT TAPES TO PACKED             TGB38
         BAS   R14,EOFSUB     MOVE NUMBER TO (R1)                 TGB38
         LH    R4,EREGION     LOAD REGION SIZE FOR STEP
         LA    R1,STEPM+63    POINT TO OUTPUT POSITION            TGB38
         MVC   0(6,R1),BLANKS CLEAR AREA                          TGB38
         CVD   R4,DOUBLE      CONVERT TAPES TO PACKED             TGB38
         BAS   R14,EOFSUB     MOVE NUMBER TO (R1)                 TGB38
         MVI   0(R1),C'K'     ASSUME REGION IS IN K               TGB14
         TM    ELIBIND,EREGIONM   REGION IN MEGABYTES ?
         BNO   EOFEXEC2       NO, CONTINUE
         MVI   0(R1),C'M'     MOVE MEGABYTE INDICATOR TO MESSAGE
EOFEXEC2 L     R5,ETIMES      LOAD STEP TIME
         C     R5,MAXEXEC     BIGGEST TIME SO FAR?
         BNH   EOFEXEC3       NO - DO NOT SAVE
         ST    R5,MAXEXEC     YES - SAVE IN MAX EXEC FIELD
EOFEXEC3 CLC   MAXTIME,=F'0'  JOBTIME NOT SPECIFIED OR ZERO?
         BE    EOFEXEC4       NO - THEN PRINT EXEC TIME
         C     R5,MAXTIME     EXEC TIME GREATER THAN JOBTIME ?
         BL    EOFEXEC4       NO - THEN PRINT EXEC TIME
         L     R5,MAXTIME     ELSE PRINT JOB TIME
EOFEXEC4 DS    0H                                                 TGB38
         LA    R1,STEPM+44    POINT TO TIME AREA IN MSG           TGB38
         MVC   0(11,R1),BLANKS MOVE SPACES TO TIME AREA           TGB38
         C     R5,=AL4(1440*60) NOLIMIT ?                         TGB38
         BNE   EOFEXC4A       NO  - CONTINUE                      TGB38
         MVC   0(7,R1),=C'NOLIMIT' YES - SHOW AMOUNT              TGB38
         B     EOFEXEC9                                           TGB38
EOFEXC4A C     R5,=AL4(357912*60)  MAXIMUM ?                      TGB38
         BNE   EOFEXC4B       NO  - CONTINUE                      TGB38
         MVC   0(7,R1),=C'MAXIMUM' YES - SHOW AMOUNT              TGB38
         B     EOFEXEC9                                           TGB38
EOFEXC4B SLR   R4,R4          CLEAR FOR DIVIDE                    TGB38
         D     R4,=F'60'      DIVIDE TO GET MINUTES AND SECONDS   TGB38
         LTR   R4,R4          ANY SECONDS ?                       TGB38
         BE    EOFEXEC5       NO  - DON'T USE PARENS              TGB38
         MVI   0(R1),C'('     OPEN PAREN                          TGB38
         LA    R1,1(R1)       BUMP PAST PAREN                     TGB38
EOFEXEC5 LTR   R5,R5          ANY MINUTES ?                       TGB38
         BE    EOFEXEC6       NO  - GO DO SECONDS                 TGB38
         CVD   R5,DOUBLE      CONVERT MINUTES TO PACKED           TGB38
         BAS   R14,EOFSUB     MOVE NUMBER TO (R1)                 TGB38
         LTR   R4,R4          ANY SECONDS ?                       TGB38
         BZ    EOFEXEC9       NO  - ALL DONE                      TGB38
EOFEXEC6 MVI   0(R1),C','     MOVE A COMMA                        TGB38
         LA    R1,1(R1)       BUMP PAST COMMA                     TGB38
         CVD   R4,DOUBLE      CONVERT SECONDS TO PACKED           TGB38
         BAS   R14,EOFSUB     MOVE NUMBER TO (R1)                 TGB38
         MVI   0(R1),C')'     AND CLOSE PAREN                     TGB38
EOFEXEC9 DS    0H                                                 TGB38
*
         LA    R15,STEPMSG    LOAD ADDRESS OF STEP MESSAGE
         BAL   R14,MSGRTN     GO PUT MESSAGE TO JES MESSAGE DATA SET
*
**********************************************************************
*    COMPARE THE RESOURCES USED BY THIS STEP TO THE MAXIMUM
*    RESOURCES USED BY PREVIOUS STEPS.  RETAIN THE GREATER
*    OF THE NUMBER OF RESOURCES.
**********************************************************************
*
EOFCONT1 CLC   ETAPES,MAXTAPE COMPARE STEP TAPES TO PREV MAX
         BNH   EOFEXEC1       NOT GREATER, BRANCH
         MVC   MAXTAPE,ETAPES MAKE CURR COUNT NEW COUNT
EOFEXEC1 LH    R4,ETAPES      ADD NUMBER OF TAPES
         CH    R4,MAXTOTAL    COMPARE STEP TOT CNT TO PREV MAX
         BNH   EOFLOOP2       NOT GREATER, BRANCH
         STH   R4,MAXTOTAL    MADE CURR TOTAL CNT NEW MAX
EOFLOOP2 LA    R7,ENTLEN(R7)  INCREMENT TO NEXT ENTRY
         B     EOFLOOP1       LOOP
*
**********************************************************************
*
*    IF MAXTIME FILLED IN FROM JOB CARD, USE IT FOR JOBCLASS
*    DETERMINATION
*    OTHERWISE, USE MAX TIME FROM EXEC CARD(S)
*    USE THIS TIME FOR JOBCLASS DETERMINATION.
*    IF BOTH ARE ZERO, USE 30 MINUTES (1800 SEC).
*
**********************************************************************
*
EOF1     L     R3,MAXTIME     GET TIME FROM JOB CARD
         CH    R3,=H'0'       ZERO ?
         BNE   EOFSCAN        NO, USE IT
         L     R3,MAXEXEC     GET MAX STEP TIME
EOF2     ST    R3,MAXTIME     STORE FOR JOBCLASS DETERMINATION
*
EOFSCAN  CLC   MAXTAPE,=H'0'  SEE IF ANY TAPES
         BE    EOFLJOB        NO TAPES, GO GET OUT
         OI    RESOURCE,TAPES TURN ON TAPES RESOURCE
EOFPACK  CLC   MAXPRIV,=H'0'  SEE IF ANY PRIV
         BE    EOFLJOB        NO, BRANCH
         OI    RESOURCE,USERPACK TURN ON USERPACK RESOURCE
EOFLJOB  CLC   MAXTIME,=F'15' SEE IF CPU TIME > 15
         B     CLASSEAR       NO, BRANCH ** OVERRIDE **
         OI    RESOURCE+1,LONGJOB TURN ON LONGJOB RESOURCE
*
         EJECT
**********************************************************************
*
*    THIS ROUTINE SEARCHES THE APPROPRIATE CLASS TABLES FOR
*    MATCHES ON RESOURCES USED TO DETERMINE THE CORRECT CLASS
*    FOR A JOB.  NOTE THAT EACH GROUP (TEST, PRODUCTION,
*    OPERATIONS, AND TECH SUPPORT HAVE CLASSES WHICH MAY BE
*    SPECIFIED IN ORDER TO BYPASS THE TABLES OR USED TO SINGLE
*    THREAD A SERIES OF JOBS BECAUSE THERE WILL ONLY BE ONE
*    INITIATOR SET TO THAT CLASS.
*
**********************************************************************
*
CLASSEAR TM    JOBIND,JOBPROD SEE IF PRODUCTION JOB
         BO    NOCHANGE       YES, NO CHANGE OF CLASS
*
**********************************************************************
*    SCAN THE APPROPRIATE CLASS TABLE FOR THE CLASS WHICH
*    MATCHES THE RESOURCES USED BY THE JOB.
**********************************************************************
*
         L     R1,DGNRETN     POINT TO DGTABLE                    TGB23
         USING DGTABLE,R1     R1 POINTS TO DGTABLE                TGB23
         AH    R1,BLDCLSOF    POINT TO CLASS TABLE PORTION        TGB23
         DROP  R1             DROP DGTABLE                        TGB23
         USING CLSSECT,R1     R1 POINTS TO CLASS TABLE            TGB23
*                                                                 TGB23
EOFSCAN1 TM    CLSFLAG,CLSEND END OF TABLE ?                      TGB23
         BO    LASTCLAS       YES - THEN LAST ENTRY               TGB23
*                                                                 TGB23
EOFSCAN2 CLC   MAXTAPE,CLSTAPE MATCH TAPE COUNT                   TGB23
         BH    EOFSCAN3        TAPES EXCEED TABLE, KEEP LOOKING   TGB23
         CLC   MAXTIME,CLSTIME MATCH MAXIMUM CPU TIME             TGB23
         BH    EOFSCAN3        TIME EXCEEDS TABLE, KEEP LOOKING   TGB23
LASTCLAS MVC   CLASSFLD,CLSLASS MOVE CLASS TO SAVE AREA           TGB23
         B     SETCLASS       GET OUT OF SEARCH                   TGB23
*                                                                 TGB23
EOFSCAN3 LA    R1,CLSLEN(R1)  INCREMENT TO NEXT ENTRY             TGB23
         B     EOFSCAN1       LOOP                                TGB23
*
SETCLASS MVC   JOBM+21(1),CLASSFLD MOVE NEW CLASS TO MESSAGE
         LA    R15,JOBMSG     LOAD ADDRESS OF JOB CLASS MESSAGE
         BAL   R14,MSGRTN     GO WRITE MESSAGE TO JES MESSAGE DATA SET
*
CLEAR    DS    0H
         CLI   CLASSFLD,C'A'  TEST NEW CLASS
         BNL   CHGCLASS       NEW, GO RESET TO NEW CLASS
DEFAULT  MVI   CLASSFLD,C'A'  SET NEW CLASS TO 'A'
*
         TITLE 'JES2 EXIT 6 - SET NEW CLASS FOR JOB'
**********************************************************************
*
*              S E T     T H E    N E W    C L A S S
*
**********************************************************************
*
CHGCLASS LABEL                CHANGE THE JOB CLASS
*
* NOTE: THE FOLLOWING JQEJCLAS MODIFICATION CAUSED PROBLEMS WITH  TGB47
*       JES2 2.4, SO IT WAS REMOVED                               TGB47
*                                                                 TGB47
*        AIF   ('&TEST' EQ 'YES').NOJQE                           TGB47
*        L     R8,DTEADDR     GET ADDRESS OF DTE                  TGB47
*        USING DTE,R8         EST ADDR TO DTE                     TGB47
*        L     R8,DTEPCE      GET PCE ADDRESS                     TGB47
*        DROP  R8             DROP ADDRESSABILITY TO DTE          TGB47
*        USING PCE,R8         SET ADDRESSABILITY TO PCE           TGB47
*        L     R8,PCEJQE      GET JQE ADDRESS                     TGB47
*        DROP  R8             DROP PCE                            TGB47
*        USING JQE,R8         SET ADDRESSABILITY TO JQE           TGB47
*        MVC   JQEJCLAS,CLASSFLD CHANGE CLASS IN JQE              TGB47
*        DROP  R8             DROP ADDRESSABILITY TO JQE          TGB47
*.NOJQE   ANOP                                                    TGB47
*                                                                 TGB47
         L     R2,JCTADDR     LOAD JCT ADDRESS
         USING JCT,R2         SET ADDRESSABILITY TO JCT
         MVC   JCTJCLAS,CLASSFLD CHANGE CLASS IN JCT
         MVC   JCTCLASS,CLASSFLD CHANGE CLASS IN JCT
*
NOCHANGE XC    RETCODE,RETCODE SET RETURN CODE TO ZERO
         TM    JOBIND,JOBFAIL WAS JOB FAILED BY EXIT?
         BNO   ENDOFIT        NO  BRANCH
         DROP  R2             DROP JCT
*
**********************************************************************
*   JOBERROR - PRINT ERROR MSG, FLUSH JOB, NO MORE EXIT 6 PROCESSING
**********************************************************************
*
JOBERROR LABEL
         XWTO  WTO960,LWTO960   WRITE ERROR MESSAGE
*
**********************************************************************
*   JOBERR1 -  FLUSH JOB, NO MORE EXIT 6 PROCESSING, NO WTO MSG
**********************************************************************
*
JOBERR1  LA    R15,8            SET JOB FAIL RETURN CODE
         ST    R15,RETCODE      AND SAVE IT
*
**********************************************************************
*   JOBERR0 -  NO MORE EXIT 6 PROCESSING, JOB IS NOT FLUSHED
**********************************************************************
*
JOBERR0  L     R2,JCTADDR       GET ADDRESS OF JCT                TGB04
         USING JCT,R2           SET ADDRESSABILITY TO JCT
         OI    JCTUSER3,X'01'   MAKE SURE WE DON'T RE-ENTER EXIT  TGB04
         DROP  R2               DROP JCT
*
         TITLE 'JES2 EXIT 6 - CLEAN UP AND EXIT TO JES'
**********************************************************************
*
*                        C L E A N    U P
*
**********************************************************************
*
ENDOFIT  LABEL                END OF EXIT 6
*
***************************************************************** TGB28
*                          DELETE ACEE                            TGB28
***************************************************************** TGB28
*                                                                 TGB28
         MVC   DELELST(DELELSTL),DELECON                          TGB28
         LA    R9,ACEEADR                                         TGB28
         RACINIT ENVIR=DELETE,ACEE=(9),MF=(E,DELELST)             TGB28
*
**********************************************************************
*                      DELETE EXIT6 TABLE
**********************************************************************
*
         LA    R4,EX6TABLE  POINT TO TABLE NAME
         DELETE EPLOC=(4)     DELETE EX6TABLE
*
***************************************************************** TGB45
*                      DELETE HSC CODE                            TGB45
***************************************************************** TGB45
*                                                                 TGB45
         ICM   R15,15,SLSXCAL          ANYBODY THERE ?            TGB45
         BZ    NOHSCD                  NO - SKIP DELETE           TGB45
         DELETE EP=SLSXCAL             DELETE IT                  TGB45
NOHSCD   DS    0H                                                 TGB45
*                                                                 TGB45
**********************************************************************
*                    REMOVE ESTAE ROUTINE
**********************************************************************
*
         AIF   ('&ESTAE' EQ 'NO').NOESTA1
         LA    R1,ESTAEL      LOAD ADDRESS OF ESTAE LIST FORM
         ESTAE 0,MF=(E,(1))   CANCEL ESTAE ENVIRONMENT
.NOESTA1 ANOP
*
**********************************************************************
*                  SAVE CERTAIN ADDRESSES FOR LATER
**********************************************************************
*
         L     R2,JCTADDR     LOAD ADDRESS OF JCT
         USING JCT,R2         USE JCT FOR A MOMENT
         L     R3,RETCODE     SAVE RETURN CODE
*
**********************************************************************
*                       FREE THE WORK AREA
**********************************************************************
*
         L     R0,GETLEN      LOAD FREEMAIN SIZE
         LR    R1,R13         SAVE WORKAREA ADDRESS
         L     R13,4(R13)     RESTORE ORIG REG 13
         FREEMAIN R,LV=(0),A=(1)
         XC    JCTUSERB,JCTUSERB CLEAR WORKAREA POINTER IN PCE
         DROP  R2
*
         LR    R15,R3         SET RETURN CODE
RETURN   RETURN (14,12),RC=(15) GO BACK TO JES2
*
***************************************************************** TGB38
* EOFSUB - SUBROUTINE TO FORMAT THE TIME PARMS TO OUTPUT          TGB38
***************************************************************** TGB38
*                                                                 TGB38
EOFSUB   UNPK  NUMBER,DOUBLE+4(4) CONVERT TO EBCDIC NUMBERS       TGB38
         OI    NUMBER+6,C'0'  DROP SIGN BITS                      TGB38
         LA    R15,NUMBER     POINT TO NUMBER START               TGB38
         MVI   NUMBER+7,C' '  MARK END OF NUMBER                  TGB38
EOFSUB1  CLI   0(R15),C' '    END OF NUMBER ?                     TGB38
         BE    EOFSUB3        YES - WE ARE DONE HERE              TGB38
         CLI   0(R15),C'0'    LEADING ZERO ?                      TGB38
         BNE   EOFSUB2        NO  - THEN GO MOVE IT               TGB38
         LA    R15,1(R15)     YES - POINT TO NEXT DIGIT           TGB38
         B     EOFSUB1        AND CONTINUE                        TGB38
EOFSUB2  MVC   0(1,R1),0(R15) MOVE A BYTE                         TGB38
         LA    R15,1(R15)     POINT TO NEXT BYTE                  TGB38
         LA    R1,1(R1)       POINT TO NEXT TARGET BYTE           TGB38
         CLI   0(R15),C' '    END OF STRING ?                     TGB38
         BNE   EOFSUB2        NO  - THEN GO MOVE ANOTHER BYTE     TGB38
         BR    R14            YES - THEN RETURN                   TGB38
EOFSUB3  MVI   0(R1),C'0'     MOVE A ZERO                         TGB38
         LA    R1,1(R1)       BUMP POINTER                        TGB38
         BR    R14            AND RETURN                          TGB38
*                                                                 TGB38
         EJECT
**********************************************************************
*        RETURN TO JES REQUESTING THE NEXT INTERNAL TEXT STATEMENT
**********************************************************************
*
*  NOTE: GETMAINED AREA IS NOT FREED
*
**********************************************************************
*
GETERR   BAL   R14,ERRORTN    CALL ERROR ROUTINE                  TGB12
*
GETNEXT  LABEL
*
         L     R4,CARDNO      LOAD CARD NUMBER FIELD
         LA    R4,1(R4)       ADD 1 TO CARD NUMBER
         ST    R4,CARDNO      STORE NEW CARD NUMBER
         XC    RETCODE,RETCODE SET RETURN CODE TO ZERO
*
         AIF   ('&ESTAE' EQ 'NO').NOESTA2
         LA    R1,ESTAEL      LOAD ADDRESS OF ESTAE LIST FORM
         ESTAE 0,MF=(E,(1))   CANCEL ESTAE ENVIRONMENT
.NOESTA2 ANOP
*
         L     R13,4(R13)     RESTORE ORIG REG 13
         SLR   R15,R15        SET RETURN CODE TO ZERO
         B     RETURN         GO BACK TO JES2
*
         DROP  R6             DROP TEXT STRING
*
         TITLE 'JES2 EXIT 6 - ERROR ROUTINES'
**********************************************************************
**********************************************************************
**********************************************************************
***
***
***
***
***                  E R R O R   R O U T I N E S
***
***
***
***
**********************************************************************
**********************************************************************
**********************************************************************
         EJECT
**********************************************************************
*
*                          T B L F U L L
*
*        THE INTERNAL DD TABLE IS FULL.  ISSUE THE APPROPRIATE
*        MESSAGE AND EXIT WITH A JCL ERROR.
*
*        HOPEFULLY THIS WILL NEVER HAPPEN, BUT IF IT DOES, WE SHOULD
*        CHANGE THIS ROUTINE TO DO A GETMAIN, RATHER THAN CANCEL
*        THE JOB
*
**********************************************************************
*
TBLFULL  LABEL
*
         XWTO  WTO964,LWTO964 WRITE ERROR MESSAGE
         B     JOBERROR       EXIT WITH A SEVERE ERROR
*
         EJECT                                                    RWS01
***************************************************************** TGB28
*                                                                 TGB28
*                         R A C F E R R                           TGB28
*                                                                 TGB28
*             GET MESSAGE BASED ON RACINIT ERROR CODE             TGB28
*                                                                 TGB28
***************************************************************** TGB28
*                                                                 TGB28
RACFERR  LA    R15,48                  GET MESSAGE CODE           TGB28
         BAL   R14,ERRORTN             ISSUE MESSAGE              TGB28
         B     JOBERROR                ERROR                      TGB28
*                                                                 TGB28
         EJECT
**********************************************************************
*
*                          L O A D E R R
*
*        CLASS TABLE WAS NOT LOADED.  ISSUE THE APPROPRIATE
*        MESSAGES AND EXIT WITH A JCL ERROR.
*
**********************************************************************
*
LOADERR  LABEL
         XWTO  WTO962,LWTO962 WRITE ERROR MESSAGE TO OPERATOR
         LA    R0,DEFTABLE    POINT TO DEFAULT TABLE              TGB23
         ST    R0,EXCPTAB     AND SAVE ADDRESS                    TGB23
         B     GOTTAB         MAKE LIKE WE GOT TABLE
*
         EJECT
**********************************************************************
*
*                          S T A E X I T
*
*        THIS ROUTINE GETS CONTROL FOR EVERY ABEND OCCURRING IN
*        THE EXIT.  THIS ROUTINE WILL ISSUE AN APPROPRIATE MESSAGE
*        TO THE OPERATOR AND TAKE A CONSOLE DUMP FOR PROBLEM
*        RESOLUTION.  RETRY WILL BE ATTEMPTED FOR ALL ABENDS
*        WHICH WILL JUST SET THE JOB CLASS TO "A" AND TERMINATE.
*        NOTE THAT THERE IS A RECURSION CHECK TO PROTECT FROM
*        ABEND LOOPS.
*
**********************************************************************
*
STAEXIT  DS    0H
         SAVE  (14,12)        SAVE REGISTERS
         LR    R8,R15         SET NEW BASE ADDR
         USING STAEXIT,R8     USE BASE
         LA    R4,12
         CLR   R0,R4          SEE IF CORE AVAILABLE
         BE    STAENO-STAEXIT(R8)  NO, BRANCH
*
         L     R2,0(R1)       LOAD PARAMETER ADDRESS
         L     R11,STAEREGS+64-WORKAREA(R2)   RESTORE HCT ADDRESS
         LA    R3,STAESAVE-WORKAREA(R2) LOAD ADDRESS OF NEW SAVE
         ST    R3,8(R13)      SAVE NEW SAVE ADDRESS IN OLD
         ST    R13,4(R3)      SAVE OLD SAVE ADDRESS IN NEW
         LR    R13,R3         SET NEW SAVE ADDRESS
         LR    R3,R1          SAVE SDWA ADDRESS
         WTO   '$HASP911 JES2 EXIT6 ABEND',ROUTCDE=(2),DESC=(4)
         CLI   RECURS-WORKAREA(R2),X'FF'   SEE IF RECURSIVE ABEND
         BE    STAENO-STAEXIT(R8)  YES, TELL ABEND NOT TO RETRY
*
         AIF   ('&TEST' EQ 'YES').NOSDUMP
         SDUMP HDR='JES2 EXIT6 CONVERTER TIME ESTAE'
.NOSDUMP ANOP
*
         L     R13,4(R13)     RESTORE ORIGINAL REG 13
         LR    R1,R3          RESTORE SDWA ADDRESS
         L     R5,RETRY-WORKAREA(R2)  LOAD RETRY ADDRESS
         SETRP REGS=(14,12),DUMP=IGNORE,RC=4,FRESDWA=YES,              X
               RETADDR=(5)
STAENO   DS    0H
         L     R2,0(R1)       GET PARM ADDRESS
         L     R0,RETRY-WORKAREA(R2)  LOAD RETRY ADDRESS
         LA    R15,4          SET RETURN CODE TO RETRY
         BR    R14            GO RETRY
*
         DROP  R8
*
**********************************************************************
*
*                          S T A E R T R Y
*
*        RESTORE ORIGINAL REGISTERS AND GET OUT
*
**********************************************************************
*
STAERTRY LR    R13,R1         RESTORE GETMAINED AREA ADDRESS
         LM    R14,R12,STAEREGS+12 RESTORE REGISTERS
         L     R1,JCTADDR     GET ADDRESS OF JCT                  TGB06
         USING JCT,R1         AND USE ITS MAP                     TGB06
         OI    JCTUSER3,X'01' SHOW WE SHOULD NOT RETURN TO EXIT   TGB06
         DROP  R1                                                 TGB06
         CLI   RECURS,X'FF'   SEE IF RECURSIVE ABEND
         BE    NOCHANGE       YES, GET OUT AS QUICKLY AS POSSIBLE
         MVI   RECURS,X'FF'   SET RECURSIVE ABEND INDICATOR
         B     CLEAR          GET OUT
*
         TITLE 'JES2 EXIT 6 - INTERNAL SUBROUTINES'
**********************************************************************
**********************************************************************
**********************************************************************
***
***
***
***
***                    S U B R O U T I N E S
***
***
***
***
**********************************************************************
**********************************************************************
**********************************************************************
         EJECT
**********************************************************************
*
*                        E R R O R T N
*
*        THIS ROUTINE WILL WRITE A MESSAGE TO THE JES MESSAGE DATA
*        SET USING THE INDEX INTO THE MESSAGE TABLE PASSED BY
*        REGISTER 15 TO THE ROUTINE AND USE THE CARDNO FOR THE
*        STATEMENT NUMBER IN THE MESSAGE PREFIX.
*
**********************************************************************
*
         PUSH  USING
ERRORTN  STM   R14,R12,SAVEREGS SAVE REGISTERS
         L     R6,OUTRPL      GET BASE FOR RPL
         USING IFGRPL,R6      SET ADDRESSABILITY
         LR    R2,R15         SAVE ERROR NUMBER
         BCTR  R2,0           MAKE ERROR NUMBER REL TO ZERO
         MH    R2,=H'90'      MULTIPLY BY 90 FOR OFFSET
         L     R3,CARDNO      LOAD CARD NUMBER
         CVD   R3,DOUBLE      CONVERT CARD NUMBER TO PACKED
         L     R4,MSGCOUNT    LOAD MESSAGE COUNTER
         LTR   R4,R4          SEE IF FIRST MESSAGE
         BNZ   MSGOUT         NO, DO NOT PUT HEADERS
         MVC   BUFFER,HEADER1 MOVE HEADER LINE1 TO JES2 BUFFER
         BAL   R5,PUTMSG      GO WRITE TO MSG DATA SET
         MVC   BUFFER,HEADER2 MOVE HEADER LINE2 TO JES2 BUFFER
         BAL   R5,PUTMSG      GO WRITE TO MSG DATA SET
MSGOUT   LA    R4,1(R4)       ADD 1 TO MESSAGE COUNT
         ST    R4,MSGCOUNT    SAVE MESSAGE COUNTER
         MVC   MSGPREF,PREFIX MOVE MSG PREFIX TO JES2 BUFFER
         ED    MSGPREF(6),DOUBLE+5 EDIT CARD NUMBER TO PREFIX
         L     R3,=V(MESSAGES) LOAD ADDR OF MESSAGE TABLE         TGB08
         AR    R3,R2          ADD OFFSET OF MSG TO TBL ADDR
         MVC   MSGTEXT,0(R3)  MOVE PROPER MSG TO JES2 BUFFER
         CLC   =C'SCE038W',MSGTEXT                                TGB36
         BNE   MSGOUTB                                            TGB36
         MVC   MSGTEXT+77(1),INCLASS                              TGB36
MSGOUTB  CLC   =C'USERID XXXXXXX',MSGTEXT+8                       TGB26
         BNE   MSGOUTA        NOT A SPECIAL MESSAGE               TGB26
         MVC   MSGTEXT+15(7),USERID    MOVE USERID TO MESSAGE     TGB28
MSGOUTA  CLC   =C'SCE048E',MSGTEXT                                TGB38
         BNE   MSGOUTC        NOT A SPECIAL MESSAGE               TGB38
         MVC   MSGTEXT+46(40),RACFMSG  MOVE RACFMSG TO MESSAGE    TGB38
MSGOUTC  BAL   R5,PUTMSG      GO WRITE TO MSG DATA SET            TGB26
         OI    JOBIND,JOBFAIL TURN ON JOB FAILED IND
MSGOUT1  LM    R14,R12,SAVEREGS RESTORE REGISTERS
         BR    R14            RETURN TO CALLER
*
         DROP  R6
*
         EJECT
**********************************************************************
*
*                          M S G R T N
*
*        THIS ROUTINE WILL WRITE THE MESSAGE WHICH IS POINTED TO
*        BY REGISTER 15 TO THE JES MESSAGE DATA SET.
*
**********************************************************************
*
MSGRTN   STM   R14,R12,SAVEREGS SAVE REGISTERS
         LR    R2,R15         SAVE BUFFER ADDRESS
         L     R6,OUTRPL      GET BASE FOR RPL
         USING IFGRPL,R6      SET ADDRESSABILITY
         L     R3,CARDNO      LOAD CARD NUMBER
         CVD   R3,DOUBLE      CONVERT CARD NUMBER TO PACKED
         L     R4,MSGCOUNT    LOAD MESSAGE COUNTER
         LTR   R4,R4          SEE IF FIRST MESSAGE
         BNZ   MSGRTN1        NO, DO NOT PUT HEADERS
         MVC   BUFFER,HEADER1 MOVE HEADER LINE1 TO JES2 BUFFER
         BAL   R5,PUTMSG      GO WRITE TO MSG DATA SET
         MVC   BUFFER,HEADER2 MOVE HEADER LINE2 TO JES2 BUFFER
         BAL   R5,PUTMSG      GO WRITE TO MSG DATA SET
MSGRTN1  LA    R4,1(R4)       ADD 1 TO MESSAGE COUNT
         ST    R4,MSGCOUNT    SAVE MESSAGE COUNTER
         MVC   BUFFER,0(R2)   MOVE MESSAGE FROM BUFFER
         BAL   R5,PUTMSG      GO WRITE TO MSG DATA SET
         LM    R14,R12,SAVEREGS RESTORE REGISTERS
         BR    R14            RETURN TO CALLER
*
         EJECT
**********************************************************************
*
*                          P U T M S G
*
*       WRITE 'BUFFER' TO JES MESSAGE DATA SET OR DO A TPUT TO
*       TSO TERMINAL IF '&TEST' = 'YES'
*
**********************************************************************
*
PUTMSG   DS    0H
*
         AIF   ('&TEST' EQ 'YES').DOTPUT
*
         MVI   RPLREQ,RPLPUT  OPERATION TO BE A PUT
         L     R0,OUTACB      LOAD OUTPUT ACB ADDRESS
         ST    R0,RPLDACB     SET IN ACB POINTER IN RPL
         LA    R0,BUFFER      LOAD ADDR OF BUFFER
         ST    R0,RPLAREA     POINT TO BUFFER
         XC    RPLARG(4),RPLARG ZERO FIELD
         MVI   RPLOPT1,RPLSEQ OPERATION TO BE SEQUENTIAL
         MVI   RPLOPT2,X'00'  ZERO FIELD
         LA    R0,100         LOAD MESSAGE LENGTH
         ST    R0,RPLRLEN     STORE MESSAGE LENGTH
         XC    RPLBUFL(4),RPLBUFL ZERO FIELD
         XC    RPLDDDD(4),RPLDDDD ZERO FIELD
         ST    R13,PUTSAVE+72 SAVE SAVE AREA POINTER
         LA    R13,PUTSAVE    SAVE AREA FOR ACCESS METHOD
         LA    R1,IFGRPL      LOAD ADDR OF RPL
         PUT   RPL=(1)        WRITE TO MESSAGE DATA SET
         L     R13,72(R13)    RESTORE SAVE AREA POINTER
         LTR   R15,R15        TEST RETURN CODE
         BNZ   MSGERROR       BAD, GO BAG JOB
         BR    R5             RETURN TO CALLER
*
MSGERROR XWTO  WTO963,LWTO963 WRITE ERROR MESSAGE
         B     JOBERROR       GET OUT
         DROP  R6
*
         AGO   .TSOEND
.DOTPUT  ANOP
         TPUT  BUFFER,BUFFERL
         BR    R5
.TSOEND  ANOP
*
         EJECT
***********************************************************************
*
*                           D E C B I N
*
*        CONVERT NUMERIC STRING TO BINARY
*
*        IN:   R2 POINTS TO A STRING CONSISTING OF:
*                  1) A SINGLE BUTE LENGTH OF STRING
*                  2) THE STRING ITSELF
*
*        OUT:  R15 = X'FFFFFFFF' (MINUS)    STRING LENGTH IS ZERO
*              R15 NOT ZERO                 STRING NOT NUMERIC
*              R15 = 0                      RESULT IS IN R1
*                                           AND IN 'DOUBLE' (PACKED)
*
*        NOTE: PSW CC IS PRESET TO REFLECT CONTENTS OF R15
*
*        USES: R0, R1, R15,  RETURN TO R14
*
***********************************************************************
*
DECBIN   SLR   R0,R0          CLEAR FOR IC
         ICM   R0,1,0(R2)     GET LENGTH OF STRING
         BZ    DECBINM        ZERO - SET MINUS CC
         SLR   R15,R15        CLEAR COUNTER
         LA    R1,1(R2)       POINT TO STRING
*
DECBIN1  CLI   0(R1),C'0'     IS IT LESS THAN ZERO ?
         BL    DECBIN2        YES - NOT NUMERIC
         CLI   0(R1),C'9'     IS IT GREATER THAN NINE ?
         BH    DECBIN2        YES - NOT NUMERIC
*
         LA    R15,1(R15)     BUMP UP NUM COUNT
         LA    R1,1(R1)       POINT TO NEXT DIGIT
         BCT   R0,DECBIN1     CONTINUE
*
DECBIN2  LTR   R15,R15        ANY DIGITS FOUND ?
         BZ    DECBINP        NO  - SET CC TO NOT ZERO
*
         BCTR  R15,0          BUMP DOWN FOR PACK
         EX    R15,PACKD      PACK INTO DOUBLEWORD
         CVB   R1,DOUBLE      CONVERT TO BINARY
         SLR   R15,R15        SET ZERO RETURN CODE
DECBINR  LTR   R15,R15        SETUP PSW CC
         BR    R14            RETURN
*
PACKD    PACK  DOUBLE,1(0,R2)      *********** EXECUTED ************
*
DECBINP  LA    R15,8          SET POSITIVE RETURN CODE
         B     DECBINR
*
DECBINM  SLR   R15,R15        SET NEGATIVE RETURN CODE
         BCTR  R15,0
         SLR   R1,R1          SET RESULT TO ZERO
         B     DECBINR
*
         EJECT
***************************************************************** TGB01
*                                                                 TGB01
*                       A L P H A N U M                           TGB01
*                                                                 TGB01
*        RETURN CC = 0 IF BYTE POINTED TO BY R1 IS ALPHANUMERIC   TGB01
*        (A-Z OR 0-9) AND CC <> 0 IF NOT. ALL REGISTERS BUT R15   TGB01
*        REMAIN UNCHANGED. RETURN IS TO R14, RETURN CODE IS IN    TGB01
*        R15 AND PSW CC IS PRESET.                                TGB01
*                                                                 TGB01
***************************************************************** TGB01
*                                                                 TGB01
ALPHANUM SLR   R15,R15        ASSUME GOOD CONDITION CODE          TGB01
         CLI   0(R1),X'C1'    LESS THAN 'A' ?                     TGB01
         BL    ALPHANU1       YES - NOT ALPHANUMERIC              TGB01
         CLI   0(R1),X'CA'    LESS THAN 'I'+1 ?                   TGB01
         BL    ALPHANU2       YES - ALPHANUMERIC                  TGB01
         CLI   0(R1),X'D1'    LESS THAN 'J' ?                     TGB01
         BL    ALPHANU1       YES - NOT ALPHANUMERIC              TGB01
         CLI   0(R1),X'DA'    LESS THAN 'R'+1 ?                   TGB01
         BL    ALPHANU2       YES - ALPHANUMERIC                  TGB01
         CLI   0(R1),X'E2'    LESS THAN 'S' ?                     TGB01
         BL    ALPHANU1       YES - NOT ALPHANUMERIC              TGB01
         CLI   0(R1),X'EA'    LESS THAN 'Z'+1 ?                   TGB01
         BL    ALPHANU2       YES - ALPHANUMERIC                  TGB01
         CLI   0(R1),X'F0'    LESS THAN '0' ?                     TGB01
         BL    ALPHANU1       YES - NOT ALPHANUMERIC              TGB01
         CLI   0(R1),X'FA'    LESS THAN '9'+1 ?                   TGB01
         BL    ALPHANU2       YES - ALPHANUMERIC                  TGB01
ALPHANU1 LA    R15,8          NO  - MUST BE NON-ALPHANUMERIC      TGB01
ALPHANU2 LTR   R15,R15        SET PSW CONDITION CODE              TGB01
         BR    R14            RETURN                              TGB01
*
         EJECT
**********************************************************************
*
*                      R E F B A C K
*
*    THIS ROUTINE HANDLES DSN AND VOLSER REFERBACKS.  THE SAVE
*    TABLE WILL BE SEARCHED FROM THE BEGINNING FOR JOBSTEP AND/OR
*    PROCSTEP ENTRY AND THEN WITHIN THE DD ENTRIES FOR THAT STEP.
*    IF THE ENTRY IS FOUND, THE UNIT AND DSNAME INFORMATION WILL
*    BE SAVED, IF NOT, A RETURN IS MADE TO THE CALLING RTN.
*
**********************************************************************
*
REFBACK  SLR   R3,R3          CLEAR WORK REGISTER
         SLR   R4,R4          CLEAR WORK REGISTER
         SLR   R5,R5          CLEAR WORK REGISTER
         IC    R5,2(R2)       LOAD NUMBER OF DSN SUBPARAMETERS
         N     R5,=X'0000007F' 'AND' OUT THE HIGH ORDER BIT
         LA    R2,3(R2)       LOAD START OF REFBK ENTRIES
         CLI   0(R2),X'01'    SEE IF LEN OF 1ST POS = 1
         BNE   DDLOOP         NO, DSN(MEMBER) PDS DISK ONLY, IGNORE
         CLI   1(R2),C'*'     SEE IF REFERBACK
         BNE   DDLOOP         NO, DSN(MEMBER) PDS DISK ONLY, IGNORE
         CH    R5,=H'4'       SEE IF NUMBER PARAMS > 4
         BNH   *+16           NO, CONTINUE
         LA    R15,32         SET ERROR NUMBER
         BAL   R14,ERRORTN    GO ISSUE ERROR MSG
         B     DDLOOP         GET OUT
         MVI   REFERBCK,C' '  BLANK START OF REFBACK WORK AREA
         MVC   REFERBCK+1(23),REFERBCK BLANK ENTIRE WORK AREA
         XC    REFUNIT,REFUNIT ZERO REFERBACK UNIT FEEDBACK
         XC    REFVOL,REFVOL  ZERO REFERBACK VOLSER FIELD
         MVI   REFDSN,C' '    BLANK ENTIRE
         MVC   REFDSN+1(43),REFDSN  REFERBACK DSNAME FIELD
REFLOOP1 LA    R4,1(R4)       ADD 1 TO COUNT
         CR    R4,R5          SEE IF COUNT EXCEEDED
         BH    REFSEAR        YES, GO SEARCH BACK
         ICM   R3,1,0(R2)     LOAD LENGTH OF ENTRY
         BNZ   *+16           NOT ZERO, OK
         LA    R15,32         SET ERROR NUMBER
         BAL   R14,ERRORTN    GO ISSUE ERROR MSG
         B     DDLOOP         GET OUT
         CH    R3,=H'8'       SEE IF LENGTH > 8
         BNH   *+16           NO, CONTINUE
         LA    R15,32         SET ERROR NUMBER
         BAL   R14,ERRORTN    GO ISSUE ERROR MSG
         B     DDLOOP         GET OUT
         BCTR  R3,0           MAKE MACHINE LENGTH
         CH    R4,=H'1'       SEE IF 1ST ENTRY
         BE    REFLOOP2       YES, IGNORE
         CH    R4,=H'2'       SEE IF 2ND ENTRY
         BE    REF#2          YES, GO PROCESS IT
         CH    R4,=H'3'       SEE IF 3RD ENTRY
         BE    REF#3          YES, GO PROCESS IT
*        THIS MUST BE THE 4TH ENTRY
REF#4    EX    R3,MOVE10      MOVE DDN TO SEARCH FIELD
         B     REFLOOP2       BRANCH
REF#3    CH    R5,=H'3'       SEE IF ONLY 3 ENTRIES
         BE    REF#3B         YES, MUST BE DDNAME
*
*        IF NOT DDNAME, MUST BE PROCSTEP NAME
*
REF#3A   EX    R3,MOVE11      MOVE ENTRY TO PSTEP ENTRY
         B     REFLOOP2       BRANCH
REF#3B   EX    R3,MOVE10      MOVE ENTRY TO DDNAME
         B     REFLOOP2       BRANCH
REF#2    CH    R5,=H'2'       SEE IF ONLY 2 ENTRIES
         BE    REF#2B         ONLY 2, MUST BE DDNAME
*        IF 3 OR 4 ENTRIES, THIS ENTRY MUST BE FOR JOBSTEP
REF#2A   EX    R3,MOVE12      MOVE ENTRY TO JSTEP
         B     REFLOOP2       BRANCH
REF#2B   EX    R3,MOVE10      MOVE ENTRY TO DDNAME
REFLOOP2 LA    R2,2(R3,R2)    INCREMENT TO NEXT ENTRY
         B     REFLOOP1       LOOP
*
MOVE11   MVC   REFPSTEP(0),1(R2)   *********** EXECUTED ************
MOVE12   MVC   REFJSTEP(0),1(R2)   *********** EXECUTED ************
*
REFSEAR  L     R7,LASTEXEC    LOAD ADDR OF LAST EXEC CARD
*
*        IF REFERBACK WITHIN CURRENT STEP, THIS ADDR WILL BE
*        USED FOR START OF SEARCH
*
         CLI   REFJSTEP,C' '  SEE IF JSTEP PART OF SEARCH
         BE    REFSEAR5       NO, SAME STEP WE ARE IN
         CLI   REFPSTEP,C' '  SEE IF PROCSTEP PART OF SEARCH
         BE    REFSEAR1       BLANK, NO PROCSTEP
         LA    R3,15          SET COMPARE LENGTH FOR JS & PS
         B     REFSEAR2       BRANCH
REFSEAR1 LA    R3,7           SET COMPARE LENGTH FOR JS ONLY
REFSEAR2 L     R7,FIRSTENT    LOAD START OF TABLE
REFSEAR3 LA    R7,ENTLEN(R7) INCREMENT PAST JOB ENTRY
         CLI   ENTRYTYP,TYPEXEC SEE IF EXEC ENTRY
         BE    REFSEAR4       YES, GO COMPARE
         CLI   ENTRYTYP,TYPEND  SEE IF END OF TABLE
         BE    REFNO          NOT FOUND, PROBABLE JCL ERROR, EXIT
         B     REFSEAR3       LOOP
REFSEAR4 EX    R3,COMPARE1    SEE IF RIGHT STEP
         BE    REFSEAR5       YES, GO SEARCH FOR DDNAME
         B     REFSEAR3       LOOP FOR NEXT ENTRY
REFSEAR5 LA    R7,ENTLEN(R7) INCREMENT TO NEXT DD ENTRY
         TM    ENTRYTYP,TYPEDD SEE IF DD ENTRY
         BNO   REFNO          DDNAME NOT FOUND, EXIT
REFSEAR6 CLC   REFDDN,DDDN    MATCH DDNAME????
         BNE   REFSEAR5       NO, LOOP FOR NEXT DD
REFOUND  MVC   REFDSN(L'DDSN),DDSN SAVE DSNAME
         MVC   REFUNIT,DTYPE  SAVE UNIT INFO
         MVC   REFVOL,DVOLSER SAVE VOLSER INFO
REFNO    BR    R14            RETURN
*
COMPARE1 CLC   REFERBCK(0),EENTRY  *********** EXECUTED ************
*
         EJECT                                                    TGB45
***************************************************************** TGB45
*                                                                 TGB45
*                         S E T U P                               TGB45
*                                                                 TGB45
*        DO AUTOMATIC TAPE SETUP WORK                             TGB45
*                                                                 TGB45
***************************************************************** TGB45
*                                                                 TGB45
*------- SEE IF A '/*SETUP AUTO' CARD WAS TYPED ***************** TGB45
*                                                                 TGB45
SETUP    DS    0H                                                 TGB45
         TM    UCBTYP3,X'80'           TAPE UNIT?                 TGB45
         BNOR  R5                      NO - JUST RETURN           TGB45
         L     R2,JCTADDR              LOAD JCT ADDRESS           TGB45
         USING JCT,R2                  SET ADDRESSABILITY TO JCT  TGB45
         TM    JCTUSER3,X'04'          AUTO SETUP REQUESTED ?     TGB45
         BNOR  R5                      NO  - JUST RETURN          TGB45
         MVC   SETJNAME,JCTJNAME       GET JOB NAME FOR MESSAGES  TGB45
         DROP  R2                                                 TGB45
*                                                                 TGB45
*------- MESSAGE LOOP ------------------------------------------- TGB45
*                                                                 TGB45
         LA    R2,LOCAREA              POINT TO LOCATE AREA       TGB45
         LH    R4,0(R2)                GET NUMBER OF VOLSERS      TGB45
         LA    R2,6(R2)                POINT TO FIRST VOLSER      TGB45
SETUP1   LA    R3,5                    5 VOLSERS PER MESSAGE      TGB45
         MVC   SETMSG,SETMSGC          GET SETUP MSG WTO CONSTANT TGB45
         MVC   SETMSG+13(8),SETJNAME   GET JOB NAME               TGB45
         LA    R8,SETMSG+22            POINT WITHIN SETUP WTO     TGB45
SETUP2   LTR   R4,R4                   ANY MORE VOLSERS ?         TGB45
         BZ    SETUP3                  NO  - WE ARE DONE          TGB45
*                                                                 TGB48
*------- SKIP IF VOLSER WAS ALREADY SEEN ------------------------ TGB48
*                                                                 TGB48
         L     R15,SETTABLE            POINT TO SETUP TABLE START TGB48
SETUP2A  CLI   0(R15),X'FF'            END OF TABLE ?             TGB48
         BE    SETUP2B                 YES - NOT FOUND            TGB48
         CLC   0(6,R2),0(R15)          VOLSER MATCH ?             TGB48
         BE    SETUP6                  YES - SKIP THIS VOLSER     TGB48
         LA    R15,6(R15)              NO  - POINT TO NEXT VOLSER TGB48
         B     SETUP2A                 AND KEEP LOOKING           TGB48
*                                                                 TGB48
SETUP2B  MVC   0(6,R15),0(R2)          NOT FOUND - ADD TO TABLE   TGB48
         MVI   6(R15),X'FF'            MARK NEW END OF TABLE      TGB48
*                                                                 TGB48
*------- SEE IF VOLSER IS IN THE SILO OR NOT -------------------- TGB45
*                                                                 TGB45
         L     R15,SLSXCAL             GET CALL ADDRESS           TGB45
         LTR   R15,R15                 ANYTHING THERE ?           TGB45
         BZ    SETUP7                  NO  - DON'T CALL SLS       TGB45
         MVC   SLSREQ(256),SLSREQC     MOVE CONSTANT TO WORK AREA TGB45
         MVC   SLSREQ+256(SLSREQCL-256),SLSREQC+256 MOVE THE REST TGB45
         SLSXREQ QVOLUME,MF=(E,SLSREQ),OPTION=SYNCH,VOLSER=(2),   TGB45X
               XCALADR=SLSXCAL                                    TGB45
         LTR   R15,R15                 OK CALL ?                  TGB45
         BNZ   SETUP7                  NO  - SHOW VOL FOR SETUP   TGB45
         LR    R9,R1                   POINT TO SLX AREA          TGB45
         USING SLX,R9                  AND USE                    TGB45
         CLI   SLXCMDRC,SLXROK         DID QUERY WORK OK ?        TGB45
         BNE   SETUP7                  NO  - SHOW VOL FOR SETUP   TGB45
         A     R9,SLXXVOLO             POINT TO VOLUME AREA       TGB45
         USING SLXSVOL,R9              AND USE                    TGB45
         TM    SLXVSTA,SLXVILB         VOLSER IN A SILO ?         TGB45
         BNO   SETUP7                  NO  - SHOW VOL FOR SETUP   TGB45
SETUP6   BCTR  R4,R0                   YES - BUMP VOL CNT DOWN 1  TGB45
         LA    R2,12(R2)               POINT TO NEXT VOLSER       TGB45
         B     SETUP2                  AND LOOP                   TGB45
*                                                                 TGB45
*------- NOT IN SILO - ADD VOLSER TO MESSAGE -------------------- TGB45
*                                                                 TGB45
SETUP7   MVC   0(6,R8),0(R2)           MOVE A VOLSER              TGB45
         CLI   UCBTYP4,X'81'           3490 DRIVE ?               TGB45
         BNE   SETUP8                  NO  - MESSAGE IS COMPLETE  TGB45
         MVI   6(R8),C'*'              YES - ADD SILO INDICATOR   TGB45
SETUP8   LA    R8,8(R8)                BUMP MESSAGE POINTER       TGB45
         LA    R2,12(R2)               BUMP LOCAREA POINTER       TGB45
         BCTR  R4,0                    BUMP DOWN                  TGB45
         BCT   R3,SETUP2               AND CONTINUE FOR 6 VOLSERS TGB45
         LA    R1,SETMSG               POINT TO SETUP MESSAGE     TGB45
         WTO   MF=(E,(1))              SEND IT OUT                TGB45
         B     SETUP1                  AND LOOK FOR MORE VOLSERS  TGB45
*                                                                 TGB45
SETUP3   CH    R3,=H'5'                ANY VOLSERS TO SHOW ?      TGB45
         BE    SETUP4                  NO  - SKIP LAST WTO        TGB45
         LA    R1,SETMSG               POINT TO SETUP MESSAGE     TGB45
         WTO   MF=(E,(1))              SEND IT OUT                TGB45
         OI    JOBIND2,AUTOHOLD        SHOW WE NEED TO HOLD JOB   TGB45
SETUP4   DS    0H                                                 TGB45
*                                                                 TGB45
*------- SET SETUP AND HOLD FLAGS IF NEEDED --------------------- TGB45
*                                                                 TGB45
         TM    JOBIND2,AUTOHOLD        SHOULD WE HOLD THIS JOB ?  TGB45
         BNO   SETUP9                  NO  - WE ARE DONE          TGB45
         L     R2,JCTADDR     LOAD JCT ADDRESS                    TGB45
         USING JCT,R2         SET ADDRESSABILITY TO JCT           TGB45
         OI    JCTJBOPT,JCTSETUP                                  TGB45
         OI    JCTJBOPT,JCTTHOLD                                  TGB45
         DROP  R2                                                 TGB45
SETUP9   BR    R5                                                 TGB45
*                                                                 TGB45
         EJECT
**********************************************************************
*
*                         L O C A T E
*
*        ISSUE THE LOCATE MACRO TO OBTAIN THE REQUESTED UNIT TYPE
*        AND VOLSER INFORMATION.
*
**********************************************************************
*
LOCATE   LA    R15,68         LOAD OPTION VALUE
         SLL   R15,24         SHIFT OPTION TO HIGH BYTE
         ST    R15,CAMLST     STORE INTO CAMLST AREA
         LA    R15,LDSN       LOAD ADDR OF DSN
         ST    R15,CAMLST+4   STORE INTO CAMLST AREA
         XC    CAMLST+8(4),CAMLST+8 ZERO 3RD PARAM CAMLST AREA
         XC    LOCAREA(12),LOCAREA CLEAR FIRST PART OF THE WORK AREA
         LA    R15,LOCAREA    LOAD ADDR OF LOCATE WORK AREA
         ST    R15,CAMLST+12  STORE INTO CAMLST AREA
         LOCATE CAMLST        READ CATALOG
         BR    R5             RETURN TO CALLER
*
         EJECT
**********************************************************************
*
*                     C A T A L O G    L O C A T E
*
*        ISSUE THE LOCATE MACRO TO OBTAIN THE VOLSER FOR A GIVEN
*        HIGH LEVEL INDEX.  THE UCB SEARCH ROUTINE WILL THEN BE
*        BRANCH ENTERED TO DETERMINE IF THE CATALOG IS ONLINE TO
*        THIS SYSTEM.
*                                                                 TGB10
*        TO SAVE LOCATES ON THE HIGH LEVEL INDEX, A LOOKASIDE     TGB10
*        BUFFER IS USED. CATLOC NOW CALLS UCBSEAR DIRECTLY.       TGB10
*
*        IN:  LDSN CONTAINS FULL DATASET NAME.                    TGB24
*
**********************************************************************
*                                                                 TGB10
CATLOC   LABEL                                                    TGB10
         STM   R3,R5,CATSAVE  SAVE REGISTERS WE MUST USE          TGB10
*
CATLOCA  SR    R5,R5              CLEAR CHAR COUNT                TGB24
         LA    R4,LDSN            POINT TO DSN                    TGB24
         LA    R3,8               MUST SEE DOT WITHIN 8 CHARS     TGB24
*                                                                 TGB24
CATLOCB  CLI   0(R4),C'.'         PERIOD ?                        TGB24
         BE    CATLOCC            YES - THEN MOVE IT              TGB24
         LA    R4,1(R4)           BUMP ALONG                      TGB24
         LA    R5,1(R5)           COUNT CHARACTERS IN HI LEVEL    TGB24
         BCT   R3,CATLOCB         CONTINUE IF NOT 8 CHARS YET     TGB24
*                                                                 TGB24
CATLOCC  MVC   HLINDEX,BLANKS     CLEAR HI LEVEL NAME             TGB24
         BCTR  R5,0               MAKE MACHINE LENGTH             TGB24
         EX    R5,CATMOVE         STORE HI LEVEL INDEX            TGB24
*
         L     R3,INDXTABL    GET ADDRESS OF INDEX TABLE          TGB10
         LA    R4,INDXMAX     GET MAX NUMBER OF TABLE ENTRIES     TGB10
*                                                                 TGB10
CATLOC1  CLI   0(R3),0        ARE WE AT END OF TABLE ?            TGB10
         BE    CATLOC3        YES - THEN ENTRY IS NOT FOUND       TGB10
         CLC   0(INDXLEN,R3),HLINDEX  COMPARE INDEX TO TABLE      TGB10
         BE    CATLOC4        FOUND - DON'T BOTHER WITH LOCATE    TGB10
         LA    R3,INDXLEN(R3) ELSE TRY NEXT ENTRY IN TABLE        TGB10
         BCT   R4,CATLOC1     IF THERE IS ONE                     TGB10
*
CATLOC3  DS    0H                                                 TGB10
         MVC   HLI,HLINDEX    SAVE INDEX SINCE LOCATE RUINS IT    TGB10
         LA    R15,68         LOAD OPTION VALUE
         SLL   R15,24         SHIFT OPTION TO HIGH BYTE
         ST    R15,CAMLST     STORE INTO CAMLST AREA
         LA    R15,HLINDEX    LOAD ADDR OF DSN
         ST    R15,CAMLST+4   STORE INTO CAMLST AREA
         XC    CAMLST+8(4),CAMLST+8 ZERO 3RD PARAM CAMLST AREA
         XC    LOCAREA(12),LOCAREA CLEAR FIRST PART OF THE WORK AREA
         LA    R15,LOCAREA    LOAD ADDR OF LOCATE WORK AREA
         ST    R15,CAMLST+12  STORE INTO CAMLST AREA
         LOCATE CAMLST        READ CATALOG
         LTR   R15,R15        IS ALIAS DEFINED ?                  TGB10
         BNZ   CATLOC4        NO -  COULD BE IN MASTER CATALOG    TGB10
         BAS   R5,UCBSEAR     CALL UCB SEARCH ROUTINE             TGB10
         LTR   R15,R15        IS CATALOG ONLINE ?                 TGB10
         BNZ   CATLOC5        NO  - RETURN NON-ZERO RETURN CODE   TGB10
         LTR   R4,R4          IS THERE ROOM IN TABLE TO ADD ?     TGB10
         BZ    CATLOC4        NO  - THEN DO NOT ADD TO TABLE      TGB10
CATLOC2  DS    0H                                                 TGB10
         MVC   0(INDXLEN,R3),HLI  ADD INDEX TO TABLE              TGB10
CATLOC4  SLR   R15,R15        CLEAR RETURN CODE                   TGB10
CATLOC5  LM    R3,R5,CATSAVE  RESTORE REGISTERS                   TGB10
         BR    R5             RETURN TO CALLER
*
CATMOVE  MVC   HLINDEX(0),LDSN     ****** EXECUTED ******         TGB24
*
         EJECT
**********************************************************************
*
*                         U C B S E A R
*
*        SEARCH THE SYSTEM UCBS TO SEE IF THE REQUESTED CATALOG
*        IS MOUNTED. IF NOT, RETURN WITH A NON-ZERO IN R15, WHICH
*        WILL CAUSE THE JOB TO BE FAILED, SINCE AT LEAST ONE DATA-
*        SET REQUESTED VIA THE CATALOG CANNOT BE ACCESSED.
*
**********************************************************************
*
UCBSEAR  DS    0H
*
         SLR   R15,R15                                            TGB43
         BR    R5                                                 TGB43
*
         STM   R0,R14,SAVEREGS SAVE REGISTERS
         L     R3,CVTPTR      GET CVT ADDRESS
         USING CVTMAP,R3      SET ADDR TO CVT
         XC    UCBWORK,UCBWORK  CLEAR UCB WORKAREA
         LA    R1,UCBWORK     GET ADDRESS OF UCB WORKAREA
         ST    R1,PARMWA      STORE ADDR IN PARMLIST
         LA    R1,DEVCLASS    GET ADDRESS OF DEVCLASS BYTE AREA
         ST    R1,PARMDEVT    STORE IN PARMLIST
         MVI   DEVCLASS,UCB3DACC
         LA    R1,UCBADDR     GET ADDR OF AREA TO STORE UCB ADDRESS
         ST    R1,PARMUCB     STORE IN PARMLIST
         LA    R1,PARMLUCB    PUT PARMLIST ADDR IN R1
         USING UCBOB,R2       SET UP ADDR TO UCB
UCBSEAR1 DS    0H
         L     R15,CVTUCBSC   GET SCAN SERVICE ADDRESS
         BALR  R14,R15        GO TO SCAN SERVICE
*
         LTR   R15,R15        HAS UCB BEEN FOUND ?
         BNZ   UCBSEAR2       NO - END OF SEARCH, EXIT WITH ERROR
         L     R2,UCBADDR     LOAD UCB ADDRESS
         CLC   UCBVOLI,CAMVOL IS THIS IT ?
         BNE   UCBSEAR1       NO - TRY AGAIN
         TM    UCBSTAT,UCBONLI  IS VOLUME ONLINE ?
         BO    UCBSEAR3       YES - GO BACK AND LOOK UP DATASET
UCBSEAR2 LA    R15,4          SET R15 NON-ZERO
UCBSEAR3 LM    R0,R14,SAVEREGS RESTORE REGISTERS
         BR    R5             RETURN TO CALLER
*
         DROP  R2             DROP UCBOB
         DROP  R3             DROP CVTMAP
*
***************************************************************** TGB23
*                                                                 TGB23
*                       G E T D G N                               TGB23
*                                                                 TGB23
*       CALL SCEDGLKP TO LOOKUP DATAGROUP NAME TABLE FOR US       TGB23
*                                                                 TGB23
***************************************************************** TGB23
*                                                                 TGB23
*  IN:  DGNNAME = DATAGROUP NAME TO LOOKUP                        TGB23
*       DGNWORK   POINTS TO A 1024 BYTE WORK AREA                 TGB23
*       DGNRETN   POINTS TO A 1024 BYTE TABLE RETURN AREA         TGB23
*       R5      = RETURN ADDRESS                                  TGB23
*                                                                 TGB23
*  OUT: R15 = N/A   DO NOT CHECK RC                               TGB23
*                                                                 TGB23
*  NOTE: DGN RETURN AREA IS ALWAYS FILLED WITH A VALID            TGB23
*        'DGTABLE'. IF SCEDGLKP FAILS, A DEFAULT TABLE IS         TGB23
*        PUT THERE BY THIS CODE.                                  TGB23
*                                                                 TGB23
***************************************************************** TGB23
*                                                                 TGB23
GETDGN   DS    0H                                                 TGB23
*                                                                 TGB23
***************************************************************** TGB23
*              SETUP FOR CALL TO SCEDGLKP                         TGB23
***************************************************************** TGB23
*                                                                 TGB23
         OC    DGNNAME,BLANKS      MAKE DGNAME UPPER CASE         TGB23
         LA    R1,DGNNAME          POINT TO DATAGROUP NAME        TGB23
         ST    R1,DGNPARM+0        SAVE IN PARMLIST               TGB23
         LA    R1,DGNLEN           POINT TO LENGTH AREA           TGB23
         ST    R1,DGNPARM+8        SAVE IN PARMLIST               TGB23
         OI    DGNPARM+12,X'80'    MARK LAST PARM                 TGB23
         LA    R1,DGNRETNL         GET LENGTH OF RETURN AREA      TGB23
         STH   R1,DGNLEN           AND SAVE AS A PARM             TGB23
*                                                                 TGB23
***************************************************************** TGB23
*                     CALL LOOKUP PGM                             TGB23
***************************************************************** TGB23
*                                                                 TGB23
         LA    R1,DGNPARM          POINT TO LOOKUP PARMS          TGB23
         LINK  EP=SCEDGLKP,ERRET=GETDGND                          TGB23
         LTR   R15,R15             LOOKUP OK ?                    TGB23
         BZR   R5                  YES - RETURN                   TGB23
*                                                                 TGB23
*        CH    R15,=H'4'           MIGHT BE JUST A RELOAD ?       TGB23
         BNE   GETDGND             NO  - FIX UP DEFAULT           TGB23
         CH    R0,=H'4'            JUST A RELOAD ?                TGB23
         BER   R5                  YES - RETURN                   TGB23
*                                                                 TGB23
GETDGND  XWTO  WTO965,LWTO965                                     TGB23
         L     R1,DGNRETN          POINT TO DGN RETURN AREA       TGB23
         MVC   0(DEFTABL,R1),DEFTAB   MOVE IN DEFAULT TABLE       TGB23
         BR    R5                  RETURN                         TGB23
*                                                                 TGB23
         EJECT                                                    TGB11
***************************************************************** TGB11
*                                                                 TGB11
*                     A C F C H E C K                             TGB11
*                                                                 TGB11
*            CHECK RACF RESOURCE RULE AUTHORITY                   TGB11
*                                                                 TGB11
***************************************************************** TGB11
*                                                                 TGB11
*  CALL USING MACRO 'SCECHK' (DESCRIBED ABOVE IN MACROS)          TGB11
*                                                                 TGB11
* RACF ---------------------------------------------------------  TGB28
*                                                                 TGB28
*  IN:  USERID PREVIOUSLY SETUP                                   TGB28
*                                                                 TGB28
*  OUT: R15 = 0    USER IS AUTHORIZED FOR RESOURCE                TGB28
*       R15 ^ 0    USER IS NOT AUTHORIZED FOR RESOURCE            TGB28
*                                                                 TGB28
*    ALL REGISTERS RESTORED BUT R0,R1,R15                         TGB11
*                                                                 TGB11
***************************************************************** TGB11
*                                                                 TGB11
SCECHECK DS    0H                                                 TGB11
*                                                                 TGB11
         L     R5,RACFWORK         POINT TO WORK AREA             TGB11
         USING RACFAREA,R5         AND USE                        TGB11
         STM   R2,R14,RACFSAVE     SAVE REGISTERS                 TGB11
         MVC   RNAME,BLANKS            CLEAR PROFILE NAME         TGB28
         MVC   RNAME(7),=C'$EXIT6.'    PUT IN $EXIT6              TGB28
         MVC   RNAME+7(3),RACFKEY+1    GET KEY                    TGB28
         MVC   RNAME+10(2),=C'.#'      AND TYPE DELIMITER         TGB28
         MVC   RNAME+12(20),RACFNAME   AND TYPE                   TGB28
         MVC   CHEKLST(CHEKLSTL),CHEKCON                          TGB28
         LA    R2,RACWORK              POINT TO WORK AREA         TGB28
         LA    R4,CLASNAME             POINT TO 'FACILITY'        TGB28
         LA    R8,RNAME                POINT TO PROFILE NAME      TGB28
         L     R9,ACEEADR              POINT TO USER'S ACEE       TGB28
         RACROUTE REQUEST=AUTH,ENTITY=((8)),CLASS=(4),            TGB28X
               ATTR=UPDATE,WORKA=(2),MSGSUPP=YES,                 TGB28X
               RELEASE=1.8,ACEE=(9),MF=(E,CHEKLST)                TGB28
         CH    R15,=H'4'               OK OR NOT FOUND ?          TGB28
         BNH   RACFRET0                YES - RETURN OK            TGB28
         B     RACFRET                 ERROR                      TGB28
*                                                                 TGB28
         DROP  R5                  DROP RACFWORK                  TGB11
*                                                                 TGB11
         DROP  R7        DROP SAVE TABLE ADDRESS                  TGB11
         DROP  R13       DROP MAIN WORK AREA                      TGB11
*                                                                 TGB11
         EJECT                                                    TGB11
***************************************************************** TGB11
*                                                                 TGB11
*                          A C F I N I T                          TGB11
*                                                                 TGB11
*  INITIALIZE FOR RACF PROCESSING                                 TGB28
*                                                                 TGB11
***************************************************************** TGB11
*
*  IN:  R5 POINTS TO RACF WORK AREA
*       R2 POINTS TO JCT
*                                                                 TGB28
* RACF ---------------------------------------------------------  TGB28
*                                                                 TGB28
*      1) UMAIL, DGROUP, AND PNAME ARE OBTAINED FROM THE          TGB28
*         USER'S ACEE (VIA RACINIT). THE ACEE IS SAVED.           TGB28
*         ACCT FIELD IS SET TO 'EXIT600000'                       TGB28
*                                                                 TGB11
*   ALL REGISTERS RESTORED BUT R0, R1, R15                        TGB11
*                                                                 TGB11
*  NOTE: PSW CC REFLECTS THE CONTENTS OF R15 AT RETURN            TGB11
*                                                                 TGB11
*        RACINIT MUST NOT ADDRESS MAIN WORK AREA SINCE TSORTN     TGB11
*        ALSO CALLS IT.                                           TGB11
*                                                                 TGB28
***************************************************************** TGB11
*                                                                 TGB11
RACFINIT DS    0H                                                 TGB11
*                                                                 TGB11
         USING RACFAREA,R5         USE RACF WORK AREA             TGB11
         USING JCT,R2              USE JCT
         STM   R2,R14,RACFSAVE     SAVE REGISTERS                 TGB11
*                                                                 TGB11
***************************************************************** TGB28
*                  GET USERID INTO PROPER FORMAT                  TGB28
***************************************************************** TGB28
*                                                                 TGB28
         LA    R1,USERID               POINT TO USERID            TGB28
         MVI   USERID+8,C' '           SET END MARK               TGB28
RACF0    LA    R1,1(R1)                POINT TO NEXT CHAR         TGB28
         CLI   0(R1),C' '              IS IT A SPACE ?            TGB28
         BNE   RACF0                   NO  - KEEP LOOKING         TGB28
         LA    R8,USERID               YES - SET TO GET LENGTH    TGB28
         SR    R1,R8                   GET LENGTH                 TGB28
         STC   R1,USERIDL              AND SAVE IN RACF FORMAT    TGB28
*                                                                 TGB28
***************************************************************** TGB28
*                   CALL RACINIT TO GET ACEE                      TGB28
***************************************************************** TGB28
*                                                                 TGB28
         MVC   INITLST(INITLSTL),INITCON                          TGB28
         LA    R8,USERIDL              POINT TO USERID (LEN)      TGB28
         LA    R9,ACEEADR              POINT TO ACEE ADDRESS AREA TGB28
         RACINIT ENVIR=CREATE,USERID=(8),ACEE=(9),PASSCHK=NO,     TGB28X
               MF=(E,INITLST)                                     TGB28
         LTR   R15,R15                 IS IT OK ?                 TGB28
         BZ    RACFOK                  YES                        TGB28
         L     R1,=V(RACFMSGS)         POINT TO RACF MESSAGES     TGB06
         CH    R15,=H'40'              RC WITHIN MSG RANGE ?      TGB38
         BH    RACFM1                  NO  - USE DEFAULT          TGB38
         MH    R15,=H'10'              USE AS INDEX INTO LIST     TGB06
         AR    R1,R15                  ADD RETURN CODE INDEX      TGB06
RACFM1   MVC   RACFMSG,0(R1)           GET RACF MESSAGE           TGB06
         B     RACFERR2                AND ERROR                  TGB38
RACFOK   DS    0H                                                 TGB06
*                                                                 TGB28
***************************************************************** TGB28
*                   GET FIELDS FROM THE ACEE                      TGB28
***************************************************************** TGB28
*                                                                 TGB28
         L     R1,ACEEADR              GET ACEE                   TGB28
         USING ACEE,R1                 AND USE                    TGB28
         L     R4,ACEEUNAM             POINT TO USER NAME         TGB28
         SLR   R3,R3                   CLEAR FOR IC               TGB28
         IC    R3,0(R4)                GET LENGTH (+1)            TGB28
         BCTR  R3,0                    BUMP DOWN LENGTH FIELD     TGB28
         BCTR  R3,0                    BUMP DOWN FOR IC           TGB28
         EX    R3,MOVENAME             GET NAME                   TGB28
*                                                                 TGB28
         L     R1,ACEEINST             POINT TO INSTALL DATA      TGB28
         LA    R9,1(R1)                POINT TO INSTDATA          TGB28
         USING SCERACDS,R9             AND USE                    TGB28
         CLI   0(R1),RACDGRP-SCERACDS+L'RACDGRP                   TGB29
         BL    RACFOK1                 NO  - SKIP ALL THIS        TGB29
         MVC   DGROUP,RACDGRP          GET DATAGROUP              TGB28
         CLI   0(R1),RACROOM-SCERACDS+L'RACROOM                   TGB29
         BL    RACFOK1                 NO  - SKIP ALL THIS        TGB29
         MVC   UMAIL,RACROOM           GET ROOM NUMBER            TGB28
         DROP  R9                                                 TGB28
*                                                                 TGB28
RACFOK1  DS    0H                                                 TGB28
         MVC   ACCT,=C'EXIT600000'                                TGB28
         TM    JCTPNAME,NOT-C' '       ANY PROGRAMMER NAME ?
         BNZ   RACFSET1                YES - SKIP
         MVC   JCTPNAME,PNAME          NO  - SCOOT IN FROM RACF
RACFSET1 TM    JCTROOM,NOT-C' '        ANY ROOM NUMBER ?
         BNZ   RACFRET0                NO  - SKIP
         MVC   JCTROOM(4),UMAIL
         MVC   JCTROOM+4(4),BLANKS
         MVC   JCTROOMN,UMAIL
         B     RACFRET0            AND RETURN0                    TGB28
*                                                                 TGB11
MOVENAME MVC   PNAME(0),1(R4)          ====== EXECUTED ======     TGB01
*
RACFRET0 SLR   R15,R15
RACFRET  LM    R2,R14,RACFSAVE
         LTR   R15,R15
         BR    R14
*
RACFERR2 LA    R15,8
         B     RACFRET
*
         DROP  R2                  DROP JCT                       TGB11
         DROP  R5                  DROP RACFWORK                  TGB11
*
         EJECT                                                    TGB19
***************************************************************** TGB19
*                                                                 TGB19
*                     A C C O U N T                               TGB19
*                                                                 TGB19
*      OBTAIN DATAGROUP NAME AND INSERT INTO ACCOUNT FIELD        TGB19
*                                                                 TGB19
***************************************************************** TGB19
*                                                                 TGB19
*  IN:  R1 POINTS TO A TEMP 256 BYTE WORK AREA                    TGB19
*       R2 POINTS TO THE JCT                                      TGB19
*       R5 POINTS TO THE RACF WORKAREA                            TGB19
*       R6 POINTS TO THE INTERNAL TEXT STRING PASSED BY JES2      TGB19
*                                                                 TGB19
*  OUT: RC = 0  ACCOUNT FIELD IS MODIFIED                         TGB19
*       RC = 8  MORE THAN 9 PARMS ALREADY SPECIFIED - SORRY       TGB19
*                                                                 TGB19
*       RACF ACCOUNT NUMBER IS ADDED IF SUBPARM 1 IS NOT THERE    TGB19
*       RACF ROOM NUMBER IS ADDED IF SUBPARM 2 IS NOT THERE       TGB19
*       RACF DATAGROUP NAME IS ADDED IF SUBPARM 10 IS NOT THERE   TGB19
*       RACF PROGRAMMER NAME IS ADDED IF POS PARM 3 IS NOT THERE  TGB19
*                                                                 TGB19
*       JCT DATAGROUP NAME (PASSED BY EXIT 4 IN JCTUSER1) WILL BE TGB19
*       USED. IF NOT AVAILABLE, THEN RACF DATAGROUP NAME IS USED. TGB19
*                                                                 TGB19
*  USES:  R0  - WORK                                              TGB19
*         R1  - POINT TO TEMP WORK AREA                           TGB19
*         R2  - JCT POINTER                                       TGB19
*         R3  - SUBPARM DOWN COUNTER                              TGB19
*         R4  - NEW TEXT AREA POINTER                             TGB19
*         R5  - POINTER TO RACF WORK AREA                         TGB19
*         R6  - TEXT POINTER                                      TGB19
*         R8  - SUBPARM UP COUNTER                                TGB19
*         R9  - OLD TEXT AREA POINTER                             TGB19
*         R14 - RETURN ADDRESS                                    TGB19
*         R15 - WORK                                              TGB19
*                                                                 TGB19
*    ALL REGISTERS RESTORED BUT R0,R1,R15                         TGB19
*                                                                 TGB19
***************************************************************** TGB19
*                                                                 TGB19
ACCOUNT  DS    0H                                                 TGB19
*                                                                 TGB19
***************************************************************** TGB19
*               MAKE SURE THERE ARE POSITIONAL PARMS              TGB19
***************************************************************** TGB19
*                                                                 TGB19
         USING RACFAREA,R5         R5 POINTS TO RACF LIDREC       TGB19
         STM   R2,R14,RACFSAVE     SAVE REGISTERS                 TGB19
*                                                                 TGB19
         CLI   6(R6),X'B4'         ANY POS PARMS ?                TGB19
         BNE   ACCRET0             NO  - JUST RETURN              TGB19
         CLI   7(R6),X'00'         ANY JOB NAME ?                 TGB19
         BE    ACCRET0             NO  - JUST RETURN              TGB19
*                                                                 TGB19
         USING JCT,R2              R2 POINTS TO JCT               TGB19
*                                                                 TGB19
***************************************************************** TGB19
*                   INIT FOR ACCOUNT PROCESSING                   TGB19
***************************************************************** TGB19
*                                                                 TGB19
ACCINIT  XC    0(256,R1),0(R1)     CLEAR TEMP TEXT WORK AREA      TGB19
         MVC   0(7,R1),0(R6)       COPY FIRST 7 BYTES TO TMP AREA TGB19
         LA    R4,7(R1)            POINT TO TEMP TEXT WORK AREA   TGB19
         MVI   0(R4),3             FORCE 3 POS PARMS              TGB19
         LA    R4,1(R4)            POINT TO JOBNAME AREA          TGB19
         LA    R9,8(R6)            POINT TO OLD RECORD JOBNAME    TGB19
         BAS   R14,ACCMOVE         COPY JOBNAME TO NEW RECORD     TGB19
*                                                                 TGB19
         MVI   0(R4),X'8A'         INDICATE 10 ACCT SUBPARMS      TGB19
         LA    R4,1(R4)            BUMP PAST COUNT                TGB19
         CLI   7(R6),1             ANY MORE POS PARMS ?           TGB19
         BH    ACCSUB1             YES - PROCESS THEM             TGB19
         SLR   R3,R3               NO  - INDICATE NO SUBPARMS     TGB19
         B     ACCSUB3             AND PROCESS                    TGB19
*                                                                 TGB19
ACCSUB1  SLR   R3,R3               CLEAR FOR ICM                  TGB19
         ICM   R3,1,0(R9)          GET SUBPARM COUNT OR PARM LENGTHGB19
         BM    ACCSUB2             MINUS - THEN THERE ARE SUBPARMSTGB19
         LA    R3,1                SET SUBPARM DOWN COUNTER TO 1  TGB19
         B     ACCSUB3             DON'T POINT PAST SUBPARM LENGTHTGB19
*                                                                 TGB19
ACCSUB2  N     R3,=X'0000007F'     CLEAR SUBPARM INDICATOR        TGB19
         LA    R15,8               ASSUME ERROR CONDITION         TGB19
         CH    R3,=H'9'            MORE THAN 9 SUBPARMS ?         TGB19
         BH    ACCRET              YES - RETURN WITH ERROR FLAG   TGB19
         LA    R9,1(R9)            POINT PAST SUBPARM COUNT       TGB19
ACCSUB3  SLR   R8,R8               INIT SUBPARM UP COUNTER        TGB19
*                                                                 TGB19
***************************************************************** TGB19
*                   LOOP THROUGH ACCOUNT SUBPARMS                 TGB19
***************************************************************** TGB19
*                                                                 TGB19
ACCSUB4  LA    R8,1(R8)            ADD 1 TO SUBPARM UP COUNT      TGB19
         CH    R8,=H'10'           ARE WE DONE WITH SUBPARMS ?    TGB19
         BH    ACCSUB5             YES                            TGB19
         LTR   R3,R3               DO WE HAVE SUBPARM TO COPY ?   TGB19
         BZ    ACCSUB6             NO - THEN FILL IN IF POSSIBLE  TGB19
         BAS   R14,ACCMOVE         COPY THIS ACCOUNT FIELD        TGB19
         BCTR  R3,0                BUMP DOWN ACCOUNT FIELD COUNT  TGB19
         B     ACCSUB4             AND LOOP TO NEXT ACCOUNT FIELD TGB19
*                                                                 TGB19
***************************************************************** TGB19
*          ADD ACCOUNT SUBPARMS SUPPLIED BY RACF AND XEQ          TGB19
***************************************************************** TGB19
*                                                                 TGB19
ACCSUB6  CH    R8,=H'1'            IS THIS THE ACCOUNT NUMBER ?   TGB19
         BE    ACCSUBA             YES                            TGB19
         CH    R8,=H'2'            IS THIS THE ROOM NUMBER ?      TGB19
         BE    ACCSUBR             YES                            TGB19
         CH    R8,=H'10'           IS THIS THE DATAGROUP NAME     TGB19
         BE    ACCSUBD             YES                            TGB19
         MVI   0(R4),0             SET SUBPARM TO ZERO LENGTH     TGB19
         LA    R4,1(R4)            POINT PAST SUBPARM             TGB19
         B     ACCSUB4             LOOP TO NEXT ACCOUNT FIELD     TGB19
*                                                                 TGB19
ACCSUBA  MVI   0(R4),10            SET LENGTH OF ACCOUNT NUMBER   TGB19
         MVC   1(10,R4),ACCT       MOVE ACCOUNT NUMBER TO TEXT    TGB28
         LA    R4,11(R4)           BUMP PAST SUBPARM              TGB19
         B     ACCSUB4             CONTINUE LOOP                  TGB19
*                                                                 TGB19
ACCSUBR  MVI   0(R4),4             SET LENGTH OF ROOM NUMBER      TGB19
         MVC   1(4,R4),UMAIL       MOVE ROOM NUMBER TO TEXT       TGB28
         LA    R4,5(R4)            BUMP PAST SUBPARM              TGB19
         B     ACCSUB4             CONTINUE LOOP                  TGB19
*                                                                 TGB19
ACCSUBD  MVI   0(R4),16            SET LENGTH OF DATAGROUP        TGB19
         MVC   1(8,R4),DGROUP      MOVE RACF DATAGROUP TO TEXT    TGB28
         MVC   9(8,R4),JCTUSER1    MOVE XEQ DATAGROUP TO TEXT     TGB19
         CLC   1(8,R4),ZEROS       IS RACF ZEROS ?                TGB19
         BNE   ACCSUBD1            NO  - LEAVE AS IS              TGB19
         MVC   1(8,R4),BLANKS      YES - THEN MAKE IT BLANKS      TGB19
ACCSUBD1 CLC   9(8,R4),ZEROS       IS XEQ ZEROS ?                 TGB19
         BNE   ACCSUBD2            NO  - LEAVE AS IS              TGB19
         MVC   9(8,R4),BLANKS      YES - THEN MAKE IT BLANKS      TGB19
ACCSUBD2 LA    R4,17(R4)           BUMP PAST SUBPARM              TGB19
         B     ACCSUB4             CONTINUE LOOP                  TGB19
*                                                                 TGB19
ACCSUBP  MVI   0(R4),20            SET LENGTH OF PGM NAME         TGB19
         MVC   1(20,R4),PNAME      MOVE NAME TO TEXT              TGB28
         LA    R4,21(R4)           BUMP PAST PARM                 TGB19
         B     ACCCOPY             COPY REST OF TEXT              TGB19
*                                                                 TGB19
ACCSUB5  CLI   7(R6),2             IS THERE A PROGRAMMER NAME ?   TGB19
         BNH   ACCSUBP             NO  - THEN ADD IT ALSO         TGB19
         BAS   R14,ACCMOVE         YES - MOVE IT                  TGB19
*                                                                 TGB19
***************************************************************** TGB19
*               COPY THE REMAINDER OF THE ORIGINAL TEXT           TGB19
***************************************************************** TGB19
*                                                                 TGB19
ACCCOPY  LH    R14,0(R6)           GET LENGTH OF OLD TEXT         TGB19
         LA    R14,0(R14,R6)       POINT TO END OF TEXT           TGB19
         SR    R14,R9              GET LENGTH OF TEXT TO COPY     TGB19
         EX    R14,ACCMOVEX        MOVE REMAINDER OF TEXT         TGB19
         AR    R4,R14              POINT TO END OF NEW TEXT       TGB19
         SR    R4,R1               GET NEW LENGTH OF RECORD       TGB19
         STH   R4,0(R1)            SAVE NEW LENGTH                TGB19
         EX    R4,ACCCOPYX         COPY BACK TO TEXT BUFFER       TGB19
*                                                                 TGB19
***************************************************************** TGB19
*                      ACCOUNT RETURN                             TGB19
***************************************************************** TGB19
*                                                                 TGB19
ACCRET0  SLR   R15,R15             CLEAR RETURN CODE              TGB19
ACCRET   LM    R2,R14,RACFSAVE     RESTORE REGISTERS              TGB19
         LTR   R15,R15             SETUP CC CODE                  TGB19
         BR    R14                 RETURN                         TGB19
*                                                                 TGB19
***************************************************************** TGB19
*           SUBROUTINE TO COPY A SINGLE PARM OR SUBPARM           TGB19
***************************************************************** TGB19
*                                                                 TGB19
ACCMOVE  SLR   R15,R15             CLEAR FOR IC                   TGB19
         IC    R15,0(R9)           GET LENGTH OF OLD PARM         TGB19
         EX    R15,ACCMOVEX        MOVE THE PARM TO NEW REC       TGB19
         LA    R9,1(R15,R9)        POINT PAST PARM IN OLD REC     TGB19
         LA    R4,1(R15,R4)        POINT PAST PARM IN NEW REC     TGB19
         BR    R14                 RETURN                         TGB19
*                                                                 TGB19
ACCMOVEX MVC   0(0,R4),0(R9)       ******** EXECUTED ********     TGB19
ACCCOPYX MVC   0(0,R6),0(R1)       ******** EXECUTED ********     TGB19
*                                                                 TGB19
         DROP  R2                  DROP JCT ADDRESS               TGB19
         DROP  R5                  DROP RACF WORK AREA            TGB19
*
         EJECT                                                    TGB09
***************************************************************** TGB09
*                                                                 TGB09
*                         T S O R T N                             TGB09
*                                                                 TGB09
*  IN:  R2 POINTS TO JCT                                          TGB09
*       R3 POINTS TO HCT                                          TGB09
*       R4 IS EOF FLAG FROM JES2                                  TGB09
*       R6 POINTS TO THE INTERNAL TEXT STRING PASSED BY JES2      TGB09
*       R7 IS RETURN ADDRESS                                      TGB09
*                                                                 TGB09
*  OUT: RC = NA                                                   TGB09
*                                                                 TGB09
*  NOTES: 1) THIS SUBROUTINE MODIFYS THE INTERNAL TEXT            TGB09
*         2) THIS ROUTINE GETS ITS OWN STORAGE AREA               TGB09
*         3) ROOM NUMBER AND PROGRAMMER NAME ARE NOT MOVED TO     TGB09
*            JCT UNTIL EOF ON TEXT BECAUSE OF CHECKPOINT PROBLEMS TGB09
*                                                                 TGB09
*    ALL REGISTERS RESTORED BUT R0,R1,R15                         TGB09
*                                                                 TGB09
***************************************************************** TGB09
*                                                                 TGB09
***************************************************************** TGB09
*                OBTAIN THE TSO WORKAREA                          TGB09
***************************************************************** TGB09
*                                                                 TGB09
         USING TEXT,R6                                            TGB09
*                                                                 TGB09
TSORTN   LTR   R4,R4               EOF ON INTERNAL TEXT ?         TGB09
         BNZR  R7                  YES - SORRY NO TEXT PASSED     TGB09
*                                                                 TGB09
         TM    STRINDCS,JOBSTR     IS THIS THE TSO JOB CARD ?     TGB09
         BNOR  R7                  NO  - JUST RETURN              TGB09
*                                                                 TGB09
         GETMAIN RC,LV=TSOWAL      GET TSORTN WORK AREA           TGB09
         LTR   R15,R15             COULD WE GET THE AREA ?        TGB09
         BNZR  R7                  NO  - JUST RETURN OK           TGB09
*                                                                 TGB09
         LR    R9,R1               GET ADDRESS OF WORK AREA       TGB09
         USING TSOWA,R9            USE TSO WORK AREA              TGB09
*                                                                 TGB09
***************************************************************** TGB09
*                CLEAR GETMAINED AREA TO ZEROS                    TGB09
***************************************************************** TGB09
*                                                                 TGB09
         LR    R0,R1          SETUP FOR CLEAR                     TGB09
         L     R1,=A(TSOWAL)  SETUP FOR CLEAR                     TGB09
         SLR   R15,R15        SETUP FOR CLEAR                     TGB09
         MVCL  R0,R14         CLEAR ENTIRE AREA TO ZEROS          TGB09
*                                                                 TGB09
***************************************************************** TGB09
*               CALL RACFINIT TO GET LIDREC                       TGB09
***************************************************************** TGB09
*                                                                 TGB09
         USING JCT,R2              USE JCT                        TGB28
         LA    R5,TSORACF          POINT TO TSO RACF WORK AREA    TGB09
         USING RACFAREA,R5         AND USE RACF AREA              TGB09
         MVC   USERID,JCTJNAME     USERID SAME AS JOB NAME        TGB28
         BAS   R14,RACFINIT        CALL RACFINIT                  TGB09
         BNZ   TSOFREE             ERROR - GO FREE WORKAREA       TGB09
*                                                                 TGB09
***************************************************************** TGB09
*             CALL ACCOUNT TO UPDATE ACCOUNT FIELDS               TGB09
***************************************************************** TGB09
*                                                                 TGB09
         LA    R1,TSORACFW         POINT TO 256 BYTE WORK AREA    TGB09
         BAS   R14,ACCOUNT         CALL ACCOUNT                   TGB09
*                                                                 TGB09
***************************************************************** TGB09
*                   FREE WORK AREA                                TGB09
***************************************************************** TGB09
*                                                                 TGB09
TSOFREE  FREEMAIN RC,LV=TSOWAL,A=(9) FREE THE WORK AREA           TGB09
         BR    R7                  AND RETURN                     TGB09
*                                                                 TGB09
         DROP  R9                  DROP TSO WORK AREA             TGB09
         DROP  R5                  DROP RACF AREA                 TGB09
         DROP  R6                  DROP TEXT                      TGB09
         DROP  R2                  DROP JCT                       TGB28
*
         AIF    ('&TRACE' NE 'YES').NOLAB3                        TGB07
***************************************************************** TGB07
*                      LABEL ROUTINE ENTRY                        TGB07
***************************************************************** TGB07
*                                                                 TGB07
         USING WORKAREA,R13         USE MAIN WORK AREA            TGB07
LABELRT  DS    0H                                                 TGB07
         ENTRY LABELRT                                            TGB07
         USING LABELRT,R15          SET ADDRESSABILTY             TGB07
         MVC   LABELWTA,LABELWT     MOVE WTO TO WORK AREA         TGB07
         MVC   LABELWTA+17(8),0(R2) MOVE LABEL NAME TO WTO LIST   TGB07
         XWTO  LABELWTA,LABELWTL    ISSUE THE WTO                 TGB07
         LA    R2,8(R2)             SET RETURN ADDRESS            TGB07
         BR    R2                   AND RETURN                    TGB07
         DROP  R15                                                TGB07
LABELWT  WTO   '$EXIT 6 - AT XXXXXXXX',ROUTCDE=(11),DESC=(6),MF=L TGB07
LABELWTL EQU   *-LABELWT                                          TGB07
         DROP  R13                  DROP MAIN WORK AREA           TGB07
*                                                                 TGB07
.NOLAB3  ANOP                                                     TGB07
*                                                                 TGB07
         TITLE 'JES2 EXIT 6 - CONSTANTS'
**********************************************************************
**********************************************************************
**********************************************************************
***
***
***
***
***                       C O N S T A N T S
***
***
***
***
**********************************************************************
**********************************************************************
**********************************************************************
         EJECT
**********************************************************************
*                         WTO MESSAGES
**********************************************************************
*
         $MID  960
WTO960   WTO   '&MID.JOB TERMINATED BY STANDARDS ENFORCEMENT EXIT',    X
               ROUTCDE=(2),DESC=(4),MF=L
LWTO960  EQU   *-WTO960
*
         $MID  961
WTO961   WTO   '&MID.**** UNUSED MESSAGE ****                          X
                  ',ROUTCDE=(2),DESC=(4),MF=L
LWTO961  EQU   *-WTO961
*
         $MID  962
WTO962   WTO   '&MID.EX6TABLE LOAD ERROR. DEFAULTS OF ''FGHKOPQW'' WILLX
                BE USED',ROUTCDE=(2),DESC=(4),MF=L
LWTO962  EQU   *-WTO962
*
         $MID  963
WTO963   WTO   '&MID.PUT TO JOB MESSAGE DATA SET FAILED',              X
               ROUTCDE=(2),DESC=(4),MF=L
LWTO963  EQU   *-WTO963
*
         $MID  964
WTO964   WTO   '&MID.MAXIMUM ENTRIES IN INTERNAL TABLE EXCEEDED',      X
               ROUTCDE=(2),DESC=(4),MF=L
LWTO964  EQU   *-WTO964
*
         $MID  965
WTO965   WTO   '&MID.DATAGROUP LOOKUP FAILURE - DEFAULT TABLE WILL BE UX
               SED',ROUTCDE=(2),DESC=(4),MF=L
LWTO965  EQU   *-WTO965
*
SETMSGC  WTO   '$HASP103 XXXXXXXX                                      X
                     ',ROUTCDE=(5),MF=L                           TGB45
SETMSGCL EQU   *-SETMSGC                                          TGB45
*                                                                 TGB45
SLSREQC  SLSXREQ MF=L                                             TGB45
SLSREQCL EQU   *-SLSREQC                                          TGB45
*                                                                 TGB45
         EJECT
**********************************************************************
*                           LITERALS
**********************************************************************
*
         LTORG
*
         EJECT
**********************************************************************
*                      TABLES USED BY EXIT
**********************************************************************
*
**********************************************************************
*        FORMAT OF TABLE IS AS FOLLOWS
*        1)  A 1 BYTE UNIT ATTRIBUTE TYPE
*            X'00'  UNIMPORTANT DEVICE TYPE
*            X'02'  TAPE DEVICE
*            X'04'  PRIVATE MOUNT DISK DEVICE
*            X'08'  VIO
*            X'40'  OTHER THAN TAPE
*        2)  A 1 BYTE MACHINE LENGTH OF ENTRY
*        3)  AN 8 BYTE FIELD CONTAINING THE DEVICE NAME LEFT JUSTIFIED
**********************************************************************
*
DEVTABLE DS    0H              DEVICE NAME TABLE
         DC    X'02',X'03',CL8'TAPE'     TAPE
         DC    X'02',X'04',CL8'TAPE9'    TAPE
         DC    X'02',X'04',CL8'TAPED'    TAPE
         DC    X'02',X'04',CL8'TAPEK'    TAPE                     TGB33
         DC    X'02',X'04',CL8'TAPEKR'   TAPE                     TGB42
         DC    X'02',X'04',CL8'TAPE9R'   TAPE                     TGB42
         DC    X'02',X'03',CL8'3400'     TAPE
         DC    X'02',X'03',CL8'3480'     TAPE                     TGB28
         DC    X'40',9X'00'    END OF TABLE
*
***************************************************************** TGB23
*        DEFAULT CLASS TABLE IF EX4TABLE CANNOT BE LOADED         TGB23
***************************************************************** TGB23
*                                                                 TGB23
* NOTE: IF YOU CHANGE THIS TABLE, ALSO CHANGE MESSAGE 'WTO962'    TGB23
*                                                                 TGB23
***************************************************************** TGB23
*                                                                 TGB23
DEFTABLE DC    C'FGHKOPQW',X'FF'                                  TGB23
*
         EJECT
**********************************************************************
*                     MISCELLANEOUS CONSTANTS
**********************************************************************
*
ZEROS    DC    XL16'0'        16 BYTES OF BINARY ZEROS
BLANKS   DC    44C' '         CONSTANT STRING OF BLANKS
EDMASK   DC    X'402020202120' EDIT MASK FOR MESSAGES
MAXENTS  DC    Y(SUBTLEN/ENTLEN) MAX ENTRIES IN EXIT6 TABLE
EX6TABLE DC    CL8'EX6TABLE'  EXIT 6 TABLE NAME
CLASNAME DC    X'8',C'FACILITY' RACF RESOURCE CLASS NAME          TGB28
*
GETLEN   DC    A(GETSIZE)     SIZE OF ENTIRE GETMAIN AREA
*
**********************************************************************
*                         LIST MACROS
**********************************************************************
*
ESTAE    ESTAE STAEXIT,CT,XCTL=NO,PURGE=NONE,ASYNCH=NO,RECORD=YES,     X
               TERM=NO,MF=L
*
INITCON  RACINIT ENVIR=CREATE,PASSCHK=NO,MF=L                     TGB28
DELECON  RACINIT ENVIR=DELETE,MF=L                                TGB28
CHEKCON  RACROUTE REQUEST=AUTH,RELEASE=1.8,MSGSUPP=YES,MF=L       TGB28
*
         AIF   ('&TRACE' NE 'YES').NOLAB1                         TGB07
***************************************************************** TGB07
*                  LABEL MACRO ROUTINE ADDRESS                    TGB07
***************************************************************** TGB07
*                                                                 TGB07
LABELA   DC    V(LABELRT)          ADDRESS OF LABEL ROUTINE ENTRY TGB07
.NOLAB1  ANOP                                                     TGB07
*                                                                 TGB07
***************************************************************** TGB23
*                        DEFAULT CLASS TABLE                      TGB23
***************************************************************** TGB23
*                                                                 TGB23
* NOTE: THIS TABLE SHOULD CHANGE WHENEVER DSECT 'DGTABLE' IS      TGB23
*       CHANGED. MAYBE I CAN GET ASSG TO HAVE AN OPTION TO USE    TGB23
*       THE MACRO TO CREATE THIS DEFAULT TABLE.                   TGB23
*                                                                 TGB23
***************************************************************** TGB23
*                                                                 TGB23
DEFTAB   DC    Y(DEFTABL)                                         TGB23
         DC    CL8'TECDA'                                         TGB23
         DC    CL8' '                                             TGB23
         DC    X'40'                                              TGB23
         DC    CL8'SYSDA'                                         TGB23
         DC    CL40'DEFAULT EXIT6 TABLE'                          TGB23
         DC    CL4'SYSA'                                          TGB23
         DC    CL8'RSMD3'                                         TGB23
         DC    CL6'SYS1'                                          TGB23
         DS    XL8                                                TGB23
         DS    XL1                                                TGB23
         DC    Y(DEFTABC-DEFTAB)                                  TGB23
DEFTABC  DC    F'15',H'0',C'A',X'0'                               TGB23
         DC    F'45',H'0',C'B',X'0'                               TGB23
         DC    F'180',H'0',C'C',X'0'                              TGB23
         DC    F'600',H'0',C'D',X'0'                              TGB23
         DC    X'7FFFFFFF',H'0',C'E',X'0'                         TGB23
         DC    F'15',H'2',C'0',X'0'                               TGB23
         DC    F'45',H'2',C'1',X'0'                               TGB23
         DC    F'180',H'2',C'2',X'0'                              TGB23
         DC    F'300',H'2',C'3',X'0'                              TGB23
         DC    X'7FFFFFFF',H'2',C'4',X'0'                         TGB23
         DC    F'180',X'7FFF',C'5',X'0'                           TGB23
         DC    F'600',X'7FFF',C'6',X'0'                           TGB23
         DC    X'7FFFFFFF',X'7FFF',C'7',X'80'                     TGB23
DEFTABL  EQU   *-DEFTAB                                           TGB23
*                                                                 TGB23
         TITLE 'JES2 EXIT 6 - MESSAGES'
**********************************************************************
*                        NON-ERROR MESSAGES
**********************************************************************
*
MSG0     DC    CL90'SCE100I XXXXXXXX XXXXXXXX TAPES=XXXXX  TIME=(XXXXXXX
               ,XX) REGION=XXXXX'                                 TGB38
MSG1     DC    CL90'SCE101I CLASS SET TO X'
*
HEADER1  DC    CL100' STMT NO. MESSAGE'
HEADER2  DC    CL100'-                '
PREFIX   DS    0CL11          NORMAL MESSAGE PREFIX
         DC    X'402020202120',CL5' '
*
         EJECT
**********************************************************************
*                          ERROR MESSAGES
**********************************************************************
*
*  NOTE: MESSAGES ARE A SEPARATE ENTRY POINT, SINCE PROGRAM IS TOO
*        LARGE ALREADY
*
**********************************************************************
*
MESSAGES DS    0H                                                 TGB08
         ENTRY MESSAGES       MESSAGE TABLE                       TGB08
*
M1       DC    CL90'SCE001I INTERNAL ERROR - INVALID TEXT STATEMENT TYPX
               E DETECTED                             '
M2       DC    CL90'SCE002E JOBNAME, ACCOUNTING INFORMATION, OR PROGRAMX
                MER NAME MISSING ON THE JOB CARD      '
M3       DC    CL90'SCE003I LENGTH OF JOBNAME EXCEEDS MAXIMUM OF 8 CHARX
               ACTERS                                 '
M4       DC    CL90'SCE004E INVALID LENGTH OF THE ACCOUNT NUMBER       X
                                                      '
M5       DC    CL90'SCE005I LENGTH OF PROGRAMMER NAME FIELD ON THE JOB X
               CARD EXCEEDS MAXIMUM OF 20 CHARACTERS  '
M6       DC    CL90'SCE006E PROGRAMMER NAME MISSING FROM JOB CARD      X
                                                      '
M7       DC    CL90'SCE007E ADDRSP=REAL GREATER THAN 256K NOT ALLOWED  X
                                                      '
M8       DC    CL90'SCE008I TIME VALUE IS NOT NUMERIC                  X
                                                      '
M9       DC    CL90'SCE009E MORE THAN 9 ACCOUNT FIELD SUB PARAMETERS SPX
               ECIFIED ON THE JOB CARD                '
M10      DC    CL90'SCE010E USERID XXXXXXX UNAUTHORIZED FOR USE OF SUPEX
               RZAP                                   '
M11      DC    CL90'SCE011I LENGTH OF THE STEP NAME ON THE EXECUTE CARDX
                EXCEEDS MAXIMUM OF 8 CHARACTERS       '
M12      DC    CL90'SCE012I LENGTH OF THE PROGRAM NAME ON THE EXECUTE CX
               ARD EXCEEDS MAXIMUM OF 8 CHARACTERS    '
M13      DC    CL90'SCE013I INVALID FORMAT FOR THE REGION PARAMETER ON X
               THE EXECUTE CARD                       '
M14      DC    CL90'SCE014I REGION SIZE ON THE EXECUTE CARD IS NOT NUMEX
               RIC                                    '
M15      DC    CL90'SCE015I INVALID FORMAT FOR THE TIME PARAMETER ON THX
               E EXECUTE CARD                         '
M16      DC    CL90'SCE016E USERID XXXXXXX UNAUTHORIZED FOR USE OF TIMEX
               =1440 ON THE EXECUTE CARD              '
M17      DC    CL90'SCE017E SYSTEM ERROR - RESUBMIT LATER              X
                                                      '
M18      DC    CL90'SCE018E ROOM NUMBER ON THE JOB CARD IS NOT 4 BYTES X
               LONG                                   '
M19      DC    CL90'SCE019E USERID XXXXXXX UNAUTHORIZED FOR USE OF THE X
               DPRTY KEYWORD ON THE EXECUTE CARD      '
M20      DC    CL90'SCE020I LENGTH OF THE DDNAME ON THE DD CARD EXCEEDSX
                MAXIMUM OF 8 CHARACTERS               '
M21      DC    CL90'SCE021I INVALID FORMAT FOR THE DSNAME PARAMETER ON X
               THE DD CARD                            '
M22      DC    CL90'SCE022I LENGTH OF THE DSNAME ON THE DD CARD EXCEEDSX
                MAXIMUM OF 44 CHARACTERS              '
M23      DC    CL90'SCE023I LENGTH OF GDG NAME ON THE DD CARD EXCEEDES X
               35 CHARACTERS                          '
M24      DC    CL90'SCE024I INVALID FORMAT FOR THE UNIT PARAMETER ON THX
               E DD CARD                              '
M25      DC    CL90'SCE025I UNIT COUNT WITHIN THE UNIT PARAMETER ON THEX
                DD CARD IS NOT NUMERIC                '
M26      DC    CL90'SCE026I INVALID FORMAT FOR THE VOLUME PARAMETER ON X
               THE DD CARD                            '
M27      DC    CL90'SCE027I VOLUME COUNT WITHIN THE VOLUME PARAMETER ONX
                THE DD CARD IS NOT NUMERIC            '
M28      DC    CL90'SCE028I LENGTH OF THE VOLSER PARAMETER(S) ON THE DDX
                CARD EXCEEDS MAXIMUM OF 6 CHARACTERS  '
M29      DC    CL90'SCE029E REGION SIZE ON THE JOB CARD IS NOT NUMERIC X
                                                      '
M30      DC    CL90'SCE030I INTERNAL ERROR - LENGTH OF THE INTERNAL TEXX
               T OF AN EXECUTE CARD EXCEEDS 512 CHARS '
M31      DC    CL90'SCE031I LENGTH OF THE PROC STEP NAME ON THE EXECUTEX
                CARD EXCEEDS MAXIMUM OF 8 CHARACTERS  '
M32      DC    CL90'SCE032I INVALID FORMAT FOR THE REFERBACK SUBPARAMETX
               ER ON THE DD CARD                      '
M33      DC    CL90'SCE033E CATALOG FOR THIS DATASET IS NOT MOUNTED ON X
               THIS SYSTEM                            '
M34      DC    CL90'SCE034I THE LENGTH OF THE DSNAME ON A VOLUME REFERBX
               ACK EXCEEDS A MAXIMUM OF 44 CHARACTERS '
M35      DC    CL90'SCE035E THE REQUIRED ACCOUNTING FIELD ON THE JOB CAX
               RD WAS NOT SPECIFIED                   '
M36      DC    CL90'SCE036E ACCOUNT NUMBER IS NOT ALPHANUMERIC         X
                                                      '
M37      DC    CL90'SCE037E ROOM NUMBER ON JOB CARD IS NOT ALPHANUMERICX
                                                      '
M38      DC    CL90'SCE038W USERID XXXXXXX UNAUTHORIZED FOR USE OF A PRX
               ODUCTION JOBCLASS - CLASS=X IGNORED    '
M39      DC    CL90'SCE039E USERID XXXXXXX UNAUTHORIZED FOR USE OF A PRX
               ODUCTION MESSAGE CLASS ON JOB CARD     '
M40      DC    CL90'SCE040E USERID XXXXXXX UNAUTHORIZED FOR USE OF TIMEX
               =1440 ON THE JOB CARD                           '
M41      DC    CL90'SCE041E USERID XXXXXXX UNAUTHORIZED FOR USE OF DATAX
               GROUP NAME SPECIFIED ON /*XEQ CARD     '
M42      DC    CL90'SCE042E MORE THAN 2 POSITIONAL PARAMETERS ON THE JOX
               B CARD                                 '
M43      DC    CL90'SCE043E USERID XXXXXXX UNAUTHORIZED FOR USE OF A JOX
               BCAT DD STATEMENT                       '
M44      DC    CL90'SCE044E USERID XXXXXXX UNAUTHORIZED FOR USE OF A PRX
               ODUCTION SYSOUT CLASS                   '
M45      DC    CL90'SCE045E USERID XXXXXXX UNAUTHORIZED FOR A RETENTIONX
                PERIOD OF OVER 120 DAYS                '
M46      DC    CL90'SCE046E USERID XXXXXXX UNAUTHORIZED FOR AN EXPIRATIX
               ON DATE OF OVER 120 DAYS                '
M47      DC    CL90'SCE047E USERID XXXXXXX UNAUTHORIZED FOR USE OF A STX
               EPLIB DD STATEMENT                      '
M48      DC    CL90'SCE048E USERID XXXXXXX - RACF RACINIT ERROR - XXXXXX
               XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     '          TGB28
M49      DC    CL90'SCE049E TIME PARAMETER IS TOO MANY CHARACTERS.     X
                                                       '
M50      DC    CL90'SCE050E USERID XXXXXXX UNAUTHORIZED FOR USE OF A PRX
               ODUCTION SYSOUT CLASS                   '
M51      DC    CL90'SCE051E TIME VALUE ON THE EXECUTE CARD IS NOT NUMERX
               IC                                      '
M52      DC    CL90'SCE052E SYSOUT CLASS CHARACTER IS NOT ALPHANUMERIC X
                                                       '          TGB01
M53      DC    CL90'SCE053E USERID XXXXXXX - **** UNUSED MESSAGE ****  X
                                                       '          TGB03
M54      DC    CL90'SCE054E USERID XXXXXXX UNAUTHORIZED FOR USE OF UNITX
               =TAPEK                                  '          TGB33
M55      DC    CL90'SCE054E USERID XXXXXXX UNAUTHORIZED FOR USE OF UNITX
               =TAPE9R OR UNIT=TAPEKR                  '          TGB42
*                                                                 TGB38
RACFMSGS CSECT                                                    TGB38
         DC    CL40'UNKNOWN ERROR FROM RACF'                      TGB38
         DC    CL40'USERID PROFILE NOT DEFINED'                   TGB38
         DC    CL40'PASSWORD IS NOT AUTHORIZED'                   TGB38
         DC    CL40'PASSWORD HAS EXPIRED'                         TGB38
         DC    CL40'NEW PASSWORD IS INVALID'                      TGB38
         DC    CL40'USER IS NOT DEFINED TO GROUP'                 TGB38
         DC    CL40'FAILED BY INSTALLATION EXIT'                  TGB38
         DC    CL40'USER ACCESS HAS BEEN REVOKED'                 TGB38
         DC    CL40'RACF IS NOT ACTIVE'                           TGB38
         DC    CL40'USER ACCESS HAS BEEN REVOKED'                 TGB38
         DC    CL40'GROUP ACCESS HAS BEEN REVOKED'                TGB38
*                                                                 TGB38
         TITLE 'JES2 EXIT 6 - END OF EXIT 6 CSECT'
**********************************************************************
*                   END OF EXIT6 CSECT
**********************************************************************
*
         $MODEND
*
         TITLE 'JES2 EXIT 6 - DSECTS'
**********************************************************************
**********************************************************************
**********************************************************************
***
***
***
***
***                          D S E C T S
***
***
***
***
**********************************************************************
**********************************************************************
**********************************************************************
         EJECT
**********************************************************************
*                   WORKAREA FOR JOBS
**********************************************************************
*
WORKAREA DSECT
*
**********************************************************************
*                           SAVE AREAS
**********************************************************************
*
SAVEAREA DS    18F            NEW SAVE AREA
SAVEREGS DS    18F            ROUTINE REGISTER SAVE AREA
STAEREGS DS    18F            REGISTERS FOR ESTAE RECOVERY
STAESAVE DS    18F            SAVE AREA FOR ESTAE ROUTINE
PUTSAVE  DS    19F            PUT SAVE AREA
CATSAVE  DS    3F             CATLOC SAVE AREA                    TGB10
*
**********************************************************************
*                 POINTERS TO EXTENDED WORK AREAS
**********************************************************************
*
RACFWORK DS    F              ADDRESS OF RACF WORK AREA
INDXTABL DS    F              ADDRESS OF INDEX TABLE              TGB10
SUBTABLE DS    F              ADDRESS OF AREA FOR JCL STMT TABLE
SETTABLE DS    F              ADDRESS OF AREA FOR SETUP VOL LIST  TGB48
*
**********************************************************************
*                           ADDRESSES
**********************************************************************
*
EXCPTAB  DS    F              ADDRESS OF EXCEPTION TABLE (EX6TABLE)
SLSXCAL  DS    F              ADDRESS OF HSC LOOKUP ROUTINE       TGB45
*
JCTADDR  DS    F              ADDRESS OF JCT
HCTADDR  DS    F              ADDRESS OF HCT
DTEADDR  DS    F              ADDRESS OF DTE
*
RETRY    DS    F              ADDRESS OF STAERTRY
TEXTSTAR DS    F              ADDRESS OF INTERNAL TEXT
*
***************************************************************** TGB23
*                     DGN LOOKUP FIELDS                           TGB23
***************************************************************** TGB23
*                                                                 TGB23
DGNNAME  DS    CL8            DATAGROUP NAME LOOKUP AREA          TGB23
DGNLEN   DS    H              LENGTH OF RETURN AREA               TGB23
*                                                                 TGB23
DGNPARM  DS    0F             PARMLIST FOR DGN LOOKUP             TGB23
         DS    A              POINTER TO DGNNAME                  TGB23
DGNRETN  DS    A              POINTER TO RETURN AREA              TGB23
         DS    A              POINTER TO DGNLEN                   TGB23
DGNWORK  DS    A              POINTER TO WORK AREA FOR SCEDGLKP   TGB23
         DS    A              RESERVED                            TGB23
*
**********************************************************************
*                           MISCELLANEOUS
**********************************************************************
*
NOT      EQU   X'FF'          GENERAL 'NOT' FOR FLAGS
*
DOUBLE   DS    D              DOUBLE WORD FOR PACK & CVB
FIRSTENT DS    F              SAVE AREA FOR FIRST SAVE TABLE ENTRY
LASTENT  DS    F              SAVE AREA FOR LAST SAVE TABLE ENTRY
LASTEXEC DS    F              ADDR OF LAST EXEC TABLE ENTRY
PROCTEXT DS    F              ADDR OF SAVED KEYWORD TEXT FROM PROC STMT
RETCODE  DS    F              SAVE AREA FOR RETURN CODE
*
TAPECNT  DS    H              COUNT OF TAPE UNITS USED IN STEP
PRIVCNT  DS    H              COUNT OF PRIV UNITS USED IN STEP
ENTCOUNT DS    H              NUMBER OF ACTIVE ENTRIES IN TABLE
*
UNITCOUN DS    X              COUNT OF UNITS FOR THIS DD
PROCIND  DS    X              PROCESS PROCEDURE TEXT INDICATOR
*
SAVEPROC DS    CL8            STEPNAME WHICH CALLS PROC
PDDATE   DS    PL3            3 BYTE AREA FOR PD DATE FROM TIME MACRO
*
JOBIND   DS    X              JOB RELATED INDICATORS
JOBLIB   EQU   X'01'          JOB HAD A JOBLIB STMT
JOBFAIL  EQU   X'02'          JOB FAILED EXIT TESTING
JOBADDR  EQU   X'04'          JOB SPECIFIED ADDRSP=REAL ON JOB CARD
JOBT1440 EQU   X'08'          JOB SPECIFIED TIME=1440
EXADDR   EQU   X'10'          JOB SPECIFIEC ADDRSP=REAL ON EXEC CARD
JOBPROD  EQU   X'20'          JOB IS A PRODUCTION JOB
EXEC1440 EQU   X'40'          TIME=1440 SPECIFIED ON EXEC CARD
JOBOPER  EQU   X'80'          JOB IS A OPERATIONS JOB
*
JOBIND2  DS    X              JOB RELATED INDICATORS
PGM      EQU   X'01'          JOB SPECIFIED SPECIAL PROGRAM NAME
AUTOHOLD EQU   X'02'          SET IF JOB HELD BY AUTOMATIC SETUP
*
DISPIND  DS    X              DD ENTRY DISPOSITION
NEW      EQU   X'01'          DISP=NEW
OLD      EQU   X'02'          DISP=OLD
SHR      EQU   X'04'          DISP=SHR
MOD      EQU   X'08'          DISP=MOD
CATLG    EQU   X'10'          STEP COMPLETION DISP=CATLG
PASS     EQU   X'20'          STEP COMPLETION DISP=PASS
KEEP     EQU   X'40'          STEP COMPLETION DISP=KEEP
DELETE   EQU   X'80'          STEP COMPLETION DISP=DELETE
*
DISPIND1 DS    X              DD ENTRY DISPOSITION
UNCATLG  EQU   X'01'          STEP COMPLETION DISP=UNCATLG
*
UNITIND  DS    X              DD ENTRY UNIT TYPE
TAPE     EQU   X'02'          UNIT USED WAS A TAPE
PRIV     EQU   X'04'          UNIT USED WAS A PRIV DISK PACK
VIO      EQU   X'08'          UNIT WAS VIO
AFF      EQU   X'10'          UNIT WAS DETERMINED BY AFF
UNITGDG  EQU   X'20'          UNIT TYPE(S) FROM GDG PROCESSING
UNITONDD EQU   X'40'          UNIT SPECIFIED ON DD, BUT WASN'T TAPE
UNITFND  EQU   X'80'          UNIT TYPE HAS BEEN FOUND
*
JACCT    DS    CL14           ACCOUNT NUMBER (1ST ACCT INFO FIELD)
*
TENTRY   DS    0CL53          TEMPORARY DD TEXT TABLE ENTRY
TDDN     DS    CL8            TEMP DDNAME
TTYPE    DS    C              TEMP UNIT TYPE
TDSN     DS    CL44           TEMP DSN (FULL)
*
TVOLSER  DS    CL6            TEMP 1ST VOLSER OF DATA SET
LDSN     DS    CL44           DSNAME USED BY LOCATE
HLINDEX  DS    CL44           HI LEVEL INDEX FOR CATALOG LOCATE
HLI      DS    CL8            HI LEVEL SAVE AREA                  TGB10
SAVEIND  DS    X              TEMPORARY SAVE AREA FOR JOBIND      TGB36
*
REFERBCK DS    0CL25          REFERBACK WORK AREA
REFJSTEP DS    CL8            REFERBACK JOBSTEP NAME
REFPSTEP DS    CL8            REFERBACK PROCSTEP NAME
REFDDN   DS    CL8            REFERBACK DDNAME
REFUNIT  DS    C              REFERBACK PREV UNIT TYPE
REFDSN   DS    CL44           REFERBACK DSN
REFVOL   DS    CL6            REFERBACK PREF DD 1ST VOLSER
*
VOLCNT   DS    XL1            VOLUME COUNT FROM UNIT=
SERCNT   DS    XL1            SERIAL COUNT FROM VOL=SER=
ADDCOUNT DS    XL1            WILL CONTAIN # OF UNITS FOR DD
RECURS   DS    CL1            RECURSIVE ABEND INDICATOR
REGION   DS    H              REGION SIZE FROM JOB CARD
*
CARDNO   DS    F              CARD NUMBER FOR MSG ROUTINE
MSGCOUNT DS    F              MESSAGE COUNT FOR MSG ROUTINE
OUTRPL   DS    F              ADDR OF OUTPUT RPL
OUTACB   DS    F              ADDR OF JOB MESSAGE DATASET ACB
PARMADDR DS    F              ADDR OF START OF CURRENT TEXT ENTRY
*
MAXTAPE  DS    H              MAX TAPES PER STEP USED
MAXPRIV  DS    H              MAX PRIVS PER STEP USED
MAXTOTAL DS    H              MAX TOTAL DEVICES PER STEP USED
MAXREGN  DS    H              MAX STEP REGION SIZE
MAXTIME  DS    F              MAXIMUM CPU TIME IN SECONDS
EXECTIME DS    F              CPU TIME FROM EXECUTE CARD
MAXEXEC  DS    F              MAXIMUM STEP CPU TIME IN SECONDS
*
RESOURCE DS    XL2            JES2 RESOURCES
*              RESOURCE - BYTE ZERO(0)
TESTING  EQU   X'80'          JES2 'TESTING' RESOURCE
PROD     EQU   X'40'          JES2 'PROD'  RESOURCE
TAPES    EQU   X'20'          JES2 'TAPES' RESOURCE
USERPACK EQU   X'08'          JES2 'USERPACK' RESOURCE
P1401    EQU   X'02'          JES2 '1401' RESOURCE
*              RESOURCE - BYTE ONE(1)
PCICS    EQU   X'80'                   JES2 'CICS' RESOURCE
P7074    EQU   X'40'                   JES2 '7074' RESOURCE
PXMIT    EQU   X'20'                   JES2 'XMIT'/'COMTEN' RESOURCE
LONGJOB  EQU   X'08'                   JES2 'LONGJOB' RESOURCE
DEDICATE EQU   X'04'                   JES2 'DEDICATE' RESOURCE
*
CLASSFLD DS    C              CLASS AS DETERMINED FROM TABLE
INCLASS  DS    C              CLASS FROM JOB TEXT RECORD
JMSGCLAS DS    C              MESSAGE CLASS FROM JOB CARD
DEFDPRTY DS    XL2            MAX DPRTY VALUE ALLOWED AFTER AUTH CHECK
*
POINTER  DS    F
CODAREA  DS    CL256
*
SETMSG   DS    CL(SETMSGCL)                                       TGB45
SLSREQ   DS    CL(SLSREQCL)                                       TGB45
SETJNAME DS    CL8                                                TGB45
*                                                                 TGB45
         AIF   ('&TRACE' NE 'YES').NOLAB2                         TGB07
***************************************************************** TGB07
*                     LABEL MACRO WORK AREA                       TGB07
***************************************************************** TGB07
*                                                                 TGB07
LABELSV  DS    4F'0'               LABEL ROUTINE SAVE AREA        TGB07
LABELWTA DS    CL(LABELWTL)        WTO WORK AREA                  TGB07
.NOLAB2  ANOP                                                     TGB07
*
***************************************************************** TGB17
*                  SYSOUT LOOK-ASIDE TABLE                        TGB17
***************************************************************** TGB17
*                                                                 TGB17
SYSTABLE DS    CL(57)         TABLE LENGTH = X'F9'-C'C1'          TGB17
*                                                                 TGB17
**********************************************************************
*                           CAMLIST
**********************************************************************
*
         DS    0D
CAMLST   CAMLST NAME,TDSN,,LOCAREA LOCATE PARAM AREA
*
**********************************************************************
*                         LOCATE AREA
**********************************************************************
*
         DS    0D
LOCAREA  DS    0CL266         LOCATE CAMLST WORK AREA
CAMLCNT  DS    H              VOLUMES IN LIST
CAMLUNIT DS    0CL4           UNIT TYPE FOR 1ST VOLUME
UCBTYP1  DS    CL1            UCB TYPE BYTE 1
UCBTYP2  DS    CL1            UCB TYPE BYTE 2
UCBTYP3  DS    CL1            UCB TYPE BYTE 3
UCBTYP4  DS    CL1            UCB TYPE BYTE 4
CAMVOL   DS    CL6            1ST VOLSER IN DATA SET
         DS    CL254          REST OF WORK AREA
*
**********************************************************************
*         PARMLIST AND WORKAREA FOR UCBSEARCH ROUTINE
**********************************************************************
*
PARMLUCB DS     3F             PARMLIST MAPPING
         ORG   PARMLUCB
PARMWA   DS    F              ADDRESS OF 100 BYTE WORKAREA
PARMDEVT DS    F              ADDR OF BYTE FOR DEV TYPE SEARCH
PARMUCB  DS    F              ADDR OF WORD TO CONTAIN UCBADDR
*
DEVCLASS DS    CL1            DEVICE CLASS TO BE SEARCHED
UCBADDR  DS    F              ADDRESS OF THE UCB
*
         DS    0D
UCBWORK  DS    CL100          IOSVSUCB WORKAREA
*
**********************************************************************
*                     STEP MESSAGE WORK AREA
**********************************************************************
*
         DS    CL1            EDIT FILL CHAR FOR MSG PREFIX
STEPMSG  DS    0CL100         STEP RESOURCE MESSAGE
         DS    CL10           MESSAGE PREFIX
STEPM    DC    CL90' '        MESSAGE AREA                        TGB38
NUMBER   DC    CL7' ',C' '    NUMBER CONVERSION WORK AREA         TGB38
*
**********************************************************************
*                       JOB MESSAGE WORK AREA
**********************************************************************
*
         DS    CL1            EDIT FILL CHAR FOR MSG PREFIX
JOBMSG   DS    0CL100         JOB CLASS MESSAGE
         DS    CL10           MESSAGE PREFIX
JOBM     DC    CL90'SCE000I CLASS SET TO X                             X
                                                      '
**********************************************************************
*                      ERROR MESSAGE WORK AREA
**********************************************************************
*
MSGPREF  DS    0CL11          ERROR MESSAGE PREFIX
         DS    C              EDIT FILL CHARACTER
BUFFER   DS    0CL100         JES2 MESSAGE AREA
         DS    CL10           REST OF MESSAGE PREFIX
MSGTEXT  DS    CL90           TEXT OF ERROR MESSAGE
BUFFERL  EQU   *-BUFFER       LENGTH OF BUFFER
MSGRPL   DS    19F            SKELETON RPL FOR OUTPUT MSG DATA SET
WTOLIST  DS    CL120          SET WTO LIST FORM
PROCTXT  DS    CL512          SAVE AREA FOR PROC CARD TEXT
*
**********************************************************************
*                          ESTAE LIST
**********************************************************************
*
ESTAEL   ESTAE STAEXIT,CT,XCTL=NO,PURGE=NONE,ASYNCH=NO,RECORD=YES,     X
               TERM=NO,MF=L
LESTAEL  EQU   *-ESTAEL
*
***********************************************************************
***********************************************************************
*                       RACF - SUB WORK AREA
***********************************************************************
***********************************************************************
*
RACFAREA DS    0D
*
RACFSAVE DS    13F            SAVE AREA FOR RACF ROUTINES, ACCOUNT
*
         DS    0D
RACFKEY  DS    CL4            RACF RESOURCE KEY TEMP AREA
RACFNAME DS    CL44           RACF RESOURCE NAME TEMP AREA
*
FLAGS    DS    X              END OF FILE INDICATORS
ENDSTEP  EQU   X'01'          LAST STATEMENT OF STEP IND
FSETUP   EQU   X'02'          SETUP AUTO                          TGB45
*
ACEEADR  DS    A              ACEE ADDRESS                        TGB28
ACCT     DS    CL10           ACCOUNT                             TGB28
UMAIL    DS    CL4            LOCATION                            TGB28
DGROUP   DS    CL8            DATAGROUP                           TGB28
PNAME    DS    CL20           PROGRAMMER NAME                     TGB28
USERIDL  DS    X              USERID IN RACF FORMAT               TGB28
USERID   DS    CL8,C          USERID AND ROOM FOR ENDING SPACE    TGB28
RNAME    DS    CL44           RESOURCE NAME                       TGB28
*                                                                 TGB28
HEXCODE  DS    CL8,C                                              TGB28
RC       DS    F,X                                                TGB28
*                                                                 TGB28
INITLST  RACINIT ENVIR=CREATE,PASSCHK=NO,MF=L                     TGB28
INITLSTL EQU   *-INITLST                                          TGB28
DELELST  RACINIT ENVIR=DELETE,MF=L                                TGB28
DELELSTL EQU   *-DELELST                                          TGB28
CHEKLST  RACROUTE REQUEST=AUTH,RELEASE=1.8,MF=L                   TGB28
CHEKLSTL EQU   *-CHEKLST                                          TGB28
*
RACFMSG  DS    CL40                    MESSAGE AREA               TGB38
RACWORK  DS    CL512
*
RACFARL  EQU    *-RACFAREA      LENGTH OF RACF AREA
*
***********************************************************************
***********************************************************************
*                CATALOG LOOKASIDE - SUB WORK AREA
***********************************************************************
***********************************************************************
*
INDXAREA DS    0D
         DS    CL(INDXTLEN)      INDEX TABLE
*
INDXTLEN EQU   1024              INDEX TABLE LENGTH               TGB10
INDXLEN  EQU   8                 LENGTH OF INDEX ENTRY            TGB10
INDXMAX  EQU   INDXTLEN/INDXLEN  MAX ENTRIES IN TABLE             TGB10
*
***************************************************************** TGB23
***************************************************************** TGB23
*           DATAGROUP LOOKUP AREAS - SUB WORK AREA                TGB23
***************************************************************** TGB23
***************************************************************** TGB23
*                                                                 TGB23
DGNWAREA DS    0D                                                 TGB23
         DS    CL(1024)          SCEDGLKP WORK AREA               TGB23
*                                                                 TGB23
DGNRAREA DS    0D                                                 TGB23
         DS    CL(1024)          SCEDGLKP RETURN AREA             TGB23
DGNRETNL EQU   *-DGNRAREA        LENGTH OF RETURN AREA            TGB23
*                                                                 TGB23
***********************************************************************
***********************************************************************
*                  EXIT 6 TABLE - SUB WORK AREA
***********************************************************************
***********************************************************************
*
SUBAREA  DS    0D
         DS    CL(SUBTLEN)       EXIT 6 TABLE WORK AREA
*
SUBTLEN  EQU   32768             LENGTH OF EXIT 6 TABLE
*
***********************************************************************
***********************************************************************
*              SETUP VOLSER LIST - SUB WORK AREA
***********************************************************************
***********************************************************************
*
SETAREA  DS    0D                                                 TGB48
         DS    CL(SETTLEN)       EXIT 6 TABLE WORK AREA           TGB48
*                                                                 TGB48
SETTLEN  EQU   4096              LENGTH OF SETUP VOLSER LIST      TGB48
*
**********************************************************************
*                        END OF WORKAREA
**********************************************************************
*
GETSIZE  EQU   *-WORKAREA     LENGTH OF WORK AREA
*
         EJECT
**********************************************************************
*
*    THIS TABLE HAS 3 ENTRY TYPES
*        THE 1ST ENTRY IN THE TABLE WILL BE FOR THE JOB CARD
*        THE 2ND ENTRY IN THE TABLE WILL BE FOR THE 1ST EXEC CARD
*        FOLLOWING THE EXEC ENTRY WILL BE ANY DD ENTRIES FOR THE
*        STEP WHICH PASS OR CATLG PRIVATE DISK PACKS OR TAPES
*        THE EXEC CARD ENTRY AND SUBSEQUENT DD ENTRIES WILL BE
*        REPEATED FOR ALL STEPS OF THE JOB.
*
**********************************************************************
*
SAVTABLE DSECT
*
ENTLEN   EQU   40             LENGTH OF EACH TABLE ENTRY
ENTRYTYP DS    C              TABLE ENTRY TYPE
TYPEND   EQU   0              SIGNIFIES END OF TABLE
TYPJOB   EQU   1              SIGNIFIES A JOB ENTRY
TYPEXEC  EQU   2              SIGNIFIES AN EXEC ENTRY
TYPEDD   EQU   4              SIGNIFIES A DD ENTRY
*
**********************************************************************
*                            J O B
**********************************************************************
*
JENTRY   DS    0CL39          JOB STATEMENT ENTRY
JNAME    DS    CL8            JOB NAME
JPGMRNM  DS    CL10           PROGRAMMER NAME (1ST 10 BYTES ONLY)
JACCTNO  DS    CL10           ACCOUNT NUMBER (1ST ACCT INFO FIELD)
JACCTLEN DS    C              ACCOUNT NUMBER LENGTH
         ORG   JENTRY
*
**********************************************************************
*                           E X E C
**********************************************************************
*
EENTRY   DS    0CL39          EXEC STATEMENT ENTRY
EJSTEP   DS    CL8            JOB STEP NAME
EPSTEP   DS    CL8            PROC STEP NAME
EPGMNM   DS    CL8            PGM NAME
ELIBIND  DS    X              STEP FLAGS
ESTEPLIB EQU   X'01'          STEPLIB PRESENT
EJOBLIB  EQU   X'02'          JOBLIB PRESENT
EREGIONK EQU   X'04'          REGION SPECIFIED IN 'K'
EREGIONM EQU   X'08'          REGION SPECIFIED IN 'M'
EREGION  DS    H              STEP REGION SIZE
ETAPES   DS    H              TAPE UNITS USED IN STEP
EPRIVS   DS    H              PRIV UNITS USED IN STEP
ECARDNO  DS    F              CARD NUMBER OF THIS STATEMENT
ETIMES   DS    F              STEP EXEC TIME
         ORG   JENTRY
*
**********************************************************************
*                             D D
**********************************************************************
*
DENTRY   DS    0CL39          DD STATEMENT ENTRY
DDDN     DS    CL8            DDNAME
DTYPE    DS    C              TYPE OF UNIT FOR THIS FILE
DTAPE    EQU   2              UNIT = TAPE
DPRIV    EQU   4              UNIT = PRIV OR PRIV-1
DDSN     DS    CL24           DSN FOR THIS FILE (1ST 24 CHARS ONLY)
DVOLSER  DS    CL6            FIRST VOL/SER OF DATA SET
*                                                                 TGB45
         EJECT                                                    TGB45
***************************************************************** TGB45
*                           HSC DSECT                             TGB45
***************************************************************** TGB45
*                                                                 TGB45
         SLSXREQM                                                 TGB45
*                                                                 TGB45
***********************************************************************
*                           RACF DSECTS
***********************************************************************
*
         SCERACDS                                                 TGB28
         IHAACEE                                                  TGB28
*
**********************************************************************
*                      IOSVSUCB CONTROL BLOCKS
**********************************************************************
*
         PRINT NOGEN
         IEFUCBOB
         PRINT GEN
*
***************************************************************** TGB23
*                  SCE DATAGROUP LOOKUP TABLE                     TGB23
***************************************************************** TGB23
*                                                                 TGB23
         DGTABLE TYPE=DSECT   LOOK IN TED000.MACLIB FOR THIS ONE  RWS01
*                                                                 TGB23
         EJECT
**********************************************************************
*
*                  GETMAINED WORKAREA FOR TSU'S
*
**********************************************************************
*                                                                 TGB09
TSOWA    DSECT                                                    TGB09
TSORACFW DS    CL256          256 BYTE WORK AREA FOR ACCOUNT      TGB09
TSOSAVE  DS    2F             SAVE AREA FOR BASE REGISTERS        TGB09
TSORACF  DS    CL(RACFARL)    RACF WORK AREA FOR TSO              TGB09
TSOWAL   EQU   *-TSOWA        LENGTH OF TSO WORK AREA             TGB09
*                                                                 TGB09
         END
