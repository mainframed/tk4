UTILITY  TITLE 'BUILD UTILITY CONTROL CARDS FROM PARAMETER ENTRIES'
*
*   FOLLOWING MACROS ARE USED IN THIS ASSEMBLY:
*        #XA, XX, $BREAK, $MVCSTR, $LR, $BSM, $SETLEN
*
         MACRO
&L       #XA   &OP,&R=R1
.* XA ADDRESSING MODE UTILITY
         AIF   (T'&L EQ 'O').NOL
&L       DS    0H
.NOL     ANOP
         AIF   ('&OP' EQ 'SET31').SET31 GO INTO 31 BIT MODE
         AIF   ('&OP' EQ 'SET24').SET24 GO INTO 24 BIT MODE
         AIF   ('&OP' EQ 'SETV').SETV   GO INTO MODE PER BIT 0 &R
         AIF   ('&OP' EQ 'VER31').VER31 ABEND IF NOT IN 31 BIT MODE
         AIF   ('&OP' EQ 'VER24').VER24 ABEND IF NOT IN 24 BIT MODE
         AIF   ('&OP' EQ 'MODE').MODE   DETERMINE MODE, SET BIT 0 &R
         MNOTE 8,'XA MACRO - BAD OP: &OP'
         MEXIT
.SET31   ANOP
         L     &R,XA&SYSNDX
         BSM   0,&R
XA&SYSNDX DC   A(*+4+X'80000000')
         MEXIT
.SET24   ANOP
         L     &R,XA&SYSNDX
         BSM   0,&R
XA&SYSNDX DC   A(*+4)
         MEXIT
.SETV    ANOP
         N     &R,=X'80000000'
         O     &R,XA&SYSNDX
         BSM   0,&R
XA&SYSNDX DC   A(*+4)
         MEXIT
.VER24   ANOP
         SR    &R,&R               ZERO BITS 1-31
         BSM   &R,0                SET BIT 0
         LTR   &R,&R
         BZ    XA&SYSNDX+2
XA&SYSNDX DC   H'0'                ABEND - NOT IN EXPECTED MODE
         MEXIT
.VER31   ANOP
         SR    &R,&R               ZERO BITS 1-31
         BSM   &R,0                SET BIT 0
         LTR   &R,&R
         BNZ   XA&SYSNDX+2
XA&SYSNDX DC   H'0'                ABEND - NOT IN EXPECTED MODE
         MEXIT
.MODE    ANOP
XA&SYSNDX DS   0S(XA&SYSNDX)       FOR XREF
         SR    &R,&R               ZERO BITS 1-31
         BSM   &R,0                SET BIT 0
         MEND
         MACRO
&NAME    $SETLEN &STR,       INPUT AREA ADDRESS                        X
               &COUNT        LENGTH OF SCANNED PARAMETER
         LCLA  &TRCNT
         LCLA  &LENGTH
&NAME    DS    0H
         LA    15,&STR       POINT TO INPUT STRING
         SR    &COUNT,&COUNT       ZEROIZE COUNT REGISTER.
IHC&SYSNDX DS  0H
         CLI   0(15),C' '    BLANK HERE ??
         BE    IHC&SYSNDX.A        YES; ALL DONE
         LA    &COUNT,1(,&COUNT)   ADD ONE TO COUNT
         LA    15,1(,15)           BUMP SCAN POINTER
         B     IHC&SYSNDX
IHC&SYSNDX.A DS  0H
         MEND
         MACRO
&LAB     $BSM  &MODE=24
         LCLC  &LL
&LL      SETC  '#BSM&SYSNDX'
         AIF   ('&LAB' EQ '').NOLAB CHECK FOR LABEL
&LAB     DS    0H                  MVS/XA SET MODE MACRO
.NOLAB   ANOP
         AIF   ('&MODE' EQ '31').XAON
         AIF   ('&MODE' EQ '24').XAOFF
         MNOTE 8,'MODE &MODE INVALID'
         MEXIT
.XAON    ANOP                      GO TO 31 BIT MODE
         CNOP  2,4                 FORCE FULL WORD ALIGNMENT
         LA    15,&LL              POINT TO AMODE = 31 CODE
         O     15,&LL-4            TURN ON AMODE = 31 BIT
         BSM   0,15                BRANCH TO AMODE = 31 CODE
         DC    X'80000000'         AMODE = 31 BIT
&LL      DS    0H
         MEXIT
.XAOFF   ANOP
         CNOP  2,4                 FORCE FULL WORD ALIGNMENT
         LA    15,&LL              POINT TO AMODE = 24 CODE
         N     15,&LL-4
         BSM   0,15                BRANCH TO AMODE = 24 CODE
         DC    X'00FFFFFF'
&LL      DS    0H
         MEND
         MACRO -- $BREAK -- SEARCH STRING FOR CHAR(S)
&NAME    $BREAK  &RTN,             BREAK ROUTINE FOR CALL              X
               &STR=(R1),          STRING POINTER                      X
               &LEN=(R2),          LENGTH                              X
               &CHAR=,             CHARS TO STOP AT                    X
               &TYPE=,             TRT TO USE TRT TABLE                X
               &DEF=,              YES TO DEFINE $BREAK ROUTINE        X
               &FAIL=              LABEL FOR FAIL BRANCH
.*
.*
.*       SEARCH STRING FOR THE FIRST OCCURANCE OF ANY CHAR IN &CHAR
.*       AND RETURN POINTER TO THE CHAR, THE LENGTH OF THE STRING
.*       SEARCHED, AND THE REMAINING LENGTH.
.*
.*       RETURN:
.*
.*             R0 -- LEN OF STRING SEARCHED
.*             R1 -- POINTS TO CHAR THAT STOPPED SCAN OR END OF STR
.*             R2 -- LEN OF STRING REMAINING
.*             R3 -- POINTS TO START OF STRING
.*             R4 -- MAY BE CHANGED IF LITERAL IS NOT USED
.*
.*             CC = Z IF CHAR NOT FOUND
.*             CC NOT = Z IF CHAR FOUND
.*
.*
.*       IF &CHAR IS NOT A QUOTED STRING IT MAY EITHER POINT TO
.*       A CHARACTER STRING OR A TRT TABLE.  IF L'&CHAR=256 IT
.*       IS ASSUMED TO BE A TRT TABLE, OR IF &TYPE=TRT IS SPECIFIED.
.*       OTHERWISE IT IS ASSUMED TO BE A STRING OF STOP CHARACTERS.
.*       ITS LENGTH ATTRIBUTE WILL BE USED AS THE COUNT OF CHARACTERS
.*       TO CHECK.
.*
.*
.*       IF &DEF=YES A ROUTINE WITH LABEL &NAME IS EXPANDED WITH A
.*       BR  R14 RETURN.  &RTN MAY NOT BE SPECIFIED.  IF &FAIL IS
.*       SPECIFIED IT WILL OVERRIDE ANY SPECIFICATION IN THE CALL FORM
.*       OF THE MACRO.
.*
.*       IF &RTN IS SPECIFIED A BAL R14,&RTN WILL BE GENERATED.  &FAIL
.*       MAY BE SPECIFIED IF IT WAS NOT SPECIFIED IN &RTN. &CHAR, &STR,
.*       AND &LEN ARE IGNORED.
.*
.*
         LCLA  &N,&KCHAR
         LCLC  &L,&LQ,&CH
         LCLB  &TRT,&CLC
&LQ      SETC  'L'''
         AIF   ('&RTN' NE '').CALL
.NOCALL  AIF   ('&STR' EQ '' OR '&LEN' EQ '' OR '&CHAR' EQ '').E1
         AIF   ('&CHAR'(1,1) EQ '''').NOT
&TRT     SETB  ('&TYPE' EQ 'TRT' OR L'&CHAR EQ 256)
.NOT     ANOP
&CLC     SETB  ('&CHAR'(1,1) NE '''')
&KCHAR   SETA  K'&CHAR
         AIF   (NOT (&TRT OR &CLC OR &KCHAR GT 2)).E2
         AIF   ('&NAME' EQ '').NONM
&NAME    DS    0H
.NONM    $LR   R1,&STR             POINT R1 TO STRING
         $LR   R2,&LEN             SET R2 TO STRING LENGTH
         AIF   (&TRT).TRT
         AIF   ('&CHAR'(1,1) NE '''').CLC
.*
.*       GENERATE CLI'S FOR CHARACTERS
.*
         LR    R3,R1               SAVE START ADDR
&N       SETA  2
&L       SETC  '#$BA&SYSNDX'
.CHKQUOT AIF   ('&CHAR'(&N,2) EQ '''''' OR '&CHAR'(&N,2) EQ '&&').QA
&CH      SETC  '&CHAR'(&N,1)
         AGO   .BE
.QA      ANOP
&CH      SETC  '&CHAR'(&N,2)
&N       SETA  &N+1
.BE      ANOP
&L       CLI   0(R1),C'&CH'
         BE    #$BB&SYSNDX
&N       SETA  &N+1
&L       SETC  ''
         AIF   (&N LT &KCHAR).CHKQUOT
         LA    R1,1(R1)            MOVE TO NEXT CHAR
         BCT   R2,#$BA&SYSNDX      CHECK IF MORE
#$BB&SYSNDX LR R0,R1
         SR    R0,R3               FIND LEN SEARCHED
         LTR   R2,R2               SET CC
         AGO   .TFAIL
.*
.*
.*
.*       GENERATE CLC LOOP FOR STRING
.*
.CLC     LR    R0,R1
#$BA&SYSNDX LA R3,&LQ&CHAR         GET CHAR LENGTH
         LA    R4,&CHAR-1(R3)      POINT TO LAST CHAR
#$BB&SYSNDX CLC 0(1,R1),0(R4)      COMPARE
         BE    #$BC&SYSNDX
         BCTR  R4,0
         BCT   R3,#$BB&SYSNDX      CHECK ALL
         LA    R1,1(R1)            POINT TO NEXT
         BCT   R2,#$BA&SYSNDX
#$BC&SYSNDX LR R3,R0
         LR    R0,R1
         SR    R0,R3               FIND LEN SEARCHED
         LTR   R2,R2               SET CC
         AGO   .TFAIL
.*
.*
.*
.TRT     LR    R3,R1
         LR    R0,R2
         LTR   R2,R2
         BZ    #$BA&SYSNDX
         BCT   R2,*+10
         TRT   0(*-*,R1),&CHAR
         EX    R2,*-6
         BZ    #$BA&SYSNDX
         LR    R2,R0
         LR    R0,R1
         SR    R0,R3
         SR    R2,R0
#$BA&SYSNDX DS 0H
         AGO   .TFAIL
.CALL    AIF   ('&DEF' EQ 'YES' OR '&CHAR' NE '').E3
&NAME    BAL   R14,&RTN
.TFAIL   AIF   ('&FAIL' EQ '').DEFRET
         BZ    &FAIL
.DEFRET  AIF   ('&DEF' NE 'YES').MEXIT
         BR    R14                 RETURN TO CALLER
.MEXIT   MEXIT
.E1      MNOTE 4,'$BREAK -- CHAR NOT SPECIFIED'
         MEXIT
.E2      MNOTE 4,'$BREAK -- CHAR IS NULL STRING'
         MEXIT
.E3      MNOTE 2,'&RTN -- INVALID SPECIFICATION IGNORED'
         AGO   .NOCALL
         MEND
         EJECT
         MACRO -- $MVCSTR -- MOVE STRING SEGMENT
&NAME    $MVCSTR  &TO,             DESTINATION                         X
               &STR=(R3),          STRING POINTER                      X
               &LEN=(R0),          STRING LENGTH                       X
               &MAX=,              MAXIMUM LENGTH TO MOVE              X
               &WKREG=R15          WORK REGISTER
.*
.*
.*       MOVE STRING SEGMENT TO &TO FORM &STR FOR LENGTH &LEN.
.*
.*       IF &MAX IS SPECIFIED ONLY THAT NUMBER OR LESS CHARACTERS
.*       WILL BE MOVED.
.*
         LCLC  &RLEN,&TOR,&OH
&NAME    DS    0H
         AIF   ('&MAX' EQ '').NOMAX
         $LR   &WKREG,&MAX         GET MAX LENGTH
&RLEN    SETC  'R0'
         AIF   ('&LEN'(1,1) NE '(').LR
&RLEN    SETC  '&LEN'(2,K'&LEN-2)
         AGO   .CR
.LR      ANOP
         $LR   R0,&LEN             GET CUR LEN
.CR      CR    &WKREG,&RLEN        CHECK IF GREATER THAN MAX
         BL    *+6                 YES, USE MAX
         LR    &WKREG,&RLEN        USE CURRENT LENGTH
.EXP     BCT   &WKREG,*+10         GET 360 LEN, SKIP MVC
         AIF   ('&STR'(1,1) NE '(').MVC
&OH      SETC  '0'
.MVC     AIF   ('&TO'(1,1) EQ '(').TOR
         MVC   &TO.(*-*),&OH&STR   MOVE STRING
         AGO   .EX
.TOR     ANOP
&TOR     SETC  '&TO'(2,K'&TO-2)
         MVC   0(*-*,&TOR),&OH&STR MOVE STRING
.EX      EX    &WKREG,*-6          DO IT
         MEXIT
.NOMAX   $LR   &WKREG,&LEN
         AGO   .EXP
         MEND
         SPACE 5
         MACRO
&L       $LR   &A,&B
.*********************************************************************
.*       $LR
.*
.*       A   --DESTINATION REGISTER.
.*       B   --INPUT VALUE.
.*
.*********************************************************************
         LCLA  &N                  STRING COUNT.
         LCLC  &R                  REGISTER SYMBOL.
         LCLC  &V                  VALUE DIGITS.
         AIF   (T'&A NE 'O').OKA
         MNOTE 8,'LRM100E DESTINATION REGISTER NOT SPECIFIED'
         MEXIT
.OKA     ANOP
         AIF   (T'&B NE 'O').OKB
         MNOTE 8,'LRM110E VALUE/STRING/REGISTER NOT SPECIFIED'
         MEXIT
.OKB     ANOP
         AIF   ('&B'(1,1) EQ '''').STR
         AIF   ('&B'(1,1) EQ '(').REG
         AIF   (T'&B EQ 'N').LDNUM
.VARBL   ANOP
&L       LA    &A,&B               LOAD VARIABLE ADDRESS.
         MEXIT
.LDNUM   ANOP
         AIF   ('&B'(1,1) EQ '+' OR '&B'(1,1) EQ '-').STRIP
         AIF   (&B EQ 0).CLREG
         AIF   (&B GT 32767).VAL
         AIF   (&B GT 0 AND &B LT 4096).VARBL
.VALH    ANOP
&L       LH    &A,=Y'&B'           LOAD HALFWORD VALUE.
         MEXIT
.STRIP   ANOP
&N       SETA  K'&B-1
         AIF   (&N GT 5).VAL
&V       SETC  '&B'(2,&N)
         AIF   (&V GT 32767).VAL
         AGO   .VALH
.CLREG   ANOP
&L       SLR   &A,&A               VALUE = 0.
         MEXIT
.VAL     ANOP
&L       L     &A,=A'&B'           LOAD FULLWORD VALUE.
         MEXIT
.REG     ANOP
&N       SETA  K'&B-2              COMPUTE NO. OF CHARS. IN STR.
&R       SETC  '&B'(2,&N)          MOVE REGISTER SYMBOL TO VARIABLE.
         AIF   ('&R' EQ '&A').EXIT
         AIF   ('&R' EQ 'R&A' OR 'R&R' EQ '&A').EXIT
&L       LR    &A,&R               MOVE REGISTER TO DESTINATION.
         MEXIT
.STR     ANOP
&L       LA    &A,=C&B             LOAD ADDRESS OF  LITERAL.
.EXIT    ANOP
         MEND
         EJECT
***********************************************************************
*                                                                     *
*  TITLE:        UTILITY -- CONTROL CARD GENERATOR                    *
*                                                                     *
*  PROGRAMMER:   RICK FOCHTMAN                                        *
*                TRAILER TRAIN COMPANY                                *
*                300 S. WACKER DRIVE                                  *
*                CHICAGO, IL                                          *
*                                                                     *
*  THIS IS A MODIFICATION OF AN ORIGINAL PROGRAM BY MIKE EAGER,       *
*          AMERICAN MEDICAL ASSOCIATION, CHICAGO, IL.                 *
*                                                                     *
*  DATE:         13 NOVEMBER 1979                                     *
*                                                                     *
*  CSECT:        UTILITY                                              *
*                                                                     *
*  INPUT:        PARM FIELD:                                          *
*                  FIELD 1 -- PROGRAM NAME                            *
*                  FIELDS 2-11 -- ACTUAL PARAMETERS                   *
*                                                                     *
*                CONTROL (80 BYTE RECORDS)                            *
*                  PROTOTYPE CONTROL CARDS TO BE MODIFIED             *
*                                                                     *
*  OUTPUT:       SYSIN (80 BYTE RECORDS)                              *
*                  CONTROL CARDS MODIFIED WITH ACTUAL PARAMETERS      *
*                                                                     *
*  FUNCTION:     READ CONTROL CARDS FROM 'CONTROL' AND INSPECT        *
*                FOR AMPERSAND FOLLOWED BY CHAR.  SUBSTITUTE          *
*                ACTUAL PARAMETER FROM PARM FIELD USING 2ND PARM      *
*                FOR &0, ETC.  IF A CONTROL CARD REFERENCES A         *
*                NULL ACTUAL PARAMETER IGNORE THE CARD AND GET        *
*                NEXT CARD.  AFTER ALL SUBSTITUTIONS ARE MADE CARD    *
*                IS WRITTEN TO 'SYSIN'.                               *
*                                                                     *
*  SPECIAL SUBSTITUTIONS FOR 370'S RUNNING MVS AND JES2               *
*                &A   SMF SYSTEM IDENTIFIER                           *
*                &B   CPU MODEL NUMBER                                *
*                &C   CPU SERIAL NUMBER                               *
*                &D   CPU VERSION NUMBER                              *
*                &E   RACF USERID, WHERE AVAILABLE                    *
*                &F   RACF GROUP ID, WHERE AVAILABLE                  *
*                &G   JES2 REMOTE NUMBER, IN THE FORM N##R##,         *
*                     WHERE N## IS THE ORIGINATING NJE NODE AND       *
*                     WHERE R## IS THE ORIGINATION RJE STATION        *
*                &H   FIRST WORD OF THE CPU CLOCK, IN HEX             *
*                &I   SECOND WORD OF THE CPU CLOCK, IN HEX            *
*                &J   FIRST SEVEN CHARACTERS OF THE &H VALUE          *
*                &K   LAST CHARACTER OF &H + FIRST SIX OF &I          *
*                     SINCE THE LAST 12 BITS OF THE CPU CLOCK ARE     *
*                     LESS THAN MICROSECOND VALUES, &J&K ARE THE      *
*                     CPU CLOCK TO LESS THAN MICROSECOND PRECISION.   *
*                 &L  VOLSER OF THE VOL1 DD STATEMENT, IF PRESENT     *
*                 &M  VOLSER OF THE VOL2 DD STATEMENT, IF PRESENT     *
*                 &N  VOLSER OF THE VOL3 DD STATEMENT, IF PRESENT     *
*                 &O  VOLSER OF THE VOL4 DD STATEMENT, IF PRESENT     *
*                 &P  VOLSER OF THE VOL5 DD STATEMENT, IF PRESENT     *
*                 &Q  VOLSER OF THE VOL6 DD STATEMENT, IF PRESENT     *
*                 &R  JES2 JOB IDENTIFIER ('JOB12345', E.G.)          *
*                                                                     *
*  LOGIC:        THE PARAMETER FIELD IS SCANNED TO PICK OFF THE       *
*                PROGRAM NAME WHICH IS COPIED INTO 'PGM'.  THE        *
*                REMAINING PARAMETER FIELDS ARE SCANNED AND THE       *
*                STARTING ADDRESS AND LENGTH OF EACH FIELD IS         *
*                PLACED INTO SUCCESSIVE WORDS STARTING WITH           *
*                'PARMINDX'.  'CONTROL' AND 'SYSIN' DATASETS ARE      *
*                OPENED AND VALIDATED.  EACH CARD IS READ FROM        *
*                'CONTROL' AND THE SEQUENCE FIELD (COL 72-80)         *
*                IS COPIED TO AN OUTPUT AREA.  THE FIRST 71 COLS      *
*                ARE SCANNED FOR '&'.  THE CHARACTERS SKIPPED OVER    *
*                ARE COPIED UP TO THE MAXIMUM LENGTH REMAINING IN     *
*                THE OUTPUT AREA.  IF THERE IS NOT ENOUGH ROOM IN THE *
*                OUTPUT AREA THE CARD IS TRUNCATED WITHOUT ANY        *
*                ERROR MESSAGE.  THE DIGIT AFTER THE '&' IS USED TO   *
*                INDEX INTO 'PARMINDX' AND IF THERE IS ENOUGH ROOM    *
*                IN THE OUTPUT AREA, THE ACTUAL PARAMETER IS MOVED    *
*                TO THE NEXT LOCATION IN THE OUTPUT AREA.  THE '&'    *
*                AND DIGIT ARE SKIPPED AND THE SCAN RESUMES.  WHEN    *
*                THE INPUT IS EXHAUSTED, THE REMAINDER OF THE INPUT   *
*                IS COPIED TO THE OUTPUT AND THE CARD OUTPUT TO       *
*                'SYSIN'. IF ANY ACTUAL PARAMETER REFERENCED IN THE   *
*                CONTROL CARD IS OMITTED, THE CARD WILL NOT BE WRITTEN*
*                TO 'SYSIN'. AT EOF ON 'CONTROL' BOTH 'SYSIN' AND     *
*                'CONTROL' ARE CLOSED AND THE PROGRAM REFERENCED IN THE
*                FIRST PARM IS LINKED TO.  IF THE RETURN CODE IS NON- *
*                ZERO THE TIOT ADDRESS IS EXTRACTED AND A MESSAGE     *
*                CONTAINING THE JOBNAME, STEPNAME, AND RETURN CODE    *
*                IS WRITTEN TO THE OPERATOR.  UTILITY THEN RETURNS.   *
*                                                                     *
*  MODIFICATION HISTORY:                                              *
*     1 DECEMBER, 1979 -- CHANGE PARAMETER SCAN TO RECOGNIZE QUOTE    *
*           OR PAREN AND BREAK ON MATCHING QUOTE OR PAREN INSTEAD     *
*           OF AN IMBEDDED COMMA.  LEADING AND TRAILING QUOTES ARE    *
*           DELETED, OPEN AND CLOSE PARENS ARE KEPT AS PART OF        *
*           PARM.  ALSO USE OS SAVE AND RETURN MACROS.                *
*                                                                     *
*     4 MARCH 1991 --- INCLUDE HOOKS TO FETCH NJE/RJE ORIGIN ID;      *
*           ADD THE SPECIAL SUBSTITUTIONS FOR RACF, SYSTEM            *
*           IDENTIFICATION, CPU CLOCK, VOLSERS, TIME AND DATE.        *
*                                                                     *
*  ATTRIBUTES:   SERIALLY REUSABLE, AUTHORIZED                        *
*                                                                     *
*  MACROS USED:  $BREAK, $MVCSTR, XX, OPEN, WTO, ABEND, RETURN,       *
*                PUT, CLOSE, LINK, EXTRACT, DCB.                      *
*                                                                     *
***********************************************************************
         EJECT
         SPACE 5
UTILITY  CSECT
         PRINT ON,NOGEN
         $HASPEQU
         USING UTILITY,R15
         STM   R14,R12,12(R13)     STANDARD LINKAGE
         ST    R13,SAVEAREA+4
         LA    R12,SAVEAREA
         ST    R12,8(R13)
         LR    R13,R12
         LR    R12,R15             ESTABLISH BASE REGISTER
         DROP  R15
         USING UTILITY,R12
         SPACE 5
*
*  PICK UP PROGRAM NAME FROM PARM LIST
*
         L     R1,0(R1)            POINT TO PARM LIST
         LH    R2,0(R1)            PICK UP LENGTH
         LA    R1,2(R1)            POINT TO START OF PARM
         MVC   PGM,=CL8' '         CLEAR PROGRAM NAME
        $BREAK CHAR=',',FAIL=PARMERR  GET PROGRAM NAME
        $MVCSTR PGM                   SET FOR LINK
*
*  SPLIT OUT PARAMETER ENTRIES AND BUILD INDEX
*
         LA    R1,1(R1)            BUMP PAST COMMA
         BCT   R2,*+8              DECR LENGTH
         B     PARMERR             NO PARAMTERS
         XC    PARMINDX(40),PARMINDX  MAKE SERIALLY REUSABLE
         LA    R6,PARMINDX         POINT TO ZEROTH INDEX ENTRY
PARMLP   DS    0H                  PICK OFF PARAMETER
         ST    R1,0(R6)            SAVE PARM ADDRESS
         STC   R2,0(R6)            SAVE LENGTH IF LAST
         CLI   0(R1),C''''         QUOTED STRING?
         BNE   CHKLPRN             NO, SEE IF PAREN
         LA    R1,1(R1)            BUMP PAST QUOTE
         ST    R1,0(R6)            SAVE START POINTER
         BCT   R2,*+8              DECR COUNT
         B     PARMERR             ISOLATED QUOTE
        $BREAK CHAR='''',FAIL=PARMERR   FIND ENDING QUOTE
         B     SETLEN              GO SET STRING LENGTH
*
CHKLPRN  DS    0H
         CLI   0(R1),C'('          LEFT PAREN?
         BNE   BRKNXT              NO, FIND END OF PARM
         ST    R1,0(R6)            SAVE START POINTER
        $BREAK CHAR=')',FAIL=PARMERR   FIND ENDING RT PAREN
         A     R0,=F'1'            INCR COUNT TO INCLUDE PAREN
*
SETLEN   DS    0H
         STC   R0,0(R6)            SAVE LENGTH
         LA    R1,1(R1)            BUMP PAST QUOTE OR PAREN
         BCT   R2,*+8              DECR LENGTH
         B     LPARM               LAST ENTRY
         CLI   0(R1),C','          MUST END WITH COMMA
         BNE   PARMERR             BUT IT DOESN'T
         LA    R1,1(R1)            BUMP PAST COMMA
         BCT   R2,*+8
         B     LPARM               OPEN DATASETS IF COMMA IS LAST CHAR
         LA    R6,4(R6)            POINT TO NEXT ENTRY
         B     PARMLP              GET NEXT PARM
*
BRKNXT   DS    0H
        $BREAK CHAR=',',FAIL=LPARM SCAN FOR COMMA
         STC   R0,0(R6)            SAVE LENGTH OF PARM
         BCT   R2,*+8              COMMA IS LAST CHAR?
         B     LPARM               OPEN DATASETS IF YES
         LA    R1,1(R1)            BUMP OVER COMMA
         LA    R6,4(R6)            POINT TO NEXT INDEX ENTRY
         B     PARMLP              DO NEXT PARM
LPARM    DS    0H                  SET LAST PARM ENTRY
         SPACE 5
***********************************************************************
*        THE FOLLOWING THREE INSTRUCTIONS ARE THE ONLY AUTHORIZED     *
*              CODE IN THIS ROUTINE, OTHER THAN POSSIBLY THE PROGRAM  *
*              NAMED IN THE PARM FIELD.                               *
***********************************************************************
         MODESET MODE=SUP
         STIDP DBLWD               STORE CPU IDENTIFIER
         MODESET MODE=PROB
         UNPK  CPU(5),DBLWD+4(3)
         UNPK  CPUSER(7),DBLWD+1(4)
         UNPK  VERSION(3),DBLWD(2)
         EXTRACT TIOTADDR,'S',FIELDS=(TIOT)  FIND TIOT ADDR
         LA    R2,S12              POINT TO VOLSER AREA
         LA    R1,DDNLIST          AND DDNAME LIST
         LA    R5,6                LOAD ITEM COUNT
SER1     DS    0H
         BAL   R9,GETUCB           GET THE UCB ADDRESS
         LTR   R0,R0               GET AN ANYTHING BACK ??
         BZ    SER2                NOPE ---
         LR    R4,R0               COPY THE UCB ADDRESS
         USING UCBOB,R4            AND BASE ITS DSECT
         TM    UCBTBYT3,UCB3DACC   DASD DEVICE ??
         BZ    SER2                NOPE; SKIP THIS
         L     R15,0(,R2)          LOAD STRING ADDRESS
         MVC   0(6,R15),UCBVOLI    COPY THE VOLSER
         $SETLEN 0(,R15),R14
         STC   R14,0(,R2)
SER2     DS    0H
         LA    R2,4(,R2)           POINT TO NEXT ENTRY
         LA    R1,8(,R1)           POINT TO NEXT ENTRY
         BCT   R5,SER1             AND LOOP ??
*        B     NONODE              UN-COMMENT IF NOT JES2
*---------------------------------------------------------------------*
*---     THE FOLLOWING INSTRUCTIONS ARE ABSOLUTELY DEPENDANT UPON  ---*
*---     THE VARIOUS CONTROL BLOCKS REFERENCED IN THE COMMENTS.    ---*
*---------------------------------------------------------------------*
         #XA   SET31,R=R15
         L     R4,CVTPTR                      LOAD CVT ADDRESS
         L     R4,CVTTCBP-CVT(,R4)            POINT TO TCBBOX
         L     R4,4(,R4)                      POINT TO CURRENT TCB
         L     R4,TCBJSCBB-1-TCB(,R4)         POINT TO CURRENT JSCB
         L     R4,JSCBACT-IEZJSCB(,R4)        POINT TO ACTIVE JSCB
         L     R4,JSCBSSIB-IEZJSCB(,R4)       POINT TO SSIB
         L     R4,SSIBSUSE-SSIB(,R4)          POINT TO SJB
         L     R4,SJBJCT-SJB(,R4)             POINT TO JES2 JCT
         OC    JOBID,JCTJOBID-JCT(R4)         COPY JES2 JOBID
         ICM   R4,15,JCTROUTE-JCT(R4)  INSERT NODE/RMT ID'S
         #XA   SET24,R=R15
*---------------------------------------------------------------------*
*---     END OF JES2-LEVEL DEPENDANT INSTRUCTIONS                  ---*
*---------------------------------------------------------------------*
         SRDL  R4,16               SPLIT THE TWO
         SRL   R5,16               SHIFT RMT NUMBER DOWN
         CVD   R4,CVDWORK          DECIMALIZE NJE NODE ID
         OI    CVDWORK+7,X'0F'     FORCE LAST SIGN POSITIVE
         UNPK  CHAR1,CVDWORK       INSERT THE ZONES
         MVI   CHAR1,C'N'          INSERT THE NJE MARKER
L1       DS    0H
         CLI   CHAR1+1,C'0'        LEADING ZERO ??
         BNE   L2                  NOPE ---
         MVC   CHAR1+1(8),CHAR1+2  SHIFT THE VALUE LEFT 1 POSITION
         B     L1                  AND CONTINUE ---
L2       DS    0H
         LA    R4,CHAR1+1          POINT TO START OF NUMERICS
L3       DS    0H
         CLI   0(R4),C' '          TRAILING BLANK ??
         BE    L4                  YES; ALL DONE
         LA    R4,1(,R4)           NOPE; KEEP LOOKING ---
         B     L3
L4       DS    0H
         LTR   R5,R5               WAS IT RMT 0 ??
         BZ    RMT0                YES; SPECIAL 'FAST' PATH
         CVD   R5,CVDWORK          DECIMALIZE IT
         OI    CVDWORK+7,X'0F'     FORCE LAST SIGN POSITIVE
         UNPK  CHAR2,CVDWORK       INSERT THE ZONES
         MVI   CHAR2,C'R'
L5       DS    0H
         CLI   CHAR2+1,C'0'        LEADING ZERO ??
         BNE   L6                  NOPE
         MVC   CHAR2+1(8),CHAR2+2  CLOBBER A LEADING ZERO
         B     L5                  AND RETRY ---
RMT0     DS    0H
         MVC   CHAR2(8),=CL8'R0'
L6       DS    0H
         MVC   0(8,R4),CHAR2       COMPRESS THEM TOGETHER
         LA    R3,0                LOAD A ZERO VALUE
         LA    R2,CHAR1            LOAD POINTER TO THE RESULT
L7       DS    0H
         CLI   0(R2),C' '          TRAILING BLANK ??
         BE    L8                  YES; ALL DONE
         LA    R3,1(,R3)           INCREMENT COUNT BY ONE
         LA    R2,1(,R2)           INCREMENT POINTER BY ONE
         B     L7                  AND CONTINUE
L8       DS    0H
         STC   R3,CHAR1-1          SAVE THE COUNT VALUE
         L     R10,0(,R10)         LOAD PARM POINTER
         MVC   NJEN,CHAR1-1        COPY TO CALLER'S AREA
NONODE   DS    0H
         L     R1,16               LOAD CVT ADDRESS
         L     R1,196(,R1)         LOAD SMCA ADDRESS
         MVC   SYSTEM,16(R1)       COPY SID TO PARM AREA
         CLI   SYSTEM+3,64
         BH    DOACEE
         MVI   S1,3
         CLI   SYSTEM+2,64
         BH    DOACEE
         MVI   S1,2
         CLI   SYSTEM+1,64
         BH    DOACEE
         MVI   S1,1
DOACEE   DS    0H
         L     R1,X'224'           LOAD ASCB ADDRESS
         L     R1,X'6C'(,R1)       POINT TO ASXB
         L     R1,X'C8'(,R1)       POINT TO ACEE, IF ANY
         LTR   R1,R1               ANY ACEE EXIST ??
         BZ    NOACEE              NOPE ---
         USING ACEE,R1             BASE ITS DSECT
         MVC   USERID,ACEEUSRI     COPY USERID FROM ACEE
         MVC   S5(1),ACEEUSRL      COPY USERID LENGTH FROM ACEE
         MVC   GROUP,ACEEGRPN      COPY GROUP FROM ACEE
         MVC   S6(1),ACEEGRPL      COPY GROUP LENGTH FROM ACEE
         DROP  R1
NOACEE   DS    0H
         STCK  DBLWD               SAVE THE CPU CLOCK VALUE
         UNPK  CLOCK1(9),DBLWD(5)   UNPACK THE FIRST HALF
         UNPK  CLOCK2(9),DBLWD+4(5) AND SECOND HALF
         NC    CLOCK1(16),=16X'0F'  DROP ZONES
         TR    CLOCK1(16),=C'0123456789ABCDEF'
         SPACE 5
OPENDS   DS    0H                  OPEN DATASETS AND CHECK
         OPEN  (CONTROL,INPUT,SYSIN,OUTPUT)
         TM    CONTROL+DCBOFLGS,X'10' OPEN?
         BNO   ABEND               NO, QUIT
         TM    SYSIN+DCBOFLGS,X'10' OPEN?
         BO    LOOP                YES, CONTINUE
ABEND    DS    0H
         WTO   'UNABLE TO OPEN SYSIN OR CONTROL'
         ABEND 100,DUMP
PARMERR  WTO   'UTILITY PARM ERROR'
         ABEND 101,DUMP
         EJECT
*
*  START OF LOOP TO READ CARDS AND SUBSTITUTE PARM ENTRIES FOR
*  VARIABLE SYMBOLS
*
LOOP     DS    0H
         GET   CONTROL             READ CARD
*                                  R1 NOW POINTS TO CARD
         LA    R2,71               SCAN ONLY 71 COLUMNS
         LA    R10,CARDOUT         POINT TO OUTPUT CARD AREA
         LR    R11,R2              COPY ONLY 71 COLUMNS
         MVC   SEQOUT,71(R1)       COPY SEQUENCE FIELD
*
*  SCAN FOR VARIABLE SYMBOLS
*
SCAN     DS    0H
         LR    R6,R2               SAVE REMAINING STRING LENGTH
        $BREAK CHAR='&&',FAIL=NOVAR LOOK FOR VARIABLE STARTING WITH '&'
         LTR   R0,R0               WERE ANY SKIPPED?
         BZ    NOSKIP              NO CHARACTERS JUMPED
        $MVCSTR (R10),MAX=(R11)    COPY (NOT TOO MUCH)
         SR    R11,R0              FIND REMAINING OUTPUT LENGTH
         BNP   OVERFLOW            OVERFLOW IF TOO MUCH
         AR    R10,R0              BUMP OUTPUT POINTER
NOSKIP   DS    0H
         BCT   R2,*+8              DECR LENGTH OF INPUT
         B     OVERFLOW            OVERFLOW IF ZERO
         SLR   R6,R6               CLEAR WORK REGS
         LR    R7,R6
         IC    R6,1(R1)            PICK UP DIGIT
         IC    R6,TTAB(R6)         TRANSLATE TO INTERNAL VALUE
*        N     R6,=F'15'           CONVERT TO BINARY
         SLL   R6,2                CONVERT TO FULL WORD POINTER
         IC    R7,PARMINDX(R6)     PICK UP PARM LENGTH
         LTR   R7,R7               PARM OMITTED?
         BZ    CLEARLN             YES, SKIP THIS CARD
         CR    R7,R11              ENOUGH ROOM FOR PARM
         BH    OVERFLOW            NO, OVERFLOW
         L     R6,PARMINDX(R6)     POINT TO STRING
        $MVCSTR (R10),LEN=(R7),STR=(R6)  COPY TO OUTPUT
         SR    R11,R7              GET OUTPUT LENGTH REMAINING
         AR    R10,R7              POINT TO NEXT OUTPUT POSITION
         LA    R1,2(R1)            BUMP PAST VARIABLE
         BCT   R2,SCAN             DO MORE IF MORE CHARS REMAIN
         B     PUTCARD             NONE LEFT, OUTPUT CARD
         SPACE 3
TTAB     DC    XL16'00000000000000000000000000000000'  00
         DC    XL16'00000000000000000000000000000000'  10
         DC    XL16'00000000000000000000000000000000'  20
         DC    XL16'00000000000000000000000000000000'  30
         DC    XL16'00000000000000000000000000000000'  40
         DC    XL16'00000000000000000000000000000000'  50
         DC    XL16'00000000000000000000000000000000'  60
         DC    XL16'00000000000000000000000000000000'  70
         DC    XL16'00000000000000000000000000000000'  80
         DC    XL16'00000000000000000000000000000000'  90
         DC    XL16'00000000000000000000000000000000'  A0
         DC    XL16'00000000000000000000000000000000'  B0
         DC    XL16'000A0B0C0D0E0F101112000000000000'  C0
         DC    XL16'00131415161718191A1B000000000000'  D0
         DC    XL16'00001C1D1E1F20212223000000000000'  E0
         DC    XL16'00010203040506070809000000000000'  F0
*
*  NO MORE VARIABLE SYMBOLS ON CARD
*
NOVAR    DS    0H
        $MVCSTR (R10),STR=(R3),LEN=(R6),MAX=(R11)  COPY REMAINDER
         SPACE 3
OVERFLOW DS    0H                  NOT ENOUGH ROOM ON CARD
PUTCARD  DS    0H                  OUTPUT MODIFIED CARD
         PUT   SYSIN,CARDOUT
CLEARLN  MVC   CARDOUT,=CL71' '    CLEAR OUTPUT CARD
         B     LOOP                DO NEXT CARD
         EJECT
*
*  ALL CARDS CONVERTED
*  CLOSE FILES AND LINK TO PROGRAM WITH NULL PARM LIST
*
NOMORE   DS    0H                  END OF INPUT
         CLOSE (CONTROL,,SYSIN)     CLOSE FILES
         SPACE 3
         LINK  EPLOC=PGM,PARAM=NULL,VL=1
         LTR   R15,R15             OK RETURN
         BZ    RETURN              YES
*
*  NON-ZERO RETURN CODE
*  CONSTRUCT MESSAGE FOR OPERATOR
*
         LR    R8,R15              SAVE RETURN CODE
         L     R6,TIOTADDR         PICK UP ADDR OF TIOT
         MVC   MSG+8(8),0(R6)      SET JOBNAME
         MVC   MSG+17(8),8(R6)     SET STEPNAME
         CVD   R8,CVDWORK          CONVERT RC
         UNPK  MSG+36(5),CVDWORK+5(3)  SET IN MSG
         OI    MSG+40,X'F0'        SET TO NUMBER
         MVI   MSG+36,C'='
MSG      WTO   'JOBNAMEX STEPNAME ERROR CODE=XXXX'
         LR    R15,R8              RESTORE RETURN CODE
         SPACE 5
RETURN   DS    0H
         L     R13,SAVEAREA+4      POINT TO OLD SAVEAREA
         RETURN (14,12),,RC=(15)   RETURN WITH RETURN CODE
         EJECT
*---------------------------------------------------------------------*
*---                                                               ---*
*---     THIS LITTLE LOCAL SUBROUTINE WILL LOCATE A DD STATEMENT   ---*
*---     ENTRY IN THE TIOT AND RETURN THE ASSOCIATED UCB ADDRESS.  ---*
*---     NOTE THAT IT RUNS IN AMODE-31.  NON-XA SYSTEMS BEWARE!!   ---*
*---                                                               ---*
*---------------------------------------------------------------------*
GETUCB   DS    0H
         $BSM  MODE=31
         SLR   R0,R0               CLEAR RETURN REGISTER
         L     R14,TIOTADDR        LOAD TIOT ADDRESS
         LA    R14,24(,R14)        POINT TO FIRST DD ENTRY
GU1      DS    0H
         CLI   0(R14),0            AT TIOT END ??
         BE    GU3                 YES; ALL DONE
         CLC   4(8,R14),0(R1)      GOT THE DD ENTRY ??
         BE    GU2                 YES ---
         SR    R15,R15             CLEAR A WORK REGISTER
         IC    R15,0(,R14)         INSERT TIOE LENGTH
         LA    R14,0(R15,R14)      POINT TO NEXT TIOE
         B     GU1                 AND LOOP
GU2      DS    0H
         ICM   R0,7,17(R14)        INSERT UCB ADDRESS
GU3      DS    0H
         $BSM  MODE=24
         BR    R9                  RETURN TO LOCAL CALLER
         EJECT
*
*  DCB'S AND WORK AREAS
*
CONTROL  DCB   DDNAME=CONTROL,DSORG=PS,MACRF=(GL),LRECL=80,            X
               EODAD=NOMORE,RECFM=FB
SYSIN    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=(PM),LRECL=80,BLKSIZE=400,  X
               RECFM=FB
*
DCBOFLGS EQU   48                  OPEN FLAGS
*
DDNLIST  DC    CL8'VOL1'
         DC    CL8'VOL2'
         DC    CL8'VOL3'
         DC    CL8'VOL4'
         DC    CL8'VOL5'
         DC    CL8'VOL6'
CARDOUT  DC    CL71' '             OUTPUT CARD AREA
         ORG   CARDOUT
CHAR1    DS    CL8
CHAR2    DS    CL8
         ORG
SEQOUT   DC    CL9' '              OUTPUT SEQUENCE FIELD
*
DBLWD    DS    D
PARMINDX DC    10F'0'              INDEX TO PARAMETER ENTRIES
S1       DC    AL1(4),AL3(SYSTEM)
S2       DC    AL1(4),AL3(CPU)
S3       DC    AL1(6),AL3(CPUSER)
S4       DC    AL1(2),AL3(VERSION)
S5       DC    AL1(0),AL3(USERID)
S6       DC    AL1(0),AL3(GROUP)
S7       DC    AL1(0),AL3(NJEN+1)
S8       DC    AL1(8),AL3(CLOCK1)
S9       DC    AL1(8),AL3(CLOCK2)
S10      DC    AL1(7),AL3(CLOCK1)
S11      DC    AL1(7),AL3(CLOCK1+7)
S12      DC    AL1(0),AL3(VOL1)
S13      DC    AL1(0),AL3(VOL2)
S14      DC    AL1(0),AL3(VOL3)
S15      DC    AL1(0),AL3(VOL4)
S16      DC    AL1(0),AL3(VOL5)
S17      DC    AL1(0),AL3(VOL6)
S18      DC    AL1(8),AL3(JOBID)
SYSTEM   DC    CL4' '
USERID   DC    CL8' '
GROUP    DC    CL8' '
CPU      DC    CL4' '
CPUSER   DC    CL6' '
VERSION  DC    CL2' '
NJEN     DC    CL9' '
CLOCK1   DC    CL8' '              FIRST HALF OF CPU CLOCK
CLOCK2   DC    CL8' '              SECOND HALF OF CPU CLOCK
         DS    XL1                 SPACE FROM UNPACKER
VOL1     DC    CL6' '              VOLSER OF THE VOL1 DD STATEMENT
VOL2     DC    CL6' '              VOLSER OF THE VOL2 DD STATEMENT
VOL3     DC    CL6' '              VOLSER OF THE VOL3 DD STATEMENT
VOL4     DC    CL6' '              VOLSER OF THE VOL4 DD STATEMENT
VOL5     DC    CL6' '              VOLSER OF THE VOL5 DD STATEMENT
VOL6     DC    CL6' '              VOLSER OF THE VOL6 DD STATEMENT
JOBID    DC    CL8'   00000'       JES2 JOBID ('JOB01234', E.G.)
TIOTADDR DC    F'0'                TIOT POINTER
CVDWORK  DC    D'0'
NULL     DC    H'0'
PGM      DC    CL8' '              PROGRAM NAME
*
SAVEAREA DS    18F                 SAVE AREA
*
         IHAACEE
         CVT   LIST=NO,DSECT=YES
         IEFUCBOB
         IKJTCB
         IEZJSCB
         IEFJSSIB
         $SJB
         $JCT
         $TQE
         $BUFFER
         IFGRPL
         END
