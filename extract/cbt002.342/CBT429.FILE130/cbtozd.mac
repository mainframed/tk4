//JOBCARD  JOB  (ACCOUNT),NAME
//*
//*  THIS JOB READS FILE ONE OF THE CBT MODIFICATION TAPE AND
//*  CREATES AN INPUT FILE TO THE BLGOZUD UTILITY
//*
//COMPILE  EXEC PLIXCLG,OUTC=R
//PLI.SYSIN DD *
 CBTTOOZ: PROC OPTIONS(MAIN) REORDER;
   DCL YES BIT(1) INIT('1'B) STATIC;
   DCL NO  BIT(1) INIT('0'B) STATIC;
   DCL EOFD1 BIT(1) INIT('0'B);
   DCL INREC CHAR(80);
   DCL 1 INRECA DEFINED(INREC),
         2 JUNK1 CHAR(3),
         2 INDATA CHAR(69),
         2 JUNK2 CHAR(8);
   DCL OUTREC CHAR(80);
   DCL DATA1 FILE RECORD INPUT;
   DCL BLGOZUD FILE RECORD OUTPUT;
   DCL TRANSLATE BUILTIN;
   DCL SUBSTR BUILTIN;
   DCL STRING BUILTIN;
   DCL VERIFY BUILTIN;
   DCL LENGTH BUILTIN;
   DCL INDEX  BUILTIN;
   DCL BREC CHAR(80) INIT(' ');
   DCL 1 HREC,
         2 HCON1 CHAR(3) INIT('H U'),
         2 HNUM  PIC'999999' INIT('000000'),
         2 HCON3 CHAR(71) INIT(' ');
   DCL 1 TREC,
         2 TCON1 CHAR(2) INIT('T '),
         2 TDATA CHAR(67) INIT(' '),
         2 TCON2 CHAR(11) INIT(' ');
   DCL 1 KREC,
         2 KCON1 CHAR(2) INIT('K '),
         2 KDATA CHAR(78) INIT(' ');
   DCL 1 DREC,
         2 DDATA CHAR(69) INIT(' '),
         2 DCON1 CHAR(11) INIT(' ');
   DCL EREC CHAR(80) INIT('$EOM');
   DCL KPTR FIXED BIN(31) INIT(0);
   DCL (I,J,K) FIXED BIN(31) INIT(0);
   DCL NULL BUILTIN;
   DCL (P,Q,R) POINTER INIT(NULL);
   DCL (CURRENT_TEXT, CURRENT_KEYWORD) POINTER INIT(NULL);
   DCL 1 TEXTS BASED(CURRENT_TEXT),
         2 TEXT CHAR(69),
         2 NEXT_TEXT POINTER;
   DCL TEXT_START POINTER INIT(NULL);
   DCL 1 KEYWORDS BASED(CURRENT_KEYWORD),
         2 KEYWORD CHAR(69) VARYING,
         2 LEFT_KEYWORD POINTER,
         2 RIGHT_KEYWORD POINTER;
   DCL KEYWORD_START POINTER INIT(NULL);
   DCL (KEYWORK1, KEYWORK2) CHAR(80) VARYING INIT(' ');
   DCL ASTER CHAR(1) INIT('*');
   DCL BLANK CHAR(1) INIT(' ');
   DCL SPECIAL CHAR(29) INIT('×@#$%^&*()_+!:"}>?-=Ö\;''{<,./');
   DCL TRBLANK CHAR(29) INIT('                             ');
   DCL PLIRETC BUILTIN;
   DCL PLIDUMP BUILTIN;
1/* BEGIN CBTTOOZ */;
   ON ERROR BEGIN;
     CALL PLIRETC(16);
     CALL PLIDUMP('T F C H B A');
   END;
   ON ENDFILE(DATA1)
     EOFD1 = YES;
   EOFD1 = NO;
   OPEN FILE(DATA1), FILE(BLGOZUD);
   READ FILE(DATA1) INTO(INREC);
   DO WHILE(^EOFD1 &
     (SUBSTR(INREC,1,13) ^= '//***SECTION ' &
      SUBSTR(INREC,1,10) ^= '//***FILE '));
     READ FILE(DATA1) INTO(INREC);  /* SKIP BEGINNING RECORDS */
   END;
   DO WHILE(^EOFD1);
     /* SETUP FIRST TEXT LINE */
     ALLOCATE TEXTS;
     TEXT_START = CURRENT_TEXT;
     P = CURRENT_TEXT;
     NEXT_TEXT = NULL;
     TEXT = TRANSLATE(INDATA,BLANK,ASTER);
     /* SET THE REST OF THE TEXT LINES FOR THIS ENTRY */
     READ FILE(DATA1) INTO(INREC);
     DO WHILE(^EOFD1 &
       (SUBSTR(INREC,1,13) ^= '//***SECTION ' &
        SUBSTR(INREC,1,10) ^= '//***FILE '));
       /* SETUP NEXT TEXT LINE */
       ALLOCATE TEXTS;
       P -> NEXT_TEXT = CURRENT_TEXT;
       NEXT_TEXT = NULL;
       P = CURRENT_TEXT;
       TEXT = TRANSLATE(INDATA,BLANK,ASTER);
       READ FILE(DATA1) INTO(INREC);
     END;
     /* HAVE GOTTEN ALL TEXT LINES FOR THIS ENTRY */
     /* WRITE HEADER LINE */
     HNUM = HNUM + 1;
     OUTREC = STRING(HREC);
     WRITE FILE(BLGOZUD) FROM(OUTREC);
     /* BUILD AND WRITE TITLE LINE */
     TDATA = SUBSTR(TEXT_START -> TEXT,3);
     OUTREC = STRING(TREC);
     WRITE FILE(BLGOZUD) FROM(OUTREC);
     /* BUILD KEYWORDS */
     CURRENT_TEXT = TEXT_START;
     DO WHILE(CURRENT_TEXT ^= NULL);
       KEYWORK1 = TRANSLATE(TEXT,TRBLANK,SPECIAL);
       I = VERIFY(KEYWORK1,BLANK);
       DO WHILE(I ^= 0);
         KEYWORK1 = SUBSTR(KEYWORK1,I);
         J = INDEX(KEYWORK1,BLANK);
         IF J = 0
         THEN DO;
           KEYWORK2 = KEYWORK1;
           KEYWORK1 = ' ';
         END;
         ELSE DO;
           KEYWORK2 = SUBSTR(KEYWORK1,1,J-1);
           KEYWORK1 = SUBSTR(KEYWORK1,J);
         END;
         ALLOC KEYWORDS;
         KEYWORD = KEYWORK2;
         LEFT_KEYWORD = NULL;
         RIGHT_KEYWORD = NULL;
         IF KEYWORD_START = NULL
         THEN KEYWORD_START = CURRENT_KEYWORD;
         ELSE DO;
           P = KEYWORD_START;
           DO WHILE(P ^= NULL);
             IF KEYWORD < P -> KEYWORD
             THEN DO;
               IF P -> LEFT_KEYWORD = NULL
               THEN DO;
                 P -> LEFT_KEYWORD = CURRENT_KEYWORD;
                 P = NULL;
               END;
               ELSE P = P -> LEFT_KEYWORD;
             END;
             ELSE DO;
               IF KEYWORD > P -> KEYWORD
               THEN DO;
                 IF P -> RIGHT_KEYWORD = NULL
                 THEN DO;
                   P -> RIGHT_KEYWORD = CURRENT_KEYWORD;
                   P = NULL;
                 END;
                 ELSE P = P -> RIGHT_KEYWORD;
               END;
               ELSE DO;
                 /* KEYWORD IS DUPLICATE */
                 FREE KEYWORDS;
                 P = NULL;
               END;
             END;
           END;
         END;
         I = VERIFY(KEYWORK1,BLANK);
       END;
       CURRENT_TEXT = NEXT_TEXT;
     END;
     /* WRITE KEYWORDS */
     KPTR = 1;
     KDATA = ' ';
     CALL WRITEKEY(KEYWORD_START);
     IF KPTR ^= 1
     THEN DO;
       OUTREC = STRING(KREC);
       WRITE FILE(BLGOZUD) FROM(OUTREC);
     END;
     /* WRITE BLANK LINE */
     OUTREC = BREC;
     WRITE FILE(BLGOZUD) FROM(OUTREC);
     /* WRITE TEXT LINES */
     CURRENT_TEXT = TEXT_START;
     DO WHILE(CURRENT_TEXT ^= NULL);
       DDATA = TEXT;
       OUTREC = STRING(DREC);
       WRITE FILE(BLGOZUD) FROM(OUTREC);
       CURRENT_TEXT = NEXT_TEXT;
     END;
     /* WRITE END LINE */
     OUTREC = EREC;
     WRITE FILE(BLGOZUD) FROM(OUTREC);
     /* FREE TEXT LINE STORAGE */
     CURRENT_TEXT = TEXT_START;
     DO WHILE(CURRENT_TEXT ^= NULL);
       P = NEXT_TEXT;
       FREE TEXTS;
       CURRENT_TEXT = P;
     END;
     TEXT_START = NULL;
     /* FREE KEYWORDS STORAGE */
     CALL TREEFREE(KEYWORD_START);
     KEYWORD_START = NULL;
     /* GO PROCESS NEXT SECTION */
   END;
   CLOSE FILE(DATA1), FILE(BLGOZUD);
1/* RECURSIVE WRITE KEY PROCEDURE */
 WRITEKEY: PROCEDURE(Q) REORDER RECURSIVE;
   DCL Q POINTER;
   IF Q ^= NULL
   THEN DO;
     CALL WRITEKEY(Q -> LEFT_KEYWORD);
     I = LENGTH(Q -> KEYWORD);
     IF I > 1 & I < 16
     THEN DO;
       IF KPTR + I > 78
       THEN DO;
         OUTREC = STRING(KREC);
         WRITE FILE(BLGOZUD) FROM(OUTREC);
         KPTR = 1;
         KDATA = ' ';
       END;
       SUBSTR(KDATA,KPTR,I) = Q -> KEYWORD;
       KPTR = KPTR + I + 1;
     END;
     CALL WRITEKEY(Q -> RIGHT_KEYWORD);
   END;
 END WRITEKEY;
1/* RECURSIVE TREE FREE PROCEDURE */
 TREEFREE: PROCEDURE(Q) REORDER RECURSIVE;
   DCL Q POINTER;
   IF Q ^= NULL
   THEN DO;
       CALL TREEFREE(Q -> LEFT_KEYWORD);
       CALL TREEFREE(Q -> RIGHT_KEYWORD);
       FREE Q -> KEYWORDS;
   END;
 END TREEFREE;
-END CBTTOOZ;
/*
//GO.SYSUDUMP DD SYSOUT=*
//GO.PLIDUMP  DD SYSOUT=*
//*
//*  THE FOLLOWING FILE IS FILE 001 OF THE CBT MODIFICATIONS TAPE
//*
//GO.DATA1 DD DSN=MVSMODS3.FILE001.DATA,DISP=SHR
//*
//*  THIS IS THE OUTPUT FILE WHICH BECOMES INPUT TO BLGOZUD
//*
//GO.BLGOZUD DD DSN=DISK.BLGOZUD.INPUT,DISP=(,CATLG,DELETE),
//         UNIT=SYSDA,SPACE=(6160,(450,100),,,ROUND),
//         DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)
//
