//CSYSMAS1 JOB MSGCLASS=A,TIME=(1,14),REGION=512K
/*ROUTE PRINT WYLBUR
//         EXEC ASMHCL,PARM.ASM='BATCH',
//  PARM.LKED='LIST,XREF,NCAL,LET'
//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB
//         DD  DISP=SHR,DSN=SYS1.AMODGEN
//         DD  DISP=SHR,DSN=SYS5.MSSMAC
//SYSIN DD *
VLST     TITLE 'DIRECT-ACCESS VOLUME DIRECTORY LISTER'
         MACRO
&TAG     XPRINNRA  &WA,&IHBPARM
.* INNER MACRO USED IN CALLS TO 'XPRNTSUB'
         DC    V(XPRNTSUB)             PRINTING SUBROUTINE ADDRESS
&TAG     L     15,*-4                  LOAD ENTRY POINT
         AIF   ('&WA' NE '').WOK
         LA    0,XPRDCB01              LOAD STANDARD WORK AREA ADDRESS
         AGO   .BAL
.WOK     AIF   ('&WA' EQ '(0)').BAL
         AIF   ('&WA'(1,1) EQ '(').REG
         LA    0,&WA                   LOAD WORK AREA ADDRESS
         AGO   .BAL
.REG     LR    0,&WA(1)                LOAD WORK AREA ADDRESS
.BAL     BAL   14,&IHBPARM.(15)        CALL PRINT SUBROUTINE
         MEND
         MACRO
&SYMBOL  XPRCLOSE  &WA
.* MACRO TO EXECUTE A CLOSE CALL TO 'XPRNTSUB'.
         CNOP  0,4
&SYMBOL  B     *+8                     BRANCH AROUND ADDRESS
         XPRINNRA  &WA,68
         MEND
         MACRO
&SYMBOL  XPRDCB  &DDNAME=SYSPRINT,&BLKSIZE=0
         LCLC  &TAG
.* MACRO TO GENERATE A WORK AREA FOR A PRINTER DATA SET, CONTAINING
.* A SAVE AREA, THE DCB, OPEN AND CLOSE PARAMETER LISTS, AND VARIOUS
.* CELLS AND SWITCHES.
&TAG     SETC  '&SYMBOL'
         AIF   (T'&SYMBOL NE 'O').TOK  TEST IF NAME SUPPLIED
&TAG     SETC  'XPRDCB01'              SUPPLY STANDARD PRDCB NAME
.TOK     ANOP
&TAG     DS    0D                      ALIGN ON DOUBLE-WORD BOUNDARY
         DS    18F                     STANDARD SAVE AREA
         SPACE
*        DCB   DDNAME=&DDNAME,DSORG=PS,RECFM=VBM,LRECL=137,           X
*              BLKSIZE=&BLKSIZE,MACRF=PL,BFTEK=S,BUFNO=2
IHB&SYSNDX DCB DDNAME=&DDNAME,DSORG=PS,RECFM=VBM,LRECL=137,            X
               BLKSIZE=&BLKSIZE,MACRF=PL,BFTEK=S,BUFNO=2
         SPACE
* PARAMETER LISTS FOR OPEN AND CLOSE:
         SPACE
         OPEN  (IHB&SYSNDX,(OUTPUT,LEAVE)),MF=L  PARM LIST FOR OPEN
         SPACE
         CLOSE (IHB&SYSNDX,LEAVE),MF=L PARM LIST FOR CLOSE
         SPACE
* WORK CELLS AND VARIABLE STORAGE:
         SPACE
         DS    1D                      WORK CELL
         DS    3F                      WORK CELLS
         DS    1A                      PAGE HEADING PARM LIST ADDRESS
         DS    1F                      MAXIMUM NUMBER OF OUTPUT LINES
         DS    1H                      PAGE WIDTH
         DS    1H                      PAGE LENGTH
         DS    1H                      PAGE NUMBER
         DS    1H                      PAGE BALANCE
         DS    1X                      SWITCHES
         DS    CL24                    DATE & TIME FOR PAGE HEADING
         SPACE 2
         MEND
         MACRO
&SYMBOL  XPREJECT  &WA,&COND=
.* MACRO TO EXECUTE AN EJECT CALL TO 'XPRNTSUB'.
         LCLC  &TAG,&SYM,&OPT,&R
         LCLA  &K
&SYM     SETC  '&SYMBOL'
&TAG     SETC  'IHB&SYSNDX'
         CNOP  2,4
.TST1    AIF   ('&COND' NE '').TST2
&OPT     SETC  'F000'
         AGO   .SIMPLE
.TST2    AIF   ('&COND' NE 'ATHOF').TSTC
&OPT     SETC  'F100'
.SIMPLE  ANOP
&SYM     BAL   1,&TAG.L                LOAD PARM ADDRESS
         DC    XL2'&OPT'               OPTION BITS
         AGO   .VCON
.TSTC    AIF   ('&COND(1)' NE 'EQ').NE
&OPT     SETC  '80'
.NE      AIF   ('&COND(1)' NE 'NE').LT
&OPT     SETC  '70'
.LT      AIF   ('&COND(1)' NE 'LT').GT
&OPT     SETC  '40'
.GT      AIF   ('&COND(1)' NE 'GT').LE
&OPT     SETC  '20'
.LE      AIF   ('&COND(1)' NE 'LE').GE
&OPT     SETC  'C0'
.GE      AIF   ('&COND(1)' NE 'GE').NOT
&OPT     SETC  'A0'
.NOT     AIF   ('&OPT' NE '').COK
         MNOTE 4,'COND OPERAND &COND(1) ILLEGAL'
.COK     AIF   ('&COND(2)' NE '').C2OK
         MNOTE 4,'COND TEST QUANTITY MISSING'
         AGO   .NOTREG
.C2OK    AIF   ('&COND(2)'(1,1) NE '(').NOTREG
&K       SETA  K'&COND(2)-2
&R       SETC  '&COND(2)'(2,&K)
&SYM     STC   &R,&TAG.A               STORE INTO PARM LIST
&SYM     SETC  ''
.NOTREG  ANOP
&SYM     BAL   1,&TAG.L                LOAD PARM ADDRESS
         DC    XL1'&OPT'               CONDITION MASK
         AIF   ('&COND(2)' EQ '').NOTREG2
         AIF   ('&COND(2)'(1,1) NE '(').NOTREG2
&TAG.A   DC    AL1(0)                  TEST QUANTITY
         AGO   .VCON
.NOTREG2 DC    AL1(&COND(2))           TEST QUANTITY
.VCON    ANOP
&TAG.L   XPRINNRA  &WA,92
         MEND
         MACRO
&SYMBOL  XPRHEAD  &WA,&LIST=
.* MACRO TO PRESENT A LIST OF PRINT LINE DESCRIPTORS FOR PAGE HEADINGS
.* TO 'XPRNTSUB'.
&SYMBOL  XPRLIST  &WA,LIST=&LIST,IHBPARM=80
         MEND
         MACRO
&SYMBOL  XPRLDEF  &TEXT=,&LENGTH=132,&OFFSET=0,&SPA=1,&SPB=0
.* MACRO TO DEFINE PRINT LINE DESCRIPTOR BLOCKS ("PLD" BLOCKS) FOR
.* THE PRINTING SUBROUTINE "XPRNTSUB".
         LCLA  &N
         LCLC  &B3,&B6,&B7
         ACTR  25                      JUST IN CASE
&B3      SETC  '0'
&B6      SETC  '0'
&B7      SETC  '0'
.* PROCESS OPTIONS IN SPA OPERAND:
.TSTA1   AIF   ('&SPA(2)' EQ '').TSTB1
         AIF   ('&SPA(2)' NE 'NOEJ').TSTA2
&B3      SETC  '1'
         AGO   .TSTB1
.TSTA2   MNOTE 4,'OPERAND &SPA(2) AFTER KEYWORD SPA IS ILLEGAL'
.* PROCESS OPTIONS IN SPB OPERAND:
.TSTB1   ANOP
&N       SETA  2
.TSTB5   AIF   ('&SPB(&N)' NE 'NOEJ').TSTB2
&B7      SETC  '1'
         AGO   .TSTB4
.TSTB2   AIF   ('&SPB(&N)' NE 'ATHOF').TSTB3
&B6      SETC  '1'
         AGO   .TSTB4
.TSTB3   AIF   ('&SPB(&N)' EQ '').TSTB4
         MNOTE 4,'OPERAND &SPB(&N) AFTER KEYWORD SPB IS ILLEGAL'
.TSTB4   ANOP
&N       SETA  &N+1
         AIF   (&N LE 3).TSTB5
.IFTEXT  AIF   ('&TEXT' NE '').TOK
         MNOTE 4,'TEXT ADDRESS MISSING'
.TOK     ANOP
&SYMBOL  DS    0F                      ALIGN ON FULL-WORD BOUNDARY
         DC    BL1'000&B3.00&B6&B7'    OPTION BITS
         DC    AL3(&TEXT)              TEXT ADDRESS
         DC    AL1(&LENGTH)            TEXT LENGTH
         DC    AL1(&OFFSET)            MARGIN OFFSET
.TESTB   AIF   ('&SPB(1)' EQ 'EJECT').BSKIP
         AIF   ('&SPB(1)' EQ 'SKIP').BSKIP
         DC    AL1(&SPB(1))            PRE-SPACING
         AGO   .TESTA
.BSKIP   ANOP
         DC    AL1(255)                EJECT BEFORE PRINTING
.TESTA   AIF   ('&SPA(1)' EQ 'EJECT').ASKIP
         AIF   ('&SPA(1)' EQ 'SKIP').ASKIP
         DC    AL1(&SPA(1))                 POST-SPACING
         MEXIT
.ASKIP   ANOP
         DC    AL1(255)                EJECT AFTER PRINTING
         MEND
         MACRO
&SYMBOL  XPRLIST  &WA,&LIST=,&IHBPARM=32
.* MACRO TO DELIVER A LIST OF PRINT LINE DESCRIPTORS TO 'XPRNTSUB'.
         LCLA  &N,&K,&D
         LCLC  &TAG,&SYM,&R
         ACTR  100
&SYM     SETC  '&SYMBOL'
&TAG     SETC  'IHB&SYSNDX'
         AIF   ('&LIST' NE '').LOK
         MNOTE 8,'LIST OPERAND MUST BE SUPPLIED'
         MEXIT
.LOK     CNOP  0,4
         AIF   ('&LIST' NE '(1)').STLOOP
&SYMBOL  B     &TAG.L                  BRANCH AROUND ADDRESS
         AGO   .VCON
.STLOOP  ANOP
&N       SETA  &N+1
         AIF   (&N GT N'&LIST).STDONE
         AIF   ('&LIST(&N)'(1,1) NE '(').STLOOP
&K       SETA  K'&LIST(&N)-2
&R       SETC  '&LIST(&N)'(2,&K)
&D       SETA  4*(&N-1)
&SYM     ST    &R,&TAG.A+&D            STORE INTO PARM LIST
&SYM     SETC  ''
         AIF   (&N NE N'&LIST).STLOOP
         OI    &TAG.A+&D,X'80'         SET END-OF-LIST BIT
.STDONE  ANOP
&SYM     BAL   1,&TAG.L                LOAD PARM LIST ADDRESS
&SYM     SETC  '&TAG.A'
&N       SETA  0
.LOOP    ANOP
&N       SETA  &N+1
         AIF   (&N GT N'&LIST).VCON
         AIF   ('&LIST(&N)'(1,1) NE '(').NOTREG
&SYM     DC    A(0)
&SYM     SETC  ''
         AGO   .LOOP
.NOTREG  AIF   (&N EQ N'&LIST).LAST
&SYM     DC    A(&LIST(&N))
&SYM     SETC  ''
         AGO   .LOOP
.LAST    ANOP
&SYM     DC    X'80'                   END-OF-LIST BIT
         DC    AL3(&LIST(&N))
.VCON    ANOP
&TAG.L   XPRINNRA  &WA,&IHBPARM
         MEND
         MACRO
&SYMBOL  XPRMOD  &WA,&MAXLINE=0,&PAGENO=0,&PAGEWID=0,&PAGELEN=0,       X
               &TIME=0,&DATE=0
.* MACRO TO EXECUTE A MODIFY CALL TO 'XPRINTSUB'.
&SYMBOL  XPROPEN  &WA,MAXLINE=&MAXLINE,PAGENO=&PAGENO,PAGEWID=&PAGEWID,X
               PAGELEN=&PAGELEN,TIME=&TIME,DATE=&DATE,IHBPARM=104
         MEND
         MACRO
&SYMBOL  XPRNTLIN  &WA,&TEXT=00,&LENGTH=132,&OFFSET=0,&SPB=0,&SPA=1
         LCLA  &N
         LCLC  &B3,&B6,&B7,&T,&R
         ACTR  25
&T       SETC  'IHB&SYSNDX'
&B3      SETC  '0'
&B6      SETC  '0'
&B7      SETC  '0'
.* PROCESS OPTIONS IN SPA OPERAND:
.TSTA1   AIF   ('&SPA(2)' EQ '').TSTB1
         AIF   ('&SPA(2)' NE 'NOEJ').TSTA2
&B3      SETC  '1'
         AGO   .TSTB1
.TSTA2   MNOTE 4,'OPERAND &SPA(2) AFTER KEYWORD SPA IS ILLEGAL'
.* PROCESS OPTIONS IN SPB OPERAND:
.TSTB1   ANOP
&N       SETA  2
.TSTB5   AIF   ('&SPB(&N)' NE 'NOEJ').TSTB2
&B7      SETC  '1'
         AGO   .TSTB4
.TSTB2   AIF   ('&SPB(&N)' NE 'ATHOF').TSTB3
&B6      SETC  '1'
         AGO   .TSTB4
.TSTB3   AIF   ('&SPB(&N)' EQ '').TSTB4
         MNOTE 4,'OPERAND &SPB(&N) AFTER KEYWORD SPB IS ILLEGAL'
.TSTB4   ANOP
&N       SETA  &N+1
         AIF   (&N LE 3).TSTB5
.* GENERATE STORE INSTRUCTIONS IF REGISTER NOTATION IS USED:
         CNOP  0,4
         AIF   ('&SYMBOL' EQ '').IFR1
&SYMBOL  DS    0H
.IFR1    AIF   ('&TEXT' NE '00').TXTOK
         MNOTE 4,'TEXT ADDRESS MUST BE SUPPLIED'
.TXTOK   AIF   ('&TEXT'(1,1) NE '(').IFR2
         ST    &TEXT(1),&T.A           STORE TEXT ADDRESS
         MVI   &T.A,B'000&B3.00&B6&B7' INSERT OPTION BITS
.IFR2    AIF   ('&LENGTH'(1,1) NE '(').IFR3
         STC   &LENGTH(1),&T.A+4       STORE TEXT LENGTH
.IFR3    AIF   ('&OFFSET'(1,1) NE '(').IFR4
         STC   &OFFSET(1),&T.A+5       STORE MARGIN OFFSET
.IFR4    AIF   ('&SPB(1)'(1,1) NE '(').IFR5
&N       SETA  K'&SPB(1)-2
&R       SETC  '&SPB(1)'(2,&N)
         STC   &R,&T.A+6               STORE PRE-SPACING
.IFR5    AIF   ('&SPA(1)'(1,1) NE '(').LOAD1
&N       SETA  K'&SPA(1)-2
&R       SETC  '&SPA(1)'(2,&N)
         STC   &R,&T.A+7               STORE POST-SPACING
.* LOAD REG 1 AND GENERATE PLD LIST ADDRESS:
.LOAD1   BAL   1,&T.L                  LOAD PARM ADDRESS
         DC    X'80'                   MARK END OF ADDRESS LIST
         DC    AL3(&T.A)               ADDRESS OF PLD
.* GENREATE PLD PARAMETERS TO DESCRIBE THE PRINT LINE:
.IFR11   AIF   ('&TEXT'(1,1) NE '(').NOTR11
&T.A     DC    A(0)                    TEXT ADDRESS & OPTION BITS
         AGO   .IFR12
.NOTR11  ANOP
&T.A     DC    B'000&B3.00&B6&B7'      OPTION BITS
         DC    AL3(&TEXT)              TEXT ADDRESS
.IFR12   AIF   ('&LENGTH'(1,1) NE '(').NOTR12
         DC    AL1(0)                  TEXT LENGTH
         AGO   .IFR13
.NOTR12  DC    AL1(&LENGTH)            TEXT LENGTH
.IFR13   AIF   ('&OFFSET'(1,1) NE '(').NOTR13
         DC    AL1(0)                  MARGIN OFFSET
         AGO   .IFR14
.NOTR13  DC    AL1(&OFFSET)            MARGIN OFFSET
.IFR14   AIF   ('&SPB(1)'(1,1) NE '(').NOTR14
         DC    AL1(0)                  PRE-SPACING
         AGO   .IFR15
.NOTR14  AIF   ('&SPB(1)' EQ 'EJECT').BSKIP
         AIF   ('&SPB(1)' EQ 'SKIP').BSKIP
         DC    AL1(&SPB(1))            PRE-SPACING
         AGO   .IFR15
.BSKIP   DC    AL1(255)                SKIP BEFOR PRINTING
.IFR15   AIF   ('&SPA(1)'(1,1) NE '(').NOTR15
         DC    AL1(0)                  POST-SPACING
         AGO   .VCON
.NOTR15  AIF   ('&SPA(1)' EQ 'EJECT').ASKIP
         AIF   ('&SPA(1)' EQ 'SKIP').ASKIP
         DC    AL1(&SPA(1))            POST-SPACING
         AGO   .VCON
.ASKIP   DC    AL1(255)                SKIP AFTER PRINTING
.VCON    ANOP
&T.L    XPRINNRA  &WA,32
         MEND
         MACRO
&SYMBOL  XPROPEN  &WA,&MAXLINE=0,&PAGENO=0,&PAGEWID=0,&PAGELEN=0,      X
               &TIME=0,&DATE=0,&DDNAME=SYSPRINT,&IHBPARM=56
.* MACRO TO EXECUTE AN 'OPEN' OR 'MODIFY' CALL TO 'XPRNTSUB'.
         LCLC  &TAG
&TAG     SETC  'IHB&SYSNDX'
         AIF   ('&SYMBOL' EQ '').T1
&SYMBOL  DS    0H
.T1      AIF   ('&MAXLINE'(1,1) NE '(').T2
         ST    &MAXLINE(1),&TAG.A      STORE IN PARM LIST
.T2      AIF   ('&PAGENO'(1,1) NE '(').T3
         STH   &PAGENO(1),&TAG.A+4     STORE IN PARM LIST
.T3      AIF   ('&PAGEWID'(1,1) NE '(').T4
         STC   &PAGEWID(1),&TAG.A+6    STORE IN PARM LIST
.T4      AIF   ('&PAGELEN'(1,1) NE '(').T5
         STC   &PAGELEN(1),&TAG.A+7    STORE IN PARM LIST
.T5      AIF   ('&TIME'(1,1) NE '(').T6
         ST    &TIME(1),&TAG.A+8       STORE IN PARM LIST
.T6      AIF   ('&DATE'(1,1) NE '(').T7
         ST    &DATE(1),&TAG.A+12      STORE IN PARM LIST
.T7      AIF   ('&DDNAME'(1,1) NE '(').CNOP
         MVC   &TAG.A+16(8),0(&DDNAME(1))  STORE IN PARM LIST
.CNOP    CNOP  0,4
         BAL   1,&TAG.L        LOAD PARM LIST ADDRESS
.P1      AIF   ('&MAXLINE'(1,1) EQ '(').PR1
&TAG.A   DC    A(&MAXLINE)             PRINT OUTPUT LIMIT
         AGO   .P2
.PR1     ANOP
&TAG.A   DC    A(0)                    PRINT OUTPUT LIMIT
.P2      AIF   ('&PAGENO'(1,1) EQ '(').PR2
         DC    AL2(&PAGENO)            PAGE NUMBER
         AGO   .P3
.PR2     DC    AL2(0)                  PAGE NUMBER
.P3      AIF   ('&PAGEWID'(1,1) EQ '(').PR3
         DC    AL1(&PAGEWID)           PAGE WIDTH
         AGO   .P4
.PR3     DC    AL1(0)                  PAGE WIDTH
.P4      AIF   ('&PAGELEN'(1,1) EQ '(').PR4
         DC    AL1(&PAGELEN)           PAGE LENGTH
         AGO   .P5
.PR4     DC    AL1(0)                  PAGE LENGTH
.P5      AIF   ('&TIME'(1,1) EQ '(').PR5
         DC    A(&TIME)                ADDRESS OF TIME
         AGO   .P6
.PR5     DC    A(0)                    ADDRESS OF TIME
.P6      AIF   ('&DATE'(1,1) EQ '(').PR6
         DC    A(&DATE)                ADDRESS OF DATE
         AGO   .P7
.PR6     DC    A(0)                    ADDRESS OF DATE
.P7      AIF   ('&IHBPARM' NE '56').VCON
         AIF   ('&DDNAME'(1,1) EQ '(').PR7
         DC    CL8'&DDNAME'            DDNAME FOR DATA SET
         AGO   .VCON
.PR7     DC    CL8' '                  DDNAME FOR DATA SET
.VCON    ANOP
&TAG.L   XPRINNRA  &WA,&IHBPARM
         MEND
         MACRO
&SYMBOL  XPRSPACE  &WA,&LINES=1,&COND=
.* MACRO TO EXECUTE A SPACE CALL TO 'XPRNTSUB'.
         LCLA  &N,&B6,&B7
         LCLC  &TAG,&SYM
&SYM     SETC  '&SYMBOL'
&TAG     SETC  'IHB&SYSNDX'
.LOOP    ANOP
&N       SETA  &N+1
         AIF   (&N GT N'&COND).LDONE
.TST1    AIF   ('&COND(&N)' NE 'NOEJ').TST2
&B6      SETA  1
         AGO   .LOOP
.TST2    AIF   ('&COND(&N)' NE 'ATHOF').TST3
&B7      SETA  1
         AGO   .LOOP
.TST3    MNOTE 4,'OPERAND &COND(&N) AFTER KEYWORD COND IS ILLEGAL'
         AGO   .LOOP
.LDONE   CNOP  2,4
         AIF   ('&LINES'(1,1) NE '(').NOTREG1
&SYM     STC   &LINES(1),&TAG.A+1      STORE INTO PARM LIST
&SYM     SETC  ''
.NOTREG1 ANOP
&SYM     BAL   1,&TAG.L                LOAD PARM LIST ADDRESS
&TAG.A   DC    B'000000&B6&B7'         OPTION BITS
         AIF   ('&LINES'(1,1) NE '(').NOTREG2
         DC    X'00'                   SPACING AMOUNT
         AGO   .VCON
.NOTREG2 DC    AL1(&LINES)             SPACING AMOUNT
.VCON    ANOP
&TAG.L   XPRINNRA  &WA,44
         MEND
         SPACE
         EJECT
* FUNCTION/OPERATION:  READS AND EDITS THE VOLUME TABLE OF CONTENTS
*        (VTOC) FROM ONE OR MORE DIRECT ACCESS VOLUMES AND PRINTS
*        INFORMATION ABOUT THE DATA SETS ON IT AND A TRACK USAGE MAP.
*        OPTIONALLY, IT LISTS THE DIRECTORY OF EACH PARTITIONED DATA
*        SET ON THE VOLUME.
         SPACE
* ENTRY POINTS:  ENTER AT 'GENESIS' WITH A BALR 14,15 AND REGISTER 13
*        SET TO A STANDARD SAVE AREA.  REGISTER 1 POINTS TO A FULL WORD
*        WHICH POINTS TO A PARAMETER FIELD.
         SPACE
* INPUT:  THE PARAMETER FIELD REFERENCED BY R1 BEGINS WITH A HALF-WORD
*        CONTAINING THE BINARY LENGTH OF THE BYTE STRING WHICH FOLLOWS
*        IT.  THE STRING CONSISTS OF A SERIES OF PARAMETER WORDS
*        SEPARATED BY COMMAS.  LEGAL WORDS ARE:
*              DUMP    CAUSES THE DSCB'S TO BE LISTED IN HEX FOLLOWING
*                      THEIR FORMATTED LISTINGS.
*              PDS     CAUSES THE DIRECTORY OF EACH PDS TO BE LISTED.
*              MAP     CAUSES THE TRACK USAGE MAP TO BE PRINTED.
         SPACE
* OUTPUT:  A PRINTED LISTING DESCRIBING THE DATA SETS AND TRACK USAGE
*        FOR EACH VOLUME.
         SPACE
* DATA SETS:  PRINTED OUTPUT IS DELIVERED TO A DATA SET DESCRIBED ON A
*        DD CARD WITH DDNAME 'SYSPRINT'.  EACH VOLUME TO BE LISTED MUST
*        HAVE A DD CARD WITH THE DDNAME "VOL.....", WHERE ONLY THE
*        FIRST THREE CHARACTERS ARE TESTED.  THE DD CARDS ARE
*        REQUIRED TO SPECIFY ONLY THE VOLUME SERIAL, UNIT, AND
*        A DISPOSITION OF 'OLD'.
         SPACE
* EXTERNAL ROUTINES:  CALLS 'XDATEDIT' TO FORMAT DATES.
*        CALLS 'XVTCREAD' TO READ VTOC FROM DIRECT-ACCESS DEVICES.
*        CALLS 'XPRNTSUB' TO DO PRINTING AND PAGINATION.
         SPACE
* EXITS-NORMAL:  RETURNS VIA REG 14 WITH RETURN CODE 0.
         SPACE
* EXITS-ERROR:  RETURNS VIA REG 14 WITH RETURN CODES AS FOLLOWS:
*        4 - MISSING DD CARD;
*        8 - BAD FORMAT IN A DSCB;
*        12 - PERMANENT I/O ERROR IN A VTOC OR PDS DIRECTORY;
*        20 - UNABLE TO OPEN 'SYSPRINT' DATA SET.
         SPACE
* TABLES/WORK AREAS:  USES SYSTEM MACROS 'IEFJFCBN' AND 'IECSDSL1' TO
*        DEFINE A JOB FILE CONTROL BLOCK AND VARIOUS DATA SET CONTROL
*        BLOCK FORMATS.  USES MACRO 'IEFTIOT1' TO DEFINE TASK IO TABLE.
         SPACE
* ATTRIBUTES:  SERIALLY REUSABLE.
         SPACE
* MACHINE REQUIREMENTS:  USES A PRINTER WITH 132-CHARACTER PRINT LINE
*        AND A 60-CHARACTER PRINT TRAIN (PN OR QN ARRANGEMENT).  USES
*        ONLY THE STANDARD INSTRUCTION SET, EXCEPT FOR A FEW 'EDIT'
*        INSTRUCTIONS.  CORE REQUIREMENT VARIES WITH THE SIZE OF THE
*        VTOC BEING LISTED.  A 160-BLOCK VTOC REQUIRES ABOUT 30K.
         SPACE
* NOTES:  THE INPUT PARAMETER LIST STRUCTURE IS THAT USED TO PASS
*        INFORMATION FROM THE 'PARM' FIELD OF AN 'EXEC' CARD.
         SPACE
*        HAS BEEN TESTED WITH 2301, 2311, 2314, AND 2321.  NO TROUBLE
*        ANTICIPATED WITH 2303.  DON'T KNOW ABOUT 2302.
         SPACE
*        CURRENTLY IGNORES FORMAT 2 DSCB'S FOR ISAM AND
*        FORMAT 6 DSCB'S FOR SPLIT-CYLINDER ALLOCATION.
         SPACE 3                                                     HM
*        *****  USC MODIFICATIONS BY H. MARIN  --  AUG. 27,1972  ****HM
*                                                                    HM
*        VTOCLIST WILL NOW HANDLE 3330 AND 2305-2 VOLUMES.           HM
*        THESE MODIFICATIONS HAVE BEEN TESTED AND OPERATE CORRECTLY. HM
*       3330 MOD 11 SUPPORT UNDER BOTH MVT AND MVS ALSO ADDED. 4/75  HM
*       THE  MOD 11 SUPPORT UNDER MVT IS BASED ON SIZE OF VOLUME...  HM
*                                                                    HM
*        ALL MACROS REQUIRED ARE PROVIDED EXCEPT FOR THE THREE IBM   HM
*        MACROS:                                                     HM
*               IEFTIOT1                                             HM
*               IEFJFCBN                                             HM
*               IECSDSL1                                             HM
*                                                                    HM
*        THESE MACROS ARE RELEASE DEPENDENT AND ARE PROVIDED IN FILE HM
*        SYS1.PVTMACS OF THE DLIB VOLUMES FOR GENERATING A SYSTEM.   HM
*        THEREFORE, TO ASSEMBLE THIS PROGRAM, IN PARTICULAR CSECT    HM
*        VTOCLIST, ONE MUST CONCATENATE BOTH MACLIB AND PVTMACS UNDERHM
*        THE SYSLIB DDNAME OF THE ASSEMBLY STEP.                     HM
* ----   MVS NOTE:  THESE MACROS ARE FOUND IN SYS1.AMODGEN FOR MVS.  HM
*                                                                    HM
* -------- 3330-11 SUPPORT ADDED OCTOBER,1974 BY HECTOR MARIN (UCB)  HM
*          -------                                                   HM
*                                                                    SA
*        *****  TRW MODIFICATIONS BY S. ANDERSON -- APRIL 1976       SA
*                                                                    SA
*        IF THE PDS OPTION HAS BEEN SELECTED AND THE DATASET HAS     SA
*        READ PROTECTION, NO ATTEMPT WILL BE MADE TO LIST THE        SA
*        DIRECTORY FOR THAT DATASET.                                 SA
*                                                                    SA
*                                                                    SA
*        *****  3350  SUPPORT  ADDED  MAY 5,1977  BY  W. BRICENO  *  WB
*        *****  THIS  BECOMES  VERSION  3.2  OF  VTOCLIST         *  WB
*                                                                    WB
*        *****  TRW MODIFICATIONS BY S. ANDERSON -- APRIL 1979       SA
*                                                                    SA
*        SUPPORT ADDED FOR SU 60 LAST REFERENCE DATE. THE LAST       SA
*        REFERENCE DATE REPLACES SERIAL AND SEQ FIELDS.              SA
*        ******  TRW MODIFICATIONS BY M. SIMS -- APRIL 16,1979       MS
*        EXIT LIST ADDED TO TRAP PDS OPEN ERRORS AND TELL USER       MS
*        ABOUT IT WITHOUT ABENDING THE JOB. ALSO LINKED AS AC(1)     MS
*        TO STOP ENQ LOCKOUTS CAUSED BY THE OPEN TYPE=J LOGIC.       MS
*
*        VERSION 4.0 - CHRIS THOMAS - UCLA/OAC - MODS FOR DFDS       MS
*        (3380 AND INDEXED VTOC SUPPORT)  5/28/81                    MS
*
*
***********************************************************************
         EJECT
VTOCLIST CSECT
         SPACE 2
* REGISTER ASSIGNMENTS:
         SPACE
R0       EQU   0
R1       EQU   1
RPARM    EQU   1
R2       EQU   2
RWK1     EQU   2
R3       EQU   3
RWK2     EQU   3
RWK3     EQU   4
RWK4     EQU   5
R7       EQU   7
RPDS     EQU   8
RLCLBASE EQU   8   BASE FOR CLOSED REG-TRANSPARENT SUBROUTINES
R8       EQU   8   BASE FOR CLOSED REG-TRANSPARENT SUBROUTINES
RDS1     EQU   9
RDS4     EQU   9
RMB      EQU   9
RDS3     EQU   10
RDS5     EQU   10
RDCB     EQU   10
RBASE1   EQU   11
RBASE2   EQU   12
R12      EQU   12
RSAVE    EQU   13
RRET     EQU   14
R15      EQU   15
RGO      EQU   15
         EJECT
* PARAMETERS AND ASSIGNS:
         SPACE
GETSIZE  EQU   2048            BLOCK SIZE FOR GETMAIN REQUESTS
PGLENGTH EQU   57              LINES PER PAGE        **TRW**
TOPMARGN EQU   3               LINES TO SKIP BEFORE PAGE HEADING
ALIASMSK EQU   X'80'           PDS DIRECTORY ENTRY IS AN ALIAS
         SPACE
DADEVICE EQU   X'20'           CLASS FOR DIRECT ACCESS DEVICES
DEV2301  EQU   X'02'           UNIT TYPE FOR 2301 DRUM
DEV2302  EQU   X'04'           UNIT TYPE FOR 2302 DISK FILE
DEV2303  EQU   X'03'           UNIT TYPE FOR 2303 DRUM
DEV2311  EQU   X'01'           UNIT TYPE FOR 2311 DISK PACK
DEV2314  EQU   X'08'           UNIT TYPE FOR 2314 DISK PACK
DEV2321  EQU   X'05'           UNIT TYPE FOR 2321 DATA CELL
DEV23051 EQU   X'06'           UNIT TYPE FOR 2305-1 DRUM
DEV23052 EQU   X'07'           UNIT TYPE FOR 2305-2 DRUM
DEV3330  EQU   X'09'           UNIT TYPE FOR 3330 DISK PACK
DEV33301 EQU   X'0D'          UNIT TYPE FOR 3330 MOD 11-DISK PACK   HM
DEV3350  EQU   X'0B'          UNIT TYPE FOR 3350 NATIVE DISK PACK   WB
DEV3375  EQU   X'0C'          UNIT TYPE FOR 3375                   CST
DEV3380  EQU   X'0E'          UNIT TYPE FOR 3380                   CST
         SPACE
*        BIT MEANINGS FOR MODESW  --  OPTIONS SWITCH
DUMPMASK EQU   X'01'           OPTION TO DUMP DSCB'S IN HEX
PDSLMASK EQU   X'02'           OPTION TO LIST PDS DIRECTORIES
NODSMASK EQU   X'04'      OPTION TO PREVENT DATA SET LIST
MAPMASK  EQU   X'08'           OPTION TO LIST TRACK USAGE
NOHDMASK EQU   X'10'      OPTION TO PREVENT HEADING
DS1MASK  EQU   X'20'   OPTION TO LIST ONE DATA SET ONLY
MEOMASK  EQU   X'40'    OPTION TO LIST ONLY MAP ERRORS IF MAPPING
NOMMASK  EQU   X'80'          PDS DIRECTORY STATS ONLY
         SPACE
*        BIT MEANINGS FOR MODESW1 --  OPTIONS SWITCH NUMBER 2
DSORGMSK EQU   X'80'   SWITCH FOR DSORG
         SPACE
ISDSORG  EQU   X'80'           INDEXED SEQUENTIAL ORGANIZATION
PSDSORG  EQU   X'40'           PHYSICAL SEQUENTIAL ORGANIZATION
DADSORG  EQU   X'20'           DIRECT-ACCESS ORGANIZATION
PODSORG  EQU   X'02'           PARTITIONED ORGANIZATION
         SPACE
PRSP0    EQU   X'00'           PSEUDO CONTROL CHARACTERS FOR PRINTER
PRSP1    EQU   X'01'
PRSP2    EQU   X'02'
PRSP3    EQU   X'03'
         SPACE
OPENBIT  EQU   X'10'           DCB IS OPEN (IN 'DCBOFLGS')
         EJECT
*************************
* ENTRANCE AND PROLOGUE *
*************************
         SPACE
* ENTER HERE TO PERFORM STANDARD SAVE OPERATIONS AND ESTABLISH TWO BASE
* REGISTERS WITH A CONTINUOUS RANGE OF 8K BYTES.
         SPACE
GENESIS  SAVE  (14,12),,VTOCLIST-03008219
         SPACE
         LR    RBASE1,R15              SET UP BASE REGISTER
         USING GENESIS,RBASE1,RBASE2
         LA    RBASE2,4095(RBASE1)     LOAD SECOND BASE 4096 BYTES
         LA    RBASE2,1(RBASE2)          HIGHER
         SPACE
         LR    RWK1,RSAVE
         LA    RSAVE,SAVEAREA          LOCAL SAVE AREA, 18 WORDS
         ST    RWK1,SAVEAREA+4         FORWARD CHAIN
         ST    RSAVE,8(RWK1)           BACKWARD CHAIN
         SPACE
         SR    R1,R1                   GENERATE ZERO PROGRAM MASK
         SPM   R1                      MASK OVERFLOW INTERRUPTS
         SPACE 3
* CALL PRINTING SUBROUTINE TO OPEN THE SYSPRINT DATA SET.  SET INITIAL
* PAGE DIMENSIONS AND HEADING, AND SKIP TO HEAD OF FORM.
         SPACE
         XPROPEN  PWA,PAGELEN=PGLENGTH,DDNAME=SYSPRINT
         LTR   R15,R15                 TEST FOR SUCCESSFUL OPEN
         BNZ   PROPBAD                 ERROR IF UNABLE TO PRINT
         SPACE
         XPRHEAD  PWA,LIST=INITHEAD
         SPACE
         XPRNTLIN  PWA,TEXT=REVMSG,LENGTH=L'REVMSG,SPB=SKIP,           X
               SPA=3,OFFSET=9
         SPACE 3
* INITIALIZE OTHER MISCELLANEOUS THINGS.
         SPACE
         SR    R0,R0                   GENERATE USEFUL ZERO
         ST    R0,RETCODE              ZERO RETURN CODE REGISTER
         STC   R0,MODESW               LISTING OPTION SWITCH
         SPACE
* LOCATE THE TIOT AND SAVE THE JOB NAME.
         SPACE
         EXTRACT  TIOTLOC,FIELDS=TIOT  OBTAIN TIOT ADDRESS FROM TCB
         SPACE
         L     R1,TIOTLOC
         USING TIOT1,R1
         MVC   JOBNAME(8),TIOCNJOB     SAVE JOB ANME
         LA    R1,TIOENTRY             LOAD ADDR OF FIRST TABLE ENTRY
         DROP  R1
         ST    R1,TIOTLOC              SAVE TIOT ENTRY ADDRESS
         EJECT
******************************
* INPUT PARAMETER PROCESSING *
******************************
         SPACE
* RETRIEVE AND PRINT THE PARAMETER FIELD.  SCAN IT FOR WORDS AND SET
* LISTING MODE SWITCHES AND VOLUME COUNT ACCORDINGLY.
         SPACE 2
PARMGET  L     R1,SAVEAREA+4           SAVE AREA WHERE R1 STORED
         L     R1,24(R1)               R1 WHICH WAS PASSED TO US
         L     RWK1,0(R1)              ADDRESS OF PARM FIELD
         LH    RWK2,0(RWK1)            LENGTH OF PARM FIELD
         LA    RWK1,2(RWK1)            SET RWK1 TO FIRST BYTE
         SPACE
* PRINT FIELD, OR COMPLAIN IF IT IS TOO LONG.
         SPACE
         MVC   PL+10(21),=C'EXEC PARAMETER FIELD:'
         CH    RWK2,=H'99'             TEST FIELD LENGTH
         BL    PLNGOK
         MVC   PL+30(29),=C'  IS TOO LONG AND WAS IGNORED'
         SR    RWK2,RWK2               SET LENGTH TO 0
         B     PARMPR
         SPACE
PLNGOK   LTR   R1,RWK2                 FIX UP LENGTH FOR MOVE
         BZ    PARMPR                  SKIP MOVE IF LENGTH ZERO
         BCTR  R1,0                    SUBTRACT 1 FOR MVC
         STC   R1,PARMOVE+1
PARMOVE  MVC   PL+33(0),0(RWK1)        MOVE PARM FIELD TO PRINT LINE
PARMPR   MVI   PL,PRSP3                PRINT AND SPACE 3
         BAL   RRET,PRINTSUB
         SPACE
* LOOP TO GET PARAMETER WORDS AND SET SWITCHES.
         SPACE
PARMLOOP BAL   RRET,SCAN               GET A WORD
         CLI   SCANWORD,C' '           BLANK WORD MEANS END OF STRING
         BE    PARMDONE
         SPACE
PVOLS    CLC   SCANWORD(4),=C'VOLS'    FOR COMPATIBILITY WITH OLDER
         BE    PARMLOOP                   VERSIONS
         SPACE
PDUMP    CLC   SCANWORD(5),=C'DUMP '
         BNE   PPDS
         OI    MODESW,DUMPMASK
         B     PARMLOOP
         SPACE
PPDS     CLC   SCANWORD(4),=C'PDS '
         BNE   PMAP
         OI    MODESW,PDSLMASK
         NI    MODESW,255-NOMMASK  OVERRIDE NOM IF PDS SPECIFIED LATER
         B     PARMLOOP
         SPACE
PMAP     CLC   SCANWORD(4),=C'MAP '
         BNE   PDIR
         OI    MODESW,MAPMASK
         B     PARMLOOP
         SPACE
PDIR     CLC   SCANWORD(4),=C'NOM '
         BNE   PNODS
         OI    MODESW,PDSLMASK+NOMMASK
         B     PARMLOOP
         SPACE
PNODS    CLC   SCANWORD(5),=C'NODS '
         BNE   PNOHDNG
         OI    MODESW,NODSMASK
         B     PARMLOOP
         SPACE
PNOHDNG  CLC   SCANWORD(7),=C'NOHDNG '
         BNE   P1DSONLY
         OI    MODESW,NOHDMASK
         B     PARMLOOP
         SPACE 2
P1DSONLY CLC   SCANWORD(3),=C'DS '
         BNE   PMEONLY
         OI    MODESW,DS1MASK+NOHDMASK+PDSLMASK+NOMMASK
         B     PARMLOOP
         SPACE 2
PMEONLY  CLC   SCANWORD(4),=C'MEO '
         BNE   PDSORGF
         OI    MODESW,MEOMASK+MAPMASK
         B     PARMLOOP
         SPACE 2
PDSORGF  CLC   SCANWORD(5),=C'DSORG='  CHECK FOR KEYWORD
         BNE   BADPARM
         OI    MODESW1,DSORGMSK   INDICATE FILTER IN EFFECT
         L     R1,DSORGTBA   GET DSORG ENTRIES TABLE
         LA    RRET,DSORGEND   GET NUMBER OF ENTRIES
LOOPDPRM CLC   SCANWORD+6(2),0(R1)
         BNE   *+14   NOT A MATCH YET
         OC    DSORGSW,2(R1)   INDICATE THIS IS WANTED
         B     PARMLOOP   GO GET NEXT GUY
         LA    R1,3(,R1)   BUMP TO NEXT ENTRY
         BCT   RRET,LOOPDPRM   GET NEXT
*   OTHERS MAY BE ADDED
         NI    MODESW1,255-DSORGMSK  NEVER MIND-- PARM ERROR
         SPACE 4
* PRINT ERROR MESSAGE FOR UNRECOGNIZED PARAMETERS.
         SPACE
BADPARM  MVC   PL+10(50),=C'"        " IS AN ILLEGAL PARAMETER AND WAS X
               IGNORED'
         MVC   PL+11(8),SCANWORD
         MVI   PL,PRSP3
         BAL   RRET,PRINTSUB
         B     PARMLOOP
         SPACE
* ALL PARAMETERS HAVE BEEN PROCESSED.  LOAD TIOT POINTER TO PROCESS
* FIRST VOLUME.
         SPACE 3
         SPACE
PARMDONE DS    0H
         L     RWK1,TIOTLOC            LOAD TIOT ADDRESS
         B     VOLJOIN
         EJECT
**********************
* BEGIN A NEW VOLUME *
**********************
         SPACE
* SEARCH TIOT FOR "VOL....." DDNAME.
         SPACE
NEWVOL   DS    0H
         L     RWK1,TIOTLOC            LOAD TIOT ADDRESS
         USING TIOENTRY,RWK1
         SR    R1,R1
         IC    R1,TIOELNGH             GET LENGTH OF CURRENT ENTRY
         AR    RWK1,R1                 ADVANCE TO NEXT ENTRY
         ST    RWK1,TIOTLOC            SAVE UPDATED TIOT ADDRESS
VOLJOIN  CLI   TIOELNGH,X'00'          TEST IF ZERO-LENGTH ENTRY
         BE    EXODUS                  END OF VOLUMES IF SO
         CLC   TIOEDDNM(3),=C'VOL'     TEST IF "VOL....." DDNAME
         BNE   NEWVOL                  SKIP ENTRY IF NOT
         MVC   DDNAME(8),TIOEDDNM      SAVE DDNAME
         DROP  RWK1
         SPACE
* RESET PAGE NUMBER AND SKIP TO A FRESH PAGE.
         SPACE
         XPRMOD  PWA,PAGENO=1          RESET PAGE NUMBER TO 1
         SPACE
         XPREJECT  PWA                 SKIP TO A FRESH PAGE
         SPACE
         XPRHEAD  PWA,LIST=F1HD3       SET PAGE HEADING LINE
         SPACE
* RESET VARIOUS POINTERS AND COUNTERS FOR A NEW VOLUME.
         SPACE
         LA    R1,LASTFMT1             RESET FORMAT 1 CHAIN POINTER
         ST    R1,FMT1ADDR
         SPACE
         LA    R1,MBBASE               RESET TRACK MAP CHAIN POINTER
         ST    R1,MBBASE
         SPACE
         SR    R0,R0                   GENERATE USEFUL ZERO
         STH   R0,FREECYLS             ZERO FREE CYLINDER COUNT
         STH   R0,FREETRKS               AND FREE TRACK COUNT
         STH   R0,F5EXTNTS               AND FREE EXTENTS COUNT
         STH   R0,DSCOUNT                AND DATA SET COUNT
         SPACE
* INSERT DDNAME IN DCB FOR PDS DIRECTORY READING.
         SPACE
         USING IHADCB,RDCB
         L     RDCB,PDSDCBA             FIX DCB FOR PDS LISTING
         MVC   DCBDDNAM(8),DDNAME
         DROP  RDCB
         SPACE
* GET DEVICE TYPE AND VERIFY THAT IT IS DIRECT ACCESS.
         SPACE
         DEVTYPE  DDNAME,DEVCHAR       GET DEVICE CHARACTERISTICS
         SPACE
         LTR   RGO,RGO                 TEST R15 IF DDNAME FOUND
         BNZ   NODDCARD                ERROR,DDNAME NOT FOUND
         CLI   DEVCHAR+2,DADEVICE      TEST FOR DIRECT-ACCESS DEVICE
         BNE   NOTDACC                 ERROR, NOT DIRECT ACCESS DEVICE
         SPACE
* LOOK UP DEVICE NUMBER IN TABLE AND SET UP TRACK ADDRESS CONVERSION
* PARAMETERS.
         SPACE
         L     RWK1,=A(DEVNAMES)       ADDRESS TABLE BEGINNING
DEVNAMLP CLC   UNITTYPE(1),0(RWK1)     TEST FOR MATCH ON DEVICE TYPE
         BE    DEVNAMF                 BRANCH WHEN FOUND
         CLI   0(RWK1),0
         BE    UNKNDEV                 BRANCH IF NOT
         LA    RWK1,DEVNAMSZ(RWK1)     STEP THROUGH TABLE
         B     DEVNAMLP
         SPACE
DEVNAMF  ST    RWK1,DEVNAMAD           SAVE ADDRESS OF TABLE ENTRY
         MVC   FC1(12),16(RWK1)        MOVE IN CONVERSION FACTORS
         SPACE
* READ JFCB AND EXTRACT VOLUME SERIAL NUMBER.
         SPACE
         RDJFCB  (PDSDCB)              READ JOB FILE CONTROL BLOCK
         SPACE
         L     R1,JFCBADR              SET UP JFCB BASE REG
         USING JFDUMMY,R1
         MVC   VOLUME(6),JFCBVOLS      SAVE VOLUME SERIAL NUMBER
         L     RRET,DSN1PTR
         MVC   0(44,RRET),JFCBDSNM   SAVE DS NAME
         DROP  R1
         SPACE
         MVC   F1HSER1(6),VOLUME       PUT VOLUME SERIAL IN HEADING
         MVC   F1HSER2(6),VOLUME
         SPACE
* CALL VTOC READING ROUTINE TO OPEN VTOC.
         SPACE
         LA    R0,1                    CALL MODE 1 FOR OPEN
         LA    R1,DDNAME               ADDRESS OF DDNAME
         L     RGO,VTOCREAD            ADDRESS OF SUBROUTINE
         BALR  RRET,RGO                CALL XVTCREAD
         B     *+4(R15)                BRANCH ON RETURN CODE
         B     VOPENED                 0, SUCCESS
         B     CANTOPEN                4, UNABLE TO OPEN
         B     NOTDACC                 8, NOT DIRECT ACCESS
VOPENED  DS    0H
         SPACE
* MAKE UP A TRACK MAP ENTRY FOR THE VOLUME LABEL ON TRACK 0.
         SPACE
         MVC   FB+4(20),TRK0MAP        INSERT DUMMY ENTRY
         LA    RWK1,FB
         BAL   RRET,FILEMAP            GO INSERT IN MAP
         EJECT
* READ VTOC INTO CORE
         SPACE
* READ THE FIRST DSCB, WHICH SHOULD BE TYPE 4, DESCRIBING THE VOLUME
* AND VTOC CHARACTERISTICS.
         SPACE
         USING DS4,RDS4
READFMT4 LA    RWK3,DS4SIZE            SIZE OF CORE BLOCK
         BAL   RRET,GETBLOCK           GET CORE AREA
         ST    RWK2,FMT4ADDR           SAVE ADDRESS
         LR    RDS4,RWK2               SET BASE REG FOR FORMAT 4
         BAL   RRET,READSEQ            READ FIRST BLOCK
         BAL   RRET,DISASTER           END OF DATA RETURN
         CLI   DS4IDFMT,X'F4'          CHECK TYPE
         BNE   FRSTNOT4                ERROR, FIRST BLOCK NOT TYPE 4
         SPACE
         SPACE 4                                                     HM
*********************************************************************HM
* *** 3330-11 SUPPORT REQUIRES WE HAVE READ THE VTOC BEFORE KNOWING  HM
* ***         IF WE HAVE A MOD 1 OR A MOD 11. (MVT KLUDGE - CST)    *HM
*********************************************************************HM
**       SPACE 3                                                     HM
**       CLC   DS4DEVSZ(2),=H'815'   IS NO. OF CYLS EQUAL TO 815     HM
**       BNE   NOTMOD11                                              HM
**       L     RWK1,DEVNAMAD           VERIFY DEVICE TYPE FROM UCB   HM
**       CLI   0(RWK1),DEV3330       WAS IT A 3330   (MOD 1...)      HM
**       BNE   NOTMOD11    NO, THEN DIFFERENT DEV W. SAME NO. OF TRKSHM
**       LA    RWK1,DEVNAMSZ(,RWK1)   INCREMENT TO SECOND 3330 DEFINIHM
**       ST    RWK1,DEVNAMAD          AND STORE UPDATED VALUE        HM
**       MVC   FC1(12),16(RWK1)     ALSO UPDATE DEVICE FACTORS       HM
**TMOD11 DS    0H                                                    HM
**       SPACE 1                                                     HM
*********** END OF THIS SET OF 3330-11 MODS...    *******************HM
         SPACE 5                                                     HM
* PUT VTOC EXTENT INTO THE TRACK MAP.
         SPACE
         MVC   FB+FBCCHH1(8),DS4VTOCE+2
         LA    RWK1,DS4VTOCE
         BAL   RRET,F13CNVT    GET EXTENT SIZE IN R0
         STH   R0,FB+FBNTRKS
         STH   R0,VTOCSIZE             SAVE N TRACKS IN VTOC
         MVC   FB+FBTTREL1(4),RELTT1   PUT TTREL IN TRACK MAP ENTRY
         MVC   FB+FBEXT(1),DS4VTOCE+1  EXTENT NUMBER
         MVC   FB+FBNAME(4),=A(VTOCNAME)  INSERT ADDR OF NAME FOR VTOC
         LA    RWK1,FB
         BAL   RRET,FILEMAP            PUT ENTRY IN TRACK MAP
         DROP  RDS4
         SPACE 3
* READ FORMAT 5 DSCB'S INTO CORE, CHAINING THEM TOGETHER.  THE FIRST
* ONE FOLLOWS THE FORMAT 4 BLOCK; THE OTHERS ARE EACH ADDRESSED FROM
* THE PRECEDING ONE.
         SPACE
         USING DS5,RDS5
         LA    RWK3,DS5SIZE            SIZE OF BLOCK REQUIRED
         BAL   RRET,GETBLOCK
         ST    RWK2,FMT5ADDR           SAVE ADDR OF FIRST FMT 5 BLOCK
         LR    RDS5,RWK2               SET FORMAT 5 BASE REG
*
         L     R15,=A(IXSUB1)                                       CST
         BALR  RRET,R15                CHECK FOR INDEXED VTOC       CST
         B     DS5JOIN                 INDEXED VTOC. SKIP OBTAINS   CST
*
         BAL   RRET,READSEQ            READ FIRST FMT 5 BLOCK
         BAL   RRET,DISASTER           END FILE NOT EXPECTED HERE
         B     DS5JOIN
         SPACE
DS5LOOP  LA    RWK3,DS5SIZE
         BAL   RRET,GETBLOCK
         ST    RWK2,DS5CHAIN           CHAIN FROM CURRENT TO NEW
         LA    RWK1,DS5PTRDS           ADDR OF DISK ADDRESS
         LR    RDS5,RWK2               UPDATE BASE REG TO NEW BLOCK
*
         CLC   =C'00001',0(RWK1)       LAST FMT5 FROM IX INTERFACE? CST
         BNE   DS5NOIX                 NO. USE OBTAINS.             CST
         L     R15,=A(IXSUB2)                                       CST
         BALR  RRET,R15                CHECK FOR INDEXED VTOC       CST
         B     DS5JOIN                                              CST
         EX    0,*                     SUDDENTLY NOT INDEXED...     CST
*
DS5NOIX  BAL   RRET,READDIR            READ NEW BLOCK
DS5JOIN  CLI   DS5FMTID,X'F5'          MUST BE FORMAT 5, OR ELSE.....
         BNE   BADFMT5                 ERROR, NOT FORMAT 5 BLOCK
         SPACE
         BAL   RRET,F5SPANAL           GO ANALYZE FREE SPACE EXTENTS
         SPACE
         CLC   DS5PTRDS(5),=5X'00'     IS THERE ANOTHER BLOCK TO FOLLOW
         BNE   DS5LOOP                 BRANCH IF YES
         SR    R0,R0                   IF NOT, SET CHAIN OF LAST
         ST    R0,DS5CHAIN               BLOCK TO ZERO
         DROP  RDS5
         SPACE 3
* READ ALL THE FORMAT 1 DSCB'S AND CHAIN THEM IN COLLATING SEQUENCE BY
* DATA SET NAME.  IF THERE ARE FORMAT 3 DSCB'S, THEY ARE READ AND
* CHAINED TO THE FORMAT 1 BLOCK.
         SPACE
         USING DS1,RDS1
F1RDLOOP LA    RWK3,DS1SIZE            LOAD SIZE OF BLOCK REQUIRED
         BAL   RRET,GETBLOCK
         LR    RDS1,RWK2               LOAD BASE REG
F1RDNEXT BAL   RRET,READSEQ            READ NEXT SEQUENTIAL BLOCK
         B     VTRDDONE                EXIT AT END OF FILE
         CLI   DS1FMTID,X'F1'          TEST FOR FORMAT 1
         BNE   F1RDNEXT                IGNORE IF NOT FORMAT 1
         SPACE
         LH    R1,DSCOUNT              COUNT DATA SETS
         LA    R1,1(R1)
         STH   R1,DSCOUNT
         SPACE
         L     RWK1,FMT1ADDR           LOAD BEGINNING OF CHAIN
         L     RWK2,=A(FMT1ADDR-FM1NXTF1)  LOAD CHAIN HISTORY REG
F1SORT   CLC   DS1DSNAM(44),FM1DSNAM(RWK1)  SORT INTO SEQUENCE
         BL    F1THREAD                BRANCH WHEN PLACE IS FOUND
         LR    RWK2,RWK1               UPDATE HISTORY REG
         L     RWK1,FM1NXTF1(RWK1)     FOLLOW CHAIN TO NEXT
         B     F1SORT
         SPACE
F1THREAD ST    RWK1,DS1NXTF1           CHAIN TO FOLLOWING BLOCK
         ST    RDS1,FM1NXTF1(RWK2)     CHAIN FROM PRECEDING BLOCK
         SR    R0,R0                   ZERO CHAIN TO POSSIBLE FORMAT 3
         ST    R0,DS1CHAIN               BLOCK
         CLC   DS1PTRDS,=5X'00'        TEST FOR FORMAT 3 ADDRESS
         SPACE
         BE    F1RDLOOP                BRANCH IF NO
         LA    RWK3,DS3SIZE            LENGTH OF BLOCK FOR FORMAT 3
         BAL   RRET,GETBLOCK
         LR    RDS3,RWK2               BASE REG FOR FMT 3
         USING  DS3,RDS3
         LA    RWK1,DS1PTRDS           ADDRESS OF DISK ADDRESS
F3RD     BAL   RRET,READDIR            READ BLOCK
         CLI   DS3FMTID,X'F3'          TEST FOR FORMAT 3
         BE    F3GOT                   BRANCH IF FOUND
         CLC   DS3PTRDS,=5X'00'        IF NOT 3, TRY FOR ANOTHER
         BE    F1RDLOOP                BRANCH IF NO MORE
         LA    RWK1,DS3PTRDS           ADDRESS OF DISK ADDRESS
         B     F3RD                    TRY AGAIN
F3GOT    ST    RDS3,DS1CHAIN           CHAIN FROM FMT 1 BLOCK
         B     F1RDLOOP                GO GET NEXT FORMAT 1 BLOCK
         DROP  RDS1,RDS3
         SPACE 3
* VTOC IS COMPLETELY READ.  CLOSE READING SUBROUTINE.
         SPACE
VTRDDONE LA    R0,2                    CALL MODE 2 FOR CLOSE
         L     RGO,VTOCREAD            ADDRESS OF XVTCREAD
         BALR  RRET,RGO                BRANCH TO ROUTINE
         EJECT
* EDIT FIRST LINE FROM FORMAT 4 DSCB, DESCRIBING DEVICE PARAMETERS.
         SPACE
         SPACE 2
         USING DS4,RDS4
         L     RDS4,FMT4ADDR
         TM    MODESW,NOHDMASK   SKIP HEADINGS
         BO    DS5OK
         SPACE
         MVC   V1+1(19),=C'DEVICE DESCRIPTION:'
         SPACE
         MVC   V1TYPE(5),=C'TYPE='
         L     RWK1,DEVNAMAD           LOAD ADDRESS OF TABLE FOR DEVICE
         MVC   V1TYPE+5(15),1(RWK1)    INSERT DEVICE NAME IN PRINT LINE
         SPACE
         MVC   V1NOCYL(7),=C'NOCYLS='  NUMBER OF LOGICAL CYLINDERS
         LA    RWK1,DS4DEVSZ
         BAL   RRET,BINALF2
         MVC   V1NOCYL+7(5),BTAALFJ
         SPACE
         MVC   V1TRCYL(9),=C'TRKS/CYL='
         LA    RWK1,DS4DEVSZ+2         TRACKS PER CYLINDER
         BAL   RRET,BINALF2
         MVC   V1TRCYL+9(4),BTAALFJ
         SPACE
         MVC   V1DEVTK(8),=C'TRKSIZE=' LENGTH OF TRACK
         LA    RWK1,DS4DEVTK
         BAL   RRET,BINALF2
         MVC   V1DEVTK+8(5),BTAALFJ
         SPACE
         MVC   V1DEVDT(9),=C'DSCB/TRK='  DSCB'S PER TRACK
         LA    RWK1,DS4DEVDT
         BAL   RRET,BINALF1
         MVC   V1DEVDT+9(3),BTAALFJ
         SPACE
         MVC   V1DEVDB(8),=C'PDS/TRK=' PDS DIRECTORY BLOCKS PER TRACK
         LA    RWK1,DS4DEVDB
         BAL   RRET,BINALF1
         MVC   V1DEVDB+8(3),BTAALFJ
         SPACE
         MVI   V1,PRSP2                PRINT AND SPACE 2
         BAL   RRET,PRINTSUB
         SPACE 3
* EDIT THE SECOND LINE FROM THE FORMAT 4 DSCB, DESCRIBING THE VTOC
* DATA SET.
         SPACE
         MVC   V2+1(17),=C'VTOC DESCRIPTION:'
         SPACE
         MVC   V2DSCBCT(10),=C'NUM DSCBS='  NUMBER OF DSCBS
         SR    R0,R0
         IC    R0,DS4DEVDT             INSERT DSCB'S PER TRACK
         MH    R0,VTOCSIZE             TIMES NUMBER OF VTOC TRACKS
         BAL   RRET,BINALFR
         MVC   V2DSCBCT+10(5),BTAALFJ
         SPACE
         MVC   V2DSCBAV(12),=C'AVAIL DSCBS='  NUM UNUSED DSCB'S
         LA    RWK1,DS4DSREC
         TM    DS4VTOCI,DS4IVTOC       INDEXED VTOC?                CST
         BNO   *+8                     NO. SKIP.                    CST
         L     RWK1,=A(IXFRDSCB)       YES. DS4DSREC NOT VALID      CST
         BAL   RRET,BINALF2
         MVC   V2DSCBAV+12(5),BTAALFJ
         SPACE
         MVC   V2VTEXT(12),=C'VTOC EXTENT='  VTOC TRACK ADDRESSES
         MVI   V2VTEXT+16,C'.'
         MVI   V2VTEXT+21,C'-'
         MVI   V2VTEXT+26,C'.'
         UNPK  HEXWORK(15),DS4VTOCE+2(8)
         TR    HEXWORK(15),HEXEDTAB
         MVC   V2VTEXT+12(4),HEXWORK
         MVC   V2VTEXT+17(4),HEXWORK+4
         UNPK  HEXWORK(15),DS4VTOCE+6(8)
         TR    HEXWORK(15),HEXEDTAB
         MVC   V2VTEXT+22(4),HEXWORK
         MVC   V2VTEXT+27(4),HEXWORK+4
         SPACE
         MVC   V2NUMALT(7),=C'NUMALT=' NUMBER OF ALTERNATE TRACKS
         LA    RWK1,DS4NOATK
         BAL   RRET,BINALF2
         MVC   V2NUMALT+7(5),BTAALFJ
         SPACE
         MVC   V2NXTALT(13),=C'NEXTALT=    .'  ADDRESS OF NEXT ALT TRK
         UNPK  HEXWORK(15),DS4HCCHH(8)
         TR    HEXWORK(15),HEXEDTAB
         MVC   V2NXTALT+8(4),HEXWORK
         MVC   V2NXTALT+13(4),HEXWORK+4
         SPACE
         MVI   V2,PRSP2                PRINT AND SPACE 2
         BAL   RRET,PRINTSUB
         SPACE 3
         SPACE 3
* IF VTOC IS INDEXED FORMAT, PRINT AVAILABLE VIRS
         TM    DS4VTOCI,DS4IVTOC       INDEXED FORMAT VTOC?       CST
         BNO   CKAVAIL                 IF NOT, SKIP               CST
         L     R1,=A(IXHEAD)           POINT TO IX HEADER LINE    CST
         MVC   PL+1(IXHEADL),0(R1)     MOVE TO PRINT BUFFER       CST
         L     R2,=A(IXCT2)            POINT TO #FREE VIRS        CST
         L     R0,0(,R2)               LOAD #                     CST
         BAL   RRET,BINALFR            CVT TO CHAR                CST
         MVC   PL+1+IXHEADL(4),BTAALFJ MOVE TO PRINT BUFFER       CST
         MVI   V3,PRSP2                SPACE 2                    CST
         BAL   RRET,PRINTSUB           PRINT LINE                 CST
* PRINT A LINE SUMMARIZING THE AVAILABLE SPACE DESCRIBED IN FORMAT
* 5 DSCB'S.
         SPACE
CKAVAIL  MVC   V3+1(16),=C'AVAILABLE SPACE:'
         SPACE
         LH    R0,FREETRKS             TOTAL NUMBER OF FREE TRACKS
         BAL   RRET,BINALFR
         MVC   V3FRTRKS(5),BTAALF+7
         MVC   V3FRTRKS+6(9),=C'TRACKS IN'
         SPACE
         LH    R0,F5EXTNTS             NUMBER OF FREE EXTENTS
         BAL   RRET,BINALFR
         MVC   V3FREXTS(4),BTAALF+8
         MVC   V3FREXTS+5(18),=C'EXTENTS, INCLUDING'
         SPACE
         LH    R0,FREECYLS             NUMBER OF FREE FULL CYLINDERS
         BAL   RRET,BINALFR
         MVC   V3FRCYLS(4),BTAALF+8
         MVC   V3FRCYLS+5(15),=C'FULL CYLINDERS.'
* DISPLAY VTOC INDICATORS IN HEX... (DIRF, BOS, ETC.)
         SPACE 2
         LA    RWK2,DS4VTOCI   LOCATION TO BE TRANS'ED
         LA    RWK3,V3FRCYLS+5+15+3+16   LOCATION FOR HEX VALUE
         LA    RWK4,4   NUMBER OF BYTES TO EDIT
         BAL   RRET,DUMPEDIT   GO EDIT FIELD
         MVC   V3FRCYLS+5+15+3(16),=C'VTOC INDICATORS='
         MVC   V3FRCYLS+5+15+3+16+2(6),=8C' '  CLEAR GARBAGE AT END
         SPACE 3
         MVI   V3,PRSP2                PRINT AND SPACE 2
         BAL   RRET,PRINTSUB
         SPACE 3
* IF BOS CONTAMINATION FLAG IS ON, WARN USER, AND FORCE TRACK MAP LIST.
         SPACE
         TM    DS4VTOCI,DS4IVTOC       INDEXED FORMAT VTOC?       CST
         BO    DS5OK                   IF NOT, CHECK FOR DOS BIT  CST
         TM    DS4VTOCI,DS4DOSBT       TEST IF BOS BIT IS ON
         BZ    DS5OK                   BRANCH IF NOT
         OI    MODESW,MAPMASK          FORCE TRACK MAP LISTING
         XPRNTLIN  PWA,TEXT=DS5WARN,LENGTH=L'DS5WARN,SPA=2
DS5OK    DS    0H
         SPACE 3
* IF THE DUMP SWITCH IS ON, EDIT THE FORMAT 4 AND 5 BLOCKS IN HEX.
         SPACE
         TM    MODESW,DUMPMASK
         BZ    F5DONE
         SPACE
         LR    RWK1,RDS4               ADDRESS OF FORMAT 4 BLOCK
         LA    RWK2,DS4FDAD              AND ITS DISK ADDRESS
         BAL   RRET,DUMPDSCB
         SPACE
         USING DS5,RDS5
         L     RDS5,FMT5ADDR           ADDRESS OF FIRST BLOCK
DUMP5LUP LTR   RDS5,RDS5               TEST FOR END OF CHAIN
         BZ    DUMP5DON
         LR    RWK1,RDS5               ADDRESS OF DSCB
         LA    RWK2,DS5FDAD              AND ITS DISK ADDRESS
         BAL   RRET,DUMPDSCB           GO TO PRINT IN HEX
         L     RDS5,DS5CHAIN           FOLLOW CHAIN TO NEXT BLOCK
         B     DUMP5LUP
         SPACE
DUMP5DON XPRSPACE  PWA,LINES=2         SPACE UP TWO LINES
         SPACE
F5DONE   DS    0H
         DROP  RDS4,RDS5
         SPACE 3
         EJECT
*************************
* FORMAT 1 EDITING LOOP *
*************************
         SPACE
* NOW ALL FORMAT 1 DSCB'S ARE IN CORE WITH THEIR OPTIONAL FORMAT 3
* BLOCKS ATTACHED.  EDIT ONE LINE FOR EACH, THEN DUMP THE BLOCKS IN
* HEX IF THE DUMP SWITCH IS ON.
         SPACE 2
         USING DS1,RDS1
         USING DS3,RDS3
F1EDIT   L     RDS1,=A(FMT1ADDR-FM1NXTF1)  LOAD CHAIN BEGINNING
*
*   TEST FOR NO DS LISTING AND SKIP HEADING IF SO.
         TM    MODESW,NODSMASK   NO DATA SETS ONLY
         BO    F1EDLOOP     SKIP HEADING...
         SPACE 2
*
         SPACE
* PRINT SUB-HEADING LINES ON PAGE FOLLOWING FORMAT 4 AND 5 INFO, AND
* SET UP PRINTING ROUTINE TO PRINT SUB-HEAD ON SUBSEQUENT PAGES.
         SPACE
         XPRLIST  PWA,LIST=(F1SA,F1SB) PRINT SUB-HEADING LINES
         SPACE
         XPRHEAD  PWA,LIST=(F1HD2,F1SA,F1SB)  SET UP FULL HEADING
         SPACE 3
* BEGIN EACH NEW DATA SET HERE:
         SPACE
F1EDLOOP L     RDS1,DS1NXTF1           FOLLOW CHAIN TO NEXT BLOCK
         CLC   DS1DSNAM(44),LASTFMT1   CHECK FOR CHAIN TERMINATOR
         BE    ENDF1                   BRANCH AT END
         L     RDS3,DS1CHAIN           LOAD FORMAT 3 ADDRESS
         SPACE
         BAL   RRET,F1SPANAL           ANALYZE SPACE OCCUPIED
         SPACE 3
********************************************************
*  TEST FOR NO DATA SET PRINTING.                      *
********************************************************
         SPACE
         TM    MODESW,NODSMASK    NO DATA SET LISTING...
         BO    F1PDSDON    NO DATA SETS OR PDS'S LISTED
         TM    MODESW,DS1MASK   RESTRICT TO ONE DATA SET?
         BZ    PALLDS    NO, REGULAR
         L     RRET,DSN1PTR
         CLC   DS1DSNAM,0(RRET)   TEST AGAINST DSN ON JCL
         BNE   F1PDSDON   NOT CHOSEN D.S.  SKIP
         SPACE 3
         SPACE
* TEST PAGE BALANCE TO BE SURE ALL OUTPUT FOR A DATA SET WILL APPEAR
* ON THE SAME PAGE.
         SPACE
PALLDS   LA    RWK1,1                  AT LEAST 1 LINE ALWAYS NEEDED
         TM    MODESW,DUMPMASK         TEST FOR DUMP
         BZ    F1TEST                  BRANCH IF ONLY 1 LINE
         AH    RWK1,=H'4'              ADD 4 FOR FORMAT 1 BLOCK DUMP
         LTR   RDS3,RDS3               TEST FOR PRESENCE OF FORMAT 3
         BZ    F1TEST
         AH    RWK1,=H'4'              ADD 4 FOR FORMAT 3 BLOCK
F1TEST   BAL   RRET,PAGECHEK
         SPACE 3
* PRINT ONE LINE OF INFORMATION FROM A FORMAT 1 DSCB.
         SPACE
         MVC   F1DSNAM(44),DS1DSNAM    DATA SET NAME
         SPACE
         CLI   DS1REFD,X'63'           CHECK
         BNH   XHEX                     FOR
         TM    DS1REFD+2,X'0F'           NON-JULIAN
         BNO   XHEX                       FORMAT
         XC    DECDATE(8),DECDATE      CLEAR DOUBLE WORD
         MVC   DECDATE+5(3),DS1REFD    MOVE JULIAN DATE
         LA    R1,DECDATAD             -> DOUBLE WORD
         L     RGO,VDATEDIT            V(XDATEDIT)
         BALR  RRET,RGO                FORMAT JULIAN DATE
         MVC   F1REFD(8),DECDATE       MOVE FORMATED DATE
         B     XCREDT
XHEX     LA    RWK1,DS1REFD            SU 60 HEX FORMAT DATE
         LA    RWK2,F1REFD             -> RECEIVING FIELD
         BAL   RRET,VTDATED            FORMAT HEX FORMAT DATE
         SPACE
XCREDT   LA    RWK1,DS1CREDT           ADDRESS OF CREATION DATE
         LA    RWK2,F1CREDT
         BAL   RRET,VTDATED
         SPACE
         LA    RWK1,DS1EXPDT           ADDRESS OF EXPIRATION DATE
         LA    RWK2,F1EXPDT
         BAL   RRET,VTDATED
         SPACE
         LA    RWK1,F1DSORG            ADDR OF DATA SET ORG FIELD
         TM    MODESW1,DSORGMSK
         BZ    NODSORG   BYPASS TEST FOR SPECIFIC DSORG
         MVC   TSTDSORG,DS1DSORG   PREPARE THE FILTER
         NC    TSTDSORG,DSORGSW   FILTER SET
         BNZ   NODSORG  SOME KIND OF HIT
         MVI   PL+1,C' '   CLEAR LINE OF WHAT'S THERE
         MVC   PL+2(131),PL+1   AND CONTINUE
         B     F1PDSDON   GO GET NEXT
         SPACE 5
TM2BEX   TM    DS1DSORG,0   TM TO BE 'EXECUTED BELOW'
         SPACE 2
NODSORG  DS    0H
         L     R1,DSORGTBA   POINT AT DSORG TABLE
         LA    RRET,DSORGEND   HOW MANY ENTRIES
LOOPDSOG IC    R15,2(R1)   GET CODED DSORG
         EX    R15,TM2BEX   EXECUTE TM FOR DSORG
         BZ    *+14   NOT THIS TIME
         MVC   0(2,RWK1),0(R1)   MOVE EBCDIC TYPE
         B     NOTU  FOUND A MATCH, GET OUT
         LA    R1,3(,R1)  BUMP TO NEXT ENTRY
         BCT   RRET,LOOPDSOG   GO FOR MORE
* NEVER MIND -- IF DROPPING THRU, LEAVE IT BLANK
         SPACE 3
NOTU     DS    0H
         SPACE
         UNPK  HEXWORK(15),DS1OPTCD(8) OPTION CODE, IN HEX
         TR    HEXWORK(15),HEXEDTAB
         MVC   F1OPTCD(2),HEXWORK
         SPACE
         LA    RWK1,F1RECFM            ADDR OF RECORD FORMAT FIELD
         TM    DS1RECFM,X'C0'
         BZ    RECFMUP                 ZEROS NOT DEFINED
         MVI   0(RWK1),C'U'
         BO    RECFMUP                 11 IS FORMAT 'U'
         TM    DS1RECFM,X'80'          WE NOW KNOW IT'S MIXED
         MVI   0(RWK1),C'F'            10 IS FORMAT 'F'
         BO    RECFMUP
         MVI   0(RWK1),C'V'            01 IS FORMAT 'V'
RECFMUP  LA    RWK1,1(RWK1)
         TM    DS1RECFM,X'20'          TEST TRACK OVERFLOW
         BZ    RECFMB
         MVI   0(RWK1),C'T'
         LA    RWK1,1(RWK1)
RECFMB   TM    DS1RECFM,X'10'          TEST FOR BLOCKED
         BZ    RECFMS
         MVI   0(RWK1),C'B'
         LA    RWK1,1(RWK1)
RECFMS   TM    DS1RECFM,X'08'          TEST FOR STANDARD BLOCKS
         BZ    RECFMAM
         MVI   0(RWK1),C'S'
         LA    RWK1,1(RWK1)
RECFMAM  TM    DS1RECFM,X'06'          TEST CONTROL CHAR TYPE
         BC    11,RECFME               BRANCH IF NOT MIXED
         TM    DS1RECFM,X'04'
         MVI   0(RWK1),C'A'
         BO    RECFME
         MVI   0(RWK1),C'M'
RECFME   DS    0H
         SPACE
         LA    RWK1,DS1BLKL            BLOCK SIZE
         BAL   RRET,BINALF2
         MVC   F1BLKL(5),BTAALF+7
         SPACE
         LA    RWK1,DS1LRECL           LOGICAL RECORD LENGTH
         BAL   RRET,BINALF2
         MVC   F1LRECL(5),BTAALF+7
         SPACE
         LA    RWK1,DS1KEYL            KEY LENGTH
         BAL   RRET,BINALF1
         MVC   F1KEYL(3),BTAALF+9
         SPACE
         L     R0,F1TRCNT              ALLOCATION SIZE IN TRACKS
         BAL   RRET,BINALFR
         MVC   F1TRALOC(5),BTAALF+7
         SPACE
         CLC   DS1LSTAR(3),=XL3'00'
         BE    NONEUSED
         NC    F1TRCNT(4),F1TRCNT      SEE IF ANY TRACKS ASSIGNED
         BZ    NONEUSED                NO; THEN NONE CAN BE USED
         LH    R0,DS1LSTAR             TRACKS ACTUALLY USED
         AH    R0,=H'1'
         BAL   RRET,BINALFR
         MVC   F1TRUSE(5),BTAALF+7
NONEUSED DS    0H
         SPACE
         LA    RWK1,DS1NOEPV           NUMBER OF EXTENTS
         BAL   RRET,BINALF1
         MVC   F1NOEPV(2),BTAALF+10
         SPACE
         LA    RWK1,DS1SCALO+1         SECONDARY QUANTITY SIZE
         BAL   RRET,BINALF3
         MVC   F1SCALO(5),BTAALF+7
         SPACE
         TM    DS1SCALO,X'C0'          TYPE OF SPACE ALLOCATION
         BC    14,NOTCYL               BR IF NOT ONES
         MVI   F1ALCTYP,C'C'           CYLINDER
         B     SCALDONE
NOTCYL   BC    7,NOTABSTR              BR IF NOT ZEROS
         MVI   F1ALCTYP,C'A'           ABSOLUTE TRACK
         B     SCALDONE
NOTABSTR TM    DS1SCALO,X'80'          NOW KNOW IT IS MIXED
         BO    TRKALO
         MVI   F1ALCTYP,C'B'           BLOCK
         B     SCALDONE
TRKALO   MVI   F1ALCTYP,C'T'           TRACK
SCALDONE DS    0H
*  FINAL CHECK FOR CATALOG DATA SETS...
         CLC   =C'SYSCTLG ',DS1DSNAM  IS IT A SYSTEM CATLOG
         B     NOTCOOLC   NOT A COOL CAT...  ***BNE CHANGED TO B ***
*                         CAMLST TTR DOES NOT WORK ON REL 3 OF MVS
         L     R15,=A(CATLGCK)   ADDRESS OF CATLOG READER
         BALR  RRET,R15   GO CHECK IT OUT
NOTCOOLC DS    0H   ALL DONE...
         SPACE
* EACH DATA SET LINE IS SINGLE-SPACED, UNLESS FOLLOWED BY A DUMP OR
* PDS MEMBER LISTING.
         SPACE
         MVI   F1A,PRSP1
         TM    MODESW,DUMPMASK         TEST IF DUMP FOLLOWS
         BO    F1PRINT2                YES, DOUBLE SPACE
         TM    MODESW,NOMMASK+PDSLMASK  TEST IF MEMBER LISTING ON
         BNM   F1PRINT1  BRANCH IF ONLY PDS DIRECTORY
         TM    DS1DSORG,PODSORG        TEST IF THIS DS PARTITIONED
         BZ    F1PRINT1                NO, SINGLE SPACE
F1PRINT2 MVI   F1A,PRSP2               DOUBLE SPACE
F1PRINT1 BAL   RRET,PRINTSUB           PRINT THE LINE
         SPACE
* IF DUMP SWITCH IS SET, EDIT THE DSCB'S IN HEX.
         SPACE
         TM    MODESW,DUMPMASK
         BZ    F1DMPDON                BRANCH IF NO DUMP
         SPACE
         LA    RWK1,DS1                DUMP FORMAT 1 DSCB
         LA    RWK2,DS1FDAD
         BAL   RRET,DUMPDSCB
         SPACE
         LTR   RDS3,RDS3               TEST FOR FORMAT 3 BLOCK
         BZ    F1DMPDON
         LA    RWK1,DS3
         LA    RWK2,DS3FDAD
         BAL   RRET,DUMPDSCB
         SPACE
F1DMPDON DS    0H
         SPACE
* IF THE PDS SWITCH IS SET AND THIS IS A PDS, EDIT ITS DIRECTORY.
         SPACE
         TM    MODESW,PDSLMASK         TEST IF LISTING CALLED FOR
         BZ    F1PDSDON
         TM    DS1DSORG,PODSORG        TEST IF PARTITIONED
         BZ    F1PDSDON
         TM    DS1DSIND,X'14'          IS READ PROTECTION ON?
         BM    F1PDSDON                YES, SKIP LIST
         LA    RWK1,DS1DSNAM
         BAL   RRET,PDSLIST            CALL LISTING SUBROUTINE
F1PDSDON DS    0H
         B     F1EDLOOP
         SPACE 3
* END DATA SET LISTING.  PRINT A LINE GIVING THE NUMBER OF DATA SETS.
         SPACE
ENDF1    DS    0H
         TM    MODESW,NOHDMASK   NO HEADING, THEREFORE NO TRAILER
         BO    MAPEDIT
         MVC   PL+49(14),=C'<<<<< END VTOC'
         LH    R0,DSCOUNT
         BAL   RRET,BINALFR
         MVC   PL+64(4),BTAALF+8
         MVC   PL+69(15),=C'DATA SETS >>>>>'
         SPACE
         XPRNTLIN  PWA,TEXT=PL+1,LENGTH=132,SPB=1,SPA=0
         SPACE
         MVI   PL+1,C' '               BLANK PRINT LINE
         MVC   PL+2(131),PL+1
         SPACE 3
         DROP  RDS1,RDS3
         EJECT
**********************
* TRACK MAP PRINTING *
**********************
         SPACE
* START A FRESH PAGE AND PRINT THE TRACK MAP FROM CORE, ONE LINE
* PER ENTRY.
         SPACE 2
         USING MB,RMB
MAPEDIT  TM    MODESW,MAPMASK          TEST IF MAP WANTED
         BZ    ENDVOL                  BRANCH IF NOT
         SPACE
         XPREJECT  PWA                 SKIP TO FRESH PAGE
         SPACE
         MVC   TMHSER1(6),VOLUME       PUT VOLUME SERIAL IN HEADING
         MVC   TMHSER2(6),VOLUME
         XPRHEAD  PWA,LIST=(TMHEAD,TMSA,TMSB)  SET UP HEADING LINES
         SPACE
         L     RMB,MBBASE              BEGINNING OF ENTRY CHAIN
         L     RWK3,=F'-1'             CLEAR HIGHEST TTREL FOUND
         SR    RWK4,RWK4               CLEAR TRACK COUNTER
         SPACE
MAPELOOP CLC   MBCCHH1(4),MBTERM       TEST FOR END OF CHAIN
         BE    ENDMAPED
         SPACE
* CHECK EACH EXTENT FOR POSSIBLE ERRORS.  BEGIN BY SEEING THAT THE
* HIGHER RELATIVE TRACK NUMBER DOES NOT EXCEED THE NUMBER OF TRACKS IN
* THE VOLUME, AND THAT THE LOWER TTREL DOES NOT EXCEED THE HIGHER ONE.
         SPACE
TESTEX   CLC   MBTTREL2(2),FMAXTT      TEST 2ND FOR MAX
         BNL   EXINVAL                 EXTENT INVALID IF HIGH
         CLC   MBTTREL1(2),MBTTREL2    TEST IF LOWER NOT > HIGHER
         BH    EXINVAL                 INVALID IF SO
         SPACE
* TEST THAT LOWER TTREL IS ONE GREATER THAN THE PREVIOUS HIGHEST TTREL.
         SPACE
         LH    R0,MBTTREL1             GET CURRENT LOWER TTREL
         SR    R0,RWK3                 SUBTRACT HIGHEST TTREL TO DATE
         S     R0,=F'1'
         BZ    EXOK                    OK IF EQUAL
         BP    TMISSING                POSITIVE MEANS MISSING TRACKS
         SPACE
* A NEGATIVE DIFFERENCE INDICATES AN OVERLAP WITH A PREVIOUS EXTENT.
* FLAG THE CURRENT EXTENT, AND SET THE HIGH WATER MARK FROM IT ONLY IF
* LARGER THAN THE CURRENT VALUE.
         SPACE
         MVC   TMERROR-7(7),=C'OVERLAP'
         CH    RWK3,MBTTREL2           TEST AGAINST PREVIOUS MARK
         BNL   BYPWK3                  BRANCH IF SMALLER
         SPACE
* UPDATE THE HIGH-WATER MARK AND ACCUMULATE THE NUMBER OF TRACKS WHICH
* HAVE BEEN ACCOUNTED FOR.
         SPACE
EXOK     LH    RWK3,MBTTREL2           UPDATE HIGHEST TRACK YET
BYPWK3   LH    R0,MBNTRKS              LOAD N TRACKS IN EXTENT
         AR    RWK4,R0                 ACCUMULATE
         BAL   RRET,BINALFR            CONVERT N TO ALPHA FOR PRINTING
         MVC   TMEXTSIZ(5),BTAALF+7    PUT IN PRINT LINE
         B     EDITCCHH                CONTINUE WITH EDITING
         SPACE
* FLAG INVALID EXTENTS AND BYPASS HIGHEST TRACK AND COUNT UPDATING.
         SPACE
EXINVAL  MVC   TMERROR-14(14),=C'INVALID EXTENT'
         B     EDITCCHH
         SPACE
* WHEN TRACKS ARE MISSING, INDICATE HOW MANY BEFORE PRINTING THE
* NEXT EXTENT NORMALLY.
         SPACE
TMISSING BAL   RRET,BINALFR            EDIT N MISSING TRACKS TO ALF
         MVC   TMERROR-14(14),=C'TRACKS MISSING'
         MVC   TMERROR-20(5),BTAALF+7  INSERT N MISSING IN PRINT LINE
         MVI   TM1,PRSP1
         BAL   RRET,PRINTSUB           PRINT ERROR MESSAGE
         B     EXOK
         SPACE 3
EDITCCHH DS    0H  EDIT TRK ADDRESS IF NECESSARY
         TM    MODESW,MEOMASK+DS1MASK   IS IT NECESSARY
         BZ    GOAHEAD   YES IT IS...
         TM    MODESW,DS1MASK
         BZ    COTEM   CHECK ONLY TRACK ERRORS
         L     R1,MBNAME   POINT AT DATA SET NAME
         L     RRET,DSN1PTR   POINT AT CHOSEN DATA SET
         CLC   0(44,R1),0(RRET)  IS IT A DATA SET MATCH?
         BE    GOAHEAD   YES, GO AHEAD AND PRINT IT...
COTEM    CLI   TMERROR,C' '   IS IT AN ERROR TRACK
         BE    NEXTTME   IF BLANK, NOT AN ERROR-DO NOT PRINT
         SPACE 1
* INSERT LOWER AND UPPER ADDRESSES IN CCHH FORM, AND ADD DATA SET NAME.
         SPACE
GOAHEAD  UNPK  HEXWORK(15),MBCCHH1(8)  FIRST TRACK ADDRESS
         TR    HEXWORK(15),HEXEDTAB
         MVC   TMCCHH1(4),HEXWORK
         MVI   TMCCHH1+4,C'.'
         MVC   TMCCHH1+5(4),HEXWORK+4
         SPACE
         UNPK  HEXWORK(15),MBCCHH2(8)  ADDR OF LAST TRACK
         TR    HEXWORK(15),HEXEDTAB
         MVC   TMCCHH2(4),HEXWORK
         MVI   TMCCHH2+4,C'.'
         MVC   TMCCHH2+5(4),HEXWORK+4
         SPACE
         TM    MBEXT,X'FF'             TEST IF NO EXTENT NUMBER
         BO    TMBLEXT
         SR    R0,R0
         IC    R0,MBEXT
         AH    R0,=H'1'
         BAL   RRET,BINALFR
         MVC   TMEXTNO(2),BTAALF+10
TMBLEXT  DS    0H
         SPACE
         L     R1,MBNAME               ADDRESS OF DSNAME
         MVC   TMDSNAM(44),0(R1)
         SPACE
         MVI   TM1,PRSP1               PRINT AND SPACE 1
         BAL   RRET,PRINTSUB
NEXTTME  L     RMB,MBCHAIN             FOLLOW CHAIN TO NEXT BLOCK
         B     MAPELOOP
         SPACE 2
* END OF MAP.  CHECK THAT THE LAST ENTRY BROUGHT US TO THE LAST
* PRIMARY TRACK.
         SPACE
ENDMAPED LH    R0,FMAXTT               LOAD LAST TRK +1
         SR    R0,RWK3                 TEST AGAINST HIGHEST FOUND
         S     R0,=F'1'
         BNP   ENDMAPPR                BRANCH IF ALL FOUND
         SPACE
* SOME TRACKS ARE MISSING, SO PRINT A WARNING.
         SPACE
         BAL   RRET,BINALFR            EDIT NUMBER MISSING
         MVC   TMERROR-14(14),=C'TRACKS MISSING'
         MVC   TMERROR-20(5),BTAALF+7
         MVI   TM1,PRSP1
         BAL   RRET,PRINTSUB           PRINT ERROR MESSAGE
         SPACE
ENDMAPPR DS    0H
         LR    R0,RWK4                 LOAD TRACK COUNT
         BAL   RRET,BINALFR            EDIT TO ALPHA
         MVC   TMEXTSIZ(5),BTAALF+7
         MVC   TMEXTSIZ+7(20),=C'TRACKS ACCOUNTED FOR'
         SPACE
         XPRNTLIN  PWA,TEXT=PL+1,LENGTH=132,SPB=1,SPA=2
         SPACE
         MVI   PL+1,C' '
         MVC   PL+2(131),PL+1
         SPACE
         MVC   PL+52(28),=C'<<<<< END OF TRACK MAP >>>>>'
         MVI   PL,PRSP0
         BAL   RRET,PRINTSUB
         SPACE
         DROP  RMB
         SPACE 6
* END OF VOLUME LISTINGS
         SPACE
ENDVOL   DS    0H
         BAL   RRET,GBRESET            RELEASE DSCB CORE
         SPACE
         B     NEWVOL
         EJECT
**************************
* ERROR MESSAGE PRINTING *
**************************
         SPACE
* ERRORS WHILE TRYING TO OPEN THE VTOC:
         SPACE
NODDCARD MVC   PL+41(19),=C'CANNOT FIND DD CARD'
         B     PRERR1
         SPACE
NOTDACC  MVC   PL+41(27),=C'DEVICE IS NOT DIRECT ACCESS'
         B     PRERR1
         SPACE
UNKNDEV  MVC   PL+41(19),=C'UNKNOWN DEVICE TYPE'
         B     PRERR1
         SPACE
CANTOPEN MVC   PL+41(27),=C'ATTEMPT TO OPEN VTOC FAILED'
         B     PRERR1
         SPACE
PRERR1   MVC   PL+10(28),=C'ERROR CONCERNING "VOLUME01":'
         MVC   PL+28(8),DDNAME
         MVI   PL,PRSP3
         BAL   RRET,PRINTSUB
         LA    R0,4                    SET RETURN CODE OF 4
         C     R0,RETCODE
         BL    *+8
         ST    R0,RETCODE
         B     NEWVOL
         SPACE 3
* ERRORS IN DSCB FORMAT:
         SPACE
FRSTNOT4 MVC   PL+41(21),=C'FIRST DSCB NOT TYPE 4'
         LA    RWK1,RDS4               ADDRESS OF BAD BLOCK
         B     PRERR2
         SPACE
BADFMT5  MVC   PL+41(33),=C'BAD DSCB, SHOULD HAVE BEEN TYPE 5'
         LA    RWK1,RDS5               ADDRESS OF BAD BLOCK
         B     PRERR2
         SPACE
* PRINT ERROR MESSAGE AND DUMP BAD BLOCK.
         SPACE
PRERR2   MVC   PL+10(28),=C'ERROR CONCERNING "VOLUME01":'
         MVC   PL+28(8),DDNAME
         MVI   PL,PRSP3
         BAL   RRET,PRINTSUB
         SPACE
         LA    RWK2,140(RWK1)          ADDR OF FULL DISK ADDRESS
         BAL   RRET,DUMPDSCB           DUMP BAD BLOCK IN HEX
         SPACE
* CLOSE THIS VTOC, SET RETURN CODE, AND GO ON TO NEXT VOLUME.
         SPACE
         LA    R0,2                    CALL MODE 2 FOR CLOSE
         L     RGO,VTOCREAD            ADDRESS OF ROUTINE
         BALR  RRET,RGO                BRANCH TO XVTCREAD
         SPACE
         LA    R0,8                    SET RETURN CODE OF 8
         C     R0,RETCODE
         BL    *+8
         ST    R0,RETCODE
         B     NEWVOL                  CONTINUE WITH NEXT VOLUME
         EJECT
*******************************************
* PARTITIONED DATA SET DIRECTORY PRINTING *
*******************************************
         SPACE
* ENTER THIS ROUTINE WITH THE NAME OF A PARTITIONED DATA SET AT (RWK1).
* THE DDNAME REFERRING TO THE PROPER VOLUME IS ALREADY SET UP IN THE
* DCB.  LIST THE MEMBER ENTRYS FROM THE DIRECTORY, AND PRINT THE
* NUMBER OF MEMBERS, THE NUMBER OF BLOCKS, AND THE NUMBER OF BLOCKS
* ACTUALLY USED.
         SPACE 2
PDSLIST  ST    RRET,PDSEXIT            SAVE RETURN ADDRESS
         STM   RWK1,RWK4,PDSSAVE         AND WORK REGISTERS
         SPACE
* THE JFCB FOR THIS VOLUME IS ALREADY IN CORE, HAVING BEEN READ WHEN
* THE VTOC WAS OPENED.
         SPACE
         L     R1,JFCBADR              SET UP JFCB BASE REG
         USING JFDUMMY,R1
         MVC   JFCBDSNM(44),0(RWK1)    INSERT DATA SET NAME
         DROP  R1
         SPACE
         LM    R2,R3,=CL8'NOUSAGE '    PREVENT SETTING DATA SET USAGE
         OPEN  (PDSDCB,(INPUT)),TYPE=J
         L     RRET,PDSDCBA   ADDRESS OF DCB                        MS
         USING IHADCB,RRET                                          MS
         TM    DCBOFLGS,DCBOFOPN      SUCCESSFUL OPEN ?             MS
         BO    OPENOK                 YES                           MS
         DROP  RRET                                                 MS
         MVC   PL+10(28),=C'UNABLE TO OPEN PDS DIRECTORY'           MS
         MVI   PL,PRSP1                                             MS
         BAL   RRET,PRINTSUB      GO PRINT ERROR MSG                MS
         B     PDSDONE                                              MS
         SPACE
OPENOK   MVI   JFCBADR,X'87'  NULLIFY EXIT FOR OPEN ERROR           MS
         SR    R0,R0                   RESET VARIOUS COUNTERS
         STH   R0,PDSBAL
         STH   R0,PDSDIRCT             DIRECTORY BLOCK COUNT
         STH   R0,PDSDIRUS             BLOCKS USED
         STH   R0,PDSMEMCT             MEMBER COUNT
         STH   R0,PDSALCT              ALIAS COUNT
         SPACE
* GET A MEMBER FROM THE DIRECTORY, SETTING REGISTER 'RPDS' TO IT.
         SPACE
GETPDS   LH    R0,PDSBAL               LOAD BALANCE IN CURRENT BLOCK
         LTR   R0,R0                   TEST FOR ZERO
         BP    PDSBALOK                BR IF BLOCK NOT EMPTY
         SPACE
         READ  PDSECB,SF,PDSDCB,PDSBUF    READ A DIRECTORY BLOCK
         SPACE
         CHECK PDSECB
         SPACE
         L     RWK1,=A(PDSBUF)
         USING PDSBUF,RWK1
         LH    R1,PDSDIRCT             COUNT DIRECTORY BLOCKS
         LA    R1,1(R1)
         STH   R1,PDSDIRCT
         LH    R0,PDSLRECL             SET BLOCK BALANCE FROM LOGICAL
         SH    R0,=H'2'                  BLOCK LENGTH FIELD
         STH   R0,PDSBAL
         LA    R1,PDSDATA              SET PDSCLC TO BEGINNING OF BLOCK
         ST    R1,PDSCLC
         B     GETPDS                  TEST BALANCE....
         DROP  RWK1
         SPACE 2
         USING DIRBLOCK,RPDS
PDSBALOK L     RPDS,PDSCLC             LOAD ADDRESS OF DIRECTORY ENTRY
         IC    RWK1,DIRC               GET USER DATA LENGTH
         N     RWK1,=F'31'
         SLL   RWK1,1
         LR    R1,RPDS                 UPDATE BLOCK CLC
         AR    R1,RWK1
         LA    R1,12(R1)
         ST    R1,PDSCLC
         LH    R1,PDSBAL               DECREMENT BLOCK BALANCE
         SR    R1,RWK1
         SH    R1,=H'12'
         STH   R1,PDSBAL
         SPACE
         CLC   DIRNAME(8),=8X'FF'      TEST FOR LAST NAME
         BNE   EDITMEMB
         MVC   PDSDIRUS(2),PDSDIRCT    SAVE COUNT OF BLOCKS USED
         B     GETPDS                  READ ALL BLOCKS TO GET COUNT
         SPACE
* EDIT A LINE FOR THE MEMBER.  IF THE USER DATA WAS MORE THAN 44 BYTES,
* A SECOND LINE IS REQUIRED.
         SPACE
EDITMEMB MVC   PDSMEMB(8),DIRNAME      MEMBER OR ALIAS NAME TO PRINTLIN
         TM    DIRC,ALIASMSK           TEST IF ALIAS
         BZ    NOTALIAS                BRANCH IF NOT ALIAS
         SPACE
         LH    R1,PDSALCT              COUNT ALIASES
         LA    R1,1(R1)
         STH   R1,PDSALCT
         MVI   PDSALIAS,C'A'           MARK ALIAS IN PRINT LINE
         B     PDSTTRED
         SPACE
NOTALIAS LH    R1,PDSMEMCT             COUNT MEMBER NAMES
         LA    R1,1(R1)
         STH   R1,PDSMEMCT
         SPACE
PDSTTRED DS    0H
         TM    MODESW,NOMMASK   SKIP MEMBER LISTING?
         BO    GETPDS     YEP
         SPACE
         UNPK  HEXWORK(15),DIRTTR(8)   EDIT RELATIVE TRACK ADDRESS
         TR    HEXWORK(15),HEXEDTAB
         MVC   PDSTTR(4),HEXWORK
         MVI   PDSTTR+4,C'.'
         MVC   PDSTTR+5(2),HEXWORK+4
         SPACE
         IC    R0,DIRC                 EDIT NUMBER OF TTR'S
         SRL   R0,5
         N     R0,=F'3'
         STC   R0,PDSNTT
         OI    PDSNTT,X'F0'
         SPACE
         LR    RWK4,RWK1               LENGTH OF USER DATA
         CH    RWK1,=H'44'             TEST IF MORE THAN ONE LINE
         BNH   PDS1LINE                BR IF ONE LINE
         SPACE
         LA    RWK1,2                  ENSURE BOTH LINES ON SAME PAGE
         BAL   RRET,PAGECHEK
         LR    RWK1,RWK4               RESTORE RWK1
         LA    RWK4,44                 LENGTH FOR FIRST LINE
         SPACE
PDS1LINE LA    RWK2,DIRUDATA           ADDRESS OF USER DATA
         LA    RWK3,PDSHEX             PRINT LINE OUTPUT AREA
         BAL   RRET,DUMPEDIT           EDIT DATA INTO HEX
         MVI   PDS1,PRSP1              PRINT AND SPACE 1
         BAL   RRET,PRINTSUB
         SPACE
         CH    RWK1,=H'44'             TEST IF SECOND LINE REQUIRED
         BNH   GETPDS                  BR IF NOT
         LR    RWK4,RWK1               COMPUTE REMAINING DATA LENGTH
         SH    RWK4,=H'44'
         LA    RWK2,DIRUDATA+44
         LA    RWK3,PDSHEX
         BAL   RRET,DUMPEDIT
         MVI   PDS1,PRSP1
         BAL   RRET,PRINTSUB
         SPACE
         B     GETPDS
         DROP  RPDS
         SPACE 3
* WHEN THE END OF THE DIRECTORY IS REACHED, CLOSE THE DATA SET AND
* PRINT A SUMMARY LINE WITH THE ACCUMULATED TOTALS.
         SPACE
PDSEODAD DS    0H
         SPACE
         MVI   PDSMEMB,C' '   CLEAR MEMBER NAME OF LST MEMBER
         MVC   PDSMEMB+1(7),PDSMEMB   AVOID RESIDUAL MEMBER NAME
         SPACE
         LH    R0,PDSMEMCT             COUNT OF MEMBERS
         BAL   RRET,BINALFR
         MVC   PDSSUMMC(4),BTAALF+8
         LH    R0,PDSALCT              COUNT OF ALIASES
         BAL   RRET,BINALFR
         MVC   PDSSUMAC(4),BTAALF+8
         LH    R0,PDSDIRUS             DIRECTORY BLOCK USED
         BAL   RRET,BINALFR
         MVC   PDSSUMUC(4),BTAALF+8
         LH    R0,PDSDIRCT             NUMBER OF BLOCKS ALLOCATED
         BAL   RRET,BINALFR
         MVC   PDSSUMDC(4),BTAALF+8
         SPACE
         XPRNTLIN  PWA,TEXT=PDSSUM,LENGTH=PDSSUMSZ,OFFSET=16,SPA=1
         SPACE
PDSCLOSE CLOSE (PDSDCB)
         SPACE
PDSDONE  MVI   JFCBADR,X'07'     REESTABLISH EXIT FOR OPEN ERRORS   MS
         LM    RWK1,RWK4,PDSSAVE
         L     RRET,PDSEXIT
         BR    RRET
         SPACE 3
* PDS SUMMARY LINE:
         SPACE
PDSSUM   DC    C'DIRECTORY CONTAINS '
PDSSUMMC DC    C'0000 MEMBERS AND '
PDSSUMAC DC    C'0000 ALIASES, AND USES '
PDSSUMUC DC    C'0000 OF THE '
PDSSUMDC DC    C'0000 DIRECTORY BLOCKS ALLOCATED'
PDSSUMSZ EQU   *-PDSSUM
         SPACE 2
PDSEXIT  DC    F'0'
PDSSAVE  DC    4F'0'
PDSCLC   DC    A(0)
PDSBAL   DC    H'0'
PDSDIRCT DC    H'0'
PDSDIRUS DC    H'0'
PDSMEMCT DC    H'0'
PDSALCT  DC    H'0'
         SPACE 3
* SYNAD ROUTINE FOR PDS DIRECTORY.  GET ERROR MESSAGE AND LOAD INTO
* PRINT LINE.  BRANCH TO CLOSE DCB.
         SPACE
PDSSYNAD SYNADAF  ACSMETH=BSAM         GET ERROR MESSAGE FROM OS
         SPACE
         MVC   PL+1(30),=C'*******PDS DIRECTORY I/O ERROR'
         MVC   PL+31(79),49(R1)        ADD TEXT FROM SYNADAF
         SPACE
         SYNADRLS                      FREE OS MESSAGE BUFFER
         SPACE
         MVI   PL,PRSP3                SET TO SPACE 3
         BAL   RRET,PRINTSUB           PRINT ERROR MESSAGE
         L     RRET,PDSDCBA   LOAD ADDRESS OF PDSDCB
         NI    DCBIFLGS-IHADCB(RRET),X'3F'  RESET DCB ERROR FLAG
         MVI   RETCODE+3,12            SET RETURN CODE OF 12
         B     PDSCLOSE                CLOSE DCB
         EJECT
*********************
* VTOC READ ROUTINE *
*********************
         SPACE
* ROUTINE 'READSEQ' READS THE NEXT DSCB IN SEQUENCE INTO THE
* 140-BYTE AREA ADDRESSED BY 'RWK2'.  IT CALLS ROUTINE 'XVTCREAD' TO DO
* THE DIRTY WORK.  NORMAL RETURN IS TO THE ADDRESS IN
* RRET+4.  IF END-OF-DATA IS ENCOUNTERED, RETURN IS TO RRET.
* THE FULL DISK ADDRESS (MBBCCHHR) IS SAVED IN THE 8 BYTES FOLLOWING
* THE BUFFER.
         SPACE 2
READSEQ  ST    RRET,RDSEQXT            SAVE RETURN ADDRESS
         SPACE
         SR    R0,R0                   CALL MODE 0 FOR READ
         L     RGO,VTOCREAD            ADDRESS OF XVTCREAD ROUTINE
         BALR  RRET,RGO                BRANCH TO ROUTINE
         CH    R15,=H'4'               TEST FOR END OF FILE
         BE    RDEODAD                 BRANCH IF SO
         MVC   0(140,RWK2),8(R1)       MOVE KEY AND DATA
         XC    140(3,RWK2),0(RWK2)     ZERO 'MBB' PART OF ADDRESS
         MVC   143(5,RWK2),0(R1)       INSERT 'CCHHR' PART OF ADDRESS
         SPACE
         L     RRET,RDSEQXT
         LA    RRET,4(RRET)            INCREMENT FOR NORMAL RETURN
         BR    RRET
         SPACE 2
RDEODAD  L     RRET,RDSEQXT            RETURN AT END OF DATA
         BR    RRET
         SPACE 3
RDSEQXT  DC    F'0'
         EJECT
* ROUTINE 'READDIR' IS USED TO READ THE DSCB SPECIFIED BY THE 5-BYTE
* 'CCHHR' FIELD POINTED TO BY RWK1 INTO THE 140-BYTE BUFFER AT RWK2.
* THE FULL DISK ADDRESS 'MBBCCHHR' IS INSERTED IN THE 8 BYTES FOLLOW-
* ING THE 140-BYTE BLOCK.
         SPACE 2
READDIR  ST    RRET,RDDIRXT            SAVE EXIT ADDRESS
         MVC   OBCCHHR(5),0(RWK1)      GET ADDRESS FROM CALLER
         SPACE
         OBTAIN  OBCAMLST              READ SPECIFIED BLOCK
         SPACE
         LTR   R15,R15                 TEST RETURN CODE
         BZ    *+8                     BRANCH IF ZERO
         BAL   RRET,DISASTER           NO ERROR CONDITIONS TOLERATED
         L     R1,=A(OBWORK)           ADDRESS WORK AREA
         MVC   0(140,RWK2),0(R1)       MOVE DSCB TO USER'S AREA
         XC    140(3,RWK2),0(RWK2)     ZERO 'MBB' PART OF ADDRESS
         MVC   143(5,RWK2),0(RWK1)     INSERT CCHHR FROM ORIGINAL CALL
         L     RRET,RDDIRXT
         BR    RRET                    RETURN TO CALLER
         SPACE 3
OBCAMLST CAMLST  SEEK,OBCCHHR,VOLUME,OBWORK
         SPACE
OBCCHHR  DC    5X'00'
RDDIRXT  DC    F'0'
         EJECT
************************************
* COMPUTE DATA SET ALLOCATION SIZE *
************************************
         SPACE
* ENTER HERE TO COMPUTE THE NUMBER OF TRACKS ASSIGNED TO A DATA SET AND
* PUT THE RESULT IN 'F1TRCNT'.  THE FORMAT 1 DSCB IS ASSUMED
* TO BE IN AREA 'DS1', AND, IF THE NUMBER OF EXTENTS EXCEEDS 3,
* THE FORMAT 3 DSCB IS ASSUMED TO BE IN AREA 'DS3'.
* EACH EXTENT IS FILED IN THE TRACK MAP.
         SPACE
         USING DS1,RDS1
         USING DS3,RDS3
         SPACE
F1SPANAL ST    RRET,F1SPAXT            SAVE RETURN ADDRESS
         SR    RWK4,RWK4
         ST    RWK4,F1TRCNT            ZERO SIZE RESULT FIELD
         IC    RWK4,DS1NOEPV           INSERT NUMBER OF EXTENTS
         LTR   RWK4,RWK4               TEST FOR ZERO EXTENTS
         BCR   8,RRET                  EXIT IF ZERO
         SR    RWK2,RWK2               ZERO EXTENT INDEX
         SR    RWK3,RWK3               TRACK COUNT ACCUMULATOR
         SPACE
EXTLOOP  EX    0,EXTLIST(RWK2)         LOAD AN EXTENT ADDRESS IN RWK1
         BAL   RRET,F13CNVT            GET NUM TRKS IN EXTENT
         AR    RWK3,R0                 ADD TO TOTAL
         SPACE
         MVC   FB+FBCCHH1(8),2(RWK1)   MAKE UP TRACK MAP ENTRY
         STH   R0,FB+FBNTRKS           SIZE OF EXTENT
         MVC   FB+FBEXT(1),1(RWK1)     EXTENT NUMBER (-1)
         MVC   FB+FBTTREL1(4),RELTT1   INSERT REL TRACK LIMITS
         LA    R0,DS1DSNAM             ADDRESS OF DATA SET NAME
         ST    R0,FB+FBNAME
         LA    RWK1,FB
         BAL   RRET,FILEMAP            FILE IN TRACK MAP
         SPACE
         LA    RWK2,4(RWK2)            INDEX TO NEXT EXTENT
         BCT   RWK4,EXTLOOP            LOOP THROUGH ALL EXTENTS
         SPACE
         ST    RWK3,F1TRCNT            STORE RESULT
         L     RRET,F1SPAXT            LOAD RETURN ADDRESS
         BR    RRET
         SPACE 3
F1SPAXT  DC    F'0'
F1TRCNT  DC    F'0'
         SPACE
* EXECUTED INSTRUCTIONS TO LOAD EXTENT ADDRESSES:
         SPACE
EXTLIST  LA    RWK1,DS1EXT1
         LA    RWK1,DS1EXT2
         LA    RWK1,DS1EXT3
         LA    RWK1,DS3EXTNT
         LA    RWK1,DS3EXTNT+10
         LA    RWK1,DS3EXTNT+20
         LA    RWK1,DS3EXTNT+30
         LA    RWK1,DS3ADEXT
         LA    RWK1,DS3ADEXT+10
         LA    RWK1,DS3ADEXT+20
         LA    RWK1,DS3ADEXT+30
         LA    RWK1,DS3ADEXT+40
         LA    RWK1,DS3ADEXT+50
         LA    RWK1,DS3ADEXT+60
         LA    RWK1,DS3ADEXT+70
         LA    RWK1,DS3ADEXT+80
         SPACE
         DROP  RDS1,RDS3
         EJECT
***********************************
* FORMAT 1 AND 3 EXTENT CONVERTER *
***********************************
         SPACE
* ENTER WITH THE ADDRESS OF A TEN-BYTE EXTENT DISCRIPTION IN RWK1.
* RETURN WITH RELATIVE TRACK NUMBERS OF FIRST AND LAST TRACKS IN
* 'TTREL1' AND 'TTREL2', AND NUMBER OF TRACKS IN R0.
         SPACE 2
F13CNVT  CLI   0(RWK1),X'00'           TEST IF THIS IS AN ACTIVE EXTENT
         BCR   8,RRET                  EXIT IF ZERO
         LA    RWK1,2(RWK1)            ADDR OF STARTING CCHH
         BAL   RGO,CCHHCNVT            GET REL TRACK
         STH   R0,RELTT1
         LA    RWK1,4(RWK1)            ADDR OF ENDING CCHH
         BAL   RGO,CCHHCNVT            CONVERT TO TTREL
         STH   R0,RELTT2
         LH    R1,RELTT1
         SR    R0,R1                   COMPUTE NUMBER OF TRACKS
         AH    R0,=H'1'
         S     RWK1,=F'6'              RESTORE RWK1 TO CALLER'S VALUE
         BR    RRET                    RETURN TO CALLER
         SPACE
* CONVERT ADDRESS FROM 'CCHH' TO RELATIVE TRACK NUMBER.
         SPACE
CCHHCNVT SR    R0,R0                   RESULT WILL BE IN R0
         IC    R0,0(RWK1)              BYTE C1
         MH    R0,FC1
         SR    R1,R1
         IC    R1,1(RWK1)
         MH    R1,FC2
         AR    R0,R1
         SR    R1,R1
         IC    R1,2(RWK1)
         MH    R1,FH1
         AR    R0,R1
         SR    R1,R1
         IC    R1,3(RWK1)
         MH    R1,FH2
         AR    R0,R1
         BR    RGO
         SPACE 2
*THESE MUST BE TOGETHER IN THE ORDER SHOWN:
         SPACE
RELTT1   DC    H'0'
RELTT2   DC    H'0'
         EJECT
***************************
* FORMAT 5 SPACE ANALYSIS *
***************************
         SPACE
* ROUTINE TO ANALYZE THE FREE SPACE EXTENTS DESCRIBED IN A FORMAT 5
* DSCB.  ENTER WITH 'RDS5' SET TO A DSCB.  COMPUTE THE NUMBER OF FREE
* TRACKS, FREE CYLINDERS, AND EXTENTS.  FILE AN ENTRY IN THE TRACK MAP
* FOR EACH EXTENT.
         SPACE 2
         USING DS5,RDS5
F5SPANAL ST    RRET,F5SPAXIT           SAVE RETURN ADDRESS
         SPACE
         LA    RWK1,DS5AVEXT           ADDR OF 1ST GROUP OF 8 EXTENTS
         LA    RWK2,8                  COUNTER
F5SPLUP1 BAL   RRET,F5EXANAL           ANALYZE INDIVIDUAL EXTENT
         LA    RWK1,5(RWK1)            INDEX TO NEXT ONE
         BCT   RWK2,F5SPLUP1
         SPACE
         LA    RWK1,DS5MAVET           ADDR OF 2ND GROUP OF 18 EXTENTS
         LA    RWK2,18
F5SPLUP2 BAL   RRET,F5EXANAL
         LA    RWK1,5(RWK1)
         BCT   RWK2,F5SPLUP2
         SPACE
         L     RRET,F5SPAXIT
         BR    RRET
         DROP  RDS5
         SPACE 3
* ANALYZE AN INDIVIDUAL FREE SPACE EXTENT.  IF ALL FIVE BYTES ARE
* ZERO, NO EXTENT IS DESCRIBED.
         SPACE
F5EXANAL ST    RRET,F5EXAXT            SAVE RETURN ADDRESS
         STM   RWK1,RWK4,F5EXASAV        AND OTHER REGISTERS
         CLC   0(5,RWK1),=XL5'00'      TEST FOR ACTIVE EXTENT
         BCR   8,RRET                  EXIT IF ZEROS
         SPACE
         LH    R1,F5EXTNTS             COUNT FREE EXTENTS
         LA    R1,1(R1)
         STH   R1,F5EXTNTS
         SPACE
         MVC   FWORK(4),0(RWK1)        LOAD REGISTERS:
         LH    RWK2,FWORK                RWK2=RELATIVE ADDR OF 1ST TR
         LH    RWK3,FWORK+2              RWK3=NUMBER OF FULL CYLS
         SR    RWK4,RWK4                 RWK4=NUMBER OF ODD TRACKS
         IC    RWK4,4(RWK1)
         STH   RWK2,RELTT1             SAVE TT REL OF FIRST TRACK
         SPACE
         LH    R0,FREECYLS             COUNT FREE CYLINDERS
         AR    R0,RWK3
         STH   R0,FREECYLS
         SPACE
         LR    R0,RWK3         COMPUTE EXTENT SIZE (MAY NOT WORK FOR
         MH    R0,FCYL                   2321 DATA CELL)
         AR    R0,RWK4
         STH   R0,FB+FBNTRKS
         LR    R1,R0                   LOAD SIZE OF THIS EXTENT
         AH    R1,FREETRKS             COUNT TOTAL FREE TRACKS
         STH   R1,FREETRKS
         AR    R0,RWK2                 MAKE TTREL OF LAST TRACK
         BCTR  R0,0                    DECREMENT BY 1
         STH   R0,RELTT2
         SPACE
         LH    R1,RELTT1               CONVERT TTREL TO CCHH FOR MAP
         BAL   RRET,TTCNVT
         MVC   FB+FBCCHH1(4),CCHH
         LH    R1,RELTT2
         BAL   RRET,TTCNVT
         MVC   FB+FBCCHH2(4),CCHH
         SPACE
         MVC   FB+FBTTREL1(4),RELTT1   PUT TTREL INTO TRACK MAP
         MVI   FB+FBEXT,X'FF'          NO EXTENT NUMBER
         LA    R0,=CL44'   AVAILABLE ******************** AVAILABLE'
         ST    R0,FB+FBNAME
         LA    RWK1,FB
         BAL   RRET,FILEMAP            FILE DATA IN TRACK MAP
         SPACE
         LM    RWK1,RWK4,F5EXASAV      RESTORE REGISTERS
         L     RRET,F5EXAXT
         BR    RRET
         SPACE 3
F5SPAXIT DC    F'0'
F5EXAXT  DC    F'0'
F5EXASAV DC    4F'0'
         EJECT
*************************
* CONVERT TTREL TO CCHH *
*************************
         SPACE
* CONVERT RELATIVE TRACK ADDRESS TO ABSOLUTE CCHH FORM.  TTREL IS
* SUPPLIED IN R1, RESULT IN 'CCHH'.
         SPACE 2
TTCNVT   SR    R0,R0                   R0-R1 USED FOR DIVIDE
         ST    R0,CCHH                 ZERO OUTPUT FIELD
         LH    RGO,FC1
         LTR   RGO,RGO                 WATCH FOR DIVIDE BY ZERO
         BZ    ZFC1
         DR    R0,RGO
         STC   R1,CCHH
         LR    R1,R0
         SR    R0,R0
ZFC1     LH    RGO,FC2
         LTR   RGO,RGO
         BZ    ZFC2
         DR    R0,RGO
         STC   R1,CCHH+1
         LR    R1,R0
         SR    R0,R0
ZFC2     LH    RGO,FH1
         LTR   RGO,RGO
         BZ    ZFH1
         DR    R0,RGO
         STC   R1,CCHH+2
         STC   R0,CCHH+3
         BR    RRET
ZFH1     STC   R1,CCHH+3
         BR    RRET
         SPACE 2
CCHH     DC    F'0'
         EJECT
**************************
* FILE ITEM IN TRACK MAP *
**************************
         SPACE
* SUBROUTINE USED BY 'F1SPANAL' AND 'F5SPANAL' TO INSERT A SIX-WORD
* EXTENT DESCRIPTOR BLOCK INTO THE TRACK MAP.  ENTER WITH THE ADDRESS
* OF THE NEW BLOCK IN 'RWK1'.  THE ROUTINE GETS CORE, MOVES THE BLOCK,
* AND CHAINS IT IN SEQUENCE WITH OTHER MAP BLOCKS BY ASCENDING ORDER OF
* LOWER CCHH.
         SPACE 2
FILEMAP  ST    RRET,FMEXIT             SAVE EXIT AND WORK REGISTERS
         STM   RWK2,RWK4,FMSAVE
         SPACE
         LA    RWK3,MBSIZE             GET A CORE BLOCK
         BAL   RRET,GETBLOCK           RETURNS ADDRESS IN RWK2
         USING MB,RWK2
         MVC   MB(MBSIZE),0(RWK1)      MOVE NEW BLOCK
         SPACE
         L     RWK1,MBBASE             GET CHAIN BEGINNING
         LA    RWK3,MBBASE             CHAIN HISTORY REG
         SPACE
FMSORT   CLC   MBCCHH1(4),FBCCHH1(RWK1)
         BL    FMTHREAD
         LR    RWK3,RWK1
         L     RWK1,FBCHAIN(RWK1)      FOLLOW CHAIN TO NEXT ITEM
         B     FMSORT
         SPACE
FMTHREAD ST    RWK1,MBCHAIN            THREAD FROM NEW TO NEXT
         ST    RWK2,FBCHAIN(RWK3)      THREAD FROM PRECEDING TO NEW
         SPACE
         LM    RWK2,RWK4,FMSAVE        RESTORE REGISTERS
         L     RRET,FMEXIT
         BR    RRET
         DROP  RWK2
         SPACE 2
FMSAVE   DC    3F'0'
FMEXIT   DC    F'0'
MBBASE   DC    A(*)                    CHAIN BASE ADDRESS
MBTERM   DC    4X'FF'                  CHAIN END, MUST FOLLOW 'MBBASE'
         SPACE
FB       DS    0F                      WORK BLOCK USED BY F1SPANAL
         DS    24X                       AND F5SPANAL TO ASSEMBLE BLKS
         EJECT
***************************
* BINARY TO ALPHA ROUTINE *
***************************
         SPACE
* ROUTINE TO CONVERT A BINARY NUMBER TO DECIMAL AND EDIT INTO THREE
* ALPHA FORMATS.  ENTER WITH REGISTER 'RWK1' SET TO THE FIRST BYTE OF
* THE BINARY FIELD AND THE NUMBER OF BYTES (UP TO FOUR) IN REGISTER
* 'RWK2'.  THE ALPHA OUTPUT IS IN THREE 12-BYTE FIELDS:
*        'BTAALF' IS RIGHT-ALIGNED WITH LEADING ZEROS BLANKED;
*        'BTAALFZ' IS RIGHT-ALIGNED WITH LEADING ZEROS;
*        'BTAALFJ' IS LEFT-ALIGNED WITH TRAILING BLANKS ADDED.
* RETURN TO CALLER IS VIA REGISTER 'RRET'.  REGISTER 'R0' IS USED AND
* IS NOT RESTORED.
         SPACE
* THE ALTERNATE ENTRANCE 'BINALFR' MAY BE USED WHEN THE ARGUMENT IS
* ALREADY IN REGISTER 'R0'.
         SPACE 2
BINALF1  LA    RWK2,1                  ENTRANCE FOR 1-BYTE ARG
         B     BTA
BINALF2  LA    RWK2,2                  ENTRANCE FOR 2-BYTE ARG
         B     BTA
BINALF3  LA    RWK2,3                  ENTRANCE FOR 3-BYTE ARG
         SPACE
BTA      SR    R0,R0                   CLEAR ACCUMULATOR
BTALUP1  SLL   R0,8                    MOVE OVER FOR NEXT BYTE
         IC    R0,0(RWK1)              GET NEXT BYTE OF ARGUMENT
         LA    RWK1,1(RWK1)            INCREMENT ADDR OF ARGUMENT
         BCT   RWK2,BTALUP1            LOOP TO EXTRACT ALL BYTES
         SPACE
BINALFR  LPR   R0,R0                   TAKE ABSOLUTE VALUE
         CVD   R0,BTADWD               CONVERT ARG TO PACKED DECIMAL
         UNPK  BTAALFZ(12),BTADWD(8)   UNPACK VERSION WITH ZEROS
         OI    BTAALFZ+11,X'F0'        COVER UP SIGN
         SPACE
         MVC   BTAALF(12),BTAPTRN      INSERT EDIT CONTROL CHAR
         ED    BTAALF(12),BTADWD+2     EDIT ZERO-SUPPRESSED VERSION
         SPACE
         MVC   BTAALFJ(11),BTAALF+1    NOTE: BTAALFJ+11 PERMANENT BLANK
BTALUP2  CLI   BTAALFJ,C' '            CHECK FOR LEADING BLANK
         BCR   7,RRET                  EXIT IF NOT BLANK, IE, DIGIT
         MVC   BTAALFJ(11),BTAALFJ+1   SHIFT ONE LEFT
         B     BTALUP2                 CONTINUE
         SPACE 3
BTADWD   DC    D'0'
BTAPTRN  DC    XL12'402020202020202020202120'     EDIT CONTROL CHARS
BTAALF   DC    CL12' '
BTAALFJ  DC    CL12' '
BTAALFZ  DC    CL12' '
         EJECT
*********************
* VTOC DATE EDITING *
*********************
         SPACE
* SUBROUTINE TO CONVERT FROM THE BINARY FORM 'YDD' IN A DSCB INTO THE
* CIVILIZED ALPHA FORM 'MM/DD/YY'.  ENTER WITH ADDRESS OF 3-BYTE
* BINARY ARGUMENT IN RWK1 AND ADDRESS OF 8-BYTE ALPHA RECEIVER IN RWK2.
         SPACE 2
VTDATED  ST    RRET,VTDXIT
         SR    R0,R0
         IC    R0,0(RWK1)              BINARY YEAR
         MH    R0,=H'1000'             TIMES 1000
         MVC   DECDATE(2),1(RWK1)      ALIGN DAY ON HALF-WORD
         AH    R0,DECDATE              ADD BINARY DAY
         CVD   R0,DECDATE              CONVERT TO PACKED DECIMAL
         SPACE
         LA    R1,DECDATAD             LOAD ADDR OF ARGUMENT ADDRESS
         L     RGO,VDATEDIT            LOAD SUBROUTINE ADDRESS
         BALR  RRET,RGO                CALL XDATEDIT ROUTINE
         SPACE
         MVC   0(8,RWK2),DECDATE       DELIVER RESULT
         L     RRET,VTDXIT
         BR    RRET
         SPACE 3
VTDXIT   DC    F'0'
         EJECT
*************************
* DSCB HEX DUMP ROUTINE *
*************************
         SPACE
* THIS SUBROUTINE EDITS A DSCB IN HEX IN THREE LINES.  ENTER WITH THE
* ADDRESS OF THE DSCB IN RWK1 AND THE ADDRESS OF ITS DISK ADDRESS
* (MBBCCHHR) IN RWK2.  CHECKS TO BE SURE ALL THREE LINES WILL BE ON
* THE SAME PAGE.
         SPACE 2
DUMPDSCB ST    RRET,DUMPEXIT           SAVE RETURN
         LR    RWK3,RWK1               TEMP SAVE RWK1
         LA    RWK1,3                  TO TEST PAGE BALANCE
         BAL   RRET,PAGECHEK
         LR    RWK1,RWK3
         SPACE
         MVC   PL+8(17),=C'BLK 1234.5678.90:'
         UNPK  HEXWORK(15),3(8,RWK2)   EDIT DISK ADDRESS OF BLOCK
         TR    HEXWORK(15),HEXEDTAB
         MVC   PL+12(4),HEXWORK
         MVC   PL+17(4),HEXWORK+4
         MVC   PL+22(2),HEXWORK+8
         LA    RWK2,0(RWK1)
         LA    RWK3,PL+35
         LA    RWK4,44
         BAL   RRET,DUMPEDIT           EDIT HEX CHARS OF KEY
         MVI   PL,PRSP1                PRINT AND SPACE 1
         BAL   RRET,PRINTSUB
         SPACE
         MVC   PL+8(13),=C'FORMAT N DSCB'
         MVC   PL+15(1),44(RWK1)       DSCB TYPE NUMBER
         OI    PL+15,X'F0'             FOR TYPE 0, IF EVER USED
         LA    RWK2,44(RWK1)
         LA    RWK3,PL+26
         LA    RWK4,48
         BAL   RRET,DUMPEDIT
         MVI   PL,PRSP1
         BAL   RRET,PRINTSUB
         SPACE
         LA    RWK2,92(RWK1)
         LA    RWK3,PL+26
         LA    RWK4,48
         BAL   RRET,DUMPEDIT
         MVI   PL,PRSP2                SPACE 2 ON LAST LINE
         BAL   RRET,PRINTSUB
         SPACE
         L     RRET,DUMPEXIT
         BR    RRET
         SPACE
DUMPEXIT DC    F'0'
         EJECT
* HEX DUMP EDIT SUBROUTINE
         SPACE
* ROUTINE TO EDIT INTO HEX IN 4-BYTE GROUPS.  'RWK2' IS THE SOURCE
* ADDRESS, 'RWK3' IS THE RECEIVER ADDRESS, AND 'RWK4' CONTAINS THE
* NUMBER OF BYTES TO EDIT.
         SPACE 2
DUMPEDIT LTR   RWK4,RWK4               TEST FOR ZERO BYTES
         BCR   13,RRET                 EXIT IF ZERO
         B     DUMPJOIN
         SPACE
DUMPLOOP BCT   R1,DUMPMOVE             TEST FOR 4TH BYTE
         MVI   0(RWK3),C' '            INSERT BLANK EVERY 4 BYTES
         LA    RWK3,1(RWK3)            INCREMENT RECEIVER ADDRESS
DUMPJOIN LA    R1,4                    BEGIN NEW 4-BYTE GROUP
         SPACE
DUMPMOVE UNPK  HEXWORK(3),0(2,RWK2)    EDIT ONE BYTE INTO ALPHA
         TR    HEXWORK(2),HEXEDTAB
         MVC   0(2,RWK3),HEXWORK
         LA    RWK2,1(RWK2)            INCREMENT SOURCE ADDR
         LA    RWK3,2(RWK3)            INCREMENT RECEIVER ADDR
         BCT   RWK4,DUMPLOOP           COUNT NUMBER OF BYTES EDITED
         BR    RRET
         EJECT
*************************
* FIELD SCAN SUBROUTINE *
*************************
         SPACE
* SUBROUTINE TO READ A WORD FROM A CHARACTER STRING.  ENTER WITH 'RWK1'
* SET TO THE BEGINNING OF THE STRING AND 'RWK2' CONTAINING THE LENGTH
* OF THE STRING.  RETURNS WITH THE WORD IN 8 BYTES AT 'SCANWORD' AND
* UPDATES 'RWK1' AND 'RWK2' TO GET NEXT WORD IN NEXT CALL.
         SPACE 2
SCAN     DS    0H
         MVC   SCANWORD(8),=8C' '      BLANK OUTPUT FIELD
         LA    RWK3,SCANWORD
         SPACE
SCLOOP   LTR   RWK2,RWK2               TEST FOR END OF INPUT STRING
         BCR   13,RRET                 EXIT WHEN REACHED
         CLI   0(RWK1),C' '            BLANKS ARE IGNORED
         BE    SCANEXT
         CLI   0(RWK1),C','            TEST FOR COMMA (WORD SEPARATOR)
         BE    SCANDONE
         SPACE
         C     RWK3,=A(SCANWORD+8)     TEST FOR MAX OUTPUT LENGTH
         BNL   SCANEXT                 SKIP DELIVERY IF OVER 8
         MVC   0(1,RWK3),0(RWK1)       DELIVER CHAR TO OUTPUT WORD
         LA    RWK3,1(RWK3)            INCR OUTPUT INDEX
SCANEXT  LA    RWK1,1(RWK1)            INCR TO NEXT INPUT CHAR, AND
         BCTR  RWK2,0                    DECREMENT COUNT
         B     SCLOOP
         SPACE
SCANDONE LA    RWK1,1(RWK1)            INCR PAST SEPARATOR AND EXIT
         BCTR  RWK2,0
         BR    RRET
         SPACE 2
SCANWORD DC    CL8' '
         EJECT
************************
* CORE BLOCK ALLOCATOR *
************************
         SPACE
* THIS ROUTINE IS ENTERED WITH THE SIZE OF A DESIRED BLOCK OF CORE IN
* 'RWK3'.  IT RETURNS WITH THE ADDRESS OF AN AVAILABLE AREA IN 'RWK2'.
* THE BLOCK WILL BE ALIGNED ON A FULL-WORD BOUNDARY.
         SPACE
* THESE SMALL BLOCKS ARE ALLOCATED FROM LARGE BLOCKS OBTAINED FROM THE
* SUPERVISOR VIA 'GETMAIN' CALLS.  THE FIRST WORD OF EACH LARGE BLOCK
* POINTS TO THE NEXT ONE, EXCEPT FOR THE LAST, WHICH CONTAINS A ZERO
* WORD.  THIS CHAIN IS USED BY THE 'GBRESET' ROUTINE TO RELEASE THE
* CORE.
         SPACE 2
GETBLOCK A     RWK3,=F'3'              ROUND SIZE TO NEXT WORD
         N     RWK3,ROUND4             'ROUND4 IS X'FFFFFFFC'
GBJOIN   L     R0,GBBAL                LOAD CURRENT BALANCE
         SR    R0,RWK3                 SUBTRACT SIZE DESIRED
         BM    NEWBLOCK                BRANCH IF NOT ENOUGH
         ST    R0,GBBAL                SAVE NEW BALANCE
         L     RWK2,GBCLC              LOAD ADDRESS OF BLOCK
         LR    R0,RWK2
         AR    R0,RWK3                 UPDATE ADDRESS OF AVAILABLE AREA
         ST    R0,GBCLC
         BR    RRET
         SPACE
* GET A NEW BLOCK AND CHAIN.
         SPACE
NEWBLOCK GETMAIN  EC,LV=GETSIZE,A=GBNEWBL  CONDITIONAL REQUEST FOR CORE
         LTR   R15,R15                 DID WE GET IT?
         BNZ   GMFAIL                  NO, BRANCH
         L     R1,GBNEWBL              LOAD ADDRESS OF GOTTEN CORE
         L     RWK2,GBBASE             BASE OF CURRENT BLOCK
         ST    R1,0(RWK2)              CHAIN TO NEW BLOCK
         ST    R1,GBBASE               UPDATE BASE CELL
         SR    R0,R0
         ST    R0,0(R1)                ZERO CHAIN IN NEW BLOCK
         LA    R1,4(R1)                SET TO FIRST AVAILABLE BYTE
         ST    R1,GBCLC
         MVC   GBBAL(4),NEWBAL         RESET BALANCE COUNTER
         B     GBJOIN
         SPACE 3
* RESET ROUTINE TO RELEASE ALL CORE AND RESET POINTERS.
         SPACE
GBRESET  L     RWK1,GBFIRST            ADDR OF FIRST BLOCK OF CORE
GBR1     LTR   RWK1,RWK1               TEST FOR END OF CHAIN
         BZ    GBR2                    BRANCH IF RELEASING DONE
         LR    R1,RWK1                 ADDR OF BLOCK TO RELEASE
         L     RWK1,0(RWK1)            FOLLOW CHAIN TO NEXT BLOCK
         LA    R0,GETSIZE              SIZE OF BLOCK
         SPACE
         FREEMAIN  R,LV=(0),A=(1)
         SPACE
         B     GBR1
         SPACE
GBR2     SR    R0,R0
         ST    R0,GBBAL                SET ZERO BALANCE
         ST    R0,GBFIRST              SET ZERO INITIAL BLOCK ADDRESS
         LA    R0,GBFIRST
         ST    R0,GBBASE               POINT BASE BACK TO INITIAL CELL
         BR    RRET
         SPACE 2
* RAN OUT OF CORE.  PRINT MESSAGE AND GO DIRECTLY TO END VOLUME ROUTINE
         SPACE
GMFAIL   XPRNTLIN  PWA,TEXT=GMFMSG,LENGTH=L'GMFMSG,SPB=1,SPA=1
         B     ENDVOL
         SPACE 3
GBNEWBL  DC    F'0'
GBBAL    DC    F'0'
GBCLC    DC    A(0)
GBBASE   DC    A(GBFIRST)
GBFIRST  DC    A(0)
NEWBAL   DC    A(GETSIZE-4)
         EJECT
********************
* PRINTING ROUTINE *
********************
         SPACE
* ROUTINE TO INTERFACE WITH THE PRINTING ROUTINE.  CALL WITH TEXT IN
* 133-BYTE LINE 'PL'.  FIRST BYTE CONTAINS DESIRED SPACING AFTER
* PRINTING.  'PL' IS BLANKED AFTER PRINTING.
         SPACE
PRINTSUB ST    RRET,PRSEXIT            SAVE RETURN ADDRESS
         IC    R0,PL                   PICK UP SPACING AMOUNT
         SPACE
         XPRNTLIN  PWA,TEXT=PL+1,LENGTH=132,SPA=((R0))
         SPACE
         MVI   PL+1,C' '               BLANK PRINT LINE
         MVC   PL+2(131),PL+1
         L     RRET,PRSEXIT            LOAD RETURN ADDRESS
         BR    RRET                    RETURN TO CALLER
         SPACE
* PAGE BALANCE TEST ROUTINE.  SKIP TO HEAD-OF-FORM IF REMAINING LINES
* ON PAGE ARE LESS THAN THE NUMBER IN 'RWK1'.
         SPACE
PAGECHEK ST    RRET,PRSEXIT            SAVE RETURN ADDRESS
         XPREJECT  PWA,COND=(LT,(RWK1))
         L     RRET,PRSEXIT            RESTORE EXIT ADDRESS
         BR    RRET                    RETURN TO CALLER
         SPACE
PRSEXIT  DS    F
         EJECT
*****************
* PAGE HEADINGS *
*****************
         SPACE
INITHEAD XPRLDEF  TEXT=IHTXT,LENGTH=L'IHTXT,SPB=(TOPMARGN,ATHOF),SPA=3
         SPACE
IHTXT    DC    C'VTOCLIST -- DIRECT-ACCESS VOLUME DIRECTORY LISTER'
         SPACE 3
F1HD2    XPRLDEF  TEXT=F1HTXT,LENGTH=LF1HTXT,SPB=(TOPMARGN,ATHOF),SPA=2
         SPACE
F1HD3    XPRLDEF  TEXT=F1HTXT,LENGTH=LF1HTXT,SPB=(TOPMARGN,ATHOF),SPA=3
         SPACE
F1HTXT   DC    CL20' '
F1HSER1  EQU   F1HTXT
         DC    C'TABLE OF CONTENTS FOR VOLUME SERIAL='
F1HSER2  DC    CL6' '
LF1HTXT  EQU   *-F1HTXT
         SPACE 3
F1SA     XPRLDEF  TEXT=F1SUBA,LENGTH=LF1SUBA,SPA=1,OFFSET=19
         SPACE
F1SUBA   DS    0C
         DC    C'DSNAME'
         DC    19C' '
         DC    C' LAST REF  CREDT    EXPDT    '
         DC    C'DSO RECFM BLKSZ LRECL KEY OP  '
         DC    C'TRKAL TRKUS EX SECQU T   '
LF1SUBA  EQU   *-F1SUBA
         SPACE 3
F1SB     XPRLDEF  TEXT=F1SUBB,LENGTH=LF1SUBB,SPA=2
         SPACE
F1SUBB   DS    0C
         DC    44C'-'
         DC    C' -------- -------- --------  '
         DC    C'--- ----- ----- ----- --- --  '
         DC    C'----- ----- -- ----- -   '
******************************************************************
* NOTE:  UNDERLINE CHARACTERS CHANGED TO DASHES FOR PRINTABILITY.*
******************************************************************
LF1SUBB  EQU   *-F1SUBB
         SPACE
* PAGE SUB-HEADING LINES FOR TRACK MAP EDITING
         SPACE
TMHEAD   XPRLDEF  TEXT=TMHTXT,LENGTH=LTMHTXT,SPB=(TOPMARGN,ATHOF),SPA=2
         SPACE
         SPACE
TMHTXT   DC    CL20' '
TMHSER1  EQU   TMHTXT
         DC    C'TRACK ALLOCATION MAP FOR VOLUME SERIAL='
TMHSER2  DC    CL6' '
LTMHTXT  EQU   *-TMHTXT
         SPACE 3
TMSA     XPRLDEF  TEXT=TMSUBA,LENGTH=LTMSUBA,OFFSET=27,SPA=1
         SPACE
TMSUBA   DS    0C
         DC    C'FIRST TRK   LAST TRK  #TRKS  EXT  DSNAME OR USAGE'
LTMSUBA  EQU   *-TMSUBA
         SPACE 3
TMSB     XPRLDEF  TEXT=TMSUBB,LENGTH=LTMSUBB,OFFSET=27,SPA=2
         SPACE
TMSUBB   DS    0C
         DC    C'---------  ---------  -----  ---  '
         DC    44C'-'
***** ABOVE UNDERLINES ALSO CHANGED TO DASHES -- HM  **********
LTMSUBB  EQU   *-TMSUBB
         EJECT
* PRINT LINE FIELD DEFINITIONS
         SPACE 2
PL       DC    CL133' '
         SPACE 3
* PRINT LINES FOR VOLUME DESCRIPTION:
         SPACE
V1       EQU   PL
V1TYPE   EQU   V1+22
V1NOCYL  EQU   V1+45
V1TRCYL  EQU   V1+57
V1DEVTK  EQU   V1+73
V1DEVDT  EQU   V1+88
V1DEVDB  EQU   V1+102
         SPACE
V2       EQU   PL
V2DSCBCT EQU   V2+20
V2DSCBAV EQU   V2+37
V2VTEXT  EQU   V2+55
V2NUMALT EQU   V2+88
V2NXTALT EQU   V2+102
         SPACE
V3       EQU   PL
V3FRTRKS EQU   PL+18
V3FREXTS EQU   PL+34
V3FRCYLS EQU   PL+58
         SPACE
* PRINT LINES FOR FORMAT 1 DSCB DESCRIPTION:
         SPACE
F1A      EQU   PL
F1DSNAM  EQU   F1A+1
F1REFD   EQU   F1A+46
F1CREDT  EQU   F1A+55
F1EXPDT  EQU   F1A+64
F1DSORG  EQU   F1A+74
F1RECFM  EQU   F1A+78
F1BLKL   EQU   F1A+84
F1LRECL  EQU   F1A+90
F1KEYL   EQU   F1A+96
F1OPTCD  EQU   F1A+100
F1TRALOC EQU   F1A+104
F1TRUSE  EQU   F1A+110
F1NOEPV  EQU   F1A+116
F1SCALO  EQU   F1A+119
F1ALCTYP EQU   F1A+125
         SPACE
* PRINT LINES FOR TRACK MAP EDITING:
         SPACE
TM1      EQU   PL
TMERROR  EQU   TM1+26
TMCCHH1  EQU   TM1+28
TMCCHH2  EQU   TM1+39
TMEXTSIZ EQU   TM1+50
TMEXTNO  EQU   TM1+57
TMDSNAM  EQU   TM1+62
         SPACE
* PRINT LINES FOR PDS DIRECTORY LISTING:
         SPACE
PDS1     EQU   PL
PDSMEMB  EQU   PDS1+12
PDSALIAS EQU   PDS1+21
PDSTTR   EQU   PDS1+23
PDSNTT   EQU   PDS1+32
PDSHEX   EQU   PDS1+35
         EJECT
* EXODUS
         SPACE
* WHEN ALL VOLUMES ARE COMPLETED, COME HERE TO CLOSE THE PRINTER,
* TIDY UP LOOSE ENDS, AND RETURN.
         SPACE 2
EXODUS   DS    0H
         SPACE
         XPRCLOSE  PWA
         SPACE
         L     RSAVE,SAVEAREA+4
         L     RGO,RETCODE             INSERT RETURN CODE IN REG 15
         RETURN  (14,12),T,RC=(15)
         SPACE 6
* DISASTER ROUTINE
         SPACE
* COME HERE TO ABEND FOR CONDITIONS WHICH WERE NOT SUPPOSED TO HAPPEN,
* OR ERRORS FOR WHICH NO SPECIAL ROUTINE ARE WRITTEN.
         SPACE 2
DISASTER ABEND 100,DUMP
         EJECT
* PDS DIRECTORY DATA CONTROL BLOCK
         SPACE 2
PDSDCBA  DC    A(PDSDCB)   RELOCATE THIS DCB....
DSN1PTR  DC    A(DSNJFCB)   POINTER TO DSN FROM JCL
DSORGTBA DC    A(DSORGTAB)   ADDRESSABILITY TRICK....
         SPACE 6
* DCB EXIT LIST:
         SPACE
JFCBADR  DS    0F
         DC    X'07'                                               MS
         DC    AL3(JFCB)
         DC    X'91'                                               MS
         DC    AL3(OPENERR)                                        MS
         EJECT
* PRINT SUBROUTINE DATA CONTROL BLOCK AND WORK AREA:
         SPACE 2
* UNABLE TO OPEN SYSPRINT - TYPE ERROR MESSAGE AND EXIT.
         SPACE
PROPBAD  DS    0H
         MVC   PROPMSGJ(8),JOBNAME     INSERT JOB NAME IN MESSAGE
         WTO   MF=(E,PROPMSG)          TYPE COMPLAINT ON CONSOLE
         MVI   RETCODE+3,20            SET RETURN CODE TO 20
         B     EXODUS                  EXIT
         SPACE
PROPMSG  DS    0F
         DC    AL2(PROPMSGL,0)         FORMAT V CONTROL FIELD
         DC    C'JOB '
PROPMSGJ DC    C'12345678 -- VTOCLIST UNABLE TO OPEN SYSPRINT'
PROPMSGL EQU   *-PROPMSG
         SPACE 6
PWA      XPRDCB  DDNAME=SYSPRINT
         EJECT
* MISCELLANEOUS CONSTANTS AND WORK CELLS:
         SPACE 2
DECDATE  DC    D'0'
         SPACE
DECTIME  DC    F'0'
DEVCHAR  DC    2F'0'
UNITTYPE EQU   DEVCHAR+3
FMT1ADDR DC    F'0'
FMT4ADDR DC    F'0'
FMT5ADDR DC    F'0'
FWORK    DC    F'0'
RETCODE  DC    F'0'
ROUND4   DC    X'FFFFFFFC'
SAVEAREA DC    18F'0'
TIOTLOC  DC    A(0)
VTOCREAD DC    V(XVTCREAD)
DECDATAD DC    A(DECDATE)
VDATEDIT DC    V(XDATEDIT)
         SPACE
DSCOUNT  DC    H'0'
FREECYLS DC    H'0'
FREETRKS DC    H'0'
F5EXTNTS DC    H'0'
HWORK    DC    H'0'
VTOCSIZE DC    H'0'
         SPACE
DDNAME   DC    CL8'VOLUME00'
JOBNAME  DS    CL8
VOLUME   DS    CL6
HEXWORK  DC    CL16' '
LASTFMT1 DC    44X'FF'
MODESW   DC    X'00'          ORIGINAL SWITCH FOR OPTIONS
MODESW1  DC    X'00'          SECOND SET OF SWITCHES
DSORGSW  DC    X'00'            SWITCH FOR TESTING DSORG
TSTDSORG DC    X'00'   FILTER FOR DSORG
         SPACE
         DC    CL16'0123456789ABCDEF'
HEXEDTAB EQU   *-256
         SPACE
* DUMMY TRACK MAP ENTRY FOR VOLUME LABEL ON TRACK 0:
         SPACE
TRK0MAP  DC    2F'0'
         DC    H'1'
         DC    XL2'FF00'
         DC    A(TRK0NAME)
         DC    F'0'
         EJECT
* TABLE OF DEVICE SIZE CONSTANTS, FILLED IN FROM DEVICE NAME TABLE WHEN
* DEVICE TYPE IS DETERMINED.  THE FOUR CONSTANTS FC1, FC2, FH1, AND FH2
* ARE SCALING FACTORS TO BE APPLIED TO A FULL DIRECT-ACCESS ADDRESS OF
* THE FORM 'CCHH'.  EACH CONSTANT IS THE NUMBER OF TRACKS REPRESENTED
* BY ONE UNIT OF THE CORRESPONDING ADDRESS BYTE.  'FMAXTT' IS THE
* MAXIMUM RELATIVE TRACK ADDRESS FOR THE DEVICE, AND 'FCYL' IS THE
* NUMBER OF TRACKS PER CYLINDER, AS APPLIED TO THE CYLINDER COUNT IN A
* FORMAT 5 EXTENT ENTRY.  'DEVNAMAD' IS THE ADDRESS OF THE DEVICE NAME
* IN THE DEVICE NAME TABLE. (REST OF TABLE MOVED. CST)
         SPACE
DEVNAMAD DC    A(0)
FC1      DC    H'0'
FC2      DC    H'0'
FH1      DC    H'0'
FH2      DC    H'0'
FCYL     DC    H'0'
FMAXTT   DC    H'0'
         EJECT
* LITERALS
         SPACE 2
         LTORG
         SPACE 2
         DROP  RBASE1,RBASE2
         EJECT
* WORK AREAS WHICH ARE NOT COVERED BY BASE REGISTERS:
         SPACE
         ORG   GENESIS+8192            KEEP US HONEST ABOUT BASE REG
         SPACE 2
* DEVICE NAME TABLE, TO PROVIDE SPECIFIC INFORMATION FOR EACH DEVICE.
* THE ORDER OF THE HALF-WORD CONSTANTS MUST CORRESPOND TO "FC1..."
* ABOVE. (MOVED FOR ADDRBLTY. CST. SEE DEVNAMAD FOR REST)
DEVNAMES DS    0H
         SPACE
         DC    AL1(DEV2301)
         DC    CL15'2301 DRUM'
         DC    H'0,0,0,1,8,200'
DEVNAMSZ EQU   *-DEVNAMES
         SPACE
         DC    AL1(DEV2302)
         DC    CL15'2302 DISK FILE'
         DC    H'0,46,0,1,46,11500'
         SPACE
         DC    AL1(DEV2303)
         DC    CL15'2303 DRUM'
         DC    H'0,10,0,1,10,800'
         SPACE 1                                                   HM
         DC    AL1(DEV23051)                                       HM
         DC    CL15'2305-1 DRUM'                                   HM
         DC    H'0,8,0,1,8,768'   ****** THIS IS DEF FOR 2305-2 BAD HM
         SPACE
         DC    AL1(DEV23052)
         DC    CL15'2305-2 DRUM'                                   HM
         DC    H'0,8,0,1,8,768'
         SPACE
         DC    AL1(DEV3330)
         DC    CL15'3330 DISK PACK'
         DC    Y((19*256),19,0,1,19,7676)   3330 DEFINITION          HM
         SPACE 1                                                     HM
*******  SPECIAL 3330-11 DEFINITION-MUST BE CONTIGOUS TO 3330-1 ***  HM
         SPACE 2                                                     HM
         DC    AL1(DEV33301)       DEVTYPR                           HM
         DC    CL15'3330-11 DISK'    HEADER ID DEVICE NAME           HM
         DC    Y((19*256),19,0,1,19,15352)  3330-11 DEFINITION       HM
         SPACE 2
*******  3350  DEFINITION                                            WB
         SPACE 2                                                     WB
         DC    AL1(DEV3350)        DEVTYP                            WB
         DC    CL15'3350 DISK PACK'                                  WB
         DC    H'7680,30,0,1,30,16650'                               WB
*******  3380  DEFINITION                                           CST
         SPACE 2                                                    CST
         DC    AL1(DEV3380)        DEVTYP                           CST
         DC    CL15'3380 DISK PACK'                                 CST
         DC    H'3840,15,0,1,15,13275'                              CST
*******  3375  DEFINITION                                           CST
         SPACE 2                                                    CST
         DC    AL1(DEV3375)        DEVTYP                           CST
         DC    CL15'3375 DISK PACK'                                 CST
         DC    H'3840,15,0,1,15,13275'  (NOT YET ANNOUNCED 5/81)    CST
         SPACE 5
         DC    X'00'                   END OF TABLE
         SPACE 6
* BUFFER FOR JOB FILE CONTROL BLOCK:
         SPACE
         DS    0D
JFCB     DS    CL176
         SPACE 2
* PDS DIRECTORY BLOCK BUFFER:
         SPACE
PDSBUF   DS    1D              KEY
PDSLRECL DS    1H              LOGICAL RECORD LENGTH
PDSDATA  DS    CL254           DATA
         SPACE 2
* WORK AREA FOR 'OBTAIN' MACRO:
         SPACE
         ORG   PDSBUF                  OVERLAPS PDS DIRECTORY BUFFER
OBWORK   DS    0D                      'OBTAIN' WORK AREA
         DS    350C
         SPACE 2
*************************************************************
*   PDSDCB RELOCATED HERE TO ALLOW FOR MORE SPACE WITHIN    *
*   THE FIRST @ BASE REGISTER AREA....                      *
*************************************************************
         SPACE
PDSDCB   DCB   DSORG=PS,                                               X
               MACRF=R,                                                X
               DDNAME=VOLUME01,                                        X
               DEVD=DA,                                                X
               RECFM=F,                                                X
               KEYLEN=8,                                               X
               BLKSIZE=256,                                            X
               EODAD=PDSEODAD,                                         X
               SYNAD=PDSSYNAD,                                         X
               EXLST=JFCBADR
         SPACE 2
* MISCELLANEOUS.
         SPACE
DSNJFCB  DS    CL44
TRK0NAME DC    CL44'VOLUME LABEL'
VTOCNAME DC    CL44'VOLUME TABLE OF CONTENTS **VTOC**VTOC**VTOC*'
REVMSG   DC    C'VERSION 4.0, MAY 1981 -- UCLA/OAC -- ( SUPPORT FOR INDX
               EXED VTOCS )'                                      CST
DS5WARN  DC    C'*******WARNING--BOS FLAG IS ON; FORMAT 5 DSCB''S MAY NX
               OT REFLECT TRUE STATUS OF AVAILABLE TRACKS'
GMFMSG   DC    C'*******INSUFFICIENT CORE TO HOLD ENTIRE VTOC; GOING ONX
                TO NEXT VOLUME'
         SPACE 3
DSORGTAB DS    0H
         DC    C'IS',AL1(ISDSORG)
         DC    C'DA',AL1(DADSORG)
         DC    C'PS',AL1(PSDSORG)
         DC    C'PO',AL1(PODSORG)
         DC    C'U ',AL1(X'01')
DSORGEND EQU   ((*-DSORGTAB)/3)
         EJECT
***********************************************************         CST
*              INDEXED VTOC INTERFACE                     *         CST
***********************************************************         CST
         DC    0F'0'                                                CST
         USING GENESIS,RBASE1,RBASE2                                CST
         USING *,R15                                                CST
IXSUB1   XC    IXWORD,IXWORD           FIRST ENTRY                  CST
         DROP  R15                                                  CST
IXSUB2   BALR  R8,0                    SUBSEQUENT ENTRIES           CST
         USING *,R8                                                 CST
         ST    RRET,IXSAVE14                                        CST
         ST    RDS5,IXFMT5             AREA FOR FMT5                CST
         LA    R1,IXPARM               POINT TO PARMLIST            CST
         L     R15,IXVCON              POINT TO ROUTINE             CST
         BALR  RRET,R15                CALL INTERFACE ROUTINE       CST
         L     RRET,IXSAVE14           RESTORE R14                  CST
         C     R15,IXFOUR              INTERPRET RETURN CODE        CST
         BLR   RRET                    RC=0  WORKED OK              CST
         BE    4(RRET)                 RC=4  NOT INDEXED VTOC       CST
         EX    0,*                     RC>4  SOME ERROR             CST
         SPACE 4                                                    CST
IXPARM   DC    A(IXWORD)               WORK WORD                    CST
         DC    V(VTOCDCB)              OPEN DCB                     CST
         DC    A(IXCT1)                COUNT OF FREE DSCBS          CST
         DC    A(IXCT2)                COUNT OF FREE VIRS           CST
IXFMT5   DC    A(0)                    PTR TO PSUEDO FMT5           CST
         SPACE 2                                                    CST
IXWORD   DC    F'0'                                                 CST
IXCT1    DC    F'0'                                                 CST
IXFRDSCB EQU   IXCT1+2                                              CST
IXCT2    DC    F'0'                                                 CST
         SPACE 2                                                    CST
IXSAVE14 DC    F'0'                                                 CST
IXVCON   DC    V(IXTOFMT5)                                          CST
IXFOUR   DC    F'4'                                                 CST
IXHEAD   DC    C'VTOC FORMAT IS INDEXED.  FREE VIRS='               CST
IXHEADL  EQU   *-IXHEAD                                             CST
         DROP  RBASE1,RBASE2,R8                                     CST
         EJECT
***********************************************************
*       CATALOG READ ROUTINE FOR CATALOG USAGE.           *
***********************************************************
         DC    0F'0' GET SOME DECENT ALIGNMENT
         USING GENESIS,RBASE1,RBASE2   GET SOME DECENT ADDRESSA
         USING *,R15
CATLGCK  STM   RRET,R12,12(RSAVE)
         B     AROUNDSA
         DC    CL8'CATLGCK'
CATCKSA  DC    18F'0'
AROUNDSA DS    0H
         LR    RLCLBASE,R15
         LR    R7,RSAVE   PRESERVE GUYS SAVE AREA POINTER
         DROP  R15
         USING CATLGCK,RLCLBASE
         ST    RSAVE,CATCKSA+4  FORWARD CHAIN
         LA    RSAVE,CATCKSA   GET OUR OWN SAVE AREA
         ST    RSAVE,8(,R7)    BACKWARD CHAIN
         SPACE 5
READVICE MVC   TTR,=X'000001'               *ADDR OF FIRT BLOCK
         LOCATE INDEXBLK   READ 1ST BLOCK OF CATALOG
*  INSERT ERROR CHECKING ROUTINES HERE
         SPACE 10
         LA    R7,BLKAREA+2           *POINT TO V.I.C.E.
         USING DS4,RDS4
         L     RDS4,FMT4ADDR   POINT AT VOLUME DESCRIPTION
         SR    R3,R3   CLEAR WORK REG
         IC    R3,DS4DEVDB   GET NUMBER OF DIRECTORY BLOCKS/TRACK
         LH    RWK4,16(R7)           TT (FROM TTR) OF 1ST AVAIL BLOCK
         MR    RWK3,R3   TOTAL NUMBER OF BLOCKS IN RWK4 (RWK3+1)
*   RWK3 IS CLEARED TO ZERO BY ABOVE -- PLEASE MAKE A NOTE...
         IC    RWK3,18(R7)             *R OF 1ST AVAILABLE BLK
         AR    RWK4,RWK3                    *TOTAL NO OF BLKS USED+1
         BCTR  RWK4,0                        *DECREMENT BY ONE
         CVD   RWK4,BLKSUSED
         OI    BLKSUSED+7,X'0F'             *CHANGE SIGN
         UNPK  F1DSORG+9(4),BLKSUSED    *MOVE BLKS USED TO PRINT
         MVC   F1DSORG-1(10),=C'BLKS USED='
         MVC   F1DSORG+13(2),=8C' ' BLANK OUT MIDDLE GROUND
* STATUS: RWK4(R5)=BLKS USED, RWK3(R4)=R NO.,R3=DS4DEVDB
         LH    RWK1,12(R7)             *LAST TT OF CATALOG
*  NOTE THAT RWK3 IS ZEROES EXCEPT FOR LAST BYTE
         IC    RWK3,14(R7)             *LAST R
         MR    RWK1,RWK1   R3 WILL HAVE TOT NO. OF BLOCKS
*  NOTE: MR OPERATES ON R1+1 AND R2, GIVING PRODUCT IN R1+R2 COMBINED
         AR    RWK3,R3      *TOTAL NO OF BLOCKS IN CATLG
         SR    RWK3,RWK4                    *BLKS LEFT
         CVD   RWK3,BLKSUSED
         OI    BLKSUSED+7,X'0F'             *CHANGE SIGN
         MVC   F1OPTCD-10(10),=C'BLKS AVAL='
         UNPK  F1OPTCD(4),BLKSUSED   *MOVE BLKS LEFT TO PRINT
         L     RSAVE,CATCKSA+4
         RETURN (14,12),T,RC=(15)
         SPACE 10
BLKSUSED DC    D'0'
INDEXBLK CAMLST BLOCK,TTR,VOLUME,BLKAREA
         DS    0H
TTR      DS    CL3
BLKAREA  DS    0D
         DS    265C
*     ****** MUCHO SPACE ******
         LTORG *
         DS    C              INDICATE WHERE IT ALL ENDS...
         DROP RBASE1,RBASE2,RLCLBASE
         EJECT
***********************  EXIT ROUTINE FOR OPEN ERROR **************  MS
OPENERR  DS    0H                                                    MS
         MVI   3(R1),X'04'    SET ON BIT TO IGNORE ERROR SO THE      MS
*                             MAINLINE CODE CAN ISSUE A MSG TO USER  MS
         BR    RRET           RETURN                                 MS
 TITLE 'DIRECT-ACCESS DIRECTORY LISTER                  DUMMY SECTIONS'
* DUMMY SECTION TO DEFINE TRACK MAP ENTRY
         SPACE 2
*              *************************
*              *                       *
*            0 * ADDRESS OF NEXT ENTRY *
*              *                       *
*              *************************
*              *                       *
*            4 *        CC HH 1        *
*              *                       *
*              *************************
*              *                       *
*            8 *        CC HH 2        *
*              *                       *
*              *************************
*              *           *     *     *
*           12 * NUMB TRKS * EXT * NU  *
*              *           *     *     *
*              *************************
*              *                       *
*           16 *   ADDRESS OF DSNAME   *
*              *                       *
*              *************************
*              *           *           *
*           20 *  TTREL 1  *  TTREL 2  *
*              *           *           *
*              *************************
         SPACE 2
MB       DSECT
MBCHAIN  DS    F
MBCCHH1  DS    F
MBCCHH2  DS    F
MBNTRKS  DS    H
MBEXT    DS    CL1
         DS    CL1
MBNAME   DS    F
MBTTREL1 DS    H
MBTTREL2 DS    H
         SPACE
MBSIZE   EQU   *-MB
         SPACE
FBCHAIN  EQU   MBCHAIN-MB
FBCCHH1  EQU   MBCCHH1-MB
FBCCHH2  EQU   MBCCHH2-MB
FBNTRKS  EQU   MBNTRKS-MB
FBEXT    EQU   MBEXT-MB
FBNAME   EQU   MBNAME-MB
FBTTREL1 EQU   MBTTREL1-MB
FBTTREL2 EQU   MBTTREL2-MB
         EJECT
* DUMMY SECTION TO DEFINE PDS DIRECTORY ITEM
         SPACE 2
*              *************************
*              *                       *
*            0 *                       *
*              *      MEMBER NAME      *
*            4 *                       *
*              *                       *
*              *************************
*              *                 *     *
*            8 *       TT R      *  C  *
*              *                 *     *
*              *************************
*              *                       *
*           12 *       USER DATA       *
*            . *                       *
*            . *      0-62 BYTES       *
*            . *                       *
*            . *           *************
*            . *           *
*           72 *           *
*              *           *
*              *************
         SPACE 2
DIRBLOCK DSECT
         SPACE
DIRNAME  DS    CL8
DIRTTR   DS    CL3
DIRC     DS    CL1
DIRUDATA DS    CL62
         EJECT
* DSCB FORMATTING DUMMY SECTIONS
         SPACE
* FORMAT 1 DSCB:
         SPACE
DS1      DSECT
         IECSDSL1  1
DS1FDAD  DS    CL8
DS1CHAIN DS    F
DS1NXTF1 DS    F
         SPACE
DS1SIZE  EQU   *-DS1
         SPACE
FM1NXTF1 EQU   DS1NXTF1-DS1
FM1DSNAM EQU   DS1DSNAM-DS1
         EJECT
* FORMAT 2 DSCB:
         SPACE
DS2      DSECT
         IECSDSL1  2
DS2FDAD  DS    CL8
         SPACE
DS2SIZE  EQU   *-DS2
         EJECT
* FORMAT 3 DSCB:
         SPACE
DS3      DSECT
         IECSDSL1  3
DS3FDAD  DS    CL8
DS3CHAIN DS    F
         SPACE
DS3SIZE  EQU   *-DS3
         EJECT
* FORMAT 4 DSCB:
         SPACE
DS4      DSECT
DS4DSNAM DS    11F
         IECSDSL1  4
DS4FDAD  DS    CL8
         SPACE
DS4SIZE  EQU   *-DS4
         EJECT
* FORMAT 5 DSCB:
         SPACE
DS5      DSECT
         IECSDSL1  5
DS5FDAD  DS    CL8
DS5CHAIN DS    F
         SPACE
DS5SIZE  EQU   *-DS5
         EJECT
* DCB FIELD DEFINING DUMMY SECTION
         SPACE 2
         DCBD  DSORG=PS,DEVD=DA
         EJECT
* JOB FILE CONTROL BLOCK DUMMY SECTION
         SPACE 2
JFDUMMY  DSECT
         IEFJFCBN
         EJECT
* TASK I/O TABLE (TIOT) DEFINING DUMMY SECTION:
         SPACE 2
TIOT     DSECT
         IEFTIOT1
         SPACE 6
         END   VTOCLIST
XPRT     TITLE 'XPRNTSUB - GENERAL PRINTING SUBROUTINE'
         SPACE
* FUNCTION/OPERATION:  THIS IS A GENERAL PRINTING SUBROUTINE TO MANAGE
*        THE DETAILS OF PAGINATION, HEADINGS, AND OUTPUT COMPRESSION
*        FOR PRINTED OUTPUT.  IT IS INVOKED FROM A PROBLEM PROGRAM VIA
*        THE MACRO 'XPRNT', WHICH HAS THE FOLLOWING CALL MODES:
*           OPEN - INITIALIZES PAGE SIZE PARAMETERS AND MAXIMUM NUMBER
*              OF OUTPUT LINES, RESETS PAGE NUMBER, CLEARS HEADING
*              LINES AND INSERTS CURRENT DATE AND TIME, INSERTS DDNAME
*              IN DCB, AND OPENS THE DATA SET.
*           MODIFY - ALTERS ANY OR ALL OF THE PARAMETERS LISTED UNDER
*              'OPEN' EXCEPT THE DDNAME.
*           SETHEAD - SUPPLIES TEXT FOR ONE OR MORE LINES TO BE USED
*              PAGE HEADINGS.
*           PRINT - DELIVERS ONE OR MORE LINES TO BE PRINTED.
*           SPACE - MOVES THE PAGE VERTICALLY A GIVEN NUMBER OF LINES.
*           EJECT - CONDITIONAL OR UNCONDITIONAL SKIP TO HEAD-OF-FORM.
*           CLOSE - CLOSES THE DATA SET.
         SPACE
* ENTRY POINTS:  EACH MODE HAS A SEPARATE ENTRY AT A FIXED OFFSET FROM
*        THE BASE ADDRESS.  ENTRYS ARE EFFECTED BY A  BAL  14,D(15)
*        (WHERE D IS A DISPLACEMENT WHICH SELECTS THE DESIRED MODE) AND
*        ASSUMES THAT REGISTER 13 ADDRESSES A STANDARD 18-WORD SAVE
*        AREA.
         SPACE
* INPUT:  ON ENTRY, REG 0 POINTS TO A WORK AREA FOR THE DATA SET, WHICH
*        IS DESCRIBED IN THIS CODING BY THE DUMMY SECTION 'WORKAREA'.
*        REG 1 POINTS TO A PARAMETER LIST OF A FORM APPROPRIATE TO THE
*        CALL MODE.  THESE LISTS ARE EITHER DESCRIBED BY DUMMY SECTIONS
*        OR ARE STANDARD VARIABLE-LENGTH ADDRESS LISTS.
         SPACE
         SPACE
* OUTPUT:  PRINT LINES AND SPACE CONTROL RECORDS ARE DELIVERED VIA QSAM
*        TO A SEQUENTIAL DATA SET.  EACH LINE IS REDUCED TO ITS MIN-
*        IMUM LENGTH BY TRUNCATING TRAILING BLANKS.
         SPACE
* DATA SETS:  THE OUTPUT DATA SET IS SEQUENTIAL, ARRANGED FOR BLOCKED
*        FORMAT V RECORDS USING MACHINE CONTROL CHARACTERS APPROPRIATE
*        TO 1403 OR 1404 PRINTERS.  THE DDNAME IS SUPPLIED BY THE
*        'OPEN' CALL; THE STANDARD VALUE IS 'SYSPRINT'.
         SPACE
* EXTERNAL ROUTINES:  CALLS 'XDATEDIT' TO FORMAT THE DATE FOR THE
*        PAGE HEADING LINE.
         SPACE
* EXITS - NORMAL:  RETURNS VIA REG 14 WITH RETURN CODE 0 IN REG 15.
*        THE CURRENT PAGE NUMBER (IN BINARY) IS IN REG 0 AND THE BINARY
*        NUMBER OF LINES REMAINING ON THE CURRENT PAGE IS IN REG 1.
*        IF AN OPEN CALL CANNOT OPEN THE DCB, THE RETURN CODE IS 4.
         SPACE
* EXITS - ERROR:  ERRONEOUS CALLS RESULT IN AN 'ABEND' WITH ONE OF THE
*        FOLLOWING COMPLETION CODES:
*           4000 - ROUTINE WAS ILLEGALLY ENTERED AT ITS BASE ADDRESS.
*           4002 - A CALL MODE OTHER THAN 'OPEN' WAS DIRECTED TO A DATA
*              SET WHICH WAS NOT OPEN.
*           4003 - 'OPEN' OR 'MODIFY' SPECIFIED TOO LARGE A PAGE WIDTH.
*           4004 - 'OPEN' OR 'MODIFY' SPECIFIED TOO LONG A PAGE.
*           4005 - 'PRINT' OR 'SETHEAD' SPECIFIED A LINE WHOSE TEXT
*              LENGTH PLUS OFFSET EXCEEDED THE PAGE WIDTH.
*           4006 - THE MAXIMUM NUMBER OF OUTPUT LINES WAS EXCEEDED.
*           4007 - SYNCHRONOUS I/O ERROR.
         SPACE
* TABLES/WORK AREAS:  THE CALL PARAMETER LISTS, WORK AREA, AND PRINT
*        LINE DESCRIPTOR BLOCK ARE ALL DESCRIBED BY DUMMY SECTIONS
*        AT THE END OF THE PROGRAM.
         SPACE
* ATTRIBUTES:  REENTRANT, READ-ONLY.  WILL HANDLE ANY NUMBER OF DATA
*        SETS SIMULTANEOUSLY, USING A SEPARATE WORK AREA FOR EACH.
         SPACE
* OPERATING ENVIRONMENT:  RUNS UNDER OPERATING SYSTEM/360, USING
*        QSAM DATA MANAGEMENT WITH LOCATE-MODE PUT MACROS AND SIMPLE
*        BUFFERING.  ASSUMES OPTION 6A OR 6B FOR TIME OF DAY.
         SPACE
* NOTES:  NONE.
         EJECT
XPRNTSUB CSECT
         SPACE 2
* REGISTER ASSIGNMENTS:
         SPACE 2
* N.B.  REGISTER GROUPS 'RWA,RWB,RWC,RWD' AND 'RLPEXIT,RPARM' MUST BE
* KEPT IN ORDER FOR LM AND STM ORDERS.
         SPACE
RWA      EQU   2               GENERAL WORK REG
RWB      EQU   3               GENERAL WORK REG
RWC      EQU   4               GENERAL WORK REG
RWD      EQU   5               GENERAL WORK REG
RSPACE   EQU   6               NUMBER OF LINES TO SPACE
RBAL     EQU   7               NUMBER OF LINES LEFT ON PAGE
RLPEXIT  EQU   8               EXIT FROM LIST PROCESSING ROUTINE
RPARM    EQU   9               CALL PARAMETER LIST ADDR
RPLD     EQU   10              PLD BLOCK BASE
RWKAREA  EQU   11              BASE REGISTER FOR WORK AREA
RBASE    EQU   12              BASE REGISTER FOR CODING
RRET     EQU   14              STANDARD RETURN ADDR
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 3
* MASKS FOR CONTROL BYTE "SWITCHES":
         SPACE
HOFBIT   EQU   X'80'           PAGE IS AT PHYSICAL HEAD-OF-FORM
NOSKBIT  EQU   X'40'           DISALLOW EJECT DURING HEAD PRINTING
TXT1BIT  EQU   X'20'           ON FOR FIRST TEXT LINE ON PAGE
HD1BIT   EQU   X'10'           ON FOR FIRST HEAD LINE WITH PAGE NO, ETC
SP0BIT   EQU   X'08'           LAST LINE SPACED 0
         SPACE 2
EJFORCE  EQU   255             SPACING QUANTITY TO FORCE PAGE EJECT
OPENBIT  EQU   X'10'           TO TEST 'DCBOFLGS' FOR SUCCESSFUL OPEN
MAXLNGTH EQU   254             MAXIMUM PAGE LENGTH
MAXWIDTH EQU   132             MAXIMUM PAGE WIDTH
DEFBLKSZ EQU   1692            DEFAULT DCB BLOCK SIZE
         EJECT
**********************
* ENTRY AND PROLOGUE *
**********************
         SPACE
* ENTER FROM THE CALLING SEQUENCE VIA THE INSTRUCTION "BAL 14,X(0,15)".
* REGISTER 15 IS SET TO THE BASE OF THE ROUTINE AND THE DISPLACEMENT
* "X" SELECTS THE ENTRY POINT.  EACH ENTRY SAVES REGISTERS, LOADS THE
* ADDRESS OF THE APPROPRIATE SUBROUTINE, AND GOES TO A COMMON
* PROLOGUE.  NOTE THAT AN ATTEMPT TO ENTER AT THE BASE RESULTS IN
* AN ABEND.
         SPACE 2
BASEADDR B     20(0,R15)               BRANCH AROUND MODULE IDENTIFIER
         DC    AL1(15)                 LENGTH OF IDENTIFIER
         DC    CL15'XPRNTSUB-028214'
         STM   R14,R12,12(R13)         SAVE CALLER'S REGISTERS
         SR    R1,R1                   SET ABEND COMPLETION CODE
         LR    RBASE,R15               SET BASE REG FOR ABEND ROUTINE
         USING BASEADDR,RBASE
         B     ABEND
         DROP  RBASE
         SPACE 2
* ENTRY POINTS FOR VARIOUS FUNCTIONS, AT 12-BYTE INTERVALS BEGINNING
* AT BASEADDR+32.  EACH LOADS "RWA" WITH THE ADDRESS OF THE SUBROUTINE
* TO GO TO AFTER EXECUTING "PROLOGUE".
         SPACE
         ORG   XPRNTSUB+32
         USING BASEADDR,R15
         SPACE
PRENTRY  STM   R14,R12,12(R13)         PRINT
         LA    RWA,PRPROC
         B     PROLOGUE
SPENTRY  STM   R14,R12,12(R13)         SPACE
         LA    RWA,SPPROC
         B     PROLOGUE
OPENTRY  STM   R14,R12,12(R13)         OPEN
         LA    RWA,OPPROC
         B     PROLOGUE
CLENTRY  STM   R14,R12,12(R13)         CLOSE
         LA    RWA,CLPROC
         B     PROLOGUE
SHENTRY  STM   R14,R12,12(R13)         SETHEAD
         LA    RWA,SHPROC
         B     PROLOGUE
EJENTRY  STM   R14,R12,12(R13)         EJECT
         LA    RWA,EJPROC
         B     PROLOGUE
MDENTRY  STM   R14,R12,12(R13)         MODIFY
         LA    RWA,MDPROC
         B     PROLOGUE
         SPACE 2
* PROLOGUE.  SET UP BASE REGISTERS FOR CODING AND WORK AREA.  CHAIN
* SAVE AREAS IN STANDARD FASHION.  LOAD "RBAL" WITH CURRENT PAGE
* BALANCE AND "RPARM" WITH THE CALLING PARAMETER LIST ADDRESS.
         SPACE
PROLOGUE LR    RBASE,R15               LOAD CODING BASE REG
         USING BASEADDR,RBASE
         DROP  R15
         SPACE
         LR    RWKAREA,R0              BASE REG FOR WORK AREA
         USING WORKAREA,RWKAREA
         SPACE
         LR    RWB,R13                 ADDR OF CALLER'S SAVE AREA
         LA    R13,SAVEAREA            ADDR OF OUR SAVE AREA
         ST    R13,8(RWB)              CHAIN TO US FROM CALLER
         ST    RWB,SAVEAREA+4          CHAIN TO CALLER FROM US
         SPACE
         LR    RPARM,R1                LOAD PARAMETER LIST ADDR
         LH    RBAL,PAGEBAL            LOAD PAGE LINE COUNT BALANCE
         MVC   DCBSYNAD(3),=AL3(SYNAD) PUT ERROR ROUTINE ADDRESS IN DCB
         SPACE
         TM    DCBOFLGS,OPENBIT        MAKE SURE DATA SET IS OPEN
         BCR   1,RWA                   BRANCH IF OPEN
         CL    RWA,=A(OPPROC)          IF NOT, ONLY OPEN CALL ALLOWED
         BCR   8,RWA                   BR IF OPEN CALL
         LA    R1,2                    ERROR CODE 2, GO TO ABEND
         SPACE 3
* ABEND ROUTINE FOR SERIOUS ERRORS.  ENTER WITH ERROR NUMBER IN R1.
* ADD DECIMAL 4000 FOR USER CONPLETION CODE AND ISSUE 'ABEND' WITH DUMP
         SPACE
         CNOP  2,4                     ALIGN CONSTANT FOLLOWING SVC
ABEND    AL    R1,*+6                  LOAD ABEND CODES
         SVC   13                      ISSUE ABEND SVC
         DC    X'80'                   'DUMP' BIT FOR ABEND
         DC    AL3(4000)               BASE FOR COMPLETION CODE
         EJECT
************
* EPILOGUE *
************
         SPACE
* ALL MODES RETURN TO THE CALLER VIA THIS ROUTINE.  IT EXITS WITH
* THE RETURN CODE IN REGISTER 15, THE PAGE NUMBER IN REGISTER 0, AND
* THE NUMBER OF LINES REMAINING ON THE PAGE IN REGISTER 1.
         SPACE 2
EXIT4    LA    R15,4                   SET RETURN CODE 4
         B     EXIT
         SPACE
EXIT0    SR    R15,R15                 SET RETURN CODE 0
         SPACE
EXIT     LH    R0,PAGENO               LOAD CURRENT PAGE NUMBER
         LR    R1,RBAL                 LOAD NUMBER OF LINES LEFT
         STH   RBAL,PAGEBAL            SAVE PAGE BALANCE
         XC    DCBSYNAD(3),DCBSYNAD    CLEAR ERROR ROUTINE ADDRESS
         SPACE
         L     R13,SAVEAREA+4          ADDRESS OF CALLER'S SAVE AREA
         L     R14,12(R13)             LOAD RETURN ADDRESS
         LM    R2,R12,28(R13)          RESTORE CALLER'S REGISTERS
         MVI   12(R13),X'FF'           SET RETURN INDICATION
         BR    R14                     RETURN TO CALLER
         EJECT
******************
* PRINT FUNCTION *
******************
         SPACE
* PRINT LINE DELIVERY CALL.  THE PARAMETER LIST IS A VARIABLE-LENGTH
* LIST OF ADDRESSES, THE LAST OF WHICH IS NEGATIVE (I.E. BIT 0 IS A 1).
* EACH ADDRESS POINTS TO A PLD DESCRIBING A LINE TO BE PRINTED.  CALL
* THE GENERAL LIST PROCESSING ROUTINE TO DO THE DIRTY WORK.
         SPACE 2
PRPROC   BAL   RLPEXIT,LISTPROC        INVOKE LIST PROCESSOR
         SPACE
         B     EXIT0                   EXIT TO CALLER
         EJECT
******************
* SPACE FUNCTION *
******************
         SPACE
* CALL TO MOVE THE PAPER A SPECIFIED NUMBER OF LINES.  IF THE NUMBER
* OF LINES EXCEEDS THE CURRENT PAGE BALANCE, AN EJECT RESULTS, UNLESS
* SUPPRESSED BY THE 'SPNOEJ' BIT IN THE PARAMETER LIST.  IF THE PAGE
* IS AT HEAD-OF-FORM, SPACING IS SUPPRESSED UNLESS THE 'SPATHOF' BIT
* IS SET IN THE PARAMETER LIST.  IN THE LATTER CASE, THE PAGE HEADINGS
* WILL BE PRINTED BEFORE THE SPACING IS EXECUTED.
         SPACE 2
         USING SPPARM,RPARM            ADDRESSING FOR PARM LIST
         SPACE
SPPROC   TM    SWITCHES,HOFBIT         TEST IF AT HEAD-OF-FORM
         BZ    SPSUBTR                 BR IF NOT
         TM    SPCOND,SPATHOF          IS SPACE ALLOWED AT HOF?
         BZ    EXIT0                   EXIT IF NOT
         BAL   RRET,HEADPRNT           IF SO, PRINT HEADINGS FIRST
         SPACE
SPSUBTR  SR    RSPACE,RSPACE
         IC    RSPACE,SPQUAN           LOAD SPACING AMOUNT
         SR    RBAL,RSPACE             COMPUTE NEW PAGE BALANCE
         SPACE
         BP    SPMOVE                  BRANCH IF BAL STILL > 0
         TM    SPCOND,SPNOEJ           TEST IF EJECT ALLOWED
         BO    SPMOVE                  BRANCH IF NOT
         LA    RSPACE,EJFORCE          IF ALLOWED, FORCE EJECT
         SPACE
SPMOVE   BAL   RWA,MOVE                CALL PAPER MOVING SUB
         B     EXIT0                   EXIT TO CALLER
         SPACE
         DROP  RPARM
         EJECT
******************
* EJECT FUNCTION *
******************
         SPACE
* CALL TO MOVE THE PAPER TO HEAD-OF-FORM.  IF THE PAGE IS ALREADY
* THERE, THE EJECT IS NOT EXECUTED UNLESS THE 'EJATHOF' BIT IN THE
* PARAMETER LIST IS ON.  IN THE LATTER CASE, A SKIP IS EXECUTED WITHOUT
* PRINTING ANY HEADINGS, RESULTING IN A BLANK PAGE.  IF THE MASK BITS
* IN THE 'EJCOND' PARAMETER ARE NOT ALL ONES, A CONDITIONAL EJECT IS
* REQUESTED.  THE PAGE BALANCE IS COMPARED AGAINST THE TEST QUANTITY
* 'EJQUAN' IN THE PARAMETER LIST, THEN THE DECISION TO EJECT OR NOT
* IS MADE WITH A 'BC' ORDER USING THE 'EJCOND' BITS AS A MASK.
         SPACE 2
         USING EJPARM,RPARM            FOR PARM LIST ADDRESSING
         SPACE
EJPROC   TM    SWITCHES,HOFBIT         TEST IF AT HOF
         BZ    EJTEST                  BR IF NOT
         TM    EJCOND,EJATHOF          IF SO, IS EJECT ALLOWED?
         BZ    EXIT0                   IF NOT, EXIT
         SPACE
EJTEST   SR    R0,R0
         IC    R0,EJQUAN               LOAD TEST QUANTITY
         IC    R1,EJCOND               GET CONDITIONAL TEST MASK
         N     R1,=XL4'000000F0'       KEEP BITS 24-27 ONLY
         CR    RBAL,R0                 COMPARE BALANCE WITH TEST QUAN
         EX    R1,EJBC                 EXECUTE BC WITH MASK FROM PARM
         B     EXIT0                   EXIT IF CONDITION NOT MET
         SPACE
EJMOVE   LA    RSPACE,EJFORCE          TO FORCE EJECT
         BAL   RWA,MOVE                CALL PAPER MOVER SUB
         B     EXIT0                   EXIT TO CALLER
         SPACE 2
EJBC     BC    0,EJMOVE                BRANCH IF EJECT REQUIRED
         SPACE
         DROP  RPARM
         EJECT
*****************
* OPEN FUNCTION *
*****************
         SPACE
* THIS MUST BE THE FIRST CALL FOR A NEW DATA SET.  IT SETS THE DDNAME
* IN THE DCB AND OPENS THE DATA SET.   ALL COUNTERS AND SWITCHES ARE
* SET TO THEIR NOMINAL VALUES BEFORE PROCESSING ANY OPTIONS WHICH
* MAY HAVE BEEN SUPPLIED WITH THE CALL.  THE PAGE BALANCE IS SET TO
* ZERO, BUT THE PAGE IS NOT MOVED.  THE PROGRAMMER SHOULD NORMALLY
* ISSUE AN 'EJECT' CALL BEFORE BEGINNING HIS OUTPUT.
         SPACE
* IF THE DATA SET IS ALREADY OPEN, THE DDNAME IS IGNORED, THE NOMINAL
* OPTIONS ARE SET, THEN THIS CALL IS TREATED EXACTLY AS IF IT WERE A
* 'MODIFY' CALL.
         SPACE 2
         USING OMPARM,RPARM
         SPACE
OPPROC   MVC   PAPARMS(DEFSIZE),DEFAULTS  SET STANDARD OPTIONS
         MVI   HLTEXT,C' '             CLEAR HEADING TEXT
         MVC   HLTEXT+1(HLTXTLNG-1),HLTEXT
         SPACE
         TIME  DEC                     GET CURRENT DATE & TIME
         STM   R0,R1,HPRSAVE           SAVE TIME AND DATE
         SPACE
* NOW IF DATA SET IS ALREADY OPEN, GO TO 'MDPROC'.  OTHERWISE, INSERT
* DDNAME AND OPEN IT.
         SPACE
         TM    DCBOFLGS,OPENBIT        TEST IF OPEN
         BO    OPJOIN                  BR TO 'MDPROC' IF OPEN
         MVC   DCBDDNAM(8),OMDDNAME    INSERT DDNAME INTO CLOSED DCB
         MVC   DCBEXLST(3),=AL3(EXLST) INSERT ADDRESS OF EXIT LIST
         SPACE
         MVI   DWORK,X'80'             SET END-OF-LIST BIT
         OPEN  (PRINTDCB,(OUTPUT,LEAVE)),MF=(E,DWORK)
         SPACE
         XC    DCBEXLST(3),DCBEXLST    CLEAR ADDRESS OF EXIT LIST
         TM    DCBOFLGS,OPENBIT        TEST FOR SUCCESSFUL OPEN
         BO    OPJOIN                  TO 'MDPROC' IF O.K.
         B     EXIT4                   EXIT WITH RC=4 IF OPEN FAILS
         SPACE
         DROP  RPARM
         EJECT
* DCB EXIT ROUTINE FOR OPEN.  SET BLOCK SIZE TO THE DEFAULT VALUE IF
* NOT SPECIFIED IN DS LABEL OR DD CARD.
         SPACE
EXLST    DS    0F                      EXIT LIST, ON BOUNDARY
         DC    X'85'
         DC    AL3(DCBMOD)
         SPACE
DCBMOD   LH    RWA,DCBBLKSZ            LOAD BLOCK SIZE
         LTR   RWA,RWA                 TEST IF ZERO
         BNZ   DCBNZ                   BRANCH IF NOT ZERO
SETDEF   LA    RWA,DEFBLKSZ            SET DEFAULT BLOCK SIZE
         STH   RWA,DCBBLKSZ            STORE IN DCB
         BR    R14                     RETURN TO OPEN ROUTINE
DCBNZ    CH    RWA,=H'141'             TEST FOR MINIMUM BLOCKSIZE
         BL    SETDEF                  USE DEFAULT IF TOO LOW
         BR    R14                     RETURN TO OPEN IF OK
         EJECT
*******************
* MODIFY FUNCTION *
*******************
         SPACE
* THIS CALL MAY ALTER ANY  OR ALL OF THE FOLLOWING: DATE, TIME, PAGE
* NUMBER, PAGE LENGTH, PAGE WIDTH, MAXIMUM NUMBER OF OUTPUT LINES.
* THE NEW VALUES ARE PRESENTED IN A PARAMETER LIST.  IF A PARAMETER IS
* ZERO, THE CORRESPONDING QUANTITY IS NOT ALTERED.
         SPACE
* THE DATE AND TIME FIELDS MAY BE SUPPLIED BY THE 'OPEN' ROUTINE,
* WHICH JOINS THIS CODING AT 'OPJOIN'.  IN THAT CASE, THE VALUES
* INSERTED BY 'OPEN' ARE USED UNLESS OVERRIDDEN BY THE PARAMETER LIST.
         SPACE
         USING OMPARM,RPARM
         SPACE
MDPROC   SR    R0,R0                   GENERATE TWO ZERO WORDS
         SR    R1,R1
         STM   R0,R1,HPRSAVE           SET DATE & TIME FIELDS TO ZERO
         SPACE
* ENTER HERE FROM 'OPEN'.  THE OBJECT OF THE FOLLOWING IS TO GET THE
* ACTUAL TIME AND DATE (IN PACKED DECIMAL) INTO 'HPRSAVE' AND
* 'HPRSAVE+4', RESPECTIVELY.  THOSE FIELDS MAY HAVE BEEN FILLED IN BY
* THE OPEN ROUTINE, OR THEY MAY HAVE BEEN SET TO ZEROS BY 'MDPROC'
* ABOVE.  NOW WE SEE IF ADDRESSES FOR TIME AND/OR DATE VALUES WERE
* PROVIDED IN THE PARAMETER LIST, AND TRANSFER THE VALUES IF SO.
         SPACE
OPJOIN   LM    RWA,RWB,OMTIMEAD        LOAD TIME & DATE ADDRS FROM PARM
         LTR   RWA,RWA                 TEST FOR TIME ADDR SUPPLIED
         BZ    NOTIME                  BRANCH IF ZERO
         MVC   HPRSAVE(4),0(RWA)       GET TIME AS DECIMAL 'HHMMSSTH'
NOTIME   LTR   RWB,RWB                 TEST IF DATE ADDR SUPPLIED
         BZ    DATEEDIT                BR IF NOT
         MVC   HPRSAVE+4(4),0(RWB)     GET DECIMAL DATE AS '00YYDDD+'
         SPACE
* IF THE DATE VALUE IS NOT ZERO, EDIT INTO THE HEADING LINE TEXT.  BOTH
* THE DAY NUMBER AND THE MONTH-DAY-YEAR FORM ARE USED.
         SPACE
DATEEDIT LM    RWA,RWB,HPRSAVE         LOAD TIME & DATE FOR TESTING
         LTR   RWB,RWB                 TEST IF DATE WAS GIVEN
         BZ    TIMEEDIT                BRANCH IF ZERO
         SPACE
         MVC   HLDAY(4),=C'DAY='       INSERT DAY NUMBER
         UNPK  HLDAY+4(3),HPRSAVE+6(2) UNPACK DAY NUMBER
         OI    HLDAY+6,X'F0'           TIDY UP SIGN BITS
         SPACE
         ST    RWB,DWORK+4             STORE DATE ARG FOR EDIT RTNE
         LA    R1,DWORK                CONSTRUCT ONE-WORD PARM LIST
         ST    R1,HPRSAVE+4              FOR XDATEDIT CALL
         LA    R1,HPRSAVE+4            LOAD PARM LIST ADDRESS
         L     R15,=V(XDATEDIT)        LOAD ADDRESS OF DATE EDIT RTNE
         BALR  R14,R15                   TO EDIT DATE AS 'MM/DD/YY'
         MVC   HLDATE(8),DWORK         INSERT RESULT IN HL TEXT
         SPACE
* EDIT TIME IN HOURS AND MINUTES, IF SUPPLIED.
         SPACE
TIMEEDIT LTR   RWA,RWA                 TEST IF TIME GIVEN
         BZ    TSTPGNO                 BR IF ZERO
         SRL   RWA,4                   ADD LEADING ZERO TO TIME
         ST    RWA,HPRSAVE             STORE TIME IN WORK LOC
         MVC   HLTIME(7),=X'402120207A2020'  EDIT CONTROL CHAR
         ED    HLTIME(7),HPRSAVE       EDIT INTO ALPHA
         SPACE
* MODIFY PAGE NUMBER.  VALUE GIVEN IS DECREMENTED BY ONE, SINCE IT IS
* INCREMENTED BEFORE USE.
         SPACE
TSTPGNO  LH    RWA,OMPAGENO            GET VALUE FROM PARM LIST
         LTR   RWA,RWA                 TEST IF ZERO
         BZ    TSTPGWID                BR IF ZERO
         BCTR  RWA,0                   DECREMENT BY 1
         STH   RWA,PAGENO              STORE
         SPACE
* MODIFY PAGE WIDTH, TESTING FOR MAXIMUM ALLOWED.
         SPACE
TSTPGWID SR    RWA,RWA
         IC    RWA,OMPAGWID            GET WIDTH FROM PARM LIST
         LTR   RWA,RWA                 TEST IF ZERO
         BZ    TSTPGLNG                BRANCH IF SO
         CLI   OMPAGWID,MAXWIDTH       TEST MAXIMUM SIZE
         BNH   PGWIDOK
         LA    R1,3                    ERROR, TOO LARGE
         B     ABEND
PGWIDOK  STH   RWA,PAGWIDTH
         SPACE
* MODIFY PAGE LENGTH, TESTING FOR MAXIMUM VALUE.
         SPACE
TSTPGLNG SR    RWA,RWA
         IC    RWA,OMPAGLNG            GET FROM PARM LIST
         LTR   RWA,RWA                 TEST IF SUPPLIED
         BZ    TSTMAXLN                BR IF NOT
         CLI   OMPAGLNG,MAXLNGTH       TEST FOR LEGAL VALUE
         BNH   PGLNGOK
         LA    R1,4                    ERROR, ABORT
         B     ABEND
PGLNGOK  STH   RWA,PAGELNG             STORE
         SPACE
* MODIFY PRINT LINE LIMIT COUNTER.
         SPACE
TSTMAXLN L     RWA,OMMAXLIN            GET FROM PARM LIST
         LTR   RWA,RWA                 TEST IF SUPPLIED
         BZ    EXIT0                   EXIT IF NOT
         ST    RWA,MAXLINES            STORE
         B     EXIT0                   EXIT TO CALLER
         SPACE
         DROP  RPARM
         EJECT
********************
* SETHEAD FUNCTION *
********************
         SPACE
* THIS CALL PRESENTS A LIST OF LINES WHICH WILL BE USED AS PAGE HEADING
* AND SUB-HEADING LINES.  THE PARAMETER LIST IS A VARIABLE-LENGTH LIST
* OF PLD ADDRESSES, EXACTLY AS FOR 'PRINT' CALLS.  THE FIRST LINE WILL
* HAVE ADDED TO ITS RIGHT END THE DATE, TIME, AND PAGE NUMBER.
* HOWEVER, IF ITS LENGTH EXCEEDS 98 BYTES, IT WILL OVERLAY THOSE
* FIELDS.  THE SECOND AND SUBSEQUENT LINES WILL BE PRINTED NORMALLY.
* NOTE THAT THESE LINES ARE NOT PRINTED WHEN THE PAGE IS EJECTED, BUT
* WHEN THE LINE WHICH WILL BE FIRST ON THE NEW PAGE IS DELIVERED, THUS
* ALLOWING THE HEADINGS TO BE ALTERED AFTER DELIVERY OF THE LAST LINE
* ON THE PRECEDING PAGE.  THE ADDRESS OF THE PARAMETER LIST IS SAVED
* BY THE PRINTING ROUTINE, BUT THE PARAMETER LIST, THE PLD'S TO WHICH
* IT POINTS, AND THE LINE TEXTS TO WHICH THEY POINT, MUST BE PRESERVED
* BY THE PROBLEM PROGRAM FOR AS LONG AS THEY ARE IN USE, SINCE THEY
* ARE REFERRED TO AT THE BEGINNING OF EACH NEW PAGE.  EACH CALL TO
* TO 'SETHEAD' SUPERSEDES THE EFFECT OF THE PREVIOUS CALL.  A CALL WITH
* A PARAMETER LIST ADDRESS OF ZERO INDICATES THAT NO HEADINGS ARE
* PROVIDED BY THE PROBLEM PROGRAM, AND ONLY THE PAGE NUMBER, DATE, AND
* TIME WILL BE PRINTED, WITH A STANDARD SPACING OF THREE.
         SPACE 2
SHPROC   LTR   RPARM,RPARM             TEST FOR NULL LIST ADDR
         BNZ   SHOK                    BRANCH IF NON-ZERO
         LA    RPARM,NOHDLIST          ADDRESS OF PLD FOR BLANK LINE
SHOK     ST    RPARM,HEADLIST          STORE ADDR OF HEADING PARMS
         B     EXIT0                   EXIT
         EJECT
******************
* CLOSE FUNCTION *
******************
         SPACE
* THIS CALL CLOSES THE PRINTER DATA SET.  IT DOES NOT MOVE THE PAGE
* OR ALTER ANY SWITCHES OR VARIABLES EXCEPT THE DCB ITSELF.
* AFTER CLOSING THE DCB, IT RELEASES THE PRINT BUFFERS.
         SPACE 2
CLPROC   TM    DCBOFLGS,OPENBIT        IS DCB OPEN NOW?
         BZ    EXIT0                   EXIT IF ALREADY CLOSED
         MVI   DWORK,X'80'             SET END-OF-LIST BIT
         CLOSE (PRINTDCB,LEAVE),MF=(E,DWORK)
         SPACE
         FREEPOOL  PRINTDCB            FREE THE BUFFER CORE
         SPACE
         B     EXIT0                   EXIT TO CALLER
         EJECT
************
* LISTPROC *
************
         SPACE
* THIS ROUTINE PROCESSES A LIST OF PLD ADDRESSES, FORMATTING EACH PRINT
* LINE AND PERFORMING THE NECESSARY PRE- AND POST-SPACING OPERATIONS.
* IT IS ENTERED WITH 'RPARM' POINTING TO THE LIST OF ADDRESSES AND
* 'RLPEXIT' CONTAINING THE EXIT ADDRESS.  IT MAY DISCOVER THAT ITS
* SPACING OPERATIONS HAVE BROUGHT THE PAGE TO HEAD OF FORM, REQUIRING
* THAT THE HEADING AND SUB-HEADING LINES BE PRINTED.  WHEN THIS OCCURS,
* IT BRANCHES TO 'HEADPRNT', WHICH SAVES 'RPARM' AND 'RLPEXIT' AND
* REENTERS THIS ROUTINE WITH AN ADDRESS LIST FOR THE HEADING LINES.
* (WHEN THIS SECOND-LEVEL CALL IS MADE, SWITCH 'NOSKPBIT' IS ON,
* PREVENTING ANY FURTHER PAGE SKIPS AND ELIMINATING THE POSSIBILITY OF
* YET ANOTHER CALL TO 'HEADPRNT'.)  AFTER THE HEADINGS ARE PRINTED,
* THE ORIGINAL VALUES ARE RETURNED TO 'RPARM' AND 'RLPEXIT' AND
* PROCESSING OF THE LIST OF TEXT LINES PROVIDED BY THE CALLER IS
* CONTINUED.
         SPACE 2
         USING PLDBLOCK,RPLD           TO ADDRESS PLD BLOCKS
         SPACE
LISTPROC L     RPLD,0(RPARM)           LOAD A PLD BLOCK ADDRESS
         SPACE
* IF PAGE IS NOW AT HEAD OF FORM, EXECUTE 'HEADPRNT'.
         SPACE
         LA    RRET,LISTPROC           EXIT FROM HEADPRNT STARTS AGAIN
         TM    SWITCHES,HOFBIT         SEE IF HEAD-OF-FORM FLAG IS ON
         BO    HEADPRNT                EXIT IF SO
         SPACE 2
* TEST WHETHER WE ARE AT THE FIRST TEXT LINE ON A PAGE, AND, IF SO,
* WHETHER PRE-SPACING IS ALLOWED IN THAT POSITION.  IF NOT, BYPASS
* PRE-SPACING ALTOGETHER.
         SPACE
         TM    SWITCHES,TXT1BIT        TEST IF FIRST TEXT LINE
         BZ    PRSUBTR                 BRANCH IF NOT
         TM    PLDFLAGS,PRHOFBIT       TEST IF ALLOW SKIP AT HOF
         BZ    POSTSP                  SKIP PRESPACING IF NOT
         SPACE
* DECREMENT THE PAGE BALANCE BY THE AMOUNT TO BE SPACED.
         SPACE
PRSUBTR  SR    RSPACE,RSPACE
         IC    RSPACE,PLDSPB           LOAD AMOUNT TO SPACE
         SR    RBAL,RSPACE             DECREMENT PAGE BALANCE
         SPACE
* IF SKIPPING IS ALLOWED BY BOTH THE SYSTEM AND THE USER, TEST THE
* BALANCE AND FORCE A PAGE SKIP IF <= ZERO.
         SPACE
         TM    SWITCHES,NOSKBIT        TEST IF SYSTEM ALLOWS SKIP
         BO    PREMOVE                 BRANCH IF NOT
         TM    PLDFLAGS,PRSKPBIT       TEST IF USER ALLOWS SKIP
         BO    PREMOVE                 BRANCH IF NOT
         LTR   RBAL,RBAL               TEST PAGE BALANCE
         BP    PREMOVE                 BRANCH IF SOME LINES LEFT
         LA    RSPACE,EJFORCE          FORCE A PAGE SKIP
         SPACE
* MOVE THE PAGE THE NUMBER OF LINES IN 'RSPACE'.
         SPACE
PREMOVE  BAL   RWA,MOVE                TO PAPER MOVING SUBROUTINE
         SPACE
* IF THAT MOVING PUT US AT HEAD-OF-FORM, PRINT THE HEADINGS.
         SPACE
         LA    RRET,LISTPROC           EXIT FROM HEADPRNT STARTS AGAIN
         TM    SWITCHES,HOFBIT         TEST HEAD-OF-FORM BIT
         BO    HEADPRNT                EXIT IF AT HEAD
         SPACE 2
* NOW CONSIDER THE SPACING TO BE PERFORMED WHEN THE TEXT OF THE LINE
* IS PRINTED.  BEGIN BY COMPUTING THE NEW PAGE BALANCE.
         SPACE
POSTSP   SR    RSPACE,RSPACE
         IC    RSPACE,PLDSPA           LOAD AMOUNT TO SPACE AFTER PRINT
         SR    RBAL,RSPACE             COMPUTE NEW PAGE BALANCE
         SPACE
* IF THE SYSTEM AND USER BOTH ALLOW SKIPPING, TEST THE PAGE BALANCE,
* AND FORCE A SKIP IF <= ZERO.
         SPACE
         TM    SWITCHES,NOSKBIT        TEST IF SYSTEM ALLOWS SKIPPING
         BO    GETPRCC                 BRANCH IF NOT
         TM    PLDFLAGS,SPSKPBIT       TEST IF USER ALLOWS SKIPPING
         BO    GETPRCC                 BRANCH IF NOT
         LTR   RBAL,RBAL               TEST FOR PAGE END
         BP    GETPRCC                 BRANCH IF SOME LINES LEFT
         LA    RSPACE,EJFORCE          FORCE PAGE SKIP
         SPACE
* NOW CONSTRUCT THE PRINT LINE IN AN OUTPUT BUFFER.  IN THE INTERESTS
* OF SAVING BUFFER SPACE, THE CALLER'S TEXT IS SCANNED FROM THE RIGHT
* TO REDUCE ITS NOMINAL LENGTH BY THE NUMBER OF RIGHT BLANKS.  IN THE
* EXTREME CASE THAT IT IS ENTIRELY BLANK, BYPASS PRINTING ALTOGETHER
* AND MERELY SPACE.  IF THIS IS TO BE THE FIRST HEADING LINE OF THE
* PAGE ('HD1BIT' SET), SCANNING IS OMITTED, THE RECORD LENGTH IS SET TO
* THE PAGE WIDTH, AND THE DATE, TIME, AND PAGE NUMBER ARE INSERTED.
         SPACE
GETPRCC  DS    0H
         SR    RWA,RWA
         IC    RWA,PLDLNGTH            LOAD NOMINAL LENGTH OF TEXT
         SR    RWB,RWB
         IC    RWB,PLDOFFST            LOAD LEFT MARGIN OFFSET
         SPACE
         LA    R0,0(RWA,RWB)           LINE LENGTH = TEXT + OFFSET
         CH    R0,PAGWIDTH             TEST AGAINST PAGE WIDTH
         BNH   TSTHD1                  BR IF OK
         LA    R1,5                    ERROR, LINE TOO LONG
         B     ABEND
         SPACE
TSTHD1   TM    SWITCHES,HD1BIT         TEST IF FIRST HEADING LINE
         BZ    BLNKSCAN                BR IF NOT
         LH    RWB,PAGWIDTH            SET RECORD LENGTH AS PAGE WIDTH
         B     GETBUF                  SKIP BLANK SCANNING
         SPACE
* SET UP A 'BXH' FOR SCAN.  R0 IS INCREMENT, R1 IS COMPARAND, RWA
* VARIABLE.
         SPACE
BLNKSCAN LH    R0,=H'-1'               INCREMENT IS MINUS 1
         L     R1,PLDTXTAD-1           LOAD TEXT ADDRESS
         LA    R1,0(R1)                ZERO HIGH-ORDER BYTE
         BCTR  R1,0                    DECREMENT BY ONE
         AR    RWA,R1                  SET RWA TO RIGHT-MOST TEXT BYTE
         SPACE
* SCAN THE LINE, SEARCHING FOR FIRST NON-BLANK.  RESULT IS NEW TEXT
* LENGTH IN RWA, WHICH WILL BE ZERO FOR BLANK LINES.
         SPACE
BLNKLOOP CLI   0(RWA),C' '             TEST FOR NON-BLANK CHAR
         BNE   BLNKDONE                EXIT WHEN FOUND
         BXH   RWA,R0,BLNKLOOP
BLNKDONE SR    RWA,R1                  NOW RWA IS NEW TEXT LENGTH
         BC    13,POSTMOVE             NO PRINTING IF <= 0
         SPACE
* NOW ADD OFFSET TO LENGTH OF SURVIVING TEXT TO GET ACTUAL LINE LENGTH.
         SPACE
         AR    RWB,RWA                 ADD TEXT LENGTH
         SPACE
* NOW RWA IS THE LENGTH OF THE CALLER'S TEXT, AND RWB IS THE LENGTH OF
* THE LINE.  THE RECORD LENGTH WILL BE FIVE MORE THAT THE LENGTH OF THE
* LINE, TO INCLUDE FORMAT 'V'  AND PRINTER CONTROL CHARACTERS.  GET
* A BUFFER OF THE PROPER LENGTH, KEEPING ITS ADDRESS IN R1.
         SPACE
GETBUF   LA    RWC,5(RWB)              LOAD LENGTH OF RECORD IN RWC
         STH   RWC,DCBLRECL            PUT LRECL IN DCB FOR PUT CALL
         SPACE
         PUT   PRINTDCB                GET BUFFER ADDRESS IN R1
         SPACE
         ST    R1,CCLAST               SAVE LOCATION OF THIS LINE
         LR    RWD,R1                  RWD BECOMES BUFFER BASE REG
         MVI   3(RWD),C' '             CLEAR BUFFER TO BLANKS
         EX    RWB,BLNKMOVE
         SLL   RWC,16                  SET UP 4-BYTE 'V' CONTROL FIELD
         ST    RWC,DWORK               CAN'T ASSUME BUFFER ON ANY
         MVC   0(4,RWD),DWORK            BOUNDARY
         SPACE
* IF THIS IS THE FIRST HEADING LINE, INSERT DATE AND TIME, AND EDIT
* THE PAGE NUMBER.
         SPACE
         TM    SWITCHES,HD1BIT         TEST IF FIRST LINE
         BZ    MOVETEXT                BRANCH IF NOT
         SPACE
         LA    RWC,0(RWB,RWD)          ADDRESS RIGHT END -5
         SH    RWC,=AL2(HLTXTLNG+10-5) LOCATE PLACE FOR HEADING INFO
         MVC   0(HLTXTLNG,RWC),HLTEXT  INSERT DATE & TIME
         SPACE
         LH    R1,PAGENO               INCREMENT PAGE NUMBER
         LA    R1,1(R1)
         STH   R1,PAGENO
         CVD   R1,DWORK                CONVERT TO DECIMAL
         MVC   HLTXTLNG(10,RWC),=XL10'40404040402020202120'  EDIT CHARS
         LA    R1,HLTXTLNG+9(RWC)      IN CASE SIGNIFIGANCE FORCED
         EDMK  HLTXTLNG+4(6,RWC),DWORK+5  EDIT AND MARK SPOT FOR "PAGE"
         SH    R1,=H'5'
         MVC   0(4,R1),=C'PAGE'        INSERT WORD "PAGE"
         SPACE
* PUT PRINTER CONTROL CHARACTER AND CALLER'S TEXT INTO THE BUFFER.
* REGISTER RWA CONTAINS THE LENGTH OF THE TEXT.
         SPACE
MOVETEXT BAL   RWB,CCGEN               GO GET CONTROL CHAR
         STC   R0,4(RWD)               INSERT IN BUFFER
         NI    4(RWD),B'11111101'      CHANGE SPACE IMMEDIATE TO WRITE
         SPACE
         SR    RWB,RWB
         IC    RWB,PLDOFFST            LOAD LEFT MARGIN OFFSET
         LA    RWB,5(RWB,RWD)          ADDRESS FOR FIRST TEXT BYTE
         BCTR  RWA,0                   DECREMENT LENGTH BY 1 FOR MVC
         L     RWC,PLDTXTAD-1          LOAD ADDRESS OF CALLER'S TEXT
         EX    RWA,MOVEINST            MOVE TEXT
         SPACE
         NI    SWITCHES,255-HD1BIT-TXT1BIT  RESET ONE-SHOT BITS
         SPACE
* DECREMENT PRINT LINE LIMIT COUNTER, ABORTING IF IT GOES NEGATIVE.
         SPACE
         L     R1,MAXLINES
         S     R1,=F'1'                BCTR WOULD NOT SET COND CODE
         ST    R1,MAXLINES
         BP    POSTMOVE                BRANCH IF POSITIVE
         LA    R1,6                    ABORT, TOO MUCH OUTPUT
         B     ABEND
         SPACE
* DO ANY ADDITIONAL SPACING NECESSARY.  AMOUNT STILL IN 'RSPACE'.
         SPACE
POSTMOVE BAL   RWA,MOVE                CALL PAPER MOVING SUBROUTINE
         SPACE 2
* NOW WE ARE FINISHED WITH THAT LINE.  IF THE ADDRESS WHICH POINTED TO
* ITS PLD WAS NEGATIVE, THE LIST IS EXHAUSTED AND THE ROUTINE EXITS.
* OTHERWISE, INCREMENT THE LIST POINTER BY 4 AND START THE NEXT ONE.
         SPACE
         LTR   RPLD,RPLD               TEST CURRENT PLD ADDRESS
         BCR   4,RLPEXIT               EXIT IF NEGATIVE
         SPACE
         LA    RPARM,4(RPARM)          INCREMENT LIST POINTER
         B     LISTPROC                TO PROCESS NEXT LINE
         SPACE 2
* EXECUTED INSTRUCTIONS:
         SPACE
BLNKMOVE MVC   4(0,RWD),3(RWD)         SPREAD BLANKS IN OUTPUT BUFFER
MOVEINST MVC   0(0,RWB),0(RWC)         MOVE CALLER'S TEXT TO OUTPUT BUF
         SPACE
         DROP  RPLD
         EJECT
************
* HEADPRNT *
************
         SPACE
* ENTER THIS ROUTINE WHEN IT IS DISCOVERED THAT WE ARE AT
* HEAD-OF-FORM AND ARE ABOUT TO PRINT A LINE.  SAVE THE REGISTERS
* DEFINING THE STATE OF 'LISTPROC' AND CALL IT WITH A LIST SPECIFYING
* THE HEADING AND SUB-HEADING LINES.
         SPACE 2
HEADPRNT ST    RRET,HPREXIT            SAVE RETURN ADDRESS
         STM   RLPEXIT,RPARM,HPRSAVE   STORE LISTPROC REGISTERS
         SPACE
* RESET HEAD-OF-FORM BIT AND SET NO-SKIP BIT TO SUPPRESS FORM SKIPS
* AND HEADING LINE BIT TO INCLUDE THE PAGE NUMBER.  RESET PAGE BALANCE.
         SPACE
         NI    SWITCHES,255-HOFBIT     RESET HOF BIT
         OI    SWITCHES,HD1BIT+NOSKBIT SET HEADING AND NOSKIP BITS
         LH    RBAL,PAGELNG            RESET PAGE BALANCE
         SPACE
* LOAD ADDRESS OF HEADINGS LIST AND CALL LIST PROCESSOR.
         SPACE
         L     RPARM,HEADLIST          ADDRESS OF HEADINGS LIST
         BAL   RLPEXIT,LISTPROC        CALL PROCESSING ROUTINE
         SPACE
* AFTER PRINTING THE HEADINGS, TURN SYSTEM SKIP-SUPPRESSION BIT OFF
* AND SET 'TXT1BIT' TO INDICATE THAT THERE ARE NO TEXT LINES ON THE
* PAGE YET.  THEN RESTORE THE 'LISTPROC' REGISTERS AND RETURN TO
* PROCESSING THE CALLER'S LINES.
         SPACE
         NI    SWITCHES,255-NOSKBIT    RESET NO-SKIP BIT
         OI    SWITCHES,TXT1BIT        SET FIRST-TEXT-LINE BIT
         SPACE
         LM    RLPEXIT,RPARM,HPRSAVE   RESTORE LISTPROC REGISTERS
         L     RRET,HPREXIT            RECOVER EXIT ADDRESS AND
         BR    RRET                      RETURN TO CALLER
         EJECT
***********************************
* MOVE - VERTICAL SPACING ROUTINE *
***********************************
         SPACE
* SUBROUTINE TO MOVE THE PAPER BY THE NUMBER OF LINES IN REGISTER
* 'RSPACE'.  RETURN ADDRESS IS IN 'RWA'.  IF THE CONTROL CHARACTER FOR
* THE LAST LINE SPACED 0 LINES, REPLACE IT WITH A NEW ONE BEFORE
* GENERATING ANY EXTRA LINES.
         SPACE 2
MOVE     LTR   RSPACE,RSPACE           TEST NUMBER OF LINES TO BE MOVED
         BCR   13,RWA                  EXIT IF <= ZERO
         TM    SWITCHES,SP0BIT         DID PREVIOUS LINE SPACE 0?
         BZ    PREVNOT0                BRANCH IF NOT
         L     R1,CCLAST               GET ADDRESS OF PREVIOUS LINE
         BAL   RWB,CCGEN               GENERATE NEW CONTROL CHAR
         NI    4(R1),X'02'             TEST WRITE/SPACE BIT IN OLD CC
         STC   R0,4(R1)                STORE NEW CC IN PREVIOUS LINE
         BNZ   *+8                     BR IF WRITE/SPACE BIT WAS ON
         NI    4(R1),255-X'02'         TURN WRITE/SPACE BIT OFF
PREVNOT0 DS    0H
         MVC   DCBLRECL(2),MOVELINE    SET LOGICAL RECORD LENGTH IN DCB
         SPACE
         PUT   PRINTDCB                GET BUFFER ADDRESS IN R1
         SPACE
         ST    R1,CCLAST               SAVE LOCATION OF THIS LINE
         MVC   0(6,R1),MOVELINE        INSERT FORMAT 'V' CONTROL RECORD
         BAL   RWB,CCGEN               GET PRINT CONTROL CHAR IN R0
         STC   R0,4(R1)                INSERT IN RECORD
         SPACE
         B     MOVE                    LOOP UNTIL 'RSPACE' IS ZERO
         SPACE 3
MOVELINE DC    XL6'000600000340'       FORMAT 'V' CONTROL RECORD
         EJECT
*****************************************
* CCGEN - GENERATE PRINTER CONTROL CHAR *
*****************************************
         SPACE
* THIS ROUTINE GENERATES A PRINTER CONTROL CHARACTER TO SPACE OR EJECT
* IMMEDIATELY (WITHOUT PRINTING).  ENTER WITH THE TOTAL NUMBER OF
* LINES TO BE MOVED IN 'RSPACE' AND RETURN ADDRESS IN 'RWB'.  EXITS
* WITH THE CONTROL CHARACTER IN BITS 24-31 OF REGISTER 0 AND THE COUNT
* IN 'RSPACE' DECREMENTED BY THE AMOUNT WHICH THE CHARACTER WILL SPACE.
* A SPACE VALUE OF 255 OR GREATER WILL GENERATE AN EJECT CONTROL
* CHARACTER, SET 'RSPACE' AND 'RBAL' TO ZERO, AND SET THE HEAD-OF-FORM
* BIT.  NOTE:  MUST NOT USE R1.
         SPACE 2
CCGEN    NI    SWITCHES,255-SP0BIT     RESET 'PREVIOUS SPACED 0' BIT
         CH    RSPACE,=AL2(EJFORCE)    TEST FOR EJECT REQUEST
         BL    CCNOEJ                  BRANCH IF NOT
         LA    R0,X'8B'                LOAD 'SKIP TO CHAN 1' CC
         OI    SWITCHES,HOFBIT         SET HEAD-OF-PAGE BIT
         SR    RBAL,RBAL               SET PAGE BALANCE TO ZERO
         SR    RSPACE,RSPACE           SET REMAINING SPACING TO ZERO
         BR    RWB                     EXIT
         SPACE
CCNOEJ   LR    R15,RSPACE              LOAD WORK REGISTER
         CH    RSPACE,=H'3'            TEST IF OVER THREE LINES
         BNH   CCOK                    BR IF <= 3
         LA    R15,3                   SET 3, MAXIMUM FOR 1 OPERATION
CCOK     SR    RSPACE,R15              DECR RSPACE BY AMOUNT SPACED
         SLL   R15,3                   PUT AMOUNT IN BITS 2-4 OF BYTE
         LA    R0,X'03'(R15)           ADD COMMAND BITS AND PUT IN R0
         LTR   R15,R15                 TEST FOR ZERO SPACING
         BCR   7,RWB                   EXIT IF NOT ZERO
         OI    SWITCHES,SP0BIT         SET 'LINE SPACED 0' BIT
         BR    RWB                     EXIT
         EJECT
***********************
* SYNAD ERROR ROUTINE *
***********************
         SPACE
* IF A PERMANENT I/O ERROR OCCURS, TYPE A DIAGNOSTIC MESSAGE AND ABORT.
         SPACE
SYNAD    SYNADAF  ACSMETH=QSAM         GET ERROR MESSAGE FROM O/S
         LR    RWA,R1                  SAVE MESSAGE ADDRESS
         GETMAIN  R,LV=128             GET BUFFER FOR MESSAGE
         MVC   0(LIOMSG,R1),IOMSG      INSERT MESSAGE BEGINNING
         MVC   LIOMSG(79,R1),49(RWA)   ADD TEXT FROM O/S
         LR    RWA,R1                  SAVE MESSAGE ADDRESS
         SYNADRLS                      FREE O/S MESSAGE
         WTO   MF=(E,(RWA))            TYPE MESSAGE ON CONSOLE
         LA    R1,7                    LOAD ERROR CODE
         B     ABEND                   TO ABORT AND DUMP
         SPACE
IOMSG    DC    AL2(LIOMSG+78,0)        FORMAT V CONTROL FIELD
         DC    C'XPRNTSUB I/O ERROR'
LIOMSG   EQU   *-IOMSG
         EJECT
**************************
* CONSTANTS AND LITERALS *
**************************
         SPACE
* DUMMY PARAMETER LIST AND PLD FOR USE WHEN NO HEADING IS PROVIDED.
         SPACE
NOHDLIST DS    0F
         DC    XL1'80'                 VL LIST BIT
         DC    AL3(NOHDPLD)            ADDRESS OF PLD BELOW
         SPACE
NOHDPLD  DS    0F                      ALIGN ON FULL-WORD BOUNDARY
         DC    BL1'00010000'           OPTION BITS
         DC    AL3(BLANK1)             PRINT TEXT ADDRESS
         DC    AL1(1)                  PRINT TEXT LENGTH
         DC    AL1(0)                  LEFT MARGIN INDENTATION
         DC    AL1(0)                  SPACING BEFORE PRINTING
         DC    AL1(3)                  SPACING AFTER PRINTING
         SPACE
* CONSTANTS TO INITIALIZE PARAMETERS AND SWITCHES WHEN 'OPEN' CALL IS
* RECEIVED.  THE ORDER MUST MATCH THE 'PAPARMS' LIST IN THE WORK AREA.
         SPACE
DEFAULTS DS    0F
         DC    A(NOHDLIST)     PAGE HEADING PARM LIST ADDRESS
         DC    F'1000000'      MAXIMUM NUMBER OF OUTPUT LINES
         DC    H'132'          PAGE WIDTH
         DC    H'57'           PAGE LENGTH            ***TRW***
         DC    H'0'            PAGE NUMBER (-1)
         DC    H'0'            PAGE BALANCE
         DC    X'00'           SWITCHES
DEFSIZE  EQU   *-DEFAULTS
         SPACE
* MISCELLANEOUS CONSTANTS:
         SPACE
BLANK1   DC    C' '                    TEXT OF DUMMY HEADING LINE
         LTORG
         EJECT
*******************
* WORK AREA DSECT *
*******************
         SPACE
* THIS DUMMY SECTION DEFINES THE WORK AREA PROVIDED BY THE PROBLEM
* PROGRAM FOR EACH DATA SET.  ITS ADDRESS IS PASSED IN PARAMETER
* REGISTER 0 AT EACH CALL.
         SPACE 2
WORKAREA DSECT
         SPACE 2
* STANDARD 18-WORD SAVE AREA:
         SPACE
SAVEAREA DS    18F
         SPACE 2
* DATA CONTROL BLOCK FOR PRINTER DATA SET:
         SPACE
         PRINT NOGEN
PRINTDCB DCB   DDNAME=SYSPRINT,                                        X
               DSORG=PS,                                               X
               RECFM=VBM,                                              X
               LRECL=137,                                              X
               MACRF=PL,                                               X
               BFTEK=S,                                                X
               BUFNO=2,                                                X
               EROPT=ACC
         PRINT GEN
         SPACE
DCBEXLST EQU   PRINTDCB+37     ADDRESS OF EXIT LIST
DCBOFLGS EQU   PRINTDCB+48     CONTAINS 'OPENED SUCCESSFULLY' BIT
DCBDDNAM EQU   PRINTDCB+40     DDNAME (WHEN CLOSED)
DCBSYNAD EQU   PRINTDCB+57     ADDRESS OF SYNCHRONOUS ERROR ROUTINE
DCBBLKSZ EQU   PRINTDCB+62     BLOCK SIZE
DCBLRECL EQU   PRINTDCB+82     LOGICAL RECORD LENGTH
         SPACE 2
* ADDRESS OF LAST BUFFER OBTAINED BY "PUT" MACRO:
         SPACE
CCLAST   DS    1A
         SPACE
         DS    1F              SPARE FULL WORD
         SPACE 2
* TEMPORARY WORK CELLS:
         SPACE
DWORK    DS    1D              DOUBLE-WORD WORK CELL
HPREXIT  DS    1F              HEADPRNT EXIT SAVE
HPRSAVE  DS    2F              HEADPRNT REGISTER STORAGE
         SPACE 2
* PARAMETERS AND SWITCHES WHICH DEFINE THE PAGE SIZE AND STATUS.
* SEQUENCE MUST MATCH THAT IN 'DEFAULTS', WHICH INITIALIZES THEM.
         SPACE
PAPARMS  DS    0F
HEADLIST DS    1A              PAGE HEADING PARM LIST ADDRESS
MAXLINES DS    1F              MAXIMUM NUMBER OF OUTPUT LINES
PAGWIDTH DS    1H              PAGE WIDTH
PAGELNG  DS    1H              PAGE LENGTH
PAGENO   DS    1H              PAGE NUMBER OF CURRENT PAGE
PAGEBAL  DS    1H              PAGE BALANCE
SWITCHES DS    1X              SWITCHES
         SPACE 2
* STORAGE FOR DATE AND TIME PORTION OF PAGE HEADING:
         SPACE
HLTXTLNG EQU   24
HLTEXT   DS    CL(HLTXTLNG)
HLDAY    EQU   HLTEXT
HLTIME   EQU   HLTEXT+7
HLDATE   EQU   HLTEXT+16
         EJECT
*************************
* PARAMETER LIST DSECTS *
*************************
         SPACE 2
* PARAMETER LIST FOR 'EJECT' CALL:
         SPACE
EJPARM   DSECT
         SPACE
EJCOND   DS    1X              CONDITIONAL MASK AND SWITCHES
EJQUAN   DS    1X              CONDITIONAL TEST QUANTITY
         SPACE
EJATHOF  EQU   X'01'           MASK FOR 'EJCOND'
         SPACE 6
* PARAMETER LIST FOR 'SPACE' CALL:
         SPACE
SPPARM   DSECT
         SPACE
SPCOND   DS    1X              CONDITIONAL BITS
SPQUAN   DS    1X              NUMBER OF LINES TO SPACE
         SPACE
SPATHOF  EQU   X'01'           MASK FOR 'SPCOND'
SPNOEJ   EQU   X'02'           MASK FOR 'SPCOND'
         SPACE 6
* PARAMETER LIST FOR 'OPEN' AND 'MODIFY' CALLS:
         SPACE
OMPARM   DSECT
         SPACE
OMMAXLIN DS    1F              MAXIMUM NUMBER OF OUTPUT LINES
OMPAGENO DS    1H              INITIAL PAGE NUMBER
OMPAGWID DS    1X              PAGE WIDTH
OMPAGLNG DS    1X              PAGE LENGTH
OMTIMEAD DS    1A              ADDRESS OF TIME
OMDATEAD DS    1A              ADDRESS OF DATE
OMDDNAME DS    CL8             DDNAME (OPEN CALL ONLY)
         EJECT
*************
* PLD DSECT *
*************
         SPACE
* PRINT LINE DESCRIPTOR DUMMY SECTION:
         SPACE 2
*        ******************************************************
*        *            *                                       *
*        *   OPTION   *                                       *
*        *    BITS    *             TEXT ADDRESS              *
*        *            *                                       *
*        ******************************************************
*        *            *            *            *             *
*        *    TEXT    *    TEXT    *   SPACE    *    SPACE    *
*        *   LENGTH   *   OFFSET   *   BEFORE   *    AFTER    *
*        *            *            *            *             *
*        ******************************************************
         SPACE 3
PLDBLOCK DSECT
         SPACE
PLDFLAGS DS    1X              OPTION BITS
PLDTXTAD DS    AL3             TEXT ADDRESS
PLDLNGTH DS    1X              TEXT LENGTH
PLDOFFST DS    1X              TEXT OFFSET, OR LEFT MARGIN
PLDSPB   DS    1X              AMOUNT TO SPACE BEFORE PRINTING
PLDSPA   DS    1X              AMOUNT TO SPACE AFTER PRINTING
         SPACE 2
PRHOFBIT EQU   B'00000010'     MASK FOR 'PLDFLAGS'
PRSKPBIT EQU   B'00000001'     MASK FOR 'PLDFLAGS'
SPSKPBIT EQU   B'00010000'     MASK FOR 'PLDFLAGS'
         SPACE 6
         END
VTRD     TITLE 'XVTCREAD - VTOC READING SUBROUTINE'
         SPACE
* FUNCTION: THIS SUBROUTINE READS THE VOLUME TABLE OF CONTENTS (VTOC)
*        FROM A DIRECT-ACCESS DEVICE AND PRESENTS IT TO THE CALLER
*        ONE RECORD (DSCB) AT A TIME.
         SPACE
* OPERATION: THIS ROUTINE IS A SPECIALIZED SEQUENTIAL ACCESS METHOD
*        FOR VTOC'S.  ITS ADVANTAGE OVER ORDINARY BSAM IS THAT IT READS
*        AN ENTIRE TRACK IN ONE REVOLUTION, THUS SAVING CONSIDERABLE
*        TIME.  THE ROUTINE HAS THREE CALL MODES:
*
*        0 - READ.  RETURNS WITH THE CORE ADDRESS OF A DSCB IN REGISTER
*              1.  THE CORE CONSISTS OF 148 CONSECUTIVE BYTES, CONTAIN-
*              ING THE COUNT (8 BYTES), KEY (44 BYTES), AND DATA (96
*              BYTES) FOR ONE DSCB.  RETURN CODES ARE:
*                      0 - NORMAL;
*                      4 - END OF FILE, NO DATA PRESENTED;
*                      8 - PERMANENT I/O ERROR.  THE KEY AND DATA AREAS
*                          WILL BE SET TO ZEROS; THE COUNT AREA WILL
*                          CONTAIN THE CORRECT CCHHR.  SINCE READING
*                          IS DONE A TRACK AT A TIME, ALL THE DSCB'S
*                          FOR THAT TRACK WILL BE MARKED IN ERROR.
*                          READING MAY CONTINUE ON TO THE NEXT TRACK.
*
*        1 - OPEN.  REGISTER 1 SHOULD POINT TO AN 8-BYTE FIELD
*              CONTAINING THE DDNAME TO BE USED IN THE DCB.  THE
*              CORRESPONDING DD CARD SHOULD SPECIFY A DISPOSITION OF
*              (OLD,KEEP).  RETURN CODES:
*                      0 - NORMAL;
*                      4 - UNABLE TO OPEN (PROBABLY MISSING DD CARD);
*                      8 - DD CARD DID NOT REFER TO A DIRECT-ACCESS
*                          DEVICE, OR DEVICE TYPE UNKNOWN.
*
*        2 - CLOSE.  NO ARGUMENTS ARE REQUIRED OR RETURNED.  RETURN
*              CODE IS 0.
         SPACE
* ENTRY POINTS:  ENTRY IS ALWAYS TO 'XVTCREAD' VIA A BALR 14,15 WITH
*        REGISTER 13 SET TO A SAVE AREA.  REGISTER 0 CONTAINS A
*        BINARY INTEGER TO INDICATE THE CALL MODE AND REGISTER 1
*        POINTS TO PARAMETERS AS REQUIRED FOR EACH MODE.
         SPACE
* DATA SETS:  READS VOLUME TABLE OF CONTENTS FROM ANY DIRECT-ACCESS
*        DEVICE.  USES EXCP TO EXECUTE A CHAINED CHANNEL PROGRAM TO
*        READ AN ENTIRE TRACK AT A TIME.
         SPACE
* EXTERNAL ROUTINES:  USES SUPERVISOR ROUTINE 'IECPCNVT' TO CONVERT
*        A RELATIVE TRACK NUMBER TO AN ABSOLUTE ADDRESS.
         SPACE
* EXITS - NORMAL:  RETURNS VIA REGISTER 14 WITH RETURN CODE IN REGISTER
*        15.  (SEE ABOVE FOR RETURN CODE VALUES.)
         SPACE
* EXITS - ERROR:  NONE.
         SPACE
* TABLES AND WORK AREAS:  DOES A GETMAIN TO OBTAIN A BUFFER LARGE
*        ENOUGH TO HOLD AN ENTIRE TRACK FROM THE DEVICE BEING READ.
*        THIS AREA MAY BE AS LARGE AS 9900 BYTES (FOR 2301 DRUM).
         SPACE
* ATTRIBUTES:  SERIALLY REUSABLE.
         EJECT
* SECTION DEFINITION AND REGISTER ASSIGNMENTS:
         SPACE
XVTCREAD CSECT
         SPACE 2
R0       EQU   0
R1       EQU   1
R2       EQU   2
RWA      EQU   2
RWB      EQU   3
RWC      EQU   4
RPARM    EQU   9
RRCODE   EQU   10              RETURN CODE REGISTER
RRET     EQU   11              LOCAL SUBROUTINE EXIT REGISTER
RBASE    EQU   12              LOCAL BASE REGISTER
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 3
* TAGS FOR CHANNEL COMMANDS AND FLAG BITS:
         SPACE
READR0   EQU   X'16'           READ RECORD 0
READCKD  EQU   X'1E'           READ COUNT, KEY, AND DATA
         SPACE
CC       EQU   X'40'           COMMAND CHAIN FLAG
SLI      EQU   X'20'           SUPPRESS LENGTH INDICATION FLAG
SKIP     EQU   X'10'           SKIP DATA TRANSFER FLAG
         SPACE 3
* COMMUNICATION VECTOR TABLE (CVT) DEFINITIONS:
         SPACE
CVT      EQU   16              LOCATION OF CVT BASE ADDRESS
CVTPCNVT EQU   28              OFFSET TO CONVERT ROUTINE ADDRESS
         EJECT
************
* PROLOGUE *
************
         SPACE
* ENTER HERE AND PERFORM STANDARD REGISTER SAVE AREA HOUSEKEEPING.
         SPACE
         SAVE  (14,12),,XVTCREAD-01008218
         SPACE
         LR    RBASE,R15               SET LOCAL BASE REGISTER
         USING XVTCREAD,RBASE
         LR    R14,R13                 SAVE CALLER'S R13
         LA    R13,SAVEAREA            ADDRESS LOCAL SAVE AREA
         ST    R13,8(R14)              CHAIN FORWARD
         ST    R14,SAVEAREA+4          CHAIN BACKWARD
         SR    RRCODE,RRCODE           ZERO RETURN CODE REGISTER
         SPACE
* SELECT MODE FROM CONTENTS OF REGISTER 0.
         SPACE
         LA    RWA,3                   MASK FOR LOW 2 BITS
         NR    RWA,R0                  GET CALL MODE
         SLL   RWA,2                   MODE TIMES 4
         B     *+4(RWA)                BRANCH ON MODE
         SPACE
         B     GET                     MODE 0, GET A DSCB
         B     OPEN                    MODE 1, OPEN A NEW VTOC
         B     CLOSE                   MODE 2, CLOSE
         B     RETURN0                 MODE 3 NOT DEFINED, NO OP
         SPACE 3
***********
* RETURNS *
***********
         SPACE
RETURN8  LA    RRCODE,4(RRCODE)        ENTRY FOR RETURN CODE 8
RETURN4  LA    RRCODE,4(RRCODE)        ENTRY FOR RETURN CODE 4
RETURN0  LR    R15,RRCODE              ENTRY FOR RETURN CODE 0
         SPACE
         L     R13,SAVEAREA+4          RECOVER CALLER'S SAVE AREA
         L     R14,12(R13)             LOAD RETURN ADDRESS
         LM    R2,R12,28(R13)          RESTORE OTHER GENERAL REGISTERS
         MVI   12(R13),X'FF'           SET RETURN FLAG ON
         BR    R14                     RETURN TO CALLER
         EJECT
*********************
* MODE 0 - GET DSCB *
*********************
         SPACE
* IF END-OF-FILE WAS REACHED, RETURN AT ONCE.
         SPACE
GET      DS    0H
         TM    MODESW,EOFSW            TEST END-OF-FILE BIT
         BO    RETURN4                 RETURN CODE 4 IF ON
         SPACE
* IF CHANNEL PROGRAM HAS BEEN STARTED, GO TO CHECK IT.  OTHERWISE,
* ASSUME THERE IS AT LEAST ONE FULL BUFFER.
         SPACE
         TM    MODESW,XCPRUN           TEST IF EXCP ISSUED
         BO    XCPTEST                 BRANCH IF SO
         SPACE
* SET BUFFER ADDRESS TO NEXT DSCB AND TEST IF LAST ON TRACK.  IF NOT,
* EXIT WITH ITS ADDRESS IN R1.
         SPACE
         L     RWA,DSCBADR             LOAD BUFFER POINTER
         LA    RWA,148(RWA)            ADVANCE TO NEXT DSCB
NDXSTORE ST    RWA,DSCBADR             STORE UPDATED POINTER
         C     RWA,DSCBLIM             TEST IF LAST DSCB IN BUFFER
         BNL   LASTDSCB                BRANCH IF SO
         LR    R1,RWA                  PASS ADDRESS TO USER
GETOUT   TM    MODESW,RDERR            TEST IF ERROR ON THIS TRACK
         BZ    RETURN0                 RETURN CODE 0 IF NOT
         B     RETURN8                 RETURN CODE 8 IF ERROR
         SPACE
* IF THIS IS THE LAST DSCB, MOVE IT TO THE JFCB BUFFER AND START
* READING THE NEXT TRACK.
         SPACE
LASTDSCB MVC   JFCB(148),0(RWA)        MOVE LAST DSCB
         L     RWB,TTRN                LOAD RELATIVE TRACK NUMBER
         AL    RWB,=X'00010000'        INCREMENT TO NEXT TRACK
         ST    RWB,TTRN
         BAL   RRET,EXCP               START CHANNEL PROGRAM
         LA    R1,JFCB                 LOAD DSCB ADDRESS FOR CALLER
         B     GETOUT                  TO RETURN
         EJECT
* WAIT FOR CHANNEL PROGRAM COMPLETION AND TEST THE OUTCOME.
         SPACE
XCPTEST  WAIT  ECB=VTOCECB
         SPACE
         NI    MODESW,X'FF'-XCPRUN     TURN EXCP STARTED BIT OFF
         CLI   VTOCECB,X'7F'           TEST COMPLETION CODE
         BNE   PERMERR                 BRANCH IF ERROR
SETDSCBA L     RWA,DSCBSTRT            SET BUFFER POINTER TO 1ST DSCB
         B     NDXSTORE
         SPACE
* PERMANENT ERROR FOR THIS TRACK.  ZERO THE DSCB'S AND FILL IN THE
* CCHHR PORTIONS OF THE COUNT AREAS.
         SPACE
PERMERR  OI    MODESW,RDERR            SIGNAL READ ERROR
         NI    IOBFLAG1,X'FB'          TURN OFF BIT 5 OF IOB FLAG
         NI    DCBIFLGS,X'3F'          TURN OFF BITS 0 AND 1
         L     RWA,DSCBSTRT            LOAD ADDRESS OF FIRST DSCB
         LA    RWB,1                   LOAD RECORD NUMBER
         SPACE
DSCBELUP XC    0(148,RWA),0(RWA)       ZERO DSCB BUFFER
         MVC   0(4,RWA),IOBSEEK+3      INSERT CCHH IN COUNT FIELD
         STC   RWB,4(RWA)              INSERT R IN COUNT FIELD
         LA    RWA,148(RWA)            POINT TO NEXT BUFFER
         LA    RWB,1(RWB)              INCREMENT RECORD NUMBER
         C     RWA,DSCBLIM             TEST FOR LAST BUFFER
         BNH   DSCBELUP
         B     SETDSCBA                BRANCH TO RESET BUFFER POINTER
         EJECT
*****************
* MODE 1 - OPEN *
*****************
         SPACE
* ENTER WITH A DDNAME ADDRESSED BY REGISTER 1.  PERFORM CLOSE
* SUBROUTINE FIRST TO BE SURE EVERYTHING IS INITIALIZED.
         SPACE
OPEN     DS    0H
         LR    RPARM,R1                SAVE REGISTER 1
         BAL   RRET,CLOSESUB           CALL CLOSE SUBROUTINE
         SPACE
         MVC   DCBDDNAM(8),0(RPARM)    INSERT DDNAME IN DCB
         SPACE
* CHECK DEVICE TYPE TO BE SURE IT IS DIRECT ACCESS.
         SPACE
         DEVTYPE  DCBDDNAM,DWORK       GET DEVICE TYPE
         LTR   R15,R15                 TEST IF IT FOUND DD CARD
         BNZ   RETURN4                 ERROR, DD CARD MISSING
         CLI   DWORK+2,X'20'           TEST DEVICE TYPE
         BNE   RETURN8                 ERROR IF NOT DIRECT ACCESS
         SPACE
         CLI   DWORK+3,MAXDVT          TEST FOR MAX DEVICE TYPE
         BNL   RETURN8                 ERROR IF TOO LARGE
         SR    R1,R1
         IC    R1,DWORK+3              LOAD DEVICE NUMBER
         IC    R1,DVICETAB(R1)         LOAD DSCB'S/TRK FROM TABLE
         LTR   R1,R1                   ZERO IS UNDEFINED DEVICE
         BZ    RETURN8                 EXIT IF UNKNOWN
         ST    R1,NDSCBS               STORE NUMBER OF DSCB'S/TRACK
         SPACE
* READ JFCB AND INSERT DATA SET NAME OF 44 X'04'.
         SPACE
         RDJFCB  VTOCDCB
         MVI   JFCBDSNM,X'04'          GENERATE DATA SET NAME
         MVC   JFCBDSNM+1(43),JFCBDSNM
         SPACE
* OPEN THE DSCB.
         SPACE
         OPEN  (VTOCDCB,(INPUT)),TYPE=J
         TM    DCBOFLGS,OPENBIT        TEST IF OPEN WORKED
         BZ    RETURN4                 ERROR IF OPEN FAILED
         SPACE
* OBTAIN CORE FOR CHANNEL PROGRAM AND DSCB BUFFERS.
         SPACE
         LA    R0,156                  CORE FOR ONE DSCB AND ITS CCW
         MH    R0,NDSCBS+2             TIMES NUMBER PER TRACK
         AH    R0,=H'15'               PLUS 1 CCW AND ROUNDING
         N     R0,=X'FFFFFFF8'         ROUND TO DOUBLE-WORD MULTIPLE
         ST    R0,CBSIZE               SAVE SIZE OF GOTTEN CORE
         GETMAIN  R,LV=(0)             GET TRACK BUFFERS
         ST    R1,CBADDR               SAVE ADDRESS OF GOTTEN CORE
         OI    MODESW,CBGOT            INDICATE CORE GOTTEN
         SPACE
* GENERATE CHANNEL PROGRAM.  IT CONSISTS OF A 'READ R0' ORDER WITH
* THE SKIP FLAG ON, FOLLOWED BY A 'READ COUNT-KEY-AND-DATA' ORDER FOR
* EACH DSCB.
         SPACE
         L     RWA,NDSCBS              NUMBER OF DSCB'S
         SLL   RWA,3                   TIMES   8
         LA    RWA,8(RWA,R1)           PLUS 8 AND BASE = 1ST BUFFER ADD
         ST    RWA,DSCBSTRT            SAVE ADDRESS OF FIRST BUFFER
         SPACE
         ST    R1,IOBSTART             ADDRESS OF CHANNEL PROGRAM
         MVC   0(8,R1),INITCCW         INSERT FIRST CCW
         LA    RWB,8(R1)               PLACE FOR NEXT CCW
         LA    RWC,1                   BUFFER COUNTER
         SPACE
CCWLOOP  MVC   0(8,RWB),READCCW        INSERT READ CCW FOR ONE DSCB
         ST    RWA,0(RWB)              SET ITS BUFFER ADDRESS
         MVI   0(RWB),READCKD          RESTORE COMMAND CODE
         C     RWC,NDSCBS              TEST BUFFER COUNTER
         BNL   LASTCCW                 BRANCH IF LAST BUFFER
         LA    RWB,8(RWB)              INCREMENT CCW ADDRESS
         LA    RWA,148(RWA)            INCREMENT BUFFER ADDRESS
         LA    RWC,1(RWC)              INCREMENT BUFFER COUNTER
         B     CCWLOOP                 DO NEXT BUFFER
         SPACE
LASTCCW  NI    4(RWB),X'FF'-CC         TURN OFF COMMAND CHAIN BIT
         ST    RWA,DSCBLIM             SAVE ADDRESS OF LAST DSCB BUFFER
         SPACE
* SET OTHER THINGS AND START PROGRAM TO FILL BUFFER.
         SPACE
         SR    R0,R0
         ST    R0,TTRN                 SET RELATIVE TRACK NUMBER TO 0
         NI    MODESW,X'FF'-XCPRUN-RDERR-EOFSW   SET FLAGS OFF
         BAL   RRET,EXCP               START CHANNEL PROGRAM
         B     RETURN0                 INDICATE SUCCESSFUL OPEN
         EJECT
******************
* MODE 2 - CLOSE *
******************
         SPACE
CLOSE    BAL   RRET,CLOSESUB           CALL CLOSED CLOSE SUBROUTINE
         B     RETURN0
         SPACE 2
* IF THE CHANNEL PROGRAM IS RUNNING, WAIT FOR IT BEFORE TAKING FURTHER
* ACTION.
         SPACE
CLOSESUB DS    0H
         TM    MODESW,XCPRUN           TEST IF CHANNEL PROGRAM RUNNING
         BZ    NOEXCP                  BRANCH IF NOT
         WAIT  ECB=VTOCECB             WAIT UNTIL COMPLETE
         NI    MODESW,X'FF'-XCPRUN     TURN RUNNING SWITCH OFF
NOEXCP   DS    0H
         SPACE
* CLOSE THE DCB.
         SPACE
         TM    DCBOFLGS,OPENBIT        TEST IF DCB OPEN
         BZ    NOCLOSE                 BRANCH IF NOT
         CLOSE VTOCDCB
NOCLOSE  DS    0H
         SPACE
* RELEASE CORE OBTAINED FOR DSCB BUFFERS.
         SPACE
         TM    MODESW,CBGOT            TEST IF CORE GOTTEN
         BZ    NOFREE                  BRANCH IF NOT
         LM    R0,R1,CBSIZE            LOAD SIZE AND LOCATION
         FREEMAIN  R,LV=(0),A=(1)      FREE CORE
         NI    MODESW,X'FF'-CBGOT      SET CORE GOTTEN BIT OFF
NOFREE   DS    0H
         SPACE
         NI    MODESW,X'FF'-RDERR      CLEAR ERROR SWITCH
         BR    RRET
         EJECT
****************
* EXCP ROUTINE *
****************
         SPACE
* CONVERT RELATIVE TRACK ADDRESS IN 'TTRN' TO ABSOLUTE SEEK ADDRESS IN
* 'IOBSEEK', USING SUPERVISOR CONVERSION ROUTINE.
         SPACE
EXCP     DS    0H
         STM   R2,R13,EXCPSAVE         SAVE IMPORTANT REGISTERS
         L     R0,TTRN                 LOAD RELATIVE TRACK NUMBER
         L     R1,DCBDEBAD             LOAD DEB ADDRESS
         LA    R2,IOBSEEK              LOAD ADDR TO RECEIVE MBBCCHHR
         L     R15,CVT                 LOAD CVT ADDRESS
         L     R15,CVTPCNVT(R15)       LOAD ADDR OF CONVERT ROUTINE
         BALR  R14,R15                 CONVERT TTRN TO MBBCCHHR
         DROP  RBASE                   THAT CLOBBERED BASE REG
         USING *,R14                   R14 SET BY BALR ABOVE
         LM    R2,R13,EXCPSAVE         RESTORE REGISTERS
         DROP  R14
         USING XVTCREAD,RBASE          BASE REGISTER RECOVERED
         LTR   R15,R15                 TEST IF EXTENT VIOLATED (RC=4)
         BNZ   SETEOF                  IF SO, MEANS END-OF-FILE
         SPACE
* ZERO ECB AND START CHANNEL PROGRAM.
         SPACE
         SR    R0,R0
         ST    R0,VTOCECB              CLEAR ECB
         NI    MODESW,X'FF'-RDERR      RESET ERROR SWITCH
         EXCP  VTOCIOB                 START CHANNEL PROGRAM
         OI    MODESW,XCPRUN           SET 'RUNNING' FLAG
         BR    RRET
         SPACE
* WHEN EXTENT IS VIOLATED, SET END-FILE AND EXIT VIA CLOSE ROUTINE.
         SPACE
SETEOF   OI    MODESW,EOFSW            SET END-OF-FILE BIT
         B     CLOSESUB                EXIT VIA CLOSE SUBROUTINE
         EJECT
********************************
* CONSTANTS, VARIABLES, ETC... *
********************************
         SPACE
INITCCW  CCW   READR0,0,CC+SLI+SKIP,8
READCCW  CCW   READCKD,0,CC,148
         SPACE
DVICETAB DC    X'00'           TABLE OF NUMBER OF DSCB'S/TRACK
         DC    AL1(16)            2311                     01
         DC    AL1(63)            2301                     02
         DC    AL1(17)            2303                     03
         DC    AL1(22)            2302                     04
         DC    AL1(8)             2321                     05
         DC    AL1(34)            2305-1                   06
         DC    AL1(34)            2305-2                   07
         DC    AL1(25)            2314                     08
         DC    AL1(39)            3330                     09
         DC    AL1(00)            UNKNOWN AS OF 4/75       0A
         DC    AL1(47)            3350                     0B
         DC    AL1(53)            3375  (UNKN ATTRS 5/81)  0C   CST
         DC    AL1(39)            3330-1                   0D
         DC    AL1(53)            3380                     0E   CST
         DC    AL1(00)            UNKNOWN AS OF 4/75       0F
MAXDVT   EQU   *-DVICETAB
         SPACE
DWORK    DS    D               WORK CELL
SAVEAREA DS    19F             SAVE AREA
EXCPSAVE EQU   SAVEAREA+12
CBSIZE   DS    2F              SIZE AND LOCATION OF GOTTEN CORE
CBADDR   EQU   CBSIZE+4
NDSCBS   DS    F               NUMBER OF DSCB'S PER TRACK
DSCBSTRT DS    F               ADDRESS OF 1ST DSCB BUFFER
DSCBLIM  DS    F               ADDRESS OF LAST DSCB BUFFER
DSCBADR  DS    F               ADDRESS OF CURRENT DSCB
TTRN     DS    F               RELATIVE TRACK NUMBER
         SPACE
* MODE SWITCH AND BIT DEFINITIONS:
         SPACE
MODESW   DC    X'00'
CBGOT    EQU   X'80'           CORE GOTTEN FOR BUFFER
XCPRUN   EQU   X'40'           CHANNEL PROGRAM STARTED BUT NOT CHECKED
RDERR    EQU   X'20'           PERMANENT I/O ERROR
EOFSW    EQU   X'10'           END-OF-FILE SENSED
         SPACE
         LTORG
         EJECT
* DATA CONTROL BLOCK
         SPACE
*********************************************************************
         ENTRY VTOCDCB      (USED BY IX VTOC ROUTINE )          CST
*********************************************************************
VTOCDCB  DCB   DDNAME=VOLUME01,MACRF=(E),EXLST=JFCBADDR
         SPACE
DCBDDNAM EQU   VTOCDCB+40
DCBIFLGS EQU   VTOCDCB+44
DCBDEBAD EQU   VTOCDCB+44
DCBOFLGS EQU   VTOCDCB+48
OPENBIT  EQU   X'10'
         EJECT
* IOB FOR CHANNEL PROGRAM:
         SPACE
VTOCIOB  DS    0D
IOBFLAG1 DC    X'42000000'     COMMAND CHAIN, NOT RELATED
         DC    A(VTOCECB)
         DC    2F'0'
IOBSTART DC    A(0)            CHANNEL PROGRAM BEGINNING
         DC    A(VTOCDCB)
         DC    X'03000000'
         DC    F'0'
IOBSEEK  DC    D'0'            INITIAL SEEK ADDRESS
         SPACE
* EVENT CONTROL BLOCK FOR CHANNEL PROGRAM:
         SPACE
VTOCECB  DC    F'0'            EVENT CONTROL BLOCK
         SPACE 3
* BUFFER FOR JFCB AND DCB EXIT LIST:
         SPACE
JFCBADDR DS    0F
         DC    X'87'
         DC    AL3(JFCB)
         SPACE
JFCB     DS    0D
         DS    CL176
         SPACE
JFCBDSNM EQU   JFCB            DATA SET NAME
JFCBVOLS EQU   JFCB+118        VOLUME SERIAL NUMBER
         SPACE 6
         END
DTED     TITLE 'DATE EDITING ROUTINE "XDATEDIT"'
* STATUS:  VERSION 0, MOD 2, 5 OCTOBER 1967.
         SPACE
* FUNCTION/OPERATION:  EDITS A PACKED DECIMAL DATE IN YEAR-DAY FORM TO
*        EBCDIC MONTH-DAY-YEAR FORM.  CORRECTS FOR LEAP YEARS AND
*        FOR THE TURN OF A CENTURY.
         SPACE
* ENTRY POINTS:  ENTER AT "XDATEDIT" VIA BALR 14,15 WITH REG 13 SET
*        TO A STANDARD 18-WORD SAVE AREA.  REGISTER 1 POINTS TO A
*        PARAMETER LIST CONTAINING ONE ADDRESS.
         SPACE
* INPUT:  THE ADDRESS IN THE PARAMETER LIST IS THAT OF AN ALIGNED
*        DOUBLE WORD CONTAINING THE ARGUMENT IN PACKED DECIMAL AS:
*        X'0000000000YYDDD+'.
         SPACE
* OUTPUT:  THE RESULT IS RETURNED IN THE SAME DOUBLE WORD IN EBCDIC AS
*        C'MM/DD/YY'.
         SPACE
* DATA SETS:  NONE.
         SPACE
* EXTERNAL ROUTINES:  NONE.
         SPACE
* EXITS-NORMAL:  RETURN VIA REG 14 WITH RETURN CODE 0 IN REG 15.
         SPACE
* EXITS-ERROR:  IF THE DAY NUMBER IS ZERO OR EXCEEDS THE MAXIMUM VALUE
*        APPROPRIATE TO THE YEAR, RETURN VIA REG 14 WITH RETURN CODE 4
*        IN REG 15 AND THE RESULT FIELD SET TO C' YY.DDD '.
         SPACE
* TABLES/WORK AREAS:  NONE.
         SPACE
* ATTRIBUTES:  REENTRANT, READ ONLY.
         SPACE
* NOTES:  NONE.
         EJECT
* DUMMY SECTION TO DEFINE THE ARGUMENT AND RETURN FIELD.
         SPACE
DUMMY    DSECT
DWORD    DS    1D
         SPACE 6
* BEGIN CONTROL SECTION HERE.  DEFINE REGISTER TAGS.
         SPACE
XDATEDIT CSECT
         SPACE
RBASE    EQU   12              LOCAL BASE REGISTER
RDSECT   EQU   11              BASE REG FOR ARGUMENT/RESULT
RPARM    EQU   1               PARAMETER LIST POINTER
RARGSAVE EQU   2               TO SAVE ORIGINAL PACKED ARGUMENT
RMONTH   EQU   3
RDAY     EQU   4               RDAY AND RYEAR ARE AN EVEN/ODD
RYEAR    EQU   5                 PAIR FOR DIVISION
RWORK    EQU   6
RLIST    EQU   7
         SPACE 6
* ENTER HERE.  SAVE GENERAL REGISTERS AND SET UP BASE REGISTERS.
         SPACE
         SAVE  (14,12),,*
         SPACE
         BALR  RBASE,0
         USING *,RBASE
         L     RDSECT,0(RPARM)         LOAD ARGUMENT ADDRESS
         USING DWORD,RDSECT
         EJECT
* CONVERT YEAR AND DAY TO BINARY, AND SEPARATE BY DIVISION.
         SPACE
         MVI   DWORD,X'00'             CLEAR HIGH DECIMAL DIGITS
         MVC   DWORD+1(4),DWORD          IN ARG TO ZEROS
         OI    DWORD+7,X'0F'           FORCE PLUS SIGN
         L     RARGSAVE,DWORD+4        SAVE ARGUMENT FOR 'BADDATE'
         SPACE
         CVB   RYEAR,DWORD             CONVERT YYDDD TO BINARY
         SR    RDAY,RDAY               CLEAR HIGH-ORDER DIVIDEND
         D     RDAY,F1000              QUOTIENT=YEAR; REMAINDER=DAY
         SPACE
* CHECK FOR LEAP YEAR, AND LOAD RLIST WITH BASE ADDRESS OF APPROPRIATE
* LIST OF MONTH SIZES.
         SPACE
DAYOK    DS    0H
         LA    RLIST,STDLIST           POINT RLIST TO STANDARD MONTHS
         LTR   RWORK,RYEAR             LOAD BINARY YEAR NUMBER
         BZ    NOTLEAP                 BR IF TURN OF CENTURY
         N     RWORK,=F'3'             TEST LOW TWO BITS
         BC    4,NOTLEAP               BR IF NON-ZERO
         LA    RLIST,LPYLIST           POINT RLIST TO LEAP-YEAR MONTHS
NOTLEAP  DS    0H
         SPACE
* TEST DAY NUMBER AGAINST ZERO AND THE UPPER LIMIT DETERMINED BY
* THE YEAR NUMBER.
         SPACE
         LTR   RDAY,RDAY               TEST FOR ZERO
         BZ    BADDATE                 BR IF SO
         CH    RDAY,0(0,RLIST)         TEST FOR UPPER LIMIT
         BH    BADDATE                 BR IF TOO LARGE
         SPACE
* REDUCE JULIAN DAY TO DAY-OF-MONTH, ACCUMULATING MONTH NUMBER.
         SPACE
         LA    RMONTH,1                INITIAL MONTH NUMBER
         SR    RWORK,RWORK
DAYLOOP  IC    RWORK,1(RMONTH,RLIST)   LENGTH OF MONTH INTO RWORK
         CR    RDAY,RWORK              TEST IF DAY IN THIS MONTH
         BNH   DAYDONE                 BR IF DAY LESS THAN MONTH SIZE
         SR    RDAY,RWORK              REDUCE DAY BY LENGTH OF MONTH
         LA    RMONTH,1(RMONTH)        INCREMENT MONTH
         B     DAYLOOP
DAYDONE  DS    0H
         SPACE
* COMBINE MONTH, DAY, AND YEAR IN BINARY IN ONE REGISTER, MULTIPLYING
* EACH BY A FACTOR TO PLACE IT PROPERLY IN THE DECIMAL RESULT.
* THE TRICK IS THAT  1000(1000(MONTH)+DAY)+YEAR  GIVES  MM0DD0YY  WHEN
* CONVERTED TO DECIMAL.  AFTER UNPACKING, THE ZEROS ARE REPLACED BY
* SLASHES.
         SPACE
         MH    RMONTH,H1000
         AR    RMONTH,RDAY
         MH    RMONTH,H1000
         AR    RMONTH,RYEAR
         CVD   RMONTH,DWORD
         MVC   DWORD(5),DWORD+3        MOVE OVER FOR UNPACKING
         UNPK  DWORD(8),DWORD(5)       CONVERT TO ALPHA
         OI    DWORD+7,X'F0'           COVER UP SIGN
         MVI   DWORD+2,C'/'            INSERT SLASHES
         MVI   DWORD+5,C'/'
         SR    15,15                   SET NORMAL RETURN CODE OF 0
         SPACE
EXIT     RETURN  (14,12),T,RC=(15)     RETURN TO CALLER
         SPACE 2
* FOR ARGUMENTS WHOSE DAY NUMBER IS ZERO OR TOO LARGE, RETURN IN
* 'DWORD' THE EDITED VALUE  C' YY.DDD ' AND SET A RETURN CODE OF 4.
         SPACE
BADDATE  ST    RARGSAVE,DWORD          RESTORE ORIGINAL PACKED ARGUMENT
         UNPK  DWORD+2(5),DWORD+1(3)   UNPACK INTO ALPHA
         MVC   DWORD+1(2),DWORD+2      SHIFT YEAR 1 LEFT
         MVI   DWORD,C' '              APPLY COSMETICS
         MVI   DWORD+3,C'.'
         MVI   DWORD+7,C' '
         LA    15,4                    SET RETURN CODE
         B     EXIT
         EJECT
* LISTS OF MONTH SIZES FOR STANDARD AND LEAP YEARS:
         SPACE
         SPACE
STDLIST  DC    H'365'          DAY LIMIT FOR STANDARD YEARS
         DC    AL1(31)
         DC    AL1(28)
         DC    AL1(31)
         DC    AL1(30)
         DC    AL1(31)
         DC    AL1(30)
         DC    AL1(31)
         DC    AL1(31)
         DC    AL1(30)
         DC    AL1(31)
         DC    AL1(30)
         DC    AL1(31)
         SPACE
LPYLIST  DC    H'366'          DAY LIMIT FOR LEAP YEARS
         DC    AL1(31)
         DC    AL1(29)
         DC    AL1(31)
         DC    AL1(30)
         DC    AL1(31)
         DC    AL1(30)
         DC    AL1(31)
         DC    AL1(31)
         DC    AL1(30)
         DC    AL1(31)
         DC    AL1(30)
         DC    AL1(31)
         SPACE
F1000    DC    F'1000'
H1000    EQU   F1000+2
         LTORG
         SPACE
         END
//*KED.SYSLMOD DD DISP=OLD,DSN=SYS1.OACLINK
//LKED.XXX     DD DISP=SHR,DSN=SYS9.MSSLOAD
//LKED.SYSIN DD *
 INCLUDE XXX(IXTOFMT5)
 ENTRY VTOCLIST
 NAME VTOCLIST(R)
