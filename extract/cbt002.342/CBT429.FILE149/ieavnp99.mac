//CSYSMAS1  JOB  MSGCLASS=A
/*ROUTE  PRINT  WYLBUR
//   EXEC  ASMHCL,PARM.LKED='RENT,REFR,XREF'
//SYSLIB  DD   DISP=SHR,DSN=SYS5.MSSMAC
//        DD   DISP=SHR,DSN=SYS1.MACLIB
//        DD   DISP=SHR,DSN=SYS1.AMODGEN,UNIT=3350,VOL=SER=MVSRES
//SYSIN   DD   *
***********************************************************************
*
IEAVNP99 CSECT
*
*  ROUTINE -
*       IEAVNP99
*
*  FUNCTION -
*       THIS ROUTINE IS CALLED DURING NIP PROCESSING TO CREATE
*       AND INITIALIZE A UVT (USER VECTOR TABLE).
*
*  LINKAGE -
*       VIA BALR FROM IEAVNIPM.
*
*  ATTRIBUTES -
*       NON-REENTRANT
*       SUPERVISOR MODE
*       PSW KEY ZERO
*       UNLOCKED (THUS ENABLED)
*       SINGLE THREADED (I THINK)
*
*  INPUT -
*       STANDARD NIP INTERFACE:
*       R2  - ADDRESS OF CVT
*       R3  - ADDRESS OF NVT
*       R13 - STD SAVEAREA
*       R14 - RETURN ADDRESS
*       R15 - ENTRY POINT ADDRESS
*
*  NOTES -
*       STANDARD NIP CALLING SEQUENCES FOR NIP SERVICES ARE
*       OBSERVED.  NIP MACROS ARE NOT USED DUE TO THE GENERAL
*       UNAVAILABILITY OF THESE MACROS.
*
*       THE LENGTH AND FORMAT OF THE UVT IS DEFINED BY THE MAPPING
*       MACRO OACUVT.
*
*       THE UVT IS ALLOCATED IN SQA (SP 245).  THIS STORAGE IS
*       FIXED, KEY ZERO, NON-FETCH PROTECTED, NON-V=R. THE ADDRESS
*       THE ADDRESS OF THE UVT IS STORED INTO THE CVT USER WORD
*       (CVTUSER).  THE UVT IS NEVER FREED AND CVTUSER IS NEVER
*       ALTERED.
*
*       A ZAP TO IEAVNIPM (THE NIP RIM SCHEDULER) IS REQUIRED TO
*       CAUSE THAT ROUTINE TO INVOKE THIS ROUTINE.  THE ORDER IN
*       WHICH THIS ROUTINE IS INTENDED TO BE INVOKED IS TOWARD THE
*       END OF RIM PROCESSING; THE EXACT SEQUENCE IS UNIMPORTANT.
*       THE UVT WILL BE INITIALIZED BEFORE THE MASTER SCHEDULER
*       (IEEMB860) IS INVOKED.
*
*       CURRENTLY, THIS RIM IS OPTIONAL.  THAT IS, NIP PROCESSING WILL
*       CONTINUE IF UNABLE TO LOAD THIS ROUTINE, AND THIS ROUTINE WILL
*       NOT REQUEST A WAIT STATE IF UNABLE TO INITIALIZE THE UVT. USERS
*       OF THE UVT ARE THEREFORE RESPONSIBLE FOR INSURING THAT THE
*       UVT HAS BEEN INITIALIZED (CVTUSER NON-ZERO AND UVTID = 'UVT ')
*       BEFORE PROCEEDING.  THE CALLER IS ALSO RESPONSIBLE FOR CHECKING
*       THAT THE CURRENT LENGTH OF THE UVT IS SUFFICIENT.
*
*  WRITTEN -
*       CHRIS THOMAS
*       OFFICE OF ACADEMIC COMPUTING, UCLA
*       3/1/82
*
***********************************************************************
         EJECT
*
*  ENTRY PROLOG
*
         B     PROLOG-IEAVNP99(,R15)
         DC    AL1(L'MODID)
MODID    DC    C'IEAVNP99 UVT BUILD '
PROLOG   STM   R14,R12,12(R13)    SAVE CALLER'S REGS
         LR    R12,R15            LOAD BASE
         USING IEAVNP99,R12
         LR    R14,R13            CALLER'S SAVE
         LA    R13,SAVEAREA       MY SAVE
         ST    R14,SAVEAREA+4     CHAIN FWD
         ST    R13,8(,R14)        CHAIN BACK
*
*  STANDARD NIP REGISTERS IN USE
*
         USING NVT,R2
         USING CVT,R3
*
*  GET SQA (SP 245) FOR UVT
*
         LA    R0,UVTLEN          LENGTH OF UVT
         GETMAIN  RC,SP=245,LV=(0)
         LTR   R15,R15            WAS STORAGE AVAILABLE
         BNZ   ERROR1             NO. EXIT WITH ERROR MSG.
         LA    R11,0(,R1)         CLEAR HIGH ORDER BYTE
*
*  INITIALIZE UVT
*
         USING UVT,R11
         XC    UVT(UVTLEN),UVT    INITIALIZE TO ZERO
         MVC   UVTID,=C'UVT '     VALIDITY CHECK/EYE CATCHER
         LA    R1,UVTLEN          SIZE GOTTEN FOR UVT
         ST    R1,UVTSIZE         LENGTH OF UVT FOR VALIDITY CHECKING
*
*  CHAIN UVT FROM CVT
*
         SR    R10,R10            ASSUME CVTUSER NOT IN USE
         CS    R10,R11,CVTUSER    SWAP IF CVTUSER WAS ZERO
         BNZ   ERROR2             IF SWAP FAILS, EXIT WITH ERROR MSG
*
*  ISSUE 'UVT INITIALIZED' WTO
*
         ST    R11,WORK
         UNPK  MSG1ADDR(7),WORK+1    ADDR OF UVT
         TR    MSG1ADDR,HEXTAB-X'F0' TO PRINTABLE HEX
         MVI   MSG1ADDR+6,C' '    REMOVE JUNK
         LA    R1,MSG1            A(TEXT)
         L     R15,NVTWTO         A(NIP WTO ROUTINE)
         BALR  R14,R15            CALL IT
*
*  EXIT LINKAGE
*
EXIT     L     R13,4(,R13)        RESTORE CALLER'S SAVEPTR
         LM    R14,R12,12(R13)    RESTORE CALLER'S REGS
         BR    R14                RETURN
         EJECT
*
*  ERROR - SQA GETMAIN FAILURE
*
ERROR1   MVC   MSG2CODE,=C'01'    MOVE ID TO WTO TEXT
         LA    R1,MSG2            A(WTO)
         L     R15,NVTWTO         A(NIP WTO ROUTINE)
         BALR  R14,R15            CALL IT
         B     EXIT               GO EXIT
         SPACE  4
*
*  ERROR - CVTUSER NOT ZERO
*
ERROR2   MVC   MSG2CODE,=C'02'    MOVE ID TO WTO TEXT
         LA    R1,MSG2            A(WTO)
         L     R15,NVTWTO         A(NIP WTO ROUTINE)
         BALR  R14,R15            CALL IT
         LA    R0,UVTLEN          LENGTH OF UVT
         FREEMAIN RC,SP=245,LV=(0),A=(R11)
         B     EXIT               WTO EXIT
         SPACE  4
*
*  WTO MESSAGES
*
         SPACE
MSG1     DC    AL2(MSG1E-MSG1,0)
         DC    C'OAC999I UVT INITIALIZED - ADDR = XXXXXX '
MSG1E    EQU   *
MSG1ADDR EQU   MSG1+37,6
         SPACE 4
MSG2     DC    AL2(MSG2E-MSG2,0)
         DC    C'OAC999I UVT BUILD FAILED - CODE=XX. NOTIFY SYSTEM SUPP+
               ORT.'
MSG2E    EQU   *
MSG2CODE EQU   MSG2+36,2
         EJECT
SAVEAREA DC    18F'0'
WORK     DC    F'0'
HEXTAB   DC    C'0123456789ABCDEF'
         SPACE 4
         LTORG
         EJECT
         OACREGS
         SPACE  4
NVT      DSECT
NVTWTO   EQU   NVT+X'FC',4
         SPACE  4
         OACUVT
         SPACE  4
         CVT   DSECT=YES,LIST=NO
         END
//*KED.SYSLMOD DD DISP=OLD,DSN=SYS1.AOACDLIB(IEAVNP99),
//* UNIT=
