         MACRO
&NAME    OACENTER &REGEQU=YES,&BASE=R10,&PARM=R9,&ENTRYS=,&ENTRYR=,    X
               &EXIT=,&DSECT=,&WORK=,&STACK=,&ROUND=NO,&SP=1,&PLIX=NO, X
               &ID=,&DATE=,&PRINT=
         COPY  OACGBLS            GET OAC GLOBAL ASM SYSMS
         LCLC  &C,&I,&D,&STK,&STKMX,&LEN,&BASEADD,&SPL,&NM
         LCLA  &N,&X,&WL,&A
         LCLB  &XZ,&NOSTACK
&NOSTACK SETB  ('&STACK(1)' EQ ''  OR '&STACK(1)' EQ '0')
&OACSTMX SETC  '8(R12)'           STACK MAX
&OACSTER SETC  '16(R12)'          OVERFLOW ROUTINE
&SPL     SETC  '0'
&I       SETC  '&NAME'
         AIF   ('&PLIX' NE 'YES').L0
&I       SETC  'X&NAME'(1,8)
.L0      ANOP
&I       CSECT ,                  AVOID PRIVATE CODE
         OACPRTPM PRINT=&PRINT
         AIF   ('&REGEQU' NE 'YES').L1
         OACREGS PRINT=&OACPRT
.L1      AIF   ('&DSECT' EQ '').L11
&DSECT   DSECT
&LEN     SETC  'XL&SYSNDX'
&STKMX   SETC  'XL&SYSNDX-71'
         AIF   (&NOSTACK).L6
         AIF   ('&PLIX' EQ 'NO').L2
.PSERR   MNOTE 8,'PLIX=YES AND STACK= ARE MUTUALLY EXCLUSIVE'
.L2      ANOP
         DC    AL1(&SP),AL3(0)    SP AND LENGTH OF WORK AREA
         DC    3A(0)              R13 CHAIN, STKMAX AND STACKERR
         L     R15,12(R12)        GET ADD OF STK OVERFLOW RTN
         BR    R15                CALL THE ROUTINE
         AIF   ('&WORK(2)' EQ '').L3
         OACWORK &WORK(2)
.L3      ANOP
&C       SETC  '&WORK(3)'
         AIF   ('&WORK(1)' EQ ''  OR '&WORK(1)' EQ '0').L4
&C       DC    0D'0',&WORK(1)XL1'0' RESERVED AREA
         AGO   .L4A
.L4      AIF   ('&C' EQ '').L4A
&C       DC    0D                 ALIGNED WORK LABEL
.L4A     ANOP
&STK     SETC  '&STACK(2)'
         AIF   ('&STK' NE '').L4B
&STK     SETC  'XS&SYSNDX'
.L4B     ANOP
&A       SETA  ((&STACK(1)+79)/8)*8
&STK     DC    0D'0',&A.XL1'0'    STACK AREA
&STK     SETC  '&STK-&DSECT'
         AIF   ('&ROUND' NE 'YES' ).L5
XO&SYSNDX EQU 4096*(((*-&DSECT)+4095)/4096)
         ORG   &DSECT+XO&SYSNDX
.L5      ANOP
XL&SYSNDX EQU  *-&DSECT
         SPACE &OACPRTS
         AGO   .L20
.L6      AIF   ('&PLIX' EQ 'YES').L7
         DC    9D'0'              OS SAVE AREA
&SPL     SETC  '72'
         AGO   .L8
.L7      ANOP
         DC    22F'0'             DSA HEADER
&SPL     SETC  '88'
.L8      ANOP
&STK     SETC  '0'
         DC    AL1(&SP),AL3(0)    SP AND LENGTH
         AIF   ('&WORK(2)' EQ '').L9
         OACWORK &WORK(2)
.L9      ANOP
&C       SETC  '&WORK(3)'
&C       DC    0D'0'              FORCE ALIGNMENT OF RESERVED AREA
         AIF   ('&WORK(1)' EQ ''  OR '&WORK(1)' EQ '0').L10
         DC    &WORK(1)XL1'0'     RESERVED AREA
.L10     ANOP
XL&SYSNDX EQU  *-&DSECT
         SPACE &OACPRTS
         AGO   .L20
.L11     AIF   ('&WORK(3)' EQ '').L12
         MNOTE 4,'WORK LABEL REQUIRES CODING DSECT=NAME'
.L12     AIF   ('&WORK(2)' EQ '').L13
         MNOTE 4,'WORK MACRO REQUIRES CODING DSECT=NAME'
.L13     AIF   ('&STACK(2)' EQ '' ).L14
         MNOTE 4,'STACK LABEL REQUIRES CODING DSECT=NAME'
.L14     AIF   (&NOSTACK).L16
         AIF   ('&PLIX' EQ 'YES').PSERR
&WL      SETA  24                 OS HEADER ROUNDED TO 8
&LEN     SETC  '24'
         AIF   ('&WORK(1)' EQ ''  OR '&WORK(1)' EQ '0').L15
&WL      SETA  &WL+8*((&WORK(1)+7)/8)
&LEN     SETC  '&WL'
&STK     SETC  '&WL'
.L15     ANOP
&WL      SETA  &WL+8*((&STACK(1)+79)/8)
&LEN     SETC  '&WL'
&STKMX   SETC  '&WL-71'
         AIF   ('&ROUND' NE 'YES' ).L20
&WL      SETA  4096*((&WL+4095)/4096)
&LEN     SETC  '&WL'
&STLMX   SETC  '&WL-71(R12)'
         AGO   .L20
.L16     AIF   ('&PLIX' EQ 'YES').L17
&SPL     SETC  '72'
&WL      SETA  80                 OS SAVE +SP +LENGTH
&LEN     SETC  '80'
         AGO   .L18
.L17     ANOP
&WL      SETA  96                 DSA HEADER +SP+LENGTH
&LEN     SETC  '96'
.L18     ANOP
&STK     SETC  '0'
         AIF   ('&WORK(1)' EQ ''  OR '&WORK(1)' EQ '0').L20
&WL      SETA  &WL+8*((&WORK(1)+7)/8)
&LEN     SETC  '&WL'
.L20     AIF   ('&BASE(2)' EQ '').L21
         MNOTE 8,'ONLY ONE BASE REGISTER IS SUPPORTED'
.L21     AIF   ('&OACPRT' NE 'NONE').L22
         PRINT ON,GEN
.L22     ANOP
         SPACE &OACPRTS
&I       SETC  '&NAME '
&D       SETC  '&SYSDATE'
         AIF   ('&ID' EQ '').L23
&I       SETC  '&ID '
.L23     AIF   ('&DATE' EQ '').L24
&D       SETC  '&DATE'
         MNOTE 7,'REMOVE DATE= BEFORE FINAL ASSEMBLY'
.L24     ANOP
&I       SETC  '&I&D'
         AIF   ('&PLIX' NE 'YES').L26
&C       SETC  'X&NAME'(1,8)
&C       CSECT
&A       SETA  2*(K'&I/2)
         AIF   (K'&I NE &A).L25
&I       SETC  '&I '
.L25     ANOP
         DC    C'&I'
&A       SETA  K'&I
         DC    AL1(&A)
         ENTRY &NAME
&NAME    STM   R14,R11,12(R13)    SAVE CALLERS REGS
         BALR  &BASE,0            GET BASE
         OACUSING &NAME+6,&BASE
&BASEADD SETC  '&NAME+6'
         AGO   .L27A
.L26     ANOP
&NAME    CSECT
&A       SETA  (2*(K'&I/2))+1+5   FORCE ODD ID LENGTH + AL1 + BRANCH
         B     &A.(R15)           BRANCH AROUND ID
&A       SETA  &A-5
         DC    AL1(&A),CL&A'&I'
         STM   R14,R12,12(R13)    SAVE CALLERS REGS
         LR    &BASE,R15          SAVE BASE
         OACUSING &NAME,&BASE
&BASEADD SETC  '&NAME'
.L27A    ANOP
&N       SETA  N'&ENTRYS
&NM      SETC  ''
         AIF   (&N EQ 0).L31
         AIF   ('&ENTRYR' NE '').L28
         MNOTE 12,'ENTRYR REQUIRED IF ENTRYS CODED'
.L28     ANOP
         SR    &ENTRYR,&ENTRYR    MARK AS MAIN ENTRY
         B     XC&SYSNDX          GO TO COMMON CODE
&NM      SETC  'XC&SYSNDX'
&X       SETA  1
.LOOP    ANOP
         SPACE 1
&C       SETC  '&ENTRYS(&X)'
         ENTRY &C
&C       STM   R14,R12,12(R13)    SAVE CALLERS REGS
&A       SETA  4*&X
         LA    &ENTRYR,&A         MARK AS ENTRY NO &X
         L     &BASE,XB&SYSNDX-&C.(R15) GET BASE ADDRESS
         B     XC&SYSNDX          GO TO COMMON CODE
&X       SETA  &X+1
         AIF   (&X LE &N).LOOP
XB&SYSNDX DC   A(&BASEADD)        BASE ADDRESS
.L31     AIF   ('&PARM' EQ '').L33
         AIF ('&PARM(2)' EQ 'L').L32
&NM      LR    &PARM(1),R1           SAVE PARM REG
&NM      SETC  ''
         AGO   .L32A
.L32     ANOP
&NM      L     &PARM(1),0(R1)        GET PARM ADDR
.L32A    AIF   ('&PARM(3)' EQ '').L33
         OACUSING &PARM(3),&PARM(1)
&NM      SETC  ''
.L33     AIF   ('&PLIX' NE 'YES').L36
&NM      LA    R0,&LEN            LNGTH OF REQUIRED DSA IN R0
&NM      SETC  ''
         L     R1,76(R13)         LOAD ADD OF NXT AVAIL BYTE
         ALR   R0,R1              ADD ADDRESSES
         CL    R0,12(R12)         SEE IF STACK OVERFLOW
         BNH   *+10               ENOUGH
         L     R15,116(R12)       ADD OF PLI STORAGE OVERFLOW
         BALR  R14,R15            GO TO IT
         ST    R0,76(R1)          STORE ADD NXT AVAIL BYTE
         ST    R13,4(R1)          CHAIN DSA'S
         MVC   72(4,R1),72(R13)   COPY ADD OF LIBRARY
         LR    R13,R1             PUSH STACK
         MVI   0(R13),X'80'       SET DSA FLAGS FOR PLI
         MVI   1(R13),X'00'
         MVI   86(R13),X'91'
         MVI   87(R13),X'C0'
         LA    R0,&LEN            GET LENTH OF DSA
         ST    R0,&SPL.(R13)      STORE INTO WORK AREA
         AIF   ('&DSECT' EQ '').L34
         OACUSING &DSECT,R13
.L34     AIF   ('&EXIT' EQ '').INUSE
         B     XZ&SYSNDX          BRANCH AROUND EXIT ROUTINE
&XZ      SETB  1
         SPACE &OACPRTS
&EXIT(1) L     R13,4(R13)         RELEASE CURRENT DSA
         LM    R14,R11,12(R13)    RESTORE CALLERS REGS
         LTR   R15,R15            SET CC
         BR    R14                RETURN TO CALLER
         AGO   .INUSE
.L36     ANOP
&NM      GETMAIN R,LV=&LEN,SP=&SP
&NM      SETC  ''
         MVC   &SPL.(4,R1),*-10   COPY SP AND LENGTH
         ST    R13,4(R1)          DO SAVE AREA CHAINING
         ST    R1,8(R13)          ESTABLISH ADDRESSABILITY
         AIF   (&NOSTACK).L38
         LR    R12,R1             MOVE BASE OF WA
         AIF   ('&DSECT' EQ '').L37
         OACUSING &DSECT,R12
.L37     ANOP
         LA    R13,&STK.(R12)     BASE OF STACK
         A     R1,=A(&STKMX)      GET ADD OF STACK MAX
         ST    R1,&OACSTMX        SAVE INTO WORK AREA
         MVC   16(6,R12),=XL6'58FC000C07FF'
         AIF   ('&STACK(3)' EQ '' ).OSEXIT
         LA    R1,&STACK(3)       GET OVERFLOW ROUTINE ADDRESS
         ST    R1,12(R12)         STORE IN WORK AREA
         B     XZ&SYSNDX
&XZ      SETB  1
         SPACE &OACPRTS
&STACK(3) BALR R15,0              GET A BASE
         USING *,R15
         WTO  'OAC900 STACK OVERFLOW IN &NAME',ROUTCDE=11,DESC=7
         DROP  R15
         AIF   ('&STACK(4)' EQ '' OR '&STACK(4)' EQ 'ABEND').SO
         LR    R1,R12             SAVE WORK BASE
         L     R13,4(R12)         UNCHAIN BASE ADDR
         L     R0,&SPL.(R1)       POINT TO SP AND LENGTH
         FREEMAIN R,LV=(0),A=(1)  DO THE FREEMAIN
         LA    R15,&STACK(4)      LOAD RETURN CODE
         LTR   R15,R15            SET CC
         BR    R14                RETURN TO CALLER
         AGO   .OSEXIT
.SO      ANOP
         ABEND 900,DUMP           STACK OVERFLOW ABEND
         AGO   .OSEXIT
.L38     ANOP
         LR    R13,R1             NEW WORK BASE
         AIF   ('&DSECT' EQ '').OSEXIT
         OACUSING &DSECT,R13
.OSEXIT  AIF   ('&EXIT' EQ '').INUSE
         AIF   (&XZ).OSEXIT1
         B     XZ&SYSNDX
&XZ      SETB  1
.OSEXIT1 ANOP
         SPACE &OACPRTS
         AIF   (&NOSTACK).OSEXIT2
&EXIT(1) LR    R1,R12             SAVE BASE ADDR
         L     R13,4(R12)         UNCHAIN SAVE AREA
         AGO   .OSEXIT3
.OSEXIT2 ANOP
&EXIT(1) LR    R1,R13             SAVE BASE ADDR
         L     R13,4(R13)         UNCHAIN SAVE AREA
.OSEXIT3 AIF   ('&EXIT(2)' NE '').L39
         ST    R15,16(R13)        SAVE RC
         AGO   .L41
.L39     ANOP
&C       SETC  '&EXIT(2)'(1,1)
         AIF   ('&C' EQ '(').L40
         MVC   16(4,R13),&EXIT(2) SAVE RC
         AGO   .L41
.L40     ANOP
&C       SETC  '&EXIT(2)'(2,K'&EXIT(2)-1)
&C       SETC  '&C'(1,K'&C-1)
         ST    &C,16(R13)         SAVE RC
.L41     ANOP
         L     R0,&SPL.(R1)       GET SP AND LENGTH
         FREEMAIN R,LV=(0),A=(1)  DO THE FREEMAIN
         LM    R14,R12,12(R13)    RESTORE CALLERS REGS
         LTR   R15,R15            SET CONDITION CODE
         BR    R14                RETURN TO CALLER
.INUSE   AIF   (&NOSTACK).L41A
         LTORG                    AS GOOD A PLACE AS ANY
.L41A    ANOP
         AIF   (NOT &XZ).L42
XZ&SYSNDX DC   0H'0'
.L42     ANOP
         OACINUSE PRINT=&PRINT
.MEND    POP   PRINT
         MEND
