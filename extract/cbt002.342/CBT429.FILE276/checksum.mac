/* REXX EXEC: CHECKSUM ******************************************** */
/*                                                                  */
/* REXX EXEC TO CALCULATE THE CHECKSUM OF A AMASPZAP INPUT STREAM   */
/* THIS WAS ORIGINALLY WRITTEN BY JIM LEONE ON 1995/08/22.          */
/* MODIFIED BY: STEVE SMITH ON 1996/09/17.                          */
/*                                                                  */
/* TO USE THIS EDIT MACRO DURING AN EDIT SESSION, PLACE A CHECKSUM  */
/* STATEMENT JUST AFTER THE LAST VER/REP TO BE CHECKED, MARK THE    */
/* LINE RANGE THAT YOU NEED A CHECKSUM FOR WITH "CC" MARKERS        */
/* AND ENTER A CHECKSUM COMMAND ON THE COMMAND LINE.  THIS EDIT     */
/* MACRO WILL PLACE THE COMPUTED CHECKSUM ON THE CHECKSUM LINE.     */
/*                                                                  */
/* FOR EXAMPLE, AFTER ALL SETUP AND LINES ARE MARKED:               */
/*     COMMAND ===> CHECKSUM                                        */
/*000012   NAME ANYMODULE CSECTNAME                                 */
/*CC 013   VER 01C0 ABAB                                            */
/*000014   VER 01CC C1C2                                            */
/*000015   REP 01C0 CCCC                                            */
/*CC 016   REP 01CC C3C4                                            */
/*000017   CHECKSUM                                                 */
/*000018   IDRDATA P510STR                                          */
/****************************************************************** */
/************************************************************** */
/* TRACE I                                                      */
/*REXX EXEC: CHECKSUM                                           */
/*         COMMAND: CHECKSUM BEG END                            */
/*         BEG = FIRST REP/VER STATEMENT                        */
/*         END = LAST  REP/VER STATEMENT                        */
/*         NOTE: IF BEG AND END ARE NOT GIVEN THEN C CC CNN     */
/*               LINE COMMAND RANGE WILL BE USED                */
/*         ADDED SUPPORT FOR REMAINING HEX LENGTH OF  2,6,10,14 */
/*         ADDED SUPPORT TO REMOVE COMMAS IN HEX VALUES         */
/*         ADDED SUPPORT FOR CC RANGE SELECTION                 */
/************************************************************** */
NUMERIC DIGITS 15
ADDRESS "ISREDIT" "MACRO (BEGL,ENDL) NOPROCESS"
 IF ENDL = '' THEN DO
    ADDRESS "ISREDIT" "PROCESS RANGE C"
         IF RC >  0  THEN DO
            SAY "NO LINES SPECIFIED"
            EXIT
         END
         ELSE DO
         ADDRESS "ISREDIT" "(BEGL) = LINENUM .ZFRANGE"  /* FIRST LINE*/
         ADDRESS "ISREDIT" "(ENDL) = LINENUM .ZLRANGE"  /* LAST LINE */
         END
 END
LOOPCTRL = ENDL - BEGL + 1
ALLVALUES = ''
 DO LOOPCTRL
         "ISREDIT (DATAL) = LINE" BEGL
         PARSE VAR DATAL OPER BASE HEXES .
         IF OPER = 'VER' × OPER = 'VERIFY'  × ,
            OPER = 'REP' × OPER = 'REPLACE' × OPER = 'BASE'
         THEN ALLVALUES = ALLVALUES ×× BASE ×× HEXES
         BEGL = BEGL + 1
 END
DONE = 'NO'
HEXTOT = 0
DO UNTIL DONE = 'YES'
         PARSE VAR ALLVALUES  ALLVALUES ',' TRAIL
         IF TRAIL = ''
            THEN DONE = 'YES'
            ELSE ALLVALUES = ALLVALUES ×× TRAIL
 END
DONE = 'NO'
HEXTOT = 0
DO UNTIL DONE = 'YES'
         HEXLENGTH = LENGTH(ALLVALUES)
  IF HEXLENGTH < 16
         THEN
         DO
         DONE = 'YES'
         CALL LASTONE
         HEXTOTAL = "'CHECKSUM " ×× HEXTOT ×× "' .HERE .HERE"
         "ISREDIT RESET LABEL"
         "ISREDIT LABEL "ENDL + 1" = .HERE"
         ADDRESS "ISREDIT "
         "CHANGE 'CHECKSUM' " HEXTOTAL
         EXIT
         END
ELSE
         DO  /* DO SUB1 */
         FIRST8 = SUBSTR(ALLVALUES,1,8)
         NEXT8  = SUBSTR(ALLVALUES,9,8)
         DEC1   = X2D(FIRST8)
         DEC2   = X2D(NEXT8)
         DECNUM = DEC1 + DEC2
         HEXSUB = D2X(DECNUM)
         IF LENGTH(HEXSUB) > 8
         THEN HEXSUB = SUBSTR(HEXSUB,2,8)
         DECTOT = X2D(HEXTOT) + X2D(HEXSUB)
         HEXTOT = D2X(DECTOT)
         IF LENGTH(HEXTOT) > 8
         THEN HEXTOT = SUBSTR(HEXTOT,2,8)
         ALLVALUES = SUBSTR(ALLVALUES,17)
         END /* DO SUB1 */
END  /* MAIN DO */
         HEXTOTAL = "'CHECKSUM " ×× HEXTOT ×× "' .HERE .HERE
         ADDRESS "ISREDIT "
         "ISREDIT RESET LABEL"
         "ISREDIT LABEL "ENDL + 1" = .HERE
         "CHANGE 'CHECKSUM' " HEXTOTAL
EXIT
LASTONE:
  IF HEXLENGTH = 2
         THEN
         CALL LAST2
  IF HEXLENGTH = 4
         THEN
         CALL LAST4
  IF HEXLENGTH = 6
         THEN
         CALL LAST6
  IF HEXLENGTH = 8
         THEN
         CALL LAST8
  IF HEXLENGTH = 10
         THEN
         CALL LAST10
  IF HEXLENGTH = 12
         THEN
         CALL LAST12
  IF HEXLENGTH = 14
         THEN
         CALL LAST14
RETURN ''
LAST2:
         DO
         FIRST8 = ALLVALUES
         FIRST8 = FIRST8 ×× '000000'
         DEC1   = X2D(FIRST8)
         DECT1  = X2D(HEXTOT)
         DECNUM = DEC1 + DECT1
         HEXTOT = D2X(DECNUM)
         IF LENGTH(HEXTOT) > 8
         THEN HEXTOT = SUBSTR(HEXTOT,2,8)
         END
RETURN ''
LAST4:
         DO
         FIRST8 = ALLVALUES
         FIRST8 = FIRST8 ×× '0000'
         DEC1   = X2D(FIRST8)
         DECT1  = X2D(HEXTOT)
         DECNUM = DEC1 + DECT1
         HEXTOT = D2X(DECNUM)
         IF LENGTH(HEXTOT) > 8
         THEN HEXTOT = SUBSTR(HEXTOT,2,8)
         END
RETURN ''
LAST6:
         DO
         FIRST8 = ALLVALUES
         FIRST8 = FIRST8 ×× '00'
         DEC1   = X2D(FIRST8)
         DECT1  = X2D(HEXTOT)
         DECNUM = DEC1 + DECT1
         HEXTOT = D2X(DECNUM)
         IF LENGTH(HEXTOT) > 8
         THEN HEXTOT = SUBSTR(HEXTOT,2,8)
         END
RETURN ''
LAST8:
         DO
         FIRST8 = ALLVALUES
         DEC1   = X2D(FIRST8)
         DECT1  = X2D(HEXTOT)
         DECNUM = DEC1 + DECT1
         HEXTOT = D2X(DECNUM)
         IF LENGTH(HEXTOT) > 8
         THEN HEXTOT = SUBSTR(HEXTOT,2,8)
         END
RETURN ''
LAST10:
         DO
         FIRST8 = SUBSTR(ALLVALUES,1,8)
         NEXT8  = SUBSTR(ALLVALUES,9,2)
         NEXT8  = NEXT8 ×× '000000'
         DEC1   = X2D(FIRST8)
         DEC2   = X2D(NEXT8)
         DECNUM = DEC1 + DEC2
         HEXSUB = D2X(DECNUM)
         IF LENGTH(HEXSUB) > 8
         THEN HEXSUB = SUBSTR(HEXSUB,2,8)
         DECT1  = X2D(HEXTOT)
         DECT2  = X2D(HEXSUB)
         DECTOT = DECT1 + DECT2
         HEXTOT = D2X(DECTOT)
         IF LENGTH(HEXTOT) > 8
         THEN HEXTOT = SUBSTR(HEXTOT,2,8)
         END
RETURN ''
LAST12:
         DO
         FIRST8 = SUBSTR(ALLVALUES,1,8)
         NEXT8  = SUBSTR(ALLVALUES,9,4)
         NEXT8  = NEXT8 ×× '0000'
         DEC1   = X2D(FIRST8)
         DEC2   = X2D(NEXT8)
         DECNUM = DEC1 + DEC2
         HEXSUB = D2X(DECNUM)
         IF LENGTH(HEXSUB) > 8
         THEN HEXSUB = SUBSTR(HEXSUB,2,8)
         DECT1  = X2D(HEXTOT)
         DECT2  = X2D(HEXSUB)
         DECTOT = DECT1 + DECT2
         HEXTOT = D2X(DECTOT)
         IF LENGTH(HEXTOT) > 8
         THEN HEXTOT = SUBSTR(HEXTOT,2,8)
         END
RETURN ''
LAST14:
         DO
         FIRST8 = SUBSTR(ALLVALUES,1,8)
         NEXT8  = SUBSTR(ALLVALUES,9,6)
         NEXT8  = NEXT8 ×× '00'
         DEC1   = X2D(FIRST8)
         DEC2   = X2D(NEXT8)
         DECNUM = DEC1 + DEC2
         HEXSUB = D2X(DECNUM)
         IF LENGTH(HEXSUB) > 8
         THEN HEXSUB = SUBSTR(HEXSUB,2,8)
         DECT1  = X2D(HEXTOT)
         DECT2  = X2D(HEXSUB)
         DECTOT = DECT1 + DECT2
         HEXTOT = D2X(DECTOT)
         IF LENGTH(HEXTOT) > 8
         THEN HEXTOT = SUBSTR(HEXTOT,2,8)
         END
RETURN ''
 EXIT
