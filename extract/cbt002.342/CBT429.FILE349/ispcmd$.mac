Dynamically updating the ISPF command Table


The ISPF command table is a very convenient place to store user
defined command shorthands for ISPF or TSO commands.

Throughout the years I have seen many people customizing the ISPF
command table to suit their personal preferences - in fact I have done
so myself on numerous occasions.  The main drawback is, and has always
been, the maintenance issue. If you start by distributing a copy of
the IBM supplied command table and let each user update his or her
local copy, you have a major problem distributing updates to the
vendor supplied part of the table. It is virtually impossible to do,
without destroying whatever the user has put into it. A minor nuisance
is that each update requires the user to restart the ISPF session.  A
lot of effort has gone into trying to solve the first problem, without
much success.  And the second problem. has until now remained
unsolved.

BUT - here comes the solution.  As with most good ideas, it is really
very simple.  It takes into account the fact that the ISPF command
table is just that - an ISPF table, although with a reserved name and
specific purpose.  But realizing that it is just another table
immediately made me see that it can be treated as any other ISPF table
- it is open, in storage and modifiable. And it is shared between all
the sessions if you are in split- or multiple screen mode.

There are actually two programs - one that does the update and another
that lists the contents of the command table.  I have also included an
example of how I have used it..

The first program ISPCMDU will update the command table in storage,
giving the user the following immediate benefits:

? The global command table remains intact.  Any changes to that is
reflected to each and every user (who don't have a personal version of
that table) next time they start ISPF.
? Changes are active immediately.
? You can modify the command table at logon time and/or whenever
you choose.

Parameters for ISPCMDU:

  DA(datasetname member)  where to find input. Default member name
  is "ISPCOMND.'.
     QUIET            don't show confirmation message.
     ID(desc)         default description.


The second REXX program ISPCMDL will list the contents of the command
table, optionally in a form suitable as input for the ISPCMDU program.
The latter can then be modified as needed.


So how to do it?

I suggest that something like the following is added to the ISPF
startup, assuming that this is written in REXX.

/* member name ISPCOMND is defaulted by ISPCMDU */

call ispcmdu "da('sys1.common.table')"       /* global modifications */
d="'"sysvar('sysuid')".ispf.ispprof(ispcomnd)'" /* ispprof ds    */
if sysdsn(d) = "OK" then call ispcmdu("da("d")") /* load locals  */

If you wish to make changes later, just edit a command file and issue
the command ISPCMDU. It will automatically detect that is is being run
as an edit macro and load the comnands from the file being edited.
And you don"t even have to save it before running ISPCMDU.


Syntax of the ISPCMDU command file:

? The first character is a delimiter. Any character except "-" may
be used, as the "-" indicates deletion of the command.  It
obviously cannot be one that is part of the command itself. In the
following a "/" is used as the delimiter.
? Lines where the first blank-delimited string (word) is "/*" are
considered comment lines.
? Blank lines are ignored.

The command line format for adding commands is:

/verb/truncation/action/description/

"Verb" is what you write on the command line, 'truncation,' is the
least number of characters to enter (0=no truncation allowed, and it
must be >= 2), "action' is what you wish ISPF to do for you and
'description' is an optional description of the command.

The format for deleting commands is:

-verb

Sample:

/* these are part of my very own ISPF command additions */
/sv   /0/alias save                    /short form of save/

/br   /0/select cmd(%dsbrowse &zparm   /direct browse/
/ed   /0/select cmd(%dsedit &zparm     /direct edit/
