//ZT15$ASM JOB (CDSCB),'CDSCB',CLASS=U,
// MSGCLASS=X,MSGLEVEL=(1,1),NOTIFY=ZT15
//JESDS OUTPUT PAGEDEF=LDUP,FORMDEF=LDUP,JESDS=ALL,FORMS=3H25
//ASM     EXEC PGM=ASMA90,PARM='NODECK,OBJ,RENT'
//STEPLIB   DD DISP=SHR,DSN=SYS1.SASMMOD1
//SYSLIB    DD DISP=SHR,DSN=SYS1.MACLIB
//          DD DISP=SHR,DSN=SYS1.MODGEN
//SYSUT1    DD UNIT=SYSDA,SPACE=(CYL,(5,5))
//SYSPRINT  DD SYSOUT=*,OUTPUT=*.JESDS
//SYSLIN    DD DSN=&&OBJECT,SPACE=(CYL,(9,9)),UNIT=SYSDA,
//             DISP=(NEW,PASS),
//             DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS)
//SYSIN     DD *
         TITLE '    C D S C B              '
***********************************************************************
*                                                                     *
*        'CDSCB' TSO COMMAND                                          *
*                                                                     *
***********************************************************************
         SPACE
*        WRITTEN BY. BILL GODFREY, PRC (PLANNING RESEARCH CORPORATION).
*        INSTALLATION. PRC COMPUTER CENTER, MCLEAN VA.
*        DATE WRITTEN. MAY 20 1975.
*        DATE UPDATED. FEBRUARY 12 1982.
*        ATTRIBUTES. RE-ENTRANT, REFRESHABLE, REUSABLE.
*        COMMENTS.
*            THIS TSO COMMAND ALTERS THE CONTENTS OF A
*            FORMAT-1 DSCB IN A VTOC.
*
*            THE DATA SET IS ALLOCATED, THEN THE VTOC OF THE
*            VOLUME CONTAINING IT IS OPENED VIA TYPE-J OPEN.
*            THE DSCB IS READ USING THE DSNAME AS A KEY. THE
*            TTR (BLOCK ADDRESS) OF THE RECORD IS RETURNED BY
*            THE READ.  THE DSCB IS RE-WRITTEN USING THE DSNAME
*            AS THE KEY, WITH THE KEY SEARCH STARTING AT THE
*            TTR ADDRESS FROM THE READ.
*
*            NOTE. UNDER VS2 MVS, A VTOC MAY BE OPENED FOR
*            UPDATE ONLY BY AUTHORIZED PROGRAMS. THEREFORE
*            THIS WILL ABEND WITH A 913-10 UNLESS THE COMMAND
*            CAN BE MADE TO RUN AUTHORIZED BY ONE OF THE FOLLOWING:
*            1)  ADDING CDSCB TO SYS1.PARMLIB(IKJTSOXX) AUTHCMD
*            2)  ADDING CDSCB TO MOD IKJEFTE2 LMOD IKJEFT02
*            3)  WRITE AN SVC AND REPLACE THE 2 'NOPR'
*                INSTRUCTIONS IN THIS PROGRAM WITH THE SVC
*
*            THE EXTERNAL SECURITY MANAGER INTERFACE STREAMLINES CDSCB
*            SECURITY BY PROTECTING THE DATA, NOT THE PROGRAM.  AS
*            SHIPPED, CDSCB REQUIRES THE USER TO HAVE ALTER ACCESS TO
*            THE DATASET.  BASED ON INSTALLATION REQUIREMENTS, THE
*            REQUIRED ACCESS LEVEL CAN BE CHANGED ON THE ATTR=
*            PARAMETER OF THE RACROUTE MACRO.
*
*            04NOV77 - ADDED RECFM, DSORG, CREATE, EXPDT, UNIT
*            09DEC77 - ADDED IMPLEXEC, EXIT12
*            29MAR78 - JFCB+52 SET ON TO PREVENT WRITE-BACK
*            26JUL78 - PREFIXING DONE BY PARSE (USID)
*            22NOV78 - REMOVE LOCATE IF VOL NOT SPEC
*            24NOV78 - ADD CLEAR, PUTLINE, PUTMSG, 2ND BASE REG
*            12OCT79 - ADD GBLB, RESERVE, DEVTYPE FOR LIMCT.
*            14OCT79 - ADD STACK DELETE.
*            10APR80 - USID REMOVED FROM IKJPOSIT FOR SVS/MVT.
*            11APR80 - SHR KEYWORD ADDED.
*            25JUL80 - TESTAUTH ADDED. ASTERISK IN CREATE DATE.
*            01APR81 - ERROR MESSAGE FOR BAD DATES. COMMON EXIT PATH
*                      USING STATUS. MESSAGE IF NOTHING CHANGED.
*                      MORE RECFMS AND DSORGS. REFDT. FORMAT1 DSECT.
*                      ALLOW TO RUN IF UNDER STARTED TASK (TSSO).
*                      WTO MESSAGE WHEN CHANGING EXPDT.
*            20APR81 - RACF/NORACF KEYWORDS ADDED.
*            08MAY81 - MORE RECFMS ADDED (UA UM UT).
*            07JUL81 - CK FOR ASMI USERID INSTEAD OF ASFI.
*            12FEB82 - CHECK DSORG RECFM LRECL BLKSI CREDT
*                      FOR CHANGING TO SAME AS EXISTING VALUE.
*            14NOV97 - EXTERNAL SECURITY MANAGER INTERFACE
*
*            SPECIFYING 'SYSPARM(OS)' TO THE ASSEMBLER WILL CAUSE
*            A VERSION FOR OS/MVT TO BE ASSEMBLED.
*            THE VS ASSEMBLER (OR H ASSEMBLER) MUST BE USED.
         SPACE
         GBLB  &MVS
&MVS     SETB  ('&SYSPARM' NE 'OS')
         EJECT
CDSCB    START
         USING *,R10,R11
         B     @PROLOG-*(,R15)
         DC    AL1(11),CL11'CDSCB   '
         DC    CL16' &SYSDATE &SYSTIME '
@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)  SUBPOOL AND LENGTH
@PROLOG  STM   14,12,12(R13)
         LR    R10,R15             1ST BASE REGISTER
         LA    R11,1(,R10)
         LA    R11,4095(,R11)      2ND BASE REGISTER
         LR    R2,R1
         USING CPPL,R2
         L     R0,@SIZE
         GETMAIN R,LV=(0)
         LR    R9,R1               SET WORKAREA POINTER
         USING @DATA,R9
         SPACE
         LR    R15,R1              POINT TO AREA TO CLEAR
         L     R1,@SIZE            GET LENGTH TO CLEAR
         LA    R0,0(,R1)           CLEAR HIGH ORDER BYTE
         SRDL  R0,8                DIVIDE BY 256
         SRL   R1,24               ISOLATE REMAINDER
         LTR   R0,R0               IS QUOTIENT ZERO
         BZ    CLEARR              YES, GO DO REMAINDER
CLEARQ   XC    0(256,R15),0(R15)   ZERO 256 BYTES
         LA    R15,256(,R15)       INCREMENT ADDRESS
         BCT   R0,CLEARQ           DECREMENT QUOTIENT AND BRANCH
CLEARR   LTR   R1,R1               IS REMAINDER ZERO?
         BZ    CLEARX              YES, BRANCH TO EXIT
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         B     *+10                GO AROUND EXECUTED INST
         XC    0(0,R15),0(R15)     EXECUTED
         EX    R1,*-6              DO THE ABOVE XC
CLEARX   EQU   *
         SPACE
         ST    R13,4(,R9)
         ST    R9,8(,R13)
         LR    R13,R9
         SPACE
         MVC   SIZE,@SIZE
         EJECT
************************************************************
*                                                          *
*        SET UP IOPL FOR PUTLINE                           *
*                                                          *
************************************************************
         SPACE
PROCEED  LA    R15,MYIOPL
         USING IOPL,R15
         MVC   IOPLUPT(4),CPPLUPT
         MVC   IOPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,IOPLECB
         XC    MYECB,MYECB
         LA    R0,MYPTPB
         ST    R0,IOPLIOPB
         DROP  R15
         SPACE
         AIF   (NOT &MVS).SKIP2
         L     R15,16              LOAD CVT POINTER
         TM    444(R15),X'80'      IS PUTLINE LOADED? (VS2)
         BNO   PUTLOAD             NO - BRANCH TO LOAD
         L     R15,444(,R15)       YES - USE CVTPUTL
         B     PUTLOADX            BRANCH AROUND LOAD
.SKIP2   ANOP
PUTLOAD  LA    R0,=CL8'IKJPUTL '
         LOAD  EPLOC=(0)
         LR    R15,R0              GET ENTRY ADDRESS
         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE
PUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS
         EJECT
************************************************************
*                                                          *
*        SET UP PPL FOR PARSE                              *
*                                                          *
************************************************************
         SPACE
         LA    R15,MYPPL
         USING PPL,R15
         MVC   PPLUPT(4),CPPLUPT
         MVC   PPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,PPLECB
         XC    MYECB,MYECB
         LA    R0,PCLADDR
         ST    R0,PPLPCL
         LA    R0,MYANS
         ST    R0,PPLANS
         MVC   PPLCBUF(4),CPPLCBUF
         ST    R9,PPLUWA
         DROP  R15                 PPL
         SPACE 1
************************************************************
*                                                          *
*        CALL THE PARSE SERVICE ROUTINE                    *
*                                                          *
************************************************************
         SPACE 1
         LR    R1,R15              POINT TO PPL
         AIF   (NOT &MVS).SKIP3
         L     R15,16              CVTPTR
         TM    524(R15),X'80'      IF HI ORDER BIT NOT ON
         BNO   PARSELNK               THEN DO LINK, NOT CALL
         L     R15,524(,R15)       CVTPARS
         BALR  R14,R15             CALL IKJPARS
         B     PARSEEXT            SKIP AROUND LINK
PARSELNK EQU   *
.SKIP3   ANOP
         LINK  EP=IKJPARS,SF=(E,LINKAREA)
PARSEEXT EQU   *
         SPACE 1
         LTR   R15,R15
         BNZ   PARSERR
         EJECT
         L     R12,MYANS
         USING IKJPARMD,R12
         SPACE
************************************************************
*                                                          *
*        PROCESS THE 'ZAP' PARAMETER'                      *
*                                                          *
************************************************************
         SPACE
         CLI   ZAPKW+1,0           ZAP SPECIFIED?
         BE    NOREP               NO - BRANCH
         TM    REP+6,X'80'         ZAP SPECIFIED?
         BZ    NOREP
         CLI   REP+8,X'FF'         ONLY ONE REP PARAMETER?
         BE    INVREP              YES - ERROR - BRANCH
         MVC   OFFSET(5),=XL5'00'
         LA    R1,OFFSET
         CLI   REP+5,4
         BE    MOVEOFF
         CLI   REP+5,2
         BNE   INVREP              OFFSET MUST BE 2 OR 4 CHARS
         LA    R1,OFFSET+1
MOVEOFF  L     R14,REP             REG 14 --> OFFSET
         LH    R15,REP+4           REG 15  =  LENGTH (2 OR 4)
         BCTR  R15,0
         B     *+10
         MVC   0(0,R1),0(R14)      MOVE 1ST REP TO OFFSET
         EX    R15,*-6
         SPACE
         LH    R0,REP+4
         SRL   R0,1                CUT LENGTH IN HALF
         BAL   R14,PACK            CONVERT TO BINARY
         CLI   OFFSET+1,44+1       OFFSETS START WITH X'2D'
         BL    REPOERR             IF LESS ISSUE MESSAGE
         SPACE
         L     R6,REP+8            REG 6 --> NEXT PDE IN LIST (VER DATA
         L     R14,0(,R6)          REG 14 --> VERDATA
         LH    R15,4(,R6)          REG 15  =  LENGTH
         BCTR  R15,0
         B     *+10
         MVC   VERDATA+1(0),0(R14) MOVE 2ND REP TO VERDATA
         EX    R15,*-6
         LH    R0,4(,R6)
         SRL   R0,1                CUT LENGTH IN HALF
         BCTR  R0,0
         STC   R0,VERDATA
         LH    R0,4(,R6)
         SRL   R0,1                CUT LENGTH IN HALF
         LA    R1,VERDATA+1
         BAL   R14,PACK
         SR    R14,R14
         IC    R14,VERDATA         R14 = LEN-1 OF VERDATA
         AH    R14,OFFSET
         CH    R14,ENDOFREC        BEYOND END OF RECORD?
         BH    REPVERR             YES - ISSUE MESSAGE
         SPACE
         CLI   8(R6),X'FF'         3RD REP (REPDATA) SPECIFIED?
         MVI   VR,C'V'
         BE    REPX
         L     R6,8(,R6)           REG 6 --> NEXT PDE (REP DATA)
         MVI   VR,C'R'
         L     R14,0(,R6)          REG 14 --> REPDATA
         LH    R15,4(,R6)          R15  =  LENGTH
         BCTR  R15,0
         B     *+10
         MVC   REPDATA+1(0),0(R14) MOVE 3RD REP TO REPDATA
         EX    R15,*-6
         LH    R0,4(,R6)
         SRL   R0,1                CUT LENGTH IN HALF
         BCTR  R0,0
         STC   R0,REPDATA
         LH    R0,4(,R6)
         SRL   R0,1                CUT LENGTH IN HALF
         LA    R1,REPDATA+1
         BAL   R14,PACK
         CLC   VERDATA(1),REPDATA  COMPARE LENGTHS
         BL    REPDERR             VER DATA MUST NOT BE SHORTER
REPX     EQU   *
NOREP    EQU   *
         SPACE
************************************************************
*                                                          *
*        PROCESS THE 'RECFM' KEYWORD                       *
*                                                          *
************************************************************
         SPACE
         LH    R1,RECFM            GET RECFM
         LTR   R1,R1               RECFM SPECIFIED?
         BZ    NOREC               NO - BRANCH
         IC    R14,RECFMTAB(R1)    GET RECFM BITS
         STC   R14,NEWRECFM        SAVE NEW RECFM
         MVI   NEWRECSW,C'R'       SET SWITCH ON
NOREC    EQU   *
         SPACE
************************************************************
*                                                          *
*        PROCESS THE 'BLKSIZE' KEYWORD                     *
*                                                          *
************************************************************
         SPACE
         CLI   BLKKW+1,0           BLKSIZE SPECIFIED?
         BE    NOBLK               NO - BRANCH
         TM    BLK+6,X'80'         VALUE PRESENT?
         BZ    NOBLK               NO - BRANCH
         LH    R14,BLK+4           GET LENGTH
         LTR   R14,R14             LENGTH ZERO?
         BZ    NOBLK               YES - BRANCH
         L     R1,BLK              POINT TO VALUE
         BCTR  R14,0
         B     *+10
         PACK  DOUBLE(8),0(0,R1)
         EX    R14,*-6
         CVB   R1,DOUBLE           GET BINARY VALUE
         C     R1,=F'32767'        TOO LARGE?
         BNH   *+8                 NO - BRANCH
         L     R1,=F'32767'        YES - REDUCE IT
         STH   R1,NEWBLK           SAVE IT
         MVI   NEWBLKSW,C'B'       SET SWITCH ON
NOBLK    EQU   *
         SPACE
************************************************************
*                                                          *
*        PROCESS THE 'LRECL' KEYWORD                       *
*                                                          *
************************************************************
         SPACE
         CLI   LREKW+1,0           LRECL SPECIFIED?
         BE    NOLRE               NO - BRANCH
         TM    LRE+6,X'80'         VALUE PRESENT?
         BZ    NOLRE               NO - BRANCH
         LH    R14,LRE+4           GET LENGTH
         LTR   R14,R14             LENGTH ZERO?
         BZ    NOLRE               YES - BRANCH
         L     R1,LRE              POINT TO VALUE
         BCTR  R14,0
         B     *+10
         PACK  DOUBLE(8),0(0,R1)
         EX    R14,*-6
         CVB   R1,DOUBLE           GET BINARY VALUE
         C     R1,=F'32767'        TOO LARGE?
         BNH   *+8                 NO - BRANCH
         L     R1,=F'32767'        YES - REDUCE IT
         STH   R1,NEWLRE           SAVE IT
         MVI   NEWLRESW,C'L'       SET SWITCH ON
NOLRE    EQU   *
         SPACE
************************************************************
*                                                          *
*        PROCESS THE 'DSORG' KEYWORD                       *
*                                                          *
************************************************************
         SPACE
         LH    R1,DSORG            GET DSORG
         LTR   R1,R1               DSORG SPECIFIED?
         BZ    NODSO               NO - BRANCH
         IC    R14,DSORGTAB(R1)    GET DSORG BITS
         STC   R14,NEWDSORG        SAVE NEW DSORG
         MVI   NEWDSORG+1,0        NEW DSORG PART 2
         MVI   NEWDSOSW,C'R'       SET SWITCH ON
NODSO    EQU   *
         SPACE
************************************************************
*                                                          *
*        PROCESS THE PROTECTION KEYWORDS                   *
*                                                          *
************************************************************
         SPACE
         CLI   PROKW+1,0           ANY PROTECTION KEYWORDS?
         BE    NOPRO               NO - BRANCH
         MVI   NEWPRO0,X'FF'       START WITH NO BITS TO SET OFF
         MVI   NEWPRO1,X'00'              AND NO BITS TO SET ON.
         CLI   PROKW+1,2           'PW' OR 'PWREAD'?
         BH    PRO3                NO - BRANCH
         MVI   NEWPRO0,B'11111011' SET OFF 1 BIT
         MVI   NEWPRO1,B'00010000' SET ON 1 BIT
         B     PROX
PRO3     CLI   PROKW+1,3           'PWWRITE'?
         BNE   PRO4                NO - BRANCH
         MVI   NEWPRO1,B'00010100' SET ON 2 BITS
         B     PROX
PRO4     CLI   PROKW+1,4           'NOPW'?
         BNE   PRO5                NO - BRANCH
         MVI   NEWPRO0,B'11101011' SET OFF 2 BITS
         B     PROX
PRO5     CLI   PROKW+1,5           'RACF'
         BNE   PRO6
         MVI   NEWPRO1,X'40'       SET ON 1 BIT
         B     PROX
PRO6     CLI   PROKW+1,6           'NORACF'
         BNE   NOPRO
         MVI   NEWPRO0,255-X'40'   SET OFF 1 BIT
PROX     MVI   NEWPROSW,C'P'       SET SWITCH ON
NOPRO    EQU   *
         SPACE
************************************************************
*                                                          *
*        PROCESS THE 'ALLOC' KEYWORD                       *
*                                                          *
************************************************************
         SPACE
         CLI   ALLKW+1,0           'ALLOC' SPECIFIED?
         BE    NOALL               NO - BRANCH
         CLI   ALL+1,0             ANY SUBKEYWORDS?
         BE    NOALL               NO - BRANCH
         MVI   NEWALL0,X'FF'       START WITH NO BITS TO SETOFF
         MVI   NEWALL1,X'00'              AND NO BITS TO SETON
         CLI   ALL+1,1             'NONE'?
         BNE   ALL2                NO - BRANCH
         MVI   NEWALL0,B'00111111' SET OFF 2 BITS
         B     ALLX
ALL2     CLI   ALL+1,2             'BLOCKS'
         BNE   ALL3                NO - BRANCH
         MVI   NEWALL0,B'01111111' SET OFF 1 BIT
         MVI   NEWALL1,B'01000000' SET ON 1 BIT
         B     ALLX
ALL3     CLI   ALL+1,3             'TRACKS'
         BNE   ALL4                NO - BRANCH
         MVI   NEWALL0,B'10111111' SET OFF 1 BIT
         MVI   NEWALL1,B'10000000' SET ON 1 BIT
         B     ALLX
ALL4     CLI   ALL+1,4             'CYLINDERS'
         BNE   NOALL               NO - BRANCH
         MVI   NEWALL1,B'11000000' SET ON 2 BITS
ALLX     MVI   NEWALLSW,C'A'       SET ON SWITCH
NOALL    EQU   *
         SPACE
************************************************************
*                                                          *
*        PROCESS THE 'SPACE' PARAMETER                     *
*                                                          *
************************************************************
         SPACE
         CLI   SPAKW+1,0           SPACE SPECIFIED?
         BE    NOSPA               NO - BRANCH
         TM    SPA+6,X'80'         VALUE PRESENT?
         BZ    NOSPA               NO - BRANCH
         LH    R14,SPA+4           GET LENGTH
         LTR   R14,R14             LENGTH ZERO?
         BZ    NOSPA               YES - BRANCH
         L     R1,SPA              POINT TO VALUE
         BCTR  R14,0
         B     *+10
         PACK  DOUBLE(8),0(0,R1)
         EX    R14,*-6
         CVB   R1,DOUBLE           GET BINARY VALUE
         C     R1,=F'32767'        TOO LARGE?
         BNH   *+8                 NO - BRANCH
         L     R1,=F'32767'        YES - REDUCE IT
         ST    R1,NEWSPA           SAVE IT
         MVI   NEWSPASW,C'S'       SET SWITCH ON
NOSPA    EQU   *
         EJECT
************************************************************
*                                                          *
*        PROCESS THE 'CREATE' KEYWORD                      *
*                                                          *
************************************************************
         SPACE
         CLI   CREATEKW+1,0        CREATE SPECIFIED?
         BE    CREATEX             NO - BRANCH
         TM    CREATE+6,X'80'      VALUE PRESENT?
         BZ    CREATEX             NO - BRANCH
         LH    R14,CREATE+4        GET LENGTH
         LTR   R14,R14             LENGTH ZERO?
         BZ    CREATEX             YES - BRANCH
         L     R1,CREATE           POINT TO VALUE
         CLI   0(R1),C'*'          ASTERISK
         BE    CTODAY              YES, BRANCH
         BCTR  R14,0
         B     *+10
         PACK  DOUBLE(8),0(0,R1)
         EX    R14,*-6
         CVB   R15,DOUBLE          GET BINARY VALUE
         LTR   R15,R15             IS IT ZERO?
         BZ    CREOK               YES - BRANCH
         CH    R14,=H'4'           WERE 5 DIGITS SPECIFIED?
         BNE   ERRCDATE            NO - BRANCH TO ERROR (IGNORE)
CREPACK  PACK  DOUBLE(8),0(2,R1)   PACK YY
         CVB   R14,DOUBLE          GET BINARY YY
         SLL   R14,16              00YY0000
         PACK  DOUBLE(8),2(3,R1)   PACK DDD
         CVB   R15,DOUBLE          GET BINARY DDD
         OR    R15,R14             00YY0DDD
CREOK    ST    R15,NEWCRE          SAVE NEW CREATION DATE
         MVI   NEWCRESW,C'C'       SET SWITCH ON
         B     CREATEX
CTODAY   EQU   *
         TIME  BIN
         ST    R1,DOUBLE           STORE 00YYDDDC
         LA    R1,DATE5            POINT TO FAKE OPERAND
         UNPK  0(5,R1),DOUBLE+1(3) YYDDD
         OI    4(R1),C'0'          FIX SIGN BITS
         B     CREPACK             JUMP BACK IN WITH FAKE OPERAND
CREATEX  EQU   *
         EJECT
************************************************************
*                                                          *
*        PROCESS THE 'EXPDT' KEYWORD                       *
*                                                          *
************************************************************
         SPACE
         CLI   EXPDTEKW+1,0        EXPDTE SPECIFIED?
         BE    NOEXP               NO - BRANCH
         TM    EXPDTE+6,X'80'      VALUE PRESENT?
         BZ    NOEXP               NO - BRANCH
         LH    R14,EXPDTE+4        GET LENGTH
         LTR   R14,R14             LENGTH ZERO?
         BZ    NOEXP               YES - BRANCH
         MVC   EXPCH,=C'00000'
         L     R1,EXPDTE           POINT TO VALUE
         BCTR  R14,0
         B     *+10
         PACK  DOUBLE(8),0(0,R1)
         EX    R14,*-6
         CVB   R15,DOUBLE          GET BINARY VALUE
         LTR   R15,R15             IS IT ZERO?
         BZ    EXPOK               YES - BRANCH
         CH    R14,=H'4'           WERE 5 DIGITS SPECIFIED?
         BNE   ERRXDATE            NO - BRANCH TO ERROR (IGNORE)
         MVC   EXPCH,0(R1)         SAVE EXPDT
         PACK  DOUBLE(8),0(2,R1)   PACK YY
         CVB   R14,DOUBLE          GET BINARY YY
         SLL   R14,16              00YY0000
         PACK  DOUBLE(8),2(3,R1)   PACK DDD
         CVB   R15,DOUBLE          GET BINARY DDD
         OR    R15,R14             00YY0DDD
EXPOK    ST    R15,NEWEXP          SAVE NEW EXPIRATION DATE
         MVI   NEWEXPSW,C'C'       SET SWITCH ON
NOEXP    EQU   *
         EJECT
************************************************************
*                                                          *
*        PROCESS THE 'REFDT' KEYWORD                       *
*                                                          *
************************************************************
         SPACE
         CLI   REFDTEKW+1,0        REFDT SPECIFIED?
         BE    REFDTEX             NO - BRANCH
         TM    REFDTE+6,X'80'      VALUE PRESENT?
         BZ    REFDTEX             NO - BRANCH
         LH    R14,REFDTE+4        GET LENGTH
         LTR   R14,R14             LENGTH ZERO?
         BZ    REFDTEX             YES - BRANCH
         L     R1,REFDTE           POINT TO VALUE
         CLI   0(R1),C'*'          ASTERISK
         BE    RTODAY              YES, BRANCH
         BCTR  R14,0
         B     *+10
         PACK  DOUBLE(8),0(0,R1)
         EX    R14,*-6
         CVB   R15,DOUBLE          GET BINARY VALUE
         LTR   R15,R15             IS IT ZERO?
         BZ    REFOK               YES - BRANCH
         CH    R14,=H'4'           WERE 5 DIGITS SPECIFIED?
         BNE   ERRRDATE            NO - BRANCH TO ERROR (IGNORE)
REFPACK  PACK  DOUBLE(8),0(2,R1)   PACK YY
         CVB   R14,DOUBLE          GET BINARY YY
         SLL   R14,16              00YY0000
         PACK  DOUBLE(8),2(3,R1)   PACK DDD
         CVB   R15,DOUBLE          GET BINARY DDD
         OR    R15,R14             00YY0DDD
REFOK    ST    R15,NEWREF          SAVE NEW REFERENCED DATE
         MVI   NEWREFSW,C'C'       SET SWITCH ON
         B     REFDTEX
RTODAY   EQU   *
         TIME  BIN
         ST    R1,DOUBLE           STORE 00YYDDDC
         LA    R1,DATE5            POINT TO FAKE OPERAND
         UNPK  0(5,R1),DOUBLE+1(3) YYDDD
         OI    4(R1),C'0'          FIX SIGN BITS
         B     REFPACK             JUMP BACK IN WITH FAKE OPERAND
REFDTEX  EQU   *
         EJECT
************************************************************
*                                                          *
*        PROCESS THE DSNAME PARAMETER                      *
*                                                          *
************************************************************
         SPACE
         LA    R1,DSN
         L     R8,0(,R1)           R8  -> DSNAME
         LH    R7,4(,R1)           R7  =  LENGTH
         LTR   R7,R7               IS LENGTH ZERO?
         BZ    ERRDSN              YES, WAS (MEMBER) ONLY
         LR    R6,R7
         MVI   DSNAME,C' '
         MVC   DSNAME+1(43),DSNAME
         SLR   R14,R14
         AIF   (&MVS).SKIP4        PREFIX DSNAME WITH USERID
         TM    6(R1),X'40'         IS DSN QUOTED?
         BO    DSNQUOTE
         SPACE
************************************************************
*                                                          *
*        GET THE USERID AND PREFIX THE DSNAME              *
*                                                          *
************************************************************
         SPACE
         L     R15,CPPLPSCB
         USING PSCB,R15
         IC    R14,PSCBUSRL        LENGTH OF PREFIX
         LTR   R14,R14             NOPREFIX
         BZ    DSNQUOTE            SAME AS QUOTED
         LA    R6,1(R14,R6)        R6 = TOTAL LEN
         MVC   DSNAME(7),PSCBUSER
         DROP  R15                 UPT
         LA    R14,DSNAME(R14)
         MVI   0(R14),C'.'         ADD PERIOD
         LA    R14,1(,R14)         PERIOD LENGTH
         B     *+8
.SKIP4   ANOP
DSNQUOTE LA    R14,DSNAME(R14)
         BCTR  R7,0
         B     *+10
         MVC   0(0,R14),0(R8)
         EX    R7,*-6
         STH   R6,DSNAMEL
         EJECT
************************************************************
*                                                          *
*        PROCESS THE VOLUME PARAMETER                      *
*                                                          *
************************************************************
         SPACE
         MVC   WRKUNIT,=CL8' '
         MVC   WRKVOL(6),=CL8' '
         TM    VOL+6,X'80'         VOLUME SPECIFIED?
         BZ    NOVOL               NO - BRANCH
         L     R14,VOL             R14 --> VOLUME
         LH    R15,VOL+4           R15  =  LENGTH
         BCTR  R15,0
         B     *+10
         MVC   WRKVOL(0),0(R14)
         EX    R15,*-6
         SPACE
************************************************************
*                                                          *
*        IF VOLUME SPECIFIED, CHECK FOR UNIT PARAMETER     *
*                                                          *
************************************************************
         SPACE
         TM    UNIT+6,X'80'        UNIT SPECIFIED?
         BZ    NOUNIT              NO - BRANCH
         L     R14,UNIT            POINT TO UNIT NAME
         LH    R15,UNIT+4          LENGTH OF UNIT NAME
         BCTR  R15,0
         B     *+10
         MVC   WRKUNIT(0),0(R14)
         EX    R15,*-6
NOUNIT   EQU   *
NOVOL    EQU   *
         EJECT
************************************************************
*                                                          *
*        CALL DYNAMIC ALLOCATION                           *
*                                                          *
************************************************************
         SPACE
DYNALLOC EQU   *
         LA    R1,MYDAPL
         USING DAPL,R1
         MVC   DAPLUPT(4),CPPLUPT
         MVC   DAPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,DAPLECB
         MVC   DAPLPSCB(4),CPPLPSCB
         LA    R0,MYDAPB
         ST    R0,DAPLDAPB
         SPACE
         XC    MYECB,MYECB
         L     R15,DAPLDAPB
         USING DAPB08,R15
         XC    0(84,R15),0(R15)
         MVI   DA08CD+1,X'08'
         LA    R14,DA08DDN
         MVI   0(R14),X'40'
         MVC   1(23,R14),0(R14)  DD,UNIT,VOL
         MVC   DA08SER(6),WRKVOL
         MVC   DA08UNIT(8),WRKUNIT
         MVC   DA08MNM(16),0(14)
         MVC   DA08ALN(8),0(R14)
         LA    R0,DSNAMEL
         ST    R0,DA08PDSN
         MVI   DA08DSP1,DA08OLD
         CLI   SHRKW+1,0           'SHR' SPECIFIED ?
         BE    *+8                 BRANCH IF NOT
         MVI   DA08DSP1,DA08SHR    'SHR' SPECIFIED
         MVI   DA08DPS2,DA08KEEP
         MVI   DA08DPS3,DA08KEP
         BAL   R14,CALLDAIR
         SPACE
         LTR   R15,R15
         BNZ   DAIRERR
         OI    STATUS,STATA        INDICATE ALLOCATED
         EJECT
************************************************************
*                                                          *
*        SET UP THE DCB                                    *
*                                                          *
************************************************************
         SPACE
         MVC   DCB(DCBLEN),DCBMODEL
         LA    R15,MYDAPB
         LA    R3,DCB
         USING IHADCB,R3
         MVC   DCBDDNAM(8),DA08DDN
         LA    R15,JFCB
         ST    R15,EXLSTD
         MVI   EXLSTD,X'87'
         LA    R15,EXLSTD
         IC    R14,DCBEXLST
         ST    R15,DCBEXLST        SET DCB EXLST=EXLSTD
         STC   R14,DCBEXLST
         SPACE
************************************************************
*                                                          *
*        READ THE JFCB                                     *
*                                                          *
************************************************************
         SPACE
         MVC   RDJFCBD,RDJFCB
         RDJFCB ((R3)),MF=(E,RDJFCBD)
         SPACE
************************************************************
*                                                          *
*        EXTERNAL SECURITY MANAGER INTERFACE               *
*                                                          *
************************************************************
         SPACE
         LA    R8,JFCB             ADDRESS JFCB
         USING INFMJFCB,R8         REFERENCE JFCB
         MVC   AUTHMAC(AUTHLEN),AUTHTEMP  RACROUTE TEMPLATE
         RACROUTE REQUEST=AUTH,         PERFORM AUTHORIZATION CHECKING X
               ATTR=ALTER,                   READ/UPDATE/CONTROL/ALTER X
               ENTITY=DSNAME,                             DATASET NAME X
               VOLSER=JFCBVOLS,                          VOLUME SERIAL X
               WORKA=RACFWORK,                       512 BYTE WORKAREA X
               MF=(E,AUTHMAC)
         LTR   R15,R15             ALLOWED ?
         BNZ   ESMERR              . NO
         DROP  R8                  DEREFERENCE JFCB
         SPACE
************************************************************
*                                                          *
*        DEFER ATTENTION INTERRUPTS                        *
*                                                          *
************************************************************
         SPACE
         MVC   STAXD(20),STAXDEF
         STAX  DEFER=YES,MF=(E,STAXD)
         SPACE
************************************************************
*                                                          *
*        INSTALLATION-DEPENDENT CODE                       *
*        TO GET AROUND ABEND 913-10                        *
*                                                          *
************************************************************
         SPACE
         L     1,16
         L     1,0(,1)
         L     1,4(,1)             R1 --> TCB
         L     4,180(,1)           R4 --> JSCB
         TM    236(4),X'01'        ARE WE AUTHORIZED
         BO    KEY0X               YES, BYPASS AUTHSET
         LA    0,0                 R0 = FUNCTION CODE FOR USER SVC
         LA    15,KEY0A            R15 POINTS TO ROUTINE TO BE CALLED
         NOPR  0                   *** REPLACE WITH USER SVC ***
         B     KEY0B               BRANCH AROUND ROUTINE
KEY0A    OI    236(4),X'01'        SET ON JSCBAUTH
         BR    14                  RETURN TO SVC
KEY0B    OI    STATUS,STATM        INDICATE AUTH HAS BEEN CHANGED
KEY0X    EQU   *
         SPACE
         AIF   (NOT &MVS).SKIP5    TESTAUTH
         TESTAUTH FCTN=1
         LTR   R15,R15
         BNZ   AUTHERR
.SKIP5   ANOP
         SPACE
************************************************************
*                                                          *
*        OPEN THE VTOC                                     *
*                                                          *
************************************************************
         SPACE
         DEVTYPE DCBDDNAM,DEVAREA,DEVTAB
         SPACE
         LH    R1,DEVAREA+10       TRACKS PER CYL
         MH    R1,=H'5'            ASSUME 5 CYLINDER VTOC
         STH   R1,TRACKS
         SPACE
         GETPOOL (R3),2,96
         SPACE
         OI    STATUS,STATG        INDICATE GETPOOL ISSUED
         MVI   JFCB,X'04'
         MVC   JFCB+1(43),JFCB
         OI    JFCB+52,X'08'       DO NOT WRITE BACK      29MAR78
         MVC   OPENJD,OPENJ
         OPEN  ((R3),UPDAT),TYPE=J,MF=(E,OPENJD)
         TM    DCBOFLGS,X'10'
         BZ    OPENERR
         OI    STATUS,STATO        INDICATE OPENED
         EJECT
************************************************************
*                                                          *
*        ENQ ON THE VTOC                                   *
*                                                          *
************************************************************
         SPACE
         L     R1,DCBDEBAD         POINT TO DEB
         L     R1,32(,R1)          POINT TO UCB
         ST    R1,UCBAD            STORE UCB ADDRESS
         MVC   RNAME,28(R1)        MOVE VOLUME TO RNAME
         MVC   QNAME,=CL8'SYSVTOC'
         MVC   RW(RL),R            MOVE MF=L TO WORK AREA
         SPACE
         RESERVE (QNAME,RNAME,E,6,SYSTEMS),RET=HAVE,UCB=UCBAD,MF=(E,RW)
         SPACE
         OI    STATUS,STATQ        INDICATE ENQ ACTIVE
         SPACE
************************************************************
*                                                          *
*        READ THE FORMAT 1 DSCB USING DSNAME AS KEY        *
*                                                          *
************************************************************
         SPACE
         GETBUF (R3),(R4)
         SPACE
         LH    R1,TRACKS
         STH   R1,DCBLIMCT+1
         MVC   READDECB(READL),DECBMODR
         MVC   TTR(3),=X'000001'
         SPACE
         READ  READDECB,DKF,(R3),(R4),'S',DSNAME,TTR,MF=E
         SPACE
         MVI   SYNADSWT,0
         SPACE
         CHECK READDECB
         SPACE
         CLI   SYNADSWT,0          SYNAD EXIT TAKEN?
         BNE   READERR             YES - BRANCH
         L     R4,READDECB+12      R4 --> AREA ADDRESS
         LR    R5,R4
         SH    R5,=H'44'           R5 --> IMAGINARY KEY-DATA AREA
         USING FORMAT1,R5
         SPACE
************************************************************
*                                                          *
*        VERIFY                                            *
*                                                          *
************************************************************
         SPACE
         CLI   VR,0                REP SPECIFIED?
         BE    VRX                 NO - BRANCH
         LR    R1,R5
         AH    R1,OFFSET           R1 --> LOCATION OF VICTIM
         SR    R14,R14
         IC    R14,VERDATA
         B     *+10
         CLC   0(0,R1),VERDATA+1
         EX    R14,*-6             COMPARE VICTIM TO VER DATA
         BNE   VERREJ              NOT EQUAL - REJECT
         SPACE
         CLI   VR,C'R'             WAS REP DATA SPECIFIED?
         BE    REPROUT             YES - BRANCH
         LA    R1,=C'VERIFIED'
         LA    R0,8
         BAL   R14,PUTMSG
         SPACE
         B     VRX
         SPACE
************************************************************
*                                                          *
*        REPLACE                                           *
*                                                          *
************************************************************
         SPACE
REPROUT  IC    R14,REPDATA
         B     *+10
         MVC   0(0,R1),REPDATA+1
         EX    R14,*-6              MOVE REP DATA TO RECORD
         MVI   CHANGED,C'C'         SET CHANGED SWITCH
VRX      EQU   *
         SPACE
         CLI   NEWRECSW,0          RECFM SPECIFIED?
         BE    NURECX              NO - BRANCH
         CLC   DS1RECFM,NEWRECFM   ALREADY THAT
         BE    NURECX              YES - BRANCH
         MVC   DS1RECFM,NEWRECFM   MOVE IN NEW RECFM
         MVI   CHANGED,C'C'        SET SWITCH ON
NURECX   EQU   *
         SPACE
         CLI   NEWDSOSW,0          DSORG SPECIFIED?
         BE    NUDSOX              NO - BRANCH
         CLC   DS1DSORG,NEWDSORG   ALREADY THAT
         BE    NUDSOX              YES, BRANCH
         MVC   DS1DSORG,NEWDSORG   MOVE IN NEW DSORG
         MVI   CHANGED,C'C'        SET SWITCH ON
NUDSOX   EQU   *
         SPACE
         CLI   NEWBLKSW,0          BLKSIZE SPECIFIED?
         BE    NUBLKX              NO - BRANCH
         CLC   DS1BLKL,NEWBLK      ALREADY THAT
         BE    NUBLKX              YES - BRANCH
         MVC   DS1BLKL,NEWBLK      MOVE IN NEW BLKSIZE
         MVI   CHANGED,C'C'        SET SWITCH ON
NUBLKX   EQU   *
         SPACE
         CLI   NEWLRESW,0          LRECL SPECIFIED?
         BE    NULREX              NO - BRANCH
         CLC   DS1LRECL,NEWLRE     ALREADY THAT
         BE    NULREX              YES - BRANCH
         MVC   DS1LRECL,NEWLRE     MOVE IN NEW LRECL
         MVI   CHANGED,C'C'        SET SWITCH ON
NULREX   EQU   *
         SPACE
         CLI   NEWPROSW,0          PROTECTION MODIFIED?
         BE    NUPROX              NO - BRANCH
         MVC   NEWPROSV,DS1DSIND   HOLD A COPY
         NC    DS1DSIND,NEWPRO0    SET REQUIRED BITS OFF
         OC    DS1DSIND,NEWPRO1    SET REQUIRED BITS ON
         CLC   NEWPROSV,DS1DSIND   ANY CHANGE?
         BE    *+8                 NO - LEAVE SWITCH OFF
         MVI   CHANGED,C'C'        YES - SET SWITCH ON
NUPROX   EQU   *
         CLI   NEWALLSW,0          SEC. ALLOCATION ALTERED?
         BE    NUALLX              NO - BRANCH
         MVC   NEWPROSV,DS1SCALO   HOLD A COPY
         NC    DS1SCALO(1),NEWALL0 SET REQUIRED BITS OFF
         OC    DS1SCALO(1),NEWALL1 SET REQUIRED BITS ON
         CLC   NEWPROSV,DS1SCALO   ANY CHANGE?
         BE    *+8                 NO - LEAVE SWITCH OFF
         MVI   CHANGED,C'C'        YES - SET SWITCH ON
NUALLX   EQU   *
         CLI   NEWSPASW,0          SPACE SPECIFIED?
         BE    NUSPAX              NO - BRANCH
         MVC   DS1SCALO+1(3),NEWSPA+1 MOVE IN NEW SPACE
         MVI   CHANGED,C'C'        SET SWITCH ON
NUSPAX   EQU   *
         SPACE
         CLI   NEWCRESW,0          CREATE SPECIFIED?
         BE    NUCREX              NO - BRANCH
         CLC   DS1CREDT,NEWCRE+1   IS IT ALREADY THAT VALUE
         BE    NUCREX              YES, BRANCH
         MVC   DS1CREDT,NEWCRE+1   MOVE IN NEW CREATION DATE
         MVI   CHANGED,C'C'        SET SWITCH ON
NUCREX   EQU   *
         SPACE
         MVI   EXPSW,X'FF'
         CLI   NEWEXPSW,0          EXPDT SPECIFIED?
         BE    NUEXPX              NO - BRANCH
         CLC   DS1EXPDT,NEWEXP+1   IS IT ALREADY THAT VALUE
         BE    NUEXPX              YES, BRANCH
         MVC   DS1EXPDT,NEWEXP+1   MOVE IN NEW EXPIRATION DATE
         MVI   CHANGED,C'C'        SET SWITCH ON
         MVI   EXPSW,1             INDICATE NEW EXPDT
         CLC   NEWEXP+1(3),=AL3(0)
         BNE   *+8
         MVI   EXPSW,0             INDICATE NEW EXPDT ZERO
NUEXPX   EQU   *
         SPACE
         CLI   NEWREFSW,0          REFDT SPECIFIED?
         BE    NUREFX              NO - BRANCH
         CLC   DS1REFD,NEWREF+1    IS IT ALREADY THAT VALUE
         BE    NUREFX              YES, BRANCH
         MVC   DS1REFD,NEWREF+1    MOVE IN NEW REFERENCE DATE
         MVI   CHANGED,C'C'        SET SWITCH ON
NUREFX   EQU   *
         SPACE
         DROP  R5                  FORMAT1
         CLI   CHANGED,0           ANYTHING CHANGED?
         BNE   REWRITE             YES, GO REWRITE THE DSCB
         LA    R1,SAMEMSG
         LA    R0,L'SAMEMSG
         BAL   R14,PUTMSG
         B     EXIT0
SAMEMSG  DC    C'NOTHING CHANGED'
         SPACE
************************************************************
*                                                          *
*        REWRITE THE FORMAT 1 DSCB                         *
*                                                          *
************************************************************
         SPACE
REWRITE  MVC   WRITDECB(WRITEL),DECBMODW
         WRITE WRITDECB,DK,(R3),(R4),,DSNAME,TTR,MF=E
         SPACE
         MVI   SYNADSWT,0
         SPACE
         CHECK WRITDECB
         SPACE
         CLI   SYNADSWT,0          SYNAD EXIT TAKEN?
         BNE   WRITERR             YES - BRANCH
TEMPJUMP EQU   *
         LA    R1,=C'CHANGED'
         LA    R0,7
         BAL   R14,PUTMSG
         SPACE
************************************************************
*                                                          *
*         WRITE A MESSAGE ON THE CONSOLE LOG               *
*                                                          *
************************************************************
         SPACE
         CLI   LOGKW+1,2           NOLOG
         BE    NOLOG
         CLI   EXPSW,X'FF'         WAS EXPDT CHANGED
         BE    NOLOG               NO, BRANCH
         MVC   MSGW(LOGL),LOG
         L     R1,16
         L     R1,0(,R1)
         L     R1,4(,R1)
         L     R1,12(,R1)          TIOT
         LA    R15,MSGW+21
         MVC   0(8,R15),0(R1)      INSERT JOBNAME/USERID IN MESSAGE
         LA    R15,7(,R15)         POINT TO LAST BYTE OF JOBNAME
         CLI   0(R15),C' '
         BNE   *+8
         BCT   R15,*-8
         MVC   2(44,R15),DSNAME
         LA    R15,45(,R15)        POINT TO LAST BYTE OF DSNAME
         CLI   0(R15),C' '
         BNE   *+8
         BCT   R15,*-8
         MVC   2(2,R15),=C'ON'
         AH    R1,40(,R3)          DCBTIOT
         L     R1,16(,R1)          TIOEFSRT-1, PTR TO UCB
         MVC   5(6,R15),28(R1)     UCBVOLI
         MVC   12(5,R15),EXPCH     NEW EXPDT
         WTO   MF=(E,MSGW)
NOLOG    B     EXIT0
         EJECT
************************************************************
*                                                          *
*        THIS ROUTINE IS ENTERED DURING THE 'CHECK' MACRO  *
*        IF AN I/O ERROR OCCURS.                           *
*                                                          *
************************************************************
         SPACE
SYNAD    SYNADAF ACSMETH=BDAM
         MVC   SYNADMSG(78),50(R1)
         MVI   SYNADSWT,X'FF'      INDICATE EXIT TAKEN
         SYNADRLS
         BR    R14
         EJECT
************************************************************
*                                                          *
*        CALL IKJDAIR                                      *
*                                                          *
************************************************************
         SPACE
CALLDAIR EQU   *
         AIF   (NOT &MVS).SKIP6
         L     R15,16              CVTPTR
         TM    X'02DC'(R15),X'80'  IF HI ORDER BIT NOT ON
         BNO   CALLDLNK               THEN DO LINK, NOT CALL
         L     R15,X'02DC'(,R15)   CVTDAIR
         BR    R15                 CALL IKJDAIR (R14 IS SET)
CALLDLNK EQU   *
.SKIP6   ANOP
         ST    R14,CALLDR14
         LINK  EP=IKJDAIR,SF=(E,LINKAREA)
         L     R14,CALLDR14
         BR    R14
         EJECT
************************************************************
*                                                          *
*        PARSE VALIDITY CHECK ROUTINE FOR 'REP' KEYWORD    *
*                                                          *
************************************************************
         SPACE
REPVALCK EQU   *
         USING *,R6
         STM   R14,R12,12(R13)
         LR    R6,R15
         L     R7,0(,R1)           REG 7 --> PDE
         L     R4,0(,R7)           REG 4 --> CHARACTER STRING
         LH    R0,4(,R7)           REG 0  =  LENGTH
         LA    R15,4               RETURN 4 IF CHECK FAILS
         TM    5(R7),X'01'         LENGTH AN EVEN NUMBER?
         BO    VALEXIT             NO - EXIT WITH RC=4
VALLOOP  CLI   0(R4),C'0'          NUMERIC?
         BNL   VALINCR             YES - THIS CHAR OK
         CLI   0(R4),C'F'          IN RANGE A THRU F?
         BH    VALEXIT             NO - EXIT WITH RC=4
VALINCR  LA    R4,1(,R4)           POINT TO NEXT CHAR
         BCT   R0,VALLOOP
         SR    R15,R15             SET RC=0
VALEXIT  L     R14,12(,R13)
         LM    0,12,20(R13)
         BR    R14
         DROP  R6
         EJECT
************************************************************
*                                                          *
*        THIS ROUTINE CONVERTS EXTERNAL HEX TO BINARY HEX  *
*                                                          *
************************************************************
         SPACE
PACK     ST    R14,PACK14
         LR    R15,R1              REG 15 --> SENDING/RECEIVING FIELD
         SR    R14,R14
         IC    R14,0(,R1)          REG 14  =  1ST CHAR
         CLI   0(R1),C'0'          NUMBER OR LETTER
         BNL   *+8                 NUMBER - BRANCH
         LA    R14,57(,R14)        LETTER - CONVERT TO FA-FF
         SLL   R14,4               SHIFT LEFT 4 BITS
         STC   R14,0(,R15)         STORE THE LEFT HALF
         IC    R14,1(,R1)          REG 14  =  2ND CHAR
         CLI   1(R1),C'0'          NUMBER OR LETTER
         BNL   *+8                 NUMBER - BRANCH
         LA    R14,57(,R14)        LETTER - CONVERT
         SLL   R14,28              SHIFT LEFT HALF TO OBLIVION
         SRL   R14,28              SHIFT BACK AGAIN
         STC   R14,1(,R15)         STORE RIGHT HALF
         OC    0(1,R15),1(R15)     'OR' RIGHT HALF OVER LEFT HALF
         LA    R1,2(,R1)           INCREMENT SENDING FIELD
         LA    R15,1(,R15)         INCREMENT RECEIVING FLD
         BCT   R0,PACK+6           LOOP USING LENGTH IN REG 0
         L     R14,PACK14
         BR    R14                 EXIT
         SPACE
         SPACE
************************************************************
*                                                          *
*  UNPACK - CONVERT A FIELD TO HEXADECIMAL.                *
*  REG 1 --> INPUT   REG 15 --> OUTPUT                     *
*  REG 0  =  INPUT LENGTH  (OUTPUT IS TWICE PLUS 1 BLANK)  *
*  REG 14 --> RETURN ADDRESS ( BAL   R14,UNPACK )          *
*                                                          *
************************************************************
         SPACE
UNPACK   UNPK  0(3,R15),0(2,R1)    UNPACK
         TR    0(2,R15),UNPACKT-240
         LA    R15,2(,R15)         INCREMENT OUTPUT PTR
         LA    R1,1(,R1)           INCREMENT INPUT PTR
         BCT   R0,UNPACK           DECREMENT LENGTH, THEN LOOP
         MVI   0(R15),C' '         BLANK THE TRAILING BYTE
         BR    R14                 RETURN TO CALLER
UNPACKT  DC    C'0123456789ABCDEF' TRANSLATE TABLE
         EJECT
************************************************************
*                                                          *
*        ERROR MESSAGES                                    *
*                                                          *
************************************************************
         SPACE
INVREP   LA    R1,INVREPM
         LA    R0,L'INVREPM
         B     ERRMSG
INVREPM  DC    C'MISSING OR INVALID REP PARAMETER'
         SPACE
READERR  EQU   *
WRITERR  LA    R1,SYNADMSG
         LA    R0,78
         B     ERRMSG
         SPACE
REPDERR  LA    R1,REPDERRM
         LA    R0,L'REPDERRM
         B     ERRMSG
REPDERRM DC    CL44'INVALID REP - REP LENGTH EXCEEDS VER LENGTH '
         SPACE
REPOERR  LA    R1,REPOERRM
         LA    R0,40
         B     ERRMSG
REPOERRM DC    CL40'REP OFFSET INVALID - MUST BE AT LEAST 2D'
         SPACE
REPVERR  LA    R1,REPVERRM
         LA    R0,L'REPVERRM
         B     ERRMSG
REPVERRM DC    CL32'REP GOES BEYOND END OF RECORD   '
         SPACE
VERREJ   LA    R1,VERREJM
         LA    R0,L'VERREJM
         B     ERRMSG
VERREJM  DC    CL14'VERIFY REJECT '
         SPACE
LOCERR   LA    R1,LOCERRM
         LA    R0,L'LOCERRM
         B     ERRMSG
LOCERRM  DC    CL22'DATASET NOT IN CATALOG'
         SPACE
DAIRERR  BAL   R14,DAIRFAIL
         B     EXIT12
         SPACE
AUTHERR  LA    R1,AUTHERRM
         LA    R0,L'AUTHERRM
         B     ERRMSG
AUTHERRM DC    C'ENVIRONMENT IS NOT APF AUTHORIZED'
         SPACE
ESMERR   LA    R1,ESMERRM
         LA    R0,L'ESMERRM
         B     ERRMSG
ESMERRM  DC    C'ACCESS DENIED BY EXTERNAL SECURITY MANAGER (ESM)'
         SPACE
OPENERR  LA    R1,OPENERRM
         LA    R0,L'OPENERRM
         B     ERRMSG
OPENERRM DC    CL12'OPEN FAILED '
         SPACE
PARSERR  LA    R1,PARSERRM
         LA    R0,L'PARSERRM
         B     ERRMSG
PARSERRM DC    C'PARSE FAILED'
         SPACE
ERRCDATE LA    R1,CDATERRM
         LA    R0,L'CDATERRM
         B     ERRMSG
CDATERRM DC    C'INVALID CREATE DATE'
         SPACE
ERRXDATE LA    R1,XDATERRM
         LA    R0,L'XDATERRM
         B     ERRMSG
XDATERRM DC    C'INVALID EXPIRATION DATE'
         SPACE
ERRRDATE LA    R1,RDATERRM
         LA    R0,L'RDATERRM
         B     ERRMSG
RDATERRM DC    C'INVALID REFERENCE DATE'
         SPACE
ERRDSN   LA    R1,MSGDSN
         LA    R0,L'MSGDSN
ERRMSG   BAL   R14,PUTMSG
         B     EXIT12
MSGDSN   DC    C'DATA SET NAME MUST NOT CONTAIN MEMBER NAME'
         SPACE
************************************************************
*                                                          *
*        PUTMSG ROUTINE                                    *
*                                                          *
************************************************************
         SPACE
PUTMSG   STM   R14,R1,PUTSAVE
         XC    MYOLD(8),MYOLD
         XC    MYSEG1(4),MYSEG1
         MVC   MYPTPB(12),MODLPTPM
         LA    R14,1               NO. OF MESSAGE SEGMENTS
         ST    R14,MYOLD
         LA    R14,MYSEG1          POINT TO 1ST SEGMENT
         ST    R14,MYOLD+4
         LR    R14,R0              LENGTH IN R0
         LA    R14,4(,R14)         ADD 4
         LA    R15,MYSEG1+4
         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?
         BE    *+16                YES - BRANCH
         LA    R14,1(,R14)         ADD 1 TO LENGTH
         MVI   0(R15),C' '         INSERT LEADING BLANK
         LA    R15,1(,R15)         BUMP POINTER
         STH   R14,MYSEG1
         LR    R14,R0
         BCTR  R14,0
         B     *+10
         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN
         EX    R14,*-6
         LA    R1,MYIOPL
         L     R15,MYPUTLEP
         SPACE
         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))
         SPACE
         LM    R14,R1,PUTSAVE
         BR    R14
         SPACE
************************************************************
*                                                          *
*        PUTLINE ROUTINE                                   *
*                                                          *
************************************************************
         SPACE
PUTLINE  STM   R14,R1,PUTSAVE
         XC    MYSEG1(4),MYSEG1
         MVC   MYPTPB(12),MODLPTPB
         LR    R14,R0              LENGTH IN R0
         LA    R14,4(,R14)         ADD 4
         STH   R14,MYSEG1
         LR    R14,R0
         BCTR  R14,0
         B     *+10
         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN
         EX    R14,*-6
         LA    R1,MYIOPL
         L     R15,MYPUTLEP
         SPACE
         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))
         SPACE
         LM    R14,R1,PUTSAVE
         BR    R14
         SPACE
         PRINT GEN
         EJECT
************************************************************
*                                                          *
*        DYNAMIC ALLOCATION FAILURE ROUTINE                *
*                                                          *
************************************************************
         SPACE
DAIRFAIL ST    R14,MYDFREGS
         LA    R1,MYDFPARM
         ST    R15,MYDFRC
         LA    R15,MYDFRC
         ST    R15,4(,R1)          DFRCP
         LA    R15,MYDAPL
         ST    R15,0(,R1)          DFDAPLP
         SLR   R15,R15
         ST    R15,MYJEFF02
         LA    R15,MYJEFF02
         ST    R15,8(,R1)          DFJEFF02
         LA    R15,1               DFDAIR
         STH   R15,MYDFID
         LA    R15,MYDFID
         ST    R15,12(,R1)         DFIDP
         ST    R2,16(,R1)          DFCPPLP
         LINK  EP=IKJEFF18,SF=(E,LINKAREA)
         L     R15,MYDFRC
         L     R14,MYDFREGS
         BR    R14
         SPACE
         EJECT
************************************************************
*                                                          *
*        CLOSE THE VTOC                                    *
*                                                          *
************************************************************
         SPACE
EXIT12   LA    R15,12
         B     EXIT
EXIT0    SR    R15,R15             RETURN CODE ZERO
EXIT     ST    R15,RC
         TM    STATUS,STATQ        IS ENQ ACTIVE
         BZ    EXITNODQ            NO, SKIP DEQ
         MVC   DW(DL),D            MOVE MF=L TO WORK AREA
         SPACE
         DEQ   (QNAME,RNAME,6,SYSTEMS),RET=HAVE,MF=(E,DW)
         SPACE
         NI    STATUS,255-STATQ    DEQ
EXITNODQ EQU   *
         TM    STATUS,STATO        IS DCB OPEN
         BZ    EXITNOCL            NO, SKIP CLOSE
         FREEBUF (R3),(R4)
         SPACE
         MVC   CLOSED,CLOSE
         CLOSE ((R3)),MF=(E,CLOSED)
         NI    STATUS,255-STATO    CLOSED
EXITNOCL EQU   *
         SPACE
         TM    STATUS,STATG        WAS GETPOOL ISSUED
         BZ    EXITNOFP            NO, SKIP FREEPOOL
         FREEPOOL (R3)
         NI    STATUS,255-STATG    CLOSED
EXITNOFP EQU   *
         SPACE
************************************************************
*                                                          *
*        INSTALLATION-DEPENDENT CODE                       *
*        TO UNDO THE EARLIER INSTALLATION-DEPENDENT CODE   *
*                                                          *
************************************************************
         SPACE
         L     1,16                CVTPTR
         L     1,0(,1)             TCB WORDS
         L     1,4(,1)             CURRENT TCB
         L     4,180(,1)           JSCB
         TM    STATUS,STATM        WAS AUTH CHANGED
         BZ    EXITNOMS            NO, BRANCH
         LA    0,0                 R0 = FUNCTION CODE FOR USER SVC
         LA    15,KEYUA            R15 POINTS TO ROUTINE TO BE CALLED
         NOPR  0                   *** REPLACE WITH USER SVC ***
         B     KEYUB               BRANCH AROUND THE ROUTINE
KEYUA    NI    236(4),X'FE'        SET OFF JSCBAUTH
         BR    14                  RETURN TO SVC
KEYUB    NI    STATUS,255-STATM
EXITNOMS EQU   *
         SPACE
************************************************************
*                                                          *
*        UNALLOCATE VIA DYNAMIC ALLOCATION                 *
*                                                          *
************************************************************
         SPACE
         TM    STATUS,STATA        WAS ALLOCATE DONE
         BZ    EXITNOFR            NO, BYPASS FREE
         LA    R1,MYDAPL
         USING DAPL,R1
         L     14,DAPLECB
         XC    0(4,14),0(14)
         L     15,DAPLDAPB
         DROP  R1
         USING DAPB18,15
         XC    0(40,15),0(15)
         MVI   DA18CD+1,X'18'
         MVC   DA18MNM,=CL8' '
         MVI   DA18DPS2,DA18KEEP
         MVI   DA18CTL,X'00'
         MVC   DA18SCLS(2),=CL8' '
         MVC   DA18JBNM(8),=CL8' '
         MVC   DA18DDN(8),DCBDDNAM
         SPACE
         BAL   R14,CALLDAIR
         NI    STATUS,255-STATA
EXITNOFR EQU   *
         SPACE
************************************************************
*                                                          *
*        FINAL EXIT FROM PROGRAM                           *
*                                                          *
************************************************************
         SPACE
         IKJRLSA MYANS
         CLI   RC+3,0              IS RC ZERO?
         BE    STACKDX             YES, BRANCH
         MVC   MYSTPB(STACKDL),STACKD
         SPACE
         STACK DELETE=ALL,PARM=MYSTPB,MF=(E,MYIOPL)
         SPACE
         TCLEARQ
STACKDX  EQU   *
         SPACE
         L     R15,RC
         LR    R1,R13
         L     R0,SIZE
         L     R13,4(,R13)
         LR    R2,R15
         FREEMAIN R,A=(1),LV=(0)
         LR    R15,R2
         RETURN (14,12),RC=(15)
         SPACE
************************************************************
*                                                          *
*        CONSTANTS                                         *
*                                                          *
************************************************************
         SPACE
         LTORG
         SPACE
*              THE BYTES IN THE FOLLOWING TABLE
*              MUST BE IN THE SAME ORDER AS THE
*              'IKJNAME' ENTRIES IN THE PARSE
*              PCL PARAMETERS.
RECFMTAB DC    X'00'              NO RECFM
         DC    X'80'               F
         DC    X'88'               FS
         DC    X'84'               FA
         DC    X'82'               FM
         DC    X'90'               FB
         DC    X'98'               FBS
         DC    X'94'               FBA
         DC    X'92'               FBM
         DC    X'40'               V
         DC    X'48'               VS
         DC    X'44'               VA
         DC    X'42'               VM
         DC    X'50'               VB
         DC    X'58'               VBS
         DC    X'54'               VBA
         DC    X'52'               VBM
         DC    X'C0'               U
         DC    X'C4'               UA
         DC    X'C2'               UM
         DC    X'E0'               UT
DSORGTAB DC    X'00'
         DC    X'40'               PS
         DC    X'41'               PSU
         DC    X'02'               PO
         DC    X'03'               POU
         DC    X'20'               DA
         DC    X'21'               DAU
         SPACE
MODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L
         SPACE
MODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L
         SPACE
ENDOFREC DC    0H'0',AL2(44+96-1) OFFSET TO LAST BYTE OF RECORD
         PRINT GEN                 LIST DCB SO LIMCT CAN BE ZAPPED
         SPACE
DCBMODEL DCB   DDNAME=DYNAM,DSORG=DA,MACRF=(RKC,WKC),                  X
               BUFL=96,OPTCD=EF,LIMCT=57,                              X
               RECFM=F,BLKSIZE=96,KEYLEN=44,                           X
               EXLST=0,SYNAD=SYNAD
DCBLEN   EQU   *-DCBMODEL
         PRINT GEN
         SPACE
RDJFCB   RDJFCB 0,MF=L
         SPACE
OPENJ    OPEN  0,TYPE=J,MF=L
         SPACE
CLOSE    CLOSE 0,MF=L
         SPACE
READ     READ  DECBMODR,DKF,0,'S','S',0,0,MF=L
READL    EQU   *-DECBMODR
         SPACE
WRITE    WRITE  DECBMODW,DK,0,'S','S',0,0,MF=L
WRITEL   EQU   *-DECBMODW
         SPACE
STAXDEF  STAX  DEFER=YES,MF=L
         SPACE
STAXDEN  STAX  DEFER=NO,MF=L
         SPACE
R        RESERVE (77,88,E,6,SYSTEMS),RET=HAVE,UCB=99,MF=L
RL       EQU   *-R
         SPACE
D        DEQ   (77,88,6,SYSTEMS),RET=HAVE,MF=L
DL       EQU   *-D
         SPACE
LOG      WTO   'CMI000I CDSCB BY                                       +
                                                 ',ROUTCDE=(2),MF=L
LOGL     EQU   *-LOG
*        WTO   'CMI000I CDSCB BY UUUUUUUU TO DSNAME78901234567890123456
*              789012345678901234 ON VVVVVV EEEEE',ROUTCDE=(2),MF=L
         SPACE
STACKD   STACK DELETE=ALL,MF=L
STACKDL  EQU   *-STACKD
         SPACE
AUTHTEMP RACROUTE REQUEST=AUTH,CLASS='DATASET',MF=L
AUTHLEN  EQU   *-AUTHTEMP          RACROUTE MACRO TEMPLATE LENGTH
         SPACE
PCLADDR  DC    0D'0'               END OF CSECT, BEGIN PARSE PCL CSECT
         SPACE
************************************************************
*                                                          *
*        PARSE PCL CSECT AND PDL DSECT                     *
*                                                          *
************************************************************
         PRINT NOGEN
         SPACE
CDSCBPCL IKJPARM
         AIF   (NOT &MVS).SKIP7
DSN      IKJPOSIT DSNAME,USID,PROMPT='DATASET NAME'
.SKIP7   AIF   (&MVS).SKIP8
DSN      IKJPOSIT DSNAME,PROMPT='DATA SET NAME'
.SKIP8   ANOP
SHRKW    IKJKEYWD
         IKJNAME 'SHR'
VOLKW    IKJKEYWD
         IKJNAME 'VOLUME',SUBFLD=VOLSUB
UNIKW    IKJKEYWD
         IKJNAME 'UNIT',SUBFLD=UNISUB
ZAPKW    IKJKEYWD
         IKJNAME 'ZAP',SUBFLD=ZAPSUB
RECKW    IKJKEYWD
         IKJNAME 'RECFM',SUBFLD=RECSF
LREKW    IKJKEYWD
         IKJNAME 'LRECL',SUBFLD=LRESF
BLKKW    IKJKEYWD
         IKJNAME 'BLKSIZE',SUBFLD=BLKSF
DSOKW    IKJKEYWD
         IKJNAME 'DSORG',SUBFLD=DSOSF
PROKW    IKJKEYWD
         IKJNAME 'PW'
         IKJNAME 'PWREAD'
         IKJNAME 'PWWRITE'
         IKJNAME 'NOPW'
         IKJNAME 'RACF'
         IKJNAME 'NORACF'
ALLKW    IKJKEYWD
         IKJNAME 'ALLOC',SUBFLD=ALLSF
SPAKW    IKJKEYWD
         IKJNAME 'SPACE',SUBFLD=SPASF
CREATEKW IKJKEYWD
         IKJNAME 'CREATE',SUBFLD=CRESF
EXPDTEKW IKJKEYWD
         IKJNAME 'EXPDT',SUBFLD=EXPSF
REFDTEKW IKJKEYWD
         IKJNAME 'REFDT',SUBFLD=REFSF
LOGKW    IKJKEYWD
         IKJNAME 'LOG'
         IKJNAME 'NOLOG'
************************************************************
*                                                          *
*        SUBFIELDS                                         *
*                                                          *
************************************************************
VOLSUB   IKJSUBF
VOL      IKJIDENT 'VOLUME',FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=6,    X
               PROMPT='VOLUME SERIAL'
UNISUB   IKJSUBF
UNIT     IKJIDENT 'UNIT',FIRST=ALPHANUM,OTHER=ANY,MAXLNTH=8,           +
               PROMPT='UNIT NAME'
ZAPSUB   IKJSUBF
REP      IKJIDENT 'ZAP PARAMETER',LIST,                                +
               FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=12,               +
               PROMPT='ZAP IN FORMAT OFFSET,VERDATA,REPDATA',          +
               VALIDCK=REPVALCK
RECSF    IKJSUBF
RECFM    IKJKEYWD
         IKJNAME 'F'
         IKJNAME 'FS'
         IKJNAME 'FA'
         IKJNAME 'FM'
         IKJNAME 'FB'
         IKJNAME 'FBS'
         IKJNAME 'FBA'
         IKJNAME 'FBM'
         IKJNAME 'V'
         IKJNAME 'VS'
         IKJNAME 'VA'
         IKJNAME 'VM'
         IKJNAME 'VB'
         IKJNAME 'VBS'
         IKJNAME 'VBA'
         IKJNAME 'VBM'
         IKJNAME 'U'
         IKJNAME 'UA'
         IKJNAME 'UM'
         IKJNAME 'UT'
LRESF    IKJSUBF
LRE      IKJIDENT 'LRECL',                                             +
               FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=5,                  +
               PROMPT='LOGICAL RECORD LENGTH'
BLKSF    IKJSUBF
BLK      IKJIDENT 'BLOCK SIZE',                                        +
               FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=5,                  +
               PROMPT='BLOCK SIZE'
DSOSF    IKJSUBF
DSORG    IKJKEYWD
         IKJNAME 'PS'
         IKJNAME 'PSU'
         IKJNAME 'PO'
         IKJNAME 'POU'
         IKJNAME 'DA'
         IKJNAME 'DAU'
ALLSF    IKJSUBF
ALL      IKJKEYWD
         IKJNAME 'NONE'
         IKJNAME 'BLOCKS'
         IKJNAME 'TRACKS'
         IKJNAME 'CYLINDERS'
SPASF    IKJSUBF
SPA      IKJIDENT 'SECONDARY SPACE AMOUNT',                            +
               FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=4,                  +
               PROMPT='SECONDARY SPACE AMOUNT'
CRESF    IKJSUBF
CREATE   IKJIDENT 'CREATION DATE',ASTERISK,                            +
               FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=5,                  +
               PROMPT='CREATION DATE'
EXPSF    IKJSUBF
EXPDTE   IKJIDENT 'EXPIRATION DATE',                                   +
               FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=5,                  +
               PROMPT='EXPIRATION DATE'
REFSF    IKJSUBF
REFDTE   IKJIDENT 'REFERENCE DATE',ASTERISK,                           +
               FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=5,                  +
               PROMPT='REFERENCE DATE'
         IKJENDP
         SPACE
************************************************************
*                                                          *
*        DSECTS                                            *
*                                                          *
************************************************************
         PRINT GEN
         SPACE
@DATA    DSECT
         DS    18F
SIZE     DS    F
STATUS   DS    F
LINKAREA DS    2F
STATA    EQU   X'80'
STATM    EQU   X'40'
STATG    EQU   X'20'
STATO    EQU   X'10'
STATQ    EQU   X'08'
MYPPL    DS    7F
MYANS    DS    F
MYECB    DS    F                   USED BY PUTLINE ROUTINE
MYIOPL   DS    4F                  USED BY PUTLINE ROUTINE
MYPTPB   DS    3F                  USED BY PUTLINE ROUTINE
MYPUTLEP DS    F                   USED BY PUTLINE ROUTINE
MYOLD    DS    2F                  USED BY PUTLINE ROUTINE
MYSEG1   DS    2H,CL100            USED BY PUTLINE ROUTINE
PUTSAVE  DS    4F                  USED BY PUTLINE ROUTINE
MYSTPB   DS    5F
MYDAPL   DS    5F
MYDAPB   DS    21F
CALLDR14 DS    F
DSNAMEL  DS    H
DSNAME   DS    CL44
RW       DS    4F
QNAME    DS    CL8
RNAME    DS    CL6
UCBAD    DS    F
DW       DS    3F
DEVAREA  DS    5F
TRACKS   DS    H
SYNADMSG DS    0CL78
MSGW     DS    CL100
SYNADSWT DS    C
CHANGED  DS    C
EXPSW    DS    C
EXPCH    DS    CL5
NEWPROSW DS    C
NEWPRO0  DS    C
NEWPRO1  DS    C
NEWPROSV DS    C
NEWBLKSW DS    C
NEWLRESW DS    C
NEWBLK   DS    H
NEWLRE   DS    H
NEWALLSW DS    C
NEWALL0  DS    C
NEWALL1  DS    C
NEWSPASW DS    C
NEWSPA   DS    F
NEWCRESW DS    C
NEWEXPSW DS    C
NEWREFSW DS    C
NEWCRE   DS    F
NEWEXP   DS    F
NEWREF   DS    F
NEWRECSW DS    C
NEWRECFM DS    C
NEWDSOSW DS    CL2
NEWDSORG DS    C
TTR      DS    D
OPEND    DS    F
OPENJD   DS    F
RDJFCBD  DS    F
READDECB DS    7F
WRITDECB DS    7F
CLOSED   DS    F
DCB      DS    0D,XL104
JFCB     DS    0D,XL176
EXLSTD   DS    F
WRKUNIT  DS    CL8
DATE5    DS    0CL5
WRKVOL   DS    CL6
OFFSET   DS    H,CL3
VERDATA  DS    CL14     LENGTH TIED TO MAXLNTH IN IKJPOSIT
REPDATA  DS    CL14     1ST BYTE IS LENGTH, LAST BYTE USED BY 'PACK'
VR       DS    C
PACK14   DS    F
EXTRACTD DS    3F
EXTRACT  DS    2F
STAXD    DS    5F
DOUBLE   DS    D
RC       DS    F
MYDFPARM DS    5F  USED BY DAIRFAIL
MYDFREGS DS    F   USED BY DAIRFAIL
MYDFRC   DS    F   USED BY DAIRFAIL
MYJEFF02 DS    F   USED BY DAIRFAIL
MYDFID   DS    H   USED BY DAIRFAIL
         DS    0D                  DOUBLEWORD ALIGNMENT
RACFWORK DS    CL512               RACF WORKAREA
         DS    0D                  DOUBLEWORD ALIGNMENT
AUTHMAC  EQU   *
         ORG   *+AUTHLEN           RESERVE SPACE FOR RACROUTE MACRO
         DS    0D
@DATAL   EQU   *-@DATA
         SPACE
IHADCB   DSECT
         DS    XL36
DCBEXLST DS    F
DCBDDNAM DS    XL8
DCBDEBAD EQU   *-4,4
DCBOFLGS DS    X
DCBLIMCT EQU   IHADCB+81,3
         SPACE
         IKJCPPL
         SPACE 2
         IKJIOPL
         SPACE 2
         IKJUPT
         SPACE 2
         IKJPSCB
         SPACE 2
         IKJPPL
         SPACE 2
         IKJDAPL
         SPACE 2
         IKJDAP08
         SPACE 2
         IKJDAP18
         SPACE 2
         IEFJFCBN                  JFCB
         SPACE 2
FORMAT1  DSECT
         IECSDSL1 1                FORMAT 1 DSCB
         SPACE 2
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
//LINK    EXEC PGM=HEWL,PARM='MAP,LET,LIST,AC(1),RENT'
//SYSLIN    DD DSN=&&OBJECT,DISP=(OLD,DELETE)
//SYSLMOD   DD DISP=SHR,DSN=SYS1.BBC.LINKLIB(CDSCB) <=== DESTINATION
//SYSUT1    DD UNIT=SYSDA,SPACE=(CYL,(5,5))
//SYSPRINT  DD SYSOUT=*,OUTPUT=*.JESDS
