*---------------------------------------------------------------------*
*                                                                     *
* Name:        REXXWAIT                                               *
*                                                                     *
* Function:    REXX Function to wait for hhmmssth                     *
*                                                                     *
* Syntax:      X=REXXWAIT(hhmmssth)                                   *
*                                                                     *
*              Where:                                                 *
*                                                                     *
*              hhmmssth is:                                           *
*              hh = hours 01 to nn                                    *
*              mm = minutes 00 to 59                                  *
*              ss = seconds 00 to 59                                  *
*              t  = tenths of a second 0-9                            *
*              h  = hundredths of a second 0-9                        *
*                                                                     *
*              Default is to wait for 15 seconds                      *
*---------------------------------------------------------------------*
* Sample REXX Usage:                                                  *
*                                                                     *
*  /* rexx */
*  arg val
*  stime = time()
*  x=rexxwait(val)
*  etime = time()
*  say "Start:" stime "End:" etime "X:" x
*                                                                     *
*---------------------------------------------------------------------*
* Link Edit information:     NON-REENTRANT                            *
*---------------------------------------------------------------------*
* Return Codes:                                                       *
*                                                                     *
*         0    processing has completed successfully                  *
*         8    invalid parm                                           *
*        24    IRXEXCOM bad return code                               *
*                                                                     *
*---------------------------------------------------------------------*
* Author:      Lionel B. Dyck                                         *
*              Kaiser Permanente                                      *
*              Walnut Creek, CA 94 98                                 *
*              (925) 926-5332                                         *
*              Internet: lionel.b.dyck@kp.org                         *
*---------------------------------------------------------------------*
* HISTORY:                                                            *
*                                                                     *
*        07/22/99  -  Created                                         *
*                                                                     *
*---------------------------------------------------------------------*
REXXWAIT CSECT
REXXWAIT AMODE 31
*----------------------------------------------------------*
*        Housekeeping occurs here                          *
*----------------------------------------------------------*
         STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R12,R15             LOAD BASE REG
         USING REXXWAIT,R12        INFORM ASSEMBLER
         B     STARTIT
         DC    CL8'REXXWAIT'
         DC    C'-'
         DC    CL8'&SYSDATE'       COMPILE DATE
         DC    C'-'
         DC    CL8'&SYSTIME'       COMPILE TIME
STARTIT  DS    0H
         SPACE 2
         LA    R0,72+1000          get savearea plus workarea
         GETMAIN R,LV=(0)
         MVI   0(R1),X'00'         MOVE X'00' TO FIRST BYTE
         LR    R2,R1               SAVE POINTER IN EVEN REG
         LA    R4,1(R1)            SET RECEIVING POINTER
         LR    R5,R0               SET RECEIVING LENGTH
         BCTR  R5,R0               DECREMENT LENGTH
         LA    R5,0(R5)            CLEAR HIGH ORDER BYTE
         LA    R3,1                SET SENDING LENGTH
         MVCL  R4,R2               INSTRUCTION PADS WITH X'00'
         ST    R13,4(R1)           SAVE BACK CHAIN
         ST    R1,8(R13)           SET FORWARD CHAIN
         LR    R2,R1               SAVE NEW SAVEAREA ADDRESS
         L     R15,16(R13)         RESTORE REG 15
         ST    R0,16(R13)          SAVE SAVEAREA LENGTH
         LM    R0,R1,20(R13)       RESTORE REGS USED IN GETMAIN
         LR    R13,R2              SET SAVEAREA POINTER
         USING WORK,R13            USING ON WORKAREA VIA R13
         EJECT
*---------------------------------------------------------------------*
*        PROCESS THE INPUT PARAMETER LIST                             *
*---------------------------------------------------------------------*
         LR    R5,R0               -> ENVIRONMENT BLOCK
         ST    R5,ENVBADDR         Save Environment Block Address
         USING ENVBLOCK,R5
         L     R5,ENVBLOCK_IRXEXTE -> EXTERNAL VECTOR TABLE
         DROP  R5
         USING IRXEXTE,R5
         L     R5,IRXEXCOM         LOAD IRXEXCOM EPA
         ST    R5,EXCOM            SAVE IRXEXCOM EPA
         DROP  R5
         LR    R4,R1               -> EFPL
         USING EFPL,R4             ESTABLISH ADDRESSABILITY TO EFPL
         L     R5,EFPLEVAL         -> EVAL BLOCK ADDRESS POINTER
         L     R5,0(0,R5)          -> EVAL BLOCK
         ST    R5,EVALADDR         SAVE IT'S ADDRESS
         L     R4,EFPLARG          -> ARGUMENT LIST
         DROP  R4
*
         LTR   R4,R4               ANY ARGUMENT LIST ?
         BZ    SETDEF              NO
*
         USING ARGTABLE_ENTRY,R4   ESTABLISH ADDRESSABILITY TO ARG
         CLC   =8X'FF',ARGTABLE_ARGSTRING_PTR  ANY REAL ARGUMENTS
         BE    SETDEF              NO - SO EXIT
         L     R2,ARGTABLE_ARGSTRING_PTR    -> ARGUMENT
         L     R3,ARGTABLE_ARGSTRING_LENGTH LOAD LENGTH
         C     R3,=F'08'           Test length
         BNE   EXIT8               Invalid parm
         BCTR  R3,R0               LESS 1 FOR MVC
         EX    R3,MOVETIME         MOVE THE TIME
         B     START
SETDEF   MVC   WAITTIME(8),=CL8'00001500'
         EJECT
*---------------------------------------------------------------------*
*        INITIALIZE ALL WORK AREAS FROM OUR CONSTANTS                 *
*---------------------------------------------------------------------*
START    DS    0H
*
         STIMER WAIT,DINTVL=WAITTIME
         SPACE 2
         B     EXIT0
         EJECT
*---------------------------------------------------------------------*
*        ALL OF THE EXIT ROUTINES FOLLOW                              *
*---------------------------------------------------------------------*
SETRC    DS    0H
         L     R11,EVALADDR
         USING EVALBLOCK,R11
         MVC   EVALBLOCK_EVLEN(4),=A(2)
         MVC   EVALBLOCK_EVDATA(2),RC
         DROP  R11
         SPACE 2
         LR    R1,R13              GET SAVEAREA ADDRESS
         L     R13,4(R13)          GET BACK CHAIN POINTER
         L     R0,16(R13)          GET SAVEAREA LENGTH
         ST    R15,16(R13)         SAVE REGISTER 15 (RETCODE)
         FREEMAIN R,LV=(0),A=(1)   FREE SAVEAREA
         LM    R14,R12,12(R13)     RESTORE CALLERS REGS
         LA    R15,0                                        $1/95$
         BR    R14
*---------------------------------------------------------------------*
EXIT0    DS    0H
         MVC   RC,=C'00'           SET RC TO ZERO
         B     SETRC
EXIT8    DS    0H
         MVC   RC,=C'08'           SET RC TO 8
         B     SETRC
EXIT24   DS    0H
         MVC   RC,=C'24'           SET RC
         B     SETRC
         EJECT
*---------------------------------------------------------------------*
*        EXECUTED INSTRUCTIONS                                        *
*---------------------------------------------------------------------*
MOVETIME MVC   WAITTIME(0),0(R2)       ** EXECUTED
         SPACE 2
*---------------------------------------------------------------------*
*        LITERAL POOL                                                 *
*---------------------------------------------------------------------*
         LTORG
         space 2
*---------------------------------------------------------------------*
*        WORK AREA DSECTS                                             *
*---------------------------------------------------------------------*
WORK     DSECT
SAVE     DS    18F
EVALADDR DS    F
EXCOM    DS    A                   ADDRESS OF IRXEXCOM LOAD MODULE
ENVBADDR DS    A                   Environment Block Address
WAITTIME DS    CL8                 Time value
RC       DS    XL2                 RETURN CODE
         EJECT
         IRXEFPL DSECT=YES
         EJECT
         IRXARGTB
         EJECT
         IRXSHVB
         EJECT
         IRXEVALB
         EJECT
         IRXEXTE
         EJECT
         IRXENVB
         EJECT
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END   ,
