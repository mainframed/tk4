DCMINPUT CSECT
DCMINPUT AMODE 31
DCMINPUT RMODE 24
         $BOX   HDR='DCMINPUT - ',TITLE='DSECTS'
         $DAB
         EJECT
         $STATSD
         EJECT
         $UCMBS
         PRINT  NOGEN
         $IOB
         $CCW
         $DCB
         PRINT  GEN
         $ERRCODE
         EJECT
*
*  3270 Write Sequence ---
*    Local  - WCC, (SBA, CUR1, CUR2, SF, ATTR, DATA)
*             (ALWAYS USE LOCAL SEQUENCE FROM TSO)
*    Remote - ESC, CMD, WCC, (SBA, CUR1, CUR2, SF, ATTR, DATA)
*
*  ESC - X'27'
*  CMD - X'F1' - Write (default)        (CCW X'01')
*        X'F5' - Erase/Write            (CCW X'05')
*  WCC - X... ....  - set to make a valid character
*        .1.. ....  - always one
*        ..XX ....  - printout format
*        .... 1...  - start printer
*        .... .1..  - sound alarm
*        .... ..1.  - keyboard restore (reset inout inhibited and AID)
*        .... ...1  - reset MDT bits
* SBA - X'11' - Set Buffer Address
* Attribute charaacter --
*        X... ....  - set to make a valid character
*        .1.. ....  - always one
*        ..1. ....  - protected
*        ..11 ....  - auto skip (protected numeric)
*        ...1 ....  - numeric
*        .... 00..  - display/not selector-pen detectable
*        .... 01..  - display/selector-pen detectable
*        .... 10..  - intensified display/selector-pen detect.
*        .... 11..  - nondisplay,nonprint,nondetect.
*        .... ..0.  - reserved must be 0
*        .... ...M  - 1 = field modified/0 = not modified
*
* AID codes: x'60' - unsolicited read   (read modified)
*            x'E8' - printer            (read modified)
*            x'7d' - enter key          (read modified)
*   x'F1' to x'F9' - pf1 to pf9         (read modified)
*            x'7A' - pf10               (read modified)
*            x'7B' - pf11               (read modified)
*            x'7C' - pf12               (read modified)
*            x'E6' - oper id card rdr   (read modified)
*            x'7E' - selector-pen       (read modified)
*            x'6C' - pa1                (short read) (tso attn)
*            x'6E' - pa2 (cncl)         (short read)
*            x'6B' - pa3                (short read)
*            x'6D' - clear key          (short read)
* (no AID)   x'F0' - test req           (test request read) x'016c6102'
*                                       followed by data (no aid,cur)
*
*  TPUT/TGET ---
*    R0 - Length
*    R1 - flags / buffer address
*        1... ....  - TGET
*        .xx. ....  - reserved
*        ...1 ....  - nowait
*        .... 1...  - hold
*        .... .1..  - break
*        .... ..00  - edit
*        .... ..01  - asis
*        .... ..10  - control
*        .... ..11  - fullscr
*
* Return Codes --- TGET
* 00  - all ok, R1 = input length
* 04  - nowait and no input was available
* 08  - attention interupt occured during TGET
* 0c  - buffer not large enougth (next TGET will get next chunk)
* 10  - invalid parms
* 14  - terminal disconnected
*              --- TPUT
* 00  - all ok
* 04  - nowait and no buffers available
* 08  - attention interupt occured during TPUT
* 0c  - TPUT with tjid refused by user
* 10  - invalid parms
* 14  - terminal disconnected
*
         $BOX  'INITIALIZATION',TITLE='INITIALIZATION'
DCMINPUT CSECT
         $MODID BR=YES
         STM   R14,R12,12(R13)
         LR    R12,R15
         USING DCMINPUT,R12
         USING DAB,R11
                                       SPACE
         LA    R10,72(,R13)
         ST    R13,4(,R10)
         ST    R10,8(,R13)
         LR    R13,R10
                                       SPACE
         XC    D_INPUT(L'D_INPUT),D_INPUT  CLEAR INPUT AREA
         LA    R1,D_INPUT              R1 -> INPUT AREA
         LA    R0,L'D_INPUT            R0 =  LENGTH
         O     R1,TGETFLG              INDICATE TGET + EDIT
                                       SPACE
         TGET  (1),(0),R
                                       SPACE
         LTR   R15,R15                 EVERYTHING OK?
         BNZ   BAD_TGET                No..show TGET error
                                       SPACE
         LTR   R10,R1                  R1 = LENGTH
         BZ    DONE
                                       SPACE
         BCTR  R10,0                   Length - 1
         LA    R8,D_INPUT
         LA    R9,D_INPUT(R10)         LAST CHARACTER
         LA    R0,L'D_INPUT
                                       SPACE
SCAN_BLANK     EQU *
         CLI   0(R8),C' '              SCAN OFF BLANKS
         BNE   SEARCH_LAST
         LA    R8,1(,R8)
         BCT   R0,SCAN_BLANK
                                       SPACE
         B     DONE                    IF ALL BLANKS, FINISHED
                                       SPACE
SEARCH_LAST    EQU *
         CLI   0(R9),C' '              BLANK
         BNE   FOUND_LAST
         BCTR  R9,0                    DECREMENT
         CR    R9,R8
         BH    SEARCH_LAST             AND CONTINUE
                                       SPACE
FOUND_LAST     EQU *
         NI    IN_FLGS,255-$GENERIC-$AUTO-$RUN
         LA    R0,5                    LENGTH-1 VOLSER
         LR    R7,R9                   R7 -> LAST CHARACTER
         SR    R9,R8                   NEW LENGTH, LESS 1
         EX    R9,UPCASE               UPPER CASE
         CR    R9,R0                   6 CHARS -> POSSIBLE VOLSER
         BE    DO_VOLUME               YES..PROCESS VOLUME
                                       SPACE
         LA    R2,KEYWORDS             POINT AT KEYWORDS
                                       SPACE
TABLKUP        EQU *
         LH    R15,4(,R2)              GET LENGTH
         BCTR  R15,0                   REDUCE FOR EXECUTE
         EX    R15,KEYCLC              COMPARE.. CLC 0(*-*,R8),0(R2)
         BE    FOUND_KEYWD             YES...FOUND A KEYWORD
                                       SPACE
         LA    R2,8(,R2)               NEXT KEYWORD
         CLI   0(R2),X'FF'             AT END?
         BNE   TABLKUP                 AND CONTINUE
                                       SPACE
         XR    R15,R15
         CLI   0(R7),C'X'              DEVICE RANGE?
         BNE   ONE_DEV
                                       SPACE
         OI    IN_FLGS,$GENERIC
         MVI   0(R7),C'0'
                                       SPACE
ONE_DEV  EQU   *
         EX    R9,TESTIT               TEST FOR VALID CHARS
         BNZ   BAD_CHARS
                                       SPACE
         TR    D_INPUT,TRTAB
         EX    R9,PACKIT               PACK INTO WA
         L     R9,WA+4
         SRL   R9,4                    R9 = ENTERED DEV ADDR
         L     R6,D_CU                 R6 = CU BASE ADDR
         L     R7,D_DEVF               R7 = FIRST USED DEVICE
         L     R8,D_DEVL               R8 = LAST  USED DEVICE
         CR    R9,R7
         BL    BAD_DEV
         CR    R9,R8
         BH    BAD_DEV
                                       SPACE
         ST    R9,D_DEV
         SR    R9,R6
         ST    R9,D_DEVOFF
         LA    R8,1
         TM    IN_FLGS,$GENERIC
         BZ    *+4+4
         LA    R8,16
         ST    R8,D_DEV#
         NI    IN_FLGS,255-$ALL        CLEAR ALL FLAG
                                       SPACE
DONE     EQU   *
         L     R13,4(,R13)
         RETURN (14,12),RC=(15)        AND RETURN
                                       SPACE
         $BOX  'KEYWORD ACTIONS',TITLE='KEYWORD ACTIONS'
FOUND_KEYWD    EQU *
         XR    R15,R15
         LH    R14,4+2(,R2)            GET OFFSET
         B     DCMINPUT(R14)           JUNP TO ROUTINE
                                       SPACE
DO_END   EQU   *
         OI    IN_FLGS,$FINI           INDICATE FINISHED
         B     DONE
                                       SPACE
DO_ENDNU EQU   *
         OI    IN_FLGS,$FINI+$NOUPD    INDICATE FINISHED+ NO UPDATE
         B     DONE
                                       SPACE
UPDATE_ON      EQU *
         NI    IN_FLGS,255-$NOUPD      UPDATE HISTORY FILE
         B     DONE
                                       SPACE
UPDATE_OFF     EQU *
         OI    IN_FLGS,$NOUPD          DO NOT UPDATE HISTORY FILE
         B     DONE
                                       SPACE
DELTAP_ON      EQU *
         OI    IN_FLGS,$DELTA          SHORT TERM %
         B     DONE
                                       SPACE
DELTAP_OFF     EQU *
         NI    IN_FLGS,255-$DELTA      LONG TERM %
         B     DONE
                                       SPACE
DELTAR_OFF     EQU *
         OI    IN_FLGS,$HIST           LONG TERM RATES
         B     DONE
                                       SPACE
DELTAR_ON      EQU *
         NI    IN_FLGS,255-$HIST       SHORT TERM RATES
         B     DONE
                                       SPACE
DO_ALL   EQU   *
         L     R9,D_DEVF
         L     R8,D_DEVL
         L     R7,D_CU
         ST    R9,D_DEV
         SR    R8,R9
         LA    R8,1(,R8)
         SR    R9,R7
         ST    R8,D_DEV#
         ST    R9,D_DEVOFF
         OI    IN_FLGS,$ALL            INDICATE ALL
         B     DONE
                                       SPACE
DO_NEXT  EQU   *
         LA    R8,1
         L     R9,D_DEV
         C     R8,D_DEV#
         BE    SET_OFFN
                                       SPACE
         BCTR  R9,0
SET_OFFN LA    R9,1(,R9)
         C     R9,D_DEVL
         BNH   *+4+4
         L     R9,D_DEVF
         ST    R9,D_DEV
         ST    R8,D_DEV#
         S     R9,D_CU
         ST    R9,D_DEVOFF
         NI    IN_FLGS,255-$ALL        CLEAR ALL FLAG
         B     DONE
                                       SPACE
DO_PREV  EQU   *
         LA    R8,1
         L     R9,D_DEV
         C     R8,D_DEV#
         BE    SET_OFFP
                                       SPACE
         A     R9,D_DEV#
SET_OFFP BCTR  R9,0
         C     R9,D_DEVF
         BNL   *+4+4
         L     R9,D_DEVL
         ST    R9,D_DEV
         ST    R8,D_DEV#
         S     R9,D_CU
         ST    R9,D_DEVOFF
         NI    IN_FLGS,255-$ALL        CLEAR ALL FLAG
         B     DONE
                                       SPACE
DO_RUN   EQU   *
         L     R9,D_DEVF
         LA    R8,1
         ST    R9,D_DEV
         ST    R8,D_DEV#
         S     R9,D_CU
         ST    R9,D_DEVOFF
         OI    IN_FLGS,$RUN            INDICATE RUN
         NI    IN_FLGS,255-$ALL        CLEAR ALL FLAG
         B     DONE
                                       SPACE
DO_AUTO  EQU   *
         LA    R7,20                   20 TIMES SHOULD BE ENUFF
         ST    R7,D_REPCNT
         ST    R7,D_REPREM
         OI    IN_FLGS,$AUTO           INDICATE AUTO UPDATE
         B     DONE
                                       SPACE
DO_REPEAT      EQU *
         MVI   0(R8),C'0'
         MVC   WA2,ZEROS
         EX    R9,VALMVN               MOVE IN NUMERICS
         EX    R9,VALCLC               ALL NUMERIC?
         BNE   BAD_CHARS
                                       SPACE
         EX    R9,PACKIT               PACK INTO WA
         CVB   R8,WA
         LA    R7,5
         LTR   R8,R8
         BZ    *+4+2
         LR    R7,R8
         ST    R7,D_REPCNT
         ST    R7,D_REPREM
         OI    IN_FLGS,$AUTO           INDICATE AUTO UPDATE
         B     DONE
                                       SPACE
DO_WAIT        EQU *
         MVI   0(R8),C'0'
         MVC   WA2,ZEROS
         EX    R9,VALMVN               MOVE IN NUMERICS
         EX    R9,VALCLC               ALL NUMERIC?
         BNE   BAD_CHARS
                                       SPACE
         EX    R9,PACKIT               PACK INTO WA
         CVB   R8,WA
         LTR   R7,R8
         BZ    DONE
                                       SPACE
         LA    R0,100
         MR    R6,R0
         ST    R7,D_WAIT
         B     DONE
                                       SPACE
DO_VOLUME      EQU *
         L     R10,D_UCMBS@
         USING UCMBS,R10
         LA    R0,64                   Max 64 devices
                                       SPACE
NEXT_UCB       EQU *
         ICM   R9,B'1111',U_UCB@       Point at UCB
         BZ    BUMP_UCB
                                       SPACE
         CLC   $UCBVOLI(6,R9),D_INPUT  Compare volser's
         BE    FOUND_UCB
                                       SPACE
BUMP_UCB       EQU *
         LA    R10,$UCMBLEN(,R10)      Next UCB entry
         BCT   R0,NEXT_UCB
                                       SPACE
         MVC   D_ERRMSG(L'VOLMSG),VOLMSG     Move prototype emsg
         MVC   D_ERRMSG+L'VOLMSG(6),D_INPUT  Move volume
         LA    R15,$ERR_VOL
         B     DONE
                                       SPACE
FOUND_UCB      EQU *
*        LH    R8,$UCBDEV(,R9)         R8 = device addr
         XR    R8,R8                        Roland Schiradin
         ICM   R8,B'0011',4(R9)             Roland Schiradin
         LA    R7,1                    Only one device
         ST    R8,D_DEV
         ST    R7,D_DEV#
         S     R8,D_CU                 R8 = device offset
         NI    IN_FLGS,255-$ALL        Clear $ALL flag
         ST    R8,D_DEVOFF
         B     DONE
                                       SPACE
BAD_CHARS      EQU *
         MVC   D_ERRMSG(L'BADCMSG),BADCMSG
         LA    R15,$ERR_CHARS
         B     DONE
                                       SPACE
BAD_DEV        EQU *
         MVC   D_ERRMSG(L'BADDMSG),BADDMSG
         LA    R15,$ERR_CHARS
         B     DONE
                                       SPACE
BAD_TGET       EQU *
         LA    R15,100(,R15)           Show TGET error
         B     DONE
                                       SPACE
         $BOX  'KEYWORDS',TITLE='KEYWORDS'
         DS    0D
KEYWORDS EQU   *
         DC    CL4'SH  ',AL2(2),AL2(DELTAP_ON-DCMINPUT)
         DC    CL4'SR  ',AL2(2),AL2(DELTAR_ON-DCMINPUT)
         DC    CL4'LR  ',AL2(2),AL2(DELTAR_OFF-DCMINPUT)
         DC    CL4'LH  ',AL2(2),AL2(DELTAP_OFF-DCMINPUT)
         DC    CL4'ALL ',AL2(3),AL2(DO_ALL-DCMINPUT)
         DC    CL4'N   ',AL2(1),AL2(DO_NEXT-DCMINPUT)
         DC    CL4'P   ',AL2(1),AL2(DO_PREV-DCMINPUT)
         DC    CL4'QN  ',AL2(2),AL2(DO_ENDNU-DCMINPUT)
         DC    CL4'Q   ',AL2(1),AL2(DO_END-DCMINPUT)
         DC    CL4'R   ',AL2(1),AL2(DO_REPEAT-DCMINPUT)
         DC    CL4'W   ',AL2(1),AL2(DO_WAIT-DCMINPUT)
         DC    CL4'AUTO',AL2(4),AL2(DO_AUTO-DCMINPUT)
         DC    CL4'ONL ',AL2(3),AL2(DO_RUN-DCMINPUT)
         DC    CL4'END ',AL2(3),AL2(DO_END-DCMINPUT)
         DC    CL4'NOUP',AL2(4),AL2(UPDATE_OFF-DCMINPUT)
         DC    CL4'UP  ',AL2(2),AL2(UPDATE_ON-DCMINPUT)
         DC    XL4'FFFFFFFF'
         $BOX  'CONSTANTS',TITLE='CONSTANTS'
$UCBDEV  EQU   4
$UCBVOLI EQU   28
TGETFLG  DC    X'80000000'             TGET EDIT
BLANKS   DC    CL8' '
ZEROS    DC    CL8'00000000'
         $BOX  'EXECUTED INSTRUCTIONS'
UPCASE   OC    0(*-*,R8),BLANKS
TESTIT   TRT   0(*-*,R8),VALCHARS
VALMVN   MVN   WA2(*-*),0(R8)
VALCLC   CLC   WA2(*-*),0(R8)
KEYCLC   CLC   0(*-*,R2),0(R8)
PACKIT   PACK  WA,0(*-*,R8)
         $BOX  'TRANSLATE TABLES'
         DS    0D
TRTAB    DC    256AL1(*-TRTAB)
         ORG   TRTAB+C' '
         DC    C'0'                    BLANK -> ZERO
         ORG   TRTAB+C'A'
         DC    X'FAFBFCFDFEFF'
         ORG
VALCHARS DC    256XL1'FF'
         ORG   VALCHARS+C'A'
         DC    XL6'00'                 A-F OK
         ORG   VALCHARS+C'0'
         DC    XL10'00'                0-9 OK
         ORG
BADCMSG  DC    C'Could not recognize keyword. Try again.'
BADDMSG  DC    C'Invalid device'
VOLMSG   DC    C'Control unit does not include volume '
         LTORG
         SPACE 3
         $REGS
         END
