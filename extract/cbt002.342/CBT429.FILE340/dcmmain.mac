DCMMAIN  CSECT
DCMMAIN  AMODE 31
DCMMAIN  RMODE 24
         $BOX   HDR='DCMMAIN - ',TITLE='DSECTS'
         $DAB
         EJECT
         $STATSD
         EJECT
         $UCMBS
         $CMB
         $SSSD
         EJECT
         $MONREC
         $SSRD
         EJECT
         $IOB
         EJECT
         $CCW
         EJECT
         $LRD
         EJECT
         $OPEN
         $DCB
         PRINT  NOGEN
         DCBD   DSORG=(XA,XE),DEVD=DA
         IEZDEB
$DEBNMT  EQU  DEBNMTRK-DEBDASD+DEBBASND-DEBBASIC
$DEBSTH  EQU  DEBSTRHH-DEBDASD+DEBBASND-DEBBASIC
$DEBENH  EQU  DEBENDHH-DEBDASD+DEBBASND-DEBBASIC
$DEBSTC  EQU  DEBSTRCC-DEBDASD+DEBBASND-DEBBASIC
$DEBENC  EQU  DEBENDCC-DEBDASD+DEBBASND-DEBBASIC
$DEBUCB  EQU  DEBUCBAD-DEBDASD+DEBBASND-DEBBASIC
         SPACE
JFCB     DSECT
         IEFJFCBN LIST=NO
         $SCREEN
         PRINT  GEN
         $ERRCODE
         $BOX  'INITIALIZATION',TITLE='INITIALIZATION'
DCMMAIN  CSECT
         $MODID BR=YES
         STM   R14,R12,12(R13)
         LR    R12,R15
         USING DCMMAIN,R12
                                       SPACE
         L     R0,CORESZ               R0 = dynamic core size
         LR    R2,R0                   Save a copy in r2
                                       SPACE
         GETMAIN RU,LV=(0),LOC=BELOW,RELATED=('DAB, MONITOR RECS')
                                       SPACE
         LR    R4,R1
         LR    R5,R2
         XR    R14,R14
         XR    R15,R15                 Yes..i know r15 = 0]]
         MVCL  R4,R14                  Clear area out
                                       SPACE
         LR    R11,R1                  R11 -> DAB ALWAYS
         USING DAB,R11
                                       SPACE
         ST    R13,4(,R11)             Chain
         ST    R11,8(,R13)               those
         LR    R13,R11                     saveareas
                                       SPACE
         $BOX  'CALL DCMINIT'
         L     R15,AINIT               R15 -> DCMINIT
         O     R15,A31BIT              RUN IN 31 BIT
         BASSM R14,R15
                                       SPACE
         LTR   R15,R15
         BNZ   CLEANUP
                                       SPACE
         L     R15,ACLEAR              Clear screen
         BASR  R14,R15
                                       SPACE
         $BOX  'MAIN PROCESSING',TITLE='MAIN PROCESSING'
*   Get  fresh subsystem status and subsystem counts
DCM_LOOP EQU   *
         LA    R14,IOBAREA             R14 ->  IOB
         USING IOB,R14
                                       SPACE
         LA    R15,P2RDC               R15-> RDC CCW
         XR    R0,R0
         ST    R15,IOBCCW
         ST    R0,ECB
                                       SPACE
         EXCP  IOBAREA                 Issue read
                                       SPACE
         L     R0,D_NEW@               Swap
         L     R1,D_OLD@                new
         ST    R0,D_OLD@                 and
         ST    R1,D_NEW@                  old areas
         LR    R10,R1                  Get address of new record
         USING MONREC,R10
                                       SPACE
         WAIT  ECB=ECB                 Waitttttttt
                                       SPACE
         LA    R15,P2PSF
         LA    R9,MON_SSR              R9 -> SSR AREA
         XR    R0,R0
         ST    R9,P2RSD                SAVE IN RSD CCW
         MVI   P2RSD,$RSD
         ST    R15,IOBCCW
         ST    R0,ECB
                                       SPACE
         EXCP  IOBAREA                 Issue read
                                       SPACE
         TIME  BIN
                                       SPACE
         XR    R2,R2
         ST    R1,MON_DTE
         ST    R0,MON_TME
                                       SPACE
         LA    R9,SSSAREA              Sense Subsystem Status area
         USING SSS,R9
                                       SPACE
         ICM   R2,B'0001',SSSDEV#      #Devices returning status
         LA    R3,64
         CR    R2,R3
         BNH   *+4+2
         LR    R2,R3                   Max 64 devices
         ST    R2,D_RSD#
         DROP  R9
                                       SPACE
         STCK  MON_TOD                 Get tod
                                       SPACE
         WAIT  ECB=ECB                 Waitttttttt
                                       SPACE
         L     R0,D_NMB@               Swap
         L     R1,D_OMB@                new
         ST    R0,D_OMB@                 and
         ST    R1,D_NMB@                  old areas
         L     R15,ACMBG               Gather measurement blocks
         BASR  R14,R15
                                       SPACE
         TM    ECB,$IOOK               I/O COMPLETED OK?
         BNO   ERR_IO                  NO
                                       SPACE
         $BOX  'COLLECT DELTA STATISTICS',                             *
               TITLE='COLLECT DELTA STATISTICS'
OFF_LOOP       EQU *
         L     R10,D_NEW@              Restore new area pointer
         XC    DSSR(STATSLEN),DSSR     Clear accumulated deltas
         L     R4,D_RSD#               R4 = # devices in monitor rec
         L     R9,D_OLD@               R9 -> old mon record
         TM    IN_FLGS,$HIST           Long term stats?
         BZ    *+4+4                   No, just delta stats
         L     R9,D_FILE@              R9 -> file record
         LA    R9,MON_SSR-MONREC(,R9)   r9  -> old ssr record
         LA    R10,MON_SSR-MONREC(,R10) r10 -> new ssr record
         LA    R15,X'3F'               UA mask
         L     R0,D_DEV                R0 = start device
         L     R1,D_DEV#               R1 = # devices
         XR    R2,R2                   R2 = UA from SSR
         BCTR  R1,0
         STH   R2,D_DEVST              Clear device status
         AR    R1,R0                   R1 = end device
         NR    R0,R15                  Isolate...
         NR    R1,R15                    unit address
                                       SPACE
NEXT_DEV       EQU *
         LA    R15,X'3F'
         ICM   R2,B'0001',UA-SSR(R10)  R2 = UA
         NR    R2,R15                  UA modulo 64
         CR    R1,R2                   Compare with end UA
         BL    DONE_DEV                Done if higher than end
                                       SPACE
         CR    R0,R2                   Compare with start UA
         BH    BUMP_DEV
         BL    *+4+4+4
         LH    R15,DEVSTAT1-SSR(,R10)  Get device stats
         STH   R15,D_DEVST               and save
         LA    R3,STATSLEN/4           R3 = number of ssr counters
         LA    R6,DSSR                 R6 -> deltas area
         LA    R7,RD#-SSR(,R9)         R7 -> old ssr stats start
         LA    R8,RD#-SSR(,R10)        R8 -> new ssr stats start
                                       SPACE
ACC_STATS      EQU *
         L     R15,0(,R7)              R15 = old counter
         L     R14,0(,R8)              R14 = new counter
         SLR   R14,R15                 R14 = increment
         AL    R14,0(,R6)              Accumulate
         ST    R14,0(,R6)
         LA    R7,4(,R7)               Next old entry
         LA    R8,4(,R8)               Next new entry
         LA    R6,4(,R6)               Next tot entry
         BCT   R3,ACC_STATS
                                       SPACE
BUMP_DEV EQU   *
         LA    R9,96(,R9)              R9 ->  next device (old)
         LA    R10,96(,R10)            R10 -> next device (new)
         BCT   R4,NEXT_DEV             And repeat
                                       SPACE
         $BOX  'COLLECT COUNTERS',                                     *
               TITLE='COLLECT COUNTERS'
DONE_DEV EQU   *
         L     R10,D_NEW@
         XC    CSSR(STATSLEN),CSSR     Clear counters
         L     R4,D_RSD#               R4 = # devices in monitor rec
         LA    R10,MON_SSR-MONREC(,R10) r10 -> new ssr record
                                       SPACE
NEXT_DEVC      EQU *
         LA    R15,X'3F'
         ICM   R2,B'0001',UA-SSR(R10)  R2 = UA
         NR    R2,R15                  UA modulo 64
         CR    R1,R2                   Compare with end UA
         BL    DONE_DEVC               Done if higher than end
                                       SPACE
         CR    R0,R2                   Compare with start UA
         BH    BUMP_DEVC
                                       SPACE
         LA    R3,STATSLEN/4           R3 = number of ssr counters
         LA    R6,CSSR                 R6 -> accums area
         LA    R8,RD#-SSR(,R10)        R8 -> new ssr stats start
                                       SPACE
ACC_STATSC     EQU *
         L     R14,0(,R8)              R14 = new counter
         SRL   R14,7                   Divide by 128   ***
         AL    R14,0(,R6)              Accumulate
         ST    R14,0(,R6)
         LA    R8,4(,R8)               Next new entry
         LA    R6,4(,R6)               Next tot entry
         BCT   R3,ACC_STATSC
                                       SPACE
BUMP_DEVC      EQU  *
         LA    R10,96(,R10)            R10 -> next device (new)
         BCT   R4,NEXT_DEVC            And repeat
                                       SPACE
         DROP  R10
         $BOX  'COLLECT DEVICE TIMES',                                 *
               TITLE='COLLECT DEVICE TIMES'
DONE_DEVC      EQU   *
         XC    D_SAMPC(D_CMBLN),D_SAMPC    Clear MB counters
         L     R10,D_NMB@              R10-> new MB area
         L     R9,D_OMB@               R9 -> old MB area
         L     R8,D_DEV#               R4 = number of devices
         L     R0,D_DEVOFF             Get device offset
         SLL   R0,5                    Each entry 32 bytes
         AR    R10,R0                  Start device offset..new
         AR    R9,R0                   Start device offset..old
         XR    R1,R1                   Accum SAMPC
         XR    R2,R2                   Accum CONNT
         XR    R3,R3                   Accum PENDT
         XR    R4,R4                   Accum DISCT
         L     R0,M00FF                64k mask value
                                       SPACE
NEXT_MB        EQU *
         LH    R15,CMBSAMPC-CMB(,R10)  New sampc
         LH    R14,CMBSAMPC-CMB(,R9)   Old sampc
         NR    R15,R0
         NR    R14,R0
         SLR   R15,R14                 Increment
         NR    R15,R0                  Modulo 64k
         ALR   R1,R15                  Accumulate sampc
                                       SPACE
         L     R15,CMBCONNT-CMB(,R10)  New connt
         L     R14,CMBCONNT-CMB(,R9)   Old connt
         SLR   R15,R14                 Increment
         ALR   R2,R15                  Accumulate connt
                                       SPACE
         L     R15,CMBPENDT-CMB(,R10)  New pendt
         L     R14,CMBPENDT-CMB(,R9)   Old pendt
         SLR   R15,R14                 Increment
         ALR   R3,R15                  Accumulate pendt
                                       SPACE
         L     R15,CMBDISCT-CMB(,R10)  New disct
         L     R14,CMBDISCT-CMB(,R9)   Old disct
         SLR   R15,R14                 Increment
         ALR   R4,R15                  Accumulate disct
                                       SPACE
         LA    R10,$CMBLEN(,R10)       R10-> next cmb
         LA    R9,$CMBLEN(,R9)         R9 -> next cmb
         BCT   R8,NEXT_MB              And repeat
                                       SPACE
         STM   R1,R4,D_SAMPC           Save counters
                                       SPACE
FORM_STATS     EQU *
         L     R15,ASTATS
         BASR  R14,R15                 Gather stats
                                       SPACE
         LTR   R15,R15                 Offline device?
         BZ    DISPLAY                 No..display
                                       SPACE
         TM    IN_FLGS,$RUN            Cycle mode?
         BZ    DISPLAY                 Display if not offline
                                       SPACE
         L     R1,D_DEV                Increment device
         L     R2,D_DEVOFF               and  offset
         LA    R1,1(,R1)
         LA    R2,1(,R2)
         C     R1,D_DEVL               Too far already?
         BH    INPUT                   Yes..ask for more
                                       SPACE
         ST    R1,D_DEV                Update device
         ST    R2,D_DEVOFF               and offset
         B     OFF_LOOP
                                       SPACE
DISPLAY  EQU   *
         L     R15,ADISPLAY
         BASR  R14,R15                 Display
                                       SPACE
         TM    IN_FLGS,$AUTO           Auto mode?
         BO    AUTOMODE                Yes
                                       SPACE
         TM    IN_FLGS,$RUN            Cycle all devices?
         BZ    INPUT                   No..ask for more
                                       SPACE
         L     R1,D_DEV                Update
         L     R2,D_DEVOFF
         LA    R1,1(,R1)
         LA    R2,1(,R2)
         C     R1,D_DEVL
         BH    INPUT
                                       SPACE
         ST    R1,D_DEV
         ST    R2,D_DEVOFF
                                       SPACE
         STIMER WAIT,BINTVL=D_WAIT     Wait
                                       SPACE
         B     OFF_LOOP
                                       SPACE
AUTOMODE       EQU *
         L     R0,D_REPREM             Update
         BCTR  R0,0                      remaining
         ST    R0,D_REPREM                 counts
         LTR   R0,R0
         BNP   RESET_CNT
                                       SPACE
DELAY          EQU *
         STIMER WAIT,BINTVL=D_WAIT     Wait (ensure dur > 0)
                                       SPACE
         B     DCM_LOOP
                                       SPACE
RESET_CNT      EQU *
         L     R0,D_REPCNT
         NI    IN_FLGS,255-$AUTO       Disable auto mode
         ST    R0,D_REPREM
                                       SPACE
INPUT    EQU   *
         L     R15,AINPUT
         BASR  R14,R15                 Read input
                                       SPACE
         LA    R0,100
         CR    R15,R0                  TGET error?
         BH    CLEANUP                 Yes..leave
                                       SPACE
         LTR   R15,R15                 Input error?
         BNZ   DISPLAY                 Yes..show error message
                                       SPACE
         TM    IN_FLGS,$FINI           Done?
         BNO   DCM_LOOP                No..continue
                                       SPACE
         $BOX  'CLEANUP',TITLE='CLEANUP PROCESSING'
CLEANUP  EQU   *
         TM    D_FLG1,$OPENOK          Opened successfully?
         BZ    FREEUP                  No..leave quickly
                                       SPACE
         TM    D_FLG1,$IOERR+$TERMERR  I/o or terminating error?
         BNZ   CLOSEUP                 Yes...close gracefully
                                       SPACE
         TM    IN_FLGS,$NOUPD          Updating history file?
         BO    CLOSEUP                 No..just close and leave
                                       SPACE
         LA    R14,IOBAREA             R14 -> IOB
         USING IOB,R14
                                       SPACE
         L     R0,MON_IDC              R0 = *DCM
         L     R1,MRECLEN              R1 = record length
         L     R2,D_CU                 R2 = cu address
         L     R10,D_NEW@              R10 -> new mon record
         ST    R0,MON_ID-MONREC(,R10)  Save descriptor
         ST    R1,MON_LEN-MONREC(,R10) Save length
         ST    R2,MON_CUA-MONREC(,R10) Save cua
         LA    R9,LRPARM
         USING LRD,R9
                                       SPACE
         MVI   LR_OP,$LR_CA+$LR_FW     Format write
         MVI   LR_AUX,$LR_TLF          Tlf valid
         MVI   LR_COUNT,X'01'          One ccw
         MVI   LR_R,X'00'              Search for r0
         LH    R15,DL1
         ST    R15,P1WCKDD+4           Record size
         LA    R15,8(,R15)             Add count area
         STH   R15,LR_TLF              And save in tlf
         LA    R15,CC1                 R15 -> count area
         XR    R0,R0
         ST    R15,P1WCKDC             Save count addr
         MVI   P1WCKDC,$WCKD
         ST    R10,P1WCKDD             Save data addr
         MVI   P1WCKDD,$WCKD
         MVC   P1RD(8),P1WCKDC         Move wckd count ccw
         MVI   IOBFLAG1,$IOBDC+$IOBCC+$IOBNRL  Set iob flags
         MVI   IOBR,X'00'              Try for record 0
         ST    R0,ECB                  Clear ecb
         LA    R15,P1CCW               Get ccw addr
         ST    R15,IOBCCW              Save in iob
                                       SPACE
         EXCP  IOBAREA                 Blast write
                                       SPACE
         WAIT  ECB=ECB                 Waitttttttt
                                       SPACE
         TM    ECB,$IOOK               I/O SUCCESSFUL?
         BNO   CLOSEUP                 No..close monitor file
                                       SPACE
         LA    R10,MONDCB
         USING IHADCB,R10
                                       SPACE
         LM    R4,R5,CC1               R4,R5 = CCHHR0DD
         SRDL  R4,8+8+8                R4,R5 = MBBCCHHR
         STCM  R4,B'1111',DCBFDAD
         STCM  R5,B'1111',DCBFDAD+4    Last record written
                                       SPACE
         DROP  R9,R10,R14
                                       EJECT
CLOSEUP  EQU   *
         TM    D_FLG1,$CAPTURE
         BZ    CLOSE_MONITOR
                                       SPACE
         LA    R0,CAPDCB
         ST    R0,D_OPN
         MVI   D_OPN,$LAST
                                       SPACE
         CLOSE MF=(E,D_OPN)            Close capture file
                                       SPACE
CLOSE_MONITOR  EQU *
         LA    R0,MONDCB
         ST    R0,D_OPN
         MVI   D_OPN,$LAST
                                       SPACE
         CLOSE MF=(E,D_OPN)            Close monitor file
                                       SPACE
         ICM   R10,B'1111',D_ERROR     Get error
         BNZ   FREEUP
                                       SPACE
         L     R15,ACLEAR              Clear screen
         BASR  R14,R15
                                       SPACE
FREEUP   EQU   *
         L     R13,4(,R13)             Old savearea addr
         L     R10,D_ERROR             Get error
         L     R0,CORESZ               R0 =  gotten core size
                                       SPACE
         FREEMAIN RU,A=(R11),LV=(0)
                                       SPACE
DONE     EQU   *
         LR    R15,R10
         L     R14,12(,R13)
         LM    R0,R12,20(R13)
         BSM   0,R14
                                       SPACE
         $BOX  'ERRORS',TITLE='ERRORS'
ERR_IO   EQU   *
         L     R15,ACLEAR              Clear screen
         BASR  R14,R15
                                       SPACE
         L     R15,AIOERR
         BASR  R14,R15
                                       SPACE
         B     CLEANUP
                                       SPACE
         $BOX  'CONSTANTS',TITLE='CONSTANTS'
         DS    0D
$SRECLEN EQU   64*96                   64 devices; 96 bytes/entry
$MRECLEN EQU   $MONHDLN+$SRECLEN
SRECLEN  DC    A($SRECLEN)
MRECLEN  DC    A($MRECLEN)
CORESZ   DC    A(DABLEN+64*$UCMBLEN+3*$MRECLEN+$SCRNLEN+3*64*$CMBLEN)
                                       SPACE
A31BIT   DC    X'80000000'
M00FF    DC    X'0000FFFF'
WAIT4    DC    F'400'                  4 second wait
AINIT    DC    V(DCMINIT)
ACMBG    DC    V(DCMCMBG)
ASTATS   DC    V(DCMSTATS)
ADISPLAY DC    V(DCMDSPLY)
AINPUT   DC    V(DCMINPUT)
AIOERR   DC    V(DCMIOERR)
ACLEAR   DC    V(DCMCLEAR)
MON_IDC  DC    CL4'*DCM'
         PRINT GEN
         SPACE 3
         $REGS
         END
