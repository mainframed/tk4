/*====REXX===========================================================*/
/*                                                                   */
/*                       DASD UCB TABLE LOOKUP                       */
/*                                                                   */
/*  THIS REXX PROGRAM IS USED TO MAP OUT ALL DASD DEVICE INFORMATION */
/*  FROM MVS UCB TABLE, MAPING MACRO WAS IECDUCBT STORED IN AMODGEN  */
/*                                                                   */
/*===================================================================*/
/*               UCBTBYT WORD AT X'10' OFF INTO UCB                  */
/*  LOCATE UCB:  CVT+X'4E4'(CVTUCBA) POINTS TO THE 1ST UCB ENTRY     */
/*  UCBSTAT   -> UCB+X'03'- X'80'/ONLINE, X'08'/ALLOCATED            */
/*  UCBTBYT   -> UCB+X'10' 4 BYTESLONG                               */
/*   XX...... -> THE 1ST BYTE IS THE MODEL FLAG    (UCBTBYT1)        */
/*   ..XX.... -> THE 2ND BYTE IS THE FEATURE FLAG  (UCBTBYT2)        */
/*               X'0E' TYPE DEVICE TYPE 3380                         */
/*               X'0F' TYPE DEVICE TYPE 3390                         */
/*   ....XX.. -> THE 3RD BYTE MUST BE 20 FOR DASD  (UCBTBYT3)        */
/*               X'80' FOR TAPE DEVICE                               */
/*               X'40' FOR COMMUNICATION DEVICE                      */
/*               X'41' FOR CTC DEVICE                                */
/*               X'20' FOR DASD DEVICE                               */
/*               X'10' FOR DISPLAY DEVICE                            */
/*               X'08' FOR UNIT RECORD DEVICE                        */
/*               X'24' FOR CHARACTER READER DEVICE                   */
/*   ......XX -> THE 4TH BYTE IS THE TYPE TYPE     (UCBTBYT4)        */
/*  UCBMOD    -> UCB+X'3E' 1 BYTE LONG                               */
/*               X'24' FOR DEVICE TYPE 3390-3                        */
/*               X'27' FOR DEVICE TYPE 3390-2                        */
/*               X'26' FOR DEVICE TYPE 3390-1                        */
/*               X'23' FOR DEVICE TYPE 3380-K                        */
/*               X'1B' FOR DEVICE TYPE 3380-E                        */
/*               X'21' FOR DEVICE TYPE 3380-J                        */
/*               X'1C' FOR DEVICE TYPE 3380-D                        */
/*  UCBSTAB   -> UCB+X'22' 1 BYTE LONG                               */
/*               X'40' FOR PACK BEING USED AS PAGE PACK              */
/*               X'10' FOR PRIVATE PACK ATTRIBUTE                    */
/*               X'08' FOR PUBLIC PACK ATTRIBUTE                     */
/*               X'04' FOR STORAGE PACK ATTRIBUTE                    */
/*               X'01' FOR CONTROL VOLUME (CATALOG RESIDES)          */
/*********************************************************************/
ARG      P1 P2                                 /* ALLOW 2 PARM IN    */
CVT      = STORAGE(10,4)                       /* LOAD A(CVT)        */
DCVT     = C2D(CVT)                            /* CONVERT TO DECIMAL */
CLEAR                                          /* CLEAR SCREEN       */
UCB    = STORAGE(D2X(DCVT+X2D(4E4)),4)         /* LOAD A(CVTUCBA)    */
DUCB   = C2D(UCB)                              /* CONVERT TO DECIMAL */
HEADER = ' D E V I C E   A L L O C A T E D '   /* INITIALIZE HEADER  */
HEADER = CENTER(HEADER,80)                     /* CENTERS THE HEADER */
IF   SYSVAR(SYSNEST) = NO THEN                 /* IS INIT FROM TERM  */
     SAY HEADER                                /* PUT OUT HEADER     */
ELSE DO                                        /* DO INITIALIZE      */
        RETD = ''                              /* INIT RETURN DATA   */
        RETC = 0                               /* INIT RETURN COUNT  */
     END                                       /* END OF INIT        */
HEADER = 'DEV VOLSER  TYPE    ADDR   ATTB  ',  /* INIT TITLE LINE-2  */
         'DEV VOLSER  TYPE    ADDR   ATTB '    /*                    */
HEADER = CENTER(HEADER,79)                     /* CENTERS THE HEADER */
IF   SYSVAR(SYSNEST) = NO THEN                 /* IS INIT FROM TERM  */
     SAY HEADER                                /* PUT OUT HEADER     */
HEADER = '=== ====== ====== ======== ====  ',  /* INIT TITLE LINE-2  */
         '=== ====== ====== ======== ==== '    /*                    */
HEADER = CENTER(HEADER,79)                     /* CENTERS THE HEADER */
IF   SYSVAR(SYSNEST) = NO THEN                 /* IS INIT FROM TERM  */
     SAY HEADER                                /* PUT OUT HEADER     */
TOTAL  = 0                                     /* INIT TOTAL COUNTER */
LINEC  = 0                                     /* INIT LINE CONTROL  */
OFFCNT = 0                                     /* INIT OFFLINE COUNT */
ONCNT  = 0                                     /* INIT ON LINE COUNT */
LINE   = ''                                    /* INIT LINE BUFFER   */
DO I = 1 BY 1 UNTIL DUCB = 0
   UCBN   = STORAGE(D2X(DUCB+X2D(04)),2)       /* LOAD UCBNUM ADDR   */
   UCBNX  = STORAGE(D2X(DUCB+X2D(08)),4)       /* LOAD A(UCBNEXT)    */
   UCBSTAT= STORAGE(D2X(DUCB+X2D(03)),1)       /* LOAD UCB STATUS    */
   UCBTYP = STORAGE(D2X(DUCB+X2D(11)),1)       /* LOAD UCBTBYT2 TYPE */
   UCBDEV = STORAGE(D2X(DUCB+X2D(12)),1)       /* LOAD UCBTBYT3 TYPE */
   UCBTYP = STORAGE(D2X(DUCB+X2D(13)),1)       /* LOAD UCBTBYT4 TYPE */
   UCBMOD = STORAGE(D2X(DUCB+X2D(3E)),1)       /* LOAD UCBMOD MODEL  */
   UCBSTAB= STORAGE(D2X(DUCB+X2D(22)),1)       /* LOAD UCB ATTRIBUTE */
   IF   UCBDEV \= '20'X THEN                   /* IS THIS A DASD UCB */
        DO                                     /* NO,                */
           UCB   =  UCBNX                      /* GET NEXT UCB ADDR. */
           DUCB  =  C2D(UCB)                   /* CONVERT TO DECIMAL */
           ITERATE                             /* GO GET NEXT UCB    */
        END                                    /*                    */
   DO                                          /* FIND DEVICE TYPE   */
      IF   UCBTYP = '0E'X      THEN            /* IS THIS A 3380?    */
           TYPE = 3380                         /* YES, SAVE TYPE 3380*/
      ELSE IF   UCBTYP = '0F'X THEN            /* NO, IS IT A 3390?  */
                TYPE = 3390                    /* YES, SAVE TYPE 3390*/
           ELSE TYPE = DASD                    /* ELSE SAVE TYPE DASD*/
      IF   UCBMOD = '23'X        THEN          /* IS IT A 3380-K?    */
           MODEL = '-K'                        /* YES, SAVE MODEL    */
      ELSE IF   UCBMOD = '27'X   THEN          /* IS IT A 3390-2?    */
                MODEL = '-2'                   /* YES, SAVE MODEL    */
      ELSE IF   UCBMOD = '21'X   THEN          /* IS IT A 3380-J?    */
                MODEL = '-J'                   /* YES, SAVE MODEL    */
      ELSE IF   UCBMOD = '1B'X   THEN          /* IS IT A 3380-E?    */
                MODEL = '-E'                   /* YES, SAVE MODEL    */
      ELSE IF   UCBMOD = '24'X   THEN          /* IS IT A 3390-3?    */
                MODEL = '-3'                   /* YES, SAVE MODEL    */
      ELSE IF   UCBMOD = '26'X   THEN          /* IS IT A 3390-1?    */
                MODEL = '-1'                   /* YES, SAVE MODEL    */
      ELSE IF   UCBMOD = '1C'X   THEN          /* IS IT A 3380-D?    */
                MODEL = '-D'                   /* YES, SAVE MODEL    */
           ELSE MODEL = '-?'                   /* ELSE SAVE MODEL ?  */
      UCBN = SUBSTR(C2X(UCBN),2)               /* CONV UCBNUM TO CHAR*/
      VOL = STORAGE(D2X(DUCB+X2D(1C)),6)       /* LOAD UCBVOLI       */
      IF    UCBSTAB = '10'X THEN               /* IS IT A PRI-PACK?  */
            ATTB = PRI ×× ' '                  /* YES, SAVE IT       */
      ELSE  IF    UCBSTAB = '08'X THEN         /* IS IT A PUB-PACK?  */
                  ATTB = PUB ×× ' '            /* YES, SAVE IT       */
      ELSE  IF    UCBSTAB = '04'X THEN         /* IS IT A STO-PACK?  */
                  ATTB = STO ×× ' '            /* YES, SAVE IT       */
      ELSE  IF    UCBSTAB = '50'X THEN         /* IS IT A PAG-PACK?  */
                  ATTB = PAG ×× ' '            /* YES, SAVE IT       */
            ELSE  ATTB = '??? '  THEN          /* ELSE SAVE AS ???   */
      CNTL  = 0                                /* INIT IN-PARM COUNT */
      MATCH = 0                                /* INIT MATCH CONTROL */
      TYPE = TYPE ×× MODEL                     /* CONCAT TYPE/MODEL  */
      IF    LENGTH(P1) > 0 THEN                /* IS IN-PARM1 ENTERED*/
            DO                                 /* YES,               */
               CNTL = CNTL + 1                 /* INCREASE COUNT BY 1*/
               LEN  = LENGTH(P1)               /* FIND PARM1 LENGTH  */
               IF   SUBSTR(TYPE,1,LEN) = P1 ×, /* MATCH DEVICE TYPE? */
                    SUBSTR(UCBN,1,LEN) = P1 ×, /*  OR   UCBNUM?      */
                    SUBSTR(ATTB,1,LEN) = P1 ×, /*  OR   ATTRIB?      */
                    SUBSTR(VOL,1,LEN)= P1 THEN /*  OR   VOLSER?      */
                    MATCH = MATCH + 1          /* YES, INCREASE CNT  */
            END
      IF    LENGTH(P2) > 0 THEN                /* IS IN-PARM2 ENTERED*/
            DO                                 /* YES,               */
               CNTL = CNTL + 1                 /* INCREASE COUNT BY 1*/
               LEN  = LENGTH(P2)               /* FIND PARM2 LENGTH  */
               IF   SUBSTR(TYPE,1,LEN) = P2 ×, /* MATCH DEVICE TYPE? */
                    SUBSTR(ATTB,1,LEN)=P2 THEN /*  OR   ATTRIB?      */
                    MATCH = MATCH + 1          /* YES, INCREASE CNT  */
            END
      IF    CNTL \= MATCH THEN                 /* IS MATCH = CONTROL */
            DO                                 /* NO,                */
               UCB  = UCBNX                    /* SKIP IT            */
               DUCB = C2D(UCB)                 /*   AND GO           */
               ITERATE                         /*     GET NEXT ONE   */
            END                                /*                    */
      IF    SUBSTR(VOL,1,1) \= '00'X THEN      /* IS IT A VALID VOL? */
            DO                                 /* YES, ASSEMBLE THE  */
               TOTAL = TOTAL + 1
               LINEC = LINEC + 1               /*      OUTPUT LINE   */
               LINE  = LINE UCBN VOL TYPE,     /*      AND           */
                       C2X(UCB) ATTB ×× '  '   /*      FORMATS IT    */
               RETD  = RETD ×× VOL ×× TYPE     /*      FORMATS RETURN*/
            END                                /*                    */
      ELSE  OFFCNT = OFFCNT + 1                /* NO, COUNT IT       */
      IF    LINEC = 2 THEN                     /* IS THIS THE 2ND    */
            DO                                 /* YES,               */
               LINE = CENTER(LINE,79)          /*    CENTERS THE LINE*/
               IF   SYSVAR(SYSNEST) = NO THEN  /* IS INIT FROM TERM  */
                    SAY LINE                   /*    PUT OUT THE LINE*/
               LINEC = 0                       /*    RE-INIT BUFFER  */
               LINE = ''                       /*        AND CONTROL */
            END                                /*                    */
   END                                         /*                    */
     UCB  = UCBNX                              /* SWITCH TO NEXT UCB */
     IF   DUCB \= 0  THEN  DUCB = C2D(UCB)     /* IS IT NULL         */
END                                            /*                    */
IF    LINEC > 0 THEN                           /* ANY LEFT OVER?     */
      DO                                       /* YES,               */
         LINE = LEFT(LINE,LENGTH(LINE)*2)      /*    FORMATS IT      */
         LINE = CENTER(LINE,79)                /*    CENTERS IT      */
         IF   SYSVAR(SYSNEST) = NO THEN        /* IS INIT FROM TERM  */
              SAY LINE                         /*    PUT OUT THE LINE*/
      END                                      /*                    */
SAY  ''
TOTAL  = RIGHT(TOTAL,4)
HEADER = 'TOTAL NUMBER OF VOLUME MATCHED = ' ×× TOTAL
HEADER = CENTER(HEADER,79)
IF   SYSVAR(SYSNEST) = NO THEN                 /* IS INIT FROM TERM  */
     SAY HEADER                                /* PUT OUT HEADER     */
OFFCNT = RIGHT(OFFCNT,3)
HEADER = 'TOTAL NUMBER OF VOLUME OFFLINED= ' ×× OFFCNT
HEADER = CENTER(HEADER,79)
IF   SYSVAR(SYSNEST) = NO THEN                 /* IS INIT FROM TERM  */
     DO                                        /* DO LIST PROCESS    */
        SAY HEADER                             /* PUT OUT HEADER     */
        RETURN(0)                              /* RETURN COND=0      */
     END                                       /* END OF LIST PROC   */
ELSE DO                                        /* DO NOLIST PROCESS  */
        RETD = TOTAL ×× RETD                   /* RETURN COUNT/DATA  */
        RETURN(RETD)                           /* RETURN DATA        */
     END                                       /* END OF NOLIST PROC */
