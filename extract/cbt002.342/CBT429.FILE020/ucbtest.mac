/*====REXX===========================================================*/
/*                                                                   */
/*        THIS REXX CALLS AN ASSEMBLY LANGUAGE SUBROUTINE WHICH      */
/*   SCANS THE SYSTEM FOR ALL DASD UCB'S.  THE REXX THEN LISTS THOSE */
/*   DASD VOLUMES THAT ARE ONLINE INCLUDING UNIT NUMBERS AND VOLUME  */
/*   SERIAL NUMBERS.  THE REXX CAN SERVE AS A MODEL TO MAKE A SYSIN  */
/*   DATA SET TO TURN CACHE ON OR OFF FOR ALL VOLUMES ON THE SYSTEM  */
/*   AT A GIVEN TIME.  THIS IS SUPPOSED TO AVOID THE NECESSITY OF    */
/*   MANUALLY MAINTAINING A VOLLUME SERIAL LIST FOR CACHING.         */
/*                                                                   */
/*===================================================================*/

COMM = 'ON'
DO WHILE LENGTH(ARG) > 1
  PARSE UPPER ARG TYPEDEV ARG
  IF ( TYPEDEV = 'ON' ) × ( TYPEDEV = 'OFF' ) THEN COMM = TYPEDEV
  END
TYPEDEV = 'DASD'                        /* WE ONLY WANT DISK UNITS   */

IF COMM = 'ON' THEN DO                  /* SET UP COMMANDS FOR 'ON'  */
  TYPE1 = 'DEV' COMM
  TYPE2 = 'NVS' COMM
  TYPE3 = 'DFW' COMM
  END
ELSE DO                                 /* SET UP COMMANDS FOR OFF   */
  TYPE1 = 'DFW' COMM
  TYPE2 = 'NVS' COMM
  TYPE3 = 'DEV' COMM
  END

SAY 'STARTING REXX TO LIST CURRENTLY ONLINE' TYPEDEV 'VOLUMES.'
COUNT =  0                              /* INITIALIZE LOCAL COUNTERS */
ONLINE = 0
OLDSTR =                                /* AND LOCAL OLD STRING ID   */
HOLDER =
START = '  SETCACHE UNIT('              /* COMMAND PREFIX            */

DO WHILE GETUCB() = 0                   /* PROCESS TIL NO MORE UNITS */
  TEMP = SUBSTR(X,4,1)                  /* LOOK AT 4TH BYTE, UCBSTAT */
  TEMP = C2D(TEMP)                      /* CVT TO HEX DIGITS         */
  COUNT = COUNT + 1                     /* BUMP TOTAL DASD COUNT     */

  IF TEMP > 127 THEN DO                 /* LOOK FOR ONLINE STATUS    */
    UNCODE = C2X(SUBSTR(X,20,1))        /* PICK OUT UNIT TYPE BYTE   */
    IF UNCODE = '0E' THEN UNIT = '3380' /* ASSIGN DASD TYPE          */
    ELSE IF UNCODE = '0F' THEN UNIT = '3390'
    ELSE                       UNIT = '????' /* UNDEFINED            */
    STR = X2D(SUBSTR(X,14,3)) % 32      /* COMPUTE NEW STRING ADDR   */
    IF OLDSTR ^= STR THEN DO            /* IF WE HAVE A NEW STRING   */
      IF COMM = 'ON' THEN DO
        OUT = START ×× UNIT') VOL('SUBSTR(X,29,6)') SUBSYSTEM' COMM
        SAY OUT
        END
      ELSE DO
        IF OLDVOL ^= 'OLDVOL' THEN DO
          HOLDER = HOLDER OLDUN OLDVOL
          END
        OLDVOL = SUBSTR(X,29,6)
        OLDUN = UNIT
        END
      OLDSTR = STR                    /* AND REMEMBER NEW STRING   */
      END
/*                    UCBVOLI                                        */
/*                       ×                                           */
/*                       ×                                           */
/*                      \×/                                          */
    DO I = 1 TO 3                       /* ISSUE ALL COMMANDS        */
      OUT = START ×× UNIT') VOL('SUBSTR(X,29,6)')' VALUE(TYPE××I)
      SAY OUT
      END
    ONLINE = ONLINE + 1                 /* BUMP COUNT OF ITEMS       */
    END
  END
  IF OLDVOL ^= 'OLDVOL' THEN DO
    HOLDER = HOLDER OLDUN OLDVOL
    END
  DO WHILE LENGTH(HOLDER) > 0
    PARSE VAR HOLDER OLDUN OLDVOL HOLDER
    OUT = START ×× OLDUN') VOL('OLDVOL') SUBSYSTEM' COMM
    SAY OUT
    END

COUNT = COUNT -1                         /* ALLOW FOR LAST RETURN    */
SAY COUNT 'UNITS FOUND WITH' ONLINE 'UNITS ONLINE.' /* FINAL COUNT   */

EXIT

/***             E N D   O F   M A I N   R O U T I N E             ***/

/*===================================================================*/
/*                                                                   */
/*        PROCEDURE TO CALL THE UCB ACQUISITION SUBROUTINE AND SET   */
/*   THE RETURN CODE TO ZERO IF ANOTHER UCB WAS RETURNED OR ELSE     */
/*   SETTING THE RETURN CODE TO NON-ZERO IF THE LAST UCB WAS FOUND.  */
/*                                                                   */
/*===================================================================*/

GETUCB: PROCEDURE EXPOSE X COUNT TYPEDEV

CALL UCBSUBR COUNT,X,TYPEDEV          /* CALL SUBROUTINE           */
PARSE VAR RESULT X                    /* PICK UP RESULT (UCB+WORK) */
IF C2X(LEFT(X,2)) = 'FFFF' THEN ,     /* IF THERE WERE NO MORE ... */
  RETURN 4                            /* RETURN A CODE OF 4        */
IF C2X(LEFT(X,2)) = 'FFFE' THEN DO    /* CHECK FOR EROR INDICATOR  */
  SAY SUBSTR(X,3)                     /* AND PRINT ERROR MESSAGE   */
  EXIT                                /* AND EXIT ENTIRELY IF SO   */
  END
RETURN 0                              /* ELSE RETURN A CODE OF 0   */
