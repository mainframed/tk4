/*===================================================================*/
/*                                                                   */
/*        THIS REXX LISTS SOME SUMMARY INFORMATION ABOUT THE SYSTEM  */
/*   IT IS RUN ON SUCH AS THE CPU TYPE AND SERIAL NUMBER, MVS AND    */
/*   JES LEVELS AND MEMORY ONLINE.                                   */
/*                                                                   */
/*===================================================================*/
                                               /*                    */
CVT    = STORAGE(10,4)                         /* LOAD A(CVT)        */
DCVT   = C2D(CVT)                              /* CONVERT TO DECIMAL */
PCCA   = STORAGE(208,4)                        /* LOAD A(PSAPCCAV)   */
DPCCA  = C2D(PCCA)                             /* CONVERT TO DECIMAL */
CVTPFX = DCVT - X2D(100)                       /* ADDR CVTFIX        */
CPUDATA= STORAGE(C2X(D2C(DPCCA+X2D(04))),12)   /* XTRACT CPU DATA    */
CPUVER = SUBSTR(CPUDATA,1,2)                   /* FORMAT CPU VERSION */
CPUSER = 0 ×× SUBSTR(CPUDATA,4,5)              /* FORMAT CPU SERIAL  */
CPUTYPE= SUBSTR(CPUDATA,9,4)                   /* FORMAT CPU MODEL   */
SYSAD  = STORAGE(C2X(D2C(DCVT+X2D(30))),4)     /* LOAD A(CVTSYSAD)   */
DSYSAD = C2D(SYSAD)                            /* CONVERT TO DECIMAL */
ICPID  = STORAGE(C2X(D2C(DCVT+X2D(5E))),2)     /* ADDR IPLED CPU ID  */
CVTOPTB= STORAGE(C2X(D2C(DCVT+X2D(7B))),1)     /* ADDR CVTOPTB FLAG  */
SMCA   = STORAGE(C2X(D2C(DCVT+X2D(C5))),3)     /* LOAD A(SMCA)       */
DSMCA  = C2D(SMCA)                             /* CONVERT TO DECIMAL */
GTFST  = STORAGE(C2X(D2C(DCVT+X2D(EC))),1)     /* ADDR GTF STATUS    */
JESCT  = STORAGE(C2X(D2C(DCVT+X2D(128))),4)    /* ADDR JESCT FROM CVT*/
DJESCT = C2D(JESCT)                            /* CONVERT TO DECIMAL */
XTNT2  = STORAGE(C2X(D2C(DCVT+X2D(148))),4)    /* LOAD A(CVTEXT2A)   */
DXTNT2 = C2D(XTNT2)                            /* CONVERT TO DECIMAL */
ASVT   = STORAGE(C2X(D2C(DCVT+X2D(22C))),4)    /* LOAD A(CVTASVT)    */
DASVT  = C2D(ASVT)                             /* CONVERT TO DECIMAL */
GDA    = STORAGE(C2X(D2C(DCVT+X2D(230))),4)    /* LOAD A(CVTGDA)     */
DGDA   = C2D(GDA)                              /* CONVERT TO DECIMAL */
CSD    = STORAGE(C2X(D2C(DCVT+X2D(294))),4)    /* LOAD A(CVTCSD)     */
DCSD   = C2D(CSD)                              /* CONVERT TO DECIMAL */
ASMVT  = STORAGE(C2X(D2C(DCVT+X2D(2C0))),4)    /* LOAD A(CVTASMVT)   */
DASMVT = C2D(ASMVT)                            /* CONVERT TO DECIMAL */
MSERV  = STORAGE(C2X(D2C(DCVT+X2D(3C))),4)     /* LOAD A(CVTMSLT)    */
DMSERV = C2D(MSERV)                            /* CONVERT TO DECIMAL */
REAL   = STORAGE(C2X(D2C(DCVT+X2D(358))),4)    /* ADDR REAL STORAGE  */
DREAL  = C2D(REAL)                             /* CONVERT TO DECIMAL */
RCEP   = STORAGE(C2X(D2C(DCVT+X2D(490))),4)    /* LOAD A(CVTRCEP)    */
DRCEP  = C2D(RCEP)                             /* CONVERT TO DECIMAL */
DFAID  = STORAGE(C2X(D2C(DCVT+X2D(4C0))),4)    /* LOAD A(CVTDFA)     */
DDFAID = C2D(DFAID)                            /* CONVERT TO DECIMAL */
CPUAL  = STORAGE(C2X(D2C(DCSD+X2D(08))),1)     /* ADDR CSDCPUAL      */
CPUOL  = STORAGE(C2X(D2C(DCSD+X2D(0A))),2)     /* ADDR CSDCPUOL      */
DCPUOL = C2D(CPUOL)                            /* CONVERT TO DECIMAL */
JESSCT = STORAGE(C2X(D2C(DJESCT+X2D(18))),4)   /* ADDR SSCT FROM JSCT*/
DSSCT  = C2D(JESSCT)                           /* CONVERT TO DECIMAL */
SSCTNAM= STORAGE(C2X(D2C(DSSCT+X2D(08))),4)    /* ADDR SSCT NAME     */
SSCTSUE= STORAGE(C2X(D2C(DSSCT+X2D(14))),4)    /* LOAD A(SSCTSUSE)   */
DSUSE  = C2D(SSCTSUE)                          /* CONVERT TO DECIMAL */
JESFMID= STORAGE(C2X(D2C(DSUSE+X2D(1C))),8)    /* ADDR JES FMID      */
PUTLVL = STORAGE(C2X(D2C(DSUSE+X2D(2A))),4)    /* ADDR SYSTEM PUT LVL*/
NUCID  = STORAGE(C2X(D2C(DXTNT2+X2D(04))),1)   /* ADDR NUCLEUS ID    */
IOCID  = STORAGE(C2X(D2C(DXTNT2+X2D(06))),2)   /* ADDR I/O CONFIG ID */
NUCID  = 'IEANUC0' ×× NUCID                    /* APPEND WITH PREFIX */
IPLOPT = STORAGE(C2X(D2C(DASMVT+X2D(01))),1)   /* LOAD A(ASMVT)      */
SPREL  = STORAGE(C2X(D2C(CVTPFX+X2D(D8))),8)   /* ADDR MVS/SP RELEASE*/
MVSREL = STORAGE(C2X(D2C(CVTPFX+X2D(FC))),4)   /* ADDR MVS RELEASE   */
DFPREL = STORAGE(C2X(D2C(DDFAID+X2D(02))),2)   /* ADDR DFP VER/RELASE*/
DFVT   = STORAGE(C2X(D2C(DDFAID+X2D(2C))),4)   /* LOAD A(DFADFVT)    */
DDFVT  = C2D(DFVT)                             /* CONVERT TO DECIMAL */
DFPFID = STORAGE(C2X(D2C(DDFVT+X2D(14))),4)    /* LOAD A(DFPFMID)    */
DDFMID = C2D(DFPFID)                           /* CONVERT TO DECIMAL */
DFPFMID= STORAGE(C2X(D2C(DDFMID+X2D(3F))),8)   /* ADDR DFP FMID      */
DFPREL = SUBSTR(C2X(DFPREL),1,3)               /* FORMAT DFP RELEASE */
DFPREL = INSERT('.',DFPREL,1)                  /* FORMAT DFP RELEASE */
DFPREL = INSERT('.',DFPREL,3)                  /* FORMAT DFP RELEASE */
SMPID  = STORAGE(C2X(D2C(CVTPFX+X2D(E0))),8)   /* ADDR SMP FMID      */
SMFID  = STORAGE(C2X(D2C(DSMCA+X2D(10))),4)    /* ADDR SYSTEM SMFID  */
IPLTME = STORAGE(C2X(D2C(DSMCA+X2D(150))),4)   /* ADDR IPL TIME FIELD*/
IPLDTE = STORAGE(C2X(D2C(DSMCA+X2D(154))),4)   /* ADDR IPL DATE FIELD*/
IPLDTE = INSERT('.',SUBSTR(C2X(IPLDTE),3,5),2) /* FORMAT IPL DATE    */
IPLHH  = RIGHT(C2D(IPLTME)%100%3600,2,'0')     /* FORMAT IPL HOUR    */
IPLMM  = RIGHT(C2D(IPLTME)%100//3600%60,2,'0') /* FORMAT IPL MINUTE  */
IPLSS  = RIGHT(C2D(IPLTME)%100//60,2,'0')      /* FORMAT IPL SECOND  */
IPLTME = IPLHH ×× ':' ×× IPLMM ×× ':' ×× IPLSS /* FORMAT IPL TIME    */
RESADDR= STORAGE(C2X(D2C(DSYSAD+X2D(0D))),3)   /* ADDR SYSRES UCBADDR*/
RESVOL = STORAGE(C2X(D2C(DSYSAD+X2D(1C))),6)   /* ADDR SYSRES VOLSER */
REALM  = DREAL/1024 ×× 'M'                     /* COMP REAL STORAGE  */
XPAND  = STORAGE(C2X(D2C(DRCEP+X2D(A0))),4)    /* ADDR IARMMRCE+A0   */
XPAND  = C2D(XPAND)*4/1024 ×× 'M'              /* CONV FRAME TO MEG. */
DDFVT  = C2D(DFVT)                             /* CONVERT TO DECIMAL */
CSASZ  = STORAGE(C2X(D2C(DGDA+X2D(70))),4)     /* ADDR GDACSASZ      */
ECSAS  = STORAGE(C2X(D2C(DGDA+X2D(80))),4)     /* ADDR GDAECSAS      */
DCSASZ = C2D(CSASZ)/1024 ×× 'K'                /* COMPUTE CSA SIZE   */
DECSAS = C2D(ECSAS)/1024 ×× 'K'                /* COMPUTE CSA/E SIZE */
SQASZ  = STORAGE(C2X(D2C(DGDA+X2D(94))),4)     /* ADDR GDASQASZ      */
ESQAS  = STORAGE(C2X(D2C(DGDA+X2D(9C))),4)     /* ADDR GDAESQAS      */
DSQASZ = C2D(SQASZ)/1024 ×× 'K'                /* COMPUTE SQA SIZE   */
DESQAS = C2D(ESQAS)/1024 ×× 'K'                /* COMPUTE CSA/E SIZE */
PVTSZ  = STORAGE(C2X(D2C(DGDA+X2D(A4))),4)     /* ADDR GDAPVTSZ      */
EPVTS  = STORAGE(C2X(D2C(DGDA+X2D(AC))),4)     /* ADDR GDAEPVTS      */
DPVTSZ = C2D(PVTSZ)/1024/1024 ×× 'M'           /* COMPUTE PVT SIZE   */
DEPVTS = C2D(SUBSTR(EPVTS,1,3))/1024/4         /* COMPUTE PVT/E SIZE */
DEPVTS1= C2D(SUBSTR(EPVTS,4,1))/1024/4         /* COMPUTE PVT/E SIZE */
DEPVTS = DEPVTS + DEPVTS1 ×× 'M'               /* COMPUTE PVT/E SIZE */
ASCBMAX= C2D(STORAGE(C2X(D2C(DASVT+516)),4))   /* FORMAT MAX USER    */
ASCBACT= 0                                     /* INIT MAX ACT ASCB  */
DO I = 1 TO ASCBMAX                            /* SCAN ALL ASVT      */
   ASCB  = STORAGE(C2X(D2C(DASVT+524+I*4)),4)  /* ADDR ASCB FROM ASVT*/
   IF   ABBREV(C2X(ASCB),'80')  = 1            /* IS IT AVAILABLE?   */
        THEN ITERATE                           /* YES,LEAVE FOR NEXT */
   ASCBACT = ASCBACT + 1                       /* NO, COUNT IT       */
END                                            /* END OF SCAN        */
IF   BITAND(CPUAL,'FC'X) = 'FC'X THEN          /* CPU 0-5 AVAILABLE? */
     CPUAL = 'CPU 0-5'                         /* YES, SAY IT        */
ELSE IF   BITAND(CPUAL,'F8'X) = 'F8'X THEN     /* CPU 0-4 AVAILABLE? */
          CPUAL = 'CPU 0-4'                    /* YES, SAY IT        */
ELSE IF   BITAND(CPUAL,'F0'X) = 'F0'X THEN     /* CPU 0-3 AVAILABLE? */
          CPUAL = 'CPU 0-5'                    /* YES, SAY IT        */
ELSE IF   BITAND(CPUAL,'E0'X) = 'E0'X THEN     /* CPU 0-2 AVAILABLE? */
          CPUAL = 'CPU 0-2'                    /* YES, SAY IT        */
ELSE IF   BITAND(CPUAL,'C0'X) = 'C0'X THEN     /* CPU 0-1 AVAILABLE? */
          CPUAL = 'CPU 0-1'                    /* YES, SAY IT        */
ELSE IF   BITAND(CPUAL,'80'X) = '80'X THEN     /* CPU 0   AVAILABLE? */
          CPUAL = 'CPU 0  '                    /* YES, SAY IT        */
IF   BITAND(IPLOPT,'04'X) = '04'X THEN         /* IS IT WARM STARTED */
     IPLOPT = 'WARM '                          /* YES, SAY IT        */
ELSE DO                                        /* ELSE CHK OTHERS    */
        IPLOPT = 'CVIO '                       /* ASSUME CVIO START  */
        IF   BITAND(IPLOPT,'08'X) = '08'X THEN /* IS IT QUICK START  */
             IPLOPT = 'QUICK'                  /* YES, SAY IT        */
        ELSE IPLOPT = 'CLPA '                  /* ELSE SAY CLPA      */
     END                                       /* END OF IPL CHECK   */
IF   BITAND(GTFST,'80'X) = '80'X   THEN        /* IS GTF ACTIVATED   */
     GTFSTAT= 'ACTIVE  '                       /* YES, ACTIVE        */
ELSE GTFSTAT= 'INACTIVE'                       /* NO, INACTIVE       */
LOGCLS = STORAGE(C2X(D2C(DMSERV+X2D(68))),1)   /* ADDR SYSLOG CLASS  */
IF   CVTOPTB \= '10'X THEN                     /* IS SYSLOG ACTIVE?  */
     LOGSTAT= 'ACTIVE'                         /* YES, SAY ACTIVE    */
ELSE LOGSTAT= 'INACTIVE'                       /* NO, INACTIVE       */
CLEAR                                          /* CLEAR SCREEN       */
HEADER = 'BASE SYSTEM INFORMATION LOOK UP'
HEADER = CENTER(HEADER,79)
SAY HEADER
LINE = 'CPU VERSION:' CPUVER,
       ' CPU SERIAL:' CPUSER,
       ' CPU TYPE:' CPUTYPE
SAY  CENTER(LINE,79)
SAY  CENTER(LEFT('*',73,'*'),79)
ICPID= SUBSTR(C2X(ICPID),3,2)
CALL FPRINT('IPL PROCESSOR' ICPID,
            'IPL OPTION' IPLOPT)
CALL FPRINT('IPL DATE' IPLDTE,
            'IPL TIME' IPLTME)
CALL FPRINT('CPU ON-LINE' DCPUOL,
            'CPU AVAILABLE' CPUAL)
CALL FPRINT('NUCLEUS MEMBER' NUCID,
            'I/O CONFIG  ' IOCID)
CALL FPRINT('REAL STORAGE' REALM,
            'EXPANDED STORAGE' XPAND)
CALL FPRINT('SYSRES VOLSER' RESVOL,
            'SYSRES ADDRESS' RESADDR)
SAY  CENTER(LEFT('*',72,'=') ×× '*',79)
CALL FPRINT('MVS RELEASE' MVSREL,
            'MVS/SP RELEASE' SPREL)
CALL FPRINT('PUT LEVEL' PUTLVL,
            'SMP FMID' SMPID)
CALL FPRINT('PRIMARY JES' SSCTNAM,
            'JES FMID' JESFMID)
CALL FPRINT('DFP RELEASE' DFPREL,
            'DFP FMID' DFPFMID)
SAY  CENTER(LEFT('*',72,'=') ×× '*',79)
CALL FPRINT('CSA SIZE' DCSASZ,
            'E/CSA SIZE' DECSAS)
CALL FPRINT('SQA SIZE' DSQASZ,
            'E/SQA SIZE' DESQAS)
CALL FPRINT('PRIVATE SIZE' DPVTSZ,
            'E/PRIVATE SIZE' DEPVTS)
CALL FPRINT('SYSTEM SMFID' SMFID,
            'GTF STATUS' GTFSTAT)
CALL FPRINT('SYSLOG CLASS' LOGCLS,
            'SYSLOG STATUS' LOGSTAT)
CALL FPRINT('ASCB AVAILABLE' ASCBMAX,
            'ASCB ACTIVE' ASCBACT)
SAY  CENTER(LEFT('*',73,'*'),79)
RETURN(0)
/*     COMMON ROTUING TO DO THE OUTPUT FORMATING & PRINTING         */
FPRINT:
ARG DATA
LINE = LEFT('*' LEFT(SUBWORD(DATA,1,2),15) ××,
            '×' SUBWORD(DATA,3,1),36) ××,
       LEFT('*' LEFT(SUBWORD(DATA,4,2),15) ××,
            '×' SUBWORD(DATA,6),36)
SAY  CENTER(LINE ×× '*',79)
RETURN(0)
