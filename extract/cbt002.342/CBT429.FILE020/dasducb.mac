/*===REXX============================================================*/
/*                                                                   */
/*        THIS REXX CALLS AN ASSEMBLY LANGUAGE SUBROUTINE WHICH      */
/*   SCANS THE SYSTEM FOR ALL DASD UCB'S.  THE REXX THEN MAKES DD    */
/*   CARDS FOR EACH VOLUME ONLINE.  THE DD CARDS ARE PART OF A JOB   */
/*   STREAM TO SCAN EACH VTOC FOR DFSMS INITIALIZATION.              */
/*                                                                   */
/*===================================================================*/

TYPEDEV = 'DASD'                        /* WE ONLY WANT DISK UNITS   */

PARSE UPPER ARG INPUT                   /* CHECK COMMAND LINE INPUT  */

FILEOUT: ,
DO WHILE LENGTH(INPUT) = 0              /* IF NONE, THEN ASK FOR IT  */
  SAY 'ENTER OUTPUT FILE NAME :'        /* QUESTION                  */
  PARSE UPPER PULL INPUT WASTE          /* ANSWER                    */
  END
'ALLOC F(OUTPUT) DA('INPUT') OLD REU'   /* ALLOCATE FILE             */

IF RC ^= 0 THEN DO                      /* CHECK RESULT              */
  SAY 'UNABLE TO ALLOCATE THAT FILE FOR OUTPUT.  PLEASE TRY AGAIN.'
  INPUT =                               /* FAKE NO INPUT             */
  SIGNAL FILEOUT                        /* GO TRY AGAIN              */
  END
COUNT =  0                              /* INITIALIZE LOCAL COUNTERS */
ONLINE = 0

JOB1 = '//USER     JOB'                 /* SET UP FIXED JCL          */
JOB2 = '//STEP1   EXEC PGM=ARCVTOCR'
JOB3 = '//STEPLIB  DD  DISP=SHR,DSN=USER.DFHSM.LOAD'
JOB4 = '//SYSUDUMP DD  SYSOUT=*'
JOB5 = '//SYSPRINT DD  SYSOUT=*'
JOB6 = '//SYSAUDIT DD  DISP=(,CATLG),UNIT=SYSDA,DCB=BLKSIZE=23384,'
JOB7 = '//             SPACE=(CYL,(X,Y),RLSE),DSN=USER.AUDIT.DATA'

DO I = 1 TO 7                           /* OUTPUT FIXED JCL          */
  J = OUTER(VALUE(JOB××I))              /* OUTPUT EACH LINE          */
  END

DO WHILE GETUCB() = 0                   /* PROCESS TIL NO MORE UNITS */
  TEMP = SUBSTR(X,4,1)                  /* LOOK AT 4TH BYTE, UCBSTAT */
  TEMP = C2D(TEMP)                      /* CVT TO HEX DIGITS         */
  COUNT = COUNT + 1                     /* BUMP TOTAL DASD COUNT     */

  IF TEMP > 127 THEN DO                 /* LOOK FOR ONLINE STATUS    */
    DEV = C2X(SUBSTR(X,20,1))           /* GET UNIT TYPE BYTE        */
    IF DEV = '0E' THEN DEV = '3380'     /* ASSIGN DEVICE 3380        */
    ELSE IF DEV = '0F' THEN DEV = '3390'/* ASSIGN DEVICE 3390        */
    ELSE DEV = 'SYSDA'                  /* DEFAULT IS 'SYSDA'        */
    OUT = '//'SUBSTR(X,29,6) ×× ,       /* USE VOL SER AS DD NAME    */
      '   DD  DISP=SHR,UNIT='DEV ×× ,   /* PUT DEVICE TYPE IN CARD   */
      ',VOL=SER='SUBSTR(X,29,6) ×× ,    /* USE VOL SER PROPERLY TOO  */
      ',DCB=BLKSIZE=96'                 /* DCB INFO COMPLETES CARD   */
    J = OUTER(OUT)                      /* WRITE IT OUT              */
    ONLINE = ONLINE + 1                 /* BUMP COUNT OF ONLINE VOLS */
    END
  END

SAY COUNT 'UNITS FOUND WITH' ONLINE 'UNITS ONLINE.' /* FINAL COUNT   */

EXIT

/***             E N D   O F   M A I N   R O U T I N E             ***/

/*===================================================================*/
/*                                                                   */
/*        PROCEDURE TO CALL THE UCB ACQUISITION SUBROUTINE AND SET   */
/*   THE RETURN CODE TO ZERO IF ANOTHER UCB WAS RETURNED OR ELSE     */
/*   SETTING THE RETURN CODE TO NON-ZERO IF THE LAST UCB WAS FOUND.  */
/*                                                                   */
/*===================================================================*/

OUTER: PROCEDURE

PARSE ARG CHARS

PUSH CHARS
'EXECIO 1 DISKW OUTPUT'
IF RC ^= 0 THEN SIGNAL ERROR
RETURN 0

ERROR:
SAY 'ERROR WRITING OUTPUT FILE.  RETURN CODE WAS' RC'.'
EXIT 4

/***         E N D   O F   O U T P U T   R O U T I N E             ***/

/*===================================================================*/
/*                                                                   */
/*        PROCEDURE TO CALL THE UCB ACQUISITION SUBROUTINE AND SET   */
/*   THE RETURN CODE TO ZERO IF ANOTHER UCB WAS RETURNED OR ELSE     */
/*   SETTING THE RETURN CODE TO NON-ZERO IF THE LAST UCB WAS FOUND.  */
/*                                                                   */
/*===================================================================*/

GETUCB: PROCEDURE EXPOSE X COUNT TYPEDEV

CALL UCBSUBR COUNT,X,TYPEDEV          /* CALL SUBROUTINE           */
PARSE VAR RESULT X                    /* PICK UP RESULT (UCB+WORK) */
IF C2X(LEFT(X,2)) = 'FFFF' THEN ,     /* IF THERE WERE NO MORE ... */
  RETURN 4                            /* RETURN A CODE OF 4        */
IF C2X(LEFT(X,2)) = 'FFFE' THEN DO    /* CHECK FOR EROR INDICATOR  */
  SAY SUBSTR(X,3)                     /* AND PRINT ERROR MESSAGE   */
  EXIT                                /* AND EXIT ENTIRELY IF SO   */
  END
RETURN 0                              /* ELSE RETURN A CODE OF 0   */
