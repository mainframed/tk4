/*===================================================================*/
/*                                                                   */
/*                    ELIGIBLE DEVICE TABLE LOOKUP                   */
/*   THIS REXX PROGRAM IS USED TO SHOW ALL SYMBOLIC UNIT NAMES,      */
/*   GENERIC OR ESOTERIC AND THEIR RELATED UCB INFORMATION.  IF A    */
/*   SPECIFIC SYMBOLIC UNIT NAME IS ENTERED, THIS PROGRAM WILL GO    */
/*   THROUGH THE RELATED TABLES AND FIND ALL MATCHING SYMBOLIC       */
/*   NAMES AND DISPLAY INFORMATION REGARDING THOSE DEVICES ONLY.     */
/*                                                                   */
/*===================================================================*/
/*                                                                   */
/*                  CONTROL BLOCK CHAINING USED                      */
/*  JESCT      : CVT+X'128' JES CONTROL TABLE (CVTJESCT)             */
/*  JESEDT     : JESCT+X'34' JES ELIGIBLE DEVICE TABLE               */
/*   LOOKUP    : JESEDT+X'1C' EDT LOOKUP TABLE 32 BYTES              */
/*   LOOKCNT   : LOOKUP+X'08' LOOKUP ENTRY COUNT                     */
/*    EDTNAME  : LOOKUP+X'10' EDT ENTRY DEVICE NAME                  */
/*    EDTDEVT  : LOOKUP+X'18' EDT ENTRY DEVICE TYPE                  */
/*    EDTMASK  : LOOKUP+X'1C' EDT ENTRY DEVICE MASK                  */
/*    EDTGCNT  : LOOKUP+X'24' EDT ENTRY DEVICE GROUP COUNT           */
/*    EDTFLAG  : LOOKUP+X'28' EDT ENTRY DEVICE GROUP COUNT           */
/*     X'10'   : EDTFLAG(1) THIS IS A GENERIC NAME                   */
/*     X'08'   : EDTFLAG(1) THIS IS A ESOTERIC NAME                  */
/*     X'04'   : EDTFLAG(1) THIS IS A GENERATE NAME                  */
/*    EDTAFFN  : LOOKUP+X'2A' EDT ENTRY DEVICE GROUP COUNT           */
/*    GROUP1ST : LOOKUP+X'2C' EDT ENTRY DEVICE GROUP COUNT           */
/*    GROUPNXT : LOOKUP+X'2E' EDT ENTRY DEVICE GROUP COUNT           */
/*   EDTGENR   : JESEDT+X'20' EDT GENERIC TABLE 12 BYTES             */
/*   EDTGRP    : JESEDT+X'24' EDT GROUP TABLE 12 BYTES               */
/*   EDTUCB    : JESEDT+X'28' EDT UCB TABLE 8 BYTES                  */
/*   EDTGRPT   : JESEDT+X'30' EDT GROUP POINTER TABLE 4 BYTES        */
/*                                                                   */
/*********************************************************************/
ARG UNIT                                       /* ALLOW PARM ENTERED */
CVT    = STORAGE(10,4)                         /* ADDR CVT           */
DCVT   = C2D(CVT)                              /* CONVERT TO DECIMAL */
JESCT  = STORAGE(D2X(DCVT+X2D(128)),4)         /* ADDR JESCT FROM CVT*/
DJESCT = C2D(JESCT)                            /* CONVERT TO DECIMAL */
JESEDT = STORAGE(D2X(DJESCT+X2D(34)),4)        /* ADDR EDT FROM JESCT*/
DEDT   = C2D(JESEDT)                           /* CONVERT TO DECIMAL */
GENRIC = STORAGE(D2X(DEDT+X2D(20)),4)          /* ADDR GENERIC TABLE */
DGENR  = C2D(GENRIC)+12                        /* CONVERT TO DECIMAL */
LOOKUP = STORAGE(D2X(DEDT+X2D(1C)),4)          /* ADDR LOOK-UP TABLE */
DLOOK  = C2D(LOOKUP)                           /* CONVERT TO DECIMAL */
EDTGRP = STORAGE(D2X(DEDT+X2D(24)),4)          /* ADDR GROUP TABLE   */
DGRP   = C2D(EDTGRP)+12                        /* CONVERT TO DECIMAL */
EDTUCB = STORAGE(D2X(DEDT+X2D(28)),4)          /* ADDR UCB TABLE     */
DUCB   = C2D(EDTUCB)+12                        /* CONVERT TO DECIMAL */
EDTGRPT= STORAGE(D2X(DEDT+X2D(30)),4)          /* ADDR GROUPTR TABLE */
DGRPT  = C2D(EDTGRPT)+12                       /* CONVERT TO DECIMAL */
LOOKCNT= STORAGE(D2X(DLOOK+X2D(08)),4)         /* ADDR LOOK-UP COUNT */
DCOUNT = C2D(LOOKCNT)                          /* CONVERT TO DECIMAL */
LINEC  = 0                                     /* INIT LINE CONTROL  */
LINE   = ''                                    /* INIT OUTPUT LINE   */
IF   LENGTH(UNIT) > 0 THEN                     /* ANY THING LEFT?    */
     DO                                        /* DO FOLLOWING       */
        ARGLEN = LENGTH(UNIT)                  /* SAVE PARM LENGTH   */
        IF   SUBSTR(UNIT,ARGLEN,1) = '*' THEN  /* PREFIX CHECKING?   */
             UNIT=SUBSTR(UNIT,1,LENGTH(UNIT)-1) /* YES, SAVE PREFIX  */
        ARGLEN = LENGTH(UNIT)                  /* YES, SAVE NAME LENG*/
     END
ELSE ARGLEN = 0                                /* ELSE NO ARGUMENT   */
CLEAR                                          /* CLEAR SCREEN       */
HEADER = 'ELIGIBLE DEVICE TABLE LOOK UP'
HEADER = CENTER(HEADER,79)
SAY HEADER
IF   ARGLEN = 0 THEN
     DO
        HEADER = '+---------------------------------' ××,
                 '--------------------------------------+'
        HEADER = CENTER(HEADER,79)
        SAY HEADER
        HEADER = '×SEQ×EDT  NAME×DEV TYPE×EDT TYPE×V' ××,
                 'IO×SEQ×EDT  NAME×DEV TYPE×EDT TYPE×VIO×'
        HEADER = CENTER(HEADER,79)
        SAY HEADER
        HEADER = '+---+---------+--------+--------+-' ××,
                 '--+---+---------+--------+--------+---+'
        HEADER = CENTER(HEADER,79)
        SAY HEADER
     END
DO I = 1 TO DCOUNT
   EDTNAME= STORAGE(D2X(DLOOK+X2D(10)),8)      /* MAP LOOKUP ENT-NAME*/
   EDTDEVT= STORAGE(D2X(DLOOK+X2D(18)),4)      /* MAP LOOKUP ENT-TYPE*/
   EDTMASK= STORAGE(D2X(DLOOK+X2D(1C)),4)      /* MAP LOOKUP ENT-MASK*/
   EDTAMSK= STORAGE(D2X(DLOOK+X2D(20)),4)      /* MAP LOOKUP ENT-AMSK*/
   EDTGCNT= STORAGE(D2X(DLOOK+X2D(24)),4)      /* MAP LOOKUP ENT-FLAG*/
   EDTFLAG= STORAGE(D2X(DLOOK+X2D(28)),1)      /* MAP LOOKUP ENT-FLAG*/
   EDTAFFN= STORAGE(D2X(DLOOK+X2D(2A)),2)      /* MAP LOOKUP ENT-AFFN*/
   GNIX1ST= STORAGE(D2X(DLOOK+X2D(2C)),2)      /* MAP GENERIC IX-1ST */
   GNIXNXT= STORAGE(D2X(DLOOK+X2D(2E)),2)      /* MAP LOOKUP NEXT ENT*/
   IF   BITAND(EDTFLAG,'10'X) = '10'X THEN     /* IS THIS A GENERIC  */
        TYPE = GENERIC' '                      /* YES THEN SAVE IT   */
   ELSE IF   BITAND(EDTFLAG,'04'X)= '04'X THEN /* IS THIS A GENERATED*/
             TYPE = GENERATE                   /* YES SAVE IT        */
   ELSE IF   BITAND(EDTFLAG,'08'X)= '08'X THEN /* IS THIS AN ESOTERIC*/
             TYPE = ESOTERIC                   /* YES, SAVE IT       */
        ELSE TYPE = C2X(EDTFLAG)'      '       /* ELSE SAVE THE FLAG */
   GENP = DGENR + (C2D(GNIX1ST) - 1) * 12      /* FIND GENERIC ENTRY */
   GRPIX= STORAGE(D2X(GENP+8),2)               /* MAP 1ST GROUP INDEX*/
   GRPID= DGRPT + 4 * (C2D(GRPIX) - 1)         /* FIND GROUP ENTRY   */
   GRPID= STORAGE(D2X(GRPID+X2D(00)),2)        /* MAP GROUP IDENT    */
   GRPID= STRIP(C2X(GRPID),L,'0')              /* STRIP LEADING ZERO */
   GRPID= RIGHT(GRPID,3)                       /* MAKE RIGHT JUSTIFY */
   IF   TYPE ^= 'GENERIC' THEN                 /* IS THIS A GENERIC  */
        EDTDEVT = STORAGE(D2X(GENP),4)         /* YES, MAP DEV-TYPE  */
/*                                          */
/* IF   BITAND(EDTFLAG,'80'X) = '80'X THEN  */ /* IS VIO SUPPORTED   */
/*      VIO  = YES                          */ /* YES, SAY IT        */
/* ELSE VIO  = '   '                        */ /* ELSE LEAVE IT BLANK*/
   SEQNO = SUBSTR(C2X(EDTMASK),6)
   LINE  = LINE ×× '×' ×× SEQNO ×× '×' ×× EDTNAME '×' ××,
           C2X(EDTDEVT) ×× '×' ×× TYPE ×× '×' ×× GRPID
   IF   ARGLEN > 0  THEN
        IF    SUBSTR(EDTNAME,1,ARGLEN) = UNIT THEN
              DO
                 LINEC = LINEC + 1
                 SAY RIGHT(LINEC,3) ×× '. EDT NAME :' EDTNAME
                 SAY '     EDT TYPE :' TYPE
                 SAY '     DEV TYPE :' C2X(EDTDEVT)
                 SAY '     GROUP NO :' C2D(GRPIX)
                 CALL FINDGRP                  /* FIND ALL UCB ADDR  */
                 DLOOK= DLOOK + 32             /* GET NEXT LOOKUP ENT*/
                 ITERATE                       /* DO NEXT            */
              END
         ELSE DO
                 DLOOK= DLOOK + 32             /* GET NEXT LOOKUP ENT*/
                 ITERATE                       /* DO NEXT            */
              END
   LINEC = LINEC + 1
   IF    LINEC = 2 THEN
         DO
            LINEC = 0
            LINE = LINE ×× '×'
            LINE = CENTER(LINE,79)
            SAY LINE
            LINE = ''
         END
/* SAY     SEQNO EDTNAME C2X(EDTDEVT) TYPE VIO  */
/*      C2X(EDTAFFN) C2X(GNIX1ST) C2X(GNIXNXT)  */
   DLOOK= DLOOK + 32                           /* GET NEXT LOOKUP ENT*/
                                               /*                    */
END
IF   ARGLEN = 0 THEN                           /* IS IN-PARM NULL    */
     DO                                        /* YES, SAY TRAILER   */
        HEADER = '+------------------' ××,
                 '-------------------' ××,
                 '-------------------' ××,
                 '---------------+'
        HEADER = CENTER(HEADER,79)             /* CENTERS THE HEADER */
        SAY HEADER
     END
RETURN(0)
/******************************* REXX ********************************/
/*                                                                   */
/*               MAPOUT UCB ADDR DEFINED IN LOOKUP TABLE             */
/*   HERE THE SUBROUTINE IS USED TO MAP OUT ALL THE UCB ADDR FROM    */
/*   THE UCB ADDR TABLE, AND THE RELATED GROUP REFERENCE NUMBER.     */
/*===================================================================*/
/*                  CONTROL BLOCK CHAINING USED                      */
/*  GRPIX      : GRPT+X'00' GROUP POINTER                            */
/*  GRPTN      : GRPT+X'02' INDEX TO NEXT GROUP POINTER ENTRY        */
/*  DEVNO      : EDTGRP+X'02' NUMBER OF DEVICE                       */
/*  UCB1ST     : EDTGRP+X'04' INDEX TO FIRST UCB                     */
/*                                                                   */
/*********************************************************************/
FINDGRP:
  GRPC = STORAGE(D2X(GENP+4),4)                /* MAP NUM OF GROUPS  */
  GRPC = C2D(GRPC)                             /* CONVERT TO DECIMAL */
  DO UNTIL GRPC = 0                            /* GET ALL GROUPS     */
     GRPNX= STORAGE(D2X(GENP+10),2)            /* MAP NEXT GROUP IDX */
     GRPIX= STORAGE(D2X(GENP+8),2)             /* MAP 1ST GROUP INDEX*/
     DO UNTIL GRPTN = '0000'X                  /* GET ALL GRP-POINTER*/
        IF   GRPIX ^= '0000'X THEN             /* IS GRP ADDR NULL   */
             CALL MAPUCB                       /* NO, GO MAP ALL UCB */
        GRPIX = GRPTN                          /* ADDR TO NEXT GRPTS */
     END                                       /* CONTINUE           */
     GRPC = GRPC - 1                           /* DECREASE COUNT BY 1*/
     GNIX1ST = GRPNX                           /* LOAD NEXT GENR-ENT */
     GENP = DGENR + (C2D(GNIX1ST) - 1) * 12    /* ADDR TO THE ENTRY  */
  END                                          /* CONTINUE           */
  SAY ''                                       /* PUT OUT A SEPERATOR*/
RETURN(0)
MAPUCB:
  GRPIX  = DGRPT + 4 * (C2D(GRPIX) - 1)        /* FIND GROUP ENTRY   */
  GRPTN  = STORAGE(D2X(GRPIX+X2D(02)),2)       /* MAP GROUP DEV-COUNT*/
  GRPIX  = STORAGE(D2X(GRPIX+X2D(00)),2)       /* MAP GROUP DEV-COUNT*/
  GRPID  = STRIP(C2X(GRPIX),L,'0')             /* STRIP LEADING ZERO */
  GRPIX  = DGRP + 12 * (C2D(GRPIX) - 1)        /* MAP GROUP DEV-COUNT*/
  DEVNO  = STORAGE(D2X(GRPIX+X2D(02)),2)       /* MAP GROUP DEV-COUNT*/
  DDEVNO = C2D(DEVNO)                          /* CONVERT TO DECIMAL */
  UCB1ST = STORAGE(D2X(GRPIX+X2D(04)),4)       /* MAP UCB TABLE ADDR */
  UCBADDR= (C2D(UCB1ST) - 1) * 8 + DUCB        /* FIND UCB ENTRY ADDR*/
  SAY '     GROUP ID :' GRPID ×× '/' ×× DDEVNO /* PUT GROUP ID.      */
  LINECNT= 0                                   /* INIT LINE COUNT    */
  LINE   = '     UCB ADDR : '                  /* PUT OUT LINE HEADER*/
  DO DDEVNO                                    /* GO GET ALL DEVICES */
     IF   LINECNT > 0 THEN                     /* PREPARE OUTPUT LINE*/
          LINE = LINE ×× ','                   /* CONCAT WITH ','    */
     UCBNM   = STORAGE(D2X(UCBADDR),3)         /* MAP DEVICE NUMBER  */
     LINE    = LINE ×× UCBNM                   /* FILL-IN DEVICE NUM */
     LINECNT = LINECNT + 1                     /* INCREASE DEVICE-CNT*/
     IF   LINECNT = 16 THEN                    /* IS DEVICE-CNT = 16 */
          DO                                   /* YES, PUT OUT LINE  */
             SAY  LINE                         /*                    */
             LINECNT = 0                       /* CLEAR DEVICE COUNT */
             LINE    = '                '      /* RE-INIT LINE HEADER*/
          END
     UCBADDR = UCBADDR+8                       /* GET NEXT UCB ADDR  */
  END
  IF   LINECNT > 0  THEN                       /* ANY LEFT OVER?     */
       SAY  LINE                               /* YES, PUT IT OUT    */
RETURN(0)
