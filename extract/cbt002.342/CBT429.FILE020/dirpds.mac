/*====REXX============================================================*/
/*                                                                    */
/*        THIS REXX READS THE DIRECTORY OF A PDS.  IT WILL PRINT OUT  */
/*   ALL THE MEMBER NAMES (8 PER LINE).  IF THERE IS A PARAMETER IN   */
/*   THE COMMAND, THE FIRST ONE WILL BE USED AS THE DATA SET NAME,    */
/*   IF THERE IS A SUBSEQUENT PARM OF DUMP, ALL THE DIRECTORY BLOCKS  */
/*   WILL BE DUMPED IN THE RAW STATE ALSO.                            */
/*        THE REXX CAN ALSO EASILY BE MODIFIED TO PRODUCE JCL OR A    */
/*   CLIST OR REXX TO DO SOME PROCESSING FOR EACH MEMBER OF THE PDS.  */
/*                                                                    */
/*====================================================================*/

PARSE UPPER ARG INPUT                    /* GET COMMAND LINE PARMS    */
CALL OPENER(INPUT)                       /* GET FILES OPEN            */

MEML =                                   /* SET UP A NULL STRING      */
DUMP = 'N'                               /* DEFAULT IS 'NO'           */
DO WHILE LENGTH(INPUT) > 0               /* PARSE UNITL NO MORE ARGS  */
  PARSE VAR INPUT A INPUT                /* PARSE NEXT ARGUMENT       */
  IF A = "DUMP" THEN DUMP = "Y"          /* REMEMBER A DUMP REQUEST   */
END

NINP = 0                                 /* INITIALIZE COUNTERS       */
MEM = 0
END = 0

DO FOREVER                               /* PROCESS ALL DIR BLOCKS    */
  'EXECIO 1 DISKR INPUT'                 /* QUEUE FILE INPUT LINE     */
  IF RC ^= 0 THEN LEAVE                  /* EXIT IF NON 0 RETURN CODE */
  NINP = NINP + 1                        /* COUNT ANOTHER RECORD READ */
  PARSE PULL LINE                        /* PULL RECORD FROM STACK    */
  IF DUMP = 'Y' THEN DO                  /* WAS A RAW DUMP REQUESTED? */
    SAY ' '
    SAY 'RECORD' NINP 'READ SUCCESSFULLY.'
    BLOCK = C2X(SUBSTR(LINE,1,2))        /* GET BLOCK LENGTH (HEX)    */
    BLOCK = X2D(BLOCK)                   /* MAKE IT DECIMAL           */
    SAY 'USEFUL BLOCK LENGTH IS' BLOCK   /* REPORT BLOCK LENGTH       */
    DO J = 0 TO 15                       /* PROCESS 16 LINES PER REC  */
      TEMP =                             /* MAKE HEX PART EMPTY       */
      CHARS =                            /* MAKE EBCDIC PART EMPTY    */
      DO I = 1 TO 16                     /* 16 BYTES PER LINE         */
        C = SUBSTR(LINE,J*16+I,1)        /* PICK OF NEXT CHAR         */
        IF C < ' ' THEN CHARS = CHARS' ' /* INSERT EBCDIC IN OUTPUT   */
        ELSE CHARS = CHARS ×× C          /* OR SPACE IF TOO LOW       */
        X = C2X(C)                       /* CONVERT TO HEXADECIMAL    */
        TEMP = TEMP ×× ' ' ×× X          /* PUT HEX IN HEX PART       */
      END
      SAY RIGHT(D2X(4096+J*16),3) ×× ' ' ×× TEMP ×× ' ' ×× CHARS
    END
  END
  IF DUMP ^= 'Y' THEN DO                 /* IF WE DIDNT BEFORE ...    */
    BLOCK = C2X(SUBSTR(LINE,1,2))        /* GET BLOCK LENGTH (HEX)    */
    BLOCK = X2D(BLOCK)                   /* MAKE IT DECIMAL           */
  END
  LINE = SUBSTR(LINE,3)                  /* DROP BLOCK LENGTH         */
  BLOCK = BLOCK - 2                      /* DECREASE REMAINING BLOCK  */
  DO WHILE ( BLOCK > 0 ) & ( END = 0 )   /* LOOP THROUGH BLOCK        */
    NAME = SUBSTR(LINE,1,8)              /* PICK OFF MEMBER NAME      */
    IF NAME = 'FFFFFFFFFFFFFFFF'X THEN , /* TEST FOR LAST ENTRY MARK  */
      IF DUMP = 'N' THEN SIGNAL NOMORE   /* IF WE'RE NOT DUMPING QUIT */
      ELSE DO
        END = 1                          /* ELSE JUST NO MORE NAMES   */
        LEAVE                            /* LEAVE NAME LOOP           */
      END
    MEML = MEML ×× NAME ×× ' '           /* PUT NEW NAME ON LINE      */
    IF LENGTH(MEML) > 68 THEN DO         /* IF LINE IS FULL           */
      SAY MEML                           /* PRINT IT                  */
      MEML =                             /* AND CLEAR IT              */
    END
    MEM = MEM + 1                        /* COUNT MEMBERS             */
    LINE = SUBSTR(LINE,12)               /* DROP NAME AND TTR         */
    BLOCK = BLOCK - 11                   /* DECREASE REMAINING BLOCK  */
    LEN = C2X(SUBSTR(LINE,1,1))          /* GET USER DATA LENGTH (HEX)*/
    LEN = X2D(LEN) // 32 + 1             /* MAKE IT DECIMAL           */
    LEN = LEN * 2                        /* ALLOW FOR HALF WORD COUNT */
    LINE = SUBSTR(LINE,LEN)              /* AND DROP USER DATA        */
    BLOCK = BLOCK - LEN + 1              /* DECREASE REMAINING BLOCK  */
  END
  IF ( DUMP = 'Y' ) & ( LENGTH(MEML) > 0 ) THEN DO
    SAY MEML                             /* PRINT PARTIAL LINE        */
    MEML =                               /* AND CLEAR LINE            */
  END
END

IF LENGTH(MEML) > 0 THEN SAY MEML

IF RC = 2 THEN ,
  SAY NINP 'RECORDS WERE READ BEFORE AN EOF WAS DETECTED.'
ELSE ,                                   /* ANYTHING ELSE IS PROBLEM  */
  SAY 'AN ERROR WAS DETECTED READING THE DATA.  THE RETURN CODE WAS' RC

EXIT 0

NOMORE: ,                                /* GET HERE AT DIR END       */
IF LENGTH(MEML) > 1 THEN SAY MEML        /* MENTION LAST MEMBERS      */
SAY ' '                                  /* SKIP A LINE               */
SAY 'END OF DIRECTORY AFTER' MEM 'MEMBERS.'

EXIT 0                                   /* NOTHING ELSE IS NEEDED    */

/*             E N D   O F   M A  I N   P R O C E D U R E             */

OPENER: PROCEDURE                        /* OPEN INPUT AND OUTPUT     */

/*====================================================================*/
/*                                                                    */
/*        THIS IS THE REXX SUBROUTINE TO OPEN THE INPUT FILE.  THE    */
/*   FILE NAME IS EITHER SUPPLIED IN THE CALLING ARGUMENT OR IS       */
/*   REQUESTED FROM THE USER.                                         */
/*                                                                    */
/*====================================================================*/

PARSE ARG INPUT                          /* GET COMMAND LINE PARMS    */
ERR = 0                                  /* NO ERRORS YET             */
FILEIN:  ,
IF ( LENGTH(INPUT) = 0 ) × ( ERR = 1 ) THEN DO /* IF NONE, ASK USER   */
  SAY 'ENTER INPUT FILE NAME :'
  PARSE UPPER PULL INPUT                 /* READ USER'S RESPONSE      */
END
INPUT = STRIP(INPUT,'B')                 /* STRIP BLANKS BOTH SIDES   */
PARSE VAR INPUT INPNAME INPUT            /* FIRST IS INPUT NAME       */
INPUT = STRIP(INPUT,'L')                 /* STRIP WHAT'S LEFT         */
IF SUBSTR(INPUT,1,4) = 'VOL(' THEN ,     /* WAS A VOLUME SPECIFIED ?  */
  PARSE VAR INPUT VOL INPUT              /* IF IT WAS, GO GET IT      */
ELSE VOL =                               /* ELSE SET UP A NULL CLAUSE */
"ALLOC DA(" ×× INPNAME ×× ") F(INPUT) SHR REU DSORG(PS) " ,
    "RECFM(F) BLKSIZE(256) LRECL(256)" ×× VOL
IF RC ^= 0 THEN DO                       /* IF ALLOCATE FAILED        */
  SAY 'UNABLE TO ALLOCATE THAT FILE.  PLEASE TRY AGAIN.'
  ERR = 1                                /* RECORD AN ERROR INDICATOR */
  SIGNAL FILEIN
END

RETURN 0
