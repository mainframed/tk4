/*====REXX============================================================*/
/*                                                                    */
/*        THIS IS A SKELETON REXX TO READ A FILE, DO SOME PROCESSING  */
/*   AND THEN WRITE OUT ANOTHER OUTPUT FILE.  THE REXX COUNTS INPUT   */
/*   AND OUTPUT RECORDS, PROCESSES EOF AND ERROR CONDITIONS AND AT    */
/*   THE END OF A FILE PRINTS OUT THESE COUNTS.                       */
/*                                                                    */
/*====================================================================*/

PARSE UPPER ARG INPUT                    /* GET COMMAND LINE PARMS    */
CALL OPENER(INPUT)                       /* GET FILES OPEN            */

NINP = 0                                 /* INITIALIZE COUNTERS       */
NOUT = 0

DO FOREVER
  IO = 'READ'                            /* REMEMBER WE'RE READING    */
  'EXECIO 1 DISKR INPUT'                 /* QUEUE FILE INPUT LINE     */
  IF RC ^= 0 THEN LEAVE                  /* EXIT IF NON 0 RETURN CODE */
  NINP = NINP + 1                        /* COUNT ANOTHER RECORD READ */
  PARSE PULL LINE                        /* PULL RECORD FROM STACK    */

/*
............................
... PROCESSING GOES HERE ...
............................
*/

  IO = 'WRIT'                           /* REMEMBER WE'RE WRITING    */
  PUSH LINE                              /* PUSH ONTO STACK           */
  'EXECIO 1 DISKW OUTPUT'                /* AND WRITE FROM STACK      */
  IF RC ^= 0 THEN LEAVE                  /* EXIT IF NON 0 RETURN CODE */
  NOUT = NOUT + 1                        /* COUNT ANOTHER RECORD READ */
END
IF ( RC = 2 ) & ( IO = 'READ' ) THEN DO  /* ONLY EOF ON READ IS OK    */
  SAY NINP 'RECORDS WERE READ BEFORE AN EOF WAS DETECTED.'
  SAY NOUT 'RECORDS WERE OUTPUT BEFORE AN EOF WAS DETECTED.'
END
ELSE DO                                  /* ANYTHING ELSE IS PROBLEM  */
  SAY 'AN ERROR WAS DETECTED' IO ×× 'ING THE DATA.  THE RETURN CODE' ,
    ×× ' WAS ' RC
END

EXIT 0

/*             E N D   O F   M A  I N   P R O C E D U R E             */

OPENER: PROCEDURE                        /* OPEN INPUT AND OUTPUT     */

/*====================================================================*/
/*                                                                    */
/*        THIS IS THE REXX SUBROUTINE TO OPEN THE INPUT AND OUTPUT    */
/*   FILES.  THE NAMES ARE EITHER SUPPLIED IN THE ARGUMENT OR ARE     */
/*   ELICITED FROM USER RESPONSES.                                    */
/*                                                                    */
/*====================================================================*/

PARSE UPPER ARG INPUT                    /* GET COMMAND LINE PARMS    */
ERR = 0                                  /* NO ERRORS YET             */
FILEIN:  ,
IF ( LENGTH(INPUT) = 0 ) × ( ERR = 1 ) THEN DO /* IF NONE, ASK USER   */
  SAY 'ENTER INPUT FILE NAME :'
  PARSE UPPER PULL INPNAME               /* READ USER'S RESPONSE      */
END
ELSE DO                                  /* ELSE USE ARGS SUPPLIED    */
  INPUT = STRIP(INPUT,'B')               /* STRIP BLANKS BOTH SIDES   */
  PARSE UPPER VAR INPUT INPNAME INPUT    /* FIRST IS INPUT NAME       */
  INPUT = STRIP(INPUT,'L')               /* STRIP WHAT'S LEFT         */
END
"ALLOC DA(" ×× INPNAME ×× ") F(INPUT) SHR REU"
IF RC ^= 0 THEN DO                       /* IF ALLOCATE FAILED        */
  SAY 'UNABLE TO ALLOCATE THAT FILE.  PLEASE TRY AGAIN.'
  ERR = 1                                /* RECORD AN ERROR INDICATOR */
  SIGNAL FILEIN
END
FILEOUT:  ,
IF ( LENGTH(INPUT) = 0 ) × ( ERR = 1 ) THEN DO /* IF NONE, ASK USER   */
  SAY 'ENTER OUTPUT FILE NAME :'
  PARSE UPPER PULL OUTNAME INPUT         /* GET RESPONSE              */
END
ELSE DO                                  /* ELSE USE THEM             */
  PARSE UPPER VAR INPUT OUTNAME          /* PARSE OUTPUT FILE NAME    */
END
"ALLOC DA(" ×× OUTNAME ×× ") F(OUTPUT) OLD REU"
IF RC ^= 0 THEN DO
  SAY 'UNABLE TO ALLOCATE THAT FILE.  PLEASE TRY AGAIN.'
  ERR = 1                                /* REMEMBER THE ERROR        */
  SIGNAL FILEOUT
  END

RETURN 0
