RDSNALL  TITLE 'TSO CLIST UTILITY - RETURNS DSNAMES FOR GIVEN DDNAME VI+
               A PUTLINE.'
*%A AMODGEN
*
*=====================================================================*
*                                                                     *
*              PROGRAM TO ACCEPT AS INPUT THE DDNAME OF AN ALLOCATED  *
*        FILE, AND RETURN ALL THE DATA SET NAMES IN THE CONCATENATION *
*        WITH THEIR DISPOSITIONS AND THE VOLUME SERIAL NUMBER OF THE  *
*        DISKS THEY RESIDE ON.  THE PROGRAM USES PUTLINE TO OUTPUT    *
*        IT'S INFORMATION MAKING IT SUITABLE FOR USE IN CLISTS WHERE  *
*        IT MAY BE DESIREABLE TO USE SYSOUTTRAP TO CAPTURE THE OUTPUT *
*        AND PROCESS THE LISTS FURTHER.  A RETURN CODE OF OTHER THAN  *
*        ZERO INDICATES A PROBLEM AND SHOULD BE INVESTIGATED.         *
*                                                                     *
*              RETURN CODES ARE AS FOLLOWS:                           *
*                                                                     *
*        0     NORMAL RETURN, PROGRAM DETECTED NO ERRORS              *
*        4     DSNAME MAY BE UNUSEABLE ( DUMMY, JES, TCAM )           *
*        8     DDNAME IS NOT CURRENTLY ALLOCATED                      *
*        16    PARSE FAILED ( PROGRAM PROBLEM )                       *
*                                                                     *
*=====================================================================*
*
RDSNALL  CSECT
RDSNALL  AMODE 24
RDSNALL  RMODE 24
         REGS
         SPACE 1
         USING RDSNALL,R15         USE TEMPORARY BASE.
         B     BEGIN               BRANCH AROUND HEADER.
         DC    AL1(HEADEND-HEAD)
HEAD     DC    C'RDSNALL - &SYSDATE - &SYSTIME - LIST ALL DSNS FOR A DD+
               NAME'
HEADEND  EQU   *
BEGIN    STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS.
         LR    R12,R15             COPY BASE.
         DROP  R15                 DROP TEMPORARY BASE.
         USING RDSNALL,R12         (TELL ASSEMBLER).
         LR    R14,R13             POINT TO CALLER'S SAVE AREA.
         LA    R13,SAVE            POINT TO MY SAVE AREA.
         ST    R14,4(,R13)         CHAIN ...
         ST    R13,8(,R14)         ... SAVE AREAS.
*
*        SET UP POINTERS FOR LATER USE
*
         LR    R10,R1              PRESERVE POINTER TO CPPL.
         USING CPPL,R10            (TELL ASSEMBLER).
         LA    R8,IOPLR            POINT TO IOPL.
         USING IOPL,R8             (TELL ASSEMBLER).
         LA    R9,PPLR             POINT TO PPL.
         USING PPL,R9              (TELL ASSEMBLER).
         MVC   IOPLUPT,CPPLUPT     MOVE UPT ADDRESS TO IOPL FROM CPPL.
         MVC   PPLUPT,CPPLUPT       "    "     "     " PPL    "   "
         MVC   IOPLECT,CPPLECT      "   ECT    "     " IOPL   "   "
         MVC   PPLECT,CPPLECT       "    "     "     " PPL    "   "
         MVC   PPLCBUF,CPPLCBUF     "   CBUF   "     "  "     "   "
*
*        PARSE INPUT LOOKING FOR A  DDNAME TO PROCESS
*
         LR    R1,R9               POINT R1 TO THE PPL AND ...
         CALLTSSR EP=IKJPARS       ... PARSE THE INPUT BUFFER.
         LTR   R15,R15             DID THE PARSE GO OK?
         BZ    GOODPRS             B IF YES.  CONTINUE.
         LR    R1,R8               COPY IOPL POINTER FOR PUTLINE.
         PUTLINE OUTPUT=(PARSERR),MF=(E,(1)) SAY: PARSE NO GOOD.
         LA    R15,16              SET CC = 16 ...
         B     EXIT                ... AND EXIT.
*
*        PROCESS DDNAME OBTAINED FROM PARSING INPUT
*
GOODPRS  L     R7,ANSWER           POINT TO PARSE PDE(S).
         USING IKJPARMD,R7         (TELL ASSEMBLER).
         LH    R1,DDNAMEP+4        LOAD LENGTH OF DDNAME.
         BCTR  R1,*-*              SS-IFY LENGTH.
         L     R2,DDNAMEP          POINT TO DDNAME.
         EX    R1,DDMOVE           MOVE DDNAME TO HOLDER.
*      ( MVC   DDNAME(*-*),0(R2)   )
         LA    R1,5(,R1)           FIX LENGTH FOR MESSAGE SEGMENT.
         STH   R1,DDNAMEH          SAVE LENGTH FOR PUTLINE.
         IKJRLSA ANSWER            FREE THE PDS(S).
         DROP  R7
*
*        READ THE JFCB OF THE DDNAME INDICATED.
*
         MVC   DCB+X'28'(8),DDNAME MOVE DDNAME TO DUMMY DCB.
         RDJFCB DCB                COPY THE JFCB TO MY AREA.
         LTR   R15,R15             WAS DDNAME FOUND?
         BZ    DDFOUND             B IF YES.
         LR    R1,R8               POINT R1 TO IOPL FOR PUTLINE.
         PUTLINE OUTPUT=(DDNFERR),MF=(E,(1)) SAY: DDNAME NOT FOUND.
         LA    R15,8               SET CC OF 8.
         B     EXIT                EXIT.
*
*        CHECK THAT THE ARL PORTION OF THE READJFCB COMPLETED OK.
*
DDFOUND  EQU   *
         LA    R7,LIBJFCB          POINT TO JFCB
         USING JFCBD,R7            TELL ASSEMBLER ABOUT POINTER
         ICM   R7,X'F',SLBAREA     GET AND TEST ARL ADDRESS
         BNZ   ARLGOOD
         PUTLINE OUTPUT=(ARLFAIL),MF=(E,(1)) SAY: ARL FAILURE.
         B     EXIT
*
*        SET UP REGISTERS TO PROCESS ALL JFCB'S FROM ARL AREA
*
ARLGOOD  EQU   *
         LH    R5,SLBCONC          GET COUNT OF CONCATENATED DSN'S
         L     R6,SLBAREA          POINT TO AREA RETURNED BY ARL
*
*        PROCESS ONE JFCB FROM ARL AREA AT A TIME
*
NEXTJFCB EQU   *
         LA    R7,4(,R6)           GET THIS JFCB POINTER
         USING JFCBD,R7            (TELL ASSEMBLER).
         MVC   DSN,JFCBDSNM        MOVE DSN TO OUTPUT AREA.
*
*        SET UP DATA SET PERMISSIONS IN OUTPUT LINE
*
         MVC   PERMIT(1),JFCBIND2  GET INDICATOR BYTE #2
         NI    PERMIT,X'C8'        AND DOWN TO PERTINENT BITS
         LA    R15,PRMLEN          GET NUMBER OF TABLE ENTRIES
         LA    R14,PRMTABL         AND TABLE ADDRESS
*
*        LOOP THROUGH PERMISSIONS LOOKING FOR A BIT PATTERN MATCH
*
NEXTPRM  CLC   PERMIT(1),0(R14)    COMPARE WITH AN ENTRY
         BZ    PRMFIND             IF A MATCH WE'RE DONE
         LA    R14,4(R14)          ELSE BUMP TO NEXT TABLE ENTRY
         BCT   R15,NEXTPRM         CHECK NEXT ONE OR FALL THROUGH
*
*        MOVE MATCHING LITERAL OR *** TO OUTPUT LINE FOR DISPLAY
*
PRMFIND  MVC   PERMIT,1(R14)       MOVE LITERAL INTO OUTPUT LINE
*
*        PUT FIRST VOLUME SERIAL FOR DATA SET INTO OUTPUT LINE & PRINT
*
         MVC   OUTVSER,JFCBVOLS    PUT FIRST VOLSER IN LINE
         LR    R1,R8               POINT R1 TO IOPL FOR PUTLINE.
         PUTLINE MF=(E,(1))        OUTPUT DSNAME.
         LA    R6,180(,R6)         POINT TO NEXT ARL AREA
         BCT   R5,NEXTJFCB         PROCESS NEXT JFCB
*
         LA    R7,LIBJFCB          POINT TO ORIGINAL JFCB
         USING JFCBD,R7            TELL ASSEMBLER ABOUT POINTER
         LA    R15,4               SET CC = 4.
         TM    JFCBTSDM,JFCSDS     IS THIS DATASET JES2 OR ...
*                                  ... JES3 (SYSOUT OR SYSIN)?
         BO    EXIT                B IF YES.  LEAVE CC = 4.
         TM    JFCDSRG2,JFCORGTX+JFCORGTQ+JFCORGTR+JFCORGGS IS THIS
*                                  TCAM OR GAM DD?
         BNZ   EXIT                B IF YES.  LEAVE CC = 4.
         XR    R15,R15             ELSE SET CC TO 0.
         SPACE 1
EXIT     EQU   *
         L     R13,SAVE+4          POINT TO CALLER'S SAVE AREA.
         L     R14,12(,R13)        RELOAD CALLER'S RETURN ADDRESS.
         LM    R0,R12,20(R13)      RELOAD BALANCE OF CALLER'S REGS.
         BR    R14                 RETURN TO CALLER.
*
         TITLE 'DATA AREAS.'
         DS    0D
SAVE     DS    9D                  SAVE AREA.
*
ANDMASK  DC    X'00000F0F'         MASK DOWN TO BUSINESS DIGITS
ANSWER   DS    A
*
IOPLR    DS    (IOPLL)A            IOPL FOR PUTLINE.
         ORG   IOPLR+IOPLECB-IOPL
         DC    A(ECB)              POINTER IN IOPL TO ECB.
         ORG   IOPLR+IOPLIOPB-IOPL
         DC    A(PTPB)             IOPL POINTER TO PUTLINE PARM BLOCK.
         ORG   ,                   RE-ORG FORWARD.
         SPACE 1
ECB      DC    A(0)                PRESENTLY UNUSED ECB; CAN BE ...
*                                  ... POSTED TO ABORT PUTLINE.
PTPB     PUTLINE OUTPUT=(DSNBUF,,,DATA),MF=L
PPLR     DC    (PPLL)A(0)          PPL FOR PARSE.
         ORG   PPLR+PPLECB-PPL
         DC    A(ECB)              POINTER IN PPL TO ECB.
         ORG   PPLR+PPLPCL-PPL
         DC    A(PCL)              POINTER IN PPL TO PCL.
         ORG   PPLR+PPLANS-PPL
         DC    A(ANSWER)           POINTER IN PPL TO ANSWER PLACE.
         ORG   ,                   RE-ORG FORWARD.
DSNBUF   DC    AL2(PRLEN,0)
         DC    CL1' '
OUTVSER  DC    CL6' '
         DC    CL2' '
PERMIT   DC    CL3' '
         DC    CL2' '
DSN      DC    CL44' '
PRLEN    EQU   *-DSNBUF
*
         DS    0F
PRMTABL  EQU   *
         DC    AL1(JFCNEW),C'NEW'  FILE WAS ALLOCATED NEW
         DC    AL1(JFCMOD),C'MOD'  FILE WAS ALLOCATED MOD
         DC    AL1(JFCOLD),C'OLD'  FILE WAS ALLOCATED OLD
         DC    AL1(JFCOLD+JFCSHARE),C'SHR'   FILE WAS ALLOCATED SHR
PRMLEN   EQU   (*-PRMTABL)/4       END OF DISPOSITION CHOICES
         DC    AL1(00),C'***'      UNDETERMINED FILE DISPOSITION
*
         DS    0H
HEXTAB   DC    C'0123456789ABCDEF'
*
DDNFERR  DC    F'2'                THREE SEGMENTS.
         DC    A(DDNF1)            SEGMENT1.
         DC    A(DDNAMEH)          SEGMENT2.
         SPACE 1
DDNF1    DC    AL2(DDNF1L,0)
DDNF1A   DC    C'ERROR; DDNAME '
DDNF1B   DC    C' WAS NOT PRE-ALLOCATED.'
DDNF1L   EQU   *-DDNF1
PARSERR  DC    AL2(PARSERRL,0)
         DC    C'CANNOT PARSE INPUT.  SYSTEM PROBLEM.  SEE SYSTEMS PROG+
               AMMER.'
PARSERRL EQU   *-PARSERR
         SPACE 1
ARLFAIL  DC    AL2(ARLFERRL,0)
         DC    C'SYSTEM DOES NOT SUPPORT ARL PROCESSING.'
ARLFERRL EQU   *-ARLFAIL
         SPACE 1
PCL      IKJPARM
DDNAMEP  IKJPOSIT DSNAME,DDNAM,PROMPT='DDNAME +',                      +
               HELP=('DDNAME FOR WHICH THE ASSOCIATED DATASET NAME IS T+
               O BE RETURNED.')
         IKJENDP
DDNAMEH  DS    0H
         DC    AL2(*-*,DDNF1B-DDNF1A)  HEADER FOR DDNAME FOR PUTLINE.
DDNAME   DC    CL8' '              DDNAME HOLDER.
DDMOVE   MVC   DDNAME(*-*),0(R2)   *** EXECUTED ***
         PRINT NOGEN
DCB      DCB   DDNAME=DUMMY,MACRF=R,EXLST=EXLST, DUMMY DCB FOR RDJFCB  X
               DSORG=PO
         PRINT GEN
EXLST    DS    0A                  EXIT LIST FOR OPEN ROUTINE
         DC    X'13',AL3(SLB)      POINT TO ALLOCATION RETRIEVAL LIST
         DC    X'87',AL3(LIBJFCB)  POINT TO JFCB FOR FIRST DATA SET
*                                  '80' BIT SAYS LAST ENTRY IN LIST
SLB      IHAARL DSECT=NO,PREFIX=SLB
         DS    0F
LIBJFCB  DC    CL176' '            FIRST JFCB
*
JFCB     DS    0A                  JFCB
         DS    XL(JFCBLGTH)
*
         TITLE 'DSECTS.'
         IKJCPPL                   COMMAND PROCESSOR PARAMETER LIST
*
         IKJIOPL                   I/O PARAMETER LIST
IOPLL    EQU   (*-IOPL)/4          LENGTH OF IOPL IN WORDS.
*
         IKJPPL                    PARSE PARAMETER LIST
PPLL     EQU   (*-PPL)/4           LENGTH OF PPL IN WORDS.
*
JFCBD    DSECT
         IEFJFCBN                  SET LIST=YES FRO FULL EXPANSION
         PRINT NOGEN
         CVT   DSECT=YES
         END
