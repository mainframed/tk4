/*********************************************************************/
/*                                                                   */
/*        THIS REXX REPORTS ALL SUBSYSTEMS KNOWN TO MVS AT THE TIME  */
/*   IT IS RUN AND THE ACTIVE FUNCTIONS FOR EACH ONE.               */
/*                                                                   */
/*********************************************************************/

PARSE UPPER ARG A1 A2                    /* LOOK FOR POSSIBLE PARM   */

DEBUG = 'X'                              /* MAKE DEFAULTS 'X'        */
TRACE = 'X'
IF LENGTH(A1) < 1 THEN A1 = 'X'          /* ASSURE NON-NULL ARGS     */
IF LENGTH(A2) < 1 THEN A2 = 'X'
IF ABBREV('DEBUG',A1) = 1 × ,            /* CHECK FOR PARTIAL MATCH  */
   ABBREV('DEBUG',A2) = 1 THEN ,         /* & SET FULL = IF FOUND    */
     DEBUG = 'DEBUG'
IF ABBREV('TRACE',A1) = 1 × ,            /* CHECK FOR PARTIAL MATCH  */
   ABBREV('TRACE',A2) = 1 THEN DO        /* & START TRACE IF FOUND   */
     ADDRESS 'TSO'
     TS
END

/*********************************************************************/
/*                                                                   */
/* REXX :       S U B S Y S T E M   S T A T U S                      */
/*                                                                   */
/* DISPLAY ALL SUBSYSTEM NAMES AND WHICH FUNCTIONS ARE ACTIVE        */
/*                                                                   */
/*********************************************************************/

NUMERIC DIGITS 10                        /* CHOOSE INT. PRECISION    */
CVT   = ADDC(0,'10')                     /* POINT TO CVT             */
IF VALUE(DEBUG) = 'DEBUG' THEN DO        /* IF DEBUG SET, TELL HIM   */
  SAY 'VALUE FROM MEMORY LOCATION' ,
    D2X(AD1+X2D(AD2)) 'IS' C2X(STORAGE(D2X(AD1+X2D(AD2)),4))
  SAY 'CVT IS AT' D2X(CVT)
END
JESCT = ADDC(CVT, '0128' )               /* POINT TO JESCT           */
IF VALUE(DEBUG) = 'DEBUG' THEN DO        /* IF DEBUG SET REPORT      */
  SAY 'VALUE FROM MEMORY LOCATION' D2X(AD1+X2D(AD2)) 'IS' ,
    C2X(STORAGE(D2X(AD1+X2D(AD2)),4))
  SAY 'JESCT IS AT' D2X(JESCT)
END
SSCT  = ADDC(JESCT, '18' )               /* POINT TO SSCT            */
IF VALUE(DEBUG) = 'DEBUG' THEN DO        /* REPORT ONLY IF DEBUG SET */
  SAY 'VALUE FROM MEMORY LOCATION' D2X(AD1+X2D(AD2)) 'IS' ,
    C2X(STORAGE(D2X(AD1+X2D(AD2)),4))
  SAY 'SSCT IS AT' D2X(SSCT)
END
DO WHILE ( SSCT > 0 )
  NM = STORAGE(D2X(SSCT+8),4)
  SAY 'SUBSYSTEM NAME IS "'NM'" HEX =' C2X(NM) /* SHOW NAME AND HEX  */
  SSVT = ADDC(SSCT,'10')                 /* FIND SSCT ADDRESS        */
  IF SSVT > 0 THEN DO
    AL = SSVT + X2D('04')                /* OFFSET 4 = FUNC TABLE    */
    TB = STORAGE(D2X(AL),255)            /* TABLE ITSELF, 255 BYTES  */
    DO J = 1 TO 255
      IF SUBSTR(TB,J,1) ^= '00'X THEN    /* FUNCTION IS ACTIVE       */
        SAY 'ACTIVE FUNCTION ' J
    END
  END
  ELSE SAY 'NO SSVT'
  SAY ' '
  SSCT = ADDC(SSCT,'04')                 /* FIND NEXT SSCT ADDRESS   */
END
EXIT 0
/* */
/*********************************************************************/
/*                                                                   */
/*     ROUTINE TO RETURN A VALUE FROM STORAGE.  VALUE'S LOCATION IS  */
/* AT THE ADDRESS SPECIFIED BY THE SUM OF THE TWO ARGUMENTS.  THE    */
/* FIRST ARGUMENT IS A STANDARD DECIMAL NUMBER.  THE SECOND ONE IS   */
/* A HEXADECIMAL CONSTANT.                                           */
/*                                                                   */
/*********************************************************************/
/* */
ADDC:ARG AD1, AD2                        /* CALC ADDRESS FUNCTION    */
RETURN C2D(STORAGE(D2X(AD1+X2D(AD2)),4)) /* AD1 = DEC, AD2 = HEX     */
