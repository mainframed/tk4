         TITLE 'UCBSCAN - SCAN ALL DASD UCBS FOR CACHE LIST.'
*%A AMODGEN AUTH LOAD(TSOCGLA.LOADAUTH)
         SPACE 1
*===================================================================*
*                                                                   *
*        SUBROUTINE TO BE CALLED FROM A REXX TO SCAN ALL UCBS OF A  *
*   GIVEN DEVICE TYPE ( DASD, TAPE ) AND REPORT BACK WITH EACH      *
*   UNIT'S UCB.  THE REXX IS THEN FREE TO DO WHATEVER IT WANTS WITH *
*   THE INFORMATION, INCLUDING THE STORAGE FUNCTION TO ACCESS THE   *
*   UCB EXTENSION AND OTHER INFORMATION IF NECESSARY.               *
*                                                                   *
*        ON RETURN, THE FIRST 2 BYTES OF THE RESULT INDICATE THE    *
*   STATUS.  HEX 'FFFF' MEANS THAT THE SUPPLY OF THE PARTICULAR     *
*   UCB'S IS EXHAUSTED.  HEX 'FFFE' MEANS THAT AN ERROR IN THE      *
*   ARGUMENTS WAS DETECTED, AND AN EXPLANATION FOLLOWS.  ANYTHING   *
*   ELSE IS THE START OF A NORMAL UCB.  THE LAST UCB MUST BE USED   *
*   AS THE SECOND ARGUMENT ON SUBSEQUENT CALLS TO THIS ROUTINE SO   *
*   THE PROPER CONTINUITY OF UCB'S MAY BE MAINTAINED.               *
*                                                                   *
*===================================================================*
UCBSCAN  CSECT
         REGS
         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS.
         LR    R12,R15             COPY BASE.
         USING UCBSCAN,R12         (TELL ASSEMBLER).
         LR    R14,R13             PRESERVE CALLER'S SAVE AREA PTR.
         LA    R13,SAVE            POINT TO MY SAVE AREA
         ST    R13,8(,R14)         CHAIN ...
         ST    R14,SAVE+4          ... SAVE AREAS.
*
         LR    R2,R0               ADDRESS OF ENVIRONMENT BLOCK
         LR    R3,R1               ADDRESS OF EXTERNAL FUNCTION BLOCK
         L     R4,16(,R3)          GET FIRST PARM'S ADDRESS POINTER
         L     R5,0(,R4)           GET FIRST PARM'S ADDRESS
         L     R6,4(,R4)           GET FIRST PARM'S LENGTH
         C     R6,=X'00000005'     MAKE SURE WE ARE 4 BYTES OR LESS
         BL    GOODARG             IF SO, WE MAY CONTINUE
         L     R4,20(,R3)          GET EVAL BLOCK POINTER ADDRESS
         L     R4,0(,R4)           GET EVAL BLOCK ADDRESS
         CVD   R6,TEMPWORK         DECIMALIZE REGISTER 6
         UNPK  BADMESS1(4),TEMPWORK(8)
         OI    BADMESS1+3,X'F0'
         TR    BADMESS1(4),TRTAB-240
         MVC   16(L'BADMESS1+2,R4),BADMESS1-2 PUT MESSAGE IN RETURN
         L     R5,LBADMS1          GET RETURN ARGUMENT LENGTH
         ST    R5,8(,R4)           PUT IT IN EVAL BLOCK
         LH    R15,=X'0004'        SET UP NON-ZERO RETURN CODE
         B     BADOUT              RETURN IT
*
GOODARG  EQU   *
         LA    R9,8(,R4)           GET SECOND ARG ADDRESS POINTER
         L     R4,0(,R9)           GET SECOND ARG ADDRESS
         MVC   TEMPUCB(L'TEMPUCB+L'SCANWORK),0(R4) RECOVER WORK AREA
         BCT   R6,COMP1            DECREMENT FOR CLC
COMP1    EX    R6,CLC1             COMPARE FOR ALL ZEROES
*
* CLC1   CLC   0(*-*,R5),ZEROES
*
         LA    R6,1(,R6)           RESTORE ADDRESS
         BNZ   SEARCH              IF NOT FIRST PASS, DON'T INITIALIZE
         XC    SCANWORK,SCANWORK   INDICATE WE'RE STARTING FRESH
         LA    R9,8(,R9)           GET THIRD ADDRESS POINTER
         L     R4,0(,R9)           GET THIRD ARG ADDRESS
         L     R5,4(,R9)           GET THIRD ARG LENGTH
         C     R5,=X'00000003'     MAKE SURE WE ARE AT LEAST 4 BYTES
         BH    LONGOK              IF SO, WE MAY CONTINUE
         BCT   R5,MOVE1            DECREMEMT FOR INSTRUCTIONAL USE
MOVE1    EX    R5,MVC1             ELSE PUT PARTIAL IN MESSAGE
*
* MVC1   MVC   BADMESS3(*-*),0(R4) EXECUTED INSTRUCTION
*
         L     R4,20(,R3)          GET EVAL BLOCK POINTER ADDRESS
         L     R4,0(,R4)           GET EVAL BLOCK ADDRESS
         MVC   16(L'BADMESS3+2,R4),BADMESS3-2 PUT MESSAGE IN RETURN
MVC2     MVC   8(4,R4),LBADMS3     EXECUTED INSTRUCTION
         LH    R15,=X'0004'        SET UP NON-ZERO RETURN CODE
         B     BADOUT              RETURN IT
LONGOK   LA    R5,TYPES            POINT TO ALLOWED DEV TYPES
         LH    R14,NTYPES          GET COUNT OF POSSIBILITIES
NEXTRY   EQU   *
         CLC   0(4,R4),0(R5)       DO WE HAVE A MATCH
         BZ    TYPEFIND            IF SO WE'RE DONE
         LA    R5,5(,R5)           POINT TO NEXT ONE
         BCT   R14,NEXTRY          ELSE GO TRY AGAIN
         MVC   BADMESS2(4),0(R4)   PUT SOUGHT DEVICE IN MESSAGE
         L     R4,20(,R3)          GET EVAL BLOCK POINTER ADDRESS
         L     R4,0(,R4)           GET EVAL BLOCK ADDRESS
         MVC   16(L'BADMESS2+2,R4),BADMESS2-2 PUT MESSAGE IN RETURN
         L     R5,LBADMS2          GET RETURN ARG LENGTH
         ST    R5,8(,R4)           PUT IT INTO EVAL BLOCK
         LH    R15,=X'008'         SET UP BAD RETURN CODE
         B     BADOUT              RETURN LIKE THAT
         DS    0H
TYPEFIND EQU   *
         MVC   GOSCAN+X'A1'(1),4(R5) MOVE INDICATOR INTO POSITION
SEARCH   EQU   *
         L     R4,20(,R3)          GET EVAL BLOCK POINTER ADDRESS
         L     R4,0(,R4)           GET EVAL BLOCK ADDRESS
         B     GOSCAN
         CNOP  0,8                 ALIGN FIRST
GOSCAN   EQU   *
         UCBSCAN COPY,WORKAREA=SCANWORK,                               X
               DEVCLASS=DASD,DYNAMIC=YES,UCBAREA=TEMPUCB
         LTR   R15,R15             SEE IF WE GOT ONE
         BNZ   NOMORE
*        HERE WE HAVE A UCB POINTER TO PROCESS
         MVC   16(L'TEMPUCB+L'SCANWORK,R4),TEMPUCB MOVE UCB FOR RETURN
         L     R5,UCBLEN           GET RETURN ARGUMENT LENGTH
         ST    R5,8(,R4)           PUT IT IN EVAL BLOCK
         B     DONE
*
NOMORE   EQU   *
         L     R5,UCBLEN           GET RETURN ARGUMENT LENGTH
         ST    R5,8(,R4)           PUT IT IN EVAL BLOCK
         MVI   16(R4),X'FF'        MAKE ENDING UCB
         MVC   17(L'TEMPUCB+L'SCANWORK-1,R4),16(R4)
*
DONE     EQU   *
         XR    R15,R15             MAKE ZERO RETURN CODE
*
BADOUT   EQU   *
         L     R13,SAVE+4          GET CALLER'S SAVE AREA POINTER
         ST    R15,16(,R3)         SET RETURN CODE
         LM    R14,R12,12(R13)     GET CALLER'S REGISTERS
         XR    R15,R15             SET UP ZERO RETURN CODE
         BR    R14                 RETURN TO CALLER
*
         DS    0D
SAVE     DS    9D                  REGISTER STORAGE
TEMPWORK DS    1D
*                                  EXECUTED INSTRUCTIONS
CLC1     CLC   0(*-*,R5),ZEROES
MVC1     MVC   BADMESS3(*-*),0(R4)
*
ZEROES   DC    CL5'0000'
*
         DS    0F
TYPES    EQU   *                   TYPES OF UCBS IT IS POSSIBLE TO
         DC    CL4'ALL ',X'00'     SEARCH FOR WITH THIS SUBROUTINE
         DC    CL4'TAPE',X'80'
         DC    CL4'COMM',X'40'
         DC    CL4'DASD',X'20'
         DC    CL4'DISP',X'10'
         DC    CL4'UREC',X'08'
         DC    CL4'CHAR',X'04'
         DC    CL4'CTC ',X'41'
NTYPES   DC    AL2((*-TYPES)/5)    NUMBER OF 5 BYTE ENTRIES IN TABLE
*
         DC    X'FFFE'             ERROR INDICATOR
BADMESS1 DC    C'XXXX FIRST ARGUMENT MAY NOT EXCEED 5 CHARS IN LENGTH'
         DS    0F
LBADMS1  DC    AL4(L'BADMESS1+2)
*
         DC    X'FFFE'             ERROR INDICATOR
BADMESS2 DC    C'XXXX THAT DEVICE TYPE IS NOT DEFINED.'
         DS    0F
LBADMS2  DC    AL4(L'BADMESS2+2)
*
         DC    X'FFFE'             ERROR INDICATOR
BADMESS3 DC    C'???? - A DEVICE TYPE MUST BE 4 CHARACTERS IN LENGTH.'
         DS    0F
LBADMS3  DC    AL4(L'BADMESS3+2)
*
TRTAB    DC    C'0123456789ABCDEF'
*
         DS    0F
TEMPUCB  DS    CL48                AREA FOR UCB STORAGE
SCANWORK DS    CL100               UCBSCAN WORK AREA
         DS    0F
UCBLEN   DC    AL4(L'TEMPUCB+L'SCANWORK)
*
*        PRINT NOGEN
         DSECT
         IEFUCBOB                      UCB
         END
