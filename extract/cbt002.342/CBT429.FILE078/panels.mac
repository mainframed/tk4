./ ADD NAME=#ACFCOMP 0111-89305-96257-1013-00011-00018-00000-PANEL
%TUTORIAL ---------------- EDIT - 'ACFCOMP' MACRO ---------------------
%OPTION  ===>_ZCMD

 The%ACFCOMP+macro will invoke ACF2 and automatically compile and store
 rule you were editing.  ACF2 displays the complilation process.  If the
 is an access rule and is a resident access rule, a "F ACF2,RELOAD(rule)
 operator command is issued.  If the rule is a resource rule and the dir
 is a resident directory, a "F ACF2,REBUILD(directory)" operator command
 issued.  The user is returned to the EDIT display panel.

)END
./ ADD NAME=#ACFTRAP 0125-89305-96219-0632-00045-00018-00000-PANEL
)ATTR
  # AREA(SCRL) EXTEND(ON)
)BODY
%TUTORIAL --------------- EDIT - 'ACFTRAP' MACRO ----------------------
%OPTION  ===>_ZCMD

+The%ACFTRAP+macro is used to queue ACF subcommands for the ACF command
 processor.  A pseudo /%swaydo+/ command prompt of%ACF.+will be displaye
 during the queueing process.  Enter%END+to execute the subcommands.

+Use:
 Type%ACFTRAP {NOTE×DATA}+on the command line.  If%NOTE+is specified, th
 output will be returned as =NOTE= lines.  If%DATA+is specified, then th
 output will be returned as lines of data.
#ACFAREA ---------------------------------------------------------------
)AREA ACFAREA
%EDIT ---- SK4.CMDS(AWS) - 01.09 ------------------------------- COLUMNS
%COMMAND ===> acftrap note                                      SCROLL =

% ACF.+
+show mode
% ACF.+
+set terse
% ACF.+
+list -
+  if(nosuspend tso) -
+  like(ttsm-)
% ACF.+
+end

%EDIT ---- SK4.CMDS(AWS) - 01.09 ------------------------------- COLUMNS
%COMMAND ===>                                                   SCROLL =
%After +***************************** TOP OF DATA **********************
%==MSG> ACF INPUT+
%=NOTE=+show mode
%=NOTE=+set terse
%=NOTE=+list -
%=NOTE=+  if(nosuspend tso) -
%=NOTE=+  like(ttsm-)
%==MSG> ACF OUTPUT+
%=NOTE=+MODE: ACF
%=NOTE=+
%=NOTE=+ TTSMX1               AMVSHVYTTSMX1           FIRECALL 1
%=NOTE=+ TTSMX2               AMVSHVYTTSMX2           FIRECALL 2
)END
./ ADD NAME=#ASA2PC  0108-89305-96080-1442-00024-00018-00000-PANEL
%TUTORIAL ----------------- EDIT - 'ASA2PC' MACRO ---------------------
%OPTION  ===>_ZCMD

+The%ASA2PC+macro is used to convert ANSI-defined printer control charac
 (RECFM=**A) to ASCII control character representations.  Page breaks an
 line spacing are preserved after downloading the print file.

+Use:
+Type%ASA2PC+on the command line
+
%EDIT ---- TRIDJK.IOFSNAP -------------------------------------- COLUMNS
%COMMAND ===> asa2pc                                            SCROLL =
+****** ***************************** TOP OF DATA **********************
%==MSG>+INFORMATION FOR DATASET: TRIDJK.IOFSNAP
%=NOTE=+ALLOCATION:  VOL=WORK14  UNIT=3380
%=NOTE=+ATTRIBUTES:  RECFM=VBA  LRECL=255  BLKSIZE=3600  DSORG=PS
%=NOTE=+SPACE:       UNITS=TRACK  PRIMARY=1  SECONDARY=20  TOTAL=1  USED
%=NOTE=+DATES:       CREATED 1996/080, LAST REFERENCED 1996/080, EXPIRES
+000001%1+                     J E S 2  J O B  L O G  --  S Y S T E M  A
+000002%0+
+000003  13.16.22 TSU08975  $HASP373 TRIDJK   STARTED
+000004  13.16.22 TSU08975  ACF9CCCD USERID TRIDJK   IS ASSIGNED TO THIS
+000005  13.29.55 TSU08975  CSV003I REQUESTED MODULE ADRRELVL NOT FOUND
)END
./ ADD NAME=#BROWSE4 0122-89305-94340-1244-00024-00018-00000-PANEL
%TUTORIAL ---------------- EDIT - 'BROWSE4' MACRO ---------------------
%OPTION  ===>_ZCMD

+The%BROWSE4+macro allows you to browse another data set without exiting
 your current edit session.  When the nested browse session is terminate
 current edit session is resumed.  The contents of variable ZVIEW determ
 whether browse or view is invoked.  This version of browse is for ISPF
 Version 4.1.


+e.g. %COMMAND ===> browse4 abc    + causes browse to be entered for mem
                                     "ABC" of the current library.  If m
                                     "ABC" does not exist, then dataset
                                     "&ZUSER..ABC" will be browsed.

+e.g. %COMMAND ===> browse4 'sys1.proclib(jes2)'
                                   + causes browse to be entered for mem
                                     "JES2" in library "SYS1.PROCLIB".

+e.g. %COMMAND ===> browse4        + causes View-Entry panel to be displ

+e.g. %COMMAND ===> browse4 *prim  + causes member list for pattern "*PR
                                     be displayed for the current librar
)END
./ ADD NAME=#EOL     0120-89305-96095-1331-00028-00018-00000-PANEL
)ATTR DEFAULT(%+^)
       %   TYPE(TEXT) INTENS(HIGH)
       +   TYPE(TEXT) INTENS(LOW)
       ^   TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT)
)BODY
%TUTORIAL ------------------- EDIT - 'EOL' MACRO ----------------------
%COMMAND ===>^ZCMD
+
+The%EOL+macro is used to position the cursor at the end of the current
 line (like most PC editors do when you press the "End" scroll key).  Ye
 takes some interrupts and a PF key definition, but that is the price yo
 to pay for PC-like features on a 3270.  By pressing the EOL PF key repe
 you can jump to end of line (EOL) on successive lines.
+
+Use:
+Press appropriate PF key (the one assigned to EOL)
+
%COMMAND ===> <PFn>            +Assume%cursor+was on word%IN+on line 000
%Before+********************** TOP OF DATA *****************************
 000020 D: %IN+A858SES FIND ALL RECORDS FOR WHICH
 000021       REC-TY = 'SESC'
 000022     END FIND                             .--- Cursor is now here
                                                 ×
%After +********************** TOP OF DATA ***** v *********************
 000020 D:  IN A858SES FIND ALL RECORDS FOR WHICH_
 000021       REC-TY = 'SESC'
 000022     END FIND
)END
./ ADD NAME=#FX      0107-89305-96095-1332-00023-00018-00000-PANEL
%TUTORIAL -------------------- EDIT - 'FX' MACRO ----------------------
%COMMAND ===>_ZCMD

+The%FX+macro is used to execute a FIND ALL 'string' edit subcommand aft
 all lines have been excluded from display.  The resulting display is ju
 those lines which contain the 'string'.
+
+Use:
+Type%FX string {startcol} {endcol} {other FIND parameters}+on the comma
+
%COMMAND ===> FX 'RECORDS'+
%Before+********************** TOP OF DATA *****************************
 000020 D:  IN A858SES FIND ALL RECORDS FOR WHICH
 000021       REC-TY = 'SESC'
 000022     END FIND
 000023 S:  SORT RECORDS IN D BY NSN
 000024     NEW PAGE
%After +********************** TOP OF DATA *****************************
 000020 D:  IN A858SES FIND ALL RECORDS FOR WHICH
%- - -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  2 LINE(S) NOT DI
 000023 S:  SORT RECORDS IN D BY NSN
%- - -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  1 LINE(S) NOT DI
)END
./ ADD NAME=#FXC     0110-89305-96095-1332-00024-00018-00000-PANEL
%TUTORIAL ------------------- EDIT - 'FXC' MACRO ----------------------
%COMMAND ===>_ZCMD
+
+The%FXC+macro is used to execute a FIND ALL 'string' edit subcommand af
 all lines have been excluded from display.  The resulting display is ju
 those lines which contain the 'string'.  The 'string' used is the word
 the%cursor+is on.  Thus, this macro works best if you put it into a PF
+
+Use:
+Type%FXC+on the command line or press appropriate PF key
+
%COMMAND ===> <PFn>            +Assume%cursor+was on word%RECORDS+
%Before+********************** TOP OF DATA *****************************
 000020 D:  IN A858SES FIND ALL%RECORDS+FOR WHICH
 000021       REC-TY = 'SESC'
 000022     END FIND
 000023 S:  SORT RECORDS IN D BY NSN
 000024     NEW PAGE
%After +********************** TOP OF DATA *****************************
 000020 D:  IN A858SES FIND ALL RECORDS FOR WHICH
%- - -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  2 LINE(S) NOT DI
 000023 S:  SORT RECORDS IN D BY NSN
%- - -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  1 LINE(S) NOT DI
)END
./ ADD NAME=#GO      0110-89305-94362-0639-00007-00018-00000-PANEL
%TUTORIAL ------------------- EDIT - 'GO' MACRO -----------------------
%OPTION  ===>_ZCMD

+The%GO+macro is used to submit the current job in edit and then invoke
+Interactive Output Facility (IOF).
+
)END
./ ADD NAME=#JC      0111-89305-96095-1332-00024-00018-00000-PANEL
%TUTORIAL -------------------- EDIT - 'JC' MACRO ----------------------
%OPTION  ===>_ZCMD

+The%JC+macro is used to build a valid JOB card sequence at the beginnin
 the member currently being edited.  Included in the sequence is a JES2
 /*JOBPARM statement and a default OUTPUT JCL statement.  A JCLLIB state
 and JES2 /*ROUTE statements can optionally be generated.
+
+Use:
+Type%JC+on the command line
+
%EDIT ---- AD.JCL(TSOBATCH) - 01.10 ---------------------------- COLUMNS
%COMMAND ===> JC                                                SCROLL =
%After +***************************** TOP OF DATA **********************
+000001 //TRIDJKBR JOB (1G70AA1RTRI),'KALINICH, JOHN',
+000002 //             CLASS=B,
+000003 //             NOTIFY=TRIDJK,
+000004 //             MSGCLASS=R
+000005 /*JOBPARM R=TRI,T=9999,L=9999
+000006 //JCL      JCLLIB  ORDER=AD.PROCLIB
+000007 //JOB      OUTPUT  NAME='KALINICH, JOHN',
%- - -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  8 LINE(S) NOT DI
+000016 //             DEFAULT=YES
)END
./ ADD NAME=#LISTDSI 0103-89305-92310-0810-00019-00018-00000-PANEL
%TUTORIAL ----------------- EDIT - 'LISTDSI' MACRO --------------------
%OPTION  ===>_ZCMD

+The%LISTDSI+macro is used to display information about a dataset in Opt
 format.  The default dataset will be the data set that is being edited.
 can display information on another data set by giving the name as a par
 to LISTDSI.  For example, LISTDSI 'ALPHA.MJCL' will display information
 master jcl library.


 Information displayed by the LISTDSI command:

  %o+Dataset name
  %o+Allocation information
  %o+Dataset attributes
  %o+Space statistics
  %o+Date flags
  %o+PDS Directory information
)END
./ ADD NAME=#MEMLIST 0108-91298-93344-1102-00018-00017-00000-PANEL
%TUTORIAL ---------------- EDIT - 'MEMLIST' MACRO ---------------------
%COMMAND ===>_ZCMD
+
+The%MEMLIST+macro is used to list the members of the current PDS being
+edited to the screen.  A range may be used. %MEMLIST A L+would list
+all members starting with "A" to include all members starting with "L".
+The range may include up to eight characters on both ends.

+Use:
+Type%MEMLIST+on the command line
+
%COMMAND ===> MEMLIST A L
%Result:
+
%==MSG> MEMLIST:  FROM A TO L
%=NOTE=+APPLY      APPLYCK   BROWSEIT   LISTPDS1   LISTPDS2   LOOK
+
)END
./ ADD NAME=#OPER    0115-90311-96044-0926-00020-00024-00000-PANEL
%TUTORIAL ------------------ EDIT - 'OPER' MACRO ----------------------
%COMMAND ===>_ZCMD
+
+The%OPER+macro is used to send canned operator commands to SDSF.
+
+Use:
+Type%OPER+on the command line
+     and use%Cn+or%CC+to identify one or more operator commands
+
%EDIT ---- AD.OPERCMDS ----------------------------------------- COLUMNS
%COMMAND ===> oper                                              SCROLL =
+****** ***************************** TOP OF DATA **********************
%=NOTE=+SDSF OPERATOR COMMANDS ARE LIMITED TO 42 BYTES (ISFPANEL INPUT S
%=NOTE=+
+000001 Operator commands to vary terminals active:
+000002
%cc+003 /V NET,ACT,ID=AA9DA474  S. WILLIE
+000004 /V NET,ACT,ID=AA9DA475  R. PARROT
%cc+005 /V NET,ACT,ID=AA9DA476  D. QUAIL
)END
./ ADD NAME=#PLUG    0118-91298-96044-0925-00028-00022-00000-PANEL
)ATTR DEFAULT(%@^)
       %   TYPE(TEXT) INTENS(HIGH)
       @   TYPE(TEXT) INTENS(LOW)
       ^   TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT)
)BODY
%TUTORIAL ------------------ EDIT - 'PLUG' MACRO  ---------------------
%COMMAND ===>^ZCMD
@
@The%PLUG@macro is used to plug data into a range of lines starting at a
@given column.
@
@Use:
@Type%PLUG string {startcol} {.from .to}@on the command line.  If%.from@
@    %.to@labels are not specified, then mark the lines with the%On@rang
@     command.  If column is not specified, the cursor position will be
@                                                  cursor pos. ------.
@                                                                    ×
%COMMAND ===> plug xdccmd .a .b@                                     ×
%Before@********************** TOP OF DATA ************************* v *
%.A@001 AT UXM204.UXM2FMGR+560(FLDBLOCK.FLDNAME!+2,EQ,'MAINT_LV'):R (UXM
@000002 AT UXM204.UXM2FMGR+58C(FLDBLOCK.FLDNAME!+2,EQ,'MAINT_LV'):R (UXM
%.B@003 AT UXM204.UXM2FMGR+67C(FLDBLOCK.FLDNAME!+2,EQ,'MAINT_LV'):R (UXM
@
%After@*********************** TOP OF DATA *****************************
%.A@001 AT UXM204.UXM2FMGR+560(FLDBLOCK.FLDNAME!+2,EQ,'MAINT_LV'):R (XDC
@000002 AT UXM204.UXM2FMGR+58C(FLDBLOCK.FLDNAME!+2,EQ,'MAINT_LV'):R (XDC
%.B@003 AT UXM204.UXM2FMGR+67C(FLDBLOCK.FLDNAME!+2,EQ,'MAINT_LV'):R (XDC
)END
./ ADD NAME=#PROFSET 0135-89305-97016-1320-00069-00018-00000-PANEL
)ATTR
  # AREA(SCRL) EXTEND(ON)
)BODY
%TUTORIAL ---------------- EDIT - 'PROFSET' MACRO ---------------------
%OPTION  ===>_ZCMD

+The%PROFSET+macro is used to mass change all edit profiles for a given
 ISPF application.  The current xxxEDIT (xxx = applid) table rows are re
 For each row, a temporary file is allocated with the same low level qua
 record format, and logical record length; then ISPF edit is invoked wit
 an initial edit macro to set profile values (e.g., RECOVERY OFF NOWARN)

+Use:
 Type%PROFSET editmacro+on the command line.
#PROFAREA --------------------------------------------------------------
)AREA PROFAREA
%EDIT ---- SYS1.HELP(ME) - 01.01 ------------------------------- COLUMNS
%COMMAND ===> profset nowarn                                    SCROLL =
+***************************** Top of Data *****************************
+000001 * Will somebody please help me?
%==MSG>
%==MSG> THE FOLLOWING IS A LIST OF YOUR CURRENT EDIT PROFILES:
%==MSG>
%==MSG>    PROFILE  LRECL  RECFM  BNDL  BNDR  FLAGS
%==MSG>    -------  -----  -----  ----  ----  -----
%=NOTE=+   ZDEFAULT 0      *      0     0     100000100000000000000000
%=NOTE=+   HELP     80     F      0     0     010000100101100000010000
%=NOTE=+   ISPPROF  80     F      0     0     000000100000000000000000
%=NOTE=+   EXT      239    V      0     0     000000100000000000000000
%=NOTE=+   CNTL     80     F      0     0     010000100101000000000000
%=NOTE=+   MACLIB   80     F      0     0     000000100101000000000000
%=NOTE=+   MODGEN   80     F      0     0     010000100101000000000000
%=NOTE=+   PDS353   80     F      0     0     010000100000000000000000
%=NOTE=+   PROCLIB  80     F      0     0     010000000101000000000000
%=NOTE=+   CAIMAC   80     F      0     0     010000100101000000000000
%=NOTE=+   OPERCMDS 80     F      0     0     000000100000000000000000
%=NOTE=+   PARMLIB  80     F      0     0     010000100101000000000000
%=NOTE=+   PDS      80     F      0     0     010000100000000000000000
%=NOTE=+   SCOTHORN 239    V      0     0     000000100000000000000000
%=NOTE=+   LOGONIDS 80     F      0     0     010000100000000000000000
%=NOTE=+   INSTALIB 80     F      0     0     010000100101000000000000
%=NOTE=+   TEXTLIB  80     F      0     0     010000100101000000000000
%=NOTE=+   R0109517 68     V      0     0     000000100000000000000000
%=NOTE=+   SOURCE   80     F      0     0     010000000101000000000000
%=NOTE=+   RULES    80     F      0     0     010000100101000000000000
%=NOTE=+   RULE     80     F      0     0     010000100101000000000000
%=NOTE=+   R0106830 80     F      0     0     000000100000000000000000
%=NOTE=+   SCOT     239    V      0     0     000000100000000000000000
%=NOTE=+   ICL      80     F      0     0     000000100000000000000000
%=NOTE=+   ISPF     80     F      0     0     000000100000000000000000
%=NOTE=+   CLIST    80     F      0     0     010000000000100000010000
%=NOTE=+   ISPPLIB  80     F      0     0     000000100000000000010000
+**************************** Bottom of Data ***************************


+Intitial edit macro:

%EDIT ---- AD.CLIST(NOWARN) - 01.09 ---------------------------- COLUMNS
%COMMAND ===>                                                   SCROLL =
+***************************** Top of Data *****************************
+000001 /* Rexx */
+000002 Address ISREDIT
+000003 "ISREDIT MACRO"
+000004 "ISREDIT RECOVERY OFF NOWARN"
+000005 "ISREDIT END"
+000006 Exit
+**************************** Bottom of Data ***************************
)END
/* Based on PROFLIST edit macro by Bob Zimmerman, CNA Insurance. */
./ ADD NAME=#RUN     0113-89305-96044-0925-00022-00018-00000-PANEL
%TUTORIAL ------------------- EDIT - 'RUN' MACRO ----------------------
%OPTION  ===>_ZCMD

+The%RUN+macro is used to%EXECute+the CLIST/EXEC that currently is being
 CLIST/EXEC parameters can be specified after the word RUN.  If any para
 require quotes, use two for every one.  The edit macro will supply the
 and last quote marks.  Use%Cn+or%CC+to identify a section of commands i
 just want to execute a portion of the code.

%EDIT ---- AD.CLIST(JPK) - 01.09 ------------------------------- COLUMNS
%COMMAND ===> run                                               SCROLL =
+****** ***************************** TOP OF DATA **********************
+000001 PROC 0 DEBUG
+000002 IF &&DEBUG = &&STR(DEBUG) THEN -
+000003   CONTROL MSG NOFLUSH LIST CONLIST SYMLIST PROMPT
+000004 ELSE -
+000005   CONTROL NOMSG NOFLUSH NOLIST NOCONLIST NOSYMLIST
%cc+006 PTSSTEP RESET
+000007 PTSSTEP OVERRIDE DA('AD.CMDLIB')
+000008 ISPEXEC SELECT PANEL(ISR@TEST) NEWAPPL(ISR)
%cc+009 PTSSTEP RESET
)END
./ ADD NAME=#RUNACF  0122-89305-96096-0648-00061-00018-00000-PANEL
)ATTR
  # AREA(SCRL) EXTEND(ON)
)BODY
%TUTORIAL ---------------- EDIT - 'RUNACF' MACRO ----------------------
%OPTION  ===>_ZCMD

+The%RUNACF+macro is used to send ACF subcommands to the ACF command
 processor.

+Use:
 Type%RUNACF {NOTE×DATA}+on the command line and use%Cn+or%CC+to identif
 a section of commands you want to execute.  If%NOTE+is specified, then
 output will be returned as =NOTE= lines.  If%DATA+is specified, then th
 output will be returned as lines of data.  If no parameter is specified
 then TSO line mode output will be returned.
#ACFAREA ---------------------------------------------------------------
)AREA ACFAREA
%EDIT ---- SK4.CMDS(RUNME) - 01.09 ----------------------------- COLUMNS
%COMMAND ===> runacf note                                       SCROLL =
%Before+***************************** TOP OF DATA **********************
%cc+001 show mode
+000002
+000003 set terse
+000004 list -
+000005   if(nosuspend tso) -
+000006   like(ttsm-)
+000007
+000008 compile * store
+000009 $key(testrule)
+000010 - uid(*) read(a)
+000011 end
+000012
+000013 set rule
%cc+014 delete testrule
%After +***************************** TOP OF DATA **********************
+000001 show mode
+000002
+000003 set terse
+000004 list -
+000005   if(nosuspend tso) -
+000006   like(ttsm-)
+000007
+000008 compile * store
+000009 $key(testrule)
+000010 - uid(*) read(a)
+000011 end
+000012
+000013 set rule
+000014 delete testrule
%==MSG> ACF OUTPUT+
%=NOTE=+MODE: ACF
%=NOTE=+
%=NOTE=+ TTSMX1               AMVSHVYTTSMX1           FIRECALL 1
%=NOTE=+ TTSMX2               AMVSHVYTTSMX2           FIRECALL 2
%=NOTE=+ACF COMPILER ENTERED
%=NOTE=+
%=NOTE=+IN ONE OR MORE RULES, THE EXECUTE ACCESS WAS SET TO THE READ ACC
%=NOTE=+TOTAL RECORD LENGTH= 93 BYTES, 2 PERCENT UTILIZED
%=NOTE=+RULE  TESTRULE STORED
%=NOTE=+RULE TESTRULE  DELETED
)END
./ ADD NAME=#SHOWCUT 0104-89305-90282-1357-00008-00018-00000-PANEL
%TUTORIAL ---------------- EDIT - 'SHOWCUT' MACRO ---------------------
%OPTION  ===>_ZCMD

+The%SHOWCUT+macro is used to browse the ISPF cut table created by the C
 macro.  A CUT table name can be entered as a parameter, otherwise the d
 name is used.

)END
./ ADD NAME=#TESTACF 0129-89305-96228-0707-00060-00018-00000-PANEL
)ATTR
  # AREA(SCRL) EXTEND(ON)
)BODY
%TUTORIAL ---------------- EDIT - 'TESTACF' MACRO ---------------------
%OPTION  ===>_ZCMD

+The%TESTACF+macro is used to test ACF2 rules based on the DSN= paramete
 values in your JCL.  If the type of access is not specified, then READ
 is assumed.

+Use:
 Type%TESTACF logonid×UID(uidstring) {NOTE×DATA} {READ×WRITE×ALLOC×EXEC}
 on the command line and use%Cn+or%CC+to identify a section of JCL you
 want to test.  If%NOTE+is specified, then the output will be returned
 as =NOTE= lines.  If%DATA+is specified, then the output will be returne
 as lines of data.  If no parameter is specified, then TSO line mode
 output will be returned.
#ACFAREA ---------------------------------------------------------------
)AREA ACFAREA
%EDIT ---- AD.JCL(TINATINA) - 02.01 ---------------------------- COLUMNS
%COMMAND ===> testacf trixtc note                               SCROLL =
%Before+***************************** TOP OF DATA **********************
%- - -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  8 LINE(S) NOT DI
+%c2+10 //STEPLIB  DD  DSN=AP.KNET50A.LOADLIB,DISP=SHR
+000011 //JAVA     DD  DSN=AD.CMGR,DISP=SHR
%- - -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - 25 LINE(S) NOT DI
%After +***************************** TOP OF DATA **********************
%- - -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  8 LINE(S) NOT DI
+000010 //STEPLIB  DD  DSN=AP.KNET50A.LOADLIB,DISP=SHR
%==MSG> ACF TEST OUTPUT+
%=NOTE=+THE FOLLOWING PARAMETERS ARE IN EFFECT:
%=NOTE=+ DDN=******     UID=ATRIXM2TRIXTC
%=NOTE=+ DATE=08/09/96  SOURCE=********
%=NOTE=+ VOL=           DSN=AP.KNET50A.LOADLIB
%=NOTE=+ PGM=******     LIB=***.***
%=NOTE=+ TIME=*****     ACCESS=READ
%=NOTE=+
%=NOTE=+ VALIDATED RULE LINE FROM AP
%=NOTE=+ - UID(*) READ(A) EXEC(A)
%=NOTE=+
%=NOTE=+ RESULT: ALLOW
%=NOTE=+ REASON: ACCESS  =RULE PERMITTING ACCESS MATCHED ENVIRONMENT
%=NOTE=+
+000011 //JAVA     DD  DSN=AD.CMGR,DISP=SHR
%==MSG> ACF TEST OUTPUT+
%=NOTE=+THE FOLLOWING PARAMETERS ARE IN EFFECT:
%=NOTE=+ DDN=******     UID=ATRIXM2TRIXTC
%=NOTE=+ DATE=08/09/96  SOURCE=********
%=NOTE=+ VOL=           DSN=AD.CMGR
%=NOTE=+ PGM=******     LIB=***.***
%=NOTE=+ TIME=*****     ACCESS=READ
%=NOTE=+
%=NOTE=+ VALIDATED RULE LINE FROM AD
%=NOTE=+ CMGR UID(*)
%=NOTE=+
%=NOTE=+ RESULT: DENY
%=NOTE=+ REASON: NOACCESS=RULE PREVENTED ACCESS
%=NOTE=+
%- - -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - 25 LINE(S) NOT DI
)END
./ ADD NAME=#UNX     0110-89305-96095-1333-00024-00018-00000-PANEL
%TUTORIAL ------------------- EDIT - 'UNX' MACRO ----------------------
%COMMAND ===>_ZCMD

+The%UNX+macro is used to show the first n line(s) from each block of ex
+lines in the member.  If no operand is given, the number of lines shown
+defaults to 1.
+
+Use:
+Type%UNX {numlines}+on the command line
+
%COMMAND ===> UNX 1+
%Before+********************** TOP OF DATA *****************************
 000001 //DELETE   EXEC  PGM=IDCAMS,
%- - -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - 20 LINE(S) NOT DI
 000022 //ALTER    EXEC  PGM=IDCAMS,
%- - -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - 12 LINE(S) NOT DI
%After +********************** TOP OF DATA *****************************
 000001 //DELETE   EXEC  PGM=IDCAMS,
 000002 //             COND=(0,LT)
%- - -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - 19 LINE(S) NOT DI
 000022 //ALTER    EXEC  PGM=IDCAMS,
 000023 //             COND=(4,LT)
%- - -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - 11 LINE(S) NOT DI
)END
./ ADD NAME=#WEAVE   0122-91298-94136-1453-00029-00022-00000-PANEL
)ATTR DEFAULT(%@^)
       %   TYPE(TEXT) INTENS(HIGH)
       @   TYPE(TEXT) INTENS(LOW)
       ^   TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT)
)BODY
%TUTORIAL ----------------- EDIT - 'WEAVE' MACRO  ---------------------
%COMMAND ===>^ZCMD
@
@The%WEAVE@macro is used to interlace data from the CUT table into a ran
@of lines.
@
@Use:
@Type%WEAVE {.from .to} {cuttable}@on the command line.  If%.from@and%.t
@     are not specified, then mark the lines with the%On@range command.
@
%COMMAND ===> weave .a .b@
%Before@********************** TOP OF DATA *****************************
%.A@001 KB CREATE PAYROLL  .01 TRIDJK
@000002 KB CREATE LOANS    .01 TRIDJK
%.B@003 KB CREATE FLIGHTS  .01 TRIDJK
@
%After@*********************** TOP OF DATA *****************************
%.A@001 KB CREATE PAYROLL  .01 TRIDJK
@000002 CLEAR                            <--- from CUT table
@000003 KB CREATE LOANS    .01 TRIDJK
@000004 CLEAR                            <--- from CUT table
%.B@005 KB CREATE FLIGHTS  .01 TRIDJK
@000006 CLEAR                            <--- from CUT table
)END
./ ADD NAME=CALCP    0158-91268-93201-0727-00009-00022-00000-PANEL
)BODY WINDOW(76,3)
%===>_XPRESHUN
+
+
)PROC
&zedsmsg = 'Enter Expression'
&zedlmsg = 'Enter REXX arithmetic expression for evaluation'
VER (&XPRESHUN,NB,MSG=ISRZ001W)
)END
./ ADD NAME=DSK33XX  0110-90267-92280-0709-00030-00025-00000-PANEL
)ATTR
  ^   TYPE(OUTPUT)  INTENS(HIGH)
)BODY
%-------------------------- DISK SPACE CALCULATION ---------------------
%COMMAND ===>_ZCMD
+
+ENTER SPACE INFORMATION:
    BLOCK SIZE      %===>_DLEN +
    NUMBER OF BLOCKS%===>_NUMREC    +
    KEY LENGTH      %===>_Z  +          (blank if no key)

                                  IBM             IBM             IBM
+CALCULATION RESULTS:             3350            3380            3390
    USED BYTES PER TRACK    %===>^UTRK5+         ^UTRK8+         ^UTRK9+
    PERCENT USED PER TRACK  %===>^PTRK5+         ^PTRK8+         ^PTRK9+
    WASTED BYTES PER TRACK  %===>^WTRK5+         ^WTRK8+         ^WTRK9+
    BLOCKS PER TRACK        %===>^BTRK5+         ^BTRK8+         ^BTRK9+
    BLOCKS PER CYLINDER     %===>^BCYL5+         ^BCYL8+         ^BCYL9+
    TOTAL TRACKS REQUIRED   %===>^TTRK5       +  ^TTRK8       +  ^TTRK9
    TOTAL CYLINDERS REQUIRED%===>^TCYL5       +  ^TCYL8       +  ^TCYL9
    TOTAL VOLUMES REQUIRED  %===>^TVOL5       +  ^TVOL8       +  ^TVOL9
                                 (555 cyls)      (1770 cyls)     (2226 c
                                 %1x+density     %2x+density     %2x+den
)INIT
.ZVARS = '(KLEN)'
)PROC
VER (&DLEN,NB,RANGE,0,56664)
VER (&NUMREC,NB,RANGE,1,2147483647)
VER (&KLEN,RANGE,0,255)
)END
./ ADD NAME=DVOL     0101-94119-98197-0731-00033-00022-00000-PANEL
%-------------------------- DISPLAY DISK FREE SPACE --------------------
%COMMAND ===>_ZCMD
+
+   VOLSER %===>_DSER1 +           (A partial volser may be entered)
+          %===>_DSER2 +           (Optional)
+          %===>_DSER3 +           (Optional)
+          %===>_DSER4 +           (Optional)
+          %===>_DSER5 +           (Optional)
+          %===>_DSER6 +           (Optional)
+          %===>_DSER7 +           (Optional)
+          %===>_DSER8 +           (Optional)
+          %===>_DSER9 +           (Optional)
+          %===>_DSER10+           (Optional)
+
+   DISPLAY%===>_DTYPE+            (SHORT or LONG display request)
)INIT
.CURSOR = DSER1
&DTYPE = SHORT
)PROC
VER(&DSER1,NB)
VER(&DSER2,NAME)
VER(&DSER3,NAME)
VER(&DSER4,NAME)
VER(&DSER5,NAME)
VER(&DSER6,NAME)
VER(&DSER7,NAME)
VER(&DSER8,NAME)
VER(&DSER9,NAME)
VER(&DSER10,NAME)
VER(&DTYPE,LIST,SHORT,LONG)
VPUT (DSER1 DSER2 DSER3 DSER4 DSER5) PROFILE
VPUT (DSER6 DSER7 DSER8 DSER9 DSER10) PROFILE
)END
./ ADD NAME=DVOLTBLH 0130-91101-98196-0943-00027-00017-00000-PANEL
)ATTR DEFAULT(%#_)
    ! TYPE(TEXT) INTENS(HIGH) COLOR(TURQ)
    @ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
    ^ TYPE(TEXT) INTENS(HIGH) COLOR(GREEN)
)BODY
%TUTORIAL ----------------- DISPLAY DISK FREE SPACE -------------------
%COMMAND ===>_ZCMD                                            %SCROLL ==
#
 This option displays DASD free space statistics for a range of disk vol

 Volumes can be located with the the%F#and%L#commands.  At the command l
 enter%F#volser or%L#volser:

            %L WORK   #(Position to volsers starting with WORK)
            %F WORK15 #(Position to volser WORK15)

 The table can be sorted by volume serial or total tracks.  At the comma
 enter%SORT#keyname, where keyname is%SERIAL#or%TOTAL.# The primary sort
 will always be UNIT TYPE (in descending sequence:  3390M2, 3380D, 3380,

%SERIAL  --UNIT--   ATTRIBUTES VSAM AVAIL -----TOTALS----- LARGEST-EXTEN
%       ADDR TYPE   MOUNT/USE      DSCBS TRACKS  EXT  CYL  CYL+TR  TRACK
!WORK15#0987@3390M2#RESDNT/STOR      836^ 19550#  45 1286  647+12   9717
!WORK16#0997@3390M2#RESDNT/STOR      831^   293#  38    8    8+ 0    120
!WORK17#0907@3390M2#RESDNT/STOR      849^ 19813#  39 1308  587+13   8818
+****************************** Bottom of data  ************************
)END
./ ADD NAME=DVOLTBLL 0121-91101-98176-1455-00017-00017-00000-PANEL
)ATTR DEFAULT(%@_)
%   TYPE(TEXT) INTENS(HIGH)
@   TYPE(TEXT) INTENS(LOW)
_   TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT)
!   TYPE(OUTPUT) INTENS(LOW) CAPS(OFF) JUST(ASIS)
)BODY
%-------------------------- DISPLAY DISK FREE SPACE --------------------
%COMMAND ===>_ZCMD                                            %SCROLL ==
%
)MODEL
!Z
)INIT
.CURSOR = ZCMD
.ZVARS = '(DVOLLINE)'
&AMT=CSR
)PROC
)END
./ ADD NAME=DVOLTBLS 0136-91101-98196-0931-00028-00017-00000-PANEL
)ATTR DEFAULT(%@_)
%   TYPE(TEXT) INTENS(HIGH)
@   TYPE(TEXT) INTENS(LOW)
_   TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT)
!   TYPE(OUTPUT) INTENS(LOW) CAPS(OFF) JUST(ASIS)
)BODY
%-------------------------- DISPLAY DISK FREE SPACE --------------------
%COMMAND ===>_ZCMD                                            %SCROLL ==
%
!Z     @    !Z     @                    !Z     @
%SERIAL  --UNIT--   ATTRIBUTES VSAM AVAIL -----TOTALS----- LARGEST-EXTEN
%       ADDR TYPE   MOUNT/USE      DSCBS TRACKS  EXT  CYL  CYL+TR  TRACK
)MODEL
!Z     !Z   !Z     !Z                   !Z     !Z
)INIT
.HELP = DVOLTBLH
.CURSOR = ZCMD
.ZVARS = '(KEY1 KEY2 KEY3 DVOLSER DVOLF1 DVOLUNIT +
           DVOLF2 DVOLTOT DVOLF3)'
&AMT=CSR
.ATTR(KEY1)      = 'INTENS(HIGH) COLOR(RED)'
.ATTR(KEY2)      = 'INTENS(HIGH) COLOR(RED)'
.ATTR(KEY3)      = 'INTENS(HIGH) COLOR(RED)'
.ATTR(DVOLSER)   = 'INTENS(HIGH) COLOR(TURQ)'
.ATTR(DVOLUNIT)  = 'INTENS(HIGH) COLOR(YELLOW)'
.ATTR(DVOLTOT)   = 'INTENS(HIGH) COLOR(GREEN)'
)PROC
)END
./ ADD NAME=EBH01A   0106-89296-92329-0651-00026-00028-00000-PANEL
%TUTORIAL -------------------  EDIT/BROWSE MENU  ----------------------
%COMMAND ===>_ZCMD
+
    This panel allows you to%EDIT+or%BROWSE+datasets by the numbers.
    When you edit more than one dataset (partitioned, sequential, or
    LIBRARIAN) a session, the menu of datasets eliminates typing and typ

    Specify the number of the PDS, and member you want to EDIT/BROWSE:

   +PDS NUMBER   %===>+     (0 to change defaults, 20 for edit entry pan
   +MEMBER       %===>+     (Blank or pattern for member selection list)
   +BROWSE MARKER%===>+     (ON to display%>+browse marker)

    If you have not defined your default libraries and their modes or
    want to change them, select PDS number 0.

    A dataset and member can be express selected from another ISPF panel
    you know the dataset number and member name without looking at the m

    For example: %=E.1+to select dataset number 1 or
                 %=E.1.M204*+to select dataset number 1, members M204...
)INIT
&ZHTOP = EBH01A
)PROC
 &CONT = EBH01B
)END
./ ADD NAME=EBH01B   0154-86053-99090-0659-00023-00029-00000-PANEL
)BODY DEFAULT(%+^)
%TUTORIAL -------------  SET DEFAULT MODES AND LIBRARIES  -------------
%COMMAND ===>^ZCMD
+
  Enter the mode (%E+for edit,%B+for browse,%LE+for ELIPS edit,%LB+for E
  browse,%PDS+for pds85,%V+for view) and library name below.

  + PDS  MODE LIBRARY                     PDS  MODE LIBRARY

   %  1  le__ 'source.s2k'_______________% 11  b___ 'sys1.parmlib'______
   %  2  b___ 'tridjk.clist'_____________% 12  v___ 'sys1.proclib'______
   %  3  pds_ 'ad.ispplib'_______________% 13  pds_ 'sys1.lpalib'_______
   %  4  pds_ 'ad.ispmlib'_______________% 14  pds_ 'ad.xdc.samplib'____
   %  5  pds_ 'ad.ispslib'_______________% 15  pds_ 'ad.xdc.install'____
   %  6  pds_ 'ad.tlib'__________________% 16  pds_ 'nomad.schema.data'_
   %  7  pds_ 'ad.cbtmods.ver329'________% 17  lb__ 'source.alpha1'_____
   %  8  e___ 'tridjk.gen.cntl'__________% 18  lb__ 'source.alpha2'_____
   %  9  pds_ 'ad.proclib'_______________% 19  lb__ 'source.mvs'________
   % 10  v___ 's2k.parms'________________+

+   Press%ENTER+key to process changes.
+   Enter%END+command or press%PF3+to exit.
)END
./ ADD NAME=EB01A    0127-88063-95069-0638-00143-00078-00000-PANEL
)ATTR
  ^   TYPE(OUTPUT)  INTENS(LOW) CAPS(ON)
  !   TYPE(OUTPUT)  INTENS(HIGH) CAPS(ON)
)BODY
%----------------------------  EDIT/BROWSE MENU  -----------------------
%COMMAND ===>_ZCMD
+
+ISPF LIBRARY:
   +PDS NUMBER   %===>_Z +
   +MEMBER       %===>_MEMBER  +    (Blank or pattern for member selecti
   +BROWSE MARKER%===>_BRM+         (ON or OFF)

 + PDS  LIBRARY                          PDS  LIBRARY

    %0 +Change defaults below

  !Z+1 ^EB1                            !Z+11 ^EB11
  !Z+2 ^EB2                            !Z+12 ^EB12
  !Z+3 ^EB3                            !Z+13 ^EB13
  !Z+4 ^EB4                            !Z+14 ^EB14
  !Z+5 ^EB5                            !Z+15 ^EB15
  !Z+6 ^EB6                            !Z+16 ^EB16
  !Z+7 ^EB7                            !Z+17 ^EB17
  !Z+8 ^EB8                            !Z+18 ^EB18
  !Z+9 ^EB9                            !Z+19 ^EB19
 !Z+10 ^EB10                           %  20  Edit+- Entry Panel

)INIT
  .ZVARS  = '(PDS +
              EF1 EF11 EF2 EF12 EF3 EF13 EF4 EF14 EF5 EF15 +
              EF6 EF16 EF7 EF17 EF8 EF18 EF9 EF19 EF10)'
  .CURSOR = PDS
  .HELP   = EBH01A
  &EF1  = ' '
  &EF2  = ' '
  &EF3  = ' '
  &EF4  = ' '
  &EF5  = ' '
  &EF6  = ' '
  &EF7  = ' '
  &EF8  = ' '
  &EF9  = ' '
  &EF10 = ' '
  &EF11 = ' '
  &EF12 = ' '
  &EF13 = ' '
  &EF14 = ' '
  &EF15 = ' '
  &EF16 = ' '
  &EF17 = ' '
  &EF18 = ' '
  &EF19 = ' '
  IF (&BRM = &Z)
    &BRM  = 'OFF'
  &PDS = TRUNC(&PDS,'.')
  IF (.TRAIL ^= &Z)
    &MEMBER = .TRAIL
  IF (&BRM = 'ON')
    IF (&EM1 = 'B','LB','V')
      &EF1 = '>'
    IF (&EM2 = 'B','LB','V')
      &EF2 = '>'
    IF (&EM3 = 'B','LB','V')
      &EF3 = '>'
    IF (&EM4 = 'B','LB','V')
      &EF4 = '>'
    IF (&EM5 = 'B','LB','V')
      &EF5 = '>'
    IF (&EM6 = 'B','LB','V')
      &EF6 = '>'
    IF (&EM7 = 'B','LB','V')
      &EF7 = '>'
    IF (&EM8 = 'B','LB','V')
      &EF8 = '>'
    IF (&EM9 = 'B','LB','V')
      &EF9 = '>'
    IF (&EM10 = 'B','LB','V')
      &EF10 = '>'
    IF (&EM11 = 'B','LB','V')
      &EF11 = '>'
    IF (&EM12 = 'B','LB','V')
      &EF12 = '>'
    IF (&EM13 = 'B','LB','V')
      &EF13 = '>'
    IF (&EM14 = 'B','LB','V')
      &EF14 = '>'
    IF (&EM15 = 'B','LB','V')
      &EF15 = '>'
    IF (&EM16 = 'B','LB','V')
      &EF16 = '>'
    IF (&EM17 = 'B','LB','V')
      &EF17 = '>'
    IF (&EM18 = 'B','LB','V')
      &EF18 = '>'
    IF (&EM19 = 'B','LB','V')
      &EF19 = '>'
)PROC
VER(&PDS,NB,RANGE,0,20)
VER(&BRM,LIST,ON,OFF)
&DSNAME = TRANS(&PDS
           0,' '
           1,'&EB1'
           2,'&EB2'
           3,'&EB3'
           4,'&EB4'
           5,'&EB5'
           6,'&EB6'
           7,'&EB7'
           8,'&EB8'
           9,'&EB9'
          10,'&EB10'
          11,'&EB11'
          12,'&EB12'
          13,'&EB13'
          14,'&EB14'
          15,'&EB15'
          16,'&EB16'
          17,'&EB17'
          18,'&EB18'
          19,'&EB19')
&MODE = TRANS(&PDS
           0,' '
           1,'&EM1'
           2,'&EM2'
           3,'&EM3'
           4,'&EM4'
           5,'&EM5'
           6,'&EM6'
           7,'&EM7'
           8,'&EM8'
           9,'&EM9'
          10,'&EM10'
          11,'&EM11'
          12,'&EM12'
          13,'&EM13'
          14,'&EM14'
          15,'&EM15'
          16,'&EM16'
          17,'&EM17'
          18,'&EM18'
          19,'&EM19')
VPUT (BRM) PROFILE
)END
./ ADD NAME=EB01B    0126-86053-94341-0747-00145-00044-00000-PANEL
)ATTR
  ^   TYPE(OUTPUT)  INTENS(LOW) CAPS(ON)
  #   TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT) PAD(_)
)BODY
%----------------------  SET DEFAULT MODES AND LIBRARIES  --------------
%COMMAND ===>_ZCMD
+
+  ADD, CHANGE, or DELETE entries below:

+    (MODE is E for edit, B for browse, LE for ELIPS edit, LB for ELIPS
+     PDS for pds84, and V for view)

 + PDS  MODE LIBRARY                          PDS  MODE LIBRARY

  %  1 #EM1 _EB1                             % 11 #EM11_EB11
  %  2 #EM2 _EB2                             % 12 #EM12_EB12
  %  3 #EM3 _EB3                             % 13 #EM13_EB13
  %  4 #EM4 _EB4                             % 14 #EM14_EB14
  %  5 #EM5 _EB5                             % 15 #EM15_EB15
  %  6 #EM6 _EB6                             % 16 #EM16_EB16
  %  7 #EM7 _EB7                             % 17 #EM17_EB17
  %  8 #EM8 _EB8                             % 18 #EM18_EB18
  %  9 #EM9 _EB9                             % 19 #EM19_EB19
  % 10 #EM10_EB10                            +

+  Press%ENTER+key to process changes.
+  Enter%END+command or press%PF3+to exit.
)INIT
.HELP = EBH01B
)PROC
  VER(&EM1,LIST,E,B,LE,LB,PDS,V,MSG=EB003)
  VER(&EB1,DSNAME)
  IF (&EM1 ^= &Z)
    VER(&EB1,NONBLANK)
  IF (&EB1 ^= &Z)
    VER(&EM1,NONBLANK)
  VER(&EM2,LIST,E,B,LE,LB,PDS,V,MSG=EB003)
  VER(&EB2,DSNAME)
  IF (&EM2 ^= &Z)
    VER(&EB2,NONBLANK)
  IF (&EB2 ^= &Z)
    VER(&EM2,NONBLANK)
  VER(&EM3,LIST,E,B,LE,LB,PDS,V,MSG=EB003)
  VER(&EB3,DSNAME)
  IF (&EM3 ^= &Z)
    VER(&EB3,NONBLANK)
  IF (&EB3 ^= &Z)
    VER(&EM3,NONBLANK)
  VER(&EM4,LIST,E,B,LE,LB,PDS,V,MSG=EB003)
  VER(&EB4,DSNAME)
  IF (&EM4 ^= &Z)
    VER(&EB4,NONBLANK)
  IF (&EB4 ^= &Z)
    VER(&EM4,NONBLANK)
  VER(&EM5,LIST,E,B,LE,LB,PDS,V,MSG=EB003)
  VER(&EB5,DSNAME)
  IF (&EM5 ^= &Z)
    VER(&EB5,NONBLANK)
  IF (&EB5 ^= &Z)
    VER(&EM5,NONBLANK)
  VER(&EM6,LIST,E,B,LE,LB,PDS,V,MSG=EB003)
  VER(&EB6,DSNAME)
  IF (&EM6 ^= &Z)
    VER(&EB6,NONBLANK)
  IF (&EB6 ^= &Z)
    VER(&EM6,NONBLANK)
  VER(&EM7,LIST,E,B,LE,LB,PDS,V,MSG=EB003)
  VER(&EB7,DSNAME)
  IF (&EM7 ^= &Z)
    VER(&EB7,NONBLANK)
  IF (&EB7 ^= &Z)
    VER(&EM7,NONBLANK)
  VER(&EM8,LIST,E,B,LE,LB,PDS,V,MSG=EB003)
  VER(&EB8,DSNAME)
  IF (&EM8 ^= &Z)
    VER(&EB8,NONBLANK)
  IF (&EB8 ^= &Z)
    VER(&EM8,NONBLANK)
  VER(&EM9,LIST,E,B,LE,LB,PDS,V,MSG=EB003)
  VER(&EB9,DSNAME)
  IF (&EM9 ^= &Z)
    VER(&EB9,NONBLANK)
  IF (&EB9 ^= &Z)
    VER(&EM9,NONBLANK)
  VER(&EM10,LIST,E,B,LE,LB,PDS,V,MSG=EB003)
  VER(&EB10,DSNAME)
  IF (&EM10 ^= &Z)
    VER(&EB10,NONBLANK)
  IF (&EB10 ^= &Z)
    VER(&EM10,NONBLANK)
  VER(&EM11,LIST,E,B,LE,LB,PDS,V,MSG=EB003)
  VER(&EB11,DSNAME)
  IF (&EM11 ^= &Z)
    VER(&EB11,NONBLANK)
  IF (&EB11 ^= &Z)
    VER(&EM11,NONBLANK)
  VER(&EM12,LIST,E,B,LE,LB,PDS,V,MSG=EB003)
  VER(&EB12,DSNAME)
  IF (&EM12 ^= &Z)
    VER(&EB12,NONBLANK)
  IF (&EB12 ^= &Z)
    VER(&EM12,NONBLANK)
  VER(&EM13,LIST,E,B,LE,LB,PDS,V,MSG=EB003)
  VER(&EB13,DSNAME)
  IF (&EM13 ^= &Z)
    VER(&EB13,NONBLANK)
  IF (&EB13 ^= &Z)
    VER(&EM13,NONBLANK)
  VER(&EM14,LIST,E,B,LE,LB,PDS,V,MSG=EB003)
  VER(&EB14,DSNAME)
  IF (&EM14 ^= &Z)
    VER(&EB14,NONBLANK)
  IF (&EB14 ^= &Z)
    VER(&EM14,NONBLANK)
  VER(&EM15,LIST,E,B,LE,LB,PDS,V,MSG=EB003)
  VER(&EB15,DSNAME)
  IF (&EM15 ^= &Z)
    VER(&EB15,NONBLANK)
  IF (&EB15 ^= &Z)
    VER(&EM15,NONBLANK)
  VER(&EM16,LIST,E,B,LE,LB,PDS,V,MSG=EB003)
  VER(&EB16,DSNAME)
  IF (&EM16 ^= &Z)
    VER(&EB16,NONBLANK)
  IF (&EB16 ^= &Z)
    VER(&EM16,NONBLANK)
  VER(&EM17,LIST,E,B,LE,LB,PDS,V,MSG=EB003)
  VER(&EB17,DSNAME)
  IF (&EM17 ^= &Z)
    VER(&EB17,NONBLANK)
  IF (&EB17 ^= &Z)
    VER(&EM17,NONBLANK)
  VER(&EM18,LIST,E,B,LE,LB,PDS,V,MSG=EB003)
  VER(&EB18,DSNAME)
  IF (&EM18 ^= &Z)
    VER(&EB18,NONBLANK)
  IF (&EB18 ^= &Z)
    VER(&EM18,NONBLANK)
  VER(&EM19,LIST,E,B,LE,LB,PDS,V,MSG=EB003)
  VER(&EB19,DSNAME)
  IF (&EM19 ^= &Z)
    VER(&EB19,NONBLANK)
  IF (&EB19 ^= &Z)
    VER(&EM19,NONBLANK)
)END
./ ADD NAME=ISFPANEL 0101-93312-96045-0908-00009-00009-00000-PANEL
/******************************************************/
/* Insert at the end of the )INIT section of panel    */
/* ISFPANEL or ISFPCU41 (SDSF 1.5 and ISPF 4.1)       */
/******************************************************/
/* Generate end key response if OPER edit macro call  */
/******************************************************/
VGET (SDSFOPER) ASIS
IF (&SDSFOPER = 'END')
  .RESP=END
./ ADD NAME=ISR@PRIM 0103-95019-95278-0810-00199-00199-00000-PANEL
)ATTR
  ^  TYPE(AB) FORMAT(MIX)
)ABC ABCTEXT('System')
  PDC PDCTEXT('MVS system information...')
  ACTION RUN(MVS)
  PDC PDCTEXT('TSO dataset allocations...')
  ACTION RUN(LA)
  PDC PDCTEXT('DASD space calculations...')
  ACTION RUN(DISK)
  PDC PDCTEXT('Active TSO users...')
  ACTION RUN(TSU)
  PDC PDCTEXT('Resolve Plus monitor...')
  ACTION RUN(RESOLVE)
  PDC PDCTEXT('Omegamon monitor...')
  ACTION RUN(OMEGAMON)
  PDC PDCTEXT('RMF monitor...')
  ACTION RUN(RMF)
  PDC PDCTEXT('Info/MVS...')
  ACTION RUN(INFOMVS)
  PDC PDCTEXT('Non-CUA Primary Option Menu...')
  ACTION RUN(XPRIM)
  PDC PDCTEXT('Exit ISPF...')
  ACTION RUN(END)
)ABCINIT ABCTEXT('System')
  .ZVARS = 'ZPDC'
  &ZPDC = ''
)ABCPROC ABCTEXT('System')
  VER (&ZPDC,RANGE,1,20)
)ABC ABCTEXT('Spool')
  PDC PDCTEXT('Data Technologies key jobs...')
  ACTION RUN(JOBS)
  PDC PDCTEXT('Input output facility (IOF)...')
  ACTION RUN(IOFM)
  PDC PDCTEXT('System display and search facility (SDSF)...')
  ACTION RUN(SDSF)
  PDC PDCTEXT('Previous or current SYSLOG dataset...')
  ACTION RUN(SYSLOG)
)ABCINIT ABCTEXT('Spool')
  .ZVARS = 'ZPDC'
  &ZPDC = ''
)ABCPROC ABCTEXT('Spool')
  VER (&ZPDC,RANGE,1,20)
)ABC ABCTEXT('DBMS')
  PDC PDCTEXT('Model 204...')
  ACTION RUN(M204)
  PDC PDCTEXT('Nomad...')
  ACTION RUN(NOMAD)
  PDC PDCTEXT('System 2000...')
  ACTION RUN(S2K)
  PDC PDCTEXT('VSAM...')
  ACTION RUN(VSAM)
  PDC PDCTEXT('DB2...')
  ACTION RUN(DB2I)
  PDC PDCTEXT('Datacom/DB...')
)ABCINIT ABCTEXT('DBMS')
  .ZVARS = 'ZPDC'
  &ZPDC = ''
)ABCPROC ABCTEXT('DBMS')
  VER (&ZPDC,RANGE,1,20)
)ABC ABCTEXT('Calendar')
  PDC PDCTEXT('4-month calendar...')
  ACTION RUN(DATE)
  PDC PDCTEXT('Monthly calendar...')
  ACTION RUN(MONTH)
  PDC PDCTEXT('6/12 month calendar...')
  ACTION RUN(YEAR)
)ABCINIT ABCTEXT('Calendar')
  .ZVARS = 'ZPDC'
  &ZPDC = ''
)ABCPROC ABCTEXT('Calendar')
  VER (&ZPDC,RANGE,1,20)
)ABC ABCTEXT('Help')
  PDC PDCTEXT('Menu of the week - Le Restaura...')
  ACTION RUN(LEMENU)
  PDC PDCTEXT('LSSC Personnel Locator...')
  ACTION RUN(PLS)
  PDC PDCTEXT('LSSC ISPF commands...')
  ACTION RUN(COMMANDS)
  PDC PDCTEXT('LSSC Edit macros...')
  ACTION RUN(MACROS)
  PDC PDCTEXT('CCSS Magic Flashes...')
  ACTION RUN(FLASHES)
  PDC PDCTEXT('MVS/ESA Program Products...')
  ACTION RUN(PRODUCTS)
  PDC PDCTEXT('CA-Docview...')
  ACTION RUN(DOCVIEW)
  PDC PDCTEXT('PC keyboard map...')
  ACTION RUN(PCKEYS)
  PDC PDCTEXT('Changes to Version 3 of ISPF...')
  ACTION RUN(CHANGES)
  PDC PDCTEXT('TSO full-screen help...')
  ACTION RUN(TSOHELP)
  PDC PDCTEXT('ISPF Tutorial...')
  ACTION RUN(HELP)
)ABCINIT ABCTEXT('Help')
  .ZVARS = 'ZPDC'
  &ZPDC = ''
)ABCPROC ABCTEXT('Help')
  VER (&ZPDC,RANGE,1,20)
)ABC ABCTEXT('Info')
  PDC PDCTEXT('Sysid:      &SYSID')
  PDC PDCTEXT('CPU Model:  &CPUMDL')
  PDC PDCTEXT('Real:       &REALSTOR')
  PDC PDCTEXT('IPL Date:   &IPLDATE')
  PDC PDCTEXT('IPL Time:   &IPLTIME')
  PDC PDCTEXT('MVS:        &SCPNAME')
  PDC PDCTEXT('JES2:       &JESLEVEL')
  PDC PDCTEXT('TSO/E:      &TSOE')
  PDC PDCTEXT('ISPF:       &ZPDFREL')
  PDC PDCTEXT('DFP:        &DFPLEVEL')
  PDC PDCTEXT('SMS:        &SMSSTAT')
  PDC PDCTEXT('Proc:       &LOGPROC')
  PDC PDCTEXT('Region:     &REGION')
  PDC PDCTEXT('Jobid:      &JESJOBID')
  PDC PDCTEXT('Termid:     &TERMID')
)ABCINIT ABCTEXT('Info')
  .ZVARS = 'ZPDC'
  &ZPDC = ''
)ABCPROC ABCTEXT('Info')
  VER (&ZPDC,RANGE,1,20)
)BODY
%^ System^ Spool^ DBMS^ Calendar^ Help^ Info+                PIE session
+-----------------------------------------------------------------------
%                       ISPF/&ZPDFREL PRIMARY OPTION MENU
%OPTION  ===>_ZCMD
%                                                           +USERID   -
%   0 +ISPF PARMS  - Specify terminal and user parameters   +PROC     -
%   1 +BROWSE      - Display source data or output listings +TIME     -
%   2 +EDIT        - Create or change source data           +JULIAN   -
%   3 +UTILITIES   - Perform utility functions              +MVS      -
%   6 +COMMAND     - Enter TSO command, CLIST, or REXX exec +TSO/E    -
%   7 +DIALOG TEST - Perform dialog testing                 +SYSTEM   -%
%   D +XDC         - Interactive debugging with XDC
%   E +EDIT/BROWSE - Edit/Browse by the numbers from a menu of datasets
%   L +LIBRARIAN   - ADR/The Librarian options menu
%   M +MENU        - Data Technologies Application Menu
%   O +OUTPUT      - Output display utilities (IOF and SDSF)
%   P +PDS         - Invoke the PDS command processor
%   T +TUTORIAL    - Display information about ISPF/PDF
%   W +WHAT'S%NEW+ - Historical review of Data Technologies ISPF/PDF mod
%   X +EXIT        - Terminate ISPF using log and list defaults
%
+Enter%END+command to terminate ISPF.
%
)INIT
  .HELP = ISR00003
  &ZPRIM = YES        /* ALWAYS A PRIMARY OPTION MENU      */
  &ZHTOP = ISR00003   /* TUTORIAL TABLE OF CONTENTS        */
  &ZHINDEX = ISR91000 /* TUTORIAL INDEX - 1ST PAGE         */
  VPUT (ZHTOP,ZHINDEX) PROFILE

  IF (&ZPDFINIT = YES)
    IF (&Z$SAVE ^= &Z)
      &ZCMD   = &Z$SAVE
      .RESP     = ENTER
      &Z$SAVE = &Z
  IF (&ZPDFINIT = &Z)
    &Z$SAVE   = &ZCMD
    &ZCMD     = 'FIRST'
    .RESP     = ENTER
    &ZPDFINIT = YES

)PROC
  &ZDUM = TRUNC(&ZCMD,'.')
  &ZTRAIL = .TRAIL
  &ZSEL = TRANS( TRUNC (&ZCMD,'.')
                0,'PANEL(ISPOPTA)'
                1,'PGM(ISRBRO) PARM(ISRBRO01)'
                2,'PGM(ISREDIT) PARM(P,ISREDM01)'
                3,'PANEL(ISRUTIL)'
                4,'PANEL(ISRFPA)'
                5,'PGM(ISRJB1) PARM(ISRJPA) NOCHECK'
                6,'PGM(ISRPTC)'
                7,'PGM(ISPYXDR) PARM(ISR) NOCHECK'
                8,'PANEL(ISRLPRIM)'
                9,'PANEL(ISRDIIS)'
               10,'PGM(ISRSCLM) NOCHECK'
                B,'PANEL(TRI@CBT)'
                C,'PGM(ISPTUTOR) PARM(ISR00005)'
          CHANGES,'PGM(ISPTUTOR) PARM(ISR00005)'
                D,'PANEL(XDCPANEL) NEWAPPL(XDC) PASSLIB'
                E,'CMD(%EB) NOCHECK'
            FIRST,'CMD(%ADINIT)'
                I,'PGM(IOFSPF) PARM(&ZCMD) NEWAPPL(IOF) NOCHECK PASSLIB'
                L,'PANEL(LIBRPDF) NEWAPPL(LIB@) PASSLIB'
               LB,'PGM(LIBRLE00) PARM(B)'
               LE,'PGM(LIBRLE00)'
                M,'PANEL(TRI@PRIM)'
                N,'CMD(%ADN)'
                O,'PANEL(OUTPUT)'
                P,'PANEL(PDS@PRIM)'
                S,'PGM(ISFISP) PARM(&ZTRAIL) NEWAPPL(ISF) NOCHECK PASSLI
                T,'PGM(ISPTUTOR) PARM(ISR00000)'
                W,'CMD(%ADNEWSPF)'
                X,'EXIT'
              ' ',' '
                *,'?' )
 &ZTRAIL = .TRAIL
)END
./ ADD NAME=ISRUTIL  0100-93312-93312-0645-00049-00049-00000-PANEL
%-------------------------  UTILITY SELECTION MENU  --------------------
%OPTION  ===>_ZCMD
%
%    1 +LIBRARY    - Compress or print data set.  Print index listing.
+                      Print, rename, delete, or browse members
%    2 +DATASET    - Allocate, rename, delete, catalog, uncatalog, or
+                      display information of an entire data set
%    3 +MOVE/COPY  - Move, copy, or promote members or data sets
%    4 +DSLIST     - Print or display (to process) list of data set name
+                      Print or display VTOC information
%    5 +RESET      - Reset statistics for members of ISPF library
%    6 +HARDCOPY   - Initiate hardcopy output
%    8 +OUTLIST    - Display, delete, or print held job output
%    9 +COMMANDS   - Create/change an application command table
%   10 +CONVERT    - Convert old format menus/messages to new format
%   11 +FORMAT     - Format definition for formatted data Edit/Browse
%   12 +SUPERC     - Compare data sets (Standard dialog)
%   13 +SUPERCE    - Compare data sets (Extended dialog)
%   14 +SEARCH-FOR - Search data sets for strings of data
%   14B+SEARCH-FOR - Search data sets for strings of data (Batch Job)
)INIT
  .HELP = ISR30000
)PROC
  &ZSEL = TRANS( TRUNC (&ZCMD,'.')
                1,'PGM(ISRUDA) PARM(ISRUDA1)'
                2,'PGM(ISRUDA) PARM(ISRUDA2)'
                3,'PGM(ISRUMC)'
                4,'PGM(ISRUDL) PARM(ISRUDLP)'
                5,'PGM(ISRURS)'
                6,'PGM(ISRUHC)'
                8,'PGM(ISRUOLP)'
                9,'PANEL(ISPUCMA)'
               10,'PGM(ISRQCM) PARM(ISRQCMP)'
               11,'PGM(ISRFMT)'
               12,'PGM(ISRSSM)'
               13,'PGM(ISRSEPRM) NOCHECK'
               14,'PGM(ISRSFM)'
              14B,'CMD(%SUPERC)'
              ' ',' '
                *,'?' )
  &ZTRAIL = .TRAIL
)END
 /*                                                                  */
 /* $SEG(ISRUTIL) COMP(SUPERCD) PROD(MVS):                           */
 /* CHANGE ACTIVITY:                                                 */
 /*    PN = REASON    RELEASE   DATE    ORIGIN   COMMENT             */
 /*    --   --------  --------  ------  ------ : ------------------  */
 /*   $L0 =    M230      100386  LUDLOW :                            */
 /*                                                                  */
./ ADD NAME=JC       0162-86191-98176-1406-00147-00022-00000-PANEL
)ATTR
  # AREA(SCRL) EXTEND(ON)
)BODY
%-------------------------------- MVS JOB CARD -------------------------
%COMMAND ===>_ZCMD
+
+ENTER JOB CARD INFORMATION:
    JOB NAME PREFIX  %===>_JCPRE +
    JOB NAME SUFFIX  %===>_Z +
    JOB CLASS        %===>_Z+
    JOB TIME         %===>_JCTIME  +            (Optional)
    JOB MESSAGE CLASS%===>_Z+
    PROGRAMMER NAME  %===>_JCNAME              +
    NOTIFY USERID    %===>_JCNOTIFY+            (Optional)
    ACCOUNTING INFO  %===>_JCACC          +
    ROOM NUMBER      %===>_JCRM+
    OTHER PARAMETERS %===>_JCOTHER1
                     %===>_JCOTHER2
                     %===>_JCOTHER3

+ENTER OTHER JOB RELATED INFORMATION (OPTIONAL):
+                                                                  %Up F
#RELATED ---------------------------------------------------------------
)AREA RELATED
    JCLLIB DSNAME    %===>_JCPROC                                      +
    JES2 XEQ NODE    %===>_JCJXEQ  +
    JES2 PRINT NODE  %===>_JCJPRT           +
    JOB OUTPUT TITLE %===>_JCTITLE
    JOB OUTPUT DEPT  %===>_JCDEPT
    JOB OUTPUT BLDG  %===>_JCBLDG
    JOB OUTPUT ADDR  %===>_JCADDR1
                     %===>_JCADDR2
                     %===>_JCADDR3
                     %===>_JCADDR4
)INIT
VGET (JCPRE,JCSU,JCACC,JCNAME,JCNOTIFY,JCMC,JCRM,
      JCTIME,JCOTHER1,JCOTHER2,JCOTHER3,JCPROC,JCJXEQ,JCJPRT,
      JCDEPT,JCBLDG,JCADDR1,JCADDR2,JCADDR3,JCADDR4) PROFILE
.ZVARS = '(JCSU JCCLASS JCMC)'
.CURSOR = JCSU
IF (&JCPRE = &Z)
  &JCPRE = &ZUSER
IF (&JCMC = &Z)
  &JCMC = 'R'
IF (&JCCLASS = &Z)
  &JCCLASS = 'B'
IF (&JCDEPT = &Z)
  &JCDEPT = TRANS(TRUNC(&ZUSER,3)
              TRI,'DATA TECHNOLOGIES'
              TRA,'DATA TECHNOLOGIES'
              TTC,'EXECUTIVE SOFTWARE'
              TRC,'TECHNICAL SERVICES'
              TTS,'TECHNICAL SERVICES'
              QQX,'TEST AND EVALUATION'
              QRX,'RELEASE MANAGEMENT'
              CHB,'FINANCIAL MANAGEMENT SYSTEMS'
              CFB,'FINANCIAL MANAGEMENT SYSTEMS'
              CFC,'FINANCIAL MANAGEMENT SYSTEMS'
              CHM,'DEPOT MAINTENANCE MANAGEMENT SYSTEMS'
              CHQ,'TECHNICAL DATA SYSTEMS'
              CHC,'TECHNICAL DATA SYSTEMS'
              CHL,'TECHNICAL DATA SYSTEMS'
              CLP,'ASSET MANAGEMENT SYSTEMS'
              CLR,'ASSET MANAGEMENT SYSTEMS'
              CLD,'REQUIREMENTS MANAGEMENT SYSTEMS'
              CLE,'REQUIREMENTS MANAGEMENT SYSTEMS'
              CLF,'PROCUREMENT SECURITY ASSISTANCE'
              CLG,'PROCUREMENT SECURITY ASSISTANCE'
              CFP,'PROCUREMENT SECURITY ASSISTANCE'
              CFR,'PROCUREMENT SECURITY ASSISTANCE'
              #CR,'LSSC CONTRACTORS'
              *,'')
&JCBR = TRANS(TRUNC(&ZUSER,3)
          TRI,'LS-TD'
          TRA,'LS-TD'
          TTC,'LS-TE'
          TRC,'LS-TT'
          TTS,'LS-TE'
          QQX,'LS-TQE'
          QRX,'LS-TQR'
          CHB,'LS-BF'
          CFB,'LS-BF'
          CFC,'LS-BF'
          CHM,'LS-BM'
          CHQ,'LS-BT'
          CHC,'LS-BT'
          CHL,'LS-BT'
          CLP,'LS-BA'
          CLR,'LS-BA'
          CLD,'LS-BR'
          CLE,'LS-BR'
          CLF,'LS-BP'
          CLG,'LS-BP'
          CFP,'LS-BP'
          CFR,'LS-BP'
          #CR,'CONTRACTOR'
          *,'')
&JCRMNO = TRANS(TRUNC(&ZUSER,3)
            TRI,'7.103'
            TRA,'7.103'
            TRC,'7.105'
            TTC,'7.105'
            TTS,'7.103'
            QQX,'7.204'
            QRX,'7.105'
            CHB,'7.300'
            CFB,'7.300'
            CFC,'7.300'
            CHM,'8.103'
            CHQ,'6.106'
            CHC,'6.106'
            CHL,'6.106'
            CLP,'6.105'
            CLR,'6.105'
            CLD,'7.311'
            CLE,'7.311'
            CLF,'7.206'
            CLG,'7.206'
            CFP,'7.206'
            CFR,'7.206'
            #CR,'6.106'
            *,'')
IF (&JCBLDG = &Z)
  &JCBLDG = 'ROBERT A. YOUNG'
IF (&JCADDR1 = &Z AND
    &JCADDR2 = &Z AND
    &JCADDR3 = &Z AND
    &JCADDR4 = &Z)
  &JCADDR1 = 'USA LSSC'
  &JCADDR2 = 'AMSEL-SE-BSD-&JCBR, ROOM &JCRMNO'
  &JCADDR3 = '1222 SPRUCE STREET'
  &JCADDR4 = 'ST. LOUIS, MISSOURI  63103-2834'
)PROC
VER (&JCPRE,NB)
VER (&JCSU,NB)
VER (&JCCLASS,NB)
VER (&JCMC,NB)
VER (&JCNAME,NB)
VER (&JCACC,NB)
VER (&JCRM,NB)
VER (&JCPROC,DSNAME)
VER (&JCJXEQ,NAME)
VER (&JCJPRT,NAME)
VPUT (JCPRE,JCSU,JCACC,JCNAME,JCNOTIFY,JCMC,JCRM,
      JCTIME,JCOTHER1,JCOTHER2,JCOTHER3,JCPROC,JCJXEQ,JCJPRT,
      JCDEPT,JCBLDG,JCADDR1,JCADDR2,JCADDR3,JCADDR4) PROFILE
)END
./ ADD NAME=LOGLIST  0175-98147-98147-0902-00125-00125-00000-PANEL
)ATTR DEFAULT(%+_)
       %   TYPE(TEXT) INTENS(HIGH)
       +   TYPE(TEXT) INTENS(LOW)
       _   TYPE(INPUT) INTENS(HIGH) CAPS(OFF) JUST(LEFT)
)BODY
%---------------------  ISPF LOG/LIST SYSOUT DELIVERY  -----------------
%COMMAND ===>_ZCMD
+
+ENTER PRINT DELIVERY INSTRUCTIONS:
    NAME    %===>_LLNAME
    ROOM    %===>_LLROOM

    TITLE   %===>_LLTITLE
    BUILDING%===>_LLBLDG
    DEPT.   %===>_LLDEPT
    ADDRESS %===>_LLADDR1
            %===>_LLADDR2
            %===>_LLADDR3
            %===>_LLADDR4

+Type a value in each field or blank a field to restore the default valu
+Press%Enter+to display and save changes.  Use%END key+to save the chang
+and exit.  Specify%CANCEL+to exit without saving values.

%Note:+ These parameters will take effect during your%next+logon.  The%L
 output descriptor can also be used with the%PRINTDS+command by adding t
%OUTDES(LOGLIST)+parameter.

)INIT
IF (&LLTITLE = &Z)
  &LLTITLE = 'ISPF Log/List'
IF (&LLBLDG = &Z)
  &LLBLDG = 'Robert A. Young'
IF (&LLDEPT = &Z)
  &LLDEPT = TRANS(TRUNC(&ZUSER,3)
              TRI,'Data Technologies Division'
              TRA,'Data Technologies Division'
              TTC,'Executive Software Division'
              TRC,'Technical Services Division'
              TTS,'Technical Services Division'
              QQX,'Test and Evaluation Branch'
              QRX,'Release Management Branch'
              CHB,'Financial Management Systems Division'
              CFB,'Financial Management Systems Division'
              CFC,'Financial Management Systems Division'
              CHM,'Depot Maintenance Management Systems Division'
              CHQ,'Technical Data Systems Division'
              CHC,'Technical Data Systems Division'
              CHL,'Technical Data Systems Division'
              CLP,'Asset Management Systems Division'
              CLR,'Asset Management Systems Division'
              CLD,'Requirements Management Systems Division'
              CLE,'Requirements Management Systems Division'
              CLF,'Procurement Security Assistance Division'
              CLG,'Procurement Security Assistance Division'
              CFP,'Procurement Security Assistance Division'
              CFR,'Procurement Security Assistance Division'
              #CR,'LSSC Contractors'
              *,'')
&LLBR = TRANS(TRUNC(&ZUSER,3)
          TRI,'LS-TD'
          TRA,'LS-TD'
          TTC,'LS-TE'
          TRC,'LS-TT'
          TTS,'LS-TE'
          QQX,'LS-TQE'
          QRX,'LS-TQR'
          CHB,'LS-BF'
          CFB,'LS-BF'
          CFC,'LS-BF'
          CHM,'LS-BM'
          CHQ,'LS-BT'
          CHC,'LS-BT'
          CHL,'LS-BT'
          CLP,'LS-BA'
          CLR,'LS-BA'
          CLD,'LS-BR'
          CLE,'LS-BR'
          CLF,'LS-BP'
          CLG,'LS-BP'
          CFP,'LS-BP'
          CFR,'LS-BP'
          #CR,'Contractor'
          *,'')
&LLRMNO = TRANS(TRUNC(&ZUSER,3)
            TRI,'7.103'
            TRA,'7.103'
            TRC,'7.105'
            TTC,'7.105'
            TTS,'7.103'
            QQX,'7.204'
            QRX,'7.105'
            CHB,'7.300'
            CFB,'7.300'
            CFC,'7.300'
            CHM,'8.103'
            CHQ,'6.106'
            CHC,'6.106'
            CHL,'6.106'
            CLP,'6.105'
            CLR,'6.105'
            CLD,'7.311'
            CLE,'7.311'
            CLF,'7.206'
            CLG,'7.206'
            CFP,'7.206'
            CFR,'7.206'
            #CR,'6.106'
            *,'')
IF (&LLADDR1 = &Z)
  &LLADDR1 = 'USA LSSC'
IF (&LLADDR2 = &Z)
  &LLADDR2 = 'AMSEL-SE-BSD-&LLBR, Room &LLRMNO'
IF (&LLADDR3 = &Z)
  &LLADDR3 = '1222 Spruce Street'
IF (&LLADDR4 = &Z)
  &LLADDR4 = 'St. Louis, Missouri  63103-2834'
)PROC
VER (&LLNAME,NB)
VER (&LLROOM,NB)
IF (&ZCMD = 'can','cancel','CAN','CANCEL')
ELSE
  VPUT (LLNAME,LLROOM,LLTITLE,LLBLDG,LLDEPT,
        LLADDR1,LLADDR2,LLADDR3,LLADDR4) PROFILE
)END
./ ADD NAME=PDSFTP   0141-89172-98104-1114-00027-00014-00000-PANEL
)ATTR
       ^   TYPE(INPUT) INTENS(NON)  CAPS(OFF) JUST(LEFT)
       $   TYPE(INPUT) INTENS(HIGH) CAPS(OFF) JUST(LEFT)
)BODY WINDOW(66,9)
%COMMAND ===>_ZCMD                               +
+
+FTP Command Parameters:
+   Node     %===>$FTPNODE                                       +
+   User     %===>$FTPUSER                                       +
+   Password %===>^FTPPASS                                       +
+   Directory%===>$FTPDIR                                        +
+   Local DSN%===>_FTPPINDS                                      +
+   Tcpip    %===>_FTPTCP+         (KNET or IBM)
)INIT
  .CURSOR = FTPNODE
  .HELP   = PDSFTPT
  &ZHTOP  = PDSFTPT
  &ZWINTTL = 'MVS TCP/IP File Transfer Protocol'
  &ZCMD=' '
  IF (&FTPTCP = '')
    &FTPTCP = 'KNET'
)PROC
  VER(&FTPNODE,NB)
  VER(&FTPUSER,NB)
  VER(&FTPTCP,NB,LIST,KNET,IBM)
  VPUT (FTPNODE FTPUSER FTPPASS FTPDIR FTPTCP) PROFILE
)END
./ ADD NAME=PDSFTPLM 0103-97059-97101-1026-00026-00031-00000-PANEL
)ATTR
  _ TYPE(INPUT) CAPS(OFF) INTENS(HIGH)
  × AREA(DYNAMIC) SCROLL(ON) EXTEND(ON)
  + TYPE(TEXT) INTENS(LOW)
  ú TYPE(OUTPUT) INTENS(HIGH) JUST(RIGHT) PAD(0)
 01 TYPE(DATAIN) INTENS(HIGH) CAPS(ON)
 02 TYPE(DATAOUT) INTENS(LOW)
 03 TYPE(DATAIN)  INTENS(HIGH) CAPS(ON)
 04 TYPE(DATAOUT)  INTENS(LOW)
 05 TYPE(DATAOUT)  INTENS(HIGH)
 06 TYPE(DATAOUT)  INTENS(LOW)
)BODY WIDTH(80)
%Member List -- &ZDSN --------------------------------------%ROWúZMLCR%O
%Command ===>_ZCMD                                            %Scroll ==
%Commands:      LOCATE, RESET, SELECT, SORT, HELP
%Line commands: / or S = Put, B = Browse, V = View
&ZMLCOLS
×ZDATA -----------------------------------------------------------------
×
× ----------------------------------------------------------------------
)INIT
  .ZVARS = 'ZSCML'         /* SCROLL AMT VARIABLE NAME  */
  .HELP = ISR01130
)PROC
  VPUT (ZSCML) PROFILE
)END
./ ADD NAME=PDSFTPT  0106-97105-98106-1340-00084-00100-00000-PANEL
)Panel Keylist(ISPHelp,ISP)
)Attr Default(%+_)
/* _ type( input) intens(high) caps(on ) just(left )               */
   @ type( input) intens(high) caps(on ) just(left ) pad('_') color(turq
   ! type(output) intens(high) caps(off) just(asis ) color(white)
   ` type(text) intens(high) caps(off) just(asis ) color(yellow)
   ~ type(text) intens(high) caps(off) just(asis ) color(turq)
   % type(text) intens(high)
   + type(text  ) intens(low )
     skip(on)
   # area(SCRL) Extend(ON)
)Body
+--------------------------%MVS TCP/IP FTP Tutorial+--------------------
%Command ===>_zcmd
%
+ This ISPF Dialog is designed to use the IBM or Knet TCP/IP File
+ Transfer Protocol (FTP) for transferring files from the current MVS
+ system to another TCP/IP enabled system.
                                                                  %Up F1
#help ------------------------------------------------------------------
)Area Help
+
+ %Fields                   Description
+ ~                       +
+ ~Node                   +This is the TCP/IP Name (or IP Address) of th
+ ~                       +target system that the Local Data Set is to b
+ ~                       +transferred to.
+ ~                       +
+ ~Userid                 +This is your userid that will be used by FTP
+ ~                       +when it logs into the target host.
+ ~                       +
+ ~                       +Note: the userid field is case sensitive to
+ ~                       +support accessing workstations that allow mix
+ ~                       +case userids.
+ ~                       +
+ ~Password               +This is the password for the specified Userid
+ ~                       +the target host system.  The password is not
+ ~                       +displayed for security reasons.
+ ~                       +
+ ~                       +Note: the password field is case sensitive to
+ ~                       +support accessing workstations that allow mix
+ ~                       +case passwords.
+ ~                       +
+ ~Directory              +This is the remote working directory that wil
+ ~                       +changed to after logging into the target host
+ ~                       +
+ ~Local DSN              +This is the data set name of the data set tha
+ ~                       +is to be transmitted.
+ ~                       +
+ ~                       +If a local dataset name is entered on the pan
+ ~                       +then PUT subcommands will be generated by the
+ ~                       +dialog and FTP will be invoked in a batch mod
+ ~                       +Otherwise, FTP will be invoked in it's normal
+ ~                       +interactive mode where any subcommand can be
+ ~                       +issued.
+ ~                       +
+ ~                       +When a PDS dataset name is entered, a member
+ ~                       +will be displayed.  Members selected for PUT
+ ~                       +have a foreign file name generated in the for
+ ~                       +'mbr.llq' where 'mbr' is the PDS member name
+ ~                       +'llq' is the 1st 3 characters of the MVS low
+ ~                       +qualifier.
+ ~                       +
+ ~                       +When a sequential dataset name is entered, th
+ ~                       +foreign file name will be generated as 'llq'.
+ ~                       +a PDS member name is entered in parenthesis (
+ ~                       +sequential file) then the name is generated a
+ ~                       +'mbr.llq'.  If a wild card '*' character is u
+ ~                       +as part of the PDS member name, then MPUT wil
+ ~                       +used and the foreign file names will be the s
+ ~                       +as the PDS member names.
+ ~                       +
+ ~Tcpip                  +This is the flavor of the client MVS TCP/IP t
+ ~                       +is to be used (Knet or IBM).  The Knet client
+ ~                       +supports the STRIP command which strips trail
+ ~                       +blanks from records before sending them.  Thi
+ ~                       +reduces transfer time and files created on th
+ ~                       +target host require less space.
+ ~                       +
)Init
  .cursor = zcmd
  &rfind = PFK(RFIND)
)Proc
)End
./ ADD NAME=SHOWCUTP 0104-98168-98168-0822-00012-00012-00000-PANEL
)ATTR
 @ TYPE(OUTPUT) INTENS(LOW)
 ^ TYPE(TEXT) SKIP(ON) INTENS(LOW)
)BODY
%BROWSE    Cut Table '&CT' ---------------------------------------------
%Command ===>_ZCMD                                          ^%Scroll ===
+******************************** Top of Data **************************
)MODEL
@CTPT
)INIT
)PROC
)END
./ ADD NAME=SORTWORK 0101-93055-93055-0933-00032-00031-00000-PANEL
)ATTR
  ^   TYPE(OUTPUT)  INTENS(HIGH)
)BODY
%--------------------------- SORTWORK CALCULATION ----------------------
%COMMAND ===>_ZCMD
+
+ENTER SORTWORK INFORMATION:
    DEVICE TYPE        %===>_DTYP+         (3330, 3350, 3380, or 3390)
    LOGICAL RECORD SIZE%===>_LRECL+
    NUMBER OF RECORDS  %===>_NUMREC    +
    NUMBER OF SORTWORKS%===>_Z +           (Blank defaults to 3)


+CALCULATION RESULTS:
    TRACKS REQ'D PER SORTWORK%===>^TTRKSW      +
    CYLS   REQ'D PER SORTWORK%===>^TCYLSW      +
    TOTAL TRACKS REQ'D       %===>^TTRK        +
    TOTAL CYLS   REQ'D       %===>^TCYL        +
)INIT
.ZVARS = '(NUMSW)'
.CURSOR = DTYP
)PROC
 IF (&DTYP = &Z)
   &DTYP = 3330
 VER (&DTYP,LIST,3330,3350,3380,3390)
 VER (&LRECL,NB,RANGE,1,32760)
 VER (&NUMREC,NB,NUM)
 IF (&NUMSW = &Z)
   &NUMSW = 3
 VER (&NUMSW,RANGE,1,32)
 VPUT (DTYP, LRECL, NUMREC, NUMSW) PROFILE
)END
./ ADD NAME=SYSLOG   0130-89240-95103-1420-00024-00035-00000-PANEL
%------------------------------- BROWSE SYSLOG -------------------------
%COMMAND ===>_ZCMD
%
+SYSLOG DATASET INFORMATION:
+   DAY OF WEEK       %===>_Z  +   ("*" for active SYSLOG, or
+                                    MON/TUE/WED/THU/FRI/SAT/SUN/ALL
+                                    for spooled IOF SLAM memos)
+
+   SYSLOG DISPLAY PGM%===>_Z   +  (IOF or SDSF)
+
)INIT
.ZVARS = '(LOGDAY LOGPGM)'
.CURSOR = LOGDAY
IF (&LOGPGM = ' ')
  &LOGPGM = 'IOF'
)PROC
VER(&LOGDAY,NB,LIST,*,SUN,MON,TUE,WED,THU,FRI,SAT,ALL)
VER(&LOGPGM,NB,LIST,IOF,SDSF)
&ZEDSMSG = 'QUE?'
&ZEDLMSG = 'SDSF CAN ONLY BROWSE THE ACTIVE SYSLOG'
IF (&LOGPGM = 'SDSF')
  VER (&LOGDAY,NB,LIST,*,MSG=ISRZ001)
VPUT (LOGDAY LOGPGM) PROFILE
)END
./ ADD NAME=TRAPTBL  0130-91101-91170-0910-00014-00017-00000-PANEL
)ATTR
! TYPE(OUTPUT) INTENS(LOW) CAPS(OFF) JUST(ASIS)
)BODY
%----------------------- '&TSOCMD' COMMAND OUTPUT ----------------------
%COMMAND ===>_ZCMD                                            %SCROLL ==
%
)MODEL
!Z
)INIT
.CURSOR = ZCMD
.ZVARS = '(CMDLINE)'
&AMT=CSR
)PROC
)END
./ ADD NAME=TRICMDS  0170-89340-98106-1342-00033-00025-00000-PANEL
)ATTR
  # AREA(SCRL) EXTEND(ON)
)BODY
%TUTORIAL ------------------- ISPF COMMANDS ---------------------------
%OPTION  ===>_ZCMD
+
+  The following ISPF commands have been implemented by Data Technologie
+  and are available from the ISPF command line.
                                                                  %Up F1
#CMDAREA ---------------------------------------------------------------
)AREA CMDAREA
    %CALC    +- Invoke calculator:  "CALC 59902*1.0309"
    %CLONE   +- Decomp a logonid record into INSERT format
    %CODE    +- Display ABEND code reason:  "CODE 0C7"
    %COMMANDS+- Display explanations of LSSC added ISPF commands
    %EBROWSE +- Edit/Browse by the numbers from a menu of datasets
    %FTP     +- Invoke FTP dialog (pop-up)
    %IOF     +- Invoke JES2 Interactive Output Facility (IOF)
    %ISF     +- Invoke System Display and Search Facility (SDSF)
    %JOBS    +- Display Data Technologies key jobs
    %LOGLIST +- Specify ISPF LOG/LIST sysout delivery instructions
    %MACROS  +- Display explanations of LSSC Edit macros
    %MSG     +- SEND command:  "MSG 'TESTING 1,2,3...' U(*)"
    %PRIM    +- Hold at current screen and display Primary Option Menu
    %RESETID +- Reduce ACF2 password violation count to 0
    %SDSF    +- Invoke System Display and Search Facility (SDSF)
    %SPACE   +- Display DASD free space statistics
    %SYSLOG  +- Display previous or current SYSLOG dataset
    %TEST    +- Invoke ISPF Dialog Test
    %TRAP    +- Trap TSO command output and display in ISPF table:  "TRA
    %USERIDS +- Display TSO Userid/Name list
)PROC
)END
./ ADD NAME=TRIJOBS  0185-91268-99089-0808-00134-00022-00000-PANEL
)ATTR
    $ TYPE(PS)
)BODY WINDOW(60,21)
%                       Display Jobs                       +
%Option ===>_ZCMD                                          +
+
   $A+ MAES    - Multiple Aion Execution System
   $C+ CICS    - Customer Information and Control System
   $F+ KNET    - Knet/MVS
   $FF+KNET    - Knet/MVS FTP Servers
   $K+ KEYPLUS - Keyplus
   $L+ LOGSHR  - DMR Log and Shared File Update
   $M+ M204    - Model 204
   $N+ SQL     - Oracle SQL*Net
   $O+ ORACLE  - Oracle Server Manager
   $Q+ CDMR    - Cyclic Data Management Routines
   $S+ S2K     - System 2000
   $R+ DRI     - Data Routing Interface
   $T+ TCPIP   - TCP/IP for MVS
   $TF+TCPIP   - TCP/IP FTP Servers
   $U+ USERS   - TSO/CICS Logons
   $W + WW     - Web3270 Server
%
+Spool Display Program%===>_Z   +          (IOF or SDSF)
)INIT
.ZVARS = '(SPOOLPGM)'
IF (&SPOOLPGM = ' ')
  &SPOOLPGM = 'IOF'
)PROC
VER(&SPOOLPGM,NB,LIST,IOF,SDSF)
IF (&SPOOLPGM = 'IOF')
  &TEMP = TRUNC(&ZCMD,'.')
  &JUMP = .TRAIL
  IF (&JUMP = '')
    &JUMP = EXTEND
  &ZSEL = TRANS(TRUNC(&ZCMD,'.')
          A,'PGM(IOFSPF) PARM(.MAES*.&JUMP) +
             NEWAPPL(IOF) PASSLIB NOCHECK'
          C,'PGM(IOFSPF) PARM(.CICS*.&JUMP) +
             NEWAPPL(IOF) PASSLIB NOCHECK'
          F,'PGM(IOFSPF) PARM(.KNET*.&JUMP) +
             NEWAPPL(IOF) PASSLIB NOCHECK'
         FF,'PGM(IOFSPF) PARM(.FTPSRV*.&JUMP) +
             NEWAPPL(IOF) PASSLIB NOCHECK'
          K,'PGM(IOFSPF) PARM(.KEY*.&JUMP) +
             NEWAPPL(IOF) PASSLIB NOCHECK'
          L,'PGM(IOFSPF) PARM(.++NDM*.&JUMP) +
             NEWAPPL(IOF) PASSLIB NOCHECK'
          M,'PGM(IOFSPF) PARM(.M204*.&JUMP) +
             NEWAPPL(IOF) PASSLIB NOCHECK'
          N,'PGM(IOFSPF) PARM(.TNS*.&JUMP) +
             NEWAPPL(IOF) PASSLIB NOCHECK'
          O,'PGM(IOFSPF) PARM(.ORAM*.&JUMP) +
             NEWAPPL(IOF) PASSLIB NOCHECK'
          Q,'PGM(IOFSPF) PARM(.++CDMRS.&JUMP) +
             NEWAPPL(IOF) PASSLIB NOCHECK'
          R,'PGM(IOFSPF) PARM(.DRI*.&JUMP) +
             NEWAPPL(IOF) PASSLIB NOCHECK'
          S,'PGM(IOFSPF) PARM(.S2K*.&JUMP) +
             NEWAPPL(IOF) PASSLIB NOCHECK'
          T,'PGM(IOFSPF) PARM(.TCPIP*.&JUMP) +
             NEWAPPL(IOF) PASSLIB NOCHECK'
         TF,'PGM(IOFSPF) PARM(.EZAFT*.&JUMP) +
             NEWAPPL(IOF) PASSLIB NOCHECK'
          U,'PGM(IOFSPF) PARM(.TSOLOG*.&JUMP) +
             NEWAPPL(IOF) PASSLIB NOCHECK'
          W,'PGM(IOFSPF) PARM(.WEB*.&JUMP) +
             NEWAPPL(IOF) PASSLIB NOCHECK'
              ' ',' '
              '*','?')
IF (&SPOOLPGM = 'SDSF')
  IF (&ZCMD = '')
    .MSG = ISPD240   /* Enter option */
  IF (&ZCMD = 'A','C','D','F','FF','K','L','M','N','O','Q','R','S',
              'T','TF','U','W')
  ELSE
    .MSG = ISPD241   /* Invalid option */
  IF (&ZCMD = 'A')
    &ISFPREFX = 'MAES*'
  IF (&ZCMD = 'C')
    &ISFPREFX = 'CICS*'
  IF (&ZCMD = 'F')
    &ISFPREFX = 'KNET*'
  IF (&ZCMD = 'FF')
    &ISFPREFX = 'FTPSRV*'
  IF (&ZCMD = 'K')
    &ISFPREFX = 'KEY*'
  IF (&ZCMD = 'L')
    &ISFPREFX = '*NDM*'
  IF (&ZCMD = 'M')
    &ISFPREFX = 'M204*'
  IF (&ZCMD = 'N')
    &ISFPREFX = 'TNS*'
  IF (&ZCMD = 'O')
    &ISFPREFX = 'ORAM*'
  IF (&ZCMD = 'Q')
    &ISFPREFX = '*CDMRS'
  IF (&ZCMD = 'R')
    &ISFPREFX = 'DRI*'
  IF (&ZCMD = 'S')
    &ISFPREFX = 'S2K*'
  IF (&ZCMD = 'T')
    &ISFPREFX = 'TCPIP*'
  IF (&ZCMD = 'TF')
    &ISFPREFX = 'EZAFT*'
  IF (&ZCMD = 'U')
    &ISFPREFX = 'TSOLOG*'
  IF (&ZCMD = 'W')
    &ISFPREFX = 'WEB*'
  VPUT (ISFPREFX) ASIS
  /* Don't use NEWAPPL(ISF) or ISFPREFX will not be passed correctly */
  IF (&ZCMD = 'U')
    &ZSEL = 'PGM(ISFISP) PARM(H)' /* Only "held" output */
  ELSE
    &ZSEL = 'PGM(ISFISP) PARM(DA)'
VPUT (SPOOLPGM) PROFILE
)PNTS
FIELD(ZPS00001) VAR(ZCMD) VAL(A)
FIELD(ZPS00002) VAR(ZCMD) VAL(C)
FIELD(ZPS00003) VAR(ZCMD) VAL(F)
FIELD(ZPS00004) VAR(ZCMD) VAL(FS)
FIELD(ZPS00005) VAR(ZCMD) VAL(K)
FIELD(ZPS00006) VAR(ZCMD) VAL(L)
FIELD(ZPS00007) VAR(ZCMD) VAL(M)
FIELD(ZPS00008) VAR(ZCMD) VAL(N)
FIELD(ZPS00009) VAR(ZCMD) VAL(O)
FIELD(ZPS00010) VAR(ZCMD) VAL(Q)
FIELD(ZPS00011) VAR(ZCMD) VAL(S)
FIELD(ZPS00012) VAR(ZCMD) VAL(R)
FIELD(ZPS00013) VAR(ZCMD) VAL(T)
FIELD(ZPS00014) VAR(ZCMD) VAL(TS)
FIELD(ZPS00015) VAR(ZCMD) VAL(U)
FIELD(ZPS00016) VAR(ZCMD) VAL(W)
)END
./ ADD NAME=TRIMACS  0120-93312-98106-1342-00058-00042-00000-PANEL
)ATTR
  # AREA(SCRL) EXTEND(ON)
)BODY
%TUTORIAL ---------------------- EDIT MACROS --------------------------
%OPTION  ===>_ZCMD
+
+  The following macros have been implemented by Data Technologies and a
+  are available when using ISPF Edit.  The macros may be selected by na
+  more detailed explanation:
                                                                  %Up F1
#MACAREA ---------------------------------------------------------------
)AREA MACAREA
    %ACFCOMP +- Compile the ACF2 rule currently being edited
    %ACFTRAP +- Queue ACF subcommands and trap output
    %ASA2PC  +- Convert ASA printer control to ASCII code
    %BROWSE4 +- Invoke ISPF Browse/View while in edit
    %EOL     +- Set cursor at end of current screen line
    %FX      +- Find ALL 'string' after EXCLUDE ALL
    %FXC     +- Find ALL 'string @ cursor' after EXCLUDE ALL
    %GO      +- Submit job and then invoke IOF
    %IDCAMS  +- Execute IDCAMS commands currently being edited
    %JC      +- Build a JOB card sequence at the beginning of a member
    %LISTDSI +- Display data set information in Option 3.2 format
    %MEMLIST +  Display member list of the current PDS
    %OPER    +- Issue canned MVS/JES2 operator commands via SDSF
    %PLUG    +- Plug data into a range of lines at a given column
    %PROFSET +- Mass change all edit profiles for an ISPF application
    %RUN     +- EXECute the CLIST/EXEC currently being edited
    %RUNACF  +- Issue ACF subcommands currently being edited
    %SHOWCUT +- Browse the ISPF cut table (PDS 8.4 version)
    %TESTACF +- Test ACF2 rules based on DSN= values in JCL
    %UNX     +- Show the first n line(s) from each X-cluded block
    %WEAVE   +- Interlace data from CUT table into a range of lines
)INIT
)PROC
   &ZSEL = TRANS(&ZCMD
                ACFCOMP,*#ACFCOMP
                ACFTRAP,*#ACFTRAP
                ASA2PC,*#ASA2PC
                BROWSE4,*#BROWSE4
                EOL,*#EOL
                FX,*#FX
                FXC,*#FXC
                GO,*#GO
                JC,*#JC
                LISTDSI,*#LISTDSI
                MEMLIST,*#MEMLIST
                OPER,*#OPER
                PLUG,*#PLUG
                PROFSET,*#PROFSET
                RUN,*#RUN
                RUNACF,*#RUNACF
                SHOWCUT,*#SHOWCUT
                TESTACF,*#TESTACF
                UNX,*#UNX
                WEAVE,*#WEAVE
                )
)END
