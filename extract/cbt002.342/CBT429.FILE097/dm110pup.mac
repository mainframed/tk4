         TITLE 'DM110PUP - EXTRACT RECS FROM VTOCS'
DM110PUP CSECT
         REGS
         USING DM110PUP,R15
         B     MAINEP
         DC    AL1(L'CSECTLIT)
CSECTLIT DC    C'DM110PUP - RECS FROM VTOCS &SYSDATE &SYSTIME'
*
*   SCAN ALL PACKS POINTED TO BY DD STATEMENTS:
*   THE DD STATEMENT OF A PACK TO BE PROCESSED MUST HAVE A DDNAME
*   OF DISKXXXX.  XXXX CAN BE ANYTHING.  ALL DD'S OF THIS FORM WILL
*   BE PROCESSED.
*
*   PARM PROCESS:
*   IF PARM=HSM - THEN SCAN FOR ALL DATASETS WITH THE NAME *.HMIG.**
*                 SKIP OTHER DATASETS.
*
*   IF PARM=NOSYS - SYS1.** ARE EXCLUDED.
*
*   IF NO PARM SUPPLIED SELECT ALL DATASETS.
*
*   OUTPUT FILE SELECTED WILL HAVE:
*      DSN, VOLSER, ALLOCATED/USED TRKS, DSORG, BLKSIZE, LRECL,
*      RECFM, NUMBER OF EXTENTS, CREATE DATE, AND REF DATE.
*
*
MAINEP   DS    0H
         SAVE  (14,12)
         LR    R12,R15             ENTRY ADR TO BASE REG
         DROP  R15
         USING DM110PUP,R12        PGM BASE
         LR    R2,R13
         LA    R13,SAVEAREA        SAVEAREA AND WORKING STORAGE
         USING SAVEAREA,R13
         ST    R2,SAVEAREA+4       SAVE CALLERS R13
         ST    R13,8(,R2)          BACK LINK SAVEAREA
         BAL   R14,PARMPROC        PROCESS PARM
         OPEN  (EXTRACTV,(OUTPUT))
         TM    EXTRACTV+DCBOFLGS-IHADCB,DCBOFOPN  OPEN OK
         BNO   ERROPV              NO
         EXTRACT TIOT,FIELDS=TIOT GET ADDRESS OF TIOT
         L     R2,TIOT        LOAD ADDRESS OF TIOT IN REG2
         LA    R2,24(R2)      SKIP TO DD ENTRIES
         ST    R2,NEXTDD      SAVE FIRST DD TO INITIALIZE LOOP
         TITLE 'MAIN PROCESS'
MAINLOOP EQU   *                   PROCESS NEXT DD
         BAL   R14,DSKO            OPEN NEXT DISK
         B     *+4(R15)            CHECK RETURN CODE
         B     MAINP               00 -- OPEN OK - PROCESS IT
         B     EXIT                04 -- EOF - DONE
MAINP    EQU   *
         BAL   R14,DSKP            PROCESS IT
         BAL   R14,DSKC            CLOSE IT
         B     MAINLOOP
         TITLE 'PROCESS PARM'
*
*        PROCESS PARM=NNN FOR (HSM) OR (-NONE-)
*
PARMPROC EQU    *
         ST     R14,PARMR14        SAVE RETURN ADDR
         L      R1,0(R1)           LOAD PARM PTR
         LH     R2,0(R1)           LOAD PARM LENGTH
         LTR    R2,R2              ANY PARM
         BZ     PARMEXIT           NO -- USE DEFAULT
         CH     R2,=H'03'          CHECK FOR 'HSM' LEN
         BE     PARMHSM            EQUAL -- DO HSM PROCESSING
         CH     R2,=H'5'           CHECK FOR 'NOSYS' LEN
         BE     PARMNOSY           EQUAL DO NOSYS PROCESSING
         B      PARMEXIT           MISMATCH -- DEFAULT
PARMNOSY EQU    *
         CLC    =C'NOSYS',2(R1)    IS IT OK
         BNE    PARMEXIT           NO -- DEFAULT
         MVI    PARMSW,C'S'        SET FOR NOSYS PROCESSING
         B      PARMEXIT           DONE
PARMHSM  EQU    *
         CLC    2(3,R1),=C'HSM'    IS IT OK
         BNE    PARMEXIT           NO, RETURN
         MVI    PARMSW,C'H'        SET FOR HSM PROCESS
PARMEXIT EQU    *
         L      R14,PARMR14        RESTORE RETURN ADDR
         BR     R14                RETURN
         TITLE 'DSKO     - OPEN NEXT DISK'
DSKO     EQU   *
         ST    R14,DSKOR14         SAVE RETURE ADDR
DSKOSKIP EQU   *
         L     R2,NEXTDD      PICK UP CURRENT DD SEG
         SR    R3,R3          CLEAR REG3
         IC    R3,0(R2)       DETERMINE IF END OF TIOT
         LTR   R3,R3          END OF TIOT?
         BZ    DSKOEOF        GO TO EOJ NORMAL
         LA    R1,0(R2,R3)    ADDR OF NEXT TIOT
         ST    R1,NEXTDD      SAVE
         CLC   =C'DISK',4(R2) IS THIS A VALID DD ENTRY
         BNE   DSKOSKIP       NO -- SKIP IT
         MVC   DSKXDDN,4(R2)  SAVE DDNAME
         LA    R6,DISKX       A(DCB)
         USING IHADCB,R6      ADDRESSABILITY
         MVC   DCBDDNAM,DSKXDDN    POST TO DCB
         RDJFCB ((R6))
         LTR   R15,R15        OK?
         BNZ   ERRDSKO1       NO -- ERROR
         DEVTYPE DSKXDDN,DEVDATA,DEVTAB    DISK INFO
         LH    R15,DEVDTC          POST TRKS/CYL
         MH    R15,DEVDCV          X CYLS/VOL = TRKS/VOL
         ST    R15,CAPTRKS         POST
         OI    JFCBTSDM,JFCNWRIT   DO NOT WRITE BACK JFCB
         MVI   JFCBDSNM,4          READ VTOC DSN
         MVC   JFCBDSNM+1(L'JFCBDSNM-1),JFCBDSNM   CHAIN X'04'
         OPEN  ((R6),(INPUT)),TYPE=J
         TM    DCBOFLGS,DCBOFOPN   OPEN OK
         BNO   ERRDSKO2            NO
         L     R1,DCBDEBAD         DEB ADR
         USING DEBBASIC,R1
         ST    R1,ADDRDEB          SAVE
         L     R1,DEBBASND         GET UCB ADR (DEBUCBAD)
         USING UCBOB,R1
         ST    R1,ADDRUCB          SAVE
         CLI   UCBTBYT3,UCB3DACC   CHECK FOR DASD
         BNE   ERRDSKO2            NOT DASD
         MVC   VRECVOLI,UCBVOLI    POST VOLSER
         MVC   DEVSER,UCBVOLI      VOLSER FOR CAMLST
         DROP  R1
         MVI   DSCBEOF,C'N'        SET NO EOF
         BAL   R14,SETD            SET DSCB LOGIC TO CVAF OR CAMLST
         LA    R15,0               SET RETURN CODE
         B     DSKOEXIT            CONTINUE
DSKOEOF  EQU   *                   NO MORE DD'S
         LA    R15,4               SET RETURN CODE
DSKOEXIT EQU   *
         L     R14,DSKOR14         RESTORE RETURN ADDR
         BR    R14                 RETURN
         DROP  R6
         TITLE 'SETD    - SET DSCB TO CAMLST OR CVAF'
SETD     EQU   *
         ST    R14,SETDR14         SAVE RETURN ADDR
         XC    DONEDSN,DONEDSN     CLEAR DONE DSN
         L     R2,ADDRUCB          A(UCB)
         CVAFTST UCB=(2)
         CH    R15,=H'8'           CVAF ACTIVE
         BE    SETDCVAF            YES
         CVD   R15,WRK8A           NOW PACKED
         UNPK  WRK8B,WRK8A         NOW CHAR
         OI    WRK8B+L'WRK8B-1,X'F0' FIX SIGN
         MVC   SETDWTOR,WRK8B+6    POST RC TO MSG
         MVC   SETDWTOV,DEVSER     POST VOLSER TO MSG
         LA    R1,SETDWTO          A(WTO)
         WTO   MF=(E,(1))          EXECUTE
         MVI   CVAFSW,C'N'         NO -- POST NOT INDEXED
         MVC   HWACCHHR,HWAMAX     SET END OF VTOC TO INFINITY
*                                  WILL BE RESET FROM FORMAT4
         B     SETDEXIT            DONE
SETDCVAF EQU   *
         MVI   CVAFSW,C'I'         POST INDEXED
         XC    BUFLIST(BFLHLN+BFLELN),BUFLIST CLEAR OLD BUFFER LIST
         OI    BFLHFL,BFLHDSCB     PROCESS DSCBS
         MVI   BFLHNOE,1           ONE BUFFER
         LA    R15,DS1FMTID        A(DSNAME)
         ST    R15,BFLEBUF         POST
         MVI   BFLELTH,DS1END-DS1FMTID L'(DATA PART OF DSCB) (96)
         LA    R0,CVPL             A(WORKING CVPL)
         LH    R1,CVLTH            L'(WORKING CVPL)
         LA    R14,CVPLMDL         A(MODEL CVPL)
         LR    R15,R1              COPY LENGTH
         MVCL  R0,R14              REFRESH WORKING CVPL
         L     R15,ADDRDEB         A(DEB)
         ST    R15,CVDEB           POST
         XC    CVAFDSN,CVAFDSN     CLEAR CVAF DSN
SETDEXIT EQU   *
         L     R14,SETDR14         RESTORE RETURN ADDR
         BR    R14                 RETURN
*               0123456789012345678901234567890123456789012345
SETDWTO  WTO   'DM110PUP - CVAFTST RCNN ON VOLSER - USING BSAM',       X
               ROUTCDE=11,DESC=7,MF=L
SETDWTOR EQU   SETDWTO+4+21,2
SETDWTOV EQU   SETDWTO+4+27,6
         TITLE 'DSKP     - PROCESS THIS DISK VTOC'
DSKP     EQU   *
         USING IHADCB,R6           ADDRESSABILITY
         ST    R14,DSKPR14         RESTORE RETURN ADDR
DSKPLOOP EQU   *                   GET NEXT VTOC REC
         BAL   R14,GETD            GET NEXT REC
         CLI   DSCBEOF,C'E'        EOF
         BE    DSKPX               YES -- EXIT
         CLI   DS1FMTID,C'1'       FORMAT 1
         BE    DSKPF1              YES
         CLI   DS4IDFMT,C'4'       FORMAT 4
         BE    DSKPF4              YES
         B     DSKPLOOP            IGNORE
DSKPF1   EQU   *                   FORMAT1
         CLC   DS1DSNAM,DONEDSN    HAVE WE ALREADY DONE THIS ONE
         BNH   DSKPLOOP            YES -- LOOP BACK
         LA    R1,DS1DSNAM         A(DSNAME OF DSCB)
         CLI   PARMSW,C'S'         PARM SW = NOSYS?
         BE    DSKNOSYS            YES - DO NOSYS PROCESSING
         CLI   PARMSW,C'H'         PARM SW = HSM?
         BE    DSKHSM              YES - DO HSM PROCESSING
         B     DSKOTHER            NORMAL -- PROCESS
DSKNOSYS EQU   *
         CLC   =C'SYS1',0(R1)      DON'T NEED SYS1 DATASETS
         BE    DSKPLOOP            NO -- IGNORE
         B     DSKOTHER            PROCESS
DSKHSM   EQU   *
         TRT   DS1DSNAM,DOTTABLE   FIND FIRST '.'
         BNL   DSKPLOOP            MUST FIND '.' BEFORE THE END
         CLC   =C'.HMIG.',0(R1)    MIGRATED DATA SET
         BNE   DSKPLOOP            NO -- IGNORE
DSKOTHER EQU   *
         MVC   VRECDSN,DS1DSNAM    POST DATASET NAME
         BAL   R14,DSORG           OBTAIN DSORG OF FILE
         BAL   R14,BLKL            OBTAIN BLKSIZE/LRECL OF FILE
         BAL   R14,RECFM           OBTAIN RECFM OF FILE
         BAL   R14,DATES           OBTAIN DATES
         BAL   R14,SIZE            COMPUTE SIZE OF FILE
         PUT   EXTRACTV,VREC       WRITE REC
         B     DSKPLOOP            LOOP BACK
DSKPF4   EQU   *
         MVC   HWACCHHR,DS4HPCHR   RESET VTOC HIGH WATER MARK
         B     DSKPLOOP            LOOP BACK
DSKPX    EQU   *
         L     R14,DSKPR14         RESTORE RETURN ADDR
         BR    R14                 RETURN
         DROP  R6
         TITLE 'GETD     - GET NEXT DSCB RECORD'
GETD     EQU   *
         ST    R14,GETDR14         SAVE RETURN ADDR
         CLI   CVAFSW,C'N'         NON-INDEXED
         BE    GETDN               YES
         MVC   DONEDSN,CVAFDSN     POST DSN AS DONE
         MVC   DS1DSNAM,CVAFDSN    POST DSN
         CVAFSEQ MF=(E,CVPL)       GET NEXT
         LTR   R15,R15             OK
         BNZ   GETDCVE             NO -- ERROR
         MVC   CVAFDSN,DS1DSNAM    REFRESH WITH NEW DSN
         B     GETDEXIT            DONE
GETDCVE  EQU   *
         ST    R15,CVAFR15         SAVE
         MVC   CVAFST,CVSTAT       SAVE
         CVAFDIR ACCESS=RLSE,      RELEASE CVAF BUFFERS                X
               BUFLIST=0,          SAVE USER BUFFER LIST               X
               IXRCDS=NOKEEP,      RELEASE VIER BUFFERS                X
               MF=(E,CVPL)
         CLC   CVAFR15,=F'4'       EOF CLASS OF ERROR
         BNE   GETDCVB             NO -- GO TO BSAM
         CLI   CVAFST,32           EOF
         BE    GETDEOF             YES -- PROCESS
GETDCVB  EQU   *
         SR    R15,R15             CLEAR
         IC    R15,CVAFST          POST STATUS
         CVD   R15,WRK8A           NOW PACKED
         UNPK  WRK8B,WRK8A         NOW CHAR
         OI    WRK8B+L'WRK8B-1,X'F0' FIX SIGN
         MVC   GETDWTOR,WRK8B+5    POST STATUS TO MSG
         MVC   GETDWTOV,DEVSER     POST VOLSER TO MSG
         LA    R1,GETDWTO          A(WTO)
         WTO   MF=(E,(1))          EXECUTE
         MVI   CVAFSW,C'N'         POST NON-INDEXED
GETDN    EQU   *
         USING IHADCB,R6           ADDRESSABILITY
         CLC   HWACCHHR,DCBFDAD+3  AT/PAST HIGH WATER MARK
         BNH   GETDEOF             YES -- SET EOF
         READ  DSKPR,SF,DISKX,IECSDSF1,'S'
         CHECK DSKPR
         DROP  R6
         B     GETDEXIT            DONE
GETDEOF  EQU   *
         MVI   DSCBEOF,C'E'        POST EOF
GETDEXIT EQU   *
         L     R14,GETDR14         RESTORE RETURN ADDR
         BR    R14
*               0123456789012345678901234567890123456789012345
GETDWTO  WTO   'DM110PUP - CVAFSTAT=NNN ON VOLSER - USING BSAM',       X
               ROUTCDE=11,DESC=7,MF=L
GETDWTOR EQU   GETDWTO+4+20,3
GETDWTOV EQU   GETDWTO+4+27,6
         TITLE 'DSKC     - CLOSE DISKX'
DSKC     EQU   *
         USING IHADCB,R6           ADDRESSABILITY
         ST    R14,DSKCR14         SAVE RETURN ADDR
         CLOSE ((R6))
         L     R14,DSKCR14         RESTORE RETURN ADDR
         BR    R14                 RETURN
         DROP  R6
         TITLE 'BLKL     - OBTAIN THE BLKSIZE/LRECL OF THE DATASET'
BLKL     EQU   *
         ST    R14,DSBLK14         SAVE RETURN ADDR
         LH    R9,DS1BLKL          BLKSIZE FROM DSCB
         CVD   R9,WRK8A            CONVERT TO DEC
         MVC   WRK8B(6),=X'402020202120' POST EDIT MASK
         ED    WRK8B(6),WRK8A+5    EDIT
         MVC   VRECBLKL,WRK8B+1    POST
         LH    R9,DS1LRECL         LRECL FROM DSCB
         CVD   R9,WRK8A            CONVERT TO DEC
         MVC   WRK8B(6),=X'402020202120' POST EDIT MASK
         ED    WRK8B(6),WRK8A+5    EDIT
         MVC   VRECLRCL,WRK8B+1    POST
BLKLX    EQU   *
         L     R14,DSBLK14         RESTORE RETURN ADDR
         BR    R14                 RETURN
         TITLE 'DATES    - OBTAIN CREATE/REF DATES OF THE DATASET'
DATES    EQU   *
         ST    R14,DATER14         SAVE RETURN ADDR
         SR    R15,R15             CLEAR
         IC    R15,DS1CREDT        POST CREATE DATE YY  (BIN)
         MH    R15,=H'1000'        ALIGN
         SR    R14,R14             CLEAR
         ICM   R14,B'0011',DS1CREDT+1 POST DDD (BIN)
         AR    R15,R14             MERGE
         CVD   R15,WRK8A           NOW PACKED
         UNPK  VRECCDAT,WRK8A      NOW CHAR
         OI    VRECCDAT+L'VRECCDAT-1,X'F0' FIX THE SIGN
         SR    R15,R15             CLEAR
         IC    R15,DS1REFD         POST CREATE DATE YY  (BIN)
         MH    R15,=H'1000'        ALIGN
         SR    R14,R14             CLEAR
         ICM   R14,B'0011',DS1REFD+1 POST DDD (BIN)
         AR    R15,R14             MERGE
         CVD   R15,WRK8A           NOW PACKED
         UNPK  VRECRDAT,WRK8A      NOW CHAR
         OI    VRECRDAT+L'VRECRDAT-1,X'F0' FIX THE SIGN
         L     R14,DATER14         RESTORE RETURN ADDR
         BR    R14                 RETURN
         TITLE 'DSORG    - OBTAIN THE DSORG OF THE DATASET'
DSORG    EQU   *
         ST    R14,DSOGR14         SAVE RETURN ADDR
         MVC   VRECORG,=C'  '      SET TO BLANK AT START
         MVI   VRECORGU,C' '       SET TO BLANK AT START
         TM    DS1DSORG,X'01'      (??U)
         BNO   DSORGNO             NO - SKIP IT
         MVI   VRECORGU,C'U'       ADD THE 'U' FOR UNMOVABLE
DSORGNO  TM    DS1DSORG,X'80'      (IS)
         BO    DSORGI              YES - ADD IT
         TM    DS1DSORG,X'40'      (PS)
         BO    DSORGP              YES - ADD IT
         TM    DS1DSORG,X'20'      (DA)
         BO    DSORGD              YES - ADD IT
         TM    DS1DSORG,X'02'      (PO)
         BO    DSORGO              YES - ADD IT
         CLC   DS1DSORG+1(1),=X'08'  (VS)
         BE    DSORGV              YES - ADD IT
         B     DSORGX              DONE
DSORGI   EQU   *
         MVC   VRECORG,=C'IS'      POST
         B     DSORGX              EXIT OK
DSORGP   EQU   *
         MVC   VRECORG,=C'PS'      POST
         B     DSORGX              EXIT OK
DSORGD   EQU   *
         MVC   VRECORG,=C'DA'      POST
         B     DSORGX              EXIT OK
DSORGO   EQU   *
         MVC   VRECORG,=C'PO'      POST
         B     DSORGX              EXIT OK
DSORGV   EQU   *
         MVC   VRECORG,=C'VS'      POST
         B     DSORGX              EXIT OK
DSORGX   EQU   *
         L     R14,DSOGR14         RESTORE RETURN ADDR
         BR    R14                 RETURN
         TITLE 'RECFM    - OBTAIN THE RECFM OF THE DATASET'
RECFM    EQU   *
         ST    R14,RCFMR14         SAVE RETURN ADDR
         MVC   VRECRCFM,=C'   '    SET TO BLANK AT START
         TM    DS1RECFM,X'C0'      (U)
         BO    RECFMU              YES - GO POST IT
         TM    DS1RECFM,X'80'      (F)
         BO    RECFMF              YES - GO POST IT
         TM    DS1RECFM,X'40'      (V)
         BO    RECFMV              YES - GO POST IT
         B     RECFX               NO MATCH - DONE
RECFMU   EQU   *
         MVC   VRECRCFM(1),=C'U'   POST
         B     RECFX               EXIT - DONE
RECFMF   EQU   *
         MVC   VRECRCFM(1),=C'F'   POST
         B     RECFMORE            EXIT - CHECK FOR MORE
RECFMV   EQU   *
         MVC   VRECRCFM(1),=C'V'   POST
         B     RECFMORE            EXIT - CHECK FOR MORE
RECFMORE EQU   *
         TM    DS1RECFM,X'18'      (?BS)
         BO    RECFBS              YES
         TM    DS1RECFM,X'14'      (?BA)
         BO    RECFBA              YES
         TM    DS1RECFM,X'12'      (?BM)
         BO    RECFBM              YES
         TM    DS1RECFM,X'10'      (?B)
         BO    RECFB               YES
         TM    DS1RECFM,X'04'      (?A)
         BO    RECFA               YES
         TM    DS1RECFM,X'02'      (?M)
         BO    RECFMM              YES
         B     RECFX               EXIT OK
RECFBA   EQU   *
         MVC   VRECRCFM+1(2),=C'BA'  POST
         B     RECFX               EXIT OK
RECFBM   EQU   *
         MVC   VRECRCFM+1(2),=C'BM'  POST
         B     RECFX               EXIT OK
RECFBS   EQU   *
         MVC   VRECRCFM+1(2),=C'BS'  POST
         B     RECFX               EXIT OK
RECFB    EQU   *
         MVC   VRECRCFM+1(1),=C'B'  POST
         B     RECFX               EXIT OK
RECFA    EQU   *
         MVC   VRECRCFM+1(1),=C'A'  POST
         B     RECFX               EXIT OK
RECFMM   EQU   *
         MVC   VRECRCFM+1(1),=C'M'  POST
         B     RECFX               EXIT
RECFX    EQU   *
         L     R14,RCFMR14         RESTORE RETURN ADDR
         BR    R14                 RETURN
         TITLE 'SIZE     - CALCULATE EXTENT SIZE IN TRKS'
SIZE     EQU   *
*
*        WARNING:  THIS ROUTINE MAY CAUSE A FMT3 REC TO OVERLAY
*                  THE FMT1 SO EXECUTE THIS ROUTINE LAST
*
*        R2    INTERMEDIATE FILE SIZE IN TRKS
*        R3    TRKS/CYL
*        R4    EXTENTS IN FILE
*        R5    A(CURRENT SET OF SEGMENTS)
*        R6    RESERVED (DISKX DCB ADDR)
*        R7    EXTENTS IN CURRENT SET
*
         ST    R14,SIZER14         SAVE RETURN ADDR
         CLC   DS1LSTAR,=X'000000' IS SPACE USED = ZERO
         BNE   SIZECK1             NO, CHECK FOR SOMETHING ELSE
         MVC   USED(4),=F'00'      SPACE USED = ZERO
         B     SIZECK3
SIZECK1  TM    DS1DSORG,X'42'      LAST BLK POINTER ONLY FOR PO/PS
         BM    SIZECK2             YES, GO GET SPACE USED
         MVC   USED(4),=F'-1'      SET FOR COPY OF ALLOC TO USED
         B     SIZECK3
SIZECK2  LH    R2,DS1LSTAR         LAST TRACK
         LA    R2,1(R2)            ADD ONE TO IT
         ST    R2,USED             SAVE USED NUMBER
SIZECK3  SR    R2,R2               CLEAR FILE SIZE IN TRKS
         LH    R3,DEVDTC           PICK UP TRKS/CYL
         SR    R4,R4               CLEAR
         IC    R4,DS1NOEPV         EXTENT COUNT
         CVD   R4,WRK8A            NOW PACKED
         MVC   WRK8B(4),=X'40202120' POST EDIT MASK
         ED    WRK8B(4),WRK8A+6    EDIT
         MVC   VRECEXTN,WRK8B+1    POST
         LA    R5,DS1EXT1          A(FIRST EXTENT SEG)
         LA    R7,3                NO OF EXTENTS IN THIS SEG
         BAL   R14,XTNT            PROCESS THESE EXTENTS
         LTR   R4,R4               DONE
         BZ    SIZEEND             YES
SIZELOOP EQU   *
         MVC   F3CCHHR,DS1PTRDS    POST FMT3CCHHR
         CLC   F3CCHHR,=X'0000000000' VALID
         BE    ERRCCHHR            NO
         OBTAIN FMTCAML            GET FMT3
         LTR   R15,R15             OK
         BNE   ERRFMT3O            NO
         CLI   DS3FMTID,C'2'       ISAM FMT 2
         BE    SIZELOOP            YES -- CHAIN TO FMT3
         CLI   DS3FMTID,C'3'       FMT3
         BNE   ERRFMT3T            NO
         LA    R5,DS3EXTNT         A(NEXT SET OF EXTENT SEGS)
         LA    R7,4                NUMBER OF EXTENTS IN THIS SEG
         BAL   R14,XTNT            PROCESS THESE EXTENTS
         LTR   R4,R4               DONE
         BZ    SIZEEND             YES
         LA    R5,DS3ADEXT         A(NEXT SET OF EXTENT SEGS)
         LA    R7,9                NUMBER OF EXTENTS IN THIS SEG
         BAL   R14,XTNT            PROCESS THESE EXTENTS
         LTR   R4,R4               DONE
         BZ    SIZEEND             YES
         B     SIZELOOP            LOOP BACK (CCHHR IN SAME PLACE)
SIZEEND  EQU   *
         C     R2,CAPTRKS          SOMETHING SCREWY
         BH    ERRCAPTR            YES -- ERROR
         CVD   R2,WRK8             NOW PACKED
         MVC   WRK8B(6),=X'402020202120' POST EDIT MASK
         ED    WRK8B(6),WRK8+5     EDIT
         MVC   VRECALLC,WRK8B+1    POST
         CLC   =F'-1',USED         WAS IT SET FOR COPY
         BNE   SIZEUSED            NO, LEAVE VALUE ALONE
         MVC   VRECUSED,VRECALLC   SET TO ALLOCATED SPACE VALUE
         B     SIZEDONE            AL DONE HERE - BRANCH BACK
SIZEUSED L     R2,USED             STORE INTO REGISTER - TRKS USED
         CVD   R2,WRK8             NOW PACKED
         MVC   WRK8B(6),=X'402020202120' POST EDIT MASK
         ED    WRK8B(6),WRK8+5     EDIT
         MVC   VRECUSED,WRK8B+1    POST
SIZEDONE L     R14,SIZER14         RESTORE RETURN ADDR
         BR    R14                 RETURN
         TITLE 'XTNT     - PROCESS A SET OF EXTENTS'
XTNT     EQU   *
         ST    R14,XTNTR14         SAVE RETURN ADDR
         LTR   R4,R4               NO EXTENTS
         BZ    XTNTEXIT            YES -- DONE
         SR    R14,R14             CLEAR
XTNTLOOP EQU   *
         LH    R15,6(R5)           HI CC
         MR    R14,R3              X TRK/CYL = TRKS
         AR    R2,R15              ADD TO FILE SIZE
         AH    R2,8(R5)            + HI HH
         LH    R15,2(R5)           LO CC
         MR    R14,R3              X TRK/CYL = TRKS
         SR    R2,R15              SUBTRACT FROM FILE SIZE
         SH    R2,4(R5)            - LO HH
         LA    R2,1(R2)            +1 = NEW FILE SIZE
         BCT   R4,XTNTCKSG         DEC EXTENTS IN FILE COUNT
         B     XTNTEXIT            0 = DONE
XTNTCKSG EQU   *
         LA    R5,10(R5)           SET TO NEXT CCHH
         BCT   R7,XTNTLOOP         DEC EXTENTS IN SEG
XTNTEXIT EQU   *
         L     R14,XTNTR14         RESTORE RETURN ADDR
         BR    R14                 RETURN
         TITLE 'ERROR MESSAGES'
ERRCVAF  EQU   *
         ST    R15,CVAFR15         SAVE
         WTO   'DM110PUP - CVAF ERROR PROCESSING DSCBS',               *
               ROUTCDE=11,DESC=7
         B     ABEND
ERROPV   EQU   *
         WTO   'DM110PUP - OPEN FAILED FOR EXTRACTV',                  *
               ROUTCDE=11,DESC=7
         B     ABEND
ERRDSKO1 EQU   *
         MVC   ERRDSK1M,DSKXDDN   POST CURRENT DISKX DDNAME
ERRDSK1W WTO   'DM110PUP - DISKXX   RDJFCB FAILED',                    *
               ROUTCDE=11,DESC=7
ERRDSK1M EQU   ERRDSK1W+23,8       DDNAME SLOT
         B     ABEND
ERRDSKO2 EQU   *
         MVC   ERRDSK2M,DSKXDDN   POST CURRENT DISKX DDNAME
ERRDSK2W WTO   'DM110PUP - DISKXX   OPEN FAILED/NOT DASD ',            *
               ROUTCDE=11,DESC=7
ERRDSK2M EQU   ERRDSK2W+23,8       DDNAME SLOT
         B     ABEND
ERRCCHHR WTO   'DM110PUP - CCHHR POINTER BAD FOR SECONDARIES',         *
               ROUTCDE=11,DESC=7
         B     ABEND
ERRCAPTR WTO   'DM110PUP - VTOC ERROR - FILE BIGGER THAN VOLUME',      *
               ROUTCDE=11,DESC=7
         B     ABEND
ERRFMT3O WTO   'DM110PUP - OBTAIN FOR FORMAT3 DSCB FAILED',            *
               ROUTCDE=11,DESC=7
         B     ABEND
ERRFMT3T WTO   'DM110PUP - DSCB OBTAINED NOT FORMAT3',                 *
               ROUTCDE=11,DESC=7
         B     ABEND
         TITLE 'EXIT/ABEND'
ABEND    EQU   *
         ABEND 1000,DUMP
EXIT     EQU   *
         CLOSE (EXTRACTV)
         L     R13,4(R13)
         RETURN (14,12),RC=0
         LTORG
         TITLE 'DATA AREAS - MISCELLANEOUS'
*
*        DOUBLEWORDS
*
SAVEAREA DS    9D                  REG SAVE AREA
WRK8A    DC    D'0'                WORK AREA
WRK8B    DC    D'0'                WORK AREA
WRK8     EQU   WRK8A,8
*
*        FULLWORDS
*
DATER14  DS    F                   R14 SAVE AREA FOR DATES
DSKCR14  DS    F                   R14 SAVE AREA FOR DSKC
DSKOR14  DS    F                   R14 SAVE AREA FOR DSKO
DSKPR14  DS    F                   R14 SAVE AREA FOR DSKP
DSOGR14  DS    F                   R14 SAVE AREA FOR DSORG
DSBLK14  DS    F                   R14 SAVE AREA FOR BLKL
GETDR14  DS    F                   R14 SAVE AREA FOR GETD
PARMR14  DS    F                   R14 SAVE AREA FOR PARM
RCFMR14  DS    F                   R14 SAVE AREA FOR RECFM
SETDR14  DS    F                   R14 SAVE AREA FOR SETD
SIZER14  DS    F                   R14 SAVE AREA FOR SIZE
XTNTR14  DS    F                   R14 SAVE AREA FOR XTNT
CAPTRKS  DS    F                   PACK CAPACITY IN TRKS
USED     DC    F'0'                NUMBER OF USED TRKS
TIOT     DS    F                   A(TIOT)
NEXTDD   DS    F                   A(NEXT DD SLOT INTIOT)
ADDRUCB  DS    F                   A(UCB) FOR DISKX
ADDRDEB  DS    F                   A(DEB) FOR DISKX
CVAFR15  DS    F                   R15 SAVE AREA FOR RC FROM CVAF
*
*        HEX AND CHAR DATA
*
F3CCHHR  DS    XL5                 CCHHR FOR NEXT FORMAT3 DSCB
HWACCHHR DS    XL5                 END OF VTOC CCHHR
HWAMAX   DC    XL5'FFFFFFFFFF'     INFINITY
DSKXDDN  DC    C'DISK00  '
DISKNO   DC    PL2'0'              CURRENT DISK DD
CVAFST   DS    X                   SAVE AREA FOR CVAF STATUS
CVAFSW   DS    C                   INDEXED/NON SW FOR DISKX VTOC
*              C'I'                INDEXED
*              C'N'                NON-INDEXED
DSCBEOF  DS    C                   EOF INDICATOR FOR DISKX VTOC
*              C'N'                NOT EOF'
*              C'E'                EOF
PARMSW   DC    C' '                PARM SWITCH
*              C' '                NORMAL PROCESSING
*              C'S'                NOSYS - SKIP SYS1.** FILES
*              C'H'                HSM   - KEEP *.HMIG.** FILES
*
CVAFDSN  DS    CL44                DSN SAVE AREA FOR CVAF LOGIC
DONEDSN  DS    CL44                DSN SAVE AREA FOR BSAM LOGIC
*
VREC     DS    0CL89               ACTUAL PRINT LINE
VRECDSN  DS    CL44
VRECVOLI DS    CL6
VRECALLC DS    CL5
VRECUSED DS    CL5
VRECORG  DS    CL2
VRECORGU DS    CL1
VRECBLKL DS    CL5
VRECLRCL DS    CL5
VRECRCFM DS    CL3
VRECEXTN DS    CL3
VRECCDAT DS    CL5
VRECRDAT DS    CL5
         DS    0D
*
DOTTABLE DS    0CL256
*                 0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'00000000000000000000000000000000'  0
         DC    X'00000000000000000000000000000000'  1
         DC    X'00000000000000000000000000000000'  2
         DC    X'00000000000000000000000000000000'  3
         DC    X'00000000000000000000004B00000000'  4
         DC    X'00000000000000000000000000000000'  5
         DC    X'00000000000000000000000000000000'  6
         DC    X'00000000000000000000000000000000'  7
         DC    X'00000000000000000000000000000000'  8
         DC    X'00000000000000000000000000000000'  9
         DC    X'00000000000000000000000000000000'  A
         DC    X'00000000000000000000000000000000'  B
         DC    X'00000000000000000000000000000000'  C
         DC    X'00000000000000000000000000000000'  D
         DC    X'00000000000000000000000000000000'  E
         DC    X'00000000000000000000000000000000'  F
*                 0 1 2 3 4 5 6 7 8 9 A B C D E F
*
         TITLE 'DATA AREAS - EXIT LISTS AND PARAMETER LISTS'
JFCBEXIT DS    0F
         DC    X'87'               FLAG END OF LIST + JFCB
         DC    AL3(INFMJFCB)       A(MODIFIED JFCB)
*
FMTCAML  CAMLST SEEK,F3CCHHR,DEVSER,IECSDSL1   OBTAIN NEXT FMT3
*
DEVSER   DC    CL6' '              VOLSER
DEVDATA  DS    0F                  DEVTYPE MACRO WORK AREA
         DS    F                   UCBTYPE
         DS    F                   BLKSIZE
DEVDCV   DS    H                   CYLS/VOL
DEVDTC   DS    H                   TRKS/CYL
         DS    H                   TRK LENGTH
         DS    XL2                 OVERHEAD INFO
         DS    X                   OVERHEAD INFO
         DS    X                   SWITCHES
         DS    XL2                 TOLERENCE INFO
*
BUFLIST  ICVAFBFL DSECT=NO
*
CVPL     CVAFSEQ ACCESS=GT,                                            X
               IXRCDS=KEEP,                                            X
               DSN=DS1DSNAM,                                           X
               BUFLIST=BUFLIST,                                        X
               MF=L
         ORG   CVPL
ICVAFPL  ICVAFPL DSECT=NO
CVPLMDL  CVAFSEQ ACCESS=GT,                                            X
               IXRCDS=KEEP,                                            X
               DSN=DS1DSNAM,                                           X
               BUFLIST=BUFLIST,                                        X
               MF=L
         TITLE 'DATA AREAS - JFCB WORK AREA'
         DS    0D
         IEFJFCBN
         TITLE 'DATA AREAS - VTOC DSCBS'
         IECSDSL1 (1)              FORMAT 1 DSCB
         EJECT
         ORG   IECSDSL1            OVERLAY FMT1
         IECSDSL1 (3)              FORMAT 3 DSCB
         EJECT
         ORG   DS1FMTID            OVERLAY FMT1 (KEY NOT INCLUDED)
         IECSDSL1 (4)              FORMAT 4 DSCB
         ORG
         TITLE 'WORK AREAS - DCBS'
         PRINT NOGEN
DISKX    DCB   BLKSIZE=96,                                             X
               DDNAME=DISK00,                                          X
               DSORG=PS,                                               X
               EODAD=DSKPX,                                            X
               EXLST=JFCBEXIT,                                         X
               KEYLEN=44,                                              X
               LRECL=96,                                               X
               MACRF=(R),                                              X
               OPTCD=Z,                                                X
               RECFM=F
EXTRACTV DCB   DDNAME=EXTRACTV,                                        X
               DSORG=PS,                                               X
               LRECL=89,                                               X
               MACRF=PM,                                               X
               RECFM=FB
         TITLE 'DSECTS'
         IEZDEB
*
UCB      DSECT
         IEFUCBOB
*
         DCBD  DEVD=(DA),DSORG=(PS)
         END
