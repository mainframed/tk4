         TITLE 'VVDSLIST - FORMATTED VVDS LIST'
VVDSLIST CSECT
*
         REGS
APOST    EQU   X'7D'          APOSTROPHE FOR LITTERALS
*
*   SCAN THE VVDS OF SELECTED VOLUMES
*   PRODUCE A FORMATTED REPORT LISTING ALL FIELDS
*
*   REF:  LY26-3956 - MVS/EXTENDED ARCHITECTURE CATALOG
*                     DIAGNOSIS REFERENCE
*
*   NOTE:  SYS1.AMODGEN REQUIRED IN SYSLIB CONCATINATION AT
*          ASM TIME FOR MACRO IEFJFCBN.
*
         USING VVDSLIST,R15
         B     MAINEP
         DC    AL1(L'CSECTLIT)
CSECTLIT DC    C'VVDSLIST - FORMATTED VVDS LIST &SYSDATE'
         EJECT
MAINEP   DS    0H
         SAVE  (14,12)
         LR    R12,R15        ENTRY ADR TO BASE REG
         DROP  R15
         LA    R11,2048(R12)
         LA    R11,2048(R11)
         USING VVDSLIST,R12,R11 PGM BASES
         LR    R2,R13
         LA    R13,SAVEAREA   SAVEAREA AND WORKING STORAGE
         LA    R10,2048(R13)
         LA    R10,2048(R10)
         LA    R9,2048(R10)
         LA    R9,2048(R9)
         LA    R8,2048(R9)
         LA    R8,2048(R8)
         LA    R7,2048(R8)
         LA    R7,2048(R7)
         USING SAVEAREA,R13,R10,R9,R8,R7 ADDRESSABILITY
         ST    R2,SAVEAREA+4  SAVE CALLERS R13
         ST    R13,8(,R2)     BACK LINK SAVEAREA
         USING IHADCB,R6      ADDRESSABILITY
         LA    R6,SYSPRINT    A(DCB)
         OPEN  ((R6),OUTPUT)
         TM    DCBOFLGS,DCBOFOPN OPEN OK
         BNO   ERROEXT        NO
         DROP  R6
         GENCB BLK=ACB,                                                X
               AM=VSAM,                                                X
               DDNAME=XXXXXXXX,                                        X
               MACRF=(ADR,SEQ)
         ST    R1,ADDRACB     SAVE A(ACB)
         LR    R6,R1          POST TO NEW REG
         L     R0,BLRECL      POST REC LEN OF BUFFER
         GETMAIN R,LV=(0)     GETMAIN A RECORD AREA
         ST    R1,ADDRVREC    SAVE
         LR    R5,R1          POST TO A MORE CONVENIENT REG
         L     R4,BLRECL      POST LRECL
         GENCB BLK=RPL,                                                X
               ACB=(R6),                                               X
               AM=VSAM,                                                X
               AREA=(R5),                                              X
               AREALEN=(R4),                                           X
               OPTCD=(ADR,SEQ)
         ST    R1,ADDRRPL     SAVE A(RPL)
         EXTRACT TIOT,FIELDS=TIOT GET ADDRESS OF TIOT
         L     R2,TIOT        LOAD ADDRESS OF TIOT IN REG2
         LA    R2,24(R2)      SKIP TO DD ENTRIES
         ST    R2,NEXTDD      SAVE FIRST DD TO INITIALIZE LOOP
         TITLE 'TIOTLOOP - SCAN TIOT'
*                                                                     *
***********************************************************************
*                                                                     *
*        SCAN TIOT FOR DDNAMES 'VVDSXXXX' WHERE X CAN BE ANYTHING     *
*        WHEN FINDING ONE TAKE OFF SCAN FOR VVR RECORDS               *
*        WHEN HITTING END OF TIOT GO TO END OF JOB                    *
*                                                                     *
***********************************************************************
*                                                                     *
TIOTLOOP EQU   *
         L     R2,NEXTDD      PICK UP CURRENT DD SEG
         SR    R3,R3          CLEAR REG3
         IC    R3,0(R2)       DETERMINE IF END OF TIOT
         LTR   R3,R3          END OF TIOT?
         BZ    EXIT           GO TO EOJ NORMAL
         LA    R1,0(R2,R3)    ADDR OF NEXT TIOT
         ST    R1,NEXTDD      SAVE
         CLC   =C'VVDS',4(R2) IS THIS A VALID DD ENTRY
         BNE   TIOTLOOP       NO -- SKIP IT
         MVC   DDNAME,4(R2)   SAVE DDNAME
         LA    R6,DCBJFCB     A(MODEL DCB) FOR RDJFCB
         USING IHADCB,R6      ADDRESSABILITY
         MVC   DCBDDNAM,DDNAME POST DD NAME
         RDJFCB ((R6))
         LTR   R15,R15        RDJFCB OK
         BNZ   ERRJFCB        NO -- ERROR
         DROP  R6
         MVC   TL01DSN,JFCBDSNM POST DATA SET NAME
         MVC   TL01DDN,DDNAME POST DD NAME
         L     R6,ADDRACB     POST A(ACB)
         MODCB ACB=(R6),                                               X
               DDNAME=(*,DDNAME)
         OPEN  ((6))          OPEN FILE
         CH    R15,=H'4'      ABOVE 'WARNING'
         BH    ERROPV         YES -- ERROR
         SHOWCB ACB=(R6),                                              X
               AREA=RLRECL,                                            X
               LENGTH=L'RLRECL,                                        X
               FIELDS=LRECL
         L     R6,ADDRRPL     POST A(RPL)
         CLC   RLRECL,BLRECL  CHECK BUF SIZE
         BNH   VVDSSCAN       NO -- OK
         L     R1,ADDRVREC    A(REC AREA)
         L     R0,BLRECL      L'REC AREA
         FREEMAIN R,LV=(0),A=(1)
         L     R0,RLRECL      NEW L'REC AREA
         ST    R0,BLRECL      POST
         GETMAIN R,LV=(0)     GETMAIN A RECORD AREA
         ST    R1,ADDRVREC    SAVE
         LR    R5,R1          POST TO A MORE CONVENIENT REG
         L     R4,BLRECL      POST TO A MORE CONVENIENT REG
         MODCB RPL=(R6),                                               X
               AREA=(R5),                                              X
               AREALEN=(R4)
VVDSSCAN EQU   *
         MVI   SWV,C'O'       POST FILE OPEN
         BAL   R14,SCAN       SCAN THE VVDS
         L     R6,ADDRACB     POST A(ACB)
         CLOSE ((R6))         CLOSE THIS FILE
         B     TIOTLOOP       LOOP BACK
         TITLE 'SCAN     - SCAN THE VVDS'
SCAN     EQU   *              PROCESS NEXT REC
         ST    R14,SCANR14    SAVE RETURN ADDR
         BAL   R14,GETV       GET VVCR
         CLI   SWV,C'E'       EOF?
         BE    ERRNOCR        YES -- ERROR
         L     R5,ADDRVREC    REFRESH RECORD ADDR
         MVC   DL02LIT,LT01   INDICATE VVCR
         BAL   R14,PHDR       PUT RECORD HEADER
         BAL   R14,PVCR       PROCESS VVCR
         BAL   R14,GETV       GET SELF DEFINING VVR
         CLI   SWV,C'E'       EOF?
         BE    ERRNOSDR       YES -- ERROR
         L     R5,ADDRVREC    REFRESH RECORD ADDR
         MVC   DL02LIT,LT02   INDICATE S-D VVR
         BAL   R14,PHDR       PUT RECORD HEADER
         BAL   R14,SVVR       PROCESS SELF DEFINING VVR REC
SCANLOOP EQU   *
         BAL   R14,GETV       GET NEXT VVR REC
         CLI   SWV,C'E'       EOF
         BE    SCANEXIT       YES -- DONE
         L     R5,ADDRVREC    REFRESH RECORD ADDR
         USING DSE9,R5        ADDRESSABILITY
         MVC   DL02LIT,LT03   INDICATE PRIMARY VVR
         CLI   VVRTYPE,C'Z'   PRIMARY
         BE    SCANZ          YES -- PROCESS
         MVC   DL02LIT,LT04   INDICATE SECONDARY VVR
         CLI   VVRTYPE,C'Q'   SECONDARY
         BE    SCANQ          YES -- PROCESS
         B     ERRRTY         ERROR -- BAD RECORD TYPE
SCANZ    EQU   *
         BAL   R14,PHDR       PUT RECORD HEADER
         BAL   R14,PVRZ       PROCESS Z REC
         B     SCANLOOP       LOOP BACK
SCANQ    EQU   *
         BAL   R14,PHDR       PUT RECORD HEADER
         BAL   R14,PVRQ       PROCESS Q REC
         B     SCANLOOP       LOOP BACK
SCANEXIT EQU   *
         L     R14,SCANR14    RESTORE RETURN ADDR
         BR    R14            DONE -- EXIT
         TITLE 'PHDR     - PUT RECORD HEADER'
PHDR     EQU   *
         ST    R14,PHDRR14    SAVE RETURN ADDR
         SHOWCB RPL=((R6)),                                            X
               AREA=SHOWAREA,                                          X
               LENGTH=L'SHOWAREA,                                      X
               FIELDS=(RBA,RECLEN)
*
         L     R15,SHOWRBA    POST
         CVD   R15,WORKDW     NOW PACKED
         SRP   WORKDW,1,0     SHIFT 1 LEFT FOR EDIT
         MVC   DL02RBA,ED02   POST EDIT MASK
         ED    DL02RBA,WORKDW+2
*
         ZAP   WORKDW,GETVRC  POST RECORD COUNT
         MVC   DL02RECN,ED03  POST EDIT MASK
         ED    DL02RECN,WORKDW+4
*
         L     R15,SHOWRECL   POST
         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR
         MVC   DL02LEN,HD2LIT POST
*
         ZAP   PUTLGC,PUTLLMAX FORCE PAGE EJECT
         MVC   PUTLLINE,DL02  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
         MVC   PUTLLINE,SPACES POST BLANK LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
         L     R14,PHDRR14    RESTORE RETURN ADDR
         BR    R14
         TITLE 'PVCR     - PROCESS VSAM VOL CTL REC'
PVCR     EQU   *
         ST    R14,PVCRR14    SAVE RETURN ADDR
         USING VVCR,R5        ADDRESSABILITY
         SR    R15,R15        CLEAR
         ICM   R15,B'0011',VVCRLEN POST
         CH    R15,=H'4088'   CHECK VALUE
         BNE   ERRVVCRL       ERROR - WRONG LENGTH
         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR
         MVC   DL04LEN,HD2LIT POST
*
         ICM   R15,B'0011',VVCNUMCI POST
         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR
         MVC   DL04NCI,HD2LIT POST
*
         LA    R1,20          LENGTH
         LA    R15,VVCRRSV    ADDR
         BAL   R14,HEX        CVT TO HEX
         MVC   DL04RSV,HEXLIT POST
*
         MVC   PUTLLINE,DL04  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         LA    R4,VVCATNMS    A(1ST CAT ENTRY)
         LA    R3,36          COUNT
         BAL   R14,PCRC       PROCESS CONTROL REC CAT ENTRIES
*
         LA    R4,VVCCISPC    A(CI SPACE MAP)
         LA    R3,64          COUNT (32 BYTES PER)
         BAL   R14,PCRS       PROCESS CONTROL REC SPACE ENTRIES
*
         DROP  R5
         L     R14,PVCRR14    RESTORE RETURN ADDR
         BR    R14            RETURN
         TITLE 'PCRC     - PROCESS CTRL REC CAT ENTRIES'
*
*        ON ENTRY:  R4 - ADDR OF START OF FIRST CAT ENTRY
*                   R3 - NUMBER OF CAT ENTRIES (39)
*
PCRC     EQU   *
         ST    R14,PCRCR14    SAVE RETURN ADDR
         USING VVCATENT,R4    ADDRESSABILITY
         ZAP   PCRCLN,=P'0'   SET LOOP NUMBER
PCRCLOOP EQU   *
         AP    PCRCLN,=P'1'   BUMP LOOP NUMBER
         MVC   DL05ENT,ED04   POST EDIT MASK
         ED    DL05ENT,PCRCLN POST
*
         LA    R15,VVCCATNM   A(CAT NAME)
         LA    R1,44          L'CAT NAME
         BAL   R14,HEX        CVT TO HEX
         MVC   DL05CTN,HEXLIT POST
*
         ZAP   PUTLGC,=P'3'   POST 3 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL05  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         MVC   DL06CTN,VVCCATNM
         TR    DL06CTN,TRNAME
*
         ICM   R15,B'1111',VVCDTRBA POST
         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR
         MVC   DL06RBA,HD4LIT POST
*
         ZAP   PUTLGC,=P'2'   POST 2 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL06  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ICM   R15,B'1111',VVCIXRBA POST
         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR
         MVC   DL07IXRB,HD4LIT POST
*
         ICM   R15,B'1111',VVCSSRBA POST
         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR
         MVC   DL07SSRB,HD4LIT POST
*
         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP
         MVC   PUTLLINE,DL07  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
         MVC   PUTLLINE,SPACES POST BLANK LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         LA    R4,VVCATLN(R4) BUMP TO NEXT ENTRY
         BCT   R3,PCRCLOOP    LOOP BACK
*
         DROP  R4
         L     R14,PCRCR14    RESTORE RETURN ADDR
         BR    R14            RETURN
         TITLE 'PCRS     - PROCESS CTL REC SPACE MAP'
*
*        ON ENTRY:  R4 - ADDR OF START OF SPACE MAP
*                   R3 - NUMBER OF 32 BYTE SEGS IN SPACE MAP (64)
*
PCRS     EQU   *
         ST    R14,PCRSR14    SAVE RETURN ADDR
         ST    R4,PCRSBASE    SAVE BASE ADDR
PCRSLOOP EQU   *
         LR    R15,R4         POST CURRENT ADDR
         S     R15,PCRSBASE   LESS BASE ADDR = OFFSET
         STH   R15,WORKDW     POST
         LA    R15,WORKDW     ADDR
         LA    R1,2           LENGTH
         BAL   R14,HEX        NOW HEX
         MVC   DL08BASE,HEXLIT POST
*
         LA    R15,00(R4)     A(HEX SEG 1)
         LA    R1,4           LENGTH
         BAL   R14,HEX        NOW HEX
         MVC   DL08HX00,HEXLIT POST
*
         LA    R15,04(R4)     A(HEX SEG 2)
         LA    R1,4           LENGTH
         BAL   R14,HEX        NOW HEX
         MVC   DL08HX04,HEXLIT POST
*
         LA    R15,08(R4)     A(HEX SEG 3)
         LA    R1,4           LENGTH
         BAL   R14,HEX        NOW HEX
         MVC   DL08HX08,HEXLIT POST
*
         LA    R15,12(R4)     A(HEX SEG 4)
         LA    R1,4           LENGTH
         BAL   R14,HEX        NOW HEX
         MVC   DL08HX0C,HEXLIT POST
*
         LA    R15,16(R4)     A(HEX SEG 5)
         LA    R1,4           LENGTH
         BAL   R14,HEX        NOW HEX
         MVC   DL08HX10,HEXLIT POST
*
         LA    R15,20(R4)     A(HEX SEG 6)
         LA    R1,4           LENGTH
         BAL   R14,HEX        NOW HEX
         MVC   DL08HX14,HEXLIT POST
*
         LA    R15,24(R4)     A(HEX SEG 7)
         LA    R1,4           LENGTH
         BAL   R14,HEX        NOW HEX
         MVC   DL08HX18,HEXLIT POST
*
         LA    R15,28(R4)     A(HEX SEG 8)
         LA    R1,4           LENGTH
         BAL   R14,HEX        NOW HEX
         MVC   DL08HX1C,HEXLIT POST
*
         MVC   PUTLLINE,DL08  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         LA    R4,32(R4)      BUMP TO NEXT ENTRY
         BCT   R3,PCRSLOOP    LOOP BACK
*
         L     R14,PCRSR14    RESTORE RETURN ADDR
         BR    R14            RETURN
         TITLE 'SVVR     - PROCESS SELF DEFINING VVR REC'
SVVR     EQU   *
         ST    R14,SVVRR14    SAVE RETURN ADDR
         USING DSE9,R5        ADDRESSABILITY
         CLI   VVRTYPE,C'Z'   PRIMARY
         BNE   ERRSVVRZ       NO -- ERROR
         TM    VVRFLAG,B'01000000' SELF DEFINING VVR
         BZ    ERRSVVRF       NO -- ERROR
         BAL   R14,PVRZ       PROCESS Z REC
         DROP  R5
         L     R14,SVVRR14    RESTORE RETURN ADDR
         BR    R14            RETURN
         TITLE 'PVRQ     - PROCESS VVR RECORD TYPE Q'
PVRQ     EQU   *
         ST    R14,PVRQR14    SAVE RETURN ADDR
         USING DSE9,R5        ADDRESSABILITY
         BAL   R14,PCE9       PROCESS CELL E9
         AH    R5,VVRHDLEN    BUMP TO NEXT CELL
         LA    R5,L'VVRLEN(R5) ALLOW FOR VVRLEN
         USING DS23,R5        ADDRESSABILITY
         BAL   R14,PC23       PROCESS CELL 23
         DROP  R5
         L     R14,PVRQR14    RESTORE RETURN ADDR
         BR    R14            RETURN
         TITLE 'PVRZ     - PROCESS VVR RECORD TYPE Z'
PVRZ     EQU   *
         ST    R14,PVRZR14    SAVE RETURN ADDR
         USING DSE9,R5        ADDRESSABILITY
         BAL   R14,PCE9       PROCESS CELL E9
         AH    R5,VVRHDLEN    BUMP TO NEXT CELL
         LA    R5,L'VVRLEN(R5) ALLOW FOR VVRLEN
         USING DS21,R5        ADDRESSABILITY
         BAL   R14,PC21       PROCESS CELL 21
         AH    R5,VVRDSLEN    BUMP TO NEXT CELL
         USING DS60,R5        ADDRESSABILITY
         BAL   R14,PC60       PROCESS CELL 60
         AH    R5,VVRAMDCN    BUMP TO NEXT CELL
         USING DS23,R5        ADDRESSABILITY
         BAL   R14,PC23       PROCESS CELL 23
         DROP  R5
         L     R14,PVRZR14    RESTORE RETURN ADDR
         BR    R14            RETURN
         TITLE 'PC21     - PROCESS VVR CELL TYPE 21'
PC21     EQU   *
         ST    R14,PC21R14    SAVE RETURN ADDR
         MVC   DL03LIT,LT06   INDICATE DATASET INFORMATION CELL
         BAL   R14,POFF       PUT OFFSET LINE
         USING DS21,R5        ADDRESSABILITY
         CLC   VVRDSLEN,=H'53' SEGMENT LENGTH CHECK
         BE    PC21LNOK       SHORT VALUE -- OK
         CLC   VVRDSLEN,=H'85' SEGMENT LENGTH CHECK
         BE    PC21LNOK       LONG VALUE -- OK
         B     ERRDSLEN       BAD LENGTH -- ERROR
PC21LNOK EQU   *
         ICM   R15,B'0011',VVRDSLEN POST
         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR
         MVC   DL23DSLN,HD2LIT POST
*
         LA    R15,VVRDSTYP   A(HEX)
         LA    R1,1           LENGTH
         BAL   R14,HEX        NOW HEX
         MVC   DL23HTY,HEXLIT POST
*
         MVC   DL23CTY,VVRDSTYP POST
         TR    DL23CTY,TRNAME NOW VALID
*
         MVC   PUTLLINE,DL23  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         LA    R15,VVRATTR1   POST
         BAL   R14,BIN        NOW BIN
         MVC   DL24ATR1,BINLIT POST
*
         LA    R15,VVRATTR2   POST
         BAL   R14,BIN        NOW BIN
         MVC   DL24ATR2,BINLIT POST
*
         LA    R15,VVROPIND   POST
         LA    R1,1           LENGTH
         BAL   R14,HEX        NOW HEX
         MVC   DL24OIND,HEXLIT POST
*
         ZAP   PUTLGC,=P'8'   POST 8 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL24  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ZAP   PUTLGC,=P'7'   POST 7 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL25  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ZAP   PUTLGC,=P'6'   POST 6 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL26  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ZAP   PUTLGC,=P'5'   POST 5 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL27  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ZAP   PUTLGC,=P'4'   POST 4 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL28  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ZAP   PUTLGC,=P'3'   POST 3 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL29  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ZAP   PUTLGC,=P'2'   POST 2 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL30  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP
         MVC   PUTLLINE,DL31  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         MVC   PUTLLINE,DL32  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ICM   R15,B'1111',VVRBUFSZ POST
         BAL   R14,HD4        CVT 2 BYTES TO HEX/CHR
         MVC   DL33BSZ,HD4LIT POST
*
         SR    R15,R15        CLEAR
         ICM   R15,B'0111',VVRPRISP POST
         BAL   R14,HD3        CVT 3 BYTES TO HEX/CHR
         MVC   DL33PSP,HD3LIT POST
*
         SR    R15,R15        CLEAR
         ICM   R15,B'0111',VVRSECSP POST
         BAL   R14,HD3        CVT 3 BYTES TO HEX/CHR
         MVC   DL33SSP,HD3LIT POST
*
         MVC   PUTLLINE,DL33  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT
*
         LA    R15,VVRSPCFG   POST A()
         BAL   R14,BIN        NOW BIN
         MVC   DL34SPFG,BINLIT POST
*
         ICM   R15,B'1111',VVRDSHU POST
         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR
         MVC   DL34DSHU,HD4LIT POST
*
         ICM   R15,B'1111',VVRDSHA POST
         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR
         MVC   DL34DSHA,HD4LIT POST
*
         ZAP   PUTLGC,=P'2'   POST 2 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL34  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL35  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         MVC   PUTLLINE,DL36  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ICM   R15,B'1111',VVRLRECL POST
         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR
         MVC   DL37RECL,HD4LIT POST
*
         LA    R15,VVRLRECL+L'VVRLRECL POST A(0)
         LA    R1,2           LENGTH
         BAL   R14,HEX        NOW HEX
         MVC   DL37RSV,HEXLIT POST
*
         LA    R15,VVREXCPX   POST A()
         LA    R1,8           LENGTH
         BAL   R14,HEX        NOW HEX
         MVC   DL37HXCP,HEXLIT POST
*
         MVC   DL37CXCP,VVREXCPX POST
         TR    DL37CXCP,TRNAME FIX
*
         MVC   PUTLLINE,DL37  POST TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ICM   R15,B'1111',VVRDSHK POST
         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR
         MVC   DL38DSHK,HD4LIT POST
*
         LA    R15,VVRCLSFG   POST A()
         BAL   R14,BIN        NOW BIN
         MVC   DL38CLSF,BINLIT POST
*
         LA    R15,VVRAIXFG   POST A()
         BAL   R14,BIN        NOW BIN
         MVC   DL38AIXF,BINLIT POST
*
         ZAP   PUTLGC,=P'5'   POST 5 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL38  POST TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ZAP   PUTLGC,=P'4'   POST 4 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL39  POST TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ZAP   PUTLGC,=P'3'   POST 3 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL40  POST TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ZAP   PUTLGC,=P'2'   POST 2 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL41  POST TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP
         MVC   PUTLLINE,DL42  POST TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         MVC   PUTLLINE,DL43  POST TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         LA    R15,VVRTMSTP   POST A()
         LA    R1,8           LENGTH
         BAL   R14,HEX        NOW HEX
         MVC   DL44TMST,HEXLIT POST
*
         CLC   VVRDSLEN,=H'53' SHORT SEGMENT
         BE    PC21SH         YES
         LA    R15,VVRALTSP   POST A()
         LA    R1,8           LENGTH
         BAL   R14,HEX        NOW HEX
         MVC   DL44ALSP,HEXLIT POST
*
         MVC   PUTLLINE,DL44  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         LA    R15,VVRALTSP+L'VVRALTSP POST A()
         LA    R1,24          LENGTH
         BAL   R14,HEX        NOW HEX
         MVC   DL45RSV,HEXLIT POST
*
         MVC   PUTLLINE,DL45  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
         B     PC21X          DONE -- EXIT
*
PC21SH   EQU   *
         MVC   DL44ALSP,LT10  POST NOT AVAILABLE
*
         MVC   PUTLLINE,DL44  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         MVC   DL45RSV,LT11   POST NOT AVAILABLE
*
         MVC   PUTLLINE,DL45  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
PC21X    EQU   *
         DROP  R5
         L     R14,PC21R14    RESTORE RETURN ADDR
         BR    R14            RETURN
         TITLE 'PC23     - PROCESS VVR CELL TYPE 23'
PC23     EQU   *
         ST    R14,PC23R14    SAVE RETURN ADDR
         MVC   DL03LIT,LT08   INDICATE VOLUME INFORMATION CELL
         BAL   R14,POFF       PUT OFFSET LINE
         USING DS23,R5        ADDRESSABILITY
         ICM   R15,B'0011',VVRVOLLN POST
         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR
         MVC   DL72VOLL,HD2LIT POST
*
         LA    R15,VVRVOLTP   POST A()
         LA    R1,1           POST LENGTH
         BAL   R14,HEX        NOW HEX
         MVC   DL72HVT,HEXLIT POST
*
         MVC   DL72CVT,VVRVOLTP POST
         TR    DL72CVT,TRNAME FIX
*
         LA    R15,VVRVOLFG   POST A()
         BAL   R14,BIN        NOW BIN
         MVC   DL72VOLF,BINLIT POST
*
         SR    R15,R15        CLEAR
         IC    R15,VVRNOEXT   POST
         BAL   R14,HD1        CVT 1 BYTE TO HEX/CHR
         MVC   DL72NOXT,HD1LIT POST
*
         ZAP   PUTLGC,=P'4'   POST 4 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL72  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ZAP   PUTLGC,=P'3'   POST 3 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL73  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ZAP   PUTLGC,=P'2'   POST 2 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL74  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP
         MVC   PUTLLINE,DL75  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         MVC   PUTLLINE,DL76  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ICM   R15,B'1111',VVRHKRBA POST
         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR
         MVC   DL77HKRB,HD4LIT POST
*
         ICM   R15,B'1111',VVRHURBA POST
         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR
         MVC   DL77HURB,HD4LIT POST
*
         ICM   R15,B'1111',VVRHARBA POST
         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR
         MVC   DL77HARB,HD4LIT POST
*
         MVC   PUTLLINE,DL77  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ICM   R15,B'1111',VVRBLKSZ POST
         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR
         MVC   DL78BKSZ,HD4LIT POST
*
         ICM   R15,B'0011',VVRBLKTK POST
         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR
         MVC   DL78BKTK,HD2LIT POST
*
         ICM   R15,B'0011',VVRTRKAU POST
         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR
         MVC   DL78TKAU,HD2LIT POST
*
         MVC   PUTLLINE,DL78  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         LA    R15,VVRTPEXT   POST A()
         BAL   R14,BIN        NOW BIN
         MVC   DL79TPXT,BINLIT POST
*
         ICM   R15,B'0011',VVRTKCYL POST
         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR
         MVC   DL79TKCY,HD2LIT POST
*
         ICM   R15,B'1111',VVRBYTTK POST
         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR
         MVC   DL79BYTK,HD4LIT POST
*
         ZAP   PUTLGC,=P'4'   POST 4 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL79  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ZAP   PUTLGC,=P'3'   POST 3 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL80  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ZAP   PUTLGC,=P'2'   POST 2 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL81  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP
         MVC   PUTLLINE,DL82  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         MVC   PUTLLINE,DL83  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ICM   R15,B'1111',VVRBYTAU POST
         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR
         MVC   DL84BYAU,HD4LIT POST
*
         MVC   PUTLLINE,DL84  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         LA    R15,VVRLOKYL   POST  A()
         LA    R1,2           LENGTH
         BAL   R14,HEX        NOW HEX
         MVC   DL85LOKL,HEXLIT POST
*
         LA    R15,VVRLOKYV   POST A()
         SR    R1,R1          CLEAR
         ICM   R1,B'0011',VVRLOKYL POST
         STC   R1,LNHEXTR     POST HEX LENGTH
         MVC   DL85XTLT,SPACES POST NO HEX TRUNC
         CH    R1,=H'40'      TOO LONG
         BNH   PC23HLT1       NO -- CONTINUE
         MVC   DL85XTLT,LT09  POST HEX TRUNC
         LH    R1,=H'40'      POST SHORTER LENGTH
         STC   R1,LNHEXTR     SAVE
PC23HLT1 EQU   *
         MVC   DL85LOKV,SPACES CLEAR
         LTR   R1,R1          ZERO CHECK
         BNZ   PC23HLT2       NOT ZERO -- PROCESS
         MVI   DL85LOKV,APOST POST CLOSING APOST
         B     PC23HLZ        CONTINUE
PC23HLT2 EQU   *
         BAL   R14,HEX        NOW HEX
         LA    R0,HEXLIT      FROM ADDR
         SR    R1,R1          CLEAR
         IC    R1,LNHEXTR     LENGTH
         AR    R1,R1          X 2 FOR HEX
         LA    R14,DL85LOKV   TO ADDR
         LR    R15,R1         TO LENGTH
         MVCL  R14,R0         COPY
         MVI   0(R14),APOST   POST
PC23HLZ  EQU   *
*
         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP
         MVC   PUTLLINE,DL85  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         SR    R1,R1          CLEAR
         ICM   R1,B'0011',VVRLOKYL POST
         CVD   R1,WORKDW      NOW PACKED
         MVC   DL86LOKL,ED01  POST EDIT MASK
         ED    DL86LOKL,WORKDW+5
*
         STC   R1,LNCHRTR     SAVE
         MVC   DL86CTLT,SPACES POST NO CHR TRUNC
         CH    R1,=H'80'      TOO LONG
         BNH   PC23CLT1       NO -- CONTINUE
         LH    R1,=H'80'      TOO LONG
         MVC   DL86CTLT,LT09  POST CHR TRUNC
         STC   R1,LNCHRTR     SAVE
PC23CLT1 EQU   *
         MVC   DL86LOKV,SPACES CLEAR
         LTR   R1,R1          ZERO CHECK
         BNZ   PC23CLT2       NOT ZERO -- PROCESS
         MVI   DL86LOKV,APOST POST CLOSING APOST
         B     PC23CLZ        CONTINUE
PC23CLT2 EQU   *
         LA    R0,VVRLOKYV    FROM ADDR
*                             FROM LENGTH ALREADY IN R1
         LA    R14,DL86LOKV   TO ADDR
         LR    R15,R1         TO LENGTH
         MVCL  R14,R0         COPY
         TR    DL86LOKV,TRNAME FIX
         MVI   0(R14),APOST   ADD TRAILING APOST
PC23CLZ  EQU   *
*
         MVC   PUTLLINE,DL86  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         SR    R1,R1          CLEAR
         ICM   R1,B'0011',VVRLOKYL L'VVRLOKYV
         LA    R4,VVRLOKYV(R1) NOW A(VVRHIKYL)
         LA    R15,0(R4)      POST A(VVRHIKYL)
         LA    R1,2           POST LENGTH
         BAL   R14,HEX        NOW HEX
         MVC   DL87HIKL,HEXLIT POST
*
         LA    R15,2(R4)      POST A(VVRHIKYV)
         SR    R1,R1          CLEAR
         ICM   R1,B'0011',0(R4) POST VVRHIKYL
         STC   R1,LNHEXTR     POST HEX LENGTH
         MVC   DL87XTLT,SPACES POST NO HEX TRUNC
         CH    R1,=H'40'      TOO LONG
         BNH   PC23HHT1       NO -- CONTINUE
         MVC   DL87XTLT,LT09  POST HEX TRUNC
         LH    R1,=H'40'      POST SHORTER LENGTH
         STC   R1,LNHEXTR     SAVE
PC23HHT1 EQU   *
         MVC   DL87HIKV,SPACES CLEAR
         LTR   R1,R1          ZERO CHECK
         BNZ   PC23HHT2       NOT ZERO -- PROCESS
         MVI   DL87HIKV,APOST POST CLOSING APOST
         B     PC23HHZ        CONTINUE
PC23HHT2 EQU   *
         BAL   R14,HEX        NOW HEX
         LA    R0,HEXLIT      FROM ADDR
         SR    R1,R1          CLEAR
         IC    R1,LNHEXTR     LENGTH
         AR    R1,R1          X 2 FOR HEX
         LA    R14,DL87HIKV   TO ADDR
         LR    R15,R1         TO LENGTH
         MVCL  R14,R0         COPY
         MVI   0(R14),APOST   POST
PC23HHZ  EQU   *
*
         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP
         MVC   PUTLLINE,DL87  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         SR    R1,R1          CLEAR
         ICM   R1,B'0011',0(R4) POST VVRHIKYL
         CVD   R1,WORKDW      NOW PACKED
         MVC   DL88HIKL,ED01  POST EDIT MASK
         ED    DL88HIKL,WORKDW+5
*
         STC   R1,LNCHRTR     SAVE
         MVC   DL88CTLT,SPACES POST NO CHR TRUNC
         CH    R1,=H'80'      TOO LONG
         BNH   PC23CHT1       NO -- CONTINUE
         LH    R1,=H'80'      TOO LONG
         MVC   DL88CTLT,LT09  POST CHR TRUNC
         STC   R1,LNCHRTR     SAVE
PC23CHT1 EQU   *
         MVC   DL88HIKV,SPACES CLEAR
         LTR   R1,R1          ZERO CHECK
         BNZ   PC23CHT2       NOT ZERO -- PROCESS
         MVI   DL88HIKV,APOST POST CLOSING APOST
         B     PC23CHZ        CONTINUE
PC23CHT2 EQU   *
         LA    R0,2(R4)       FROM ADDR VVRHIKYV
*                             FROM LENGTH ALREADY IN R1
         LA    R14,DL88HIKV   TO ADDR
         LR    R15,R1         TO LENGTH
         MVCL  R14,R0         COPY
         TR    DL88HIKV,TRNAME FIX
         MVI   0(R14),APOST   ADD TRAILING APOST
PC23CHZ  EQU   *
*
         MVC   PUTLLINE,DL88  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         SR    R1,R1          CLEAR
         ICM   R1,B'0011',0(R4) L'VVRHIKYV
         LA    R4,2(R1,R4)    NOW A(VVRXTNTL)
         ICM   R15,B'0011',0(R4) POST VVRXTNTL
         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR
         MVC   DL89XTL,HD2LIT POST
*
         SR    R15,R15        CLEAR
         ICM   R15,B'0011',0(R4) POST VVRXTNTL
         SR    R14,R14        CLEAR
         D     R14,=F'20'     NOW NUMBER OF EXTENTS
         LTR   R14,R14        REMAINDER S/B ZERO
         BNZ   ERRXTNTL       NOT ZERO -- ERROR
         LR    R3,R15         POST COUNT
         CVD   R3,WORKDW      QUOTIENT NOW PACKED
         MVC   DL89XTN,ED04   POST EDIT MASK
         ED    DL89XTN,WORKDW+6 POST
*
         MVC   PUTLLINE,DL89  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         LA    R4,2(R4)       BUMP TO VVRXTNT
         LTR   R3,R3          ZERO COUNT
         BNP   PC23XTX        YES -- CONTINUE
PC23XTL  EQU   *
         USING VVRX,R4        ADDRESSABILITY
         ICM   R15,B'0011',VVRXSEQN POST
         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR
         MVC   DL90XSQN,HD2LIT POST
*
         ICM   R15,B'0011',VVRXSC POST
         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR
         MVC   DL90XSC,HD2LIT POST
*
         ICM   R15,B'0011',VVRXSH POST
         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR
         MVC   DL90XSH,HD2LIT POST
*
         ZAP   PUTLGC,=P'3'   POST 3 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL90  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ICM   R15,B'0011',VVRXEC POST
         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR
         MVC   DL91XEC,HD2LIT POST
*
         ICM   R15,B'0011',VVRXEH POST
         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR
         MVC   DL91XEH,HD2LIT POST
*
         ICM   R15,B'0011',VVRXNTRK POST
         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR
         MVC   DL91XNTR,HD2LIT POST
*
         ZAP   PUTLGC,=P'2'   POST 2 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL91  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ICM   R15,B'1111',VVRXSRBA POST
         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR
         MVC   DL92XSRB,HD4LIT POST
*
         ICM   R15,B'1111',VVRXERBA POST
         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR
         MVC   DL92XERB,HD4LIT POST
*
         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP
         MVC   PUTLLINE,DL92  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
         MVC   PUTLLINE,SPACES POST BLANK LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         LA    R4,20(R4)      BUMP TO NEXT ENTRY
         BCT   R3,PC23XTL     LOOP BACK
         DROP  R4
PC23XTX  EQU   *
         DROP  R5
         L     R14,PC23R14    RESTORE RETURN ADDR
         BR    R14            RETURN
         TITLE 'PC60     - PROCESS VVR CELL TYPE 60'
PC60     EQU   *
         ST    R14,PC60R14    SAVE RETURN ADDR
         MVC   DL03LIT,LT07   INDICATE AMSDB CELL
         BAL   R14,POFF       PUT OFFSET LINE
         USING DS60,R5        ADDRESSABILITY
         CLC   VVRAMDCN,=H'98' LENGTH CHECK
         BNE   ERRAMDCN       LENGTH BAD -- ERROR
         ICM   R15,B'0011',VVRAMDCN POST
         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR
         MVC   DL46DCN,HD2LIT POST
*
         LA    R15,VVRAMID    POST A()
         LA    R1,1           LENGTH
         BAL   R14,HEX        NOW HEX
         MVC   DL46HID,HEXLIT POST
*
         MVC   DL46CID,VVRAMID POST
         TR    DL46CID,TRNAME FIX
*
         LA    R15,VVRAMATR   POST
         BAL   R14,BIN        NOW BIN
         MVC   DL46ATR,BINLIT POST
*
         ZAP   PUTLGC,=P'8'   POST 8 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL46  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ZAP   PUTLGC,=P'7'   POST 7 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL47  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ZAP   PUTLGC,=P'6'   POST 6 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL48  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ZAP   PUTLGC,=P'5'   POST 5 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL49  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ZAP   PUTLGC,=P'4'   POST 4 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL50  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ZAP   PUTLGC,=P'3'   POST 3 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL51  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ZAP   PUTLGC,=P'2'   POST 2 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL52  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP
         MVC   PUTLLINE,DL53  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         MVC   PUTLLINE,DL54  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ICM   R15,B'0011',VVRAMLEN POST
         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR
         MVC   DL55LEN,HD2LIT POST
*
         ICM   R15,B'0011',VVRAMNST POST
         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR
         MVC   DL55NST,HD2LIT POST
*
         ICM   R15,B'0011',VVRAMAKP POST
         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR
         MVC   DL55AKP,HD2LIT POST
*
         ICM   R15,B'0011',VVRAMRKP POST
         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR
         MVC   DL55RKP,HD2LIT POST
*
         MVC   PUTLLINE,DL55  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ICM   R15,B'0011',VVRAMKLN POST
         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR
         MVC   DL56KLN,HD2LIT POST
*
         IC    R15,VVRAMPCA   POST
         BAL   R14,HD1        CVT 1 BYTE TO HEX/CHR
         MVC   DL56PCA,HD1LIT POST
*
         IC    R15,VVRAMPCI   POST
         BAL   R14,HD1        CVT 1 BYTE TO HEX/CHR
         MVC   DL56PCI,HD1LIT POST
*
         ICM   R15,B'0011',VVRAMCCA POST
         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR
         MVC   DL56CCA,HD2LIT POST
*
         MVC   PUTLLINE,DL56  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ICM   R15,B'0011',VVRAMFCA POST
         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR
         MVC   DL57FCA,HD2LIT POST
*
         ICM   R15,B'1111',VVRAMFCI POST
         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR
         MVC   DL57FCI,HD4LIT POST
*
         ICM   R15,B'1111',VVRAMCIV POST
         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR
         MVC   DL57CIV,HD4LIT POST
*
         MVC   PUTLLINE,DL57  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ICM   R15,B'1111',VVRAMLCL POST
         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR
         MVC   DL58LCL,HD4LIT POST
*
         ICM   R15,B'1111',VVRAMHLR POST
         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR
         MVC   DL58HLR,HD4LIT POST
*
         MVC   PUTLLINE,DL58  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ICM   R15,B'1111',VVRAMSSR POST
         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR
         MVC   DL59SSR,HD4LIT POST
*
         ICM   R15,B'1111',VVRAMARD POST
         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR
         MVC   DL59ARD,HD4LIT POST
*
         MVC   PUTLLINE,DL59  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         LA    R15,VVRAMAT3   POST A()
         BAL   R14,BIN        NOW BIN
         MVC   DL60AT3,BINLIT POST
*
         IC    R15,VVRAMSNO   POST
         BAL   R14,HD1        CVT 1 BYTE TO HEX/CHR
         MVC   DL60SNO,HD1LIT POST
*
         ICM   R15,B'1111',VVRAMDUI POST
         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR
         MVC   DL60DUI,HD4LIT POST
*
         ZAP   PUTLGC,=P'6'   POST 6 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL60  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ZAP   PUTLGC,=P'5'   POST 5 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL61  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ZAP   PUTLGC,=P'4'   POST 4 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL62  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ZAP   PUTLGC,=P'3'   POST 3 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL63  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ZAP   PUTLGC,=P'2'   POST 2 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL64  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP
         MVC   PUTLLINE,DL65  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         MVC   PUTLLINE,DL66  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ICM   R15,B'0011',VVRAMBFI POST
         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR
         MVC   DL67BFI,HD2LIT POST
*
         LA    R15,VVRAMSTS   POST A()
         LA    R1,8           LENGTH
         BAL   R14,HEX        NOW HEX
         MVC   DL67STS,HEXLIT POST
*
         ICM   R15,B'0011',VVRAMNIL POST
         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR
         MVC   DL67NIL,HD2LIT POST
*
         MVC   PUTLLINE,DL67  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ICM   R15,B'0011',VVRAMNXT POST
         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR
         MVC   DL68NXT,HD2LIT POST
*
         ICM   R15,B'1111',VVRAMNLR POST
         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR
         MVC   DL68NLR,HD4LIT POST
*
         ICM   R15,B'1111',VVRAMDLR POST
         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR
         MVC   DL68DLR,HD4LIT POST
*
         MVC   PUTLLINE,DL68  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ICM   R15,B'1111',VVRAMINR POST
         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR
         MVC   DL69INR,HD4LIT POST
*
         ICM   R15,B'1111',VVRAMUPR POST
         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR
         MVC   DL69UPR,HD4LIT POST
*
         ICM   R15,B'1111',VVRAMRTR POST
         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR
         MVC   DL69RTR,HD4LIT POST
*
         MVC   PUTLLINE,DL69  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ICM   R15,B'1111',VVRAMASP POST
         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR
         MVC   DL70ASP,HD4LIT POST
*
         ICM   R15,B'1111',VVRAMCIS POST
         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR
         MVC   DL70CIS,HD4LIT POST
*
         ICM   R15,B'1111',VVRAMCAS POST
         BAL   R14,HD4        CVT 4 BYTES TH HEX/CHR
         MVC   DL70CAS,HD4LIT POST
*
         MVC   PUTLLINE,DL70  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ICM   R15,B'1111',VVRAMEXC POST
         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR
         MVC   DL71EXC,HD4LIT POST
*
         MVC   PUTLLINE,DL71  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         DROP  R5
         L     R14,PC60R14    RESTORE RETURN ADDR
         BR    R14            RETURN
         TITLE 'PCE9     - PROCESS VVR CELL TYPE E9'
PCE9     EQU   *
         ST    R14,PCE9R14    SAVE RETURN ADDR
         MVC   DL03LIT,LT05   INDICATE P/S HEADER CELL
         BAL   R14,POFF       PUT OFFSET LINE
         USING DSE9,R5        ADDRESSABILITY
         ICM   R15,B'0011',VVRLEN POST
         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR
         MVC   DL09LEN,HD2LIT POST
*
         ICM   R15,B'0011',VVRHDLEN POST
         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR
         MVC   DL09HDLN,HD2LIT POST
*
         LA    R15,VVRTYPE    POST A()
         LA    R1,1           LENGTH
         BAL   R14,HEX        NOW HEX
         MVC   DL09HTY,HEXLIT POST
*
         MVC   DL09CTY,VVRTYPE POST
         TR    DL09CTY,TRNAME FIX
*
         MVC   PUTLLINE,DL09  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT
*
         LA    R15,VVRFLAG    POST A()
         BAL   R14,BIN        NOW BIN
         MVC   DL10FLAG,BINLIT POST
*
         LA    R15,VVRKRQ     POST A()
         LA    R1,4           LENGTH
         BAL   R14,HEX        NOW HEX
         MVC   DL10KRQ,HEXLIT POST
*
         ZAP   PUTLGC,=P'4'   POST 4 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL10  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ZAP   PUTLGC,=P'3'   POST 3 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL11  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ZAP   PUTLGC,=P'2'   POST 2 EXTRA LINES IN GROUP
         MVC   PUTLLINE,DL12  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP
         MVC   PUTLLINE,DL13  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         MVC   PUTLLINE,DL14  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         LA    R15,VVRCMPNL   POST
         LA    R1,1           LENGTH
         BAL   R14,HEX        NOW HEX
         MVC   DL15NL,HEXLIT  POST
*
         LA    R15,VVRCMPNM   POST A()
         SR    R1,R1          CLEAR
         IC    R1,VVRCMPNL    POST
         STC   R1,LNHEXTR     POST HEX LENGTH
         CH    R1,=H'44'      TOO LONG
         BNH   PCE9HPT1       NO -- CONTINUE
         LH    R1,=H'44'      POST SHORTER LENGTH
         STC   R1,LNHEXTR     SAVE
PCE9HPT1 EQU   *
         MVC   DL15NM,SPACES  CLEAR
         LTR   R1,R1          ZERO CHECK
         BNZ   PCE9HPT2       NOT ZERO - PROCESS
         MVI   DL15NM,APOST   POST CLOSING APOST
         B     PCE9HPZ        CONTINUE
PCE9HPT2 EQU   *
         BAL   R14,HEX        NOW HEX
         LA    R0,HEXLIT      FROM ADDR
         SR    R1,R1          CLEAR
         IC    R1,LNHEXTR     LENGTH
         AR    R1,R1          X 2 FOR HEX
         LA    R14,DL15NM     TO ADDR
         LR    R15,R1         TO LENGTH
         MVCL  R14,R0         COPY
         MVI   0(R14),APOST   POST
PCE9HPZ  EQU   *
*
         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP
         MVC   PUTLLINE,DL15  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         SR    R1,R1          CLEAR
         IC    R1,VVRCMPNL    POST
         CVD   R1,WORKDW      NOW PACKED
         MVC   DL16NL,ED04    POST EDIT MASK
         ED    DL16NL,WORKDW+6
*
         STC   R1,LNCHRTR     SAVE
         CH    R1,=H'44'      TOO LONG
         BNH   PCE9CPT1       NO -- CONTINUE
         LH    R1,=H'44'      TOO LONG
         STC   R1,LNCHRTR     SAVE
PCE9CPT1 EQU   *
         MVC   DL16NM,SPACES  CLEAR
         LTR   R1,R1          ZERO CHECK
         BNZ   PCE9CPT2       NOT ZERO -- PROCESS
         MVI   DL16NM,APOST   POST CLOSING APOST
         B     PCE9CPZ        CONTINUE
PCE9CPT2 EQU   *
         LA    R0,VVRCMPNM    FROM ADDR
*                             FROM LENGTH ALREADY IN R1
         LA    R14,DL16NM     TO ADDR
         LR    R15,R1         TO LENGTH
         MVCL  R14,R0         COPY
         TR    DL16NM,TRNAME  FIX
         MVI   0(R14),APOST   ADD TRAILING APOST
PCE9CPZ  EQU   *
*
         MVC   PUTLLINE,DL16  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         SR    R1,R1          CLEAR
         IC    R1,VVRCMPNL    L'VVRCMPNM
         LA    R4,VVRCMPNM(R1) NOW A(VVRKEYL)
         LA    R15,0(R4)      POST A(VVRKEYL)
         LA    R1,1           POST LENGTH
         BAL   R14,HEX        NOW HEX
         MVC   DL17KL,HEXLIT  POST
*
         LA    R15,1(R4)      POST A(VVRKEYV)
         SR    R1,R1          CLEAR
         IC    R1,0(R4)       POST VVRKEYL
         STC   R1,LNHEXTR     POST HEX LENGTH
         CH    R1,=H'45'      TOO LONG
         BNH   PCE9HKT1       NO -- CONTINUE
         LH    R1,=H'45'      POST SHORTER LENGTH
         STC   R1,LNHEXTR     SAVE
PCE9HKT1 EQU   *
         MVC   DL17K,SPACES   CLEAR
         LTR   R1,R1          ZERO CHECK
         BNZ   PCE9HKT2       NOT ZERO -- PROCESS
         MVI   DL17K,APOST    POST CLOSING APOST
         B     PCE9HKZ        CONTINUE
PCE9HKT2 EQU   *
         BAL   R14,HEX        NOW HEX
         LA    R0,HEXLIT      FROM ADDR
         SR    R1,R1          CLEAR
         IC    R1,LNHEXTR     LENGTH
         AR    R1,R1          X 2 FOR HEX
         LA    R14,DL17K      TO ADDR
         LR    R15,R1         TO LENGTH
         MVCL  R14,R0         COPY
         MVI   0(R14),APOST   POST
PCE9HKZ  EQU   *
*
         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP
         MVC   PUTLLINE,DL17  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         SR    R1,R1          CLEAR
         IC    R1,0(R4)       POST VVRKEYL
         CVD   R1,WORKDW      NOW PACKED
         MVC   DL18KL,ED04    POST EDIT MASK
         ED    DL18KL,WORKDW+6
*
         STC   R1,LNCHRTR     SAVE
         CH    R1,=H'45'      TOO LONG
         BNH   PCE9CKT1       NO -- CONTINUE
         LH    R1,=H'45'      TOO LONG
         STC   R1,LNCHRTR     SAVE
PCE9CKT1 EQU   *
         MVC   DL18K,SPACES   CLEAR
         LTR   R1,R1          ZERO CHECK
         BNZ   PCE9CKT2       NOT ZERO -- PROCESS
         MVI   DL18K,APOST    POST CLOSING APOST
         B     PCE9CKZ        CONTINUE
PCE9CKT2 EQU   *
         LA    R0,1(R4)       FROM ADDR VVRKEY
*                             FROM LENGTH ALREADY IN R1
         LA    R14,DL18K      TO ADDR
         LR    R15,R1         TO LENGTH
         MVCL  R14,R0         COPY
         TR    DL18K,TRNAME   FIX
         MVI   0(R14),APOST   ADD TRAILING APOST
PCE9CKZ  EQU   *
*
         MVC   PUTLLINE,DL18  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         SR    R1,R1          CLEAR
         IC    R1,0(R4)       L'VVRKEY
         LA    R4,1(R1,R4)    NOW A(VVRCATNL)
         LA    R15,0(R4)      POST A(VVRCATNL)
         LA    R1,1           POST LENGTH
         BAL   R14,HEX        NOW HEX
         MVC   DL19NL,HEXLIT  POST
*
         LA    R15,1(R4)      POST A(VVRCATNM)
         SR    R1,R1          CLEAR
         IC    R1,0(R4)       POST VVRCATNL
         STC   R1,LNHEXTR     POST HEX LENGTH
         CH    R1,=H'44'      TOO LONG
         BNH   PCE9HTT1       NO -- CONTINUE
         LH    R1,=H'44'      POST SHORTER LENGTH
         STC   R1,LNHEXTR     SAVE
PCE9HTT1 EQU   *
         MVC   DL19NM,SPACES  CLEAR
         LTR   R1,R1          ZERO CHECK
         BNZ   PCE9HTT2       NO -- PROCESS
         MVI   DL19NM,APOST   POST CLOSING APOST
         B     PCE9HTZ        CONTINUE
PCE9HTT2 EQU   *
         BAL   R14,HEX        NOW HEX
         LA    R0,HEXLIT      FROM ADDR
         SR    R1,R1          CLEAR
         IC    R1,LNHEXTR     LENGTH
         AR    R1,R1          X 2 FOR HEX
         LA    R14,DL19NM     TO ADDR
         LR    R15,R1         TO LENGTH
         MVCL  R14,R0         COPY
         MVI   0(R14),APOST   POST
PCE9HTZ  EQU   *
*
         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP
         MVC   PUTLLINE,DL19  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         SR    R1,R1          CLEAR
         IC    R1,0(R4)       POST VVRCATNL
         CVD   R1,WORKDW      NOW PACKED
         MVC   DL20NL,ED04    POST EDIT MASK
         ED    DL20NL,WORKDW+6
*
         STC   R1,LNCHRTR     SAVE
         CH    R1,=H'44'      TOO LONG
         BNH   PCE9CTT1       NO -- CONTINUE
         LH    R1,=H'44'      TOO LONG
         STC   R1,LNCHRTR     SAVE
PCE9CTT1 EQU   *
         MVC   DL20NM,SPACES  CLEAR
         LTR   R1,R1          ZERO CHECK
         BNZ   PCE9CTT2       NOT ZERO -- PROCESS
         MVI   DL20NM,APOST   POST CLOSING APOST
         B     PCE9CTZ        CONTINUE
PCE9CTT2 EQU   *
         LA    R0,1(R4)       FROM ADDR VVRKEY
*                             FROM LENGTH ALREADY IN R1
         LA    R14,DL20NM     TO ADDR
         LR    R15,R1         TO LENGTH
         MVCL  R14,R0         COPY
         TR    DL20NM,TRNAME  FIX
         MVI   0(R14),APOST   ADD TRAILING APOST
PCE9CTZ  EQU   *
*
         MVC   PUTLLINE,DL20  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         SR    R1,R1          CLEAR
         IC    R1,0(R4)       L'VVRCATNM
         LA    R4,1(R1,R4)    NOW A(VVRBSENL)
         LA    R15,0(R4)      POST A(VVRBSENL)
         LA    R1,1           POST LENGHT
         BAL   R14,HEX        NOW HEX
         MVC   DL21NL,HEXLIT  POST
*
         LA    R15,1(R4)      POST A(VVRBSENM)
         SR    R1,R1          CLEAR
         IC    R1,0(R4)       POST VVRBSENL
         STC   R1,LNHEXTR     POST HEX LENGTH
         CH    R1,=H'44'      TOO LONG
         BNH   PCE9HBT1       NO -- CONTINUE
         LH    R1,=H'44'      POST SHORTER LENGTH
         STC   R1,LNHEXTR     SAVE
PCE9HBT1 EQU   *
         MVC   DL21NM,SPACES  CLEAR
         LTR   R1,R1          ZERO CHECK
         BNZ   PCE9HBT2       NOT ZERO -- PROCESS
         MVI   DL21NM,APOST   POST TRAILING APOST
         B     PCE9HBZ        CONTINUE
PCE9HBT2 EQU   *
         BAL   R14,HEX        NOW HEX
         LA    R0,HEXLIT      FROM ADDR
         SR    R1,R1          CLEAR
         IC    R1,LNHEXTR     LENGTH
         AR    R1,R1          X 2 FOR HEX
         LA    R14,DL21NM     TO ADDR
         LR    R15,R1         TO LENGTH
         MVCL  R14,R0         COPY
         MVI   0(R14),APOST   POST
PCE9HBZ  EQU   *
*
         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP
         MVC   PUTLLINE,DL21  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         SR    R1,R1          CLEAR
         IC    R1,0(R4)       POST VVRBSENL
         CVD   R1,WORKDW      NOW PACKED
         MVC   DL22NL,ED04    POST EDIT MASK
         ED    DL22NL,WORKDW+6
*
         STC   R1,LNCHRTR     SAVE
         CH    R1,=H'44'      TOO LONG
         BNH   PCE9CBT1       NO -- CONTINUE
         LH    R1,=H'44'      TOO LONG
         STC   R1,LNCHRTR     SAVE
PCE9CBT1 EQU   *
         MVC   DL22NM,SPACES  CLEAR
         LTR   R1,R1          ZERO CHECK
         BNZ   PCE9CBT2       NOT ZERO -- PROCESS
         MVI   DL22NM,APOST   POST TRAILING APOST
         B     PCE9CBZ        CONTINUE
PCE9CBT2 EQU   *
         LA    R0,1(R4)       FROM ADDR VVRBSENM
*                             FROM LENGTH ALREADY IN R1
         LA    R14,DL22NM     TO ADDR
         LR    R15,R1         TO LENGTH
         MVCL  R14,R0         COPY
         TR    DL22NM,TRNAME  FIX
         MVI   0(R14),APOST   ADD TRAILING APOST
PCE9CBZ  EQU   *
*
         MVC   PUTLLINE,DL22  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         DROP  R5
         L     R14,PCE9R14    RESTORE RETURN ADDR
         BR    R14            RETURN
         TITLE 'GETV     - GET NEXT VVDS REC'
GETV     EQU   *
         ST    R14,GETVR14    SAVE RETURN ADDR
         CLI   SWV,C'O'       FILE OPEN
         BNE   ERRGVE         NO -- ERROR
         AP    GETVRC,=P'1'   BUMP RECORD COUNT
         GET   RPL=((6))      READ NEXT REC
         LTR   R15,R15        OK?
         BZ    GETVX          YES -- DONE
         ST    R15,FDBKR15    SAVE RETURN CODE
         SHOWCB RPL=(R6),                                              X
               AREA=FDBKRPL,                                           X
               LENGTH=L'FDBKRPL,                                       X
               FIELDS=FDBK
         CLC   FDBKR15,=F'8'  LOGIC ERROR
         BNE   ERRRPL         NO -- ERROR
         CLC   FDBKRPL,=F'4'  EOF
         BNE   ERRRPL         NO -- ERROR
         MVI   SWV,C'E'       SET EOF SW
GETVX    EQU   *
         L     R14,GETVR14    RESTORE RETURN ADDR
         BR    R14            RETURN
         TITLE 'POFF     - PRINT OFFSET LINE'
POFF     EQU   *
         ST    R14,POFFR14    SAVE RETURN ADDR
         LR    R15,R5         POST CURR ADDR
         S     R15,ADDRVREC   LESS BASE ADDR = OFFSET
         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR
         MVC   DL03OFS,HD2LIT POST
*
         ZAP   PUTLGC,=P'2'   POST 2 EXTRA LINES IN GROUP
         MVC   PUTLLINE,SPACES POST BLANK LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP
         MVC   PUTLLINE,DL03  POST LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
*
         MVC   PUTLLINE,SPACES POST BLANK LINE TO PRINT
         BAL   R14,PUTL       PRINT IT
         L     R14,POFFR14    RESTORE RETURN ADDR
         BR    R14            RETRUN
         TITLE 'PUTL     - PRINT A DATA LINE'
PUTL     EQU   *
         ST    R14,PUTLR14    SAVE RETURN ADDR
         AP    PUTLLC,=P'1'   BUMP LINE COUNT
         AP    PUTLGC,PUTLLC  ALLOW FOR LINE GROUPS
         CP    PUTLGC,PUTLLMAX PAST END OF PAGE
         BL    PUTLPUT        NO - SKIP TOP OF PAGE LOGIC
         AP    PUTLPC,=P'1'   BUMP PAGE COUNT
         MVC   TL01PGN,ED01   POST EDIT MASK
         ED    TL01PGN,PUTLPC POST PAGE NO
         PUT   SYSPRINT,TL01  PRINT TITLE LINE
         PUT   SYSPRINT,SPACES PRINT BALNK LINE
         ZAP   PUTLLC,=P'3'   RESET LINE COUNT
PUTLPUT  EQU   *
         ZAP   PUTLGC,=P'0'   RESET GROUP COUNT
         PUT   SYSPRINT,PUTLLINE PRINT DATA LINE
         L     R14,PUTLR14    RESTORE RETURN ADDR
         BR    R14            RETURN
         TITLE 'HD1      - FORMAT HEX AND DECIMAL - 1 BYTE'
HD1      EQU   *
*
*        ON ENTRY:  R15 - ONE BYTE VALUE FOR PRINTING
*
         ST    R14,HD1R14     SAVE RETURN ADDR
         STC   R15,HDWORK     POST HEX CHAR
         LA    R15,HDWORK     A(HEX CHAR)
         LA    R1,1           LENGTH
         BAL   R14,HEX        NOW HEX
         MVC   HD1HX,HEXLIT   POST
         SR    R15,R15        CLEAR
         IC    R15,HDWORK     POST
         CVD   R15,WORKDW     NOW PACKED
         MVC   HD1ED,ED04     POST EDIT MASK
         ED    HD1ED,WORKDW+6
         L     R14,HD1R14     RESTORE RETURN ADDR
         BR    R14
         TITLE 'HD2      - FORMAT HEX AND DECIMAL - 2 BYTES'
HD2      EQU   *
*
*        ON ENTRY:  R15 - TWO BYTE VALUE FOR PRINTING
*
         ST    R14,HD2R14     SAVE RETURN ADDR
         STH   R15,HDWORK     POST HEX CHAR
         LA    R15,HDWORK     A(HEX CHARS)
         LA    R1,2           LENGTH
         BAL   R14,HEX        NOW HEX
         MVC   HD2HX,HEXLIT   POST
         SR    R15,R15        CLEAR
         ICM   R15,B'0011',HDWORK POST
         CVD   R15,WORKDW     NOW PACKED
         MVC   HD2ED,ED01     POST EDIT MASK
         ED    HD2ED,WORKDW+5
         L     R14,HD2R14     RESTORE RETURN ADDR
         BR    R14
         TITLE 'HD3      - FORMAT HEX AND DECIMAL - 3 BYTES'
HD3      EQU   *
*
*        ON ENTRY:  R15 - THREE BYTE VALUE FOR PRINTING
*
         ST    R14,HD3R14     SAVE RETURN ADDR
         STCM  R15,B'0111',HDWORK POST HEX CHAR
         LA    R15,HDWORK     A(HEX CHARS)
         LA    R1,3           LENGTH
         BAL   R14,HEX        NOW HEX
         MVC   HD3HX,HEXLIT   POST
         SR    R15,R15        CLEAR
         ICM   R15,B'0111',HDWORK POST HEX CHAR
         CVD   R15,WORKDW     NOW PACKED
         MVC   HD3ED,ED05     POST EDIT MASK
         ED    HD3ED,WORKDW+3
         L     R14,HD3R14     RESTORE RETURN ADDR
         BR    R14
         TITLE 'HD4      - FORMAT HEX AND DECIMAL - 4 BYTES'
*
*        ON ENTRY:  R15 - FOUR BYTE VALUE FOR PRINTING
*
HD4      EQU   *
         ST    R14,HD4R14     SAVE RETURN ADDR
         ST    R15,HDWORK     POST HEX CHAR
         LA    R15,HDWORK     A(HEX CHARS)
         LA    R1,4           LENGTH
         BAL   R14,HEX        NOW HEX
         MVC   HD4HX,HEXLIT   POST
         L     R15,HDWORK     POST
         CVD   R15,WORKDW     NOW PACKED
         SRP   WORKDW,1,0     SHIFT LEFT 1 FOR ED
         MVC   HD4ED,ED02     POST EDIT MASK
         ED    HD4ED,WORKDW+2
         L     R14,HD4R14     RESTORE RETURN ADDR
         BR    R14
         TITLE 'HEX      - MAKE TEXT PRINTABLE HEX'
HEX      EQU   *
*
*        ON ENTRY:  R1  - NUMBER OF BYTES
*                   R15 - ADDR OF SOURCE
*
         ST    R14,HEXR14     SAVE RETURN ADDR
         LTR   R1,R1          LENGTH CHECK
         BNP   ERRHEXL        MUST BE POS
         CH    R1,=H'45'      MAX
         BH    ERRHEXL        OVER -- ERROR
         LA    R14,HEXLIT     A(START OF ANS)
HEXLOOP  EQU   *
         MVC   0(1,R14),0(R15) POST FIRST CHAR
         TR    0(1,R14),TRHEXH XLATE FOR HIGH BYTE
         MVC   1(1,R14),0(R15) POST FIRST CHAR AGAIN
         TR    1(1,R14),TRHEXL XLATE FOR LOW BYTE
         LA    R14,2(R14)      BUMP TO NEXT
         LA    R15,1(R15)      BUMP TO NEXT
         BCT   R1,HEXLOOP      LOOP BACK
         L     R14,HEXR14     RESTORE RETURN ADDR
         BR    R14
         TITLE 'BIN      - CONVERT A BYTE TO DISPLAY'
*
*        ON ENTRY:  R15 - ADDR OF BYTE
*
BIN      EQU   *
         ST    R14,BINR14     SAVE RETURN ADDR
         MVI   BINLIT+1,C'0'  ASSUME
         TM    0(R15),B'10000000'
         BE    BIN01          ASSUMPTION OK
         MVI   BINLIT+1,C'1'  FIX ERROR
BIN01    EQU   *
         MVI   BINLIT+2,C'0'  ASSUME
         TM    0(R15),B'01000000'
         BE    BIN02          ASSUMPTION OK
         MVI   BINLIT+2,C'1'  FIX ERROR
BIN02    EQU   *
         MVI   BINLIT+3,C'0'  ASSUME
         TM    0(R15),B'00100000'
         BE    BIN03          ASSUMPTION OK
         MVI   BINLIT+3,C'1'  FIX ERROR
BIN03    EQU   *
         MVI   BINLIT+4,C'0'  ASSUME
         TM    0(R15),B'00010000'
         BE    BIN04          ASSUMPTION OK
         MVI   BINLIT+4,C'1'  FIX ERROR
BIN04    EQU   *
         MVI   BINLIT+5,C'0'  ASSUME
         TM    0(R15),B'00001000'
         BE    BIN05          ASSUMPTION OK
         MVI   BINLIT+5,C'1'  FIX ERROR
BIN05    EQU   *
         MVI   BINLIT+6,C'0'  ASSUME
         TM    0(R15),B'00000100'
         BE    BIN06          ASSUMPTION OK
         MVI   BINLIT+6,C'1'  FIX ERROR
BIN06    EQU   *
         MVI   BINLIT+7,C'0'  ASSUME
         TM    0(R15),B'00000010'
         BE    BIN07          ASSUMPTION OK
         MVI   BINLIT+7,C'1'  FIX ERROR
BIN07    EQU   *
         MVI   BINLIT+8,C'0'  ASSUME
         TM    0(R15),B'00000001'
         BE    BIN08          ASSUMPTION OK
         MVI   BINLIT+8,C'1'  FIX ERROR
BIN08    EQU   *
         L     R14,BINR14     RESTORE RETURN ADDR
         BR    R14            RETURN
         TITLE 'ERROR MESSAGES'
ERRAMDCN EQU   *
         WTO   'VVDSLIST - VVRAMDCN INVALID -- S/B 98',                *
               ROUTCDE=11,DESC=7
         B     ABEND
ERRDSLEN EQU   *
         WTO   'VVDSLIST - VVRDSLEN INVALID -- S/B 53 OR 85',          *
               ROUTCDE=11,DESC=7
         B     ABEND
ERRGVE   EQU   *
         WTO   'VVDSLIST - INTERNAL LOGIC ERROR AT LABEL GETV',        *
               ROUTCDE=11,DESC=7
         B     ABEND
ERRHEXL  EQU   *
         ST    R1,HEXLR1      DIAGNOSTIC SAVE
         WTO   'VVDSLIST - R1 BAD ON ENTRY TO HEX',                    *
               ROUTCDE=11,DESC=7
         B     ABEND
ERRJFCB  EQU   *
         WTO   'VVDSLIST - RDJFCB FAILED',                             *
               ROUTCDE=11,DESC=7
         B     ABEND
ERRNOCR  EQU   *
         WTO   'VVDSLIST - VVCR RECORD MISSING ',                      *
               ROUTCDE=11,DESC=7
         B     ABEND
ERRNOSDR EQU   *
         WTO   'VVDSLIST - SELF DEFINING VVR MISSING',                 *
               ROUTCDE=11,DESC=7
         B     ABEND
ERROEXT  EQU   *
         WTO   'VVDSLIST - OPEN FAILED FOR SYSPRINT FILE',             *
               ROUTCDE=11,DESC=7
         B     ABEND
ERROPV   EQU   *
         WTO   'VVDSLIST - OPEN FAILED FOR VVDS FILE',                 *
               ROUTCDE=11,DESC=7
         B     ABEND
ERRRPL   EQU   *
         WTO   'VVDSLIST - I/O ERROR READING VVDS',                    *
               ROUTCDE=11,DESC=7
         B     ABEND
ERRRTY   EQU   *
         WTO   'VVDSLIST - INVALID VVR RECORD TYPE',                   *
               ROUTCDE=11,DESC=7
         B     ABEND
ERRSVVRF EQU   *
         WTO   'VVDSLIST - FIRST VVR NOT SELF DEFINING',               *
               ROUTCDE=11,DESC=7
         B     ABEND
ERRSVVRZ EQU   *
         WTO   'VVDSLIST - FIRST VVR NOT TYPE Z',                      *
               ROUTCDE=11,DESC=7
         B     ABEND
ERRVVCRL EQU   *
         WTO   'VVDSLIST - VVCR LENGTH INVALID -- S/B 4088',           *
               ROUTCDE=11,DESC=7
         B     ABEND
ERRVVRQZ EQU   *
         WTO   'VVDSLIST - VVR TYPE NOT Q OR Z',                       *
               ROUTCDE=11,DESC=7
         B     ABEND
ERRXTNTL EQU   *
         WTO   'VVDSLIST - VVRXTNTL NOT DIVISIBLE BY 20',              *
               ROUTCDE=11,DESC=7
         B     ABEND
         TITLE 'EXIT/ABEND'
ABEND    EQU   *
         ABEND 1000,DUMP
EXIT     EQU   *
         CLOSE (SYSPRINT)
         L     R6,ADDRACB
         CLOSE ((6))
         L     R13,4(R13)
         RETURN (14,12),RC=0
         LTORG
         TITLE 'DATA AREAS - MISCELLANEOUS'
SAVEAREA DS    9D                  REG SAVE AREA
*
WORKDW   DS    D                   WORK AREA
*
BINR14   DS    F                   R14 SAVE AREA FOR BIN
GETVR14  DS    F                   R14 SAVE AREA FOR GETV
HD1R14   DS    F                   R14 SAVE AREA FOR HD1
HD2R14   DS    F                   R14 SAVE AREA FOR HD2
HD3R14   DS    F                   R14 SAVE AREA FOR HD3
HD4R14   DS    F                   R14 SAVE AREA FOR HD4
HEXR14   DS    F                   R14 SAVE AREA FOR HEX
PCE9R14  DS    F                   R14 SAVE AREA FOR PCE9
PCRCR14  DS    F                   R14 SAVE AREA FOR PCRC
PCRSR14  DS    F                   R14 SAVE AREA FOR PCRS
PC21R14  DS    F                   R14 SAVE AREA FOR PC21
PC23R14  DS    F                   R14 SAVE AREA FOR PC23
PC60R14  DS    F                   R14 SAVE AREA FOR PC60
PHDRR14  DS    F                   R14 SAVE AREA FOR PHDR
POFFR14  DS    F                   R14 SAVE AREA FOR POFF
PUTLR14  DS    F                   R14 SAVE AREA FOR PUTL
PVCRR14  DS    F                   R14 SAVE AREA FOR PVCR
PVRQR14  DS    F                   R14 SAVE AREA FOR PVRQ
PVRZR14  DS    F                   R14 SAVE AREA FOR PVRZ
SCANR14  DS    F                   R14 SAVE AREA FOR SCAN
SVVRR14  DS    F                   R14 SAVE AREA FOR SVVR
*
ADDRACB  DS    F                   A(ACB)
ADDRRPL  DS    F                   A(RPL)
ADDRVREC DS    F                   A(REC)
FDBKRPL  DS    F                   FDBK FROM ARCDIR IF ERROR
FDBKR15  DS    F                   R15 FROM GET ON ARCDIR IF ERROR
RLRECL   DS    F                   LRECL OF CURRENT FILE
BLRECL   DC    F'4096'             LRECL OF BUFFER
TIOT     DS    F                   ADDR OF TIOT
NEXTDD   DS    F                   ADDR OF NEXT DD SEG IN TIOT
PCRSBASE DS    F                   BASE ADDR FOR PCRS
HDWORK   DS    F                   WORK AREA FOR HD1 - HD4
HEXLR1   DS    F                   DIAGNOSTIC SAVE AREA (R1) - ERRHEXL
*
JFCBLIST DS    0F
         DC    X'87'               DCB EXIT LIST - JFCB
         DC    AL3(INFMJFCB)       JFCB WORK AREA
*
         DS    0F
SHOWAREA DS    0XL16
SHOWRBA  DS    F
SHOWRECL DS    F
*
*        PACKED FIELDS
*
GETVRC   DC    PL6'0'              GETV - RECORD COUNT
PCRCLN   DC    PL2'0'              PCRC - LOOP NUMBER
PUTLLMAX DC    PL2'56'             PUTL - MAX LINES / PAGE
PUTLLC   DC    PL2'56'             PUTL - CURRENT LINE NO
PUTLGC   DC    PL2'0'              PUTL - CURRENT GROUP COUNT
PUTLPC   DC    PL3'0'              PUTL - CURRENT PAGE NO
*
*        MISC FIELDS
*
LNHEXTR  DS    X                   LENGTH OF HEX FIELD FOR TR
LNCHRTR  DS    X                   LENGTH OF CHR FIELD FOR TR
*
*        CHARACTER FIELDS
*
SWV      DC    C'C'                FILE V STATUS SW VVDSXXXX
*              C'C'                CLOSED
*              C'O'                OPEN
*              C'E'                FILE AT EOF
*
DDNAME   DS    CL8                 DD NAME OF NEXT VVDS TO PROCESS
SPACES   DC    CL133' '
PUTLLINE DC    CL133' '            PUTL - NEXT DATA LINE TO PRINT
HEXLIT   DS    CL90                HEX  - LITERAL AREA FOR ANS
BINLIT   DS    0CL10
         DC    AL1(APOST)
         DC    CL8' '
         DC    AL1(APOST)
HD1LIT   DS    0CL10               HD2  - LITERAL AREA FOR ANS
         DC    AL1(APOST)
HD1HX    DS    CL2
         DC    AL1(APOST)
         DC    C' ='
HD1ED    DS    CL4
HD2LIT   DS    0CL15               HD2  - LITERAL AREA FOR ANS
         DC    AL1(APOST)
HD2HX    DS    CL4
         DC    AL1(APOST)
         DC    C' ='
HD2ED    DS    CL7
HD3LIT   DS    0CL22               HD3  - LITERAL AREA FOR ANS
         DC    AL1(APOST)
HD3HX    DS    CL6
         DC    AL1(APOST)
         DC    C' ='
HD3ED    DS    CL12
HD4LIT   DS    0CL26               HD4  - LITERAL AREA FOR ANS
         DC    AL1(APOST)
HD4HX    DS    CL8
         DC    AL1(APOST)
         DC    C' ='
HD4ED    DS    CL14
*
*        EDIT MASKS
*
ED01     DC    X'4020206B202120'                        BZZ,ZZ9 (07)
ED02     DC    X'40206B2020206B2020206B202120'   BZ,ZZZ,ZZZ,ZZ9 (14)
ED03     DC    X'40206B2020206B202120'               BZ,ZZZ,ZZ9 (10)
ED04     DC    X'40202120'                                 BZZ9 (04)
ED05     DC    X'402020206B2020206B202120'         BZZZ,ZZZ,ZZ9 (12)
*
*         MISC LITERALS
*
*                   123456789012345678901234567890123456789012345678901
LT01     DC    CL38'VSAM VOLUME CONTROL RECORD            '
LT02     DC    CL38'SELF-DESCRIBING VSAM VOLUME RECORD    '
LT03     DC    CL38'PRIMARY VSAM VOLUME RECORD            '
LT04     DC    CL38'SECONDARY VSAM VOLUME RECORD          '
LT05     DC    CL29'PRIMARY/SECONDARY HEADER CELL'
LT06     DC    CL29'DATASET INFORMATION CELL     '
LT07     DC    CL29'AMSDB CELL                   '
LT08     DC    CL29'VOLUME INFORMATION CELL      '
LT09     DC    CL04'*TR*'
LT10     DC    CL16'NOT PRESENT     '
LT11     DC    CL48'NOT PRESENT                                     '
*                   123456789012345678901234567890123456789012345678901
         TITLE 'WORK AREAS - TRANSLATE TABLES'
TRNAME   EQU   *
*                 0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'40404040404040404040404040404040'    0
         DC    X'40404040404040404040404040404040'    1
         DC    X'40404040404040404040404040404040'    2
         DC    X'40404040404040404040404040404040'    3
         DC    X'40404040404040404040404B40404040'    4  PERIOD
         DC    X'40404040404040404040405B40404040'    5  $
         DC    X'40404040404040404040404040404040'    6
         DC    X'40404040404040404040407B7C404040'    7  @#
         DC    X'40404040404040404040404040404040'    8
         DC    X'40404040404040404040404040404040'    9
         DC    X'40404040404040404040404040404040'    A
         DC    X'40404040404040404040404040404040'    B
         DC    X'40C1C2C3C4C5C6C7C8C9404040404040'    C  LETTERS
         DC    X'40D1D2D3D4D5D6D7D8D9404040404040'    D  LETTERS
         DC    X'4040E2E3E4E5E6E7E8E9404040404040'    E  LETTERS
         DC    X'F0F1F2F3F4F5F6F7F8F9404040404040'    F  NUMBERS
*                 0 1 2 3 4 5 6 7 8 9 A B C D E F
TRHEXH   EQU   *
*                0123456789ABCDEF
         DC    C'0000000000000000'   0
         DC    C'1111111111111111'   1
         DC    C'2222222222222222'   2
         DC    C'3333333333333333'   3
         DC    C'4444444444444444'   4
         DC    C'5555555555555555'   5
         DC    C'6666666666666666'   6
         DC    C'7777777777777777'   7
         DC    C'8888888888888888'   8
         DC    C'9999999999999999'   9
         DC    C'AAAAAAAAAAAAAAAA'   A
         DC    C'BBBBBBBBBBBBBBBB'   B
         DC    C'CCCCCCCCCCCCCCCC'   C
         DC    C'DDDDDDDDDDDDDDDD'   D
         DC    C'EEEEEEEEEEEEEEEE'   E
         DC    C'FFFFFFFFFFFFFFFF'   F
*                0123456789ABCDEF
TRHEXL   EQU   *
*                0123456789ABCDEF
         DC    C'0123456789ABCDEF'   0
         DC    C'0123456789ABCDEF'   1
         DC    C'0123456789ABCDEF'   2
         DC    C'0123456789ABCDEF'   3
         DC    C'0123456789ABCDEF'   4
         DC    C'0123456789ABCDEF'   5
         DC    C'0123456789ABCDEF'   6
         DC    C'0123456789ABCDEF'   7
         DC    C'0123456789ABCDEF'   8
         DC    C'0123456789ABCDEF'   9
         DC    C'0123456789ABCDEF'   A
         DC    C'0123456789ABCDEF'   B
         DC    C'0123456789ABCDEF'   C
         DC    C'0123456789ABCDEF'   D
         DC    C'0123456789ABCDEF'   E
         DC    C'0123456789ABCDEF'   F
*                0123456789ABCDEF
         TITLE 'WORK AREAS - JFCB'
         IEFJFCBN
         TITLE 'WORK AREAS - DCBS'
         PUSH  PRINT
         PRINT NOGEN
SYSPRINT DCB   DDNAME=SYSPRINT,                                        X
               DSORG=PS,                                               X
               LRECL=133,                                              X
               MACRF=PM,                                               X
               RECFM=FBA
*
DCBJFCB  DCB   DDNAME=DCBJFCB,                                         X
               DSORG=PS,                                               X
               EXLST=JFCBLIST,                                         X
               MACRF=GL
*
         DCBD  DSORG=(PS)
VVDSLIST CSECT
         POP   PRINT
         TITLE 'WORK AREAS - DETAIL RECORD AREAS'
TL01     DC    CL133' '
         ORG   TL01
         DC    C'1'           CC = TOP OF PAGE
         ORG   TL01+9
         DC    C'VVDSLIST  DD:  '
TL01DDN  DS    CL8
         DC    C'  FORMATTED LISTING OF:  '
TL01DSN  DS    CL44
         ORG   TL01+109
         DC    C'PAGE '
TL01PGN  DS    CL7
         ORG   ,
*
DL02     DC    CL133' '
         ORG   DL02+1
DL02LIT  DS    CL38
         DC    C' RBA ='
DL02RBA  DS    CL14
         DC    C'  RECORD NUMBER ='
DL02RECN DS    CL10
         DC    C'  LENGTH (RPL) = X'
DL02LEN  DS    CL15
         ORG   ,
*
DL03     DC    CL133' '
         ORG   DL03+4
         DC    C'OFFSET = X'
DL03OFS  DS    CL15
         DC    C' - '
DL03LIT  DS    CL29
         ORG   ,
*
DL04     DC    CL133' '
         ORG   DL04+9
         DC    C'VVCRLEN  = X'
DL04LEN  DS    CL15
         DC    C'  VVCNUMCI = X'
DL04NCI  DS    CL15
         DC    C'  RESERVED = X'
         DC    AL1(APOST)
DL04RSV  DS    CL40
         DC    AL1(APOST)
         ORG   ,
*
DL05     DC    CL133' '
         ORG   DL05+9
         DC    C'ENTRY NO'
DL05ENT  DS    CL4
         DC    C'  VVCCATNM = X'
         DC    AL1(APOST)
DL05CTN  DS    CL88
         DC    AL1(APOST)
         ORG   ,
*
DL06     DC    CL133' '
         ORG   DL06+32
         DC    C'= C'
         DC    AL1(APOST)
DL06CTN  DS    CL44
         DC    AL1(APOST)
         DC    C'  VVCDTRBA = X'
DL06RBA  DS    CL26
         ORG   ,
*
DL07     DC    CL133' '
         ORG   DL07+23
         DC    C'VVCIXRBA = X'
DL07IXRB DS    CL26
         DC    C'  VVCSSRBA = X'
DL07SSRB DS    CL26
         ORG   ,
*
DL08     DC    CL133' '
         ORG   DL08+9
         DC    C'VVCCISPC+X'
         DC    AL1(APOST)
DL08BASE DS    CL4
         DC    AL1(APOST)
         DC    C' = '
DL08HX00 DS    CL8
         DC    C' '
DL08HX04 DS    CL8
         DC    C'  '
DL08HX08 DS    CL8
         DC    C' '
DL08HX0C DS    CL8
         DC    C'    '
DL08HX10 DS    CL8
         DC    C' '
DL08HX14 DS    CL8
         DC    C'  '
DL08HX18 DS    CL8
         DC    C' '
DL08HX1C DS    CL8
         ORG   ,
*
DL09     DC    CL133' '
         ORG   DL09+9
         DC    C'VVRLEN   = X'
DL09LEN  DS    CL15
         DC    C'  VVRHDLEN = X'
DL09HDLN DS    CL15
         DC    C'  VVRTYPE  = X'
         DC    AL1(APOST)
DL09HTY  DS    CL2
         DC    AL1(APOST)
         DC    C' = C'
         DC    AL1(APOST)
DL09CTY  DS    CL1
         DC    AL1(APOST)
         ORG   ,
*
DL10     DC    CL133' '
         ORG   DL10+9
         DC    C'VVRFLAG  = B'
DL10FLAG DS    CL10
         ORG   DL10+66
         DC    C'VVRKRQ   = X'
         DC    AL1(APOST)
DL10KRQ  DS    CL8
         DC    AL1(APOST)
         ORG   ,
*
DL11     DC    CL133' '
         ORG   DL11+22
         DC    C'*  * ***  = RESERVED'
         ORG   ,
*
DL12     DC    CL133' '
         ORG   DL12+22
         DC    C' *        = SELF-DESCRIBING VVR'
         ORG   ,
*
DL13     DC    CL133' '
         ORG   DL13+22
         DC    C'  *       = CATALOG SELF-DESCRIBING VVR'
         ORG   ,
*
DL14     DC    CL133' '
         ORG   DL14+22
         DC    C'    *     = COMPONENT TYPE D (0) OR I (1)'
         ORG   ,
*
DL15     DC    CL133' '
         ORG   DL15+9
         DC    C'VVRCMPNL = X'
         DC    AL1(APOST)
DL15NL   DS    CL2
         DC    AL1(APOST)
         DC    C'  VVRCMPNM = X'
         DC    AL1(APOST)
DL15NM   DS    CL89
         ORG   ,
DL16     DC    CL133' '
         ORG   DL16+18
         DC    C'=  '
DL16NL   DS    CL4
         DC    C'           = C'
         DC    AL1(APOST)
DL16NM   DS    CL45
         ORG   ,
*
DL17     DC    CL133' '
         ORG   DL17+9
         DC    C'VVRKEYL  = X'
         DC    AL1(APOST)
DL17KL   DS    CL2
         DC    AL1(APOST)
         DC    C'  VVRKEY   = X'
         DC    AL1(APOST)
DL17K    DS    CL91
         ORG   ,
DL18     DC    CL133' '
         ORG   DL18+18
         DC    C'=  '
DL18KL   DS    CL4
         DC    C'           = C'
         DC    AL1(APOST)
DL18K    DS    CL46
         ORG   ,
*
DL19     DC    CL133' '
         ORG   DL19+9
         DC    C'VVRCATNL = X'
         DC    AL1(APOST)
DL19NL   DS    CL2
         DC    AL1(APOST)
         DC    C'  VVRCATNM = X'
         DC    AL1(APOST)
DL19NM   DS    CL89
         ORG   ,
DL20     DC    CL133' '
         ORG   DL20+18
         DC    C'=  '
DL20NL   DS    CL4
         DC    C'           = C'
         DC    AL1(APOST)
DL20NM   DS    CL45
         ORG   ,
*
DL21     DC    CL133' '
         ORG   DL21+9
         DC    C'VVRBSENL = X'
         DC    AL1(APOST)
DL21NL   DS    CL2
         DC    AL1(APOST)
         DC    C'  VVRBSENM = X'
         DC    AL1(APOST)
DL21NM   DS    CL89
         ORG   ,
DL22     DC    CL133' '
         ORG   DL22+18
         DC    C'=  '
DL22NL   DS    CL4
         DC    C'           = C'
         DC    AL1(APOST)
DL22NM   DS    CL45
         ORG   ,
*
DL23     DC    CL133' '
         ORG   DL23+9
         DC    C'VVRDSLEN = X'
DL23DSLN DS    CL15
         DC    C'  VVRDSTYP = X'
         DC    AL1(APOST)
DL23HTY  DS    CL2
         DC    AL1(APOST)
         DC    C' = C '
         DC    AL1(APOST)
DL23CTY  DS    C
         DC    AL1(APOST)
         ORG   ,
*
DL24     DC    CL133' '
         ORG   DL24+9
         DC    C'VVRATTR1 = B'
DL24ATR1 DS    CL10
         ORG   DL24+52
         DC    C'VVRATTR2 = B'
DL24ATR2 DS    CL10
         ORG   DL24+100
         DC    C'VVROPIND = X'
         DC    AL1(APOST)
DL24OIND DS    CL2
         DC    AL1(APOST)
         ORG   ,
DL25     DC    CL133' '
         ORG   DL25+22
         DC    C'*         = SPEED'
         ORG   DL25+65
         DC    C'**        = REGIONAL SHARING ATTR'
         ORG   ,
*
DL26     DC    CL133' '
         ORG   DL26+22
         DC    C' *        = UNIQUE'
         ORG   DL26+65
         DC    C'  **      = SYSTEM SHARING ATTR'
         ORG   ,
*
DL27     DC    CL133' '
         ORG   DL27+22
         DC    C'  *       = REUSABLE'
         ORG   DL27+65
         DC    C'    **    = RESERVED'
         ORG   ,
*
DL28     DC    CL133' '
         ORG   DL28+22
         DC    C'   *      = ERASE'
         ORG   DL28+65
         DC    C'      *   = INTERNAL SYSTEM DS'
         ORG   ,
*
DL29     DC    CL133' '
         ORG   DL29+22
         DC    C'    *     = RESERVED'
         ORG   DL29+65
         DC    C'       *  = COMPONENT UNUSABLE'
         ORG   ,
*
DL30     DC    CL133' '
         ORG   DL30+22
         DC    C'     *    = INHIBIT UPDATE'
         ORG   ,
*
DL31     DC    CL133' '
         ORG   DL31+22
         DC    C'      *   = TEMPORARY EXPORT'
         ORG   ,
*
DL32     DC    CL133' '
         ORG   DL32+22
         DC    C'       *  = TRACK OVERFLOW'
         ORG   ,
*
DL33     DC    CL133' '
         ORG   DL33+9
         DC    C'VVRBUFSZ = X'
DL33BSZ  DS    CL26
         DC    C'  VVRPRISP = X'
DL33PSP  DS    CL22
         DC    C'  VVRSECSP = X'
DL33SSP  DS    CL22
         ORG   ,
*
DL34     DC    CL133' '
         ORG   DL34+9
         DC    C'VVRSPCFG = B'
DL34SPFG DS    CL10
         DC    C'  VVRDSHU  = X'
DL34DSHU DS    CL26
         DC    C'  VVRDSHA  = X'
DL34DSHA DS    CL26
         ORG   ,
*
DL35     DC    CL133' '
         ORG   DL35+22
         DC    C'**       = SPACE OPTIONS'
         ORG   ,
*
DL36     DC    CL133' '
         ORG   DL36+22
         DC    C'  ****** = RESERVED'
         ORG   ,
*
DL37     DC    CL133' '
         ORG   DL37+9
         DC    C'VVRLRECL = X'
DL37RECL DS    CL26
         DC    C'  RESERVED = X'
         DC    AL1(APOST)
DL37RSV  DS    CL4
         DC    AL1(APOST)
         DC    C'  VVREXCPX = X'
         DC    AL1(APOST)
DL37HXCP DS    CL16
         DC    AL1(APOST)
         DC    C' = C'
         DC    AL1(APOST)
DL37CXCP DS    CL8
         DC    AL1(APOST)
         ORG   ,
*
DL38     DC    CL133' '
         ORG   DL38+9
         DC    C'VVRDSHK  = X'
DL38DSHK DS    CL26
         DC    C'  VVRCLSFG = B'
DL38CLSF DS    CL10
         ORG   DL38+79
         DC    C'VVRAIXFG = B'
DL38AIXF DS    CL10
         ORG   ,
*
DL39     DC    CL133' '
         ORG   DL39+62
         DC    C'****     = RESERVED'
         ORG   DL39+92
         DC    C'*        = AIX ATTRIBUTE FLAG'
         ORG   ,
*
DL40     DC    CL133' '
         ORG   DL40+62
         DC    C'    *    = TIMESTAMPS EXIST'
         ORG   DL40+92
         DC    C' ******* = RESERVED'
         ORG   ,
*
DL41     DC    CL133' '
         ORG   DL41+62
         DC    C'     *   = VERIFY REQUIRED'
         ORG   ,
*
DL42     DC    CL133' '
         ORG   DL42+62
         DC    C'      *  = SWAPSPACE'
         ORG   ,
*
DL43     DC    CL133' '
         ORG   DL43+62
         DC    C'       * = PAGESPACE'
         ORG   ,
*
DL44     DC    CL133' '
         ORG   DL44+9
         DC    C'VVRTMSTP = X'
         DC    AL1(APOST)
DL44TMST DS    CL16
         DC    AL1(APOST)
         DC    C'  VVRALTSP = X'
         DC    AL1(APOST)
DL44ALSP DS    CL16
         DC    AL1(APOST)
         ORG   ,
*
DL45     DC    CL133' '
         ORG   DL45+9
         DC    C'RESERVED = X'
         DC    AL1(APOST)
DL45RSV  DS    CL48
         DC    AL1(APOST)
         ORG   ,
*
DL46     DC    CL133' '
         ORG   DL46+9
         DC    C'VVRAMDCN = X'
DL46DCN  DS    CL15
         DC    C'  VVRAMID  = X'
         DC    AL1(APOST)
DL46HID  DS    CL2
         DC    AL1(APOST)
         DC    C' = C'
         DC    AL1(APOST)
DL46CID  DS    CL1
         DC    AL1(APOST)
         DC    C'  VVRAMATR = B'
DL46ATR  DS    CL10
         ORG   ,
*
DL47     DC    CL133' '
         ORG   DL47+76
         DC    C'*        = KEY SEQ (1) OR ENT SEQ (0)'
         ORG   ,
*
DL48     DC    CL133' '
         ORG   DL48+76
         DC    C' *       = WRITE CHECK'
         ORG   ,
*
DL49     DC    CL133' '
         ORG   DL49+76
         DC    C'  *      = IMBED'
         ORG   ,
*
DL50     DC    CL133' '
         ORG   DL50+76
         DC    C'   *     = REPLICATE'
         ORG   ,
*
DL51     DC    CL133' '
         ORG   DL51+76
         DC    C'    *    = ORDERED'
         ORG   ,
*
DL52     DC    CL133' '
         ORG   DL52+76
         DC    C'     *   = KEY RANGE'
         ORG   ,
*
DL53     DC    CL133' '
         ORG   DL53+76
         DC    C'      *  = RELATIVE RECORD'
         ORG   ,
*
DL54     DC    CL133' '
         ORG   DL54+76
         DC    C'       * = SPANNED'
         ORG   ,
*
DL55     DC    CL133' '
         ORG   DL55+9
         DC    C'VVRAMLEN = X'
DL55LEN  DS    CL15
         DC    C'  VVRAMNST = X'
DL55NST  DS    CL15
         DC    C'  VVRAMAKP = X'
DL55AKP  DS    CL15
         DC    C'  VVRAMRKP = X'
DL55RKP  DS    CL15
         ORG   ,
*
DL56     DC    CL133' '
         ORG   DL56+9
         DC    C'VVRAMKLN = X'
DL56KLN  DS    CL15
         DC    C'  VVRAMPCA = X'
DL56PCA  DS    CL10
         DC    C'  VVRAMPCI = X'
DL56PCI  DS    CL10
         DC    C'  VVRAMCCA = X'
DL56CCA  DS    CL15
         ORG   ,
*
DL57     DC    CL133' '
         ORG   DL57+9
         DC    C'VVRAMFCA = X'
DL57FCA  DS    CL15
         DC    C'  VVRAMFCI = X'
DL57FCI  DS    CL26
         DC    C'  VVRAMCIV = X'
DL57CIV  DS    CL26
         ORG   ,
*
DL58     DC    CL133' '
         ORG   DL58+9
         DC    C'VVRAMLCL = X'
DL58LCL  DS    CL26
         DC    C'  VVRAMHLR/VVRAMSLT = X'
DL58HLR  DS    CL26
         ORG   ,
*
DL59     DC    CL133' '
         ORG   DL59+9
         DC    C'VVRAMSSR/VVRAMMRR = X'
DL59SSR  DS    CL26
         DC    C'  VVRAMARD = X'
DL59ARD  DS    CL26
         ORG   ,
*
DL60     DC    CL133' '
         ORG   DL60+9
         DC    C'VVRAMAT3 = B'
DL60AT3  DS    CL10
         DC    C'  VVRAMSNO = X'
DL60SNO  DS    CL10
         DC    C'  VVRAMDUI = X'
DL60DUI  DS    CL26
         ORG   ,
*
DL61     DC    CL133' '
         ORG   DL61+22
         DC    C'*        = UNIQUE KEYS'
         ORG   ,
*
DL62     DC    CL133' '
         ORG   DL62+22
         DC    C' *       = STAGE'
         ORG   ,
*
DL63     DC    CL133' '
         ORG   DL63+22
         DC    C'  *      = NOT BIND'
         ORG   ,
*
DL64     DC    CL133' '
         ORG   DL64+22
         DC    C'   *     = NOT WAIT'
         ORG   ,
*
DL65     DC    CL133' '
         ORG   DL65+22
         DC    C'    *    = LOADED'
         ORG   ,
*
DL66     DC    CL133' '
         ORG   DL66+22
         DC    C'     *** = RESERVED'
         ORG   ,
*
DL67     DC    CL133' '
         ORG   DL67+9
         DC    C'VVRAMBFI/VVRAMBFD = X'
DL67BFI  DS    CL15
         DC    C'  VVRAMSTS = X'
         DC    AL1(APOST)
DL67STS  DS    CL16
         DC    AL1(APOST)
         DC    C'  VVRAMNIL = X'
DL67NIL  DS    CL15
         ORG   ,
*
DL68     DC    CL133' '
         ORG   DL68+9
         DC    C'VVRAMNXT = X'
DL68NXT  DS    CL15
         DC    C'  VVRAMNLR = X'
DL68NLR  DS    CL26
         DC    C'  VVRAMDLR = X'
DL68DLR  DS    CL26
         ORG   ,
*
DL69     DC    CL133' '
         ORG   DL69+9
         DC    C'VVRAMINR = X'
DL69INR  DS    CL26
         DC    C'  VVRAMUPR = X'
DL69UPR  DS    CL26
         DC    C'  VVRAMRTR = X'
DL69RTR  DS    CL26
         ORG   ,
*
DL70     DC    CL133' '
         ORG   DL70+9
         DC    C'VVRAMASP = X'
DL70ASP  DS    CL26
         DC    C'  VVRAMCIS = X'
DL70CIS  DS    CL26
         DC    C'  VVRAMCAS = X'
DL70CAS  DS    CL26
         ORG   ,
*
DL71     DC    CL133' '
         ORG   DL71+9
         DC    C'VVRAMEXC = X'
DL71EXC  DS    CL26
         ORG   ,
*
DL72     DC    CL133' '
         ORG   DL72+9
         DC    C'VVRVOLLN = X'
DL72VOLL DS    CL15
         DC    C'  VVRVOLTP = X'
         DC    AL1(APOST)
DL72HVT  DS    CL2
         DC    AL1(APOST)
         DC    C' = C'
         DC    AL1(APOST)
DL72CVT  DS    CL1
         DC    AL1(APOST)
         DC    C'  VVRVOLFG = B'
DL72VOLF DS    CL10
         DC    C'  VVRNOEXT = X'
DL72NOXT DS    CL10
         ORG   ,
*
DL73     DC    CL133' '
         ORG   DL73+76
         DC    C'*        = PRIME VOLUME'
         ORG   ,
*
DL74     DC    CL133' '
         ORG   DL74+76
         DC    C' *       = EXTENT INFO OUT OF SYNC'
         ORG   ,
*
DL75     DC    CL133' '
         ORG   DL75+76
         DC    C'  *      = OVERFLOW VOLUME'
         ORG   ,
*
DL76     DC    CL133' '
         ORG   DL76+76
         DC    C'   ***** = RESERVED'
         ORG   ,
*
DL77     DC    CL133' '
         ORG   DL77+9
         DC    C'VVRHKRBA = X'
DL77HKRB DS    CL26
         DC    C'  VVRHURBA = X'
DL77HURB DS    CL26
         DC    C'  VVRHARBA = X'
DL77HARB DS    CL26
         ORG   ,
*
DL78     DC    CL133' '
         ORG   DL78+9
         DC    C'VVRBLKSZ = X'
DL78BKSZ DS    CL26
         DC    C'  VVRBLKTK = X'
DL78BKTK DS    CL15
         DC    C'  VVRTRKAU = X'
DL78TKAU DS    CL15
         ORG   ,
*
DL79     DC    CL133' '
         ORG   DL79+9
         DC    C'VVRTPEXT = B'
DL79TPXT DS    CL10
         DC    C'  VVRTKCYL = X'
DL79TKCY DS    CL15
         DC    C'  VVRBYTTK = X'
DL79BYTK DS    CL26
         ORG   ,
*
DL80     DC    CL133' '
         ORG   DL80+22
         DC    C'*        = SEQUENCE SET WITH DATA'
         ORG   ,
*
DL81     DC    CL133' '
         ORG   DL81+22
         DC    C' *       = EXTENTS NOT PREFORMATTED'
         ORG   ,
*
DL82     DC    CL133' '
         ORG   DL82+22
         DC    C'  *      = CONVERTED VSAM BY VOLUME'
         ORG   ,
*
DL83     DC    CL133' '
         ORG   DL83+22
         DC    C'   ***** = RESERVED'
         ORG   ,
*
DL84     DC    CL133' '
         ORG   DL84+9
         DC    C'VVRBYTAU = X'
DL84BYAU DS    CL26
         ORG   ,
*
DL85     DC    CL133' '
         ORG   DL85+9
         DC    C'VVRLOKYL = X'
         DC    AL1(APOST)
DL85LOKL DS    CL4
         DC    AL1(APOST)
         DC    C' '
DL85XTLT DS    CL4
         DC    C'  VVRLOKYV = X'
         DC    AL1(APOST)
DL85LOKV DS    CL81
         ORG   ,
*
DL86     DC    CL133' '
         ORG   DL86+9
         DC    C'         = '
DL86LOKL DS    CL7
         DC    C' '
DL86CTLT DS    CL4
         DC    C'           = C'
         DC    AL1(APOST)
DL86LOKV DS    CL81
         ORG   ,
*
DL87     DC    CL133' '
         ORG   DL87+9
         DC    C'VVRHIKYL = X'
         DC    AL1(APOST)
DL87HIKL DS    CL4
         DC    AL1(APOST)
         DC    C' '
DL87XTLT DS    CL4
         DC    C'  VVRHIKYV = X'
         DC    AL1(APOST)
DL87HIKV DS    CL81
         ORG   ,
*
DL88     DC    CL133' '
         ORG   DL88+9
         DC    C'         = '
DL88HIKL DS    CL7
         DC    C' '
DL88CTLT DS    CL4
         DC    C'           = C'
         DC    AL1(APOST)
DL88HIKV DS    CL81
         ORG   ,
*
DL89     DC    CL133' '
         ORG   DL89+9
         DC    C'VVRXTNTL = X'
DL89XTL  DS    CL15
         DC    C' DIVIDED BY 20 FOR NUMBER OF EXTENTS ='
DL89XTN  DS    CL4
         ORG   ,
*
DL90     DC    CL133' '
         ORG   DL90+9
         DC    C'VVRXSEQN = X'
DL90XSQN DS    CL15
         DC    C'  VVRXSC   = X'
DL90XSC  DS    CL15
         DC    C'  VVRXSH   = X'
DL90XSH  DS    CL15
         ORG   ,
*
DL91     DC    CL133' '
         ORG   DL91+38
         DC    C'VVRXEC   = X'
DL91XEC  DS    CL15
         DC    C'  VVRXEH   = X'
DL91XEH  DS    CL15
         DC    C'  VVRXNTRK = X'
DL91XNTR DS    CL15
         ORG   ,
*
DL92     DC    CL133' '
         ORG   DL92+38
         DC    C'VVRXSRBA = X'
DL92XSRB DS    CL26
         DC    C'  VVRXERBA = X'
DL92XERB DS    CL26
         ORG   ,
*
         TITLE 'WORK AREAS - DSECTS'
DSE9     DSECT                PRIMARY HEADER CELL
*                        ALSO SECONDARY HEADER CELL (DSD8)
VVRLEN   DS    XL2            LENGTH OF ENTIRE VVR
VVRHDLEN DS    XL2            LENGHT OF PRIMARY/SECONDARY HEADER CELL
VVRTYPE  DS    X              C'Z' PRIMARY OR C'Q' SECONDARY
VVRFLAG  DS    X              HEADER FLAG
*              1... ....      RESERVED
*              .1.. ....      SELF DESCRIBING VVR
*              ..1. ....      CATALOG SELF DESCRIBING VVR
*              ...1 ....      RESERVED
*              .... 1...      COMPONENT TYPE 'D' DATA
*              .... 0...      COMPONENT TYPE 'I' INDEX
*              .... .111      RESERVED
VVRKRQ   DS    XL4            KEY RANGE QUALIFIER
VVRCMPNL DS    X              COMPONENT NAME LENGTH
VVRCMPNM DS    X              1ST BYTE OF COMPONENT NAME
*                             FOLLOWS COMPONENT NAME
VVRKEYL  DS    X              KEY LENGTH            *** OFFSET INVALID
VVRKEY   DS    X              KEY (CL NAME + PAD)   *** OFFSET INVALID
*                             FOLLOWS KEY
VVRCATNL DS    X              CATALOG NAME LENGTH   *** OFFSET INVALID
VVRCATNM DS    X              CATALOG NAME          *** OFFSET INVALID
*                             FOLLOWS CATALOG NAME
VVRBSENL DS    X              ENTRY NAME LENGTH     *** OFFSET INVALID
VVRBSENM DS    X              ENTRY NAME            *** OFFSET INVALID
         EJECT
DS21     DSECT                DATA SET INFORMATION CELL
VVRDSLEN DS    XL2            DATA SET CELL LENGTH
VVRDSTYP DS    X              X'21'
VVRATTR1 DS    X              DATA SET ATTRIBUTES
*              1... ....      SPEED
*              .1.. ....      UNIQUE
*              ..1. ....      REUSABLE
*              ...1 ....      ERASE
*              .... 1...      RESERVED
*              .... .1..      INHIBIT UPDATE
*              .... ..1.      TEMPORARY EXPORT
*              .... ...1      TRACK OVERFLOW
VVRATTR2 DS    X              SHARE ATTRIBUTES
*              11.. ....      REGIONAL SHARING ATTRIBUTES
*              ..11 ....      SYSTEM SHARING ATTRIBUTES
*              .... 11..      RESERVED
*              .... ..1.      INTERNAL SYSTEM DATA SET
*              .... ...1      COMPONENT IS NOT USABLE
VVROPIND DS    X              OPEN INIDCATOR
VVRBUFSZ DS    XL4            BUFFER SIZE
VVRPRISP DS    XL3            PRIMARY SPACE ALLOCATION
VVRSECSP DS    XL3            SECONDARY SPACE ALLOCATION
VVRSPCFG DS    X              SPACE FLAGS
*              11.. ....      SPACE OPTIONS
*              ..11 1111      RESERVED
VVRDSHU  DS    XL4            DATA SET HIGH USED      RBA
VVRDSHA  DS    XL4            DATA SET HIGH ALLOCATED RBA
VVRLRECL DS    XL4            AVERAGE LOGICAL RECORD LENGTH
         DS    XL2            RESERVED
VVREXCPX DS    CL8            EXCEPTION EXIT NAME
VVRDSHK  DS    XL4            DATA SET HIGH KEY RBA
VVRCLSFG DS    X              CLUSTER ATTRIBUTE FLAG
*              1111 ....      RESERVED
*              .... 1...      TIMESTAMPS EXIST IN THIS CELL
*              .... .1..      VERIFY IS REQUIRED
*              .... ..1.      CLUSTER DESCRIBES SWAPSPACE
*              .... ...1      CLUSTER DESCRIBES PAGESPACE
VVRAIXFG DS    X              AIX ATTRIBUTE FLAG
*              1... ....      UPGRADE AIX
*               111 1111      RESERVED
VVRTMSTP DS    XL8            TIMESTAMP (CAT ONLY)
VVRALTSP DS    XL8            ALIAS TABLE TIMESTAMP
         DS    XL24           RESERVED
*        WARNING:  TIMESTAMPS AND RESERVED MAY BE TRUNCATED2
*                  CHECK TIMESTAMP BIT IN VVRCLSFG
         EJECT
DS60     DSECT                AMSDB CELL
VVRAMDCN DS    XL2            LENGTH OF ENTIRE AMSDB CELL
VVRAMID  DS    X              X'60'
VVRAMATR DS    X              ATTRIBUTES
*              1... ....      KEY SEQUENCED
*              0... ....      ENTRY SEQUENCED
*              .1.. ....      WRITE CHECK
*              ..1. ....      SEQUENCE SET WITH DATA (IMBED)
*              ...1 ....      REPLICATE
*              .... 1...      USE VOLUMES IN LIST ORDER
*              .... .1..      KEY RANGE DATA SET
*              .... ..1.      RELATIVE RECORD DATA SET
*              .... ....      SPANNED RECORDS ALLOWED
VVRAMLEN DS    XL2            LENGTH OF AMDSB (VVRAMDCN - 2)
VVRAMNST DS    XL2            NUMBER OF ENTRIES IN INDEX SECTION
         ORG   VVRAMNST
VVRAMAKP DS    XL2            ALTERNATE KEY RKP
VVRAMRKP DS    XL2            RELATIVE KEY POSITION
VVRAMKLN DS    XL2            KEY LENGTH
VVRAMPCA DS    X              % FREE CI IN CA
VVRAMPCI DS    X              % FREE BYTES IN CI
VVRAMCCA DS    XL2            NUMBER OF CI'S PER CA
VVRAMFCA DS    XL2            FREE CI'S PER CA
VVRAMFCI DS    XL4            FREE BYTES PER CI
VVRAMCIV DS    XL4            CONTROL INTERVAL SIZE
VVRAMLCL DS    XL4            MAXIMUM RECORD SIZE
VVRAMHLR DS    XL4            RBA OF HIGH LEVEL INDEX RECORD
         ORG   VVRAMHLR
VVRAMSLT DS    XL4            RECORD SLOTS PER CI
VVRAMSSR DS    XL4            RBA OF FIRST SEQUENCE SET RECORD
         ORG   VVRAMSSR
VVRAMMRR DS    XL4            MAX RELATIVE RECORD NUMBER
VVRAMARD DS    XL4            POINTER TO FIRST ARDB
VVRAMAT3 DS    X              ATTRIBUTES
*              1... ....      NON-UNIQUE OR UNIQUE KEYS
*              .1.. ....      CYL FAULT MSS OR STAGE
*              ..1. ....      BIND OR DO NOT BIND ON MSS
*              ...1 ....      WAIT OR DO NOT WAIT ON RELINQUISH
*              .... 1...      LOAD MODE OR DATA SET LOADED
*              .... .111      RESERVED
VVRAMSNO DS    X              NUMBER OF CONCURRENT REQUESTS
VVRAMDUI DS    XL4            IMS DRCC USAGE INDICATOR
VVRAMBFI DS    XL2            NUMBER OF INDEX BUFFERS
         ORG   VVRAMBFI
VVRAMBFD DS    XL2            NUMBER OF DATA  BUFFERS
VVRAMSTS DS    XL8            SYSTEM TIME STAMP
VVRAMNIL DS    XL2            NUMBER OF INDEX LEVELS
VVRAMNXT DS    XL2            NUMBER OF EXTENTS
VVRAMNLR DS    XL4            NUMBER OF LOGICAL   RECORDS
VVRAMDLR DS    XL4            NUMBER OF DELETED   RECORDS
VVRAMINR DS    XL4            NUMBER OF INSERTED  RECORDS
VVRAMUPR DS    XL4            NUMBER OF UPDATED   RECORDS
VVRAMRTR DS    XL4            NUMBER OF RETRIEVED RECORDS
VVRAMASP DS    XL4            BYTES OF FREE SPACE IN DATA SET
VVRAMCIS DS    XL4            NUMBER OF CI SPLITS
VVRAMCAS DS    XL4            NUMBER OV CA SPLITS
VVRAMEXC DS    XL4            NUMBER OF EXCP'S
         EJECT
DS23     DSECT                VOLUME INFORMATION CELL
VVRVOLLN DS    XL2            LENGTH OF VOLUME CELL
VVRVOLTP DS    X              X'23'
VVRVOLFG DS    X              VOLUME FLAGS
*              1... ....      PRIME VOLUME
*              .1.. ....      EXTENT INFO OUT OF SYNC (BY DEFRAG)
*              ..1. ....      OVERFLOW VOLUME
*              ...1 1111      RESERVED
VVRNOEXT DS    X              NUMBER OF EXTENTS
VVRHKRBA DS    XL4            HIGH KEY RBA
VVRHURBA DS    XL4            HIGH USED RBA
VVRHARBA DS    XL4            HIGH ALLOCATED RBA
VVRBLKSZ DS    XL4            BLOCK SIZE
VVRBLKTK DS    XL2            BLOCKS PER TRACK
VVRTRKAU DS    XL2            TRACKS PER ALLOCATION UNIT
VVRTPEXT DS    X              EXTENT TYPE FLAG
*              1... ....      SEQUENCE SET WITH DATA
*              .1.. ....      EXTENTS NOT PREFORMATTED
*              ..1. ....      CONVERTED VSAM DATASET VOLUME
*              ...1 1111      RESERVED
VVRTKCYL DS    XL2            TRACKS PER CYLINDER
VVRBYTTK DS    XL4            BYTES PER TRACK
VVRBYTAU DS    XL4            BYTES PER ALLOCATION UNIT
VVRLOKYL DS    XL2            LOW KEY LENGTH
VVRLOKYV DS    X              LOW KEY
*                             FOLLOWS LOW KEY
VVRHIKYL DS    XL2            HIGH KEY LENGTH       *** OFFSET INVALID
VVRHYKYV DS    X              HIGH KEY              *** OFFSET INVALID
*                             FOLLOWS HIGH KEY
VVRXTNTL DS    XL2            LENGTH OF EXTENT SECT *** OFFSET INVALID
*                             VVRXTNTL/20 = NUMBER OF EXTENT ENTRIES
*                             EXTENT ENTRIES IMMEDIATELY FOLLOW
*                             THEY ARE MAPPED BY THE VVRX DSECT
         EJECT
VVRX     DSECT                EXTENT ENTRY
VVRXSEQN DS    XL2            SEQUENCE NUMBER
VVRXSC   DS    XL2            STARTING CC
VVRXSH   DS    XL2            STARTING HH
VVRXEC   DS    XL2            ENDING   CC
VVRXEH   DS    XL2            ENDING HH
VVRXNTRK DS    XL2            NUMBER OF TRACKS
VVRXSRBA DS    XL4            STARTING RBA
VVRXERBA DS    XL4            ENDING   RBA
         EJECT
VVCR     DSECT
VVCRLEN  DS    XL2
VVCNUMCI DS    XL2
VVCRRSV  DS    XL20
VVCATNMS DS    CL2016
VVCCISPC DS    XL2048
         EJECT
VVCATENT DSECT
VVCCATNM DS    CL44
VVCDTRBA DS    XL4
VVCIXRBA DS    XL4
VVCSSRBA DS    XL4
VVCATLN  EQU   *-VVCATENT
         END
