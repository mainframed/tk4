***********************************************************************
*                                                                     *
*  THIS SUBROUTINE ATTEMPTS TO READ A SINGLE RECORD FROM THE          *
*  FILE CURRENTLY ON THE BOTTOM OF THE INPUT STACK.                   *
*                                                                     *
***********************************************************************
         SPACE
*        ON EXIT -- CC = BPOS   IF RECORD READ
*                      = BOMIT  IF EOF
*                      = BNEG   IF EOF ALREADY
         SPACE
RDRECD  $ENTER ,
         SPACE
RREC01   DS    0H
         LM    RA,RB,FILNEXRC      LOAD ADDR NEXT RECORD AND EOB ADDR
         CR    RA,RB               IS THIS BLOCK FINISHED
         BL    RREC14              BRANCH IF IT IS NOT
         SPACE
RREC02   DS    0H
         NI    DDFLAG,255-DD$REISS CLEAR 'REISSUE DUE TO CONCAT' FLAG
         SPACE
        $IFOFF FILFLAG,FIL$BUFF,RREC28  BRANCH IF NO BUFFER AVAILABLE
         SPACE
         TM    DDFLAG,DD$EOF       EOF ALREADY ENCOUNTERED FOR THIS DCB
         BO    RREOF2              IF SO, DON'T BOTHER WITH A READ
         SPACE
         TM    DDFLAG,DD$RECFM     IS THE RECORD FORMAT ILLEGAL
         BO    RREC29              IF SO, HANDLE THE ERROR
         SPACE
        $IFOFF FILFLAG,FIL$FIND,RREC04  BRANCH IF NO FIND REQUIRED
         SPACE
        $OFF   FILFLAG,FIL$FIND    CLEAR 'ISSUE FIND' FLAG
         SPACE
         TM    DDDCB+DCBDSORG,DSORG$PO  DON'T ISSUE A FIND
         BNO   RREC04              FOR A SEQUENTIAL DATA SET
         FIND  DDDCB,FILTTRK,C     POINT TO CURRENT MEMBER
         SPACE
         L     RA,FILNOTE          ALSO POINT TO LAST RECORD
         LTR   RA,RA               PLUS ONE
         BZ    RREC04              DON'T POINT IF NO NOTE HAS BEEN DONE
         MVI   FILNOTE+3,X'01'     ADVANCE ONE RECORD
         POINT DDDCB,FILNOTE       POINT TO NEXT RECORD TO BE READ
         SPACE
RREC04   DS    0H
        $IFOFF FILFLAG,FIL$EJCT,RREC06  BRANCH IF NO PAGE EJECT
        $CALL  RDEJCT              EJECT CURRENT PAGE
         SPACE
RREC06   DS    0H
        $IFOFF FILFLAG,FIL$JIGG,RREC08  BRANCH IF NO JIGGLE REQUIRED
        $CALL  RDJIGG              JIGGLE TYPEBALL
         SPACE
RREC08   DS    0H
        $IFOFF FILFLAG,FIL$SUPR,RREC09  BRANCH IF NO SUPPRESSED
        $IFON  FILFLAG,FIL$CMS,RREC09  BRANCH IF A CMS TERMINAL
        $IFOFF FILFLAG,FIL$TSO,RREC09  BRANCH IF NOT A TSO TERMINAL
         TPUT  RRECBYP,L'RRECBYP,CONTROL  SUPPRESS IT
         SPACE
RREC09   DS    0H
         L     RB,FILBUFAD         GET ADDRESS OF THE BUFFER
         LA    RA,DDDCB            GET DCB ADDRESS
         READ  READDECB,SF,(RA),(RB),'S' READ ONE BLOCK
         SPACE
        $IFOFF FILFLAG,FIL$SUPR,RREC10  BRANCH IF NOT SUPPRESSED
        $IFON  FILFLAG,FIL$CMS,RREC10  BRANCH IF A CMS TERMINAL
        $IFOFF FILFLAG,FIL$TSO,RREC10  BRANCH IF NOT A TSO TERMINAL
         TPUT  RRECRES,L'RRECRES,CONTROL  ISSUE RESTORE
         SPACE
RREC10   DS    0H
         CHECK READDECB
         SPACE
         TM    DDFLAG,DD$REISS     WAS READ INTERCEPTED BECAUSE OF
*                             CONCATENATION OF UNLIKE DATA SETS...    *
         BO    RREC02              IF SO, REISSUE IT
         SPACE
         SR    R1,R1               ASSUME NO NOTE
         TM    DDDCB+DCBDEVT,X'40' A UNIT RECORD INPUT DEVICE .Q
         BO    RREC10A             BRANCH IF YES
         NOTE  DDDCB               NOTE POSITION OF BLOCK JUST READ
RREC10A  DS    0H
         ST    R1,FILNOTE          AND SAVE FOR FUTURE REF
         TM    DDDCB+DCBRECFM,X'C0' IS RECFM 'U' .Q
         BO    RREC11              BRANCH IF YES
         TM    DDDCB+DCBRECFM,X'40' IS RECFM 'V' .Q
         BO    RREC12              BRANCH IF YES
         L     RA,READDECB+16      COMPUTE END OF RECFM 'F' BLOCK
         LH    R1,DDDCB+DCBBLKSI   ADDR FROM RESIDUAL LENGTH
         SH    R1,14(,RA)          CSW, BLKSIZE IN DCB AND
         LR    RA,RB               ADDRESS OF NEXT RECORD
         AR    RB,R1               END OF BLOCK ADDRESS
         B     RREC13              AND SET THEM
RREC11   DS    0H
         LA    RA,2(,RB)           ADDR FIRST RECFM 'U' RECORD
         AH    RB,0(,RB)           ADDR OF END OF BLOCK
         B     RREC13              AND CONTINUE
         SPACE
RREC12   DS    0H
         LA    RA,4(,RB)           ADDR FIRST RECFM 'V' RECORD
         AH    RB,0(,RB)           AND ADDRESS OF END OF BLOCK
RREC13   DS    0H
         STM   RA,RB,FILNEXRC      SAVE IN FILBLOCK
         B     RREC01              GO BACK TO EXTRACT THE RECORD
         SPACE
RREC14   DS    0H
         L     RB,FILITEM          GET FILE RECORD NUMBER
         A     RB,F1               AND BUMP IT BY ONE
         ST    RB,FILITEM          PUT IT BACK
         SPACE
         CVD   RB,DWORD            CONVERT IT TO DECIMAL
         UNPK  FILNUMBR,DWORD+4(4) AND TAKE IT AS DECIMAL ITEM NO.
         OI    FILNUMBR+L'FILNUMBR-1,C'0'  CORRECT THE ZONE
        $IFANY FILFLAG,(FIL$AP,FIL$IM),RREC14A    BRANCH IF NOT REMOTE
         SPACE
         L     R15,FILRMEXT        REMOTE READ EXIT ADDRESS
         LTR   R15,R15             ANYTHING THERE .Q
         BZ    RRM01               BRANCH IF NOT
         LA    R1,FILBLOCK         POINT TO CURRENT FILE BLOCK
        $CALL  (R15)               LET HIM DO HIS WORST
         LTR   RA,R1               THE RETURN 'RMQR' POINTER
         BNZ   RRM02               CONTINUE IF RECORD RETURNED
         XC    FILRMEXT,FILRMEXT   CLEAR EXIT ADDRESS
         XC    FILBUFAD,FILBUFAD   NO NEXT ADDRESS
         B     RRM02               AND CONTINUE PROCESSING
         SPACE
RRM01    DS    0H
         L     RA,FILBUFAD         NEXT RECORD POINTER
RRM02    DS    0H
         USING RMQR,RA             DATA AREA FOR REMOTES
         LA    RA,0(,RA)           CLEAR TOP BYTE
         LTR   RA,RA               AT THE END .Q
         BZ    RRM03               BRANCH IF YES
         MVC   FILBUFAD,RMQRCHN    NEXT RECORD ADDR
         LH    RB,RMQRLEN          LENGTH OF DATA
         LA    RA,RMQRDATA         DATA POINTER
         DROP  RA
         XC    TATALEN(4),TATALEN  ZERO RESULT TARGET
         MVC   TATAAREA,BLANKS     BLANK TARGET
         S     RB,F1               LENGTH -1
         BM    RRM02A              BRANCH IF NOTHING
         EX    RB,RRECFMVC         MOVE RECORD TO TARGET
RRM02A   DS    0H
         A     RB,F1               RESTORE TRUE LENGTH
         B     RREC18              SET OUTPUT POINTER
         SPACE
RRM03    DS    0H
        $IFON  FILFLAG,FIL$END,RRM04    BRANCH IF 2ND TIME
        $ON    FILFLAG,FIL$END     SET FIRST TIME SWITCH
         TM    FILRMFLG,RMQKEEP    KEEP ENVIRONMENT .Q
         BO    RRM04               BRANCH IF YES
        $IFON  FILFLAG,FIL$SYRM,RRM04   BRANCH IF AUTO SYSTEM REMOTE
         MVC   RRRMBRS,PERIND      CONTROL WORD INDICATOR
         L     R1,INDEXS           ADDR CONTROL WORD TABLE
         MVC   RRRMBRS+1(2),=C'BR' ADD 'BR'  (SHOULD COME FROM CTLTAB)
         LA    RA,RRRMBRS          ADDRESS OF THE RESULT
         LA    RB,L'RRRMBRS        LENGTH OF THE RESULT
         B     RRM05               REMOTE READ END
         SPACE
RRM04    DS    0H
         SR    RB,RB               ZERO LENGTH RECORD
RRM05    DS    0H
         B     RREC14B             PASS BACK RESULT
         SPACE
RREC14A  DS    0H
         TM    DDDCB+DCBRECFM,X'C0' IS RECFM 'U' .Q
         BO    RREC19              BRANCH IF YES
         TM    DDDCB+DCBRECFM,X'40' IS RECFM 'V' .Q
         BO    RREC21              BRANCH IF YES
         LH    RB,DDDCB+DCBLRECL   LRECL OF RECFM 'F' FILE
         LR    R1,RB               TRANSFER
         LA    R1,0(R1,RA)         START OF NEXT
         ST    R1,FILNEXRC         SAVE RESULT
RREC14B  DS    0H
         XC    TATALEN(4),TATALEN  ZERO RESULT TARGET
        $IFON  FILFLAG,FIL$NONM,RREC16  BRANCH IF FILE NOT NUMBERED
         S     RB,F8               LESS END SEQUENCE
         BM    RREC14C             BRANCH IF NO WAY
         LA    R1,0(RA,RB)         POINT TO POTENTIAL SEQUENCE
         MVZ   ZERONUMR,0(R1)      GET EIGHT ZONES OF RECORD END
         CLC   ZERONUMR,=C'00000000' ARE THEY NUMERIC .Q
         BE    RREC15              BRANCH IF YES
RREC14C  DS    0H
        $ON    FILFLAG,FIL$NONM    SET NOT SEQUENCED
         A     RB,F8               RESTORE ACTUAL LENGTH
         B     RREC16              AND CONTINUE
RREC15   DS    0H
         MVC   FILNUMBR,0(R1)      SET SEQUENCE NUMBER
RREC16   DS    0H
         S     RB,F1               DECREMENT RECORD LENGTH
         BM    RREC17              BRANCH IF MINUS
         LA    R1,0(RA,RB)         POINT TO LAST CHARACTER
         CLI   0(R1),C' '          END WITH A BLANK .Q
         BE    RREC16              BRANCH BACK IF YES
         CLI   0(R1),X'16'         END WITH A BACKSPACE .Q
         BE    RREC16              BRANCH BACK IF YES
         EX    RB,RRECFMVC         MOVE RECORD TO TARGET
         B     RREC17A             GO TO RESTORE REAL LENGTH
RREC17   DS    0H
         MVC   TATAAREA,BLANKS     CLEAR RETURN DATA
        $IFON  FILFLAG,FIL$NULL,RREC17A BRANCH IF NULL RECORDS EOF
         A     RB,F1               PASS BACK SINGLE BLANK
RREC17A  DS    0H
         A     RB,F1               RESTORE ACTUAL RECORD LENGTH
RREC18   DS    0H
         A     RB,F4               ADD DUMMY RDW LENGTH
         STH   RB,TATALEN          SET RECORD LENGTH
         LA    RA,TATABLOK         POINT TO RESULT
         ST    RA,RECDADDR         POINT TO IT
         B     RREC26              AND EXIT
RRECFMVC MVC   TATAAREA(*-*),0(RA) MOVE FIXED RECORD
         SPACE
RREC19   DS    0H
         MVC   DWORD(4),0(RA)      ALIGN SEQUENCE NUMBER
         L     R1,DWORD            GET NUMBER
         CVD   R1,DWORD            CONVERT TO DECIMAL
         UNPK  FILNUMBR,DWORD+4(4) SPREAD IT OUT
         OI    FILNUMBR+L'FILNUMBR-1,C'0'  CORRECT THE ZONE
         XC    TATALEN(4),TATALEN  ZERO OUTPUT LENGTH
         MVC   TATAAREA,BLANKS     BLANK OUTPUT BLOCK
         SR    R1,R1               ZERO RECORD LENGTH
         IC    R1,4(,RA)           GET IN RECORD LENGTH
         LR    R0,R1               SAVE LENGTH FOR DEBLOCK CHECKING
         LA    R1,5(R1,RA)         POINT TO NEXT RECORD
         ST    R1,FILNEXRC         SAVE POINTER
         LTR   R0,R0               IS THIS A NULL RECORD .Q
         BP    RREC20              BRANCH IF YES
         LA    RB,1                MAKE IT ONE BLANK LONG
         STH   RB,TATALEN          SET NEW LENGTH
         B     RREC18              SET OUTPUT POINTER
         SPACE
RREC20   DS    0H
         IC    RB,5(,RA)           GET BLANK COUNT
         SRL   RB,4                DIVIDE BY SIXTEEN
         N     RB,F15              PURIFY THE RESULT
         AH    RB,TATALEN          PLUS EXISTING LENGTH
         STH   RB,TATALEN          UPDATE LENGTH
         IC    RB,5(,RA)           GET COUNT OF DATA
         N     RB,F15              PURIFY IT
         LA    R1,TATAAREA         POINT TO OUTPUT AREA
         AH    R1,TATALEN          PLUS CURRENT LENGTH
         S     RB,F1               GET LENGTH-1
         BM    *+8                 BRANCH IF ZERO
         EX    RB,SQSHMVC          ADD DATA PORTION
         A     RB,F1               RESTORE ACTUAL LENGTH
         SR    R0,RB               DECREMENT TOTAL
         S     R0,F1               LESS LENGTH BYTE
         LA    RA,1(RB,RA)         BUMP INPUT POINTER
         AH    RB,TATALEN          PLUS EXISTING LENGTH
         STH   RB,TATALEN          UPDATE RECORD LENGTH
         LTR   R0,R0               ANYTHING LEFT .Q
         BP    RREC20              LOOP BACK IF YES
         B     RREC18              SET OUTPUT POINTER
SQSHMVC  MVC   0(*-*,R1),6(RA)     MOVE DATA PORTION
         SPACE
RREC21   DS    0H
         MVC   DWORD(2),0(RA)      ALIGN RECORD LENGTH
         LH    RB,DWORD            GET LENGTH OF THE RCD (RDW INCL.)
         SPACE
        $IFON  FILFLAG,FIL$NONM,RREC25  BRANCH IF FILE NOT NUMBERED
         SPACE
         C     RB,F12              IS RECORD LONG ENOUGH TO HAVE NUMBER
         BL    RREC24              BRANCH IF NOT
         L     R1,DEFSEQC+TAB3DEF  GET POSSIBLE SEQUENCE COLUMN
         LTR   R1,R1               IS IT POSITIVE .Q
         BZ    RREC24              NO SEQUENCE POSSIBLE IF NOT
         SPACE
         LA    R1,4+7(,R1)         PLUS RDW AND SEQ LENGTH-1
         CR    R1,RB               COMPARE TO ACTUAL
         BNH   RREC22              BRANCH NOT GREATER
         LR    R1,RB               USE ACTUAL RECORD LENGTH
RREC22   DS    0H
         S     R1,F8               SEQUENCE START OFFSET
         AR    R1,RA               SEQUENCE START ADDR
         SPACE
         MVZ   ZERONUMR,0(R1)      GET FIRST EIGHT ZONES OF RECORD
         CLC   ZERONUMR,=C'00000000' ARE THEY NUMERIC .Q
         BNE   RREC24              IF NOT, FILE IS NOT LINE NUMBERED
         SPACE
         MVC   FILNUMBR,0(R1)      ASSUME FILE LINE NUMBERED
         LA    R0,0(RB,RA)         END OF SEQUENCED RECORD
         SR    R0,R1               LESS START OF SEQUENCE
         S     R0,F8               LESS SEQUENCE NUMBER
         BNP   RREC23              BRANCH IF NOTHING LEFT
         LR    R15,R0              TRANSFER LENGTH REMAINING
         BCTR  R15,0               LESS ONE
         EX    R15,SEQVMVC         MOVE OVER SEQUENCE FIELD
         SPACE
RREC23   DS    0H
         S     RB,F8               DECREMENT LENGTH
         STH   RB,DWORD+2          ALIGN NEW LENGTH
         MVC   0(2,RA),DWORD+2     PUT NEW LENGTH IN RIGHT PLACE
         B     RREC25              DON'T SET THE NONUM FLAG
SEQVMVC  MVC   0(*-*,R1),8(R1)     EXECUTED MOVE OVER SEQUENCE
         SPACE
RREC24   DS    0H
        $ON    FILFLAG,FIL$NONM    FILE NOT LINE NUMBERED
         SPACE
RREC25   DS    0H
         ST    RA,RECDADDR         SAVE ADDRESS OF THE NEW RECORD
         SPACE
         AH    RA,DWORD            ADD LENGTH TO STARTING ADDRESS
         ST    RA,FILNEXRC         TO GET NEXT RECORD ADDRESS
RREC26   DS    0H
         S     RB,F4               LESS RDW LENGTH
         CH    RB,DDDCB+DCBLRECL   IS RECORD TOO LONG .Q
         BH    RREC29A             IF SO, COMPLAIN AND QUIT
         SPACE
         LTR   RB,RB               IS THE RECORD A NULL ONE .Q
         BP    RREC27              BRANCH IF IT IS NOT
         BM    RREC29A             QUIT IF RECORD TOO SHORT
        $IFON  FILFLAG,FIL$NULL,RREOF2  BRANCH IF NULL RECORDS EOF
         SPACE
RREC27   DS    0H
         MVC   COMFILIT,FILITEM    COPY FILE LINE NUMBER
         MVC   COMFILNO,FILNUMBR   AND DECIMAL ITEM NUMBER
         SPACE
         B     RRET                GO TO SUCCESSFUL RETURN
         SPACE
RREC28   DS    0H
         MVI   EFLAG053,ERRSET     SET ERROR FLAG
        $CALL  RDERROR             CALL ERROR ROUTINE
         B     RREC30              AND CONTINUE
         SPACE
RREC29   DS    0H
         MVI   EFLAG054,ERRSET     SET ERROR FLAG
        $CALL  RDERROR             CALL ERROR ROUTINE
         B     RREC30              AND CONTINUE
         SPACE
RREC29A  DS    0H
         MVI   EFLAG055,ERRSET     SET ERROR FLAG
        $CALL  RDERROR             CALL ERROR ROUTINE
         SPACE
RREC30   DS    0H
         TM    DDDCB+DCBDSORG,DSORG$PS SEQUENTIAL...
         BZ    RREOF               IF NOT, SIGNAL EOF
        $IFON  SWITCHS,CMSWS,RREOF BRANCH IF CMS
         FEOV  DDDCB               ELSE GO ON TO NEXT PIECE
         B     RREC02              IF THERE IS ANY
         SPACE 2
*                                                                     *
*  THIS IS THE SYNAD ROUTINE                                          *
*                                                                     *
         SPACE
SYNAD    DS    0H
         SYNADAF ACSMETH=BSAM      GENERATE ERROR MESSAGE
         MVC   BUFF2(78),50(R1)    COPY THE MESSAGE
         LA    R0,78               LENGTH OF SAME
         STH   R0,BUFF2LGZ         SET LENGTH OF SYNAD DATA
         SYNADRLS
         SPACE
         MVI   EFLAG056,ERRSET     SET ERROR FLAG
        $CALL  RDERROR             PRINT AN ERROR MESSAGE
         B     RREOF               PRETEND THAT IT IS END OF FILE
         SPACE
RREOF    DS    0H
        $CC    OMIT                END OF FILE
         B     RRET01              GO TO RETURN
RREOF2   DS    0H
        $CC    NEG                 SECOND END OF FILE
         B     RRET01              GO TO RETURN
RRET     DS    0H
        $CC    POS                 RECORD FOUND SUCCESSFULLY
RRET01   DS    0H
        $EXIT  RC=0                RETURN TO CALLER
         SPACE
RRECBYP  DC    AL1(CPRTBYP)        SUPPRESS CONSOLE PRINTING
RRECRES  DC    AL1(CPRTRES)        RESTORE CONSOLE PRINTING
