***********************************************************************
*                                                                     *
*        INTERNAL ROUTINE 'FNSAVE' --- QUEUE FORMATTED FOOTNOTE LINE  *
*        FOR PRINTING AT END OF PAGE                                  *
*                                                                     *
***********************************************************************
         SPACE
*        ON ENTRY - R0       -> RDW OF BUFFER TO BE OUTPUT
*                 - RETURN   -> RETURN ADDRESS
         SPACE
FNSAVE  $ENTER ,
         L     X1,ICORANCH         ADDRESS OF LINE CONTROL
         LTR   X1,X1               IS IT VALID .Q
         BNP   ABFNS03             ERROR IF NOT
        $IFON  SWITCHS,OOSWS,FNS02 BRANCH IF DISABLED
         L     R1,OOANCH           OUTPUT OVERLAY ANCHOR
         LTR   R1,R1               ANYTHING PRESENT .Q
         BZ    FNS01               BRANCH IF NOTHING
        $CALL  OOPRT               PROCESS OUTPUT OVERLAY
FNS01    DS    0H
         L     R1,BXPTR            BOX BUILDING POINTER
         LTR   R1,R1               ANYTHING TO PRINT
         BZ    FNS02               BRANCH IF NOT
        $CALL  BXVERT              INCORPORATE VERTICAL SIDES OF BOX
         SPACE
FNS02    DS    0H
         USING CPFKFN,X1           ELSE TELL THE ASSEMBLER
         L     R1,CPFKFNC          CURRENT BUFFERED LINE COUNT
         C     R1,DEFFNSIZ+TAB3DEF COMPARE WITH MAX ALLOWED
         BNL   FNS05               FORGET IT IF TOO MANY
         LR    X2,R0               ADDR OF RECORD TO SAVE
         SR    R1,R1               ZERO WORK REGISTER
         IC    R1,1(,X2)           LENGTH OF RECORD WITH RDW
         L     TEMP,DEFLNUM+TAB3DEF  GET LINENUMBER COLUMN
         LTR   TEMP,TEMP           IS IT PRESENT .Q
         BZ    FNS04               BRANCH IF NOT
         LA    TEMP,4+4(,TEMP)     PLUS LENGTH OF RDW AND EDIT PATTERN
        $IFON  TTYPE,TONLINE,FNS03 BRANCH IF ONLINE
         LA    TEMP,1(,TEMP)       PLUS LENGTH OF CARRIAGE CONT
FNS03    DS    0H
         CR    TEMP,R1             ALREADY LONG ENOUGH .Q
         BNH   FNS04               BRANCH IF YES
         LR    R1,TEMP             NEW LENGTH
         STC   R1,1(,X2)           CHANGE THE RDW
FNS04    DS    0H
         LA    R1,FNQOVHD(,R1)     PLUS PREFIX OVERHEAD
        $CALL  GETCELL             GET A QUEUE BUFFER
         BC    BPOS,FNS06          BRANCH IF SUCCESS
         MVI   EFLAG024,ERRSET     NO STORAGE FOR NEW LINE
        $CALL  ERROUT              PRINT MESSAGE BEFORE CONTINUING
FNS05    DS    0H
         SR    R1,R1               CLEAR INDEX REGISTER
         IC    R1,ICORFLG          GET TYPE OF OPERATION
         LA    R1,FNSERTXT(R1)     POINT TO COMMAND
         ST    R1,ERRTEXT          SET EXTRA TEXT ADDRESS
         MVI   ERRTEXT,L'FNSERTXT  SET EXTRA TEXT LENGTH
         MVI   EFLAG034,ERRSET     SET ERROR MESSAGE
         B     FNS13               AND GO TO RETURN
         SPACE
FNSERTXT DC    C'.XX.'             DON'T KNOW
         DC    C'.CC.'             CONDITIONAL COLUMN
         DC    C'.CP.'             CONDITIONAL PAGE
         DC    C'.FB.'             FLOATING BLOCK
         DC    C'.FK.'             FLOATING KEEP
         DC    C'.FN.'             FOOTNOTE
         DC    C'.HN.'             HEADNOTE
         DC    C'.HN.'             HEADNOTE EVEN
         DC    C'.HN.'             HEADNOTE ODD
         DC    C'.XX.'             DON'T KNOW
         SPACE
FNS06    DS    0H
         LA    X2,CPFKFNA-FNQFCHN+FNQELEM    PRIME USED LOOP
         USING FNQELEM,X2          FOR LAST ELEMENT SEARCH
         SPACE
FNS07    DS    0H
         L     R1,FNQFCHN          CHAIN TO NEXT USED CELL
         LA    R1,0(,R1)           CLEAR HIGH BYTE
         LTR   R1,R1               AT THE END .Q
         BZ    FNS08               IF YES, WE'RE DONE LOOKING
         LR    X2,R1               NO, CHAIN TO NEXT
         B     FNS07               AND TRY AGAIN
         SPACE
FNS08    DS    0H
         ST    TEMP,FNQFCHN        LINK NEW ONE IN AT END
         DROP  X2
         USING FNQELEM,TEMP        PASSED BACK FROM GETCELL
         XC    FNQELEM(FNQLN),FNQELEM   CLEAR PREFIX INFORMATION
         LR    X2,R0               ADDR OF RECORD TO BE SAVED
         SR    R1,R1               ZERO WORK REG
         IC    R1,1(,X2)           GET LENGTH OF RECORD
         STH   R1,FNQRDW           SAVE LENGTH OF RECORD
         S     R1,F5               LESS RDW AND SS TYPE LENGTH
         BM    ABFNS04             TROUBLE IF NEGATIVE
         EX    R1,FNSMVC           COPY TO QUEUE BUFFER
         SPACE
        $IFOFF SWITCHS,TRSWS,FNS10 BRANCH IF NO TRANSLATE
        $IFON  SWITCHS,TRSUP,FNS10 BRANCH IF SUPPRESSED TRANSLATE
         LA    X2,FNQTEXT          OUTPUT LINE TO TRANSLATE
        $IFON  TTYPE,TONLINE,FNS09 BRANCH IF ONLINE
         LA    X2,FNQTEXT+1        POINT OVER CARRIAGE CONTROL
         S     R1,F1               LESS CARRIAGE CONTROL LENGTH
         BM    ABFNS04             ERROR IF NO DATA TO SAVE
FNS09    DS    0H
         L     COUNT,TRANADO       POINT TO OUTPUT TRANSLATE TABLE
         EX    R1,FNSTR            TRANSLATE FOOTNOTE LINE
         SPACE
FNS10    DS    0H
        $OFF   SWITCHS,TRSUP       RESET TRANSLATE SUPPRESS
         MVC   FNQCORSW,ICORFLG    RETAIN TYPE OF RECORD
        $MVC   FNQSKSP,SKSPFLG     RETAIN TYPE IF SKIP/SPACE
         L     R1,MCFNQAD          GET ORIGINAL INCORE POINTER
         LTR   R1,R1               DOES IT EXIST .Q
         BZ    FNS11               BRANCH IF NOT
         MVC   FNQELEM+4(FNQOVHD-4),4(R1)    RETAIN ORIGINAL DESCRIPT
         XC    MCFNQAD,MCFNQAD     CLEAR POINTER
         SPACE
FNS11    DS    0H
        $IFON  SWITCHS,FOVLY,FNS12 DON'T UPDATE COUNT IF OVERLAY
         L     R1,CPFKFNC          CURRENT BUFFERED LINE COUNT
         LA    R1,1(,R1)           BUMP BY ONE
         ST    R1,CPFKFNC          UPDATE BUFFERED LINE COUNT
         B     FNS13               AND GO TO RETURN
FNS12    DS    0H
        $ON    FNQFLAG,FNQOVLY     SET THIS AS AN OVERLAY LINE
         SPACE
FNS13    DS    0H
         MVC   BLNKDATA,BLANKS     BLANK DUMMY BLANK LINE FOR SPACING
         LA    R0,BLNKRDWL         THIS IS ITS LENGTH
         STH   R0,BLNKLINE         SET LENGTH OF BLANK LINE
        $RESTOR ,                  RESTORE CALLER'S REGISTERS
         BR    RETURN              BACK TO CALLER
         SPACE
FNSMVC   MVC   FNQTEXT(*-*),4(X2)  COPIES FORMATTED FOOTNOTE LINE
FNSTR    TR    0(*-*,X2),0(COUNT)  TRANSLATES FORMATTED FOOTNOTE LINE
         DROP  TEMP,X1
         SPACE
ABFNS03  DS    0H                  WHY ARE WE HERE .Q
ABFNS04  DS    0H                  SAVING NULL FOOTNOTE RECORD
        $LOGERR 1002
