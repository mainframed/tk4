***********************************************************************
*                                                                     *
*                             MERGE                                   *
*                                                                     *
*              MERGE NEW INPUT LINE WITH RESIDUAL LINE AND PROCESS    *
*              TAB STOPS. A COUNT OF INTER-WORD SPACES IS MAINTAINED. *
*              IF THE COMBINED LINE EXTENDS BEYOND THE RIGHT MARGIN,  *
*              THE LINE IS DIVIDED INTO TWO PIECES AT THE PRECEEDING  *
*              INTER-WORD SPACE.                                      *
*                                                                     *
*        REGISTER USAGE:                                              *
*                                                                     *
*        P     POINTER TO CURRENT LINK BLOCK                          *
*        POLD  TEMPORARY POINTER TO END OF RESIDUE STRING             *
*        PNEW  TEMPORARY POINTER TO START OF NEW STRING               *
*        B     LINK BLOCK COUNTER                                     *
*        R0    TEMPORARY BLOCK COUNT CALCULATIONS                     *
*        W     INTER-WORD SPACE COUNTER                               *
*        L     BOOLEAN NON-BLANK FOUND INDICATOR (L=0×1) (NOW WRKL)   *
*        C     CHARACTER (COLUMN) COUNTER                             *
*        M     MULTIPLIER                                             *
*        TABS  TAB TABLE POINTER                                      *
*                                                                     *
***********************************************************************
         SPACE
MERGE   $ENTER ,
         SPACE
         USING FOPMLIST,R1
         USING LINKELEM,P
         CLC   NEWCOUNT,F0         ANYTHING IN NEW STRING .Q
         BE    MERET               NO, NOTHING TO MERGE
         XC    WRKL,WRKL           CLEAR BLANK FOUND SWITCH
         SR    M,M                 CLEAR HIGH ORDER BYTE FOR MULTIPLIER
         SR    B,B                 SET BLOCK COUNTER = 0
         L     P,NEWFIRST          SET POINTER TO FIRST LINK BLOCK
         L     W,FOIWSPC           GET INTER-WORD SPACES COUNT
         L     R0,FOPCOUNT         LENGTH OF OLD CHAR STRING
         CH    R0,FOFUNCNT         OFFSET/UNDENT MARGIN .Q
         BNH   MERG01              BRANCH IF YES
         LA    W,1(,W)             INDICATE EXTRA BLANK ADDED TO MERGE
MERG01   DS    0H
         L     C,FONOCHAR          GET CHARACTER COUNT
         LTR   R0,R0               IS OLD STRING EMPTY .Q
         BP    MERG03              BRANCH IF NOT
         CLI   LINKCHAR,X'40'      CHARACTER BLANK .Q
         BE    MERG02              BRANCH IF YES
         LA    R0,WRKOSTR          POINT AT STRING TO INSERT
        $CALL  FOADD               ADD THE EXTRA BLANK
         L     R0,NEWCOUNT         NUMBER OF LINK BLOCKS
         A     R0,WRKPLIST+4       PLUS NUMBER ADDED
         ST    R0,NEWCOUNT         NEW NUMBER OF LINK BLOCKS
         MVC   WRKNX,NEWFIRST      SAVE LOCATION OF FIRST LINK
         BAL   RETURN,LINK
         L     P,WRKFLN            NEW FIRST LINK
         MVC   NEWFIRST,WRKFLN     SET NEW FIRST LINK
MERG02   DS    0H
         SR    W,W                 SET INTER WORD SPACE TO ZERO
         BCTR  W,0                 AND THEN TO MINUS ONE
         LR    C,W                 -1 TO ADJUST FOR LEADING BLANK
         IC    M,LINKMULT          GET MULTIPLIER FROM LEADING BLANK
         AH    M,FOIND             ADD INDENTATION FACTOR
         STC   M,LINKMULT          ..
         MVC   FOPFIRST,NEWFIRST   INITIALIZE START OF RESULTANT STRING
         B     FCH                 BRANCH FORWARD
         SPACE
MERG03   DS    0H
         L     POLD,FOPFIRST       LOCATION OF LAST LINK
         USING LOLDELEM,POLD       AND TELL THE ASSEMBLER
         CLI   LOLDCHAR,C' '       LAST CHARACTER A BLANK .Q
         BE    MERG04              BRANCH IF YES
         DROP  POLD
         LA    R0,WRKOSTR          POINT AT STRING TO INSERT
        $CALL  FOADD               ADD THE EXTRA BLANK
         L     R0,FOPCOUNT         NUMBER OF OLD LINK BLOCKS
         A     R0,WRKPLIST+4       PLUS NUMBER ADDED
         ST    R0,FOPCOUNT         NEW NUMBER OF OLD BLOCKS
         MVC   WRKNX,FOPFIRST      SAVE LOCATION OF FIRST OLD BLOCK
         L     P,FOPFIRST          POINT TO THE OLD
         BAL   RETURN,LINK
         L     P,NEWFIRST          NEW FIRST LINK
         MVC   FOPFIRST,WRKFLN     SET NEW OLD FIRST LINK
MERG04   DS    0H
         L     PNEW,NEWFIRST       GET MERGE POINTS
         L     POLD,FOPLAST        ..
         USING LOLDELEM,POLD       USE THE OLD POINTER
         OC    LOLDBACK,LOLDBACK   ANY FORMER CHARACTER .Q
         BZ    DBLBNO              NOT FULL STOP IF NOT
         BAL   RETURN,DBLFSTOP     FULL STOP CHARACTER .Q
         BE    DBLBLK              BRANCH IF YES
         CLI   LOLDCHAR,C')'       END WITH RIGHT PAREN .Q
         BE    MERG05              YES, MAYBE STILL FULL STOP
         CLI   LOLDCHAR,C'"'       END WITH DOUBLE QUOTE .Q
         BE    MERG05              YES, MAYBE STILL FULL STOP
         B     DBLBNO              NOT FULL STOP
MERG05   DS    0H
         L     POLD,LOLDBACK       BACKWARDS POINTER
         BAL   RETURN,DBLFSTOP     FULL STOP CHARACTER BEFORE .Q
         L     POLD,FOPLAST        RESTORE FORMER END OF CHAIN
         BE    DBLBLK              THIS IS ALSO A FULL STOP
         B     DBLBNO              NOT FULL STOP
         SPACE
DBLFSTOP DS    0H
         CLI   LOLDCHAR,C'.'       ENDS WITH A PERIOD .Q
         BE    DBLFSUC             BRANCH IF YES
         CLI   LOLDCHAR,C'?'       ENDS WITH QUESTION .Q
         BE    DBLFSUC             BRANCH IF YES
         CLI   LOLDCHAR,C'!'       ENDS WITH EXCLAMATION .Q
         BE    DBLFSUC             BRANCH IF YES
         CLI   LOLDCHAR,C':'       ENDS WITH A COLON .Q
         BE    DBLFSUC             BRANCH IF YES
        $CC    NEG                 SET NOT EQUAL RETURN CODE
DBLFSUC  DS    0H
         BR    RETURN              RETURN TO CALLER
         SPACE
DBLBLK   DS    0H
         LA    R0,WRKOSTR          POINT AT BLANK STRING TO INSERT
        $CALL  FOADD               ADD THE EXTRA BLANK
         L     POLD,FOPLAST        FORMER END OF CHAIN
         MVC   LOLDFOR,WRKFLN      ADDRESS FORWARD TO BLANK
         L     POLD,WRKFLN         NEW END OF CHAIN
         MVC   LOLDBACK,FOPLAST    ALTER BACKWARD CHAIN
         ST    POLD,FOPLAST        AND REMEMBER THE NEW END
         LR    P,POLD              CURRENT BECOMES THE NEW ENTRY
         L     R0,NEWCOUNT         CURRENT NUMBER OF LINK BLOCKS
         A     R0,F1               BUMP BY ONE
         ST    R0,NEWCOUNT         UPDATE NUMBER BY ONE
         USING LNEWELEM,PNEW
DBLBNO   DS    0H
         MVC   LNEWBACK,FOPLAST    LINK BACKWARDS
         DROP  PNEW
         MVC   LOLDFOR,NEWFIRST    LINK FORWARD
         CLI   LOLDCHAR,HYUCHAR    USER HYPHEN CHARACTER .Q
         BNE   UNLINK05            NO, DON'T UNLINK IT
         SPACE
         BCTR  C,0                 DECREMENT CHARACTER COUNT
         OC    WRKBRK,WRKBRK       FIRST TIME IN LINE .Q
         BNZ   UNLINK00            BRANCH IF NOT
         LTR   W,W                 FIRST WORD IN LINE .Q
         BM    UNLINK01            BRANCH IF NOT
UNLINK00 DS    0H
         BCTR  W,0                 DECREMENT INTER-WORD SPACE
UNLINK01 DS    0H
         MVC   WRKBRK,LOLDBACK     SET USER BREAK CHARACTER
         CLI   LINKCHAR,C' '       USER HYPHEN FOLLOWED BY BLANK .Q
         BNE   UNLINK02            BRANCH IF NOT
         L     P,LINKFOR           POINT TO NEXT CHAR
         L     R0,NEWCOUNT         NEW CHARACTER COUNT
         BCTR  R0,0                LESS ONE
         ST    R0,NEWCOUNT         SET NEW CHARACTER COUNT
UNLINK02 DS    0H
         L     R0,FOPCOUNT         OLD CHARACTER COUNT
         BCTR  R0,0                LESS ONE
         ST    R0,FOPCOUNT         SET OLD CHARACTER COUNT
         L     POLD,LOLDBACK       BREAK CHARACTER POINTER
         L     R15,LOLDFOR         FIRST LINK TO FREE CHAIN
         ST    P,LOLDFOR           SET NEW FORWARD POINTER
         ST    POLD,LINKBACK       SET BACKWARD POINTER
         SPACE
UNLINK03 DS    0H
         LA    PNEW,0(,R15)        POINT TO CHARACTER
         USING LNEWELEM,PNEW       TELL THE ASSEMBLER
         CR    PNEW,P              AT THE END .Q
         BE    UNLINK05            BRANCH OUT IF YES
         SPACE
         L     POLD,LKSTAR         START OF FREE LIST
         MVC   LNEWBACK,LOLDBACK   POINT BACK TO START
         ST    PNEW,LOLDBACK       BACK POINT TO NEW ENTRY
         L     R15,LNEWFOR         REMEMBER FORWARD CHAIN PTR
         MVC   LNEWFOR,LKSTAR      NEW TO OLD FIRST
         ST    PNEW,LKSTAR         NEW START OF FREE LIST
         L     R0,LKSIZE           NUMBER OF FREE CHARACTER BLOCKS
         A     R0,F1               PLUS ONE
         ST    R0,LKSIZE           NEW NUMBER OF FREE BLOCKS
UNLINK04 DS    0H
         L     PNEW,LNEWDOWN       DOWNWARD POINTER
         LTR   PNEW,PNEW           ANY DOWN CHARS .Q
         BZ    UNLINK03            BRANCH BACK IF NOT
         SPACE
         L     POLD,LKSTAR         START OF FREE LIST
         MVC   LNEWBACK,LOLDBACK   POINT BACK TO START
         ST    PNEW,LOLDBACK       BACK POINTER TO NEW ENTRY
         MVC   LNEWFOR,LKSTAR      NEW TO OLD FIRST
         ST    PNEW,LKSTAR         NEW START OF FREE LIST
         L     R0,LKSIZE           NUMBER OF FREE CHARACTER BLOCKS
         A     R0,F1               PLUS ONE
         ST    R0,LKSIZE           NEW NUMBER OF FREE BLOCKS
         B     UNLINK04            DO ALL DOWN CHARACTERS
         DROP  PNEW
         DROP  POLD
         SPACE
UNLINK05 DS    0H
         B     FCH                 BRANCH FORWARD
         SPACE
BCH      DS    0H
         LTR   R0,C                FIRST TIME IN .Q
         BNP   BCH02               BRANCH IF YES
         BCTR  R0,0                COLUMN NUMBER LESS ONE
         SH    R0,FOFUNCNT         OFFSET/UNDENT PREVENT SPACE HERE
         SH    R0,FOIND            LESS INDENT FACTOR
         BP    BCH01               BRANCH IF PLUS
         MVI   WRKL+3,X'00'        KILL WORD COUNT VALUE
         B     BCH02               AND CONTINUE
BCH01    DS    0H
         XC    FOFUNCNT,FOFUNCNT   REMOVE OFFSET/UNDENT MARGIN
BCH02    DS    0H
         A     W,WRKL              INCREMENT WORD # BY L (L=0×1)
         MVI   WRKL+3,X'00'        RESET BLANK FOUND SWITCH
NCH      DS    0H
         OC    LINKFOR,LINKFOR     IS THIS LAST POINTER .Q
         BZ    SETLAST             YES
         L     P,LINKFOR           NO, ADVANCE POINTER
FCH      DS    0H
         CLI   LINKCHAR,X'05'      IS CHARACTER A TAB .Q
         BNE   NOTTAB              NO, NO TABS TO EXPAND
        $CALL  TABIT               EXPAND USER'S TABS
         BC    BNEG,NOTTAB         BRANCH IF TAB NOT FOUND
         SR    W,W                 CLEAR INTER WORD COUNT
         ST    W,WRKL              RESET IWSPC SWITCH
         BCTR  W,0                 SET TO MINUS ONE
         SPACE
NOTTAB   DS    0H
         LA    B,1(,B)             INCREMENT LINK BLOCK COUNTER
         IC    M,LINKMULT          GET MULTIPLIER
         AR    C,M                 UPDATE COLUMN NUMBER
         CLI   LINKCHAR,C' '       IS CHARACTER A BLANK .Q
         BE    BCH                 YES
         LA    R0,HYUSER           USER HYPHEN CODE
         C     R0,HYLEVEL          IS IT IN EFFECT .Q
         BNE   NODWN1              BRANCH IF NOT
         L     POLD,LINKDOWN       GET DOWNWARD POINTER
         USING LOLDELEM,POLD
         LTR   POLD,POLD           ANY OVERSTRIKE CHARS .Q
         BZ    NODWN               BRANCH IF NOT
         IC    R0,LOLDCHAR         SAVE CHARACTER
         CLI   LOLDCHAR,HYACHAR    AN ACTUAL HYPHEN .Q
         BE    FLIP                BRANCH IF YES
         CLI   LOLDCHAR,HYUCHAR    A USER HYPHEN .Q
         BNE   NODWN               BRANCH IF NOT
FLIP     DS    0H
         MVC   LOLDCHAR,LINKCHAR   SET NEW DOWN CHARACTER
         STC   R0,LINKCHAR         ENTER HYPHEN
         DROP  POLD
NODWN    DS    0H
         CLI   LINKCHAR,HYACHAR    IS CHARACTER A HYPHEN .Q
         BNE   NODWN1              BRANCH IF NOT
         L     PNEW,LINKFOR        FORWARD CHARACTER POINTER
         USING LNEWELEM,PNEW       AND TELL THE ASSEMBLER
         LTR   PNEW,PNEW           ANYTHING FORWARD .Q
         BZ    NODWN1              BRANCH IF NOT
         CLI   LNEWCHAR,C'A'-C' '  FORWARD LESS THAN LOWER 'A' .Q
         BL    NODWN1              YES, IGNORE THIS USER BREAK
         CLI   LNEWCHAR,C'Z'       GREATER THAN UPPER 'Z' .Q
         BH    NODWN1              YES, IGNORE THIS BREAK
         L     PNEW,LINKBACK       BACKWARD POINTER
         CLI   LNEWCHAR,C'A'-C' '  FORMER LESS THAN LOWER 'A' .Q
         BL    NODWN1              YES, IGNORE THIS BREAK
         CLI   LNEWCHAR,C'Z'       GREATER THAN UPPER 'Z' .Q
         BH    NODWN1              YES, IGNORE THIS BREAK
        $ON    WRKSW,WRKUHY        HYPHEN TWIXT TWO ALPHAS IS OK
         DROP  PNEW
         SPACE
NODWN1   DS    0H
         MVI   WRKL+3,X'01'        INDICATE A NON-BLANK FOUND
        $IFON  FOSWTCH,NFSWS,NCH   BRANCH IF IN NO FORMAT MODE
         SPACE
         L     R0,FOLL             GET CURRENT LINE LENGTH
         AH    R0,FOINDR           PLUS RIGHT INDENT VALUE
         CR    C,R0                EXCEEDED RIGHT MARGIN BOUNDARY .Q
         BNH   NCH                 NO
         LTR   W,W                 WERE ANY BLANKS FOUND .Q
         BNM   BACKUP              IF YES, GO BACKUP ONE WORD
         SPACE
        $IFON  WRKSW,WRKUHY,BACKUP IF USER HYPHENS, BACKUP TOO
         SPACE
*                                                                     *
*        (WHEN ONE- OR TWO-WORD LINE OVERFLOWS, SECOND                *
*        OVERFLOW CHARACTER APPEARS AS PADDING ON NEXT LINE.          *
*        THIS CODE CAUSES A "-" AND A " " TO BE INSERTED IN           *
*        THE LINE)                                                    *
*                                                                     *
         SPACE
         IC    M,LINKMULT          LENGTH OF SECOND LAST CHAR TO CHOP
         SR    C,M                 BACKUP NEW LENGTH
         L     P,LINKBACK          BACKUP ONE CHARACTER
         IC    M,LINKMULT          LENGTH OF LAST CHAR TO CHOP
         SR    C,M                 BACKUP NEW LENGTH
         BNP   BREAKERR            BRANCH IF NOTHING LEFT
         L     P,LINKBACK          POINT TO NEW LAST CHAR
         BCTR  B,0                 (LOSE ONLY ONE LINK NET)
         L     R0,NEWCOUNT         CURRENT LENGTH LEFT FOR NEXT LINE
         A     R0,F2               BUMP BY TWO
         ST    R0,NEWCOUNT         SET LENGTH FOR NEXT LINE
         B     BREAK01             AND ENTER THE '- ' SEQUENCE
         SPACE
BREAKERR DS    0H
         MVI   EFLAG010,ERRTERM    ERROR THAT CANNOT CONTINUE
        $CALL  ERROUT              DISPLAY THE RESULT
         SPACE
BREAK    DS    0H
         LA    C,1(,C)             ADD HYPHEN CHARACTER TO COUNT
         L     R0,FOPCOUNT         CHARACTERS ON THIS LINE
         A     R0,F1               PLUS ONE FOR HYPHEN
         ST    R0,FOPCOUNT         NEW NUMBER OF CHARACTERS
         L     R0,NEWCOUNT         CHARACTERS ON NEXT LINE
         A     R0,F1               PLUS ONE FOR BLANK
         ST    R0,NEWCOUNT         NEW NUMBER OF CHARACTERS ON NEXT
         SPACE
BREAK01  DS    0H
        $IFOFF SWITCHS,THSWS,BREAK02 BR IF TAB HYPHEN SW OFF
         LA    R0,WRKBLK           POINT AT STRING TO INSERT
         B     BREAK03             CONTINUE
BREAK02  DS    0H
         LA    R0,WRKSTR           POINT AT STRING TO INSERT
BREAK03  DS    0H
        $CALL  FOADD               ADD THE EXTRA BLANK/HYPHEN
         L     POLD,WRKFLN         ADDRESS OF "-" LINK
         L     R15,WRKLLN          ADDRESS OF " " LINK
         SPACE 1
         MVC   LINKFOR-LINKELEM(4,R15),LINKFOR    " " -> B
         ST    POLD,LINKFOR        A -> "-"
         SPACE
         USING LOLDELEM,POLD       LOOK AT "-" LINK
         ST    P,LOLDBACK          A.<- "-"
         LR    P,POLD              "-" NOW END OF LINE
         SPACE
         L     POLD,LINKFOR-LINKELEM(R15)    ADDR OF B LINK
         ST    R15,LOLDBACK        " " <- B
         DROP  POLD                BACK TO EXPECTED USAGE
         SPACE 1
        $ON    WRKSW,WRKBLNK       NO BLANKS FOUND
         A     W,WRKL              BUMP INTERWORD SPACE COUNT
         MVI   WRKL+3,X'00'        AND CLEAR COUNT
         B     SETBACK             GO TO DONE
         SPACE
         USING LNEWELEM,PNEW
LINK     DS    0H
         L     PNEW,WRKLLN         NEW LAST LINK
         MVC   LNEWFOR,WRKNX       SET NEW FORWARD TO NEXT
         MVC   LINKBACK,WRKLLN     CURRENT LAST BACK PTR
         BR    RETURN              AND RETURN TO CALLER
         SPACE
         DROP  PNEW
         SPACE 2
BACKUP   DS    0H
         L     R15,HYLEVEL         USER'S HYPHENATION LEVEL
BACKUP01 DS    0H
         SLL   R15,2               LEVEL TIMES FOUR FOR BRANCH
         B     *(R15)              AND HANDLE INDIVIDUALLY
         B     BACKUPNO                 HYNONE - NO HYPHENATION
         B     BACKUPUS                 HYUSER - USER HYPHENATION
         B     BACKUPAU                 HYAUTO - AUTO HYPHENATION
         SPACE
BACKUPNO DS    0H
         BCTR  B,0                 BACKTRACK
         IC    M,LINKMULT          ..
         SR    C,M                 ..
         CLI   LINKCHAR,C' '       IS CURRENT CHARACTER A BLANK .Q
         L     P,LINKBACK          (BACKUP TO PREVIOUS CHARACTER)
         BE    SETBACK             IF YES, DONE
         B     BACKUPNO            ELSE KEEP BACKING UP
         SPACE
BACKUPUS DS    0H
         BCTR  B,0                 BACKTRACK
         IC    M,LINKMULT          ..
         SR    C,M                 ..
         CLI   LINKCHAR,C' '       IS CURRENT CHARACTER A BLANK .Q
         L     P,LINKBACK          (BACKUP TO PREVIOUS CHARACTER)
         BE    SETBACK             IF YES, DONE
         CLI   LINKCHAR,HYACHAR    A HYPHEN CHARACTER .Q
         BNE   BKUS01              BRANCH IF NOT
         L     PNEW,LINKFOR        FORWARD POINTER
         USING LNEWELEM,PNEW       TELL THE ASSEMBLER
         LTR   PNEW,PNEW           ANYTHING FORWARD .Q
         BZ    BKUS01              BRANCH IF NOT
         CLI   LNEWCHAR,C'A'-C' '  FORWARD LESS THAN LOWER 'A' .Q
         BL    BKUS01              YES, IGNORE THIS BREAK
         CLI   LNEWCHAR,C'Z'       GREATER THAN UPPER 'Z' .Q
         BH    BKUS01              YES, IGNORE THIS BREAK
         L     PNEW,LINKBACK       BACKWARD POINTER
         CLI   LNEWCHAR,C'A'-C' '  FORMER LESS THAN LOWER 'A' .Q
         BL    BKUS01              YES, IGNORE THIS BREAK
         CLI   LNEWCHAR,C'Z'       GREATER THAN UPPER 'Z' .Q
         BH    BKUS01              YES, IGNORE THIS BREAK
         B     SETBACK             HYPHEN TWIXT TWO ALPHAS IS OK
         DROP  PNEW
BKUS01   DS    0H
         CL    P,WRKBRK            IS THIS THE BREAK .Q
         BE    BREAK               BRANCH IF YES
         B     BACKUPUS            ELSE KEEP BACKING UP
         SPACE
BACKUPAU DS    0H
        $CALL  FOHYPH              ATTEMPT HYPHENATION
         B     BACKUP01            AND DO IT AGAIN, DIFFERENTLY
         SPACE
SETLAST  DS    0H
         CLI   LINKCHAR,HYUCHAR    USER HYPHENATION CHARACTER .Q
         BE    SET                 BRANCH IF YES
         OC    WRKBRK,WRKBRK       ANY USER BREAK POINT DEFINED .Q
         BZ    SET                 BRANCH IF NOT
         LTR   W,W                 FIRST WORD .Q
         BNP   SET                 BRANCH IF YES
         BCTR  W,0                 DECREMENT INTERWORD COUNT
         SPACE
SETBACK  DS    0H
         XC    WRKBRK,WRKBRK       CLEAR BREAK POINTER
SET      DS    0H
        $OFF   WRKSW,WRKUHY        CLEAR USER HYPHEN SWITCH
         MVC   NEWFIRST,LINKFOR    SET START OF RESIDUE STRING
         ST    P,FOPLAST           SET END OF STRING
         L     P,LINKFOR           RESIDUE STRING
         LTR   P,P                 ANY RESIDUE STRING .Q
         BZ    SET02               BRANCH IF NONE
         CLI   LINKCHAR,C' '       IS END CHARACTER A BLANK .Q
         BNE   SET02               BRANCH IF NOT
SET01    DS    0H
         L     P,LINKDOWN          OVERSTRIKE CHARACTERS
         LTR   P,P                 ANY OVERSTRIKE CHARACTER .Q
         BZ    SET02               BRANCH IF NONE
         MVI   LINKCHAR,C' '       MAKE SURE OVERSTRIKE DOES NOT PRINT
         B     SET01               AND TRY AGAIN
SET02    DS    0H
         L     P,FOPLAST           RESTORE END OF STRING POINTER
         XC    LINKFOR,LINKFOR     DETACH RESIDUE FROM STRING
        $IFON  WRKSW,WRKBLNK,SETOK BRANCH IF NO BLANKS
         LTR   W,W                 WERE THERE ANY BLANKS .Q
         BNP   SETOK               NO
SETADJ   DS    0H
         CLI   LINKCHAR,C' '       ELIMINATE TRAILING BLANK FROM C
         BNE   SETOK               NO MORE BLANKS
         IC    M,LINKMULT          DELETE FROM FORMAT COUNT, C
         SR    C,M                 ..
         L     P,LINKBACK          CHECK PREVIOUS CHARACTER
         B     SETADJ              ..
SETOK    DS    0H
        $OFF   WRKSW,WRKBLNK       RESET BLANKS SWITCH
         ST    C,FONOCHAR          SET NUMBER OF CHARS IN FORMAT LINE
         ST    W,FOIWSPC           SET INTER-WORD SPACES COUNT
         L     R0,FOPCOUNT         GET OLD COUNT
         AR    R0,B                BUMP
         ST    R0,FOPCOUNT         UPDATE OLD COUNT
         L     R0,NEWCOUNT         GET NEW COUNT
         SR    R0,B                DECREMENT
         ST    R0,NEWCOUNT         UPDATE NEW COUNT
         B     MERET               RETURN TO CALLER
         SPACE
MERET    DS    0H
        $EXIT  RC=0                AND RETURN TO CALLER
         SPACE
         DROP  P,R1
         SPACE
WRKOSTR  DC    H'1',C' '           NEW BLANK FOR INSERT
WRKSTR   DC    H'2',C'- '          NEW CHARACTERS FOR INSERT
WRKBLK   DC    H'2',C'  '
