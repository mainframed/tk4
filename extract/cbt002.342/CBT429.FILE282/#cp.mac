***********************************************************************
*                                                                     *
*              .CP (CONDITIONAL PAGE EJECT) --- CONTROL               *
*                                                                     *
***********************************************************************
         SPACE 1
CP      $ENTER ,
        $CALL  GETYESNO            GET AND TEST ARGUMENT
         BC    BOMIT,CP08          IF ARG OMITTED, IGNORE
         BC    BPOS,CP02           BRANCH IF A BEGINNING
         BC    BNEG,CP03           BRANCH IF AN ENDING
         ST    COUNT,ARGSTART      RESET START OF SCAN
        $CALL  GETNUM              GET NUMERIC ARGUMENT
         BC    BDNO,CPE005         ERROR IF INVALID
         CLI   ICORFLG,ICORNONE    ARE WE SAVING INTO CORE NOW .Q
         BNE   CP08                IF YES, IGNORE THIS REQUEST
         LTR   COUNT,COUNT         ZERO OR MINUS SPACE .Q
         BNP   CP08                IF SO, NO PAGE EJECT
         LH    TEMP,PLCT           GET COUNT OF NUMBER LEFT
         SR    TEMP,COUNT          LESS NUMBER REQUIRED
         BM    CP01                MINUS FORCE AN EJECT
         LH    R1,BMMRG            BOTTOM MARGIN
         AH    R1,FNSEP            PLUS FOOTNOTE MARGIN
         CR    TEMP,R1             BELOW BOTTOM MARGIN .Q
         BNL   CP08                BRANCH IF NOT
CP01     DS    0H
        $CALL  PAGEREAL            YES, FORCE PAGE EJECT
         B     CP08                GO TO DONE
         SPACE
CP02     DS    0H
         CLI   ICORFLG,ICORNONE    ARE WE SAVING INTO CORE NOW .Q
         BNE   CPE012              IF YES, ERROR
         LA    R1,ICORSLEN         NEED THIS MUCH SPACE
        $CALL  GETCELL             GET THE SPACE
         BC    BNEG,CPE024         BRANCH IF FAILURE
         USING ICORSAVE,TEMP       SAVE AREA LOOKS LIKE THIS
         ST    TEMP,CPQSAVE        SAVE AREA POINTER
         MVC   ICORSKSP,SKSP       SAVE CONDITIONAL SKIP/SPACE
         XC    SKSP,SKSP           CLEAR CURRENT SKIP/SPACE
         DROP  TEMP
         SPACE
         MVI   ICORFLG,ICORCP      SET CONDITIONAL KEEP
         LA    TEMP,CPAREA         CONDITIONAL KEEP CONTROL
         ST    TEMP,ICORANCH       SAVE THIS FOR LATER
         B     CP08                GO TO DONE
         SPACE
CP03     DS    0H
         CLI   ICORFLG,ICORCP      CURRENTLY WITHIN COND KEEP .Q
         BNE   CPE012              ERROR IF NOT
        $CALL  GETNUM              GET OPTIONAL SECOND ARG FOR 'END'
         BC    15-BDNO,CP03A       OK IF NOT INVALID
         MVI   EFLAG005,ERRSET     SET ERROR FLAG
         SR    COUNT,COUNT         AND USE ZERO ADJUSTMENT
         B     CP03B               CONTINUE
CP03A    DS    0H
         BC    15-BOMIT,CP03B      BRANCH IF NOT OMITTED
         SR    COUNT,COUNT         USER ZERO ADJUSTMENT
CP03B    DS    0H
         LA    R1,CPAREA           CONDITIONAL PAGE AREA DESCRIPTOR
        $CALL  CPENDS              TERMINATE THE BLOCK
         SPACE
         L     TEMP,CPQSAVE        RESTORE SAVED AREA POINTER
         XC    CPQSAVE,CPQSAVE     CLEAR POINTER
         USING ICORSAVE,TEMP       AREA LOOKS LIKE THIS
        $MVC   SKSP,ICORSKSP       RESTORE CONDITIONAL SKIP/SPACE
         LA    R0,ICORSAVE         POINT TO AREA
         LA    R1,ICORSLEN         LENGTH OF SAVE AREA
        $CALL  FREECELL            RELEASE WORK AREA
         DROP  TEMP
         SPACE
         MVI   ICORFLG,ICORNONE    RESET SAVING CONDITIONAL PAGE FLAG
         XC    ICORANCH,ICORANCH   CLEAR COND PAGE CONTROL
         SPACE
        $IFON  SWITCHS,FEMPTY,CP07 BRANCH IF PAGE NOW EMPTY
         LH    TEMP,PLCT           COUNT OF LINES LEFT
         S     TEMP,CPQCNT         LESS QUEUED COND KEEP COUNT
         SH    TEMP,SKSPCCNT       LESS CONDITIONAL SPACE COUNT
         SR    TEMP,COUNT          ADJUST FURTHER WITH USER'S REQUEST
         OC    OLDCOUNT,OLDCOUNT   ALL DATA FORMATTED AND PRINTED .Q
         BZ    CP04                BRANCH IF YES
         S     TEMP,F1             TAKE THAT LINE INTO ACCOUNT
CP04     DS    0H
         LTR   TEMP,TEMP           TEST FOR NONE LEFT
         BM    CP05                MINUS, FORCE AN EJECT
         LH    R1,BMMRG            BOTTOM MARGIN
         AH    R1,FNSEP            PLUS FOOTNOTE MARGIN
         CR    TEMP,R1             BELOW BOTTOM MARGIN .Q
         BNL   CP06                IF NOT, DON'T FORCE AN EJECT
         SPACE
CP05     DS    0H
         XC    SKSP,SKSP           CLEAR CONDITIONAL SPACES
        $ON    SWITCHS,OOSWS       NO OVERLAY PLEASE
        $CALL  PAGE                FIRST FORCE LAST PAGE
        $OFF   SWITCHS,OOSWS       REENABLE OVERLAY
CP06     DS    0H
        $IFON  SWITCHS,FEMPTY,CP07 BRANCH IF PAGE NOW EMPTY
         LA    R1,CPAREA           QUEUED LINE DESCRIPTOR
        $CALL  CPFKPRT             DUMP OUT ALL THAT'S SAVED
         B     CP08                BRANCH TO RETURN
CP07     DS    0H
         XC    SKSP,SKSP           CLEAR CONDITIONAL SPACES
        $CALL  PAGETOP             PRINT HEADER AND SAVED LINES
         SPACE
CP08     DS    0H
        $EXIT  RC=0                RETURN TO CALLER
         SPACE
CPE005   DS    0H
         MVI   EFLAG005,ERRSET     INVALID OPERAND
         B     CP08                BRANCH TO RETURN
CPE012   DS    0H
         MVI   EFLAG012,ERRSET     ILLEGAL CONTROL WORD
         B     CP08                BRANCH TO RETURN
CPE024   DS    0H
         MVI   EFLAG024,ERRSET     NO STORAGE FOR SAVE
         B     CP08                BRANCH TO RETURN
         SPACE 2
***********************************************************************
*                                                                     *
*              CPENDS --- TERMINATE INCORE TEXT BLOCK                 *
*                                                                     *
***********************************************************************
         SPACE 1
*        ON ENTRY  --  (R1)    POINTER TO AREA DESCRIPTOR
*                      (COUNT) EXTRA USER SPACE REQUEST
         SPACE
CPENDS  $ENTER ,
         USING CPFKFN,R1           AREA DESCRIPTOR
         L     X1,CPFKFNA          FIRST LINE ANCHOR
         LTR   X1,X1               ANY DATA AT ALL .Q
         BZ    CPENDS04            BRANCH IF NONE
         USING FNQELEM,X1          CHAIN LOOKS LIKE THIS
CPENDS01 DS    0H
         OC    FNQFCHN,FNQFCHN     LAST ENTRY IN CHAIN .Q
         BZ    CPENDS02            BRANCH IF YES
         L     X1,FNQFCHN          FORWARD POINTER
         B     CPENDS01            SEARCH AGAIN
         SPACE
CPENDS02 DS    0H
        $ON    FNQFLAG,FNQEOB      SET LAST RECORD FLAG
         STH   COUNT,FNQNUMOP      EXTRA USER REQUEST
         OC    SKSPCCNT,SKSPCCNT   ANY SKIP/SPACE OUTSTANDING .Q
         BZ    CPENDS03            BRANCH IF NONE
        $ON    FNQFLAG,FNQSSET     SKIP/SPACE OUTSTANDING
        $MVC   FNQSKSP+SKSPFLG2-SKSP,SKSPFLG2     SAVE THE FLAG
        $MVC   FNQSKSP+SKSPCCNT-SKSP,SKSPCCNT     AND THE COUNT
         XC    SKSP,SKSP           CLEAR CONDITIONAL SPACE/SKIP
         SPACE
CPENDS03 DS    0H
         OC    OLDCOUNT,OLDCOUNT   ALL DATA FORMATTED AND PRINTED .Q
         BZ    CPENDS04            BRANCH IF YES
        $ON    FNQFLAG,FNQNOBRK    INDICATE PARTIAL LINE LEFT
         SPACE
CPENDS04 DS    0H
        $EXIT  RC=0                AND RETURN TO CALLER
         DROP  X1,R1
