DISASM is a one-pass disassembler which produces an assembler language
source program from a CSECT within a load module. Control cards permit
specification of areas containing no instructions, allow base registers
to be provided so that symbolic labels may be created during
disassembly, and definition of DSECTs to be used during disassembly.
Conditional branch instructions use the extended mnemonics, where
possible, and explicit registers are denoted by R0, R1, ... R15.
Informational comments are given on SVC's, and various BAL instructions
to aid in creating a documented source program.

1. JCL requirements:
      a. EXEC card:        To execute PGM=DISASM. A parm field may
                           be specified if floating point and/or
                           privileged instructions are to be
                           found in the module.
      b. STEPLIB DD card:  Optional, specify the PDS containing
                           the module DISASM.
      c. LOADLIB DD card:  optional, specify PDS containing the
                           modules DISASM1 and DISASM2, if other than
                           a linklist library or STEPLIB.
      d. SYSLIB DD card:   specify PDS containing the module to be
                           disassembled.
      e. SYSPRINT DD card: optional, specify the printed
                           output dataset. BLKSIZE must be
                           specified as a multiple of 121.
                           RECFM=FBA,LRECL=121 is hard coded.
      f. SYSPUNCH DD card: optional, specify printed output
                           dataset. BLKSIZE must be specified
                           as a multiple of 80.
                           RECFM=FB,LRECL=80 is hard coded.
      g. SYSIN DD card:    contains control cards. The MODULE-CSECT
                           card is required. BLKSIZE must be a
                           multiple of 80. RECFM=FB,LRECL=80 is
                           hard-coded.

  JCL example: Disassemble CSECT IECIOSCN in module IEANUC01,
               which is in the PDS SYS1.NUCLEUS. The modules
               DISASM, DISASM1, and DISASM2 are all in the PDS
               SYS1.TECHLOAD. A printed listing is to be made,
               and the source program output will be placed in
               the sequential dataset USER02.IECIOSCN.ASM.

      //DISASM EXEC PGM=DISASM
      //STEPLIB DD DSN=SYS1.TECHLOAD,DISP=SHR
      //SYSPRINT DD SYSOUT=*,DCB=BLKSIZE=121
      //SYSLIB DD DSN=SYS1.NUCLEUS,DISP=SHR
      //SYSPUNCH DD DSN=USER02.IECIOSCN.ASM,DISP=(,CATLG),
      //            UNIT=SYSDA,DCB=23440,
      //            SPACE=(TRK,(5,2),RLSE)
      //SYSIN DD *
      IEANUC01 IECIOSCN
      /*


2. PARM field on the EXEC card: Omit the parm field, unless floating
        point and/or privileged instructions are to be found in the
        CSECT being disassembled. When the parm field is not specified,
        entries for the privileged and floating point instructions are
        erased from the internal instruction tables used during
        disassembly. Valid PARM fields are:

            PARM=(SUPVR)     assemble privileged instructions
            PARM=(FLTPT)     assemble floating point instructions
            PARM=(SUPVR,FLTPT) assemble both privileged and
                             floating point instructions.


3. Control cards entered in the SYSIN dataset.
        Data is contained only in columns 1-72. Columns 73-80 may be
        used for any desired purpose. Comment cards may be entered with
        an asterisk (*) in column 1. In addition, columns beyond the
        last specified may be used for any purpose. Leading zeros must
        be included in all fields giving hex or decimal data. Name
        fields must be left justified with trailing blanks. Hex fields
        may contain only the hex digits 0-9 and A-F, while decimal
        fields may contain only digits 0-9.  The MODUKE-CSECT card must
        be the first card in the input stream. DSECT definitions may not
        include any other control cards. Using cards for DSECTs must be
        entered at some point after the DSECT definition. Data-only
        cards and program USING cards may be entered in any order except
        within DSECT definitions.


   a. MODULE-CSECT card (required), must be the first card in the SYSIN
        stream. Specifies the module name and CSECT name. Module name
        is required, and must name an entry in the directory of the PDS
        specified by the SYSLIB DD card. CSECT name is optional. If
        specified, the named CSECT must exist in the module. If omitted,
        the CSECT with ESDid=0001 is disassembled.
      format: free-form, with module name preceding CSECT name.
              At least one blank must separate module name and
              CSECT name. The names may be surrounded by any number
              of blanks (see the JCL example).


   b. Data-only card (optional). Used to describe areas of the CSECT
                being disassembled which contain no instructions. Use of
                this card eliminates creation of instructions from
                constant data. Up to 256 data-only cards may be entered.
                These cards may occur anywhere in the SYSIN stream after
                the MODULE-CSECT card, but not within a DSECT definition
                set.
      format:
              col  1-4  : literal 'data'
              col   5   : blank
              col  6-11 : offset to beginning of area in hex
              col   12  : blank
              col 13-18 : offset to end of area in hex



   c. DSECT definitions (optional). A DSECT is defined by a header card
              followed by a variable number of field definition cards
              (up to 9999 of them). No other control card may be entered
              within a DSECT definition. Up to 256 DSECT definitions may
              be entered.

      DSECT header card format:
           col 1-8    : DSECT name
           col 9      : blank
           col 10-14  : literal 'DSECT'
           col 15     : blank
           col 16-19  : number of field cards to follow (decimal)

      DSECT field card format:
           col 1-8    : field name
           col 9      : blank
           col 10-13  : offset to left end of field (decimal)
                        maximum offset is 4095
           col 14     : blank
           col 15-17  : length of field in bytes (decimal)
                        maximum length is 256



   d. Ulabl cards. These cards define user labels to be placed on
                 statements within the program. If program base
                 registers are set up with using cards, these will also
                 be generated as symbolic operands on instructions.
                 Format is:

           col  1-5   : literal 'ulabl'
           col   6    : blank
           col  7-14  : label name
           col  15    : blank
           col 16-21  : offset to left end of field, in hex.
           col  22    : blank
           col 23-25  : length of field in dec. 256 is max.



   e. Using cards. These cards define base register usage. Up to 256
                 using cards may be entered. Use of these cards permits
                 the disassembler to convert explicit base-displacement
                 addresses to symbolic labels. Labels created within the
                 program will be 7 characters long. The first character
                 is 'A', followed by the 6-hex-digit offset to the
                 label. A using card must be entered for each DSECT to
                 be used.

     format:

          col 1-5   : literal 'USING'
          col 6     : blank
          col 7-12  : offset to begin loc for using range in hex
                      (this is where the using statement will occur)
          col 13    : blank
          col 14-19 : offset to ending loc for using range in hex
                      (this is where the drop statement will occur)
          col 20    : blank
          col 21    : base resister to be used (hex, 1-F)
          col 22    : blank
          col 23    : type, P=program base, D=DSECT base
          col 24    : blank
          col 25-30 : initial base register value if type P in hex
          col 25-32 : DSECT name if type D


4. Suggestions for use: On the first pass, do not use a SYSPUNCH DD
          card, but print the SYSPRINT listing. Use the listing to
          determine which registers are used as program base registers,
          their initial values, and their ranges. Make up USING cards
          for these. Find any places where no instructions should be
          generated (only constants), and make up data-only cards for
          these ranges. If you can determine any registers that are
          bases for areas which can be used for DSECTs (CVT reference,
          etc.), determine the range of valid use, and make up DSECT
          definitions and using cards for these. Make a second run,
          including the above cards, and creating a source program
          output with the SYSPUNCH DD card.



5. Output description:

   a. SYSPUNCH: this output contains the disassembled source program.
           Statement names begin in column 1, mnemonics begin in column
           10, operands in col 16, and an occasional comment begins in
           column 44. A sequence number (by tens) is in columns 73-80.
           Comments are included to show the macro name associated with
           SVC's, and other statements are flagged to aid in
           identification of certain operations:

                BALR 14,15              STD LINKAGE
                BALR X,0                ADDRESS SET
                other BALR'S            NON-STD LINKAGE
                BAL 0,XXX and BAL 1,XXX PARM SET BRCH
                BAL X,XXX               PERFORM
                STM instructions        SAVE REGS
                LM  instructions        RESTORE REGS
                BR R14                  EXIT
                Abs. location X'10'     CVT ADDRESS
                Abs. location X'4C'     CVT ADDRESS
                Other abs. locations    PSA REFERENCE

           When used in explicitly in instructions, registers are
           specified as R0, R1,... R15. An REQU macro is generated at
           the end of the program to create the appropriate EQU
           statements. If any DSECTs were defined in the SYSIN dataset,
           they will be near the end of the source program. The extended
           mnemonics are used for conditional branches wherever
           possible.



    b. SYSPRINT content:

       directory information: contains data from the directory
                              entry of the module containing
                              the CSECT to be disassembled.
       ESD table: a formatted list of all external symbol entries
                              found in the module.
       RLD table: a formatted listing of all relocation dictionary
                              entries pertaining to this CSECT.
       user entered cards: a list of the cards entered by the user,
                              with diagnostics, if appropriate.
       phase 1 label table: a list of all the labels to be used during
                              disassembly including those developed from
                              ESD entries, RLD entries, and generated
                              names resulting from using card
                              processing.
       text: a storage-dump formatted listing of the text which
                              comprises the CSECT being disassembled.
       source listing: a printout of the generated source program
                              statements, including the hex value which
                              resulted in the instruction's creation.


6. User Abends:

        DISASM may end with one of two user abends:

        U0777 - There is an invalid parm specified.
        U0888 - Check in the SYSPRINT listing for an error message
                describing the error causing the abend (e.g. table
                overflow).


Program processing description.

 DISASM functions:

 . Process the parm field, if any: set indicators used by
   DISASM1 and DISASM2 to set up their instruction tables.
 . Open all files.
 . Get storage for the symbol table, RLD table, and data-only
   tables (109,544 bytes total).
 . Process the module-CSECT card to obtain the member
   and CSECT names.
 . Issue BLDL against SYSLIB to obtain directory info for
   the member specified. If the specified member is an
   alias, re-issue a BLDL for the real member. Print
   directory information.
 . Point to the member in the SYSLIB PDS, and process the
   member. Load modules contain an external symbol dictionary
   followed by text and relocation dictionary information.
   all ESD info for the module precedes the first control
   record. A control record precedes each block of text.
   RLD info for the text follows each text block. Processing
   of load module information is as follows:
   a. Build an external symbol table, using the CESD blocks.
   b. Search for the desired CSECT as the table is being built. This
      CSECT must be found before the first control record.
   c. Read blocks until a control record for the desired CSECT is found
      (by ESD-id).
   d. When found, issue GETMAIN for an area large enough to contain the
      entire text.
   e. Place text blocks in contiguous storage locations and maintain
      during disassembly.
   f. Use RLD information for the CSECT to build the RLD table.
 . Load and perform DISASM1.
 . If any errors found by DISASM1, terminate processing.
 . Print the final label table to be used during disassembly.
 . Load and execute DISASM2.
 . Generate the DSECT entries.
 . Generate the REQU macro and end statements
 . Terminate processing



 DISASM1 functions:

 DISASM1 is the second phase of disassembly, and is performed by
 DISASM. A common data area, defined in DISASM, is passed to this
 program on entry.

 The SYSIN file is read to exhaustion. Using cards are reformatted and
 stored in a table - up to 256 using statements may be entered. DSECT
 cards may follow the using statements. When used, DSECT statements are
 reformatted, and built into tables. A maximum of 256 DSECTs may be
 entered. Data only cards may be included before, between, or after
 DSECTs to show areas in the program where no instructions occur. Up to
 256 data only areas may be specified.

 At eof on SYSIN, a pseudo dis-assembly pass is made using the text
 stored by disasm. Any resolvable address within the text is used to
 create a new entry in the label table, which will be used by DISASM2
 in the actual dis-assembly pass.

 Disassembly tables are set up similarly to those used by DISASM2 for
 the simulated disassembly performed in this module when any program
 base register using statements are entered.

 Storage is obtained for the DSECT table and using table, and addresses
 of these tables are stored in the common parameter area. Using and
 DSECT cards are edited, reformatted, and placed in the appropriate
 tables. If any errors are found, they are printed, and the disassembly
 will be terminated on return to disasm.

 Storage is obtained for the label table, and a simulated dis-assembly
 is performed to create label table entries for labels which will be
 generated for base-displacement addresses by DISASM2. On return to
 disasm, these labels will be sorted with external symbol and RLD
 labels to form the final label table to be used by DISASM2.



 DISASM2 functions:

 This sub-program is called by DISASM after completion of processing by
 DISASM1. The final label table and module text is in an area of
 storage. A common parameter area is defined in disasm, and passed to
 this program.

 Text bytes are used to create assembly language statements, and
 machine instruction statements. Output is written to the SYSPUNCH
 dataset for further processing by other modules.

 A text byte is considered to be an instruction if it occurs on a
 halfword boundary, is a valid op-code, and is followed by a valid
 op-code. Unconditional branches need not be followed by a valid
 op-code, however. The privileged and floating point instructions are
 not treated as instructions unless the user specified their inclusion
 at exec time.



Installation.

 a. Assemble and link the three csects, DISASM, DISASM1, and DISASM2.
    The three csects will all be linked into a single module with entry
    point DISASM.
 b. If storage utilization is found to be excessive, investigate the
    possibility of reducing the size of the table GETMAINs in DISASM
    lines 1360, 1380, 1440, 1500, 5460, and 9450, and in DISASM1 lines
    1520, 1610, 4160. The programs were written for ease of use with an
    MVS operating system, and may cause problems in a storage
    constrained environment.
 c. The SVC table and instruction op code tables in DISASM3A and
    DISASM3B (which are copied into DISASM1 and DISASM2) should be
    checked for operating system validity, and currency with the
    hardware from time to time.
 d. Macros used by the disassembler include SVLNK and REQU. SVLNK is
    used to establish addressability and chain save areas during
    initialization in each program, and set up register equates by use
    of the REQU macro. The REQU macro is also placed in each
    disassembled program if these macros are used, they should be
    placed in a macro library or prefixed to the source before
    assembly. If other macros are used in their place, make appropriate
    source code changes in DISASM, DISASM1, and DISASM2 before
    assembly.

 e. Direct technical inquiries, comments, suggestions for improvements,
    etc, to:
         Dick Thornton
         Blue Cross of Virginia
         2015 Staples Mill Road
         Richmond, Va. 23279
         Phone: (804) 359-7248
 f. Version updated and modified January 1991 by:
         Alan C Field
         Wetterau Inc.,
         345 Dunn Road,
         Florissant, Mo., 63031-7995
         Phone: (314) 839-7040
 g. Version updated and modified March 1991 by:
         Robert Styma
         AG Communication Systems
         P.O. Box 52179
         Phoenix, Az 85702-2179
         Phone: (602) 582-7323
    Made the 3 module format into a 1 module format. Changed the work
    area sizes to be symbolics and bumped buffer area to handle max
    length records. This is in DISASM1. Fatal messages are written to
    the screen using TPUT in addition to going to the print file.
    DISASM1 and DISASM2 have code which deals with BAS, BASSM and
    similar instructions. Minor fixes for handling weak externs and
    label problems. Changes to some of the 2 byte opcodes to show
    they are not proviledged.
 i. Version updated and modified May 1992 by:
         Alan C Field
         Wetterau Inc.,
         345 Dunn Road,
         Florissant, Mo., 63031-7995
         Phone: (314) 839-7040
    Extensions to opcode tables, change format of printed listing to
    look more like ASSEMBLER output (easier to read on 80 col screen)
    and bug fixes where some instructions didn't dis-assemble correctly,
    increases to some table sizes to handle BIG modules.
