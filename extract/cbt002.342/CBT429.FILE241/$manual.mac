




                   M V S   R E A S M

                   (interactive disassembler)


                   Installation and User Guide

                   Release 2.1

                   Fifth Edition (September 1991)





     This manual applies to MVS REASM Release 2.1 and to all
     subsequent releases of the product until otherwise indicated
     by new editions or updates to this publication. All rights
     reserved. No part of this manual may be reproduced or
     transmitted in any form or by any means, electronic or
     mechanical, without written permission from Valentin Y.
     Chernyak..




(c) Copyright 1991, Valentin Y. Chernyak.
All Rights Reserved


ABOUT MVS REASM

     MVS REASM is an ISPF based interactive disassembler for
     MVS 370, XA and ESA. This product may be used to quickly
     restore a source assembler program from a load module.
     MVS REASM provides a way to create very high quality
     source.

     MVS REASM may be used instead of DISASM and other batch
     disassemblers.


CONTENTS

       Chapter                                 Page

       ABOUT MVS REASM                           2
       CONTENTS                                  3
       LIST OF FIGURES                           4
       OVERVIEW OF MVS REASM                     6
       MVS REASM REQUIREMENTS AND RESTRICTIONS   7
       INSTALLATION                              8
       THE DISTRIBUTION TAPE                     9
       MVS REASM QUICK START                    11
       MVS REASM DISASSEMBLING COMMANDS         13
       CONTROL BLOCKS                           14
       LABELS DEFINITION                        14
       COMMENTS DEFINITION                      15
       MVS REASM PRIMARY COMMANDS               16
       USING                                    16
       DROP                                     17
       RETRANSLATE                              18
       FIND                                     19
       MARK                                     19
       LOCATE                                   20
       PROFILE                                  21
       SAVE                                     22
       PRINT                                    23
       RESET                                    24
       CANCEL                                   24
       END                                      24
       RECOVERY                                 25
       SET                                      25
       #SNAP                                    26
       TRACE                                    26
       MVS REASM LINE COMMANDS                  27
       USING                                    27
       DROP                                     28
       TYPE CHANGE                              28
       BLOCK LINE COMMANDS                      30
       AFTERWORD                                33
       INDEX                                    34


LIST OF FIGURES

       Figure 'JCL to load MVS REASM libraries'
       Figure 'MVS REASM module entry panel'
       Figure 'MVS REASM main project panel'
       Figure 'MVS REASM prepared project'
       Figure 'MVS REASM pretty project'
       Figure 'MVS REASM CONTROL BLOCKS'
       Figure 'LABEL DEFINITION'
       Figure 'COMMENTS DEFINITION'
       Figure 'Primary command USING'
       Figure 'Primary command DROP'
       Figure 'Primary command RETRANSLATE'
       Figure 'Primary command FIND'
       Figure 'Primary command MARK'
       Figure 'Primary command LOCATE'
       Figure 'Primary command PROFILE'
       Figure 'MVS REASM profile panel'
       Figure 'Primary command SAVE'
       Figure 'MVS REASM save panel'
       Figure 'Primary command PRINT'
       Figure 'Primary command RESET'
       Figure 'Primary command CANCEL'
       Figure 'Primary command END'
       Figure 'Primary command RECOVERY'
       Figure 'MVS REASM line commands'
       Figure 'Line command USING'
       Figure 'Line command DROP'
       Figure 'Line command DROP example'
       Figure 'Line command "type change"'
       Figure 'Multiple line commands'
       Figure 'Line block commands'


OVERVIEW OF MVS REASM

     MVS REASM is a powerful interactive disassembler. This
     tool makes it possible to reconstruct source text of any load
     module in dialog mode. MVS REASM is much more powerful then
     DISASM and other batch disassemblers. Reconstructed programs
     are quite so good as the source texts.
     MVS REASM provides ISPF EDITlike friendly interface. The
     disassembler project may be scrolled and converted to
     readable form with use of primary and line REASM commands.
     Any time project may be printed to ISPF
     LIST data set.
     MVS REASM provides a plenty of comfortable possibilities
     which makes the disassembling easy and quick. REASM is a
     smart program: it performs a plenty of automatic action, such
     as: base registers settings, constants definitions, comments
     inserting, SVC recognizing and so on.
     Of course MVS REASM processes all load module tricks, such
     as EXTRNs, WXTRNs, pseudo registers and so on. Full ESA
     hardware instructions set may be processed.
     First version of MVS REASM was written in 1986. Since this
     time this product was tested by hundreds of Russian system
     programers. As the result REASM was significantly debugged
     and redeveloped to achieve maximal user's requirements.


MVS REASM REQUIREMENTS AND RESTRICTIONS

     The following requirements and restrictions should be
     considered when planning a system with MVS REASM:
     - MVS REASM executes on any IBM S/370, 370-XA, or ESA/370
     compatible processor.
     - MVS REASM executes as ISPF PGM application. ISPF 2.3 and
     higher versions may be used.
     - MVS REASM requires about 700 Kb of free memory in TSO
     user region.
     - MVS REASM is an PL/1 program with assembler subroutines.
     That is why it requires PL/1 run time library to be executed.
     You may put this library to LNKLST00 table or concatenate it
     to STEPLIB DD card.
     - MVS REASM should require no more than the equivalent of
     50 tracks of 3380 disk space.


MVS REASM QUICK START

     MVS REASM executes as ISPF PGM application. To quick start
     REASM you may type command:
     ISPF PGM(REASM)
     from TSO READY mode.
     The REASM module entry panel appears:

COMMAND ===>

VALID COMMANDS:
   R - restore project from backup file (recovery)

LOAD LIBRARY:
   PROJECT ===>MVS
   GROUP ===>REASM
   TYPE ===>LOAD
   MEMBER ===>    (Blank to view member list)
   CSECT ===>     (Blank to view map of member)

OTHER PARTITIONED DATA SET:
   DATA SET NAME  ===>
   VOLUME SERIAL  ===>  (if not cataloged)

DATA SET PASSWORD ===>  (if password protected)

     Figure 'MVS REASM module entry panel'


     As you can see, REASM module entry panel seems just like
     ISPF EDIT first panel. You have to define load library name,
     module and csect names. You may type ENTRY name instead of
     CSECT name.
     When you leave member name field blank ISPF member list
     selection panel appears.
     When you leave csect name field blank ISPF table with
     csect names appears. You may sort this table (by names or
     addresses) and(or) search for specified name.
     You may leave all fields blank and type command R in the
     first field. As the result, REASM will restore from recovery
     file (its usage is just the same with ISPF EDIT recovery).
     When library, member and csect are correctly defined,
     REASM main project panel appears on the screen. It has the
     following format:

COMMAND ===>       SCROLL ===>CSR
Cmd Offset ..Object Code.. ..Label. .Oper .Operands &
Comments
                            PLISTART CSECT
... 000000 05F047F0                  DC    X'05F047F0'
... 000002 F008                      DC    X'F008'
... 000006 07070707         PLICALLA DC    X'07070707'
... 000008 58F0F042         PLICALLB DC    X'58F0F042'
... 00000A 050F                      DC    X'050F'
... 000010 00000000                  DC    V(PLIMAIN)
.........................................................

     Figure 'MVS REASM main project panel'



     As you can see, this panel presents the initial
     hexadecimal format of the specified section in module. You
     may convert this project to achieve maximal readability. As
     the result the project may be made so pretty as the source
     text was. Let us look at the next panel:

COMMAND ===>       SCROLL ===>CSR
Cmd Offset ..Object Code.. ..Label. .Oper .Operands &
Comments
                            PLISTART CSECT
... 000000 05F0                      BALR  R15,R0
... 000002 47F0F008                  B     8(,R15)
... 000006 0707             PLICALLA NOPR  R7
... 000008 0707                      NOPR  R7
... 00000A 58F0F042         PLICALLB L     R15,66(,R15)
... 00000E 050F                      BALR  R0,R15
... 000010 00000000                  DC    V(PLIMAIN)
.........................................................

     Figure 'MVS REASM prepared project'


     This project is much better then previous one. You may
     convert it further:


COMMAND ===>       SCROLL ===>CSR
Cmd Offset ..Object Code.. ..Label. .Oper .Operands &
Comments
                            PLISTART CSECT
... 000000 05F0                      BALR  R15,R0
                                     USING *,R15
... 000002 47F0F008                  B     *+8
... 000006 0707             PLICALLA NOPR  R7
... 000008 0707                      NOPR  R7
... 00000A 58F0F042         PLICALLB L     R15,A00064 =V(
... 00000E 050F                      BALR  R0,R15
... 000010 00000000                  DC    V(PLIMAIN)
.........................................................

     Figure 'MVS REASM pretty project'


     After all you may print prepared project or save it as a
     member of any source library (format of regular assembler
     program).
     The disassembling is an iterative process, so it may take a
     long time to be completed. MVS REASM recovery is a powerful
     integrated facility that makes it possible to divide
     disassembling process into any number of sessions.


MVS REASM DISASSEMBLING COMMANDS

     MVS REASM provides a number of tools to convert project
     and make it as pretty as possible. These tools are:
     - Primary and line commands.
     - Labels definition.
     - Comments definition.

     As you could see, the MVS REASM main project panel seems
     just like ISPF EDIT main panel. This match may be continued:
     - MVS REASM provides line and primary commands in the same
     manner as ISPF EDIT.
     - A part of MVS REASM line and primary commands has well
     known names ( REC - recovery, PROF - profile, SAVE - save and
     so on ).
     - A part of MVS REASM line commands seems like EDIT
     commands (CC .-. CC - make a part of project character, etc.)
     The further considering of MVS REASM will be based on some
     ISPF EDIT definitions.

CONTROL BLOCKS
     MVS REASM is provided with an additional tool: control
     block preparing system (PRCBGEN). This batch utility makes it
     possible to prepare formatted definitions of any control
     blocks (such as MVS PSA, CVT, TCB, DEB, UCB and other
     blocks). In other words, PRCBGEN utility may convert MACLIB
     member (containing DSECT definition) to special format load
     module.
     This tool makes it possible to tell MVS REASM to base any
     control block with specified register (sometimes REASM makes
     it automatically). As the result, control block names and
     even comments will be included in project.

For example:
A00080  L    R3,16
        TM   116(R3),X'10'
        BO   ...
GETCVT  L    R3,16
        TM   CVTDCB,X'10'
        BO   ...

     Figure 'MVS REASM CONTROL BLOCKS'


     Distribution tape of MVS REASM contains a load library,
     containing a plenty of previously prepared MVS blocks.
     Utility PRCBGEN and corresponding PROCLIB procedure is also
     included.
     The PRCBGEN tool is one of the most attracting advantages
     of MVS REASM.
     LABELS DEFINITION
     The labels definition is a powerful facility that allows
     you define your own labels in project and(or) redefine
     previously generated automatic labels (such as A00004). To
     define your own label you have to overtype its name in the
     label position of specified row. When you finish all
     references in whole project will be changed automatically.
     That is a very good way to prepare self-documenting projects.

Example of label re-definition:
 A00008  NI     A00080,X'FE'
 ...........................
 A00080  DC     X'00'
 ...........................
 A00008  NI     FLAGBIT,X'FE'
 ...........................
 FLAGBIT DC     X'00'
 ...........................

     Figure 'LABEL DEFINITION'

NOTE: Some labels (such as CSECT and ENTRY names, and some
others never may be redefined !).

COMMENTS DEFINITION

     A good way to create documented projects is comments
     definition. The tail of each row is a unprotected field where
     you may write down any text. This text will be linked with
     chosen line until you delete it.

Example of comment re-definition:
  LA   R3,5(R4,R5)  R3=R4+R5+5
  LA     R3,5(R4,R5)  INCRPTR

     Figure 'COMMENTS DEFINITION'

NOTE: MVS REASM creates its own comments for many commands.
You may overtype any of them.


MVS REASM PRIMARY COMMANDS

     Below listed is a full set of MVS REASM commands:

USING
     The primary command USING makes it possible to define base
     register for code, data or control block. The format of this
     command is:

           Offset1/*
 U sing  { Offset2(REG2) } REG1  Offset3/<Cursor>
           @Name

     Figure 'Primary command USING'

Offset1
     This operand specifies offset in project, where
     USING have to start. If * typed, then the
     offset of first row on screen will be taken.
     Offset1 must be typed as hexadecimal.

Offset2(REG2)
     This form of first operand allows you specify
     start USING value indirectly, via previously set
     base register (REG2). Offset2 must be typed as
     decimal.

@Name
     This operand defines name of control block or
     DSECT. MVS REASM will search load library,
     defined by DD card REASMBLK to find module
     '@Name'. If module found then REASM sets base
     for control block. Else REASM creates new DSECT
     definition.

REG1
     This operand specifies number of base register
     (R0-R15).

Offset3/<Cursor>
     This operand is optional. You may define offset
     in project, where USING statement have to be
     placed. Instead of it you may select the row,
     after which USING statement will be set by
     <Cursor>. If you omit third operand then USING
     statement will be placed at Offset1. Offset3
     must be typed as hexadecimal.

Examples:

     U 0,R15   Set base register 15 for code from offset
     zero.

     U 0 12 2                Set base register 12 for code from
     offset zero. Place USING statement at
     offset X'000002'.

     U 4096(R12),11 <cur>    Set base register 11 as second-base
     register. Place USING statement after
     the row, chosen by cursor.

     U @CVT,R3 <Cursor>      Set base register R3 as a base for
     control block CVT.

     U @DSA,R13              Set base register R13 as a base for new
     DSECT, named DSA.

 NOTE: MVS REASM often defines and sets appropriate code base
       register automatically.

DROP
     Primary command DROP provides a way to delete previously
     defined base register or registers. The format of this
     command is the follows:

     REG
  D rop   {    }
     ALL

     Figure 'Primary command DROP'


     Primary command DROP deletes register from the base
     registers list. If specified register was set more then once
     then all occurrences of it will be scratched. All labels,
     dependent to this register also will be erased from project.
     If operand ALL was specified then all base registers will be
     deleted.

Examples:
     D R15    Delete base register R15 from base
              registers list.

     D ALL    Delete all base registers.

NOTE: Primary command DROP is not similar to line drop
      command. Read carefully description to check the difference !


RETRANSLATE
     Primary command RETRANSLATE is the most important command.
     It permits convert project from hexadecimal form to commands.
     The format of this command is:

    R etranslate   Offset   G lobal

Figure 'Primary command RETRANSLATE'


     This command tells REASM to convert project to command
     format, starting from offset 'Offset'. Value of offset must
     be entered in hexadecimal form. If operand 'Offset' is
     omitted then offset, corresponding to the first row on screen
     will be assumed.
     REASM will try to convert hexadecimal text to commands
     until it find first non command part of code. If operand
     Global was specified then REASM will try go ahead and skip
     this piece of project. Else it will stop.
     During disassembling REASM performs a plenty of automatic
     actions, such as:
     - Base register checking and setting (if no base registers
     were set earlier).
     - Labels creating and inserting.
     - Comments generating.
     - Character constants extracting.
     - F and H constants extracting.
     - and so on.
     Usually 'RETRANSLATE GLOBAL' is the first command user
     have to enter first. It is just like E2-E4 chess move.

Examples:

     R     Retranslate project from the begin of
           the screen.

     R G   Retranslate all project from the
           beginning of the screen.

     R A6 G    Retranslate all project from offset
               X'0000A6'.

FIND

     Primary command FIND allows you search text of project to
     find specified context. It has the format:

 F ind   context

Figure 'Primary command FIND'


     Command allows you find part of project, containing
     specified context. If the context is omitted the value from
     previous FIND command will be taken.
     To find context REASM will search the current visible form
     of project. All fields (object code, label, operation,
     operands and comments) will be scanned.

Examples:

     F BALR   Find command BALR in project (maybe this
              context will be found somewhere
              else).

     F 1BFF07FE   Find context 1BFF07FE in project.

     F        Repeat finding of previous context.


MARK

     Primary command MARK may be used to tag a place in
     project. This tag (in future - mark name) may be referred by
     LOCATE primary command. The format is:

      MARK  mark-name  comments

     Figure 'Primary command MARK'
     When you type mark name operand then REASM links this name
     with the offset, corresponding to the first row on screen.
     Name, entered will be enrolled in 'mark names' table. If
     comments text exists then it will be put in this table also.
     If you omit operand then REASM provides you a panel,
     presenting mark names table. You are able to scroll this
     table. If you choose any row then project will be located to
     the corresponding offset.
     NOTE: REASM provides a short format of MARK command. This
     form seems like: '.mark-name  comments '. The purpose of this
     format is the compatibility with ISPF BROWSE labels facility.

Examples:

     MARK POINT1 call sub   Define mark name POINT1 with
     comments 'call sub'.
     .POINT1 call sub See explanation above.

     MARK    View mark names table.


LOCATE

     Primary command LOCATE may be used to point project to
     specified place. Usually you may scroll project with ISPF
     DOWN and UP commands but sometimes it may be necessary to
     reach specified point directly. Command locate has the
     following format:

            label name
 L ocate  { mark name  }
            Offset

     Figure 'Primary command LOCATE'


     You may locate project by:
     label name
     name of any label in project.

     mark name
     name of mark point (see page ).

     Offset
     hexadecimal offset inside project.

Examples:

     L A00080   Point project to label A00080.

     L point1   Point project to mark (or label)
                'point1'.

     L 80    Point project to offset X'000080'.

  NOTE: If labels and marks with the same names are present
  then marks will be used by LOCATE.


PROFILE

     The primary command PROFILE allows you change a number of
     'profile' values, defining project presentation on screen.

     The format is:

  PROF ile

     Figure 'Primary command PROFILE'


After PROF command is entered the profile panel appears:

COMMAND ===>

                     P R O F I L E

DATA PRESENTATION                          COMMAND SET
----------------------------------         -----------------------
CHAR/HEX DATA LENGTH ===>4    (1-9)        OS MODE ===>XA
PERFORM AUTO ACTIONS ===>YES  (Y/N)
DSECT NAMES FORMAT   ===>NAME (N/O)
BRANCH FORWARD MAX   ===>12   (0-99)       PACKED  ===>NO  (Y/N)
BRANCH BACKWARD MAX  ===>8    (0-99)       FLOAT   ===>NO  (Y/N)
AUTOSAVE MODE VALUE  ===>0    (0-OFF)

     Figure 'MVS REASM profile panel'


Below consideration of profile variables follows:

CHAR/HEX DATA

LEN
     this numeric defines length of character and
     hexadecimal constants in one row on the screen.
     Default value is 4 (it treats as 4 for
     hexadecimal constants and 8 for characters). You
     may choose any value in range 1-9.

PERFORM AUTO ACT
     value 'YES' enables, value 'NO' disables
     performing of automatic actions during
     retranslate command and in other cases. The
     default value is YES.

DSECT NAMES FORM
     this variable defines the format of DSECT names,
     automatically generating by REASM. When you
     define DSECT (via USING primary command), all
     references to fields in this area REASM will
     translate to form 'NAME+offset' if 'OFFSET'
     value set, or to form 'XXXoffset' if 'NAMES'
     value set. You may change form any time.

BRANCH FORW MAX
BRANCH BACKW MAX
     These values defines maximal length of short
     jumps and references. If referred address is
     quite near the issuing command then reference
     will be presented in form '*+value' or '*-
     value'. In other case label will be generated.

AUTOSAVE MODE VAL
     This numeric may specify number of changes of
     project to be made by you after which autosave
     into recovery file will occur. For more
     information see page .

OS MODE
     This variable defines the set of hardware
     instructions for disassembler. Valid values are:
     360, 370, XA and ESA. Of course, ESA value
     defines the largest set, but it decreases quality
     of data/code extracting (too many hexadecimal
     combinations may be treated as commands). The
     advice is to choose mode, corresponding to load
     module purposes.

PACKED
     This variable disables or enables disassembling
     of packed arithmetic commands. The default
     value in NO. Change it to YES if you need process
     modules with packed arithmetic. )

FLOAT
     This variable disables or enables disassembling
     of float arithmetic commands. The default value
     in NO. Change it to YES if you need process
     modules with float arithmetic.

SAVE
     Primary command SAVE provides a way to save current
     project as a member of source library (in ASM format) or to
     sequential data set. Its format is:
      S ave

     Figure 'Primary command SAVE'

     When you enter SAVE command, special save panel appears.
     You may choose library and member where project image will be
     saved.


COMMAND ===>

    SPECIFY SOURCE LIBRARY TO SAVE PROJECT

SOURCE LIBRARY:
 PROJECT ===> MVS
 GROUP ===> REASM
 TYPE ===> SOURCE
 MEMBER ===> PROJ01  ( * -  to view member list )

OTHER PARTITIONED DATA SET:
 DATA SET NAME  ===>
 VOLUME SERIAL  ===>        (if not cataloged)

DATA SET PASSWORD ===>          (if password protected)

REPLACE MEMBER ===> YES (YES or NO)

     Figure 'MVS REASM save panel'


The panel, presented above provides you an ability to
create source assembler programs.


PRINT
     The primary command PRINT allows you print current project
     image to ISPF LIST data set. The format is:

  P rint   X ref

     Figure 'Primary command PRINT'


     Operand X ref  may be used when you wish receive the cross
     reference listing for all names and commands in project. This
     listing is better then assembler's because of commands cross
     referring.

Examples:

     P     Print listing of data set.
     P X     Print listing with xref.


RESET
     The primary command RESET is used to reset pending block
     commands (see page ). The format is:

      RES et

     Figure 'Primary command RESET'


CANCEL
     The primary command CANCEL may be used to terminate REASM
     program immediately. The format is:

      CAN cel

     Figure 'Primary command CANCEL'

     NOTE: ALL CHANGES SINCE LAST RECOVERY WILL BE LOST !


END
     Primary command END may be used to exit from current
     project preparing. The format is:

      END

     Figure 'Primary command END'

     As the result member entry panel will be seen. If there
     were any changes since last recovery, REASM will prompt you
     for confirmation.

RECOVERY
     The primary command RECOVERY makes it possible to save
     disassembler environment in a special 'recovery' data set.
     Any time later data may be retrieved and current condition
     restored. The format is:

      REC overy   autosave value/OFF

     Figure 'Primary command RECOVERY'

     In difference with ISPF EDIT recovery, REASM does not
     update recovery data set after any change. It does it when
     you enter command RECOVERY and(or) when autosave value number
     of changes is detected. When you specify 0 or OFF as autosave
     value then autosave will be disabled.

     Examples:

     REC       Write recovery.

     REC 20    Automatically update recovery file after
               each 20-th change of project.

     REC OFF   Disable autosave

     NOTE: REASM counts any simply conversions of project as one
     change. For example, primary command RETRANSLATE, issued by
     you may perform hundreds of 'changes'.


SET

     The primary command SET is an advanced tool for user -
     defined DSECT preparation. This command makes it possible to
     define label within DSECT. The format of command is:

       SET  DSECT_name+Offset= label_name

     Figure 'Primary command SET'

     DSECT_name
     is the name of previously defined DSECT.

     Offset
     is the referred offset within this DSECT in
     decimal form.

     label_name
     is the label for this offset.

     If label_name is omitted then corresponding label name
     will be erased.

     NOTE: keyword SET may be omitted !

     Examples:

     SET DSA+144=TCBADDR define offset 144 in DSECT 'DSA' as a
     label 'TCBADDR'.

     SET DSA+144=  erase previously set label.
     DUMMY+15=FLAG1  define offset 15 in DSECT 'DUMMY' as a
     label 'FLAG1'.

#SNAP
     This command is available for debugging purposes.

TRACE
     This command is available for debugging purposes.


MVS REASM LINE COMMANDS

     All line commands may be entered at first position of row
     (in the place, marked as Cmd). Some rows are protected (you
     can not use line commands there). The length of line command
     may be from 1 to 3 characters.


COMMAND ===>                                        SCROLL ===>CSR
Cmd Offset ..Object Code.. ..Label. .Oper  .Operands & Comments

                             PLISTART CSECT
U15 000000   05F047F0                 DC    X'05F047F0'
D15 000002   F008                     DC    X'F008'
... 000006   07070707        PLICALLA DC    X'07070707'
XX. 000008   58F0F042        PLICALLB DC    X'58F0F042'
XX. 00000A   050F                     DC    X'050F'
... 000010   00000000                 DC    V(PLIMAIN)
 <---------  line commands may be entered here

     Figure 'MVS REASM line commands'


Below the full list of valid line commands is listed.

USING
     This line command may be used instead of primary command
     USING (see page ). It has the same effect but sometimes its
     usage is more comfortable. The format of command is:

      Cmd Offset ...
      ---------- ...
      Uxx

     Figure 'Line command USING'

     Line command USING inserts assembler USING statement for
     code at the specified offset. Symbols xx define base register
     (1-15).

     Command is identical to primary command 'USING Offset,xx'.

     Examples:

     U12     Set base register R12.
     U2      Set base register R2.


DROP
     Line command DROP provides a way to limit area of nearest
     USING statement dependence. In other words it has the same
     action with DROP statement of assembler language. The format
     is:
      Cmd Offset ...
      ---------- ...
      Dxx
     Figure 'Line command DROP'
     As in line command USING combination xx defines number of
     base register to be dropped. DROP statement will be inserted
     at the offset, corresponding to the row where command was
     entered. Command deactivates the nearest to it base register!

     Examples:

     D12     Insert DROP command for R12.

     D2     Insert DROP command for R2.

     Example of line DROP command usage:
       USING *,R7
       ..........
       USING *,R7
       ..........

      D7 L     R3,16

       USING *,R7
       ..........
       USING *,R7
       ..........
       DROP  R7
       L     R3,16

     Figure 'Line command DROP example'


     NOTE: line command DROP is not similar to primary command
           DROP. Line command DROP limits USING (as in assembler).
           Primary command DROP deletes base register (erases all
           USING statements with specified register). Be sure you
           understand well this difference !


TYPE CHANGE
     Type change line commands makes it possible to change form
     of presentation for specified project rows. These commands
     has the following format:

      Cmd Offset ...
      ---------- ...
      T Lx

     Figure 'Line command "type change"'

     The first character in this command (T) defines new type
     of data. Valid values are:
     C
     character data.

     X
     hexadecimal data.

     F
     full word data.

     H
     halfword data.

     B
     bit constant.

     A
     self-defined A constant (1 or 3 bytes long).

     Y
     self-defined 2-bytes long A constant.

     S
     S-constant.

     #
     DS constant.

     Length modifier may be added to the tail to define length
     of data. This modifier is the digit in range from 1 to 9. If
     length modifier is omitted then length of data in
     corresponding row will be assumed.
     Examples:
     F    present data in row as a full word.
     CL3    present first 3 bytes of data in row as the
     character constant.
     AL1    present data as one byte long A constant.
     AL3    present data as three bytes long A
     constant.
     XL8    present 8 bytes as the hexadecimal
     constant.

Example of multiple line commands:

  Cmd Off..Object    Operands
  ----------------------------------
  C   00   00C1C2C3  DC X'00C1C2C3'
  F   04   00000040  DC X'00000040'
  AL1 08   FD0000B0  DC X'FD0000B0'
  S   0C   F00CF00E  DC X'F00CF00E'
  BL2 10   01020304  DC X'01020304'




      Off..Object    Operands
      ---------------------------
      00   00        DC X'00'
      01   C1C2C3    DC C'ABC'
      04   00000040  DC F'64'
      08   FD        DC AL1(253)
      09   0000B0    DC X'0000B0'
      0C   F00C      DC S(*)
      0E   F00E      DC X'F00E'
      10   01        DC B'00000001'
      11   02        DC B'00000010'
      12   0304      DC X'0304'

     Figure 'Multiple line commands'


BLOCK LINE COMMANDS

     Block line commands provides a way to convert a big part
     of project to specific type. The form of usage is quite
     similar to ISPF EDIT block commands. The format is:

      Cmd Offset ...
      ---------- ...
      TT
      ........
      TT

     Figure 'Line block commands'

     For example you may type CC command in one row and CC in
     another one. As the result all data in project between
     offsets, corresponding to these rows will be presented as
     characters. )

     Examples:
     CC ... CC     convert data to characters.
     XX ... XX     convert data to hexadecimals.
     FF ... FF     convert data to few full words.


Quick Reference Card

Primary Commands

CANcel
Immediately terminate work.
Drop {reg/ALL}
Erase reg or ALL registers from project. All USING statements with
specified register s, all corresponding labels and DSECTs will be also
erased.

END
Terminate work.

Find  context
Find specified context in project. If context omitted then previous
will be assumed.

Locate {offset/label/name}

Point project to specified offset or label or mark name.

Mark  name  comment
Mark current place as name. This name will be enrolled in mark table.
Comments also will be placed there. If name omitted then mark table
panel will appear.

Print  Xref
Print project to ISPF LIST file. If X keyword typed then cross
reference listing also will be printed.

PROFile
Display profile panel to view and update profile variables.

RECovery  freq/OFF
Enable recovery process. If freq operand omitted then status will be
recorded one time. Operand freq defines frequency of autosave
process. If 0 or OFF specified then autosave will be disabled.

RESet
Reset pending block command.

Retranslate  G   offset
Perform disassembling, start from offset or (if omitted) from screen
beginning. Keyword G (GLOBAL) tells REASM continue up to project end.
If G omitted then disassembling will be stopped at first data part.

Save
Save current project as the source program.

Set  Dsect_name+offset=name
Set alias name for specified offset in user defined DSECT.

Using {offset1/offset2(reg2)/@name} reg1  offset3/<cur>
Set base register for code, data or control block. Operand offset1
defines USING statement place, offset2 and reg2 allows relative
addressing, name defines control block name. Operand reg1 defines
base register number, offset3 or cursor position may define USING
statement position.


Quick Reference Card

Line Commands

Uxx
Set base register xx for code, at specified place.

Dxx
Set DROP statement for register xx at specified place.

Tlx
Convert data length x to type T. Valid types are:
 C - character data
 X - hexadecimal data
 F - full word data
 H - halfword data
 B - bit constant
 A - self-defined A constant (1 or 3 bytes long)
 Y - self-defined 2-bytes long A constant
 S - S-constant
 # - DS constant

TT
Begin ... end block command to convert all internal data to type T.


AFTERWORDS

This manual was made with use of MS WORD 5.5.
This manual was converted to straight ascii format and uploaded to
  mainframe 04/13/94.  Control characters were converted to blanks
  and the entire file was edited by hand.  Please excuse minor
  inconsistencies in columns, etc.  Thank you.




INDEX

       Index value                             Page

       370-XA                                    7
       ASM                                      22
       Automatic actions                        18
       Block commands                           30
       CANCEL                                   24
       Cross reference                          23
       CSECT                                    11
       CVT                                      14, 17
       DASD                                     23
       DEB                                      14
       DISASM                                    6
       DOWN                                     20
       DROP                                     17, 28
       DSECT                                    14, 16, 25
       END                                      24
       ENTRY                                    11
       ESA                                       6, 22
       ESA/370                                   7
       FIND                                     19
       Float arithmetic                         22
       FREE                                     23
       IBM                                       7
       IPL                                       8
       ISPF 2.3                                  7
       ISPF EDIT                                 6, 25
       ISPF LIST                                 6, 24
       ISPF PGM                                  7
       JCL                                       8
       Line commands                            27
       LNKLST00                                  7
       LOCATE                                   20
       LOGOFF                                   23
       MACLIB                                   14
       Main project panel                       12
       MARK                                     19
       Mark name                                19
       Member entry panel                       25
       Module entry panel                       11
       Packed arithmetic                        22
       PRCBGEN                                  14
       PRINT                                    23
       PROCLIB                                  14
       PROFILE                                  21
       Profile panel                            21
       PSA                                      14
       Pseudo registers                          6
       READY                                    11
       REASMBLK                                  9, 16
       RECOVERY                                 25
       RESET                                    24
       RETRANSLATE                              18
       S/370                                     7
       SAVE                                     22
       Save panel                               22
       SET                                      25
       STEPLIB                                   7
       SVC                                       6
       TAPE                                      9
       TCB                                      14
       TSO                                       7
       UCB                                      14
       UP                                       20
       USING                                    16, 27, 28
       VIO                                      23

   1) For the purposes of system programming some command from
       'packed' set were transferred to 'main' command set. So
       commands PACK, UNPACK and CVD are considered as 'not packed'.

   2) Of course you may choose these rows on different screens
      as in ISPF EDIT.

