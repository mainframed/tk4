SETUP    TITLE 'JES2 /*SETUP CARD DISPLAY SUPPORT'
******************************************************************
*                                                                *
* LOAD MODULE: EX@STUP.     LIBRARY: JES2LOAD.                   *
*                           ENVIRONMENT: JES2 MAIN TASK.         *
*                                                                *
*                                                                *
*      THIS MODULE CONTAINS EXIT 5  ROUTINE TO PROCESS THE       *
*   /*SETUP SUPPORT COMMAND - $QS.                               *
*      OPERATOR TYPES $QSJNNN AND GETS A LIST OF SETUP CARDS     *
*      FROM THE JOB. IF YOU ENTER $QSJNNN,L=Z IT GETS RID OF     *
*      THE USELESS JES2 PREFIX STUFF.                            *
*                                                                *
*                                                                *
******************************************************************
         COPY  $HASPGBL
EX005QS  $MODULE $BUFFER,                                              C
               $HASPEQU,                                               C
               $TAB,                                                   C
               $QSE,                                                   C
               $PCE,                                                   C
               RESPA,              REQUIRED FOR $COMWORK               C
               $COMWORK,                                               C
               $JQE,                                                   C
               $JOE,                                                   C
               $JOT,                                                   C
               $JCT,                                                   C
               $LRC,                                                   C
               $PDDB,                                                  C
               $IOT,                                                   C
               $CAT,                                                   C
               $MITETBL,                                               C
               $MIT,                                                   C
               $SCAT,                                                  C
               $XECB,                                                  C
               $SVT,                                                   C
               $RAT,                                                   C
               $DCT,                                                   C
               $CMB,                                                   C
               $HCT,                                                   C
               $DAS,                                                   C
               $MODMAP
         TITLE 'EXIT 5 ROUTINE FOR $QS COMMAND - /*SETUP DISPLAY'
EX05QS  $ENTRY BASE=R8
***********************************************************************
*                                                                     *
*    LOAD MODULE: EX@STUP.    ROUTINE:  $QSX5.                        *
*                             ENVIRONMENT:  JES2 MAIN TASK (HASPCOMM) *
*                                                                     *
*    " $ Q S "     C O M M A N D    P R O C E S S O R.                *
*                                                                     *
*                                                                     *
*                                                                     *
*        REGISTERS ON ENTRY ARE:                                      *
*                                                                     *
*        REG. 0 - 4 --- NOT SPECIFIED.                                *
*                                                                     *
*        REG. 5 --> CURRENT OPERAND PTR.                              *
*                                                                     *
*        REG. 6 --- VALUE OF 4.                                       *
*                                                                     *
*        REG. 7 --> LAST OPERAND PTR.                                 *
*                                                                     *
*        REG. 8-10 ---NOT SPECIFIED                                   *
*                                                                     *
*        REG. 11----==> HCT                                           *
*                                                                     *
*        REG. 12------NOT SPECIFIED                                   *
*                                                                     *
*        REG. 13----==> HASPCOMM PCE                                  *
*                                                                     *
*        REG. 14------CONTAINS RETURN ADDRESS                         *
*                                                                     *
*        REG. 15------CONTAINS ENTRY POINT ADDRESS                    *
*                                                                     *
*  RETURN CODES:                                                      *
*                                                                     *
*       0 - CONTINUE JES2 COMMAND PROCESSING.                         *
*       4 - SAME AS 0.                                                *
*       8 - BYPASS JES2 PROCESSING, NO MESSAGE.                       *
*      12 - BYPASS JES2 PROCESSING, RETURN "$HASP000 OK".             *
*      16 - BYPASS JES2 PROCESSING, ISSUE MESSAGE IN "COMMAND" FLD.   *
*                                                                     *
*                                                                     *
*     NOTE: R12 IS USED THROUGHOUT THE PROGRAM AS HA$PCOMM BASE.      *
*  THIS IS STILL NEEDED FOR SOME STUPID COMM MACROS ($CFRTC ETC.)     *
*  SINCE THEY DON'T ESTABLISH LOCAL ADDRESSABILITY.                   *
*                                                                     *
*  ROUTINE DESCRIPTION:                                               *
*                                                                     *
*       THIS ROUTINE WILL PERFORM JES2 COMMAND PROCESSING FOR THE     *
*    FOLLOWING COMMAND:                                               *
*                                                                     *
*    1). $QS.  SYNTAX IS AS FOLLOWS:                                  *
*                                                                     *
*                   $QS <JNN <-NN> >                                  *
*                                                                     *
*        COMMAND WILL DISPLAY SETUP CARD CONTENTS FOR JOBS IN THE     *
*     JOB RANGE ENTERED. DEFAULT - ALL JOBS.                          *
*                                                                     *
*     FOR EACH SUCH JOB WITHIN JOB RANGE, THE JCT, IOT AND JCL FILES  *
*     ARE READ FROM SPOOL. JCL FILE IS DEBLOCKED AND THE /*SETUP      *
*     IMAGES ARE SEARCHED FOR. IF YOU HAVE A BIG NUMBER OF JOBS       *
*     WITH /*SETUP, THIS CAN BE SLIGHTLY HEAVY.                       *
*                                                                     *
*                                                                     *
***********************************************************************
        EJECT ,
***********************************************************************
*                                                                     *
*          MAINTENANCE   LOG                                          *
*          =================                                          *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
         SPACE 2
        $SAVE                      SAVE REGISTERS.
         LR    R8,R15              LOAD BASE REGISTER.
         USING HCTDSECT,R11        R11 HAS HCT ADDRESS.
         SPACE 3
***********************************************************************
*                                                                     *
*  EXIT IF NOT OUR COMMAND.                                           *
*                                                                     *
***********************************************************************
         SPACE 2
         CLC   =C'QS',COMVERB          VERB = "QS" ??
         BE    QSCOMM                  YES - TAKE EXIT
*
         B     X5RC0                   NOT OUR COMMAND. RETURN.
         EJECT
***********************************************************************
*                                                                     *
*  PROCESS THE $QS COMMAND.                                           *
*                                                                     *
*  FIRST WE TRY TO SERVE MLWTO REQUESTS (L=CCA) FOR CONSOLES.         *
*  JES2 DOES NOT GIVE THIS SERVICE TO EXIT 5 COMMAND. STILL,          *
*  WE DON'T DO MESSAGE REDIRECTION AND CONSOLE AREA VERIFICATION.     *
*                                                                     *
***********************************************************************
         SPACE 1
QSCOMM   DS    0H
         TM    COMFLAG,CMBFLAGU        UCM COMMAND ?
         BZ    QSNOMLW                 NO. SKIP MLWTO TESTS.
         CLI   COMUCMA,0               MLWTO OUTPUT ?
         BE    QSNOMLW                 NO.
         MVI   COMLINET,X'80'          SET FOR MLWTO CONTROL LINE.
        $CWTO  L=L'COMMAND,MSGID=636   REPEAT THE COMMAND ENTERED.
         MVI   COMLINET,X'20'          SET FOR DATA LINE.
QSNOMLW  DS    0H
         SPACE 2
***********************************************************************
*                                                                     *
*  INITIALIZE COMMAND WORK AREA AND DEFAULT PARM VALUES.              *
*                                                                     *
***********************************************************************
         SPACE 1
         XC    QSWORK(QSWLEN),QSWORK   ZERO W.A.
*
         SLR   R1,R1
         STH   R1,QSLOWJN              LOW JOB NUMBER=ZERO
         LH    R1,$NUMJBNO             HIGH JOB NUMBER.
         STH   R1,QSHIGHJN             KEEP.
         EJECT
***********************************************************************
*                                                                     *
*  EXAMINE OPERANDS, BRANCH ACCORDINGLY.                              *
*                                                                     *
***********************************************************************
         SPACE 1
QSOPRND  DS    0H
         L     R1,0(,R5)               POINT TO CURRENT OPERAND.
         L     R0,4(,R5)               AND NEXT.
         BXH   R5,R6,QSOPOK            BRANCH IF ONLY 1 OPERAND.
         B     X5INVO
QSOPOK   DS    0H
         SR    R5,R6                   BACK TO OPERAND (BXH BUMPED R5)
         SR    R0,R1                   LENGTH OF CURRENT OPERAND +1.
         CH    R0,$H2                  ANY OPERAND AFTER $QS ?
         BNH   QSOPDONE                NO. GO PROCESS COMMAND.
         CLI   1(R1),C'J'              "J" OPERAND ?
         BE    QSJ                     GO PROECSS.
         B     X5INVO                  NO MORE VALID OPERANDS.
         EJECT
***********************************************************************
*                                                                     *
*  PROCESS JOB NUMBER RANGE.                                          *
*                                                                     *
***********************************************************************
         SPACE 1
QSJ      DS    0H
         L     R1,0(,R5)           -> OPERAND (1 BYTE BEFORE "J").
         SLR   R15,R15             SET LENGTH TO ZERO
         LA    R1,2(R1)            INDEX PAST 'SJ' ETC
         LR    R14,R1              SAVE START OF OPERAND
         MVI   QSLOWJN,X'FF'       SET START OF PROCESSING INDICATOR
QSJ1     CLI   0(R1),C'-'          END OF FIRST OPERAND
         BE    QSJ2                YES, BRANCH
         CLI   0(R1),C','          END OF ALL OPERANDS
         BE    QSJ2                YES, BRANCH
         CLI   0(R1),C' '          END OF ALL OPERANDS
         BE    QSJ2                YES, BRANCH
         CLI   0(R1),C'0'          NUMERIC OPERAND
         BL    X5INVO              NO, ERROR
         CLI   0(R1),C'9'          NUMERIC OPERAND
         BH    X5INVO              NO, ERROR
         LA    R1,1(,R1)           INCREMENT TO NEXT CHAR JOB NUMBER
         LA    R15,1(,R15)         ADD 1 TO OPERAND LENGTH
         B     QSJ1                LOOP UNTIL DONE
QSJ2     LTR   R15,R15             TEST LENGTH
         BZ    X5INVO              ZERO, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         EX    R15,QSPACKJ         PACK JOB NUMBER
         CVB   R15,$DOUBLE         CONVERT TO BINARY
         C     R15,=F'20000'       SEE IF NUMBER TOO LARGE
         BH    X5INVO              YES, ERROR
         CLI   0(R1),C'-'          LOW JOB OF RANGE
         BE    QSJ3                YES, BRANCH
         STH   R15,QSHIGHJN        SAVE HIGH JOB NUMBER
         CLI   QSLOWJN,X'FF'       IS THIS THE FIRST JOB NUMBER
         BNE   QSJ4                NO, ALL DONE WITH NUMBER, BRANCH
         STH   R15,QSLOWJN         SAVE LOW JOB NUMBER
         B     QSJ4                ALL DONE WITH NUMBER, BRANCH
QSJ3     CLI   QSLOWJN,X'FF'       HAS LOW JOB NUMBER ALREADY BEEN PROC
         BNE   X5INVO              YES, ERROR
         STH   R15,QSLOWJN         SAVE LOW JOB NUMBER
         LA    R1,1(,R1)           INCREMENT PAST '-'
         LR    R14,R1              SAVE START OF OPERAND
         SLR   R15,R15             RESET LENGTH TO ZERO
         B     QSJ1                LOOP FOR NEXT NUMBER OF RANGE
QSPACKJ  PACK  $DOUBLE,0(0,R14)    PACK JOB NUMBER
         SPACE 1
QSJ4     DS    0H
         EJECT ,
***********************************************************************
*                                                                     *
*    START JOB QUEUE SCAN, WITHIN SPECIFIED LIMITS.                   *
*                                                                     *
*    REGISTER USAGE:                                                  *
*                                                                     *
*       R0 - R3 - WORK.                                               *
*       R4 - R5 - JOB QUEUE SCAN REGS.                                *
*       R6 -      UNUSED.                                             *
*       R7 -      BASE FOR HDB FROM SPOOL.                            *
*       R8 -      PROGRAM BASE.                                       *
*       R9 -      JES2 BUFFER (JCT, IOT, JCL FILE BUFFER).            *
*       R10-      JQE ADDRESS.                                        *
*       R11-      UNUSED.                                             *
*       R12-      BASE OF HA$PCOMM (CURRENTLY UNUSED, FOR $CF.. MACROS)
*       R13-      PCE                                                 *
*       R14-R15 - WORK.                                              *
*                                                                     *
*                                                                     *
***********************************************************************
         SPACE 1
QSOPDONE DS    0H
         LA    R4,QINXJOB          PREPARE TO SCAN
         IC    R4,$QINDEX(R4)       EXECUTION QUEUES
         SLR   R5,R5                 BY CLASS
*
QSNXTQUE DS    0H
         LA    R5,$JQHEADL(,R5)    ADD TO INDEX INTO THE QUEUE
         CL    R5,=A($JQCLSSZ)     IS THERE ANOTHER EXEC QUEUE...
         BH    QSENDJQE            BRANCH IF NO
         LA    R10,0(R4,R5)        PREPARE TO SCAN NEXT EXECUTION
         LA    R10,$JQHEADS-2*$JQHEADL-QUENEXT(R10) QUEUE
         SPACE 1
         USING JQEDSECT,R10        PROVIDE JQE ADDRESSABILITY
         SPACE 1
QSNXTJQE DS    0H
         L     R10,JQENEXT         GET OFFSET OF JQE
         N     R10,$ZEROFFF        END OF EXECUTION QUEUE...
         BZ    QSNXTQUE            BR IF END OF CURRENT QUEUE
         AL    R10,$JOBQPTR        CONVERT OFFSET TO ABSOLUTE ADDR
         SPACE 2
***********************************************************************
*                                                                     *
*     HERE WE DO SOME VALIDATION; SINCE OUR PROCESSING INVOLVES $WAIT,*
*  IT MIGHT HAPPEN THAT THE JOB QUEUE HAS CHANGED DURING OUR PROCESS. *
*  THUS, IF WE FIND OURSELVES ALL OF A SUDDEN IN A NON-EXECUTION      *
*  QUEUE, IT MEANS THAT SOMETHING HAS CHANGED; THEN WE SHALL INITIATE *
*  RECOVERY (START THE WHOLE PROCESS ANEW). STILL, SOME PROBLEMS      *
*  MAY STILL OCCUR, SINCE WE ARE NOT SYNCHRONIZED WITH OTHER JES2     *
*  PROCESSES; I BELIEVE THAT THE WORST THAT CAN HAPPEN IS SOME        *
*  JOBS LISTED TWICE, OR SOME OTHERS MISSED; NO ABEND IS EXPECTED.    *
*  THIS WILL BE VERY RARE, SO LET IT BE.                              *
*                                                                     *
***********************************************************************
         SPACE 1
*        TM    JQETYPE,$XEQ        ON EXECUTION QUEUE ?
*        BZ    QSRCOVER            NO - GO RECOVER.
*        CLI   JQETYPE,$XEQ        MAYBE CONVERSION ?
*        BE    QSRCOVER            YES. TOO BAD.
*
*        TM    JQEIFLG1,QUEI1STP   /*SETUP IN JOB ??
*        BZ    QSNXTJQE            NO - BR TO TEST NEXT JQE
         CLC   QSLOWJN,QSHIGHJN    A SPECIFIC JOB REQUEST ?
         BE    QSHOLDOK            YES. SHOW EVEN IF NOT HELD.
*        TM    JQEFLAGS,QUEHOLD1   "HOLD SINGLE" ??
*        BZ    QSNXTJQE            NO - HE AIN'T "SETUP" ANY MORE.
QSHOLDOK DS    0H
*        TM    JQEFLAGS,QUEBUSY    IF JOB ACTIVE,
*        BNZ   QSNXTJQE             BR TO TEST NEXT JQE
         LH    R0,JQEJOBNO         GET JOB NUMBER
         CH    R0,QSLOWJN          BELOW LOWER LIMIT ?
         BL    QSNXTJQE            DON'T TAKE.
         CH    R0,QSHIGHJN         ABOVE HIGHER ?
         BH    QSNXTJQE            NO GO.
         EJECT ,
***********************************************************************
*                                                                     *
*   WE HAVE A JOB TO PROCESS. READ JOB'S JCT, THEN 1ST IOT.           *
*                                                                     *
***********************************************************************
         SPACE 1
         NI    QSFLAG,FF-QSFSETUP      NO /*SETUP FOUND YET.
         TM    QSFLAG,QSFBUF           HAVE BUFFER IN R9 ?
         BO    QSBUFOK
        $GETBUF TYPE=HASP,WAIT=YES     GET A JES2 BUFFER.
         OI    QSFLAG,QSFBUF           MARK WE HAVE BUFFER.
         LR    R9,R1                   POINT AT IT.
QSBUFOK  DS    0H
*
         MVI   PCEDEVTP,PCEDARD        MARK "READ DA"
         ST    R9,PCEBUFAD             STORE BUFFER ADDRESS.
         L     R1,JQETRAK              GET JCT ADDRESS.
         ST    R1,PCESEEK              INTO PCE FOR I/O.
         BAL   R14,QSVMTTR             GO VALIDATE MTTR (SPOOL ONLINE) C
                                       ... (NO RETURN IF INVALID).
        $JCTIO ,
         BNO   QSJCTERR                BRANCH IF UNSUCCESSFUL
         USING JCTDSECT,R9
         L     R0,$JOBQPTR             VALIDATE JCT:
         AL    R0,JCTJQE               GET JQE ADDRESS FROM JCT.
         CLR   R0,R10                  COMPARE TO CURRENT JQE.
         BNE   QSJCTERR                SORRY, SOMETHING'S WRONG.
         MVC   QSJBKEY,JCTJBKEY        KEEP JOB KEY.
*
*   READ 1ST IOT.
*
         MVC   PCESEEK,JCTIOT          MOVE MTTR TO PCE.
         BAL   R14,QSVMTTR             GO VALIDATE MTTR (SPOOL ONLINE) C
                                       ... (NO RETURN IF INVALID).
         LA    R1,PCEDADCT             GET DA DCT.
        $EXCP  (R1),WAIT=YES           EXCP, WAIT FOR COMPLETION.
         BNO   QSIOTERR                SORRY.
         DROP  R9
         USING IOTDSECT,R9
         CLC   IOTID,=CL4'IOT'         VALID IOT ?
         BNE   QSIOTERR                NO - BRANCH.
         CLC   QSJBKEY,IOTJBKEY        SAME JOB KEY ?
         BNE   QSIOTERR                NO. SOMETHING MESSED UP.
         EJECT ,
***********************************************************************
*                                                                     *
*  1ST PDDB IN 1ST IOT IS JCL FILE. IF VALID, READ 1ST BLOCK.         *
*                                                                     *
***********************************************************************
         SPACE 1
         L     R1,IOTPDDB              OFFSET TO 1ST PDDB.
         ALR   R1,R9                   ADDRESS OF THAT PDDB.
         USING PDBDSECT,R1
         CLC   PDBDSKEY,=Y(PDBINJCL)   MUST BE INPUT JCL.
         BNE   QSPDBERR                SOME ERROR HERE.
*
         ICM   R0,B'1111',PDBMTTR      1ST BLOCK'S MTTR.
         BZ    QSSTPERR                FUNNY IF JCL FILE NOT FOUND.
         DROP  R1
*
QSNEWBUF DS    0H
         ST    R0,PCESEEK              STORE MTTR FOR $EXCP.
         BAL   R14,QSVMTTR             GO VALIDATE MTTR (SPOOL ONLINE) C
                                       ... (NO RETURN IF INVALID).
         LA    R1,PCEDADCT             GET DA DCT.
        $EXCP  (R1),WAIT=YES           EXCP, WAIT FOR COMPLETION.
         BNO   QSIOERR                 SORRY.
         DROP  R9                      NO IOT ANY MORE.
         USING BUFDSECT,R9
         CLC   HDBJBKEY,QSJBKEY        SAME JOB KEY ?
         BNE   QSIOERR                 SOMETHING WENT WRONG.
*
         LA    R7,HDBSTART             START OF LOGICAL RECORDS.
         USING LRCDSECT,R7
QSNEWLRC DS    0H
         CLI   LRCTLENG,LRCBFEND       END OF BUFFER ??
         BE    QSNXTBUF                YES. TRY TO READ NEXT.
         TM    LRCFLAG1,LRC1INUL       "NULL ON INPUT" ?
         BNO   QSNXTLRC                NO. WE LOOK ONLY FOR THOSE.
         LA    R14,LRCTEXT             ASSUME NO C.C.
         TM    LRCFLAG1,LRC1CCTL       BUT THERE MIGHT BE.
         BNO   *+8
         LA    R14,LRCSOUT             IF C.C., POINT AT REAL TEXT.
         CLC   =C'/*SETUP ',0(R14)     THE RIGHT ONE ? (IGNORE C.C.).
         BNE   QSNXTLRC                GET NEXT LRC.
         EJECT ,
***********************************************************************
*                                                                     *
*        WRITE THE MESSAGE FOR THIS JOB.                              *
*                                                                     *
*    THE MESSAGE CONTAINS THE CARD TEXT,  ALL EXCEPT THE '/*SETUP '   *
*  ITSELF.                                                            *
*                                                                     *
*    THE   LINE IS WRITTEN WITH CMBFLAGJ ON; THIS MEANS THAT $WTO     *
*  PROCESS WILL USE R10 AS JQE OR JCT ADDRESS TO INSERT JOB INFO.     *
*  NOTE THAT "JOB=YES" IN $CWTO IN *NOT* SIMILAR: THIS ONLY "TELLS"   *
*  CWTO THAT WE HAVE ALREADY INSERTED JOB INFORMATION INTO THE        *
*  MESSAGE.                                                           *
*                                                                     *
***********************************************************************
         SPACE 2
         LA    R0,QSM1TEXT         POINT AT TARGET.
         LA    R1,L'QSM1TEXT       LENGTH.
*
         SLR   R15,R15             CLEAR FOR INSERT.
         IC    R15,LRCTLENG        GET TEXT LENGTH
         SH    R15,=H'8'           SUBTRACT LENGTH OF '/*SETUP '
         BP    *+6                 IF NON-POSITIVE ..
         SLR   R15,R15             ... MAKE ZERO.
         ICM   R15,B'1000',=X'40'  INSERT PAD CHARACTER.
         LA    R14,8(,R14)         ADVANCE TEXT PTR AFTER '/*SETUP '
*
         MVCL  R0,R14              ZOOOP .. MOVE TEXT.
*
         OI    COMFLAG,CMBFLAGJ    SET JOB INFO REQ'D (R10 SET TO JQE)
*
        $CWTO  MSG=QSMSG1,         DISPLAY MESSAGE                     C
               L=QSM1LEN,                                              C
               MSGID=103           AS $HASP103
*
         NI    COMFLAG,FF-CMBFLAGJ DELETE "JOB=YES"
*
         OI    QSFLAG,QSFFOUND+QSFSETUP  TURN ON MATCH FOUND SWITCHES
         SPACE 2
*
*  LOCATE NEXT LRC.
*
QSNXTLRC DS    0H
         SLR   R1,R1
         IC    R1,LRCTLENG             GET LENGTH OF TEXT.
         TM    LRCFLAG1,LRC1CCTL       CARRIAGE CONTROL ?
         LA    R7,LRCTEXT(R1)          POINT TO NEXT LRC.
         BZ    QSNEWLRC                IF NO C.C., THAT'S FINE.
         LA    R7,LRCSOUT-LRCTEXT(,R7) ACCOUNT FOR C.C.
         B     QSNEWLRC                PROCESS NEW LRC.
         SPACE 2
*
*  TRY TO GET NEXT JES2 BUFFER MTTR ON CHAIN.
*
QSNXTBUF DS    0H
         ICM   R0,B'1111',HDBNXTRK     NEXT TRACK.
         BNZ   QSNEWBUF                IF THERE IS ONE, DE-BLOCK IT.
*
* END OF JOB'S JCL; IF /*SETUP NOT LOCATED, PRINT ERROR.
*
         TM    QSFLAG,QSFSETUP         ANYTHING FOUND ?
         BO    QSNXTJQE                YES - OK.
         B     QSSTPERR                SHOUT ABOUT THIS JOB.
         DROP  R7,R9,R10
         EJECT
***********************************************************************
*                                                                     *
*        END OF ALL JQES.  IF NO MESSAGES WERE ISSUED, ISSUE          *
*        A MESSAGE THAT NO JOB WAS FOUND.                             *
*                                                                     *
***********************************************************************
QSENDJQE DS    0H
         TM    QSFLAG,QSFBUF       WAS A JES2 BUFFER OBTAINED ?
         BZ    QSENDBUF
        $FREEBUF (R9)              FREE THE BUFFER
*
QSENDBUF DS    0H
         TM    QSFLAG,QSFFOUND     WAS A MATCH FOUND
         BNZ   QSENDMSG            YUP, NO MESSAGE.
*
        $CWTO  MSG='NO SETUP JOB(S) FOUND',MSGID=919
*
QSENDMSG DS    0H
         B     X5RC8               GET OUT
         EJECT ,
***********************************************************************
*                                                                     *
*   QSVMTTR - VALIDATE MTTR IN PCESEEK.                               *
*                                                                     *
*      THIS ROUTINE CHECKS THE SPOOL EXTENT FROM "PCESEEK" ("M" OF    *
*   THE MTTR) TO BE AVAILABLE FOR I/O. THE $DAS IS INSPECTED (DAS     *
*   IN PRIVATE AREA). IF SPOOL INACTIVE FOR JOB, WE DON'T RETURN -    *
*   BUT RATHER BRANCH TO ISSUE MESSAGE AND TAKE NEXT JOB.             *
*                                                                     *
*      NOTE, THAT THE EASIER WAY TO DO THAT WAS TO TEST THE JOB'S     *
*   SPOOL MASK IN THE JQE AND REJECT IT IF NOT ALL ONLINE. HOWEVER,   *
*   SINCE WE WANT TO GIVE BEST RESULTS, WE TRY: IT MIGHT BE THAT THE  *
*   JOB DOES HAVE INACTIVE SPOOL EXTENTS, BUT THESE WILL NOT GET IN   *
*   OUR WAY TO READ JCT, IOT AND JCL FILE. SO WE TEST EACH MTTR. IF   *
*   WE BUMP INTO AN INACTIVE SPOOL EXTENT, WE GIVE UP; YOU CAN'T SAY  *
*   WE DIDN'T GIVE IT A TRY.                                          *
*                                                                     *
*   INPUT:  PCESEEK = MTTR.                                           *
*               R14 = RETURN ADDRESS.                                 *
*                                                                     *
***********************************************************************
         SPACE 2
QSVMTTR  DS    0H
         SLR   R15,R15                 CLEAR FOR IC
         IC    R15,PCESEEK             GET M OF MTTR (EXTENT NUMBER).
         MH    R15,=Y(DASSIZ)          TIMES SIZE OF $DAS
         AL    R15,$DASFRST            POINT TO DAS ENTRY
         USING DASDSECT,R15
         TM    DASFLAG,DASAVAIL        EXTENT AVAILABLE ?
         BNZR  R14                     RETURN IF YES.
*
*  GET THE VOLSER AND ISSUE "SPOOL INACTIVE" MESSAGE.
*
         MVC   QSDASERV,DASVOLID       MOVE VOLID TO MESSAGE.
         LA    R1,QSDASERM             GET MESSAGE
         LA    R0,L'QSDASERM           AND LENGTH
         B     QSJOBERR                GO ISSUE MESSAGE.
         DROP  R15
         EJECT ,
***********************************************************************
*                                                                     *
*   CONSTANTS AND VARIABLES.                                          *
*                                                                     *
***********************************************************************
QSMSG1   DS    0C
QSM1TEXT DC    CL63' '                 /*SETUP CARD TEXT.
         DC    CL17' '                 FILLER
QSM1LEN  EQU   *-QSMSG1
*
QSWORK   DS    0F                      ROUTINE WORK AREA
QSFLAG   DS    X                       FLAGS
QSFFOUND EQU   X'80'                   SOMETHING LISTED.
QSFSETUP EQU   X'40'                   /*SETUP FOUND FOR THIS JOB
QSFBUF   EQU   X'20'                   A JES2 BUFFER WAS OBTAINED.
QSFRCVR  EQU   X'10'                   RECOVERY INITIATED FOR $QS.
         DS    X                       ** AVAILABLE
QSLOWJN  DS    H                       JOB NUM LOW LIMIT
QSHIGHJN DS    H                       JOB NUM HIGH LIMIT.
QSJBKEY  DS    XL4                     CURRENT JOB KEY.
QSWLEN   EQU   *-QSWORK
         EJECT ,
***********************************************************************
*                                                                     *
*  RETURN FROM EXIT.                                                  *
*                                                                     *
***********************************************************************
         SPACE 1
X5RC0    DS    0H
         LA    R15,0
         B     X5RET
*
X5RC8    DS    0H
         LA    R15,8
         B     X5RET
*
X5RC12   DS    0H
         LA    R15,12
         B     X5RET
*
X5RET   $RETURN RC=(R15)
         SPACE 2
***********************************************************************
*                                                                     *
*    ERROR SITUATIONS.                                                *
*                                                                     *
***********************************************************************
         SPACE 1
*
*  INVALID OPERAND DETECTED.
*
X5INVO   DS    0H                      INVALID OPERAND.
         MVC   X5IMOP,=CL8' '          CLEAR OPERAND IN MESSAGE.
         LM    R2,R3,0(R5)             LOAD CURRENT & NEXT OPERANDS
         SR    R3,R2                   GET LENGTH.
         SH    R3,=H'2'                1 FOR DELIMITER, 1 FOR MACHINE
         BM    X5INV10                 SKIP INSERTION IF NULL.
         CH    R3,=H'7'                MORE THEN 8 CHARS ?
         BNH   *+8                     NO - OK.
         LA    R3,7                    MAXIMUM IS 8 CHARS IN MESSAGE.
         EX    R3,X5IMVC               MOVE OPERAND TO MESSAGE.
X5INV10  DS    0H
*
         LA    R0,X5IMSGL
        $CWTO  MSG=X5IMSG,                                             C
               MSGID=650,                                              C
               L=(R0)
         B     X5RC8
*
X5IMSG   DS    0C
X5IMOP   DS    CL8                     OPERAND IN MESSAGE.
         DC    C' INVALID OPERAND'
X5IMSGL  EQU   *-X5IMSG
*
X5IMVC   MVC   X5IMOP(*-*),0(R2)
         EJECT ,
*
*  ERROR CONDITIONS WITHIN $QS.
*
QSJCTERR DS    0H
         LA    R1,QSJCTERM             GET MESSAGE
         LA    R0,L'QSJCTERM           AND LENGTH
         B     QSJOBERR                GO ISSUE MESSAGE.
*
QSIOTERR DS    0H
         LA    R1,QSIOTERM             GET MESSAGE
         LA    R0,L'QSIOTERM           AND LENGTH
         B     QSJOBERR                GO ISSUE MESSAGE.
*
QSPDBERR DS    0H
         LA    R1,QSPDBERM             GET MESSAGE
         LA    R0,L'QSPDBERM           AND LENGTH
         B     QSJOBERR                GO ISSUE MESSAGE.
*
QSIOERR  DS    0H
         LA    R1,QSIOERM              GET MESSAGE
         LA    R0,L'QSIOERM            AND LENGTH
         B     QSJOBERR                GO ISSUE MESSAGE.
*
QSSTPERR DS    0H
         LA    R1,QSSTPERM             GET MESSAGE
         LA    R0,L'QSSTPERM           AND LENGTH
         B     QSJOBERR                GO ISSUE MESSAGE.
*
* ISSUE JOB RELATED ERROR MESSAGE:
*
*   R0 =  MESSAGE LENGTH
*   R1 -> MESSAGE TEXT
*   R10-> JQE.
*
QSJOBERR DS    0H
         OI    COMFLAG,CMBFLAGJ        MARK JOB INFO TO BE APPENDED
        $CWTO  MSG=(R1),                                               C
               L=(R0),                                                 C
               MSGID=990
         NI    COMFLAG,FF-CMBFLAGJ     RESET "JOB=YES"
         OI    QSFLAG,QSFFOUND         FAKE /*SETUP FOUND TO SKIP THE  C
                                       ... "NO SETUP FOUND" MESSAGE.
         B     QSNXTJQE
         EJECT ,
***********************************************************************
*                                                                     *
*   AT THIS POINT, RECOVERY IS SCHEDULED FOR JQE CHASE ERRORS: IT     *
* MIGHT HAPPEN THAT THE JOB QUEUE IS CHANGED WHEN WE $WAIT FOR I/O.   *
* IF WE DETECT THIS SORT OF CONDITION, WE ISSUE A MESSAGE AND START   *
* THE JOB QUEUE SCAN ALL OVER AGAIN.                                  *
*                                                                     *
***********************************************************************
         SPACE 1
QSRCOVER DS    0H
         TM    QSFLAG,QSFRCVR          RECOVERY ALREADY DONE ONCE ?
         BO    QSRJQERR                SORRY. NO RECURSION.
*
        $CWTO  MSG=QSRCVERM,           "RECOVERY INITIATED"            C
               L=L'QSRCVERM,                                           C
               MSGID=990
*
         OI    QSFLAG,QSFRCVR                 REMEMBER RECOVERY.
         NI    QSFLAG,FF-QSFFOUND-QSFSETUP    CLEAR FLAGS.
         B     QSOPDONE                       START ALL OVER AGAIN
         SPACE 2
***********************************************************************
*                                                                     *
*  ISSUE "LIST INCOMPLETE" ($HASP611).                                *
*                                                                     *
***********************************************************************
         SPACE 1
QSRJQERR DS    0H
        $CWTO  MSG='LIST INCOMPLETE',                                  C
               MSGID=611
*
         B     X5RC8                   TERMINATE COMMAND PROCESSOR.
         EJECT ,
QSJCTERM DC    C'** ERROR - JCT COULD NOT BE READ'
QSIOTERM DC    C'** ERROR - IOT COULD NOT BE READ'
QSPDBERM DC    C'** ERROR - INPUT JCL PDDB NOT LOCATED'
QSIOERM  DC    C'** ERROR - I/O ERROR READING JCL FILE'
QSSTPERM DC    C'** ERROR - /*SETUP CARD NOT FOUND FOR JOB'
QSDASERM DC    C'** ERROR - SPOOL EXTENT INACTIVE (XXXXXX)'
QSDASERV EQU   *-7,6,C'C'
QSRCVERM DC    C'--- RECOVERY INITIATED FOR $QS COMMAND ---'
         LTORG ,
        $MODEND ,
         END
