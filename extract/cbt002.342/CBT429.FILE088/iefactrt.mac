ACTR     TITLE 'IEFACTRT - ACCOUNTING ROUTINE DOCUMENTAION'
*        MVS SMF ACCOUNTING ROUTINE TO PUT STEP STATISTICS
*        ON JOB OUTPUT AND THE SYSTEM CONSOLE.  OPTIONALLY,
*        A MESSAGE MAY ALSO BE SENT TO A TSO USER.
*
*        REGISTER USAGE:
*
*              R0   ON ENTRY CONTAINS REASON FOR ENTRY + USED AS
*                       WORK REGISTER
*              R1   ON ENTRY POINTS TO SMF PARAMETER LIST + USED AS
*                       WORK REGISTER
*              R2   WORK REGISTER
*              R3   POINTS TO SMF RECORD RDW (TYPE 4 FOR A BATCH JOB,
*                       OR TYPE 34 FOR A TSO USER)
*              R4   USED AS WORK REGISTER
*              R5   WORK REGISTER
*              R6   WORK REGISTER
*              R7   WORK REGISTER
*              R8   RETURN FOR BRANCH AND LINK INSTRUCTIONS +
*                       USED AS A TEMP BASE IN ESTAE ROUTINES
*              R9   WORK REGISTER + USED AS POINTER TO RELOCATE
*                       SECTION OF SMF RECORD
*              R10  BASE REGISTER
*              R11  POINTS TO SMF PARAMETER LIST
*              R12  ADDRESS OF LINKAGE CONTROL TABLE (USED TO PASS
*                       PARAMETERS TO 'IEFYS' ROUTINE)
*              R13  SAVE AREA AND BASE FOR WORKAREA DSECT
*              R14  RESERVED FOR LINKAGE + USED AS WORK REGISTER
*              R15  RESERVED FOR LINKAGE + USED AS WORK REGISTER
*
*        STEP ACCOUNTING DATA WHICH IS PRINTED IS DESCRIBED BELOW:
*
*              STEP NAME
*              PROGRAM NAME (FROM JCL 'EXEC' CARD)
*              STEP START TIME
*              STEP STOP TIME
*              ELAPSED TIME
*              ALLOCATION START TIME
*              PROGRAM LOAD TIME
*              STEP CPU TIME UNDER TCB'S
*              STEP CPU TIME UNDER SRB'S
*              STORAGE USED FROM BOTTOM OF PRIVATE AREA
*              STORAGE USED FROM TOP OF PRIVATE AREA
*              SIZE OF PRIVATE AREA
*              STEP COMPLETION STATUS (& CODE, IF APPLICABLE)
*              NUMBER OF DISK UNITS USED
*              NUMBER OF DISK EXCP'S
*              NUMBER OF TAPE UNITS USED
*              NUMBER OF TAPE EXCP'S
*              NUMBER OF VIO EXCP'S (IF ANY)
*
*              PERFORMANCE GROUP NUMBER
*              # OF SERVICE UNITS USED
*              STEP ACTIVE TIME
*              # PAGES PAGED IN
*              # PAGES PAGED OUT
*              # TIMES SWAPPED
*              # PAGES SWAPPED IN
*              # PAGES SWAPPED OUT
*              # VIO PAGES PAGED IN
*              # VIO PAGES PAGED OUT
*
*        STEP ACCOUNTING DATA WHICH IS WRITTEN ON THE SYSTEM
*        CONSOLE IN THE FORMAT DESCRIBED BELOW
*
*    STEPNAME/PGMNAMEX/CP:UT:IM.EX/WA:LL:TI/CCODE/ACCTINFO/JOBNAMEX
*
*        WHERE:
*
*              STEPNAME     IS STEPNAME
*              PGMNAMEX     IS PROGRAM NAME (FROM JCL 'EXEC' CARD)
*              CP:UT:IM.EX  IS STEP CPU TIME (UNDER TCB'S) IN
*                               HUNDREDTHS OF SECONDS
*              WA:LL:TI     IS ELAPSED WALL TIME FOR STEP EXECUTION
*              CCODE        IS STEP EXECUTION STATUS/CODE, IN ONE
*                               OF THE FOLLOWING FORMATS:
*                  NNNNN    CONDITION CODE IF STEP WAS EXECUTED
*                               AND TERMINATED NORMALLY
*                  UNNNN    USER ABEND CODE IN DECIMAL
*                  S-HHH    SYSTEM ABEND CODE IN HEXADECIMAL
*                  NOXEC    IF STEP WAS FLUSHED (I.E., NOT
*                               EXECUTED AT ALL
*              ACCTINFO     ACCOUNTING INFO (FROM JOBCARD)
*              JOBNAMEX     JOBNAME
*
*        OPTIONAL TSO TERMINAL USER NOTIFICATION OF STEP
*        TERMINATION IS REQUESTED BY CODING AN ACCOUNTING
*        PARAMETER IN THE FOLLOWING FORMAT ON THE JCL EXEC
*        STATEMENT OF THE STEP FOR WHICH NOTIFICATION IS DESIRED:
*
*    NOTIFY=USERID,OPTIONALUSERDATA
*
*        WHERE:
*
*              USERID       IS LOGON ID OF USER TO BE NOTIFIED
*              OPTIONALUSERDATA  IS UP TO 32 BYTES OF USER
*                               DATA WHICH MAY OPTIONALLY BE
*                               SPECIFIED TO BE ADDED TO THE
*                               NOTIFICATION MESSAGE
*
*        FORMAT OF MESSAGE SENT TO TSO USER IS AS FOLLOWS:
*
*    JOBNAMEX (JES2JOB#)/STEPNAME/CCODE OPTIONALUSERDATA
*
*        WHERE THE MEANING OF THE PARAMETERS IS AS PER ABOVE.
*
***********************************************************************
         SPACE 3
         LCLA  &SP                 SUBPOOL FOR GETMAIN FOR WORKAREA
&SP      SETA  241
         TITLE 'IEFACTRT - SMF JOB/STEP TERMINATION ACCOUNTING'
         PRINT NOGEN
LCT      DSECT
         IEFALLCT
         SPACE 3
SMFR     DSECT
         IFASMFR (4,34)       I USE THE SMF TYPE 4 RECORD DEFINITION   X
                              TO MAP BOTH TYPE 4 AND TYPE 34 RECORDS   X
                              --- WATCH OUT FOR DIFFERENCES
         SPACE 3
         PRINT GEN
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
LENFACT  EQU   106
SPACE    EQU   X'40'
ASTERISK EQU   C'*'
COMMA    EQU   C','
RPARENS  EQU   C')'
LPARENS  EQU   C'('
SLASH    EQU   C'/'
DADEV    EQU   X'20'          UCBTYP MASK FOR DIRECT ACCESS            X
                              STORAGE CLASS DEVICES
TADEV    EQU   X'80'               UCBTYP MASK FOR MAG TAPE DEVICES
CVTPTR   EQU   X'4C'               PSA POINTER TO CVT
         SPACE 3
         PRINT NOGEN
         IEZJSCB
         IHASDWA
         SPACE 3
         PRINT GEN
IEFACTRT CSECT
         USING LCT,R12
         USING IEFACTRT,R15
         B     SAVEREGS
         DC    AL1(SAVEREGS-*)                      LENGTH
         DC    C' IEFACTRT &SYSDATE &SYSTIME '      ** EYE CATCHER **
SAVEREGS STM   R14,R12,12(R13)
         DROP  R15
         LR    R10,R15             LOAD BASE REGISTER
         USING IEFACTRT,R10        USE R10 AS BASE
         LR    R11,R1              SAVE PARAMETER LIST
         LR    R5,R0               SAVE ENTRY TYPE
         GETMAIN R,LV=AREASIZE,SP=&SP
         USING WORKAREA,R1
         ST    R10,SAVE10     SAVE BASE REGISTER
         ST    R13,SAVE13     SAVE CALLER'S R13 (I AM NOT FOLLOWING    X
                              STANDARD LINKAGE CONVENTIONS HERE ---    X
                              THE REASON IS THAT I ALSO USE MY
*                                  SAVEAREA AS THE 45 WORD WORKAREA
*                                  REQUIRED BY 'IEFYS', AND I DON'T
*                                  KNOW WHAT HE DOES WITH IT)
         LR    R13,R1
         DROP  R1
         USING WORKAREA,R13
* PROTECT YOURSELF WITH AN ESTAE
         ST    R10,STAER10         REGISTER REQUIRED BY RETRY ROUTINE
         ST    R13,STAER13         REGISTER REQUIRED BY RETRY ROUTINE
         MVC   STAELIST(STAELN),STAELFRM
         LA    R2,ERREXIT          RETRY ROUTINE ENTRY ADDRESS
         LA    R3,STAEPRMS
         ESTAE (2),PARAM=(3),MF=(E,STAELIST)
         LTR   R15,R15
         BNZ   STAEFAIL       IF ESTAE WAS NOT SUCCESSFUL,             X
                              ISSUE ERROR MESSAGE & RETURN TO CALLER
         L     R3,36(R11)          GET ADDRESS OF SMF RECORD
         USING SMFRCD4,R3
         SPACE 1
         CH    R5,=H'12'           ENTRY FOR STEP TERMINATION ??
         BE    STEPTERM            YES
         L     R1,0(R11)           R1-->COMMON EXIT PARM AREA
         CLI   SMF4RTY,5           TYPE 5 RECORD ???  WAW 10/86
         BNE   EXIT                NO - THEN DON'T HOSE IT
*                                  MOVE TAPE & DISK COUNTS TO
         MVC   115(2,R3),32(R1)    LAST 2 BYTES OF TYPE 5
*                                  PROGRAMMER NAME FIELD
         B     EXIT                END TYPE 5 PROCESSING
         SPACE 3
*
*        STEP TERMINATION PROCESSING
*
         SPACE 1
STEPTERM MVC   WTOAREA(WTO001CL),WTO001C
         SPACE 1
         MVI   MSGAREA,ASTERISK
         MVC   MSGAREA+1(L'MSGAREA-1),MSGAREA
         L     R1,28(R11)
         CLI   1(R1),1             FIRST STEP OF JOB?
         BNE   PRNTLIN1
* FORMAT TIME JOB ENTERED SYSTEM (I.E., WHEN JOBCARD WAS READ, OR
* TSO LOGON WAS RECOGNIZED)
         CLI   SMF4RTY,34          TSO LOGON?
         BE    TSOLOGON
* REMOVED 5/22/86  DW
*        L     R1,0(R11)           ADDR OF COMMON PARM AREA
*        LA    R1,20(R1)           POINT TO ACCT & SUB ACCT
*        LINK  EP=TMSACTRT
         MVC   MSGJCRL,JCRLJOB
         B     GETJCRT
TSOLOGON MVC   MSGJCRL,JCRLTSO
GETJCRT  MVC   MSGJCRDT,DTFMT
         LA    R4,MSGJCRT
         ICM   R7,15,SMF4RST
         BAL   R8,TIME             FORMAT TIME JOB ENTERED SYSTEM
         UNPK  MSGJCRD,SMF4RSD     FORMAT DATE JOB ENTERED SYSTEM
PRNTLIN1 BAL   R14,PRINT           PRINT TOP BORDER OF ASTERISKS
         SPACE 1
         MVI   MSGAREA+1,SPACE
         MVC   MSGAREA+2(L'MSGAREA-3),MSGAREA+1
         MVC   MSGHDR,HDRMSG
         L     R1,CVTPTR      POINT TO CVT TO GET CPU MODEL NUMBER     X
                              AND OPERATING SYSTEM RELEASE LEVEL
         LA    R1,0(R1)       CLEAR HIGH-ORDER BYTE
         SH    R1,=H'6'
         UNPK  HDRMODNR(4),0(3,R1) CPU MODEL #
         TR    HDRMODNR,HEXTRANS-X'F0'
         MVI   HDRMODNR+L'HDRMODNR,SPACE
         MVC   HDRNUMB,2(R1)       OPERATING SYSTEM RELEASE #
         MVC   HDRSUBNM,4(R1)      SUB-RELEASE #
         MVC   HDRSID,SMF4SID      GET SMF SYSTEM ID CODE
         BAL   R14,PRINT
         SPACE 1
         MVI   MSGAREA+1,SPACE     CLEAR ALL BUT 1ST AND LAST *
         MVC   MSGAREA+2(L'MSGAREA-3),MSGAREA+1
         MVC   MSGAREA+1(L'STEPMSG1),STEPMSG1
         MVC   MSGAREA+1+25(L'MSGCORE1),MSGCORE1
         MVC   MSGAREA+1+25+26(L'SM1B),SM1B
         MVI   MSGAREA+1+25+26+L'SM1B+4,C'/'
         MVC   MSGAREA+1+25+26+30(L'SM1C),SM1C
         MVC   MSGAREA+1+25+26+30+26(L'SM1D),SM1D
         MVC   MSGSTPN,SMF4STMN
         CLI   SMF4STMN,SPACE      ANY STEP NAME SUPPLIED?
         BNE   GETSTPN
         SR    R0,R0
         IC    R0,SMF4STN          STEP # OF THIS STEP
         CVD   R0,DBLWORD
         UNPK  STP#001C,DBLWORD+6(2)
         OI    STP#001C+L'STP#001C-1,X'F0'
         B     GETH0ST
GETSTPN  MVC   STPN001C,SMF4STMN
GETH0ST  LH    R1,SMF4H0ST         PROBLEM PROGRAM CORE USED
         ST    R1,MSVMEM           SAVE FOR DOLLARS LINE CALULATION
         CVD   R1,DBLWORD
         ED    MSGUCORE-1(6),DBLWORD+5
         LA    R4,MSGSTIME
         ICM   R7,15,SMF4SIT       STEP INITIATION TIME
         BAL   R8,TIME             FORMAT STEP INITIATION TIME
* CALCULATE # OF TAPE DEVICES & DISK DEVICES USED BY STEP, & # OF
* TAPE EXCPS & DISK EXCPS EXECUTED IN STEP.
         SR    R4,R4               # DISK DEVICES USED
         LR    R5,R4               # TAPE DEVICES USED
         LR    R7,R5               # DISK EXCPS ISSUED
         LR    R8,R7               # TAPE EXCPS ISSUED
         LR    R9,R8               # VIO EXCPS ISSUED
         LH    R2,SMF4LENN
         AH    R2,=H'-2'
         BNP   FORMATIO
* GET WORKAREA FOR A TABLE IN WHICH TO STORE DEVICE ADDRESSES.
* AS EACH SMF DEVICE ENTRY IS READ, A CHECK IS MADE TO SEE IF IT
* A DASD OR TAPE DEVICE.  IF NOT, THE NEXT ENTRY IS READ.  IF
* IT IS, THE 'SMF4EXCP' FIELD IS ADDED TO THE DASD OR TAPE EXCP
* COUNTER, AS APPROPRIATE.  THEN A TABLE OF TWO BYTE DEVICE
* ADDRESSES IS SCANNED.  IF THE DEVICE ADDRESS HAS ALREADY BEEN
* ENCOUNTERED, A MATCHING ENTRY WILL BE FOUND IN THE TABLE.  IF
* END OF TABLE IS REACHED (A ZERO ENTRY), THEN WE HAVE ENCOUNTERED
* A NEW DEVICE ADDRESS --- THE ADDRESS IS INSERTED AT THE END OF
* THE TABLE, A NEW END-OF-TABLE ENTRY IS ESTABLISHED, AND 1 IS
* ADDED TO THE APPROPRIATE DEVICES-USED COUNTER.
         MVC   VCORE,VCOREFMT      LIST FORM MACRO FOR CONDITIONAL     X
                                   GETMAIN FOR DEVICE ADDRESS TABLE
         SRL   R2,2
         LR    R6,R2
         SRL   R6,1                R6 HAS # OF DEVICE ENTRIES
         LA    R2,7+2(R2)     ADD 2 BYTES FOR DUMMY TABLE ENTRY, AND   X
                              ROUND UP TO DOUBLEWORD MULTIPLE
         N     R2,=X'00FFFFF8'
         GETMAIN LV=(2),A=AREAADDR,MF=(E,VCORE)
         LTR   R1,R15
         BNZ   IOFAILED            (R1 CONTAINS ZERO ON FALL-THRU)
         L     R2,AREAADDR         R2 POINTS TO DEVICE ADDRESS TABLE
         STH   R1,0(R2)       INDICATE INITIAL STATUS OF TABLE IS      X
                              EMPTY
         LA    R15,SMF4LENN+2
         USING SMF4DEVC,R15
IOLOOP   CLI   SMF4DEVC,DADEV      DIRECT ACCESS DEVICE?
         BE    DEVDA
         CLI   SMF4DEVC,TADEV      TAPE DEVICE?
         BE    DEVTA
         CLC   SMF4DEVC(4),=X'00000FFF'
         BNE   NEXTIO
         A     R9,SMF4EXCP         ACCUMULATE VIO EXCP'S
NEXTIO   LA    R15,8(R15)
         BCT   R6,IOLOOP
         B     FREEVCOR
DEVDA    A     R7,SMF4EXCP         ACCUMULATE DASD EXCP'S
         LR    R14,R2              PINT TO START OF DEVICE ADDR TABLE
FINDDA   CH    R1,0(R14)           NO MORE ENTRIES TO SCAN?
         BE    NEWDA
         CLC   0(2,R14),SMF4CUAD   DOES ADDRESS IN CURRENT ENTRY       X
                              IN TABLE MATCH THAT OF CURRENT           X
                              ENTRY IN SMF RECORD?
         BE    NEXTIO
         LA    R14,2(R14)          BUMP TO NEXT ENTRY IN TABLE
         B     FINDDA
NEWDA    MVC   0(2,R14),SMF4CUAD   ENTER NEW DEVICE ADDRESS IN TABLE
         STH   R1,2(R14)           SET NEW END-OF-TABLE INDICATOR
         LA    R4,1(R4)            INCREMENT #-OF-DASD-DEV-USED COUNTER
         B     NEXTIO
DEVTA    A     R8,SMF4EXCP         ACCUMULATE TAPE EXCP'S
         LR    R14,R2
FINDTA   CH    R1,0(R14)
         BE    NEWTA
         CLC   0(2,R14),SMF4CUAD
         BE    NEXTIO
         LA    R14,2(R14)
         B     FINDTA
NEWTA    MVC   0(2,R14),SMF4CUAD   ENTER NEW DEVICE ADDRESS IN TABLE
         STH   R1,2(R14)           SET NEW END-OF-TABLE INDICATOR
         LA    R5,1(R5)            INCREMENT #-OF-TAPE-DEV-USED COUNTER
         B     NEXTIO
         DROP  R15
FREEVCOR FREEMAIN MF=(E,VCORE)
FORMATIO TM    SMF4RIN,B'00000010'      IS I/O-COUNTS-POSSIBLY-INVALID X
                                        INDICATOR ON?
         BZ    BZ0010
         MVI   MSGTEXCP+L'MSGTEXCP,ASTERISK
BZ0010   LR    R0,R7                    TOTAL DISK EXCPS
         AR    R0,R8                    + TOTAL TAPE EXCPS
         AR    R0,R9                    + TOTAL VIO EXCPS
         ST    R0,MSVEXCP               SAVE INTERMEDIATE TOTAL
         CVD   R5,DBLWORD
         UNPK  MSG#TAPE,DBLWORD+6(2)
         OI    MSG#TAPE+L'MSG#TAPE-1,X'F0'
         CVD   R8,DBLWORD
         UNPK  MSGTEXCP,DBLWORD+3(5)
         OI    MSGTEXCP+L'MSGTEXCP-1,X'F0'
         CVD   R4,#DISKS           SAVE COUNT OF DASD DEVICES USED
         CVD   R7,DIO              SAVE COUNT OF DASD EXCP'S
         CVD   R9,VIO              SAVE COUNT OF VIO EXCP'S
         MVI   IOSW,0              INDICATE DASD USE INFO AVAILABLE
         B     IODONE
IOFAILED MVI   IOSW,12             INDICATE DASD USE INFO NOT AVAILABLE
         SPACE 3
IODONE   L     R2,0(R11)           PT TO EXIT PARM LIST
         CLI   28(R2),1            IS THIS 1ST STEP OF JOB
         BNE   NOT1ST
         XC    32(4,R2),32(R2)     ZERO USER COMM AREA  T&D COUNTS
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
NOT1ST   LH    R6,LENFACT(R3)      LENGTH FACTOR FOR DEVICES
         LA    R6,LENFACT(R6,R3)   SET LOOP END
         LA    R8,LENFACT+2(R3)    START OF DEVICE INFO
         SR    R0,R0               INIT SUM UP REG
         XC    FULLWRDS+4(2),FULLWRDS+4  0 TO STEP TAPE&DISK COUNTER
         L     R1,16               --> CVT
         L     R4,36(R1)           CVTILK1
         L     R7,40(R1)           CVTILK2
TOPLOP   CR    R8,R6               ANY MORE DEVICES?
         BNL   ENDLOP              SUM IS COMPLETE, GO SAVE
         CLI   0(R8),X'20'         THIS A DISK UCB TYP?
         BNE   XUCBTAPE            IF NO, GO CHECK FOR TAPE
         LH    R14,2(R8)           CHAN ADDR/CNTRL ADDR/DEV ADDR
         LR    R1,R14              SAVE FOR AWHILE
         SRDL  R14,8               ISOLATE CHAN ADDR
         SRL   R15,28              ISOLATE CNTRL ADDR
         IC    R14,0(R14,R4)       IECILK1+CHAN ADDR->ADDR OF K
         AR    R14,R15             CNTRL ADDR+K
*        CLI   7(R4),X'FF'         > 248 DEVICES IN SYSTEM
*        BNE   LESS249             ONLY SINGLE BYTE CU TABLE IF < 249
         AR    R14,R14             2(CNTRL ADDR+ K)
         LH    R14,0(R14,R4)       IECILK1+2(CNTRL ADDR+K)->ADDR L
*        B     GRTR248
*ESS249  IC    R14,0(R14,R4)       IECILK1+CNTRL ADDR+K->ADDR L
GRTR248  N     R1,X0F              ISOLATE DEV ADDR
         AR    R1,R14              DEV ADDR + L
         AR    R1,R1               2(DEV ADDR +L)
         LH    R15,0(R1,R7)        IECIKL2+2(DEVADDR+L)->UCB
         TM    3(R15),X'04'        IS UCB A PERM RES PACK
         BZ    XUCBCNT             NO IF BIT OFF, GO CHK MAX USE
         OI    1(R8),X'40'         SET SYSTEM VOL BIT IN TYP 4 REC
ADDEMUP  A     R0,4(R8)            ADD TAPE AND DISK EXCPS
MIDLOP   LA    R8,8(R8)            INCR TO NXT DEV ENTRY
         B     TOPLOP              GO TEST FOR MORE
XUCBTAPE CLI   0(R8),X'80'         IS THIS A TAPE UCB TYPE?
         BNE   MIDLOP              IF NO, ALL DONE WITH IT.
XUCBCNT  LA    R15,LENFACT+2(R3)   GET HERE 4 ONLY TAPE&NON PER RES
XUCBSEEK CR    R15,R8              THIS POINT = CURRENT POS IN LIST
         BNL   XUCBKEEP            IF = THEN CUR UCB IS UNIQUE, GO SUM
         CLC   2(2,R15),2(R8)      THIS UCB= TO CURRENT UCB
         BE    ADDEMUP             IF= THEN CUR UCB NOT UNIQUE, SKIP
         LA    R15,8(R15)
         B     XUCBSEEK            KEEP CHECKING FOR UNIQUE UCB
XUCBKEEP LA    R15,1               DISK COUNTER  X'0001'
         CLI   0(R8),X'80'         IS THIS A TAPE?
         BNE   XUCBDISK            DISK IF BRANCH
         LA    R15,256             TAPE COUNTER  X'0100'
XUCBDISK AH    R15,FULLWRDS+4      ADD 'EM UP
         STH   R15,FULLWRDS+4      SAVE TILL ALL UCB'S DONE
         B     ADDEMUP             CONTINUE TESTING
ENDLOP   ST    R0,FULLWRDS         SAVE STEP EXCP COUNT FOR CVD
         CLC   FULLWRDS+4(1),32(R2)  WAS A NEW MAX TAPE USAGE REACHED
         BNH   NONUMAXT            NO IF BRANCH
         MVC   32(1,R2),FULLWRDS+4 USE NEW MAX TAPE VALUE
NONUMAXT CLC   FULLWRDS+5(1),33(R2)  WAS A NEW MAX DISK USAGE REACHED
         BNH   NONUMAXD            NO IF BRANCH
         MVC   33(1,R2),FULLWRDS+5 USE NEW MAX DISK VALUE
NONUMAXD CLI   SMF4RTY,34          TSO STEP?
         BE    GETSCPU             YES - BYPASS NEXT
         L     R6,16               -> CVT
         L     R6,296(,R6)         -> IEFJESCT
         L     R6,24(,R6)          -> JESSCT
         L     R6,16(,R6)          -> SSCTSSVT
         L     R6,884(,R6)         -> $SVJXCLS SJBS EXEC JOB-BY-CLS
JOBLOOP  CLC   0(8,R2),236(R6)     JOBNAME MATCH? (SJBJOBNM)
         BE    JOBMATCH            YES - RECHECK
         ICM   R6,15,200(R6)       CHAIN END? (SJBXQCHN)
         BNZ   JOBLOOP             NO - CONTINUE TEST
         B     GETSCPU             YES - IGNORE
JOBMATCH L     R6,96(,R6)          -> SJBJCT
         CLC   0(8,R2),156(R6)     JOBNAME MATCH?  (JCTJNAME)
         BNE   GETSCPU             NO - IGNORE
         MVC   182(2,R6),32(R2)    SET HIGH WATER  (JCTPNAME+18)
GETSCPU  MVI   FULLWORD,0
         L     R5,20(R11)          -> STEP CPU TIME UNDER TCB'S
* CHECK TO SEE THAT BOTH SOURCES OF STEP CPU TIME UNDER TCB'S
* CONTAIN THE SAME VALUE
         LH    R1,SMF4LENN
         LA    R1,SMF4LENN(R1)
         CLC   1(3,R1),0(R5)
         BE    BE0010
         MVI   MSGTCBTM-1,ASTERISK INDICATE VALUES DISAGREE
BE0010   MVC   FULLWORD+1(3),0(R5)
         L     R7,FULLWORD
         ST    R7,MSVCPU           SAVE FOR DOLLAR CALCULATIONS
         LA    R4,MSGTCBTM
         BAL   R8,TIMETH           FORMAT STEP CPU TIME UNDER TCB'S
         MVC   CPUT001C,MSGTCBTM
         BAL   R14,PRINT           PRINT MSG
         SPACE 1
         MVI   MSGAREA+1,SPACE     CLEAR ALL BUT 1ST AND LAST *
         MVC   MSGAREA+2(L'MSGAREA-3),MSGAREA+1
         MVC   MSGAREA+1(L'STEPMSG2),STEPMSG2
         MVC   MSGAREA+1+25(L'MSGCORE2),MSGCORE2
         MVC   MSGAREA+1+25+26(L'SM2B),SM2B
         MVI   MSGAREA+1+25+26+L'SM2B+4,C'/'
         MVC   MSGAREA+1+25+26+30(L'SM2C),SM2C
         MVC   MSGAREA+1+25+26+30+26(L'SM2D),SM2D
         MVC   MSGPGMN,SMF4PGMN
         MVC   PGMN001C,SMF4PGMN
         LH    R1,SMF4SYST         SYSTEM CORE USED ON USER'S BEHALF
         CVD   R1,DBLWORD
         ED    MSGSCORE-1(6),DBLWORD+5
         CLI   IOSW,0
         BNE   GETPTIME
* FORMAT INFORMATION ABOUT DASD DEVICE UTILIZATION
         TM    SMF4RIN,B'00000010'
         BZ    BZ0020
         MVI   MSGDEXCP+L'MSGDEXCP,ASTERISK
BZ0020   UNPK  MSG#DISK,#DISKS+6(2)
         OI    MSG#DISK+L'MSG#DISK-1,X'F0'
         UNPK  MSGDEXCP,DIO+3(5)
         OI    MSGDEXCP+L'MSGDEXCP-1,X'F0'
GETPTIME LA    R4,MSGPTIME
         ICM   R7,15,SMF4TME
         BAL   R8,TIME             FORMAT STEP TERMINATION TIME
         MVI   FULLWORD,0
         MVC   FULLWORD+1(3),SMF4SRBT
         L     R7,FULLWORD
         LA    R4,MSGSRBTM
         BAL   R8,TIMETH           FORMAT STEP CPU TIME UNDER SRB'S
         BAL   R14,PRINT
         SPACE 1
         MVI   MSGAREA+1,SPACE     CLEAR ALL BUT 1ST AND LAST *
         MVC   MSGAREA+2(L'MSGAREA-3),MSGAREA+1
         MVC   MSGAREA+1(L'STEPMSG3),STEPMSG3
         MVC   MSGAREA+1+25(L'MSGCORE3),MSGCORE3
         MVC   MSGAREA+1+25+28(L'SM3B),SM3B
         MVC   MSGAREA+1+25+28+28(L'SM3C),SM3C
         MVC   MSGAREA+1+25+28+28+26(L'SM3D),SM3D
* DETERMINE KIND OF STEP TERMINATION, & FORMAT TERMINATION CODE.
         TM    SMF4STI,B'00000001' STEP FLUSHED?
         BO    FLUSHED
         TM    SMF4STI,B'00000010' ABEND?
         BO    ABEND
         MVC   MSGTTYPE,=C'COND'
         MVI   TERM001C,C'0'
         B     DSPLUCOD
FLUSHED  MVC   MSGNOEXC,=C'-STEP NOT EXECUTED-'
         B     NEXTFLD
ABEND    MVC   MSGTTYPE,=C'COMP'
         TM    SMF4SCC,X'80'       USER ABEND CODE?
         BO    USERABE
* SYSTEM ABEND CODE
         MVI   TERM001C,C'S'
         MVI   MSGATYPE,C'S'
         UNPK  DBLWORD(4),SMF4SCC(3)
         TR    DBLWORD(3),HEXTRANS-X'F0'
         MVC   MSGCODE3,DBLWORD
         MVI   CODE001C,C'-'
         MVC   CODE001C+1(3),DBLWORD
         B     NEXTFLD
USERABE  MVI   MSGATYPE,C'U'
         MVI   TERM001C,C'U'
DSPLUCOD ICM   R1,3,SMF4SCC
         N     R1,=X'00000FFF'
         CVD   R1,DBLWORD
         UNPK  MSGCODE4,DBLWORD+5(3)
         OI    MSGCODE4+L'MSGCODE4-1,X'F0'
         MVC   CODE001C,MSGCODE4
NEXTFLD  LH    R1,SMF4RSH0    PRIVATE AREA SIZE (CORE AVAILABLE TO     X
                              USER)
         CVD   R1,DBLWORD
         ED    MSGARESZ-1(6),DBLWORD+5
         TM    SMF4RIN,B'00000001' V=R JOBSTEP?
         BZ    BZ0030
         MVC   MSGVRIND,=C'V=R'
* GET JOBCARD ACCOUNTING INFO FOR STEP STATISTICS WTO
BZ0030   L     R15,12(R11)
         CLI   3(R15),1
         BL    GETJBN
         L     R1,16(R11)
         BE    ONEACCTF
         SR    R7,R7
         IC    R7,0(R1)
         AH    R7,=H'-1'
         BM    ACNTFLD2
         CH    R7,=H'3'
         BNH   BNH010
         LA    R7,3
BNH010   EX    R7,MOVACCT1
ACNTFLD2 SR    R7,R7
         IC    R7,0(R1)
         LA    R1,1(R1,R7)
         IC    R7,0(R1)
         AH    R7,=H'-1'
         BM    GETJBN
         CH    R7,=H'3'
         BNH   BNH020
         LA    R7,3
BNH020   EX    R7,MOVACCT2
         B     GETJBN
ONEACCTF SR    R7,R7
         IC    R7,0(R1)
         AH    R7,=H'-1'
         BM    GETJBN
         CH    R7,=H'7'
         BNH   BNH030
         LA    R7,7
BNH030   EX    R7,MOVACCT1
GETJBN   MVC   JBN001C,SMF4JBN
         ICM   R7,15,SMF4AST
         LA    R4,MSGATIME
         BAL   R8,TIME             FORMAT DEVICE ALLOCATION START TIME
         ICM   R7,15,SMF4PPST
         LA    R4,MSGLTIME
         BAL   R8,TIME             FORMAT PROBLEM PROGRAM LOAD TIME
* CALCULATE STEP EXECUTION ELAPSED TIME
         ICM   R7,15,SMF4TME
         ICM   R1,15,SMF4SIT
         SR    R7,R1
         BM    NEGETME
         SR    R1,R1
         B     TSOETCHK
NEGETME  LA    R1,4
TSOETCHK CLI   SMF4RTY,34
         BE    TSOETME(R1)
         ZAP   FULLWORD,SMF4DTE
         SP    FULLWORD,SMF4STID
         BZ    SAMEDAY(R1)
         BP    MULTIDAY(R1)
         B     MOVETME        STEP TERMINATION DATE < STEP INITIATION  X
                              DATE IS AN ERROR - BYPASS FORMATTING     X
                              ELAPSED TIME
* JOB TERMINATED ON SAME DAY IT WAS INITIATED
SAMEDAY  B     ROUNDETM
         B     MOVETME        STEP INITIATION TIME > STEP TERMINATION  X
                              TIME IS AN ERROR IF STEP INITIATION      X
                              DATE = STEP TERMINATION DATE
* THERE IS NO STEP INITIATION DATE FIELD IN A TYPE 34 (TSO USER)
* RECORD --- DO THE BEST YOU CAN WITH THE TIME ONLY
TSOETME  B     ROUNDETM
         B     ADD24HRS
* JOB TERMINATED ON A LATER DAY THAN THE ONE ON WHICH IT WAS
* INITIATED (ELAPSED TIME WILL NOT BE CALCULATED FOR A JOB THAT RUNS
* MORE THAN TWO DAYS OR PASSES THRU A CHANGE OF YEAR)
MULTIPOS CP    FULLWORD,=P'1'
         BE    ADD24HRS
         B     MOVETME
MULTIDAY B     MULTIPOS
         SP    FULLWORD,=P'2'
         BM    ADD24HRS
         BP    MOVETME
         A     R7,MIDTIME
ADD24HRS A     R7,MIDTIME     IF START TIME > STOP TIME, WE MUST HAVE  X
                              PASSED THRU MIDNIGHT --- ADD 24 HRS
ROUNDETM AH    R7,=H'50'           ROUND VALUE TO NEAREST SECOND
         LA    R4,MSGETIME
         BAL   R8,TIME             FORMAT ELAPSED TIME FOR STEP
MOVETME  MVC   ETME001C,MSGETIME
         BAL   R14,PRINT
         SPACE 1
         TM    SMF4STI,B'00000001' WAS STEP FLUSHED?
         BO    BODBORDR       IF IT WAS, BYPASS GENERATING             X
                              PERFORMANCE INFORMATION
         MVC   MSGAREA+1(130),STEPMSG4
         BAL   R14,PRINT
         SPACE 1
STEPMSG5 MVI   MSGAREA+1,SPACE     CLEAR ALL BUT 1ST AND LAST *
         MVC   MSGAREA+2(L'MSGAREA-3),MSGAREA+1
*              THE BLANKS ARE ALSO USED AS EDIT FILL BYTES
         MVC   MSGAREA+1+10(11),=X'2020202020202020202120'
*              COPY THE ABOVE PATTERN BASE FOR ALL OTHERS
         MVC   MSGAREA+1+37(11),MSGAREA+1+10
         MVC   MSGAREA+1+51(11),MSGAREA+1+10
         MVC   MSGAREA+1+65(7),MSGAREA+1+14
         MVC   MSGAREA+1+75(11),MSGAREA+1+10
         MVC   MSGAREA+1+89(11),MSGAREA+1+10
         MVC   MSGAREA+1+103(11),MSGAREA+1+10
         MVC   MSGAREA+1+117(11),MSGAREA+1+10
* POINT TO RELOCATE SECTION OF SMF RECORD TO GET MVS
* PAGING/SWAP/PERFORMANCE INFORMATION
         SR    R9,R9
         ICM   R9,3,SMF4RLCT
         LA    R9,SMFRCD4+4(R9)
         USING SMF4PGIN,R9
         SR    R1,R1
         ICM   R1,3,SMF4PGNO       PERFORMANCE GROUP NUMBER
         CVD   R1,DBLWORD
         UNPK  MSGPGNO,DBLWORD+6(2)
         OI    MSGPGNO+L'MSGPGNO-1,X'F0'
         ICM   R7,15,SMF4ACT  GET STEP ACTIVE TIME (UNIT IS 1024       X
                              MICROSECONDS)
         SR    R6,R6               USE REGISTER PAIR TO HOLD VALUE
         SLDL  R6,10               MULTIPLY BY 1024 TO GET MICROSECONDS
         AL    R7,=A(5000)         ROUND TO NEAREST HUNDREDTH OF A SEC
         BC    12,BC0010           BRANCH IF NO CARRY
         LA    R6,1(R6)            INCREMENT R6 ON OVERFLOW FROM R7
BC0010   D     R6,=A(10000)        REDUCE TO HUNDREDTHS OF SECONDS
         LA    R4,MSGACT
         BAL   R8,TIMETH           FORMAT STEP ACTIVE TIME
         ICM   R1,15,SMF4SST       # SERVICE UNITS USED BY STEP
         CVD   R1,DBLWORD
         ED    MSGSST-1(12),DBLWORD+2
         ICM   R1,15,SMF4PGIN
         CVD   R1,DBLWORD
         ED    MSGPGIN-1(12),DBLWORD+2
         ICM   R1,15,SMF4PGOT
         CVD   R1,DBLWORD
         ED    MSGPGOT-1(12),DBLWORD+2
         ICM   R1,15,SMF4NSW       # TIMES SWAPPED
         CVD   R1,DBLWORD
         ED    MSGNSW-1(8),DBLWORD+4
         ICM   R1,15,SMF4PSI
         CVD   R1,DBLWORD
         ED    MSGPSI-1(12),DBLWORD+2
         ICM   R1,15,SMF4PSO
         CVD   R1,DBLWORD
         ED    MSGPSO-1(12),DBLWORD+2
         ICM   R1,15,SMF4VPI
         CVD   R1,DBLWORD
         ED    MSGVPI-1(12),DBLWORD+2
         ICM   R1,15,SMF4VPO
         CVD   R1,DBLWORD
         ED    MSGVPO-1(12),DBLWORD+2
         DROP  R9
         BAL   R14,PRINT
         SPACE 1
BODBORDR MVC   MSGAREA+1(130),MSGAREA
         CP    VIO,=P'0'           ANY VIO USAGE TO REPORT?
         BE    PRNTBRDR
         MVC   MSGVIOLA,VIOLABL
         UNPK  MSGVIOCT,VIO
         OI    MSGVIOCT+L'MSGVIOCT-1,X'F0'
         MVI   MSGVIOSP,SPACE
PRNTBRDR BAL   R14,PRINT           PRINT 2ND BORDER OF ASTERISKS
         SPACE 1
         L     R6,16          CVT ADDRESS
         L     R4,0(,R6)      TCB/ASCB DBL WORDS
         L     R4,12(,R4)     CURRENT ASCB ADDRESS
         L     R6,204(,R6)    ACCTABLE ADDR FROM CVTUSER
         LTR   R6,R6          IS THERE AN ADDR ??
         BZ    NOEXCPTB       NO - BYPASS
         USING ACCTABLE,R6    ADDRESSABILITY
         CLC   UJIHDR,=CL8'UJITABLE'  VERIFY ACCTABLE
         BNE   NOEXCPTB       NOT THERE - BYPASS
         A     R6,UJITBLEN    POINT TO EXCP TABLE
         DROP  R6
         CLC   0(8,R6),=CL8'EXCPTABL'  VERIFY EXCPTABL
         BNE   NOEXCPTB       NOT THERE - BYPASS
         LH    R5,36(,R4)     GET ASID NUMBER
         M     R4,=F'16'      GET DISPLACEMENT INTO EXCP TABLE
         LA    R6,8(R5,R6)    POINT TO PROPER ASID ENTRY
         USING EXCPTABL,R6    ADDRESSABILITY
         CLC   SMF4RST,RDRTIME    COMPARE RDR START TIME
         BNE   NOEXCPTB       NO MATCH - BYPASS
         ICM   R0,15,EXCPCNT    COPY DYNAMIC ALLOC EXCP-S
         A     R0,MSVEXCP     COMBINE WITH NON DYNAMIC EXCPS
         ST    R0,MSVEXCP     SAVE FOR DOLLAR CALCULATIONS
         DROP  R6
NOEXCPTB DS    0H
         MVI   MSGAREA+1,SPACE     CLEAR ALL BUT 1ST AND LAST *
         MVC   MSGAREA+2(L'MSGAREA-3),MSGAREA+1
         MVC   BLOCKC1,=C'CPU $ (' INSERT HEADERS
         MVC   BLOCKC2,=C') + EXCP $ ('
         MVC   BLOCKC3,=C') + MEMORY $ ('
         MVC   BLOCKC4,=C') = TOTAL $ ('
         MVI   BLOCKC5,C')'
         L     R5,MSVCPU          CPU TIME
         M     R4,=A(36)
         D     R4,=A(100)
         LR    R0,R5              = HUND OF $ CPU CHARGE
         LR    R1,R5
         BAL   R6,B2$             CONVERT TO ZZ,ZZN.NN $S
         MVC   BLOCKCP$,WRK$0PAT+1
         L     R5,MSVEXCP         GET HELD EXCP SUM
         M     R4,=A(135)
         D     R4,=A(1000)
         AR    R0,R5              = HUND OF $ EXCP CHARGE
         LR    R1,R5
         BAL   R6,B2$             CONVERT TO ZZ,ZZN.NN $S
         MVC   BLOCKEX$,WRK$0PAT+1
         L     R5,MSVMEM          MEMORY USED IN 1K UNITS
         SRL   R5,1               DIV BY 2 FOR 2K UNITS
         M     R4,=A(57)
         L     R4,MSVCPU          CPU USED
         MR    R4,R4
         D     R4,=A(10000)
         AR    R0,R5              = HUND OF $ MEMORY CHARGE
         LR    R1,R5
         BAL   R6,B2$             CONVERT TO ZZ,ZZN.NN $S
         MVC   BLOCKME$,WRK$0PAT+1
         LR    R1,R0              GET HUND OF $ TOTAL CHARGE
         BAL   R6,B2$             CONVERT TO ZZ,ZZN.NN $S
         MVC   BLOCKTO$,WRK$0PAT+1
         BAL   R14,PRINT           PRINT DOLLAR LINE
         MVC   MSGAREA+1(130),MSGAREA      FILL LINE WITH *
         BAL   R14,PRINT           PRINT BOTTOM BORDER OF ASTERISKS
         SPACE 1
         WTO   MF=(E,WTOAREA)      WRITE STEP STATISTICS MESSAGE TO    X
                                   CONSOLE
         SPACE 1
* CHECK TO SEE IF USER HAS REQUESTED THAT NOTIFICATION OF
* BACKGROUND JOB STEP TERMINATION BE SENT TO HIS TSO TERMINAL
         SPACE 1
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
*        SEND JOB STEP/LOGOFF NOTIFICATION TO TSO USER                *
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
         MVI   SENDSW,X'00'        INITIALIZE INDICATOR
         CLI   SMF4RTY,34          TYPE 34 RECORD?
         BE    NOTIFY34            YES, GO SET UP FOR SAYONARA
         LA    R6,SMF4LENN         -->  LEN FACTOR FOR DEVICES
         AH    R6,SMF4LENN         POINT TO ACCTG FIELDS
         SR    R4,R4               CLEAR WORK REG
         IC    R4,4(R6)            GET NO. ACCT FIELDS
         LTR   R4,R4               ANY ACCT FIELDS FROM EXEC STMT?
         BZ    EXIT                NO - NO TSO NOTIFY
         LA    R6,5(R6)            POINT TO 1ST ACCT FIELD
         CLI   0(R6),X'06'         LENGTH 6 FROM 'NOTIFY'?
         BNE   EXIT                NO - NO TSO NOTIFY
         CLC   1(6,R6),NOTIFY      IS 1ST PARM 'NOTIFY'?
         BNE   EXIT                NO - NO TSO NOTIFY
         BCTR  R4,0                SUB 1 FROM NO. FIELDS
         LTR   R4,R4               WAS 'NOTIFY' ONLY FIELD?
         BZ    EXIT                YES - THEN NO TSO NOTIFY
         LA    R6,7(,R6)           GET ADDR FOR 1ST FLD PAST ENTRY
UID34    MVC   SEND(L'SEPFXFMT),SEPFXFMT  MOVE MASK
*              INSURE SHASHS (/-S) ARE EVERY PLACE NEEDED
         MVC   SEND+L'SEPFXFMT(SELEN-L'SEPFXFMT),SEND+L'SEPFXFMT-1
         L     R1,LCTJSCB          POINT TO P/P JSCB
         L     R1,JSCBSSIB-IEZJSCB(R1)
         MVC   SEJOB#,X'0C'(R1)    GET JES2 JOB# FROM SSIB
         OC    SEJOB#+3(4),=C'0000'  CHANGE BLANKS TO ZEROS
         MVC   JBNTSO,JBN001C      MOVE JOBNAME INTO MESSAGE
         MVC   TERMTSO,TERM001C    MOVE STEP TERM CODE TO MSG
*
         CLC   SMF4STMN(8),TAGNAME 'TELAGRAF' PROC ?
         BNE   NOTAG               NO, NO VECTOR COUNTS
         L     R14,16              R14-->CVT
         L     R14,0(R14)          R14-->TCB WORDS
         L     R14,4(R14)          R14-->TCB
GOTINIT  L     R7,132(R14)         R7-->OTC
         LTR   R7,R7               TOP OF TCB CHAIN ?
         BZ    GVEC                YES, GET VECTOR COUNT
         LR    R14,R7              R14-->OTC
         B     GOTINIT
GVEC     MVC   SMF4AST(4),168(R14) SAVE TELAGRAF VECTOR COUNT...
*                                  ...IN 34 RCD - USE DEVICE ALLOC
*                                  ...START TIME FIELD
         L     R7,168(R14)         R14 = TELAGRAF VECTOR COUNT
         XC    DUBLWORK,DUBLWORK
         CVD   R7,DUBLWORK
         UNPK  TERMTSO(5),DUBLWORK+5(3)
         OI    TERMTSO+4,X'F0'
         SR    R7,R7
         ST    R7,168(R14)         RESET TCB VECTOR COUNT
*
NOTAG    MVC   PGMNTSO,PGMN001C    MOVE PROGRAM NAME
         MVC   CPUTTSO,CPUT001C    MOVE CPU TIME
         MVC   ETIMETSO,ETME001C   MOVE ELAPSED TIME
         MVC   ACCTTSO,ACCT001C    MOVE ACCOUNT INFO
         MVC   SUBATSO,SUBA001C    MOVE SUB ACCOUNT INFO
         MVC   JBNTSO,JBN001C      MOVE JOBNAME
         MVC   TSOA,TSOTRLR        MOVE ',LOGON,USER=(
         XC    TSOU,TSOU           CLEAR WORK AREA (MCS?)
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
         LA    R14,TSOU            TARGET FOR 1ST ID FIELD
GETUID   SR    R7,R7               CLEAR WORK REG
         IC    R7,0(R6)            GET USERID LENGTH
         LTR   R7,R7               0? (NULL PARM)
         BZ    NEXTID              YES - GET NEXT ID
         CLI   0(R6),X'07'         LEN MORE THAN 7 CHARS?
         BH    IDTOLONG            YES - IGNORE IT
         BCTR  R7,0                DECREM FOR EX
         EX    R7,MVCUID           MOVE USERID TO SEND MSG
         MVI   SENDSW,X'FF'        INDICATE NOTIFY MSG TO SEND
         LA    R15,1(R7,R14)       POINT TO 1ST CHAR AFTER ID
         MVI   0(R15),C','         MOVE ID SEPARATOR
         LA    R7,1(R7)            UNADJUST FROM EX
         LA    R14,1(R14)          ADJUST FOR COMMA
NEXTID   LA    R14,0(R7,R14)       TARGET FOR NEXT ID
IDTOLONG LA    R6,1(R7,R6)         GET ADDR NEXT ID PARM
         CLI   TERM001C,C'0'       WAS STEP RC = 0?
         BE    EOSEND              YES - THEN NO MORE NOTIFIES
         BCT   R4,GETUID           GO GET NEXT USERID
EOSEND   CLI   SENDSW,X'FF'        IS THERE A NOTIFY MSG TO SEND?
         BNE   EXIT                NO, THEN WRITE STEP END MSG TO CON
         BCTR  R14,0               YES, BACK UP TO SET ')'
         MVI   0(R14),C')'         DOIT
         LA    R4,TSOSE-1          GET BEGIN ADDR OF MSG
         SR    R14,R4              GET LENGTH OF NOTIFY MSG
         SLL   R14,16              SHIFT
         ST    R14,TSOSE           SET LENGTH
         LA    1,1(R4)             SVC 34 PARM ADDR
         SR    R0,R0               CLEAR REGISTER 0
         SVC   34                  **** TSO STEP NOTIFY MESSAGE ****
         B     EXIT
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
*        BUILD PARAMATER LIST FOR 'CCI000I' MESSAGE AT TSO LOGOFF     *
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
*
*        GET LINE ADDRESS FROM TSB AND PLUG INTO TYPE 34
*    (IF VTAM LINE, PACK LOW ORDER 3 BYTES OF TERM SYMBOLIC NAME)
*    (INSURE NUMERIC, AND FORCE VALUE TO BE AT LEAST 800 DECIMAL)
*
NOTIFY34 L     R6,16               R4-->CVT
         L     R6,0(,R6)           R4-->TCB/ASCB DBL WRDS
         L     R6,12(,R6)          R4-->CURRENT ASCB
         XC    SMF4SYST(2),SMF4SYST  CLEAR NOT NEEDED 2 BYTES
         CLC   0(4,R6),=C'ASCB'    ENSURE VALIDITY
         BNE   ASCBNOF             INVALID, NOTIFY OPERATOR
         L     R6,60(R6)           R6-->TSB
         TM    25(R6),X'01'        THIS A VTAM TSB?
         BO    VTAMTSB             YES - GO GET TERM NAME
         MVC   SMF4SYST(2),82(R6)  GET  TSBLINE (TCAM'S)
         B     SETSAYO             BACK IN LINE CODE
VTAMTSB  LA    R4,109(,R6)         --> XXX OF LOCNSXXX
         CLI   104(R6),C'L'        IS IT LOCAL TERM?
         BE    VTAMLOC             YES - USE R4 AS IS
         CLI   104(R6),C'T'        IS IT NCP TERM?
         BNE   SETSAYO             NO - IGNORE
         LA    R4,106(,R6)         --> XXX OF TMXXXNN
VTAMLOC  LA    R6,2(,R4)           --> LAST BYTE
         LA    R7,DBLWORD+4        --> TARGET WORK AREA
VTAMTST  LA    R1,VTAMTBL          --> VALID DIGITS TABLE
VTAMLOP  CLC   0(1,R4),0(R1)       BYTE IN TABLE?
         BL    SETSAYO             NO - IGNORE
         BE    VTAMHIT             YES - GET REPLACEMENT
         LA    R1,2(,R1)           ADVANCE IN TABLE
         B     VTAMLOP             CONTINUE TEST
         SPACE 1
VTAMHIT  MVC   0(1,R7),1(R1)       PUT X'0X' TO TARGET
         CR    R6,R4               END OF CONVERSION?
         BNH   VTAMCON             YES - PACK 'EM IN
         LA    R4,1(,R4)           ADVANCE TO NEXT INPUT BYTE
         LA    R7,1(,R7)           ADVANCE TO NEXT OUTPUT BYTE
         B     VTAMTST             CONTINUE TEST
         SPACE 1
VTAMCON  PACK  DBLWORD(3),DBLWORD+4(4)  PACK NUMERIC PART
         MVC   SMF4SYST(2),DBLWORD MOVE TO SMF RECORD
         OI    SMF4SYST,X'08'      FORCE AT LEAST 800 SERIES NUMBERS
*
*        NOW SEND LOGOFF MSG TO TSO USER
*
SETSAYO  MVC   SEND34+1(8),JBN001C FOR DUMMY ACCT PARM
         LA    R6,0                INIT CTR
         LA    R4,8                LOOP CTL
         LA    R7,JBN001C          SET TO SCAN USERID FLD
GETLEN   CLI   0(R7),C' '          END OF USERID?
         BE    GOTLEN              YES - SET LEN IN DUMMY PARM
         LA    R6,1(R6)            UP COUNT OF CHARS
         LA    R7,1(R7)            NEXT CHAR IN USERID FLD
         BCT   R4,GETLEN           SCAN
GOTLEN   STC   R6,SEND34           SET LEN IN DUMMY PARM
         LA    R4,2                SET NO. IDS TO NOTIFY
         LA    R7,SEND34           START ADDR OF PARM LIST
         STC   R6,1(R6,R7)         SET 2ND LEN FIELD
         LA    R7,2(R6,R7)         POINT TO 2ND FLD IN LIST
         MVC   0(8,R7),JBN001C     MOVE IN USERID
         LA    R6,SEND34           SET PARM ADDR FOR SCANNING
         B     UID34               GO FAKE IT OUT
*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*
ASCBNOF  WTO   '* NO TSU ASCB *'
         B     SETSAYO
         SPACE 3
* EXIT PROCESSING - CANCEL ESTAE, FREE WORKAREA, RESTORE REGISTERS, &
* RETURN TO CALLER
         SPACE 1
EXIT     ESTAE 0
EXIT1    DS    0H
*        L     R15,=V(IBMACTRT)       @ ACF2 TRT EXIT DRIVER  WAW
*        L     R14,SAVE13             @ OUR ORIGINAL REGS
*        LM    R0,R12,20(R14)         RESTORE REGS 0-12
*        BALR  R14,R15                CALL ACF76TRT
         L     R10,SAVE10-WORKAREA(,R13)  RELOAD BASE REG
         LR    R1,R13
         L     R13,SAVE13
         L     R0,WKAREALN
         FREEMAIN R,LV=(0),A=(1)
         LM    R14,R12,12(R13)     RESTORE REGS
         SR    R1,R1
         SR    R15,R15
         BR    R14                 RETURN TO CALLER
         SPACE 3
STAEFAIL MVC   WTOAREA(WTOSTAEL),WTOSTAE
         CVD   R15,DBLWORD
         UNPK  STAERC,DBLWORD+6(2)
         OI    STAERC+L'STAERC-1,X'F0'
         WTO   MF=(E,WTOAREA)
         B     EXIT1
         SPACE 3
         TITLE 'IEFACTRT - SUBROUTINES'
*
*        T I M E  CONVERTS 4 BYTES BINARY TIME TO THE PRINT
*        FORMAT 'HH:MM:SS'.  REGISTER USAGE IS AS FOLLOWS-
*              R1  NOT USED BY 'TIME' - RESERVED FOR 'TIMETH'
*                      ROUTINE, TO SAVE RETURN ADDRESS
*              R4  POINTS TO LOCATION FOR TIME
*              R6  USED FOR DIVIDE
*              R7  USED FOR DIVIDE (CONTAINS TIME IN HUNDREDTHS OF
*                      SECONDS, ON ENTRY)
*              R8  RETURN REGISTER
*
*        THIS ROUTINE INSERTS THE :-S AND .-S
*
         SPACE 1
TIME     SR    R6,R6
         D     R6,F360000          DIVIDE BY 360000 TO GET HOURS
         CVD   R7,DBLWORD          CONVERT HOURS TO PACKED DECIMAL
         UNPK  0(2,R4),DBLWORD+6(2)  UNPACK HOURS
         OI    1(R4),X'F0'         FIX SIGN
         SRDL  R6,32               MAKE REMAINDER A DBLWORD WORD
         D     R6,F6000            DIVIDE BY 6000 TO GET MINUTES
         CVD   R7,DBLWORD          CONVERT MINUTES TO PACKED DECIMAL
         UNPK  3(2,R4),DBLWORD+6(2)  UNPACK MINUTES
         OI    4(R4),X'F0'         FIX SIGN
         SRDL  R6,32               MAKE SEC A DBLWORD WORD IN R6 & 7
         D     R6,F100             GET RID OF TENTHS AND HUNDREDTHS
         CVD   R7,DBLWORD          CONVERT SECONDS TO PACKED DECIMAL
         UNPK  6(2,R4),DBLWORD+6(2)  UNPACK SECONDS
         OI    7(R4),X'F0'         FIX SIGN
         MVI   2(R4),C':'          1ST COLON
         MVI   5(R4),C':'          2ND COLON
* NOTE THAT R6 CONTAINS TENTHS & HUNDREDS OF SECONDS. ---THIS
* VALUE MAY BE USED AFTER RETURN TO CALLER TO EXPAND TIME
* FROM 'HH:MM:SS' FORMAT TO 'HH:MM:SS.TH' FORMAT.
         BR    R8                  RETURN
         SPACE 1
*        T I M E T H  ADDS TENTHS AND HUNDREDTHS OF SECONDS TO
*        THE TIME FORMATTED AS 'HH:MM:SS' BY 'TIME' SUBROUTINE
         SPACE 1
TIMETH   LR    R1,R8               SAVE RETURN ADDRESS
         BAL   R8,TIME
         CVD   R6,DBLWORD
         UNPK  9(2,R4),DBLWORD+6(2)
         OI    10(R4),X'F0'
         MVI   8(R4),C'.'          1ST DOT
         BR    R1
         SPACE 3
*
*        P R I N T  OUTPUTS A 132 BYTE MESSAGE AT JOB OR STEP
*        TERMINATION TO THE SYSPRINT DEVICE.  REGISTER USAGE IS AS
*        FOLLOWS-
*              R12  ADDRESS OF LINKAGE CONTROL TABLE
*              R13  POINTS TO 45 WORD AREA
*              R14  RETURN REGISTER (PRE-LOADED BY CALLER)
*              R15  ENTRY POINT TO IEFYS
*
         SPACE 1
PRINT    CLI   SMF4RTY,34          TSO STEP TERMINATION?
         BER   R14            ... SAVE THE CYCLES --- WE'RE            X
                              SENDING TSO LOGON JCL TO THE             X
                              'TRASHWTR' AT THIS TIME...
         LA    R15,MSGAREA         GET ADDRESS OF MESSAGE
         ST    R15,36(R12)
         MVC   42(2,R12),MSGLENG   PASS MESSAGE LENGTH
         L     R15,VIEFYS          GET ENTRY POINT ADDRESS
         BR    R15                 GO THERE!
         SPACE 1
*
*        B 2 $  CONVERTS A BINARY DOLLAR AMMOUNT TO EBCDIC
*        AND FORMATS IT FOR PRINTING
*
*              R1   BINARY DOLLAR AND CENTS VALUE
*              R6   RETURN REGISTER
*              DBLWORD IS A DOUBLE WORD WORK AREA
*              WRK$0PAT IS A 10 BYTE WORK AREA
*
B2$      CVD   R1,DBLWORD
         OI    DBLWORD+7,X'0F'
         MVC   WRK$0PAT,=X'4020206B2021204B2020'
         ED    WRK$0PAT,DBLWORD+4
         BR    R6
         SPACE 1
         TITLE 'IEFACTRT - CONSTANTS AND WORK AREAS'
* EX-EXUTED INSTRUCTIONS
MVCUID   MVC   0(0,R14),1(R6)
MOVACCT1 MVC   ACCT001C(1),1(R1)
MOVACCT2 MVC   SUBA001C(1),1(R1)
X0F      DC    F'15'
         SPACE 1
VIEFYS   DC    0F'0',V(IEFYS)
VCOREFMT GETMAIN EC,SP=&SP,MF=L
VCORELN  EQU   *-VCOREFMT
MSGLENG  DC    AL2(L'MSGAREA)
STAELFRM ESTAE TERM=NO,MF=L
STAELN   EQU   *-STAELFRM
WKAREALN DC    0F'0',AL1(&SP),AL3(AREASIZE)
MIDTIME  DC    A(24*60*60*100)     1 DAY (IN HUNDREDTHS OF SECONDS)
F360000  DC    A(60*60*100)        1 HOUR ( " " " )
F6000    DC    A(60*100)           1 MINUTE ( " " " )
F100     DC    F'100'              1 SECOND ( " " " )
         LTORG
VTAMTBL  DC    C'A',X'0A'          FOR VTAM TERMINAL ID CONVERSION
         DC    C'B',X'0B'
         DC    C'C',X'0C'
         DC    C'D',X'0D'
         DC    C'E',X'0E'
         DC    C'F',X'0F'
         DC    C'0',X'00'
         DC    C'1',X'01'
         DC    C'2',X'02'
         DC    C'3',X'03'
         DC    C'4',X'04'
         DC    C'5',X'05'
         DC    C'6',X'06'
         DC    C'7',X'07'
         DC    C'8',X'08'
         DC    C'9',X'09'
         DC    X'FF'              STOPPER
HEXTRANS DC    C'0123456789ABCDEF'
         SPACE 1
JCRLJOB  DC    C' JOBCARD READ'
JCRLTSO  DC    C' TSO LOGON AT'
DTFMT    DC    C' YYDDD HH:MM:SS '
VIOLABL  DC    C' VIO IO '
         SPACE 1
HDRMSG   DC    C'PRC-CCI  370/XXX VS2 RXX.XX XXXX  STEP STATISTICS'
         SPACE 1
STEPMSG1 DC    C'  STEP NAME'                    25
MSGCORE1 DC    C'USER CORE        *****K'        26
         ORG   MSGCORE1+16
         DC    X'402020202120'
         ORG
SM1B     DC    C'TAPES USED/IO'                  30
SM1C     DC    C'START   TIME'                   26
SM1D     DC    C'TCB TIME'                       23
         SPACE 1
STEPMSG2 DC    C'  PGM  NAME'                    25
MSGCORE2 DC    C'SYSTEM CORE      *****K'        26
         ORG   MSGCORE2+16
         DC    X'402020202120'
         ORG
SM2B     DC    C'DISKS USED/IO'                  30
SM2C     DC    C'STOP    TIME'                   26
SM2D     DC    C'SRB TIME'                       23
         SPACE 1
STEPMSG3 DC    C'        CODE'                   25
SPACES   EQU   STEPMSG3,8
MSGCORE3 DC    C'PRIVATE AREA SZ  *****K'        28
         ORG   MSGCORE3+16
         DC    X'402020202120'
         ORG
SM3B     DC    C'  ALLOC TIME'                   28
SM3C     DC    C'ELAPSED TIME'                   26
SM3D     DC    C'  PGM LOAD'                     23
         SPACE 1
STEPMSG4 DC    C'* PGNO * NR SRV UNITS * ACTIVE TIME *'
         DC    C'* PAGES IN *** PAGES OUT ** # SWAPS * PGS SWAP IN * '
         DC    C'PGS SWAP OUT * VIO PGS IN * VIO PGS OUT *'
         SPACE 1
         ORG
         SPACE 1
SEPFXFMT DC    C'SE ''(JES2JOB#) /'
         SPACE 1
WTO001C  WTO   'CCI001C (JS#XXX)/PGMNAMEX/CP:UT:IM.EX/WA:LL:TI/NOXEC/  X
                     /JOBNAMEX',                                       X
               ROUTCDE=(2),DESC=(6),MF=L
WTO001CL EQU   *-WTO001C
         SPACE 1
*    +4        +012345678 901234567 89012345678901234567890123
WTOSTAE  WTO   'CCI001D ''IEFACTRT'' ESTAE ENV FAILED (RC=XXX)',       X
               ROUTCDE=(2,10),DESC=4,MF=L
WTOSTAEL EQU   *-WTOSTAE
         SPACE 1
TAGNAME  DC    CL8'TELAGRAF'
NOTIFY   DC    CL6'NOTIFY'
TSOTRLR  DC    CL14''',LOGON,USER=('
         TITLE 'IEFACTRT - ESTAE ERROR RECOVERY CODE'
         DROP  R13,R10
         USING ERREXIT,R15
ERREXIT  CH    R0,=H'12'           WAS AN SDWA SUCCESSFULLY OBTAINED?
         BE    NOSDWA              IF NOT - RETURN QUICKLY
         STM   R14,R12,12(R13)
         LA    R10,0(R15)
         SH    R10,=AL2(ERREXIT-IEFACTRT)
         DROP  R15
         USING IEFACTRT,R10
         LR    R8,R15              MAKE ME A BASE
         USING ERREXIT,R8
         L     R2,0(R1)
         L     R2,4(R2)
         USING WORKAREA,R2
         MVC   RUB,=B'0000000000100100'      INDICATE 'REGISTER        X
                              UPDATE BLOCK' CONTAINS VALUES FOR        X
                              REGS 10 AND 13
         SETRP REGS=(14,12),RC=4,RETADDR=RETRY1,RETREGS=YES,RUB=RUB,   X
               FRESDWA=YES,RECORD=YES,COMPCOD=(484,USER)
         DROP  R10,R2
         USING WORKAREA,R13
         USING IEFACTRT,R10
RETRY1   WTO   MF=(E,ABEWTO)       WRITE MESSAGE DOCUMENTING           X
                              PROGRAM FAILURE --- FETCH THE SOFTWARE   X
                              RECORD FROM LOGREC FOR DETAILS!
         B     EXIT
         SPACE 2
         DROP  R13,R10,R8
         USING ERREXIT,R15
NOSDWA   LA    R0,RETRY2           ADDRESS OF RETRY ROUTINE
         LA    R15,4               REQUEST SCHEDULING OF RETRY ROUTINE
         DROP  R15
         BR    R14                 RETURN
         USING RETRY2,R15
RETRY2   L     R10,0(R1)
         L     R13,4(R1)
         DROP  R15
         USING WORKAREA,R13
         USING IEFACTRT,R10
         B     EXIT
         SPACE 2
         LTORG
ABEWTO   WTO   'CCI001D ''IEFACTRT'' ABEND',                           X
               ROUTCDE=(2,10),DESC=4,MF=L
         SPACE 1
PTCHAREA DC    0D'0',8CL8'PTCHAREA'  *** PATCH AREA ***
         TITLE 'IEFACTRT - DSECTS AND WORK AREAS'
ACCTABLE DSECT
UJITBLEN DC    F'0'           LENGTH OF ACCT TABLE
UJIHDR   DC    CL8'UJITABLE'  TABLE IDENTIFICATION
START1   DC    F'0'
START2   DC    F'0'
START3   DC    F'0'
START4   DC    F'0'
START5   DC    F'0'
START6   DC    F'0'
START7   DC    F'0'
STARTP   DC    F'0'
STARTEND DC    X'FF'          END OF ADDRESS TABLE
*
RVOLS    DC    50XL10'00'     RESIDENT VOLSER LIST
RVOLSEND DC    X'FF'          END OF RESIDENT VOLSER LIST
*
MMAP     DC    125X'00'       'M' ACCOUNTS BITMAP
CMAP     DC    125X'00'       'C' ACCOUNTS BITMAP
EMAP     DC    125X'00'       'E' ACCOUNTS BITMAP
FMAP     DC    125X'00'       'F' ACCOUNTS BITMAP
IMAP     DC    125X'00'       'I' ACCOUNTS BITMAP
HMAP     DC    125X'00'       'H' ACCOUNTS BITMAP
RMAP     DC    125X'00'       'R' ACCOUNTS BITMAP
TOTABLEN DC    F'0'           TOTAL LEN OF CSA TABLE
TBFIX    EQU   *-ACCTABLE     LENGTH OF FIXED PORTION
NUMBERS  EQU   *
         SPACE 3
EXCPTABL DSECT
RDRTIME  DS    F              READER START TIME
EXCPCNT  DS    F              EXCP COUNT FROM TYPE 40 RECORDS
         SPACE 3
WORKAREA DSECT                     GETMAINED WORKAREA
SAVEAREA DS    45F            'IEFYS' REQUIRES R13 POINT TO A          X
                              45 WORD WORKAREA
         ORG   SAVEAREA+18*4
DBLWORD  DS    D                   *
FULLWORD DS    F                   * WORKAREAS WHOSE CONTENTS ARE
FULLWRDS DS    2F                  * WORK FOR UCB SCAN &
AREAADDR DS    F                   * VOLITILE ACROSS CALLS TO 'IEFYS'
VCORE    DS    CL(VCORELN)         *
         ORG
SAVE10   DS    F                   SAVE OUR BASE REG
SAVE13   DS    F                   SAVE CALLER'S R13
DUBLWORK DS    D
MSVCPU   DS    F                   SAVE STEP CPU TIME X.XX SEC BINARY
MSVEXCP  DS    F                   SAVE TOTAL EXCPS BINARY
MSVMEM   DS    F                   SAVE USER MEMORY 1K BYTES BINARY
WRK$0PAT DS    CL10                WORK AREA FOR EDIT INSTR
         SPACE 2
MSGAREA  DS    CL132
         SPACE 1
* DEFINE VARIABLE FIELDS IN MSGAREA FOR DOLLAR TOTAL LINE
BLOCKC1  EQU   MSGAREA+03,7        C'CPU $ ('
BLOCKCP$ EQU   MSGAREA+10,9        CPU $-S
BLOCKC2  EQU   MSGAREA+19,12       C') + EXCP $ ('
BLOCKEX$ EQU   MSGAREA+31,9        EXCP $-S
BLOCKC3  EQU   MSGAREA+40,14       C') + MEMORY $ ('
BLOCKME$ EQU   MSGAREA+54,9        MEMORY $-S
BLOCKC4  EQU   MSGAREA+63,13       C') = TOTAL $ ('
BLOCKTO$ EQU   MSGAREA+76,9        TOTAL $-S
BLOCKC5  EQU   MSGAREA+85,1        C')'
         SPACE 1
* DEFINE VARIABLE FIELDS IN TOP ROW OF ASTERISKS FOR FIRST STEP
* OF JOB
         ORG   MSGAREA+4
MSGJCRL  DS    C' JOBCARD READ'
MSGJCRDT DS    C' YYDDD HH:MM:SS '
         ORG   MSGJCRDT+1
MSGJCRD  DS    CL5                 JULIAN DATE WHEN JOB ENTERED SYSTEM
         DS    CL1
MSGJCRT  DS    CL8                 TIME OF DAY WHEN JOB ENTERED SYSTEM
         SPACE 1
* DEFINE VARIABLE FIELDS IN MESSAGE HEADER LINE
         ORG   MSGAREA+43
MSGHDR   DS    C'PRC-CCI  370/XXX VS2 RXX.XX XXXX  STEP STATISTICS'
         ORG   MSGHDR+13
HDRMODNR DS    CL3                 CPU MODEL (E.G., '158')
         DS    CL6
HDRNUMB  DS    CL2                 OPERATING SYSTEM RELEASE NUMBER
         DS    CL1
HDRSUBNM DS    CL2                 SUBRELEASE NUMBER
         DS    CL1
HDRSID   DS    CL4                 SMF SYSTEM ID CODE
         SPACE 1
* DEFINE VARIABLE FIELDS IN 'STEPMSG1'
         ORG   MSGAREA+14
MSGSTPN  DS    CL8                 JOBSTEP NAME
         ORG   MSGAREA+43
MSGUCORE DS    CL5
         ORG   MSGAREA+66
MSG#TAPE DS    CL3                 # TAPE DEVICES ALLOCATED BY STEP
         DS    CL1
MSGTEXCP DS    CL9
         ORG   MSGAREA+96
MSGSTIME DS    CL8
         ORG   MSGAREA+118
MSGTCBTM DS    CL11
         SPACE 1
* DEFINE VARIABLE FIELDS IN 'STEPMSG2'
         ORG   MSGAREA+14
MSGPGMN  DS    CL8
         ORG   MSGAREA+43
MSGSCORE DS    CL5
         ORG   MSGAREA+66
MSG#DISK DS    CL3                 # DASD DEVICES ALLOCATED BY STEP
         DS    CL1
MSGDEXCP DS    CL9
         ORG   MSGAREA+96
MSGPTIME DS    CL8
         ORG   MSGAREA+118
MSGSRBTM DS    CL11
         SPACE 1
* DEFINE VARIABLE FIELDS IN 'STEPMSG3'
         ORG   MSGAREA+4
MSGNOEXC DS    C'-STEP NOT EXECUTED-'
         ORG   MSGAREA+4
MSGTTYPE DS    CL4
         ORG   MSGAREA+15
MSGATYPE DS    CL1
         DS    CL1
MSGCODE4 DS    0CL4
MSGCODE3 DS    CL3
         DS    CL1
         ORG   MSGAREA+43
MSGARESZ DS    CL5
         DS    CL2
MSGVRIND DS    CL3
         ORG   MSGAREA+68
MSGATIME DS    CL8
         ORG   MSGAREA+96
MSGETIME DS    CL8
         ORG   MSGAREA+120
MSGLTIME DS    CL8
         SPACE 1
* DEFINE VARIABLE FIELDS AT 'STEPMSG5'
         ORG   MSGAREA+4
MSGPGNO  DS    CL3                 PERFORMANCE GROUP NUMBER
         ORG   MSGAREA+11
MSGSST   DS    CL11                # SERVICE UNITS USED BY STEP
         ORG   MSGAREA+25
MSGACT   DS    C'HH:MM:SS.TH'      STEP ACTIVE TIME
         ORG   MSGAREA+38
MSGPGIN  DS    CL11
         ORG   MSGAREA+52
MSGPGOT  DS    CL11
         ORG   MSGAREA+66
MSGNSW   DS    CL7
         ORG   MSGAREA+76
MSGPSI   DS    CL11
         ORG   MSGAREA+90
MSGPSO   DS    CL11
         ORG   MSGAREA+104
MSGVPI   DS    CL11
         ORG   MSGAREA+118
MSGVPO   DS    CL11
         SPACE 1
* DEFINE VARIABLE FIELDS IN BOTTOM BORDER OF ASTERISKS
         ORG   MSGAREA+105
MSGVIOLA DS    CL(L'VIOLABL)
MSGVIOCT DS    CL9                 # VIO EXCPS USED IN STEP
MSGVIOSP DS    CL1
         SPACE 2
         ORG
         SPACE 2
WTOAREA  DS    0F,CL(WTO001CL)
         ORG   WTOAREA
         DS    CL(WTOSTAEL)
         SPACE 1
* DEFINE VARIABLE FIELDS IN STEP STATISTICS SUMMARY WTO MESSAGE
         ORG   WTOAREA+4+8
STPN001C DS    CL8                 STEPNAME
STP#001C EQU   STPN001C+4,3        STEP # IF NO STEP NAME
         DS    CL1
PGMN001C DS    CL8                 PROGRAM NAME (FROM JCL 'EXEC' CARD)
         DS    CL1
CPUT001C DS    CL11                CPU TIME USED BY STEP
         DS    CL1
ETME001C DS    CL8                 ELAPSED TIME FOR STEP
         DS    CL1
TERM001C DS    CL1                 * STEP EXECUTION STATUS
CODE001C DS    CL4                 * AND/OR TERMINATION CODE
         DS    CL1
ACCT001C DS    CL4                 JOB ACCOUNTING INFO
SUBA001C DS    CL4
         DS    CL1
JBN001C  DS    CL8                 JOBNAME
         SPACE 1
* DEFINE VARIABLE FIELDS IN ESTAE-FAILED MESSAGE
         ORG   WTOAREA+4+40
STAERC   DS    CL3                 RETURN CODE FROM ESTAE SVC
         ORG
         SPACE 2
#DISKS   DS    D
DIO      DS    D
VIO      DS    D
IOSW     DS    XL1
         DS    0H *********** REGISTER UPDATE BLOCK (I.E., 'RUB') ---
RUB      DS    XL2          * 'RUB' MUST BE ON A HALFWORD BOUNDARY     X
                            * THAT IS NOT ALSO A FULLWORD BOUNDARY,    X
                            * AND MUST IMMEDIATELY PRECEED 'STAER10'
*                           * AND 'STAER13', IN PRECISELY THAT ORDER
STAEPRMS DS    0F           *
STAER10  DS    F            *
STAER13  DS    F ************
STAELIST DS    CL(STAELN)
         DS    0D
         ORG
*  MESSAGE TO TSO USER WITH ACCT=(NOTIFY,USERID) PARAMETER
TSOSE    DS    F
TSOSEND  DS    0CL86
SEND     DS    C'SE'
SPACE1   DS    X'40'
QUOTE1   DS    X'7D'
         DS    C'('
SEJOB#   DS    CL8'JOB00000'       JES2  JOB/TSU  NUMBER
         DS    CL2') '
JBNTSO   DS    CL8                 JOBNAME
         DS    C'/'
PGMNTSO  DS    CL8                 PROGRAM NAME
         DS    C'/'
TERMTSO  DS    CL5                 TERMINATION CODE
         DS    C'/'
CPUTTSO  DS    CL11                CPU TIME USED BY STEP
         DS    C'/'
ETIMETSO DS    CL8                 ELAPSED TIME FOR STEP
         DS    C'/'
ACCTTSO  DS    CL4                 JOB ACCOUNTING INFORMATION
SUBATSO  DS    CL4
         DS    C'/'
EOSE     EQU   *
SELEN    EQU   EOSE-SEND
TSOA     DS    CL14                FOR ',LOGON,USER=('
TSOU     DS    CL32              FOR '7777777,7777777,7777777,7777777)'
SEND34   DS    CL18
SENDSW   DS    C
AREASIZE EQU   *-WORKAREA
         SPACE 1
         END
