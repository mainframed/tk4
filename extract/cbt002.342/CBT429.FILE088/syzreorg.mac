//$SPBHW      JOB (BHWEST,NOBOX),'$SPBHW',
//         CLASS=7,MSGCLASS=W,TIME=1440,
//         NOTIFY=$SPBHW,REGION=0M
//*-----------------------------------------------*
//*   LIB: $SPBHW.PDS.DATA(SYZREORG)
//*   DOC: ASSEMBLE AND LINK USING ASMA90
//*-----------------------------------------------*
//C      EXEC  PGM=ASMA90,PARM='RENT'
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,DCB=BLKSIZE=32000
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(10,5)),DSN=&SYSUT1
//SYSPRINT DD  SYSOUT=*
//SYSLIN   DD  DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(5,5,0)),            *
//             DCB=(BLKSIZE=400),DSN=&&LOADSET
//SYSIN    DD  *
SYZREORG TITLE 'UNLOAD AND / OR LOAD A VSAM OBJECT'
*        THE FOLLOWING IBM SUPPLIED MACROS ARE USED IN THIS PROGRAM
*        ABEND                          . TERMINATE A TASK
*        CALL                           . INVOKE A PROGRAM
*        CLOSE                          . TERMINATE A DATASET
*        DCB                            . DATA CONTROL BLOCK
*        DELETE                         . DELETE RESPONSIBILITY
*        EXTRACT                        . DETERMINE TIOT ADDRESS
*        FREEMAIN                       . RELEASE STORAGE
*        FREEPOOL                       . RELEASE BUFFER POOL
*        GENCB                          . GENERATE A CONTROL BLOCK
*        GET                            . READ A RECORD
*        GETMAIN                        . ACQUIRE STORAGE
*        LOAD                           . LOAD A PROGRAM
*        MODCB                          . MODIFY A CONTROL BLOCK
*        OPEN                           . PREPARE A DATASET
*        PUT                            . WRITE A RECORD
*        RDJFCB                         . READ JFCB
*        SHOWCB                         . OBTAIN CONTROL BLOCK DATA
*        TESTCB                         . TEST A CONTROL BLOCK
*        WTO                            . WRITE TO OPERATOR
*
*        THE FOLLOWING IBM SUPPLIED CONTROL BLOCK MAPPINGS ARE USED
*        DCBD                           . DCB (DSECT)
*        IEFJFCBN                       . JFCB
*        IEFTIOT1                       . TIOT
*        IFGACB                         . ACB (DSECT)
*
*        THE PROGRAM HAS THE FOLLOWING ATTRIBUTES
*              REENTRANT
*              AMODE(24)
         SPACE 1
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10                       . BRANCH AND SAVE RETURN ->
R11      EQU   11                       . PROGRAM CSECT BASE #1
R12      EQU   12                       . PROGRAM CSECT BASE #2
R13      EQU   13                       . -> SAVE AREA
R14      EQU   14                       . -> RETURN
R15      EQU   15                       . -> ENTRY POINT
*                                       . RETURN CODE
         TITLE 'MAIN CSECT PROCESSING CODE'
         PRINT NOGEN
         SPACE 1
*        1.    CSECT PROLOG
*              SAVE CALLER'S REGISTERS
*              ESTABLISH CSECT ADDRESSABILITY
*              ACQUIRE SAVE AREA AND DYNAMIC AREA
*              CHAIN SAVE AREAS
*        2.    PROCESS JOB STEP PARAMETER
*        3.    CHECK TIOT FOR DDNAMES
*        4.    CHECK BUFFER SPECIFICATIONS IN JCL
*        5.    PROGRAM INITIALIZATION
*        6.    PROGRAM PROCESSING
*        7.    PROGRAM TERMINATION
*        8.    CSECT PROLOG
*              RESTORE CALLER'S SAVE AREA ADDRESS
*              RELEASE ACQUIRED STORAGE
*              RESTORE CALLER'S REGISTERS
*              EXIT PROGRAM
*
*        REGISTER USAGE
*        2                              . WORK
*        3                              . WORK
*        10                             . BRANCH AND SAVE RETURN
*        11                             . CSECT BASE REGISTER 1
*        12                             . CSECT BASE REGISTER 2
*        13                             . -> SAVE AREA (DYNAMIC)
*        14                             . -> RETURN
*        15                             . -> ENTRY POINT
*                                       . RETURN CODE
         SPACE 1
SYZREORG CSECT
         STM   R14,R12,12(R13)          . SAVE CALLER'S REGISTERS
         LR    R11,R15                  . 11 -> ENTRY POINT
         LA    R12,4095(,R11)           . 12 -> 4095 AFTER EP
         LA    R12,1(,R12)              . 12 -> 4096 AFTER EP
         USING SYZREORG,R11,R12         . CSECT ADDRESSABILITY
         LA    R3,DYNLEN                . 3 - LENGTH OF DYNAMIC AREA
         GETMAIN RU,                    . ACQUIRE DYNAMIC AREA         C
               LV=(R3),                 .  (INCLUDES SAVE AREA)        C
               LOC=BELOW
         ST    R13,4(,R1)               . SAVE HSA ->
         ST    R1,8(,R13)               . SAVE LSA ->
         LR    R13,R1                   . 13 -> SAVE AREA
         USING DYNAREA,R13              . DSECT ADDRESSABILITY
         BAS   R10,JOBPARM              . PROCESS JOB STEP PARAMETER
         BAS   R10,CHKTIOT              . CHECK TIOT
         BAS   R10,CHKBUFF              . CHECK JCL BUFFER SPECIFICS
         BAS   R10,INITIAL              . PERFORM INITIALIZATION
         BAS   R10,PROCESS              . PERFORM PROCESSING
         BAS   R10,TERMIN               . PERFORM TERMINATION
         LA    R3,DYNLEN                . 3 - LENGTH OF DYNAMIC AREA
         LR    R2,R13                   . 2 -> DYNAMIC AREA
         L     R13,4(,R13)              . 13 -> CALLER'S SAVE AREA
         FREEMAIN RU,                   . RELEASE STORAGE              C
               A=(R2),                                                 C
               LV=(R3)
         L     R14,12(,R13)             . RESTORE RETURN ADDRESS
         SLR   R15,R15                  . RETURN CODE ZERO
         LM    R0,R12,20(R13)           . RESTORE CALLER'S REGISTERS
         BR    R14                      . RETURN
         TITLE 'CODE PROCESSING JOB STEP PARAMETER'
*        1.    ACCESS CALLER'S PARAMETER DATA
*        2.    VALIDATE CONTENT
*        3.    SET BIT(S)
*
*        REGISTER USAGE
*        1                              . WORK
*        10                             . RETURN
         SPACE 1
JOBPARM  EQU   *
         MVI   PARM,LOAD                . DEFAULT TO LOAD OPTION
         L     R1,4(,R13)               . 1 -> CALLER'S SAVE AREA
         L     R1,24(,R1)               . 1 -> PARAMETER LIST ->
         L     R1,0(,R1)                . 1 -> PARAMETER LIST
         CLC   0(2,R1),=H'+0'           . Q. PARAMETER SPECIFIED?
         BER   R10                      . A. NO - USE DEFAULT
         CLC   2(6,R1),=C'UNLOAD'       . Q. UNLOAD SPECIFIED?
         BE    B0001                    . A. YES
         CLC   2(5,R1),=C'REORG'        . Q. REORG SPECIFIED?
         BE    B0002                    . A. YES
         CLC   2(4,R1),=C'LOAD'         . Q. LOAD SPECIFIED?
         BNE   B0003                    . A. NO - ERROR
         BER   R10                      . A. YES - USE DEFAULT - EXIT
B0001    EQU   *
         MVI   PARM,UNLOAD              . SPECIFY UNLOAD
         BR    R10                      . EXIT
B0002    EQU   *
         MVI   PARM,REORG               . SPECIFY REORG
         BR    R10                      . EXIT
B0003    EQU   *
         WTO   MF=(E,WTO1L)             . OUTPUT ERROR MESSAGE
         ABEND 100,                     . ABEND TASK                   C
               DUMP
         TITLE 'CODE PROCESSING TIOT'
*        1.    ACCESS TIOT
*        2.    CHECK TIOT DDNAME CONTENT
*        3.    ENSURE MANDATORY DDNAMES PRESENT
*        4.    CROSS-CHECK THAT IF REORG SPECIFIED IN JOB STEP
*              PARAMETER, THEN AMSIN DDNAME MUST BE PRESENT
*
*        REGISTER USAGE
*        1                              . LENGTH OF TIOT ENTRY
*        2                              . -> TIOT
*        10                             . RETURN
         SPACE 1
CHKTIOT  EQU   *
         MVI   DDNAME,OFF               . INITIALIZE DDNAME FLAG
         LA    R2,@TIOT                 . 2 -> TIOT ->
         MVC   EXTRACT,EXTRACTL         . MOVE LIST FORM TO 24 BIT
         EXTRACT (R2),                  . ISSUE EXTRACT                C
               MF=(E,EXTRACT)
         L     R2,@TIOT                 . 2 -> TIOT
         USING IEFTIOT1,R2              . DSECT ADDRESSABILITY
         SLR   R1,R1                    . 1 - ZERO
C0001    EQU   *
         CLI   TIOELNGH,X'00'           . Q. TIOT ENTRY LENGTH ZERO?
         BE    C0005                    . A. YES - END OF TIOT
         CLC   TIOEDDNM,=CL8'VSAM'      . Q. DDNAME VSAM FOUND?
         BE    C0002                    . A. YES
         CLC   TIOEDDNM,=CL8'QSAM'      . Q. DDNAME QSAM FOUND?
         BE    C0003                    . A. YES
         CLC   TIOEDDNM,=CL8'AMSIN'     . Q. DDNAME AMSIN FOUND?
         BNE   C0004                    . A. NO
         OI    DDNAME,AMSIN             . INDICATE AMSIN PRESENT
         B     C0004                    . CHECK NEXT TIOT ENTRY
C0002    EQU   *
         OI    DDNAME,VSAM              . INDICATE VSAM PRESENT
         B     C0004                    . CHECK NEXT TIOT ENTRY
C0003    EQU   *
         OI    DDNAME,QSAM              . INDICATE QSAM PRESENT
C0004    EQU   *
         IC    R1,TIOELNGH              . 1 - TIOT ENTRY LENGTH
         AR    R2,R1                    . 2 -> NEXT TIOT ENTRY
         B     C0001                    . PROCESS NEXT ENTRY
C0005    EQU   *                        . END OF TIOT
         MVI   ERROR,OFF                . INITIALIZE ERROR FLAG
         TM    DDNAME,VSAM              . Q. VSAM PRESENT?
         BO    C0006                    . A. YES
         MVI   ERROR,ON                 . FLAG ERROR
         WTO   MF=(E,WTO2L)             . OUTPUT MESSAGE
C0006    EQU   *
         TM    DDNAME,QSAM              . Q. QSAM PRESENT?
         BO    C0007                    . A. YES
         MVI   ERROR,ON                 . FLAG ERROR
         WTO   MF=(E,WTO3L)             . OUTPUT MESSAGE
C0007    EQU   *
         TM    PARM,REORG               . Q. REORG PARAMETER?
         BNO   C0008                    . A. NO
         TM    DDNAME,AMSIN             . Q. AMSIN PRESENT?
         BO    C0008                    . A. YES - VALID
         MVI   ERROR,ON                 . FLAG ERROR
         WTO   MF=(E,WTO4L)             . OUTPUT MESSAGE
C0008    EQU   *
         CLI   ERROR,OFF                . Q. ANY ERRORS?
         BER   R10                      . A. NO - EXIT
         ABEND 101,                     . ABEND TASK                   C
               DUMP
         TITLE 'CHECK JCL BUFFER SPECIFICATIONS'
*        1.    ISSUE READ JOB FILE CONTROL BLOCK FOR VSAM OBJECT
*        2.    SAVE VSAM OBJECT DSNAME
*        3.    SET FLAG IF LESS THAN 10 VSAM DATA BUFFERS SPECIFIED
*        4.    ISSUE READ JFCB FOR QSAM
*        5.    SAVE QSAM FILE DSNAME
*        6.    SET FLAG IF LESS THAN 10 BUFFERS SPECIFIED
*
*        REGISTER USAGE
*        2                              . -> DYNAMIC DCB
*        3                              . -> DCB EXIT
*        4                              . -> JFCB MAPPING
*        10                             . RETURN
         SPACE 1
CHKBUFF  EQU   *
         MVI   VSAMBUFF,OFF             . INITIALIZE BUFFER FLAGS
         MVI   QSAMBUFF,OFF
         LA    R2,DCB1                  . 2 -> DYNAMIC DCB AREA
         USING IHADCB,R2                . DCB DSECT ADDRESSABILITY
         MVC   DCB1(LDUMDCB),DUMDCB     . MOVE IN "FORM" DCB
         MVC   DCBDDNAM,=CL8'VSAM'      . SPECIFY DDNAME
         LA    R4,INFMJFCB              . 4 -> JFCB MAPPING
         ST    R4,DCBEXIT               . STORE IN DCB EXIT
         MVI   DCBEXIT,X'87'            . INDICATE READ JFCB AND END
         LA    R3,DCBEXIT               . 3 -> DCB EXIT
         ST    R3,DCBEXLST              . STORE IN DCB
         MVC   DMAL(4),RDJFCBL          . MOVE LIST FORM READ JFCB
         RDJFCB ((R2)),                 . ISSUE READ JFCB              C
               MF=(E,DMAL)
         LTR   R15,R15                  . Q. READ JFCB OKAY?
         BNZ   D0002                    . A. NO
         MVC   VSAMDSN,JFCBDSNM         . SAVE VSAM OBJECT DSNAME
         CLC   JFCBADBF,=H'+39'         . Q. MORE THAN 39 DATA BUFFERS?
         BH    D0001                    . A. YES
         MVI   VSAMBUFF,ON              . A. NO - SET FLAG FOR MODCB
D0001    EQU   *
         MVC   DCBDDNAM,=CL8'QSAM'      . SPECIFY DDNAME
         MVC   DMAL(4),RDJFCBL          . MOVE LIST FORM READ JFCB
         RDJFCB ((R2)),                 . ISSUE READ JFCB              C
               MF=(E,DMAL)
         LTR   R15,R15                  . Q. READ JFCB OKAY?
         BNZ   D0002                    . A. NO
         MVC   QSAMDSN,JFCBDSNM         . SAVE QSAM FILE DSNAME
         CLC   JFCBADBF,=H'+49'         . Q. MORE THAN 49 BUFFERS?
         BHR   R10                      . A. YES - EXIT
         MVI   QSAMBUFF,ON              . A. NO - SET OPEN EXIT FLAG
         BR    R10                      . EXIT
         DROP  R2                       . DSECT NOT REQUIRED
D0002    EQU   *
         WTO   MF=(E,WTO5L)             . READ JFCB ERROR MESSAGE
         ABEND 102,                     . ABEND TASK                   C
               DUMP
         TITLE 'PRE-PROCESSING INITIALIZATION - GENERATE CBS ...'
*        1.    ISSUE READ JOB FILE CONTROL BLOCK FOR VSAM OBJECT
*        2.    SAVE VSAM OBJECT DSNAME
*        3.    SET FLAG IF LESS THAN 10 VSAM DATA BUFFERS SPECIFIED
*        4.    ISSUE READ JFCB FOR QSAM
*        5.    SAVE QSAM FILE DSNAME
*        6.    SET FLAG IF LESS THAN 10 BUFFERS SPECIFIED
*
*        REGISTER USAGE
*        2                              . -> DYNAMIC DCB
*        3                              . -> DCB EXIT
*        4                              . -> JFCB MAPPING
*        10                             . RETURN
         SPACE 1
INITIAL  EQU   *
         ZAP   #RECREAD,=P'+0'          . INITIALIZE ACCUMULATORS
         ZAP   #RECWRIT,=P'+0'
         ZAP   #PAGE,=P'+0'             . INITIALIZE REPORT ACCUMS
         ZAP   #LINE,=P'+60'
         MVI   FIRST,ON                 . INITIALIZE REPORT FLAG
         MVI   OUTLINE,C' '             . INITIALIZE REPORT RECORD
         MVC   OUTLINE+1(L'OUTLINE-1),OUTLINE
         MVC   DCB1(LQSAMDCB),QSAMDCB   . MOVE QSAM FORM DCB
         LA    R2,DCB1                  . 2 -> QSAM DYNAMIC DCB
         MVC   DCB2(LSYSDCB),SYSDCB     . MOVE SYSOUT FORM DCB
         LA    R9,GENRPL                . 9 - LENGTH OF LONGEST
*                                       .   PARAMETER LIST
         GETMAIN RU,                    . ACQUIRE STORAGE FOR PARAMETERC
               LV=(R9),                 .   LIST                       C
               LOC=BELOW
         LR    R9,R1                    . 9 -> ACQUIRED STORAGE
         GENCB BLK=ACB,                 . GENERATE AN ACB              C
               AM=VSAM,                                                C
               DDNAME=VSAM,                                            C
               MACRF=(SEQ,OUT),                                        C
               MF=(G,(R9))
         ST    R1,@ACB                  . SAVE ACB ADDRESS
         GENCB BLK=EXLST,               . GENERATE AN EXIT LIST        C
               AM=VSAM,                                                C
               EODAD=H0004,                                            C
               MF=(G,(R9))
         ST    R1,@EXIT                 . SAVE EXIT LIST ADDRESS
         L     R2,@ACB                  . 2 -> ACB
         LR    R3,R1                    . 3 -> EXIT LIST
         MODCB ACB=(R2),                . MODIFY ACB -> EXIT LIST      C
               EXLST=(R3),                                             C
               MF=(G,(R9))
         CLI   VSAMBUFF,OFF             . Q. ADDITIONAL VSAM BUFFERS?
         BE    E0001                    . A. NO
         MODCB ACB=(R2),                . MODIFY ACB - 40 DATA BUFFERS C
               BUFND=40,                                               C
               MF=(G,(R9))
E0001    EQU   *
         MVC   DMAL(8),OPEN2L           . MOVE LIST FORM OPEN TO DMA
         LA    R4,DCB2                  . 4 -> SYSOUT DCB
         OPEN  ((R2),,(R4),OUTPUT),     . OPEN ACB AND SYSOUT DCB      C
               MF=(E,DMAL)
         LTR   R15,R15                  . Q. OPEN OKAY?
         BZ    E0002                    . A. YES
         USING IFGACB,R2                . ACB DSECT ADDRESSABILITY
         TM    ACBOFLGS,ACBOPEN         . Q. ACB OPEN OKAY?
         BNO   E0007                    . A. NO
         DROP  R2                       . ACB DSECT NOT REQUIRED
         USING IHADCB,R4                . DCB DSECT ADDRESSABILITY
         TM    DCBOFLGS,DCBOFOPN        . Q. DCB OPEN OKAY
         BNO   E0008                    . A. NO
         DROP  4                        . DCB DSECT NOT REQUIRED
E0002    EQU   *
         MVI   OBJ,ESDS                 . DEFAULT OBJECT - ESDS
         LA    R3,4                     . 3 - DEFAULT KEY LENGTH (4)
         ST    R3,#KEY                  . SAVE KEY LENGTH
         TESTCB ACB=(R2),               . CHECK FOR ESDS (LIST FORM)   C
               ATRB=ESDS,                                              C
               MF=(L,(R9))
         TESTCB ACB=(R2),               . Q. OBJECT AN ESDS? (EXECUTE) C
               MF=(E,(R9))
         BE    E0003                    . A. YES
         MVI   OBJ,RRDS                 . SET DEFAULT TO RRDS
         TESTCB ACB=(R2),               . Q. OBJECT AN RRDS?           C
               ATRB=RRDS,               .   (SHARED PARAMETER LIST)    C
               MF=(E,(R9))
         BE    E0003                    . A. YES
         MVI   OBJ,LDS                  . INDICATE A LINEAR DATASET
         TESTCB ACB=(R2),               . Q. OBJECT AN LINEAR DS?      C
               ATRB=LDS,                .   (SHARED PARAMETER LIST)    C
               MF=(E,(R9))
         BE    E0016                    . A. YES
         MVI   OBJ,KSDS                 . INDICATE A KSDS
         LA    R3,#KEY                  . 3 -> KEY LENGTH
         SHOWCB ACB=(R2),               . DETERMINE KEY LENGTH         C
               AREA=(R3),                                              C
               FIELDS=KEYLEN,                                          C
               LENGTH=4,                                               C
               MF=(G,(R9))
         L     R3,#KEY                  . 3 - KEY LENGTH
E0003    EQU   *
         GETMAIN RU,                    . ACQUIRE STORAGE FOR KEY      C
               LV=(R3),                                                C
               LOC=BELOW
         ST    R1,@KEY                  . SAVE KEY AREA ADDRESS
         LA    R3,LRECL                 . 3 -> RECORD LENGTH AREA
         SHOWCB ACB=(R2),               . DETERMINE MAXIMUM RECORD     C
               AREA=(R3),               .   LENGTH                     C
               FIELDS=LRECL,                                           C
               LENGTH=4,                                               C
               MF=(G,(R9))
         L     R3,LRECL                 . 3 - RECORD LENGTH
         GETMAIN RU,                    . ACQUIRE STORAGE FOR RECORD   C
               LV=(R3),                                                C
               LOC=BELOW
         ST    R1,@RECI                 . SAVE RECORD AREA ADDRESS
         L     R3,@KEY                  . 3 -> KEY AREA
         L     R4,LRECL                 . 4 - RECORD LENGTH
         LR    R8,R1                    . 8 -> RECORD AREA
         GENCB BLK=RPL,                 . GENERATE RPL                 C
               ACB=(R2),                                               C
               AM=VSAM,                                                C
               AREA=(R8),                                              C
               AREALEN=(R4),                                           C
               ARG=(R3),                                               C
               OPTCD=(SEQ,MVE),                                        C
               MF=(G,(R9),GENRPL)
         ST    R1,@RPL                  . SAVE RPL ADDRESS
         TM    PARM,UNLOAD              . Q. UNLOAD REQUESTED
         BNO   E0005                    . A. NO
         TM    PARM,REORG               . Q. REORG  REQUESTED
         BNO   UNCONT                   . A. NO, THEN SKIP NEXT TESTS
         CLI   OBJ,KSDS                 . Q. KSDS OBJECT?
         BNE   UNCONT                   . A. NO, THEN SKIP NEXT TESTS
         TESTCB ACB=(R2),               . Q. OBJECT HAS AT LEAST       C
               NCIS=10,   <== MODIFY?   .    THIS MANY CISPLITS?       C
               MF=(E,(R9))              .   (SHARED PARAMETER LIST)
         BH    UNCONT                   . A. YES, THEN DO UNLOAD
         TESTCB ACB=(R2),               . Q. OBJECT HAS AT LEAST       C
               NSSS=5,    <== MODIFY?   .    THIS MANY CASPLITS?       C
               MF=(E,(R9))              .   (SHARED PARAMETER LIST)
         BH    UNCONT                   . A. YES, THEN DO UNLOAD
         WTO   MF=(E,WTO16L)            . OUTPUT MESSAGE
         BAS   R10,TERMIN               . PERFORM TERMINATION
         LA    R3,DYNLEN                . 3 - LENGTH OF DYNAMIC AREA
         LR    R2,R13                   . 2 -> DYNAMIC AREA
         L     R13,4(,R13)              . 13 -> CALLER'S SAVE AREA
         FREEMAIN RU,                   . RELEASE DYNAMIC AREA         C
               A=(R2),                                                 C
               LV=(R3)
         L     R14,12(,R13)             . RESTORE 14
         LA    R15,2                    . 02 - RETURN CODE
         LM    R0,R12,20(R13)           . RESTORE 0 THRU 12
         BR    R14                      . RETURN TO CALLER
UNCONT   LR    R4,R1                    . 4 -> RPL
         GET   RPL=(R4)                 . READ A RECORD
         LTR   R15,R15                  . Q. READ OKAY?
         BZ    E0005                    . A. YES
         ST    R15,REG15                . SAVE 15
         B     BTAB001(R15)             . BRANCH DEPENDENT ON 15
BTAB001  B     E0005                    . RETURN CODE 0
         B     E0009                    . RETURN CODE 4
         B     E0004                    . RETURN CODE 8
         B     E0009                    . RETURN CODE 12
E0004    EQU   *
         LA    R3,VSAMERC               . 3 -> ERROR CODE
         SHOWCB RPL=(R4),               . OBTAIN RPL FEED BACK VALUE   C
               AREA=(R3),                                              C
               FIELDS=FDBK,                                            C
               LENGTH=4,                                               C
               MF=(G,(R9))
         CLC   VSAMERC,=F'116'          . Q. EMPTY OBJECT?
         BNE   E0010                    . A. NO
         WTO   MF=(E,WTO6L)             . OUTPUT INPUT EMPTY MESSAGE
         XI    PARM,UNLOAD              . DE-FLAG UNLOAD PROCESS
E0005    EQU   *
         MVC   DMAL(4),OPEN1L           . DMA FOR ONE FILE TO CLOSE
         CLOSE ((R2)),                  . CLOSE THE ACB                C
               MF=(E,DMAL)
         CLI   OBJ,ESDS                 . Q. ESDS OBJECT?
         BE    E0006                    . A. YES
         MODCB ACB=(R2),                . MODIFY ACB FOR KEY PROCESS   C
               MACRF=KEY,                                              C
               MF=(G,(R9))
         BR    R10                      . EXIT
E0006    EQU   *
         L     R3,@RPL                  . 3 -> RPL
         MODCB RPL=(R3),                . MODIFY RPL FOR RBA PROCESS   C
               OPTCD=ADR,                                              C
               MF=(G,(R9))
         BR    R10                      . EXIT
E0007    EQU   *
         ST    R15,REG15                . SAVE CONTENT OF 15
         WTO   MF=(E,WTO7L)             . OUTPUT ERROR MESSAGE
         LA    R3,VSAMERC               . 3 -> ERROR CODE
         SHOWCB ACB=(R2),               . DETERMINE ACB ERROR CODE     C
               AREA=(R3),                                              C
               FIELDS=ERROR,                                           C
               LENGTH=4,                                               C
               MF=(G,(R9))
         LM    R2,R3,VSAMERR            . 2 AND 3 ERROR DATA
         ABEND 103,                     . ABEND TASK                   C
               DUMP
E0008    EQU   *
         WTO   MF=(E,WTO8L)             . OUTPUT MESSAGE
         LA    R3,DYNLEN                . 3 - LENGTH OF DYNAMIC AREA
         LR    R2,R13                   . 2 -> DYNAMIC AREA
         L     R13,4(,R13)              . 13 -> CALLER'S SAVE AREA
         FREEMAIN RU,                   . RELEASE DYNAMIC AREA         C
               A=(R2),                                                 C
               LV=(R3)
         L     R14,12(,R13)             . RESTORE 14
         LA    R15,10                   . 15 - RETURN CODE
         LM    R0,R12,20(R13)           . RESTORE 0 THRU 12
         BR    R14                      . RETURN TO CALLER
E0009    EQU   *
         LA    R3,VSAMERC               . 3 -> ERROR FIELD
         L     R4,@RPL                  . 4 -> RPL
         SHOWCB RPL=(R4),               . DETERMINE RPL FEED BACK CODE C
               AREA=(R3),                                              C
               FIELDS=FDBK,                                            C
               LENGTH=4,                                               C
               MF=(G,(R9))
E0010    EQU   *
         WTO   MF=(E,WTO9L)             . OUTPUT GET FAILURE MESSAGE
         LM    R2,R3,VSAMERR            . 2 AND 3 ERROR DATA
         ABEND 104,                     . ABEND TASK                   C
               DUMP
E0016    EQU   *                        . LINEAR DATASET, DON'T PLAY
         WTO   MF=(E,WTO16L)            . OUTPUT MESSAGE
         BAS   R10,TERMIN               . PERFORM TERMINATION
         LA    R3,DYNLEN                . 3 - LENGTH OF DYNAMIC AREA
         LR    R2,R13                   . 2 -> DYNAMIC AREA
         L     R13,4(,R13)              . 13 -> CALLER'S SAVE AREA
         FREEMAIN RU,                   . RELEASE DYNAMIC AREA         C
               A=(R2),                                                 C
               LV=(R3)
         L     R14,12(,R13)             . RESTORE 14
         LA    R15,16                   . 15 - RETURN CODE
         LM    R0,R12,20(R13)           . RESTORE 0 THRU 12
         BR    R14                      . RETURN TO CALLER
         TITLE 'MAIN PROCESSING'
*        1.    OBTAIN ADDRESSABILITY TO VSAM ACB AND QSAM DCB
*        2.    IF UNLOAD REQUESTED, PERFORM UNLOAD
*        3.    IF AMSIN DDNAME PRESENT, PERFORM IDCAMS INVOCATION
*        4.    IF LOAD REQUESTED, PERFORM LOAD
*
*        REGISTER USAGE
*        4                              . -> ACB
*        5                              . -> DCB
*        7                              . -> MESSAGE
*        10                             . RETURN
         SPACE 1
PROCESS  EQU   *
         ST    R10,FSAVE                . SAVE RETURN ADDRESS
         L     R4,@ACB                  . 4 -> VSAM ACB
         USING IFGACB,R4                . DSECT ADDRESSABILITY
         LA    R5,DCB1                  . 5 -> QSAM DCB
         USING IHADCB,R5                . DSECT ADDRESSABILITY
         TM    PARM,UNLOAD              . Q. UNLOAD SPECIFIED?
         BNO   F0001                    . A. NO
         BAS   R10,UNLDVSAM             . PERFORM UNLOAD PROCESS
         LA    R7,UNLDMSG               . 7 -> UNLOAD MESSAGE
         BAS   R10,REPORT               . OUTPUT REPORT
         MVI   OUTLINE,C'0'             . RE-INITIALIZE REPORT RECORD
         ZAP   #RECREAD,=P'+0'          . RE-INITIALIZE RECORD COUNTS
         ZAP   #RECWRIT,=P'+0'
F0001    EQU   *
         TM    DDNAME,AMSIN             . Q. AMSIN DDNAME PRESENT?
         BNO   F0002                    . A. NO
         BAS   R10,CALLIDC              . INVOKE IDCAMS
F0002    EQU   *
         L     R4,@ACB                  . 4 -> ACB
         TM    PARM,LOAD                . Q. LOAD SPECIFIED?
         BNO   F0003                    . A. NO
         BAS   R10,LOADVSAM             . PERFORM LOAD PROCESS
         LA    R7,LOADMSG               . 7 -> LOAD MESSAGE
         BAS   R10,REPORT               . OUTPUT REPORT
F0003    EQU   *
         L     R10,FSAVE                . RESTORE 10
         BR    R10                      . EXIT
         TITLE 'TERMINATION PROCESSING'
*        1.    RELEASE PARAMETER LIST WORK AREA
*        2.    CLOSE SYSOUT DCB
*        3.    FREE SYSOUT BUFFER POOL
*
*        REGISTER USAGE
*        3                              . LENGTH OF PARAMETER LIST
*        4                              . -> DCB
*        9                              . -> PARAMETER LIST AREA
*        10                             . RETURN
         SPACE 1
TERMIN   EQU   *
         LA    R3,GENRPL                . 3 - LENGTH OF AREA
         FREEMAIN RU,                   . RELEASE STORAGE              C
               A=(R9),                                                 C
               LV=(R3)
         LA    R4,DCB2                  . 4 -> SYSOUT DCB
         MVC   DMAL(4),OPEN1L           . CLOSE DMA FOR ONE FILE
         CLOSE ((R4)),                  . CLOSE SYSOUT                 C
               MF=(E,DMAL)
         FREEPOOL (R4)                  . FREE SYSOUT BUFFER POOL
         BR    R10                      . EXIT
         TITLE 'CODE CONTROLLING UNLOAD OF VSAM OBJECT'
*        1.    ESTABLISH OPEN EXIT FOR QSAM
*        2.    OPEN VSAM AND QSAM
*        3.    CHECK OPENS AND CHECK QSAM FOR VALID RECORD FORMAT
*        4.    READ A VSAM RECORD
*        5.    WRITE TO THE QSAM FILE.  THIS WILL NOT WRITE A RECORD
*              THE FIRST TIME, ONLY RETURN THE ADDRESS OF WHERE TO
*              BUILD THE NEXT RECORD.  ON THE SECOND AND SUBSEQUENT
*              PUTS, THE PREVIOUS RECORD WILL BE WRITTEN, AND THE
*              ADDRESS OF THE NEXT RECORD RETURNED.  THE LAST RECORD
*              IS WRITTEN WHEN THE FILE IS CLOSED.  SUCH ARE THE JOYS
*              OF PUT LOCATE PROCESSING!
*        6.    MOVE THE INPUT RECORD TO THE OUTPUT AREA.  THIS MAY
*              REQUIRE THE MANUFACTURE OF A RECORD DESCRIPTOR WORD
*              (RDW) IF THE OUTPUT IS VARIABLE IN LENGTH
*        7.    AT END OF VSAM, CLOSE FILES AND FREE BUFFER POOL
*
*        REGISTER USAGE
*        1                              . -> OUTPUT RECORD
*        2                              . -> INPUT RECORD
*        3                              . WORK
*        4                              . -> VSAM ACB
*                                       . -> VSAM RPL
*        5                              . -> QSAM DCB
*        6                              . -> OUTPUT RECORD
*        7                              . RECORD LENGTH
*        9                              . -> PARAMETER LIST AREA
*        10                             . RETURN
         SPACE 1
UNLDVSAM EQU   *
         MVC   DCBEXIT+1(3),=AL3(OPENEXIT) . SPECIFY OPEN EXIT
         MVI   DCBEXIT,X'85'
         LA    R3,DCBEXIT               . 3 -> OPEN EXIT ->
         ST    R3,DCBEXLST              . SAVE IN DCB
         MVC   DMAL(8),OPEN2L           . DMAL FOR TWO FILES
         OPEN  ((R4),,(R5),OUTPUT),     . OPEN VSAM AND QSAM           C
               MF=(E,DMAL)
         TM    DCBOFLGS,DCBOFOPN        . Q. QSAM OPEN OKAY?
         BNO   H0005                    . A. NO - ERROR
         TM    RECFM,DCBRECU            . Q. UNDEFINED RECORD FORMAT?
         BO    H0006                    . A. YES - ERROR
         TM    ACBOFLGS,ACBOPEN         . Q. ACB OPEN OKAY?
         BNO   H0008                    . A. NO - ERROR
         L     R4,@RPL                  . 4 -> RPL
         CLI   BLKSIZE,OFF              . Q. QSAM BLKSIZE SPECIFIED?
         BE    H0001                    . A. YES
         WTO   MF=(E,WTO10L)            . OUTPUT NO BLKSIZE MESSAGE
H0001    EQU   *
         GET   RPL=(R4)                 . READ A RECORD FROM VSAM
         LTR   R15,R15                  . Q. READ SUCCESSFUL?
         BNZ   H0009                    . A. NO
         PUT   (R5)                     . PUT TO QSAM
         LR    R6,R1                    . 6 -> OUTPUT QSAM RECORD
         AP    #RECREAD,=P'+1'          . INCREMENT RECORDS READ
         TM    RECFM,DCBRECV            . Q. OUTPUT VARIABLE LENGTH?
         BNO   H0002                    . A. NO
         LA    R3,RECLEN                . 3 -> RECORD LENGTH FIELD
         SHOWCB RPL=(R4),               . DETERMINE LENGTH OF VSAM     C
               AREA=(R3),               .   RECORD                     C
               FIELDS=RECLEN,                                          C
               LENGTH=4,                                               C
               MF=(G,(R9))
         L     R3,RECLEN                . 3 - RECORD LENGTH
         AH    R3,=H'+4'                . INCREMENT FOR RDW
         STH   R3,0(0,R6)               . STORE IN LL
         XC    2(2,R6),2(R6)            . ZAP SEGMENT DATA
         L     R3,RECLEN                . 3 - RECORD LENGTH
         LA    R6,4(,R6)                . 6 -> AFTER CONTROL DATA
         B     H0003
H0002    EQU   *
         L     R3,LRECL                 . 3 - RECORD LENGTH (FIXED)
H0003    EQU   *
         L     R2,@RECI                 . 2 -> INPUT RECORD
         LR    R7,R3                    . 7 - RECORD LENGTH FOR MVCL
         MVCL  R6,R2                    . MOVE INPUT RECORD TO OUTPUT
         AP    #RECWRIT,=P'+1'          . INCREMENT RECORDS WRITTEN
         B     H0001                    . READ NEXT RECORD
H0004    EQU   *                        . VSAM EODAD ADDRESS
         L     R4,@ACB                  . 4 -> ACB
         MVC   DMAL(8),OPEN2L           . DMAL TO CLOSE TO FILES
         CLOSE ((R4),,(R5)),            . CLOSE VSAM AND QSAM          C
               MF=(E,DMAL)
         FREEPOOL (R5)                  . FREE QSAM BUFFER POOL
         BR    R10                      . EXIT
H0005    EQU   *                        . QSAM OPEN FAIL
         WTO   MF=(E,WTO11L)            . OUTPUT MESSAGE
         B     H0007
H0006    EQU   *                        . QSAM UNDEFINED RECORD FORMAT
         WTO   MF=(E,WTO12L)            . OUTPUT MESSAGE
H0007    EQU   *
         LA    R3,DYNLEN                . 3 - LENGTH OF DYNAMIC
         LR    R2,R13                   . 2 -> DYNAMIC AREA
         L     R13,4(,R13)              . 13 -> CALLER'S SAVE AREA
         FREEMAIN RU,                   . RELEASE DYNAMIC AREA         C
               A=(R2),                                                 C
               LV=(R3)
         L     R14,12(,R13)             . RESTORE 14
         LA    R15,10                   . 15 - RETURN CODE
         LM    R0,R12,20(R13)           . RESTORE 0 THRU 12
         BR    R14                      . EXIT
H0008    EQU   *                        . OPEN FAILURE VSAM
         ST    R15,REG15                . SAVE 15
         WTO   MF=(E,WTO7L)             . OUTPUT MESSAGE
         LA    R3,VSAMERC               . 3 -> ACB ERROR FIELD
         SHOWCB ACB=(R4),               . DETERMINE ACB ERROR VALUE    C
               AREA=(R3),                                              C
               FIELDS=ERROR,                                           C
               LENGTH=4,                                               C
               MF=(G,(R9))
         LM    R2,R3,VSAMERR            . 2 AND 3 DATA FIELDS
         ABEND 103,                     . ABEND TASK                   C
               DUMP
H0009    EQU   *                        . GET FAILURE VSAM
         ST    R15,REG15                . SAVE 15
         WTO   MF=(E,WTO13L)            . OUTPUT MESSAGE
         LA    R3,VSAMERC               . 3 -> RPL FEED BACK FIELD
         SHOWCB RPL=(R2),               . DETERMINE RPL FEED BACK VALUEC
               AREA=(R3),                                              C
               FIELDS=FDBK,                                            C
               LENGTH=4,                                               C
               MF=(G,(R9))
         LM    R2,R3,VSAMERR            . 2 AND 3 DATA FIELDS
         ABEND 103,                     . ABEND TASK                   C
               DUMP
         TITLE 'CODE INVOKING IDCAMS'
*        1.    LOAD IDCAMS
*        2.    ESTABLISH IDCAMS PARAMETER LIST
*        3.    CALL IDCAMS
*        4.    CHECK RETURN CODE
*        5.    DECREMENT RESPONSIBILITY COUNT
*
*        REGISTER USAGE
*        0                              . MACROS
*        1                              . WORK
*        2                              . WORK
*        10                             . RETURN
         SPACE 1
CALLIDC  EQU   *
         LA    R2,IDCAMS                . 2 -> PROGRAM NAME
         LOAD  EPLOC=(R2)               . LOAD INTO STORAGE
         ST    R0,@IDCAMS               . SAVE ENTRY POINT ADDRESS
         LA    R1,NULL                  . OPTION PARAMETER - NOT USED
         ST    R1,@OPTION               . SAVE IN PARAMETER LIST
         LA    R1,DNAMEL                . DDNAME PARAMETER
         ST    R1,@DNAMEL               . SAVE IN PARAMETER LIST
         OI    @DNAMEL,X'80'            . INDICATE LAST PARAMETER
         L     R15,@IDCAMS              . 15 -> ENTRY POINT
         LA    R2,@OPTION               . 2 -> PARAMETER LIST
         CALL  (15),                    . INVOKE IDCAMS                C
               MF=(E,(R2))
         B     BTAB002(R15)             . BRANCH DEPENDENT ON 15
BTAB002  B     I0001                    . RETURN CODE 0
         B     I0001                    . RETURN CODE 4
         B     I0002                    . RETURN CODE 8  - KIMSHEE
         B     I0002                    . RETURN CODE 12 - DEEP KIMSHEE
         B     I0002                    . RETURN CODE 16 - VERY DEEP
I0001    EQU   *
         LA    R2,IDCAMS                . 2 -> PROGRAM NAME
         DELETE EPLOC=(R2)              . DECREMENT RESPONSIBILITY
         BR    R10                      . EXIT
I0002    EQU   *
         ST    R15,REG15                . SAVE 15
         WTO   MF=(E,WTO14L)            . OUTPUT MESSAGE
         LA    R3,DYNLEN                . 3 - LENGTH OF DYNAMIC AREA
         LR    R2,R13                   . 2 -> DYNAMIC AREA
         L     R13,4(,R13)              . 13 -> CALLER'S SAVE AREA
         FREEMAIN RU,                   . RELEASE STORAGE              C
               A=(R2),                                                 C
               LV=(R3)
         L     R14,12(,R13)             . RESTORE 14
         L     R15,REG15                . RESTORE 15
         LM    R0,R12,20(R13)           . RESTORE 0 THRU 12
         BR    R14                      . RETURN
         TITLE 'CODE CONTROLLING LOAD OF VSAM OBJECT'
*        1.    ESTABLISH OPEN EXIT FOR QSAM
*        2.    OPEN VSAM AND QSAM
*        3.    CHECK OPENS
*        4.    READ A QSAM RECORD
*        5.    MODIFY THE RPL WITH RESPECT TO RECORD LENGTH AND ADDRESS
*        6.    WRITE TO THE VSAM FILE
*        7.    CHECK THE RESULT OF THE WRITE (PUT) - REPORT OR ABORT AS
*              NECESSARY
*        8.    AT END OF QSAM, CLOSE FILES AND FREE BUFFER POOL
*
*        REGISTER USAGE
*        1                              . -> OUTPUT RECORD
*        2                              . -> INPUT RECORD
*        3                              . WORK
*        4                              . -> VSAM ACB
*                                       . -> VSAM RPL
*        5                              . -> QSAM DCB
*        6                              . -> OUTPUT RECORD
*        7                              . RECORD LENGTH
*        9                              . -> PARAMETER LIST AREA
*        10                             . RETURN
         SPACE 1
LOADVSAM EQU   *
         ST    R10,JSAVE                   . SAVE 10
         MVI   DCBMACR1,DCBMRGET+DCBMRLCG  . CHANGE MACRF TO GL
         MVI   DCBMACR2,OFF
         MVC   DCBEXIT+1(3),=AL3(OPENEXIT) . SPECIFY OPEN EXIT
         MVI   DCBEXIT,X'85'
         LA    R3,DCBEXIT               . 3 -> EXIT
         ST    R3,DCBEXLST              . STORE IN DCB
         MVC   DMAL(8),OPEN2L           . DMAL FOR TWO FILES
         OPEN  ((R4),,(R5)),            . OPEN VSAM AND QSAM           C
               MF=(E,DMAL)
         TM    DCBOFLGS,DCBOFOPN        . Q. QSAM OPEN OKAY?
         BNO   J0009                    . A. NO
         TM    ACBOFLGS,ACBOPEN         . Q. VSAM OPEN OKAY?
         BNO   J0010                    . A. NO
         DROP  R4                       . ACB DSECT NOT REQUIRED
         L     R4,@RPL                  . 4 -> RPL
J0001    EQU   *
         GET   (R5)                     . GET QSAM RECORD
*        AP    #RECREAD,=P'+1'          . INCREMENT RECORDS READ
         LR    R8,R1                    . 8 -> INPUT RECORD
         LH    R2,DCBLRECL              . 2 - LOGICAL RECORD LENGTH
         TM    DCBRECFM,DCBRECV         . Q. VARIABLE FORMAT?
         BNO   J0002                    . A. NO
         SH    R2,=H'+4'                . DECREMENT LENGTH BY 4
         LA    R8,4(,R1)                . 8 -> AFTER RDW
J0002    EQU   *
         MODCB RPL=(R4),                . MODIFY RPL                   C
               AREA=(R8),               .   RECORD ADDRESS             C
               RECLEN=(R2),             .   RECORD LENGTH              C
               MF=(G,(R9))
         PUT   RPL=(R4)                 . OUTPUT RECORD
         AP    #RECWRIT,=P'+1'          . INCREMENT RECORDS WRITTEN
         ST    R15,REG15                . SAVE 15
         B     BTAB003(R15)             . BRANCH DEPENDENT ON 15
BTAB003  B     J0003                    . RETURN CODE 0
         B     J0005                    . RETURN CODE 4
         B     J0006                    . RETURN CODE 8
         B     J0007                    . RETURN CODE 12
J0003    EQU   *                        . RETURN CODE ZERO PROCESS
         LA    R2,RPLFDBK               . 2 -> RPL FEED BACK AREA
         SHOWCB RPL=(R4),               . DETERMINE RPL FEED BACK      C
               AREA=(R2),                                              C
               FIELDS=FDBK,                                            C
               LENGTH=4,                                               C
               MF=(G,(R9))
         L     R15,RPLFDBK              . 15 - RPL FEED BACK
         B     BTAB004(R15)             . BRANCH DEPENDENT ON 15
BTAB004  B     J0001                    . FEED BACK 0  - NEXT RECORD
         B     J0004                    . FEED BACK 4  - REPORT
         B     J0004                    . FEED BACK 8  - REPORT
         B     J0004                    . FEED BACK 12 - REPORT
         B     J0004                    . FEED BACK 16 - REPORT
         B     J0001                    . FEED BACK 20 - NEXT RECORD
         B     J0004                    . FEED BACK 24 - REPORT
         B     J0001                    . FEED BACK 28 - NEXT RECORD
         B     J0001                    . FEED BACK 32 - NEXT RECORD
         B     J0001                    . FEED BACK 36 - NEXT RECORD
         B     J0001                    . FEED BACK 40 - NEXT RECORD
         B     J0001                    . FEED BACK 44 - NEXT RECORD
J0004    EQU   *
         SRA   R15,2                    . DIVIDE FEED BACK BY FOUR
         BCTR  R15,R0                   . DECREMENT RESULT BY ONE
         MH    R15,=H'+60'              . MUTLTIPLY BY SIXTY
         LA    R7,RC0MSG                . 7 -> MESSAGE TABLE
         AR    R7,R15                   . 7 -> SPECIFIC MESSAGE
         BAS   R10,REPORT               . OUTPUT REPORT
         B     J0001                    . NEXT RECORD
J0005    EQU   *                        . RETURN CODE FOUR PROCESSING
         LA    R7,RC4MSG                . 7 -> SPECIFIC MESSAGE
         BAS   R10,REPORT               . OUTPUT REPORT
         B     J0011                    . TERMINATE
J0006    EQU   *                        . RETURN CODE EIGHT PROCESSING
         LA    R7,RC8MSG                . 7 -> SPECIFIC MESSAGE
         BAS   R10,REPORT               . OUTPUT REPORT
         B     J0011                    . TERMINATE
J0007    EQU   *                        . RETURN CODE TWELVE PROCESSING
         LA    R7,RC12MSG               . 7 -> SPECIFIC MESSAGE
         BAS   R10,REPORT               . OUTPUT REPORT
         B     J0011                    . TERMINATE
J0008    EQU   *                        . QSAM EODAD ADDRESS
         DROP  R5                       . DCB DSECT NOT REQUIRED
         MVC   DMAL(8),OPEN2L           . DMA LIST FOR TWO FILES
         CLOSE ((R4),,(R5)),            . CLOSE VSAM AND QSAM          C
               MF=(E,DMAL)
         FREEPOOL (R5)                  . FREE QSAM BUFFER POOL
         L     R10,JSAVE                . RESTORE 10
         BR    R10                      . EXIT
J0009    EQU   *                        . QSAM DCB OPEN FAIL
         WTO   MF=(E,WTO11L)            . OUTPUT MESSAGE
         LA    R3,DYNLEN                . 3 - DYNAMIC AREA LENGTH
         LR    R2,R13                   . 2 -> DYNAMIC AREA
         L     R13,4(,R13)              . 13 -> CALLER'S SAVE AREA
         FREEMAIN RU,                   . RELEASE STORAGE              C
               A=(R2),                                                 C
               LV=(R3)
         L     R14,12(,R13)             . RESTORE 14
         LA    R15,10                   . 15 - RETURN CODE
         LM    R0,R12,20(R13)           . RESTORE 0 THRU 12
         BR    R14                      . RETURN
J0010    EQU   *                        . VSAM OPEN ERROR
         ST    R15,REG15                . SAVE 15
         WTO   MF=(E,WTO7L)             . OUTPUT MESSAGE
         LA    R3,VSAMERC               . 3 -> ACB ERROR FIELD
         SHOWCB ACB=(R4),               . DETERMINE ACB ERROR VALUE    C
               AREA=(R3),                                              C
               FIELDS=ERROR,                                           C
               LENGTH=4,                                               C
               MF=(G,(R9))
         LM    R2,R3,VSAMERR            . 2 AND 3 DATA FIELDS
         ABEND 103,                     . ABEND TASK                   C
               DUMP
J0011    EQU   *                        . VSAM PUT ERROR
         WTO   MF=(E,WTO15L)            . OUTPUT MESSAGE
         L     R2,@RPL                  . 2 -> RPL
         LA    R3,VSAMERC               . 3 -> RPL FEED BACK AREA
         SHOWCB RPL=(R2),               . DETERMINE RPL FEED BACK CODE C
               AREA=(R3),                                              C
               FIELDS=FDBK,                                            C
               LENGTH=4,                                               C
               MF=(G,(R9))
         LM    R2,R3,VSAMERR            . 2 AND 3 DATA FIELDS
         ABEND 103,                     . ABEND TASK                   C
               DUMP
         TITLE 'CODE CONTROLLING OUTPUT OF REPORT'
*        1.    CHECK IF HEADINGS REQUIRED
*        2.    IF HEADINGS REQUIRED,
*              OUTPUT HEADING LINE,
*              IF FIRST TIME, OUTPUT DATASET INFORMATION DETAIL
*        3.    OUTPUT REPORT DETAIL
*
*        REGISTER USAGE
*        2                              . -> OUTPUT RECORD
*        3                              . -> SYSOUT DCB
*        7                              . -> REPORT MESSAGE
*        10                             . RETURN
         SPACE 1
REPORT   EQU   *
         LA    R2,OUTLINE               . 2 -> OUTPUT RECORD AREA
         LA    R3,DCB2                  . 3 -> SYSOUT DCB
         CP    #LINE,=P'+58'            . Q. HEADING REQUIRED?
         BL    K0001                    . A. NO
         MVC   OUTLINE,HEAD1            . MOVE HEADING DETAIL
*                                       . OUTPUT PAGE NUMBER
         MVC   OUTLINE+PAGEOUT+4(L'MASK5),MASK5
         AP    #PAGE,=P'+1'
         ED    OUTLINE+PAGEOUT+4(L'MASK5),#PAGE
         PUT   (R3),                    . OUTPUT HEADING LINE          C
               (R2)
         ZAP   #LINE,=P'+1'             . RESET LINE COUNTER
         MVI   OUTLINE,C'0'             . INITIALIZE OUTPUT RECORD
         MVI   OUTLINE+1,C' '
         MVC   OUTLINE+2(L'OUTLINE-2),OUTLINE+1
         CLI   FIRST,ON                 . Q. FIRST TIME THROUGH?
         BNE   K0001                    . A. NO
         MVI   FIRST,OFF                . INDICATE NOT FIRST TIME
         MVC   OUTMSG,QSAMMSG           . FORMAT QSAM DETAIL
         MVC   OUTLRW(44),QSAMDSN       . MOVE DSNAME
         PUT   (R3),                    . OUTPUT QSAM DETAIL           C
               (R2)
         MVC   OUTMSG,VSAMMSG           . FORMAT VSAM DETAIL
         MVC   OUTLRW(44),VSAMDSN       . MOVE DSNAME
         PUT   (R3),                    . OUTPUT VSAM DETAIL           C
               (R2)
         MVI   OUTLINE,C'0'             . INITIALIZE OUTPUT RECORD
         MVI   OUTLINE+1,C' '
         MVC   OUTLINE+2(L'OUTLINE-2),OUTLINE+1
         AP    #LINE,=P'+4'             . INCREMENT LINE COUNTER
K0001    EQU   *
         MVC   OUTMSG,0(R7)             . MOVE MESSAGE
         MVC   OUTLRW,=C'LAST RECORD WRITTEN'
         MVC   RECOUT,MASK9             . MOVE RECORD NUMBER
         ED    RECOUT,#RECREAD
         PUT   (R3),                    . OUTPUT REPORT DETAIL         C
               (R2)
         AP    #LINE,=P'+1'             . INCREMENT LINE COUNTER
         MVI   OUTLINE,C' '             . INITIALIZE OUTPUT RECORD
         BR    R10                      . EXIT
         TITLE 'OPEN EXIT FOR QSAM'
*        1.    SAVE RECORD FORMAT
*        2.    IF NUMBER OF BUFFERS LESS THAN 10, CHANGE TO TEN
*        3.    IF VARIABLE
*              A.  ZAP LRECL TO VSAM MAXIMUM RECORD PLUS FOUR
*              B.  IF SPANNED AND LOGICAL RECORD INTERFACE NOT
*                  ENABLED, ENABLE LOGICAL RECORD INTERFACE
*              C.  IF BLOCKSIZE NOT SPECIFIED, ZAP TO LRECL PLUS FOUR
*        3.    IF FIXED
*              A.  ZAP LRECL TO VSAM MAXIMUM RECORD
*              B.  IF BLOCKSIZE NOT SPECIFIED, ZAP TO LRECL VALUE
*
*        REGISTER USAGE
*        3                              . WORK
*        5                              . -> QSAM DCB
*        14                             . RETURN
         SPACE 1
OPENEXIT EQU   *
         USING IHADCB,R5                . DCB DSECT ADDRESSABILITY
         MVI   BLKSIZE,OFF              . INITIALIZE BLOCKSIZE FLAG
         MVC   RECFM,DCBRECFM           . SAVE RECORD FORMAT
         CLI   QSAMBUFF,ON              . Q. QSAM BUFFERS TOO LOW?
         BNE   O0001                    . A. NO
         MVI   DCBBUFNO,X'32'           . DEFAULT TO BUFNO=50
O0001    EQU   *
         TM    DCBRECFM,DCBRECV         . Q. VARIABLE FORMAT?
         BNO   O0003                    . A. NO
         L     R3,LRECL                 . 3 - MAXIMUM RECORD LENGTH
         AH    R3,=H'+4'                . INCREMENT BY FOUR
         STH   R3,DCBLRECL              . SAVE IN RECORD LENGTH
         TM    DCBRECFM,DCBRECSB        . Q. SPANNED RECORDS?
         BNO   O0002                    . A. NO
         TM    DCBBFTEK,DCBBFTA         . Q. BFTEK=A SPECIFIED?
         BO    O0002                    . A. YES
         OI    DCBBFTEK,DCBBFTA         . ENABLE BFTEK=A
O0002    EQU   *
         CLC   DCBBLKSI,=H'+0'          . Q. BLOCKSIZE ZERO?
         BNER  R14                      . A. NO - EXIT
         AH    R3,=H'+4'                . INCREMENT LRECL BY FOUR
         STH   R3,DCBBLKSI              . SAVE AS BLOCKSIZE
         MVI   BLKSIZE,ON               . SET BLOCKSIZE FLAG ON
         BR    R14                      . EXIT
O0003    EQU   *
         CLI   DCBRECFM,DCBRECF         . Q. FIXED FORMAT?
         BNER  R14                      . A. NO - EXIT
         L     R3,LRECL                 . 3 - LOGICAL RECORD LENGTH
         STH   R3,DCBLRECL              . SAVE AS RECORD LENGTH
         CLC   DCBBLKSI,=H'+0'          . Q. BLOCKSIZE ZERO?
         BNER  R14                      . A. NO - EXIT
         STH   R3,DCBBLKSI              . SAVE LRECL AS BLOCKSIZE
         MVI   BLKSIZE,ON               . SET BLOCKSIZE FLAG ON
         BR    R14                      . EXIT
         TITLE 'DUMMY SECTIONS'
DYNAREA  DSECT                          . DYNAMIC AREA
         DS    18F                      . STANDARD OS SAVE AREA
@ACB     DS    F                        . -> ACB
@EXIT    DS    F                        . -> EXIT LIST
@IDCAMS  DS    F                        . -> IDCAMS ENTRY POINT
@KEY     DS    F                        . -> KEY AREA
@RECI    DS    F                        . -> INPUT RECORD
@RPL     DS    F                        . -> RPL
@TIOT    DS    F                        . -> TIOT
#KEY     DS    F                        . LENGTH OF KEY
#REC     DS    F                        . LENGTH OF MAXIMUM RECORD
DCBEXIT  DS    F                        . DCB EXIT
DMAL     DS    2F                       . DATA MANAGEMENT ADDRESS LIST
FSAVE    DS    F                        . REGISTER SAVE AREA
JSAVE    DS    F                        . REGISTER SAVE AREA
IDCAMSP  DS    0F                       . IDCAMS PARAMETER LIST
@OPTION  DS    F                        . -> OPTION
@DNAMEL  DS    F                        . -> DDNAME LIST
LRECL    DS    F                        . RECORD LENGTH
RECLEN   DS    F                        . RECORD LENGTH
RPLFDBK  DS    F                        . RPL FEED BACK
VSAMERR  DS    0F                       . VSAM ERROR FIELDS
REG15    DS    F                        . REGISTER 15 SAVE
VSAMERC  DS    F                        . ACB ERROR CODE / RPL FEED BK
#LINE    DS    PL2                      . NUMBER OF REPORT LINES
#PAGE    DS    PL3                      . NUMBER OF REPORT PAGES
#RECREAD DS    PL5                      . NUMBER OF RECORDS READ
#RECWRIT DS    PL5                      . NUMBER OF RECORDS WRITTEN
BLKSIZE  DS    CL1                      . BLOCKSIZE SPECIFICATION FLAG
         DS    0F
DCB1     DS    CL(LQSAMDCB)             . DYNAMIC DCB FOR QSAM
         DS    0F
DCB2     DS    CL(LSYSDCB)              . DYNAMIC DCB FOR SYSOUT
DDNAME   DS    CL1                      . DDNAME FLAG
ERROR    DS    CL1                      . ERROR FLAG
         DS    0F
EXTRACT  DS    CL(LEXTRACT)             . EXTRACT MACRO PARAMETER LIST
FIRST    DS    CL1                      . REPORT FIRST TIME FLAG
         DS    0F
         IEFJFCBN                       . JFCB MAPPING
OBJ      DS    CL1                      . VSAM OBJECT FLAG
         DS    0F
OUTLINE  DS    0CL121                   . REPORT RECORD
         DS    CL14
OUTMSG   DS    CL60
         DS    CL3
OUTLRW   DS    CL19
RECOUT   DS    CL10
         DS    CL15
         DS    0H
PARM     DS    CL1                      . JOB STEP PARAMETER FLAG
QSAMBUFF DS    CL1                      . QSAM BUFFER SPEC FLAG
QSAMDSN  DS    CL44                     . QSAM DSNAME
RECFM    DS    CL1                      . QSAM RECORD FORMAT FLAG
VSAMBUFF DS    CL1                      . VSAM BUFFER SPEC FLAG
VSAMDSN  DS    CL44                     . VSAM DSNAME
DYNLEN   EQU   *-DYNAREA                . LENGTH OF DYNAMIC AREA
         SPACE 2
         DCBD  DEVD=DA,                 . DSECT MAPPING DCB            C
               DSORG=PS
         SPACE 2
IEFTIOT1 DSECT                          . DSECT MAPPING TIOT
         IEFTIOT1
         SPACE 2
         IFGACB                         . DSECT MAPPING ACB
         TITLE 'LIST FORM MACROS AND FORM DCBS'
SYZREORG CSECT
         SPACE 1
EXTRACTL EXTRACT ,                      . EXTRACT TIOT ADDRESS         C
               'S',                                                    C
               FIELDS=TIOT,                                            C
               MF=L
LEXTRACT EQU   *-EXTRACTL               . EXTRACT LENGTH
         SPACE 1
OPEN1L   OPEN  (,),                     . OPEN / CLOSE ONE FILE        C
               MF=L
OPEN2L   OPEN  (,,,),                   . OPEN / CLOSE TWO FILES       C
               MF=L
         SPACE 1
RDJFCBL  RDJFCB (DUMDCB),               . READ JFCB                    C
               MF=L
         SPACE 1
*                                       . WRITE TO OPERATOR MESSAGES
         SPACE 1
WTO1L    WTO   'INVALID JOB STEP PARAMETER',                           C
               ROUTCDE=11,                                             C
               MF=L
WTO2L    WTO   'VSAM DDNAME MISSING',                                  C
               ROUTCDE=11,                                             C
               MF=L
WTO3L    WTO   'QSAM DDNAME MISSING',                                  C
               ROUTCDE=11,                                             C
               MF=L
WTO4L    WTO   'AMSIN DDNAME MISSING',                                 C
               ROUTCDE=11,                                             C
               MF=L
WTO5L    WTO   'READ JOB FILE CONTROL BLOCK FAILED',                   C
               ROUTCDE=11,                                             C
               MF=L
WTO6L    WTO   'VSAM CANNOT BE UNLOADED - NO RECORDS',                 C
               ROUTCDE=11,                                             C
               MF=L
WTO7L    WTO   'OPEN FAILURE FOR VSAM',                                C
               ROUTCDE=11,                                             C
               MF=L
WTO8L    WTO   'OPEN FAILURE FOR SYSPRINT',                            C
               ROUTCDE=11,                                             C
               MF=L
WTO9L    WTO   'SERIOUS ERROR ON VSAM OBJECT',                         C
               ROUTCDE=11,                                             C
               MF=L
WTO10L   WTO   'NO BLOCK SIZE SPECIFIED, INEFFICIENT SINGLE RECORD BLOCC
               KING USED',                                             C
               ROUTCDE=11,                                             C
               MF=L
WTO11L   WTO   'OPEN FAILURE FOR QSAM',                                C
               ROUTCDE=11,                                             C
               MF=L
WTO12L   WTO   'RECORD FORMAT U NOT PERMITTED FOR OUTPUT QSAM',        C
               ROUTCDE=11,                                             C
               MF=L
WTO13L   WTO   'GET FAILURE FOR VSAM',                                 C
               ROUTCDE=11,                                             C
               MF=L
WTO14L   WTO   'IDCAMS EXECUTED WITH A CONDITION CODE > 4',            C
               ROUTCDE=11,                                             C
               MF=L
WTO15L   WTO   'PUT FAILURE FOR VSAM',                                 C
               ROUTCDE=11,                                             C
               MF=L
WTO16L   WTO   'DATASET REORG BYPASSED, CI AND CA SPLITS BELOW MINIMUM C
               THRESHOLDS',                                            C
               ROUTCDE=11,                                             C
               MF=L
WTO17L   WTO   'VSAM DD POINTS TO LINEAR DATASET, PROCESSING ENDED',   C
               ROUTCDE=11,                                             C
               MF=L
         SPACE 2
DUMDCB   DCB   DDNAME=VSAM,             . DUMMY DCB FOR RDJFCB         C
               DSORG=PS,                                               C
               MACRF=GM
LDUMDCB  EQU   *-DUMDCB                 . DCB LENGTH
         SPACE 1
QSAMDCB  DCB   DDNAME=QSAM,             . "FORM" DCB FOR QSAM          C
               DSORG=PS,                                               C
               EODAD=J0008,                                            C
               MACRF=PL
LQSAMDCB EQU   *-QSAMDCB                . DCB LENGTH
         SPACE 1
SYSDCB   DCB   BLKSIZE=11374,           . "FORM" DCB FOR SYSOUT        C
               DDNAME=SYSOUT,                                          C
               DSORG=PS,                                               C
               LRECL=121,                                              C
               MACRF=PM,                                               C
               RECFM=ABF
LSYSDCB  EQU   *-SYSDCB                 . DCB LENGTH
         TITLE 'CONSTANTS, EDIT MASKS, REPORT LINES ...'
DNAMEL   DC    Y(LDNAMEL)               . IDCAMS DDNAME LIST
         DC    8X'00'
         DC    8X'00'
         DC    8X'00'
         DC    8X'00'
         DC    CL8'AMSIN'
         DC    CL8'SYSPRINT'
LDNAMEL  EQU   *-DNAMEL                 . LENGTH OF DDNAME LIST
         SPACE 1
NULL     DC    H'+0'                    . NULL PARAMETER
         SPACE 1
IDCAMS   DC    CL8'IDCAMS'              . IDCAMS PROGRAM NAME
         SPACE 1
MASK5    DC    XL6'402020202120'        . EDIT MASK
MASK9    DC    XL10'40202020202020202120'
         SPACE 1
HEAD1    DC    CL105'1                   VSAM UNLOAD AND / OR LOAD PROGC
               RAM                                                PAGE'
PAGEOUT  EQU   *-HEAD1
         DC    CL16' '
         SPACE 1
*                                       . REPORT MESSAGES
         SPACE 1
LOADMSG  DC    CL60'VSAM OBJECT SUCCESSFULLY LOADED'
QSAMMSG  DC    CL60'QSAM FILE PROCESSED'
RC0MSG   DC    CL60'SECONDARY ALLOCATION OR NEW VOLUME REQUIRED'
         DC    CL60'DUPLICATE KEY CREATED IN ALTERNATE INDEX'
         DC    CL60'WRITE BUFFER SUGGESTED'
         DC    CL60'SEQUENCE SET RECORD CAPACITY PROBLEM - KEYS NOT COMC
               PRESSING'
         DC    CL60'RESERVED'
         DC    CL60'NO BUFFER WRITES PERFORMED'
         DC    CL60'CONTROL INTERVAL SPLIT INDICATOR DETECTED'
         DC    CL60'MARK BUFFER INVALID'
RC4MSG   DC    CL60'RPL ACTIVE FOR ANOTHER REQUEST'
RC8MSG   DC    CL60'LOGIC ERROR OCCURRED DURING THE PUT OPERATION'
RC12MSG  DC    CL60'PHYSICAL ERROR OCCURRED DURING THE PUT OPERATION'
UNLDMSG  DC    CL60'VSAM OBJECT SUCCESSFULLY UNLOADED'
VSAMMSG  DC    CL60'VSAM OBJECT PROCESSED'
         SPACE 1
*                                       . EQUATES
         SPACE 1
AMSIN    EQU   X'01'
ESDS     EQU   C'E'
KSDS     EQU   C'K'
LDS      EQU   C'L'
LOAD     EQU   B'00000001'
OFF      EQU   X'00'
ON       EQU   X'01'
QSAM     EQU   X'04'
REORG    EQU   B'00000011'
RRDS     EQU   C'R'
UNLOAD   EQU   B'00000010'
VSAM     EQU   X'02'
         SPACE 1
*                                       . LITERAL POOL
         SPACE 1
         LTORG
         END
//L    EXEC  PGM=IEWL,PARM='MAP,LET,LIST,NCAL,RENT',COND=(8,LT,C)
//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(3,2)),DSN=&SYSUT1
//SYSPRINT DD  SYSOUT=*,DCB=(RECFM=FB,BLKSIZE=3509)
//SYSLMOD DD  DSN=IPO1.LINKLIB(SYZREORG),DISP=SHR
//REFRESH   EXEC PGM=LINKLLA     *** REFRESH LLA FOR IPO1.LINKLIB ONLY
//SYSLMOD   DD   DISP=SHR,DSN=IPO1.LINKLIB
//SYSPRINT  DD   SYSOUT=*
//*
//* DIRECTIONS FOR USE
//* DIRECTIONS FOR USE
//* DIRECTIONS FOR USE
//*
//* UNLOAD, INVOKE IDCAMS, AND RELOAD A KSDS
//*
//* THIS PROGRAM WILL UNLOAD, INVOKE IDCAMS, AND RELOAD A
//* KSDS, OR PERFORM VARIOUS PERMUTATIONS OF THE THREE PROCESSES.
//* THE PROGRAM PERFORMS BUFFER MODIFICATION. THE PROGRAM ALSO
//* REPORTS ANY PROBLEMS OCCURRING DURING THE LOAD PROCESS.
//*
//* THIS PROGRAM WILL DO ONE OR MORE OF THE FOLLOWING PROCESSES:
//*
//*
//* O      UNLOAD A VSAM OBJECT
//*
//* O      INVOKE IDCAMS
//*
//* O      LOAD A VSAM OBJECT.
//*
//* THE PROCESSES MAY BE COMBINED AS FOLLOWS IN A SINGLE EXECUTION:
//*
//* O      ALL THREE - IDCAMS WILL DELETE AND DEFINE THE OBJECT (ON
//*       THE SAME DASD VOLUME).
//*
//* O      THE VSAM OBJECT MAY BE UNLOADED AND IDCAMS. INVOKED
//*
//* O      IDCAMS MAY BE INVOKED, AND THE VSAM OBJECT LOADED.
//*
//* THE PROGRAM IS CONTROLLED BY A COMBINATION OF DDNAMES
//* AND A JOB STEP PARAMETER. THE FOLLOWING DDNAMES ARE USED:
//*
//* QSAM      -      THIS MUST BE PRESENT, AND MUST HAVE DCB
//*             INFORMATION.  THE DATASET MAY BE TEMPORARY.
//*
//* VSAM      -      THIS MUST BE PRESENT, AND MUST REFER TO A
//*             VSAM OBJECT.
//*
//* SYSOUT      -      THIS MUST BE PRESENT - OUTPUT PROCESS REPORT.
//*
//* SYSPRINT      -      THIS MUST BE PRESENT IF IDCAMS IS TO BE
//*             INVOKED. IT OBEYS IDCAMS REQUIREMENTS FOR
//*             DCB, IF CODED.
//*
//* AMSIN      -      THIS MUST BE PRESENT IF IDCAMS IS TO BE
//*             INVOKED. IT IS A FILE OF CARD IMAGES CONTAINING
//*             IDCAMS CONTROL STATEMENTS. NO AMSIN
//*             DDNAME, NO IDCAMS INVOCATION.
//*             LRECL=80
//*
//* THE FOLLOWING VALUES ARE PERMITTED FOR THE JOB STEP PARAMETER:
//*
//* UNLOAD      -      THE VSAM OBJECT IS TO BE UNLOADED TO THE
//*             QSAM FLAT FILE
//*
//* LOAD      -      THE QSAM FLAT FILE IS TO BE LOADED TO THE
//*             VSAM OBJECT DEFAULT VALUE IF NO PARAMETER IS SPECIFIED
//*
//* REORG      -      THE VSAM OBJECT IS UNLOADED TO THE QSAM
//*             FLAT FILE. IDCAMS IS INVOKED, AND THE VSAM
//*             OBJECT IS RELOADED. THE AMSIN DDNAME MUST
//*             BE PRESENT.
//* ***NOTE****
//*           -  THE REORG PARAMETER WILL ALSO CAUSE THE CHECKING OF
//*              CI AND CA SPLITS, THE DEFAULT IS CURRENTLY SET TO 10
//*              CI SPLITS AND 5 CA SPLITS, IF THE SPLITS ARE LESS THAN
//*              THESE VALUES, THE REORG IS BYPASSED AND A COND CODE 2
//*              IS SET.  TO CHANGE VALUES SEARCH FOR '<== MODIFY'
//*
//* JCL TO EXECUTE THE PROGRAM
//*
//* UNLOAD
//*
//* //       EXEC PGM=SYZREORG,PARM=UNLOAD
//* //QSAM     DD DSN=UNLOAD.DATA,UNIT=3380,
//* //         VOL=SER=MYDASD,SPACE=(CYL,(20,1),RLSE),
//* //         DCB=(LRECL=  ,BLKSIZE=   ,RECFM=BFS)
//* //SYSOUT   DD SYSOUT=*
//* //VSAM     DD DSN=MY.CLUSTER,DISP=SHR,AMP='BUFND=40'
//*
//* UNLOAD AND IDCAMS
//*
//* //       EXEC PGM=SYZREORG,PARM=UNLOAD
//* //AMSIN    DD *,DCB=BLKSIZE=80
//*  DEL MY.CLUSTER PRG
//*  DEF CL(                   -
//*    NAME(MY.CLUSTER)        -
//*    ...
//* //QSAM     DD DSN=UNLOAD.DATA,UNIT=3380,
//* //         VOL=SER=MYDASD,SPACE=(CYL,(20,1),RLSE),
//* //         DCB=(LRECL=  ,BLKSIZE=   ,RECFM=BFS)
//* //SYSOUT   DD SYSOUT=*
//* //SYSPRINT DD SYSOUT=*
//* //VSAM     DD DSN=MY.CLUSTER,DISP=SHR,AMP='BUFND=40'
//*
//* LOAD
//*
//* //       EXEC PGM=SYZREORG
//* //QSAM     DD DSN=UNLOADED.DATA,DISP=OLD
//* //SYSOUT   DD SYSOUT=*
//* //VSAM     DD DSN=MY.CLUSTER,DISP=OLD,AMP='BUFND=40'
//*
//* LOAD AND IDCAMS
//*
//* //       EXEC PGM=SYZREORG,PARM=LOAD
//* //AMSIN    DD *,DCB=BLKSIZE=80
//*  DEL MY.CLUSTER PRG
//*  DEF CL(                   -
//*    NAME(MY.CLUSTER)        -
//*    ...
//* //QSAM     DD DSN=UNLOADED.DATA,DISP=OLD
//* //SYSOUT   DD SYSOUT=*
//* //SYSPRINT DD SYSOUT=*
//* //VSAM     DD DSN=MY.CLUSTER,DISP=OLD,AMP='BUFND=40'
//*
//* REORGANIZATION (UNLOAD THEN RELOAD)
//*
//* //       EXEC PGM=SYZREORG,PARM=REORG
//* //AMSIN    DD *,DCB=BLKSIZE=80
//*  DEL MY.CLUSTER PRG
//*  DEF CL(                   -
//*    NAME(MY.CLUSTER)        -
//*    ...
//* //QSAM     DD UNIT=3380,VOL=SER=MYDASD,DISP=(,PASS),
//* //         DCB=(LRECL=  ,BLKSIZE=    ,RECFM=BSV)
//* //SYSOUT   DD SYSOUT=*
//* //SYSPRINT DD SYSOUT=*
//* //VSAM     DD DSN=MY.CLUSTER,DISP=OLD,AMP='BUFND=40'
//*
//* IN THE LAST TWO EXAMPLES, THE CLUSTER MUST BE DEFINED ON THE
//* SAME VOLUME AS IT WAS PRIOR TO THE STEP BEING EXECUTED.
//*
//* THE RECORD FORMAT OF THE QSAM FILE MUST BEAR A RESEMBLANCE
//* TO THE DATA TO BE PROCESSED WITH REGARD TO RECORD FORMAT.
//* RECORD FORMAT U IS NOT PERMITTED.
//*
//* THE LOGICAL RECORD INTERFACE (LRI) IS USED TO PROCESS THE
//* QSAM FILE. AS A RESULT, THE MAXIMUM LENGTH RECORD IS 32K.
//*
//* BECAUSE THE LRI IS USED, IF A VARIABLE SPANNED (RECORD FORMAT
//* VS) IS SPECIFIED FOR THE QSAM FILE, A DCB SUB-PARAMETER OF
//* 'BFTEK=A' IS ENABLED AT OPEN EXIT, IF NOT SPECIFIED IN THE JCL.
//*
//* THE BUFND IS CHECKED WITH SHOWCB AND IN THE JCL TO BE AT LEAST
//* 40, IF NOT, THEN IT IS DYNAMICALLY CHANGED TO 40 FOR THE VSAM DD
//*
//* THE QSAM DD IS CHECKED TO HAVE A BUFNO OF AT LEAST 50, IF FOUND
//* TO BE LESS THAN THAT, IT'S UPPED TO 50 X'32' DYNAMICALLY.
//*
