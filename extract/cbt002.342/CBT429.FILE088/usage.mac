//C7BUSEG JOB (M096,4622,2,40),CUR.ACCT.INFO,MSGCLASS=X
//ASM EXEC ASMFCL,ACCT=(NOTIFY,C7BRIAN),MAC1='SYS1.ACTNG.PDS',
//         PARM.ASM='LIST,LOAD,NODECK,XREF,RENT',
//         PARM.LKED='LIST,LET,NCAL,MAP,RENT'
//ASM.SYSIN DD *
         TITLE '*** USAGE1 - SESSION TO NOW STATISTICS ***'
USAGE1   CSECT
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         STM   R14,R12,12(R13)
         LR    R12,R15
         USING USAGE1,R12
         LR    R2,R1          SAVE USER PARM ADDRESS
         L     R0,=A(LEN133+WRKALEN)     GET LENGTH OF GETMAIN
         GETMAIN R,LV=(0)     GET CORE FOR T133 RECORD
         LR    R4,R1          START ADDRESS FOR CLEAR
         L     R5,=A(LEN133+WRKALEN)  AND LENGTH
         LA    R6,*           DUMMY
         SR    R7,R7          PAD CHAR = X'00'
         MVCL  R4,R6          CLEAR WORKING STORAGE
         ST    R13,4(R1)
         ST    R1,8(R13)      CHAIN S/A
         LR    R13,R1
         USING WRKAREA,R13
         MVC   UDARES(2),UDARESP
         MVC   UDANORES(2),UDANOREP
         MVC   UTAPE(2),UTAPEP
         MVC   UCOMM(2),UCOMMP
         MVC   UGR(2),UGRP
         MVC   UUR(2),UURP
         ST    R12,EPADDR     SAVE MOD E P A
         ST    R2,PARMADDR    SAVE USER PARM ADDRESS
         L     R1,CVTPTR
         USING CVT,R1
         L     R3,CVTTCBP     TCB/ASCB DOUBLE WORDS
         L     R6,CVTUSER     ACCTABLE ADDR FROM CVTUSER
         ST    R6,CVTUADDR    SAVE ACCTABLE ADDRESS
         DROP  R1
         L     R6,12(,R3)     CURRENT ASCB ADDRESS
         ST    R6,ASCBADDR    SAVE ASCB ADDRESS
         L     R3,4(R3)       ADDR CURRENT TCB
         ST    R3,TCBADDR     SAVE TCB ADDRESS
         L     R4,196(R1)     ADDRESS OF SMCA
         MVC   T133ID(4),16(R4)    CPUID FROM SMCA
         L     R5,180(R3)     R5-ADDR JSCB
         L     R5,264(R5)     R5-ADDR PSCB
         USING PSCB,R5
         LTR   R5,R5          IS THIS A  T S O  TASK?
         BNZ   TSOTASK        YES - DON'T SET BATCH EXEC FLAG
         OI    FLAGS,X'40'    SET BATCH EXECUTION FLAG
TSOTASK  ICM   R11,15,164(R3) GET TCT ADDRESS FROM TCB
         USING SMFTCT,R11
*
*  GET CONSTANT INFO FOR TYPE 133 RECORD
*
         MVI   T133TYPE,133   SET RECORD TYPE 133 (DEC.)
         MVI   T133FLG,X'02'  SET SYSTEM INDICATOR = VS2'S
         L     R8,12(R3)      R8-->TIOT
         MVC   T133PROC(8),8(R8)     PROCNAME TO T133REC
         LH    R1,TCTRSZ      GET PRIVATE AREA SIZE
         AR    R1,R1          DOUBLE TO GET 1K BLOCKS
         STCM  R1,3,T133CORA  SET PRIVATE AREA SIZE
         ICM   R4,15,TCTLWM   GET LOW WATER MARK
         ICM   R1,15,TCTRBA   GET ADDRESS OF PRIVATE AREA
         SR    R4,R1          R4 - R1 = MAX STORAGE USED IN BYTES
         SRA   R4,10          R4 / 1024 = # 1KS
         STCM  R4,3,T133CORU
         L     R4,TCTJMR      R4 --> JMR
         MVC   T133UID(8),0(R4)      JOBNAME
         MVC   T133ACCT(8),20(R4)    ACCT NO.
         MVC   T133ODAT(4),12(R4)    JMR LOGON DATE
         MVC   T133OTIM(4),8(R4)     JMR LOGON TIME (ITS IN .01 SEC)
         MVC   T133STPN,28(R4)       JMR STEP NUMBER
         L     R3,CVTUADDR    ACCTABLE ADDR FROM CVTUSER
         LTR   R3,R3          IS THERE AN ADDR ??
         BZ    NOEXCPTB       NO - BYPASS
         USING ACCTABLE,R3    ADDRESSABILITY
         CLC   UJIHDR,=CL8'UJITABLE'  VERIFY ACCTABLE
         BNE   NOEXCPTB       NOT THERE - BYPASS
         A     R3,UJITBLEN    POINT TO EXCP TABLE
         DROP  R3
         CLC   0(8,R3),=CL8'EXCPTABL'  VERIFY EXCPTABL
         BNE   NOEXCPTB       NOT THERE - BYPASS
         L     R4,ASCBADDR    ADDR OF CURRENT ASCB
         USING ASCB,R4
         LH    R5,ASCBASID    GET ASID NUMBER
         DROP  R4
         M     R4,=F'16'      GET DISPLACEMENT INTO EXCP TABLE
         LA    R3,8(R5,R3)    POINT TO PROPER ASID ENTRY
         USING EXCPTABL,R3    ADDRESSABILITY
         CLC   T133OTIM,RDRTIME    COMPARE RDR START TIME
         BNE   NOEXCPTB       NO MATCH - BYPASS
         MVC   T133DYNX,EXCPCNT    COPY DYNAMIC ALLOC EXCP-S
         DROP  R3
NOEXCPTB TM    FLAGS,X'40'    IS BATCH EXECUTION FLAG ON?
         BNZ   GETIO          BYPASS TSO PROCESS
         MVC   T133LOUT(4),TCTLOUT  TERMINAL LINES OUT
         MVC   T133LIN(4),TCTLIN    TERMINAL LINES IN
         SPACE 2
GETIO    BAL   R3,IOCOUNTS    GO TOTAL UP EXCPS BY DEVICE TYPE
         LA    R1,IOACCUM     I/O COUNTS
         LA    R4,T133EXCP    POINT TO VAR LEN EXCP SECT
         LA    R3,6           LOOP CTL
GLENG    ICM   R0,15,4(R1)    IS THIS EMPTY ENTRY?
         BZ    NOEXCPS        YES - CONTINUE
         MVC   0(8,R4),0(R1)  MOVE ENTRY TO T133 REC
         LA    R4,8(R4)       POINT TO NEXT ENTRY
NOEXCPS  LA    R1,8(R1)       NO - POINT TO NEXT ENTRY
         BCT   R3,GLENG       GOBACK OR THERE ARE 6 EXCP FIELDS
GSUB     LA    R3,T133VAR     POINT TO VAR FLD OF 133 REC
         SR    R4,R3          GET LENGTH OF EXCP FLDS
         STCM  R4,3,T133VAR   PUT LENGTH IN 133 REC
         LA    R2,T133        GET ADDR OF START OF REC
         SR    R3,R2          GET LENGTH OF FIXED PORTION
         AR    R3,R4          ADD LENGTH OF VARIABLE SECTION
         STCM  R3,3,T133LEN   SET LEN IN RDW
         SPACE 3
         TIME  BIN            GET TIME AND DATE OF RECORD
         STCM  R1,15,T133DATE DATE
         STCM  R0,15,T133TIME TIME
         BAL   R3,CPUTIME     GET JOB CPU TIME
         MVC   T133CPU,CPUANS     MOVE CPU TIME
         CLC   T133ODAT,T133DATE   SAME DATE
         BNE   OWELL          THATS TIRED
         ICM   R1,15,T133TIME
         ICM   R2,15,T133OTIM
         SR    R1,R2          OUT-IN = CONNECT TIME
         B     BSGETPC        GO SAVE CONNECT TIME
OWELL    ICM   R2,15,T133OTIM HUND SEC IN
         ICM   R1,15,T133TIME HSEC OUT
         SR    R2,R1          HSEC IN - HSEC OUT = INVERSE ELAPTIM
         L     R1,=F'8640000' R1 = # OF HUND SEC IN 1 DAY
         SR    R1,R2          INVERSE ELAP - BASE = CONNECT TIME
BSGETPC  STCM  R1,15,T133CTME STORE IN T133 AREA
         SPACE 2
         BAL   R3,REPORT      PUT REPORT TO REQUESTER
         SPACE 3
         L     R0,=A(LEN133+WRKALEN)     GET LENGTH OF GETMAIN
         LR    R1,R13         ADDRESS OF GOTTEN MEMORY
         L     R2,RCODE       GET RETURN CODE FROM USER PGM
         L     R13,4(R13)     RESTORE SAVEAREA POINTER
         FREEMAIN R,LV=(0),A=(1)                GIVE BACK MEMORY
         LR    R15,R2         RE-ESTABLISH RETURN CODE
*
*        RETURN TO CALLER
*
         RETURN  (14,12),RC=(15)
         SPACE 3
* --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- *
*
*        GET I/O COUNTS BY DEVICE TYPE
*
* --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- *
IOCOUNTS SR    R1,R1          GET SET TO STORE ZEROES
         LA    R4,IOACCUM     POINT TO I/O ACCUM TABLE
         L     R6,TCTIOTBL    GET I/O TABLE ADDRESS IN TCT
         USING TCTTIOT,R6
         LA    R7,TCTIOTSD    MOVE TO FIRST LOOKUP ENTRY
TCTDDCNT LH    R15,0(R7)      GET OFFSET TO DD ENTRY
         LTR   R15,R15        END OF TABLE
         BZ    TCTVAR         EXIT IF END OF TABLE
         SR    R14,R14        CLEAR WORK
         LA    R15,0(R6,R15)  POINT TO A DD ENTRY
         USING TCTDDENT,R15
         ICM   R14,1,TCTSCTR  GET NUMBER OF DEVICES
         BNP   TCTNONB        NONE OR SYSIN, SKIP
TCTDD    LH    R8,TCTUCBP     GET UCB ADDR
         LTR   R8,R8          IS IT ZERO
         BZ    TCTDDINC       IF ZERO, SKIP
         ICM   R1,15,TCTDCTR  LOAD AND TEST EXCP FOUND
         BZ    TCTDDINC       IF ZERO, DO NOT RECORD
         CLI   18(R8),X'20'   DIRECT ACCESS DEVICE?
         BNE   NOTDA          NO, CONTINUE
         TM    3(R8),X'04'    PERMANENTLY RESIDENT?
         BZ    NORES          NO, CONTINUE
         LA    R4,UDARES      YES, POINT TO PERMRESDA
         B     SNAPIO         GET IO COUNTS
NORES    LA    R4,UDANORES    POINT TO NON-RES DA
         B     SNAPIO         GET IO COUNTS
NOTDA    LA    R10,4          NO. DEVICE TYPES REMAINING
         LA    R4,UTAPE       INIT POINTER
FINDTYPE CLC   0(1,R4),18(R8) DEVICE TYPE MATCH?
         BE    SNAPIO         YES, GET IO COUNTS
         LA    R4,8(R4)       POINT TO NEXT DEVTYPE IN TABLE
         BCT   R10,FINDTYPE   CONTINUE SEARCH
         B     TCTDDINC       NO MATCH - DO NOT RECORD
SNAPIO   A     R1,4(,R4)      ADD ACCUM VALUE TO THIS IOCOUNT
         ST    R1,4(,R4)      SAVE # I/O COUNTS FOR THIS DEVICE
TCTDDINC LA    R15,TCTDCTR+4-TCTDDENT(R15) MOVE TO NEXT
         BCT   R14,TCTDD      LOOP THROUGH UCB ENTRIES
TCTNONB  LA    R7,TCTDCBLE-TCTIODSP(R7) MOVE TO NEXT LOOKUP
         B     TCTDDCNT       LOOP
TCTVAR   BR    R3             RETURN
*
* * * *  CPUTIME
*
*      OBTAIN CPUTIME FROM ACTIVE ASCB CHAIN
*   (WHILE HERE, GET TSO LINE ADDRESS FROM TSB)
*
         SPACE 1
CPUTIME  STM   R2,R6,CTSAV    R3 = RET ADDR
         SPACE 1
*  INITIATION
         L     R6,ASCBADDR    CURRENT ASCB ADDRESS
         USING ASCB,R6
         SPACE 1
*  ASCB PROOF
         CLC   ASCBASCB,=C'ASCB'   IS THIS AN ASCB?
         BNE   CTX
         SPACE 1
*  GET TSO LINE NUMBER
         TM    FLAGS,X'40'         IS THIS BATCH ??
         BO    LINEND              YES-SKIP TSO LINE NUM
         SR    R1,R1
         SVC   237
         MODESET KEY=ZERO,MODE=SUP
         L     R5,60(R6)           R5-->TSB / R6 WAS ASCB
         TM    25(R5),X'01'        THIS A VTAM TSB?
         BO    VTAMTSB             YES - GO GET TERM NAME
         MVC   T133TLNE(2),82(R5)  GET  TSBLINE (TCAM'S)
         B     LINEND              BACK IN LINE CODE
VTAMTSB  TM    108(R5),X'F0'       NUMERIC 5TH BYTE
         BNO   LINEND              NO - IGNORE
         TM    107(R5),X'F0'       NUMERIC 4TH BYTE
         BNO   LINEND              NO - IGNORE
         TM    106(R5),X'F0'       NUMERIC 3RD BYTE
         BNO   LINEND              NO - IGNORE
         PACK  DWRK(3),106(4,R5)   PACK NUMERIC PART
         MVC   T133TLNE(2),DWRK    MOVE TO T133 RECORD
         OI    T133TLNE,X'08'      FORCE AT LEAST 800 SERIES NUMBERS
LINEND   MODESET KEY=NZERO,MODE=PROB
         LA    R1,4
         SVC   237
*  CALCULATE CPU HUND-SEC
         LM    R2,R3,ASCBEJST      CPU TIME DBL WORD
         SRDL  R2,22
         SR    R2,R2
         D     R2,=F'10'
         ST    R3,CPUANS           CPU = HUND-SEC
         SPACE 1
*  CPUTIME ROUTINE EXIT
CTXIT    LM    R2,R6,CTSAV
         BR    R3
*  ERROR RETURN
CTX      XC    CPUANS,CPUANS
         B     CTXIT
         SPACE 1
         DROP  R6
         SPACE 3
*
* * * *  REPORT
*
*  PRESENT TO REQUESTOR THE TO NOW SESSION STATISTICS
*
         SPACE 1
REPORT   STM   R2,R6,BSSAV
         SPACE 1
         TM    FLAGS,X'40'    IS IT BATCH
         BNO   BSTSO          NO, DO TSO STUFF
         SPACE 1
*  BATCH  - - -
         B     BSXIT
         SPACE 1
*  TSO    - - -
BSTSO    LA    R1,BLOCKSS         FORMAT BOX (START)
         LA    R0,L'BLOCKSS
         BAL   R3,PUTREPT         GENERAL TPUT ROUTINE
         LA    R1,BLOCKSP         BLOCK SPACE LINE
         LA    R0,L'BLOCKSP
         BAL   R3,PUTREPT         GENERAL TPUT ROUTINE
         LA    R1,BLOCKHD1        HEADER ONE
         LA    R0,L'BLOCKHD1
         BAL   R3,PUTREPT         GENERAL TPUT ROUTINE
         MVC   BLOCKWRK,BLOCKSP   INIT WORK AREA
         MVC   BLOCKUID,T133UID   USER ID
         MVC   BLOCKAC1,T133ACCT  MAJOR ACCOUNT NUMBER
         MVI   BLOCKACS,C','
         MVC   BLOCKAC2,T133ACCT+4 SUB ACCOUNT NUMBER
         MVI   DWRK+7,X'0F'
         MVO   DWRK+6(2),T133TLNE  TSO LINE NUMBER
         UNPK  BLOCKLNE,DWRK+6(2)      TO REPORT LINE
         UNPK  BLOCKDAT,T133ODAT+1(3)  LOGON DATE TO REPORT LINE
         MVC   BLOCKYR,BLOCKDAT   PULL BACK YEAR
         MVI   BLOCKD0,C'.'
         MVI   BLOCK@1,C'@'
         LA    R1,T133OTIM        LOGON TIME IN 100THS SEC
         BAL   R3,HS2HMSH         CONVERT TO H:M:S.H
         MVC   BLOCKLTM,0(R1)     MOVE TO OUTPUT AREA
         MVC   BLOCKID,T133ID     CPU ID
         LA    R1,BLOCKWRK        CONSTRUCTED REPORT LINE
         LA    R0,L'BLOCKWRK
         BAL   R3,PUTREPT         TPUT TO REQUESTOR
         LA    R1,BLOCKSP         BLOCK SPACE LINE
         LA    R0,L'BLOCKSP
         BAL   R3,PUTREPT
         LA    R1,BLOCKHD2        HEADER TWO
         LA    R0,L'BLOCKHD2
         BAL   R3,PUTREPT         GENERAL TPUT ROUTINE
         MVC   BLOCKWRK,BLOCKSP   INIT WORK AREA
         LA    R1,T133CTME        CONNECT TIME IN 100THS SEC
         BAL   R3,HS2HMSH         CONVERT TO H:M:S.H
         MVC   BLOCKCTM,0(R1)     MOVE TO OUTPUT AREA
         LA    R1,T133CPU         CPU TIME IN 100THS SEC
         BAL   R3,HS2HMSH         CONVERT TO H:M:S.H
         MVC   BLOCKCPT,0(R1)     MOVE TO OUTPUT AREA
         ICM   R1,15,T133LOUT     TERM LINES OUT
         ICM   R0,15,T133LIN      TERM LINES IN
         AR    R1,R0
         ICM   R0,15,T133DYNX     DYNAMIC ALLOC EXCP-S
         AR    R1,R0
         LA    R2,T133EXCP        START OF DA,UR,TA,ETC EXCPS
         LA    R4,2
BSTSO50  CLM   R4,3,T133VAR       ALL IN VARIABLE PART SUMMED
         BNL   BSTSO54            YES - GO PUT TO REPORT
         ICM   R3,15,4(R2)        ARE THERE ANY EXCPS HERE
         BZ    BSTSO52            NO - SKIP ADD
         AR    R1,R3              YES - SUM 'EM UP
BSTSO52  LA    R2,8(,R2)          ADVANCE TO NEXT EXCP SLOT
         LA    R4,8(,R4)          AND UP COUNT
         B     BSTSO50
BSTSO54  LR    R6,R1              HOLD EXCP SUM FOR $ CALC
         BAL   R3,B2E             CONVERT TO Z,ZZZ,ZZN
         MVC   BLOCKEX,WRK10PAT   MOVE TO OUTPUT AREA
         SR    R1,R1
         ICM   R1,3,T133CORU      MEMORY USED IN 1K BLOCKS
         BAL   R3,B2E             CONVERT TO Z,ZZZ,ZZN 1KS
         MVC   BLOCKMEM,WRK10PAT+4   GET ZZ,ZZN PART
         MVI   BLOCKCK,C'K'       ADD THE K
         LA    R1,BLOCKWRK
         LA    R0,L'BLOCKWRK
         BAL   R3,PUTREPT         GENERAL TPUT ROUTINE
         LA    R1,BLOCKSP         BLOCK SPACE LINE
         LA    R0,L'BLOCKSP
         BAL   R3,PUTREPT         GENERAL TPUT ROUTINE
         LA    R1,BLOCKHD3        HEADER THREE
         LA    R0,L'BLOCKHD3
         BAL   R3,PUTREPT         GENERAL TPUT ROUTINE
         MVC   BLOCKWRK,BLOCKSP   INIT WORK AREA
         SR    R0,R0              SUM REGISTOR
         ICM   R5,15,T133CTME     CONNECT TIME
         M     R4,=F'8'           * $8/HR
         D     R4,=A(60*60)       / # SEC/HR
         AR    R0,R5              = HUND OF $ CON CHARGE
         LR    R1,R5
         BAL   R3,B2$             CONVERT TO ZZ,ZZN.NN $S
         MVC   BLOCKCO$,WRK$0PAT
         ICM   R5,15,T133CPU      CPU TIME
         CLC   =C'M0970359',T133ACCT          FPBC BENCH MARK?
         BNE   NOTFPDC1                       NO - NORMAL RATE
         M     R4,=A(225*30)                  YES - USE 10 CENT RATE
         B     ISFPDC1
NOTFPDC1 M     R4,=A(225*36)
ISFPDC1  D     R4,=A(10000)
         AR    R0,R5              = HUND OF $ CPU CHARGE
         LR    R1,R5
         BAL   R3,B2$             CONVERT TO ZZ,ZZN.NN $S
         MVC   BLOCKCP$,WRK$0PAT
         LR    R5,R6              GET HELD EXCP SUM
         M     R4,=A(225*135)
         D     R4,=A(100000)
         AR    R0,R5              = HUND OF $ EXCP CHARGE
         LR    R1,R5
         BAL   R3,B2$             CONVERT TO ZZ,ZZN.NN $S
         MVC   BLOCKEX$,WRK$0PAT
         ICM   R5,3,T133CORU      MEMORY USED
         CLC   =C'M0970359',T133ACCT          FPBC BENCH MARK?
         BNE   NOTFPDC2                       NO - NORMAL RATE
         M     R4,=A(225*19)                  YES - USE 10 CENT RATE
         B     ISFPDC2
NOTFPDC2 M     R4,=A(225*57)
ISFPDC2  ICM   R4,15,T133CPU      CPU USED
         MR    R4,R4
         D     R4,=A(2000000)
         AR    R0,R5              = HUND OF $ MEMORY CHARGE
         LR    R1,R5
         BAL   R3,B2$             CONVERT TO ZZ,ZZN.NN $S
         MVC   BLOCKME$,WRK$0PAT
         LR    R1,R0              GET HUND OF $ TOTAL CHARGE
         BAL   R3,B2$             CONVERT TO ZZ,ZZN.NN $S
         MVC   BLOCKTO$,WRK$0PAT
         LA    R1,BLOCKWRK
         LA    R0,L'BLOCKWRK
         BAL   R3,PUTREPT         GENERAL TPUT ROUTINE
         LA    R1,BLOCKSP         BLOCK SPACE LINE
         LA    R0,L'BLOCKSP
         BAL   R3,PUTREPT         GENERAL TPUT ROUTINE
         LA    R1,BLOCKSS         FORMAT BOX (STOP)
         LA    R0,L'BLOCKSS
         BAL   R3,PUTREPT         GENERAL TPUT ROUTINE
         SPACE 1
         B     BSXIT
         SPACE 1
PUTREPT  TPUT  (1),(0)            WRITE IMAGE TO TERMINAL
         BR    R3                 EXIT TO CALLER
         SPACE 1
B2$      CVD   R1,DWRK
         OI    DWRK+7,X'0F'
         MVC   WRK$0PAT,=X'4020206B2021204B2020'
         ED    WRK$0PAT,DWRK+4
         BR    R3
         SPACE 1
B2E      CVD   R1,DWRK            TO PACKED DEC
         OI    DWRK+7,X'0F'       FORCE + SIGN
         MVC   WRK10PAT,=X'40206B2020206B202120'
         ED    WRK10PAT,DWRK+4
         BR    R3
         SPACE 1
HS2HMSH  ICM   R5,15,0(R1)        INPUT TIME IN 100THS SEC
         SR    R4,R4              SETUP FOR DIVIDE
         MVC   WRK11PAT,=C'HH:MM:SS.TH'  SETUP OUTPUT PATTERN
         D     R4,=F'100'         GET 100TH OF SECS
         CVD   R4,DWRK            PACKED DEC
         OI    DWRK+7,X'0F'       FOXIE SIGN
         UNPK  WRK11TH,DWRK+6(2)  HUND OF SEC
         SR    R4,R4              SETUP FOR DIVIDE
         D     R4,=F'60'          GET SECS
         CVD   R4,DWRK            PACKED DEC
         OI    DWRK+7,X'0F'       FOXIE SIGN
         UNPK  WRK11SS,DWRK+6(2)  SEC
         SR    R4,R4              SETUP FOR DIVIDE
         D     R4,=F'60'          GET MIN
         CVD   R4,DWRK            PACKED DEC
         OI    DWRK+7,X'0F'       FOXIE SIGN
         UNPK  WRK11MM,DWRK+6(2)  MIN
         CVD   R5,DWRK            PACKED DEC
         OI    DWRK+7,X'0F'       FOXIE SIGN
         UNPK  WRK11HH,DWRK+6(2)  HR
         LA    R1,WRK11PAT        LOCATE OUTPUT FOR CALLER
         BR    R3                 AND RETURN TO CALLER
*  RETURN
BSXIT    LM    R2,R6,BSSAV
         BR    R3
         SPACE 3
*   ALL THE PATTERNS ARE BELOW
UDARESP  DC    X'20',X'40'
UDANOREP DC    X'20',X'40'
UTAPEP   DC    X'80',X'00'
UCOMMP   DC    X'40',X'00'
UGRP     DC    X'10',X'00'
UURP     DC    X'08',X'00'
BLOCKSS  DS    0CL72          START AND STOP OF BOX
         DC    72C'*'
BLOCKSP  DS    0CL72          SPACE OF BOX
         DC    C'*'
         DC    CL70' '
         DC    C'*'
BLOCKHD1 DS    0CL72
*                01234
         DC    C'*    '
*                567890123
         DC    C'USER-ID  '
*                4567890123456
         DC    C'ACCOUNT #    '
*                78901
         DC    C'TERM '
*                234567890123456789012345
         DC    C' LOGON DATE AND TIME    '
*                67890
         DC    C'NODE '
*                12345678901
         DC    C'          *'
BLOCKHD2 DS    0CL72
*                01234
         DC    C'*    '
*                5678901234567
         DC    C'CONNECT TIME '
*                8901234567890
         DC    C' CPU TIME    '
*                1234567890123
         DC    C'TOTAL EXCPS  '
*                45678901
         DC    C'MEM USED'
*                23456789012345678901
         DC    C'                   *'
BLOCKHD3 DS    0CL72
*                01234
         DC    C'*    '
*                5678901234567
         DC    C'CONNECT $ +  '
*                890123456789
         DC    C'    CPU $ + '
*                01234567890
         DC    C'   EXCP $ +'
*                12345678901
         DC    C' MEMORY $ ='
*                2345678901
         DC    C'  TOTAL $ '
*                2345678901
         DC    C'         *'
         SPACE 1
         LTORG
         SPACE 3
*
*     DSECTS
*
WRKAREA  DSECT
SAVEAREA DS    18F            GENERAL SAVE AREA
DWRK     DS    D              WORK DOUBLE WORD
BSSAV    DS    5F             SUBROUTINE SAVE AREA
CTSAV    DS    5F             SUBROUTINE AREA
CPUANS   DS    F              STEP CPU TIME IN HUNDREDS OF SECONDS
PARMADDR DS    F              HOLD AREA FOR USER PGM PARM ADDRESS
RCODE    DS    F              SAVEAREA FOR REG 15 FROM USER PGM
EPADDR   DS    F              SAVE MODULE ENTRY POINT ADDR
ASCBADDR DS    F              ASCB ADDRESS SAVEAREA
CVTUADDR DS    F              ACCTABLE ADDRESS SAVEAREA
TCBADDR  DS    F              TCB ADDRESS SAVEAREA
IOACCUM  DS    0F
UDARES   DC    X'20',X'40',6X'00'
UDANORES DC    X'20',X'40',6X'00'
UTAPE    DC    X'80',X'00',6X'00'
UCOMM    DC    X'40',X'00',6X'00'
UGR      DC    X'10',X'00',6X'00'
UUR      DC    X'08',X'00',6X'00'
FLAGS    DS    X
WRK$0PAT DS    CL10            WORK AREA TO BUILD ZZ,ZZN.NN
WRK10PAT DS    CL10            WORK AREA TO BUILD Z,ZZZ,ZZN
WRK11PAT DS    CL11            WORK AREA TO BUILD HH:MM:SS:TH
WRK11HH  EQU   WRK11PAT+00,2
WRK11MM  EQU   WRK11PAT+03,2
WRK11SS  EQU   WRK11PAT+06,2
WRK11TH  EQU   WRK11PAT+09,2
BLOCKWRK DS    CL72            OUTPUT WORK AREA FOR STAT BLOCK
* * * *  * *   * * * * * * *
BLOCKUID EQU   BLOCKWRK+05,8
BLOCKAC1 EQU   BLOCKWRK+14,4
BLOCKACS EQU   BLOCKWRK+18,1
BLOCKAC2 EQU   BLOCKWRK+19,4
BLOCKLNE EQU   BLOCKWRK+27,3
BLOCKYR  EQU   BLOCKWRK+32,2
BLOCKD0  EQU   BLOCKWRK+34,1
BLOCKDAT EQU   BLOCKWRK+33,5
BLOCK@1  EQU   BLOCKWRK+40,1
BLOCKLTM EQU   BLOCKWRK+43,11
BLOCKID  EQU   BLOCKWRK+56,4
* * * *  * *   * * * * * * *
BLOCKCTM EQU   BLOCKWRK+05,11
BLOCKCPT EQU   BLOCKWRK+18,11
BLOCKEX  EQU   BLOCKWRK+31,10
BLOCKMEM EQU   BLOCKWRK+44,6
BLOCKCK  EQU   BLOCKWRK+50,1
* * * *  * *   * * * * * * *
BLOCKCO$ EQU   BLOCKWRK+05,10
BLOCKCP$ EQU   BLOCKWRK+18,10
BLOCKEX$ EQU   BLOCKWRK+30,10
BLOCKME$ EQU   BLOCKWRK+41,10
BLOCKTO$ EQU   BLOCKWRK+52,10
         DS    0D
WRKALEN  EQU   *-WRKAREA
         SPACE 3
*
*            TYPE 133 WORK AREA
*
T133     EQU   *
T133LEN  DC    XL2'00'        RECORD LENGTH
         DC    XL2'00'        SEGMENT DESCRIPTOR
T133FLG  DC    XL1'00'        SYSTEM INDICATOR (X'02' = VS2)
T133TYPE DC    XL1'00'        RECORD TYPE 133 (DECIMAL)
T133TIME DC    XL4'00'        TIME RCD WRITTEN (IN .01 SEC)
T133DATE DC    PL4'0'         DATE RCD WRITTEN (00YYDDDF)
T133ID   DC    CL4' '         CPU IDENTIFICATION
T133UID  DC    CL8' '         TSO=USERID / BATCH=JOBNAME
T133OTIM DC    XL4'00'        TSO LOGON TIME / BATCH READER TIME
T133ODAT DC    PL4'0'         TSO LOGON DATE / BATCH READER DATE
T133ACCT DC    CL8' '         ACCOUNT NUMBER
T133STPN DC    XL1'00'        STEP SEQUENCE NUMBER
T133LOUT DC    XL4'00'        TSO = TERMINAL LINES OUT
*                             BATCH = 0
T133LIN  DC    XL4'00'        TSO = TERMINAL LINES IN
*                             BATCH = 0
T133PROC DC    CL8' '         PROCEDURE NAME
T133CORA DC    XL2'00'        CORE ALLOCATED  (IN 1K BLOCKS)
T133CORU DC    XL2'00'        CORE USED       (IN 1K BLOCKS)
T133CPU  DC    XL4'00'        CPU TIME        (IN .01 SEC)
T133CTME DC    XL4'00'        CONNECT TIME    (IN .01 SEC)
T133DYNX DC    XL4'00'        DYNAMIC ALLOC SUMMED EXCP COUNTS
T133TLNE DC    XL2'00'        HOLD TSO LINE NUMBER (PACKED, NO SIGN)
T133VAR  DC    XL2'00'        LEN OF EXCP FIELDS + THESE 2 BYTES
T133EXCP DC    6XL8'00'       XL2,XL2,XL4 AS IN SMF TYPE 4/34 REC
         DS    0D
LEN133   EQU   *-T133
         SPACE 3
ACCTABLE DSECT
UJITBLEN DC    F'0'           LENGTH OF ACCT TABLE
UJIHDR   DC    CL8'UJITABLE'  TABLE IDENTIFICATION
START1   DC    F'0'
START2   DC    F'0'
START3   DC    F'0'
START4   DC    F'0'
START5   DC    F'0'
START6   DC    F'0'
START7   DC    F'0'
STARTP   DC    F'0'
STARTEND DC    X'FF'          END OF ADDRESS TABLE
*
RVOLS    DC    50XL10'00'     RESIDENT VOLSER LIST
RVOLSEND DC    X'FF'          END OF RESIDENT VOLSER LIST
*
MMAP     DC    125X'00'       'M' ACCOUNTS BITMAP
CMAP     DC    125X'00'       'C' ACCOUNTS BITMAP
EMAP     DC    125X'00'       'E' ACCOUNTS BITMAP
FMAP     DC    125X'00'       'F' ACCOUNTS BITMAP
IMAP     DC    125X'00'       'I' ACCOUNTS BITMAP
HMAP     DC    125X'00'       'H' ACCOUNTS BITMAP
RMAP     DC    125X'00'       'R' ACCOUNTS BITMAP
TOTABLEN DC    F'0'           TOTAL LEN OF CSA TABLE
TBFIX    EQU   *-ACCTABLE     LENGTH OF FIXED PORTION
NUMBERS  EQU   *
         SPACE 3
EXCPTABL DSECT
RDRTIME  DS    F              READER START TIME
EXCPCNT  DS    F              EXCP COUNT FROM TYPE 40 RECORDS
         SPACE 3
         CVT   LIST=YES,TSO=YES,DSECT=YES
         SPACE 3
         IHAASCB DSECT=YES
         SPACE 3
         IEFTCT
         SPACE 3
         IKJPSCB
         SPACE 3
         END   USAGE1
//LKED.SYSLMOD DD DSN=C7BRIAN.VTOC.LOAD,DISP=SHR
//LKED.SYSIN   DD *
 NAME USAGE(R)
