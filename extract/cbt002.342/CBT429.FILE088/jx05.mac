         TITLE 'HASP COMMAND PROCESSOR -- PROLOG (LOCAL MACROS)'   @133
         MACRO -- $COMGRUP -- DEFINE GROUP OF COMMAND SUB-PROCESSORS
&NAME    $COMGRUP &A0,&A1,&A2,&A3,&A4,&A5,&A6,&A7,&A8,&A9,&AA,&AB,&AC, C
               &AD,&AE,&AF,&B0,&B1,&B2,&B3,&B4,&B5,&B6,&B7,&B8,&B9,    C
               &DELAY=NO
         LCLC  &I
         GBLC  &COMGRUP
&NAME    DS    0H
         USING *,R8                ADDRESSABILITY
&COMGRUP SETC  '&NAME'
         AIF   ('&DELAY' EQ 'NO').A
         AGO   .C
.A       BR    R1                  GO TO SUB-PROCESSOR SELECTED
         AGO   .XIT
.C       ANOP
&I       SETC  '&SYSNDX'
COF&I    DS    0H                  'BR R1' TO ENTER SUB-PROCESSOR
.XIT     MEND
         EJECT
         MACRO -- $COMTAB -- DEFINE COMMAND TABLE ENTRY            SPR2
&NAME    $COMTAB &VERB,&GROUP,&REDIR=0,&REJECT=0,&LABEL=           SPR2
         LCLC  &V                                                  SPR2
&V       SETC  '&VERB'                                             SPR2
         AIF   ('&V'(1,1) EQ '''' AND '&LABEL' EQ '').BADLAB       SPR2
         AIF   ('&V' EQ '' OR '&GROUP' EQ '').BADPOS               SPR2
         SPACE 1                                                   SPR2
&NAME    DC    0F'0',AL1(&REDIR*16+&REJECT),AL4(&GROUP)            SPR2
         AIF   ('&V'(1,1) EQ '''').REMOVE                          SPR2
         AIF   ('&LABEL' NE '').USELAB                             SPR2
         DC    AL2(C&V-&GROUP)                                     SPR2
         AGO   .GETVLEN                                            SPR2
.REMOVE  ANOP                                                      SPR2
&V       SETC  '&V'(2,K'&V-2)                                      SPR2
.USELAB  DC    AL2(&LABEL-&GROUP)                                  SPR2
.GETVLEN ANOP                                                      SPR2
A&SYSNDX DS    AL1                                                 SPR2
         DC    C'&V'                                               SPR2
B&SYSNDX EQU   *                                                   SPR2
         ORG   A&SYSNDX                                            SPR2
         DC    AL1(B&SYSNDX-A&SYSNDX-2)                            SPR2
         DC    CL7'&V',AL1(0)                                      SPR2
         SPACE 1                                                   SPR2
         MEXIT                                                     SPR2
.BADLAB  MNOTE 8,'LABEL=  KEYWORD SPECIFICATION MISSING'           SPR2
         MEXIT                                                     SPR2
.BADPOS  MNOTE 8,'MISSING VERB OR GROUP SPECIFICATION'             SPR2
         MEND                                                      SPR2
         EJECT                                                     SPR2
         MACRO -- $CRET -- RETURN TO MAIN COMMAND PROCESSOR
&NAME    $CRET &MSG=,&L=,&INFO=,&MSGID=,&JOB=NO                    SPR2
         LCLA  &CNT
         LCLC  &F                                                  SPR2
         AIF   ('&INFO' EQ '' OR '&INFO' EQ 'NO').Z                @133
         EJECT
***********************************************************************
*                                                                     *
*        $CRET -- RETURN TO MAIN COMMAND PROCESSOR                    *
*                                                                     *
*        ROUTINE MAY ISSUE $WTO AND $WAIT AS DIRECTED BY CALLER       *
*                                                                     *
* REGISTERS USED                                                      *
*        R0    = LENGTH OF MESSAGE IF RESPONSE REQUESTED, NOT MSG=OK  *
*        R1    = MESSAGE ADDRESS -- COMMAND                           *
*        R15   = RETURN CODE -- NO MESSAGE, OK, OR GENERAL MESSAGE    *
*                                                                     *
***********************************************************************
.Z       ANOP
&NAME    DS    0H                                                  SPR2
         AIF   ('&MSG' EQ '' AND '&L' EQ '').H
         AIF   ('&MSGID' EQ '').ST                                 SPR2
         AIF   ('&JOB' NE 'NO').YES                                SPR2
&F       SETC  'F'                                                 SPR2
         AGO   .MS                                                 SPR2
.YES     ANOP                                                      SPR2
&F       SETC  'E'                                                 SPR2
.MS      ANOP                                                      SPR2
        $MID   &MSGID                                              SPR2
         MVC   COMMID,=X'&MSGID&F'                                 SPR2
.ST      AIF   ('&L' EQ '').F                                      SPR2
         AIF   ('&L'(1,1) EQ '(').A
         LA    R0,&L
         AGO   .C
.A       AIF   ('&L' EQ '(R0)').B
         LR    R0,&L(1)
.B       AIF   ('&MSG' EQ '').E
         MNOTE 4,'REGISTER FORM OF LENGTH INVALID'
         MEXIT
.C       AIF   ('&MSG' EQ '').E
         AIF   ('&MSG'(1,1) EQ '(').D
         MVC   COMMAND(&L),&MSG                                    SPR2
         AGO   .E
.LITERAL ANOP
&CNT     SETA  K'&MSG-2
         MVC   COMMAND(&CNT),=C&MSG
         LA    R0,&CNT             SET LENGTH OF MSG IN R0
         AGO   .E
.D       MVC   COMMAND(&L),0&MSG
.E       B     X005RC16            RETURN AND ISSUE MESSAGE     JOR0385
         MEXIT                                                  JOR0385
.F       AIF   ('&MSG' EQ 'OK').G
         AIF   ('&MSG'(1,1) EQ '''').LITERAL
         MNOTE 4,'LENGTH REQUIRED'
         MEXIT
.G      $MID   000                                                 SPR2
         B     X005RC12            RETURN AND ISSUE OK MESSAGE  JOR0385
         MEXIT                                                  JOR0385
.H       B     X005RC00            NORMAL RETURN                JOR0385
         MEND
         EJECT
         MACRO
         $COMTBL &DOC=DOC
COMTBL   DSECT
COMTFL   DS    0X                  FLAGS
COMTGRUP DS    A                   ADDR OF COMMAND PROCESSOR
COMTOFF  DS    Y                   LOCATION OF ENTRY OFFSET
COMTVB   DS    CL1                 VERB
COMTVOP  DS    CL1                 FIRST OPERAND
COMTEL   EQU   *-COMTBL            LENGTH OF EACH ENTRY
&SYSECT  CSECT
         MEND
         EJECT
         COPY  $HASPGBL            COPY HASP GLOBALS
JESEX005 $MODULE NOTICE=SP220,                                     J215*
               SYSP=(NOGEN,GEN,NODATA,NOGEN,NOGEN),             JOR0385*
               TITLE='JESEX005 - EXIT 5',                       JOR0385*
               ENVIRON=JES2,                                    JOR0485*
               DCB,               GENERATE MVS DCB DSECT          XCOMM+
               DEB,               GENERATE MVS DEB DSECT          XCOMM+
               RESPA,             GENERATE JES FSI JSPA DSECT     XCOMM+
               SDWA,              GENERATE MVS SDWA DSECT         XCOMM+
               UCB,               GENERATE MVS UCB DSECT          XCOMM+
               $HCT,$PADDR,       GENERATE HASP HCT DSECT         XCOMM+
               $BUFFER,           GENERATE HASP BUFFER DSECT      XCOMM+
               RPL,               REQ'D BY $BUFFER                 J215+
               $JCT,              GENERATE HASP JCT DSECT         XCOMM+
               $ERA,              GENERATE HASP ERA DSECT         XCOMM+
               $SMF,              GENERATE HASP SMF DSECT         XCOMM+
               $DCT,              GENERATE HASP DCT DSECT         XCOMM+
               $JQE,              GENERATE HASP JQE DSECT         XCOMM+
               $JOE,              GENERATE HASP JOE DSECT         XCOMM+
               $PCE,              GENERATE HASP PCE DSECT         XCOMM+
               $COMWORK,          GENERATE HASP COMWORK DSECT     XCOMM+
               $CKPWORK,          GENERATE HASP CKPWORK DSECT     XCOMM+
               $CAT,              GENERATE HASP CAT DSECT         XCOMM+
               $MIT,              GENERATE HASP MIT DSECT         XCOMM+
               $QSE,              GENERATE HASP QSE DSECT         XCOMM+
               $KIT,              GENERATE HASP KIT DSECT         XCOMM+
               $PRE,              GENERATE HASP PRE DSECT         XCOMM+
               $HASPEQU,          GENERATE HASP EQUATES           XCOMM+
               $DAS,              GENERATE HASP DAS DSECT         XCOMM+
               $CWA,              GENERATE HASP CWA DSECT          J215+
               $BPM,              GENERATE HASP BPM DSECT         XCOMM+
               $SVT,$HFAME,       GENERATE HASP SVT DSECT         XCOMM+
               $SCAT,             GENERATE HASP SCAT DSECT        XCOMM+
               $JOT,              GENERATE HASP JOT DSECT         XCOMM+
               $IOT,              GENERATE HASP IOT DSECT         XCOMM+
               $LCK,              GENERATE HASP LCK DSECT         XCOMM+
               $TAB,              GENERATE HASP TAB DSECT         XCOMM+
               $MODMAP,           GENERATE HASP MODMAP DSECT      XCOMM+
               $XECB,             GENERATE HASP XECB DSECT        XCOMM+
               $TQE,              GENERATE HASP TQE DSECT         XCOMM+
               $PDDB,             GENERATE HASP PDDB DSECT        XCOMM+
               $RAT,              GENERATE HASP RAT DSECT       JOR0485+
               $RDT,              GENERATE HASP RAT DSECT       JOR8611+
               $SCANTAB,$SCANWA,  GENERATE HASP RAT DSECT       JOR8611+
               $CMB               GENERATE HASP CMB DSECT         XCOMM
         $COMTBL DOC=NO
         TITLE 'EXIT POINT 5 -- JES2 COMMAND PREPROCESSOR'
***********************************************************************
*                                                                     *
*        JES2 COMMAND PREPROCESSOR                                    *
*                                                                     *
*        REG     ENTRY VALUE              EXIT VALUE                  *
*        ---     -----------              ----------                  *
*                                                                     *
*        R0-R4   N/A                      UNCHANGED                   *
*        R5      ADDR OF CURRENT OPERAND  UNCHANGED                   *
*        R6      4                        UNCHANGED                   *
*        R7      ADDR OF THE LAST OPERAND UNCHANGED                   *
*        R8-R10  N/A                      UNCHANGED                   *
*        R11     ADDR OF HCT              UNCHANGED                   *
*        R12     N/A                      UNCHANGED                   *
*        R13     ADDR OF PCE              UNCHANGED                   *
*        R14     RETURN ADDRESS           UNCHANGED                   *
*        R15     ENTRY POINT ADDRESS      0 AND 4 STANDARD PROCESSING *
*                                         8 - NO STD PROS + $CRET     *
*                                         12- NO STD PROS + $CRET "OK"*
*                                         16- NO STD PROS + $CRET MSG *
*                                                                     *
*        CC      N/A                      N/A                         *
*                                                                     *
***********************************************************************
         SPACE 2
JESEP005 $ENTRY BASE=R9
         EJECT
         $SAVE TRACE=YES
         LR    R9,R15              SET LOCAL BASE
         SPACE 1                                                  XX005
***************************************************************** XX005
*                                                               * XX005
*        INITIALIZE R?? FOR HASPCOMM BASED SERVICE ROUTINES     * XX005
*                                                               * XX005
***************************************************************** XX005
         SPACE 1                                                  XX005
***      L     R??,$COMMXSV       POINT AT COMM SERVICE VECTOR    XX005
***      L     R??,32(,R??)       R?? NO BASE REG FOR COMM SERV   XX005
         SPACE 1                                                  XX005
***************************************************************** XX005
*                                                               * XX005
*        ESTABLISH ESTAE ENVIRONMENT                            * XX005
*                                                               * XX005
***************************************************************** XX005
         SPACE 1                                                  XX005
         L     R14,=A(XCOMRCVR)    R14 => MBX005 RECOVERY EP      XX005
        $ESTAE RECADDR=(R14)       CREATE ESTAE ENVIRONMENT       XX005
         SPACE 1                                                  XX005
***************************************************************** XX005
*                                                               * XX005
*        MOVE PORTION OF THE COMMAND CURRENTLY BEING PROCESSED  * XX005
*        INTO THE PRE (PRETRACK) FOR THE PROCESSOR RECOVERY     * XX005
*        ROUTINE (XCOMRCVR)                                     * XX005
*                                                               * XX005
***************************************************************** XX005
         SPACE 1                                                  XX005
         L     R14,PCEPRE          GET ADDRESS OF PRE             XX005
         USING PRE,R14        ADDRESSABILITY                       J215
         SPACE 1                                                  XX005
         MVC   PRETRACK(CCMDLN),COMMAND     MOVE COMMAND INTO PRE XX005
         MVI   PRELOGLN,CCMDLN     SET LENGTH OF DATA IN PRETRACK XX005+
                                     TO BE RECORDED IN LOGREC     XX005
         SPACE 1                                                  XX005
         DROP  R14                 KILL ADDRESSABILITY            XX005
         EJECT                                                    XX005
***************************************************************** MB026
*                                                               * MB026
*        LOOK UP CMD IN TABLE                                   * MB026
*                                                               * MB026
***************************************************************** MB026
         SPACE 1                                                  MB026
         LA    R4,MBCMDLST         POINT TO FAST LOOKUP TABLE     XX005
         LA    R2,FTBLENTS         SET NBR OF FAST TBLE ENTRIES   XX005
         SPACE 1                                                  XX005
MOMHIT   CLC   0(1,R4),COMVERB     CHECK FOR HIT IN TABLE         XX005
         BH    X005RC00            IF TABLE HIGHER -- NOT OUR CMD XX005
         BE    MOMGETP             IF EQUAL -- GO GET PROCESSOR   XX005
         LA    R4,FTBLENTL(,R4)    POINT TO NEXT TABLE ENTRY      XX005
         BCT   R2,MOMHIT           DECREMENT COUNT & LOOP AGAIN   XX005
         B     X005RC00            IF NOT FOUND -- NOT OUR CMD    XX005
         SPACE 1                                                  XX005
MOMGETP  ICM   R4,B'1111',1(R4)    GET MAIN TABLE ADDRESS          J215
         LA    R2,CTBLENTS         SET NBR OF TABLES ENTRIES      XX005
         SPACE 1                                                  XX005
MOMSRL   CLC   MOMTVB(1,R4),COMVERB  CHECK TO SEE IF VERB IN RANGEXX005
         BH    X005RC00            IF NOT IN RANGE, NOT OUR CMD   XX005
         IC    R14,MOMTVBLN(,R4)   GET VERB LENGTH                XX005
         EX    R14,MOMVCLC         LOOK AT WHOLE VERB             XX005
         BE    MOMFND              BRANCH IF VERB FOUND           XX005
         SPACE 1                                                  XX005
MOMSRC   LA    R4,CTBLENTL(,R4)    POINT TO NEXT ENTRY            XX005
         BCT   R2,MOMSRL           DECREMENT COUNT & LOOP AGAIN   XX005
         B     X005RC00            NOT OURS OR BAD SYNTAX         XX005
         EJECT                                                    XX005
***************************************************************** XX005
*                                                               * XX005
*        COME HERE IF COMMAND ISSUED FROM UNAUTHORIZED CONSOLE  * XX005
*                                                               * XX005
***************************************************************** XX005
         SPACE 1                                                  XX005
MOMBAD   TM    COMFLAG,CMBFLAGU    IS THIS UCM                    XX005
         BZ    MOMBADA             DISPLAY ERROR IF NOT           XX005
         BAL   R3,MOMVCCA          VERIFY CCA (NO RETURN IF BAD)  XX005
         CLI   COMUCMA,0           MLWTO                          XX005
         BZ    MOMBADA             DISPLAY ERROR IF YES           XX005
         MVI   COMLINET,X'80'      SET CONTROL LINE               XX005
        $CWTO  L=L'COMMAND,MSGID=949      WRITE TO OPERATOR       XX005
         MVI   COMLINET,X'20'      SET DATA LINE                  XX005
MOMBADA  MVC   COMMAND(L'MBVINVMB),MBVINVMB MOVE IN INVALID MSG   XX005
         LA    R0,L'MBVINVMB            SETUP LENGTH REG0         XX005
         $STORE R0                      STORE FOR JES2            XX005
         B     X005RC16                 GO TO EXIT ROUTINE        XX005
         EJECT                                                    XX005
***************************************************************** XX005
*                                                               * XX005
*        J2XCOMM COMMON RETURN ROUTINES *                       * XX005
*                                                               * XX005
***************************************************************** XX005
         SPACE 1                                                  XX005
*        +0  --  CONTINUE WITH NORMAL COMMAND PROCESSING          XX005
X005RC00 DS    0H                                                 XX005
         XR    R15,R15             SET RC=0                     JOR0585
         B     ESTAECAN            BRANCH TO COMMON RETURN        XX005
         SPACE 2                                                  XX005
*        +4  --  CONTINUE WITH NORMAL COMMAND PROCESSING          XX005
X005RC04 DS    0H                                                 XX005
         LA    R15,4               SET RC=4                     JOR0585
         B     ESTAECAN            BRANCH TO COMMON RETURN        XX005
         SPACE 2                                                  XX005
*        +8  --  PERFORM $CRET NORMAL RETURN -- (DELETES COMMAND) XX005
X005RC08 DS    0H                                                 XX005
         LA    R15,8               SET RC=8                     JOR0585
         B     ESTAECAN            BRANCH TO COMMON RETURN        XX005
         SPACE 2                                                  XX005
*        +12 --  ISSUE $CRET OK MESSAGE                           XX005
X005RC12 DS    0H                                                 XX005
         LA    R15,12              SET RC=12                    JOR0585
         B     ESTAECAN            BRANCH TO COMMON RETURN        XX005
         SPACE 2                                                  XX005
*        +16 --  ISSUE $CRET MESSAGE  --  TEXT IN 'COMMAND' AREA  XX005
*                                         MESSAGE LENGTH IN R0    XX005
X005RC16 DS    0H                                                 XX005
        $STORE R0                  PRESERVE MSG LENGTH          JOR0585
         LA    R15,16              SET RC=16                    JOR0585
         B     ESTAECAN            BRANCH TO COMMON RETURN        XX005
         SPACE 2                                                  XX005
ESTAECAN DS    0H                  CANCEL J2XCOMM ESTAE ENVIRON   XX005
         ICM   R3,B'1111',PCEPRE   GET ADDRESS OF PRE             XX005
         BZ    X005RTN             IF NONE, SKIP ESTAE CANCEL     XX005
         ST    R15,PCEUSER0       SAVE RETURN CODE              JOR0585
        $ESTAE CANCEL              CANCEL ESTAE ENVIRONMENT       XX005
         L     R15,PCEUSER0       RESTORE RETURN CODE           JOR0585
X005RTN  DS    0H                                                 XX005
        $RETURN RC=(R15),TRACE=YES RETURN TO MAINLINE HASPCOMM    XX005
         EJECT                                                    XX005
***************************************************************** XX005
*                                                               * XX005
*        COMMAND FOUND IN TABLE -- CHECK CONSOLE AUTHORITY      * XX005
*                                                               * XX005
***************************************************************** XX005
         SPACE 1                                                  XX005
MOMFND   IC    R1,MOMTFL(,R4)      PICK UP RESTRICTION BITS       XX005
         N     R1,=A(X'F')         PURIFY                         XX005
         EX    R1,MOMTMI           TEST FOR AUTHORIZED CONSOLE    XX005
         BNZ   MOMBAD              BR IF UNAUTHORIZED CONSOLE     XX005
         SPACE 1                                                  XX005
***************************************************************** XX005
*                                                               * XX005
*        CHECK FOR AUTOMATIC REDIRECTION OF RESPONSES           * XX005
*                                                               * XX005
***************************************************************** XX005
         SPACE 1                                                  XX005
         TM    COMFLAG,CMBFLAGU    IS THIS UCM...                 XX005
         BZ    MOMGOOD             IF NOT SKIP REDIRECTION        XX005
         SPACE 1                                                  XX005
         TM    MBLFLG,MBLFLGC+MBLFLGR CONSOLE SET OR REMOTE SYSTEMXX005
         BNZ   MOMRPT              SKIP AUTOMATIC L=CCA           XX005
         SPACE 1                                                  XX005
         SR    R1,R1               ZERO WORK                      XX005
         IC    R1,MOMTFL(0,R4)     PICK UP REDIRECT OFFSET        XX005
         SRA   R1,4                ALIGN TO LOW HEX DIGIT         XX005
         BZ    MOMRPT              IF ZERO NO REDIRECTION         XX005
         SPACE 1                                                  XX005
         BCTR  R1,0                REDUCE BY 1                    XX005
         AR    R1,R1               DOUBLE                         XX005
         SR    R2,R2               ZERO WORK                      XX005
         IC    R2,COMUCM           PICK UP CURRENT UCM            XX005
         AIF   ('&FMID' EQ 'HJE2330 ').SP134A,                     J134*
               ('&FMID' EQ 'HJE2215 ').SP134A,                     J215*
               ('&FMID' EQ 'HJE2221 ').SP134A                      J220
         CH    R2,COMCONNO         CHECK FOR TOO HIGH             XX005
         BH    MOMRPT              FORGET AUTOMATIC IF TOO HIGH   XX005
         SPACE 1                                                  XX005
         L     R14,COMEXTEN        POINT TO EXTENDED AREA         XX005
         USING CWA,R14         AND ESTABLISH ADDRESSABILITY        J215
         SPACE 1                                                  XX005
         AGO   .CONTA                                             XX005
.SP134A  ANOP                                                     XX005
         SPACE 1                                                  XX005
         L     R14,$COMEXTN        POINT TO EXTENDED AREA    @134 XX005
         USING CWA,R14        ADDRESSABILITY                       J215
         SPACE 1                                                  XX005
         CH    R2,CWAOCON          CHECK FOR TOO HIGH              J215
         BH    MOMRPT              FORGET AUTOMATIC IF TOO HIGH   XX005
.CONTA   ANOP                                                     XX005
         MH    R2,CWALCON          MULTIPLY BY LENGTH DIMENSION    J215
         AR    R1,R2               COMBINE OFFSETS                XX005
         LA    R1,CWARESP-CWACONL(R1) POINT TO ELEMENT             J215
         MVC   COMUCM,CWACON(R1)   INSERT NEW CONSOLE ID           J215
         TM    MBLFLG,MBLFLGA      HAS AREA BEEN SET              XX005
         BO    MOMRPT              SKIP AUTOMATIC IF YES          XX005
         MVC   COMUCMA,CWACONA(R1) SET NEW AREA                    J215
         SPACE 1                                                  XX005
         DROP  R14                                                XX005
         SPACE 1                                                  XX005
MOMRPT   BAL   R3,MOMVCCA          VERIFY CCA (NO RETURN IF BAD)  XX005
         CLI   COMUCMA,0           TEST FOR MLWTO                 XX005
         BZ    MOMGOOD              IF NOT, SKIP                  XX005
         MVI   COMLINET,X'80'      SET CONTROL LINE               XX005
         SPACE 1                                                  XX005
        $CWTO  L=L'COMMAND,MSGID=936      WRITE TO OPERATOR       XX005
         SPACE 1                                                  XX005
         MVI   COMLINET,X'20'      SET DATA LINE                  XX005
         EJECT                                                    XX005
***************************************************************** XX005
*                                                               * XX005
*    COMMAND FOUND CONTINUE TO PROCESS IT                       * XX005
*                                                               * XX005
***************************************************************** XX005
         SPACE 1                                                  XX005
MOMGOOD  DS    0H                                                 XX005
         L     R8,MOMTGRP(,R4)     GET ADDRESS OF GROUP PROCESSOR XX005
         LH    R1,MOMTOFF(,R4)     GET OFFSET OF SUBPROCESSSOR    XX005
         ALR   R1,R8               COMPUTE ADDR OF SUBPROCESSOR   XX005
         BR    R8                  GO TO GROUP PROCESSOR          XX005
         SPACE 1                                                  XX005
***************************************************************** XX005
*                                                               * XX005
*        SUBROUTINE TO VERIFY CONSOLE/AREA                      * XX005
*                                                               * XX005
***************************************************************** XX005
         SPACE 1                                                  XX005
MOMVCCA  TM    MBLFLG,MBLFLGR      REMOTE SYSTEM UCM              XX005
         BOR   R3                  UCM AND AREA OK                XX005
         SPACE 1                                                  XX005
         AIF   ('&FMID' EQ 'HJE2330 ').SP134B,                     J134*
               ('&FMID' EQ 'HJE2215 ').SP134B,                     J215*
               ('&FMID' EQ 'HJE2221 ').SP134B                      J220
         L     R2,COMEXTEN         POINT TO EXTENDED WORK AREA    XX005
         AGO   .CONTB                                             XX005
.SP134B  ANOP                                                     XX005
         L     R2,$COMEXTN         POINT TO EXTENDED AREA    @134 XX005
.CONTB   ANOP                                                     XX005
         USING CWA,R2          AND ESTABLISH ADDRESSABILITY        J215
         SPACE 1                                                  XX005
         MVC   XASCID(1),COMUCM   SET UCM                         XX005
         MVC   XASDID(1),COMUCMA  SET AREA                        XX005
         CLI   XASDID,0           ZERO AREA                       XX005
         BNZ   MOMSSAOP           SKIP NSI                        XX005
         MVI   XASDID,C'Z'        FORCE AREA Z                    XX005
MOMSSAOP MVC   XAU(1),COMUCM      TELL OS SOURCE IS SAME AS OUTPUTXX005
         MVI   XAN,X'22'          SET ID FOR VERIFIER             XX005
         MODESET EXTKEY=ZERO      GET KEY 0                       XX005
         L     R15,CWA7603D       POINT TO OS VERIFICATION ROUTIN  J215
         BALR  R14,R15            ENTER IT                        XX005
         MODESET EXTKEY=HASP      GET KEY 1                       XX005
         CH    R15,=H'4'          CHECK FOR SERIOUS ERROR         XX005
         BNHR  R3                 SKIP NEXT IF CONSOLE/AREA OK    XX005
         SLR   R10,R10            ZERO WORK                       XX005
         ICM   R10,B'0101',COMUCM+(COMUCMA-COMUCMA) PICK UP UCM IDXX005
*                                                    AND AREA     XX005
         MVI   COMUCMA,0          FORCE NO MLWTO (NO PREVIOUS LINEXX005
         CH    R15,=H'12'         IS CONSOLE DOWN                 XX005
         BNE   *+16               DO NOT SET LOGICAL CONSOLE      XX005
         MVC   COMFLAG(4),MOWTOL  DESTROY APPARENT SOURCE INFO    XX005
         MVC   COMOUT,MOWTOL+(COMOUT-COMFLAG) OMITTING CNTL FIELD XX005
         EJECT                                                    XX005
        $CWTO  L=L'COMMAND,MSGID=936      WRITE TO OPERATOR       XX005
         SPACE 1                                                  XX005
         MVC   COMMAND(MBVINVL),MBVINV MOVE DIAGNOSTIC TEXT       XX005
         STC   R10,MBVINVA         SET AREA                       XX005
         SRL   R10,8               ALIGN CONSOLE ID               XX005
         $CFCVE VALUE=(R10)        CONVERT TO EBCDIC              XX005
         SPACE 1                                                  XX005
         MVC   MBVINVC,COMDWORK+3 SET INTO TEXT                   XX005
         MVC   COMMAND+MBVINVL(8),COMACEID MOVE IDENTIFIER        XX005
         MVC   COMMAND(MBVINVL),MBVINV                            XX005
         LA    R1,COMMAND                                         XX005
        $CWTO  L=MBVINVL,MSGID=999      WRITE TO OPERATOR         XX005
         B     X005RC08                                           XX005
      TITLE 'HASP COMMAND SERVICES  -- (COFCVB)   - CONVERT TO BINARY'
COFCVB1 $CFCVB TYPE=RES,INFO=YES,NUM=1                             @133
         EJECT                                                     @133
COFCVB2 $CFCVB TYPE=RES,INFO=YES                                   @133
         SPACE 1                                                  XX005
      TITLE 'HASP COMMAND SERVICES  -- (COFSEL)   - ROUTINE SELECTION'
***********************************************************************
*                                                                     *
*        COFSEL -- SELECT A ROUTINE BASED ON KEY INPUT CHARACTER      *
*                                                                     *
*        ROUTINE MATCHES THE DESIGNATED INPUT CHARACTER AGAINST       *
*        THE LIST OF ARGUMENTS PROVIDED AND TRANSFERS CONTROL TO      *
*        THE ROUTINE DESIGNATED BY THE CORRESPONDING ADDRESS.         *
*        NO $WAITS ARE ISSUED.                                        *
*                                                                     *
* REGISTERS UPON ENTRY                                                *
*        R1    = ADDRESS OF INPUT CHARACTER                           *
*        R14   = RETURN ( USED IF NO MATCH FOUND )                    *
*        R15   = TABLE ADDRESS                                        *
*                                                                     *
* EXITS                                                               *
*        R1   - ADDRESS OF INPUT CHARACTER                            *
*        R14  - RETURN OR SUB-ROUTINE ADDRESS                         *
*        R15  - LENGTH OF SUBPARAMETER KEYWORD                        *
*                                                                     *
***********************************************************************
         SPACE 1                                                   @130
COFSEL   ST    R14,$DOUBLE         SAVE RETURN ADDRESS             @130
         SLR   R14,R14             ZERO FOR INSERT                 @130
         SPACE 1                                                   @130
COFSEL1  IC    R14,COFSELL(,R15)   GET MACHINE LENGTH OF SUBPARM   @130
         EX    R14,COFSELE         COMPARE ENTRY WITH PARAMETER    @130
         BNE   COFSEL2             BRANCH IF NOT EQUAL             @130
         ST    R14,$DOUBLE         STORE MACHINE LENGTH            @130
         L     R14,COFSELA(,R15)   GET ADDRESS OF RETURN POINT     @130
         L     R15,$DOUBLE         GET MACHINE LENGTH OF SUBPARM   @130
         LA    R15,1(,R15)         ACTUAL LENGTH                   @130
         BR    R14                 EXIT TO SUB-ROUTINE             @130
         SPACE 1                                                   @130
COFSEL2  LA    R15,COFSELF+1(R14,R15)   STEP THROUGH THE TABLE     @130
         CLI   COFSELV(R15),FF     IS THIS THE END OF TABLE...     @130
         BL    COFSEL1             LOOP WHILE STILL IN TABLE       @130
         SPACE 1                                                   @130
         L     R14,$DOUBLE         RELOAD RETURN ADDRESS           @130
         BR    R14                  AND RETURN IN ERROR            @130
         SPACE 1                                                   @130
COFSELE  CLC   COFSELV(*-*,R15),0(R1)  **** EXECUTE ONLY ****      @130
         SPACE 1                                                   @130
*                                                                  @130
*        SYMBOLS TO DEFINE SUBPARAMETER TABLE FIELDS               @130
*                                                                  @130
         SPACE 1                                                   @130
COFSELF  EQU   5                   LENGTH OF FIXED LENGTH PORTION  @130
COFSELA  EQU   0                   LOCATION OF ENTRY ROUTINE ADDR  @130
COFSELL  EQU   4                   LOCATION OF LENGTH OF SUBPARM   @130
COFSELV  EQU   5                   LOCATION OF VARIABLE LNG PARM   @130
         EJECT
MOMVCLC  CLC   MOMTVB(*-*,R4),COMVERB *** EXECUTE ONLY ***        XX005
MOMTMI   TM    COMAUTH,*-*         *** EXECUTE ONLY ***           XX005
         SPACE 1                                                  XX005
         DROP  R2                                                 XX005
         EJECT                                                    XX005
***************************************************************** XX005
*                                                               * XX005
*   C O M M A N D   E D I T   R O U T I N E   C O N S T A N T S * XX005
*                                                               * XX005
***************************************************************** XX005
         SPACE 1                                                  XX005
MOWTOL   $WTO  PRI=$HI,CLASS=$ALWAYS,JOB=NO,ROUTE=X'C000',MF=LX   XX005
MBVINVMB DC    C'COMMAND IS INVALID FROM THIS CONSOLE'            XX005
MBVINVLB EQU   *-MBVINVMB                                         XX005
MBVINV   DC    C'RESPONSE LOCATION L=CCA UNAVAILABLE '            XX005
MBVINVL  EQU   *-MBVINV                                           XX005
MBVINVC  EQU   COMMAND+MBVINVL-16,2                               XX005
MBVINVA  EQU   MBVINVC+2,1                                        XX005
MBLPTRN  DC    C'00',X'0000'       WORK AREA PATTERN              XX005
MBLHI    EQU   COMEWORK            HIGH DIGIT OF CONSOLE 'CC'     XX005
MBLLO    EQU   COMEWORK+1          LOW DIGIT OF CONSOLE 'CC'      XX005
MBLFLG   EQU   COMEWORK+2          FLAG BYTE                      XX005
COMJMBR  EQU   COMJRMT             SHARED SPOOL MEMBER NUMBER     XX005
MBLFLGR  EQU   1                   UCM COMMAND FROM REMOTE SYSTEM XX005
MBLFLGC  EQU   2                   CONSOLE HAS BEEN SPECIFIED     XX005
MBLFLGA  EQU   4                   AREA HAS BEEN SPECIFIED        XX005
MBLAREA  EQU   COMEWORK+3          AREA SPECIFICATION             XX005
MBLCLEQ  DC    C',L='              SPECIAL PARAMETER ID           XX005
         SPACE 1                                                  XX005
COMMREJ  DC    CL42'COMMAND REJECTED-JES2 SHUTDOWN IN PROGRESS'   XX005
COMMIDC  $MSG  000                 RESPONSE MESSAGE ID            XX005
         SPACE 3                                                  XX005
MOMTEL   EQU   16                  LENGTH OF EACH COMTAB ELEMENT  XX005
MOMTFL   EQU   0,1                 FLGS FOR REJECT & REDIRECTION  XX005
MOMTGRP  EQU   1,4                 GROUP PROCESSOR ADDRESS        XX005
MOMTOFF  EQU   5,2                 SUBPROCESSOR OFFSET            XX005
MOMTVBLN EQU   7,1                 VERB LENGTH -1                 XX005
MOMTVB   EQU   8,7                 THE VERB                       XX005
MOMTFLGS EQU   15,1                FLAGS FOR SPECIAL PROCESSING   XX005
MOMR     EQU   CMBFLAGR            LEVEL OF RESTRICTION FOR RMTS  XX005
MOMS     EQU   DCTREJSY            REJECT UNLESS SYSTEM AUTH      XX005
MOMD     EQU   DCTREJDV            REJECT UNLESS DEVICE AUTH      XX005
MOMJ     EQU   DCTREJJB            REJECT UNLESS JOB AUTH         XX005
MOMJDS   EQU   MOMJ+MOMD+MOMS      COMBINATION                    XX005
MOMRS    EQU   MOMR+MOMS           COMBINATION                    XX005
MOMRJ    EQU   MOMR+MOMJ           COMBINATION                    XX005
         TITLE 'CONSTANTS AND EQUATES'
***********************************************************************
*                                                                     *
*        REDIRECTION VALUES FOR DISPLAY COMMANDS                      *
*                                                                     *
***********************************************************************
$D7D     EQU   4
$DA      EQU   1
$DF      EQU   2
$DI      EQU   3
$DJ      EQU   4
$DN      EQU   5
$DO      EQU   6
$DQ      EQU   7
$DS      EQU   4
$DT      EQU   4
$DU      EQU   8
         SPACE 5
COMR     EQU   CMBFLAGR            LEVEL OF RESTRICTION FOR REMOTES
COMS     EQU   DCTREJSY            REJECT UNLESS SYSTEM AUTHORIZATION
COMD     EQU   DCTREJDV            REJECT UNLESS DEVICE AUTHORIZATION
COMJ     EQU   DCTREJJB            REJECT UNLESS JOB AUTHORIZATION
COMJDS   EQU   COMJ+COMD+COMS      COMBINATION
COMRS    EQU   COMR+COMS           COMBINATION
COMRJ    EQU   COMR+COMJ           COMBINATION
         SPACE 2                                                  XX005
MBVERCMD CLC   MOMTVB(*-*,R4),COMVERB *****EXECUTE ONLY *******   XX005
         SPACE 2                                                  XX005
$MAXMSG  EQU   43                 = MAXIMUM MSG LENGTH            XX005
CCMDLN   EQU   15                 = LENGTH OF CMD TO BE MOVED     XX005
         SPACE 3
         LTORG  ,                                                 XX005
         TITLE 'SPAC COMMAND TABLES   '
MBCMDLST DS    0C                  BEGIN COMMAND FAST LOOK-UP TBL  J215
         DC    C'D',AL4(MBTBLD)                                    J215
FTBLENTL EQU   *-MBCMDLST          FAST LOOK-UP TABLE ENTRY LEN    J215
         DC    C'J',AL4(MBTBLJ)                                    J215
         DC    C'P',AL4(MBTBLP)                                    J215
         DC    C'T',AL4(MBTBLT)                                    J215
         DC    C'X',AL4(MBTBLX)                                    J215
         SPACE 1
FTBLENTS EQU   (*-MBCMDLST)/FTBLENTL    NBR OF TBL ENTRIES        XX005
         SPACE 2                                                  XX005
         DS    0F                                                 XX005
$$DMY    $COMTAB $$DMY,$$DMY,LABEL=$$DMY      DUMMY $COMTAB ENTRY XX005
CTBLENTL EQU   *-$$DMY                                            XX005
         SPACE 1                                                  XX005
MBCMDTBL DS    0F                 BEGIN MELLON BANK CMD TBL       XX005
COMTAB   DS    0F
MBTBLC   EQU   *                                                  XX005
MBTBLD   EQU   *                                                  XX005
         $COMTAB DDESTID,SPDESTID,REJECT=COMS,REDIR=$DF         JOR8611
         $COMTAB DK,HASPQCTL,REJECT=COMR+COMS  D QCONTROL
         $COMTAB DRES,HASPRES,REDIR=$DF
MBTBLH   EQU     *
MBTBLJ   EQU     *
         $COMTAB JA,SPACCMDS,REDIR=$DF
         $COMTAB JF,SPACCMDS,REDIR=$DF
         $COMTAB JJ,SPACCMDS,REDIR=$DF
         $COMTAB JK,HASPRES,REDIR=$DF
         $COMTAB JP,SPACCMDS,REDIR=$DF
         $COMTAB JQ,SPACCMDS,REDIR=$DF
         $COMTAB JS,SPACCMDS,REDIR=$DF
         $COMTAB JT,SPACCMDS,REDIR=$DF
MBTBLK   EQU     *
MBTBLL   EQU     *
MBTBLP   EQU     *
         $COMTAB 'P ',HASPPS,REJECT=COMR+COMS,  NO-OP '$P '     JOR0585*
               LABEL=CP40                                       JOR0585
         $COMTAB PSYS,HASPPS,REJECT=COMR+COMS  $P SYS (DRAIN SYSTEM)
MBTBLQ   EQU     *
MBTBLS   EQU     *
MBTBLT   EQU     *
         $COMTAB TDESTID,SPDESTID,REJECT=COMS,REDIR=$DF         JOR8611
         $COMTAB TK,HASPQCTL,REJECT=COMR+COMS  SET QCTL
         $COMTAB TC,HASPTC                     $T CON (RMTS)
MBTBLX   EQU     *
         $COMTAB XJ,HASPXJ,REJECT=COMR+COMS    PURGE GOSH DARNIT
         $COMTAB XS,HASPXJ,REJECT=COMR+COMS    PURGE GOSH DARNIT
         $COMTAB XT,HASPXJ,REJECT=COMR+COMS    PURGE GOSH DARNIT
MBTBLY   EQU     *
CTBLENTS EQU   (*-MBCMDTBL)/CTBLENTL           NBR OF TBL ENTRIES XX005
COMTABE  EQU   *-1
         SPACE 2
         LTORG
         TITLE '           SPAC COMMAND PROCESSOR  ---  INITIALIZATION'
***************************************************************
*                                                             *
*  JESEX005    COMMAND PROCESSOR  ---  INITIAL ENTRY POINT    *
*                                                             *
*                                                             *
***************************************************************
         SPACE 2
SPACCMDS $COMGRUP JA,JF,JJ,JP,JQ,JS,JT,DELAY=NO
         SPACE 3
**********************************************************************
*                                                                    *
*  J COMMAND QUEUE PROCESSING COMMAND                                *
*                                                                    *
*    JFXXXX      PROCESS FORM CODE XXXX                              *
*                                                                    *
*    JJXXXX                                                          *
*    JSXXXX      PROCESS ALL FORMS FOR JOB STC OR TSU  XXXX          *
*    JTXXXX                                                          *
*                                                                    *
*    JA          PROCESS ALL ACTIVE JOES AND DISPLAY REMAINING PRINT *
*                                                                    *
*    JP          PROCESS ALL JOES WITH + 250,000 LINES               *
*                                                                    *
*    JQX         PROCESS ALL FORMS FOR A SPECIFIC QUEUE              *
*                       A-Z 0-9 AND + FOR NETWORK QUEUE              *
*                                                                    *
*    JQXR        PROCESS ALL FORMS FOR A SPECIFIC REMOTE QUEUE       *
*                       A-Z 0-9                                      *
*                                                                    *
**********************************************************************
         TITLE '                SPAC COMMAND SETUP'             JOR0585
JOTBAR   EQU   R7                 JOT BASE REG                  JOR0585
         USING JOT,JOTBAR    ENABLE JOT DSECT                      J215
JQEBAR   EQU   R6                 JQE BASE REG                  JOR0585
         USING JQE,JQEBAR    ENABLE JQE DSECT                      J215
JOEBAR   EQU   R5                 JOE BASE REG                  JOR0585
         USING JOE,JOEBAR    ENABLE JOE DSECT                      J215
CLSBAR   EQU   R4                 CLASS QUEUE BASE REG          JOR0585
CHRJOBAR EQU   R3                 CHAR JOE BASE REG             JOR0585
         EJECT
**********************************************************************
*                                                                    *
*    THIS ROUTINE IS ENTERED WHEN LOOKING FOR A SPECIFIC FORM        *
*                                                                    *
**********************************************************************
         SPACE 2
CJF      MVC   CJJFORMS,COMMAND+3  SAVE FORM CODE
         XC    CJHJOB,CJHJOB       CLEAR FOR FORMS SEARCH
         BAL   R14,COFRTD          GO SET ROUTING
         B     SCANJOES            GO PROCESS FORMS
         SPACE 2
**********************************************************************
*                                                                    *
*    THIS ROUTINE IS ENTERED WHEN LOOKING ACTIVE JOBS                *
*                                                                    *
**********************************************************************
         SPACE 2
CJA      MVI   CJJFORMS,X'FF'      SET FLAG FOR ACTIVE JOBS
         XC    CJHJOB,CJHJOB       CLEAR FOR FORMS SEARCH
         BAL   R14,COFRTD          GO SET ROUTING
         B     SCANJOES            GO PROCESS FORMS
         SPACE 2
**********************************************************************
*                                                                    *
*    THIS ROUTINE IS ENTERED WHEN LOOKING FOR PIGS                   *
*                                                                    *
**********************************************************************
         SPACE 2
CJP      MVI   CJJFORMS,X'FD'      SET FLAG FOR ACTIVE JOBS
         XC    CJHJOB,CJHJOB       CLEAR FOR FORMS SEARCH
         BAL   R14,COFRTD          GO SET ROUTING
         B     SCANJOES            GO PROCESS FORMS
         SPACE 2
**********************************************************************
*                                                                    *
*    THIS ROUTINE IS ENTERED WHEN SCANNING A QUEUE                   *
*                                                                    *
**********************************************************************
         SPACE 2
CJQ      MVI   CJJFORMS,X'FE'      SET FLAG FOR ACTIVE JOBS
         XC    CJHJOB,CJHJOB       CLEAR FOR FORMS SEARCH
         BAL   R14,COFRTD          GO SET ROUTING
         LA    R1,37               LOAD NUMBER OF ENTRIES
CJQLOOP  LA    R15,CJQTBL(R1)      POINT TO TABLE ENTRY         JOR0585
         CLC   COMMAND+3(1),0(R15) CHECK FOR THIS QUEUE         JOR0585
         BE    CJQFND              GO PROCESS ON A HIT
         SPACE 1
         BCT   R1,CJQLOOP          LOWER ENTRIES BY ONE
         SPACE 2
         B     CJMSG650            GO ISSUE INVALID OPERAND
         SPACE 2
CJQFND   BCTR  R1,0                LOWER COUNT BY ONE
         LTR   R1,R1               CHECK REG 1 FOR ZERO
         BZ    CJQFND0             IF ZERO BYPASS
         SLL   R1,3                MULTIPLY BY EIGHT
         CLI   COMMAND+4,C'R'      TEST FOR REMOTE QUEUE
         BE    CJQFND0             YES. LEAVE DISPLACEMENT
         S     R1,=F'4'            LOWER DISPLACEMENT BY 4
         SPACE 1
CJQFND0  L     JOTBAR,$JOTABLE     LOAD START OF JOT TABLE
         LA    CLSBAR,JOTNTWKQ-(JOENEXT-JOE)                       J215
         LA    CLSBAR,0(CLSBAR,R1)                              JOR0585
         B     CKCLS
         SPACE 2
CJQTBL   DC    C' +ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
         SPACE 2
**********************************************************************
*                                                                    *
*      THIS ROUTINE IS ENTERED WHEN LOOKING FOR A SPECIFIC JOB       *
*                                                                    *
**********************************************************************
         SPACE 2
CJJ      DS    0H                  ENTRY ADDRESSABILITY
CJT      DS    0H                  ENTRY ADDRESSABILITY
CJS      DS    0H                  ENTRY ADDRESSABILITY
         BAL   R14,COFRTD          GO SET ROUTING
         BAL   R14,CVTJNUM        CONVERT NUMBER TO BINARY
         STH   R2,CJHJOB          STORE BINARY NUMBER
        $QLOC  (R2)                TRY TO LOCATE JOB
         LTR   JQEBAR,R1           CHECK FOR GOOD JQE
         BZ    MSG666              IF NO JQE BRANCH TO MSG
         SPACE 2
CJCKSTC  TM    JQEFLAG3,JQE3STC    IS THIS STC                     J215
         BNO   CJCKTSU             NO TRY TSU TYPE
         CLI   COMOPRND,C'S'       ARE WE LOOKING FOR STC
         BNE   MSG666              NO..   ISSUE NO JOB FOUND MESSAGE
         B     SCANJOES            GO FORMAT OUTPUT
CJCKTSU  TM    JQEFLAG3,JQE3TSU    IS THIS TSU?                    J215
         BNO   CJCKJOB             NO GO CHECK FOR JOB
         CLI   COMOPRND,C'T'       ARE WE LOOKING FOR TSU
         BNE   MSG666              NO ..  ISSUE NO JOB FOUND MESSAGE
         B     SCANJOES            GO FORMAT OUTPUT
CJCKJOB  CLI   COMOPRND,C'J'       ARE WE LOOKING FOR JOB
         BE    SCANJOES            YES GO FORMAT OUTPUT
         B     MSG666              NO..   ISSUE NO JOB FOUND MESSAGE
         SPACE 2
MSG666   $CRET MSG=MSGNOJOB,L=L'MSGNOJOB,MSGID=666
         SPACE 2
MSGNOJOB DC    CL15'NO JOB(S) FOUND'
         EJECT
**********************************************************************
*                                                                    *
*      SCAN CLASS QUEUES FOR FORMS OR JOB NUMBER                     *
*                                                                    *
**********************************************************************
         SPACE 3
SCANJOES L     JOTBAR,$JOTABLE
         LA    CLSBAR,JOTNTWKQ-(JOENEXT-JOE) BACK TO START         J215
CKCLS    LR    JOEBAR,CLSBAR       LOAD START OF THIS CLS QUE   JOR0585
NEXTJOE  L     JOEBAR,JOENEXT                                   JOR0585
         N     JOEBAR,$ZEROFFF     CLEAR FLAG                   JOR0585
         BZ    NEXTCLS             Y: DONE WITH THIS ONE           J215
         ALR   JOEBAR,JOTBAR       GET CHAR JOE ADDR            JOR0585
         CLI   JOETYPE,JOEFREE     FREE JOE?                    JWT0488
         BE    NEXTJOE             Y: BYPASS                    JWT0488
         SPACE 1
         CLC   CJCROUT(2),$OWNNODE IS THIS FOR OUR NODE
         BNE   CKROUT              NO GO CHECK FOR ROUTING
         CLC   CJCROUT+2(2),=H'0' CHECK REMOTE NUMBER
         BE    CKROUT2             BYPASS ROUT CHECK
CKROUT   CLC   JOEROUT,CJCROUT     CHECK IF THIS IS FOR REMOTE
         BNE   NEXTJOE             NO GO GET NEXT JOE
         SPACE 1
CKROUT2  L     JQEBAR,JOEJQE       GET JQE  OFFSET              JOR0585
         N     JQEBAR,$ZEROFFF     CLEAR FLAG BYTE              JOR0585
         AL    JQEBAR,$JOBQPTR     GET JQE ADDR                 JOR0585
         L     CHRJOBAR,JOECHAR    GET CHAR JOE OFFSET          JOR0585
         N     CHRJOBAR,$ZEROFFF   CLEAR FLAG BYTE              JOR0585
         BZ    NEXTJOE             NO CHAR JOE THEN SKIP IT
         ALR   CHRJOBAR,JOTBAR     GET CHAR JOE ADDR            JOR0585
*   CHECK FOR MATCH ON JOB NUMBER OR FORM AS NEEDED
         SR    R1,R1               CLEAR REG                    JOR0585
         ICM   R1,B'0011',CJHJOB   LOAD JOB NUMBER INTO REG     JOR0585
         BZ    FORMCHK             IF ZERO GO PROCESS FORM CODE
         CLM   R1,B'0011',JQEJOBNO COMPARE JOB NUMBER           JOR0585
         BE    CJSSEG              GOT IT FORMAT LINE
         B     NEXTJOE             TRY THE NEXT JOE
FORMCHK  CLC   CJJFORMS,JOEFORM-JOE(CHRJOBAR) CK FORM CODE         J215
         BE    CJSSEG              GOT IT
         CLI   CJJFORMS,X'F9'      LOOKING FOR ACTIVE JOBS
         BH    CJSSEG              YES.  GO PROCESS
         B     NEXTJOE             TRY  NEXT
NEXTCLS  CLI   CJJFORMS,X'FE'      LOOKING FOR SPECIAL CLASS
         BE    CJNOJOP             YES GOTO NORMAL END
         LA    CLSBAR,4(,CLSBAR)   BUMP TO NEXT CLASS           JOR0585
         LA    JOEBAR,JOTCLSQ+JOTCLSSZ-(JOENEXT-JOE)               J215
         CLR   CLSBAR,JOEBAR       ARE WE AT END OF QUEUE?      JOR0585
         BNL   CJNOJOP             Y: NORMAL END
         B     CKCLS               N: PROCESS NEXT CLASS
         EJECT
**********************************************************************
*                                                                    *
*      FORMAT JOE INFORMATION FOR DISPLAY                            *
*                                                                    *
**********************************************************************
         SPACE 2
CJSSEG   DS    0H
         CLI   CJJFORMS,X'FF'     LOOKING FOR ACTIVE JOBS ONLY
         BNE   SKIP000            IF NOT BYPASS ACTIVE CHECK
         TM    JOEFLAG1,JOE1BUSY   IS THIS JOE BUSY?               J215
         BZ    FMTEXIT            NO.   GOTO EXIT
         SPACE 2
SKIP000  DS    0H
         MVC   COMMAND(L'DFCON),DFCON MOVE IN OVERLAY
* JOB TYPE (JOB, STC, TSU)                                      JOR0585
         MVC   COMDWORK(1),JQEFLAG3 COPY JQE FLAG3              JOR0585
         NI    COMDWORK,JQE3JOB   OFF ALL BUT JOB TYPE FLAGS       J215
         XR    R1,R1              CLEAR TYPE TBL INDEX REG      JOR0585
         IC    R1,COMDWORK        FLAGS INTO INDEX REG          JOR0585
         SLL   R1,1               MULT FLAG VALUE BY 2          JOR0585
         LA    R1,JOBTYPES(R1)    PT TO APPROP TYPE LIT         JOR0585
         MVC   COMMAND+DFCTYPE(L'DFCTYPE),0(R1)                 JOR0585
* JOB NUMBER                                                    JOR0585
         LH    R0,JQEJOBNO        GET JOB NUMBER                JOR0585
        $CFCVE VALUE=(R0)         CONVERT TO EBCDIC             JOR0585
         MVC   COMMAND+DFCJNUM(L'DFCJNUM),COMDWORK+1 JOB NUM    JOR0585
* JOBNAME                                                       JOR0585
         MVC   COMMAND+DFCJOBN(L'DFCJOBN),JQEJNAME JOBNAME      JOR0585
* CLASS                                                         JOR0585
         MVC   COMMAND+DFCCLASS(L'DFCCLASS),JOECURCL CLASS      JOR0585
* PRIORITY                                                      JOR0585
         LH    R0,JOEPRIO          GET PRIORITY                 JOR0585
         LTR   R0,R0               CHECK IF ZERO
         BNZ   *+8                 BRANCH IF JOE PRIO NOT ZERO
         IC    R0,JQEPRIO          USE JQE PRIORITY             JOR0585
         SRL   R0,4                SHIFT FOUR BITS
        $CFCVE VALUE=(R0)          CONVERT TO EBCDIC            JOR0585
         MVC   COMMAND+DFCPRIO(L'DFCPRIO),COMDWORK+2 PRIORITY   JOR0585
* FORMS                                                         JOR0585
         MVC   COMMAND+DFCFORM(L'DFCFORM),JOEFORM-JOE(CHRJOBAR)    J215
* FCB                                                           JOR0585
         MVC   COMMAND+DFCFCB(L'DFCFCB),JOEFCB-JOE(CHRJOBAR)       J215
* WTR ONLY IF NONBLANK (OVERLAYS REC COUNT)                     JOR0585
         CLC   =C'        ',JOEWTRID-JOE(CHRJOBAR) BLANK?          J215
         BE    SKIP001             BRANCH AROUND WTRID MOVE
         CLI   CJJFORMS,X'FD'      LOOKING FOR PIGS
         BE    FMTEXIT             YES EXIT WITHOUT PRINTING
***      MVC   COMMAND+DFCREC#(L'DFCREC#),$BLANKS BLANK COUNT   JOR0585
         MVC   COMMAND+DFCWTR(L'DFCWTR),JOEWTRID-JOE(CHRJOBAR)     J215
         B     SKIP002
SKIP001  EQU   *                                                JOR0585
* REC COUNT                                                     JOR0585
         ICM   R1,15,JOERECCT      LOAD RECORD COUNT
         CLI   CJJFORMS,X'FD'      LOOKING FOR PIGS
         BNE   SKIP001A            NO BYPASS
         C     R1,=F'250000'       COMPARE TO 250,000
         BL    FMTEXIT             LOW EXIT
SKIP001A TM    JOEFLAG2,JOE2SLEC   IS SELECT FLAG ON               J215
         BO    SKIP001B            YES PROCESS AS HOLD
         TM    JQEFLAG1,JQE1HLDA+JQE1HLD1 JOB HELD?                J215
         BZ    CHKBUSY             BRANCH TO NEXT CHECK
SKIP001B MVI   COMMAND+DFCJSTX+1,C'H' MOVE IN HELD INDICATOR    JOR0585
         B     SETLNCNT            CONTINUE                     JOR0585
CHKBUSY  TM    JOEFLAG1,JOE1BUSY   TEST FOR BUSY                   J215
         BZ    SETLNCNT            CONTINUE                     JOR0585
         MVI   COMMAND+DFCJSTX,C'A' MOVE IN BUSY INDICATOR      JOR0585
         MVC   COMMAND+DFCJSTX+1(1),JOEFLAG1 FLAG TO LINE          J215
         NI    COMMAND+DFCJSTX+1,JOE1BUSY OFF ALL BUT SYSID        J215
         OI    COMMAND+DFCJSTX+1,X'F0' MAKE PRINTABLE           JOR0585
SETLNCNT EQU   *                   PROCESS LINE COUNT           JOR0585
         XR    R0,R0              PREPARE FOR POSSIBLE DIVIDE   JOR0585
         C     R1,=F'99999'       NUMBER FITS INTO DISPLAY?     JOR0585
         BNH   DISPLCNT           Y: DISPLAY AS IS              JOR0585
         A     R1,=F'500'         ADD 500 FOR ROUNDING          JOR0585
         D     R0,=F'1000'        REDUCE BY A THOUSAND          JOR0585
         MVI   COMMAND+DFCREC#F,C'K' INDICATE THOUSANDS FACTOR  JOR0585
         C     R1,=F'99999'       NUMBER FITS INTO DISPLAY?     JOR0585
         BNH   DISPLCNT           Y: DISPLAY AS IS              JOR0585
         A     R1,=F'500'         ADD 500 FOR ROUNDING          JOR0585
         XR    R0,R0              PREPARE FOR SECOND DIVIDE     JWT0788
         D     R0,=F'1000'        REDUCE BY A THOUSAND          JOR0585
         MVI   COMMAND+DFCREC#F,C'M' INDICATE MILLIONS FACTOR   JOR0585
DISPLCNT CVD   R1,COMDWORK        CONVERT LINE CONT TO DECIMAL  JOR0585
         MVC   COMMAND+DFCREC#-1(6),=X'402020202120' EDIT PAT   JOR0585
         ED    COMMAND+DFCREC#-1(6),COMDWORK+5 EDIT LINE COUNT  JOR0585
         MVI   COMMAND+DFCREC#-1,C'=' REPLACE EQUAL SIGN        JOR0585
SKIP002  EQU   *                                                JOR0585
* JOE SEGMENT/GROUP IDS                                         JOR0585
         MVC   COMMAND+DFCOGID(L'JOENAME),JOENAME SEG ID        JOR0585
         SPACE 1                                                JOR0585
         LH    R0,JOEID1          GET JOE GROUP 1ST ID          JOR0585
         BAL   R14,DSPJOEID       PUT ID INTO DISPLAY           JOR0585
         LH    R0,JOEID2          GET JOE GROUP 2ND ID          JOR0585
         BAL   R14,DSPJOEID       PUT ID INTO DISPLAY           JOR0585
         SPACE 2
         LA    R0,COMMAND+L'DFCON+1 END OF MESSAGE
         TRT   COMMAND+DFCOGID(DFCTRTL),BLANKTRT FIND A BLANK   JOR0585
         BZ    DISPLIT            NO BLANK: USE END OF LINE     JOR0585
         LR    R0,R1              COPY PTR TO BLANK             JOR0585
DISPLIT  BAL   R14,CJKPRNT         DISPLAY A LINE               JOR0585
         SPACE 2
         CLI   CJJFORMS,X'F9'      CHECKING FOR ACTIVE ONLY
         BH    FMTEXIT             YES BYPASS SECOND LINE
         SPACE 2
         MVC   COMMAND(L'DFCON1),DFCON1  MOVE IN OVERLAY
         MVI   COMDWORK,C'N'       SET DEFAULT VALUE OF NO
         CLI   JOEUCS-JOE(CHRJOBAR),C'A' CHK FOR UCS               J215
         BL    SKIP003             FLAG 2ND LINE TO PRINT
         MVI   COMDWORK,C'Y'       REQ PRINT 2ND LINE
         MVC   COMMAND+28(4),JOEUCS-JOE(CHRJOBAR) JOE UCS          J215
SKIP003  TM    JOEFLAGC-JOE(CHRJOBAR),JOEFCBRT CK FOR BURST        J215
         BNO   SKIP004             IF OFF LEAVE AS NO
         MVI   COMDWORK,C'Y'       FLAG 2ND LINE TO PRINT
         MVI   COMMAND+17,C'Y'     SET BURST TO YES
SKIP004  CLI   JOEFLASH-JOE(CHRJOBAR),C'A' CHK FOR FLSH            J215
         BL    SKIP005             NO SKIP AROUND MOVE
         MVI   COMDWORK,C'Y'       FLAG 2ND LINE TO PRINT
         MVC   COMMAND+21(4),JOEFLASH-JOE(CHRJOBAR) FLASH          J215
SKIP005  CLI   COMDWORK,C'Y'       PRINT 2ND LINE?              JOR0585
         BNE   FMTEXIT             N: BYPASS PRINT              JOR0585
         LA    R0,COMMAND+L'DFCON1                              JOR0585
         BAL   R14,CJKPRNT         DISPLAY A LINE               JOR0585
         SPACE 2
FMTEXIT  DS    0H                  EXIT ADDRESSABILITY
         B     NEXTJOE             RETURN AFTER LINE FORMATING
         SPACE 2
**********************************************************************
*                                                                    *
*        END OF PASS THROUGH ALL JOES                                *
*                                                                    *
**********************************************************************
         SPACE 2
CJNOJOP  TM    CJFLAGS,CJJOEOK     DID WE FIND ANY
         BZ    CJEMPTY             EXIT WITH DIAGNOSTIC IF NO
         B     X005RC08            RETURN
         SPACE 2
CJEMPTY  CLI   CJJFORMS,X'FF'      ARE WE LOOKING FOR ACTIVE
         BE    MSG666              YES RETURN WITH NO JOBS MSG
         SPACE 2
         $CRET MSG=CJMPRT,L=L'CJMPRT,MSGID=619
         SPACE 2
CJMPRT   DC    CL16'NO OUTPUT QUEUED'
         SPACE 3                                                JOR0585
DSPJOEID EQU   *                  DISPLAY JOE ID                JOR0585
         ST    R14,PCEUSER0       SAVE LINK REG                 JOR0585
        $CFCVE VALUE=(R0)         CONVERT TO EBCDIC             JOR0585
         TRT   COMMAND+DFCOGID(DFCTRTL),BLANKTRT FIND A BLANK   JOR0585
         MVI   0(R1),C'.'         ID SEPARATOR                  JOR0585
         LA    R15,COMDWORK       PT TO CONVERTED NUMBER        JOR0585
         LA    R0,5               MAX NUMBER DIGITS             JOR0585
JOEIDLP  CLI   0(R15),C'0'        NON-BLANK FOUND?              JOR0585
         BL    JOEIDLPX           N: SKIP IT                    JOR0585
         MVC   1(1,R1),0(R15)     DIGIT TO DISPLAY              JOR0585
         LA    R1,1(,R1)          PT TO NEXT LOC                JOR0585
JOEIDLPX LA    R15,1(,R15)        PT TO NEXT DIGIT              JOR0585
         BCT   R0,JOEIDLP         GET NEXT DIGIT                JOR0585
         L     R14,PCEUSER0       RESTORE LINK REG              JOR0585
         BR    R14                RETURN TO CALLER              JOR0585
         EJECT
***********************************************************************
*                                                                     *
*   SUBROUTINE -- COFRTD  (DEFAULT RANGE CONVERSION)                  *
*   ----------                                                        *
*       THIS ROUTINE TAKES A ROUTE CODE FROM THE COMWORK AREA         *
*   AND RETURNS A MAXIMUM RANGE IF IT ISN'T A REMOTE WORKSTATION.     *
*   OTHERWISE, IT CHECKS FOR OUR NODE, AND IF IT IS, IT LOOKS UP      *
*   THE REMOTE NUMBER IN THE RAT AND RETURNS IT AS THE HIGH AND       *
*   LOW BOUND ANSWER.                                                 *
*                                                                     *
* REGISTERS      ENTRY                 EXIT                           *
* ---------      -----                 ----                           *
*   R0      -     N/A              HIGH BOUND ANSWER                  *
*   R1      -     N/A              LOW BOUND ANSWER                   *
*   R11     -   HCT POINTER          UNCHANGED                        *
*   R14     -   RETURN ADDR          UNCHANGED                        *
*                                                                     *
***********************************************************************
         SPACE 1                                                   SPR2
COFRTD   L     R1,COMJROUT         PICK UP DEFAULT ROUTE CODE      SPR2
         LR    R0,R1               COPY                              R4
         TM    COMFLAG,CMBFLAGW    THIS REMOTE WORKSTATION           R4
         BO    COFRTDRW            LOOK AT REMOTE WORKSTATION IF YES R4
         AL    R0,=A($MAXRJE)      SET HIGH RANGE              @OZ52738
         B     COFRTD1             RETURN                            R4
         SPACE 1                                                   SPR2
COFRTDRW CLM   R1,B'1100',$OWNNODE  THIS OUR NODE                  SPR2
         BNE   COFRTD1             RETURN IF NOT                   SPR2
         LH    R1,COMJRMT          LOAD REMOTE NUMBER              SPR2
         BCTR  R1,0                REDUCE BY ONE                     R4
         MH    R1,=Y(RATTLE)       GET OFFSET                        R4
         AL    R1,$RATABLE         POINT TO RAT ELEMENT              R4
         L     R0,RATROUTE-RAT(,R1) PICK UP RMT ROUTING   @OZ52738 J215
         LR    R1,R0               MAKE A COPY OF IT               SPR2
         SPACE 2
COFRTD1  DS    0H                  GET ADDRESSABILITY
         LR    R2,R1              SAVE LOW BOUND ONLY
         LR    R15,R2               COPY ROUTING                JOR0585
         NI    CJFLAGS,FF-CJJOEOK-CJSTC-CJTSU
         STCM  R2,B'1111',CJEROUT SAVE END ROUTE
         ST    R15,CJCROUT        SAVE STARTING ROUTE           JOR0585
         STCM  R15,15,CJSVRT      SAVE STARTING ROUTE           JOR0585
         BR    R14                RETURN
         EJECT
**********************************************************************
*                                                                    *
*        CONVERT JOB NUMBER TO BINARY                                *
*                                                                    *
**********************************************************************
         SPACE 1
CVTJNUM  LA    R1,4                LOAD MAX OF FOUR DIGITS
         SR    R2,R2               CLEAR ACCUMULATOR
         LA    R15,COMMAND+3       LOAD START OF JOB NUMBER
LOOPNUM  CLI   0(R15),C'0'         IS THIS A NUMBER
         BL    CJMSG650            IF BELOW ZERO BAD NUMBER
         CLI   0(R15),C'9'         IS THIS A NUMBER
         BH    CJMSG650            IF ABOVE NINE BAD NUMBER
         IC    R0,0(R15)           LOAD NUMBER INTO REGISTER
         N     R0,=X'0000000F'     STRIP HIGH ORDER BITS
         AR    R2,R0               ADD TO ACCUMULATOR
         CLI   1(R15),C' '         IF BLANK RETURN TO CALLER
         BER   R14                 RETURN
         LA    R15,1(R15)          BUMP TO NEXT CHARACTER
         MH    R2,=H'10'           MULTIPLY BY 10
         BCT   R1,LOOPNUM          CHECK FOR 4 DIGITS
NUMERR   B     CJMSG650            WRITE ERROR MESSAGE
         EJECT
***********************************************************************
*                                                                     *
*        DISPLAY A LINE                                               *
*                                                                     *
***********************************************************************
CJKPRNT  EQU   *                                                JOR0585
         ST    R14,PCEUSER0       SAVE LINK REG                 JOR0585
         OI    CJFLAGS,CJJOEOK     INDICATE THAT WE HAD A HIT
         LA    R1,COMMAND          PT TO START OF LINE          JOR0585
         SR    R0,R1               GET COUNT
         $CWTO L=(R0)
         NI    CJFLAGS,FF-CJSOMJO TURN OFF FLUSH BIT
         L     R14,PCEUSER0       RESTORE LINK REG              JOR0585
         BR    R14                 RETURN                       JOR0585
         EJECT
***************************************************************
*                                                             *
*        PUT OUT INVALID OPERAND MESSAGE                      *
*                                                             *
***************************************************************
CJMSG650 LA    R1,COMMAND+3        POINT TO OPERAND
         MVC   COMMAND(9),0(R1)    INVALID OPERAND
         MVC   COMMAND+9(16),=C' INVALID OPERAND'
         $CRET L=25
         SPACE 1
         DROP  JOEBAR,JQEBAR,JOTBAR DISABLE DSECTS              JOR0585
         EJECT
*FCON    DC C'X        X        P=   OG=    .     F=     C=     Q=  L= X
                      '
DFCON    DC C'YNNNN J        P=    F=         C=     Q=   L=       OG= *
                                 '                              JOR0585
* OFFSETS TO FIELDS IN CONSOLE LINE                             JOR0585
DFCTYPE  EQU   00,1               JOB TYPE (JOB, STC, TSU)      JOR0585
DFCJNUM  EQU   01,4               JOB NUMBER                    JOR0585
DFCJOBN  EQU   06,8               JOBNAME                       JOR0585
DFCPRIO  EQU   17,3               PRIORITY                      JOR0585
DFCFORM  EQU   23,8               FORMS                         JOR0585
DFCFCB   EQU   34,4               FCB                           JOR0585
DFCCLASS EQU   41,1               CLASS                         JOR0585
DFCWTR   EQU   43,8               WTR IF SPEC'D                 JOR0585
DFCJSTX  EQU   43,2               JOB STATUS (A#, H, OR L)      JOR0585
DFCREC#  EQU   46,5               REC COUNT                     JOR0585
DFCREC#F EQU   51,1               REC COUNT FACTOR (NULL, K, M) JOR0585
DFCOGID  EQU   56                 SEG/GROUP IDS                 JOR0585
DFCTRTL  EQU   L'DFCON-DFCOGID    MAX LENGTH OF BLANK TRT       JOR0585
         SPACE 1
DFCON1   DC C'               B=N O=**** T=****'
         SPACE 1                                                JOR0585
JOBTYPES DC    C'J S T '          JOB TYPES
         SPACE 1                                                JOR0585
BLANKTRT EQU   *-C' '             TRT TBL TO FIND BLANK         JOR0585
         DC    C' '               MARK BLANK                    JOR0585
         DC    XL(C'9'-C' ')'00'  OTHER CHARS NULL              JOR0585
***********************************************************************
*                                                                     *
*        MISCELLANEOUS                                                *
*                                                                     *
***********************************************************************
         SPACE 2
CJJFORMS EQU   COMPNTER,4         FORMS CHARACTERISITCS
         SPACE 1
*        FLAG SETTINGS FOR CJFLAGS
         SPACE 1
CJJOEOK  EQU   B'10000000'        AT LEAST ONE JOE HAD INFO
CJSOMJO  EQU   B'01000000'        THIS JOE HAS SOME TO DISPLAY
CJ00001  EQU   B'00100000'        RESERVED FOR FUTURE USE
CJ00002  EQU   B'00010000'        RESERVED FOR FUTURE USE
CJ00003  EQU   B'00001000'        RESERVED FOR FUTURE USE
CJANYJ   EQU   B'00000011'        DISPLAY ANY ELIGIBLE JOB
CJTSU    EQU   B'00000010'        DISPLAY ONLY ELIGIBLE TSUS
CJSTC    EQU   B'00000001'        DISPLAY ONLY ELIGIBLE STCS
CJJOB    EQU   B'00000000'        DISPLAY ONLY ELIGIBLE JOBS
         SPACE 2
CJREGS2  EQU   COMREGSV+4,4       REGISTER SAVE AREA
CJFLAGS  EQU   COMREGSV+8,1       FLAGS
CJEROUT  EQU   COMREGSV+12,4      LAST ROUTING
CJHJOB   EQU   COMREGSV+22,2      HIGH JOB NUMBER RANGE
CJSVRT   EQU   COMREGSV+24,4      CURRENT ROUTING
CJCROUT  EQU   COMREGSV+28,4      CURRENT ROUTING
         SPACE 2
         LTORG
         TITLE 'HASP COMMAND PROCESSOR HASPRES --   RESOURCE COMMAND'
***************************************************************
*  THIS COMMAND WILL DISPLAY THE CURRENT UTILIZATION OF       *
*  JES2 RESOURCES.                                            *
*                                                             *
*  THIS COMMAND WAS COPIED FROM MELLON BANK MODS 133/134      *
*                                                             *
***************************************************************
         SPACE 2
HASPRES  $COMGRUP DRES,JK
         SPACE 2
CDRES    DS    0H                        ROUTINE ENTRY POINT
         MVC   COMMAND(L'CDRESHDR),CDRESHDR      SET TITLE        MB082
        $CWTO  L=30                WRITE-TO-OPERATOR              MB082
         MVI   COMMAND,C' '        BLANK OUT                      MB082
         MVC   COMMAND+1(29),COMMAND     WORKAREA                 MB082
***                                                               MB082
         MVC   COMMAND+2(4),=C'LBUF'     *** LBUF ***             MB082
         L     R5,$BFRMAP                POINT AT LBUF BMP        MB082
         LH    R5,BPMBUFCT-BPM(,R5) GET AVAILABLE LBUF CNT         J215
         CVD   R5,$DWORK                 TO PACKED                MB082
         MVC   COMMAND+12(L'CJEDIT),CJEDIT      MOVE IN EDIT PTRN MB082
         ED    COMMAND+12(L'CJEDIT),$DWORK+5 EDIT AVAILABLE COUNT MB082
         LH    R5,$NUMBUF                GET CNT OF LBUFS DEFINED MB082
         CVD   R5,$DWORK                 TO PACKED                MB082
         MVC   COMMAND+23(L'CJEDIT),CJEDIT      MOVE IN EDIT PTRN MB082
         ED    COMMAND+23(L'CJEDIT),$DWORK+5 EDIT DEFINED COUNT   MB082
        $CWTO  L=30                      WRITE-TO-OPERATOR        MB082
***                                                               MB082
         MVC   COMMAND+2(4),=C'TPBF'     *** TPBF ***             MB082
         L     R5,$TPBFMAP               POINT AT TPBF BMP        MB082
         LH    R5,BPMBUFCT-BPM(,R5) GET AVAILABLE TPBF CNT         J215
         CVD   R5,$DWORK                 TO PACKED                MB082
         MVC   COMMAND+12(L'CJEDIT),CJEDIT      MOVE IN EDIT PTRN MB082
         ED    COMMAND+12(L'CJEDIT),$DWORK+5 EDIT AVAILABLE COUNT MB082
         LH    R5,$NUMTPBF               GET CNT OF TPBFS DEFINED MB082
         CVD   R5,$DWORK                 TO PACKED                MB082
         MVC   COMMAND+23(L'CJEDIT),CJEDIT      MOVE IN EDIT PTRN MB082
         ED    COMMAND+23(L'CJEDIT),$DWORK+5 EDIT DEFINED COUNT   MB082
        $CWTO  L=30                      WRITE-TO-OPERATOR        MB082
***                                                               MB082
         MVC   COMMAND+2(4),=C'CMBS'     *** CMBS ***             MB082
         LH    R5,$CMBFREC               GET CNT OF AVAIL. CMBS   MB082
         CVD   R5,$DWORK                 TO PACKED                MB082
         MVC   COMMAND+12(L'CJEDIT),CJEDIT      MOVE IN EDIT PTRN MB082
         ED    COMMAND+12(L'CJEDIT),$DWORK+5 EDIT AVAILABLE COUNT MB082
         LH    R5,$NUMCMBS               GET CNT OF CMBS DEFINED  MB082
         CVD   R5,$DWORK                 TO PACKED                MB082
         MVC   COMMAND+23(L'CJEDIT),CJEDIT      MOVE IN EDIT PTRN MB082
         ED    COMMAND+23(L'CJEDIT),$DWORK+5 EDIT DEFINED COUNT   MB082
        $CWTO  L=30                      WRITE-TO-OPERATOR        MB082
***                                                               MB082
         MVC   COMMAND+2(4),=C'SMFB'     *** SMFB ***             MB082
         LH    R5,$SMFFREC               GET CNT OF AVAIL. SMFBS  MB082
         CVD   R5,$DWORK                 TO PACKED                MB082
         MVC   COMMAND+12(L'CJEDIT),CJEDIT      MOVE IN EDIT PTRN MB082
         ED    COMMAND+12(L'CJEDIT),$DWORK+5 EDIT AVAILABLE COUNT MB082
         LH    R5,$NUMSMFB               GET CNT OF SMFBS DEFINED MB082
         CVD   R5,$DWORK                 TO PACKED                MB082
         MVC   COMMAND+23(L'CJEDIT),CJEDIT      MOVE IN EDIT PTRN MB082
         ED    COMMAND+23(L'CJEDIT),$DWORK+5 EDIT DEFINED COUNT   MB082
        $CWTO  L=30                      WRITE-TO-OPERATOR        MB082
***                                                               MB082
         MVC   COMMAND+2(4),=C'TGS '     *** TGS  ***             MB082
         L     R6,$TGTOTAL               R6 =  TGS DEFINED        MB082
         L     R5,$TGALLOC               R5 =  TGS ALLOCATED      MB082
         CVD   R6,$DWORK                 TO PACKED                MB082
         MVC   COMMAND+23(L'CJEDIT),CJEDIT      MOVE IN EDIT PTRN MB082
         ED    COMMAND+23(L'CJEDIT),$DWORK+5 EDIT DEFINED COUNT   MB082
         SR    R6,R5                     R6 =  TGS AVAILABLE      MB082
         CVD   R6,$DWORK                 TO PACKED                MB082
         MVC   COMMAND+12(L'CJEDIT),CJEDIT      MOVE IN EDIT PTRN MB082
         ED    COMMAND+12(L'CJEDIT),$DWORK+5 EDIT AVAILABLE COUNT MB082
        $CWTO  L=30                      WRITE-TO-OPERATOR        MB082
***                                                               MB082
         MVC   COMMAND+2(4),=C'JQES'     *** JQES ***             MB082
         LH    R5,$JQEFREC               GET CNT OF AVAIL. JQES   MB082
         CVD   R5,$DWORK                 TO PACKED                MB082
         MVC   COMMAND+12(L'CJEDIT),CJEDIT      MOVE IN EDIT PTRN MB082
         ED    COMMAND+12(L'CJEDIT),$DWORK+5 EDIT AVAILABLE COUNT MB082
         LH    R5,$MAXJOBS               GET CNT OF JQES DEFINED  MB082
         CVD   R5,$DWORK                 TO PACKED                MB082
         MVC   COMMAND+23(L'CJEDIT),CJEDIT      MOVE IN EDIT PTRN MB082
         ED    COMMAND+23(L'CJEDIT),$DWORK+5 EDIT DEFINED COUNT   MB082
        $CWTO  L=30                      WRITE-TO-OPERATOR        MB082
***                                                               MB082
         MVC   COMMAND+2(4),=C'JOES'     *** JOES ***             MB082
         L     R5,$JOTABLE               R5 => JOT                MB082
         LH    R5,JOTFREC-JOT(,R5)  GET CNT OF AVAIL. JOES         J215
         CVD   R5,$DWORK                 TO PACKED                MB082
         MVC   COMMAND+12(L'CJEDIT),CJEDIT      MOVE IN EDIT PTRN MB082
         ED    COMMAND+12(L'CJEDIT),$DWORK+5 EDIT AVAILABLE COUNT MB082
         LH    R5,$NUMJOES               GET CNT OF JOES DEFINED  MB082
         CVD   R5,$DWORK                 TO PACKED                MB082
         MVC   COMMAND+23(L'CJEDIT),CJEDIT      MOVE IN EDIT PTRN MB082
         ED    COMMAND+23(L'CJEDIT),$DWORK+5 EDIT DEFINED COUNT   MB082
        $CWTO  L=30                      WRITE-TO-OPERATOR        MB082
***                                                               MB082
         B     X005RC08                  RETURN TO MAINLINE HASP  MB082
CDRESHDR DC    CL30'RESOURCE   AVAILABLE   DEFINED'               MB082
CJEDIT   DC    X'402020212020' GENERAL EDIT PATTERN
         SPACE 1                                                  MB082
         LTORG ,                   EXPAND LITERAL POOL            MB082
         TITLE 'HASP COMMAND PROCESSOR HASPRES --   TGS UTILIZATION'
***************************************************************
*   THIS ROUTINE WILL DISPLAY THE TGS IN USE AND ALSO THE     *
*   RANGE INTO WHICH THEY FALL.  THE SIZE OF A TG IS EST.     *
*   TO BE 5500 LINES THIS VALUE CAN BE ADJUSTED, IF THE       *
*   TGS IN USE DO NOT AGREE WITH THE SYSTEM COUNT OF TGS USED.*
*                                                             *
*   RANGE 1..       0 -   5000  LINES                         *
*   RANGE 2..    5001 -  20000  LINES                         *
*   RANGE 3..   20001 -  50000  LINES                         *
*   RANGE 4..   50001 - 150000  LINES                         *
*   RANGE 5..  150001 -  ---->  LINES                         *
*                                                             *
***************************************************************
         SPACE 2
CJK      DS    0H                 SET ADDRESSABILITY
         MVC   SPACSEG1(3),SPACZERO CLEAR RANGE 1 SEGMENT CNT
         MVC   SPACTGS1(3),SPACZERO CLEAR RANGE 1 TGS COUNTER
         MVC   SPACSEG2(3),SPACZERO CLEAR RANGE 2 SEGMENT CNT
         MVC   SPACTGS2(3),SPACZERO CLEAR RANGE 2 TGS COUNTER
         MVC   SPACSEG3(3),SPACZERO CLEAR RANGE 3 SEGMENT CNT
         MVC   SPACTGS3(3),SPACZERO CLEAR RANGE 3 TGS COUNTER
         MVC   SPACSEG4(3),SPACZERO CLEAR RANGE 4 SEGMENT CNT
         MVC   SPACTGS4(3),SPACZERO CLEAR RANGE 4 TGS COUNTER
         MVC   SPACSEG5(3),SPACZERO CLEAR RANGE 5 SEGMENT CNT
         MVC   SPACTGS5(3),SPACZERO CLEAR RANGE 5 TGS COUNTER
         EJECT
***************************************************************
*     SCAN THE JOES AND TEST THE LINE COUNT FOR THE PROPER    *
*     RANGE.   ALSO CHECK AND BYPASS ANY SEGMENTS THAT ARE    *
*     FOR THE BACKUP WRITER.                                  *
*                                                             *
***************************************************************
         SPACE 2
         USING JOT,R7                                              J215
         USING JOE,R1                                              J215
         SPACE 2
         L     R7,$JOTABLE        LOAD THE JOT ADDRESS
         LA    R3,JOTRDYWQ-(JOENEXT-JOE) LOAD START OF QUE         J215
CJCKCLS  LR    R1,R3              LOAD START OF CLASS QUE
CJTNXTJ  L     R1,JOENEXT
         N     R1,$ZEROFFF        CLEAR BITS
         BZ    CJNEXTC            IF ZERO GET NEXT QUE
         ALR   R1,R7              ADD JOT ADDRESS TO OFFSET
         CLC   JOERNODE,$OWNNODE  IS THIS FOR HERE
         BNE   SPACCJ1            IF NOT FOR HERE FOR PROCESS
         CLC   JOEREMOT,$NUMRJE   IS THIS FOR BWTR
         BE    CJTNXTJ            YES GO PROCESS NEXT JOE
         SPACE 2
*        PROCESS OUTPUT RANGE
SPACCJ1  SR    R14,R14            CLEAR REG 14
         L     R15,JOERECCT       LOAD RECORD COUNT
         LH    R4,$TGSIZE         BUFFERS PER TRACK GROUP
         DR    R14,R4             DIVIDE BY BUFF PER TG
         SR    R14,R14            CLEAR REG FOR DIVIDE
         D     R14,SPACCNST       DIVIDE LINES PER BUFFER
         LA    R15,1(R15)         ADD ONE FOR INCOMPLETE TG
         SPACE 2
         CVD   R15,$DWORK         CONVERT TGS COUNT
         CH    R15,=H'1'          COMPARE FOR RANGE 1
         BH    SPACR2
         AP    SPACSEG1(3),SPACONE BUMP COUNT BY ONE
         AP    SPACTGS1(3),$DWORK+5(3)
         B     CJTNXTJ            GO PROCESS NEXT JOE
SPACR2   DS    0H
         CH    R15,=H'5'          COMPARE FOR RANGE 2
         BH    SPACR3
         AP    SPACSEG2(3),SPACONE BUMP COUNT BY ONE
         AP    SPACTGS2(3),$DWORK+5(3)
         B     CJTNXTJ            GO PROCESS NEXT JOE
SPACR3   DS    0H
         CH    R15,=H'25'         COMPARE FOR RANGE 3
         BH    SPACR4
         AP    SPACSEG3(3),SPACONE BUMP COUNT BY ONE
         AP    SPACTGS3(3),$DWORK+5(3)
         B     CJTNXTJ            GO PROCESS NEXT JOE
SPACR4   DS    0H
         CH    R15,=H'125'        COMPARE FOR RANGE 4
         BH    SPACR5
         AP    SPACSEG4(3),SPACONE BUMP COUNT BY ONE
         AP    SPACTGS4(3),$DWORK+5(3)
         B     CJTNXTJ            GO PROCESS NEXT JOE
SPACR5   DS    0H
         AP    SPACSEG5(3),SPACONE BUMP COUNT BY ONE
         AP    SPACTGS5(3),$DWORK+5(3)
         B     CJTNXTJ            GO PROCESS NEXT JOE
         SPACE 3
CJNEXTC  DS    0H
         LA    R3,4(R3)           BUMP TO NEXT CLASS
         LA    R1,JOTCLSQ+JOTCLSSZ-(JOENEXT-JOE)                   J215
         CLR   R3,R1              ARE WE AT END OF QUEUE
         BNL   CJWTO              AT END GO WRITE TO OPERATOR
         B     CJCKCLS
         EJECT
CJWTO    DS    0H                      WRITE TO OPERATOR
         MVC   COMMAND(L'CJTGHDR1),CJTGHDR1 SET TITLE 1
         $CWTO L=30                    WRITE-TO-OPERATOR
         MVC   COMMAND(L'CJTGHDR2),CJTGHDR2 SET TITLE 2
         $CWTO L=30                    WRITE-TO-OPERATOR
         MVI   COMMAND,C' '            BLANK OUT
         MVC   COMMAND+1(29),COMMAND      WORKAREA
         SPACE 3
***
         MVC   COMMAND+1(7),=C'000-001'
         MVC   COMMAND+12(L'CJEDIT),CJEDIT MOVE IN EDIT PATTERN
         ED    COMMAND+12(L'CJEDIT),SPACSEG1 EDIT SEGMENT COUNT
         MVC   COMMAND+23(L'CJEDIT),CJEDIT MOVE IN EDIT PATTERN
         ED    COMMAND+23(L'CJEDIT),SPACTGS1 EDIT TGS COUNT
         $CWTO L=30
         SPACE 3
***
         MVC   COMMAND+1(7),=C'002-005'
         MVC   COMMAND+12(L'CJEDIT),CJEDIT MOVE IN EDIT PATTERN
         ED    COMMAND+12(L'CJEDIT),SPACSEG2 EDIT SEGMENT COUNT
         MVC   COMMAND+23(L'CJEDIT),CJEDIT MOVE IN EDIT PATTERN
         ED    COMMAND+23(L'CJEDIT),SPACTGS2 EDIT TGS COUNT
         $CWTO L=30
         SPACE 3
***
         MVC   COMMAND+1(7),=C'006-025'
         MVC   COMMAND+12(L'CJEDIT),CJEDIT MOVE IN EDIT PATTERN
         ED    COMMAND+12(L'CJEDIT),SPACSEG3 EDIT SEGMENT COUNT
         MVC   COMMAND+23(L'CJEDIT),CJEDIT MOVE IN EDIT PATTERN
         ED    COMMAND+23(L'CJEDIT),SPACTGS3 EDIT TGS COUNT
         $CWTO L=30
         SPACE 3
***
         MVC   COMMAND+1(7),=C'026-125'
         MVC   COMMAND+12(L'CJEDIT),CJEDIT MOVE IN EDIT PATTERN
         ED    COMMAND+12(L'CJEDIT),SPACSEG4 EDIT SEGMENT COUNT
         MVC   COMMAND+23(L'CJEDIT),CJEDIT MOVE IN EDIT PATTERN
         ED    COMMAND+23(L'CJEDIT),SPACTGS4 EDIT TGS COUNT
         $CWTO L=30
         SPACE 3
***
         MVC   COMMAND+1(7),=C'126-UP '
         MVC   COMMAND+12(L'CJEDIT),CJEDIT MOVE IN EDIT PATTERN
         ED    COMMAND+12(L'CJEDIT),SPACSEG5 EDIT SEGMENT COUNT
         MVC   COMMAND+23(L'CJEDIT),CJEDIT MOVE IN EDIT PATTERN
         ED    COMMAND+23(L'CJEDIT),SPACTGS5 EDIT TGS COUNT
         $CWTO L=30
***
         B     X005RC08           RETURN
         EJECT
SPACCNST DC    F'33'
SPACZERO DC    PL3'0'
SPACONE  DC    PL3'1'
CJTGHDR1 DC    CL30'      TRACK GROUP USAGE'
CJTGHDR2 DC    CL30' RANGE   SEGMENT   TOTAL TGS '
SPACSEG1 EQU   COMMAND+160
SPACTGS1 EQU   COMMAND+163
SPACSEG2 EQU   COMMAND+166
SPACTGS2 EQU   COMMAND+169
SPACSEG3 EQU   COMMAND+172
SPACTGS3 EQU   COMMAND+175
SPACSEG4 EQU   COMMAND+178
SPACTGS4 EQU   COMMAND+181
SPACSEG5 EQU   COMMAND+184
SPACTGS5 EQU   COMMAND+187
         TITLE 'HASP COMMAND PROCESSOR HASPQCTL -- QCONTROL COMMANDS'
***********************************************************************
*                                                                     *
*        QUEUE CONTROL COMMANDS                                       *
*                                                                     *
*        $T K,H=HOLDTIME,M=MINDORM,X=MAXDORM,WAR2RN                   *
*                                                                     *
*        $D K  DISPLAY QUEUE CONTROL VALUES                           *
*                                                                     *
***********************************************************************
HASPQCTL $COMGRUP DK,TK
         SPACE 2
CTK      BXH   R5,R6,CTKINVOX      / B IF NO PARM'S
CTKMO    L     R1,0(R5)            ADDR OF THIS PARM
         CLI   1(R1),C'='          ENSURE PROPER FORMAT
         BNE   CTKINVO             / IT IS NOT
         $CFSEL (H,CTKH),(M,CTKM),(W,CTKW),(X,CTKX),OPERAND=(R1)
         SPACE 2
         B     CTKINVO
CTKINVOX L     R1,0(R5)            ADDR OF INVALID PARM
CTKINVO  MVC   COMMAND(9),0(R1)    INVALID OPERAND
         MVC   COMMAND+9(16),=CL16' INVALID OPERAND'
        $CRET  L=25
         SPACE 1
CTKH     LA    R4,$MINHOLD         ADDR OF HOLD PARM
         B     CTKON               / GO CONVERT AND SET
         SPACE 1
CTKM     LA    R4,$MINDORM         ADDR OF MINDORM PARM
         B     CTKON               / GO CONVERT AND SET VALUES
         SPACE 1
CTKW     LA    R4,$LOCKOUT         ADDR OF WARN PARM               J215
         B     CTKON               / GO CONVERT AND SET
         SPACE 1
CTKX     LA    R4,$MAXDORM         ADDR OF MAXDORM PARM
CTKON    $CFCVB POINTER=(R5),NOK=CTKINVOX
         MH    R0,=H'100'          CONVERT TO HUNDRETHS
         LNR   R0,R0               SET TO NEGATIVE VALUE
         ST    R0,0(R4)            SET NEW QCONTROL VALUE
         BXLE  R5,R6,CTKMO         / GO TRY FOR MORE
* MAKE SURE CHECKPOINT PROCESSOR WAKES UP
         L     R1,$CKPTPCE         ADDR OF CHECKPOINT PCE
         DROP  R13                 KILL COMM PCE ADDRESSABILITY
         USING PCE,R1         CKPT PCE ADDRESSABILITY              J215
         $TTIMER CKPSTQE,CANCEL    DELETE FROM QUEUE
         L     R1,$CKPTPCE         ADDR OF CHECKPOINT PCE
         OI    CKPSTQE+TQEPCE,X'80' FAKE TIMER POP                 J215
         DROP  R1                  KILL CKPT PCE ADDRESSABILITY
         USING PCE,R13        BACK TO COMM PCE                     J215
         $POST (R1),WORK           TELL HIM SOME WORK EXISTS
         $POST $HASPECF,CKPTW      DO A CHECKPOINT WRITE           J215
         EJECT
CDK      MVC   COMMAND(CDKL),CDKMSG COMMAND RESPONSE SKELETON
         L     R2,$LOCKOUT         R2RN VALUE                      J215
         LPR   R2,R2               SET VALUE POSITIVE
         CVD   R2,COMDWORK         TO PACKED
         ED    CDKW,COMDWORK+4     TO EBCDIC
*
         L     R2,$MINHOLD         HOLD VALUE
         LPR   R2,R2               SET VALUE POSITIVE
         CVD   R2,COMDWORK         TO PACKED
         ED    CDKH,COMDWORK+4     TO EBCDIC
*
         L     R2,$MINDORM         MINDORM VALUE
         LPR   R2,R2               SET VALUE POSITIVE
         CVD   R2,COMDWORK         TO PACKED
         ED    CDKM,COMDWORK+4     TO EBCDIC
*
         L     R2,$MAXDORM         MAXDORM TIME
         LPR   R2,R2               SET VALUE POSITIVE
         CVD   R2,COMDWORK         TO PACKED
         ED    CDKX,COMDWORK+4     TO EBCDIC
*
        $CRET  L=CDKL
         SPACE 2
CDKMSG   DC    C'WARN(W)='
CDKWX    DC    X'4020202020214B2020'
CDKW     EQU   COMMAND+CDKWX-CDKMSG,L'CDKWX
         DC    C'  HOLD(H)='
CDKHX    DC    X'4020202020214B2020'
CDKH     EQU   COMMAND+CDKHX-CDKMSG,L'CDKHX
         DC    C'  MINDORM(M)='
CDKMX    DC    X'4020202020214B2020'
CDKM     EQU   COMMAND+CDKMX-CDKMSG,L'CDKMX
         DC    C'  MAXDORM(X)='
CDKXX    DC    X'4020202020214B2020'
CDKX     EQU   COMMAND+CDKXX-CDKMSG,L'CDKXX
CDKL     EQU   *-CDKMSG            MSG LENGTH
         TITLE 'HASP COMMAND PROCESSOR HASPTC -- $T CON RMT COMMANDS'
***********************************************************************
*                                                                     *
*        ACCEPTS ABBREVIATED $T CON COMMANDS FROM REMOTE              *
*                                                                     *
*        RATHER THAN THE  $T RN.CON COMMAND THAT ALLOWS               *
*                                                                     *
*        REMOTE STATIONS TO MODIFY THEIR OWN CONSOLES.                *
*                                                                     *
*                                                                     *
***********************************************************************
HASPTC   $COMGRUP TC
         SPACE 2
CTC      DS    0H
         TM    COMFLAG,CMBFLAGW    IS IT A REMOTE ENTRY?
         BNO   X005RC00            / IF NOT
         L     R1,0(,R5)           FIRST OPERAND
         CLC   =CL3'CON',0(R1)     IS IT A 'CON' COMMAND?
         BNE   X005RC00            / IF NOT
         CLC   COMTONOD,$OWNNODE   IS THIS OUR OWN NODE?
         BNE   X005RC08            / IF NOT
         SPACE 1
         LH    R2,COMJRMT          GET REMOTE NO.
         BCTR  R2,0                   MINUS 1
         MH    R2,=AL2(RATTLE)     COMPUTE RAT
         AL    R2,$RATABLE            OFFSET
         USING RAT,R2                                              J215
         SPACE 1
         BXLE  R5,R6,CTORSEL       EXAMINE IF MORE OPERANDS
CTORSET  NI    RATCONF,255-RATCONFT-RATCONFJ  RESET OPTIONS
         OC    RATCONF,COMNULOP    SET SELECTIONS
        $CRET  MSG=OK              RETURN WITH 'OK' MESSAGE
         SPACE 1
CTORSEL  L     R1,0(0,R5)          POINT TO OPERAND
         CLC   0(2,R1),=C'D='      CHECK FOR D=
         BNE   CTINVO              ERROR IN OPERAND
         CLI   2(R1),C'M'          IS IT AN 'M' REQUEST?
         BNE   CTTSTJ              / IF NOT
         B     CTORSET             GO SET FLAG FOR MSG TEXT ONLY.
         SPACE 1
CTTSTJ   CLI   2(R1),C'J'          IS IT A 'J' REQUEST?
         BNE   CTTSTT              / IF NOT
         OI    COMNULOP,RATCONFJ   GO SET TO DISPLAY JOB, TEXT FLAG
         B     CTORSET             SET FLAG
         SPACE 1
CTTSTT   CLI   2(R1),C'T'          DISPLAY = T REQUEST?
         BNE   CTINVS              / IF NOT - ERROR IN SELECT
         OI    COMNULOP,RATCONFT   GO SET TO DISPLAY JOB, TEXT FLAG
         B     CTORSET             SET FLAG
         EJECT
CTINVO  $CRET  MSG='INVALID OPERAND'
         SPACE 1
CTINVS  $CRET  MSG='INVALID DISPLAY SELECTION'
         TITLE 'PURGE GOSH DARNIT COMMAND'
HASPXJ   $COMGRUP XJ
CXJ      DS    0H
CXS      DS    0H
CXT      DS    0H
        $CFCVB POINTER=(R5),NOK=X005RC08
         LR    R1,R0               JOB NUMBER
        $QSUSE ,                  MAKE SURE NO CKPT IN PROGRESS JOR0585
        $QLOC  (R1),X005RC08       FIND JQE
         USING JQE,R1         JQE ADDRESSABILITY                   J215
         BXH   R5,R6,X005RC08      EXIT IF NOT AT LEAST 2 OPERANDS
         L     R2,0(R5)            ADDRESS OF PASSWORD
         CLC   =C'SCPX',0(R2)      EXIT IF PASSWORD
         BNE   X005RC08             NOT MATCHED
         XC    JQEHLDCT,JQEHLDCT   ZERO HELD COUNT                 @133
         NI    JQEFLAG3,FF-JQE3UNSP  TURN OFF UPSPUN FLAG          J215
         NI    JQEFLAG1,FF-JQE1HLDA-JQE1HLD1-JQE1HLD2  RESET HOLD  J215
         SPACE 1                                                   @133
        $#CAN  JQE=(R1)            CANCEL ALL JOBS OUTPUT          @133
         SPACE 1                                                   @133
         LA    R0,$PURGE           QUEUE JOB FOR PURGE             @133
        $QMOD  (R1),(R0)           PUT JOB ON PURGE QUEUE          @133
         SPACE 1                                                   @133
        $CRET  MSG=OK              RETURN WITH "OK"
         DROP  R1
         TITLE 'HASP COMMAND PROCESSOR HASPPS -- DRAIN SYSTEM' RGPNOV82
***********************************************************************
*                                                                     *
*        IGNORE '$P ' COMMAND TO DRAIN SYSTEM.  DRAIN SYSTEM          *
*                                                                     *
*        ONLY WHEN '$P SYS' COMMAND IS RECEIVED.                      *
*                                                                     *
***********************************************************************
HASPPS   $COMGRUP P,PSYS                                       RGPNOV82
         SPACE 2                                               RGPNOV82
CP40     DS    0H                                              RGPNOV82
***      MVC   CP40CHAR(1),$CCOMCHR INSERT COMM CHAR IN MSG    RGPNOV82
***      $CRET MSG=CP40MSG,L=L'CP40MSG,MSGID=949               RGPNOV82
         MVC   COMMAND+L'CP40MSG(L'CP40MSG),CP40MSG TO WK AREA  JOR0585
         MVC   COMMAND+L'CP40MSG+(CP40CHAR-CP40MSG)(1),$CCOMCHR       "
         $CRET MSG=COMMAND+L'CP40MSG,L=L'CP40MSG,MSGID=949      JOR0585
         SPACE 1                                               RGPNOV82
CP40MSG  DS    0CL50                                           RGPNOV82
         DC    CL27'COMMAND REJECTED -- ISSUE '''              RGPNOV82
CP40CHAR DC    CL23'$P SYS'' TO DRAIN SYSTEM'                  RGPNOV82
         SPACE 1                                               RGPNOV82
CPSYS    DS    0H                                              RGPNOV82
         CLC   =C'PSYS',COMVERB  IS THIS $P SYS                RGPNOV82
         BNE   X005RC00          BR IF NOT                     RGPNOV82
         SPACE 1                                               RGPNOV82
         OI    $STATUS,$DRAINED  RESET DRAIN FLAGS             RGPNOV82
CPSYSDRN $CRET MSG='SYSTEM DRAINING',MSGID=623   TELL OPERATOR RGPNOV82
         TITLE 'HASP COMMAND PROCESSOR HASPSJ -- SELECT JOB'
***********************************************************************
*                                                                     *
*        $SJXXXX ALLOWS OPERATOR TO SPECIFY THE JOB                   *
*        WHICH HE WISHES TO SELECT NEXT.                              *
*                                                                     *
***********************************************************************
HASPSJ   $COMGRUP SG
         SPACE 2
         USING JQE,R1         JQE ADDRESSABILITY                   J215
         SPACE 1
CSJ      DS    0H
        $CFCVB POINTER=(R5),NOK=CSJINVO
        $QLOC  (R0),CSJINVO        ATTEMPT TO LOCATE JOB
         MVC   COMMAND(04),=C'JOB '
        $CFCVE (R0)                JOB NUMBER TO EBCDIC
         MVC   COMMAND+4(4),COMDWORK+1 TO MESSAGE
         TM    JQEFLAG1,JQE1BUSY   DO NOT ACCEPT IF                J215
         BNZ   CSJBUSY              JOB IS ALREADY BUSY
         TM    JQEFLAG3,JQE3JOB    DO NOT ACCEPT IF                J215
         BNZ   CSJNOTJ              JOB IS NOT BATCH JOB
         TM    JQETYPE,$XEQ        DO NOT ACCEPT
         BNO   CSJNOTXQ             JOB IF IT IS
         CLI   JQETYPE,$XEQ          NOT READY
         BE    CSJNOTXQ               TO EXECUTE
        $POST  $HASPECF,JOB        WAKE UP INITIATORS
*        STH   R0,$NEXTJQE         REMEMBER JOB NUMBER
         MVC   COMMAND+8(22),=C' WILL BE SELECTED NEXT'
        $CRET  L=30
         SPACE 2
CSJINVO  L     R1,0(R5)            ADDRESS OF INVALID OPERAND
         MVC   COMMAND(9),0(R1)    INVALID OPERAND
         MVC   COMMAND(16),=C' INVALID OPERAND'
        $CRET  L=25
         SPACE 2
CSJBUSY  MVC   COMMAND+8(29),=C' REJECTED BECAUSE JOB IS BUSY'
        $CRET  L=37
         SPACE 2
CSJNOTJ  MVC   COMMAND+8(33),=C' REJECTED BECAUSE IT IS NOT A JOB'
        $CRET  L=41
         SPACE 2
CSJNOTXQ MVC   COMMAND+8(44),=C' REJECTED BECAUSE IT IS NOT READY TO EX*
               ECUTE'
        $CRET  L=52
         LTORG                                                  JOR8611
         TITLE 'SPAC $D/$T DESTID COMMAND'
***********************************************************************
*
* THIS SECTION PROCESS $D/$T DESTID COMMAND TO DISPALY OR ALTER DESTID
*   DEFINITIONS SET FROM JESPARM. ANY DESTID CAN BE DISPLAYED BY NAME.
*   ONLY DESTIDS DEFINED IN THE RDT CAN BE DISPLAYED BY DEST OR
*   REPLACED. ANY DESTID ADDED WILL RESULT IN A NEW ENTRY IN A NEWLY
*   GETMAINED RDT HOOKED INTO THE SVT WITH OLD RDT FREEMAINED.
*
* COMMAND FORMAT:
*
*   $D DESTID,N(AME)=XXX
*      FUNCTION: DISPLAY CURRENT DEST BY NAME XXX
*   $D DESTID,D(EST)=N#R#
*      FUNCTION: DISPLAY ALL CURRENT NAMES EQUIVALENT TO DEST N#R#
*   $T DESTID,N(AME)=XXX,D(EST)=N#R#,REP(LACE)
*      CHANGE CURRENT NAME XXX TO POINT TO DEST N#R#
*   $T DESTID,N(AME)=XXX,D(EST)=N#R#,ADD
*      ADD NEW NAME XXX TO POINT TO DEST N#R#
*
* MSGS: (ALL HAVE MSGID 900)
*
* INFORMATIONAL MSGS:
*   DISPLAY OR SET RESULTS
*
* ERROR MSGS:
*   INVALID SYNTAX
*   INVALID KEYWORD
*   INVALID OR MISSING NAME OR DEST PARAMETER
*   MISSING OR CONFLICTING ADD/REPLACE PARAMETERS
*   UNABLE TO GET SP241 STORAGE FOR NEW RDT (ADD ONLY)
*   UNABLE TO ADD AS REQUESTED, ALREADY DEFINED
*   UNABLE TO REPLACE AS REQUESTED, NAME NOT CURRENTLY IN RDT
*
* WRITTEN 11/86 BY J. O. SKIP ROBINSON, SPAC/MVS SERVICES
*   SOME CODE ADAPTED FROM IBM DESTID PARM PROCESSING LOGIC
*
***********************************************************************
         SPACE 1
SPDESTID $COMGRUP DDESTID,TDESTID,DELAY=NO
         SPACE 1
CDDESTID EQU   *                   EP FOR $DDESTID
CTDESTID EQU   *                   EP FOR $TDESTID
         SPACE 1
NDQBAR   EQU   R4                  BASE REG FOR WORK NDQ
         USING NDQ,NDQBAR          ENABLE NDQ DSECT
RDTBAR   EQU   R5                  BASE REG FOR WORK RDT
* NOTE: RDTBAR MUST NOT BE USED FOR OTHER THAN $GETWORK POINTER!
         USING RDT,RDTBAR          ENABLE RDT DSECT
SVTBAR   EQU   R6                  BASE REG FOR SVT
         USING SVT,SVTBAR          ENABLE SVT DSECT
         L     SVTBAR,$SVT         GET SVT ADDRESS
NEWRDTP  EQU   R7                  PTR TO NEW RDT (ADD ONLY)
         SPACE 1
         SLR   RDTBAR,RDTBAR       ZERO RDT WORK AREA PTR
         $GETWORK WORDS=NDQSIZ/4+1,USE=UNDQ GET NDQ WORK AREA
         SPACE 1
         LR    NDQBAR,R1           COPY WORK NDQ PTR
         ST    NDQBAR,PCEUSER0     SET PTR FOR $SCAN
         $SCAN SCAN=SET,           SCAN OPER CMD                       *
               TABLES=DESTIDTP,    PT TO TBL PAIR                      *
               PARM=COMMAND+9,     START AT FIRST OPND                 *
               PARMLEN=132         SET SUFFICIENT LENGTH
         SPACE 1
         B     PDESTBRT(R15)       PROC PER SCAN RESULTS
PDESTBRT EQU   *                   BR TBL PER SCAN RESULTS
         B     PDESTSOK            SCAN OK (0)
         B     PDESTSOK            OBSOLETE KEYWORD (4)
         B     PDESTERK            KEYWORD ERROR (8)
         B     PDESTERS            SYNTAX ERROR (12)
         EJECT
PDESTSOK EQU   *                   $SCAN WAS OK
         CLI   NDQDEST,0           DEST SPECIFIED ...
         BNH   PDESTPRC             NO, BYPASS NODE/RMT
         CLC   NDQDEST,=CL10'LOCAL'  LOCAL SPECIFIED ...
         BE    PDESTPRC             YES, GO PROCESS
         CLI   NDQDEST,C'U'        UNIT SPECIFICATION ...
         BE    PDESTD               YES, GO PROCESS
         CLI   NDQDEST,C'R'        REMOTE SPECIFICATION ...
         BE    PDESTD               YES, GO PROCESS
         CLI   NDQDEST,C'N'        NODE SPECIFICATION ...
         BNE   PDESTERD             NO, ERROR
         SPACE 1
PDESTD   CLI   NDQDEST+1,C'0'      SECOND CHARACTER NUMERIC ...
         BL    PDESTERD             NO, ERROR
         LA    R1,NDQDEST+2        PREPARE FOR NEXT TESTS
         BAL   R14,PDESTCK         CHECK FOR NUMERICS
         SPACE 1
         CLI   0(R1),C' '          CHECK FOR END OF DESTINATION,
         BE    PDESTPRC             YES, VALID, GO PROCESS NDQ
         CLI   0(R1),C'R'          NEW FIELD POSSIBLE PART OF RMT ...
         BNE   PDESTERD             NO, ERROR
         CLI   NDQDEST,C'N'        NEW FIELD PART OF RMT FOR NODE ...
         BNE   PDESTERD             NO, ERROR
         SPACE 1
         CLI   1(R1),C'0'          ANY NUMERICS FOLLOWING NXXXXR ...
         BL    PDESTERD             NO, ERROR
         LA    R1,2(,R1)           POINT TO NUMERICS FOR RMT
         BAL   R14,PDESTCK         VALIDATE REMOTE PORTION
         LTR   R0,R0               ALL NUMERICS FOUND ...
         BZ    PDESTPRC             YES, VALID, GO PROCESS
         CLI   0(R1),C' '          PROPER ENDING FOUND ...
         BNE   PDESTERD             NO, ERROR
         BE    PDESTPRC            Y: CONTINUE
         SPACE 3
PDESTCK  LA    R0,3                PREPARE TO TEST FOR NUMERICS
PDESTDL  CLI   0(R1),C'0'          CHECK FOR PART OF NUMBER
         BLR   R14                  TERMINATOR, RETURN FOR CHECKS
         LA    R1,1(,R1)           BUMP POINTER WITHIN NDQDEST
         BCT   R0,PDESTDL          LOOP BACK FOR NEXT CHARACTER,
         BR    R14                   RETURN IF FOUND THREE NUMERICS
         EJECT
PDESTPRC EQU   *
         CLI   COMVERB,C'T'        IS THIS A SET?
         BE    PDESTSET            Y: CONTINUE
         SPACE 3
PDESTDSP EQU   *                   DISPLAY DESTID INFO
         CLI   NDQNAME,0           NAME SPECIFIED?
         BH    PDESTDNR            Y: ATTEMPT TO DISPLAY DEST
         SPACE 3
PDESTDNM EQU   *                   DISPLAY NAME(S) GIVEN DEST
         BAL   R14,PDESTRDT        GO BUILD WORK RDT
         SPACE 1
PDESTLDS EQU   *                   LOC ALL MATCHING DEST
         L     R7,SVTRDT           POINT TO START OF RDT
         MVC   COMMAND(L'PDESTM2),PDESTM2 MSG TO WORK AREA
         MVC   COMMAND+PDESTM2D(L'NDQDEST),NDQDEST OPER DEST TO MSG
         LA    R3,COMMAND+PDESTM2N PT TO FIRST NAME SLOT
         LA    R2,PDESTM2#         GET COUNT OF MSG NAME SLOTS
         MVI   PCEUSER0,L'PDESTM5  INIT NO-FOUND MSG LENGTH
PDESTLDL EQU   *                   LOOP THRU RDT
         C     R7,SVTRDTE          END OF RDT?
         BH    PDESTLD4            Y: ALL DONE
* COMPARE WORK RDT TO RDT ENTRY, INCL NODE, RMT, AND FLAGS
         CLC   RDTROUTE(RDTSIZ-(RDTROUTE-RDT)),RDTROUTE-RDT(R7)
         BNE   PDESTLD2            NOT OUR GUY
         MVC   0(L'RDTNAME,R3),RDTNAME-RDT(R7) NAME TO MSG
         MVI   PCEUSER0,0          ZERO NO-FOUND MSG LENGTH
         LA    R3,L'PDESTM2N(,R3)  PT TO NEXT NAME SLOT
         BCT   R2,PDESTLD2         NEXT RDT IF MSG NOT FULL
         $CWTO L=L'PDESTM2,MSGID=900 ONE MSG TO OPER
         SPACE 1
         MVC   COMMAND(L'PDESTM2),PDESTM2 MSG TO WORK AREA
         MVC   COMMAND+PDESTM2D(L'NDQDEST),NDQDEST OPER DEST TO MSG
         LA    R3,COMMAND+PDESTM2N PT TO FIRST NAME SLOT
         LA    R2,PDESTM2#         GET COUNT OF MSG NAME SLOTS
PDESTLD2 LA    R7,RDTSIZ(,R7)      PT TO NEXT RDT
         B     PDESTLDL            TRY NEXT RDT
PDESTLD4 CH    R2,=Y(PDESTM2#)     ANOTHER MSG TO SEND?
         BNL   PDESTLD6            N: CONTINUE
         LA    R0,L'PDESTM2        SET MSG LENGTH
         B     PDESTXIT            ISSUE LAST MSG AND CLEAN UP
PDESTLD6 SLR   R0,R0               CLEAR MSG LENGTH
         ICM   R0,B'0001',PCEUSER0 ANY MSG ISSUED?
         BZ    PDESTXIT            Y: GO CLEAN UP
         MVC   COMMAND(L'PDESTM5),PDESTM5 MSG TO WORK AREA
         MVC   COMMAND+PDESTM5D(L'NDQDEST),NDQDEST OPER DEST TO MSG
         B     PDESTXIT            ISSUE MSG AND CLEAN UP
         EJECT
PDESTDNR EQU   *                   DISPLAY DEST GIVEN NAME
         $DEST NDQNAME,$OWNNODE,LEN=L'NDQNAME,ERR=PDESTERN GET NODE/RMT
         SPACE 1
         ST    R1,PCEUSER0         SAVE NODE/RMT
         MVC   COMMAND(L'PDESTM1),PDESTM1 MSG TO WORK AREA
         MVC   COMMAND+PDESTM1N(L'NDQNAME),NDQNAME NAME TO MSG
         LA    R0,COMMAND+PDESTM1D INDICATE
         ST    R0,PCEUSER1            DISPLAY START
         L     R0,PCEUSER0         GET NODE/RMT
         SRL   R0,16               NODE TO BOTTOM OF REG
         LTR   R0,R0               ANY NODE NUMBER?             SCHUDEL
         BZ    PDESTDNU            NO, IS "U" FORMAT            SCHUDEL
         MVC   COMBWORK,=C'N'      INDICATE 'NODE'
         BAL   R14,PDESTEDT        GO EDIT NODE INTO MSG
         L     R0,PCEUSER0         GET NODE/RMT
         ICM   R0,B'1100',$ZEROES  ZERO NODE NUM
         MVC   COMBWORK,=C'R'      INDICATE 'RMT'
         BAL   R14,PDESTEDT        GO EDIT RMT INTO MSG
         LA    R0,L'PDESTM1        SET MSG LENGTH
         B     PDESTXIT            ISSUE MSG AND CLEAN UP
         SPACE 1                                                SCHUDEL
PDESTDNU L     R0,PCEUSER0         GET NODE/RMT                 SCHUDEL
         ICM   R0,B'1100',$ZEROES  ZERO NODE NUM                SCHUDEL
         MVC   COMBWORK,=C'U'      INDICATE SPECIAL LOCAL       SCHUDEL
         BAL   R14,PDESTEDT        GO EDIT NUM INTO MSG         SCHUDEL
         LA    R0,L'PDESTM1        SET MSG LENGTH               SCHUDEL
         B     PDESTXIT            ISSUE MSG AND CLEAN UP       SCHUDEL
         EJECT
PDESTSET EQU   *                   ADD OR REPLACE DESTID
         CLI   NDQNAME,0           NAME SPECIFIED?
         BNH   PDESTERN            N: ERR
         CLI   NDQDEST,0           DEST SPECIFIED?
         BNH   PDESTERD            N: ERROR
         TM    NDQCOMFL,NDQCFADD+NDQCFREP CHECK ADD/REP KWDS
         BZ    PDESTERM            ERR: NEITHER SPECIFIED
         BO    PDESTERC            ERR: BOTH SPECIFIED
         $DEST NDQNAME,$OWNNODE,LEN=L'NDQNAME,ERR=PDESTST2 GET NODE/RMT
         SPACE 1
* FALL THRU: NAME CURRENTLY DEFINED TO JES
         TM    NDQCOMFL,NDQCFREP   OPER WANTS REPLACE?
         BO    PDESTST4            Y: CONTINUE
         BNO   PDESTERA            N: ERR, CAN'T ADD
* COME HERE IF NAME NOT CURRENTLY DEFINED TO JES
PDESTST2 TM    NDQCOMFL,NDQCFADD   OPER WANTS ADD?
         BNO   PDESTERP            N: ERR, CAN'T REPLACE
PDESTST4 EQU   *
         BAL   R14,PDESTRDT        GO BUILD WORK RDT
         SPACE 1
PDESTLNM EQU   *                   LOC NAME IN RDT
         L     R1,SVTRDT           POINT TO START OF RDT
PDESTLNL EQU   *                   LOOP THRU RDT
         C     R1,SVTRDTE          END OF RDT?
         BH    PDESTLNX            Y: ALL DONE
         CLC   RDTNAME,RDTNAME-RDT(R1) WORK RDT VS. TBL ENTRY
         BNH   PDESTLNX            EQUAL OR LOWER, ALL DONE
         LA    R1,RDTSIZ(,R1)      PT TO NEXT RDT
         B     PDESTLNL            TRY NEXT RDT
PDESTLNX EQU   *
         SPACE 1
         TM    NDQCOMFL,NDQCFREP   IS THIS REPLACE?
         BO    PDESTREP            Y: GO REPLACE NAME
         EJECT
PDESTADD EQU   *                   ADD NAME TO RDT
         LR    R2,R1               COPY ENTRY INSERT LOC PTR
         L     R3,SVTRDTE          PT TO LAST RDT ENTRY
         LA    R3,RDTSIZ*2+8(,R3)  INCR FOR LAST/NEW RDT, HDR
         SL    R3,SVTRDT           CALC NEW RDT SIZE
         $GETMAIN C,LV=(R3),SP=241,LOC=BELOW GET NEW RDT
         SPACE 1
         LTR   R15,R15             GETMAIN OK?
         BNZ   PDESTERG            N: CAN'T CONTINUE
         LR    NEWRDTP,R1          COPY NEW RDT PTR
         MVC   0(4,NEWRDTP),=CL4'RDT' SET EYE CATCHER
         ST    R3,4(,NEWRDTP)      SAVE RDT LENGTH
         MVI   4(NEWRDTP),241        AND SUBPOOL
         SPACE 1
         LA    R14,8(,NEWRDTP)     PT TO NEW RDT 1ST ENTRY
         L     R0,SVTRDT           PT TO OLD RDT 1ST ENTRY
         LR    R1,R2               COPY INSERT LOC PTR
         SL    R1,SVTRDT           CALC SRC LENGTH TO MOVE
         LR    R15,R1              TGT LENGTH SAME
         MVCL  R14,R0              COPY RDT UP TO INSERT
         MVC   0(RDTSIZ,R14),RDT   INSERT NEW RDT ENTRY
         LA    R14,RDTSIZ(,R14)    PT TO NEXT TGT LOC
         L     R1,SVTRDTE          PT TO OLD RDT LAST ENTRY
         LA    R1,RDTSIZ(,R1)      PT TO OLD RDT END
         SLR   R1,R0               CALC SRC LENGTH LEFT TO MOVE
         LR    R15,R1              TGT LENGTH SAME
         MVCL  R14,R0              COPY REST OF OLD RDT
         SPACE 1
         LA    R2,8(,NEWRDTP)      PT TO NEW RDT 1ST ENTRY
         SLR   R3,R3               GET NEW RDT
         ICM   R3,B'0111',4+1(NEWRDTP) STORAGE LENGTH
         SH    R3,=Y(RDTSIZ+8)     LESS HDR AND LAST ENTRY LENGTH
         ALR   R3,R2               PT TO NEW RDT LAST ENTRY
         SPACE 1
         L     R1,SVTRDT           PT TO OLD RDT
         SL    R1,$F8              BACK TO EYE CATCHER
         L     R0,4(,R1)           GET LENGTH AND SUBPOOL
         STM   R2,R3,SVTRDT        NEW RDT START/END INTO SVT
         $FREMAIN R,LV=(R0),A=(R1) FREE OLD RDT
         SPACE 1
         MVC   COMMAND(L'PDESTM4),PDESTM4 MSG TO WORK AREA
         MVC   COMMAND+PDESTM4N(L'NDQNAME),NDQNAME NAME TO MSG
         MVC   COMMAND+PDESTM4D(L'NDQDEST),NDQDEST DEST TO MSG
         LA    R0,L'PDESTM4        SET MSG LENGTH
         B     PDESTXIT            ISSUE MSG AND CLEAN UP
         EJECT
PDESTREP EQU   *                   REPLACE NAME IN RDT
         CLC   RDTNAME,RDTNAME-RDT(R1) NAME NOW IN RDT?
         BNE   PDESTERP            ERR: CAN ONLY REPL RDT ENTRY
         MVC   0(RDTSIZ,R1),RDT    REPLACE RDT ENTRY
         MVC   COMMAND(L'PDESTM3),PDESTM3 MSG TO WORK AREA
         MVC   COMMAND+PDESTM3N(L'NDQNAME),NDQNAME NAME TO MSG
         MVC   COMMAND+PDESTM3D(L'NDQDEST),NDQDEST DEST TO MSG
         LA    R0,L'PDESTM3        SET MSG LENGTH
         B     PDESTXIT            ISSUE MSG AND CLEAN UP
         EJECT
PDESTEDT EQU   *                   EDIT NODE/RMT INTO MSG
         LTR   R0,R0               ANYTHING TO DISPLAY?
         BZR   R14                 N: BYE BYE
         ST    R14,COMWREGS        SAVE LINK REG
         CVD   R0,COMDWORK         NODE TO DECIMAL
         MVC   COMRWORK(L'PDESTEDP),PDESTEDP ED PAT TO WORK
         LA    R1,COMRWORK+L'PDESTEDP-1 PRIME SIGNIFCANCE PTR
         LR    R15,R1              COPY SIGNIFICANCE PTR
         EDMK  COMRWORK(L'PDESTEDP),COMDWORK+5 EDIT VALUE
         SLR   R15,R1              CALC MACH LEN TO MOVE
         L     R14,PCEUSER1        GET DEST PTR
         EX    R15,PDESTMOV        EDITED VALUE TO DEST
         MVC   0(1,R14),COMBWORK   EYEBALL TO MSG
         LA    R0,1+1(R15,R14)     CALC NEXT DEST LOC
         ST    R0,PCEUSER1         UPDATE DEST PTR
         L     R14,COMWREGS        RESTORE LINK REG
         BR    R14                 RETURN TO CALLER
         SPACE 2
PDESTMOV MVC   1(*-*,R14),0(R1)    <<EX'D>> NODE/RMT TO MSG
         EJECT
PDESTRDT EQU   *                   BUILD WORK RDT FROM WORK NDQ
         ST    R14,COMWREGS        SAVE LINK REG
         $GETWORK WORDS=RDTSIZ/4+1,USE=URDT GET RDT WORK AREA
         SPACE 1
         LR    RDTBAR,R1           COPY WORK AREA PTR
         $DEST NDQDEST,$OWNNODE,LEN=L'NDQDEST,ERR=PDESTERD
         SPACE 1
         XC    RDT(RDTSIZ),RDT     CLEAR WORK RDT
         MVC   RDTNAME,NDQNAME     OPER NAME TO WORK RDT
         MVC   RDTNODE,$ZEROES     ZERO NODE NUMBER
         CLI   NDQDEST,C'N'        TEST FOR USER-SET NODE NUMBER
         BE    PDESTSND             NO - BRANCH
         CLC   NDQDEST,=CL8'LOCAL'  TEST FOR LOCAL ROUTING
         BE    PDESTSND            YES - BRANCH
         CLC   NDQDEST,=CL8'R0'    TEST FOR R0 (LOCAL) ROUTING
         BNE   PDESTSRM            NO - SKIP NODE SET
PDESTSND STCM  R1,B'1100',RDTNODE  SET NODE IN RDT
         MVI   RDTFLAG,RDTFLAGN    SET TO LOAD NODE
         SPACE 1
PDESTSRM STH   R1,RDTRMTNO         SET REMOTE/UNIT NUMBER
         CLI   NDQDEST,C'U'        TEST FOR USER-SET UNIT NUMBER
         BNE   PDESTCKR             NO - BRANCH
         MVI   RDTFLAG,RDTFLAGU     YES - FLAG UNIT SPECIFICATION
         B     PDESTRDX            CONTINUE
         SPACE 1
PDESTCKR CLC   RDTRMTNO,$ZEROES    TEST FOR REMOTE
         BE    PDESTRDX            BR IF NO
         OI    RDTFLAG,RDTFLAGR    SET TO LOAD REMOTE NUMBER
         SPACE 3
PDESTRDX EQU   *                   WORK RDT LOOKS OK
         L     R14,COMWREGS        RESTORE LINK REG
         BR    R14                 RETURN TO CALLER
         EJECT
PDESTERK EQU   *                   INVALID KEYWORD
         MVC   COMMAND(L'PDESTMKE),PDESTMKE MSG TO 'COMMAND'
         LA    R0,L'PDESTMKE       SET MSG LENGTH
         B     PDESTXIT            ISSUE MSG AND CLEAN UP
         SPACE 1
PDESTERS EQU   *                   INVALID SYNTAX
         MVC   COMMAND(L'PDESTMSE),PDESTMSE MSG TO 'COMMAND'
         LA    R0,L'PDESTMSE       SET MSG LENGTH
         B     PDESTXIT            ISSUE MSG AND CLEAN UP
         SPACE 1
PDESTERG EQU   *                   ERR: NO SP 241 STORAGE
         MVC   COMMAND(L'PDESTMGE),PDESTMGE MSG TO 'COMMAND'
         LA    R0,L'PDESTMGE       SET MSG LENGTH
         B     PDESTXIT            CONTINUE
         SPACE 1
PDESTERN EQU   *                   MISSING OR INV NAME
         MVC   COMMAND(L'PDESTMNE),PDESTMNE MSG TO 'COMMAND'
         LA    R0,L'PDESTMNE       SET MSG LENGTH
         B     PDESTXIT            ISSUE MSG AND CLEAN UP
         SPACE 1
PDESTERD EQU   *                   MISSING OR INV DEST
         MVC   COMMAND(L'PDESTMDE),PDESTMDE MSG TO 'COMMAND'
         LA    R0,L'PDESTMDE       SET MSG LENGTH
         B     PDESTXIT            ISSUE MSG AND CLEAN UP
         SPACE 1
PDESTERM EQU   *                   ADD/REPL MISSING
         MVC   COMMAND(L'PDESTMME),PDESTMME MSG TO 'COMMAND'
         LA    R0,L'PDESTMME       SET MSG LENGTH
         B     PDESTXIT            ISSUE MSG AND CLEAN UP
         SPACE 1
PDESTERC EQU   *                   CONFLICTING ADD/REPL
         MVC   COMMAND(L'PDESTMCE),PDESTMCE MSG TO 'COMMAND'
         LA    R0,L'PDESTMCE       SET MSG LENGTH
         B     PDESTXIT            ISSUE MSG AND CLEAN UP
         SPACE 1
PDESTERA EQU   *                   ERR: NAME ALREADY DEFINED
         MVC   COMMAND(L'PDESTMEA),PDESTMEA MSG TO WORK AREA
         MVC   COMMAND+PDESTEAN(L'NDQNAME),NDQNAME NAME TO MSG
         LA    R0,L'PDESTMEA       SET MSG LENGTH
         B     PDESTXIT            ISSUE MSG AND CLEAN UP
         SPACE 1
PDESTERP EQU   *                   ERR: NAME NOT FOUND IN RDT
         MVC   COMMAND(L'PDESTMEP),PDESTMEP MSG TO WORK AREA
         MVC   COMMAND+PDESTEPN(L'NDQNAME),NDQNAME NAME TO MSG
         LA    R0,L'PDESTMEP       SET MSG LENGTH
         B     PDESTXIT            CONTINUE
         EJECT
PDESTXIT EQU   *                   CLEAN UP, ISSUE MSG, EXIT
         LTR   R0,R0               ANY MSG?
         BZ    PDESTXT2            N: BYPASS WTO
         $CWTO L=(R0),MSGID=900    MSG TO OPER
         SPACE 1
PDESTXT2 LTR   RDTBAR,RDTBAR       ANY RDT WORK AREA?
         BZ    PDESTXT4            N: BYPASS RETURN WROK AREA
         $RETWORK (RDTBAR)         RETURN RDT WORK AREA
         SPACE 1
PDESTXT4 $RETWORK (NDQBAR)         RETURN NDQ WORK AREA
         SPACE 1
PDESTRET B     X005RC08            EXIT WITH NO MSG
         EJECT
         LTORG
         SPACE 3
DESTIDTP DC    A(DESTIDTB),A(0)    SCAN TBL PAIR
PDESTEDP DC    X'402020202120'     NODE/RMT EDIT PATTERN
         SPACE 1
PDESTM1  DC    C'NAME=X        DEST=X         '
PDESTM1N EQU   05,L'NDQNAME        FOR INSERTING NAME
PDESTM1D EQU   19,L'NDQDEST        FOR INSERTING DEST
         SPACE 1
PDESTM2# EQU   5                   COUNT OF NAMES PER LINE
PDESTM2  DC    CL(21+9*PDESTM2#-1)'DEST=X          NAME=X'
PDESTM2D EQU   05,L'NDQDEST        FOR INSERTING DEST
PDESTM2N EQU   21,L'NDQNAME+1      FOR INSERTING FIRST NAME
         SPACE 1
PDESTM3  DC    C'RDT REPLACED, NAME=X        DEST=X         '
PDESTM3N EQU   19,L'NDQNAME
PDESTM3D EQU   33,L'NDQDEST
         SPACE 1
PDESTM4  DC    C'RDT ADDED, NAME=X        DEST=X         '
PDESTM4N EQU   16,L'NDQNAME
PDESTM4D EQU   30,L'NDQDEST
         SPACE 1
PDESTM5  DC    C'X          HAS NO MATCHING RDT ENTRIES'
PDESTM5D EQU   00,L'NDQDEST
         SPACE 1
PDESTMEA DC    C'X        NOT ADDED: ALREADY DEFINED'
PDESTEAN EQU   00,L'NDQNAME        FOR INSERTING NAME
         SPACE 1
PDESTMEP DC    C'X        NOT REPLACED: NOT FOUND IN RDT'
PDESTEPN EQU   00,L'NDQNAME        FOR INSERTING NAME
         SPACE 1
PDESTMKE DC    C'DESTID: INVALID KEYWORD SPECIFIED'
PDESTMSE DC    C'DESTID: INVALID COMMAND SYNTAX'
PDESTMNE DC    C'DESTID: INVALID OR MISSING NAME= PARAMETER'
PDESTMDE DC    C'DESTID: INVALID OR MISSING DEST= PARAMETER'
PDESTMGE DC    C'DESTID: UNABLE TO OBTAIN SP 241 FOR NEW RDT'
PDESTMME DC    C'DESTID: MISSING ADD OR REPLACE PARAMETER'
PDESTMCE DC    C'DESTID: CONFLICTING ADD/REPLACE PARAMETERS'
         EJECT
DESTIDTB $SCANTAB TABLE=(USER,NOENTRY)
         $SCANTAB NAME=DEST,MINLEN=1,                                  *
               CB=PCE,                                                 *
               CBIND=(PCEUSER0,PCE,L),                                 *
               CONV=CHARAN,                                            *
               RANGE=(1,L'NDQDEST),                                    *
               DSECT=NDQ,                                              *
               FIELD=NDQDEST
         $SCANTAB NAME=NAME,MINLEN=1,                                  *
               CB=PCE,                                                 *
               CBIND=(PCEUSER0,PCE,L),                                 *
               CONV=CHARJANS,                                          *
               RANGE=(1,L'NDQNAME),                                    *
               DSECT=NDQ,                                              *
               FIELD=NDQNAME
         $SCANTAB NAME=REPLACE,MINLEN=3,                               *
               CB=PCE,                                                 *
               CBIND=(PCEUSER0,PCE,L),                                 *
               CONV=FLAG,VALUE=(,NDQCFREP,FF),                         *
               DSECT=NDQ,                                              *
               FIELD=NDQCOMFL
         $SCANTAB NAME=ADD,                                            *
               CB=PCE,                                                 *
               CBIND=(PCEUSER0,PCE,L),                                 *
               CONV=FLAG,VALUE=(,NDQCFADD,FF),                         *
               DSECT=NDQ,                                              *
               FIELD=NDQCOMFL
         $SCANTAB TABLE=END
         SPACE 3
NDQ      DSECT                     DEF OUR FIELD IN WORK NDQ
NDQCOMFL EQU   NDQ+NDQSIZ-1        NDQ COM FLAG
NDQCFADD EQU   B'10000000'         'ADD' SPECIFIED
NDQCFREP EQU   B'01000000'         'REPLACE' SPECIFIED
         SPACE 3
JESEX005 CSECT                     RESUME CSECT
         SPACE 2
         DROP  NDQBAR,RDTBAR,SVTBAR
        TITLE 'MELLON EXIT005 COMMAND PROCESSOR RECOVERY ROUTINE' XX005
***************************************************************** XX005
*                                                               * XX005
*        XCOMRCVR - PROCESSOR RECOVERY ROUNTINE                 * XX005
*                                                               * XX005
*        THIS ROUNTINE WILL RECOVER FROM PROGRAM                * XX005
*        CHECKS BY DISCARDING THE COMMAND CURRRENTLY            * XX005
*        BEING PROCESSED AND THEN RETURN TO 'X005RC08'          * XX005
*        WHERE IT WILL RETURN TO JES2 WITH A CODE 8             * XX005
*        WHICH WILL CAUSE JES2 TO IGNORE THE COMMAND            * XX005
*                                                               * XX005
*        REGISTERS UPON ENTRY -                                 * XX005
*                                                               * XX005
*            R0 - SAME AS AT ABEND                              * XX005
*            R1 - POINTER TO ERA                                * XX005
*      R2 - R10 - SAME AS AT ABEND                              * XX005
*           R11 - POINTER TO HCT                                * XX005
*           R13 - POINTER TO PCE                                * XX005
*           R14 - RETURN ADDRESS                                * XX005
*           R15 - ENTRY ADDRESS                                 * XX005
*                                                               * XX005
***************************************************************** XX005
         SPACE 1                                                  XX005
XCOMRCVR $SAVE                     SAVE CALLERS REGISTERS         XX005
         SPACE 1                                                  XX005
         LR    R8,R15              GET ADDRESS OF RECOVERY RTN    XX005
         USING XCOMRCVR,R8         SET ADDRESSABILITY FOR RTN     XX005
         SPACE 1                                                  XX005
         LR    R5,R1               GET ADDRESS OF ERA IN R5       XX005
         USING ERA,R5         SET ADDRESSABILITY FOR ERA           J215
         SPACE 1                                                  XX005
         CLC   ERAESRG0,=F'12'     IS THERE A SDWA....            XX005
         BE    CPERC               BRANCH IF NO                   XX005
         SPACE 1                                                  XX005
         L     R3,ERASDWA          GET ADDRESS OF SDWA            XX005
         USING SDWA,R3             SET ADDRESSABILITY FOR SDWA    XX005
         SPACE 1                                                  XX005
         L     R4,ERAPRE           GET ADDRESS OF PRE             XX005
         USING PRE,R4         SET ADDRESSABILITY FOR PRE           J215
         EJECT                                                    XX005
***************************************************************** XX005
*                                                               * XX005
*        TEST FOR PROGRAM CHECK  (SDWAPCHK)                     * XX005
*                                                               * XX005
***************************************************************** XX005
         SPACE 1                                                  XX005
         TM    SDWAERRA,SDWAPCHK   TEST FOR PROGRAM CHECK         XX005
         BZ    CPERC               BRANCH IF NOT A PROGRAM CHECK  XX005
         SPACE 1                                                  XX005
         DROP  R3                  KILL ADDRESSABILITY FOR SDWA   XX005
         SPACE 1                                                  XX005
***************************************************************** XX005
*                                                               * XX005
*        END ANY MULTIPLE LINE WTO IN PROGRESS                  * XX005
*                                                               * XX005
***************************************************************** XX005
         SPACE 1                                                  XX005
         TM    COMFLAG,CMBFLAGU    TEST FOR UCMID .(OWN OR OTHER) XX005
         BZ    CSETMSG             BRANCH IF OTHER                XX005
         SPACE 1                                                  XX005
         CLI   COMUCMA,0           IS THIS A MLWTO...             XX005
         BZ    CSETMSG             BRANCH IF NO                   XX005
         SPACE 1                                                  XX005
         OI    COMLINET,X'10'      SET END LINE                   XX005
         SPACE 1                                                  XX005
         SLR   R0,R0               SET NULL MESSAGE LENGTH        XX005
         BCTR  R0,0              SET LENGTH TO -1 TO TRUNC MLWTO  XX005
         SPACE 1                                                  XX005
        $CWTO  L=(R0)              END ANY MLWTO IN PROGRESS      XX005
         SPACE 1                                                  XX005
         MVI   COMUCMA,X'00'       CLEAR UCM AREA TO INSURE CMD   XX005+
                                     TERMINATED MSG IS NOT MLWTO  XX005
         EJECT                                                    XX005
***************************************************************** XX005
*                                                               * XX005
*        INFORM OPERATOR OF COMMAND THAT WILL BE DISCARDED.     * XX005
*        'NETWORK COMMAND' WILL BE USED FOR SSI FORMATTED       * XX005
*        COMMANDS.                                              * XX005
*                                                               * XX005
***************************************************************** XX005
         SPACE 1                                                  XX005
CSETMSG  MVC   COMMAND(L'CMSGTXT),CMSGTXT   MOVE IN MESSAGE TEXT  XX005
         SPACE 1                                                  XX005
         TM    COMINCON,X'80'     TEST FOR SSI FORMATTED COMMAND  XX005
         BZ    CPREMSG            BRANCH IF NOT SSI FORMATTED CMD XX005
         SPACE 1                                                  XX005
         MVC   COMMAND+L'CMSGTXT(CCMDLN),CNETCMD MOVE IN FORMATED XX005+
                                                     COMMAND TEXT XX005
         B     CMSGTOOP            GO SEND MESSAGE TO OPERATOR    XX005
         SPACE 1                                                  XX005
CPREMSG  MVC   COMMAND+L'CMSGTXT(CCMDLN),PRETRACK MOVE IN PORTION XX005+
                                                      OF COMMAND  XX005
         SPACE 1                                                  XX005
         DROP  R4                  KILL ADDRESSABILITY FOR PRE    XX005
         SPACE 1                                                  XX005
***************************************************************** XX005
*                                                               * XX005
*        SEND COMMAND TERMINATED MESSAGE TO CONSOLE WHERE THE   * XX005
*        COMMAND ORIGINATED AND ALSO TO THE MAIN CONSOLE        * XX005
*                                                               * XX005
***************************************************************** XX005
         SPACE 1                                                  XX005
CMSGTOOP $CWTO L=CMLENGTH,MSGID=691   SEND MESSAGE TO WHERE       XX005+
                                         COMMAND ORIGINATED       XX005
         SPACE 1                                                  XX005
        $WTO   COMMID,CMLENGTH+L'COMMID,JOB=NO,       SEND MSG TO XX005+
               ROUTE=$MAIN+$ERR,CLASS=$ALWAYS,PRI=$HI MASTER CON  XX005
         EJECT                                                    XX005
***************************************************************** XX005
*                                                               * XX005
*      $SETRP                                                   * XX005
*        SET UP OPTIONS (RESUME OR PERCOLATE)                   * XX005
*        AND RETURN TO CALLER.                                  * XX005
*                                                               * XX005
***************************************************************** XX005
         SPACE 1                                                  XX005
         L     R14,=A(X005RC08)    R14 => DELETE COMMAND RETURN   XX005
        $SETRP RESUME=(R14)        SET RESUMPTION ADDRESS         XX005
         SPACE 1                                                  XX005
         B     CRETURN             GO TO RETURN                   XX005
         SPACE 1                                                  XX005
CPERC   $SETRP PERCOLATE           SET PERCOLATE OPTION           XX005
         SPACE 1                                                  XX005
CRETURN $RETURN                    RETURN TO CALLER               XX005
         SPACE 1                                                  XX005
         DROP  R5                  KILL ADDRESSABILITY FOR ERA    XX005
***************************************************************** XX005
*                                                               * XX005
*        CONSTANTS FOR XCOMRCVR PROCESSOR RECOVERY ROUTINE      * XX005
*                                                               * XX005
***************************************************************** XX005
         SPACE 1                                                  XX005
CMSGTXT  DC    C'COMMAND TERMINATED - '   CMD TERMINATED MSG TEXT XX005
         SPACE 1                                                  XX005
CNETCMD  DC    C'NETWORK COMMAND' FOR FORMATED COMMANDS THIS TEXT XX005+
                                      WILL BE USED INSTEAD OF THE XX005+
                                          ACTUAL COMMAND          XX005
         SPACE 1                                                  XX005
CMLENGTH EQU   L'CMSGTXT+CCMDLN    TOTAL MESSAGE LENGTH           XX005
         SPACE 2                                                  XX005
         LTORG ,                   EXPAND LITERAL POOL            XX005
         EJECT
         $MODEND
         END
