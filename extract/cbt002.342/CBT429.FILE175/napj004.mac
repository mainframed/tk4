++ USERMOD (NAPJ004) .
++ VER (Z038) FMID(HJE2221).
++JCLIN.
//STEP1    EXEC PGM=IEV90
//SYSPUNCH DD  DSN=&&PUNCH(J2XIT05),DISP=SHR
//SYSIN  DD  SYS1.JES2SRC(J2XIT05),DISP=SHR
//STEP2    EXEC PGM=IEWL,PARM='NORENT'
//SYSPUNCH DD  DSN=&&PUNCH(J2XIT05),DISP=SHR
//SYSLMOD  DD  DSN=SYS1.JES2LIB,DISP=SHR
//SYSLIN  DD  *
  INCLUDE SYSPUNCH(J2XIT05)
  NAME J2XIT05(R)
++SRC (J2XIT05) DISTLIB(JES2SRC).
*          DATA SET J2XIT05    AT LEVEL 014 AS OF 10/14/88
*          DATA SET JESXA5     AT LEVEL 001 AS OF 11/20/86
* THIS SOFTWARE IS DISTRIBUTED "AS IS" WITH NO WARRANTIES EITHER
* EXPRESSED OR IMPLIED. NO GUARANTEES ARE ISSUED WITH THIS
* SOFTWARE. BY INSTALLING IT, YOU AGREE NOT TO HOLD ARTHUR
* ANDERSEN & CO. RESPONSIBLE FOR ANYTHING THAT MAY OCCUR BY ITS USE.
*******************************************************************
*                                                                 *
*   EXIT5 IS THE JES EXIT TO OVERRIDE OR MODIFY JES COMMAND       *
* PROCESSING. IT IS BEING USED TO ADD THE $DD (DISPLAY DISKS)     *
* AND $LF (LIST FORMS) COMMANDS, TO VALIDATE THE OPERANDS ON THE  *
* $TPRT COMMAMD, AND TO ADD PASSWORD TO SOME COMMANDS.            *
*                                                                 *
*               R O U T I N E S                                   *
*                                                                 *
*  MAINLINE:                                                      *
*   CHECKS THE COMMAND AGAINST THE TABLE OF COMMANDS. IF IT IS    *
* NOT FOUND, THE RC IS SET TO 0 TO ALLOW JES TO EXECUTE IT        *
* NORMALLY. IF IT IS FOUND, THE ROUTINE ASSOCIATED WITH IT,       *
* IF ANY, IS EXECUTED. IF THE TABLE INDICATES IT HAS A            *
* PASSWORD, THE PASSWORD ROUTINE IS CALLED. CONTROL IS RETURNED   *
* TO JES WITH THE RC SET BY THE CALLED ROUTINES.                  *
*                                                                 *
*                                                                 *
*                                                                 *
*                                                                 *
*  $LFRTNE                                                        *
*                                                                     *
*        THIS ROUTINE CAME FROM ANOTHER FILE ON THE SHARE TAPE.       *
*        IT WAS COPIED IN HERE WITHOUT ANY MODIFICATIONS.             *
*                                                                     *
*        THE $LF COMMAND HAS THE FOLLOWING SYNTAX:                    *
*        $L F,J=JN-NN,R=DEST1-DEST2,Q=CLASSES,L/S                     *
*                                                                     *
*        WHERE:                                                       *
*        J=JN-NN       - LIST FORMS FOR THE SPECIFIED JOB(S)          *
*        R=DEST1-DEST2 - LIST FORMS FOR THE SPECIFIED DESTINATION(S)  *
*        Q=CLASSES       LIST FORMS FOR THE SPECIFIED SYSOUT QUEUE(S) *
*                        UP TO 8 SYSOUT CLASSES MAY BE REQUESTED.     *
*                        DEFAULTS TO ALL SYSOUT CLASSES.              *
*        L/S             USE THE LONG OR SHORT COMMAND RESPONSE       *
*                        DEFAULTS TO SHORT 1 LINE RESPONSE.           *
*                                                                     *
*        WRITTEN BY:                                                  *
*                        JOHN V. HOOPER                               *
*                        NORTHWESTERN BANK                            *
*                        P.O. BOX 310                                 *
*                        NORTH WILKESBORO, N.C. 28674                 *
*                                                                     *
*        THE FOLLOWING RESPONSES WILL BE MADE BY THIS EXIT:           *
*                                                                     *
*        1)  THE HASP900 MESSAGE WILL BE ISSUED FOR EACH OUTPUT       *
*            GROUP WHICH MATCHES THE SELECTION CRITERIA.              *
*                                                                     *
*        $HASP900 JJJJJJJJ JOBNNNN RRRRRRRR Q=X F=FFFF NNNNNNNNN      *
*        $HASP900                  C=CCCC T=TTTT O=OOOO B=B HHHH      *
*                                                                     *
*            A)  JJJJJJJJ   - JOBNAME                                 *
*            B)  JOBNNNN    - JOB NUMBER                              *
*            C)  RRRRRRRR   - ROUTING (DESTINATION)                   *
*            D)  X          - SYSOUT QUEUE                            *
*            E)  FFFF       - SYSOUT FORM                             *
*            F)  NNNNNNNNNN - TOTAL NUMBER OF PRINT LINES FOR GROUP   *
*            G)  CCCC       - SYSOUT FCB                              *
*            H)  TTTT       - SYSOUT UCS                              *
*            I)  OOOO       - SYSOUT OVERLAY                          *
*            J)  B          - 3800 BURST INDICATOR (Y/N)              *
*            K)  HHHH       - HOLD INDICATOR (HOLD/    )              *
*                                                                     *
*                                                                     *
*        2)  THE HASP919 MESSAGE WILL BE ISSUED WHEN NO OUTPUT        *
*            GROUP MATCHES THE SELECTION CRITERIA.                    *
*                                                                     *
*        $HASP919 NO OUTPUT QUEUED                                    *
*                                                                     *
*                                                                     *
*        3)  THE HASP950 MESSAGE WILL BE ISSUED WHEN AN INVALID       *
*            OPERAND KEYWORD OR VALUE IS DETECTED.                    *
*                                                                     *
*        $HASP950 ......... INVALID OPERAND                           *
*                                                                     *
*                                                                     *
*  TSTPWD                                                             *
*   CHECK THE LAST OPERAND STARTS PWD=. IF NOT, ISSUE THE             *
* MESSAGE PLEASE REENTER THE COMMAND WITH THE PASSWORD. SET THE       *
* RC TO 16 FOR JES TO ABEND THE COMMAND. IF IT IS FOUND, COMPARE IT   *
* TO THE ONE IN THE TABLE. IF THEY ARE DIFFERENT, ISSUE THE           *
* MESSAGE INVALID PASSWORD AND SET THE RC TO 16. IF THEY ARE          *
* CORRECT, CLEAR THE PWD= FROM THE COMMAND SO JES WILL NOT SEE IT.    *
* LEAVE THE RETURN CODE UNCHANGED FROM THE PREVIOUS ROUTINE'S CALL.   *
*                                                                     *
*                                                                     *
*                                                                     *
* REGISTER USAGE:                                                     *
*                                                                     *
*     ENTRY       MAINLINE      $DDRTNE  $TPRT   $LFRTNE   TSTPWD     *
* R0             ×             ×        ×MSGLEN ×WORK     ×MSGLEN     *
*                ×             ×        ×       ×         ×           *
* R1             ×             ×        ×       ×WORK     ×           *
*                ×             ×        ×       ×         ×           *
* R2             ×INCR IN TABLE×UCB     ×       ×WORK     ×           *
*                ×             ×        ×       ×         ×           *
* R3             ×END OF TABLE ×        ×       ×CURR OP  ×           *
*                ×             ×        ×       ×         ×           *
* R4             ×             ×CVT     ×       ×WORK     ×           *
*                ×             ×        ×       ×         ×           *
* R5  PTR TO CURR×PTR TO CURR)-×--------×-------×---------×---->      *
*     OPERAND PTR× OPERAND   ) ×        ×       ×         ×           *
* R6  INCR OF 4  ×             ×        ×PTR TO ×INCR     ×PTR TO     *
*                ×             ×        ×OP PTR ×         ×OP PTR     *
* R7  ADDR OF )--×-------------×--------×-------×---------×---->      *
*     LAST OP.)  ×             ×        ×       ×         ×           *
* R8             × BALR REG ---×--------×-------×---------×---->      *
*                ×             ×        ×       ×         ×           *
* R9  BASE REG)--×-------------×--------×-------×---------×---->      *
*                ×             ×        ×       ×         ×           *
* R10            × PTR TO      ×        ×       ×         × PTR TO    *
*                × CMD TABLE   ×        ×       ×         × CMD TABLE *
* R11 HCT)-------×-------------×--------×-------×---------×---->      *
*                ×             ×        ×       ×         ×           *
* R12            × ADDR OF RTNE×        ×       ×         ×           *
*                × TO CALL     ×        ×       ×         ×           *
* R13 PCE)-------×-------------×--------×-------×---------×---->      *
*                ×             ×        ×       ×         ×           *
* R14 RETURN ADDR×             × WORK   ×       × WORK    ×           *
*                ×             ×        ×       ×         ×           *
* R15 ENTRY POINT× RC          ×RC=0,8  ×RC=0,16×RC=0,8   ×RC=UNCHGED *
*                ×             ×        ×       ×         × OR 16     *
*                                                                     *
*                                                                     *
*                                                                     *
*  JES FIELDS USED:                                                   *
*                                                                     *
*   COMPNTER HAS FULLWORD POINTERS TO THE OPERANDS IN THE         *
*     COMMAND                                                     *
*   COMMAND CONTAINS THE COMMAND ON ENTRY, EITHER THE COMMAND     *
*     OR THE ERROR MESSAGE ON EXIT                                *
*******************************************************************
         PRINT  ON
         EJECT
*     MACRO TO BUILD ROUTINE AND PASSWORD TABLE
         MACRO
&NAME    TABENT &CLEN,&CMD,&RTN=,&PWD=
.GETRTN  AIF   ('&RTN' EQ '').NORTN
&NAME    DC    A(&RTN)            ADDRESS OF ROUTINE
         AGO   .GETPWD
.NORTN   DC    A(0)               NO ROUTINE
.GETPWD  ANOP
         DC    X'0&CLEN'          LENGTH OF CMD
         AIF   ('&PWD' EQ '').NOPWD
         DC    X'80'              PWD ON
         DC    CL4'&PWD'          PASSWORD
         AGO   .CMD
.NOPWD   DC    X'00'              PWD OFF
         DC    CL4' '             NO PASSWORD
.CMD     ANOP
         DC    CL8'&CMD'          COMMAND
         MEND
         EJECT
         EJECT
         COPY  $HASPGBL
J2XIT05  $MODULE CVT,UCB,$BUFFER,$PCE,$JQE,$LRC,$JOE,$COMWORK,$JCT,    X
               $CMB,$HCT,$MIT,$HASPEQU,RPL,                            X
               $CAT,RESPA,$TRP,$RAT,$JOT,$JOE,                         X
               SYSP=(GEN,GEN,DATA,GEN,GEN)
J2XIT05  AMODE 31
J2XIT05  RMODE 24
         PRINT  ON
         TITLE 'EXIT 5 FOR $LF COMMAND AND OTHERS '
         EJECT
J2XIT05E $ENTRY BASE=R9
         $SAVE
         LR    R9,R15
         SPACE 1
*        $AMODE 31
         SPACE 1
         B     MAIN
         EJECT
ENT1      DS    1A
          DC    A(0)
          DC    F'0'
          DC    X'07'
          DC    X'00'
          DC    H'11'
          DC    CL11' '
         SPACE 2
ENT2      DS    1A
          DC    A(0)
          DC    F'0'
          DC    X'12'
          DC    X'00'
          DC    H'18'
         EJECT
MAINRTNE DC    C'MAIN ROUTINE'
         SPACE  3
MAIN     DS    0H
         XR    R12,R12            CLEAR LENGTH REG
*                                 SET UP FOR BXLE
         LA    R3,ENDTBL-4        COMPARE TO END OF TABLE
         LA    R2,20              INCR OF TABLE ENTRY
         LA    R10,CMDTBL         START OF TABLE
         SPACE 3
FNDCMD   IC    R12,4(R10)         GET LENGTH TO COMPARE-1
         EX    R12,CMDCMP         EXECUTE CLC BETWEEN CMD AND TABLE
         BNE   FNDCMDX            NOT IT, CHECK NEXT ENTRY
         SPACE 1
*                                 THIS IS THE CMD, CHECK FOR PWD
         XR    R15,R15            INITIALIZE RC
         CLI   5(R10),X'80'       PWD FLAG?
         BNE   CALLRTN            NO, CALL ROUTINE
         BAL   R8,TSTPWD          CALL PWD ROUTINE
         LTR   R15,R15            PWD OK?
         BNZ   FINISH             NO, SKIP ROUINE CALL
CALLRTN  L     R12,0(R10)         GET RTN ADDR AND PWD FLAG
         LTR   R12,R12            ANY RTN?
         BZ    FINISH             NO, ALL DONE
         SPACE 1
         BALR  R8,R12             BRANCH TO ROUTINE IN TABLE
         SPACE 2
         B     FINISH             DONE WITH CMD
         SPACE 2
*                                 NOT THIS TABLE ENTRY
FNDCMDX  DS    0H
         BXLE  R10,R2,FNDCMD      CHECK NEXT ENTRY
         SPACE 3
*                                 FALLEN THROUGH - NOT IN TABLE
ENDMAIN  DS    0H
         LA    R15,0              PROCESS NORMALLY
         SPACE  3
FINISH   $RETURN  RC=(R15)        RETURN TO JES2.                   DDC
         EJECT
CMDCMP   CLC   COMMAND+1(1),10(R10) EXECUTE FORM OF CLC
         SPACE 3
*                                 COMMAND AND PASSWORD TABLE
*        FORMAT OF TABENT MACRO:
*        TABENT COMMAND LENGTH-1(EXCLUDING $),
*        COMMAND (EXCLUDING $)
*        RTN=ROUTINE NAME, IF ANY,
*        PWD=PASSWORD, IF ANY
CMDTBL   DS    0F
*        TABENT 1,DD,RTN=$DDRTNE
         TABENT 1,LF,RTN=$LFRTNE
*        TABENT 1,TI,PWD=GUESS
ENDTBL   DS  0H
         SPACE 3
         LTORG
         EJECT
***********************************************************************
*                                                                     *
*   TSTPWD:                                                           *
*                                                                     *
* CHECK IF PASSWORD CODED, AND IF IT IS CORRECT. IF NOT, ISSUE        *
* THE PASSWORD MISSING OR INVALID PASSWORD MESSAGE AND SET THE        *
* RC TO 16 SO COMMAND NOT EXECUTED.                                   *
*                                                                     *
***********************************************************************
TSTPWD   DS    0H
         L     R7,0(R7)           POINT TO LAST OPERAND POINTER
         CLC   0(4,R7),=C'PWD='   IS THE LAST OPERAND PWD=?
         BNE   PWDNONE            NO, GO TO PASSWORD MISSING RTN
         SPACE 3
         CLC   4(4,R7),6(R10)     COMPARE PWD TO TABLE PASSWORD
         BE    PWDCLR             CORRECT, CLEAR IN CMD, PASS TO IBM
         SPACE 2
         MVC   COMMAND(16),PWDWRONG SET UP PASSWORD WRONG MESSAGE
         L     R0,=F'16'          AND ITS LENGTH
         $STORE R0                SAVE FOR $RETURN
         L     R15,=F'16'         SET UP RC TO ABEND CMD
         B     PWDEND             AND EXIT ROUTINE
         SPACE 3
PWDCLR   DS    0H                 CLEAR PWD FROM CMD
         MVC   4(4,R7),=C'    '   BLANK OUT PASSWORD
         SPACE 1
         LA    R6,COMPNTER        POINT TO OPERAND POINTER
         SPACE 1
CHECKNXT LR    R5,R6              SAVE LAST OPERAND LOOKED AT
         LA    R6,4(R6)           POINT TO NEXT OPERAND POINTER
         C     R7,0(R6)           IS THIS THE LAST OPERAND POINTER?
         BNE   CHECKNXT           NO, CHECK ANOTHER
*                                 YES, THEN R5 POINTS TO IT
         SPACE 2
         LR    R7,R5              PUT IN LAST OPERAND POINTER
         $STORE R7 SAVE FOR $RETURN
         B     PWDEND             LEAVE ROUTINE
         SPACE 3
PWDNONE  MVC   COMMAND(44),PWDMISS PUT IN MISSING PWD MSG
         L     R0,=F'44'          AND LENGTH
         $STORE R0                SAVE FOR $RETURN
         L     R15,=F'16'         RC TO ABEND CMD
         B     PWDEND             LEAVE ROUTINE
         SPACE 3
PWDEND   BR    R8                 RETURN
         LTORG
         EJECT
         EJECT
$LFSAVE  DS    F
$LFBEG   DC    C'$LF ROUTINE BEGINNING'
$LFRTNE  DS    0H
         ST    R8,$LFSAVE
         EJECT
***********************************************************************
*                                                                     *
*        CLEAR THE COMMAND WORK AREA                                  *
*                                                                     *
***********************************************************************
         SPACE 1
         XC    $LFWORK(WORKLEN),$LFWORK CLEAR WORK AREA
         SPACE 3
***********************************************************************
*                                                                     *
*        GET THE DEFAULT ROUTE CODE FOR $LF                           *
*                                                                     *
***********************************************************************
GETROUT  L     R1,COMJROUT         LOAD COMMAND ROUTE CODE
         TM    COMFLAG,CMBFLAGW    IS THIS A RJE
         BNO   GETROUTE            NO, BRANCH
         CLM   R1,B'1100',$OWNNODE IS THIS OUR NODE AND RJE
         BNE   GETROUTE            NO, BRANCH
         LH    R1,COMJRMT          LOAD THE REMOTE NUMBER
         BCTR  R1,0                MAKE NUMBER RELATIVE TO ZERO
         MH    R1,=Y(RATTLE)       MULTIPLY BY RAT LENGTH FOR OFFSET
         AL    R1,$RATABLE         POINT TO RAT ENTRY FOR THIS RJE
         L     R1,RATROUTE-RAT(,R1) PICK UP PROPER ROUTINE
GETROUTE ST    R1,LOWROUT          SET DEFAULT LOW ROUTE CODE
         ST    R1,HIGHROUT         AND HIGH ROUTE CODE
***********************************************************************
*                                                                     *
*        GET THE DEFAULT JOB RANGE FOR $LF                            *
*                                                                     *
***********************************************************************
GETJRNG  SLR   R1,R1               SET DEFAULT LOW JOB NUMBER
         STH   R1,LOWJOB           SAVE LOW JOB NUMBER
         LH    R1,$NUMJBNO         SET DEFAULT HIGH JOB NUMBER
         STH   R1,HIGHJOB          SAVE HIGH JOB NUMBER
         MVI   JTYPE,C'*'          SET TO DISPLAY ALL JOB TYPES
***********************************************************************
*                                                                     *
*        SET THE DEFAULT JOB OUTPUT CLASS AND CMD FORMAT              *
*                                                                     *
***********************************************************************
         MVI   OUTCLASS,C'*'       SET TO ALL CLASSES
         MVI   FORMAT,C'S'         SET TO SHORT FORM OF COMMAND
         MVI   MISCSW,X'00'        ZERO THE MISCELLANEOUS SWITCHES
         MVC   SAVEFORM,=CL8' '    BLANK OUT SAVE FORM
         MVC   NAMEPRFX,=CL8' '    BLANK OUT NAME PREFIX
         EJECT
***********************************************************************
*                                                                     *
*        EXAMINE THE COMMAND OPERANDS                                 *
*                                                                     *
***********************************************************************
CLFNSPEC BXH   R5,R6,CLFOK         IF NO MORE EXIT
         L     R1,0(,R5)           POINT TO OPERAND
         CLC   0(2,R1),=C'F='      FORM   SELECTION?
         BE    CLFF                YES, BRANCH
         CLC   0(2,R1),=C'J='      JOB(S) SELECTION?
         BE    CLFJ                YES, BRANCH
         CLC   0(2,R1),=C'R='      RJE(S) SELECTION?
         BE    CLFR                YES, BRANCH
         CLC   0(2,R1),=C'Q='      SYSOUT CLASS SELECTION?
         BE    CLFQ                YES, BRANCH
         CLC   0(2,R1),=C'L '      LONG FORM OF COMMAND DESIRED?
         BE    CLFORM              YES, BRANCH
         CLC   0(2,R1),=C'L,'      LONG FORM OF COMMAND DESIRED?
         BE    CLFORM              YES, BRANCH
         CLC   0(2,R1),=C'S '      SHORT FORM OF COMMAND DESIRED?
         BE    CLFORM              YES, BRANCH
         CLC   0(2,R1),=C'S,'      SHORT FORM OF COMMAND DESIRED?
         BE    CLFORM              YES, BRANCH
         B     BADOPRND            ERROR EXIT
         EJECT
***********************************************************************
*                                                                     *
*        PROCESS THE JOB (J) RANGE OR NAME PREFIX SUBPARAMETER        *
*                                                                     *
***********************************************************************
         SPACE 1
CLFJ     DS    0H
         L     R1,0(R5)            POINT TO OPERAND
         SLR   R15,R15             SET LENGTH TO ZERO
         CLI   2(R1),C'*'          IS IT *JOB-NAME PREFIX
         BE    CLFJ5
         LA    R1,3(R1)            INDEX PAST 'J=J'  ETC
         LR    R14,R1              SAVE START OF OPERAND
         MVI   LOWJOB,X'FF'        SET START OF PROCESSING INDICATOR
CLFJ1    CLI   0(R1),C'-'          END OF FIRST OPERAND
         BE    CLFJ2               YES, BRANCH
         CLI   0(R1),C','          END OF ALL OPERANDS
         BE    CLFJ2               YES, BRANCH
         CLI   0(R1),C' '          END OF ALL OPERANDS
         BE    CLFJ2               YES, BRANCH
         CLI   0(R1),C'0'          NUMERIC OPERAND
         BL    BADOPRND            NO, ERROR
         CLI   0(R1),C'9'          NUMERIC OPERAND
         BH    BADOPRND            NO, ERROR
         LA    R1,1(,R1)           INCREMENT TO NEXT CHAR JOB NUMBER
         LA    R15,1(,R15)         ADD 1 TO OPERAND LENGTH
         B     CLFJ1               LOOP UNTIL DONE
CLFJ2    LTR   R15,R15             TEST LENGTH
         BZ    BADOPRND            ZERO, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         EX    R15,PACKJOB         PACK JOB NUMBER
         CVB   R15,$DOUBLE         CONVERT TO BINARY
         C     R15,=F'20000'       SEE IF NUMBER TOO LARGE
         BH    BADOPRND            YES, ERROR
         CLI   0(R1),C'-'          LOW JOB OF RANGE
         BE    CLFJ3               YES, BRANCH
         STH   R15,HIGHJOB         SAVE HIGH JOB NUMBER
         CLI   LOWJOB,X'FF'        IS THIS THE FIRST JOB NUMBER
         BNE   CLFJ4               NO, ALL DONE WITH NUMBER, BRANCH
         STH   R15,LOWJOB          SAVE LOW JOB NUMBER
         B     CLFJ4               ALL DONE WITH NUMBER, BRANCH
CLFJ3    CLI   LOWJOB,X'FF'        HAS LOW JOB NUMBER ALREADY BEEN PROC
         BNE   BADOPRND            YES, ERROR
         STH   R15,LOWJOB          SAVE LOW JOB NUMBER
         LA    R1,1(,R1)           INCREMENT PAST '-'
         LR    R14,R1              SAVE START OF OPERAND
         SLR   R15,R15             RESET LENGTH TO ZERO
         B     CLFJ1               LOOP FOR NEXT NUMBER OF RANGE
PACKJOB  PACK  $DOUBLE,0(0,R14)    PACK JOB NUMBER
         SPACE 1
CLFJ4    L     R15,0(,R5)          POINT TO OPERAND
         MVC   JTYPE,2(R15)        SET JOB TYPE
         CLI   2(R15),C'J'         JOB?
         BE    CLFNSPEC            YES, GET NEXT SPECIFICATION
         CLI   2(R15),C'S'         STC?
         BE    CLFNSPEC            YES, GET NEXT SPECIFICATION
         CLI   2(R15),C'T'         TSU?
         BNE   BADOPRND            NO, ERROR
         B     CLFNSPEC            GET NEXT SPECIFICATION
CLFJ5    DS    0H                  ROUTINE FOR JOB NAME SEARCH
         CLI   3(R1),C','          IS THE CHARACTER A COMMA
         BE    CLFJ9               YES, GO MOVE THE ENTRY
         CLI   3(R1),C' '          IS THE CHARACTER A SPACE
         BE    CLFJ9               YES, GO MOVE THE ENTRY
         CLI   3(R1),C'A'          IS THE CHARACTER AN A
         BL    CLFJ6               LESS THAN, GO CHECK NATIONAL
         CLI   3(R1),C'I'          IS THE CHARACTER AN I
         BNH   CLFJ7               EQUAL TO, OR LESS THAN, GO INCR
         CLI   3(R1),C'J'          IS THE CHARACTER AN J
         BL    BADOPRND            LESS THAN, ERROR
         CLI   3(R1),C'R'          IS THE CHARACTER AN R
         BNH   CLFJ7               EQUAL TO, OR LESS THAN, GO INCR
         CLI   3(R1),C'S'          IS THE CHARACTER AN S
         BL    BADOPRND            LESS THAN, ERROR
         CLI   3(R1),C'Z'          IS THE CHARACTER A Z
         BNH   CLFJ7               EQUAL TO, OR LESS THAN, GO INCR
         CLI   3(R1),C'0'          IS THE CHARACTER A 0
         BL    BADOPRND            LESS THAN, ERROR
         CLI   3(R1),C'9'          IS THE CHARACTER A 9
         BNH   CLFJ7               EQUAL TO, OR LESS THAN, GO INCR
         B     BADOPRND            ERROR
CLFJ6    DS    0H
         CLI   3(R1),C'@'          IS THE CHARACTER AN AT SIGN
         BE    CLFJ7               EQUAL, GO INCR
         CLI   3(R1),C'#'          IS THE CHARACTER A POUND SIGN
         BE    CLFJ7               EQUAL, GO INCR
         CLI   3(R1),C'$'          IS THE CHARACTER A DOLLAR SIGN
         BNE   BADOPRND            ERROR
CLFJ7    DS    0H
         LA    R1,1(,R1)           INCREMENT POINTER
         LA    R15,1(,R15)         INCREMENT SIZE FIELD
         CH    R15,=H'8'           IS FIELD 8
         BNH   CLFJ5               EQUAL OR LESS, GO TO LOOP
         B     BADOPRND            ERROR
CLFJ9    DS    0H
         LTR   R15,R15             TEST LENGTH
         BZ    BADOPRND            ZERO, ERROR
         L     R14,0(,R5)          POINT TO BEGINNING OF OPERAND
         CLI   3(R14),C'0'         IS FIRST CHR NUMERIC
         BNL   BADOPRND            YES, ERROR
         BCTR  R15,R0              SET MACHINE LENGTH
         STC   R15,CMPRSIZ         SAVE COMPARE SIZE
         EX    R15,MOVEPRFX        EXECUTE MOVE OF NAME PREFIX
         LA    R1,3(,R1)           POINT TO DELIMITER
         B     CLFNSPEC            GET NEXT SPECIFICATION
MOVEPRFX MVC   NAMEPRFX(0),3(R14)  MOVE NAME PREFIX
         EJECT
***********************************************************************
*                                                                     *
*        PROCESS THE ROUTE CODE (R) SUBPARAMETER                      *
*                                                                     *
*                                                                     *
*                                                                     *
*    RANGES ALLOWED  -    ONLY ASCENDING RANGES ARE PERMITTED         *
*    --------------                                                   *
*    NNNNNRNNNN (-RMMMM)                                              *
*    NNNN.RNNNN (-RMMMM)                                              *
*    NAME.RNNNN (-RMMMM)                                              *
*                      -  RANGE OF REMOTES AT A GIVEN NODE            *
*                        (NAME IS 8-BYTE EBCDIC FROM A DESTID CARD    *
*    NNNNN(-NMMMM)     -  RANGE OF ALL REMOTES/UNITS AT GIVEN NODE    *
*    UNNNN(-UMMMM)     -  RANGE OF UNITS AT THE LOCAL NODE ONLY       *
*    RNNNN(-RMMMM)     -  RANGE OF REMOTES AT THE LOCAL NODE ONLY     *
*    NAME1(-NAME2)     -  AS ANY ONE OF THE ABOVE, BUT NO OTHERS      *
*    LOCAL             -  ALL SPECIAL LOCAL                           *
*                                                                     *
***********************************************************************
         SPACE 1
CLFR     L     R3,0(,R5)           POINT TO OPERAND
         LA    R3,2(,R3)           INCREMENT PAST 'R='
         SLR   R1,R1               SET ZERO LENGTH
         LR    R4,R3               SAVE START OF OPERAND
         MVC   DEST1P1,=CL10' '    BLANK DEST1 PART1
         MVC   DEST1P2,=CL10' '    BLANK DEST1 PART2
         MVC   DEST2P1,=CL10' '    BLANK DEST2 PART1
CLFRLOOP CLI   0(R4),C'-'          END OF FIRST OPERAND
         BE    CLFR2               YES, BRANCH
         CLI   0(R4),C','          END OF LAST OPERAND
         BE    CLFR2               YES, BRANCH
         CLI   0(R4),C' '          END OF LAST OPERAND
         BE    CLFR2               YES, BRANCH
         CLI   0(R4),C'.'          TWO PART DESTINATION
         BE    CLFR1               YES, BRANCH
         LA    R4,1(,R4)           INCREMENT TO NEXT CHAR OF DEST
         LA    R1,1(,R1)           ADD 1 TO LENGTH
         B     CLFRLOOP            LOOP UNTIL DONE
CLFR1    OI    MISCSW,TWOPART      SET TWO PART DEST INDICATION
         CLI   DEST1P1,C' '        HAS FIRST ALREADY BEEN SPECIFIED
         BNE   BADOPRND            YES, ERROR
         B     CLFR2               GO PROCESS DEST FIELD
CLFR2    LTR   R1,R1               CHECK LENGTH OF DEST
         BZ    BADOPRND            ZERO, ERROR
         CH    R1,=H'10'           CHECK LENGTH OF DEST
         BH    BADOPRND            GREATER THAN 10, ERROR
         BCTR  R1,0                MAKE MACHINE LENGTH
         CLI   DEST1P1,C' '        HAS PART1 ALREADY BEEN SPECIFIED
         BNE   CLFR3               YES, BRANCH
         EX    R1,MDEST1P1         MOVE DEST1 PART1
         B     CLFR5               GET OUT
CLFR3    TM    MISCSW,TWOPART      SEE IF TWO PART DEST INDICATION
         BZ    CLFR4               NO, BRANCH
         CLI   DEST1P2,C' '        SEE IF PART2 ALREADY BEEN SPECIFIED
         BNE   CLFR4               YES, THIS IS THE SECOND DEST
         EX    R1,MDEST1P2         MOVE DEST1 PART2
         B     CLFR5               GET OUT
CLFR4    CLI   DEST2P1,C' '        SEE IF DEST2 ALREADY BEEN SPECIFIED
         BNE   BADOPRND            YES, ERROR
         EX    R1,MDEST2P1         MOVE DEST2 PART1
         B     CLFR5               GET OUT
MDEST1P1 MVC   DEST1P1(0),0(R3)    MOVE DEST1 PART1
MDEST1P2 MVC   DEST1P2(0),0(R3)    MOVE DEST1 PART2
MDEST2P1 MVC   DEST2P1(0),0(R3)    MOVE DEST2 PART1
CLFR5    CLI   0(R4),C'-'          SEE IF DESTINATION RANGE SPECIFIED
         BE    CLFR6               YES, BRANCH
         CLI   0(R4),C'.'          SEE IF TWO PART DEST SPECIFIED
         BE    CLFR6               YES, BRANCH
         B     CLFR10              GO CONVERT DEST TO ROUTE CODES
CLFR6    LA    R4,1(,R4)           INCREMENT PAST '-' OR '.'
         LR    R3,R4               SAVE START ADDRESS
         SLR   R1,R1               RESET LENGTH TO ZERO
         B     CLFRLOOP            LOOP FOR NEXT DESTINATION
CLFR10   DS    0H
         MVC   COMDWORK(2),COMJNOD SET DEFAULT NODE
         $DEST DEST1P1,COMDWORK,LEN=10 CONVERT DEST1 PART1
         BZ    BADOPRND            BAD DEST, ERROR
         ST    R1,LOWROUT          SAVE ROUTE CODE
         CLI   DEST1P2,C' '        CHECK IF TWO PART DEST
         BE    CLFR12              NO, BRANCH
CLFR11   CLM   R1,B'0011',$ZEROES  SEE IF NODAL DESTINATION ONLY
         BNE   BADOPRND            NO, ERROR
         CLM   R1,B'1100',$ZEROES  SEE IF NODE NUMBER SET
         BE    BADOPRND            NO, ERROR
         ST    R1,COMDWORK         SET DEFAULT NODE FOR SECOND PART
         $DEST DEST1P2,COMDWORK,LEN=10 CONVERT DEST1 PART1
         BZ    BADOPRND            BAD DEST, ERROR
         ST    R1,LOWROUT          SAVE ROUTE CODE
         CLM   R1,B'1100',COMDWORK MAKE SURE NODE DEFAULTED
         BNE   BADOPRND            NO, ERROR
CLFR12   MVC   HIGHROUT,LOWROUT    SET DEST RANGE TO EQUAL VALUES
         CLI   DEST2P1,C' '        WAS DEST RANGE SPECIFIED
         BE    CLFR13              NO, BRANCH
         $DEST DEST2P1,COMDWORK,LEN=10 CONVERT DEST2 PART1
         BZ    BADOPRND            BAD DEST, ERROR
         ST    R1,HIGHROUT         SAVE ROUTE CODE
CLFR13   CLC   HIGHROUT,LOWROUT    CHECK FOR ASCENDING RANGE
         BL    BADOPRND            NO, ERROR
         B     CLFNSPEC            LOOP TO NEXT SPECIFICATION
         EJECT
***********************************************************************
*                                                                     *
*        PROCESS THE SYSOUT CLASS (Q) SUBPARAMETER                    *
*                                                                     *
***********************************************************************
         SPACE 1
CLFQ     L     R1,0(,R5)           POINT TO OPERAND
         LA    R1,2(,R1)           INCREMENT PAST 'Q='
         LR    R14,R1              SAVE CLASS STRING ADDRESS
         SLR   R15,R15             SET LENGTH TO ZERO
CLFQ1    CLI   0(R1),C' '          END OF CLASS STRING
         BE    CLFQ2               YES, BRANCH
         CLI   0(R1),C','          END OF CLASS STRING
         BE    CLFQ2               YES, BRANCH
         LA    R1,1(,R1)           INCREMENT TO NEXT CHAR OF CLASS
         LA    R15,1(,R15)         ADD 1 TO LENGTH
         B     CLFQ1               LOOP
CLFQ2    STC   R15,NUMCLASS        SAVE LENGTH
         LTR   R15,R15             TEST LENGTH
         BZ    BADOPRND            ZERO, ERROR
         CH    R15,=H'8'           SEE IF GT 8
         BH    BADOPRND            GREATER THAN 8, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         EX    R15,MOVECLAS        SAVE CLASS STRING
         EX    R15,TRTCLASS        TEST CLASSES
         BNZ   BADOPRND            NOT VALID, ERROR
         B     CLFNSPEC            GET NEXT SPECIFICATION
MOVECLAS MVC   OUTCLASS(0),0(R14)  MOVE SYSOUT CLASSES TO SAVE
TRTCLASS TRT   OUTCLASS(0),CLASSTBL TEST SYSOUT CLASSES
CLASSTBL DC    256X'01'            VALID SYSOUT CLASSES
         ORG   CLASSTBL+C'A'
         DC    9X'00'              CLASS A-I
         ORG   CLASSTBL+C'J'
         DC    9X'00'              CLASS J-R
         ORG   CLASSTBL+C'S'
         DC    8X'00'              CLASS S-Z
         ORG   CLASSTBL+C'0'
         DC    10X'00'             CLASS 0-9
         DC    6X'01'
         EJECT
***********************************************************************
*                                                                     *
*        PROCESS THE FORMS (F=)  SUBPARAMETER                         *
*                                                                     *
***********************************************************************
         SPACE 1
CLFF     L     R1,0(,R5)           POINT TO OPERAND
         LA    R1,2(,R1)           INCREMENT PAST 'F='
         LR    R14,R1              SAVE FORMS STRING ADDRESS
         SLR   R15,R15             SET LENGTH TO ZERO
CLFF1    CLI   0(R1),C' '          END OF CLASS STRING
         BE    CLFF2               YES, BRANCH
         CLI   0(R1),C','          END OF CLASS STRING
         BE    CLFF2               YES, BRANCH
         LA    R1,1(,R1)           INCREMENT TO NEXT CHAR OF CLASS
         LA    R15,1(,R15)         ADD 1 TO LENGTH
         B     CLFF1               LOOP
CLFF2    DS    0H                  SAVE LENGTH
         LTR   R15,R15             TEST LENGTH
         BZ    BADOPRND            ZERO, ERROR
         CH    R15,=H'8'           SEE IF GT 8
         BH    BADOPRND            GREATER THAN 8, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         EX    R15,MOVEFORM        MOVE IN FORM (NOTE, INIT BLANK)
         B     CLFNSPEC            GET NEXT SPECIFICATION
MOVEFORM MVC   SAVEFORM(0),0(R14)
***********************************************************************
*                                                                     *
*        PROCESS THE COMMAND FORMAT (S/L) SUBPARAMETER                *
*                                                                     *
***********************************************************************
         SPACE 1
CLFORM   L     R15,0(,R5)          POINT TO OPERAND
         MVC   FORMAT,0(R15)       SAVE COMMAND FORMAT
         B     CLFNSPEC            GET NEXT SPECIFICATION
         EJECT
***********************************************************************
*                                                                     *
*        GET CHARACTERISTICS JOE AND PREPARE TO SCAN                  *
*                                                                     *
***********************************************************************
         SPACE 1
CLFOK    L     R2,$JOTABLE         GET ADDRESS OF JOT
         USING JOT,R2
         L     R4,JOTCHRQ-(JOENEXT-JOE) QUEUE HEAD
         USING JOE,R4
         N     R4,$ZEROFFF         ANY JOES?
         BZ    ENDJOES             NO, SKIP JOE PROCESSING
*        ST    R4,JOEADDR          SAVE STARTING POINT
         MVC   MESSAGE(90),INITRESP INITIALIZE RESPONSE BUFFER
         B     CHARJOES            BYPASS DC
INITRESP DS    0CL90
         DC    CL46'JJJJJJJJ JOBNNNN RRRRRRRR F=FFFFFFFF NNNNNNNNN'
         DC    CL46'         Q=Q     C=CCCC T=TTTT O=OOOO B=B HHHH'
         SPACE 1
CHARJOES DS    0H
         ALR   R4,R2               CALCULATE ACTUAL JOE ADDRESS
         ST    R4,JOEADDR          SAVE NEW CHARACTERISTICS JOE ADDR
***********************************************************************
*        MOVE THE FORM NUMBER TO THE MESSAGE                          *
***********************************************************************
         MVC   OFORM,JOEFORM       MOVE FORM TO MESSAGE
***********************************************************************
*        CHECK THE FORM FOR OUR VALUE                                 *
***********************************************************************
CKFORM   CLI   SAVEFORM,C' '       DO WE WANT ALL FORMS         ?
         BE    CKDMNDFM            YES, BRANCH
         CLC   OFORM,SAVEFORM      IS OUTPUT FORM OURFORM
         BNE   ENDCHAR             NO, GET NEXT JOE
CKDMNDFM DS    0H
         TM    JOEFLAGD,JOEFDFMS   DEMAND SETUP?
         BZ    CHARFCB             NO, CONTINUE
         MVC   OFORM+4(4),=C'DMND'   YES, PUT IN MSG
***********************************************************************
*        MOVE THE FCB  NUMBER TO THE MESSAGE                          *
***********************************************************************
CHARFCB  MVC   OFCB,JOEFCB         MOVE FCB  TO MESSAGE
         TM    JOEFLAGD,JOEFDFCB   DEMAND SETUP?
         BZ    CHARUCS             NO, CONTINUE
         MVC   OFCB(4),=C'DMND'    YES, PUT IN MSG
***********************************************************************
*        MOVE THE UCS  NUMBER TO THE MESSAGE                          *
***********************************************************************
CHARUCS  MVC   OUCS,JOEUCS         MOVE UCS  TO MESSAGE
         TM    JOEFLAGD,JOEFDUCS   DEMAND SETUP?
         BZ    CHAROVL             NO, CONTINUE
         MVC   OUCS(4),=C'DMND'    YES, PUT IN MSG
***********************************************************************
*        MOVE THE OVLY NUMBER TO THE MESSAGE                          *
***********************************************************************
CHAROVL  MVC   OOVLY,JOEFLASH      MOVE OVLY TO MESSAGE
***********************************************************************
*        MOVE THE BURST INDICATOR TO THE MESSAGE                      *
***********************************************************************
         MVI   OBURST,C'N'         ASSUME BURST=NO
         TM    JOEFLAGC,JOEFCBRT   IS THIS BURST=YES
         BZ    NOBURST             NO, BRANCH
         MVI   OBURST,C'Y'         SET BURST=YES
NOBURST  DS    0H
         EJECT
***********************************************************************
*                                                                     *
*        SCAN WORK JOES AND JQES FOR MATCH ON DEST AND/OR JOB         *
*                                                                     *
***********************************************************************
         SPACE 1
*        LA    R4,JOEWKPTR-(JOECHNXT-JOE)  TRICKY START OF WRK QUE
         L     R4,JOEWKPTR               NOT SO TRICKY START OF WRK QUE
         N     R4,$ZEROFFF               TURN OFF HIGH BYTE
WORKJOES DS    0H
         ALR   R4,R2               COMPUTE WORK JOE ADDRESS
***********************************************************************
*        CHECK THE DESTINATION FOR OUR VALUES                         *
***********************************************************************
         CLC   JOEROUT,LOWROUT     SEE IF LT OUR LOWER ROUTE CODE
         BL    ENDWORK             NO, BRANCH
         CLC   JOEROUT,HIGHROUT    SEE IF GT OUR HIGHER ROUTE CODE
         BH    ENDWORK             YES, BRANCH
***********************************************************************
*        CHECK THE SYSOUT CLASS FOR OUR VALUE                         *
***********************************************************************
CKCLASS  CLI   OUTCLASS,C'*'       DO WE WANT ALL SYSOUT CLASSES?
         BE    GOODCLAS            YES, BRANCH
         SLR   R1,R1               CLEAR REG FOR IC
         IC    R1,NUMCLASS         LOAD NUMBER OF OUTPUT CLASSES
         LA    R15,OUTCLASS        LOAD ADDRESS OF CLASS TABLE
CKCLASS1 CLC   JOECURCL,0(R15)     IS THIS THE CORRECT SYSOUT CLASS
         BE    GOODCLAS            YES, BRANCH
         LA    R15,1(,R15)         INCREMENT TO NEXT CLASS ENTRY
         BCT   R1,CKCLASS1         LOOP
         B     ENDWORK             CLASS MISMATCH, BYPASS THIS JOE
         SPACE 1
GOODCLAS L     R3,JOEJQE           GET JQE OFFSET
         N     R3,$ZEROFFF         CLEAR THE HI-ORDER BYTE
         AL    R3,$JOBQPTR         CONVERT THE OFFSET TO ADDRESS
         USING JQE,R3              SET ADDRESSABILITY TO JQE
***********************************************************************
*        CHECK THE JOB NUMBER FOR OUR VALUES                          *
***********************************************************************
         CLI   JTYPE,C'*'          WANT ALL JOB NUMBERS?
         BE    CKJOBPFX            YES, BRANCH
CKBATCH  CLI   JTYPE,C'J'          WANT BATCH JOBS?
         BNE   CKSTC               NO, BRANCH
         TM    JQEFLAG3,JQE3JOB    IS THIS A BATCH JOB
         BZ    GOODTYPE            YES, BRANCH
         B     ENDWORK             NO, IGNORE THIS JOE
CKSTC    CLI   JTYPE,C'S'          WANT STARTED TASKS?
         BNE   CKTSU               NO, BRANCH
         TM    JQEFLAG3,JQE3STC    IS THIS A STARTED TASK
         BO    GOODTYPE            YES, BRANCH
         B     ENDWORK             NO, IGNORE THIS JOE
CKTSU    CLI   JTYPE,C'T'          WANT TSO USERS?
         BNE   ENDWORK             NO, UNKNOWN REQUEST, GET OUT
         TM    JQEFLAG3,JQE3TSU    IS THIS A TSO USER
         BNO   ENDWORK             NO, IGNORE THIS JOE
GOODTYPE CLC   JQEJOBNO,LOWJOB     SEE IF LT OUR LOWER JOB NUMBER
         BL    ENDWORK             NO, IGNORE THIS JOE
         CLC   JQEJOBNO,HIGHJOB    SEE IF GT OUR HIGHER JOB NUMBER
         BH    ENDWORK             YES, IGNORE THIS JOE
***********************************************************************
*        MOVE THE JOBNAME TO THE MESSAGE                              *
***********************************************************************
CKJOBPFX DS    0H
         CLI   NAMEPRFX,C' '       IS THIS LIMITED BY NAME PREFIX
         BE    GOODJOB             EQUAL, NOT LIMITED BY NAME PREFIX
         SLR   R1,R1               ZERO OUT R1
         IC    R1,CMPRSIZ          GET SIZE OF COMPARE
         EX    R1,PRFXCMPR         EXECUTE COMPARE
         BNE   ENDWORK             IF NAME PREFIX NOT EQUAL, LOOP NEXT
GOODJOB  DS    0H
         MVC   OJNAME,JQEJNAME     MOVE JOBNAME TO MESSAGE
***********************************************************************
*        MOVE THE JOB NUMBER TO THE MESSAGE                           *
***********************************************************************
         LH    R0,JQEJOBNO         LOAD JOB NUMBER
         CVD   R0,$DOUBLE          CONVERT JOB NUMBER TO PACKED
         MVC   OJOBNO+2(6),=X'402020202120' SET EDIT MASK
         ED    OJOBNO+2(6),$DOUBLE+5  UNPACK JOB NUMBER TO MESSAGE
         MVC   OJOBNO+1(3),=C'JOB' ASSUME BATCH JOB
         TM    JQEFLAG3,JQE3JOB    IS THIS A BATCH JOB
         BZ    GOODJNO             YES, BRANCH
         MVC   OJOBNO+1(3),=C'STC' ASSUME STARTED TASK
         TM    JQEFLAG3,JQE3STC    IS THIS A STARTED TASK
         BO    GOODJNO             YES, BRANCH
         MVC   OJOBNO+1(3),=C'TSU' ASSUME TSO LOGON
         TM    JQEFLAG3,JQE3TSU    IS THIS A TSO LOGON
         BO    GOODJNO             YES, BRANCH
         MVC   OJOBNO+1(3),=C'XMT' ASSUME TRANSMITTER
GOODJNO  DS    0H
***********************************************************************
*        SET THE BUSY INDICATOR IN THE MESSAGE                        *
***********************************************************************
         MVI   OBUSYIND,C' '       BLANK THE BUSY INDICATOR
         TM    JOEFLAG1,JOE1BUSY   SEE IF BEING PRINTED/PUNCHED
         BZ    NOTBUSY             NO, BRANCH
         MVI   OBUSYIND,C'*'       SET THE BUSY INDICATOR
NOTBUSY  DS    0H
***********************************************************************
*        MOVE THE SYSOUT CLASS TO THE MESSAGE                         *
***********************************************************************
         MVC   OCLASS,JOECURCL     MOVE SYSOUT CLASS TO MESSAGE
***********************************************************************
*        SET THE HOLD INDICATOR IN THE MESSAGE                        *
***********************************************************************
         MVC   OHOLDIND,=C'    '   RESET HOLD INDICATOR
         TM    JQEFLAG1,JQE1HLDA+JQE1HLD1 IS THIS JOB HELD
         BZ    HOLDSET             NO, BRANCH
         MVC   OHOLDIND,=C'HOLD'   SET HOLD INDICATOR
         B     NSELSET             NO, BRANCH
HOLDSET  DS    0H
***********************************************************************
*        SET THE NON-SELECTABLE INDICATOR IN THE MESSAGE              *
***********************************************************************
         TM    JOEFLAG2,JOE2SLEC   IS THIS JOE SELECTABLE
         BZ    NSELSET             YES, BRANCH
         MVC   OHOLDIND,=C'NSEL'   SET NON-SELECTABLE INDICATOR
NSELSET  DS    0H
***********************************************************************
*        SET THE DESTINATION VALUE IN THE MESSAGE                     *
***********************************************************************
CNVDEST  LA    R1,COMEWORK         POINT TO OUTPUT AREA
         MVC   0(12,R1),=CL12' R'  ASSUME ' RJ2XIT05X      '
         SLR   R0,R0               CLEAR REG FOR ICM
         CLC   $OWNNODE,JOEROUT    IS THIS OUR NODE
         BE    CNVDEST1            YES, NO NODE NUMBERS
         MVI   1(R1),C'N'          ASSUME NODE SPECIFICATION
         ICM   R0,B'0011',JOEROUT  LOAD NODE NUMBER
         BNZ   CNVDEST2            NODE NUMBER NOT ZERO, CONVERT IT
         MVI   1(R1),C'U'          ELSE MUST BE SPECIAL UNIT
CNVDEST1 ICM   R0,B'0011',JOEROUT+2 LOAD REMOTE NUMBER
         BNZ   CNVDEST2            REMOTE NUMBER NOT ZERO, CONVERT IT
         MVC   1(5,R1),=C'LOCAL'   ZERO, SET TO LOCAL
         B     CNVDEST6            AND GET OUT
         SPACE 1
CNVDEST2 CVD   R0,$DOUBLE          CONVERT NODE/RMT NUMBER TO PACKED
         UNPK  2(5,R1),$DOUBLE     UNPACK NODE/RMT NUMBER
         OI    6(R1),X'F0'         MAKE NODE/RMT NUMBER PRINTABLE
CNVDEST3 CLI   2(R1),C'0'          IS HIGH BYTE ZERO
         BNE   CNVDEST4            NO, GO SEE IF DONE
         MVC   2(5,R1),3(R1)       SHIFT OFF HIGH ORDER ZERO BYTE
         B     CNVDEST3            LOOP UNTIL LEADING ZEROS GONE
CNVDEST4 CLI   1(R1),C'N'          SEE IF NODE SPECIFIED
         BNE   CNVDEST6            NO, DONE
         ICM   R0,B'0011',JOEROUT+2 LOAD REMOTE NUMBER
         BZ    CNVDEST6            ZERO, EXIT
CNVDEST5 LA    R1,1(,R1)           INCREMENT TO NEXT CHARACTER
         CLI   1(R1),C' '          END OF NODE NUMBER?
         BNE   CNVDEST5            NO, CONTINUE
         MVI   1(R1),C'R'          SETUP FOR REMOTE NUMBER
         B     CNVDEST2            GO CONVERT REMOTE NUMBER
         SPACE 1
CNVDEST6 MVC   ODEST,COMEWORK      MOVE CONVERTED DEST TO MESSAGE
         EJECT
***********************************************************************
*        SET THE OUTPUT LINE COUNT IN THE MESSAGE                     *
***********************************************************************
         L     R1,JOERECCT         LOAD THE SYSOUT RECORD COUNT
         CVD   R1,$DOUBLE          CONVERT TO PACKED
         MVC   OQTY,=X'40202020202020202120' SET EDIT MASK
         ED    OQTY,$DOUBLE+3      EDIT SYSOUT RECORD COUNT TO MESSAGE
***********************************************************************
*                                                                     *
*        WRITE THE MESSAGE FOR THIS JOE                               *
*                                                                     *
***********************************************************************
         LA    R0,46               WRITE FIRST MESSAGE
         LA    R1,MSG1             LOAD ADDRESS OF MESSAGE
         $CWTO L=(R0),MSG=(R1),MSGID=900  DISPLAY MESSAGE
         CLI   FORMAT,C'S'         IS THIS THE SHORT FORM
         BE    SETFND              YES, BRANCH
         LA    R0,46               SET TO LONG FORM LENGTH
         LA    R1,MSG2             LOAD ADDRESS OF MESSAGE
         $CWTO L=(R0),MSG=(R1),MSGID=900  DISPLAY MESSAGE
SETFND   OI    MISCSW,MATCH        TURN ON MATCH FOUND SWITCH
         B     ENDWORK             GO GET ANOTHER WORK JOE
         EJECT
ENDWORK  DS    0H
         L     R4,JOECHNXT         GET OFFSET OF NEXT WORK JOE
         N     R4,$ZEROFFF         IS THIS THE END OF THE WORK JOES
         BZ    ENDCHAR             YES, BRANCH TO GET NEXT CHAR JOE
         B     WORKJOES            NO, PROCESS NEXT ONE
         EJECT
ENDCHAR  DS    0H
         L     R4,JOEADDR          GET PREV CHARACTERISTICS JOE ADDR
         L     R4,JOENEXT          POINT TO NEXT CHARACTERISTICS JOE
         N     R4,$ZEROFFF         IS THIS THE END OF THE JOE CHAIN
         BZ    ENDJOES             YES, EXIT
         B     CHARJOES            NO, PROCESS NEXT ONE
         EJECT
***********************************************************************
*                                                                     *
*        END OF ALL JOES.  IF NO MESSAGES WERE ISSUED, ISSUE          *
*        A MESSAGE THAT NO OUTPUT WAS QUEUED.                         *
*                                                                     *
***********************************************************************
ENDJOES  TM    MISCSW,MATCH        WAS A MATCH FOUND
         BZ    NOUTPUT             NO, BRANCH
         B     EXIT8               GET OUT
NOUTPUT  $CWTO MSG='NO OUTPUT QUEUED',MSGID=919  ISSUE MESSAGE
         B     EXIT8               GET OUT
         SPACE 1
***********************************************************************
*                                                                     *
*        INVALID $LF OPERAND                                          *
*                                                                     *
***********************************************************************
         SPACE 1
BADOPRND L     R1,0(0,R5)          POINT TO INVALID OPERAND
         MVC   COMMAND(9),0(R1)    MOVE 9 CHARACTERS OF OPERAND TO MSG
         MVC   COMMAND+9(16),=C' INVALID OPERAND' SET ERROR MSG
         LA    R0,25               SET MESSAGE LENGTH
         $CWTO L=(R0),MSGID=950    WRITE ERROR MESSAGE
         B     EXIT8               GET OUT
PRFXCMPR CLC   NAMEPRFX(0),JQEJNAME EXECUTED COMPARE OF JOB NM PREFIX
         EJECT
***********************************************************************
*                                                                     *
*                    E X I T     R O U T I N E S                      *
*                                                                     *
*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *
*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *
*        RC = 08 - TERMINATE WITHOUT ANY MESSAGE                      *
*        RC = 12 - TERMINATE ISSUING THE "OK" MESSAGE                 *
*        RC = 16 - TERMINATE USING A USER SUPPLIED MESSAGE            *
*                                                                     *
***********************************************************************
EXIT0    DS    0H
         LA    R15,0               SET RETURN CODE TO 0
         B     $LFEXIT             RETURN TO MAIN ROUTINE
         SPACE 3
EXIT8    DS    0H
         LA    R15,8               SET RETURN CODE TO 8
         SPACE 3
$LFEXIT  DS    0H
         L     R8,$LFSAVE          RESTORE BAL REGISTER
         BR    R8                  RETURN TO MAIN ROUTINE
         EJECT
         LTORG
         EJECT
$LFWORK  DS    0F                  COMMAND WORK AREA
JOEADDR  DS    F                   REGISTER SAVE AREA
JTYPE    DS    C                   JOB TYPE (* OR JQEFLAG VALUE)
FORMAT   DS    C                   DISPLAY FORMAT (S / L)
MISCSW   DS    X                   MISCELLANEOUS SWITCHES
TWOPART  EQU   X'80'               TWO PART DESTINATION SPECIFIED
MATCH    EQU   X'40'               MATCH FOR OUTPUT FOUND
NUMCLASS DS    X                   NUMBER OF OUTPUT CLASSES FOLLOWING
OUTCLASS DS    CL8                 JOB OUTPUT CLASS / *
SAVEFORM DS    CL8                 SAVE FORM IT
CMPRSIZ  DS    X                   MACHINE LENGTH FOR PRFX CMPR INS.
NAMEPRFX DS    CL8                 NAME PREFIX
LOWJOB   DS    H                   LOW JOB NUMBER FOR SEARCH
HIGHJOB  DS    H                   HIGH JOB NUMBER FOR SEARCH
LOWROUT  DS    F                   LOW ROUTE CODE FOR SEARCH
HIGHROUT DS    F                   HIGH ROUTE CODE FOR SEARCH
DEST1P1  DS    CL10                BEGINNING DEST PART 1
DEST1P2  DS    CL10                BEGINNING DEST PART 2
DEST2P1  DS    CL10                ENDING DEST PART 1
MESSAGE  DS    CL100               MESSAGE WORK AREA
WORKLEN  EQU   *-$LFWORK           LENGTH OF WORK AREA
*
MSG1     EQU   MESSAGE             FIRST MESSAGE
OJNAME   EQU   MESSAGE,8           OUTPUT JOBNAME
OBUSYIND EQU   MESSAGE+8,1         OUTPUT BUSY (PRINTING/PUNCHING)
OJOBNO   EQU   MESSAGE+8,8         OUTPUT JOB NUMBER
ODEST    EQU   MESSAGE+16,10       OUTPUT DESTINATION
OFORM    EQU   MESSAGE+28,8        OUTPUT FORM
OQTY     EQU   MESSAGE+36,10       OUTPUT NUMBER OF LINES/CARDS
MSG2     EQU   MESSAGE+46          FIRST MESSAGE
OCLASS   EQU   MESSAGE+57,1        OUTPUT CLASS
OFCB     EQU   MESSAGE+65,4        OUTPUT FCB
OUCS     EQU   MESSAGE+72,4        OUTPUT UCS
OOVLY    EQU   MESSAGE+79,4        OUTPUT OVERLAY
OBURST   EQU   MESSAGE+86,1        OUTPUT BURST INDICATOR
OHOLDIND EQU   MESSAGE+88,4        OUTPUT HOLD INDICATOR
         EJECT
         SPACE 3
*             CLASS IN MSG BELOW WILL BE REPLACED BY L OR F
* $TPRTMSG DC C'PLEASE REENTER THE COMMAND WITHOUT CLASS X'
* $TPRTEMS DC C'CLASS E ONLY GOES ON PRINTER12'
PWDMISS  DC C'PLEASE REENTER THE COMMAND WITH THE PASSWORD'
PWDWRONG DC C'INVALID PASSWORD'
         LTORG
         EJECT
         $MODEND
         END
