*          DATA SET PUT1A003   AT LEVEL 001 AS OF 02/06/91
*          DATA SET PUT1A003   AT LEVEL 004 AS OF 02/06/91
PUT1A003 TITLE 'PUT1A003  -  COPY TEMPORARY DATA SET INTO SPF MEMBER'
***********************************************************************
*                                                                     *
*                                                                     *
*        PURPOSE/FUNCTION:                                            *
*                                                                     *
*              1. COPY A 'CARD' DECK FROM A TEMPORARY DATA SET INTO   *
*                 AN SPF LIBRARY, MAINTAINING INTEGRITY BY            *
*                 ENQUEUING ON 'SPFEDIT' /DSNAME                      *
*                 IF NON-REPLACEMENT IS REQUIRED A PARM OF            *
*                 NOREPLACE CAN BE CODED TO CAUSE AN ABEND 11 AND     *
*                 NON-REPLACEMENT IF THE MEMBER ALREADY EXISTS        *
*        OUTPUT:                                                      *
*              PDS MEMBER                                             *
*              DIRECTORY ENTRY                                        *
*                                                                     *
*        RETURN CODES:                                                *
*              0 = NORMAL COMPLETION                                  *
*              4 = SPF LIBRARY DIRECTORY WAS FULL OR DIRECTORY I/O    *
*                  ERROR OCCURRED                                     *
*                                                                     *
*        DATA SETS REQUIRED:                                          *
*              SYSPRINT - DATA SET TO RECEIVE MESSAGES                *
*              SYSUT1 - DATA SET CONTAINING OBJECT DECK               *
*              SYSUT2 - PDS TO RECEIVE OBJECT DECK                    *
*                                                                     *
*                                                                     *
*        REGISTER USAGE:                                              *
*              R12 - BASE REGISTER (RBASE)                            *
*              R13 - SAVE/WORK AREA POINTER (RSAVE)                   *
*                                                                     *
*                                                                     *
*        ABEND CODES:                                                 *
*              2 - SYSPRINT DATA SET WOULD NOT OPEN                   *
*              3 - MEMBER NOT GIVEN ON SYSUT2 DD STATEMENT            *
*              4 - SYSUT1 DATA SET WOULD NOT OPEN                     *
*              5 - SYSUT2 DATA SET WOULD NOT OPEN                     *
*              6 - IMPOSSIBLE RETURN FROM STOW                        *
*                                                                     *
***********************************************************************
*  CHANGES IN 1991                                                    *
*  JAN 02 - FEB 06 - UPGRADE MOST TAGS TO TAKE ADVANTAGE OF ASSEM H.  *
*                    ADD NOREPLACE OPTION WITH ABEND IF DUPLICATE     *
*                    REMOVE RESERVE SINCE ENQUEUE IS DONE BEFORE OPEN *
*                        AND TESTS CAN CAUSE ABEND                    *
*                    REMOVE USE OF IEFUCBOB AND IEZDEB MACROS SINCE   *
*                        RESERVE NOT USED.                            *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*              MACRO DEFINITIONS                                      *
*                                                                     *
***********************************************************************
         MACRO
         XRABEND &N,&DUMP,&STEP
XRABEND&N ABEND &N,&DUMP,&STEP
         MEND
         EJECT
***********************************************************************
*                                                                     *
*              REGISTER EQUATES                                       *
*                                                                     *
***********************************************************************
PUT1A003 CSECT
R0                 EQU  0
R1                 EQU  1
R2                 EQU  2
R3                 EQU  3
R4                 EQU  4
R5                 EQU  5
R6                 EQU  6
R7                 EQU  7
R8                 EQU  8
R9                 EQU  9
R10                EQU  10
R11                EQU  11
R12                EQU  12
R13                EQU  13
R14                EQU  14
R15                EQU  15
RPARM              EQU  R1              POINTER TO PARM INFORMATION
RBASE              EQU  R12             BASE REGISTER
RSAVE              EQU  R13             SAVE/WORK AREA POINTER
         EJECT
***********************************************************************
*                                                                     *
*              PUT1A003 ENTRY POINT                                   *
*                                                                     *
***********************************************************************
XR000    STM   R14,R12,12(R13)          SAVE REGISTERS
         LR    RBASE,R15                SET UP BASE REGISTER
         LR    R2,RPARM                 SAVE PARM ADDRESS
         USING XR000,RBASE
         GETMAIN R,LV=XR_WORK_LENGTH    GET CORE FOR SAVE/WORK AREA
         ST    R1,8(0,R13)              LINK BOTH
         ST    R13,4(0,R1)              SAVEAREAS
         LR    RSAVE,R1                 GET ADDR OF SAVE/WORK AREA
         USING XRWORK,RSAVE
         MVI   XW_REPLACE_SWITCH,C'Y'   SET THE REPLACE SWITCH TO THE
*                                         DEFAULT OF Y (YES-REPLACE)
         L     R1,0(,R2)                GET ADDRESS OF THE PARM AREA
         LH    R3,0(,R1)                IF THE PARM SIZE IS ZERO,
         LTR   R3,R3                      ASSUME THE DEFAULT OF
         BZ    XR_PARM_DONE               REPLACE
         CH    R3,=H'7'                 IF THE PARM SIZE IS 7 AND THE
         BNE   XR_CHK_NO_REPLACE          PARM IS REPLACE, VALUE IS OK
         CLC   =C'REPLACE',2(R1)          ELSE IF THE SIZE IS 7 IT IS
         BE    XR_PARM_DONE               BAD
         B     XR_BAD_PARM
XR_CHK_NO_REPLACE  DS  0H
         CH    R3,=H'9'                 IF THE PARM SIZE ISN'T 9, THE
         BNE   XR_BAD_PARM                PARM IS BAD
         CLC   =C'NOREPLACE',2(R1)      IF THE PARM ISN'T NOREPLACE
         BNE   XR_BAD_PARM                THE PARM IS BAD
         MVI   XW_REPLACE_SWITCH,C'N'   SET THE REPLACE SWITCH TO N
XR_PARM_DONE       DS 0H
         MVI   XW_FLAG_BYTE_2,0         CLEAR FLAGS
         MVC   XW_MEMBER_NAME,XC_BLANKS INITIALIZE OBJECT DECK ID
         EJECT
***********************************************************************
*                                                                     *
*              OPEN DATA SETS                                         *
*                                                                     *
***********************************************************************
         MVC   XW_SYSPRINT_DCB,SYSPRINT INSTALL DCB IN WORKAREA
         LA    R1,XW_SYSPRINT_DCB       GET DCB ADDR
         ST    R1,XW_DCB_ADDR_LIST      STORE DCB ADDRS IN OPEN PLIST
         OC    XW_DCB_ADDR_LIST,XC_SYSPRT_OPN_LST OR IN FLAG BYTES
         OPEN  MF=(E,XW_DCB_ADDR_LIST)  OPEN LISTING DCBS
         USING IHADCB,R1
         LA    R1,XW_SYSPRINT_DCB       GET DCB ADDR
         TM    DCBOFLGS,X'10'           DID DCB OPEN?
         BNO   XR_ABEND_WTO_2           BRANCH IF NO - ABEND
         EJECT
***********************************************************************
*                                                                     *
*              COPY OBJECT DECK TO LIBRARY                            *
*                                                                     *
***********************************************************************
         MVC   XW_SYSUT1_DCB,SYSUT1     INSTALL DCB IN WORKAREA
         MVC   XW_SYSUT2_DCB,SYSUT2     INSTALL DCB IN WORKAREA
         LA    R0,XW_SYSUT1_DCB         GET DCB ADDR
         LA    R1,XW_SYSUT2_DCB         GET DCB ADDR
         STM   R0,R1,XW_DCB_OPN_CLS_LST STORE DCB ADDRS IN OPEN PLIST
         OC    XW_DCB_OPN_CLS_LST,XC_SYSUT2_OPN_LST OR IN FLAG BYTES
         USING IHADCB,R1
         LA    R0,XW_DCB_EXIT_LIST      GET ADDR OF DCB EXIT LIST
         O     R0,DCBRECFM              OR IN RECFM BITS
         ST    R0,DCBEXLST              STORE EXIT LIST ADDR / RECFM
         DROP  R1
         LA    R0,XW_JFCB               GET JFCB AREA ADDR
         ST    R0,XW_DCB_EXIT_LIST      STORE JFCB ADDR IN EXIT LIST
         MVI   XW_DCB_EXIT_LIST,X'87'   SET JFCB AREA/END OF LIST BITS
         XC    XW_JFCB,XW_JFCB          ZERO OUT JFCB
         RDJFCB MF=(E,XW_DCB_OPN_CLS_LST+4) READ IN JFCB
         NC    XW_JFCB,XW_JFCB          IS JFCB STILL ZERO?
         BZ    XR_ABEND_WTO_5           BRANCH IF YES - NO JFCB - ABEND
         CLC   JFCBELNM,XC_BLANKS       MEMBER SPECIFIED?
         BE    XR_ABEND_WTO_3           BRANCH IF NO - ABEND
         MVC   XW_MEMBER_NAME,JFCBELNM  SAVE MEMBER NAME
         NC    JFCBLKSI,JFCBLKSI        IF BLKSIZE NOT ZERO GO TO
         BNZ   XR_ABEND_WTO_7             ABEND7
         NC    JFCLRECL,JFCLRECL        IF LRECL NOT ZERO GO TO ABEND7
         BNZ   XR_ABEND_WTO_7
         CLI   JFCRECFM,X'00'           IF RECFM NOT LOW-VALUE GO TO
         BNZ   XR_ABEND_WTO_8             ABEND8
         BAL   R14,XR_ENQUEUE_SYSUT2    ENQ ON SYSUT2
         OPEN  MF=(E,XW_DCB_OPN_CLS_LST) OPEN DCB FOR SYSUT1 & SYSUT2
         USING IHADCB,R6
         LA    R6,XW_SYSUT1_DCB         GET DCB ADDR
         TM    DCBOFLGS,X'10'           DID DCB OPEN?
         BNO   XRABEND4                 BRANCH IF NO - ABEND
         LA    R6,XW_SYSUT2_DCB         GET DCB ADDR
         TM    DCBOFLGS,X'10'           DID DCB OPEN?
         BNO   XR_ABEND_WTO_5           BRANCH IF NO - ABEND
         CLI   XW_REPLACE_SWITCH,C'N'   BYPASS BLDL IF REPLACE ALLOWED
         BNE   XR_GET_SYSUT2_BUF
         LA    R15,1
         STH   R15,XW_BLDL_COUNT
         LA    R15,74
         STH   R15,XW_BLDL_ENTRY_LEN
         BLDL  (R6),XW_BLDL_LIST       DO THE BLDL FOR SYSUT2
         LTR   R15,R15                 IF ENTRY FOUND GO TO ABEND FOR
         BZ    XR_DUPLICATE_ENTRY        DUPLICATE
         C     R15,=F'4'               IF RETURN CODE IS NOT 4 GO TO
         BNE   XR_BAD_DIRECT_READ         ABEND FOR BAD READ
XR_GET_SYSUT2_BUF  DS  0H
         LH    R0,DCBBLKSI              GET SIZE OF A BLOCK
         DROP  R6
         GETMAIN R,LV=(0)               GET BUFFER OF APPROPRIATE SIZE
         ST    R1,XW_SYSUT2_BUF_ADDR    SAVE BUFFER ADDRESS
         BAL   R14,XR_SYSUT2_SET_PTRS   GO SET UP BUFFER POINTERS
         MVC   XW_SYSUT2_DECB,XRWRITE   INSTALL DECB IN WORKAREA
         EJECT
***********************************************************************
*                                                                     *
*              COPY OBJECT DECK                                       *
*                                                                     *
***********************************************************************
XR_READ_CARD       DS  0H
         BAL   R14,XR_READ_SYSUT1       READ A CARD
         BAL   R14,XR_WR_SYSUT2_REC WRITE IT OUT
         B     XR_READ_CARD             LOOP TIL EOF
         EJECT
***********************************************************************
*                                                                     *
*              STOW MEMBER IN DIRECTORY                               *
*                                                                     *
***********************************************************************
XR_END_CARD_RTN    DS  0H
         XC    XW_STOW_TTRC,XW_STOW_TTRC CLEAR TTR AND CONTROL BYTE
         OI    XW_FLAG_BYTE_2,XW_CLEAR_BUFFER
*                                     INDICATE FLUSH OF SHORT BUFFER
         BAL   R14,XR_WR_SYSUT2_REC WRITE IT OUT
         STOW  XW_SYSUT2_DCB,XW_STOW_ADDR_LIST,R
*                                       STOW MEMBER NAME/TTR/STAMP
         B     XR_STOW_BRANCH_TBL(R15)  BRANCH ON STOW RETURN CODE
XR_STOW_BRANCH_TBL DS  0H               MEMBER REPLACED
         B     XR_MEMBER_REPLACED       MEMBER REPLACED
         B     XR_ABEND_WTO_6           IMPOSSIBLE CONDITION WITH R OPT
         B     XR_MEMBER_ADDED          MEMBER ADDED - NOT FOUND
         B     XR_DIRECTORY_FULL        DIRECTORY FULL
         B     XR_DIRECTRY_IO_ERR       DIRECTORY I/O ERROR
XR_MEMBER_REPLACED DS  0H               POINT TO MESSAGE
         LA    R2,XC_MEMBR_REPL_MSSG    POINT TO MESSAGE
         LA    R3,L'XC_MEMBR_REPL_MSSG-1 GET MSG LEN MINUS ONE FOR EX
         B     XR_PRINT_MESSAGE         GO PRINT MESSAGES
XR_MEMBER_ADDED    DS 0H
         LA    R2,XC_MEMBR_ADD_MSSG POINT TO MESSAGE
         LA    R3,L'XC_MEMBR_ADD_MSSG-1 GET MSG LEN MINUS ONE FOR EX
         B     XR_PRINT_MESSAGE         GO PRINT MESSAGES
XR_DIRECTORY_FULL  DS  0H               POINT TO MESSAGE
         LA    R2,XC_DIRECT_FUL_MSSG    POINT TO MESSAGE
         LA    R3,L'XC_DIRECT_FUL_MSSG-1 GET MSG LEN MINUS ONE FOR EX
         OI    XW_FLAG_BYTE_2,XW_DIRECTORY_ERROR OBJLIB DIRECTORY ERROR
         B     XR_PRINT_MESSAGE         GO PRINT MESSAGE
XR_DIRECTRY_IO_ERR DS  0H
         LA    R2,XC_IO_ERROR_MSSG POINT TO MESSAGE
         LA    R3,L'XC_IO_ERROR_MSSG-1  GET MSG LEN MINUS ONE FOR EX
         OI    XW_FLAG_BYTE_2,XW_DIRECTORY_ERROR OBJLIB DIRECTORY ERROR
         B     XR_PRINT_MESSAGE         GO PRINT MESSAGE
XR_PRINT_MESSAGE   DS  0H
         MVI   XW_PRINT_LINE,C' '       BLANK OUT PRINT LINE
         MVC   XW_PRINT_LINE+1(L'XW_PRINT_LINE-1),XW_PRINT_LINE
         EX    R3,XR_MOVE_BUF_MSSG      MOVE MESSAGE INTO LIST BUFFER
         MVI   XW_PRINT_CTL_CHR,XR_PAGE_EJECT FORCE EJECT ON NEXT WRITE
         MVC   XW_PRINT_LINE+8(8),XW_MEMBER_NAME INSERT OBJECT ID
         BAL   R14,XR_WRITE_PRINT       OUTPUT MESSAGE
         EJECT
***********************************************************************
*                                                                     *
*              CLOSE/DEQ OBJECT DATA SETS AND FREE OBJECT BUFFER      *
*                                                                     *
***********************************************************************
         LA    R1,XW_SYSUT2_DCB         GET DCB ADDRESS
         USING IHADCB,R1
         LH    R0,DCBBLKSI              GET BLOCKSIZE (BUFFER SIZE)
         DROP  R1
         L     R1,XW_SYSUT2_BUF_ADDR    GET BUFFER ADDRESS
         FREEMAIN R,LV=(0),A=(1)        FREE OBJECT BUFFER
         CLOSE MF=(E,XW_DCB_OPN_CLS_LST) CLOSE OBJECT DATA SETS
         DEQ   MF=(E,XW_ENQ_DEQ_WORK)   DEQ ON OBJECT LIBRARY
         FREEPOOL XW_SYSUT1_DCB         FREE BUFFER POOL FOR SYSUT1 DS
         EJECT
***********************************************************************
*                                                                     *
*              CLOSE LISTING DATA SET                                 *
*                                                                     *
***********************************************************************
         CLOSE MF=(E,XW_DCB_ADDR_LIST)  CLOSE LISTING DATA SET
         FREEPOOL XW_SYSPRINT_DCB       FREE BUFFER POOL FOR SYSPRINT
         EJECT
***********************************************************************
*                                                                     *
*              TERMINATION                                            *
*                                                                     *
***********************************************************************
         L     R2,4(0,RSAVE)            GET PREVIOUS SAVEAREA ADDRESS
         SR    R15,R15                  SET RETURN CODE TO ZERO
         TM    XW_FLAG_BYTE_2,XW_DIRECTORY_ERROR
*                                      DID OBJLIB PDS DIR ERROR OCCUR?
         BZ    XR_END_JOB_1             BRANCH IF NO - RTN CODE = 0
         LA    R15,4                    YES - RETURN CODE = 4
XR_END_JOB_1       DS  0H               SAVE RTN CODE ACROSS FREEMAIN
         LR    R3,R15                   SAVE RTN CODE ACROSS FREEMAIN
         FREEMAIN R,LV=XR_WORK_LENGTH,A=(RSAVE) FREE SAVE/WORK AREA
         LR    R15,R3                   SET RETURN CODE
         LR    R13,R2                   SET SAVEAREA ADDRESS
         L     R14,12(0,R13)            GET RETURN ADDRESS
         LM    R0,R12,20(R13)           RESTORE REGISTERS
         BR    R14                      RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*              WRITE LISTING DATA SET                                 *
*                                                                     *
***********************************************************************
XR_WRITE_PRINT     DS  0H
         LA    R0,XW_PRINT_LINE         GET ADDRESS OF LISTING BUFFER
         ST    R14,XW_IO_ROUT_RETURN SAVE RETURN ADDRESS
         PUT   XW_SYSPRINT_DCB,(0)      PUT A LINE TO THE LISTING
         L     R14,XW_IO_ROUT_RETURN GET RETURN ADDRESS
         BR    R14                      RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*              READ OBJECT DATA SET                                   *
*                                                                     *
***********************************************************************
XR_READ_SYSUT1     DS  0H
         ST    R14,XW_IO_ROUT_RETURN SAVE RETURN ADDRESS
         GET   XW_SYSUT1_DCB,XW_INP_REC_WORK
*                                    GET A CARD FROM THE OBJECT DECK
         L     R14,XW_IO_ROUT_RETURN GET RETURN ADDRESS
         BR    R14                      RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*              WRITE OBJECT DATA SET                                  *
*                                                                     *
***********************************************************************
XR_WR_SYSUT2_REC   DS  0H
         ST    R14,XW_IO_ROUT_RETURN SAVE RETURN ADDRESS
         STM   R3,R5,XW_IO_REG_SAVE    SAVE WORK REGISTERS
         LM    R3,R5,XW_BUFFR_REG_SAVE  LOAD BUFFER CONTROL REGISTERS
         TM    XW_FLAG_BYTE_2,XW_CLEAR_BUFFER
*                                      IS THIS A BUFFER FLUSH CALL?
         BO    XR_WR_SYSUT2_SHORT       BRANCH IF YES
         MVC   0(L'XW_INP_REC_WORK,R3),XW_INP_REC_WORK
*                                            MOVE CARD IMAGE TO BUFFER
         BXLE  R3,R4,XR_SYSUT2_FILL_BUFF BRANCH IF NOT END OF BUFFER
         B     XR_WR_SYSUT2_FULL        GO OUTPUT FULL BUFFER
XR_WR_SYSUT2_SHORT DS  0H
         S     R3,XW_SYSUT2_BUF_ADDR    GET SIZE OF SHORT BUFFER
         BZ    XR_SET_SYSUT2_REGS       BRANCH IF NOTHING TO FLUSH
         LA    R4,XW_SYSUT2_DCB         GET DCB ADDR
         USING IHADCB,R4
         LH    R5,DCBBLKSI              GET STANDARD BLOCKSIZE
         STH   R3,DCBBLKSI              STORE SHORT BLOCKSIZE
XR_WR_SYSUT2_FULL  DS  0H
         L     R3,XW_SYSUT2_BUF_ADDR    POINT TO OUTPUT BUFFER
         WRITE XW_SYSUT2_DECB,SF,XW_SYSUT2_DCB,(R3),MF=E
*                                               WRITE OUT THE BLOCK
         CHECK XW_SYSUT2_DECB           WAIT FOR COMPLETION
         TM    XW_FLAG_BYTE_2,XW_CLEAR_BUFFER
*                                      IS THIS A BUFFER FLUSH CALL?
         BNO   XR_SYSUT2_FILL_BUFF      BRANCH IF NO
         NI    XW_FLAG_BYTE_2,X'FF'-XW_CLEAR_BUFFER RESET FLUSH FLAG
         STH   R5,DCBBLKSI              RESET ORIGINAL BLOCKSIZE
         DROP  R4
XR_SYSUT2_FILL_BUFF DS 0H
         STM   R3,R5,XW_BUFFR_REG_SAVE  SAVE NEW BUFFER CONTROL REGS
         LM    R3,R5,XW_IO_REG_SAVE    RESTORE WORK REGISTERS
         L     R14,XW_IO_ROUT_RETURN GET RETURN ADDRESS
         BR    R14
XR_SYSUT2_SET_PTRS DS  0H
         STM   R3,R5,XW_IO_REG_SAVE    SAVE WORK REGISTERS
         ST    R14,XW_IO_ROUT_RETURN SAVE RETURN ADDRESS
XR_SET_SYSUT2_REGS DS  0H
         L     R3,XW_SYSUT2_BUF_ADDR    GET ADDRESS OF BUFFER
         LA    R4,L'XW_INP_REC_WORK     GET LRECL
         LR    R5,R3
         USING IHADCB,R14
         LA    R14,XW_SYSUT2_DCB        GET DCB ADDR
         AH    R5,DCBBLKSI              GET END OF BUFFER ADDR
         SR    R5,R4                    POINT TO LAST RECORD IN BUFFER
         DROP  R14
         STM   R3,R5,XW_BUFFR_REG_SAVE  SET BUFFER CONTROL REGISTERS
         LM    R3,R5,XW_IO_REG_SAVE    RESTORE WORK REGISTERS
         L     R14,XW_IO_ROUT_RETURN GET RETURN ADDRESS
         BR    R14                      RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*              ENQ ON SYSUT2 DATA SET                                 *
*                                                                     *
***********************************************************************
*
XR_ENQUEUE_SYSUT2  DS  0H
         ST    R14,XW_IO_ROUT_RETURN         SAVE RETURN ADDRESS
         MVC   XW_ENQ_DEQ_WORK(XC_ENQ_LIST_LENGTH),XC_ENQUEUE_LIST
*                                      MOVE ENQ LIST TO WORKAREA
         ENQ   (,XW_JFCB),MF=(E,XW_ENQ_DEQ_WORK) ENQ ON SPF DATA SET
XR_ENQUEUE_EXIT    DS  0H
         L     R14,XW_IO_ROUT_RETURN         RETURN TO CALLER
         BR    R14
         EJECT
***********************************************************************
*                                                                     *
*              ABEND ROUTINES                                         *
*                                                                     *
***********************************************************************
XR_ABEND_WTO_2     DS  0H
         WTO   'PUT1A003 - SYSPRINT WILL NOT OPEN '
         XRABEND 2                      SYSPRINT WOULD NOT OPEN
XR_ABEND_WTO_3     DS  0H
         WTO   'PUT1A003 - NO MEMBER NAME FOR SYSUT2'
         XRABEND 3                      SYSUT2 MEMBER NOT GIVEN
XR_ABEND_WTO_4     DS  0H
         WTO   'PUT1A003 - SYSUT1 WILL NOT OPEN'
         XRABEND 4                      SYSUT1 WOULD NOT OPEN
XR_ABEND_WTO_5     DS  0H
         WTO   'PUT1A003 - SYSUT2 WILL NOT OPEN'
         XRABEND 5                      SYSUT2 WOULD NOT OPEN
XR_ABEND_WTO_6     DS  0H
         WTO   'PUT1A003 - BAD RETURN FROM DIRECTORY UPDATE'
         XRABEND 6                      BAD DIRECTORY UPDATE
XR_ABEND_WTO_7     DS  0H
         WTO   'PUT1A003 - SYSUT2 JCL BLKSIZE OR LRECL NOT ZERO'
         XRABEND 7                      BLKSIZE OR LRECL IN JCL
XR_ABEND_WTO_8     DS  0H
         WTO   'PUT1A003 - SYSUT2 RECFM IN JCL'
         XRABEND 8                      RECFM IN JCL ABEND
XR_BAD_PARM        DS  0H
         WTO   'PUT1A003 - PARM NOT BLANK, REPLACE OR NOREPLACE'
         XRABEND 9                      RECFM IN JCL ABEND
XR_BAD_DIRECT_READ DS  0H
         WTO   'PUT1A003 - BAD READ OF DIRECTORY FOR FILE SPECIFIED IN *
               SYSUT2'
         XRABEND 10                     RECFM IN JCL ABEND
XR_DUPLICATE_ENTRY DS  0H
         WTO   'PUT1A003 - NOREPLACE SPECIFIED, MEMBER ALREADY IN THE L*
               IBRARY SPECIFIED BY SYSUT2'
         XRABEND 11                     DUPLICATE ENTRY ABEND
         EJECT
***********************************************************************
*                                                                     *
*              CONSTANTS                                              *
*                                                                     *
***********************************************************************
XC_BLANKS DC   CL8' '
XC_ENQUEUE_QNAME   DC  CL8'SPFEDIT '    QNAME FOR ENQ/DEQ OF OBJ
XC_MEMBR_REPL_MSSG DC  C'MEMBER XXXXXXXX REPLACED IN LIBRARY'
XC_MEMBR_ADD_MSSG  DC  C'MEMBER XXXXXXXX ADDED TO LIBRARY'
XC_DIRECT_FUL_MSSG DC  C'MEMBER XXXXXXXX NOT USABLE - DIRECTORY FULL'
XC_IO_ERROR_MSSG   DC                                                  *
               C'MEMBER XXXXXXXX NOT USABLE - DIRECTORY I/O ERROR'
         EJECT
***********************************************************************
*                                                                     *
*              OPEN/CLOSE, ENQ/DEQ AND WRITE PARAMETER LISTS          *
*                                                                     *
***********************************************************************
*                                      OPEN LIST FOR LISTING DCBS
XC_SYSPRT_OPN_LST OPEN (0,(OUTPUT)),MF=L
XC_SYSPRT_OPN_LSTL EQU *-XC_SYSPRT_OPN_LST
*                                      OPEN LIST FOR OBJECT DCBS
XC_SYSUT2_OPN_LST OPEN (0,(INPUT),0,(OUTPUT)),MF=L
XC_SYSUT2_OPN_LSTL EQU  *-XC_SYSUT2_OPN_LST
*              ENQ/DEQ LIST FOR OBJ/XSYM
XC_ENQUEUE_LIST    ENQ (XC_ENQUEUE_QNAME,0,E,44,SYSTEM),MF=L
XC_ENQ_LIST_LENGTH EQU *-XC_ENQUEUE_LIST
*              RESERVE LIST
XC_RESERVE_LIST    RESERVE (XC_ENQUEUE_QNAME,0,E,44,SYSTEMS),          *
               UCB=0,MF=L
XC_RESERV_LST_LNGTH EQU *-XC_RESERVE_LIST
         WRITE XRWRITE,SF,MF=L          WRITE LIST FOR OBJECT DATE SET
XC_SYSUT2_DECB_LNGTH EQU *-XRWRITE
         EJECT
***********************************************************************
*                                                                     *
*              EXECUTED INSTRUCTIONS                                  *
*                                                                     *
***********************************************************************
XR_MOVE_BUF_MSSG MVC XW_PRINT_LINE+1(0),0(R2)
*                             MOVE MESSAGE INTO LIST BUFFER
         EJECT
***********************************************************************
*                                                                     *
*              LITERAL POOL                                           *
*                                                                     *
***********************************************************************
         LTORG
         EJECT
***********************************************************************
*                                                                     *
*              DCB FOR WRITING LISTING                                *
*                                                                     *
***********************************************************************
SYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,BLKSIZE=121,LRECL=121,         *
               MACRF=(PM),RECFM=FM
SYSPRINT_DCB_LNGTH EQU *-SYSPRINT
         EJECT
***********************************************************************
*                                                                     *
*              DCB FOR READING OBJECT DECK                            *
*                                                                     *
***********************************************************************
SYSUT1   DCB   DDNAME=SYSUT1,DSORG=PS,EODAD=XR_END_CARD_RTN,LRECL=80,  *
               MACRF=(GM),RECFM=FB
SYSUT1_DCB_LENGTH EQU *-SYSUT1
         EJECT
***********************************************************************
*                                                                     *
*              DCB FOR WRITING OBJECT MEMBER                          *
*                                                                     *
***********************************************************************
SYSUT2   DCB   DDNAME=SYSUT2,DSORG=PO,LRECL=80,MACRF=(W),RECFM=FB,     *
               EXLST=0
SYSUT2_DCB_LENGTH EQU *-SYSUT2
         EJECT
***********************************************************************
*                                                                     *
*              SAVE/WORK AREA DSECT                                   *
*                                                                     *
***********************************************************************
XRWORK   DSECT
XW_SAVE_AREA       DS  18F              STANDARD OS SAVEAREA
XW_IO_ROUT_RETURN  DS  F                RTN ADDR FROM I/O ROUTINES
XW_BUFFR_REG_SAVE  DS  3F               OBJLIB BUFFER CONTROL REGISTERS
XW_IO_REG_SAVE     DS  3F               I/O ROUTINE WORKREG SAVEAREA
*                                      LISTING DCBS OPEN/CLOSE LIST
XW_DCB_ADDR_LIST   DS  XL(XC_SYSPRT_OPN_LSTL)
*                                      OBJECT DCBS OPEN/CLOSE LIST
XW_DCB_OPN_CLS_LST DS  XL(XC_SYSUT2_OPN_LSTL)
XW_DCB_EXIT_LIST   DS  A                XSYMBOL/SYSUT2 DCB EXIT LIST
XW_SYSUT2_BUF_ADDR DS  A                ADDRESS OF OBJLIB OUTPUT BUFFER
                   DS  0F
*                          LIST AREA FOR BLDL SEARCH
XW_BLDL_LIST       DS  0CL76
XW_BLDL_COUNT      DS  H
XW_BLDL_ENTRY_LEN  DS  H
XW_STOW_ADDR_LIST  DS  0XL12            STOW LIST
XW_MEMBER_NAME     DS  CL8              OBJECT ID
XW_STOW_TTRC       DS  XL4              TTR AND CONTROL BYTE
XW_FLAG_BYTE_2     DS  X                SECOND FLAG BYTE
XW_CLEAR_BUFFER    EQU  X'10'           CLEAR OBJLIB SHORT BUFFER
XW_DIRECTORY_ERROR EQU  X'04'           OBJLIB DIRECTORY WAS FULL OR
*                                       DIRECTORY I/O ERROR OCCURRED
                   DS  XL62             USER AREA FOR DIRECTORY ENTRY
*
                   DS  0F
*                                      DECB FOR OBJECT LIBRARY WRITES
XW_SYSUT2_DECB     DS  XL(XC_SYSUT2_DECB_LNGTH)
                   DS  0F
XW_SYSPRINT_DCB    DS  XL(SYSPRINT_DCB_LNGTH) LISTING OUTPUT DCB
                   DS  0F
XW_SYSUT1_DCB      DS  XL(SYSUT1_DCB_LENGTH) OBJECT INPUT DCB
                   DS  0F
XW_SYSUT2_DCB      DS  XL(SYSUT2_DCB_LENGTH) OBJECT OUTPUT DCB
                   DS  0F
XW_JFCB            DS  0XL176           OBJECT JFCB
         IEFJFCBN LIST=YES
XW_INP_REC_WORK    DS  XL80             OBJECT DECK CARD INPUT AREA
*                                      SYSUT2 ENQ/DEQ/RESERVE PARMS
XW_ENQ_DEQ_WORK    DS  XL(XC_RESERV_LST_LNGTH)
XW_PRINT_LINE      DS  0CL121           LISTING INPUT/OUTPUT AREA
XW_PRINT_CTL_CHR   DS  C                CONTROL CHARACTER
XW_PRINT_DETAIL    DS  CL120            DATA AREA OF PRINT LINE
XW_REPLACE_SWITCH  DS  C
XR_PAGE_EJECT      EQU  X'89'           SKIP TO CH1 AFTER PRINTING
XR_WORK_LENGTH     EQU  *-XRWORK
         EJECT
***********************************************************************
*                                                                     *
*              DSECT FOR DCB                                          *
*                                                                     *
***********************************************************************
         DCBD  DSORG=PS,DEVD=DA
         LUT1A001 STAMP='037PUT1A003  02/06/91  9.34.18  '
         END   PUT1A003
