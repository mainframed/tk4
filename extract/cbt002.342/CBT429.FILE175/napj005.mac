++ USERMOD (NAPJ005) .
++ VER (Z038) FMID(HJE2221).
++JCLIN.
//STEP1    EXEC PGM=IEV90
//SYSPUNCH DD  DSN=&&PUNCH(J2XIT06),DISP=SHR
//SYSIN  DD  SYS1.JES2SRC(J2XIT06),DISP=SHR
//STEP2    EXEC PGM=IEWL,PARM='RENT'
//SYSPUNCH DD  DSN=&&PUNCH(J2XIT06),DISP=SHR
//SYSLMOD  DD  DSN=SYS1.JES2LIB,DISP=SHR
//SYSLIN  DD  *
  INCLUDE SYSPUNCH(J2XIT06)
  NAME J2XIT06(R)
++SRC (J2XIT06) DISTLIB(JES2SRC).
*          DATA SET J2XIT06    AT LEVEL 047 AS OF 07/07/89
EXIT     TITLE 'PHILIPS LIGHTING (SHARE CD WEJ)  LOCAL HASP EXIT 6, CON*
               VERTER JCL VALIDATION'
         SPACE 5
         COPY  $HASPGBL
J2XIT06  $MODULE TITLE='PHILIPS LIGHTING (WEJ) HASP EXIT ROUTINES',    X
               CVT,                GENERATE OS CVT DSECT               X
               DEB,                GENERATE OS DEB DSECT               X
               KEYS,               GENERATE OS KEYS DSECT              X
               NEL,                GENERATE OS NEL DSECT               X
               PSA,                GENERATE OS PSA DSECT               X
               RESPA,              GENERATE JES FSI RESPA DSECT        X
               RPL,                GENERATE OS RPL DSECT               X
               SDWA,               GENERATE OS SDWA DSECT              X
               TEXT,               GENERATE OS TEXT DSECT              X
               WPL,                GENERATE OS WPL DSECT               X
               $BUFFER,            GENERATE HASP BUFFER DSECT          X
               $CAT,               GENERATE HASP CAT DSECT             X
               $CMB,               GENERATE HASP CMB DSECT             X
               $CNVWORK,           GENERATE HASP CNVWORK DSECT         X
               $COMWORK,           GENERATE HASP COMWORK DSECT         X
               $DCT,               GENERATE HASP DCT DSECT             X
               $DTE,               GENERATE HASP DTE DSECT          WEJ*
               $DTECNV,            GENERATE HASP DTECNV DSECT       WEJ*
               $ERA,               GENERATE HASP ERA DSECT          WEJ*
               $HASPEQU,           GENERATE HASP EQUATES               X
               $HCT,               GENERATE HASP HCT DSECT             X
               $IOT,               GENERATE HASP IOT DSECT             X
               $JCT,               GENERATE HASP JCT DSECT             X
               $JOE,               GENERATE HASP JOE DSECT             X
               $JOT,               GENERATE HASP JOT DSECT             X
               $JQE,               GENERATE HASP JQE DSECT             X
               $LRC,               GENERATE HASP LRC DSECT             X
               $MIT,               GENERATE HASP MIT DSECT             X
               $NHD,               GENERATE HASP NJE HEADER DSECTS     *
               $PADDR,             GENERATE HASP PADDR DSECT           X
               $PCE,               GENERATE HASP PCE DSECT             X
               $PDDB,              GENERATE HASP PDDB DSECT            X
               $PPPWORK,           GENERATE PPU WORK DSECT             X
               $RDRWORK,           GENERATE RDR WORK DSECT             X
               $RAT,               GENERATE RAT WORK DSECT             X
               $TAB,               GENERATE TAB WORK DSECT             X
               $TRP,               GENERATE TRP WORK DSECT          WEJ*
               $TQE,               GENERATE HASP TQE DSECT          WEJ*
               $XECB               GENERATE HASP XECB DSECT         WEJ
         TITLE 'JES2 EXIT 6 INTERNAL TEXT EXIT'
***********************************************************************
*                                                                     *
*        ENVIRONMENT   MVS SP 1.3.5  LEVEL 8804                    WEJ*
*                      JES2 FOR SP 1.3.6                              *
*                                                                     *
*        THIS JES2 EXIT PROGRAM IS DESIGNED TO RUN AT CONVERTER       *
*        TIME TO ENFORCE INSTALLATION JCL STANDARDS AND TO DETERMINE  *
*        THE APPROPRIATE JOB CLASS BASED ON DEVICE UTILIZATION.       *
*                                                                     *
*        VIOLATIONS OF JCL STANDARDS ARE DOCUMENTED BY MESSAGES       *
*        WRITTEN TO THE JES2 MESSAGE DATA SET FOR THE JOB AND         *
*        FLAGGED FOR JCL ERROR BY THE USE OF THE JES2 EXIT RETURN     *
*        CODE TO THE JES2 CONVERTER SUB-TASK.                         *
*                                                                     *
*        THIS EXIT USES THE INTERNAL TEXT DATA SET FOR ITS            *
*        PROCESSING.  JES2 PASSES EACH INTERNAL TEXT STATEMENT        *
*        TO THIS EXIT FOR EXAMINATION AND/OR MODIFICATION.  THE       *
*        EXIT WILL MAINTAIN A TABLE OF DATASET NAMES AND DEVICE       *
*        COUNTS TO BE USED AT END OF PROCESSING FOR DETERMINING       *
*        JOB CLASS.  THE ACB FOR THE MESSAGE DATA SET IS IN THE       *
*        PCE WORK AREA AND CAN BE USED TO ISSUE ERROR MESSAGES        *
*        TO THE JOB MESSAGE PORTION OF THE LISTING.                   *
*                                                                     *
*        ALSO, THE CONVERTER IS A DUMB ANIMAL WHEN IT COMES TO        *
*        SYNTAX CHECKING.  CHECKING IS MADE FOR KEYWORD VALUES,       *
*        BUT NONE IS MADE ON THE VALUE FOR THE KEYWORD.  IE.,         *
*        50 CHARACTER DATA SET NAMES, 20 CHARACTER VOLUME SERIAL      *
*        NUMBERS, AND NUMEROUS SYNTAX ERRORS CAN PASS UNDETECTED      *
*        THROUGH THE CONVERTER.  THESE ERRORS WILL BE CAUGHT BY       *
*        THE INTERPRETER WHEN THE JOB GOES INTO EXECUTION, BUT        *
*        THIS EXIT MUST PROCESS THEM.  CURRENTLY, ALL ERRORS OF       *
*        THIS TYPE WILL ISSUE A MESSAGE TO THE EFFECT OF AN INTERNAL  *
*        ERROR AND SET THE JOB TO CLASS=A.  THE ESTAE ROUTINE,        *
*        WHEN ENTERED FOR AN ABEND, WILL ALSO SET THE CLASS TO        *
*        'A' AND RECOVER TO PROTECT THE CONVERSION SUBTASK FROM       *
*        ABEND AND CONSEQUENT LOSS OF THE JOB.  THIS IS DONE BY       *
*        THE SEVERE ERROR RECOVERY ROUTINE TURNING OFF THE EXIT 6     *
*        BIT IN THE EXIT MASK FOR THE JOB.                            *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - WEJ *
*                                                                 WEJ *
*       CHANGES AT PHILIPS LIGHTING                               WEJ *
* 1. UPDATE USINGS FOR JES CTL BLOCKS TO JES2 1.3.6 NAMES.        WEJ *
* 2. ADD CONTROL BLOCKS $DTE AND $DTECNV TO PICK UP PSUEDO ACB    WEJ *
*    FOR JESMSG                                                   WEJ *
* 3. CHANGE ACCOUNT CODE CHECKING TO AGREE WITH LIGHTING          WEJ *
*    CONVENTIONS.                                                 WEJ *
* 4. GENERATE SMF248 RECORD FOR PROCLIB USAGE                     WEJ *
* 5. THE CHECK FOR MOUNTABLE DASD DEVICES IS ELIMINATED.          WEJ *
*                                                                 WEJ *
***********************************************************************
         SPACE 2
***********************************************************************
*                                                                     *
*        CLASS DETERMINATION IS MADE BY KEEPING A COUNT OF ALL        *
*        OF THE MOUNTABLE DEVICES USED PER STEP.  THESE COUNTS        *
*        ARE SAVED IN AN INTERNAL TABLE TO BE PROCESSED AT END        *
*        OF INTERNAL TEXT.  ALSO SAVED IN THE TABLE ARE ENTRIES       *
*        FOR DD STATEMENTS WHICH USED MOUNTABLE DEVICES               *
*        FOR USE IN REFERBACKS AND UNIT=AFF.  IF THE UNIT             *
*        HAS NOT BEEN DETERMINED AT THE END OF PROCESSING             *
*        FOR A DD STATEMENT, THE CATALOG IS SEARCHED.                 *
*        CLASS IS SET ON THE BASIS OF THE MAXIMUM NUMBER OF TAPES     *
*        PER STEP, WHETHER OR NOT TCAM QUEUES ARE USED, THE PRIVELEGE *
*        OF THE SUBMITTER AND THE TIME PARAMETER IN THE JOB CARD.     *
*                                                                     *
*        THE JOB CLASSES ARE: A - PRODUCTION JOB WITH TAPE            *
*                             B - PRODUCTION OR TEST JOB TAKING MORE  *
*                                 THAN 29 SECONDS                     *
*                             C - CICS RELATED JOB                    *
*                             D - DATA BASE RELATED JOB               *
*                             F - PRODUCTION OR TEST JOB TAKING LESS  *
*                                 THAN 30 SECONDS, NO TAPE            *
*                             H - TEST JOB 2-N TAPES                  *
*                             I - TEST JOB WITH 1 TAPE                *
*                             J - TCAM JOB WITH 0-N TAPES, QNAME=PH/PQ*
*                             L - TCAM JOB WITH 0-N TAPES,            *
*                                 QNAME=ADMINMSG                      *
*                             N - CLASS FOR ACCESS JOBS SUBMITTED BY  *
*                             Q - UNKNOWN                             *
*                             S - SINGLE STREAM JOB SUBMISSION        *
*                             U - TECH SERVICES JOB 2-N TAPES         *
*                             V - TECH SERVICES JOB 1 TAPE            *
*                             W - TECH SERVICES JOB, NO TAPE          *
*                             X - TECH SERVICES JOB, SINGLE STREAM    *
*                             Z - DEDICATED SYSTEM BACKUPS            *
*                                                                     *
*        WHEN TESTING THIS EXIT UNDER THE TSO INTERFACE, THE LOCAL    *
*        VARIABLE &&TSO SHOULD BE CHANGED TO 'YES' FROM 'NO' TO       *
*        CHANGE THE $$WTO INSTRUCTIONS TO WTO INSTRUCTIONS AND        *
*        BYPASS THE ESTAE MACROS SO THAT THE TEST COMMAND CAN         *
*        DETERMINE THE ADDRESS OF THE ABEND.                          *
*                                                                     *
*                                                                     *
*        WRITTEN BY:                                                  *
*                        JOHN V. HOOPER                               *
*                        NORTHWESTERN BANK                            *
*                        P.O. BOX 310                                 *
*                        NORTH WILKESBORO, N.C. 28674                 *
*                                                                     *
*        UPDATED BY:                                                  *
*                        GLENN HARPER                                 *
*                        A.N.R. PRODUCTION COMPANY                    *
*                        5075 WESTHEIMER                              *
*                        HOUSTON, TEXAS  77056                        *
*                                                                 WEJ *
*                        CLARK MORRIS, DEPT. 5069                 WEJ *
*                        PHILIPS LIGHTING COMPANY                 WEJ *
*                        PHILIPS SQUARE, CN6800                   WEJ *
*                        SOMERSET, NJ 08875-6800                  WEJ *
*                        UNITED STATES OF AMERICA                 WEJ *
*                        201-563-3575                             WEJ *
*                                                                     *
***********************************************************************
         SPACE
***********************************************************************
*                                                                     *
*        SET CONDITIONAL ASSEMBLY VARIABLES, AMODE, RMODE             *
*                                                                     *
***********************************************************************
J2XIT06  AMODE 31
J2XIT06  RMODE 24
         LCLC &TSO
         LCLC &CAMLST
         LCLC &ERRMSG
         LCLC &SDUMP
         LCLC &FLUSH
         LCLC &MODIFY
         LCLC &UCBSEAR
&TSO     SETC 'NO'         ASSEMBLE FOR TSO TESTING
&CAMLST  SETC 'YES'        SEARCH CATALOG FOR DATASETS
&ERRMSG  SETC 'YES'        PRODUCE JOB FAILED BY EXIT MESSAGE
&SDUMP   SETC 'YES'        PRODUCE CONSOLE DUMP FOR ABENDS
&FLUSH   SETC 'YES'        FLUSH JOB FOR STANDARDS VIOLATIONS
&MODIFY  SETC 'YES'        MODIFY JOB CLASS IN JCT AND JQE
&UCBSEAR SETC 'NO'         SEARCH THE DASD UCBS FOR UNMOUNTED VOLUMES
         EJECT
***********************************************************************
*                                                                     *
*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *
*                                                                     *
*        R0       - CODE INDICATING STATUS OF CONVERSION              *
*            0  INDICATES A JCL STATEMENT HAS BEEN CONVERTED          *
*            4  INDICATES ALL JCL FOR A JOB HAS BEEN CONVERTED        *
*        R1       - ADDRESS OF 2-WORD PARAMETER LIST                  *
*           WORD 1 (+0)  ADDRESS OF A 16-BYTE WORK AREA               *
*           WORD 2 (+4)  IF R0 IS 0 ADDRESS OF LAST TEXT IMAGE        *
*           WORD 3 (+8)  ADDRESS OF THE DTE                        WEJ*
*           WORD 4 (+12) ADDRESS OF THE JCT                        WEJ*
*        R11      - ADDRESS OF THE HCT                                *
*        R13      - ADDRESS OF AN OS-STYLE SAVE AREA                  *
*        R14      - RETURN ADDRESS                                    *
*        R15      - ENTRY ADDRESS                                     *
*                                                                     *
***********************************************************************
         SPACE 4
***********************************************************************
*                                                                     *
*        REGISTER USAGE WITH THIS EXIT:                               *
*                                                                     *
*        R0,R1    - PARM/WORK REGISTERS                               *
*        R4,R3    - WORK REGISTER FOR EACH TEXT KEY                   *
*        R5,R2    - WORK REGISTER                                     *
*        R6       - TEXT POINTER                                      *
*        R7       - SAVETABLE POINTER                                 *
*        R8       - POINTER TO DTE                                 WEJ*
*        R9       - BASE REGISTER #2                                  *
*        R10      - BASE REGISTER #3                                  *
*        R11      - ADDRESS OF THE HCT                                *
*        R12      - BASE REGISTER #1                                  *
*        R13      - WORKAREA POINTER                                  *
*        R14      - RETURN ADDRESS                                    *
*        R15      - RETURN CONDITION CODE                             *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        ACTUAL JES2 EXIT ENTRY POINT                                 *
*                                                                     *
***********************************************************************
J2XIT06E $ENTRY  BASE=(R12,R9,R10)
         SAVE  (14,12)        SAVE CALLERS REGISTERS
         DROP  R13
         USING DTE,R8         SET ADDRESSABILITY TO DTE            WEJ
         L     R8,8(,R1)      LOAD THE ADDRESS OF THE CURRENT DTE  WEJ
         LR    R12,R15        ESTABLISH BASE REGISTER
         LA    R10,4095       SET SECOND
         LA    R9,1(R12,R10)      BASE REGISTER
         LA    R10,1(R10,R9)  SET THIRD BASE REGISTER
         LR    R5,R0          SAVE REG 0
         LR    R4,R1          SAVE ADDRESS OF PARAMETER POINTER     WEJ
         L     R6,0(,R4)      POINT TO EXIT WORK AREA               WEJ
         USING EXITWORK,R6                                          WEJ
         ICM   R1,B'1111',EXWKPTR1  GET WORK AREA POINTER           WEJ
         BZ    GETMAIN        NO, GO DO REQUIRED GETMAINS
         ST    R13,4(R1)      SAVE OLD SAVE ADDR IN NEW
         ST    R1,8(R13)      SAVE NEW SAVE ADDR IN OLD
         LR    R13,R1         SAVE NEW SAVE AND WORKAREA ADDRESS
         USING WORKAREA,R13   SET ADDRESSABILITY
         L     R7,SUBTABLE    RESTORE SUB TABLE AREA
         USING SAVTABLE,R7    SET ADDRESSABILITY
         B     ENDGETM        BYPASS GETMAINS
         SPACE 4
***********************************************************************
*                                                                     *
*        GET STORAGE FOR WORK AREAS ON FIRST ENTRY TO EXIT FOR        *
*        THE JOB                                                      *
*                                                                     *
***********************************************************************
GETMAIN  DS    0H
         LH    R0,GETLEN      LOAD GETMAIN SIZE
         GETMAIN R,LV=(0)     GET CORE FOR DYNAMIC SAVE AREA
         LR    R3,R1          SAVE GETMAINED ADDRESS
         LR    R0,R1          CLEAR
         LH    R1,GETLEN          ENTIRE
         SLR   R15,R15                GETMAINED
         MVCL  R0,R14                     TO ZEROS
         ST    R13,4(R3)      SAVE OLD SAVE ADDR IN NEW
         ST    R3,8(R13)      SAVE NEW SAVE ADDR IN OLD
         LR    R13,R3         SAVE NEW SAVE AND WORKAREA ADDRESS
         ST    R13,EXWKPTR1   SAVE GETMAINED ADDRESS
         L     R0,F#8192      LOAD GETMAIN SIZE
*                             GET CORE FOR JCL TABLE
         GETMAIN RU,LV=(0),BNDRY=PAGE
         LR    R7,R1          SAVE GETMAIN ADDRESS
         ST    R7,SUBTABLE    STORE ADDR OF SUB TABLE AREA
         LR    R0,R7          CLEAR
         L     R1,F#8192          ENTIRE
         SLR   R15,R15                GETMAINED
         MVCL  R0,R14                     TO ZEROS
         LA    R15,MSGRPL     LOAD OUTPUT RPL ADDRESS
         ST    R15,OUTRPL     SAVE OUTPUT RPL ADDRESS
         LA    R15,DCNVMSG    OBTAIN JESMSG OUTPUT ACB ADDRESS      WEJ
         ST    R15,OUTACB     SAVE OUTPUT ACB ADDRESS
ENDGETM  DS    0H
         L     R1,12(,R4)     LOAD ADDRESS OF JCT                   WEJ
         ST    R1,JCTADDR     SAVE JCT ADDRESS                      WEJ
         EJECT
***********************************************************************
*        ESTABLISH ESTAE ENVIRONMENT                                  *
***********************************************************************
         MVC   ESTAEL(LESTAEL),ESTAE INITIALIZE ESTAE LIST FORM
         STM   R14,R12,STAEREGS+12 SAVE CURRENT REGISTERS
         AIF   ('&TSO' EQ 'YES').TSO9
         ESTAE PARAM=(13),BRANCH=YES,SVEAREA=STAEREGS,KEY=1,           X
               MF=(E,ESTAEL)
         L     R13,DCNVUWA    SAME AS EXWKPTR1                      WEJ
.TSO9    ANOP
         DROP  R6             R6 WILL NO LONGER POINT TO WORK AREA  WEJ
         LTR   R0,R5          RESTORE REG 0 AND CHECK FOR INTERNAL  WEJ
         BNZ   EOF            GET OUT (ALL TEXT IMAGES PROCESSED)   WEJ
         L     R6,4(,R4)      LOAD TEXT STARTING ADDRESS            WEJ
         ST    R6,TEXTSTAR    SAVE TEXT STARTING ADDRESS            WEJ
         USING TEXT,R6        NOTE R6 POINTS TO TEXT                WEJ
         SPACE 4
***********************************************************************
*        SOME TYPES OF ERRORS DETECTED BY THE CONVERTER TURN ON BITS  *
*        IN THE JCTCNVRC FIELD WHICH WILL FAIL THE JOB WHEN THE       *
*        CONVERTER COMPLETES.  THESE BITS WILL BE TESTED, AND IF      *
*        THE JOB IS TO BE FAILED, ALL WORK AREAS WILL BE FREEMAINED   *
*        AND CONTROL RETURNED TO JES2.                                *
***********************************************************************
         L     R14,JCTADDR    LOAD JCT ADDRESS
         USING JCT,R14        SET ADDRESSABILITY TO JCT             WEJ
         LA    R15,JCTCJCL    SET JCL ERROR IN CONVERTER RETURN CODE
         C     R15,JCTCNVRC   TEST CONVERTER RETURN CODE
         BNE   RECORD1        NO, OK, BRANCH
         LA    R15,4          TELL JES2 TO QUIT THIS EXIT
         ST    R15,RETCODE    AND SAVE THE RETURN CODE
         B     ENDOFIT        CONVERTER HAS ALREADY FAILED JOB
         DROP  R14            DROP ADDRESSABILITY TO JCT
         SPACE 4
***********************************************************************
*        WE MUST DETERMINE IF THE CURRENT STATEMENT IS THE LAST       *
*        STATEMENT FOR THE STEP.  IF THE STATEMENT IS A DD STATEMENT  *
*        AND IT IS THE LAST STATEMENT OF THE STEP, THE TEXT INDICATOR *
*        WILL REFLECT LAST STATEMENT OF THE STEP.  IF, HOWEVER, THE   *
*        CURRENT STATEMENT IS AN EXEC STATEMENT AND IT HAS NO DD      *
*        STATEMENTS, THIS INDICATOR WILL NOT BE ON, SO WE HAVE TO     *
*        CHECK FOR THIS CONDITION ALSO.                               *
***********************************************************************
RECORD1  TM    STRINDCS,LASTSTMT LAST STMT FOR STEP?
         BO    RECORD3        YES, BRANCH
         TM    STRINDCS,EXECSTR EXEC STMT?
         BNO   RECORD2        NO, BRANCH
         TM    STREINDC,ETXNODD STEP HAS NO DD STMTS?
         BO    RECORD3        TRUE, ALSO LAST STMT FOR STEP
***********************************************************************
*        AT THIS POINT THE STMT IS NOT THE LAST STMT FOR STEP         *
***********************************************************************
RECORD2  NI    EOFIND,X'FE'   TURN OFF LAST STMT IND
         B     RECORD4        GET OUT
***********************************************************************
*        AT THIS POINT THE STMT IS THE LAST STMT FOR STEP             *
***********************************************************************
RECORD3  OI    EOFIND,ENDSTEP TURN ON LAST STMT IND
RECORD4  TM    STRINDCS,JOBSTR JOB STATEMENT?
         BO    JOBCARD        YES, BRANCH
         TM    STRINDCS,EXECSTR EXEC STATEMENT?
         BO    EXECARD        YES, BRANCH
         TM    STRINDCS,DDSTR DD STATEMENT?
         BO    DDCARD         YES, BRANCH
         TM    STRINDCS,PROCSTR PROC STATEMENT?
         BO    PROCINST       YES, BRANCH BECAUSE PROC IN STREAM
         TM    STRINDCS,JDVBSTR JDT VERB STATEMENT?
         BO    JDTCARD        YES, BRANCH
*** IF NONE OF THE ABOVE FORGET IT  WILL BE CAUGHT BY CONVERTER
         B     GETNEXT        GO GET ANOTHER STATEMENT
         EJECT
***********************************************************************
*        THE TEXT OF THE JOBCARD IS AS FOLLOWS:                       *
*            1)  2 BYTE LENGTH OF TEXT STRING INCLUDING ITSELF        *
*            2)  1 BYTE INDICATOR COMMON TO ALL TEXT RECORDS          *
*            3)  3 BYTES OF MISCELLANEOUS INDICATORS                  *
*            4)  1 BYTE INDICATOR X'B4' INDICATING JOB POS PARAMS     *
*            5)  1 BYTE NUMBER OF POSITIONAL PARAMETERS               *
*                1ST POS PARAM IS JOBNAME                             *
*                2ND POS PARAM IS ACCT PARAM LIST                     *
*                3RD POS PARAM IS PGMR NAME                           *
*            5A) JOBNAME PRECEDED BY A 1 BYTE LENGTH FIELD            *
*            5B) HASP ACCOUNTING PARAMETERS PRECEDED BY A             *
*                1 BYTE LENGTH FIELD LOOKS LIKE THE FOLLOWING         *
*                THE 1ST HALF BYTE IS '8' IF MORE THAN 1 ACCT ENTRY   *
*                IF MORE THAN 1 ACCT ENTRY -                          *
*                THE 2ND HALF BYTE IS THE NUMBER OF ACCT ENTRIES      *
*                FOLLOWED BY A VARIABLE LENGTH LIST OF HASP PARAMETERS*
*                EACH PRECEDED BY A 1 BYTE LENGTH FIELD               *
*                IF ONLY 1 ACCT ENTRY -                               *
*                THE 2ND HALF BYTE IS THE LENGTH OF THE ACCT ENTRY    *
*                FOLLOWED BY THE ACCOUNTING ENTRY                     *
*            5C) PGMR NAME PRECEDED BY A 1 BYTE LENGTH FIELD          *
*            6)  VARIABLE LENGTH LIST OF KEYWORD PARAMETERS           *
*                EACH IS PRECEDED BY A 1 BYTE KEY, 1 BYTE NUMBER OF   *
*                POSITIONAL SUBPARAMETERS PRESENT, AND A LIST OF      *
*                SUBPARAMETERS EACH PRECEDED BY A 1 BYTE LENGTH FIELD *
*                WHICH MAY BE ZERO IF OMITTED AND FOLLOWED BY ANOTHER *
*                POSITIONAL PARAMETER.                                *
***********************************************************************
         SPACE 6
JOBCARD  EQU   *
***********************************************************************
*        INITIALIZE ENTRY IN TABLE SINCE ONE MUST ALWAYS BE CREATED   *
***********************************************************************
JOBINIT  L     R14,JCTADDR         LOAD JCT ADDRESS
         USING JCT,R14             SET ADDRESSABILITY TO JCT        WEJ
         MVI   ENTRYTYP,TYPJOB     SET TO JOB ENTRY
         MVC   JENTRY,BLANKS       BLANK ENTIRE JOB INFO
         ST    R7,LASTENT          SAVE ADDR OF LAST ENTRY
         ST    R7,FIRSTENT         SAVE ADDR OF FIRST ENTRY
         XC    CLASSFLD,CLASSFLD   ZERO DETERMINED JOB CLASS
         XC    MAXTIME,MAXTIME     CLEAR MAXIMUM CPU TIME
         TM    JCTJOBFL,JCTSTCJB   IS THIS A STARTED TASK?
         BNO   JOBINIT1            NO, BRANCH
         OI    JOBIND,JOBSTC       TURN ON STC INDICATOR
         MVC   JCTROOMN,=C'USSM    '   FORCE ROOM NUMBER TO USSM
         MVC   NJHGROOM-NJH+JCTNJHDR,=C'USSM    '                   WEJ
         B     JOBINIT2            BRANCH
JOBINIT1 TM    JCTJOBFL,JCTTSUJB   IS THIS A TSO USER?
         BNO   CKAUTH0             NO, BRANCH
         OI    JOBIND,JOBTSO       TURN ON TSO INDICATOR
         B     JOBINIT2            BRANCH
CKAUTH0  DS    0H                                                   WEJ
         CLC   JCTINDEV,C#UCC7     IS SOURCE UCC7 STARTED TASK      WEJ
         BNE   CKAUTH1               YES, TURN ON PROD BIT.         WEJ
JOBISPRD DS    0H                                                   WEJ
         OI    JOBIND,JOBPROD    TURN ON PRODUCTION JOB INDICATOR
         B     JOBINIT2          GO TO FINISH INIT                  WEJ
CKAUTH1  DS    0H                                                   WEJ
         OI    JOBIND,JOBTEST    TURN ON TEST JOB INDICATOR
         CLI   JCTINDEV+7,C'*'   IF NOT TSO SUBMIT DO NO FURTHER    WEJ
         BNE   JOBINIT2             AUTHORITY CHECK                 WEJ
         CLC   C#FCH,JCTINDEV    IS THIS A TECH SUPPORT TSO SUBMIT  WEJ
         BNE   CKAUTH2               NO, CHECK FOR COMMUNICATIONS   WEJ
         OI    JOBIND,JOBTECH    TURN ON TECH SUPPORT INDICATOR     WEJ
         B     JOBINIT2          GO FINISH INITIALIZATION           WEJ
CKAUTH2  DS    0H
         CLC   C#FCB,JCTINDEV    IS THIS AN OPERATIONS SUBMISSION?  WEJ
         BNE   CKAUTH3           NO, CHECK FOR COMMUNICATIONS       WEJ
         OI    JOBIND,JOBOPER    TURN ON OPERATIONS BIT             WEJ
         B     JOBINIT2          FINISH INITIALIZATION              WEJ
CKAUTH3  DS    0H
         CLC   C#FCC,JCTINDEV    IS THIS AN COMMUNICATIONS SUBMIT?  WEJ
         BNE   JOBINIT2          NO, FINISH INITIALIZATION          WEJ
         OI    JOBIND,JOBCOMM    TURN ON COMMUNICATIONS BIT         WEJ
         DROP  R14                 DROP ADDRESSABILITY TO JCT
***********************************************************************
*        INITIALIZE MSG HANDLER PARAMETERS ON FIRST ENTRY             *
***********************************************************************
JOBINIT2 LA    R15,1               SET REG TO 1
         ST    R15,CARDNO          SET CARD COUNT TO 1
         XC    MSGCOUNT,MSGCOUNT   ZERO MESSAGE COUNTER
         XC    RESOURCE,RESOURCE   CLEAR JES2 RESOURCES
         MVI   INCLASS,C'A'        SET INPUT DEFAULT CLASS TO 'A'
         SPACE 4
***********************************************************************
*        START SCAN OF JOB CARD POSITIONAL PARAMETERS                 *
*            1ST POS PARAM IS ACCT NUMBER UNLESS ONLY 1 ENTRY         *
*            2ND POS PARAM IS BIN LOC UNLESS ONLY 2 ENTRIES           *
*            3RD POS PARAM IS EST TIME UNLESS ONLY 3 ENTRIES          *
*            LAST ENTRY IS ALWAYS PROGRAMMER NAME                     *
***********************************************************************
JOBSTART XC    LASTEXEC,LASTEXEC NO PREVIOUS EXEC CARD
         LA    R4,STRJKEY     LOAD START OF TRUE TEXT
         ST    R4,PARMADDR    SAVE START OF PARAMETER ADDRESS
         LA    R4,1(,R4)      INCR PAST JOB POSITIONAL PARM KEYWORD
         SLR   R15,R15        CLEAR REGISTER FOR IC
         IC    R15,0(R4)      LOAD NUMBER OF POS SUBPARAMS
         CH    R15,H#3        SEE IF THREE (JOBNAME, ACCT, PGMRNAME)
         BNL   JOBCK1         YES, BRANCH
         TM    JOBIND,JOBSTC+JOBTSO ARE ALL PARAMETERS REQUIRED?
         BM    JOBCK1         NO, BRANCH
         LA    R15,P@2        SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     JOBLOOP        BYPASS FIELDS
JOBCK1   LA    R4,1(,R4)      INCR PAST NUM OF POS SUBPARAMS
JOBNM    DS    0H
         SLR   R3,R3          CLEAR REG FOR ICM
         ICM   R3,1,0(R4)     LOAD JOB NAME LENGTH
         BZ    JOBNM2         LENGTH ZERO, DO NOT MOVE
         CH    R3,H#8         SEE IF LENGTH > 8
         BNH   JOBNM1         NO, CONTINUE
         LA    R15,P@3        SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     JOBLOOP        BYPASS FIELDS
JOBNM1   DS    0H
         BCTR  R3,0           MAKE MACHINE LENGTH
*        EX    R3,MOVE1       MOVE JOB NAME TO SAVE TABLE
         LA    R3,1(,R3)      RESTORE LENGTH
JOBNM2   LA    R4,1(R3,R4)    INCREMENT PAST JOB NAME
         TM    JOBIND,JOBSTC+JOBTSO ARE ACCOUNTING/PGMR NAME REQUIRED?
         BM    JOBLOOP        NO, BRANCH
         SPACE 4
JOBACT   SLR   R5,R5          CLEAR REGISTER FOR ICM
         ICM   R5,1,0(R4)     INSERT CONTROL BYTE
         BNM   JOBACT1        HIGH BIT NOT ON, ONLY 1 PARAMETER
         N     R5,F#127       'AND' OUT THE HIGH ORDER BIT
         LA    R4,1(,R4)      INCREMENT PAST CONTROL BYTE
         B     JOBACT2        BRANCH
JOBACT1  LA    R5,1           SET PARAM COUNT TO 1
         EJECT
***********************************************************************
*        WE ARE CHECKING THE FIRST ACCOUNTING FIELD FOR FORMATTING    *
*        ERRORS.  THE LENGTH OF THE FIRST ACCOUNTING FIELD MUST BE 7. *
*                                                                     *
*        THE FIRST ACCOUNTING FIELD IS FORMATTED AS FOLLOWS:          *
*                                                                     *
*        1)  2 CHARACTER GROUP CODE, CURRENTLY ASSUMED ALPHA       WEJ*
*        2)  5 DIGIT BUDGET NUMBER                                 WEJ*
*                                                                     *
***********************************************************************
JOBACT2  DS    0H
         SLR   R3,R3          CLEAR REG FOR ICM
         ICM   R3,1,0(R4)     LOAD PARAMETER LENGTH
         BNZ   JOBACT2A       NOT ZERO, BRANCH
         LA    R15,P@35       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     JOBACT17       BYPASS ACCT NUM
***********************************************************************
*        CHECK THE LENGTH OF THE FIRST ACCOUNTING FIELD FOR 7.     WEJ*
***********************************************************************
JOBACT2A DS    0H
         CH    R3,H#7         COMPARE LENGTH TO 7                   WEJ
         BE    JOBACT3        ACCT LENGTH = 7, BRANCH               WEJ
         LA    R15,P@4        SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     JOBACT17       BYPASS FIELD
JOBACT3  DS    0H
         STC   R3,JACCTLEN    SAVE LENGTH OF ACCT NUM
         BCTR  R3,0           MAKE MACHINE LENGTH
         EX    R3,MOVE2       MOVE ACCT NUM TO SAVE TABLE
         EX    R3,MOVE16      MOVE ACCT NUM TO WORK AREA
         LA    R3,1(,R3)      RESTORE R3 TO TRUE SIZE OF FIELD      WEJ
***********************************************************************
*        CURRENTLY ALL PHILIPS LIGHTING ACCT NUMBERS START WITH    WEJ*
*        'FC'.  THIS WILL PROBABLY CHANGE IN THE FUTURE AND THIS   WEJ*
*        CODE CHECKS THAT THE FIRST 2 DIGITS ARE ALPHABETIC        WEJ*
*                                                                  WEJ*
*                     A L L    J O B S                                *
*                                                                     *
*        1)  THE FIRST 2 CHARACTERS MUST BE ALPHABETIC             WEJ*
*        2)  THE BUDGET MUST BE 5 NUMERIC CHARACTERS               WEJ*
***********************************************************************
         L     R2,=A(ALPHATBL) POINT TO ALPHA TRT TABLE             WEJ
         TRT   1(2,R4),0(R2)      TEST 1ST 2 CHRS FOR ALPHABETIC    WEJ
         BZ    JOBACT15                                             WEJ
JOBACT14 LA    R15,P@40           SET ERROR NUMBER
         BAL   R14,MSGRTN         GO ISSUE ERROR MSG
JOBACT15 DS    0H
         L     R2,=A(NUMERTBL) POINT TO NUMERIC TRT TABLE           WEJ
         TRT   3(5,R4),0(R2)     TEST CHRS 3-7 FOR NUMERIC          WEJ
         BZ    JOBACT18                                             WEJ
JOBACT17 LA    R15,P@41           SET ERROR NUMBER
         BAL   R14,MSGRTN         GO ISSUE ERROR MSG
JOBACT18 LA    R4,1(R3,R4)        INCREMENT PAST PARM
         SLR   R3,R3              CLEAR REGISTER 3
         IC    R3,0(,R4)          LOAD LENGTH OF NEXT PARM
         BCT   R5,JOBACT18        LOOP UNTIL ALL ACCT FIELDS DONE
         SPACE 4
***********************************************************************
*        SAVE THE PROGRAMMER NAME                                     *
***********************************************************************
JOBPGMR  DS    0H
         SLR   R3,R3          CLEAR REG 3
         ICM   R3,1,0(R4)     LOAD PGMR NAME LENGTH
         BZ    PGMREND        ZERO LENGTH, MISSING PARAM
         CH    R3,H#20        SEE IF LENGTH > 20
         BNH   JOBPGMR1       NO, CONTINUE
         LA    R15,P@5        SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     JOBLOOP        BYPASS FIELDS
JOBPGMR1 DS    0H
         CH    R3,H#9         SEE IF LENGTH > 9
         BNH   PGMR10         IF NOT > 9 , OK
         LH    R3,H#9         MAKE LENGTH = 10
PGMR10   BCTR  R3,0           MAKE MACHINE LENGTH
         EX    R3,MOVE3       MOVE PGMR NAME TO SAVE TABLE
         ICM   R3,1,0(R4)     RELOAD PGMR NAME LENGTH
         EJECT
***********************************************************************
*        IF THE JOB IS SUBMITTED FROM UCC7 IT IS CONSIDERED A      WEJ*
*        PRODUCTION JOB (EXIT 2 IS USED TO SET JCTINDEV TO THE     WEJ*
*        NAME OF THE OWNER OF AN INTERNAL READER SO IF UCC7        WEJ*
*        SUBMITS THE JOB THE FULL 8 CHARACTERS WILL BE UCC7        WEJ*
*        FOLLOWED BY 4 SPACES.  IF UCC7 IS NOT A STARTED TASK,     WEJ*
*        THE "J" OR "T" FOR JOB OR TSO-ID WILL BE IN POSITION OF   WEJ*
*        JCTINDEV.  CERTAIN TSO ID'S WILL BE RECOGNIZED AS         WEJ*
*        PRIVILEGED AND TREATED ACCORDINGLY                        WEJ*
*            A)  FCBXXX - OPERATIONS SUBMISSIONS                      *
*            B)  FCCXXX - COMMUNICATIONS SUBMISSIONS                  *
*            B)  FCHXXX - TECH SERVICES SUBMISSIONS                   *
*                                                                     *
***********************************************************************
PGMREND  DS    0H                CHECK AUTHORITY                    WEJ
         B     JOBLOOP           LOOP BACK                          WEJ
         SPACE 2
***********************************************************************
*        JOB CLASS                                                    *
***********************************************************************
JCLASS   CLI   0(R4),CLASSJK  SEE IF CLASS=KEY
         BNE   JPERF          NO, BRANCH
         MVC   INCLASS,3(R4)  SAVE INPUT CLASS
         B     JOBLOOP        GO GET NEXT PARAM
         SPACE 2
***********************************************************************
*        JOB PERFORM                                                  *
***********************************************************************
JPERF    CLI   0(R4),PRFMJK   SEE IF PERFORM= KEY
         BNE   JADDR          NO, BRANCH
         B     JOBLOOP        PERFORM CONTROLLED BY ICS
         SPACE 2
***********************************************************************
*        JOB ADDRSPC                                                  *
***********************************************************************
JADDR    CLI   0(R4),ADRSPJK  SEE IF ADDRSPC= KEY
         BNE   JPRTY          NO, BRANCH
         TM    JOBIND,JOBPROD+JOBTECH+JOBSTC+JOBOPER+JOBCOMM ALLOW? WEJ
         BM    JOBLOOP        ADDRSPC OK ON JOB CARD                WEJ
         LA    R15,P@7        SET ERROR NUMBER                      WEJ
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                    WEJ
         B     JOBLOOP        BYPASS FIELDS                         WEJ
         SPACE 4
***********************************************************************
*        JOB PRTY                                                     *
***********************************************************************
JPRTY    CLI   0(R4),PRTYJK   SEE IF PRTY= KEY
         BNE   JESTIME        NO, BRANCH
         B     JOBLOOP        BYPASS CHECKING SINCE SET BY TIME     WEJ
*        LA    R4,1(,R4)      INCREMENT PAST KEYWORD DESCR          WEJ
*        SLR   R5,R5          CLEAR REGISTER FOR ICM                WEJ
*        ICM   R5,1,0(R4)     INSERT NUMBER OF SUBPARAMETERS        WEJ
*        BZ    JOBLOOP        NONE, IGNORE                          WEJ
*        LA    R4,1(,R4)      INCREMENT PAST CONTROL BYTE           WEJ
*        SLR   R3,R3          CLEAR REGISTER FOR ICM                WEJ
*        ICM   R3,1,0(R4)     LOAD LENGTH OF PRTY VALUE             WEJ
*        BZ    JOBLOOP        ZERO, NULL VALUE, EXIT                WEJ
*        BCTR  R3,0           MAKE MACHINE LENGTH                   WEJ
*        EX    R3,PACK1       PACK PRTY                             WEJ
*        CP    DOUBLE,P#0     SEE IF PRTY=0                         WEJ
*        BE    JOBLOOP        YES, DEFAULT, ALWAYS OK               WEJ
*        B     JOBLOOP        PRTY OVERRIDDEN BY TIME CALC AT END   WEJ
         EJECT
***********************************************************************
*        JOB TIME                                                     *
***********************************************************************
JESTIME  CLI   0(R4),TIMEJK   SEE IF TIME= KEY
         BNE   JREGN          NO, BRANCH
         LA    R4,1(,R4)      INCREMENT PAST KEYWORD DESCR
         SLR   R5,R5          CLEAR REGISTER FOR ICM
         ICM   R5,1,0(R4)     INSERT NUMBER OF SUBPARAMETERS
         BZ    JOBLOOP        NONE, IGNORE
         STC   R5,SAVETCNT    SAVE THE NUMBER OF SUB-PARMS
         LA    R4,1(,R4)      INCREMENT PAST CONTROL BYTE
         SLR   R3,R3          CLEAR REGISTER FOR ICM
         ICM   R3,1,0(R4)     LOAD LENGTH OF FIRST TIME FIELD
         BZ    JESTIME4       ZERO, ONLY SECONDS ENTERED, GO CALC
         BCTR  R3,R0          SET LENGTH TO MACHINE LENGTH
JESTIME1 DS    0H                                                   WEJ
         L     R2,=A(NUMERTBL) POINT TO NUMERIC TRANLAT
         EX    R3,TRT1        EXECUTE NUMERIC TRANSLATE TEST        WEJ
         BNZ   JESTIME2       NOT NUMERIC                           WEJ
         EX    R3,PACK1       PACK TIME
         CVB   R15,DOUBLE     CONVERT TO BINARY
         LTR   R15,R15        SEE IF ZERO                           WEJ
         BZ    JESTIME4       ZERO, ONLY SECONDS ENTERED, GO CALC
         CH    R15,H#1440     SEE IF TIME = 1440
         BNE   JESTIME3       NO, BRANCH TO NEXT PARM
         TM    JOBIND,JOBSTC+JOBTECH+JOBPROD+JOBOPER+JOBCOMM 1440?  WEJ
         BM    JESTIME3       YES, TIME=1440 OK ON JOB CARD
         LA    R15,P@9        SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     JOBLOOP        GET OUT
JESTIME2 LA    R15,P@8        SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     JOBLOOP        GET OUT
JESTIME3 DS    0H
         MH    R15,H#60       MULTIPLY BY 60 TO GET TIME IN SECONDS
         ST    R15,MAXTIME    STORE TIME
JESTIME4 DS    0H
         CLI   SAVETCNT,X'01' CHK NUMBER OF SUB PARAMETERS
         BNH   JOBLOOP        NO, FINISHED
         SLR   R5,R5          CLEAR REGISTER 5
         ICM   R5,1,0(R4)     GET LENGTH OF FIRST SUBPARAMETER
         LA    R4,1(R5,R4)    POINT TO SECOND SUBPARAMETER
         SLR   R3,R3          ZERO OUT R3 FOR ICM
         ICM   R3,1,0(R4)     INSERT LENGTH OF SUB-PARARM
         BZ    JOBLOOP        IF ZERO, FINISHED WITH TIME
         CH    R3,H#2         IS LENGTH GREATER THAN 2
         BH    JESTIME2       YES, GO TO TIME ERROR
         BCTR  R3,R0          SET LENGTH TO MACHINE LENGTH
         L     R2,=A(NUMERTBL) POINT TO NUMERIC TRANLAT
         EX    R3,TRT1        EXECUTE NUMERIC TRANSLATE TEST        WEJ
         BNZ   JESTIME2       NOT NUMERIC                           WEJ
         EX    R3,PACK1       PACK TIME
         CVB   R15,DOUBLE     CONVERT IT TO BINARY
         CH    R15,H#60       IS THE NUMBER OF SECONDS NOT < 60
         BNL   JESTIME2       YES, GO TO ERROR
         A     R15,MAXTIME    ADD PREVIOUSLY CALCULATED TIME, IF ANY
         ST    R15,MAXTIME    STORE RESULT
         B     JOBLOOP        GO TO CHECK REST OF CARD.
         EJECT
***********************************************************************
*        JOB REGION                                                   *
***********************************************************************
JREGN    CLI   0(R4),REGINJK  SEE IF REGION= KEY
         BNE   JTYPRUN        NO, BRANCH
         LA    R4,1(,R4)      INCREMENT PAST KEYWORD
         SLR   R3,R3          CLEAR REG FOR ICM
         ICM   R3,1,0(R4)     LOAD SUBPARAMETER COUNT
         BZ    JOBLOOP        NO SUBPARAMETERS, BRANCH
         LA    R4,1(,R4)      INCREMENT PAST NUMBER OF FIELDS
         ICM   R3,1,0(R4)     LOAD LENGTH OF REGION PARAM
         BZ    JOBLOOP        ZERO, NULL, BRANCH
         CH    R3,H#8         SEE IF MAX LENGTH EXCEEDED
         BNH   JREGN0         NO, CONTINUE
         LA    R15,P@13       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     JOBLOOP        GET OUT
JREGN0   DS    0H
         CH    R3,H#3         SEE IF AT LEAST 3 CHARACTERS
         BL    EXELOOP        NO, MAX IS 99K, IGNORE
         LA    R15,0(R3,R4)   POINT TO LAST CHAR OF REGION SIZE
         NI    JLIBIND,255-JREGIONK TURN OFF REGION SIZE IN 'K' IND
         CLI   0(R15),C'K'    END IN 'K'
         BNE   JREGN1         NO, BRANCH
         BCTR  R3,0           REDUCE REGION LENGTH BY 1
         OI    JLIBIND,JREGIONK REMEMBER REGION SIZE IN 'K'
JREGN1   DS    0H
         BCTR  R3,R0          SET LENGTH TO MACHINE LENGTH
         L     R2,=A(NUMERTBL) POINT TO NUMERIC TRANLAT
         EX    R3,TRT1        EXECUTE NUMERIC TRANSLATE TEST        WEJ
         BNZ   JREGN4         NOT NUMERIC                           WEJ
         EX    R3,PACK1       PACK REGION SIZE
         CVB   R15,DOUBLE     CONVERT REGION SIZE TO BINARY
         TM    JLIBIND,JREGIONK WAS REGION SPECIFIED IN 'K'
         BO    JREGN3         YES, BRANCH
         SRA   R15,10         DIVIDE BY 1024 FOR 'K' VALUE
JREGN3   STH   R15,JREGION    STORE REGION SIZE IN TABLE
         B     JOBLOOP        BRANCH
JREGN4   LA    R15,P@14       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     JOBLOOP        GET OUT
         SPACE 4
***********************************************************************
*        JOB TYPRUN                                                   *
***********************************************************************
JTYPRUN  CLI   0(R4),TYPRUNJK SEE IF TYPRUN= KEY
         BNE   JOBLOOP        NO, BRANCH
         LA    R4,1(,R4)      INCREMENT PAST KEYWORD DESCR
         SLR   R5,R5          CLEAR REGISTER FOR ICM
         ICM   R5,1,0(R4)     INSERT NUMBER OF SUBPARAMETERS
         BZ    JOBLOOP        NONE, IGNORE
         LA    R4,1(,R4)      INCREMENT PAST CONTROL BYTE
         SLR   R3,R3          CLEAR REGISTER FOR ICM
         ICM   R3,1,0(R4)     LOAD LENGTH OF FIRST VALUE FIELD
         CH    R3,H#4         SEE IF CORRECT LENGTH
         BNE   JOBLOOP        NO, EXIT
         CLC   C#HOLD,1(R4)    SEE IF TYPRUN=HOLD
         BNE   JOBLOOP        NO, EXIT
         OI    JOBIND2,HELD   TURN ON HELD INDICATOR
         EJECT
***********************************************************************
*        THIS ROUTINE WILL INCREMENT PAST THE STRING(S) BEING         *
*        PROCESSED.  NOTE THAT FOLLOWING THE KEYWORD DESCRIPTOR       *
*        FIELD IS A COUNT OF SUBPARAMETERS.  FOLLOWING THE COUNT      *
*        WILL BE A LENGTH OR DESCRIPTOR FIELD.  IF THE HIGH ORDER     *
*        BIT IS ON, THE FIELD IS A COUNT FIELD OF THE NUMBER OF       *
*        SUBPARAMETERS WHICH THE SUBPARAMETER ITSELF MAY HAVE.        *
*        IF THIS IS TRUE, THE DESCRIPTOR FIELD WILL BE FOLLOWED BY    *
*        A LENGTH FIELD FOR THE FIRST SUBPARAMETER.  IF THE HIGH      *
*        ORDER BIT IS NOT ON, IT IS ONLY A LENGTH FIELD FOR A         *
*        SINGLE SUBPARAMETER.                                         *
***********************************************************************
JOBLOOP  L     R4,PARMADDR    RESTORE START OF PARAMETER ADDRESS
         SLR   R2,R2          CLEAR REGISTER FOR ICM
         LA    R4,1(,R4)      INCREMENT PAST KEYWORD
         ICM   R2,1,0(R4)     LOAD SUBPARAMETER COUNT
         BNZ   JOBLOOP1       OK, BRANCH INTO ROUTINE
         LA    R4,1(,R4)      NONE, INCREMENT PAST COUNT
         B     JOBLOOP5       AND GET OUT OF ROUTINE
JOBLOOP1 LA    R4,1(,R4)      INCREMENT PAST KEYWORD DESCR
JOBLOOP2 SLR   R5,R5          CLEAR REGISTER FOR ICM
         ICM   R5,1,0(R4)     LOAD PARAMETER LENGTH
         BNM   JOBLOOP3       HIGH BIT NOT ON, ONLY 1 PARAMETER
         N     R5,F#127       'AND' OUT THE HIGH ORDER BIT
         LA    R4,1(,R4)      INCREMENT PAST CONTROL BYTE
         B     JOBLOOP4       BRANCH
JOBLOOP3 LA    R5,1           SET PARAM COUNT TO 1
JOBLOOP4 SLR   R3,R3          CLEAR REGISTER FOR ICM
         ICM   R3,1,0(R4)     LOAD PARAMETER LENGTH
         LA    R4,1(R3,R4)    INCREMENT PAST PARM
         BCT   R5,JOBLOOP4    LOOP UNTIL PROCESSED ALL PARMS
         BCT   R2,JOBLOOP2    LOOP UNTIL PROCESSED ALL PARMS
JOBLOOP5 ST    R4,PARMADDR    SAVE START OF PARAMETER ADDRESS
***********************************************************************
*        WE ARE LOOKING FOR INVALID KEYWORDS OR KEYWORDS HAVING       *
*        ILLEGAL VALUES OR OTHER THAN DEFAULT                         *
***********************************************************************
*
***********************************************************************
*        KEYWORD ENTRIES ARE NORMALLY AS FOLLOWS:                     *
*            1)  1 BYTE HEX KEYWORD                                   *
*            2)  1 BYTE NUMBER OF SUBPARAMETERS                       *
*            3)  LIST OF POSITIONAL SUBPARAMETERS EACH PRECEDED BY A  *
*                1 BYTE LENGTH FIELD                                  *
*        THERE ARE OCCASIONS WHEN THE POSITIONAL SUBPARAMETERS WILL   *
*        HAVE POSITIONAL SUBPARAMETERS THEMSELVES                     *
*        THIS WILL BE FLAGGED IN THE LENGTH FIELD FOR THAT SUBPARAM   *
*        BY A HIGH ORDER BIT IN THE FIELD.  IN THIS CASE, THIS IS NOT *
*        A LENGTH FIELD, BUT A COUNT OF SUBPARAMETERS, WHICH WILL BE  *
*        A LIST OF PARAMETERS, EACH PRECEDED BY A 1 BYTE LENGTH FIELD.*
*        THUS THE ENTRY FOR A SUBPARAMETER WITH SUBPARAMETERS WILL    *
*        APPEAR AS FOLLOWS:                                           *
*            1)  A 1 BYTE NUMBER OF SUBPARAMS AS INDICATED BY A       *
*                HIGH ORDER BIT                                       *
*            2)  A LIST OF SUBPARAMETERS EACH PRECEDED BY A 1 BYTE    *
*                LENGTH FIELD                                         *
***********************************************************************
*
JOBPARMS CLI   0(R4),ENDK     END OF TEXT STRING?????
         BNE   JCLASS         NO, BRANCH
         SPACE
***********************************************************************
*        IF THE JOB CPU TIME LIMIT WAS NOT SPECIFIED ON THE JOB       *
*        CARD, THE ANR VERSION OF THE EXIT OVERRODE WITH 120       WEJ*
*        WHILE THE MODIFED VERSION WILL FORCE A PRIORITY 0 AND     WEJ*
*        USE THE SYSTEM DEFAULT                                    WEJ*
***********************************************************************
         L     R14,JCTADDR
         USING JCT,R14
         MVI   JCTPRIO,X'00'  SET PRIORITY TO ZERO
         ICM   R15,B'1111',MAXTIME LOAD TIME FROM JOB CARD (IF ANY)
         BZ    GETNEXT        YES, GO TO GET NEXT RECORD
         L     R1,A#PTYPRF
JOBENDLP DS    0H
         LA    R1,L'PRTYENT(,R1) POINT TO NEXT ENTRY
         CLC   MAXTIME,0(R1)  COMPARE MAX TIME TO PRTY TABLE
         BH    JOBENDLP       LOOP WHILE GREATER THAN ENTRY
         MVC   JCTPRIO,L'PRTYTIME(R1)
         B     GETNEXT
         DROP  R14
         EJECT
***********************************************************************
*        THE TEXT OF THE EXEC CARD TEXT IS AS FOLLOWS                 *
*            1)  2 BYTE LENGTH OF TEXT STRING INCLUDING ITSELF        *
*            2)  1 BYTE INDICATOR COMMON TO ALL TEXT RECORDS          *
*            3)  1 BYTE OF MISCELLANEOUS INDICATORS                   *
*            4)  1 BYTE INDICATOR X'94' INDICATING EXEC POS INFORMATN *
*            5)  1 BYTE NUMBER OF EXEC POSITIONAL PARAMETERS          *
*                THE 1ST POS PARAMETER IS THE STEP NAME               *
*                ALL OTHER POS PARAMETERS WILL BE IGNORED             *
*            6)  VARIABLE LENGTH LIST OF EXEC POS PARAMETERS          *
*                EACH PRECEDED BY A 1 BYTE LENGTH FIELD               *
*            7)  VARIABLE LENGTH LIST OF KEYWORD PARAMETERS           *
*                EACH IS PRECEDED BY A 1 BYTE KEY, 1 BYTE NUMBER OF   *
*                POSITIONAL SUBPARAMETERS PRESENT, AND A LIST OF      *
*                SUBPARAMETERS EACH PRECEDED BY A 1 BYTE LENGTH FIELD *
*                WHICH MAY BE ZERO IF OMITTED AND FOLLOWED BY ANOTHER *
*                POSITIONAL PARAMETER.                                *
***********************************************************************
         SPACE 4
EXECARD  EQU   *
***********************************************************************
*        UPDATE LAST EXEC TABLE (IF NEEDED) WITH UNIT INFO            *
***********************************************************************
EXECUPDT L     R7,LASTEXEC    LOAD ADDR OF LAST EXEC ENTRY
         LTR   R7,R7          SEE IF ADDR = 0
         BZ    EUPDT1         IF ZERO, NO UPDATE, BRANCH
         MVC   ETAPES,TAPECNT MOVE STEP TAPE UNIT CNT TO TABLE
         MVC   EPRIVS,PRIVCNT MOVE STEP PRIV UNIT CNT TO TABLE
         XC    TAPECNT,TAPECNT ZERO TAPE UNIT CNT
         XC    PRIVCNT,PRIVCNT ZERO PRIV UNIT CNT
         XC    LASTEXEC,LASTEXEC ZERO ADDR OF LAST EXEC ENTRY
EUPDT1   TM    STREINDC,ETXPRCV STATEMENT INVOKE A PROCEDURE?
         BO    PROCARD        YES, BRANCH
         SPACE 4
***********************************************************************
*        INITIALIZE NEW STEP ENTRY IN TABLE                           *
***********************************************************************
EXECINIT LH    R15,ENTCOUNT   LOAD TABLE ENTRY COUNT
         LA    R15,1(,R15)    ADD 1 TO COUNT
         CH    R15,MAXENTS    SEE IF MAXIMUM REACHED
         BNL   TBLFULL        MAXIMUM REACHED, TAKE DUMP & EXIT
         STH   R15,ENTCOUNT   STORE NEW ENTRY COUNT
         L     R7,LASTENT     LOAD ADDR OF LAST ENTRY IN TABLE
         LA    R7,ENTLEN(,R7) INCREMENT TO NEXT ENTRY
         ST    R7,LASTENT     SAVE ADDR OF LAST ENTRY IN TABLE
         ST    R7,LASTEXEC    SAVE ADDR OF LAST EXEC ENTRY
         MVI   ENTRYTYP,TYPEXEC  SET TO EXEC ENTRY
         MVC   EENTRY,BLANKS     BLANK MOST OF EXEC INFO
         XC    ELIBIND(7),ELIBIND ZERO REST OF EXEC INFO
* * *    MVC   EREGION,H#512     SET DEFAULT REGION SIZE TO 512K    WEJ
         TM    STREINDC,ETXPROC  STATEMENT FROM A PROC??
         BNO   EINIT1            NO, BRANCH
         MVC   EJSTEP,SAVEPROC   MOVE JOB STEP NAME TO TABLE
EINIT1   TM    STREINDC,ETXSTPLB STEP HAVE STEPLIB DD??
         BNO   EINIT2            NO, BRANCH
         OI    ELIBIND,ESTEPLIB  SET INDICATOR IN TABLE
EINIT2   TM    JOBIND2,JOBLIB    DOES JOB HAVE JOBLIB??
         BNO   EXECSTAR          NO, BRANCH
         OI    ELIBIND,EJOBLIB   SET INDICATOR IN TABLE
         SPACE 4
EXECSTAR MVC   ECARDNO,CARDNO   SAVE CARD NUMBER OF THIS STATEMENT
         LA    R4,STREKEY       LOAD START OF TRUE TEXT
         ST    R4,PARMADDR      SAVE START OF PARAMETER ADDRESS
EXECPARM CLI   0(R4),ENDK       END OF TEXT STRING?????
         BE    PROCSEAR         YES, GO SEE IF FROM A PROC
         EJECT
***********************************************************************
*        EXEC STEPNAME                                                *
***********************************************************************
ESTEPN   CLI   0(R4),EXECK    SEE IF STEPNAME KEY
         BNE   EPGM           NO, BRANCH
         SLR   R5,R5          CLEAR REG FOR ICM
         ICM   R5,1,1(R4)     LOAD NUMBER OF SUBPARAMS
         BZ    EXELOOP        ZERO, NO STEP NAME
         SLR   R3,R3          CLEAR REG FOR ICM
         ICM   R3,1,2(R4)     LOAD LENGTH OF 1ST POS SUBPARAM
         BZ    EXELOOP        ZERO, NO STEP NAME, BRANCH
         CH    R3,H#8         SEE IF MAX LENGTH EXCEEDED
         BNH   ESTEPN0        NO, CONTINUE
         LA    R15,P@11       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     EXELOOP        GET OUT
ESTEPN0  DS    0H
         BCTR  R3,0           MAKE MACHINE LENGTH
         TM    STREINDC,ETXPROC STATEMENT FROM A PROC
         BO    ESTEPN1        YES, THEN NAME IS PROC STEP NAME
         EX    R3,MOVE5       MOVE NAME TO JOBSTEP NAME
         EX    R3,MOVE18      MOVE NAME TO JOBSTEP NAME
         B     EXELOOP        BRANCH
ESTEPN1  EX    R3,MOVE6       MOVE NAME TO PROCSTEP NAME
         EX    R3,MOVE19      MOVE NAME TO PROCSTEP NAME
         B     EXELOOP        BRANCH
         SPACE 3
***********************************************************************
*        EXEC PGM                                                     *
***********************************************************************
EPGM     CLI   0(R4),PGMEK    SEE IF PGM= KEY
         BNE   EREGN          NO, BRANCH
         SLR   R3,R3          CLEAR REG FOR ICM
         ICM   R3,1,2(R4)     LOAD LENGTH OF PGM NAME
         BZ    EXELOOP        ZERO, NULL, BRANCH
         BM    EXELOOP        HIGH BIT ON, REFERBACK, IGNORE
         CH    R3,H#8         SEE IF LENGTH > 8
         BNH   EPGM1          NO, CONTINUE
         LA    R15,P@12       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     EXELOOP        GET OUT
EPGM1    DS    0H
         BCTR  R3,0           MAKE MACHINE LENGTH
         EX    R3,MOVE7       MOVE PGM NAME TO TABLE
         SPACE
         AGO   .NOPGMS
         CLC   PGMCICS,3(R4)  Q. CICS PGM NAME ?
         BNE   CHK7074        NO, TRY 7074
         OI    RESOURCE+1,PCICS YES, ATTACH 'CICS' RESOURCE
         B     EXELOOP        & GET NEXT EXEC PARM
CHK7074  CLC   PGM7074,3(R4)  Q. PGM NAME 7074 ?
         BNE   CHK1401        NO, TRY 1401
         OI    RESOURCE+1,P7074 YES,ATTACH '7074' RESOURCE
         B     EXELOOP        & GET NEXT EXEC PARM
CHK1401  CLC   PGM1401,3(R4)  Q. PGM NAME 1401 ?
         BNE   CHKXMIT        NO, TRY XMISSIONS
         OI    RESOURCE,P1401 YES, ATTACH '1401' RESOURCE
         B     EXELOOP        & GET NEXT EXEC PARM
CHKXMIT  CLC   PGMXMIT,3(R4)  Q. PGM NAME XMISSIONS ?
         BNE   EXELOOP        NO, GET NEXT EXEC PARM
         OI    RESOURCE+1,PXMIT YES, ATTACH 'XMIT' RESOURCE
.NOPGMS  ANOP
         B     EXELOOP        BRANCH
         SPACE 3
***********************************************************************
*        EXEC REGION                                                  *
***********************************************************************
EREGN    CLI   0(R4),REGINEEK SEE IF REGION= KEY
         BNE   EREGN@         NO, BRANCH
         LA    R4,1(,R4)      INCREMENT PAST KEYWORD
         SLR   R3,R3          CLEAR REG FOR ICM
         ICM   R3,1,0(R4)     LOAD SUBPARAMETER COUNT
         BZ    EXELOOP        NO SUBPARAMETERS, BRANCH
         LA    R4,1(,R4)      INCREMENT PAST NUMBER OF FIELDS
         ICM   R3,1,0(R4)     LOAD LENGTH OF REGION PARAM
         BZ    EXELOOP        ZERO, NULL, BRANCH
         CH    R3,H#8         SEE IF MAX LENGTH EXCEEDED
         BNH   EREGN0         NO, CONTINUE
         LA    R15,P@13       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     EXELOOP        GET OUT
EREGN0   DS    0H
*        CH    R3,H#3         SEE IF AT LEAST 3 CHARACTERS
*        BL    EXELOOP        NO, MAX IS 99K, IGNORE
         LA    R15,0(R3,R4)   POINT TO LAST CHAR OF REGION SIZE
         NI    ELIBIND,255-EREGIONK TURN OFF REGION SIZE IN 'K' IND
         CLI   0(R15),C'K'    END IN 'K'
         BNE   EREGN1         NO, BRANCH
         BCTR  R3,0           REDUCE REGION LENGTH BY 1
         OI    ELIBIND,EREGIONK REMEMBER REGION SIZE IN 'K'
EREGN1   DS    0H
         BCTR  R3,R0          SET LENGTH TO MACHINE LENGTH
         L     R2,=A(NUMERTBL) POINT TO NUMERIC TRANLAT
         EX    R3,TRT1        EXECUTE NUMERIC TRANSLATE TEST        WEJ
         BNZ   EREGN4         NOT NUMERIC                           WEJ
         EX    R3,PACK1       PACK REGION SIZE
         CVB   R15,DOUBLE     CONVERT REGION SIZE TO BINARY
         TM    ELIBIND,EREGIONK WAS REGION SPECIFIED IN 'K'
         BO    EREGN3         YES, BRANCH
         SRA   R15,10         DIVIDE BY 1024 FOR 'K' VALUE
EREGN3   STH   R15,EREGION    STORE REGION SIZE IN TABLE
         B     EXELOOP        BRANCH
EREGN4   LA    R15,P@14       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     EXELOOP        GET OUT
         EJECT
***********************************************************************
*        EXEC REGION.                                                 *
***********************************************************************
EREGN@   CLI   0(R4),REGINPEK SEE IF REGION. KEY
         BNE   ETIME          NO, BRANCH
         LA    R4,1(,R4)      INCREMENT PAST KEYWORD
         SLR   R5,R5          ZERO REGISTER
         ICM   R5,1,0(R4)     LOAD NUMBER OF SUBPARAMS
         BNZ   EREGN@01       NOT ZERO, BRANCH
         LA    R15,P@13       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     EXELOOP        GET OUT
EREGN@01 DS    0H
         CH    R5,H#2         CHECK NUMBER OF SUBPARAMS
         BNH   EREGN@02       NOT > 2, OK
         LA    R15,P@13       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     EXELOOP        GET OUT
EREGN@02 DS    0H
         LA    R4,1(,R4)      INCREMENT PAST NUMBER OF SUBPARAMETERS
         SLR   R3,R3          ZERO REGISTER
         ICM   R3,1,0(R4)     LOAD LENGTH OF STEPNAME
         BNZ   EREGN@03       NOT ZERO, BRANCH
         LA    R15,P@13       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     EXELOOP        GET OUT
EREGN@03 DS    0H
         CH    R3,H#8         SEE IF MAX LENGTH EXCEEDED
         BNH   EREGN@04       NO, CONTINUE
         LA    R15,P@13       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     EXELOOP        GET OUT
EREGN@04 DS    0H
         BCTR  R3,0           MAKE MACHINE LENGTH
         EX    R3,COMPARE3    SEE IF OVERRIDE FOR CURRENT STEP
         BNE   EXELOOP        NO, GET OUT
         LA    R4,2(R4,R3)    SET REG TO START OF 2ND PARAM
         ICM   R3,1,0(R4)     LOAD LENGTH OF 2ND PARAM
         BZ    EXELOOP        ZERO, NULL, BRANCH
         CH    R3,H#8         SEE IF MAX LENGTH EXCEEDED
         BNH   EREGN@05       NO, CONTINUE
         LA    R15,P@13       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     EXELOOP        GET OUT
EREGN@05 DS    0H
*        CH    R3,H#3         SEE IF AT LEAST 3 CHARACTERS
*        BL    EXELOOP        NO, MAX IS 99K, IGNORE
         LA    R15,0(R3,R4)   POINT TO LAST CHAR OF REGION SIZE
         NI    ELIBIND,255-EREGIONK TURN OFF REGION SIZE IN 'K' IND
         CLI   0(R15),C'K'    END IN 'K'
         BNE   EREGN@1        NO, BRANCH
         BCTR  R3,0           REDUCE REGION LENGTH BY 1
         OI    ELIBIND,EREGIONK REMEMBER REGION SIZE IN 'K'
EREGN@1  DS    0H
         BCTR  R3,R0          SET LENGTH TO MACHINE LENGTH
         L     R2,=A(NUMERTBL) POINT TO NUMERIC TRANLAT
         EX    R3,TRT1        EXECUTE NUMERIC TRANSLATE TEST        WEJ
         BNZ   EREGN@4        NOT NUMERIC                           WEJ
         EX    R3,PACK1       PACK REGION SIZE
         CVB   R15,DOUBLE     CONVERT REGION SIZE TO BINARY
         TM    ELIBIND,EREGIONK WAS REGION SPECIFIED IN 'K'
         BO    EREGN@3        YES, BRANCH
         SRA   R15,10         DIVIDE BY 1024 FOR 'K' VALUE
EREGN@3  STH   R15,EREGION    STORE REGION SIZE IN TABLE
         B     EXELOOP        BRANCH
EREGN@4  LA    R15,P@14       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     EXELOOP        GET OUT
         EJECT
***********************************************************************
*        EXEC TIME                                                    *
***********************************************************************
ETIME    CLI   0(R4),TIMEEEK  SEE IF TIME= KEY
         BNE   ETIME@         NO, BRANCH
         LA    R4,1(,R4)      INCREMENT PAST KEYWORD DESCR
         SLR   R5,R5          CLEAR REGISTER FOR ICM
         ICM   R5,1,0(R4)     LOAD NUMBER OF SUBPARAMETERS
         BZ    EXELOOP        ZERO, IGNORE
         LA    R4,1(,R4)      INCREMENT PAST CONTROL BYTE
ETIME1   SLR   R3,R3          CLEAR REGISTER FOR ICM
         ICM   R3,1,0(R4)     LOAD LENGTH OF FIRST TIME FIELD
         CH    R3,H#4         COMPARE LENGTH TO 4
         BL    EXELOOP        LT 4, GET OUT
         BE    ETIME1A        EQ 4, COMPARE
         LA    R15,P@15       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     EXELOOP        GET OUT
ETIME1A  DS    0H
         CLC   C#1440,1(R4)     SEE IF TIME = 1440
         BNE   EXELOOP        NO, BRANCH
         TM    JOBIND,JOBSTC+JOBTECH+JOBPROD+JOBOPER+JOBCOMM 1440? WEJ
         BM    EXELOOP        YES, TIME=1440 OK ON JOB CARD
         LA    R15,P@16       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     EXELOOP        GET OUT
         EJECT
***********************************************************************
*        EXEC TIME.                                                   *
***********************************************************************
ETIME@   CLI   0(R4),TIMEPEK  SEE IF TIME. KEY
         BNE   EPERF          NO, BRANCH
         SLR   R3,R3          ZERO WORK REG
         SLR   R5,R5          ZERO WORK REG
         LA    R4,1(,R4)      INCREMENT PAST KEYWORD
         ICM   R5,1,0(R4)     LOAD NUMBER OF SUBPARAMS
         BZ    EXELOOP        NO SUBPARAMS, BRANCH
         CH    R5,H#3         SEE IF MORE THAN 3 SUBPARAMS
         BNH   ETIME@0A       NO, BRANCH
         LA    R15,P@15       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     EXELOOP        GET OUT
ETIME@0A DS    0H
         LA    R4,1(,R4)      INCREMENT PAST NUMBER OF SUBPARAMETERS
         CH    R5,H#2         SEE IF AT LEAST 2 SUBPARAMS
         BL    EXELOOP        ONLY ONE, IGNORE STEPNAME
         ICM   R3,1,0(R4)     LOAD LENGTH OF STEPNAME
         BZ    EXELOOP        NO STEPNAME, BRANCH
         CH    R3,H#8         SEE IF MAX LENGTH EXCEEDED
         BNH   ETIME@0B       NO, BRANCH
         LA    R15,P@15       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     EXELOOP        GET OUT
ETIME@0B DS    0H
         BCTR  R3,0           MAKE MACHINE LENGTH
         EX    R3,COMPARE3    SEE IF CORRECT STEPNAME
         BNE   EXELOOP        NO, GET OUT
         LA    R4,2(R4,R3)    LOAD ADDR OF 2ND SUBPARAM
*              PRIOR USE OF R3 WAS AS A LENGTH REGISTER
         IC    R3,0(R4)       LOAD LENGTH OF MINUTES PORTION
         CH    R3,H#4         COMPARE LENGTH TO 4
         BL    EXELOOP        LT 4, GET OUT
         BE    ETIME@0C       EQ 4, COMPARE
         LA    R15,P@15       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     EXELOOP        GET OUT
ETIME@0C DS    0H
         CLC   C#1440,1(R4)     SEE IF TIME = 1440
         BNE   EXELOOP        NO, BRANCH
         TM    JOBIND,JOBSTC+JOBTECH+JOBPROD+JOBOPER+JOBCOMM 1440?  WEJ
         BM    EXELOOP        YES, TIME=1440 OK ON EXEC CARD        WEJ
         LA    R15,P@16       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     EXELOOP        GET OUT
         SPACE 4
***********************************************************************
*        EXEC PERFORM                                                 *
***********************************************************************
EPERF    CLI   0(R4),PRFMEEK  SEE IF PERFORM= KEY
         BNE   EPERF@         NO, BRANCH
         TM    JOBIND,JOBTSO+JOBSTC+JOBTECH+JOBPROD+JOBOPER+JOBCOMM
         BM    EXELOOP        YES, PERFORM OK ON EXEC CARD
         LA    R15,P@17       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     EXELOOP        GET OUT
         SPACE 4
***********************************************************************
*        EXEC PERFORM.                                                *
***********************************************************************
EPERF@   CLI   0(R4),PRFMPEK  SEE IF PERFORM. KEY
         BNE   EADDR          NO, BRANCH
         TM    JOBIND,JOBTSO+JOBSTC+JOBTECH+JOBPROD+JOBCOMM ALLOW IT
         BM    EXELOOP        YES, PERFORM OK ON EXEC CARD
         LA    R15,P@17       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     EXELOOP        GET OUT
         SPACE 4
***********************************************************************
*        EXEC ADDRSPC                                                 *
***********************************************************************
EADDR    CLI   0(R4),ADRSPEEK SEE IF ADDRSPC= KEY
         BNE   EADDR@         NO, BRANCH
         TM    JOBIND,JOBSTC+JOBTECH+JOBPROD+JOBOPER+JOBCOMM ALLOW? WEJ
         BM    EXELOOP        YES, ADDRSPC OK ON EXEC CARD
         LA    R15,P@18       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     EXELOOP        GET OUT
         SPACE 4
***********************************************************************
*        EXEC ADDRSPC.                                                *
***********************************************************************
EADDR@   CLI   0(R4),ADRSPPEK SEE IF ADDRSPC. KEY
         BNE   EDPRTY         NO, BRANCH
         TM    JOBIND,JOBSTC+JOBTECH+JOBPROD+JOBOPER+JOBCOMM ALLOW? WEJ
         BM    EXELOOP        YES, ADDRSPC OK ON EXEC CARD
         LA    R15,P@18       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     EXELOOP        GET OUT
         EJECT
***********************************************************************
*        EXEC DPRTY                                                   *
***********************************************************************
EDPRTY   CLI   0(R4),SDPEEK   SEE IF  DPRTY= KEY
         BNE   EDPRTY@        NO, BRANCH
         TM    JOBIND,JOBSTC  SEE IF ALLOWED
         BO    EXELOOP        YES, DPRTY OK ON EXEC CARD
         LA    R15,P@19       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     EXELOOP        GET OUT
         SPACE 4
***********************************************************************
*        EXEC DPRTY.                                                  *
***********************************************************************
EDPRTY@  CLI   0(R4),SDPPEK   SEE IF  DPRTY. KEY
         BNE   EXELOOP        NO, BRANCH
         TM    JOBIND,JOBSTC  SEE IF ALLOWED
         BO    EXELOOP        YES, DPRTY OK ON EXEC CARD
         LA    R15,P@19       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     EXELOOP        GET OUT
         EJECT
***********************************************************************
*        THIS ROUTINE WILL INCREMENT PAST THE STRING(S) BEING         *
*        PROCESSED.  NOTE THAT FOLLOWING THE KEYWORD DESCRIPTOR       *
*        FIELD IS A COUNT OF SUBPARAMETERS.  FOLLOWING THE COUNT      *
*        WILL BE A LENGTH OR DESCRIPTOR FIELD.  IF THE HIGH ORDER     *
*        BIT IS ON, THE FIELD IS A COUNT FIELD OF THE NUMBER OF       *
*        SUBPARAMETERS WHICH THE SUBPARAMETER ITSELF MAY HAVE.        *
*        IF THIS IS TRUE, THE DESCRIPTOR FIELD WILL BE FOLLOWED BY    *
*        A LENGTH FIELD FOR THE FIRST SUBPARAMETER.  IF THE HIGH      *
*        ORDER BIT IS NOT ON, IT IS ONLY A LENGTH FIELD FOR A         *
*        SINGLE SUBPARAMETER.                                         *
***********************************************************************
EXELOOP  L     R4,PARMADDR    RESTORE START OF PARAMETER ADDRESS
         SLR   R2,R2          CLEAR REGISTER FOR ICM
         LA    R4,1(,R4)      INCREMENT PAST KEYWORD
         ICM   R2,1,0(R4)     LOAD SUBPARAMETER COUNT
         BNZ   EXELOOP1       OK, BRANCH INTO ROUTINE
         LA    R4,1(,R4)      NONE, INCREMENT PAST COUNT
         B     EXELOOP5       AND GET OUT OF ROUTINE
EXELOOP1 LA    R4,1(,R4)      INCREMENT PAST KEYWORD DESCR
EXELOOP2 SLR   R5,R5          CLEAR REGISTER FOR ICM
         ICM   R5,1,0(R4)     LOAD PARAMETER LENGTH
         BNM   EXELOOP3       HIGH BIT NOT ON, ONLY 1 PARAMETER
         N     R5,F#127       'AND' OUT THE HIGH ORDER BIT
         LA    R4,1(,R4)      INCREMENT PAST CONTROL BYTE
         B     EXELOOP4       BRANCH
EXELOOP3 LA    R5,1           SET PARAM COUNT TO 1
EXELOOP4 SLR   R3,R3          CLEAR REGISTER FOR ICM
         ICM   R3,1,0(R4)     LOAD PARAMETER LENGTH
         LA    R4,1(R3,R4)    INCREMENT PAST PARM
         BCT   R5,EXELOOP4    LOOP UNTIL PROCESSED ALL PARMS
         BCT   R2,EXELOOP2    LOOP UNTIL PROCESSED ALL PARMS
EXELOOP5 ST    R4,PARMADDR    SAVE START OF PARAMETER ADDRESS
         B     EXECPARM       CONTINUE
         EJECT
***********************************************************************
*        THE TEXT OF THE DD CARD TEXT IS AS FOLLOWS                   *
*            1)  2 BYTE LENGTH OF TEXT STRING INCLUDING ITSELF        *
*            2)  1 BYTE INDICATOR COMMON TO ALL TEXT RECORDS          *
*            3)  1 BYTE OF MISCELLANEOUS INDICATORS                   *
*            4)  1 BYTE INDICATOR X'6E' INDICATING DD POS INFORMATION *
*            5)  1 BYTE NUMBER OF DD POSITIONAL PARAMETERS            *
*                THE 1ST POS PARAMETER IS THE DDNAME IF PRESENT       *
*                ALL OTHER POS PARAMETERS WILL BE IGNORED             *
*            6)  VARIABLE LENGTH LIST OF DD POS PARAMETERS            *
*                EACH PRECEDED BY A 1 BYTE LENGTH FIELD               *
*            7)  VARIABLE LENGTH LIST OF KEYWORD PARAMETERS           *
*                EACH IS PRECEDED BY A 1 BYTE KEY, 1 BYTE NUMBER OF   *
*                POSITIONAL SUBPARAMETERS PRESENT, AND A LIST OF      *
*                SUBPARAMETERS EACH PRECEDED BY A 1 BYTE LENGTH FIELD *
*                WHICH MAY BE ZERO IF OMITTED AND FOLLOWED BY ANOTHER *
*                POSITIONAL PARAMETER.                                *
***********************************************************************
DDCARD   TM    STRDINDC,DTXDDNM  SEE IF DD DDNAME= STATEMENT
         BO    GETNEXT        YES, BYPASS
         TM    STRDINDC,DTXDYNAM SEE IF DD DYNAM STATEMENT
         BO    GETNEXT        YES, BYPASS
         TM    STRDINDC,DTXSYSIN SEE IF DD INPUT SPOOL FILE
         BO    GETNEXT        YES, BYPASS
         EJECT
***********************************************************************
*        INITIALIZE TEMPORARY ENTRY WHICH WILL BE USED                *
*        IF PRIV OR TAPE UNIT                                         *
***********************************************************************
         MVI   UNITIND,X'00'   ZERO UNIT TYPE IND
         MVI   UNITIND2,X'00'   ZERO UNIT PROCESSED INDICATOR
         MVI   DISPIND,X'00'   ZERO DISP IND
         MVI   UNITCOUN,X'01'  SET DEFAULT UNIT COUNT TO 1
         MVI   TENTRY,C' '     BLANK OUT ENTIRE TEMP ENTRY
         MVC   TENTRY+1(L'TENTRY-1),TENTRY
         XC    TTYPE,TTYPE     ZERO TEMPORARY UNIT TYPE
         XC    TVOLSER,TVOLSER ZERO TEMP 1ST VOLSER
         MVC   SAVEFORM,C#NOFORM SET SAVE FORM TO BLANKS WITH 0 LENGTH
         MVC   FCBFLAG,C'N'    SET FCB FOUND FLAG TO NO
DDSTART  LA    R4,STRDKEY      LOAD START OF TRUE TEXT
         ST    R4,PARMADDR     SAVE START OF PARAMETER ADDRESS
DDPARM   CLI   0(R4),ENDK      END OF TEXT STRING??
         BE    DDEND           YES, GO CHECK FOR UPDATE
         SPACE 4
***********************************************************************
*        DD DDNAME                                                    *
***********************************************************************
DDDNAME  CLI   0(R4),DDK      SEE IF DDNAME KEY
         BNE   DDDUMMY        NO, BRANCH
         SLR   R5,R5          CLEAR REG FOR ICM
         ICM   R5,1,1(R4)     LOAD NUMBER OF SUBPARAMS
         BZ    DDLOOP         ZERO, NO SUBPARAMS
         SLR   R3,R3          CLEAR REG FOR ICM
         ICM   R3,1,2(R4)     LOAD LENGTH OF DDNAME
         BZ    DDLOOP         YES, CONCATINATED DD, LOOP
         CH    R3,H#8         SEE IF MAX LENGTH EXCEEDED
         BNH   DDDNAMEA       NO, CONTINUE
         LA    R15,P@20       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     DDLOOP         GET OUT
DDDNAMEA DS    0H
         BCTR  R3,0           MAKE MACHINE LENGTH
         EX    R3,MOVE8       MOVE DDNAME TO TEMP ENTRY
         B     DDLOOP         GO GET NEXT PARAM
         SPACE 4
***********************************************************************
*        DD DUMMY                                                     *
***********************************************************************
DDDUMMY  CLI   0(R4),DUMMK    SEE IF DUMMY KEY
         BE    GETNEXT        DUMMY STATEMENTS ARE IGNORED
         EJECT
***********************************************************************
*        DD DSNAME                                                    *
***********************************************************************
DDSNAME  CLI   0(R4),DSNAMEK  SEE IF DSNAME KEY
         BNE   DDISP          NO, BRANCH
         SLR   R3,R3          CLEAR REG FOR ICM
         ICM   R3,1,2(R4)     LOAD LENGTH OF DSN
         BZ    DDLOOP         ZERO, NULL, BRANCH
         BNM   DSNSTD         HIGH BIT NOT ON, STANDARD DSN
         CLI   4(R4),C'*'     SEE IF 1ST PARAM = * (REFERBACK)
         BE    DSNREFBK       YES, REFERBACK
***********************************************************************
*        DSNAME PROBABLY A GDG                                        *
***********************************************************************
DSNGDG   N     R3,F#127       TURN OFF HIGH ORDER BIT
         CH    R3,H#2         SEE IF TWO SUBPARAMS
         BE    DSNGDGA        YES, BRANCH
         LA    R15,P@21       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     DDLOOP         GET OUT
DSNGDGA  DS    0H
         LA    R5,3(,R4)      LOAD ADDR OF START OF 1ST ENTRY
*              PRIOR USE OF R3 GUARENTEES HIGH ORDER ZEROS
         IC    R3,0(R5)       LOAD LENGTH OF 1ST ENTRY
         CH    R3,H#35        SEE IF MAX LENGTH EXCEEDED
         BNH   DSNGDGB        NOT EXCEEDED, BRANCH
         LA    R15,P@22       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     DDLOOP         GET OUT
DSNGDGB  DS    0H
         BCTR  R3,0           MAKE MACHINE LENGTH
         EX    R3,MOVE14      MOVE 1ST PART DSN TO TEMP ENTRY
         LA    R3,1(,R3)      MAKE TRUE LENGTH AGAIN
         LA    R5,1(R3,R5)    INCREMENT TO 2ND ENTRY
         LA    R2,TDSN        LOAD ADDR OF TEMPORARY DSN
         AR    R2,R3          LOAD ADDR WITHIN TDSN FOR GEN #
         LR    R15,R3         SAVE LENGTH OF 1ST PART DSN
         ICM   R3,1,0(R5)     LOAD LENGTH OF 2ND PART DSN
         BNZ   DSNGDGC        NOT ZERO, BRANCH
         LA    R15,P@21       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     DDLOOP         GET OUT
DSNGDGC  DS    0H
         AR    R15,R3         ADD NEW LENGTH OF 2ND PART TO 1ST
         CH    R15,H#42       SEE IF TOTAL LENGTH EXCEEDS MAX
         BNH   DSNGDGD        NO, BRANCH
         LA    R15,P@22       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     DDLOOP         GET OUT
DSNGDGD  DS    0H
         MVI   0(R2),C'('     PUT PARENS FOR GEN #
         LA    R2,1(,R2)      INCREMENT TO START TRUE GEN #
         BCTR  R3,0           MAKE MACHINE LENGTH
         EX    R3,MOVE15      MOVE GEN # TO TDSN
         LA    R2,1(R3,R2)    INCREMENT TO END OF TDSN FIELD
         MVI   0(R2),C')'     FINISH PARENS FOR GEN #
         B     DDLOOP         GO GET NEXT ENTRY
         SPACE 4
***********************************************************************
*        DSNAME PROBABLY A REFERBACK                                  *
***********************************************************************
DSNREFBK BAL   R14,REFBACK    GO TO REFERBACK RTN
         MVC   TDSN,REFDSN    SAVE REFERBACK DSNAME
         B     DDLOOP         GO GET NEXT ENTRY
***********************************************************************
*        DSNAME PROBABLY STANDARD                                     *
***********************************************************************
DSNSTD   CH    R3,H#44        SEE IF > MAX LENGTH
         BNH   DSNSTDA        NO, BRANCH
         LA    R15,P@22       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     DDLOOP         GET OUT
DSNSTDA  DS    0H
         CLC   3(8,R4),NULLFILE SEE IF DSN=NULLFILE
         BE    GETNEXT        YES, DUMMY, IGNORE STATEMENT
         BCTR  R3,0           MAKE MACHINE LENGTH
         EX    R3,MOVE9       MOVE DSN TO TEMP ENTRY
         B     DDLOOP         GO GET NEXT ENTRY
         EJECT
***********************************************************************
*        DD DISP                                                      *
***********************************************************************
DDISP    CLI   0(R4),DISPK    SEE IF DISP= KEYWORD
         BNE   DUNIT          NO, BRANCH
         SLR   R5,R5          CLEAR REG FOR ICM
         ICM   R5,1,1(R4)     LOAD NUMBER SUBPARAMS
         BZ    DDLOOP         ZERO, NULL, BRANCH
         LA    R4,2(,R4)      LOAD START ADDR OF SUBPARAMS
         CH    R5,H#3         SEE IF NUMBER > 3
         BNH   DDISPA         NO, CONTINUE
         LA    R15,P@23       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     DDLOOP         GET OUT
DDISPA   DS    0H
         SLR   R2,R2          ZERO WORK REG
DSPLOO1  LA    R2,1(,R2)      ADD 1 TO COUNTER
         CR    R2,R5          SEE IF ALL PROCESSED
         BH    DISPCHK        YES, GO CHECK RESULTS
         SLR   R3,R3          ZERO WORK REG
         IC    R3,0(,R4)      LOAD LEN OF PARAM
         CH    R2,H#1         SEE IF 1ST PARAM
         BE    DSPLOO2        YES, BRANCH TO PROCESS
         CH    R2,H#2         SEE IF 2ND PARAM
         BE    DSPLOO7        YES, BRANCH TO PROCESS
         B     DSPLOO9        BRANCH TO PROCESS
***********************************************************************
*         FIRST DISP PARAMETER                                        *
***********************************************************************
DSPLOO2  LTR   R3,R3          SEE IF LENGTH = 0
         BZ    DSPLOO3        YES, GO SET TO NEW
         CLC   C#NEW,1(R4)  SEE IF NEW
         BNE   DSPLOO4        NO, BRANCH
DSPLOO3  OI    DISPIND,NEW    SET TO NEW
         B     DSPLOO14       GO GET NEXT
DSPLOO4  DS    0H
         CLC   C#SHR,1(R4)    SEE IF SHR
         BE    DSPLOO4A       NO, BRANCH
         CLC   C#SHARE,1(R4)  SEE IF SHR
         BNE   DSPLOO5        NO, BRANCH
DSPLOO4A DS    0H
         OI    DISPIND,SHR    SET TO SHR
         B     DSPLOO14       GO GET NEXT
DSPLOO5  CLC   =C'OLD',1(R4) SEE IF OLD
         BNE   DSPLOO6        NO, MUST BE "MOD", BRANCH
         OI    DISPIND,OLD    SET TO OLD
         B     DSPLOO14       GO GET NEXT
DSPLOO6  OI    DISPIND,MOD    SET TO MOD
         B     DSPLOO14       GO GET NEXT
***********************************************************************
*         SECOND DISP PARAMETER                                       *
***********************************************************************
DSPLOO7  LTR   R3,R3          SEE IF LENGTH = 0
         BNZ   DSPLOO9        NOT ZERO, NO DEFAULT
         TM    DISPIND,NEW    SEE IF NEW
         BO    DSPLOO8        NO, GO SET DEFAULT TO KEEP
         OI    DISPIND,DELETE SET DEFAULT TO DELETE FOR "NEW"
         B     DSPLOO14       GO GET NEXT
DSPLOO8  OI    DISPIND,KEEP   SET TO KEEP
         B     DSPLOO14       GO GET NEXT
***********************************************************************
*         THIRD DISP PARAMETER                                        *
***********************************************************************
DSPLOO9  LTR   R3,R3          SEE IF LENGTH = 0
         BZ    DSPLOO14       YES, USE DEFAULT OF PREVIOUS PARAMETER
         CLC   C#KEEP,1(R4)      SEE IF KEEP
         BNE   DSPLOO10       NO, BRANCH
         OI    DISPIND,KEEP   SET TO KEEP
         B     DSPLOO14       GO GET NEXT
DSPLOO10 DS    0H
         CLC   C#PASS,1(R4)   SEE IF PASS
         BNE   DSPLOO11       NO, BRANCH
         OI    DISPIND,PASS   SET TO PASS
         B     DSPLOO14       GO GET NEXT
DSPLOO11 DS    0H
         CLC   C#CATLG,1(R4)     SEE IF CATLG
         BNE   DSPLOO12       NO, BRANCH
         OI    DISPIND,CATLG  SET TO CATLG
         B     DSPLOO14       GO GET NEXT
DSPLOO12 DS    0H
         CLC   C#DELETE,1(R4)  SEE IF DELETE
         BNE   DSPLOO13       NO, GO SET TO "UNCATLG"
         OI    DISPIND,DELETE SET TO DELETE
         B     DSPLOO14       GO GET NEXT
DSPLOO13 OI    DISPIND1,UNCATLG SET TO UNCATLG
DSPLOO14 LA    R4,1(R3,R4)    INCREMENT TO NEXT ENTRY
         B     DSPLOO1        LOOP
***********************************************************************
*         CHECK RESULTS OF PROCESSING ALL DISP PARAMETERS             *
*         IF ONLY 1 DISP PARAMETER WAS ENTERED, THE DEFAULT           *
*         FOR THE SECOND PARAMETER MUST BE DETERMINED.                *
***********************************************************************
DISPCHK  CH    R5,H#1         SEE IF ONLY 1 ENTRY
         BNE   DDLOOP         NO, DO NOT SET DEFAULT
         TM    DISPIND,NEW    SEE IF NEW
         BZ    DISPCHK2       NO, BRANCH
***********************************************************************
*        DISP=NEW  DEFAULT TO DELETE                                  *
***********************************************************************
DISPCHK1 OI    DISPIND,DELETE SET TO DELETE
         B     DDLOOP         GET OUT
***********************************************************************
*        DISP=OLD, MOD, OR SHR  DEFAULT TO KEEP                       *
***********************************************************************
DISPCHK2 OI    DISPIND,KEEP   SET TO KEEP
         B     DDLOOP         GO GET NEXT PARAM
         EJECT
***********************************************************************
*        DD UNIT                                                      *
***********************************************************************
DUNIT    CLI   0(R4),UNITK    SEE IF UNIT= PARAM
         BNE   DAFF           NO, BRANCH
*        TM    UNITIND2,UNITPRC  UNIT ALREADY PROCESSED
*        BO    DDLOOP                                               WEJ
         SLR   R5,R5          CLEAR REGISTER
         MVI   UNITIND2,UNITPRC
         ICM   R5,1,1(R4)     GET NUMBER OF POS SUBPARAMS
         BZ    DDLOOP         ZERO, NO POS SUBPARAMS
         CH    R5,H#3         SEE IF NUMBER > 3
         BNH   DUNITA         NO, CONTINUE
         LA    R15,P@24       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     DDLOOP         GET OUT
DUNITA   DS    0H
         LA    R4,2(,R4)      LOAD START OF POS PARAMS
         ICM   R3,1,0(R4)     LOAD LENGTH OF SUBPARAM
         BZ    UNITCTCK       ZERO, GO GET NEXT SUBPARAM
         CH    R3,H#8         SEE IF LENGTH > 8
         BNH   UNITNM1        NO, CONTINUE
DUNITER  DS    0H                                                   WEJ
         LA    R15,P@24       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     DDLOOP         GET OUT
***********************************************************************
*        PROCESS UNIT NAME                                            *
***********************************************************************
UNITNM1  SLR   R2,R2          CLEAR REG 2
         LR    R15,R3         GET ADJUSTED VALUE OF SIZE            WEJ
         BCTR  R15,R0                                               WEJ
         LA    R1,DEVTABLE    LOAD ADDR OF DEV TABLE
***********************************************************************
*        SEARCH THE DEVICE TABLE FOR A MATCH ON UNIT NAME TO          *
*        DETERMINE THE ATTRIBUTES OF THE UNIT NAME.                   *
***********************************************************************
UNITNM2  CLI   1(R1),X'00'    SEE IF END OF TABLE
         BE    UNITNM3        YES, BRANCH
         IC    R2,1(,R1)      GET TBL ENTRY LENGTH                  WEJ
         CR    R15,R2         CHECK LENGTH OF UNIT NAME TRUE LENGTH
         BL    UNITNM2A       NOT A MATCH                           WEJ
         EX    R2,COMPARE2    SEE IF UNIT NAME OR SUBSET MATCH      WEJ
         BE    UNITNM3        YES, BRANCH
UNITNM2A DS    0H                                                   WEJ
         LA    R1,10(,R1)     INCREMENT TO NEXT ENTRY
         B     UNITNM2        LOOP
UNITNM3  DS    0H
         CLI   0(R1),X'F0'    IS THIS A STORAGE DISK TYPE           WEJ
         BNL   UNITNM4        YES,CHECK IF PRODUCTION               WEJ
         OC    UNITIND,0(R1)  'OR' IN THE UNIT TYPE BITS
         B     UNITCTCK       GO RESET UNIT NAME SIZE
UNITNM4  DS    0H                                                   WEJ
         CH    R5,H#1         IS THERE MORE THAN ONE SUBPARAMETER   WEJ
         BH    UNITCTCK       YES, DO NOT CHANGE                    WEJ
         CR    R15,R2         CHECK LENGTH OF UNIT NAME TRUE LENGTH
         BNE   DDLOOP         NOT A MATCH                           WEJ
         B     DDLOOP         ALWAYS BRANCH BYPASSING COUNT CHANGE  WEJ
*        TM    JOBIND,JOBPROD PRODUCTION JOB?                       WEJ
*        BZ    DDLOOP         NO DO NOT CHANGE                      WEJ
         CLC   C#SORTWK,TDDN  IS DDNAME IS SORTWKXX                 WEJ
         BE    DDLOOP         YES, LOOP                             WEJ
         LR    R3,R1          SAVE TABLE POINTER IN R3              WEJ
         L     R4,PARMADDR    POINT TO BEGINNING AGAIN              WEJ
         LA    R14,4(R2,R4)   POINT TO NEXT PARM (CURR + 1 BYTE TXT WEJ
*                             LENGTH + TEXT LENGTH + 1 BYTE KEY +   WEJ
*                             1 BYTE COUNT FIELD)                   WEJ
         LH    R5,STRLTH      GET LENGTH OF TEXT                    WEJ
         LA    R15,2(,R5)     GET TEXT LENGTH PLUS 2 AND SAVE       WEJ
         STH   R15,STRLTH       RESULT                              WEJ
         LA    R5,STRDKEY(R5) SIZE OF MOVE = (CURR SIZE + START OF  WEJ
         SLR   R5,R14                         DD POINTER - NEXT     WEJ
         BCTR  R5,R0                          PARM POINTER -1)      WEJ
         LR    R15,R5         PUT SIZE OF MOVE IN BOTH R5 AND R15   WEJ
         MVCL  R4,R14         MOVE THE FIELD USING MVCL, NOTE THAT  WEJ
*                             R4 WILL POINT TO THE END OF TEXT      WEJ
         MVC   0(L'C#UNITC,R4),C#UNITC  MOVE KEY AND 1ST PARMS      WEJ
         EX    R2,MOVE23      MOVE THE UNIT NAME FROM TABLE         WEJ
         LA    R2,1(,R2)      GET TRUE SIZE                         WEJ
         STC   R2,2(,R4)      SAVE THE SIZE IN THE TEXT             WEJ
         LA    R4,L'C#UNITC+1(R2,R4) POINT TO COUNT SUB PARM        WEJ
         MVC   0(L'C#UNITCC,R4),C#UNITCC  MOVE SIZE AND END KEY     WEJ
         MVC   1(1,R4),0(R3)  MOVE IN UNIT COUNT                    WEJ
         L     R4,PARMADDR    RESTORE PTR TO START OF SHIFTED DD    WEJ
         B     DDPARM         GO TO REUSE SAME PARM POSITION        WEJ
UNITCTCK DS    0H
         LA    R4,1(R3,R4)    INCREMENT TO THE COUNT POSITION       WEJ
         CH    R5,H#2         CHECK IF UNIT COUNT POSSIBLE          WEJ
         BL    DDLOOP                                               WEJ
         ICM   R3,1,0(R4)     GET LENGTH OF SECOND PARM             WEJ
         BZ    UNITLOO2                                             WEJ
         BCTR  R3,R0          SET LENGTH TO MACHINE LENGTH
         CLI   1(R4),C'P'     PARALLEL MOUNTING?
         BNE   UNITCT1        NO, BRANCH
         MVI   UNITCOUN,C'P'  SET UNIT COUNT TO 'P'
         B     UNITLOO2
***********************************************************************
*        PROCESS UNIT COUNT                                           *
***********************************************************************
UNITCT1  DS    0H
         L     R2,=A(NUMERTBL) POINT TO NUMERIC TRANLAT
         EX    R3,TRT1        EXECUTE NUMERIC TRANSLATE TEST        WEJ
         BNZ   UNITLOO3       NOT NUMERIC                           WEJ
         EX    R3,PACK1       PACK UNIT COUNT
         LA    R3,1(,R3)      MAKE ORIG LENGTH
         CVB   R15,DOUBLE     CONVERT UNIT COUNT TO BIN
         STC   R15,UNITCOUN   SAVE UNIT COUNT
UNITLOO2 LA    R4,1(R3,R4)    INCREMENT TO NEXT ENTRY
         CH    R5,H#3         CHECK IF 3RD PARAM
         BNE   DDLOOP         IF NOT BYPASS                         WEJ
         ICM   R3,1,0(R4)     GET SIZE OF 3RD PARAM                 WEJ
         BZ    DDLOOP         IF ZERO BYPASS                        WEJ
         CH    R3,H#8         IS IT GREATER THAN 8                  WEJ
         BH    DUNITER        YES, GO TO PRINT SIZE MESSAGE         WEJ
         B     DDLOOP         GET NEXT PARAM                        WEJ
UNITLOO3 LA    R15,P@25       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     DDLOOP         GET OUT
         EJECT
***********************************************************************
*        DD UNIT=AFF                                                  *
***********************************************************************
DAFF     CLI   0(R4),AFFMK    SEE IF UNIT=AFF= KEY
         BNE   DVOL           NO, BRANCH
         MVC   REFERBCK,BLANKS   BLANK ENTIRE FIELD
         LA    R4,2(,R4)      LOAD ADDR OF AFF FIELD
         SLR   R3,R3          CLEAR REG FOR ICM
         ICM   R3,1,0(R4)     LOAD LENGTH OF DDNAME
         BZ    DDLOOP         ZERO, NO AFF, GET NEXT PARAM
         CH    R3,H#8         SEE IF LENGTH > 8
         BNH   DAFF01         NO, CONTINUE
         LA    R15,P@24       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     DDLOOP         GET OUT
DAFF01   DS    0H
         BCTR  R3,0           MAKE MACHINE LENGTH
         EX    R3,MOVE10      MOVE DDNAME TO REFERBACK FIELD
         L     R7,LASTEXEC    LOAD ADDR LAST EXEC ENTRY
         MVI   UNITIND,UNITFND SET UNIT FOUND IND
AFFLOOP  LA    R7,ENTLEN(,R7) INCREMENT TO NEXT DD ENTRY
         CLI   ENTRYTYP,TYPEND END OF TABLE?
         BE    DDLOOP          YES, BRANCH
         CLC   REFDDN,DDDN     MATCH DDNAME?
         BE    AFFOUND         YES, BRANCH
         B     AFFLOOP         LOOP
AFFOUND  OC    UNITIND,DTYPE   SET UNIT TYPE FROM PREV
         OI    UNITIND,AFF     TURN ON FOUND BY AFF IND
         B     DDLOOP          GO PROCESS NEXT ENTRY
         SPACE 4
***********************************************************************
*        DD VOL                                                       *
***********************************************************************
DVOL     CLI   0(R4),VOLUMEK  SEE IF VOL= KEYWORD
         BNE   DSER           NO, BRANCH
         SLR   R5,R5
         ICM   R5,1,1(R4)     LOAD NUM OF SUBPARAMS
         BZ    DDLOOP         YES, GO GET NEXT PARAM
         CH    R5,H#4         SEE IF AT LEAST 4 PARAMS
         BL    DDLOOP         LESS THAN 4, NONE NEEDED
         BNH   DVOL01         NO, CONTINUE
         LA    R15,P@26       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     DDLOOP         GET OUT
***********************************************************************
*        WE NEED ONLY THE 4TH PARAM (VOL COUNT)                       *
***********************************************************************
DVOL01   DS    0H
         SLR   R2,R2          ZERO WORK REG
         LA    R4,2(,R4)      LOAD START OF SUBPARAMS
VOLOOP1  LA    R2,1(,R2)      ADD 1 TO COUNTER
         SLR   R3,R3          CLEAR REG FOR IC
         IC    R3,0(,R4)      LOAD LENGTH OF SUBPARAM
         CH    R2,H#4         SEE IF 4TH PARAM
         BL    VOLOOP3        LESS THAN 4, GO GET NEXT
         BH    DDLOOP         GREATER THAN 4, GET OUT
         LTR   R3,R3          TEST LENGTH
         BZ    DDLOOP         ZERO, GET OUT
         CH    R3,H#8         SEE IF LENGTH > 8
         BNH   VOLOOP1A       NO, CONTINUE
         LA    R15,P@26       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     DDLOOP         GET OUT
VOLOOP1A DS    0H
         LR    R15,R2         SAVE SUBPARAM COUNT                   WEJ
***********************************************************************
*        CHECK VOLUME COUNT FOR NUMERIC                               *
***********************************************************************
         BCTR  R3,R0          SET LENGTH TO MACHINE LENGTH
         L     R2,=A(NUMERTBL) POINT TO NUMERIC TRANLAT
         EX    R3,TRT1        EXECUTE NUMERIC TRANSLATE TEST        WEJ
         BNZ   VOLOOP4        NOT NUMERIC                           WEJ
         EX    R3,PACK1       PACK VOLUME COUNT
         LR    R2,R15         RESTORE SUBPARAM COUNT                WEJ
         LA    R3,1(,R3)      RESTORE LENGTH
         CVB   R15,DOUBLE     CONVERT VOL COUNT TO BIN
         STC   R15,VOLCNT     SAVE VOL CNT
VOLOOP3  LA    R4,1(R3,R4)    INCRMENT TO NEXT POS SUBPARAM
         B     VOLOOP1        LOOP
VOLOOP4  LA    R15,P@27       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     DDLOOP         GO GET NEXT PARM
         EJECT
***********************************************************************
*        DD VOL=SER                                                   *
***********************************************************************
DSER     CLI   0(R4),SERMK    SEE IF VOL=SER= KEYWORD
         BNE   DREF           NO, BRANCH
***********************************************************************
*        ALL WE NEED IS THE NUMBER OF VOL/SER'S                       *
*        AND THE 1ST VOLSER IN THE LIST IF PRESENT                    *
***********************************************************************
         SLR   R5,R5          CLEAR REGISTER 5
         ICM   R5,1,1(R4)     LOAD NUMBER OF SUBPARAMS
         STC   R5,SERCNT      SAVE NUMBER OF VOL/SER'S
         BZ    DDLOOP         ZERO SUBPARAMS, GET OUT
         SLR   R3,R3          CLEAR REGISTER 3
         ICM   R3,1,2(R4)     LOAD LEN OF 1ST VOLSER
         BZ    DDLOOP         NULL VOLSER, GET OUT
         CH    R3,H#6         SEE IF MAX LEN EXCEEDED
         BNH   DSER01         NO, BRANCH
         LA    R15,P@28       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     DDLOOP         GET OUT
DSER01   DS    0H
         BCTR  R3,0           MAKE MACHINE LENGTH
         EX    R3,MOVE13      MOVE 1ST VOLSER TO SAVE
         B     DDLOOP         GO GET NEXT PARAM
         SPACE 4
***********************************************************************
*        DD VOL=REF                                                   *
***********************************************************************
DREF     CLI   0(R4),REFMK    SEE IF VOL=REF= KEYWORD
         BNE   DLABEL         NO, BRANCH
         SLR   R5,R5          CLEAR REG FOR ICM
         ICM   R5,1,2(R4)     LOAD 'LENGTH' OF REFERBACK
         BZ    DDLOOP         ZERO LENGTH, NULL, BRANCH
         BP    DREF00         HIGH BIT NOT ON, NOT A REFERBACK
         BAL   R14,REFBACK    GO TO REFERBACK ROUTINE
         OI    UNITIND,UNITFND SET UNIT FOUND IND
         OC    UNITIND,REFUNIT SAVE UNIT OF PREV DD
         MVC   TVOLSER,REFVOL SAVE REFERBACK VOLSER
         B     DDLOOP         GO GET NEXT PARAM
***********************************************************************
*        AT THIS POINT, THE REFERBACK IS PROBABLY TO A CATALOGED      *
*        DATA SET.                                                    *
***********************************************************************
DREF00   CH    R5,H#44        SEE IF LENGTH OF DSNAME EXCEEDS MAX
         BNH   DREF00A        NO, BRANCH
         LA    R15,P@34       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     DDLOOP         GET OUT
DREF00A  DS    0H
         MVC   LDSN,BLANKS    BLANK DSNAME
         BCTR  R5,0           MAKE MACHINE LENGTH
         EX    R5,MOVE17      MOVE DSNAME TO SAVE
         L     R7,FIRSTENT    LOAD START OF TABLE
         LA    R7,ENTLEN(,R7) INCREMENT PAST JOB ENTRY
DREF01   CLI   ENTRYTYP,TYPEDD  SEE IF DD ENTRY
         BE    DREF02         YES, GO SEE IF MATCH
         CLI   ENTRYTYP,TYPEND  SEE IF END OF TABLE
         BE    DREF05         NOT FOUND, GO CHECK CATALOG
         B     DREF03         LOOP
DREF02   CLC   DDSN,3(R4)     SEE IF SAME DSNAME
         BE    DREF04         YES, CHARGE FOR THE DSNAME
DREF03   LA    R7,ENTLEN(,R7) INCREMENT TO NEXT DD ENTRY
         B     DREF01         LOOP UNTIL DONE
DREF04   DS    0H
*        OI    UNITIND,UNITFND SET UNIT FOUND IND
         OC    UNITIND,DTYPE  SAVE UNIT TYPE FROM TABLE
         MVC   TVOLSER,DVOLSER SAVE VOLSER FROM TABLE
         B     DDLOOP         GO GET NEXT PARAM
DREF05   BAL   R2,LOCATE      GO READ CATALOG
         LTR   R15,R15        TEST RETURN CODE
         BNZ   DDLOOP         NOT CATALOGED, IGNORE IT
         CLC   CAMLCNT,$ZEROS    ANY VOLUME ENTRIES?                WEJ
         BE    DDLOOP         NO, IGNORE IT
         CLI   CAMVOL,X'00'   MAKE SURE THAT THERE IS A VOLSER
         BE    DDLOOP         NO, VSAM LIED AGAIN, IGNORE THIS ENTRY
         MVC   VOLCNT,CAMLCNT SAVE VOLUME COUNT
         MVC   TVOLSER,CAMVOL SAVE VOLSER FROM CATALOG
         TM    UCBTYP3,X'80'  TAPE UNIT?
         BO    DREF06         YES, BRANCH
         BAL   R2,UCBSEAR     NO, GO SEARCH UCBS FOR PRIV MOUNT
         B     DDLOOP         GO GET NEXT PARAM
DREF06   OI    UNITIND,TAPE   TURN ON TAPE IND
         B     DDLOOP         GO GET NEXT PARAM
         SPACE 6
***********************************************************************
*        DD LABEL                                                     *
***********************************************************************
DLABEL   CLI   0(R4),LABELK   SEE IF LABEL= KEYWORD
         BNE   DEXPDT         NO, BRANCH
         SLR   R5,R5          CLEAR REG FOR ICM
         ICM   R5,1,1(R4)     LOAD NUMBER SUBPARAMS
         CH    R5,H#2         SEE IF AT LEAST 2 SUBPARAMETERS
         BL    DDLOOP         NO, BRANCH
         SLR   R3,R3          CLEAR REG FOR ICM
         ICM   R3,1,2(R4)     LOAD LENGTH OF FIRST SUBPARAM
         LA    R4,3(R3,R4)    LOAD START ADDR OF SECOND SUBPARAMETER
         ICM   R3,1,0(R4)     LOAD LENGTH OF SECOND SUBPARAM
         CLC   C#BLP,1(R4)  SEE IF BLP PROCESSING
         BNE   DDLOOP         NO, GET OUT
***********************************************************************
*        DO NOT ALLOW BLP                                             *
***********************************************************************
         TM    JOBIND,JOBSTC+JOBTECH+JOBPROD+JOBOPER+JOBCOMM  ALLOWED?
         BM    DDLOOP         YES, GET OUT
         B     DDLOOP         ALLOW EVERYONE TO USE BLP      OVERRIDE
         LA    R15,P@44       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     DDLOOP         GET OUT
         EJECT
***********************************************************************
*        DD LABEL=EXPDT                                               *
***********************************************************************
DEXPDT   CLI   0(R4),EXPDTMK  SEE IF LABEL=EXPDT KEYWORD
         BNE   DINTRDR        NO, BRANCH
         SLR   R5,R5          CLEAR REG FOR ICM
         ICM   R5,1,1(R4)     LOAD NUMBER SUBPARAMS
         BZ    DDLOOP         ZERO, NULL, BRANCH
         LA    R4,2(,R4)      LOAD START ADDR OF SUBPARAMS
         SLR   R3,R3          CLEAR REG FOR ICM
         ICM   R3,1,0(R4)     LOAD LENGTH OF FIRST SUBPARAM
         CH    R3,H#5         SEE IF LENGTH = 5
         BNE   DDLOOP         NO, GET OUT
         CLC   C#98000,1(R4)  SEE IF EXPDT=98000
         BNE   DDLOOP         NO, GET OUT
***********************************************************************
*        DO NOT ALLOW EXPDT=98000 UNLESS AUTHORIZED                   *
***********************************************************************
         TM    JOBIND,JOBSTC+JOBTECH+JOBPROD+JOBOPER+JOBCOMM ALLOW? WEJ
         BM    DDLOOP         YES, GO TO DDLOOP                     WEJ
         LA    R15,P@45       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     DDLOOP         GO TO DDLOOP                          WEJ
DDSMF1   DS    0H                                                   WEJ
         BAL   R14,SMFWTM     GO WRITE SMF RECORD
         B     DDLOOP         GET OUT
         SPACE 4
***********************************************************************
*        DD SYSOUT                                                    *
***********************************************************************
DINTRDR  CLI   0(R4),SYSOUTK  SEE IF SYSOUT= KEYWORD
         BNE   DDQNAME        NO, CHECK FOR QNAME                   WEJ
         SLR   R5,R5          ZERO OUT R5                           WEJ
         ICM   R5,1,1(R4)     GET NUMBER OF POSITIONAL SUB PARAMS.
         BZ    DDLOOP         IF NONE, GET NEXT PARAM.
         CH    R5,H#3         ARE THERE 3 PARAMETERS
         BNE   DDLOOP         NO, THERE IS NO FORM, GET NEXT PARAM
         SLR   R3,R3          ZERO OUT REGISTER 3
         ICM   R3,1,2(R4)     GET LENGTH OF FIRST PARAMETER
         LA    R4,3(R3,R4)    POINT TO LENGTH OF NEXT PARAM
         ICM   R3,1,0(R4)     GET LENGTH OF NEXT PARAM
         LA    R4,1(R3,R4)    POINT TO LENGTH OF NEXT PARM (FORM-ID)
         ICM   R3,1,0(R4)     GET LENGTH OF NEXT PARAM
         BZ    DDLOOP         IF ZERO, GO TO GET NEXT PARAM
         CH    R3,H#8         IS LENGTH GREATER THAN 8
         BNH   DDMVFORM       NO, GO TO MOVE FORM
         LA    R15,P@38       SET ERROR POSITION
         BAL   R14,MSGRTN     PERFORM ERROR ROUTINE
         B     DDLOOP         GET NEXT PARAMETER
DDMVFORM DS    0H
         EX    R3,DDMVFRM     MOVE FORM-ID AND LENGTH TO SAVE AREA
         B     DDLOOP         GET NEXT PARAMETER
DDMVFRM  MVC   SAVEFORM(0),0(R4)  EXECUTED MOVE OF FORM AND ITS LENGTH
***********************************************************************
*        DD QNAME                                                     *
***********************************************************************
DDQNAME  DS    0H
         CLI   0(R4),QNAMEK   SEE IF QNAME= PARAMETER               WEJ
         BNE   DDFCB          IF NOT, CHECK FOR FCB=                WEJ
         SLR   R5,R5          CLEAR REGISTER FOR ICM                WEJ
         ICM   R5,1,1(R4)     INSERT NUMBER OF SUBPARAMETERS        WEJ
         BZ    DDLOOP         NONE, GET NEXT PARAMETER              WEJ
         MVI   SMFRTYPE,X'F7' SET RECORD TYPE FOR QNAME USE REC.    WEJ
         SLR   R3,R3          CLEAR REGISTER FOR ICM                WEJ
         IC    R3,2(,R4)      GET LENGTH
         MVC   SAVEQNM,BLANKS BLANK OUT SAVE QNAME                  WEJ
         CLI   2(R4),X'08'    IS FIELD LENGTH 8                     WEJ
         BH    QERRORL        GO TO FLAG QNAME GREATER THAN 8       WEJ
         CLI   2(R4),X'00'    IS FIELD LENGTH 0                     WEJ
         BE    DDLOOP         YES, GET NEXT PARAMETER               WEJ
         BCTR  R3,R0          ADJUST FOR EXECUTED MOVE              WEJ
         EX    R3,QNMMOVE     MOVE QNAME                            WEJ
         CLI   2(R4),X'02'    IS FIELD LENGTH 2                     WEJ
         BE    QCHECK1        YES, CHECK FOR QUEUES PH AND PQ       WEJ
         CLI   2(R4),X'08'    IS FIELD LENGTH 8                     WEJ
         BNE   DDSMF1         NO, NOT SINGLE STREAMED QUEUE, GO LOG WEJ
         CLC   C#ADMMSG,3(R4)     IS QUEUE ADMINMSG                 WEJ
         BNE   DDSMF1         NO, NOT SINGLE STREAMED QUEUE, GO LOG WEJ
         CLI   TCMCLASS,C'L'  IS CLASS FORCE ALREADY = 'L'          WEJ
         BE    DDLOOP         YES, GET NEXT PARAMETER               WEJ
         CLI   TCMCLASS,X'00' IS CLASS FORCE NULL                   WEJ
         BNE   QERROR         NO, GO TO ERROR                       WEJ
         MVI   TCMCLASS,C'L'  MOVE 'L' TO TCMCLASS                  WEJ
         B     DDSMF1         GET NEXT PARAMETER                    WEJ
QNMMOVE  MVC   SAVEQNM(0),3(R4)  EXECUTED MOVE OF QNAME             WEJ
QCHECK1  DS    0H                                                   WEJ
         CLC   C#PH,3(R4)     IS QUEUE PH                           WEJ
         BE    QCHECK1A       YES, BYPASS NEXT COMPARE              WEJ
         CLC   C#PQ,3(R4)     IS QUEUE PQ                           WEJ
         BNE   DDSMF1         NO, NOT SINGLE STREAMED QUEUE         WEJ
QCHECK1A DS    0H
         CLI   TCMCLASS,C'J'  IS CLASS FORCE ALREADY = 'J'          WEJ
         BE    DDSMF1         YES, GO LOG                           WEJ
         CLI   TCMCLASS,X'00' IS CLASS FORCE NULL                   WEJ
         BNE   QERROR         NO, GO TO ERROR                       WEJ
         MVI   TCMCLASS,C'J'  MOVE 'J' TO TCMCLASS                  WEJ
         B     DDLOOP         GET NEXT PARAMETER                    WEJ
QERROR   DS    0H                                                   WEJ
         LA    R15,P@50       SET ERROR NUMBER                      WEJ
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                    WEJ
         B     DDLOOP         GET NEXT PARAMETER                    WEJ
QERRORL  DS    0H                                                   WEJ
         LA    R15,P@49       SET ERROR NUMBER                      WEJ
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                    WEJ
         B     DDLOOP         GET NEXT PARAMETER                    WEJ
* * *    B     DDSMF1         GO LOG                                WEJ
* * *    B     DDLOOP         GET NEXT PARAMETER                    WEJ
DDFCB    DS    0H
         CLI   0(R4),FCBK     IS THIS FCB=
         BNE   DDLOOP         NO, GET NEXT PARAMETER
         MVI   FCBFLAG,C'Y'   SET FCB FOUND FLAG TO YES
         B     DDLOOP
         SPACE 4
***********************************************************************
*        THIS ROUTINE WILL INCREMENT PAST THE STRING(S) BEING         *
*        PROCESSED.  NOTE THAT FOLLOWING THE KEYWORD DESCRIPTOR       *
*        FIELD IS A COUNT OF SUBPARAMETERS.  FOLLOWING THE COUNT      *
*        WILL BE A LENGTH OR DESCRIPTOR FIELD.  IF THE HIGH ORDER     *
*        BIT IS ON, THE FIELD IS A COUNT FIELD OF THE NUMBER OF       *
*        SUBPARAMETERS WHICH THE SUBPARAMETER ITSELF MAY HAVE.        *
*        IF THIS IS TRUE, THE DESCRIPTOR FIELD WILL BE FOLLOWED BY    *
*        A LENGTH FIELD FOR THE FIRST SUBPARAMETER.  IF THE HIGH      *
*        ORDER BIT IS NOT ON, IT IS ONLY A LENGTH FIELD FOR A         *
*        SINGLE SUBPARAMETER.                                         *
***********************************************************************
DDLOOP   L     R4,PARMADDR    RESTORE START OF PARAMETER ADDRESS
         SLR   R2,R2          CLEAR REGISTER FOR ICM
         LA    R4,1(,R4)      INCREMENT PAST KEYWORD
         ICM   R2,1,0(R4)     LOAD SUBPARAMETER COUNT
         BNZ   DDLOOP1        OK, BRANCH INTO ROUTINE
         LA    R4,1(,R4)      NONE, INCREMENT PAST COUNT
         B     DDLOOP5        AND GET OUT OF ROUTINE
DDLOOP1  LA    R4,1(,R4)      INCREMENT PAST KEYWORD DESCR
DDLOOP2  SLR   R5,R5          CLEAR REGISTER FOR ICM
         ICM   R5,1,0(R4)     LOAD PARAMETER LENGTH
         BNM   DDLOOP3        HIGH BIT NOT ON, ONLY 1 PARAMETER
         N     R5,F#127       'AND' OUT THE HIGH ORDER BIT
         LA    R4,1(,R4)      INCREMENT PAST CONTROL BYTE
         B     DDLOOP4        BRANCH
DDLOOP3  LA    R5,1           SET PARAM COUNT TO 1
DDLOOP4  SLR   R3,R3          CLEAR REGISTER FOR ICM
         ICM   R3,1,0(R4)     LOAD PARAMETER LENGTH
         LA    R4,1(R3,R4)    INCREMENT PAST PARM
         BCT   R5,DDLOOP4     LOOP UNTIL PROCESSED ALL PARMS
         BCT   R2,DDLOOP2     LOOP UNTIL PROCESSED ALL PARMS
DDLOOP5  ST    R4,PARMADDR    SAVE START OF PARAMETER ADDRESS
         B     DDPARM         CONTINUE
         EJECT
***********************************************************************
*        THIS IS WHERE WE LOOK AT WHAT WE HAVE FOUND OUT ABOUT THE    *
*        DD STATEMENT WE HAVE JUST FINISHED PROCESSING.               *
*        THE FOLLOWING ARE LOOKED AT                                  *
*          1)  THE DISPOSITION FOR SOME DATA SETS                     *
*              MUST BE AUTHORIZED FOR OTHER THAT SHR                  *
*          2)  THE TEMPORARY ENTRY MUST BE SAVED IF UNIT IS A TAPE    *
*              OR A PRIV UNIT.                                        *
*          3)  IF THE ENTRY IS A TAPE OR PRIV, THE UNIT COUNT MUST BE *
*              ADDED TO THE RUNNING COUNT FOR THE STEP.               *
***********************************************************************
*
***********************************************************************
*        FORCE FCB, IF FCB NOT PRESENT AND SYSOUT=(CLASS,,FORM)       *
***********************************************************************
DDEND    DS    0H
         CLI   FCBFLAG,C'Y'       WAS FCB= FOUND
         BE    DDEND10            YES
         CLI   SAVEFMLN,X'04'     IS SAVE FORM LENGTH > 4
         BNH   DDEND01            NO, DO NOT FORCE LENGTH
         MVI   SAVEFMLN,X'04'     FORCE LENGTH OF 4
DDEND01  DS    0H
         SLR   R3,R3              ZERO OUT REGISTER 3
         ICM   R3,1,SAVEFMLN      LOAD LENGTH
         BZ    DDEND10            BYPASS IF LENGTH ZERO
         MVI   0(R4),FCBK         OVERLAY END KEY WITH FCB KEY
         MVI   1(R4),1            SET NUMBER OF SUB PARAMETERS TO 1
         EX    R3,MVDDFCB         MOVE SAVED FORM (FCB)
         LA    R3,3(,R3)          GET SIZE OF ADDITION
         LA    R4,0(R3,R4)        POINT TO NEW LOCATION OF ENDKEY
         MVI   0(R4),ENDK         MOVE END KEY TO NEW POSITION
         SLR   R0,R0              ZERO OUT REGISTER 1
         ICM   R0,B'0011',STRLTH  GET STRING LENGTH FOR INCREMENT
         ALR   R0,R3              INCREMENT LENGTH
         STCM  R0,B'0011',STRLTH  SAVE INCREMENTED LENGTH
         B     DDEND10
MVDDFCB  MVC   2(0,R4),SAVEFORM   MOVE SAVED FORM
***********************************************************************
*        DO NOT ALLOW A DISP OF "DELETE" FOR SYSTEM DATA SETS.        *
***********************************************************************
DDEND10  DS    0H
         CLC   TDSN(5),C#SYS1 SEE IF SYS1. DATA SET
         BE    DDEND20        YES, BRANCH TO FURTHER CHECK          WEJ
         CLC   TDSN(5),C#SYS2 SEE IF SYS2. DATA SET
         BE    DDEND20        YES, BRANCH TO FURTHER CHECK          WEJ
         CLC   TDSN(3),C#LD    SEE IF LD. DATA SET                  WEJ
         BNE   DDEND40        NO, BRANCH TO NEXT CHECK              WEJ
DDEND20  TM    DISPIND,DELETE SEE IF DISP=DELETE
         BNO   DDEND30        NO, BRANCH
         TM    JOBIND,JOBTECH                 IS JOB AUTHORIZED     WEJ
         BZ    DDEND35        NO, GO TO ERROR MESSAGE
***********************************************************************
*        DO NOT ALLOW A DISP OF MOD FOR SYSTEM DATA SETS           WEJ*
*                                                                  WEJ*
***********************************************************************
DDEND30  TM    DISPIND,MOD    SEE IF DISP=MOD                       WEJ
         BZ    DDEND40        NO   BRANCH                           WEJ
*        IF DISP = MOD, JOB MUST BE AUTHORIZED                      WEJ
         TM    JOBIND,JOBTECH                IS JOB AUTHORIZED      WEJ
         BO    DDEND40        YES, BRANCH
DDEND35  LA    R15,P@29       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
***********************************************************************
*        IF UNIT HAS NOT BEEN DETERMINED, THE UNIT TYPE MUST          *
*        BE SEARCHED FOR IN THE FOLLOWING ORDER:                      *
*                                                                     *
*        1)  THE DSNAME TABLE MAINTAINED BY THIS EXIT SINCE THE       *
*            DATASET MAY HAVE BEEN CATALOGED OR PASSED BY A           *
*            PREVIOUS DD STATEMENT.                                   *
*        2)  THE SYSTEM CATALOG                                       *
*                                                                     *
***********************************************************************
DDEND40  CLI   UNITIND,X'00'  SEE IF UNIT HAS BEEN DETERMINED
         BNE   DDEND150       YES, BRANCH
         CLI   TDSN,C' '      SEE IF DSN SPECIFIED
         BE    DDEND150       NOT SPECIFIED, GET OUT
         CLI   TVOLSER,X'00'  SEE IF VOLSER SPECIFIED
         BE    DDEND45        NO, GO SEARCH TABLE AND/OR CATALOG
         BAL   R2,UCBSEAR     NO, GO SEARCH UCBS FOR PRIV MOUNT
         B     DDEND150       GET OUT
DDEND45  TM    DISPIND,NEW    SEE IF THIS IS A NEW DATASET
         BO    DDEND150       YES, VOLSER WILL BE A WORK PACK
         L     R7,FIRSTENT    LOAD ADDR OF START OF TABLE
***********************************************************************
*        SEARCH THE DSNAME TABLE MAINTAINED BY THIS EXIT              *
***********************************************************************
DDEND50  LA    R7,ENTLEN(,R7) INCREMENT TO NEXT ENTRY
         CLI   ENTRYTYP,TYPEND END OF TABLE?
         BE    DDEND60        YES, GO CHECK CATALOG
         TM    ENTRYTYP,TYPEDD DD ENTRY?
         BNO   DDEND50        NO, LOOP
         CLC   DDSN,TDSN      DSN MATCH?
         BNE   DDEND50        NO, LOOP
         OC    UNITIND,DTYPE  SAVE UNIT INFO
         MVC   TVOLSER,DVOLSER SAVE VOLSER INFO
         B     DDEND150       GET OUT
***********************************************************************
*        SEARCH CATALOG FOR UNIT INFO                                 *
***********************************************************************
DDEND60  DS    0H
         AIF   ('&CAMLST' EQ 'YES').CAML1
         B     DDEND150       BYPASS CAMLST NOP
.CAML1   ANOP
         CLC   TDSN(5),C#SYS1 SEE IF SYS1. DATA SET
         BE    DDEND150       YES, NO NEED TO CAMLST
         TM    STRDINDC,DTXSYOUT SEE IF DD OUTPUT SPOOL FILE
         BO    DDEND150       YES, NO NEED TO CAMLST
         TM    JOBIND,JOBSTC                   IS LOCATE NEEDED?    WEJ
         BO    DDEND150       YES, NO NEED TO CAMLST                WEJ
         MVC   LDSN,TDSN      SAVE DSNAME
         BAL   R2,LOCATE      GO READ CATALOG
         LTR   R15,R15        TEST RETURN CODE
         BZ    DDEND70        ZERO, BRANCH
         CH    R15,H#8        DSNAME NOT FOUND OR GDG LEVEL?
         BE    DDEND90        YES, BRANCH
DDEND70  CLC   CAMLCNT,$ZEROS    ANY VOLUME ENTRIES                 WEJ
         BE    DDEND150       NO, BRANCH
         CLI   CAMVOL,X'00'   MAKE SURE THAT THERE IS A VOLSER
         BE    DDEND150       NO, VSAM LIED AGAIN, IGNORE THIS ENTRY
         MVC   VOLCNT,CAMLCNT SAVE VOLUME COUNT
         MVC   TVOLSER,CAMVOL SAVE VOLSER FROM CATALOG
         TM    UCBTYP3,X'80'  TAPE UNIT?
         BZ    DDEND150       NO, GET OUT
DDEND80  OI    UNITIND,TAPE   TURN ON TAPE IND
         B     DDEND150       BYPASS ROUTINES
         EJECT
***********************************************************************
*        DATA SET NOT FOUND, MAY BE GDG LEVEL                         *
*        DO A GENERIC LOCATE FOR THE DSNAME INDEX GIVEN               *
***********************************************************************
DDEND90  MVC   SVC26DS,LDSN   MOVE DSNAME TO SVC26 AREA
         LA    R1,43          LOAD MAXIMUM LENGTH OF DSN
         LA    R14,SVC26DS+42 LOAD ADDRESS OF END OF DSN
DDEND100 CLI   0(R14),C' '    SEE IF LAST CHAR DSN
         BNE   DDEND110       YES, BRANCH
         BCTR  R14,0          BACK UP DSN POINTER 1 POSITION
         BCT   R1,DDEND100    LOOP UNTIL FOUND
DDEND110 LTR   R1,R1          TEST LENGTH
         BZ    DDEND150       ZERO, NO DSN, BRANCH
         STC   R1,SVC26DSL    SAVE LENGTH OF DSN
         XC    CTGPL,CTGPL    ZERO PARM LIST
         MVI   CTGPL,B'00000111' SET CTGOPTN1
         MVI   CTGPL+2,B'00010001' SET CTGOPTN3
         LA    R1,SVC26DSN    LOAD ADDRESS OF DSNAME
         ST    R1,CTGPL+4     SET CTGENT
         XC    CTGPL+8(4),CTGPL+8 ZERO CTGCAT
         XC    CTGPL+18(4),CTGPL+18 ZERO CTGPSWD
         LH    R1,H#5000      LOAD LENGTH OF WORK AREA
         STH   R1,SVC26WRK    AND SAVE IT WORK AREA
         LA    R1,SVC26WRK    LOAD ADDRESS OF WORK AREA
         ST    R1,CTGPL+12    SET CTGWKA
         LA    R1,CTGPL       LOAD ADDRESS OF WORK AREA
         SVC   26             CALL CATALOG GENERIC SEARCH
         LTR   R15,R15        TEST RETURN CODE
         BNZ   DDEND150       NOT ZERO, BRANCH
***********************************************************************
*        FOUND DATA SETS AT THE GIVEN INDEX LEVEL.  CHECK TO SEE      *
*        IF GDG LEVEL.                                                *
***********************************************************************
         LH    R14,SVC26WRK+2 LOAD LENGTH OF AREA+4
         SH    R14,H#4        SUBTRACT LENGTH OF PREFIX
         SRDA  R14,32         SHIFT TO ODD REGISTER OF PAIR
         D     R14,F#45       DIVIDE BY LENGTH OF EACH ENTRY
         LTR   R5,15          TEST NUMBER OF DSNAMES RETURNED
         BZ    DDEND150       ZERO, NONE
         BM    DDEND150       NEGATIVE, ERROR
         LA    R4,SVC26WRK+4  POINT TO FIRST DSN
         CLI   0(R4),C'B'     IS THIS A GDG BASE (VSAM CATALOG ONLY)
         BE    DDEND140       YES, BRANCH
         CLI   0(R4),C'A'     IS THIS A NONVSAM ENTRY
         BNE   DDEND150       NO, BRANCH
         SLR   R15,R15        ZERO, REGISTER FOR IC
         IC    R15,SVC26DSL   LOAD BASE DSN LENGTH
         LA    R15,2(R15,R4)  POINT PAST TYPE, BASE, AND '.'
         CLI   0(R15),C'G'    POSSIBLE GDG
         BNE   DDEND150       NO, BRANCH
         CLI   5(R15),C'V'    POSSIBLE GDG
         BNE   DDEND150       NO, BRANCH
         CLI   8(R15),C' '    POSSIBLE GDG
         BNE   DDEND150       NO, BRANCH
         MVC   DOUBLE,0(R15)  SAVE DSN SUFFIX
         OC    DOUBLE,GDGMASK TEST NUMERIC POSITIONS
         CLC   DOUBLE,0(R15)  SEE IF CHANGED
         BNE   DDEND150       YES, NOT GDG, BRANCH
         OI    UNITIND,UNITGDG UNIT INFORMATION FROM GDG PROCESSING
***********************************************************************
*        LOCATE INDIVIDUAL DATA SETS RETURNED FROM THE GENERIC        *
*        LOCATE FROM SVC26.  ALL ENTRIES ARE LOCATED TO GET THE       *
*        VOLUME COUNT IF 'PARALLEL' MOUNTING IS REQUESTED.            *
***********************************************************************
DDEND120 MVC   LDSN,1(R4)     SAVE DSNAME
         BAL   R2,LOCATE      GO READ CATALOG
         LTR   R15,R15        TEST RETURN CODE
         BNZ   DDEND140       NOT ZERO, SOMETHINGS WRONG, LOOP
         CLC   CAMLCNT,$ZEROS    ANY VOLUME ENTRIES                 WEJ
         BE    DDEND140       NO, BYPASS ENTRY
         CLI   CAMVOL,X'00'   MAKE SURE THAT THERE IS A VOLSER
         BE    DDEND140       NO, VSAM LIED AGAIN, IGNORE THIS ENTRY
         MVC   TVOLSER,CAMVOL SAVE VOLSER FROM CATALOG
         SLR   R15,R15        CLEAR REG FOR IC
         IC    R15,VOLCNT     LOAD VOLUME COUNT
         AH    R15,CAMLCNT    ADD CAMLST VOLUME COUNT
         STC   R15,VOLCNT     SAVE NEW VOLUME COUNT
         TM    UCBTYP3,X'80'  TAPE UNIT?
         BO    DDEND130       YES, BRANCH
         BAL   R2,UCBSEAR     NO, GO SEARCH UCBS FOR PRIV MOUNT
         B     DDEND140       GET OUT
DDEND130 OI    UNITIND,TAPE   TURN ON TAPE IND
DDEND140 LA    R4,45(,R4)     INCREMENT TO NEXT ENTRY
         BCT   R5,DDEND120    LOOP UNTIL DONE
***********************************************************************
*        PROCESS ONLY DD STATEMENTS WHICH ARE FOR MOUNTABLE           *
*        DEVICES.                                                     *
***********************************************************************
DDEND150 TM    UNITIND,TAPE   IS THIS A TAPE DD?
         BO    DDEND160       YES, BRANCH
         TM    UNITIND,PRIV   IS THIS A PRIV DD?
         BNO   DDEND240       NO, DO NOT SAVE
***********************************************************************
*        IF THIS STATEMENT REQUIRES A MOUNTABLE DISK PACK, WRITE      *
*        AN ERROR MESSAGE SINCE WE NO LONGER HAVE ANY MOUNTABLE       *
*        DISK PACKS.                                                  *
***********************************************************************
*        LA    R15,P@48       SET ERROR NUMBER
*        BAL   R14,MSGRTN     GO ISSUE ERROR MSG
***********************************************************************
*        IF THE UNIT WAS DETERMINED BY UNIT=AFF, DO NOT CHARGE        *
*        FOR THE DEVICE BUT SAVE THE TABLE ENTRY FOR POSSIBLE         *
*        REFERBACKS BY SUBSEQUENT STATEMENTS.                         *
***********************************************************************
DDEND160 TM    UNITIND,AFF    UNIT=AFF DD STATEMENT
         BO    DDEND230       YES, DO NOT ADD TO UNIT COUNTS
         CLI   TVOLSER,X'00'  VOLSER SPECIFIED??
         BE    DDEND180       NO, BRANCH
         L     R7,LASTEXEC    LOAD ADDR LAST EXEC ENTRY
         EJECT
***********************************************************************
*        SEE IF THE VOLSER WAS USED PREVIOUSLY IN THIS STEP.          *
*        IF SO, DO NOT CHARGE FOR THE DEVICE BUT AGAIN SAVE THE       *
*        TABLE ENTRY FOR POSSIBLE REFERBACKS BY FOLLOWING             *
*        STATEMENTS.                                                  *
***********************************************************************
DDEND170 LA    R7,ENTLEN(,R7) INCREMENT TO NEXT ENTRY
         CLI   ENTRYTYP,TYPEND SEE IF END OF TABLE
         BE    DDEND180       YES, NO MATCH, BRANCH
         CLC   TVOLSER,DVOLSER SEE IF VOLSER ALREADY REFERENCED
         BE    DDEND230       YES, DO NOT CHARGE FOR IT
         B     DDEND170       LOOP
***********************************************************************
*        IF PARALLEL MOUNTING WAS REQUESTED, CHARGE THE GREATER       *
*        OF THE DEVICES SPECIFIED BY THE UNITCOUNT FIELD OR THE       *
*        NUMBER OF VOLUMES.                                           *
***********************************************************************
DDEND180 CLI   UNITCOUN,C'P'  SEE IF PARALLEL MOUNTING
         BE    DDEND190       YES, BRANCH
         MVC   ADDCOUNT,UNITCOUN MOVE UNIT COUNT TO COMMON
         B     DDEND210       BRANCH
DDEND190 CLC   VOLCNT,SERCNT COMPARE VOL COUNT & SERIAL CNT
         BL    DDEND200       SERIAL COUNT GREATER
         MVC   ADDCOUNT,VOLCNT MOVE VOLUME COUNT TO COMMON
         B     DDEND210       BRANCH
DDEND200 MVC   ADDCOUNT,SERCNT MOVE SERIAL COUNT TO COMMON
***********************************************************************
*        ADD THE DEVICE COUNT TO THE APPROPRIATE ACCUMULATOR.         *
***********************************************************************
DDEND210 SLR   R15,R15        ZERO WORK REG
         IC    R15,ADDCOUNT   MOVE UNIT COUNT TO REG
         TM    UNITIND,TAPE   IS THIS A TAPE DD?
         BO    DDEND220       YES, BRANCH
         AH    R15,PRIVCNT    ADD RUNNING COUNT TO THIS ONE
         STH   R15,PRIVCNT    SAVE NEW RUNNING COUNT
         B     DDEND230       BRANCH
DDEND220 AH    R15,TAPECNT    ADD RUNNING COUNT TO THIS ONE
         STH   R15,TAPECNT    SAVE NEW RUNNING COUNT
***********************************************************************
*        SAVE THE CURRENT TEMPORARY ENTRY SINCE IT SPECIFIES A        *
*        MOUNTABLE DEVICE TYPE.                                       *
***********************************************************************
DDEND230 OC    TTYPE,UNITIND  SAVE UNIT INFO
         LH    R14,ENTCOUNT   LOAD TABLE ENTRY COUNT
         LA    R14,1(,R14)    ADD 1 TO COUNT
         CH    R14,MAXENTS    SEE IF MAXIMUM REACHED
         BNL   TBLFULL        MAXIMUM REACHED, TAKE DUMP & EXIT
         STH   R14,ENTCOUNT   STORE NEW ENTRY COUNT
         L     R7,LASTENT     LOAD ADDR OF LAST ENTRY
         LA    R7,ENTLEN(,R7) INCREMENT TO NEXT ENTRY
         MVI   ENTRYTYP,TYPEDD SET ENTRY TO DD
         MVC   DENTRY,TENTRY  MOVE TEMPORARY ENTRY TO TABLE
         MVC   DVOLSER,TVOLSER MOVE TEMP VOLSER TO TABLE
         MVC   DTYPE,UNITIND  SAVE UNIT INDICATOR
         ST    R7,LASTENT     SAVE ADDR OF LAST ENTRY
***********************************************************************
*        IF THE DD STATEMENT IS FOR A JOBLIB, STEPLIB, JOBCAT,        *
*        OR A STEPCAT, THE DISPOSITION MUST BE "SHR".                 *
***********************************************************************
DDEND240 CLC   TDDN,C#JOBLIB  SEE IF JOBLIB DD
         BE    DDEND250       YES, BRANCH
         CLC   TDDN,C#STEPLI  SEE IF STEPLIB DD
         BE    DDEND260       YES, BRANCH
         CLC   TDDN,C#JOBCAT  SEE IF JOBCAT DD
         BE    DDEND270       YES, BRANCH
         CLC   TDDN,C#STEPCA  SEE IF STEPCAT DD
         BE    DDEND270       YES, BRANCH
         B     GETNEXT        NO, GET OUT
DDEND250 DS    0H
DDEND260 TM    DISPIND,SHR    SEE IF DISP=SHR
         BO    GETNEXT        YES, BRANCH
         CLI   TDSN,C'&&'     IS THIS A TEMP DATASET
         BE    GETNEXT        YES DISP IS OK
         LA    R15,P@33       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     GETNEXT        GET OUT
***********************************************************************
*        IF THE DD STATEMENT IS FOR A JOBCAT OR A STEPCAT, THE        *
*        JOB MUST BE AUTHORIZED.                                      *
***********************************************************************
DDEND270 TM    JOBIND,JOBSTC+JOBTECH+JOBCOMM  JOBCAT/STEPCAT ALLOWED
         BM    DDEND280       YES, BRANCH
         LA    R15,P@43       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
DDEND280 TM    DISPIND,SHR    SEE IF DISP=SHR
         BO    GETNEXT        YES, BRANCH
         LA    R15,P@33       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     GETNEXT        GO GET NEXT TEXT RECORD
         EJECT
***********************************************************************
*        THE TEXT OF THE EXEC CARD WHICH CALLS A PROC IS AS FOLLOWS   *
*            1)  2 BYTE LENGTH OF TEXT STRING INCLUDING ITSELF        *
*            2)  1 BYTE INDICATOR COMMON TO ALL TEXT RECORDS          *
*            3)  1 BYTE OF MISCELLANEOUS INDICATORS                   *
*            4)  1 BYTE INDICATOR X'94' INDICATING EXEC POS INFORMATN *
*            5)  1 BYTE NUMBER OF EXEC POSITIONAL PARAMETERS          *
*                THE 1ST POS PARAMETER IS THE JOB STEP NAME           *
*                THE 2ND POS PARAMETER IS THE PROC NAME               *
*            6)  VARIABLE LENGTH LIST OF EXEC POS PARAMETERS          *
*                EACH PRECEDED BY A 1 BYTE LENGTH FIELD               *
*            7)  THE REST OF THE RECORD WILL BE IGNORED               *
***********************************************************************
         EJECT
*
***********************************************************************
*        THE TEXT OF THE PROC CARD WILL BE SAVED FOR SUBSEQUENT       *
*        EXEC CARD PROCESSING.  THE STEP NAME WILL BE SAVED FROM      *
*        THE PROC CARD AND AND A POINTER SAVED TO THE START OF        *
*        THE FIRST KEYWORD PARM.  AFTER THE NORMAL EXEC CARD HAS      *
*        BEEN PROCESSED, THE PROC CARD TEXT WILL BE PROCESSED         *
*        WHICH WILL OVERRIDE ANY PREVIOUSLY PROCESSED PARAMETERS      *
*        ON THE EXEC CARD.                                            *
***********************************************************************
         SPACE 4
***********************************************************************
*        SAVE THE ENTIRE TEXT OF THE EXECUTE STATEMENT WHICH          *
*        CALLS A PROCEDURE SO THAT ALL PROC OVERRIDES MAY BE          *
*        PROCESSED.                                                   *
***********************************************************************
PROCARD  EQU   *
PROCSTAR LR    R14,R6         SAVE ADDRESS OF CURRENT RECORD
         LH    R15,STRLTH     LOAD LENGTH OF TEXT RECORD
         CH    R15,H#512      SEE IF LENGTH EXCEEDS 512 BYTES
         BNH   PROCSTAS       NO, BRANCH
         LA    R15,P@30       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     GETNEXT        GET OUT
PROCSTAS DS    0H
         LA    R0,PROCTXT     LOAD ADDR OF TEXT SAVE AREA
         LR    R1,R15         LET REG 1 ALSO CONTAIN THE LENGTH
         MVCL  R0,R14         MOVE TEXT STRING TO SAVE
         LA    R6,PROCTXT     POINT TO START OF COPIED TEXT
         LA    R4,STREKEY     LOAD START OF TRUE TEXT
         ST    R4,PARMADDR    SAVE START OF PARAMETER ADDRESS
         LA    R4,1(,R4)      INCR PAST EXEC POS IND
         SLR   R5,R5          CLEAR REG FOR ICM
         ICM   R5,1,0(R4)     LOAD NUMBER OF SUBPARAMETERS
         BNZ   PROCEND1       NOT ZERO, BRANCH
         LA    R4,1(,R4)      ZERO, INCREMENT PAST COUNT
         B     PROCEND3       GET OUT
***********************************************************************
*        SAVE THE PROC STEP NAME                                      *
***********************************************************************
PROCEND1 LA    R4,1(,R4)      INCREMENT PAST COUNT
         MVC   SAVEPROC,BLANKS   BLANK ENTIRE STEP NAME SAVE
         SLR   R3,R3          CLEAR REG FOR ICM
         ICM   R3,1,0(R4)     LOAD LENGTH OF JOB STEP NAME
         BZ    PROCENDB       IF ZERO, NO JOB STEP NAME
         CH    R3,H#8         SEE IF LENGTH > 8
         BNH   PROCENDA       NO, CONTINUE
         LA    R15,P@31       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     GETNEXT        GET OUT
PROCENDA DS    0H
         BCTR  R3,0           MAKE MACHINE LENGTH
         EX    R3,MOVE4       MOVE STEP NAME TO SAVE AREA
         LA    R3,1(,R3)      RESET R3
PROCENDB DS    0H
         LA    R4,1(R3,R4)    INCREMENT PAST CTL BYTES AND STEP NM
         BCT   R5,PROCENDC    DECREMENT BY ONE
         B     PROCEND3       IF NO POSITIONAL PROC-NAME GO TO KYWD
PROCENDC DS    0H
         ICM   R3,1,0(R4)     LOAD LENGTH OF SUBPARAMETER
         BZ    PROCENDD       IF LENGTH ZERO, ERROR
         CH    R3,H#8         SEE IF LENGTH > 8
         BNH   PROCENDE       NO, CONTINUE
PROCENDD DS    0H                                                   WEJ
         LA    R15,P@36       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     GETNEXT        GET OUT
PROCENDE DS    0H
         BCTR  R3,0           MAKE MACHINE LENGTH
         MVI   SMFRTYPE,X'F8' SET RECORD TYPE FOR PROC NAME USE
         BAL   R14,SMFWTM     GO WRITE SMF RECORD
PROCEND2 ICM   R3,1,0(R4)     LOAD LENGTH OF SUBPARAMETER
         LA    R4,1(R3,R4)    INCREMENT TO NEXT SUBPARAMETER
         BCT   R5,PROCEND2    LOOP UNTIL DONE
***********************************************************************
*        SAVE POINTER TO THE FIRST KEYWORD ON THE STATEMENT           *
***********************************************************************
PROCEND3 DS    0H
         CLI   0(R4),PROCEK   IS FIRST KEYWORD KEY FOR PROC=
         BNE   PROCEND5       NO, SAVE ADDR OF 1ST NON-PROC KEYWD
         LA    R4,2(,R4)      POINT TO SIZE (NO OF SUBS ASSUMED 1)
*              PRIOR USE WAS 1 BYTE FIELD SIZE
         ICM   R3,1,0(R4)     LOAD LENGTH OF SUBPARAMETER
         CH    R3,H#8         SEE IF LENGTH > 8
         BNH   PROCEND4       NO, CONTINUE
         LA    R15,P@36       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     GETNEXT        GET OUT
PROCEND4 DS    0H
         BCTR  R3,0           MAKE MACHINE LENGTH
         MVI   SMFRTYPE,X'F8' SET RECORD TYPE FOR PROC NAME USE
         BAL   R14,SMFWTM     GO WRITE SMF RECORD
         LA    R4,2(R3,R4)    POINT TO NEXT KEYWORD PARAMETER
PROCEND5 DS    0H
         ST    R4,PROCTEXT    SAVE ADDRESS OF FIRST KEYWORD PARM
         B     GETNEXT        GET OUT
         SPACE 4
***********************************************************************
*        IF THE CURRENT EXECUTE STATEMENT IS FROM A PROCEDURE,        *
*        LOAD THE ADDRESS OF THE PREVIOUS STATEMENT WHICH CALLED      *
*        THE PROCEDURE AND RETURN TO THE EXECUTE CARD PROCESSOR       *
*        TO PROCESS THE OVERRIDES WHICH MAY HAVE BEEN ENTERED         *
*        ON THAT STATEMENT.                                           *
***********************************************************************
PROCSEAR TM    STREINDC,ETXPROC STATEMENT FROM A PROCEDURE?
         BNO   GETNEXT        NO, GET OUT
         XI    PROCIND,X'01'  FLIP-FLOP SWITCH
         BZ    GETNEXT        NOW ZERO, ALREADY PROCESSED PROC TEXT
         L     R4,PROCTEXT    LOAD ADDR OF PROC TEXT
         ST    R4,PARMADDR    SAVE START OF PARAMETER ADDRESS
         B     EXECPARM       GO PROCESS ADDITIONAL TEXT
         EJECT
***********************************************************************
*        THE TEXT OF THE INSTREAM PROC CARD IS AS FOLLOWS             *
*            1)  2 BYTE LENGTH OF TEXT STRING INCLUDING ITSELF        *
*            2)  1 BYTE INDICATOR COMMON TO ALL TEXT RECORDS          *
***********************************************************************
         SPACE 4
PROCINST DS    0H
***********************************************************************
*        CURRENTLY BYPASS ALL INTREAM PROC'S, LATER LOG THEM          *
***********************************************************************
         B     GETNEXT        BYPASS CODE BECAUSE PICKING UP BAD DATA
         LA    R4,STREKEY+1   POINT TO 1ST POSITIONAL PARM CNT.
         SLR   R5,R5          CLEAR REG FOR ICM
         ICM   R5,1,0(R4)     LOAD NUMBER OF SUBPARAMETERS
         BZ    GETNEXT        ZERO, ILLOGICAL SO EXIT
***********************************************************************
*        SAVE THE PROC NAME                                           *
***********************************************************************
PROCINS1 LA    R4,1(,R4)      INCREMENT PAST COUNT
         MVC   SAVEPROC,BLANKS   BLANK ENTIRE STEP NAME SAVE
         SLR   R3,R3          CLEAR REG FOR ICM
         ICM   R3,1,0(R4)     LOAD LENGTH OF PROC NAME
         BZ    GETNEXT        IF ZERO, NO PROC NAME SO BYPASS
         CH    R3,H#8         SEE IF LENGTH > 8
         BNH   PROCINS2       NO, CONTINUE
         LA    R15,P@37       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     GETNEXT        GET OUT
PROCINS2 DS    0H
         BCTR  R3,0           MAKE MACHINE LENGTH
         MVI   SMFRTYPE,X'F9' SET RECORD TYPE FOR INSTREAM PROC USE
         BAL   R14,SMFWTM     GO WRITE SMF RECORD
         B     GETNEXT
***********************************************************************
*        THE TEXT OF THE JDT VERB CARD IS AS FOLLOWS                  *
*            1)  2 BYTE LENGTH OF TEXT STRING INCLUDING ITSELF        *
*            2)  1 BYTE INDICATOR COMMON TO ALL TEXT RECORDS          *
*            3)  1 BYTE OF MISCELLANEOUS INDICATORS                   *
*            4)  1 BYTE INDICATOR X'BE' INDICATING JDVT DEFINED VERB  *
*            5)  1 BYTE NUMBER OF JDT POSITIONAL PARAMETERS           *
*            6)  VARIABLE LENGTH LIST OF JDT POS PARAMETERS           *
*                EACH PRECEDED BY A 1 BYTE LENGTH FIELD               *
*            7)  VARIABLE LENGTH LIST OF KEYWORD PARAMETERS           *
*                EACH IS PRECEDED BY A 1 BYTE NUMBER OF               *
*                POSITIONAL SUBPARAMETERS PRESENT, AND A LIST OF      *
*                SUBPARAMETERS EACH PRECEDED BY A 1 BYTE LENGTH FIELD *
*                WHICH MAY BE ZERO IF OMITTED AND FOLLOWED BY ANOTHER *
*                POSITIONAL PARAMETER.                                *
***********************************************************************
*
***********************************************************************
*        THE TEXT OF THE JDT VERB CARD 'OUTPUT' WILL BE SAVED TO BE   *
*        USED WITH SYSOUT PROCESSING.  THE STEP NAME WILL BE SAVED    *
*        ALONG WITH THE VERB NAME, THE LABEL, AND THE SYSOUT CLASS    *
*        SPECIFIED.                                                   *
***********************************************************************
         SPACE 4
JDTCARD  EQU   *
***********************************************************************
*        SCAN THE JDT VERB CARD TO VERIFY IF IT IS A 'OUTPUT' CARD.   *
***********************************************************************
         LA    R4,STRSKEY     LOAD START OF TRUE TEXT
         ST    R4,PARMADDR    SAVE START OF PARAMETER ADDRESS
         MVC   SAVEFORM,C#NOFORM SET SAVE FORM TO BLANKS WITH 0 LENGTH
         MVI   FCBFLAG,C'N'   SET FCB FOUND FLAG TO NO
         CLI   0(R4),JDTVERBK  IS THIS A JDT VERB?
         BE    JDTLOOP        YES, LOOP PAST IT BECAUSE OUTPUT ASSUMED
         SPACE 4
JDTPARM  CLI   0(R4),ENDK     END OF TEXT STRING
         BE    JDTCKFMV       YES, GO TO CHECK FCB MOVE
***********************************************************************
*        JDT DEFINED KEYWORD                                          *
***********************************************************************
         CLI   0(R4),JDTKWDK  SEE IF JDT DEFINED KEYWORD
         BNE   JDTLOOP        NO, BRANCH
         CLI   1(R4),X'02'    IS THIS A KEYWORD + 1 PARAMETER
         BNE   JDTLOOP        NO, THUS NOT CLASS OR FCB
         CLI   2(R4),L'C#FORMS COULD THIS BE THE FORMS PARAMETER
         BNE   JDTCK3KY       NO CHECK FOR FCB
         CLC   C#FORMS,3(R4)  IS THIS THE FORMS= KEYWORD
         BNE   JDTCK3KY       NO GO TO CHECK FOR 3 CHR KEYWORD
         SLR   R3,R3          ZERO OUT R3
         ICM   R3,1,3+L'C#FORMS(R4) GET SIZE OF SECOND PARAM        WEJ
         BZ    JDTLOOP        IF ZERO IGNORE IT
         CH    R3,H#8         IS IT GREATER THAN 8
         BNH   JDTMVFM        NO, GO TO MOVE FORM TO HOLD
         LA    R15,P@39       POINT TO ERROR MESSAGE
         BAL   R14,MSGRTN     PERFORM ERROR ROUTINE
         B     JDTLOOP
JDTMVFM  DS    0H
         EX    R3,MOVEJDFM    EXECUTE MOVE OF FORM-ID INCLUING LEN
         B     JDTLOOP
MOVEJDFM MVC   SAVEFORM(0),3+L'C#FORMS(R4)  EXECUTED MOVE
JDTCK3KY DS    0H
         CLI   2(R4),X'03'    IS THIS A 3 CHARACTER KEYWORD
         BNE   JDTLOOP        NO, WE ARE NOT INTERESTED
         CLC   C#FCB,3(R4)    IS THE KEYWORD FCB
         BNE   JDTLOOP        NO, GO TO GET NEXT PARAM
         MVI   FCBFLAG,C'Y'   SET FCB FOUND FLAG TO Y
         B     JDTLOOP        GO TO GET NEXT PARAM
         EJECT
***********************************************************************
*        THIS ROUTINE WILL INCREMENT PAST THE STRING(S) BEING         *
*        PROCESSED.  NOTE THAT FOLLOWING THE KEYWORD DESCRIPTOR       *
*        FIELD IS A COUNT OF SUBPARAMETERS.  FOLLOWING THE COUNT      *
*        WILL BE A LENGTH OR DESCRIPTOR FIELD.  IF THE HIGH ORDER     *
*        BIT IS ON, THE FIELD IS A COUNT FIELD OF THE NUMBER OF       *
*        SUBPARAMETERS WHICH THE SUBPARAMETER ITSELF MAY HAVE.        *
*        IF THIS IS TRUE, THE DESCRIPTOR FIELD WILL BE FOLLOWED BY    *
*        A LENGTH FIELD FOR THE FIRST SUBPARAMETER.  IF THE HIGH      *
*        ORDER BIT IS NOT ON, IT IS ONLY A LENGTH FIELD FOR A         *
*        SINGLE SUBPARAMETER.                                         *
***********************************************************************
JDTLOOP  L     R4,PARMADDR    RESTORE START OF PARAMETER ADDRESS
         SLR   R2,R2          CLEAR REGISTER FOR ICM
         LA    R4,1(,R4)      INCREMENT PAST KEYWORD
         ICM   R2,1,0(R4)     LOAD SUBPARAMETER COUNT
         BNZ   JDTLOOP1       OK, BRANCH INTO ROUTINE
         LA    R4,1(,R4)      NONE, INCREMENT PAST COUNT
         B     JDTLOOP5       AND GET OUT OF ROUTINE
JDTLOOP1 LA    R4,1(,R4)      INCREMENT PAST KEYWORD DESCR
JDTLOOP2 SLR   R5,R5          CLEAR REGISTER FOR ICM
         ICM   R5,1,0(R4)     LOAD PARAMETER LENGTH
         BNM   JDTLOOP3       HIGH BIT NOT ON, ONLY 1 PARAMETER
         N     R5,F#127       'AND' OUT THE HIGH ORDER BIT
         LA    R4,1(,R4)      INCREMENT PAST CONTROL BYTE
         B     JDTLOOP4       BRANCH
JDTLOOP3 LA    R5,1           SET PARAM COUNT TO 1
JDTLOOP4 SLR   R3,R3          CLEAR REGISTER FOR ICM
         ICM   R3,1,0(R4)     LOAD PARAMETER LENGTH
         LA    R4,1(R3,R4)    INCREMENT PAST PARM
         BCT   R5,JDTLOOP4    LOOP UNTIL PROCESSED ALL PARMS
         BCT   R2,JDTLOOP2    LOOP UNTIL PROCESSED ALL PARMS
JDTLOOP5 ST    R4,PARMADDR    SAVE START OF PARAMETER ADDRESS
         B     JDTPARM        CONTINUE
JDTCKFMV DS    0H
         CLI   FCBFLAG,C'Y'   WAS FCB FOUND
         BE    GETNEXT        YES, GET NEXT PARAM
         CLI   SAVEFMLN,X'04' IS FORM LENGTH GREATER THAN 4
         BNH   JDTGETLN       NO, GO TO LOAD FORM LENGTH
         MVI   SAVEFMLN,X'04' SET LENGTH TO 4 SO ONLY 1ST 4 BYTES USED
JDTGETLN DS    0H
         SLR   R3,R3          ZERO OUT R3
         ICM   R3,1,SAVEFMLN LOAD FORM LENGTH
         BZ    GETNEXT        IF ZERO, GET NEXT PARAMETER
         MVC   0(L'C#FCBKYJ,R4),C#FCBKYJ
         EX    R3,MVJDTFCB
         LA    R3,L'C#FCBKYJ+1(,R3)
         SLR   R0,R0
         ICM   R0,B'0011',STRLTH
         ALR   R0,R3
         STCM  R0,B'0011',STRLTH
         LA    R4,0(R3,R4)
         MVI   0(R4),ENDK
         B     GETNEXT
MVJDTFCB MVC   L'C#FCBKYJ(0,R4),SAVEFORM
         SPACE 4
***********************************************************************
*        THIS ROUTINE WILL OBTAIN THE NEXT PARAMETER.                 *
*        ON OUTPUT REG 3 WILL CONTAIN LENGTH-1                        *
*          IF REG 3 IS ZERO EITHER THERE WAS AN ERROR OR NO PARM      *
*        THE LENGTH IS CHECKED TO BE NOT GREATER THAN 8               *
*          IF SO, AN ERROR MESSAGE IS RETURNED.                       *
***********************************************************************
JDTGET   EQU   *
         ST    R14,JDTRTN     SAVE RETURN ADDRESS
         SLR   R3,R3          CLEAR REG FOR ICM
         ICM   R3,1,1(R4)     LOAD LENGTH
         BZR   R14            IF ZERO RETURN TO CALLER
         CH    R3,H#8         SEE IF LENGTH > 8
         BNH   JDTGETEX       NO, CONTINUE
         LA    R15,P@1        INDICATE ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MESSAGE
         LA    R3,1           SIMULATE NO PARM FOUND
JDTGETEX DS    0H
         BCTR  R3,0           REDUCE TO MACHINE LENGTH
         L     R14,JDTRTN     LOAD RETURN ADDRESS
         BR    R14             AND RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*                         L O C A T E                                 *
*                                                                     *
*        ISSUE THE LOCATE MACRO TO OBTAIN THE REQUESTED UNIT TYPE     *
*        AND VOLSER INFORMATION.                                      *
*                                                                     *
***********************************************************************
LOCATE   LA    R15,68         LOAD OPTION VALUE
         SLL   R15,24         SHIFT OPTION TO HIGH BYTE
         ST    R15,CAMLST     STORE INTO CAMLST AREA
         LA    R15,LDSN       LOAD ADDR OF DSN
         ST    R15,CAMLST+4   STORE INTO CAMLST AREA
         XC    CAMLST+8(4),CAMLST+8 ZERO 3RD PARAM CAMLST AREA
         XC    LOCAREA(12),LOCAREA CLEAR FIRST PART OF THE WORK AREA
         LA    R15,LOCAREA    LOAD ADDR OF LOCATE WORK AREA
         ST    R15,CAMLST+12  STORE INTO CAMLST AREA
         LOCATE CAMLST        READ CATALOG
         BR    R2             RETURN TO CALLER
         SPACE 4
***********************************************************************
*                                                                     *
*                         U C B S E A R                               *
*                                                                     *
*        SEARCH THE SYSTEM UCBS TO SEE IF THE REQUESTED DASD VOLUME   *
*        IS MOUNTED OR ONLY MOUNTED PRIVATE IN WHICH CASE IT WILL     *
*        BE DISMOUNTED AT END OF JOB.  IF NOT FOUND OR PRIVATE, IT    *
*        IS A 'PRIV' UNIT.                                            *
*                                                                     *
***********************************************************************
UCBSEAR  DS    0H
         AIF   ('&UCBSEAR' EQ 'YES').UCBS1
         BR    R2             RETURN TO CALLER
         AGO   .UCBS2
.UCBS1   ANOP
         STM   R14,R12,SAVEREGS SAVE REGISTERS
         XC    LASTUCB,LASTUCB ZERO LAST EBCDIC UCB ADDR
         SLR   R5,R5          CLEAR REGISTER FOR ICM INSTR
         L     R4,16          LOAD CVT ADDR
         L     R4,40(,R4)     LOAD ADDR OF UCB LOOKUP TABLE
UCBSEAR1 DS    0H
         SLR   R5,R5          CLEAR REGISTER 5
         ICM   R5,3,0(R4)     LOAD ADDR OF NEXT UCB
         LA    R4,2(,R4)      INCREMENT TO NEXT LOOKUP ENTRY
         BZ    UCBSEAR1       ZERO, NULL ENTRY, LOOP
         C     R5,LASTUCB     SEE IF ADDR > LAST UCB ADDR
         BL    UCBSEAR1       NO, OPCHAN DEVICE,LOOP
         ST    R5,LASTUCB     SAVE LAST UCB ADDR
         C     R5,X#FFFF      SEE IF END OF TABLE
         BE    UCBSEAR2       YES, VOLSER NOT FOUND
         TM    18(R5),32      DASD DEVICE?
         BNO   UCBSEAR1       NO, LOOP
         TM    3(R5),128      ONLINE?
         BNO   UCBSEAR1       NO, LOOP
         CLC   TVOLSER,28(R5) SEE IF CAT. VOLSER IN UCB
         BNE   UCBSEAR1       NO, LOOP
         TM    3(R5),X'24'    SEE IF PERM RES OR RESERVED
         BZ    UCBSEAR2       NOT EITHER, THEN MUST BE PRIV
         B     UCBSEAR3       GET OUT, NO CHARGE
UCBSEAR2 OI    UNITIND,PRIV   SINCE VOLUME NOT MOUNTED, PRIV
UCBSEAR3 LM    R14,R12,SAVEREGS RESTORE REGISTERS
         BR    R2             RETURN TO CALLER
.UCBS2   ANOP
         SPACE 4
***********************************************************************
*        UPDATE LAST EXEC TABLE (IF NEEDED) WITH UNIT INFO            *
***********************************************************************
EOF      TM    JOBIND2,JOBFAIL WAS JOB FAILED BY EXIT?
         BO    JOBERROR       YES, BRANCH
         L     R7,LASTEXEC    LOAD ADDR OF LAST EXEC ENTRY
         LTR   R7,R7          SEE IF ADDR = 0
         BZ    EOF1           IF ZERO, NO UPDATE, BRANCH
         MVC   ETAPES,TAPECNT MOVE STEP TAPE UNIT CNT TO TABLE
         MVC   EPRIVS,PRIVCNT MOVE STEP PRIV UNIT CNT TO TABLE
         XC    TAPECNT,TAPECNT ZERO TAPE UNIT CNT
         XC    PRIVCNT,PRIVCNT ZERO PRIV UNIT CNT
         EJECT
***********************************************************************
*        THIS ROUTINE SEARCHES THE TABLE SAVED FOR JOB, EXEC AND DD   *
*        ENTRIES TO DETERMINE THE MAXIMUM RESOURCES USED BY THE JOB   *
*        THIS INFORMATION WILL BE USED TO COMPARE AGAINST A CLASS     *
*        TABLE TO DETERMINE THE CLASS WHICH SHOULD BE SET FOR THE JOB.*
***********************************************************************
EOF1     MVC   STEPMSG,MSG0CON    INITIALIZE STEP MESSAGE
         MVC   JOBMSG,MSG1CON     INITIALIZE JOB CLASS MESSAGE
         XC    MAXTAPE,MAXTAPE ZERO MAX FIELD
         XC    MAXPRIV,MAXPRIV ZERO MAX FIELD
         XC    MAXTOTAL,MAXTOTAL ZERO MAX FIELD
         XC    MAXREGN,MAXREGN ZERO MAX FIELD
         L     R7,FIRSTENT    LOAD START OF TABLE
         CLC   ENTLEN(2,R7),H#0 SEE IF ONLY JOB ENTRY
         BE    JOBERROR       ZEROS, NO OTHER ENTRIES, FLUSH JOB
EOFLOOP1 CLI   ENTRYTYP,TYPJOB SEE IF JOB ENTRY
         BE    EOFJOB         YES, BRANCH
         CLI   ENTRYTYP,TYPEXEC SEE IF EXEC ENTRY
         BE    EOFEXEC        YES, BRANCH
         CLI   ENTRYTYP,TYPEND SEE IF END OF TABLE
         BE    EOFSCAN        YES, BRANCH
         B     EOFLOOP2       LOOP
***********************************************************************
*        PRODUCE A STEP RESOURCE STATISTICS MESSAGE FOR EACH STEP     *
*        TO BE WRITTEN TO THE JES2 MESSAGE DATA SET.                  *
***********************************************************************
EOFEXEC  DS    0H             LOAD CARD NUMBER
         MVC   CARDNO,ECARDNO MOVE EXEC CARDNO TO CARDNO
         MVC   STEPMSTP,EJSTEP   MOVE JOB STEP TO MESSAGE
         MVC   STEPMPST,EPSTEP  MOVE PROC STEP TO MESSAGE
         LH    R5,ETAPES      LOAD NUMBER OF TAPES FOR STEP
         CVD   R5,DOUBLE      CONVERT TO PACKED
         MVC   STEPMTAP,EDMASK  SET MESSAGE EDIT MASK
         ED    STEPMTAP,DOUBLE+5 EDIT NUMBER OF TAPES TO MESSAGE
         L     R5,MAXTIME     LOAD MAXIMUM CPU JOB CPU TIME
         CVD   R5,DOUBLE      CONVERT TO PACKED
         MVC   STEPM+61(6),EDMASK  SET MESSAGE EDIT MASK
         ED    STEPM+61(6),DOUBLE+5 EDIT REGION SIZE TO MESSAGE
         LA    R15,STEPMSG    LOAD ADDRESS OF STEP MESSAGE
         BAL   R14,MSGRTN     GO PUT MESSAGE TO JES MESSAGE DATA SET
         SPACE 4
***********************************************************************
*        COMPARE THE RESOURCES USED BY THIS STEP TO THE MAXIMUM       *
*        RESOURCES USED BY PREVIOUS STEPS.  RETAIN THE GREATER        *
*        OF THE NUMBER OF RESOURCES.                                  *
***********************************************************************
EOFCONT1 CLC   ETAPES,MAXTAPE COMPARE STEP TAPES TO PREV MAX
         BNH   EOFEXEC1       NOT GREATER, BRANCH
         MVC   MAXTAPE,ETAPES MAKE CURR COUNT NEW COUNT
EOFEXEC1 CLC   EPRIVS,MAXPRIV COMPARE STEP PRIVS TO PREV MAX
         BNH   EOFEXEC2       NOT GREATER, BRANCH
         MVC   MAXPRIV,EPRIVS MAKE CURR COUNT NEW COUNT
EOFEXEC2 LH    R5,EPRIVS      LOAD NUMBER OF PRIVS IN STEP
         AH    R5,ETAPES      ADD NUMBER OF TAPES
         CH    R5,MAXTOTAL    COMPARE STEP TOT CNT TO PREV MAX
         BNH   EOFEXEC3       NOT GREATER, BRANCH
         STH   R5,MAXTOTAL    MADE CURR TOTAL CNT NEW MAX
EOFEXEC3 CLC   EREGION,MAXREGN COMPARE STEP REGION TO PREV MAX
         BNH   EOFLOOP2       NOT GREATER, BRANCH
         MVC   MAXREGN,EREGION MAKE CURR REGION NEW MAX
EOFLOOP2 LA    R7,ENTLEN(,R7) INCREMENT TO NEXT ENTRY
         B     EOFLOOP1       LOOP
EOFJOB   CLC   JREGION,MAXREGN COMPARE STEP REGION TO PREV MAX
         BNH   EOFLOOP2       NOT GREATER, BRANCH
         MVC   MAXREGN,JREGION MAKE CURR REGION NEW MAX
         B     EOFLOOP2       GO GET NEXT ENTRY
EOFSCAN  CLC   MAXTAPE,$ZEROS    SEE IF ANY TAPES                   WEJ
         BE    EOFPACK        NO TAPES, GO CHECK FOR PRIV
         OI    RESOURCE,TAPES TURN ON TAPES RESOURCE
EOFPACK  CLC   MAXPRIV,$ZEROS    SEE IF ANY PRIV
         BE    EOFLJOB        NO, BRANCH
         OI    RESOURCE,USERPACK TURN ON USERPACK RESOURCE
EOFLJOB  CLC   MAXTIME,F#15   SEE IF CPU TIME > 15
         BNH   CLASSEAR       NO, BRANCH
         OI    RESOURCE+1,LONGJOB TURN ON LONGJOB RESOURCE
         EJECT
***********************************************************************
*        THIS ROUTINE SEARCHES THE APPROPRIATE CLASS TABLES FOR       *
*        MATCHES ON RESOURCES USED TO DETERMINE THE CORRECT CLASS     *
*        FOR A JOB.  NOTE THAT EACH GROUP (TEST, PRODUCTION,          *
*        OPERATIONS, AND TECH SUPPORT HAVE CLASSES WHICH MAY BE       *
*        SPECIFIED IN ORDER TO BYPASS THE TABLES OR USED TO SINGLE    *
*        THREAD A SERIES OF JOBS BECAUSE THERE WILL ONLY BE ONE       *
*        INITIATOR SET TO THAT CLASS.                                 *
***********************************************************************
CLASSEAR TM    JOBIND,JOBSTC+JOBTSO STC OR TSO
         BM    NOCHANGE       YES, NO CHANGE OF CLASS
         L     R14,JCTADDR    LOAD JCT ADDRESS
         USING JCT,R14        SET ADDRESSABILITY TO JCT             WEJ
         MVC   CLASSFLD,INCLASS  SET NEW JOBCLASS TO CURRENT JOBCLS WEJ
         CLI   TCMCLASS,X'00' IS TCMCLASS NULL                      WEJ
         BE    CLASSCK1       YES, BYPASS SETTING OF TCAM CLASS     WEJ
         MVC   CLASSFLD,TCMCLASS  SET NEW JOBCLASS TO TCAM JOBCLASS WEJ
CLASSCK1 DS    0H                                                   WEJ
         XC    CARDNO,CARDNO     ZERO OUT CARD NO                   WEJ
         CLI   CLASSFLD,C'I'  CLASS 'I' OR GREATER                  WEJ
         BH    CLASSCKA       YES, BYPASS CLASS SET                 WEJ
         CLI   CLASSFLD,C'F'  CLASS = 'F' OR GREATER                WEJ
         BNL   SETCLASA       YES, SET A                            WEJ
         CLI   CLASSFLD,C'B'  CLASS = B?                            WEJ
         BNE   CLASSCKA       NO, BYPASS SETTING OF CLASS TO A      WEJ
SETCLASA DS   0H                                                    WEJ
         MVI   CLASSFLD,C'A'  SET CLASS TO A                        WEJ
CLASSCKA DS    0H                                                   WEJ
         TM    JOBIND,JOBPROD SEE IF PRODUCTION JOB                 WEJ
         BO    SETCLASS       YES, BRANCH                           WEJ
         CLI   CLASSFLD,C'A'  IS JOBCLASS = 'A'                     WEJ
         BNE   CLASSCK4       NO, CHECK AUTHORITY                   WEJ
         CLC   MAXTAPE,$ZEROS     IS MAX-TAPE  EQUAL 0              WEJ
         BE    SETCLASS       YES, GO SET CLASS                     WEJ
         CLC   MAXTAPE,H#1    IS NUMBER OF TAPES = 1                WEJ
         BNE   CLASSETH       NO, GO TO SET CLASS H                 WEJ
         MVI   CLASSFLD,C'I'  SET CLASS TO I
         B     SETCLASS
CLASSETH DS    0H
         MVI   CLASSFLD,C'H'  FORCE JOBCLASS 'H'                    WEJ
         B     CLASSCK8       GO CHECK IF OVER 3 TAPES              WEJ
CLASSCK4 DS    0H                                                   WEJ
         CLI   CLASSFLD,C'J'  CLASS 'J' (TCAM CLASS)                WEJ
         BE    CLASSCK8       YES, GO CHECK OVER 3 TAPES            WEJ
         CLI   CLASSFLD,C'L'  CLASS 'L' (TCAM CLASS)                WEJ
         BE    CLASSCK8       YES, GO CHECK OVER 3 TAPES            WEJ
         CLI   CLASSFLD,C'S'  CLASS 'S' (SINGLE STREAM)             WEJ
         BE    CLASSCK8       YES, GO CHECK OVER 3 TAPES            WEJ
         CLI   CLASSFLD,C'N'  CLASS 'N' (CICS CLASS)                WEJ
         BE    CLASSCK5       NO, GO CHECK IF CICS SUBMIT           WEJ
         CLI   CLASSFLD,C'Q'  CLASS 'Q' (ADABAS CLASS)              WEJ
         BNE   CLASSCK5       NO, GO CHECK IF AUTHORIZED SUBMIT     WEJ
CLASSCK5 DS    0H                                                   WEJ
         CLC   JCTINDEV,C#JLCICS   IS SOURCE PRODUCTION CICS        WEJ
         BE    CLASSCK8       YES, GO CHECK IF OVER 3 TAPES         WEJ
         CLC   JCTINDEV,C#JLCICT   IS SOURCE TEST OR SIML. CICS     WEJ
         BE    CLASSCK8       YES, GO CHECK IF OVER 3 TAPES         WEJ
CLASSCK6 DS    0H                                                   WEJ
         TM    JOBIND,JOBTECH+JOBOPER+JOBCOMM TECH/COMM/OPER?       WEJ
         BZ    CLASSERR       NO, GO TO CLASS ERROR                 WEJ
         CLI   CLASSFLD,C'Z'  DEDICATED BACKUPS                     WEJ
         BE    SETCLASS       YES, GO USE THE CLASS                 WEJ
         CLI   CLASSFLD,C'X'  TECH SRV/COMM SINGLE STREAM           WEJ
         BE    SETCLASS       YES, GO USE THE CLASS                 WEJ
         CLI   CLASSFLD,C'T'  IS CLASS T THRU Y                     WEJ
         BL    CLASSCK8       NO, GO CHECK MAX TAPES                WEJ
         CLC   MAXTAPE,H#1    IS MAXTAPE =, <, OR > 1               WEJ
         BL    SETCLASW       LESS, GO SET CLASS W OR Y             WEJ
         BH    SETCLASU       GREATER, GO SET CLASS U               WEJ
         MVI   CLASSFLD,C'V'  SET JOB CLASS TO V                    WEJ
         B     SETCLASS                                             WEJ
SETCLASW DS    0H
         MVI   CLASSFLD,C'W'  SET JOB CLASS TO V                    WEJ
         CLI   JCTPRIO,X'50'  IS PRIORITY LESS THAN 5               WEJ
         BL    SETCLASS       YES, GO TO COMMON SET CLASS           WEJ
         MVI   CLASSFLD,C'Y'  SET CLASS TO Y (TECH SERV EQUIVALENT  WEJ
         B     SETCLASS           OF F) AND GO TO COMMON SETCLASS   WEJ
         DROP  R14                                                  WEJ
SETCLASU DS    0H
         MVI   CLASSFLD,C'U'  SET JOB CLASS TO U (2-TAPES TECH SRV) WEJ
         B     SETCLASS       GO TO COMMON SET CLASS                WEJ
CLASSCK8 DS    0H
         CLC   MAXTAPE,H#3    IS MAX TAPES GREATER THAN 3           WEJ
         BNH   SETCLASS       NO, TREAT AS PRODUCTION               WEJ
         TM    JOBIND,JOBOPER SEE IF OPERATIONS JOB                 WEJ
         BO    SETCLASS       YES, TREAT AS PRODUCTION              WEJ
***********************************************************************
*         TOO MANY TAPES                                              *
***********************************************************************
         LA    R15,P@47       POINT TO ERROR MESSAGE
         BAL   R14,MSGRTN     PERFORM ERROR ROUTINE
         B     SETCLASS       GO TO SET CLASS                       WEJ
CLASSERR DS    0H
         CLI   CLASSFLD,C'X'  IS CLASS SINGLE STREAM BATCH TECH SRV WEJ
         BNE   CLASSCKZ       NO, GO SET CLASS TO A AND RECHECK     WEJ
         MVI   CLASSFLD,C'S'  SET TO S, NORMAL SINGLE STREAM        WEJ
         B     CLASSCK8       GO CHECK FOR OVER 3 TAPE DRIVES       WEJ
CLASSCKZ DS    0H
         CLI   CLASSFLD,C'Z'  IS CLASS DEDICATED SYSTEM BATCH       WEJ
         BNE   SETCLASA       NO, GO SET CLASS TO A AND RECHECK     WEJ
         LA    R15,P@46       LOAD ADDRESS OF MESSAGE
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     SETCLASS       GO SET DEFAULT CLASS                 WEJ
SETCLASS DS    0H
         L     R14,JCTADDR    LOAD JCT ADDRESS                      WEJ
         USING JCT,R14        SET ADDRESSABILITY TO JCT             WEJ
         CLI   CLASSFLD,C'B'  IS DERIVED CLASS > B                  WEJ
         BH    SETCLAS1       YES, DO NOT CHECK FOR FAST CLASS      WEJ
         CLC   MAXTAPE,$ZEROS IS MAX TAPES ZERO                     WEJ
         BNE   SETCLAS1       NO, DO NOT CHECK FOR FAST CLASS       WEJ
         CLI   JCTPRIO,X'50'  IS PRIORITY LESS THAN 5               WEJ
         BL    SETCLAS0       YES, SET CLASS TO B                   WEJ
         MVI   CLASSFLD,C'F'  SET CLASS TO F                        WEJ
         B     SETCLAS1                                             WEJ
SETCLAS0 DS    0H                                                   WEJ
         MVI   CLASSFLD,C'B'  SET CLASS TO B (NO TAPE)              WEJ
SETCLAS1 DS    0H                                                   WEJ
         CLC   INCLASS,CLASSFLD  WAS THE CLASS CHANGED
         BE    NOCHANGE       NO, NO NEED TO CHANGE CLASS
         TM    JCTJOBFL,JCTTSCAN  WAS TYPRUN=SCAN SPECIFIED
         BO    NOCHANGE           YES  NO NEED TO CHANGE CLASS
         DROP  R14            DROP ADDRESSABILITY TO JCT
         MVC   JOBMCLAS,CLASSFLD MOVE NEW CLASS TO MESSAGE
         LA    R15,JOBMSG     LOAD ADDRESS OF JOB CLASS MESSAGE
         BAL   R14,MSGRTN     GO WRITE MESSAGE TO JES MESSAGE DATA SET
         EJECT
CLEAR    DS    0H
         CLI   CLASSFLD,C'A'  TEST NEW CLASS
         BNL   CHGCLASS       NEW, GO RESET TO NEW CLASS
DEFAULT  MVI   CLASSFLD,C'A'  SET NEW CLASS TO 'A'
***********************************************************************
*                                                                     *
*              S E T     T H E    N E W    C L A S S                  *
*                                                                     *
***********************************************************************
CHGCLASS DS    0H             CHANGE THE JOB CLASS
         AIF   ('&MODIFY' NE 'YES').MODIFY1
         L     R14,JCTADDR    LOAD JCT ADDRESS
         USING JCT,R14        SET ADDRESSABILITY TO JCT             WEJ
         MVC   JCTJCLAS,CLASSFLD CHANGE CLASS IN JCT
         MVC   JCTCLASS,CLASSFLD CHANGE CLASS IN JCT
         DROP  R14            DROP ADDRESSABILITY TO JCT
.MODIFY1 ANOP
NOCHANGE XC    RETCODE,RETCODE SET RETURN CODE TO ZERO
         TM    JOBIND2,JOBFAIL WAS JOB FAILED BY EXIT?
         BNO   ENDOFIT        BRANCH
JOBERROR DS    0H
         AIF   ('&ERRMSG' NE 'YES').ERRMSGN
         MVC   WTOLIST(LWTO2),WTO2 SET WTO LIST FORM
         AIF   ('&TSO' NE 'YES').TSO1
         WTO   MF=(E,WTOLIST)
         AGO   .TSO2
.TSO1    ANOP
         $$WTO WTOLIST        WRITE ERROR MESSAGE
.TSO2    ANOP
         B     JOBERR1        BYPASS WTO LIST FORM
         $MID  902
         SPACE
WTO2     WTO   '&MID.JOB TERMINATED BY STANDARDS ENFORCEMENT EXIT',    X
               ROUTCDE=(2),DESC=(4),MF=L
LWTO2    EQU   *-WTO2
.ERRMSGN ANOP
JOBERR1  DS    0H
         AIF   ('&FLUSH' NE 'YES').FLUSHN
         LA    R15,8          SET JOB FAIL RETURN CODE
         ST    R15,RETCODE    AND SAVE IT
***********************************************************************
*        AT THIS POINT WE MUST CHANGE TO OUTPUT CLASS SO THE JCL      *
*        ERROR WILL PRINT.  THE PDDB CLASS WAS SET AT CONVERSION TIME *
*        AND IF THE MSGCLASS WAS FOR A DUMMY CLASS, I.E. ERROR ON     *
*        JOB CARD, THE JOB WILL FLUSH AND THE USER WOULD NOT SEE THE  *
*        ERROR MESSAGE(S).  THE PDDBS IN QUESTION ARE THOSE FOR THE   *
*        JOB LOG, JCL IMAGES, AND THE SYSTEM MESSAGES.  IF THE CLASS  *
*        WAS ALREADY A HELD CLASS IT WILL NOT BE CHANGED.             *
***********************************************************************
         ICM   R4,B'1111',DCNVIOT GET ADDR OF THE IOT FOR TASK      WEJ
         BZ    ENDCHK              BYPASS CLASS RESET IF ZERO       WEJ
         USING IOT,R4             SET IOT  ADDRESSABILITY           WEJ
         L     R3,IOTPDDB         1ST PDDB OFFSET
         ALR   R3,R4              CALCULATE ADDRESS
         USING PDB,R3             SET PDDB ADDRESSABILITY           WEJ
         LA    R3,PDBLENG(,R3)    POINT PAST FIRST PDDB
         CLC   C#$JLOG,PDBDDNAM   CHECK DDNAME
         BNE   CHK$JCL
         CLI   PDBCLASS,C'5'      IS IT DUMMY CLASS?
         BNE   CHK$JCL             NO, CHECK NEXT
         MVI   PDBCLASS,C'A'      CHANGE CLASS
         NI    PDBFLAG1,255-PDB1NSOT  SHOW FOR SYSOUT
         LA    R3,PDBLENG(,R3)    POINT TO NEXT PDDB
CHK$JCL  DS    0H
         CLC   C#$JCL,PDBDDNAM    CHECK DDNAME
         BNE   CHK$SYS
         CLI   PDBCLASS,C'5'      IS IT DUMMY CLASS?
         BNE   CHK$SYS             NO, CHECK NEXT
         MVI   PDBCLASS,C'A'      CHANGE CLASS
         NI    PDBFLAG1,255-PDB1NSOT  SHOW FOR SYSOUT
         LA    R3,PDBLENG(,R3)    POINT TO NEXT PDDB
CHK$SYS  DS    0H
         CLC   C#$SYSM,PDBDDNAM   CHECK DDNAME
         BNE   ENDCHK
         CLI   PDBCLASS,C'5'      IS IT DUMMY CLASS?
         BNE   ENDCHK              NO, END OF CHECK
         MVI   PDBCLASS,C'A'      CHANGE CLASS
         NI    PDBFLAG1,255-PDB1NSOT  SHOW FOR SYSOUT
ENDCHK   DS    0H
         DROP  R4,R3          DROP ADDRESSABILITY
.FLUSHN  ANOP
         EJECT
***********************************************************************
*                        C L E A N    U P                             *
***********************************************************************
ENDOFIT  DS    0H             END OF EXIT
         AIF   ('&TSO' EQ 'YES').TSO10
***                           CANCEL ESTAE ENVIRONMENT
         ESTAE 0,BRANCH=YES,SVEAREA=STAEREGS,KEY=1,MF=(E,ESTAEL)
         L     R13,DCNVUWA    LOAD SAVED WORK AREA
.TSO10   ANOP
         L     R0,F#8192      LOAD FREEMAIN LENGTH
         L     R1,SUBTABLE    LOAD JCL SUB TABLE AREA ADDRESS
         FREEMAIN R,LV=(0),A=(1)
         L     R4,RETCODE     SAVE RETURN CODE
         LH    R0,GETLEN      LOAD FREEMAIN SIZE
         LR    R1,R13         SAVE WORKAREA ADDRESS
         L     R13,4(,R13)    RESTORE ORIG REG 13
         FREEMAIN R,LV=(0),A=(1)
         XC    DCNVUWA(4),DCNVUWA CLEAR WORKAREA POINTER IN DTE
         LR    R15,R4         SET RETURN CODE
         RETURN (14,12),RC=(15) GO BACK TO JES2
         SPACE 4
***********************************************************************
*        RETURN TO JES REQUESTING THE NEXT INTERNAL TEXT STATEMENT    *
***********************************************************************
GETNEXT  L     R5,CARDNO      LOAD CARD NUMBER FIELD
         LA    R5,1(,R5)      ADD 1 TO CARD NUMBER
         ST    R5,CARDNO      STORE NEW CARD NUMBER
         XC    RETCODE,RETCODE SET RETURN CODE TO ZERO
         AIF   ('&TSO' EQ 'YES').TSO11
***                           CANCEL ESTAE ENVIRONMENT
         ESTAE 0,BRANCH=YES,SVEAREA=STAEREGS,KEY=1,MF=(E,ESTAEL)
         L     R13,DCNVUWA       SAME AS EXWKPTR1                   WEJ
.TSO11   ANOP
         L     R13,4(,R13)    RESTORE ORIG REG 13
         SLR   R15,R15        SET RETURN CODE TO ZERO
         RETURN (14,12),RC=(15) GO BACK TO JES2
         EJECT
***********************************************************************
*                                                                     *
*                        M S G R T N                                  *
*                                                                     *
*        THIS ROUTINE WILL WRITE A MESSGE TO THE JES MESSAGE DATA     *
*        SET USING THE INDEX INTO THE MESSAGE TABLE PASSED BY         *
*        REGISTER 15 TO THE ROUTINE AND USE THE CARDNO FOR THE        *
*        STATEMENT NUMBER IN THE MESSAGE PREFIX.                      *
*                                                                     *
***********************************************************************
         PUSH  USING
MSGRTN   STM   R14,R12,SAVEREGS SAVE REGISTERS
         L     R6,OUTRPL      GET BASE FOR RPL
         USING IFGRPL,R6      SET ADDRESSABILITY
         LR    R4,R15         SAVE ERROR POSITION                   WEJ
         L     R3,CARDNO      LOAD CARD NUMBER
         CVD   R3,DOUBLE      CONVERT CARD NUMBER TO PACKED
         L     R5,MSGCOUNT    LOAD MESSAGE COUNTER
         LTR   R5,R5          SEE IF FIRST MESSAGE
         BNZ   MSGOUT         NO, DO NOT PUT HEADERS
         MVI   BUFFER,C' '    BLANK OUT BUFFER                      WEJ
         MVC   BUFFER+1(L'BUFFER-1),BUFFER                          WEJ
         MVC   BUFFER(L'HEADER1),HEADER1 MOVE HEADER LINE1 TO BUFF  WEJ
         BAL   R2,PUTMSG      GO WRITE TO MSG DATA SET
         MVI   BUFFER,C'-'    SET UP HEADER LINE 2                  WEJ
         MVI   BUFFER+1,C' '  SET UP HEADER LINE 2                  WEJ
         MVC   BUFFER+2(L'BUFFER-2),BUFFER+1                        WEJ
         BAL   R2,PUTMSG      GO WRITE TO MSG DATA SET
MSGOUT   LA    R5,1(,R5)      ADD 1 TO MESSAGE COUNT
         MVI   BUFFER,C' '    BLANK OUT BUFFER                      WEJ
         MVC   BUFFER+1(L'BUFFER-1),BUFFER                          WEJ
         ST    R5,MSGCOUNT    SAVE MESSAGE COUNTER
         CL    R4,F#8192      IS THIS A DISPLACEMENT OR AN ADDRESS
         BH    MSGOUT2        OVER 8192 IS AN ADDRESS
MSGOUT1  DS    0H
         MVC   MSGPREF,PREFIX MOVE MSG PREFIX TO JES2 BUFFER
         ED    MSGPREF(6),DOUBLE+5 EDIT CARD NUMBER TO PREFIX
         MVI   MSGTEXT,C' '   BLANK OUT MSGTEXT
         MVC   MSGTEXT+1(L'MSGTEXT-1),MSGTEXT
         AL    R4,A#MSSG      ADD ADDR OF MESSAGE TABLE TO MSG POS  WEJ
MSGOUT2  DS    0H
         SLR   R3,R3          CLEAR REGISTER 3 FOR SIZE INSERT
         IC    R3,0(,R4)      GET SIZE OF MESSAGE
         EX    R3,MOVEMSG     MOVE THE MESSAGE
MSGOUT3  DS    0H
         BAL   R2,PUTMSG      GO WRITE TO MSG DATA SET
         CLI   7(R4),C'I'     IS THIS AN INFO MSSG (POS 7 = I)      WEJ
         BE    MSGOUT5        YES  DO NOT FAIL JOB
         OI    JOBIND2,JOBFAIL TURN ON JOB FAILED IND
MSGOUT5  LM    R14,R12,SAVEREGS RESTORE REGISTERS
         BR    R14            RETURN TO CALLER
MOVEMSG  MVC   MSGTEXT(0),1(R4)  MOVE PROPER MSG TO JES2 BUFFER     WEJ
         EJECT
***********************************************************************
*                                                                     *
*                          P U T M S G                                *
*                                                                     *
*        WRITE MESSAGE TO JES MESSAGE DATA SET                        *
*                                                                     *
***********************************************************************
PUTMSG   DS    0H
         MVI   RPLREQ,RPLPUT  OPERATION TO BE A PUT
         L     R0,OUTACB      LOAD OUTPUT ACB ADDRESS
         ST    R0,RPLDACB     SET IN ACB POINTER IN RPL
         LA    R0,BUFFER      LOAD ADDR OF BUFFER
         ST    R0,RPLAREA     POINT TO BUFFER
         XC    RPLARG(4),RPLARG ZERO FIELD
         MVI   RPLOPT1,RPLSEQ OPERATION TO BE SEQUENTIAL
         MVI   RPLOPT2,X'00'  ZERO FIELD
         LA    R0,100         LOAD MESSAGE LENGTH
         ST    R0,RPLRLEN     STORE MESSAGE LENGTH
         XC    RPLBUFL(4),RPLBUFL ZERO FIELD
         XC    RPLDDDD(4),RPLDDDD ZERO FIELD
         ST    R13,PUTSAVE+72 SAVE SAVE AREA POINTER
         LA    R13,PUTSAVE    SAVE AREA FOR ACCESS METHOD
         LA    R1,IFGRPL      LOAD ADDR OF RPL
         PUT   RPL=(1)        WRITE TO MESSAGE DATA SET
         L     R13,72(R13)    RESTORE SAVE AREA POINTER
         LTR   R15,R15        TEST RETURN CODE
         BZR   R2             BAD, GO BAG JOB
         SPACE 2
         MVC   WTOLIST(LWTO1),WTO1 SET WTO LIST FORM
         AIF   ('&TSO' NE 'YES').TSO3
         WTO   MF=(E,WTOLIST)
         AGO   .TSO4
.TSO3    ANOP
         $$WTO WTOLIST        WRITE ERROR MESSAGE
.TSO4    ANOP
         B     JOBERROR       GET OUT
         SPACE
         $MID  901
WTO1     WTO   '&MID.PUT TO JOB MESSAGE DATA SET FAILED',              X
               ROUTCDE=(2),DESC=(4),MF=L
LWTO1    EQU   *-WTO1
         DROP  R6
         POP   USING
         EJECT
***********************************************************************
*                                                                     *
*                          R E F B A C K                              *
*                                                                     *
*        THIS ROUTINE HANDLES DSN AND VOLSER REFERBACKS.  THE SAVE    *
*        TABLE WILL BE SEARCHED FROM THE BEGINNING FOR JOBSTEP AND/OR *
*        PROCSTEP ENTRY AND THEN WITHIN THE DD ENTRIES FOR THAT STEP. *
*        IF THE ENTRY IS FOUND, THE UNIT AND DSNAME INFORMATION WILL  *
*        BE SAVED, IF NOT, A RETURN IS MADE TO THE CALLING RTN.       *
*                                                                     *
***********************************************************************
*
REFBACK  SLR   R3,R3          CLEAR WORK REGISTER
         SLR   R5,R5          CLEAR WORK REGISTER
         SLR   R2,R2          CLEAR WORK REGISTER
         IC    R2,2(,R4)      LOAD NUMBER OF DSN SUBPARAMETERS
         N     R2,F#127       'AND' OUT THE HIGH ORDER BIT
         LA    R4,3(,R4)      LOAD START OF REFBK ENTRIES
         CLI   0(R4),X'01'    SEE IF LEN OF 1ST POS = 1
         BNE   DDLOOP         NO, DSN(MEMBER) PDS DISK ONLY, IGNORE
         CLI   1(R4),C'*'     SEE IF REFERBACK
         BNE   DDLOOP         NO, DSN(MEMBER) PDS DISK ONLY, IGNORE
         CH    R2,H#4         SEE IF NUMBER PARAMS > 4
         BNH   REFBACKA       NO, CONTINUE
         LA    R15,P@32       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     DDLOOP         GET OUT
REFBACKA DS    0H
         MVC   REFERBCK,BLANKS   BLANK ENTIRE WORK AREA
         XC    REFUNIT,REFUNIT ZERO REFERBACK UNIT FEEDBACK
         XC    REFVOL,REFVOL  ZERO REFERBACK VOLSER FIELD
         MVC   REFDSN,BLANKS  BLANK ENTIRE REFERBACK DSNAME FIELD
REFLOOP1 LA    R5,1(,R5)      ADD 1 TO COUNT
         CR    R5,R2          SEE IF COUNT EXCEEDED
         BH    REFSEAR        YES, GO SEARCH BACK
         ICM   R3,1,0(R4)     LOAD LENGTH OF ENTRY
         BZ    ERROR32        ZERO, GO TO ERROR 32
         CH    R3,H#8         SEE IF LENGTH > 8
         BH    ERROR32        NO, CONTINUE
         BCTR  R3,0           MAKE MACHINE LENGTH
         CH    R5,H#1         SEE IF 1ST ENTRY
         BE    REFLOOP2       YES, IGNORE
         CH    R5,H#2         SEE IF 2ND ENTRY
         BE    REF#2          YES, GO PROCESS IT
         CH    R5,H#3         SEE IF 3RD ENTRY
         BE    REF#3          YES, GO PROCESS IT
*        THIS MUST BE THE 4TH ENTRY
REF#4    EX    R3,MOVE10      MOVE DDN TO SEARCH FIELD
         B     REFLOOP2       BRANCH
ERROR32  DS    0H
         LA    R15,P@32       SET ERROR NUMBER
         BAL   R14,MSGRTN     GO ISSUE ERROR MSG
         B     DDLOOP         GET OUT
REF#3    CH    R2,H#3         SEE IF ONLY 3 ENTRIES
         BE    REF#3B         YES, MUST BE DDNAME
*        IF NOT DDNAME, MUST BE PROCSTEP NAME
REF#3A   EX    R3,MOVE11      MOVE ENTRY TO PSTEP ENTRY
         B     REFLOOP2       BRANCH
REF#3B   EX    R3,MOVE10      MOVE ENTRY TO DDNAME
         B     REFLOOP2       BRANCH
REF#2    CH    R2,H#2         SEE IF ONLY 2 ENTRIES
         BE    REF#2B         ONLY 2, MUST BE DDNAME
*        IF 3 OR 4 ENTRIES, THIS ENTRY MUST BE FOR JOBSTEP
REF#2A   EX    R3,MOVE12      MOVE ENTRY TO JSTEP
         B     REFLOOP2       BRANCH
REF#2B   EX    R3,MOVE10      MOVE ENTRY TO DDNAME
REFLOOP2 LA    R4,2(R3,R4)    INCREMENT TO NEXT ENTRY
         B     REFLOOP1       LOOP
REFSEAR  L     R7,LASTEXEC    LOAD ADDR OF LAST EXEC CARD
*        IF REFERBACK WITHIN CURRENT STEP, THIS ADDR WILL BE
*        USED FOR START OF SEARCH
         MVI   REFFLAG,AFF    SET UNIT AFFINITY TO YES
         CLI   REFJSTEP,C' '  SEE IF JSTEP PART OF SEARCH
         BE    REFSEAR5       NO, SAME STEP WE ARE IN
         MVI   REFFLAG,X'00'  SET UNIT AFFINITY TO NO
         CLI   REFPSTEP,C' '  SEE IF PROCSTEP PART OF SEARCH
         BE    REFSEAR1       BLANK, NO PROCSTEP
         LA    R3,15          SET COMPARE LENGTH FOR JS & PS
         B     REFSEAR2       BRANCH
REFSEAR1 LA    R3,7           SET COMPARE LENGTH FOR JS ONLY
REFSEAR2 L     R7,FIRSTENT    LOAD START OF TABLE
REFSEAR3 LA    R7,ENTLEN(,R7) INCREMENT PAST JOB ENTRY
         CLI   ENTRYTYP,TYPEXEC SEE IF EXEC ENTRY
         BE    REFSEAR4       YES, GO COMPARE
         CLI   ENTRYTYP,TYPEND  SEE IF END OF TABLE
         BE    REFNO          NOT FOUND, PROBABLE JCL ERROR, EXIT
         B     REFSEAR3       LOOP
REFSEAR4 EX    R3,COMPARE1    SEE IF RIGHT STEP
         BE    REFSEAR5       YES, GO SEARCH FOR DDNAME
         B     REFSEAR3       LOOP FOR NEXT ENTRY
REFSEAR5 LA    R7,ENTLEN(,R7) INCREMENT TO NEXT DD ENTRY
         TM    ENTRYTYP,TYPEDD SEE IF DD ENTRY
         BNO   REFNO          DDNAME NOT FOUND, EXIT
REFSEAR6 CLC   REFDDN,DDDN    MATCH DDNAME????
         BNE   REFSEAR5       NO, LOOP FOR NEXT DD
REFOUND  MVC   REFDSN(L'DDSN),DDSN SAVE DSNAME
         MVC   REFUNIT,DTYPE  SAVE UNIT INFO
         OC    REFUNIT,REFFLAG SET AFFINITY BIT
         MVC   REFVOL,DVOLSER SAVE VOLSER INFO
REFNO    BR    R14            RETURN
         EJECT
***********************************************************************
*                                                                     *
*                          T B L F U L L                              *
*                                                                     *
*        THE INTERNAL DD TABLE IS FULL.  ISSUE THE APPROPRIATE        *
*        MESSAGE AND EXIT WITH A JCL ERROR.                           *
*                                                                     *
***********************************************************************
TBLFULL  MVC   WTOLIST(LWTO3),WTO3 SET WTO LIST FORM
         AIF   ('&TSO' NE 'YES').TSO5
         WTO   MF=(E,WTOLIST)
         AGO   .TSO6
.TSO5    ANOP
         $$WTO WTOLIST        WRITE ERROR MESSAGE
.TSO6    ANOP
         L     R14,JCTADDR    LOAD JCT ADDRESS
         USING JCT,R14        SET ADDRESSABILITY TO JCT             WEJ
         NI    JCTXMASK,X'FD' TURN OF EXIT6 FLAG
         DROP  R14            DROP ADDRESSABILITY
         B     JOBERROR       EXIT WITH A SEVERE ERROR AND NO RETURN
         SPACE
         $MID  903
WTO3     WTO   '&MID.MAXIMUM ENTRIES IN INTERNAL TABLE EXCEEDED',      X
               ROUTCDE=(2),DESC=(4),MF=L
LWTO3    EQU   *-WTO3
         EJECT
***********************************************************************
*                                                                     *
*                          S M F W T M                                *
*                                                                     *
*        THIS ROUTINE GETS CONTROL FOR SOME OF THE ERRORS AND WILL    *
*        WRITE AN SMF RECORD TO RECORD THE ERROR FOR FUTURE REPORTING *
*                                                                     *
***********************************************************************
SMFWTM   DS    0H
         USING TEXT,R6                    R6 POINTS TO THE TEXT OR A
*                                         COPY OF IT
         STM   R14,R12,SAVEREGS           SAVE THE REGISTERS
         GETMAIN R,LV=L'SMF248            GET SOME STORAGE          WEJ
         LR    R8,R1                      SAVE ADDRESS
         USING SMFDSECT,R8                ESTABLISH ADDRESSABILITY
         L     R14,JCTADDR                LOAD JCT ADDRESS
         USING JCT,R14                    ESTABLISH ADDRESSABILITY  WEJ
         MVC   SM248RST,JCTRDRON          STORE READER START TIME   WEJ
         MVC   SM248RSD,JCTRDTON          STORE READER START DATE   WEJ
         MVC   SM248JBN,JCTJMRJN          MOVE JOBNAME              WEJ
         MVC   SM248UIF,JCTUSEID          MOVE USERID               WEJ
         MVC   SM248DEV,JCTINDEV          MOVE INPUT DEVICE         WEJ
         MVC   SM248IGP,JCTNONDE          MOVE NODE NAME TO ORIG GP WEJ
         MVC   SM248PS3,JCTPROCN+4        MOVE LAST 2 BYTES OF PROC WEJ
*                                              DDNAME               WEJ
         DROP  R14
         MVC   SM248LEN,H#LSM248          MOVE IN LENGTH OF HEADER  WEJ
         MVI   SM248FLG,X'02'             MOVE IN SMF FLAGS         WEJ
         MVC   SM248RTY,SMFRTYPE          MOVE IN RECORD TYPE       WEJ
         MVC   SM248PNM,BLANKS            BLANK OUT PROCNAME        WEJ
         CLI   SMFRTYPE,X'F7'             IS THIS A QNAME RECORD    WEJ
         BE    GETDDN                     YES, GO HANDLE IT         WEJ
         EX    R3,MOVEPNM                 MOVE PROC NAME
         MVC   SM248STM,SAVEPROC          MOVE PROC STEP NAME       WEJ
         CLI   SMFRTYPE,X'F9'             IS IT INSTREAM?
         BNE   GETSID                     NO GO TO GET SYS ID
         MVC   SM248PS3,C#ASTRSK          MOVE ASTERISKS
         B     GETSID                     GO TO GET SYSID           WEJ
MOVEPNM  MVC   SM248PNM(0),1(R4) MOVE PROC NAME TO SAVE AREA        WEJ
GETDDN   DS    0H                                                   WEJ
         MVC   SM248PS3,BLANKS            MOVE BLANKS TO UNUSED FLD WEJ
         MVC   SM247DDN,TDDN              MOVE IN DD NAME           WEJ
         MVC   SM247QNM,SAVEQNM           MOVE IN QNAME IF ANY      WEJ
GETSID   L     R1,16                      -> CVT
         L     R1,196(,R1)                -> SMCA
         MVC   SM248SID,16(R1)            MOVE SYSTEM ID            WEJ
         TIME  BIN                        GET THE TIME              WEJ
         STM   R0,R1,SM248TME             GET THE TIME              WEJ
         SMFWTM (8)                       WRITE THE RECORD          WEJ
         LR    R1,R8
         FREEMAIN R,LV=L'SMF248,A=(1)     FREE SOME STORAGE
         LM    R14,R12,SAVEREGS           RESTORE REGISTERS
         BR    R14                        RETURN TO CALLER
         DROP  R8                                                   WEJ
         USING J2XIT06E,R12,R9,R10
* MOVE1  MVC   JNAME(0),1(R4) MOVE JOBNAME TO SAVE TABLE
MOVE2    MVC   JACCTNO(0),1(R4) MOVE ACCOUNT NO TO SAVE TABLE
MOVE3    MVC   JPGMRNM(0),1(R4) MOVE PROGRAMMER NAME TO SAVE TABLE
MOVE4    MVC   SAVEPROC(0),1(R4) MOVE JOB STEP NAME TO SAVE AREA
MOVE5    MVC   EJSTEP(0),3(R4) MOVE JOB STEP NAME TO TABLE
MOVE6    MVC   EPSTEP(0),3(R4) MOVE PROC STEP NAME TO TABLE
MOVE7    MVC   EPGMNM(0),3(R4) MOVE STEP PGM NAME TO TABLE
MOVE8    MVC   TDDN(0),3(R4)   MOVE DDNAME TO TEMP DD ENTRY
MOVE9    MVC   TDSN(0),3(R4)   MOVE DSN TO TEMP DD ENTRY
MOVE10   MVC   REFDDN(0),1(R4) MOVE DDNAME TO REFERBACK
MOVE11   MVC   REFPSTEP(0),1(R4) MOVE PROCSTEP NAME TO REFERBACK
MOVE12   MVC   REFJSTEP(0),1(R4) MOVE JOBSTEP NAME TO REFERBACK
MOVE13   MVC   TVOLSER(0),3(R4) SAVE 1ST VOLSER FROM DD
MOVE14   MVC   TDSN(0),1(R5)  MOVE 1ST PART GDG DSN TO TEMP
MOVE15   MVC   0(0,R2),1(R5)  MOVE 2ND PART GDG DSN TO TEMP
MOVE16   MVC   JACCT(0),1(R4) MOVE ACCOUNT NO TO WORK AREA
MOVE17   MVC   LDSN(0),3(R4)  MOVE VOL=SER DSNAME TO SAVE
MOVE18   MVC   CURSTEP(0),3(R4) SAVE JOB  STEP NAME
MOVE19   MVC   CURSTEP(0),3(R4) SAVE PROC STEP NAME
MOVE20   MVC   JDVERB(0),2(R4)   MOVE JDT VERB  TO TABLE
MOVE21   MVC   JDLABEL(0),2(R4)  MOVE JDT LABEL TO TABLE
MOVE22   MVC   0(0,R4),0(R14)    SHIFT DD TEXT
MOVE23   MVC   3(0,R4),2(R3)     MOVE UNIT NAME FROM TABLE
PACK1    PACK  DOUBLE,1(0,R4) GENERIC PACK INSTRUCTION              WEJ
TRT1     TRT   1(0,R4),0(R2)  GENERIC TRT INSTRUCTION               WEJ
COMPARE1 CLC   REFERBCK(0),EENTRY SEE IF REFERBACK STEPS MATCH
COMPARE2 CLC   1(0,R4),2(R1)  SEE IF UNIT NAME IN TABLE
COMPARE3 CLC   1(0,R4),EPSTEP SEE IF PROC OVERRIDE STEPNAME MATCH
COMPARE4 CLC   2(0,R4),C#OUTPUT  IS THIS VERB "OUTPUT"
COMPARE5 CLC   2(0,R4),C#CLASS   IS THIS KEYWORD "CLASS"
         EJECT
***********************************************************************
*                                                                     *
*                          S T A E R T R Y                            *
*                                                                     *
*        RESTORE ORIGINAL REGISTERS AND GET OUT                       *
*                                                                     *
***********************************************************************
STAERTRY LR    R13,R1         RESTORE GETMAINED AREA ADDRESS
         LM    R14,R12,STAEREGS+12 RESTORE REGISTERS
         CLI   RECURS,X'FF'   SEE IF RECURSIVE ABEND
         BE    JOBERR1        YES, GET OUT AS QUICKLY AS POSSIBLE
         MVI   RECURS,X'FF'   SET RECURSIVE ABEND INDICATOR
         B     CLEAR          GET OUT
         EJECT
         LTORG
         SPACE 2
***********************************************************************
*        TABLES USED BY EXIT                                          *
***********************************************************************
*
***********************************************************************
*        FORMAT OF TABLE IS AS FOLLOWS                                *
*        1)  A 1 BYTE PRODUCTION SYSOUT CLASS                         *
*        2)  A 1 BYTE TEST SYSOUT CLASS IF USED IN TEST JOB           *
***********************************************************************
PSYSOUT  EQU   *              PRODUCTION-ONLY SYSOUT CLASSES
         DC    C'E',C'A'      PRODUCTION IMPACT PRINTER
         DC    C'N',C'S'      PRODUCTION XEROX SIMPLEX CLASS
         DC    C'M',C'D'      PRODUCTION XEROX DUPLEX  CLASS
         DC    X'FF'          END OF TABLE
*
***********************************************************************
*        FORMAT OF TABLE IS AS FOLLOWS                                *
*        1)  A 1 BYTE UNIT ATTRIBUTE TYPE                             *
*            X'00'  UNIMPORTANT DEVICE TYPE                           *
*            X'02'  TAPE DEVICE                                       *
*            X'04'  PRIVATE MOUNT DISK DEVICE                         *
*            X'08'  VIO                                               *
*        2)  A 1 BYTE MACHINE LENGTH OF ENTRY                         *
*        3)  AN 8 BYTE FIELD CONTAINING THE DEVICE NAME LEFT JUSTIFIED*
***********************************************************************
DEVTABLE EQU   *              DEVICE NAME TABLE
         DC    X'F4',X'04',CL8'SYSDA'    SYSDA
         DC    X'F4',X'04',CL8'SYSSQ'    SYSDA
         DC    X'F2',X'03',CL8'DISK'     SYSDA
         DC    X'F4',X'03',CL8'WORK'     SYSDA
         DC    X'00',X'03',CL8'SYSP'     SYSDA
         DC    X'00',X'03',CL8'TEST'     SYSDA
         DC    X'00',X'07',CL8'SYSALLDA' SYSDA
         DC    X'00',X'03',CL8'3375'     SYSDA
         DC    X'00',X'03',CL8'3380'     SYSDA
         DC    X'02',X'03',CL8'TAPE'     TAPE
         DC    X'02',X'03',CL8'3400'     TAPE
         DC    X'04',X'03',CL8'PRIV'     PRIV
         DC    X'08',X'03',CL8'VIO'      VIO
         DC    10X'00'         END OF TABLE
         EJECT
***********************************************************************
*        CONSTANTS USED BY EXIT                                       *
***********************************************************************
*
BLANKS   DC    44C' '         CONSTANT STRING OF BLANKS
* DEFTIME DC   X'A9',X'01',X'04',CL4'0120',X'FE' DFLT CPU TIME INTEXT
* ZEROES DC    8C'0'          CHARACTER CONSTANT 8 ZEROES
GDGMASK  DC    C'G0000V00'    GDG SUFFIX MASK
X#FFFF   DC    F'65535'       FULLWORD CONSTANT X'0000FFFF'
MAXENTS  DC    Y(8192/ENTLEN) MAX ENTRIES IN 8K TABLE
GETLEN   DC    AL2(GETSIZE)   SIZE OF GETMAIN AREA
A#MSSG   DC    A(MESSAGES)    ADDRESS OF BEGINING OF MESSAGE TABLE  WEJ
A#PTYPRF DC    A(PRTYTBL-L'PRTYENT) ADDRESS OF ENT BEFORE PRTY TBL  WEJ
* F#1    DC    F'1'           FULLWORD CONSTANT '1'
F#15     DC    F'15'          FULLWORD CONSTANT '15'
F#45     DC    F'45'          FULLWORD CONSTANT '45'
* F#120  DC    F'120'         FULLWORD CONSTANT '120'
F#127    DC    F'127'         FULLWORD CONSTANT '127'
F#8192   DC    F'8192'        CONSTANT FULLWORD 8192
H#0      DC    H'0'           HALFWORD CONSTANT '0'
H#1      DC    H'1'           HALFWORD CONSTANT '1'
H#2      DC    H'2'           HALFWORD CONSTANT '2'
H#3      DC    H'3'           HALFWORD CONSTANT '3'
H#4      DC    H'4'           HALFWORD CONSTANT '4'
H#5      DC    H'5'           HALFWORD CONSTANT '5'
H#6      DC    H'6'           HALFWORD CONSTANT '6'
H#7      DC    H'7'           HALFWORD CONSTANT '7'
H#8      DC    H'8'           HALFWORD CONSTANT '8'
H#9      DC    H'9'           HALFWORD CONSTANT '9'                 WEJ
H#10     DC    H'10'          HALFWORD CONSTANT '10'
H#12     DC    H'12'          HALFWORD CONSTANT '12'
H#13     DC    H'13'          HALFWORD CONSTANT '13'
H#20     DC    H'20'          HALFWORD CONSTANT '20'
H#35     DC    H'35'          HALFWORD CONSTANT '35'
H#42     DC    H'42'          HALFWORD CONSTANT '42'
H#44     DC    H'44'          HALFWORD CONSTANT '44'
H#45     DC    H'45'          HALFWORD CONSTANT '45'
H#50     DC    H'50'          HALFWORD CONSTANT '50'
H#60     DC    H'60'          HALFWORD CONSTANT '60'
H#90     DC    H'90'          HALFWORD CONSTANT '90'
H#120    DC    H'120'         HALFWORD CONSTANT '120'
H#512    DC    H'512'         HALFWORD CONSTANT '512'
H#1440   DC    H'1440'        HALFWORD CONSTANT '1440'
H#5000   DC    H'5000'        HALFWORD CONSTANT '5000'
H#LSM248 DC    AL2(L'SMF248)  LENGTH OF SMF248 RECORD               WEJ
P#0      DC    P'0'           PACKED CONSTANT '0'
C#ASTRSK DC    CL2'**'        CHARACTER CONSTANT OF **              WEJ
C#PH     DC    CL2'PH'        CHARACTER CONSTANT 'PH'               WEJ
C#PQ     DC    CL2'PQ'        CHARACTER CONSTANT 'PQ'               WEJ
C#LD     DC    CL3'LD.'       CHARACTER CONSTANT 'LD.'              WEJ
C#SHR    DC    CL3'SHR'       CHARACTER CONSTANT 'SHR'
C#NEW    DC    CL3'NEW'       CHARACTER CONSTANT 'NEW'
C#MOD    DC    CL3'MOD'       CHARACTER CONSTANT 'MOD'
C#BLP    DC    CL3'BLP'       CHARACTER CONSTANT 'BLP'
C#FCC    DC    CL3'FCC'       CHARACTER CONSTANT 'FCC'              WEJ
C#FCH    DC    CL3'FCH'       CHARACTER CONSTANT 'FCH'              WEJ
C#HOLD   DC    CL4'HOLD'      CHARACTER CONSTANT 'HOLD'
C#KEEP   DC    CL4'KEEP'      CHARACTER CONSTANT 'KEEP'
C#PASS   DC    CL4'PASS'      CHARACTER CONSTANT 'PASS'
C#1440   DC    CL4'1440'      CHARACTER CONSTANT '1440'             WEJ
C#SYS1   DC    CL5'SYS1.'     SYS1. PREFIX CONSTANT                 WEJ
C#SYS2   DC    CL5'SYS2.'     SYS2. PREFIX CONSTANT                 WEJ
C#CATLG  DC    CL5'CATLG'     CHARACTER CONSTANT 'CATLG'
C#CLASS  DC    CL5'CLASS'     CHARACTER CONSTANT 'CLASS'
C#FORMS  DC    CL5'FORMS'     CHARACTER CONSTANT 'FORMS'
C#SHARE  DC    CL5'SHARE'     CHARACTER CONSTANT 'SHARE'
C#98000  DC    CL5'98000'     CHARACTER CONSTANT '98000'
C#DELETE DC    CL6'DELETE'    CHARACTER CONSTANT 'DELETE'
C#LOCATE DC    CL6'LOCATE'    CHARACTER CONSTANT 'DELETE'
C#SORTWK DC    CL6'SORTWK'    CHARACTER CONSTANT 'SORTWK'
C#OUTPUT DC    CL6'OUTPUT'    CHARACTER CONSTANT 'OUTPUT'
C#SYS106 DC    CL6'SYS106'    CHARACTER CONSTANT 'SYS106'
C#UNCAT  DC    CL7'UNCATLG'   CHARACTER CONSTANT 'UNCATLG'
NULLFILE DC    CL8'NULLFILE'  CHARACTER CONSTANT NULLFILE
C#JOBLIB DC    CL8'JOBLIB'    CHARACTER CONSTANT 'JOBLIB'
C#STEPLI DC    CL8'STEPLIB'   CHARACTER CONSTANT 'STEPLIB'
C#JOBCAT DC    CL8'JOBCAT'    CHARACTER CONSTANT 'JOBCAT'
C#STEPCA DC    CL8'STEPCAT'   CHARACTER CONSTANT 'STEPCAT'
C#$JLOG  DC    CL8'$JES2LOG'  CHARACTER CONSTANT '$JES2LOG'
C#$JCL   DC    CL8'$JCLIMG'   CHARACTER CONSTANT '$JCLIMG'
C#$SYSM  DC    CL8'$SYSMSGS'  CHARACTER CONSTANT '$SYSMSGS'         WEJ
C#JLCICS DC    CL8'JLCICSP+'  CHARACTER CONSTANT 'JLCICSP+'         WEJ
C#JLCICT DC    CL8'JLCICST+'  CHARACTER CONSTANT 'JLCICST+'         WEJ
C#UCC7   DC    CL8'UCC7   +'  CHARACTER CONSTANT 'UCC7   +'         WEJ
C#ADMMSG DC    CL8'ADMINMSG'  CHARACTER CONSTANT 'ADMINMSG'         WEJ
C#NOFORM DS    0CL(L'C#NOFML+L'C#NOFMID)
C#NOFML  DC    AL1(0)
C#NOFMID DC    CL8' '
C#FCBKYJ DS    0CL(L'C#FCBJDK+L'C#FCBJDN+L'C#FCBJDL+L'C#FCB)
C#FCBJDK DC    AL1(JDTKWDK)
C#FCBJDN DC    AL1(2)
C#FCBJDL DC    AL1(L'C#FCB)
C#FCB    DC    C'FCB'         CHARACTER CONSTANT 'FCB'
C#UNITC  DS    0CL(L'C#UNITK+L'C#UNITPM)                            WEJ
C#UNITK  DC    AL1(UNITK)
C#UNITPM DC    AL1(2)
C#UNITCC DS    0CL(L'C#UNITCL+L'C#UNITCT+L'C#UNITND)
C#UNITCL DC    AL1(1)
C#UNITCT DC    C'0'
C#UNITND DC    AL1(ENDK)
         SPACE
*              PGM NAME THAT ADD JES2 RESOURCES
*GMCICS  DC    C'DFHSIP'      CICS PGMNAME
*GM7074  DC    C'IIOEM74'     7074 PGMNAME
*GM1401  DC    C'IIQE14'      1401 PGMNAME
*GMXMIT  DC    C'BSCXMIT1'    XMISSION PGMNAME
         EJECT
HEADER1  DC    C' STMT NO. MESSAGE'
PREFIX   DS    0CL11          NORMAL MESSAGE PREFIX
EDMASK   DC    X'402020202020' EDIT MASK FOR MESSAGES
         DC    CL5' '
ESTAE    ESTAE STAEXIT,CT,XCTL=NO,PURGE=NONE,ASYNCH=NO,RECORD=YES,     X
               TERM=NO,MF=L
         EJECT
MSG0CON  DS    0CL78
         DC    AL1(L'MSG0-1)                                        WEJ
MSG0     DC    C'J2U660I XXXXXXXX XXXXXXXX TAPES= XXXXX       JOB CARD *
               TIME = XXXXXX SECONDS'                               WEJ
MSG1CON  DS    0CL23
         DC    AL1(L'MSG1-1)                                        WEJ
MSG1     DC    C'J2U661I CLASS SET TO X'
PRTYTBL  DS    0F
PRTYENT  DS    0CL(L'PRTYTIME+L'PRTYPRIO)
PRTYTIME DC    FL4'9'
PRTYPRIO DC    X'70'
         DC    FL4'19'
         DC    X'60'
         DC    FL4'29'
         DC    X'50'
         DC    FL4'59'
         DC    X'40'
         DC    FL4'119'
         DC    X'30'
         DC    FL4'239'
         DC    X'20'
         DC    FL4'479'
         DC    X'10'
         DC    XL4'FFFFFFFF'    HIGH VALUE IS USED FOR COMPARE LOGICAL
         DC    X'00'
MESSAGES DS    0CL90          MESSAGE TABLE
M1       DC    AL1(L'M1C-1)   LENGTH OF FOLLOWING MESSAGE FOR MOVE
M1C      DC    C'J2U601F LENGTH OF A PARAMETER EXCEEDS 8 CHARACTERS'
M2       DC    AL1(L'M2C-1)   LENGTH OF FOLLOWING MESSAGE FOR MOVE
M2C      DC    C'J2U602F JOBNAME, ACCOUNTING INFORMATION, OR PROGRAMMERX
                NAME MISSING ON THE JOB CARD'
M3       DC    AL1(L'M3C-1)   LENGTH OF FOLLOWING MESSAGE FOR MOVE
M3C      DC    C'J2U603F LENGTH OF JOBNAME EXCEEDS MAXIMUM OF 8 CHARACTX
               ERS'                                '
M4       DC    AL1(L'M4C-1)   LENGTH OF FOLLOWING MESSAGE FOR MOVE
M4C      DC    C'J2U604E INVALID LENGTH OF THE ACCOUNTING FIELD'
M5       DC    AL1(L'M5C-1)   LENGTH OF FOLLOWING MESSAGE FOR MOVE
M5C      DC    C'J2U605F LENGTH OF PROGRAMMER NAME FIELD ON THE JOB CARX
               D EXCEEDS MAXIMUM OF 20 CHARACTERS'
M6       DC    AL1(L'M6C-1)   LENGTH OF FOLLOWING MESSAGE FOR MOVE
M6C      DC    C'J2U606E UNAUTHORIZED USE OF THE PERFORM KEYWORD ON THEX
                JOB CARD'  OPEN MESSAGE, NOT USED
M7       DC    AL1(L'M7C-1)   LENGTH OF FOLLOWING MESSAGE FOR MOVE
M7C      DC    C'J2U607I UNAUTHORIZED USE OF THE ADDRSPC KEYWORD ON THEX
                JOB CARD'
M8       DC    AL1(L'M8C-1)   LENGTH OF FOLLOWING MESSAGE FOR MOVE
M8C      DC    C'J2U608F TIME VALUE ON THE JOB CARD IS NOT NUMERIC'
M9       DC    AL1(L'M9C-1)   LENGTH OF FOLLOWING MESSAGE FOR MOVE
M9C      DC    C'J2U609I UNAUTHORIZED USE OF TIME=1440 ON THE JOB CARD'
M10      DC    AL1(L'M10C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M10C     DC    C'J2U610E UNAUTHORIZED USE OF THE REGION KEYWORD ON THE X
               JOB CARD'                           '
M11      DC    AL1(L'M11C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M11C     DC    C'J2U611F LENGTH OF THE STEP NAME ON THE EXECUTE CARD EXX
               CEEDS MAXIMUM OF 8 CHARACTERS'
M12      DC    AL1(L'M12C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M12C     DC    C'J2U612F LENGTH OF THE PROGRAM NAME ON THE EXECUTE CARDX
                EXCEEDS MAXIMUM OF 8 CHARACTERS'
M13      DC    AL1(L'M13C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M13C     DC    C'J2U613F INVALID FORMAT FOR THE REGION PARAMETER ON THEX
                EXECUTE CARD'
M14      DC    AL1(L'M14C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M14C     DC    C'J2U614F REGION SIZE ON THE EXECUTE CARD IS NOT NUMERICX
               '
M15      DC    AL1(L'M15C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M15C     DC    C'J2U615F INVALID FORMAT FOR THE TIME PARAMETER ON THE EX
               XECUTE CARD'                        '
M16      DC    AL1(L'M16C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M16C     DC    C'J2U616I UNAUTHORIZED USE OF TIME=1440 ON THE EXECUTE CX
               ARD'
M17      DC    AL1(L'M17C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M17C     DC    C'J2U617E  USE OF THE PERFORM KEYWORD ON THE EXECUTE CARX
                NOT ALLOWED, SECTION 3, PAGE 7'
M18      DC    AL1(L'M18C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M18C     DC    C'J2U618E USE OF THE ADDRSPC KEYWORD ON THE EXECUTE CARDX
                NOT ALLOWED, SECTION 3, PAGE 7'
M19      DC    AL1(L'M19C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M19C     DC    C'J2U619E  USE OF THE DPRTY KEYWORD ON THE EXECUTE CARD X
               NOT ALLOWED, SECTION  3, PAGE 7'
M20      DC    AL1(L'M20C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M20C     DC    C'J2U620F LENGTH OF THE DDNAME ON THE DD CARD EXCEEDS THX
               E MAXIMUM OF 8 CHARACTERS'
M21      DC    AL1(L'M21C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M21C     DC    C'J2U621F INVALID FORMAT FOR THE DSNAME PARAMETER ON THEX
                DD CARD'
M22      DC    AL1(L'M22C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M22C     DC    C'J2U622F LENGTH OF THE DSNAME ON THE DD CARD EXCEEDS THX
               E MAXIMUM OF 44 CHARACTERS'
M23      DC    AL1(L'M23C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M23C     DC    C'J2U623F INVALID FORMAT FOR THE DISP PARAMETER ON THE DX
               D CARD'
M24      DC    AL1(L'M24C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M24C     DC    C'J2U624F INVALID FORMAT FOR THE UNIT PARAMETER ON THE DX
               D CARD'
M25      DC    AL1(L'M25C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M25C     DC    C'J2U625F UNIT COUNT WITHIN THE UNIT PARAMETER ON THE DDX
                CARD IS NOT NUMERIC'
M26      DC    AL1(L'M26C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M26C     DC    C'J2U626F INVALID FORMAT FOR THE VOLUME PARAMETER ON THEX
                DD CARD'
M27      DC    AL1(L'M27C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M27C     DC    C'J2U627F VOLUME COUNT WITHIN THE VOLUME PARAMETER ON THX
               E DD CARD IS NOT NUMERIC'
M28      DC    AL1(L'M28C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M28C     DC    C'J2U628F LENGTH OF THE VOLSER PARAMETER(S) ON THE DD CAX
               RD EXCEEDS MAXIMUM OF 6 CHARACTERS' '
M29      DC    AL1(L'M29C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M29C     DC    C'J2U629E UNAUTHORIZED DISPOSITION SPECIFIED FOR A SYSTEX
               M DATA SET'
M30      DC    AL1(L'M30C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M30C     DC    C'J2U630E INTERNAL ERROR - LENGTH OF THE INTERNAL TEXT  X
               OF AN EXECUTE CARD EXCEEDS 512 CHARS'
M31      DC    AL1(L'M31C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M31C     DC    C'J2U631F LENGTH OF THE PROC STEP NAME ON THE EXECUTE CAX
               RD EXCEEDS MAXIMUM OF 8 CHARACTERS'
M32      DC    AL1(L'M32C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M32C     DC    C'J2U632F INVALID FORMAT FOR THE REFERBACK SUBPARAMETER *
                ON THE DD CARD'
M33      DC    AL1(L'M33C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M33C     DC    C'J2U633E INVALID DISPOSITION ON A JOBLIB, STEPLIB, JOBCX
               CAT, OR STEPCAT DD CARD'
M34      DC    AL1(L'M34C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M34C     DC    C'J2U634F THE LENGTH OF THE DSNAME ON A VOLUME REFERBACKX
                EXCEEDS A MAXIMUM OF 44 CHARACTERS'
M35      DC    AL1(L'M35C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M35C     DC    C'J2U635E THE REQUIRED ACCOUNTING FIELD ON THE JOB CARD X
               WAS NOT SPECIFIED'
M36      DC    AL1(L'M36C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M36C     DC    C'J2U636E LENGTH OF PROC-NAME IN EXECUTE CARD EXCEEDS THX
               MAXIMUM OF 8 BYTES'
M37      DC    AL1(L'M37C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M37C     DC    C'J2U637E LENGTH OF PROC-NAME IN IN-STREAM PROC CARD EXCX
               EEDS THE MAXIMUM OF 8 BYTES'
M38      DC    AL1(L'M38C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M38C     DC    C'J2U638E LENGTH OF FORM-ID IN SYSOUT= GREATER THAN 8 CHX
                ARACTERS'
M39      DC    AL1(L'M39C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M39C     DC    C'J2U639E LENGTH OF FORMS PARAMETER ON OUTPUT CARD GREATX
                ER THAN 8 CHARACTERS'
M40      DC    AL1(L'M40C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M40C     DC    C'J2U640E FIRST 2 DIGITS OF ACCOUNT FIELD ARE NOT ALPHABX
               ETIC, SECTION 3, PAGE 4'
M41      DC    AL1(L'M41C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M41C     DC    C'J2U641E POSITIONS 3 - 7 OF THE FIRST ACCOUNT FIELD AREX
                NOT NUMERIC, SECTION 3, PAGE 4'
M42      DC    AL1(L'M42C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M42C     DC    C'J2U642I JOB WILL ISSUE LOCATE'  OPEN MESSAGE
M43      DC    AL1(L'M43C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M43C     DC    C'J2U643I UNAUTHORIZED USE OF JOBCAT OR STEPCAT DD STATEX
               MENT'
M44      DC    AL1(L'M44C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M44C     DC    C'J2U644I UNAUTHORIZED USE OF BYPASS LABEL PROCESSING (B*
               LP)'
M45      DC    AL1(L'M45C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M45C     DC    C'J2U645I UNAUTHORIZED ATTEMPT TO BYPASS TMS WITH LABEL=X
               EXPDT=98000'                         '
M46      DC    AL1(L'M46C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M46C     DC    C'J2U646I JOB REQUIREMENTS EXCEED THOSE ALLOWED FOR THE X
               JOB CLASS REQUESTED'
M47      DC    AL1(L'M47C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M47C     DC    C'J2U647I MORE THAN 3 TAPES IN ANY ONE STEP IN A TEST JO*
               B'
M48      DC    AL1(L'M48C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M48C     DC    C'J2U648I OPEN MESSAGE'
M49      DC    AL1(L'M49C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M49C     DC    C'J2U649F QNAME IS GREATER THAN 8 CHARACTERS'
M50      DC    AL1(L'M50C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE
M50C     DC    C'J2U650E QNAME=ADMINMSG IN SAME JOB AS EITHER QNAME=PH X
               OR QNAME=PQ, JOB NOT RUN'                            WEJ
*          DATA SET J2XIT06CMA AT LEVEL 003 AS OF 09/05/88
P@1      EQU   M1-MESSAGES
P@2      EQU   M2-MESSAGES
P@3      EQU   M3-MESSAGES
P@4      EQU   M4-MESSAGES
P@5      EQU   M5-MESSAGES
P@6      EQU   M6-MESSAGES
P@7      EQU   M7-MESSAGES
P@8      EQU   M8-MESSAGES
P@9      EQU   M9-MESSAGES
P@10     EQU   M10-MESSAGES
P@11     EQU   M11-MESSAGES
P@12     EQU   M12-MESSAGES
P@13     EQU   M13-MESSAGES
P@14     EQU   M14-MESSAGES
P@15     EQU   M15-MESSAGES
P@16     EQU   M16-MESSAGES
P@17     EQU   M17-MESSAGES
P@18     EQU   M18-MESSAGES
P@19     EQU   M19-MESSAGES
P@20     EQU   M20-MESSAGES
P@21     EQU   M21-MESSAGES
P@22     EQU   M22-MESSAGES
P@23     EQU   M23-MESSAGES
P@24     EQU   M24-MESSAGES
P@25     EQU   M25-MESSAGES
P@26     EQU   M26-MESSAGES
P@27     EQU   M27-MESSAGES
P@28     EQU   M28-MESSAGES
P@29     EQU   M29-MESSAGES
P@30     EQU   M30-MESSAGES
P@31     EQU   M31-MESSAGES
P@32     EQU   M32-MESSAGES
P@33     EQU   M33-MESSAGES
P@34     EQU   M34-MESSAGES
P@35     EQU   M35-MESSAGES
P@36     EQU   M36-MESSAGES
P@37     EQU   M37-MESSAGES
P@38     EQU   M38-MESSAGES
P@39     EQU   M39-MESSAGES
P@40     EQU   M40-MESSAGES
P@41     EQU   M41-MESSAGES
P@42     EQU   M42-MESSAGES
P@43     EQU   M43-MESSAGES
P@44     EQU   M44-MESSAGES
P@45     EQU   M45-MESSAGES
P@46     EQU   M46-MESSAGES
P@47     EQU   M47-MESSAGES
P@48     EQU   M48-MESSAGES
P@49     EQU   M49-MESSAGES
P@50     EQU   M50-MESSAGES
ALPHATBL DS    0CL256                                               WEJ
         DC    X'FF0102030405060708090A0B0C0D0E0F'    X 00-0F       WEJ
         DC    X'101112131415161718191A1B1C1D1E1F'    X 10-1F       WEJ
         DC    X'202122232425262728292A2B2C2D2E2F'    X 20-2F       WEJ
         DC    X'303132333435363738393A3B3C3D3E3F'    X 30-3F       WEJ
         DC    X'404142434445464748494A4B4C4D4E4F'    X 40-4F       WEJ
         DC    X'505152535455565758595A5B5C5D5E5F'    X 50-5F       WEJ
         DC    X'606162636465666768696A6B6C6D6E6F'    X 60-6F       WEJ
         DC    X'707172737475767778797A7B7C7D7E7F'    X 70-7F       WEJ
         DC    X'808182838485868788898A8B8C8D8E8F'    X 80-8F       WEJ
         DC    X'909192939495969798999A9B9C9D9E9F'    X 90-9F       WEJ
         DC    X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'    X A0-AF       WEJ
         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'    X B0-BF       WEJ
         DC    X'C0000000000000000000000000000000'    X C0-CF       WEJ
         DC    X'D0000000000000000000000000000000'    X D0-DF       WEJ
         DC    X'E0E10000000000000000000000000000'    X E0-EF       WEJ
         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'    X F0-FF       WEJ
NUMERTBL DS    0CL256                                               WEJ
         DC    X'FF0102030405060708090A0B0C0D0E0F'    X 00-0F       WEJ
         DC    X'101112131415161718191A1B1C1D1E1F'    X 10-1F       WEJ
         DC    X'202122232425262728292A2B2C2D2E2F'    X 20-2F       WEJ
         DC    X'303132333435363738393A3B3C3D3E3F'    X 30-3F       WEJ
         DC    X'404142434445464748494A4B4C4D4E4F'    X 40-4F       WEJ
         DC    X'505152535455565758595A5B5C5D5E5F'    X 50-5F       WEJ
         DC    X'606162636465666768696A6B6C6D6E6F'    X 60-6F       WEJ
         DC    X'707172737475767778797A7B7C7D7E7F'    X 70-7F       WEJ
         DC    X'808182838485868788898A8B8C8D8E8F'    X 80-8F       WEJ
         DC    X'909192939495969798999A9B9C9D9E9F'    X 90-9F       WEJ
         DC    X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'    X A0-AF       WEJ
         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'    X B0-BF       WEJ
         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'    X C0-CF       WEJ
         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'    X D0-DF       WEJ
         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'    X E0-EF       WEJ
         DC    X'00000000000000000000FAFBFCFDFEFF'    X F0-FF       WEJ
         EJECT
***********************************************************************
*                                                                     *
*                          S T A E X I T                              *
*                                                                     *
*        THIS ROUTINE GETS CONTROL FOR EVERY ABEND OCCURRING IN       *
*        THE EXIT.  THIS ROUTINE WILL ISSUE AN APPROPRIATE MESSAGE    *
*        TO THE OPERATOR AND TAKE A CONSOLE DUMP FOR PROBLEM          *
*        RESOLUTION.  RETRY WILL BE ATTEMPTED FOR ALL ABENDS          *
*        WHICH WILL JUST SET THE JOB CLASS TO "A" AND TERMINATE.      *
*        NOTE THAT THERE IS A RECURSION CHECK TO PROTECT FROM         *
*        ABEND LOOPS.                                                 *
*                                                                     *
***********************************************************************
         PUSH  USING
         DROP  R9,R10,R12
STAEXIT  LR    R8,R15         SET NEW BASE ADDR
         USING STAEXIT,R8     SET ADDRESSABILITY
         LA    R15,12         SET R15 TO 12                         WEJ
         CR    R0,R15         SEE IF CORE AVAILABLE
         BE    STAENO         NO, BRANCH
         SAVE  (14,12)        SAVE REGISTERS
         SPACE 1
         L     R4,0(R1)       LOAD PARAMETER ADDRESS
         L     R11,STAEREGS+64-WORKAREA(R4) RESTORE HCT ADDRESS
         LA    R3,STAESAVE-WORKAREA(R4) LOAD ADDRESS OF NEW SAVE
         ST    R3,8(,R13)     SAVE NEW SAVE ADDRESS IN OLD
         ST    R13,4(,R3)     SAVE OLD SAVE ADDRESS IN NEW
         LR    R13,R3         SET NEW SAVE ADDRESS
         LR    R3,R1          SAVE SDR2 ADDRESS
         LA    R0,L'WTO4      LOAD LENGTH OF MESSAGE
         LA    R1,WTOLIST-WORKAREA(R4) LOAD ADDRESS OF WTO LIST FORM
         MVC   0(LWTO4,R1),WTO4 SET WTO LIST FORM
         AIF   ('&TSO' NE 'YES').TSO7
         WTO   MF=(E,(R1))
         AGO   .TSO8
.TSO7    ANOP
         $$WTO (R1)           WRITE ERROR MESSAGE
.TSO8    ANOP
         CLI   RECURS-WORKAREA(R4),X'FF'   SEE IF RECURSIVE ABEND
         BE    STAENO         YES, TELL ABEND NOT TO RETRY
         AIF   ('&SDUMP' EQ 'YES').SDUMP1
         B     STAE1          BYPASS SDUMP SWITCH
.SDUMP1  ANOP
         SDUMP HDR='JES2 EXIT6 CONVERTER TIME ESTAE'
STAE1    DS    0H
         L     R13,4(,R13)    RESTORE ORIGINAL REG 13
         LR    R1,R3          RESTORE SDWA ADDRESS
         L     R0,=A(STAERTRY)  LOAD RETRY ADDRESS
         SETRP REGS=(14,12),DUMP=IGNORE,RC=4,FRESDWA=YES,              X
               RETADDR=(0)
STAENO   L     R0,=A(STAERTRY)  LOAD RETRY ADDRESS
         LA    R15,4          SET RETURN CODE TO RETRY
         BR    R14            GO RETRY
         SPACE 2
         $MID  904
WTO4     WTO   '&MID.JES EXIT6 ABEND',                                 X
               ROUTCDE=(2),DESC=(4),MF=L
LWTO4    EQU   *-WTO4
         LTORG                                                      WEJ
         SPACE 1
         DROP  R8             DROP LOCAL ADDRESSABILITY
         SPACE 2
         POP   USING
WORKAREA DSECT
SAVEAREA DS    18F            NEW SAVE AREA
SAVEREGS DS    18F            ROUTINE REGISTER SAVE AREA
STAEREGS DS    18F            REGISTERS FOR ESTAE RECOVERY
STAESAVE DS    18F            SAVE AREA FOR ESTAE ROUTINE
PUTSAVE  DS    19F            PUT SAVE AREA
JCTADDR  DS    A              ADDRESS OF JCT
JDTRTN   DS    A              RETURN ADDRESS FROM JDTGET
TEXTSTAR DS    F              START ADDRESS OF INTERNAL TEXT        WEJ
SAVER13  DS    F              SAVE AREA FOR REG 13 ON PUT RPL
SAVER15  DS    F         TEMP SAVE AREA FOR REG 15 ON TEST
SUBWORK  DS    F              ADDR OF TEXT PROCESSER WORK AREA
SUBTABLE DS    F              ADDRESS OF AREA FOR JCL STMT TABLE
WTOSAVE  DS    4F             SAVE AREA FOR REG 14 - 1 BEFORE WTO'S
DOUBLE   DS    D              DOUBLE WORD FOR PACK & CVB
FIRSTENT DS    F              SAVE AREA FOR FIRST SAVE TABLE ENTRY
LASTENT  DS    F              SAVE AREA FOR LAST SAVE TABLE ENTRY
LASTEXEC DS    F              ADDR OF LAST EXEC TABLE ENTRY
PROCTEXT DS    F              ADDR OF SAVED KEYWORD TEXT FROM PROC STMT
RETCODE  DS    F              SAVE AREA FOR RETURN CODE
TAPECNT  DS    H              COUNT OF TAPE UNITS USED IN STEP
PRIVCNT  DS    H              COUNT OF PRIV UNITS USED IN STEP
ENTCOUNT DS    H              NUMBER OF ACTIVE ENTRIES IN TABLE
UNITCOUN DS    XL1            COUNT OF UNITS FOR THIS DD
*        THIS MAY ALSO BE 'P' FOR PARALLEL MOUNTING
EOFIND   DS    C              END OF FILE INDICATORS
ENDSTEP  EQU   1              LAST STATEMENT OF STEP IND
LASTBLK  EQU   2              BLOCK WITH LAST EXEC STMT PROCESSED
SAVETCNT DS    XL1            SAVE AREA FOR NO. OF TIME SUB-PARMS   WEJ
SAVEPROC DS    CL8            STEPNAME WHICH CALLS PROC
SAVEFORM DS    0CL9           SYSOUT FORM-ID LENGTH AND FORM-ID
SAVEFMLN DS    AL1            SYSOUT FORM-ID LENGTH (IF ANY)
SAVEFMID DS    CL8            SYSOUT FORM-ID (IF ANY)
FCBFLAG  DS    CL1            Y - FCB ON DD OR OUTPUT CARD
SAVEQNM  DS    CL8            QNAME FROM DD CARD
PROCIND  DS    C              PROCESS PROCEDURE TEXT INDICATOR
*        X'01' INDICATES NEED TO PROCESS PROCEDURE OVERRIDE TEXT
JOBIND   DS    C              JOB RELATED INDICATORS
JOBSTC   EQU   1              JOB IS A STARTED TASK
JOBTSO   EQU   2              JOB IS A TSO LOGON
JOBCOMM  EQU   8              JOB IS FOR COMMUNICATIONS
JOBTECH  EQU   16             JOB IS FOR TECH SUPPORT
JOBPROD  EQU   32             JOB IS A PRODUCTION JOB
JOBTEST  EQU   64             JOB IS A TEST JOB
JOBOPER  EQU   128            JOB IS A OPERATIONS JOB
JOBIND2  DS    C              JOB RELATED INDICATORS
HELD     EQU   1              JOB HAD TYPRUN=HOLD
JOBFAIL  EQU   2              JOB FAILED EXIT TESTING
JOBLIB   EQU   4              JOB HAD A JOBLIB STMT
DISPIND  DS    C              DD ENTRY DISPOSITION
NEW      EQU   1              DISP=NEW
OLD      EQU   2              DISP=OLD
SHR      EQU   4              DISP=SHR
MOD      EQU   8              DISP=MOD
CATLG    EQU   16             STEP COMPLETION DISP=CATLG
PASS     EQU   32             STEP COMPLETION DISP=PASS
KEEP     EQU   64             STEP COMPLETION DISP=KEEP
DELETE   EQU   128            STEP COMPLETION DISP=DELETE
DISPIND1 DS    C              DD ENTRY DISPOSITION
UNCATLG  EQU   1              STEP COMPLETION DISP=UNCATLG
UNITIND  DS    C              DD ENTRY UNIT TYPE
TAPE     EQU   2              UNIT USED WAS A TAPE
PRIV     EQU   4              UNIT USED WAS A PRIV DISK PACK
VIO      EQU   8              UNIT WAS VIO
AFF      EQU   16             UNIT WAS DETERMINED BY AFF
UNITGDG  EQU   32             UNIT TYPE(S) FROM GDG PROCESSING
UNITFND  EQU   128            UNIT TYPE HAS BEEN FOUND
UNITIND2 DS    X
UNITPRC  EQU   1              UNIT= HAS BEEN FOUND                  WEJ
REFFLAG  DS    XL1            REF FLAG SET FOR UNIT AFFINITY
JACCT    DS    CL14           ACCOUNT NUMBER (1ST ACCT INFO FIELD)
TENTRY   DS    0CL53          TEMPORARY DD TEXT TABLE ENTRY
TDDN     DS    CL8            TEMP DDNAME
TTYPE    DS    C              TEMP UNIT TYPE
TDSN     DS    CL44           TEMP DSN (FULL)
TVOLSER  DS    CL6            TEMP 1ST VOLSER OF DATA SET
LDSN     DS    CL44           DSNAME USED BY LOCATE
SVC26DSN DS    0CL44          DSNAME USED BY SVC26
SVC26DSL DS    CL1            LENGTH OF DSN
SVC26DS  DS    CL43           ACTUAL DSNAME INDEX
REFERBCK DS    0CL25          REFERBACK WORK AREA
REFJSTEP DS    CL8            REFERBACK JOBSTEP NAME
REFPSTEP DS    CL8            REFERBACK PROCSTEP NAME
REFDDN   DS    CL8            REFERBACK DDNAME
REFUNIT  DS    C              REFERBACK PREV UNIT TYPE
REFDSN   DS    CL44           REFERBACK DSN
REFVOL   DS    CL6            REFERBACK PREF DD 1ST VOLSER
VOLCNT   DS    XL1            VOLUME COUNT FROM UNIT=
SERCNT   DS    XL1            SERIAL COUNT FROM VOL=SER=
ADDCOUNT DS    XL1            WILL CONTAIN # OF UNITS FOR DD
RECURS   DS    CL1            RECURSIVE ABEND INDICATOR
CARDNO   DS    F              CARD NUMBER FOR MSG ROUTINE
MSGCOUNT DS    F              MESSAGE COUNT FOR MSG ROUTINE
OUTRPL   DS    F              ADDR OF OUTPUT RPL
OUTACB   DS    F              ADDR OF JOB MESSAGE DATASET ACB
PARMADDR DS    F              ADDR OF START OF CURRENT TEXT ENTRY
MAXTAPE  DS    H              MAX TAPES PER STEP USED
MAXPRIV  DS    H              MAX PRIVS PER STEP USED
MAXTOTAL DS    H              MAX TOTAL DEVICES PER STEP USED
MAXREGN  DS    H              MAX STEP REGION SIZE
MAXTIME  DS    F              MAXIMUM CPU TIME
         SPACE
RESOURCE DS    XL2            JES2 RESOURCES
*              RESOURCE BYTE ZERO
TESTING  EQU   128                     JES2 'TESTING' RESOURCE
PROD     EQU   64                      JES2 'PROD'  RESOURCE
TAPES    EQU   32                      JES2 'TAPES' RESOURCE
USERPACK EQU   8                       JES2 'USERPACK' RESOURCE
P1401    EQU   2                       JES2 '1401' RESOURCE
*              RESOURCE - BYTE ONE(1)
PCICS    EQU   128                     JES2 'CICS' RESOURCE
P7074    EQU   64                      JES2 '7074' RESOURCE
PXMIT    EQU   32                      JES2 'XMIT'/'COMTEN' RESOURCE
LONGJOB  EQU   8                       JES2 'LONGJOB' RESOURCE
DEDICATE EQU   4                       JES2 'DEDICATE' RESOURCE
*
CLASSFLD DS    C          JOB CLASS AS DETERMINED FROM TABLE        WEJ
TCMCLASS DS    C          JOB CLASS FOR TCAM OUTPUT, X'00' IF NONE  WEJ
         EJECT
INCLASS  DS    C              CLASS FROM JOB TEXT RECORD
SMFRTYPE DS    C              SMF RECORD LOG TYPE
CURSTEP  DS    CL8            CURRENT STEP NAME
DEFDPRTY DS    XL2            MAX DPRTY VALUE ALLOWED AFTER AUTH CHECK
         SPACE 3
CAMLST   CAMLST NAME,TDSN,,LOCAREA LOCATE PARAM AREA
         DS    0D
LOCAREA  DS    0CL266         LOCATE CAMLST WORK AREA
CAMLCNT  DS    H              VOLUMES IN LIST
CAMLUNIT DS    0CL4           UNIT TYPE FOR 1ST VOLUME
UCBTYP1  DS    CL1            UCB TYPE BYTE 1
UCBTYP2  DS    CL1            UCB TYPE BYTE 2
UCBTYP3  DS    CL1            UCB TYPE BYTE 3
*        X'80' IN UCBTYP3 INDICATES TAPE DEVICE
UCBTYP4  DS    CL1            UCB TYPE BYTE 4
CAMVOL   DS    CL6            1ST VOLSER IN DATA SET
         DS    CL254          REST OF WORK AREA
LASTUCB  DS    F              SAVE AREA FOR LAST UCB ADDR PROCESSED
         DS    CL1            EDIT FILL CHAR FOR MSG PREFIX
STEPMSG  DS    0CL78          STEP RESOURCE MESSAGE
         DS    X                                                    WEJ
STEPM    DS    0CL77
         DS    CL8                                        1- 8      WEJ
STEPMSTP DS    CL8                                        9-16      WEJ
         DS    CL1                                       17-17      WEJ
STEPMPST DS    CL8                                       18-25      WEJ
         DS    CL7                                       26-32      WEJ
STEPMTAP DS    CL6                                       33-38      WEJ
         DS    CL23                                      39-61      WEJ
STEPMSEC DS    CL6                                       62-69      WEJ
         DS    CL8                                       70-77      WEJ
JOBMSG   DS    0CL22          STEP RESOURCE MESSAGE
         DS    X                                                    WEJ
JOBM     DS    0CL21
         DS    CL21                                                 WEJ
JOBMCLAS DS    CL1                                                  WEJ
* ERRORMSG DS  0CL100         ERROR MESSAGE
*          DS  CL10           MESSAGE PREFIX
* ERRORM   DC  CL90' '
MSGPREF  DS    0CL11          ERROR MESSAGE PREFIX
         DS    C              EDIT FILL CHARACTER
BUFFER   DS    0CL100         JES2 MESSAGE AREA
         DS    CL10           REST OF MESSAGE PREFIX
MSGTEXT  DS    CL90           TEXT OF ERROR MESSAGE
MSGRPL   DS    19F            SKELETON RPL FOR OUTPUT MSG DATA SET
WTOLIST  DS    CL120          SET WTO LIST FORM
PROCTXT  DS    CL512          SAVE AREA FOR PROC CARD TEXT
CTGPL    DS    XL40           CATALOG MANAGEMENT PARAMETER LIST
         SPACE 3
ESTAEL   ESTAE STAEXIT,CT,XCTL=NO,PURGE=NONE,ASYNCH=NO,RECORD=YES,     X
               TERM=NO,MF=L
LESTAEL  EQU   *-ESTAEL
SVC26WRK DS    CL5000         SVC26 WORK AREA
GETSIZE  EQU   *-WORKAREA     LENGTH OF WORK AREA
         EJECT
SAVTABLE DSECT
***********************************************************************
*        THIS TABLE HAS 4 ENTRY TYPES                                 *
*            THE 1ST ENTRY IN THE TABLE WILL BE FOR THE JOB CARD      *
*            THE 2ND ENTRY IN THE TABLE WILL BE FOR THE 1ST EXEC CARD *
*            FOLLOWING THE EXEC ENTRY WILL BE ANY JDT ENTRIES FOR     *
*                THIS STEP.  THE OUTPUT JCL STMT IS A JDT ENTRY.      *
*            FOLLOWING THE JDT ENTRY WILL BE ANY DD ENTRIES FOR THE   *
*                STEP WHICH PASS OR CATLG PRIVATE DISK PACKS OR TAPES *
*            THE EXEC CARD ENTRY AND SUBSEQUENT DD ENTRIES WILL BE    *
*                REPEATED FOR ALL STEPS OF THE JOB.                   *
*            THE JDT CARD MAY BE IN ANY ORDER DEPENDING ON JCL.       *
***********************************************************************
ENTLEN   EQU   40             LENGTH OF EACH TABLE ENTRY
ENTRYTYP DS    C              TABLE ENTRY TYPE
TYPEND   EQU   0              SIGNIFIES END OF TABLE
TYPJOB   EQU   1              SIGNIFIES A JOB ENTRY
TYPEXEC  EQU   2              SIGNIFIES AN EXEC ENTRY
TYPEDD   EQU   4              SIGNIFIES A DD ENTRY
TYPEJDT  EQU   8              SIGNIFIES A JDT ENTRY
***********************************************************************
*                                                                     *
*                      J O B                                          *
*                                                                     *
***********************************************************************
JENTRY   DS    0CL39          JOB STATEMENT ENTRY
JNAME    DS    CL8            JOB NAME
JPGMRNM  DS    CL9            PROGRAMMER NAME (1ST 9  BYTES ONLY)   WEJ
* JINDEV DS    CL8    WILL USE JCT INPUT DEVICE
JACCTNO  DS    CL7            ACCOUNT NUMBER (1ST ACCT INFO FIELD)  WEJ
JACCTLEN DS    C              ACCOUNT NUMBER LENGTH
JLIBIND  DS    X              JOB HAD REGION
JREGIONK EQU   4              REGION SPECIFIED IN 'K'
JREGION  DS    H              STEP REGION SIZE
         ORG   JENTRY
***********************************************************************
*                                                                     *
*                     E X E C                                         *
*                                                                     *
***********************************************************************
EENTRY   DS    0CL39          EXEC STATEMENT ENTRY
EJSTEP   DS    CL8            JOB STEP NAME
EPSTEP   DS    CL8            PROC STEP NAME
EPGMNM   DS    CL8            PGM NAME
ELIBIND  DS    C              STEP HAD JOBLIB OR STEPLIB
ESTEPLIB EQU   1              STEPLIB PRESENT
EJOBLIB  EQU   2              JOBLIB PRESENT
EREGIONK EQU   4              REGION SPECIFIED IN 'K'
EREGION  DS    H              STEP REGION SIZE
ETAPES   DS    H              TAPE UNITS USED IN STEP
EPRIVS   DS    H              PRIV UNITS USED IN STEP
ECARDNO  DS    F              CARD NUMBER OF THIS STATEMENT
         ORG   JENTRY
***********************************************************************
*                                                                     *
*                       D D                                           *
*                                                                     *
***********************************************************************
DENTRY   DS    0CL39          DD STATEMENT ENTRY
DDDN     DS    CL8            DDNAME
DTYPE    DS    C              TYPE OF UNIT FOR THIS FILE
DTAPE    EQU   2              UNIT = TAPE
DPRIV    EQU   4              UNIT = PRIV OR PRIV-1
DDSN     DS    CL24           DSN FOR THIS FILE (1ST 24 CHARS ONLY)
DVOLSER  DS    CL6            FIRST VOL/SER OF DATA SET
         ORG   JENTRY
***********************************************************************
*                                                                     *
*                     J D T                                           *
*                                                                     *
***********************************************************************
JDENTRY  DS    0CL39          JDT STATEMENT ENTRY
JDVERB   DS    CL8            JDT VERB NAME
JDLABEL  DS    CL8            JDT VERB LABEL
JDSTEP   DS    CL8            STEP JDT VERB WAS IN
JDCLASS  DS    C              CLASS PRESENT ON OUTPUT STATEMENT
         EJECT
***********************************************************************
*        DESCRIPTION OF THE 16 BYTE WORK AREA PROVIDED BY THE CALLER  *
*            OF EXIT6                                                 *
***********************************************************************
EXITWORK DSECT
EXWKPTR1 DS    A
         DS    XL12
         EJECT
SMFDSECT DSECT
         COPY  SMF247                                               WEJ
         ORG   SMFDSECT                                             WEJ
         COPY  SMF248                                               WEJ
J2XIT06  CSECT ,                                                    WEJ
        $MODEND
         END
