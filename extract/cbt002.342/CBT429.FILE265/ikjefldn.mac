**  THE LOGON PREPROMT EXIT SYSTEM PROVIDES CONTROLS AND             **
**  DOCUMENTATION THAT THE DEFAULT VERSION FROM IBM DOES NOT         **
**  HAVE. IN GENERAL THE ENHANCEMENTS FALL INTO 4 GROUPS:            **
**                                                                   **
**   1. IMPROVED OUTPUT INFORMATION                                  **
**   1.1  ADDRESS, ROOM, PROGRAMMER NAME IN                          **
**        // OUTPUT CARD                                             **
**   1.2  ABILITY TO CHANGE INFORMATION ON MENU                      **
**                                                                   **
**   2. IMPROVED CONTROL OF USERID                                   **
**   2.1  CPU TIME LIMIT                                             **
**   2.2  TERMINAL CONTROL/LOGGING                                   **
**                                                                   **
**   3. DATA TRACKING                                                **
**   3.1  LAST LOGON TIME/TERMINAL                                   **
**                                                                   **
**   4. SPECIAL USER CONTROLS                                        **
**   4.1  GROUP AND DIVISIONAL QUOTAS                                **
**   4.2  "SPECIAL" USER PRIVILEDGES                                 **
**   4.2.1   ANY PROCEDURE NAME                                      **
**   4.2.2   ARBITRARY JCL                                           **
**                                                                   **
**                                                                   **
**  REQUIREMENTS TO USE THIS SYSTEM ARE TO BE AT THE TSO/E V2.3      **
**  LEVEL AND THE MVS LEVEL REQUIRED TO SUPPORT TSO/E V2.3           **
**  THE FOLLOWING APARS/PTFS MUST ALSO BE INSTALLED:                 **
**                                                                   **
**   OY48170  -  DOC CHANGE - TO EXIT N1 WITHOUT CALLING N2, SET     **
**                            THE "NOPROMPT" SWITCH AND RESET THE    **
**                            "INVOKE IKJEFLN2" SWITCH. (0X250)      **
**                                                                   **
**   OY47673  -  UY72068  -  N1 & N2 PARM LIST TERMINATION BITS ON   **
**                           TOO EARLY IN PARM LIST. (9X440) <---    **
**                                                                   **
**   OY49044  -  UY75066  -  SECOND PASS PROMPT IGNORES DATA IN      **
**                           PARM LIST. (9X441)                      **
**                                                                   **
**   OY48881  -  UY75066  -  IKJEFLN2 NOT PASSED TGET BUFFER         **
**                           AS DOCUMENTED. (0X042)                  **
**                                                                   **
**   OY48837  -  UY74066  -  IKJEFLD3 CANNOT PASS BACK NEW BUFFER    **
**                           AREA FOR JCL AS DOCUMENTED. (0X043)     **
**                                                                   **
**   OY48687  -  UY74377  -  IF PROCNAME LOCKED BY IKJEFLN2,         **
**                           PSCB UNIT AND REGION SIZE ARE SET TO    **
**                           GARBAGE. (0X148)                        **
**                                                                   **
**   OY49074  -  UY75066  -  TGET BUFFER OVERLAID IF USER FIELDS     **
**                           ARE USED ON PANEL. (7X280)              **
**                                                                   **
**   OY49409  -  UY75725  -  IKJEFLD1 SETS COMMAND BUFFER LENGTH     **
**                           WITH NEW CONTENTS PER DOCUMENTATION,    **
**                           LENGTH IGNORED. (7X279)                 **
**                                                                   **
**   OY51123  -  UY76492  -  0C7 AFTER UY74377 ATTEMPTING TO TAKE    **
**                           NULL REGION VALUE TO INTEGER. (9X377)   **
**                                                                   **
**   OY51130  -  UY76492  -  TGET BUFFER LENGTH ALWAYS SET TO 4.     **
**                           (9X379)                                 **
**                                                                   **
         EJECT
**                                                                   **
**  THE FOLLOWING IS THE NEW FORMAT OF THE LOGON COMMAND.            **
**  IT MAY BE ENTERED EITHER FROM TSO ITSELF, OR FROM VTAM.          **
**                                                                   **
**                                                                   **
**       LOGON   'ID'                    ×--                         **
**               ACCT('ACCOUNT')         ×                           **
**               MAIL/NOMAIL             ×  IBM DEFINED PARMS        **
**               NOTICES/NONOTICES       ×                           **
**               PROC('PROCEDURE')       ×                           **
**               SIZE('REGION SIZE')     ×--                         **
**                                                                   **
**                                                           ON SCR  **
**               ADDRESS('ADDRESS')            ×--               X   **
**               COPIES('COPIES')              ×                 X   **
**               FORMS('FORM')                 ×                 X   **
**               JCL                           ×                 X   **
**               LINECT('LINECT')              ×  BFG PARMS      X   **
**               LISTINFO                      ×                 X   **
**               MSGCLASS('MSGCLASS')          ×                 X   **
**               MSGLEVEL('MSGLEVEL')          ×                 X   **
**               NAME('NAME')                  ×                     **
**               PHONE('PHONE NUMBER')         ×                     **
**               PROGNAME('PROGRAMMER NAME')   ×                 X   **
**               ROOM('ROOM')                  ×                 X   **
**               TIME('TIME')                  ×--               X   **
**         OR                                                        **
**       LOGON   'ID'  RECONNECT                                     **
         EJECT
**                                                                   **
**       CURRENT USE OF THE SYS1.UADS DATASET (NOW DATABASE)         **
**                                                                   **
**   THIS EXIT IMPLEMENTS 3 OTHER TYPES OF MEMBERS IN THE UADS DATA- **
**   SET.  NONE OF THE IBM RECORDS ARE MODIFIED TO PRESERVE SAFETY.  **
**   THE NEW RECORDS ARE AS FOLLOWS:                                 **
**                                                                   **
**   ALL MEMBERS ENDING WITH '$':                                    **
**         - MEMBER NAME IS USERID$                                  **
**         - CONTAINS INFORMATION ON THE USER: USERID                **
**                                             NAME                  **
**                                             PHONE                 **
**                                             ADDRESS               **
**                                             D/T LASTON            **
**                                             D/T PASSWORD CHANGED  **
**                                             MAX CPU TIME ALLOWED  **
**                                             DEFAULT CPU TIME      **
**                                             PROGRAMMER NAME - JCL **
**                                             FORMS - JCL           **
**                                             ROOM - JCL            **
**                                             LINECT - JCL          **
**                                                                   **
**                                                                   **
**   ALL MEMBERS BEGINNING WITH '#':                                 **
**         - MEMBER NAME '#@@@@@@@@' IS NAME OF GLOBAL DEFAULT       **
**           RESTRICTION MEMBER. THIS MEMBER WILL BE USED IF         **
**           NO OTHER MEMBER NAME IS FOUND                           **
**         - MEMBER NAME #TERMID@@@ WHERE THE TERMINAL NAME IS       **
**           TRUNCATED AND PADDED OUT WITH "@" IS RESTRICTION        **
**           MEMBER FOR GROUPS OF TERMINALS.                         **
**           EX.  #PCI00V     IF EXISTS WILL BE USED NEXT            **
**                #PCI00@@    IF EXISTS WILL BE USED NEXT            **
**                #PCI0@@@    IF EXISTS WILL BE USED NEXT            **
**                #PCI@@@@         ""                                **
**                #PC@@@@@         ""                                **
**                #P@@@@@@         ""                                **
**                #@@@@@@@         ""                                **
**           THE FIRST ONE IN THE ABOVE LIST WILL BE USED            **
**         - MEMBER NAME IS #TERMID                                  **
**         - CONTAINS RESTRICTIONS ON USE OF THIS TERMINAL.          **
**           CURRENT SYNTAX (KEYVAL):                                **
**                                                                   **
**              USER(ID,ID,...ID)   1 TO 9 VALID USER IDS            **
**                                  CAN BE SPECIFIED AS SUBSTRING    **
**                                  NOTATION AND MUST BE IN QUOTES   **
**                                  IF SO.  EX:                      **
**                                                                   **
**                                      USER('S(1)',COOK,'T(3)')     **
**                                                                   **
**                                  ALLOWS ID COOK, ANY ID STARTING  **
**                                  WITH 'S', OR ANY ID WITH 'T' AS  **
**                                  THE THIRD CHARACTER.             **
**                                                                   **
**              TIME(HHMM,HHMM)     TIME TERMINAL USE IS ALLOWED     **
**                                                                   **
**              ASKBACK(LIMIT)      INVOKE ATARI ASKBACK PROCEDURE   **
**                                  WITH TIME LIMIT OF 'LIMIT'       **
**                                  SECONDS                          **
**                                                                   **
**              SMF × CONSOLE       LOCATION WHERE VIOLATIONS        **
**                                  ARE TO BE REPORTED.              **
**                                                                   **
**              LOG                 IF SUCCESSFUL THEN LOG MESSAGE   **
**                                  TO EITHER SMF OR CONSOLE IF      **
**                                  SPECIFIED                        **
**                                                                   **
**              REJECT              FAIL ANY ATTEMPT TO LOGON        **
**                                  WITH THIS TERMINAL               **
**                                                                   **
**                                                                   **
**   ASKBACK MEMBER:                                                 **
**         - MEMBER NAME IS 'ASKBACK'                                **
**         - CONTAINS THE EXPECTED ANSWER CODE TO BE ENTERED FROM    **
**           THE TERMINAL.  CURRENT SYNTAX (KEYVAL):                 **
**                                                                   **
**                       ×-   -×                                     **
**               X(VALUE ×,PROC×)  WHERE 'X' IS THE FIRST CHARACTER  **
**                       ×-   -×   OF A USERID.                      **
**                                 'VALUE' IS THE PASSWORD EXPECTED  **
**                                 BACK.                             **
**                                 'PROC' IS THE PROCEDURE NAME TO   **
**                                 BE USED FOR THE JCL (OVERRIDES    **
**                                 ANY SPECIFIED BY USER.            **
**                                                                   **
**                                                                   **
         EJECT
         MACRO
&NAME    PARM  &ID
&NAME    LA    R1,&ID
         L     R15,=A(GPENTRY)     GET ENTRY ADDRESS
         BALR  R14,R15             GO DO FUNCTION
         MEND
         MACRO
&NAME    INFO  &ID
&NAME    L     R1,=A(&ID)
         L     R15,=A(FINDINFO)    GET ENTRY ADDRESS
         BALR  R14,R15             GO DO FUNCTION
         MEND
         MACRO
&NAME    SUBENTRY
&NAME    SAVE  (14,12),,&NAME
         LA    R15,72(,R13)        GET TO NEXT SAVE AREA
         ST    R13,4(,R15)         CHAIN THEM
         LR    R13,R15             SET NEW SAVE AREA
         MEND
         MACRO
&NAME    SUBEXIT
&NAME    L     R13,4(,R13)         POINT AT PREV SAVE AREA
         L     R14,12(,R13)        GET RETURN ADDRESS
         LM    R2,R12,28(R13)      GET REST OF REGS
         BSM   0,R14               EXIT AND RESTORE MODE
         MEND
         TITLE 'IKJEFLD1 - LOGON PRE-PROMPT EXIT'
***********************************************************************
*                                                                     *
* ROUTINE NAME -                                                      *
*        IKJEFLD1                                                     *
*                                                                     *
* FUNCTION -                                                          *
*        LOGON PREPROMPT EXIT                                         *
*                                                                     *
* OPERATION -                                                         *
*        THE FOLLOWING FUNCTIONS ARE DONE:                            *
*               1. DO HOUSEKEEPING                                    *
*               2. PARSE LOGON COMMAND                                *
*               3. SAVE ANY INFORMATION ON BFG OPERANDS FROM PARSE    *
*               4. REBUILD COMMAND BUFFER W/O BFG OPERANDS            *
*               5. CLEANUP AND RETURN                                 *
*                                                                     *
* ENTRY POINTS -                                                      *
*        IKJEFLD1                                                     *
*                                                                     *
* EXTERNAL REFERENCES -                                               *
*    NONE                                                             *
*                                                                     *
* INPUT -                                                             *
*    NONE                                                             *
*                                                                     *
* OUTPUT -                                                            *
*    NONE                                                             *
*                                                                     *
* REGISTER USAGE -                                                    *
*        R9  = DSAD1 AREA                                             *
*        R10 = ORIG PARM LIST PTR                                     *
*        R11 = EXIT-TO-EXIT SAVE AREA                                 *
*        R12 = BASE                                                   *
*        R13 = SAVE AREA                                              *
*                                                                     *
* MESSAGES -                                                          *
*    NONE                                                             *
*                                                                     *
* COMMENTS -                                                          *
*    NONE                                                             *
*                                                                     *
***********************************************************************
         EXTRN IKJEXIT
IKJEFLD1 CSECT
IKJEFLD1 AMODE 31
IKJEFLD1 RMODE 24
         SAVE  (14,12),,IKJEFLD1_&SYSDATE._&SYSTIME
         LR    R12,R15             SET NEW BASE REGISTER
         LR    R10,R1              SAVE PARM LIST
         USING IKJEFLD1,R12        SETUP ADDRESSABILITY
         EJECT
***********************************************************************
*                                                                     *
*        GET THIS EXIT WORK AREA/SAVE AREA                            *
*                                                                     *
***********************************************************************
         GETMAIN R,LV=DSAD1L,SP=10
         ST    R13,4(,R1)          SAVE ADDRESS
         LR    R13,R1              SET NEW SAVE AREA
         LR    R9,R1               SET NEW SAVE AREA
         USING DSAD1,R9
         EJECT
***********************************************************************
*                                                                     *
*        GET THE MAIN EXIT-TO-EXIT COMMUNICATIONS AREA                *
*                                                                     *
***********************************************************************
         GETMAIN R,LV=EXTEXL,SP=21
         LR    R11,R1
         USING EXTEX,R11
         MVC   ETID,=CL7'EXTOEX'   SET EYEBALL FLAG
         PARM  D1EXTOEX           GET EXIT TO EXIT PARM ENTRY
         MVC   ETHSKEY(12),0(R15)  SAVE ORIG KEY
         ST    R11,8(,R15)         SAVE ADDRESS OF AREA
         MVC   0(8,R15),=A(2,EXTEXL) SET KEY, LENGTH, AND SUBPOOL
         MVC   ETMYKEY(12),0(R15)  SAVE MY NEW KEY
         EJECT
***********************************************************************
*                                                                     *
*        DETERMINE IF TEST MODE, SET INDICATORS                       *
*                                                                     *
***********************************************************************
D1$RSTRT DS    0H                  RESTART FROM ATTENTION
         XC    ETTEST,ETTEST
         PARM  D1CMDBFR
         CLI   6(R1),C'#'          IS THIS TEST ID
         BE    D1$T1
         CLI   6(R1),C'%'          IS THIS TEST ID
         BE    D1$T2
         B     D1$T10              IF NOT A TEST THE LEAVE AT ZERO
*
**  '#'  INVOKE TEST VERSION OF EXITS
*
D1$T1    MVI   ETTEST,255          FLAG AS TEST
         MVI   6(R1),C' '          CLEAR INDICATOR
         PARM  D1EXTOEX
         MVC   0(12,R15),ETHSKEY   SET TO ORIGINAL
         LR    R1,R10              GET PARM LIST
         LINK  EP=ZZZEFLD1,ERRET=D1$T1A   CALL TEST VERSION
         LR    R2,R15              SAVE RETURN CODE
         PARM  D1EXTOEX
         MVC   ETHSKEY(12),0(R15)  SAVE THE TEST PGMS STUFF
         MVC   0(12,R15),ETMYKEY   MOVE MY STUFF BACK IN
         B     D1$BYE              RETURN WITH TEST EXIT CODE
D1$T1A   DS    0H                  TEST MODULE NOT PRESENT
         MVI   ETTEST,0            RESET TEST FLAG
         WTO   MF=(E,NOTEST)       TELL CONSOLE
         LH    R0,NOTEST           GET LENGTH
         SH    R0,=H'4'            GET TRUE MESSAGE LENGTH
         LA    R1,NOTEST+4         GET MESSAGE ADDRESS
         TPUT  (1),(0),R           TELL USER
         PARM  D1EXTOEX
         MVC   0(12,R15),ETMYKEY   MOVE MY STUFF BACK IN
         B     D1$T10              CONTINUE NORMALLY
*
**  '%'  INVOKE THIS VERSION WITH FULL REPORTING (IKJEXIT)
*
D1$T2    MVI   ETTEST,128          FLAG AS TEST
D1$T9    MVI   6(R1),C' '          CLEAR INDICATOR
D1$T10   DS    0H
         EJECT
***********************************************************************
*                                                                     *
*        MAINLINE                                                     *
*                                                                     *
***********************************************************************
         SPACE 3
*               1. DO HOUSEKEEPING
         BAS   R14,D1$HSKP
         LTR   R15,R15
         BNZ   D1$DENY
*               2. PARSE LOGON COMMAND                                *
         BAS   R14,SCAN
         LTR   R15,R15
         BNZ   D1$DENY
         BAS   R14,PARSE
         LTR   R15,R15
         BNZ   D1$DENY
*               3. SAVE ANY INFORMATION ON BFG OPERANDS FROM PARSE    *
         BAS   R14,D1$SVINF
         LTR   R15,R15
         BNZ   D1$DENY
*               4. REBUILD COMMAND BUFFER W/O BFG OPERANDS            *
         BAS   R14,D1$MKCMD
         LTR   R15,R15
         BNZ   D1$DENY
         EJECT
***********************************************************************
*                                                                     *
*        FREE THIS EXIT WORK AREA AND EXIT ROUTINE                    *
*                                                                     *
***********************************************************************
D1$EXIT  DS    0H
         SR    R2,R2               CLEAR RETURN CODE
D1$BYE   DS    0H
*               5. CLEANUP AND RETURN                                 *
         BAS   R14,D1$CLEAN
*
         LR    R1,R13
         L     R13,4(,R13)
         FREEMAIN R,LV=DSAD1L,A=(1),SP=10
         LR    R15,R2              SET RETURN CODE
         L     R14,12(,R13)        RESTORE REGISTERS
         LM    R0,R12,20(R13)      RESTORE REGISTERS
         BSM   0,R14               RETURN
D1$DENY  LA    R2,16               DENY LOGON
         B     D1$BYE
         EJECT
***********************************************************************
*                                                                     *
* ROUTINE NAME -                                                      *
*    D1$HSKP                                                          *
*                                                                     *
* FUNCTION -                                                          *
*    PERFORMS HOUSEKEEPING FUNCTIONS FOR LOGONXIT.                    *
*                                                                     *
* OPERATION -                                                         *
*    1) ISSUES ESTAE.  IF ESTAE IS UNSUCCESSFUL, TELLS TSO USER AND   *
*       DENIES LOGON.                                                 *
*    2) MOVES STIMER EXIT TO DYNAMIC AREA AND ISSUES STIMER.
*    3) ISSUES STAX.  IF STAX IS UNSUCCESSFUL, TELLS TSO USER AND
*       DENIES LOGON.
*    4) CHECKS TO SEE IF THIS IS 'USERID ENQ FAIL'.  IF SO, TELLS TSO *
*       USER AND DENIES LOGON.                                        *
*    5) CHECKS TO SEE IF THIS IS 'RESOURCE FAILURE'.  IF SO, TELLS TSO*
*       USER AND DENIES LOGON.                                        *
*    6) CHECKS TO SEE IF THIS IS 'ABEND'.  IF SO, TELLS TSO USER AND  *
*       DENIES LOGON.                                                 *
*    7) ATTEMPTS TO OPEN SYS1.UADS.  IF OPEN IS UNSUCCESSFUL, TELLS   *
*       TSO USER AND DENIES LOGON.                                    *
*    8) GETS STORAGE FOR UADS DATA BLOCKS.                            *
*    9) BUILDS CBUF AND CPPL.                                         *
*   10) GET APF AUTHORIZED AND GET TERMINAL ID FROM TSB.
*   11) CLEAR TERMINAL BUFFERS.
*   12) IF DISPLAY TERMINAL, CLEAR THE SCREEN.
*   13) DETERMINE IF RACF, OR EQUIVALENT, IS ACTIVE
*   14) RETURNS TO THE MAINLINE.
*                                                                     *
* ENTRY POINTS -                                                      *
*    D1$HSKP                                                          *
*                                                                     *
* EXTERNAL REFERENCES -                                               *
*    GETAUTH                                                          *
*                                                                     *
* INPUT -                                                             *
*    NONE                                                             *
*                                                                     *
* OUTPUT -                                                            *
*    NONE                                                             *
*                                                                     *
* MESSAGES -                                                          *
*    'ESTAE UNSUCCESSFUL - RC=NNNN'                                   *
*    'STAX UNSUCCESSFUL - RC=NNNN'
*    'USERID CURRENTLY LOGGED ON'                                     *
*    'RESOURCE FAILURE. CONTACT MEMPHIS DATA CENTER'                  *
*    'LOGON ABEND. CONTACT MEMPHIS TECHNICAL SUPPORT'                 *
*    'OPEN OF SYS1.UADS UNSUCCESSFUL'                                 *
*                                                                     *
***********************************************************************
         EJECT
D1$HSKP DS     0H
         SUBENTRY ,
         EJECT
********************************************************************
*
*       GET TIME AND DATE OF ENTRY
*
********************************************************************
         TIME  DEC                 GET TIME AND DATE
         STM   R0,R1,ETLTIME       SAVE TIME AND DATE
         EJECT
***********************************************************************
*                                                                     *
*       CALL MOTHER TASK TO SETUP STIMER.                             *
*                                                                     *
***********************************************************************
*        XC    STREQECB,STREQECB   CLEAR RESPONSE ECB
*        L     R0,LOGTIME          GET OVERALL LOGON TIME
*        POST  MTREQECB,(0)        WAKE UP MOTHER TO SET
*        WAIT  ECB=STREQECB        WAIT FOR COMPLETION
         EJECT
***********************************************************************
*                                                                     *
*       ISSUES ESTAE.  IF ESTAE IS UNSUCCESSFUL, TELLS TSO USER AND   *
*       DENIES LOGON.                                                 *
*                                                                     *
***********************************************************************
         MVC   D1@ESTAE(LGESTAE),LESTAE COPY ESTAE PARM LIST
         L     R3,=A(GP$ESTAE)     GET ADDRESS OF ESTAE EXIT
         LA    R4,ETESTPM          GET ADDRESS OF ESTAE PARMS
         LA    R1,D1$RETRY         POINT TO RETRY ROUTINE
         ST    R1,0(,R4)           SAVE ADDRESS OF RETRY ROUTINE
         ST    R9,4(,R4)           SAVE PHASE DSA ADDRESS
         ST    R11,8(,R4)          SAVE EXTOEX ADDRESSS
         ST    R10,12(,R4)         SAVE INPUT ADDRESSS
         ESTAE (3),PARAM=(4),MF=(E,D1@ESTAE) ESTABLISH ESTAE
         LTR   R15,R15             WAS ESTAE SUCCESSFUL
         BNZ   D1$HNSTA            NO - GO GIVE MESSAGE
         EJECT
*********************************************************************
*
*       ISSUES STAX.  IF STAX IS UNSUCCESSFUL, TELLS TSO USER AND
*       DENIES LOGON.
*
*********************************************************************
         XC    D1@STAX1(LSTAX),D1@STAX1 CLEAR DUMMY STAX PARM LIST
         STAX  D1$DSTAX,                                               X
               USADDR=ETESTPM,REPLACE=NO,MF=(E,D1@STAX1)
         LTR   R15,R15             WAS STAX SUCCESSFUL
         BNZ   D1$HNSTX            NO - GO GIVE MESSAGE
         XC    D1@STAX2(LSTAX),D1@STAX2 YES - CLEAR STAX PARM LIST
         PARM  D1CMDBFR            GET ADDRESS OF INPUT BUFFER DESC
         LR    R2,R1               SAVE ADDRESS
         LA    R3,252              GET MAX LENGTH
*                                    (D1$RSTAX WILL SET REAL LENGTH)
         STAX  D1$RSTAX,OBUF=(STAXOBUF,L'STAXOBUF),                    X
               IBUF=((R2),(R3)),                                       X
               USADDR=ETESTPM,REPLACE=NO,MF=(E,D1@STAX2)
         LTR   R15,R15             WAS STAX SUCCESSFUL
         BNZ   D1$HNSTX            NO - GO GIVE MESSAGE
         EJECT
***********************************************************************
*                                                                     *
*       CHECKS TO SEE IF THIS IS 'USERID ENQ FAIL'.  IF SO, TELLS TSO *
*       USER AND DENIES LOGON.                                        *
*                                                                     *
***********************************************************************
         PARM  D1SWITCH            GET CALLER'S R1
         TM    0(R1),KBIT0         WAS THIS 'USERID ENQ FAIL'
         BO    D1$HDUPU            YES - GO GIVE MESSAGE
         SPACE 2
***********************************************************************
*                                                                     *
*       CHECKS TO SEE IF THIS IS 'RESOURCE FAILURE'.  IF SO, TELLS TSO*
*       USER AND DENIES LOGON.                                        *
*                                                                     *
***********************************************************************
         TM    0(R1),KBIT2         WAS THIS 'RESOURCE FAILURE'
         BO    D1$HRESC            YES - GO GIVE MESSAGE
         SPACE 2
***********************************************************************
*                                                                     *
*       CHECKS TO SEE IF THIS IS 'ABEND'.  IF SO, TELLS TSO USER AND  *
*       DENIES LOGON.                                                 *
*                                                                     *
***********************************************************************
         TM    1(R1),KBIT6         WAS THIS 'ABEND'
         BO    D1$HABND            YES - GO GIVE MESSAGE
         EJECT
***********************************************************************
*                                                                     *
*       BUILDS CBUF AND CPPL.                                         *
*                                                                     *
***********************************************************************
         PARM  D1CMDBFR            GET ADDRESS OF COMMAND BUFFER
         L     R14,4(,R15)         GET LENGTH OF INPUT BUFFER
         LA    R14,4(,R14)         ADD IN LL00 LENGTH
         STH   R14,D1@CBUF+CBUFLEN-CBUF PUT IN CBUF
         XC    D1@CBUF+CBUFOFFS-CBUF(2),D1@CBUF+CBUFOFFS-CBUF 0 OFFSET
         MVC   D1@CBUF+CBUFTEXT-CBUF(252),0(R1) COPY TO CMD BUFFER
         LA    R1,D1@CBUF          POINT AT BUFFER
         ST    R1,D1@CPPL+CPPLCBUF-CPPL PUT IN CPPL
         PARM  D1UPT               GET ADDRESS OF UPT
         ST    R1,D1@CPPL+CPPLUPT-CPPL PUT IN CPPL
         PARM  D1PSCB              GET ADDRESS OF MY PSCB
         ST    R1,D1@CPPL+CPPLPSCB-CPPL PUT IN CPPL
         PARM  D1ECT               GET ADDRESS OF ECT
         ST    R1,D1@CPPL+CPPLECT-CPPL PUT IN CPPL
         EJECT
*********************************************************************
*
*       GET APF AUTHORIZED AND GET TERMINAL ID FROM TSB.
*
*********************************************************************
         MVC   ETTERMID(2),=H'8'
         MVC   ETTERMID+2(8),=CL8'UNKNOWN' ASSUME 'UNKNOWN'
         TESTAUTH FCTN=1,STATE=YES,RBLEVEL=1 AUTHORIZED??
         LTR   R15,R15             CHECK RETURN CODE
         BNZ   D1$HGTRM            NO - LEAVE UNKNOWN
         L     R15,PSAAOLD-PSA     YES - GET ADDRESS OF MY ASCB
         L     R3,ASCBTSB-ASCB(,R15) GET ADDRESS OF MY TSB
         MODESET MF=(E,KEYZERO)    GET KEY 0 FOR MOVE FROM TSB
         MVC   ETTERMID+2(8),TSBTRMID-TSB(R3) COPY TERMINAL TO DYN.
         MODESET MF=(E,NONZERO)    RETURN TO USER KEY
D1$HGTRM DS    0H
         LH    R1,ETTERMID         GET LENGTH
         LA    R2,ETTERMID+2+7     POINT AT LAST CHAR
D1$HGTB1 CLI   0(R2),C' '          IS THIS A BLANK
         BNE   D1$HGTB2            NO, SO HAVE LENGTH
         BCTR  R2,0                BACK UP POINTER
         BCT   R1,D1$HGTB1         DECR LENGTH AND CONTINUE
D1$HGTB2 STH   R1,ETTERMID         SAVE CORRECT LENGTH
         EJECT
*********************************************************************
*
*       GET ASID FOR LATER.
*
*********************************************************************
         L     R15,PSAAOLD-PSA     GET ADDRESS OF MY ASCB
         UNPK  D1@WORK1(5),ASCBASID-ASCB(3,R15) UNPACK
         L     R1,=A(TRTABLE-240)
         TR    D1@WORK1(4),0(R1)   CONVERT TO EBCDIC
         MVC   ETASIDE,D1@WORK1    COPY TO DYNAMIC AREA
         EJECT
*********************************************************************
*
*       CLEAR TERMINAL BUFFERS.
*
*********************************************************************
         TCLEARQ INPUT             CLEAR TERMINAL BUFFERS
         EJECT
*********************************************************************
*
*       IF DISPLAY TERMINAL, CLEAR THE SCREEN.
*
*********************************************************************
         GTSIZE ,                  DETERMINE TERMINAL TYPE
         LTR   R0,R0               WAS THIS A DISPLAY
         BZ    D1$HCLR             NO - CONTINUE
         LA    R0,L'CLRSCRN        YES - GET LENGTH OF MESSAGE
         LA    R1,CLRSCRN          GET ADDRESS OF MESSAGE
         ICM   R1,B'1000',=X'03'   INDICATE FULLSCR TPUT
         TPUT  (1),(0),R           ISSUE TPUT TO CLEAR SCREEN
         OI    ETBITS2,ET2DSPLY    INDICATE DISPLAY TERMINAL
D1$HCLR  DS    0H
         SR    R15,R15             SET GOOD RETURN CODE
         EJECT
***********************************************************************
*                                                                     *
*       RETURNS TO THE MAINLINE.                                      *
*                                                                     *
***********************************************************************
D1$HEXIT DS    0H
         SUBEXIT ,
         EJECT
***********************************************************************
*                                                                     *
*       INFORM USER THAT ESTAE RETURN CODE WAS NOT ZERO AND DENY      *
*       LOGON.                                                        *
*                                                                     *
***********************************************************************
D1$HNSTA DS    0H                  NON-ZERO RETURN CODE FROM ESTAE
         LR    R2,R15              PROTECT RETURN CODE
         MVC   D1@MSGAR(L'ESTAEMSG),ESTAEMSG COPY MESSAGE
         CVD   R15,D1@WORK1        CONVERT TO DECIMAL
         OI    D1@WORK1+7,X'0F'    FIX SIGN
         UNPK  D1@WORK1(5),D1@WORK1+5(3) UNPACK
         MVC   D1@MSGAR+24(4),D1@WORK1+1 MOVE INTO MESSAGE
         LA    R0,L'ESTAEMSG       GET LENGTH OF MESSAGE
         LA    R1,D1@MSGAR         POINT TO MESSAGE
         TPUT  (1),(0),R           ISSUE MESSAGE
         LR    R15,R2              RESTORE RETURN CODE
         OI    ETBITS1,ET1DENY     DENY LOGON
         B     D1$HEXIT            EXIT
         EJECT
*********************************************************************
*
*       INFORM USER THAT STAX RETURN CODE WAS NOT ZERO AND DENY
*       LOGON.
*
*********************************************************************
D1$HNSTX DS    0H                  NON-ZERO RETURN CODE FROM STAX
         LR    R2,R15              PROTECT RETURN CODE
         MVC   D1@MSGAR(L'STAXMSG),STAXMSG COPY MESSAGE
         CVD   R15,D1@WORK1        CONVERT TO DECIMAL
         OI    D1@WORK1+7,X'0F'    FIX SIGN
         UNPK  D1@WORK1(5),D1@WORK1+5(3) UNPACK
         MVC   D1@MSGAR+23(4),D1@WORK1+1 MOVE INTO MESSAGE
         LA    R0,L'STAXMSG        GET LENGTH OF MESSAGE
         LA    R1,D1@MSGAR         POINT TO MESSAGE
         TPUT  (1),(0),R           ISSUE MESSAGE
         LR    R15,R2              RESTORE RETURN CODE
         OI    ETBITS1,ET1DENY     DENY LOGON
         B     D1$HEXIT            EXIT
         EJECT
***********************************************************************
*                                                                     *
*       INFORM USER THAT USERID IN USE AND DENY LOGON.                *
*                                                                     *
***********************************************************************
D1$HDUPU DS    0H
         LA    R0,L'DUPUSER        GET LENGTH OF MESSAGE
         LA    R1,DUPUSER          POINT TO MESSAGE
         TPUT  (1),(0),R           INFORM USER
         OI    ETBITS1,ET1DENY     DENY LOGON
         LA    R15,4               SET RETURN CODE
         B     D1$HEXIT            AND EXIT
         EJECT
***********************************************************************
*                                                                     *
*       INFORM USER THAT LOGON HAD A RESOURCE FAILURE AND DENY LOGON. *
*                                                                     *
***********************************************************************
D1$HRESC DS    0H
         LA    R0,L'RESCFAIL       GET LENGTH OF MESSAGE
         LA    R1,RESCFAIL         POINT TO MESSAGE
         TPUT  (1),(0),R           INFORM USER
         OI    ETBITS1,ET1DENY     DENY LOGON
         LA    R15,4               SET RETURN CODE
         B     D1$HEXIT            AND EXIT
         EJECT
***********************************************************************
*                                                                     *
*       INFORM USER THAT LOGON HAD AN ABEND AND DENY LOGON.           *
*                                                                     *
***********************************************************************
D1$HABND DS    0H
         LA    R0,L'LOGABEND       GET LENGTH OF MESSAGE
         LA    R1,LOGABEND         POINT TO MESSAGE
         TPUT  (1),(0),R           INFORM USER
         OI    ETBITS1,ET1DENY     DENY LOGON
         LA    R15,4               SET RETURN CODE
         B     D1$HEXIT            AND EXIT
         TITLE 'IKJEFLD1 - CLEANUP RESOURCES'
*********************************************************************
*
* ROUTINE NAME -
*    D1$CLEAN
*
* FUNCTION -
*    PERFORMS CLEANUP FUNCTIONS.
*
* OPERATION -
*    1) CANCEL STIMER.
*    2) CANCEL STAX.
*    4) IF UADS WAS OPENED, CLOSE AND FREE BUFFER.
*    5) IF ANYTHING WAS ENQ'D ON, DEQ IT
*    6) IF LOGON IS TO BE DENIED, SET DISCONNECT INDICATOR AND WAIT
*       5 SECONDS IF THIS IS A DISPLAY TERMINAL TO GIVE THE USER
*       TIME TO READ THE DIAGNOSTICS.
*    7) IF ATTENTION WAS HIT, GO CHECK NEW COMMAND.
*   10) CANCEL ESTAE.
*
*
* ENTRY POINTS -
*    D1$CLEAN
*
* EXTERNAL REFERENCES -
*    NONE
*
* INPUT -
*    NONE
*
* OUTPUT -
*    NONE
*
* MESSAGES -
*    NONE
*
*********************************************************************
         SPACE 3
D1$CLEAN DS    0H                  RETURN TO CALLER
         SUBENTRY ,                PROTECT RETURN CODE
         EJECT
********************************************************************
*
*       CANCEL STIMER WITH MOTHER TASK.
*
********************************************************************
*        TM    ETBITS1,GABEND      HAS ABEND OCCURED
*        BO    CLNUP1              IF SO SKIP TTIMER CANCEL
*        XC    STREQECB,STREQECB   CLEAR ECB
*        L     R0,=A(X'FFFFFF')    MARK TO CANCEL
*        POST  MTREQECB,(0)        WAKE UP MOTHER
*        WAIT  ECB=STREQECB        WAIT TILL DONE
*LNUP1   DS    0H
         EJECT
*********************************************************************
*
*       CANCEL STAX.
*
*********************************************************************
         STAX  0                   CANCEL STAX
         STAX  0                   CANCEL STAX
         EJECT
*********************************************************************
*
*       IF LOGON IS TO BE DENIED, SET DISCONNECT INDICATOR AND WAIT
*       5 SECONDS IF THIS IS A DISPLAY TERMINAL TO GIVE THE USER
*       TIME TO READ THE DIAGNOSTICS.
*
*********************************************************************
         TM    ETBITS1,ET1DENY     IS LOGON TO BE DENIED
         BNO   D1$COK              NO - CONTINUE
         PARM  D1SWITCH            GET ADDRESS OF CONTROL SWITCHES
         OI    0(R1),KBIT3         INDICATE DISCONNECT
         GTSIZE ,                  DETERMINE TERMINAL TYPE
         LTR   R0,R0               WAS THIS A DISPLAY
         BZ    D1$CEND             NO - CONTINUE
         STIMER WAIT,DINTVL==C'00000500' - WAIT A LITTLE WHILE FIRST
         B     D1$CEND             THEN CONTINUE
D1$COK   DS    0H
         EJECT
*********************************************************************
*
*       IF ATTENTION WAS HIT, GO CHECK NEW COMMAND.
*
*********************************************************************
         TM    ETBITS1,ET1ATTN     WAS ATTENTION HIT
         BO    D1$CCHEK            YES - GO CHECK NEW COMMAND
         EJECT
*********************************************************************
*
*       IF DEBUGGING MODE, HANDLE DISPLAYS
*
*********************************************************************
D1$CEND  DS    0H
         TM    ETBITS3,ET3DEBUG    DEBUG IN PROGRESS??
         BZ    D1$C999             NOPE, SKIP CODE
         WTO   'IKJEFLD1: EXITING',ROUTCDE=(2)
         CLI   ETTEST,128
         BNE   D1$C999
         LR    R1,R10
         L     R15,=A(IKJEXIT+X'80000000')
         BASR  R14,R15
D1$C999  DS    0H
         EJECT
*********************************************************************
*
*       CANCEL ESTAE.
*
*********************************************************************
         ESTAE 0                   CANCEL ESTAE
         EJECT
********************************************************************
*
*       RETURN TO CALLER
*
********************************************************************
         SUBEXIT ,                 GET RETURN REG
         EJECT
*********************************************************************
*
*       IF COMMAND WAS NOT 'LOGON' DENY LOGON.  IF COMMAND WAS
*       'LOGON', REENTER LOGON EXIT WITH NEW COMMAND.
*
*********************************************************************
D1$CCHEK DS    0H
         BAS   R14,SCAN            CALL SCAN TO SEE IF 'LOGON'
         LTR   R15,R15             WAS THE NEW COMMAND 'LOGON'
         BZ    D1$CRENT            YES - REENTER
         PARM  D1SWITCH            GET ADDRESS OF CONTROL SW DESC
         OI    0(R1),KBIT3         INDICATE DISCONNECT
         B     D1$CEND             RETURN
D1$CRENT DS    0H
         ESTAE 0                   CANCEL ESTAE
         L     R13,4(,R13)         UNCHAIN SAVE AREAS
         LA    R0,D1@WORK1        GET POINTER TO AREA TO CLEAN
         LA    R1,DSAD1L-D1@WORK1+DSAD1  LENGTH TO CLEAR
         SLR   R4,R4               ZERO FROM ADDRESS
         SLR   R5,R5               ZERO FROM LENGTH
         MVCL  R0,R4               CLEAR DYNAMIC AREA
         LA    R0,EXTEX            GET POINTER TO AREA TO CLEAN
         LA    R1,EXTEXL           LENGTH TO CLEAR
         MVCL  R0,R4               CLEAR DYNAMIC AREA
         B     D1$RSTRT            REENTER
         TITLE 'IKJEFLD1 - SCAN COMMAND BUFFER'
***********************************************************************
*                                                                     *
* ROUTINE NAME -                                                      *
*    SCAN                                                             *
*                                                                     *
* FUNCTION -                                                          *
*    SCAN INPUT BUFFER.                                               *
*                                                                     *
* OPERATION -                                                         *
*    1) BUILDS CSPL AND CALLS IKJSCAN TO SCAN INPUT BUFFER.           *
*    2) IF SCAN IS UNSUCCESSFUL, TELLS TSO USER AND DENIES LOGON.     *
*    3) IF COMMAND IS NOT 'LOGON', TELLS TSO USER AND DENIES LOGON.   *
*    4) RETURNS TO THE MAINLINE.                                      *
*                                                                     *
* ENTRY POINTS -                                                      *
*    SCAN                                                             *
*                                                                     *
* EXTERNAL REFERENCES -                                               *
*    IKJSCAN                                                          *
*                                                                     *
* INPUT -                                                             *
*    COMMAND BUFFER.                                                  *
*                                                                     *
* OUTPUT -                                                            *
*    NONE                                                             *
*                                                                     *
* MESSAGES -                                                          *
*    'IKJSCAN UNSUCCESSFUL - RC=NNNN'                                 *
*    'COMMAND IS NOT 'LOGON''                                         *
*                                                                     *
***********************************************************************
         EJECT
SCAN     DS    0H
         SUBENTRY ,
         EJECT
***********************************************************************
*                                                                     *
*       BUILDS CSPL AND CALL IKJSCAN TO SCAN INPUT BUFFER.            *
*                                                                     *
***********************************************************************
         LA    R1,D1@CSPL          GET ADDRESS OF CSPL
         USING CSPL,R1             ESTABLISH ADDRESSABILITY TO CSPL
         MVC   CSPLUPT,D1@CPPL+CPPLUPT-CPPL COPY UPT ADDRESS
         MVC   CSPLECT,D1@CPPL+CPPLECT-CPPL COPY ECT ADDRESS
         LA    R15,D1@ECB          GET ADDRESS OF CP ECB
         ST    R15,CSPLECB         STORE CP ECB ADDRESS
         XC    D1@ECB,D1@ECB       CLEAR CP ECB
         LA    R15,D1@CSPFL        GET ADDRESS OF FLAGS
         ST    R15,CSPLFLG         STORE FLAG ADDRESS
         XC    D1@CSPFL,D1@CSPFL   CLEAR FLAGS - REQUEST SYNTAX CHECK
         LA    R15,D1@CSLOA        GET ADDRESS OF OUTPUT AREA
         ST    R15,CSPLOA          STORE OUTPUT AREA ADDRESS
         XC    D1@CSLOA,D1@CSLOA   CLEAR OUTPUT AREA
         MVC   CSPLCBUF,D1@CPPL+CPPLCBUF-CPPL COPY CMD BUFFER ADDRESS
         L     R15,CSPLCBUF        GET COMMAND BUFFER ADDRESS
         USING CBUF,R15            GET CBUF ADDRESSABILITY
         XC    CBUFOFFS,CBUFOFFS   RESET OFFSET FOR SCAN
         CALLTSSR EP=IKJSCAN,MF=(E,D1@CSPL) CALL IKJSCAN
         EJECT
***********************************************************************
*                                                                     *
*       IF SCAN IS UNSUCCESSFUL, TELLS TSO USER AND DENIES LOGON.     *
*                                                                     *
***********************************************************************
         LTR   R15,R15             WAS SCAN SUCCESSFUL
         BNZ   SCANBSCN            NO - GO ISSUE MESSAGE
         LA    R1,D1@CSLOA         YES - GET PTR TO SCAN OUTPUT AREA
         USING CSOA,R1             GET ADDRESSABILITY TO OUTPUT AREA
         EJECT
***********************************************************************
*                                                                     *
*       IF COMMAND IS NOT 'LOGON', TELLS TSO USER AND DENIES LOGON.   *
*                                                                     *
***********************************************************************
         TM    CSOAFLG,CSOAVWP+CSOAVNP VALID SYNTAX WITH/WITHOUT PARMS
         BZ    SCANBCMD            NO - BAD COMMAND
         CLI   CSOALNM+1,5         YES - IS COMMAND LENGTH 5 BYTES
         BNE   SCANLOGF            NO - MAY BE 'LOGOFF'
         L     R1,CSOACNM          YES - GET ADDRESS OF COMMAND NAME
         CLC   =C'LOGON',0(R1)     IS COMMAND NAME 'LOGON'
         BNE   SCANBCMD            NO - BAD COMMAND
         SLR   R15,R15             YES - SET RETURN CODE
         EJECT
***********************************************************************
*                                                                     *
*       RETURNS TO THE MAINLINE.                                      *
*                                                                     *
***********************************************************************
SCANEXIT DS    0H
         SUBEXIT ,
         EJECT
***********************************************************************
*                                                                     *
*       INFORM USER THAT IKJSCAN RETURN CODE WAS NOT ZERO AND DENY    *
*       LOGON.                                                        *
*                                                                     *
***********************************************************************
SCANBSCN DS    0H                  NON-ZERO RETURN CODE FROM IKJSCAN
         LR    R2,R15              PROTECT RETURN CODE
         MVC   D1@MSGAR(L'SCANMSG),SCANMSG COPY MESSAGE
         CVD   R15,D1@WORK1        CONVERT TO DECIMAL
         OI    D1@WORK1+7,X'0F'    FIX SIGN
         UNPK  D1@WORK1(5),D1@WORK1+5(3) UNPACK
         MVC   D1@MSGAR+26(4),D1@WORK1+1 MOVE INTO MESSAGE
         LA    R0,L'SCANMSG        GET LENGTH OF MESSAGE
         LA    R1,D1@MSGAR         POINT TO MESSAGE
         TPUT  (1),(0),R           ISSUE MESSAGE
         LR    R15,R2              RESTORE RETURN CODE
         OI    ETBITS1,ET1DENY     DENY LOGON
         DC    H'0'
         B     SCANEXIT            EXIT
         EJECT
***********************************************************************
*                                                                     *
*       INFORM USER THAT COMMAND WAS NOT 'LOGON' AND DENY LOGON.      *
*                                                                     *
***********************************************************************
SCANBCMD DS    0H                  COMMAND IS NOT 'LOGON'
         LA    R0,L'BCMNDMSG       GET LENGTH OF MESSAGE
         LA    R1,BCMNDMSG         POINT TO MESSAGE
         TPUT  (1),(0),R           ISSUE MESSAGE
SCANBRET DS    0H
         LA    R15,16              SET RETURN CODE
         OI    ETBITS1,ET1DENY     DENY LOGON
         B     SCANEXIT            EXIT
         EJECT
*********************************************************************
*
*       IF COMMAND WAS 'LOGOFF', DENY LOGON WITHOUT MESSAGE TO USER.
*
*********************************************************************
SCANLOGF DS    0H
         TM    ETBITS1,ET1ATTN     WAS ATTENTION HIT
         BZ    SCANBCMD            NO - CONTINUE
         CLI   CSOALNM+1,6         YES - IS COMMAND LENGTH 6 BYTES
         BNE   SCANBCMD            NO - BAD COMMAND
         L     R1,CSOACNM          YES - GET ADDRESS OF COMMAND NAME
         CLC   =C'LOGOFF',0(R1)    IS COMMAND NAME 'LOGOFF'
         BNE   SCANBCMD            NO - BAD COMMAND
         B     SCANBRET            YES - DENY LOGON WITHOUT MESSAGE
         TITLE 'IKJEFLD1 - PARSE COMMAND BUFFER'
***********************************************************************
*                                                                     *
* ROUTINE NAME -                                                      *
*    PARSE                                                            *
*                                                                     *
* FUNCTION -                                                          *
*    PARSE INPUT BUFFER.                                              *
*                                                                     *
* OPERATION -                                                         *
*    1) BUILDS PPL AND CALLS IKJPARS TO PARSE INPUT BUFFER.           *
*    2) IF PARSE IS UNSUCCESSFUL AND IKJPARS ISSUED MESSAGE, DENIES   *
*       LOGON.  IF IKJPARS DID NOT ISSUE MESSAGE, CALLS GNRLFAIL TO   *
*       ISSUE MESSAGE.  IF GNRLFAIL IS UNSUCCESSFUL, TELLS TSO USER   *
*       THAT GNRLFAIL HAD A NOT-ZERO RETURN CODE. IN ALL OF THE ABOVE *
*       CASES, DENIES LOGON UNLESS ATTENTION HIT.
*    3) RETURNS TO THE MAINLINE.                                      *
*                                                                     *
* ENTRY POINTS -                                                      *
*    PARSE                                                            *
*                                                                     *
* EXTERNAL REFERENCES -                                               *
*    IKJPARS                                                          *
*    IKJEFF19 (GNRLFAIL)                                              *
*                                                                     *
* INPUT -                                                             *
*    COMMAND BUFFER.                                                  *
*                                                                     *
* OUTPUT -                                                            *
*    NONE                                                             *
*                                                                     *
* MESSAGES -                                                          *
*    'GNRLFAIL UNSUCCESSFUL - RC=NNNN'                                *
*                                                                     *
***********************************************************************
         EJECT
PARSE    DS    0H
         SUBENTRY ,
         EJECT
***********************************************************************
*                                                                     *
*       BUILDS PPL AND CALLS IKJPARS TO PARSE INPUT BUFFER.           *
*                                                                     *
***********************************************************************
         LA    R1,D1@PPL           GET ADDRESS OF PPL
         USING PPL,R1              ESTABLISH ADDRESSABILITY TO PPL
         MVC   PPLUPT,D1@CPPL+CPPLUPT-CPPL COPY UPT ADDRESS
         MVC   PPLECT,D1@CPPL+CPPLECT-CPPL COPY ECT ADDRESS
         LA    R15,D1@ECB          GET ADDRESS OF CP ECB
         ST    R15,PPLECB          STORE CP ECB ADDRESS
         XC    D1@ECB,D1@ECB       CLEAR CP ECB
         MVC   PPLPCL,=A(PARMTAB)  STORE PCL ADDRESS
         LA    R15,D1@PPANS        GET ADDRESS OF PDL
         ST    R15,PPLANS          STORE PDL ADDRESS
         MVC   PPLCBUF,D1@CPPL+CPPLCBUF-CPPL COPY CMD BUFFER ADDRESS
         CALLTSSR EP=IKJPARS,MF=(E,D1@PPL) CALL IKJPARS
         LTR   R15,R15             WAS PARSE SUCCESSFUL
         BZ    PARSEXIT            YES - RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*       IF PARSE IS UNSUCCESSFUL AND IKJPARS ISSUED MESSAGE, DENIES   *
*       LOGON.  IF IKJPARS DID NOT ISSUE MESSAGE, CALLS GNRLFAIL TO   *
*       ISSUE MESSAGE.  IF GNRLFAIL IS UNSUCCESSFUL, TELLS TSO USER   *
*       THAT GNRLFAIL HAD A NOT-ZERO RETURN CODE. IN ALL OF THE ABOVE *
*       CASES, DENIES LOGON UNLESS ATTENTION HIT.
*                                                                     *
***********************************************************************
         TM    ETBITS1,ET1ATTN     WAS ATTENTION HIT
         BO    PARSATTN            YES - DONT SET DENY BIT
         OI    ETBITS1,ET1DENY     NO - DENY LOGON
PARSATTN DS    0H
         LA    R14,4               GET 4 IN R14 FOR COMPARISON
         CR    R14,R15             DID PARSE ISSUE MESSAGE
         BE    PARSEXIT            YES - QUIT
         LA    R14,8               NO - GET 8 IN R14
         CR    R14,R15             DID PARSE GET AN ATTENTION KEY
         BE    PARSEXIT            YES - QUIT
         LA    R14,20              NO - GET 20 IN R14
         CR    R14,R15             DID VALIDITY CHECKING ISSUE MSG
         BE    PARSEXIT            YES - QUIT
         LR    R2,R15              NO - PROTECT PARSE RETURN CODE
         XC    D1@GFPRS,D1@GFPRS   CLEAR GNRLFAIL PARAMETER LIST
         LA    R1,D1@GFPRS         POINT TO GNRLFAIL PARM LIST ADDR
         ST    R1,D1@GFPRP         STORE IN GNRLFAIL PARM LIST POINTER
         USING GFDSECTD,R1         ESTABLISH ADDRESSABILITY TO GF PARMS
         ST    R15,GFRCODE         STORE PARSE RETURN CODE
         LA    R15,GFPARSE         LOAD CALLER ID FOR PARSE
         STH   R15,GFCALLID        STORE CALLER ID
         LA    R15,D1@CPPL         GET ADDRESS OF CPPL
         ST    R15,GFCPPLP         STORE POINTER TO CPPL
         LA    R15,D1@ECB          GET ADDRESS OF CP ECB
         ST    R15,GFECBP          STORE CP ECB POINTER
         XC    D1@ECB,D1@ECB       CLEAR CP ECB
         LINK  EP=IKJEFF19,MF=(E,D1@GFPRP) LINK TO GNRLFAIL
         LTR   R15,R15             WAS GNRLFAIL SUCCESSFUL
         LR    R15,R2              RESTORE PARSE RETURN CODE
         BZ    PARSEXIT            YES - EXIT
         LR    R2,R15              NO - PROTECT GNRLFAIL RETURN CODE
         MVC   D1@MSGAR(L'GFAILMSG),GFAILMSG COPY MESSAGE
         CVD   R15,D1@WORK1        CONVERT TO DECIMAL
         OI    D1@WORK1+7,X'0F'    FIX SIGN
         UNPK  D1@WORK1(5),D1@WORK1+5(3) UNPACK
         MVC   D1@MSGAR+27(4),D1@WORK1+1 MOVE INTO MESSAGE
         LA    R0,L'GFAILMSG       GET LENGTH OF MESSAGE
         LA    R1,D1@MSGAR         POINT TO MESSAGE
         TPUT  (1),(0),R           ISSUE MESSAGE
         LR    R15,R2              RESTORE GNRLFAIL RETURN CODE
         EJECT
***********************************************************************
*                                                                     *
*       RETURNS TO THE MAINLINE.                                      *
*                                                                     *
***********************************************************************
PARSEXIT DS    0H
         SUBEXIT ,
         TITLE 'IKJEFLD1 - SAVE ANY BFG INFO FROM LOGON COMMAND'
***********************************************************************
*                                                                     *
* ROUTINE NAME -                                                      *
*    D1$SVINF                                                         *
*                                                                     *
* FUNCTION -                                                          *
*    SAVE ANY BFG INFORMATION FROM LOGON COMMAND                      *
*                                                                     *
* OPERATION -                                                         *
*                                                                     *
*                                                                     *
* ENTRY POINTS -                                                      *
*    D1$SVINF                                                         *
*                                                                     *
* EXTERNAL REFERENCES -                                               *
*    NONE                                                             *
*                                                                     *
* INPUT -                                                             *
*    NONE                                                             *
*                                                                     *
* OUTPUT -                                                            *
*    NONE                                                             *
*                                                                     *
* MESSAGES -                                                          *
*    NONE                                                             *
*                                                                     *
* COMMENTS -                                                          *
*    NONE                                                             *
*                                                                     *
***********************************************************************
D1$SVINF DS    0H
         SUBENTRY ,
         EJECT
***********************************************************************
*                                                                     *
*       SAVE BFG SELECTED INFO IF PRESENT.                            *
*                                                                     *
***********************************************************************
         L     R4,D1@PPANS         GET ANSWER AREA
         USING IKJPARMD,R4         SETUP ADDRESSABILITY
*  SAVE ADDRESS VALUE
         LA    R1,SADDRESS
         LA    R3,ETADDRS
         BAL   R14,D1$SVMOV
*  SAVE COPIES VALUE
         LA    R1,SCOPIES
         LA    R3,ETCOPY
         BAL   R14,D1$SVMOV
*  SAVE DEBUG FLAG
         OC    PDEBUG(2),PDEBUG    WAS 'DEBUG' SPECIFIED
         BZ    *+8                 IF NOT SKIP SET
         OI    ETBITS3,ET3DEBUG+ET3LSTIN SET FLAGS
*  SAVE FORM VALUE
         LA    R1,SFORMS
         LA    R3,ETFORM
         BAL   R14,D1$SVMOV
*  SAVE JCL FLAG
         OC    PJCL(2),PJCL        WAS 'JCL' SPECIFIED
         BZ    *+8                 IF NOT SKIP SET
         OI    ETBITS3,ET3JCL      SET FLAGS
*  SAVE LINE COUNT VALUE
         LA    R1,SLINECT
         LA    R3,ETLINCT
         BAL   R14,D1$SVMOV
*  SAVE LISTINFO FLAG
         OC    PLIST(2),PLIST      WAS 'LISTINFO' SPECIFIED
         BZ    *+8                 IF NOT SKIP SET
         OI    ETBITS3,ET3LSTIN    SET FLAGS
*  SAVE MESSAGE CLASS VALUE
         LA    R1,SMSGCLAS
         LA    R3,ETMSGC
         BAL   R14,D1$SVMOV
*  SAVE MESSAGE LEVEL VALUE
         LA    R1,SMSGLEVL
         LA    R3,ETMSGL
         BAL   R14,D1$SVMOV
         TM    SMSGLEVL+6,X'80'    WAS FIRST ENTRY SPECIFIED
         BZ    D1$SV10             NO, SO SKIP CODE
         CLI   SMSGLEVL+8,X'FF'    ANY MORE ENTRIES
         BE    D1$SV10             NO, SO SKIP CODE
         SR    R1,R1               CLEAR REGISTER
         ICM   R1,B'0111',SMSGLEVL+9 GET ADDRESS PORTION
         LA    R3,D1@WORK1         POINT TO AREA
         BAL   R14,D1$SVMOV        MOVE IN SECOND ENTRY
         MVI   ETMSGL+3,C','
         LH    R1,D1@WORK1         GET LENGTH
         LTR   R1,R1               ANY VALUE
         BZ    D1$SV10             IF NOT THEN DONE
         LH    R15,ETMSGL          GET CURRENT LENGTH
         LA    R15,ETMSGL+2(R15)   POINT PAST IT
         MVI   0(R15),C','         SET THE COMMA
         LA    R15,1(,R15)         POINT TO NEXT CHAR
         BCTR  R1,0                GET MACHINE LENGTH
         EX    R1,D1$SV99          MOVE IN SECOND VALUE
         AH    R1,ETMSGL           ADD IN ORIG LENGTH
         LA    R1,2(R1)            PLUS ORIG LENGTH & COMMA
         STH   R6,ETMSGL            WITH THE PREVIOUS VALUE
D1$SV10  DS    0H
*  SAVE NAME VALUE
         LA    R1,SNAME
         LA    R3,ETNAME
         BAL   R14,D1$SVMOV
*  SAVE PHONE VALUE
         LA    R1,SPHONE
         LA    R3,ETPHONE
         BAL   R14,D1$SVMOV
*  SAVE PROGRAMMER NAME VALUE
         LA    R1,SPROGNAM
         LA    R3,ETPRGNM
         BAL   R14,D1$SVMOV
*  SAVE ROOM NUMBER VALUE
         LA    R1,SROOM
         LA    R3,ETROOM
         BAL   R14,D1$SVMOV
*  SAVE CPU TIME VALUE
         LA    R1,SCPUTIME
         LA    R3,ETCPTIM
         BAL   R14,D1$SVMOV
         DROP  R4
         EJECT
***********************************************************************
*                                                                     *
*       IF DEBUGGING MODE, HANDLE DISPLAYS                            *
*                                                                     *
***********************************************************************
         TM    ETBITS3,ET3DEBUG    DEBUG IN PROGRESS??
         BZ    D1$M999             NOPE, SKIP CODE
         WTO   'IKJEFLD1: INSIDE',ROUTCDE=(2)
         CLI   ETTEST,128
         BNE   D1$M999
         LR    R1,R10
         L     R15,=A(IKJEXIT+X'80000000')
         BASR  R14,R15
D1$M999  DS    0H
         EJECT
***********************************************************************
*                                                                     *
*       RETURNS TO THE MAINLINE.                                      *
*                                                                     *
***********************************************************************
         SR    R15,R15             SET GOOD RETURN CODE
D1$SEXIT DS    0H
         SUBEXIT ,
         SPACE 3
D1$SV99  MVC   0(0,R15),D1@WORK1+2 ** EXECUTED
         EJECT
***********************************************************************
*                                                                     *
*       SUBROUTINE TO MOVE DATA FROM PDE TO MY AREA.                  *
*                                                                     *
*              R1 => PDE                                              *
*              R3 => LENGTH(2), DATA AREA                             *
*              R14 = RETURN ADDRESS                                   *
*                                                                     *
***********************************************************************
D1$SVMOV TM    6(R1),X'80'         WAS OPERAND PRESENT
         BZR   R14                 NOT PRESENT
         ICM   R15,B'0011',4(R1)   GET LENGTH
         BZR   R14                 EXIT IF ZERO LENGTH
         STH   R15,0(,R3)          SAVE LENGTH
         L     R1,0(,R1)           GET ADDRESS
         BCTR  R15,0               GET MACHINE LENGTH
         EX    R15,D1$SVM99        MOVE DATA
         BR    R14
D1$SVM99 MVC   2(0,R3),0(R1)       ** EXECUTED **
         TITLE 'IKJEFLD1 - SAVE ANY BFG INFO FROM LOGON COMMAND'
***********************************************************************
*                                                                     *
* ROUTINE NAME -                                                      *
*    D1$MKCMD                                                         *
*                                                                     *
* FUNCTION -                                                          *
*    CREATE NEW COMMAND BUFFER WITHOUT BFG ONLY OPERANDS.             *
*                                                                     *
* OPERATION -                                                         *
*                                                                     *
*                                                                     *
* ENTRY POINTS -                                                      *
*    D1$MKCMD                                                         *
*                                                                     *
* EXTERNAL REFERENCES -                                               *
*    NONE                                                             *
*                                                                     *
* INPUT -                                                             *
*    NONE                                                             *
*                                                                     *
* OUTPUT -                                                            *
*    NONE                                                             *
*                                                                     *
* MESSAGES -                                                          *
*    NONE                                                             *
*                                                                     *
* COMMENTS -                                                          *
*    NONE                                                             *
*                                                                     *
***********************************************************************
D1$MKCMD DS    0H
         SUBENTRY ,
         EJECT
***********************************************************************
*                                                                     *
*       CLEAR OUT ORIGINAL COMMAND BUFFER                             *
*                                                                     *
***********************************************************************
         PARM  D1CMDBFR            GET POINTERS
         LR    R2,R1               SET R2 => THE CMD BUFFER
         LA    R3,4(,R15)          SET R3 => LENGTH AREA (4 BYTES)
         MVC   0(4,R3),=F'6'       INITIAL LENGTH
         MVC   0(6,R2),=C'LOGON '  AND VALUE
         L     R5,D1@PPANS         GET ANSWER AREA
         USING IKJPARMD,R5         SETUP ADDRESSABILITY
*  USERID AND PASSWORDS
         LA    R4,PUSERID          POINT TO PDE
         BAL   R14,D1$MMV90
         TM    PUSERID+8+6,X'80'   IS PASSWORD PRESENT
         BZ    D1$MMV09
         LA    R4,=C'/'
         LA    R1,1                MACHINE LENGTH
         BAL   R14,D1$MMV95
         LA    R4,PUSERID+8        POINT TO PDE
         BAL   R14,D1$MMV90
         TM    PUSERID+16+6,X'80'   IS NEW PASSWORD PRESENT
         BZ    D1$MMV09
         LA    R4,=C'/'
         LA    R1,1                MACHINE LENGTH
         BAL   R14,D1$MMV95
         LA    R4,PUSERID+16       POINT TO PDE
         BAL   R14,D1$MMV90
D1$MMV09 DS    0H
*  HANDLE MAIL/NOMAIL
         OC    PMAIL,PMAIL         ANY SPECIFIED
         BZ    D1$MMV19
         CLC   PMAIL,=H'1'         IS THIS MAIL
         BNE   D1$MMV11
         LA    R4,=C' MAIL'
         LA    R1,5                MACHINE LENGTH
         BAL   R14,D1$MMV95
         B     D1$MMV19
D1$MMV11 CLC   PMAIL,=H'2'         IS THIS NOMAIL
         BNE   D1$MMV12
         LA    R4,=C' NOMAIL'
         LA    R1,7                MACHINE LENGTH
         BAL   R14,D1$MMV95
         B     D1$MMV19
D1$MMV12 DS    0H
D1$MMV19 DS    0H
*  HANDLE NOTICES/NONOTICES
         OC    PNOTICES,PNOTICES   ANY SPECIFIED
         BZ    D1$MMV29
         CLC   PNOTICES,=H'1'      IS THIS NOTICES
         BNE   D1$MMV21
         LA    R4,=C' NOTICES'
         LA    R1,8                MACHINE LENGTH
         BAL   R14,D1$MMV95
         B     D1$MMV29
D1$MMV21 CLC   PNOTICES,=H'2'      IS THIS NONOTICES
         BNE   D1$MMV22
         LA    R4,=C' NONOTICES'   THE STRING TO INSERT
         LA    R1,10               MACHINE LENGTH
         BAL   R14,D1$MMV95        INSERT THE DATA
         B     D1$MMV29
D1$MMV22 DS    0H
D1$MMV29 DS    0H
*  HANDLE RECONNECT
         OC    PRECON,PRECON
         BZ    D1$MMV39
         LA    R4,=C' RECONNECT'   THE STRING TO INSERT
         LA    R1,10               MACHINE LENGTH
         BAL   R14,D1$MMV95        INSERT THE DATA
D1$MMV39 DS    0H
*  HANDLE ACCOUNT SUB PARAMETER
         TM    SACCT+6,X'80'       IS IT PRESENT
         BZ    D1$MMV49            NO, SKIP INSERT
         LA    R4,=C' ACCT('''     THE STRING TO INSERT
         LA    R1,7                MACHINE LENGTH
         BAL   R14,D1$MMV95        INSERT THE DATA
         LA    R4,SACCT            POINT TO PDE
         BAL   R14,D1$MMV90
         LA    R4,=C''')'          THE STRING TO INSERT
         LA    R1,2                MACHINE LENGTH
         BAL   R14,D1$MMV95        INSERT THE DATA
D1$MMV49 DS    0H
*  HANDLE SIZE SUB PARAMETER
         TM    SSIZE+6,X'80'       IS IT PRESENT
         BZ    D1$MMV59            NO, SKIP INSERT
         LA    R4,=C' SIZE('       THE STRING TO INSERT
         LA    R1,6                MACHINE LENGTH
         BAL   R14,D1$MMV95        INSERT THE DATA
         LA    R4,SSIZE            POINT TO PDE
         BAL   R14,D1$MMV90
         LA    R4,=C')'            THE STRING TO INSERT
         LA    R1,1                MACHINE LENGTH
         BAL   R14,D1$MMV95        INSERT THE DATA
D1$MMV59 DS    0H
*  HANDLE PROCEDURE SUB PARAMETER
         TM    SPROC+6,X'80'       IS IT PRESENT
         BZ    D1$MMV69            NO, SKIP INSERT
         LA    R4,=C' PROC('       THE STRING TO INSERT
         LA    R1,6                MACHINE LENGTH
         BAL   R14,D1$MMV95        INSERT THE DATA
         LA    R4,SPROC            POINT TO PDE
         BAL   R14,D1$MMV90
         LA    R4,=C')'            THE STRING TO INSERT
         LA    R1,1                MACHINE LENGTH
         BAL   R14,D1$MMV95        INSERT THE DATA
D1$MMV69 DS    0H
         EJECT
***********************************************************************
*                                                                     *
*       IF DEBUGGING THEN OUTPUT THE LOGON COMMAND TO CONSOLE         *
*                                                                     *
***********************************************************************
         TM    ETBITS3,ET3DEBUG    DEBUG IN PROGRESS??
         BZ    D1$MMV80            NOPE, SKIP CODE
         L     R1,0(R3)            GET LENGTH
         LA    R1,4(,R1)           INCREASE
         STH   R1,D1@CBUF
         MVC   D1@CBUF+2(2),=X'8000'
         MVC   D1@CBUF+4(252),0(R2) MOVE IN BUFFER
         LA    R1,D1@CBUF(R1)      POINT AFTER STRING
         MVC   0(4,R1),=AL2(0,X'4000') SET ROUTCDE
         WTO   MF=(E,D1@CBUF)
D1$MMV80 DS    0H
         EJECT
***********************************************************************
*                                                                     *
*       RELEASE STORAGE FOR PDL                                       *
*                                                                     *
***********************************************************************
         LA    R1,D1@PPANS
         IKJRLSA (1)
         EJECT
***********************************************************************
*                                                                     *
*       RETURNS TO THE MAINLINE.                                      *
*                                                                     *
***********************************************************************
         SR    R15,R15             CLEAR RETURN CODE
D1$MEXIT SUBEXIT ,
         EJECT
***********************************************************************
*                                                                     *
*       SUBROUTINE TO MOVE DATA TO NEW COMMAND BUFFER                 *
*              R4 => PDE OF ITEM TO MOVE                              *
*              R3 => CURRENT LENGTH OF CMD BUFFER                     *
*              R2 => START OF CMD BUFFER                              *
*                                                                     *
***********************************************************************
D1$MMV90 DS    0H
         TM    6(R4),X'80'         IS PARM PRESENT
         BZR   R14                 EXIT IF NOT
         LH    R1,4(,R4)           GET LENGTH
         LTR   R1,R1               IS THERE ANY LENGTH
         BZR   R14                 EXIT IF NOT
         L     R4,0(,R4)           GET ADDRESS
D1$MMV95 L     R15,0(,R3)          GET CURRENT LENGTH
         AR    R15,R2              GET OUTPUT ADDRESS
         BCTR  R1,0                GET MACHINE LENGTH
         EX    R1,D1$MMV99
         A     R1,0(,R3)           INCREMENT LENGTH
         LA    R1,1(,R1)           PLUS DECREMENT
         ST    R1,0(,R3)           SAVE NEW LENGTH
         BR    R14
D1$MMV99 MVC   0(0,R15),0(R4)      ** EXECUTED **
         TITLE 'DAUGHTER TASK - STAX EXIT ROUTINE'
*********************************************************************
*
* ROUTINE NAME -
*    D1$RSTAX
*
* FUNCTION -
*    ENTERED AFTER AN ATTENTION INTERRUPT HAS OCCURED.
*
* OPERATION -
*    1) CHECKS LENGTH OF INPUT BUFFER.  IF ZERO, EXIT.
*    2) UPDATES ORIGINAL INPUT BUFFER.
*    3) REBUILDS CBUF.
*    4) POSTS CP ECB.
*    5) RETURNS TO CALLER.
*
* ENTRY POINTS -
*    D1$RSTAX
*
* EXTERNAL REFERENCES -
*    NONE
*
* INPUT -
*    ATTENTION EXIT PARAMETER LIST (AEPL)
*
* OUTPUT -
*    NONE
*
* MESSAGES -
*    NONE
*
*********************************************************************
         EJECT
         PUSH  USING
         USING *,R15
D1$RSTAX DS    0H
         SAVE  (14,12),,D1$RSTAX   SAVE CALLER'S REGISTERS
         L     R12,=A(IKJEFLD1)    GET REAL BASE
         POP   USING
         USING AEPL,R1             ESTABLISH ADDRESSABILITY TO AEPL
         L     R2,AEPLUSAD         GET ADDRESS OF USADDR FROM AEPL
         LR    R3,R13              SAVE CALLER'S R13
         L     R9,4(,R2)           GET PHASE DSA ADDRESS
         L     R11,8(,R2)          GET EXTOEX ADDRESS
         L     R10,12(,R2)         GET PARM ADDRESS
         EJECT
*********************************************************************
*
*       CHECKS LENGTH OF INPUT BUFFER.  IF ZERO, EXIT.
*
*********************************************************************
         L     R1,AEPLTAIE         GET ADDRESS OF TAIE FROM AEPL
         DROP  R1                  DROP APEL ADDRESSABILITY
         USING TAIE,R1             ESTABLISH ADDRESSABILITY TO TAIE
         SR    R2,R2               CLEAR REGISTER
         ICM   R2,B'0011',TAIEMSGL GET LENGTH OF INPUT BUFFER
         DROP  R1                  DROP TAIE ADDRESSABILITY
         BZ    STAXRTRN            ELSE - GET OUT
         EJECT
*********************************************************************
*
*       UPDATES ORIGINAL INPUT BUFFER.
*
*********************************************************************
         PARM  D1CMDBFR
         ST    R2,4(,R15)          UPDATE ACTUAL LENGTH
         EJECT
*********************************************************************
*
*       REBUILDS CBUF.
*
*********************************************************************
         LA    R2,4(,R2)           ADD 4 FOR LENGTH AND OFFSET
         STH   R2,D1@CBUF+CBUFLEN-CBUF UPDATE BUILT CBUF
         XC    D1@CBUF+CBUFOFFS-CBUF(2),D1@CBUF+CBUFOFFS-CBUF ZERO OFF
         MVC   D1@CBUF+CBUFTEXT-CBUF(252),0(R1)  COPY STAX RESPONSE
         EJECT
*********************************************************************
*
*       POSTS CP ECB.
*
*********************************************************************
         POST  D1@ECB              POST CP ECB
         OI    ETBITS1,ET1ATTN     INDICATE ATTENTION INTERRUPT
         EJECT
*********************************************************************
*
*       RETURNS TO CALLER.
*
*********************************************************************
STAXRTRN DS    0H
         LR    R13,R3              RESTORE CALLER'S R13
         RETURN (14,12),RC=0       RETURN TO CALLER
         TITLE 'DAUGHTER TASK - DUMMY STAX EXIT ROUTINE'
*********************************************************************
*
* ROUTINE NAME -
*    D1$DSTAX
*
* FUNCTION -
*    ENTERED AFTER AN ATTENTION INTERRUPT HAS OCCURED.
*      **  THIS IS THE DUMMY SECOND LEVEL HANDLER  **
*
* OPERATION -
*    1) RETURNS TO CALLER.
*
* ENTRY POINTS -
*    D1$DSTAX
*
* EXTERNAL REFERENCES -
*    NONE
*
* INPUT -
*    ATTENTION EXIT PARAMETER LIST (AEPL)
*
* OUTPUT -
*    NONE
*
* MESSAGES -
*    NONE
*
* NOTES -
*    ADDRESSABILITY IS ESTABLISHED TO REST OF EXIT AND TO DYNAMIC
*    AREA IN CASE THIS MAY BE NEEDED IN THE FUTURE.
*
*********************************************************************
         EJECT
         PUSH  USING
         USING *,R15
D1$DSTAX DS    0H
         SAVE  (14,12),,D1$DSTAX   SAVE CALLER'S REGISTERS
         L     R12,=A(IKJEFLD1)    GET REAL BASE
         POP   USING
         USING AEPL,R1             ESTABLISH ADDRESSABILITY TO AEPL
         L     R2,AEPLUSAD         GET ADDRESS OF USADDR FROM AEPL
         LR    R3,R13              SAVE CALLER'S R13
         L     R9,4(,R2)           GET PHASE DSA ADDRESS
         L     R11,8(,R2)          GET EXTOEX ADDRESS
         L     R10,12(,R2)         GET PARM ADDRESS
         SPACE 5
*********************************************************************
*
*       RETURNS TO CALLER.
*
*********************************************************************
         LR    R13,R3              RESTORE CALLER'S R13
         RETURN (14,12),RC=0       RETURN TO CALLER
         TITLE 'IKJEFLD1 - TEMPORARY ENTRY POINTS '
         PUSH  USING
         DROP  R12
         USING *,R15
D1$RETRY DS    0H
         L     R12,=A(IKJEFLD1)    GET REAL BASE
         POP   USING
         OI    ETBITS1,ET1DENY     MARK TO DENY
         LA    R15,16              SET ABEND RETURN CODE
         B     D1$EXIT             ALL DONE
         LTORG ,
         DROP  ,
         TITLE 'IKJEFLD1 - CONSTANTS AREA'
KEYZERO  MODESET KEY=ZERO,MF=L     GET KEY 0
NONZERO  MODESET KEY=NZERO,MF=L    RETURN TO USER KEY
LESTAE   ESTAE ,MF=L               ESTAE PARAMETER LIST
LGESTAE  EQU   *-LESTAE            CALCULATE LENGTH OF ESTAE PARM LIST
SDUMP    SDUMP MF=L                SDUMP PARAMETER LIST
LSDUMP   EQU   *-SDUMP             CALCULATE LENGTH OF SDUMP PARM
         TITLE 'DAUGHTER TASK - MESSAGES'
*                          1         2
*                0123456789012345678901234567
ESTAEMSG DC    C'ESTAE UNSUCCESSFUL - RC=XXXX'
STAXOBUF DC    C'ENTER ''LOGON'' OR ''LOGOFF'' -'
*                          1         2
*                012345678901234567890123456
STAXMSG  DC    C'STAX UNSUCCESSFUL - RC=XXXX'
*                          1         2
*                012345678901234567890123456
TGETMSG  DC    C'TGET UNSUCCESSFUL - RC=XXXX'
*                          1         2
*                012345678901234567890123456
STOWMSG  DC    C'STOW UNSUCCESSFUL - RC=XXXX'
RESCFAIL DC    C'RESOURCE FAILURE.'
LOGABEND DC    C'LOGON ABEND.'
*                          1         2
*                012345678901234567890123456789
SCANMSG  DC    C'IKJSCAN UNSUCCESSFUL - RC=XXXX'
*                          1         2         3
*                0123456789012345678901234567890
GFAILMSG DC    C'GNRLFAIL UNSUCCESSFUL - RC=XXXX'
BCMNDMSG DC    C'COMMAND IS NOT ''LOGON'''
NOTFOUND DC    C'USER NOT AUTHORIZED TO USE TIME-SHARING'
DIVQUOTA DC    C'DIV. QUOTA CURRENTLY ON'
BADPASS  DC    C'PASSWORD NOT AUTHORIZED FOR THIS USERID'
PMSGHDR  DC    AL2(LPASSMSG,0),C' '
PASSMSG  DC    C'ENTER PASSWORD -'
LPASSMSG EQU   *-PMSGHDR
NPMSGHDR DC    AL2(LNPASMSG,0),C' '
NPASSMSG DC    C'ENTER NEW PASSWORD -'
LNPASMSG EQU   *-NPMSGHDR
BADACCT  DC    C'ACCT # NOT AUTHORIZED FOR THIS USERID'
PRMPTMSG DC    C'PROMPT LIMIT EXCEEDED'
AMSGHDR  DC    AL2(LACCTMSG,0),C' '
ACCTMSG  DC    C'ENTER ACCOUNT NUMBER -'
LACCTMSG EQU   *-AMSGHDR
BADPROC  DC    C'PROCEDURE IGNORED'
DUPUSER  DC    C'USERID CURRENTLY LOGGED ON'
BADRECON DC    C'RECONNECT SPECIFIED BUT USERID NOT LOGGED ON'
*                     1         2         3         4
*               4567890123456789012345678901234567890 123
LOGWTO   WTO   'UNKNOWN LOGGING ON TERMINAL - ASID X''NNNN''',         X
               MCSFLAG=HRDCPY,MF=L
NOTEST   WTO   'IKJEFLD1: TEST ROUTINE INVOKED BUT NOT PRESENT',       X
               ROUTCDE=(2),MF=L
LLOGWTO  EQU   *-LOGWTO            CALCULATE LENGTH OF WTO MESSAGE
CLRSCRN  DC    X'27F5401D40'       CLEAR SCREEN
NAMEMSG  DC    C'ENTER YOUR NAME - '
PHONEMSG DC    C'ENTER YOUR PHONE NUMBER - '
ADDRMSG  DC    C'ENTER YOUR ADDRESS - '
PASSWARN DC    C'PASSWORD SHOULD BE CHANGED'
LOG60MSG DC    C'USER HAS NOT LOGGED ON IN 60 DAYS'
PAS28MSG DC    C'USER HAS NOT CHANGED PASSWORD IN 28 DAYS'
TIMEMSG  DC    C'TIME EXCEEDS USER''S LIMIT.  MAXIMUM USED'
LASTCARD DC    C'ENTER LAST JCL CARD OR ''END'''
NEXTCARD DC    C'ENTER NEXT JCL CARD OR ''END'''
MANYMSG  DC    C'TOO MANY CARDS ENTERED. LOGON PROCEEDING'
BADJCL   DC    C'JCL IGNORED'
ENTRCONT DC    C'PRESS ENTER TO CONTINUE LOGON'
         TITLE 'IKJEFLD1 - PARSE PARAMETER LIST'
         PUSH  PRINT
         PRINT NOGEN
         SPACE 5
PCLADDR  DC    A(PARMTAB)          ADDRESS OF PARS PARAMETER LIST
PARMTAB  IKJPARM DSECT=IKJPARMD    START OF PCL
PUSERID  IKJPOSIT UID2PSWD,PROMPT='USERID', USERID/PASSWORD/NEWPSWD
PACCTNUM IKJKEYWD
         IKJNAME 'ACCT',SUBFLD=ACCTSUB
PPROC    IKJKEYWD
         IKJNAME 'PROC',SUBFLD=PROCSUB
*
PRECON   IKJKEYWD
         IKJNAME 'RECONNECT'
PMAIL    IKJKEYWD DEFAULT='NOMAIL'
         IKJNAME 'MAIL'
         IKJNAME 'NOMAIL'
PNOTICES IKJKEYWD DEFAULT='NONOTICES'
         IKJNAME 'NOTICES'
         IKJNAME 'NONOTICES'
*
PDEBUG   IKJKEYWD
         IKJNAME 'DEBUG',INSERT='LISTINFO'
*
PNAME    IKJKEYWD
         IKJNAME 'NAME',SUBFLD=NAMESUB
*
PPHONE   IKJKEYWD
         IKJNAME 'PHONE',SUBFLD=PHONSUB
*
PADDRESS IKJKEYWD
         IKJNAME 'ADDRESS',SUBFLD=ADDRSUB
*
PPROGNAM IKJKEYWD
         IKJNAME 'PROGNAME',SUBFLD=PROGSUB
*
PCPUTIME IKJKEYWD
         IKJNAME 'TIME',SUBFLD=CPUTSUB
*
PSIZE    IKJKEYWD
         IKJNAME 'SIZE',SUBFLD=SIZESUB
*
PMSGCLAS IKJKEYWD
         IKJNAME 'MSGCLASS',SUBFLD=MSGCSUB
*
PMSGLEVL IKJKEYWD
         IKJNAME 'MSGLEVEL',SUBFLD=MSGLSUB
*
PFORMS   IKJKEYWD
         IKJNAME 'FORMS',SUBFLD=FORMSUB
*
PROOM    IKJKEYWD
         IKJNAME 'ROOM',SUBFLD=ROOMSUB
*
PLIST    IKJKEYWD
         IKJNAME 'LISTINFO'
*
PJCL     IKJKEYWD
         IKJNAME 'JCL'
*
PCOPIES  IKJKEYWD
         IKJNAME 'COPIES',SUBFLD=COPSUB
*
PLINECT  IKJKEYWD
         IKJNAME 'LINECT',SUBFLD=LINSUB,ALIAS=('K') LIKE /*JOBPARM
         SPACE 3
*        BEGIN SUBFIELDS
ACCTSUB  IKJSUBF
SACCT    IKJIDENT 'ACCOUNT NUMBER',FIRST=NONATNUM,MAXLNTH=8,           X
               OTHER=NONATNUM,PROMPT='ACCOUNT NUMBER'
         SPACE 3
PROCSUB  IKJSUBF
SPROC    IKJIDENT 'PROCEDURE NAME',FIRST=ALPHA,MAXLNTH=8,              X
               OTHER=ALPHANUM,PROMPT='PROCEDURE NAME'
         SPACE 3
*
NAMESUB  IKJSUBF
SNAME    IKJIDENT 'YOUR NAME',MAXLNTH=60,CHAR,                         X
               PROMPT='YOUR NAME IN APOSTROPHES'
         SPACE 3
*
PHONSUB  IKJSUBF
SPHONE   IKJIDENT 'YOUR PHONE NUMBER',MAXLNTH=15,CHAR,                 X
               PROMPT='YOUR PHONE NUMBER IN APOSTROPHES'
         SPACE 3
*
ADDRSUB  IKJSUBF
SADDRESS IKJIDENT 'YOUR ADDRESS',MAXLNTH=60,CHAR,                      X
               PROMPT='YOUR ADDRESS IN APOSTROPHES'
         SPACE 3
*
PROGSUB  IKJSUBF
SPROGNAM IKJIDENT 'PROGRAMMER NAME',MAXLNTH=20,CHAR,                   X
               PROMPT='PROGRAMMER NAME IN ASPOSTOPHES'
         SPACE 3
*
CPUTSUB  IKJSUBF
SCPUTIME IKJIDENT 'CPU TIME',MAXLNTH=4,FIRST=NUMERIC,                  X
               OTHER=NUMERIC,PROMPT='CPU TIME'
         SPACE 3
*
SIZESUB  IKJSUBF
SSIZE    IKJIDENT 'REGION SIZE',MAXLNTH=7,FIRST=NUMERIC,               X
               OTHER=NUMERIC,PROMPT='REGION SIZE'
         SPACE 3
*
MSGCSUB  IKJSUBF
SMSGCLAS IKJIDENT 'MSGCLASS',MAXLNTH=1,FIRST=NONATNUM,                 X
               PROMPT='MSGCLASS'
         SPACE 3
*
MSGLSUB  IKJSUBF
SMSGLEVL IKJIDENT 'MSGLEVEL',LIST,MAXLNTH=1,FIRST=NUMERIC,             X
               PROMPT='MSGLEVEL'
         SPACE 3
*
FORMSUB  IKJSUBF
SFORMS   IKJIDENT 'JOB FORMS',MAXLNTH=4,FIRST=NONATNUM,                X
               OTHER=NONATNUM,PROMPT='JOB FORMS'
         SPACE 3
*
ROOMSUB  IKJSUBF
SROOM    IKJIDENT 'ROOM NUMBER',MAXLNTH=4,FIRST=NONATNUM,              X
               OTHER=NONATNUM,PROMPT='ROOM NUMBER'
         SPACE 3
*
COPSUB   IKJSUBF
SCOPIES  IKJIDENT 'COPIES',MAXLNTH=3,FIRST=NUMERIC,                    X
               OTHER=NUMERIC,PROMPT='COPY COUNT'
         SPACE 3
*
LINSUB   IKJSUBF
SLINECT  IKJIDENT 'LINECT',MAXLNTH=3,FIRST=NUMERIC,                    X
               OTHER=NUMERIC,PROMPT='LINE COUNT'
         SPACE 3
         IKJENDP
         SPACE 5
         POP   PRINT
         EJECT
DSAD1    DSECT
D1@SAVE  DS    (18*5)F
D1@WORK1 DS    D                   GENERAL WORK AREA
D1@ECB   DS    F                   ECB FOR CALLS
D1@CPPL  DS    XL(LCPPL)
         SPACE 5
*        THE FOLLOWING STORAGE IS FOR ESTAE AND ESTAE PROCESSING
D1@ESTAE ESTAE ,MF=L               ESTAE PARAMETER LIST
         SPACE 5
*        THE FOLLOWING STORAGE IS FOR STAX
D1@STAX1 STAX  ,MF=L               DUMMY STAX PARAMETER LIST
LSTAX    EQU   *-D1@STAX1          CALCULATE LENGTH OF STAX PRM LIST
D1@STAX2 STAX  ,MF=L               STAX PARAMETER LIST
         SPACE 5
*        THE FOLLOWING STORAGE IS FOR SCAN
D1@CSPL DS     XL(LCSPL)           CSPL
D1@CSPFL DS    F                   CSPL FLAG
D1@CSLOA DS    XL(LCSOA)           CSPL OUTPUT AREA
         SPACE 5
*        THE FOLLOWING STORAGE IS FOR PARSE
D1@PPL   DS    XL(LPPL)            PPL
D1@PPANS DS    F                   PPL PDL
         SPACE 5
*        THE FOLLOWING STORAGE IS FOR GNRLFAIL
D1@GFPRS DS    XL(GFLENGF)         GNRLFAIL PARAMETER LIST
D1@GFPRP DS    F                   GNRLFAIL PARM LIST POINTER
         SPACE 5
* SPACE FOR MESSAGE TO BE ISSUED
D1@MSGAR DS    CL100
         SPACE 5
* SPACE FOR COMMAND BUFFER
         DS    0F
D1@CBUF  DS    CL256
DSAD1L   EQU   *-DSAD1
         TITLE 'IKJEFLD1 - STANDARD EXIT PARAMETER LIST'
D1CMDBFR EQU   1                   COMMAND BUFFER
D1NEWCMD EQU   2                   NEW COMMAND BUFFER
D1UPT    EQU   3                   UPT
D1ECT    EQU   4                   ECT
D1PSCB   EQU   5                   PSCB
D1EXTOEX EQU   6                   EXIT TO EXIT COMM WORD
D1RCODE  EQU   7                   EXIT REASON CODE
*              8                   RESERVED
*              9                   RESERVED
D1SWITCH EQU   10                  CONTROL SWITCHES
D1USERID EQU   11                  USERID
D1PASSWD EQU   12                  CURRENT PASSWORD
D1ACCNT  EQU   13                  ACCOUNT NUMBER
D1PROC   EQU   14                  PROCEDURE NAME
D1RSIZE  EQU   15                  REGION SIZE
D1JCL    EQU   16                  JCL STATEMENTS
D1NPSWD  EQU   17                  NEW PASSWORD
D1SYSATR EQU   18                  SYSTEM ATTRIBUTES
D1USRATR EQU   19                  USER ATTRIBUTES
D1UNIT   EQU   20                  GENERIC UNIT NAME
D1CECB   EQU   21                  CANCEL ECB
D1PERFGP EQU   22                  PERFORMANCE GROUP
D1DDEST  EQU   23                  DEFAULT SYSOUT DESTINATION
D1GROUP  EQU   24                  RACF GROUP
D1SHOLD  EQU   25                  SUBMIT HOLD CLASS
D1SCLASS EQU   26                  SUBMIT CLASS
D1SMCLAS EQU   27                  SUBMIT MESSAGE CLASS
D1DSYSOT EQU   28                  DEFAULT SYSOUT CLASS
D1FSTCMD EQU   29                  FIRST COMMAND
D1RBA    EQU   30                  BORDCAST RBA
D1SECLBL EQU   31                  SECURITY LABEL
D1CNSLPF EQU   32                  CONSOLE COMMAND PROFILE
D1PRMLNG EQU   33                  PRIMARY LANGUAGE ID
D1SNDLNG EQU   34                  SECONDARY LANGUAGE ID
         TITLE 'IKJEFLN1 - LOGON PRE-DISPLAY EXIT'
IKJEFLN1 CSECT
IKJEFLN1 AMODE 31
IKJEFLN1 RMODE 24
         SAVE  (14,12),,IKJEFLN1_&SYSDATE._&SYSTIME
         LR    R12,R15             SET NEW BASE REGISTER
         LR    R10,R1              SAVE PARM LIST
         USING IKJEFLN1,R12,R8     SETUP ADDRESSABILITY
         LA    R8,2048(,R12)       SETUP SECOND
         LA    R8,2048(,R8)          BASE REGISTER
         PARM  N1EXTOEX            GET EXIT TO EXIT PARM ENTRY
         LR    R11,R1              SET ADDRESS
         USING EXTEX,R11
         EJECT
***********************************************************************
*                                                                     *
*       GET THIS EXIT WORK AREA/SAVE AREA                             *
*                                                                     *
***********************************************************************
         GETMAIN R,LV=DSAN1L,SP=11
         ST    R13,4(,R1)          SAVE ADDRESS
         LR    R13,R1              SET NEW SAVE AREA
         LR    R9,R1               SET NEW SAVE AREA
         USING DSAN1,R9
         EJECT
***********************************************************************
*                                                                     *
*       IF DEBUGGING MODE, HANDLE DISPLAYS AND TEST VERSION           *
*                                                                     *
***********************************************************************
         CLI   ETTEST,255          FLAG AS TEST VERSION WANTED?
         BNE   N1$M998             NOPE, SO USE PRODUCTION VERSION
         PARM  N1EXTOEX
         MVC   0(12,R15),ETHSKEY   SET TO ORIGINAL
         LR    R1,R10              GET PARM LIST
         LINK  EP=ZZZEFLN1         CALL TEST VERSION
         LR    R2,R15              SAVE RETURN CODE
         PARM  N1EXTOEX
         MVC   ETHSKEY(12),0(R15)  SAVE THE TEST PGMS STUFF
         MVC   0(12,R15),ETMYKEY   MOVE MY STUFF BACK IN
         B     N1$BYE              RETURN WITH TEST EXIT CODE
         SPACE 2
N1$M998  DS    0H
         TM    ETBITS3,ET3DEBUG    DEBUG IN PROGRESS??
         BZ    N1$M999             NOPE, SKIP CODE
         WTO   'IKJEFLN1: INSIDE',ROUTCDE=(2)
         CLI   ETTEST,128
         BNE   N1$M999
         LR    R1,R10
         L     R15,=A(IKJEXIT+X'80000000')
         BASR  R14,R15
N1$M999  DS    0H
         EJECT
***********************************************************************
*                                                                     *
*       MAINLINE PROCESSING                                           *
*                                                                     *
***********************************************************************
         SPACE 3
*               1. IF USERID IS NOT LOCKED THEN EXIT
         PARM  N1REPMPT
         CLC   0(4,R1),=F'0'       IS THIS NORMAL PROMPT
         BE    N1$NORM             YES, SO CONTINUE
         CLC   0(4,R1),=F'2'       IS THIS NORMAL PASSWORD PROMPT
         BNE   N1$EXIT             NO, SO EXIT
N1$NORM  DS    0H
         TM    ETBITS3,ET3DEBUG    DEBUGGING REQUESTED??
         BZ    N1$10               NOPE SKIP CODE
         WTO   'IKJEFLN1: PROCESSING',ROUTCDE=(2)
N1$10    DS    0H
*               2. DO HOUSEKEEPING
         BAS   R14,N1$HSKP
         LTR   R15,R15
         BNZ   N1$DENY
*               3. VALIDATE USERID AND GET BLOCKS FROM SYS1.UADS      *
         BAS   R14,N1$USER
         LTR   R15,R15
         BNZ   N1$DENY
*               4. UPDATE USER FIELDS FOR THE SCREEN
         BAS   R14,N1$SCRN
         LTR   R15,R15
         BNZ   N1$DENY
*               2. VERIFY TERMINAL RESTRICTIONS                       *
         BAS   R14,N1$GTERM
         LTR   R15,R15
         BNZ   N1$DENY
*               3. PERFORM 'ASKBACK' FUNCTION                         *
         BAS   R14,N1$VTERM
         LTR   R15,R15
         BNZ   N1$DENY
         EJECT
***********************************************************************
*                                                                     *
*        FREE THIS EXIT WORK AREA AND EXIT                            *
*                                                                     *
***********************************************************************
N1$EXIT  DS    0H
         SR    R2,R2               CLEAR RETURN CODE
N1$BYE   DS    0H
*               5. CLEANUP AND RETURN                                 *
         BAS   R14,N1$CLEAN
*
         LR    R1,R13
         L     R13,4(,R13)
         FREEMAIN R,LV=DSAN1L,A=(1),SP=11
         LR    R15,R2              SET RETURN CODE
         L     R14,12(,R13)        RESTORE REGISTERS
         LM    R0,R12,20(R13)      RESTORE REGISTERS
         BSM   0,R14               RETURN
N1$DENY  LA    R2,16               DENY LOGON
*
**       PER OY48170 (0X250) NEED TO SET SWITCHES TO PREVENT
**       IKJEFLN2 FROM BEING CALLED
*
         PARM  N1SWITCH
         OI    4(R1),N1SW4NPR      SET "NOPROMPT" SWITCH
         NI    4(R1),255-N1SW4IN2  RESET "INVOKE IKJEFLN2" SWITCH
         B     N1$BYE
         TITLE 'IKJEFLN1 - HOUSEKEEPING FUNCTIONS'
***********************************************************************
*                                                                     *
* ROUTINE NAME -                                                      *
*    N1$HSKP                                                          *
*                                                                     *
* FUNCTION -                                                          *
*    PERFORMS HOUSEKEEPING FUNCTIONS FOR LOGONXIT.                    *
*                                                                     *
* OPERATION -                                                         *
*    1) ISSUES ESTAE.  IF ESTAE IS UNSUCCESSFUL, TELLS TSO USER AND   *
*       DENIES LOGON.                                                 *
*    7) ATTEMPTS TO OPEN SYS1.UADS.  IF OPEN IS UNSUCCESSFUL, TELLS   *
*       TSO USER AND DENIES LOGON.                                    *
*    8) GETS STORAGE FOR UADS DATA BLOCKS.                            *
*   14) RETURNS TO THE MAINLINE.
*                                                                     *
* ENTRY POINTS -                                                      *
*    N1$HSKP                                                          *
*                                                                     *
* EXTERNAL REFERENCES -                                               *
*    GETAUTH                                                          *
*                                                                     *
* INPUT -                                                             *
*    NONE                                                             *
*                                                                     *
* OUTPUT -                                                            *
*    NONE                                                             *
*                                                                     *
* MESSAGES -                                                          *
*    'ESTAE UNSUCCESSFUL - RC=NNNN'                                   *
*    'OPEN OF SYS1.UADS UNSUCCESSFUL'                                 *
*                                                                     *
***********************************************************************
         SPACE 3
N1$HSKP  DS    0H
         SUBENTRY ,
         EJECT
***********************************************************************
*                                                                     *
*       ISSUES ESTAE.  IF ESTAE IS UNSUCCESSFUL, TELLS TSO USER AND   *
*       DENIES LOGON.                                                 *
*                                                                     *
***********************************************************************
         L     R1,=A(LESTAE)
         MVC   N1@ESTAE(LGESTAE),0(R1) COPY ESTAE PARM LIST
         L     R3,=A(GP$ESTAE)     GET ADDRESS OF ESTAE EXIT
         LA    R4,ETESTPM          GET ADDRESS OF ESTAE PARMS
         LA    R1,N1$RETRY         POINT TO RETRY ROUTINE
         ST    R1,0(,R4)           SAVE ADDRESS OF RETRY ROUTINE
         ST    R9,4(,R4)           SAVE PHASE DSA ADDRESS
         ST    R11,8(,R4)          SAVE EXTOEX ADDRESSS
         ST    R10,12(,R4)         SAVE INPUT ADDRESSS
         ESTAE (3),PARAM=(4),MF=(E,N1@ESTAE) ESTABLISH ESTAE
         LTR   R15,R15             WAS ESTAE SUCCESSFUL
         BNZ   N1$HNSTA            NO - GO GIVE MESSAGE
         EJECT
***********************************************************************
*                                                                     *
*       BUILDS CPPL.                                                  *
*                                                                     *
***********************************************************************
         PARM  N1UPT               GET ADDRESS OF UPT
         ST    R1,N1@CPPL+CPPLUPT-CPPL PUT IN CPPL
         PARM  N1PSCB              GET ADDRESS OF MY PSCB
         ST    R1,N1@CPPL+CPPLPSCB-CPPL PUT IN CPPL
         PARM  N1ECT               GET ADDRESS OF ECT
         ST    R1,N1@CPPL+CPPLECT-CPPL PUT IN CPPL
         EJECT
***********************************************************************
*                                                                     *
*       ATTEMPTS TO OPEN SYS1.UADS.  IF OPEN IS UNSUCCESSFUL, TELLS   *
*       TSO USER AND DENIES LOGON.                                    *
*                                                                     *
***********************************************************************
         MVC   ETUADS,SYSUADS      MOVE SYS1.UADS DCB TO DYNAMIC AREA
         MVC   ETOPENL,OPENUPDT    MOVE OPEN LIST TO DYNAMIC AREA
         LA    R15,ETJFCB          GET ADDRESS OF JFCB AREA
         ST    R15,ETEXLST         PUT IN ETEXLST
         MVI   ETEXLST,X'87'       INDICATE JFCB ADDRESS
         LA    R15,ETEXLST         GET ADDRESS OF ETEXLST
         LA    R1,ETUADS           GET ADDRESS OF SYSUADS DCB
         USING IHADCB,R1           GET DCB ADDRESSABILITY
         STCM  R15,B'0111',DCBEXLSA PUT ADDRRESS OF ETEXLST IN DCB
         STCM  R1,B'0111',ETOPENL+1 PUT ADDR OF DCB IN OPEN LIST
         DROP  R1                  DROP DCB ADDRESSABILITY
         OPEN  MF=(E,ETOPENL)      ATTEMPT TO OPEN SYS1.UADS
         TM    ETUADS+DCBOFLGS-IHADCB,DCBOFOPN DID UADS OPEN
         BZ    N1$HNOPN            NO - GO TO ERROR ROUTINE
         RDJFCB MF=(E,ETOPENL)     YES - READ JFCB FOR LATER ENQ
         L     R15,PSATOLD-PSA     GET ADDRESS OF MY TCB
         L     R15,TCBTIO-TCB(,R15) GET ADDRESS OF MY TIOT
         AH    R15,ETUADS+DCBTIOT-IHADCB GET ADDRESS OF UADS TIOT
         MVC   ETAUCB,16(R15)      SAVE UCB ADDRESS FOR RESERVE
         EJECT
***********************************************************************
*                                                                     *
*       GETS STORAGE FOR UADS DATA BLOCKS.                            *
*                                                                     *
***********************************************************************
         LH    R0,ETUADS+DCBBLKSI-IHADCB GET BLKSIZE
         MH    R0,=H'3'            MULTIPLY BY 3
*                                  (ASKBACK, TERM, INFO)
         AH    R0,=H'8'            INCREASE FOR HEADERS
         ST    R0,ETUADSIZ         SAVE SIZE FOR FREEMAIN
         GETMAIN RU,LV=(0),BNDRY=PAGE GET AREA FOR SYS1.UADS BUFFER
         ST    R1,ETUADADR         SAVE ADDR OF GOTTEN AREA
         LH    R15,ETUADS+DCBBLKSI-IHADCB GET BLOCK LEN
         STH   R15,2(R1)           SAVE HEADER FOR KEYVAL
         LA    R1,4(R1)            POINT TO DATA AREA
         ST    R1,ETAASKB          SAVE ASKBACK BLOCK ADDR
         AR    R1,R15              MOVE TO NEXT BLOCK
         STH   R15,2(R1)           SAVE HEADER FOR KEYVAL
         LA    R1,4(R1)            POINT TO DATA AREA
         ST    R1,ETATERM          SAVE TERMINAL BLOCK ADDR
         AR    R1,R15              MOVE TO NEXT BLOCK
         ST    R1,ETAINFO          SAVE ADDRESS OF INFO BLOCK BUFFER
         EJECT
********************************************************************
*
*        BLANK OUT ASKBACK AND TERM BLOCK
*
********************************************************************
         L     R2,ETAASKB          GET ADDR OF BLOCK
         LR    R1,R2               MOVE ADDRESS
         BCTR  R1,0                NOW GET LENGTH
         BCTR  R1,0
         LH    R3,0(R1)            GET LENGTH OF BLOCK
         LR    R15,R3              SAVE IT
         L     R1,=X'40000000'     SET PAD CHAR
         SR    R0,R0               CLEAR FROM ADDR
         MVCL  R2,R0               CLEAR BLOCK
         L     R2,ETATERM          POINT AT TERM BLOCK
         LR    R3,R15              SET LENGTH
         MVCL  R2,R0               BLANK IT OUT
         EJECT
***********************************************************************
*                                                                     *
*       RETURNS TO THE MAINLINE.                                      *
*                                                                     *
***********************************************************************
         SR    R15,R15             SET GOOD RETURN CODE
N1$HEXIT DS    0H
         SUBEXIT ,
         EJECT
***********************************************************************
*                                                                     *
*       INFORM USER THAT OPEN FAILED AND DENY LOGON.                  *
*                                                                     *
***********************************************************************
N1$HNOPN DS    0H                  SYS1.UADS DID NOT OPEN
         LA    R0,L'OPENMSG        GET LENGTH OF MESSAGE
         LA    R1,OPENMSG          POINT TO MESSAGE
         TPUT  (1),(0),R           ISSUE MESSAGE
         LA    R15,4               SET RETURN CODE
         OI    ETBITS1,ET1DENY     DENY LOGON
         B     N1$HEXIT            EXIT
         EJECT
***********************************************************************
*                                                                     *
*       INFORM USER THAT ESTAE RETURN CODE WAS NOT ZERO AND DENY      *
*       LOGON.                                                        *
*                                                                     *
***********************************************************************
N1$HNSTA DS    0H                  NON-ZERO RETURN CODE FROM ESTAE
         LR    R2,R15              PROTECT RETURN CODE
         L     R1,=A(ESTAEMSG)
         MVC   N1@MSGAR(L'ESTAEMSG),0(R1)  COPY MESSAGE
         CVD   R15,N1@WORK1        CONVERT TO DECIMAL
         OI    N1@WORK1+7,X'0F'    FIX SIGN
         UNPK  N1@WORK1(5),N1@WORK1+5(3) UNPACK
         MVC   N1@MSGAR+24(4),N1@WORK1+1 MOVE INTO MESSAGE
         LA    R0,L'ESTAEMSG       GET LENGTH OF MESSAGE
         LA    R1,N1@MSGAR         POINT TO MESSAGE
         TPUT  (1),(0),R           ISSUE MESSAGE
         LR    R15,R2              RESTORE RETURN CODE
         OI    ETBITS1,ET1DENY     DENY LOGON
         B     N1$HEXIT            EXIT
         TITLE 'IKJEFLN1 - CLEANUP RESOURCES'
*********************************************************************
*
* ROUTINE NAME -
*    N1$CLEAN
*
* FUNCTION -
*    PERFORMS CLEANUP FUNCTIONS.
*
* OPERATION -
*    9) IF UADS WAS OPENED, CLOSE AND FREE BUFFER.
*    9) IF ANYTHING WAS ENQ'D ON, DEQ IT.
*   10) CANCEL ESTAE.
*
*
* ENTRY POINTS -
*    N1$CLEAN
*
* EXTERNAL REFERENCES -
*    NONE
*
* INPUT -
*    NONE
*
* OUTPUT -
*    NONE
*
* MESSAGES -
*    NONE
*
*********************************************************************
         SPACE 3
N1$CLEAN DS    0H                  RETURN TO CALLER
         SUBENTRY ,                PROTECT RETURN CODE
         EJECT
*********************************************************************
*
*       IF UADS WAS OPENED, CLOSE AND FREE BUFFER.
*
*********************************************************************
         TM    ETUADS+DCBOFLGS-IHADCB,DCBOFOPN DID UADS OPEN
         BZ    N1$CNOPN            NO - NO NEED TO DO FREEMAIN
N1$CCLS  CLOSE MF=(E,ETOPENL)      CLOSE SYS1.UADS
N1$CNOPN DS    0H
         EJECT
*********************************************************************
*
*       IF ANYTHING WAS ENQ'D/RESERVED'D ON, DEQ IT
*
*********************************************************************
         TM    ETBITS2,ET2UADRS    WAS SYSIFJUA/OPENUADS ENQ'D ON
         BZ    N1$CUADS            NO - CONTINUE
         MVC   N1@ENQLT,ENQLIST3   YES - COPY ENQ LIST
         MVI   N1@ENQLT+1,8        PUT LENGTH OF RNAME IN ENQ LIST
         LA    R15,QNAME           GET ADDRESS OF QNAME (SYSIKJUA)
         ST    R15,N1@ENQLT+4      PUT IN ENQ LIST
         LA    R15,RNAME           GET ADDR OF RNAME (OPENUADS)
         ST    R15,N1@ENQLT+8      PUT IN ENQ LIST
         LA    R1,N1@ENQLT         GET ADDRESS OF ENQ LIST
         DEQ   MF=(E,(1))          DEQ LIKE TSO ACCOUNT DOES
         NI    ETBITS2,255-ET2UADRS TURN OFF SYSIKJUA/OPENUADS RESV
N1$CUADS DS    0H
         TM    ETBITS2,ET2SPFRS    WAS SPFDSN/DSN ENQ'D ON
         BZ    N1$CSPF             NO - CONTINUE
         MVC   N1@ENQLT,RESLIST    YES - COPY RESERVE LIST
         MVI   N1@ENQLT+1,44       PUT LENGTH OF RNAME IN RES LIST
         MVC   N1@RNAME(44),ETJFCB MOVE DSNAME TO RNAME
         LA    R15,QNAME2          GET ADDRESS OF QNAME (SPFDSN  )
         ST    R15,N1@ENQLT+4      PUT IN RESERVE LIST
         LA    R15,N1@RNAME        GET ADDR OF RNAME (DSN)
         ST    R15,N1@ENQLT+8      PUT IN RESERVE LIST
         LA    R15,ETAUCB          GET ADDRESS OF UCB ADDRESS
         ST    R15,N1@ENQLT+12     PUT IN RESERVE LIST
         LA    R1,N1@ENQLT         GET ADDRESS OF RESERVE LIST
         DEQ   MF=(E,(1))          DEQ LIKE ISPF DOES
         NI    ETBITS2,255-ET2SPFRS TURN OFF SPFDSN/DSN RESERVED
N1$CSPF  DS    0H
         TM    ETBITS2,ET2SPFE0    WAS MEMBER0 ENQ'D ON
         BZ    N1$CDEQ0            NO - GO CONTINUE
         MVC   N1@ENQLT,ENQLIST2   YES - COPY ENQ LIST
         MVI   N1@ENQLT+1,52       PUT LENGTH OF RNAME IN ENQ LIST
         MVC   N1@RNAME(44),ETJFCB MOVE DSNAME TO RNAME
         LH    R15,ETUSERID        GET LENGTH OF USERID
         LA    R1,ETMEMBER(R15)    POINT TO BYTE AFTER USERID
         MVI   0(R1),C'0'          ADD SUFFIX TO MAKE MEMBER0
         MVC   N1@RNAME+44(8),ETMEMBER APPEND MEMBER0 NAME TO DSN
         LA    R15,QNAME3          GET ADDRESS OF QNAME (SPFEDIT )
         ST    R15,N1@ENQLT+4      PUT IN ENQ LIST
         LA    R15,N1@RNAME        GET ADDR OF RNAME (DSN+MEMBER0)
         ST    R15,N1@ENQLT+8      PUT IN ENQ LIST
         LA    R1,N1@ENQLT         GET ADDRESS OF ENQ LIST
         DEQ   MF=(E,(1))          DEQ LIKE ISPF DOES
         NI    ETBITS2,255-ET2SPFE0 TURN OFF MEMBER0 ENQ'D ON
N1$CDEQ0 DS    0H
         TM    ETBITS2,ET2SPFEI    WAS INFO BLOCK ENQ'D ON
         BZ    N1$CDEQI            NO - CONTINUE
         MVC   N1@ENQLT,ENQLIST2   YES - COPY ENQ LIST
         MVI   N1@ENQLT+1,52       PUT LENGTH OF RNAME IN ENQ LIST
         MVC   N1@RNAME(44),ETJFCB MOVE DSNAME TO RNAME
         MVC   N1@RNAME+44(8),ETINFOID APPEND INFO BLOCK NAME TO DSN
         LA    R15,QNAME3          GET ADDRESS OF QNAME (SPFEDIT )
         ST    R15,N1@ENQLT+4      PUT IN ENQ LIST
         LA    R15,N1@RNAME        GET ADDR OF RNAME (DSN+USERID$)
         ST    R15,N1@ENQLT+8      PUT IN ENQ LIST
         LA    R1,N1@ENQLT         GET ADDRESS OF ENQ LIST
         DEQ   MF=(E,(1))          DEQ LIKE ISPF DOES
         NI    ETBITS2,255-ET2SPFEI TURN OFF INFO BLOCK ENQ'D ON
N1$CDEQI DS    0H
         EJECT
*********************************************************************
*
*       IF LOGON IS TO BE DENIED, SET DISCONNECT INDICATOR AND WAIT
*       5 SECONDS IF THIS IS A DISPLAY TERMINAL TO GIVE THE USER
*       TIME TO READ THE DIAGNOSTICS.
*
*********************************************************************
         TM    ETBITS1,ET1DENY     IS LOGON TO BE DENIED
         BNO   N1$COK              NO - CONTINUE
         GTSIZE ,                  DETERMINE TERMINAL TYPE
         LTR   R0,R0               WAS THIS A DISPLAY
         BZ    N1$CEND             NO - CONTINUE
         STIMER WAIT,DINTVL==C'00000500' - WAIT A LITTLE WHILE FIRST
         B     N1$CEND             THEN CONTINUE
N1$COK   DS    0H
         EJECT
*********************************************************************
*
*       IF DEBUGGING MODE, HANDLE DISPLAYS
*
*********************************************************************
N1$CEND  DS    0H
         TM    ETBITS3,ET3DEBUG    DEBUG IN PROGRESS??
         BZ    N1$C999             NOPE, SKIP CODE
         WTO   'IKJEFLN1: EXITING',ROUTCDE=(2)
         CLI   ETTEST,128
         BNE   N1$C999
         LR    R1,R10
         L     R15,=A(IKJEXIT+X'80000000')
         BASR  R14,R15
N1$C999  DS    0H
         EJECT
*********************************************************************
*
*       CANCEL ESTAE.
*
*********************************************************************
         ESTAE 0                   CANCEL ESTAE
         EJECT
********************************************************************
*
*       RETURN TO CALLER
*
********************************************************************
         SUBEXIT ,                 GET RETURN REG
         TITLE 'IKJEFLN1 - VALIDITY CHECK ROUTINE FOR USERID'
***********************************************************************
*                                                                     *
* ROUTINE NAME -                                                      *
*    N1$USER                                                          *
*                                                                     *
* FUNCTION -                                                          *
*    ENTERED AS A VALIDITY CHECKING ROUTINE FROM IKJPARS TO VERIFY    *
*    THE POSITIONAL VALUE OF USERID.                                  *
*                                                                     *
* OPERATION -                                                         *
*    3) CHECKS TO SEE IF THE USERID IS IN THE TABLE OF USERIDS TO     *
*       NEVER BE DENIED LOGON.  IF SO, BYPASS DIVISIONAL QUOTA        *
*       CHECKING.                                                     *
*    4) CHECKS THE NUMBER OF USERS ALLOWED TO BE LOGGED ON FOR THIS   *
*       USER'S DIVISION.  IF ZERO, THE LOGON IS DENIED.  OTHERWISE,   *
*       THE ASCBS ARE SEARCHED TO DETERMINE IF THE DIVISIONAL QUOTA   *
*       IS CURRENTLY LOGGED ON.  IF SO, THE LOGON IS DENIED.          *
*    5) CHECKS TO SEE IF THE USERID IS FOUND IN SYS1.UADS. IF NOT,    *
*       THE LOGON IS DENIED.
*    6) IF INFO BLOCK IS AVAILABLE, GET TTR.  IF NOT, CREATE ONE
*       PADDED WITH BLANKS.
*    7) READ IN INFO BLOCKS.
*   13) RETURN TO IKJPARS.                                            *
*                                                                     *
* ENTRY POINTS -                                                      *
*    N1$USER                                                          *
*                                                                     *
* EXTERNAL REFERENCES -                                               *
*    GETPASS                                                          *
*                                                                     *
* INPUT -                                                             *
*    NONE                                                             *
*                                                                     *
* OUTPUT -                                                            *
*                                                                     *
* MESSAGES -                                                          *
*    'USER-ID LOGGING ON TERMINAL - ASID X'NN''
*    'USER NOT AUTHORIZED TO USE TIME-SHARING'                        *
*    'PROMPT LIMIT EXCEEDED'
*    'DIVISIONAL QUOTA CURRENTLY LOGGED ON. TRY AGAIN LATER'          *
*    'PASSWORD NOT AUTHORIZED FOR THIS USERID'                        *
*    'YOU ARE NOT AUTHORIZED TO USE THIS TERMINAL
*
***********************************************************************
         EJECT
N1$USER  DS    0H
         SUBENTRY ,
         EJECT
***********************************************************************
*                                                                     *
*       EXTRACTS THE USERID FROM THE PARM LIST AND PLACES IT IN       *
*       ETUSERID PADDED WITH BLANKS.                                  *
*                                                                     *
***********************************************************************
         PARM  N1USERID
         MVC   ETUSERID+2(7),0(R1) MOVE IN ID
         SR    R2,R2
         LA    R3,7                MAX TO LOOP
N1$ULLP  CLI   0(R1),C' '          IS IT BLANK
         BE    N1$ULEP
         LA    R2,1(,R2)           INCREMENT COUNT
         LA    R1,1(,R1)           INCREMENT POINTER
         BCT   R3,N1$ULLP
N1$ULEP  STH   R2,ETUSERID         SAVE LENGTH OF USERID
         LA    R14,N1$UM24         GET ADDR FOR 24 BIT MODE
         BSM   0,R14               GO AND SET MODE
N1$UM24  DS    0H
         EJECT
*********************************************************************
*
*       BUILD LOG WTO MESSAGE AND ISSUE IT.
*
*********************************************************************
         L     R1,=A(LOGWTO)       POINT AT MESSAGE
         MVC   N1@MSGAR(LLOGWTO),0(R1)
         MVC   N1@MSGAR+4(7),ETUSERID+2 MOVE USERID TO LOG WTO MESSAGE
         MVC   N1@MSGAR+23(8),ETTERMID+2 MOVE TERMID TO LOG WTO MESSAGE
         MVC   N1@MSGAR+41(4),ETASIDE MOVE ASID TO LOG WTO MESSAGE
         WTO   MF=(E,N1@MSGAR)     ISSUE LOG WTO MESSAGE
         EJECT
***********************************************************************
*                                                                     *
*       CHECKS TO SEE IF THE USERID IS IN THE TABLE OF USERIDS TO     *
*       NEVER BE DENIED LOGON.  IF SO, BYPASS DIVISIONAL QUOTA        *
*       CHECKING.                                                     *
*                                                                     *
***********************************************************************
         L     R14,=A(USIDTABL)    GET ADDRESS OF USERID TABLE
N1$UNUSR DS    0H                  CHECK NEXT USERID IN TABLE
         CLI   0(R14),X'FF'        IS THIS END OF USERID TABLE
         BE    N1$UCHKD            YES - GO CHECK DIVISION
         CLC   0(7,R14),ETUSERID+2 NO - IS THIS MATCHING USERID
         BE    N1$UUSOK            YES - NEVER DENY LOGON
         LA    R14,7(,R14)         NO - BUMP TO NEXT USERID
         B     N1$UNUSR            AND LOOP
         EJECT
***********************************************************************
*                                                                     *
*       CHECKS THE NUMBER OF USERS ALLOWED TO BE LOGGED ON FOR THIS   *
*       USER'S DIVISION.  IF ZERO, THE LOGON IS DENIED.  OTHERWISE,   *
*       THE ASCBS ARE SEARCHED TO DETERMINE IF THE DIVISIONAL QUOTA   *
*       IS CURRENTLY LOGGED ON.  IF SO, THE LOGON IS DENIED.          *
*                                                                     *
***********************************************************************
N1$UCHKD DS    0H                  CHECK FOR DIVISION QUOTA LOGGED ON
         L     R14,=A(DIVTABLE)    GET ADDRESS OF DIVISION TABLE
N1$UNDIV DS    0H                  CHECK NEXT DIVISION IN TABLE
         CLI   0(R14),X'FF'        IS THIS END OF DIVISION TABLE
         BE    N1$UUSOK            YES - ALLOW LOGON
         CLC   0(1,R14),ETUSERID+2 NO - IS THIS MATCHING DIVISION
         BE    N1$UCHKC            YES - GO CHECK DIVISION COUNT
         LA    R14,2(,R14)         NO - BUMP TO NEXT DIVISION ENTRY
         B     N1$UNDIV            AND LOOP
N1$UCHKC DS    0H                  CHECK NUMBER LOGGED ON FOR THIS DIV.
         SLR   R4,R4               CLEAR R4 FOR ICM OF COUNT
         ICM   R4,B'0001',1(R14)   GET COUNT FOR THIS DIVISION
         BZ    N1$UDIVQ            IF ZERO - GO GIVE MESSAGE
         L     R14,CVTPTR          IF NON-ZERO - GET ADDRESS OF CVT
         USING CVTMAP,R14          GET CVT ADDRESSABILITY
         L     R14,CVTASVT         GET ADDRESS OF ASVT
         DROP  R14                 DROP CVT ADDRESSABILITY
         LA    R14,ASVTENTY-ASVT-4(R14) GET ADDR OF 1ST ASVT ENTRY - 4
N1$UNASC DS    0H                  CHECK NEXT ASCB FOR THIS DIV. USER
         LA    R14,4(,R14)         GET ADDRESS OF NEXT ASVT ENTRY
         L     R1,0(,R14)          GET ADDRESS OF ASCB
         LA    R1,0(,R1)           CLEAR HIGH ORDER BYTE
         LTR   R1,R1               IS THIS END OF ASVT
         BZ    N1$UUSOK            YES - ALLOW LOGON
         TM    0(R14),KBIT0        NO - IS ASCB AVAILABLE
         BO    N1$UNASC            NO - GO TO NEXT ASCB
         CLC   =C'ASCB',ASCBASCB-ASCB(R1) YES - IS ACRONYM PRESENT
         BNE   N1$UNASC            NO - GO TO NEXT ASCB
         CLC   =F'0',ASCBTSB-ASCB(R1) YES - IS TSB ADDRESS ZERO
         BE    N1$UNASC            YES - GO TO NEXT ASCB
         L     R1,ASCBJBNS-ASCB(R1) NO - GET ADDRESS OF JOBNAME
         CLC   0(1,R1),ETUSERID+2  IS DIVISION THE SAME
         BNE   N1$UNASC            NO - GO TO NEXT ASCB
         BCT   R4,N1$UNASC         YES - GO TO NEXT ASCB IF COUNT LEFT
         B     N1$UDIVQ            IF NOT - GO GIVE MESSAGE
N1$UUSOK DS    0H                  USER PASSED DIVISIONAL QUOTA TEST
         EJECT
*******************************************************************
*
*       RESERVE UADS PDS DIRECTORY
*
*******************************************************************
         BAS   R14,VRESERVE        RESERVE UADS DIRECTORY
         EJECT
***********************************************************************
*                                                                     *
*       CHECKS TO SEE IF THE USERID IS FOUND IN SYS1.UADS. IF NOT,    *
*       THE LOGON IS DENIED.
*                                                                     *
***********************************************************************
         MVC   ETMEMBER,=CL8' '    CLEAR
         MVC   ETMEMBER(7),ETUSERID+2 COPY USERID TO MEMBER0 NAME
         LH    R15,ETUSERID        GET LENGTH OF USERID
         LA    R3,ETMEMBER(R15)    POINT TO BYTE AFTER USERID
         MVI   0(R3),C'0'          ADD SUFFIX (WILL USE R3 LATER
*                                              NEAR LABEL N1$U1ST)
         XC    N1@BLDL(8*N1@BLNSZ+4),N1@BLDL CLEAR LIST
         MVI   N1@BLFF+1,1         SET FF IN BLDL LIST
         MVI   N1@BLLL+1,12        SET LL IN BLDL LIST
         MVC   N1@BLNM,ETMEMBER    MOVE MEMBER0 NAME TO BLDL LIST
         BLDL  ETUADS,N1@BLDL      SEARCH DIRECTORY FOR MEMBER0
         LTR   R15,R15             WAS MEMBER FOUND
         BNZ   N1$UNFND            NO - GO TO ERROR ROUTINE
         EJECT
*********************************************************************
*
*       IF INFO BLOCK IS AVAILABLE, GET TTR.  IF NOT, CREATE ONE
*       PADDED WITH BLANKS.
*
*********************************************************************
         MVC   ETINFOID,=CL8' '    CLEAR
         MVC   ETINFOID(7),ETUSERID+2 MOVE IN USERID AND BLANKS
         LH    R1,ETUSERID         GET LENGTH
         LA    R1,ETINFOID(R1)     POINT AT FIRST BLANK
         MVI   0(R1),C'$'          SET TRAILING CHAR
         MVC   N1@ENQLT,ENQLIST2   COPY ENQ LIST
         MVI   N1@ENQLT+1,52       PUT LENGTH OF RNAME IN ENQ LIST
         MVC   N1@RNAME(44),ETJFCB MOVE DSNAME TO RNAME
         MVC   N1@RNAME+44(8),ETINFOID APPEND INFO BLOCK NAME TO DSN
         LA    R15,QNAME3          GET ADDRESS OF QNAME (SPFEDIT )
         ST    R15,N1@ENQLT+4      PUT IN ENQ LIST
         LA    R15,N1@RNAME        GET ADDR OF RNAME (DSN+USERID$)
         ST    R15,N1@ENQLT+8      PUT IN ENQ LIST
         LA    R1,N1@ENQLT         GET ADDRESS OF ENQ LIST
         ENQ   MF=(E,(1))          ENQ LIKE ISPF DOES
         OI    ETBITS2,ET2SPFEI    INDICATE INFO BLOCK ENQ'D ON
         MVC   N1@BLNM(8),ETINFOID MOVE USERID TO BLDL LIST
         BLDL  ETUADS,N1@BLDL      SEARCH DIRECTORY FOR USERID$
         LTR   R15,R15             WAS USERID$ FOUND
         BNZ   N1$UCRET            NO - GO CREATE INFO BLOCK
         MVC   ETTTRINF,N1@BLTTR   YES - SAVE INFO TTR FOR LATER
         POINT ETUADS,ETTTRINF     POINT AT INFO BLOCK
         L     R2,ETAINFO          GET ADDRESS OF INFO BLK BUFFER
         READ  ETDECB,SF,ETUADS,(R2),'S',MF=E
         CHECK ETDECB
         LH    R1,ETUADS+DCBBLKSI-IHADCB GET BLKSIZE DESIRED
         L     R15,ETDECB+16       GET IOB ADDRESS
         SH    R1,14(,R15)         GET TRUE BLKSIZE
         ST    R1,ETLINFO
         B     N1$URED0            GO READ MEMBER0
         EJECT
*********************************************************************
*
*       CREATE INFO BLOCK.
*
*********************************************************************
N1$UCRET DS    0H                  CREATE INFO BLOCK
         L     R4,ETAINFO          GET ADDRESS OF INFO BLOCK
         LR    R0,R4               GET ADDRESS OF INFO BLOCK
         LH    R1,ETUADS+DCBBLKSI-IHADCB GET LENGTH OF INFO BLOCK
         L     R6,=A(INFOMODL)     GET ADDRESS OF MODEL
         L     R7,=A(LINFMODL)     GET ADDR OF FILL AND LENGTH
         L     R7,0(,R7)           GET FILL CHARACTER AND LENGTH
         MVCL  R0,R6               CREATE MODEL INFO BLOCK
         CLOSE MF=(E,ETOPENL)      CLOSE UADS FOR UPDATE
         MVC   ETOPENL(1),OPENOUT CHANGE OPEN LIST
         OPEN  MF=(E,ETOPENL)      OPEN UADS FOR OUTPUT
         WRITE ETDECB,SF,ETUADS,(R4),'S',MF=E WRITE INFO BLOCK
         CHECK ETDECB              WAIT ON I/O
         NOTE  ETUADS              GET TTR FOR INFO BLOCK
         ST    R1,ETTTRINF         SAVE FOR LATER
         MVC   N1@BLNM(8),ETINFOID MOVE USERID TO BLDL LIST
         XC    N1@BLTTR,N1@BLTTR   ZERO TTR FIELD FOR ADD
         STOW  ETUADS,N1@BLNM,A    UPDATE DIRECTORY
         LR    R4,R15              PROTECT RETURN CODE FROM STOW
         CLOSE MF=(E,ETOPENL)      CLOSE UADS FOR OUTPUT
         LTR   R15,R4              WAS STOW SUCCESSFUL
         BNZ   N1$UBSTO            NO - GO TO ERROR ROUTINE
         MVC   ETOPENL(1),OPENUPDT YES - CHANGE OPEN LIST
         OPEN  MF=(E,ETOPENL)      OPEN UADS FOR UPDATE
N1$URED0 DS    0H
         EJECT
********************************************************************
*
*       FIND TTRS OF TERMINAL BLOCK AND ASKBACK BLOCK
*
********************************************************************
         XC    ETTTRTRM,ETTTRTRM   CLEAR TTR
         XC    N1@BLNM(8*N1@BLNSZ),N1@BLNM CLEAR ENTRIES
         STM   R2,R3,N1@WORK1      SAVE REGISTERS
         LA    R0,7                MAX ENTRIES TO GENERATE
         LA    R1,ETTERMID+2       POINT AT TERMINAL ID
         MVC   N1@BLNM(8),=C'#@@@@@@@' GLOBAL DEFAULT NAME
         LA    R2,N1@BLNM+1        FIRST CHAR TO MODIFY
         LA    R3,N1@BLNM          START OF EACH ENTRY
N1$UTR1  MVC   N1@BLNSZ(8,R3),0(R3) PROPAGATE NAME
         LA    R2,N1@BLNSZ(R2)     POINT TO NEW ENTRY
         LA    R3,N1@BLNSZ(R3)     POINT TO NEW ENTRY
         MVC   0(1,R2),0(R1)       MOVE IN ID CHAR
         CLI   1(R1),C' '          IS THIS LAST CHAR
         BE    N1$UTR3             YES - SO BLANK REST
         LA    R2,1(R2)            POINT TO NEXT CHAR IN NAME
         LA    R1,1(R1)            POINT TO NEXT CHAR IN TERM
         BCT   R0,N1$UTR1          LOOP FOR NEXT CHAR
         B     N1$UTR4             ALL DONE - FULL NAME
N1$UTR2  MVI   0(R2),C' '          SET NEXT CHAR TO BLANK
N1$UTR3  LA    R2,1(R2)            POINT TO NEXT CHAR
         BCT   R0,N1$UTR2          LOOP TILL DONE
N1$UTR4  LA    R1,N1@BLNM          GET ORIG START
         SR    R3,R1               GET OFFSET
         SR    R2,R2               CLEAR REG
         D     R2,=A(N1@BLNSZ)     GET NUMBER OF ENTRIES
         LA    R3,1(R3)            INCREASE BY ONE
         STH   R3,N1@BLFF          SAVE NUMBER OF ENTRIES
         LM    R2,R3,N1@WORK1      RESTORE REGISTERS
         BLDL  ETUADS,N1@BLDL      SEARCH DIRECTORY FOR #TERMID
         CH    R15,=H'8'           ANY BAD ERRORS
         BNL   N1$UTR99            YES - SKIP
         LH    R1,N1@BLFF          GET NUMBER OF ENTRIES
         LR    R0,R1               SAVE COUNT
         BCTR  R1,0                LESS ONE
         MH    R1,=AL2(N1@BLNSZ)   TIMES ENTRY SIZE
         LA    R1,N1@BLTTR(R1)     POINT AT LAST TTR
N1$UTR8  CLI   2(R1),0             ANY TTR
         BNE   N1$UTR9             YES - SO USE IT
         SH    R1,=AL2(N1@BLNSZ)   BACK UP
         BCT   R0,N1$UTR8
         B     N1$UTR99            NO ENTRIES PRESENT SO SKIP
N1$UTR9  MVC   ETTTRTRM,0(R1)      SAVE TERMINAL BLOCK TTR
         POINT ETUADS,ETTTRTRM     POINT AT INFO BLOCK
         L     R2,ETATERM          GET ADDRESS OF INFO BLK BUFFER
         READ  ETDECB,SF,ETUADS,(R2),'S',MF=E
         CHECK ETDECB
         LH    R1,ETUADS+DCBBLKSI-IHADCB GET BLKSIZE DESIRED
         L     R15,ETDECB+16       GET IOB ADDRESS
         SH    R1,14(,R15)         GET TRUE BLKSIZE
         ST    R1,ETLTERM
N1$UTR99 MVC   N1@BLFF(2),=H'1'    SET NUMBER OF ENTRIES
         XC    ETTTRASK,ETTTRASK   CLEAR TTR
         MVC   N1@BLNM,=CL8'ASKBACK' SET NAME
         BLDL  ETUADS,N1@BLDL      SEARCH DIRECTORY FOR ASKBASK
         LTR   R15,R15             WAS IT FOUND
         BNZ   *+10                NO - SKIP
         MVC   ETTTRASK,N1@BLTTR   SAVE ASK BACK BLOCK TTR
         POINT ETUADS,ETTTRASK     POINT AT INFO BLOCK
         L     R2,ETAASKB          GET ADDRESS OF INFO BLK BUFFER
         READ  ETDECB,SF,ETUADS,(R2),'S',MF=E
         CHECK ETDECB
         LH    R1,ETUADS+DCBBLKSI-IHADCB GET BLKSIZE DESIRED
         L     R15,ETDECB+16       GET IOB ADDRESS
         SH    R1,14(,R15)         GET TRUE BLKSIZE
         ST    R1,ETLASKB
         EJECT
*******************************************************************
*
*       DEQ UADS PDS DIRECTORY NOW SO PROMPT WONT HANG UP OTHER
*       USERS TRYING TO LOGON
*
*******************************************************************
         BAS   R14,VDEQ            DEQ UADS DIRECTORY
         EJECT
*******************************************************************
*
*       MERGE ANY INFO IN BLOCK WITH DATA FROM LOGON COMMAND
*              (FORWARD MERGE)
*
*******************************************************************
         INFO  MADDRESS
         LA    R3,ETADDRS
         BAL   R14,N1$UMV90
         INFO  MPROGNAM
         LA    R3,ETPRGNM
         BAL   R14,N1$UMV90
         INFO  MDEFTIME
         LA    R3,ETCPTIM
         BAL   R14,N1$UMV90
         INFO  MROOM
         LA    R3,ETROOM
         BAL   R14,N1$UMV90
         INFO  MFORMS
         LA    R3,ETFORM
         BAL   R14,N1$UMV90
         INFO  MLINECT
         LA    R3,ETLINCT
         BAL   R14,N1$UMV90
         INFO  MNAME
         LA    R3,ETNAME
         BAL   R14,N1$UMV90
         INFO  MPHONE
         LA    R3,ETPHONE
         BAL   R14,N1$UMV90
         B     N1$UMXT
         SPACE 2
*
**       SUBROUTINE TO MERGE DATA TO EXTEX
*
N1$UMV90 OC    0(2,R3),0(R3)       ANY LENGTH
         BNZR  R14                 YES, SO HAS DATA ALREADY
         CLI   9(R1),C' '          ANY INFO IN BLOCK
         BER   R14                 NO, SO LEAVE ALONE
         LA    R15,9(,R1)          SET START ADDRESS
         LA    R1,71(R1)           POINT TO LAST CHARACTER
N1$UMV95 CLI   0(R1),C' '          STILL A BLANK
         BNE   N1$UMV97            NO, SO HAVE END OF STRING
         BCT   R1,N1$UMV95         YES, SO LOOP TILL END
         DC    H'0'                CANT HAPPEN (HOHOHOHO)
N1$UMV97 LA    R1,1(R1)            REPOINT TO BLANK
         SR    R1,R15              GET LENGTH
         STH   R1,0(,R3)           SAVE LENGTH
         BCTR  R1,0                GET MACHINE LENGTH
         EX    R1,N1$UMV99         MOVE IN DATA
         BR    R14
N1$UMV99 MVC   2(0,R3),0(R15)      ** EXECUTED **
         SPACE 3
N1$UMXT  DS    0H
         EJECT
*******************************************************************
*
*       ALL DONE SO RETURN TO CALLER
*
*******************************************************************
         SR    R15,R15
N1$UEXIT DS    0H
         SUBEXIT ,                 RETURN
         EJECT
***********************************************************************
*                                                                     *
*       INFORM USER THAT USERID WAS NOT IN SYS1.UADS.  IF PROMPT
*       LIMIT NOT EXCEEDED, PROMPT FOR NEW USERID.  ELSE DENY LOGON.
*                                                                     *
***********************************************************************
N1$UNFND DS    0H                  USERID NOT IN SYS1.UADS
         BAS   R14,VDEQ            DEQ UADS PDS DIRECTORY
         OI    ETBITS1,ET1DENY     DENY LOGON
         LA    R0,L'NOTFOUND       GET LENGTH OF MESSAGE
         L     R1,=A(NOTFOUND)     POINT TO MESSAGE
         TPUT  (1),(0),R           ISSUE MESSAGE
         B     N1$UQUIT
         EJECT
***********************************************************************
*                                                                     *
*       INFORM USER THAT DIVISIONAL QUOTA CURRENTLY LOGGED ON, SET BIT*
*       TO DENY LOGON, AND SET RETURN CODE FOR IKJPARS TO STOP.       *
*                                                                     *
***********************************************************************
N1$UDIVQ DS    0H                  DIVISIONAL QUOTA CURRENTLY LOGGED ON
         OI    ETBITS1,ET1DENY     DENY LOGON
         LA    R0,L'DIVQUOTA       GET LENGTH OF MESSAGE
         L     R1,=A(DIVQUOTA)     POINT TO MESSAGE
         TPUT  (1),(0),R           ISSUE MESSAGE
         B     N1$UQUIT            QUIT
         EJECT
*********************************************************************
*
*       INFORM USER THAT STOW RETURN CODE WAS NOT ZERO AND DENY
*       LOGON.
*
*********************************************************************
N1$UBSTO DS    0H                  NON-ZERO RETURN CODE FROM STOW
         BAS   R14,VDEQ            DEQ UADS PDS DIRECTORY
         L     R1,=A(STOWMSG)
         MVC   N1@MSGAR(L'STOWMSG),0(R1) COPY MESSAGE
         CVD   R15,N1@WORK1        CONVERT TO DECIMAL
         OI    N1@WORK1+7,X'0F'    FIX SIGN
         UNPK  N1@WORK1(5),N1@WORK1+5(3) UNPACK
         MVC   N1@MSGAR+23(4),N1@WORK1+1 MOVE INTO MESSAGE
         LA    R0,L'STOWMSG        GET LENGTH OF MESSAGE
         LA    R1,N1@MSGAR         POINT TO MESSAGE
         TPUT  (1),(0),R           ISSUE MESSAGE
         OI    ETBITS1,ET1DENY     DENY LOGON
         B     N1$UQUIT            EXIT
         EJECT
*********************************************************************
*
*       TERMINATE PARSE.
*
*********************************************************************
N1$UQUIT DS    0H
         LA    R15,12              TERMINATE PARSE
         B     N1$UEXIT            AND EXIT
         EJECT
*******************************************************************
*
*       RESERVE ON QNAME SPFDSN RNAME DSN, AND
*       QNAME SYSIKJUA RNAME OPENUADS, TO INHIBIT UPDATES TO THE
*       UADS PDS DIRECTORY DURING BLDL AND FIND PROCESSING.
*
*******************************************************************
VRESERVE DS    0H
         SUBENTRY ,
         MVC   N1@ENQLT,RESLIST    COPY RESERVE LIST
         MVI   N1@ENQLT+1,44       PUT LENGTH OF RNAME IN RES LIST
         MVC   N1@RNAME(44),ETJFCB MOVE DSNAME TO RNAME
         LA    R15,QNAME2          GET ADDRESS OF QNAME (SPFDSN  )
         ST    R15,N1@ENQLT+4      PUT IN RESERVE LIST
         LA    R15,N1@RNAME        GET ADDR OF RNAME (DSN)
         ST    R15,N1@ENQLT+8      PUT IN RESERVE LIST
         LA    R15,ETAUCB          GET ADDRESS OF UCB ADDRESS
         ST    R15,N1@ENQLT+12     PUT IN RESERVE LIST
         LA    R1,N1@ENQLT         GET ADDRESS OF RESERVE LIST
         RESERVE MF=(E,(1))        RESERVE LIKE ISPF DOES
         OI    ETBITS2,ET2SPFRS    INDICATE SPFDSN/DSN RESERVED
         MVC   N1@ENQLT,ENQLIST3   COPY ENQ LIST
         MVI   N1@ENQLT+1,8        PUT LENGTH OF RNAME IN ENQ LIST
         LA    R15,QNAME           GET ADDRESS OF QNAME (SYSIKJUA)
         ST    R15,N1@ENQLT+4      PUT IN ENQ LIST
         LA    R15,RNAME           GET ADDR OF RNAME (OPENUADS)
         ST    R15,N1@ENQLT+8      PUT IN ENQ LIST
         LA    R1,N1@ENQLT         GET ADDRESS OF ENQ LIST
         ENQ   MF=(E,(1))          ENQ LIKE TSO ACCOUNT DOES
         OI    ETBITS2,ET2UADRS    INDICATE SYSIKJUA/OPENUADS RESV
         SUBEXIT ,
         SPACE 1
VDEQ     DS    0H
         SUBENTRY ,
         TM    ETBITS2,ET2UADRS    WAS SYSIFJUA/OPENUADS ENQ'D ON
         BZ    VDEQUADS            NO - CONTINUE
         MVC   N1@ENQLT,ENQLIST3   YES - COPY ENQ LIST
         MVI   N1@ENQLT+1,8        PUT LENGTH OF RNAME IN ENQ LIST
         LA    R15,QNAME           GET ADDRESS OF QNAME (SYSIKJUA)
         ST    R15,N1@ENQLT+4      PUT IN ENQ LIST
         LA    R15,RNAME           GET ADDR OF RNAME (OPENUADS)
         ST    R15,N1@ENQLT+8      PUT IN ENQ LIST
         LA    R1,N1@ENQLT         GET ADDRESS OF ENQ LIST
         DEQ   MF=(E,(1))          DEQ LIKE TSO ACCOUNT DOES
         NI    ETBITS2,255-ET2UADRS TURN OFF SYSIKJUA/OPENUADS RESV
VDEQUADS DS    0H
         TM    ETBITS2,ET2SPFRS    WAS SPFDSN/DSN ENQ'D ON
         BZ    VDEQSPF             NO - CONTINUE
         MVC   N1@ENQLT,RESLIST    YES - COPY RESERVE LIST
         MVI   N1@ENQLT+1,44       PUT LENGTH OF RNAME IN RES LIST
         MVC   N1@RNAME(44),ETJFCB MOVE DSNAME TO RNAME
         LA    R15,QNAME2          GET ADDRESS OF QNAME (SPFDSN  )
         ST    R15,N1@ENQLT+4      PUT IN RESERVE LIST
         LA    R15,N1@RNAME        GET ADDR OF RNAME (DSN)
         ST    R15,N1@ENQLT+8      PUT IN RESERVE LIST
         LA    R15,ETAUCB          GET ADDRESS OF UCB ADDRESS
         ST    R15,N1@ENQLT+12     PUT IN RESERVE LIST
         LA    R1,N1@ENQLT         GET ADDRESS OF RESERVE LIST
         DEQ   MF=(E,(1))          DEQ LIKE ISPF DOES
         NI    ETBITS2,255-ET2SPFRS TURN OFF SPFDSN/DSN RESERVED
VDEQSPF  DS    0H
         SUBEXIT ,
         TITLE 'IKJEFLN1 - UPDATE SCREEN USER FIELDS'
***********************************************************************
*                                                                     *
* ROUTINE NAME -                                                      *
*    N1$SCRN                                                          *
*                                                                     *
* FUNCTION -                                                          *
*    FILL IN THE ITEMS IN THE USER FIELDS ON THE SCREEN.              *
*                                                                     *
* OPERATION -                                                         *
*                                                                     *
*                                                                     *
* ENTRY POINTS -                                                      *
*    N1$SCRN                                                          *
*                                                                     *
* EXTERNAL REFERENCES -                                               *
*    NONE                                                             *
*                                                                     *
* INPUT -                                                             *
*    NONE                                                             *
*                                                                     *
* OUTPUT -                                                            *
*    NONE                                                             *
*                                                                     *
* MESSAGES -                                                          *
*    NONE                                                             *
*                                                                     *
* COMMENTS -                                                          *
*    NONE                                                             *
*                                                                     *
***********************************************************************
N1$SCRN  DS    0H
         SUBENTRY
         PARM  N1SWITCH
         OI    2(R1),N1SW2URF      MARK TO REFRESH THE FIELDS
         PARM  N1UFLDS             GET USER FIELDS
         CLC   0(4,R15),=F'2'      ANY VALUES
         BNE   N1$S10
         LR    R7,R1               PUT IN SAFE REGS
*  SET ADDRESS VALUE
         L     R1,0(,R7)           GET ADDRESS OF FIRST FIELD
         LA    R2,ETADDRS
         BAL   R14,N1$SMOV
*  SET PROGRAMMER NAME VALUE
         L     R1,1*4(,R7)         GET ADDRESS OF FIELD
         LA    R2,ETPRGNM
         BAL   R14,N1$SMOV
*  SET CPU TIME VALUE
         L     R1,2*4(,R7)         GET ADDRESS OF FIELD
         LA    R2,ETCPTIM
         BAL   R14,N1$SMOV
*  SET ROOM VALUE
         L     R1,3*4(,R7)         GET ADDRESS OF FIELD
         LA    R2,ETROOM
         BAL   R14,N1$SMOV
*  SET FORM VALUE
         L     R1,4*4(,R7)         GET ADDRESS OF FIELD
         LA    R2,ETFORM
         BAL   R14,N1$SMOV
*  SET MESSAGE CLASS VALUE
         L     R1,5*4(,R7)         GET ADDRESS OF FIELD
         LA    R2,ETMSGC
         BAL   R14,N1$SMOV
*  SET MESSAGE LEVEL VALUE
         L     R1,6*4(,R7)         GET ADDRESS OF FIELD
         LA    R2,ETMSGL
         BAL   R14,N1$SMOV
*  SET COPIES VALUE
         L     R1,7*4(,R7)         GET ADDRESS OF FIELD
         LA    R2,ETCOPY
         BAL   R14,N1$SMOV
*  SET LINE COUNT VALUE
         L     R1,8*4(,R7)         GET ADDRESS OF FIELD
         LA    R2,ETLINCT
         BAL   R14,N1$SMOV
*  SET JCL FLAG VALUE
         L     R1,9*4(,R7)         GET ADDRESS OF FIELD
         MVC   0(9,R1),=AL1(0,0,0,1,0,0,0,1,0) SET KEY,LEN, VALUE
         TM    ETBITS3,ET3JCL      IS JCL SET
         BZ    *+8                 NO, SKIP
         MVI   8(R1),C'S'
*  SET LISTINFO FLAG VALUE
         L     R1,10*4(,R7)        GET ADDRESS OF FIELD
         MVC   0(9,R1),=AL1(0,0,0,1,0,0,0,1,0) SET KEY,LEN, VALUE
         TM    ETBITS3,ET3LSTIN    IS JCL SET
         BZ    *+8                 NO, SKIP
         MVI   8(R1),C'S'
         SPACE 3
         TM    ETBITS3,ET3DEBUG    DEBUG IN PROGRESS??
         BZ    N1$S10              NOPE, SKIP CODE
         WTO   'IKJEFLN1: SET SCREEN USER FIELDS',ROUTCDE=(2)
N1$S10   DS    0H
         EJECT
***********************************************************************
*                                                                     *
*        RETURN TO MAINLINE                                           *
*                                                                     *
***********************************************************************
         SR    R15,R15             CLEAR RETURN CODE
N1$SEXIT DS    0H
         SUBEXIT
         EJECT
***********************************************************************
*                                                                     *
*        MOVE AN ITEM FROM THE SAVED AREA TO THE SCREEN               *
*              R1 => KEY,LENGTH,DATA OF SCREEN ITEM                   *
*              R2 => LENGTH(2),DATA TO MOVE                           *
*              R14 = RETURN ADDRESS                                   *
*                                                                     *
***********************************************************************
N1$SMOV  DS    0H
         OC    0(2,R2),0(R2)       ANY LENGTH
         BZR   R14                 IF NOT THEN EXIT
         LTR   R1,R1               ANY VALUE??
         BZ    N1$S10              ESCAPE MODULE IF NOT
         MVC   0(4,R1),=F'1'       SET KEY TO VALID
         LH    R15,0(,R2)          GET LENGTH
         ST    R15,4(,R1)          SAVE LENGTH
         BCTR  R15,0               GET MACHINE LENGTH
         EX    R15,N1$SM99         MOVE DATA
         BR    R14
N1$SM99  MVC   8(0,R1),2(R2)       ** EXECUTED **
         TITLE 'IKJEFLN1 - GET TERMINAL RESTRICTION ROUTINE'
********************************************************************
*
* ROUTINE NAME -
*    N1$GTERM
*
* FUNCTION -
*    GET TERMINAL RESTRICTION BLOCK AND PARSE IT.
*
* OPERATION -
*    1) BLANK OUT BOTH THE TERMINAL RESTRICTION CORE BLOCK AND
*       ASKBACK CORE BLOCK.
*    2) IF TERMINAL RESTRICTION MEMBER EXISTS, READ IT IN.
*    3) IF ASKBACK MEMBER EXISTS, READ IT IN.
*    4) PARSE DATA IN TERMINAL RESTRICTION BLOCK.
*    5) PARSE DATA IN ASKBACK BLOCK.
*    6) RETURN TO THE MAINLINE.
*
* ENTRY POINTS -
*    N1$GTERM
*
* EXTERNAL REFERENCES -
*    NONE
*
* INPUT -
*    ETTTRASK
*    ETTTRTRM
*
* OUTPUT -
*    REGISTER 15 CONTAINS THE RETURN CODE FOR THE MAINLINE.  THIS
*    WILL BE AS FOLLOWS -
*       ×------×------------------------×--------------------------×
*       ×RETURN×                        ×                          ×
*       ×CODE  ×REASON                  ×ACTION                    ×
*       ×------×------------------------×--------------------------×
*       ×   0  ×NO ERRORS ENCOUNTERED.  ×CONTINUE WITH LOGON.      ×
*       ×------×------------------------×--------------------------×
*       ×   4  ×PARSE FAILED.           ×DENY LOGON.               ×
*       ×------×------------------------×--------------------------×
*
* MESSAGES -
*    LOGONXIT PARSE FAILED FOR TERMINAL BLOCK XXXXXXXX, RC=XX .
*    LOGONXIT PARSE FAILED FOR ASKBACK BLOCK, RC=XX .
*
********************************************************************
         EJECT
N1$GTERM DS    0H
         SUBENTRY ,
         EJECT
********************************************************************
*
*        PARSE TERMINAL BLOCK
*
********************************************************************
         MVI   KTERM,0             CLEAR FLAGS
         L     R4,ETATERM          POINT AT BLOCK
         BCTR  R4,0                BACK UP
         BCTR  R4,0                  TO LENGTH
         KEYVAL (R4),TERMTBL       PARSE IT
         B     GTTTP(R15)          INTERPRET RETURN CODE
GTTTP    B     GTTC1               RC=0 SO CONTINUE
         B     GTTER1              RC=4  VALUE NOT FOUND
         B     GTTER1              RC=8  KEYWORD NOT FOUND
         B     GTTER1              RC=12  VALCNT TEST FAILED
         B     GTTC1               RC=16  NO VALID INPUT SO CONTINUE
         B     GTTER1              RC=20  TYPE TEST FAILED
         B     GTTER1              RC=24  LEN TEST FAILED
         SPACE 3
*        ERROR ON PARSE TELL USER AND OPERATOR
         SPACE 1
GTTER1   STC   R15,N1@WORK1        SAVE RETURN CODE
         MVC   N1@MSGAR(LGTMSG1),GTMSG1 MOVE MESSAGE SKELETON
         UNPK  N1@MSGAR+58(3),N1@WORK1(2) MAKE PRINTABLE
         MVI   N1@MSGAR+58+2,C' '  CLEAR LAST BYTE
         L     R1,=A(TRTABLE-240)
         TR    N1@MSGAR+58(2),0(R1)
         MVC   N1@MSGAR+45(8),ETTERMID+2 SET TERMINAL ID
         WTO   MF=(E,N1@MSGAR)     TELL OPERATOR
         LA    R1,N1@MSGAR+4
         LH    R0,N1@MSGAR
         SH    R0,=H'4'            GET TPUT LENGTH
         TPUT  (1),(0),R           TELL USER
         LA    R15,4               SET ERROR CODE
         B     GTTEXIT             QUIT
         SPACE 3
GTTC1    DS    0H
         EJECT
********************************************************************
*
*        PARSE ASKBACK BLOCK
*
********************************************************************
         MVI   KASKB,0             CLEAR FLAGS
         L     R4,ETAASKB          POINT AT BLOCK
         BCTR  R4,0                BACK UP
         BCTR  R4,0                  TO LENGTH
         KEYVAL (R4),ASKBTBL       PARSE IT
         B     GTTAB(R15)          INTERPRET RETURN CODE
GTTAB    B     GTTAB1              RC=0 SO CONTINUE
         B     GTTER2              RC=4  VALUE NOT FOUND
         B     GTTER2              RC=8  KEYWORD NOT FOUND
         B     GTTER2              RC=12  VALCNT TEST FAILED
         B     GTTAB1              RC=16  NO VALID INPUT SO CONTINUE
         B     GTTER2              RC=20  TYPE TEST FAILED
         B     GTTER2              RC=24  LEN TEST FAILED
         SPACE 3
*        ERROR ON PARSE TELL USER AND OPERATOR
         SPACE 1
GTTER2   STC   R15,N1@WORK1        SAVE RETURN CODE
         MVC   N1@MSGAR(LGTMSG2),GTMSG2 MOVE MESSAGE SKELETON
         UNPK  N1@MSGAR+48(3),N1@WORK1(2) MAKE PRINTABLE
         MVI   N1@MSGAR+48+2,C' '  CLEAR LAST BYTE
         L     R1,=A(TRTABLE-240)
         TR    N1@MSGAR+48(2),0(R1)
         WTO   MF=(E,N1@MSGAR)     TELL OPERATOR
         LA    R1,N1@MSGAR+4
         LH    R0,N1@MSGAR
         SH    R0,=H'4'            GET TPUT LENGTH
         TPUT  (1),(0),R           TELL USER
         LA    R15,4               SET ERROR CODE
         B     GTTEXIT             QUIT
         SPACE 3
GTTAB1   DS    0H
         EJECT
********************************************************************
*
*        RETURN TO MAIN LINE
*
********************************************************************
         SR    R15,R15             SET RETURN CODE OF ZERO
GTTEXIT  SUBEXIT ,
         SPACE 3
*                     1         2         3         4         5
*               4567890123456789012345678901234567890123456789012345678
GTMSG1   WTO   'LOGONXIT PARSE FAILED FOR TERMINAL BLOCK XXXXXXXX, RC=XX
               X .',ROUTCDE=(2,11),MF=L
LGTMSG1  EQU   *-GTMSG1
GTMSG2   WTO   'LOGONXIT PARSE FAILED FOR ASKBACK BLOCK, RC=XX .',     X
               ROUTCDE=(2,11),MF=L
LGTMSG2  EQU   *-GTMSG2
         EJECT
********************************************************************
*
*        PARSE TABLES
*
********************************************************************
         PRINT NOGEN
TERMTBL  KEYT  USER,,KUSER,,(1,9),LEN=(1,10),                          X
               FIELD1=(,O,KTERM,KTFUSER)
         KEYT  TIME,,KTIME,NUMERIC,(2,2),LEN=4,                        X
               FIELD1=(,O,KTERM,KTFTIME)
         KEYT  ASKBACK,,KASKTM,NUMERIC,(1,1),LEN=(1,4),                X
               FIELD1=(,O,KTERM,KTFASKB)
         KEYT  LOG,,,,(0,0),                                           X
               FIELD1=(,O,KTERM,KTFLOG)
         KEYT  REJECT,,,,(0,0),                                        X
               FIELD1=(,O,KTERM,KTFREJCT)
         KEYT  SMF,,,,(0,0),                                           X
               FIELD1=(,O,KTERM,KTFSMF)
         KEYT  CONSOLE,,,,(0,0),END=YES,                               X
               FIELD1=(,O,KTERM,KTFCNSL)
ASKBTBL  KEYT  S,,KASKBS,,(1,2),LEN=(1,8),                             X
               FIELD1=(,O,KASKB,KAFS)
         KEYT  O,,KASKBO,,(1,2),LEN=(1,8),                             X
               FIELD1=(,O,KASKB,KAFO)
         KEYT  T,,KASKBT,,(1,2),LEN=(1,8),                             X
               FIELD1=(,O,KASKB,KAFT)
         KEYT  E,,KASKBE,,(1,2),LEN=(1,8),                             X
               FIELD1=(,O,KASKB,KAFE)
         KEYT  B,,KASKBB,,(1,2),LEN=(1,8),                             X
               FIELD1=(,O,KASKB,KAFB)
         KEYT  P,,KASKBP,,(1,2),LEN=(1,8),                             X
               FIELD1=(,O,KASKB,KAFP)
         KEYT  C,,KASKBC,,(1,2),LEN=(1,8),                             X
               FIELD1=(,O,KASKB,KAFC)
         KEYT  D,,KASKBD,,(1,2),LEN=(1,8),END=YES,                     X
               FIELD1=(,O,KASKB,KAFD)
         PRINT GEN
         TITLE 'IKJEFLN1 - VALIDATE TERMINAL RESTRICTIONS'
********************************************************************
*
* ROUTINE NAME -
*    N1$VTERM
*
* FUNCTION -
*    VERIFY THE TERMINAL RESTRICTIONS AGAINST IT.
*
* OPERATION -
*    1) IF NO RESTRICTIONS EXIST THEN EXIT.
*    2) IF REJECT SPECIFIED IN TERMINAL FAIL LOGON.
*    3) TEST WHETHER USERID IS VALID FOR TERMINAL.
*    4) TEST WHETHER VALID TIME OF DAY.
*    5) VALIDATE USERID ALRIGHT FOR ASKBACK TEST.
*    5A)  IF NECESSARY PERFORM ASKBACK TEST.
*    6) IF LOG SPECIFIED, THEN LOG SUCCESSFUL LOGON ATTEMPT.
*    7) RETURN TO THE MAINLINE.
*
* ENTRY POINTS -
*    N1$VTERM
*
* EXTERNAL REFERENCES -
*    NONE
*
* INPUT -
*    NONE
*
* OUTPUT -
*    REGISTER 15 CONTAINS THE RETURN CODE FOR THE MAINLINE.  THIS
*    WILL BE AS FOLLOWS -
*       ×------×------------------------×--------------------------×
*       ×RETURN×                        ×                          ×
*       ×CODE  ×REASON                  ×ACTION                    ×
*       ×------×------------------------×--------------------------×
*       ×   0  ×NO ERRORS ENCOUNTERED.  ×CONTINUE WITH LOGON.      ×
*       ×------×------------------------×--------------------------×
*       ×   4  ×RESTRICTIONS VIOLATED   ×DENY LOGON.               ×
*       ×------×------------------------×--------------------------×
*
* MESSAGES -
*     TSO LOGON VIOLATION.  USER=XXXXXXXX, TERM=XXXXXXXX.
*     TSO ACCESS DENIED DUE TO TERMINAL RESTRICTION
*     LOGONXIT ENTERED
*     TSO LOGON SUCCESS.    USER=XXXXXXXX, TERM=XXXXXXXX.
*
********************************************************************
         EJECT
N1$VTERM DS    0H
         SUBENTRY ,
         NI    ETBITS2,255-ET2ASKB MARK NOT IN ASKBACK TEST
         EJECT
********************************************************************
*
*        SEE IF ANY TERMINAL RESTRICTIONS
*
********************************************************************
         CLI   KTERM,0             ANY RESTRICTION SPECIFIED
         BE    VERTXIT             NOPE SO SKIP TESTS
         EJECT
********************************************************************
*
*        SINCE WE HAVE RESTRICTIONS DO THEM ONE AT A TIME
*        IF RESTRICTION IS MET THEN FAIL LOGON
*
*        FIRST TEST VALID USERID LIST
*
********************************************************************
         TM    KTERM,KTFUSER       WAS USERID CHECK REQUESTED
         BZ    VERTNUR             NOPE
         SR    R5,R5               CLEAR LOOP REG
         IC    R5,KUSER            GET NUMBER TO DO
         LA    R4,KUSER+1          POINT AT FIRST USERID
VERTLOOP DS    0H                  TOP OF LOOP FOR EACH ID SPECIFIED
         MVC   N1@MSGAR(10),=CL10' ' BLANK OUT AREA
         SR    R1,R1               CLEAR REG
         IC    R1,0(R4)            GET LENGTH OF THIS ONE
         BCTR  R1,0                GET MACHINE LENGTH
         EX    R1,VERTMVC1         MOVE IT TO WORK AREA
         SPACE 3
*        CHECK AGAINST SUBSTRING ID
         SPACE 1
         CH    R1,=H'3'            IS THIS ID LONG ENOUGH FOR SUBSTR
         BL    VERTNMUS            NOPE SO SKIP
         LA    R2,N1@MSGAR(R1)     MOVE BACK TO PAREN
         BCTR  R2,0
         BCTR  R2,0
         CLI   0(R2),C'('          IS THIS A PAREN
         BNE   VERTNMUS            NOPE SO GO NORMAL
         SH    R1,=H'3'            GET MACHINE LEN OF SUBSTR
         IC    R3,1(R2)            GET DIGIT
         N     R3,=A(15)           LEAVE JUST SUBSTR START
         LA    R3,ETUSERID+1(R3)   GET POINTER TO ID
         EX    R1,VERTCLC1         SEE IF SUBSTR MATCHES
         BE    VERTNUR             OK  - USERID MATCHES SUBSTR
         B     VERTLPND            DID NOT MATCH SO TRY NEXT
         SPACE 3
*        CHECK AGAINST NORMAL ID
         SPACE 1
VERTNMUS CLC   ETUSERID+2(7),N1@MSGAR   SEE IF LEGAL ID
         BE    VERTNUR             IF SO THEN END
VERTLPND IC    R1,0(R4)            GET ORIG LENGTH
         LA    R4,1(R1,R4)         POINT TO NEXT ID
         BCT   R5,VERTLOOP         IF NOT THEN TRY NEXT
         B     VERTFAIL            IF NONE MATCH THEN ERROR
         SPACE 2
VERTMVC1 MVC   N1@MSGAR(0),1(R4)   MOVE IN DATA
VERTCLC1 CLC   0(0,R3),N1@MSGAR    SEE IF SUBSTR MATCHES
         SPACE 2
VERTNUR  DS    0H
         EJECT
********************************************************************
*
*        TEST VALID LOGON TIME OF DAY
*
********************************************************************
         TM    KTERM,KTFTIME       WAS TIME A REQUESTED RESTRICTION
         BZ    VERTNTM             NOPE
         UNPK  N1@MSGAR(5),ETLTIME(3) MAKE TIME CHARACTER
         CLC   N1@MSGAR(4),KTIME+2 CHECK START TIME
         BL    VERTFAIL            IF LOWER THEN DENY ATTEMPT
         CLC   N1@MSGAR(4),KTIME+2+4+1 CHECK STOP TIME
         BH    VERTFAIL            IF HIGHER THEN DENY ATTEMPT
VERTNTM  DS    0H
         EJECT
********************************************************************
*
*        TEST IF ASKBACK RESTRICTION IS REQUESTED
*
********************************************************************
         TM    KTERM,KTFASKB       IS ASKBACK NEEDED
         BZ    VERTNASK            IF NOT THEN ALL DONE - USER PASSE
         SR    R1,R1               CLEAR REGISTER
         IC    R1,KASKTM+1         GET LENGTH OF TIME LIMIT
         BCTR  R1,0                GET MACHINE LENGTH
         EX    R1,VRTPACK          GET DECIMAL NUMBER
         CVB   R5,N1@WORK1         GET TIME IN SECONDS
         SPACE 3
         MVC   N1@FCHR,ETUSERID+2  SAVE FIRST CHAR OF ID
VERTASK1 DS    0H
         SPACE 3
*        SEE IF CHARACTER IS ONE OF THE VALID PARMS
         SPACE 3
         CLI   N1@FCHR,C'S'        IS THIS AN 'S' ID
         BNE   VERTASK2
         TM    KASKB,KAFS          WAS 'S' A SPECIFIED PARM
         BZ    VERTFAIL            NOPE SO FAIL ID
         LA    R4,KASKBS           POINT AT PARSE STRING
         B     VRTASKB             GO DO ASKBACK TEST
         SPACE 3
VERTASK2 CLI   N1@FCHR,C'O'        IS THIS AN 'O' ID
         BNE   VERTASK3
         TM    KASKB,KAFO          WAS 'O' A SPECIFIED PARM
         BZ    VERTFAIL            NOPE SO FAIL ID
         LA    R4,KASKBO           POINT AT PARSE STRING
         B     VRTASKB             GO DO ASKBACK TEST
         SPACE 3
VERTASK3 CLI   N1@FCHR,C'T'        IS THIS AN 'T' ID
         BNE   VERTASK4
         TM    KASKB,KAFT          WAS 'T' A SPECIFIED PARM
         BZ    VERTFAIL            NOPE SO FAIL ID
         LA    R4,KASKBT           POINT AT PARSE STRING
         B     VRTASKB             GO DO ASKBACK TEST
         SPACE 3
VERTASK4 CLI   N1@FCHR,C'E'        IS THIS AN 'E' ID
         BNE   VERTASK5
         TM    KASKB,KAFE          WAS 'E' A SPECIFIED PARM
         BZ    VERTFAIL            NOPE SO FAIL ID
         LA    R4,KASKBE           POINT AT PARSE STRING
         B     VRTASKB             GO DO ASKBACK TEST
         SPACE 3
VERTASK5 CLI   N1@FCHR,C'B'        IS THIS AN 'B' ID
         BNE   VERTASK6
         TM    KASKB,KAFB          WAS 'B' A SPECIFIED PARM
         BZ    VERTFAIL            NOPE SO FAIL ID
         LA    R4,KASKBB           POINT AT PARSE STRING
         B     VRTASKB             GO DO ASKBACK TEST
         SPACE 3
VERTASK6 CLI   N1@FCHR,C'D'        IS THIS AN 'D' ID
         BNE   VERTASK7
         TM    KASKB,KAFD          WAS 'D' A SPECIFIED PARM
         BZ    VERTFAIL            NOPE SO FAIL ID
         LA    R4,KASKBD           POINT AT PARSE STRING
         B     VRTASKB             GO DO ASKBACK TEST
         SPACE 3
VERTASK7 CLI   N1@FCHR,C'C'        IS THIS AN 'C' ID
         BNE   VERTASK8
         TM    KASKB,KAFC          WAS 'C' A SPECIFIED PARM
         BZ    VERTFAIL            NOPE SO FAIL ID
         LA    R4,KASKBC           POINT AT PARSE STRING
         B     VRTASKB             GO DO ASKBACK TEST
         SPACE 3
VERTASK8 CLI   N1@FCHR,C'P'        IS THIS AN 'P' ID
         BNE   VERTFAIL
         TM    KASKB,KAFP          WAS 'P' A SPECIFIED PARM
         BZ    VERTFAIL            NOPE SO FAIL ID
         LA    R4,KASKBP           POINT AT PARSE STRING
         B     VRTASKB             GO DO ASKBACK TEST
         EJECT
********************************************************************
*
*        DO ASKBACK TEST
*
********************************************************************
VRTASKB  DS    0H
         OI    ETBITS2,ET2ASKB     MARK IN ASKBACK TEST
* *#*#   XC    STREQECB,STREQECB   CLEAR ECB
* *#*#   POST  MTREQECB,(R5)       SET STIMER FOR ASKBACK LIMIT
* *#*#   WAIT  ECB=STREQECB        WAIT FOR IT TO BE SET
********************************************************************
*
*       CHECKS TO SEE IF TSO USER IS ON A DISPLAY TERMINAL.  IF NOT,
*       OVERPRINT BEFORE ASKING FOR ASKBACK CODE.  IT THE USER IS
*       ON A DISPLAY TERMINAL, PROMPT FOR PASSWORD WITH PRINT
*       BYPASS.
*
********************************************************************
         TM    ETBITS2,ET2DSPLY    WAS THIS A DISPLAY TERMINAL
         BO    VERTDISP            YES - USE PUTGET
VERTNDSP DS    0H                  NO - USE TPUT/TGET
         LA    R0,L'VERTFM3        GET LENGTH OF MESSAGE
         LA    R1,VERTFM3          GET MESSAGE ADDR
         TPUT  (1),(0),R           ISSUE MESSAGE
         LTR   R15,R15             WAS RETURN CODE ZERO
         BNZ   VERTEXIT            NO - EXIT
         LA    R0,LOVRPRNT         YES - GET LENGTH OF MESSAGE
         LA    R1,OVERPRNT         POINT TO MESSAGE
         ICM   R1,B'1000',=X'01'   SET OPTIONS FOR ASIS
         TPUT  (1),(0),R           ISSUE MESSAGE
         LTR   R15,R15             WAS RETURN CODE ZERO
         BNZ   VERTEXIT            NO - EXIT
         LA    R0,8                YES - GET LENGTH
         LA    R1,N1@WORK1         GET ADDRESS OF N1@WORK1
         ICM   R1,B'1000',=X'80'   SET OPTIONS
         MVC   N1@WORK1,=CL8' '    BLANK INPUT AREA
         TGET  (1),(0),R           READ ACCOUNT NUMBER
         LTR   R15,R15             WAS RETURN CODE ZERO
         BZ    VERTTGOK            YES - CONTINUE
         BAL   R14,VERTEXIT        NO - GO TO ERROR ROUTINE
VERTTGOK DS    0H
         OC    N1@WORK1,=CL8' '    FORCE TO UPPERCASE
         B     VERTEXIT            NO - EXIT
VERTDISP DS    0H                  TERMINAL WAS DISPLAY
         MVC   N1@PGPB(LPGPB),LPUTGET MOVE LIST TO WORK AREA
         LA    R1,N1@IOPL          GET ADDRESS OF IOPL
         USING IOPL,R1             GET ADDRESSABILITY TO IOPL
         MVC   IOPLUPT,N1@CPPL+CPPLUPT-CPPL COPY UPT ADDRESS TO IOPL
         MVC   IOPLECT,N1@CPPL+CPPLECT-CPPL COPY ECT ADDRESS TO IOPL
         LA    R15,N1@ECB          GET ADDRESS OF CP ECB
         ST    R15,IOPLECB         PUT CP ECB ADDRESS IN IOPL
         XC    N1@ECB,N1@ECB       ZERO CP ECB
         LA    R15,N1@PGPB         GET ADDRESS OF PUTGET PARM LIST
         ST    R15,IOPLIOPB        PUT PUTGET PARM LIST ADDR IN IOPL
         XC    N1@PGOLD(4),N1@PGOLD ZERO NUMBER OF SEGMENTS
         MVI   N1@PGOLD+3,1        SET NUMBER TO 1
         LA    R15,VRTMHDR         GET ADDRESS OF VERFICATION HDR
         ST    R15,N1@PGOLD+4      PUT ADDRESS IN OLD
         PUTGET OUTPUT=(N1@PGOLD,,PTBYPS),MF=(E,N1@IOPL)
         LTR   R15,R15             WAS PUTGET SUCCESSFUL
         BNZ   VERTEXIT            NO - EXIT
         LA    R1,N1@PGPB          YES - GET ADDRESS OF P/G PRM LIST
         USING PGPB,R1             GET ADDRESSABILITY TO PARM LIST
         L     R1,PGPBIBUF         GET ADDRESS OF PUTGET INPUT BUFF
         LR    R2,R1               SAVE ADDRESS FOR FREEMAIN
         CLI   1(R1),44            WAS RESPONSE CORRECT LENGTH
         BH    VERTFREE            NO - FREE INPUT BUFF & ASK AGAIN
         LH    R15,0(R1)           GET BUFFER LENGTH
         SH    R15,=H'4'           GET LENGTH OF RESPONSE
         BZ    VERTSKIP            SKIP MOVE IF LENGTH ZERO
         BCTR  R15,0               GET MACHINE LENGTH
         EX    R15,MVCVERT3        MOVE IN DATA
         OC    N1@WORK1,=CL8' '    FORCE TO UPPERCASE
VERTSKIP LR    R1,R2               RESTORE THE BUFFER ADDRESS
         LA    R0,1                GET THE SUBPOOL NUMBER
         SLL   R0,24               SHIFT INTO HIGH-ORDER BYTE
         ICM   R0,B'0011',0(R1)    GET THE LENGTH
         FREEMAIN R,A=(1),LV=(0)   FREE THE INPUT BUFFER
         SLR   R15,R15             SET RETURN CODE
         B     VERTEXIT            AND EXIT
VERTFREE DS    0H                  FREE INPUT BUFFER AND ASK AGAIN
         LR    R1,R2               RESTORE THE BUFFER ADDRESS
         LA    R0,1                GET THE SUBPOOL NUMBER
         SLL   R0,24               SHIFT INTO HIGH-ORDER BYTE
         ICM   R0,B'0011',0(R1)    GET THE LENGTH
         FREEMAIN R,A=(1),LV=(0)   FREE THE INPUT BUFFER
         B     VERTDISP            AND ASK AGAIN
VERTEXIT DS    0H
         L     R0,=A(X'FFFFFF')    NOW TURN OFF STIMER
* *#*#   XC    STREQECB,STREQECB   CLEAR ECB
* *#*#   POST  MTREQECB,(0)
* *#*#   WAIT  ECB=STREQECB        WAIT FOR CANCEL COMPLETE
         SR    R1,R1               CLEAR REGISTER
         IC    R1,1(R4)            GET LENGTH OF CODE
         BCTR  R1,0                GET MACHINE LENGTH
         EX    R1,VRTCLC           SEE IF EQUAL
         BNE   VERTFAIL            FAIL IF NO MATCH
         EJECT
********************************************************************
*
*        ASKBACK TEST PASSED, SET OVERRIDE PROC NAME IF ANY.
*
********************************************************************
         CLI   0(R4),2             IS THERE A PROC NAME ALSO
         BNE   VERTXIT             IF NOT THEN ALL DONE
         LA    R2,2+1(R1,R4)       POINT AT LENGTH
         IC    R1,0(R2)            GET LENGTH
         STH   R1,ETPROC           SAVE LENGTH
         BCTR  R1,0                GET MACHINE LENGTH
         EX    R1,VRTMVC           MOVE IN PROC NAME
*                                  ALL DONE
VERTNASK DS    0H
         EJECT
********************************************************************
*
*        DETERMINE IF REJECT SPECIFIED
*
********************************************************************
         TM    KTERM,KTFREJCT      WAS REJECT SPECIFIED
         BO    VERTFAIL            YES - FAIL THE SUCKER
         EJECT
********************************************************************
*
*        WE HAVE A SUCCESSFUL RESTRICTION VALIDATION
*          LOG IF NECESSARY
*
********************************************************************
         TM    KTERM,KTFLOG        IS SUCCESSFUL LOGGING NECESSARY
         BZ    VERTNLOG            NO SO SKIP
         TM    KTERM,KTFSMF        LOG TO SMF
         BZ    VERTLGCN            NOPE
         SPACE 3
*        WRITE VIOLATION TO SMF
         SPACE 1
VERTLGCN TM    KTERM,KTFCNSL       LOG TO CONSOLE
         BZ    VERTNLOG            NOPE
         SPACE 3
*        WRITE VIOLATION TO CONSOLE
         SPACE 1
         MVC   N1@MSGAR(VERTFM4L),VERTFM4 MOVE IN MESSAGE
         MVC   N1@MSGAR+33(7),ETUSERID+2 SET USER
         MVC   N1@MSGAR+48(8),ETTERMID+2 SET TERMINAL
         WTO   MF=(E,N1@MSGAR)
         INFO  MNAME               FIND KEY IN USER FIELD
         MVC   N1@MSGAR+10(47),9(R1) OUTPUT NAME
         WTO   MF=(E,N1@MSGAR)
         INFO  MPHONE              FIND KEY IN USER FIELD
         MVC   N1@MSGAR+10(47),9(R1)  OUTPUT PHONE NUMBER
         WTO   MF=(E,N1@MSGAR)
         INFO  MADDRESS
         MVC   N1@MSGAR+10(47),9(R1)  OUTPUT ADDRESS
         WTO   MF=(E,N1@MSGAR)
         SPACE 3
VERTNLOG DS    0H
         EJECT
********************************************************************
*
*        RETURN TO MAIN LINE
*
********************************************************************
VERTXIT  SR    R15,R15             SET RETURN ADDRESS
         SUBEXIT ,
         SPACE 3
VRTPACK  PACK  N1@WORK1,KASKTM+2(0) **EXECUTED ONLY**
VRTCLC   CLC   N1@WORK1(0),2(R4)    **EXECUTED ONLY**
VRTMVC   MVC   ETPROC+2(0),1(R2)    **EXECUTED ONLY**
MVCVERT3 MVC   N1@WORK1(*-*),4(R1)  MOVE ASKBACK ANSWER
         EJECT
********************************************************************
*
*        USER FAILED TO PASS TESTS SO LOG IT AND EXIT
*
********************************************************************
VERTFAIL DS    0H
         OI    ETBITS1,ET1DENY     DENY LOGON
         SPACE 3
*        TELL USER ABOUT VIOLATION (UNLESS IN ASKBACK PROCESSING)
         SPACE 1
         TM    ETBITS2,ET2ASKB     SEE IF ASKBACK TEST IN PROGRESS
         BO    VERTFSMF            GO TO SMF PROCESSING
         LA    R0,L'VERTFM2        GET LENGTH OF MESSAGE
         LA    R1,VERTFM2          GET ADDR OF MESSAGE
         TPUT  (1),(0),R           TELL USER
VERTFSMF TM    KTERM,KTFSMF        LOG TO SMF
         BZ    VERTFCNL            NOPE
         SPACE 3
*        WRITE VIOLATION TO SMF
         SPACE 1
VERTFCNL TM    KTERM,KTFCNSL       LOG TO CONSOLE
         BZ    VERTFOT             NOPE
         SPACE 3
*        WRITE VIOLATION TO CONSOLE
         SPACE 1
         MVC   N1@MSGAR(VERTFM1L),VERTFM1 MOVE IN MESSAGE
         MVC   N1@MSGAR+33(7),ETUSERID+2 SET USER
         MVC   N1@MSGAR+48(8),ETTERMID+2 SET TERMINAL
         WTO   MF=(E,N1@MSGAR)
         INFO  MNAME
         MVC   N1@MSGAR+10(47),9(R1) OUTPUT NAME
         WTO   MF=(E,N1@MSGAR)
         INFO  MPHONE
         MVC   N1@MSGAR+10(47),9(R1)  OUTPUT PHONE NUMBER
         WTO   MF=(E,N1@MSGAR)
         INFO  MADDRESS
         MVC   N1@MSGAR+10(47),9(R1)  OUTPUT ADDRESS
         WTO   MF=(E,N1@MSGAR)
         SPACE 3
*        DENY LOGON
         SPACE 1
VERTFOT  DS    0H
         LA    R15,4               SET RETURN CODE
         SUBEXIT ,
         EJECT
********************************************************************
*
*        OPERATOR MESSAGES
*
********************************************************************
VERTFM1  WTO   '  TSO LOGON VIOLATION.  USER=XXXXXXX,  TERM=XXXXXXXX.',X
               ROUTCDE=(2,9),DESC=11,MF=L
VERTFM1L EQU   *-VERTFM1
VERTFM2  DC    C'TSO ACCESS DENIED DUE TO TERMINAL RESTRICTION'
VRTMHDR  DC    AL2(LVERTMSG,0),C' '
VERTFM3  DC    C'LOGONXIT ENTERED'
LVERTMSG EQU   *-VRTMHDR
VERTFM4  WTO   '  TSO LOGON SUCCESS.    USER=XXXXXXX,  TERM=XXXXXXXX.',X
               ROUTCDE=(2,9),DESC=11,MF=L
VERTFM4L EQU   *-VERTFM1
         TITLE 'IKJEFLN1 - TEMPORARY ENTRY POINTS '
         PUSH  USING
         DROP  R12
         USING *,R15
N1$RETRY DS    0H
         L     R12,=A(IKJEFLN1)    GET REAL BASE
         POP   USING
         OI    ETBITS1,ET1DENY     MARK TO DENY
         LA    R15,16              SET ABEND RETURN CODE
         B     N1$EXIT             ALL DONE
N1$      DS    0H
         SR    R15,R15
         BR    R14
         LTORG ,
         DROP  ,
         TITLE 'IKJEFLN1 - CONSTANTS AREA'
LPUTGET  PUTGET ,MF=L              PUTGET PARAMETER LIST
OPENUPDT OPEN  (SYSUADS,UPDAT),MF=L OPEN FOR UPDATE
OPENOUT  OPEN  (SYSUADS,OUTPUT),MF=L OPEN FOR OUTPUT
SYSUADS  DCB   DDNAME=SYSUADS,MACRF=(R,W),DSORG=PO
LSYSUADS EQU   *-SYSUADS           CALCULATE LENGTH OF SYSUADS DCB
QNAME    DC    C'SYSIKJUA'         QNAME FOR ENQ/RESERVE TSO
QNAME2   DC    C'SPFDSN  '         QNAME FOR RESERVE ISPF/PDF
QNAME3   DC    C'SPFEDIT '         QNAME FOR ENQ ISPF/PDF
RNAME    DC    C'OPENUADS'         RNAME FOR RESERVE UADS
ENQLIST  ENQ   (,,E,,SYSTEM),RET=TEST,MF=L
         DS    F                   ALLOW ROOM  OR RESERVE UCB ADDR
LENQLIST EQU   *-ENQLIST
ENQLIST2 ENQ   (,,E,,SYSTEMS),RET=HAVE,MF=L
ENQLIST3 ENQ   (,,S,,SYSTEM),RET=HAVE,MF=L
RESLIST  RESERVE (,,E,,SYSTEMS),RET=HAVE,UCB=0,MF=L
OPENMSG  DC    C'OPEN OF UADS UNSUCCESSFUL'
         DC    X'0D'               CARRIAGE RETURN
OVERPRNT DC    8X'17'              RUBOUT
         DC    8C'X'               X'S
         DC    X'0D'               CARRIAGE RETURN
         DC    8X'17'              RUBOUT
         DC    8C'O'               O'S
         DC    X'0D'               CARRIAGE RETURN
         DC    8X'17'              RUBOUT
         DC    8C'A'               A'S
         DC    X'0D'               CARRIAGE RETURN
LOVRPRNT EQU   *-OVERPRNT          LENGTH FOR TPUT
         DC    X'25'               LINE FEED
         TITLE 'IKJEFLN1 - LOCAL WORK AREA DSECT'
DSAN1    DSECT
N1@SAVE  DS    (18*5)F
N1@WORK1 DS    D                   GENERAL WORK AREA
N1@ECB   DS    F                   ECB FOR CALLS
N1@CPPL  DS    XL(LCPPL)
         SPACE 5
*        THE FOLLOWING STORAGE IS FOR ESTAE AND ESTAE PROCESSING
N1@ESTAE ESTAE ,MF=L               ESTAE PARAMETER LIST
         SPACE 5
* THE FOLLOWING STORAGE IS FOR ENQ
         DS    0F                  ALIGNMENT
N1@ENQLT DS    XL(LENQLIST)        ENQ LIST
N1@RNAME DS    CL52                RNAME FOR SPF TYPE ENQ
         SPACE 5
* THE FOLLOWING STORAGE IS FOR BLDL
N1@BLDL  DS    0F                  BLDL LIST
N1@BLFF  DS    H                   FF   NUMBER OF ENTRIES
N1@BLLL  DS    H                   LL   LENGTH OF EACH ENTRY
N1@BLNM  DS    CL8                 NAME
N1@BLTTR DS    XL4                 TTRC
N1@BLNSZ EQU   *-N1@BLNM           SIZE OF ENTRY
         DS    7XL(N1@BLNSZ)       EXTRA ENTRIES
         SPACE 5
*        THE FOLLOWING STORAGE IS FOR PUTGET
N1@PGPB DS     XL(LPGPB)           PGPB
N1@IOPL DS     XL(LIOPL)           IOPL
N1@PGOLD DS    2F                  OUTPUT LINE DESCRIPTOR (OLD)
         SPACE 5
* THE FOLLOWING STORAGE IS THE MESSAGE AREA
N1@MSGAR DS    CL100
N1@FCHR  DS    C                   WORK AREA
         SPACE 5
* THE FOLLOWING STORAGE IS FOR PARSING THE TERMINAL BLOCK
KTERM    DS    X                   VALUE PRESENCE FLAG
KTFUSER  EQU   X'80'               USERID VALUES PRESENT
KTFTIME  EQU   X'40'               TIME RESTRICTION PRESENT
KTFASKB  EQU   X'20'               ASKBACK RESTRICTION PRESENT
KTFSMF   EQU   X'10'               SMF REPORT REQUESTED
KTFCNSL  EQU   X'08'               CONSOLE REPORT REQUESTED
KTFLOG   EQU   X'04'               LOG SUCCESSFUL LOGON
KTFREJCT EQU   X'02'               FORCE LOGON FAILURE
KUSER    DS    CL(1+9*(1+10))      USERIDS
KTIME    DS    CL(1+1+4+1+4)       TIME IN HHMM,HHMM FORMAT
KASKTM   DS    CL(1+1+4)           ASKBACK TIME IN SECONDS
         SPACE 5
* THE FOLLOWING STORAGE IS FOR PARSING THE ASKBACK BLOCK
KASKB    DS    X                   VALUE PRESENCE FLAG
KAFS     EQU   X'80'               S ASK BACK VALUE PRESENT
KAFO     EQU   X'40'               O ASK BACK VALUE PRESENT
KAFT     EQU   X'20'               T ASK BACK VALUE PRESENT
KAFE     EQU   X'10'               E ASK BACK VALUE PRESENT
KAFB     EQU   X'08'               B ASK BACK VALUE PRESENT
KAFP     EQU   X'04'               P ASK BACK VALUE PRESENT
KAFC     EQU   X'02'               C ASK BACK VALUE PRESENT
KAFD     EQU   X'01'               D ASK BACK VALUE PRESENT
KASKBS   DS    CL(1+1+8+1+8)       S ID PASSWORD AND PROC
KASKBO   DS    CL(1+1+8+1+8)       O ID PASSWORD AND PROC
KASKBT   DS    CL(1+1+8+1+8)       T ID PASSWORD AND PROC
KASKBE   DS    CL(1+1+8+1+8)       E ID PASSWORD AND PROC
KASKBB   DS    CL(1+1+8+1+8)       B ID PASSWORD AND PROC
KASKBP   DS    CL(1+1+8+1+8)       P ID PASSWORD AND PROC
KASKBC   DS    CL(1+1+8+1+8)       C ID PASSWORD AND PROC
KASKBD   DS    CL(1+1+8+1+8)       D ID PASSWORD AND PROC
         DS    0D                  FILL OUT DSECT
DSAN1L   EQU   *-DSAN1
         TITLE 'IKJEFLN1 - STANDARD EXIT PARAMETER LIST'
N1CMDBFR EQU   1                   COMMAND BUFFER
N1NEWCMD EQU   2                   NEW COMMAND BUFFER
N1UPT    EQU   3                   UPT
N1ECT    EQU   4                   ECT
N1PSCB   EQU   5                   PSCB
N1EXTOEX EQU   6                   EXIT TO EXIT COMM WORD
N1RCODE  EQU   7                   EXIT REASON CODE
*              8                   RESERVED
*              9                   RESERVED
N1SWITCH EQU   10                  SWITCHES
N1SW2IRF EQU   X'80'               BYTE 2 IBM FIELD REFRESH
N1SW2URF EQU   X'40'               BYTE 2 USER FIELD REFRESH
N1SW4NPR EQU   X'80'               BYTE 4 DONT PROMPT
N1SW4IN2 EQU   X'40'               BYTE 4 INVOKE IKJEFLN2
N1PANEL  EQU   11                  PANEL MODULE
N1TGET   EQU   12                  TGET BUFFER
*              13                  RESERVED
N1LANG   EQU   14                  LANGUAGE CODE
N1REPMPT EQU   15                  REPROMPT CODE
N1UFLDS  EQU   16                  USER FIELD PARM LIST
*              17                  RESERVED
*              18                  RESERVED
N1MSG1   EQU   19                  FIRST MESSAGE
N1MSG2   EQU   20                  SECOND MESSAGE
N1USERID EQU   21                  USERID
N1PASSWD EQU   22                  PASSWORD
N1ACCNT  EQU   23                  ACCOUNT NUMBER
N1PROC   EQU   24                  PROCEDURE NAME
N1RSIZE  EQU   25                  REGION SIZE
N1PERFGP EQU   26                  JCL STATEMENTS
N1NPSWD  EQU   27                  NEW PASSWORD
N1GROUP  EQU   28                  RACF GROUP
N1NOMAIL EQU   29                  NO MAIL INDICATOR
N1NONOTC EQU   30                  NO NOTICIES INDICATOR
N1RECONN EQU   31                  RECONNECT INDICATOR
N1OIDCRD EQU   32                  OPERATOR ID CARD INDICATOR
N1FSTCMD EQU   33                  FIRST COMMAND
N1SECLBL EQU   34                  SECLABEL
         TITLE 'IKJEFLN2 - LOGON POST-DISPLAY EXIT'
IKJEFLN2 CSECT
IKJEFLN2 AMODE 31
IKJEFLN2 RMODE 24
         SAVE  (14,12),,IKJEFLN2_&SYSDATE._&SYSTIME
         LR    R12,R15             SET NEW BASE REGISTER
         LR    R10,R1              SAVE PARM LIST
         USING IKJEFLN2,R12        SETUP ADDRESSABILITY
         PARM  N2EXTOEX            GET EXIT TO EXIT PARM ENTRY
         LR    R11,R1              SET ADDRESS
         USING EXTEX,R11
         EJECT
***********************************************************************
*                                                                     *
*        GET THIS EXIT WORK AREA/SAVE AREA                            *
*                                                                     *
***********************************************************************
         GETMAIN R,LV=DSAN2L,SP=12
         ST    R13,4(,R1)          SAVE ADDRESS
         LR    R13,R1              SET NEW SAVE AREA
         LR    R9,R1               SET NEW SAVE AREA
         USING DSAN2,R9
         EJECT
***********************************************************************
*                                                                     *
*       IF TESTING NEW VERSION, CALL IT                               *
*                                                                     *
***********************************************************************
         CLI   ETTEST,255          FLAG AS TEST VERSION WANTED?
         BNE   N2$M998             NOPE, SO USE PRODUCTION VERSION
         PARM  N2EXTOEX
         MVC   0(12,R15),ETHSKEY   SET TO ORIGINAL
         LR    R1,R10              GET PARM LIST
         LINK  EP=ZZZEFLN2         CALL TEST VERSION
         LR    R2,R15              SAVE RETURN CODE
         PARM  N2EXTOEX
         MVC   ETHSKEY(12),0(R15)  SAVE THE TEST PGMS STUFF
         MVC   0(12,R15),ETMYKEY   MOVE MY STUFF BACK IN
         B     N2$BYE              RETURN WITH TEST EXIT CODE
         EJECT
***********************************************************************
*                                                                     *
*       IF DEBUGGING MODE, HANDLE DISPLAYS                            *
*                                                                     *
***********************************************************************
N2$M998  DS    0H
         TM    ETBITS3,ET3DEBUG    DEBUG IN PROGRESS??
         BZ    N2$M999             NOPE, SKIP CODE
         WTO   'IKJEFLN2: INSIDE',ROUTCDE=(2)
         CLI   ETTEST,128
         BNE   N2$M999
         LR    R1,R10
         L     R15,=A(IKJEXIT+X'80000000')
         BASR  R14,R15
N2$M999  DS    0H
         EJECT
***********************************************************************
*                                                                     *
*        MAINLINE PROCESSING                                          *
*                                                                     *
***********************************************************************
         SPACE 3
*               0. IF ALREADY DENIED LOGON THEN JUST EXIT
         TM    ETBITS1,ET1DENY     HAVE WE ALREADY DENIED HIM
         BO    N2$DENY             THEN EXIT
*               1. IF USERID IS NOT LOCKED THEN EXIT
         PARM  N2REPMPT
         CLC   0(4,R1),=F'0'       IS THIS NORMAL PROMPT
         BE    N2$NORM             YES SO CONTINUE
         CLC   0(4,R1),=F'2'       IS THIS NORMAL PASSWORD PROMPT
         BE    N2$NORM             YES SO CONTINUE
         CLC   0(4,R1),=F'1'       IS THIS USERID REPROMPT
         BNE   N2$EXIT             NO SO IGNORE
         LR    R2,R1               SAVE REPROMPT CODE ADDRESS
*
**       SINCE A USERID PROMPT, SEE IF PASSWORD ENTERED
**       (IF NOT THEN GENERAL PROMPT WILL BE DONE)
*
         PARM  N2PASSWD
         CLC   0(4,R15),=F'1'      KEY OF PASSWORD PRESENT
         BNE   N2$EXIT             NOPE
         MVC   0(8,R15),=A(0,8)    KILL PASSWORD
*
**       FORCE GENERAL REPROMPT (WILL REQUIRE PASSWORD TO BE ENTERED)
*
         LA    R15,2               FORCE GENERAL REPROMPT
         ST    R15,0(,R2)          SAVE IN REPROMPT CODE
         PARM  N2SWITCH            GET SWITCHES
         OI    4(R1),N2SW4RPT      REPROMPT AFTER USERID
         OI    2(R1),X'C0'         REPROMPT AFTER USERID
         B     N2$EXIT             CONTINUE
N2$NORM  DS    0H
*               2. DO HOUSEKEEPING
         TM    ETBITS3,ET3DEBUG    DEBUGGING REQUESTED??
         BZ    N2$10               NOPE SKIP CODE
         WTO   'IKJEFLN2: PROCESSING',ROUTCDE=(2)
N2$10    DS    0H
         BAS   R14,N2$HSKP
         LTR   R15,R15
         BNZ   N2$DENY
*
* *#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
*
*  FOLLOWING CODE DISABLED DUE TO INCLUSION IN APAR OY49074
*
*               3. PROCESS TGET BUFFER INTO USER PARMS
*        BAS   R14,N2$SCRN
*
* *#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
         LTR   R15,R15
         BNZ   N2$DENY
*               3. EXTRACT DATA FROM PARMS TO MY AREA
         BAS   R14,N2$EXTR
         LTR   R15,R15
         BNZ   N2$DENY
*               4. HANDLE NEEDS OF SPECIAL USERS
         BAS   R14,N2$SPUR
         LTR   R15,R15
         BNZ   N2$DENY
         EJECT
***********************************************************************
*                                                                     *
*        FREE THIS EXIT WORK AREA AND EXIT ROUTINE                    *
*                                                                     *
***********************************************************************
N2$EXIT  DS    0H
         SR    R2,R2               CLEAR RETURN CODE
N2$BYE   DS    0H
*               5. CLEANUP AND RETURN                                 *
         BAS   R14,N2$CLEAN
*
         LR    R1,R13
         L     R13,4(,R13)
         FREEMAIN R,LV=DSAN2L,A=(1),SP=12
         LR    R15,R2              SET RETURN CODE
         L     R14,12(,R13)        RESTORE REGISTERS
         LM    R0,R12,20(R13)      RESTORE REGISTERS
         BSM   0,R14               RETURN
N2$DENY  LA    R2,16               DENY LOGON
         B     N2$BYE
         TITLE 'IKJEFLN2 - HOUSEKEEPING FUNCTIONS'
***********************************************************************
*                                                                     *
* ROUTINE NAME -                                                      *
*    N2$HSKP                                                          *
*                                                                     *
* FUNCTION -                                                          *
*    PERFORMS HOUSEKEEPING FUNCTIONS FOR LOGONXIT.                    *
*                                                                     *
* OPERATION -                                                         *
*    1) ISSUES ESTAE.  IF ESTAE IS UNSUCCESSFUL, TELLS TSO USER AND   *
*       DENIES LOGON.                                                 *
*    7) ATTEMPTS TO OPEN SYS1.UADS.  IF OPEN IS UNSUCCESSFUL, TELLS   *
*       TSO USER AND DENIES LOGON.                                    *
*    8) GETS STORAGE FOR UADS DATA BLOCKS.                            *
*   14) RETURNS TO THE MAINLINE.
*                                                                     *
* ENTRY POINTS -                                                      *
*    N2$HSKP                                                          *
*                                                                     *
* EXTERNAL REFERENCES -                                               *
*    GETAUTH                                                          *
*                                                                     *
* INPUT -                                                             *
*    NONE                                                             *
*                                                                     *
* OUTPUT -                                                            *
*    NONE                                                             *
*                                                                     *
* MESSAGES -                                                          *
*    'ESTAE UNSUCCESSFUL - RC=NNNN'                                   *
*    'OPEN OF SYS1.UADS UNSUCCESSFUL'                                 *
*                                                                     *
***********************************************************************
         SPACE 3
N2$HSKP  DS    0H
         SUBENTRY ,
         EJECT
***********************************************************************
*                                                                     *
*       ISSUES ESTAE.  IF ESTAE IS UNSUCCESSFUL, TELLS TSO USER AND   *
*       DENIES LOGON.                                                 *
*                                                                     *
***********************************************************************
         L     R1,=A(LESTAE)
         MVC   N2@ESTAE(LGESTAE),0(R1) COPY ESTAE PARM LIST
         L     R3,=A(GP$ESTAE)     GET ADDRESS OF ESTAE EXIT
         LA    R4,ETESTPM          GET ADDRESS OF ESTAE PARMS
         LA    R1,N2$RETRY         POINT TO RETRY ROUTINE
         ST    R1,0(,R4)           SAVE ADDRESS OF RETRY ROUTINE
         ST    R9,4(,R4)           SAVE PHASE DSA ADDRESS
         ST    R11,8(,R4)          SAVE EXTOEX ADDRESSS
         ST    R10,12(,R4)         SAVE INPUT ADDRESSS
         ESTAE (3),PARAM=(4),MF=(E,N2@ESTAE) ESTABLISH ESTAE
         LTR   R15,R15             WAS ESTAE SUCCESSFUL
         BNZ   N2$HNSTA            NO - GO GIVE MESSAGE
         EJECT
***********************************************************************
*                                                                     *
*       ATTEMPTS TO OPEN SYS1.UADS.  IF OPEN IS UNSUCCESSFUL, TELLS   *
*       TSO USER AND DENIES LOGON.                                    *
*                                                                     *
***********************************************************************
         L     R15,=A(SYSUADS)     MOVE SYS1.UADS DCB TO DYNAMIC AREA
         MVC   ETUADS,0(R15)       MOVE SYS1.UADS DCB TO DYNAMIC AREA
         L     R15,=A(OPENUPDT)    MOVE OPEN LIST TO DYNAMIC AREA
         MVC   ETOPENL,0(R15)      MOVE OPEN LIST TO DYNAMIC AREA
         LA    R15,ETJFCB          GET ADDRESS OF JFCB AREA
         ST    R15,ETEXLST         PUT IN ETEXLST
         MVI   ETEXLST,X'87'       INDICATE JFCB ADDRESS
         LA    R15,ETEXLST         GET ADDRESS OF ETEXLST
         LA    R1,ETUADS           GET ADDRESS OF SYSUADS DCB
         USING IHADCB,R1           GET DCB ADDRESSABILITY
         STCM  R15,B'0111',DCBEXLSA PUT ADDRRESS OF ETEXLST IN DCB
         STCM  R1,B'0111',ETOPENL+1 PUT ADDR OF DCB IN OPEN LIST
         DROP  R1                  DROP DCB ADDRESSABILITY
         OPEN  MF=(E,ETOPENL)      ATTEMPT TO OPEN SYS1.UADS
         TM    ETUADS+DCBOFLGS-IHADCB,DCBOFOPN DID UADS OPEN
         BZ    N2$HNOPN            NO - GO TO ERROR ROUTINE
         RDJFCB MF=(E,ETOPENL)     YES - READ JFCB FOR LATER ENQ
         L     R15,PSATOLD-PSA     GET ADDRESS OF MY TCB
         L     R15,TCBTIO-TCB(,R15) GET ADDRESS OF MY TIOT
         AH    R15,ETUADS+DCBTIOT-IHADCB GET ADDRESS OF UADS TIOT
         MVC   ETAUCB,16(R15)      SAVE UCB ADDRESS FOR RESERVE
         EJECT
***********************************************************************
*                                                                     *
*       RETURNS TO THE MAINLINE.                                      *
*                                                                     *
***********************************************************************
         SR    R15,R15             SET GOOD RETURN CODE
N2$HEXIT DS    0H
         SUBEXIT ,
         EJECT
***********************************************************************
*                                                                     *
*       INFORM USER THAT OPEN FAILED AND DENY LOGON.                  *
*                                                                     *
***********************************************************************
N2$HNOPN DS    0H                  SYS1.UADS DID NOT OPEN
         LA    R0,L'OPENMSG        GET LENGTH OF MESSAGE
         L     R1,=A(OPENMSG)      POINT TO MESSAGE
         TPUT  (1),(0),R           ISSUE MESSAGE
         LA    R15,4               SET RETURN CODE
         OI    ETBITS1,ET1DENY     DENY LOGON
         B     N2$HEXIT            EXIT
         EJECT
***********************************************************************
*                                                                     *
*       INFORM USER THAT ESTAE RETURN CODE WAS NOT ZERO AND DENY      *
*       LOGON.                                                        *
*                                                                     *
***********************************************************************
N2$HNSTA DS    0H                  NON-ZERO RETURN CODE FROM ESTAE
         LR    R2,R15              PROTECT RETURN CODE
         L     R1,=A(ESTAEMSG)
         MVC   N2@MSGAR(L'ESTAEMSG),0(R1)  COPY MESSAGE
         CVD   R15,N2@WORK1        CONVERT TO DECIMAL
         OI    N2@WORK1+7,X'0F'    FIX SIGN
         UNPK  N2@WORK1(5),N2@WORK1+5(3) UNPACK
         MVC   N2@MSGAR+24(4),N2@WORK1+1 MOVE INTO MESSAGE
         LA    R0,L'ESTAEMSG       GET LENGTH OF MESSAGE
         LA    R1,N2@MSGAR         POINT TO MESSAGE
         TPUT  (1),(0),R           ISSUE MESSAGE
         LR    R15,R2              RESTORE RETURN CODE
         OI    ETBITS1,ET1DENY     DENY LOGON
         B     N2$HEXIT            EXIT
         TITLE 'IKJEFLN2 - CLEANUP RESOURCES'
*********************************************************************
*
* ROUTINE NAME -
*    N2$CLEAN
*
* FUNCTION -
*    PERFORMS CLEANUP FUNCTIONS.
*
* OPERATION -
*    9) IF UADS WAS OPENED, CLOSE AND FREE BUFFER.
*    9) IF ANYTHING WAS ENQ'D ON, DEQ IT.
*   10) CANCEL ESTAE.
*
*
* ENTRY POINTS -
*    N2$CLEAN
*
* EXTERNAL REFERENCES -
*    NONE
*
* INPUT -
*    NONE
*
* OUTPUT -
*    NONE
*
* MESSAGES -
*    NONE
*
*********************************************************************
         SPACE 3
N2$CLEAN DS    0H                  RETURN TO CALLER
         SUBENTRY ,                PROTECT RETURN CODE
         EJECT
*********************************************************************
*
*       IF UADS WAS OPENED, CLOSE AND FREE BUFFER.
*
*********************************************************************
         TM    ETUADS+DCBOFLGS-IHADCB,DCBOFOPN DID UADS OPEN
         BZ    N2$CNOPN            NO - NO NEED TO DO FREEMAIN
N2$CCLS  CLOSE MF=(E,ETOPENL)      CLOSE SYS1.UADS
N2$CNOPN DS    0H
         EJECT
*********************************************************************
*
*       IF ANYTHING WAS ENQ'D/RESERVED'D ON, DEQ IT
*
*********************************************************************
         TM    ETBITS2,ET2UADRS    WAS SYSIFJUA/OPENUADS ENQ'D ON
         BZ    N2$CUADS            NO - CONTINUE
         L     R15,=A(ENQLIST3)    YES - COPY ENQ LIST
         MVC   N2@ENQLT,0(R15)     YES - COPY ENQ LIST
         MVI   N2@ENQLT+1,8        PUT LENGTH OF RNAME IN ENQ LIST
         L     R15,=A(QNAME)       GET ADDRESS OF QNAME (SYSIKJUA)
         ST    R15,N2@ENQLT+4      PUT IN ENQ LIST
         L     R15,=A(RNAME)       GET ADDR OF RNAME (OPENUADS)
         ST    R15,N2@ENQLT+8      PUT IN ENQ LIST
         LA    R1,N2@ENQLT         GET ADDRESS OF ENQ LIST
         DEQ   MF=(E,(1))          DEQ LIKE TSO ACCOUNT DOES
         NI    ETBITS2,255-ET2UADRS TURN OFF SYSIKJUA/OPENUADS RESV
N2$CUADS DS    0H
         TM    ETBITS2,ET2SPFRS    WAS SPFDSN/DSN ENQ'D ON
         BZ    N2$CSPF             NO - CONTINUE
         L     R15,=A(RESLIST)     YES - COPY RESERVE LIST
         MVC   N2@ENQLT,0(R15)     YES - COPY RESERVE LIST
         MVI   N2@ENQLT+1,44       PUT LENGTH OF RNAME IN RES LIST
         MVC   N2@RNAME(44),ETJFCB MOVE DSNAME TO RNAME
         L     R15,=A(QNAME2)      GET ADDRESS OF QNAME (SPFDSN  )
         ST    R15,N2@ENQLT+4      PUT IN RESERVE LIST
         LA    R15,N2@RNAME        GET ADDR OF RNAME (DSN)
         ST    R15,N2@ENQLT+8      PUT IN RESERVE LIST
         LA    R15,ETAUCB          GET ADDRESS OF UCB ADDRESS
         ST    R15,N2@ENQLT+12     PUT IN RESERVE LIST
         LA    R1,N2@ENQLT         GET ADDRESS OF RESERVE LIST
         DEQ   MF=(E,(1))          DEQ LIKE ISPF DOES
         NI    ETBITS2,255-ET2SPFRS TURN OFF SPFDSN/DSN RESERVED
N2$CSPF  DS    0H
         TM    ETBITS2,ET2SPFE0    WAS MEMBER0 ENQ'D ON
         BZ    N2$CDEQ0            NO - GO CONTINUE
         L     R15,=A(ENQLIST2)    YES - COPY ENQ LIST
         MVC   N2@ENQLT,0(R15)     YES - COPY ENQ LIST
         MVI   N2@ENQLT+1,52       PUT LENGTH OF RNAME IN ENQ LIST
         MVC   N2@RNAME(44),ETJFCB MOVE DSNAME TO RNAME
         LH    R15,ETUSERID        GET LENGTH OF USERID
         LA    R1,ETMEMBER(R15)    POINT TO BYTE AFTER USERID
         MVI   0(R1),C'0'          ADD SUFFIX TO MAKE MEMBER0
         MVC   N2@RNAME+44(8),ETMEMBER APPEND MEMBER0 NAME TO DSN
         L     R15,=A(QNAME3)      GET ADDRESS OF QNAME (SPFEDIT )
         ST    R15,N2@ENQLT+4      PUT IN ENQ LIST
         LA    R15,N2@RNAME        GET ADDR OF RNAME (DSN+MEMBER0)
         ST    R15,N2@ENQLT+8      PUT IN ENQ LIST
         LA    R1,N2@ENQLT         GET ADDRESS OF ENQ LIST
         DEQ   MF=(E,(1))          DEQ LIKE ISPF DOES
         NI    ETBITS2,255-ET2SPFE0 TURN OFF MEMBER0 ENQ'D ON
N2$CDEQ0 DS    0H
         TM    ETBITS2,ET2SPFEI    WAS INFO BLOCK ENQ'D ON
         BZ    N2$CDEQI            NO - CONTINUE
         L     R15,=A(ENQLIST2)    YES - COPY ENQ LIST
         MVC   N2@ENQLT,0(R15)     YES - COPY ENQ LIST
         MVI   N2@ENQLT+1,52       PUT LENGTH OF RNAME IN ENQ LIST
         MVC   N2@RNAME(44),ETJFCB MOVE DSNAME TO RNAME
         MVC   N2@RNAME+44(8),ETINFOID APPEND INFO BLOCK NAME TO DSN
         L     R15,=A(QNAME3)      GET ADDRESS OF QNAME (SPFEDIT )
         ST    R15,N2@ENQLT+4      PUT IN ENQ LIST
         LA    R15,N2@RNAME        GET ADDR OF RNAME (DSN+USERID$)
         ST    R15,N2@ENQLT+8      PUT IN ENQ LIST
         LA    R1,N2@ENQLT         GET ADDRESS OF ENQ LIST
         DEQ   MF=(E,(1))          DEQ LIKE ISPF DOES
         NI    ETBITS2,255-ET2SPFEI TURN OFF INFO BLOCK ENQ'D ON
N2$CDEQI DS    0H
         EJECT
*********************************************************************
*
*       IF LOGON IS TO BE DENIED, SET DISCONNECT INDICATOR AND WAIT
*       5 SECONDS IF THIS IS A DISPLAY TERMINAL TO GIVE THE USER
*       TIME TO READ THE DIAGNOSTICS.
*
*********************************************************************
         TM    ETBITS1,ET1DENY     IS LOGON TO BE DENIED
         BNO   N2$COK              NO - CONTINUE
         GTSIZE ,                  DETERMINE TERMINAL TYPE
         LTR   R0,R0               WAS THIS A DISPLAY
         BZ    N2$CEND             NO - CONTINUE
         STIMER WAIT,DINTVL==C'00000500' - WAIT A LITTLE WHILE FIRST
         B     N2$CEND             THEN CONTINUE
N2$COK   DS    0H
         EJECT
*********************************************************************
*
*       IF DEBUGGING MODE, HANDLE DISPLAYS
*
*********************************************************************
N2$CEND  DS    0H
         TM    ETBITS3,ET3DEBUG    DEBUG IN PROGRESS??
         BZ    N2$C999             NOPE, SKIP CODE
         WTO   'IKJEFLN2: EXITING',ROUTCDE=(2)
         CLI   ETTEST,128
         BNE   N2$C999
         LR    R1,R10
         L     R15,=A(IKJEXIT+X'80000000')
         BASR  R14,R15
N2$C999  DS    0H
         EJECT
*********************************************************************
*
*       CANCEL ESTAE.
*
*********************************************************************
         ESTAE 0                   CANCEL ESTAE
         EJECT
********************************************************************
*
*       RETURN TO CALLER
*
********************************************************************
         SUBEXIT ,                 GET RETURN REG
         TITLE 'IKJEFLN2 - EXTRACT DATA FROM TGET BUFFER TO PARMS'
***********************************************************************
*                                                                     *
* ROUTINE NAME -                                                      *
*    N2$SCRN                                                          *
*                                                                     *
* FUNCTION -                                                          *
*    EXTRACT DATA FROM TGET BUFFER TO PARAMETER FIELDS                *
* *#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#* *
*                                                                     *
*   FUNCTION MADE OBSOLETE DUE TO INCLUSION IN APAR OY49074.          *
*                                                                     *
* *#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#* *
*                                                                     *
* OPERATION -                                                         *
*                                                                     *
*                                                                     *
* ENTRY POINTS -                                                      *
*    N2$SCRN                                                          *
*                                                                     *
* EXTERNAL REFERENCES -                                               *
*    NONE                                                             *
*                                                                     *
* INPUT -                                                             *
*    NONE                                                             *
*                                                                     *
* OUTPUT -                                                            *
*    NONE                                                             *
*                                                                     *
* MESSAGES -                                                          *
*    NONE                                                             *
*                                                                     *
* COMMENTS -                                                          *
*    NONE                                                             *
*                                                                     *
***********************************************************************
N2$SCRN  DS    0H
         SUBENTRY
         EJECT
***********************************************************************
*                                                                     *
*       FIND TGET BUFFER AND SCREEN MODULE ADDRESS                    *
*                                                                     *
***********************************************************************
         PARM  N2TGET              GET BUFFER ADDRESS
         LR    R4,R1               SAVE ADDRESS OF BUFFER START
         PARM  N2PANEL             GET PANEL ADDRESS
         LR    R5,R1               SAVE ADDRESS OF MODULE
         LH    R1,38(,R5)          GET OFFSET TO USER FIELDS
         LTR   R1,R1               ANY FIELDS
         BZ    N2$SFDNE            NO, BUT THIS SHOULD NOT HAPPEN
         AR    R5,R1               POINT AT THE USER HEADERS
         EJECT
***********************************************************************
*                                                                     *
*       WANDER THROUGH THE TGET BUFFER CHECKING PANEL FOR FIELDS      *
*              R4 => INPUT BUFFER AND IS STEPPED OVER IT              *
*              R5 => FIRST USER HEADER FIELD IN PANEL (ALWAYS)        *
*                                                                     *
***********************************************************************
         CLI   0(R4),X'7D'         IS THIS AN "ENTER"
         BNE   N2$SNENT            NOPE
         LA    R4,3(,R4)           POINT TO FIRST POSSIBLE FIELD
N2$SNFL1 CLI   0(R4),X'11'         IS THIS A "SF"
         BNE   N2$SFDNE            NOPE, ALL DONE
*
**       NOW FIND THE START OF NEXT FIELD
*
         LA    R6,3(,R4)           POINT TO DATA
N2$SEF1  CLI   0(R6),0             END OF DATA??
         BE    N2$SEF2             YES, SO END OF THIS ONE
         CLI   0(R6),X'11'         START OF NEXT ONE??
         BE    N2$SEF2             YES, SO END OF THIS ONE
         LA    R6,1(,R6)           GO TO NEXT
         B     N2$SEF1
N2$SEF2  DS    0H
*
**       LOOK FOR THIS FIELD IN THE PANEL HEADERS
*
         LR    R2,R5               GET ADDRESS OF HEADER
N2$SNHDR CLI   0(R2),X'FF'         OUT OF HEADERS
         BE    N2$SNFL2            YES, SO SKIP THIS FIELD
         CLC   1(2,R4),6(R2)       CHECK MATCH ON ADDRESS BYTES
         BE    N2$SFHDR            FOUND ONE OF OUR FIELDS CHANGED
         LA    R2,16(,R2)          GO TO NEXT FIELD
         B     N2$SNHDR
*
**       FOUND FIELD IN PANEL HEADERS, SAVE DATA
*
N2$SFHDR DS    0H
         SR    R2,R5               GET OFFSET
         SRL   R2,2                  IN TERMS OF WORDS
         PARM  N2UFLDS             GET ADDRESS OF USER FIELDS
         AR    R1,R2               GET TO PROPER WORD
         L     R1,0(R1)            POINT TO KEY, LEN, VALUE
         LR    R15,R6              GET END ADDRESS
         SR    R15,R4              GET LENGTH OF FIELD
         SH    R15,=H'4'           GET MACHINE LEN
         EX    R15,N2$SMV1         MOVE IN DATA
         LA    R15,1(,R15)         GET TRUE LENGTH
         ST    R15,4(,R1)          SAVE LENGTH
         MVC   0(4,R1),=F'1'       SET KEY
         TM    ETBITS3,ET3DEBUG    DEBUG IN PROGRESS??
         BZ    N2$SNFL2            NO SKIP DEBUG CODE
         SRL   R2,2                GET REAL NUMBER
         CVD   R2,N2@WORK1         GET FIELD NUMBER
         MVC   N2@MSGAR(N2DBG1L),N2DBG1 MOVE IN FIELD
         ED    N2@MSGAR+25(4),N2@WORK1+6
         WTO   MF=(E,N2@MSGAR)
*
**       GO DO NEXT FIELD FROM TGET BUFFER
*
N2$SNFL2 DS    0H                  NEED TO DO NEXT FIELD
         LR    R4,R6               SET POINTER TO NEXT
         B     N2$SNFL1
         SPACE 2
N2$SFDNE DS    0H                  DONE WITH FIELDS FROM TGET
         EJECT
***********************************************************************
*                                                                     *
*       RETURNS TO THE MAINLINE.                                      *
*                                                                     *
***********************************************************************
         SR    R15,R15             CLEAR RETURN CODE
N2$SEXIT DS    0H
         SUBEXIT
         SPACE 2
N2$SMV1  MVC   8(0,R1),3(R4)       ** EXECUTED **
         EJECT
***********************************************************************
*                                                                     *
*        PROCESS IF NOT "ENTER" KEY                                   *
*                                                                     *
***********************************************************************
N2$SNENT DS    0H
         CLI   0(R4),X'F1'         IS IT PFK 1
         BE    N2$SFDNE              YES, EXIT
         CLI   0(R4),X'F3'         IS IT PFK 3
         BE    N2$SFDNE              YES, EXIT
         CLI   0(R4),X'C1'         IS IT PFK 13
         BE    N2$SFDNE              YES, EXIT
         CLI   0(R4),X'C3'         IS IT PFK 15
         BE    N2$SFDNE              YES, EXIT
         MVC   N2@MSGAR(N2DBG2L),N2DBG2 MOVE IN MESSAGE
         UNPK  N2@MSGAR+23(3),0(2,R4) GET AID BYTE
         L     R1,=A(TRTABLE-240)
         TR    N2@MSGAR+23(2),0(R1) MAKE HEX
         MVI   N2@MSGAR+23+2,C' '  BLANK OUT GARBAGE
         WTO   MF=(E,N2@MSGAR)
         LA    R15,12              SET ERROR RETURN
         B     N2$SEXIT            EXIT WITH ERROR
         TITLE 'IKJEFLN2 - EXTRACT DATA FROM PARM FIELDS'
***********************************************************************
*                                                                     *
* ROUTINE NAME -                                                      *
*    N2$EXTR                                                          *
*                                                                     *
* FUNCTION -                                                          *
*    EXTRACT DATA FROM PARAMETER FIELDS AND SAVE IN OUR BLOCKS        *
*                                                                     *
* OPERATION -                                                         *
*                                                                     *
*                                                                     *
* ENTRY POINTS -                                                      *
*    N2$EXTR                                                          *
*                                                                     *
* EXTERNAL REFERENCES -                                               *
*    NONE                                                             *
*                                                                     *
* INPUT -                                                             *
*    NONE                                                             *
*                                                                     *
* OUTPUT -                                                            *
*    NONE                                                             *
*                                                                     *
* MESSAGES -                                                          *
*    NONE                                                             *
*                                                                     *
* COMMENTS -                                                          *
*    NONE                                                             *
*                                                                     *
***********************************************************************
N2$EXTR  DS    0H
         SUBENTRY
         EJECT
***********************************************************************
*                                                                     *
*       GET DATA ITEMS.                                               *
*                                                                     *
***********************************************************************
         PARM  N2PROC              GET PROCEDURE NAME
         LA    R4,ETPROC
         BAL   R14,N2$ES1
         PARM  N2ACCNT             GET ACCOUNT NUMBER
         LA    R4,ETACCNT
         BAL   R14,N2$ES1
         PARM  N2RSIZE             GET REGION SIZE
         LA    R4,ETSIZE
         BAL   R14,N2$ES1
         PARM  N2PERFGP            GET PERFORMANCE GROUP
         LA    R4,ETPERFG
         BAL   R14,N2$ES1
         PARM  N2UFLDS             GET ADDRESS FIELD
         LR    R7,R1
*  SET ADDRESS VALUE
         L     R15,0*4(,R7)        GET ADDRESS OF KEY
         LA    R1,8(,R15)          GET ADDRESS OF DATA
         LA    R4,ETADDRS
         BAL   R14,N2$ES1
*  SET PROGRAMMER NAME VALUE
         L     R15,1*4(,R7)        GET ADDRESS OF FIELD
         LA    R1,8(,R15)          GET ADDRESS OF DATA
         LA    R4,ETPRGNM
         BAL   R14,N2$ES1
*  SET CPU TIME VALUE
         L     R15,2*4(,R7)        GET ADDRESS OF FIELD
         LA    R1,8(,R15)          GET ADDRESS OF DATA
         LA    R4,ETCPTIM
         BAL   R14,N2$ES1
*  SET ROOM VALUE
         L     R15,3*4(,R7)        GET ADDRESS OF FIELD
         LA    R1,8(,R15)          GET ADDRESS OF DATA
         LA    R4,ETROOM
         BAL   R14,N2$ES1
*  SET FORM VALUE
         L     R15,4*4(,R7)        GET ADDRESS OF FIELD
         LA    R1,8(,R15)          GET ADDRESS OF DATA
         LA    R4,ETFORM
         BAL   R14,N2$ES1
*  SET MESSAGE CLASS VALUE
         L     R15,5*4(,R7)        GET ADDRESS OF FIELD
         LA    R1,8(,R15)          GET ADDRESS OF DATA
         LA    R4,ETMSGC
         BAL   R14,N2$ES1
         OI    ETMSGC+2,X'40'      SET TO UPPER CASE
*  SET MESSAGE LEVEL VALUE
         L     R15,6*4(,R7)        GET ADDRESS OF FIELD
         LA    R1,8(,R15)          GET ADDRESS OF DATA
         LA    R4,ETMSGL
         BAL   R14,N2$ES1
*  SET COPIES VALUE
         L     R15,7*4(,R7)        GET ADDRESS OF FIELD
         LA    R1,8(,R15)          GET ADDRESS OF DATA
         LA    R4,ETCOPY
         BAL   R14,N2$ES1
*  SET LINE COUNT VALUE
         L     R15,8*4(,R7)        GET ADDRESS OF FIELD
         LA    R1,8(,R15)          GET ADDRESS OF DATA
         LA    R4,ETLINCT
         BAL   R14,N2$ES1
*  SET JCL FLAG VALUE
         L     R1,9*4(,R7)         GET ADDRESS OF FIELD
         NI    ETBITS3,255-ET3JCL  SET BIT OFF
         OI    8(R1),X'40'         SHIFT TO UPPER CASE
         CLI   8(R1),C'S'          IS IT SET??
         BNE   *+8                 NOPE, SO LEAVE BIT OFF
         OI    ETBITS3,ET3JCL      SET FLAG ON
*  SET LISTINFO FLAG VALUE
         L     R1,10*4(,R7)        GET ADDRESS OF FIELD
         NI    ETBITS3,255-ET3LSTIN SET BIT OFF
         OI    8(R1),X'40'         SHIFT TO UPPER CASE
         CLI   8(R1),C'S'          IS IT SET??
         BNE   *+8                 NOPE, SO LEAVE BIT OFF
         OI    ETBITS3,ET3LSTIN    SET FLAG ON
N2$E10   DS    0H
         EJECT
***********************************************************************
*                                                                     *
*       RETURNS TO THE MAINLINE.                                      *
*                                                                     *
***********************************************************************
         SR    R15,R15             CLEAR RETURN CODE
N2$EEXIT DS    0H
         SUBEXIT
         EJECT
***********************************************************************
*                                                                     *
*       SUBROUTINE TO MOVE DATA AND SAVE LENGTH.                      *
*                                                                     *
*              R1 => DATA FIELD OF DATA TO MOVE                       *
*              R4 => LENGTH(2), DATA                                  *
*              R14 = RETURN ADDRESS                                   *
*              R15 => KEY/LENGTH/ FIELD OF DATA TO MOVE               *
*                                                                     *
***********************************************************************
N2$ES1   ICM   R2,B'1111',4(R15)   GET LENGTH
         BZR   R14                 FIELD NOT SET
         LTR   R15,R15             ANY KEY POINTER??
         BZ    N2$E10              NOPE, GET OUT OF HERE
         CLC   0(4,R15),=F'0'      DOES KEY EXIST
         BER   R14                 IF NOT THEN SKIP
         CLI   0(R1),0             IS DATA BINARY ZEROS
         BER   R14                 IF SO SKIP MOVE
         STH   R2,0(,R4)           SAVE LENGTH
         BCTR  R2,0                GET MACHINE LENGTH
         EX    R2,N2$ES11
         BR    R14
N2$ES11  MVC   2(0,R4),0(R1)       ** EXECUTED **
         TITLE 'IKJEFLN2 - SPECIAL USER NEEDS'
***********************************************************************
*                                                                     *
* ROUTINE NAME -                                                      *
*    N2$SPUR                                                          *
*                                                                     *
* FUNCTION -                                                          *
*                                                                     *
*                                                                     *
* OPERATION -                                                         *
*                                                                     *
*                                                                     *
* ENTRY POINTS -                                                      *
*    N2$SPUR                                                          *
*                                                                     *
* EXTERNAL REFERENCES -                                               *
*    NONE                                                             *
*                                                                     *
* INPUT -                                                             *
*    NONE                                                             *
*                                                                     *
* OUTPUT -                                                            *
*    NONE                                                             *
*                                                                     *
* MESSAGES -                                                          *
*    NONE                                                             *
*                                                                     *
* COMMENTS -                                                          *
*    NONE                                                             *
*                                                                     *
***********************************************************************
N2$SPUR  DS    0H
         SUBENTRY ,
         EJECT
***********************************************************************
*                                                                     *
*       FOR PRIVILEDGED USERS ALLOW ANY PROCEDURE                     *
*                                                                     *
***********************************************************************
         CLI   ETUSERID+2,C'S'     IS THIS PRIV USER
         BNE   N2$SP10             NOPE
         PARM  N2PROC
         MVC   0(4,R15),=F'4'      LOCK THE PROCEDURE
         SPACE 2
*
*  FOLLOWING CODE INSERTED DUE TO SOLUTION OF APAR OY48687
*  DEFAULT UNIT NAME AND REGION SIZE.   SEE 0X148
*
         PARM  N2PSCB
         USING PSCB,R1             SETUP ADDRESSABILITY
         MVC   PSCBGPNM,=CL8' '    SET SOME DEFAULTS
         MVC   PSCBRSZ,=F'0'         TO ELIMINATE THE GARBAGE
         PARM  N2RSIZE
         MVC   0(4,R15),=F'4'      LOCK THE REGION SIZE
         DROP  R1
         SPACE 2
N2$SP10  DS    0H
         EJECT
***********************************************************************
*                                                                     *
*       RETURNS TO THE MAINLINE.                                      *
*                                                                     *
***********************************************************************
         SR    R15,R15             CLEAR RETURN CODE
N2$PEXIT DS    0H
         SUBEXIT
         TITLE 'IKJEFLN2 - TEMPORARY ENTRY POINTS '
         PUSH  USING
         DROP  R12
         USING *,R15
N2$RETRY DS    0H
         L     R12,=A(IKJEFLN2)    GET REAL BASE
         POP   USING
         OI    ETBITS1,ET1DENY     MARK TO DENY
         LA    R15,16              SET ABEND RETURN CODE
         B     N2$EXIT             ALL DONE
N2$      DS    0H
         SR    R15,R15
         BR    R14
         LTORG ,
         DROP  ,
N2DBG1   DC    AL2(N2DBG1L-4,X'8000')
         DC    C'IKJEFLN2: FOUND FIELD ',X'202120',C' MODIFIED'
         DC    AL2(0,X'4000')
N2DBG1L  EQU   *-N2DBG1
N2DBG2   DC    AL2(N2DBG2L-4,X'8000')
         DC    C'IKJEFLN2: BAD AID: XX REJECTED'
         DC    AL2(0,X'4000')
N2DBG2L  EQU   *-N2DBG2
         TITLE 'IKJEFLN2 - LOCAL WORK AREA DSECT'
DSAN2    DSECT
N2@SAVE  DS    (18*5)F
N2@WORK1 DS    D                   GENERAL WORK AREA
         SPACE 5
*        THE FOLLOWING STORAGE IS FOR ESTAE AND ESTAE PROCESSING
N2@ESTAE ESTAE ,MF=L               ESTAE PARAMETER LIST
         SPACE 5
* THE FOLLOWING STORAGE IS FOR ENQ
         DS    0F                  ALIGNMENT
N2@ENQLT DS    XL(LENQLIST)        ENQ LIST
N2@RNAME DS    CL52                RNAME FOR SPF TYPE ENQ
         SPACE 5
* THE FOLLOWING STORAGE IS FOR BLDL
N2@BLDL  DS    0F                  BLDL LIST
N2@BLFF  DS    H                   FF   NUMBER OF ENTRIES
N2@BLLL  DS    H                   LL   LENGTH OF EACH ENTRY
N2@BLNM  DS    CL8                 NAME
N2@BLTTR DS    XL4                 TTRC
N2@BLNSZ EQU   *-N2@BLNM           SIZE OF ENTRY
         DS    7XL(N2@BLNSZ)       EXTRA ENTRIES
         SPACE 5
* THE FOLLOWING STORAGE IS THE MESSAGE AREA
N2@MSGAR DS    CL100
DSAN2L   EQU   *-DSAN2
         TITLE 'IKJEFLN2 - STANDARD EXIT PARAMETER LIST'
N2CMDBFR EQU   1                   COMMAND BUFFER
N2NEWCMD EQU   2                   NEW COMMAND BUFFER
N2UPT    EQU   3                   UPT
N2ECT    EQU   4                   ECT
N2PSCB   EQU   5                   PSCB
N2EXTOEX EQU   6                   EXIT TO EXIT COMM WORD
N2RCODE  EQU   7                   EXIT REASON CODE
*              8                   RESERVED
*              9                   RESERVED
N2SWITCH EQU   10                  SWITCHES
N2SW4RPT EQU   X'80'               FORCE REPROMPT
N2PANEL  EQU   11                  PANEL MODULE
N2TGET   EQU   12                  TGET BUFFER
N2HELP   EQU   13                  HELP PANEL NUMBER
N2LANG   EQU   14                  LANGUAGE CODE
N2REPMPT EQU   15                  REPROMPT CODE
N2UFLDS  EQU   16                  USER FIELD PARM LIST
*              17                  RESERVED
*              18                  RESERVED
N2MSG1   EQU   19                  FIRST MESSAGE
N2MSG2   EQU   20                  SECOND MESSAGE
N2USERID EQU   21                  USERID
N2PASSWD EQU   22                  PASSWORD
N2ACCNT  EQU   23                  ACCOUNT NUMBER
N2PROC   EQU   24                  PROCEDURE NAME
N2RSIZE  EQU   25                  REGION SIZE
N2PERFGP EQU   26                  JCL STATEMENTS
N2NPSWD  EQU   27                  NEW PASSWORD
N2GROUP  EQU   28                  RACF GROUP
N2NOMAIL EQU   29                  NO MAIL INDICATOR
N2NONOTC EQU   30                  NO NOTICIES INDICATOR
N2RECONN EQU   31                  RECONNECT INDICATOR
N2OIDCRD EQU   32                  OPERATOR ID CARD INDICATOR
N2FSTCMD EQU   33                  FIRST COMMAND
N2SECLBL EQU   34                  SECLABEL
         TITLE 'IKJEFLD3 - LOGON POST-PROMPT EXIT'
***********************************************************************
*                                                                     *
* ROUTINE NAME -                                                      *
*        IKJEFLD3                                                     *
*                                                                     *
* FUNCTION -                                                          *
*        LOGON POST PROMPT EXIT                                       *
*                                                                     *
* OPERATION -                                                         *
*        THE FOLLOWING FUNCTIONS ARE DONE:                            *
*               1. DUMP OUT CURRENT INFO                              *
*               2. VERIFY TERMINAL RESTRICTIONS                       *
*               3. PERFORM 'ASKBACK' FUNCTION                         *
*               4. UPDATE AND OUTPUT INFO BLOCK IF NECESSARY          *
*               5. BUILD JCL.                                         *
*                                                                     *
* ENTRY POINTS -                                                      *
*        IKJEFLD3                                                     *
*                                                                     *
* EXTERNAL REFERENCES -                                               *
*    NONE                                                             *
*                                                                     *
* INPUT -                                                             *
*    NONE                                                             *
*                                                                     *
* OUTPUT -                                                            *
*    NONE                                                             *
*                                                                     *
* MESSAGES -                                                          *
*    NONE                                                             *
*                                                                     *
* COMMENTS -                                                          *
*    NONE                                                             *
*                                                                     *
***********************************************************************
IKJEFLD3 CSECT
IKJEFLD3 AMODE 31
IKJEFLD3 RMODE 24
         SAVE  (14,12),,IKJEFLD3_&SYSDATE._&SYSTIME
         LR    R12,R15             SET NEW BASE REGISTER
         LR    R10,R1              SAVE PARM LIST
         USING IKJEFLD3,R12        SETUP ADDRESSABILITY
         EJECT
***********************************************************************
*                                                                     *
**       GET THIS EXIT WORK AREA/SAVE AREA                            *
*                                                                     *
***********************************************************************
         GETMAIN R,LV=DSAD3L,SP=2
         ST    R13,4(,R1)          SAVE ADDRESS
         LR    R13,R1              SET NEW SAVE AREA
         LR    R9,R1               SET NEW SAVE AREA
         USING DSAD3,R9
         PARM  D3EXTOEX            GET EXIT TO EXIT PARM ENTRY
         LR    R11,R1              SET ADDRESS
         USING EXTEX,R11
         EJECT
***********************************************************************
*                                                                     *
*       IF DEBUGGING MODE, HANDLE DISPLAYS                            *
*                                                                     *
***********************************************************************
         CLI   ETTEST,255          FLAG AS TEST VERSION WANTED?
         BNE   D3$M998             NOPE, SO USE PRODUCTION VERSION
         PARM  D3EXTOEX
         MVC   0(12,R15),ETHSKEY   SET TO ORIGINAL
         LR    R1,R10              GET PARM LIST
         LINK  EP=ZZZEFLD3         CALL TEST VERSION
         LR    R2,R15              SAVE RETURN CODE
         PARM  D3EXTOEX
         MVC   ETHSKEY(12),0(R15)  SAVE THE TEST PGMS STUFF
         MVC   0(12,R15),ETMYKEY   MOVE MY STUFF BACK IN
         B     D3$BYE              RETURN WITH TEST EXIT CODE
         SPACE 2
D3$M998  DS    0H
         TM    ETBITS3,ET3DEBUG    DEBUG IN PROGRESS??
         BZ    D3$M999             NOPE, SKIP CODE
         WTO   'IKJEFLD3: INSIDE',ROUTCDE=(2)
         CLI   ETTEST,128
         BNE   D3$M999
         LR    R1,R10
         L     R15,=A(IKJEXIT+X'80000000')
         BASR  R14,R15
D3$M999  DS    0H
         EJECT
***********************************************************************
*                                                                     *
*        MAINLINE PROCESSING                                          *
*                                                                     *
***********************************************************************
         SPACE 3
*               1. DO HOUSEKEEPING                                    *
         BAS   R14,D3$HSKP
         LTR   R15,R15
         BNZ   D3$DENY
*               1. DUMP OUT CURRENT INFO                              *
         BAS   R14,D3$DUMP
         LTR   R15,R15
         BNZ   D3$DENY
*               4. UPDATE AND OUTPUT INFO BLOCK IF NECESSARY          *
         BAS   R14,D3$UPDAT
         LTR   R15,R15
         BNZ   D3$DENY
*               5. BUILD JCL.                                         *
         BAS   R14,D3$BJCL
         LTR   R15,R15
         BNZ   D3$DENY
         EJECT
***********************************************************************
*                                                                     *
*        FREE THIS EXIT WORK AREA AND EXIT ROUTINE                    *
*                                                                     *
***********************************************************************
D3$EXIT  DS    0H
         SR    R2,R2               CLEAR RETURN CODE
D3$BYE   DS    0H
*               5. CLEANUP AND RETURN                                 *
         BAS   R14,D3$CLEAN
*
         PARM  D3EXTOEX            GET EXIT TO EXIT PARM ENTRY
         L     R0,4(,R15)          GET LENGTH AND SUBPOOL
         ICM   R0,B'1000',=AL1(21) SET SUBPOOL
         FREEMAIN R,LV=(0),A=(1)
         LR    R1,R13
         L     R13,4(,R13)
         FREEMAIN R,LV=DSAD3L,A=(1),SP=2
         LR    R15,R2              SET RETURN CODE
         L     R14,12(,R13)        RESTORE REGISTERS
         LM    R0,R12,20(R13)      RESTORE REGISTERS
         BSM   0,R14               RETURN
D3$DENY  LA    R2,16               DENY LOGON
         DC    H'0'
         B     D3$BYE
         TITLE 'IKJEFLD3 - HOUSEKEEPING FUNCTIONS'
***********************************************************************
*                                                                     *
* ROUTINE NAME -                                                      *
*    D3$HSKP                                                          *
*                                                                     *
* FUNCTION -                                                          *
*    PERFORMS HOUSEKEEPING FUNCTIONS FOR LOGONXIT.                    *
*                                                                     *
* OPERATION -                                                         *
*    1) ISSUES ESTAE.  IF ESTAE IS UNSUCCESSFUL, TELLS TSO USER AND   *
*       DENIES LOGON.                                                 *
*    7) ATTEMPTS TO OPEN SYS1.UADS.  IF OPEN IS UNSUCCESSFUL, TELLS   *
*       TSO USER AND DENIES LOGON.                                    *
*    8) GETS STORAGE FOR UADS DATA BLOCKS.                            *
*   14) RETURNS TO THE MAINLINE.
*                                                                     *
* ENTRY POINTS -                                                      *
*    D3$HSKP                                                          *
*                                                                     *
* EXTERNAL REFERENCES -                                               *
*    GETAUTH                                                          *
*                                                                     *
* INPUT -                                                             *
*    NONE                                                             *
*                                                                     *
* OUTPUT -                                                            *
*    NONE                                                             *
*                                                                     *
* MESSAGES -                                                          *
*    'ESTAE UNSUCCESSFUL - RC=NNNN'                                   *
*    'OPEN OF SYS1.UADS UNSUCCESSFUL'                                 *
*                                                                     *
***********************************************************************
         SPACE 3
D3$HSKP  DS    0H
         SUBENTRY ,
         EJECT
***********************************************************************
*                                                                     *
*       ISSUES ESTAE.  IF ESTAE IS UNSUCCESSFUL, TELLS TSO USER AND   *
*       DENIES LOGON.                                                 *
*                                                                     *
***********************************************************************
         L     R1,=A(LESTAE)
         MVC   D3@ESTAE(LGESTAE),0(R1) COPY ESTAE PARM LIST
         L     R3,=A(GP$ESTAE)     GET ADDRESS OF ESTAE EXIT
         LA    R4,ETESTPM          GET ADDRESS OF ESTAE PARMS
         LA    R1,D3$RETRY         POINT TO RETRY ROUTINE
         ST    R1,0(,R4)           SAVE ADDRESS OF RETRY ROUTINE
         ST    R9,4(,R4)           SAVE PHASE DSA ADDRESS
         ST    R11,8(,R4)          SAVE EXTOEX ADDRESSS
         ST    R10,12(,R4)         SAVE INPUT ADDRESSS
         ESTAE (3),PARAM=(4),MF=(E,D3@ESTAE) ESTABLISH ESTAE
         LTR   R15,R15             WAS ESTAE SUCCESSFUL
         BNZ   D3$HNSTA            NO - GO GIVE MESSAGE
         EJECT
***********************************************************************
*                                                                     *
*       ATTEMPTS TO OPEN SYS1.UADS.  IF OPEN IS UNSUCCESSFUL, TELLS   *
*       TSO USER AND DENIES LOGON.                                    *
*                                                                     *
***********************************************************************
         L     R15,=A(SYSUADS)     MOVE SYS1.UADS DCB TO DYNAMIC AREA
         MVC   ETUADS,0(R15)       MOVE SYS1.UADS DCB TO DYNAMIC AREA
         L     R15,=A(OPENUPDT)    MOVE OPEN LIST TO DYNAMIC AREA
         MVC   ETOPENL,0(R15)      MOVE OPEN LIST TO DYNAMIC AREA
         LA    R15,ETJFCB          GET ADDRESS OF JFCB AREA
         ST    R15,ETEXLST         PUT IN ETEXLST
         MVI   ETEXLST,X'87'       INDICATE JFCB ADDRESS
         LA    R15,ETEXLST         GET ADDRESS OF ETEXLST
         LA    R1,ETUADS           GET ADDRESS OF SYSUADS DCB
         USING IHADCB,R1           GET DCB ADDRESSABILITY
         STCM  R15,B'0111',DCBEXLSA PUT ADDRRESS OF ETEXLST IN DCB
         STCM  R1,B'0111',ETOPENL+1 PUT ADDR OF DCB IN OPEN LIST
         DROP  R1                  DROP DCB ADDRESSABILITY
         OPEN  MF=(E,ETOPENL)      ATTEMPT TO OPEN SYS1.UADS
         TM    ETUADS+DCBOFLGS-IHADCB,DCBOFOPN DID UADS OPEN
         BZ    D3$HNOPN            NO - GO TO ERROR ROUTINE
         RDJFCB MF=(E,ETOPENL)     YES - READ JFCB FOR LATER ENQ
         L     R15,PSATOLD-PSA     GET ADDRESS OF MY TCB
         L     R15,TCBTIO-TCB(,R15) GET ADDRESS OF MY TIOT
         AH    R15,ETUADS+DCBTIOT-IHADCB GET ADDRESS OF UADS TIOT
         MVC   ETAUCB,16(R15)      SAVE UCB ADDRESS FOR RESERVE
         EJECT
***********************************************************************
*                                                                     *
*       RETURNS TO THE MAINLINE.                                      *
*                                                                     *
***********************************************************************
         SR    R15,R15             SET GOOD RETURN CODE
D3$HEXIT DS    0H
         SUBEXIT ,
         EJECT
***********************************************************************
*                                                                     *
*       INFORM USER THAT OPEN FAILED AND DENY LOGON.                  *
*                                                                     *
***********************************************************************
D3$HNOPN DS    0H                  SYS1.UADS DID NOT OPEN
         LA    R0,L'OPENMSG        GET LENGTH OF MESSAGE
         L     R1,=A(OPENMSG)      POINT TO MESSAGE
         TPUT  (1),(0),R           ISSUE MESSAGE
         LA    R15,4               SET RETURN CODE
         OI    ETBITS1,ET1DENY     DENY LOGON
         B     D3$HEXIT            EXIT
         EJECT
***********************************************************************
*                                                                     *
*       INFORM USER THAT ESTAE RETURN CODE WAS NOT ZERO AND DENY      *
*       LOGON.                                                        *
*                                                                     *
***********************************************************************
D3$HNSTA DS    0H                  NON-ZERO RETURN CODE FROM ESTAE
         LR    R2,R15              PROTECT RETURN CODE
         L     R1,=A(ESTAEMSG)
         MVC   D3@MSGAR(L'ESTAEMSG),0(R1)  COPY MESSAGE
         CVD   R15,D3@WORK1        CONVERT TO DECIMAL
         OI    D3@WORK1+7,X'0F'    FIX SIGN
         UNPK  D3@WORK1(5),D3@WORK1+5(3) UNPACK
         MVC   D3@MSGAR+24(4),D3@WORK1+1 MOVE INTO MESSAGE
         LA    R0,L'ESTAEMSG       GET LENGTH OF MESSAGE
         LA    R1,D3@MSGAR         POINT TO MESSAGE
         TPUT  (1),(0),R           ISSUE MESSAGE
         LR    R15,R2              RESTORE RETURN CODE
         OI    ETBITS1,ET1DENY     DENY LOGON
         B     D3$HEXIT            EXIT
         TITLE 'IKJEFLD3 - CLEANUP RESOURCES'
*********************************************************************
*
* ROUTINE NAME -
*    D3$CLEAN
*
* FUNCTION -
*    PERFORMS CLEANUP FUNCTIONS.
*
* OPERATION -
*    9) IF UADS WAS OPENED, CLOSE AND FREE BUFFER.
*    9) IF ANYTHING WAS ENQ'D ON, DEQ IT.
*   10) CANCEL ESTAE.
*
*
* ENTRY POINTS -
*    D3$CLEAN
*
* EXTERNAL REFERENCES -
*    NONE
*
* INPUT -
*    NONE
*
* OUTPUT -
*    NONE
*
* MESSAGES -
*    NONE
*
*********************************************************************
         SPACE 3
D3$CLEAN DS    0H                  RETURN TO CALLER
         SUBENTRY ,                PROTECT RETURN CODE
         EJECT
*********************************************************************
*
*       IF UADS WAS OPENED, CLOSE AND FREE BUFFER.
*
*********************************************************************
         TM    ETUADS+DCBOFLGS-IHADCB,DCBOFOPN DID UADS OPEN
         BZ    D3$CNOPN            NO - NO NEED TO DO FREEMAIN
         L     R0,ETUADSIZ         GET SIZE GOTTEN
         ICM   R1,B'1111',ETUADADR GET ADDRESS OF GOTTEN AREA
         BZ    D3$CCLS             IF ZERO - SKIP FREEMAIN - DO CLOS
         XC    ETUADADR,ETUADADR   CLEAR ADDRESS
         FREEMAIN R,LV=(0),A=(1)   FREE AREA FOR SYS1.UADS BUFFER
D3$CCLS  CLOSE MF=(E,ETOPENL)      CLOSE SYS1.UADS
D3$CNOPN DS    0H
         EJECT
*********************************************************************
*
*       IF ANYTHING WAS ENQ'D/RESERVED'D ON, DEQ IT
*
*********************************************************************
         TM    ETBITS2,ET2UADRS    WAS SYSIFJUA/OPENUADS ENQ'D ON
         BZ    D3$CUADS            NO - CONTINUE
         L     R15,=A(ENQLIST3)    YES - COPY ENQ LIST
         MVC   D3@ENQLT,0(R15)     YES - COPY ENQ LIST
         MVI   D3@ENQLT+1,8        PUT LENGTH OF RNAME IN ENQ LIST
         L     R15,=A(QNAME)       GET ADDRESS OF QNAME (SYSIKJUA)
         ST    R15,D3@ENQLT+4      PUT IN ENQ LIST
         L     R15,=A(RNAME)       GET ADDR OF RNAME (OPENUADS)
         ST    R15,D3@ENQLT+8      PUT IN ENQ LIST
         LA    R1,D3@ENQLT         GET ADDRESS OF ENQ LIST
         DEQ   MF=(E,(1))          DEQ LIKE TSO ACCOUNT DOES
         NI    ETBITS2,255-ET2UADRS TURN OFF SYSIKJUA/OPENUADS RESV
D3$CUADS DS    0H
         TM    ETBITS2,ET2SPFRS    WAS SPFDSN/DSN ENQ'D ON
         BZ    D3$CSPF             NO - CONTINUE
         L     R15,=A(RESLIST)     YES - COPY RESERVE LIST
         MVC   D3@ENQLT,0(R15)     YES - COPY RESERVE LIST
         MVI   D3@ENQLT+1,44       PUT LENGTH OF RNAME IN RES LIST
         MVC   D3@RNAME(44),ETJFCB MOVE DSNAME TO RNAME
         L     R15,=A(QNAME2)      GET ADDRESS OF QNAME (SPFDSN  )
         ST    R15,D3@ENQLT+4      PUT IN RESERVE LIST
         LA    R15,D3@RNAME        GET ADDR OF RNAME (DSN)
         ST    R15,D3@ENQLT+8      PUT IN RESERVE LIST
         LA    R15,ETAUCB          GET ADDRESS OF UCB ADDRESS
         ST    R15,D3@ENQLT+12     PUT IN RESERVE LIST
         LA    R1,D3@ENQLT         GET ADDRESS OF RESERVE LIST
         DEQ   MF=(E,(1))          DEQ LIKE ISPF DOES
         NI    ETBITS2,255-ET2SPFRS TURN OFF SPFDSN/DSN RESERVED
D3$CSPF  DS    0H
         TM    ETBITS2,ET2SPFE0    WAS MEMBER0 ENQ'D ON
         BZ    D3$CDEQ0            NO - GO CONTINUE
         L     R15,=A(ENQLIST2)    YES - COPY ENQ LIST
         MVC   D3@ENQLT,0(R15)     YES - COPY ENQ LIST
         MVI   D3@ENQLT+1,52       PUT LENGTH OF RNAME IN ENQ LIST
         MVC   D3@RNAME(44),ETJFCB MOVE DSNAME TO RNAME
         LH    R15,ETUSERID        GET LENGTH OF USERID
         LA    R1,ETMEMBER(R15)    POINT TO BYTE AFTER USERID
         MVI   0(R1),C'0'          ADD SUFFIX TO MAKE MEMBER0
         MVC   D3@RNAME+44(8),ETMEMBER APPEND MEMBER0 NAME TO DSN
         L     R15,=A(QNAME3)      GET ADDRESS OF QNAME (SPFEDIT )
         ST    R15,D3@ENQLT+4      PUT IN ENQ LIST
         LA    R15,D3@RNAME        GET ADDR OF RNAME (DSN+MEMBER0)
         ST    R15,D3@ENQLT+8      PUT IN ENQ LIST
         LA    R1,D3@ENQLT         GET ADDRESS OF ENQ LIST
         DEQ   MF=(E,(1))          DEQ LIKE ISPF DOES
         NI    ETBITS2,255-ET2SPFE0 TURN OFF MEMBER0 ENQ'D ON
D3$CDEQ0 DS    0H
         TM    ETBITS2,ET2SPFEI    WAS INFO BLOCK ENQ'D ON
         BZ    D3$CDEQI            NO - CONTINUE
         L     R15,=A(ENQLIST2)    YES - COPY ENQ LIST
         MVC   D3@ENQLT,0(R15)     YES - COPY ENQ LIST
         MVI   D3@ENQLT+1,52       PUT LENGTH OF RNAME IN ENQ LIST
         MVC   D3@RNAME(44),ETJFCB MOVE DSNAME TO RNAME
         MVC   D3@RNAME+44(8),ETINFOID APPEND INFO BLOCK NAME TO DSN
         L     R15,=A(QNAME3)      GET ADDRESS OF QNAME (SPFEDIT )
         ST    R15,D3@ENQLT+4      PUT IN ENQ LIST
         LA    R15,D3@RNAME        GET ADDR OF RNAME (DSN+USERID$)
         ST    R15,D3@ENQLT+8      PUT IN ENQ LIST
         LA    R1,D3@ENQLT         GET ADDRESS OF ENQ LIST
         DEQ   MF=(E,(1))          DEQ LIKE ISPF DOES
         NI    ETBITS2,255-ET2SPFEI TURN OFF INFO BLOCK ENQ'D ON
D3$CDEQI DS    0H
         EJECT
*********************************************************************
*
*       IF LOGON IS TO BE DENIED, SET DISCONNECT INDICATOR AND WAIT
*       5 SECONDS IF THIS IS A DISPLAY TERMINAL TO GIVE THE USER
*       TIME TO READ THE DIAGNOSTICS.
*
*********************************************************************
         TM    ETBITS1,ET1DENY     IS LOGON TO BE DENIED
         BNO   D3$COK              NO - CONTINUE
         GTSIZE ,                  DETERMINE TERMINAL TYPE
         LTR   R0,R0               WAS THIS A DISPLAY
         BZ    D3$CEND             NO - CONTINUE
         STIMER WAIT,DINTVL==C'00000500' - WAIT A LITTLE WHILE FIRST
         B     D3$CEND             THEN CONTINUE
D3$COK   DS    0H
         EJECT
*********************************************************************
*
*       IF DEBUGGING MODE, HANDLE DISPLAYS
*
*********************************************************************
D3$CEND  DS    0H
         TM    ETBITS3,ET3DEBUG    DEBUG IN PROGRESS??
         BZ    D3$C999             NOPE, SKIP CODE
         WTO   'IKJEFLD3: EXITING',ROUTCDE=(2)
         CLI   ETTEST,128
         BNE   D3$C999
         LR    R1,R10
         L     R15,=A(IKJEXIT+X'80000000')
         BASR  R14,R15
D3$C999  DS    0H
         EJECT
*********************************************************************
*
*       CANCEL ESTAE.
*
*********************************************************************
         ESTAE 0                   CANCEL ESTAE
         EJECT
********************************************************************
*
*       RETURN TO CALLER
*
********************************************************************
         SUBEXIT ,                 GET RETURN REG
         TITLE 'IKJEFLD3 - BUILD LOGON JCL FOR USER'
***********************************************************************
*                                                                     *
* ROUTINE NAME -                                                      *
*    D3$BJCL                                                          *
*                                                                     *
* FUNCTION -                                                          *
*    CREATE THE JCL FROM THE PARAMETERS SPECIFIED BY THE USER         *
*                                                                     *
* OPERATION -                                                         *
*                                                                     *
*                                                                     *
* ENTRY POINTS -                                                      *
*    D3$BJCL                                                          *
*                                                                     *
* EXTERNAL REFERENCES -                                               *
*    NONE                                                             *
*                                                                     *
* INPUT -                                                             *
*    NONE                                                             *
*                                                                     *
* OUTPUT -                                                            *
*    NONE                                                             *
*                                                                     *
* MESSAGES -                                                          *
*    NONE                                                             *
*                                                                     *
* COMMENTS -                                                          *
*    NONE                                                             *
*                                                                     *
***********************************************************************
D3$BJCL  DS    0H
         SUBENTRY
         EJECT
***********************************************************************
*                                                                     *
*        DUMP OUT IBM SUPPLIED JCL                                    *
*                                                                     *
***********************************************************************
         TM    ETBITS3,ET3DEBUG    DEBUG IN PROGRESS??
         BZ    D3$BJ12             NOPE, SKIP CODE
         PARM  D3JCL
         LR    R2,R1               SAVE ADDRESS
         L     R3,4(,R15)          GET LENGTH
         WTO   'IKJEFLD3: ORIGINAL JCL',ROUTCDE=(2)
D3$BJ10  MVC   D3@MSGAR+4(80),0(R2) GET CARD IMAGE
         MVC   D3@MSGAR(4),=AL2(84,X'8000')
         MVC   D3@MSGAR+84(4),=AL2(0,X'4000')
         WTO   MF=(E,D3@MSGAR)
         LA    R2,80(,R2)          UPDATE POINTER
         SH    R3,=H'80'           DECREMENT LENGTH
         BP    D3$BJ10             KEEP GOING IF MORE CARDS
D3$BJ12  DS    0H
         EJECT
***********************************************************************
*                                                                     *
*        ALLOCATE SPACE FOR MY JCL                                    *
*         (BY USING SP 1 THE STORAGE WILL BE FREED WHEN THE REAL      *
*          TSU JOB STARTS (REGION FREE), OR SO SAYS THE MANUAL.)      *
*                                                                     *
***********************************************************************
         GETMAIN R,LV=20*80,SP=1   SPACE FOR 20 CARDS
         LA    R2,20               MAX CARD COUNT
         ST    R1,ETAJCL           SAVE ADDRESS
         ST    R2,ETCDMAX          SAVE MAX COUNT
         XC    ETCDCNT,ETCDCNT     CLEAR COUNT
         LR    R5,R1               SET ADDRESS OF FIRST
         LA    R6,70(R5)           SET POINTER TO LAST BYTE
         MVC   0(80,R5),=CL80' '   BLANK OUT CARD
         EJECT
***********************************************************************
*                                                                     *
*        BUILD JOB CARD                                               *
*                                                                     *
***********************************************************************
         SPACE 2
*  START WITH JOBNAME
         LA    R2,D3$JJ1           ALL JCL STARTS WITH //
         LA    R3,ETUSERID         SET JOBNAME TO USERID
         SR    R4,R4               NO SECOND CONSTANT
         BAL   R14,D3$BJ300        HANDLE CVC
*  NOW THE ACCOUNT NUMBER
         LA    R2,D3$JJ2           THE " JOB '"
         LA    R3,ETACCNT          DUMP OUT ACCOUNT NUMBER
         SR    R4,R4               NO SECOND CONSTANT
         BAL   R14,D3$BJ300        HANDLE CVC
*  THEN EITHER THE PROGRAMMER NAME OR USERID
         LA    R2,D3$JJ3           THE "','"
         LA    R3,ETPRGNM          SET FOR PROGRAMMER NAME
         OC    ETPRGNM(2),ETPRGNM  ANY PROGRAMMER NAME
         BNZ   D3$BJ20             YES, SO USE IT
         LA    R3,ETUSERID         OTHERWISE USE USERID
D3$BJ20  LA    R4,D3$JJ4           THE "'"
         BAL   R14,D3$BJ300        HANDLE CVC
*  NOW THE OPTIONAL MESSAGE CLASS
         LA    R2,D3$JJ5           THE ",MSGCLASS="
         LA    R3,ETMSGC           AND THE MESSAGE CLASS
         SR    R4,R4               NO SECOND CONSTANT
         BAL   R14,D3$BJ300
*  NOW THE OPTIONAL MESSAGE LEVEL
         LA    R2,D3$JJ6           THE ",MSGELEVEL=("
         LA    R3,ETMSGL           AND THE MESSAGE CLASS
         LA    R4,D3$JJ7           THE ")"
         BAL   R14,D3$BJ300
         EJECT
***********************************************************************
*                                                                     *
*        BUILD OUTPUT CARD                                            *
*                                                                     *
***********************************************************************
         SPACE 2
         BAL   R14,D3$BJ400        GO TO NEXT CARD
*  START WITH USERID AS OUTPUT NAME
         LA    R2,D3$JJ1           ALL JCL STARTS WITH //
         LA    R3,ETUSERID         SET JOBNAME TO USERID
         LA    R4,D3$JO1           THE " OUTPUT DEFAULT=YES,JESDS=ALL"
         BAL   R14,D3$BJ300        HANDLE CVC
*  THE OPTIONAL ADDRESS FIELD
         LA    R2,D3$JO2           THE ",ADDRESS=('"
         LA    R3,ETADDRS          AND THE ADDRESS LINE
         LA    R4,D3$JO3           THE "')"
         BAL   R14,D3$BJ300        HANDLE CVC
*  THE OPTIONAL ROOM FIELD
         LA    R2,D3$JO4           THE ",ROOM='"
         LA    R3,ETROOM           AND THE ROOM NUMBER
         LA    R4,D3$JO5           THE "'"
         BAL   R14,D3$BJ300        HANDLE CVC
*  THE OPTIONAL COPIES FIELD
         LA    R2,D3$JO6           THE ",COPIES="
         LA    R3,ETCOPY           AND THE COPY COUNT
         SR    R4,R4               NO SECOND CONSTANT
         BAL   R14,D3$BJ300        HANDLE CVC
*  THE OPTIONAL LINE COUNT FIELD
         LA    R2,D3$JO7           THE ",LINECT="
         LA    R3,ETLINCT          AND THE LINE COUNT
         SR    R4,R4               NO SECOND CONSTANT
         BAL   R14,D3$BJ300        HANDLE CVC
*  THE OPTIONAL FORM FIELD
         LA    R2,D3$JO8           THE ",FORM="
         LA    R3,ETFORM           AND THE FORM CODE
         OC    ETFORM+2(4),=CL4' ' FORCE TO UPPER CASE
         SR    R4,R4               NO SECOND CONSTANT
         BAL   R14,D3$BJ300        HANDLE CVC
         EJECT
***********************************************************************
*                                                                     *
*        BUILD EXEC CARD                                              *
*                                                                     *
***********************************************************************
         SPACE 2
         BAL   R14,D3$BJ400        GO TO NEXT CARD
*  START WITH TERMINAL NAME AS STEP NAME
         LA    R2,D3$JJ1           ALL JCL STARTS WITH //
         LA    R3,ETTERMID         SET STEPNAME TO TERMINAL ID
         SR    R4,R4               NO SECOND CONSTANT
         BAL   R14,D3$BJ300        HANDLE CVC
*  NOW THE PROCEDURE NAME
         LA    R2,D3$JE1           THE " EXEC "
         LA    R3,ETPROC           SET PROCEDURE NAME
         SR    R4,R4               NO SECOND CONSTANT
         BAL   R14,D3$BJ300        HANDLE CVC
*  AND THE TERMINAL NAME FOR THE ACCOUNTING
         LA    R2,D3$JE2           THE ",TERM="
         LA    R3,ETTERMID         SET TERMINAL NAME IN ACCT DATA
         SR    R4,R4               NO SECOND CONSTANT
         BAL   R14,D3$BJ300        HANDLE CVC
*  THE OPTIONAL CPU TIME VALUE
         LA    R2,D3$JE3           THE ",TIME="
         LA    R3,ETCPTIM          AND THE CPU TIME
         SR    R4,R4               NO SECOND CONSTANT
         BAL   R14,D3$BJ300        HANDLE CVC
*  THE OPTIONAL REGION SIZE VALUE
         LA    R2,D3$JE4           THE ",REGION="
         LA    R3,ETSIZE           AND THE REGION SIZE
         LA    R4,D3$JE5           THE "K"
         BAL   R14,D3$BJ300        HANDLE CVC
*  THE OPTIONAL REGION SIZE VALUE
         LA    R2,D3$JE6           THE ",PERFORM="
         LA    R3,ETPERFG          AND THE PERFORMANCE GROUP
         SR    R4,R4               NO SECOND CONSTANT
         BAL   R14,D3$BJ300        HANDLE CVC
         BAL   R14,D3$BJ400        GO PAST LAST CARD
         EJECT
***********************************************************************
*                                                                     *
*        IF USER JCL REQUESTED, CHECK IF SYSTEMS USERS                *
*                                                                     *
***********************************************************************
         TM    ETBITS3,ET3JCL      WAS JCL REQUESTED
         BZ    D3$BALL             NOPE, SKIP CODE
         CLI   ETUSERID+2,C'S'     IS THIS A SOFTWARE USER
         BE    D3$BLOOP            YES - 'JCL' OK
         LA    R0,L'BADJCL         NO - GET LENGTH OF MESSAGE
         L     R1,=A(BADJCL)       POINT TO MESSAGE
         TPUT  (1),(0),R           ISSUE MESSAGE
         B     D3$BALL             AND RETURN TO CALLER
         EJECT
*********************************************************************
*
*       GET JCL FROM USER.
*
*********************************************************************
D3$BLOOP DS    0H
         L     R14,ETCDMAX         GET MAX
         BCTR  R14,0               LESS ONE
         C     R14,ETCDCNT         CHECK AGAINST MAXIMUM
         BL    D3$BALL             FULL - QUIT
         BH    D3$BNLST            EMPTY - CONTINUE
         LA    R0,L'LASTCARD       LAST - GET LENGTH OF MESSAGE
         L     R1,=A(LASTCARD)     POINT TO MESSAGE
         TPUT  (1),(0),R           ISSUE MESSAGE
         B     D3$BTGET            AND READ RESPONSE
D3$BNLST DS    0H
         LA    R0,L'NEXTCARD       YES - GET LENGTH OF MESSAGE
         L     R1,=A(NEXTCARD)     POINT TO MESSAGE
         TPUT  (1),(0),R           ISSUE MESSAGE
D3$BTGET DS    0H
         LR    R1,R5               GET ADDRESS FOR TGET
         ICM   R1,B'1000',=X'80'   SET OPTIONS
         MVC   0(80,R5),=CL80' '   BLANK INPUT AREA
         LA    R0,80               SET LENGTH
         TGET  (1),(0),R           READ RESPONSE
         LTR   R15,R15             WAS RETURN CODE ZERO
         BZ    D3$BTGOK            YES - CONTINUE
         BAL   R14,D3$BTGER        NO - GO TO ERROR ROUTINE
D3$BTGOK DS    0H
         OC    0(80,R5),=CL80' '   FORCE TO UPPERCASE
         CLC   =C'END',0(R5)       WAS THIS 'END'
         BE    D3$BALL             YES - QUIT
         CLI   0(R5),C' '          NO - WAS THIS BLANK LINE
         BE    D3$BLOOP            YES - ASK AGAIN
         BAL   R14,D3$BJ400        GO PAST LAST CARD
         B     D3$BLOOP            AND LOOP
         EJECT
***********************************************************************
*                                                                     *
*        SET THE PARAMETER ENTRY FOR OUR NEW JCL LIST                 *
*                                                                     *
***********************************************************************
D3$BALL  DS    0H
         PARM  D3JCL
         L     R14,ETAJCL          GET ADDR OF JCL
         ST    R14,8(,R15)         SAVE IT
         L     R14,ETCDCNT         GET COUNT
         MH    R14,=H'80'          GET LENGTH
         ST    R14,4(,R15)         SAVE LENGTH
         EJECT
***********************************************************************
*                                                                     *
*        DUMP OUT OUR NEW JCL                                         *
*                                                                     *
***********************************************************************
         TM    ETBITS3,ET3DEBUG    DEBUG IN PROGRESS??
         BZ    D3$BJ92             NOPE, SKIP CODE
         PARM  D3JCL
         LR    R2,R1               SAVE ADDRESS
         L     R3,4(,R15)          GET LENGTH
         WTO   'IKJEFLD3: NEW JCL',ROUTCDE=(2)
D3$BJ90  MVC   D3@MSGAR+4(80),0(R2) GET CARD IMAGE
         MVC   D3@MSGAR(4),=AL2(84,X'8000')
         MVC   D3@MSGAR+84(4),=AL2(0,X'4000')
         WTO   MF=(E,D3@MSGAR)
         LA    R2,80(,R2)          UPDATE POINTER
         SH    R3,=H'80'           DECREMENT LENGTH
         BP    D3$BJ90             KEEP GOING IF MORE CARDS
D3$BJ92  DS    0H
         EJECT
***********************************************************************
*                                                                     *
*        RETURN TO THE MAINLINE                                       *
*                                                                     *
***********************************************************************
         SR    R15,R15             SET RETURN CODE
D3$BJXIT DS    0H
         SUBEXIT ,
         EJECT
*********************************************************************
*
*       IF RETURN CODE DID NOT INDICATE ATTENTION INTERRUPT, ISSUE
*       MESSAGE TO USER AND DENY LOGON.
*
*********************************************************************
D3$BTGER DS    0H                  NON-ZERO RETURN CODE FROM TGET
         LA    R1,8                GET 8 IN R1 FOR COMPARISON
         CR    R1,R15              WAS THIS AN ATTENTION INTERRUPT
         BNE   D3$BTGNA            NO - GO ISSUE MESSAGE
         TM    ETBITS1,ET1ATTN     YES - DID I GET ANY INPUT
         BZR   R14                 NO - RETURN AS IF NULL INPUT
         B     D3$BJXIT            YES - LET MAINLINE HANDLE INPUT
D3$BTGNA DS    0H                  NOT AN ATTENTION INTERRUPT
         LR    R2,R15              PROTECT RETURN CODE
         L     R1,=A(TGETMSG)      POINT AT MSG
         MVC   D3@MSGAR(L'TGETMSG),0(R1) COPY MESSAGE
         CVD   R2,D3@WORK1         CONVERT TO DECIMAL
         OI    D3@WORK1+7,X'0F'    FIX SIGN
         UNPK  D3@WORK1(5),D3@WORK1+5(3) UNPACK
         MVC   D3@MSGAR+23(4),D3@WORK1+1 MOVE INTO MESSAGE
         LA    R0,L'TGETMSG        GET LENGTH OF MESSAGE
         LA    R1,D3@MSGAR         POINT TO MESSAGE
         TPUT  (1),(0),R           ISSUE MESSAGE
         LR    R15,R2              RESTORE RETURN CODE
         OI    ETBITS1,ET1DENY     DENY LOGON
         B     D3$BJXIT            EXIT
         EJECT
***********************************************************************
*                                                                     *
*        SUBROUTINE TO MOVE VARIABLE DATA TO OUTPUT LINE              *
*              R1 => LENGTH(2), DATA TO MOVE                          *
*              R5 => NEXT OPEN AREA IN LINE                           *
*              R14 = RETURN ADDRESS                                   *
*                                                                     *
***********************************************************************
D3$BJ200 DS    0H
         LH    R15,0(R1)           GET LENGTH
         LTR   R15,R15             ANY LENGTH
         BZR   R14                 OUT IF NO DATA
         BCTR  R15,0               GET MACHINE LENGTH
         EX    R15,D3$BJ299        MOVE IN DATA
         LA    R5,1(R15,R5)        UPDATE POINTER
         BR    R14                 ALL DONE
D3$BJ299 MVC   0(0,R5),2(R1)       MOVE IN DATA
         SPACE 5
***********************************************************************
*                                                                     *
*        SUBROUTINE TO ADD ENTRY TO CURRENT CARD                      *
*              R2 => LENGTH(2), DATA OF CONSTANT                      *
*              R3 => LENGTH(2), DATA OF VARIABLE                      *
*              R4 => LENGTH(2), DATA OF CONSTANT; OR 0                *
*              R5 => NEXT OPEN AREA IN CARD                           *
*              R6 => LAST USABLE BYTE IN CARD                         *
*              R14 = RETURN ADDRESS                                   *
*                                                                     *
***********************************************************************
D3$BJ300 DS    0H
         OC    0(2,R3),0(R3)       ANY LENGTH TO VARIABLE
         BZR   R14                 IF NOT THEN EXIT
         ST    R14,D3@BJSV         SAVE RETURN ADDRESS
         LH    R1,0(,R2)           GET LENGTH OF CONSTANT 1
         AH    R1,0(,R3)           PLUS LENGTH OF VARIABLE
         LTR   R4,R4               ANY CONSTANT 2
         BZ    *+8                 IF NOT THEN SKIP
         AH    R1,0(,R4)           PLUS LENGTH OF CONSTANT 2
         AR    R1,R5               ADD IN CURRENT ADDRESS
         CR    R1,R6               SEE IF EXCEEDS CARD
         BNH   D3$BJ330            NO, EVERYTHING OK ON CARD
         MVI   0(R5),C','          INDICATE CONTINUATION
*  DUMP CARD
         BAL   R14,D3$BJ400
         MVC   0(3,R5),=C'// '     SET CONTINUATION START
         LA    R5,3(,R5)           UPDATE POINTER
         LR    R7,R5               SAVE POINTER
         LR    R1,R2               POINT AT CONSTANT 1
         BAL   R14,D3$BJ200        MOVE IT IN
         MVI   0(R7),C' '          CLEAR COMMA FROM CONSTANT 1
         B     D3$BJ335
D3$BJ330 DS    0H
         LR    R1,R2               POINT AT CONSTANT 1
         BAL   R14,D3$BJ200        MOVE IT IN
D3$BJ335 DS    0H
         LR    R1,R3               POINT AT VARIABLE
         BAL   R14,D3$BJ200        MOVE IT IN
         LTR   R1,R4               POINT AT CONSTANT 2
         BZ    D3$BJ338            IF NO CONSTANT 2, SKIP MOVE
         BAL   R14,D3$BJ200        MOVE IT IN
D3$BJ338 DS    0H
         L     R14,D3@BJSV
         BR    R14
         SPACE 3
*
**       UPDATE POINTERS TO NEXT CARD
*
D3$BJ400 DS    0H                  ROUTINE TO DUMP OUT CARD
         L     R5,ETCDCNT          GET CARD COUNT
         LA    R5,1(R5)            ADD IN ANOTHER
         ST    R5,ETCDCNT
         C     R5,ETCDMAX          CHECK AGAINST MAX
         BH    D3$BJ410            KILL IF TOO BIG
         MH    R5,=H'80'           GET LENGTH
         A     R5,ETAJCL           PLUS START
         MVC   0(80,R5),=CL80' '   BLANK OUT CARD
         LA    R6,70(,R5)          SET END ADDRESS
         BR    R14                 DONE
D3$BJ410 DS    0H                  ISSUE ERROR MESSAGE AND RETURN
         LA    R0,L'MANYMSG        GET LENGTH OF MESSAGE
         L     R1,=A(MANYMSG)      POINT TO MESSAGE
         TPUT  (1),(0),R           ISSUE MESSAGE
         B     D3$BALL             ALL DONE
         TITLE 'IKJEFLD3 - DUMP OUT SAVED INFORMATION'
***********************************************************************
*                                                                     *
* ROUTINE NAME -                                                      *
*    D3$DUMP                                                          *
*                                                                     *
* FUNCTION -                                                          *
*    DUMP OUT THE SAVED INFORMATION FOR CHECKING                      *
*                                                                     *
* OPERATION -                                                         *
*                                                                     *
*                                                                     *
* ENTRY POINTS -                                                      *
*    D3$DUMP                                                          *
*                                                                     *
* EXTERNAL REFERENCES -                                               *
*    NONE                                                             *
*                                                                     *
* INPUT -                                                             *
*    NONE                                                             *
*                                                                     *
* OUTPUT -                                                            *
*    NONE                                                             *
*                                                                     *
* MESSAGES -                                                          *
*    NONE                                                             *
*                                                                     *
* COMMENTS -                                                          *
*    NONE                                                             *
*                                                                     *
***********************************************************************
D3$DUMP  DS    0H
         SUBENTRY
         EJECT
***********************************************************************
*                                                                     *
*       SEE IF NECESSARY TO PROCESS.                                  *
*                                                                     *
***********************************************************************
         TM    ETBITS3,ET3DEBUG+ET3LSTIN ANY REQURIEMENT
         BZ    D3$DEXIT            NOPE
         EJECT
***********************************************************************
*                                                                     *
*       DUMP OUT EACH ITEM IN TURN.                                   *
*                                                                     *
***********************************************************************
*  DUMP OUT USERID
         LA    R3,ETUSERID
         LA    R1,=CL9'USER    ='
         BAL   R14,D3$DWTO
*  DUMP OUT TERMINAL ID
         LA    R3,ETTERMID
         LA    R1,=CL9'TERMINAL='
         BAL   R14,D3$DWTO
*  DUMP OUT PROCEDURE NAME
         LA    R3,ETPROC
         LA    R1,=CL9'PROC    ='
         BAL   R14,D3$DWTO
*  DUMP OUT ACCOUNT NUMBER
         LA    R3,ETACCNT
         LA    R1,=CL9'ACCOUNT ='
         BAL   R14,D3$DWTO
*  DUMP OUT REGION SIZE
         LA    R3,ETSIZE
         LA    R1,=CL9'REG SIZE='
         BAL   R14,D3$DWTO
*  DUMP OUT PERFORMANCE GROUP
         LA    R3,ETPERFG
         LA    R1,=CL9'PERF GRP='
         BAL   R14,D3$DWTO
**  PARSE OR PANEL INPUT
*  DUMP OUT MESSAGE CLASS VALUE
         LA    R3,ETMSGC           POINT AT DATA
         LA    R1,=CL9'MSGCLASS='
         BAL   R14,D3$DWTO
*  DUMP OUT MESSAGE LEVEL VALUE
         LA    R3,ETMSGL           POINT AT DATA
         LA    R1,=CL9'MSGLEVEL='
         BAL   R14,D3$DWTO
*  DUMP OUT COPIES VALUE
         LA    R3,ETCOPY           POINT AT DATA
         LA    R1,=CL9'COPIES  ='
         BAL   R14,D3$DWTO
*  DUMP OUT LINE COUNT VALUE
         LA    R3,ETLINCT          POINT AT DATA
         LA    R1,=CL9'LINECT  ='
         BAL   R14,D3$DWTO
**  FROM PARSE, PANEL, OR INFO BLOCK
*  DUMP OUT ADDRESS INFO
         LA    R3,ETADDRS          POINT AT DATA
         LA    R1,=CL9'ADDRESS ='
         BAL   R14,D3$DWTO
*  DUMP OUT PROGRAMMER NAME INFO
         LA    R3,ETPRGNM          POINT AT DATA
         LA    R1,=CL9'PROG NAM='
         BAL   R14,D3$DWTO
*  DUMP OUT CPU TIME
         LA    R3,ETCPTIM          POINT AT DATA
         LA    R1,=CL9'CPU TIME='
         BAL   R14,D3$DWTO
*  DUMP OUT ROOM INFO
         LA    R3,ETROOM           POINT AT DATA
         LA    R1,=CL9'ROOM    ='
         BAL   R14,D3$DWTO
*  DUMP OUT ADDRESS INFO
         LA    R3,ETFORM           POINT AT DATA
         LA    R1,=CL9'FORMS   ='
         BAL   R14,D3$DWTO
         EJECT
***********************************************************************
*                                                                     *
*       RETURNS TO THE MAINLINE.                                      *
*                                                                     *
***********************************************************************
D3$DEXIT DS    0H
         SR    R15,R15             CLEAR RETURN CODE
         SUBEXIT
***********************************************************************
*                                                                     *
*       SUBROUTINE TO FORMAT AND WRITE A LINE                         *
*                                                                     *
**             R14 = RETURN                                           *
**             R3 => LENGTH(2),DATA                                   *
**             R1 => LABEL                                            *
***********************************************************************
D3$DWTO  DS    0H
         LR    R7,R14              SAVE RETURN ADDRESS
         LH    R2,0(,R3)           GET LENGTH
         LA    R3,2(,R3)           GET DATA ADDRESS
         MVC   D3@MSGAR(4),=AL2(0,X'8000') SET HEADER
         MVI   D3@MSGAR+4,C' '     BLANK OUT AREA
         MVC   D3@MSGAR+5(94),D3@MSGAR+4
         MVC   D3@MSGAR+4(9),=CL9'IKJEFLD3:' MOVE IN ID
         MVC   D3@MSGAR+14(9),0(R1)  MOVE IN LABEL
         LTR   R2,R2               ANY LENGTH
         BP    D3$DW10             YES, KEEP GOING
         MVC   D3@MSGAR+23(7),=C'* N/A *' SET FLAG
         LA    R2,23+7             SET LENGTH
         B     D3$DW20             GO AND OUTPUT MESSAGE
D3$DW10  DS    0H
         BCTR  R2,0                GET MACHINE LENGTH
         EX    R2,D3$DW99          MOVE IN DATA
         LA    R2,23+1(R2)         GET REAL LENGTH
D3$DW20  DS    0H
         STH   R2,D3@MSGAR         SET IN HEADER
         LA    R2,D3@MSGAR(R2)     POINT PAST STRING
         MVC   0(4,R2),=AL2(0,X'4000') SET ROUTCDE
         TM    ETBITS3,ET3DEBUG    DEBUG IN PROGRESS??
         BZ    D3$DW30             NOPE, SKIP CODE
         WTO   MF=(E,D3@MSGAR)
D3$DW30  DS    0H
         TM    ETBITS3,ET3LSTIN    LISTINFO REQUESTED??
         BZ    D3$DW40             NOPE, SKIP CODE
         LH    R0,D3@MSGAR         GET LENGTH
         SH    R0,=H'4'            LESS HEADER
         LA    R1,D3@MSGAR+4       AND GET ADDRESS
         TPUT  (1),(0),R           WRITE TO USER
D3$DW40  DS    0H
         BR    R7
D3$DW99  MVC   D3@MSGAR+23(0),0(R3) ** EXECUTED **
         TITLE 'IKJEFLD3 - UPDATE UADS BLOCK AND REWRITE DATA'
*********************************************************************
*
* ROUTINE NAME -
*    D3$UPDAT
*
* FUNCTION -
*    UPDATE INFO BLOCK.
*
* OPERATION -
*    2) UPDATE LASTON.
*    4) REWRITE INFO BLOCK.
*    5) RETURN TO THE MAINLINE.
*
* ENTRY POINTS -
*    D3$UPDAT
*
* EXTERNAL REFERENCES -
*    FINDINFO
*
* INPUT -
*    NONE
*
* OUTPUT -
*    REGISTER 15 CONTAINS THE RETURN CODE FOR THE MAINLINE.  THIS
*    WILL BE AS FOLLOWS -
*       ×------×------------------------×--------------------------×
*       ×RETURN×                        ×                          ×
*       ×CODE  ×REASON                  ×ACTION                    ×
*       ×------×------------------------×--------------------------×
*       ×   0  ×NO ERRORS ENCOUNTERED.  ×CONTINUE WITH LOGON.      ×
*       ×------×------------------------×--------------------------×
*
* MESSAGES -
*    NONE
*
*********************************************************************
         EJECT
D3$UPDAT DS    0H
         SUBENTRY ,
         EJECT
*********************************************************************
*
*       MERGE DATA FROM LOGON COMMAND AND PANEL BACK TO MEMBER
*
*********************************************************************
         SPACE 2
         INFO  MADDRESS            MERGE ADDRESS
         LA    R2,ETADDRS
         BAL   R14,D3$UMV90
         SPACE 2
         INFO  MNAME               MERGE USER NAME
         LA    R2,ETNAME
         BAL   R14,D3$UMV90
         SPACE 2
         INFO  MPHONE              MERGE PHONE NUMBER
         LA    R2,ETPHONE
         BAL   R14,D3$UMV90
         SPACE 2
         INFO  MPROGNAM            MERGE PROGRAMMER NAME
         LA    R2,ETPRGNM
         BAL   R14,D3$UMV90
         SPACE 2
         INFO  MFORMS              MERGE FORM CODE
         LA    R2,ETFORM
         BAL   R14,D3$UMV90
         SPACE 2
         INFO  MROOM               MERGE ROOM NUMBER
         LA    R2,ETROOM
         BAL   R14,D3$UMV90
         SPACE 2
         INFO  MLINECT             MERGE LINE COUNT
         LA    R2,ETLINCT
         BAL   R14,D3$UMV90
         EJECT
*********************************************************************
*
*       UPDATE LASTON.
*
*********************************************************************
         INFO  MLASTON             FIND LASTON
         MVC   8(7,R1),=X'4021204B202020'  EDIT MASK FOR DATE
         ED    8(7,R1),ETDATE+1    EDIT IN TODAY'S DATE
         MVC   16(9,R1),=X'4021207A20207A2020' EDIT MASK FOR TIME
         ED    16(9,R1),ETTIME     EDIT IN TODAY'S TIME
         MVC   26(8,R1),ETTERMID+2 COPY TERMINAL TO INFO BLOCK
         EJECT
*********************************************************************
*
*       REWRITE INFO BLOCK.
*
*********************************************************************
         POINT ETUADS,ETTTRINF     POINT AT INFO BLOCK
         L     R2,ETAASKB          USE OTHER BUFFER
         READ  ETDECB,SF,ETUADS,(R2),'S',MF=E   READ FOR UPDATE
         CHECK ETDECB              WAIT ON I/O
         L     R2,ETAINFO          GET ADDRESS OF INFO BLOCK BUFFER
         L     R3,ETLINFO          GET LENGTH OF INFO BLOCK
         WRITE ETDECB,SF,ETUADS,(R2),(R3),MF=E REWRITE INFO BLOCK
         CHECK ETDECB              WAIT ON I/O
         EJECT
*********************************************************************
*
*       RETURN TO THE MAINLINE.
*
*********************************************************************
D3$URTRN DS    0H
         SLR   R15,R15             SET RETURN CODE
D3$UEXIT DS    0H
         SUBEXIT ,
         EJECT
*********************************************************************
*
*       RETURN TO THE MAINLINE.
*              R1 => INFO BLOCK ENTRY
*              R2 => LENGTH(2), DATA TO MERGE
*              R14 = RETURN ADDRESS
*
*********************************************************************
D3$UMV90 DS    0H
         ICM   R3,B'0011',0(R2)    GET LENGTH
         BZR   R14                 OUT IF NO DATA
         BCTR  R3,0                GET MACHINE LENGTH
         EX    R3,D3$UMV99         SEE IF DIFFERENT
         BER   R14                 IF NOT THEN EXIT
         EX    R3,D3$UMV98         MOVE IN NEW
         BR    R14                 ALL DONE
D3$UMV98 MVC   9(0,R1),2(R2)       COMPARE FIELDS
D3$UMV99 CLC   9(0,R1),2(R2)       COMPARE FIELDS
         TITLE 'IKJEFLD3 - JCL CONSTANTS'
D3$JJ1   DC    AL2(2),C'//'        ALL JCL STARTS WITH //
D3$JJ2   DC    AL2(6),C' JOB '''
D3$JJ3   DC    AL2(3),C''','''
D3$JJ4   DC    AL2(1),C''''
D3$JJ5   DC    AL2(10),C',MSGCLASS='
D3$JJ6   DC    AL2(11),C',MSGLEVEL=('
D3$JJ7   DC    AL2(1),C')'
D3$JO1   DC    AL2(29),C' OUTPUT DEFAULT=YES,JESDS=ALL'
D3$JO2   DC    AL2(11),C',ADDRESS=('''
D3$JO3   DC    AL2(2),C''')'
D3$JO4   DC    AL2(7),C',ROOM='''
D3$JO5   DC    AL2(1),C''''
D3$JO6   DC    AL2(8),C',COPIES='
D3$JO7   DC    AL2(8),C',LINECT='
D3$JO8   DC    AL2(6),C',FORM='
D3$JE1   DC    AL2(6),C' EXEC '
D3$JE2   DC    AL2(6),C',TERM='
D3$JE3   DC    AL2(6),C',TIME='
D3$JE4   DC    AL2(8),C',REGION='
D3$JE5   DC    AL2(1),C'K'
D3$JE6   DC    AL2(9),C',PERFORM='
         TITLE 'IKJEFLD3 - TEMPORARY ENTRY POINTS '
         PUSH  USING
         DROP  R12
         USING *,R15
D3$RETRY DS    0H
         L     R12,=A(IKJEFLD3)    GET REAL BASE
         POP   USING
         OI    ETBITS1,ET1DENY     MARK TO DENY
         LA    R15,16              SET ABEND RETURN CODE
         B     D3$EXIT             ALL DONE
D3$      DS    0H
         SR    R15,R15
         BR    R14
         LTORG ,
         DROP  ,
         EJECT
DSAD3    DSECT
D3@SAVE  DS    (18*5)F
D3@WORK1 DS    D                   GENERAL WORK AREA
D3@BJSV  DS    F                   RETURN ADDRESS SAVE AREA
         SPACE 5
*        THE FOLLOWING STORAGE IS FOR ESTAE AND ESTAE PROCESSING
D3@ESTAE ESTAE ,MF=L               ESTAE PARAMETER LIST
         SPACE 5
* THE FOLLOWING STORAGE IS FOR ENQ
         DS    0F                  ALIGNMENT
D3@ENQLT DS    XL(LENQLIST)        ENQ LIST
D3@RNAME DS    CL52                RNAME FOR SPF TYPE ENQ
         SPACE 5
* THE FOLLOWING STORAGE IS FOR BLDL
D3@BLDL  DS    0F                  BLDL LIST
D3@BLFF  DS    H                   FF   NUMBER OF ENTRIES
D3@BLLL  DS    H                   LL   LENGTH OF EACH ENTRY
D3@BLNM  DS    CL8                 NAME
D3@BLTTR DS    XL4                 TTRC
D3@BLNSZ EQU   *-D3@BLNM           SIZE OF ENTRY
         DS    7XL(D3@BLNSZ)       EXTRA ENTRIES
         SPACE 5
* THE FOLLOWING STORAGE IS THE MESSAGE AREA
D3@MSGAR DS    CL100               MESSAGE AREA
DSAD3L   EQU   *-DSAD3
         TITLE 'IKJEFLD3 - STANDARD EXIT PARAMETER LIST'
D3CMDBFR EQU   1                   COMMAND BUFFER
D3NEWCMD EQU   2                   NEW COMMAND BUFFER
D3UPT    EQU   3                   UPT
D3ECT    EQU   4                   ECT
D3PSCB   EQU   5                   PSCB
D3EXTOEX EQU   6                   EXIT TO EXIT COMM WORD
D3RCODE  EQU   7                   EXIT REASON CODE
*              8                   RESERVED
*              9                   RESERVED
D3SWITCH EQU   10                  CONTROL SWITCHES
D3JCL    EQU   11                  JCL AREA
         TITLE 'GENERAL USE SUBROUTINES FOR ALL EXITS'
GPSUBS   CSECT
***********************************************************************
*                                                                     *
* ROUTINE NAME -                                                      *
*        GPENTRY                                                      *
*                                                                     *
* FUNCTION -                                                          *
*        GET PARAMETER LIST ENTRY                                     *
*                                                                     *
* OPERATION -                                                         *
*        USED PASSED PARAMETER NUMBER TO GET POINTER TO ITEM          *
*                                                                     *
* ENTRY POINTS -                                                      *
*        GPENTRY                                                      *
*                                                                     *
* EXTERNAL REFERENCES -                                               *
*    NONE                                                             *
*                                                                     *
* INPUT -                                                             *
*        R1  ==  ENTRY NUMBER TO RETURN                               *
*        R14 ==  RETURN ADDRESS                                       *
*        R15 ==  ENTRY POINT ADDRESS                                  *
*                                                                     *
* OUTPUT -                                                            *
*        R1  ==  ADDRESS OF DATA                                      *
*        R15 ==  ADDRESS OF LIST ENTRY (FOR MODIFICATIONS)            *
*                                                                     *
* MESSAGES -                                                          *
*    NONE                                                             *
*                                                                     *
* COMMENTS -                                                          *
*    NONE                                                             *
*                                                                     *
***********************************************************************
GPENTRY  DS    0H
         USING *,R15               SETUP ADDRESSABLILITY
         BCTR  R1,0                MINUS 1
         SLL   R1,2                TIMES 4
         L     R1,0(R1,R10)        PLUS BASE
         CLC   0(4,R1),=F'1'       IS KEY TYPE '1'
         BH    GPE$10
         LR    R15,R1              SET TO PROPER REGISTER
         LA    R1,8(R15)           POINT AT DATA
         BR    R14
GPE$10   CLC   0(4,R1),=F'2'       IS KEY TYPE '2'
         BNE   GPE$20
         LR    R15,R1              SET TO PROPER REGISTER
         L     R1,8(,R15)          GET POINTER TO DATA
         BR    R14
GPE$20   CLC   0(4,R1),=F'4'       IS KEY TYPE '4' (LOCKED 1??)
         BNE   GPE$30
         LR    R15,R1              SET TO PROPER REGISTER
         LA    R1,8(,R15)          GET POINTER TO DATA
         BR    R14
GPE$30   DC    H'0'
         TITLE 'FIND INFO SUBROUTINE'
*********************************************************************
*
* ROUTINE NAME -
*    FINDINFO
*
* FUNCTION -
*    FIND INFO ENTRY.
*
* OPERATION -
*
* ENTRY POINTS -
*    FINDINFO
*
* EXTERNAL REFERENCES -
*    NONE
*
* INPUT -
*    REGISTER 1 POINTS TO THE INFO KEY.
*
* OUTPUT -
*    REGISTER 1 POINTS TO EITHER THE REQUESTED KEY OR A BLANK ENTRY
*    WHICH CAN BE USED TO CREATE THE KEY.
*
* MESSAGES -
*    NONE
*
* COMMENTS -
*    THIS SUBROUTINE ASSUMES THAT THERE WILL ALWAYS BE AT LEAST ONE
*    BLANK SLOT DEMARKING THE END OF THE INFO BLOCK AND THAT THE
*    APPEARENCE OF THE FIRST EMPTY SLOT IS THE END OF THE VALID
*    ENTRIES.  (MAY CHANGE ALL THIS LATER)
*
*********************************************************************
FINDINFO DS    0H
         USING *,R15
         USING EXTEX,R11
         ST    R2,12(,R13)         RESTORE REGSITER
         L     R2,ETAINFO          GET ADDRESS OF INFO BLOCK
FINFLOOP DS    0H
         CLI   0(R2),C' '          IS THIS THE END
         BE    FINFBLNK            YES - LET HIM USE THIS SLOT
         CLC   0(8,R1),0(R2)       NO - IS THIS THIS THE REQ'D KEY
         BE    FINFEXIT            YES - GET OUT
         LA    R2,80(,R2)          NO - POINT TO NEXT SLOT
         B     FINFLOOP            AND LOOP
FINFBLNK DS    0H
         MVC   0(80,R2),=CL80' '   CLEAR OUT SLOT
         MVC   0(8,R2),0(R1)       INSERT KEY
FINFEXIT DS    0H
         LR    R1,R2               POINT TO SLOT
         L     R2,12(,R13)         RESTORE REGSITER
         BR    R14                 RETURN TO CALLER
         DROP  ,
         TITLE 'TABLE OF USERIDS TO NEVER DENY'
USIDTABL DS    0C                  TABLE OF USERIDS TO NEVER DENY
         DC    X'FF'               END OF TABLE
         TITLE 'TABLE OF DIVISIONS AND COUNTS'
DIVTABLE DS    0C                  TABLE OF DIVISIONS AND COUNTS
         DC    C'R',AL1(25)        RESEARCH - 25
         DC    X'FF'               END OF TABLE
         TITLE 'MODEL INFO BLOCK'
LINFMODL DC    0F'0',C' ',AL3(LENIMODL) FILL CHARACTER AND LENGTH
INFOMODL DS    0C                  START OF MODEL FOR INFO BLOCK
MUSERID  DC    CL80'USERID  '      USERID
MNAME    DC    CL80'NAME    '      USER'S NAME
MPHONE   DC    CL80'PHONE   '      BUSINESS PHONE
MADDRESS DC    CL80'ADDRESS '      INTERNAL MAILING ADDRESS
MLASTON  DC    CL80'LASTON  '      YY.DDD TERMINAL LAST LOGGED ON
MCHGPSWD DC    CL80'CHGPSWD '      YY.DDD PASSWORD LAST CHANGED
MCPUTIME DC    CL80'CPUTIME '      MAXIMUM CPU TIME
MDEFTIME DC    CL80'DEFTIME '      DEFAULT CPU TIME
MPROGNAM DC    CL80'PROGNAME'      PROGRAMMER'S NAME FOR JOBCARD
MFORMS   DC    CL80'FORMS   '      FORMS FOR /*JOBPARM
MROOM    DC    CL80'ROOM    '      ROOM FOR /*JOBPARM
MLINECT  DC    CL80'LINECT  '      LINECT FOR /*JOBPARM
LENIMODL EQU   *-INFOMODL          CALCULATE LENGTH OF INFO MODEL
         SPACE 3
TRTABLE  DC    C'0123456789ABCDEF' TRANSLATE HEX TO EBCDIC
         LTORG ,
         DROP  ,
         TITLE 'GENERAL PURPOSE ESTAE ROUTINE'
***********************************************************************
*                                                                     *
* ROUTINE NAME -                                                      *
*    GP$ESTAE                                                         *
*                                                                     *
* FUNCTION -                                                          *
*    ENTERED AFTER AN ABEND TO PASS CONTROL TO A RETRY ROUTINE.       *
*                                                                     *
* OPERATION -                                                         *
*    1) CHECKS TO SEE IF SDWA WAS OBTAINED.  IF NOT, POINT TO RETRY   *
*       ROUTINE, SAVE ABEND CODE AND RETURN TO ABEND.  IF SDWA WAS    *
*       OBTAINED, SAVE ABEND CODE AND ISSUE SETRP MACRO TO RETURN TO  *
*       ABEND SPECIFING RETRY ROUTINE.  IN EITHER CASE, DO NOT RETRY
*       IF THIS IS A RECURSIVE ABEND.
*    2) IF ABEND IS MOTHER TASK DETACH THEN INDICATE LOGON FAILED
*       AND TERMINATE WITHOUT RETRY
*    3) ISSUES MESSAGE TO TSO USER AND OPERATOR INDICATING TYPE OF
*       ABEND AND DENIES LOGON.  IF ABEND U0522, SKIP MESSAGES AND
*       DUMP.
*    4) IF APF AUTHORIZED, TAKE SDUMP.
*                                                                     *
* ENTRY POINTS -                                                      *
*    GP$ESTAE                                                         *
*                                                                     *
* EXTERNAL REFERENCES -                                               *
*    NONE                                                             *
*                                                                     *
* INPUT -                                                             *
*    IF NO SDWA WAS OBTAINED REGISTER 1 CONTAINS THE ABEND CODE.      *
*    IF AN SDWA WAS OBTAINED REGISTER 1 CONTAINS THE ADDRESS OF THE   *
*    SDWA.                                                            *
*    ESTAE PARM => +0  RETRY ADDRESS                                  *
*                  +4  PHASE DSA (ORIG R9)                            *
*                  +8  EXIT TO EXIT AREA (ORIG R11)                   *
*                  +12 ADDRESS OF ENTRY PARMS OF ROUTINE              *
*                                                                     *
* OUTPUT -                                                            *
*    ADDDRESS OF RETRY ROUTINE.                                       *
*                                                                     *
* MESSAGES -                                                          *
*    'LOGON USER EXIT ABEND TNNNN'
*    'USER-ID ON TERMINAL LOGON USER EXIT ABEND TNNNN - ASID X'NN''
*                                                                     *
***********************************************************************
         EJECT
GP$ESTAE DS    0H
         USING GP$ESTAE,R12        ESTABLISH EXIT ADDRESSABILITY
         USING EXTEX,R11           ESTABLISH DYNAMIC ADDRESSABILITY
         LR    R12,R15             LOAD BASE
         EJECT
***********************************************************************
*                                                                     *
*       CHECKS TO SEE IF SDWA WAS OBTAINED.  IF NOT, POINT TO RETRY   *
*       ROUTINE, SAVE ABEND CODE AND RETURN TO ABEND.  IF SDWA WAS    *
*       OBTAINED, SAVE ABEND CODE AND ISSUE SETRP MACRO TO RETURN TO  *
*       ABEND SPECIFING RETRY ROUTINE.  IN EITHER CASE, DO NOT RETRY
*       IF THIS IS A RECURSIVE ABEND.
*                                                                     *
***********************************************************************
         LA    R15,12              GET 12 IN R15
         CR    R0,R15              WAS SDWA OBTAINED
         BNE   HAVESDWA            YES - BRANCH
         L     R11,8(,R2)          GET ADDRESS OF EXTOEX AREA
         L     R0,0(,R2)           POINT TO RETRY ROUTINE
         ST    R1,ETABNDCD         SAVE ABEND CODE
         XC    ETABNDPW,ETABNDPW   INDICATE PSW NOT AVAILABLE
         LA    R15,4               INDICATE RETRY ROUTINE SUPPLIED
         TM    ETBITS2,ET2ABEND    ABENDED BEFORE
         BO    NOSDWA2             YES - ABEND RECURSION
         OI    ETBITS2,ET2ABEND    NO - SET ABEND INDICATOR
         BR    R14                 RETURN TO CALLER
NOSDWA2  DS    0H
         SLR   R15,R15             INDICATE NO RETRY
         BR    R14                 RETURN TO CALLER
         SPACE 3
HAVESDWA DS    0H                  SDWA OBTAINED
         STM   R14,R12,12(13)      SAVE ENTRY REGISTERS
         L     R2,0(,R1)           GET ADDRESS OF PARAM LIST FROM SDWA
         L     R11,8(,R2)          GET ADDRESS OF EXTOEX AREA
         MVC   ETABNDCD,4(R1)      SAVE ABEND CODE
         MVC   ETABNDPW,8(R1)      SAVE PSW
         TM    ETBITS2,ET2ABEND    ABENDED BEFORE
         BO    HAVSDWA2            YES - ABEND RECURSION
         OI    ETBITS2,ET2ABEND    NO - SET ABEND INDICATOR
         LR    R3,R1               SAVE SDWA ADDR
         CLC   =X'5220',ETABNDCD+1 WAS THIS U0522
         BE    NOSDUMP1            YES - SKIP MESSAGES AND SDUMP
         EJECT
********************************************************************
*
*       ISSUES MESSAGE TO TSO USER AND OPERATOR INDICATING TYPE OF
*       ABEND AND DENIES LOGON.  IF ABEND U0522, SKIP MESSAGES AND
*       SDUMP.
*
********************************************************************
         MVC   ETMSGAR,ABNDMSG     NO - COPY ABEND MESSAGE
         L     R15,ETABNDCD        GET COMPLETION CODE
         SLL   R15,8               SHIFT OUT TCBFLGS1
         SRL   R15,20              AND SHIFT OUT USER ABEND CODE
         LTR   R15,R15             WAS IT SYSTEM ABEND CODE
         BZ    USERABND            NO - MUST BE USER ABEND
         MVI   ETMSGAR+22,C'S'     YES - INDICATE SYSTEM ABEND
         STH   R15,ETWORK1         PUT COMPLETION CODE IN ETWORK1
         UNPK  ETWORK1+3(5),ETWORK1(3) UNPACK
         L     R1,=A(TRTABLE-240)
         TR    ETWORK1+3(4),0(R1)
         MVC   ETMSGAR+23(3),ETWORK1+4 MOVE TO MESSAGE
         B     ABNDTPUT            GO TELL OPERATOR
USERABND DS    0H
         MVI   ETMSGAR+22,C'U'     INDICATE USER ABEND
         L     R15,ETABNDCD        GET COMPLETION CODE
         SLL   R15,20              SHIFT OUT TCBFLGS1
         SRL   R15,20              SHIFT BACK
         CVD   R15,ETWORK1         CONVERT TO DECIMAL
         OI    ETWORK1+7,X'0F'     FIX SIGN
         UNPK  ETWORK1(5),ETWORK1+5(3) UNPACK
         MVC   ETMSGAR+23(4),ETWORK1+1 MOVE TO ABEND MESSAGE
ABNDTPUT DS    0H
         LA    R0,L'ABNDMSG        GET LENGTH FOR TPUT
         LA    R1,ETMSGAR          POINT TO ABEND MESSAGE
         TPUT  (1),(0),R           TELL USER
         MVC   ETWORK1(5),ETMSGAR+22 SAVE ABEND CODE
         MVC   ETMSGAR,ABNDWTO     COPY WTO TEXT TO DYNAMIC AREA
         MVC   ETMSGAR+46(5),ETWORK1 COPY ABEND CODE
         CLI   ETUSERID+1,0        HAS USERID BEEN RETRIEVED
         BE    ABENDWTO            NO - LEAVE TEXT WITH 'UNKNOWN'
         MVC   ETMSGAR+4(7),ETUSERID+2  YES - COPY TO WTO
ABENDWTO DS    0H
         MVC   ETMSGAR+15(8),ETTERMID+2  TERMID TO DYNAMIC AREA
         MVC   ETMSGAR+61(4),ETASIDE COPY ASID TO DYNAMIC AREA
         WTO   MF=(E,ETMSGAR)      TELL OPERATOR
         EJECT
********************************************************************
*
*       TAKE SDUMP ON FAILURE OF THIS ROUTINE
*
********************************************************************
         LH    R15,ETMSGAR         YES - GET LENGTH OF WTO
         SH    R15,=H'4'           GET LENGTH OF TEXT
         STC   R15,ETMSGAR+3       SET UP FOR SDUMP
         L     R1,=A(SDUMP)        POINT TO PARM LIST
         MVC   ETSDUMP,0(R1)       COPY SDUMP PARAMETER LIST
         L     R1,=A(KEYZERO)      POINT AT PARM LIST
         MODESET MF=(E,(1))        GET KEY 0 FOR SDUMP CALL
         LA    R1,ETSDUMP          POINT TO SDUMP PARAMETER LIST
         SDUMP HDRAD=ETMSGAR+3,MF=(E,(1)) TAKE SDUMP
         L     R1,=A(NONZERO)      POINT AT PARM LIST
         MODESET MF=(E,(1))        RESTORE TCB KEY
NOSDUMP1 DS    0H
         EJECT
********************************************************************
*
*       RETURN TO THE SYSTEM VIA THE SETRP MACRO
*
********************************************************************
         MVC   ETRUB(2),=X'0075'   RESTORE REGS 9,10,11,13,15
         MVC   ETRUB+2(4),4(R2)    GET PHASE DSA TO R9
         MVC   ETRUB+14(4),4(R2)     AND R13
         MVC   ETRUB+10(4),8(R2)   GET EXTOEX AREA TO R11
         MVC   ETRUB+6(4),12(R2)   GET INPUT PARMS TO R10
         MVC   ETRUB+18(4),0(R2)   GET RETRY ADDRESS TO R12
         LR    R1,R3               RESTORE SDWA ADDR
         L     R2,0(,R2)           GET RETRY ADDRESS
         SETRP REGS=(14,12),RC=4,RETADDR=(R2),FRESDWA=YES,             X
               RUB=ETRUB,RETREGS=YES
HAVSDWA2 DS    0H
         SETRP REGS=(14,12),RC=0   DO NOT RETRY
         SPACE 3
*                          1         2
*                012345678901234567890123456
ABNDMSG  DC    C'LOGON USER EXIT ABEND      '
*                     1         2         3         4         5
*               4567890123456789012345678901234567890123456789012345678
ABNDWTO  WTO   'UNKNOWN ON TERMINAL LOGON USER EXIT ABEND       - ASID X
               X''NNNN''',DESC=2,ROUTCDE=(2,11),MF=L
*              90 123
*               6
LABNDWTO EQU   *-ABNDWTO           CALCULATE LENGTH OF WTO MESSAGE
         LTORG ,
         DROP  ,
         EJECT
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
KBIT0    EQU   X'80'
KBIT1    EQU   X'40'
KBIT2    EQU   X'20'
KBIT3    EQU   X'10'
KBIT4    EQU   X'08'
KBIT5    EQU   X'04'
KBIT6    EQU   X'02'
KBIT7    EQU   X'01'
         TITLE 'EXIT-TO-EXIT WORK AREA'
EXTEX    DSECT
ETID     DS    CL7                 EYEBALL ID
ETTEST   DS    CL1
ETASIDE  DS    CL4                 ASID IN HEX EBCDIC
ETLTIME  DS    2F                  LOGON TIME/DATE
ETTIME   EQU   ETLTIME,4
ETDATE   EQU   ETLTIME+4,4
ETMYKEY  DS    3F                  MY KEY,LENGTH,DATA FOR EXTOEX
ETHSKEY  DS    3F                  HIS(TEST) KEY,LENGTH,DATA FOR EXTOEX
ETUADSIZ DS    F                   SIZE OF CORE FOR UADS BLOCKS
ETUADADR DS    F                   START OF CORE FOR UADS BLOCKS
ETAASKB  DS    F                   ADDRESS OF ASKBACK BLOCK
ETLASKB  DS    F                   LENGTH OF ASKBACK BLOCK
ETATERM  DS    F                   ADDRESS OF TERMINAL BLOCK
ETLTERM  DS    F                   LENGTH OF TERMINAL BLOCK
ETAINFO  DS    F                   ADDRESS OF USER INFO BLOCK
ETLINFO  DS    F                   LENGTH OF USER INFO BLOCK
ETAJCL   DS    F                   ADDRESS OF NEW JCL AREA
ETCDCNT  DS    F                   NUMBER OF JCL STATEMENTS GEND
ETCDMAX  DS    F                   MAX NUMBER OF JCL STMTS
         SPACE 5
*        THE FOLLOWING STORAGE IS FOR ESTAE AND RECOVERY ROUTINES
ETWORK1  DS    D                   GENERAL WORK AREA
ETESTPM  DS    4F                  ESTAE EXIT PARAMETER LIST
ETABNDCD DS    F                   ABEND CODE FROM ESTAE EXIT
ETABNDPW DS    CL8                 ABEND PSW FROM ESTAE EXIT
ETRUB    DS    H,5F                REGS 9,10,11,13,15
         SPACE 5
* THE FOLLOWING STORAGE IS FOR SDUMP
         DS    0F                  ALIGNMENT
ETSDUMP DS     XL(LSDUMP)          SDUMP PARAMETER LIST
         SPACE 5
*        THE FOLLOWING STORAGE IS FOR UADS DATASET ACCESS
ETOPENL  DS    F                   OPEN LIST
ETTTRINF DS    F                   TTR OF INFO BLOCK
ETTTRTRM DS    F                   TTR OF TERMINAL BLOCK
ETTTRASK DS    F                   TTR OF ASKBACK BLOCK
ETMEMBER DS    CL8                 MEMBER NAME FROM BLDL
ETINFOID DS    CL8                 ID OF UADS INFO BLOCK
ETUADS   DS    XL(LSYSUADS)        DCB FOR SYS1.UADS
         READ  ETDECB,SF,MF=L      READ/WRITE ETDECB LIST
ETEXLST  DS    F                   DCB EXIT LIST FOR RDJFCB
ETJFCB   DS    XL176               JFCB AREA
ETAUCB   DS    F                   SYS1.UADS UCB FOR RESERVE
         SPACE 5
*        INFO FROM LOGON PROCESSING
*  IBM BASIC VALUES FOR LOGON
ETUSERID DS    H,CL7               USERID
ETTERMID DS    H,CL8               TERMINAL NAME
*  IBM ITEMS NEEDED FOR JCL
ETPROC   DS    H,CL8               PROCEDURE NAME
ETACCNT  DS    H,CL40              ACCOUNT NUMBER
ETSIZE   DS    H,CL7               REGION SIZE
ETPERFG  DS    H,CL3               PERFORMANCE GROUP
*  BFG ITEMS NEEDED FOR JCL - FROM PANEL OR LOGON CMD ONLY
ETMSGC   DS    H,C                 MESSAGE CLASS VALUE
ETMSGL   DS    H,CL8               MESSAGE LEVEL VALUE
ETCOPY   DS    H,CL3               COPIES VALUE
*  BFG ITEMS NEEDED FOR JCL - FROM PANEL, INFO, OR LOGON CMD
ETPRGNM  DS    H,CL20              PROGRAMMER NAME
ETCPTIM  DS    H,CL4               CPU TIME
ETADDRS  DS    H,CL60              ADDRESS LINE
ETROOM   DS    H,CL4               ROOM NUMBER
ETFORM   DS    H,CL4               FORM CODE
ETLINCT  DS    H,CL3               LINE COUNT VALUE
ETPHONE  DS    H,CL15              FORM CODE
ETNAME   DS    H,CL60              FORM CODE
         SPACE 5
*        FLAGS FOR CONTROLS
ETBITS1  DS    X                   FLAGS
ET1DENY  EQU   X'80'               DENY LOGON REQUEST
ET1ATTN  EQU   X'01'               ATTENTION HIT DURING PROMPT
ETBITS2  DS    X                   FLAGS
ET2SPFRS EQU   X'80'               DSN RESERVED
ET2SPFE0 EQU   X'40'               MEMBER0 ENQ'D ON
ET2SPFEI EQU   X'20'               INFO BLOCK ENQ'D ON
ET2UADRS EQU   X'10'               SYSIKJUA/OPENUADS RESERVED
ET2ABEND EQU   X'08'               ABEND HAS ALREADY OCCURED
ET2DSPLY EQU   X'04'               TERMINAL IS DISPLAY TYPE
ET2ASKB  EQU   X'02'               ASKBACK IS IN PROGRESS
ETBITS3  DS    X                   LOGON COMMAND FLAGS
ET3DEBUG EQU   X'80'               DEBUG SPECIFIED
ET3JCL   EQU   X'40'               JCL REQUESTED
ET3LSTIN EQU   X'20'               LISTINFO REQUESTED
         SPACE 5
* THE FOLLOWING STORAGE IS THE MESSAGE AREA
         DS    0F
ETMSGAR  DS    CL100               MESSAGE AREA
EXTEXL   EQU   *-EXTEX
         TITLE 'SYSTEM DSECTS AND CONTROL BLOCKS'
         PUSH  PRINT
         PRINT NOGEN
         IKJCPPL ,
         DS    0F
LCPPL    EQU   *-CPPL
         SPACE 3
CBUF     DSECT COMMAND BUFFER DSECT
CBUFLEN  DS    H
CBUFOFFS DS    H
CBUFTEXT DS    C
         SPACE 3
AEPL     DSECT
AEPLTAIE DS    F                   ADDRESS OF THE TAIE
AEPLIBUF DS    F                   ADDRESS OF IBUF
AEPLUSAD DS    F                   ADDRESS OF USER AREA
         SPACE 3
         IKJTAIE ,                 GENERATE TAIE DSECT
         SPACE 3
         IKJEFFGF GFDSECT=YES
         SPACE 3
         IKJCSPL ,
         DS    0F
LCSPL    EQU   *-CSPL
         SPACE 3
         IKJCSOA ,
         DS    0F
LCSOA    EQU   *-CSOA
         SPACE 3
         IKJPPL ,
         DS    0F
LPPL     EQU   *-PPL
         SPACE 3
         IKJIOPL ,
         DS    0F
LIOPL    EQU   *-IOPL
         SPACE 3
         IKJPGPB ,                 GENERATE PGPB DSECT
         DS    0F
LPGPB    EQU   *-PGPB              CALCULATE LENGTH OF PGPB
         SPACE 3
         IKJECT
         SPACE 3
         IKJPSCB
         SPACE 3
         IKJTSB
         SPACE 3
         CVT   DSECT=YES
         SPACE 3
         DCBD  DSORG=PS,DEVD=DA
         SPACE 3
         IHAPSA ,
         SPACE 3
         IHAASVT ,
         SPACE 3
         IHAASCB ,
         SPACE 3
         IKJTCB  ,
         SPACE 3
         IEZJSCB ,
         SPACE 3
         IHARB   ,
         SPACE 3
         IHASDWA ,
         POP   PRINT
         END
