EXIT016  TITLE 'WFB - EXIT 016 - MAX COND CODE/ABEND CODE SUPPORT'
***********************************************************************
*                                                                     *
* MODULE NAME: EXIT016                                                *
*                                                                     *
* DESCRIPTIVE NAME: JES2 EXIT 016 - MAX COND CODE/ABEND CODE SUPPORT  *
*                                                                     *
* AUTHOR: VIC COZZOLI                                                 *
*         WELLS FARGO BANK, N.A. (WFB)                                *
*         525 MARKET STREET, A.U. 8513                                *
*         SAN FRANCISCO, CALIFORNIA  94163                            *
*                                                                     *
*         PHONE: (415) 396-6376                                       *
*                                                                     *
*                                                                     *
* DATE WRITTEN: NOVEMBER 1983                                         *
*                                                                     *
* FMID: HJE2329 (MVS/SP-JES2 1.3.3)                                   *
*                                                                     *
* PURPOSE: THIS EXIT MODIFIES THE $HASP165 MESSAGE BY ADDING EITHER   *
*          THE MAXIMUM CONDITON CODE OF ALL THE STEPS IN A JOB OR     *
*          THE ABEND CODE OF THE JOB.                                 *
*                                                                     *
* ENTRY POINT: UEXIT016                                               *
*                                                                     *
* REGISTERS ON INPUT:                                                 *
*     R0: 0                                                           *
*     R1: ADDRESS OF 3-WORD PARMETER LIST WITH THE FOLLOWING LAYOUT:  *
*         WORD 1 (+0) ADDRESS OF THE MESSAGE TO BE SEND               *
*         WORD 2 (+4) ADDRESS OF THE $WTO PARAMETER LIST              *
*         WORD 3 (+8) ADDRESS OF THE JCT                              *
*     R2-R10: N/A                                                     *
*     R11: ADDRESS OF THE HCT                                         *
*     R12: N/A                                                        *
*     R13: ADDRESS OF THE OUTPUT PROCESSOR PCE                        *
*     R14: RETURN ADDRESS                                             *
*     R15: ENTRY ADDRESS                                              *
*                                                                     *
* REGISTERS ON RETURN:                                                *
*     R0: N/A                                                         *
*     R1: ADDRESS OF THE 3-WORD PARAMETER LIST                        *
*     R15: A RETURN CODE:                                             *
*          =0, CONTINUE NORMAL EXIT OR JES2 PROCESSING                *
*          =4, IGNORE ANY OTHER EXITS AND CONTINUE WITH NORMAL        *
*              PROCESSING                                             *
*          =8, TELLS JES2 NOT TO ISSUE THE NOTIFY $WTO                *
*                                                                     *
* JES2 MACROS USED:                                                   *
*     $ENTRY, $SAVE, $RETURN, $MODEND                                 *
*                                                                     *
* LAST UPDATE: BY TOM LITNEY FOR JES2 2.1.5, CHANGES ARE IDENTIFIED   *
*              BY 'TL' ON LINE                                        *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
         COPY $HASPGBL                 COPY HASP GLOBALS
         EJECT
J2XIT016 $MODULE                                                       C
               $BUFFER,                REQ'D BY JCT                    C
               $CAT,                   REQ'D BY HCT                    C
               $CMB,                   REQ'D TO MAP $WTO PARM LIST     C
               $HASPEQU,               REQ'D FOR REG CONVENTIONS       C
               $HCT,                   REQ'D BY $SAVE, $RETURN, ETC.   C
               $JCT,                   REQ'D TO GET JOBNAME, ETC.      C
               $JQE,                   REQ'D BY HCT                    C
               $MIT,                   REQ'D BY $MODEND, HCT           C
               $PCE                    REQ'D TO GET PROCESSOR INFO
*              IEFSSJT ,               REQ'D TO GET JCTJFLG EQUATES  TL
*              IEFJSSOB CS ,           REQ'D FOR IEFSSJT             TL
         TITLE 'WFB - EXIT 016 - MAX COND CODE/ABEND CODE SUPPORT'
***********************************************************************
*                                                                     *
*  INITIALIZATION                                                     *
*                                                                     *
***********************************************************************
         SPACE  1
UEXIT016 $ENTRY BASE=R12               EXIT ROUTINE ENTRY POINT
         SPACE  2
        $SAVE                          SAVE CALLER'S REGISTERS
         LR    R12,R15                 LOAD LOCAL BASE REGISTER
         L     R10,8(R1)               LOAD JCT ADDRESS
         USING JCT,R10                 ESTABLISH ADDRESSABILITY
         SLR   R15,R15                 SET DEFAULT RETURN CODE
         SPACE 3
***********************************************************************
*                                                                     *
*  CHECK TO SEE IF JOB'S ABEND CODE OR MAXIMUM CONDITION CODE HAS     *
*  BEEN SAVED.  IF NOT, RETURN.                                       *
*                                                                     *
***********************************************************************
         SPACE 1
         CLI   JCTUSER1,X'80'          IS JOB'S ABEND/MAX CC SAVED?
         BNE   RETURN                  NO, RETURN
*        CLI   JCTJTFLG,SSJTJFAL       IS MESSAGE TO BE ALTERED?   TL
         CLI   JCTJTFLG,JOBFAIL        IS MESSAGE TO BE ALTERED?   TL
         BE    RETURN                  NO, SKIP
         EJECT
***********************************************************************
*                                                                     *
*  PREPARE TO ALTER THE NOTIFY MESSAGE.                               *
*                                                                     *
***********************************************************************
         SPACE 1
         L     R4,4(R1)                GET ADDRESS OF $WTO PARM LIST
         USING CMBWTOPL,R4             ESTABLISH $CMD ADDRESSABILITY
         SLR   R5,R5                   ZERO WORK REGISTER
         IC    R5,CMBML                GET MESSAGE LENGTH
         CH    R5,=H'68'               MSG TOO LONG TO UPDATE IN PLACE?
         BH    RETURN                  YES, RETURN (SHOULDN'T HAPPEN)
         L     R6,0(R1)                GET ADDRESS IF MESSAGE TEXT
         AR    R6,R5                   POINT PAST EXISTING MESSAGE TEXT
         SPACE 3
***********************************************************************
*                                                                     *
*  CHECK TO SEE IF THE JOB ABENDED.  IF IT DID, GET THE ABEND CODE.   *
*                                                                     *
***********************************************************************
         SPACE 1
*        TM    JCTJTFLG,SSJTABND       DID JOB ABEND?               TL
         TM    JCTJTFLG,JOBABND        DID JOB ABEND?               TL
         BZ    MAXCONDC                NO, GO GET MAXIMUM COND CODE
         SPACE 1
         L     R2,JCTUSER1             GET ABEND CODE
         LA    R2,0(R2)                CLEAR HIGH ORDER BYTE
         SRL   R2,12                   OBTAIN SYSTEM CODE
         LTR   R2,R2                   WAS IT A SYSTEM CODE ABEND?
         BZ    USRABEND                NO, GO PROCESS USER CODE ABEND
         EJECT
***********************************************************************
*                                                                     *
*  IF THE JOB ABENDED WITH A SYSTEM ABEND CODE, COME HERE TO ALTER    *
*  THE NOTIFY MESSAGE TO INCLUDE THE SYSTEM ABEND CODE.               *
*                                                                     *
***********************************************************************
         SPACE 1
SYSABEND DS    0H
         LA    R5,10(R5)               INCR. MSG LENGTH
         MVC   0(10,R6),=C'SYSTEM XXX' ADD SYSTEM ABEND CODE TO MSG
         SRDL  R2,12                   CONVERT IT TO HEX
         SR    R2,R2                          "
         SLDL  R2,4                           "
         IC    R2,CONVTABL(R2)                "
         STC   R2,7(R6)                       "
         SR    R2,R2                          "
         SLDL  R2,4                           "
         IC    R2,CONVTABL(R2)                "
         STC   R2,8(R6)                       "
         SR    R2,R2                          "
         SLDL  R2,4                           "
         IC    R2,CONVTABL(R2)                "
         STC   R2,9(R6)                       "
         B     STORELEN                GO CHECK NEW MESSAGE LENGTH
         SPACE 3
***********************************************************************
*                                                                     *
*  IF THE JOB ABENDED WITH A USER ABEND CODE, COME HERE TO ALTER THE  *
*  NOTIFY MESSAGE TO INCLUDE THE USER ABEND CODE.                     *
*                                                                     *
***********************************************************************
         SPACE 1
USRABEND DS    0H
         LA    R5,9(R5)                INCR. MSG LENGTH
         MVC   0(9,R6),=C'USER XXXX'   ADD USER ABEND CODE TO MSG
         LH    R2,JCTUSER1+2           GET USER ABEND CODE
         CVD   R2,5(R6)                CONVERT TO DECIMAL
         UNPK  5(4,R6),5(8,R6)         UNPK FOUR LOW DIGITS
         OI    8(R6),X'F0'             SET ZONE
         MVC   9(2,R6),=C'  '          CLEAR TWO  BYTES
         B     STORELEN                GO CONVERT TO DEC/PRINTABLE
         EJECT
***********************************************************************
*                                                                     *
*  IF THE JOB ENDED NORMALLY, COME HERE TO ALTER THE NOTIFY MESSAGE   *
*  TO INCLUDE THE MAXIMUM CONDITION CODE FOR ANY STEP IN THE JOB.     *
*                                                                     *
***********************************************************************
         SPACE 1
MAXCONDC DS    0H
         MVC   0(20,R6),=C'- MAX COND CODE XXXX'  ADD MAXCC TO MSG
         LA    R5,20(R5)               INCR. MESSAGE LENGTH
         LH    R2,JCTUSER1+2           GET MAX CONDITION CODE
         CVD   R2,16(R6)               CONVERT TO DECIMAL
         UNPK  16(4,R6),16(8,R6)       UNPK FOUR LOW DIGITS
         OI    19(R6),X'F0'            SET ZONE
         MVC   20(2,R6),=C'  '         CLEAR TWO  BYTES
         SPACE 3
***********************************************************************
*                                                                     *
*  STORE NEW MESSAGE LENGTH IN CMB PARM LIST.                         *
*                                                                     *
***********************************************************************
         SPACE 1
STORELEN DS    0H
         STC   R5,CMBML                STORE MSG LEN IN CMB PARM LIST
         SPACE 3
***********************************************************************
*                                                                     *
*  GO BYE-BYE.                                                        *
*                                                                     *
***********************************************************************
         SPACE 1
RETURN   DS    0H
        $RETURN RC=(R15)               RETURN TO CALLER
         EJECT
CONVTABL DC    CL16'0123456789ABCDEF'  CONVERSION TABLE
JOBFAIL  EQU   X'80'                                                TL
JOBABND  EQU   X'20'                                                TL
         LTORG
        $MODEND
         END
EXIT252  TITLE 'WFB - EXIT 252 - MAX COND CODE/ABEND CODE SUPPORT'
***********************************************************************
*                                                                     *
* MODULE NAME: EXIT252                                                *
*                                                                     *
* DESCRIPTIVE NAME: JES2 EXIT 252 - MAX COND CODE/ABEND CODE SUPPORT  *
*                                                                     *
* AUTHOR: VIC COZZOLI                                                 *
*         WELLS FARGO BANK, N.A. (WFB)                                *
*         525 MARKET STREET, A.U. 8513                                *
*         SAN FRANCISCO, CALIFORNIA  94163                            *
*                                                                     *
*         PHONE: (415) 396-6376                                       *
*                                                                     *
*                                                                     *
* DATE WRITTEN: NOVEMBER 1983                                         *
*                                                                     *
* FMID: HJE2329 (MVS/SP-JES2 1.3.3)                                   *
*                                                                     *
* PURPOSE: THIS EXIT PLACES OBTAINS AND STORES IN THE JCT EITHER      *
*          THE MAXIMUM CONDITON CODE OF ALL THE STEPS IN A JOB OR     *
*          THE ABEND CODE OF THE JOB.                                 *
*                                                                     *
* INVOCATION POINT: EXIT008                                           *
*                                                                     *
* ENTRY POINT: UEXIT252                                               *
*                                                                     *
* REGISTERS ON INPUT:                                                 *
*     R0: CODE PASSED BY JES2                                         *
*         =0, INDICATES THAT THE JCT HAS BEEN READ FROM SPOOL         *
*         =4, INDICATES THAT THE JCT WILL BE WRITTEN TO SPOOL         *
*     R1: ADDRESS OF THE JCT                                          *
*     R2-R10: N/A                                                     *
*     R11: ADDRESS OF THE SSVT                                        *
*     R12: N/A                                                        *
*     R13: ADDRESS OF AN OS-STYLE SAVE AREA                           *
*     R14: RETURN ADDRESS                                             *
*     R15: ENTRY ADDRESS                                              *
*                                                                     *
* REGISTERS ON RETURN:                                                *
*     R0-R1: N/A                                                      *
*     R15: A RETURN CODE:                                             *
*          =0, CONTINUE NORMAL EXIT OR JES2 PROCESSING                *
*          =4, IGNORE ANY OTHER EXITS AND CONTINUE WITH NORMAL        *
*              PROCESSING                                             *
*                                                                     *
* JES2 MACROS USED:                                                   *
*     $ENTRY, $MODEND                                                 *
*                                                                     *
***********************************************************************
         EJECT
         COPY $HASPGBL                 COPY HASP GLOBALS
         EJECT
J2XIT252 $MODULE ENVIRON=USER,                                         C
               SSOB,                   REQ'D TO DETERMINE INVOKER      C
               $BUFFER,                REQ'D BY JCT                    C
               $HASPEQU,               REQ'D FOR REG CONVENTIONS       C
               $JCT,                   REQ'D TO SAVE ABEND/COND CODE   C
               $MIT,                   REQ'D BY $MODEND, HCT           C
               $SCAT,                  REQ'D BY $SVT                   C
               $SJB,                   REQ'D TO DETERMINE INVOKER      C
               $SVT,                   REQ'D TO DETERMINE INVOKER      C
               $XECB                   REQ'D BY $SVT
         TITLE 'WFB - EXIT 252 - MAX COND CODE/ABEND CODE SUPPORT'
***********************************************************************
*                                                                     *
*  INITIALIZATION                                                     *
*                                                                     *
***********************************************************************
         SPACE 1
UEXIT252 $ENTRY BASE=R12               EXIT ROUTINE ENTRY POINT
         SPACE 3
         STM   R14,R12,12(R13)         SAVE CALLER'S REGISTERS
         LR    R12,R15                 LOAD LOCAL BASE REGISTER
         LR    R10,R1                  GET ADDRESS OF JCT
         SLR   R15,R15                 SET DEFAULT RETURN CODE
         EJECT
***********************************************************************
*                                                                     *
*  CHECK TO SEE IF THERE IS A JCT , IF IT IS FOR A BATCH JOB AND      *
*  IF NOTIFY WAS REQUESTED.  IF NOT, RETURN.                          *
*                                                                     *
***********************************************************************
         SPACE 1
         LTR   R0,R0                   IS JCT BEING READ?
         BZ    RETURN                  YES, RETURN
         SPACE 1
         CLI   JCTJOBID,C'J'           IS THIS A BATCH JOB?
         BNE   RETURN                  NO, RETURN
         SPACE 1
         CLI   JCTTSUID,C' '           WAS NOTIFY REQUESTED?
         BE    RETURN                  NO, RETURN
         SPACE 1
         TM    JCTJBOPT,JCTXBACH       IS THIS AN EXECUTION BATCH      C
                                         MONITOR?
         BO    RETURN                  YES, RETURN
         SPACE 3
***********************************************************************
*                                                                     *
*  FIND THE SJB ON THE JOBS EXECUTING BY CLASS QUEUE THAT BELONGS TO  *
*  THIS JOB'S JCT.  IF THE SJB INDICATES THE JOB IS NOT IN            *
*  TERMINATION, THEN RETURN.                                          *
*                                                                     *
***********************************************************************
         SPACE 1
         USING $SVDSECT,R11            PROVIDE SSVT ADDRESSABILITY
         SPACE 1
         L     R2,$SVJXCLS             GET EXECUTING SJB'S QUEUE
         USING SJBDSECT,R2             PROVIDE SJB ADDRESSABILITY
GETSJB   DS    0H
         LTR   R2,R2                   TEST FOR END OF QUEUE
         BZ    RETURN                  RETURN IF NO MATCH
         CLC   JCTJOBID(8),SJBJOBID    IS THIS THE SJB FOR THIS JCT?
         BE    FOUNDSJB                YES, PROCESS IT
         L     R2,SJBXQCHN             GET POINTER TO NEXT SJB
         B     GETSJB                  LOOP BACK THRU
         SPACE 1
FOUNDSJB DS    0H
         CLI   SJBXQFN1+1,SSOBTERM     WAS EXIT INVOKED BY JOB         C
                                         TERMINATION (HOSTERM)?
         BNE   RETURN                  NO, RETURN
         EJECT
***********************************************************************
*                                                                     *
*  FIND THE OS JCT FOR THIS JOB AND CHECK TO SEE IF THE JOB ABENDED.  *
*  IF IT DID ABEND, GET THE ABEND CODE.                               *
*                                                                     *
***********************************************************************
         SPACE 1
GETCVT   EQU   *
         L     R2,CVTPTR               LOAD ADDR OF CVT POINTER
         L     R2,0(R2)                LOAD ADDR OF NEXT/CURR TCB'S
         L     R2,OURTCB(R2)           LOAD ADDR OF OUR TCB
         L     R2,TCBJSCB(R2)          LOAD ADDR OF JSCB
         L     R2,JSCBACT(R2)          LOAD ADDR OF ACTIVE JSCB
         L     R2,JSCBJCT(R2)          LOAD ADDR OF OS JCT
         USING INJMJCT-16,R2           ESTABLISH OS JCT ADDRESSABILITY
         SPACE 1
         TM    JCTJSTAT,JCTABEND       DID JOB ABEND?
         BNO   GETMAXCC                NO, GET MAXIMUM CONDITION CODE
         L     R3,JCTACODE             YES, GET ABEND CODE
         B     SAVECODE                GO TO SAVE IT
         SPACE 3
***********************************************************************
*                                                                     *
*  IF THE JOB DID NOT ABEND, THEN SCAN THE SCT'S FOR THE JOB AND      *
*  FIND THE MAXIMUM CONDITION CODE OUT OF ALL THE JOB'S STEPS.        *
*                                                                     *
***********************************************************************
         SPACE 1
GETMAXCC DS    0H
         L     R2,JCTSDKAD             GET FIRST SCT ADDRESS
         USING INSMSCT-16,R2           ESTABLISH SCT ADDRESSABILITY
         SPACE 1
         SLR   R3,R3                   ZERO OUT WORK REGISTER
         SPACE 1
SCTLOOP  DS    0H
         SRL   R2,8                    GET ADDRESS IN PROPER FORM
         LTR   R2,R2                   ARE THERE ANY MORE SCT'S?
         BZ    SAVECODE                NO, GO TO FINISH
         TM    SCTSTEND,SCTSTRUN       DID STEP RUN?
         BNO   NEXTSCT                 NO, GET NEXT SCT
         CH    R3,SCTSEXEC             IS THIS STEP'S CONDITION CODE   C
                                         GREATER THAN THE MAXIMUM?
         BNL   NEXTSCT                 NO, GET NEXT SCT
         LH    R3,SCTSEXEC             YES, SAVE NEW MAX COND CODE
NEXTSCT  DS    0H
         L     R2,SCTANSCT             GET NEXT SCT
         B     SCTLOOP                 LOOP TO CHECK NEXT SCT
         EJECT
***********************************************************************
*                                                                     *
*  SAVE EITHER THE ABEND CODE OR THE MAXIMUM CONDITION CODE FOR       *
*  ANY STEP OF THE JOB IN A JCT USER FIELD.  THIS INFORMATION WILL    *
*  BE USED LATER IN EXIT016 - TSO NOTIFY.                             *
*                                                                     *
***********************************************************************
         SPACE 1
SAVECODE DS    0H
         ST    R3,JCTUSER1             SAVE ABEND/MAX COND CODE
         MVI   JCTUSER1,X'80'          MARK IT AS PROCESSED
         SPACE 3
***********************************************************************
*                                                                     *
*  GO BYE-BYE.                                                        *
*                                                                     *
***********************************************************************
         SPACE 1
RETURN   DS    0H
         L     R14,12(R13)             LOAD RETURN ADDRESS
         LM    R0,R12,20(R13)          RESTORE REGISTERS
         BR    R14                     RETURN
         EJECT
PATCH    DS    CL200
         DC    CL8'ENDPATCH'
CVTPTR   EQU   X'10'         ADDRESS OF CVT POINTER
OURTCB   EQU   X'04'         OFFSET INTO TCB LIST OF OUR TCB ADDRESS
TCBJSCB  EQU   X'B4'         OFFSET INTO TCB OF JSCB ADDRESS
JSCBACT  EQU   X'15C'        OFFSET INTO JSCB OF ACTIVE JSCB ADDRESS
JSCBJCT  EQU   X'104'        OFFSET INTO ACTIVE JSCB OF OS JCT ADDRESS
         SPACE 3
JCTDSCT  DSECT
*        THIS CONTROL BLOCK IS A COPY OF OS JCT DEFINING
*        ONLY THOSE FIELDS USED BY THIS MOD.  THE OS JCT,
*        IEFAJCTB, CONTAINS DUPLICATE FIELD NAMES OF THOSE
*        USED BY THE JES2 JCT (JCTID, JCTJNAM, AND JCTJMR)
*        AND CAUSES ASSEMBLY ERRORS IF IT USED.
INJMJCT  EQU    *
         DS     CL5                    FILLER
JCTJSTAT DS     1C                     JOB STATUS INDICATORS
JCTABEND EQU    8                      BIT 4 - JCT ABEND BIT
         DS     CL26                   FILLER
JCTSDKAD DS     CL4                    DISK ADDRESS OF FIRST SCT
         DS     CL132                  FILLER
JCTACODE DS     CL4                    ABEND CODE FIELD
         EJECT
         PUSH   PRINT
         PRINT  NOGEN
SCTDSCT  DSECT
         IEFASCTB
SCTSTEND EQU    INSMSCT+X'AC'          BITS AND PIECES
SCTSTRUN EQU    X'C0'                  STEP STARTED/ENDED BIT
         POP    PRINT
J2XIT252 CSECT
         SPACE  3
         LTORG
        $MODEND
         END
