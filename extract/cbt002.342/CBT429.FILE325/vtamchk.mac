*********************************************************************SL
*                                                                    SL
*        VTAMCHK IS A PROGRAM RUN IN A PROCEDURE THAT IS STARTED     SL
*        BY AN 'AUTOMATIC COMMAND' IN PARMLIB(COMMNDXX): S VTAMCHK   SL
*                                                                    SL
*        VTAMCHK FIRST CHECKS THAT VTAM IS UP AND RUNNING, THEN      SL
*        ISSUES ALL THE COMMANDS IN THE FILE DEFINED BY //SYSIN .    SL
*        THESE COMMANDS ARE INTENDED TO START VTAM APPLIDS.          SL
*                                                                    SL
*        THE FOLLOWING OPTIONS ARE AVAILABLE AS PARM='... , ...'     SL
*          DELAY=XX  TENTH-SECONDS TO WAIT BETWEEN COMMANDS, 10=1SEC SL
*          COL=XX    COLUMN THAT BEGINS COMMENTS ON COMMANDS         SL
*        AN EXAMPLE OF THE PROCEDURE FOLLOWS:                        SL
*                                                                    SL
*   //VTAMCHK  PROC  MEMBER=VTAMCHKA,DELAY=20                        SL
*   //* REFER:  SYS1.PROCLIB(VTAMCHK)                                SL
*   //* COMPID: OPER                                                 SL
*   //* DOC:    THIS PROCEDURE IS USED TO ACTIVATE VTAM APPLICATIONS SL
*   //*         AFTER INSURING THAT VTAM IS ACTIVE. IT IS STARTED ON SL
*   //*         EACH SYSTEM AT IPL BY SYS1.PARMLIB(COMMND00).        SL
*   //IEFPROC  EXEC  PGM=VTAMCHK,PARM='DELAY=&DELAY',REGION=200K     SL
*   //SYSIN     DD DSN=SYS3.PARMLIB(&MEMBER),DISP=SHR                SL
*   //ABNLIGNR  DD DUMMY       *** BYPASS ABEND-AID ***              SL
*   //SYSUDUMP  DD SYSOUT=A                                          SL
*                                                                    SL
*        COMMANDS IN THE SYSIN STREAM ARE ISSUED EXACTLY AS SEEN.    SL
*        A SEMICOLON (;) FOLLOWING THE COMMAND INDICATES SPECIAL     SL
*        OPTIONS TO VTAMCHK. TO HAVE A SEMICOLON PASSED AS PART OF   SL
*        THE COMMAND, CODE TWO CONSECUTIVE SEMICOLONS (;;).          SL
*        THE FOLLOWING OPTIONS ARE AVAILABLE:                        SL
*          ;DELAY=XX  TENTH-SECONDS TO WAIT BEFORE NEXT COMMAND      SL
*          ;COL=XX    COLUMN THAT BEGINS COMMENTS ON FOLLOWING CMDS  SL
*        AN EXAMPLE OF THE INPUT FOLLOWS:                            SL
*                                                                    SL
*   S TSO                                                            SL
*   S NCCF.NCCF;DELAY=50                                             SL
*   S CICS,REG=T1;COL=25                                             SL
*   $SLOGON1                 START THE JES/SNA SESSION               SL
*                                                                    SL
*********************************************************************SL
         EJECT                                                       SL
         PRINT OFF                                                   SL
         MACRO
&NAME    BEGIN &ID,&E=,&R=8,&B=,&S=,&G=,&T=,&C=,&X=0,&BASE=11,&M=,     X
               &TITLE=
         GBLB  &VIREGSZ
         GBLB  &BEGINSW
         LCLA  &A,&AA
         LCLA  &L,&L1
         LCLA  &MA,&MB,&MC
         LCLA  &MD
         LCLA  &GETL
         LCLC  &NAMT
         LCLC  &BB
         LCLC  &LBL,&D,&I,&I1,&NAM
         LCLC  &SS
         LCLC  &BASEX
.*  NAME = CSECT NAME
.*  ID = TITLE
.*  E = N FOR NO EQUATES
.*  R = NUMBER OF DBLE WDS FOR REPAREA (DEFAULT = 8)
.*  B = EXTRA BASE REGS
.*  S = SAVEAREA NAME
.*  G = GO TO ADDR AFTER BEGIN ADDR (DEFAULT IS NSI)
.*  T = RENT IF RENT
.*  C = NO IS NO CSECT TO BE GENERATED
.*  X = EXTENDED SAVEAREA LENGTH IN DBL WDS IF RENT
.*  BASE = BASE REG IF T=RENT.  (DEFAULT = 11)
.*  M = MULTIPLE ENTRY POINTS
.*      FORM IS M=(B1,C1,B2,C2,...)
.*                 BX = ENTRY NAME
.*                 CX = GO TO NAME
.*  INNER MACROS = GREG,FREG,GETMAIN
.*  72.255
         AIF   ('&S' EQ '').A020
&SS      SETC  '&S'
         AGO   .A040
.A020    ANOP
&SS      SETC  'WDC'.'&SYSNDX'.'1'
.A040    ANOP
         AIF   ('&ID' EQ '').A
&I       SETC  '&ID'(1,1)
&I1      SETC  '&ID'
&L1      SETA  (K'&I1)
.A       ANOP
         AIF   ('&I' NE '''').AAAAAAA
&I1      SETC  '&I1'(2,&L1-2) GET RID OF THE DAMN QUOTES
.AAAAAAA ANOP
&LBL     SETC  'WDC'.'&SYSNDX'
         AIF   ('&NAME' EQ '').NNA
&NAM     SETC  '&NAME'.'       '
         AGO   .NNB
.NNA     ANOP
&NAM     SETC  '&LBL'
.NNB     ANOP
         AIF   (&BEGINSW).NNBX
&NAMT    SETC  '&NAM'(1,4)
.NNBX    ANOP
         AIF   ('&ID' NE '').CCC
         AIF   ('&NAME' NE '').CB
&D       SETC  '&LBL'
         AGO   .CD
.CB      ANOP
&D       SETC  '&NAME'
         AIF   ('&TITLE' EQ 'N').CE
         AGO   .CD
.CCC     ANOP
&NAMT    TITLE '&NAME &I1'
         AGO   .CE
.CD      ANOP
&NAMT    TITLE '&D'
.CE      AIF   ('&NAME' NE '').CF
         AIF   ('&C' NE '').CG
&LBL     CSECT
         AGO   .CG
.CF      ANOP
         AIF   ('&C' EQ '').CF2
&NAME    DS    0H
         AGO   .CG
.CF2     ANOP
&NAME    CSECT
.CG      AIF   ('&M' NE '').MENT
.CGB     BALR  15,0
         USING *,15
         B     &LBL.A
         AIF   ('&ID' NE '').CH
         DC    AL1(8)
         DC    CL8'&D'
         AGO   .CI
.MENT    ANOP
&MA      SETA  N'&M
&MB      SETA  &MA/2*2
         AIF   (&MA EQ &MB).MENTA
         MNOTE 8,'BEGIN--ODD NUMBER OF M PARMS'
.MENTA   ANOP
         AIF   (&MB EQ 0).CGB
&MC      SETA  &MC+1
         ENTRY &M(&MC)
&MD      SETA  &MC/2+1
&M(&MC)  LA    0,4*&MD
         AIF   (&MB EQ 2).CGB
&MD      SETA  4*&MB-4
         B     &MD.(15)
&MB      SETA  &MB-2
&MC      SETA  &MC+1
         AGO   .MENTA
.CH      ANOP
&L       SETA  K'&I1
&L       SETA  &L+9
         DC    AL1(&L)
         DC    CL9'&NAM'
         DC    C'&I1'
.CI      DS    0F
&LBL.A   STM   14,12,12(13)
         AIF   ('&T' EQ 'RENT').G3
         ST    13,&LBL.B+4
         LR    12,13
         LR    3,1
         BAL   13,&LBL.Q
         DROP  15
         USING *,13
&SS      DS    0F
&LBL.B   DC    9C'SAVEAREA'
         AGO   .G5
.G3      ANOP
         LR    12,13
         LR    3,1
&GETL    SETA  &X*8+72
         GETMAIN R,LV=&GETL
         ST    13,4(1)
         LR    13,1
&BASEX   SETC  '&BASE'
         AIF   ('&BASEX' EQ '15').G5
         AIF   ('&BASEX' EQ 'RF').G5
         AIF   ('&BASEX' EQ 'R15').G5
         BAL   &BASEX,&LBL.Q
         DROP  15
         USING *,&BASEX
.G5      ANOP
         AIF   ('&R' EQ '0').NOREPX
         DC    &R.CL8'REPAREA'
.NOREPX  ANOP
&LBL.Q   ST    13,8(12)
         AIF   (&BEGINSW).CC
&BEGINSW SETB  1
         AIF   ('&E' EQ 'N').EJECT
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
RA       EQU   10
R10      EQU   10
RB       EQU   11
R11      EQU   11
RC       EQU   12
R12      EQU   12
RD       EQU   13
R13      EQU   13
RE       EQU   14
R14      EQU   14
RF       EQU   15
R15      EQU   15
.EJECT   ANOP
.CC      ANOP
         GREG
         FREG
         AIF   ('&T' EQ 'RENT').END
         AIF  ('&B' EQ '').END
&A       SETA  0
&BB      SETC  'R13'
.C       ANOP
&A       SETA  &A+1
         LA    &B(&A),4095(&BB)
         LA    &B(&A),1(&B(&A))
&BB      SETC  '&B(&A)'
         GREG  &B(&A)
&AA      SETA  &AA+4096
         USING &SS+&AA,&BB
         AIF   (&A NE N'&B).C
.END     AIF   ('&G' EQ '').MEND
         AIF   ('&T' EQ '').A050
         B     &G
         AGO   .MEND
.A050    ANOP
         BAL   R15,*+8
         DC    A(&G)
         L     R15,0(R15)
         BR    R15
.MEND    AIF   ('&M' EQ '').EJECTX
&MA      SETA  0
&MB      SETA  N'&M
&MC      SETA  &MB/2*2
         AIF   (&MC EQ 0).EJECTX
         CNOP  0,4
         LR    15,0
         L     15,*+2(15)
         BR    15
.MENTB   ANOP
         AIF   (&MC EQ 0).EJECTX
&MA      SETA  &MA+2
         DC    A(&M(&MA))
&MC      SETA  &MC-2
         AGO   .MENTB
.EJECTX  EJECT
         MEND
         MACRO
&L       ENDIT &C
         LCLA  &A,&B
         LCLC  &LBL,&CD
         AIF   ('&C' EQ '').AAA
&CD      SETC  '&C'(1,1)
.AAA     ANOP
&LBL     SETC  'WFB'.'&SYSNDX'
         AIF   ('&L' EQ '').A
&L       EQU   *
.A       AIF   ('&C' NE '').CC
         SR    15,15
.CA      L     13,4(13)
         L     14,12(13)
         LM    0,12,20(13)
         BR    14
         AIF   (&A LT 1).CAC
         AIF   (&A EQ 1).CAA
&LBL     DC    D'0'
         MEXIT
.CAA     ANOP
&C       DC    H'0'
.CAC     ANOP
         MEXIT
.CB      ANOP
         LA    15,&C
         AGO   .CA
.CC      AIF   ('&CD' NE '(').CD
         AIF   ('&SYSLIST(1)' EQ '(15)').CA
         AIF   ('&SYSLIST(1)' EQ '(RF)').CA
         AIF   ('&SYSLIST(1)' EQ '(R15)').CA
         LR    15,&C(1)
         AGO   .CA
.CD      AIF  ('&CD' GT 'Z').CB
         AIF   (T'&C NE 'U').CE
.CDD     LH    15,&C
&A       SETA  1
         AGO   .CA
.CE      AIF   (T'&C NE 'J').CF
         L     13,4(13)
         LM    14,12,12(13)
         BR    14
         MEXIT
.CF      AIF   (T'&C EQ 'N').CB
         AIF   (T'&C EQ 'H').CG
         AIF   (T'&C EQ 'S').CG
         AIF   (T'&C EQ 'Y').CH
.CG      LH    15,&C
         AGO   .CA
.CH      AIF   (T'&C EQ 'D').CI
         AIF   (T'&C NE 'W').CJ
.CI      L     15,&C+4
         AGO   .CA
.CJ      AIF   (T'&C EQ 'A' OR T'&C EQ 'V').CK
         AIF   (T'&C NE 'Q').CL
.CK      L     15,&C
         AGO   .CA
.CL      AIF   (T'&C EQ 'P').CN
         AIF   (T'&C EQ 'C').CM
         AIF   (T'&C NE 'Z').CP
.CM      PACK  &LBL,&C
         AGO   .CO
.CN      ZAP   &LBL,&C
.CO      CVB   15,&LBL
&A       SETA  2
         AGO   .CA
.CP      ANOP
&A       SETA  L'&C
&B       SETA  L'&C-4
         AIF   ('&B' GT '0').CQ
&B       SETA  0
.CQ      ANOP
&A       SETA  &A-&B
         AIF   ('&L' EQ '').CPP
&L       EQU   *
.CPP     AIF   ('&A' GT '3').CR
         SR    15,15
.CR      IC    15,&C+&B
&B       SETA  &B+1
&A       SETA  &A+1
         AIF   ('&A' LT '1').CA
         SLL   15,8
         AGO   .CR
         MEND
         MACRO
&LABEL   GREG
         GBLB  &VIREGSZ
         GBLA  &VIREGSA(256)
         GBLA  &VIREGS(16)
         GBLC  &VIREGSE(256)
         LCLA  &A,&B,&C,&D,&E
         AIF   (&VIREGSZ).X22
         AGO   .XXX
.X22     ANOP
**********************************************************************
         DUMPR
**********************************************************************
.XXX     ANOP
         AIF   ('&VIREGSE(1)' EQ 'R0').START
.FL      ANOP
&A       SETA  &A+1
&B       SETA  &A-1
&VIREGSE(&A) SETC 'R'.'&B'
&VIREGSA(&A) SETA &A
         AIF   (&A NE 16).FL
&VIREGS(1) SETA 1
&VIREGS(2) SETA 2
&VIREGS(3) SETA 3
&VIREGS(4) SETA 4
&VIREGS(14) SETA 14
&VIREGS(15) SETA 15
&VIREGS(16) SETA 16
&VIREGSE(17) SETC 'RA'
&VIREGSE(18) SETC 'RB'
&VIREGSE(19) SETC 'RC'
&VIREGSE(20) SETC 'RD'
&VIREGSE(21) SETC 'RE'
&VIREGSE(22) SETC 'RF'
&VIREGSA(17) SETA 11
&VIREGSA(18) SETA 12
&VIREGSA(19) SETA 13
&VIREGSA(20) SETA 14
&VIREGSA(21) SETA 15
&VIREGSA(22) SETA 16
&A       SETA  0
&B       SETA  0
.START   AIF   ('&LABEL' EQ '').LOOPX
&LABEL   DS    0H
.LOOPX   ANOP
         AIF   (N'&SYSLIST NE 0).LOOP
.LX      ANOP
&A       SETA  &A+1
&VIREGS(&A) SETA &A
         AIF   (&A NE 16).LX
         AGO   .END
.LOOP    ANOP
&C       SETA  0
&A       SETA  &A+1
&D       SETA  N'&SYSLIST(&A)
         AIF   ('&SYSLIST(&A)' EQ '').END
         AIF   (T'&SYSLIST(&A) EQ 'N').SELFDEF
         AIF   ('&SYSLIST(&A)'(1,1) GE '0').SELFDEF
         AIF   (N'&SYSLIST(&A) GT 1).ALIGN
.L3      AIF   (&C EQ 16).NOREG
&C       SETA  &C+1
         AIF   (&VIREGS(&C) NE 0).L3
         AGO   .L25
.ALIGN   AIF   (&C EQ 16).NOREG
&C       SETA  &C+1
         AIF   (&VIREGS(&C) NE 0).ALIGN
&B       SETA  &C/2
&B       SETA  &B+&B
         AIF   (&C EQ &B).ALIGN
.AA      ANOP
&D       SETA  &D-1
         AIF   (&D EQ 0).GOTTEM
&C       SETA  &C+1
         AIF   (&C GT 16).NOREG
         AIF   (&VIREGS(&C) NE 0).ALIGN
         AGO   .AA
.GOTTEM  ANOP
&C       SETA  &B+1
.L25     ANOP
&D       SETA  1
.B0      ANOP
         AIF   ('&SYSLIST(&A,&D)'(1,1) GE '0').BADMID
         AIF   (T'&SYSLIST(&A,&D) EQ 'N').BADMID
&B       SETA  0
.L2      ANOP
&B       SETA  &B+1
         AIF   (&B GT 256).NOMORE
         AIF   ('&SYSLIST(&A,&D)' EQ '&VIREGSE(&B)').WARNA
         AIF   ('&VIREGSE(&B)' NE '').L2
&VIREGSE(&B) SETC '&SYSLIST(&A,&D)'
&VIREGSA(&B) SETA &C
&VIREGS(&C) SETA &B
&C       SETA  &C-1
&SYSLIST(&A,&D) EQU R&C
&C       SETA  &C+2
.B4      AIF   (&D EQ N'&SYSLIST(&A)).LOOP
&D       SETA  &D+1
         AGO   .B0
.NOREG   MNOTE 8,'NO REGISTERS AVAILABLE FOR &SYSLIST(&A)'
         AGO   .LOOP
.NOMORE  MNOTE 8,'NO VIRTUAL REG AVAILABLE FOR &SYSLIST(&A,&D)'
         AGO   .B4
.WARNA   ANOP
&E       SETA  &VIREGSA(&B)-1
         AIF   (&VIREGS(&VIREGSA(&B)) EQ &B).BX
         AIF   (&VIREGS(&VIREGSA(&B)) EQ 0).BY
&E       SETA  &E+1
 MNOTE 8,'&SYSLIST(&A,&D) R&E IS NOW ASSIGNED TO &VIREGSE(&VIREGS(&E))'
         AGO   .B4
.BX      ANOP
         MNOTE 0,'&SYSLIST(&A,&D) ALREADY ASSIGNED TO R&VIREGSA(&E)'
         AGO   .B4
.BY      ANOP
&VIREGS(&VIREGSA(&B))  SETA &B
         AGO   .B4
.SELFDEF ANOP
&C       SETA  &SYSLIST(&A)
         AIF   (&C GT 15).NGSLF
&C       SETA  &C+1
         AIF   (&VIREGS(&C) EQ 0).OK
&E       SETA  &VIREGS(&C)
         MNOTE 8,'REG &SYSLIST(&A) IS ASSIGNED TO &VIREGSE(&E)'
         AGO   .LOOP
.OK      ANOP
&VIREGS(&C) SETA &SYSLIST(&A)+1
         AGO   .LOOP
.NGSLF   MNOTE 8,'&SYSLIST(&A) IS AN INVALID REGISTER'
         AGO   .LOOP
.BADMID  MNOTE 8,'SELF DEFINING REG NOT PERMITTED IN ALIGNMENT'
&B       SETA  0
         AGO   .L2
.END     MEND
         MACRO
&LABEL   FREG
         GBLB  &VIREGSZ
         GBLA  &VIREGSA(256),&VIREGS(16)
         GBLC  &VIREGSE(256)
         LCLA  &A,&B,&C
         AIF   (&VIREGSZ).X22
         AGO   .XXX
.X22     ANOP
**********************************************************************
         DUMPR
**********************************************************************
.XXX     ANOP
         AIF   ('&LABEL' EQ '').NOL
&LABEL   DS    0H
.NOL     AIF   ('&VIREGSE(16)' EQ 'R15').STARTX
         MNOTE 0,'FREG AND SREG  MAY NOT PRECEED GREG, LREG OR PBEG'
         MEXIT
.STARTX  AIF   (N'&SYSLIST NE 0).START
&A       SETA  4
.SX      ANOP
&A       SETA  &A+1
&VIREGS(&A) SETA 0
         AIF   (&A NE 13).SX
         AGO   .END
.START   ANOP
&A       SETA  0
.LOOP    ANOP
&B       SETA  0
&A       SETA  &A+1
         AIF   ('&SYSLIST(&A)' EQ '').END
         AIF   (T'&SYSLIST(&A) NE 'N').FIND
&B       SETA  &SYSLIST(&A)
         AIF   (&B LT 16).DD
         MNOTE 0,'&SYSLIST(&A) IS AN INVALID REGISTER'
         AGO   .LOOP
.DD      ANOP
&B       SETA  &B+1
         AIF   (&VIREGS(&B) EQ 0).NOU
&VIREGS(&B) SETA 0
         AGO   .LOOP
.NOU     MNOTE 0,'&SYSLIST(&A) IS NOT CURRENTLY USED'
         AGO   .LOOP
.FIND    ANOP
&B       SETA  &B+1
         AIF   ('&VIREGSE(&B)' EQ '').NOR
         AIF   ('&VIREGSE(&B)' NE '&SYSLIST(&A)').FIND
         AIF   (&VIREGS(&VIREGSA(&B)) EQ 0).UNUSED
         AIF   (&VIREGS(&VIREGSA(&B)) EQ &B).FOK
&C       SETA  &VIREGSA(&B)-1
 MNOTE '&SYSLIST(&A) = R&C ASSIGNED TO &VIREGSE(&VIREGS(&VIREGSA(&B)))'
         AGO   .LOOP
.FOK     ANOP
&VIREGS(&VIREGSA(&B)) SETA 0
         AGO   .LOOP
.NOR     MNOTE 0,'&SYSLIST(&A) NOT ASSIGNED'
         AGO   .LOOP
.UNUSED  ANOP
&B       SETA  &VIREGSA(&B)
&B       SETA  &B-1
         MNOTE 0,'&SYSLIST(&A) = R&B IS NOT CURRENTLY USED'
         AGO   .LOOP
.END     MEND
         PRINT ON                                                    SL
VTAMCHK  BEGIN 'START VTAM APPLS AFTER VTAM INIT VER 1.1 &SYSDATE ',R=0
         LA    R12,SYSIN          GET DCB ADDRESS FOR ADDRESABILITY
         USING IHADCB,R12         USE SYMBOLIC REFS FOR DCB
         MODESET KEY=ZERO         GET PROTECT KEY ZERO FOR SVC 34
         L     R1,16              POINTER TO CVT
         L     R1,0(R1)           POINTER TO NEXT/CURRENT TCB
         L     R1,4(R1)           POINTER TO OUR TCB
         L     R1,12(R1)          POINTER TO TIOT
         LA    R1,24(R1)          POINT TO FIRST DD ENTRY
         SLR   R0,R0              CLEAR ENTRY LENGTH REGISTER
A00100   DS    0H
         ALR   R1,R0              POINT TO NEXT DD ENTRY
         IC    R0,0(R1)           GET LENGTH OF THIS ENTRY
         LTR   R0,R0              IS THIS END OF TIOT
         BNP   A00200             YES - SYSIN DD CARD IS NOT PRESENT
         CLC   DCBDDNAM,4(R1)     IS IT ENTRY FOR SYSIN
         BNE   A00100             NO - CONTINUE SCAN OF TIOT
         OPEN  (SYSIN,(INPUT))    OPEN SYSIN FILE
         TM    DCBOFLGS,DCBOFOPN  WAS OPEN SUCCESSFUL
         BO    A00140             YES - CONTINUE
         WTO   'VTAMCHK01I - OPEN FAILED FOR DDNAME SYSIN'
         MVI   RCODE+1,12         SET RETURN CODE TO TWELVE
         B     A02000             DO NOT CONTINUE
A00140   DS    0H
         TM    FLAG1,BADRECFM     IS RECFM OK
         BZ    A00160             YES, CONTINUE
         WTO   'VTAMCHK03I - SYSIN RECFM MUST BE FIXED OR FIXED BLOCK'
         MVI   RCODE+1,12         SET RETURN CODE TO TWELVE
         B     A02000             DO NOT CONTINUE
A00160   DS    0H
         TM    FLAG1,BADLRECL     IS LRECL OK
         BZ    A00180             YES, CONTINUE
         WTO   'VTAMCHK04I - SYSIN LRECL SIZE MUST BE 140 OR LESS'
         MVI   RCODE+1,12         SET RETURN CODE TO TWELVE
         B     A02000             DO NOT CONTINUE
A00180   DS    0H
         LH    R15,DCBLRECL       GET THE LRECL LENGTH
         SH    R15,HNINE          SUBTRACT 9 FOR ASSUMED SEQ NUMS
         STH   R15,CMDCOLS        SET DEFAULT COMMAND COLUMN LENGTH
         LA    R4,36              36 X ACBWAIT (5 SEC) = 3 MIN TOTAL
A00184   DS    0H
         OPEN  VTAMACB            ISSUE OPEN ACB TO SEE IF VTAM ACTIVE
         LTR   R15,R15            IS OPEN ACB GOOD (VTAM IS ACTIVE)
         BZ    A00196             YES, GO ISSUE SPECIFIED COMMANDS
         CH    R15,HEIGHT         IS RETURN CODE GREATER THAN 8
         BE    A00186             NO, CHECK ACB FOR ERROR CONDITIONS
         WTO   'VTAMCHK20I - DISASTEROUS OPEN ACB FAILURE'
         ABEND 100,DUMP
A00186   DS    0H
         SHOWCB ACB=VTAMACB,FIELDS=ERROR,AREA=ACBERROR,LENGTH=4,AM=VTAM
         CLI   ACBERROR+3,92      IS VTAM INACTIVE
         BE    A00190             YES, GO WAIT THEN TRY AGAIN
         CLI   ACBERROR+3,90      IS APPLID INACTIVE
         BE    A00188             YES, GO WAIT THEN TRY AGAIN
         CLI   ACBERROR+3,20      IS THERE A TEMPORARY STORAGE SHORTAGE
         BE    A00190             YES, GO WAIT THEN TRY AGAIN
         CLI   ACBERROR+3,82      IS VTAM STOPPING
         BE    A00190             YES, GO WAIT THEN TRY AGAIN
         CLI   ACBERROR+3,88      IS VTAMCHK ACB ALREADY OPEN
         BE    A00190             YES, GO WAIT THEN TRY AGAIN
         CLI   ACBERROR+3,188     IS VTAMCHK ACB OPENING/CLOSING
         BE    A00190             YES, GO WAIT THEN TRY AGAIN
A00187   DS    0H
         SLR   R1,R1              CLEAR REGISTER 1 FOR INSERT
         IC    R1,ACBERROR+3      INSERT FOR CONVERSION
         CVD   R1,DOUBLE          CONVERT ERROR FIELD TO PACKED DECIMAL
         UNPK  MSG21ERR,DOUBLE+6(2) UNPACK ERROR FOR MESSAGE
         OI    MSG21ERR+2,X'F0'   FIX THE SIGN BYTE
         LA    R1,MSG21           POINT TO MESSAGE
         WTO   MF=(E,(R1))        ISSUE THE MESSAGE
         ABEND 200                TERMINATE PROCESSING
A00188   DS    0H
         BCT   R5,A00190          CONTINUE IF COUNT ALLOWS
         B     A00187             DON'T WAIT ANY MORE
A00190   DS    0H
         STIMER WAIT,BINTVL=ACBWAIT  WAIT FOR SPECIFIED TIME
         B     A00184             TRY TO OPEN THE ACB AGAIN
A00196   DS    0H
         CLOSE (VTAMACB)          FINISHED WITH VTAM
A00200   DS    0H
         L     R1,0(R3)           GET POINTER TO COMMAND LIST
         LH    R0,0(R1)           GET LENGTH OF COMMAND LIST
         LTR   R0,R0              ARE THERE ANY MORE COMMANDS IN LIST
         BNP   A01800             NO - GO CHECK FOR MORE SYSIN CARDS
         MVI   CMDSTART,C' '      INITIALIZE TO BLANK
         MVC   CMDAREA,CMDSTART   CLEAR THE COMMAND WORK AREA
         SLR   R4,R4              CLEAR THE COMMAND LENGTH REGISTER
         LA    R5,2(R1)           POINT TO START OF COMMAND
A00300   DS    0H
         CLI   0(R5),C';'         IS IT SEMICOLON (COMMAND SEPERATOR)
         BNE   A00400             NO - GO CHECK NEXT CHARACTER
         LA    R5,1(R5)           POINT PAST THE SEMICOLON
         BCTR  R0,0               SUBTRACT LENGTH OF SEMICOLON
         CLI   0(R5),C';'         SECOND SEMICOLON MEANS NON CMD SEP
         BNE   A00500             IF NOT, GO TERMINATE THIS COMMAND
         LA    R4,1(R4)           ADD ONE TO LENGTH FOR PREVIOUS SEMI
         LR    R15,R0             GET TOTAL LENGTH OF STRING
         SR    R15,R4             SUBTRACT LENGTH SO FAR
         LTR   R15,R15            IS ANYTHING LEFT TO MOVE
         BNP   A00500             NO, GO ISSUE THIS COMMAND
         BCTR  R15,R0             GET LENGTH CODE FOR MOVE
         EX    R15,MOVESEMI       REMOVE SECOND SEMICOLON
         B     A00300             CONTINUE SCAN
A00400   DS    0H
         LA    R4,1(R4)           ADD ONE TO LENGTH OF THIS COMMAND
         LA    R5,1(R5)           POINT TO NEXT CHARACTER IN LIST
         CLR   R0,R4              WAS THAT LAST CHARACTER IN LIST
         BH    A00300             NO - CONTINUE SCAN FOR SEMICOLON
A00500   DS    0H
         SLR   R0,R4              SUBTRACT COMMAND LENGTH FROM TOTAL
         STH   R0,0(R1)           SAVE NEW TOTAL BACK IN PARM LIST
         LTR   R4,R4              IS COMMAND LENGTH GREATER THAN ZERO
         BNP   A00600             NO - DO NOT TRY TO MOVE IT
         CH    R4,H130            IS LENGTH GREATER THAN MAX
         BNH   A00550             NO, GO MOVE IT TO CMD ISSUE AREA
         WTO   'VTAMCHK05I - COMMAND NOT ISSUED, LENGTH >130'
         MVI   RCODE+1,4          SET RETURN CODE TO 4
         SLR   R4,R4              SET COMMAND LENGTH TO ZERO
         B     A00600             GO ISSUE NULL COMMAND
A00550   DS    0H
         BCTR  R4,0               DECREMENT TO GET LENGTH CODE
         EX    R4,MOVECMD         MOVE COMMAND FROM LIST TO WORK AREA
A00600   DS    0H
         LA    R4,6(R4)           SET TOTAL LENGTH OF COMMAND
         STH   R4,CMDLEN          SAVE IN LENGTH WORK AREA
         LTR   R4,R0              ARE THERE ANY MORE COMMANDS IN LIST
         BNP   A00700             NO - DO NOT TRY TO MOVE IT
         BCTR  R4,0               DECREMENT TO GET LENGTH CODE
         EX    R4,MOVELIST        SHIFT REMAINING COMMAND(S) IN LIST
A00700   DS    0H
         CLC   CMDAREA(6),DELAY   IS A COMMAND DELAY TIME SPECIFIED
         BNE   A01200             NO, GO ISSUE OPERATOR COMMAND
         SLR   R4,R4              CLEAR LENGTH COUNTER
         LA    R5,CMDAREA+6       POINT TO START OF DELAY OPERAND
         LA    R6,4               SET FOR LOOP CNTL - MAX OF 3 DIGITS
A00800   DS    0H
         TM    0(R5),X'F0'        IS IT A NUMERIC DIGIT
         BO    A01000             YES, CONTINUE
         CLI   0(R5),C' '         ARE WE AT END
         BE    A01100             YES, GET OUT OF LOOP
A00900   DS    0H
         WTO   'VTAMCHK02I - INVALID DELAY OPERAND SPECIFIED'
         MVI   RCODE+1,8          SET BAD RETURN CODE
         TM    DCBOFLGS,DCBOFOPN  IS SYSIN FILE OPEN
         BO    A01900             YES, GO CLOSE IT
         B     A02000             NO, DO NOT CLOSE IT
A01000   DS    0H
         LA    R4,1(R4)           INCREMENT LENGTH COUNTER
         LA    R5,1(R5)           BUMP OPERAND POINTER
         BCT   R6,A00800          CONTINUE CHECK FOR 3 DIGITS
         B     A00900               - THEN INVALID OPERAND
A01100   DS    0H
         LTR   R4,R4              IS LENGTH COUNTER ZERO
         BZ    A00900             YES, OPERAND IS INVALID
         BCTR  R4,R0              DECREMENT TO GET LENGTH CODE
         EX    R4,PKDELAY         PACK THE DELAY TIME
         CVB   R6,DOUBLE          CONVERT DELAY TIME TO BINARY
         MH    R6,HTEN            CONVERT 10THS TO 100THS OF SECONDS
         ST    R6,DELAYTM         SAVE DELAY TIME FOR STIMER
         OI    FLAG1,DELAYSW      INDICATE WE HAVE A DELAY TIME
         B     A00200             GO CHECK FOR MORE COMMANDS
A01200   DS    0H
         CLC   CMDAREA(4),COL     IS A CARD COLUMN FOR CMDS SPECIFIED
         BNE   A01700             NO, GO ISSUE OPERATOR COMMAND
         SLR   R4,R4              CLEAR LENGTH COUNTER
         LA    R5,CMDAREA+4       POINT TO START OF COLUMN OPERAND
         LA    R6,4               SET FOR LOOP CNTL - MAX OF 3 DIGITS
A01300   DS    0H
         TM    0(R5),X'F0'        IS IT A NUMERIC DIGIT
         BO    A01500             YES, CONTINUE
         CLI   0(R5),C' '         ARE WE AT END
         BE    A01600             YES, GET OUT OF LOOP
A01400   DS    0H
         WTO   'VTAMCHK02I - INVALID COL OPERAND SPECIFIED'
         MVI   RCODE+1,8          SET BAD RETURN CODE
         TM    DCBOFLGS,DCBOFOPN  IS SYSIN FILE OPEN
         BO    A01900             YES, GO CLOSE IT
         B     A02000             NO, DO NOT CLOSE IT
A01500   DS    0H
         LA    R4,1(R4)           INCREMENT LENGTH COUNTER
         LA    R5,1(R5)           BUMP OPERAND POINTER
         BCT   R6,A01300          CONTINUE CHECK FOR 3 DIGITS
         B     A01400               - THEN INVALID OPERAND
A01600   DS    0H
         LTR   R4,R4              IS LENGTH COUNTER ZERO
         BZ    A01400             YES, OPERAND IS INVALID
         BCTR  R4,R0              DECREMENT TO GET LENGTH CODE
         EX    R4,PKCOL           PACK THE COLUMN VALUE
         CVB   R6,DOUBLE          CONVERT COLUMNS TO BINARY
         CH    R6,DCBLRECL        IS COL VALUE MORE THAN LRECL LENGTH
         BH    A01400             YES, DO NOT USE IT
         STH   R6,CMDCOLS         SAVE COLLUMNS FOR SYSIN PROCESSING
         B     A00200             GO CHECK FOR MORE COMMANDS
A01700   DS    0H
         SLR   R0,R0              CLEAR MCS REGISTER
         LA    R1,CMDLEN          POINT TO COMMAND
         SVC   34                 ISSUE OPERATOR COMMAND
         TM    FLAG1,DELAYSW      IS A DELAY TIME WANTED BETWEEN CMDS
         BZ    A00200             NO, GO PROCESS THE NEXT COMMAND
         STIMER WAIT,BINTVL=DELAYTM  WAIT FOR APPROPRIATE INTERVAL
         B     A00200             GO SEE IF MORE COMMANDS IN LIST
A01800   DS    0H
         TM    DCBOFLGS,DCBOFOPN  IS SYSIN FILE OPEN
         BZ    A02000             NO - WE ARE ALL DONE
         GET   SYSIN,CARD         READ ANOTHER COMMAND CARD
         MVC   CARDLEN,CMDCOLS    SET THE CARD LIST LENGTH
         LA    R3,CARDPTR         POINT TO CARD PARAMETER LIST
         B     A00200             GO DO IT
A01900   DS    0H
         CLOSE (SYSIN)            CLOSE SYSIN FILE
A02000   DS    0H
         MODESET KEY=NZERO        GET ORIGINAL PROTECT KEY FOR RETURN
         ENDIT RCODE
         EJECT
* OPEN EXIT TO CHECK SYSIN DCB CHARACTERISTICS
*
O00100   DS    0H
         CLI   DCBRECFM,0         IS RECFM=0
         BNE   O00200             NO, GO SEE IF IT IS FIXED LENGTH
         MVI   DCBRECFM,DCBRECF   SET RECFM=F IF NONE SPECIFIED
O00200   DS    0H
         TM    DCBRECFM,DCBRECF   IS RECFM=F
         BO    O00300             YES, CONTINUE
         OI    FLAG1,BADRECFM     SET FLAG TO NOT PROCESS SYSIN
         BR    R14                RETURN FROM OPEN EXIT
O00300   DS    0H
         CLC   DCBLRECL,HZERO     IS LRECL=0
         BNE   O00400             NO, GO SEE IF IT IS TOO LARGE
         MVI   DCBLRECL+1,80      SET DEFAULT LRECL=80
O00400   DS    0H
         CLC   DCBLRECL,H140      IS LRECL GREATER THAN MAX
         BNH   O00500             NO, GO CHECK BLKSIZE
         OI    FLAG1,BADLRECL     SET FLAG TO NOT PROCESS SYSIN
         BR    R14                RETURN FROM OPEN EXIT
O00500   DS    0H
         CLC   DCBBLKSI,HZERO     IS BLKSIZE=0
         BNE   O00600             NO, GO RETURN FROM OPEN EXIT
         MVC   DCBBLKSI,DCBLRECL  SET BLKSIZE=LRECL
O00600   DS    0H
         BR    R14                RETURN FROM OPEN EXIT
         EJECT
*  E X E C E C U T E D   I N S T R U C T I O N S
         SPACE
MOVECMD  MVC   CMDAREA(0),2(R1)   MOVE COMMAND FROM LIST TO WORK AREA
MOVELIST MVC   2(0,R1),0(R5)      SHIFT COMMAND(S) LEFT IN LIST
MOVESEMI MVC   0(0,R5),1(R5)      SHIFT STRING TO DELETE SEMICOLON
PKDELAY  PACK  DOUBLE,CMDAREA+6(0)  PACK DELAY TIME INTO DOUBLE WORD
PKCOL    PACK  DOUBLE,CMDAREA+4(0)  PACK CMD COLUMNS INTO DOUBLE WORD
         EJECT
         PRINT NOGEN
DOUBLE   DC    D'0'               DOUBLE WORD WORK AREA
VTAMACB  ACB   AM=VTAM,APPLID=APPLID
SYSIN    DCB   DSORG=PS,MACRF=GM,DDNAME=SYSIN,EODAD=A01900,            X
               EXLST=OPENEXIT
OPENEXIT DC    0F'0',X'85',AL3(O00100)
ACBWAIT  DC    A(100*5)           WAIT TIME FOR OPEN ACB STIMER (5 SEC)
DELAYTM  DC    F'0'               WAIT TIME FOR COMMAND STIMER
ACBERROR DC    F'0'               SPECIFIC ERROR CODE FOR OPEN ACB FAIL
CMDLEN   DC    AL2(0,0)           COMMAND LENGTH FOR SVC
CMDSTART DC    C' '               START OF COMMAND MUST BE BLANK
CMDAREA  DC    CL131' '           ACTUAL START OF COMMAND
CMDCOLS  DC    H'71'              DEFAULT LENGTH OF SYSIN CARD LIST
HZERO    DC    H'0'               HALFWORD OF ZERO
HEIGHT   DC    H'8'               HALFWORD OF EIGHT
HNINE    DC    H'9'               HALFWORD OF NINE
HTEN     DC    H'10'              HALFWORD OF TEN
H130     DC    H'130'             HALFWORD OF ONE HUNDRED THIRTY
H140     DC    H'140'             HALFWORD OF ONE HUNDRED FOURTY
CARDPTR  DC    A(CARDLEN)         POINTER TO SYSIN CARD PARAMETER LIST
CARDLEN  DC    H'0'               LENGTH OF SYSIN CARD LIST
CARD     DC    CL140' '           SYSIN CARD WORK AREA
COL      DC    C'COL='            COL PARM COMPARATOR
DELAY    DC    C'DELAY='          DELAY PARM COMPARATOR
APPLID   DC    AL1(8),CL8'VTAMCHK' VTAM APPLICATION ID
FLAG1    DC    X'00'              GENERAL PURPOSE SWITCHES
DELAYSW  EQU   X'80'              DELAY TIME WANTED BETWEEN COMMANDS
BADRECFM EQU   X'40'              SYSIN RECFM IS NOT F OR FB
BADLRECL EQU   X'20'              SYSIN LRECL IS GREATER THAN 140
MSG21    WTO   'VTAMCHK21I - OPEN ACB FAILURE ERROR CODE: XXX ',MF=L
MSG21ERR EQU   MSG21+46,3
         DCBD  DSORG=PS
         END
