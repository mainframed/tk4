//&SYSUID.DAF JOB (SZTECH),'DAF',
//             CLASS=U,MSGCLASS=X,NOTIFY=&SYSUID.
//JESDS OUTPUT PAGEDEF=LDUP,FORMDEF=LDUP,JESDS=ALL,FORMS=3H25
//ASM     EXEC PGM=ASMA90,PARM='NODECK,OBJ,RENT'
//STEPLIB   DD DISP=SHR,DSN=SYS1.SASMMOD1
//SYSLIB    DD DISP=SHR,DSN=SYS1.MACLIB
//          DD DISP=SHR,DSN=SYS1.AMODGEN
//          DD DISP=SHR,DSN=SYS1.SBDTMAC                  <=== BDT
//          DD DISP=SHR,DSN=SYS1.SEZACMAC                 <=== TCPIP
//          DD DISP=SHR,DSN=SYS1.ICEUSER                  <=== DFSORT
//          DD DISP=SHR,DSN=ZTGP01.MJCUTIL.MACLIB         <=== $COMMON
//SYSUT1    DD UNIT=SYSDA,SPACE=(CYL,(5,5))
//SYSPRINT  DD SYSOUT=*,OUTPUT=*.JESDS
//SYSLIN    DD DSN=&&OBJECT,SPACE=(CYL,(9,9)),UNIT=SYSDA,
//             DISP=(NEW,PASS),
//             DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS)
//SYSIN     DD *
         TITLE 'Dataset Audit Facility (DAF)'
DAF      START 0
**********************************************************************
*                                                                    *
* Name:            Dataset Audit Facility (DAF)                      *
*                                                                    *
* Description:     SMF post processor for dataset activity           *
*                                                                    *
* Function:        Reads standard IBM SMF records, and based upon    *
*                  user supplied selection criteria, generates       *
*                  detailed dataset audit trail reports              *
*                                                                    *
* Installation:    1) DAF PDS contains the following.                *
*                     Member    Type      Contents                   *
*                     ======    ====      ========                   *
*                     $COMMON   ASM/MACRO Common Macros              *
*                     DAF       ASM/JCL   DAF                        *
*                  2) Set the RT_ variables to the correct SMF       *
*                  record type or 000 to indicate not available.     *
*                  3) Assemble and link-edit DAF.  The assembly and  *
*                  linkedit must get a return code of zero.          *
*                  4) To activate certain record types:              *
*                  DFSORT - Add SMF=FULL to ICEAM1/2/3/4             *
*                  RMF - Add CHAN to RMF parms                       *
*                  RMF - Add DEVICE(DASD) to RMF parms               *
*                  RMF - Add ENQ(DETAIL) to RMF parms                *
*                  RMF - Add PAGESP to RMF parms                     *
*                  RMF - Add RECORD to RMF parms                     *
*                  SMF - Add ACTIVE to SMF parms                     *
*                  SMF - Add REC(PERM) to SMF parms                  *
*                  SMF - Record all record types supported by DAF    *
*                  TCPIP - Add SMF STD to the FTPD parms             *
*                  TCPIP - Add SMFCONFIG FTPCLIENT to TCPIP parms    *
*                                                                    *
* Contact:         Michael J. Cleary                                 *
*                  Mainframe Technical Services                      *
*                  Bergen Brunswig                                   *
*                  4000 Metropolitan Drive                           *
*                  Orange, CA  92868                                 *
*                  Voice:  714.385.4052                              *
*                  Fax     714.704.7052                              *
*                  Email:  Michael.Cleary@BergenBrunswig.com         *
*                  http:   www.BergenBrunswig.com                    *
*                                                                    *
* Abend codes:     U0800 - Control Statement Problem                 *
*                  U0801 - System Macro Problem                      *
*                  U0802 - Sort Problem                              *
*                                                                    *
* Addressing mode: 24                                                *
*                                                                    *
* ASC mode:        Primary                                           *
*                                                                    *
* Change Log:                                                        *
*   05/12/99 - Only resolve mask on character keywords (DAFCC)       *
*   05/06/99 - Special DEFRAG DSN (DAF017)                           *
*   04/30/99 - Update the Major Enqueue Table ($COMMON)              *
*   04/29/99 - Update the Major Enqueue Table ($COMMON)              *
*   04/29/99 - Move Major Enqueue Tabble to $COMMON                  *
*   04/23/99 - Only SNAP first 5 invalids of each type (DAFCC)       *
*   04/20/99 - Version 2 Release 6 Modification 0                    *
*   09/24/99 - Add SMF Record Type 42, subtypes 6 & 9                *
*                                                                    *
* Copyright:       None                                              *
*                                                                    *
* Control blocks:  ???                                               *
*                                                                    *
* CSECTs:          ???                                               *
*                                                                    *
* Dependencies:    None                                              *
*                                                                    *
* Disclaimer:      Bergen Brunswig neither expresses nor implies     *
*                  any warranty as to the fitness of these           *
*                  computer programs for any function.  The use      *
*                  of these programs or the results therefrom is     *
*                  entirely at the risk of the user.                 *
*                  Consequently, the user may modify these           *
*                  programs in any way they thinks fit.  These       *
*                  programs are Freeware and may be freely           *
*                  copied.  They may be freely distributed to any    *
*                  other party on condition that no inducement       *
*                  beyond reasonable handling costs is offered or    *
*                  accepted by either side for such distribution.    *
*                                                                    *
* DSECTs:          ???                                               *
*                                                                    *
* Entry points:    DAF                                               *
*                                                                    *
* Environment:     Any supported level of MVS                        *
*                                                                    *
* Execution JCL:                                                     *
*                                                                    *
* //&SYSUID.$DAF JOB (DAF),'DAF',CLASS=U,                            *
* // MSGCLASS=X,MSGLEVEL=(1,1),NOTIFY=&SYSUID.                       *
* //JESDS OUTPUT PAGEDEF=LDUP,FORMDEF=LDUP,JESDS=ALL,FORMS=3H25      *
* //DAF    EXEC PGM=DAF                                              *
* //STEPLIB  DD DISP=SHR,DSN=ZTGP01.MJCUTIL.LINKLIB                  *
* //DAFSMF   DD DISP=SHR,DSN=ZTGP01.DAF.IVP                          *
* //DAFLOG   DD SYSOUT=*,OUTPUT=*.JESDS                              *
* //DAFRPT   DD SYSOUT=*,OUTPUT=*.JESDS                              *
* //DAFSNAP  DD SYSOUT=*,OUTPUT=*.JESDS                              *
* //DAFSTAT  DD SYSOUT=*,OUTPUT=*.JESDS                              *
* //DAFTRACE DD SYSOUT=*,OUTPUT=*.JESDS                              *
* //SYSPRINT DD SYSOUT=*,OUTPUT=*.JESDS                              *
* //SYSUDUMP DD SYSOUT=*,OUTPUT=*.JESDS                              *
* //SYSOUT   DD SYSOUT=*,OUTPUT=*.JESDS                              *
* //SORTIN   DD UNIT=SYSDA,SPACE=(CYL,(555,55))                      *
* //SORTOUT  DD UNIT=SYSDA,SPACE=(CYL,(555,55))                      *
* //DAFCS    DD *                                                    *
*   (control statements go here)                                     *
* keyword operator value                                             *
*                                                                    *
*                                                                    *
* Keyword Type    Length Description               Alias             *
* ======= ====    ====== ===========               =====             *
* CATALOG DATASET   44   Catalog name              CAT               *
* DSNAME  GENERAL   44   Dataset name              DSN               *
* DATE    GENERAL   07   Date (YYYYDDD)                              *
* DDNAME  DATASET   08   Data definition name      DDN               *
* EXCP    GENERAL   16   Execute Channel Program                     *
* GROUP   GENERAL   08   Group Identification                        *
* JOB     GENERAL   08   Job name                  JOBNAME           *
* LRECL   GENERAL   05   Logical Record Length                       *
* MAJOR   ENQUEUE   08   Major enqueue name                          *
* MEMBER  DATASET   08   Member name                                 *
* MINOR   ENQUEUE   44   Minor enqueue name                          *
* RECORD  GENERAL   03   Record type                                 *
* SYSTEM  GENERAL   04   System identification                       *
* TIME    GENERAL   11   Time - HH.MM.SS.HH                          *
* USER    GENERAL   08   User identification       USERID            *
* VOLUME  GENERAL   06   Volume serial             VOLSER            *
* VVDS    DATASET   44   VSAM volume dataset name                    *
* WTX     GENERAL   04   Wait Time Max                               *
*                                                                    *
* Operator      Description                                          *
* ========      ===========                                          *
* EQ            Equal to                                             *
* GE            Greater than or equal to                             *
* GT            Greater than                                         *
* LE            Less than or equal to                                *
* LT            Less than                                            *
* NE            Not equal to                                         *
*                                                                    *
* Examples:                                                          *
*                                                                    *
* To find all dataset accesses by all D72 prefixed jobs              *
* DSN EQ SYS1                                                        *
* JOB EQ D72                                                         *
*                                                                    *
* Input:           Control statements on DD "DAFCS"                  *
*                  SMF records on DD "DAFSMF" (QSAM or VSAM)         *
*                                                                    *
* Key:             8                                                 *
*                                                                    *
* Language:        MVS 370 assembler                                 *
*                                                                    *
* Linkage:         Standard linkage for entry/exit                   *
*                                                                    *
* Location:        Private                                           *
*                                                                    *
* Macros:                                                            *
*   Name     Usage Description                                       *
*   ======== ===== ===========                                       *
*   $COMP     - Compare table definition                             *
*   $KWD      - Keyword table definition                             *
*   $MOD      - Module table definition                              *
*   $MSG      - Copy SYSOUT Message                                  *
*   $OP       - Operator table definition                            *
*   $PRINT    - Print a record                                       *
*   $SMF      - SMF table definition                                 *
*   $TM       - TM table definition                                  *
*   $COMMON  1 2   Common Macros                                     *
*   CALL     1 2   Pass Control to a Control Section                 *
*   DELETE   1     Relinquish Control of a Load Module               *
*   LOAD     1     Bring a Load Module into Virtual Storage          *
*   MAJORTBL 1     Major Enqueue Description Table                   *
*   RETURN   1     Return Control                                    *
*   SAVE     1     Save Register Contents                            *
*   SPLEVEL  1     Set Macro Level                                   *
*   STORAGE  1 2   Obtain and Release Storage                        *
*   ABEND     - Abnormally terminate a task                          *
*   BDTDSMF   - Map SMF record (BDT)                                 *
*   CALL      - Pass Control to a Control Section                    *
*   CLOSE     - Disconnect program and data (GUPI)                   *
*   DCB       - Construct a data control block (GUPI)                *
*   DCBD      - Map data control block (GUPI)                        *
*   ERBSMFR   - Map SMF records (RMF)                                *
*   ESTAE     - Extended Specify Task Abnormal Exit                  *
*   EZASMF76  - Map SMF records (TCPIP)                              *
*   GENCB     - Generate control block (GUPI)                        *
*   GET       - Obtain next logical record (GUPI)                    *
*   IAZSMFR   - Map SMF records (JES2)                               *
*   IAZSMFnn  - Map SMF records (JES2: 24)                           *
*   ICESMF    - Map SMF records (DFSORT: 16)                         *
*   IDASMFnn  - Map SMF records (DFP: 62,64)                         *
*   IEFJFCBN  - Map JFCB                                             *
*   IFASMFI6  - Map SMF records (DFP: 36,60,61,65,66) (GUPI)         *
*   IFASMFR   - Map SMF records                                      *
*   IFGSMFnn  - Map SMF records (DFP: 14)                            *
*   IGGSMFnn  - Map SMF records (DFP: 17-18,63,67-69)                *
*   IGWSMF    - Map SMF records (DFP: 42)                            *
*   IOSDSMFR  - Map SMF record 22 Subtype 9 I/O Config Change Elemnt *
*   LINK      - Pass control to a program in another load module     *
*   OPEN      - Connect program and data (GUPI)                      *
*   PUT       - Write next logical record (GUPI)                     *
*   RDJFCB    - Read JFCB (GUPI)                                     *
*   RETURN    - Return Control                                       *
*   SAVE      - Save Register Contents                               *
*   SETRP     - Set Return Parameters                                *
*   SPLEVEL   - Set Macro Level                                      *
*   SNAP      - Dump Virtual Storage and Continue                    *
*   TIME      - Obtain time and date                                 *
*   WTO       - Write to operator                                    *
*                  Usage:    1 = Common Macros, 2 = DAF              *
*                                                                    *
* Messages:        DAF5xx - Informational                            *
*                  DAF6xx - Trace                                    *
*                  DAF7xx - Errors (Return Code)                     *
*                  DAF8xx - Errors (User Abend)                      *
*                  DAF9xx - System Error                             *
*                                                                    *
* Mode:            Task                                              *
*                                                                    *
* Module type:     Procedure                                         *
*                                                                    *
* Output:          Log on DD "DAFLOG"                                *
*                  Report on DD "DAFRPT"                             *
*                  Invalid SMF records on DD "DAFSNAP"               *
*                  Statistics on DD "DAFSTAT"                        *
*                  Trace on DD "DAFTRACE" (optional)                 *
*                                                                    *
* Parameter list:  Pointed to by R1                                  *
*                  . 00(R1) - Parameter Length                       *
*                  . 02(R1) - Parameter                              *
*                                                                    *
* Patch label:     None                                              *
*                                                                    *
* Reason codes:    None                                              *
*                                                                    *
* Recovery:        None                                              *
*                                                                    *
* Reentrancy:      Reentrant                                         *
*                                                                    *
* Registers:       Saved:         0-12,14-15 via SAVE(14,12)         *
*                  Restored:      0-12,14 via RETURN(14,12),RC=(15)  *
*                  Base:          11/12                              *
*                  Dynamic work:  10                                 *
*                  Static work:   9                                  *
*                                                                    *
*  Multiple Report Records:                                          *
*  16 - Input DSN / SORTOUT DSN / OUTFIL DSN                         *
*  18 - DSN Before Rename / DSN After Rename                         *
*  36 - Catalog DSN / Portable DSN                                   *
*  42 - ACDS DSN / SCDS DSN                                          *
*  59 - Origin DSN / Destination DSN                                 *
*  66 - DSN Before Rename / DSN After Rename                         *
*  68 - DSN Before Rename / DSN After Rename                         *
*  81 - UADS DSN / Active_RACF DSN / Backup_RACF DSN                 *
*  82 - DSN Before Refresh / DSN After Refresh                       *
*  90 - SMF DSN Before Switch / SMF DSN After Switch                 *
* 170 - DSN / Audit DSN / Layout DSN / XREF DSN / Selection Crit DSN *
*                                                                    *
*                                                                    *
* Return codes:    00 - Normal                                       *
*                  04 - No DAFSMF Records Selected                   *
*                  08 - Control Statement Problem                    *
*                                                                    *
* Residence mode:  24                                                *
*                                                                    *
* Savearea:        Dynamically obtained storage                      *
*                                                                    *
* Serialization:   None                                              *
*                                                                    *
* Size:            Approximately 33KB                                *
*                                                                    *
* Supported SMF Records:                                             *
*                                                                    *
*   014 - INPUT or RDBACK Data Set Activity                          *
*   015 - OUTPUT  UPDAT  INOUT or OUTIN Data Set Activity            *
*   016 - DFSORT Statistics                                          *
*   017 - Scratch Data Set Status                                    *
*   018 - Rename Data Set Status                                     *
*   022 - Configuration                                              *
*   024 - JES2 Spool Offload                                         *
*   036 - Integrated Catalog Facility Catalog                        *
*   042 - DFSMS Statistics and Configuration                         *
*   059 - MVS/BDT File-to-File Transmission                          *
*   060 - VSAM Volume Data Set Updated                               *
*   061 - Integrated Catalog Facility Define Activity                *
*   062 - VSAM Component or Cluster Opened                           *
*   063 - VSAM Catalog Entry Defined                                 *
*   064 - VSAM Component or Cluster Status                           *
*   065 - Integrated Catalog Facility Delete Activity                *
*   066 - Integrated Catalog Facility Alter Activity                 *
*   067 - VSAM Catalog Entry Deleted                                 *
*   068 - VSAM Catalog Entry Renamed                                 *
*   069 - VSAM Data Space Defined  Extended or Deleted               *
*   073 - RMF Channel Path Activity                                  *
*   074 - RMF Device/XCF/OMVS/CF/Cache Activity                      *
*   075 - RMF Page/Swap Data Set Activity                            *
*   077 - RMF Enqueue Activity                                       *
*   080 - RACF Processing                                            *
*   081 - RACF Initialization                                        *
*   082 - ICSF/MVS Record                                            *
*   083 - RACF Audit Record for Data Sets                            *
*   090 - System Status                                              *
*   092 - USS File System Activity                                   *
*   118 - TCPIP Statistics                                           *
*   170 - File-AID                                                   *
*   201 - SRS                                                        *
*   241 - DFHSM                                                      *
*                                                                    *
* State:           Problem                                           *
*                                                                    *
* Status:          Version 1 Release 0 Modification 0                *
*                                                                    *
* Tables:          None                                              *
*                                                                    *
* User Exits:      None                                              *
*                                                                    *
* Virtual Storage: Minimal                                           *
*                                                                    *
* Wait states:     None                                              *
*                                                                    *
* X-memory mode:   HASID=PASID=SASID                                 *
*                                                                    *
**********************************************************************
         TITLE '$COMMON - Common Macros'
**********************************************************************
         PRINT OFF                 Stop source and object printing
         COPY  $COMMON             Common Macros
         PRINT ON                  Resume source and object printing
         MACRO
**********************************************************************
*        Macro Name:     $COMP                                       *
*        Operation:      Compare Table Definition                    *
*        Usage:                                                      *
**********************************************************************
         $COMP &V,                 Compare Value                       X
               &T,                 Compare Text                        X
               &LABEL=,            Compare Label                       X
               &LENGTH=,           Compare Length                      X
               &TYPE=ADD           INIT/ADD/BUILD
         GBLA  &GCOMPCTR           Compare Counter
         GBLC  &GCOMPTXT(250)      Compare Text
         GBLC  &GCOMPVAL(250)      Compare Value
         LCLA  &TMPCTR             Local variable - Temporary Counter
         LCLA  &TMPLEN             Local variable - Temporary Length
         LCLC  &TMPVAL             Local variable - Temporary Value
         LCLC  &TMPTXT             Local variable - Temporary Text
         AIF   ('&TYPE' EQ 'INIT').INIT,                               X
               ('&TYPE' EQ 'ADD').ADD,                                 X
               ('&TYPE' EQ 'BUILD').BUILD
         MNOTE 8,'Invalid TYPE=&TYPE - Use INIT, ADD or BUILD'
         MEXIT
.INIT    ANOP
&GCOMPCTR SETA 0
         MEXIT
.ADD     ANOP
&GCOMPCTR SETA &GCOMPCTR+1
&GCOMPVAL(&GCOMPCTR) SETC '&V'
&GCOMPTXT(&GCOMPCTR) SETC '&T'
         MEXIT
.BUILD   ANOP
&TMPLEN  SETA  46-&LENGTH
         DC    F'&LENGTH'          Compare Length
         DC    F'&GCOMPCTR'        Compare Count
         DC    C'&LABEL='          Compare Label
&TMPCTR  SETA  1
.NEXTCOMP ANOP
         AIF   (&TMPCTR GT &GCOMPCTR).ENDCOMP
&TMPVAL  SETC  '&GCOMPVAL(&TMPCTR)'
&TMPTXT  SETC  '&GCOMPTXT(&TMPCTR)'
         DC    &TMPVAL             Compare Value
         DC    CL&TMPLEN&TMPTXT    Compare Text
&TMPCTR  SETA  &TMPCTR+1
         AGO   .NEXTCOMP
.ENDCOMP ANOP
         MEND
         MACRO
**********************************************************************
*        Macro Name:     $KWD                                        *
*        Operation:      Keyword Table Definition                    *
*        Usage:                                                      *
**********************************************************************
&LABEL   $KWD &V,&T=,&LENGTH=,                                         X
               &O1=,&O2=0,&O3=0,&O4=0,&O5=0,&O6=0,&O7=0,               X
               &O8=0,&O9=0,&OA=0,&OB=0,&OC=0,&OD=0,&OE=0,&OF=0,&D=0,   X
               &C=100,                                                 X
               &FORMAT=,                                               X
               &ALIAS1=,&ALIAS2=,&ALIAS3=,&ALIAS4=,&ALIAS5=,           X
               &DSECT=NO           DSECT
         LCLA  &OMC,&VGL
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&FORMAT' EQ 'C').FORMATOK,                            X
               ('&FORMAT' EQ 'F').FORMATOK
         MNOTE 8,'Invalid FORMAT=&FORMAT ... Must be C,F'
         MEXIT
.FORMATOK ANOP
&OMC     SETA  &C+1
&VGL     SETA  (&LENGTH+5)*&C
         DC    6F'0'               Value getmain address
         DC    6F'0'               Operator value count
         DC    A(&O1)              Operand check offset 1
         DC    A(&O2)              Operand check offset 2
         DC    A(&O3)              Operand check offset 3
         DC    A(&O4)              Operand check offset 4
         DC    A(&O5)              Operand check offset 5
         DC    A(&O6)              Operand check offset 6
         DC    A(&O7)              Operand check offset 7
         DC    A(&O8)              Operand check offset 8
         DC    A(&O9)              Operand check offset 9
         DC    A(&OA)              Operand check offset A
         DC    F'0'                Operand check offset end
         DC    H'0'                Operand count
         DC    H'&LENGTH'          Operand max length
         DC    H'&OMC'             Operand max count plus one
         DC    H'&VGL'             Value getmain length
         AIF   ('&T' EQ 'DATASET').TYPE,                               X
               ('&T' EQ 'ENQUEUE').TYPE,                               X
               ('&T' EQ 'GENERAL').TYPE
         MNOTE 8,'Invalid T=&T ... Must be DATASET,GENERAL,RACF,RJE'
         MEXIT
.TYPE    ANOP
         DC    CL07'&T'            Keyword type
         DC    CL10'&V'            Keyword text
         DC    CL30&D              Keyword description
         DC    CL10'&ALIAS1 '      Keyword alias 1
         DC    CL10'&ALIAS2 '      Keyword alias 2
         DC    CL10'&ALIAS3 '      Keyword alias 3
         DC    CL10'&ALIAS4 '      Keyword alias 4
         DC    CL10'&ALIAS5 '      Keyword alias 5
         DC    CL01'&FORMAT'       Keyword mode (C,F)
         CNOP  0,4                 Fullword alignment
         MEXIT
.DSECT   ANOP
**********************************************************************
*        Keyword Table Mapping                                       *
**********************************************************************
D_KWDTBL DSECT                     Keyword table entry
D_KWDVGA DS    6F                  Value getmain address
D_KWDOVC DS    6F                  Operator value count
D_KWDOF1 DS    F                   Operand offset 1
D_KWDOF2 DS    F                   Operand offset 2
D_KWDOF3 DS    F                   Operand offset 3
D_KWDOF4 DS    F                   Operand offset 4
D_KWDOF5 DS    F                   Operand offset 5
D_KWDOF6 DS    F                   Operand offset 6
D_KWDOF7 DS    F                   Operand offset 7
D_KWDOF8 DS    F                   Operand offset 8
D_KWDOF9 DS    F                   Operand offset 9
D_KWDOFA DS    F                   Operand offset A
D_KWDOFF DS    F                   Operand offset end
D_KWDKVC DS    H                   Keyword value count
D_KWDOML DS    H                   Operand maximum length
D_KWDOMC DS    H                   Operand maximum count
D_KWDVGL DS    H                   Value getmain length
D_KWDTYP DS    CL07                Keyword type DATASET,GENERAL,RACF
D_KWDTXT DS    CL10                Keyword text
D_KWDDES DS    CL30                Keyword description
D_KWDAL1 DS    CL10                Keyword alias 1
D_KWDAL2 DS    CL10                Keyword alias 2
D_KWDAL3 DS    CL10                Keyword alias 3
D_KWDAL4 DS    CL10                Keyword alias 4
D_KWDAL5 DS    CL10                Keyword alias 5
D_KWDFMT DS    CL01                Keyword mode (C,F)
         MEND
         MACRO
**********************************************************************
*        Macro Name:     $MOD                                        *
*        Operation:      Module Table Definition                     *
*        Usage:                                                      *
**********************************************************************
&LABEL   $MOD
         GBLA  &GMODCTR            Module count
         GBLC  &GMODNAM(99)        Module Name
         LCLA  &TMPCTR             Temporary count
         LCLC  &TMPNAM             Temporary name
         DC    A(&GMODCTR)         Module count
&TMPCTR  SETA  1
.NEXTMOD ANOP
         AIF   (&TMPCTR GT &GMODCTR).ENDMOD
&TMPNAM  SETC  '&GMODNAM(&TMPCTR)'
         DC    A(&TMPNAM)          Module address
         DC    CL8'&TMPNAM'        Module name
&TMPCTR  SETA  &TMPCTR+1
         AGO   .NEXTMOD
.ENDMOD  ANOP
         MEND
         MACRO
**********************************************************************
*        Macro Name:     $MSG                                        *
*        Operation:      Copy SYSOUT Message                         *
*        Usage:                                                      *
**********************************************************************
&LABEL   $MSG  &TO,&MSGID          Copy SYSOUT Message
&LABEL   L     R15,=A(MSGTBL)      Message table address
         USING MSGTBL,R15          Reference message table
         MVC   &TO,&MSGID          Copy SYSOUT message
         DROP  R15                 Dereference message table
         MEND
         MACRO
**********************************************************************
*        Macro Name:     $OP                                         *
*        Operation:      Operator Table Definition                   *
*        Usage:                                                      *
**********************************************************************
&LABEL   $OP   &O,&L=0,&E=0,&H=0,&DES=Unknown,                         X
               &DSECT=NO           DSECT
         AIF   ('&DSECT' EQ 'YES').DSECT
         GBLA  &GOPCTR             Operator counter
         LCLA  &OPOFF              Operator offset
&OPOFF   SETA  &GOPCTR*4           Determine operator offset
&LABEL   DC    F'&OPOFF'           Operator offset
         DC    X'0&L'              Low
         DC    X'0&E'              Equal
         DC    X'0&H'              High
         DC    CL5'&O'             Operator
         DC    CL32&DES            Operator description
         CNOP  0,4                 Fullword alignment
&GOPCTR  SETA  &GOPCTR+1           Increment operator counter
         MEXIT
.DSECT   ANOP
**********************************************************************
*        Operator Table Mapping                                      *
**********************************************************************
D_OPTBL  DSECT                     Operator table entry
D_OPOFF  DS    F                   Operator offset
D_OPLO   DS    X                   Low
D_OPEQ   DS    X                   Equal
D_OPHI   DS    X                   High
D_OPTXT  DS    CL5                 Operator text
D_OPDES  DS    CL32                Operator description
         MEND
         MACRO
**********************************************************************
*        Macro Name:     $PRINT                                      *
*        Operation:      Print A Record                              *
*        Usage:                                                      *
**********************************************************************
&LABEL   $PRINT &DCB,&RECORD       Print a Record
         LCLC  &ID
&ID      SETC  'W_&DCB'(1,8)
&LABEL   CALL  DAFPP,              Print a Record                      X
               (&ID,&DCB,&RECORD),                                     X
               MF=(E,W_WRK)
         MEND
         MACRO
**********************************************************************
*        Macro Name:     $SMF                                        *
*        Operation:      SMF Table Definition                        *
*        Usage:                                                      *
**********************************************************************
&LABEL   $SMF  &RECORDTYPE,        Record type                         X
               &EXTRACT,           Record extract                      X
               &DESCRIPTION,       Record description                  X
               &DSECT=NO           DSECT
         AIF   ('&DSECT' EQ 'YES').DSECT
         DC    F'0'                Record count (DAFSMF)
         DC    F'0'                Record count (DAFRPT)
         DC    F'0'                Record count - Invalid DSN
         DC    AL1(&RECORDTYPE)    SMF record type - hexadecimal
         DC    CL3'&RECORDTYPE'    SMF record type - decimal
         DC    CL3' - '            SMF record type - separator
         DC    CL58&DESCRIPTION    SMF record description
         DC    A(&EXTRACT)         SMF extract offset
         MEXIT
.DSECT   ANOP
**********************************************************************
*        SMF Table Mapping                                           *
**********************************************************************
D_SMFTBL DSECT                     SMF table entry
D_SMFSMF DS    F                   Record count (DAFSMF)
D_SMFRPT DS    F                   Record count (DAFRPT)
D_SMFINV DS    F                   Record count - Invalid DSN
D_SMFRTY DS    BL1                 SMF Record type - hexadecimal
D_SMFRTD DS    CL3                 SMF Record type - decimal
         DS    CL3                 SMF record type - separator
         ORG   D_SMFRTD            SMF Record type - decimal
D_SMFRNM DS    CL64                SMF record name
D_SMFEXT DS    F                   SMF extract address
L_SMFTBL EQU   *-D_SMFTBL          SMF table entry length
         MEND
         MACRO
**********************************************************************
*        Macro Name:     $TM                                         *
*        Operation:      TM Table Definition                         *
*        Usage:                                                      *
**********************************************************************
&LABEL   $TM   &T
&LABEL   DC    &T                  Text value
         MEND
         GBLA  &GCOMPCTR           Compare Counter
         GBLA  &GMODCTR            Module count
         GBLA  &GMODULE            Module
         GBLA  &GOPCTR             Operator counter
         GBLC  &GCOMPTXT(250)      Compare Text
         GBLC  &GCOMPVAL(250)      Compare Value
         GBLC  &GMODNAM(99)        Module Name
         GBLC  &RT_BDT             BDT Record Type (nnn/000)
         GBLC  &RT_CASORT          CASORT Record Type (nnn/000)
         GBLC  &RT_DFSORT          DFSORT Record Type (nnn/000)
         GBLC  &RT_FILEAID         File-Aid Record Type (nnn/000)
         GBLC  &RT_HSM             HSM Record Type (nnn/000)
         GBLC  &RT_RACF            RACF Record Type (nnn/000)
         GBLC  &RT_RMF             RMF Record Type (nnn/000)
         GBLC  &RT_SRS             SRS Record Type (nnn/000)
         GBLC  &RT_STOPX37         STOPX37 Record Type (nnn/000)
         GBLC  &RT_TCPIP           TCPIP Record Type (nnn/000)
         GBLC  &RT_USS             USS Record Type (nnn/000)
         GBLC  &ST_FTP             FTP Sub Type (nnn/000)
**********************************************************************
*        Installation Customization                                  *
**********************************************************************
&RT_BDT     SETC '059' Default=059 BDT Record Type (nnn/000)
&RT_CASORT  SETC '000' Default=016 CASORT Record Type (nnn/000)
&RT_DFSORT  SETC '016' Default=016 DFSORT Record Type (nnn/000)
&RT_FILEAID SETC '170' Default=170 File-Aid Record Type (nnn/000)
&RT_HSM     SETC '241' Default=241 HSM Record Type (nnn/000)
&RT_RACF    SETC '080' Default=080 RACF Record Type (nnn/000)
&RT_RMF     SETC '073' Default=075 RMF Record Type (nnn/000)
&RT_SRS     SETC '201' Default=201 SRS Record Type (nnn/000)
&RT_STOPX37 SETC '000' Default=000 STOPX37 Record Type (nnn/000)
&RT_TCPIP   SETC '118' Default=118 TCPIP Record Type (nnn/000)
&RT_USS     SETC '092' Default=092 USS Record Type (nnn/000)
&ST_FTP     SETC '076' Default=000 FTP Sub Type (nnn/000)
**********************************************************************
         TITLE 'Map SMF Records'
**********************************************************************
*
**       Map SMF Records
*
D_SMFREC DSECT                     SMF record mapping
SMFXXLEN DS    BL2                 Record Length
SMFXXSEG DS    BL2                 Segment Descriptor
SMFXXFLG DS    BL1                 Header Flag
SMFXXRTY DS    BL1                 Record Type
SMFXXTME DS    BL4                 Record Time
SMFXXDTE DS    PL4                 Record Date
SMFXXSID DS    CL4                 Record System identification
SMFXXSSI DS    CL4                 Record Subsystem identification
SMFXXSTY DS    BL2                 Record Subtype
*        PRINT NOGEN
D_SMFREC DSECT
         ORG   D_SMFREC
         IFASMFR   7               Map SMF Record Type  7
D_SMFREC DSECT
         ORG   D_SMFREC
         IFASMFR  14               Map SMF Record Type 14/15
         ORG   SMFJFCB1
         IEFJFCBN LIST=YES         Map Job File Control Block
         AIF   ('&RT_DFSORT' EQ '000').NODFSORT9
D_SMFREC DSECT
         ORG   D_SMFREC
         ICESMF                    Map SMF Record Type 16
.NODFSORT9 ANOP
         AIF   ('&RT_CASORT' EQ '000').NOCASORT9
D_SMFREC DSECT
         ORG   D_SMFREC
**********************************************************************
*  CA-SORT/MVS 7.1                                                   *
*                                                                    *
*  DSECT MAP FOR CASORT SMF TYPE 16 RECORD                           *
**********************************************************************
*---------------------*
*  SMF HEADER         *
*---------------------*
CASSMFH  DSECT
CASRDW   DS    XL2    RECORD LENGTH
CASSDW   DS    XL2    SEGMENT DESCRIPTER (FOR SPANNED RECORDS)
CASSIND  DS    X      OPERATING SYSTEM FLAGS
CASSUBSY EQU   X'80'  ..SUBSYSTEM ID FOLLOWS SMF HEADER
CASMVSES EQU   X'08'  ..MVS/ESA
CASMVSXA EQU   X'04'  ..MVS/XA
CASMVS37 EQU   X'02'  ..MVS
CASRTYP  DS    X      RECORD TYPE 16 OR 128-255
CASBTIME DS    XL4    TIME REC. WAS MOVED TO SMF BUFF
CASBDATE DS    PL4    DATE REC. WAS MOVED TO SMF BUFF (00YYDDDF)
CASSID   DS    CL4    SYSTEM IDENTIFICATION
CASJOBNM DS    CL8    JOBNAME
CASRST   DS    XL4    TIME READER RECOGNIZED JOBCARD
CASRDS   DS    PL4    DATE READER RECOGNIZED JOBCARD
CASUIF   DS    CL8    USER ID
CASSTN   DS    XL1    STEP NUMBER
CASRES1  DS    XL3    RESERVED
CASSUBID DS    CL4    SUBSYSTEM ID
CASRSUB  DS    XL2    RECORD SUBTYPE
CASRSUBS EQU   X'01'  ..SHORT RECORD
CASRSUBF EQU   X'02'  ..FULL RECORD
CASRSUBU EQU   X'03'  ..SHORT RECORD ON ABEND
CASPROD  DS    F      OFFSET TO PRODUCT SECTION
CASPRODL DS    H      .PRODUCT SECTION LENGTH
CASPRODN DS    H      .NUMBER OF PRODUCT SECTIONS
CASDATA  DS    F      OFFSET TO COMMON DATA SECTION
CASDATAL DS    H      .DATA SECTION LENGTH
CASDATAN DS    H      .NUMBER OF DATA SECTIONS
CASSTAT  DS    F      OFFSET TO STATISTICS SECTION
CASSTATL DS    H      .STATISTICS SECTION LENGTH
CASSTATN DS    H      .NUMBER OF STATISTICS SECTIONS
CASRES1B DS    H      RESERVED
CASSPGN  DS    H      PERFORMANCE GROUP NUMBER
CASUSER  DS    XL24   RESERVED
CASHEND  EQU   *-CASSMFH     END OF SMF HEADER SECTION
*--------------------*
*  PRODUCT SECTION   *
*--------------------*
CASSMFP  DSECT
CASRECV  DS    CL2    '01'
CASPRDCT DS    CL8    'CASORT  '
CASRELNM DS    CL4    CASORT RELEASE NUMBER 'N.N '
CASRES1C DS    XL2    RESERVED
CASPEND  EQU   *-CASSMFP     END OF PRODUCT SECTION
*-----------------------*
*  COMMON DATA SECTION  *
*-----------------------*
CASSMFD  DSECT
CASRES2  DS    CL2    RESERVED
CASSTPNM DS    CL8    STEPNAME
CASRCDS  DS    FL4    NUMBER OF RECORDS SORTED
CASBYTES DS    FL4    NUMBER OF BYTES SORTED
CASCPUT  DS    FL4    SORT CPU TIME, HUNDREDTHS OF A SECOND
CASLEN   DS    H      SORT RECORD LENGTH (L2)
CASIBLK  DS    H      MAXIMUM INPUT BLKSIZE
CASOBLK  DS    H      OUTPUT BLOCKSIZE
CASKEYLN DS    H      TOTAL CONTROL FIELD LENGTH (NUMBER
*                     OF BYTES ACTUALLY COMPARED BY CASORT)
CASWBLK  DS    FL4    NUMBER OF WORK DATA SET TRACKS USED
CASFLBYT DS    X      VARIOUS FLAGS
CASRCTF  EQU   X'00'  ..FIXED RECORDS
CASRCTV  EQU   X'20'  ..VARIABLE RECORDS
CASRCTVS EQU   X'40'  ..VARIABLE SPANNED RECORD
CASRCTU  EQU   X'80'  ..UNDEFINED RECORDS
CASVOKED EQU   X'04'  ..PROGRAM INVOKED SORT
CASINMEM EQU   X'02'  ..IN MEMORY SORT
CASNDYNA DS    XL1    NUMBER OF ALLOCATED WORK DATA SETS
CASFLBY2 DS    X      TYPE OF OPERATION
CASSORT  EQU   X'80'  ..SORT
CASMERG  EQU   X'40'  ..MERGE
CASCOPY  EQU   X'20'  ..COPY
CASSORTX EQU   X'10'  ..SORTX, MULTIPLE SORT
CASRES3  DS    XL1    RESERVED
CASBIAS  DS    H      SORT BIAS
CASTIMES DS    F      TIME STARTED PROCESSING
CASDATES DS    PL4    DATE STARTED PROCESSING
CASTIMEE DS    F      TIME ENDED PROCESSING
CASDATEE DS    PL4    DATE ENDED PROCESSING
CASRCBYT DS    X      TERMINATION STATUS
CASSYSAB EQU   X'80'  ..SYSTEM ABEND OCCURED
CASUSRAB EQU   X'40'  ..USER ABEND OCCURED, NOT FROM ERROR MSG
CASUABND EQU   X'08'  ..USER ABEND OCCURED, FROM ERROR MSG
CASRC16  EQU   X'04'  ..RC=16
CASRC04  EQU   X'01'  ..RC=04
CASRC    DS    X      RETURN CODE OR X'FF' IF ABEND
CASRESN  DS    H      CA-SORT MESSAGE NUMBER IF AVAILABLE
CASAVLR  DS    F      AVG RECORD LENGTH FOR VARIABLE RECS (L5)
CASRES4  DS    XL2    RESERVED
CASFLBY3 DS    X      SORTWK TYPE USED
CASHSSRT EQU   X'80'  ..HIPERSPACE USED
CASDSSRT EQU   X'40'  ..DATASPACE USED
CASWDS   EQU   X'20'  ..DISK USED
CASWTAP  EQU   X'10'  ..TAPE USED
CASWKFLG DS    X      SORTWK FLAGS BYTE
CASWKDYN EQU   X'80'  ..SORTWK DYNAMICALLY ALLOCATED
CASWKCW  EQU   X'40'  ..CACHE FAST WRITE USED
CASWEXS  DS    H      NUMBER OF SORTWK EXTENTS ALLOCATED
CASWEXE  DS    H      NUMBER OF SORTKW EXTENTS USED
CASWALLS DS    F      NUMBER OF SORTWK TRACKS ALLOCATED
CASWALLE DS    F      NUMBER OF SORTWK TRACKS USED
CASRES5  DS    XL3    RESERVED
CASIAMB  DS    X      SORTIN ACCESS METHOD FLAG
CASIEXCP EQU   X'80'  ..EXCP
CASIVSAM EQU   X'40'  ..VSAM
CASIBSAM EQU   X'20'  ..QSAM
CASIQSAM EQU   X'20'  ..QSAM
CASINIO  DS    F      NUMBER SORTIN ACCESS METHOD CALLS
CASRES6  DS    XL3    RESERVED
CASOAMB  DS    X      SORTOUT ACCESS METHOD FLAG
CASOEXCP EQU   X'80'  ..EXCP
CASOVSAM EQU   X'40'  ..VSAM
CASOBSAM EQU   X'20'  ..QSAM
CASOQSAM EQU   X'20'  ..QSAM
CASOUTIO DS    F      NUMBER SORTOUT ACCESS METHID CALLS
CASRES7  DS    F      RESERVED
CASWKIO  DS    F      SORTWK ACCESS METHOD CALLS
CASSRBTS DS    F      START SRB TIME
CASSRBTE DS    F      END   SRB TIME
CASTCBS  DS    H      NUMBER OF TCBS DEFINED IN REGION
CASRES8  DS    XL6    RESERVED
CASEXRCS DS    FL8    64-BIT RECORDS SORTED
CASEXBYS DS    FL8    64-BIT BYTES SORTED
CASEXINN DS    FL8    64-BIT SORTIN ACCESS METHOD CALLS
CASEXOUT DS    FL8    64-BIT SORTOUT ACCESS METHOD CALLS
CASHSPN  DS    H      NUM OF HIPERSPACES = 0 OR 1
CASHSPU  DS    FL4    HIPERSPACE SIZE, IN PAGES
CASDSPN  DS    H      NUM OF DATASPACES = 0 OR 1
CASDSPU  DS    FL4    DATASPACE SIZE, IN PAGES
CASPRCNM DS    CL8    PROC NAME
CASIDSNM DS    CL44   SORTIN DATASET NAME
CASIVOLS DS    CL6    SORTIN VOLUME SERIAL
CASODSNM DS    CL44   SORTOUT DATASET NAME
CASOVOLS DS    CL6    SORTOUT VOLUME SERIAL
CASDEND  EQU   *-CASSMFD     END OF DATA SECTION
*-----------------------*
*   STATISTICS SECTION  *
*-----------------------*
CASSMFRL DSECT
CASCTR01 DS    F      RECORDS WITH LENGTHS 5-15
CASCTR02 DS    F      RECORDS WITH LENGTHS 16-31
CASCTR03 DS    F      RECORDS WITH LENGTHS 32-63
CASCTR04 DS    F      RECORDS WITH LENGTHS 64-127
CASCTR05 DS    F      RECORDS WITH LENGTHS 128-191
CASCTR06 DS    F      RECORDS WITH LENGTHS 192-255
CASCTR07 DS    F      RECORDS WITH LENGTHS 256-511
CASCTR08 DS    F      RECORDS WITH LENGTHS 512-1023
CASCTR09 DS    F      RECORDS WITH LENGTHS 1024-2047
CASCTR10 DS    F      RECORDS WITH LENGTHS 2048-4095
CASCTR11 DS    F      RECORDS WITH LENGTHS 4096-7167
CASCTR12 DS    F      RECORDS WITH LENGTHS 7168-10751
CASCTR13 DS    F      RECORDS WITH LENGTHS 10752-15359
CASCTR14 DS    F      RECORDS WITH LENGTHS 15360-20991
CASCTR15 DS    F      RECORDS WITH LENGTHS 20992-26623
CASCTR16 DS    F      RECORDS WITH LENGTHS 26624-32767
CASRLEND EQU   *-CASSMFRL    END OF RECORD LENGTH DISTRIBUTION
.NOCASORT9 ANOP
D_SMFREC DSECT
         ORG   D_SMFREC
         IFASMFR  17               Map SMF Record Type 17
D_SMFREC DSECT
         ORG   D_SMFREC
         IFASMFR  18               Map SMF Record Type 18
D_SMFREC DSECT
         ORG   D_SMFREC
         IFASMFR  22               Map SMF Record Type 22
D_SMFREC DSECT
         ORG   D_SMFREC
         IFASMFR  24               Map SMF Record Type 24
D_SMFREC DSECT
         ORG   D_SMFREC
         IFASMFI6 36               Map SMF Record Type 36
D_SMFREC DSECT
         ORG   D_SMFREC
         IGWSMF   SMF42_03=YES,    Map SMF Record Type 42              X
               SMF42_06=YES,                                           X
               SMF42_09=YES
         AIF   ('&RT_BDT' EQ '000').NOBDT9
D_SMFREC DSECT
         ORG   D_SMFREC
         IFASMFR  59               Map SMF Record Type 59
.NOBDT9  ANOP
D_SMFREC DSECT
         ORG   D_SMFREC
         IFASMFI6 60               Map SMF Record Type 60
D_SMFREC DSECT
         ORG   D_SMFREC
         IFASMFI6 61               Map SMF Record Type 61
D_SMFREC DSECT
         ORG   D_SMFREC
         IFASMFR  62               Map SMF Record Type 62
D_SMFREC DSECT
         ORG   D_SMFREC
         IFASMFR  63               Map SMF Record Type 63
D_SMFREC DSECT
         ORG   D_SMFREC
         IFASMFR  64               Map SMF Record Type 64
D_SMFREC DSECT
         ORG   D_SMFREC
         IFASMFI6 65               Map SMF Record Type 65
D_SMFREC DSECT
         ORG   D_SMFREC
         IFASMFI6 66               Map SMF Record Type 66
D_SMFREC DSECT
         ORG   D_SMFREC
         IFASMFR  67               Map SMF Record Type 67
D_SMFREC DSECT
         ORG   D_SMFREC
         IFASMFR  68               Map SMF Record Type 68
D_SMFREC DSECT
         ORG   D_SMFREC
         IFASMFR  69               Map SMF Record Type 69
         AIF   ('&RT_RMF' EQ '000').NORMF9
D_SMFREC DSECT
         ORG   D_SMFREC
         ERBSMFR  73               Map SMF Record Type 73
D_SMFREC DSECT
         ORG   D_SMFREC
         ERBSMFR  74               Map SMF Record Type 74
D_SMFREC DSECT
         ORG   D_SMFREC
         ERBSMFR  75               Map SMF Record Type 75
D_SMFREC DSECT
         ORG   D_SMFREC
         ERBSMFR  77               Map SMF Record Type 77
.NORMF9  ANOP
         AIF   ('&RT_RACF' EQ '000').NORACF9
D_SMFREC DSECT
         ORG   D_SMFREC
         IFASMFR  80               Map SMF Record Type 80
D_SMFREC DSECT
         ORG   D_SMFREC
         IFASMFR  81               Map SMF Record Type 81
.NORACF9 ANOP
D_SMFREC DSECT
         ORG   D_SMFREC
*
**       Map SMF Record 82
*
SMF82LEN DS    BL2                 Record length
SMF82SEG DS    BL2                 Segment descriptor
SMF82FLG DS    BL1                 System indicator
SMF82RTY DS    BL1                 Record type
SMF82TME DS    BL4                 Record time
SMF82DTE DS    PL4                 Record date
SMF82SID DS    CL4                 System identification
SMF82SSI DS    CL4                 Subsystem identification
SMF82STY DS    BL2                 Record subtype
SMF82XXX EQU   *                   Subtypes
         ORG   SMF82XXX            Subtype 1 - Initialization
SMF82VES DS    BL4                 CCVE status bits
SMF82VTS DS    BL1                 CCVT status bits
SMF82IDO DS    BL1                 Crypto domain index
         DS    BL2                 Reserved
SMF82ITE DS    BL4                 Number of trace entries
SMF82CKD DS    CL44                CKDS Data Set Name
SMF82IML DS    BL4                 Maximum length of data
         ORG   SMF82XXX            Subtype 7 - KEU Key Part Entry
SMF82KPB DS    BL4                 Key part bits
SMF82KV  DS    CL8                 Key part verification pattern
SMF82KKS DS    BL1                 KSU number
SMF82KDX DS    BL1                 Crypto domain index
         DS    BL2                 Reserved
SMF82KCK DS    CL44                CKDS Data Set Name
SMF82KCL DS    CL24                CKDS entry being modified
         ORG   SMF82XXX            Subtype 8 - KEU Key Part Entry
SMF82ROC DS    CL44                Old CKDS Data Set Name
SMF82RNC DS    CL44                New CKDS Data Set Name
D_SMFREC DSECT
         ORG   D_SMFREC
         IFASMFR  83               Map SMF Record Type 83
D_SMFREC DSECT
         ORG   D_SMFREC
         IFASMFR  90               Map SMF Record Type 90
         AIF   ('&RT_USS' EQ '000').NOUSS3
D_SMFREC DSECT
         ORG   D_SMFREC
         IFASMFR  92               Map SMF Record Type 92
.NOUSS3  ANOP
         AIF   ('&RT_TCPIP' EQ '000').NOTCPIP3
D_SMFREC DSECT
         ORG   D_SMFREC
         EZASMF76 FTP=YES          Map SMF Record Type 118
.NOTCPIP3 ANOP
         AIF   ('&RT_FILEAID' EQ '000').NOFILEAID9
D_SMFREC DSECT
         ORG   D_SMFREC
**********************************************************************
*                                                                    *
*        FILEAID VERSION 8.0.1                                       *
*                                                                    *
**********************************************************************
**********************************************************************
*                                                                    *
* S M F    H E A D E R    F O R    A L L    R E C O R D    T Y P E S *
*                 ALSO USED FOR USERFILE AUDIT                       *
**********************************************************************
RSMFHDR  DSECT
RSMFREC  EQU   *                  START OF SMF RECORD
RRECVLI  EQU   *                   VLI FOR SMF RECORD
RRECLEN  DS    H                     LENGTH OF SMF RECORD
RRECLEN2 DS    H                     ZEROS
RSYSCODE DS    XL1                 SYSTEM CODE/RECLEN-4(USERAUD)
RRECCODE DS    XL1                 SMF RECORD CODE/RECLEN-4(PART2)
RTIME    DS    AL4                 TIME OF ACCESS
*                                    (TIME IS 32-BIT UNSIGNED BINARY)
RDATE    DS    PL4                 DATE OF ACCESS
*                                    (DATE IS IN FORMAT 00YYDDDF)
RSMCASID DS    CL4                 SYSTEM IDENTIFICATION (SMCASID)
RRECTYPE DS    XL1                 RECORD TYPE
RRECDSN  EQU   X'10'                DATASET ACCESS RECORD
RRECSUM  EQU   X'20'                DATASET SUMMARY RECORD
RRECFLD  EQU   X'30'                FIELD UPDATE RECORD - BEFORE/AFTER
RRECFLDB EQU   X'31'                FIELD UPDATE RECORD - BEFORE ONLY
RRECFLDA EQU   X'32'                FIELD UPDATE RECORD - AFTER ONLY
RRECCMPB EQU   X'41'                COMPREHENSIVE BEFORE RECORD
RRECCMPA EQU   X'42'                COMPREHENSIVE AFTER RECORD
RCTLDATA EQU   *                  SMF RECORD CONTROL INFORMATION
RCTLTIME DS    AL4                 ACTUAL TIME OF DATASET ACCESS
*                                    (TIME IS IN TIMER UNITS)
RCTLDATE DS    PL4                 ACTUAL DATE OF DATASET ACCESS
*                                    (DATE IS IN FORMAT 00YYDDDF)
RCTLLEN  EQU   *-RCTLDATA         LENGTH OF CONTROL AREA
RHDRLEN  EQU   *-RSMFREC          LENGTH IF SMF HEADER RECORD
RDATA    EQU   *                  START OF USER DATA AREA
***********************************
* DATASET ACCESS RECORD DATA AREA *
***********************************
*                                 *
*   RRECTYPE = RRECDSN            *
*                                 *
***********************************
         ORG   RDATA
RDHDR    EQU   *
RUSERID  DS    CL8                 USERID
RDSN     DS    CL44                DATASET NAME
RMEMBER  DS    CL8                 MEMBER NAME
RDFUNC   DS    CL1                 FILE-AID FUNCTION CODE (E OR B)
RDSELECT DS    CL1                 FILE-AID SELECTION CODE
RDKFLAG  DS    CL1                 KEYED/UNKEYED FLAG (K OR U)
RDKEYLEN DS    AL1                 IF KEYED, LENGTH OF RECORD KEY
         ORG   RDKEYLEN
RDRPOSID DS    XL1                 IF UNKEYED, FORMAT OF REC POS FIELD
RDRPTTR  EQU   X'80'                TTR FORMAT, WORD 2 CONTAINS RECORD
*                                     OFFSET WITHIN BLOCK
RDRPNUMB EQU   X'40'                RECORD NUMBER, WORD 2 ZEROS
RDRPRBA  EQU   X'20'                RBA, WORD 2 ZEROS
RDRPSLOT EQU   X'10'                SLOT # FOR RRDS, WORD 2 ZEROS
RAUDTDSN DS    CL44                AUDIT TRAIL DATASET NAME
RLAYODSN DS    CL44                LAYOUT DATASET NAME
RLAYOMEM DS    CL22                LAYOUT MEMBER NAME
RLAYOTYP DS    CL1                 LAYOUT DATASET TYPE
RLAYOUSE DS    CL1                 LAYOUT DATASET USAGE S/X/N
RXREFDSN DS    CL44                XREF DATASET NAME
RXREFMEM DS    CL22                XREF MEMBER NAME
RSELCUSE DS    CL1                 SELECTION CRITERIA USAGE E/M/T/N
RSELCDSN DS    CL44                SELECTION CRITERIA DATASET NAME
RSELCMEM DS    CL22                SELECTION CRITERIA MEMBER NAME
RDAFLTYP DS    CL1                 TYPE OF FILE FROM DSBDCBTYP
RDAKEYPO DS    XL4                 RELATIVE KEY POSITION IF KEYED
RDALEN   EQU   *-RDHDR             LENGTH OF DATASET DATA AREA
**************************
* DATASET SUMMARY RECORD *
**************************
*                        *
*   RRECTYPE = RRECSUM   *
*                        *
**************************
         ORG   RDATA
RSUMADD  DS    F                  NUMBER OF RECORDS ADDED
RSUMDEL  DS    F                  NUMBER OF RECORDS DELETED
RSUMUPDT DS    F                  NUMBER OF RECORDS UPDATED
RSUMDES1 DS    CL48               DESCRIPTION LINE ONE
RSUMDES2 DS    CL48               DESCRIPTION LINE TWO
RSUMLEN  EQU   *-RDHDR            LENGTH OF SUMMARY RECORD
**************************************
* COMPREHENSIVE UPDATE RECORD HEADER *
**************************************
*                                    *
*   RRECTYPE = RRECCMPB OR RRECCMPA  *
*                                    *
**************************************
         ORG   RDATA
RCUPDTYP DS    CL1                TYPE OF UPDATE FLAG (A, D, OR U)
RCHDRL   EQU   *-RSMFREC          LENGTH OF COMMON HEADER AREA
RCKEYDTA EQU   *                  START OF RECORD KEY IMAGE
RCPOSREC DS    XL8                UNKEYED RECORD POSITION VALUE
RCPOSDTA EQU   *                  START OF COMPREHENSIVE RECORD
*************************************
*     FIELD UPDATE RECORD HEADER    *
*************************************
*                                   *
*   RRECTYPE = RRECFLDB OR RRECFLDA *
*                                   *
*************************************
         ORG   RDATA
RFKEYDTA EQU   *                  START OF RECORD KEY IMAGE
RFPOSREC DS    XL8                UNKEYED RECORD POSITION VALUE
RFPOSDTA EQU   *                  START OF BEFORE/AFTER FIELDS
**********************************************************************
*                                                                    *
*                E N D    O F    S M F    H E A D E R                *
*                                                                    *
**********************************************************************
**********************************************************************
*                                                                    *
*    D S E C T    F O R    F I E L D    U P D A T E     E N T R Y    *
*                                                                    *
**********************************************************************
*                                                                    *
*  NOTES: 1. USE THIS DSECT WHEN RRECTYPE = RRECFLDB OR RRECFLDA     *
*         2. THIS DSECT MAPS EACH FIELD THAT WAS UPDATED             *
*         3. MAP STARTS AFTER FIELD RFKEYDTA (KEYED FILE) OR         *
*            RFPOSDTA (UNKEYED FILE)                                 *
*         4. EACH ENTRY CONSISTS OF THE 8 BYTES OF OVERHEAD (RFELEN) *
*            PLUS TWICE THE VALUE IN RDLEN (BEFORE IMAGE FOLLOWED BY *
*            THE AFTER IMAGE)                                        *
*                                                                    *
**********************************************************************
RFDSECT  DSECT
RFHDR    EQU   *
RFLEN    DS    F                  LENGTH OF CHANGED FIELD
RFLOC    DS    F                  RELATIVE (TO ZERO) START LOCATION
*                                  OF FIELD WITHIN RECORD
RFELEN   EQU   *-RFHDR            LENGTH OF ENTRY OVERHEAD
RFBAIMAG EQU   *                  START OF BEFORE/AFTER FIELD IMAGES
.NOFILEAID9 ANOP
         AIF   ('&RT_STOPX37' EQ '000').NOSTOPX379
D_SMFREC DSECT
         ORG   D_SMFREC
**********************************************************************
*                                                                    *
*        STOP-X37 VERSION 3.5.4                                      *
*                                                                    *
**********************************************************************
$DUMMYD  DSECT
PMSGBLEN EQU   150                      LENGTH OF MESSAGE BUFFER
MISS     EQU   8                        TRT MISS
HIT      EQU   7                        TRT HIT
PWADRIV  DSECT
         DS    XL3072
**********************************************************************
*                                                                    *
*        NAME = GWA                                                  *
*                                                                    *
*        ID = GWA                                                    *
*                                                                    *
*        TITLE = GLOBAL WORK AREA FOR THE DYNAMIC SPACE RECOVERY     *
*                SYSTEM                                              *
*                                                                    *
*        USE = R11 WILL HAVE ADDRESSABILITY ON THE FOLLOWING GLOBAL  *
*              VARIABLES AT ANY POINT IN THE DSR SYSTEM.             *
*                                                                    *
*  MODIFICATION HISTORY                                              *
*  35007 - DEFINE IAM DATASET FLAG                                   *
*  35018 - DEFINE RECFM FIELD                                        *
*                                                                    *
**********************************************************************
GWA      DSECT
*
*   SMF HEADER AND SMF INFORMATION
*
GWARDW   DS    H                        LENGTH OF RECORD
GWARDWZ  DS    H                        HALFWORD INITIALIZED TO ZERO
GWASMFNM DS    C                        SMF "NAME" FIELD
GWASMFRT DS    C                        SMF RECORD TYPE
GWASMFTI DS    XL4                      TIME OF RECORD
GWASMFDA DS    XL4                      DATE OF RECORD
GWASMFSI DS    CL4                      SYSTEM IDENTIFICATION (SID)
GWASMFJN DS    CL8                      JOB NAME
GWASMFET DS    XL4                      ENTRY TIME TO RDR (.01 SECS)
GWASMFED DS    XL4                      ENTRY DATE TO RDR (00YYDDDF)
GWAX37   DS    CL4                      C'X37'
GWAVERS  DS    CL2                      RELEASE/VERSION NUMBERS
GWACPUTI DS    F                        CUMMULATIVE CPU TIME
GWASTEPT DS    A                        STEP CPU TIME
GWAFTYPE DS    CL20                     TYPE OF FUNCTION WORKING ON
GWAERROR DS    C                        Y=RECOVERY NOT ATTEMPTED
GWAFFLAG DS    C                        TYPE OF RECOVERY
GWAFRED  EQU   00                       REDUCE
GWAFSEC  EQU   04                       SET SECONDARY
GWAFSWI  EQU   08                       VOLUME SWITCH
GWAFSNA  EQU   12                       REDUCE PRIMARY
GWAFRCAT EQU   16                       RECAT
GWAFVRED EQU   20                       VSAM REDUCE
GWASKIP  DS    C                        SKIP FLAG BITS
GWAPRISL DS    C                        C'Y' = PRIVATE SELECT MODULE
GWASTEPN DS    AL1                      STEP NUMBER
GWAIDCVS DS    C                        C'Y' = REDUCE PRIMARY FOR
*                                         NON-JCL-ALLOC VSAM (IDCAMS)
         DS    XL3
         DS    9F                       RESERVED
*
*   INFORMATION GATHERED FOR USE DURING SELECTION PROCESSING.
*
GWAJNAME DS    CL8                      NAME OF JOB
GWACCTNO DS    CL44                     ACCOUNT NUMBER            35003
GWAPGMNM DS    CL20                     PROGRAMMER NAME FIELD
GWARGRP  DS    CL8                      RACF GROUP
GWARUID  DS    CL8                      RACF USERID
GWADSNM  DS    CL44                     NAME OF DATASET
GWADSORG DS    CL2                      DATASET ORGANIZATION
GWAUNITT DS    CL8                      UNIT TYPE (IE. 3350)
GWADDNM  DS    CL8                      ORIGINAL DDNAME
GWAJTYP  DS    CL3                      TYPE OF TASK (JOB,STC,TSU)
GWADISP1 DS    CL3                      DATASET DISPOSITION
GWALTYPE DS    CL3                      ALLOCATION TYPE (CYL,TRK,BLK)
GWADISP2 DS    CL7                      SCHED. DISP (CATLG,KEEP..)
GWAMDAY  DS    CL10                     JOB START DAY OF WEEK
GWAMJDAT DS    CL6                      JOB START JULIAN DATE
GWAMDATE DS    CL8                      JOB START DATE (CHARACTER)
GWAMTIME DS    CL8                      JOB START TIME (CHARACTER)
GWAPROG  DS    CL8                      PROGRAM NAME ON EXEC CARD
GWARECOV DS    CL8                      TYPE OF RECOVERY
GWAUNITN DS    CL8                      UNIT NAME
GWAOPER  DS    C                        OPER SUPPLIED VOLUME FOR SWITCH
GWAJCLAS DS    C                        JOB CLASS
GWATMDSN DS    C                        TEMP DATASET FLAG (Y=YES)
GWAVOLSQ DS    H                        VOLUME SEQUENCE
GWANVOL  DS    F                        NUMBER OF VOLUMES
GWAPSPC  DS    F                        PRIMARY SPACE ALLOCATION
GWASSPC  DS    F                        SECONDARY SPACE ALLOCATION
GWAJST   DS    F                        JOB START TIME
GWAJSD   DS    F                        JOB START DATE
GWANUNIT DS    F                        NUMBER OF UNITS
GWAHLQ   DS    0CL8                     HLQ OF DSNAME
GWAQUAL1 DS    CL8                      1ST QUALIFIER
GWAQUAL2 DS    CL8                      2ND QUALIFIER
GWAQUAL3 DS    CL8                      3RD QUALIFIER
GWAQUAL4 DS    CL8                      4TH QUALIFIER
GWAQUAL5 DS    CL8                      5TH QUALIFIER
GWAQUAL6 DS    CL8                      6TH QUALIFIER
GWAQUALL DS    CL8                      LAST QUALIFIER
GWAQUALS EQU   *-GWAHLQ                 LENGTH OF QUALS
GWASTEP  DS    CL8                      STEP NAME
GWAPROCS DS    CL8                      PROC STEP NAME
GWACDCT  DS    XL50                     DCT FOR CURRENT UCB
GWAMSGB  DS    CL(PMSGBLEN)             DEFAULT BUFFER FOR MSGED
GWATEXT  DS    F                        TOTAL NUMBER OF EXTENTS
GWALIB   DS    C                        DSNTYPE=LIBRARY (PDSE)
GWAIAM   DS    C                        IAM DATASET (Y/N)
GWARECFM DS    3C                       RECORD FORMAT
GWASTRIP DS    C                        STRIPED DATASET (Y/N)
GWAHIER  DS    C                        HIERARCHICAL DATASET (Y/N)
         DS    1C                       RESERVED
GWAUSRN1 DS    F                        USER NUMERIC FIELD
         DS    2F                       RESERVED
*
*  MISC FIELDS
*
GWADVOL  DS    CL6                      VOLUME TO SWITCH TO
GWASELN  DS    CL8                      NAME OF SELECT BLOCK
GWAACTN  DS    CL8                      NAME OF ACTION BLOCK
GWARNVOL DS    H                        NO. OF ORIGINAL VOLS (RECAT)
GWARVOL  DS    CL6                      ORIGINAL VOLUME NAME (RECAT)
GWAADDV  DS    CL1                      NEED TO ADD VOLUME TO JFCB
GWAAVGR  DS    CL1                      AVGREC KEYWORD IN EFFECT
GWAUSRC1 DS    CL8                      USER CHARACTER FIELD
         DS    CL12                     RESERVED
GWAVCLST DS    CL44                     VSAM CLUSTER DSNAME
GWAVCOMP DS    CL5                      VSAM COMP TYPE (DATA OR INDEX)
GWAVTYPE DS    CL10                     TYPE OF VSAM DATA SET
GWAVDTYP DS    CL4                      TYPE OF VSAM CLUSTER
GWASMFE  EQU   *                        END OF SMF RECORD
*
*   REGISTERS ON ENTRY TO DRIVER
*
GWAR0    DS    F                        REG 0  AT ENTRY TO DSR
GWAR1    DS    F                        REG 1  AT ENTRY TO DSR
GWAR2    DS    F                        REG 2  AT ENTRY TO DSR
GWAR3    DS    F                        REG 3  AT ENTRY TO DSR
GWAR4    DS    F                        REG 4  AT ENTRY TO DSR
GWAR5    DS    F                        REG 5  AT ENTRY TO DSR
GWAR6    DS    F                        REG 6  AT ENTRY TO DSR
GWAR7    DS    F                        REG 7  AT ENTRY TO DSR
GWAR8    DS    F                        REG 8  AT ENTRY TO DSR
GWAR9    DS    F                        REG 9  AT ENTRY TO DSR
GWAR10   DS    F                        REG 10 AT ENTRY TO DSR
GWAR11   DS    F                        REG 11 AT ENTRY TO DSR
GWAR12   DS    F                        REG 12 AT ENTRY TO DSR
GWAR13   DS    F                        REG 13 AT ENTRY TO DSR
GWAR14   DS    F                        REG 14 AT ENTRY TO DSR
GWAR15   DS    F                        REG 15 AT ENTRY TO DSR
GWAPWABA DS    A                        ADDRESS OF GETMAINED PWA
GWAPWAL  DS    A                        LENGTH OF GETMAINED PWA
GWA10PWA DS    A                        ADDRESS OF DRIVER PWA
GWAPLDVA DS    1A                       PLDVSAM ADDRESS
         DS    2X                       RESERVED
GWASGLEN DS    H                        SMS STORAGE GROUP NAME LENGTH
GWASTORG DS    CL8                      SMS STORAGE GROUP
GWASTORC DS    CL8                      SMS STORAGE CLASS
GWAMGMTC DS    CL8                      SMS MANAGEMENT CLASS
GWADATAC DS    CL8                      SMS DATA CLASS
*
*  MVS CONTROL BLOCK ADDRESSES
*
GWAZERO  EQU   *                        START OF STORAGE TO ZERO
GWAJFCBA DS    A                        ADDRESS OF JFCB
GWADSABQ DS    A                        ADDRESS OF DSAB QUEUE
GWATIOTA DS    A                        ADDRESS OF TIOT ENTRY
GWADCBA  DS    A                        ADDRESS OF CURRENT DCB
GWAASCBA DS    A                        ADDRESS OF CURRENT ASCB
GWAASXBA DS    A                        ADDRESS OF CURRENT ASXB
GWAJSCBA DS    A                        ADDRESS OF CURRENT JSCB
GWADSABA DS    A                        ADDRESS OF CURRENT DSAB
GWASIOTA DS    A                        ADDRESS OF CURRENT SIOT
GWACUCBA DS    A                        CURRENT UCB ADDRESS
GWAOCEWA DS    A                        O/C/E WORK AREA ADDRESS
GWAWTGA  DS    A                        WHERE-TO-GO TABLE ADDRESS
GWATIOTS DS    A                        START OF TIOT
GWATCBA  DS    A                        TCB ADDRESS
GWADSCBA DS    A                        FORMAT 1 DSCB ADDRESS
GWALDCBA DS    A                        ADDRESS OF LINKLIB DCB
GWAALCWA DS    A                        ALLOCATION WORK AREA ADDRESS
GWASCTS  DS    A                        SVA OF SCT
GWAACTS  DS    A                        SVA OF ACT
GWAJCTS  DS    A                        SVA OF JCT
GWASIOTS DS    A                        SVA OF SIOT
GWAJFCBS DS    A                        SVA OF JFCB
GWASSSA  DS    A                        ADDR OF SMS SSSA
GWADACRE DS    A                        ADDR OF DADSM CREATE PLIST
GWAS26A  DS    A                        ADDR OF IDCAMS DEFINE PARMLIST
         DS    7A                       RESERVED
*
*  CONTROL BLOCK ADDRESSES
*
GWAFIXA  DS    A                        FIX TABLE ADDRESS
GWAFIXN  DS    F                        # ENTRIES IN FIX TABLE
GWAFIXL  DS    F                        LENGTH OF FIX TABLE
GWAFSIOT DS    A                        ADDRESS OF FIRST SIOT
GWANSIOT DS    A                        NUMBER OF SIOT
GWANUCBA DS    A                        ADDRESS OF NEW UCB
GWAOPTA  DS    A                        ADDRESS OF DSOPTION CSECT
GWAPRDA  DS    A                        ADDRESS OF PRD
GWABPRDA DS    A                        BASE CODE (X37) PRD ADDRESS
GWAAMBA  DS    A                        ADDRESS OF AMB
GWACWAA  DS    A                        ADDRESS OF CATALOG WORK AREA
GWACWAL  DS    F                        LENGTH OF CATALOG WORK AREA
         DS    10A                      RESERVED
*
*  INTERNAL FIELDS
*
GWASELA  DS    A                        ADDR OF SELECT BLOCK
GWAACTA  DS    A                        ADDR OF ACTION BLOCK
GWABDCT  DS    A                        ADDR OF DCT FOR BLOCK SEARCH
GWAGACTA DS    A                        ADDR OF GETMAINED ACTION BLOCK
GWAGACTL DS    A                        LENGTH OF ACTION BLOCK
GWASTAER DS    A                        ESTAE RECOVERY ROUTINE ADDRESS
GWAFMSGA DS    A                        FIRST MESSAGE TO PRINT ADDRESS
GWACUR12 DS    A                        CURRENT PGM BASE
GWALEVEL DS    F                        MESSAGE LEVEL TO PRINT
GWAOLDSC DS    F                        OLD JFCBSQTY FIELD
GWAAVGV  DS    D                        AVGREC SPACE VALUE
GWAUCBTP DS    F                        CURRENT UCBTYPE FIELD
GWAORGK  DS    F                        ORIGINAL PSW KEY ON ENTRY
GWAAMODE DS    F                        ORIGINAL AMODE ON ENTRY
GWAMSGN  DS    F                        MVS MESSAGE ID
GWADUMPC DS    H                        WHEN TO FORCE ABEND
GWAMSGP  DS    10A                      PARMS FOR MSGED
GWARDDNM DS    CL8                      DDNAME RETURNED FROM DYNALLOC
GWADUMPM DS    CL8                      FORCE ABEND AT THIS MODULE
GWABNAME DS    CL8                      NAME OF BLOCK ENTRY
GWABTYPE DS    CL8                      TYPE OF SCAN (SELECT/ACTION)
GWATDCT  DS    XL50                     DCT FOR CANDIDATE UCB ON SWITCH
GWAIMSG  DS    CL(PMSGBLEN)             INITIAL MESSAGE BUFFER
GWAWTORC DS    XL2                      WTO ROUTE CODE
GWAWTODC DS    XL2                      WTO DESC CODE
GWASWAR  DS    A                        ADDRESS OF SWA READ ROUTINE
GWASWAW  DS    A                        ADDRESS OF SWA WRITE ROUTINE
GWAEXEC  DS    20F                      PARMS FOR EXECUTE FORM OF MACRO
GWAORGSC DS    20F                      ORIGINAL JFCBSQTY
GWADEVN  DS    CL8                      NAME OF IEFAB4UV ROUTINE
GWADEVK  DS    XL1                      KEY FOR IEFAB4UV ROUTINE
GWAPREX  DS    CL8                      NAME OF IGGPRE00 ROUTINE
GWATFLAG DS    X                        TRACE FLAG
GWALTRC  EQU   X'80'  1... ....          - SVC 26 TRACE    (DSR1700)
GWASTRC  EQU   X'40'  .1.. ....          - SMS ALLOC TRACE (DSR1600)
GWATPLD  EQU   X'20'  ..1. ....          - PLD POOLING IN EFFECT
GWATPLDD EQU   X'10'  ...1 ....          - PLD POOLING DESIRED
GWADYNA  EQU   X'08'  .... 1...          - D/S DYNALLOCD (RECAT/SMS)
GWASP43  EQU   X'04'  .... .1..          - MVS/SP 4.3 OR HIGHER
GWARCATS DS    C                        C'Y' = PROCESSING RECAT-FOR-SMS
GWAXDC   DS    C                        C'Y' = X37XDC DD OVERRIDE
GWARCATU DS    C                        C'Y' = UNCAT DONE FOR X37/RECAT
GWASPLVS DS    C                        C'Y' = SPECIAL CASE VSAM EXTND
GWARCATR DS    C                        C'Y' = RENAME DONE -X37/RECAT
GWARSCRC DS    C                        C'Y' = SCRATCH DONE-X37/RECAT
GWALASTV DS    C                        C'Y' = WORKING ON LAST VOL
         DS    7A                       RESERVED
GWAVSPAL DS    F                        VSAM ORIG PRIMARY SPACE
GWAFIXB  DS    C                        C'Y' = FIX TABLE IS BUILT
GWASELTR DS    C                        C'Y' = SELECT MODULE TRACE
GWAABEND DS    C                        C'Y' = ABEND HAS OCCURED
GWATRACE DS    C                        C'Y' = MODULE TRACE
GWADTFLG DS    C                        C'Y' = DEVTYPE ALREADY ISSUED
GWADUMP  DS    C                        C'Y' = FORMAT A DUMP
GWAESTAE DS    C                        C'Y' = ESTAE SETUP
GWASMF   DS    C                        C'Y' = SMF INFO BUILT
GWAOS    DS    CL1                      OPERATING SYSTEM TYPE
GWAOSF   DS    XL1                      OPERATING SYSTEM FLAGS
GWAOSFU4 EQU   X'40'                    FACOM/HITACHI USES 4-BYTE UCBS
GWAXA    DS    CL1                      MVS/XA FLAG
GWAMODLV DS    PL2                      MODULE DEPTH
GWARFUN  DS    XL2                      RECAT ALLOCATION FUNCTION FLAGS
GWAVSAM  DS    CL1                      X37/VSAM IN CONTROL
GWASMS   DS    CL1                      SMS DATA SET FLAG
GWAESREC DS    CL1                      ESTAE RECOVERY FLAG
GWATIOTE DS    CL1                      TIOT ENQ FLAG
GWASMSA  DS    CL1                      SMS ACTIVE IN SYSTEM FLAG
GWAENQ1  DS    CL1                      PRODUCT PRD IS ENQUEUED
GWAENQ2  DS    CL1                      BASE    PRD IS ENQUEUED
GWATRED  DS    CL1                      C'C'-CURRENT VOL,C'N'-NEXT VOL
GWADB2   DS    CL1                      DB2 DATA SET FLAG
GWATR1TM DS    CL1                      TRACING 1ST TIME FLAG
GWAPRIV  DS    CL1                      INCLUDE PRIV VOLS FROM PLDPOOL
         DS    7C                       RESERVED
         DS    0H
GWACAMA  DS    XL265                    AREA RETURNED BY LOCATE
GWACAMLN EQU   *-GWACAMA                LENGTH OF LOCATE WORK AREA
GWADSCB  DS    XL96                     FORMAT-1 DSCB
         DS    20C                      RESERVED
*
*   INFORMATION RETURNED FROM THE DEVTYPE MACRO
*
GWADVBUF DS    0F                       FULLWORD ALIGN DEVTYPE BUFFER
GWADUTYP DS    F                        UCBTYP FROM THE UCB
GWADMBLK DS    F                        MAXIMUM SIZE OF UNKEYED BLOCK
GWADCYL  DS    H                        NUMBER OF CYLINDERS ON DEVICE
GWADTPC  DS    H                        NUMBER OF TRACKS PER CYL
GWADMTL  DS    H                        MAXIMUM TRACK LENGTH
GWADBOH  DS    0H                       BLOCK OVERHEAD
GWADKOH  DS    C                  KEYED BLOCK OVERHEAD (NOT LAST BLOCK)
GWADLKOH DS    C                  KEYED BLOCK OVERHEAD (LAST BLOCK)
GWADNBOH DS    C                        BLOCK OVERHEAD WITHOUT KEY
GWADFLAG DS    C                        FLAG BYTE
GWADOBLK EQU   X'08'                    GWADBOH CONTAINS BLOCK OVERHEAD
GWADTOL  EQU   X'01'                    ADD TOLERANCE FACTOR
GWADTOLF DS    H                        TOLERANCE
GWADR0O  DS    H                        R0 OVERHEAD FOR SECTOR CALC.
GWADNSEC DS    C                        NUMBER OF SECTORS
GWADDSEC DS    C                        NUMBER OF DATA SECTORS
*
GWAPFXNM DS    CL44                     NEW NAME OF DATASET-RECAT=RENAM
*
GWAPATCH DC    156X'00'                 BINARY ZERO PATCH
*
*  GLOBAL PATCH SPACE
*
*
*  END OF DEVTYPE INFO
*
GWAZEROL EQU   *-GWAZERO                ZERO STORAGE LENGTH
GWALNGTH EQU   *-GWA                    GLOBAL WORKAREA LENGTH
.NOSTOPX379 ANOP
         AIF   ('&RT_SRS' EQ '000').NOSRS9
D_SMFREC DSECT
         ORG   D_SMFREC
**********************************************************************
*                                                                    *
*        SRS VERSION 2.1                                             *
*                                                                    *
**********************************************************************
SRSRDW   DS    XL2                 Record length
SRSRDWZ  DS    XL2                 Segment descriptor
SRSNAME  DS    X                   System indicator
SRSRTYPE DS    X                   Record type
SRSRTIME DS    XL4                 Record time
SRSRDATE DS    XL4                 Record date
SRSSYSID DS    CL4                 System identification
SRSJOBNM DS    CL8                 Job name
SRSJOBET DS    XL4                 Reader start time
SRSJOBED DS    XL4                 Reader start date
SRSIBME  EQU   *                   End of IBM fields
         DS    0F
SRSDIFR  DS    0CL3                DIF RELEASE
         DS    CL1                 LEVEL
         DS    CL1                 VERSION
         DS    AL1                 MOD LEVEL
         DS    CL1                 RESERVED
SRSPROD  DS    CL8                 PRODUCT NAME
SRSPRODR DS    0CL3                PRODUCT RELEASE
         DS    CL1                 LEVEL
         DS    CL1                 VERSION
         DS    AL1                 MOD LEVEL
         DS    CL1                 RESERVED
SRSTYPE  DS    CL8                 TYPE OF RECORD
SRSPHL   DS    F                   PRODUCT HEADER INFO LENGTH
SRSPGMN  DS    CL8                 PGM NAME
SRSSTEPN DS    CL8                 STEP NAME
SRSDDNN  DS    CL8                 DDNAME NAME
SRSTTIME DS    XL4                 CURRENT TCB TIME
SRSSTIME DS    XL4                 CURRENT SRB TIME
SRSPPDDN DS    CL8                 DDNAME FOR PRINT PROCESSING
SRSMFLG1 DS    XL1                 MESSAGE FLAGS
SRSMFLG2 DS    XL1                 MESSAGE FLAGS
SRSMFLG3 DS    XL1                 MESSAGE FLAGS
SRSMFLG4 DS    XL1                 MESSAGE FLAGS
         DS    CL16                RESERVED
*SRSLEN   EQU   *-SRH               LENGTH OF SMF HEADER
SRSPH    EQU   *                   PRODUCT HEADER INFO
SRSREC   EQU   *                   SMF RECORD TEXT
*ASH     DSECT
SRSTIME  DS    F                   RECOVERY TIME
SRSDATE  DS    F                   RECOVERY DATE
SRSMLVL  DS    F                   MESSAGE LEVEL
SRSENV   DS    CL10                ENVIRONMENT
SRSENVS  DS    CL10                SUB ENVIRONMENT
SRSDSN   DS    CL44                DSNAME
SRSVOL   DS    CL6                 VOLSER
SRSDDN   DS    CL8                 DDNAME
SRSPOOL  DS    CL8                 POOL NAME
         DS    CL20                RESERVED
SRSLEN   EQU   *-D_SMFREC          LENGTH OF ASH
.NOSRS9  ANOP
         AIF   ('&RT_HSM' EQ '000').NOHSM3
D_SMFREC DSECT
         ORG   D_SMFREC
*
**       Map SMF Record DFHSM (241)
*
FSRLEN   DS    BL2                 Record length
FSRSEG   DS    BL2                 Segment descriptor
FSRFLG   DS    BL1                 System indicator
FSRRTY   DS    BL1                 Record type
FSRTME   DS    BL4                 Record time
FSRDTE   DS    PL4                 Record date
FSRSID   DS    CL4                 System identification
FSRJBN   DS    CL8                 Job name
FSRRST   DS    BL4                 Reader start time
FSRRSD   DS    PL4                 Reader start date
FSRUID   DS    CL8                 User identification
FSRTYPE  DS    BL1                 Function type
FSRFLAGS DS    BL1                 Flags
FSRDSN   DS    CL44                Data Set Name
FSRTVOL  DS    CL6                 To volume serial
FSRDEVT  DS    CL4                 To device type
FSRFVOL  DS    CL6                 From volume serial
FSRGEN   DS    BL4                 Backup copy generation number
         ORG   FSRGEN
FSRDATE  DS    BL4                 Backup date
FSRRC    DS    BL4                 Return code
FSRREAS  DS    BL4                 Reason code
FSRABCC  DS    CL4                 Abnormal end code
FSRDARC  DS    BL2                 Dynamic allocation return code
FSRGRP   DS    CL8                 Group name
FSRRACF  DS    BL1                 RACF flags
         DS    CL1                 Reserved
FSRRQN   DS    BL4                 Request number
FSRDATR  DS    PL4                 Request date
FSRTIMR  DS    BL4                 Request time
FSRTIMS  DS    BL4                 Processing start time
FSRTIME  DS    BL4                 Processing end time
FSRTIMA  DS    BL4                 Allocation time
FSRDLU   DS    PL4                 Date last used
FSRDLM   DS    PL4                 Date last move/migrate/bkup/recall
FSRBYTR  DS    BL4                 Bytes read
FSRBYTW  DS    BL4                 Bytes written
FSRTRKR  DS    BL2                 Tracks read
FSRTRKW  DS    BL2                 Tracks written
FSRDORG  DS    BL2                 DSORG
FSRFLG2  DS    BL2                 Flag bytes
         DS    CL4                 Reserved
FSRAGE   DS    BL2                 Age
FSRRECFM DS    BL1                 Record format
FSROPTCD DS    BL1                 Option codes
         DS    CL16                Reserved
FSRTRKKR DS    BL4                 Tracks read
FSRTRKKW DS    BL4                 Tracks written
FSRMCLEN DS    BL2                 Management class length
FSRMCNAM DS    CL8                 Management class name
         DS    CL18                Reserved
FSRNENT1 DS    BL2                 Number of tape volumes
FSRNENT2 DS    BL2                 Number of output recycle tapes
FSRDCOPR DS    BL2                 Number of requested dump copies
FSRDCOPF DS    BL2                 Number of failed dump copies
FSRDCLAS DS    CL40                Dump classes
         DS    CL12                Reserved
FSRTPVOL DS    CL6                 Volume serial
FSRTFLGS DS    BL1                 Flags
         DS    CL1                 Reserved
FSRTBYBK DS    BL4                 Bytes read/written
.NOHSM3  ANOP
**********************************************************************
         TITLE 'DAF - Mainline'
**********************************************************************
DAF      $ENTRY AMODE=24,RMODE=24, Entry                               X
               DWA=(DAFDWA,R10,DAFDWA#),                               X
               SABNDRY=PAGE,SALENGTH=4096,                             X
               SWA=(DAFSWA,R9)
         GBLA  &GCOMMON            Common Macros Level
         AIF   (&GCOMMON EQ 5).COMMONOK
         MNOTE 8,'$COMMON Macro Mismatch:  Required=5, Used=&GCOMMON'
         AGO   .COMMONOK
.COMMONOK ANOP
         CALL  DAFINIT             Initialization
         CALL  DAFPROC             Process
         CALL  DAFTERM             Termination
         L     R15,W_RC            Return code
         B     DAFR                Utilize RC in R15
DAF      $EXIT                     Exit
**********************************************************************
         TITLE 'DAFINIT - Initialization'
**********************************************************************
DAFINIT  $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,0(R1)            Get JCL Parameter Pointer
         LH    R2,0(R1)            Get JCL Parameter Length
*
**       Establish Recovery Environment
*
         MVC   W_ESTAE(L_ESTAE),T_ESTAE Copy ESTAE parameter list
         ESTAE 0,MF=(E,W_ESTAE)    Cancel ESTAE
         MVC   W_ESTAE(L_ESTAE),T_ESTAE Copy ESTAE parameter list
         L     R4,=A(DAFAT)        Abnormal termination CSECT address
         ESTAE (R4),CT,MF=(E,W_ESTAE)
         LTR   R15,R15             OK ?
         BZ    ESTAEOK2            Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,P_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=8 Return code
         MVC   W_WTOMSG+44(11),=CL11'ESTAE/DAFAT' System macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
ESTAEOK2 EQU   *
*
**       Open DAFLOG
*
         MVC   DAFLOG(L_DAFLOG),P_DAFLOG Copy DAFLOG DCB template
         MVC   W_OPENO(L_OPENO),T_OPENO Copy open parameter list
         OPEN  DAFLOG,MF=(E,W_OPENO) Open DAFLOG
         TM    DAFLOG+48,X'10'     DAFLOG open ?
         BNZ   INITLGOK            Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,P_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=8 Return code
         MVC   W_WTOMSG+44(11),=CL11'OPEN/DAFLOG' System macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
INITLGOK EQU   *                   The file is open
*
**       Open DAFSNAP
*
         MVC   DAFSNAP(L_DAFSNA),P_DAFSNA Copy DAFSNAP DCB template
         MVC   W_OPENO(L_OPENO),T_OPENO Copy open parameter list
         OPEN  DAFSNAP,MF=(E,W_OPENO) Open DAFSNAP
         TM    DAFSNAP+48,X'10'    DAFSNAP open ?
         BNZ   INITSNOK            Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,P_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=8 Return code
         MVC   W_WTOMSG+44(12),=CL12'OPEN/DAFSNAP' System macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
INITSNOK EQU   *                   The file is open
         LA    R15,W_DAFLOG        DAFLOG control
         USING D_PRTCTL,R15        Reference DAFLOG control
         LA    R1,P_LOG            Get DAFLOG header address
         ST    R1,D_PRTHDR         Store DAFLOG header address
         ZAP   D_PRTPGE,=P'0'      Initialize page counter
         ZAP   D_PRTLNE,=P'99'     Initialize line counter
         DROP  R15                 Dereference DAFLOG control
         $MSG  W_LOG,DAF520I       Move message template
         MVC   W_LOG+32(14),=CL14'Initialization'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         STORAGE OBTAIN,LENGTH=32768,BNDRY=PAGE SMFREC
         LTR   R15,R15             OK ?
         BZ    GMRECOK             Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,P_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=8 Return code
         MVC   W_WTOMSG+44(11),=CL11'OBTAIN/SMFREC' System macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
GMRECOK  ST    R1,W_SMFBAS         DAFSMF record
         STORAGE OBTAIN,LENGTH=8192,BNDRY=PAGE Keyword table
         LTR   R15,R15             OK ?
         BZ    GMKWDOK             Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,P_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=8 Return code
         MVC   W_WTOMSG+44(13),=CL13'OBTAIN/KWDTBL' System macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
GMKWDOK  EQU   *
         ST    R1,W_KWDTBL         Dynamic keyword table address
         L     R0,W_KWDTBL         Dynamic keyword table address
         L     R1,=F'8192'         Keyword table length
         L     R14,=A(KWDTBL)      Static keyword table address
         LR    R15,R1              Keyword table length
         MVCL  R0,R14              Copy keyword table
         STORAGE OBTAIN,LENGTH=@_SMFTBL,BNDRY=PAGE Dynamic SMF table
         LTR   R15,R15             OK ?
         BZ    GMSMFOK             Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,P_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=8 Return code
         MVC   W_WTOMSG+44(13),=CL13'OBTAIN/SMFTBL' System macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
GMSMFOK  ST    R1,W_SMFTBL         Dynamic SMF table address
         L     R0,W_SMFTBL         Dynamic SMF table address
         LA    R1,@_SMFTBL         SMF table length
         L     R14,=A(SMFTBL)      Static SMF table address
         LR    R15,R1              SMF table length
         MVCL  R0,R14              Copy SMF table
         LTR   R2,R2               Any JCL Parameter ?
         BZ    NOJCLPRM            No, Continue
         CLC   2(8,R3),=C'ALLTRACE'  All traces requested ?
         BNE   PARMMOD             Yes, check module trace
         OI    W_F$TRAC,W_F$MOD    Turn on module trace flag
         OI    W_F$TRAC,W_F$CRI    Turn on criteria trace flag
         B     TRACEOPN            Open DAFTRACE
PARMMOD  CLC   2(8,R3),=C'MODTRACE'  Module trace requested ?
         BNE   PARMCRIT            Yes, check criteria trace
         OI    W_F$TRAC,W_F$MOD    Turn on module trace flag
         B     TRACEOPN            Open DAFTRACE
PARMCRIT CLC   2(8,R3),=C'CRITRACE'  Criteria trace requested ?
         BNE   NOJCLPRM            No, continue
         OI    W_F$TRAC,W_F$CRI    Turn on criteria trace flag
         B     TRACEOPN            Open DAFTRACE
TRACEOPN MVC   DAFTRACE(L_DAFTRA),P_DAFTRA Copy DAFTRACE DCB template
         MVC   W_OPENO(L_OPENO),T_OPENO Copy open parameter list
         OPEN  DAFTRACE,MF=(E,W_OPENO) Open DAFTRACE
         TM    DAFTRACE+48,X'10'   DAFTRACE open ?
         BNZ   TRACEOK             Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,P_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=8 Return code
         MVC   W_WTOMSG+44(13),=CL13'OPEN/DAFTRACE' System macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
TRACEOK  EQU   *                   The file is open
         LA    R15,W_DAFTRA        DAFTRACE control
         USING D_PRTCTL,R15        Reference DAFTRACE control
         LA    R1,P_LOG            Get DAFTRACE header address
         ST    R1,D_PRTHDR         Store DAFTRACE header address
         ZAP   D_PRTPGE,=P'0'      Initialize page DAFTRACE counter
         ZAP   D_PRTLNE,=P'99'     Initialize line DAFTRACE counter
NOJCLPRM EQU   *
         L     R4,W_SMFTBL         Set SMF table base address
         USING D_SMFTBL,R4         Reference SMF table
         LA    R5,#_SMFTBL         SMF definition table count
INITRECN EQU   *
         XR    R6,R6               Clear SMF record type
         ICM   R6,B'0001',D_SMFRTY SMF record type
         SMFRTEST RECTYPE=(R6) SUBSYS=TSO Testing Record Recording
*        LR    R7,R15              Clear SMF record type
*        ABEND X'BAD',DUMP,,SYSTEM
         C     R15,=F'0'           OK ?
         BE    INITRECI            . Yes
         $MSG  W_LOG,DAF530I       Move message template
         MVC   W_LOG+52(64),D_SMFRNM SMF Record Name
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
INITRECI EQU   *
         LA    R4,L_SMFTBL(,R4)    Next SMF table entry
         BCT   R5,INITRECN         Another SMF table entry ?
         $MSG  W_LOG,DAF521I       Move message template
         MVC   W_LOG+32(14),=CL14'Initialization'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         DROP  R4                  Dereference SMF table
DAFINIT  $EXIT                     Exit
**********************************************************************
         TITLE 'DAFPROC - Process'
**********************************************************************
DAFPROC  $ENTRY AMODE=24,RMODE=24  Entry
         CALL  DAFPS               Process control statements
         CLC   W_RC,=F'0'          Ok ?
         BNE   DAFPROCR            . No
         CALL  DAFES               Extract SMF records
         CLC   W_RC,=F'0'          Ok ?
         BNE   PROCGS              . No
         CALL  DAFSS               Sort extracted SMF records
         CALL  DAFGR               Generate report
PROCGS   EQU   *
         CALL  DAFGS               Generate statistics
DAFPROC  $EXIT                     Exit
**********************************************************************
         TITLE 'DAFTERM - Termination'
**********************************************************************
DAFTERM  $ENTRY AMODE=24,RMODE=24  Entry
*
**       Initialize ISPF Environment
*
         $MSG  W_LOG,DAF520I       Move message template
         MVC   W_LOG+32(11),=CL11'Termination'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         L     R3,W_KWDTBL         Set keyword table base
         USING D_KWDTBL,R3         Reference keyword table
         LA    R4,#_KWDTBL         Keyword table count
DTNXTKW  LH    R6,D_KWDVGL         Value getmain length
         LA    R7,#_OPTBL          Operator table count
         LA    R8,D_KWDVGA         Operand address
DTNXTOP  L     R5,0(R8)
         LTR   R5,R5               Any ?
         BZ    DTINCOP             No
         STORAGE RELEASE,ADDR=(5),LENGTH=(6) Release value area
         LTR   R15,R15             OK ?
         BZ    RLVALOK             Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,P_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=8 Return code
         MVC   W_WTOMSG+44(13),=CL13'RELEASE/VALUE' System macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
RLVALOK  EQU   *
DTINCOP  LA    R8,4(,R8)           Next value getmain address
         BCT   R7,DTNXTOP          Another operator ?
DTNOFRE  LA    R3,L_KWDTBL(,R3)    Next keyword table entry
         BCT   R4,DTNXTKW          Another keyword ?
         DROP  R3                  Dereference keyword table
*
**       Close DAFSNAP
*
         MVC   W_CLOSE(L_CLOSE),T_CLOSE Copy CLOSE parameter list
         CLOSE DAFSNAP,MF=(E,W_CLOSE) Close DAFSNAP
*
**       Close DAFTRACE
*
         MVC   W_CLOSE(L_CLOSE),T_CLOSE Copy CLOSE parameter list
         CLOSE DAFTRACE,MF=(E,W_CLOSE) Close DAFTRACE
         MVC   W_ESTAE(L_ESTAE),T_ESTAE Copy ESTAE parameter list
         ESTAE 0,MF=(E,W_ESTAE)    Cancel ESTAE
         LTR   R15,R15             OK ?
         BZ    ESTAEOK3            Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,P_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=8 Return code
         MVC   W_WTOMSG+44(12),=CL12'ESTAE/CANCEL' System macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
ESTAEOK3 EQU   *
         L     R0,=F'32768'        SMFREC length
         L     R5,W_SMFBAS         SMFREC address
         STORAGE RELEASE,ADDR=(5),LENGTH=(0) Release SMFREC
         LTR   R15,R15             OK ?
         BZ    RLRECOK             Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,P_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=8 Return code
         MVC   W_WTOMSG+44(11),=CL11'RELEASE/SMFREC' System macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
RLRECOK  EQU   *
         L     R0,=F'8192'         Keyword table length
         L     R5,W_KWDTBL         Keyword table address
         STORAGE RELEASE,ADDR=(5),LENGTH=(0) Release dynamic keyword
         LTR   R15,R15             OK ?
         BZ    RLKWDOK             Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,P_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=8 Return code
         MVC   W_WTOMSG+44(11),=CL11'RELEASE/KWD' System macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
RLKWDOK  EQU   *
         LA    R0,@_SMFTBL         SMF table length
         L     R5,W_SMFTBL         SMF table address
         STORAGE RELEASE,ADDR=(5),LENGTH=(0) Release dynamic SMF table
         LTR   R15,R15             OK ?
         BZ    RLSMFOK             Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,P_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=8 Return code
         MVC   W_WTOMSG+44(11),=CL11'RELEASE/SMF' System macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
RLSMFOK  EQU   *
         $MSG  W_LOG,DAF521I       Move message template
         MVC   W_LOG+32(11),=CL11'Termination'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
*
**       Close DAFLOG
*
         MVC   W_CLOSE(L_CLOSE),T_CLOSE Copy CLOSE parameter list
         CLOSE DAFLOG,MF=(E,W_CLOSE) Close DAFLOG
DAFTERM  $EXIT                     Exit
**********************************************************************
         TITLE 'DAFDWA - Dynamic Workarea'
**********************************************************************
DAFDWA   DSECT                     Workarea dynamic
W_ACB@   DS    F                   ACB address
W_KWDTB# DS    F                   Keyword table count
W_AREA@  DS    F                   Area address
W_CL16   DS    CL016               Word
W_EXLST  DS    F                   EXLST
W_EXLST@ DS    F                   EXLST address
W_JFCB   DS    0F,176C             JFCB
W_TRT    DS    XL256               Translate and test table
W_SABEND DS    CL4                 System abend code
W_UABEND DS    CL5                 User abend code
W_NAME   DS    CL20                Name
W_VAL1O  DS    CL44                Original value 1
W_VAL2O  DS    CL44                Original value 2
W_VAL1R  DS    CL44                Resolved value 1
W_VAL2R  DS    CL44                Resolved value 2
W_OPVAL  DS    CL44                Operand value
W_CSKWD  DS    CL10                Control statement keyword
W_CSKWD@ DS    F                   Control statement keyword length
W_CSOP   DS    CL5                 Control statement operator
W_CSOP@  DS    F                   Control statement operator length
W_CSVAL  DS    CL44                Control statement value
W_MAJDES DS    CL32                Major enqueue description
W_CSVAL@ DS    F                   Control statement value length
W_MOD@   DS    F                   Module address
W_CMT@   DS    F                   Comment address
W_CSLEN  DS    F                   DAFCS LRECL
W_FLAG   DS    BL1                 Flags
W_F$CC   EQU   X'80'               DAFCC flag
W_F$VSAM EQU   X'40'               DAFSMF VSAM flag
W_F$CS   DS    BL1                 Control statement error flags
W_F$KWD  EQU   X'80'               Keyword error flag
W_F$OP   EQU   X'40'               Operator error flag
W_F$VAL  EQU   X'20'               Value error flag
W_F$TRAC DS    BL1                 Trace Flags
W_F$MOD  EQU   X'80'               Module Trace Flag
W_F$CRI  EQU   X'40'               Criteria Trace Flag
W_F$BIT0 EQU   X'80'               Bit 0 flag
W_F$BIT1 EQU   X'40'               Bit 1 flag
W_F$BIT2 EQU   X'20'               Bit 2 flag
W_F$BIT3 EQU   X'10'               Bit 3 flag
W_F$BIT4 EQU   X'08'               Bit 4 flag
W_F$BIT5 EQU   X'04'               Bit 5 flag
W_F$BIT6 EQU   X'02'               Bit 6 flag
W_F$BIT7 EQU   X'01'               Bit 7 flag
W_F$CTRI EQU   X'3F'               JFCBCTRI insignificant bits
W_RPL@   DS    F                   RPL address
W_STRHDR DS    AL1                 SNAP storage header length
W_PRTDET DS    0CL133              Print detail record
         ORG   W_PRTDET            Print detail record
W_CS133  DS    0CL133              DAFCS record
*        DS    CL1
*_CS     DS    CL80                DAFCS record
*        DS    CL52                DAFCS error
*        ORG   W_PRTDET            Print detail record
W_LOG    DS    0CL133              DAFLOG record
         ORG   W_PRTDET            Print detail record
W_RPT    DS    0CL133              DAFRPT record
         ORG   W_PRTDET            Print detail record
W_RPT1   DS    0CL133              DAFRPT DSN record
W_RPT1CC DS    CL1
W_RPTDSN DS    CL(L'W_DSN1)
L_RPT1   EQU   *-W_RPT1
         ORG   W_PRTDET            Print detail record
W_RPT2   DS    0CL133              DAFRPT detail record
W_RPT2CC DS    CL1
W_RPTDTE DS    CL(L'W_DATE)
         DS    CL1
W_RPTTME DS    CL(L'W_TIME)
         DS    CL1
W_RPTSID DS    CL(L'W_SYSTEM)      System identification
         DS    CL1
W_RPTJOB DS    CL(L'W_JOB1)        Job name
         DS    CL1
W_RPTUSR DS    CL(L'W_USER)        User identification
         DS    CL1
W_RPTRTY DS    CL(L'W_RECORD)
         DS    CL1
W_RPTCMT DS    CL(L'W_SRTCM1)
L_RPT2   EQU   *-W_RPT2
         ORG   W_PRTDET            Print detail record
W_STAT   DS    0CL133              DAFSTAT Print Record
W_STATCC DS    CL1
W_STATSM DS    CL15                DAFSMF counter
         DS    CL1
W_STATRP DS    CL15                DAFRPT count
         DS    CL1
W_STATIN DS    CL15                Invalid DSN counter
         DS    CL4
W_STATNM DS    CL64
         DS    CL1
         ORG   W_PRTDET+133        Print detail record
W_DSN1   DS    CL44                Dataset 1
W_DATE   DS    CL7                 Date
W_TIME   DS    CL11                Time
W_SYSTEM DS    CL4                 System identification
W_JOB1   DS    CL8                 Job name 1
W_USER   DS    CL8                 User identification
W_RECORD DS    CL3                 Record type
W_SRTCM1 DS    CL87                Comment line 1
W_SRTCM2 DS    CL88                Comment line 2
W_SRTCM3 DS    CL88                Comment line 3
W_SRTCM4 DS    CL88                Comment line 4
W_SRTCM5 DS    CL88                Comment line 5
L_SRTCMT EQU   *-W_SRTCM1          Comment area length
         ORG   W_SRTCM1
W_SRTCMT DS    0CL(L_SRTCMT)       Comment area
         ORG   *+L_SRTCMT
L_SORT   EQU   *-W_DSN1            Sort record length
         ORG   W_DSN1
W_SORT   DS    0CL(L_SORT)         SORTIN/SORTOUT record
         ORG   *+L_SORT
W_CATALO DS    CL44                Catalog name
W_DD     DS    CL8                 Data definition name
W_DSN2   DS    CL44                Dataset 2
W_JOB2   DS    CL8                 Job name 2
W_JOB3   DS    CL8                 Job name 3
W_JOB4   DS    CL8                 Job name 4
W_JOB5   DS    CL8                 Job name 5
W_MAJOR  DS    CL8                 Major enqueue name
W_MEMBER DS    CL8                 Member name
W_MINOR  DS    CL44                Minor enqueue name
W_EXCP   DS    F                   EXCP
W_GROUP  DS    CL8                 Group
W_LRECL  DS    F                   LRECL
W_RTY    DS    F                   SMF record type
W_VOL1   DS    CL6                 Volume serial 1
W_VOL2   DS    CL6                 Volume serial 2
W_VOL3   DS    CL6                 Volume serial 3
W_VOL4   DS    CL6                 Volume serial 4
W_VOL5   DS    CL6                 Volume serial 5
W_VOL6   DS    CL6                 Volume serial 6
W_VOL7   DS    CL6                 Volume serial 7
W_VOL8   DS    CL6                 Volume serial 8
W_VOL9   DS    CL6                 Volume serial 9
W_VOLA   DS    CL6                 Volume serial 10
W_VVDS   DS    CL44                VVDS name
W_WTX    DS    CL4
L_CRIT   EQU   *-W_CATALO          Criteria length
         ORG   W_CATALO
W_CRIT   DS    0CL(L_CRIT)         Criteria area
         ORG   *+L_CRIT
O_CATALO EQU   W_CATALO-DAFDWA     Catalog name offset
O_SYSTEM EQU   W_SYSTEM-DAFDWA     System identification offset
O_DATE   EQU   W_DATE-DAFDWA       Date offset
O_DD     EQU   W_DD-DAFDWA         Data definition name offset
O_DSN1   EQU   W_DSN1-DAFDWA       Dataset 1 offset
O_DSN2   EQU   W_DSN2-DAFDWA       DSN 2 offset
O_JOB1   EQU   W_JOB1-DAFDWA       Job name 1 offset
O_JOB2   EQU   W_JOB2-DAFDWA       JOB name 2 offset
O_JOB3   EQU   W_JOB3-DAFDWA       JOB name 3 offset
O_JOB4   EQU   W_JOB4-DAFDWA       JOB name 4 offset
O_JOB5   EQU   W_JOB5-DAFDWA       JOB name 5 offset
O_MAJOR  EQU   W_MAJOR-DAFDWA      Major enqueue name offset
O_MEMBER EQU   W_MEMBER-DAFDWA     Member name offset
O_MINOR  EQU   W_MINOR-DAFDWA      Minor enqueue name offset
O_EXCP   EQU   W_EXCP-DAFDWA       EXCP offset
O_GROUP  EQU   W_GROUP-DAFDWA      Group offset
O_LRECL  EQU   W_LRECL-DAFDWA      LRECL offset
O_RTY    EQU   W_RTY-DAFDWA        SMF record type offset
O_TIME   EQU   W_TIME-DAFDWA       Time offset
O_USER   EQU   W_USER-DAFDWA       User identification offset
O_VOLA   EQU   W_VOLA-DAFDWA       Volume serial 10 offset
O_VOL1   EQU   W_VOL1-DAFDWA       Volume serial 1 offset
O_VOL2   EQU   W_VOL2-DAFDWA       Volume serial 2 offset
O_VOL3   EQU   W_VOL3-DAFDWA       Volume serial 3 offset
O_VOL4   EQU   W_VOL4-DAFDWA       Volume serial 4 offset
O_VOL5   EQU   W_VOL5-DAFDWA       Volume serial 5 offset
O_VOL6   EQU   W_VOL6-DAFDWA       Volume serial 6 offset
O_VOL7   EQU   W_VOL7-DAFDWA       Volume serial 7 offset
O_VOL8   EQU   W_VOL8-DAFDWA       Volume serial 8 offset
O_VOL9   EQU   W_VOL9-DAFDWA       Volume serial 9 offset
O_VVDS   EQU   W_VVDS-DAFDWA       VVDS name offset
O_WTX    EQU   W_WTX-DAFDWA
W_TRACE  DS    0CL133              DAFTRACE Print Record
         ORG   W_TRACE+133         DAFTRACE Print Record
*_HDR    DS    CL133               Header record
W_77EDS  DS    F                   Enqueue data section offset
W_77EDN  DS    H                   Enqueue data section count
W_77EDL  DS    H                   Enqueue data section length
W_80REL  DS    H                   Relocate section offset
W_80CNT  DS    H                   Relocate section count
W_81REL  DS    H                   Relocate section offset
W_81CNT  DS    H                   Relocate section count
W_CURDTE DS    CL5                 Current Julian Date YYDDD
W_DBL    DS    2D                  2-Doubleword work area
W_DOUBLE DS    D                   Doubleword work area
W_SMFBAS DS    F                   Current SMF record base
W_SMFOFF DS    F                   Current SMF record offset
W_SMFTAB DS    F                   Current SMF table base
W_KWDTBL DS    F                   Dynamic keyword table address
W_KWD@   DS    F                   Current keyword table address
W_OP@    DS    F                   Current operator table address
W_SMFTBL DS    F                   Dynamic SMF table address
W_DAFLOG DS    CL9                 DAFLOG control
W_DAFRPT DS    CL9                 DAFRPT control
W_DAFSTA DS    CL9                 DAFSTAT control
W_DAFTRA DS    CL9                 DAFTRACE control
DOUBLE   DS    D                   Doubleword work area
W_FULL1  DS    F                   Fullword work area
W_FULL2  DS    F                   Fullword work area
W_HALF1  DS    H                   Halfword work area
W_HALF2  DS    H                   Halfword work area
W_HALF3  DS    H                   Halfword work area
W_TYPE   DS    CL8                 Type
W_BINEDT DS    XL16
W_DAFPC  DS    CL40                DAFPC work area
W_DAFPT1 DS    CL32                DAFPT work area
W_DAFPT2 DS    CL32                DAFPT work area
W_DAFPT3 DS    CL32                DAFPT work area
W_DAFPT4 DS    CL32                DAFPT work area
W_DTE_HI DS    CL7                 DAFSMF high date
W_DTE_LO DS    CL7                 DAFSMF low date
W_TME_HI DS    CL11                DAFSMF high time
W_TME_LO DS    CL11                DAFSMF low time
W_TMPDTE DS    CL007               Date
W_TMPTME DS    CL11                Time
W_NTU    DS    CL8                 TTR
W_RCTMSK DS    CL20                Record count mask
W_CHAR16 DS    CL16                Work
W_LSTDSN DS    CL44                Last DSN
W_EPA    DS    F                   Entry Point Address
W_SMFOTH DS    F                   DAFSMF other count
W_SMFTOT DS    F                   DAFSMF total count
W_CSTOT  DS    F                   DAFCS total count
W_CCTOT  DS    F                   Check criteria total count
W_INVTOT DS    F                   Invalid DSN total count
W_RPTTOT DS    F                   DAFRPT total count
W_RC     DS    F                   Return code
W_CMTCLR DS    CL1                 Comment clear indicator
W_TM     DS    CL1                 TM area
W_TXTLBL DS    CL16                Label area
W_WRK    DS    CL128               Work area
W_SAVCM1 DS    CL88                Save comment line
W_SAVDD  DS    CL8                 Data definition name
W_YYDDD  DS    CL5                 Working julian date
         ORG   W_YYDDD
W_YY     DS    CL2                 Working julian year
W_DDD    DS    CL3                 Working julian day
*
**       System Macros
*
         DS    0F                  Fullword alignment
W_ESTAE  EQU   *                   ESTAE parameter list
         ORG   *+L_ESTAE           ESTAE parameter list length
         DS    0F                  Fullword alignment
DAFCS    EQU   *                   DAFCS DCB
         ORG   *+L_DAFCS           DAFCS DCB length
         DS    0F                  Fullword alignment
W_LINK   EQU   *                   LINK parameter list
         ORG   *+L_LINK            LINK parameter list length
         DS    0F                  Fullword alignment
DAFLOG   EQU   *                   DAFLOG DCB
         ORG   *+L_DAFLOG          DAFLOG DCB length
         DS    0F                  Fullword alignment
DAFRPT   EQU   *                   DAFRPT DCB
         ORG   *+L_DAFRPT          DAFRPT DCB length
         DS    0F                  Fullword alignment
DAFSMF   EQU   *                   DAFSMF DCB
         ORG   *+L_DAFSMF          DAFSMF DCB length
         DS    0F                  Fullword alignment
DAFSNAP  EQU   *                   DAFSNAP DCB
         ORG   *+L_DAFSNA          DAFSNAP DCB length
         DS    0F                  Fullword alignment
DAFSTAT  EQU   *                   DAFSTAT DCB
         ORG   *+L_DAFSTA          DAFSTAT DCB length
         DS    0F                  Fullword alignment
DAFTRACE EQU   *                   DAFTRACE DCB
         ORG   *+L_DAFTRA          DAFTRACE DCB length
         DS    0F                  Fullword alignment
W_RDJFCB EQU   *                   RDJFCB parameter list
         ORG   *+L_RDJFCB          RDJFCB parameter list length
         DS    0F                  Fullword alignment
W_SNAP   EQU   *                   SNAP parameter list
         ORG   *+L_SNAP            SNAP parameter list length
         DS    0F                  Fullword alignment
SORTIN   EQU   *                   SORTIN DCB
         ORG   *+L_SORTIN          SORTIN DCB length
         DS    0F                  Fullword alignment
SORTOUT  EQU   *                   SORTOUT DCB
         ORG   *+L_SORTOU          SORTOUT DCB length
         DS    0F                  Fullword alignment
W_OPENI  EQU   *                   OPEN parameter list (Input)
         ORG   *+L_OPENI           OPEN parameter list length (Input)
         DS    0F                  Fullword alignment
W_OPENO  EQU   *                   OPEN parameter list (Output)
         ORG   *+L_OPENO           OPEN parameter list length (Output)
         DS    0F                  Fullword alignment
W_CLOSE  EQU   *                   CLOSE parameter list
         ORG   *+L_CLOSE           CLOSE parameter list length
W_WTO    EQU   *                   WTO parameter list
W_WTOMSG EQU   W_WTO+4,100         WTO message
         ORG   *+L_WTO             WTO parameter list length
DAFDWA#  EQU   *-DAFDWA            Work area length
**********************************************************************
         TITLE 'DAFAT - Abnormal Termination'
**********************************************************************
*  Input:          Parameter list pointed to by R1                   *
*                  . 00(R1) - SDWA  (R2)                             *
**********************************************************************
DAFAT    $ENTRY AMODE=24,RMODE=24, Entry                               X
               DWA=(DAFDWA,R10,DAFDWA#),                               X
               SWA=(DAFSWA,R9)
         C     R0,=F'12'           SDWA present ?
         BNE   SDWAOK              Yes, process abend
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,P_DAF901   Copy WTO message
         WTO   MF=(E,W_WTO)        Issue WTO
         B     DAFAT0              Percolate
SDWAOK   LR    R2,R1               SDWA
         USING SDWA,R2             Reference SDWA
         XR    R3,R3               Clear
         ICM   R3,B'0111',SDWACMPC Store binary data
         SLL   R3,20               Isolate user abend code
         SRL   R3,20               Isolate user abend code
         MVI   W_UABEND,C'U'       User abend indicator
         CVD   R3,W_DOUBLE         Convert user abend code to decimal
         OI    W_DOUBLE+7,X'0F'    Force sign
         UNPK  W_UABEND+1(4),W_DOUBLE+4(4) Unpack record type
ATSYSERR XR    R3,R3               Clear
         ICM   R3,B'0111',SDWACMPC Store binary data
         SRL   R3,12               Isolate system abend code
         $HEX  W_DOUBLE,(R3)
         MVI   W_SABEND,C'S'       System abend indicator
         MVC   W_SABEND+1(3),W_DOUBLE+5 System abend code
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,P_DAF900   Copy WTO message
         MVC   W_WTOMSG+14(4),W_SABEND System abend code
         MVC   W_WTOMSG+19(5),W_UABEND User abend code
         CLC   SDWANAME,=CL8'DAF'   Programe name DAF ?
         BNE   ATNOTDAF            No
         L     R3,=A(MODTBL)       Set module table base
         LA    R4,4(,R3)           First module entry
         L     R3,0(R3)            Set module table count
         LTR   R3,R3               Any modules ?
         BNP   ATNOMOD             No
         L     R5,SDWAGR12         DAF base register
         S     R5,SDWAEPA          Adjust for EPA
ATMODNXT L     R6,0(R4)
         S     R6,SDWAEPA          Adjust for EPA
         CR    R5,R6               Is it in this CSECT ?
         BE    ATMODFND            No, next module
ATMODINC LA    R4,12(,R4)          Next module entry
         BCT   R3,ATMODNXT         Any more modules ?
         B     ATNOMOD             No
ATMODFND MVC   W_WTOMSG+32(8),4(R4) Module name
         L     R6,SDWAGR12         CSECT base address
         S     R6,SDWAEPA          Adjust for EPA
         XR    R7,R7               Clear
         ICM   R7,B'0111',SDWANXTA Store next instruction address
         S     R7,SDWAEPA          Adjust for EPA
         CR    R7,R6               Offset within CSECT
         BH    ATOFFOK
         MVC   W_WTOMSG+41(9),P_BLANKS Offset unknown
         B     AT900E              Issue message
ATOFFOK  SR    R7,R6               Offset within CSECT
         $HEX  W_WTOMSG+42,(R7),LEN=8 Module offset
         B     AT900E              Issue message
ATNOTDAF EQU   *
ATNOMOD  MVC   W_WTOMSG+25(25),P_BLANKS Module & offset unknown
AT900E   WTO   MF=(E,W_WTO)        Issue WTO
ATPERC   LR    R1,R2               SDWA
         SETRP RC=0
         DROP  R2                  Dereference SDWA
DAFAT    $EXIT                     Exit
**********************************************************************
         TITLE 'DAFCC - Check Criteria'
**********************************************************************
*  Notes:          Invalid if DSN=X'40' (blank)                      *
*                  Invalid if DSN invalid characters                 *
**********************************************************************
DAFCC    $ENTRY AMODE=24,RMODE=24  Entry
         CLI   W_DSN1,C' '         Dataset 1 leading blank ?
         BE    CCDSNINV            Yes, skip it
         CLC   W_RECORD,=CL3'077'  Enqueue ?
         BE    CCDSNOK             Yes, skip DSN check
         L     R3,=A(DSNTBL)       Set DSN table base
         USING DSNTBL,R3           Reference DSN table
         TRT   W_DSN1,DSNTBL       Valid dataset 1 ?
         BZ    CCDSNOK             Yes
         DROP  R3                  Dereference DSN table
CCDSNINV L     R1,W_SMFTAB         Set SMF table base
         USING D_SMFTBL,R1         Reference SMF table
         L     R15,D_SMFINV        Get invalid individual counter
         LA    R15,1(,R15)         Increment invalid individual counter
         ST    R15,D_SMFINV        Save invalid individual counter
*        $INCR D_SMFINV            Increment invalid individual counter
         DROP  R1                  Dereference SMF table
         $INCR W_INVTOT            Increment invalid total counter
         $MSG  W_LOG,DAF610I       Move message template
         MVC   W_LOG+17(L'W_RECORD),W_RECORD Record Type
         MVC   W_LOG+21(L'W_DATE),W_DATE Record Date
         MVC   W_LOG+29(L'W_TIME),W_TIME Record Time
         MVC   W_LOG+45(L'W_DSN1),W_DSN1 Invalid dataset 1
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         L     R1,W_SMFTAB         Set SMF table base
         USING D_SMFTBL,R1         Reference SMF table
         CLC   =F'5',D_SMFINV      SNAP limit reached ?
         BL    CCSNAPOK            Yes, skip the SNAP
         DROP  R1                  Dereference SMF table
         L     R14,W_SMFBAS        Set SMF record base
         USING D_SMFREC,R14        Reference SMF record
         XR    R15,R15             Clear
         LH    R15,SMFXXLEN        SMF record length
         BCTR  R15,0               Decrement length
         AR    R15,R14             Determine SMF record ending address
         DROP  R14                 Dereference SMF record
         MVC   W_STRHDR,=AL1(100)  SNAP storage header length
         MVC   W_SNAP(L_SNAP),T_SNAP Copy SNAP parameter list
         SNAP  DCB=DAFSNAP,STORAGE=((R14),(R15)),STRHDR=W_STRHDR,      X
               MF=(E,W_SNAP)
         LTR   R15,R15             OK ?
         BZ    CCSNAPOK            Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,P_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=8 Return code
         MVC   W_WTOMSG+44(4),=CL4'SNAP' System macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
CCSNAPOK B     CCNOPUT             No, skip it
CCDSNOK  XC    W_CCTOT,W_CCTOT     Zero off include flag
         L     R3,W_KWDTBL         Set keyword table base
         USING D_KWDTBL,R3         Reference keyword table
         LA    R15,#_KWDTBL        Keyword table count
         ST    R15,W_KWDTB#        Keyword table count
CCNXTKWD LA    R5,#_OPTBL          Operator table count
         L     R8,=A(OPTBL)        Set operator table address
         USING D_OPTBL,R8          Reference operator table
CCNXTOP  LA    R15,D_KWDOVC        Operator value count
         A     R15,D_OPOFF         Operator offset
         L     R6,0(R15)           Value count
         LTR   R6,R6               Any values ?
         BZ    CCINCOP             No, next keyword table entry
         LA    R15,D_KWDVGA        Value getmain address
         A     R15,D_OPOFF         Operator offset
         L     R4,0(R15)           Value getmain address
CCNXTVAL LA    R7,D_KWDOF1         Check address
         NI    W_FLAG,255-W_F$CC   Turn off DAFCC flag
CCNXTCHK L     R2,0(R7)            Check address
         LTR   R2,R2               Any check ?
         BZ    CCINCVAL            No, next value
         AR    R2,R10              Set operand check base
         CLI   0(R2),C' '          Is operand blank
         BE    CCINCCHK            Yes, skip it
         LH    R0,D_KWDOML         Set operand maximum length
         STH   R0,W_HALF1          Set operand maximum length
         CLI   D_KWDFMT,C'F'       Fullword ?
         BNE   CCNOFULL            . No
         $FILL W_VAL1R,C' '        Blank resolved value 1
         $FILL W_VAL2R,C' '        Blank resolved value 2
         MVC   W_VAL1R(4),5(R4)    Copy value to resolved value 1
         MVC   W_VAL2R(4),0(R2)    Copy check to resolved value 2
         B     CCFULL              Continue
CCNOFULL EQU   *
         CALL  DAFRM,              Resolve Mask                        X
               (5(R4),(R2),W_HALF1),                                   X
               MF=(E,W_WRK)
CCFULL   EQU   *
         $FIND W_VAL1R,C' '        Find first blank
         $VLC  W_VAL2R,W_VAL1R,(R15),DECREMENT=NO Operand match ?
         BL    CCVLCLO1            Low
         BE    CCVLCEQ1            Equal
         BH    CCVLCHI1            High
CCVLCLO1 TM    W_F$TRAC,W_F$CRI    Criteria Trace ?
         BNO   CCVLCLO2            No
         $MSG  W_TRACE,DAF623I     Move message template
         $HEX  W_TRACE+12,W_CSTOT,LEN=2 CS count
         $HEX  W_TRACE+18,W_CCTOT,LEN=2 CC count
         MVC   W_TRACE+21(3),=C'Low'
         PUT   DAFTRACE,W_TRACE    Print a DAFTRACE record
CCVLCLO2 CLI   0(R4),X'01'         Low ?
         BNE   CCNOMTCH            No match
         B     CCMATCH             Match
CCVLCEQ1 TM    W_F$TRAC,W_F$CRI    Criteria Trace ?
         BNO   CCVLCEQ2            No
         $MSG  W_TRACE,DAF623I     Move message template
         $HEX  W_TRACE+12,W_CSTOT,LEN=2 CS count
         $HEX  W_TRACE+18,W_CCTOT,LEN=2 CC count
         MVC   W_TRACE+21(5),=C'Equal'
         PUT   DAFTRACE,W_TRACE    Print a DAFTRACE record
CCVLCEQ2 CLI   1(R4),X'01'         Equal ?
         BNE   CCNOMTCH            No match
         B     CCMATCH             Match
CCVLCHI1 TM    W_F$TRAC,W_F$CRI    Criteria Trace ?
         BNO   CCVLCHI2            No
         $MSG  W_TRACE,DAF623I     Move message template
         $HEX  W_TRACE+12,W_CSTOT,LEN=2 CS count
         $HEX  W_TRACE+18,W_CCTOT,LEN=2 CC count
         MVC   W_TRACE+21(4),=C'High'
         PUT   DAFTRACE,W_TRACE    Print a DAFTRACE record
CCVLCHI2 CLI   2(R4),X'01'         High ?
         BNE   CCNOMTCH            No match
         B     CCMATCH             Match
CCINCCHK LA    R7,4(R7)            Increment check
         B     CCNXTCHK            Next check
CCNOMTCH CLC   D_OPTXT(2),=C'NE'   Not Equal ?
         BNE   CCINCCHK            No
         NI    W_FLAG,255-W_F$CC   Turn off DAFCC flag
         B     CCINCCHK
CCMATCH  CLC   D_OPTXT(2),=C'NE'   Not Equal ?
         BNE   CCMTHALL            No
         OI    W_FLAG,W_F$CC       Turn on DAFCC flag
         B     CCINCCHK
CCMTHALL LA    R15,D_KWDOVC        Operator value count
         A     R15,D_OPOFF         Operator offset
         L     R2,0(R15)           Value count
         L     R15,W_CCTOT
         LA    R15,0(R2,R15)
         ST    R15,W_CCTOT
         B     CCINCOP
CCINCVAL TM    W_FLAG,W_F$CC       DAFCC ?
         BNO   CCINCVL2            No
         $INCR W_CCTOT             Increment DAFCC counter
CCINCVL2 LA    R4,5(,R4)           Next operand (5 byte count)
         AH    R4,D_KWDOML         Next operand
         BCT   R6,CCNXTVAL         Next value
CCINCOP  LA    R8,L_OPTBL(,R8)     Next operator entry
         BCT   R5,CCNXTOP          Any more operators ?
         DROP  R8                  Dereference operator table
CCINCKWD LA    R3,L_KWDTBL(,R3)    Next keyword table entry
         L     R1,W_KWDTB#         Keyword table count
         $DECR W_KWDTB#            Keyword table count
         BCT   R1,CCNXTKWD         Next keyword ?
         DROP  R3                  Dereference keyword table
         TM    W_F$TRAC,W_F$CRI    Criteria Trace ?
         BNO   CCNOTRA1            No
         $MSG  W_TRACE,DAF624I     Move message template
         $HEX  W_TRACE+12,W_CSTOT,LEN=2 CS count
         $HEX  W_TRACE+18,W_CCTOT,LEN=2 CC count
         MVC   W_TRACE+24(L'W_RECORD),W_RECORD RTY
         MVC   W_TRACE+32(L'W_DSN1),W_DSN1 dataset 1
         PUT   DAFTRACE,W_TRACE    Print a DAFTRACE record
CCNOTRA1 CLC   W_CSTOT,W_CCTOT     Match ?
         BNE   CCNOPUT             No, skip it
         L     R1,W_SMFTAB         Set SMF table base
         USING D_SMFTBL,R1         Reference SMF table
         L     R15,D_SMFRPT        Get DAFRPT individual counter
         LA    R15,1(,R15)         Increment DAFRPT individual counter
         ST    R15,D_SMFRPT        Save DAFRPT individual counter
*        $INCR D_SMFINV            Increment invalid individual counter
         DROP  R1                  Dereference SMF table
         $INCR W_RPTTOT            Increment DAFRPT total counter
         PUT   SORTIN,W_SORT       Write next logical SORTIN record
CCNOPUT  EQU   *
         CLC   W_CMTCLR,=C'N'      Clear comment area ?
         BE    CCCMTCLR            No
         $FILL W_SRTCMT,C' '       Blank comment
         LA    R15,W_SRTCMT        Initialize comment address
         ST    R15,W_CMT@          Initialize comment address
CCCMTCLR EQU   *
         MVC   W_CMTCLR,=C'Y'      Clear comment area
DAFCC    $EXIT                     Exit
**********************************************************************
         TITLE 'DAFCD - Convert Date'
**********************************************************************
DAFCD    $ENTRY AMODE=24,RMODE=24  Entry
         L     R2,0(R1)            Input date
         L     R3,4(R1)            Output date
         MVC   W_TMPDTE,0(R2)      Copy input date to work date
         LA    R2,W_TMPDTE         Work date address
         LA    R15,CDCOUNT         Century table count
         LA    R14,CDTABLE         Century table address
CDCHECK  EQU   *
         CLC   0(1,R2),0(R14)      Century match ?
         BE    CDMATCH             Yes
         LA    R14,CDLENGTH(R14)   Next century table entry
         BCT   R15,CDCHECK         Check next century table entry
CDMATCH  EQU   *
         MVC   0(1,R2),1(R14)
         OI    3(R2),X'0F'         Remove date sign
         UNPK  0(7,R3),0(4,R2)     Unpack date
         B     DAFCD0              Exit
CDTABLE  EQU   *                   Century table
         DC    X'00',X'19'         00 = 19xx
CDLENGTH EQU   (*-CDTABLE)         Century table entry length
         DC    X'01',X'20'         01 = 20xx
         DC    X'02',X'21'         02 = 21xx
         DC    X'03',X'22'         03 = 22xx
         DC    X'04',X'23'         04 = 23xx
         DC    X'05',X'24'         05 = 24xx
         DC    X'06',X'25'         06 = 25xx
         DC    X'07',X'26'         07 = 26xx
         DC    X'08',X'27'         08 = 27xx
         DC    X'09',X'28'         09 = 28xx
CDCOUNT  EQU   (*-CDTABLE)/CDLENGTH Century table entry count
         DC    X'FF',X'99'         ?? = 99xx (if not found)
DAFCD    $EXIT                     Exit
**********************************************************************
         TITLE 'DAFCSP - Control Statement Parse'
**********************************************************************
*  Input:          Control statement image in W_LOG                  *
*  Output:         R15: 00 - Process keyword, operator and value     *
*                  R15: 04 - Get next control statement              *
*  Notes:          None                                              *
**********************************************************************
DAFCSP   $ENTRY AMODE=24,RMODE=24  Entry
         CLC   W_LOG+8(1),=C'*'    Comment ?
         BE    CSCMT               Yes
         LA    R3,W_LOG+8          DAFCS pointer
         L     R4,W_CSLEN          DAFCS length
*
**       Locate Keyword
*
         $FILL W_TRT,X'FF'         Non-blank TRT
         MVI   W_TRT+C' ',X'00'    Non-blank TRT
         $VLTRT (R3),W_TRT,(R4)    Look for Non-blank
         BZ    CSNOBLNK            No Non-blank found
         LA    R4,1(R4)            Increment beginning address
         LR    R5,R1               Save keyword begining address
         SR    R1,R3               Determine offset
         AR    R3,R1               Adjust DAFCS address
         SR    R4,R1               Adjust DAFCS length
         $FILL W_TRT,X'00'         Blank TRT
         MVI   W_TRT+C' ',X'FF'    Blank TRT
         $VLTRT (R3),W_TRT,(R4)    Look for blank
         BZ    CSNOKWD             No keyword found - skip it
         LA    R4,1(R4)            Increment beginning address
         LR    R6,R1               Save keyword ending address
         SR    R1,R3               Determine offset
         AR    R3,R1               Adjust DAFCS address
         SR    R4,R1               Adjust DAFCS length
         SR    R6,R5               Determine keyword length
         ST    R1,W_CSKWD@         Save keyword length
         LR    R15,R1              Keyword length
         $VLM  W_CSKWD,(R5),(R15)  Move the keyword
*
**       Locate Operator
*
         $FILL W_TRT,X'FF'         Non-blank TRT
         MVI   W_TRT+C' ',X'00'    Non-blank TRT
         $VLTRT (R3),W_TRT,(R4)    Look for Non-blank
         BZ    CSNOBLNK            No Non-blank found
         LA    R4,1(R4)            Increment beginning address
         LR    R5,R1               Save operator begining address
         SR    R1,R3               Determine offset
         AR    R3,R1               Adjust DAFCS address
         SR    R4,R1               Adjust DAFCS length
         $FILL W_TRT,X'00'         Blank TRT
         MVI   W_TRT+C' ',X'FF'    Blank TRT
         $VLTRT (R3),W_TRT,(R4)    Look for blank
         BZ    CSNOOP              No operator found - skip it
         LA    R4,1(R4)            Increment beginning address
         LR    R6,R1               Save operator ending address
         SR    R1,R3               Determine offset
         AR    R3,R1               Adjust DAFCS address
         SR    R4,R1               Adjust DAFCS length
         SR    R6,R5               Determine operator length
         ST    R1,W_CSOP@          Save operator length
         LR    R15,R1              Operator length
         $VLM  W_CSOP,(R5),(R15)   Move the operator
*
**       Locate Value
*
         $FILL W_TRT,X'FF'         Non-blank TRT
         MVI   W_TRT+C' ',X'00'    Non-blank TRT
         $VLTRT (R3),W_TRT,(R4)    Look for Non-blank
         BZ    CSNOBLNK            No Non-blank found
         LA    R4,1(R4)            Increment beginning address
         LR    R5,R1               Save value begining address
         SR    R1,R3               Determine offset
         AR    R3,R1               Adjust DAFCS address
         SR    R4,R1               Adjust DAFCS length
         $FILL W_TRT,X'00'         Blank TRT
         MVI   W_TRT+C' ',X'FF'    Blank TRT
         $VLTRT (R3),W_TRT,(R4)    Look for blank
         BZ    CSNOVAL             No value found - skip it
         LA    R4,1(R4)            Increment beginning address
         LR    R6,R1               Save value ending address
         SR    R1,R3               Determine offset
         AR    R3,R1               Adjust DAFCS address
         SR    R4,R1               Adjust DAFCS length
         SR    R6,R5               Determine value length
         ST    R1,W_CSVAL@         Save value length
         LR    R15,R1              Decrement value length
         $VLM  W_CSVAL,(R5),(R15)  Move the value
         L     R3,W_KWDTBL         Set keyword table address
         USING D_KWDTBL,R3         Reference keyword table
         LA    R0,#_KWDTBL         Keyword table count
CSKWDNXT CLC   W_CSKWD,D_KWDTXT    Valid keyword text ?
         BE    CSKWDFND            Yes
         CLC   W_CSKWD,D_KWDAL1    Valid keyword alias 1 ?
         BE    CSKWDFND            Yes
         CLC   W_CSKWD,D_KWDAL2    Valid keyword alias 2 ?
         BE    CSKWDFND            Yes
         CLC   W_CSKWD,D_KWDAL3    Valid keyword alias 3 ?
         BE    CSKWDFND            Yes
         CLC   W_CSKWD,D_KWDAL4    Valid keyword alias 4 ?
         BE    CSKWDFND            Yes
         CLC   W_CSKWD,D_KWDAL5    Valid keyword alias 5 ?
         BE    CSKWDFND            Yes
         LA    R3,L_KWDTBL(,R3)    Increment keyword table entry
         BCT   R0,CSKWDNXT         Check next keyword table entry
         MVC   W_LOG+53(24),=C'<--- Unknown keyword    '
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         OI    W_F$CS,W_F$KWD      Turn on keyword error flag
         B     DAFCSP4
CSKWDFND L     R4,=A(OPTBL)        Set operator table address
         USING D_OPTBL,R4          Reference keyword table
         LA    R0,#_OPTBL          Operator table count
CSOPNEXT CLC   W_CSOP,D_OPTXT      Valid operator text ?
         BE    CSOPFND             Yes
         LA    R4,L_OPTBL(,R4)     Increment operator table entry
         BCT   R0,CSOPNEXT         Check next operator table entry
         MVC   W_LOG+53(24),=C'<--- Unknown operator   '
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         OI    W_F$CS,W_F$OP       Turn on operator error flag
         B     DAFCSP4
CSOPFND  L     R7,W_CSVAL@         Value length
         LTR   R7,R7               Value missing ?
         BNZ   CSVALOK1            No
         MVC   W_LOG+53(24),=C'<--- Value Missing    '
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         OI    W_F$CS,W_F$VAL      Turn on operator error flag
         B     DAFCSP4
CSVALOK1 CH    R7,D_KWDOML         Value too long ?
         BNH   CS$TYPE             No
         MVC   W_LOG+53(24),=C'<--- Value too long     '
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         OI    W_F$CS,W_F$VAL      Turn on value error flag
         B     DAFCSP4
CS$TYPE  CLC   D_KWDTYP,=CL8'GENERAL' General type ?
         BE    CSPOK               Yes - process it
         CLC   W_TYPE,=CL8' '      Specific types yet ?
         BE    CSMVTYPE            No - move this one
         CLC   D_KWDTYP,W_TYPE     Same specific type ?
         BE    CSPOK               Yes - process it
         MVC   W_LOG+53(24),=C'<--- Inconsistent type  '
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         OI    W_F$CS,W_F$KWD      Turn on keyword error flag
         B     DAFCSP4
CSMVTYPE MVC   W_TYPE,D_KWDTYP     Set type
         B     CSPOK
CSCMT    $PRINT DAFLOG,W_LOG       Put DAFLOG record
         B     DAFCSP4
CSNOBLNK MVC   W_LOG+53(24),=C'<--- Unable to parse    '
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         OI    W_F$CS,W_F$KWD      Turn on keyword error flag
         B     DAFCSP4
CSNOKWD  MVC   W_LOG+53(24),=C'<--- Missing keyword    '
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         OI    W_F$CS,W_F$KWD      Turn on keyword error flag
         B     DAFCSP4
CSNOOP   MVC   W_LOG+53(24),=C'<--- Missing operator   '
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         OI    W_F$CS,W_F$OP       Turn on operator error flag
         B     DAFCSP4
CSNOVAL  MVC   W_LOG+53(24),=C'<--- Missing value      '
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         OI    W_F$CS,W_F$VAL      Turn on value error flag
         B     DAFCSP4
CSPOK    EQU   *
         CLI   D_KWDFMT,C'F'       Fullword ?
         BNE   CSPNOF              . No - continue
         MVC   W_CL16,=16C'0'
         LA    R5,W_CL16
         LA    R5,15(R5)
         LA    R6,W_CSVAL
         L     R7,W_CSVAL@
         SR    R5,R7
         LA    R5,1(R5)
CSPFWNXT EQU   *
         MVC   0(1,R5),0(R6)
         LA    R5,1(R5)
         LA    R6,1(R6)
         BCT   R7,CSPFWNXT
         ZAP   W_DBL,=P'0'         Zero
         PACK  W_DBL,W_CL16        Pack
         CVB   R5,W_DBL            Convert to binary
         ST    R5,W_CSVAL          Store binary value
         MVC   W_CSVAL@,=F'4'      Store binary length (4)
CSPNOF   EQU   *
         ST    R3,W_KWD@           Keyword table pointer
         ST    R4,W_OP@            Operator table pointer
         B     DAFCSP0
DAFCSP   $EXIT                     Exit
         DROP  R3                  Dereference keyword table
         DROP  R4                  Dereference operator table
**********************************************************************
         TITLE 'DAFCT - Convert Time'
**********************************************************************
DAFCT    $ENTRY AMODE=24,RMODE=24  Entry
         L     R2,0(R1)            Input Time
         L     R3,4(R1)            Output Time
         MVC   W_DBL(4),0(R2)      Move SMF record binary time
         L     R1,W_DBL            Load SMF record binary time
         SLR   R0,R0               Clear
         D     R0,=F'360000'       Determine hours
         CVD   R1,W_DBL            Convert hours
         OI    W_DBL+7,X'0F'       Force sign
         UNPK  0(2,R3),W_DBL+6(2)  Unpack hours
         MVI   2(R3),C'.'          Move period
         SRDL  R0,32               Remaining hundredths of seconds
         D     R0,=F'6000'         Determine minutes
         CVD   R1,W_DBL            Convert minutes
         OI    W_DBL+7,X'0F'       Force sign
         UNPK  3(2,R3),W_DBL+6(2)  Unpack minutes
         MVI   5(R3),C'.'          Move period
         SRDL  R0,32               Remaining hundredths of seconds
         D     R0,=F'100'          Determine seconds
         CVD   R1,W_DBL            Convert seconds
         OI    W_DBL+7,X'0F'       Force sign
         UNPK  6(2,R3),W_DBL+6(2)  Unpack seconds
         MVI   8(R3),C'.'          Move period
         CVD   R0,W_DBL            Convert hundredths of seconds
         OI    W_DBL+7,X'0F'       Force sign
         UNPK  9(2,R3),W_DBL+6(2)  Unpack hundredths of seconds
DAFCT    $EXIT                     Exit
         AIF   ('&RT_DFSORT' EQ '000').NODFSORT1
**********************************************************************
         TITLE 'DAF016 - Extract SMF Record 16'
**********************************************************************
DAF016   $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING ICESMFH,R3          Reference SMF record - Header
         A     R3,ICEPROD          Add product section offset
         DROP  R3                  Dereference SMF record - Header
         USING ICESMFP,R3          Reference SMF record - Product
         CLC   ICERELNM,=CL4'13.0' DFSORT Release 13 ?
         BL    DAF0164             Lower than Release 13 - Exit
         DROP  R3                  Dereference SMF record - Product
         L     R3,W_SMFBAS         Set SMF record base
         USING ICESMFH,R3          Reference SMF record - Header
         L     R4,ICEDATA          Load data section offset
         XR    R5,R5               Clear
         LH    R5,ICEDATAL         Load data section length
         XR    R6,R6               Clear
         LH    R6,ICEDATAN         Load data section number
         LTR   R6,R6               Any data sections ?
         BNP   E16DATAEND          No, continue
         AR    R3,R4               Add data section offset
         ST    R3,W_SMFOFF         Add data section offset
         CALL  DAFD16              Extract SMF Record 16 - Data
E16DATAEND EQU   *                 End of data section
         DROP  R3                  Dereference SMF record - Product
         L     R3,W_SMFBAS         Set SMF record base
         USING ICESMFH,R3          Reference SMF record - Header
         L     R4,ICEINDS          Load input section offset
         XR    R5,R5               Clear
         LH    R5,ICEINDSL         Load input section length
         XR    R6,R6               Clear
         LH    R6,ICEINDSN         Load input section number
         LTR   R6,R6               Any input sections ?
         BNP   E16INEND            No, continue
         AR    R3,R4               Add input section offset
         ST    R3,W_SMFOFF         Add input section offset
E16IN    EQU   *
         CALL  DAFI16              Extract SMF Record 16 - Input
         AR    R3,R5               Next input
         ST    R3,W_SMFOFF         Add data section offset
         BCT   R6,E16IN            Next input
E16INEND EQU   *                   End of Input
         L     R3,W_SMFBAS         Set SMF record base
         USING ICESMFH,R3          Reference SMF record - Header
         L     R4,ICEOTDS          Load SORTOUT section offset
         XR    R5,R5               Clear
         LH    R5,ICEOTDSL         Load SORTOUT section length
         XR    R6,R6               Clear
         LH    R6,ICEOTDSN         Load SORTOUT section number
         LTR   R6,R6               Any SORTOUT sections ?
         BNP   E16OTEND            No, continue
         AR    R3,R4               Add SORTOUT section offset
         ST    R3,W_SMFOFF         Add SORTOUT section offset
E16OT    EQU   *
         CALL  DAFS16              Extract SMF Record 16 - SORTOUT
         AR    R3,R5               Next SORTOUT
         ST    R3,W_SMFOFF         Add data section offset
         BCT   R6,E16OT            Next SORTOUT
E16OTEND EQU   *                   End of SORTOUT
         L     R3,W_SMFBAS         Set SMF record base
         USING ICESMFH,R3          Reference SMF record - Header
         L     R4,ICEOFDS          Load Outfil section offset
         XR    R5,R5               Clear
         LH    R5,ICEOFDSL         Load Outfil section length
         XR    R6,R6               Clear
         LH    R6,ICEOFDSN         Load Outfil section number
         LTR   R6,R6               Any Outfil sections ?
         BNP   E16OFEND            No, continue
         AR    R3,R4               Add SORTOUT section offset
         ST    R3,W_SMFOFF         Add SORTOUT section offset
E16OF    EQU   *
         CALL  DAFO16              Extract SMF Record 16 - Outfil
         AR    R3,R5               Next Outfil
         ST    R3,W_SMFOFF         Add SORTOUT section offset
         BCT   R6,E16OF            Next Outfil
E16OFEND EQU   *                   End of Outfil
         B     DAF0164             Check criteria not needed
DAF016   $EXIT                     Exit
**********************************************************************
         TITLE 'DAFD16 - Extract SMF Record 16 - Data'
**********************************************************************
DAFD16   $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING ICESMFH,R3          Reference SMF record - Header
         MVC   W_JOB1,ICEJOBNM     Job name
         MVC   W_USER,ICEUSER      User identification
         MVC   W_GROUP,ICEGROUP    Group
         CALL  DAFMC,              Move Comment                        X
               (=C'GROUP=',W_GROUP,8), Group                           X
               MF=(E,W_WRK)
         L     R3,W_SMFOFF         Load data section offset
         DROP  R3                  Dereference SMF record - Header
         USING ICESMFD,R3          Reference SMF record - Data
         CLI   ICEIDSNM,X'00'      SORTIN present ?
         BE    DAFD16NI            . No
         MVC   W_DSN1,ICEIDSNM     Dataset
         CALL  DAFPV,              Process Volume Serials              X
               (=F'1',4,ICEIVOLS,0,6), Process Volume Serials          X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'INPDS=',ICEINPDS,2), Bytes sorted                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'INNDS=',ICEINNDS,2), Bytes sorted                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'OUTDS=',ICEOUTDS,2), Bytes sorted                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'OFLDS=',ICEOFLDS,2), Bytes sorted                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'RCDS=',ICERCDS,4), Records sorted                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'BYTES=',ICEBYTES,4), Bytes sorted                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'CPUT=',ICECPUT,4), Sort CPU time                    X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'WBLK=',ICEWBLK,4), Sort work tracks used            X
               MF=(E,W_WRK)
         L     R14,=A(T16TOO)      ICEFLBY2
         CALL  DAFPT,              Process TM Table                    X
               ((R14),ICEFLBY2),   ICEFLBY2                            X
               MF=(E,W_WRK)
         L     R14,=A(T16CSF)      ICECSFLG
         CALL  DAFPT,              Process TM Table                    X
               ((R14),ICECSFLG),   ICECSFLG                            X
               MF=(E,W_WRK)
         CALL  DAFCC               Check criteria
DAFD16NI EQU   *
         $FILL W_SRTCMT,C' '       Blank comment
         LA    R15,W_SRTCMT        Initialize comment address
         ST    R15,W_CMT@          Initialize comment address
         L     R3,W_SMFBAS         Set SMF record base
         USING ICESMFH,R3          Reference SMF record - Header
         MVC   W_JOB1,ICEJOBNM     Job name
         MVC   W_USER,ICEUSER      User identification
         MVC   W_GROUP,ICEGROUP    Group
         CALL  DAFMC,              Move Comment                        X
               (=C'GROUP=',W_GROUP,8), Group                           X
               MF=(E,W_WRK)
         L     R3,W_SMFOFF         Load data section offset
         DROP  R3                  Dereference SMF record - Header
         USING ICESMFD,R3          Reference SMF record - Data
         CLI   ICEODSNM,X'00'      SORTIN present ?
         BE    DAFD16NO            . No
         MVC   W_DSN1,ICEODSNM     Dataset
         CALL  DAFPV,              Process Volume Serials              X
               (=F'1',4,ICEOVOLS,0,6), Process Volume Serials          X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'INPDS=',ICEINPDS,2), Bytes sorted                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'INNDS=',ICEINNDS,2), Bytes sorted                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'OUTDS=',ICEOUTDS,2), Bytes sorted                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'OFLDS=',ICEOFLDS,2), Bytes sorted                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'RCDS=',ICERCDS,4), Records sorted                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'BYTES=',ICEBYTES,4), Bytes sorted                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'CPUT=',ICECPUT,4), Sort CPU time                    X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'WBLK=',ICEWBLK,4), Sort work tracks used            X
               MF=(E,W_WRK)
         L     R14,=A(T16TOO)      ICEFLBY2
         CALL  DAFPT,              Process TM Table                    X
               ((R14),ICEFLBY2),   ICEFLBY2                            X
               MF=(E,W_WRK)
         L     R14,=A(T16CSF)      ICECSFLG
         CALL  DAFPT,              Process TM Table                    X
               ((R14),ICECSFLG),   ICECSFLG                            X
               MF=(E,W_WRK)
         CALL  DAFCC               Check criteria
DAFD16NO EQU   *
         DROP  R3                  Dereference SMF record - Data
DAFD16   $EXIT                     Exit
**********************************************************************
         TITLE 'DAFI16 - Extract SMF Record 16 - Input'
**********************************************************************
DAFI16   $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING ICESMFH,R3          Reference SMF record - Header
         MVC   W_JOB1,ICEJOBNM     Job name
         MVC   W_USER,ICEUSER      User identification
         MVC   W_GROUP,ICEGROUP    Group
         CALL  DAFMC,              Move Comment                        X
               (=C'GROUP=',W_GROUP,8), Group                           X
               MF=(E,W_WRK)
         L     R3,W_SMFOFF         Load data section offset
         DROP  R3                  Dereference SMF record - Header
         USING ICESMFIN,R3         Reference SMF record - Input
         MVC   W_DSN1,ICEINNAM     Dataset
         CALL  DAFPV,              Process Volume Serials              X
               (=F'1',4,ICEINVOL,0,6), Process Volume Serials          X
               MF=(E,W_WRK)
         CLC   ICEINDDN,=CL8' '    Blank DDNAME ?
         BNE   I16DDN1             No
         MVC   W_DD,W_SAVDD        Data definition name
         B     I16DDN2
I16DDN1  MVC   W_DD,ICEINDDN       Data definition name
         MVC   W_SAVDD,W_DD        Data definition name
I16DDN2  CALL  DAFMC,              Move Comment                        X
               (=C'DD=',W_DD,8), Data definition name                  X
               MF=(E,W_WRK)
         L     R14,=A(T14RCF)      RECFM
         CALL  DAFPC,              Process Compare Table               X
               ((R14),ICEINRCF),   RECFM                               X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'BLKSIZE=',ICEINBKZ,2), BLKSIZE                      X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'LRECL=',ICEINLRL,2), LRECL                          X
               MF=(E,W_WRK)
         XC    W_LRECL,W_LRECL     Clear LRECL
         MVC   W_LRECL+2(2),ICEINLRL LRECL
         L     R14,=A(T16AMB)      Access Method Flags
         CALL  DAFPT,              Process TM Table                    X
               ((R14),ICEINAMB),   Access Method Flags                 X
               MF=(E,W_WRK)
         L     R14,=A(T16FL1)      Flags Byte
         CALL  DAFPT,              Process TM Table                    X
               ((R14),ICEINFL2),   Flags Byte                          X
               MF=(E,W_WRK)
         CALL  DAFCC               Check criteria
         DROP  R3                  Dereference SMF record - Input
DAFI16   $EXIT                     Exit
**********************************************************************
         TITLE 'DAFO16 - Extract SMF Record 16 - Outfil'
**********************************************************************
DAFO16   $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING ICESMFH,R3          Reference SMF record - Header
         MVC   W_JOB1,ICEJOBNM     Job name
         MVC   W_USER,ICEUSER      User identification
         MVC   W_GROUP,ICEGROUP    Group
         CALL  DAFMC,              Move Comment                        X
               (=C'GROUP=',W_GROUP,8), Group                           X
               MF=(E,W_WRK)
         L     R3,W_SMFOFF         Load data section offset
         DROP  R3                  Dereference SMF record - Header
         USING ICESMFOF,R3         Reference SMF record - Outfil
         MVC   W_DSN1,ICEOFNAM     Dataset
         CALL  DAFPV,              Process Volume Serials              X
               (=F'1',4,ICEOFVOL,0,6), Process Volume Serials          X
               MF=(E,W_WRK)
         CLC   ICEOFDDN,=CL8' '    Blank DDNAME ?
         BNE   O16DDN1             No
         MVC   W_DD,W_SAVDD        Data definition name
         B     O16DDN2
O16DDN1  MVC   W_DD,ICEOFDDN       Data definition name
         MVC   W_SAVDD,W_DD        Data definition name
O16DDN2  CALL  DAFMC,              Move Comment                        X
               (=C'DD=',W_DD,8), Data definition name                  X
               MF=(E,W_WRK)
         L     R14,=A(T14RCF)      RECFM
         CALL  DAFPC,              Process Compare Table               X
               ((R14),ICEOFRCF),   RECFM                               X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'BLKSIZE=',ICEOFBKZ,2), BLKSIZE                      X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'LRECL=',ICEOFLRL,2), LRECL                          X
               MF=(E,W_WRK)
         XC    W_LRECL,W_LRECL     Clear LRECL
         MVC   W_LRECL+2(2),ICEOFLRL LRECL
         L     R14,=A(T16AMB)      Access Method Flags
         CALL  DAFPT,              Process TM Table                    X
               ((R14),ICEOFAMB),   Access Method Flags                 X
               MF=(E,W_WRK)
         L     R14,=A(T16FL1)      Flags Byte 1
         CALL  DAFPT,              Process TM Table                    X
               ((R14),ICEOFFL1),   Flags Byte 1                        X
               MF=(E,W_WRK)
         CALL  DAFCC               Check criteria
         DROP  R3                  Dereference SMF record - Outfil
DAFO16   $EXIT                     Exit
**********************************************************************
         TITLE 'DAFS16 - Extract SMF Record 16 - SORTOUT'
**********************************************************************
DAFS16   $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING ICESMFH,R3          Reference SMF record - Header
         MVC   W_JOB1,ICEJOBNM     Job name
         MVC   W_USER,ICEUSER      User identification
         MVC   W_GROUP,ICEGROUP    Group
         CALL  DAFMC,              Move Comment                        X
               (=C'GROUP=',W_GROUP,8), Group                           X
               MF=(E,W_WRK)
         L     R3,W_SMFOFF         Load SORTOUT section offset
         DROP  R3                  Dereference SMF record - Header
         USING ICESMFOT,R3         Reference SMF record - SORTOUT
         MVC   W_DSN1,ICEOTNAM     Dataset
         CALL  DAFPV,              Process Volume Serials              X
               (=F'1',4,ICEOTVOL,0,6), Process Volume Serials          X
               MF=(E,W_WRK)
         CLC   ICEOTDDN,=CL8' '    Blank DDNAME ?
         BNE   S16DDN1             No
         MVC   W_DD,W_SAVDD        Data definition name
         B     S16DDN2
S16DDN1  MVC   W_DD,ICEOTDDN       Data definition name
         MVC   W_SAVDD,W_DD        Data definition name
S16DDN2  CALL  DAFMC,              Move Comment                        X
               (=C'DD=',W_DD,8), Data definition name                  X
               MF=(E,W_WRK)
         L     R14,=A(T14RCF)      RECFM
         CALL  DAFPC,              Process Compare Table               X
               ((R14),ICEOTRCF),   RECFM                               X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'BLKSIZE=',ICEOTBKZ,2), BLKSIZE                      X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'LRECL=',ICEOTLRL,2), LRECL                          X
               MF=(E,W_WRK)
         XC    W_LRECL,W_LRECL     Clear LRECL
         MVC   W_LRECL+2(2),ICEOTLRL LRECL
         L     R14,=A(T16AMB)      Access Method Flags
         CALL  DAFPT,              Process TM Table                    X
               ((R14),ICEOTAMB),   Access Method Flags                 X
               MF=(E,W_WRK)
         L     R14,=A(T16FL1)      Flags Byte 1
         CALL  DAFPT,              Process TM Table                    X
               ((R14),ICEOTFL1),   Flags Byte 1                        X
               MF=(E,W_WRK)
         CALL  DAFCC               Check criteria
         DROP  R3                  Dereference SMF record - SORTOUT
DAFS16   $EXIT                     Exit
.NODFSORT1 ANOP
**********************************************************************
         TITLE 'DAFES - Extract SMF Records'
**********************************************************************
DAFES    $ENTRY AMODE=24,RMODE=24  Entry
         $MSG  W_LOG,DAF520I       Move message template
         MVC   W_LOG+32(19),=CL19'Extract SMF Records'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         MVC   DAFSMF(L_DAFSMF),P_DAFSMF Copy DAFSMF DCB
         LA    R15,DAFSMF          DAFSMF
         USING IHADCB,R15          Reference DAFSMF DCB
         LA    R2,W_EXLST          Point to EXLST
         STCM  R2,B'0111',DCBEXLSA Store EXLST in DCB
         DROP  R15                 Dereference DAFSMF DCB
         XR    R15,R15             Clear EXLST
         LA    R15,W_JFCB          Point to JFCB
         ICM   R15,B'1000',=X'87000000' Type 07
         ST    R15,W_EXLST         Store EXLST
         MVC   W_RDJFCB(L_RDJFCB),T_RDJFCB Copy RDJFCB template
         RDJFCB (DAFSMF,INPUT),MF=(E,W_RDJFCB) Issue WTO
         LTR   R15,R15             OK ?
         BZ    ESJFCBOK            Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,P_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=8 Return code
         MVC   W_WTOMSG+44(13),=CL13'RDJFCB/DAFSMF' System macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
ESJFCBOK LA    R15,W_JFCB          Point to DAFSMF JFCB
         USING INFMJFCB,R15        Reference DAFSMF JFCB
         TM    JFCDSRG2,JFCORGAM   VSAM ?
         BO    ESOPNV              Yes
         DROP  R15                 Dereference DAFSMF JFCB
ESOPNQ   MVC   DAFSMF(L_DAFSMF),P_DAFSMF Copy DAFSMF DCB template
         MVC   W_OPENI(L_OPENI),T_OPENI Copy open parameter list
         OPEN  DAFSMF,MF=(E,W_OPENI) Open DAFSMF QSAM
         TM    DAFSMF+48,X'10'     DAFSMF open ?
         BNZ   ESSMFQOK            Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,P_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=8 Return code
         MVC   W_WTOMSG+44(11),=CL11'OPEN/DAFSMF' System macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
ESSMFQOK EQU   *                   The file is open
         B     ESOPNX              Continue
ESOPNV   OI    W_FLAG,W_F$VSAM     Turn on DAFSMF VSAM flag
         GENCB AM=VSAM,            Generate DAFSMF VSAM EXLST          X
               BLK=EXLST,                                              X
               EODAD=(ESEOD,A),                                        X
               MF=(G,W_WRK)
         LTR   R15,R15             OK ?
         BZ    ESGEXLOK            Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,P_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=8 Return code
         MVC   W_WTOMSG+44(11),=CL11'GENCB/EXLST' System macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
ESGEXLOK ST    R1,W_EXLST@         DAFSMF VSAM EXLST address
         L     R2,W_EXLST@         DAFSMF VSAM EXLST address
         GENCB AM=VSAM,            Generate DAFSMF VSAM ACB            X
               BLK=ACB,                                                X
               BUFND=64,                                               X
               DDNAME=DAFSMF,                                          X
               EXLST=(R2),                                             X
               LOC=BELOW,                                              X
               MACRF=(ADR,IN,NSR,NUB,SEQ),                             X
               MF=(G,W_WRK)
         LTR   R15,R15             OK ?
         BZ    ESGACBOK            Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,P_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=8 Return code
         MVC   W_WTOMSG+44(9),=CL9'GENCB/ACB' System macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
ESGACBOK ST    R1,W_ACB@           DAFSMF VSAM ACB address
         L     R2,W_ACB@           DAFSMF VSAM ACB address
         MVC   W_OPENI(L_OPENI),T_OPENI Copy open parameter list
         OPEN  ((R2)),MF=(E,W_OPENI) Open DAFSMF VSAM
         LTR   R15,R15             DAFSMF open ?
         BZ    ESSMFVOK            Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,P_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=8 Return code
         MVC   W_WTOMSG+44(11),=CL11'OPEN/DAFSMF' System macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
ESSMFVOK EQU   *                   The file is open
         STORAGE OBTAIN,LENGTH=32768,BNDRY=PAGE DAFSMF VSAM workarea
         LTR   R15,R15             OK ?
         BZ    ESGMOK              Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,P_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=8 Return code
         MVC   W_WTOMSG+44(11),=CL11'OBTAIN/VSAM' System macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
ESGMOK   ST    R1,W_AREA@          DAFSMF VSAM workarea address
         L     R2,W_ACB@           DAFSMF VSAM ACB address
         L     R3,W_AREA@          DAFSMF VSAM workarea address
         GENCB ACB=(R2),           Generate DAFSMF VSAM RPL            X
               AM=VSAM,                                                X
               AREA=(R3),                                              X
               AREALEN=32768,                                          X
               BLK=RPL,                                                X
               OPTCD=(ADR,FWD,MVE,SEQ,SYN),                            X
               LOC=BELOW,                                              X
               MF=(G,W_WRK)
         LTR   R15,R15             OK ?
         BZ    ESGRPLOK            Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,P_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=8 Return code
         MVC   W_WTOMSG+44(9),=CL9'GENCB/RPL' System macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
ESGRPLOK ST    R1,W_RPL@           DAFSMF VSAM RPL address
         B     ESOPNX              Continue
ESOPNX   MVC   SORTIN(L_SORTIN),P_SORTIN Copy SORTIN DCB template
         MVC   W_OPENO(L_OPENO),T_OPENO Copy open parameter list
         OPEN  SORTIN,MF=(E,W_OPENO) Open SORTIN
         TM    SORTIN+48,X'10'     SORTIN open ?
         BNZ   ESSIOK              Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,P_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=8 Return code
         MVC   W_WTOMSG+44(11),=CL11'OPEN/SORTIN' System macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
ESSIOK   EQU   *                   The file is open
         MVC   W_DTE_HI,=C'0000000' Set initial high date
         MVC   W_DTE_LO,=C'9999999' Set initial low date
         MVC   W_TME_HI,=C'00.00.00.00' Set initial high time
         MVC   W_TME_LO,=C'99.99.99.99' Set initial low time
ESNEXT   TM    W_FLAG,W_F$VSAM     DAFSMF VSAM ?
         BO    ESGETV              Yes
ESGETQ   EQU   *
         GET   DAFSMF              Read next logical DAFSMF record
         LR    R4,R1               Current record address
         L     R0,W_SMFBAS         Copy record address
         L     R1,=F'32768'        Copy record length
         LR    R14,R4              Current record address
         XR    R15,R15             Clear
         LH    R15,0(R4)           Current record length
         ICM   R15,B'1000',=X'00'  Pad character
         MVCL  R0,R14              Copy keyword table
         B     ESGETX              Continue
ESGETV   L     R2,W_RPL@           DAFSMF VSAM RPL address
         GET   RPL=(R2)            Read next logical DAFSMF record
         L     R4,W_AREA@          Set SMF record base
         CLC   4(10,R4),=CL10'SMFEOFMARK' Logical end of file
         BE    ESEOD               End of data
         L     R0,W_SMFBAS         Copy record address
         L     R1,=F'32768'        Copy record length
         LR    R14,R4              Current record address
         XR    R15,R15             Clear
         LH    R15,0(R4)           Current record length
         ICM   R15,B'1000',=X'00'  Pad character
         MVCL  R0,R14              Copy keyword table
         B     ESGETX              Continue
ESGETX   EQU   *
         USING D_SMFREC,R4         Reference SMF record
         $INCR W_SMFTOT            Increment SMF total counter
         L     R5,W_SMFTBL         Set SMF table base address
         USING D_SMFTBL,R5         Reference SMF table
         LA    R6,#_SMFTBL         SMF definition table count
ESSNEXT  EQU   *
         CLC   SMFXXRTY,D_SMFRTY   Match ?
         BE    ESSFOUND            Yes ..
ESSINCR  EQU   *
         LA    R5,L_SMFTBL(,R5)    Next SMF table entry
         BCT   R6,ESSNEXT          Another SMF table entry ?
         $INCR W_SMFOTH            Increment SMF other counter
         CLC   SMFXXRTY,=AL1(7)    SMF data lost ?
         BE    ESLOST              Yes
         B     ESNEXT              Any more DAFSMF records ?
ESSFOUND EQU   *
         ST    R5,W_SMFTAB         Save current SMF table base
         $FILL W_SORT,C' '         Blank sort record
         $FILL W_CRIT,C' '         Blank criteria area
         LA    R15,W_SRTCMT        Initialize comment address
         ST    R15,W_CMT@          Initialize comment address
         XR    R15,R15             Clear SMF record type
         ICM   R15,B'0001',SMFXXRTY Insert SMF record type
         ST    R15,W_RTY           Insert SMF record type
*        ICM   R15,B'0001',SMFXXRTY Insert SMF record type
*        CVD   R15,W_DBL           Convert record type
*        OI    W_DBL+7,X'0F'       Force sign
*        MVC   W_FULL1,P_RTYMSK    Record type pattern
*        ED    W_FULL1,W_DBL+6     Edit record type
*        MVC   W_RECORD,W_FULL1+1  Edit record type
         MVC   W_RECORD,D_SMFRTD   SMF record type - decimal
*        MVC   W_RTY,W_RECORD      Copy record type
*        CLI   W_RECORD,C' '       Leading blank ?
*        BNE   ESRTYOK             No
*        $FILL W_RTY,C' '          Blank record type
*        MVC   W_RTY(2),W_RECORD+1
ESRTYOK  EQU   *
         L     R15,D_SMFSMF        Get DAFSMF individual counter
         LA    R15,1(,R15)         Increment DAFSMF individual counter
         ST    R15,D_SMFSMF        Save DAFSMF individual counter
         CALL  DAFCD,              Convert Date                        X
               (SMFXXDTE,W_DATE),  Input/Output Dates                  X
               MF=(E,W_WRK)
         CALL  DAFCT,              Convert Time                        X
               (SMFXXTME,W_TIME),  Input/Output Times                  X
               MF=(E,W_WRK)
         CLC   W_DATE,W_DTE_HI     Date = high date ?
         BNE   ESCHKHDG            No, check > high date
         CLC   W_TIME,W_TME_HI     Time > high time ?
         BNH   ESCHKLDE            No, check = low date
         MVC   W_TME_HI,W_TIME     Set high time
         B     ESCHKLDE            Check = low date
ESCHKHDG CLC   W_DATE,W_DTE_HI     Date > high date ?
         BNH   ESCHKLDE            No, check = low date
         MVC   W_DTE_HI,W_DATE     Set high date
         MVC   W_TME_HI,W_TIME     Set high time
ESCHKLDE CLC   W_DATE,W_DTE_LO     Date = low date ?
         BNE   ESCHKLDL            No, check < low date
         CLC   W_TIME,W_TME_LO     Time < low time ?
         BNL   ESCHKLDL            No, check < low date
         MVC   W_TME_LO,W_TIME     Set low time
         B     ESSYSTEM            Go move System identification
ESCHKLDL CLC   W_DATE,W_DTE_LO     Date < low date ?
         BNL   ESSYSTEM            No, go move System identification
         MVC   W_DTE_LO,W_DATE     Set low date
         MVC   W_TME_LO,W_TIME     Set low time
ESSYSTEM MVC   W_SYSTEM,SMFXXSID   System identification
         L     R15,D_SMFEXT        Set SMF extract offset
         BALR  R14,R15             Extract it
         LTR   R15,R15             Check criteria required ?
         BNZ   ESNEXT              No, any more DAFSMF records ?
         CALL  DAFCC               Check criteria
         B     ESNEXT              Any more DAFSMF records ?
ESLOST   EQU   *
         $MSG  W_LOG,DAF510I       Move message template
         MVC   W_LOG+33(04),SMFXXSID Lost system
         CALL  DAFCD,              Convert Date                        X
               (SMF7STD,W_LOG+43), Input/Output Dates                  X
               MF=(E,W_WRK)
         CALL  DAFCT,              Convert Time                        X
               (SMF7STM,W_TIME),   Input/Output Times                  X
               MF=(E,W_WRK)
         MVC   W_LOG+51(11),W_TIME Lost from time
         CALL  DAFCD,              Convert Date                        X
               (SMFXXDTE,W_LOG+66), Input/Output Dates                 X
               MF=(E,W_WRK)
         CALL  DAFCT,              Convert Time                        X
               (SMFXXTME,W_TIME),  Input/Output Times                  X
               MF=(E,W_WRK)
         MVC   W_LOG+74(11),W_TIME Lost to time
         LA    R15,W_LOG+92        Lost to time
         ST    R15,W_CMT@          Lost to time
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NONE',SMF7NRO,2), Lost Records                      X
               MF=(E,W_WRK)
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         B     ESNEXT              Any more DAFSMF records ?
ESEOD    TM    W_FLAG,W_F$VSAM     DAFSMF VSAM ?
         BO    ESCLSV              Yes
ESCLSQ   MVC   W_CLOSE(L_CLOSE),T_CLOSE Copy CLOSE parameter list
         CLOSE DAFSMF,MF=(E,W_CLOSE) Close DAFSMF
         B     ESCLSX              Continue
ESCLSV   L     R2,W_ACB@
         CLOSE  ((R2))             Close DAFSMF
         LTR   R15,R15             OK ?
         BZ    ESCLSOK             Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,P_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=8 Return code
         MVC   W_WTOMSG+44(12),=CL12'CLOSE/DAFSMF' System macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
ESCLSOK  L     R0,=F'32768'        VSAM workarea length
         L     R2,W_AREA@          VSAM workarea address
         STORAGE RELEASE,ADDR=(2),LENGTH=(0) Release VSAM workarea
         LTR   R15,R15             OK ?
         BZ    RLVSAMOK            Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,P_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=8 Return code
         MVC   W_WTOMSG+44(12),=CL12'RELEASE/VSAM' System macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
RLVSAMOK EQU   *
         B     ESCLSX              Continue
ESCLSX   MVC   W_CLOSE(L_CLOSE),T_CLOSE Copy CLOSE parameter list
         CLOSE SORTIN,MF=(E,W_CLOSE) Close SORTIN
         CLC   W_RPTTOT,=F'0'      Records Selected ?
         BNE   ESEXIT              . Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,P_DAF704   Copy WTO message
         WTO   MF=(E,W_WTO)        Issue WTO
         MVC   W_RC,=F'4'          . No
ESEXIT   EQU   *
         $MSG  W_LOG,DAF521I       Move message template
         MVC   W_LOG+32(19),=CL19'Extract SMF Records'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         DROP  R4                  Dereference SMF record
         DROP  R5                  Dereference SMF table
DAFES    $EXIT                     Exit
**********************************************************************
         TITLE 'DAF014 - Extract SMF Record 14/15'
**********************************************************************
*  Notes:          If Data definition name is blank, do not use it.  *
*                  If member name is blank, do not use it.           *
*                  If GDG is blank, do not use it.                   *
*                  If DSN is x'04' bypass the record (VSAM Assist)   *
*                  JFCBNVOL can contain a number larger than five,   *
*                  however, only the first five volumes are in       *
*                  JFCBVOLS.                                         *
**********************************************************************
DAF014   $ENTRY AMODE=24,RMODE=24  Entry
DAF015   EQU   DAF014
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         Reference SMF record
         CLC   JFCBDSNM,=44X'04'   VTOC ?
         BNE   E14NOVTC            No, continue
         MVC   W_DSN1,=CL44'FORMAT4.DSCB ' VTOC
         B     E14VTOC             Continue
E14NOVTC MVC   W_DSN1,JFCBDSNM     Dataset 1
E14VTOC  MVC   W_JOB1,SMF14JBN     Job name
         MVC   W_USER,SMF14UID     User identification
         CALL  DAFPV,              Process Volume Serials              X
               (JFCBNVOL,1,JFCBVOLS,0,6), Process Volume Serials       X
               MF=(E,W_WRK)
         CLC   SMFTIOE5,=CL8' '    Blank Data definition name ?
         BE    E14NODDN            Yes
         MVC   W_DD,SMFTIOE5       Data definition name
         CALL  DAFMC,              Move Comment                        X
               (=C'DD=',W_DD,8), Data definition name                  X
               MF=(E,W_WRK)
E14NODDN TM    JFCBIND1,JFCPDS     Member of PDS ?
         BNO   E14NOMEM            No
         CLC   JFCBELNM,=CL8' '    Member present ?
         BE    E14NOMEM            No
         MVC   W_MEMBER,JFCBELNM   Member name
         CALL  DAFMC,              Move Comment                        X
               (=C'MEMBER=',W_MEMBER,8), Member name                   X
               MF=(E,W_WRK)
E14NOMEM TM    JFCBIND1,JFCGDG     GDG ?
         BNO   E14NOGDG            No
         CLC   JFCBELNM,=CL8' '    GDG present ?
         BE    E14NOGDG            No
         CALL  DAFMC,              Move Comment                        X
               (=C'GDG=',JFCBELNM,8), GDG                              X
               MF=(E,W_WRK)
E14NOGDG CALL  DAFCT,              Convert Time                        X
               (SMF14OPE,W_TMPTME), Input/Output Times                 X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'OPE=',W_TMPTME,11), Open time                       X
               MF=(E,W_WRK)
         XR    R15,R15             Clear julian year
         ICM   R15,B'0001',JFCBCRDT  Insert julian year
         CVD   R15,W_DBL           Convert julian year
         OI    W_DBL+7,X'0F'       Force sign
         UNPK  W_FULL1,W_DBL+6(2)  Unpack julian year
         MVC   W_YY,W_FULL1+2      Move julian year
         XR    R15,R15             Clear julian days
         ICM   R15,B'0011',JFCBCRDT+1 Insert julian days
         CVD   R15,W_DBL           Convert julian days
         OI    W_DBL+7,X'0F'       Force sign
         UNPK  W_DDD,W_DBL+6(2)    Unpack julian days
         CALL  DAFMC,              Move Comment                        X
               (=C'CRDT=',W_YYDDD,5), Create date                      X
               MF=(E,W_WRK)
         XR    R15,R15             Clear julian year
         ICM   R15,B'0001',JFCBXPDT  Insert julian year
         CVD   R15,W_DBL           Convert julian year
         OI    W_DBL+7,X'0F'       Force sign
         UNPK  W_FULL1,W_DBL+6(2)  Unpack julian year
         MVC   W_YY,W_FULL1+2      Move julian year
         XR    R15,R15             Clear julian days
         ICM   R15,B'0011',JFCBXPDT+1 Insert julian days
         CVD   R15,W_DBL           Convert julian days
         OI    W_DBL+7,X'0F'       Force sign
         UNPK  W_DDD,W_DBL+6(2)    Unpack julian days
         CALL  DAFMC,              Move Comment                        X
               (=C'XPDT=',W_YYDDD,5), Expiration date                  X
               MF=(E,W_WRK)
         NI    JFCBIND2,255-JFCBRWPW Turn off extra bits
         NI    JFCBIND2,255-JFCENT Turn off extra bits
         NI    JFCBIND2,255-JFCREQ Turn off extra bits
         NI    JFCBIND2,255-JFCTEMP Turn off extra bits
         L     R14,=A(T14DSP)      DISP
         CALL  DAFPC,              Process Compare Table               X
               ((R14),JFCBIND2),   DISP                                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'BUFNO=',JFCBUFNO,1), Buffers                        X
               MF=(E,W_WRK)
         L     R14,=A(T14DSO)      DSORG
         CALL  DAFPC,              Process Compare Table               X
               ((R14),JFCDSORG),   DSORG                               X
               MF=(E,W_WRK)
         NI    JFCRECFM,255-JFCRFO Turn off track overflow bit
         L     R14,=A(T14RCF)      RECFM
         CALL  DAFPC,              Process Compare Table               X
               ((R14),JFCRECFM),   RECFM                               X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'BLKSIZE=',JFCBLKSI,2), BLKSIZE                      X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'LRECL=',JFCLRECL,2), LRECL                          X
               MF=(E,W_WRK)
         MVC   W_LRECL,W_LRECL     Clear LRECL
         MVC   W_LRECL+2(2),JFCLRECL LRECL
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NVOL=',JFCBNVOL,1),  Volumes                        X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'EXCP=',SMFEXCP,4), EXCP                             X
               MF=(E,W_WRK)
         MVC   W_EXCP,SMFEXCP      EXCP
         TM    SMF14RIN,W_F$BIT2   DASD ?
         BNO   E14TAPE             No, tape
         NI    JFCBCTRI,255-W_F$CTRI Turn off insignificant bits
         L     R14,=A(T14SPC)      Space type
         CALL  DAFPC,              Process Compare Table               X
               ((R14),JFCBCTRI),   Space type                          X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'PQTY=',JFCBPQTY,3), Primary quantity                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'SQTY=',JFCBSQTY,3), Secondary quantity              X
               MF=(E,W_WRK)
         TM    JFCBIND1,JFCRLSE    Release specified ?
         BNO   E14NORLS            No
         CALL  DAFMC,              Move Comment                        X
               (=C'NONE=',=C'Release',7), Release                      X
               MF=(E,W_WRK)
E14NORLS XR    R0,R0               Clear
         ICM   R1,B'1111',SMF14NTU Tracks used
         SLDL  R0,4                Move four bits to the left
         STCM  R0,B'1111',W_DBL    Store in work field
         STCM  R1,B'1111',W_DBL+4  Store in work field
         OI    W_DBL+7,X'0F'       Force sign
         UNPK  W_NTU,W_DBL+3(5)    Unpack it
         L     R15,=A(TBLHEX)      Set HEX table address
         USING TBLHEX,R15          Reference HEX table
         TR    W_NTU,TBLHEX        Convert to HEX
         DROP  R15                 Dereference HEX table
         CALL  DAFMC,              Move Comment                        X
               (=C'NTU=',W_NTU,8), Tracks used                         X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NTR=',SMF14NTR,4), Tracks released                  X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NER=',SMF14NER,1), Extents released                 X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NEX=',SMF14NEX,1), Extents                          X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NTA=',SMF14NTA,4), Tracks allocated                 X
               MF=(E,W_WRK)
         B     DAF0140             Done
E14TAPE  NI    JFCBLTYP,255-JFCDSEQN Turn off dataset sequence num bit
         L     R14,=A(T14LTP)      Label type
         CALL  DAFPC,              Process Compare Table               X
               ((R14),JFCBLTYP),   Label type                          X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'FLSQ=',JFCBFLSQ,2), File sequence number            X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DEBVL=',SMFDEBVL,2), Volume sequence number         X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DCBBL=',SMFDCBBL,4), Volume block count             X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'DSSNO=',SMFDSSNO,6), Dataset serial number          X
               MF=(E,W_WRK)
         DROP  R3                  Dereference SMF record
DAF014   $EXIT                     Exit
**********************************************************************
         TITLE 'DAF017 - Extract SMF Record 17'
**********************************************************************
DAF017   $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         Reference SMF record
         MVC   W_DSN1,SMF17DSN     Dataset 1
         CLC   W_DSN1+00(17),=C'SYS1.DFDSS.DEFRAG' Special DEFRAG ?
         BNE   E17DSNOK            . No
         CLC   W_DSN1+17(10),=X'4BFFFFFFFFFFFFFFFF4B' Special DEFRAG ?
         BNE   E17DSNOK            . No
         MVC   W_DSN1+17(10),=C'.XXXXXXXX.' Special DEFRAG
E17DSNOK EQU   *
         MVC   W_JOB1,SMF17JBN     Job name
         MVC   W_USER,SMF17UID     User identification
         CALL  DAFPV,              Process Volume Serials              X
               (SMF17NVL,1,SMF17RV2,2,8), Process Volume Serials       X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NVL=',SMF17NVL,1), Volumes                          X
               MF=(E,W_WRK)
         DROP  R3                  Dereference SMF record
DAF017   $EXIT                     Exit
**********************************************************************
         TITLE 'DAF018 - Extract SMF Record 18'
**********************************************************************
DAF018   $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         Reference SMF record
         MVC   W_DSN1,SMF18ODS     Old dataset 1
         MVC   W_JOB1,SMF18JBN     Job name
         MVC   W_USER,SMF18UID     User identification
         CALL  DAFPV,              Process Volume Serials              X
               (SMF18NVL,1,SMF18RV2,2,8), Process Volume Serials       X
               MF=(E,W_WRK)
         MVC   W_DSN2,SMF18NDS     New DSN
         CALL  DAFMC,              Move Comment                        X
               (=C'NDS=',SMF18NDS,44), New DSN                         X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NVL=',SMF18NVL,1), Volumes                          X
               MF=(E,W_WRK)
         CALL  DAFCC               Check criteria
         MVC   W_DSN1,SMF18NDS     New dataset 1
         MVC   W_DSN2,SMF18ODS     Old DSN
         CALL  DAFPV,              Process Volume Serials              X
               (SMF18NVL,1,SMF18RV2,2,8), Process Volume Serials       X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'ODS=',SMF18ODS,44), Old DSN                         X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NVL=',SMF18NVL,1), Volumes                          X
               MF=(E,W_WRK)
         DROP  R3                  Dereference SMF record
DAF018   $EXIT                     Exit
**********************************************************************
         TITLE 'DAF022 - Extract SMF Record 22'
**********************************************************************
*  Notes:          Only process activate records                     *
*                  Only process I/O config change elements           *
*                  Only process first record of each change          *
**********************************************************************
DAF022   $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         Reference SMF record
         CLC   SMF22IND,=AL2(9)    Subtype 9 (Activate) ?
         BNE   DAF0224             No, exit
         CLC   SMF22OID,=X'0B'     I/O config change element ?
         BNE   DAF0224             No, exit
         CLC   SMF22R#,=AL1(1)     First record of this change ?
         BNE   DAF0224             No, exit
         MVC   W_DSN1,SMF22IDN     IODF dataset name
         MVC   W_JOB1,=CL8'MVS'    Job name - MVS
         MVC   W_USER,=CL8'MVS'    User identification - MVS
         CALL  DAFMC,              Move Comment                        X
               (=C'EDT=',SMF22EDT,2), EDT identification               X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'CFI=',SMF22CFI,8), OS configuration identification  X
               MF=(E,W_WRK)
         L     R14,=A(T22FNC)      Function
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF22FNC),   Function                            X
               MF=(E,W_WRK)
         DROP  R3                  Dereference SMF record
DAF022   $EXIT                     Exit
**********************************************************************
         TITLE 'DAF024 - Extract SMF Record 24'
**********************************************************************
DAF024   $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         Reference SMF record
         L     R14,=A(T24SUB)      Subtype
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF24SUB),   Subtype                             X
               MF=(E,W_WRK)
         CLC   SMF24NTR,=H'4'      Four sections ? (4.1.0 and above)
         BE    E244SECT            Yes, do not adjust
         CLC   SMF24NTR,=H'3'      Three sections ? (Below 4.1.0)
         BE    E243SECT            Yes, adjust
         B     DAF0244             Unknown record format
E243SECT SH    R3,=H'8'            Adjust base for missing section
E244SECT L     R14,=A(T24BCF)      SMF24BCF
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF24BCF),   SMF24BCF                            X
               MF=(E,W_WRK)
         L     R14,=A(T24EOJ)      SMF24EOJ
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF24EOJ),   SMF24EOJ                            X
               MF=(E,W_WRK)
         MVC   W_DSN1,SMF24DSN     Dataset 1
         MVC   W_JOB1,SMF24JBN     Job name
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'CNT=',SMF24CNT,4), Number of records                X
               MF=(E,W_WRK)
         DROP  R3                  Dereference SMF record
DAF024   $EXIT                     Exit
**********************************************************************
         TITLE 'DAF036 - Extract SMF Record 36'
**********************************************************************
DAF036   $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         Reference SMF record
         MVC   W_FULL1,SMF36DOF    Get data section offset
         DROP  R3                  Dereference SMF record
         L     R3,W_SMFBAS         Set SMF record base
         A     R3,W_FULL1          Add offset to data section
         USING SMF36DAT,R3         Reference data section
         MVC   W_DSN1,SMF36CNM     Catalog dataset 1
         MVC   W_JOB1,SMF36JNM     Job name
         MVC   W_USER,SMF36UID     User identification
         MVC   W_VOL1,SMF36CVS     Catalog volume serial
         CALL  DAFMC,              Move Comment                        X
               (=C'VOLUME=',W_VOL1,6), Catalog volume serial           X
               MF=(E,W_WRK)
         MVC   W_CATALO,SMF36CNM   Catalog name
         MVC   W_DSN2,SMF36PDS     Portable DSN
         MVC   W_VOL2,SMF36PVS     Portable volume serial
         CALL  DAFMC,              Move Comment                        X
               (=C'PGM=',SMF36PGM,8), Program name                     X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'PDS=',W_DSN2,44),  Portable DSN                     X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'PVS=',W_VOL2,6),   Portable volser                  X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'EDT=',SMF36EDT,8), Export date                      X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'ETM=',SMF36ETM,8), Export time                      X
               MF=(E,W_WRK)
         L     R14,=A(T36EIN)      Indicator
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF36EIN),   Indicator                           X
               MF=(E,W_WRK)
         CALL  DAFCC               Check criteria
         MVC   W_DSN1,SMF36PDS     Portable dataset 1
         MVC   W_VOL1,SMF36PVS     Portable volume serial
         CALL  DAFMC,              Move Comment                        X
               (=C'VOLUME=',W_VOL1,6), Portable volume serial          X
               MF=(E,W_WRK)
         MVC   W_DSN2,SMF36CNM     Catalog DSN
         MVC   W_VOL2,SMF36CVS     Catalog volume serial
         CALL  DAFMC,              Move Comment                        X
               (=C'PGM=',SMF36PGM,8), Program name                     X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'CATALOG=',W_CATALO,44), Catalog name                X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'CVS=',W_VOL2,6), Catalog volume serial              X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'EDT=',SMF36EDT,8), Export date                      X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'ETM=',SMF36ETM,8), Export time                      X
               MF=(E,W_WRK)
         L     R14,=A(T36EIN)      Indicator
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF36EIN),   Indicator                           X
               MF=(E,W_WRK)
         DROP  R3                  Dereference data section
DAF036   $EXIT                     Exit
**********************************************************************
         TITLE 'DAF042 - Extract SMF Record 42'
**********************************************************************
*  Notes:          SMF42EAD/ESD can contain 'NO xCDS SPECIFIED'      *
*                  (where xCDS is either ACDS or SCDS)               *
*                  Bypass VARY SMS volume - DSN low values           *
**********************************************************************
DAF042   $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING SMF42,R3            Reference SMF record
*
**       Subtype Selection
*
         CLC   SMF42STY,=AL2(03)   SMS Configuration ?
         BE    EXT42T03            Yes
         CLC   SMF42STY,=AL2(06)   Dataset Statistics ?
         BE    EXT42T06            Yes
         CLC   SMF42STY,=AL2(09)   X37 Abend ?
         BE    EXT42T09            Yes
         B     DAF0424             Exit - No criteria check
EXT42T03 EQU   *                   SMS Configuration
         MVC   W_JOB1,SMF42SSI     Job name
         MVC   W_USER,SMF42SSI     User identification
         LA    R3,SMF42_LEN(R3)    Set subtype 3 header
         USING SMF42S3,R3          Reference subtype 3 header
         MVC   W_FULL1,SMF42EAO    Get offset to event audit section
         L     R3,W_SMFBAS         Set SMF record base
         A     R3,W_FULL1          Add event audit section offset
         USING SMF4203A,R3         Reference event audit section
         CLC   SMF42EAC(3),=C'ENF' ENF - Vary of SMS volume ?
         BE    DAF0424             Yes, bypass the record
         CLC   SMF42EAD(17),=C'NO ACDS SPECIFIED' ACDS specified ?
         BE    E42ESD              No, check SCSD
         MVC   W_DSN1,SMF42EAD     ACDS dataset 1
         CALL  DAFMC,              Move Comment                        X
               (=C'NONE=',=C'ACDS_Dataset',12), ACDS DSN               X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'EAC=',SMF42EAC,8), Action                           X
               MF=(E,W_WRK)
         CALL  DAFCC               Check criteria
E42ESD   CLC   SMF42ESD(17),=C'NO SCDS SPECIFIED' SCDS specified ?
         BE    DAF0424             No, get out
         MVC   W_DSN1,SMF42ESD     SCDS dataset 1
         CALL  DAFMC,              Move Comment                        X
               (=C'NONE=',=C'SCDS_Dataset',12), SCDS DSN               X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'EAC=',SMF42EAC,8), Action                           X
               MF=(E,W_WRK)
         B     DAF0420             Return to caller
EXT42T06 EQU   *                   Dataset Statistics
         B     DAF0424             Return to caller
EXT42T09 EQU   *                   X37 Abend
         LA    R3,SMF42_LEN(R3)    Set subtype 9 header
         USING SMF42S9,R3          Reference subtype 9 header
         MVC   W_FULL1,SMF42ABO    Get offset to X37 abend section
         MVC   W_FULL2,SMF42SMO    Get offset to SMS data section
         L     R3,W_SMFBAS         Set SMF record base
         A     R3,W_FULL1          Add event audit section offset
         USING SMF4209A,R3         Reference X37 abend section
         MVC   W_JOB1,S42JOBN      Job name
         MVC   W_USER,S42AAUID     User identification
         MVC   W_DSN1,S42DSNME     Dataset
         B     DAF0420             Return to caller
         DROP  R3                  Dereference SMF record
DAF042   $EXIT                     Exit
         AIF   ('&RT_BDT' EQ '000').NOBDT1
**********************************************************************
         TITLE 'DAF059 - Extract SMF Record 59'
**********************************************************************
DAF059   $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         Reference SMF record
         DROP  R3                  Dereference SMF record
DAF059   $EXIT                     Exit
.NOBDT1  ANOP
**********************************************************************
         TITLE 'DAF060 - Extract SMF Record 60'
**********************************************************************
*  Notes:          Bypass convert SMS volume - DSN low values        *
**********************************************************************
DAF060   $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         Reference SMF record
         CLC   SMF60ENM,=44X'00'   DSN low values
         BE    DAF0604             Yes, bypass the record
         MVC   W_DSN1,SMF60ENM     Dataset 1
         MVC   W_JOB1,SMF60JNM     Job name
         MVC   W_USER,SMF60UID     User identification
         MVC   W_VVDS,SMF60CNM     VVDS name
         L     R14,=A(T6XSUB)      Subtype
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF60SUB),   Subtype                             X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'VVDS=',W_VVDS,44), VVDS name                        X
               MF=(E,W_WRK)
         L     R14,=A(T6XTYP)      Type
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF60TYP),   Type                                X
               MF=(E,W_WRK)
         DROP  R3                  Dereference SMF record
DAF060   $EXIT                     Exit
**********************************************************************
         TITLE 'DAF061 - Extract SMF Record 61'
**********************************************************************
DAF061   $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         Reference SMF record
         MVC   W_DSN1,SMF61ENM     Dataset 1
         MVC   W_JOB1,SMF61JNM     Job name
         MVC   W_USER,SMF61UID     User identification
         MVC   W_CATALO,SMF61CNM   Catalog name
         L     R14,=A(T6XSUB)      Subtype
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF61SUB),   Subtype                             X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'CATALOG=',W_CATALO,44), Catalog name                X
               MF=(E,W_WRK)
         L     R14,=A(T6XTYP)      Type
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF61TYP),   Type                                X
               MF=(E,W_WRK)
         DROP  R3                  Dereference SMF record
DAF061   $EXIT                     Exit
**********************************************************************
         TITLE 'DAF062 - Extract SMF Record 62'
**********************************************************************
DAF062   $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         Reference SMF record
         MVC   W_DSN1,SMF62DNM     Dataset 1
         MVC   W_JOB1,SMF62JBN     Job name
         MVC   W_USER,SMF62UIF     User identification
         CALL  DAFPV,              Process Volume Serials              X
               (SMF62VCT,2,SMF62VSR,0,10), Process Volume Serials      X
               MF=(E,W_WRK)
         MVC   W_CATALO,SMF62CNM   Catalog name
         L     R14,=A(T62IND)      SMF62IND
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF62IND),   SMF62IND                            X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'CATALOG=',W_CATALO,44), Catalog name                X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'CVS=',SMF62CVS,6), Catalog volume serial            X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'VCT=',SMF62VCT,2), Volumes                          X
               MF=(E,W_WRK)
         DROP  R3                  Dereference SMF record
DAF062   $EXIT                     Exit
**********************************************************************
         TITLE 'DAF063 - Extract SMF Record 63'
**********************************************************************
DAF063   $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         Reference SMF record
         MVC   W_DSN1,SMF63ENM     Dataset 1
         MVC   W_JOB1,SMF63JBN     Job name
         MVC   W_USER,SMF63UIF     User identification
         MVC   W_CATALO,SMF63CNM   Catalog name
         L     R14,=A(T63FDT)      SMF63FDT
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF63FDT),   SMF63FDT                            X
               MF=(E,W_WRK)
         L     R14,=A(T6XIOD)      SMF63TYP
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF63TYP),   SMF63TYP                            X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'CATALOG=',W_CATALO,44), Catalog name                X
               MF=(E,W_WRK)
         DROP  R3                  Dereference SMF record
DAF063   $EXIT                     Exit
**********************************************************************
         TITLE 'DAF064 - Extract SMF Record 64'
**********************************************************************
*  Notes:          If DDN is blank, do not use it                    *
*                  Bypass MSTJCL00 STGINDEX - DSN low values         *
**********************************************************************
DAF064   $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         Reference SMF record
         MVC   W_DSN1,SMF64DNM     Dataset 1
         MVC   W_JOB1,SMF64JBN     Job name
         MVC   W_USER,SMF64UIF     User identification
         LH    R1,SMF64ESL         Extent length
         XR    R0,R0               Clear
         D     R0,=F'26'           Determine volume serial count
         ST    R0,W_FULL1          Volume serial count
         CALL  DAFPV,              Process Volume Serials              X
               (W_FULL1,4,SMF64FCC,8,26), Process Volume Serials       X
               MF=(E,W_WRK)
         LA    R4,SMF64ESL
         AH    R4,SMF64ESL
         AH    R4,=H'2'
         DROP  R3                  Dereference SMF record
         USING SMF64STS,R4         Reference statistics
         CLC   SMF64DDN,=CL8' '    Blank Data definition name ?
         BE    E64NODDN            Yes
         CLC   SMF64DDN,=CL8'STGINDEX' Storage index ?
         BNE   E64NOSTG            No - continue
         CLC   W_DSN1,=44X'00'     DSN null
         BE    DAF0644             Yes, bypass the record
E64NOSTG MVC   W_DD,SMF64DDN       Data definition name
         CALL  DAFMC,              Move Comment                        X
               (=C'DD=',W_DD,8), Data definition name                  X
               MF=(E,W_WRK)
         DROP  R4                  Dereference statistics
         USING D_SMFREC,R3         Reference SMF record
E64NODDN MVC   W_CATALO,SMF64CNM   Catalog name
         CALL  DAFMC,              Move Comment                        X
               (=C'CATALOG=',W_CATALO,44), Catalog name                X
               MF=(E,W_WRK)
         L     R14,=A(T64RIN)      SMF64RIN
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF64RIN),   SMF64RIN                            X
               MF=(E,W_WRK)
         L     R14,=A(T64DTY)      SMF64DTY
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF64DTY),   SMF64DTY                            X
               MF=(E,W_WRK)
         DROP  R3                  Dereference SMF record
         USING SMF64STS,R4         Reference statistics
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NIL=',SMF64NIL,4), Prior levels                     X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NEX=',SMF64NEX,4), Prior extents                    X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NLR=',SMF64NLR,4), Prior records                    X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NDE=',SMF64NDE,4), Prior deletes                    X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NIN=',SMF64NIN,4), Prior inserts                    X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NUP=',SMF64NUP,4), Prior updates                    X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NRE=',SMF64NRE,4), Prior retrieves                  X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NFS=',SMF64NFS,4), Prior unused ci's                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NCS=',SMF64NCS,4), Prior ci splits                  X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NAS=',SMF64NAS,4), Prior ca splits                  X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NEP=',SMF64NEP,4), Prior EXCPs                      X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DIL=',SMF64DIL,4), Change levels                    X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DEX=',SMF64DEX,4), Change extents                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DLR=',SMF64DLR,4), Change records                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DDE=',SMF64DDE,4), Change deletes                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DIN=',SMF64DIN,4), Change inserts                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DUP=',SMF64DUP,4), Change updates                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DRE=',SMF64DRE,4), Change retrieves                 X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DFS=',SMF64DFS,4), Change unused ci's               X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DCS=',SMF64DCS,4), Change ci splits                 X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DAS=',SMF64DAS,4), Change ca splits                 X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DEP=',SMF64DEP,4), Change EXCPs                     X
               MF=(E,W_WRK)
         MVC   W_EXCP,SMF64DEP     EXCP
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DBS=',SMF64DBS,4), Physical blocksize               X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DCI=',SMF64DCI,4), Control interval size            X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DLS=',SMF64DLS,4), Maximum logical recordsize       X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DKL=',SMF64DKL,2), Key length                       X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'STR=',SMF64STR,1), Strings specified                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'BNO=',SMF64BNO,1), Buffers specified                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'BSP=',SMF64BSP,4), Bufferspace                      X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'BFD=',SMF64BFD,2), Data buffers                     X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'BFI=',SMF64BFI,2), Index buffers                    X
               MF=(E,W_WRK)
         MVC   W_DSN2,SMF64CLN     Cluster DSN
         CALL  DAFMC,              Move Comment                        X
               (=C'CLN=',SMF64CLN,44), Cluster DSN                     X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'PLH=',SMF64PLH,2), Concurrent strings               X
               MF=(E,W_WRK)
         L     R14,=A(T64MC1)      SMF64MC1
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF64MC1),   SMF64MC1                            X
               MF=(E,W_WRK)
         L     R14,=A(T64MC2)      SMF64MC2
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF64MC2),   SMF64MC2                            X
               MF=(E,W_WRK)
         L     R14,=A(T64MC3)      SMF64MC3
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF64MC3),   SMF64MC3                            X
               MF=(E,W_WRK)
         DROP  R4                  Dereference statistics
DAF064   $EXIT                     Exit
**********************************************************************
         TITLE 'DAF065 - Extract SMF Record 65'
**********************************************************************
DAF065   $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         Reference SMF record
         MVC   W_DSN1,SMF65ENM     Dataset 1
         MVC   W_JOB1,SMF65JNM     Job name
         MVC   W_USER,SMF65UID     User identification
         MVC   W_CATALO,SMF65CNM   Catalog name
         L     R14,=A(T6XSUB)      Subtype
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF65SUB),   Subtype                             X
               MF=(E,W_WRK)
         L     R14,=A(T6XFNC)      Function
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF65FNC),   Function                            X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'CATALOG=',W_CATALO,44), Catalog name                X
               MF=(E,W_WRK)
         L     R14,=A(T6XTYP)      Type
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF65TYP),   Type                                X
               MF=(E,W_WRK)
         DROP  R3                  Dereference SMF record
DAF065   $EXIT                     Exit
**********************************************************************
         TITLE 'DAF066 - Extract SMF Record 66'
**********************************************************************
DAF066   $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         Reference SMF record
         MVC   W_DSN1,SMF66ENM     Old dataset 1
         MVC   W_JOB1,SMF66JNM     Job name
         MVC   W_USER,SMF66UID     User identification
         MVC   W_CATALO,SMF66CNM   Catalog name
         L     R14,=A(T6XSUB)      Subtype
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF66SUB),   Subtype                             X
               MF=(E,W_WRK)
         L     R14,=A(T6XTYP)      Type
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF66TYP),   Type                                X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'CATALOG=',W_CATALO,44), Catalog name                X
               MF=(E,W_WRK)
         CLC   SMF66FNC,=C'R'      Rename ?
         BNE   DAF0660             Get out
         MVC   W_DSN2,SMF66NNM     New DSN
         CALL  DAFMC,              Move Comment                        X
               (=C'NNM=',SMF66NNM,44), New name                        X
               MF=(E,W_WRK)
         CALL  DAFCC               Check criteria
         MVC   W_DSN1,SMF66NNM     New dataset 1
         MVC   W_DSN2,SMF66ENM     Old DSN
         L     R14,=A(T6XSUB)      Subtype
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF66SUB),   Subtype                             X
               MF=(E,W_WRK)
         L     R14,=A(T6XTYP)      Type
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF66TYP),   Type                                X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'CATALOG=',W_CATALO,44), Catalog name                X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'ENM=',SMF66ENM,44), Old name                        X
               MF=(E,W_WRK)
         DROP  R3                  Dereference SMF record
DAF066   $EXIT                     Exit
**********************************************************************
         TITLE 'DAF067 - Extract SMF Record 67'
**********************************************************************
DAF067   $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         Reference SMF record
         MVC   W_DSN1,SMF67DEN     Dataset 1
         MVC   W_JOB1,SMF67JBN     Job name
         MVC   W_USER,SMF67UIF     User identification
         MVC   W_CATALO,SMF67CNM   Catalog name
         L     R14,=A(T67FDT)      SMF67FDT
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF67FDT),   SMF67FDT                            X
               MF=(E,W_WRK)
         L     R14,=A(T6XIOD)      SMF67IOD
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF67IOD),   SMF67IOD                            X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'CATALOG=',W_CATALO,44), Catalog name                X
               MF=(E,W_WRK)
         DROP  R3                  Dereference SMF record
DAF067   $EXIT                     Exit
**********************************************************************
         TITLE 'DAF068 - Extract SMF Record 68'
**********************************************************************
DAF068   $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         Reference SMF record
         MVC   W_DSN1,SMF68ONM     Old dataset 1
         MVC   W_JOB1,SMF68JBN     Job name
         MVC   W_USER,SMF68UIF     User identification
         MVC   W_CATALO,SMF68CNM   Catalog name
         MVC   W_DSN2,SMF68NNM     New DSN
         CALL  DAFMC,              Move Comment                        X
               (=C'CATALOG=',W_CATALO,44), Catalog name                X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'NNM=',SMF68NNM,44), New DSN                         X
               MF=(E,W_WRK)
         CALL  DAFCC               Check criteria
         MVC   W_DSN1,SMF68NNM     New dataset 1
         MVC   W_DSN2,SMF68ONM     Old DSN
         CALL  DAFMC,              Move Comment                        X
               (=C'CATALOG=',W_CATALO,44), Catalog name                X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'ONM=',SMF68ONM,44), Old DSN                         X
               MF=(E,W_WRK)
         DROP  R3                  Dereference SMF record
DAF068   $EXIT                     Exit
**********************************************************************
         TITLE 'DAF069 - Extract SMF Record 69'
**********************************************************************
DAF069   $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         Reference SMF record
         MVC   W_DSN1,SMF69CNM     Dataset 1
         MVC   W_JOB1,SMF69JBN     Job name
         MVC   W_USER,SMF69UIF     User identification
         CALL  DAFPV,              Process Volume Serials              X
               (=F'1',4,SMF69VSR,0,6), Process Volume Serials          X
               MF=(E,W_WRK)
         MVC   W_CATALO,SMF69CNM   Catalog name
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NDS=',SMF69NDS,2), Free extents                     X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NUC=',SMF69NUC,2), Free cylinders                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NUT=',SMF69NUT,2), Free tracks                      X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'LNC=',SMF69LNC,2), Continuous cylinders             X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'LNT=',SMF69LNT,2), Continuous tracks                X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'CATALOG=',W_CATALO,44), Catalog name                X
               MF=(E,W_WRK)
         DROP  R3                  Dereference SMF record
DAF069   $EXIT                     Exit
         AIF   ('&RT_RMF' EQ '000').NORMF1
**********************************************************************
         TITLE 'DAF073 - Extract SMF Record 73'
**********************************************************************
DAF073   $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING SMF73HDR,R3         Reference SMF record
         MVC   W_FULL1,SMF73PRS    Product offset
         MVC   W_FULL2,SMF73HIS    Channel path control offset
         DROP  R3                  Dereference SMF record
         L     R3,W_SMFBAS         Set SMF record base
         A     R3,W_FULL1          Add product offset
         USING SMF73PRO,R3         Reference product
         MVC   W_JOB1,SMF73PRD     Job name
         MVC   W_USER,SMF73PRD     User identification
         DROP  R3                  Dereference product
         L     R3,W_SMFBAS         Set SMF record base
         A     R3,W_FULL2          Add Channel path control offset
         USING SMF73CTL,R3         Reference channel path control
         MVC   W_DSN1,SMF73TNM     Dataset 1
         CALL  DAFMC,              Move Comment                        X
               (=C'TSF=',SMF73TSF,2), IODF name suffix                 X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'TOK=',SMF73TOK,16), Partial token information       X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'TDY=',SMF73TDY,10), IODF creation date              X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'TTM=',SMF73TTM,9), IODF creation time               X
               MF=(E,W_WRK)
         DROP  R3                  Dereference channel path control
DAF073   $EXIT                     Exit
**********************************************************************
         TITLE 'DAF074 - Extract SMF Record 74'
**********************************************************************
DAF074   $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING SMF74HDR,R3         Reference SMF record
*
**       Subtype Selection
*
         CLC   SMF74STY,=AL2(01)   Device activity
         BE    EXT74T01            Yes
         B     DAF0744             Exit - No criteria check
*
**       Subtype 01 - Device activity
*
EXT74T01 EQU   *                   Subtype 01 - Device activity
         MVC   W_FULL1,SMF74PRS    Product offset
         MVC   W_FULL2,SMF74DCS    Device control data offset
         DROP  R3                  Dereference SMF record
         L     R3,W_SMFBAS         Set SMF record base
         A     R3,W_FULL1          Add product offset
         USING SMF74PRO,R3         Reference product
         MVC   W_JOB1,SMF74PRD     Job name
         MVC   W_USER,SMF74PRD     User identification
         DROP  R3                  Dereference product
         L     R3,W_SMFBAS         Set SMF record base
         A     R3,W_FULL2          Add device control data offset
         USING SMF74A,R3           Reference Device control data
         MVC   W_DSN1,SMF74TNM     Dataset 1
         CALL  DAFMC,              Move Comment                        X
               (=C'TSF=',SMF74TSF,2), IODF name suffix                 X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'TOK=',SMF74TOK,16), Partial token information       X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'TDY=',SMF74TDY,10), IODF creation date              X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'TTM=',SMF74TTM,9), IODF creation time               X
               MF=(E,W_WRK)
         DROP  R3                  Dereference Device control data
DAF074   $EXIT                     Exit
**********************************************************************
         TITLE 'DAF075 - Extract SMF Record 75'
**********************************************************************
DAF075   $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING SMF75HDR,R3         Reference SMF record
         MVC   W_FULL1,SMF75PRS    Get offset to product section
         MVC   W_FULL2,SMF75PSS    Get offset to page/swap section
         DROP  R3                  Dereference SMF record
         L     R3,W_SMFBAS         Set SMF record base
         A     R3,W_FULL1          Add product section offset
         USING SMF75PRO,R3         Reference product section
         MVC   W_JOB1,SMF75PRD     Job name
         MVC   W_USER,SMF75PRD     User identification
         DROP  R3                  Dereference product section
         L     R3,W_SMFBAS         Set SMF record base
         A     R3,W_FULL2          Add page/swap section offset
         USING SMF75PSD,R3         Reference page/swap section
         MVC   W_DSN1,SMF75DSN     Dataset 1
         CALL  DAFPV,              Process Volume Serials              X
               (=F'1',4,SMF75VOL,0,6), Process Volume Serials          X
               MF=(E,W_WRK)
         L     R14,=A(T75PST)      SMF75PST
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF75PST),   SMF75PST                            X
               MF=(E,W_WRK)
         L     R14,=A(T75FL2)      SMF75FL2
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF75FL2),   SMF75FL2                            X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'SLA=',SMF75SLA,4), Available slots                  X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'MXU=',SMF75MXU,4), Maximum slots                    X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'MNU=',SMF75MNU,4), Minimum slots                    X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'AVU=',SMF75AVU,4), Average slots                    X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'BDS=',SMF75BDS,4), Unusable slots                   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'USE=',SMF75USE,4), Used samples                     X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'REQ=',SMF75REQ,4), Requests                         X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'SIO=',SMF75SIO,4), I/O requests                     X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'PGX=',SMF75PGX,4), Pages transferred                X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'DEV=',SMF75DEV,8), Device name                      X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'CU=',SMF75CU,8),   Control unit name                X
               MF=(E,W_WRK)
         DROP  R3                  Dereference page/swap section
DAF075   $EXIT                     Exit
**********************************************************************
         TITLE 'DAF077 - Extract SMF Record 77'
**********************************************************************
DAF077   $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING SMF77HDR,R3         Reference SMF record
         MVC   W_77EDS,SMF77EDS    Get enqueue data section offset
         MVC   W_77EDN,SMF77EDN    Get enqueue data section count
         MVC   W_77EDL,SMF77EDL    Get enqueue data section length
         DROP  R3                  Dereference SMF record
         L     R3,W_SMFBAS         Set SMF record base
         A     R3,W_77EDS          Add enqueue data section offset
         USING SMF77ENQ,R3         Reference enqueue data section
         LH    R4,W_77EDN          Enqueue data section count
         LTR   R4,R4               Any enqueue data sections ?
         BNP   DAF0774             No, get out
E77DTANX EQU   *
*
**       Major Enqueue Name
*
         CALL  DAFMC,              Move Comment                        X
               (=C'QNM=',SMF77QNM,8), Major Enqueue Name               X
               MF=(E,W_WRK)
         LA    R15,MAJORNUM        Major table size
         L     R14,=A(MAJORTBL)    Major table address
E77CKMAJ EQU    *
         CLC   SMF77QNM,0(R14)     Major match ?
         BE    E77OKMAJ            . Yes
         LA    R14,MAJORLEN(R14)   Next major
         BCT   R15,E77CKMAJ        Process next major, if any
E77OKMAJ EQU   *
         MVC   W_MAJDES,8(R14)     Move major enqueue description
         CALL  DAFMC,              Move Binary Comment                 X
               (=C'NONE',W_MAJDES,32), Major Enqueue Description       X
               MF=(E,W_WRK)
         MVC   W_DSN1,SMF77RNM     Dataset 1
         L     R14,=A(T77DFG)      SMF77DFG
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF77DFG),   SMF77DFG                            X
               MF=(E,W_WRK)
         MVC   W_JOB2,SMF77DO1     Resource owning job name 1
         MVC   W_JOB3,SMF77DO2     Resource owning job name 2
         MVC   W_JOB4,SMF77DW1     Resource waiting job name 1
         MVC   W_JOB5,SMF77DW2     Resource waiting job name 2
         MVC   W_MAJOR,SMF77QNM    Major enqueue name
         MVC   W_MINOR,SMF77RNM    Minor enqueue name
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'RLN=',SMF77RLN,1), Minimum resource contention time X
               MF=(E,W_WRK)
         ICM   R15,B'1111',SMF77WTM Minimum resource contention time
         SRL   R15,10              Convert 1024th into seconds
         STCM  R15,B'1111',SMF77WTM Minimum resource contention time
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'WTM=',SMF77WTM,4), Minimum resource contention time X
               MF=(E,W_WRK)
         ICM   R15,B'1111',SMF77WTX Maximum resource contention time
         SRL   R15,10              Convert 1024th into seconds
         STCM  R15,B'1111',SMF77WTX Maximum resource contention time
         MVC   W_WTX,SMF77WTX      Maximum resource contention time
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'WTX=',SMF77WTX,4), Maximum resource contention time X
               MF=(E,W_WRK)
         ICM   R15,B'1111',SMF77WTT Total resource contention time
         SRL   R15,10              Convert 1024th into seconds
         STCM  R15,B'1111',SMF77WTT Total resource contention time
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'WTT=',SMF77WTT,4), Total resource contention time   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'QL1=',SMF77QL1,2), Queue length of 1                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'QL2=',SMF77QL2,2), Queue length of 2                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'QL3=',SMF77QL3,2), Queue length of 3                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'QL4=',SMF77QL4,2), Queue length of 4                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'EXM=',SMF77EXM,2), Minimum exclusive requests waitinX
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'EXX=',SMF77EXX,2), Maximum exclusive requests waitinX
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'SHM=',SMF77SHM,2), Minimum share requests waiting   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'SHX=',SMF77SHX,2), Maximum share requests waiting   X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'EVT=',SMF77EVT,2), Total interval contentions       X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DOW=',SMF77DOW,2), Owners at maximum contention     X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'DWR=',SMF77DWR,2), Waiters at maximum contention    X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'DO1=',SMF77DO1,8), Resource owning job name 1       X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'SY1=',SMF77SY1,8), Resource owning system 1         X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'DO2=',SMF77DO2,8), Resource owning job name 2       X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'SY2=',SMF77SY2,8), Resource owning system 2         X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'DW1=',SMF77DW1,8), Resource waiting job name 1      X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'SY3=',SMF77SY3,8), Resource waiting system 1        X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'DW2=',SMF77DW2,8), Resource waiting job name 2      X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'SY4=',SMF77SY4,8), Resource waiting system 2        X
               MF=(E,W_WRK)
         CALL  DAFCC               Check criteria
E77DTAIN AH    R3,W_77EDL          Next enqueue data section
         $FILL W_SRTCMT,C' '       Blank comment area
         $FILL W_DSN1,C' '         Blank dataset 1
         LA    R15,W_SRTCMT        Initialize comment address
         ST    R15,W_CMT@          Initialize comment address
         BCT   R4,E77DTANX         Any more ?
         B     DAF0774             No, get out
         DROP  R3                  Dereference enqueue data section
DAF077   $EXIT                     Exit
.NORMF1  ANOP
         AIF   ('&RT_RACF' EQ '000').NORACF1
**********************************************************************
         TITLE 'DAF080 - Extract SMF Record 80'
**********************************************************************
DAF080   $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         Reference SMF record
         MVC   W_80REL,SMF80REL    Save offset to relocate section
         MVC   W_80CNT,SMF80CNT    Save relocate sections
         MVC   W_JOB1,SMF80JBN     Job name
         MVC   W_USER,SMF80USR     User identification
         L     R14,=A(T80DES)      SMF80DES
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF80DES),   SMF80DES                            X
               MF=(E,W_WRK)
         L     R14,=A(T80EVENT)    Event code
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF80EVT),   Event code                          X
               MF=(E,W_WRK)
         L     R14,=A(T80QUAL)     Qualifier
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF80EVT),   Qualifier (Event code & qualifier)  X
               MF=(E,W_WRK)
         L     R14,=A(T80AUTH)     SMF80ATH
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF80ATH),   SMF80ATH                            X
               MF=(E,W_WRK)
         MVC   W_GROUP,SMF80GRP    Group
         CALL  DAFMC,              Move Comment                        X
               (=C'GROUP=',W_GROUP,8), Group                           X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'SEC=',SMF80SEC,8), Security label                   X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'TERMINAL=',SMF80TRM,8), Terminal                    X
               MF=(E,W_WRK)
         L     R14,=A(T80REA)      SMF80REA
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF80REA),   SMF80REA                            X
               MF=(E,W_WRK)
         L     R14,=A(T80RE2)      SMF80RE2
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF80RE2),   SMF80RE2                            X
               MF=(E,W_WRK)
         LA    R3,SMF80FLG         Get SMF80FLG address
         DROP  R3                  Dereference SMF record
         AH    R3,W_80REL          Add offset to relocate section
         USING SMF80DTP,R3         Reference relocate section
         LH    R4,W_80CNT          Relocate sections
         LTR   R4,R4               Any relocate sections ?
         BNP   DAF0804             No, get out
E80DTPNX XR    R5,R5               Clear length
         IC    R5,SMF80DLN         Length
         CLC   SMF80DTP,=AL1(1)    Resource name - type 1
         BE    E80DTP01            Yes - process it
         CLC   SMF80DTP,=AL1(3)    Access intent - type 3
         BE    E80DTP03            Yes - process it
         CLC   SMF80DTP,=AL1(4)    Access allowed - type 4
         BE    E80DTP04            Yes - process it
         CLC   SMF80DTP,=AL1(9)    Resource name - type 9
         BE    E80DTP09            Yes - process it
         CLC   SMF80DTP,=AL1(12)   Permit ID's - type 12
         BE    E80DTP12            Yes - process it
         CLC   SMF80DTP,=AL1(15)   Volume - type 15
         BE    E80DTP15            Yes - process it
         CLC   SMF80DTP,=AL1(17)   Class - type 17 ?
         BE    E80DTP17            Yes - process it
         CLC   SMF80DTP,=AL1(33)   Profile - type 33
         BE    E80DTP33            Yes - process it
         CLC   SMF80DTP,=AL1(49)    Name - type 49
         BE    E80DTP49            Yes - process it
         B     E80DTPIN            Next relocate section
E80DTP01 $VLM  W_DSN1,SMF80DTA,(R5) dataset 1
         B     E80DTPIN            Next relocate section
E80DTP03 L     R14,=A(T80AAR)      Access authority requested
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF80DTA),   Access authority requested          X
               MF=(E,W_WRK)
         B     E80DTPIN            Next relocate section
E80DTP04 L     R14,=A(T80AAA)      Access authority allowed
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF80DTA),   Access authority allowed            X
               MF=(E,W_WRK)
         B     E80DTPIN            Next relocate section
E80DTP09 $VLM  W_DSN1,SMF80DTA,(R5) dataset 1
         B     E80DTPIN            Next relocate section
E80DTP12 XR    R0,R0               Clear R0
         LA    R1,1(R5)            Length
         D     R0,=F'9'            Determine number of ID's
         LR    R7,R1               Number of ID's
         LA    R8,SMF80DTA         Input ID
E80NXT12 $FILL W_WRK,C' '          Clear work area
         LA    R15,W_WRK           Output ID
         MVC   0(8,R15),1(R8)      Move the ID
         LA    R8,9(R8)            Next input ID
         CALL  DAFMC,              Move Comment                        X
               (=C'ID=',W_WRK,128),   ID's                             X
               MF=(E,W_WRK)
         BCT   R7,E80NXT12         Next ID
         B     E80DTPIN            Next relocate section
E80DTP15 CALL  DAFPV,              Process Volume Serials              X
               (=F'1',4,SMF80DTA,0,6), Process Volume Serials          X
               MF=(E,W_WRK)
         B     E80DTPIN            Next relocate section
E80DTP17 CALL  DAFMC,              Move Comment                        X
               (=C'CLASS=',SMF80DTA,8), Class name                     X
               MF=(E,W_WRK)
         CLC   SMF80DTA(7),=CL7'DATASET' Dataset ?
         BNE   DAF0804             . No, skip
         B     E80DTPIN            Next relocate section
E80DTP33 LA    R3,1(,R3)           Skip flag byte
         $VLM  W_DSN2,SMF80DTA,(R5) Profile name
         BCTR  R3,0                Flag byte reset
         CALL  DAFMC,              Move Comment                        X
               (=C'PROFILE=',W_DSN2,44), Profile name                  X
               MF=(E,W_WRK)
         B     E80DTPIN            Next relocate section
E80DTP49 $VLM  W_NAME,SMF80DTA,(R5) Name
         $FILL W_TRT,X'00'         Blank TRT
         MVI   W_TRT+C' ',X'FF'    Blank TRT
E80TRT49 LA    R6,W_NAME           Keyword start
         $VLTRT (R6),W_TRT,(R5)    Blank ?
         BZ    E80CLI49            No - move name
         CLI   1(R1),C' '          Double blank ?
         BE    E80CLI49            Yes - move name
         MVI   0(R1),C'_'          Change blank to underscore
         B     E80TRT49            Check again
E80CLI49 CLI   W_NAME+19,C'_'      Last character underscore ?
         BNE   E80MVC49            No - move name
         MVI   W_NAME+19,C' '      Change last underscore to blank
E80MVC49 CALL  DAFMC,              Move Comment                        X
               (=C'NAME=',W_NAME,20), Name                             X
               MF=(E,W_WRK)
         B     E80DTPIN            Next relocate section
E80DTPIN XR    R1,R1               Clear
         IC    R1,SMF80DLN         Length
         AH    R1,=H'2'            SMF80DTP+SMF80DLN
         AR    R3,R1               Next Relocate section
         BCT   R4,E80DTPNX         Any more relocate sections ?
         CLI   W_DSN1,C' '         Blank ?
         BE    DAF0804             . Yes - Skip
         DROP  R3                  Dereference relocate section
DAF080   $EXIT                     Exit
**********************************************************************
         TITLE 'DAF081 - Extract SMF Record 81'
**********************************************************************
DAF081   $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         Reference SMF record
         MVC   W_81REL,SMF81REL    Save offset to relocate section
         MVC   W_81CNT,SMF81CNT    Save relocate sections
         MVC   W_JOB1,=CL8'RACF'   Job name
         MVC   W_USER,=CL8'RACF'   User identification
         MVC   W_DSN1,SMF81UDS     UADS dataset 1
         CALL  DAFPV,              Process Volume Serials              X
               (=F'1',4,SMF81UVL,0,6), Process Volume Serials          X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'NONE',=C'UADS_Dataset',12), UADS DSN                X
               MF=(E,W_WRK)
         LA    R3,SMF81FLG         Get SMF81FLG address
         DROP  R3                  Dereference SMF record
         AH    R3,W_81REL          Add offset to relocate section
         USING SMF81DTP,R3         Reference relocate section
         LH    R4,W_81CNT          Relocate sections
         LTR   R4,R4               Any relocate sections ?
         BNP   DAF0814             No, get out
E81DTPNX CLC   SMF81DTP,=AL1(30)   RACF dataset status - Type 30
         BNE   E81DTPIN            No, check next relocate section
         CALL  DAFCC               Check criteria
         CALL  DAFPV,              Process Volume Serials              X
               (=F'1',4,SMF81DTA+4,0,6), Process Volume Serials        X
               MF=(E,W_WRK)
         L     R14,=A(T81D30)      RACF dataset type
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF81DTA),   RACF dataset type                   X
               MF=(E,W_WRK)
         $FILL W_DSN1,C' '         Blank out dataset 1
         XR    R1,R1               Clear length
         IC    R1,SMF81DLN         Length
         S     R1,=F'11'           DSN length minus 1
         $VLM  W_DSN1,SMF81DTA+11,(R1)  dataset 1
E81DTPIN XR    R1,R1               Clear
         IC    R1,SMF81DLN         Length
         AH    R1,=H'2'            SMF81DTP+SMF81DLN
         AR    R3,R1               Next Relocate section
         BCT   R4,E81DTPNX         Any more relocate sections ?
         DROP  R3                  Dereference relocate section
DAF081   $EXIT                     Exit
**********************************************************************
         TITLE 'DAF083 - Extract SMF Record 83'
**********************************************************************
DAF083   $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING SMFRCD83,R3         Reference SMF record
         A     R3,SMF83OD1         Offset to security section
         DROP  R3                  Dereference SMF record base
         USING SMF83DS1,R3         Reference security section
         MVC   W_HALF1,SMF83REL    Save offset to relocate section
         MVC   W_HALF2,SMF83CNT    Save relocate sections
         MVC   W_JOB1,SMF83JBN     Job name
         MVC   W_USER,SMF83USR     User identification
         L     R14,=A(T80DES)      SMF80DES
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF83DES),   SMF83DES                            X
               MF=(E,W_WRK)
         L     R14,=A(T80EVENT)    Event code
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF83EVT),   Event code                          X
               MF=(E,W_WRK)
         L     R14,=A(T80QUAL)     Qualifier
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF83EVT),   Qualifier (Event code & qualifier)  X
               MF=(E,W_WRK)
         L     R14,=A(T80AUTH)     SMF83ATH
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF83ATH),   SMF83ATH                            X
               MF=(E,W_WRK)
         MVC   W_GROUP,SMF83GRP    Group
         CALL  DAFMC,              Move Comment                        X
               (=C'GROUP=',W_GROUP,8), Group                           X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'SEC=',SMF83SEC,8), Security label                   X
               MF=(E,W_WRK)
         L     R14,=A(T80REA)      SMF83REA
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF83REA),   SMF83REA                            X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'TERMINAL=',SMF83TRM,8), Terminal                    X
               MF=(E,W_WRK)
         L     R14,=A(T80REA)      SMF80REA
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF83REA),   SMF80REA                            X
               MF=(E,W_WRK)
         L     R14,=A(T80RE2)      SMF80RE2
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF83RE2),   SMF80RE2                            X
               MF=(E,W_WRK)
         DROP  R3                  Dereference security section
         L     R3,W_SMFBAS         Set SMF record base
         LA    R3,4(R3)            Get past record length/seg. desc.
         AH    R3,W_HALF1          Add offset to relocate section
         USING SMF83VAR,R3         Reference relocate section
         LH    R4,W_HALF2          Relocate sections
         LTR   R4,R4               Any relocate sections ?
         BNP   DAF0834             No, get out
E83DTPNX CLC   SMF83DTP,=AL1(62)   Dataset name - type 62
         BE    E83DTP62            Yes
         CLC   SMF83DTP,=AL1(63)   Link value - type 63
         BE    E83DTP63            Yes
         B     E83DTPIN            Next relocate section
E83DTP62 XR    R1,R1               Clear length
         IC    R1,SMF83DLN         Length
         $VLM  W_DSN1,SMF83DTA,(R1) dataset 1
         B     E83DTPIN            Next relocate section
E83DTP63 LA    R5,SMF83DTA         Link value address
         CALL  DAFMC,              Move Comment                        X
               (=C'LINK=',(R5),4), Link value                          X
               MF=(E,W_WRK)
         B     E83DTPIN            Next relocate section
E83DTPIN XR    R1,R1               Clear
         IC    R1,SMF83DLN         Length
         AH    R1,=H'2'            SMF83DTP+SMF83DLN
         AR    R3,R1               Next Relocate section
         BCT   R4,E83DTPNX         Any more relocate sections ?
         DROP  R3                  Dereference relocate section
DAF083   $EXIT                     Exit
.NORACF1 ANOP
**********************************************************************
         TITLE 'DAF082 - Extract SMF Record 82'
**********************************************************************
*  Notes:          Only process subtypes 1, 7 & 8                    *
**********************************************************************
DAF082   $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         Reference SMF record
         MVC   W_JOB1,=CL8'ICSF'   Job name - ICSF
         MVC   W_USER,=CL8'ICSF'   User identification - ICSF
         CLC   SMF82STY,=AL2(01)   Subtype 1 (Initialization) ?
         BE    EXT82T01            Yes
         CLC   SMF82STY,=AL2(07)   Subtype 7 (KEU Key Part Entry) ?
         BE    EXT82T07            Yes
         CLC   SMF82STY,=AL2(08)   Subtype 8 (CKDS Refresh) ?
         BE    EXT82T08            Yes
         B     DAF0824             Not subtype 1, 7 or 8 - exit
EXT82T01 EQU   *
         MVC   W_DSN1,SMF82CKD     CKDS data set name
         L     R14,=A(T82VES)      SMF82VES
         CALL  DAFPT,              Process TM Table                    X
               ((R14),SMF82VES),   SMF82VES                            X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'IDO=',SMF82IDO,1), Crypto domain index              X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'ITE=',SMF82ITE,4), Trace entries                    X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'IML=',SMF82IML,4), Maximum data length              X
               MF=(E,W_WRK)
         B     DAF0820             Exit
EXT82T07 EQU   *
         MVC   W_DSN1,SMF82KCK     CKDS data set name
         CALL  DAFMC,              Move Comment                        X
               (=C'KV=',SMF82KV,8), Key part verification pattern      X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'KKS=',SMF82KKS,1), KSU number                       X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'KDX=',SMF82KDX,1), Crypto domain index              X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'KCL=',SMF82KCL,24), CKDS entry being modified       X
               MF=(E,W_WRK)
         B     DAF0820             Exit
EXT82T08 EQU   *
         MVC   W_DSN1,SMF82ROC     Old CKDS data set name
         CALL  DAFMC,              Move Comment                        X
               (=C'Old_CKDS=',SMF82ROC,44), Old CKDS data set name     X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'New_CKDS=',SMF82RNC,44), New CKDS data set name     X
               MF=(E,W_WRK)
         MVC   W_CMTCLR,=C'N'      Do not clear comment area
         CALL  DAFCC               Check criteria
         MVC   W_DSN1,SMF82RNC     New CKDS data set name
         DROP  R3                  Dereference SMF record
DAF082   $EXIT                     Exit
**********************************************************************
         TITLE 'DAF090 - Extract SMF Record 90'
**********************************************************************
DAF090   $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,W_SMFBAS         SMF record address
         USING SMFRCD90,R3         Reference SMF record
         L     R4,W_SMFBAS         Address SMF record
         A     R4,SMF90POF         Address product section
         USING SMF90PRH,R4         Reference product section
         MVC   W_JOB1,SMF90PNM     Job name
         MVC   W_USER,SMF90PNM     User identification
*
**       Subtype Selection
*
         CLC   SMF90TID,=AL2(5)    SET SMF ?
         BE    EXT90T5             Yes
         CLC   SMF90TID,=AL2(6)    Switch SMF ?
         BE    EXT90T6             Yes
         CLC   SMF90TID,=AL2(7)    Halt EOD ?
         BE    EXT90T7             Yes
         CLC   SMF90TID,=AL2(9)    IPL SMF ?
         BE    EXT90T9             Yes
         CLC   SMF90TID,=AL2(13)   SETSMF ?
         BE    EXT90T13            Yes
         CLC   SMF90TID,=AL2(15)   SET SMF (to restart SMF) ?
         BE    EXT90T15            Yes
         CLC   SMF90TID,=AL2(26)   IPL LOGREC ?
         BE    EXT90T26            Yes
         B     DAF0904             Exit - No criteria check
*
**       SET SMF, IPL SMF, SETSMF, SET SMF(to restart SMF)
*
EXT90T5  EQU   *                   SET SMF
EXT90T9  EQU   *                   IPL SMF
EXT90T13 EQU   *                   SETSMF
EXT90T15 EQU   *                   SET SMF (to restart SMF)
         L     R5,W_SMFBAS         Address SMF record
         A     R5,SMF90DOF         Address data section
         USING SMF90T5,R5          Reference data section
         L     R6,W_SMFBAS         Address SMF record
         A     R6,SMF90ODA         Address data set section
         USING SMF90DSE,R6         Reference data set section
         LH    R7,SMF90NDA         Number of data set sections
         LTR   R7,R7               Any data set sections ?
         BNP   DAF0904             Exit - No criteria check
         L     R14,=A(T90TID)      Identifier
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF90TID),   Identifier                          X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'NONE',=C'Active_SMF_Recording_Dataset',28),         X
               MF=(E,W_WRK)
NXT90T5  LH    R1,SMF90LDA         Dataset length
         $VLM  W_DSN1,SMF90DSN,(R1) Dataset
         CALL  DAFCC               Check criteria
         L     R14,=A(T90TID)      Identifier
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF90TID),   Identifier                          X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'NONE',=C'Alternate_SMF_Recording_Dataset',31),      X
               MF=(E,W_WRK)
         AH    R6,SMF90LDA         Next DSN
         BCT   R7,NXT90T5          Any more ?
         B     DAF0904             Exit - No criteria check
*
**       Switch SMF, HALT EOD
*
EXT90T6  EQU   *                   Switch SMF
EXT90T7  EQU   *                   Halt EOD
         L     R5,W_SMFBAS         Address SMF record
         A     R5,SMF90DOF         Address data section
         USING SMF90T6,R5          Reference data section
         CLI   SMF90SWO,C' '       Old DSN blank ?
         BE    E90SWN              Yes, check new DSN
         MVC   W_DSN1(10),SMF90SWO Old dataset 1
         L     R14,=A(T90TID)      Identifier
         CALL  DAFPC,              Process Compare Table               X
               ((R14),W_HALF3),    Identifier                          X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'SWN=',SMF90SWN,10), New DSN                         X
               MF=(E,W_WRK)
         MVC   W_DSN2,SMF90SWN     New DSN
         CALL  DAFCC               Check criteria
E90SWN   EQU   *
         AIF   ((D'SMF90SND) EQ 0).NONEWDSN
         CLI   SMF90SND,C' '       New DSN blank ?
         BE    DAF0904             Yes, get out
         MVC   W_DSN1,SMF90SND     New dataset 1
         L     R14,=A(T90TID)      Identifier
         CALL  DAFPC,              Process Compare Table               X
               ((R14),W_HALF3),    Identifier                          X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'SOD=',SMF90SOD,10), Old DSN                         X
               MF=(E,W_WRK)
         MVC   W_DSN2,SMF90SWO     Old DSN
         B     DAF0900             Return to caller
.NONEWDSN ANOP
EXT90T26 EQU   *                   IPL LOGREC
         AIF   ((D'SMF90LOG) EQ 0).NOLOGREC
         L     R5,W_SMFBAS         Address SMF record
         A     R5,SMF90DOF         Address data section
         USING SMF90T26,R5         Reference data section
         L     R14,=A(T90TID)      Identifier
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF90TID),   Identifier                          X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'NONE',=C'Original_Logrec_Dataset',23),              X
               MF=(E,W_WRK)
         MVC   W_DSN1,SMF90LOG     Dataset
         CALL  DAFCC               Check criteria
         L     R14,=A(T90TID)      Identifier
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF90TID),   Identifier                          X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'NONE',=C'New_Logrec_Dataset',18),                   X
               MF=(E,W_WRK)
         MVC   W_DSN1,SMF9026N     Dataset
         CALL  DAFCC               Check criteria
.NOLOGREC ANOP
         B     DAF0904             Exit - No criteria check
         DROP  R3                  Dereference SMF record
         DROP  R4                  Dereference product section
         DROP  R5                  Dereference data section
         DROP  R6                  Dereference data set section
DAF090   $EXIT                     Exit
         AIF   ('&RT_USS' EQ '000').NOUSS1
**********************************************************************
         TITLE 'DAF092 - Extract SMF Record 92'
**********************************************************************
DAF092   $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING SMFRCD92,R3         Reference SMF record
*
**       Subtype Selection
*
         CLC   SMF92STP,=AL2(01)   File system mount
         BE    EXT92T01            Yes
         CLC   SMF92STP,=AL2(02)   File system quiesced
         BE    EXT92T02            Yes
         CLC   SMF92STP,=AL2(04)   File system unquiesced
         BE    EXT92T04            Yes
         CLC   SMF92STP,=AL2(05)   File system unmounted
         BE    EXT92T05            Yes
         CLC   SMF92STP,=AL2(06)   File system remounted
         BE    EXT92T06            Yes
         B     DAF0924             Exit - No criteria check
*
**       Subtype 01 - File system mount
*
EXT92T01 EQU   *                   Subtype 01 - File system mount
         L     R4,W_SMFBAS         Address SMF record
         A     R4,SMF92IOF         Address identification section
         USING SMF92ID,R4          Reference identification section
         L     R5,W_SMFBAS         Address SMF record
         A     R5,SMF92DOF         Address data section
         USING SMF92FSM,R5         Reference data section
         L     R6,W_SMFBAS         Address SMF record
         A     R6,SMF92MPF         Address path section
         USING SMF92FSP,R6         Reference path section
         MVC   W_JOB1,SMF92JBN     Job name
         MVC   W_USER,SMF92RUD     User identification
         MVC   W_DSN1,SMF92MFN     Dataset name 1
         MVC   W_DD,SMF92MDD       Data definition name
         CALL  DAFMC,              Move Comment                        X
               (=C'DD=',W_DD,8), Data definition name                  X
               MF=(E,W_WRK)
         L     R14,=A(T92MFT)      FSType
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF92MFT),   FSType                              X
               MF=(E,W_WRK)
         MVC   W_GROUP,SMF92RGD    Group
         CALL  DAFMC,              Move Comment                        X
               (=C'GROUP=',W_GROUP,8), Group                           X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'MTN=',SMF92MTN,8), File system type name            X
               MF=(E,W_WRK)
         LH    R1,SMF92PPL         Path name length
         $VLM  W_DSN2,SMF92PPN,(R1) Path name
         CALL  DAFMC,              Move Comment                        X
               (=C'PATH=',W_DSN2,44), Path name                        X
               MF=(E,W_WRK)
         L     R14,=A(T92STP)      Subtype
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF92STP),   Subtype                             X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'MBL=',SMF92MBL,4), File system block size           X
               MF=(E,W_WRK)
         DROP  R4                  Dereference identification section
         DROP  R5                  Dereference data section
         DROP  R6                  Dereference path section
         B     DAF0920             Exit - Criteria check
*
**       Subtype 02 - File system quiesced
*
EXT92T02 EQU   *                   Subtype 02 - File system quiesced
         L     R4,W_SMFBAS         Address SMF record
         A     R4,SMF92IOF         Address identification section
         USING SMF92ID,R4          Reference identification section
         L     R5,W_SMFBAS         Address SMF record
         A     R5,SMF92DOF         Address data section
         USING SMF92FSS,R5         Reference data section
         MVC   W_JOB1,SMF92JBN     Job name
         MVC   W_USER,SMF92RUD     User identification
         MVC   W_DSN1,SMF92SFN     Dataset name 1
         MVC   W_DD,SMF92SDD       Data definition name
         CALL  DAFMC,              Move Comment                        X
               (=C'DD=',W_DD,8), Data definition name                  X
               MF=(E,W_WRK)
         L     R14,=A(T92MFT)      FSType
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF92SFT),   FSType                              X
               MF=(E,W_WRK)
         MVC   W_GROUP,SMF92RGD    Group
         CALL  DAFMC,              Move Comment                        X
               (=C'GROUP=',W_GROUP,8), Group                           X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'STN=',SMF92STN,8), File system type name            X
               MF=(E,W_WRK)
         L     R14,=A(T92STP)      Subtype
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF92STP),   Subtype                             X
               MF=(E,W_WRK)
         DROP  R4                  Dereference identification section
         DROP  R5                  Dereference data section
         B     DAF0920             Exit - Criteria check
*
**       Subtype 04 - File system unquiesced
*
EXT92T04 EQU   *                   Subtype 04 - File system unquiesced
         L     R4,W_SMFBAS         Address SMF record
         A     R4,SMF92IOF         Address identification section
         USING SMF92ID,R4          Reference identification section
         L     R5,W_SMFBAS         Address SMF record
         A     R5,SMF92DOF         Address data section
         USING SMF92FSR,R5         Reference data section
         MVC   W_JOB1,SMF92JBN     Job name
         MVC   W_USER,SMF92RUD     User identification
         MVC   W_DSN1,SMF92RFN     Dataset name 1
         MVC   W_DD,SMF92RDD       Data definition name
         CALL  DAFMC,              Move Comment                        X
               (=C'DD=',W_DD,8), Data definition name                  X
               MF=(E,W_WRK)
         L     R14,=A(T92MFT)      FSType
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF92RFT),   FSType                              X
               MF=(E,W_WRK)
         MVC   W_GROUP,SMF92RGD    Group
         CALL  DAFMC,              Move Comment                        X
               (=C'GROUP=',W_GROUP,8), Group                           X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'RTN=',SMF92RTN,8), File system type name            X
               MF=(E,W_WRK)
         L     R14,=A(T92STP)      Subtype
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF92STP),   Subtype                             X
               MF=(E,W_WRK)
         DROP  R4                  Dereference identification section
         DROP  R5                  Dereference data section
         B     DAF0920             Exit - Criteria check
*
**       Subtype 05 - File system unmounted
**       Subtype 06 - File system remounted
*
EXT92T05 EQU   *                   Subtype 05 - File system unmounted
EXT92T06 EQU   *                   Subtype 06 - File system remounted
         L     R4,W_SMFBAS         Address SMF record
         A     R4,SMF92IOF         Address identification section
         USING SMF92ID,R4          Reference identification section
         L     R5,W_SMFBAS         Address SMF record
         A     R5,SMF92DOF         Address data section
         USING SMF92FSU,R5         Reference data section
         MVC   W_JOB1,SMF92JBN     Job name
         MVC   W_USER,SMF92RUD     User identification
         MVC   W_DSN1,SMF92UFN     Dataset name 1
         MVC   W_DD,SMF92UDD       Data definition name
         CALL  DAFMC,              Move Comment                        X
               (=C'DD=',W_DD,8), Data definition name                  X
               MF=(E,W_WRK)
         L     R14,=A(T92MFT)      FSType
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF92UFT),   FSType                              X
               MF=(E,W_WRK)
         MVC   W_GROUP,SMF92RGD    Group
         CALL  DAFMC,              Move Comment                        X
               (=C'GROUP=',W_GROUP,8), Group                           X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'UTN=',SMF92UTN,8), File system type name            X
               MF=(E,W_WRK)
         L     R14,=A(T92STP)      Subtype
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMF92STP),   Subtype                             X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'UBL=',SMF92UBL,4), File system block size           X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'USR=',SMF92USR,4), File system read calls           X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'USW=',SMF92USW,4), File system write calls          X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'UDI=',SMF92UDI,4), File system directory blocks     X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'UIR=',SMF92UIR,4), File system i/o blocks read      X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'UIW=',SMF92UIW,4), File system i/o blocks written   X
               MF=(E,W_WRK)
         DROP  R4                  Dereference identification section
         DROP  R5                  Dereference data section
         B     DAF0920             Exit - Criteria check
DAF092   $EXIT                     Exit
         DROP  R3                  Dereference SMF record
.NOUSS1  ANOP
         AIF   ('&RT_TCPIP' EQ '000').NOTCPIP1
**********************************************************************
         TITLE 'DAF118 - Extract SMF Record 118'
**********************************************************************
DAF118   $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         Reference SMF record
*
**       Subtype Selection
*
         CLC   SMFXXSTY,=AL2(03)   FTP Client
         BE    EXT76T03            Yes
         CLC   SMFXXSTY,=AL2(70)   FTP Server - APPEND
         BE    EXT76T70            Yes
         CLC   SMFXXSTY,=AL2(71)   FTP Server - DELETE
         BE    EXT76T71            Yes
         CLC   SMFXXSTY,=AL2(72)   FTP Server - Login Failure
         BE    EXT76T72            Yes
         CLC   SMFXXSTY,=AL2(73)   FTP Server - RENAME
         BE    EXT76T73            Yes
         CLC   SMFXXSTY,=AL2(74)   FTP Server - RETRIEVE
         BE    EXT76T74            Yes
         CLC   SMFXXSTY,=AL2(75)   FTP Server - STORE / STORE UNIQUE
         BE    EXT76T75            Yes
         CLC   SMFXXSTY,=AL2(&ST_FTP) FTP Server - Hardcoded Subtype
         BE    EXT76THC            Yes
         B     DAF1184             Exit - No criteria check
         DROP  R3                  Dereference SMF record
*
**       Subtype FTP
*
EXT76T03 EQU   *                   FTP Client
EXT76T70 EQU   *                   FTP Server - APPEND
EXT76T71 EQU   *                   FTP Server - DELETE
EXT76T72 EQU   *                   FTP Server - Login Failure
EXT76T73 EQU   *                   FTP Server - RENAME
EXT76T74 EQU   *                   FTP Server - RETRIEVE
EXT76T75 EQU   *                   FTP Server - STORE / STORE UNIQUE
EXT76THC EQU   *                   FTP Server - Hardcoded Subtype
         L     R3,W_SMFBAS         Address SMF record
         USING SMFFTP76,R3         Reference SMF record
         MVC   W_JOB1,SMFFTSTC     Job name
         MVC   W_USER,SMFFTPSU     User identification
         MVC   W_DSN1,SMFFTDSN     Dataset name 1
         CLC   SMFFTMEM,=CL8' '    Member present ?
         BE    E76NOMEM            No
         MVC   W_MEMBER,SMFFTMEM   Member name
         CALL  DAFMC,              Move Comment                        X
               (=C'MEMBER=',W_MEMBER,8), Member name                   X
               MF=(E,W_WRK)
E76NOMEM EQU   *
         CALL  DAFMC,              Move Comment                        X
               (=C'PCM=',SMFFTPCM,4), File system type name            X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'PTY=',SMFFTPTY,4), File system type name            X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'PSA=',SMFFTPSA+0,1), FTP IP address                 X
               MF=(E,W_WRK)
         $DECR W_CMT@              Comment address
         CALL  DAFMC,              Move Comment                        X
               (=C'NONE',=C'.',1), FTP IP address                      X
               MF=(E,W_WRK)
         $DECR W_CMT@              Comment address
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NONE',SMFFTPSA+1,1), FTP IP address                 X
               MF=(E,W_WRK)
         $DECR W_CMT@              Comment address
         CALL  DAFMC,              Move Comment                        X
               (=C'NONE',=C'.',1), FTP IP address                      X
               MF=(E,W_WRK)
         $DECR W_CMT@              Comment address
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NONE',SMFFTPSA+2,1), FTP IP address                 X
               MF=(E,W_WRK)
         $DECR W_CMT@              Comment address
         CALL  DAFMC,              Move Comment                        X
               (=C'NONE',=C'.',1), FTP IP address                      X
               MF=(E,W_WRK)
         $DECR W_CMT@              Comment address
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NONE',SMFFTPSA+3,1), FTP IP address                 X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'PSL=',SMFFTPSL+0,1), FTP IP address                 X
               MF=(E,W_WRK)
         $DECR W_CMT@              Comment address
         CALL  DAFMC,              Move Comment                        X
               (=C'NONE',=C'.',1), FTP IP address                      X
               MF=(E,W_WRK)
         $DECR W_CMT@              Comment address
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NONE',SMFFTPSL+1,1), FTP IP address                 X
               MF=(E,W_WRK)
         $DECR W_CMT@              Comment address
         CALL  DAFMC,              Move Comment                        X
               (=C'NONE',=C'.',1), FTP IP address                      X
               MF=(E,W_WRK)
         $DECR W_CMT@              Comment address
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NONE',SMFFTPSL+2,1), FTP IP address                 X
               MF=(E,W_WRK)
         $DECR W_CMT@              Comment address
         CALL  DAFMC,              Move Comment                        X
               (=C'NONE',=C'.',1), FTP IP address                      X
               MF=(E,W_WRK)
         $DECR W_CMT@              Comment address
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NONE',SMFFTPSL+3,1), FTP IP address                 X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'PCF=',SMFFTPCF,2), File system type name            X
               MF=(E,W_WRK)
         L     R14,=A(TFTPFM)      FTP data format
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMFFTPFM),   FTP data format                     X
               MF=(E,W_WRK)
         L     R14,=A(TFTPMO)      FTP mode
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMFFTPMO),   FTP mode                            X
               MF=(E,W_WRK)
         L     R14,=A(TFTPST)      FTP structure
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMFFTPST),   FTP structure                       X
               MF=(E,W_WRK)
         L     R14,=A(TFTPDT)      FTP dataset type
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMFFTPDT),   FTP dataset type                    X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'TBC=',SMFFTTBC,4), FTP byte count of transmission   X
               MF=(E,W_WRK)
         L     R14,=A(TFTPXD)      FTP id
         CALL  DAFPC,              Process Compare Table               X
               ((R14),SMFFTPXD),   FTP id                              X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'SLR=',SMFFTSLR,3), FTP server - last reply          X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'RS2=',SMFFTRS2,8), FTP server - abnormal end info   X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'MEM=',SMFFTMEM,8), FTP member name                  X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'DS2=',SMFFTDS2,44), FTP second dataset name         X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'MM2=',SMFFTMM2,8), FTP second member name           X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'HST=',SMFFTHST,8), FTP TCPIP host name              X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'SRP=',SMFFTSRP,2), FTP server remote port number    X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'SLP=',SMFFTSLP,2), FTP server local port number     X
               MF=(E,W_WRK)
         DROP  R3                  Dereference SMF record
DAF118   $EXIT                     Exit
.NOTCPIP1 ANOP
         AIF   ('&RT_HSM' EQ '000').NOHSM1
**********************************************************************
         TITLE 'DAF241 - Extract SMF Record DFHSM (241)'
**********************************************************************
DAF241   $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         Reference SMF record
         MVC   W_DSN1,FSRDSN       Dataset name
         MVC   W_JOB1,FSRJBN       Job name
         MVC   W_USER,FSRUID       User identification
         L     R14,=A(HSMTYPE)     Type
         CALL  DAFPC,              Process Compare Table               X
               ((R14),FSRTYPE),    Type                                X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'GROUP=',FSRGRP,44), Group name                      X
               MF=(E,W_WRK)
         MVC   W_VOL1,FSRFVOL      From volume serial
         CALL  DAFMC,              Move Comment                        X
               (=C'FVOL=',W_VOL1,6), From volume serial                X
               MF=(E,W_WRK)
         MVC   W_VOL2,FSRTVOL      To volume serial
         CALL  DAFMC,              Move Comment                        X
               (=C'TVOL=',W_VOL2,6), To volume serial                  X
               MF=(E,W_WRK)
         L     R14,=A(T14DSO)      DSORG
         CALL  DAFPC,              Process Compare Table               X
               ((R14),FSRDORG),    DSORG                               X
               MF=(E,W_WRK)
         NI    FSRRECFM,255-JFCRFO Turn off track overflow bit
         L     R14,=A(T14RCF)      RECFM
         CALL  DAFPC,              Process Compare Table               X
               ((R14),FSRRECFM),   RECFM                               X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'Mgmnt_class=',FSRMCNAM,8), Management class name    X
               MF=(E,W_WRK)
         DROP  R3                  Dereference SMF record
DAF241   $EXIT                     Exit
.NOHSM1  ANOP
         AIF   ('&RT_FILEAID' EQ '000').NOFILEAID1
**********************************************************************
         TITLE 'DAFFA - Extract SMF Record File-AID (170)'
**********************************************************************
*  Notes:          Only process dataset access records               *
**********************************************************************
DAFFA    $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING RSMFHDR,R3          Reference SMF record
         CLC   RRECTYPE,=X'10'     Dataset access record ?
         BNE   DAFFA4              No, exit
         MVC   W_DSN1,RDSN         Dataset name
         MVC   W_JOB1,RUSERID      Job name
         MVC   W_USER,RUSERID      User identification
         MVC   W_MEMBER,RMEMBER    Member name
         L     R14,=A(TFAFUNC)     Function
         CALL  DAFPC,              Process Compare Table               X
               ((R14),RDFUNC),     Function                            X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'DSN=',RDSN,44), Data Set Name                       X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'Member=',RMEMBER,8), Member name                    X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'Audit_DSN=',RAUDTDSN,44), Audit data set name       X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'Layout_DSN=',RLAYODSN,44), Layout data set name     X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'Layout_Member=',RLAYOMEM,8), Layout member name     X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'XREF_DSN=',RXREFDSN,44), XREF data set name         X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'XREF_Member=',RXREFMEM,8), XREF member name         X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'Selection_DSN=',RSELCDSN,44), Selection dataset     X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'Selection_Member=',RSELCMEM,8), Selection member    X
               MF=(E,W_WRK)
         MVC   W_CMTCLR,=C'N'      Do not clear comment area
         CALL  DAFCC               Check criteria
         CLI   RAUDTDSN,C' '       Audit trail dataset name ?
         BE    FANOAUDT            No
         MVC   W_DSN1,RAUDTDSN     Audit trail dataset name
         $FILL W_MEMBER,C' '       Blank out membername
         MVC   W_CMTCLR,=C'N'      Do not clear comment area
         CALL  DAFCC               Check criteria
FANOAUDT EQU   *
         CLI   RLAYODSN,C' '       Layout dataset name ?
         BE    FANOLAYO            No
         MVC   W_DSN1,RLAYODSN     Layout dataset name
         MVC   W_MEMBER,RLAYOMEM   Layout member name
         MVC   W_CMTCLR,=C'N'      Do not clear comment area
         CALL  DAFCC               Check criteria
FANOLAYO EQU   *
         CLI   RXREFDSN,C' '       XREF dataset name ?
         BE    FANOXREF            No
         MVC   W_DSN1,RXREFDSN     XREF dataset name
         MVC   W_MEMBER,RXREFMEM   XREF member name
         MVC   W_CMTCLR,=C'N'      Do not clear comment area
         CALL  DAFCC               Check criteria
FANOXREF EQU   *
         CLI   RSELCDSN,C' '       Selection criteria dataset name ?
         BE    DAFFA4              No
         MVC   W_DSN1,RSELCDSN     Selection criteria dataset name
         MVC   W_MEMBER,RSELCMEM   Selection criteria member name
         DROP  R3                  Dereference SMF record
DAFFA    $EXIT                     Exit
.NOFILEAID1 ANOP
**********************************************************************
         TITLE 'DAFGR - Generate Report'
**********************************************************************
DAFGR    $ENTRY AMODE=24,RMODE=24  Entry
         $MSG  W_LOG,DAF520I       Move message template
         MVC   W_LOG+32(15),=CL15'Generate Report'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         MVC   DAFRPT(L_DAFRPT),P_DAFRPT Copy DAFRPT DCB template
         MVC   W_OPENO(L_OPENO),T_OPENO Copy open parameter list
         OPEN  DAFRPT,MF=(E,W_OPENO) Open DAFRPT
         TM    DAFRPT+48,X'10'     DAFRPT open ?
         BNZ   GRRPTOK             Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,P_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=8 Return code
         MVC   W_WTOMSG+44(11),=CL11'OPEN/DAFRPT' System macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
GRRPTOK  EQU   *                   The file is open
         LA    R15,W_DAFRPT        DAFRPT control
         USING D_PRTCTL,R15        Reference DAFRPT control
         LA    R1,P_RPT            Get DAFRPT header address
         ST    R1,D_PRTHDR         Store DAFRPT header address
         ZAP   D_PRTPGE,=P'0'      Initialize page counter
         ZAP   D_PRTLNE,=P'99'     Initialize line counter
         DROP  R15                 Dereference DAFRPT control
         MVC   SORTOUT(L_SORTOU),P_SORTOU Copy SORTOUT DCB template
         MVC   W_OPENI(L_OPENI),T_OPENI Copy open parameter list
         OPEN  SORTOUT,MF=(E,W_OPENI) Open SORTOUT
         TM    SORTOUT+48,X'10'    SORTOUT open ?
         BNZ   GRSOOK              Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,P_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=8 Return code
         MVC   W_WTOMSG+44(12),=CL12'OPEN/SORTOUT' System macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
GRSOOK   EQU   *                   The file is open
         $FILL W_LSTDSN,C' '       Blank out last entity
GETSORT  EQU   *
         GET   SORTOUT,W_SORT      Read next logical SORTOUT record
         $FILL W_RPT1,C' '         Blank DAFRPT record
         CLC   W_LSTDSN,W_DSN1     Same entity ?
         BE    GRSKPDSN            Yes, skip DSN record
         CLI   W_LSTDSN+1,C' '     First DSN ?
         BE    GRSKPBLK            Yes, skip blank record
         $PRINT DAFRPT,P_BLANKS    Put blank DAFRPT record
GRSKPBLK EQU   *
         LA    R15,W_DAFRPT        DAFRPT control
         USING D_PRTCTL,R15        Reference DAFRPT control
         CP    D_PRTLNE,=P'45'     Near bottom of page ?
         BL    GRMOVDSN            No
         ZAP   D_PRTLNE,=P'99'     Force new page
         DROP  R15                 Dereference DAFRPT control
GRMOVDSN MVC   W_RPTDSN,W_DSN1     Dataset
         $PRINT DAFRPT,W_RPT       Put DAFRPT record
         $FILL W_RPT1,C' '         Blank DAFRPT record
         MVC   W_LSTDSN,W_DSN1     Set last entity
GRSKPDSN EQU   *
         LA    R15,W_DAFRPT        DAFRPT control
         USING D_PRTCTL,R15        Reference DAFRPT control
         CP    D_PRTLNE,=P'50'     Near bottom of page ?
         BL    GRMOVDTE            No
         ZAP   D_PRTLNE,=P'99'     Force new page
         DROP  R15                 Dereference DAFRPT control
GRMOVDTE MVC   W_RPTDTE,W_DATE     Date
         MVC   W_RPTTME,W_TIME     Time
         MVC   W_RPTSID,W_SYSTEM   System identification
         MVC   W_RPTJOB,W_JOB1     Job name
         MVC   W_RPTUSR,W_USER     User identification
         MVC   W_RPTRTY,W_RECORD   Record type
         MVC   W_RPTCMT,W_SRTCM1   Comment line 1
         $PRINT DAFRPT,W_RPT       Put DAFRPT record
         CLI   W_SRTCM2,C' '       Second comment line ?
         BE    GETSORT             Any more SORTOUT records ?
         $FILL W_RPT1,C' '         Blank DAFRPT record
         MVC   W_RPTCMT,W_SRTCM2   Comment line 2
         $PRINT DAFRPT,W_RPT       Put DAFRPT record
         CLI   W_SRTCM3,C' '       Third comment line ?
         BE    GETSORT             Any more SORTOUT records ?
         $FILL W_RPT1,C' '         Blank DAFRPT record
         MVC   W_RPTCMT,W_SRTCM3   Comment line 3
         $PRINT DAFRPT,W_RPT       Put DAFRPT record
         CLI   W_SRTCM4,C' '       Fourth comment line ?
         BE    GETSORT             Any more SORTOUT records ?
         $FILL W_RPT1,C' '         Blank DAFRPT record
         MVC   W_RPTCMT,W_SRTCM4   Comment line 4
         $PRINT DAFRPT,W_RPT       Put DAFRPT record
         CLI   W_SRTCM5,C' '       Fifth comment line ?
         BE    GETSORT             Any more SORTOUT records ?
         $FILL W_RPT1,C' '         Blank DAFRPT record
         MVC   W_RPTCMT,W_SRTCM5   Comment line 5
         $PRINT DAFRPT,W_RPT       Put DAFRPT record
         B     GETSORT             Any more SORTOUT records ?
GREOD    MVC   W_CLOSE(L_CLOSE),T_CLOSE Copy CLOSE parameter list
         CLOSE DAFRPT,MF=(E,W_CLOSE) Close DAFRPT
         MVC   W_CLOSE(L_CLOSE),T_CLOSE Copy CLOSE parameter list
         CLOSE SORTOUT,MF=(E,W_CLOSE) Close SORTOUT
GREXIT   EQU   *
         $MSG  W_LOG,DAF521I       Move message template
         MVC   W_LOG+32(15),=CL15'Generate Report'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
DAFGR    $EXIT                     Exit
**********************************************************************
         TITLE 'DAFGS - Generate Statistics'
**********************************************************************
DAFGS    $ENTRY AMODE=24,RMODE=24  Entry
         $MSG  W_LOG,DAF520I       Move message template
         MVC   W_LOG+32(19),=CL19'Generate Statistics'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         MVC   DAFSTAT(L_DAFSTA),P_DAFSTA Copy DAFSTAT DCB template
         MVC   W_OPENO(L_OPENO),T_OPENO Copy open parameter list
         OPEN  DAFSTAT,MF=(E,W_OPENO) Open DAFSTAT
         TM    DAFSTAT+48,X'10'    DAFSTAT open ?
         BNZ   GSSTAOK             Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,P_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=8 Return code
         MVC   W_WTOMSG+44(12),=CL12'OPEN/DAFSTAT' System macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
GSSTAOK  EQU   *                   The file is open
         LA    R15,W_DAFSTA        DAFSTAT control
         USING D_PRTCTL,R15        Reference DAFSTAT control
         LA    R1,P_STAT           Get DAFSTAT header address
         ST    R1,D_PRTHDR         Store DAFSTAT header address
         ZAP   D_PRTPGE,=P'0'      Initialize DAFSTAT page counter
         ZAP   D_PRTLNE,=P'99'     Initialize DAFSTAT line counter
         DROP  R15                 Dereference DAFSTAT control
         L     R3,W_SMFTBL         Set SMF table base address
         USING D_SMFTBL,R3         Reference SMF table
         LA    R4,#_SMFTBL         SMF definition table count
GSNEXT   $FILL W_STAT,C' '         Blank DAFSTAT record
         MVC   W_STATNM,D_SMFRNM   Specific SMF record name
         L     R0,D_SMFSMF         Specific
         CVD   R0,W_DBL              DAFSMF
         MVC   W_RCTMSK,P_RCTMSK       Record
         EDMK  W_RCTMSK,W_DBL            Counts
         MVC   W_STATSM,W_RCTMSK+5
         L     R0,D_SMFRPT         Specific
         CVD   R0,W_DBL              DAFRPT
         MVC   W_RCTMSK,P_RCTMSK       Record
         EDMK  W_RCTMSK,W_DBL            Counts
         MVC   W_STATRP,W_RCTMSK+5
         L     R0,D_SMFINV         Specific
         CVD   R0,W_DBL              Invalid
         MVC   W_RCTMSK,P_RCTMSK       Record
         EDMK  W_RCTMSK,W_DBL            Counts
         MVC   W_STATIN,W_RCTMSK+5
         $PRINT DAFSTAT,W_STAT     Put DAFSTAT record (specific line)
         LA    R3,L_SMFTBL(,R3)    Next SMF table entry
         BCT   R4,GSNEXT           Another one ?
         $FILL W_STAT,C' '         Blank DAFSTAT record
         MVC   W_STATNM+6(58),P_OTH Other SMF record name
         L     R0,W_SMFOTH         Other
         CVD   R0,W_DBL              DAFSMF
         MVC   W_RCTMSK,P_RCTMSK       Record
         EDMK  W_RCTMSK,W_DBL            Counts
         MVC   W_STATSM,W_RCTMSK+5
         $PRINT DAFSTAT,W_STAT     Put DAFSTAT record (Other line)
         $FILL W_STAT,C' '         Blank DAFSTAT record
         MVC   W_STATNM+6(58),P_TOT Total SMF record name
         L     R0,W_SMFTOT         Total
         CVD   R0,W_DBL              DAFSMF
         MVC   W_RCTMSK,P_RCTMSK       Record
         EDMK  W_RCTMSK,W_DBL            Counts
         MVC   W_STATSM,W_RCTMSK+5
         L     R0,W_RPTTOT         Total
         CVD   R0,W_DBL              DAFRPT
         MVC   W_RCTMSK,P_RCTMSK       Record
         EDMK  W_RCTMSK,W_DBL            Counts
         MVC   W_STATRP,W_RCTMSK+5
         L     R0,W_INVTOT         Total
         CVD   R0,W_DBL              Invalid
         MVC   W_RCTMSK,P_RCTMSK       Record
         EDMK  W_RCTMSK,W_DBL            Counts
         MVC   W_STATIN,W_RCTMSK+5
         $PRINT DAFSTAT,W_STAT     Put DAFSTAT record (total line)
         $PRINT DAFSTAT,P_BLANKS   Put blank DAFSTAT record
         $FILL W_STAT,C' '         Blank DAFSTAT record
         MVC   W_STAT+01(23),=C'DAFSMF Date/Time Range:'
         $PRINT DAFSTAT,W_STAT     Put DAFSTAT record
         $FILL W_STAT,C' '         Blank DAFSTAT record
         MVC   W_STAT+01(13),=C'Low  - Date: '
         MVC   W_STAT+14(07),W_DTE_LO
         MVC   W_STAT+21(08),=C'  Time: '
         MVC   W_STAT+29(11),W_TME_LO
         $PRINT DAFSTAT,W_STAT     Put DAFSTAT record
         $FILL W_STAT,C' '         Blank DAFSTAT record
         MVC   W_STAT+01(13),=C'High - Date: '
         MVC   W_STAT+14(07),W_DTE_HI
         MVC   W_STAT+21(08),=C'  Time: '
         MVC   W_STAT+29(11),W_TME_HI
         $PRINT DAFSTAT,W_STAT     Put DAFSTAT record
         MVC   W_CLOSE(L_CLOSE),T_CLOSE Copy CLOSE parameter list
         CLOSE DAFSTAT,MF=(E,W_CLOSE) Close DAFSTAT
         DROP  R3                  Dereference SMF table
GSEXIT   EQU   *
         $MSG  W_LOG,DAF521I       Move message template
         MVC   W_LOG+32(19),=CL19'Generate Statistics'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
DAFGS    $EXIT                     Exit
**********************************************************************
         TITLE 'DAFMB - Move Binary'
**********************************************************************
*  Input:          Parameter list pointed to by R1                   *
*                  . 00(R1) - Label address  (R2)                    *
*                  . 04(R1) - Binary address (R3)                    *
*                  . 08(R1) - Binary length  (R4)                    *
*  Notes:          Exit if the binary value is zero.                 *
**********************************************************************
DAFMB    $ENTRY AMODE=24,RMODE=24  Entry
         L     R2,0(R1)            Label address
         L     R3,4(R1)            Binary address
         LTR   R3,R3               Binary address zero ?
         BNP   DAFMB0              Yes, Done
         L     R4,8(R1)            Binary length
         LTR   R4,R4               Binary length zero ?
         BNP   DAFMB0              Yes, Done
         XC    W_FULL1,W_FULL1     Zero temp fullword
         LA    R5,W_FULL1          Temp fullword address
         AH    R5,=H'4'            Point to end of temp fullword
         SR    R5,R4               Adjust for length
         $VLM  (R5),(R3),(R4)      Move binary value
         L     R3,W_FULL1          Store binary value
         LTR   R3,R3               Binary value zero ?
         BNP   DAFMB0              Yes, Done
         MVC   W_TXTLBL,0(R2)
         CVD   R3,W_DBL
         MVC   W_BINEDT,P_BINMSK
         EDMK  W_BINEDT,W_DBL
         CALL  DAFMC,              Move Comment                        X
               (W_TXTLBL,W_BINEDT,16), Move                            X
               MF=(E,W_WRK)
DAFMB    $EXIT                     Exit
**********************************************************************
         TITLE 'DAFMC - Move Comment'
**********************************************************************
*  Input:          Parameter list pointed to by R1                   *
*                  . 00(R1) - Label address (R3)                     *
*                  . 04(R1) - Field address (R4)                     *
*                  . 08(R1) - Field length  (R5)                     *
*  Notes:          If input field leading null - exit.               *
*                  If input field completely blank - exit.           *
*                  Will stop moving characters if max length or      *
*                  trailing blank is encountered.                    *
*                  Will skip label if equal to CL4'NONE'.            *
**********************************************************************
DAFMC    $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,0(R1)            Input label address
         L     R4,4(R1)            Input field address
         CLI   0(R4),X'00'         Input field leading null ?
         BE    DAFMC0              Yes, get out
         L     R5,8(R1)            Input field max length
         LR    R15,R5              Input field max length
         $VLC  (R4),P_BLANKS,(R15) Input field completely blank ?
         BE    DAFMC0              Yes, get out
         XR    R7,R7               Clear counter
         $FILL W_SAVCM1,C' '       Blank temp comment
         LA    R2,W_SAVCM1         Temp comment address
         LA    R6,15               Maximum label length
         CLC   0(4,R3),=C'NONE'    Bypass label ?
         BE    MCFSLB              Yes, skip it
MCLSLB   CLC   0(1,R3),=C' '       Leading label blanks?
         BNE   MCLNXT              No, move it
         LA    R3,1(,R3)           Next input byte
         B     MCLSLB              Another label byte ?
MCLNXT   MVC   0(1,R2),0(R3)       Move one label byte
         CLC   0(1,R3),=C' '       Trailing label blank ?
         BE    MCLEXIT             Yes, Done
         CLC   0(1,R3),=C'='       Trailing label equal sign ?
         BE    MCLEXIT             Yes, Done
         LA    R3,1(,R3)           Next input byte
         LA    R2,1(,R2)           Next output byte
         LA    R7,1(,R7)           Increment counter
         BCT   R6,MCLNXT           Another label byte ?
MCLEXIT  LA    R2,1(,R2)           Next output byte
         LA    R7,1(,R7)           Increment counter
MCFSLB   CLC   0(1,R4),=C' '       Leading field blank ?
         BNE   MCFNXT              No, move it
         LA    R4,1(,R4)           Next input byte
         BCTR  R5,0                Decrement max length
         B     MCFSLB              Another field byte ?
MCFNXT   MVC   0(1,R2),0(R4)       Move one field byte
         CLC   0(1,R4),=C' '       Trailing field blank ?
         BE    MCFEXIT             Yes, Done
         LA    R4,1(,R4)           Next input byte
         LA    R2,1(,R2)           Next output byte
         LA    R7,1(,R7)           Increment counter
         BCT   R5,MCFNXT           Another field byte ?
MCFEXIT  LA    R2,1(,R2)           Next output byte
         LA    R7,1(,R7)           Increment counter
         L     R6,W_CMT@           Comment address
         LA    R2,W_SRTCMT         Comment starting address
         SR    R6,R2               Comment length
         LR    R2,R6               Comment length
         AR    R2,R7               Determine new comment length
         C     R6,=F'88'           Comment line 1 ?
         BH    MCC2L               No, check comment line 2
         C     R2,=F'88'           Too big for comment line 1 ?
         BL    MCMOVE              Move it
         LA    R15,W_SRTCM2        Bump it up to comment line 2
         ST    R15,W_CMT@          Save new comment address
         B     MCMOVE              Move it
MCC2L    C     R6,=F'176'          Comment line 2 ?
         BH    MCC3L               No, check comment line 3
         C     R2,=F'176'          Too big for comment line 2 ?
         BL    MCMOVE              Move it
         LA    R15,W_SRTCM3        Bump it up to comment line 3
         ST    R15,W_CMT@          Save new comment address
         B     MCMOVE              Move it
MCC3L    C     R6,=F'264'          Comment line 3 ?
         BH    MCC4L               No, check comment line 4
         C     R2,=F'264'          Too big for comment line 3 ?
         BL    MCMOVE              Move it
         LA    R15,W_SRTCM4        Bump it up to comment line 4
         ST    R15,W_CMT@          Save new comment address
         B     MCMOVE              Move it
MCC4L    C     R6,=F'352'          Comment line 4 ?
         BH    MCC5L               No, check comment line 5
         C     R2,=F'352'          Too big for comment line 4 ?
         BL    MCMOVE              Move it
         LA    R15,W_SRTCM5        Bump it up to comment line 5
         ST    R15,W_CMT@          Save new comment address
         B     MCMOVE              Move it
MCC5L    C     R6,=F'440'          Comment line 5 ?
         BH    DAFMC4              No, get out RC=04
         C     R2,=F'440'          Too big for comment line 5 ?
         BL    MCMOVE              Move it
         B     DAFMC4              Comment too long - Get out RC=04
MCMOVE   L     R6,W_CMT@           Comment address
         BCTR  R7,0                Move length - 1
         LR    R1,R7               Move length - 1
         $VLM  (R6),W_SAVCM1,(R1)  Move it
         AR    R6,R7               New address
         LA    R6,1(,R6)           Incr
         ST    R6,W_CMT@           Save
DAFMC    $EXIT                     Exit
**********************************************************************
         TITLE 'DAFPC - Process Compare Table'
**********************************************************************
*  Input:          Parameter list pointed to by R1                   *
*                  . 00(R1) - Compare Table Address (R3)             *
*                  . 04(R1) - Comparator Address    (R4)             *
*  Output:         R15 -  00 - Comparator found                      *
*                  R15 -  04 - Comparator not found                  *
*  Notes:          Move compare table label to W_TXTLBL ending in =  *
*                  Compare values                                    *
*                  If equal:  Mov_cmt(label=text), RC=00             *
*                  If not:    Mov_cmt(label=Unknown), RC=04          *
*                  If text = reserved then get out                   *
**********************************************************************
DAFPC    $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,0(R1)            Compare table address
         L     R4,4(R1)            Comparator address
         L     R5,0(R3)            Compare length
         LA    R3,4(,R3)           Entries
         L     R6,0(,R3)           Entries
         LA    R3,4(,R3)           Input label address
         LA    R2,W_TXTLBL         Output label address
         $FILL W_TXTLBL,C' '       Blank label
         $FILL W_DAFPC,C' '        Blank work
PCLNXT   MVC   0(1,R2),0(R3)       Move one label byte
         CLC   0(1,R3),=C'='       Trailing label equal sign ?
         BE    PCLEXIT             Yes, Done
         LA    R3,1(,R3)           Next input label address
         LA    R2,1(,R2)           Next output label address
         B     PCLNXT              Get next input label byte
PCLEXIT  EQU   *
*CLEXIT  LR    R15,R5              Compare length
         LA    R3,1(,R3)           Next input label address
PCNEXT   $VLC  (R3),(R4),(R5)      CHAR match ?
         BNE   PCINCR
         LR    R7,R3               Entry address
         AR    R7,R5               Text address
         CLC   0(8,R15),=C'Reserved' Reserved value ?
         BE    DAFPC0              Yes, get out
         MVC   W_DAFPC,0(R7)       Save text value
         LA    R8,41               Length
         CALL  DAFMC,              Move Comment                        X
               (W_TXTLBL,(R7),(R8)),                                   X
               MF=(E,W_WRK)
         B     DAFPC0              Get out
PCINCR   LA    R3,46(,R3)          Next CHAR table entry
         BCT   R6,PCNEXT           Another one ?
         CLC   W_TXTLBL(6),=C'MAJOR=' Major enqueue ?
         BE    DAFPC4              Indicate comparator not found
         $FILL W_CHAR16,C' '       Blank work area
         MVC   W_CHAR16(8),=C'Unknown(' Move prefix
         LR    R15,R5              Compare length
         $VLM  W_CHAR16+8,(R4),(R15)  Move comparator
         LA    R15,W_CHAR16        Work area address
         LA    R15,8(R15)          Add prefix
         AR    R15,R5              Add comparator length
         MVI   0(R15),C')'         Move suffix
         LA    R8,16               Length
         CALL  DAFMC,              Move Comment                        X
               (W_TXTLBL,W_CHAR16,(R8)),                               X
               MF=(E,W_WRK)
         B     DAFPC4              Indicate comparator not found
DAFPC    $EXIT                     Exit
**********************************************************************
         TITLE 'DAFPP - Put Print Record'
**********************************************************************
*  Input:          Parameter list pointed to by R1                   *
*                  . 00(R1) - Printer Control Address (R3)           *
*                  . 04(R1) - Printer DCB Address     (R4)           *
*                  . 08(R1) - Record Address          (R5)           *
*  Output:         R15 -  00 - Normal                                *
**********************************************************************
DAFPP    $ENTRY AMODE=24,RMODE=24  Entry
*        ABEND X'BAD',DUMP,,SYSTEM
         L     R3,0(R1)            Printer Control Table Address
         L     R4,4(R1)            Printer DCB Address
         L     R5,8(R1)            Record Address
         USING D_PRTCTL,R3         Reference Printer Control
         CP    D_PRTLNE,=P'55'     End of page ?
         BL    PPNOHEAD            No
         ZAP   D_PRTLNE,=P'0'      Reset line counter
         AP    D_PRTPGE,=P'1'      Increment page counter
         $FILL W_TRACE,C' '        Blank header record
         MVI   W_TRACE,C'1'        ANSI carriage control - new page
         MVC   W_TRACE+041(28),=CL28'Dataset Audit Facility (DAF)'
         MVC   W_TRACE+069(24),=CL24' - Level 2.6.0(&SYSDATC)'
         MVC   W_TRACE+116(5),=C'Page: ' Page number literal
         MVC   W_TRACE+124(6),=X'402020202120' Page number mask
         ED    W_TRACE+124(6),D_PRTPGE Edit page number
         PUT   (R4),W_TRACE        Write header record
         PUT   (R4),P_BLANKS       Write blank header record
         L     R15,D_PRTHDR        Get header address
         PUT   (R4),(R15)          Write next logical record
         L     R15,D_PRTHDR        Get header address
         CLC   1(4,R15),=C'Date'   Is this DAFRPT ?
         BNE   PPNOHEAD            Continue
         CP    D_PRTPGE,=P'1'      First page ?
         BE    PPNOHEAD            Continue
         CLC   W_LSTDSN,W_DSN1     Is this a continuation ?
         BNE   PPNOHEAD            No, Continue
         $FILL W_TRACE,C' '        Blank header record
         MVC   W_TRACE+01(L'W_DSN1),W_DSN1 Dataset
         MVC   W_TRACE+45(11),=C'(continued)'
         PUT   (R4),W_TRACE        Write next logical record
         $FILL W_TRACE,C' '        Blank header record
PPNOHEAD EQU   *
         AP    D_PRTLNE,=P'1'      Increment line counter
         PUT   (R4),(R5)           Write detail record
         DROP  R3                  Dereference Printer Control
DAFPP    $EXIT                     Exit
**********************************************************************
         TITLE 'DAFPS - Process Control Statements'
**********************************************************************
DAFPS    $ENTRY AMODE=24,RMODE=24  Entry
         $MSG  W_LOG,DAF520I       Move message template
         MVC   W_LOG+32(26),=CL26'Process Control Statements'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         MVC   DAFCS(L_DAFCS),P_DAFCS Copy DAFCS DCB template
         MVC   W_OPENI(L_OPENI),T_OPENI Copy open parameter list
         OPEN  DAFCS,MF=(E,W_OPENI) Open DAFCS
         TM    DAFCS+48,X'10'      DAFCS open ?
         BNZ   PSCSOK              Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,P_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=8 Return code
         MVC   W_WTOMSG+44(10),=CL10'OPEN/DAFCS' System macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
PSCSOK   EQU   *                   The file is open
         LA    R15,DAFCS           DAFCS
         USING IHADCB,R15          Reference DAFCS DCB
         LH    R0,DCBLRECL         DAFCS LRECL
         ST    R0,W_CSLEN          DAFCS LRECL
         DROP  R15                 Dereference DAFCS DCB
         XC    W_FLAG,W_FLAG       Turn off flags
         XC    W_F$CS,W_F$CS       Turn off control statement flags
         $FILL W_TYPE,C' '         Blank type
         $MSG  W_LOG,DAF502I       Move message template
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
PSGETCS  $FILL W_CS133,C' '        Blank DAFLOG record
         $FILL W_CSKWD,C' '        Blank control statement keyword
         $FILL W_CSOP,C' '         Blank control statement operator
         $FILL W_CSVAL,C' '        Blank control statement value
         $MSG  W_LOG,DAF504I       Move message template
         GET   DAFCS,W_LOG+9       Read next logical DAFCS record
         CALL  DAFCSP              Control Statement Parse
         LTR   R15,R15             OK ?
         BNZ   PSGETCS             No - Get next control statement
         L     R3,W_KWD@           Keyword table pointer
         USING D_KWDTBL,R3         Reference keyword table
         L     R4,W_OP@            Operator table pointer
         USING D_OPTBL,R4          Reference operator table
         LA    R5,D_KWDVGA         Get value getmain address
         A     R5,D_OPOFF          Adjust operator offset
         L     R15,0(R5)
         LTR   R15,R15             Any operands yet ?
         BNZ   PSNOGM              Yes, skip getmain
         LH    R0,D_KWDVGL         Value getmain length
         STORAGE OBTAIN,LENGTH=(0),BNDRY=PAGE Obtain operand area
         LTR   R15,R15             OK ?
         BZ    PSGMVLOK            Yes
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,P_DAF801   Copy WTO message
         $HEX  W_WTOMSG+35,(R15),LEN=8 Return code
         MVC   W_WTOMSG+44(12),=CL12'OBTAIN/VALUE' System macro name
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 801,DUMP            User abend 801 (U0801)
PSGMVLOK ST    R1,0(R5)            Store operand address
         LR    R0,R1               Receiving field address
         LH    R1,D_KWDVGL         Receiving field length
         XR    R14,R14             Sending field address - none
         XR    R15,R15             Sending field length - none
         ICM   R15,B'1000',=C' '   Pad character
         MVCL  R0,R14              Fill the field
PSNOGM   MVC   W_HALF1,D_KWDKVC    Keyword value count
         $INCR W_HALF1             Increment temporary operand counter
         CLC   W_HALF1,D_KWDOMC    Too many operands ?
         BL    PSMOVCS             No, operand OK
         MVC   W_LOG+53(22),=C'<--- Too many keywords'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         OI    W_F$CS,W_F$KWD      Turn on keyword error flag
         B     PSGETCS             Any more DAFCS records ?
*SMOVCS  BCTR  R7,0                Operand length - 1
PSMOVCS  LH    R2,D_KWDOML         Maximum operand length
         LA    R2,5(,R2)           Add 5 (2 length, 3 flag)
         LA    R15,D_KWDOVC        Operator value count
         A     R15,D_OPOFF         Adjust with offset
         L     R15,0(R15)
         STH   R15,W_HALF1         Adjust with offset
         MH    R2,W_HALF1          Offset
         LA    R15,D_KWDVGA        Value getmain address
         A     R15,D_OPOFF
         A     R2,0(R15)           Address
         STH   R7,W_HALF1          Save
         MVC   0(1,R2),D_OPLO      Low operand
         MVC   1(1,R2),D_OPEQ      Equal operand
         MVC   2(1,R2),D_OPHI      High operand
         MVC   3(2,R2),W_HALF1     Move operand
         LA    R2,5(,R2)           Point to operand
         L     R1,W_CSVAL@         Control statement value length
         $VLM  (R2),W_CSVAL,(R1)   Move control statement value
         LH    R15,D_KWDKVC        Get keyword value counter
         LA    R15,1(,R15)         Increment keyword value counter
         STH   R15,D_KWDKVC        Save keyword value counter
         LA    R5,D_KWDOVC         Operator value count
         A     R5,D_OPOFF          Adjust with offset
         L     R8,0(R5)
         LA    R8,1(R8)            Increment specific
         ST    R8,0(R5)            Put it back
         MVC   W_LOG+53(24),=C'<--- OK                 '
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         TM    W_F$TRAC,W_F$CRI    Criteria Trace ?
         BNO   PSNOTRA1            No
         $MSG  W_LOG,DAF620I       Move message template
         MVC   W_LOG+13(L'W_CSKWD),W_CSKWD Keyword
         MVC   W_LOG+27(L'W_CSOP),W_CSOP Operator
         MVC   W_LOG+37(L'W_CSVAL),W_CSVAL Value
         MVC   W_LOG+88(4),W_CSVAL@ Value
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
PSNOTRA1 EQU   *
         $INCR W_CSTOT             Increment DAFCS counter
         B     PSGETCS             Any more DAFCS records ?
PSEOD    MVC   W_CLOSE(L_CLOSE),T_CLOSE Copy CLOSE parameter list
         CLOSE DAFCS,MF=(E,W_CLOSE) Close DAFCS
         TM    W_F$CS,W_F$KWD+W_F$OP+W_F$VAL DAFCS error flag on ?
         BZ    PSNECS              No
         TM    W_F$CS,W_F$KWD      Keyword error flag on ?
         BNO   PSNEKWD             No, continue
         $PRINT DAFLOG,P_BLANKS    Put blank DAFLOG record
         $MSG  W_LOG,DAF500I       Move message template
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         L     R3,W_KWDTBL         Set keyword table address
         LA    R15,#_KWDTBL        Keyword table count
         ST    R15,W_KWDTB#        Keyword table count
         $FILL W_LOG,C' '          Blank log record
         MVC   W_LOG+09(07),=C'Keyword' Move keyword literal
         MVC   W_LOG+20(04),=C'Type' Move type literal
         MVC   W_LOG+31(06),=C'Length' Move length literal
         MVC   W_LOG+39(11),=C'Description' Move description literal
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         $FILL W_LOG,C' '          Blank log record
         MVC   W_LOG+09(07),=C'=======' Move keyword literal
         MVC   W_LOG+20(04),=C'====' Move type literal
         MVC   W_LOG+31(06),=C'======' Move length literal
         MVC   W_LOG+39(11),=C'===========' Move description literal
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
PSEKWD   $FILL W_LOG,C' '          Blank log record
         MVC   W_LOG+09(L'D_KWDTXT),D_KWDTXT  Move keyword name
         MVC   W_LOG+20(L'D_KWDTYP),D_KWDTYP  Move keyword type
         LH    R1,D_KWDOML         Load keyword maximum length
         CVD   R1,W_DBL            Convert keyword maximum length
         OI    W_DBL+7,X'0F'       Force sign
         UNPK  W_LOG+33(02),W_DBL+6(2) Unpack keyword maximum length
         MVC   W_LOG+39(L'D_KWDDES),D_KWDDES  Move keyword description
         MVC   W_LOG+70(L'D_KWDAL1),D_KWDAL1  Move keyword alias 1
         MVC   W_LOG+85(L'D_KWDAL2),D_KWDAL2  Move keyword alias 2
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         LA    R3,L_KWDTBL(,R3)    Increment keyword table entry
         L     R1,W_KWDTB#         Keyword table count
         $DECR W_KWDTB#            Keyword table count
         BCT   R1,PSEKWD           Print next keyword table entry
PSNEKWD  TM    W_F$CS,W_F$OP       Operator error flag on ?
         BNO   PSNEOP              No, continue
         $PRINT DAFLOG,P_BLANKS    Put blank DAFLOG record
         $MSG  W_LOG,DAF501I       Move message template
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         L     R4,=A(OPTBL)        Set operator table address
         LA    R5,#_OPTBL          Operator table count
         $FILL W_LOG,C' '          Blank log record
         MVC   W_LOG+09(08),=C'Operator' Move operator literal
         MVC   W_LOG+23(11),=C'Description' Move description literal
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         $FILL W_LOG,C' '          Blank log record
         MVC   W_LOG+09(08),=C'========' Move operator literal
         MVC   W_LOG+23(11),=C'===========' Move description literal
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
PSEOP    $FILL W_LOG,C' '          Blank log record
         MVC   W_LOG+09(L'D_OPTXT),D_OPTXT  Move operator name
         MVC   W_LOG+23(L'D_OPDES),D_OPDES  Move operator description
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         LA    R4,L_OPTBL(,R4)     Increment operator table entry
         BCT   R5,PSEOP            Print next operator table entry
PSNEOP   MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,P_DAF708   Copy WTO message
         WTO   MF=(E,W_WTO)        Issue WTO
         MVC   W_RC,=F'8'          Return Code 8
PSNECS   CLC   W_CSTOT,=F'0'       Any DAFCS specified ?
         BNE   PSEXIT              . Yes, done
         $MSG  W_LOG,DAF503I       Move message template
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
PSEXIT   EQU   *
         $MSG  W_LOG,DAF521I       Move message template
         MVC   W_LOG+32(26),=CL26'Process Control Statements'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
DAFPS    $EXIT                     Exit
         DROP  R3                  Dereference keyword table
         DROP  R4                  Dereference operator table
**********************************************************************
         TITLE 'DAFPT - Process TM Table'
**********************************************************************
*  Input:          Parameter list pointed to by R1                   *
*                  . 00(R1) - TM Table Address   (R2)                *
*                  . 04(R1) - Comparator Address (R3)                *
*  Notes:          Move compare table label to W_TXTLBL ending in =  *
*                  Test all eight bits                               *
*                  If on and text ne Reserved, Mov_cmt(label=text)   *
**********************************************************************
DAFPT    $ENTRY AMODE=24,RMODE=24  Entry
         L     R2,0(R1)            TM Table address
         L     R3,4(R1)            Compare address
         MVC   W_TM,0(R3)          Compare value
         $FILL W_TXTLBL,C' '       Blank label
         $FILL W_DAFPT1,C' '       Blank work 1
         $FILL W_DAFPT2,C' '       Blank work 2
         $FILL W_DAFPT3,C' '       Blank work 3
         $FILL W_DAFPT4,C' '       Blank work 4
         LA    R4,W_TXTLBL         Output label address
PTLNXT   MVC   0(1,R4),0(R2)       Move one label byte
         CLC   0(1,R2),=C'='       Trailing label equal sign ?
         BE    PTLEXIT             Yes, Done
         LA    R2,1(,R2)           Next input label address
         LA    R4,1(,R4)           Next output label address
         B     PTLNXT              Get next input label byte
PTLEXIT  LA    R2,1(,R2)           First entry
         TM    W_TM,W_F$BIT0       Is bit 0 on ?
         BNO   PTBIT1              No
         CLC   0(8,R2),=C'Reserved' Reserved ?
         BE    PTBIT1              Yes, Skip it
         LA    R8,32               Length
         CALL  DAFMC,              Move Comment                        X
               (W_TXTLBL,(R2),(R8)),                                   X
               MF=(E,W_WRK)
         CLI   W_DAFPT1,C' '       Blank ?
         BE    PTB0M1              Yes - use it
         CLI   W_DAFPT2,C' '       Blank ?
         BE    PTB0M2              Yes - use it
         CLI   W_DAFPT3,C' '       Blank ?
         BE    PTB0M3              Yes - use it
         CLI   W_DAFPT4,C' '       Blank ?
         BE    PTB0M4              Yes - use it
PTB0M1   MVC   W_DAFPT1,0(R2)      Move text
         B     PTB0EXIT            Next bit
PTB0M2   MVC   W_DAFPT2,0(R2)      Move text
         B     PTB0EXIT            Next bit
PTB0M3   MVC   W_DAFPT3,0(R2)      Move text
         B     PTB0EXIT            Next bit
PTB0M4   MVC   W_DAFPT4,0(R2)      Move text
         B     PTB0EXIT            Next bit
PTB0EXIT EQU   *                   Next bit
PTBIT1   LA    R2,32(,R2)          Next TM table entry
         TM    W_TM,W_F$BIT1       Is bit 1 on ?
         BNO   PTBIT2              No
         CLC   0(8,R2),=C'Reserved' Reserved ?
         BE    PTBIT2              Yes, Skip it
         LA    R8,32               Length
         CALL  DAFMC,              Move Comment                        X
               (W_TXTLBL,(R2),(R8)),                                   X
               MF=(E,W_WRK)
         CLI   W_DAFPT1,C' '       Blank ?
         BE    PTB1M1              Yes - use it
         CLI   W_DAFPT2,C' '       Blank ?
         BE    PTB1M2              Yes - use it
         CLI   W_DAFPT3,C' '       Blank ?
         BE    PTB1M3              Yes - use it
         CLI   W_DAFPT4,C' '       Blank ?
         BE    PTB1M4              Yes - use it
PTB1M1   MVC   W_DAFPT1,0(R2)      Move text
         B     PTB1EXIT            Next bit
PTB1M2   MVC   W_DAFPT2,0(R2)      Move text
         B     PTB1EXIT            Next bit
PTB1M3   MVC   W_DAFPT3,0(R2)      Move text
         B     PTB1EXIT            Next bit
PTB1M4   MVC   W_DAFPT4,0(R2)      Move text
         B     PTB1EXIT            Next bit
PTB1EXIT EQU   *                   Next bit
PTBIT2   LA    R2,32(,R2)          Next TM table entry
         TM    W_TM,W_F$BIT2       Is bit 2 on ?
         BNO   PTBIT3              No
         CLC   0(8,R2),=C'Reserved' Reserved ?
         BE    PTBIT3              Yes, Skip it
         LA    R8,32               Length
         CALL  DAFMC,              Move Comment                        X
               (W_TXTLBL,(R2),(R8)),                                   X
               MF=(E,W_WRK)
         CLI   W_DAFPT1,C' '       Blank ?
         BE    PTB2M1              Yes - use it
         CLI   W_DAFPT2,C' '       Blank ?
         BE    PTB2M2              Yes - use it
         CLI   W_DAFPT3,C' '       Blank ?
         BE    PTB2M3              Yes - use it
         CLI   W_DAFPT4,C' '       Blank ?
         BE    PTB2M4              Yes - use it
PTB2M1   MVC   W_DAFPT1,0(R2)      Move text
         B     PTB2EXIT            Next bit
PTB2M2   MVC   W_DAFPT2,0(R2)      Move text
         B     PTB2EXIT            Next bit
PTB2M3   MVC   W_DAFPT3,0(R2)      Move text
         B     PTB2EXIT            Next bit
PTB2M4   MVC   W_DAFPT4,0(R2)      Move text
         B     PTB2EXIT            Next bit
PTB2EXIT EQU   *                   Next bit
PTBIT3   LA    R2,32(,R2)          Next TM table entry
         TM    W_TM,W_F$BIT3       Is bit 3 on ?
         BNO   PTBIT4              No
         CLC   0(8,R2),=C'Reserved' Reserved ?
         BE    PTBIT4              Yes, Skip it
         LA    R8,32               Length
         CALL  DAFMC,              Move Comment                        X
               (W_TXTLBL,(R2),(R8)),                                   X
               MF=(E,W_WRK)
         CLI   W_DAFPT1,C' '       Blank ?
         BE    PTB3M1              Yes - use it
         CLI   W_DAFPT2,C' '       Blank ?
         BE    PTB3M2              Yes - use it
         CLI   W_DAFPT3,C' '       Blank ?
         BE    PTB3M3              Yes - use it
         CLI   W_DAFPT4,C' '       Blank ?
         BE    PTB3M4              Yes - use it
PTB3M1   MVC   W_DAFPT1,0(R2)      Move text
         B     PTB3EXIT            Next bit
PTB3M2   MVC   W_DAFPT2,0(R2)      Move text
         B     PTB3EXIT            Next bit
PTB3M3   MVC   W_DAFPT3,0(R2)      Move text
         B     PTB3EXIT            Next bit
PTB3M4   MVC   W_DAFPT4,0(R2)      Move text
         B     PTB3EXIT            Next bit
PTB3EXIT EQU   *                   Next bit
PTBIT4   LA    R2,32(,R2)          Next TM table entry
         TM    W_TM,W_F$BIT4       Is bit 4 on ?
         BNO   PTBIT5              No
         CLC   0(8,R2),=C'Reserved' Reserved ?
         BE    PTBIT5              Yes, Skip it
         LA    R8,32               Length
         CALL  DAFMC,              Move Comment                        X
               (W_TXTLBL,(R2),(R8)),                                   X
               MF=(E,W_WRK)
         CLI   W_DAFPT1,C' '       Blank ?
         BE    PTB4M1              Yes - use it
         CLI   W_DAFPT2,C' '       Blank ?
         BE    PTB4M2              Yes - use it
         CLI   W_DAFPT3,C' '       Blank ?
         BE    PTB4M3              Yes - use it
         CLI   W_DAFPT4,C' '       Blank ?
         BE    PTB4M4              Yes - use it
PTB4M1   MVC   W_DAFPT1,0(R2)      Move text
         B     PTB4EXIT            Next bit
PTB4M2   MVC   W_DAFPT2,0(R2)      Move text
         B     PTB4EXIT            Next bit
PTB4M3   MVC   W_DAFPT3,0(R2)      Move text
         B     PTB4EXIT            Next bit
PTB4M4   MVC   W_DAFPT4,0(R2)      Move text
         B     PTB4EXIT            Next bit
PTB4EXIT EQU   *                   Next bit
PTBIT5   LA    R2,32(,R2)          Next TM table entry
         TM    W_TM,W_F$BIT5       Is bit 5 on ?
         BNO   PTBIT6              No
         CLC   0(8,R2),=C'Reserved' Reserved ?
         BE    PTBIT6              Yes, Skip it
         LA    R8,32               Length
         CALL  DAFMC,              Move Comment                        X
               (W_TXTLBL,(R2),(R8)),                                   X
               MF=(E,W_WRK)
         CLI   W_DAFPT1,C' '       Blank ?
         BE    PTB5M1              Yes - use it
         CLI   W_DAFPT2,C' '       Blank ?
         BE    PTB5M2              Yes - use it
         CLI   W_DAFPT3,C' '       Blank ?
         BE    PTB5M3              Yes - use it
         CLI   W_DAFPT4,C' '       Blank ?
         BE    PTB5M4              Yes - use it
PTB5M1   MVC   W_DAFPT1,0(R2)      Move text
         B     PTB5EXIT            Next bit
PTB5M2   MVC   W_DAFPT2,0(R2)      Move text
         B     PTB5EXIT            Next bit
PTB5M3   MVC   W_DAFPT3,0(R2)      Move text
         B     PTB5EXIT            Next bit
PTB5M4   MVC   W_DAFPT4,0(R2)      Move text
         B     PTB5EXIT            Next bit
PTB5EXIT EQU   *                   Next bit
PTBIT6   LA    R2,32(,R2)          Next TM table entry
         TM    W_TM,W_F$BIT6       Is bit 6 on ?
         BNO   PTBIT7              No
         CLC   0(8,R2),=C'Reserved' Reserved ?
         BE    PTBIT7              Yes, Skip it
         LA    R8,32               Length
         CALL  DAFMC,              Move Comment                        X
               (W_TXTLBL,(R2),(R8)),                                   X
               MF=(E,W_WRK)
         CLI   W_DAFPT1,C' '       Blank ?
         BE    PTB6M1              Yes - use it
         CLI   W_DAFPT2,C' '       Blank ?
         BE    PTB6M2              Yes - use it
         CLI   W_DAFPT3,C' '       Blank ?
         BE    PTB6M3              Yes - use it
         CLI   W_DAFPT4,C' '       Blank ?
         BE    PTB6M4              Yes - use it
PTB6M1   MVC   W_DAFPT1,0(R2)      Move text
         B     PTB6EXIT            Next bit
PTB6M2   MVC   W_DAFPT2,0(R2)      Move text
         B     PTB6EXIT            Next bit
PTB6M3   MVC   W_DAFPT3,0(R2)      Move text
         B     PTB6EXIT            Next bit
PTB6M4   MVC   W_DAFPT4,0(R2)      Move text
         B     PTB6EXIT            Next bit
PTB6EXIT EQU   *                   Next bit
PTBIT7   LA    R2,32(,R2)          Next TM table entry
         TM    W_TM,W_F$BIT7       Is bit 7 on ?
         BNO   DAFPT0              No
         CLC   0(8,R2),=C'Reserved' Reserved ?
         BE    DAFPT0              Yes, Skip it
         LA    R8,32               Length
         CALL  DAFMC,              Move Comment                        X
               (W_TXTLBL,(R2),(R8)),                                   X
               MF=(E,W_WRK)
         CLI   W_DAFPT1,C' '       Blank ?
         BE    PTB7M1              Yes - use it
         CLI   W_DAFPT2,C' '       Blank ?
         BE    PTB7M2              Yes - use it
         CLI   W_DAFPT3,C' '       Blank ?
         BE    PTB7M3              Yes - use it
         CLI   W_DAFPT4,C' '       Blank ?
         BE    PTB7M4              Yes - use it
PTB7M1   MVC   W_DAFPT1,0(R2)      Move text
         B     PTB7EXIT            Next bit
PTB7M2   MVC   W_DAFPT2,0(R2)      Move text
         B     PTB7EXIT            Next bit
PTB7M3   MVC   W_DAFPT3,0(R2)      Move text
         B     PTB7EXIT            Next bit
PTB7M4   MVC   W_DAFPT4,0(R2)      Move text
         B     PTB7EXIT            Next bit
PTB7EXIT EQU   *                   Next bit
DAFPT    $EXIT                     Exit
**********************************************************************
         TITLE 'DAFPV - Process Volumes'
**********************************************************************
*  Input:          Parameter list pointed to by R1                   *
*                  . 00(R1) - Volume serial count address (R2)       *
*                  . 04(R1) - Volume serial count length  (R3)       *
*                  . 08(R1) - Volume serial address       (R4)       *
*                  . 12(R1) - Volume serial offset        (R5)       *
*                  . 16(R1) - Volume serial length        (R6)       *
*  Notes:          Used for volume serials in 14/15/17/18/62/64      *
*                  Handles up to ten volume serials                  *
**********************************************************************
DAFPV    $ENTRY AMODE=24,RMODE=24  Entry
         L     R2,00(R1)           Volume serial count address
         LTR   R2,R2               Volume serial count address zero ?
         BNP   DAFPV0              Yes, get out
         L     R3,04(R1)           Volume serial count length
         LTR   R3,R3               Volume serial count length zero ?
         BNP   DAFPV0              Yes, get out
         L     R4,08(R1)           Volume serial address
         LTR   R4,R4               Volume serial address zero ?
         BNP   DAFPV0              Yes, get out
         L     R5,12(R1)           Volume serial offset
         L     R6,16(R1)           Volume serial length
         XC    W_FULL1,W_FULL1     Zero temp fullword
         LA    R7,W_FULL1          Temp fullword address
         AH    R7,=H'4'            Point to end of temp fullword
         SR    R7,R3               Adjust for count length
         $VLM  (R7),(R2),(R3)      Move volume serial count
         L     R3,W_FULL1          Store volume serial count
         LTR   R3,R3               Volume serial count zero ?
         BNP   DAFPV0              Yes, Done
         LA    R8,W_VOL1           Volume serial criteria address
         AR    R4,R5               Apply volume serial offset
PVNEXT   CLC   0(6,R4),=CL6' '     Blank volume serial ?
         BE    DAFPV0              Yes, get out
         CALL  DAFMC,              Move Comment                        X
               (=C'VOLUME=',(R4),6), Volume serial                     X
               MF=(E,W_WRK)
         MVC   0(6,R8),0(R4)       Move volume serial criteria
         LA    R8,6(R8)            Next volume serial criteria address
         AR    R4,R6               Next entry
         BCT   R3,PVNEXT           Any more ?
DAFPV    $EXIT                     Exit
**********************************************************************
         TITLE 'DAFRM - Reslove Mask'
**********************************************************************
*  Input:          Parameter list pointed to by R1                   *
*                  . 00(R1) - OP address (R3)                        *
*                  . 04(R1) - CS address (R4)                        *
*                  . 08(R1) - Length  (R5)                           *
*  Notes:          If input field leading null - exit.               *
**********************************************************************
DAFRM    $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,0(R1)            Original value 1 address
         L     R4,4(R1)            Original value 2 address
         L     R5,8(R1)            Maximum length
         LH    R5,0(R5)            Maximum length
         $FILL W_VAL1O,C' '        Blank original value 1
         $FILL W_VAL2O,C' '        Blank original value 2
         $VLM  W_VAL1O,(R3),(R5)   Save original value 1
         $VLM  W_VAL2O,(R4),(R5)   Save original value 2
         $FILL W_VAL1R,C' '        Blank resolved value 1
         $FILL W_VAL2R,C' '        Blank resolved value 2
         LA    R3,W_VAL1O          Original value 1 address
         LA    R4,W_VAL2O          Original value 2 address
         LA    R6,W_VAL1R          Resolved value 1 address
         LA    R7,W_VAL2R          Resolved value 2 address
         XR    R8,R8               Zero resolved length
RMNEXT   CLI   0(R3),C' '          End ?
         BE    RMCOPY              Yes, get out
         CLI   0(R3),C'?'          Single character wildcard ?
         BE    RMINCR              Yes, skip it
         CLC   0(2,R3),=C'* '      Multiple character wildcard ending ?
         BE    RMDONE              Yes, get out
         CLI   0(R3),C'*'          Multiple character wildcard ?
         BNE   RMCOPY              No, copy it
         LA    R3,1(,R3)           Increment original value 1 address
         BCTR  R5,0                Decrement maximum length
RMNEXT2  LA    R4,1(,R4)           Increment original value 2 address
         CLC   0(1,R3),0(R4)       End of multiple character wildcard ?
         BE    RMCOPY              Yes, copy it
         BCT   R5,RMNEXT2          Loop until end of original value 2
         XR    R8,R8               Zero resolved length
         $FILL W_VAL2R,C' '        Blank resolved value 2
         B     RMDONE              Get out
RMCOPY   MVC   0(1,R6),0(R3)       Copy original to resolved value 1
         MVC   0(1,R7),0(R4)       Copy original to resolved value 2
         LA    R6,1(,R6)           Increment resolved value 1 address
         LA    R7,1(,R7)           Increment resolved value 2 address
         LA    R8,1(,R8)           Increment resolved length
RMINCR   LA    R3,1(,R3)           Increment original value 1 address
         LA    R4,1(,R4)           Increment original value 2 address
         BCT   R5,RMNEXT           Loop until end of original value 1
RMDONE   TM    W_F$TRAC,W_F$CRI    Criteria Trace ?
         BNO   RMNOCTRA            No, do not trace
         $MSG  W_TRACE,DAF621I     Move message template
         MVC   W_TRACE+18(44),W_VAL1O Original value 1
         MVC   W_TRACE+65(44),W_VAL2O Original value 2
         PUT   DAFTRACE,W_TRACE    Print a DAFTRACE record
         $MSG  W_TRACE,DAF622I     Move message template
         MVC   W_TRACE+18(44),W_VAL1R Resolved value 1
         MVC   W_TRACE+65(44),W_VAL2R Resolved value 2
         PUT   DAFTRACE,W_TRACE    Print a DAFTRACE record
RMNOCTRA LR    R15,R8              Return code
         B     DAFRMR              Return code
DAFRM    $EXIT                     Exit
         AIF   ('&RT_SRS' EQ '000').NOSRS1
**********************************************************************
         TITLE 'DAFSRS - Extract SMF Record SRS (201)'
**********************************************************************
DAFSRS   $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING D_SMFREC,R3         Reference SMF record
         MVC   W_DSN1,SRSDSN       Dataset 1
         MVC   W_JOB1,SRSJOBNM     Job name
         CALL  DAFPV,              Process Volume Serials              X
               (=F'1',4,SRSVOL,0,6), Process Volume Serials            X
               MF=(E,W_WRK)
         MVC   W_DD,SRSDDN         Data definition name
         CALL  DAFMC,              Move Comment                        X
               (=C'DD=',W_DD,8), Data definition name                  X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'TYPE=',SRSTYPE,8), Type of record                   X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'ENV=',SRSENV,10), Environment                       X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'ENVS=',SRSENVS,10), Sub environment                 X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'POOL=',SRSPOOL,8), Pool                             X
               MF=(E,W_WRK)
         DROP  R3                  Dereference SMF record
DAFSRS   $EXIT                     Exit
.NOSRS1  ANOP
**********************************************************************
         TITLE 'DAFSS - Sort Extracted SMF Records'
**********************************************************************
DAFSS    $ENTRY AMODE=24,RMODE=24  Entry
         $MSG  W_LOG,DAF520I       Move message template
         MVC   W_LOG+32(26),=CL26'Sort Extracted SMF Records'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
         MVC   W_LINK(L_LINK),T_LINK Copy LINK parameter list
         LINK  EP=SORT,MF=(E,P_ICEEPL),SF=(E,W_LINK) LINK to sort
         LTR   R15,R15             Sort OK ?
         BZ    SSEXIT              Yes, continue
         MVC   W_WTO(L_WTO),T_WTO  Copy WTO parameter list template
         MVC   W_WTOMSG,P_DAF802   Copy WTO message
         WTO   MF=(E,W_WTO)        Issue WTO
         ABEND 802,DUMP            User abend 802 (U0802)
SSEXIT   EQU   *
         $MSG  W_LOG,DAF521I       Move message template
         MVC   W_LOG+32(26),=CL26'Sort Extracted SMF Records'
         $PRINT DAFLOG,W_LOG       Put DAFLOG record
DAFSS    $EXIT                     Exit
**********************************************************************
         TITLE 'DAFSWA - Static Workarea'
**********************************************************************
DAFSWA   CSECT                     Workarea static
P_DAF704 DC    CL100'DAF704I No DAFSMF Records Selected'
P_DAF708 DC    CL100'DAF708A Control Statement Problem'
P_DAF801 DC    CL100'DAF801A System Macro Problem - R15=________ '
P_DAF802 DC    CL100'DAF802A Sort Problem'
P_DAF900 DC    CL100'DAF900A Abend Sxxx Uxxxx Module=________ +'
P_DAF901 DC    CL100'DAF901A Abend SDWA not present'
P_TBLHEX DC    C'0123456789ABCDEF'
P_BLANKS DC    CL133' '
P_RCTMSK DS    0CL20               Record count mask
         DC    X'40202020'
         DC    X'6B202020'
         DC    X'6B202020'
         DC    X'6B202020'
         DC    X'6B202120'
P_EDTMSK DC    XL16'404020206B2020206B2020206B202120'
P_RTYMSK DC    XL4'40202021'
P_BINMSK DC    XL16'40202020202020202020202020202120'
P_VLC    CLC   0(*-*,R14),0(R15)   Variable Length Compare (Executed)
P_VLM    MVC   0(*-*,R14),0(R15)   Variable Length Move (Executed)
P_VLTRT  TRT   0(*-*,R14),0(R15)   Variable Length TRT (Executed)
P_OTH    DC    CL58'Other'
P_TOT    DC    CL58'Total'
P_LOG    DS    0CL133              DAFLOG header record
         DC    CL133' DAF Log: '
P_RPT    DS    0CL133              DAFRPT header record
         DC    CL47' Date    Time        SID  Job      User     RTY'
         DC    CL44' '
         DC    CL42' '
P_STAT   DS    0CL133              DAFSTAT header record
         DC    C'          DAFSMF          DAFRPT         Invalid'
         DC    C'    SMF Record Types'
         ORG   P_STAT+133          DAFSTAT header record
*
**       SORT Extended Parameter List
*
         CNOP  0,4                 Fullword alignment
P_ICEEPL DC    A(P_ICECSA)         Address of control statement area
         DC    A(0)                Address of user exit E15 or E32
         DC    A(0)                Address of user exit E35
         DC    A(0)                Address of user exit constant
         DC    A(0)                Address of ALTSEQ translation table
         DC    A(0)                Address of ESTAE area pointer
         DC    A(0)                Address of user exit E18
         DC    A(0)                Address of user exit E39
         DC    A(0)                Four character call identifier
         DC    F'-1'               End of parameter list
P_ICECSA EQU   *                   Control statement area
         DC    AL2(P_ICECSE-P_ICECSB) Control statement length
P_ICECSB EQU   *
         DC    C'OPTION MSGDDN=DAFLOG '
         DC    C'DEBUG NOABEND '
         DC    C'SORT FIELDS=(1,80,CH,A) '
         DC    C'RECORD LENGTH=524,TYPE=F '
P_ICECSE EQU   *
*
**       System Macro Templates
*
T_CLOSE  CLOSE (),MF=L             CLOSE parameter list
L_CLOSE  EQU   *-T_CLOSE           CLOSE parameter list length
P_DAFCS  DCB   DDNAME=DAFCS,       DAFCS DCB                           X
               BUFNO=16,                                               X
               DSORG=PS,                                               X
               EODAD=PSEOD,                                            X
               LRECL=80,                                               X
               MACRF=(GM)
L_DAFCS  EQU   *-P_DAFCS           DAFCS DCB Length
P_DAFLOG DCB   DDNAME=DAFLOG,      DAFLOG DCB                          X
               BUFNO=16,                                               X
               DSORG=PS,                                               X
               LRECL=133,                                              X
               MACRF=(PM),                                             X
               RECFM=FBA
L_DAFLOG EQU   *-P_DAFLOG          DAFLOG DCB length
P_DAFRPT DCB   DDNAME=DAFRPT,      DAFRPT DCB                          X
               BUFNO=16,                                               X
               DSORG=PS,                                               X
               LRECL=133,                                              X
               MACRF=(PM),                                             X
               RECFM=FBA
L_DAFRPT EQU   *-P_DAFRPT          DAFRPT DCB length
P_DAFSMF DCB   DDNAME=DAFSMF,      DAFSMF DCB                          X
               BFTEK=A,                                                X
               BLKSIZE=0,                                              X
               BUFNO=64,                                               X
               DSORG=PS,                                               X
               EODAD=ESEOD,                                            X
               MACRF=(GL)
L_DAFSMF EQU   *-P_DAFSMF          DAFSMF DCB Length
P_DAFSNA DCB   DDNAME=DAFSNAP,     DAFSNAP DCB                         X
               BLKSIZE=1632,                                           X
               BUFNO=16,                                               X
               DSORG=PS,                                               X
               LRECL=125,                                              X
               MACRF=(W),                                              X
               RECFM=VBA
L_DAFSNA EQU   *-P_DAFSNA          DAFSNAP DCB length
P_DAFSTA DCB   DDNAME=DAFSTAT,     DAFSTAT DCB                         X
               BUFNO=16,                                               X
               DSORG=PS,                                               X
               LRECL=133,                                              X
               MACRF=(PM),                                             X
               RECFM=FBA
L_DAFSTA EQU   *-P_DAFSTA          DAFSTAT DCB length
P_DAFTRA DCB   DDNAME=DAFTRACE,    DAFTRACE DCB                        X
               BUFNO=16,                                               X
               DSORG=PS,                                               X
               LRECL=133,                                              X
               MACRF=(PM),                                             X
               RECFM=FBA
L_DAFTRA EQU   *-P_DAFTRA          DAFTRACE DCB length
T_ESTAE  ESTAE 0,MF=L              ESTAE parameter list
L_ESTAE  EQU   *-T_ESTAE           ESTAE parameter list length
T_LINK   LINK  ,SF=L               LINK parameter list
L_LINK   EQU   *-T_LINK            LINK parameter list length
T_OPENI  OPEN  (,INPUT),MF=L       OPEN parameter list (Input)
L_OPENI  EQU   *-T_OPENI           OPEN parameter list length (Input)
T_OPENO  OPEN  (,OUTPUT),MF=L      OPEN parameter list (Output)
L_OPENO  EQU   *-T_OPENO           OPEN parameter list length (Output)
T_RDJFCB RDJFCB (,INPUT),MF=L      RDJFCB parameter list
L_RDJFCB EQU   *-T_RDJFCB          RDJFCB parameter list length
T_SNAP   SNAP  DCB=*-*,            SNAP parameter list                 X
               STORAGE=(*-*,*-*),                                      X
               MF=L
L_SNAP   EQU   *-T_SNAP            SNAP parameter list length
P_SORTIN DCB   DDNAME=SORTIN,      SORTIN DCB                          X
               BLKSIZE=0,                                              X
               BUFNO=32,                                               X
               DSORG=PS,                                               X
               LRECL=524,                                              X
               MACRF=(PM),                                             X
               RECFM=FB
L_SORTIN EQU   *-P_SORTIN          SORTIN DCB Length
P_SORTOU DCB   DDNAME=SORTOUT,     SORTOUT DCB                         X
               BLKSIZE=0,                                              X
               BUFNO=32,                                               X
               DSORG=PS,                                               X
               EODAD=GREOD,                                            X
               LRECL=524,                                              X
               MACRF=(GM),                                             X
               RECFM=FB
L_SORTOU EQU   *-P_SORTOU          SORTOUT DCB Length
T_WTO    WTO   '1234567890123456789012345678901234567890123456789012345X
               678901234567890123456789012345678901234567890',         X
               DESC=6,             Job status                          X
               ROUTCDE=11,         Programmer Information              X
               MF=L
L_WTO    EQU   *-T_WTO             WTO parameter list length
         AIF   ('&RT_STOPX37' EQ '000').NOSTOPX371
**********************************************************************
         TITLE 'DAFX37 - Extract SMF Record STOP-X37 (201)'
**********************************************************************
DAFX37   $ENTRY AMODE=24,RMODE=24  Entry
         L     R3,W_SMFBAS         Set SMF record base
         USING GWA,R3              Reference SMF record
         MVC   W_DSN1,GWADSNM      Dataset 1
         MVC   W_JOB1,GWASMFJN     Job name
         MVC   W_USER,GWARUID      User identification
         MVC   W_VOL1,GWADVOL      Destination volume serial
         CALL  DAFMC,              Move Comment                        X
               (=C'DVOL=',W_VOL1,6), Destination volume serial         X
               MF=(E,W_WRK)
         MVC   W_VOL1,GWARVOL      Original volume serial
         CALL  DAFMC,              Move Comment                        X
               (=C'RVOL=',W_VOL1,6), Original volume serial            X
               MF=(E,W_WRK)
         MVC   W_DD,GWADDNM        Data definition name
         CALL  DAFMC,              Move Comment                        X
               (=C'DD=',W_DD,8), Data definition name                  X
               MF=(E,W_WRK)
         MVC   W_GROUP,GWARGRP     Group
         CALL  DAFMC,              Move Comment                        X
               (=C'GROUP=',W_GROUP,8), Group                           X
               MF=(E,W_WRK)
         L     R14,=A(X37FLAG)     X37 Flag
         CALL  DAFPC,              Process Compare Table               X
               ((R14),GWAFFLAG),   GWA Flag                            X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'DSORG=',GWADSORG,2), Dataset organization           X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'RECFM=',GWARECFM,3), Record format                  X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'LTYPE=',GWALTYPE,3), Allocation type                X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'PSPC=',GWAPSPC,4), Primary space allocation         X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'SSPC=',GWASSPC,4), Secondary space allocation       X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'TEXT=',GWATEXT,4), Extents                          X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NVOL=',GWANVOL,4), Volumes                          X
               MF=(E,W_WRK)
         CALL  DAFMB,              Move Binary Comment                 X
               (=C'NUNIT=',GWANUNIT,4), Units                          X
               MF=(E,W_WRK)
         CLC   GWADSORG,=C'VS'     VSAM ?
         BNE   X37NOVSM            No, continue
         MVC   W_DSN1,GWAVCLST     Dataset 2
         CALL  DAFMC,              Move Comment                        X
               (=C'VCLST=',GWAVCLST,44), VSAM cluster name             X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'VCOMP=',GWAVCOMP,5), VSAM component type            X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'VTYPE=',GWAVTYPE,10), VSAM definition type          X
               MF=(E,W_WRK)
         CALL  DAFMC,              Move Comment                        X
               (=C'VDTYP=',GWAVDTYP,4), VSAM dataset type              X
               MF=(E,W_WRK)
X37NOVSM EQU   *
         DROP  R3                  Dereference SMF record
DAFX37   $EXIT                     Exit
.NOSTOPX371 ANOP
**********************************************************************
         TITLE 'Tables'
**********************************************************************
*
**       Dataset Name Table
*
DSNTBL   CSECT
         DC    256X'FF'            Assume all characters are invalid
         ORG   DSNTBL+C' ' x'40'   Blank ( ) is valid
         DC    1X'00'      x'40'   Blank ( ) is valid
         ORG   DSNTBL+C'.' x'4B'   Period (.) is valid
         DC    1X'00'      x'4B'   Period (.) is valid
         ORG   DSNTBL+C'$' x'5B'   Dollar sign ($) is valid
         DC    1X'00'      x'5B'   Dollar sign ($) is valid
         ORG   DSNTBL+C'*' x'5C'   Asterisk (*) is valid (RACF)
         DC    1X'00'      x'5C'   Asterisk (*) is valid (RACF)
         ORG   DSNTBL+C'-' x'60'   Dash (-) is valid (VSAM CATALOG)
         DC    1X'00'      x'60'   Dash (-) is valid (VSAM CATALOG)
         ORG   DSNTBL+C'%' x'6C'   Percent sign (%) is valid (RACF)
         DC    1X'00'      x'6C'   Percent sign (%) is valid (RACF)
         ORG   DSNTBL+C'_' x'6D'   Underscore (_) is valid (UNIX)
         DC    1X'00'      x'6D'   Underscore (_) is valid (UNIX)
         ORG   DSNTBL+C'?' x'6F'   Question mark (?) is valid (JES2)
         DC    1X'00'      x'6F'   Question mark (?) is valid (JES2)
         ORG   DSNTBL+C'#' x'7B'   Pound sign (#) is valid
         DC    1X'00'      x'7B'   Pound sign (#) is valid
         ORG   DSNTBL+C'@' x'7C'   At sign (@) is valid
         DC    1X'00'      x'7C'   At sign (@) is valid
         ORG   DSNTBL+C'A' x'Cx'   Uppercase (ABCDEFGHI) are valid
         DC    9X'00'      x'Cx'   Uppercase (ABCDEFGHI) are valid
         ORG   DSNTBL+C'J' x'Dx'   Uppercase (JKLMNOPQR) are valid
         DC    9X'00'      x'Dx'   Uppercase (JKLMNOPQR) are valid
         ORG   DSNTBL+C'S' x'Ex'   Uppercase (STUVWXYZ) are valid
         DC    8X'00'      x'Ex'   Uppercase (STUVWXYZ) are valid
         ORG   DSNTBL+C'0' x'Fx'   Numbers (0123456789) are valid
         DC    10X'00'     x'Fx'   Numbers (0123456789) are valid
*
**       Hexadecimal Table
*
TBLHEX   CSECT
         DC    256X'00'            Assume all characters are invalid
         ORG   TBLHEX+X'F0'        0 is valid
         DC    1X'F0'              0 is valid
         ORG   TBLHEX+X'F1'        1 is valid
         DC    1X'F1'              1 is valid
         ORG   TBLHEX+X'F2'        2 is valid
         DC    1X'F2'              2 is valid
         ORG   TBLHEX+X'F3'        3 is valid
         DC    1X'F3'              3 is valid
         ORG   TBLHEX+X'F4'        4 is valid
         DC    1X'F4'              4 is valid
         ORG   TBLHEX+X'F5'        5 is valid
         DC    1X'F5'              5 is valid
         ORG   TBLHEX+X'F6'        6 is valid
         DC    1X'F6'              6 is valid
         ORG   TBLHEX+X'F7'        7 is valid
         DC    1X'F7'              7 is valid
         ORG   TBLHEX+X'F8'        8 is valid
         DC    1X'F8'              8 is valid
         ORG   TBLHEX+X'F9'        9 is valid
         DC    1X'F9'              9 is valid
         ORG   TBLHEX+X'FA'        A is valid
         DC    1X'C1'              A is valid
         ORG   TBLHEX+X'FB'        B is valid
         DC    1X'C2'              B is valid
         ORG   TBLHEX+X'FC'        C is valid
         DC    1X'C3'              C is valid
         ORG   TBLHEX+X'FD'        D is valid
         DC    1X'C4'              D is valid
         ORG   TBLHEX+X'FE'        E is valid
         DC    1X'C5'              E is valid
         ORG   TBLHEX+X'FF'        F is valid
         DC    1X'C6'              F is valid
*
**       Keyword Table
*
KWDTBL   CSECT                     Keyword table
         $KWD  CATALOG,T=DATASET,LENGTH=44,O1=O_CATALO,                X
               FORMAT=C,                                               X
               D='Catalog name',                                       X
               ALIAS1=CAT
L_KWDTBL EQU   *-KWDTBL            Keyword table entry length
         $KWD  DSNAME,T=GENERAL,LENGTH=44,O1=O_DSN1,O2=O_DSN2,         X
               FORMAT=C,                                               X
               D='Dataset name',                                       X
               ALIAS1=DSN
         $KWD  DATE,T=GENERAL,LENGTH=7,O1=O_DATE,                      X
               FORMAT=C,                                               X
               D='Date (YYYYDDD)'
         $KWD  DDNAME,T=DATASET,LENGTH=8,O1=O_DD,                      X
               FORMAT=C,                                               X
               D='Data definition name',                               X
               ALIAS1=DDN,ALIAS2=DD
         $KWD  EXCP,T=GENERAL,LENGTH=16,O1=O_EXCP,                     X
               FORMAT=F,                                               X
               D='Execute Channel Program'
         $KWD  GROUP,T=GENERAL,LENGTH=8,O1=O_GROUP,                    X
               FORMAT=C,                                               X
               D='Group Identification'
         $KWD  JOB,T=GENERAL,LENGTH=8,O1=O_JOB1,O2=O_JOB2,O3=O_JOB3,   X
               O4=O_JOB4,O5=O_JOB5,                                    X
               FORMAT=C,                                               X
               D='Job name',                                           X
               ALIAS1=JOBNAME
         $KWD  LRECL,T=GENERAL,LENGTH=5,O1=O_LRECL,                    X
               FORMAT=F,                                               X
               D='Logical Record Length'
         $KWD  MAJOR,T=ENQUEUE,LENGTH=8,O1=O_MAJOR,                    X
               FORMAT=C,                                               X
               D='Major enqueue name'
         $KWD  MEMBER,T=DATASET,LENGTH=8,O1=O_MEMBER,                  X
               FORMAT=C,                                               X
               D='Member name'
         $KWD  MINOR,T=ENQUEUE,LENGTH=44,O1=O_MINOR,                   X
               FORMAT=C,                                               X
               D='Minor enqueue name'
         $KWD  RECORD,T=GENERAL,LENGTH=3,O1=O_RTY,                     X
               FORMAT=F,                                               X
               D='Record type'
         $KWD  SYSTEM,T=GENERAL,LENGTH=4,O1=O_SYSTEM,                  X
               FORMAT=C,                                               X
               D='System identification'
         $KWD  TIME,T=GENERAL,LENGTH=11,O1=O_TIME,                     X
               FORMAT=C,                                               X
               D='Time - HH.MM.SS.HH'
         $KWD  USER,T=GENERAL,LENGTH=8,O1=O_USER,                      X
               FORMAT=C,                                               X
               D='User identification',                                X
               ALIAS1=USERID
         $KWD  VOLUME,T=GENERAL,LENGTH=6,O1=O_VOL1,O2=O_VOL2,          X
               O3=O_VOL3,O4=O_VOL4,O5=O_VOL5,O6=O_VOL6,O7=O_VOL7,      X
               O8=O_VOL8,O9=O_VOL9,OA=O_VOLA,                          X
               FORMAT=C,                                               X
               D='Volume serial',                                      X
               ALIAS1=VOL,ALIAS2=VOLSER
         $KWD  VVDS,T=DATASET,LENGTH=44,O1=O_VVDS,                     X
               FORMAT=C,                                               X
               D='VSAM volume dataset name'
         $KWD  WTX,T=GENERAL,LENGTH=4,O1=O_WTX,                        X
               FORMAT=C,                                               X
               D='Wait Time Max'
@_KWDTBL EQU   *-KWDTBL            Keyword table size
#_KWDTBL EQU   (*-KWDTBL)/L_KWDTBL Keyword table count
         $KWD  DSECT=YES
*
**       Module Table
*
MODTBL   CSECT
         $MOD                      Module table generation
         DC    12X'FF'             End of module table
*
**       Operator Table
*
OPTBL    CSECT                     Operator table
         $OP   EQ,L=0,E=1,H=0,DES='Equal to'
L_OPTBL  EQU   *-OPTBL             Operator table entry length
         $OP   GE,L=0,E=1,H=1,DES='Greater than or equal to'
         $OP   GT,L=0,E=0,H=1,DES='Greater than'
         $OP   LE,L=1,E=1,H=0,DES='Less than or equal to'
         $OP   LT,L=1,E=0,H=0,DES='Less than'
         $OP   NE,L=1,E=0,H=1,DES='Not equal to'
@_OPTBL  EQU    *-OPTBL            Operator table size
#_OPTBL  EQU   (*-OPTBL)/L_OPTBL   Operator table count
         $OP   DSECT=YES
*
**       SMF Table
*
SMFTBL   CSECT                     SMF table
    $SMF 014,DAF014,'INPUT or RDBACK Data Set Activity'
    $SMF 015,DAF014,'OUTPUT UPDAT INOUT or OUTIN Data Set Activity'
         AIF   ('&RT_DFSORT' EQ '000').NODFSORT8
    $SMF 016,DAF016,'DFSORT Statistics'
.NODFSORT8 ANOP
    $SMF 017,DAF017,'Scratch Data Set Status'
    $SMF 018,DAF018,'Rename Data Set Status'
    $SMF 022,DAF022,'Configuration'
    $SMF 024,DAF024,'JES2 Spool Offload'
    $SMF 036,DAF036,'Integrated Catalog Facility Catalog'
    $SMF 042,DAF042,'DFSMS Statistics and Configuration'
         AIF   ('&RT_BDT' EQ '000').NOBDT8
    $SMF 059,DAF059,'MVS/BDT File-to-File Transmission'
.NOBDT8  ANOP
    $SMF 060,DAF060,'VSAM Volume Data Set Updated'
    $SMF 061,DAF061,'Integrated Catalog Facility Define Activity'
    $SMF 062,DAF062,'VSAM Component or Cluster Opened'
    $SMF 063,DAF063,'VSAM Catalog Entry Defined'
    $SMF 064,DAF064,'VSAM Component or Cluster Status'
    $SMF 065,DAF065,'Integrated Catalog Facility Delete Activity'
    $SMF 066,DAF066,'Integrated Catalog Facility Alter Activity'
    $SMF 067,DAF067,'VSAM Catalog Entry Deleted'
    $SMF 068,DAF068,'VSAM Catalog Entry Renamed'
    $SMF 069,DAF069,'VSAM Data Space Defined  Extended or Deleted'
         AIF   ('&RT_RMF' EQ '000').NORMF8
    $SMF 073,DAF073,'RMF Channel Path Activity'
    $SMF 074,DAF074,'RMF Device/XCF/OMVS/CF/Cache Activity'
    $SMF 075,DAF075,'RMF Page/Swap Data Set Activity'
    $SMF 077,DAF077,'RMF Enqueue Activity'
.NORMF8  ANOP
         AIF   ('&RT_RACF' EQ '000').NORACF7
    $SMF 080,DAF080,'RACF Processing'
    $SMF 081,DAF081,'RACF Initialization'
.NORACF7 ANOP
    $SMF 082,DAF082,'ICSF/MVS Record'
         AIF   ('&RT_RACF' EQ '000').NORACF8
    $SMF 083,DAF083,'RACF Audit Record for Data Sets'
.NORACF8 ANOP
    $SMF 090,DAF090,'System Status'
         AIF   ('&RT_USS' EQ '000').NOUSS8
    $SMF 092,DAF092,'USS File System Activity'
.NOUSS8  ANOP
         AIF   ('&RT_TCPIP' EQ '000').NOTCPIP8
    $SMF 118,DAF118,'TCPIP Statistics'
.NOTCPIP8 ANOP
         AIF   ('&RT_FILEAID' EQ '000').NOFILEAID8
    $SMF &RT_FILEAID,DAFFA,'File-AID'
.NOFILEAID8 ANOP
         AIF   ('&RT_STOPX37' EQ '000').NOSTOPX378
    $SMF &RT_STOPX37,DAFX37,'STOP-X37'
.NOSTOPX378 ANOP
         AIF   ('&RT_SRS' EQ '000').NOSRS8
    $SMF &RT_SRS,DAFSRS,'SRS'
.NOSRS8  ANOP
         AIF   ('&RT_HSM' EQ '000').NOHSM8
    $SMF 241,DAF241,'DFHSM'
.NOHSM8  ANOP
         AIF   ('&RT_CASORT' EQ '000').NOCASORT8
    $SMF &RT_CASORT,DAF016,'CASORT Statistics'
.NOCASORT8 ANOP
@_SMFTBL EQU   *-SMFTBL            SMF table size
#_SMFTBL EQU   @_SMFTBL/L_SMFTBL   SMF table count
         $SMF DSECT=YES
*
**       HSMTYPE Compare Table
*
HSMTYPE  CSECT
         $COMP TYPE=INIT
         $COMP AL1(01),'Primary_to_level_1_migration'
         $COMP AL1(02),'Level_x_to_level_x_migration'
         $COMP AL1(03),'Primary_to_level_2_migration'
         $COMP AL1(04),'Recall_from_level_1_to_primary'
         $COMP AL1(05),'Recall_from_level_2_to_primary'
         $COMP AL1(06),'Delete_a_migrated_data_set'
         $COMP AL1(07),'Daily_backup'
         $COMP AL1(08),'Spill_backup'
         $COMP AL1(09),'Recovery'
         $COMP AL1(10),'Recycle_backup_volume'
         $COMP AL1(11),'Data_set_deletion_by_age'
         $COMP AL1(12),'Recycle_migration_volume'
         $COMP AL1(13),'Full_volume_dump'
         $COMP AL1(14),'Volume_or_data_set_restore'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=Function
*
**       DSORG Compare Table
*
T14DSO   CSECT
         $COMP TYPE=INIT
         $COMP X'0008','VS'
         $COMP X'0009','VSU'
         $COMP X'0200','PO'
         $COMP X'0300','POU'
         $COMP X'2000','DA'
         $COMP X'2100','DAU'
         $COMP X'4000','PS'
         $COMP X'4100','PSU'
         $COMP X'8000','IS'
         $COMP X'8100','ISU'
         $COMP X'0000','Reserved'
         $COMP TYPE=BUILD,LENGTH=2,LABEL=DSORG
*
**       DISP Compare Table
*
T14DSP   CSECT
         $COMP TYPE=INIT
         $COMP X'08','Shr'
         $COMP X'40','Old'
         $COMP X'48','Shr'
         $COMP X'80','Mod'
         $COMP X'88','Shr'
         $COMP X'C0','New'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=DISP
*
**       Label Type Compare Table
*
T14LTP   CSECT
         $COMP TYPE=INIT
         $COMP X'01','NL'
         $COMP X'02','SL'
         $COMP X'04','NSL'
         $COMP X'0A','SUL'
         $COMP X'10','BLP'
         $COMP X'20','LTM'
         $COMP X'40','AL'
         $COMP X'48','AUL'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=LTYP
**********************************************************************
*        RECFM Compare Table                                         *
**********************************************************************
T14RCF   CSECT
         $COMP TYPE=INIT
         $COMP X'40','V'
         $COMP X'42','VM'
         $COMP X'44','VA'
         $COMP X'48','VS'
         $COMP X'50','VB'
         $COMP X'52','VBM'
         $COMP X'54','VBA'
         $COMP X'58','VBS'
         $COMP X'80','F'
         $COMP X'82','FM'
         $COMP X'84','FA'
         $COMP X'88','FS'
         $COMP X'90','FB'
         $COMP X'92','FBM'
         $COMP X'94','FBA'
         $COMP X'98','FBS'
         $COMP X'C0','U'
         $COMP X'00','Reserved'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=RECFM
**********************************************************************
*        CTRI Compare Table                                          *
**********************************************************************
T14SPC   CSECT
         $COMP TYPE=INIT
         $COMP X'C0','CYL'
         $COMP X'80','TRK'
         $COMP X'40','BLK'
         $COMP X'00','ABSTR'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=CTRI
*
**       ICExxAMB TM Table (Access Method Flags)
*
T16AMB   CSECT
         DC    C'AMB='             Label
         $TM   CL32'EXCP'
         $TM   CL32'VSAM'
         $TM   CL32'BSAM'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
*
**       ICECSFLG TM Table (Control Statement Flags)
*
T16CSF   CSECT
         DC    C'CSF='             Label
         $TM   CL32'Altseq'
         $TM   CL32'Inrec'
         $TM   CL32'Include'
         $TM   CL32'Omit'
         $TM   CL32'Outrec'
         $TM   CL32'Sum'
         $TM   CL32'Outfil'
         $TM   CL32'Reserved'
*
**       ICExxFL1 TM Table (Flag Byte 1)
*
T16FL1   CSECT
         DC    C'FL1='             Label
         $TM   CL32'Batchpipes'
         $TM   CL32'Striped'
         $TM   CL32'Compressed'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
*
**       ICEFLBY2 TM Table (Type of Operation)
*
T16TOO   CSECT
         DC    C'TYPE='            Label
         $TM   CL32'Sort'
         $TM   CL32'Merge'
         $TM   CL32'Copy'
         $TM   CL32'Icetool'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
*
**       SMF22FNC Compare Table
*
T22FNC   CSECT
         $COMP TYPE=INIT
         $COMP X'01','Activate'
         $COMP X'02','Recover'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=FNC
*
**       SMF24BCF TM Table
*
T24BCF   CSECT
         DC    C'BCF='             Label
         $TM   CL32'First'
         $TM   CL32'Continuation'
         $TM   CL32'Last'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
*
**       SMF24EOJ TM Table
*
T24EOJ   CSECT
         DC    C'EOJ='             Label
         $TM   CL32'Completed_job'
         $TM   CL32'Completed_with_skipped'
         $TM   CL32'Uncompleted_job'
         $TM   CL32'Cancelled'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
*
**       SMF24SUB Compare Table
*
T24SUB   CSECT
         $COMP TYPE=INIT
         $COMP X'0001','Job_transmitter'
         $COMP X'0002','Job_receiver'
         $COMP X'0003','SYSOUT_transmitter'
         $COMP X'0004','SYSOUT_receiver'
         $COMP TYPE=BUILD,LENGTH=2,LABEL=SUB
*
**       SMF36EIN Compare Table
*
T36EIN   CSECT
         $COMP TYPE=INIT
         $COMP C'AE','Aliases_were_exported'
         $COMP C'NE','No_aliases_exported'
         $COMP TYPE=BUILD,LENGTH=2,LABEL=EIN
*
**       SMF6xFNC Compare Table
*
T6XFNC   CSECT
         $COMP TYPE=INIT
         $COMP C'R','Rename'
         $COMP C'S','Scratch'
         $COMP C'U','Uncatalog'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=FNC
*
**       SMF6xIOD TM Table
*
T6XIOD   CSECT
         DC    C'IOD='             Label
         $TM   CL32'VSAM_cluster'
         $TM   CL32'VSAM_data'
         $TM   CL32'VSAM_index'
         $TM   CL32'VSAM_catalog'
         $TM   CL32'NonVSAM'
         $TM   CL32'GDG'
         $TM   CL32'Alias'
         $TM   CL32'Reserved'
*
**       SMF6xSUB Compare Table
*
T6XSUB   CSECT
         $COMP TYPE=INIT
         $COMP C'DE','Delete'
         $COMP C'IN','Insert'
         $COMP C'UP','Update'
         $COMP TYPE=BUILD,LENGTH=2,LABEL=SUB
*
**       SMF6xTYP Compare Table
*
T6XTYP   CSECT
         $COMP TYPE=INIT
         $COMP C'A','NonVSAM_Dataset'
         $COMP C'B','GDG_Base'
         $COMP C'C','Cluster'
         $COMP C'D','Data'
         $COMP C'E','VSAM_Extension'
         $COMP C'F','Free_Space'
         $COMP C'G','Alternate_Index'
         $COMP C'H','Active_GDS'
         $COMP C'I','Index'
         $COMP C'J','GDG_Extension'
         $COMP C'K','VVR'
         $COMP C'L','LCS_Library'
         $COMP C'M','Mastercat'
         $COMP C'N','NonVSAM_Header'
         $COMP C'O','OAM'
         $COMP C'P','Page'
         $COMP C'Q','VVR_Header_Secondary'
         $COMP C'R','Path'
         $COMP C'T','True'
         $COMP C'U','Usercat'
         $COMP C'V','Volume'
         $COMP C'W','LCS_Volume'
         $COMP C'X','Alias'
         $COMP C'Y','Upgrade'
         $COMP C'Z','VVR_Header_Primary'
         $COMP X'00','NonVSAM'
         $COMP X'01','JES3'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=TYP
*
**       SMF62IND TM Table
*
T62IND   CSECT
         DC    C'IND='             Label
         $TM   CL32'Successfully_opened'
         $TM   CL32'Incorrect_password'
         $TM   CL32'Catalog_or_CRA'
         $TM   CL32'VVDS_or_ICF_catalog'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
*
**       Record creator TM table
*
T63FDT   CSECT
         DC    C'FDT='             Label
         $TM   CL32'New_definition'
         $TM   CL32'Altered_definition'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
         $TM   CL32'Path_define/alter'
         $TM   CL32'AIX_define/alter'
*
**       SMF64DTY TM Table
*
T64DTY   CSECT
         DC    C'DTY='             Label
         $TM   CL32'Data'
         $TM   CL32'Index'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
*
**       SMF64MC1 TM Table
*
T64MC1   CSECT
         DC    C'MC1='             Label
         $TM   CL32'Key_access'
         $TM   CL32'RBA_access'
         $TM   CL32'CI'
         $TM   CL32'Sequential'
         $TM   CL32'Direct'
         $TM   CL32'Input'
         $TM   CL32'Output'
         $TM   CL32'User_buffers'
*
**       SMF64MC2 TM Table
*
T64MC2   CSECT
         DC    C'MC2='             Label
         $TM   CL32'JES_output'
         $TM   CL32'Control_characters'
         $TM   CL32'Reserved'
         $TM   CL32'Skip_sequential'
         $TM   CL32'VTAM_LOGON'
         $TM   CL32'Set_to_empty'
         $TM   CL32'Shared_control_blocks'
         $TM   CL32'Path_AIX'
*
**       SMF64MC3 TM Table
*
T64MC3   CSECT
         DC    C'MC3='             Label
         $TM   CL32'Reserved'
         $TM   CL32'LSR'
         $TM   CL32'GSR'
         $TM   CL32'ICIP'
         $TM   CL32'Deferred_write'
         $TM   CL32'Sequential_insert'
         $TM   CL32'Fixed_control_blocks'
         $TM   CL32'31_bit_buffers'
*
**       SMF64RIN TM Table
*
T64RIN   CSECT
         DC    C'RIN='             Label
         $TM   CL32'Close'
         $TM   CL32'EOV'
         $TM   CL32'No_space'
         $TM   CL32'Catalog/CRA'
         $TM   CL32'Close/TYPE=T'
         $TM   CL32'Abend'
         $TM   CL32'CAT/VVDS'
         $TM   CL32'Reserved'
*
**       SMF67FDT TM Table
*
T67FDT   CSECT
         DC    C'FDT='             Label
         $TM   CL32'Uncataloged'
         $TM   CL32'Scratched'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
         $TM   CL32'Path_deleted'
         $TM   CL32'AIX_created'
*
**       SMF75FL2 TM Table
*
T75FL2   CSECT
         DC    C'FL2='             Label
         $TM   CL32'VIO'
         $TM   CL32'Multiple_exposure_device'
         $TM   CL32'Alternate_control_unit'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
*
**       SMF75PST TM Table
*
T75PST   CSECT
         DC    C'PST='             Label
         $TM   CL32'PLPA'
         $TM   CL32'COMMON'
         $TM   CL32'DUPLEX'
         $TM   CL32'LOCAL'
         $TM   CL32'SWAP'
         $TM   CL32'Unusable'
         $TM   CL32'Brought_online'
         $TM   CL32'Brought_offline'
*
**       SMFFTPDT Compare Table
*
TFTPDT   CSECT
         $COMP TYPE=INIT
         $COMP CL1' ','Sequential'
         $COMP CL1'P','PDS'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=PDT
*
**       SMFFTPFM Compare Table
*
TFTPFM   CSECT
         $COMP TYPE=INIT
         $COMP CL1'A','ASCII'
         $COMP CL1'E','EBCDIC'
         $COMP CL1'I','Image'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=PFM
*
**       SMFFTPMO Compare Table
*
TFTPMO   CSECT
         $COMP TYPE=INIT
         $COMP CL1'B','Block'
         $COMP CL1'C','Compressed'
         $COMP CL1'S','Stream'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=PMO
*
**       SMFFTPST Compare Table
*
TFTPST   CSECT
         $COMP TYPE=INIT
         $COMP CL1'F','File'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=PST
*
**       SMFFTPXD Compare Table
*
TFTPXD   CSECT
         $COMP TYPE=INIT
         $COMP CL1'C','Client'
         $COMP CL1'S','Server'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=PXD
*
**       SMF77DFG TM Table
*
T77DFG   CSECT
         DC    C'DFG='             Label
         $TM   CL32'Resource_in_contention'
         $TM   CL32'Scope_of_system'
         $TM   CL32'Exclusive_owner'
         $TM   CL32'Waiting_job_1_exclusive_usage'
         $TM   CL32'Waiting_job_2_exclusive_usage'
         $TM   CL32'Global'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
*
**       SMF80AAA TM Table
*
T80AAA   CSECT
         DC    C'ALLOWED='         Label
         $TM   CL32'ALTER'
         $TM   CL32'CONTROL'
         $TM   CL32'UPDATE'
         $TM   CL32'READ'
         $TM   CL32'EXECUTE'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
         $TM   CL32'NONE'
*
**       SMF80AAR TM Table
*
T80AAR   CSECT
         DC    C'INTENT='          Label
         $TM   CL32'ALTER'
         $TM   CL32'CONTROL'
         $TM   CL32'UPDATE'
         $TM   CL32'READ'
         $TM   CL32'EXECUTE'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
         $TM   CL32'NONE'
*
**       SMF80ATH TM Table
*
T80AUTH  CSECT
         DC    C'AUTHORITY='       Label
         $TM   CL32'NORMAL'
         $TM   CL32'SPECIAL'
         $TM   CL32'OPERATIONS'
         $TM   CL32'AUDITOR'
         $TM   CL32'EXIT'
         $TM   CL32'FAILSOFT'
         $TM   CL32'BYPASSED'
         $TM   CL32'TRUSTED'
*
**       SMF80DES TM Table
*
T80DES   CSECT
         DC    C'DESCRIPTOR='      Label
         $TM   CL32'VIOLATION'
         $TM   CL32'UNDEFINED'
         $TM   CL32'Reserved'
         $TM   CL32'WARNING'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
*
**       SMF80EVT Compare Table
*
T80EVENT CSECT
         $COMP TYPE=INIT
         $COMP X'01','INITIATION'
         $COMP X'02','RESOURCE_ACCESS'
         $COMP X'03','ADDVOL/CHGVOL'
         $COMP X'04','RENAME_DATASET'
         $COMP X'05','DELETE_RESOURCE'
         $COMP X'06','DELVOL'
         $COMP X'07','DEFINE_RESOURCE'
         $COMP X'08','ADDSD_COMMAND'
         $COMP X'09','ADDGROUP_COMMAND'
         $COMP X'0A','ADDUSER_COMMAND'
         $COMP X'0B','ALTDSD_COMMAND'
         $COMP X'0C','ALTGROUP_COMMAND'
         $COMP X'0D','ALTUSER_COMMAND'
         $COMP X'0E','CONNECT_COMMAND'
         $COMP X'0F','DELDSD_COMMAND'
         $COMP X'10','DELGROUP_COMMAND'
         $COMP X'11','DELUSER_COMMAND'
         $COMP X'12','PASSWORD_COMMAND'
         $COMP X'13','PERMIT_COMMAND'
         $COMP X'14','RALTER_COMMAND'
         $COMP X'15','RDEFINE_COMMAND'
         $COMP X'16','RDELETE_COMMAND'
         $COMP X'17','REMOVE_COMMAND'
         $COMP X'18','SETROPTS_COMMAND'
         $COMP X'19','RVARY_COMMAND'
         $COMP X'1A','APPC_SESSION_ESTABLISHMENT'
         $COMP X'1B','GENERAL'
         $COMP X'1C','DIRECTORY_SEARCH'
         $COMP X'1D','CHECK_ACCESS_TO_DIRECTORY'
         $COMP X'1E','CHECK_ACCESS_TO_FILE'
         $COMP X'1F','CHAUDIT'
         $COMP X'20','CHDIR'
         $COMP X'21','CHMOD'
         $COMP X'22','CHOWN'
         $COMP X'23','CLEAR_SETID_BITS_FOR_FILE'
         $COMP X'24','EXEC_WITH_SETUID/SETGID'
         $COMP X'25','GETPSENT'
         $COMP X'26','INITIALIZE_OPENEDITION_PROCESS'
         $COMP X'27','OPENEDITION_PROCESS_COMPLETION'
         $COMP X'28','KILL'
         $COMP X'29','LINK'
         $COMP X'2A','MKDIR'
         $COMP X'2B','MKNOD'
         $COMP X'2C','MOUNT_FILE_SYSTEM'
         $COMP X'2D','OPEN_NEW_FILE'
         $COMP X'2E','PTRACE'
         $COMP X'2F','RENAME'
         $COMP X'30','RMDIR'
         $COMP X'31','SETEGID'
         $COMP X'32','SETEUID'
         $COMP X'33','SETGID'
         $COMP X'34','SETUID'
         $COMP X'35','SYMLINK'
         $COMP X'36','UNLINK'
         $COMP X'37','UNMOUNT_FILE_SYSTEM'
         $COMP X'38','CHECK_FILE_OWNER'
         $COMP X'39','CK_PRIV'
         $COMP X'3A','OPEN_SLAVE_TTY'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=EVENT
*
**       SMF80EVQ Compare Table
**       (Descriptions do not contain:  HAS/HAS BEEN/IS
*
T80QUAL  CSECT
         $COMP TYPE=INIT
         $COMP X'0100','SUCCESSFUL'
         $COMP X'0101','INVALID_PASSWORD'
         $COMP X'0102','INVALID_GROUP'
         $COMP X'0103','INVALID_OIDCARD'
         $COMP X'0104','INVALID_TERMINAL/CONSOLE'
         $COMP X'0105','INVALID_APPLICATION'
         $COMP X'0106','REVOKED_USER_ATTEMPTING_ACCESS'
         $COMP X'0107','USERID_AUTOMATICALLY_REVOKED'
         $COMP X'0108','SUCCESSFUL_TERMINATION'
         $COMP X'0109','UNDEFINED_USERID'
         $COMP X'010A','INSUFFICIENT_SECLABEL_AUTHORITY'
         $COMP X'010B','NOT_AUTHORIZED_TO_SECLABEL'
         $COMP X'010C','SUCCESSFUL_RACINIT_INITIATION'
         $COMP X'010D','SUCCESSFUL_RACINIT_DELETE'
         $COMP X'010E','SYSTEM_NOW_REQUIRES_MORE_AUTHORITY'
         $COMP X'010F','RJE_JOB_NOT_AUTHORIZED'
         $COMP X'0110','SURROGAT_CLASS_INACTIVE'
         $COMP X'0111','SUBMITTER_NOT_AUTHORIZED_BY_USER'
         $COMP X'0112','SUBMITTER_NOT_AUTHORIZED_TO_SECLABEL'
         $COMP X'0113','USER_NOT_AUTHORIZED_TO_JOB'
         $COMP X'0114','WARNING_INSUFFICIENT_SECLABEL_AUTHORITY'
         $COMP X'0115','WARNING_SECLABEL_MISSING_FROM_USER/JOB/PROFILE'
         $COMP X'0116','WARNING_NOT_AUTHORIZED_TO_SECLABEL'
         $COMP X'0117','SECLABELS_NOT_COMPATIBLE'
         $COMP X'0118','WARNING_SECLABELS_NOT_COMPATIBLE'
         $COMP X'0119','CURRENT_PASSWORD_EXPIRED'
         $COMP X'011A','INVALID_NEW_PASSWORD'
         $COMP X'011B','VERIFICATION_FAILED_BY_INSTALLATION'
         $COMP X'011C','GROUP_ACCESS_REVOKED'
         $COMP X'011D','OIDCARD_REQUIRED'
         $COMP X'011E','NJE_JOB_NOT_AUTHORIZED'
         $COMP X'011F','WARNING_UNKNOWN_USER_FROM_TRUSTED_NODE_PROPGTD'
         $COMP X'0120','SUCCESSFULL_INITIATION_USING_PASSTICKET'
         $COMP X'0121','ATTEMPTED_REPLAY_OF_PASSTICKET'
         $COMP X'0200','SUCCESSFUL'
         $COMP X'0201','INSUFFICIENT_AUTHORITY'
         $COMP X'0202','PROFILE_NOT_FOUND_RACFIND_SPECIFIED_ON_MACRO'
         $COMP X'0203','ACCESS_PERMITTED_DUE_TO_WARNING'
         $COMP X'0204','FAILED_DUE_TO_PROTECTALL'
         $COMP X'0205','WARNING_ISSUED_DUE_TO_PROTECTALL'
         $COMP X'0206','INSUFFICIENT_CATEGORY/SECLEVEL'
         $COMP X'0207','INSUFFICIENT_SECLABEL_AUTHORITY'
         $COMP X'0208','WARNING_SECLABEL_MISSING_FROM_JOB/USER/PROFILE'
         $COMP X'0209','WARNING_INSUFFICIENT_SECLABEL_AUTHORITY'
         $COMP X'020A','WARNING_DATASET_NOT_CATALOGED'
         $COMP X'020B','DATASET_NOT_CATALOGED'
         $COMP X'020C','PROFILE_NOT_FOUND_REQUIRED_FOR_AUTH_CHECKING'
         $COMP X'020D','WARNING_INSUFFICIENT_CATEGORY/SECLEVEL'
         $COMP X'0300','SUCCESSFUL'
         $COMP X'0301','INSUFFICIENT_AUTHORITY'
         $COMP X'0302','INSUFFICIENT_SECLABEL'
         $COMP X'0303','LESS_SPECIFIC_PROFILE_WITH_DIFFERENT_SECLABEL'
         $COMP X'0400','SUCCESSFUL'
         $COMP X'0401','INVALID_GROUP'
         $COMP X'0402','USER_NOT_IN_GROUP'
         $COMP X'0403','INSUFFICIENT_AUTHORITY'
         $COMP X'0404','RESOURCE_NAME_ALREADY_DEFINED'
         $COMP X'0405','USER_NOT_DEFINED_TO_RACF'
         $COMP X'0406','RESOURCE_NOT_PROTECTED'
         $COMP X'0407','WARNING_RESOURCE_NOT_PROTECTED'
         $COMP X'0408','USER_IN_SECOND_QUALIFIER_NOT_RACF_DEFINED'
         $COMP X'0409','LESS_SPECIFIC_PROFILE_WITH_DIFFERENT_SECLABEL'
         $COMP X'040A','INSUFFICIENT_SECLABEL_AUTHORITY'
         $COMP X'040B','RESOURCE_NOT_PROTECTED_BY_SECLABEL'
         $COMP X'040C','NEW_NAME_NOT_PROTECTED_BY_SECLABEL'
         $COMP X'040D','NEW_SECLABEL_MUST_DOMINATE_OLD_SECLABEL'
         $COMP X'040E','INSUFFICIENT_SECLABEL_AUTHORITY'
         $COMP X'040F','WARNING_RESOURCE_NOT_PROTECTED_BY_SECLABEL'
         $COMP X'0410','WARNING_NEW_NAME_NOT_PROTECTED_BY_SECLABEL'
         $COMP X'0411','WARNING_NEW_SECLABEL_MUST_DOMINATE_OLD_SECLABL'
         $COMP X'0500','SUCCESSFUL'
         $COMP X'0501','RESOURCE_NOT_FOUND'
         $COMP X'0502','INVALID_VOLUME_IDENTIFICATION'
         $COMP X'0600','SUCCESSFUL'
         $COMP X'0700','SUCCESSFUL'
         $COMP X'0701','GROUP_UNDEFINED'
         $COMP X'0702','USER_NOT_IN_GROUP'
         $COMP X'0703','INSUFFICIENT_AUTHORITY'
         $COMP X'0704','RESOURCE_NAME_ALREADY_DEFINED'
         $COMP X'0705','USER_NOT_DEFINED_TO_RACF'
         $COMP X'0706','RESOURCE_NOT_PROTECTED'
         $COMP X'0707','WARNING_RESOURCE_NOT_PROTECTED'
         $COMP X'0708','WARNING_SECLABEL_MISSING_FROM_JOB/USER/PROFILE'
         $COMP X'0709','WARNING_INSUFFICIENT_SECLABEL_AUTHORITY'
         $COMP X'070A','USER_IN_SECOND_QUALIFIER_NOT_RACF_DEFINED'
         $COMP X'070B','INSUFFICIENT_SECLABEL_AUTHORITY'
         $COMP X'070C','LESS_SPECIFIC_PROFILE_WITH_DIFFERENT_SECLABEL'
         $COMP X'0800','SUCCESSFUL'
         $COMP X'0801','INSUFFICIENT_AUTHORITY(NO_UPDATES)'
         $COMP X'0802','KEYWORD_VIOLATIONS_DETECTED(PARTIAL_UPDATES)'
         $COMP X'0803','SUCCESSFUL_RETRIEVAL_OF_DSNS_FOR_SECLABEL'
         $COMP X'0804','ERROR_DURING_RETRIEVAL_OF_DSNS_FOR_SECLABEL'
         $COMP X'0900','SUCCESSFUL'
         $COMP X'0901','INSUFFICIENT_AUTHORITY(NO_UPDATES)'
         $COMP X'0902','KEYWORD_VIOLATIONS_DETECTED(PARTIAL_UPDATES)'
         $COMP X'0A00','SUCCESSFUL'
         $COMP X'0A01','INSUFFICIENT_AUTHORITY(NO_UPDATES)'
         $COMP X'0A02','KEYWORD_VIOLATIONS_DETECTED(PARTIAL_UPDATES)'
         $COMP X'0B00','SUCCESSFUL'
         $COMP X'0B01','INSUFFICIENT_AUTHORITY(NO_UPDATES)'
         $COMP X'0B02','KEYWORD_VIOLATIONS_DETECTED(PARTIAL_UPDATES)'
         $COMP X'0B03','SUCCESSFUL_RETRIEVAL_OF_DSNS_FOR_SECLABEL'
         $COMP X'0B04','ERROR_DURING_RETRIEVAL_OF_DSNS_FOR_SECLABEL'
         $COMP X'0C00','SUCCESSFUL'
         $COMP X'0C01','INSUFFICIENT_AUTHORITY(NO_UPDATES)'
         $COMP X'0C02','KEYWORD_VIOLATIONS_DETECTED(PARTIAL_UPDATES)'
         $COMP X'0D00','SUCCESSFUL'
         $COMP X'0D01','INSUFFICIENT_AUTHORITY(NO_UPDATES)'
         $COMP X'0D02','KEYWORD_VIOLATIONS_DETECTED(PARTIAL_UPDATES)'
         $COMP X'0E00','SUCCESSFUL'
         $COMP X'0E01','INSUFFICIENT_AUTHORITY(NO_UPDATES)'
         $COMP X'0E02','KEYWORD_VIOLATIONS_DETECTED(PARTIAL_UPDATES)'
         $COMP X'0F00','SUCCESSFUL'
         $COMP X'0F01','INSUFFICIENT_AUTHORITY(NO_UPDATES)'
         $COMP X'0F02','KEYWORD_VIOLATIONS_DETECTED(PARTIAL_UPDATES)'
         $COMP X'0F03','SUCCESSFUL_RETRIEVAL_OF_DSNS_FOR_SECLABEL'
         $COMP X'0F04','ERROR_DURING_RETRIEVAL_OF_DSNS_FOR_SECLABEL'
         $COMP X'1000','SUCCESSFUL'
         $COMP X'1001','INSUFFICIENT_AUTHORITY(NO_UPDATES)'
         $COMP X'1002','KEYWORD_VIOLATIONS_DETECTED(PARTIAL_UPDATES)'
         $COMP X'1100','SUCCESSFUL'
         $COMP X'1101','INSUFFICIENT_AUTHORITY(NO_UPDATES)'
         $COMP X'1102','KEYWORD_VIOLATIONS_DETECTED(PARTIAL_UPDATES)'
         $COMP X'1200','SUCCESSFUL'
         $COMP X'1201','INSUFFICIENT_AUTHORITY(NO_UPDATES)'
         $COMP X'1202','KEYWORD_VIOLATIONS_DETECTED(PARTIAL_UPDATES)'
         $COMP X'1300','SUCCESSFUL'
         $COMP X'1301','INSUFFICIENT_AUTHORITY(NO_UPDATES)'
         $COMP X'1302','INSUFFICIENT_AUTHORITY(PARTIAL_UPDATES)'
         $COMP X'1400','SUCCESSFUL'
         $COMP X'1401','INSUFFICIENT_AUTHORITY(NO_UPDATES)'
         $COMP X'1402','KEYWORD_VIOLATIONS_DETECTED(PARTIAL_UPDATES)'
         $COMP X'1500','SUCCESSFUL'
         $COMP X'1501','INSUFFICIENT_AUTHORITY(NO_UPDATES)'
         $COMP X'1502','KEYWORD_VIOLATIONS_DETECTED(PARTIAL_UPDATES)'
         $COMP X'1600','SUCCESSFUL'
         $COMP X'1601','INSUFFICIENT_AUTHORITY(NO_UPDATES)'
         $COMP X'1602','KEYWORD_VIOLATIONS_DETECTED(PARTIAL_UPDATES)'
         $COMP X'1700','SUCCESSFUL'
         $COMP X'1701','INSUFFICIENT_AUTHORITY(NO_UPDATES)'
         $COMP X'1702','KEYWORD_VIOLATIONS_DETECTED(PARTIAL_UPDATES)'
         $COMP X'1800','SUCCESSFUL'
         $COMP X'1801','INSUFFICIENT_AUTHORITY(NO_UPDATES)'
         $COMP X'1802','KEYWORD_VIOLATIONS_DETECTED(PARTIAL_UPDATES)'
         $COMP X'1900','SUCCESSFUL'
         $COMP X'1901','INSUFFICIENT_AUTHORITY(NO_UPDATES)'
         $COMP X'1902','KEYWORD_VIOLATIONS_DETECTED(PARTIAL_UPDATES)'
         $COMP X'1A00','APPCLU'
         $COMP X'1B00','GENERAL'
         $COMP TYPE=BUILD,LENGTH=2,LABEL=QUALIFIER
*
**       SMF80REA TM Table
*
T80REA   CSECT
         DC    C'REASON='          Label
         $TM   CL32'CLASS'
         $TM   CL32'USER'
         $TM   CL32'SPECIAL'
         $TM   CL32'RESOURCE'
         $TM   CL32'RACINIT'
         $TM   CL32'COMMAND'
         $TM   CL32'CMDVIOL'
         $TM   CL32'AUDITOR'
*
**       SMF80RE2 TM Table
*
T80RE2   CSECT
         DC    C'REASON='          Label
         $TM   CL32'SECAUDIT'
         $TM   CL32'VMAUDIT'
         $TM   CL32'LOGOPTIONS'
         $TM   CL32'SECLABELAUDIT'
         $TM   CL32'COMPATMODE'
         $TM   CL32'APPLAUDIT'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
*
**       SMF81D30 Compare Table
*
T81D30   CSECT
         $COMP TYPE=INIT
         $COMP X'80','Active_RACF_Dataset'
         $COMP X'C0','Backup_RACF_Dataset'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=NONE
*
**       SMF82VES TM Table
*
T82VES   CSECT
         DC    C'VES='             Label
         $TM   CL32'Special_security_mode_allowed'
         $TM   CL32'Special_security_mode_enabled'
         $TM   CL32'Reserved'
         $TM   CL32'Key_authentication'
         $TM   CL32'Reserved'
         $TM   CL32'Reserved'
         $TM   CL32'RACF_checking_supervisor_state'
         $TM   CL32'Reserved'
*
**       SMF90TID Compare Table
*
T90TID   CSECT
         $COMP TYPE=INIT
         $COMP H'5','SET_SMF'
         $COMP H'6','Switch_SMF'
         $COMP H'7','HALT_EOD'
         $COMP H'9','IPL_SMF'
         $COMP H'13','SETSMF'
         $COMP H'15','SET_SMF_(Restart_SMF)'
         $COMP H'26','IPL_LOGREC'
         $COMP TYPE=BUILD,LENGTH=2,LABEL=TID
*
**       SMF92MFT Compare Table
*
T92MFT   CSECT
         $COMP TYPE=INIT
         $COMP AL4(1),'MVS_Local_File_System'
         $COMP AL4(2),'Remote_File_System'
         $COMP AL4(3),'Pipe_File_System'
         $COMP AL4(4),'Socket_File_System'
         $COMP AL4(5),'Cross_System_PFS_(XPFS)'
         $COMP TYPE=BUILD,LENGTH=4,LABEL=MFT
*
**       SMF92STP Compare Table
*
T92STP   CSECT
         $COMP TYPE=INIT
         $COMP AL2(01),'File_system_mount'
         $COMP AL2(02),'File_system_quiesce'
         $COMP AL2(04),'File_system_unquiesce'
         $COMP AL2(05),'File_system_unmount'
         $COMP AL2(06),'File_system_remount'
         $COMP AL2(10),'File_open'
         $COMP AL2(11),'File_close'
         $COMP TYPE=BUILD,LENGTH=2,LABEL=STP
*
**       RDFUNC Compare Table
*
TFAFUNC  CSECT
         $COMP TYPE=INIT
         $COMP C'B','Browse'
         $COMP C'E','Edit'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=Function
*
**       X37FFLAG Compare Table
*
X37FLAG  CSECT
         $COMP TYPE=INIT
         $COMP X'00','Reduce'
         $COMP X'04','Set_Secondary'
         $COMP X'08','Volume_Switch'
         $COMP X'0C','Reduce_Primary'
         $COMP X'10','Recat'
         $COMP X'14','VSAM_Reduce'
         $COMP TYPE=BUILD,LENGTH=1,LABEL=Type
*
**       Message Table
*
MSGTBL   CSECT
*                           1         2         3         4         5
*                 012345678901234567890123456789012345678901234567890
DAF000I  DC CL100'DAF000I '
DAF500I  DC CL133' DAF500I Valid keywords are:  '
DAF501I  DC CL133' DAF501I Valid operators are:  '
DAF502I  DC CL133' DAF502I Control Statements Follow'
DAF503I  DC CL133' DAF503I No Control Statements Specified'
DAF504I  DC CL133' DAF504I '
DAF510I  DS 0CL133
         DC CL038' DAF510I SMF Data Lost on System=SSSS '
         DC CL025'From=YYYYDDD/HH.MM.SS.HH '
         DC CL023'To=YYYYDDD/HH.MM.SS.HH '
         DC CL047'Count= '
DAF520I  DC CL133' DAF520I Beginning Processing - __________'
DAF521I  DC CL133' DAF521I Completed Processing - __________'
DAF530I  DS 0CL133
         DC CL047' DAF530I SMF on execution system not recording '
         DC CL086'Type=__________'
DAF600I  DS 0CL133
         DC CL025' DAF600I Entering XXXXXX '
         DC CL108'R14=RRRRRRRR R15=RRRRRRRR '
DAF601I  DS 0CL133
         DC CL025' DAF601I Exiting  XXXXXX '
         DC CL108'R14=RRRRRRRR R15=RRRRRRRR '
DAF610I  DC CL133' DAF610I Invalid RRR YYYYDDD HH.MM.SS.HH DSN='
DAF611I  DC CL133' DAF611I Invalid DSN In DAFSMF Record'
DAF620I  DC CL133' DAF620I KWD=__________ OP=_____ VAL=__________'
DAF621I  DC CL133' DAF621I Original '
DAF622I  DC CL133' DAF622I Resolved '
DAF623I  DC CL133' DAF623I CS=__ CC=__ '
DAF624I  DC CL133' DAF624I CS=__ CC=__ RT=___ DSN=______'
*
**       Major Enqueue Table
*
MAJORTBL $ENTRY BASE=,DWA=,MODID=NO,SAVEMETH=NO,SWA=
         MAJORTBL                  Major Enqueue Table
         TITLE 'Table Mapping'
*
**       Printer Control Table Mapping
*
D_PRTCTL DSECT                     Printer Control Table
D_PRTHDR DS    F                   Print header address
D_PRTPGE DS    PL3                 Current page number
D_PRTLNE DS    PL2                 Current line number
*
**       RTC Table Mapping
*
D_RTCTBL DSECT                     RTC table entry
D_RTCOLD DS    AL1                 Old SMF record type
D_RTCNEW DS    AL1                 New SMF record type
         IEESMCA                   SMF
         IHASDWA                   Map System Diagnostic Work Area
         DCBD  DSORG=PS,DEVD=DA    Map DCB
         END
//LINK    EXEC PGM=HEWL,PARM='MAP,LET,LIST',COND=(0,NE)
//SYSLIN    DD DSN=&&OBJECT,DISP=(OLD,DELETE)
//SYSLMOD   DD DISP=SHR,DSN=ZTGP01.MJCUTIL.LINKLIB(DAF) <=== Dest
//SYSUT1    DD UNIT=SYSDA,SPACE=(CYL,(5,5))
//SYSPRINT  DD SYSOUT=*,OUTPUT=*.JESDS
