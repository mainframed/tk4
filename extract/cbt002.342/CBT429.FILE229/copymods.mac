*          DATA SET CBT990     AT LEVEL 021 AS OF 07/10/00
   TITLE 'COPYMODS -- TAPE COPY PROGRAM'
**************************************************************
**************************************************************
**                                                          **
**                                                          **
**  MODULE: COPYMODS.   WRITTEN BY PAUL TOKHEIM, AFAFC.     **
**                                                          **
**                                                          **
**  PURPOSE: COPY ALL FILES OF AN INPUT TAPE TO ONE TO 16   **
**     OUTPUT TAPES.  THE ORIGINAL PURPOSE OF THIS PROGRAM  **
**     IS FOR COPYING THE SHARE MVS MODS TAPE.              **
**                                                          **
**                                                          **
**  METHOD: COPYMODS FIRST DETERMINES WHICH OUTPUT DD'S ARE **
**    PRESENT. THE INPUT TAPE IS READ USING EXCP AND THE    **
**    APPROPRIATE OUTPUT TAPES ARE WRITTEN USING EXCP.      **
**    ANY LABELS ON THE INPUT WILL BE COPIED. ANY LABELS ON **
**    THE OUTPUT TAPES WILL BE DESTROYED.  IF AN ERROR      **
**    OCCURS ON THE INPUT TAPE, THE PROGRAM WILL ABEND WITH **
**    A USER 69 ABEND.  IF AN ERROR OCCURS ON AN OUTPUT     **
**    TAPE, THE PROGRAM WILL QUIT WRITING TO THE TAPE       **
**    WHICH ENCOUNTERED THE ERROR.                          **
**                                                          **
**                                                          **
**************************************************************
**  NEW FEATURES ADDED:                           SBG 05/00 **
**                                                          **
**                                                          **
**   1.  64K BLOCKS ON A TAPE CAN BE COPIED.                **
**                                                          **
**   2.  UP TO 16 OUTPUT DDNAMES ALLOWED.                   **
**                                                          **
**   3.  INITTED TAPES, AND SL MULTIVOLUME TAPES CAN        **
**       BE CORRECTLY COPIED.                               **
**                                                          **
**   4.  ALL STANDARD LABEL INFORMATION, OR ANY             **
**       PARTICULAR LABEL TYPES, CAN BE PRINTED, IF         **
**       FOUND ON THE INPUT TAPE.                           **
**                                                          **
**   5.  A FLEXIBLE TABLE-DRIVEN PARM KEYWORD SCANNER       **
**       WAS ADDED.  THIS ALLOWS FOR EASY SETTING OF        **
**       PROGRAM DEFAULTS, AND KEYWORD SYNONYMS.  SEE       **
**       LABEL PARMTABL.                                    **
**                                                          **
**   6.  OPTIONALLY, THE VOLSER OF THE OUTPUT TAPES         **
**       CAN BE SET TO THE JCL VOLSER, INSTEAD OF THE       **
**       INPUT TAPE'S VOLSER.                               **
**                                                          **
**   7.  TAPES WITH LEADING TAPE MARKS CAN BE COPIED        **
**       EITHER AS-IS, OR WITH THE LEADING TAPE MARKS       **
**       LEFT OFF.                                          **
**                                                          **
**   8.  EOV LABELS IN THE MIDDLE OF A TAPE, CAN NOW BE     **
**       CHANGED TO EOF LABELS, IF THE TAPE WAS CREATED     **
**       AS A COMPOSITE, BY THE COPYFILE PROGRAM.  THE      **
**       PARM IS EOV2EOF (SEE PARMTABL FOR ALL ACCURATE     **
**       AND CURRENT PARM KEYWORD SETTINGS).                **
**                                                          **
**   9.  COPYMODS CAN NOW BE RUN READ-ONLY FOR THE INPUT    **
**       TAPE, USING PARMS OF READ, READONLY, OR NOWRITE.   **
**                                                          **
**************************************************************
         EJECT
**************************************************************
**  CHANGE LOG:                                             **
**                                                          **
** LEVEL 003                                                **
**  03/03/00 - ALLOW COPYING OF 64K BLOCKS        SBG 03/00 **
**                                                          **
** LEVEL 004                                                **
**  03/03/00 - CHECK FOR DOUBLE TAPE MARK AFTER   SBG 03/00 **
**             A HEADER LABEL.  THIS MEANS AN SL  SBG 03/00 **
**             FILE WITHOUT ANY DATA IN IT.  AND  SBG 03/00 **
**             IF THIS IS THE CASE, DON'T STOP    SBG 03/00 **
**             COPYING FILES.                     SBG 03/00 **
**                                                          **
** LEVEL 005                                                **
**  03/03/00 - GET AWAY FROM R13 AS BASE, USE     SBG 03/00 **
**             R12,R11.                           SBG 03/00 **
**                                                          **
** LEVEL 006                                                **
**  03/12/00 - ENLARGED THE PROGRAM TO ALLOW UP   SBG 03/00 **
**             TO 16 OUTPUT TAPES FROM OUT1 TO    SBG 03/00 **
**             OUT16.                             SBG 03/00 **
**                                                          **
** LEVEL 007 AND 008                                        **
**  03/14/00 - CLEANED UP SPELLING ON ERROR       SBG 03/00 **
**             MESSAGES AND FIXED DOCUMENTATION.  SBG 03/00 **
**             ADDED EYECATCHERS COSMETICALLY.    SBG 03/00 **
**                                                          **
** LEVEL 009                                                **
**  03/21/00 - STOP AFTER INITTED MVS TAPE        SBG 03/00 **
**                                                          **
** LEVEL 010                                                **
**  03/24/00 - FIXED THE BLOCK SIZE CALCULATIONS  SBG 03/00 **
**             FOR BLOCK SIZES FROM 32K TO 64K.   SBG 03/00 **
**                                                          **
**             I MADE AN ATTEMPT TO COPY DOS/VSE  SBG 03/00 **
**             TAPES THAT HAVE LEADING TAPE       SBG 03/00 **
**             MARKS.  THERE IS A CHOICE TO       SBG 03/00 **
**             EITHER COPY ALL THE LEADING        SBG 03/00 **
**             TAPEMARKS TO AN OUTPUT TAPE, OR TO SBG 03/00 **
**             DISCARD THEM ALL.  YOU USE A PARM  SBG 03/00 **
**             OF LTMSKIP TO DISCARD LEADING      SBG 03/00 **
**             TAPEMARKS, AND ANY OTHER PARM, OR  SBG 03/00 **
**             NO PARM, WILL CAUSE THE PROGRAM TO SBG 03/00 **
**             COPY THEM TO THE OUTPUT TAPES.     SBG 03/00 **
**                                                          **
** LEVEL 011                                                **
**  03/24/00 - PROPERLY ACCOUNT FOR INITTED TAPE  SBG 03/00 **
**             BY ENDING THE JOB NORMALLY AFTER   SBG 03/00 **
**             ONE TAPEMARK.                      SBG 03/00 **
**                                                SBG 03/00 **
**             IF VOL1 LABEL IS DETECTED, THEN    SBG 03/00 **
**             PUT OUT A MESSAGE SAYING SO, AND   SBG 03/00 **
**             INDICATING THE VOLSER THAT WAS     SBG 03/00 **
**             FOUND.  THIS PROGRAM WAS WRITTEN   SBG 03/00 **
**             ORIGINALLY WITH THE INTENT OF      SBG 03/00 **
**             HANDLING NL TAPES, SO THAT THE     SBG 03/00 **
**             CONDITIONS WHICH RESULT FROM       SBG 03/00 **
**             HAVING SL TAPES, HAD TO BE         SBG 03/00 **
**             ACCOUNTED FOR LATER.               SBG 03/00 **
**                                                          **
** LEVEL 012                                                **
**  04/19/00 - ACCOUNT FOR SL EOV1 AND EOV2       SBG 04/00 **
**             HAVING ONLY ONE TAPE MARK AFTER              **
**             THEM.                                        **
**                                                          **
** LEVEL 013                                                **
**  04/30/00 - ORGANIZE THE CHECK FOR STANDARD    SBG 04/00 **
**             LABEL TYPES, AND THE SETTING OF              **
**             FLAGS TO INDICATE EACH TYPE.                 **
**             SEE NEW SUBROUTINE CALLED LABELCHK.          **
**             MOVE NON-LABEL-RELATED FLAGS OUT             **
**             OF THE LBLFLAG FLAG.  PREPARE FOR            **
**             EASY PRINTING OF LABEL CONTENTS,             **
**             BUT NO EXTRA PRINTING IS DONE AT             **
**             THIS LEVEL.                                  **
**                                                          **
** LEVEL 014                                                **
**  05/02/00 - ADDED A FLEXIBLE TABLE-DRIVEN      SBG 05/00 **
**             PARM SCANNER THAT IS EASY TO                 **
**             MODIFY, AND TO SUPPLY SYNONYMS               **
**             FOR THE PARMS.  ADDED SUPPORT,               **
**             VIA THE LBLINFO PARM, TO PRINT               **
**             HDR1, HDR2, EOF1, EOF2, EOV1,                **
**             EOV2 LABEL INFORMATION, IF IT IS             **
**             FOUND ON THE INPUT TAPE.  THAT IS,           **
**             IF THE INPUT TAPE IS SL.                     **
**                                                          **
**             FOR A LIST OF PERMISSIBLE PARMS,             **
**             SEE LABEL PARMTABL.                          **
**                                                          **
** LEVEL 015                                                **
**  05/07/00 - GAVE THE PARM SCANNER THE ABILITY  SBG 05/00 **
**             TO TURN OFF A PARM FLAG AS WELL AS           **
**             THE ABILITY TO TURN IT ON. INCREASED         **
**             THE SIZE OF A PARM TABLE ENTRY BY ONE        **
**             BYTE.                                        **
**                                                          **
** LEVEL 016                                                **
**  05/08/00 - GAVE THE PARM SCANNER THE ABILITY  SBG 05/00 **
**             TO SET ANY PARM SETTING AS A                 **
**             DEFAULT.  A SETTING FOR A DEFAULT            **
**             ENTRY THAT IS LATER IN THE TABLE,            **
**             WILL OVERRIDE A SETTING FOR A                **
**             DEFAULT THAT WAS SET EARLIER IN THE          **
**             TABLE.  SETTING A PARM EXPLICITLY            **
**             IN THE JCL, WILL OVERRIDE ANY                **
**             DEFAULT SETTING FOR THAT PARM.               **
**                                                          **
** LEVEL 017                                                **
**  05/11/00 - USED THE PARM SCANNER TO MAKE A    SBG 05/00 **
**             DIFFERENCE BETWEEN PRINTING VARIOUS          **
**             KINDS OF TAPE LABELS.  IF YOU WANT           **
**             ALL OF THEM, YOU JUST HAVE A PARM            **
**             THAT THROWS ALL OF THE FLAGS.  ALL           **
**             OF THIS IS CODED IN PARMTABL AND             **
**             THE FLAGS ARE USED IN PRTXXX1 AND            **
**             PRTXXX2.                                     **
**                                                          **
** LEVEL 018                                                **
**  05/22/00 - ADDED THE PROVISION TO CHANGE THE  SBG 05/00 **
**             VOLSER OF THE COPIED TAPES, TO               **
**             MATCH THE VOLSER INDICATED IN THE            **
**             OUTXX DD NAMES.  THIS IS DONE WITH           **
**             THE CHGVOL PARM KEYWORD.  THIS               **
**             ACTION ONLY OCCURS IF THE INPUT              **
**             TAPE IS SL, AND SO A VOL1 LABEL IS           **
**             DETECTED.  THE COPIED VOL1 LABEL             **
**             IS ALTERED BEFORE THE WRITE.                 **
**                                                          **
** LEVEL 019                                                **
**  06/06/00 - ADDED THE PROVISION TO FIX EOV1    SBG 06/00 **
**             AND EOV2 LABELS THAT ARE IN THE              **
**             MIDDLE OF A TAPE.  OF COURSE THIS            **
**             ISN'T SUPPOSED TO HAPPEN, BUT IT             **
**             CAN HAPPEN WHEN YOU COPY FILES               **
**             WITH THE COPYFILE PROGRAM, FROM              **
**             THE END OF ONE TAPE, TO THE                  **
**             BEGINNING OR THE MIDDLE OF                   **
**             ANOTHER.  COPYFILE HAS NOT BEEN              **
**             FIXED AS YET NOT TO DO THIS, BUT IT          **
**             COPIES THE EOV LABELS AS IS.  THIS           **
**             NEW OPTION IS CALLED EOVCHG OR               **
**             EOV2EOF; THE EOV LABELS ARE                  **
**             CHANGED (IN THE COPIED TAPES) TO             **
**             EOF, AND A MESSAGE IS WRITTEN THAT           **
**             REPORTS THIS FACT.                           **
**                                                          **
** LEVEL 020                                                **
**  06/29/00 - ADDED THE PARM OF READ OR READONLY SBG 06/00 **
**             TO ALLOW A RUN OF COPYMODS THAT              **
**             JUST READS THE INPUT TAPE, AND DOES          **
**             NOT MAKE COPIES.                             **
**                                                          **
** LEVEL 021                                                **
**  07/10/00 - FIX COPYMODS TO CORRECTLY COPY     SBG 07/00 **
**             IEHINITTED TAPES.                            **
**                                                          **
**************************************************************
**************************************************************
         EJECT
         MACRO
&TAG     PRIME &REG,&AREA,&POOL,&LEN,&SAVE=,&R=,&RMK=
         GBLC  &CR0,&CR1,&CR12,&CR13,&CR14,&CR15
         LCLC  &C1,&C2
*******************   PROGRAM INITIATION ROUTINE   ********************
         AIF   ('&RMK' NE 'YES').PR10  JUMP IF REMARKS NOT DESIRED
* THIS MACRO WILL CREATE A SAVEAREA, SAVE THE REGISTERS, AND PERFORM  *
* THE NECESSARY ENTRY LINKAGE.  IT HAS THE FOLLOWING OPTIONS:         *
*                                                                     *
* (TAG)  PRIME (REG)(,AREA)(,POOL)(,LEN)(,SAVE=)(,R=)(,RMK=)          *
*                                                                     *
*    TAG = OPTIONAL - SYMBOLIC NAME IDENTIFIABLE TO 1ST GENERATED INST*
*  PRIME = REQUIRED - OPERATION CODE.                                 *
*    REG = OPTIONAL - INDICATE DESIRED BASE REGISTER OR REGISTERS.    *
*          IF OMITTED REGISTER 13 ASSUMED.  IF MULTIPLE BASES DESIRED *
*          SEPARATE BY COMMAS AND ENCLOSE IN PARENTHESIS (13,11,12).  *
*          IF REG 13 IS SPECIFIED IT MUST BE FIRST.                   *
*          DO NOT USE REG 13 AS A BASE IF RE-ENTERABLE CODING DESIRED.*
*   AREA = OPTIONAL - SYMBOLIC NAME WHICH IF SPECIFIED WILL CAUSE A   *
*          SAVEAREA TO BE GENERATED AND TAGGED WITH THIS NAME. IF REG *
*          13 IS USED AS A BASE A SAVEAREA IS ALWAYS GENERATED AND    *
*          WILL BE GIVEN THIS NAME. THIS AREA WILL NOT BE RELEASED IN *
*          THE 'TERME' MACRO.  THIS IS DESIRABLE IF THE ROUTINE USING *
*          THE 'PRIME & TERME' MACROS IS ENTERED SEVERAL TIMES. IF REG*
*          13 IS NOT USED AS A BASE AND THIS OPTION IS NOT SPECIFIED  *
*          PRIME WILL EXECUTE A 'GETMAIN' TO OBTAIN A SAVEAREA AND    *
*          TERME WILL EXECUTE A 'FREEMAIN' TO RELEASE THE AREA.       *
*          DO NOT SPECIFY THIS OPTION IF RE-ENTERABLE CODING DESIRED. *
*   POOL = OPTIONAL - SPECIFIES THE SUBPOOL FROM WHICH THE SAVEAREA IS*
*          TO BE OBTAINED. IF OMITTED SUBPOOL ZERO IS ASSUMED. THIS   *
*          OPERAND IS IGNORED IF REG 13 IS USED AS A BASE OR IF THE   *
*          AREA OR SAVE OPERANDS ARE SPECIFIED. IF THIS OPTION IS USE *
*          THE SAME SUBPOOL MUST BE SPECIFIED IN THE 'TERME' MACRO.   *
*    LEN = OPTIONAL - MAY BE USED TO SPECIFY THE AMOUNT OF STORAGE TO *
*          BE OBTAINED FOR THE SAVEAREA.  THE OPERAND MUST BE NUMERIC *
*          AND MUST NOT BE LESS THAN 72. THE FIRST 72 BYTES OF THE    *
*          AREA ARE USED BY PRIME TO STORE THE REGISTERS. THE USER MAY*
*          USE THE EXTRA AREA THAT WAS OBTAIN BEYOND 72 PASSED REG 13 *
*          FOR A WORK AREA. THIS OPTION IS USEFUL FOR RE-ENTERABLE    *
*          CODE AND IS IGNORED IF REG 13 IS USED AS A BASE, OR IF THE *
*          AREA OR SAVE OPERANDS ARE SPECIFIED.                       *
*   SAVE = OPTIONAL - SPECIFIES THE NAME OF AN 18 FULLWORD AREA WHERE *
*          THE REGISTERS ARE TO BE SAVED.                             *
*      R = OPTIONAL (KEY WORD) - IF (R=YES) IS SPECIFIED R0 THRU R15  *
*          WILL BE EQUATED TO 0 THRU 15 TO SYMBOLICALLY IDENTIFY REGS.*
*    RMK = OPTIONAL (KEYWORD) - IF (RMK=YES) IS SPECIFIED THIS REMARK *
*          BLOCK WILL BE LISTED IN THE MACRO EXPANSION.               *
***********************************************************************
.PR10    AIF   ('&CR0' NE '').PR40     JUMP IF REGS ALREADY EQUATED
         AIF   ('&R' EQ '').PR20
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
.PR20    ANOP
         AIF   ('&R' EQ '').PR30       JUMP IF NO EQUATE
&CR0     SETC  'R0'
&CR1     SETC  'R1'
&CR12    SETC  'R12'
&CR13    SETC  'R13'
&CR14    SETC  'R14'
&CR15    SETC  'R15'
         AGO   .PR40
.PR30    ANOP
&CR0     SETC  '0'
&CR1     SETC  '1'
&CR12    SETC  '12'
&CR13    SETC  '13'
&CR14    SETC  '14'
&CR15    SETC  '15'
.PR40    DS    0F -------------------- VER.1 REL.6 --------------------
         AIF   ('&REG' NE '').PR50     JUMP IF REG PRESENT
         USING *,&CR13
         AGO   .PR100
.PR50    AIF   (N'&REG GT 1).PR60           JUMP IF MORE THAN 1 REG
         USING *,&REG(1)
         AGO   .PR100
.PR60    AIF   (N'&REG GT 2).PR70           JUMP IF MORE THAN 2 REGS
         USING *,&REG(1),&REG(2)
         AGO   .PR100
.PR70    AIF   (N'&REG GT 3).PR80           JUMP IF MORE THAN 3 REGS
         USING *,&REG(1),&REG(2),&REG(3)
         AGO   .PR100
.PR80    ANOP
         USING *,&REG(1),&REG(2),&REG(3),&REG(4)
         AIF   (N'&REG LT 5).PR100          JUMP IF LESS THAN 5 REGS
      MNOTE 8,'** MAXIMUM NUMBER OF REGISTERS IS 4 - OTHER IGNORED **'
.PR100   AIF   ('&REG' EQ '').PR110    JUMP IF REG NOT PRESENT
         AIF   ('&REG(1)' EQ 'R13' OR '&REG(1)' EQ '13').PR110
         AGO   .PR120
.PR110   AIF   ('&AREA' EQ '').PR115
&AREA    DS    0F
.PR115   ANOP
&TAG     BAL   &CR15,76(&CR15)
         DC    17F'0',H'4',H'4096'
         SH    &CR15,68(&CR15)
         STM   &CR14,&CR12,12(&CR13)
         LR    &CR1,&CR15
         AIF   (N'&REG LT 2).PR170
         LR    &REG(2),&CR1
         LA    &CR15,74(&CR1)
         AGO   .PR150
.PR120   ANOP
&TAG     BALR  &CR15,0
         BCTR  &CR15,0
         BCTR  &CR15,0
         STM   &CR14,&CR12,12(&CR13)
         LR    &REG(1),&CR15
         AIF   ('&AREA' EQ '').PR130   JUMP IF AREA NOT DESIRED
         BAL   &CR1,*+78
&AREA    DC    18F'0',H'4096'
         LA    &CR15,72(&CR1)
         AGO   .PR140
.PR130   AIF   (N'&REG LT 2).PR160
         BAL   &CR15,*+6
         DC    H'4096'
.PR140   AIF   (N'&REG EQ 1).PR160     JUMP IF 1 REG
         LR    &REG(2),&REG(1)
.PR150   AH    &REG(2),0(&CR15)
         AIF   (N'&REG EQ 2).PR160     JUMP IF 2 REGS
         LR    &REG(3),&REG(2)
         AH    &REG(3),0(&CR15)
         AIF   (N'&REG EQ 3).PR160     JUMP IF 3 REGS
         LR    &REG(4),&REG(3)
         AH    &REG(4),0(&CR15)
.PR160   AIF   ('&REG(1)' EQ 'R13' OR '&REG(1)' EQ '13').PR170
         AIF   ('&AREA' NE '').PR170   JUMP IF AREA
         AIF   ('&SAVE' EQ '').PR180   JUMP IF NO SAVE
         LA    &CR1,&SAVE
.PR170   ST    &CR1,8(&CR13)
         MVI   8(&CR13),X'A3'
         AGO   .PR240
.PR180   AIF   ('&POOL' EQ '').PR190   JUMP IF NO POOL
&C1      SETC  '&POOL'
         AGO   .PR200
.PR190   ANOP
&C1      SETC  '0'
.PR200   AIF   ('&LEN' EQ '').PR220
         AIF   ('&LEN' LT '72').PR210
&C2      SETC  '&LEN'
         AGO   .PR230
.PR210   MNOTE 4,'SAVEAREA LENGTH SPECIFIED LESS THAN 72 - 72 ASSUMED'
.PR220   ANOP
&C2      SETC  '72'
.PR230   GETMAIN R,LV=&C2,SP=&C1
         XC    0(72,&CR1),0(&CR1)
         ST    &CR1,8(&CR13)
         MVI   8(&CR13),X'DC'
.PR240   ST    &CR13,4(&CR1)
         LM    &CR0,&CR1,20(&CR13)
         L     &CR13,8(&CR13)
         MEND
         MACRO
&TAG     TERME &OP,&POOL,&LEN,&RMK=
         GBLC  &CR0,&CR1,&CR12,&CR13,&CR14,&CR15
         LCLA  &A
         LCLC  &C1,&C2
*******************   PROGRAM TERMINATION ROUTINE   *******************
         AIF   ('&RMK' NE 'YES').TR1   JUMP IF REMARKS NOT DESIRED
* THIS MACRO WILL RESTORE THE REGISTERS, RELEASE THE SAVEAREA IF      *
* OBTAIN BY 'PRIME' MACRO, AND RETURN TO NEXT HIGHER LEVEL.           *
* UPON RETURN REGS. 0 & 1 WILL REMAIN THE SAME AS BEFORE THE TERME.   *
*                                                                     *
* (TAG)  TERME  (OP)(,POOL)(,LEN)(,RMK=NO)                            *
*                                                                     *
*    TAG = OPTIONAL - SYMBOLIC NAME IDENTIFIABLE TO 1ST GENERATED INST*
*  TERME = REQUIRED - OPERATION CODE.                                 *
*     OP = OPTIONAL - IF 'XCTL' IS SPECIFIED INSTRUCTIONS WILL BE     *
*          GENERATED WHICH WILL ALLOW THE 'XCTL' MACRO TO BE ISSUED   *
*          IMMEDIATLY FOLLOWING THE TERME MACRO. CONTROL WILL NOT BE  *
*          GIVEN TO THE NEXT HIGHER LEVEL.                            *
*   POOL = OPTIONAL - IT MUST BE PRESENT IF THE POOL OPTION IN 'PRIME'*
*          WAS SPECIFIED, AND MUST INDICATE THE SAME SUBPOOL.         *
*    LEN = OPTIONAL - IT MUST BE PRESENT IF THE LEN OPTION IN 'PRIME' *
*          WAS SPECIFIED, AND MUST INDICATE THE SAME LENGTH.          *
*    RMK = OPTIONAL (KEYWORD) - IF (RMK=YES) IS SPECIFIED THIS REMARK *
*          BLOCK WILL BE LISTED IN THE MACRO EXPANSION.               *
***********************************************************************
.TR1     ANOP
         AIF   ('&CR0' NE '').TR2      JUMP IF REG EQU IN PRIME
&CR0     SETC  '0'
&CR1     SETC  '1'
&CR12    SETC  '12'
&CR13    SETC  '13'
&CR14    SETC  '14'
&CR15    SETC  '15'
.TR2     ANOP
&A       SETA  &SYSNDX
&TAG     L     &CR14,4(&CR13)
         STM   &CR15,&CR1,16(&CR14)
         XI    8(&CR14),X'DC'
         BC    7,IXI5&A
         L     &CR1,8(&CR14)
         AIF   ('&POOL' EQ '').TR10
&C1      SETC  '&POOL'
         AGO   .TR20
.TR10    ANOP
&C1      SETC  '0'
.TR20    AIF   ('&LEN' EQ '').TR40
         AIF   ('&LEN' LT '72').TR30
&C2      SETC  '&LEN'
         AGO   .TR50
.TR30    MNOTE 4,'SAVEAREA LENGTH SPECIFIED LESS THAN 72 - ASSUME 72'
.TR40    ANOP
&C2      SETC  '72'
.TR50    ANOP
         FREEMAIN R,LV=&C2,A=(1),SP=&C1
IXI5&A   LR    &CR13,&CR14
         L     &CR14,16(&CR13)
         SPM   &CR14
         LM    &CR14,&CR12,12(&CR13)
         XC    8(4,&CR13),8(&CR13) ----- VER.1 REL.6 -----
         AIF   ('&OP' EQ 'XCTL').C
         BR    &CR14
         MEXIT
.C       ANOP
         BALR  &CR15,0
         USING *,&CR15
         MEND
         EJECT
COPYMODS CSECT
         USING *,R15                                          SBG 03/00
         B     EYECATCH                                       SBG 03/00
         DC    C'--- '            MAKE EYECATCHER VISIBLE     SBG 03/00
         DC    C'COPYMODS - 16 OUTPUT TAPES VERSION - '       SBG 03/00
         DC    C'&SYSDATE',C'  ',C'&SYSTIME ',C'---'          SBG 03/00
EYECATCH DS    0D             ENSURE ALIGNMENT                SBG 03/00
         DROP  R15                                            SBG 03/00
         PRIME (R12,R11,R10),R=YES,RMK=NO                     SBG 05/00
         BAL   R6,PARMCHK       FLAG ALL PARMS CODED,         SBG 04/00
*                               AND CHECK FOR LTMSKIP.        SBG 04/00
         TM    PARMFLG1,X'20'   ARE WE SKIPPING LTM'S?        SBG 04/00
         BZ    COPYLTMS         NO. WE'RE COPYING THEM.       SBG 04/00
*                               YES. WE'RE SKIPPING THEM, SO  SBG 04/00
         MVC   LTMRPTI,SKIPPED  MOVE INDICATOR TO REPORT      SBG 03/00
         B     SKIPLTMS         AND DO OTHER INITIALIZATION   SBG 03/00
COPYLTMS MVC   LTMRPTI,COPIED   MOVE INDICATOR TO REPORT      SBG 03/00
SKIPLTMS DS    0H                                             SBG 06/00
         STM   R14,R3,SAV14T03   GET READY TO SAVE INPUT VOL  SBG 06/00
         RDJFCB IN
         MVC   INVOLJ(6),INJFCB+118    SAVE INPUT VOLUME FROM JCL
         MVC   SUCCESSR+60(6),INJFCB+118   COPY TO READ MESSG SBG 06/00
         MVC   READOMSG+60(6),INJFCB+118   COPY TO READ MESSG SBG 06/00
         LM    R14,R3,SAV14T03   RESTORE REGISTERS                TEST
         SR    R9,R9          ZERO FOR BLOCK COUNT            SBG 03/00
         XC    FULLWORK,FULLWORK  CLEAR WORK AREA             SBG 03/00
         LA    R8,1           INITIALIZE FOR FILE NUMBER
         MVI   DATFLAG,X'10' INITIALIZE FLAG-NO DATA READ YET SBG 03/00
         SPACE 3
*
*  DETERMINE WHICH OUTPUT DD'S ARE PRESENT
*
* --- READ ONLY CODE ---------------------------------------- SBG 06/00
         TM    PARMFLG2,X'08'   IS THIS RUN READ-ONLY?        SBG 06/00
         BO    OPENS      YES--SKIP ALL THE TIOT FOR OUT DD'S SBG 06/00
* --- READ ONLY CODE ---------------------------------------- SBG 06/00
         L     R2,16          R2=CVT
         L     R2,0(,R2)      R2=TCB WORDS
         L     R2,4(,R2)      R2=MY TCB
         L     R2,12(,R2)     R2=TIOT
         LA    R2,24(,R2)     R2=FIRST DD ENTRY
TIOTLOOP CLC   0(4,R2),=XL4'00' END OF TIOT?
         BE    OPENS          YES
         CLC   4(8,R2),OUT1+40  OUTPUT FILE NUMBER 1?
         BNE   TIOT1          NO
         OI    FLAG1,OP1      SHOW IT
         STM   R14,R3,SAV14T03                                    TEST
         RDJFCB OUT1
         MVC   VOLUME1(6),OUTJFCB+118    SAVE VOLUME SERIAL
         MVC   VOLDD,DDOUT1
         LM    R14,R3,SAV14T03                                    TEST
         B     TIOTNEXT       CONTINUE
TIOT1    CLC   4(8,R2),OUT2+40  OUTPUT FILE NUMBER 2?
         BNE   TIOT2          NO
         OI    FLAG1,OP2      SHOW IT
         STM   R14,R3,SAV14T03                                    TEST
         RDJFCB OUT2
         MVC   VOLUME2(6),OUTJFCB+118    SAVE VOLUME SERIAL
         MVC   VOLDD,DDOUT2
         LM    R14,R3,SAV14T03                                    TEST
         B     TIOTNEXT       CONTINUE
TIOT2    CLC   4(8,R2),OUT3+40  OUTPUT FILE NUMBER 3?
         BNE   TIOT3          NO
         OI    FLAG1,OP3      SHOW IT
         STM   R14,R3,SAV14T03                                    TEST
         RDJFCB OUT3
         MVC   VOLUME3(6),OUTJFCB+118    SAVE VOLUME SERIAL
         MVC   VOLDD,DDOUT3
         LM    R14,R3,SAV14T03                                    TEST
         B     TIOTNEXT       CONTINUE
TIOT3    CLC   4(8,R2),OUT4+40  OUTPUT FILE NUMBER 4?
         BNE   TIOT4          NO
         OI    FLAG1,OP4      SHOW IT
         STM   R14,R3,SAV14T03                                    TEST
         RDJFCB OUT4
         MVC   VOLUME4(6),OUTJFCB+118    SAVE VOLUME SERIAL
         MVC   VOLDD,DDOUT4
         LM    R14,R3,SAV14T03                                    TEST
         B     TIOTNEXT       CONTINUE
TIOT4    CLC   4(8,R2),OUT5+40  OUTPUT FILE NUMBER 5?
         BNE   TIOT5          NO
         OI    FLAG1,OP5      SHOW IT
         STM   R14,R3,SAV14T03                                    TEST
         RDJFCB OUT5
         MVC   VOLUME5(6),OUTJFCB+118    SAVE VOLUME SERIAL
         MVC   VOLDD,DDOUT5
         LM    R14,R3,SAV14T03                                    TEST
         B     TIOTNEXT       CONTINUE
TIOT5    CLC   4(8,R2),OUT6+40  OUTPUT FILE NUMBER 6?
         BNE   TIOT6          NO
         OI    FLAG1,OP6      SHOW IT
         STM   R14,R3,SAV14T03                                    TEST
         RDJFCB OUT6
         MVC   VOLUME6(6),OUTJFCB+118    SAVE VOLUME SERIAL
         MVC   VOLDD,DDOUT6
         LM    R14,R3,SAV14T03                                    TEST
         B     TIOTNEXT       CONTINUE
TIOT6    CLC   4(8,R2),OUT7+40  OUTPUT FILE NUMBER 7?
         BNE   TIOT7          NO
         OI    FLAG1,OP7      SHOW IT
         STM   R14,R3,SAV14T03                                    TEST
         RDJFCB OUT7
         MVC   VOLUME7(6),OUTJFCB+118    SAVE VOLUME SERIAL
         MVC   VOLDD,DDOUT7
         LM    R14,R3,SAV14T03                                    TEST
         B     TIOTNEXT       CONTINUE
TIOT7    CLC   4(8,R2),OUT8+40  OUTPUT FILE NUMBER 8?
         BNE   TIOT8          NO
         OI    FLAG1,OP8      SHOW IT
         STM   R14,R3,SAV14T03                                    TEST
         RDJFCB OUT8
         MVC   VOLUME8(6),OUTJFCB+118    SAVE VOLUME SERIAL
         MVC   VOLDD,DDOUT8
         LM    R14,R3,SAV14T03                                    TEST
         B     TIOTNEXT       CONTINUE
TIOT8    CLC   4(8,R2),OUT9+40  OUTPUT FILE NUMBER 9?
         BNE   TIOT9          NO
         OI    FLAG2,OP9      SHOW IT
         STM   R14,R3,SAV14T03                                    TEST
         RDJFCB OUT9
         MVC   VOLUME9(6),OUTJFCB+118    SAVE VOLUME SERIAL
         MVC   VOLDD,DDOUT9
         LM    R14,R3,SAV14T03                                    TEST
         B     TIOTNEXT       CONTINUE
TIOT9    CLC   4(8,R2),OUT10+40  OUTPUT FILE NUMBER 10?
         BNE   TIOT10         NO
         OI    FLAG2,OP10     SHOW IT
         STM   R14,R3,SAV14T03                                    TEST
         RDJFCB OUT10
         MVC   VOLUME10(6),OUTJFCB+118    SAVE VOLUME SERIAL
         MVC   VOLDD,DDOUT10
         LM    R14,R3,SAV14T03                                    TEST
         B     TIOTNEXT       CONTINUE
TIOT10   CLC   4(8,R2),OUT11+40  OUTPUT FILE NUMBER 11?
         BNE   TIOT11         NO
         OI    FLAG2,OP11     SHOW IT
         STM   R14,R3,SAV14T03                                    TEST
         RDJFCB OUT11
         MVC   VOLUME11(6),OUTJFCB+118    SAVE VOLUME SERIAL
         MVC   VOLDD,DDOUT11
         LM    R14,R3,SAV14T03                                    TEST
         B     TIOTNEXT       CONTINUE
TIOT11   CLC   4(8,R2),OUT12+40  OUTPUT FILE NUMBER 12?
         BNE   TIOT12         NO
         OI    FLAG2,OP12     SHOW IT
         STM   R14,R3,SAV14T03                                    TEST
         RDJFCB OUT12
         MVC   VOLUME12(6),OUTJFCB+118    SAVE VOLUME SERIAL
         MVC   VOLDD,DDOUT12
         LM    R14,R3,SAV14T03                                    TEST
         B     TIOTNEXT       CONTINUE
TIOT12   CLC   4(8,R2),OUT13+40  OUTPUT FILE NUMBER 13?
         BNE   TIOT13         NO
         OI    FLAG2,OP13     SHOW IT
         STM   R14,R3,SAV14T03                                    TEST
         RDJFCB OUT13
         MVC   VOLUME13(6),OUTJFCB+118    SAVE VOLUME SERIAL
         MVC   VOLDD,DDOUT13
         LM    R14,R3,SAV14T03                                    TEST
         B     TIOTNEXT       CONTINUE
TIOT13   CLC   4(8,R2),OUT14+40  OUTPUT FILE NUMBER 14?
         BNE   TIOT14         NO
         OI    FLAG2,OP14     SHOW IT
         STM   R14,R3,SAV14T03                                    TEST
         RDJFCB OUT14
         MVC   VOLUME14(6),OUTJFCB+118    SAVE VOLUME SERIAL
         MVC   VOLDD,DDOUT14
         LM    R14,R3,SAV14T03                                    TEST
         B     TIOTNEXT       CONTINUE
TIOT14   CLC   4(8,R2),OUT15+40  OUTPUT FILE NUMBER 15?
         BNE   TIOT15         NO
         OI    FLAG2,OP15     SHOW IT
         STM   R14,R3,SAV14T03                                    TEST
         RDJFCB OUT15
         MVC   VOLUME15(6),OUTJFCB+118    SAVE VOLUME SERIAL
         MVC   VOLDD,DDOUT15
         LM    R14,R3,SAV14T03                                    TEST
         B     TIOTNEXT       CONTINUE
TIOT15   CLC   4(8,R2),OUT16+40  OUTPUT FILE NUMBER 16?
         BNE   TIOTNEXT       NO
         OI    FLAG2,OP16     SHOW IT
         STM   R14,R3,SAV14T03                                    TEST
         RDJFCB OUT16
         MVC   VOLUME16(6),OUTJFCB+118    SAVE VOLUME SERIAL
         MVC   VOLDD,DDOUT16
         LM    R14,R3,SAV14T03                                    TEST
         B     TIOTNEXT       CONTINUE
TIOTNEXT SR    R3,R3
         IC    R3,0(,R2)      R3=LENGTH OF DD ENTRY
         AR    R2,R3          R2=NEXT DD ENTRY
         B     TIOTLOOP       GO CHECK IT
         SPACE 3
*
*  OPEN ALL FILES
*
*  ---------------------------------------------------------  SBG 03/00
OPENS    OPEN  (IN,,SYSPRINT,OUTPUT)
* --- READ ONLY CODE ---------------------------------------- SBG 06/00
         TM    PARMFLG2,X'08'   IS THIS RUN READ-ONLY?        SBG 06/00
         BZ    OPENMOVE   NO. CONTINUE WITH ALL THE OPENS.    SBG 06/00
*                         OTHERWISE PUT INITIAL READONLY MSG  SBG 06/00
         MVC   LINE(133),READOMSG    MOVE READ-ONLY MESSAGE   SBG 06/00
         PUT   SYSPRINT,LINE  WRITE INITIAL MESSAGE SHOWING READONLY
         B     READIN                                         SBG 06/00
* --- READ ONLY CODE ---------------------------------------- SBG 06/00
OPENMOVE MVC   FLAG3(2),FLAG1 SAVE INDICATION OF WHICH FILES ARE HERE
*                             THIS ALSO MOVES FLAG2 TO FLAG4  SBG 03/00
*  ---------------------------------------------------------  SBG 03/00
         TM    FLAG1,OP1      OUTPUT 1 PRESENT?
         BZ    OPEN1          NO
         OPEN  (OUT1,OUTPUT)
OPEN1    TM    FLAG1,OP2      OUTPUT 2 PRESENT?
         BZ    OPEN2          NO
         OPEN  (OUT2,OUTPUT)
OPEN2    TM    FLAG1,OP3      OUTPUT 3 PRESENT?
         BZ    OPEN3          NO
         OPEN  (OUT3,OUTPUT)
OPEN3    TM    FLAG1,OP4      OUTPUT 4 PRESENT?
         BZ    OPEN4          NO
         OPEN  (OUT4,OUTPUT)
OPEN4    TM    FLAG1,OP5      OUTPUT 5 PRESENT?
         BZ    OPEN5          NO
         OPEN  (OUT5,OUTPUT)
OPEN5    TM    FLAG1,OP6      OUTPUT 6 PRESENT?
         BZ    OPEN6          NO
         OPEN  (OUT6,OUTPUT)
OPEN6    TM    FLAG1,OP7      OUTPUT 7 PRESENT?
         BZ    OPEN7          NO
         OPEN  (OUT7,OUTPUT)
OPEN7    TM    FLAG1,OP8      OUTPUT 8 PRESENT?
         BZ    OPEN8          NO
         OPEN  (OUT8,OUTPUT)
OPEN8    TM    FLAG2,OP9      OUTPUT 9 PRESENT?
         BZ    OPEN9          NO
         OPEN  (OUT9,OUTPUT)
OPEN9    TM    FLAG2,OP10     OUTPUT 10 PRESENT?
         BZ    OPEN10         NO
         OPEN  (OUT10,OUTPUT)
OPEN10   TM    FLAG2,OP11     OUTPUT 11 PRESENT?
         BZ    OPEN11         NO
         OPEN  (OUT11,OUTPUT)
OPEN11   TM    FLAG2,OP12     OUTPUT 12 PRESENT?
         BZ    OPEN12         NO
         OPEN  (OUT12,OUTPUT)
OPEN12   TM    FLAG2,OP13     OUTPUT 13 PRESENT?
         BZ    OPEN13         NO
         OPEN  (OUT13,OUTPUT)
OPEN13   TM    FLAG2,OP14     OUTPUT 14 PRESENT?
         BZ    OPEN14         NO
         OPEN  (OUT14,OUTPUT)
OPEN14   TM    FLAG2,OP15     OUTPUT 15 PRESENT?
         BZ    OPEN15         NO
         OPEN  (OUT15,OUTPUT)
OPEN15   TM    FLAG2,OP16     OUTPUT 16 PRESENT?
         BZ    READIN         NO
         OPEN  (OUT16,OUTPUT)
         SPACE 3
*
*  READ INPUT
*
READIN   NI    L80FLAG,FF-X'01'   TURN OFF 80-BYTE INDICATOR  SBG 03/00
         NI    LBLFLAG,FF-X'04'   TURN OFF VOL1 FLAG
         MVI   INECB,X'00'    INITIALIZE ECB
         EXCP  INIOB          READ
         WAIT  ECB=INECB      WAIT FOR READ
         TM    INCSW+4,X'01'  WAS TM READ?
         BO    READIN1        YES
         CLI   INECB,X'7F'    DID READ COMPLETE NORMALLY?
         BNE   INERR          NO -- ERROR
         MVI   OUTCCW,X'01'   SET OUTPUT CCW TO WRITE
*        LH    R2,INCCW+6     R2=READ LENGTH                  SBG 03/00
         XC    FULLWORK,FULLWORK     CLEAR AREA COMPLETELY    SBG 03/00
         MVC   HALFWORK(2),INCCW+6   READ LENGTH              SBG 03/00
         L     R2,FULLWORK    LOAD R2 WITH FULL LOW ORDER     SBG 03/00
*        LH    R3,INCSW+6     R3=RESIDUAL BYTE COUNT          SBG 03/00
         MVC   HALFWORK(2),INCSW+6   RESIDUAL BYTE COUNT      SBG 03/00
         L     R3,FULLWORK    LOAD R3 WITH FULL LOW ORDER     SBG 03/00
         SR    R2,R3          R2=ACTUAL LENGTH READ
         NI    DATFLAG,FF-X'10'  SHOW REAL DATA HAS BEEN READ SBG 03/00
*  --- BELOW ---  CODE TO DETECT SL BEFORE 2 TAPE MARKS.      SBG 03/00
         C     R2,=F'80'      DID WE READ 80-BYTE BLOCK LAST? SBG 03/00
         BNE   READGO1        NO. SKIP THIS PROCESSING.       SBG 03/00
         OI    L80FLAG,X'01'  INDICATE 80-BYTE RECORD READ    SBG 03/00
         BAL   R6,LABELCHK    CHECK FOR ALL KINDS OF SL       SBG 04/00
*                             FORMATS, AND SET FLAGS          SBG 04/00
*                             ACCORDINGLY.  OPTIONALLY        SBG 04/00
*                             PRINT LABEL INFO FOUND.         SBG 04/00
*  --- ABOVE ---  CODE TO DETECT SL BEFORE 2 TAPE MARKS.      SBG 03/00
*                                                             SBG 04/00
READGO1  STH   R2,OUTCCW+6    STORE FOR WRITE                 SBG 03/00
         LA    R9,1(,R9)      ADD 1 TO COUNT OF DATA BLOCKS
         B     WRITE1         CONTINUE
*                                                             SBG 04/00
*  --- BELOW ---  PROCESSING WHEN TAPE MARK WAS ENCOUNTERED   SBG 04/00
READIN1  DS    0H             COME HERE IF TM WAS READ        SBG 04/00
         TM    DATFLAG,X'10'  NO DATA READ YET?               SBG 03/00
         BZ    READINGO       DATA WAS READ-PROCESS NORMALLY  SBG 03/00
         CLC   LTMRPTI,SKIPPED   WE SKIP LEADING TAPEMARKS?   SBG 03/00
         BNE   RDNOSKIP                                       SBG 03/00
         MVI   LINE-1,C' '                                    SBG 03/00
         MVC   LINE,LINE-1    CLEAR PRINT LINE                SBG 03/00
         MVC   LINE(30),LTMRPT  INDICATE LEADING TM SKIPPED   SBG 03/00
         PUT   SYSPRINT,LINE  WRITE MESSAGE                   SBG 03/00
         B     READIN         DO ANOTHER READ                 SBG 03/00
RDNOSKIP DS    0H                                             SBG 03/00
         MVI   LINE-1,C' '                                    SBG 03/00
         MVC   LINE,LINE-1    CLEAR PRINT LINE                SBG 03/00
         MVC   LINE(30),LTMRPT  INDICATE LEADING TM COPIED    SBG 03/00
         PUT   SYSPRINT,LINE  WRITE MESSAGE                   SBG 03/00
         B     MARKFILE                                       SBG 03/00
READINGO DS    0H                                             SBG 04/00
         CVD   R8,DWORD       CONVERT FILE NUMBER TO DECIMAL  SBG 03/00
         OI    DWORD+7,X'0F'  MAKE SIGN READABLE
         UNPK  FILEDONE+6(5),DWORD+5(3)  UNPACK FILE NUMBER
         CVD   R9,DWORD       CONVERT BLOCK COUNT TO DECIMAL
         OI    DWORD+7,X'0F'  MAKE SIGN READABLE
         UNPK  FILEDONE+21(7),DWORD+4(4)  UNPACK BLOCK COUNT
         PUT   SYSPRINT,FILEDONE  WRITE IT
MARKFILE SR    R9,R9          ZERO BLOCK COUNT FOR NEW FILE
         LA    R8,1(,R8)      ADD 1 TO FILE NUMBER
         TM    DATFLAG,X'10'  STILL NO REAL DATA READ?        SBG 03/00
         BO    NOLBL          YES, DON'T TEST FOR 2ND TMK     SBG 03/00
*  BREAK IN HERE TO DETECT EOV AND STOP AFTER 1 TAPEMARK      SBG 04/00
         TM    LBLFLAG,X'C0'  DID WE SEE AN EOV1 OR EOV2?     SBG 04/00
         BZ    TESTINT        NO. TEST FOR INITTED TAPE       SBG 04/00
         B     READIN2        YES. WRITE TO OUTPUTS & END     SBG 04/00
*  BREAK IN HERE TO FLAG INITTED TAPE.                        SBG 03/00
TESTINT  TM    LBLFLAG,X'08'  INITTED TAPE HDR1 SEEN?         SBG 03/00
         BZ    MARKGO         NO. DON'T STOP AFTER 1 TMK      SBG 07/00
         MVI   LINE-1,C' '                                    SBG 03/00
         MVC   LINE,LINE-1    CLEAR PRINT LINE                SBG 03/00
         MVC   INITSER(6),INVOLUME  MOVE IN VOLSER FROM VOL1  SBG 03/00
         MVC   LINE(130),INITMSG MSG-WE'RE DOING INITTED TAPE SBG 03/00
         PUT   SYSPRINT,LINE  WRITE MESSAGE                   SBG 03/00
         MVI   OUTCCW,X'1F'   SET OUTPUT CCW TO WRITE TM      SBG 07/00
         B     READIN2        STOP AFTER WRITING TMK          SBG 03/00
*  CODE ABOVE FLAGS INITTED TAPE.                             SBG 03/00
MARKGO   CLI   OUTCCW,X'1F'   2ND TM IN A ROW?
         BE    TESTEND        YES. TEST IF RIGHT AFTER LABELS SBG 03/00
NOLBL    MVI   OUTCCW,X'1F'   SET OUTPUT CCW TO WRITE TM      SBG 03/00
         B     WRITE1         GO WRITE TM TO OUTPUTS
*  --- BELOW ---  CODE TO GO ON IF LABEL BEFORE 2 TAPE MARKS. SBG 03/00
TESTEND  TM    LBLFLAG,X'03'  TEST FOR PREV HDR1 OR HDR2      SBG 03/00
         BZ    READIN2        NOT EITHER. END AS USUAL.       SBG 03/00
*  AT THIS POINT, THERE'S A HDR1 OR A HDR2 THAT'S BEEN SEEN.  SBG 03/00
         TM    LBLFLAG,X'02'  TEST IF HDR2 HAS BEEN SEEN      SBG 03/00
         BZ    TESTINIT       NO, SEE IF INITTED              SBG 03/00
*  AT THIS POINT, THERE'S A HDR2, SO NOT INITTED AND NOT VSE. SBG 03/00
TESTGOON MVI   LBLFLAG,X'00'  CLEAR LABEL FLAGS FOR NEXT READ SBG 03/00
         B     NOLBL          GO ON WITHOUT SETTING EOV FLAG  SBG 03/00
*  AT THIS POINT, THERE'S A HDR1, SO WE TEST FOR INITTED.     SBG 03/00
TESTINIT TM    LBLFLAG,X'08'  INITTED HDR1 HERE?              SBG 03/00
         BZ    TESTGOON       NOT INITTED, SO JUST KEEP GOING SBG 03/00
*  --- ABOVE ---  CODE TO GO ON IF LABEL BEFORE 2 TAPE MARKS. SBG 03/00
*                                                             SBG 04/00
*  --- ABOVE ---  PROCESSING WHEN TAPE MARK WAS ENCOUNTERED   SBG 04/00
READIN2  OI    FLAG2A,EOV     INDICATE EOV ON INPUT
         SPACE 3
*
*  WRITE TO OUTPUT TAPES
*
WRITE1   DS    0H                                             SBG 06/00
* --- READ ONLY CODE ---------------------------------------- SBG 06/00
         TM    PARMFLG2,X'08'   IS THIS RUN READ-ONLY?        SBG 06/00
         BO    WRITE17    YES--NO WRITES - ONLY READS         SBG 06/00
* --- READ ONLY CODE ---------------------------------------- SBG 06/00
         TM    FLAG1,OP1      IS THIS OUTPUT PRESENT?
         BZ    WRITE2         NO
* ----------------------------------  PROCESS CHGVOL KEYWORD  SBG 05/00
         TM    LBLFLAG,X'04'  ARE WE WRITING A VOL1 LABEL?    SBG 05/00
         BZ    WRITE1A        NO, JUST PROCESS THE WRITE      SBG 05/00
         TM    PARMFLG2,X'01' ARE WE CHANGING OUTPUT VOLSERS? SBG 05/00
         BZ    WRITE1A        NO, JUST PROCESS THE WRITE      SBG 05/00
         MVC   INAREA+4(6),VOLUME1  PUT JCL VOLSER INTO VOL1  SBG 05/00
         MVC   VOLNEW(6),VOLUME1   MOVE IT ALSO TO STAGE AREA SBG 05/00
         MVC   VOLDD(5),DDOUT1
         BAL   R7,VOL1PRT   PRINT MESSAGE THAT VOLSER CHANGED SBG 05/00
WRITE1A  DS    0H                                             SBG 05/00
* ----------------------------------  PROCESS CHGVOL KEYWORD  SBG 05/00
         LA    R2,OUT1        R2=ADDRESS OF CURRENT DCB
         ST    R2,OUTDCBPT    PUT IT IN IOB
         MVI   OUTECB,X'00'   INITIALIZE ECB
         EXCP  OUTIOB         WRITE IT
         WAIT  ECB=OUTECB     WAIT FOR IT
         CLI   OUTECB,X'7F'   WRITE COMPLETE NORMALLY?
         BNE   OUTERR         NO - ERROR
WRITE2   TM    FLAG1,OP2      IS THIS OUTPUT PRESENT?
         BZ    WRITE3         NO
* ----------------------------------  PROCESS CHGVOL KEYWORD  SBG 05/00
         TM    LBLFLAG,X'04'  ARE WE WRITING A VOL1 LABEL?    SBG 05/00
         BZ    WRITE2A        NO, JUST PROCESS THE WRITE      SBG 05/00
         TM    PARMFLG2,X'01' ARE WE CHANGING OUTPUT VOLSERS? SBG 05/00
         BZ    WRITE2A        NO, JUST PROCESS THE WRITE      SBG 05/00
         MVC   INAREA+4(6),VOLUME2  PUT JCL VOLSER INTO VOL1  SBG 05/00
         MVC   VOLNEW(6),VOLUME2   MOVE IT ALSO TO STAGE AREA SBG 05/00
         MVC   VOLDD(5),DDOUT2
         BAL   R7,VOL1PRT   PRINT MESSAGE THAT VOLSER CHANGED SBG 05/00
WRITE2A  DS    0H                                             SBG 05/00
* ----------------------------------  PROCESS CHGVOL KEYWORD  SBG 05/00
         LA    R2,OUT2        R2=ADDRESS OF CURRENT DCB
         ST    R2,OUTDCBPT    PUT IT IN IOB
         MVI   OUTECB,X'00'   INITIALIZE ECB
         EXCP  OUTIOB         WRITE IT
         WAIT  ECB=OUTECB     WAIT FOR IT
         CLI   OUTECB,X'7F'   WRITE COMPLETE NORMALLY?
         BNE   OUTERR         NO - ERROR
WRITE3   TM    FLAG1,OP3      IS THIS OUTPUT PRESENT?
         BZ    WRITE4         NO
* ----------------------------------  PROCESS CHGVOL KEYWORD  SBG 05/00
         TM    LBLFLAG,X'04'  ARE WE WRITING A VOL1 LABEL?    SBG 05/00
         BZ    WRITE3A        NO, JUST PROCESS THE WRITE      SBG 05/00
         TM    PARMFLG2,X'01' ARE WE CHANGING OUTPUT VOLSERS? SBG 05/00
         BZ    WRITE3A        NO, JUST PROCESS THE WRITE      SBG 05/00
         MVC   INAREA+4(6),VOLUME3  PUT JCL VOLSER INTO VOL1  SBG 05/00
         MVC   VOLNEW(6),VOLUME3   MOVE IT ALSO TO STAGE AREA SBG 05/00
         MVC   VOLDD(5),DDOUT3
         BAL   R7,VOL1PRT   PRINT MESSAGE THAT VOLSER CHANGED SBG 05/00
WRITE3A  DS    0H                                             SBG 05/00
* ----------------------------------  PROCESS CHGVOL KEYWORD  SBG 05/00
         LA    R2,OUT3        R2=ADDRESS OF CURRENT DCB
         ST    R2,OUTDCBPT    PUT IT IN IOB
         MVI   OUTECB,X'00'   INITIALIZE ECB
         EXCP  OUTIOB         WRITE IT
         WAIT  ECB=OUTECB     WAIT FOR IT
         CLI   OUTECB,X'7F'   WRITE COMPLETE NORMALLY?
         BNE   OUTERR         NO - ERROR
WRITE4   TM    FLAG1,OP4      IS THIS OUTPUT PRESENT?
         BZ    WRITE5         NO
* ----------------------------------  PROCESS CHGVOL KEYWORD  SBG 05/00
         TM    LBLFLAG,X'04'  ARE WE WRITING A VOL1 LABEL?    SBG 05/00
         BZ    WRITE4A        NO, JUST PROCESS THE WRITE      SBG 05/00
         TM    PARMFLG2,X'01' ARE WE CHANGING OUTPUT VOLSERS? SBG 05/00
         BZ    WRITE4A        NO, JUST PROCESS THE WRITE      SBG 05/00
         MVC   INAREA+4(6),VOLUME4  PUT JCL VOLSER INTO VOL1  SBG 05/00
         MVC   VOLNEW(6),VOLUME4   MOVE IT ALSO TO STAGE AREA SBG 05/00
         MVC   VOLDD(5),DDOUT4
         BAL   R7,VOL1PRT   PRINT MESSAGE THAT VOLSER CHANGED SBG 05/00
WRITE4A  DS    0H                                             SBG 05/00
* ----------------------------------  PROCESS CHGVOL KEYWORD  SBG 05/00
         LA    R2,OUT4        R2=ADDRESS OF CURRENT DCB
         ST    R2,OUTDCBPT    PUT IT IN IOB
         MVI   OUTECB,X'00'   INITIALIZE ECB
         EXCP  OUTIOB         WRITE IT
         WAIT  ECB=OUTECB     WAIT FOR IT
         CLI   OUTECB,X'7F'   WRITE COMPLETE NORMALLY?
         BNE   OUTERR         NO - ERROR
WRITE5   TM    FLAG1,OP5      IS THIS OUTPUT PRESENT?
         BZ    WRITE6         NO
* ----------------------------------  PROCESS CHGVOL KEYWORD  SBG 05/00
         TM    LBLFLAG,X'04'  ARE WE WRITING A VOL1 LABEL?    SBG 05/00
         BZ    WRITE5A        NO, JUST PROCESS THE WRITE      SBG 05/00
         TM    PARMFLG2,X'01' ARE WE CHANGING OUTPUT VOLSERS? SBG 05/00
         BZ    WRITE5A        NO, JUST PROCESS THE WRITE      SBG 05/00
         MVC   INAREA+4(6),VOLUME5  PUT JCL VOLSER INTO VOL1  SBG 05/00
         MVC   VOLNEW(6),VOLUME5   MOVE IT ALSO TO STAGE AREA SBG 05/00
         MVC   VOLDD(5),DDOUT5
         BAL   R7,VOL1PRT   PRINT MESSAGE THAT VOLSER CHANGED SBG 05/00
WRITE5A  DS    0H                                             SBG 05/00
* ----------------------------------  PROCESS CHGVOL KEYWORD  SBG 05/00
         LA    R2,OUT5        R2=ADDRESS OF CURRENT DCB
         ST    R2,OUTDCBPT    PUT IT IN IOB
         MVI   OUTECB,X'00'   INITIALIZE ECB
         EXCP  OUTIOB         WRITE IT
         WAIT  ECB=OUTECB     WAIT FOR IT
         CLI   OUTECB,X'7F'   WRITE COMPLETE NORMALLY?
         BNE   OUTERR         NO - ERROR
WRITE6   TM    FLAG1,OP6      IS THIS OUTPUT PRESENT?
         BZ    WRITE7         NO
* ----------------------------------  PROCESS CHGVOL KEYWORD  SBG 05/00
         TM    LBLFLAG,X'04'  ARE WE WRITING A VOL1 LABEL?    SBG 05/00
         BZ    WRITE6A        NO, JUST PROCESS THE WRITE      SBG 05/00
         TM    PARMFLG2,X'01' ARE WE CHANGING OUTPUT VOLSERS? SBG 05/00
         BZ    WRITE6A        NO, JUST PROCESS THE WRITE      SBG 05/00
         MVC   INAREA+4(6),VOLUME6  PUT JCL VOLSER INTO VOL1  SBG 05/00
         MVC   VOLNEW(6),VOLUME6   MOVE IT ALSO TO STAGE AREA SBG 05/00
         MVC   VOLDD(5),DDOUT6
         BAL   R7,VOL1PRT   PRINT MESSAGE THAT VOLSER CHANGED SBG 05/00
WRITE6A  DS    0H                                             SBG 05/00
* ----------------------------------  PROCESS CHGVOL KEYWORD  SBG 05/00
         LA    R2,OUT6        R2=ADDRESS OF CURRENT DCB
         ST    R2,OUTDCBPT    PUT IT IN IOB
         MVI   OUTECB,X'00'   INITIALIZE ECB
         EXCP  OUTIOB         WRITE IT
         WAIT  ECB=OUTECB     WAIT FOR IT
         CLI   OUTECB,X'7F'   WRITE COMPLETE NORMALLY?
         BNE   OUTERR         NO - ERROR
WRITE7   TM    FLAG1,OP7      IS THIS OUTPUT PRESENT?
         BZ    WRITE8         NO
* ----------------------------------  PROCESS CHGVOL KEYWORD  SBG 05/00
         TM    LBLFLAG,X'04'  ARE WE WRITING A VOL1 LABEL?    SBG 05/00
         BZ    WRITE7A        NO, JUST PROCESS THE WRITE      SBG 05/00
         TM    PARMFLG2,X'01' ARE WE CHANGING OUTPUT VOLSERS? SBG 05/00
         BZ    WRITE7A        NO, JUST PROCESS THE WRITE      SBG 05/00
         MVC   INAREA+4(6),VOLUME7  PUT JCL VOLSER INTO VOL1  SBG 05/00
         MVC   VOLNEW(6),VOLUME7   MOVE IT ALSO TO STAGE AREA SBG 05/00
         MVC   VOLDD(5),DDOUT7
         BAL   R7,VOL1PRT   PRINT MESSAGE THAT VOLSER CHANGED SBG 05/00
WRITE7A  DS    0H                                             SBG 05/00
* ----------------------------------  PROCESS CHGVOL KEYWORD  SBG 05/00
         LA    R2,OUT7        R2=ADDRESS OF CURRENT DCB
         ST    R2,OUTDCBPT    PUT IT IN IOB
         MVI   OUTECB,X'00'   INITIALIZE ECB
         EXCP  OUTIOB         WRITE IT
         WAIT  ECB=OUTECB     WAIT FOR IT
         CLI   OUTECB,X'7F'   WRITE COMPLETE NORMALLY?
         BNE   OUTERR         NO - ERROR
WRITE8   TM    FLAG1,OP8      IS THIS OUTPUT PRESENT?
         BZ    WRITE9         NO
* ----------------------------------  PROCESS CHGVOL KEYWORD  SBG 05/00
         TM    LBLFLAG,X'04'  ARE WE WRITING A VOL1 LABEL?    SBG 05/00
         BZ    WRITE8A        NO, JUST PROCESS THE WRITE      SBG 05/00
         TM    PARMFLG2,X'01' ARE WE CHANGING OUTPUT VOLSERS? SBG 05/00
         BZ    WRITE8A        NO, JUST PROCESS THE WRITE      SBG 05/00
         MVC   INAREA+4(6),VOLUME8  PUT JCL VOLSER INTO VOL1  SBG 05/00
         MVC   VOLNEW(6),VOLUME8   MOVE IT ALSO TO STAGE AREA SBG 05/00
         MVC   VOLDD(5),DDOUT8
         BAL   R7,VOL1PRT   PRINT MESSAGE THAT VOLSER CHANGED SBG 05/00
WRITE8A  DS    0H                                             SBG 05/00
* ----------------------------------  PROCESS CHGVOL KEYWORD  SBG 05/00
         LA    R2,OUT8        R2=ADDRESS OF CURRENT DCB
         ST    R2,OUTDCBPT    PUT IT IN IOB
         MVI   OUTECB,X'00'   INITIALIZE ECB
         EXCP  OUTIOB         WRITE IT
         WAIT  ECB=OUTECB     WAIT FOR IT
         CLI   OUTECB,X'7F'   WRITE COMPLETE NORMALLY?
         BNE   OUTERR         NO - ERROR
WRITE9   TM    FLAG2,OP9      IS THIS OUTPUT PRESENT?
         BZ    WRITE10        NO
* ----------------------------------  PROCESS CHGVOL KEYWORD  SBG 05/00
         TM    LBLFLAG,X'04'  ARE WE WRITING A VOL1 LABEL?    SBG 05/00
         BZ    WRITE9A        NO, JUST PROCESS THE WRITE      SBG 05/00
         TM    PARMFLG2,X'01' ARE WE CHANGING OUTPUT VOLSERS? SBG 05/00
         BZ    WRITE9A        NO, JUST PROCESS THE WRITE      SBG 05/00
         MVC   INAREA+4(6),VOLUME9  PUT JCL VOLSER INTO VOL1  SBG 05/00
         MVC   VOLNEW(6),VOLUME9   MOVE IT ALSO TO STAGE AREA SBG 05/00
         MVC   VOLDD(5),DDOUT9
         BAL   R7,VOL1PRT   PRINT MESSAGE THAT VOLSER CHANGED SBG 05/00
WRITE9A  DS    0H                                             SBG 05/00
* ----------------------------------  PROCESS CHGVOL KEYWORD  SBG 05/00
         LA    R2,OUT9        R2=ADDRESS OF CURRENT DCB
         ST    R2,OUTDCBPT    PUT IT IN IOB
         MVI   OUTECB,X'00'   INITIALIZE ECB
         EXCP  OUTIOB         WRITE IT
         WAIT  ECB=OUTECB     WAIT FOR IT
         CLI   OUTECB,X'7F'   WRITE COMPLETE NORMALLY?
         BNE   OUTERR         NO - ERROR
WRITE10  TM    FLAG2,OP10     IS THIS OUTPUT PRESENT?
         BZ    WRITE11        NO
* ----------------------------------  PROCESS CHGVOL KEYWORD  SBG 05/00
         TM    LBLFLAG,X'04'  ARE WE WRITING A VOL1 LABEL?    SBG 05/00
         BZ    WRITE10A       NO, JUST PROCESS THE WRITE      SBG 05/00
         TM    PARMFLG2,X'01' ARE WE CHANGING OUTPUT VOLSERS? SBG 05/00
         BZ    WRITE10A       NO, JUST PROCESS THE WRITE      SBG 05/00
         MVC   INAREA+4(6),VOLUME10 PUT JCL VOLSER INTO VOL1  SBG 05/00
         MVC   VOLNEW(6),VOLUME10  MOVE IT ALSO TO STAGE AREA SBG 05/00
         MVC   VOLDD(5),DDOUT10
         BAL   R7,VOL1PRT   PRINT MESSAGE THAT VOLSER CHANGED SBG 05/00
WRITE10A DS    0H                                             SBG 05/00
* ----------------------------------  PROCESS CHGVOL KEYWORD  SBG 05/00
         LA    R2,OUT10       R2=ADDRESS OF CURRENT DCB
         ST    R2,OUTDCBPT    PUT IT IN IOB
         MVI   OUTECB,X'00'   INITIALIZE ECB
         EXCP  OUTIOB         WRITE IT
         WAIT  ECB=OUTECB     WAIT FOR IT
         CLI   OUTECB,X'7F'   WRITE COMPLETE NORMALLY?
         BNE   OUTERR         NO - ERROR
WRITE11  TM    FLAG2,OP11     IS THIS OUTPUT PRESENT?
         BZ    WRITE12        NO
* ----------------------------------  PROCESS CHGVOL KEYWORD  SBG 05/00
         TM    LBLFLAG,X'04'  ARE WE WRITING A VOL1 LABEL?    SBG 05/00
         BZ    WRITE11A       NO, JUST PROCESS THE WRITE      SBG 05/00
         TM    PARMFLG2,X'01' ARE WE CHANGING OUTPUT VOLSERS? SBG 05/00
         BZ    WRITE11A       NO, JUST PROCESS THE WRITE      SBG 05/00
         MVC   INAREA+4(6),VOLUME11 PUT JCL VOLSER INTO VOL1  SBG 05/00
         MVC   VOLNEW(6),VOLUME11  MOVE IT ALSO TO STAGE AREA SBG 05/00
         MVC   VOLDD(5),DDOUT11
         BAL   R7,VOL1PRT   PRINT MESSAGE THAT VOLSER CHANGED SBG 05/00
WRITE11A DS    0H                                             SBG 05/00
* ----------------------------------  PROCESS CHGVOL KEYWORD  SBG 05/00
         LA    R2,OUT11       R2=ADDRESS OF CURRENT DCB
         ST    R2,OUTDCBPT    PUT IT IN IOB
         MVI   OUTECB,X'00'   INITIALIZE ECB
         EXCP  OUTIOB         WRITE IT
         WAIT  ECB=OUTECB     WAIT FOR IT
         CLI   OUTECB,X'7F'   WRITE COMPLETE NORMALLY?
         BNE   OUTERR         NO - ERROR
WRITE12  TM    FLAG2,OP12     IS THIS OUTPUT PRESENT?
         BZ    WRITE13        NO
* ----------------------------------  PROCESS CHGVOL KEYWORD  SBG 05/00
         TM    LBLFLAG,X'04'  ARE WE WRITING A VOL1 LABEL?    SBG 05/00
         BZ    WRITE12A       NO, JUST PROCESS THE WRITE      SBG 05/00
         TM    PARMFLG2,X'01' ARE WE CHANGING OUTPUT VOLSERS? SBG 05/00
         BZ    WRITE12A       NO, JUST PROCESS THE WRITE      SBG 05/00
         MVC   INAREA+4(6),VOLUME12 PUT JCL VOLSER INTO VOL1  SBG 05/00
         MVC   VOLNEW(6),VOLUME12  MOVE IT ALSO TO STAGE AREA SBG 05/00
         MVC   VOLDD(5),DDOUT12
         BAL   R7,VOL1PRT   PRINT MESSAGE THAT VOLSER CHANGED SBG 05/00
WRITE12A DS    0H                                             SBG 05/00
* ----------------------------------  PROCESS CHGVOL KEYWORD  SBG 05/00
         LA    R2,OUT12       R2=ADDRESS OF CURRENT DCB
         ST    R2,OUTDCBPT    PUT IT IN IOB
         MVI   OUTECB,X'00'   INITIALIZE ECB
         EXCP  OUTIOB         WRITE IT
         WAIT  ECB=OUTECB     WAIT FOR IT
         CLI   OUTECB,X'7F'   WRITE COMPLETE NORMALLY?
         BNE   OUTERR         NO - ERROR
WRITE13  TM    FLAG2,OP13     IS THIS OUTPUT PRESENT?
         BZ    WRITE14        NO
* ----------------------------------  PROCESS CHGVOL KEYWORD  SBG 05/00
         TM    LBLFLAG,X'04'  ARE WE WRITING A VOL1 LABEL?    SBG 05/00
         BZ    WRITE13A       NO, JUST PROCESS THE WRITE      SBG 05/00
         TM    PARMFLG2,X'01' ARE WE CHANGING OUTPUT VOLSERS? SBG 05/00
         BZ    WRITE13A       NO, JUST PROCESS THE WRITE      SBG 05/00
         MVC   INAREA+4(6),VOLUME13 PUT JCL VOLSER INTO VOL1  SBG 05/00
         MVC   VOLNEW(6),VOLUME13  MOVE IT ALSO TO STAGE AREA SBG 05/00
         MVC   VOLDD(5),DDOUT13
         BAL   R7,VOL1PRT   PRINT MESSAGE THAT VOLSER CHANGED SBG 05/00
WRITE13A DS    0H                                             SBG 05/00
* ----------------------------------  PROCESS CHGVOL KEYWORD  SBG 05/00
         LA    R2,OUT13       R2=ADDRESS OF CURRENT DCB
         ST    R2,OUTDCBPT    PUT IT IN IOB
         MVI   OUTECB,X'00'   INITIALIZE ECB
         EXCP  OUTIOB         WRITE IT
         WAIT  ECB=OUTECB     WAIT FOR IT
         CLI   OUTECB,X'7F'   WRITE COMPLETE NORMALLY?
         BNE   OUTERR         NO - ERROR
WRITE14  TM    FLAG2,OP14     IS THIS OUTPUT PRESENT?
         BZ    WRITE15        NO
* ----------------------------------  PROCESS CHGVOL KEYWORD  SBG 05/00
         TM    LBLFLAG,X'04'  ARE WE WRITING A VOL1 LABEL?    SBG 05/00
         BZ    WRITE14A       NO, JUST PROCESS THE WRITE      SBG 05/00
         TM    PARMFLG2,X'01' ARE WE CHANGING OUTPUT VOLSERS? SBG 05/00
         BZ    WRITE14A       NO, JUST PROCESS THE WRITE      SBG 05/00
         MVC   INAREA+4(6),VOLUME14 PUT JCL VOLSER INTO VOL1  SBG 05/00
         MVC   VOLNEW(6),VOLUME14  MOVE IT ALSO TO STAGE AREA SBG 05/00
         MVC   VOLDD(5),DDOUT14
         BAL   R7,VOL1PRT   PRINT MESSAGE THAT VOLSER CHANGED SBG 05/00
WRITE14A DS    0H                                             SBG 05/00
* ----------------------------------  PROCESS CHGVOL KEYWORD  SBG 05/00
         LA    R2,OUT14       R2=ADDRESS OF CURRENT DCB
         ST    R2,OUTDCBPT    PUT IT IN IOB
         MVI   OUTECB,X'00'   INITIALIZE ECB
         EXCP  OUTIOB         WRITE IT
         WAIT  ECB=OUTECB     WAIT FOR IT
         CLI   OUTECB,X'7F'   WRITE COMPLETE NORMALLY?
         BNE   OUTERR         NO - ERROR
WRITE15  TM    FLAG2,OP15     IS THIS OUTPUT PRESENT?
         BZ    WRITE16        NO
* ----------------------------------  PROCESS CHGVOL KEYWORD  SBG 05/00
         TM    LBLFLAG,X'04'  ARE WE WRITING A VOL1 LABEL?    SBG 05/00
         BZ    WRITE15A       NO, JUST PROCESS THE WRITE      SBG 05/00
         TM    PARMFLG2,X'01' ARE WE CHANGING OUTPUT VOLSERS? SBG 05/00
         BZ    WRITE15A       NO, JUST PROCESS THE WRITE      SBG 05/00
         MVC   INAREA+4(6),VOLUME15 PUT JCL VOLSER INTO VOL1  SBG 05/00
         MVC   VOLNEW(6),VOLUME15  MOVE IT ALSO TO STAGE AREA SBG 05/00
         MVC   VOLDD(5),DDOUT15
         BAL   R7,VOL1PRT   PRINT MESSAGE THAT VOLSER CHANGED SBG 05/00
WRITE15A DS    0H                                             SBG 05/00
* ----------------------------------  PROCESS CHGVOL KEYWORD  SBG 05/00
         LA    R2,OUT15       R2=ADDRESS OF CURRENT DCB
         ST    R2,OUTDCBPT    PUT IT IN IOB
         MVI   OUTECB,X'00'   INITIALIZE ECB
         EXCP  OUTIOB         WRITE IT
         WAIT  ECB=OUTECB     WAIT FOR IT
         CLI   OUTECB,X'7F'   WRITE COMPLETE NORMALLY?
         BNE   OUTERR         NO - ERROR
WRITE16  TM    FLAG2,OP16     IS THIS OUTPUT PRESENT?
         BZ    WRITE17        NO
* ----------------------------------  PROCESS CHGVOL KEYWORD  SBG 05/00
         TM    LBLFLAG,X'04'  ARE WE WRITING A VOL1 LABEL?    SBG 05/00
         BZ    WRITE16A       NO, JUST PROCESS THE WRITE      SBG 05/00
         TM    PARMFLG2,X'01' ARE WE CHANGING OUTPUT VOLSERS? SBG 05/00
         BZ    WRITE16A       NO, JUST PROCESS THE WRITE      SBG 05/00
         MVC   INAREA+4(6),VOLUME16 PUT JCL VOLSER INTO VOL1  SBG 05/00
         MVC   VOLNEW(6),VOLUME16  MOVE IT ALSO TO STAGE AREA SBG 05/00
         MVC   VOLDD(5),DDOUT16
         BAL   R7,VOL1PRT   PRINT MESSAGE THAT VOLSER CHANGED SBG 05/00
WRITE16A DS    0H                                             SBG 05/00
* ----------------------------------  PROCESS CHGVOL KEYWORD  SBG 05/00
         LA    R2,OUT16       R2=ADDRESS OF CURRENT DCB
         ST    R2,OUTDCBPT    PUT IT IN IOB
         MVI   OUTECB,X'00'   INITIALIZE ECB
         EXCP  OUTIOB         WRITE IT
         WAIT  ECB=OUTECB     WAIT FOR IT
         CLI   OUTECB,X'7F'   WRITE COMPLETE NORMALLY?
         BNE   OUTERR         NO - ERROR
WRITE17  TM    FLAG2A,EOV     END OF INPUT?
         BO    ENDINPUT       YES - QUIT
         B     READIN         NO - LOOP
         SPACE 3
*
*  ERROR ON INPUT -- TELL OPERATOR AND ABEND
*
INERR    TM    INCSW+4,X'02'  UNIT CHECK?
         BZ    INERR1         NO - ASSUME DATA CHECK
         MVC   LINE(133),INEQC  SET ERROR MESSAGE
         MVC   INERR3+16(25),INEQC+12  MOVE ERROR MESSAGE TO WTOR
         B     INERR2         CONTINUE
INERR1   MVC   LINE(133),INDCK  SET ERROR MESSAGE
         MVC   INERR3+16(20),INDCK+12  MOVE ERROR MESSAGE TO WTOR
INERR2   PUT   SYSPRINT,LINE  WRITE ERROR MESSAGE
         MVI   INECB,X'00'    RESET ECB
INERR3   WTOR  '                          -- ACKNOWLEDGE',REPLY,       X
               6,INECB,ROUTCDE=(3)
         WAIT  ECB=INECB      WAIT FOR OPERATOR TO SEE THE MESSAGE
*                             WHO CARES WHAT THE REPLY IS
         ABEND 69             QUIT
         SPACE 3
*
*  ERROR ON OUTPUT -- TELL OPERATOR THEN TERMINATE THIS OUTPUT ONLY
*
OUTERR   TM    OUTCSW+4,X'02' UNIT CHECK?
         BZ    OUTERR1        NO - ASSUME DATA CHECK
         MVC   LINE(133),OUTEQC  SET ERROR MESSAGE
         B     OUTERR2        CONTINUE
OUTERR1  MVC   LINE(133),OUTDCK  SET ERROR MESSAGE
OUTERR2  LH    R4,40(,R2)     R4=TIOT OFFSET
         L     R5,16          R5=CVT
         L     R5,0(,R5)      R5=TCB WORDS
         L     R5,4(,R5)      R5=MY TCB
         L     R5,12(,R5)     R5=TIOT
         AR    R4,R5          R4=TIOT ENTRY FOR THIS OUTPUT
         MVC   LINE+35(5),4(R4)  MOVE DDNAME TO MESSAGE
         L     R4,16(,R4)     R4=UCB FOR THIS OUTPUT
         MVC   LINE+47(3),13(R4)  MOVE UNIT ADDRESS TO MESSAGE
         MVC   LINE+59(6),36(R4)  MOVE VOLSER TO MESSAGE
         PUT   SYSPRINT,LINE  WRITE MESSAGE
         MVC   OUTERR4+16(53),LINE+12  MOVE ERROR MESSAGE TO WTOR
OUTERR3  MVI   OUTECB,X'00'   RESET ECB
OUTERR4  WTOR  '                                                       X
               -- REPLY GO TO CONTINUE',REPLY,2,OUTECB,ROUTCDE=(3)
         WAIT  ECB=OUTECB     WAIT FOR OPERATOR TO REPLY
         CLC   REPLY(2),=C'GO'  CORRECT REPLY?
         BNE   OUTERR3        NO - TRY AGAIN
         ST    R2,REWDCBPT    PUT DCB ADDRESS IN REWIND IOB
         EXCP  REWIOB         REWIND TAPE WITH THE ERROR
*                             DON'T BOTHER WAITING FOR REWIND
         OI    FLAG2A,ERR     INDICATE THAT THERE WAS AN ERROR
         LA    R3,OUT1        R3=DCB FOR OUTPUT 1
         CR    R2,R3          WAS THIS THE DCB WITH THE ERROR?
         BNE   OUTERR5        NO
         NI    FLAG1,FF-OP1   SHOW THIS OUTPUT NOT PRESENT ANY MORE
         B     WRITE2         CONTINUE WITH OTHER OUTPUT
OUTERR5  LA    R3,OUT2        R3=DCB FOR OUTPUT 2
         CR    R2,R3          WAS THIS THE DCB WITH THE ERROR?
         BNE   OUTERR6        NO
         NI    FLAG1,FF-OP2   SHOW THIS OUTPUT NOT PRESENT ANY MORE
         B     WRITE3         CONTINUE WITH OTHER OUTPUT
OUTERR6  LA    R3,OUT3        R3=DCB FOR OUTPUT 3
         CR    R2,R3          WAS THIS THE DCB WITH THE ERROR?
         BNE   OUTERR7        NO
         NI    FLAG1,FF-OP3   SHOW THIS OUTPUT NOT PRESENT ANY MORE
         B     WRITE4         CONTINUE WITH OTHER OUTPUT
OUTERR7  LA    R3,OUT4        R3=DCB FOR OUTPUT 4
         CR    R2,R3          WAS THIS THE DCB WITH THE ERROR?
         BNE   OUTERR8        NO
         NI    FLAG1,FF-OP4   SHOW THIS OUTPUT NOT PRESENT ANY MORE
         B     WRITE5         CONTINUE WITH OTHER OUTPUT
OUTERR8  LA    R3,OUT5        R3=DCB FOR OUTPUT 5
         CR    R2,R3          WAS THIS THE DCB WITH THE ERROR?
         BNE   OUTERR9        NO
         NI    FLAG1,FF-OP5   SHOW THIS OUTPUT NOT PRESENT ANY MORE
         B     WRITE6         CONTINUE WITH OTHER OUTPUT
OUTERR9  LA    R3,OUT6        R3=DCB FOR OUTPUT 6
         CR    R2,R3          WAS THIS THE DCB WITH THE ERROR?
         BNE   OUTERR10       NO
         NI    FLAG1,FF-OP6   SHOW THIS OUTPUT NOT PRESENT ANY MORE
         B     WRITE7         CONTINUE WITH OTHER OUTPUT
OUTERR10 LA    R3,OUT7        R3=DCB FOR OUTPUT 7
         CR    R2,R3          WAS THIS THE DCB WITH THE ERROR?
         BNE   OUTERR11       NO
         NI    FLAG1,FF-OP7   SHOW THIS OUTPUT NOT PRESENT ANY MORE
         B     WRITE8         CONTINUE WITH OTHER OUTPUT
OUTERR11 LA    R3,OUT8        R3=DCB FOR OUTPUT 8
         CR    R2,R3          WAS THIS THE DCB WITH THE ERROR?
         BNE   OUTERR12       NO
         NI    FLAG1,FF-OP8   SHOW THIS OUTPUT NOT PRESENT ANY MORE
         B     WRITE9         CONTINUE WITH OTHER OUTPUT
OUTERR12 LA    R3,OUT9        R3=DCB FOR OUTPUT 9
         CR    R2,R3          WAS THIS THE DCB WITH THE ERROR?
         BNE   OUTERR13       NO
         NI    FLAG2,FF-OP9   SHOW THIS OUTPUT NOT PRESENT ANY MORE
         B     WRITE10        CONTINUE WITH OTHER OUTPUT
OUTERR13 LA    R3,OUT10       R3=DCB FOR OUTPUT 10
         CR    R2,R3          WAS THIS THE DCB WITH THE ERROR?
         BNE   OUTERR14       NO
         NI    FLAG2,FF-OP10  SHOW THIS OUTPUT NOT PRESENT ANY MORE
         B     WRITE11        CONTINUE WITH OTHER OUTPUT
OUTERR14 LA    R3,OUT11       R3=DCB FOR OUTPUT 11
         CR    R2,R3          WAS THIS THE DCB WITH THE ERROR?
         BNE   OUTERR15       NO
         NI    FLAG2,FF-OP11  SHOW THIS OUTPUT NOT PRESENT ANY MORE
         B     WRITE12        CONTINUE WITH OTHER OUTPUT
OUTERR15 LA    R3,OUT12       R3=DCB FOR OUTPUT 12
         CR    R2,R3          WAS THIS THE DCB WITH THE ERROR?
         BNE   OUTERR16       NO
         NI    FLAG2,FF-OP12  SHOW THIS OUTPUT NOT PRESENT ANY MORE
         B     WRITE13        CONTINUE WITH OTHER OUTPUT
OUTERR16 LA    R3,OUT13       R3=DCB FOR OUTPUT 13
         CR    R2,R3          WAS THIS THE DCB WITH THE ERROR?
         BNE   OUTERR17       NO
         NI    FLAG2,FF-OP13  SHOW THIS OUTPUT NOT PRESENT ANY MORE
         B     WRITE14        CONTINUE WITH OTHER OUTPUT
OUTERR17 LA    R3,OUT14       R3=DCB FOR OUTPUT 14
         CR    R2,R3          WAS THIS THE DCB WITH THE ERROR?
         BNE   OUTERR18       NO
         NI    FLAG2,FF-OP14  SHOW THIS OUTPUT NOT PRESENT ANY MORE
         B     WRITE15        CONTINUE WITH OTHER OUTPUT
OUTERR18 LA    R3,OUT15       R3=DCB FOR OUTPUT 15
         CR    R2,R3          WAS THIS THE DCB WITH THE ERROR?
         BNE   OUTERR19       NO
         NI    FLAG2,FF-OP15  SHOW THIS OUTPUT NOT PRESENT ANY MORE
         B     WRITE16        CONTINUE WITH OTHER OUTPUT
*                             THEN IT MUST BE OUTPUT 16
OUTERR19 NI    FLAG2,FF-OP16  SHOW THIS OUTPUT NOT PRESENT ANY MORE
         B     WRITE17        CONTINUE WITH OTHER OUTPUT
         SPACE 3
*
*  END OF INPUT -- FINISH UP
*
ENDINPUT DS    0H
* --- READ ONLY CODE ---------------------------------------- SBG 06/00
         TM    PARMFLG2,X'08'   IS THIS RUN READ-ONLY?        SBG 06/00
         BZ    ENDIN0     NO. USE WRITE SUCCESS MESSAGE       SBG 06/00
         MVC   LINE(133),SUCCESSR    MOVE READ-ONLY MESSAGE   SBG 06/00
         B     ENDIN16          WRITE OUT MESSAGE             SBG 06/00
* --- READ ONLY CODE ---------------------------------------- SBG 06/00
ENDIN0   MVC   LINE(133),SUCCESS  MOVE MESSAGE TO LINE
         TM    FLAG2,OP16     OUTPUT 16 COMPLETED?
         BO    ENDIN1         YES - CONTINUE
         MVC   LINE+126(5),LINE+131 NO - DON'T SHOW IT
ENDIN1   TM    FLAG2,OP15     OUTPUT 15 COMPLETED?
         BO    ENDIN2         YES - CONTINUE
         MVC   LINE+119(12),LINE+126  NO - DON'T SHOW IT
ENDIN2   TM    FLAG2,OP14     OUTPUT 14 COMPLETED?
         BO    ENDIN3         YES - CONTINUE
         MVC   LINE+112(19),LINE+119  NO - DON'T SHOW IT
ENDIN3   TM    FLAG2,OP13     OUTPUT 13 COMPLETED?
         BO    ENDIN4         YES - CONTINUE
         MVC   LINE+105(26),LINE+112  NO - DON'T SHOW IT
ENDIN4   TM    FLAG2,OP12     OUTPUT 12 COMPLETED?
         BO    ENDIN5         YES - CONTINUE
         MVC   LINE+98(33),LINE+105  NO - DON'T SHOW IT
ENDIN5   TM    FLAG2,OP11     OUTPUT 11 COMPLETED?
         BO    ENDIN6         YES - CONTINUE
         MVC   LINE+91(40),LINE+98  NO - DON'T SHOW IT
ENDIN6   TM    FLAG2,OP10     OUTPUT 10 COMPLETED?
         BO    ENDIN7         YES - CONTINUE
         MVC   LINE+84(47),LINE+91  NO - DON'T SHOW IT
ENDIN7   TM    FLAG2,OP9      OUTPUT 9 COMPLETED?
         BO    ENDIN8         YES - CONTINUE
         MVC   LINE+78(53),LINE+84  NO - DON'T SHOW IT
ENDIN8   TM    FLAG1,OP8      OUTPUT 8 COMPLETED?
         BO    ENDIN9         YES - CONTINUE
         MVC   LINE+72(59),LINE+78  NO - DON'T SHOW IT
ENDIN9   TM    FLAG1,OP7      OUTPUT 7 COMPLETED?
         BO    ENDIN10        YES - CONTINUE
         MVC   LINE+66(65),LINE+72  NO - DON'T SHOW IT
ENDIN10  TM    FLAG1,OP6      OUTPUT 6 COMPLETED?
         BO    ENDIN11        YES - CONTINUE
         MVC   LINE+60(71),LINE+66  NO - DON'T SHOW IT
ENDIN11  TM    FLAG1,OP5      OUTPUT 5 COMPLETED?
         BO    ENDIN12        YES - CONTINUE
         MVC   LINE+54(77),LINE+60  NO - DON'T SHOW IT
ENDIN12  TM    FLAG1,OP4      OUTPUT 4 COMPLETED?
         BO    ENDIN13        YES - CONTINUE
         MVC   LINE+48(83),LINE+54  NO - DON'T SHOW IT
ENDIN13  TM    FLAG1,OP3      OUTPUT 3 COMPLETED?
         BO    ENDIN14        YES - CONTINUE
         MVC   LINE+42(89),LINE+48  NO - DON'T SHOW IT
ENDIN14  TM    FLAG1,OP2      OUTPUT 2 COMPLETED?
         BO    ENDIN15        YES - CONTINUE
         MVC   LINE+36(95),LINE+42  NO - DON'T SHOW IT
ENDIN15  TM    FLAG1,OP1      OUTPUT 1 COMPLETED?
         BO    ENDIN16        YES - CONTINUE
         MVC   LINE+30(101),LINE+36  NO - DON'T SHOW IT
ENDIN16  PUT   SYSPRINT,LINE  WRITE IT
         SPACE 3
*
*  CLOSE ALL FILES
*
         CLOSE (IN,,SYSPRINT)
* --- READ ONLY CODE ---------------------------------------- SBG 06/00
         TM    PARMFLG2,X'08'   IS THIS RUN READ-ONLY?        SBG 06/00
         BO    THEEND     YES. ONLY CLOSE INPUT AND SYSPRINT. SBG 06/00
* --- READ ONLY CODE ---------------------------------------- SBG 06/00
         TM    FLAG3,OP1      OUTPUT 1 OPEN?
         BZ    CLOSE1         NO
         CLOSE (OUT1)         CLOSE OUTPUT 1
CLOSE1   TM    FLAG3,OP2      OUTPUT 2 OPEN?
         BZ    CLOSE2         NO
         CLOSE (OUT2)         CLOSE OUTPUT 2
CLOSE2   TM    FLAG3,OP3      OUTPUT 3 OPEN?
         BZ    CLOSE3         NO
         CLOSE (OUT3)         CLOSE OUTPUT 3
CLOSE3   TM    FLAG3,OP4      OUTPUT 4 OPEN?
         BZ    CLOSE4         NO
         CLOSE (OUT4)         CLOSE OUTPUT 4
CLOSE4   TM    FLAG3,OP5      OUTPUT 5 OPEN?
         BZ    CLOSE5         NO
         CLOSE (OUT5)         CLOSE OUTPUT 5
CLOSE5   TM    FLAG3,OP6      OUTPUT 6 OPEN?
         BZ    CLOSE6         NO
         CLOSE (OUT6)         CLOSE OUTPUT 6
CLOSE6   TM    FLAG3,OP7      OUTPUT 7 OPEN?
         BZ    CLOSE7         NO
         CLOSE (OUT7)         CLOSE OUTPUT 7
CLOSE7   TM    FLAG3,OP8      OUTPUT 8 OPEN?
         BZ    CLOSE8         NO
         CLOSE (OUT8)         CLOSE OUTPUT 8
CLOSE8   TM    FLAG4,OP9      OUTPUT 9 OPEN?
         BZ    CLOSE9         NO
         CLOSE (OUT9)         CLOSE OUTPUT 9
CLOSE9   TM    FLAG4,OP10     OUTPUT 10 OPEN?
         BZ    CLOSE10        NO
         CLOSE (OUT10)        CLOSE OUTPUT 10
CLOSE10  TM    FLAG4,OP11     OUTPUT 11 OPEN?
         BZ    CLOSE11        NO
         CLOSE (OUT11)        CLOSE OUTPUT 11
CLOSE11  TM    FLAG4,OP12     OUTPUT 12 OPEN?
         BZ    CLOSE12        NO
         CLOSE (OUT12)        CLOSE OUTPUT 12
CLOSE12  TM    FLAG4,OP13     OUTPUT 13 OPEN?
         BZ    CLOSE13        NO
         CLOSE (OUT13)        CLOSE OUTPUT 13
CLOSE13  TM    FLAG4,OP14     OUTPUT 14 OPEN?
         BZ    CLOSE14        NO
         CLOSE (OUT14)        CLOSE OUTPUT 14
CLOSE14  TM    FLAG4,OP15     OUTPUT 15 OPEN?
         BZ    CLOSE15        NO
         CLOSE (OUT15)        CLOSE OUTPUT 15
CLOSE15  TM    FLAG4,OP16     OUTPUT 16 OPEN?
         BZ    THEEND         NO
         CLOSE (OUT16)        CLOSE OUTPUT 16
         SPACE 3
*
*  THE END
*
THEEND   EQU   *
         MVC   WTOCBT+16(41),FILEDONE
WTOCBT   WTO   'CBT990                                              '
         SR    R15,R15        ZERO RETURN CODE
         TM    FLAG2A,ERR     WAS THERE AN ERROR?
         BZ    THEEND1        NO
         LA    R15,16         SET RETURN CODE
THEEND1  TERME RMK=NO
         EJECT
* - - - - - - - -   SUBROUTINES   - - - - - - - - - - - - - - SBG 04/00
*    BAL REGISTER IS R6.                                      SBG 04/00
* --------------------------------------------------------- * SBG 04/00
LABELCHK DS    0H         CHECK FOR PRESENCE OF TAPE LABELS   SBG 04/00
*                         AND SET LABEL FLAGS, ACCORDINGLY,   SBG 04/00
*                         IN THE LBLFLAG BYTE.                SBG 04/00
*              X'01'    HDR1 HAS BEEN SEEN                    SBG 03/00
*              X'02'    HDR2 HAS BEEN SEEN                    SBG 03/00
*              X'04'    VOL1 HAS BEEN SEEN                    SBG 03/00
*              X'08'    HDR1 IS FROM AN INITTED TAPE          SBG 03/00
*              X'10'    EOF1 HAS BEEN SEEN                    SBG 04/00
*              X'20'    EOF2 HAS BEEN SEEN                    SBG 04/00
*              X'40'    EOV1 HAS BEEN SEEN                    SBG 04/00
*              X'80'    EOV2 HAS BEEN SEEN                    SBG 04/00
         CLC   INAREA(4),=C'VOL1'   IS THIS A VOL1 ?          SBG 04/00
         BE    CVOL1                PROCESS THE VOL1          SBG 04/00
         CLC   INAREA(4),=C'HDR1'   IS THIS A HDR1 ?          SBG 04/00
         BE    CHDR1                PROCESS HDR1              SBG 04/00
         CLC   INAREA(4),=C'HDR2'   THIS A HDR2 ?             SBG 04/00
         BE    CHDR2                PROCESS HDR2              SBG 04/00
         CLC   INAREA(4),=C'EOF1'   THIS AN EOF1 ?            SBG 04/00
         BE    CEOF1                PROCESS EOF1              SBG 04/00
         CLC   INAREA(4),=C'EOF2'   THIS AN EOF2 ?            SBG 04/00
         BE    CEOF2                PROCESS EOF2              SBG 04/00
         CLC   INAREA(4),=C'EOV1'   THIS AN EOV1 ?            SBG 04/00
         BE    CEOV1                PROCESS EOV1              SBG 04/00
         CLC   INAREA(4),=C'EOV2'   THIS AN EOV2 ?            SBG 04/00
         BE    CEOV2                PROCESS EOV2              SBG 04/00
         B     NOTLABEL       80 BYTE RECORD IS NOT IBM SL    SBG 04/00
CVOL1    DS    0H    -------- PROCESS VOL1 LABEL -----------  SBG 05/00
         MVC   INVOLUME(6),INAREA+4   SAVE SL VOLSER IF THERE SBG 03/00
         MVC   VOLORIG(6),INAREA+4   SAVE SL VOLSER IF THERE  SBG 03/00
         OI    LBLFLAG,X'04'  YES. FLAG VOL1 SEEN.            SBG 03/00
         TM    PARMFLG2,X'02'  VOL1-FOUND OPTION OFF?         SBG 05/00
         BZ    CVOL1NPR        YES.  DON'T REPORT VOL1 FOUND  SBG 05/00
         MVI   LINE-1,C' '                                    SBG 03/00
         MVC   LINE,LINE-1    CLEAR PRINT LINE                SBG 03/00
         MVC   VOL1SER(6),LINE       CLEAR FIELD TO BLANKS    SBG 04/00
         MVC   VOL1SER(6),INVOLUME   REPORT VOLUME SERIAL     SBG 03/00
         MVC   VOL1OWNR(10),LINE     CLEAR FIELD TO BLANKS    SBG 04/00
         MVC   VOL1OWNR(10),INAREA+41   OWNER INFORMATION     SBG 04/00
         MVC   LINE(70),VOL1LBL   INDICATE THAT VOL1 FOUND    SBG 04/00
         PUT   SYSPRINT,LINE  WRITE MESSAGE WITH VOLSER       SBG 03/00
CVOL1NPR B     LABCHEND                                       SBG 04/00
CHDR1    DS    0H                                             SBG 04/00
         NI    LBLFLAG,X'0F'  TURN OFF EOV, EOF FLAGS         SBG 07/00
         OI    LBLFLAG,X'01'  YES. FLAG HDR1 SEEN.            SBG 03/00
         CLC   INAREA+4(23),ZERO23   WAS TAPE JUST INITTED?   SBG 03/00
         BNE   CHDR1A         NO. THIS IS A HDR1 FOR DATASET  SBG 03/00
         OI    LBLFLAG,X'08'  YES. ZERO DSN AND VOLSER HERE   SBG 03/00
         B     CHDR1Z         DON'T PRINT LABEL INFO          SBG 05/00
CHDR1A   TM    PARMFLG1,X'02' DO WE PRINT LABELS?             SBG 05/00
         BZ    CHDR1Z         NO. DON'T PRINT.                SBG 05/00
         BAL   R7,PRTXXX1     PRINT LABEL INFO                SBG 05/00
CHDR1Z   B     LABCHEND                                       SBG 04/00
CHDR2    DS    0H                                             SBG 04/00
         NI    LBLFLAG,X'0F'  TURN OFF EOV, EOF FLAGS IF HDR2 SBG 07/00
         OI    LBLFLAG,X'02'  YES. FLAG HDR2 SEEN.            SBG 03/00
         TM    PARMFLG1,X'04'   DO WE PRINT LABELS?           SBG 05/00
         BZ    CHDR2Z           NO.                           SBG 05/00
         BAL   R7,PRTXXX2     YES. PRINT.                     SBG 05/00
CHDR2Z   B     LABCHEND                                       SBG 04/00
CEOF1    DS    0H                                             SBG 04/00
         NI    LBLFLAG,X'F8'  TURN OFF HDR FLAGS IF EOF1      SBG 04/00
         OI    LBLFLAG,X'10'  YES. FLAG EOF1 SEEN.            SBG 03/00
         TM    PARMFLG1,X'08'   DO WE PRINT LABELS?           SBG 05/00
         BZ    CEOF1Z           NO.                           SBG 05/00
         BAL   R7,PRTXXX1     YES. PRINT.                     SBG 05/00
CEOF1Z   B     LABCHEND                                       SBG 04/00
CEOF2    DS    0H                                             SBG 04/00
         NI    LBLFLAG,X'F8'  TURN OFF HDR FLAGS IF EOF2      SBG 04/00
         OI    LBLFLAG,X'20'  YES. FLAG EOF2 SEEN.            SBG 03/00
         TM    PARMFLG1,X'10'   DO WE PRINT LABELS?           SBG 05/00
         BZ    CEOF2Z           NO.                           SBG 05/00
         BAL   R7,PRTXXX2     YES. PRINT.                     SBG 05/00
CEOF2Z   B     LABCHEND                                       SBG 04/00
CEOV1    DS    0H                                             SBG 04/00
         NI    LBLFLAG,X'F8'  TURN OFF HDR FLAGS IF EOV1      SBG 04/00
         TM    PARMFLG2,X'04' CHANGE EOV TO EOF?              SBG 06/00
         BZ    CEOVN1         NO, PROCESS ORDINARILY          SBG 06/00
         OI    LBLFLAG,X'10'  INSTEAD, FLAG EOF1 SEEN         SBG 03/00
         MVC   INAREA(3),=C'EOF'  PLUG IN FOR LABEL COPY      SBG 06/00
         MVI   LINE-1,C' '                                    SBG 03/00
         MVC   LINE,LINE-1    CLEAR PRINT LINE                SBG 03/00
         MVC   LINE(130),EOVCHG   MOVE IN MESSAGE             SBG 06/00
         PUT   SYSPRINT,LINE  MESSAGE THAT WE ALTERED EOV.    SBG 06/00
         B     CEOVY1                                         SBG 06/00
CEOVN1   OI    LBLFLAG,X'40'  YES. FLAG EOV1 SEEN.            SBG 03/00
CEOVY1   TM    PARMFLG1,X'40'   DO WE PRINT LABELS?           SBG 05/00
         BZ    CEOV1Z           NO.                           SBG 05/00
         BAL   R7,PRTXXX1     YES. PRINT.                     SBG 05/00
CEOV1Z   B     LABCHEND                                       SBG 04/00
CEOV2    DS    0H                                             SBG 04/00
         NI    LBLFLAG,X'F8'  TURN OFF HDR FLAGS IF EOV2      SBG 04/00
         TM    PARMFLG2,X'04' CHANGE EOV TO EOF?              SBG 06/00
         BZ    CEOVN2         NO, PROCESS ORDINARILY          SBG 06/00
         OI    LBLFLAG,X'20'  INSTEAD, FLAG EOF2 SEEN         SBG 03/00
         MVC   INAREA(3),=C'EOF'  PLUG IN FOR LABEL COPY      SBG 06/00
         B     CEOVY2                                         SBG 06/00
CEOVN2   OI    LBLFLAG,X'80'  YES. FLAG EOV2 SEEN.            SBG 03/00
CEOVY2   TM    PARMFLG1,X'80'   DO WE PRINT LABELS?           SBG 05/00
         BZ    CEOV2Z           NO.                           SBG 05/00
         BAL   R7,PRTXXX2     YES. PRINT.                     SBG 05/00
CEOV2Z   B     LABCHEND                                       SBG 04/00
NOTLABEL DS    0H                                             SBG 04/00
LABCHEND BR    R6                                             SBG 04/00
* --------------------------------------------------------- * SBG 04/00
*    BAL REGISTER IS R6.                                      SBG 04/00
* --------------------------------------------------------- * SBG 04/00
PARMCHK  DS    0H         CHECK PARMS AND FLAG THEIR          SBG 04/00
*                         PRESENCE OR ABSENCE.                SBG 04/00
*            (PERMISSIBLE PARMS ARE CODED IN PARMTABL.)       SBG 04/00
PARMINIT L     R1,0(,R1)      GET PARM FROM JCL               SBG 03/00
         LH    R5,0(,R1)      SAVE PARM LENGTH                SBG 04/00
         ST    R5,PARMSLEN    STORE FULLWORD VALUE            SBG 04/00
         LA    R7,PARMTABL    LOAD START OF PARM TABLE        SBG 04/00
         LA    R4,2(,R1)      POINT TO START OF JCL PARMS     SBG 04/00
         ST    R4,PARMSTRT    PUT ADDRESS INTO PGM STORAGE    SBG 05/00
         LA    R1,0           USE R1 TO MEASURE LENGTH READ   SBG 04/00
* ----------------------------------------------------------- SBG 05/00
*   ONE PASS THRU PARM TABLE TO SET DEFAULT ENTRIES BEFORE    SBG 05/00
*   LOOKING AT JCL OVERRIDES TO THE PARMS.                    SBG 05/00
* ----------------------------------------------------------- SBG 05/00
PARMDFLT DS    0H             SET DEFAULTS FROM PARM TABLE    SBG 05/00
         CLI   0(R7),X'FF'    END OF PARM TABLE?              SBG 04/00
         BE    PARMDEND       YES. DEFAULTS SET. CHECK PARMS. SBG 04/00
         TM    1(R7),X'10'    IS THIS ENTRY A DEFAULT?        SBG 05/00
         BO    PARMDSET       YES, GO SET IT.                 SBG 05/00
         LA    R7,PTELEN(,R7)  NO. BOP TO TEST NEXT ENTRY,    SBG 04/00
         B     PARMDFLT       AND LOOP UNTIL TABLE ENDS.      SBG 05/00
PARMDSET TM    1(R7),X'01'    DO WE TURN THIS FLAG OFF?       SBG 05/00
         BO    PARMDOFF       YES. FLAGS ARE TURNED OFF..     SBG 05/00
         OC    PARMFLGS(3),PTEFLG(R7)  NO. FLAG IS TURNED ON. SBG 05/00
         LA    R7,PTELEN(,R7)  NO. BOP TO TEST NEXT ENTRY,    SBG 04/00
         B     PARMDFLT       CHECK MORE TABLE ENTRIES.       SBG 05/00
PARMDOFF MVC   PARMFWRK(3),PTEFLG(R7)    PARM BYTES TO WRK    SBG 05/00
         XC    PARMFWRK(3),EFFS      FLIP PARM BYTES          SBG 05/00
         NC    PARMFLGS(3),PARMFWRK    TURN PARM BYTE(S) OFF  SBG 05/00
         LA    R7,PTELEN(,R7)  NO. BOP TO TEST NEXT ENTRY,    SBG 04/00
         B     PARMDFLT   LOOP BACK TILL ONE PASS THRU TABLE  SBG 05/00
PARMDEND LA    R1,0           INITIALIZE COUNTING REGISTER    SBG 05/00
         LA    R7,PARMTABL    LOAD START OF PARM TABLE        SBG 04/00
         L     R4,PARMSTRT    GET ADDRESS FROM PGM STORAGE    SBG 05/00
* ----------------------------------------------------------- SBG 05/00
*   NOW CHECK EACH CHARACTER IN JCL, TO SEE IF IT'S A PARM.   SBG 05/00
* ----------------------------------------------------------- SBG 05/00
PARMLOOP C     R1,PARMSLEN    PAST THE END OF PARMS?          SBG 04/00
         BNL   PARMFIN        YES - GET OUT                   SBG 04/00
         LA    R7,PARMTABL   POINT BACK TO BEGINNING OF TABLE SBG 05/00
         AP    PARMLCNT,=P'1'  COUNT PARM LOOPS FOR DEBUGGING SBG 05/00
BOPPTBL  CLI   0(R7),X'FF'    END OF PARM TABLE?              SBG 04/00
         BE    PRMNFND        YES. BUMP AND TRY AGAIN.        SBG 04/00
         SR    R5,R5          CLEAR WORK REGISTER FOR REUSE   SBG 05/00
         IC    R5,0(,R7)      LOAD LENGTH TO BE COMPARED      SBG 04/00
         BCTR  R5,0           ONE LESS FOR EXECUTE            SBG 04/00
         EX    R5,CMPPARM     COMPARE TABLE ENTRY TO PARM LOC SBG 04/00
         BE    PRMFOUND       PARM FOUND AT THIS LOCATION     SBG 04/00
         LA    R7,PTELEN(,R7)  NEXT TABLE ENTRY               SBG 04/00
         B     BOPPTBL        INNER LOOP                      SBG 04/00
PRMNFND  LA    R4,1(,R4)      FORWARD IN JCL PARMS            SBG 04/00
         LA    R1,1(,R1)      MEASURE DISTANCE TRAVELED       SBG 04/00
         B     PARMLOOP       TRY AGAIN                       SBG 04/00
PRMFOUND MVC   PARMTENT(PTELEN),0(R7)  DUMP TABLE ENTRY FOUND SBG 05/00
         TM    1(R7),X'01'         PARM ON OR OFF?            SBG 05/00
         BO    PARMOFF             OFF                        SBG 05/00
         OC    PARMFLGS(3),PTEFLG(R7)  ON.FLAG THE PARM FOUND SBG 05/00
         B     PARMGO              AND GO ON                  SBG 05/00
PARMOFF  MVC   PARMFWRK(3),PTEFLG(R7)    PARM BYTES TO WRK    SBG 05/00
         XC    PARMFWRK(3),EFFS      FLIP PARM BITS           SBG 05/00
         NC    PARMFLGS(3),PARMFWRK    TURN PARM BIT(S) OFF   SBG 05/00
PARMGO   AP    PARMHITS,=P'1'    COUNT PARM HITS              SBG 05/00
         IC    R5,0(,R7)      LENGTH OF PARM, FROM THE TABLE  SBG 04/00
         LA    R1,0(R5,R1)    INCREMENT COUNT BY LENGTH       SBG 04/00
         LA    R4,0(R5,R4)    SAME FOR SEARCH POSITION        SBG 04/00
         B     PARMLOOP       LOOK FOR MORE PARMS             SBG 04/00
PARMFIN  ST    R1,PRMCHRCT    HOW MANY CHARS WE SEARCHED --   SBG 04/00
*                             COUNT FOR DEBUGGING             SBG 05/00
PRMCHEND BR    R6                                             SBG 04/00
CMPPARM  CLC   0(0,R4),2(R7)    ** EXECUTED **                SBG 04/00
* --------------------------------------------------------- * SBG 05/00
*    BAL REGISTER IS R7.                                      SBG 05/00
* --------------------------------------------------------- * SBG 05/00
VOL1PRT  DS    0H         PRINT MESSAGE THAT VOL1 LABEL WAS   SBG 04/00
*                         ALTERED.
         MVI   LINE-1,C' '
         MVC   LINE,LINE-1           CLEAR OUTPUT LINE
         MVC   VOLALT+13(6),LINE     CLEAR OLDVOL FIELD IN MSG
         MVC   VOLALT+35(6),LINE     CLEAR NEWVOL FIELD IN MSG
         MVC   VOLALT+13(6),VOLORIG  MOVE OLD VOL TO MSG
         MVC   VOLALT+35(6),VOLNEW   MOVE NEW VOL TO MSG
         MVC   VOLDDN(5),LINE        CLEAR FIELD
         MVC   VOLDDN(5),VOLDD       MOVE DD NAME IN
         MVC   LINE(130),VOLALT      MOVE MESSAGE TO PRT
         PUT   SYSPRINT,LINE         WRITE MESSAGE
         BR    R7                    RETURN TO CALLER
* --------------------------------------------------------- * SBG 04/00
*    BAL REGISTER IS R7.                                      SBG 04/00
* --------------------------------------------------------- * SBG 04/00
PRTXXX1  DS    0H                                             SBG 05/00
         MVI   LINE-1,C' '                                    SBG 05/00
         MVC   LINE,LINE-1    CLEAR PRINT LINE                SBG 05/00
         MVC   XXX1LBL+1(4),INAREA  MOVE LABEL TYPE TO MESSAG SBG 05/00
         MVC   XXX1VOL(6),LINE       CLEAR FIELD TO BLANKS    SBG 05/00
         MVC   XXX1VOL(6),INAREA+21  REPORT VOLUME SERIAL     SBG 05/00
         MVC   XXX1DSN(17),LINE      CLEAR FIELD TO BLANKS    SBG 05/00
         MVC   XXX1DSN(17),INAREA+4  DATASET NAME             SBG 05/00
         MVC   XXX1DSQ(4),LINE       CLEAR FIELD TO BLANKS    SBG 05/00
         MVC   XXX1DSQ(4),INAREA+31  DATASET SEQUENCE NUMBER  SBG 05/00
         MVC   XXX1VSQ(4),LINE       CLEAR FIELD TO BLANKS    SBG 05/00
         MVC   XXX1VSQ(4),INAREA+27  VOLUME SEQUENCE NUMBER   SBG 05/00
         MVC   XXX1BLC(6),LINE       CLEAR FIELD TO BLANKS    SBG 05/00
         MVC   XXX1BLC(6),INAREA+54  BLOCK COUNT - 6 DIGITS   SBG 05/00
         MVC   XXX1CRD(6),LINE       CLEAR FIELD TO BLANKS    SBG 05/00
         MVC   XXX1CRD(6),INAREA+41  CREATE DATE - 6 DIGITS   SBG 05/00
         MVC   XXX1EXD(6),LINE       CLEAR FIELD TO BLANKS    SBG 05/00
         MVC   XXX1EXD(6),INAREA+47  EXPIRE DATE - 6 DIGITS   SBG 05/00
         MVC   LINE(132),XXX1LBL  MOVE INFO TO PRINT LINE     SBG 05/00
         PUT   SYSPRINT,LINE  WRITE MESSAGE WITH VOLSER       SBG 05/00
PRTXXX1R BR    R7                                             SBG 05/00
* --------------------------------------------------------- * SBG 04/00
*    BAL REGISTER IS R7.                                      SBG 04/00
* --------------------------------------------------------- * SBG 04/00
PRTXXX2  DS    0H                                             SBG 05/00
         MVI   LINE-1,C' '                                    SBG 05/00
         MVC   LINE,LINE-1    CLEAR PRINT LINE                SBG 05/00
         MVC   XXX2LBL+1(4),INAREA  MOVE LABEL TYPE TO MESSAG SBG 05/00
         MVC   XXX2RFM(1),LINE       CLEAR FIELD TO BLANKS    SBG 05/00
         MVC   XXX2RFM(1),INAREA+4   RECFM                    SBG 05/00
         MVC   XXX2BKL(5),LINE       CLEAR FIELD TO BLANKS    SBG 05/00
         MVC   XXX2BKL(5),INAREA+5   BLOCK LENGTH             SBG 05/00
         MVC   XXX2RCL(5),LINE       CLEAR FIELD TO BLANKS    SBG 05/00
         MVC   XXX2RCL(5),INAREA+10  RECORD LENGTH            SBG 05/00
         MVC   XXX2TDN(1),LINE       CLEAR FIELD TO BLANKS    SBG 05/00
         MVC   XXX2TDN(1),INAREA+15  TAPE DENSITY             SBG 05/00
         MVC   XXX2JST(17),LINE      CLEAR FIELD TO BLANKS    SBG 05/00
         MVC   XXX2JST(17),INAREA+17  JOB/STEP NAME           SBG 05/00
         MVC   XXX2IDR(3),LINE       CLEAR FIELD TO BLANKS    SBG 05/00
         CLI   INAREA+34,C'P'        INDICATE IDRC?           SBG 05/00
         BNE   PRX2NOI               NO. SAY NO               SBG 05/00
         MVC   XXX2IDR(3),=C'YES'     IDRC COMPRESSION        SBG 05/00
         B     PRX2MOV                                        SBG 04/00
PRX2NOI  MVC   XXX2IDR(3),=C'NO '                             SBG 04/00
PRX2MOV  MVC   LINE(132),XXX2LBL  MOVE INFO TO PRINT LINE     SBG 05/00
         PUT   SYSPRINT,LINE  WRITE MESSAGE WITH VOLSER       SBG 05/00
PRTXXX2R BR    R7                                             SBG 05/00
* - - - - - - END - SUBROUTINES   - - - - - - - - - - - - - - SBG 04/00
INVOLUME DC    CL6'      '                                    SBG 03/00
DWORD    DC    D'0'
ZERO23   DC    23C'0'         TEST FOR IEHINITTED HDR1        SBG 03/00
         CNOP  0,8
INCCW    DC    X'02',AL3(INAREA),X'2000',X'FFFF'              SBG 03/00
OUTCCW   DC    X'01',AL3(INAREA),X'2000',X'FFFF'              SBG 03/00
REWCCW   DC    X'07',AL3(INAREA),X'2000',X'FFFF'              SBG 03/00
INECB    DC    F'0'
INIOB    DC    X'02000000'
         DC    A(INECB)
INCSW    DC    2F'0'
         DC    A(INCCW)
         DC    A(IN)
         DC    F'0'
         DC    X'00010000'
OUTECB   DC    F'0'
OUTIOB   DC    X'02000000'
         DC    A(OUTECB)
OUTCSW   DC    2F'0'
         DC    A(OUTCCW)
OUTDCBPT DC    A(OUT1)
         DC    F'0'
         DC    X'00010000'
REWECB   DC    F'0'
REWIOB   DC    X'02000000'
         DC    A(REWECB)
REWCSW   DC    2F'0'
         DC    A(REWCCW)
REWDCBPT DC    A(OUT1)
         DC    F'0'
         DC    X'00010000'
         SPACE 3
DDOUT1   DC    C'OUT1 '
DDOUT2   DC    C'OUT2 '
DDOUT3   DC    C'OUT3 '
DDOUT4   DC    C'OUT4 '
DDOUT5   DC    C'OUT5 '
DDOUT6   DC    C'OUT6 '
DDOUT7   DC    C'OUT7 '
DDOUT8   DC    C'OUT8 '
DDOUT9   DC    C'OUT9 '
DDOUT10  DC    C'OUT10'
DDOUT11  DC    C'OUT11'
DDOUT12  DC    C'OUT12'
DDOUT13  DC    C'OUT13'
DDOUT14  DC    C'OUT14'
DDOUT15  DC    C'OUT15'
DDOUT16  DC    C'OUT16'
FLAGLIT  DC    C' - FLAGS - '
FLAG1    DC    X'00'
OP1      EQU   X'80'
OP2      EQU   X'40'
OP3      EQU   X'20'
OP4      EQU   X'10'
OP5      EQU   X'08'
OP6      EQU   X'04'
OP7      EQU   X'02'
OP8      EQU   X'01'
FLAG2    DC    X'00'
OP9      EQU   X'80'
OP10     EQU   X'40'
OP11     EQU   X'20'
OP12     EQU   X'10'
OP13     EQU   X'08'
OP14     EQU   X'04'
OP15     EQU   X'02'
OP16     EQU   X'01'
FLAG2A   DC    X'00'                                          SBG 03/00
ERR      EQU   X'02'
EOV      EQU   X'01'
FF       EQU   X'FF'
FLAG3    DC    X'00'
FLAG4    DC    X'00'
FLAG4A   DC    X'00'         COPY IMAGE FOR SAFETY'S SAKE     SBG 03/00
L80FLAG  DC    X'00'                                          SBG 03/00
*              X'01'    LAST DATA WAS 80 BYTE RECORD          SBG 03/00
LBLFLAG  DC    X'00'                                          SBG 03/00
*              X'01'    HDR1 HAS BEEN SEEN                    SBG 03/00
*              X'02'    HDR2 HAS BEEN SEEN                    SBG 03/00
*              X'04'    VOL1 HAS BEEN SEEN                    SBG 03/00
*              X'08'    HDR1 IS FROM AN INITTED TAPE          SBG 03/00
*              X'10'    EOF1 HAS BEEN SEEN                    SBG 04/00
*              X'20'    EOF2 HAS BEEN SEEN                    SBG 04/00
*              X'40'    EOV1 HAS BEEN SEEN                    SBG 04/00
*              X'80'    EOV2 HAS BEEN SEEN                    SBG 04/00
DATFLAG  DC    X'00'                                          SBG 03/00
*              X'10'    NO REAL DATA HAS BEEN READ YET        SBG 03/00
* --------------------------------------------------------- * SBG 04/00
VOLDD    DC    C'     '
SAV14T03 DC    6F'0'    SAVE REGS 14 THRU 03                  TEST
         SPACE 3
INEQC    DC    C' *********** EQUIPMENT CHECK ON INPUT -- COPY '
         DC    C'TERMINATED '
         DC    76C'*'
INDCK    DC    C' ********** DATA CHECK ON INPUT -- COPY TERMINATED '
         DC    82C'*'
VOLALT   DC    C' VOL1 VOLSER XXXXXX WAS ALTERED TO XXXXXX'   SBG 03/00
         DC    C' FOR DDNAME '
VOLDDN   DC    C'     '
VOLFILL  DC    75C' '                    VOL1 CHANGE MESSAGE  SBG 03/00
LTMRPT   DC    C' LEADING TAPE MARK WAS '                     SBG 03/00
LTMRPTI  DC    C'       '                  COPIED OR SKIPPED  SBG 03/00
         DC    103C' '                                        SBG 03/00
EOVCHG   DC    C' EOV LABELS FOUND - CHANGED TO EOF AS PER '  SBG 06/00
         DC    C'EOV2EOF PARM OR OPTION'                      SBG 06/00
         DC    69C' '                                         SBG 06/00
INITMSG  DC    C' INITTED TAPE HAS BEEN COPIED - VOLSER = '   SBG 03/00
INITSER  DC    C'      '                                      SBG 03/00
INITBLNK DC    86C' '                                         SBG 03/00
VOL1LBL  DC    C' VOL1 LABEL HAS BEEN DETECTED - VOLSER = '   SBG 03/00
VOL1SER  DC    C'      '                                      SBG 03/00
VOL1OWNT DC    C'     OWNER = '                               SBG 04/00
VOL1OWNR DC    C'          '                                  SBG 04/00
VOL1BLNK DC    63C' '                                         SBG 03/00
XXX1LBL  DC    C' XXX1 LABEL: 1STVOL= '                       SBG 05/00
XXX1VOL  DC    C'      '                                      SBG 05/00
XXX1DSNL DC    C' DSN='                                       SBG 05/00
XXX1DSN  DC    C'                 '                           SBG 05/00
XXX1DSQL DC    C' DS SEQ #: '                                 SBG 05/00
XXX1DSQ  DC    C'    '                                        SBG 05/00
XXX1VSQL DC    C' VOL SEQ #: '                                SBG 05/00
XXX1VSQ  DC    C'    '                                        SBG 05/00
XXX1BLCL DC    C' BLOCK COUNT: '                              SBG 05/00
XXX1BLC  DC    C'      '                                      SBG 05/00
XXX1CRDL DC    C' CRDATE: '                                   SBG 05/00
XXX1CRD  DC    C'      '                                      SBG 05/00
XXX1EXDL DC    C' EXDATE: '                                   SBG 05/00
XXX1EXD  DC    C'      '                                      SBG 05/00
XXX1BLNK DC    30C' '                                         SBG 03/00
XXX2LBL  DC    C' XXX2 LABEL: RECFM= '                        SBG 05/00
XXX2RFM  DC    C' '                                           SBG 05/00
XXX2BKLL DC    C'   BLOCK LENGTH: '                           SBG 05/00
XXX2BKL  DC    C'     '                                       SBG 05/00
XXX2RCLL DC    C'   RECORD LENGTH: '                          SBG 05/00
XXX2RCL  DC    C'     '                                       SBG 05/00
XXX2TDNL DC    C'  TAPE DEN: '                                SBG 05/00
XXX2TDN  DC    C' '                                           SBG 05/00
XXX2JSTL DC    C'   JOB/JOB STEP: '                           SBG 05/00
XXX2JST  DC    C'                 '                           SBG 05/00
XXX2IDRL DC    C'   IDRC? '                                   SBG 05/00
XXX2IDR  DC    C'   '                                         SBG 05/00
XXX2BLNK DC    8C' '                                          SBG 03/00
OUTEQC   DC    C' *********** EQUIPMENT CHECK ON DD XXXXX, UNIT '
         DC    C'XXX, VOLUME XXXXXX -- THIS OUTPUT TERMINATED '
         DC    41C'*'
OUTDCK   DC    C' **********       DATA CHECK ON DD XXXXX, UNIT '
         DC    C'XXX, VOLUME XXXXXX -- THIS OUTPUT TERMINATED '
         DC    41C'*'
FILEDONE DC    C' FILE 00000 CONTAINS 0000000 DATA BLOCKS'
         DC    93C' '
SUCCESS  DC    C'0COPY CORRECTLY COMPLETED FOR OUT1, OUT2, OUT3, OU'
         DC    C'T4, OUT5, OUT6, OUT7, OUT8, OUT9, OUT10, OUT11, OU'
         DC    C'T12, OUT13, OUT14, OUT15, OUT16  '
         DC    C'       '          BLANKS FOR COVERING UP     SBG 03/00
READOMSG DC    C'0THIS RUN OF THE COPYMODS PROGRAM IS READ-ONLY. JCL VOX
               LSER: XXXXXX '                                 SBG 06/00
         DC    66C' '                                         SBG 06/00
SUCCESSR DC    C'0TAPE READ CORRECTLY COMPLETED FOR DDNAME IN, VOLUME SX
               ERIAL XXXXXX '                                 SBG 06/00
         DC    66C' '                                         SBG 06/00
LINE     DC    133C' '
         DC    C'       '          BLANKS FOR COVERING UP     SBG 03/00
REPLY    DC    C'      '
COPIED   DC    C'COPIED '                                     SBG 03/00
SKIPPED  DC    C'SKIPPED'                                     SBG 03/00
FULLWORK DS    0F                                             SBG 03/00
         DC    H'0'                                           SBG 03/00
HALFWORK DC    H'0'                HALFWORD WORK AREA         SBG 03/00
         DC    2F'0'               FILLER                     SBG 05/00
* --------------------------------------------------------- * SBG 05/00
PARMFLGS DS    0CL3     3 CONTIGUOUS BYTES OF PARM FLAGS      SBG 04/00
PARMFLG1 DC    X'00'                                          SBG 03/00
*              X'DE'    LABEL INFORMATION WILL BE PRINTED     SBG 03/00
*              X'20'    LEADING TAPE MARKS WILL BE SKIPPED    SBG 03/00
PARMFLG2 DC    X'00'                                          SBG 03/00
PARMFLG3 DC    X'00'                                          SBG 03/00
* --------------------------------------------------------- * SBG 05/00
PARMSLEN DC    F'0'                LENGTH OF PARMS            SBG 04/00
PARMSTRT DC    F'0'                START ADDR OF JCL PARMS    SBG 05/00
PRMCHRCT DC    F'0'                CHAR COUNT FOR PRM SEARCH  SBG 05/00
PARMHITS DC    PL4'0'              NUMBER OF PARM HITS        SBG 05/00
PARMLCNT DC    PL4'0'              NUMBER OF PARM LOOPS       SBG 05/00
PARMTENT DC    CL13' '             PARM TABLE ENTRY DUMP      SBG 05/00
         DC    CL7' '              FILLER                     SBG 03/00
PARMFWRK DC    XL3'00'             FOR TURNING OFF PARM BYTES SBG 03/00
* --------------------------------------------------------- * SBG 05/00
*              FORMAT OF PARM TABLE                           SBG 04/00
*              ONE ENTRY IS 13 BYTES                          SBG 04/00
*                1ST BYTE:      LENGTH OF THIS PARM IN HEX    SBG 04/00
*                2ND BYTE:      X'01' SAYS TURN FLAG OFF      SBG 04/00
*                               X'00' SAYS TURN FLAG ON       SBG 04/00
*                               X'10' SET ENTRY AS A DEFAULT  SBG 04/00
*                NEXT 8 BYTES:  PARM NAME - LEFT JUSTIFIED    SBG 04/00
*                NEXT 3 BYTES:  FLAG SETTINGS - 3 FLAGS,      SBG 04/00
*                                WHICH ALLOWS FOR 24 PARMS    SBG 04/00
*                                THAT DON'T HAVE TO BE        SBG 04/00
*                                SEPARATED BY A COMMA.        SBG 04/00
PBYTES   EQU   3                NUMBER OF PARM SWITCH BYTES   SBG 05/00
* --------------------------------------------------------- * SBG 05/00
PARMTABL DC    X'07',X'00',C'LTMSKIP ',X'200000'  FIRST ENTRY SBG 05/00
PTELEN   EQU   *-PARMTABL                                     SBG 05/00
PTEFLG   EQU   PTELEN-PBYTES                                  SBG 05/00
         DC    X'07',X'00',C'SKIPLTM ',X'200000'              SBG 05/00
         DC    X'07',X'11',C'COPYLTM ',X'200000'  DEFAULT     SBG 05/00
         DC    X'07',X'01',C'LTMCOPY ',X'200000'              SBG 05/00
         DC    X'07',X'00',C'LBLINFO ',X'DE0000'              SBG 05/00
         DC    X'06',X'00',C'PRINTL  ',X'DE0000'              SBG 05/00
         DC    X'06',X'00',C'LABELS  ',X'DE0000'              SBG 05/00
         DC    X'06',X'01',C'NOLABL  ',X'DE0000'              SBG 05/00
         DC    X'07',X'11',C'NOLABEL ',X'DE0000'  DEFAULT     SBG 05/00
         DC    X'04',X'00',C'HDR1    ',X'020000'              SBG 05/00
         DC    X'06',X'01',C'NOHDR1  ',X'020000'              SBG 05/00
         DC    X'04',X'00',C'HDR2    ',X'040000'              SBG 05/00
         DC    X'06',X'01',C'NOHDR2  ',X'040000'              SBG 05/00
         DC    X'04',X'00',C'EOF1    ',X'080000'              SBG 05/00
         DC    X'06',X'01',C'NOEOF1  ',X'080000'              SBG 05/00
         DC    X'04',X'00',C'EOF2    ',X'100000'              SBG 05/00
         DC    X'06',X'01',C'NOEOF2  ',X'100000'              SBG 05/00
         DC    X'04',X'00',C'EOV1    ',X'400000'              SBG 05/00
         DC    X'06',X'01',C'NOEOV1  ',X'400000'              SBG 05/00
         DC    X'04',X'00',C'EOV2    ',X'800000'              SBG 05/00
         DC    X'06',X'01',C'NOEOV2  ',X'800000'              SBG 05/00
         DC    X'04',X'00',C'HDRS    ',X'060000'              SBG 05/00
         DC    X'06',X'01',C'NOHDRS  ',X'060000'              SBG 05/00
         DC    X'04',X'00',C'EOFS    ',X'180000'              SBG 05/00
         DC    X'06',X'01',C'NOEOFS  ',X'180000'              SBG 05/00
         DC    X'04',X'00',C'EOVS    ',X'C00000'              SBG 05/00
         DC    X'06',X'01',C'NOEOVS  ',X'C00000'              SBG 05/00
         DC    X'06',X'00',C'CHGVOL  ',X'000100'              SBG 05/00
         DC    X'08',X'11',C'NOCHGVOL',X'000100'  DEFAULT     SBG 05/00
         DC    X'06',X'00',C'JCLVOL  ',X'000100'              SBG 05/00
         DC    X'08',X'01',C'NOJCLVOL',X'000100'              SBG 05/00
         DC    X'06',X'00',C'NEWVOL  ',X'000100'              SBG 05/00
         DC    X'08',X'01',C'NONEWVOL',X'000100'              SBG 05/00
         DC    X'06',X'10',C'VOLLBL  ',X'000200'  DEFAULT     SBG 05/00
         DC    X'08',X'01',C'NOVOLLBL',X'000200'              SBG 05/00
         DC    X'07',X'00',C'EOV2EOF ',X'000400'              SBG 05/00
         DC    X'08',X'00',C'EOVTOEOF',X'000400'              SBG 05/00
         DC    X'06',X'00',C'EOVCHG  ',X'000400'              SBG 05/00
         DC    X'08',X'11',C'NOEOVCHG',X'000400'  DEFAULT     SBG 05/00
         DC    X'04',X'00',C'READ    ',X'000800'              SBG 05/00
         DC    X'08',X'00',C'READONLY',X'000800'              SBG 05/00
         DC    X'07',X'00',C'NOWRITE ',X'000800'              SBG 05/00
         DC    X'07',X'11',C'WRITE   ',X'000800'  DEFAULT     SBG 05/00
         DC    X'07',X'01',C'NOEXTRA ',X'010000' ALL EXTRAS OFF   05/00
EFFS     DC    X'FFFFFFFFFFFFFFFF'                            SBG 05/00
* --------------------------------------------------------- * SBG 04/00
         SPACE 3
         LTORG
         SPACE 3
         DS    0D                                             SBG 05/00
OUTEXLST DC    X'87',AL3(OUTJFCB)
OUTJFCB  DC    44F'0'
         DS    0D                                             SBG 06/00
INEXLST  DC    X'87',AL3(INJFCB)                              SBG 06/00
INJFCB   DC    44F'0'                                         SBG 06/00
         SPACE 3
INVOL    DC    C'      '     INPUT VOLUME NAME FROM VOL1 LABEL
INVOLJ   DC    C'      '     INPUT VOLUME NAME FROM JCL VOLUME
VOLORIG  DC    C'      '     JCL VOLUME NAME - FROM VOL1 LABEL
VOLNEW   DC    C'      '     JCL VOLUME NAME - TO SUBSTITUTE
VOLUME1  DC    C'      '     JCL VOLUME NAME - FROM RDJFCB
VOLUME2  DC    C'      '     JCL VOLUME NAME - FROM RDJFCB
VOLUME3  DC    C'      '     JCL VOLUME NAME - FROM RDJFCB
VOLUME4  DC    C'      '     JCL VOLUME NAME - FROM RDJFCB
VOLUME5  DC    C'      '     JCL VOLUME NAME - FROM RDJFCB
VOLUME6  DC    C'      '     JCL VOLUME NAME - FROM RDJFCB
VOLUME7  DC    C'      '     JCL VOLUME NAME - FROM RDJFCB
VOLUME8  DC    C'      '     JCL VOLUME NAME - FROM RDJFCB
VOLUME9  DC    C'      '     JCL VOLUME NAME - FROM RDJFCB
VOLUME10 DC    C'      '     JCL VOLUME NAME - FROM RDJFCB
VOLUME11 DC    C'      '     JCL VOLUME NAME - FROM RDJFCB
VOLUME12 DC    C'      '     JCL VOLUME NAME - FROM RDJFCB
VOLUME13 DC    C'      '     JCL VOLUME NAME - FROM RDJFCB
VOLUME14 DC    C'      '     JCL VOLUME NAME - FROM RDJFCB
VOLUME15 DC    C'      '     JCL VOLUME NAME - FROM RDJFCB
VOLUME16 DC    C'      '     JCL VOLUME NAME - FROM RDJFCB
* --------------------------------------------------------- * SBG 05/00
         SPACE 3
IN       DCB   MACRF=(E),DDNAME=IN,DEVD=TA,DSORG=PS,RECFM=U,           X
               EXLST=INEXLST
OUT1     DCB   MACRF=(E),DDNAME=OUT1,DEVD=TA,DSORG=PS,RECFM=U,         X
               EXLST=OUTEXLST
OUT2     DCB   MACRF=(E),DDNAME=OUT2,DEVD=TA,DSORG=PS,RECFM=U,         X
               EXLST=OUTEXLST
OUT3     DCB   MACRF=(E),DDNAME=OUT3,DEVD=TA,DSORG=PS,RECFM=U,         X
               EXLST=OUTEXLST
OUT4     DCB   MACRF=(E),DDNAME=OUT4,DEVD=TA,DSORG=PS,RECFM=U,         X
               EXLST=OUTEXLST
OUT5     DCB   MACRF=(E),DDNAME=OUT5,DEVD=TA,DSORG=PS,RECFM=U,         X
               EXLST=OUTEXLST
OUT6     DCB   MACRF=(E),DDNAME=OUT6,DEVD=TA,DSORG=PS,RECFM=U,         X
               EXLST=OUTEXLST
OUT7     DCB   MACRF=(E),DDNAME=OUT7,DEVD=TA,DSORG=PS,RECFM=U,         X
               EXLST=OUTEXLST
OUT8     DCB   MACRF=(E),DDNAME=OUT8,DEVD=TA,DSORG=PS,RECFM=U,         X
               EXLST=OUTEXLST
OUT9     DCB   MACRF=(E),DDNAME=OUT9,DEVD=TA,DSORG=PS,RECFM=U,         X
               EXLST=OUTEXLST
OUT10    DCB   MACRF=(E),DDNAME=OUT10,DEVD=TA,DSORG=PS,RECFM=U,        X
               EXLST=OUTEXLST
OUT11    DCB   MACRF=(E),DDNAME=OUT11,DEVD=TA,DSORG=PS,RECFM=U,        X
               EXLST=OUTEXLST
OUT12    DCB   MACRF=(E),DDNAME=OUT12,DEVD=TA,DSORG=PS,RECFM=U,        X
               EXLST=OUTEXLST
OUT13    DCB   MACRF=(E),DDNAME=OUT13,DEVD=TA,DSORG=PS,RECFM=U,        X
               EXLST=OUTEXLST
OUT14    DCB   MACRF=(E),DDNAME=OUT14,DEVD=TA,DSORG=PS,RECFM=U,        X
               EXLST=OUTEXLST
OUT15    DCB   MACRF=(E),DDNAME=OUT15,DEVD=TA,DSORG=PS,RECFM=U,        X
               EXLST=OUTEXLST
OUT16    DCB   MACRF=(E),DDNAME=OUT16,DEVD=TA,DSORG=PS,RECFM=U,        X
               EXLST=OUTEXLST
SYSPRINT DCB   MACRF=PM,DDNAME=SYSPRINT,DSORG=PS,RECFM=FA,LRECL=133,   X
               BLKSIZE=133
INAREA   DS    CL65535                                        SBG 03/00
#PAN$AUD CSECT
$PAN#AUD DC    CL21'021CBT990    07/10/00'                    SBG 07/00
         END
