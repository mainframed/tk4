*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
*                                                                     *
*  MODULE NAME = SYSLOG                                               *
*                                                                     *
*  DESCRIPTIVE NAME =                                                 *
*                                                                     *
*  OPERATING ENVIRONMENT = MVS/XA 2.1.7                               *
*                                                                     *
*  FUNCTION = PROCESS DUMPED SYSLOGS FORM MVS/XA SYSTEM               *
*                                                                     *
*                                                                     *
*  NOTES =                                                            *
*                                                                     *
* REG USAGE:                                                          *
*                                                                     *
*     R1 ...... PARM ADDR                                             *
*     R2 ...... PARM AREA ADDR                                        *
*     R3 ...... PARM LENGTH                                           *
*     R4 ......                                                       *
*     R5 ......                                                       *
*     R6 ...... RECORDS WRITTEN                                       *
*     R7 ...... RECORDS READ                                          *
*     R8 ...... BAL REG FOR NUMBER RECS PROCESSED                     *
*     R9 ......                                                       *
*     R10......                                                       *
*     R11...... BASE REG2                                             *
*     R12...... BASE REG1                                             *
*     R13......                                                       *
*     R14......                                                       *
*     R15......                                                       *
*                                                                     *
*        SUBROUTINES = PRC:                                           *
*                                                                     *
*             DSECTS = IBM:                                           *
*                                                                     *
*                    OTHER:                                           *
*                                                                     *
*             MODULE TYPE = ASMH V2.1                                 *
*                                                                     *
*                PROCESSOR = 4381-11                                  *
*                                                                     *
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
  EJECT
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
*                                                                     *
*             ENTRY POINTS =          (ONLY ENTRY POINT)              *
*                                                                     *
*             INPUT =                                                 *
*                                                                     *
*             OUTPUT =                                                *
*                                                                     *
*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *
*                                                                     *
*             EXIT - ERROR = NONE                                     *
*                                                                     *
*             EXTERNAL REFERENCES = NONE                              *
*                                                                     *
*             TABLES =                                                *
*                                                                     *
*             AUTHOR = MARK V. HEDGES                                 *
*                      ADRIA LABORATORIES                             *
*                      7001 POST ROAD                                 *
*                      DUBLIN OH. 43017                               *
*                      (614) 764-8175                            PTL  *
*                                                                     *
*             MESSAGES = NONE                                         *
*                                                                     *
*             ABEND CODES = NONE - WE HOPE                            *
*                                                                     *
*                                                                     *
*                                                                     *
* -----------------------  CHANGE SECTION  ---------------------------*
*                                                                     *
* 03/23/88 ADDED                                                      *
*                                                                     *
*                                                                     *
*                                                                     *
* -----------------------  THINGS TO DO  -----------------------------*
*                                                                     *
*                                                                     *
*                                                                     *
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
         EJECT  ,
 TITLE '>>>     SYSLOG SEARCH PROGRAM      <<<'
 SPACE 2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
* FUNCTION:    THIS PROGRAM SEARCHES THE SYSTEM LOG FOR MVS/XA        *
*              THAT HAS BEEN DUMPED TO A DISK DATASET                 *
*                                                                     *
* COMMANDS: NOHASP          - LIST EVERYTHING BUT $HASP AND ARC____   *
*                             (HSM MESSAGES)                          *
*           S /CMD/         - SEARCH FOR 1ST OCCUR. OF 'CMD'.AND AFTER*
*           S ALL /CMD/     - SEARCH FOR ALL OCCUR. OF 'CMD'          *
*           S D/86000/      - SEARCH FOR BEGINNING DATE 86000         *
*           S T/06:00/      - SEARCH FOR BEGINNING TIME 06:00         *
*           S J/NAME0001/   - SEARCH FOR ALL OCCUR. OF JOB NAME       *
*           S J/NUM1/       - SEARCH FOR ALL OCCUR. OF JOB NUM        *
*           S M/MESSAGES/   - SEARCH FOR ALL OCCUR. OF MESSAGE        *
*           S JOB/NAME/     - GET START, END, PURGE FOR JOBS STARTING *
*                             WITH WHAT EVER                          *
*           S JOB/NAME/,PURGE GET START, END, PURGE FOR JOBS STARTING *
*                             EXCEPT PURGE RECORDS                    *
*                                                                     *
* REG USAGE:                                                          *
*                                                                     *
*     R1 ...... PARM ADDR                                             *
*     R2 ...... PARM AREA ADDR                                        *
*     R3 ...... PARM LENGTH                                           *
*     R4 ......                                                       *
*     R5 ......                                                       *
*     R6 ...... RECORDS WRITTEN                                       *
*     R7 ...... RECORDS READ                                          *
*     R8 ...... BAL REG FOR NUMBER RECS PROCESSED                     *
*     R9 ......                                                       *
*     R10......                                                       *
*     R11...... BASE REG2                                             *
*     R12...... BASE REG1                                             *
*     R13......                                                       *
*     R14......                                                       *
*     R15......                                                       *
*                                                                     *
*                                                                     *
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
         EJECT
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
* RECORD LAYOUTS:                                                     *
*                                                                     *
* 2 ..... C-CONSOLE, I-INTERNAL, BLANK                                *
*                                                                     *
* 8-11 .. SYSID                                                       *
*                                                                     *
* 17-21 . JULIAN TIME                                                 *
*                                                                     *
* 23-33 . MILITARY TIME:  HH:MM:SS.HH                                 *
*                                                                     *
* 35-37 . JOB, STC, OR TSU                                            *
*                                                                     *
* 39-42 . JOB, STC, OR TSU NUMBER                                     *
*                                                                     *
* 54-61 . MVS/JES2 MESSAGE                                            *
*                                                                     *
*                                                                     *
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
         EJECT
SYSLOG   CSECT
         STM   R14,R12,12(R13)         SAVE PREVIOUS REGS
         LR    R12,R15                 SAVE PGM BEGIN ADDR
         USING SYSLOG,R12,R11
         L     R11,SEC4K               ADDR 2ND 4K
         LA    R10,SAVE                ADDR NEW SAVE AREA
         ST    R10,8(R13)              NEW SAVE ADDR IN OLD SAVE AREA
         ST    R13,SAVE+4              OLD SAVE ADDR IN NEW SAVE AREA
         LR    R13,R10                 R13 CONTAINS NEW SAVE ADDR
         B     BEGIN                   JUMP OVER SAVE
SAVE     DS    18F                     SAVE AREA FOR THIS PGM
SEC4K    DC    A(SYSLOG+4096)          ADDR OF 2ND 4K
         EJECT
BEGIN    XR    R8,R8
         XR    R7,R7
         L     R2,0(,R1)
         LH    R3,0(,R2)
         LTR   R3,R3
         BZ    OPEN
         BCTR  R3,0
         MVC   PARM(*-*),2(R2)
         EX    R3,*-6
         SPACE
OPEN     DS    0H                     * READ JFCB TO MAP 'DSNAME'
         GETTIME
         MVC   DATETM(16),DATE        * PUT DATE AND TIME ON LISTING
         RDJFCB IN
         LTR   R15,R15
         BNZ   $ERROR
         OPEN  (IN,,OUT,OUTPUT)       * OPEN FILES
         OPEN  (SYSPRINT,OUTPUT)
         EJECT
STRTLOOP GET   IN,REC                 * BYPASS HEADERS
         CLI   REC,C'1'
         BE    PREVLOG
         CLC   PARM+2(3),=C'JOB'  - A JOB NAME START,END,PURGE
         BE    ALLJOB
         CLC   REC+34(6),=C'SYSLOG'   * LOOKING FOR SYSLOG INIT CMD
         BNE   STRTLOOP               * CONTINUE TO END
         B     HEADER1
PREVLOG  GET   IN,REC                 * SKIP 9 RECORDS
         GET   IN,REC
         GET   IN,REC
         GET   IN,REC
         GET   IN,REC
         GET   IN,REC
         GET   IN,REC
         GET   IN,REC
HEADER1  DS    0H
         CLC   PARM+2(3),=C'JOB'  - A JOB NAME START,END,PURGE
         BE    ALLJOB
         MVC   REC(133),BLANKS        * INIT RECORD FIELD
         MVC   REC+57(13),=C'P A R M S =  '
         MVC   REC+70(*-*),2(R2)
         EX    R3,*-6
         MVC   ODSN(44),JFCBDSNM      * FROM JFCB
         CLI   JFCBIND1,JFCGDG        * IS DATASET A GDG ???
         BNE   NOJFGDG
         MVC   ODSN+25(3),=C'GDG'
NOJFGDG  MVC   OVOL(6),JFCBVOLS       * VOLSER OF DISK
         MVI   FLAG,C'1'
         PUT   OUT,HDR1
         PUT   OUT,BLANKS
         PUT   OUT,REC
         PUT   OUT,BLANKS
         LTR   R3,R3
         BZ    NOPARM
         EJECT
         CLI   PARM,C'S'
         BNE   $HASP
         CLI   PARM+2,C'/'        - A SEACH FOR STRING
         BE    STRING
         CLC   PARM+2(3),=C'ALL'  - A SEARCH FOR ALL STRING
         BE    STRALL
         CLI   PARM+2,C'D'        - A DATE START SEARCH
         BE    $DATE
         CLI   PARM+2,C'T'        - A TIME START SEARCH
         BE    TIME
         CLC   PARM+2(3),=C'JOB'  - A JOB NAME START,END,PURGE
         BE    ALLJOB
         CLI   PARM+2,C'J'        - A JOB NAME/NUMBER SEARCH
         BE    JOB
*        CLI   PARM+2,C'M'        - A MESSAGE SEARCH
*        BE    MESSAGE
         B     EOF
         EJECT
STRING   DS    0H                 - STRING SEARCH 'S /STRING/' 1ST
         LA    R2,PARM+2
         LA    R3,1(R2)           * SAVE START OF STRING
STRL1    A     R2,=F'1'           * SEARCH FOR END OF STRING
         CLI   0(R2),C'/'         *
         BNE   STRL1              * END OF SEARCH STRING
         SR    R2,R3              * LENGTH OF STRING=R2
         S     R2,=F'1'           * FOR AND EXCUTED COMPARE: BEFORE '/'
         LA    R4,98              * 133-35=98 THE REST OF THE RECORD
         SR    R4,R2              * (133-35)-LENGTH(SEARCH AUG)
         LR    R5,R4              * SAVE (133-35)-LENGTH(SEARCH AUG)
STRLSE   LR    R4,R5              * 133-35=98 THE REST OF THE RECORD
         GET   IN,REC             *
         BAL   R8,$READCNT
         LA    R3,REC+33          * PAST HEADER, DATE AND TIME
STRL2    A     R3,=F'1'
         CLC   PARM+3(*-*),0(R3)  * COMPARE PARM WITH RECORD
         EX    R2,*-6             *
         BE    $FOUND             *
         BCT   R4,STRL2           * PARSE THROUGH
         B     STRLSE             *
*                                 *
STRALL   DS    0H                 - STRING SEARCH 'S ALL /STRING/'
         LA    R2,PARM+6
         LA    R3,1(R2)           * SAVE START OF STRING
STRAL1   A     R2,=F'1'           * SEARCH FOR END OF STRING
         CLI   0(R2),C'/'         *
         BNE   STRAL1             * END OF SEARCH STRING
         SR    R2,R3              * LENGTH OF STRING=R2
         S     R2,=F'1'           * FOR AND EXCUTED COMPARE: BEFORE '/'
         LA    R4,98              * 133-35=98 THE REST OF THE RECORD
         SR    R4,R2              * (133-35)-LENGTH(SEARCH AUG)
         LR    R5,R4              * SAVE LENGTH
STRALSE  LR    R4,R5              * 133-35=98 THE REST OF THE RECORD
         GET   IN,REC             *
         BAL   R8,$READCNT
         LA    R3,REC+33          * PAST HEADER, DATE AND TIME
STRAL2   A     R3,=F'1'
         CLC   PARM+7(*-*),0(R3)  * COMPARE PARM WITH RECORD
         EX    R2,*-6             *
         BE    $STRALL            *
         BCT   R4,STRAL2          * PARSE THROUGH
         B     STRALSE            *
$STRALL  PUT   OUT,REC
         B     STRALSE            *
         EJECT
$DATE    DS    0H                 - DATE SEARCH 'S D/86000/' 1ST
GETDATE  GET   IN,REC
         BAL   R8,$READCNT
         CLC   PARM+4(5),REC+16   * COMPARE DATE WITH RECORD
         BE    $FOUND             *
         B     GETDATE            *
*
TIME     DS    0H                 - TIME SEARCH 'S T/00:00/ 1ST
GETTIME  GET   IN,REC
         BAL   R8,$READCNT
         CLC   PARM+4(5),REC+22   * COMPARE DATE WITH RECORD
         BE    $FOUND             *
         B     GETTIME            *
*                                 *
         EJECT
ALLJOB   DS    0H
         XR    R7,R7              * RECORDS READ
         XR    R6,R6              * RECORDS WRITTEN
         LA    R2,PARM+6          * START OF JOB/PREFIX NAME
         LR    R3,R2              * SAVE START
         S     R2,=F'1'           * ..BACKWARDS
ALLJOBL  A     R2,=F'1'           * ..FORWARDS
         CLI   0(R2),C'/'         * ARE WE @ END
         BNE   ALLJOBL            * NOPE, LOOP
         CLC   2(7,R2),=C'NOPURGE'
         BNE   $CONT1
         MVI   NOPURGE,X'FF'
$CONT1   SR    R2,R3              * GET LENGTH OF JOB/PREFIX NAME
         BCTR  R2,0               * FOR <<EXEC>>
         MVC   JOB#(*-*),PARM+6   * MOVE JOBNAME
         EX    R2,*-6
GALLJOB  GET   IN,REC
         BAL   R8,$READCNT        * RECORD COUNTER
         CLC   JOB#(*-*),REC+62   * CORRECT JOB OR PREFIX
         EX    R2,*-6
         BE    $JSTRT
         CLC   JOB#(*-*),REC+61   * CORRECT JOB OR PREFIX
         EX    R2,*-6
         BNE   GALLJOB
         CLC   REC+53(7),=C'IEF452I'
         BE    $JCLMSG
         CLC   REC+53(7),=C'IEF453I'
         BE    $JCLMSG
         B     GALLJOB
$JSTRT   CLC   REC+53(8),=C'$HASP373'   JOB START
         BNE   $JEND
         MVC   OREC+L'JULPARM3+L'#TIME+L'#JNUM+3+9(26),#MESG
         B     $JOKAY
$JEND    CLC   REC+53(8),=C'$HASP395'   JOB END
         BNE   $JPURGE
         MVC   OREC+L'JULPARM3+L'#TIME+L'#JNUM+3+9(26),#MESG
         B     $JOKAY
$JPURGE  CLC   REC+53(8),=C'$HASP250'   JOB PURGE
         BNE   $JCLERR
         CLI   NOPURGE,X'FF'      * IF NO JOB PURGE
         BE    $JCLERR
         MVC   OREC+L'JULPARM3+L'#TIME+L'#JNUM+3+9(26),#MESG
         B     $JOKAY
$JCLERR  CLC   REC+53(8),=C'$HASP396'   ABNORMAL TERMINATION
         BNE   GALLJOB
         B     $JCLMSG1
$JCLMSG  DS    0H
         MVC   OREC+L'JULPARM3+L'#TIME+L'#JNUM+3+9(7),#MESG
         MVC   OREC+L'JULPARM3+L'#TIME+L'#JNUM+3+9+9(8),#MESG+8
         MVC   OREC+L'JULPARM3+L'#TIME+L'#JNUM+3+17+9(11),#MESG+29
         B     $JOKAY
$JCLMSG1 DS    0H
         MVC   OREC+L'JULPARM3+L'#TIME+L'#JNUM+3+9(35),#MESG
         B     $JOKAY
         SPACE 2
* PUT RECORD TO OUTPUT DATASET
         SPACE
$JOKAY   DS    0H                      * OUTPUT ONLY PERTAINENT INFO
         CLC   OLDJUL(5),#JULDATE      * DATE CHANGE ?
         BE    $NONEWDT                * NOPE, CONTINUE
         PACK  JULPARM1(4),#JULDATE(5) * YEP, PACK IT
         LA    R1,3                    * THIS IS A JULIAN DATE
         ST    R1,JULPARM2             * ... SAVE IT
         LA    R1,8+128                * WE WANT 'DDJANYY' AND WEEKDAY
         ST    R1,JULPARM4             * ... SAVE THAT
         LA    R1,JULPTRS              * LOAD ADDR OF PARM LIST
         L     R15,=V(JULSUB)          * GET READY ...
         BALR  R14,R15                 * DO IT
         MVC   OLDJUL(5),#JULDATE      * AND REPLACE OLD ON TOO
$NONEWDT DS    0H
         MVC   OREC(L'#JULDATE),#JULDATE
         MVC   OREC+6(L'JULPARM3),JULPARM3
         MVC   OREC+L'JULPARM3+6(3),WEEKDAY
         MVC   OREC+L'JULPARM3+4+6(L'#TIME),#TIME
         MVC   OREC+L'JULPARM3+L'#TIME+4+1+6(L'#JNUM),#JNUM
         PUT   OUT,OREC           *
         MVC   OREC,BLANKS
         BAL   R8,$WRITCNT        * RECORD COUNTER, WRITES
         B     GALLJOB
         EJECT
JOB      DS    0H                 - JOB SEARCH 'S J/NUM OR NAME/'
         CLI   PARM+4,X'F0'       * IF LOWER THAN 0 THEN CHAR
         BL    $CHAR
         LA    R2,PARM+3          * START OF JOB NUMBER /1234/-LONGEST
         LA    R3,1(R2)           * SAVE START+1
JOBL1    A     R2,=F'1'
         CLI   0(R2),C'/'
         BNE   JOBL1
         SR    R2,R3
         CH    R2,=H'1'           * JOB NUMBER LENGTH = 1
         BE    $JOB1
         CH    R2,=H'2'           * JOB NUMBER LENGTH = 2
         BE    $JOB2
         CH    R2,=H'3'           * JOB NUMBER LENGTH = 3
         BE    $JOB3
         MVC   #JOB(4),PARM+4     * JOB NUM LEN=4
         B     JOBL2
#JOB     DC    CL4' '
$JOB1    MVC   #JOB+3(1),PARM+4
         B     JOBL2
$JOB2    MVC   #JOB+2(1),PARM+4
         B     JOBL2
$JOB3    MVC   #JOB+1(1),PARM+4
JOBL2    GET   IN,REC             *
         BAL   R8,$READCNT        * RECORD COUNTER
         CLC   REC+34(3),=C'JOB'  * COMPARE PARM WITH RECORD
         BNE   JOBL2              *
         CLC   REC+38(4),#JOB     * COMPARE JOBNUMS
         BNE   JOBL2              *
         PUT   OUT,REC            *
         B     JOBL2              *
*                                 *                    R
*                                 *                    3
$CHAR    DS    0H                 - STRING SEARCH 'S J/NAMEQTRS/'
         LA    R2,PARM+3
         LA    R3,1(R2)           * SAVE START OF JOBNAME
CHL1     A     R2,=F'1'           * SEARCH FOR END OF JOBNAME
         CLI   0(R2),C'/'         *
         BNE   CHL1               * END OF SEARCH JOBNAME
         SR    R2,R3              * LENGTH OF STRING=R2
         S     R2,=F'1'           * FOR AND EXCUTED COMPARE: BEFORE '/'
         LA    R4,80              * 133-53=80 THE REST OF THE RECORD
         DS    0H
         SR    R4,R2              * (133-35)-LENGTH(SEARCH AUG)
         LR    R5,R4              * SAVE LENGTH
CHL2     LR    R4,R5              * 133-35=98 THE REST OF THE RECORD
         GET   IN,REC             *
         BAL   R8,$READCNT
         LA    R3,REC+52
CHL3     A     R3,=F'1'
         CLC   PARM+4(*-*),0(R3)  * COMPARE PARM WITH RECORD
         EX    R2,*-6             *
         BE    $CHARL             *
         BCT   R4,CHL3            * PARSE THROUGH
         B     CHL2               *
$CHARL   PUT   OUT,REC
         B     CHL2               *
*                                 *
$HASP    CLC   PARM(6),=C'NOHASP'
         BNE   EOF                *
$HASPGET GET   IN,REC
         BAL   R8,$READCNT
         CLI   REC+53,C'$'           * SKIP ALL $HASP COMMANDS
         BE    $HASPGET
         CLI   REC+53,C'='           * SKIP ALL '=' AFTER $HASP COMMDS
         BE    $HASPGET
         CLC   REC+53(3),=C'ARC'     * SKIP ALL ARC_____  MESSAGES
         BE    $HASPGET                ISSUED BY HSM
         PUT   OUT,REC
         B     $HASPGET
$FOUND   CVD   R7,DWORD
         ED    FFIELD(8),DWORD+4  * EDIT OUTPUT
         PUT   OUT,BLANKS
         PUT   OUT,FREC
         PUT   OUT,BLANKS
         PUT   OUT,BLANKS
$FOUNDL  PUT   OUT,REC
NOPARM   GET   IN,REC
         BAL   R8,$READCNT
         B     $FOUNDL
$READCNT A     R7,=F'1'           * RECORD INPUT RECORDS SEARCHED
         BR    R8
$WRITCNT A     R6,=F'1'           * RECORD INPUT RECORDS SEARCHED
         BR    R8
EOF      CLOSE  (IN)
         CLI   JOB#,C' '
         BNE   $CLOSE             * IS THERE A JOBALL PRESENT, YEP ..
         CVD   R7,DWORD           * NOPE, CONVERT COUNTER TO DECIMAL
         ED    EFIELD(8),DWORD+4  * EDIT OUTPUT
         PUT   OUT,BLANKS
         PUT   OUT,BLANKS
         PUT   OUT,LASTREC
         PUT   OUT,BLANKS
         PUT   OUT,LASTHDR
$CLOSE   CLOSE  (OUT)
         TESTOPEN SYSPRINT
         LTR    R15,R15
         BNZ    EXIT
         CVD    R7,DWORD           * CONVERT COUNTER TO DECIMAL, READ
         ED     RREAD(10),DWORD+3  * EDIT OUTPUT
         CVD    R6,DWORD           * CONVERT COUNTER TO DECIMAL, WRIT.
         ED     RWRIT(10),DWORD+3  * EDIT OUTPUT
         PUT    SYSPRINT,OSYSPRNT
         CLOSE  (SYSPRINT)
         B      EXIT
$ERROR   WTO    'NO SYSLOG DDNAME '
         LA     R15,8
         B      EXIT+2
EXIT     SR     R15,R15                 ZERO RETURN REGISTER
         L      R13,SAVE+4             RESTORE OLD SAVE AREA ADDR.
         L      R14,12(R13)            RETURN ADDRESS
         LM     R0,R12,20(R13)         REST OF THE REGS
         BR     R14                    RETURN
         EJECT
  TITLE  '      DATA   SECTION'
PARM     DC     CL30' '
HDR1     CENTER 'S Y S L O G     S E A R C H    P R O G R A M'
DATETM   EQU    *-19
FLAG     EQU    HDR1+0
BLANKS   DC     CL133' '
JOB#     DC     CL8' '
REC      DS     CL133
         ORG    REC+1
#CMD     DS     C                       * COMMAND AREAS
         DS     CL5
#SYSID   DS     CL4                     * SYSTEM ID
         DS     CL5
#JULDATE DS     CL5                     * DATE, JULIAN
         DS     CL1
#TIME    DS     CL11                    * TIME, MILITARY, HH:MM:SS.DD
         DS     CL1
#JST     DS     CL3                     * JOB, STC, OR TSU
         DS     CL1
#JNUM    DS     CL4                     * JOB, STC, OR TSU NUMBER
         DS     CL11
#MESG    DS     CL45                    * MESSAGE AREA
         ORG    ,
OREC     DS     CL133
         DS    0D
JULPTRS  DC    A(JULPARM1)
         DC    A(JULPARM2)
         DC    A(JULPARM3)
         DC    A(JULPARM4)
         DC    A(JULPARM5)
JULPARM1 DS    F                  * INPUT DATE: 'YYYYDDDF' PACKED
JULPARM2 DS    F                  * INPUT CODE: JULIAN PL4
JULPARM4 DS    F                  * OUTPUT CODE: 'YYMMMDD'
JULPARM3 DS    CL8                * OUTPUT FIELD
WEEKDAY  DS    CL12               * WEEKDAY CL12
JULPARM5 DS    32D                * 256 BYE WORK AREA
OLDJUL   DC    CL5' '
         DS     0D
DWORD    DS     D
LASTREC  DC     CL45' '
         DC     CL38'R E C O R D S     P R O C E S S E D = '
EFIELD   DC     X'4020202020202021'
         DC     CL(133-(*-LASTREC))' '
FREC     DC     CL45' '
         DC     CL36'R E C O R D S     B Y P A S S E D = '
FFIELD   DC     X'4020202020202021'
         DC     CL(133-(*-FREC))' '
LASTHDR  DC     CL45' '
         DC     C'DSNAME='
ODSN     DC     CL44' '
         DC     CL4'VOL='
OVOL     DC     CL(133-(*-LASTHDR))' '
OSYSPRNT DC     CL133' '
         ORG    OSYSPRNT
         DC     C'==> RECORDS READ = '
RREAD    DC     X'40202020202020202021'
         DC     C' ==>  RECORDS WRITTEN = '
RWRIT    DC     X'40202020202020202021'
         ORG    ,
NOPURGE  DC    X'00'
         PRINT NOGEN
IN     DCB DDNAME=SYSLOG,DSORG=PS,LRECL=133,BLKSIZE=23408,MACRF=(GM),  X
               RECFM=FB,EODAD=EOF,EXLST=EXL
OUT    DCB DDNAME=SORTIN,DSORG=PS,LRECL=133,BLKSIZE=23408,MACRF=PM,    X
               RECFM=FB
SYSPRINT DCB DDNAME=SYSPRINT,DSORG=PS,RECFM=FB,MACRF=PM,               X
               LRECL=133,BLKSIZE=23408
         DS    0F
EXL      DC    X'87',AL3($JFCB)
$JFCB    DS    0H
         IEFJFCBN LIST=NO
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
