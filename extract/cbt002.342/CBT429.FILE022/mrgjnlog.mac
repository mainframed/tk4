*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
*                                                                     *
*  MODULE NAME = MRGJNLOG                                             *
*                                                                     *
*  DESCRIPTIVE NAME = MERGE DAILY IDMS/R JOURNALS AND LOGS TO TAPE(S) *
*                                                                     *
*  OPERATING ENVIRONMENT = MVS/XA 2.1.7                               *
*                                                                     *
*  FUNCTION = THIS WILL TAPE DISK/TAPE DUMPED JOURNALS OR LOGS        *
*             AN MERGE THEM INTO ONE FILE. THIS IS HELPFUL FOR        *
*             RECOVERY AND REPORTING PURPOSES                         *
*             (SEE MEMBER MRGJNLO# FOR PROCESSING EXAMPLE)            *
*                                                                     *
*  NOTES = NONE                                                       *
*                                                                     *
*   REGISTER USAGE:                                                   *
*                                                                     *
*           R1 .....                                                  *
*           R2 .....                                                  *
*           R3 .....                                                  *
*           R4 .....                                                  *
*           R5 .....                                                  *
*           R6 .....                                                  *
*           R7 .....                                                  *
*           R8 .....                                                  *
*           R9 .....                                                  *
*          R10 .....                                                  *
*          R11 ..... BASE+4095                                        *
*          R12 ..... BASE                                             *
*          R13 .....                                                  *
*          R14 .....                                                  *
*          R15 .....                                                  *
*                                                                     *
*             MACROS = IBM: GET, PUT, DCB, OPEN, LOCATE, CAMLST       *
*                                                                     *
*                    OTHER:                                           *
*                                                                     *
*                                                                     *
*        SUBROUTINES = PRC:                                           *
*                                                                     *
*             DSECTS = IBM:                                           *
*                                                                     *
*                    OTHER:                                           *
*                                                                     *
*             MODULE TYPE = ASMH V2.1                                 *
*                                                                     *
*                PROCESSOR = 4381-11                                  *
*                                                                     *
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
  EJECT
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
*                                                                     *
*             ENTRY POINTS = MRGJNLOG (ONLY ENTRY POINT)              *
*                                                                     *
*             INPUT = DDNAME SYSIN, INPUT PARMS                       *
*                     DDNAME JOBCARD, INSTALLATION STANDARD JOBCARD   *
*                     DDNAME PM, FOR POST PROCESSING OF THE IDMS/PM   *
*                            IF WRITTEN TO LOG (OPTIONAL)             *
*                     DDNAME POSTLOG, FOR POST PROCESSING THE LOG     *
*                            DATA SET, (OPT)                          *
*                     (SEE DSN 'MODELDCB' USED AS MODEL FOR CREATING  *
*                      GDG'S ON TAPE)                                 *
*                                                                     *
*             OUTPUT = DDNAME INTRDR, THE CREATED JCL STREAM          *
*                                                                     *
*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *
*                                                                     *
*             EXIT - ERROR = NONE                                     *
*                                                                     *
*             EXTERNAL REFERENCES = NONE                              *
*                                                                     *
*             TABLES =                                                *
*                                                                     *
*             AUTHOR = MARK V. HEDGES                                 *
*                      ADRIA LABORATORIES                             *
*                      7001 POST ROAD                                 *
*                      DUBLIN OH. 43017                               *
*                      (614) 764-8175                            PTL  *
*                                                                     *
*             MESSAGES = NONE                                         *
*                                                                     *
*             ABEND CODES = NONE - WE HOPE                            *
*                                                                     *
*                                                                     *
*                                                                     *
* -----------------------  CHANGE SECTION  ---------------------------*
*                                                                     *
* 03/23/88 ADDED                                                      *
*                                                                     *
*                                                                     *
*                                                                     *
* -----------------------  THINGS TO DO  -----------------------------*
*                                                                     *
*                                                                     *
*                                                                     *
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
         EJECT  ,
 TITLE '>>> CREATES SINGLE IMAGE OF IDMS LOGS AND JOURNALS/DAY <<<'
MRGJNLOG CSECT
         STM    R14,R12,12(R13)        * SETUP
         LR     R12,R15                *
         USING  MRGJNLOG,R12,R11       * BASE
         B      *+24+6                 * BRANCH OVER CONSTANTS
         DC     C'&SYSDATE_&SYSTIME_V1.0'
         DC     A(MRGJNLOG+4096)       *
         L      R11,*-4                *
         LA     R10,SAVE               *
         ST     R10,8(R13)             *
         ST     R13,SAVE+4             *
         LR     R13,R10                *
RC       EQU    8                      * RETURN CODE REGISTER
         LA     RC,0                   *
         SPACE
         SPLEVEL SET=2
         SPACE
         PRINT  NOGEN
         OPEN   (SYSIN,,JOBCARD,)
         OPEN   (SYSOUT,OUTPUT,INTRDR,OUTPUT)
         PRINT  GEN
         LA     R2,LOGTBL              * LOAD ADDRESS OF LOG TABLE
         ST     R2,LOGTBLA             * STORE INITIAL ADDRESS
         LA     R2,JRNLTBL             * LOAD ADDRESS OF JRNL TABLE
         ST     R2,JRNLTBLA            * STORE INITIAL ADDRESS
         EJECT
*
GETREC   GET    SYSIN                  * READ 1ST RECORD
         LR     R2,R1                  * SAVE ADDR OF RECORD
         LA     R3,40                  * MAX LENGTH OF INPUT LINES
         LR     R4,R3                  * SAVE THAT
         MVC    OREC(80),BLANKS        * ... CLEAR
         MVC    OREC(24),=C'INPUT RECORD FOLLOWS ...'
         PUT    SYSOUT,OREC            * ... AND WRITE INPUT RECORD
         MVC    OREC(80),BLANKS        * ... CLEAR
         MVC    OREC(80),0(R2)         * ... MOVE
         PUT    SYSOUT,OREC            * ... AND WRITE INPUT RECORD
         XR     R5,R5                  * GDG LEVEL INDICATOR
         CLC    0(7,R2),=C'INJRNL='    * IS THIS A JRNL
         BE     $INJRNL
         CLC    0(8,R2),=C'OUTJRNL='   * IS THE OUT JRNL GDG NAME
         BE     $OUTJRNL
         CLC    0(6,R2),=C'INLOG='     * INPUT LOG GDGNAME
         BE     $INLOG
         CLC    0(7,R2),=C'OUTLOG='    * OUTPUT LOG GDGNAME
         BE     $OUTLOG
         B      ERROR1
$INLOG   A      R2,=F'6'
         MVI    FLG,C'L'               * LOG FLAG
         B      $START
$OUTLOG  A      R2,=F'7'
         MVI    FLG,C'L'               * LOG FLAG
         B      $PARSE
$INJRNL  A      R2,=F'7'
         MVI    FLG,C'J'               * JOURNAL FLAG
         B      $START
$OUTJRNL A      R2,=F'8'
         MVI    FLG,C'J'               * JOURNAL FLAG
         B      $PARSE
$PARSE   DS     0H
         LR     R6,R2                  * SAVE ADDR OF RECORD+OFFSET
$PARSEL  A      R2,=F'1'
         CLI    0(R2),C' '             * END OF OUTLOG/JRNL GDG
         BE     $EPARSE
         BCT    R3,$PARSEL
         B      ERROR1
$EPARSE  SR     R4,R3                  * LENGTH OF GDG OUTPUT
         CLI    FLG,C'L'               * IS THIS THE LOG
         BE     $OUTL
$OUTJ    MVC    OUTJRNL(*-*),0(R6)
         EX     R4,*-6
         A      R4,=F'1'
         LA     R3,OUTJRNL
         AR     R3,R4                  * END OF GDG
         A      R3,=F'5'               * END ADDR OF DSN W/SUFFIX
         ST     R3,OUTJNLA             * SAVE END ADDR
         SR     R3,R4
         S      R3,=F'5'
         LR     R5,R3
         B      $MOVEOUT
$OUTL    MVC    OUTLOG(*-*),0(R6)
         EX     R4,*-6
         A      R4,=F'1'
         LA     R3,OUTLOG
         AR     R3,R4                  * END OF GDG
         A      R3,=F'5'               * END ADDR OF DSN W/SUFFIX
         ST     R3,OUTLOGA             * SAVE END ADDR
         SR     R3,R4
         S      R3,=F'5'
         LR     R5,R3
         B      $MOVEOUT
$MOVEOUT AR     R3,R4                  * TO END OF GDGNAME
         MVC    0(3,R3),=C'(0)'        * ADD GDG LEVEL STUFF, LOCATE
         MVC    DSN(44),BLANKS
         MVC    DSN(44),0(R5)          * MOVE  GDG OUPUT
         XR     R1,R1                  *
         LOCATE FINDSN                 *
         LTR    R15,R15                *
         BNZ    $OUTERR                * GDG LEVEL AIN'T GOOD !!!
         MVC    0(5,R3),=C'(+01)'      * ADD GDG LEVEL STUFF, NEXT 1
         B      GETREC
$OUTERR  MVC    OREC,BLANKS
         MVC    OREC(44),DSN
         PUT    SYSOUT,OREC
         MVC    OREC,BLANKS
         MVC    OREC(32),=CL32'$   ERROR LOCATING THE ABOVE GDG'
         PUT    SYSOUT,OREC
         B      ERROR1
*
 TITLE '>>> PROCESS GDGS READ FROM INPUT FILE AND BUILD TABLES <<<'
$START   LR     R6,R2                  * SAVE ADDR OF RECORD+OFFSET
LOOK     A      R2,=F'1'               * NEXT POISTION IN LINE
         CLI    0(R2),C' '             * BLANK ?
         BE     GDGEND                 * YEP, FOUND END
         BCT    R3,LOOK                * NOPE, CONTINUE LOOKING
         B      ERROR                  * TOO MANY...EXIT
GDGEND   SR     R4,R3                  * LENGTH OF DSNAME 1
         MVC    GDGNAME(44),BLANKS     *
         MVC    GDGNAME(*-*),0(R6)     * << EXEC >>
         EX     R4,*-6                 * FROM START OF GDG MOVE IT
         A      R4,=F'1'               * ADD ONE
         ST     R4,GDGL                * SAVE DSN LENGTH
         LA     R3,GDGNAME             * GET ADDR OF DSN
         AR     R3,R4                  * ... POSITION TO LAST CHAR
         MVC    0(5,R3),=C'(-00)'       * ... ADD GDG LEVEL STUFF
         ST     R3,GDGA                * STORE ENF-OF-DSN ADDR
*
 TITLE '>>> LOCATE SECTION <<<'
DOIT1    DS     0H
         MVC    DSN(44),BLANKS         *
         MVC    DSN(44),GDGNAME        * SETUP LOCATE MACRO
         LOCATE FINDSN                 *
         LTR    R15,R15                *
         BNZ    GDGEND2                * GDG LEVEL AIN'T OLD ENOUGH !!
         PUT    SYSOUT,GDGNAME         *
         MVC    ODSN,BLANKS            *
         MVC    ODSN(44),DSN           *
         L      R3,GDGL                * LOAD GDG LENGTH
         A      R3,=F'10'              * ADD TEN, WHY ? TO ADD VOLSERS
         LA     R4,ODSN                *
         AR     R4,R3                  *
         MVC    0(9,R4),=C'VOL(S) = '  *
         MVC    9(6,R4),DSNVOL1        *
         MVC    16(6,R4),DSNVOL2        *
         MVC    23(6,R4),DSNVOL3       *
*                                      *
         CLI    FLG,C'L'               * IS IT A LOG ENTRY: 'J' JRNL
         BE     LOGENT                 *
JRNLENT  L      R2,JRNLTBLA            * LOAD JRNL TABEL ADDRESS
         L      R4,GDGL                * LOAD DSN LENGTH
         A      R4,=F'5'               *
         BCTR   R4,0                   * LOAD DSN LENGTH
         MVC    0(*-*,R2),GDGNAME      *
         EX     R4,*-6                 *
         A      R2,=F'44'              *
         ST     R2,JRNLTBLA            * STORE NEW JRNL TABEL ADDRESS
         B      PUTODSN                *
LOGENT   L      R2,LOGTBLA             * LOAD LOG TABEL ADDRESS
         L      R4,GDGL                * LOAD DSN LENGTH
         A      R4,=F'5'               *
         BCTR   R4,0                   * LOAD DSN LENGTH
         MVC    0(*-*,R2),GDGNAME      *
         EX     R4,*-6                 *
         A      R2,=F'44'              *
         ST     R2,LOGTBLA             * STORE NEW LOG TABEL ADDRESS
         B      PUTODSN                *
*                                      *
PUTODSN  PUT    SYSOUT,ODSN            *
         A      R5,=F'1'               * NEW GENERATION
         CVD    R5,DWORD               * ... CONVERT IT
         UNPK   GDGLVL(2),DWORD(8)     * ... UNPACK RESULTS
         OI     GDGLVL+1,X'F0'         * ... MAKE IT READABLE
         L      R3,GDGA                * LOAD ADDR OF END OF DSN
         MVC    0(5,R3),GDGPREF        * NOW PUT THE SUFFIX ON
         B      DOIT1
GDGEND2  B      GETREC                 *
*
ERROR    LA     RC,8                   * SET RETURN CODE
         B      DONE                   * NO FILES OPEN
ERROR1   LA     RC,8                   *
         B      EOF                    * FILES OPEN
EOF      CLOSE  (SYSIN)                *
         C      RC,=F'0'               * IF RETURN CODE ^= 0 FINISH
         BNE    CLOSOUT                *
         MVC    OREC(80),BLANKS        *
         CLI    OUTJRNL,C' '           * NO JOURNAL OUT DATASET
         BE     ERRJRNL                *
         CLI    OUTLOG,C' '            * NO LOG OUT DATASET
         BE     ERRLOG                 *
JOBPROC  DS     0H                     * PROCESS JOBCARD FILE
         GET    JOBCARD,OREC           *
         PUT    INTRDR,OREC            *
         B      JOBPROC                *
EOFJOB   CLOSE  (JOBCARD)              * E-O-F
*
         EJECT
         CLI    JRNLTBL,C' '           * ANY JOURNALS OUT THERE ?
         BE     $PUTLOG                * NOPE, DO LOG
         LA     R2,JCLJRNL             *
         LA     R3,ENDJRNL             *
         ST     R6,SAVE2
         L      R6,OUTJNLA             * ADDR OF START OF DSNAME
         MVI    0(R6),C','             * MOVE ',' FOR CONTINUATION
         L      R6,SAVE2
PUTJRNL  MVC    OREC(80),0(R2)         *
         PUT    INTRDR,OREC            *
         A      R2,=F'80'              *
         BCT    R3,PUTJRNL             *
*                                      *
         LA     R2,JRNLTBL             * LOAD JOURNAL TABEL ADDR
         MVC    JRNLDSN(44),0(R2)      *
*
JRNLDCB  LA     R6,JRNLDSN             * ADD PRIMARY DCB
         L      R7,GDGL                * LOAD DSN LENGTH AND LENGTH OF.
         A      R7,=F'5'               * L'(+00)
         AR     R6,R7
         MVI    0(R6),C','
*
         MVC    OREC(80),JRNLIN        * MOVE
         MVC    OREC+2(6),=C'SYSUT1'   *
         PUT    INTRDR,OREC            *
         MVC    OREC(80),=CL80'//         DCB=BLKSIZE=32000'
         PUT    INTRDR,OREC            *
         MVC    JRNLIN+2(6),BLANKS     *
         A      R2,=F'44'              *
         CLI    0(R2),C' '             *
         BE     $PUTLOG                *
PUTJRNL1 MVC    JRNLDSN(44),0(R2)      *
         MVC    OREC(80),JRNLIN        *
         PUT    INTRDR,OREC            *
         A      R2,=F'44'              *
         CLI    0(R2),C' '             *
         BE     $PUTLOG                *
         B      PUTJRNL1               *
*
$PUTLOG  DS     0H
         CLI    LOGTBL,C' '            * ANY LOG ENTRIES OUT THERE ?
         BE     ALLDONE                * NOPE, FINISHED
         LA     R2,JCLLOG              *
         LA     R3,ENDLOG              *
*                                      * ADD COMMA @ END OF DSN
         ST     R6,SAVE2
         L      R6,OUTLOGA             * ADDR OF START OF DSNAME
         MVI    0(R6),C','             * MOVE ',' FOR CONTINUATION
         L      R6,SAVE2
*                                      *
PUTLOG   MVC    OREC(80),0(R2)         *
         PUT    INTRDR,OREC            *
         A      R2,=F'80'              *
         BCT    R3,PUTLOG              *
*
         LA     R2,LOGTBL              *
         MVC    LOGDSN(44),0(R2)       *
*
LOGDCB   LA     R6,LOGDSN              * ADD PRIMARY DCB
         L      R7,GDGL                * LOAD DSN LENGTH AND LENGTH OF.
         A      R7,=F'5'               * L'(+00)
         AR     R6,R7
         A      R6,=F'10'
         MVI    0(R6),C','
*
         MVC    OREC(80),LOGIN         *
         MVC    OREC+2(6),=C'SYSUT1'   *
         PUT    INTRDR,OREC            *
         MVC    OREC(80),=CL80'//         DCB=BLKSIZE=32568'
         PUT    INTRDR,OREC            *
         A      R2,=F'44'              *
         CLI    0(R2),C' '             *
         BE     OPENPM                 *
PUTLOG1  MVC    LOGDSN(44),0(R2)       *
         MVC    OREC(80),LOGIN         *
         PUT    INTRDR,OREC            *
         A      R2,=F'44'              *
         CLI    0(R2),C' '             *
         BE     OPENPM                 *
         B      PUTLOG1                *
*                                      *
OPENPM   RDJFCB PM                     *
         LTR    R15,R15                *
         BNZ    ALLDONE                *
         OPEN   (PM,)                  *
GETPM    GET    PM,OREC                *
         PUT    INTRDR,OREC            *
         B      GETPM                  *
EOFPM    MVC    OREC(25),=C'//SYS011 DD DISP=SHR,DSN='
         ST     R6,SAVE2               *
         L      R6,OUTLOGA             * ADDR OF START OF DSNAME
         MVI    0(R6),C' '             * MOVE ' ' FOR CONTINUATION
         L      R6,SAVE2               *
         MVC    OREC+25(80-25),OUTLOG  *
         PUT    INTRDR,OREC            *
         CLOSE  (PM)                   *
         B      ALLDONE                *
*                                      *
ERRJRNL  MVC    OREC(30),=C'... MISSING "OUTJRNL=" GDGNAME'
         PUT    SYSOUT,OREC            *
         B      CLOSOUT                *
ERRLOG   MVC    OREC(30),=C'... MISSING "OUTLOG=" GDGNAME '
         PUT    SYSOUT,OREC            *
         B      CLOSOUT                *
ALLDONE  DS     0H                     * CHECK FOR POST LOG PROCESSING
         CLI    LOGTBL,C' '            * ANY LOG ENTRIES OUT THERE ?
         BE     NPOSTLOG
         RDJFCB POSTLOG                * ANY MORE JCL TO PEND ON ??
         LTR    R15,R15
         BNZ    NPOSTLOG
         OPEN   (POSTLOG,)
POSTLOGL GET    POSTLOG,OREC
         PUT    INTRDR,OREC
         B      POSTLOGL
EOFPOST CLOSE (POSTLOG)
NPOSTLOG XR     R3,R3                  * DDNAME SUFFIX
         PUT    INTRDR,SRCEXEC         *
         MVC    OREC(80),BLANKS        *
         LA     R2,JRNLTBL             *
CHKJNL   CLI    0(R2),C' '             *
         BE     SRCLOG                 *
         MVC    SRCDSN(38),0(R2)       *
         A      R3,=F'1'               *
         CVD    R3,DWORD               *
         UNPK   SRCSUFF(2),DWORD+4(4)  *
         OI     SRCSUFF+1,X'F0'        *
         PUT    INTRDR,SRCDDN          *
         A      R2,=F'44'              *
         B      CHKJNL                 *
SRCLOG   LA     R2,LOGTBL              *
CHKLOG   CLI    0(R2),C' '             *
         BE     CLOSOUT                *
         MVC    SRCDSN(38),0(R2)       *
         A      R3,=F'1'               *
         CVD    R3,DWORD               *
         UNPK   SRCSUFF(2),DWORD+4(4)  *
         OI     SRCSUFF+1,X'F0'        *
         PUT    INTRDR,SRCDDN          *
         A      R2,=F'44'              *
         B      CHKLOG                 *
CLOSOUT  DS     0H                     *
         CLOSE  (SYSOUT)               *
         CLOSE  (INTRDR)
*
CLEAR15  SR     R15,R15                * ZERO RETURN REGISTER
DONE     LR     R15,RC                 * LOAD RETURN CODE
         L      R13,SAVE+4             * RESTORE OLD SAVE AREA ADDR.
         L      R14,12(R13)            * RETURN ADDRESS
         LM     R0,R12,20(R13)         * REST OF THE REGS
         BR     R14                    * RETURN
 TITLE '>>> DATA SECTION <<<'
SAVE     DS    18F
SAVE2    DS    6F
FLG      DS    C                       *
GDGL     DS    F                       * DSN LENGTH
GDGA     DS    F                       * ADDRESS INTO DSN FOR GDG
GDGNAME  DC    CL80' '                 * 1ST DSN
GDGPREF  DC    CL2'(-'                 *
GDGLVL   DC    CL2' '                  *
GDGSUFF  DC    CL1')'                  *
*
BLANKS   DC    CL125' '
         DS    0D
DWORD    DS    D
*
OSYSOUT  DC    CL80' '
         SPACE 2
ODSN     DC     CL80' '
OREC     DC     CL80' '
FINDSN   CAMLST NAME,DSN,,DSNAREA
DSN      DC     CL44' '
DSNAREA  DS     0D
         DC     265C' '
NUMVOLS  EQU    DSNAREA                * HALF WORD
DSNVOL1  EQU    DSNAREA+6              *
DSNVOL2  EQU    DSNAREA+6+12           *
DSNVOL3  EQU    DSNAREA+6+12+12        *
DSNVOL4  EQU    DSNAREA+6+12+12+12     *
DSNVOL5  EQU    DSNAREA+6+12+12+12+12  *
DSNVOL6  EQU    DSNAREA+6+12+12+12+12+12 *
JCLLOG   DS     0H                     *
         DC     CL80'//LOGMERGE EXEC PGM=IEBGENER,REGION=4M           '
         DC     CL80'//SYSPRINT DD  SYSOUT=(,)                        '
         DC     CL80'//SYSIN    DD  DUMMY                             '
         DC     CL80'//SYSUT2   DD  DSN=LOGGDG                        '
OUTLOG   EQU    *-80+19
       DC     CL80'//         DISP=(NEW,CATLG,DELETE),UNIT=TAPE,      '
 DC CL80'//         DCB=(MODELDCB,RECFM=VB,LRECL=288,BLKSIZE=32568), '
       DC     CL80'//         LABEL=(1,SL,EXPDT=99000),VOL=(,RETAIN)  '
ENDLOG   EQU    (*-JCLLOG)/80          * NUMBER OF RECORDS
OUTLOGA  DS     F                      * END ADDR OF LOG DSN W/O ','
LOGIN    DC     CL80'//         DD  DISP=SHR,DSN=                     '
LOGDSN   EQU    *-80+28                *
LOGTBL   DC     10CL44' '
LOGTBLA  DS     F
         SPACE
JCLJRNL  DS     0H                     *
         DC     CL80'//JNLMERGE EXEC PGM=IEBGENER,REGION=4M           '
         DC     CL80'//SYSPRINT DD  SYSOUT=(,)                        '
         DC     CL80'//SYSIN    DD  DUMMY                             '
         DC     CL80'//SYSUT2   DD  DSN=JRNLGDG                       '
OUTJRNL  EQU    *-80+19
         DC     CL80'//         DISP=(NEW,CATLG,DELETE),UNIT=TAPE,    '
 DC CL80'//         DCB=(MODELDCB,RECFM=FB,LRECL=8000,BLKSIZE=32000), '
         DC     CL80'//         LABEL=(1,SL,EXPDT=99000)              '
ENDJRNL  EQU    (*-JCLJRNL)/80         * NUMBER OF RECORDS
OUTJNLA  DS     F                      * END ADDR OF LOG DSN W/O ','
JRNLIN   DC     CL80'//         DD  DISP=SHR,DSN=                     '
JRNLDSN  EQU    *-80+28                *
JRNLTBL  DC     10CL44' '
JRNLTBLA DS     F
*
SRCEXEC  DC     CL80'//SCRATCH EXEC PGM=IEFBR14,COND=(0,LT)           '
SRCDDN   DC     CL80'//DDN1     DD  DISP=(OLD,DELETE,KEEP),DSN=       '
SRCSUFF  EQU    *-80+5
SRCDSN   EQU    *-80+42
         SPACE 2
         PRINT NOGEN
SYSIN    DCB   DDNAME=SYSIN,LRECL=80,RECFM=FB,DSORG=PS,                X
               MACRF=GL,EODAD=EOF
JOBCARD  DCB   DDNAME=JOBCARD,LRECL=80,RECFM=FB,DSORG=PS,              X
               MACRF=GM,EODAD=EOFJOB
PM       DCB   DDNAME=PM,LRECL=80,RECFM=FB,DSORG=PS,                   X
               MACRF=GM,EODAD=EOFPM,EXLST=EXLST
POSTLOG  DCB   DDNAME=POSTLOG,LRECL=80,RECFM=FB,DSORG=PS,              X
               MACRF=GM,EODAD=EOFPOST,EXLST=EXLST
INTRDR   DCB   DDNAME=INTRDR,LRECL=80,BLKSIZE=80,RECFM=F,DSORG=PS,     X
               MACRF=PM
SYSOUT   DCB   DDNAME=SYSOUT,LRECL=80,BLKSIZE=23440,RECFM=FB,DSORG=PS, X
               MACRF=PM
EXLST    DC    X'87',AL3(JFCB)         *
JFCB     DS    0H                      *
         IEFJFCBN LIST=NO              *
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
