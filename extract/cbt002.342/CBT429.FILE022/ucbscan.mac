*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
*                                                                     *
*             MODULE NAME = UCBSCAN                                   *
*                                                                     *
*             DESCRIPTIVE NAME =  UNIT CONTROL BLOCK SCANNING ROUTINE *
*                THIS PROGRAM SCAN ALL OR SELECTIVE UCB'S, AND        *
*                DISPLAYS OR PRINTS THE INFORMATION                   *
*                                                                     *
*             OPERATING ENVIRONMENT = MVS/XA 2.1 AND ABOVE            *
*                                                                     *
*             FUNCTION =                                              *
*                DISPLAY UNIT-ADDRESSES AND ASSOCIATED CHANNEL-PATHS  *
*                                                                     *
*             NOTES =  SOME                                           *
*                                                                     *
*              REGISTER USAGE:                                        *
*                                                                     *
*                          R1 ..... PASSING PARMS                     *
*                          R2 ..... ADDRESSING OF CVT PREFIX          *
*                          R3 ..... ADDRESSING OF UCB                 *
*                          R4 ..... ADDRESSING OF UCB EXTENSION       *
*                          R5 ..... WORK REG: VARIABLE                *
*                          R6 ..... WORK REG: VARIABLE                *
*                          R7 ..... WORK REG: VARIABLE                *
*                          R8 ..... WORK REG: VARIABLE                *
*                          R9 ..... LINES PER PAGE COUNTER            *
*                         R10 ..... LINE COUNTER                      *
*     BASE2               R11 ..... BASE+4096                         *
*                         R12 ..... BASE REG                          *
*                         R13 ..... OPEN                              *
*                  BALREG,R14 ..... FOR BRANCHING                     *
*                         R15 ..... USUAL                             *
*                                                                     *
*             MACROS = IBM: CVT, IHAASCB, IHAPSA, IEFUCBOB, DCB,      *
*                           RDJFCB, LSPACE(SVC 78), CVAFTST           *
*                    OTHER: UCBTYPES - (SEE DEBUGGING-VOLUME 5)       *
*                                      IT LISTS DEVICE TYPES          *
*                           MODE - SET AMODE                          *
*                           TESTOPEN - CHECK FOR OPEN DCB (SET RC)    *
*                                                                     *
*             DSECTS = IBM: CVT, IHAASCB, IHAPSA, IEFUCBOB            *
*                                                                     *
*                    OTHER: NONE                                      *
*                                                                     *
*             MODULE TYPE = PROCEDURE                                 *
*                                                                     *
*                PROCESSOR = ASHM                                     *
*                                                                     *
*             ENTRY POINTS = UCBSCAN  (ONLY ENTRY POINT)              *
*                                                                     *
*             INPUT = NONE                                            *
*                                                                     *
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
  EJECT
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
*                                                                     *
*             OUTPUT = TO DDNAME SYSOUT, TPUT'S UNDER TMP,            *
*                      OR  WTO'S IF RUNNING AS A STARTED TASK !!!     *
*                                                                     *
*                      (NOTE: SYSOUT IS OPENED AS A DSORG=PS FILE     *
*                             RECFM=FBA,LRECL=133)                    *
*                                                                     *
*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *
*                                                                     *
*             EXIT - ERROR = NONE                                     *
*                                                                     *
*             EXTERNAL REFERENCES = NONE                              *
*                                                                     *
*             TABLES = NONE                                           *
*                                                                     *
*             AUTHOR = MARK V. HEDGES -                               *
*                      ADRIA LABORATORIES                             *
*                      7001 POST RD.                                  *
*                      DUBLIN OH  43017                               *
*                      (614) 764-8175                                 *
*                                                                     *
*             ACKNOWLEDGEMENTS = CANDEL REPORT FROM 1983 ON XA/UCB    *
*                                PROCESSING                           *
*                                                                     *
*             MESSAGES = NONE                                         *
*                                                                     *
*             ABEND CODES = NONE - WE HOPE                            *
*                                                                     *
*                                                                     *
* NOTE1: EACH SUB-SECTION STORES THE 'BALREG' AS ITS FIRST INSTR.     *
*       AND AS ITS LAST IT LOADS IT. SO THE INTEGRITY OF THAT         *
*       REGISTER IS NEVER IN QUESTION.                                *
*                                                                     *
* NOTE2: ALL MODE-SETTING NECCESSARY TO ADDRESS EXTENDED STORAGE      *
*        IS PERFORMED IN THE SUB-SECTION.                             *
*                                                                     *
* -----------------------  CHANGE SECTION  ---------------------------*
*                                                                     *
* ATTEMPT TO ADD EXTENSION SECTION FOR ALL UCBS   - 10/29/86          *
*                                                                     *
*                                                                     *
* -----------------------  NEEDED MODS -------------------------------*
*                                                                     *
* RE-ENTERENT ?                                                       *
* OTHER DEVICE TYPE SUPPORT ?                                         *
*                                                                     *
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
 TITLE '       UNIT CONTROL BLOCK SCAN'
UCBSCAN   CSECT
          STM    R14,R12,12(R13)       * SETUP
          LR     R12,R15
          USING  UCBSCAN,R12,R11       * R12, AND R11 BASE REGS
          B      *+24
          DC     C'&SYSDATE_&SYSTIME_V1.0'
          L      R11,BASE2
          LA     R10,SAVE
          ST     R10,8(R13)
          ST     R13,SAVE+4
          LR     R13,R10
          B      START
BASE2     DC     A(UCBSCAN+4096)
* NOTE: LOOK @ +8(UCBNXUCB) ADDR OF NEXT UCB IN IEFUCBOB
          SPACE
BALREG    EQU    14
CVTADR    EQU    2
UCBADR    EQU    3
UCBEXT1   EQU    4
          ST     R1,PARMADR
          SPACE
START     DS     0H
          BAL    BALREG,$PARM          * PARM PROCESSINF FOR DEVT'S
          BAL    BALREG,$GETDATE       * GET TODAYS DATE AND TIME
          BAL    BALREG,$WHOARE        * ARE WE TSO/BATCH ????
          BAL    BALREG,$WTORS         * IF STC THEN ISSUE WTOR
          BAL    BALREG,$READJCB       * READ JFCB
          BAL    BALREG,$UCBSCAN       * UCB LOOK-UP
          B      $FINE
          EJECT
$PARM     DS     0H
          ST     BALREG,BALSAVE        * SAVE BAL REG
          L      R2,0(,R1)             * LOAD PARM
          LH     R3,0(,R2)             * LOAD PARM LENGTH
          LTR    R3,R3                 * ANY PARM
          BZ     $PARMEND              * NOPE, END
          CLC    2(4,R2),=C'TAPE'      * TAPE ONLY ?
          BE     $PARMTP
          CLC    2(4,R2),=C'DASD'      * DASD ONLY ?
          BE     $PARMDA
          CLC    2(4,R2),=C'DISK'      * DISK ONLY ?
          BE     $PARMDA
          CLC    2(4,R2),=C'COMM'      * COMM ONLY ?
          BE     $PARMCM
          CLC    2(2,R2),=C'UR'        * UNIT-RECORD ONLY ?
          BE     $PARMUR
          CLC    2(7,R2),=C'DISPLAY'   * DISPLAY ONLY ?
          BE     $PARMDL
          CLC    2(4,R2),=C'CHAR'      * CHAR-READER ONLY ?
          BE     $PARMCH
          CLC    2(2,R2),=C'ON'        * CHAR-READER ONLY ?
          BE     $PARMON
          CLC    2(6,R2),=C'ONLINE'    * CHAR-READER ONLY ?
          BE     $PARMON
          B      $PARMEND              *  END
$PARMTP   MVI    DEVCLASS,#TAPECL
          B      $PARMEND              *  END
$PARMDA   MVI    DEVCLASS,#DASDCL
          B      $PARMEND              *  END
$PARMCM   MVI    DEVCLASS,#COMMCL
          B      $PARMEND              *  END
$PARMUR   MVI    DEVCLASS,#URCL
          B      $PARMEND              *  END
$PARMDL   MVI    DEVCLASS,#DSPCL
          B      $PARMEND              *  END
$PARMCH   MVI    DEVCLASS,#CHARCL
          B      $PARMEND              *  END
$PARMON   MVI    ONFLG,X'FF'           * SET ONLINE FLAG
          B      $PARMEND              *  END
$PARMEND  L      BALREG,BALSAVE        * LOAD BAL REG
          BR     BALREG
         EJECT
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
*                                                                     *
* GET CURRENT DATE AND TIME INFO. AND STORE IT.                       *
*                                                                     *
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
         SPACE
$GETDATE  DS     0H
          ST     BALREG,BALSAVE        * SAVE BAL REG
          $STCK                        * GET AND FORMAT DAT+TIME
          SPACE
          MVC    #WEEKDAY(9),XWEEKDAY  * WEEK-DAY, WORDS
          MVC    #MONTH(9),XMONTH      * MONTH, WORDS
          MVC    #JDATE(6),XJDATE      * JULIAN DATE
          MVC    #TIME(8),XTIME        * HH:MM:SS
          MVC    #DAY(2),XDATE+3       *    DD
          MVC    #YEAR(2),XDATE+6      *       YY
          L      BALREG,BALSAVE        * RELOAD BAL REG
          BR     BALREG                * RETURN
          EJECT
$WHOARE   DS     0H
          ST     BALREG,BALSAVE        * SAVE BAL REG
          SPACE
BATCH     EQU    C'0'                  * BATCH FLAG - DEFAULT
TSO       EQU    C'T'                  * TSO FLAG
STC       EQU    C'S'                  * BATCH FLAG
          SPACE
          L      R2,CVTPTR            * CVT
          USING  CVT,R2               *
          L      R1,CVTTCBP           * CVTTCBP -
          DROP   R2
*                                     * ADDR OF A DW   NEXT+CUR. TCB
          ST     R1,DWORD             * SAVE IT
          LM     R1,R2,DWORD          * CVTTCBP - DWORD NEXT+CUR. TCB
          USING  PSA,R2               * PSA - PREFIXED SAVE AREA
          L      R3,PSAAOLD           * ASCB OLD POINTER.
          DROP   R2                   * DROP'M, EXCEPT ASCB IN R4
*----------------------------------------------------------------*
* GET THE ASCB INTO R3
* -- CHECK CONTENTS OF ASCBTSB
*    -- IF ZERO, COULD BE BATCH/STC
*       -- CHECK ASCBJBNI, NON-ZERO FOR INITAITED TASKS
*          -- IF ZERO THEN STC = C'S'
*          -- IF NON-ZERO THEN BATCH = C'B'
*    -- IF NON-ZERO THEN TSO = C'T'
*----------------------------------------------------------------*
          USING  ASCB,R3              * ASCB - ADDR SPACE C. B.
          L      R4,ASCBTSB           * ADDR OF TSB
          LTR    R4,R4                * IS IT ZERO ? (BATCH/STC)
          BZ     $TBATCH              * YEP, BATCH/STC
$TSO      MVI    FLG,TSO              * NOPE, TSO
          L      R15,=F'0'            * SET RC FOR TSO = 00
          L      R10,=F'21'           * LINE COUNT LEN
          B      $OASCB
*                                     * ... AND PASS ASCB IN R4
          SPACE
$TBATCH   CLC    ASCBJBNI(4),=X'00000000' * ADDR OF INIT TASK: IF BATCH
          BE     $STC
$BATCH    MVI    FLG,BATCH
          L      R15,=F'4'            * SET RC FOR BATCH = 04
          L      R10,=F'50'           * LINE COUNT MAX
          B      $OASCB
$STC      MVI    FLG,STC
          L      R15,=F'8'            * SET RC FOR STC = 08
          L      R10,=F'15'           * LINE COUNT MAX
$OASCB    ST     R15,WHOFLG           * STORE RETURN CODE
          ST     R10,LINECNT
          L      BALREG,BALSAVE       * LOAD BAL REG
          DROP   R3
          BR     BALREG               * RETURN
          DS     0F
          EJECT
$WTORS    DS     0H
          ST     BALREG,BALSAVE        * SAVE BAL REG
          CLI    FLG,STC
          BNE    $WTOREND
          WTOR   'UCB01 ENTER ''DASD'' ''TAPE'' ''COMM'' OR ''ALL''',  X
               ANSWER,4,RECB,ROUTCDE=(1),DESC=(11)
          WAIT   ECB=RECB
          XC     RECB,RECB
          CLC    ANSWER(4),=C'TAPE'
          BE     $WTOTAPE
          CLC    ANSWER(4),=C'DASD'
          BE     $WTODASD
          CLC    ANSWER(4),=C'COMM'
          BE     $WTOCOMM
          CLC    ANSWER(4),=C'ALL'
          BE     $WTOALL
          B      $WTOREND              *  END
$WTOTAPE  MVI    DEVCLASS,#TAPECL
          B      $WTOREND              *  END
$WTODASD  MVI    DEVCLASS,#DASDCL
          B      $WTOREND              *  END
$WTOCOMM  MVI    DEVCLASS,#COMMCL
          B      $WTOREND              *  END
$WTOALL   EQU    *                     * LIST ALL UCBS
$WTOREND  L      BALREG,BALSAVE        * SAVE BAL REG
          BR     BALREG                * RETURN
          EJECT
$READJCB  DS     0H
          ST     BALREG,BALSAVE        * SAVE BAL REG
          RDJFCB SYSOUT                * DDNAME ALLOCATED ?
          LTR    R15,R15               * TEST RESULTS
          BNZ    $ENDREAD              * NOPE, DO TPUTS
          OPEN   (SYSOUT,OUTPUT)       * OPEN SYSOUT FILE
          TESTOPEN SYSOUT              * IS DDNAME THERE
          LTR    R15,R15               * TEST OPEN
          BNZ    $ENDREAD              * NOPE, DO TPUTS
          MVI    OPENFLG,X'FF'         * GOOD OPEN, SET FLAG
OPEN      EQU    X'FF'                 * ...FOR CLI'S
$ENDREAD  L      BALREG,BALSAVE        * LOAD BAL REG
          BR     BALREG                * RETURN
          EJECT
$UCBSCAN  DS     0H
          ST     BALREG,BALSAVE        * SAVE BAL REG
          XC     WORKAREA,WORKAREA     * CLEAR R AREA
          XR     R1,R1                 * CLEAR - USED FOR 'CONVADR'
          XR     R2,R2                 * CLEAR - USED FOR CVT ADDR
          XR     R3,R3                 * CLEAR - USED UCB ADDR (DSECT)
          XR     R4,R4                 * CLEAR - WORK
          XR     R5,R5                 * USED
          XR     R6,R6                 *      FOR
          XR     R5,R5                 *          PATH
          XR     R7,R7                 *               DETERMIN-
          XR     R8,R8                 *                         ATION
          XR     R10,R10               * INNER BAL REG
          BAL    R10,$HEADER           * PRINT HEADER RECORD
          L      R2,CVTPTR             * CVT POINTER
          USING  CVT,R2                * ADDRES CVT
          SPACE
UCBLOOK   DS     0H
          C      R9,LINECNT            * COMPARE LINE COUNT
          BL     *+8                   * EQUAL DUE TO BATCH LINE/CNT
          BAL    R10,$HEADER           * PRINT HEADER RECORD
          L      R15,CVTUCBSC          * UCB SCAN ROUTINE: V-CONSTANT
          CALL   (15),(WORKAREA,DEVCLASS,ADDRUCB),VL
          LTR    R15,R15               * GOOD CALL ?
          BNZ    $UCBEND               * NOPE, ALL DONE
          L      R3,ADDRUCB            * ADDRESS OF UCB
          LTR    R3,R3                 * WAS ONE RETURNED ???
          BZ     UCBLOOK               * TRY AGAIN
          USING  UCB,R3                * ADDRESS IT
          LA     R4,UCBPRFX            * LENGTH OF UCB PREFIX
          SR     R3,R4                 * ADDRESS PREFIX
          CLI    UCBID,UCBSTND         * IS THIS A STANDARD UCB ???
          BNE    UCBLOOK               * NOPE, LOOK AGAIN
          MVC    UNITNAM(3),UCBNAME    * EBCDIC UCB NAME
          CLC    UNITNAM(3),OLDUCB     * COMPARE OLDUCB W/NEW
          BE     UCBLOOK               *
          MVC    OLDUCB(3),UNITNAM     * MAKE CURRENT VALID OLDONE
          XR     R5,R5                 * CLEAR
          LH     R5,UCBSCHNO           * SUB-CHANNEL NUMBER
          SLL    R5,8                  * R5: 00SS SS00
          ST     R5,#SCHANO            * ...STORE IT
          OI     #SCHANO+3,X'F0'       * #SCHANO: 00SS SSF0
          L      R5,#SCHANO            * R5: 00SS SSF0
          SRL    R5,4                  * R5: 000S SSSF - PACKED
          ST     R5,#SCHANO            * STORE IT
          ED     EDSCHANO(6),#SCHANO+1 * EDIT RESULTS
          MVC    SCHANO(4),EDSCHANO+2  * SAVE RESULTS
          SPACE
* PATH DETERMINATION
          SPACE
          MVC    PATHS(8),BLANKS       * PATHS, SAVE'M
          MVC    PATHS(8),UCBCHPID     * PATHS, SAVE'M
          LA     R5,PATHS-1            * LOAD ADDRESS OF PATHS
          LA     R6,8                  * MAX CHANNEL PATHS
          MVC    #CHPIDS(32),BLANKS    * CLEAR WORK AREA
          LA     R8,#CHPIDS-4          * CHPID TABLE ADDR
PATHLOOP  LA     R5,1(,R5)             * LOAD NEXT ADDR
          CLI    0(R5),X'FF'           * EMPTY CHPID ?
          BE     PATHDONE              * YEP, ALL DONE
          XR     R7,R7                 * CLEAR
          IC     R7,0(R5)              * LOAD CHPID
          SLL    R7,8                  * SHIFT
          IC     R7,=X'F0'             * NOW R7='0000 NNF0'
          SRL    R7,4                  * NOW R7='0000 0NNF' PACKED!
          STH    R7,PPATHS             * STORE IT
          A      R8,=F'4'              * NEXT ADDR IN TABLE
          MVC    0(4,R8),EDITPATH      * MOVE EDIT
          ED     0(4,R8),PPATHS        * EDIT RESULTS
          BCT    R6,PATHLOOP           * LOOP UPTO 8 TIMES
PATHDONE  DS     0H                    * USE ONLY 1ST 4 CHANNEL PATHS
          MVC    CHPIDS(12),BLANKS
          MVC    OREC+1(132),BLANKS
          MVC    CHPIDS(2),#CHPIDS+2   * MOVE/SAVE CHANNEL PATHS
          MVC    CHPIDS+3(3),#CHPIDS+4+2
          MVC    CHPIDS+3+3(3),#CHPIDS+4+4+2
          MVC    CHPIDS+3+3+3(3),#CHPIDS+4+4+4+2
* FROM OFFSET +18 OFF UCB, EVLUATE UCB DEVICE CLASSES: UCBDVCLS -
*      SAME AS UCBTBYT3
* NOTE: AT +X'10' - +X'13' IS USED BY UCBTYPES MACRO
*
* UCB STATUS ....
*
          MVC    STATUS(L'STATUS),BLANKS         * CLEAR STATUS ADDR
          XR     R7,R7
          IC     R7,UCBSTAT
          SRL    R7,4
          SLL    R7,4
*     ONLINE  ?
          CLI    UCBSTAT,UCBONLI
          BL     $OFFLNE                * BRANCH IF LOW
*     ONLINE, ALLOCATED, PERM, SYSRES ?
          CLI    UCBSTAT,UCBONLI+UCBALOC+UCBPRES+UCBSYSR
          BNE    *+10
          MVC    STATUS(10),=C'A-RES-PERM'  * SYSRES-ONLINE
*     ONLINE, ALLOCATED, PERM  ?
          CLI    UCBSTAT,UCBONLI+UCBALOC+UCBPRES
          BNE    *+10
          MVC    STATUS(8),=C'O-A-PERM'
*     ONLINE, ALLOCATED  ?
          CLI    UCBSTAT,UCBONLI+UCBALOC
          BNE    *+10
          MVC    STATUS(3),=C'O-A'       * ALLOCATED ONLINE
*     ONLINE, PERM  ?
          CLI    UCBSTAT,UCBONLI+UCBPRES
          BNE    *+10
          MVC    STATUS(6),=C'O-PERM'    * PERM-ONLINE NOT ALLOC
*     ONLINE, PERM, SYSRES?
          CLI    UCBSTAT,UCBONLI+UCBPRES+UCBSYSR
          BNE    *+10
          MVC    STATUS(10),=C'O-RES-PERM'  * SYSRES-ONLINE
*     ONLINE, CONSOLE ?
          CLI    UCBSTAT,UCBONLI+UCBSYSR
          BNE    *+10
          MVC    STATUS(3),=C'O-C'           * CONSOLE
*     ONLINE, SECONDARY CONSOLE
          CLI    UCBSTAT,UCBONLI+UCBDADI
          BNE    *+10
          MVC    STATUS(7),=C'O-2ND-C'
          CLI    STATUS,C' '           * ANY DETERMIATION YET ?
          BNE    $UCBSTX               * YEP, GO HOME
          MVC    STATUS(5),=C'O-PUB'   * NOPE, PUBLIC ONLINE
          CLI    0(R7),UCBRESV         * RESERVED BIT ON ?
          BNE    *+8
          MVI    RSVD,C'R'
          B      $UCBSTX               * NOW GO HOME
*     OFFLINE
$OFFLNE   CLI    UCBSTAT,UCBCHGS       * STATUS OF UCB: CHANGING ?
          BE     $CHNG                 * YEP, TELL US
          MVC    STATUS(3),=C'OFF'     * NOPE, OFFLINE
          CLI    ONFLG,X'FF'
          BE     UCBLOOK               * SKIP RECORD
          B      $UCBSTX               *
$CHNG     MVC    STATUS(3),=C'CHG'     * YEP, CHANGING
$UCBSTX   DS     0H
*
* DEVICE STATUS FLAGS FOR DISABLED UCB'S
*
          MVC    DEVFLAGS(L'DEVFLAGS),BLANKS
* UCB FLAG BYTE A
          XR     R7,R7                 * CLEAR R7
          XR     R8,R8                 * CLEAR R8: DEVICE FLG ADR
          LA     R8,DEVFLAGS           * ADDR OF DEVICE FLAGS
          IC     R7,UCBFLA             * INSERT UCB FLAG 1
          LTR    R7,R7                 * CHECK FOR FLAGS
          BZ     $ENDEV1               * END, DEVICE FLAG CHK ONE
          ST     R7,#UCBFLG            * STORE IT
          SRL    R7,4                  * SHIFT SO R7: 0000 000X
          SLL    R7,4                  * SHIFT SO R7: 0000 00X0
          STC    R7,#UCBFLGC           * STORE HALF FLAG
*  UCB TEMP UNUSABLE, NOT-READY, SUB-CHAN UNUSABLE, PENDING SENSE
          CLI    #UCBFLGC,UCBDEFER
          BNE    *+14
          MVC    0(5,R8),=C'DEFRD'
          A      R8,=F'6'
          CLI    #UCBFLGC,UCBNRY
          BNE    *+14
          MVC    0(4,R8),=C'NRDY'
          A      R8,=F'5'
          CLI    #UCBFLGC,UCBPERM
          BNE    *+14
          MVC    0(14,R8),=C'SUBCH-UNUSABLE'
          A      R8,=F'15'
          CLI    #UCBFLGC,UCBPSNS
          BNE    *+14
          MVC    0(13,R8),=C'PENDING-SENSE'
          A      R8,=F'14'
*     NEXT NIBBLE ....
          L      R7,#UCBFLG            * R7: 0000 00XX
          SLL    R7,28                 * R7: X000 0000
          SRL    R7,28                 * R7: 0000 000X
          LTR    R7,R7
          BZ     $ENDEV1
          STC    R7,#UCBFLGC           * STORE HALF FLAG
*     SSCH, HSCH, CSCH, BOXED ?
          CLI    #UCBFLGC,UCBSTRT
          BNE    *+14
          MVC    0(4,R8),=C'SSCH'
          A      R8,=F'5'
          CLI    #UCBFLGC,UCBHALT
          BNE    *+14
          MVC    0(4,R8),=C'HSCH'
          A      R8,=F'5'
          CLI    #UCBFLGC,UCBCLEAR
          BNE    *+14
          MVC    0(4,R8),=C'CSCH'
          A      R8,=F'5'
          CLI    #UCBFLGC,UCBBOX
          BNE    *+14
          MVC    0(8,R8),=C'BOXED !!'
          A      R8,=F'9'
$ENDEV1   DS     0H
* UCB FLAG BYTE B
          XR     R7,R7                 * CLEAR R7
          IC     R7,UCBFLB             * INSERT UCB FLAG 1
          LTR    R7,R7                 * CHECK FOR FLAGS
          BZ     $ENDEV2               * END, DEVICE FLAG CHK ONE
          ST     R7,#UCBFLG            * STORE IT
          SRL    R7,4                  * SHIFT SO R7: 0000 000X
          SLL    R7,4                  * SHIFT SO R7: 0000 00X0
          STC    R7,#UCBFLGC           * STORE RESULTS
* INTERUPT, NO OPERATIONAL PATHS, NOT CONN TO SUB-CHAN, NON-NORM UCB
          CLI    #UCBFLGC,UCBINCPT
          BNE    *+14
          MVC    0(9,R8),=C'INTERCEPT'
          A      R8,=F'10'
          CLI    #UCBFLGC,UCBNOPTH
          BNE    *+14
          MVC    0(7,R8),=C'NO-PATH'
          A      R8,=F'8'
          CLI    #UCBFLGC,UCBNOCON
          BNE    *+14
          MVC    0(16,R8),=C'NOT-CONN-SUBCHAN'
          A      R8,=F'17'
          CLI    #UCBFLGC,UCBHILVL
          BNE    *+14
          MVC    0(12,R8),=C'NOT-NORM-UCB'
          A      R8,=F'13'
*     NEXT NIBBLE
          L      R7,#UCBFLG            * R7: 0000 00XX
          SLL    R7,28                 * R7: X000 0000
          SRL    R7,28                 * R7: 0000 000X
          LTR    R7,R7                 * ANYTHING THERE ?
          BZ     $ENDEV2               * NOPE, END
          STC    R7,#UCBFLGC           * STORE HALF FLAG
          CLI    #UCBFLGC,UCBHDET      * HOT I/O ?????
          BNE    *+10
          MVC    0(10,R8),=C'HOT I/O !!'
$ENDEV2   DS     0H
          EJECT
*--------------------------------------*
* R2 = ADDR(CVT)                       *
* R3 = ADDR(UCB)                       *
* R4 = ADDR(UCBEXT1)                   *
*--------------------------------------*
          XR     R4,R4                 * UCB EXTENSION
          XR     R5,R5                 * WORK
          L      R4,UCBEXTPT           * EXTENSION
          USING  UCBCMEXT,R4           * ADDRESS IT
          MVC    DEVT(L'DEVT),BLANKS   * CLEAR DEVICE TYPE
          CLI    UCBDVCLS,UCB3TAPE     * TAPE  ACCESS:
          BE     $TAPE
          CLI    UCBDVCLS,UCB3COMM     * COMMUNICATIONS DEVICE
          BE     $COMM
          CLI    UCBDVCLS,UCB3CTC      * CHAN-TO-CHAN ADAPTER
          BE     $CTC
          CLI    UCBDVCLS,UCB3DACC     * DIRECT ACCESS:
          BE     $DASD
          CLI    UCBDVCLS,UCB3DISP     * DISPLAY DEVICE
          BE     $DISPLAY
          CLI    UCBDVCLS,UCB3UREC     * UNIT RECORD DEVICE
          BE     $UREC
          CLI    UCBDVCLS,UCB3CHAR     * CHARACTER READER
          BE     $CHARDR
          MVC    DEVT(4),=C'UNKN'      * UNKNOWN DEVICE TYPE
          B      $PUTREC
$CTC      EQU    *
          MVC    DEVT(3),=C'CTC'      * CHANNEL-TO- CHANNEL
          B      $PUTREC
$DISPLAY  EQU    *
          MVC    DEVT(4),=C'327X'      * DEFAULT DISPLAY
          CLI    #TYPE3,GC3HEX10       * GRAPHICS
          BNE    *+10
          MVC    DEVT(6),=C'327X-G'
          B      $PUTREC
$UREC     EQU    *
          CLI    #TYPE4,UR4HEX06       * 3505
          BNE    *+10
          MVC    DEVT(4),=C'3505'
          CLI    #TYPE4,UR4HEX08       * PRINTERS
          BNE    *+10
          MVC    DEVT(4),=C'PRT '
          CLI    #TYPE4,UR4HEX09       * 3211
          BNE    *+10
          MVC    DEVT(4),=C'3211'
          CLI    #TYPE4,UR4HEX0A       * 1443
          BNE    *+10
          MVC    DEVT(4),=C'1443'
          CLI    #TYPE4,UR4HEX0B       * 3203
          BNE    *+10
          MVC    DEVT(4),=C'3203'
          CLI    #TYPE4,UR4HEX0C       * 3525 CARD PUNCH
          BNE    *+10
          MVC    DEVT(4),=C'3525'
          CLI    #TYPE4,UR4HEX0E       * 3800 CARD PUNCH
          BNE    *+10
          MVC    DEVT(4),=C'3800'
          CLI    #TYPE4,UR4HEX11       * 3263 PRINTER
          BNE    *+10
          MVC    DEVT(4),=C'3800'
          CLI    #TYPE4,UR4HEX16       * 3890 DOCUMENT PROCESSOR
          BNE    *+10
          MVC    DEVT(4),=C'3890'
          CLI    #TYPE4,UR4HEX42       * 3851 MASS-STOR
          BNE    *+10
          MVC    DEVT(4),=C'3851'
          CLI    #TYPE4,UR4HEX4C       * 3838 ARRAY PROCESSOR
          BNE    *+10
          MVC    DEVT(4),=C'3838'
          B      $PUTREC
$COMM     EQU    *
          CLI    #TYPE4,CE4HEXF0       * ADPATER TYPE
          BNE    *+10
          MVC    DEVT(4),=C'ADPT'
          CLI    #TYPE4,CE4HEX10       * ADPATER TYPE I
          BNE    *+10
          MVC    DEVT(6),=C'ADPT-I'
          CLI    #TYPE4,CE4HEX20       * ADPATER TYPE I
          BNE    *+10
          MVC    DEVT(7),=C'ADPT-II'
          CLI    #TYPE4,CE4HEX30       * TELEGRAPH ADP TYPE
          BNE    *+10
          MVC    DEVT(8),=C'TEL-APDT'
          CLI    #TYPE4,CE4HEX40       * TELEGRAPH ADP TYPE I
          BNE    *+10
          MVC    DEVT(7),=C'TEL-A-I'
          CLI    #TYPE4,CE4HEX50       * TELEGRAPH ADP TYPE II
          BNE    *+10
          MVC    DEVT(8),=C'TEL-A-II'
          CLI    #TYPE4,CE4HEX60       * WORLD TRADE TELE-ADP
          BNE    *+10
          MVC    DEVT(4),=C'WTTA'
          CLI    #TYPE4,CE4HEX70       * SYN -ADP I
          BNE    *+10
          MVC    DEVT(8),=C'SYNC-ADI'
          CLI    #TYPE4,CE4HEX80       * ADP III
          BNE    *+10
          MVC    DEVT(8),=C'SYC-AIII'
          CLI    #TYPE4,CE4HEX90       * SYNC -ADP II
          BNE    *+10
          MVC    DEVT(8),=C'SYNC-AII'
          CLI    #TYPE4,CE4HEX0F       * CONTROL UNIT
          BNE    *+10
          MVC    DEVT(8),=C'CNTL-UNT'
          CLI    #TYPE4,CE4HEX01       * 2702
          BNE    *+10
          MVC    DEVT(4),=C'2702'
          CLI    #TYPE4,CE4HEX02       * 2701
          BNE    *+10
          MVC    DEVT(4),=C'2701'
          CLI    #TYPE4,CE4HEX03       * 2703
          BNE    *+10
          MVC    DEVT(4),=C'2703'
          CLI    #TYPE4,CE4HEX04       * 2955
          BNE    *+10
          MVC    DEVT(4),=C'2955'
          CLI    #TYPE4,CE4HEX15       * 3704/3705/3725
          BNE    *+10
          MVC    DEVT(4),=C'370X'
          CLI    #TYPE4,CE4HEXF1       * 3791L
          BNE    *+10
          MVC    DEVT(5),=C'3791L'
          B      $PUTREC
$CHARDR   MVC    DEVT(4),=C'CHRD'
          B      $PUTREC
          EJECT
$TAPE     EQU    *                     *
          CLI    #TYPE4,MT4HEX80       * 3480'S ?
          BNE    *+10
          MVC    DEVT(4),=C'3480'
          CLI    #TYPE4,MT4HEX03       * 3420'S ?
          BNE    $COMMON               * SKIP SHARABLE DEV NOT 3420
          MVC    DEVT(4),=C'3420'
*----
* UCBVOLI, UCBSTAB, AND UCBDMCT ARE SAME FOR TAPE AND DISK
*----
          CLI    UCBSTAB,UCBDVSHR      * IS DEVICE SHARABLE
          BNE    *+14
          MVC    0(4,R8),=C'NSHR'
          A      R8,=F'5'
          CLI    UCBSTAB,UCBDVSHR+UCBBALB * IS DEVICE SHARABLE
          BNE    *+14
          MVC    0(4,R8),=C'NSHR'
          A      R8,=F'5'
          B      $COMMON
          SPACE
$DASD     EQU    *                     *
          CLI    #TYPE4,DA4HEX07       * 2305 FIXED HEAD
          BNE    *+10
          MVC    DEVT(4),=C'2305'
          CLI    #TYPE4,DA4HEX09       * 3330-1,2
          BNE    *+10
          MVC    DEVT(8),=C'3330-1,2'
          CLI    #TYPE4,DA4HEX0A       * 3340
          BNE    *+10
          MVC    DEVT(4),=C'3340'
          CLI    #TYPE4,DA4HEX0B       * 3350
          BNE    *+10
          MVC    DEVT(4),=C'3350'
          CLI    #TYPE4,DA4HEX0C       * 3375
          BNE    *+10
          MVC    DEVT(4),=C'3375'
          CLI    #TYPE4,DA4HEX0D       * 3330-11
          BNE    *+10
          MVC    DEVT(7),=C'3330-11'
          CLI    #TYPE4,DA4HEX0E       * 3380
          BNE    *+10
          MVC    DEVT(4),=C'3380'
*
*----
* UCBVOLI, UCBSTAB, AND UCBDMCT ARE SAME FOR TAPE AND DISK
*----
*
          CLI    UCBSTAB,UCBPGFL+UCBBPRV+UCBSHAR  * PRIV, PAGE, SHR
          BNE    *+14
          MVC    0(9,R8),=C'PRIV-PAGE-SHR'
          A      R8,=F'14'
          CLI    UCBSTAB,UCBPGFL+UCBBPRV          * PAGE, PRIV
          BNE    *+14
          MVC    0(9,R8),=C'PRIV-PAGE'
          A      R8,=F'10'
          CLI    UCBSTAB,UCBPGFL+UCBBPUB          * PAGE, PUB ???
          BNE    *+14
          MVC    0(9,R8),=C'PUB-PAGE?'
          A      R8,=F'10'
          CLI    UCBSTAB,UCBPGFL+UCBBSTR          * PAGE, STG ???
          BNE    *+14
          MVC    0(9,R8),=C'STG-PAGE?'
          A      R8,=F'10'
          CLI    UCBSTAB,UCBBPRV+UCBSHAR          * PRIVATE - SHR ???
          BNE    *+14
          MVC    0(8,R8),=C'PRIV-SHR'
          A      R8,=F'9'
          CLI    UCBSTAB,UCBBPRV                  * JUST PRIVATE
          BNE    *+14
          MVC    0(4,R8),=C'PRIV'
          A      R8,=F'5'
          CLI    UCBSTAB,UCBBPUB+UCBSHAR          * PUB - SHR ???
          BNE    *+14
          MVC    0(7,R8),=C'PUB-SHR'
          A      R8,=F'8'
          CLI    UCBSTAB,UCBBPUB                  * JUST PUBLIC
          BNE    *+14
          MVC    0(3,R8),=C'PUB'
          A      R8,=F'4'
          CLI    UCBSTAB,UCBBSTR+UCBSHAR          * STG   SHR ???
          BNE    *+14
          MVC    0(7,R8),=C'STG-SHR'
          A      R8,=F'8'
          CLI    UCBSTAB,UCBBSTR                  * JUST STORAGE
          BNE    *+14
          MVC    0(3,R8),=C'STG'
          A      R8,=F'4'
* LOOK FOR CATALOG ON VOLUME
          XR     R5,R5                 * CLEAR
          IC     R5,UCBSTAB            * INSERT UCBSTAB
          SLL    R5,31                 * LEAVE LAST BIT IF ANY
          SRL    R5,31                 * SHIFT IT BACK
          STC    R5,#UCBSTAB           * SAVE IT
          CLI    #UCBSTAB,UCBBNUL      * IS THIS A CONTROL VOLUME
          BNE    *+14
          MVC    0(3,R8),=C'CAT'
          A      R8,=F'4'
          SPACE
* HOW MUCH SPACE ON DISK PACK ????
          SPACE
          XR     R1,R1
          XR     R0,R0
          LA     R0,UCBCMSEG           * LOAD UCB ADDR
*         LA     R0,ADDRUCB            * LOAD UCB ADDR:     02/09/88 MH
          LA     R1,WORKA              * LOAD ADDR OF WORKAREA: CL30
          SVC    78                    * ISSUE LSPACE
          ST     R15,SVC78RC
          LTR    R15,R15
          BNZ    $CVAFTST
          MVC    WORKA(6),=6C' '       * CLEAR 'SPACE=' MESSAGE
          MVC    FREECYL(4),#CYL       * FREE CLYS
          MVC    FREETRK(4),#TRK       * FREE TRKS
          MVC    FREEEXT(4),#EXT       * AVAILABLE EXTENTS
          MVC    CONTCYL(4),#CCYL      * CONTIG AVAIL CYLS
          MVC    CONTTRK(4),#CTRK      * CONTIG AVAIL TRKS
          SPACE
* ISSUE THE CVAFTST MACRO TO DETERMINE IF INDEXED VTOC'S ON ???
          SPACE
$CVAFTST  DS     0H
          L      R5,ADDRUCB
          CVAFTST  UCB=(5)
          LTR    R15,R15               * IS RC=8, SYSTEM SUPP, INDEXED
          BNZ    $NOINDEX              * SKIP ALL OTHERS
          MVC    0(7,R8),=C'INDEXED'
          A      R8,=F'8'
$NOINDEX  EQU    *
          B      $COMMON
$COMMON   DS     0H                    * COMMON SECTION FOR TAPE+DASD
          SPACE
* VOLSER DETERMIATION
          SPACE
          MVC    VOLSER(6),UCBVOLI     * SAVE VOLSER
          CLC    VOLSER(6),=X'000000000000' * IF VOLSER HEX ZEROES
          BNE    *+10                  * NOPE, CONTINUE
          MVC    VOLSER(6),BLANKS      * YEP, BLANK IT OUT
          CLI    UCBDVCLS,UCB3DACC     * DIRECT ACCESS:
          BNE    SKPUSER               * NOPE, SKIP # USERS DETERM.
          L      R5,UCBDDT             * ADD OF DEVICE DEPENDENT TBL
          ST     R5,DEVDPND            * SAVE DEVICE DEPENDENT ADDR
          L      R5,UCBCLEXT           * DEVICE CLASS EXT
          ST     R5,DEVDPND+4          * SAVE DEVICE CLASS EXT ADDR
          LH     R5,UCBUSER            * NUMBER OF USERS
          CVD    R5,DWORD              * CONVERT IT
          MVC    XUSERS(6),EDUSERS     * EDIT RESULTS
          ED     XUSERS(6),DWORD+5     * EDIT RESULTS
          MVC    USERS(3),XUSERS+3     * EDIT RESULTS
SKPUSER   DS     0H
$PUTREC   BAL    R10,$PUTLINE          * PUT OUTPUT RECORD
          B      UCBLOOK               * LOOK SOME MORE
$UCBEND   DS     0H                    * END OF SCANNING ROUTINE
          L      BALREG,BALSAVE        * LOAD BAL REG
          BR     BALREG                * GO-BACK
*
          EJECT
*
$PUTLINE  DS     0H
          ST     R10,SAVE10            * SAVE BAL REG
          L      R15,WHOFLG            * LOAD WHO WE ARE
          B      $PUTLNE(R15)          * BRANCH BASED ON WHO
$PUTLNE   B      $PLNETSO              * 0-TSO
          B      $PLNEBTC              * 4-BATCH
          B      $PLNESTC              * 8-STC
          B      $ENDPUTL              * NOPE, HEAD BACK
$PLNETSO  DS     0H                    * PUT'S FOR TSO
          CLI    OPENFLG,OPEN          * DCB OPEN ?
          BE     $PLNEBTC              * YEP, BRANCH TO BATCH ROUTINE
          TPUT   OLINE,OLINELEN        * NOPE, ISSUE TPUTS
          A      R9,=F'1'              * ADD 1 HEADER COUNT
          CLI    UCBDVCLS,UCB3DACC     * DIRECT ACCESS ?
          BNE    $ENDPUTL              * NOPE, HEAD BACK
          L      R5,SVC78RC            * YEP, CHECK LSPACE RC
          C      R5,=F'0'              * IS IT '0'
          BNE    $ENDPUTL              * NOPE, HEAD BACK
          CLI    DEVCLASS,#DASDCL      * WAS A DEVICE CLASS SPECIFIED
          BNE    $ENDPUTL              * NOPE, HEAD BACK
          TPUT   LSPACE-4,LSPCLEN+4    * YEP, MOVE HEADER
          A      R9,=F'1'              *      ADD LINE COUNT
          B      $ENDPUTL              *      HEAD BACK
$PLNESTC  DS     0H                    * PUT'S FOR STC'S
          MVC    MESSAGE(WTOTPUTL),OLINE  * ALL IMPORTANT STUFF
          WTO    MF=(E,WTOMSG)         * ISSUE WTO
          A      R9,=F'1'              * LINE CNT
          B      $ENDPUTL              * HEAD BACK
$PLNEBTC  DS     0H                    * PUT'S FOR BATCH JOBS
          PUT    SYSOUT,OLINE-1        * DOUBLE SPACE EACH NEW UCB
          A      R9,=F'2'              * ADD HEADER COUNT: DOUBLE SPACE
          CLI    UCBDVCLS,UCB3DACC     * DIRECT ACCESS: PUT LSPACE INFO
          BNE    $ENDPUTL              * HEAD BACK
          L      R5,SVC78RC            * YEP, CHECK LSPACE RC
          C      R5,=F'0'              * IS IT '0'
          BNE    $ENDPUTL              * NOPE, HEAD BACK
          MVC    OREC+1+OLINELEN(51),LSPACE
          MVI    OREC,C'+'             * OVER PRINT
          PUT    SYSOUT,OREC
          MVI    OREC,C' '             * BACK TO NORMAL
$ENDPUTL  L      R10,SAVE10            * LOAD BAL REG
          BR     R10                   * GO BACK
          SPACE 2
$HEADER   DS     0H                    *
*
* LINES/PAGE RESET IS DONE IN EACH $HEAD... SUB SECTION (R9)
*
          ST     R10,SAVE10            * SAVE INNER BAL REG
          L      R15,WHOFLG            * LOAD WHO WE ARE
          B      $HEAD(R15)            * BRANCH BASED ON WHO
$HEAD     B      $HEADTSO              * 0-TSO
          B      $HEADBTC              * 4-BATCH
          B      $HEADSTC              * 8-STC
$HEADTSO  DS     0H
          XR     R9,R9                 * LINES/PAGE RESET
          CLI    OPENFLG,OPEN          * DCB OPEN ?
          BE     $HEADBTC              * YEP, DO PUT'S
          C      R2,=F'0'              * 1ST TIME, CVT ADDR NOT-THERE
          BE     $TPUTHDR              * YEP, JUST PUT A HEADER
          TPUT   HITENTER,L'HITENTER,ASIS
          TGET   HENTER,1              * GET 1 CHAR
*--------------------------------------*
* THIS NEXT TEST MESSES-UP THE IDEA    *
* OF THIS $HEADER ROUTINE LOOKING      *
* LIKE A SUB-ROUTINE. IF THE USER      *
* IS A 'TSO' USER THEN WE GIVE HIM THE *
* OPTION TO EXIT THE PROGRAM HERE ...  *
*--------------------------------------*
          CLI    HENTER,X'40'          * GREATER THAN ' '
          BNE    $UCBEND               * END OF SCAN !!!!!!
$TPUTHDR  TPUT   CLEAR,8,FULLSCR       * CLEAR THE SCREEN
          TPUT   TPUTREC,79            * CLEAR - USED FOR 'CONVADR'
          A      R9,=F'1'              * ADD ONE FOR HEADER
          B      $ENDHEAD
$HEADSTC  DS     0H
          MVC    MESSAGE(WTOTPUTL),TPUTREC   * ALL IMPORTANT STUFF
          WTO    MF=(E,WTOMSG)
          XR     R9,R9                 * LINES/PAGE RESET
          A      R9,=F'1'              * ADD ONE FOR HEADER
          B      $ENDHEAD
$HEADBTC  DS     0H
          XR     R9,R9                 * LINES/PAGE RESET
          L      R5,PAGENUM            * LOAD PAGENUMBER
          A      R5,=F'1'              * ADD ONE
          ST     R5,PAGENUM            * STORE IT
          CVD    R5,DWORD              * CONVERT IT
          MVC    #PG(3),PAGEDIT        * MOVE EDIT
          ED     #PG(3),DWORD+7        * EDIT IT
          PUT    SYSOUT,TITLE1         * FOR '1' IN COL 1
          A      R9,=F'1'              * ADD ONE
          PUT    SYSOUT,TPUTREC-1      * A TRIPLE SPACE LINE
          A      R9,=F'3'              * ADD 1ST LINE
$ENDHEAD  L      R10,SAVE10            * LOAD BAL REG BACKUP
          BR     R10                   * GO BACK
          EJECT
$FINE     SR     R15,R15               *  ZERO RETURN REGISTER
          L      R13,SAVE+4            * RESTORE OLD SAVE AREA ADDR.
          L      R14,12(R13)           * RETURN ADDRESS
          LM     R0,R12,20(R13)        * REST OF THE REGS
          BR     R14                   * RETURN
          EJECT
 TITLE 'DATA SECTION - CONSTANTS'
SAVE      DS     18F                   * SAVE AREA
SAVE10    DS     F                     * INNER VBAL REG SAVE AREA
PARMADR   DS     F                     * PARM ADDR IF ANY: DEVCLASS ?
          DS     0D
DWORD     DS     D                     * DOUBLE WORD
LINECNT   DC     F'0'
ONFLG     DC     X'00'                 * ONLINE/OFFLINE FLAG
BALSAVE   DS     F                     * BALLER REGISTER SAVE
WHOFLG    DC     F'0'                  * WHO_FLG=...
*                                      * (0=TSO),(4=BATCH),(8,STC)
FLG       DC     C'0'                  * SET TSO/BATCH FLAG TO BATCH
 SPACE
#UCBFLG   DS     F
#UCBFLGC  DC     X'00'
#UCBSTAB  DS     X
RECB      DC     F'0'
SVC78RC   DS     F                     * RETURN CODE FROM SVC78
ANSWER    DC     CL4' '
HITENTER  DC     CL23'HIT ENTER TO CONTINUE >'
HENTER    DC     C' '
 SPACE
OLDUCB    DC     X'F0F0EF'             * PREVIOUS UCB NAME
         DS    0H
CLEAR    DC    X'C11140403C404000'
          SPACE
#SCHANO   DC     F'0'                  * SAVE
EDSCHANO  DC     X'402020202021'       * EDIT
SCHANO    DC     CL4' '                * SUB CHANNEL NUMBER NOT USED
*
PATHS     DC     CL8' '
#CHPIDS   DC     8CL4' '
EDITPATH  DC     X'40202120'
PPATHS    DS     H
*
EDUSERS   DC     X'402020202021'
XUSERS    DC     CL6' '
DEVDPND   DS     2F                    * DEVICE DEPND+ CLASS DEPD
*
*
*--------------------  USED IN  UCB SCAN ROUTINE -------------------*
ADDRUCB   DS     A                     *
WORKAREA  DC     XL100'00'             *
DEVCLASS  DC     X'00'                 * ALL DEVICE CLASSES
*-------------------------------------------------------------------*
          SPACE
* DERIRVED FORM UCBDVCLS - PLACED IN DEVCLASS TO SEARCH ONLY THOSE
          SPACE
#TAPECL   EQU    X'80'                 * ONLY TAPE   "
#COMMCL   EQU    X'40'                 * ONLY COMM   "
#CTCCL    EQU    X'41'                 * ONLY CTC'S  "
#DASDCL   EQU    X'20'                 * ONLY DASD CLASSES
#DSPCL    EQU    X'10'                 * ONLY DISPLAY "
#URCL     EQU    X'08'                 * UNIT RECORD  "
#CHARCL   EQU    X'04'                 * CHAR RDR     "
          SPACE 2
PARMLIST  DS     3F
          ORG    PARMLIST
PARMWA    DS     F                     * ADDR OF WORK AREA
PARMDEVT  DS     F                     * ADDR OF DEVICE TYPE
PARMUCB   DS     F                     * ADDR OF RETURNED UCB
SCANROUT  DS     F
OPENFLG   DC     X'00'
* WTO MESSAGE SECTION
WTOMSG    DS     0F
          DC     AL2(WTOMSGL,0)
          DC     C' '
          DC     C'UCB # '
MESSAGE   DC     CL45' '
          DC     X'20',X'80'
WTOMSGL   EQU    *-WTOMSG
          TITLE 'OUTPUT HEADER AND DETAIL LINES'
TITLE1    DC     CL1'1'                * CARIDGE CONTROL
          DC     CL76'U C B  -  S C A N   R O U T I N E'
#WEEKDAY  DC     CL10' '
#MONTH    DC     CL10' '
#DAY      DC     CL5'  ,19'
#YEAR     DC     CL3' '
#TIME     DC     CL10' '
#JDATE    DC     CL7' '
#PAGE     DC     CL5'PAGE '
#PG       DC     CL3' '
          DC     CL(133-(*-TITLE1))' '
PAGEDIT   DC     X'402021'
PAGENUM   DC     F'0'
*
          DC     C'-'                   * TRIPLE SPACE
TPUTREC   DC     CL4'UNT'
          DC     CL8'DEVT'
          DC     CL10'STATUS'
          DC     CL13'___PATHS___'
          DC     CL7'VOLSER'
WTOTPUTL  EQU    *-TPUTREC
          DC     CL6'USERS'
          DC     CL30'_DEVICE FLAGS_'
          DC     CL(133-(*-TPUTREC))' '
* END DETAIL LINE
          DC     C'0'                  * CC
OLINE     EQU    *
UNITNAM   DC     CL4' '                * UCB NAME
DEVT      DC     CL8' '                * DEVICE TYPE
STATUS    DC     CL10' '               * ON/OFF-LINE
CHPIDS    DC     4CL3' ',C' '          * CHPIDS
VOLSER    DC     CL7' '                * VOLSER
USERS     DC     CL6' '                * NUMBER OF USERS ALLOCATED
RSVD      DC     C' '                  * RESERVED BIT
DEVFLAGS  DC     CL30' '               * DEVICE FLAGS
OLINELEN  EQU    *-OLINE
          DC     CL(133-(*-OLINE))' '
*
*  LSPACE HEADER AND MESSAGES
WORKA     DS     CL30                  * WORK AREA FOR LSPACE SVC
#CYL      EQU    WORKA+06,4            * FREE TOTAL CYL'S
#TRK      EQU    WORKA+11,4            * FREE TOTAL TRACKS
#EXT      EQU    WORKA+16,4            * AVAILABLE EXTENTS
#CCYL     EQU    WORKA+21,4            * CONTIGUOUS CYL'S
#CTRK     EQU    WORKA+26,4            * CONTIGUOUS TRK'S
*
          DC     CL4' '
LSPACE    DC     CL5'#CYL='
FREECYL   DC     CL4' '
          DC     CL6',#TRK='
FREETRK   DC     CL4' '
          DC     CL6',#EXT='
FREEEXT   DC     CL4' '
          DC     CL7',C-CYL='
CONTCYL   DC     CL4' '
          DC     CL7',C-TRK='
CONTTRK   DC     CL4' '
LSPCLEN   EQU    *-LSPACE         TOTLEN(51)
*
BLANKS    DC     CL133' '
OREC      DC     CL133' '
          PRINT  NOGEN
SYSOUT    DCB  DDNAME=SYSOUT,LRECL=133,RECFM=FBA,DSORG=PS,EXLST=EXL,   X
               MACRF=PM
EXL       DC    X'87',AL3(JFCB)
JFCB      DS    176C
          LTORG
          TITLE 'CVT'
          CVT    DSECT=YES
          TITLE 'IEFUCBOB'
          IEFUCBOB PREFIX=YES,LIST=NO
          TITLE 'PSA DSECT'
          IHAPSA
          TITLE 'ASCB DSECT'
          IHAASCB
          REGS
          PRINT GEN
          TITLE 'UCBTYPES EQUATES'
          UCBTYPES
          END
