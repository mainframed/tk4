//SAS     EXEC SAS,OPTIONS='NONEWS'
//SMFIN     DD DSN=SMFDUMP,DISP=SHR
//MACRO    DD DSN=THIS.LIBRARY,DISP=SHR
//SMF30     DD  DSN=HEDGESM.SMF30,
//          DISP=(,CATLG),UNIT=SYSDA,SPACE=(CYL,(20,1),RLSE),
//          DCB=(RECFM=U,BLKSIZE=18148,LRECL=9072,DSORG=DA),
//          VOL=SER=DATA07
//SYSIN     DD  *
  OPTIONS NOMACROGEN NOSOURCE2 DATE SOURCE ERRORS=0 ;

*---------------------------------------------------------------*
* DOC: THIS PROGRAM READS TYPE 30 SMF RECORDS AND WRITES        *
*      THEM TO A SAS FILE BASED ON THEIR SUB RECORD TYPES       *
*                                                               *
* NOTE: ALL SYSTEM TIMES ARE IN DATETIME FORMATS,               *
*       ALL CPU MEASUREMENTS HAVE BEEN CONVERTED TO SECONDS,    *
*       ALL REGION MEASUREMENTS HAVE BEEN CONVERTED TO 1K VALUES*
*---------------------------------------------------------------*;

DATA SMF30.SMF30S1
     SMF30.SMF30S2
     SMF30.SMF30S3
     SMF30.SMF30S4
     SMF30.SMF30S5
     SMF30.SMF30S6
     ;
     INFILE SMFIN MISSOVER;
     INPUT @2 TYPE PIB1. @;
     IF TYPE^=30 THEN DELETE;
     INPUT @3  ENDTIME   SMFSTAMP8.     /* END DATE+TIME STAMP    */
           @11 SYSID     $4.            /* SYSTEM ID              */
           @15 SUBSYS    $4.            /* SUBSYSTEM ID           */
           @19 RECSUBTY  PIB2.          /* RECORD SUB_TYPE        */
           @;
      *----------------------------------*
      * RECSUBTY  IDENTIFICATION         *
      *   1        JOB START             *
      *   2        INTERVAL              *
      *   3        STEP TERMINATION      *
      *   4        STEP TOTAL            *
      *   5        JOB TERMINATION       *
      *   6        SYSTEM ADDR. SPACE    *
      *----------------------------------* ;

PAGE;
 *----------------------------------------------------------------*
 *                    OFFSET SECTIONS                             *
 *                                                                *
 *     NOTE: ALL OFFSETS INCLUDE THE RECORD_DESC_WORD = 3 BYTES   *
 *                                                                *
 *----------------------------------------------------------------* ;

   INPUT   @21 OFF_SUB   PIB4.          /* OFFSET TO SUB SECTION  */
           @25 LEN_SUB   PIB2.          /* LENGTH                 */
           @27 NUM_SUB   PIB2.          /* NUMBER                 */
           @29 OFF_ID    PIB4.          /* OFFSET TO ID  SECTION  */
           @33 LEN_ID    PIB2.          /* LENGTH                 */
           @35 NUM_ID    PIB2.          /* NUMBER                 */
           @37 OFF_IO    PIB4.          /* OFFSET TO IO  SECTION  */
           @41 LEN_IO    PIB2.          /* LENGTH                 */
           @43 NUM_IO    PIB2.          /* NUMBER                 */
           @45 OFF_CM    PIB4.          /* OFFSET TO COMPLETION SE*/
           @49 LEN_CM    PIB2.          /* LENGTH                 */
           @51 NUM_CM    PIB2.          /* NUMBER                 */
           @53 OFF_PR    PIB4.          /* OFFSET TO PROCESSOR SEC*/
           @57 LEN_PR    PIB2.          /* LENGTH                 */
           @59 NUM_PR    PIB2.          /* NUMBER                 */
           @61 OFF_AC    PIB4.          /* OFFSET TO ACCNT. SEC   */
           @65 LEN_AC    PIB2.          /* LENGTH                 */
           @67 NUM_AC    PIB2.          /* NUMBER                 */
           @69 OFF_SS    PIB4.          /* OFFSET TO STORAGE SEC  */
           @73 LEN_SS    PIB2.          /* LENGTH                 */
           @75 NUM_SS    PIB2.          /* NUMBER                 */
           @77 OFF_PS    PIB4.          /* OFFSET TO PERFORMANCE  */
           @81 LEN_PS    PIB2.          /* LENGTH                 */
           @83 NUM_PS    PIB2.          /* NUMBER                 */
           @85 OFF_OS    PIB4.          /* OFFSET TO OPERATION    */
           @89 LEN_OS    PIB2.          /* LENGTH                 */
           @91 NUM_OS    PIB2.          /* NUMBER                 */
           @93 OFF_EX    PIB4.          /* OFFSET TO EXEC SECTION */
           @97 LEN_EX    PIB2.          /* LENGTH                 */
           @99 NUM_EX    PIB2.          /* NUMBER                 */
          @101 NUM_EXS   PIB2.          /* NUMBER OF EXCP SECS.
                                           IN SUBSEQUENT REORDS   */
           @;

PAGE;
 *----------------------------------------------------------------*
 *                    SUB SYSTEM SECTION                          *
 *----------------------------------------------------------------* ;

     IF NUM_SUB ^= 0  THEN DO;
         POINTER=OFF_SUB; POINTER=POINTER-3;
         INPUT @POINTER
                      SMF30TYP  PIB2.
                      SMF30RS1  PIB2.
                      SMF30RVN  $2.
                      SMF30PNM  $8.
                     @;
                     DROP SMF30RS1 ;
            LABEL SMF30TYP='SUB*TYPE'
                  SMF30RVN='REC*VER*NUM'
                  SMF30PNM='SUBSYS*NAME'
                  ;
       END;
PAGE;
 *----------------------------------------------------------------*
 *               IDENTIFICATION  SECTION                          *
 *----------------------------------------------------------------* ;

      IF NUM_ID ^= 0 THEN DO;
         POINTER=OFF_ID; POINTER=POINTER-3;
         INPUT @POINTER
                      SMF30JBN  $8.     /* JOB OR SESSION NAME    */
                      SMF30PGM  $8.     /* PROGRAM NAME           */
                      SMF30STM  $8.     /* STEP NAME              */
                      SMF30UIF  $8.     /* USER FROM EXIT         */
                      SMF30JNM  $8.     /* JES NUMBER             */
                      SMF30STN  PIB2.   /* STEP NUMBER 1-?        */
                      SMF30CLS  $1.     /* JOB CLASS/BLANK FOR TSO*/
                      ID_FILL1  PIB1.   /* RSVD                   */
                      SMF30PGN  PIB2.   /* PERFORMANCE GROUP      */
                      SMF30JPT  PIB2.   /* JOB PRIORITY           */
                      SMF30AST  PIB4.   /* DEV ALLOC START TIME   */
                      SMF30PPS  PIB4.   /* PROB. PGM STRT TIME    */
                      SMF30SIT  SMFSTAMP8. /*INIT. PGM STRT TIME */
                      SMF30STD  SMFSTAMP8. /*RDR START TIME       */
                      SMF30RST  SMFSTAMP8. /*RDR ENDTIME          */
                      SMF30USR  $20.    /* PROGRAMMER NAME        */
                      SMF30GRP  $8.     /* RACF GROUP             */
                      SMF30RUD  $8.     /* RACF USER              */
                      SMF30TID  $8.     /* RACF TERM ID           */
                      @;
               DROP ID_FILL1 ;
         LABEL   SMF30JBN='JOB*NAME'      SMF30PGM='PROGRAM*NAME'
                 SMF30STN='STEP*NUMBER'   SMF30PPS='PGM*STRT*TIME'
                 SMF30JNM='JES*NUMBER'    SMF30UIF='USER*EXIT'
                 SMF30CLS='JOB*CLASS'     SMF30PGN='PERFOR.*GROUP'
                 SMF30JPT='JOB*PRIORITY'  SMF30AST='DEVALLOC*TIME'
                 SMF30SIT='INIT*STRT*TIME' SMF30STD='RDR*START*TIME'
                 SMF30RST='RDR*ENDTIME'   SMF30USR='PROG*NAME'
                 SMF30GRP='RACF*GROUP'    SMF30RUD='RACF*USER'
                 SMF30TID='RACF*TERMID'
                    ;
       * NOW IN SECONDS, PROBLEM PGM START TIME;
         SMF30PPS=SMF30PPS/100;
         END;
PAGE;
 *----------------------------------------------------------------*
 *                      I/O      SECTION                          *
 *----------------------------------------------------------------* ;

      IF NUM_IO ^= 0 THEN DO;
         POINTER=OFF_IO; POINTER=POINTER-3;
         INPUT @POINTER
                      SMF30INP PIB4.   /* # OF INPUT CARDS       */
                      SMF30TEP PIB4.   /* TOTAL BLOCKS TRANS     */
                      SMF30TPT PIB4.   /* TOTAL # OF TPUTS       */
                      SMF30TGT PIB4.   /* TOTAL # OF TGETS       */
                      IO_FILL1 PIB2.   /*                        */
                      SMF30TCN PIB4.   /* TOTAL DEVICE CONN. TIME*/
                      IO_FILL2 PIB4.   /*                        */
                      @;
              DROP  IO_FILL1 IO_FILL2 ;
             LABEL    SMF30INP='NUM*CARDS' SMF30TEP='TOT*BLOCKS*TRANS'
                      SMF30TPT='TPUTS'     SMF30TGT='TGETS'
                      SMF30TCN='DEVICE*CONN.*TIME'
                      ;
         END;
PAGE;
 *----------------------------------------------------------------*
 *               COMPLETION      SECTION                          *
 *----------------------------------------------------------------* ;

      IF NUM_CM ^= 0 THEN DO;
         POINTER=OFF_CM; POINTER=POINTER-3;
         FORMAT SMF30SCC SMF30STI HEX4.  SMF30ARC HEX8.  ;
         LENGTH REASON $8. ;
         INPUT @POINTER
                      SMF30SCC PIB2.    /* COMPLETION CODE        */
                      SMF30ST1 PIB1.    /* REASON CODES ...       */
                      SMF30ST2 PIB1.    /*                        */
                      SMF30ARC PIB4.    /* ABEND CODE             */
                      @;
           LABEL   SMF30SCC='COMPLETION*CODE'
                   SMF30ARC='ABEND*CODE'
                   ;
           IF SMF30ST1='..1.....'B THEN REASON='IEFUJI';
           IF SMF30ST1='...1....'B THEN REASON='IEFUSI';
           IF SMF30ST1='....1...'B THEN REASON='IEFACTRT' ;
           IF SMF30ST1='.....1..'B THEN DO;
              IF SMF30SCC=0322X OR SMF30SCC=0522X THEN
                 REASON='IEFUTL';
              IF SMF30SCC=0722X THEN REASON='IEFUSO';
             END;
           IF SMF30ST1='......1.'B THEN REASON='FLUSH';
           IF SMF30ST1='.......1'B THEN REASON='BAD EXCP';
           IF SMF30ST2='1.......'B THEN REASON='ERROR IN';
           DROP SMF30ST1 SMF30ST2 ;
        END;
PAGE;
 *----------------------------------------------------------------*
 *                    PRODUCT    SECTION                          *
 *----------------------------------------------------------------* ;

      IF NUM_PR ^= 0 THEN DO;
         POINTER=OFF_PR; POINTER=POINTER-3;
         FORMAT SMF30PT1  SMF30PT2   HEX2.;
         INPUT @POINTER
               /*     SMF30PTY PIB2.       DISP. PRIORITY         */
                      PR_FILL2 PIB1.    /* DISP. PRIORITY 1       */
                      SMF30PTY PIB1.    /* DISP. PRIORITY 2       */
                      PR_FILL1 PIB2.    /* RSVD                   */
                      SMF30CPT PIB4.    /* TCB TIME IN 100THS     */
                      SMF30CPS PIB4.    /* SRB TIME IN 100THS     */
                      SMF30ICU PIB4.    /* TCB TIME IN 100THS INIT*/
                      SMF30ISB PIB4.    /* SRB TIME IN 100THS INIT*/
                      @;
         * NOW IN SECONDS ;
           SMF30CPT = SMF30CPT / 100 ;
           SMF30CPS = SMF30CPS / 100 ;
           SMF30ICU = SMF30ICU / 100 ;
           SMF30ISB = SMF30ISB / 100 ;
           CPUTIME = (SMF30CPT + SMF30CPS) ;
           DROP PR_FILL1 PR_FILL2 ;
           LABEL   CPUTIME='CPU*SEC'       SMF30PTY='DRPTY'
                   SMF30CPT='TCB*SEC'      SMF30CPS='SRB*SEC'
                   SMF30ICU='TCB*SEC*INIT' SMF30ISB='SRB*SEC*INIT'
                   ;
        END;

PAGE;
 *----------------------------------------------------------------*
 *                 ACCOUNTING    SECTION                          *
 *----------------------------------------------------------------* ;

      IF NUM_AC ^= 0 THEN DO;
         POINTER=OFF_AC; POINTER=POINTER-3;
         INPUT @POINTER
                      SMF30ACL PIB1.    /* LENGTH OF ACCOUNT SEC  */
                                        /* ACCOUNTING INFO STEP   */
                      SMF30ACT $VARYING20. SMF30ACL
                      @;
           DROP SMF30ACL ;
           LABEL   SMF30ACT='ACCOUNT*INFO'
                   ;
        END;
PAGE;
 *----------------------------------------------------------------*
 *                 STORAGE       SECTION                          *
 *----------------------------------------------------------------* ;

      IF NUM_SS ^= 0 THEN DO;
         POINTER=OFF_SS; POINTER=POINTER-3;
         FORMAT SMF30SPK HEX1. SMF_SPK HEX2. ;
         INPUT @POINTER
                      SS_FILL1  PIB2.   /* RSVD                   */
                      SMF30SFL  PIB1.   /* STOR. FLAGS            */
                      SMF_SPK   PIB1.   /* STOR. PROT KEY=XXXX0000*/
                      SMF30PRV  PIB2.   /* STOR. USED K BOTTOM UP */
                      SMF30SYS  PIB2.   /* STOR. USED K TOP DOWN  */
                      SMF30PGI  PIB4.   /* PAGE INS               */
                      SMF30PGO  PIB4.   /* PAGE OUT               */
                      SMF30REC  PIB4.   /* PAGES RECLAIMED        */
                      SMF30NSW  PIB4.   /* SWAP OUTS AND BACK IN  */
                      SMF30PSI  PIB4.   /* PAGE INS+LSQA,FIX-RCLM */
                      SMF30PSO  PIB4.   /* PAGE OUT+LSQA,FIX      */
                      SMF30VPI  PIB4.   /* VIO PAGE INS           */
                      SMF30VPO  PIB4.   /* VIO PAGE OUTS          */
                      SMF30VPR  PIB4.   /* VIO PAGE RECLAIMS      */
                      SMF30CPI  PIB4.   /* COMMON PAGE INS        */
                      SMF30CPR  PIB4.   /* COMMON PAGE RECLAIMS   */
                      SMF30LPI  PIB4.   /* LPA PAGE INS           */
                      SMF30LPR  PIB4.   /* LPA PAGE RECLAIMS      */
                      SMF30PST  PIB4.   /* PAGE STEELS            */
                      SMF30PSC  PIB8.   /* CPU PAGE SECONDS       */
                      SMF30RGB  PIB4.   /* PRIVATE BELOW 16M      */
                      SMF30ERG  PIB4.   /* PRIVATE ABOVE 16M      */
                      SMF30ARB  PIB4.   /* LSQA+SWA BELOW 16M     */
                      SMF30EAR  PIB4.   /* LSQA+SWA BELOW 16M     */
                      SMF30URB  PIB4.   /* MAX RGN IN BYTES SUBPOL*/
                      SMF30EUR  PIB4.   /* MAX RGN IN BYTES SUBPOL*/
                      SMF30RGN  PIB4.   /* REGION ROUNDED 4K      */
                      @;
         * CONVERT STORAGE PROTECTION KEY TO 1 HEX VALUE ;
           SMF30SPK=SUBSTR(SMF_SPK,2,1);   * STOR. PROT KEY=XXXX0000 ;
         * CONVERT EVERYTHING TO K BYTES;
           SMF30RGB = SMF30RGB / 1024  ;
           SMF30ERG = SMF30ERG / 1024  ;
           SMF30ARB = SMF30ARB / 1024  ;
           SMF30EAR = SMF30EAR / 1024  ;
           SMF30URB = SMF30URB / 1024  ;
           SMF30EUR = SMF30EUR / 1024  ;

           DROP  SS_FILL1 ;
           LABEL SMF30SFL='STOR*FLAGS'      SMF30SPK='STOR*PROTKEY'
                 SMF30PRV='STOR*INKBOT'     SMF30SYS='STOR*INKTOP'
                 SMF30PGI='PAGE*INS'        SMF30PGO='PAGE*OUT'
                 SMF30REC='PAGES*RECL'      SMF30NSW='SWAP*OUTS*IN'
                 SMF30PSI='PAGE*INS+LSQA'   SMF30PSO='PAGE*OUT+LSQA'
                 SMF30VPI='VIO*PAGEINS'     SMF30VPO='VIO*PAGEO'
                 SMF30VPR='VIO*PAGE*RECL'   SMF30CPI='COM.*PGINS'
                 SMF30CPR='COM.*PAGE*RECL'  SMF30LPI='LPA*PGEINS'
                 SMF30LPR='LPA*PAGE*RECL'   SMF30PST='PAGE*STEELS'
                 SMF30PSC='CPU*PAGE*SECS'   SMF30RGB='PRIV*SWA*K'
                 SMF30ERG='EXT*PRIV*K'      SMF30ARB='ELSQA*SWA*K'
                 SMF30EAR='LSQA*SWA*K'      SMF30URB='RGN*SYSTEM*K'
                 SMF30RGN='REGION*K'        SMF30EUR='ERGN*SYSTEM'
                  ;
        END;
PAGE;
 *----------------------------------------------------------------*
 *                        PERFROMANCE SECTION                     *
 *----------------------------------------------------------------* ;

      IF NUM_PS ^= 0 THEN DO;
         POINTER=OFF_PS; POINTER=POINTER-3;
         INPUT @POINTER
                      SMF30SRV PIB4.    /* TOTAL SERVICE UNITS    */
                      SMF30CSU PIB4.    /* CPU SERVICE UNITS      */
                      SMF30SRB PIB4.    /* SRB                    */
                      SMF30IOV PIB4.    /* I/O                    */
                      SMF30MSO PIB4.    /* MSO                    */
                      SMF30TAT PIB4.    /* TANS ACTIVE TIME       */
                      SMF30TET PIB4.    /* RSVD                   */
                      SMF30RES PIB4.    /* TRQNS RESD TIME        */
                      SMF30TRS PIB4.    /* TOTAL TRANS            */
                      @;
               LABEL  SMF30SRV='TOTAL*SERV*UNITS'
                      SMF30CSU='CPU*SERV*UNITS'
                      SMF30SRB='SRB*SERV*UNITS'
                      SMF30IOV='I/O*SERV*UNITS'
                      SMF30MSO='MSO*SERV*UNITS'
                      SMF30TAT='TRANS*ACTIVE*TIME'
                      SMF30RES='TRANS*RESD*TIME'
                      SMF30TRS='TOTAL*TRANS'
                      ;
           END;

PAGE;
 *----------------------------------------------------------------*
 *                      OPERATOR  SECTION                         *
 *----------------------------------------------------------------* ;

      IF NUM_OS ^= 0 THEN DO;
         POINTER=OFF_OS; POINTER=POINTER-3;
         INPUT @POINTER
                      SMF30PDM PIB4.    /* NUM NON-SPECF DASD MOUNTS*/
                      SMF30PRD PIB4.    /* NUM SPECF DASD MOUNTS  */
                      SMF30PTM PIB4.    /* NUM TAPE               */
                      SMF30TPR PIB4.    /* NUM TAPE               */
                      SMF30MTM PIB4.    /* NUM MSS                */
                      SMF30MSR PIB4.    /* NUM MSS                */
                      @;
                    SMF30TP=SMF30PRD+SMF30PTM;
               LABEL SMF30TP='TOTAL*TAPE*MOUNTS'
                     ;
               DROP  SMF30PDM SMF30PRD
                     SMF30MTM SMF30MSR
                     SMF30PTM SMF30TPR
                     ;
         END;

PAGE;
 *----------------------------------------------------------------*
 *                      EXCP      SECTION                         *
 *----------------------------------------------------------------* ;

      IF NUM_EX ^= 0 THEN DO;
         POINTER=OFF_EX; POINTER=POINTER-3;
         INPUT @POINTER @;
         DO I=1 TO NUM_EX;
              INPUT   SMF30DEV PIB1.    /* DEVICE CLASS             */
                      SMF30UTP PIB1.    /* UNIT TYPE                */
                      SMF30CUA PIB2.    /* DEVICE NUMBER            */
                      SMF30DDN $8.      /* DDNAME                   */
                      SMF30BLK PIB4.    /* BLOCK COUNT              */
                      SMF30BSZ PIB2.    /* BIT SETTINGS:
                                           0 - CHANGED BLKSIZE
                                           1-15 LARGEST BLOCK SIZE  */
                      SMF_DCT PIB4.     /* DEVICE CONNECT TIME IN
                                           128 MICRO SECOND UNITS   */
                      @;
        * CHECK FOR BLOCK SIZE BIT CHANGE ;
         IF SMF30BSZ='1...............'B THEN
                     SMF30BSZ=SMF30BSZ-80X;

         IF SMF30DEV=32 THEN DO;         * DASD 3350 AND 3380 ;
            IF SMF30UTP=0BX THEN DO;
               EXCP3350=SUM(EXCP3350,SMF30BLK);
               DEVT3350=SUM(DEVT3350,SMF_DCT);
              END;
            IF SMF30UTP=0EX THEN DO;
               EXCP3380=SUM(EXCP3380,SMF30BLK);
               DEVT3380=SUM(DEVT3380,SMF_DCT);
              END;
           END;

         IF SMF30DEV=080X THEN DO;       * TAPE 3480 AND 3420 S;
            IF SMF30UTP=80X THEN DO;
               EXCP3480=SUM(EXCP3480,SMF30BLK);
               DEVT3480=SUM(DEVT3480,SMF_DCT);
              END;
              ELSE DO;
               EXCP3420=SUM(EXCP3420,SMF30BLK);
               DEVT3420=SUM(DEVT3420,SMF_DCT);
              END;
          END;
       * TOTAL EVERYTHING ;
         TOTEXCP=SUM(TOTEXCP,SMF30BLK);
         TOTDEVT=SUM(TOTDEVT,SMF_DCT);
       END;
         LABEL        SMF30DEV='DEVICE*CLASS'
                      SMF30UTP='UNIT*TYPE'
                      SMF30CUA='DEVICE*NUMBER'
                      SMF30DDN='DDNAME'
                      SMF30BLK='BLOCK*COUNT'
                      SMF30BSZ='BLKSIZE'
                      SMF30DCT='DEVICE*CONNECT*TIME'
                      EXCP3420='EXCP*3420'
                      EXCP3480='EXCP*3480'
                      EXCP3380='EXCP*3380'
                      EXCP3350='EXCP*3350'
                      TOTEXCP='TOTAL*EXCPS'
                      DEVT3420='DEV*CONN*3420'
                      DEVT3480='DEV*CONN*3480'
                      DEVT3380='DEV*CONN*3380'
                      DEVT3350='DEV*CONN*3350'
                      TOTDEVT='TOTAL*DEVICE*CONN'
                      ;

       * CHANGE 128 MICRO SECONDS INTO SECONDS;
         SMF30DCT=SMF_DCT  / 12800 ;
         DEVT3420=DEVT3420 / 12800 ;
         DEVT3480=DEVT3480 / 12800 ;
         DEVT3350=DEVT3350 / 12800 ;
         DEVT3380=DEVT3380 / 12800 ;
         DROP SMF_DCT ;
      END;
PAGE;
 *----------------------------------------------------------------*
 *                   CLEANUP      SECTION                         *
 *----------------------------------------------------------------* ;

  INPUT  ;

           EDATE=DATEPART(ENDTIME);  ETIME=TIMEPART(ENDTIME);

           FORMAT EDATE DATE7.
                  ENDTIME  SMF30SIT SMF30STD SMF30RST DATETIME16.
                  ETIME INTERVAL TIME7.
                  COMPCODE ABEND HEX8.
                  ;

   LENGTH JOBNAME PGMNAME STEPNAME JOBNUM $8. JOBCLASS $1.
          ;

  DROP OFF_SUB LEN_SUB NUM_SUB OFF_ID LEN_ID NUM_ID OFF_IO LEN_IO
       NUM_IO OFF_CM LEN_CM NUM_CM OFF_PR LEN_PR NUM_PR OFF_AC
       OFF_PS LEN_AC NUM_AC OFF_SS LEN_SS NUM_SS LEN_PS NUM_PS
       OFF_OS LEN_OS NUM_OS OFF_EX LEN_EX  NUM_EX
       POINTER
       ;

 * LETS GET SOME NORMAL NAMES .....;
   JOBNAME=SMF30JBN;
   PGMNAME=SMF30PGM;
   STEPNAME=SMF30STM;
   JOBNUM=SMF30JNM;
   JOBCLASS=SMF30CLS;
   COMPCODE=SMF30SCC;
   ABEND=SMF30ARC;


* SEE 'SYS1.PARMLIB(SMFPRM00)' FOR INTERVAL PERIOD;
  IF RECSUBTY=2 OR RECSUBTY=3 THEN
     INTERVAL='00:20:00'T ;

  IF RECSUBTY=1 THEN OUTPUT SMF30.SMF30S1 ;
  IF RECSUBTY=2 THEN OUTPUT SMF30.SMF30S2 ;
  IF RECSUBTY=3 THEN OUTPUT SMF30.SMF30S3 ;
  IF RECSUBTY=4 THEN OUTPUT SMF30.SMF30S4 ;
  IF RECSUBTY=5 THEN OUTPUT SMF30.SMF30S5 ;
  IF RECSUBTY=6 THEN OUTPUT SMF30.SMF30S6 ;

/*
//
