 TITLE '     RACF   STATUS   PROGRAM 1.7 AND 1.7.1        &SYSDATE'
RACFST   CSECT
         STM    R14,R12,12(R13)       * SETUP
         LR     R12,R15               *
         USING  RACFST,R12,R11
         B      $LOADR11              * BRANCH OVER CONSTANTS
         DC     C'&SYSDATE_&SYSTIME_V2.1'
         DC     A(RACFST+4095)
$LOADR11 L      R11,*-4
         A      R11,=F'1'
         LA     R10,SAVE              *
         ST     R10,8(R13)            *
         ST     R13,SAVE+4            *
         LR     R13,R10               *
         SPACE
         SPLEVEL SET=2
         SPACE
YEP      EQU    X'00'
NOPE     EQU    X'FF'
         ST     R1,SAVE1              * SAVE PARM IF ANY
$GETCVT  DS     0H
         RDJFCB SYSOUT                * READ JFCB                  *NEW
         LTR    R15,R15               * IF DDNAME SYSOUT PRESENT   *NEW
         BNZ    $NOPRINT              * NOPE, TPUTS                *NEW
         OPEN   (SYSOUT,OUTPUT)
         MVI    PRTFLG,YEP            * SET SYSOUT FLAG            *NEW
         B      *+8                   * SKIP                       *NEW
$NOPRINT MVI    PRTFLG,NOPE           * SET SYSOUT FLAG            *NEW
         CLEAR  2,7                   * CLEAR REGS                 *NEW
         L      R2,CVTPTR             * GET CVT POINTER
         S      R2,=F'256'            * TO CVT PREFIX
         USING  CVTFIX,R2             * ADDRESS CVT PREFIX
         L      R3,CVTSMEXT           * LOAD STORAGE EXTENSION
         USING  CVTVSTGX,R3           * ADDRESS PATCH AREA
         L      R4,CVTEXT2            * CVT EXTENSION OS/VS1-OS/VS2
         USING  CVTXTNT2,R4           * ADDRESS IT
         L      R5,CVTRAC             * RACF CVT (MACRO: ICHPRCVT)
         USING  RCVT,R5               * ADDRESS IT
         L      R6,CVTTCBP            * CVTTCBP -
*                                     * ADDR OF A DW NEXT+CUR. TCB
         ST     R6,DWORD              * SAVE IT
         LM     R6,R7,DWORD           * CVTTCBP - DWORD NEXT+CUR. TCB
         USING  PSA,R7                * PSA - PREFIXED SAVE AREA
         L      R6,PSAAOLD            * ASCB OLD POINTER.
         USING  ASCB,R6               * ASCB - ADDR SPACE C. B.
         DROP   R7
         XR     R7,R7                 * CLEAR R7
         XR     R8,R8                 * .
         LH     R7,ASCBASID           * LOAD ASID
         CVD    R7,DWORD              * - SHIFT ASID
         ED     ASID(5),DWORD+6       * - CONVERT ASID TO READABLE HEX
         L      R7,ASCBASXB           * GET  ASXB
         IC     R8,ASCBDP             * DISPATCHING PRIORITY
         CVD    R8,DWORD              * - CONVERT
         ED     DISPRTY(4),DWORD+6    * - EDIT IT
         DROP   R6
         LR     R6,R7                 * .
         EJECT
*----------------------------------------------------------------*
*  GET ACEE AND USER INFORMATION                                 *
*----------------------------------------------------------------*
         SPACE
         USING  ASXB,R6               * ADDR ASXB
         L      R7,ASXBSENV           * ADDR ACEE: HIGH STORAGE !!
         LTR    R7,R7                 * DOES ENVIRONMENT EXIST ?
         BZ     NOACEE                * NOPE, SKIP
         MODE   AMODE=31
         DROP   R6
         LR     R6,R7                 * ACEE
         USING  ACEE,R6               * ADDRESS IT
         XR     R7,R7                 * CLEAR
         IC     R7,ACEEUSRL           * USERID LENGTH
         S      R7,=F'1'              * FOR EXEC
         MVC    USERID(*-*),ACEEUSRI  * WHO WE ARE ...
         EX     R7,*-6
         IC     R7,ACEEGRPL           * GROUP  LENGTH
         S      R7,=F'1'              * FOR EXEC
         MVC    GROUP(*-*),ACEEGRPN   * WHAT GROUP WE ARE IN ...
         EX     R7,*-6
         IC     R7,ACEEFLG1           * USER FLAGS
         LTR    R7,R7                 * IS THIS A RACF USER
         BZ     NOACEE
         SRL    R7,4            * LAST 4 BITS NOT VERY INFORMATIONAL
* ARE WE SPECIAL, ADD/PSWD, OPERATORS, AND AUDITORS ???
         LA     R9,15                 * R9=0000 000F
         LR     R8,R7                 * SAVE FLAGS
         SRL    R8,3
         LTR    R8,R8
         BNZ    *+8                   * SPECIAL
         MVI    SPECIAL,C'N'
         LR     R8,R7
         SLL    R8,1                  * R8=0000 0000
*                                                 000N NNN0=R8(BITS)
         NR     R8,R9                 * AND THE REG TO REMOVE SPECIAL
*                                                 0000 NNN0=R8(BITS)
         SRL    R8,3                  * R8=0000 0000
*                                                 0000 000N=R8(BITS)
         LTR    R8,R8
         BNZ    *+8                   * ADD PASSWORD
         MVI    ADDPS,C'N'
         LR     R8,R7
         SLL    R8,2                  * R8=0000 0000
*                                                 00NN NN00=R8(BITS)
         NR     R8,R9                 * AND THE REG TO REMOVE SPECIAL
*                                                 0000 NN00=R8(BITS)
         SRL    R8,3                  * R8=0000 0000
*                                                 0000 000N=R8(BITS)
         LTR    R8,R8
         BNZ    *+8                   * OPERATOR
         MVI    OPER,C'N'
         LR     R8,R7
         SLL    R8,3                  * R8=0000 0000
*                                                 0NNN N000=R8(BITS)
         NR     R8,R9                 * AND THE REG TO REMOVE SPECIAL
*                                                 0000 N000=R8(BITS)
         LTR    R8,R8
         BNZ    *+8                   * NOT AUDITOR
         MVI    AUDITOR,C'N'
*
         XR     R8,R8                 * CLEAR REG
         XR     R7,R7                 * .
         IC     R7,ACEEFLG2           * LOAD UACC FLAG
         SRL    R7,4                  * ONLY LAST 4 IMPORTANT
         SLL    R7,4                  * MOV'M BACK
         STC    R7,#ACEEFLG           * STORE IT
         CLI    #ACEEFLG,ACEECNTL     * CONTROL IN THIS GROUP ?
         BH     ALTERGRP              * TOO HIGH, ALTER
         BE     CNTLGRP               * =, CONTROL
         CLI    #ACEEFLG,ACEEREAD     * READ IN THIS GROUP ?
         BH     UPDTGRP               * TOO HIGH, UPDATE
         MVC    UACC(4),=C'READ'      * SET TO READ AUTHORITY
         B      DOWNMODE
ALTERGRP MVC    UACC(5),=C'ALTER'     * SET TO ALTER AUTHORITY
         B      DOWNMODE
CNTLGRP  MVC    UACC(7),=C'CONTROL'   * SET TO CONTROL AUTHORITY
         B      DOWNMODE
UPDTGRP  MVC    UACC(6),=C'UPDATE'    * SET TO CONTROL AUTHORITY
DOWNMODE EQU    *
         XR     R8,R8                 * CLEAR REG
         XR     R7,R7                 * .
         IC     R7,ACEEFLG4           * 4TH FLAG
         SLL    R7,26                 * ALL THE WAY UP
         SRL    R7,31                 * ALL THE WAY BACK
         LTR    R7,R7                 * ARE WE AUTH. TO ADD USERS ??
         BZ     *+10
         MVC    ADDUSER(3),=C'YES'
         IC     R7,ACEEFLG4           * 4TH FLAG
         SLL    R7,4                  * SHIFT HIGH ORDER BITS
         LA     R9,15                 * LOAD 'X'0F'
         NR     R8,R9                 * 'AND' THE REGS
         SRL    R7,4                  * SHIFT BITS BACK
         LR     R7,R8                 * SAVE RESULTS
         MVC    TERMINAL(8),ACEETRID  * TERMINAL ID
         DROP   R6
         MODE   AMODE=24
         EJECT
*----------------------------------------------------------------*
*  PUT SMF ID IN RECORD                                          *
*----------------------------------------------------------------*
         SPACE
NOACEE   EQU    *
         L      R6,CVTSMCA            * SMF ADDR
         USING  SMCABASE,R6           * ADDRESS IT SMF
         MVC    SYSID(4),SMCASID      * SYSTEM ID
         DROP   R6
         SPACE
*----------------------------------------------------------------*
*  GET RACF PRIMARY DATASETS UCB, LOOK IT UP                     *
*----------------------------------------------------------------*
         SPACE
         MVC    #RCVTID(4),RCVTID     * RACF ID
         L      R1,RCVTRUCB           * ADDRESS OF UCB FOR RACF DSN
         BAL    R14,$UCBLOOK          * SEARCH UCB, RETURN R1 TBL ADDR
$INCOR   EQU    *                     *
         MVC    RACFDSN(44),RCVTDSN   * RACF DSN
         XR     R6,R6                 * CLEAR
         MVC    UADSDSN(44),RCVTUADS  * UADS DSN
         LA     R6,UADSDSN            * FIND OF UADS DSN
LOOKVOL  CLI    0(R6),C' '            *
         BE     PUTVOL                *
         A      R6,=F'1'              *
         B      LOOKVOL               *
PUTVOL   MVC    1(4,R6),=C'VOL='      *
         MVC    5(6,R6),RCVTUVOL      * UADS VOLSER
         XR     R6,R6                 * CLEAR
         IC     R6,RCVTFLGS           * RACF STATUS FLAGS
         SRL    R6,7                  * KEEP ONLY HIGH ORDER BIT
         LTR    R6,R6                 * IS RACF 'RVARY' IED, DEACTIVAT
         BZ     *+10                  * NOPE, SKIP
         MVC    DEACTFLG(2),=C'IN'    * YEP, NOTE CONDITION
         IC     R6,RCVTPINV           * PASSWORD INTERVAL 1-255
         CVD    R6,DWORD              * - CONVERT IT
         ED     PSWDINTV(4),DWORD+6   * - EDIT RESULTS
         IC     R6,RCVTVERS           * RACF VERSION
         CVD    R6,DWORD              * - CONVER IT
         ED     VERSION(2),DWORD+7    * - EDIT RESULTS
         MVI    VERSION,C'.'          * - PUT DOT FOR VERSION
         IC     R6,RCVTRVOK           * # TRIES BEFORE REVOKE
         CVD    R6,DWORD              * - CONVER IT
         ED     REVOKID(4),DWORD+6    * - EDIT RESULTS
         EJECT
*----------------------------------------------------------------*
*  LOOK AT STARTED TASK TABLE, ICHRIN03                          *
*----------------------------------------------------------------*
         SPACE
         L      R6,RCVTSPT            * ICHRIN03 ADDRESS
         USING  ICHRIN03,R6           * ADDRESS IT
         LH     R7,$ICHID             * LOAD ID AND LENGTH X'8LLL'
         SLL    R7,20                 * SHIFT R7='LLL0 0000'
         SRL    R7,20                 * SHIFT R7='0000 0LLL'
         CVD    R7,DWORD              * - CONVERT IT
         ED     NUMPROCS(4),DWORD+6   * - EDIT IT
         MVC    $PROC(8),$ICHPROC     * PROC NAME
         MVC    $USER(8),$ICHUSER     * USER NAME
         MVC    $GROUP(8),$ICHGRP     * GROUP NAME
         CLI    $ICHPRVL,$ICHPRVN     * PRIVILIEG ???
         MVC    $PRIVL(3),=C'NO '     * RESET
         BE     *+10                  * NOPE, SKIP
         MVC    $PRIVL(3),=C'YES'     * YEP
         DROP   R6
* GET RVARY PASSWORD
         MVC    RVARYPSW(8),RCVTSWPW  * RVARY PASSWORD
         MVC    RVARYSTA(8),RCVTINPW  * RVARY PASSWORD, STATUS
         EJECT
*----------------------------------------------------------------*
*  LOOK AT DSN TABLES, EACH TABEL ENTRY CONSISTS OF TWO ENTRIES  *
*----------------------------------------------------------------*
         SPACE
         XR     R6,R6                 * CLEAR R6
         MODE   AMODE=31              * NOTE: DSDT IN EXTENDED CSA
         L      R6,RCVTDSDT           * LOAD ADDR OF DSN TABLE
         USING  ICHDSDT,R6            * MACRO: ICHDSDT
         L      R7,DSDPXLEN           * LEN. IN-STOR BUFFERS
         CVD    R7,DWORD              * - CONVERT IT
         ED     INCORBLK(6),DWORD+5   * - EDIT
         XR     R7,R7                 * CLEAR R7
         IC     R7,DSDPRXNO           * # IN-STOR BUFFERS
         CVD    R7,DWORD              * - CONVERT IT
         ED     INCRBLKL(5),DWORD+6   * - EDIT RESULTS
         MVC    BACKUPDS(44),DSDBDSN  * BACKUP DSN
         L      R6,RCVTDSDT           * LOAD ADDR OF DSN TABLE
         MVC    LINSTRBB(1),DSDBRXNO  * # IN-STOR. BACKUP BUFFERS
         IC     R7,DSDPDSNL           * PRIMARY DATASET LENGTH
         LA     R8,RACFDSN            * ADDR OF THE BEGIN. OF RACFDSN
         AR     R8,R7                 * ADDR PAST DSN...
         MVC    2(4,R8),=C'VOL='      * VOL=
         MVC    6(6,R8),VOLSER        *      VOLSER
         MVC    13(5,R8),=C'UNIT='    *             UNIT=
         MVC    18(3,R8),UNITNAME     *                   UNITNAME
         MVC    22(6,R8),=C'CHPID='   * CHANNEL PATHS
         MVC    28(2,R8),CHPIDS       * 1ST CHPID
         MVC    30(1,R8),=C','        *
         MVC    31(2,R8),CHPIDS+3     * 2ND CHPID
* IS PRIMARY DATASET ACTIVE ???
         XR     R7,R7                 * CLEAR IT
         IC     R7,DSDPSTAT           * INSERT FLAG
         SRL    R7,7                  * KEEP HIGH ORDER BIT
         MVC    OREC1+4(8),=C'  ACTIVE'
         LTR    R7,R7                 * TEST RESULTS
         BNZ    *+10                  * IF ZERO, NOT ACTIVE
         MVC    OREC1+2(2),=C'IN'     * PUT 'INACTIVE'
         SPACE
* RACF BACKUP DATASET PROCESSING
         SPACE
         L      R1,DSDBRUCB           * BACKUP UCB DATA SET
         BAL    R14,$UCBLOOK          * UCB LOOK UP
         XR     R7,R7                 * CLEAR R6
         IC     R7,DSDBDSNL           * BACKUPDS DATASET LENGTH
         LA     R8,BACKUPDS           * ADDR OF THE BEGIN. OF RACFDSN
         AR     R8,R7                 * ADDR PAST DSN...
         MVC    2(4,R8),=C'VOL='      * VOL=
         MVC    6(6,R8),VOLSER        *      VOLSER
         MVC    13(5,R8),=C'UNIT='    *             UNIT=
         MVC    18(3,R8),UNITNAME     *                   UNITNAME
         MVC    22(6,R8),=C'CHPID='   * CHANNEL PATHS
         MVC    28(2,R8),CHPIDS       * 1ST CHPID
         MVC    30(1,R8),=C','        *
         MVC    31(2,R8),CHPIDS+3     * 2ND CHPID
* IS BACKUP DATASET ACTIVE ???
         XR     R7,R7                 * CLEAR IT
         IC     R7,DSDBSTAT           * INSERT FLAG
         SRL    R7,7                  * KEEP HIGH ORDER BIT
         MVC    OREC2+4(8),=C'  ACTIVE'
         LTR    R7,R7                 * TEST RESULTS
         BNZ    *+10                  * IF ZERO, NOT ACTIVE
         MVC    OREC2+2(2),=C'IN'
         XR     R7,R7                 * CLEAR R6
         MODE   AMODE=24
         DROP   R2,R3,R4,R5,R6
         LA     R3,PUTLEN
         LA     R2,PUTRPT-80
         CLI    PRTFLG,YEP
         BNE    $TPUTS
         PUT    SYSOUT,BLANKS
PUTLOOP  EQU    *
         LA     R2,80(,R2)
         PUT    SYSOUT,0(R2)
         BCT    R3,PUTLOOP
         CLOSE  (SYSOUT)             * YEP, CLOSE FILE
         B      CLEAR15
$TPUTS   TPUT   CLEAR,L'CLEAR,FULLSCR
         TPUT   BLANKS,80
TPUTLOOP EQU    *
         LA     R2,80(,R2)
         TPUT   (R2),80
         BCT    R3,TPUTLOOP
CLEAR15  SR     R15,R15              *  ZERO RETURN REGISTER
         L      R13,SAVE+4           * RESTORE OLD SAVE AREA ADDR.
         L      R14,12(R13)          * RETURN ADDRESS
         LM     R0,R12,20(R13)       * REST OF THE REGS
         BR     R14                  * RETURN
 TITLE '-->  UCB LOOK-UP  SECTION    '
$UCBLOOK STM    R0,R15,SAVESUB        * SAVE REGS
         LTR    R1,R1                 * IS THIS A VALID UCB ??
         BZ     $ENDUCB               * NOPE, RETURN
         USING  UCB,R1                * ADDRESS UCB
         LA     R2,UCBPRFX            * UCB PREFIX
         SR     R1,R2                 * ADDRESS UCB PREFIX
         CLI    UCBID,UCBSTND         * IS THIS A STANDARD UCB ??
         BNE    $ENDUCB               * NOPE, SKIP
         MVC    UNITNAME(3),UCBNAME   * UNIT - NAME
         MVC    VOLSER(6),UCBVOLI     * VOL - SER
         XR     R3,R3                 * CLEAR R3
         LH     R3,UCBSCHNO           * LOAD SUB-CHANNEL
         CVD    R3,DWORD              * LOAD SUB-CHANNEL
         MVC    SUBCHAN(3),EDSCHANO   * MOVE EDIT
         ED     SUBCHAN(3),DWORD+6    * EDIT RESULTS
* PATH DETERMINATION
         MVC    PATHS(8),BLANKS       * PATHS, SAVE'M
         MVC    PATHS(8),UCBCHPID     * PATHS, SAVE'M
         LA     R5,PATHS-1            * LOAD ADDRESS OF PATHS
         LA     R6,8                  * MAX CHANNEL PATHS
         MVC    #CHPIDS(32),BLANKS    * CLEAR WORK AREA
         LA     R8,#CHPIDS-4          * CHPID TABLE ADDR
PATHLOOP LA     R5,1(,R5)             * LOAD NEXT ADDR
         CLI    0(R5),X'FF'           * EMPTY CHPID ?
         BE     PATHDONE              * YEP, ALL DONE
         XR     R7,R7                 * CLEAR
         IC     R7,0(R5)              * LOAD CHPID
         SLL    R7,8                  * SHIFT
         IC     R7,=X'F0'             * NOW R7='0000 NNF0'
         SRL    R7,4                  * NOW R7='0000 0NNF' PACKED!
         STH    R7,PPATHS             * STORE IT
         A      R8,=F'4'              * NEXT ADDR IN TABLE
         MVC    0(4,R8),EDITPATH      * MOVE EDIT
         ED     0(4,R8),PPATHS        * EDIT RESULTS
         BCT    R6,PATHLOOP           * LOOP UPTO 8 TIMES
PATHDONE EQU    *
         MVC    CHPIDS(12),BLANKS     * CLEAR OLD CHANNLE PATHS
         MVC    CHPIDS(2),#CHPIDS+2   * SAVE EACH ONE
         MVC    CHPIDS+3(3),#CHPIDS+4+2
         MVC    CHPIDS+3+3(3),#CHPIDS+4+4+2
         MVC    CHPIDS+3+3+3(3),#CHPIDS+4+4+4+2
         LA     R1,UCBLOOK            * R1: RETURN ADDR OF TABLE
$ENDUCB  LM     R0,R15,SAVESUB        * RESTORE REGS
         BR     R14                   * RETURN
SAVESUB  DS     15F
*
UCBLOOK   EQU    *                     * UCB LOOK TABEL
UNITNAME  DC     CL3' '                * UNIT NAME
VOLSER    DC     CL6' '                * VOLSER
SUBCHAN   DC     CL4' '                * SUB CHANNEL NUMBER NOT USED
CHPIDS    DC     CL12' '               * MAX(4) CHANNEL PATHS
UCBLEN    EQU    *-UCBLOOK             * UCB LOOK TABEL LEN (27)
*
SUBCHAN#  DS     F                     * SAVE SUB-CHANNEL #
EDSCHANO  DC     X'402021'             * EDIT SUB CHANNEL
*
PATHS     DC     CL8' '
#CHPIDS   DC     8CL4' '
EDITPATH  DC     X'40202120'
PPATHS    DS     H
 TITLE '--> DATA AREAS'
SAVE     DS      18F
SAVE1    DS      F                   * PARM IF ANY ...
SAVBAL   DS      F                   * SAVE AREA FOR 'BALREG'
BLANKS   DC      CL100' '
#CVTRUCB DS      F                   * RACF PRIMARY UCB ADDR
#CVTXLEN DS      F                   * IN-CORE BLOCK LENGTH
         DS    0D
DWORD    DS     D
RVARYSTA DS     CL8
INSTORBF DS     CL4
LINSTORB DS     CL1
LINSTRBB DS     CL1
FLG1     DS     XL2
FLG2     DS     XL2
#ACEEFLG DS     C
DSDT#    DC     CL4' '
*
* OUTPUT DATA AREA
PUTRPT   EQU    *
OREC     DC     CL80' '
         ORG    OREC
         DC     C' RACF 1'
VERSION  DC     X'4020'
         DC     C' IS'
DEACTFLG DC     C'  ACTIVE ON SYSID('
SYSID    DC     C'    )'
         DC     CL8' RACFID('
#RCVTID  DC     CL5'    )'
         ORG
*
OFILL1   DC     CL80' '
OREC1    DC     CL80' '
         ORG    OREC1
         DC     CL12' '
         DC     CL13' PRIMARY DSN='
RACFDSN  DS     CL44
         ORG
*
OREC2    DC     CL80' '
         ORG    OREC2
         DC     CL12' '
         DC     CL13' BACKUP  DSN='
BACKUPDS DC     CL44' '
         ORG
*
OREC4    DC     CL80' '
         ORG    OREC4
         DC     CL12' '
         DC     CL13' UADS    DSN='
UADSDSN  DC     CL44' '
         ORG
*
OREC6    DC     CL80' '
         ORG    OREC6
         DC     CL12' '
         DC     C' PASSWORD INTERVAL IN DAYS ='
PSWDINTV DC     X'40202020'
         ORG
OREC7    DC     CL80' '
         ORG    OREC7
         DC     CL12' '
         DC     CL18' RVARY PASSWORD ='
RVARYPSW DS     CL8
         DC     CL11' REVOKE ID='
REVOKID  DC     X'40202021'
         ORG
OREC8    DC     CL80' '
         ORG    OREC8
         DC     CL12' '
         DC     CL18' IN-CORE, BLOCKS ='
INCORBLK DC     X'402020202021'    * IN-CORE BLOCK LENGTH
         DC     CL11'   LENGTH ='
INCRBLKL DC     X'40202021',C'K'
         ORG
OFILL2   DC     CL80' '
OREC9    DC     CL80' '
         ORG    OREC9
         DC     CL12' '
         DC     C' NUMBER OF PROCS IN ICHIN03 TABLE ='
NUMPROCS DC     X'40202021'
         ORG
OREC10   DC     CL80' '
         ORG    OREC10
         DC     CL13' '
         DC     C'NOTE: GENERICS,  PROC''S = ''*'', '
         DC     C'USER = ''='''
         ORG
OREC11   DC     CL80' '
         ORG    OREC11
         DC     CL12' '
         DC     C' PROC = '
$PROC    DC     CL8' '
         DC     C' USER = '
$USER    DC     CL8' '
         DC     C' GROUP = '
$GROUP   DC     CL8' '
         DC     C' PRIVILEDGE ? '
$PRIVL   DC     CL3' '
         ORG
OBLANK1  DC     CL80' '
OREC12   DC     CL80' '
         ORG    OREC12
         DC     CL12' '
         DC     C' USERID='
USERID   DC     CL8' '
         DC     C' GROUP='
GROUP    DC     CL8' '
         DC     C'  ASID= '
ASID     DC     X'4020202021'
         DC     C'  DISPRTY='
DISPRTY  DC     X'40202021'
         ORG
OREC13   DC     CL80' '
         ORG    OREC13
         DC     CL12' '
         DC     C' SPEC='
SPECIAL  DC     C'Y'
         DC     C' ADDPS='
ADDPS    DC     C'Y'
         DC     C' OPER='
OPER     DC     C'Y'
         DC     C' AUDITOR='
AUDITOR  DC     C'Y'
         DC     C' UACC('
UACC     DC     C'       )'
         ORG
OREC14   DC     CL80' '
         ORG    OREC14
         DC     CL12' '
         DC     C' ADDUSER='
ADDUSER  DC     CL3'NO'
         DC     C' TERMID='
TERMINAL DC     CL8' '
         ORG
PUTLEN   EQU    ((*-PUTRPT)/80)
         SPACE
* SOME TPUT/TGET VARIABLES
         DS    0H
#ASID    DS    F
CLEAR    DC    X'C1115D7E1140403C4040001DC813'  CLEAR SCREEN
PRTFLG   DC    X'00'
*
         PRINT NOGEN
SYSOUT DCB     DDNAME=SYSOUT,LRECL=80,RECFM=FBA,DSORG=PS,EXLST=EXL,    X
               MACRF=PM
         PRINT GEN
EXL      DC    X'87',AL3(JFCB)
JFCB     EQU   *
         IEFJFCBN LIST=NO
         LTORG
         TITLE '--> CVT - DSECT'
         CVT   DSECT=YES,PREFIX=YES
         TITLE '--> ICHPRCVT - DSECT '
         ICHPRCVT
         TITLE '--> ICHRIN03 DSECT  '
ICHRIN03 DSECT
$ICHID   DS    XL2           IDENTIFIER, USUALLY = B'1000' + LENGTH
*                            - LENGTH LAST B'1000 LLLL LLLL LLLL'
*                            - WHERE THE L'S STAND FOR TABLE LENGTH
$ICHPROC DS    CL8           PROC NAME (GENERIC='*')
$ICHUSER DS    CL8           USERID NAME (GENERIC='=')
$ICHGRP  DS    CL8           GROUP NAME
$ICHPRVL DS    XL1           PRIVILEGE IDENTIFIER
$ICHPRVY EQU   X'80'         - ON
$ICHPRVN EQU   X'00'         - OFF
$ICHFILL DS    XL7           FILLER
         MACRO
         ICHDSDT  &LIST=YES,&VER=1,&REL=7
.*-----------------------------------------------------------------*
.*   MACRO NAME:  ICHDSDT                                          *
.*     FUNCTION:  MAP OF THE RACF PRIMARY AND SECONDARY DATASETS   *
.*    VARIABLES:  LIST=YES   TO LIST VARIABLE NAMES                *
.*                VER=1      RACF VERSION NUMBER                   *
.*                REL=7      RACF RELEASE (IE 6, 7, 7.1)           *
.*-----------------------------------------------------------------*
         AIF   ('&LIST' EQ 'YES').DSECT
         PUSH  PRINT
         PRINT  OFF
.DSECT   ANOP
 TITLE 'ICHDSDT  DSECT  FOR  RACF  &VER - &REL '
ICHDSDT  DSECT
*
DSDT     DS    0CL8
DSDTID   DS    CL4      *    EBCDIC ID
DSDTNUM  DS    XL4      *    # OF ENTRIES IN TABLE
         AIF   ('&REL'  EQ '7').REL7
         AIF   ('&REL'  EQ '6').REL7
         AIF   ('&REL'  EQ '7.1').REL71
.REL71   ANOP
                                                           RACF 1.7.1
DSDTDSDX DS    A        * POINTER TO EXTENSION             RACF 1.7.1
DSDTVRSN DS    X        * VERSION NUMBER OF DSDT           RACF 1.7.1
DSDTFILL DS    3X       * DOUBLE WORD BOUNDARY             RACF 1.7.1
         DS    0D
DSDTENTY EQU   *        * ENTRY FOR DATA INFORMATION       RACF 1.7.1
.REL7    ANOP
DSDPDCB  DS    A        * PRT DCB PRIMARY RACF DATASET
DSDPDEB  DS    A        * PRT DEB PRIMARY RACF DATASET
DSDPINDX DS    A        * PRT IN-STOR BUF'S
DSDPHRD  DS    A        * PRT RACF IN-STOR HEADER OR 0 SHR'D DASD
DSDPRUCB DS    A        * UCB OF PRIMARY RACF DATASET
DSDPXLEN DS    A        * LEN IN-STOR BUF/RESD INDX TBL
DSDPBAM  DS    A        * LOC. IN-STOR BAM INFO
DSDPDSNL DS    XL1      * LEN OF PRIMARY RACF DATASET
DSDPSTAT DS    XL1      * RACF PRIMARY DS STATUS
DSDPACTV EQU   X'80'      - ACTIVE
DSDPPRIM EQU   X'40'      - THIS IS THE PRIMARY ONE
DSDPMSTR EQU   X'20'      - THIS IS THE MASTER
DSDPRFSH EQU   X'10'      - REFRESH ICB
DSDPSHR  EQU   X'08'      - SHARED
DSDPALTI EQU   X'04'      - ALTERI REQ. ARE BACKED-UP
DSDPDAT  EQU   X'02'      - IN-STOR. BLOCKS CAN BE DATA BLOCKS
DSDPNREC DS    XL2      * # RECORDS/TRK PRIMARY DS
DSDPRXNO DS    XL1      * # IN-STOR. BUFS/INDX BLKS
DSDPDSN  DS    CL44     * DSN OF PRIMARY DATASET
DSDPDSNO DS    XL1      * DATA SET SEQ. #
         DS    XL2
DSDTBACK DS    0CL80   88    ENTRY FOR BACK-UP DATASET
DSDBDCB  DS    A       88    PRT DCB BACKUP RACF DATASET
DSDBDEB  DS    A       92    PRT DEB BACKUP RACF DATASET
DSDBINDX DS    A       96    PRT IN-STOR BUF'S
DSDBHRD  DS    A      100    PRT RACF IN-STOR HEADER OR 0 SHR'D DASD
DSDBRUCB DS    A      104    UCB OF BACKUP RACF DATASET
DSDBXLEN DS    A      108    LEN IN-STOR BUF/RESD INDX TBL
DSDBBAM  DS    A      112    LOC. IN-STOR BAM INFO
DSDBDSNL DS    XL1    116    LEN OF BACKUP RACF DATASET
DSDBSTAT DS    XL1    117    RACF BACKUP DS STATUS
DSDBACTV EQU   X'80'         - ACTIVE
DSDBPRIM EQU   X'40'         - THIS IS THE BACKUP ONE
DSDBMSTR EQU   X'20'         - THIS IS THE MASTER
DSDBRFSH EQU   X'10'         - REFRESH ICB
DSDBSHR  EQU   X'08'         - SHARED
DSDBALTI EQU   X'04'         - ALTERI REQ. ARE BACKED-UP
DSDBDAT  EQU   X'02'         - IN-STOR. BLOCKS CAN BE DATA BLOCKS
DSDBNREC DS    XL2    118    # RECORDS/TRK BACKUP DS
DSDBRXNO DS    XL1    120    # IN-STOR. BUFS/INDX BLKS
DSDBDSN  DS    CL44   121    DSN OF BACKUP DATASET
DSDBDSNO DS    XL1    165    DATA SET SEQ. #
         DS    XL2
DSDE     DS    CL80          OTHER ENTRIES
         AIF   ('&LIST' EQ 'YES').MEND
         POP   PRINT
.MEND    MEND
         ICHDSDT
         PRINT NOGEN
         TITLE 'PAS - DSECT'
         IHAPSA
         TITLE 'ASCB - DSECT'
         IHAASCB
         TITLE 'ASXB - DSECT'
         IHAASXB
         TITLE 'ACEE - DSECT'
         PRINT GEN
         IHAACEE
         PRINT NOGEN
         TITLE ' UCB - DSECT'
         IEFUCBOB LIST=NO,PREFIX=YES
         TITLE ' SMF"S IEESMCA - DSECT'
         IEESMCA
         REGS
         END
