 OPTIONS  ERRORS=0 NODATE LABEL NONOTES TLS=80 PLS=80;

 GOPTIONS NOTEXT82 COLORS=(BLUE PINK YELLOW GREEN RED TURQ WHITE)
          DEVICE=IBM3179G;


 /*---------------------------------------------------------------*
  *  THIS IS A PIECE OF SAS CODE THAT USES THE COMMAND PROCESSOR  *
  *  'VTOC' FORM THE C.B.T. TAPE.                                 *
  *                                                               *
  *  IT ISSUES THE 'VTOC' COMMAND FOR ALL DISK VOLUMES USING      *
  *  THE SAS TSO INTERFACE. THEN PROCESS THE OUTPUT GROUPING THE  *
  *  INFOMATION BY DATASET ORGANIZATION. REPORT THE RESULTS       *
  *  USING SAS/GRAPH IN THE FOREGROUND BY DSORG, THEN DSORG BY    *
  *  BY VOLSER.  NOTE: DSORG='FR' IS FREE SPACE. DSORG='VS' IS    *
  *  ANY VSAM CLUSTER                                             *
  *                                                               *
  *                                                               *
  *  NOTE: USE YOUR OWN GRAPHICS DEVICE IN GOPTIONS ABOVE !!!     *
  *--------------------------------------------------------------*/
PAGE;

 * NOTE: DSNAME'S MUST NOT BE SORTED, VOLSER'S MUST BE ;

    TSO ALLOC DD(VTOCOUT) NEW DELETE SPACE(3,1) CYL;
    TSO VTOC ALL TRK PRINT(NEW (DSNAME VOLUME DSO ALLOC UNUSED))
           NOSORT NOHEADING;

     DATA VTOCS;
          * INITIALIZE VARIABLES;
          IF _N_=1  THEN DO;
             XDATE=TODAY();
             JDATE=JULDATE(XDATE);
             TEMPDSN='SYS'××JDATE; TEMPDSN=COMPRESS(TEMPDSN);
             RETAIN TEMPDSN;
             DROP XDATE JDATE;
             OLDVOL='      ';
             TOTTRKS=0;
             VOLTRKS=885*15;
             RETAIN VOLTRKS;
            END;

          INFILE VTOCOUT ;
          INPUT @1  CC  $1.
                @;
          IF CC = '0'  THEN DELETE;
          DROP CC;
          INPUT @2  DSNAME     $44.
                @47 VOLSER     $6.
                @54 DS      $2.
                @60 ALLOC      4.
                @67 UNUSED     4.
                ;
          IF DS='VS' THEN DSORG='VSAM';
          IF DS='PO' THEN DSORG='PART';
          IF DS='PS' THEN DSORG='SEQ';
          IF DS='DA' THEN DSORG='DIR';
          DROP DS;

          IF SUBSTR(DSNAME,1,8)=TEMPDSN THEN DELETE;  /*NO TEMP DS   */
          IF SUBSTR(VOLSER,1,3)='WOR'   THEN DELETE;  /*NO WORK PACKS*/
          IF SUBSTR(VOLSER,1,3)='RES'   THEN DELETE;  /*NO SYSRES'S  */
          IF OLDVOL^=VOLSER THEN DO;
             OLDVOL=VOLSER;
             RETAIN OLDVOL;
             * ADD 885 CYL TO TRACKS AND TOTAL;
             TOTTRKS=TOTTRKS+(885*15);
             RETAIN TOTTRKS;
            END;

   * SUMMARIZE ALL INFO BY VOLSER AND DSORG ;

     PROC SUMMARY DATA=VTOCS;
          CLASS VOLSER DSORG;
          VAR ALLOC UNUSED TOTTRKS;
          ID VOLTRKS;
          OUTPUT OUT=VTOCVS
                 SUM(ALLOC UNUSED)=ALLOC UNUSED
                 MAX(TOTTRKS)=TOTTRKS
          ;

     DATA
          TYPE1(KEEP=DSORG ALLOCX UNUSEDX)
          TYPE3(KEEP=DSORG ALLOCX VOLSER)
          ;
          SET VTOCVS;

          P_UNSD=100*(UNUSED/ALLOC);
          ALLOCX=ALLOC;

   * _TYPE_(0) ALL ALLOCATIONS, UNUSED, AND TOTAL TRACKS ;
          IF _TYPE_=0 THEN DO;
             TOTAL=TOTTRKS;
             RETAIN TOTAL;
             ALLOCX=TOTTRKS-ALLOC;
             DSORG='FREE';
             OUTPUT TYPE1;
            END;
   * _TYPE_(1) ALL ALLOCATIONS, UNUSED, AND TOTAL TRACKS BY DSORG;
          IF _TYPE_=1 THEN DO;
             UNUSEDX=UNUSED;
             OUTPUT TYPE1;
            END;
   * _TYPE_(2) ALL ALLOCATIONS, UNUSED, AND TOTAL TRACKS BY VOLUME;
          IF _TYPE_=2 THEN DO;
             ALLOCX=(VOLTRKS-ALLOC)/15;
             DSORG='FREE';
             OUTPUT TYPE3;
            END;
   * _TYPE_(3) ALL ALLOCATIONS, UNUSED, AND TOTAL TRACKS BY VOLUME
                                                         AND DSORG ;
          IF _TYPE_=3 THEN DO;
             ALLOCX=ALLOC/15;
             OUTPUT TYPE3;
            END;

     DATA TYPE1(KEEP=DSORG ALLOC UNUSED VOLALLOC)
          TYPEU(KEEP=DSORG PER_OVR)
          ;
          SET TYPE1;
          ALLOC=ALLOCX/15;    * in cylinders;
          UNUSED=UNUSEDX/15;  * in cylinders;
          VOLALLOC=ALLOC/885; * in volumes;
          IF DSORG^='FREE' THEN DO;
             PER_OVR=100*(UNUSED/ALLOC); * PERCENT UNUSED;
             OUTPUT TYPEU;
            END;
          OUTPUT TYPE1;

    PROC SORT DATA=TYPE3; BY VOLSER;

    PROC GCHART DATA=TYPE1;
         PIE DSORG / SUMVAR   = ALLOC
                     COUTLINE = WHITE
                     FILL     = SOLID
                     PCT      = OUTSIDE
                     MATCHCOLOR
                     NOHEADING
         ;
    TITLE1 F=XSWISS C=RED 'All data sets' ;
    TITLE2 C=GREEN 'Allocation by Dataset Organization';
    FOOTNOTE C=YELLOW F=ITALIC 'In Cylinders';

    PROC GCHART DATA=TYPE1;
         PIE DSORG / SUMVAR = VOLALLOC
                     NOHEADING
                     COUTLINE=WHITE
                     FILL = SOLID
                     PCT  = OUTSIDE
                     MATCHCOLOR
         ;
    TITLE1 F=XSWISS C=RED 'All data sets' ;
    TITLE2 C=GREEN 'Allocation by Dataset Organization';
    FOOTNOTE C=YELLOW F=ITALIC 'In Volumes';

    PROC GCHART DATA=TYPE3;
         BY  VOLSER;
         PIE DSORG / SUMVAR   = ALLOCX
                     COUTLINE = WHITE
                     FILL     = SOLID
                     PCT      = OUTSIDE
                     MATCHCOLOR
                     NOHEADING
         ;
    TITLE1 F=XSWISS C=RED 'All data sets' ;
    TITLE2 C=GREEN 'Allocation by Dataset Organization';
    TITLE3 C=GREEN '          and Volume              ';
    FOOTNOTE C=YELLOW F=ITALIC 'In Cylinders';

    PROC GCHART DATA=TYPEU;
         PIE DSORG / SUMVAR    = PER_OVR
                     COUTLINE  = WHITE
                     FILL      = SOLID
                     PCT       = OUTSIDE
                     MATCHCOLOR
                     NOHEADING
         ;
    TITLE1 F=XSWISS C=RED 'All data sets' ;
    TITLE2 'Over Allocation by DSORG';
    TITLE3 ;
    FOOTNOTE C=YELLOW F=ITALIC 'In Cylinders';

