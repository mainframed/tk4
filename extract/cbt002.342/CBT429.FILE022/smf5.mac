         MACRO
         TESTOPEN &DCB
.*---------------------------------------------------------------*
.*  FUNCTION: SEE IF DCB WAS OPENED
.*    RETURN: RC IN R15  (RC=4 NO GOOD)
.*---------------------------------------------------------------*
         AIF ('&DCB' EQ '').ERR1
         LCLC  &I
&I       SETC  '&SYSNDX'
         TM    &DCB+48,B'00010000'
         BO    GOOD&I
         LA    15,4
         B     GOOD&I+4
GOOD&I   LA    15,0
         MEND
         MACRO
&BINTME  BINTIME &VALUE,&RESULTS
.*-------------------------------------------------------------------*
.*    MACRO: BINTIME                                                 *
.* FUNCTION: CONVERT TIME IN 100THS TO HH:MM:SS                      *
.*           THIS FORMAT IS USED IN ALL SMF AND RMF RECORD TYPES     *
.*           IT IS THE 'TIME BIN' MACRO FORMAT                       *
.* VARIABLES: 'VALUE' IS THE VALUE, RX INSTRUCTION, THAT IS PASSED   *
.*            'RESULTS' IS THE RX VALUE, CL8, THAT WILL CONTAIN      *
.*            THE RETURNED VALUE                                     *
.* EXAMPLE:   DOIT  BINTIME  SMF5TME,STARTME                         *
.*            .                                                      *
.*            .                                                      *
.*            STARTME  DS    CL8                                     *
.*-------------------------------------------------------------------*
         GBLB   &TIMEG                 * SET GLOBAL VARIABLE
         LCLC   &I                     *
&I       SETC   '&SYSNDX'
&BINTME  STM   0,4,STIME$$             * RESTORE REGS
         ICM   1,B'1111',&VALUE        * IN HUNDREDTHS (.01) SEC
         XR    0,0                     *
         D     0,=F'100'               * MAKE INTO SECONDS
         LR    2,1                     * SAVE SECONDS:            R2
.* PROCESS HOURS
         XR    0,0                     * CLEAR
         D     0,=F'3600'              * GET HOURS
         LR    3,1                     * STORE HOURS:             R3
         M     0,=F'3600'              * HOURS * 3600 = MINUTES
         SR    2,1                     * REMOVE HOURS
         LR    1,2                     *
.* PROCESS MINUTES
         XR    0,0                     * CLEAR
         D     0,=F'60'                * GET MINUTES
         LR    4,1                     * STORE MINS:              R4
         M     0,=F'60'                * REMOVE MINUTES
         SR    2,1                     * SAVE DIFFERENCE
.* EDIT HOURS MINUTES AND SECONDS
         CVD   3,DWORD                 *
         UNPK  &RESULTS.(2),DWORD+6(2) *
         OI    &RESULTS.+1,X'F0'       *
         CVD   4,DWORD                 *
         UNPK  &RESULTS.+3(2),DWORD+6(2)
         OI    &RESULTS.+1+3,X'F0'     * OR 1/2 BYTE
         CVD   2,DWORD                 *
         UNPK  &RESULTS.+3+3(2),DWORD+6(2)
         OI    &RESULTS.+1+3+3,X'F0'   * OR 1/2 BYTE
         MVI   &RESULTS.+2,C':'        * ADD HH:MM:SS
         MVI   &RESULTS.+5,C':'        * ...
         LM    0,4,STIME$$             * RESTORE REGS
.*
.* IF ISSUED BEFORE, SKIP VALUES
.*
         AIF    (&TIMEG).MEND
&TIMEG   SETB  1
         B     B&I                     * SKIP SAVE AREA
STIME$$  DS    5F                      * SAVE REGS
B&I      EQU    *
.MEND    MEND
         MACRO
&LABEL   CPUTIME  &VALUE,&FULL
.*-------------------------------------------------------------------*
.*    MACRO: CPUTIME                                                 *
.* FUNCTION: CONVERT CPUTIME FROM BINARY TO MINUTE/SECONDS           *
.* VARIABLES: 'VALUE' IS THE VALUE, RX INSTRUCTION OR REGISTER IN THE*
.*            FORM '(3)', WHICH IS TRANSLATED INTO SECONDS.HNDTHS    *
.*            FOR CPUTIME, FROMM SMF/RMF RECORDS                     *
.* EXAMPLE:   DOIT  CPUTIME  SMF5JCPU                                *
.*            (MINUTES.SECONDS) = CL7                                *
.*            (VALUES ARE RETURNED IN VARIABLES MINUTES CL4          *
.*             AND SECONDS CL3)                                      *
.*                                                                   *
.*                                                                   *
.*                                                                   *
.*-------------------------------------------------------------------*
         GBLB   &GLBL                  * SET GLOBAL VARIABLE
         LCLC   &I,&REG                *
&I       SETC   '&SYSNDX'
&LABEL   STM    0,4,S$$##$$            * SAVE REGS
         XC     MINUTES,MINUTES        * ZERO
         TR     MINUTES(4),=C' '       * BLANK
.*-------------------------------------------------------------------*
.* INSERT CPUTIME INTO R1                                            *
.*-------------------------------------------------------------------*
         AIF    ('&FULL' NE '').SKIP1
         AIF    ('&VALUE'(1,1) EQ '(').REG
         ICM    1,B'0111',&VALUE       * INSERT VALUE, 3 BYTES
         AGO    .STORE1
.SKIP1   ANOP
         AIF    ('&VALUE'(1,1) EQ '(').REG
         L      1,&VALUE               * LOAD VALUE
         AGO    .STORE1
.REG     ANOP
&REG     SETC   '&VALUE'(2,1)
         MNOTE  0,'REG=&REG'
         LR     1,&REG
.STORE1  ANOP
         XR     0,0                    * CLEAR EVEN
         D      0,=F'100'              * CHANGE 100TH SECOND TO SECONDS
         LR     3,1                    * SAVE QUOTIENCT, SECONDS
         XR     0,0                    *
.*
         D      0,=F'60'               * GET MINUTES
         LTR    1,1                    * ANY MINUTES ?
         BZ     SEC&I                  * NOPE, USE SECONDS ONLY
         LR     4,1                    * YEP, SAVE QUOTIENCT, MINUTES
         M      0,=F'60'               * FIGURE REMIANDER IN SECONDS
         LR     0,3                    * RELOAD RAW SECONDS
         SR     0,1                    * SEC-((SEC/60)*60),
*                                        ... DROPPING THE REMAINDERS
         LR     0,3                    * NEW SECONDS
.*-------------------------------------------------------------------*
.*       NOW WE HAVE MINUTES AND SECONDS                             *
.*-------------------------------------------------------------------*
         CVD    4,DWORD                *
         MVC    MINUTES(4),=X'40202021'
         ED     MINUTES(4),DWORD+6     *
.*                                     *
SEC&I    DS     0H                     *
         CVD    3,DWORD                *
         MVI    SECONDS,C'.'           * TELL ABEOUT SECONDS
         UNPK   SECONDS+1(2),DWORD(8)  * UNPACK SECONDS
         OI     SECONDS+2,X'F0'        * OR RESULTS
LM&I     LM     0,4,S$$##$$            * RESTORE REGS
.* IF ISSUED BEFORE, SKIP VALUES
         AIF    (&GLBL).MEND           *
&GLBL    SETB   1                      *
         B      B&I                    * SKIP SAVE AREA
S$$##$$  DS     5F                     *
MINUTES  DS     CL4                    * MMMM
SECONDS  DS     CL3                    *     .SS
B&I      DS     0H                     *
.MEND    MEND                          *
 TITLE '>>> PROCESS SMF TYPE(05) RECORDS FROM DUMPPED FILES <<<'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
*                                                                     *
*  MODULE NAME = SMF5                                                 *
*                                                                     *
*  DESCRIPTIVE NAME = PROCESS SMF TYPE 5 RECORDS                      *
*                                                                     *
*  OPERATING ENVIRONMENT = MVS/XA 2.1.7                               *
*                                                                     *
*  FUNCTION = PROCESS SMF TYPE 5 RECORDS EITHER TO SYSOUT DATASET     *
*             OR TO A SORTIN DDNAME FOR POST PROCESSING               *
*  NOTES = NONE                                                       *
*                                                                     *
*   REGISTER USAGE:                                                   *
*                                                                     *
*           R1 .....                                                  *
*           R2 ..... ADDRESS TO SMF RECORD TYPE DSECT                 *
*           R3 .....                                                  *
*           R4 .....                                                  *
*           R5 .....                                                  *
*           R6 ..... LINE COUNTER                                     *
*           R7 ..... BAL REG.                                         *
*           R8 ..... RECORD COUNTER                                   *
*           R9 ..... PAGE COUNTER                                     *
*          R10 .....                                                  *
*          R11 ..... BASE+4095                                        *
*          R12 ..... BASE                                             *
*          R13 .....                                                  *
*          R14 .....                                                  *
*          R15 .....                                                  *
*                                                                     *
*             MACROS = IBM: DCB, OPEN, GET, PUT, IEFJFCBN, IFASMFR    *
*                                                                     *
*                    OTHER: REGS                                      *
*                                                                     *
*        SUBROUTINES = PRC:  JULSUB FROM BILL G. OFF THE CBT TAPE     *
*                                                                     *
*             DSECTS = IBM: NONE                                      *
*                                                                     *
*                    OTHER:                                           *
*                                                                     *
*                                                                     *
*             MODULE TYPE = ASMH V2.1                                 *
*                                                                     *
*                PROCESSOR = 4381-11                                  *
*                                                                     *
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
  EJECT
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
*                                                                     *
*             ENTRY POINTS = SMF5     (ONLY ENTRY POINT)              *
*                                                                     *
*             INPUT = DUMPED SMF RECORDS                              *
*                                                                     *
*             OUTPUT = DDNAME SYSPRINT AND/OR DDNAME SORTIN           *
*                                                                     *
*                                                                     *
*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *
*                                                                     *
*             EXIT - ERROR = NONE                                     *
*                                                                     *
*             EXTERNAL REFERENCES = NONE                              *
*                                                                     *
*             TABLES =                                                *
*                                                                     *
*             AUTHOR = MARK V. HEDGES                                 *
*                      ADRIA LABORATORIES                             *
*                      7001 POST ROAD                                 *
*                      DUBLIN OH. 43017                               *
*                      (614) 764-8175                            PTL  *
*                                                                     *
*             MESSAGES = WTO FOR MISSING DDNAME SMFIN                 *
*                                                                     *
*             ABEND CODES = NONE - WE HOPE                            *
*                                                                     *
*                                                                     *
*                                                                     *
* -----------------------  CHANGE SECTION  ---------------------------*
*                                                                     *
* 03/23/88                                                            *
*                                                                     *
*                                                                     *
*                                                                     *
* -----------------------  THINGS TO DO  -----------------------------*
*          ANY ABITIOUS INDIVIDUALS WHO WOULD LIKE TO REWITE THIS     *
*              TO MAKE IT RE-ENTERENT ??                              *
*                                                                     *
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
         EJECT  ,
SMF5     CSECT
         STM   R14,R12,12(R13)         * SAVE PREVIOUS REGS
         LR    R12,R15                 * SAVE PGM BEGIN ADDR
         USING SMF5,R12,R11            *
         L     R11,SEC4K               *
         LA    R10,SAVE                * ADDR NEW SAVE AREA
         ST    R10,8(R13)              * NEW SAVE ADDR IN OLD SAVE AREA
         ST    R13,SAVE+4              * OLD SAVE ADDR IN NEW SAVE AREA
         LR    R13,R10                 * R13 CONTAINS NEW SAVE ADDR
         B     *+24
         DC    C'&SYSDATE_&SYSTIME_V1.0'
LINECNT  EQU   6                       * RECORD COUNTER
BALREG   EQU   7                       * BAL REG
COUNT    EQU   8                       * RECORD COUNTER
PGCOUNT  EQU   9                       * PAGE COUNTER
         XC    RC,RC                   * 0 RETURN CODE
         XR    LINECNT,LINECNT         * INIT LINE COUNT
         XR    COUNT,COUNT             * RECORDER COUNTER
         XR    PGCOUNT,PGCOUNT         * RECORDER COUNTER
         RDJFCB SMFIN                  * MAKE SURE SMFIN FILE IS HERE
         LTR   R15,R15                 *
         BNZ   ERRSMFIN                *
         MVC   ODSN(44),JFCBDSNM       * GET DSN
         MVC   OVOL(6),JFCBVOLS        * GET VOLSER
         RDJFCB SORTIN                 * IS SORTIN HERE ?
         LTR   R15,R15                 *
         BNZ   $OPEN                   *
         OPEN  (SORTIN,OUTPUT)         * ... THEN OPEN IT
$OPEN    OPEN  (SMFIN,,SYSPRINT,OUTPUT)
         BAL   BALREG,$HEADER          *
         SPACE 2
$READ    GET   SMFIN                   * READ RECORD
         LR    R2,R1                   * LOAD ADDRESS OF GET LOCATE
         BAL   BALREG,$READCNT         *
         USING SMFDSECT,R2             * ADDRESS SMF DESCT
         CLI   SMF5RTY,X'05'           * RECORD TYPE FIVE ?
         BNE   $READ                   * NOPE, READ SOME MORE
         CLI   SMF5DTE+1,X'88'         * DATE VALID ?
         BNE   $READ                   * NOPE, READ SOME MORE
         CLI   SMF5LEN+1,X'77'         * SMALLER THAN X'85', 119
         BL    $JCLERR                 * YEP, BAD TYPE 5 RECORDS
* FOUND TYPE 5
         BAL   BALREG,$BADJOBS         * CHECK FOR GOOD JOBS
         LTR   R15,R15                 * CHECK
         BNZ   $READ                   * BAD IF RC^=0
         MVC   OJOB(L'SMF5JBN),SMF5JBN * JOB NAME
         SPACE
* DETERMINE TIMING FACTORS: CPU, TCB, SRB
         SPACE
         CPUTIME SMF5JCPU              * SRB
         MVC   OTCB(L'MINUTES+L'SECONDS),MINUTES
         CPUTIME SMF5SRBT              * TCB
         MVC   OSRB(L'MINUTES+L'SECONDS),MINUTES
         XR    R1,R1
         XR    R3,R3
         ICM   R1,B'0111',SMF5JCPU
         ICM   R3,B'0111',SMF5SRBT
         AR    R3,R1                   * ADD TCB AND SRB TIME TOGETHER
         CPUTIME (3),FULL              * CALC. TOTAL TIME
         MVC   OCPU(L'MINUTES+L'SECONDS),MINUTES
         SPACE
         BINTIME SMF5TME,OETIME        * JOB/STC/TSO END TIME
         SPACE
* COMPARE SMF TYPE 5: END DATE
         CP    OLDEJUL(4),SMF5DTE      * END DATE CHANGE ?
         BE    $NOEDATE                * NOPE, CONTINUE
         MVC   OLDEJUL(4),SMF5DTE      * REPLACE OLD
         MVC   JULPARM1(4),SMF5DTE     * LOAD PARM
         BAL   BALREG,$JULDATE
         MVC   OEDATE(8),JULPARM3      * SAVE 00JAN88
         MVC   ODAY(3),JULPARM3+7      * SAVE 'WEEKDAY'
$NOEDATE DS    0H
         CLI   SMF5JICL,C' '           * NO JOB CLASS, MUST BE STC
         BE    $STCTIME
         CLI   SMF5JICL,X'00'          * NO JOB CLASS, MUST BE STC
         BE    $STCTIME
         SPACE
* COMPARE SMF TYPE 5: JOB START INITIATION DATE
         SPACE
         BINTIME SMF5JIT,OSTIME        * JOB INITIATION TIME
         CP    OLDSJUL(4),SMF5JID      * START DATE CHANGE ?
         BE    $NOSDATE                * NOPE, CONTINUE
         MVC   OLDSJUL(4),SMF5JID      * REPLACE DATE
         MVC   JULPARM1(4),SMF5JID     * LOAD PARM
         BAL   BALREG,$JULDATE         * DO IT
         MVC   OSDATE(8),JULPARM3      * SAVE START INIT. DATE
         MVC   ODAY(3),JULPARM3+8      * WEEK DAY
         B     $NOSDATE                * CONTINUE, SKIP STC STUFF
         SPACE
$STCTIME DS    0H                      * READER TIME, STC
         BINTIME SMF5RST,OSTIME        * READER TIME, STC
         SPACE
* COMPARE SMF TYPE 5: STC START READER DATE
         SPACE
         CP    OLDSJUL(4),SMF5RSD      * START DATE CHANGE ?
         BE    $NOSDATE                * NOPE, CONTINUE
         MVC   OLDSJUL(4),SMF5RSD      * REPLACE OLD DATE
         MVC   JULPARM1(4),SMF5RSD     * LOAD PARM
         BAL   BALREG,$JULDATE         * DO IT
         MVC   OSDATE(8),JULPARM3      * SAVE READER START DATE
         MVC   ODAY(3),JULPARM3+8      * WEEK DAY
         SPACE
$NOSDATE DS    0H
         SPACE
* PROCESS RETURN CODES
         SPACE
         XR    R5,R5
         XR    R4,R4
         ICM   R5,B'0011',SMF5JCC      * GET RETURN CODE
         LTR   R5,R5                   * RC=0 ?
         BZ    $ZERORC                 * YEP, SAY SO ...
         ST    R5,TRC                  * STORE IT:    R5=0000 WXYZ
         SRL   R5,3*4                  * GET TOP HALF R5=0000 000W
         SLDL  R4,8*4                  * MOVE UP      R5=0000 0000
*                                      *              R4=0000 000W
         L     R5,TRC                  *              R5=0000 WXYZ
         SRL   R5,2*4                  *              R5=0000 00WX
         SLL   R5,7*4                  *              R5=X000 0000
         SRL   R5,1*4                  *              R5=0X00 0000
         SLDL  R4,2*4                  *              R5=0000 0000
*                                      *              R4=0000 W0X0
         L     R5,TRC                  *              R5=0000 WXYZ
         SRL   R5,1*4                  *              R5=0000 0WXY
         SLL   R5,7*4                  *              R5=Y000 0000
         SRL   R5,1*4                  *              R5=0Y00 0000
         SLDL  R4,2*4                  *              R5=0000 0000
*                                      *              R4=000W X0Y0
         L     R5,TRC                  *              R5=0000 WXYZ
         SLL   R5,7*4                  *              R5=Z000 0000
         SRL   R5,1*4                  *              R5=0Z00 0000
         SLDL  R4,2*4                  *              R5=0000 0000
*                                      *              R4=0W0X 0Y0Z
         ST    R4,TRC
         TR    TRC(4),TRTBL            *
         CLI   TRC,C'0'
         BNE   $NZERORC
         MVI   TRC,X'40'
         CLI   TRC+1,C'0'
         BNE   $NZERORC
         MVI   TRC+1,X'40'
         B     $NZERORC
$ZERORC  MVC   ORC(2),=C'  '
         MVC   ORC+2(2),=C'00'
         B     *+10
$NZERORC MVC   ORC(4),TRC              *
         MVC   OJOBCL(L'SMF5JICL),SMF5JICL * JOB CLASS
         SPACE
* PROCESS NUMBER OF STEPS
         SPACE
         XR    R1,R1                   *
         IC    R1,SMF5NST              * NUMBER OF STEPS
         CVD   R1,DWORD                * ... CONV
         UNPK  OSTEPS(2),DWORD(8)      *
         OI    OSTEPS+1,X'F0'          *
         SPACE
* PROCESS PERFORMANCE GROUP NUMBER
         SPACE
         ICM   R1,B'0011',SMF5PGNO     * PERFORMANCE GROUP
         CVD   R1,DWORD                *
         MVC   TGROUP(4),=X'40202021'  *
         ED    TGROUP(4),DWORD+6       *
         MVC   OGROUP(2),TGROUP+2      *
         SPACE
* PROCESS PROGRAMMER NAME
         SPACE
         MVC   OPGMR(L'SMF5PRGN),SMF5PRGN
         SPACE
* PRINT RESULTS
         SPACE
         TESTOPEN SORTIN
         LTR   R15,R15
         BZ    $SORTIN
         C     LINECNT,=F'1'
         BNE   $PUTREC
         MVI   OSMF5,C'0'
$PUTREC  PUT   SYSPRINT,OSMF5          * WRITE RECORD
         MVI   OSMF5,C' '
         A     LINECNT,=F'1'           * ADD TO LINE COUNT
         C     LINECNT,=F'58'          * CHECK IT
         BL    $READ                   *
         BAL   BALREG,$HEADER          * IF HIGH, NEW HEADER
         B     $READ                   *
$SORTIN  MVI   OSMF5,C' '
         PUT   SORTIN,OSMF5+1
         B     $READ                   *
         SPACE 2
$HEADER  DS    0H                      *
         A     PGCOUNT,=F'1'
         CVD   PGCOUNT,DWORD
         MVC   PAGE(4),=X'40202021'
         ED    PAGE(4),DWORD+6
         PUT   SYSPRINT,OSMF5H         *
         XR    LINECNT,LINECNT         *
         A     LINECNT,=F'1'           *
         BR    BALREG                  *
         SPACE
ERRSMFIN DS     0H
         WTO    'MISSING DDNAME SMFIN ...'
         LA     R1,8                   * SET RETURN CODE
         ST     R1,RC                  * RC=08
         B      FINISH                 * GO BACK
ERRSORTN DS     0H
         WTO    'MISSING DDNAME SORTIN ...'
         LA     R1,8                   * SET RETURN CODE
         ST     R1,RC                  * RC=08
         B      FINISH                 * GO BACK
$READCNT A      COUNT,=F'1'            * ADD ONE TO RECORD COUNT
         BR     BALREG                 * GO BACK
         SPACE
$JCLERR  DS    0H                      * SMF 5 REC LEN < X'78'
         BAL   BALREG,$BADJOBS
         LTR   R15,R15                 * CHECK
         BNZ   $READ                   * BAD IF RC^=0
         XC    BLANKS,BLANKS           * MAKE ZEROS
         TR    BLANKS(133),=C' '       * MAKE BLANKS
         MVI   BLANKS,C' '             * DOUBLE SPACE
         MVC   BLANKS+1(L'SMF5JBN),SMF5JBN  MOVE JOBNAME
         MVC   BLANKS+L'SMF5JBN+3(30),=CL30'JCL ERROR/TYPRUN SCAN'
         TESTOPEN SORTIN
         LTR   R15,R15
         BZ    $SORTIN1
         PUT   SYSPRINT,BLANKS
         XC    BLANKS,BLANKS          * MAKE ZEROS
         TR    BLANKS(133),=C' '      * MAKE BLANKS
         A     LINECNT,=F'1'
         C     LINECNT,=F'58'          * CHECK IT
         BL    $READ                   *
         BAL   BALREG,$HEADER          * IF HIGH, NEW HEADER
         B     $READ
$SORTIN1 MVI   BLANKS,C' '
         PUT   SORTIN,BLANKS+1
         XC    BLANKS,BLANKS          * MAKE ZEROS
         TR    BLANKS(133),=C' '      * MAKE BLANKS
         B     $READ                   *
         SPACE
$BADJOBS DS    0H                      * ___ BAD JOBS ___
         CLC   SMF5JBN(3),=C'JOB'      * NO 'JOB'
         BE    $BDJOB                  * NOPE, READ SOME MORE
         CLC   SMF5JBN(7),=C'DEALLOC'  * NO 'DEALLOC'
         BE    $BDJOB                  * NOPE, READ SOME MORE
         LA    R15,0                   * SAY WE HAVE A GOOD ONE
         BR    BALREG
$BDJOB   LA    R15,4                   * SAY WE HAVE A BAD JOB
         BR    BALREG
$JULDATE DS    0H                      * THIS IS A JULIAN DATE
         LA    R1,3                    * THIS IS A JULIAN DATE
         ST    R1,JULPARM2             * ... SAVE IT
         LA    R1,8+128                * WE WANT 'DDJANYY' AND WEEKDAY
         ST    R1,JULPARM4             * ... SAVE THAT
         LA    R1,JULPTRS              * LOAD ADDR OF PARM LIST
         L     R15,=V(JULSUB)          * GET READY ...
         BALR  R14,R15                 * DO IT
         BR    BALREG
         EJECT
$EOF     CLOSE  (SMFIN)                *
         TESTOPEN SORTIN
         LTR   R15,R15
         BNZ   $CONT1
         CLOSE (SORTIN)
$CONT1   CVD   COUNT,DWORD             * CONVERT
         ED    RECREAD(8),DWORD+4      *
         PUT   SYSPRINT,SMFFILE        *
         CLOSE (SYSPRINT)              *
         B     FINISH                  *
FINISH   SR     R15,R15                * ZERO RETURN REGISTER
         DROP   R2
         L      R15,RC                 * LOAD RETURN CODE
         L      R13,SAVE+4             * RESTORE OLD SAVE AREA ADDR.
         L      R14,12(R13)            * RETURN ADDRESS
         LM     R0,R12,20(R13)         * REST OF THE REGS
         BR     R14                    * RETURN
SAVE     DS     18F                    * SAVE AREA FOR THIS PGM
SAVE1    DS     1F
SEC4K    DC     A(SMF5+4095)           *
TRC      DS     F
TRTBL    DC     C'0123456789ABCDEF'    * TRANSLATE TABLE FOR RCODE
HRS      DS     F
HRMIN    DS     F
MINS     DS     F
MINSEC   DS     F
SECS     DS     F
RC       DS     F                      * RETURN CODE
         DS     0D                     *
DWORD    DS     D                      * DOUBLE WORD
         DS     0D                     * SETUP FOR CALLING DATEJUL
JULPTRS  DC     A(JULPARM1)            *
         DC     A(JULPARM2)            *
         DC     A(JULPARM3)            *
         DC     A(JULPARM4)            *
         DC     A(JULPARM5)            *
JULPARM1 DS     F                      * INPUT DATE: 'YYYYDDDF' PACKED
JULPARM2 DS     F                      * INPUT CODE: JULIAN PL4
JULPARM4 DS     F                      * OUTPUT CODE: 'YYMMMDD'
JULPARM3 DS     CL8                    * OUTPUT FIELD
         DS     CL12                   * WEEKDAY CL12
JULPARM5 DS     32D                    * 256 BYE WORK AREA
BLANKS   DC     CL133' '
OLDEJUL  DC     PL4'0'
OLDSJUL  DC     PL4'0'
TGROUP   DC     CL4' '                 *
TOTCPUTM DS     F
SMFFILE  DC     CL133'0'               *
         ORG    SMFFILE+1
         DC     C'DSN='                *
ODSN     DC     CL44' '                *
         DC     C'VOLSER='             *
OVOL     DC     CL10' '                *
         DC     C'RECORDS READ = '     *
RECREAD  DC     X'4020202020202021'    * RECORDS READ
         ORG    ,
         EJECT
OSMF5    DC     CL133' '               * OUTPUT OF SMF5 RECORD
         ORG    OSMF5+1
OJOB     DC     CL8' ',C' '            * JOB NAME
ORC      DC     CL4' ',C' '            * RETURN CODE
OSTEPS   DC     CL2' ',C' '            * STEPS IN JOB
OSTIME   DC     CL8' ',C' '            *
OSDATE   DC     CL7' ',C' '            * DATE FROM JULSUB 'DDMMMYY'
OETIME   DC     CL8' ',C' '            *
OEDATE   DC     CL7' ',C' '            * DATE FROM JULSUB 'DDMMMYY'
ODAY     DC     CL3' ',C' '            * DATE FROM JULSUB 'WEEKDAY'
OJOBCL   DC     CL2' '                 * JOBCLASS
OTCB     DC     CL7' '                 * CPU SECONDS, SRB
OSRB     DC     CL7' ',C' '            * CPU SECONDS, SRB
OCPU     DC     CL8' ',C' '            * CPU SECONDS, TCB+SRB
OGROUP   DC     CL2' ',C' '            * PERFORMANCE GROUP
OPGMR    DC     CL20' ',C' '           * PROGRAMMER NAME
LOSMF5   EQU    *-OJOB
         ORG    ,
OSMF5H   DC     CL133'1'               * OUTPUT OF SMF5 HEADER
         ORG    OSMF5H+1
         DC     CL9'__JOB__'           * JOB NAME
         DC     CL5'  RC'               * RETURN CODE
         DC     CL3' #'                * STEPS IN JOB
         DC     CL9'_STIME_'           *
         DC     CL8'_SDATE_'           * DATE FROM JULSUB 'DDMMMYY'
         DC     CL9'_ETIME_'           *
         DC     CL8'_EDATE_'           * DATE FROM JULSUB 'DDMMMYY'
         DC     CL4'DAY'               * DATE FROM JULSUB 'WEEKDAY'
         DC     CL3'CL'                *
         DC     C'  TCB  + SRB = CPUTIME'
         DC     C' PG',C' '            *
         DC     C'_ PROGRAMMER NAME _',C'  '
         ORG    ,
         ORG    *-9
         DC     C'PAGE '
PAGE     DC     CL4' '
         SPACE
         PRINT  NOGEN
SMFIN    DCB   DDNAME=SMFIN,DSORG=PS,LRECL=32767,RECFM=VBS,            X
               MACRF=GL,EXLST=EXL1,EODAD=$EOF
SORTIN   DCB   DDNAME=SORTIN,DSORG=PS,LRECL=121,RECFM=FB,BLKSIZE=23474,X
               MACRF=PM,EXLST=EXL2
SYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,LRECL=133,BLKSIZE=23408,       X
               RECFM=FBA,MACRF=PM
         SPACE
         DS     0F
EXL1     DC     X'07',AL3(JFCB)
EXL2     DC     X'87',AL3(JFCB)
JFCB     DS     0H
         IEFJFCBN LIST=NO
         PRINT  GEN
         LTORG
SMFDSECT DSECT
         IFASMFR  5
         REGS
         END
