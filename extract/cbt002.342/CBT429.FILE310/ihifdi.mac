 TITLE 'IHIFDI, POWER ROUTINE, REAL**INTEGER, LONG PRECISION'
*STATUS: CHANGE LEVEL 000                                             *
*                                                                     *
*FUNCTION/OPERATION: SEE CODE.                                        *
*                                                                     *
*ENTRY POINT:                                                         *
*        IHIFDI - POWER FUNCTION, REAL**INT, LONG  LA  1,PARMLIST     *
*                                                  BALR 14,15         *
*                                                  DATA PASSED BY NAME*
*   THE MODULE IS ENTERED FROM THE GENERATED OBJECT MODULE.           *
*                                                                     *
*INPUT: N/A                                                           *
*                                                                     *
*OUTPUT: N/A                                                          *
*                                                                     *
*EXTERNAL ROUTINES: N/A                                               *
*                                                                     *
*EXIT-NORMAL: RETURN BY MEANS OF   BR  14.  RESULT IN FPR0.           *
*                                                                     *
*EXIT-ERROR: IF BASE IS ZERO AND EXPONENT NOT POSITIVE GO TO ERROR    *
*   ROUTINE VIA     B     FSAERR+35*4(13)                             *
*                                                                     *
*TABLES/WORKAREAS: N/A                                                *
*                                                                     *
*ATTRIBUTES: THE MODULE IS SERIALLY REUSABLE.                         *
*                                                                     *
*NOTES: CHARACTER CODE DEPENDENCE                                     *
*   THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON A SPECIAL       *
*   INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET.            *
       SPACE
IHIFDIXP CSECT
       ENTRY   IHIFDI
       DC      CL7'IHIFDI'             ENTRY-POINT IDENTIFIER
       DC      X'06'
           USING *,LINK            MAKE LINK REG THE BASE ADDRESS REG
IHIFDI STM     RTN,ADDR,12(SAVE)       SAVE REGISTERS
           L     ADDR,0(0,PLIST)   LOAD PLIST OF BASE NO IN ADDR REG
           LD    BASE,0(0,ADDR)    LOAD BASE NO INTO BASE NO REG
           L     ADDR,4(0,PLIST)   LOAD PLIST OF EXPONENT IN ADDR REG
           L     EXPN,0(0,ADDR)    LOAD EXPONENT INTO EXPN REG
           LTDR  BASE,BASE         CHECK IF BASE NO PLUS, MINUS,OR ZERO
           BC    8,ERROR           IF BASE NO IS ZERO, BRANCH TO ERROR
           SR    EXPSW,EXPSW       SET NEGATIVE EXPN SWITCH REG TO ZERO
           LTR   EXPN,EXPN         CHECK IF EXPONENT PLUS,MINUS,OR ZERO
           BC    2,PLUS            IF EXPN IS POSITIVE, BRANCH TO PLUS
           BC    8,LOAD1           IF EXPONENT IS ZERO, BRANCH TO LOAD1
           LCR   EXPN,EXPN         EXPN MINUS, CONVERT TO 2S COMPLIMENT
           LA    EXPSW,1(EXPSW)    SET EXP SW REG TO ONE FOR MINUS EXPN
PLUS       LD    FACTOR,ONE        LOAD FACTOR OF ONE IN FACTOR REG
LOOP       SRDL  EXPN,1            SHIFT LOW BIT EXPN REG INTO ADDR REG
           LTR   ADDR,ADDR         TEST SIGN POS ADDR REG FOR MINUS BIT
           BC    10,JUMP           IF SIGN BIT NOT MINUS,BRANCH TO JUMP
           MDR   FACTOR,BASE       MULTIPLY FACTOR REG BY BASE NO REG
JUMP       LTR   EXPN,EXPN         CHECK IF EXPONENT PLUS,MINUS,OR ZERO
           BC    8,NEXT            IF EXPONENT NOW ZERO, BRANCH TO NEXT
           MDR   BASE,BASE         MULTIPLY BASE NO BY DOUBLING ITSELF
           BC    15,LOOP           BRANCH TO LOOP TO TEST NEXT EXPN BIT
NEXT       LTR   EXPSW,EXPSW       TEST IF EXPSW REG PLUS,MINUS,OR ZERO
           BC    8,SWAP            IF EXPN IS NOT MINUS, BRANCH TO SWAP
           LD    BASE,ONE          LOAD ONE IN BASE NO REG AS DIVIDEND
           DDR   BASE,FACTOR       DIV BASE REG BY FACTOR REG (RESULT)
           BC    15,EXIT           BRANCH TO EXIT (RESULT IN BASE REG)
SWAP       LDR   BASE,FACTOR       LOAD FACTOR REG INTO BASE NO REG
           BC    15,EXIT           BRANCH TO EXIT (RESULT IN BASE REG)
LOAD1      LD    BASE,ONE          LOAD PLUS 1 AS RESULT IN BASE NO REG
EXIT       LM    RTN,ADDR,12(SAVE) RELOAD FORMER VALUES OF GP REG 14-3
           MVI   12(SAVE),X'FF'    STORE ALL 1 BITS IN SAVE AREA WORD 4
           BCR   15,RTN            BRANCH TO ADDRESS IN RETURN REG RTN
ERROR      LTR   EXPN,EXPN         CHECK IF EXPONENT PLUS,MINUS,OR ZERO
           BC    2,EXIT            IF EXPN IS POSITIVE, BRANCH TO EXIT
         B     FSAERR+35*4(13)     BASE NO EQUAL ZERO AND EXPONENT     X
                                  NOT GREATER THAN ZERO ,UNDEFINED
*                FLOATING POINT REGISTERS
BASE       EQU   0                 REGISTER FOR BASE NO, PASSING RESULT
FACTOR     EQU   2                 REGISTER FOR FACTOR,COMPUTING RESULT
*                GENERAL PURPOSE REGISTERS
SAVE       EQU   13                REGISTER CONTAINS SAVE REG AREA ADDR
RTN        EQU   14                REGISTER FOR RETURN TO PREVIOUS RTN
LINK       EQU   15                REGISTER FOR LINKAGE TO ANOTHER RTN
EXPSW      EQU   0                 REGISTER FOR TESTING FOR MINUS EXPN
PLIST      EQU   1                 REGISTER USED FOR PARAMETER LIST REF
EXPN       EQU   2                 REGISTER FOR EXPONENT IN COMPUTATION
ADDR       EQU   3                 REGISTER FOR INDEXING PARAMETER ADDR
*                ADCONS AND CONSTANTS AREA
           DS    0D                  FORCE TO NEXT DOUBLE WORD BOUNDARY
ONE        DC    X'4110000000000000'    CONSTANT ONE IN DOUBLE PREC F P
FSAERR   EQU   X'1CC'
       END
