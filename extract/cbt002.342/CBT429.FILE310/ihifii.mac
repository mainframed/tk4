 TITLE 'IHIFII, POWER ROUTINE, INTEGER**INTEGER'
*STATUS: CHANGE LEVEL 000                                             *
*                                                                     *
*FUNCTION/OPERATION: SEE CODE.                                        *
*                                                                     *
*ENTRY POINT:                                                         *
*        IHIFII - POWER FUNCTION, INT**INT         LA   1,PARMLIST    *
*                                                  BALR 14,15         *
*                                                  DATA PASSED BY NAME*
*   THE MODULE IS ENTERED FROM THE GENERATED OBJECT MODULE.           *
*                                                                     *
*INPUT: N/A                                                           *
*                                                                     *
*OUTPUT: N/A                                                          *
*                                                                     *
*EXTERNAL ROUTINES: N/A                                               *
*                                                                     *
*EXIT-NORMAL: RETURN BY MEANS OF   BR  14.  RESULT IN FPR0.           *
*                                                                     *
*EXIT-ERROR: IF BASE IS ZERO AND EXPONENT NOT POSITIVE GO TO ERROR    *
*   ROUTINE VIA     B     FSAERR+35*4(13)                             *
*                                                                     *
*TABLES/WORKAREAS: N/A                                                *
*                                                                     *
*ATTRIBUTES: THE MODULE IS SERIALLY REUSABLE.                         *
*                                                                     *
*NOTES: CHARACTER CODE DEPENDENCE                                     *
*   THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON A SPECIAL       *
*   INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET.            *
       SPACE
IHIFIIXP CSECT
       ENTRY   IHIFII
       DC      CL7'IHIFII'             ENTRY-POINT IDENTIFIER
       DC      X'06'
           USING *,LINK            MAKE LINK REG THE BASE ADDRESS REG
IHIFII STM     RTN,ADDR,12(SAVE)       SAVE REGISTERS
           L     ADDR,0(0,PLIST)   LOAD PLIST OF BASE NO IN ADDR REG
           L     BASE,0(0,ADDR)    LOAD BASE NO INTO BASE NO REG
           L     ADDR,4(0,PLIST)   LOAD PLIST OF EXPONENT IN ADDR REG
           L     EXPN,0(0,ADDR)    LOAD EXPONENT INTO EXPN REG
           LR    RESULT,BASE       LOAD BASE NO INTO RESULT REG
           LTR   BASE,BASE         CHECK IF BASE NO PLUS, MINUS,OR ZERO
           BC    8,ERROR           IF BASE NO IS ZERO, BRANCH TO ERROR
           LTR   EXPN,EXPN         CHECK IF EXPONENT PLUS,MINUS,OR ZERO
           BC    8,LOAD1           IF EXPONENT IS ZERO, BRANCH TO LOAD1
           BCTR  BASE,0            DECREMENT BY ONE VALUE OF BASE NO
           LTR   BASE,BASE         CHECK IF BASE NO PLUS, MINUS,OR ZERO
           BC    8,EXIT            IF BASE NO NOW ZERO, BRANCH TO EXIT
           LA    BASE,2(BASE)      INCREMENT BY TWO VALUE OF BASE NO
           LTR   BASE,BASE         CHECK IF BASE NO PLUS, MINUS,OR ZERO
           BC    8,TEST            IF BASE NO NOW ZERO, BRANCH TO TEST
           LTR   EXPN,EXPN         CHECK IF EXPONENT PLUS,MINUS,OR ZERO
           BC    2,PLUS            IF EXPN IS POSITIVE, BRANCH TO PLUS
           SR    RESULT,RESULT     EXPN MINUS,MAKE VALUE OF RESULT ZERO
           BC    15,EXIT           BRANCH TO EXIT TO LEAVE THIS ROUTINE
PLUS       LR    BASE,RESULT       RELOAD ORG BASE NO FROM RESULT REG
           L     FACTOR,ONE        LOAD FACTOR OF ONE IN FACTOR REG
LOOP       SRDL  EXPN,1            SHIFT LOW BIT EXPN REG INTO ADDR REG
           LTR   ADDR,ADDR         TEST SIGN POS ADDR REG FOR MINUS BIT
           BC    10,JUMP           IF SIGN BIT NOT MINUS,BRANCH TO JUMP
           MR    FACT,BASE         MULTIPLY FACTOR REGS BY BASE NO REGS
         SLDA  FACT,32            CHECK  OVERFLOW
         SRDA  FACT,32
JUMP       LTR   EXPN,EXPN         CHECK IF EXPONENT PLUS,MINUS,OR ZERO
           BC    8,NEXT            IF EXPONENT NOW ZERO, BRANCH TO NEXT
           MR    BASE1,BASE        MULTIPLY BASE NO BY DOUBLING ITSELF
         SLDA  BASE1,32
         SRDA  BASE1,32
           BC    15,LOOP           BRANCH TO LOOP TO TEST NEXT EXPN BIT
NEXT     LR    RESULT,FACTOR      LOAD FFACTOR INTO RESULT REGISTER
           BC    15,EXIT           BRANCH TO EXIT TO LEAVE THIS ROUTINE
TEST       SRDL  EXPN,1            SHIFT LOW BIT EXPN REG INTO ADDR REG
           LTR   ADDR,ADDR         TEST SIGN POS ADDR REG FOR MINUS BIT
           BC    4,EXIT            IF SIGN MINUS (EXPN ODD), GO TO EXIT
LOAD1      L     RESULT,ONE        LOAD RESULT REG WITH VALUE OF PLUS 1
EXIT       LM    RTN,LINK,12(SAVE) RELOAD FORMER VALUES OF GP REG 14-15
           LM   FACT,ADDR,28(SAVE) RELOAD FORMER VALUES OF GP REG 2-7
           MVI   12(SAVE),X'FF'    STORE ALL 1 BITS IN SAVE AREA WORD 4
           BCR   15,RTN            BRANCH TO ADDRESS IN RETURN REG RTN
ERROR      LTR   EXPN,EXPN         CHECK IF EXPONENT PLUS,MINUS,OR ZERO
           BC    2,EXIT            IF EXPN IS POSITIVE, BRANCH TO EXIT
         B     FSAERR+35*4(SAVE)
*                GENERAL PURPOSE REGISTERS
SAVE       EQU   13                REGISTER CONTAINS SAVE REG AREA ADDR
RTN        EQU   14                REGISTER FOR RETURN TO PREVIOUS RTN
LINK       EQU   15                REGISTER FOR LINKAGE TO ANOTHER RTN
RESULT     EQU   0                 REGISTER FOR PASSING ON FINAL RESULT
PLIST      EQU   1                 REGISTER USED FOR PARAMETER LIST REF
FACT       EQU   2                 REGISTER USED AS MPY REG FOR FACTOR
FACTOR     EQU   3                 REGISTER USED FOR FACTOR AND ANSWER
BASE1      EQU   4                 REGISTER USED AS MPY REG FOR BASE NO
BASE       EQU   5                 REGISTER FOR BASE NO IN COMPUTATION
EXPN       EQU   6                 REGISTER FOR EXPONENT IN COMPUTATION
ADDR       EQU   7                 REGISTER FOR INDEXING PARAMETER ADDR
*                ADCONS AND CONSTANTS AREA
ONE        DC    F'1'              INTERGER CONSTANT OF ONE
FSAERR   EQU   X'1CC'
           END
