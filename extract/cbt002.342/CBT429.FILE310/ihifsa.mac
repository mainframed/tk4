 TITLE 'IHIFSA - OS/360 ALGOL FIXED STORAGE AREA'
*STATUS.. CHANGE LEVEL 0
*FUNCTION/OPERATION..
*   THIS MODULE (KNOWN AS THE FSA) IS A COLLECTION OF ABOUT 20
*   ROUTINES WHICH ARE REQUIRED FOR THE EXECUTION OF ALMOST ANY ALGOL
*   PROGRAM. THE ENTRY POINT AND PURPOSE OF EACH ROUTINE IS LISTED
*   UNDER 'ENTRY POINTS' BELOW. DETAILED INFORMATION ON THE FUNCTION,
*   CALLING SEQUENCE, TRANSMISSION OF PARAMETERS ETC. CAN BE FOUND
*   IN THE COMMENTARY WHICH PRECEDES THE PROGRAM LISTING FOR EACH
*   ROUTINE.
*
*   THE MODULE CONSISTS OF TWO CONTROL SECTIONS, IHIFSARA AND IHIFSARB.
*   IHIFSARA CONTAINS THE ROUTINES, TABLES AND OTHER INFORMATION USED
*   DURING THE EXECUTION OF THE ALGOL OBJECT PROGRAM.
*   IHIFSARB CONTAINS MAINLY THE INITIALIZATION AND TERMINATION
*   ROUTINES WITH THEIR ASSOCIATED TABLES AND WORK AREAS.
*
*   REG. 13(FSA) IS THE BASE REGISTER FOR IHIFSARA.
*   REG. 7(GRF) IS THE BASE REGISTER FOR IHIFSARB.
*
*ENTRY POINTS..MOST OF THE ENTRY POINTS LISTED HERE ARE COLLECTED IN
*   A BRANCH LIST LOCATED AT BRLIST. THE ENTRY POINTS CONTAINED IN THIS
*   BRANCH LIST ARE MARKED WITH AN ASTERISK AFTER THE NAME IN THE
*   LISTING BELOW.
*
*        CAP1*- CALL ACTUAL PARAMETER, PART 1. ENTER THUNK ROUTINE
*   FROM A PROCEDURE.
*        CAP2*- CALL ACTUAL PARAMETER, PART 2. RETURN FROM THE THUNK
*   ROUTINE TO THE PROCEDURE.
*        PROLOGP*- ENTER A PROCEDURE WHEN IT IS CALLED VIA AN ACTUAL
*   PARAMETER.
*        PROLOG*- ENTER A BLOCK OR A PROCEDURE.
*        RETPROG*- LEAVE A BLOCK OR PROCEDURE VIA A 'GO TO' STATEMENT.
*        EPILOGP*- RETURN FROM A PROCEDURE VIA THE 'END' STATEMENT.
*        EPILOGB*- LEAVE A BLOCK VIA THE 'END' STATEMENT.
*        FRDSA - FREE STORAGE FOR DSA AND ARRAYS. SYNONYM FOR EPILOGB
*   WHEN USED AS A SUBROUTINE BY THE ERROR ROUTINE IHGERROR.
*        CSWE1*- CALL SWITCH ELEMENT, PART 1.
*        CSWE2*- CALL SWITCH ELEMENT, PART 2.
*        LOADPP*- LOAD A PRECOMPILED PROCEDURE.
*        SPDECL - STANDARD PROCEDURE DECLARATION ROUTINE. (ENTERED VIA
*   THE PROLOG ROUTINE).
*        VALUCALL*- HANDLE FORMAL PARAMETERS CALLED BY VALUE.
*        GETMSTO*- GET MAIN STORAGE FOR ARRAYS.
*        CNVIRD - CONVERT INTEGER TO REAL.
*        CNVRDI - CONVERT REAL TO INTEGER.
*        ENTIER - EXECUTE ALGOL ENTIER FUNCTION.
*        TRACE*- STORE THE CURRENT SEMICOLON NUMBER.
*        IHGFSAIN - INITIALIZE FOR PROGRAM EXECUTION AND GIVE CONTROL
*   TO THE OBJECT MODULE.
*        TERMNTE*- TERMINATE THE EXECUTION.
*        PIEROUT - PROGRAM INTERRUPT ROUTINE.
*        FSAERR - STORE ERROR NUMBER AND LINK TO THE ERROR ROUTINE
*   IHIERROR.
*
*INPUT.. IF THE TRACE OPTION IS USED, THE TERMINATION ROUTINE MAY READ
*   A TABLE OF SEMICOLON NUMBERS, WHICH HAS BEEN WRITTEN ON SYSUT1 BY
*   THE TRACE ROUTINE.
*
*OUTPUT.. IF THE TRACE OPTION IS USED, THE TRACE ROUTINE MAY WRITE A
*   TABLE OF SEMICOLON NUMBERS ON SYSUT1. THIS TABLE IS READ AND THEN
*   WRITTEN ON SYSPRINT IN EDITED FORMAT BY THE TERMINATION ROUTINE.
*   THE MESSAGE 'END OF ALGOL PROGRAM EXECUTION' IS WRITTEN ON SYSPRINT
*   AS THE FINAL OUTPUT FROM THE EXECUTION.
*
*EXTERNAL ROUTINES..
*
*        IHIIOROP - OPEN A DATA SET (USED ONLY FOR SYSPRINT).
*        IHIIORCL - CLOSE A DATA SET (USED ONLY FOR SYSPRINT).
*        IHIIORCP - CLOSE ALL OPEN DATA SETS (EXCEPT SYSUT1).
*        IHIIORNX - HANDLE THE NEXT I/O RECORD.
*        IHIERROR - EDIT AND PRINT AN ERROR MESSAGE AND, IF REQUESTED,
*   AN ALGOL STORAGE DUMP. (ENTERED BY LINK).
*
*   THE FOLLOWING TWO EXTERNAL TABLES ARE IN THE OBJECT MODULE.
*
*        IHIENTIF - INFORMATION NEEDED FOR ENTERING THE OBJECT MODULE.
*   FORMAT.. IHIENTIF DC A(PBTAB)  ADDRESS OF PROGRAM BLOCK TABLE
*                     DC A(LATAB)  ADDRESS OF LABEL ADDRESS TABLE
*                     DC X'SL'     X'02' OR X'00' FOR SHORT/LONG PREC.
*                     DC AL3(ENTRYPOINT)  ADDRESS OF FIRST INSTRUCTION
*
*        IHIDSTAB - INFORMATION ABOUT THE STATUS OF EACH DATA SET USED.
*   FORMAT AND USE.. SEE THE DUMMY SECTION DDSTAB AND THE LISTING OF
*   THE I/O SUBROUTINE MODULE IHIIORTN.
*
*EXITS - NORMAL.. THE TERMINATION ROUTINE IS ENTERED BY A BRANCH TO
*   TERMNTE, AND A FINAL RETURN IS BY A RETURN MACRO WITH THE RETURN
*   CODE ZERO IN REG. 15.
*
*EXITS - ERRORS.. ON RETURN FROM THE ERROR ROUTINE IHIERROR, THE
*   TERMINATION ROUTINE IS ENTERED BY A BRANCH TO ALGTRMA, AND A FINAL
*   RETURN IS MADE BY A RETURN MACRO WITH THE RETURN CODE 4 IN REG. 15.
*
*TABLES/WORK AREAS..
*   THE LOWER PART OF IHIFSARA CONTAINS A BLOCK OF WORK AREAS AND
*   CONSTANTS WHICH ARE USED IN COMMON BY SEVERAL ROUTINES. THE MOST
*   IMPORTANT ARE..
*
*        SAVE - STANDARD SAVE AREA USED BY ALL FIRST-LEVEL SUBROUTINES
*   EXCEPT THOSE CONTAINED IN THIS MODULE.
*        ASAVE - SAVE AREA USED BY SOME ROUTINES IN THIS MODULE.
*        FCTVALST - STORAGE FOR THE RESULT OF AN ALGOL FUNCTION.
*        PROLPBN - PROGRAM BLOCK NUMBER OF A BLOCK OR PROCEDURE TO BE
*   ENTERED VIA THE PROLOG ROUTINE.
*        PGOPSW - THE OLD PSW IN CASE OF A PROGRAM INTERRUPT.
*        SCRCS - THE CURRENT SEMICOLON NUMBER.
*        OPTSW - FLAG BITS REPRESENTING EXECUTION TIME OPTIONS AND
*   SWITCHES FOR CONTROLLING THE PROGRAM FLOW.
*        FSAERCOD - ERROR NUMBER IDENTIFYING AN EXECUTION ERROR.
*        IHIFSARS - FOUR POINTERS FOR CONTROLLING THE RETURN ADDRESS
*   STACK.
*        BRLIST - A LIST OF ENTRY POINTS TO MOST OF THE ROUTINES
*   MENTIONED UNDER 'ENTRY POINTS'. THE LIST CONSISTS MAINLY OF
*   BRANCH INSTRUCTIONS.
*        IHIFSAER - A LIST OF BAL INSTRUCTIONS, EACH CORRESPONDING TO
*   ONE TYPE OF ERROR, THE NUMBER OF WHICH IS DETERMINED BY ITS
*   POSITION IN THE LIST.
*
*   OTHER WORK AREAS AND CONSTANTS OF GENERAL INTEREST ARE..
*        PARMLIST - A LIST OF THE VALID EXECUTION OPTION PARAMETERS.
*        TRBUF - BUFFER POINTERS AND RECORD COUNTER FOR CONTROLLING
*   THE OUTPUT OF TRACING INFORMATION ON SYSUT1.
*        PIETAB - A LIST OF 16 ADDRESS CONSTANTS EACH POINTING TO AN
*   ENTRY IN IHIFSAER, WHICH CORRESPONDS TO A TYPE OF PROGRAM INTERRUPT
*        FPINST - A LIST OF FLOATING POINT INSTRUCTIONS USED BY THE
*   VALUCALL AND SPDECL ROUTINES.
*        CNVINSTE - INSTRUCTIONS TO BE INSERTED INTO THE CONVERT
*   ROUTINE FOR SHORT PRECISION.
*        CNVINSTD - INSTRUCTIONS TO BE INSERTED INTO THE CONVERT
*   ROUTINE FOR LONG PRECISION.
*
*ATTRIBUTES.. THIS MODULE IS SERIALLY REUSABLE.
*
*NOTES..THIS MODULE IS ONLY INTENDED TO BE USED WHEN LINKAGE EDITED
*   TOGETHER WITH AN OS/360 ALGOL OBJECT MODULE AND WITH THE OS/360
*   ALGOL I/O ROUTINES. FOR REASONS OF EFFICIENCY CERTAIN LOCAL
*   CONVENTIONS ARE OBEYED IN THE COMMUNICATION BETWEEN THESE MODULES.
*
*   REGISTER SAVING AND RESTORING IS ONLY DONE WHEN REQUIRED AND THEN
*   GENERALLY IN A NON-STANDARD FASHION.
*
*   USE OF GENERAL REGISTERS WHEN COMMUNICATING WITH THE OBJECT MODULE.
*
*   REG. 8 (ADR) IS SOMETIMES USED  AS RETURN REGISTER AND PARAMETER
*   POINTER.
*   REG. 10 (CDSA) POINTS AT THE CURRENT ACTIVE DATA STORAGE AREA.
*   REG. 11(PBT) POINTS AT THE PROGRAM BLOCK TABLE IN THE OBJECT MODULE
*   REG. 12(LAT) POINTS AT THE LABEL ADDRESS TABLE IN THE OBJECT MODULE
*   REG. 13(FSA) SERVES BOTH AS THE STANDARD SAVE AREA REGISTER AND
*   AS BASE REGISTER FOR THE CONTROL SECTION IHIFSARA.
*   REG. 14(STH) IS USED TO TRANSMIT INTEGER VALUES TO OR FROM THE
*   CONVERT ROUTINES.
*   REG. 15(BRR) IS NORMALLY USED AS RETURN REGISTER AND PARAMETER
*   POINTER.
*   F.P. REG. 0 IS USED TO TRANSMIT REAL VALUES TO OR FROM THE CONVERT
*   ROUTINES.
*
*   USE OF GENERAL REGISTERS WHEN COMMUNICATING WITH THE I/O ROUTINES..
*
*   REG. 5(DSN) POINTS AT THE RELEVANT ENTRY IN THE DATA SET TABLE.
*   REG. 6(DSNR) CONTAINS THE DATA SET NUMBER.
*   REG. 12(FSAA) CONTAINS THE BASE ADDRESS OF IHIFSARA.
*   REGISTERS 13, 14 AND 15 ARE USED AS STANDARD SAVE, RETURN AND ENTRY
*   REGISTERS.
*
*   PARAMETER VALUES AND OTHER INFORMATION ARE OFTEN TRANSMITTED
*   IMPLICITLY VIA THE COMMONLY ACCESSIBLE WORKING STORAGE IN THE
*   LOWER PART OF IHIFSARA AND (FOR I/O ROUTINES) VIA THE DATA SET
*   TABLE IN THE OBJECT MODULE.
*
*   THE MODULE WORKS FOR EITHER SINGLE OR DOUBLE FLOATING POINT
*   PRECISION. IT SENSES THE PRECISION FOR WHICH THE OBJECT MODULE WAS
*   COMPILED AND INITIALIZES ITSELF ACCORDINGLY. THE AREAS AFFECTED
*   ARE THE LIST OF FLOATING POINT INSTRUCTIONS AT FPINST AND THE
*   BLOCK OF INSTRUCTIONS STARTING AT CNVINST IN THE CONVERT ROUTINES.
*
*   THE OPERATION OF THIS MODULE DEPENDS UPON AN INTERNAL
*   REPRESENTATION OF THE EXTERNAL CHARACTER SET WHICH IS EQUIVALENT
*   TO THE ONE USED AT ASSEMBLY TIME.
*   THE MODULE ALSO DEPENDS UPON DECIMAL NUMBERS TO BE CODED SO THAT
*   THE LOW ORDER FOUR BITS, WHEN CONSIDERED AS A BINARY INTEGER,
*   IDENTIFY THE VALUE OF THE DIGIT. THE MVI INSTRUCTION AT ALGTRMZ
*   IS USED FOR INSERTING THE PROPER ZONE BITS FOR UNPACKED DECIMAL
*   NUMBERS.
         EJECT
IHIFSARA START 0
* RELEASE 19 CHANGES
* 352400-352600                                                  A22570
* 128000,132200,138000                                           A28225
*                                                                A28226
*C138512,A138516,A143300                                         A39600
         SPACE 3
*  USE OF GENERAL REGISTERS
         SPACE 3
*              COMMON WORK REGISTERS
R0       EQU   0
GR0      EQU   0
R1       EQU   1
GR1      EQU   1
GP1      EQU   1
R2       EQU   2
GR2      EQU   2
GP2      EQU   2
R3       EQU   3
GR3      EQU   3
GP3      EQU   3
R4       EQU   4
GR4      EQU   4
R5       EQU   5
GRA      EQU   2
GRB      EQU   3
GRC      EQU   4
GRD      EQU   5
GRE      EQU   6
GRF      EQU   7                        (ALSO IHIFSARB BASE REGISTER)
GRG      EQU   8
GRH      EQU   9
GRI      EQU   10
         SPACE
*              REGISTERS FOR COMMUNICATION WITH THE OBJECT MODULE
ADR      EQU   8                        ADDRESSING REGISTER
GDSA     EQU   9                        GLOBAL DSA
CDSA     EQU   10                       CURRENT DSA
PBT      EQU   11                       PROGRAM BLOCK TABLE
LAT      EQU   12                       LABEL ADDRESS TABLE
FSA      EQU   13                       IHIFSARA BASE REGISTER
STH      EQU   14                       TEMPORARY STORAGE
BRR      EQU   15                       BRANCH REGISTER
         SPACE
*              REGISTERS FOR COMMUNICATION WITH I/O SUBROUTINES
DSN      EQU   5                        DATA SET TABLE POINTER
DSNR     EQU   6                        DATA SET NUMBER
FSAA     EQU   12                       ALTERNATE FSA BASE REGISTER
RETURN   EQU   14
ENTRY    EQU   15
         SPACE
*              REGISTERS USED BY TRACE AND TERMINATION ROUTINES
RBUFP    EQU   4                        BYTE POINTER IN TRACE BUFFER
RSC      EQU   5                        SEMICOLON NUMBER
RBEG     EQU   6                        LOWER TRACE LIMIT
REND     EQU   7                        UPPER TRACE LIMIT
RBUF     EQU   8                        TRACE BUFFER ADDRESS
RBUFA    EQU   9                        ALTERNATE TRACE BUFFER ADDR.
RBUFL    EQU   10                       LENGTH OF TRACE BUFFER
RBUFC    EQU   11                       NUMBER OF TRACE RECORDS
         SPACE
*              REGISTER USED BY SPDECL ROUTINE
SPDABASE EQU   5
         SPACE
*              FLOATING POINT REGISTER
         SPACE
FPR0     EQU   0
         SPACE
*  BIT PATTERNS
         SPACE
BETABM   EQU   X'0C'                    MASK FOR BETA BLOCK FLAG IN PBT
CODEPRM  EQU   X'10'                    MASK FOR CODE PROCEDURE IN PBT
PIMASK   EQU   X'04'                    MASK FOR PI-PROCEDURE IN PBT
RASLOADM EQU   X'FE'                    LOAD PROCEDURE ENTRY IN RAS
RASPARMM EQU   X'00'                    CAP OR CSWE ENTRY IN RAS
SHORTBIT EQU   X'10'                    F.P. OPCODE MODIFIER
DS0      EQU   X'80'                    ***
DS15     EQU   X'01'                                               0219
DS3      EQU   X'10'                      * FLAGS IN
DS236    EQU   X'32'                      *  DATA SET TABLE
DS11     EQU   X'10'                    ***
         SPACE
*  SWITCHES IN OPTSW
         SPACE
DPSW     EQU   X'80'                    DUMP  OPTION SWITCH
TRSW     EQU   X'40'                    TRACE OPTION SWITCH
SHSW     EQU   X'20'                    SHORT PRECISION OPTION SWITCH
TERMSW   EQU   X'10'                    TERMINATION ROUTINE ENTERED
ERROR    EQU   X'08'                    ERROR ROUTINE ENTERED
UT1ERR   EQU   X'04'                    ERROR ON SYSUT1
PRNTERR  EQU   X'02'                    ERROR ON SYSPRINT
UCTRSW   EQU   X'41'                    UNCONDITIONAL TRACE OPTION
PPTRSW   EQU   X'01'                    TRACE PRECOMP. PROCEDURES
         SPACE
*  ESD SYMBOLS
         SPACE
         ENTRY IHIFSAIN
         SPACE
         EXTRN IHIDSTAB
         EXTRN IHIENTIF
         EXTRN IHIIOROP,IHIIORCL,IHIIORNX,IHIIORCI,IHIIOREV        0226
         EXTRN IHIIOROQ,IHIIOREN,IHIIORGP,IHIIORCP,IHIIORER        0226
         EJECT
         COPY  FSAREA
         EJECT
         COPY  FSACONV
         SPACE
         ORG   FSAREA+ADSTAB
         DC    A(IHIDSTAB)
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        INSTRUCTIONS INSERTED INTO THE BRANCH LIST AT BRLIST         *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 3
         ORG   BRLIST
         USING IHIFSARA,FSA
         SPACE
          B    CAP1A                    CAP1
         B     CAP2A                    CAP2
         B     PROLP                    PROLOGP
         B     PROL                     PROLOG
         B     RETPROGA                 RETPROG
         B     EPILP                    EPILOGP
         B     EPILB                    EPILOGB
         B     EPIL3                    EPILPR3
         B     CSWE1A                   CSWE1
         B     CSWE2A                   CSWE2
         B     LOADPPA                  LOADPP
*                                  TRACE
         MVC   SCRCS(2,FSA),0(BRR)      INSERT SEMICOLON NUMBER
         B     2(BRR)                   MODIFIED TO NOP IF TRACE
         B     TRACEA
*
         B     TERMN                    TERMNTE
         BCR   0,BRR                    BCR
         B     GETMAIN                  GETMSTO
         B     VALUCAL                  VALUCALL
         DC    A(ADRLST)                                           0226
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        E X I T S  F O R  E X E C U T I O N  E R R O R S             *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 3
*        THIS ROUTINE CONTAINS ENTRY POINTS FOR ALL TYPES OF EXECUTION
*  ERRORS. IT STORES THE ERROR NUMBER AND LINKS TO THE ERROR ROUTINE
*  IHIFSAER.
*        THE NUMBER OF EACH ERROR IS DETERMINED BY ITS POSITION IN
*  THE BRANCH LIST.
         SPACE
*  CALLING SEQUENCE
*        BC    ERRORCONDITION,FSAERR+4*ERRORNUMBER(FSA)
         SPACE
         ORG   FSAERR+FSAREA
IHIFSAER EQU   *
         BAL   GR1,FSAERRL               0
         BAL   GR1,FSAERRL               1
         BAL   GR1,FSAERRL               2
         BAL   GR1,FSAERRL               3
         BAL   GR1,FSAERRL               4
         BAL   GR1,FSAERRL               5
         BAL   GR1,FSAERRL               6
         BAL   GR1,FSAERRL               7
         BAL   GR1,FSAERRL               8
         BAL   GR1,FSAERRL               9
         BAL   GR1,FSAERRL              10
         BAL   GR1,FSAERRL              11
         BAL   GR1,FSAERRL              12
         BAL   GR1,FSAERRL              13
         BAL   GR1,FSAERRL              14
         BAL   GR1,FSAERRL              15
         BAL   GR1,FSAERRL              16
         BAL   GR1,FSAERRL              17
NOMAIN   EQU   *-FSAREA
         BAL   GR1,FSAERRL              18
         BAL   GR1,FSAERRL              19
ERROR20  EQU   *
OERR20   EQU   *-FSAREA
PARERR   EQU   *-FSAREA
         BAL   GR1,FSAERRL              20
ERROR21  EQU   *
         BAL   GR1,FSAERRL              21
         BAL   GR1,FSAERRL              22
         BAL   GR1,FSAERRL              23
         BAL   GR1,FSAERRL              24
         BAL   GR1,FSAERRL              25
         BAL   GR1,FSAERRL              26
ERROR27  EQU   *
         BAL   GR1,FSAERRL              27
ERROR28  EQU   *
         BAL   GR1,FSAERRL              28
ERROR29  EQU   *
         BAL   GR1,FSAERRL              29
ERROR30  EQU   *
         BAL   GR1,FSAERRL              30
ERROR31  EQU   *
         BAL   GR1,FSAERRL              31
ERROR32  EQU   *
         BAL   GR1,FSAERRL              32
ERROR33  EQU   *
         BAL   GR1,FSAERRL              33
ERROR34  EQU   *
SWDMERR  EQU   *-FSAREA
         BAL   GR1,FSAERRL              34
ERROR35  EQU   *
         BAL   GR1,FSAERRL              35
ERROR36  EQU   *
RASOVERF EQU   *-FSAREA
         BAL   GR1,FSAERRL              36
         BAL   GR1,FSAERRL              37
         BAL   GR1,FSAERRL              38
         BAL   GR1,FSAERRL              39
         BAL   GR1,FSAERRL              40
DDERROR  EQU   *-FSAREA
         BAL   GR1,FSAERRL              41
INVOPT   EQU   *-FSAREA
         BAL   GR1,FSAERRL              42
         BAL   GR1,FSAERRL              43
         SPACE
FSAERRL  EQU   *                   LINK TO ERROR ROUTINE IHIFSAERR
          N     GR1,=X'00FFFFFF'
         S     GR1,=A(IHIFSAER+4)       (ERRORNUMBER*4) IN GR1
         STC   GR1,FSAERCOD(FSA)
         TM    OPTSW(FSA),ERROR         TO PREVENT ENTERING
         BO    TERMAA                    ERROR ROUTINE
         OI    OPTSW(FSA),ERROR           MORE THAN ONCE
 LINK EP=IHIERROR,PARAM=(FRDSA,SPDAP,IHIIOROP,IHIIORCP,IHIIORNX)   0219
         SPACE
         USING IHIFSARB,GRF
TERMA    EQU   *                   ABNORMAL TERMINATION
         L     GRF,=A(IHIFSARB)
         TM    OPTSW(FSA),TERMSW
         BO    ALGTRMAA                 IF ERROR IN TERM. ROUTINE
         B     ALGTRMA
         SPACE
TERMAA   EQU   *                   VERY ABNORMAL TERMINATION
         L     GRF,=A(IHIFSARB)
         B     ALGTRMAA
         SPACE
TERMN    EQU   *                   NORMAL TERMINATION
         L     GRF,=A(IHIFSARB)
         B     ALGTRMN
         DROP  GRF
         ORG
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*    INSTRUCTIONS FOR SHORT OR LONG FLOATING POINT PRECISION          *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 3
*  THE FOLLOWING INSTRUCTIONS ARE MODIFIED BY THE INITIALIZATION
*  ROUTINEFOR SHORT OR LONG PRECISION AS REQUIRED.
         SPACE
FPINST   EQU   *
*                                       USED BY VALUCALL
VALLD    LE    0,0(R1)
VALST    STE   0,0(R2)
          SPACE
*                                       USED BY SPDECL
LINSTR   LE    0,0(GR2)
STINSTR  STE   0,FCTVALST(FSA)
LTRINSTR LTER  0,0
         NOPR  0
FPINSTE  EQU   *
LPRINSTR LPER  0,0
         SPACE
FPINSTAD DC    A(FPINST,4,FPINSTE)
         SPACE
*  ONE OF THE FOLLOWING SETS OF INSTRUCTIONS IS INSERTED INTO THE
*  CONVERT ROUTINE BY THE INITIALIZATION ROUTINE IN ORDER TO SET UP
*  FOR LONG OR SHORT PRECISION AS REQUIRED.
         SPACE
CNVINSTE EQU   *                   SHORT PRECISION
         STD   FPR0,CNVBUF2
         MVC   CNVBUF2+1(3),CNVCNST1+1
         AD    FPR0,CNVBUF2
         BR    ADR
         STE   FPR0,CNVBUF3
         LD    FPR0,CNVBUF3
         B     ENTIER1
         STE   FPR0,CNVBUF3
         LD    FPR0,CNVBUF3
         SPACE
CNVINSTD EQU   *                   LONG PRECISION
         BR    ADR
         DC    14X'FF'
         B     ENTIER1
         DC    8X'FF'
         AD    FPR0,CNVCNST2
         B     ENTIER1
CNVINSTL EQU   *-CNVINSTD
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              G E T M A I N   R O U T I N E                          *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 3
*        THIS ROUTINE ISSUES A CONDITIONAL GETMAIN IN RESPONSE TO A
*  REQUEST BY THE OBJECT MODULE FOR STORAGE FOR AN ARRAY. IF STORAGE
*  IS NOT AVAILABLE, AN ERROR EXIT IS TAKEN.
         SPACE
*  CALLING SEQUENCE                (ENTRY VIA BRLIST)
*        BAL   ADR,GETMSTO(FSA)         LENGTH OF AREA IN GR0
*        ---                            RETURN WITH ADDRESS IN GR1
         SPACE
GETMAIN  LR    GR2,GR0                  LENGTH VALUE
         GETMAIN EC,LV=(GR2),A=GETMAINA
         LTR   ENTRY,ENTRY
         BNZ   NOMAIN(FSA)
         L     GR1,GETMAINA
          BR    ADR                     RETURN TO CALLING PROG
GETMAINA DC    A(0)                     ADDRESS OF THE AREA
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        C A L L  A C T U A L  P A R A M E T E R  R O U T I N E       *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 3
CAP1A    EQU   *
CAPA     EQU   *
         SPACE
*        THIS ROUTINE IS AN INTERMEDIATE LINK BETWEEN A PROCEDURE
*  AND THE THUNK FOR AN ACTUAL PARAMETER TO THE PROCEDURE. IT SEARCHES
*  THE DSA CHAIN FOR THE DSA OF THE PROCEDURE DECLARATION. THEN IT
*  LOADS THE THUNK ADDRESS FROM THIS DSA, LOADS CDSA WITH THE DSA
*  ADRESS OF THE ENCLOSING BLOCK AND BRANCHES TO THE THUNK.
         SPACE
*  CALLING SEQUENCE                (ENTRY VIA BRLIST)
*        BAL    BRR,CAP1(FSA)
*        DC    H'PBN1'                  PBN OF PROCEDURE
*        DS    H
*        L     ADR,DISPL(CDSA)          LOAD ADDRESS OF THUNK
*        ---                            RETURN FROM THUNK VIA CAP2
*                                       WITH PARAM ADDRESS IN ADR
         SPACE
         L     STH,RASPT(FSA)           RAS POINTER FROM TOP
         ST    BRR,12(STH)             SAVE RETURN ADDRESS IN RAS  0050
         LH    GP1,0(BRR)              PBN OF PROCEDURE            0050
         LA    GP1,0(GP1,PBT)          PROCEDURE ENTRY IN PBT      0050
CAPI1    LA    STH,8(STH)               RESERVE ONE ENTRY IN RAS
         C     STH,RASPB(FSA)           CHECK FOR STACK
         BNL   RASOVERF(FSA)            *OVERFLOW
         ST    CDSA,0(0,STH)            SAVE DSA-POINTER IN RAS
         AH    PBT,8(CDSA)             ADDR OF CURRENT PBT ENTRY   0050
         L     GP2,0(CDSA)              LAST GENERATION DSA-POINTER IS
         ST    GP2,0(PBT)              *STORED IN PBT ENTRY        0050
         CR    GP1,PBT                 RIGHT PROCEDURE REACHED     0050
         EX    0,4(0,BRR)               LOAD ADDRESS OF THUNK
         L     CDSA,4(0,CDSA)           LOAD DYNAMICALLY ENCLOSING DSA
         LM    PBT,LAT,16(CDSA)         PBT AND LAT CAN BE DIFFERENT
         ST    STH,RASPT(FSA)           SAVE RAS TOP POINTER
         BCR   8,ADR                   TO THUNK OF ACTUAL PARAM    0050
*                                           IF RIGHT BLOCK REACHED 0050
         SR    GP2,GP2                 ZERO TO RETURN ENTRY IN     0050
         ST    GP2,12(STH)             *RAS INSTEAD OF BRR         0050
         B     CAPI1                                               0050
         SPACE 3
CAP2A    EQU   *
CAPB     EQU   *
         SPACE
*        THIS ROUTINE HANDLES THE TRANSFER FROM THE THUNK BACK TO THE
*  PROCEDURE. IT RELOADS CDSA WITH THE ADDRESS OF THE DSA THAT WAS
*  ACTIVE WHEN CAP1 WAS ENTERED.
         SPACE
*  CALLING SEQUENCE                (ENTRY VIA BRLIST)
         SPACE
*        B     CAP2(FSA)
         SPACE
         L     STH,RASPT(FSA)           RAS POINTER FROM TOP
CAPI3    L     CDSA,0(0,STH)            DSA-POINTER FROM RAS
         LM    PBT,LAT,16(CDSA)         PBT AND LAT CAN BE DIFFERENT
         L     BRR,4(STH)               RETURN ADDRESS FROM RAS
         SH    STH,EIGHT(FSA)           RELEASE ONE ENTRY IN RAS
         LH    GP1,8(CDSA)              PROGRAM BLOCK NUMBER TO REG
         ST    CDSA,0(GP1,PBT)          CURRENT DSA POINTER TO PBT
         LTR   BRR,BRR                  CALLING BLOCK REACHED
         BZ    CAPI3                    NO CONTINUE
CAPI4    ST    STH,RASPT(FSA)           SAVE RAS TOP POINTER
         B     8(0,BRR)                 RETURN TO CALLING SEQUENCE
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              P R O L O G U E   P R O G R A M                        *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 3
*        THIS ROUTINE IS EXECUTED WHENEVER A BLOCK OR PROCEDURE IS TO
*  BE ENTERED. IT CREATES AND INITIALIZES A NEW DSA. FOR A PROCEDURE
*  WITH PARAMETERS IT MOVES THE PARAMETER LIST TO THE DSA AND CHECKS IT
*  AGAINST THE FORMAL PARAMETER LIST IN THE PROCEDURE DECLARATION.
*  THEN IT ENTERS THE BLOCK OR PROCEDURE.
*        THE ENTRY POINT PROLOGP IS USED ONLY WHEN THE PROCEDURE IS
*  CALLED VIA AN ACTUAL PARAMETER TO ANOTHER PROCEDURE.
         SPACE
*  CALLING SEQUENCE                (ENTRY VIA BRLIST)
*        BAL   BRR,PROLOG(FSA)
*        MVI   PROLPBN(FSA),PBN         PBN OF BLOCK TO BE ENTERED
*                                  PARAMETER LIST FOR PROCEDURE
*        DC    A(THUNK1)                ADDR. OF THUNK FOR 1ST PARAM
*        DC    H'CH'                    CHARACTERISTICS OF 1ST PARAM
*        DC    H'N'                     NUMBER OF PARAMETERS
*         .
*         .
*         .
*        DC    A(THUNKN)                ADDR OF THUNK FOR LAST PARAM
*        DC    H'CH'
*        DC    H'0'
         SPACE
PROLP    EQU   *
         MVI   PROLPBN-1(FSA),X'00'                              A28226
*  SET OFF SW SET BY GENERATE PROG TO DETECT ERR, SEE BELOW.     A28226
         LM    PBT,LAT,PROLREG(FSA)     UPDATE PBT AND LAT
         SPACE
PROL     EQU   *
         SPACE
         LH    R3,PROLPBN-1(FSA)        CALLED PROGRAM BLOCK NUMBER
         SLL   R3,3                     CALCULATE PBT-DISPLACEMENT
         LTR   R2,R3                    STANDARD PROCEDURE CALLED
         BZ    SPDECL(0,FSA)            BRANCH IF YES
         BM    OERR21(FSA)             ERROR, ACTUAL PROCEDURE   A28226
*  PARAMETER IS PARAMETERLESS WHILE FORMAL PROCEDURE IS CALLED   A28226
*  WITH PARAMETERS. PROLPBN-1 WAS SET TO X'FF' BY GENERATED PROG A28226
*  BEFORE CAP1 WAS CALLED.                                       A28226
         AR    R3,PBT                   ADDRESS OF PBT-ENTRY
         TM    6(R3),BETABM             PROCEDURE CALLED
         BZ    PROLOG1                  NO
         C     ADR,ASTLOC(0,FSA)        COMP.CONT.OF ADR.WITH ADDR.OF
*                                       *FUNCTIONVALUESTORAGE
         BE    OERR21(0,FSA)            BRANCH IF EQUAL
         TM    6(R3),CODEPRM            CODE PROCDURE CALLED
         BO    PROLOG2                  YES
PROLOG1  LH    R0,4(R3)                 LENGTH OF DSA TO REG 0
         LR    R4,BRR                   SAVE BRR DURING GETMAIN
         GETMAIN R,LV=(0)               GETMAIN FOR DSA
         LR    BRR,R4
         L     R0,0(R2,PBT)             LOAD POINTER OF LAST GENERATION
         ST    R0,0(0,R1)               AND STORE IT IN DSA
         ST    CDSA,4(0,R1)             STORE POINTER OF EMBRACING PB.
         STH   R2,8(0,R1)               STORE PBT DISPLACEMENT
         MVI   10(R1),X'00'             ZEROS TO VALUE ARRAY AND
         MVC   11(5,R1),10(R1)          *ARRAY POINTERS
         ST    R1,0(R2,PBT)             STORE CURR.DSA POINTER IN PBT
         LR    CDSA,R1                  SET CDSA POINTER
         STM   PBT,LAT,16(CDSA)
         L     STH,RASPT(FSA)           RAS-POINTER TOP
         LA    STH,8(STH)               RESERVE ONE ENTRY
         C     STH,RASPB(FSA)           COMPARE WITH RAS-POINTER BOTTOM
         BNL   RASOVERF(FSA)            STACK OVERFLOW
         ST    CDSA,0(0,STH)           *
         MVI   0(STH),X'FF'            *
         ST    STH,RASPT(FSA)           SAVE POINTER
         TM    6(R3),BETABM             PROCEDURE CALLED
         BCR   8,BRR                    NO,USUAL BLOCK RETURN,EXIT 1
         SPACE 2
A4       CLI   7(R3),X'00'              ANY FORMAL PARAMETERS
         BE    F4                       BRANCH IF ZERO
         CLC   7(1,R3),7(BRR)           COMP.NR.OF FORM AND ACT.PARAM.
         BNE   OERR21(0,FSA)            BRANCH IF NOT EQUAL
         SR    R2,R2
         IC    R2,7(R3)                 FETCH NUMBER OF PARAMETERS
         LR    R4,R2                    SAVE NUMBER IN REG 4
         SLL   R2,3                     CALCULATE LENGTH OF PARAMETER
         BCTR  R2,0                     *ENTRY-1
         LA    R1,24(CDSA)             START OF PARAM. IF PROC.  A28225
         TM    6(R3),PIMASK             FUNCTION PROCEDURE CALLED
         BZ    PROLOG3                 YES                       A28225
         EX    R2,PIMOVE
         B     LOOP
PIMOVE   MVC   24(1,CDSA),0(BRR)        MOVE PROCEDURE PARAMETERS
PHIMOVE  MVC   32(1,CDSA),0(BRR)        MOVE FUNCTION PARAMETERS
PROLOG3  EX    R2,PHIMOVE
         LA    R1,8(R1)                START OF PARAM. IF TYPE   A28225
LOOP     TM    0(ADR),X'01'             IS FORM.PAR.'STRING'
         BO    STRTST                   IF YES GO TO STRINGTEST
         CLI   1(ADR),X'D0'             IS FORM.PAR.'PROC.' WITHOUT TYP
         BE    PROTST                   IF YES GO TO PROCEDURETEST
         CLI   1(ADR),X'1C'             IS FORM.PAR.'SWITCH'
         BE    SWTTST                   IF YES GO TO SWITCHTEST
         TM    1(ADR),X'08'             IS FORM.PAR. 'LABEL'
         BO    LBLTST                   IF YES GO TO LABELTEST
         TM    1(ADR),X'04'             IS FORM.PAR. 'ARRAY'
         BO    ARRTST                   IF YES GO TO ARRAYTEST
         TM    1(ADR),X'C0'             IS FORM.PAR.A TYPPROCEDURE
         BO    TPRTST                   IF YES GO TO TYPPROCEDURETEST
         TM    5(BRR),X'04'             IS ACT.PAR. 'ARRAY'        5605
         BO    OERR20(0,FSA)            IF YES ERR.20              5605
TYPTST   TM    1(ADR),X'03'             TEST TYP
         BM    ARITST                   IF ARITHM.TYP GO TO ARITH.TEST
         TM    5(BRR),X'03'             TEST IF ACT.PAR.IS BOOL
         BO    ASSFLAG                 YES, SPECIAL ASGNMENT TST A28225
         B     OERR20(0,FSA)            IF NOT GO TO ERR.20
STRTST   TM    4(BRR),X'01'             TEST IF ACT.PAR.IS 'STRING'
         BO    EXIT                     IF YES TEST NEXT PAR.
         B     OERR20(0,FSA)            IF NOT BRANCH TO OBJ.T.ERR.20
PROTST   TM    5(BRR),X'C0'             TEST IF ACT.PAR.IS 'PROCEDURE'
         BZ    OERR20(0,FSA)            IF NOT ERR.20
         B     EXIT                     IF YES TEST NEXT PAR.
SWTTST   TM    5(BRR),X'0C'             TEST IF ACT.PAR.IS 'SWITCH'
         B     STRTST+4  IF YES TEST NEXT PAR.IF NOT GO TO ERR.20
LBLTST   TM    5(BRR),X'08'             TEST IF ACT.PAR.IS 'LABEL'
         BZ    OERR20(0,FSA)            IF NOT ERR.20
         TM    5(BRR),X'04'             TEST IF ACT.PAR.IS 'SWITCH'
         BO    OERR20(0,FSA)            IF YES ERR.20
         B     EXIT                     TEST NEXT PAR.
ARRTST   TM    5(BRR),X'04'             TEST IF ACT.PAR.IS 'ARRAY'
         BZ    OERR20(0,FSA)            IF NOT ERR.20
         B     TYPTST                   IF YES GO TO TYPTEST
TPRTST   TM    5(BRR),X'C0'             TEST IF ACT.PAR.IS 'PROCEDURE'
         BZ    OERR20(0,FSA)            IF NOT ERR.20
         B     TYPTST                   IF YES GO TO TYPTEST
ARITST   TM    5(BRR),X'03'             ACTUAL PAR. ARITHMETIC
         BC    9,OERR20(FSA)            NO
         TM    1(ADR),X'10'             FORMAL PARAMETER CALLED BY NAME
         BZ    PARAMPR                  NO
         TM    1(ADR),X'02'             FORMAL PARAMETER REAL TYPE
         BZ    INTTST                   NO INTEGER TYPE
         TM    5(BRR),X'02'             ACTUAL PARAMETER REAL
         BZ    OERR20(FSA)              NO ERROR
         B     ASSFLAG2                SPECIAL ASGNMENT TST      A28225
INTTST   TM    5(BRR),X'01'        ACTUAL PARAMETER INTEGER
         BZ    OERR20(FSA)              NO ERROR
         SPACE
*  SPECIAL TST IF ACT PARAMETER IS FORMAL BY NAME AND THEN MOVE  A28225
*  THE ASGNMENT FLAG FR ACT PARAMETER ENT IN DSA TO THE NEW      A28225
*  PARAMETER ENT IN DSA OF BLK TO BE ENTERED.                    A28225
         SPACE
*  NOTE: THIS CODE IS EXTREMELY DEPENDENT ON CODE GENERATED FOR  A28225
*        FORMAL PARAMETERS CALLED BY NAME.                       A28225
         SPACE
ASSFLAG  TM    1(ADR),X'10'            FORMAL PARM. BY NAME      A28225
         BZ    PARAMPR                 NO                        A28225
ASSFLAG2 TM    5(BRR),X'10'            CHK IF ACT IS TYPE        A28225
         BZ    PARAMPR                      CALLED BY NAME       A28225
         TM    5(BRR),X'20'            IF NOT GO TO SPECIAL      A28225
         BO    PARAMPR                      PARAMETERLESS PR TST A28225
         L     R2,4(CDSA)              DSA OF CALLING SEQUENSE   A28225
         L     R2,16(R2)               PBT ADDR OF CALLING SEQ.  A28225
         L     R3,0(R1)                ADDR OF THUNK OF ACT PARM A28225
*                                           WHICH IS FORMAL      A28225
         MVC   ORI+5(1),11(R3)         MOVE DISPL OF PARAM FOUND A28225
*                                       IN THUNK CODE TO OR INST A28225
         IC    R3,4(R3)            DISPLACEMENT OF               A39600
         N     R3,MASKFF           PROCEDURE IN PBT              A39600
         L     R3,0(R3,R2)             ADDR OF DSA OF PROCEDURE  A28225
         LA    R3,4(R3)                ADDR CHARACTERISTIC PART  A28225
*                                           OF PARAMETER ENTRY   A28225
ORI      OC    4(1,R1),0(R3)           MOVE ASGNMENT BIT FROM    A28225
*                                       CALLING PARAMETER ENT IN A28225
*                                       DSA TO NEW DSA ENT       A28225
PARAMPR  EQU   *                   TEST IF ACTUAL PARAMETER IS
*                                  PARAMETERLESS PROCEDURE
         TM    5(BRR),X'C0'             ACTUAL PARAMETER PROCEDURE
         BZ    EXIT                     NO
         TM    5(BRR),X'30'                                        0050
         BM    EXIT                                                0050
         TM    1(ADR),X'D0'             FORMAL PROC. CALLED BY NAME
         BO    EXIT                     YES EXIT
         TM    4(BRR),X'C0'        PROCEDURE CALLED
         BO    OERR20(FSA)                                         0050
EXIT     LA    BRR,8(0,BRR)             GET NEXT ACT.PAR.ADDR.
         LA    ADR,2(0,ADR)             GET NEXT FORM.PAR.ADDR.
         LA    R1,8(R1)                NEXT PARAMETER IN DSA     A28225
         BCT   R4,LOOP                  IF A NEXT PAR.OCCURS GO TO LOOP
F4       ST    BRR,4(0,STH)             STORE RETURN ADDRESS IN RAS
         BR    ADR                      EXIT 2
         SPACE 2
PROLOG2  EQU   *                   PRECOMPILED PROCEDURE CALLED
         L     R1,0(R3)                 ADDRESS OF PRECOMP PR CONST
         LM    PBT,LAT,0(R1)            LOAD NEW PBT AND LAT ADDRESSES
         CLC   7(1,R3),15(PBT)          PARAMETER DEFINITION IN CODE
*                                       *PROCEDURE SAME AS IN LOADED
*                                       *PRECOMPILED PROCEDURE
         BNE   OERR21(FSA)              NO,ERROR 21
         L     ADR,8(R1)                PROCEDURE DECLAR.ENTRY POINT
         MVI   PROLPBN(FSA),1           PBN OF PROCEDURE IS 1
         B     PROLOG(FSA)              CALL PRECOMPILED PROCEDURE
MASKFF   DC    X'000000FF'         MASK TO CLEAR 3 BYTES OF REG  A39600
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              V A L U E  C A L L  R O U T I N E                      *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 3
*               SUBROUTINE FOR HANDLING FORMAL PARAMETERS
*              CALLED BY VALUE
* USED FOR FORMAL PARAMETERS OF TYPE REAL,INTEGER OR BOOLEAN,INCLUDING
* ARRAYS.
         SPACE
*  CALLING SEQUENCE                (ENTRY VIA BRLIST)
*        CALL ACTUAL PA{AMETER
*        BAL   BRR,VALUCALL(FSA)
*        DC    H'DISPL'                 FORMAL PARAMETER DISPLACEMENT
*        DC    XL2'  '                  CHARACTERISTIC OF PARAMETER
*        ---                            RETURN FROM VALUCALL
*  DISPL(CDSA) CONTAINS IF PARAMETER IS AN ARRAY ADDRESS OF SMF
*  OTHERWISE VALUE OF THE ACTUAL PARAMETER,CONVERTED IF NECESSARY
*
         SPACE
VALUCAL  EQU   *
         MVI   CONVFL,X'00'        ZERO TO CONVERSION FLAG
         ST    BRR,BRRSAVE         SAVE BRR,ADR
         ST    ADR,ADRSAVE
         LH    R1,0(BRR)
VALUC10  LA    STH,0(R1,CDSA)
*
*              INSERT COMPONENT SIZE OF ORIGINAL
*
         MVI   CSIZORIG+1,X'01'    ONE TO COMP SIZE INCASE BOOLEAN
         TM    5(STH),X'03'        TEST ACTUAL PARAMETER TYPE
         BO    VALUC12             BR IF BOOLEAN
         MVI   CSIZORIG+1,X'04'    FOUR TO COMPONENT SIZE
         TM    5(STH),X'01'        TEST IF ACTUAL PAR 'INTEGER'
         BO     VALUC00            BR IF INTEGER
         TM     OPTSW(FSA),X'20'   TEST PRECISION
          BO    VALUC00            BR IF SHORT PRECISION
          MVI  CSIZORIG+1,X'08'    EIGHT TO COMPONENT SIZE
*
VALUC00  EQU   *
         TM    5(STH),X'02'        TEST IF ACTUAL PARAMETER 'REAL'
         BO    VALUC11             BR IF YES
*        ACTUAL PARAMETER INTEGER
*
         TM    3(BRR),X'01'        TEST IF FORMAL PAR 'INTEGER'
         BO    VALUC12                  BRANCH IF YES
*
         MVI   CONVFL,X'01'        1 (= INTEGER TO REAL) TO FLAG
         B     VALUC12
*
*        ACTUAL PARAMETER REAL
VALUC11  EQU   *
         TM    3(BRR),X'02'        TEST IF FORMAL PAR 'REAL'
         BO    VALUC12                  BRANCH IF YES
         MVI   CONVFL,X'03'        3 (=REAL TO INTEGER) TO FLG
*
VALUC12  EQU   *
         MVC   CSIZCOPY+1(1),CSIZORIG+1      COPY COMPONENT SIZE
         TM    3(BRR),X'04'
         BO    VALUC21             BR IF ARRAY
*
VALUC13  EQU   *
         MVC   0(8,STH),0(ADR)     MOVE CONT OF 'ADR' TO CDSA
*
         LR    R1,STH                   ADDRESS OF FORMAL PARAM ENTRY
         LR    R2,R1                    STORE BACK AFTER CONVERSION
         LA    R5,4(BRR)           RETURN ADDRESS
VALUC14  TM    CONVFL,X'03'             CONVERSION NECESSARY
         BCR   8,R5                     NO RETURN
         BO    VALUC15                  REALL-INTEGER
*  CALL INTEGER REAL CONVERSION ROUTINE
         L     STH,0(R1)
         BAL   ADR,CNVIRD(FSA)
         EX    0,VALST
         BR    R5                       RETURN
*CALL REAL-INTEGER CONVERSION ROUTINE
VALUC15  EX    0,VALLD
         BAL   ADR,CNVRDI(FSA)
         ST    STH,0(R2)
         BR    R5                       RETURN
*
*
*              HANDLE VALUE CALL OF ARRAY
*
VALUC21  EQU   *
         MVC   SIZEARR(4),16(ADR)         SIZE OF ORIGINAL ARRAY
         L     BRR,8(ADR)
         S     BRR,4(ADR)          DIFF (ADDRLOWCOMP - ADRZEROCOMP)
         ST    BRR,DIFFLZ
*
         MVI   SMFFL,X'00'          ZERO TO SMF-FLAG
*
         TM    OPTSW(FSA),X'20'    TEST PRECISION
         BO    VALUC31             BR IF SHORT PRECISION
         TM    CONVFL,X'03'        TEST CONV FLAG
         BZ    VALUC31             BR IF NO CONV NECESS
         MVC   SMFFL(1),CONVFL     CONV FLAG TO SMF-FLAG
*
         L     BRR,SIZEARR
         L     STH,DIFFLZ
         LH    R1,CSIZCOPY
         BO    VALUC25
*
*              INCREM 'SIZEOFARRAY', DIFF AND COMPONENT SIZE
*
         SLA   BRR,1
         SLA   STH,1
         SLA   R1,1
         B     VALUC26
*
*              DECREMENT 'SIZE OF ARRAY', DIFF AND COMPONENT SIZE
*
VALUC25  EQU   *
         SRA   BRR,1
         SRA   STH,1
         SRA   R1,1
VALUC26  EQU   *
         ST    BRR,SIZEARR
         ST    STH,DIFFLZ
         STH   R1,CSIZCOPY
*
*              EXECUTE SUBROUTINE WITH 'GETMAIN'
*
VALUC31  EQU   *
         SR    BRR,BRR
         IC    BRR,0(ADR)          NUMBER OF SUBSCRIPTS
         LA    BRR,5(BRR)
         SLA   BRR,2
         CLI   CSIZCOPY+1,X'08'         REAL ARRAY LONG
         BNE   VALUC32                  NO
         TM    0(ADR),X'01'             SMF LENGTH DOUBLE WORDS
         BO     VALUC32                 YES
         LA    BRR,4(BRR)               FOURCE ARRAY TO DOUBLE WORD
VALUC32  EQU   *
         STC   BRR,SIZESMF+1       INSERT SIZE OF SMF
         LH    0,SIZESMF
         A     0,SIZEARR           NUMBER OF BYTES REQUESTED
         BAL   ADR,GETMSTO(FSA)
*
*              COPY SMF
*
         L     ADR,ADRSAVE
VALUC33  MVC   0(1,R1),0(ADR)
*
*              INSERT FIRST FOUR WORDS INTO SMF-COPY
*
         MVC   2(2,R1),10(CDSA)         CHAIN DISPL FROM DSA
         L     BRR,BRRSAVE
         LH    R2,0(BRR)                DISPL OF OF FORMAL PARAM. ENTRY
         STH   R2,10(CDSA)              CHAIN DISPL
         ST    R1,0(R2,CDSA)            ADDRESS OF VALUE ARRAY
*                                       TO FORMAL PARAMETER ENTRY
         LR     BRR,R1
         AH     BRR,SIZESMF
         ST    BRR,8(R1)
         S     BRR,DIFFLZ
         ST    BRR,4(R1)
         A     BRR,DIFFLZ
         A     BRR,SIZEARR
         ST    BRR,12(R1)
*
*      COPY,   DOUBLE OR HALF P-VALUES INTO NEW SMF
*
         LA    BRR,16(R1)
         LA    R2,16(ADR)
*
VALUC35  L     STH,0(R2)
         TM    SMFFL,X'03'         TEST IF P-VALUES MUST CHANGE
         BZ    VALUC36
         SLL   STH,1
         BM    VALUC36             BR IF FLAG=1 (INCREM IS OK)
         SRL   STH,2               DECREMENT INSTEAD
VALUC36  ST    STH,0(BRR)
         LA    BRR,4(BRR)
         LA    R2,4(R2)
         C     BRR,8(R1)
         BL    VALUC35
*
*              COPY ARRAY
*
VALUC41  EQU   *
*
*              INITIALIZE COPYING
*
         L     R3,SIZEARR               SIZE OF ARRAY
         L     R2,8(R1)                 ADDRESS OF COPY ARRAY
         L     R1,8(ADR)                ADDRESS OF ORIGINAL ARRAY
         TM    CONVFL,X'03'             CONVERSION NESSESARRY
         BZ    VALUC61                  NO MOVE ARRAY
VALUC51  BAL   R5,VALUC14          CONVERT ONE ELEMENT ,STORE IT
         AH    R1,CSIZORIG              NEXT ELEMENT FROM ORIGINAL
         AH    R2,CSIZCOPY              NEXT ELEMENT FROM "OPY
         SH    R3,CSIZCOPY
         BP    VALUC51                  CONTINUE IF ELEMENTS LEFT
VALUC52  L     BRR,BRRSAVE
         B     4(BRR)              RETURN
VALUC61  LA    R4,255                   MAX IN ONE MOVE
         BCTR  R3,0                     SIZE-1
         CR    R3,R4
         BNH   VALUC62                  NOT MORE THAN 256 BYTES
         EX    R4,VALUC63               MOVE 256 BYTES
         SR    R3,R4                    REDUCE SIZE
         LA    R1,256(R1)
         LA    R2,256(R2)
         B     VALUC61+4                CONTINUE
VALUC62  EX    R3,VALUC63          MOVE LAST PART OF ARRAY
         B     VALUC52                  RETURN
VALUC63  MVC   0(0,R2),0(R1)            ORIGINAL ARRAY TO COPY
*              WORK AREA
*
BRRSAVE  DC    F'0'                STORAGE OF BRR
ADRSAVE  DC    F'0'                STORAGE AF 'ADR'
DIFFLZ   DC    F'0'                DIFF BETW LOW AND ZERO COMPONENTS
SIZEARR  DC    F'0'                     SIZE OF ARRAY
SIZESMF  DC    H'0'                SIZE OF SMF
CSIZORIG DC    H'0'                COMPON SIZE, ORIGINAL
CSIZCOPY DC    H'0'                COMPON SIZE, COPY
CONVFL   DC    X'00'               CONVERSION FLAG
SMFFL    DC    X'00'                ARRAY SIZE FLAG
*
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              R E T U R N   P R O G R A M                            *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 3
*        THIS ROUTINE IS ENTERED WHEN A BRANCH IS MADE OUT OF A BLOCK
*  OR PROCEDURE BY MEANS OF A 'GO TO' STATEMENT. IT SEARCHES RAS FOR AN
*  ENTRY POINTING TO THE DSA OF THE TARGET BLOCK. FOR EACH BLOACK THAT
*  IS BYPASSED, THE FREEDSA ROUTINE IS INVOKED TO RELEASE STORAGE FOR
*  DSA AND ARRAYS.
         SPACE
*  CALLING SEQUENCE                (ENTRY VIA BRLIST)
*        B     RETPROG(FSA)
         SPACE
RETPROGA EQU   *
         BALR  BRR,0                    SET RETURN REGISTER
         L     STH,RASPT(FSA)           FETCH RAS TOP POINTER
RETPR1   CLI   0(STH),RASPARMM          RAS PARAMETER ENTRY
         BNE   PBNENTRY                 NO
         SH    STH,EIGHT(0,FSA)    CLEAR PARAMETERENTRY
         B     RETPR1                   TEST NEXT ENTRY
PBNENTRY IC    R1,0(STH)                SAVE FLAG
         MVI   0(STH),X'00'             CLEAR FLAG
         L     CDSA,0(STH)             UPDATE DSA REG              1512
         C     GDSA,0(0,STH)       COMPARE DSA-ADDRESS
         STC   R1,0(STH)                RESTORE FLAG
         ST    STH,RASPT(FSA)           SAVE RAS POINTER
         BCR   8,ADR                    IF EQUAL EXIT TO ADDRESS IN ADR
         B     FREEDSA(FSA)             FREE DSA SUBROUTINE IN EPILOG
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              E P I L O G U E   P R O G R A M                        *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 3
*        THIS ROUTINE IS EXECUTED WHENEVER AN EXIT IS MADE FROM A
*  PROCEDURE (ENTRY POINT EPILOGP) OR BLOCK (ENTRY POINT EPILOGB) VIA
*  THE 'END' STATEMENT. IT CLEARS THE CORRESPONDING ENTRY FROM RAS AND
*  FREES THE STORAGE FOR DSA AND ARRAYS. IF THE EXIT WAS FROM A
*  PRECOMPILED PROCEDURE, THE PROCEDURE IS DELETED.
         SPACE
*  CALLING SEQUENCE                (ENTRY VIA BRLIST)
*        B     EPILOGP(FSA)
         SPACE
EPILP    EQU   *
         MVC   FCTVALST(8,FSA),24(CDSA)     FUNCTION BALUE TO FSA
         LA    ADR,FCTVALST(FSA)        FUNCTION VALUE ADDRESS TO ADR
         BAL   BRR,FREEDSA(FSA)         LEAVE BLOCK AND UPDATE REG.
         L     STH,RASPT(FSA)
         L     BRR,12(STH)              RETURN ADDRESS FROM RAS
         BR    BRR                      RETURN
         SPACE 3
*  CALLING SEQUENCE                (ENTRY VIA BRLIST)
*        B     EPILOGB(FSA)
         SPACE
EPILB    EQU   *
FREEDSA  EQU   EPILOGB             LEAVE A BLOCK,FREEMAIN UPDATE REG
FRDSA    EQU   *
         ST    BRR,BRRST(FSA)           SAVE RETURN ADDRESS
         L     STH,RASPT(FSA)           FETCH RAS-POINTER
         SH    STH,EIGHT(FSA)           REDUCE RETURN ADDRESS STACK
         ST    STH,RASPT(FSA)           SAVE RAS-POINTER
         CLI   8(STH),RASLOADM          LOAD PROCEDURE ENTRY
         BNE   VTEST                    NO
         L     R1,RASPB(FSA)            FETCH ADDRESS OF NAME OF
         LR    R0,R1                    *PROCEDURE TO BE DELETED
         LA    R1,8(R1)                 CLEAR PRECOMPILED PROCEDURE
         ST    R1,RASPB(FSA)            *NAME FROM RAS
         DELETE  EPLOC=(0)
         B     FRDSA+4                  CONTINUE
         SPACE 3
********       V A L U E   A R R A Y   H A N D L I N G
         SPACE 3
EPIL3    EQU   *
VTEST    SR    0,0                 CLEAR A WORKREGISTER
         CH    0,10(0,CDSA)        TEST VALUE ARRAY FIELD
         BE    ATEST               IF ZERO GO TO NEXT TEST
         LH    R2,10(0,CDSA)       LOAD LAST VALUE ARRAY DISPLACEMENT
         L     R1,0(R2,CDSA)       LOAD ADDRESS OF STOR.MAP.FCT.
         L     R0,16(0,R1)         LOAD LENGTH OF ARRAY
         LH    R2,2(0,R1)          LOAD BEFORE LAST VALUE ARRAY DISPL.
         STH   R2,10(0,CDSA)       STORE BEFORELAST VALUE ARRAY DISPL.
         SR    R2,R2               CLEAR A WORKREGISTER
         IC    R2,0(0,R1)       ***
         LA    R2,1(0,R2)         *CALCULATE LENGTH OF STORAGE
         SLL   R2,2(0)            *   MAPPING FUNCTION
         LA    R2,16(0,R2)      ***
         AR    R0,R2               ADD ST.MAP.FUCT.LENGTH AND ARR.LGTH.
         FREEMAIN R,LV=(0),A=(1)   FREEMAIN FOR VAL.ARR.INCL.ST.MAP.FCT
         B     VTEST               RETURN TO VALUE ARRAY TEST
         SPACE 3
********       A R R A Y   H A N D L I N G
         SPACE 3
ATEST    SR    R0,R0               CLEAR A WORKREGISTER
         CH    R0,14(0,CDSA)       TEST ARRAY FIELD
         BE    DSAHDL              IF ZERO GO TO DSAHDL
         LH    R2,14(0,CDSA)       LOAD LAST ARRAY DISPL.
         LH    R3,2(R2,CDSA)       LOAD BEFORE LAST ARRAY DISPL.
         STH   R3,14(0,CDSA)       STORE BEFORELAST ARRAY DISPL
         L     R1,8(R2,CDSA)       LOAD ADDRESS OF LOWEST COMPON.
         L     R0,16(R2,CDSA)      LOAD LENGTH OF ARRAY
         FREEMAIN R,LV=(0),A=(1)   FREEMAIN FOR ARRAY
         B     ATEST               RETURN TO ARRAY TEST
         SPACE 3
********       D S A   H A N D L I N G
         SPACE 3
DSAHDL   LR    R1,CDSA             LOAD DSA-ADDRESS
         LH    R2,8(CDSA)               LOAD PBT-DISPL.
         L     R3,0(CDSA)               UPDATE DSA-ADDRESS
         ST    R3,0(R2,PBT)             *IN PBT
         LH    R0,4(R2,PBT)             LENGTH OF DSA TO REG 0
         L     CDSA,4(0,CDSA)      RESET CDSA-POINTER
         LM    PBT,LAT,16(CDSA)         UPDATE PBT AND LAT REGISTERS
         FREEMAIN R,LV=(0),A=(1)   FREEMAIN FOR DSA
         L     BRR,BRRST(FSA)           RESTORE RETURN ADDRESS
         BR    BRR                 BRANCH
         EJECT
         SPACE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        STANDARD PROCEDURE DECLARATION RUTINE                        *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 3
*        ENTERED FROM THE PROLOG ROUTINE IF PBN IS ZERO, I. E. A
*  STANDARD PROCEDURE IS CALLED VIA AN ACTUAL PARAMETER TO AN ANOTHER
*  PROCEDURE.
*        ON ENTRY, BRR CONTAINS THE ADDRESS OF THE PARAMETER LIST,
*  WHILE ADR CONTAINS THE INTERNAL NAME OF THE STANDARD PROCEDURE.
*        THE ROUTINE BUILDS THE PARAMETER LIST AND EXECUTES THE CALL
*  IN THE SAME WAY AS WOULD NORMALLY BE DONE BY THE GENERATED OBJECT
*  CODE. SINCE THE ROUTINE MAY BE ENTERED REPEATEDLY DURING THE
*  EVALUATION OF THE ACTUAL PARAMETERS, THE PARAMETER LIST AND OTHER
*  INFORMATION IS STORED IN A DYNAMIC AREA CALLED SPDA.
         SPACE 3
         DS    0H
SPDECL   EQU   *-FSAREA
         SPACE 3
*  TEST FOR AUXILIARY ROUTINE INPUT OR OUTPUT
         SPACE
         LTR   ADR,ADR
         BCR   2,ADR                    TO ROUTINE INPUT OR OUTPUT
         SPACE
*  GET DYNAMIC STORAGE AREA
         SPACE
SPDECL00 EQU   *
         LR    GR2,BRR                  SAVE BRR DURING GETMAIN
         GETMAIN R,LV=SPDALG
         LR    BRR,GR2
         MVC   0(4,GR1),SPDAP           INSERT CHAIN ADDRESS
         ST    GR1,SPDAP                STORE CURRENT AREA POINTER
         LR    SPDABASE,GR1
         USING SPDA,SPDABASE
         SPACE
         ST    ADR,PRID
         LR    GR4,LAT                  GR4 IS NOW LAT POINTER
         LR    GR0,ADR
         LR    GR2,GR0
         SRL   GR2,12
         N     GR0,=F'3'                NUMBER OF FORMAL PARAMETERS
         BNZ   *+8                      ZERO MEANS ONE PARAMETER
         LA    GR0,1
         CH    GR0,6(BRR)               COMPARE NUMBER OF ACTUAL PARAM.
         BNE   ERROR21
         SPACE
*  INITIALIZE FOR CREATING PARAMETER LIST
         SPACE
         LA    GR1,PARLIST
         LA    GR3,PARAMS
         MVI   0(GR1),0
         MVC   1(11,GR1),0(GR1)         RESET PARAMETER LIST
SPDECL02 STC   GR2,FPTYPA
         STC   GR2,FPTYP
         XC    FPTYP,5(BRR)             COMPARE WITH ACTUAL PAR. CHAR.
         TM    FPTYP,X'07'
         BZ    SPDECL15                 IDENTICAL TYPES
         BO    PARERR(FSA)              NOT COMPATIBLE TYPES
         SPACE
*  TYPES ARE NOT IDENTICAL BUT MAY BE COMPATIBLE
         SPACE
         TM    FPTYPA,X'08'        TEST FOR VALUE OR NAME
         BO    PARERR(FSA)              CALL BY NAME AND NOT SAME TYPE
         TM    FPTYP,X'03'              TEST IF REAL-INTEGER COMPATIBLE
         BNO   PARERR(FSA)
         TM    5(BRR),X'03'             TEST ACTUAL PARAMETER
         BNM   PARERR(FSA)              IF NOT REAL OR INTEGER
         OI    0(GR1),X'80'             SET TYPE CONVERSION FLAG
         SPACE
*  ACTIVATE THUNK TO GET ADDRESS OF ACTUAL PARAMETER
         SPACE
SPDECL15 STM   BRR,GR4,SPSAVE
         MVC   SPTHAD(4),0(BRR)         THUNK ADDR TO FULLWORD LOC.
         L     GR3,RASPT(FSA)
         LA    GR3,8(GR3)               NEXT ENTRY IN RAS
         C     GR3,RASPB(FSA)
         BNL   RASOVERF(FSA)            IF RAS FULL
         ST    GR3,RASPT(FSA)
         ST    CDSA,0(GR3)              DSA POINTER TO RAS
         LM    PBT,LAT,16(CDSA)
          LA   GR2,SPDECL17-8
         ST    GR2,4(GR3)               ADDRESS USED BY CAP2
         L     BRR,SPTHAD               ADDRESS OF THUNK
         BR    BRR                      BRANCH TO THUNK
         SPACE
*  RETURN HERE VIA CAP2
*  REG ADR CONTAINS ADDRESS OF ACTUAL PARAM
         SPACE
SPDECL17 EQU   *
         L     SPDABASE,SPDAP           RESTORE SPDA POINTER
         LM    BRR,GR4,SPSAVE           RESTORE REGISTERS
         C     ADR,ASTLOC(FSA)
         BNE   SPDECL19
         MVC   0(8,GR3),0(ADR)          SAVE PARAM VALUE IN SPDA
         LR    ADR,GR3
SPDECL19 O     ADR,0(GR1)               COMBINE FLAGS AND PARAM ADDR
         ST    ADR,0(GR1)               STORE PARAM ADDR IN PARLIST
         TM    PRID,X'03'               TEST IF I/O PROCEDURE
         BNZ   SPDECL01                 BR. IF OTHER
         SPACE
*  I/O PROCEDURE
         SPACE
         TM    PRID+2,X'02'             TEST IF SYSACT
         BZ    SPDECL01                 BR IF NO
         CH    GR0,=H'1'                TEST IF THIRD PARAM
         BNE   SPDECL01                 BR IF NO
         TM    4(BRR),X'08'             TEST IF ASSIGNMENT POSSIBLE
         BZ    SPDECL01                 BR IF YES
         OI    0(GR1),X'40'             SET NO ASSIGNMENT FLAG
         SPACE
SPDECL01 LA    GR1,4(0,GR1)             STEP PARLIST POINTER
         LA    GR3,8(0,GR3)             STEP PARAMETER POINTER
         LA    BRR,8(0,BRR)             STEP ACTUAL PARAMETER POINTER
         SRL   GR2,4
         BCT   GR0,SPDECL02             BR IF MORE PARAMETERS
         SPACE
*  PARAMETER LIST COMPLETE - ACTIVATE THE PROCEDURE
         SPACE
         ST    BRR,SPSAVE               SAVE RETURN ADDRESS
         LA    GR1,PARLIST
         TM    PRID+3,X'80'             TEST IF ABS/SIGN/LENGTH/ENTIER
         BO    SPDECL03                 BR IF YES
         IC    GR2,PRID+3
         N     GR2,=X'000000FC'         GET DISPLACEMENT IN LAT
         L     ENTRY,0(GR2,GR4)         LOAD ADDRESS OF PROCEDURE
         TM    PRID,X'03'               TEST IF I/O PROCEDURE
         BNZ   SPDECL04                 BR IF NO
         SPACE
*  I/O PROCEDURE EXIT
         SPACE
         BALR  RETURN,ENTRY
         B     SPDECL18
         SPACE
SPDECL03 TM    PRID+3,X'50'
         BNM   SPDECL04                 BR IF ABS OR ENTIER FUNCTION
         TM    PRID+3,X'20'
         BZ    SPDECL05                 BR IF SIGN FUNCTION
         SPACE
*  LENGTH FUNCTION
         SPACE
         L     GR1,0(GR1)
         MVC   HW(2,FSA),0(GR1)
         LH    GR0,HW(FSA)              LENGTH OF ENTIRE STRING FIELD
         BCTR  GR0,0                    REDUCE BY TWO TO GET
         BCTR  GR0,0                      ACTUAL STRING LENGTH
         ST    GR0,FCTVALST(FSA)
         B     SPDECL13
         SPACE
*  SIGN FUNCTION
         SPACE
SPDECL05 L     GR2,0(GR1)               LOAD PARAMETER ADDRESS
         SR    GR0,GR0                  INITIALIZE OUTPUT VALUE
         TM    0(GR1),X'80'             TEST FOR TYPE CONVERSION
         BO    SPDECL06                 BRANCH IF YES
         EX    0,LINSTR                 VALUE TO F.P. REG. 0
         EX    0,LTRINSTR               TEST SIGN
         B     SPDECL07
SPDECL06 L     GR0,0(GR2)               VALUE TO G.P. REG. 0
         LTR   GR0,GR0                  TEST SIGN
SPDECL07 BZ    SPDECL08
         LA    GR0,1                    FUNCTION VALUE=1
         BP    SPDECL08
         LCR   GR0,GR0                  FUNCTION VALUE=-1
SPDECL08 ST    GR0,FCTVALST(0,FSA)
         B     SPDECL13
         SPACE
*  MATHEMATICAL FUNCTIONS (INCLUDING ABS, ENTIER)
         SPACE
SPDECL04 L     GR2,0(GR1)
         TM    0(GR1),X'80'             TEST IF TYPE CONVERSION
         BZ    SPDECL09
         L     STH,0(GR2)               LOAD PARAMETER VALUE
         BAL   ADR,CNVIRD(FSA)
         EX    0,STINSTR
         MVC   0(4,GR1),ASTLOC(FSA)     CHANGE PARAMETER ADDRESS
         B     SPDECL10
SPDECL09 EX    0,LINSTR
SPDECL10 CLI   PRID+3,X'80'             TEST IF ABS
         BNE   SPDECL11                 BR IF NO
         SPACE
*  ABS FUNCTION
         SPACE
         EX    0,LPRINSTR               ABS VALUE TO F.P. REG 0
         B     SPDECL14
         SPACE
SPDECL11 CLI   PRID+3,X'F0'             TEST IF ENTIER
         BNE   SPDECL12
         SPACE
*  ENTIER FUNCTION
         SPACE
         BAL   ADR,ENTIER(FSA)
         ST    STH,FCTVALST(FSA)
         B     SPDECL13
         SPACE
*  ALL OTHER FUNCTIONS
         SPACE
SPDECL12 BALR  RETURN,ENTRY             BR TO SUBROUTINE
SPDECL14 EX    0,STINSTR
SPDECL13 L     ADR,ASTLOC(FSA)          ADDRESS OF FUNCTION VALUE
         SPACE
SPDECL18 EQU   *                   COMMON EXIT
         SPACE
         LR    GR1,SPDABASE
         MVC   SPDAP(4),0(GR1)          RESTORE PREV. D.A. POINTER
         L     GR2,SPSAVE               LOAD RETURN ADDR. (PREV. BRR)
         FREEMAIN R,A=(1),LV=SPDALG
         LM    PBT,LAT,16(CDSA)
         BR    GR2                      RETURN TO CALLING PROGRAM
         DROP  SPDABASE
         SPACE
*  CONSTANTS AND WORK AREAS
         SPACE
SPTHAD   DC    F'0'                     TEMP. STORAGE FOR THUNK ADDR.
SPDAP    DC    F'0'                     POINTER TO CURRENT DYNAMIC AREA
FPTYP    DS    C                        TYPE OF FORMAL PARAMETER
FPTYPA   DS    C                        SAVE AREA FOR FPTYP
         SPACE
*  DYNAMIC STORAGE AREA
         SPACE
SPDA     DSECT
         DS    F                        LINK TO LOWER D.A.
SPSAVE   DS    6F                       REGS BRR,GR0,GR1,GR2,GR3,GR4
PRID     DS    F                        PROCEDURE IDENTIFICATION
PARLIST  DS    3F                       PARAMETER LIST
PARAMS   DS    3D                       PARAMETER VALUES
SPDALG   EQU   *-SPDA
         SPACE
IHIFSARA CSECT
         EJECT
         SPACE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              CALL SWITCH ELEMENT SUBROUTINE                         *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 3
*  THIS ROUTINE IS AN INTERMEDIATE LINK BETWEEN A SWITCH DESIGNATOR
*  ANDA SWITCH LIST.IT SEARCHES THE DSA CHAIN FOR THE DSA OF THE
*  SWITCH LIST AND BRANCHES TO THE CALLED SWITCH LIST ENTRY
*  CALLING SEQUENCE                (ENTRY VIA BRLIST)
* ADDRESS OF SWITCH LIST IN REG ADR,ADDRESS OF DSA FOR BLOCK IN WHICH
* SWITCH IS DECLARED IN REG GDSA AND THE SWITCH ELEMENT NUMBER IN BRR
         SPACE
*        BAL   STH,CSWE1(FSA)
*         ---                           RETURN VIA CSWE2 WITH BRANCH
*                                       ADDRESS IN ADR AND ADDRESS OF
*                                       DSA IN GDSA
         SPACE
CSWE1A   EQU   *
         SPACE 3
         LTR   BRR,BRR                  ELEMENT NUMBER POSITIV
         BNH   SWDMERR(FSA)             NO,DIMENSION ERROR
         CH    BRR,2(ADR)               COMPARE NR WITH SWITCH LIST NR
         BH    SWDMERR(FSA)             DIMENSION ERROR
         SLL   BRR,2
         SPACE
         L     GP3,RASPT(FSA)           RAS POINTER FROM TOP
CSWEI1   LA    GP3,8(GP3)               RESERVE ONE ENTRY IN RAS
         C     GP3,RASPB(FSA)           CHECK FOR STACK
         BNL   RASOVERF(FSA)            *OVERFLOW
         ST    CDSA,0(GP3)              STORE CDSA IN RAS
         ST    STH,4(GP3)               SAVE RETURN ADDRESS IN STACK
         SR    STH,STH                  NOT CALLING BLOCK INDICATION
         CR    CDSA,GDSA                SWITCH BLOCK REACHED
         BNE   CSWEI2                   NO
         ST    GP3,RASPT(FSA)           SAVE RAS TOP POINTER
         L     BRR,0(BRR,ADR)           ADDRESS OF SWITCH ELEMENT
         BR    BRR
         SPACE
CSWEI2   LH    GP1,8(CDSA)              PROGRAM BLOCK DISPL.TO REG
         L     GP2,0(CDSA)              LAST GENERATION DSA-POINTER IS
         ST    GP2,0(GP1,PBT)           *STORED IN PROGRAM BLOCK TABLE
         L     CDSA,4(CDSA)             LOAD DYNAMICALLY ENCLOSING DSA
         LM    PBT,LAT,16(CDSA)         PBT AND LAT CAN BE DIFFERENT
         B     CSWEI1                   CONTINUE
         SPACE 3
         SPACE 3
*  THIS ROUTINE HANDLES THE TRANSFER FROM THE SWITCH LIST BACK TO THE
*  SWITCH DESIGNATOR . IT RELOADS CDSA WITH THE ADDRESS OF THE DSA THAT
*  WAS ACTIVE WHEN CSWEU WAS ENTERED
*  CALLING SEQUENCE                (ENTRY VIA BRLIST)
*        B     CSWE2(FSA)
         SPACE 3
CSWE2A   EQU   *
         SPACE
         L     GP3,RASPT(FSA)           RAS POINTER FROM TOP
CSWEI3   L     STH,4(GP3)               RETURN ADDRESS FROM STACK
         SH    GP3,EIGHT(FSA)           RELEASE ONE ENTRY IN RAS
         ST    GP3,RASPT(FSA)           SAVE RAS TOP POINTER
         LTR   STH,STH                  RETURN ADDRESS FOUND
         BCR   7,STH                    YES RETURN
         L     CDSA,0(GP3)             NEW DSA-POINTER FROM RAS    0050
         LH    GP1,8(CDSA)              PROGRAM BLOCK DISPL. TO REG
         ST    CDSA,0(GP1,PBT)          CURRENT DSA-POINTER TO PBT
         LM    PBT,LAT,16(CDSA)         PBT AND LAT CAN BE DIFFERENT
         B     CSWEI3                   CONTINUE
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        L O A D  P R E C O M P I L E D  P R O C E D U R E            *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 3
*        THIS ROUTINE IS ENTERED FROM THE DECLARATION OF A 'CODE'
*  PROCEDURE. IT SEARCHES THE BOTTOM PART OF RAS FOR THE NAME OF THE
*  PROCEDURE. IF IT IS NOT FOUND, THE PRECOMPILED PROCEDURE WITH THE
*  SAME NAME IS LOADED AND ENTRIES ARE MADE IN RAS FOR THE NAME AND
*  FOR THE ENTRY POINT.
*        THE ENTRY POINT ADDRESS IS ALSO STORED IN THE PROGRAM
*  BLOCK TABLE.
         SPACE
*  CALLING SEQUENCE                (ENTRY VIA BRLIST)
*        BAL   ADR,LOADPP(FSA)
*        DC    CL8(PPNAME)              NAME OF PRECOMP. PROCEDURE
*        DC    H'PBN'                   PROG BLOCK NUMBER
         SPACE
LOADPPA  EQU   *
         LM    R3,R4,RASEND(FSA)        RASEND AND RASPB TO REG.
         LA    R2,8                     INCREMENT 8
LOADPP2  CR    R3,R4
         BNH   LOADPP1                  BRANCH IF STACK EMPTY
         CLC   0(8,R4),0(ADR)           PROCEDURE ALREADY LOADED
         LA    R4,8(R4)                 STEP TO NEXT PP NAME
         BNE   LOADPP2                  NO,NAME NOT FOUND
         L     R3,RASPT(FSA)            RAS POINTER FROM TOP
         S     R4,RASPB(FSA)
         SRL   R4,3                     NAME FOUND IN ENTRY NR R4
LOADPP3  SR    R3,R2
         CLI   8(R3),RASLOADM           LOAD PROCEDURE ENTRY
         BNE   LOADPP3                  NO,CONTINUE SEARCH
         BCT   R4,LOADPP3               BRANCH IF NOT RIGH ENTRY
         L     R0,12(R3)                FETCH ADDRESS OF CONSTANTS
         B     LOADPP4
LOADPP1  EQU   *                   PROCEDURE MUST BE LOADED
         L     R3,RASPT(FSA)
         L     R4,RASPB(FSA)
         AR    R3,R2                    RESERVE ONE ENTRY FROM TOP
         SR    R4,R2                    RESERVE ONE ENTRY FROM BOTTOM
         CR    R3,R4                    CHECK FOR
         BNL   RASOVERF(FSA)            *STACK OVERFLOW
         ST    R4,RASPB(FSA)            STORE UPDATED STACK POINTER
         ST    R3,RASPT(FSA)
         MVC   0(8,R4),0(ADR)           ENTER NAME IN STACK
         LR    R0,R4                    R0 POINT TO NAME
         LOAD  EPLOC=(0)
         ST    CDSA,0(R3)               SAVE CDSA IN RAS-ENTRY
         MVI   0(R3),RASLOADM           INSERT LOAD PROCEDURE FLAG
         ST    R0,4(R3)                 STORE ADDRESS TO ENTRY CONSTANT
LOADPP4  LH    R3,8(ADR)                FETCH PBN CODE PROCEDURE
         ST    R0,0(R3,PBT)             ADDR.OF PRECOMPILED PROCEDURE
*                                       CONSTANT TO CODE PROC.PBT ENTRY
*                                       CONSTANT A(PBT),A(LAT),A(ENTRY)
         B     10(ADR)                  RETURN TO DECLARATION END
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                       T R A C E  R O U T I N E                      *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 3
*        THIS ROUTINE IS EXECUTED WHENEVER THE END OF AN ALGOL
*  STATEMENT IS REACHED, IF ANY OF THE PARAMETERS TRACE, TRBEG OR
*  TREND WAS SPECIFIED. IT CHECKS IF THE SEMICOLON NUMBER IS
*  WITHIN A TRACE AREA AND, IF THIS IS THE CASE, STORES IT IN A BUFFER
*  FOR OUTPUT ON SYSUT1 WHEN THE BUFFER OVERFLOWS.
*        WHEN A DISCONTINUITY IS ENCOUNTERED (TRANSFER INTO A TRACE
*  AREA OR BETWEEN THE MAIN PROGRAM AND A PRECOMPILED PROCEDURE),
*  THE NAME OF THE ACTIVE MODULE IS ALSO STORED IN THE BUFFER.
*        THE FORMAT OF THE INFORMATION IN THE BUFFER IS
*        DC    H'LENGTH'                POINTER TO NEXT FREE PLACE
*        DS    H                        NOT USED
*        DC    H'SC'                    SEMICOLON NUMBER
*         .
*         .
*        DC    H'0'                     FLAG FOR MODULE NAME
*         DC    CL4'NAME'               MODULE NAME (FIRST 4 CHAR)
*        DC    H'SC'                    SEMICOLON NUMBER
*         .
*         .
*
*        THE ROUTINE IS ENTERED VIA INSTRUCTIONS IN THE BRANCH LIST
*  AT BRLIST. THESE INSTRUCTIONS STORE THE SEMICOLON NUMBER AND THEN
*  EXECUTE A BRANCH EITHER TO THIS ROUTINE OR, IF TRACE WAS NOT
*  REQUESTED, DIRECTLY BACK TO THE ALGOL PROGRAM.
         SPACE
         SPACE
*  CALLING SEQUENCE
*        BAL   BRR,TRACE(FSA)
*        DC    H'SC'                    SEMICOLON NUMBER
*        ---                       (RETURN POINT)
         SPACE 3
TRACEA   STM   14,12,TRSAVE
         L     GR3,=A(IHIFSARB)
         USING IHIFSARB,GR3
         LR    GR1,PBT
         LM    RBEG,REND,TRBEG          LOAD TRACE LIMITS
         LM    RBUF,RBUFC,TRBUF         LOAD BUFFER PARAMETERS
         LH    RBUFP,0(0,RBUF)          LOAD BYTE POINTER
         LH    GR2,TRL1                 LENGTH OF NORMAL TRACE ITEM
         SPACE
         CLC   4(4,GR1),TRMPNAME        TEST IF MAINP OR PRECOMP PROC
         BE    TRACE10                  MAINP
         TM    OPTSW(FSA),PPTRSW        TEST FOR TRACE IN PRECOMP. PR.
         BZ    TRACE6                   NO P.P. TRACE              0207
         TM    TRFLAG,X'03'             P.P.CALLED FROM TRACE AREA 0207
         BM    TRACE0                   YES TRACE REQUIRED         0207
         B     TRACE6                   CONDITIONAL - NO P.P. TRACE
TRACE10  LH    RSC,SCRCS(FSA)           LOAD CURRENT SEMICOLON NR
         CR    REND,RBEG                TEST INTERVAL LIMITS
         BNH   TRACE13                  SINGLE INTERVAL
         CR    RSC,RBEG                 CHECK SC AGAINST LIMITS
         BL    TRACE15                  OUTSIDE INTERVAL
         CR    RSC,REND
         BH    TRACE15                  OUTSIDE INTERVAL
         B     TRACE16                  INSIDE INTERVAL
TRACE13  CR    RSC,REND                 DOUBLE INTERVAL
         BH    TRACE14
TRACE16  MVI   TRFLAG1,1                INSIDE LOWRE INTERVAL
         B     TRACE18
TRACE14  CR    RSC,RBEG
         BL    TRACE15                  OUTSIDE BOTH INTERVALS
         MVI   TRFLAG1,2                INSIDE HIGHER INTERVAL
TRACE18  CLC   TRFLAG1,TRFLAG           HAS BORDER BEEN CROSSED
         BE    TRACE0                   BR IF SAME INTERV. AS BEFORE
         MVC   TRFLAG,TRFLAG1
         B     TRACE5
TRACE15  MVI   TRFLAG,0                 NO TRACE THIS TIME
         B     TRACE6
         SPACE
TRACE0   CLC   4(4,GR1),TRPGID+2        HAS PROGID CHANGED
         BE    TRACE1
TRACE5   MVC   TRPGID+2(4),4(GR1)       STORE NEW PROGID
         LH    GR2,TRL2                 LENGTH OF ITEM WITH PROGID
TRACE1   LR    GR0,GR2                  IS BUFFER FILLED
         AR    GR0,RBUFP
         CR    GR0,RBUFL
         BL    TRACE2                   BR IF STILL ROOM
*
         LTR   RBUFC,RBUFC              IF NO RECORDS WRITTEN,
         BZ    TRACE4                     BYPASS CHECK
         CHECK TRCHECK
TRACE4   WRITE TRCHECK,SF,,(RBUF),MF=E
         LR    GR0,RBUF                 ***
         LR    RBUF,RBUFA                 *  SWITCH BUFFERS
         LR    RBUFA,GR0                  *
         LA    RBUFP,4                  ***  AND RESET POINTER
         LA    RBUFC,1(0,RBUFC)         STEP RECORD COUNTER
*
TRACE2   CH    GR2,TRL1                 TEST FOR NEW PROGID
         BE    TRACE3
*
         LR    GR1,RBUF
         AR    GR1,RBUFP
         MVC   0(6,GR1),TRPGID          PROGID TO BUFFER
         LA    RBUFP,6(0,RBUFP)
*
TRACE3   LR    GR1,RBUF
         AR    GR1,RBUFP
         MVC   0(2,GR1),SCRCS(FSA)      SEMICOLON COUNTER TO BUFFER
         LA    RBUFP,2(0,RBUFP)
         STH   RBUFP,0(0,RBUF)
         STM   RBUF,RBUFC,TRBUF
TRACE6   LM    14,12,TRSAVE
         B     2(BRR)                   RETURN TO ALGOL PROGRAM
*
TRL1     DC    H'2'                     LENGTH OF SEMICOLON FIELD
TRL2     DC    H'8'                     LENGTH OF NEW NAME + SEMICOLON
TRPGID   DC    H'0'                     FLAG FOR PROGID
         DC    2H'0'                    FIRST FOUR BYTES OF PROGR. NAME
         DC    X'FFFF'                  INITIAL VALUE FOR TREND
TRBEG    DC    F'0'                     BEGINNING OF TRACE AREA
TREND     DC   F'0'                     END OF TRACE AREA
TRFLAG   DC    X'00'                    STATUS INDICATOR
*                                         00 - OUTSIDE BOTH TRACE AREAS
*                                         01 - INSIDE LOWER AREA
*                                         02 - INSIDE HIGHER AREA
TRFLAG1  DC    X'00'                    PREVIOUS VALUE OF TRFLAG
TRMPNAME DC    CL4' '                   NAME OF MAIN PROGRAM
         SPACE
TRSAVE   EQU   FSAREA+ASAVE+12
         DROP  GR3
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        P R O G R A M  I N T E R R U P T  R O U T I N E              *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 3
PIEROUT  EQU   *
         USING PIEROUT,ENTRY
         L     FSA,=A(IHIFSARA)
         MVC   PGOPSW(8,FSA),4(GR1)
         LH    GR2,PGOPSW+2(0,FSA)      LOAD INTERRUPTION CODE
         N     GR2,PGCMASK              REMOVE IMPRECISE CODES (M/91)
         SLA   GR2,2
         LA    GR2,PIETAB(GR2)          GET ENTRY IN ERROR TABLE
PIEROUT2 MVC   9(3,GR1),1(GR2)          CHANGE RETURN ADDR IN OPSW
         BR    RETURN
         DROP  ENTRY
         SPACE
         DS    0A
PGCMASK  DC    X'0000000F'              MASK FOR INTERRUPT CODE
PIETAB   EQU   *
         DC    A(ERROR33)               PSW CODE 0 - ONLY WITH MOD/91
         DC    A(ERROR33)     ***
         DC    A(ERROR33)       *
         DC    A(ERROR33)       *
         DC    A(ERROR33)       *  PSW CODES 1-7
         DC    A(ERROR33)       *
         DC    A(ERROR33)       *
         DC    A(ERROR33)     ***
         DC    A(ERROR28)     FIXED PT OVFL     PSW CODE  8
         DC    A(ERROR30)     FIXED PT DIVIDE   PSW CODE  9
         DC    A(ERROR33)    (DECIMAL OVERFLOW  PSW CODE 10 CANT OCCUR)
         DC    A(ERROR33)    (DECIMAL DIVIDE    PSW CODE 11 - MASKED)
         DC    A(ERROR29)     EXPONENT OVERFLOW PSW CODE 12
         DC    A(ERROR33)    (EXPONENT UNDERFL  PSW CODE 13 - MASKED)
         DC    A(ERROR33)    (FLOAT PT SIGNIF.  PSW CODE 14 - MASKED)
         DC    A(ERROR31)     FLOAT PT DIVIDE   PSW CODE 15
         EJECT                                                     0226
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  0226
*                                                               *  0226
*   ADDRESSLIST OF ENTRYPOINTS IN IHIIOR USED BY I/O ROUTINES   *  0226
*                                                               *  0226
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  0226
         SPACE 3                                                   0226
ADRLST   DC    A(IHIIORCI)                                         0226
         DC    A(IHIIORCL)                                         0226
         DC    A(IHIIOREV)                                         0226
         DC    A(IHIIORNX)                                         0226
         DC    A(IHIIOROP)                                         0226
         DC    A(IHIIOROQ)                                         0226
         DC    A(IHIIOREN)                                         0226
         DC    A(IHIIORGP)                                         0226
         DC    A(IHIIORER)                                         0226
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              I N I T I A L  E N T R Y  P O I N T                    *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 3
         DROP  FSA
         DS    0H
IHIFSAIN EQU   *
         USING IHIFSAIN,ENTRY
         SAVE  (14,12)
         L     FSAA,=A(IHIFSARA)
         ST    FSA,4(0,FSAA)            LINK SAVE AREAS TOGETHER
         ST    FSAA,8(0,FSA)
         LR    FSA,FSAA
         L     GRF,=A(IHIFSARB)
         USING IHIFSARB,GRF
         B     ALGIN                    TO INITIALIZATION ROUTINE
         DROP  ENTRY
         DROP  GRF
         EJECT
IHIFSARB CSECT
         SPACE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*         I N I T I A L I Z A T I O N  R O U T I N E                  *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 3
*    THIS IS THE FIRST ROUTINE EXECUTED WHEN AN ALGOL PROGRAM IS
*  CALLED FROM THE O.S. OR FROM A CALLING PROGRAM.
*    IT PERFORMS CERTAIN INITIALIZING FUNCTIONS AND THEN TRANSFERS
*  CONTROL TO THE ALGOL OBJECT PROGRAM.
*
         USING IHIFSARA,FSA
         USING IHIFSARB,GRF
         SPACE 3
ALGIN    EQU   *
*
         SPIE  PIEROUT,((1,9),12,15)    EXIT FOR RELEVANT PROG. CHECKS
         ST    GR1,FSAPICA(0,FSA)
         SPACE
*  GET STORAGE FOR RETURN ADDRESS STACK AND INITIALIZE RAS POINTERS
         SPACE
         GETMAIN R,LV=2048
         SH    GR1,EIGHT(0,FSA)
         ST    GR1,RASPT(0,FSA)
         ST    GR1,RASSTART(0,FSA)
         LA    GR1,2056(0,GR1)
         ST    GR1,RASPB(0,FSA)
         ST    GR1,RASEND(0,FSA)
         SPACE
         SR    CDSA,CDSA                                           0173
         L     DSN,ADSTAB(FSA)         INITILIZE DSENTRIES FOR     0214
         L     GRA,0(0,DSN)            S P K Q                     0214
         LA    DSN,4(0,DSN)                                        0214
         LTR   GRA,GRA                 Q. IS THERE A PGCF          0214
         BM    ALGIN01-4                                           0214
         LA    GR1,2048                YES                         0214
         ST    GR1,16(0,GRA)           INSERT BE LENGTH            0214
         ST    CDSA,24(0,GRA)          INITILIZE S, TYP IN PGCF    0214
         N     GRA,=X'00FFFFFF'                                    0214
ALGIN01  CR    GRA,DSN                                             0214
         BE    ALGIN02                                             0214
         MVC   20(6,DSN),DSINIT                                    0214
         LA    DSN,LTH(0,DSN)                                      0214
         B     ALGIN01                                             0214
ALGIN02  STH   CDSA,TRPGID             INITILIZE TRACE COUNTERS    0214
         ST    CDSA,TRPGID+2                                       0214
         STC   CDSA,TRFLAG                                         0214
         MVI   TRPGID+6,X'FF'                                      0214
         MVI   TRPGID+7,X'FF'                                      0214
         STH   CDSA,SCRCS(FSA)          INITIALIZE SEMICOLON COUNT 0173
         ST    CDSA,ANOTTAB(FSA)        RESET NOTE TABLE ADDRESS   0173
         ST    CDSA,SPDAP               RESET SPECIAL DECL.POINTER 0173
*  TEST EXECUTION TIME OPTIONS AND SET SWITCHES
         SPACE
*  TEST FOR SHORT/LONG PRECISION
         SPACE
         L     GRA,=A(IHIENTIF)         GET S/L SWITCH
         MVC   OPTSW(1,FSA),8(GRA)        FROM THE OBJECT MODULE
         MVC   CNVINST(CNVINSTL),CNVINSTE  ASSUME SHORT
         LA    GRA,SETSHORT
         TM    OPTSW(FSA),SHSW
         BO    ALGIN4              IF SHORT
          MVC  CNVINST(CNVINSTL),CNVINSTD    MODIFY CONVERT ROUTINE
         LA    GRA,4(0,GRA)
ALGIN4   EQU   *
         LM    GRB,GRD,FPINSTAD         MODIFY FLOATING POINT
         EX    0,0(GRA)                  INSTRUCTIONS
         BXLE  GRB,GRC,*-4
         SPACE
*  CHECK EXECUTION PARAMETERS DUMP AND TRACE
         SPACE
ALGIN0   EQU   *
         OI    TRACE+7(FSA),X'F0'       DEACTIVATE BRANCH TO TRACE RT.
         MVC   TRPGID+2(4),TRPGID+1     RESET PROGID FOR TRACE
         MVC   TRBEG(8),TRPGID          INITIALIZE TRACE LIMITS
         L     GRA,4(0,FSA)
         L     GRA,24(0,GRA)            ADDR OF PARAMETER LIST
         LTR   GRA,GRA
         BZ    ALGIN1                   BRANCH IF NO PARAMETERS
         L     GRA,0(0,GRA)        ADDR OF PARAMETER FIELD
         LA    GRA,0(0,GRA)             RESET HIGH ORDER BYTE
         LH    GRB,0(0,GRA)
         LTR   GRB,GRB                  LENGTH OF PARAMETER FIELD
         BZ    ALGIN1                   NO PARAMETERS
         AR    GRB,GRA                  END OF PARAMETER FIELD
         LA    GRD,LASTPARM             END OF PARAMETER LIST
         SR    GRE,GRE
FNDCOMMA CLI   2(GRA),C','
         BNE   FNDPAR
STEP1    LA    GRA,1(0,GRA)
COMP1    CR    GRA,GRB
         BL    FNDCOMMA
         B     ALGIN2                   WHOLE PARM FIELD SCANNED
FNDPAR   LA    GRC,PARMLIST
         USING PARMLIST,GRC
NXTPAR   IC    GRE,PARMLG               LENGTH OF PARAMETER
         EX    GRE,COMPINST             COMPARE WITH ENTRY IN LIST
         BNE   NOTFOUND
         LA    GR1,1(GRA,GRE)
         EX    0,PABRANCH
CHKCOMMA CLI   2(GR1),C','              CHECK FOR COMMA AFTER PARAM
         BE    SETBIT
         CR    GR1,GRB                  IF NO COMMA CHECK FOR END OF
         BL    STEP1                      PARAMETER FIELD
SETBIT   LR    GRA,GR1
         EX    0,PARMSET
         B     COMP1
NOTFOUND CR    GRC,GRD                  CHECK FOR END OF LIST
         LA    GRC,PARLG(0,GRC)
         BL    NXTPAR                   NEXT ENTRY IN LIST
         B     INVOPT(FSA)              OPTION NOT FOUND IN LIST
         SPACE
COMPINST CLC   2(0,GRA),PARM
         DROP  GRC
         SPACE
*  EVALUATE TRBEG OR TREND PARAMETER
         SPACE
TRLIM1   LA    GRG,TRBEG
         B     TRLIM2+4
TRLIM2   LA    GRG,TREND
         CLI   2(GR1),C'='
         BNE   INVOPT(FSA)
         LA    GRH,5(0,GR1)             END OF NUMBER FIELD
         SR    GRI,GRI                  RESET NUMBER ACCUMULATOR
TRLIM4   LA    GR1,1(0,GR1)             STEP TO NEXT DIGIT
         CR    GR1,GRB
         BNL   TRLIM3                   BR IF END OF WHOLE PARAM FIELD
         CLI   2(GR1),C','
         BE    TRLIM3                   BR IF END OF THIS PARAMETER
         CR    GR1,GRH
         BH    INVOPT(FSA)              BR IF TOO MANY DIGITS
         CLI   2(GR1),C'0'              CHECK FOR VALID DIGIT
         BL    INVOPT(FSA)
         CLI   2(GR1),C'9'
         BH    INVOPT(FSA)
         MVN   TRLDIG+1(1),2(GR1)       EXTRACT NEW DIGIT
         MH    GRI,=H'10'
         AH    GRI,TRLDIG               ACCUMULATE SUM
         B     TRLIM4
TRLIM3   ST    GRI,0(GRG)               STORE AS TRBEG OR TREND
         B     SETBIT
         SPACE
TRLDIG   DC    H'0'                     TEMP. STORAGE FOR DIGIT
         SPACE
*  PREPARE FOR PROGRAM TRACING
         SPACE
ALGIN2   EQU   *
         TM    DTSW(FSA),TRSW           IS TRACE REQUESTED
         BZ    ALGIN1
         OPEN  (DCBUT1,(OUTIN))         OPEN SYSUT1 FOR USE BY TRACE
         LA    GRB,DCBUT1
         USING IHADCB,GRB
         TM    DCBOFLGS,X'10'           CHECK IF SYSUT1 OPENED
         BO    ALGIN3
         NI    DTSW(FSA),255-TRSW       TRACE SWITCH OFF
         LA    DSNR,17
         B     DDERROR(FSA)
ALGIN3   EQU   *
         NI    TRACE+7(FSA),X'0F'       ACTIVATE BRANCH TO TRACE ROUT
         LH    GR0,DCBBLKSI             GET BLOCK SIZE FROM DCB
         DROP  GRB
         ST    GR0,TRBUFL               STORE AS BUFFER LENGTH
         SLA   GR0,1
         GETMAIN R,LV=(0)               GET TWO BUFFERS FOR SYSUT1
         ST    GR1,TRBUF                ADDRESS OF FIRST BUFFER
         SR    GR0,GR0
         ST    GR0,TRCNT                RESET RECORD COUNTER
         LA    GR0,4                    SET BYTE POINTER
         STH   GR0,0(0,GR1)
         A     GR1,TRBUFL
         ST    GR1,TRBUFA               ALTERNATE BUFFER
         SPACE
*  INITIALIZE REGISTERS AND ENTER OBJECT MODULE
         SPACE
ALGIN1   EQU   *
         SR    CDSA,CDSA
         L     ENTRY,=A(IHIENTIF)
         LM    PBT,LAT,0(ENTRY)
         L     GRA,16
         L     GRA,0(GRA)
         L     GRA,4(GRA)               GET TCB ADDRESS
         L     GRA,0(GRA)               GET REQUEST BLOCK ADDRESS
         L     GRA,12(0,GRA)           INSERT MODULE             A22570
         MVC   4(4,PBT),8(GRA)              NAME INTO            A22570
         MVC   TRMPNAME,8(GRA)                   PBTAB           A22570
         L     ENTRY,8(0,ENTRY)
         BR    ENTRY                    ENTER ALGOL PROGRAM
         SPACE
*  DCB EXIT ROUTINE FOR SYSUT1
         SPACE
         USING IHADCB,GR1
         DS    0F
DCBEXIT  DC    X'85',AL3(DCBEXIT+4)
         LH    GRA,DCBBLKSI
         LTR   GRA,GRA                  CHECK IF BLOCKSIZE SPECIFIED
         BNZ   DCBEXIT1                 BR. IF YES
DCBEXIT2 LA    GRA,TRBUFST              OTHERWISE USE STANDARD SIZE
         STH   GRA,DCBBLKSI
DCBEXIT3 RETURN
DCBEXIT1 CH    GRA,TRBUFMIN             CHECK BLOCKSIZE
         BL    DCBEXIT2                 (IF TOO LOW OR TOO HIGH,
         CH    GRA,TRBUFMAX              USE STANDARD SIZE)
         BH    DCBEXIT2
         B     DCBEXIT3
         DROP  GR1
         SPACE
TRBUFMIN DC    H'14'                    MINIMUM TRACE BUFFER SIZE
TRBUFMAX DC    H'32760'                 MAXIMUM TRACE BUFFER SIZE
TRBUFST  EQU   2048                     STANDARD TRACE BUFFER SIZE
DSINIT   DC    X'000100500200'         INITILIZE DSTAB             0214
LTH      EQU   X'24'                                               0214
*
         SPACE
SETSHORT OI    0(GRB),SHORTBIT          MODIFY F.P. INSTR FOR SHORT
         NI    0(GRB),255-SHORTBIT                         OR LONG PR.
         SPACE 3
********       TABLE FOR DECODING OPTION PARAMETERS            ********
         SPACE 3
PARMLIST DS    0H
PARMLG   DC    AL1(3)                   (LENGTH - 1) OF KEYWORD
PARM     DC    CL5'DUMP'                OPTION KEYWORD
PABRANCH B     CHKCOMMA                 EXIT TO EVALUATION ROUTINE
PARMSET  OI    DTSW(FSA),DPSW           SET FLAG BIT
PARLG    EQU   *-PARMLG
         DC    AL1(4)
         DC    CL5'TRACE'
         B     CHKCOMMA
         OI    DTSW(FSA),UCTRSW
         SPACE
         DC    AL1(4)
         DC    CL5'TRBEG'
         B     TRLIM1
         OI    DTSW(FSA),TRSW
LASTPARM EQU   *
         DC    AL1(4)
         DC    CL5'TREND'
         B     TRLIM2
         OI    DTSW(FSA),TRSW
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              T E R M I N A T I O N  R O U T I N E                   *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 3
*    THIS ROUTINE IS ENTERED EITHER FROM THE ALGOL PROGRAM UPON PASSING
*  THE FINAL 'END' STATEMENT (NORMAL TERMINATION) OR FROM THE ERROR
*  ROUTINE (ABNORMAL TERMINATION).  IN EITHER CASE IT EDITS AND PRINTS
*  THE TRACE INFORMATION IF ANY, CLOSES ALL DATA SETS AND RESTORES THE
*  REGISTERS AS THEY WERE AT THE TIME OF ENTRY TO THE ALGOL PROGRAM.
*  THEN IT RETURNS TO OS OR THE CALLING PROGRAM. THE COMPLETION CODE
*  IS SET TO ZERO (NORMAL) OR FOUR (ABNORMAL TERMINATION).
         SPACE
ALGTRMA  MVI   COMPCODE+3,4             ENTRY IN CASE OF ERROR
         B     ALGTRM0
         SPACE
ALGTRMN  EQU   *                   NORMAL ENTRY
         MVI   COMPCODE+3,0
ALGTRM0  EQU   *
         LR    FSAA,FSA                 PREPARE FOR
         L     DSN,ADSTAB(0,FSA)         OUTPUT TO SYSPRINT
         LA    DSN,DSTLG+4(0,DSN)         BY MEANS OF I/O ROUTINES
         LA    DSNR,1
         USING DDSTAB,DSN
         TM    COMPCODE+3,X'04'                                    0219
         BO    ALGTRM00                                            0219
         OI    DS+1,DS15            FLAG CLOSE FROM IHIFSA         0219
         L     ENTRY,=V(IHIIORCP)       CLOSE ALL DATA SETS USED
         BALR  RETURN,ENTRY
ALGTRM00 OI    OPTSW(FSA),TERMSW    FLAG TERM. ROUTINE ENTERED     0219
         TM    OPTSW(FSA),PRNTERR
         BZ    ALGTRM16                 IF SYSPRINT OK
         SPACE
         WTO   MF=(E,WTOTRM)            WRITE END EXEC MESSAGE
         B     ALGTRM10
         SPACE
ALGTRM16 OI    DS+1,DS11                RE-OPEN SYSPRINT FOR
         OI    DS,DS236                   TRACE AND TERM. OUTPUT
         TM    COMPCODE+3,X'04'                                    0219
         BO    ALGTRM1A                                            0219
         L     ENTRY,=V(IHIIOROP)
         BALR  RETURN,ENTRY
         B     ALGTRM1B                                            0219
ALGTRM1A MVI   S+1,X'32'                                           0219
ALGTRM1B BAL   RETURN,BLANK                                        0219
         OI    DS,DS3
         L     ENTRY,=V(IHIIORNX)
         BALR  RETURN,ENTRY
ALGTRM1  TM    DTSW(FSA),TRSW
         BZ    ALGTRM11                 BR. IF NO TRACE OPTION
         TM    OPTSW(FSA),UT1ERR
         BO    ALGTRM18                 IF SYSUT1 ERROR
         LM    RBUF,RBUFC,TRBUF         LOAD BUFFER PARAMETERS
         LTR   RBUFC,RBUFC
         BZ    ALGTRM2                  BR. IF NO RECORDS WRITTEN
         CHECK TRCHECK                  CHECK LAST RECORD WRITTEN
         LH    RBUFP,0(0,RBUF)
         CH    RBUFP,=H'4'
         BNH   ALGTRM3                  BR. IF CURRENT BUFFER EMPTY
         WRITE TRCHECK,SF,,(RBUF),MF=E  WRITE LAST RECORD
         CHECK TRCHECK
         LA    RBUFC,1(0,RBUFC)
ALGTRM3  CLOSE (DCBUT1,REREAD),TYPE=T   CLOSE TEMPORARY
         READ  TRCHECK,SF,,(RBUF),MF=E  READ FIRST RECORD
ALGTRM2  EQU   *
         BAL   RETURN,TRHEAD            PRINT TRACE HEADLINES
ALGTRM4  LTR   RBUFC,RBUFC
         BNZ   ALGTRM9                  IF RECORDS ON SYSUT1
         LR    RBUFA,RBUF
         B     ALGTRM5
ALGTRM9  CHECK TRCHECK                  CHECK PREVIOUS READ
         LM    RBUF,RBUFA,TRBUF
         LR    GR1,RBUF                 SWITCH BUFFERS
         LR    RBUF,RBUFA
         LR    RBUFA,GR1
         STM   RBUF,RBUFA,TRBUF
         BCT   RBUFC,ALGTRM6            DECR. RECORD COUNTER
         B     ALGTRM5                  BR. IF NO MORE RECORDS
ALGTRM6  READ  TRCHECK,SF,,(RBUF),MF=E
ALGTRM5  LH    RBUFP,0(0,RBUFA)         LOAD BYTE COUNT
         AR    RBUFP,RBUFA              ADDRESS OF LAST BYTE PLUS ONE
         LA    RBUFA,4(0,RBUFA)         RBUFA IS NOW BYTE POINTER
         L     GRA,R                    SYSPRINT BYTE POINTER
         B     ALGTRM7
*
ALGTRM8  CLC   0(2,RBUFA),TRPGID        IS NEXT ITEM A PROGID
         BNE   ALGTRM12                 BR IF NO
         MVC   PROGID(4),2(RBUFA)       STORE PROGID
         LA    RBUFA,6(0,RBUFA)
         B     ALGTRM15
ALGTRM12 LA    GRB,6(0,GRA)             CHECK IF ROOM FOR
         C     GRB,RE                     ONE MORE OUTPUT ITEM
         BL    ALGTRM13                 BR IF YES
ALGTRM15 OI    DS,DS3
         L     ENTRY,=V(IHIIORNX)
         BALR  RETURN,ENTRY
         CLC   S(2),=H'1'               TEST IF NEW PAGE
         BNE   ALGTRM14                 BR IF NO
         BAL   RETURN,TRHEAD            PRINT PAGE HEADINGS
         B     ALGTRM15
ALGTRM14 L     GRA,R
         BAL   RETURN,BLANK             INITIALIZE WITH BLANKS
         MVC   0(10,GRA),PIDFIELD       PROGID AT START OF NEW LINE
         MVC   PROGID(4),PROGID-1       BLANKS TO RPOGID
         LA    GRA,PIDLGTH(0,GRA)
ALGTRM13 MVC   CONVBUF(2),0(RBUFA)      ***
         LA    RBUFA,2(0,RBUFA)           *  CONVERT SEMICOLON COUNTER
         LH    GRB,CONVBUF                *  VALUE AND STORE IN
         CVD   GRB,CONVBUF                *  PRINT AREA
ALGTRMZ  OI    CONVBUF+7,X'0F'            *
         UNPK  1(5,GRA),CONVBUF(8)      ***
         LA    GRA,6(0,GRA)             STEP OUTPUT BUFFER POINTER
         ST    GRA,R
ALGTRM7  CR    RBUFA,RBUFP
         BL    ALGTRM8                  BR. IF NOT END OF SYSUT1 RECPRD
         LTR   RBUFC,RBUFC
         BNZ   ALGTRM9                  BR. IF MORE RECORDS TO READ
         OI    DS,DS3                   PRINT LAST LINE
         L     ENTRY,=V(IHIIORNX)
         BALR  RETURN,ENTRY
         SPACE
*  CLOSE SYSUT1 AND FREE BUFFER AREA
         SPACE
ALGTRM18 CLOSE (DCBUT1)
         LM    RBUF,RBUFA,TRBUF         GET LOWER
         LR    GR1,RBUF                   BUFFER ADDRESS
         CR    RBUF,RBUFA
         BL    *+6
         LR    GR1,RBUFA
         L     GR0,TRBUFL
         SLA   GR0,1
         FREEMAIN R,LV=(0),A=(1)        FREE SYSUT1 BUFFER
         SPACE
*  PRINT EXECUTION END MESSAGE
         SPACE
ALGTRM11 EQU   *
         L     GRA,R                    BYTE POINTER
         MVC   0(TML,GRA),TRMSG         MOVE TERMINATION MESSAGE
         LA    GRA,TML(0,GRA)
         ST    GRA,R                    UPDATE BYTE POINTER
         LA    GRA,2                    LOOP COUNTER FOR BLANK LINES
ALGTRM19 EQU   *
         BAL   RETURN,BLANK
         OI    DS,DS3
         L     ENTRY,=V(IHIIORNX)
         BALR  RETURN,ENTRY
         BCT   GRA,ALGTRM19            ONE EXTRA BLANK LINE
         OI    DS+1,DS15          FLAG CLOSE FROM IHIFSA           0219
         L     ENTRY,=V(IHIIORCL)       CLOSE SYSPRINT
         BALR  RETURN,ENTRY
         SPACE
*  FINAL CLEAN-UP
         SPACE
ALGTRM10 EQU   *
         SPACE
         L     GR1,RASSTART(FSA)        FREE RETURN ADDRESS STACK
         LA    GR1,8(0,GR1)
         FREEMAIN R,LV=2048,A=(1)
ALGTRM17 L     GRA,FSAPICA(0,FSA)
          SPIE MF=(E,(GRA))              RESTORE PICA
         SPACE
ALGTRMAA EQU   *
         SPACE
         L     FSA,4(0,FSA)             RESTORE REGISTERS AND RETURN
         MVC   16(4,FSA),COMPCODE       TO REGISTER 15
         RETURN (14,12)                   TO OS OR THE CALLING PROGRAM
         SPACE 3
********   ROUTINE FOR FILLING A SYSPRINT RECORD WITH BLANKS
         SPACE 3
BLANK    STM   GRA,GRB,BLANKS
         L     GRA,R                    CURRENT BYTE POINTER
         L     GRB,RE                   RECORD END POINTER
BLANKA   CR    GRA,GRB
         BNL   BLANKB                   BRANCH IF RECORD END
         MVI   0(GRA),C' '              INSERT ONE BLANK
         LA    GRA,1(0,GRA)             STEP TO NEXT BYTE
         B     BLANKA
BLANKB   ST    GRA,R               UPDATED BYTE POINTER
         LM    GRA,GRB,BLANKS
         BR    RETURN
BLANKS   DS    2F
         SPACE 3
********       ROUTINE FOR PRINTING TRACE OUTPUT HEADING
         SPACE 3
TRHEAD   STM   14,12,TRHEADS
         LM    GRA,GRA+2,TRHADR         COUNTER FOR HEADLINES
TRHEAD1  EQU   *
         L     GR1,R
         BAL   RETURN,BLANK             INITIALIZE WITH BLANKS
         EX    0,0(GRA+2)               MOVE TEXT, OR NOP
         OI    DS,DS3
         L     ENTRY,=V(IHIIORNX)
         BALR  RETURN,ENTRY
         BXLE  GRA+2,GRA,TRHEAD1
         BAL   RETURN,BLANK              BLANK LINE AFTER HEADING
         LM    14,12,TRHEADS
         BR    RETURN
         SPACE
TRHADR   DC    A(6,TRHEND,TRHLIST)
TRHLIST  EQU   *
         NOP   0                        BLANK LINE
         NOPR  0
         MVC   0(TRHLA,GR1),TRHEADA
         NOP   0                        BLANK LINE
         NOPR  0
TRHEND   EQU   *
         MVC   0(TRHLB,GR1),TRHEADB
         SPACE
TRHEADA  DC    C'  ALGOL PROGRAM TRACE' FIRST HEADLINE
TRHLA    EQU   *-TRHEADA
TRHEADB  DC    C'MODULE     SEMICOLON NUMBERS'  SECOND HEADLINE
TRHLB    EQU   *-TRHEADB
         SPACE
TRHEADS  EQU   FSAREA+ASAVE+12
         SPACE
WTOTRM   WTO   'END OF ALGOL PROGRAM EXECUTION',MF=L
TRMSG    EQU    WTOTRM+4
TML      EQU   *-TRMSG
         SPACE 3
********       ERROR AND END OF DATA ROUTINE FOR SYSUT1
         SPACE 3
ERRUT1   EQU   *
ENDUT1   EQU   *
         OI    OPTSW(FSA),UT1ERR        SYSUT1 ERROR SWITCH ON
         LA    DSNR,17                  DUMMY DS NUMBER FOR SYSUT1
         B     ERROR32
         SPACE
*  PARAMETER LIST USED BY BOTH READ AND WRITE MACROS FOR SYSUT1
         SPACE
         WRITE TRCHECK,SF,DCBUT1,MF=L
         SPACE
*  PARAMETERS FOR TRACE BUFFER
         SPACE
TRBUF    DS    F                        ADDRESS OF CURRENT BUFFER
TRBUFA   DS    F                        ADDRESS OF ALTERNATE BUFFER
TRBUFL   DS    F                        LENGTH OF BUFFER
TRCNT    DS    F                        RECORD COUNTER
*  THE BYTE POINTER IS CONTAINED IN THE FIRST TWO BYTES OF THE
*  RECORD AND SERVES AS RECORD LENGTH FIELD
         SPACE
COMPCODE DC    F'0'                     COMPLETION CODE (0 OR 4)
         SPACE
*        WORK STORAGE FOR EDITING THE TRACE LISTING
         SPACE
PIDFIELD DC    CL2' '
PROGID   DC    CL4' '                   MODULE NAME
         DC    CL4' '
PIDLGTH  EQU   *-PIDFIELD
CONVBUF  DS    D                        FOR CONVERTING SEMICOLON NR
         EJECT
         SPACE
*  DCB FOR SYSUT1
         SPACE
DCBUT1   DCB   DSORG=PS,MACRF=(R,W),DDNAME=SYSUT1,RECFM=F,NCP=1,       X
               EODAD=ENDUT1,EXLST=DCBEXIT,SYNAD=ERRUT1
         EJECT
         SPACE 3
********            FORMAT OF THE DATA SET TABLE
         SPACE 3
DDSTAB   DSECT
         SPACE
ADCB     DS    A
R        DS    A
RE       DS    A
NBB      DS    A
BB       DS    A
S        DS    H
P        DS    H
K        DS    HL1
Q        DS    HL1
DS       DS    2C
NOTEADR  DS    A
BL       DS    H
         DS     H
DSTLG    EQU   *-ADCB
         EJECT
         DCBD  DSORG=(BS),DEVD=(DA,TA)
         END
