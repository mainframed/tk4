PSUTDUMP CSECT
*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*
*   PSUTDUMP ** SUPER GENER UTILITY PROGRAM                         *
*                                                                   *
*   WE HAVE HAD A PROBLEM THAT HAS ONLY OCCURRED TWICE THIS YEAR    *
*   WHEN EXECUTING THIS UTILITY. IT GIVES A FALSE 'PSUTDUMP20'      *
*   SAYING THAT THE DD NUMBERING IS UNEVEN.  IT ONLY HAPPENS        *
*   DURING TAPE DRIVE ALLOCATION TIME WHEN A DRIVE IS NOT AVAILABLE *
*   AND THE OPERATOR REPLIES 'HOLD' AND 'WAIT',  WHEN THE ALLOCATION*
*   BECOMES AVAILABLE THIS UTILITY ABENDS.  ALL WE DO IS RESTART    *
*   WITHOUT ANY CHANGES AND IT RUNS OK.  IF ANYONE FINDS A FIX      *
*   BEFORE I DO PLEASE SEND IN A FIX AND A NOTE TO ME.              *
*   AGAIN THIS RARELY HAPPENS AND THIS UTILITY IS WIDELY USED WHERE *
*   I WORK, SO IT'S VERY RELIABLE                                   *
*                                                                   *
*                GEORGE RAMAS                                       *
*                250 MONTECITO AVENUE                               *
*                OKLAND, CALIFORNIA   94610                         *
*                                                                   *
*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*
*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*
*   PRODUCTION SERVICES UTILITY DUMP                                *
*                                                                   *
*   FOR INFORMATION CALL: GEORGE RAMAS                              *
*                         OAKLAND, CALIFORNIA 94610                 *
*                         (415)-763-0540                            *
*           STARTING 1990 (510)                                     *
*                                                                   *
*   THIS UTILITY IS SUPPORTED BY OPERATIONS SUPPORT SERVICES        *
*                                                                   *
*   ***IMPORTANT NOTE***                                            *
*                                                                   *
*   WHEN YOU ARE ASSEMBLING THIS SOURCE, YOU MUST HAVE THE IBM      *
*   MACRO 'IEFJFCBN' AND 'IEFJFCBX' IN YOUR MACLIB.  THESE ARE IBM  *
*   COPYWRITTEN MACROS AND CANNOT BE COPIED TO A NON IBM SHOP.      *
*   UNDER PENALTY OF THE BIG BLUE BOX.  ALSO NEED MACRO 'IEFJFCBE'  *
*                                                                   *
*   PSUTDUMP IS A SUPER IEBGENER. IT WILL ALLOW YOU TO HAVE         *
*   UP TO 99 INPUTS AND 99 OUTPUTS.  IT CAN BE USED FOR BACKUP      *
*   PURPOSES, PRINTING OR COPY DATA SETS OR ANY COMBINATION         *
*   TOGETHER. FOR RESTART PURPOSES, YOUR SHOULD KEEP YOUR PRINT     *
*   AND BACKUP STEPS SEPARATE.                                      *
*                                                                   *
*   PSUTDUMP WILL ACCEPT A PARM OF 'CHK'. IF PRESENT, THIS          *
*   PARM WILL PREVENT THE OPENING OF OUTPUT DATASETS IF THE         *
*   INPUT DATASET IS EMPTY.  DO NOT USE THIS PARAMETER WHEN         *
*   STACKING OUTPUT DATA SETS.  THIS IS TO BE USED ONLY WHEN        *
*   CREATING SEPARATE AND INDIVIDUAL OUTPUTXX TAPE DATA SETS.       *
*   WITH THE UNIT PARAMETER OF 'UNIT=(TAPE,,DEFER)' SHOULD BE USED. *
*                                                                   *
*   IF DCB INFORMATION IS NOT SPECIFIED FOR OUTPUTXX IT WILL BE     *
*   COPIED FROM INPUTXX.  ALL RECFM MUST BE IDENTICAL IN THE FIRST  *
*   CHARACTER (IE, 'F'BA , 'V'B, 'F'BM OR 'U' FOR ALL OUTPUTXX.     *
*   YOU CANNOT HAVE A FB GOING TO A VB OR VISA VERSA.               *
*                                                                   *
*   YOU CAN SHORTEN THOUGH AN LRECL ON YOUR INPUTTXX IF YOUR        *
*   SPECIFY THE SHORTEN LRECL ON THE DCB FOR OUTPUTXX.              *
*   THIS CAN BE USED ONLY WHEN A SMALLER PORTION OF A RECORD        *
*   INSTEAD THE ENTIRE LRECL.                                       *
*                                                                   *
*   THIS PROGRAM WILL ALSO DISPLAY IN YOUR SYSOUT SECTION AT THE    *
*   END OF YOUR LISTING THE FOLLOWING INFORMATION:                  *
*                                                                   *
*   EXECUTING JOB NAME                                              *
*   PROC STEP                                                       *
*   JOB STEP                                                        *
*   DDNAME (INPUTXX OUTPUTXX)                                       *
*   INPUTXX RECORD COUNT (SHOWS SEPARATE RECORD COUNTS FOR ALL      *
*                         CANCATENATED DATA SETS) DISK OR TAPE(S)   *
*                                                                   *
*   OUTPUTXX RECORD COUNT (WILL DISPLAY A SEPARATE RECORD COUNT     *
*                          IF OUTPUT IS TAPE, THEN A FINAL TOTAL)   *
*                                                                   *
*   RECFM-LRECL-BLKSIZE FOR INPUTXX AND OUTPUTXX DD                 *
*                                                                   *
*   WHEN MULTIPLE OUTPUT FILES ARE CREATED (REEL 1, 2, 3),          *
*   RECORDS COUNTS FOR EACH SEPARATE TAPE WILL BE DISPLAYED.        *
*   THIS WILL SHOW OUTPUTXX STATISTICS FOR UP TO 20 OUTPUT TAPES    *
*   AND A GRAND TOTAL FOR THE OUTPUT FILE WILL SHOW A FINAL TOTAL   *
*   NUMBER OF RECORDS TOTALLY WRITTEN TO YOUR OUTPUT DD.            *
*                                                                   *
*   USE THE FOLLOWING CODING RULES TO CREATE YOUR JCL.              *
*                                                                   *
*   WHEN DCB IS NOT SPECIFIED, IT WILL BE COPIED FROM INPUT         *
*                                                                   *
*     USE WHEN CREATING BACKUP FILES                                *
*                                                                   *
*     //BACKUP  EXEC PGM=PSUTDUMP                                   *
*     //*                                                           *
*     //INPUT01    DD  DSN=FNBP.TRAN1025.CHECKING,                  *
*     //               DISP=OLD                                     *
*     //*                                                           *
*     //INPUT02    DD  DSN=FNBP.DEPS2510.CHECKING,                  *
*     //               DISP=OLD                                     *
*                                                                   *
*     //OUTPUT01   DD  DSN=FNBP.BKUP4505.CHECKING(+1),              *
*     //               DISP=(,CATLG,DELETE),                        *
*     //               UNIT=TAPE,                                   *
*     //               VOL=(,RETAIN),                               *
*     //               LABEL=(1,SL,RETPD=30),                       *
*     //               DCB=(FNBDSCB,RECFM=FB,LRECL=80,BLKSIZE=9440) *
*     //*                                                           *
*     //OUTPUT02   DD  DSN=FNBP.DEPS4504.CHECKING,                  *
*     //               DISP=(,CATLG,DELETE),                        *
*     //               UNIT=AFF=OUTPUT01,                           *
*     //               VOL=REF=*.OUTPUT01,                          *
*     //               LABEL=(2,SL,RETPD=30),                       *
*     //               DCB=(FNBDSCB,RECFM=FB,LRECL=80,BLKSIZE=9440) *
*     //*                                                           *
*     //SYSOUT     DD  SYSOUT=*                                     *
*     //SYSUDUMP   DD  DUMMY   **USE ONLY WHEN NECESSARY**          *
*                                                                   *
*      THIS STEP WILL CREATE AN OUTPUT ONLY IF THERE IS INPUT DATA. *
*      DO NOT STACK FILES WHEN USING PARM VALUE, LABEL ERRORS MAY   *
*      OCCUR IF DATA IS MISSING BETWEEN LABEL FILES.                *
*                                                                   *
*     //CHECK   EXEC PGM=PSUTDUMP,PARM='CHK'                        *
*     //*                                                           *
*     //INPUT01    DD  DSN=FNBP.TRAN1025.CHECKING,                  *
*     //               DISP=OLD                                     *
*     //*                                                           *
*     //INPUT02    DD  DSN=FNBP.DEPS2510.CHECKING,                  *
*     //               DISP=OLD                                     *
*                                                                   *
*     //OUTPUT01   DD  DSN=FNBP.BKUP6505.SAVINGS(+1),               *
*     //               DISP=(,CATLG,DELETE),                        *
*     //               UNIT=(TAPE80,,DEFER),                        *
*     //               LABEL=(1,SL,RETPD=30),                       *
*     //               DCB=(FNBDSCB,RECFM=FB,LRECL=80,BLKSIZE=9440) *
*     //*                                                           *
*     //OUTPUT02   DD  DSN=FNBP.DEPS4504.SLIPS(+1),                 *
*     //               DISP=(,CATLG,DELETE),                        *
*     //               UNIT=(TAPE80,,DEFER),                        *
*     //               LABEL=(1,SL,RETPD=30),                       *
*     //               DCB=(FNBDSCB,RECFM=FB,LRECL=80,BLKSIZE=9440) *
*     //*                                                           *
*     //SYSOUT     DD  SYSOUT=*                                     *
*     //SYSUDUMP   DD  DUMMY   **USE ONLY WHEN NECESSARY**          *
*                                                                   *
*     USE WHEN COPYING INPUT DATA TO DISK (TAPE AND DISK CAN BE     *
*                                          MIXED)                   *
*                                                                   *
*     //COPYDSK EXEC PGM=PSUTDUMP                                   *
*     //*                                                           *
*     //INPUT01    DD  DSN=FNBP.HOSP5015.PATIENTS,                  *
*     //               DISP=OLD                                     *
*     //*                                                           *
*     //INPUT02    DD  DSN=FNBP.PAYM6025.LATE,                      *
*     //               DISP=OLD                                     *
*                                                                   *
*     //OUTPUT01   DD  DSN=FNBP.HOSP5015.PATIENTS(+1),              *
*     //               DISP=(,CATLG,DELETE),                        *
*     //               UNIT=SYSDA,                                  *
*     //               SPACE=(TRK,(3,1),RLSE),                      *
*     //               DCB=(FNBDSCB,RECFM=FB,LRECL=80,BLKSIZE=9440) *
*     //*                                                           *
*     //OUTPUT02   DD  DSN=FNBP.PAYM6025.LATE(+1),                  *
*     //               DISP=(,CATLG,DELETE),                        *
*     //               UNIT=SYSDA,                                  *
*     //               SPACE=(TRK,(3,1),RLSE),                      *
*     //               DCB=(FNBDSCB,RECFM=FB,LRECL=80,BLKSIZE=9440) *
*     //*                                                           *
*     //SYSOUT     DD  SYSOUT=*                                     *
*     //SYSUDUMP   DD  DUMMY   **USE ONLY WHEN NECESSARY**          *
*                                                                   *
*                                                                   *
*     USE WHEN SENDING DATA TO PRINT                                *
*                                                                   *
*     //PRINT1 EXEC PGM=PSUTDUMP                                    *
*     //*                                                           *
*     //INPUT01    DD  DSN=FNBP.CHEK3005.REGISTER,                  *
*     //               DISP=OLD                                     *
*     //*                                                           *
*     //INPUT02    DD  DSN=FNBP.HOSP3005.PATIENTS,                  *
*     //               DISP=OLD                                     *
*     //*                                                           *
*     //INPUT03    DD  DSN=FNBP.BANK3005.LOANS,                     *
*     //               DISP=OLD                                     *
*     //*                                                           *
*     //OUTPUT01   DD  SYSOUT=(C,,8011),                            *
*     //               DCB=BLKSIZE=133                              *
*     //*                                                           *
*     //OUTPUT02   DD  SYSOUT=(C,,8011),                            *
*     //               DCB=BLKSIZE=133                              *
*     //*                                                           *
*     //OUTPUT03   DD  SYSOUT=(C,,8011),                            *
*     //               DCB=BLKSIZE=133                              *
*                                                                   *
* >>OR //   DCB=(RECFM=FBA,LRECL=133,BLKSIZE=9310)                  *
*                                                                   *
*     //SYSOUT     DD  SYSOUT=*                                     *
*     //SYSUDUMP   DD  DUMMY   **USE ONLY WHEN NECESSARY**          *
*                                                                   *
*                                                                   *
*      PSUTDUMP ERROR MESSAGE:                                      *
*                                                                   *
*      PSUTDUMP10 ** NUMBERING SEQUENCE IS NOT CORRECT FOR INPUTXX  *
*                     AND OUTPUTXX CHECK NUMBERING OR SPELLING      *
*                                                                   *
*      PSUTDUMP20 ** YOU HAVE DUPLICATE DD NUMBERS IN YOUR INPUTXX  *
*                     OR OUTPUTXX STATEMENTS                        *
*                                                                   *
*      PSUTDUMP30 ** ARE THERE EQUAL NUMBERING DD STATEMENTS FOR    *
*                     INPUTXX AND OUTPUTXX OR MISSPELLED DD         *
*                     STATEMENTS.                                   *
*                                                                   *
*      PSUTDUMP40 ** LRECL SPECIFIED ON OUTPUT DOES NOT MATCH       *
*                      INPUT DCB                                    *
*                                                                   *
*      PSUTDUMP60 ** INVALID PARM VALUE SPECIFIED                   *
*                                                                   *
*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*
*        SOURCE MODIFICATION ON 02/07/80 TO ALLOW FOR INPUT(TAPE)
*          TO OUTPUT(DASD,UNIT RECORD, OR TAPE)
*
*    SOURCE MODIFICATION ON 12/13/88 TO DISPLAY RECORD COUNTS
*    SOURCE MODIFICATION ON 05/08/89 TO COPY DCB FROM INPUT TO OUTPUT
*
*
*        REGISTER ASSIGNMENT
*        0 - STANDARD LINKAGE
*        1 - STANDARD LINKAGE
*        2 - TRT MAY DESTROY THE CONTENTS OF THIS REG
*        3 - INITIALIZATION AND WORKINK REG
*        4 - "               "    "      "
*        5 - INPUT DCB
*        6 - OUTPUT DCB
*        7 - OUTPUT DD TABLE
*        8 - INPUT DD TABLE
*        9 -
*       10 -
*       11 - FIRST BASE
*       12 - SECOND BASE
*
*
         USING  IHADCB,5
*
         PRINT NOGEN
         YREGS
         STM   R14,12,12(13)       SAVE CALLERS REGS.
         BALR  R11,0               LOAD BASE REG.
         USING *,11                ESTABLISH ADDRESSABILITY.
         USING *+4095,12           ESTABLISH ADDRESSABILITY.
         LA    R12,4095(11)
         ST    R13,SAVEAREA+4      CHAIN SAVE AREAS.
         LR    R15,13                "    "     "
         LA    R13,SAVEAREA          "    "     "
         ST    R13,8(15)             "    "     "
         BAL   R10,SETPARM
         LA    R8,INTABLE          LOAD ADDR OF INPUT DD TABLE.
         LA    R7,OUTABLE          LOAD ADDR OF OUTPUT DD TABLE.
         LA    R5,INPUT            LOAD ADDR OF INPUT DCB.
         LA    R6,OUTPUT           LOAD ADDR OF OUTPUT DCB.
         L     R3,16               -> TO CVT.
         L     R3,0(R3)            -> TO TCB ->'R IN CVT.
         L     R3,4(R3)            -> TO TCB.
         L     R3,12(R3)           -> TO TIOT.
         ST    R3,TIOTPTR          -> TO TIOT.
*
         BAL   R10,OPENSOUT
         BAL   R10,DSPTITLE
*
         LA    R4,24               SO NEXT INST WILL -> TO DD ENTRY.
SCAN     LA    R3,0(R4,R3)         -> TO NEXT OR FIRST DD ENTRY.
         LTR   R4,R4               SET COND CODE.
         BZ    SORTIT              ALL DD'S CHECKED - GO SORT THEM.
         IC    R4,0(R3)            NEXT TIME WILL -> TO NEXT ENTRY.
         CLC   4(5,R3),DDNAME(R5)  IS IT AN INPUT DD ?
         BNE   SCAN2               NO - GO SEE IF IT'S AN OUTPUT DD.
         CLI   11(R3),C' '         INPUT DD NAME LENGTH OF 7 ?
         BNE   SCAN                NO GO GET NEXT DD ENTRY.
         TRT   9(2,R3),NUMTAB      IS INPUT DD NUMBER NUMERIC ?
         BC    R7,SCAN             NO GO GET NEXT DD ENTRY.
         MVC   0(2,R8),9(R3)       YES PUT IT IN THE INPUT TABLE.
         LA    R8,2(R8)            -> TO NEXT SPACE IN INPUT DD TABLE.
         B     SCAN                GO GET NEXT DD ENTRY.
SCAN2    CLC   4(6,R3),DDNAME(R6)  IS IT AN OUTPUT DD ?
         BNE   SCAN                NO GO GET NEXT DD ENTRY.
         TRT   10(2,R3),NUMTAB     IS OUTPUT DD NUMBER NUMERIC ?
         BC    R7,SCAN             NO GO GET NEXT DD ENTRY.
         MVC   0(2,R7),10(R3)      YES PUT IT IN THE OUTPUT DD TABLE.
         LA    R7,2(R7)            -> TO NEXT SPACE IN OUTPUT DD TABLE.
         B     SCAN                GO GET NEXT DD ENTRY.
*********************************************************************
*
SORTIT   SR    R3,3                ZERO IN REG 3.
         LA    R2,INTABLE          ADDR OF INPUT DD TABLE IN REG 2.
         SH    R8,=H'2'            -> REG 8 TO LAST ENTRY IN TABLE.
         LR    R4,R2               SAVE ->'R TO 1ST ENTRY IN TABLE.
         BAL   R10,CHECK           GO SORT INPUT TABLE.
         SR    R3,R3               RESET REG 3 TO ZERO.
         LA    R2,OUTABLE          ADDR OF OUTPUT DD TABEL IN REG 2.
         LR    R8,R7               ADDR OF LAST ENTRY NOT USED OF
*                                  OF OUTPUT DD TABLE FROM REG 7 - 8.
         SH    R8,=H'2'            -> REG 8 TO LAST ENTRY IN TABLE.
         LR    R4,R2               SAVE ->'R TO 1ST ENTRY IN TABLE.
         BAL   R10,CHECK           GO SORT OUTPUT DD TABLE.
         CLC   INTABLE,OUTABLE     IS THERE AN INPUT DD FOR EACH OUTPUT
*                                  DD AND CONVERSLY.
         BE    DOIT                YES THEN CONTINUE PROCESSING.
        WTO    '*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*',  X
               'PSUTDUMP30 DD NUMBERING IS UNEQUAL, CHECK DD  ',       X
               '           NUMBERING, POSSIBLE DUPLICATE NUMBERS',     X
               '           OR THERE IS NOT A ONE FOR ONE NUMBERING',   X
               '*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*',  X
               ROUTCDE=(2)
         ABEND 30,DUMP,STEP          NO THEN ABEND WITH USER ABEND 30.
DOIT     EQU   *
         MVC   DDNAME+5(2,5),0(4)  SET UP FIRST DD TO BE DUMPED.
         MVC   DDNAME+6(2,6),0(4)  SET UP FIRST DD TO BE DUMPED TO.
RUN      DS    0H
         MVC   DDNAME+5(2,5),0(4)  SET UP  DD TO BE DUMPED.
         MVC   DDNAME+6(2,6),0(4)  SET UP  DD TO BE DUMPED TO.
*
         BAL   R10,INITCTR
         OPEN  (INPUT,(INPUT))
*
         RDJFCB (INPUT)          GET INFO FOR 1ST FILE
         MVC   INJFCB,INFMJFCB
         MVC   IRECFM,JFCRECFM
         MVC   ILRECL,JFCLRECL
         MVC   IBLKSI,JFCBLKSI
RDJFOUT  DS    0H
         RDJFCB (OUTPUT)
         MVC   ORECFM,JFCRECFM
         MVC   OLRECL,JFCLRECL
         MVC   OBLKSI,JFCBLKSI
         CLC   ORECFM,IRECFM      OUTPUT RECFM SAME AS INPUT?
         BE    SAME01
         CLI   ORECFM,B'0'        RECFM UNSPECIFIED?
         BE    DUPRECFM           YES
*
*   COMPARE HI 2 BITS
*
         MVC   IRECFMHI,IRECFM
         NI    IRECFMHI,B'11000000'
         MVC   ORECFMHI,ORECFM
         NI    ORECFMHI,B'11000000'
         CLC   IRECFMHI,ORECFMHI  FIXED, VAR, UNDEF SAME?
         BE    SAME01             YES, LEAVE ALONE
        WTO    '*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*',  X
               'PSUTDUMP40 RECFM INCOMPATIBLE                 ',       X
               '*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*',  X
               ROUTCDE=(2)
         ABEND 40,DUMP,STEP          NO THEN ABEND WITH USER ABEND 40.
DUPRECFM DS    0H
         MVC   JFCRECFM,IRECFM    FORCE SAME AS INPUT
         MVC   ORECFM,JFCRECFM
SAME01   DS    0H
         CLC   JFCLRECL,=H'0'     OUTPUT LRECL UNSPECIFIED?
         BNE   SAME02
         MVC   JFCLRECL,ILRECL    YES, FORCE SAME AS INPUT
         MVC   OLRECL,JFCLRECL
SAME02   DS    0H
         CLC   JFCBLKSI,=H'0'     OUTPUT BLKSI UNSPECIFIED?
         BNE   SAME03
         MVC   JFCBLKSI,IBLKSI    YES, FORCE SAME AS INPUT
         MVC   OBLKSI,JFCBLKSI
SAME03   DS    0H
         MVC   OUTJFCB,INFMJFCB   SAVE OUTPUT JFCB
         BAL   R14,OPFORMAT
         MVC   OPVOL,=C'*NONE*'
         MVC   INFMJFCB(176),INJFCB RESTORE JFCB FROM INPUT
*
GET      GET   INPUT               READ INPUT RECORD.
         ST    R1,IPRCD
*
CHKDCB   DS    0H
         CLI   DCBSW,C'2'          TAKEN DCB EXIT?
         BNE   CHKOPEN             NO
         MVI   DCBSW,C'1'          RESET
         BAL   R10,DSPIPCNT        DISPLAY INPUT COUNTS
         RDJFCB (INPUT)            GET INFO FOR NEXT FILE
         B     GET                 REDO LAST READ
*
CHKOPEN  DS    0H
         CLI   OPENSW,C'Y'         IS OUTPUT OPEN?
         BE    CHKEOV
*
         MVI   OPENSW,C'Y'
         MVC   INFMJFCB(176),OUTJFCB
         OPEN  (OUTPUT,(OUTPUT)),TYPE=J
         RDJFCB (OUTPUT)         GET INFO FOR OUTPUT FILE
         BAL   R14,OPFORMAT      FORMAT OUTPUT JFCB INFO
         MVC   INFMJFCB(176),INJFCB RESTORE INPUT JFCB
*
CHKEOV   DS    0H
         CLI   EOVSW,C'Y'          VOLUME CHANGE?
         BNE   PUT                 NO
         MVI   EOVSW,C'N'          RESET
         BAL   R10,DSPIPCNT        DISPLAY INPUT COUNTS
         BAL   R10,INCRVOL         POINT TO NEXT VOL SER
*
PUT      DS    0H
         L     R3,IPRCD
         TM    ORECFM,JFCVAR       IS OUTPUT VARIABLE?
         BZ    PUT05               NO
         CLC   0(2,R3),OLRECL      IS LRECL < MAX?
         BNH   PUT05               YES
         MVC   0(2,R3),OLRECL      NO, TRUNCATE
PUT05    DS    0H
         PUT   OUTPUT,(R3)         WRITE RECORD
INCRCTR  DS    0H
         AP    IRCDCTR,=P'1'       INCR INPUT  COUNTER
         AP    ORCDCTR,=P'1'       INCR OUTPUT COUNTER
         B     GET                 GO GET ANOTHER ONE.
IPRCD    DS    F                   ADDRESS OF INPUT RECORD
IRECFM   DS    B                   INPUT RECFM
IRECFMHI DS    B                   INPUT RECFM HI 2 BITS
ILRECL   DS    H                   INPUT LRECL
IBLKSI   DS    H                   INPUT BLKSIZE
ORECFM   DS    B                   OUTPUT RECFM
ORECFMHI DS    B                   OUPUT RECFM HI 2 BITS
OLRECL   DS    H                   OUTPUT LRECL
OBLKSI   DS    H                   OUTPUT BLKSIZE
*******************************************************************
*
EODAD    DS    0H
         BAL   R10,DSPIPCNT
         CLOSE (INPUT)
         CLI   OPENSW,C'Y'   IS OUTPUT FILE OPEN?
         BE    CLOSEOP
         CLI   OSPARM,C'C'   SHOULD IT BE?
         BE    FREEPOOL      NO, 'CHK' PARM PRESENT
         MVI   OPENSW,C'Y'
         MVC   INFMJFCB(176),OUTJFCB  RESTORE OUTPUT JFCB
         OPEN  (OUTPUT,(OUTPUT)),TYPE=J
         RDJFCB (OUTPUT)         GET INFO FOR OUTPUT FILE
         BAL   R14,OPFORMAT      FORMAT OUTPUT JFCB INFO
CLOSEOP  DS    0H
         CLOSE (OUTPUT)
         FREEPOOL OUTPUT
FREEPOOL DS    0H
         BAL   R10,DSPOPCNT
         FREEPOOL INPUT
         LA    R4,2(R4)       POINT TO NEXT ENTRY IN TABLE.
         CR    R4,R7          AT END OF TABLE ?
         BL    RUN            NO GO DUMP NEXT FILE.
*
*                 E O J
*
         CLOSE SYSOUT
         L     R13,SAVEAREA+4 YES
         LM    R14,12,12(13)  RETURN
         SR    R15,15         TO
         BR    14             CALLER
********************************************************************
*
SORT     LA    R2,2(2)        INCR TO NEXT 2 ENTRIES IN TABLE.
         USING SORTWORK,2
CHECK    CR    R2,R8          AT END OF UNSORTED TABLE ?
         BE    TABLEND        YES GO SEE IF WE'RE DONE.
         BL    COMPARE        NO CHECK SEQ.
         WTO   '*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*',      X
               'PSUTDUMP10 NUMBERING SEQUENCE NOT CORRECT, CHECK',     X
               '           NUMBERING SEQUENCE OR DD NAME SPELLING',    X
               '*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*',      X
               ROUTCDE=(2)
         ABEND 10,DUMP,STEP   DD STATMENT MISSING FOR INPUT OR OUTPUT.
COMPARE  CLC   LOW,NEXT       NO ARE THESE 2 ITEMS IN SEQ ?
         BL    SORT           YES GO TO NEXT ONE.
         BH    SWAP           NOT IN SEQ GO SWAP THEM.
        WTO    '*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*',  X
               'PSUTDUMP20   DUPLICATE INPUT OR OUTPUT DD NUMBERING',  X
               '           CHECK INPUT AND OUTPUT SEQUENCE NUMBERS',   X
               '*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*',  X
               ROUTCDE=(2)
*                             CANT HAVE 2 DD NAMES THE SAME
         ABEND 20,DUMP,STEP   WHAT ARE YOU TRYING TO DO ???
SWAP     LH    R3,LOW         SAVE LOW OUT OF SEQ ITEM IN REG 3.
         MVC   LOW,NEXT       MOVE LOW ITEM DOWN IN TABLE.
         STH   R3,NEXT        PUT HIGH ITEM WHERE LOW ITEM WAS.
         B     SORT           GO TO CHECK NEXT ONE.
TABLEND  CH    R3,=H'0'       IS WHOLE TABLE IN SEQ ?
         BER   10             YES RETURN
         SH    R8,=H'2'       NO REDUCE SEARCH TABLE SIZE.
         LR    R2,4           RESET REG 2 TO -> TO TOP OF TABLE.
         SR    R3,3           RESET REG 3 TO ZERO.
         B     CHECK          GO BACK THROUGH AGAIN.
*
IPDCBEX  DS    0H
         STM   R0,R15,DCBSAVE      SAVE LINKAGE REGISTER
         LA    R13,SAVEAREA
*
         CLI   DCBSW,C'0'          1ST TIME?
         BNE   SETRERD             NO, SET REREAD SW
         OI    DCBOFLGS,X'08'      SET FOR UNLIKE ATTRIBUTES
         MVI   DCBSW,C'1'          SET TO NOT 1ST TIME
         B     DCBEXIT
SETRERD  DS    0H
         MVI   DCBSW,C'2'          SET TO REDO LAST READ
         B     DCBEXIT
*
DCBEXIT  DS    0H
         LM    R0,R15,DCBSAVE
         BR    14
DCBSAVE  DS    9D
DCBSW    DC    C'0'
OPENSW   DC    C'N'
INJFCB   DS    CL176
OUTJFCB  DS    CL176
*
IPEOVEX  DS    0H
         STM   R0,R15,EOVSAVE      SAVE LINKAGE REGISTER
         LA    R13,SAVEAREA
*
         MVI   EOVSW,C'Y'          INDICATE NEW VOLUME
RDJ02    DS    0H
*
EOVEXIT  DS    0H
         LM    R0,R15,EOVSAVE
         BR    14
EOVSAVE  DS    9D
EOVSW    DC    C'N'
*
INCRVOL  DS    0H
         ST    R10,INCS10       SAVE LINKAGE REGISTER
*
         L     R10,IVOLPTR
         LA    R10,6(R10)          INCREMENT VOLSER POINTER
         ST    R10,IVOLPTR
         L     R10,INCS10
         BR    R10
INCS10   DS    F
IVOLPTR  DS    F
*
OPEOVEX  DS    0H
         STM   R0,R15,OEOVSAVE     SAVE LINKAGE REGISTER
         LA    R13,SAVEAREA
*
         CLC   OVOLCTR,=F'21'      LUMP ALL VOLS > 20 INTO 21
         BNL   MAXOVOL
         L     R10,OVOLCTR
         LA    R10,1(R10)          INCREMENT VOLSER COUNTER
         ST    R10,OVOLCTR         SAVE VOL COUNTER
         L     R10,OCNTPTR         GET POINTER TO COUNT TABLE
         ZAP   0(8,R10),ORCDCTR    STORE LAST VOL'S RECORD COUNT
         AP    OTOTCNT,ORCDCTR     ADD TO TOTAL COUNT
         ZAP   ORCDCTR,=P'0'
         LA    R10,8(R10)          POINT TO NEXT COUNT ENTRY
         ST    R10,OCNTPTR
MAXOVOL  DS    0H
*
OEOVEXIT DS    0H
         LM    R0,R15,OEOVSAVE
         BR    14
OEOVSAVE DS    9D
OVOLCTR  DS    F                 NUMBER OF O/P VOLUMES
OCNTPTR  DS    F                 NBR OF RECORD COUNTS IN OCNTTBL
OTOTCNT  DS    PL8'0'
OCNTTBL  DS    21PL8             MAX OF 21 VOLUMES
*
DSPIPCNT DS    0H
         STM   R2,R10,DSPSVA
*
         MVC   ZSUPPWK,ZSUPP
         ED    ZSUPPWK,IRCDCTR
         MVC   IPCNT,ZSUPP8
         ZAP   IRCDCTR,=P'0'
*
         CLC   IVOLPTR,=F'120'     MORE THAN 20 VOLUMES?
         BL    CHK5VOLS            NO
         MVC   IPVOL,=6C'*'        YES
         B     MOVERECL
*
CHK5VOLS DS    0H
         CLC   IVOLPTR,=F'30'     MORE THAN 5 VOLUMES?
         BL    MOVEVOL            NO
* GET VOL SER FROM JFCB EXTENSION
         MVC   JFCBXPTR+1(3),JFCBEXAD
         L     R10,JFCBXPTR
         LA    R10,20(R10)        POINT TO VOL SER LIST
         A     R10,IVOLPTR        ADD VOL POINTER
         S     R10,=F'30'         SUBTRACT LENGTH OF 1ST 5 VOLS
         MVC   IPVOL,0(R10)
         B     MOVERECL
*
MOVEVOL  DS    0H
         LA    R10,JFCBVOLS
         A     R10,IVOLPTR
         MVC   IPVOL,0(R10)
*
MOVERECL DS    0H
         LA    R2,0                SET R2 TO ZERO
         LH    R2,JFCLRECL         LOAD LRECL
         CVD   R2,CVDWRK
         MVC   ZSUPPWK,ZSUPP
         ED    ZSUPPWK,CVDWRK
         MVC   IPLRECL,ZSUPP5
*
         LA    R2,0                SET R2 TO ZERO
         LH    R2,JFCBLKSI         LOAD BLKSIZE
         CVD   R2,CVDWRK
         MVC   ZSUPPWK,ZSUPP
         ED    ZSUPPWK,CVDWRK
         MVC   IPBLK,ZSUPP7
*
         MVC   RECFMWK,JFCRECFM
         BAL   R10,SETRECFM
         MVC   IPRECFM,RECFMSET
*
         MVC   IPDSN,JFCBDSNM
*
         LA    R0,IPMSG
         BAL   R10,WRITSOUT
         MVC   IPMSG,=133C' '
         ZAP   IRCDCTR,=P'0'
*
         LM    R2,R10,DSPSVA
         BR    10
*
JFCBXPTR DC    F'0'
*
OPFORMAT DS    0H
         STM   R2,R15,FORMSA
*
         LA    R2,0                SET R2 TO ZERO
         LH    R2,JFCLRECL         LOAD LRECL
         CVD   R2,CVDWRK
         MVC   ZSUPPWK,ZSUPP
         ED    ZSUPPWK,CVDWRK
         MVC   OPLRECL,ZSUPP5
*
         LA    R2,0                SET R2 TO ZERO
         LH    R2,JFCBLKSI         LOAD BLKSIZE
         CVD   R2,CVDWRK
         MVC   ZSUPPWK,ZSUPP
         ED    ZSUPPWK,CVDWRK
         MVC   OPBLK,ZSUPP7
*
         MVC   RECFMWK,JFCRECFM
         BAL   R10,SETRECFM
         MVC   OPRECFM,RECFMSET
*
         MVC   OPDSN,JFCBDSNM
*
         LM    R2,R15,FORMSA
         BR    14
*
FORMSA   DS    14F
*
DSPOPCNT DS    0H
         STM   R2,R10,DSPSVA
*
         RDJFCB (OUTPUT)         GET INFO FOR OUTPUT FILE
         L     R10,OCNTPTR         GET POINTER TO COUNT TABLE
         ZAP   0(8,R10),ORCDCTR    STORE LAST VOL'S RECORD COUNT
         AP    OTOTCNT,ORCDCTR     ADD TO TOTAL COUNT
*
         LA    R7,0                VOL COUNTER
         LA    R8,JFCBVOLS         VOLUME LIST
         LA    R9,OCNTTBL          TABLE OF COUNTS BY VOLSER
*
PUT1VOL  DS    0H
         MVC   ZSUPPWK,ZSUPP
         ED    ZSUPPWK,0(R9)       RECORD COUNT
         MVC   OPCNT,ZSUPP8
         CLI   OPENSW,C'N'         WAS OUTPUT OPENED?
         BE    UNOPENED
         C     R7,=F'20'           PAST VOL NUMBER 20?
         BNL   OPVOL21
         C     R7,=F'5'            PAST VOL NUMBER 5?
         BNL   OPVOL6
         MVC   OPVOL,0(R8)         VOL SER
         B     PUTOPMSG
OPVOL6   DS    0H
* GET VOL SER FROM JFCB EXTENSION
         MVC   JFCBXPTR+1(3),JFCBEXAD
         L     R10,JFCBXPTR
         LA    R10,20(R10)        POINT TO VOL SER LIST
         AR    R10,R8             ADD VOL POINTER
         S     R10,=A(JFCBVOLS+30) SUBTRACT LENGTH OF 1ST 5 VOLS
         MVC   OPVOL,0(R10)
         B     PUTOPMSG
OPVOL21  DS    0H
         MVC   OPVOL,=C'*MORE*'
         B     PUTOPMSG
UNOPENED DS    0H
         MVC   OPVOL,=C'*NONE*'
         B     PUTOPMSG
*
PUTOPMSG DS    0H
         LA    R0,OPMSG
         BAL   R10,WRITSOUT
         MVC   OPDDGRP,=9C' '
         C     R7,OVOLCTR
         BE    CHKOPTOT
         LA    R7,1(R7)              NEXT VOL NUMBER
         LA    R8,6(R8)              NEXT VOL SER
         LA    R9,8(R9)              NEXT RECORD COUNT
         B     PUT1VOL
CHKOPTOT DS    0H
         CLC   OVOLCTR,=F'0'
         BE    CLROPMSG
         MVC   OPMSG,=133C' '
         MVC   OPCNT,=8C'-'
         LA    R0,OPMSG
         BAL   R10,WRITSOUT
         MVC   ZSUPPWK,ZSUPP
         ED    ZSUPPWK,OTOTCNT     TOTAL RECORD COUNT
         MVC   OPCNT,ZSUPP8
         LA    R0,OPMSG
         BAL   R10,WRITSOUT
CLROPMSG DS    0H
         MVC   OPMSG,=133C' '
*
         LA    R0,=133C' '
         BAL   R10,WRITSOUT
*
         LM    R2,R10,DSPSVA
         BR    10
DSPSVA   DS    11F
TIOTWK   DS    H
*
FINDTIOT DS    0H
         ST    R10,FINDS10         SAVE LINKAGE REGISTER
*
         L     R3,TIOTPTR          ADDRESS OF TIOT
         LH    R4,TIOTWK           SO NEXT INST WILL -> TO DD ENTRY.
         LA    R3,0(R4,R3)         -> TO NEXT OR FIRST DD ENTRY.
*
         L     R10,FINDS10          RESTORE LINKAGE REGISTER
         BR    10
FINDS10  DS    F
*
SETRECFM DS    0H
         ST    R10,SETRS10         SAVE LINKAGE REGISTER
*
         MVC   RECFMSET,=CL5' '
         MVC   RECFMWK1,RECFMWK
         TM    RECFMWK1,B'10000000' FIXED?
         BNZ   FMFIX
         MVC   RECFMWK1,RECFMWK
         TM    RECFMWK1,B'01000000' VARIABLE?
         BNZ   FMVAR
FMUND    DS    0H
         MVI   RECFM1,C'U'
         B     CHKBLK
FMFIX    DS    0H
         MVI   RECFM1,C'F'
         B     CHKBLK
FMVAR    DS    0H
         MVI   RECFM1,C'V'
         B     CHKBLK
CHKBLK   DS    0H
         MVC   RECFMWK1,RECFMWK
         TM    RECFMWK1,B'00010000' BLOCKED?
         BZ    CHKASA
         MVI   RECFM2,C'B'
CHKASA   DS    0H
         MVC   RECFMWK1,RECFMWK
         TM    RECFMWK1,B'00000100' ASA?
         BNZ   FMASA
         MVC   RECFMWK1,RECFMWK
         TM    RECFMWK1,B'00000010' MACHINE?
         BNZ   FMMACH
         B     SETRECFX
FMASA    DS    0H
         MVI   RECFM3,C'A'
         B     SETRECFX
FMMACH   DS    0H
         MVI   RECFM3,C'M'
         B     SETRECFX
SETRECFX DS    0H
*
         L     R10,SETRS10          RESTORE LINKAGE REGISTER
         BR    10
SETRS10  DS    F
*
DSPTITLE DS    0H
         ST    R10,DSPTS10         SAVE LINKAGE REGISTER
         MVC   JOBNAME,0(R3)
         CLC   =C' ',16(R3)        IF JOBSTEP SPACE, NOT A PROC
         BE    NOTPROC
         MVC   PROCSTEP,8(R3)
         MVC   JOBSTEP,16(R3)
         B     DSPSTEP
*
NOTPROC  DS    0H
         MVC   PROCSTEP,=CL8'*NONE*'
         MVC   JOBSTEP,08(R3)
*
DSPSTEP  DS    0H
         LA    R0,TITLMSG
         BAL   R10,WRITSOUT
*
         LA    R0,=133C' '
         BAL   R10,WRITSOUT
*
         LA    R0,STEPMSG
         BAL   R10,WRITSOUT
*
         LA    R0,=133C' '
         BAL   R10,WRITSOUT
*
         LA    R0,HDGMSG1
         BAL   R10,WRITSOUT
*
         LA    R0,HDGMSG2
         BAL   R10,WRITSOUT
*
         L     R10,DSPTS10          RESTORE LINKAGE REGISTER
         BR    10
DSPTS10  DS    F
*
GETDSN   DS    0H                  POINT TO JFCB
         ST    R10,GETDS10         SAVE LINKAGE REGISTER
*
         MVC   JFCBADDR,=4X'00'
         MVC   JFCBADDR+1(3),X'0C'(R3)  MOVE TIOEJFCB
         L     R10,JFCBADDR
         MVC   JFCBDSN,16(R10)           MOVE DATASET NAME
*
         L     R10,GETDS10          RESTORE LINKAGE REGISTER
         BR    10
GETDS10  DS    F
JFCBADDR DS    F
JFCBDSN  DS    CL52
*
OPENSOUT DS    0H
         ST    R10,OPENS10         SAVE LINKAGE REGISTER
*
         OPEN  (SYSOUT,OUTPUT)        OPEN SYSOUT
         B      OPENEXIT
SOUTERR  WTO   'UNABLE TO OPEN SYSOUT - ABNORMAL TERMINATION'
         ABEND 60,DUMP,STEP
*
OPENEXIT DS    0H
         L     R10,OPENS10          RESTORE LINKAGE REGISTER
         BR    10
OPENS10  DS    F
*
SETPARM  DS    0H
         ST    R10,PARMS10         SAVE LINKAGE REGISTER
*
         MVI   OSPARM,C' '
         L     R10,0(R1)
         CLC   =H'0',0(R10)        IS PARM LENGTH = 0?
         BE    PARMEXIT
         CLC   =H'3',0(R10)        IS PARM LENGTH = 3?
         BNE   BADPARM
         CLC   =C'CHK',2(R10)
         BNE   BADPARM
         MVC   OSPARM,=C'C'
         MVC   TITLMODE,=C'(CHECK MODE)'
         B     PARMEXIT
BADPARM  DS    0H
        WTO    '*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*',  X
               'PSUTDUMP60 INVALID PARM VALUE SPECIFIED       ',       X
               '*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*',  X
               ROUTCDE=(2)
         ABEND 60,DUMP,STEP
*
PARMEXIT DS    0H
         L     R10,PARMS10          RESTORE LINKAGE REGISTER
         BR    R10
PARMS10  DS    F
OSPARM   DS    CL1
*
INITCTR  DS    0H
         ST    R10,INITS10         SAVE LINKAGE REGISTER
         MVI   OPENSW,C'N'         OUTPUT OPEN SWITCH
         ZAP   IRCDCTR,=P'0'       ZERO RECORD COUNTER
         ZAP   ORCDCTR,=P'0'       ZERO RECORD COUNTER
         ZAP   OTOTCNT,=P'0'       ZERO TOTAL COUNTER
         MVI   DCBSW,C'0'          SET TO 1ST TIME
         MVI   EOVSW,C'N'
         MVC   IVOLPTR,=F'0'
         MVC   OVOLCTR,=F'0'
         MVC   OCNTPTR,=A(OCNTTBL)
*
         MVC   IPDDNAM,DDNAME(R5)
         MVI   IPCOLON,C':'
         MVC   OPDDNAM,DDNAME(R6)
         MVI   OPCOLON,C':'
*
         L     R10,INITS10          RESTORE LINKAGE REGISTER
         BR    10
INITS10  DS    F
*
WRITSOUT DS     0H
         ST    R10,WRITS10
*
         PUT   SYSOUT
*
         L     R10,WRITS10
         BR    10
WRITS10  DS    F
*-------------------------------------------------
*
SAVEAREA DC    9D'0'
INTABLE  DC    CL200' '
OUTABLE  DC    CL200' '
*
NUMTAB   DS    0D
         DC    X'F00102030405060708090A0B0C0D0E0F'
         DC    X'101112131415161718191A1B1C1D1E1F'
         DC    X'202122232425262728292A2B2C2D2E2F'
         DC    X'303132333435363738393A3B3C3D3E3F'
         DC    X'404142434445464748494A4B4C4D4E4F'
         DC    X'505152535455565758595A5B5C5D5E5F'
         DC    X'606162636465666768696A6B6C6D6E6F'
         DC    X'707172737475767778797A7B7C7D7E7F'
         DC    X'808182838485868788898A8B8C8D8E8F'
         DC    X'909192939495969798999A9B9C9D9E9F'
         DC    X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'
         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'
         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'
         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'
         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'
         DC    X'00000000000000000000FAFBFCFDFEFF'
*
INPUT    DCB   DSORG=PS,MACRF=GL,DDNAME=INPUT,EODAD=EODAD,EXLST=IEXLST
OUTPUT   DCB   DSORG=PS,MACRF=PM,DDNAME=OUTPUT,EXLST=OEXLST
SYSOUT   DCB   DDNAME=SYSOUT,DSORG=PS,MACRF=PM,RECFM=FBA,              X
               LRECL=133,BLKSIZE=133
*
IEXLST   DS    0F
         DC    X'05',AL3(IPDCBEX)
         DC    X'06',AL3(IPEOVEX)
         DC    X'87',AL3(INFMJFCB)
*
OEXLST   DS    0F
         DC    X'06',AL3(OPEOVEX)
         DC    X'87',AL3(INFMJFCB)
*
*   FILE STATISTICS MESSAGES
*
DDLEN    EQU  9
CNTLEN   EQU  8
DSNLEN   EQU  44
VOLLEN   EQU  6
RECFMLEN EQU  5
LRECLLEN EQU  5
BLKLEN   EQU  5
*
DDCOL    EQU  2
CNTCOL   EQU  DDCOL+DDLEN+1
DSNCOL   EQU  CNTCOL+CNTLEN+1
VOLCOL   EQU  DSNCOL+DSNLEN+1
RECFMCOL EQU  VOLCOL+VOLLEN+1
LRECLCOL EQU  RECFMCOL+RECFMLEN+1
BLKCOL   EQU  LRECLCOL+LRECLLEN+1
*
IRCDCTR  DC    PL8'0'
ORCDCTR  DC    PL8'0'
TIOTPTR  DS    F                ADDRESS OF TIOT
RECFMWK  DS    CL1
RECFMWK1 DS    CL1
RECFMSET DS    0CL5
         DS    CL2
RECFM1   DS    CL1
RECFM2   DS    CL1
RECFM3   DS    CL1
*
CVDWRK   DS    D
ZSUPP    DC    C' ',13X'20',X'2120'
*
ZSUPPWK  DS    0CL16
         DS    CL8
ZSUPP8   DS    0CL8
         DS    CL1
ZSUPP7   DS    0CL7
         DS    CL2
ZSUPP5   DS    0CL5
         DS    CL2
ZSUPP3   DS    CL3
*
TITLMSG  EQU   *
         DC    C'1'
         DC    132C'-'
         ORG   TITLMSG+26
         DC    C'  P S U T D U M P  '
         DS    CL5
TITLMODE DS    CL12
         ORG
*
STEPMSG  DC    CL133' '
         ORG   STEPMSG+1
         DC    C'  JOB: '
JOBNAME  DS    CL8
         DC    C'  PROC STEP: '
PROCSTEP DS    CL8
         DC    C'  JOB STEP: '
JOBSTEP  DS    CL8
         ORG
*
HDGMSG1  DC    CL133' '
         ORG   HDGMSG1-1+DDCOL
         DC    CL10'  DDNAME'
         ORG   HDGMSG1-1+CNTCOL
         DC    CL09'   COUNT'
         ORG   HDGMSG1-1+DSNCOL
         DC    CL45'DSNAME'
         ORG   HDGMSG1-1+VOLCOL
         DC    CL06'VOLSER'
         ORG   HDGMSG1-1+RECFMCOL
         DC    CL06'RECFM'
         ORG   HDGMSG1-1+LRECLCOL
         DC    CL06'LRECL'
         ORG   HDGMSG1-1+BLKCOL
         DC    CL07'BLKSIZE'
         ORG
*
HDGMSG2  DC    CL133' '
         ORG   HDGMSG2-1+DDCOL
         DC    09C'-'
         ORG   HDGMSG2-1+CNTCOL
         DC    08C'-'
         ORG   HDGMSG2-1+DSNCOL
         DC    44C'-'
         ORG   HDGMSG2-1+VOLCOL
         DC    6C'-'
         ORG   HDGMSG2-1+RECFMCOL
         DC    05C'-'
         ORG   HDGMSG2-1+LRECLCOL
         DC    05C'-'
         ORG   HDGMSG2-1+BLKCOL
         DC    07C'-'
         ORG
*
IPMSG    DC    CL133' '
         ORG   IPMSG-1+DDCOL
         DS    CL1
IPDDNAM  DS    CL7
IPCOLON  DC    C':'
         ORG   IPMSG-1+CNTCOL
IPCNT    DS    CL8
         ORG   IPCNT+CNTLEN-1
IPSIGN   DS    CL1
         ORG   IPMSG-1+DSNCOL
IPDSN    DS    CL44
         ORG   IPMSG-1+VOLCOL
IPVOL    DS    CL6
         ORG   IPMSG-1+RECFMCOL
IPRECFM  DS    CL5
         ORG   IPMSG-1+LRECLCOL
IPLRECL  DS    CL5
         ORG   IPMSG-1+BLKCOL
IPBLK    DS    CL7
         ORG
*
OPMSG    DC    CL133' '
         ORG   OPMSG-1+DDCOL
OPDDGRP  DS    0CL9
OPDDNAM  DS    CL8
OPCOLON  DC    C':'
         ORG   OPMSG-1+CNTCOL
OPCNT    DS    CL8
         ORG   OPCNT+CNTLEN-1
OPSIGN   DS    CL1
         ORG   OPMSG-1+DSNCOL
OPDSN    DS    CL44
         ORG   OPMSG-1+VOLCOL
OPVOL    DS    CL6
         ORG   OPMSG-1+RECFMCOL
OPRECFM  DS    CL5
         ORG   OPMSG-1+LRECLCOL
OPLRECL  DS    CL5
         ORG   OPMSG-1+BLKCOL
OPBLK    DS    CL7
         ORG
*
         IEFJFCBN
*
         LTORG
*
*
SORTWORK DSECT
LOW      DS    CL2
NEXT     DS    CL2
         DSECT
DCBS     DCBD  DSORG=PS
LRECL    EQU   DCBLRECL-IHADCB
BLKSIZE  EQU   DCBBLKSI-IHADCB
RECFM    EQU   DCBRECFM-IHADCB
DDNAME   EQU   DCBDDNAM-IHADCB
TIOTOFF  EQU   DCBTIOT-IHADCB
         END
