//HPZ$FOR JOB ,ZBIEGIEN,MSGCLASS=W,CLASS=3
/*JOBPARM ROOM=3426
//A EXEC AGASMCL,LIBRARY='HPZ.TESTLIB(AMAZEING)'
//ASM.SYSIN DD *
AMAZEING START 0
* PROGRAM TO PRINT OUT A MAZE
         SAVE  (14,12),,AMAZEING&SYSDATE.&SYSTIME
         LR    R12,R15                 R12 BASE
         USING AMAZEING,R12
         ST    R13,SAVEAREA+4          SET UP DAVE AREA
         LR    R2,R13
         LA    R13,SAVEAREA
         ST    R13,8(R2)
         USING SAVEAREA,R13
         DROP  R12
         B     CONT
SAVEAREA DC    18F'0'
BASES    DC    A(SAVEAREA+4096)
         DC    A(SAVEAREA+8192)
         DC    A(SAVEAREA+12288)
CONT     LM    R10,R12,BASES           SET BASES
         USING SAVEAREA+4096,R10,R11,R12
*     CHECK PARM VALUES
         L     R1,0(R1)                GET ADDR OF PARMS
         LH    R2,0(R1)                GET LENGTH
         CH    R2,=H'11'               CHECK LENGTH
         BE    PARMOK
         CH    R2,=H'12'               CHECK LENGTH
         BNE   PARMERR
         MVI   SOLUTSW,C'Y'            SET SOLUTION SWITCH
PARMOK   LR    R3,R1                   SAVE R1
         TRT   2(11,R3),NUMERICT       CHECK FOR NUMERICS
         BNE   PARMERR
         LR    R1,R3                   RESTORE R1
         PACK  PACKWORK,2(2,R1)        PACK WIDTH
         CVB   R2,PACKWORK             AND CHECK
         C     R2,=F'0'                WIDTH GTR 0
         BE    PARMERR
         C     R2,=F'43'               WIDTH LE 43
         BH    PARMERR
         ST    R2,PARMW
         ST    R2,SEINIT+4
         LA    R2,1(R2)
         ST    R2,WIDTH
         LA    R2,1(R2)
         ST    R2,ROWLNGTH
         PACK  PACKWORK,4(3,R1)        PACK LENGTH
         CVB   R2,PACKWORK             AND CHECK
         C     R2,=F'0'                LENGTH GTR 0
         BE    PARMERR
         ST    R2,PARML
         LA    R2,1(R2)
         ST    R2,LENGTH
         PACK  PACKWORK,7(6,R1)        PACK RANDOM START
         CVB   R2,PACKWORK
         ST    R2,PARMR
         L     R2,ROWLNGTH
         MH    R2,LENGTH+2             CALCULATE BOTTOM ROW OFFSET
         ST    R2,BOTROW
         OPEN  (PRINTER,(OUTPUT))
*     INITIALIZE WORK TABLES
         L     R1,ROWLNGTH
         ST    R1,DOWN
         LCR   R1,R1
         ST    R1,UP
         L     R4,LENGTH
         LA    R4,1(R4)
         L     R3,WIDTH
         LA    R3,1(R3)
         MR    R2,R4                   WIDTH+2* LENGTH+2 IN R3
         LA    R2,TABLEST
         SR    R4,R4
         SR    R5,R5
         LR    R6,R3                   SAVE LENGTH
         MVCL  R2,R4                   ZERO TABLE
         LA    R2,TABLEST+1
         AR    R2,R6
         ST    R2,SETABLE              START END TABLE ADDRESS
         L     R3,LENGTH
LOOP     MVC   0(8,R2),SEINIT          MOVE INITIAL VALUE
         LA    R2,8(R2)
         BCT   R3,LOOP                 LOOP
*     BUILD GUARD BLOCKS  SIDES FIRST
         L     R2,LENGTH               TIMES
         LA    R2,1(R2)
         LA    R3,TABLEST              LEFT SIDE
         LR    R4,R3
         L     R5,WIDTH
         AR    R4,R5                   RIGHT SIDE
         LA    R5,1(R5)                SIZE OF ROW
LOOPBG1  MVI   0(R3),X'F8'             SET LEFT
         MVI   0(R4),X'F8'             SET RIGHT
         AR    R3,R5
         AR    R4,R5
         BCT   R2,LOOPBG1
*     NOW  DO TOP AND BOTTOM
         LR    R3,R5
*                                      R5 HAS COUNT
         M     R2,LENGTH
         LA    R2,TABLEST
         AR    R3,R2
LOOPBG2  MVI   0(R2),X'F0'             SET TOP
         MVI   0(R3),X'F0'             SET BOTTOM
         LA    R2,1(R2)
         LA    R3,1(R3)
         BCT   R5,LOOPBG2
*     GET STARTING POSITION, SAVE IT AS CHAIN ZERO
         BAL   R14,RANDOM              GET RANDOM # IN R1
         D     R0,PARMW                MOD W
         LR    R1,R0
         LA    R1,1(R1)                VALUE 1-W
         ST    R1,CHAINZ+4
         ST    R1,COL
         LA    R2,TABLEST
         LR    TBLS,R2
         AR    R2,R1
         OI    0(R2),X'04'             MARK DOWN
         A     R2,ROWLNGTH
         OI    0(R2),X'10'             MARK CHAIN 4
         MVC   ROW,ROWLNGTH
         L     R2,ROWLNGTH             SET UP TOP GUARD BOXES
         LR    R1,TBLS
         LR    R3,TBLS
         A     R3,COL
LOOPTOP  CR    R1,R3
         BH    ROFTOP
         BE    NEXTTOP
LOFTOP   OI    0(R1),X'01'             MARK RIGHT MOVE
         B     NEXTTOP
ROFTOP   OI    0(R1),X'02'             MARK LEFT MOVE
NEXTTOP  LA    R1,1(R1)
         BCT   R2,LOOPTOP
*     START MAKING THE SOLUTION, CHAIN 1
         MVC   PREV(8),CHAINZ
CHAINONE BAL   R14,PICKMOVE
         BAL   R14,DOMOVE
         CLC   BOTROW,ROW              AT BOTTOM ?
         BNE   CHAINONE                NO
*    SET NOPS TO BR
         OI    RULE2+1,X'F0'
         OI    RULE3+1,X'F0'
         OI    RULE4+1,X'F0'
         OI    RULE5+1,X'F0'
*     BUILD RANDOM CHAINS OFF OF MAIN CHAIN
         LA    R1,16
         ST    R1,LOOPCNT
FILLOOP  L     R7,CHAINZ               SET UP CHAINP
         A     R7,CHAINZ+4
         AR    R7,TBLS
         ST    R7,CHAINST
         SR    R7,R7                   SET UP CHAINY
         STC   R7,CHAINST+8
         LA    R7,CHAINST
         BAL   R14,FBCHAIN             FIND AND BUILD CHAIN
         L     R1,LOOPCNT
         LA    R1,16(R1)
         ST    R1,LOOPCNT
         C     R1,=F'224'              14*16
         BNE   FILLOOP
*     NOW FILL IN ALL THE UNUSED SQUARES
         L     R0,PARMW
         MH    R0,PARML+2
         ST    R0,LXW
FREECK   CLC   COUNT,LXW               SEE IF USE ALL SQUARES
         BE    PRINTOUT
         L     R5,SETABLE
         SR    R6,R6                   INITIALIZE
         S     R5,=F'8'
ROWCK    A     R6,ROWLNGTH             UP
         A     R5,=F'8'
         C     R6,BOTROW               SEE IF DONE
         BE    FREECK
         CLC   0(4,R5),=X'FFFFFFFF'    SEE IF ROW ALL USED
         BE    ROWCK
*     START SEARCHING A ROW
         MVC   SAVEE,4(R5)             SAVE END
         L     R4,0(R5)                GET START
         MVC   0(8,R5),=X'FFFFFFFFFFFFFFFF'
COLCK    BAL   R14,CONNECT             SEE IF UNUSED AND CONNECT
         LA    R4,1(R4)                UP COL
         C     R4,SAVEE                END COL ?
         BH    ROWCK                   YES
         B     COLCK                   NO
*     PRINT OUT THE MAZE
PRINTOUT LA    R2,TABLEST
         BAL   R14,PRINTBOT            PRINT BOTTOM OF GUARD BLOCK
         L     R7,PARML                LENGTH
PLOOP    A     R2,ROWLNGTH
         BAL   R14,PRINTMID            PRINT MIDDLE
         BAL   R14,PRINTBOT            PRINT BOTTOM
         BCT   R7,PLOOP
         CLOSE (PRINTER)               CLOSE
         L     R13,4(R13)              GET RETURN ADDRESS
         RETURN (14,12),RC=0           STOP RUN
PARMERR  L     R13,4(R13)              GET RETURN ADDRESS
         RETURN (14,12),RC=4           STOP RUN
*
*     START OF SUBROUTINES
*
RANDOM   L     R1,RNO                  GET PREVIOUS NUMBER
         SR    R0,R0
         M     R0,=F'65539'            MAGIC NUMBER1
         LTR   R1,R1
         BNM   L200
         A     R1,=F'2147483647'       MAGIC NUMBER 2
         A     R1,=F'1'
L200     ST    R1,RNO                  SAVE NUMBER
         SR    R0,R0
         D     R0,=F'21474837'
         SR    R0,R0
         BR    R14                     RETURN
*     GENERATE RANDOM NUMBER
*     PICK A MOVE, SET UP DIRECTION, AND NEXT ROW, COL
PICKMOVE ST    R14,PMR14               SAVE REG
TRYOTHER BAL   R14,RANDOM              GET RANDOM NUMBER
         D     R0,=F'4'                0-3,UDLR
         LR    R1,R0
         SLL   R1,3                    0,8,16,24
         LR    DIRR,R1                 SAVE
         LR    R3,DIRR                 TO MOVE MOVED IN SAME DIRRECT.
         SRL   R3,3                    0,1,2,3,UDLR
         LA    R3,BITMOVES(R3)
         MVC   BITDIR,0(R3)            MOVE BIT DIRECTION
RULE1    L     R2,ROW                  SEE IF NEXT POSITION
         A     R2,DIRECTTB(DIRR)       IS USED
         ST    R2,NEXTROW              SAVE NEXT ROW
         L     R1,COL
         A     R1,DIRECTTB+4(DIRR)
         ST    R1,NEXTCOL              SAVE NEXT COL
         AR    R1,R2
         AR    R1,TBLS
         TM    0(R1),X'F0'             CHECK POSITION
         BM    TRYOTHER                ALREADY USED
RULE2    NOP   RULE2A                  CHECK FOR BOTTOM
         CLC   NEXTROW,BOTROW          OR GUARD BLOCKS
         BE    PICKED
RULE2A   TM    0(R1),X'F0'             GUARD BLOCK ID
         BO    TRYOTHER                GUARD BLOCK
RULE3    NOP   RULE4                   CHECK IF NO MOVE OUT
         LR    R3,R1                   GET NEW POSITION
         A     R3,UP                   TRY UP
         TM    0(R3),X'F0'
         BZ    RULE4                   CAN MOVE OUT UP
         LR    R3,R1                   GET NEW POSITION
         A     R3,DOWN                 TRY DOWN
         TM    0(R3),X'F0'
         BZ    RULE4                   CAN MOVE DOWN
         LR    R3,R1                   GET NEW POSITION
         A     R3,LEFT+4               TRY LEFT
         TM    0(R3),X'F0'
         BZ    RULE4                   CAN MOVE LEFT
         LR    R3,R1                   GET NEW POSITION
         A     R3,RIGHT+4              TRY RIGHT
         TM    0(R3),X'F0'
         BZ    RULE4                   CAN MOVE RIGHT
         B     TRYOTHER
RULE4    NOP   RULE5                   SEE IF ADJACENT,PERPENDICULAR
         LR    R3,DIRR                 0,8,16,24,UDLR
         SRL   R3,4                    0,0,1,1
         LA    R4,1
         SR    R4,R3                   1,1,0,0
         SLL   R4,4                    16,16,0,0
         L     R2,ROW                  CURR ROW
         AR    R2,TBLS
         A     R2,COL                  CURRENT POS
         LR    R3,R2                   COPY CURR POSITION
         A     R3,DIRECTTB(R4)         TRY UP OR LEFT
         A     R3,DIRECTTB+4(R4)
         IC    R5,BITDIR
         EX    R5,TMM
         BO    TRYOTHER                MOVE IN SAME DIRECTION
         LR    R3,R2                   COPY CURR POSITION
         A     R3,DIRECTTB+8(R4)       TRY DOWN OF RIGHT
         A     R3,DIRECTTB+12(R4)
         EX    R5,TMM
         BO    TRYOTHER                MOVE IN SAME DIRECTION
RULE5    NOP   PICKED                  ADJACENT TO NEW MOVE,
*                                      PERPENDICULAR TO MOVE, IS THERE
*                                      A MOVE IN THE SAME DIRECTION
         LR    R2,TBLS                 GET NEW POSITION
         A     R2,NEXTROW
         A     R2,NEXTCOL
*                                      R4 AND R5 STILL SET UP
         LR    R3,R2                   COPY NEW POSITION
         A     R3,DIRECTTB(R4)         TRY  UP OR LEFT
         A     R3,DIRECTTB+4(R4)
         EX    R5,TMM
         BO    TRYOTHER
         LR    R3,R2                   COPY NEW POSITION
         A     R3,DIRECTTB+8(R4)       TRY DOWN OR RIGHT
         A     R3,DIRECTTB+12(R4)
         EX    R5,TMM
         BO    TRYOTHER
         L     R2,ROW                  BACK DOWN, DO
         A     R2,COL                  REVERSE OF NEXTMOVE
         SLL   R2,1
         S     R2,NEXTROW
         S     R2,NEXTCOL
         AR    R2,TBLS
         LR    R3,R2                   COPY NEW POSITION
         A     R3,DIRECTTB(R4)         TRY  UP OR LEFT
         A     R3,DIRECTTB+4(R4)
         TM    0(R3),X'F0'             BYPASS WALLS
         BO    RULE5X
         EX    R5,TMM
         BZ    RULE5X
         BAL   R14,RULE5A
RULE5X   LR    R3,R2                   COPY NEW POSITION
         A     R3,DIRECTTB+8(R4)       TRY DOWN OR RIGHT
         A     R3,DIRECTTB+12(R4)
         TM    0(R3),X'F0'             BYPASS WALLS
         BO    RULE6
         EX    R5,TMM
         BZ    RULE6
         BAL   R14,RULE5A
         B     RULE6
RULE5A   MVC   WORKB,0(R3)             SEE IF THEY ARE CONNECTED
         LR    R0,R2
         LR    R2,R3
         NI    WORKB,X'0F'
         TR    WORKB,DIROFFTB
         SR    R1,R1
         IC    R1,WORKB
         A     R2,DIRECTTB(R1)
         A     R2,DIRECTTB+4(R1)
         MVC   WORKB,0(R2)
         NI    WORKB,X'0F'
         TR    WORKB,DIROFFTB
         SR    R1,R1
         IC    R1,WORKB
         A     R2,DIRECTTB(R1)
         A     R2,DIRECTTB+4(R1)
         S     R2,COL
         SR    R2,TBLS
         C     R2,ROW
         BNE   TRYOTHER
         LR    R2,R0
         BR    R14
RULE6    L     R2,PREV                 GET PREVIOUS DIRECTION
         A     R2,PREV+4
         AR    R2,TBLS
         MVC   PD,0(R2)
         NI    PD,X'0F'
         MVC   KK,PD
         OC    KK,BITDIR
         CLI   KK,X'0A'
         BE    RULE5Z
         CLI   KK,X'09'
         BE    RULE5Z
         CLI   KK,X'06'
         BE    RULE5Z
         CLI   KK,X'05'
         BE    RULE5Z
         B     PICKED
RULE5Z   DS    0H
         OI    PD,X'10'
         MVC   KL,BITDIR
         OI    KL,X'10'
         L     R1,NEXTROW
         A     R1,NEXTCOL
         L     R2,ROW
         A     R2,COL
         SR    R1,R2
         SLL   R2,1
         S     R2,PREV
         S     R2,PREV+4
         SR    R2,R1
         AR    R2,TBLS
         MVC   WK,0(R2)
         CLC   WK,PD
         BNE   PICKED
         SR    R2,R1
         MVC   WK,0(R2)
         CLC   WK,KL
         BE    TRYOTHER
PICKED   L     R14,PMR14               RETURN
         BR    R14
*     MAKE THE MOVE
DOMOVE   L     R1,ROW
         A     R1,COL
         AR    R1,TBLS
         OC    0(1,R1),BITDIR          MARK MOVE
         L     R1,NEXTROW
         A     R1,NEXTCOL
         AR    R1,TBLS
         OC    0(1,R1),LOOPCNT+3       MARK CHAIN
         MVC   PREV(8),ROW
         MVC   ROW(8),NEXTROW          SET ROW AND COL
         L     R1,COUNT                UP COUNT OF USED
         LA    R1,1(R1)
         ST    R1,COUNT
         BR    R14                     RETURN
*    RECURSIVE SUBROUTINE FIND AND BUILD CHAIN
FBCHAIN  DS    0H                      GO DOWN CHAIN Y LOOKING FOR
         USING CHAINTBL,R7             CHAIN Y+1=X
         SR    R1,R1                   GET Y+1
         ST    R1,CHAINNP
         IC    R1,CHAINY
         LA    R1,16(R1)
         STC   R1,CHAINY+1
         ST    R14,CHAINRET            SAVE RETURN ADDRESS
         L     R1,CHAINP               GET POSITION
NEXTPOS  LA    R2,16                   GET INITIAL DIRECTION
         STC   R2,CHAINDIR
         IC    R3,0(R1)
         N     R3,=X'0000000F'         GET DIRECTIONS
         STC   R3,CHAINWK
         LA    R4,4                    BCT COUNTER
FBLOOPD  SR    R2,R2
         IC    R2,CHAINDIR             DIRECTION LOOP
         SRL   R2,1                    SHIFT DIRECTION 8,4,2,1,UDLR
         STC   R2,CHAINDIR
         EX    R2,DCTM                 TM DIR AGAINST WK
         BZ    NEXTDIR                 TRY NEXT DIRECTION
*     THERE IS A MOVE
         STC   R2,WORKB                8,4,2,1,UDLR
         TR    WORKB,DIROFFTB          0,8,16,24
         SR    R2,R2
         IC    R2,WORKB
         LR    R3,R1                   GET CURR POS
         A     R3,DIRECTTB(R2)         ADD TO GET NEW POS
         A     R3,DIRECTTB+4(R2)
         MVC   WORKB,0(R3)             GET POS IN THAT DIRECTION
         NI    WORKB,X'F0'             GET CHAIN # ONLY
         CLC   WORKB,CHAINY            SEE IF NEXT FOR THIS CHAIN
         BNE   CHECKY1                 YES
         ST    R3,CHAINNP              SAVE PT
CHECKY1  CLC   WORKB,CHAINY1           = CHAIN Y+1 ?
         BNE   NEXTDIR
         CLC   WORKB,LOOPCNT+3         IS COUNT EQU Y+1
         BE    FOUNDCHN                FOUND CHAIN
*     NOW      PUSH AND RECURSE PUSH
         IC    R2,CHAINY1
         ST    R4,CHAINDC
         LA    R7,20(R7)               RECURSE
         ST    R3,CHAINP
         STC   R2,CHAINY
         BAL   R14,FBCHAIN
         L     R1,CHAINP               RESTORE INFO
         L     R4,CHAINDC
NEXTDIR  BCT   R4,FBLOOPD
*     GO TO NEXT POSITION IN CHAIN Y
         L     R1,CHAINNP
         ST    R1,CHAINP
         MVC   CHAINNP,=F'0'
*                                      SEE IF END OF CHAIN
         LTR   R1,R1
         BZ    CHAINEND
         IC    R2,0(R1)
         N     R2,=X'0000000F'         GET DIRECTION ONLY
         LTR   R2,R2
         BNZ   NEXTPOS                 MOVE MOVES
FBEXIT   B     CHAINEND                NOMORE MOVES
FOUNDCHN BAL   R14,RANDOM              GET A RANDOM NO 1-5
         D     R0,=F'5'                AND TRAVEL TO END
         LR    R1,R0
         LA    R1,1(R1)                VALUE IN R4
         LR    R4,R1
*     R3  HAS NEXT POSITION AND THERE IS ONLY ONE DIRECTION ON THIS
*     SUB CHAIN
*     GET NEXT ON THIS CHAIN
GODOWN   SR    R2,R2                   GET DIRECTION
         IC    R2,0(R3)                8,4,2,1,U,D,L,R
         N     R2,=X'0000000F'
         STC   R2,WORKB
GODOWN2  TR    WORKB,DIROFFTB          GET OFFSET INTO TABLE
         SR    R2,R2
         IC    R2,WORKB
         LR    R1,R3                   NEXT POSITION
         A     R1,DIRECTTB(R2)         CALCULATE NEW POSITION
         A     R1,DIRECTTB+4(R2)
*     R1 HAS THE NEXT MOVE
         BCT   R4,CKEND                COUNT DOWN
         B     BUILDCHN
CKEND    IC    R2,0(R3)                SEE IF AT END
         STC   R2,CHKMV
         LR    R3,R1
         NI    CHKMV,X'0F'             DIRECTION ONLY
         CLI   CHKMV,X'00'
         BE    CHAINEND                YES
         B     GODOWN                  NO
BUILDCHN ST    R1,NEXTMSV              SAVE NEXT MOVE
         IC    R2,0(R3)
         STC   R2,CHKMV
         NI    CHKMV,X'0F'             DIRECTION ONLY
         SR    R2,R2                   GET ROW AND COL OF THIS POS
         SR    R3,TBLS
         D     R2,ROWLNGTH
         MH    R3,ROWLNGTH+2
         ST    R3,ROW
         ST    R2,COL
         C     R3,BOTROW
         BE    CHAINEND
         L     R2,LOOPCNT
         LA    R2,16(R2)
         ST    R2,LOOPCNT
         BAL   R14,MAKCHAIN            MAKE A CHAIN
         L     R2,LOOPCNT
         S     R2,=F'16'
         ST    R2,LOOPCNT
         L     R3,NEXTMSV
         CLI   CHKMV,X'00'             SEE IF AT END OF CHAIN
         BE    CHAINEND                NO
         MVC   CHKMV,0(R3)
         NI    CHKMV,X'0F'
         CLI   CHKMV,X'00'
         BE    CHAINEND
         MVC   WORKB,CHKMV             GET MOVE
         BAL   R14,RANDOM              CONTINUE,NEW COUNT DOWN
         D     R0,=F'5'
         LR    R1,R0
         LA    R4,1(R1)
         B     GODOWN2
CHAINEND L     R14,CHAINRET            RETURN
         S     R7,=F'20'               POP
         BR    R14
         DROP  R7
*            MAKE A CHAIN
MAKCHAIN ST    R14,MAKSVR14            SAVE R14
*     CHECK FOR POSIBLE MOVE
MAKLOOP  L     R3,ROW                  GET CURR POS
         A     R3,COL
         AR    R3,TBLS
         LR    R2,R3                   COPY CURR POS
         A     R2,UP                   TRY UP
         TM    0(R2),X'F0'
         BZ    OK
         LR    R2,R3                   COPY CURR POS
         A     R2,DOWN                 TRY DOWN
         TM    0(R2),X'F0'
         BZ    OK
         LR    R2,R3                   COPY CURR POS
         A     R2,LEFT+4               TRY LEFT
         TM    0(R2),X'F0'
         BZ    OK
         LR    R2,R3                   COPY CURR POS
         A     R2,RIGHT+4              TRY RIGHT
         TM    0(R2),X'F0'
         BZ    OK
         L     R14,MAKSVR14
         BR    R14                     RETURN
OK       BAL   R14,PICKMOVE            PICK A MOVE
         BAL   R14,DOMOVE              MARK IT
         B     MAKLOOP
*     CHECK IF SQUARE UNUSED, CONNECT IF POSSIBLE, MAINTAIN NEW
*     START AND END VALUES
*     R4=COL, R5=SE-TABLE, R6=ROW
CONNECT  ST    R6,SAVER                SAVE REG
         LR    R2,TBLS                 START OF TABLE
         AR    R2,R6                   ADD ROW OFFSET
         AR    R2,R4                   ADD COL OFFSET
         TM    0(R2),X'F0'             SEE IF USED
         BCR   5,R14                   IF ONES OR MIXED
*     POSITON IS UNUSED, LOOK FOR AN ADJACENT USED POSITION
         LR    R3,R14                  SAVE RETURN
         BAL   R14,RANDOM              GET RANDOM #
         LR    R14,R3
         D     R0,=F'4'
         LR    R1,R0
         LA    R1,BITMOVES(R1)
         SR    R3,R3
         LR    R6,R3
         ST    R3,COUNT4
CKDIR    MVC   WORKB,0(R1)             8,4,2,1
         TR    WORKB,DIROFFTB          NOW IS OFFSET TO TABLE
         IC    R6,WORKB
         LR    R3,R2                   GET CURR POS
         A     R3,DIRECTTB(R6)
         A     R3,DIRECTTB+4(R6)
         TM    0(R3),X'F0'             SEE IF WALL
         BO    NEXTD                   NEXT DIRECTION
         BZ    NEXTD                   NOT USED ALSO
*     FOUND A USED ONE,CONNECT UP
         OI    0(R2),X'E0'             MARK AS CHAIN 14
         MVC   WORKB,0(R1)
         TR    WORKB,REVERSED          REVERSE DIRECTION
         OC    0(1,R3),WORKB           PUT IN MOVE
         L     R3,COUNT                INCREMENT USED COUNT
         LA    R3,1(R3)
         ST    R3,COUNT
         B     GOBACK                  RETURN
NEXTD    L     R3,COUNT4
         LA    R3,1(R3)
         ST    R3,COUNT4
         C     R3,=F'4'
         BE    UNUSED                  CHECKED ALL 4 DIRECTIONS
         C     R1,=A(BITMOVES+3)       SEE IF AT END
         BNE   UP1
         LA    R1,BITMOVES
         B     CKDIR
UP1      LA    R1,1(R1)
         B     CKDIR
UNUSED   CLC   0(4,R5),=X'FFFFFFFF'    SEE IF UNUSED AND S= -1
         BNE   UUECK                   NO
         ST    R4,0(R5)                YES
UUECK    ST    R4,4(R5)                SAVE END
GOBACK   L     R6,SAVER                RESTORE REG
         BR    R14                     RETURN
*     PRINT BOTTOM LINE
PRINTBOT ST    R14,SAVEPR14
         L     R6,PARMW
         LR    R3,R2                   FIRST COL POSITION
         LA    R5,PLINE-2
NEXTB    LA    R3,1(R3)
         LA    R5,3(R5)
         MVC   0(3,R5),=C'=--'         INITIALIZE
         TM    0(R3),X'04'             IF MOVE DOWN
         BZ    PTU
         MVC   1(2,R5),=C'  '          YES
         B     PBOTCK
PTU      LR    R4,R3                   ROW
         A     R4,ROWLNGTH                 +1
         TM    0(R4),X'08'             IF MOVE UP
         BZ    PBOTCK                  NO
         MVC   1(2,R5),=C'  '          YES
PBOTCK   BCT   R6,NEXTB
         MVI   3(R5),C'='
         PUT   PRINTER,PLINE           PRINT
         MVI   PLINE,C' '              CLEAR LINE
         MVC   PLINE+1(132),PLINE
         L     R14,SAVEPR14
         BR    R14                     RETURN
*     PRINT MIDDLE LINE
PRINTMID ST    R14,SAVEPR14
         L     R6,PARMW
         LR    R3,R2                   FIRST COL POS
         LA    R5,PLINE-2
NEXTM    LA    R3,1(R3)
         LA    R5,3(R5)
         MVC   0(3,R5),=C'I  '         INITIALIZE
         TM    0(R3),X'02'             IF MOVE LEFT
         BZ    PTR                     NO
         MVI   0(R5),X'40'             YES
         B     PMIDCK
PTR      LR    R4,R3                   COL
         S     R4,=F'1'                   -1
         TM    0(R4),X'01'             IF MOVE RIGHT
         BZ    PMIDCK                  NO
         MVI   0(R5),X'40'             YES
PMIDCK   CLI   SOLUTSW,C'Y'            SEE IF WE WANT THE SOLUTION
         BNE   PMIDLOOP                NO
         SR    R4,R4
         IC    R4,0(R3)                GET ENTRY
         N     R4,=X'000000F0'         ZERO OUT ALL BUT CHAIN COUNT
         C     R4,=X'00000010'         SEE IF CHAIN ONE
         BNE   PMIDLOOP                NO
         MVI   1(R5),C'*'              MARK SOLUTION
PMIDLOOP BCT   R6,NEXTM
         MVI   3(R5),C'I'
         PUT   PRINTER,PLINE           PRINT
         MVI   PLINE,C' '              CLEAR LINE
         MVC   PLINE+1(132),PLINE
         L     R14,SAVEPR14
         BR    R14                     RETURN
*     WORK AREAS
         DS    D
PACKWORK DC    PL8'0'
SOLUTSW  DC    C' '                    SOLUTION SWITCH
PARMW    DC    F'0'                    PARM WIDTH
PARML    DC    F'0'                    PARM LENGTH
PARMR    DC    F'0'                    PARM RANDOM NUMBER
RNO      EQU   PARMR                   RANDOM NUMBER
WIDTH    DC    F'0'                    WIDTH+1,RELATIVE ZERO
LENGTH   DC    F'0'                    LENGTH+1,RELATIVE ZERO
PREV     DC    F'0',F'0'
PD       DC    X'00'                   PREVIOUS DIRECTION
WK       DC    X'00'                   WORK
KK       DC    X'00'                   WORK
KL       DC    X'00'                   WORK
SETABLE  DC    A(0)                    START END TABLE
SEINIT   DC    F'1'                    SE TABLE INITIAL VALUES 0
         DC    F'0'                    WIDTH  1-W
CHAINZ   DC    F'0'                    CHAIN ZERO ROW
         DC    F'0'                               COLUMN
ROWLNGTH DC    F'0'                    W+2
ROW      DC    F'0'                    CURR ROW
COL      DC    F'0'                    CURR COL
BOTROW   DC    F'0'                    REL TO TBLST
DIRECTTB DS    0F                      DIRECTION TABLE
UP       DC    F'-1',F'0'
DOWN     DC    F'1',F'0'
LEFT     DC    F'0',F'-1'
RIGHT    DC    F'0',F'1'
NEXTROW  DC    F'0'
NEXTCOL  DC    F'0'
BITMOVES DC    X'08040201'             UP,DOWN,LEFT,RIGHT
BITDIR   DC    X'00'                   DIRECTION IN BIT FORMAT
PMR14    DC    A(0)
TMM      TM    0(R3),X'00'
LOOPCNT  DC    F'16'                   LOOP COUNT 1 TO 14,CHAIN
*        DS    0H
DCTM     TM    11(R7),X'00'            CHAINWK
DIROFFTB DC    X'FF1810FF08FFFFFF00'   DIRECTION TO OFFSET TABLE
WORKB    DC    X'00'
NEXTMSV  DC    F'0'
CHKMV    DC    X'00'
COUNT    DC    F'0'                    COUNT OF USED SQUARES
LXW      DC    F'0'                    ROW X COL
SAVEE    DC    F'0'                    END VALUE SAVE
COUNT4   DC    F'0'                    1-4
SAVER    DC    F'0'                    SAVE FOR CONNECT
REVERSED DC    X'000201000800000004'
SAVEPR14 DC    F'0'
PLINE    DC    C'1',CL132' '
MAKSVR14 DC    F'0'
CHAINST  DC    75F'0'                  CHAIN START TABLE 15*5
NUMERICT DC    240X'01',10X'00',6X'01'
*     TABLE OF POSITIONS
*     FIRST 4 BITS IS A CHAIN NUMBER
*     CHAIN 15 IS A GUARD BLOCK
*     NEXT 4 BITS ARE DIRRECTIONS OF MOVES  U,D,L,R
*
PRINTER  DCB   MACRF=PM,DDNAME=PRINTER,RECFM=FBA,DSORG=PS
         LTORG
TABLEST  DS    13500F                  TABLE SPACE
*                                      1001X45 + 1001X8
R0       EQU   0                       RETURN VALUE
R1       EQU   1                       WORK
R2       EQU   2                       WORK
R3       EQU   3                       WORK
R4       EQU   4                       WORK
R5       EQU   5                       WORK
R6       EQU   6                       WORK
R7       EQU   7                       CHAIN BASE
R8       EQU   8                       DIRECTION
R9       EQU   9                       TABLEST
R10      EQU   10                      BASE
R11      EQU   11                      BASE
R12      EQU   12                      BASE
R13      EQU   13                      BASE AND SAVE
R14      EQU   14                      RETURN ADDRESS
R15      EQU   15
TBLS     EQU   9
DIRR     EQU   8
CHAINTBL DSECT
CHAINP   DS    F
*                                      POS OF POINTER TO NEW CHAIN
CHAINRET DS    F                       R14 SAVE
CHAINY   DS    X                       Y COUNT
CHAINY1  DS    X                       Y+1 COUNT
CHAINDIR DS    X                       DIRECTION SAVE
CHAINWK  DS    X                       DIRECTIONS FROM POINTER
CHAINNP  DS    F                       POS OF NEXT IN THIS CHAIN
CHAINDC  DS    F                       CHAIN DIRECTION LOOP COUNTER
         END   AMAZEING
