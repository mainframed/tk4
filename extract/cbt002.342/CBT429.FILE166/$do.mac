/*                              Rexx                                */

/*------------------------------------------------------------------*/
/*    This EDIT macro will verify a REXX exec for the DO/END syntax */
/*    pairing and flags any kind of errors, i.e. hanging (unpaired) */
/*    DO/END.                                                       */
/*------------------------------------------------------------------*/
/*    Author - Vinh Vu                                              */
/*    Date written - 10/24/95                                       */
/*------------------------------------------------------------------*/
/*    Update - 10/27/95 - $VNV - To support multiple DO/SELECT/END  */
/*        on the same line                                          */
/*------------------------------------------------------------------*/

Address ISPEXEC

'CONTROL ERRORS RETURN'
'ISREDIT MACRO (NODASH)'
If Rc ^=0 Then Do
   ZEDSMSG = '$DO Error'
   ZEDLMSG = '$DO can only be run as an ISPF EDIT macro !!!'
   'SETMSG MSG(ISRZ001)'
   Exit
   End
'ISREDIT (STRTLINE) = LINENUM .ZFIRST'
'ISREDIT (ENDLINE) = LINENUM .ZLAST'
'ISREDIT RESET'

DO_STACK.  = ''                      /* Init the stack for IFs    */
DO_LINENUM. = 0
DO_PTR     = 0
HIGHEST_NESTING_LEVEL = 0
HIGHEST_NESTING_LEVEL_COUNTER = 0
HIGHEST_NESTING_LEVEL_LINENUM = 0
CONTINUATION_LINE = 'N'
NUMBER_OF_DO_S = 0

Do COUNTER=STRTLINE to ENDLINE
   'ISREDIT (MYINPUT) = LINE' COUNTER
   MYINPUT = Substr(MYINPUT,1,72)    /* Only worry about col 1-72 */
   Call EXAMINE_THE_LINE             /* Check for IF/END */
   End                        /* Do */

If DO_PTR > 0 Then Do
   Call BAD_DO_FOUND
   End
Else Do
   Call GOOD_COMPLETION
   End

Exit



EXAMINE_THE_LINE:

WORK_DATA = MYINPUT                   /* Work with this temp data */
If NODASH = '' Then Do
   NEW_REC = '×'××Copies('.',43)××'×'
   End
Else Do
   NEW_REC = MYINPUT                     /* Save the orginal data */
   End


If CONTINUATION_LINE='Y' Then Do
   If Pos('*/',WORK_DATA) = 0 Then Do
      Return                      /*  line (not last line)        */
      End
   Else Do
      Parse Var WORK_DATA . '*/' WORK_DATA   /* Last comment line */
      CONTINUATION_LINE='N'
      End
   End


REMOVE_LITERAL_DONE = 'N'

Do Until REMOVE_LITERAL_DONE ='Y'
   If Pos("'",WORK_DATA) = 0 & ,
      Pos('"',WORK_DATA) = 0 & ,
      Pos('/*',WORK_DATA) = 0  Then Do
      REMOVE_LITERAL_DONE = 'Y'
      End
   Else Do
      Call REMOVING_LITERAL
      End       /* Else Do  */
   End          /* Do Until */


Upper WORK_DATA

WORK_DATA = Translate(WORK_DATA,'  ',',;')    /* Change ;, to blank */

/*------------------------------------------------------------------*/
/*    When we get here, WORK_DATA will not have commnents, literal  */
/*    (text enclosed by quotes), no commas, no semi-colons, just    */
/*    instructions.                                                 */
/*------------------------------------------------------------------*/

TOKEN_POSITION. = ''
TOKEN_TYPE. = ''
TOKEN_PTR = 0

/*------------------------------------------------------------------*/
/*    Find out if we have more than 1 DO/SELECT/END on the same     */
/*    line.  If we do, then put them on a stack and start           */
/*    processing them one by one.                                   */
/*------------------------------------------------------------------*/

Call BUILD_TOKEN_STACK 'DO'
Call BUILD_TOKEN_STACK 'SELECT'
Call BUILD_TOKEN_STACK 'END'

If TOKEN_PTR > 0 Then Do
   If TOKEN_PTR = 1 Then Do
      Call PROCESS_THE_TOKEN 1
      End
   Else Do
      Call SORT_TOKEN_POSITION
      Do I=1 To TOKEN_PTR
         Call PROCESS_THE_TOKEN I
         End
      End    /* Else Do           */
   End       /* If TOKEN_PTR > 0  */

Return


SORT_TOKEN_POSITION:

ALLDONE ='N'
Do Until ALLDONE='Y'
   ALLDONE = 'Y'
   Do I=1 To (TOKEN_PTR-1)
      J=I+1
      If TOKEN_POSITION.I > TOKEN_POSITION.J Then Do
         TEMP             = TOKEN_POSITION.J
         TOKEN_POSITION.J = TOKEN_POSITION.I
         TOKEN_POSITION.I = TEMP
         TEMP             = TOKEN_TYPE.J
         TOKEN_TYPE.J     = TOKEN_TYPE.I
         TOKEN_TYPE.I     = TEMP
         ALLDONE  = 'N'
         End                  /* If TABLEPOS */
      End                     /* Do I=1      */
   End                        /* Do UNTIL    */
Return



PROCESS_THE_TOKEN:

Arg MY_POSITION
MY_TYPE = TOKEN_TYPE.MY_POSITION

If MY_TYPE = 'DO' × MY_TYPE = 'SELECT' Then Do
   NUMBER_OF_DO_S = NUMBER_OF_DO_S+1
   DO_PTR = DO_PTR+1
   DO_STACK.DO_PTR =  NUMBER_OF_DO_S
   DO_LINENUM.DO_PTR = COUNTER
   MYNOTE = Substr(NEW_REC,1,45)
   BEG_FLAG = '('××NUMBER_OF_DO_S××')-L'××DO_PTR
   If DO_PTR > HIGHEST_NESTING_LEVEL Then Do
      HIGHEST_NESTING_LEVEL = DO_PTR
      HIGHEST_NESTING_LEVEL_COUNTER = NUMBER_OF_DO_S
      HIGHEST_NESTING_LEVEL_LINENUM = COUNTER
      End
   MYNOTE = MYNOTE××'     /*  Beg #'××BEG_FLAG××'  */'
   'ISREDIT LINE_BEFORE' COUNTER '= NOTELINE (MYNOTE)'
   End
Else If MY_TYPE = 'END' Then Do
   If DO_PTR = 0 Then Do
      ZEDSMSG = '$DO - CC=8'
      ZEDLMSG = 'Unpaired END(s) found - Check the MSGLINE'
      'SETMSG MSG(ISRZ001)'
      MSG1 = '>>>>>>>>>> END without a DO <<<<<<<<<<'
      'ISREDIT LINE_AFTER' COUNTER '= MSGLINE (MSG1)'
      MSG1  = '>>> Check for the MSGLINE on line' COUNTER 'for the',
              'unpaired END.'
      'ISREDIT LINE_BEFORE .ZFIRST = MSGLINE (MSG1)'
      'ISREDIT CURSOR =' COUNTER
      Exit
      End
   MYNOTE = Substr(NEW_REC,1,45)
   MYNOTE = MYNOTE××'     /*  End #('××DO_STACK.DO_PTR××')  */'
   'ISREDIT LINE_AFTER' COUNTER '= NOTELINE (MYNOTE)'
   DO_PTR = DO_PTR-1
   End

Return


BUILD_TOKEN_STACK:

Arg MY_TOKEN

REXX_LINE = WORK_DATA

REAL_POSITION = 0

Do While WordPos(MY_TOKEN,REXX_LINE) > 0
   TOKEN_PTR = TOKEN_PTR + 1
   TOKEN_POSITION.TOKEN_PTR = WordPos(MY_TOKEN,REXX_LINE)+REAL_POSITION
   TOKEN_TYPE.TOKEN_PTR = MY_TOKEN
   REXX_LINE = DelWord(REXX_LINE,WordPos(MY_TOKEN,REXX_LINE),1)
   REAL_POSITION = REAL_POSITION + 1
   End

Return



REMOVING_LITERAL:

/*------------------------------------------------------------------*/
/*    What we do here is to remove everything in between single     */
/*    quotes, or double quotes, or between the comments mark.       */
/*    This is the easiest way to make sure that we're not counting  */
/*    the DO's & END's that belong to either a comment or some kind */
/*    of text literal.  Once the removal is done, we can then scan  */
/*    the line for DO/SELECT and END.                               */
/*    Steps done:  Scan for these 3 special marks on a line of Rexx */
/*    code, sort the position (col where it is found) and then      */
/*    remove the text in between the mark found FIRST on the line.  */
/*    (remember that these special marks could be part of the text  */
/*    enclosed by the other special mark - that's why we need to    */
/*    sort the positions and do the removal on the first one found) */
/*------------------------------------------------------------------*/

TABLEPOS. = ''
TABLETYPE. = ''
TABLEPOS.1 = Pos("'",WORK_DATA)
TABLETYPE.1 = "'"
TABLEPOS.2 = Pos('"',WORK_DATA)
TABLETYPE.2 = '"'
TABLEPOS.3 = Pos('/*',WORK_DATA)
TABLETYPE.3 = '/*'

ALLDONE ='N'
Do Until ALLDONE='Y'
   ALLDONE = 'Y'
   Do I=1 To 2
      J=I+1
      If TABLEPOS.I > TABLEPOS.J Then Do
         TEMP             = TABLEPOS.J
         TABLEPOS.J       = TABLEPOS.I
         TABLEPOS.I       = TEMP
         TEMP             = TABLETYPE.J
         TABLETYPE.J      = TABLETYPE.I
         TABLETYPE.I      = TEMP
         ALLDONE  = 'N'
         End                  /* If TABLEPOS */
      End                     /* Do I=1      */
   End                        /* Do UNTIL    */

Do I=1 to 3
   If TABLEPOS.I > 0 Then Do
     Call PERFORM_REMOVAL I
     Leave
     End
   End    /* Do 3 */

Return


PERFORM_REMOVAL:

Arg MY_NUMBER
LITERAL_TYPE = TABLETYPE.MY_NUMBER

If LITERAL_TYPE = "'" Then Do
   Parse Var WORK_DATA WORK_DATA "'" . "'" SECOND_PART
   WORK_DATA = WORK_DATA××SECOND_PART
   End
Else If LITERAL_TYPE = '"' Then Do
   Parse Var WORK_DATA WORK_DATA '"' . '"' SECOND_PART
   WORK_DATA = WORK_DATA××SECOND_PART
   End
Else If LITERAL_TYPE = '/*' Then Do
   If Pos('*/',WORK_DATA) > 0 Then Do
      Parse Var WORK_DATA WORK_DATA '/*' . '*/' SECOND_PART
      WORK_DATA = WORK_DATA××SECOND_PART
      End
   Else Do
      Parse Var WORK_DATA WORK_DATA '/*' .
      CONTINUATION_LINE='Y'
      End
   End

Return



BAD_DO_FOUND:

ZEDSMSG = '$DO - CC=8'
ZEDLMSG = 'Un-paired DO/SELECT(s) found - Check the REXX Exec'
'SETMSG MSG(ISRZ001)'
MSG1  = '>>> Look for DO/SELECT #' DO_STACK.DO_PTR 'in the',
        'text for the unpaired DO/SELECT.'
'ISREDIT LINE_BEFORE .ZFIRST = MSGLINE (MSG1)'

MSG1 = '>>>>>>>>>> Unpaired DO/SELECT <<<<<<<<<'
'ISREDIT LINE_AFTER' DO_LINENUM.DO_PTR '= MSGLINE (MSG1)'
'ISREDIT CURSOR =' DO_LINENUM.DO_PTR
Return



GOOD_COMPLETION:
ZEDSMSG = '$DO - CC=0'
ZEDLMSG = 'Check the NOTE lines for the DO/END pairings'
'SETMSG MSG(ISRZ000)'
MSG1  = '>>> There are' NUMBER_OF_DO_S 'pairs of DO/SELECT-END. To',
        'find the DO/SELECT-END'
MSG2  = '>>> pairs, scroll through and look for the NOTE lines.'
MSG3  = '>>> The highest number of nested DO/SELECT is',
        HIGHEST_NESTING_LEVEL 'at #'HIGHEST_NESTING_LEVEL_COUNTER',',
        'line #'HIGHEST_NESTING_LEVEL_LINENUM
'ISREDIT LINE_BEFORE .ZFIRST = MSGLINE (MSG1)'
'ISREDIT LINE_BEFORE .ZFIRST = MSGLINE (MSG2)'
'ISREDIT LINE_BEFORE .ZFIRST = MSGLINE (MSG3)'
Return
