//ASM       EXEC PGM=IEUASM,REGION=300K,PARM=('LOAD,NODECK,RENT')
//SYSGO       DD DSN=&&LOADSET,DISP=(MOD,PASS),UNIT=SYSDA,
//             SPACE=(CYL,(5,1),RLSE),DCB=(LRECL=80,BLKSIZE=400,
//             RECFM=FB)
//SYSUT1      DD UNIT=VIO,SPACE=(CYL,05)
//SYSUT2      DD UNIT=SYSDA,SPACE=(CYL,(5,5))
//SYSUT3      DD UNIT=SYSDA,SPACE=(CYL,(5,5))
//SYSPRINT    DD SYSOUT=*,DCB=(BLKSIZE=121,BUFNO=1)
//SYSPUNCH    DD SYSOUT=B,DCB=(BLKSIZE=080,BUFNO=1)
//SYSLIB      DD DSN=SYS1.SMPMTS,DISP=SHR,DCB=BLKSIZE=19040
//            DD DSN=SYS1.SMPSTS,DISP=SHR
//            DD DSN=SYS1.HASPSRC,DISP=SHR
//            DD DSN=SYS1.MACLIB,DISP=SHR
//            DD DSN=SYS1.AMODGEN,DISP=SHR
//SYSIN       DD *
IEFUTL CSECT
***********************************************************************
*                                                                     *
*  MODULE NAME:              IEFUTL                                   *
*                                                                     *
*  MODULE TYPE:              SMF PROCESSING SUBROUTINE                *
*                                                                     *
*  LOAD MODULE NAME:         IEFUTL                                   *
*                                                                     *
*  LOAD LIBRARY:             SYS1.LPALIB                              *
*                                                                     *
*  ASSEMBLER ATTRIBUTES:     RENT                                     *
*                                                                     *
*  LKED ATTRIBUTES:          RENT,REUS,REFR                           *
*                                                                     *
*  MODULE AUTHORIZATION:     KEY 0,PROBLEM STATE                      *
*                                                                     *
*  MACROS:                                                            *
*                                                                     *
*  MACRO LIBRARIES:          SYS1.MACLIB SYS1.AMODGEN                 *
*                                                                     *
*  ABENDS:                   NONE                                     *
*                                                                     *
*  FUNCTION:                 THIS MODULE WILL PROCESS TIME            *
*                            EXCESSIONS. IT WILL AUTO EXTEND,AUTO     *
*                            CANCEL, REQUEST OPERATOR DECISION. IT    *
*                            WILL DO ALL OF THE ABOVE A SPECIFIC      *
*                            NUMBER OF TIMES AND THEN SWITCH TO       *
*                            ANOTHER MODE.  ALL OF THIS IS CONTROLLED *
*                            BY A SEPARATLY COMPILED OPTIONS TABLE.   *
*                                                                     *
*  PARAMETERS:               R1 :COMMON EXIT PARAMETER LIST           *
*                                     SEE SMFCET BELOW                *
*                            R0 :      0     JOB CPU TIME EXCEEDED    *
*                                      4     STEP CPU TIME EXCEEDED   *
*                                      8     JOB WAIT TIME EXCEEDED   *
*                                                                     *
*                                                                     *
*  RETURN CODES:             R15:      0     CANCEL JOB               *
*                                      4     TIME EXTENSION IN TU     *
*                                      8     TIME EXTENSION IN SEC    *
*                                                                     *
*                                                                     *
*  INTERNAL TABLES:          SEPARATLY COMPILED OPTIONS TABLE         *
*                                   =V(OTABLE) . SEE MEMBER IEFUTLTB. *
*                                                                     *
*                            USER COMMUNICATION AREA IN SMFCET IS     *
*                               USED TO KEEP COUNT OF EXTENSIONS.     *
*                                                                     *
*  CALLED MODULES:           JESJCT                                   *
*                                                                     *
*  CALLING MODULES:          SMF EXIT EFFECTOR                        *
*                                                                     *
*  PROGRAM FLOW:             GETMAIN STORAGE IN SP 253                *
*                                                                     *
*                            DETERMINE CPU ADJUSTMENT FACTOR FOR CPU  *
*                                TIME EXCESSION                       *
*                                                                     *
*                            CALCULATE ACTUAL TCB CPU TIME USED       *
*                                                                     *
*                            SEARCH OTABLE FOR CORRECT LINE USING     *
*                                 JOBCLASS,JOBNAME,TERMINAL,SYSTEM    *
*                                                                     *
*                            BRANCH TO CORRECT CODE GROUP FOR         *
*                                EXCESSION TYPE:                      *
*                                                                     *
*                               JWAIT ---  SET REGISTER TO POINT      *
*                                          TO WAIT TABLE ELEMENT IN   *
*                                          OTABLE LINE                *
*                                          BRANCH TO TABLE PROCESS    *
*                               SCPU  ---  SET REGISTER TO POINT      *
*                                          TO STEP CPU TABLE ELEMENT  *
*                                          IN OTABLE LINE             *
*                                          BRANCH TO TABLE PROCESS    *
*                               JCPU  ---  SET REGISTER TO POINT      *
*                                          TO JOB  CPU TABLE ELEMENT  *
*                                          IN OTABLE LINE             *
*                                          BRANCH TO TABLE PROCESS    *
*                                                                     *
*                            PROCESS TABLE OPTIONS, PERFORM AS        *
*                                SPECIFIED.                           *
*                                                                     *
*                            ISSUE ANY DELAYED MESSAGES               *
*                                                                     *
*                            FREEMAIN STORAGE                         *
*                                                                     *
*                            RETURN                                   *
*                                                                     *
*                                                                     *
*  PARAMETER LAYOUTS:        SMFCET --- SEE SMFCET BELOW              *
*                                                                     *
*                                                                     *
*                                                                     *
*  AUTHOR:                   KIRK STICKEN, INFORMATION SERVICES       *
*                            (214)-334-2031                           *
*                            FRITO LAY, DALLAS TX                     *
*                                                                     *
*                                                                     *
*  MODIFICATION RECORD:      NEW PROGRAM 12-14-83 KIRK STICKEN        *
*                            12/20/83 USE COMPOSITE CPU TIME FROM     *
*                                  ASCB AND ACTJTIME IN ACT           *
*                            04/17/85 ADD JOBNAME,TERMINAL,SYSTEM     *
*                                  SUPPORT                            *
*                            11/27/85 CHANGE WTO TO HRDCPY ONLY       *
*                            01/15/86 ADD JESJCT ROUTINE TO GET       *
*                                     JOB CARD TIME SAVED IN JES2 XIT6*
*                                                                     *
***********************************************************************
R0       EQU   0                       .
R1       EQU   1                       .
R2       EQU   2                       .
R3       EQU   3                       .
R4       EQU   4                       .
R5       EQU   5                       .
R6       EQU   6                       .
R7       EQU   7                       .
R8       EQU   8                       .
R9       EQU   9                       .
R10      EQU   10                      .
R11      EQU   11                      .
R12      EQU   12                      .
R13      EQU   13                      .
R14      EQU   14                      .
R15      EQU   15                      .
SUBPOOL  EQU   253                     .  GETMAIN SUBPOOL
         B     START1-IEFUTL(R15)      .  BRANCH AROUND BLURB
         DC    AL1(L'@ID)              .  DEFINE ID LENGTH
@ID      DC    C'IEFUTL'               .  DEFINE PROGRAM ID
         DC    C'_&SYSDATE._&SYSTIME._REPUBLIC_BANK_DALLAS'
START1   DS    0H                      .
         STM   R14,R12,12(R13)         .  SAVE MASTERS REGISTERS
         LR    R9,R13                  .  SAVE R13 ADDRESS
         LR    R8,R0                   .  SAVE R0 PARM REGISTER
         BALR  R12,R0                  .  SET UP BASE ADDRESS
         USING *,R12                   .  AND USE TO RUN WITH
         LR    R5,R1                   .  SAVE PARM REGISTER
         L     R2,GETSIZE              .  USE THE GETMAIN SIZE
         GETMAIN R,LV=(2)              .  GET WORKING STORAGE
         LR    R0,R1                   .  R0=START OF WORK
         LR    R4,R1                   .  R4=START OF WORK
         LA    R1,WORKSIZE             .  R1=LEN OF WORK
         LR    R2,R0                   .  R2=START OF WORK
         SR    R3,R3                   .  R3=0
         MVCL  R0,R2                   .  CLEAR WORKING STORAGE
         ST    R4,8(R13)               .  STORE OURS THERE
         ST    R13,4(R4)               .  STORE THEIRS HERE
         LR    R13,R4                  .  STANDARD REGISTER CONVENTIONS
         USING WORKX,R13               .  ADDRESS WORKING STORAGE
         LR    R1,R5                   .  RESTORE PARM REGISTER
         LR    R0,R8                   .  RESTORE R0 PARM REGISTER
         LR    R3,R9                   .  RESTORE R13 PARM REGISTER
BEGIN    DS    0H                      .  BEGIN PROJECT
         L     R15,=V(JESJCT)          .  GET JOB CARD TIME FROM
         BALR  R14,R15                 .     JCTUSERF AND PUT IN
         ST    R15,UTIME               .         UTIME FOR LATER
         L     R1,0(R1)                .  GET THAT OLD PARM
         ST    R1,PARMSAVE             .
         LR    R14,R1                  .
         USING SMFCET,R14              .
         MVC   WTOMSG(WTOSL),WTOSHELL  .  INIT WTO AREAS
         MVC   WTOE(WTORSL),WTORSHEL   .  INIT WTO AREAS
         MVC   RETCODE,=H'8'           .  DEFAULT IS SECONDS
         MVC   24(4,R3),=F'1'          .  DEFAULT IS 1 SECOND
         MVC   FACTOR+2(2),=H'10'      .  DEFAULT CPU FACTOR IS 1.0
         SR    R9,R9                   .  ADDRESS THE PSA
         L     R7,PSATOLD-PSA(R9)      .  LOAD THE TCB OLD ADDRESS
         L     R7,TCBTCT-TCB(R7)       .  GO TO THE TCT
         L     R7,TCTLCTAD-SMFTCT(R7)  .  GO TO THE LCT
         ICM   R7,B'0111',LCTJCTAD-LCT+1(R7) . GET THE JCT
         ICM   R7,B'1000',=F'0'        . CLEAR HIGH BYTE
         ICM   R7,B'0111',JCTACTAD-INJMJCT(R7) . GET THE ACT
         A     R7,=F'16'               .  ADDRESS TO ACTUAL ACT
         XC    WORK,WORK               .
         MVC   WORK+1(3),ACTJTIME-IEFAACTB(R7) .  MOVE IN OTHER TCB TM
         L     R9,PSAAOLD-PSA(R9)      .  LOAD THE ASCB OLD ADDRESS
         CLC   =CL4'ASCB',0(R9)        .  IS IT REALLY ASCB?
         BE    OKASCB                  .     YUP
         MVC   MSG,BLANKS              .
         MVC   MSG(MSG7L),MSG7         .  MOVE IN INTERNAL LOGIC ERR
         MVC   MJOB,SMFJOB             .  GET JOBNAME
         WTO   MF=(E,WTOMSG)           .  WRITE OUT MESSAGE
         B     RETURN                  .
OKASCB   DS    0H                      .
         C     R0,=F'8'                .  IS THIS WAIT TIME?
         BE    DOWAIT1                 .  YES GO FORMAT WAIT TIME
         LM    R14,R15,ASCBEJST-ASCB(R9)   TCTEJST  JOB TIME
         SRDA  R14,12                  .  SHIFT UNUSED BITS
         D     R14,=F'10000'           .  R15=SSSSSS.TH
         A     R15,WORK                .  ADD IN PRIOR STEPS CPU TIME
         LR    R14,R15                 .  GO AND DROP OFF THE "H"
         SRDA  R14,32                  .  SHIFT FOR DIVIDE
         D     R14,=F'10'              .  R15=SSSSSS.T
         ST    R15,CPUTIME             .  STORE CPU TIME
         B     CPUDONE                 .  GO CONTINUE
DOWAIT1  DS    0H                      .
         L     R14,ASCBSWTL-ASCB(R9)   .  SET WAIT TIME LIMIT SSSS
         SRDA  R14,32                  .
         M     R14,=F'10'              .  CPUTIME BECOMES WAIT TIME
         ST    R15,CPUTIME             .       SSSS.T
         SLR   R15,R15                 . DO NOT USE JOB CARD TIME
         ST    R15,UTIME               .   FOR WAIT REASON TIMEOUTS
CPUDONE  DS    0H                      .
         L     R14,PARMSAVE            .
         L     R15,=V(OTABLE)          . GET OPTIONS TABLE
         L     R9,4(R15)               . OFFSET TO CPU TABLE
         LR    R11,R9                  .
         SRA   R11,24                  . HIGH BYTE CONTAINS CPU COUNT
         ICM   R9,B'1000',=F'0'        . RESET HIGH BYTE
         LA    R10,6                   . 6 IS CPU TABLE ENTRY LENGTH
         BALR  R8,R0                   .
CPULOOP  DS    0H                      .
         CLC   SMFCPU,0(R9)            .  IS CPU ID HERE
         BE    CPUFOUND                .  YES, GO SAVE FACTOR
         LA    R9,0(R10,R9)            .  NO GET NEXT ENTRY
         BCTR  R11,R8                  .  AND LOOP
CPUFOUND DS    0H                      .
         MVC   FACTOR+2(2),4(R9)       .  SAVE CPU FACTOR (IE: 2.5=25)
         L     R9,0(R15)               .  ADDRESS THE OPTIONS TABLE
         ICM   R9,B'1000',=F'0'        .  RESET HIGH BYTE
         USING OTABLE,R9               .  USE IT
         LA    R8,OENTL                .  GET LENGTH OF EACH LINE
         LA    R10,OLOOP               .  SET LOOP ADDRESS
OLOOP    DS    0H                      .
         BAL   R1,BUILDKEY             .  GO BUILD THE SEARCH KEY
         CLC   SMFKEY,TABKEY           .  IS THERE A MATCH ON SRCH KEY
         BE    CLASSFND                .  YES, GO CONTINUE
         CLC   CLASS,OEND              .  IS IT LAST ENTRY IN TABLE
         BE    CLASSFND                .  YES, THIS IS DEFAULT
         LA    R9,0(R8,R9)             .  GET NEXT LINE ENTRY
         BR    R10                     .  LOOP
CLASSFND DS    0H                      .
         ST    R9,LINE                 .  SAVE LINE ADDRESS
         LR    R9,R0                   .  COPY ENTRY TYPE INTO WORK
         SRA   R9,2                    .  DIVIDE BY 4
         ST    R9,X                    .  SAVE INDEX ADDRESS
         LR    R9,R0                   .  COPY ENTRY TYPE AGAIN
         L     R10,LINE                .  GET OPTION TABLE LINE
         B     *+4(R9)                 .  PERFORM BRANCH TABLE
         B     JCPU                    .    PROCESS JOB CPU
         B     SCPU                    .            STEP CPU
         B     JWAIT                   .            JOB WAIT TIME
JCPU     DS    0H                      .
         LA    R10,JTYPE-CLASS(R10)    .  ADDRESS JOB CPU ENTRY
         B     TABLE1                  .
SCPU     DS    0H                      .
         LA    R10,STYPE-CLASS(R10)    .  ADDRESS STEP CPU ENTRY
         B     TABLE1                  .
JWAIT    DS    0H                      .
         LA    R10,WTYPE-CLASS(R10)    .  ADDRESS JOB WAIT ENTRY
TABLE1   DS    0H                      .
         USING TABLE,R10               .
         MVC   MSG,BLANKS              .
         MVC   H2,TIMES                .  MOVE TIMES FIELD TO HWORD
         MVC   H3,AMT                  .  MOVE AMOUNT FIELD TO HWORD
         CLC   TYPE,CANCEL             .  IS TYPE=CANCEL
         BNE   NOCAN                   .  NO, CHECK ANOTHER
DOCANCEL DS    0H                      .
         MVC   MSG,BLANKS              .  BLANK OUT AREA FIRST
         MVC   MSG(MSG1L),MSG1         .  MOVE IN CANCEL MESSAGE
         L     R9,CPUTIME              .
         CVD   R9,DWORK                .
         MVC   XTIME,=X'4020202020202020214B20' .
         ED    XTIME,DWORK+3           . MOVE IN CPUTIME
         OI    XTIME+L'XTIME-1,X'F0'   . MAKE SIGN PRINTABLE
         MVC   MTIME,XTIME+1           . MOVE JOB INTO MESSAGE
         MVC   MJOB,SMFJOB             . MOVE JOB INTO MESSAGE
         MVC   RETCODE,=H'0'           . CANCEL JOB
         OI    FLAGS,DIDCAN            . REMEMBER DID NORMAL CANCEL
         B     RETURN                  .
NOCAN    DS    0H                      .
         CLC   TYPE,AUTO               . IS IT AUTO EXTEND
         BNE   NOAUT1                  . IT IS NOT THIS KIND OF AUTO
DOAUTO   L     R7,X                    . GET COUNT INDEX
         SR    R6,R6                   .
         IC    R6,SMFUSER(R7)          . INDEX TO COUNT BYTE IN USER
         A     R6,=F'1'                . ADD 1 TO IT
         LH    R4,H3                   . GET AMOUNT TO EXTEND FROM
         SRDA  R4,32                   .     TABLE (IN SECONDS)
         M     R4,=F'38400'            . MULTIPLY BY TU PER SECOND
         ST    R5,24(R3)               . SAVE IN R1 SAVE AREA
         CH    R6,H2                   . HAVE WE EXCEEDED EXTEND COUNT
         BH    EXCEEDOP                . YES GO DO EXCEED OPTION
         STC   R6,SMFUSER(R7)          . SAVE EXCEED COUNT
         MVC   RETCODE,=H'4'           . EXTEND JOB IN TU
         MVC   MSG(MSG2L),MSG2         . MOVE IN AUTO EXTEND MESSAGE
         L     R9,CPUTIME              .
         CVD   R9,DWORK                .
         MVC   XTIME,=X'4020202020202020214B20' .
         ED    XTIME,DWORK+3           . MOVE IN CPUTIME
         OI    XTIME+L'XTIME-1,X'F0'   . MAKE SIGN PRINTABLE
         MVC   MTIME,XTIME+1           . MAKE SIGN PRINTABLE
         LH    R9,H3                   . GET EXTEND AMOUNT
         CVD   R9,DWORK                .
         MVC   MEXTD,=X'402020202021'  . MOVE IN EDIT PATTERN
         ED    MEXTD,DWORK+5           . MOVE IN EXTEND AMOUNT
         OI    MEXTD+L'MEXTD-1,X'F0'   . MAKE SIGN PRINTABLE
         MVC   MJOB,SMFJOB             . MOVE JOB INTO MESSAGE
         OI    FLAGS,DIDAUT            . REMEMBER DID NORMAL AUTO
         B     RETURN                  .
NOAUT1   DS    0H                      .
         CLC   TYPE,CLASSAUT           . IS IT CLASSAUTO
         BNE   NOAUT2                  . NOT THIS KIND OF AUTO EITHER
DOCLAUTO DS    0H                      .
         L     R9,X                    . GET COUNT INDEX
         SR    R6,R6                   .
         IC    R6,SMFUSER(R9)          . INDEX TO COUNT FIELD
         A     R6,=F'1'                . ADD 1 TO IT
         MVC   RETCODE,=H'4'           . EXTEND TIME IN TU
         LH    R4,H3                   . GET CLASS MAX AMT FROM TABLE
         SRDA  R4,32                   .
         M     R4,FACTOR               . R5=CPU ADJUSTED CPU MAX TIME
         L     R15,UTIME               .
         C     R15,=F'0'               .
         BNH   NOUTIME                 .
         CR    R5,R15                  . IS R5 <= USER JOB CARD TIME
         BL    NOUTIME                 .   YES, SKIP TIME OVERRIDE
         L     R5,UTIME                .
NOUTIME  DS    0H                      .
         S     R5,CPUTIME              . R5=DIFF TO ALLOT SSSS.T
         LR    R4,R5                   .
         SRDA  R4,32                   .
         D     R4,=F'10'               . R5=DIFF IN SECONDS
         CH    R6,H2                   . EXCEEDED EXTEND COUNT?
         BH    EXCEEDOP                . YES, GO DO EXCEED OPTION
         C     R5,=F'1'                . IS AMOUNT TO EXTEND < 1 SEC
         BL    EXCEEDOP                . YES, GO DO EXCEED OPTION
         STC   R6,SMFUSER(R9)          . PUT EXCEED COUNT BACK
         MVC   RETCODE,=H'4'           . EXTEND JOB IN TU
         LR    R4,R5                   . SHIFT
         SRDA  R4,32                   .  FOR BIG
         ST    R5,WORK                 .
         M     R4,=F'38400'            .    MULTPLICATION
         ST    R5,24(R3)               . SAVE IN R1 SAVE AREA
         MVC   MSG(MSG2L),MSG2         . MOVE IN AUTO EXTEND MESSAGE
         L     R9,CPUTIME              .
         CVD   R9,DWORK                .
         MVC   XTIME,=X'4020202020202020214B20' .
         ED    XTIME,DWORK+3           . MOVE IN CPUTIME
         OI    XTIME+L'XTIME-1,X'F0'   . MAKE SIGN PRINTABLE
         MVC   MTIME,XTIME+1           . MAKE SIGN PRINTABLE
         L     R9,WORK                 . GET EXTEND AMOUNT
         CVD   R9,DWORK                .
         MVC   MEXTD,=X'402020202021'  . MOVE IN EDIT PATTERN
         ED    MEXTD,DWORK+5           . MOVE IN EXTEND AMOUNT
         OI    MEXTD+L'MEXTD-1,X'F0'   . MAKE SIGN PRINTABLE
         MVC   MJOB,SMFJOB             . MOVE JOB INTO MESSAGE
         OI    FLAGS,DIDCLAUT          . REMEMBER DID CLASS AUTO
         B     RETURN                  .
NOAUT2   DS    0H                      .
         CLC   TYPE,OPER               .  IS OPER INVOLVED
         BNE   NOOPER                  .
DOOPER   DS    0H                      .
         L     R9,X                    .
         SR    R6,R6                   .
         IC    R6,SMFUSER(R9)          .  GET EXTEND COUNT
         A     R6,=F'1'                .  ADD 1 TO IT
         CH    R6,H2                   .  EXCEEDED EXTEND COUNT?
         BH    EXCEEDOP                .  YES, GO DO EXCEED OPTION
         STC   R6,SMFUSER(R9)          .  PUT IF BACK FOR LATER
DOOPERL  DS    0H                      .
         MVC   MSG,BLANKS              .
         MVC   MSG(MSG3L),MSG3         .  MOVE IN EXCEEDED MESSAGE
         MVC   MJOB,SMFJOB             .  MOVE IN JOBNAME
         L     R5,X                    .  SET
         SLA   R5,3                    .    UP
         LA    R5,TYPEM(R5)            .     EXCESSION TYPE
         MVC   MTYPE,0(R5)             .  MOVE IN MESSAGE TYPE
         MVC   MSGE,BLANKS             .
         MVC   MSGE(MSG3L),MSG         .  MOVE MSG INTO REPLY WTO
         XC    ECB,ECB                 .  CLEAR ECB
         WTOR  ,REPLY,2,ECB,MF=(E,WTOE) . ASK OPER ABOUT IT
         L     R14,PARMSAVE            .  RESTORE SMFCET ADDRESS
         WAIT  ECB=ECB,LONG=YES        .  AWAIT REPLY
         TRT   REPLY,REPLYTAB          .  VERIFY NUMERICS
         BZ    OKREPLY                 .  ZERO IF NUMERIC
         MVC   MSG,BLANKS              .  SET UP
         MVC   MSG(MSG4L),MSG4         .    INVALID REPLY
         WTO   MF=(E,WTOMSG)           .      MESSAGE
         B     DOOPERL                 .      AND LOOP
OKREPLY  DS    0H                      .
         PACK  DWORK,REPLY             .  PACK REPLY
         CVB   R8,DWORK                .  AND MAKE IT BINARY
         C     R8,=F'1'                .  IS IT 00 (IE: CANCEL)
         BL    DOCANCEL                .  YES, GO CANCEL FOOL
         SRDA  R8,32                   .  WE MUST CONVERT TO
         M     R8,=F'60'               .   SECONDS SO MULT BY 60*38400
         ST    R9,WORK                 .
         M     R8,=F'38400'            .   SECONDS SO MULT BY 60*38400
         ST    R9,24(R3)               .  SAVE IN R1 SAVE AREA
         MVC   RETCODE,=H'4'           .  EXTEND TIME IN TU
         MVC   MSG(MSG2L),MSG2         . MOVE IN AUTO EXTEND MESSAGE
         L     R9,CPUTIME              .
         CVD   R9,DWORK                .
         MVC   XTIME,=X'4020202020202020214B20' .
         ED    XTIME,DWORK+3           . MOVE IN CPUTIME
         OI    XTIME+L'XTIME-1,X'F0'   . MAKE SIGN PRINTABLE
         MVC   MTIME,XTIME+1           . MAKE SIGN PRINTABLE
         L     R9,WORK                 . GET EXTEND AMOUNT
         CVD   R9,DWORK                .
         MVC   MEXTD,=X'402020202021'  . MOVE IN EDIT PATTERN
         ED    MEXTD,DWORK+5           . MOVE IN EXTEND AMOUNT
         OI    MEXTD+L'MEXTD-1,X'F0'   . MAKE SIGN PRINTABLE
         MVC   MJOB,SMFJOB             . MOVE JOB INTO MESSAGE
         OI    FLAGS,DIDOPER           . REMEMBER WE ASKED OPER BOUTIT
         B     RETURN                  .
EXCEEDOP DS    0H                      .
         CLC   EOPT,CANCEL             . IS EXCEED OPTION = CANCEL
         BE    DOCANCEL                . YES GO DO CANCEL
         CLC   EOPT,OPER               . IS EXCEED OPTION = OPER
         BE    DOOPERL                 . YES, GO DO OPERATOR STUFF
         MVC   MSG,BLANKS              . INVALID EXCEED OPTION
         MVC   MSG(MSG5L),MSG5         . MOVE IN "WHAT THE H*LL" MSG
         MVC   MJOB,SMFJOB             .
         WTO   MF=(E,WTOMSG)           . SEND OUT INVALID EXCEED OPT
         MVC   REPLY,=C'05'            . EXTEND 5 MINUTES DEFAULT
         B     OKREPLY                 .
NOOPER   DS    0H                      . INVALID EXCEED TYPE
*                                      .   (DONT KNOW WHAT TO DO)
         MVC   MSG,BLANKS              .
         MVC   MSG(MSG6L),MSG6         . MOVE IN "WHAT THE SH*T" MSG
         MVC   MJOB,SMFJOB             .
         WTO   MF=(E,WTOMSG)           .
         MVC   REPLY,=C'05'            . EXTEND 5 MINUTES DEFAULT
         B     OKREPLY                 .
RETURN   DS    0H                      .  BUZZ THIS JOINT
         L     R5,X                    .
         SLA   R5,3                    .
         LA    R5,TYPEM(R5)            .
         MVC   MTYPE,0(R5)             .  MOVE IN MESSAGE TYPE
         TM    FLAGS,DIDOPER           .  DID WE ASK OPERATOR?
         BO    PUTITOUT                .     YES, WRITE WTO MSG
         TM    FLAGS,DIDCAN            .  DID WE DO A CANCEL
         BO    PUTITOUT                .
         B     NOPUTOUT                .  DONT PUT OUT TODAY
PUTITOUT DS    0H                      .
         WTO   MF=(E,WTOMSG)           .  WRITE THIS MESSAGE
NOPUTOUT DS    0H                      .
         LH    R3,RETCODE              .  GET MODULE RETURN CODE
         L     R1,GETSIZE              .  USE GETMAIN SIZE
         LR    R2,R13                  .  SAVE WORK ADDRESS
         L     R13,4(R13)              .  GET THEIR SAVE AREA ADDRESS
         L     R14,12(R13)             .  GET RETURN ADDRESS
         FREEMAIN R,LV=(1),A=(2)       .  FREE WORKING STORAGE
         LR    R15,R3                  .  RESTORE RETURN CODE
         LM    R0,R12,20(R13)          .  RESTORE ALL BUT R15
         BR    R14                     .  RETURN TO CALLER
BUILDKEY DS    0H                      .
         STM   R0,R15,SAVE1            .  SAVE IT ALL FOR LATER
         MVC   TABKEY,0(R9)            .  MOVE IN TABLE KEY DATA
         MVC   SMFKEY(L'SMFJC),SMFJC   .  MOVE IN JOBCLASS
         TM    SMFSMFO,X'01'           .  IS THIS FOREGROUND
         BNO   BSKIP1                  .  SKIP NEXT INSTR
         MVC   SMFKEY(L'OTSU),OTSU     .  MAKE CLASS TSU IN KEY
BSKIP1   DS    0H                      .
         MVC   SMFKEY+L'SMFJC(L'SMFJOB),SMFJOB  . MOVE IN JOBNAME
         MVC   SMFKEY+L'SMFJC+L'SMFJOB+L'ACEETRID(L'SMFCPU),SMFCPU
         SR    R15,R15                 .  ADDRESS THE PSA
         L     R15,PSAAOLD-PSA(R15)    .  GET OLD ASCB
         L     R15,ASCBASXB-ASCB(R15)  .  GET THE ASXB
         L     R15,ASXBSENV-ASXB(R15)  .  GET THE ACEE
         MVC   SMFKEY+L'SMFJC+L'SMFJOB(L'ACEETRID),ACEETRID-ACEE(R15)
         LA    R1,SMFKEY               .  GET FIRST CHAR OF SMFKEY POS
         LA    R2,TABKEY               .  GET FIRST CHAR POS OF TABKEY
         LA    R3,L'TABKEY             .  LIMIT THE LOOPING THIS WAY
         LA    R4,BLOOP                .  AND MAKE FOR A FASTER LOOP
BLOOP    CLC   0(1,R2),=C'*'           .  DOES TABKEY(I)='*'
         BNE   BCONT                   .     NO, GET NEXT CHAR
         MVC   0(1,R1),=C'*'           .     YES, MAKE SMFKEY(I)='*'
BCONT    LA    R1,1(R1)                .  GET NEXT CHAR IN SMFKEY
         LA    R2,1(R2)                .      AND TABKEY
         BCTR  R3,R4                   .  LOOP UNTIL TABKEY CHARS PROCD
         LM    R0,R15,SAVE1            .  REMEMBER THIS STUFF???
         BR    R1                      .  RETURN AGAIN
GETSIZE  DS    0F                      .  WORKING STORAGE LENGTH
         DC    AL1(SUBPOOL)            .  AND SUBPOOL
         DC    AL3(WORKSIZE)           .
TYPEM    DC    C'JOB CPU '             .
         DC    C'STEP CPU'             .
         DC    C'JOB WAIT'             .
BLANKS   DC    121CL1' '               .
MSG1     DC    C'IEFUTL1 JOB=12345678 12345678 EXCEEDED,TIME=123456789'
         DC    C'A JOB CANCELED'        .
MSG1L    EQU   *-MSG1                  .
MSG2     DC    C'IEFUTL2 JOB=12345678 12345678 EXCEEDED,TIME=123456789'
         DC    C'A AUTO EXTEND=123456 SECONDS'
MSG2L    EQU   *-MSG2                  .
MSG3     DC    C'IEFUTL3 JOB=12345678 12345678 EXCEEDED,ENTER MINUTES '
         DC    C'"MM" TO EXTEND,OR "00"'
MSG3L    EQU   *-MSG3                  .
MSG4     DC    C'IEFUTL4 INVALID REPLY FOR TIME EXTENSION'
MSG4L    EQU   *-MSG4                  .
MSG5     DC    C'IEFUTL5 JOB=12345678 INVALID EXCESSION OPTION, TIME E'
         DC    C'XTENDED BY 5 MINUTES'
MSG5L    EQU   *-MSG5                  .
MSG6     DC    C'IEFUTL6 JOB=12345678 INVALID OPTIONS TABLE (OPTION TY'
         DC    C'PE). TIME EXTENDED BY 5 MINUTES'
MSG6L    EQU   *-MSG6                  .
MSG7     DC    C'IEFUTL7 JOB=12345678 INTERNAL LOGIC ERROR. TIME EXTEN'
         DC    C'DED BY 1 SECOND.'
MSG7L    EQU   *-MSG7                  .
WTOSHELL WTO   '                                                       X
                                                                       X
                         ',ROUTCDE=(11),DESC=(7),MF=L
WTOSL    EQU   *-WTOSHELL              .
WTORSHEL WTOR  '                                                       X
                                                                       X
                         ',ROUTCDE=(11),DESC=(7),MF=L
WTORSL   EQU   *-WTORSHEL              .
CANCEL   DC    XL1'04'                 .
AUTO     DC    XL1'01'                 .
CLASSAUT DC    XL1'02'                 .
OPER     DC    XL1'03'                 .
REPLYTAB DS    0C                      .
         DC    256XL1'04'              .
         ORG   REPLYTAB+C'0'           .
         DC    10XL1'00'               .
         ORG   ,                       .
OEND     DC    XL1'FF'                 .
OTSU     DC    XL1'00'                 .
SMFCET   DSECT                         .
SMFJOB   DS    CL8                     .  JOB NAME
SMFTS    DS    BL4                     .  TIME STAMP
SMFDS    DS    PL4                     .  DATE STAMP
SMFCPU   DS    CL4                     .  SYSTEM ID
SMFUID   DS    CL8                     .  USERID
SMFSTEP  DS    XL1                     .  STEPNUMBER
SMFSMFO  DS    XL1                     .  SMF OPT
SMFRSTO  DS    XL1                     .  RESTART IND
SMFJC    DS    CL1                     .  JOB CLASS
SMFUSER  DS    CL4                     .  USER COMMUNICATION
OTABLE   DSECT                         .
CLASS    DS    CL1                     .  JOB CLASS
OJOB     DS    CL8                     .     JOB NAME
OTERM    DS    CL8                     .       TERMINAL
OSYS     DS    CL4                     .         SYSTEM
KEYLEN   EQU   *-CLASS                 .
WTYPE    DS    CL1                     .  JOB WAIT ELEMENTS
WAMT     DS    H                       .
WTIMES   DS    H                       .
WEOPT    DS    CL1                     .
STYPE    DS    CL1                     .  STEP CPU ELEMENTS
SAMT     DS    H                       .
STIMES   DS    H                       .
SEOPT    DS    CL1                     .
JTYPE    DS    CL1                     .  JOB CPU ELEMENTS
JAMT     DS    H                       .
JTIMES   DS    H                       .
JEOPT    DS    CL1                     .
JFILL01  DS    CL1                     .
OENTL    EQU   *-CLASS                 .
TABLE    DSECT                         .
TYPE     DS    CL1                     .
AMT      DS    CL2                     .
TIMES    DS    CL2                     .
EOPT     DS    CL1                     .
WORKX    DSECT                         .
SAVE     DS    18F                     .  SAVE AREA LOCATION
SAVE1    DS    18F                     .  SAVE AREA LOCATION
SMFKEY   DS    CL(KEYLEN)              .  SEARCH KEY
TABKEY   DS    CL(KEYLEN)              .  SEARCH KEY
RETCODE  DS    H                       .  MODULE RETURN CODE
         DS    D                       .
WTOMSG   WTO   '                                                       X
                                                                       X
                         ',MF=L
         ORG  WTOMSG+4                 .
MSG      DS    CL121                   .
         ORG   MSG+12                  .
MJOB     DS    CL8                     .
         DS    CL1                     .
MTYPE    DS    CL8                     .
         ORG   MSG+44                  .
MTIME    DS    CL10                    .
         ORG   MSG+67                  .
MEXTD    DS    CL6                     .
         ORG   ,                       .
         DS    D                       .
WTOE     WTOR  '                                                       X
                                                                       X
                         ',MF=L
         ORG   WTOE+12                 .
MSGE     DS    CL121                   .
         ORG   ,                       .
         DS    D                       .
DWORK    DS    D                       .
WORK     DS    F                       .
FACTOR   DS    F                       .
CPUTIME  DS    F                       .
LINE     DS    F                       .
X        DS    F                       .
XTIME    DS    CL11                    .
ECB      DS    F                       .
REPLY    DS    CL2                     .
PARMSAVE DS    F                       .
H2       DS    H                       .
H3       DS    H                       .
FLAGS    DS    CL1                     .
DIDCLAUT EQU   B'10000000'             .
DIDAUT   EQU   B'01000000'             .
DIDOPER  EQU   B'00100000'             .
DIDCAN   EQU   B'00010000'             .
F05      EQU   B'00001000'             .
F06      EQU   B'00000100'             .
F07      EQU   B'00000010'             .
F08      EQU   B'00000001'             .
UTIME    DS    F                       .
WORKSIZE EQU   *-WORKX                 .
         PRINT NOGEN                   .
         IKJTCB ,                      .  TCB STRUCTURE
         DSECT                         .
         IHAPSA ,                      .  PREFIX SAVE AREA
         DSECT                         .
         IHAASCB ,                     .  ADDRESS SPACE CTL BLOCK
         DSECT                         .
         IHAASXB ,                     .  ADDRESS SPACE XTENSION BLOCK
         DSECT                         .
         IHAACEE ,                     .  ACCESS CONTROL ENV ELEMENT
         DSECT                         .
         IEFAJCTB ,                    .  JCT STRUCTURE
LCT      DSECT                         .
         IEFALLCT ,                    .  LCT STRUCTURE
         DSECT                         .
         IEFTCT ,                      .  TCT STRUCTURE
         END   IEFUTL
//ASM2      EXEC PGM=IEUASM,REGION=300K,PARM=('LOAD,NODECK,RENT,TEST')
//SYSGO       DD DSN=&&LOADSET,DISP=(MOD,PASS),
//             DCB=(LRECL=80,BLKSIZE=400,
//             RECFM=FB)
//SYSUT1      DD UNIT=VIO,SPACE=(CYL,05)
//SYSUT2      DD UNIT=SYSDA,SPACE=(CYL,(5,5))
//SYSUT3      DD UNIT=SYSDA,SPACE=(CYL,(5,5))
//SYSPRINT    DD SYSOUT=*,DCB=(BLKSIZE=121,BUFNO=1)
//SYSPUNCH    DD SYSOUT=B,DCB=(BLKSIZE=080,BUFNO=1)
//SYSLIB      DD DSN=SYS1.SMPMTS,DISP=SHR,DCB=BLKSIZE=19040
//            DD DSN=SYS1.SMPSTS,DISP=SHR
//            DD DSN=SYS1.HASPSRC,DISP=SHR
//            DD DSN=SYS1.MACLIB,DISP=SHR
//            DD DSN=SYS1.AMODGEN,DISP=SHR
//SYSIN       DD *
JESJCT  CSECT                          .
        PUSH  PRINT                    .
        PRINT NOGEN                    .
         CVT  DSECT=YES,LIST=NO        .
         IHAPSA                        .
         IKJTCB                        .
         IEFJESCT                      .
         IEFJSSIB                      .
         IEZJSCB                       .
         IEFJSCVT                      .
         COPY $HASPGBL                 .
        $HASPEQU                       .
        $PCE                           .
        $JQE                           .
        $MIT                           .
        $BUFFER                        .
        $JCT                           .
        DROP   R10                     .   JCT DOESNT USE R10
        $SJB                           .
        $CAT                           .
        $HCT                           .
        $SCAT                          .
        $XECB                          .
        $SVT                           .
SMFCET   DSECT                         .
SMFJOB   DS    CL8                     .  JOB NAME
SMFTS    DS    BL4                     .  TIME STAMP
SMFDS    DS    PL4                     .  DATE STAMP
SMFCPU   DS    CL4                     .  SYSTEM ID
SMFUID   DS    CL8                     .  USERID
SMFSTEP  DS    XL1                     .  STEPNUMBER
SMFSMFO  DS    XL1                     .  SMF OPT
SMFRSTO  DS    XL1                     .  RESTART IND
SMFJC    DS    CL1                     .  JOB CLASS
SMFUSER  DS    CL4                     .  USER COMMUNICATION
         POP   PRINT                   .
JESJCT   CSECT
         STM   R14,R12,12(R13)         .  SAVE ALL REGISTERS
         LR    R12,R15                 .  SET UP BASE ADDR FOR MOI
         USING JESJCT,R12              .  AND USE MYSELF BY NAME
         L     R3,0(R1)                .  GET SMFCET POINTER
         USING SMFCET,R3               .
         SLR   R2,R2                   .  RESULT WILL SHOW UP IN R2
         L     R15,PSATOLD-PSA(R2)     .  PULL UP TCB
         L     R15,TCBJSCB-TCB(R15)    .  POINT TO JSCB
         L     R15,JSCBACT-IEZJSCB(R15) . POINT TO ACTIVE JSCB
         L     R9,JSCBSSIB-IEZJSCB(R15) . POINT TO SSIB
         USING SSIB,R9                 .
         L     R15,16                  .  GET CVT AGAIN
         L     R15,CVTJESCT-CVT(R15)   .  GET JES CONTROL TAB
         L     R15,JESSSCT-JESCT(R15)  .  GET FIRST SSCT
         USING SSCT,R15                .
RECHECK  DS    0H                      .
         CLC   SSCTSNAM,SSIBSSNM       .  CHECK SUBSYSTEM MATCH
         BE    CONT01                  .
         L     R15,SSCTSCTA            .  GET NEXT SUBSYS PTR
         CL    R15,=F'0'               .    IS IT SET?
         BE    NOTIME                  .      NO, GET OUT
         B     RECHECK                 .
CONT01   DS    0H                      .
         DROP  R15                     .
         L     R8,SSCTSSVT-SSCT(R15)   .  GET SSVT
         USING $SVDSECT,R8             .  USE BY NAME
         L     R15,$SVJXCLS            .  GET BATCH QUEUE
         TM    SMFSMFO,X'01'           .  IS THIS TSO?
         BNO   NOJCTSU                 .  NOT TSO
         L     R15,$SVJXNUM            .  GET TSO QUEUE
NOJCTSU  DS    0H                      .
         USING SJBDSECT,R15            .  USE BY NAME
RECHECK1 DS    0H                      .
         CL    R15,=F'0'               .  NO MORE SJBS
         BE    NOTIME                  .
         CLC   SMFJOB,SJBJOBNM         .  IS IT A MATCH ON JOB NAME
         BE    FOUND                   .
         L     R15,SJBXQCHN            .  POINT TO NEXT SJB
         B     RECHECK1                .
FOUND    DS    0H                      .
         L     R7,SJBJCT               .  GET USERS JCT
         USING JCTDSECT,R7             .
         CLI   JCTUSERF,X'7F'          .  IS JOB CARD TIME SET?
         BNE   NOTIME                  .   NO, SKIP SAVE
         SLR   R14,R14                 .
         ICM   R14,B'0111',JCTUSERF+1  .
         SRDA  R14,32                  .
         M     R14,=F'10'              .  JOB CARD TIME*10 IN R15
         LR    R2,R15                  .
NOTIME   DS    0H                      .
         LR    R15,R2                  .  GET JOB CARD TIME IN R15
         LM    R0,R12,20(R13)          .
         L     R14,12(R13)             .  GET RETURN ADDR
         BR    R14                     .  RETURN PASSING JOB TIME
         END
//LKED     EXEC PGM=IEWL,REGION=256K,COND=(4,LT),
//            PARM=('LIST,LET,MAP,RENT,REUS,REFR')
//SYSLIB    DD DSN=SYS1.LPALIB,DISP=SHR,UNIT=SYSDA,VOL=SER=DMVSB1
//SYSLIN    DD DSN=&&LOADSET,DISP=(OLD,DELETE)
//          DD DDNAME=SYSIN
//SYSLMOD   DD DISP=SHR,DSN=SYS1.LPALIB,UNIT=SYSDA,VOL=SER=DMVSB1
//SYSPRINT  DD SYSOUT=*,DCB=BLKSIZE=121
//SYSUT1    DD UNIT=SYSDA,SPACE=(CYL,(1,1))
  INCLUDE SYSLIB(IEFUTL)
  ORDER IEFUTL,OTABLE
  ENTRY IEFUTL
  NAME IEFUTL(R)
//
