 /********************* $PARM    REXX/CLIST      *********************/
 /* $PARM                                                            */
 /*                                                                  */
 /*    This exec takes in the parms and substitutes the input (from  */
 /*    DDNAME INPUT) as follows:  &1& with the 1st parm, &2& with    */
 /*    the 2nd parm, and so on.  Several reserved symbols will be    */
 /*    substituted as well.  They are ~xxxx~ whereas xxxx will be    */
 /*    JOBNAME, SYSID, etc ... (look in the code for these reserved  */
 /*    names). If { and } are used, whatever is inside the brackets  */
 /*    will be evaluated as a REXX function.  Of course, this does   */
 /*    include external REXX function as well.                       */
 /*                                                                  */
 /* SYNTAX: $PARM PARM1 PARM2                                        */
 /*    PARMn will be substituted for &n& in the INPUT data and       */
 /*    written out to DDNAME OUTPUT.                                 */
 /*                                                                  */
 /* Some examples for Input Data:                                    */
 /*    LINE1 &1&  &2&                                                */
 /*    LINE2 ~GDATE~~JDATE~ ~TIME~ ~SYSID~ ~WEEKDAY~ ~JOBNAME~       */
 /*    TODAY IS {DATE()} AND TIME IS {TIME()}                        */
 /*    {$DATE('J2G',$DATE('R2J',$DATE('J2R','19'××DATE('J'))+3))}    */
 /*       ---- Calc the dates for 3 days from now ----               */
 /*                                                                  */
 /********************************************************************/

SYSDATA. = ''
Call GET_SYSINFO

PFX = ' '
INDATA.  = ''
ARRAY.   = ''

Parse Arg PARMS
PARMS = Strip(PARMS)

NUM_PARM = Words(PARMS)

Say PFX Time() Copies('-',80)
Say PFX Time() '- Run starts on' Date(W)××', '××Date(U)
Say PFX Time() Copies('-',80)

Do I=1 To NUM_PARM
   ARRAY.I = Strip(WORD(PARMS,I))
   Say PFX Time() '- Parm' I':' ARRAY.I
   End
Say PFX Time() Copies('-',80)

READ_USERS:

'EXECIO * DISKR INPUT   (STEM INDATA. FINIS'

Do I=1 to INDATA.0
   CNT = 0
   Do J=1 To NUM_PARM
      PATTERN = '&'××Strip(Format(J,3,0))××'&'
      Do While Pos(PATTERN,INDATA.I) > 0             /* Go against */
         Parse Var INDATA.I PART1 (PATTERN) PART2    /* parm table */
         INDATA.I = PART1××ARRAY.J××PART2            /* and subst  */
         CNT = CNT + 1                               /* all data   */
         End                                         /*Do While Pos*/
      End                                            /* Do J=1     */

   Do While Pos('~',INDATA.I) > 0                    /* Go against */
      Parse Var INDATA.I PART1 '~' TOKEN '~' PART2   /* SYSINFO tbl*/
      TOKEN = Strip(Word(TOKEN,1))
      INDATA.I = PART1××SYSDATA.TOKEN××PART2         /* and subst  */
      CNT = CNT + 1                                  /* all data   */
      End                                            /*Do While Pos*/

   Do While Pos('{',INDATA.I) > 0                    /* Execute REXX  */
      Parse Var INDATA.I PART1 '{' RFUNC '}' PART2   /* function      */
      END_RESULT = 'NEWDATA='
      Interpret END_RESULT RFUNC
      INDATA.I = PART1××NEWDATA××PART2
      CNT = CNT + 1
      End

   If CNT > 0 Then Do
      Say PFX Time() '- Data substituted for record #',
          Format(I,4,0)××':' INDATA.I
      End
   End                                               /* Do I=1     */


END_ALLUSERS:
'EXECIO * DISKW OUTPUT  (STEM INDATA. FINIS'

Say PFX Time() Copies('-',80)
Say PFX Time() '- Run stops on' Date(W)××', '××Date(U)

Exit


GET_SYSINFO:

Numeric Digits 256

CVT             = Get_Stor('10'x)
ASCB            = Get_Stor(0,'224'x)
ASXB            = Get_Stor(ASCB,'6C'x)
LDA             = Get_Stor(ASCB,'30'x)
ACEE            = Get_Stor(ASXB,'C8'x)
GDA             = Get_Stor(CVT,'230'x)

TCB             = Get_Stor(0,'21C'x)
TIOT            = Get_Stor(TCB,'C'x)
JSCB            = Get_Stor(TCB,'B5'x,3)
SSIB            = Get_Stor(JSCB,'13C'x)
TCT             = Get_Stor(TCB,'A4'x)
LCT             = Get_Stor(TCT,'98'x)
OUCB            = Get_Stor(ASCB,'90'x)
OUXB            = Get_Stor(ASCB,'94'x)

JCT             = Get_Stor(LCT,'10'x)
JCTX            = Get_Stor(LCT,'188'x)
SCT             = Get_Stor(LCT,'14'x)
CSCB            = Get_Stor(LCT,'0'x)
JMR             = Get_Stor(LCT,'144'x)


RACNAME@        = Get_Stor(ACEE,'64'x)
RACNAME#        = C2D(Get_Stor(RACNAME@,0,1))

RACINST@        = Get_Stor(ACEE,'10'x)
RACINST#        = C2D(Get_Stor(RACINST@,0,1))

SYSDATA.GDATE   = Strip(Date(S))
SYSDATA.JDATE   = Strip(Date(J))
SYSDATA.JOBID   = Strip(Get_Stor(SSIB,'C'x,8))
SYSDATA.JOBNAME = Strip(Get_Stor(TIOT,0,8))
SYSDATA.MSGCLASS= Get_Stor(JCT,'6'x,1)
SYSDATA.RACGROUP= Strip(Get_Stor(ACEE,'1E'x,8))
SYSDATA.RACINST = Strip(Get_Stor(RACINST@,1,(RACINST#-1)))
SYSDATA.RACNAME = Strip(Get_Stor(RACNAME@,1,(RACNAME#-1)))
SYSDATA.RACUSER = Strip(Get_Stor(ACEE,'15'x,8))
SYSDATA.STEPNAME= Strip(Get_Stor(TCT,'C8'x,8))
SYSDATA.SYSID   = Strip(Get_Stor(CVT,'154'x,8))
SYSDATA.TIME    = Strip(Time())
SYSDATA.USERID  = Strip(Get_Stor(JCT,'A0'x,7))
SYSDATA.WEEKDAY = Strip(Date(W))
SYSDATA.XEQCLASS= Get_Stor(JCT,'1F'x,1)

Return



Get_Stor: PROCEDURE

/*------------------------------------------------------------------*/
/*                                                                  */
/*      This procedure will extract data using the MVS Storage      */
/*      function. Input arguments will be:                          */
/*                                                                  */
/*      1) Storage_Pointer or Literal, i.e. CVTPTR or '10'x, or     */
/*         16 (like '10'x)                                          */
/*      2) Offset in hex or dec (numnbe), i.e. 'FF'x or 256 or      */
/*         D2C(256)                                                 */
/*      3) Length of returned data in decimal, i.e. 256             */
/*                                                                  */
/*      NOTE - To make sure that this procedure will work all the   */
/*      times, just include 'NUMERIC DIGITS 256' at the beginning   */
/*      of the calling REXX exec.                                   */
/*                                                                  */
/*------------------------------------------------------------------*/

Parse Arg AREA,OFFSET,LENG

If Arg(2,'O') Then OFFSET=0

If Arg(3,'O') Then LENG=4

If DataType(AREA) = 'CHAR' Then Do
   AREA =  C2D(AREA)
   End

If DataType(OFFSET) = 'CHAR' Then Do
   OFFSET =  C2D(OFFSET)
   End

Return  Storage((D2X(AREA+OFFSET)),LENG)

