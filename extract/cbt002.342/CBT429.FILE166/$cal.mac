 /********************* $CAL     REXX/CLIST      *********************/
 /* $CAL                                                             */
 /*                                                                  */
 /*    This REXX exec will display the whole month calendar.         */
 /*                                                                  */
 /* SYNTAX: $CAL                        (Current Date)               */
 /*         $CAL MM/YYYY                (Specific Month)             */
 /*         $CAL MM/DD/YYYY             (Specific Date)              */
 /*                                                                  */
 /*   Note:  The year is 4-digit year.  If only 2 digits are used,   */
 /*   then that year is used (1900 will not be added to it).         */
 /*                                                                  */
 /********************************************************************/

Drop DISP.
DISP.Sun = 0
DISP.Mon = 3
DISP.Tue = 6
DISP.Wed = 9
DISP.Thu = 12
DISP.Fri = 15
DISP.Sat = 18

Parse Source . . EXEC_NAME .

EXTRA_SPACE = Copies(' ',2)
CURR_DATE = DATE(S)  /* YYYYMMDD */
USA_DATE  = DATE(U)  /* MM/DD/YY   */

Parse Arg IN_DATA
Parse Var IN_DATA  P1 '/' P2 '/' P3
If P1 ^= '' & P2 = '' & P3 = '' Then Do
   MM = P1
   DD = 1
   YY = Substr(CURR_DATE,1,4)
   End
Else If P1 ^= '' & P2 ^= '' & P3 = '' Then Do
      MM = P1
      DD = 1
      YY = P2
      End
   Else If IN_DATA  = '' Then Do
         MM = Substr(USA_DATE,1,2)
         DD = Substr(USA_DATE,4,2)
         YY = Substr(CURR_DATE,1,4)
         End
        Else Do
         MM = P1
         DD = P2
         YY = P3
         End


If Datatype(DD) ^= 'NUM' ×,
   Datatype(MM) ^= 'NUM' ×,
   Datatype(YY) ^= 'NUM' ×,
   DD < 1                ×,
   DD > 31               ×,
   MM < 1                ×,
   MM > 12               ×,
   YY < 1                ×,
   YY > 9998             Then  Do
      ZEDLMSG = 'Invalid date as' MM××'/'××DD××'/'××YY
      Call ERR_DISP
      Exit
      End
Else Do
   MO.1  = 31
   MO.2  = 28
   MO.3  = 31
   MO.4  = 30
   MO.5  = 31
   MO.6  = 30
   MO.7  = 31
   MO.8  = 31
   MO.9  = 30
   MO.10 = 31
   MO.11 = 30
   MO.12 = 31
   If LEAP_YEAR(YY) Then MO.2 = 29
   MM = Strip(MM,L,'0')
   If DD > MO.MM Then Do
      ZEDLMSG = 'Invalid number of days in non-leap year'
      Call ERR_DISP
      Exit
      End
   End

DD = Right(DD,2,'0')
MM = Right(MM,2,'0')
YY = Right(YY,4,'0')

MY_TODAY = DD

TEXT_LINE. = ''
HEAD1 = ''
HEAD2 = ''
HM1   = ''
HM2   = ''

If MM = 1 Then Do
   MM = 12
   YY = Right(YY-1,4,'0')
   End
Else MM = Right(MM-1,2,'0')

R_D =  $DATE('J2R',$DATE('G2J',MM××'/1/'××YY))
STRT_DAY = $DATE('R2D',R_D)
BEG_DISP = Value(DISP.STRT_DAY)

Call BUILD_IT MM,YY
Call SPACE_OUT


If MM = 12 Then Do
   MM = 01
   YY = Right(YY+1,4,'0')
   End
Else MM = Right(MM+1,2,'0')

R_D =  $DATE('J2R',$DATE('G2J',MM××'/1/'××YY))
STRT_DAY = $DATE('R2D',R_D)
BEG_DISP = Value(DISP.STRT_DAY)

MARKED_LINE = 0
MARKED_DISP = 0

MYJUL = Strip($DATE('G2J',MM××'/'××DD××'/'××YY))
MYJUL = Substr(MYJUL,1,4)××'.'××Substr(MYJUL,5,3)

Call BUILD_IT MM,YY,MY_TODAY   /* This is current month */
Call SPACE_OUT


If MM = 12 Then Do
   MM = 01
   YY = Right(YY+1,4,'0')
   End
Else MM = Right(MM+1,2,'0')

R_D =  $DATE('J2R',$DATE('G2J',MM××'/1/'××YY))
STRT_DAY = $DATE('R2D',R_D)
BEG_DISP = Value(DISP.STRT_DAY)

Call BUILD_IT MM,YY
LINE1 = Substr(TEXT_LINE.1,1,68)
LINE2 = Substr(TEXT_LINE.2,1,68)
LINE3 = Substr(TEXT_LINE.3,1,68)
LINE4 = Substr(TEXT_LINE.4,1,68)
LINE5 = Substr(TEXT_LINE.5,1,68)
LINE6 = Substr(TEXT_LINE.6,1,68)
MASK1 = Copies('06'x,68)   /* Use } to hilite */
MASK2 = Copies('06'x,68)
MASK3 = Copies('06'x,68)
MASK4 = Copies('06'x,68)
MASK5 = Copies('06'x,68)
MASK6 = Copies('06'x,68)
HM1   = Copies('!',Length(HEAD1))
TEMP  = "Overlay(' }}',MASK"××MARKED_LINE××","××MARKED_DISP+1××")"
TEMP  = "MASK"××MARKED_LINE××" = "××TEMP
Interpret TEMP
Address ISPEXEC
'ADDPOP COLUMN(2) ROW(1)'
'DISPLAY PANEL($CALMON)'
Temprc = RC
'REMPOP'
Address TSO

Exit



ERR_DISP:
ZEDSMSG = EXEC_NAME 'Error - Press HELP key'
Address ISPEXEC 'SETMSG MSG(ISRZ001)'
Return




SPACE_OUT:
Do I=1 To 6
   TEXT_LINE.I = TEXT_LINE.I××EXTRA_SPACE
   End
HEAD1 = HEAD1××EXTRA_SPACE
HEAD2 = HEAD2××EXTRA_SPACE
HM1   = HM1××EXTRA_SPACE
HM2   = HM2××EXTRA_SPACE
Return


BUILD_IT:
Parse Arg IN_MM,IN_YY,FLAG_TODAY

MO.1  = 31
MO.2  = 28
MO.3  = 31
MO.4  = 30
MO.5  = 31
MO.6  = 30
MO.7  = 31
MO.8  = 31
MO.9  = 30
MO.10 = 31
MO.11 = 30
MO.12 = 31
If LEAP_YEAR(IN_YY) Then MO.2 = 29
IN_MM = Strip(IN_MM,L,'0')
END_DAY = MO.IN_MM

TEXT_LINE.1 = TEXT_LINE.1××Copies(' ',BEG_DISP)
LINE# = 1

Do I=1 To END_DAY
   If BEG_DISP > 18 Then Do
      LINE# = LINE# + 1
      BEG_DISP = 0
      End
   If FLAG_TODAY = I Then Do
      MARKED_LINE = LINE#
      MARKED_DISP = Length(TEXT_LINE.LINE#)
      End
   TEXT_LINE.LINE# = TEXT_LINE.LINE#××' '××Right(I,2)
   BEG_DISP = BEG_DISP + 3
   End
TEXT_LINE.4 = Substr(TEXT_LINE.4,1,Length(TEXT_LINE.1))
TEXT_LINE.5 = Substr(TEXT_LINE.5,1,Length(TEXT_LINE.1))
TEXT_LINE.6 = Substr(TEXT_LINE.6,1,Length(TEXT_LINE.1))
HEAD1 = HEAD1××' '××Center((MONTH_NAME(MM)××' '××YY),20)
HEAD2 = HEAD2××' Su Mo Tu We Th Fr Sa'
HM2   =   HM2××' {{ ## ## ## ## ## {{'
Return


MONTH_NAME: Procedure

MONTH.1  = 'Jan'
MONTH.2  = 'Feb'
MONTH.3  = 'Mar'
MONTH.4  = 'Apr'
MONTH.5  = 'May'
MONTH.6  = 'Jun'
MONTH.7  = 'Jul'
MONTH.8  = 'Aug'
MONTH.9  = 'Sep'
MONTH.10 = 'Oct'
MONTH.11 = 'Nov'
MONTH.12 = 'Dec'
Parse Upper Arg IN_MONTH
IN_MONTH = Strip(IN_MONTH,L,'0')
Return MONTH.IN_MONTH


/*                                 REXX                             */
/*------------------------------------------------------------------*/
/*                                                                  */
/*      This REXX exec will do date conversion:                     */
/*                                                                  */
/*      Call Format:  DATE = $DATE(CODE,INPUT)                      */
/*                                                                  */
/*          CODE = 'J2G' - Julian to Gregorian date                 */
/*          CODE = 'G2J' - Gregorian date to Julian                 */
/*          CODE = 'J2R' - Julian to Relative date                  */
/*          CODE = 'R2J' - Relative to Julian date                  */
/*          CODE = 'R2D' - Relative to day, i.e Sun, Mon, etc..     */
/*                                                                  */
/*          INPUT = either 'MM/DD/YYYY' or 'YYYYDDD' or 'nnnn'      */
/*                                                                  */
/*      Errors during processing will return 0 as result and        */
/*      an error message will be displayed as well.                 */
/*                                                                  */
/*------------------------------------------------------------------*/

$DATE: Procedure

Parse Upper Arg FUNC,DATE

If DATE = '' Then RET_DATE = 0
Else Select
      When FUNC = 'J2G' Then RET_DATE = J2G_PROC(DATE)
      When FUNC = 'G2J' Then RET_DATE = G2J_PROC(DATE)
      When FUNC = 'J2R' Then RET_DATE = J2R_PROC(DATE)
      When FUNC = 'R2J' Then RET_DATE = R2J_PROC(DATE)
      When FUNC = 'R2D' Then RET_DATE = R2D_PROC(DATE)
      Otherwise Do
         Say 'DT999E - Invalid function code as' FUNC
         RET_DATE = 0
         End
   End

Return RET_DATE



J2G_PROC: Procedure

Parse Arg JUL_DATE

Call VALIDATE_JULIAN
If RESULT = 0 Then G_DATE = 0
Else Do
   JULIAN_YYYY = Substr(JUL_DATE,1,4)
   JULIAN_DDD  = Substr(JUL_DATE,5,3)
   MO.1  = 31
   MO.2  = 28
   MO.3  = 31
   MO.4  = 30
   MO.5  = 31
   MO.6  = 30
   MO.7  = 31
   MO.8  = 31
   MO.9  = 30
   MO.10 = 31
   MO.11 = 30
   MO.12 = 31
   If LEAP_YEAR(JULIAN_YYYY) Then MO.2 = 29
   Do I=1 to 12 While JULIAN_DDD > MO.I
      JULIAN_DDD = JULIAN_DDD - MO.I
      End
   MM   = Right(I,2,'0')
   DD   = Right(JULIAN_DDD,2,'0')
   G_DATE = MM××'/'××DD××'/'××JULIAN_YYYY
   End

Return G_DATE


G2J_PROC: Procedure

Parse Arg GEO_DATE
Parse Var GEO_DATE MM '/' DD '/' YYYY
J_DATE = 0

If Datatype(MM)   ^= 'NUM' × ,
   Datatype(DD)   ^= 'NUM' × ,
   Datatype(YYYY) ^= 'NUM' × ,
   DD > 31                 × ,
   MM < 1                  × ,
   MM > 12                 × ,
   YYYY > 9999          Then ,
      Say 'DT001E - Invalid Gregorian date as' GEO_DATE
Else Do
   MO.1  = 31
   MO.2  = 28
   MO.3  = 31
   MO.4  = 30
   MO.5  = 31
   MO.6  = 30
   MO.7  = 31
   MO.8  = 31
   MO.9  = 30
   MO.10 = 31
   MO.11 = 30
   MO.12 = 31
   If LEAP_YEAR(YYYY) Then MO.2 = 29
   MM = Strip(MM,'L','0')
   If (DD > Value(MO.MM)) Then ,
       Say 'DT002E - Out-of-range date as' GEO_DATE
   Else Do
      J_ACCUM_DAY = 0
      If MM > 1 Then Do I=1 to (MM-1)
         J_ACCUM_DAY = J_ACCUM_DAY + MO.I
         End
      J_ACCUM_DAY = J_ACCUM_DAY + DD
      J_DATE      = YYYY××Right(J_ACCUM_DAY,3,'0')
      End
   End

Return J_DATE




J2R_PROC: Procedure

Parse Arg JUL_DATE

Call VALIDATE_JULIAN
If RESULT = 1 Then R_DATE = ((JULIAN_YYYY-1) * 365) + ,
                            ((JULIAN_YYYY-1) % 4) - ,
                            ((JULIAN_YYYY-1) % 100) + ,
                            ((JULIAN_YYYY-1) % 400) + (JULIAN_DDD)
   Else R_DATE = 0
Return R_DATE



R2J_PROC: Procedure
Parse Arg REL_DATE
RETURNED_J = 0

If Datatype(REL_DATE) ^= 'NUM' Then ,
   Say 'DT006E - Relative date non-numeric as' REL_DATE
Else Do
   If REL_DATE > 3652424 Then ,
      Say 'DT007E - Relative date out-of-range as' REL_DATE
   Else Do
      TEMP_YYYY = (REL_DATE % 366) + 1
      TEMP_REL = J2R_PROC(Right(TEMP_YYYY,4,'0')××'000')
      Do While (REL_DATE - TEMP_REL) > 0
         If LEAP_YEAR(TEMP_YYYY) Then LEFT_OVER = 366
         Else LEFT_OVER = 365
         If LEFT_OVER < (REL_DATE - TEMP_REL) Then Do
            TEMP_REL  = TEMP_REL  + LEFT_OVER
            TEMP_YYYY = TEMP_YYYY + 1
            End
         Else Do
            TEMP_DDD = (REL_DATE - TEMP_REL)
            Leave
            End
         End
      RETURNED_J =  Right(TEMP_YYYY,4,'0')××Right(TEMP_DDD,3,'0')
   End
End

Return RETURNED_J


R2D_PROC: Procedure
Parse Arg REL_DATE
RETURNED_DAY = 0
If Datatype(REL_DATE) ^= 'NUM' Then ,
   Say 'DT006E - Relative date non-numeric as' REL_DATE
Else Do
   If REL_DATE > 3652424 Then ,
      Say 'DT007E - Relative date out-of-range as' REL_DATE
   Else Do
      DAY_INDEX = (REL_DATE // 7)+1
      RETURNED_DAY  = Word('Sun Mon Tue Wed Thu Fri Sat',DAY_INDEX)
   End
End

Return RETURNED_DAY





VALIDATE_JULIAN:

VALID_DATE = 0

If Length(JUL_DATE) ^=7 × Datatype(JUL_DATE) ^= 'NUM' Then
   Say 'DT003E - Date too short/long or non-numeric as' JUL_DATE
Else Do
   JULIAN_YYYY = Substr(JUL_DATE,1,4)
   JULIAN_DDD  = Substr(JUL_DATE,5,3)
   If (JULIAN_DDD > 366) Then ,
      Say 'DT004E - Number of day > 366 as' JULIAN_DDD
   Else If (LEAP_YEAR(JULIAN_YYYY) = 0) & (JULIAN_DDD = 366) Then ,
          Say 'DT005E - Invalid days for a non-leap year as' JULIAN_YYYY
        Else If (JULIAN_YYYY < 1) Then ,
           Say 'DT008E - Invalid year as' JULIAN_YYYY
           Else VALID_DATE = 1
   End
Return VALID_DATE



LEAP_YEAR: Procedure
Parse Arg YEAR_CHECKED

If (YEAR_CHECKED // 100) = 0 Then ,
   If (YEAR_CHECKED // 400) = 0 Then LEAP_YEAR_FLAG = 1
   Else LEAP_YEAR_FLAG = 0
Else If (YEAR_CHECKED // 4) = 0 Then LEAP_YEAR_FLAG = 1
   Else LEAP_YEAR_FLAG = 0

Return LEAP_YEAR_FLAG
