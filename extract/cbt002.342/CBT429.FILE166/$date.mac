/*                                 REXX                             */
/*------------------------------------------------------------------*/
/*                                                                  */
/*      This REXX exec will do date conversion:                     */
/*                                                                  */
/*      Call Format:  DATE = $DATE(CODE,INPUT)                      */
/*                                                                  */
/*          CODE = 'J2G' - Julian to Gregorian date                 */
/*          CODE = 'G2J' - Gregorian date to Julian                 */
/*          CODE = 'J2R' - Julian to Relative date                  */
/*          CODE = 'R2J' - Relative to Julian date                  */
/*          CODE = 'R2D' - Relative to day, i.e Sun, Mon, etc..     */
/*                                                                  */
/*          INPUT = either 'MM/DD/YYYY' or 'YYYYDDD' or 'nnnn'      */
/*                                                                  */
/*      Errors during processing will return 0 as result and        */
/*      an error message will be displayed as well.                 */
/*                                                                  */
/*------------------------------------------------------------------*/

$DATE:

Parse Upper Arg FUNC,DATE

If DATE = '' Then RET_DATE = 0
Else Select
      When FUNC = 'J2G' Then RET_DATE = J2G_PROC(DATE)
      When FUNC = 'G2J' Then RET_DATE = G2J_PROC(DATE)
      When FUNC = 'J2R' Then RET_DATE = J2R_PROC(DATE)
      When FUNC = 'R2J' Then RET_DATE = R2J_PROC(DATE)
      When FUNC = 'R2D' Then RET_DATE = R2D_PROC(DATE)
      Otherwise Do
         Say 'DT999E - Invalid function code as' FUNC
         RET_DATE = 0
         End
   End

Return RET_DATE



J2G_PROC: Procedure

Parse Arg JUL_DATE

Call VALIDATE_JULIAN
If RESULT = 0 Then G_DATE = 0
Else Do
   JULIAN_YYYY = Substr(JUL_DATE,1,4)
   JULIAN_DDD  = Substr(JUL_DATE,5,3)
   MO.1  = 31
   MO.2  = 28
   MO.3  = 31
   MO.4  = 30
   MO.5  = 31
   MO.6  = 30
   MO.7  = 31
   MO.8  = 31
   MO.9  = 30
   MO.10 = 31
   MO.11 = 30
   MO.12 = 31
   If LEAP_YEAR(JULIAN_YYYY) Then MO.2 = 29
   Do I=1 to 12 While JULIAN_DDD > MO.I
      JULIAN_DDD = JULIAN_DDD - MO.I
      End
   MM   = Right(I,2,'0')
   DD   = Right(JULIAN_DDD,2,'0')
   G_DATE = MM××'/'××DD××'/'××JULIAN_YYYY
   End

Return G_DATE


G2J_PROC: Procedure

Parse Arg GEO_DATE
Parse Var GEO_DATE MM '/' DD '/' YYYY
J_DATE = 0

If Datatype(MM)   ^= 'NUM' × ,
   Datatype(DD)   ^= 'NUM' × ,
   Datatype(YYYY) ^= 'NUM' × ,
   DD > 31                 × ,
   MM < 1                  × ,
   MM > 12                 × ,
   YYYY > 9999          Then ,
      Say 'DT001E - Invalid Gregorian date as' GEO_DATE
Else Do
   MO.1  = 31
   MO.2  = 28
   MO.3  = 31
   MO.4  = 30
   MO.5  = 31
   MO.6  = 30
   MO.7  = 31
   MO.8  = 31
   MO.9  = 30
   MO.10 = 31
   MO.11 = 30
   MO.12 = 31
   If LEAP_YEAR(YYYY) Then MO.2 = 29
   MM = Strip(MM,'L','0')
   If (DD > Value(MO.MM)) Then ,
       Say 'DT002E - Out-of-range date as' GEO_DATE
   Else Do
      J_ACCUM_DAY = 0
      If MM > 1 Then Do I=1 to (MM-1)
         J_ACCUM_DAY = J_ACCUM_DAY + MO.I
         End
      J_ACCUM_DAY = J_ACCUM_DAY + DD
      J_DATE      = YYYY××Right(J_ACCUM_DAY,3,'0')
      End
   End

Return J_DATE




J2R_PROC: Procedure

Parse Arg JUL_DATE

Call VALIDATE_JULIAN
If RESULT = 1 Then R_DATE = ((JULIAN_YYYY-1) * 365) + ,
                            ((JULIAN_YYYY-1) % 4) - ,
                            ((JULIAN_YYYY-1) % 100) + ,
                            ((JULIAN_YYYY-1) % 400) + (JULIAN_DDD)
   Else R_DATE = 0
Return R_DATE



R2J_PROC: Procedure
Parse Arg REL_DATE
RETURNED_J = 0

If Datatype(REL_DATE) ^= 'NUM' Then ,
   Say 'DT006E - Relative date non-numeric as' REL_DATE
Else Do
   If REL_DATE > 3652424 Then ,
      Say 'DT007E - Relative date out-of-range as' REL_DATE
   Else Do
      TEMP_YYYY = (REL_DATE % 366) + 1
      TEMP_REL = J2R_PROC(Right(TEMP_YYYY,4,'0')××'000')
      Do While (REL_DATE - TEMP_REL) > 0
         If LEAP_YEAR(TEMP_YYYY) Then LEFT_OVER = 366
         Else LEFT_OVER = 365
         If LEFT_OVER < (REL_DATE - TEMP_REL) Then Do
            TEMP_REL  = TEMP_REL  + LEFT_OVER
            TEMP_YYYY = TEMP_YYYY + 1
            End
         Else Do
            TEMP_DDD = (REL_DATE - TEMP_REL)
            Leave
            End
         End
      RETURNED_J =  Right(TEMP_YYYY,4,'0')××Right(TEMP_DDD,3,'0')
   End
End

Return RETURNED_J


R2D_PROC: Procedure
Parse Arg REL_DATE
RETURNED_DAY = 0
If Datatype(REL_DATE) ^= 'NUM' Then ,
   Say 'DT006E - Relative date non-numeric as' REL_DATE
Else Do
   If REL_DATE > 3652424 Then ,
      Say 'DT007E - Relative date out-of-range as' REL_DATE
   Else Do
      DAY_INDEX = (REL_DATE // 7)+1
      RETURNED_DAY  = Word('Sun Mon Tue Wed Thu Fri Sat',DAY_INDEX)
   End
End

Return RETURNED_DAY





VALIDATE_JULIAN:

VALID_DATE = 0

If Length(JUL_DATE) ^=7 × Datatype(JUL_DATE) ^= 'NUM' Then
   Say 'DT003E - Date too short/long or non-numeric as' JUL_DATE
Else Do
   JULIAN_YYYY = Substr(JUL_DATE,1,4)
   JULIAN_DDD  = Substr(JUL_DATE,5,3)
   If (JULIAN_DDD > 366) Then ,
      Say 'DT004E - Number of day > 366 as' JULIAN_DDD
   Else If (LEAP_YEAR(JULIAN_YYYY) = 0) & (JULIAN_DDD = 366) Then ,
          Say 'DT005E - Invalid days for a non-leap year as' JULIAN_YYYY
        Else If (JULIAN_YYYY < 1) Then ,
           Say 'DT008E - Invalid year as' JULIAN_YYYY
           Else VALID_DATE = 1
   End
Return VALID_DATE



LEAP_YEAR: Procedure
Parse Arg YEAR_CHECKED

If (YEAR_CHECKED // 100) = 0 Then ,
   If (YEAR_CHECKED // 400) = 0 Then LEAP_YEAR_FLAG = 1
   Else LEAP_YEAR_FLAG = 0
Else If (YEAR_CHECKED // 4) = 0 Then LEAP_YEAR_FLAG = 1
   Else LEAP_YEAR_FLAG = 0

Return LEAP_YEAR_FLAG
