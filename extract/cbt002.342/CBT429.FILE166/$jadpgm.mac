$JADPGM  TITLE '-- JOB ACTIVITY DISPLAY - &SYSDATE - &SYSTIME --'
$JADPGM  AMODE 31
$JADPGM  RMODE ANY
         PRINT NOGEN
*
*---------------------------------------------------------------------
*
*        AUTHOR - VINH VU
*        DATE WRITTEN - 01/13/95
*
*        REGISTER USAGE
*
*              R0  - WORK
*              R1  - WORK
*              R2  - USED AS BASE FOR CVT, ASVT ...
*              R3  - USED AS COUNT IN LOOPING THROUGH ASCB
*              R4  - USED AS BASE FOR OUCB, OUXB ..
*              R5  -
*              R6  -
*              R7  -
*              R8  -
*              R9  - USED AS SUBROUTINE RC
*              R10 -
*              R11 - BASE REG
*              R12 - BASE REG
*              R13 -
*              R14 - TEMP - RETURN ADDRESS TO CALLER
*              R15 - TEMP - ADCON/ENTRY ADDRESS
*
*        PURPOSE -
*              THIS PGM WILL GO THROUGH THE ASCB CHAIN AND DISPLAY
*              INFORMATION ABOUT EACH ADDRESS SPACE.  ISPF TABLE
*              FACILITY IS USED, WHICH ALLOWS SORTING ON ANY OF
*              THE FIELDS.  SOME OF THE INFORMATION DISPLAYED INCLUDE:
*              TCB, SRB, EXCP, TOT STOR, CENTRAL, EXPANDED, SWAP STAT.
*              SINCE SORTING IS ALLOWED, THIS PGM WILL GIVE DIFFERENT
*              VIEWS OF THE SYSTEM.
*
*        SYNTAX -
*              $JADPGM (NO OPERANDS REQUIRED)
*
*---------------------------------------------------------------------
*
$JADPGM  CSECT
         SET   (R12,R11),LV=WKLENG,DSECT=WKAREA
*
         MVC   WLINKQRY,LINKQRY    MOVE TO WK AREA
         LINK  SF=(E,WLINKQRY)     CALL 'ISPQRY'
         LTR   R15,R15             TEST FOR RET CODE
         BNZ   END$JAD             IF NON-ZERO THEN EXIT
*
         XC    LINKADD,LINKADD     CLEAR OUT THE SAVED ADDRESS
         LOAD  EP=ISPLINK
         ST    R0,LINKADD          NOW SAVE THE ENTRY ADDRESS
*
         XC    SWITCH,SWITCH       CLEAR OUT THE SWITCH
         OI    SWITCH,$REFRESH     TURN ON 'REFRESH REQUIRED' SWITCH
*
*------- DO 'ISPEXEC CONTROL ERRORS RETURN'
*
         $BLDLIST WKPARM,(CONTROL,      ** FUNCTION **                 X
               ERRRET),VL
         L     R15,LINKADD         GET LOAD ADDRESS
         BALR  R14,R15             DO THE CALL
*
*------- DEFINE ALL ISPF VARIABLES
*
         $BLDLIST WKPARM,(VDEFINE,      ** FUNCTION **                 X
               DEFVAR,                  ** VAR NAMES **                X
               WVARS,                   ** MY STORAGE FOR VAR **       X
               VARFORM,                 ** VAR FORMAT ARRAY **         X
               VARLENG,                 ** VAR LENGTH ARRAY **         X
               LIST),VL
*
         L     R15,LINKADD         GET LOAD ADDRESS
         BALR  R14,R15             DO THE CALL
         LTR   R15,R15             IS RETURN CODE GOOD
         BZ    GETINFO             YEAH - THEN GO THRU
         ABEND 999
*
*
GETINFO  EQU   *
         L     R2,CVTPTR           GET ADDRESS OF CVT
         USING CVT,R2              ESTABLISH ADDRESSABILITY
         MVC   SYSID,CVTSNAME      SAVE THE SYSID
         L     R14,CVTRLSTG        GET REAL STORAGE
         SRL   R14,10              K'S -> MEG (DIVIDE BY 1024)
         ST    R14,TOTREAL         SAVE THIS
         L     R15,CVTRCEP         GET ADDRESS OF RCEP
         USING RCE,R15             ESTAB ADDRESSABILITY
         L     R14,RCEESPL         GET TOTAL EXP STORAGE IN K'S
         SRL   R14,8               FRAME -> MEG (DIVIDE BY 256)
         ST    R14,TOTEXP          STORE IT AWAY
         A     R14,TOTREAL         TOTREAL + TOTEXP
         ST    R14,TOTSTOR         STORE AWAY TOTAL (REAL  + EXP)
*
         LH    R14,RCEFRV1         GET SYSUIC1
         ST    R14,SYSUIC1         SAVE IT
*
         LH    R14,RCEFRV2         GET SYSUIC2
         ST    R14,SYSUIC2         SAVE IT
*
         LH    R14,RCEFRV3         GET SYSUIC3
         ST    R14,SYSUIC3         SAVE IT
*
         LH    R14,RCEFRV4         GET SYSUIC4
         ST    R14,SYSUIC4         SAVE IT
*
         DROP  R15                 DROP RCE ADDRESSABILITY
*
*---------------------------------------------------------------------*
*        EVERY TIME WE GO THROUGH THE ASCB, THE ISPF TABLE NEEDS TO   *
*        BE REBUILT.                                                  *
*---------------------------------------------------------------------*
*
*------- BUILD THE ISPF TABLE
*
BUILDTBL EQU   *
         TM    SWITCH,$REFRESH     DO I NEED TO CREATE THE NEW TABLE ?
         BZ    DISPTBL             NOOP - THEN GO AROUND
*
OKTOBLD  EQU   *
         NI    SWITCH,X'FF'-($JOBSLTD+$REFRESH)
*
         $BLDLIST WKPARM,(TBCREATE,     ** FUNCTION **                 X
               TABLENM,                 ** TABLE NAME **               X
               BLANK,                     NO KYWD LIST                 X
               TABVAR,                  ** VAR NAMES **                X
               NOWRITE,                 ** NOWRITE MODE **             X
               REPLACE),VL              ** REPLACE OLD TABLE **
         L     R15,LINKADD         GET LOAD ADDRESS
         BALR  R14,R15             DO THE CALL
         C     R15,=F'4'           IS RETURN CODE > 4
         BNH   RDYLOOP             NOOP - THEN GO ON
         MVC   ZEDSMSG,ERR1S
         MVC   ZEDLMSG,ERR1L
         BAL   R14,SETMYMSG        NOW SET UP MSG TO BE DISPLAYED
         B     END$JAD             AND THEN EXIT
*
RDYLOOP  EQU   *
         OI    SWITCH,$TBCREAT     INDICATE THAT TABLE WAS CREATED
         L     R2,CVTPTR           GET ADDRESS OF CVT
         USING CVT,R2              ESTABLISH ADDRESSABILITY
*
         L     R14,CVTOPCTP        GET SRM TABLE ADDRESS
         L     R14,4(,R14)         GET CCT ADDRESS
         LH    R14,102(,R14)       LOAD CPU % BUSY (FROM SRM)
         CVD   R14,DWORD           CONVERT THIS TO DEC FOR DISPLAY
         MVC   WKPARM(L'CPUPCT),CPUPCT
         ED    WKPARM(L'CPUPCT),DWORD+6
         MVC   CPUP(L'CPUP-1),WKPARM+1
         MVI   CPUP+L'CPUP-1,C'%'
*
         L     R2,CVTASVT          LOAD ADDRESS OF THE ASVT
*
         DROP  R2
         USING ASVT,R2
         L     R3,ASVTMAXU         GET NUMBER OF A.S.
         LA    R2,ASVTFRST         GET THE FIRST ASCB ENTRY ADDRESS
         ST    R2,NEXTASCB         SAVE THIS AWAY
         XC    COUNT,COUNT
         DROP  R2
*
LOOPASCB EQU   *
*
*------- NEXTASCB POINTS TO NEXT ASCB ADDRESS, R3=HOW MANY A.S.
*
         L     R2,NEXTASCB         GET ADDRESS OF NEXT ASVT ENTRY
         TM    0(R2),ASVTAVAI      IS ASCB AVAILABLE ?
         BO    ASCBNEXT            YEAH - THEN GO TO NEXT
*
         L     R2,0(,R2)           LOAD ADDRESS OF ASCB
         ST    R2,CURRASCB         SAVE ASCB ADDRESS FIRST
         BAL   R14,DO#1ASCB        NOW - GO PROCESS THIS ONE ASCB
*
         TM    SWITCH,$FNDASCB     IS THIS ASCB GOOD ???
         BZ    ASCBNEXT            NOOP - THEN GO GET THE NEXT ONE
*
         $BLDLIST WKPARM,(TBADD,TABLENM),VL     ** FUNCTION **
         L     R15,LINKADD         GET LOAD ADDRESS
         BALR  R14,R15             DO THE CALL
         LTR   R15,R15             CHECK RETURN CODE
         BZ    ASCBNEXT            IF ZERO - THEN RESET TO TOP OF TBL
         MVC   ZEDSMSG,ERR2S       ELSE - PUT
         MVC   ZEDLMSG,ERR2L              OUT ERROR MESSAGE
         BAL   R14,SETMYMSG        NOW SET UP MSG TO BE DISPLAYED
         B     END$JAD             AND THEN EXIT
*
ASCBNEXT EQU   *
         L     R2,NEXTASCB         LOAD ASCB ENTRY ADDRESS INTO R2
         LA    R2,4(,R2)           POINT TO NEXT ASCB
         ST    R2,NEXTASCB         SAVE IT AWAY
         BCT   R3,LOOPASCB
*
         TM    SWITCH,$JOBSORT     IS SORT REQUIRED ?
         BZ    TOPIT               NOOP - THEN GO AROUND
*
SORTTBL  EQU   *
         TM    SWITCH,$JOBSORT     IS SORT REQUIRED ?
         BZ    TOPIT               NOOP - THEN GO RIGHT BYE
         $BLDLIST WKPARM,(TBSORT,TABLENM,WSORT),VL
         L     R15,LINKADD         GET LOAD ADDRESS
         BALR  R14,R15             DO THE CALL
*
TOPIT    EQU   *
         $BLDLIST WKPARM,(TBTOP,TABLENM),VL     ** FUNCTION **
         L     R15,LINKADD         GET LOAD ADDRESS
         BALR  R14,R15             DO THE CALL
         LTR   R15,R15             TEST RETURN CODE
         BZ    DISPTBL             NOW GOTO DISPLAY IT
         MVC   ZEDSMSG,ERR3S       ELSE - PUT
         MVC   ZEDLMSG,ERR3L              OUT ERROR MESSAGE
         BAL   R14,SETMYMSG        NOW SET UP MSG TO BE DISPLAYED
         B     END$JAD             AND THEN EXIT
*
DISPTBL  EQU   *
         MVC   MYCMD,BLANK
         MVC   MYSEL,BLANK
         $BLDLIST WKPARM,(TBDISPL,TABLENM,TABPANEL),VL
         L     R15,LINKADD         GET LOAD ADDRESS
         BALR  R14,R15             DO THE CALL
         C     R15,=F'8'           IS IT 'END' OR 'RETURN' ?
         BE    END$JAD             YES - THEN I AM DONE
         C     R15,=F'4'           IS IT '4' OR LESS ??
         BNH   CKINPUT             YES - THEN CHECK THE INPUT
*
         MVC   ZEDSMSG,ERR4S       ELSE - PUT
         MVC   ZEDLMSG,ERR4L              OUT ERROR MESSAGE
         BAL   R14,SETMYMSG        NOW SET UP MSG TO BE DISPLAYED
         B     END$JAD
*
*
*---------------------------------------------------------------------*
*        THE INPUT COMMAND IS CHECKED HERE. CURRENTLY, ONLY 'SORT'    *
*        AND 'VIEW' ARE ALLOWED.                                      *
*---------------------------------------------------------------------*
*
CKINPUT  EQU   *
         CLC   MYCMD,BLANK         IS CMD BLANK ??
         BNE   CKSORT              NOOP - CHECK FOR 'SORT'
         CLI   MYSEL,C'_'          IS ANYTHING SELECTED ??
         BE    OKTOBLD             NOOP - THEN RE-BUILD TABLE
         B     JOBDISP             ELSE - GO DISPLAY A JOB
*
CKSORT   EQU   *
         CLC   MYCMD(4),=CL4'SORT' IS IT 'SORT' ??
         BNE   CKVIEW              NOOP - THEN CHECK FOR VIEW
         BAL   R14,SORTOPTS        ELSE - PROCESS SORT OPTIONS
         B     SORTTBL             AND NOW - BACK TO DISPLAY
*
CKVIEW   EQU   *
         CLC   MYCMD(4),=CL4'VIEW' IS IT 'VIEW' ??
         BNE   TOPIT               NOOP - THEN RE-DISPLAY TABLE
         BAL   R14,VIEWOPTS        ELSE - PROCESS VIEW OPTIONS
         LTR   R15,R15             CHECK RETURN CODE
         BZ    OKTOBLD             -- IF 'ENTER' WAS HIT ..
         B     DISPTBL             -- IF 'END' KEY WAS HIT ..
*
*
*---------------------------------------------------------------------*
*        THIS IS WHEN AN ADDRESS SPACE IS SELECTED FOR DISPLAY.       *
*        ALL PERTINENT INFO ABOUT THE A.S. IS DISPLAYED.  THE USER    *
*        CAN PRESS ENTER OR PF3 TO GET OUT.  IF USER PRESSES ENTER,   *
*        WE NEED TO GO THROUGH THE ASCB, PICK OUT THE SELECTED        *
*        ASCB (USING JOBNAME & ASID), AND THEN CONTINUE TO DISPLAY    *
*        THE SAME INFORMATION ON THE JOB DISPLAY SCREEN.  ALSO, A     *
*        FLAG IS TURNED ON SO THAT WHEN PF3 IS HIT, A NEW TABLE WILL  *
*        BE REBUILT (REFRESHED). HOWEVER, IF PF3 WAS HIT IMMEDIATELY  *
*        AFTER THE DISPLAY, THEN THE TABLE IS LEFT INTACT, AND        *
*        IT WILL BE RE-DISPLAYED WITH THE SELECTED A.S. POSITIONED    *
*        AT THE TOP OF SCREEN.                                        *
*---------------------------------------------------------------------*
*
*
JOBDISP  EQU   *
         MVC   POPCOL,=F'13'
         XC    POPROW,POPROW
         BAL   R14,DOADDPOP        POSITION THE POP-UP WINDOW
*
#JOBCKIT EQU   *
         L     R14,STORAGE         GET MY TOTAL STORAGE SO FAR
         SRL   R14,8               DIVIDE BY 256 (FRAME -> MEG)
         SRDA  R14,32              GET READY FOR DIVIDE
         D     R14,=F'50'          NOW - DIVIDE BY 50
         MH    R15,=H'100'         MULTIPLY IT BACK TO 50*2
         A     R15,=F'50'          AND THEN ADD 50 ON TOP
         ST    R15,BASESTOR        SAVE THIS NEW TOTAL FOR DISPLAY
*
         MVC   EXCPCNT,$EXCPCNT    GET ORIGINAL EXCP COUNT BACK (X100)
*
         MVC   EVENT,BLANK
         TM    EVENTCDE,OUCBLWT    IS IS LONG WAIT
         BO    #JOBLWT             YEAH
         TM    EVENTCDE,OUCBTRM    IS IS TERM WAIT
         BO    #JOBTRM             YEAH
         TM    EVENTCDE,OUCBOWT    IS IS OUPUT WAIT
         BO    #JOBOWT             YEAH
         TM    EVENTCDE,OUCBCIM    IS IS INPUT WAIT
         BO    #JOBCIM             YEAH
         TM    EVENTCDE,OUCBNQF    IS IS ENQ WAIT
         BO    #JOBNQF             YEAH
         TM    EVENTCDE,OUCBQSS    IS IS QSCEST WAIT
         BO    #JOBQSS             YEAH
         TM    EVENTCDE,OUCBQSC    IS IS QSCECMP WAIT
         BO    #JOBQSC             YEAH
         TM    EVENTCDE,OUCBMWT    IS IS MSO WAIT
         BO    #JOBMWT             YEAH
         B     #JOBFLOK
*
#JOBLWT  EQU   *
         MVC   EVENT,#MSGLWT
         B     #JOBFLOK
*
#JOBTRM  EQU   *
         MVC   EVENT,#MSGTRM
         B     #JOBFLOK
*
#JOBOWT  EQU   *
         MVC   EVENT,#MSGOWT
         B     #JOBFLOK
*
#JOBCIM  EQU   *
         MVC   EVENT,#MSGCIM
         B     #JOBFLOK
*
#JOBNQF  EQU   *
         MVC   EVENT,#MSGNQF
         B     #JOBFLOK
*
#JOBQSS  EQU   *
         MVC   EVENT,#MSGQSS
         B     #JOBFLOK
*
#JOBQSC  EQU   *
         MVC   EVENT,#MSGQSC
         B     #JOBFLOK
*
#JOBMWT  EQU   *
         MVC   EVENT,#MSGMWT
         B     #JOBFLOK
*
#JOBFLOK EQU   *
         L     R14,RSTOR
         MH    R14,=H'100'
         SRL   R14,8               DIVIDE BY 256 (FRAME -> MEG)
         CVD   R14,DWORD           CONVERT RSTOR (XX.XX) TO DEC
         MVC   WKPARM(L'MEGPAT),MEGPAT
         ED    WKPARM(L'MEGPAT),DWORD+5
         MVC   RSTORM(6),WKPARM+1       RSTORM = RSTOR(XXX.XX)
         MVI   RSTORM+7,C'M'            RSTORM = RSTOR(XXX.XX M)
*
         L     R14,ESTOR
         MH    R14,=H'100'
         SRL   R14,8               DIVIDE BY 256 (FRAME -> MEG)
         CVD   R14,DWORD           CONVERT RSTOR (XX.XX) TO DEC
         MVC   WKPARM(L'MEGPAT),MEGPAT
         ED    WKPARM(L'MEGPAT),DWORD+5
         MVC   ESTORM(6),WKPARM+1       ESTORM = ESTOR(XXX.XX)
         MVI   ESTORM+7,C'M'            ESTORM = ESTOR(XXX.XX M)
*
         L     R14,RSTOR
         MH    R14,=H'10000'
         SRL   R14,8               DIVIDE BY 256 (FRAME -> MEG)
         SRDA  R14,32              FIGURE OUT RSTOR AS PCT
         D     R14,TOTREAL
         CVD   R15,DWORD
         MVC   WKPARM(L'MEGPAT),MEGPAT
         ED    WKPARM(L'MEGPAT),DWORD+5
         MVC   $RSTOR(5),WKPARM+2       $RSTOR = RSTOR(XX.XX%)
         MVI   $RSTOR+5,C'%'            $RSTOR = RSTOR(XX.XX%)
*
         L     R14,ESTOR
         MH    R14,=H'10000'
         SRL   R14,8               DIVIDE BY 256 (FRAME -> MEG)
         SRDA  R14,32              FIGURE OUT ESTOR AS PCT
         D     R14,TOTEXP
         CVD   R15,DWORD
         MVC   WKPARM(L'MEGPAT),MEGPAT
         ED    WKPARM(L'MEGPAT),DWORD+5
         MVC   $ESTOR(5),WKPARM+2       $ESTOR = ESTOR(XX.XX%)
         MVI   $ESTOR+5,C'%'            $ESTOR = ESTOR(XX.XX%)
*
         L     R14,TOTREAL
         CVD   R14,DWORD
         MVC   WKPARM(L'TOTPAT),TOTPAT
         ED    WKPARM(L'TOTPAT),DWORD+5
         MVC   $TOTREAL(4),WKPARM+2     $TOTREAL = TOTREAL
         MVC   $TOTREAL+4(4),=CL4' Meg' $TOTREAL = TOTREAL+' Meg'
*
         L     R14,TOTEXP
         CVD   R14,DWORD
         MVC   WKPARM(L'TOTPAT),TOTPAT
         ED    WKPARM(L'TOTPAT),DWORD+5
         MVC   $TOTEXP(4),WKPARM+2      $TOTEXP = TOTEXP
         MVC   $TOTEXP+4(4),=CL4' Meg'  $TOTEXP = TOTEXP+' Meg'
*
         MVC   SWAPTEXT,BLANK
         CLI   SWAPCODE,X'00'      IS IT '00' (I SET IT TO '00') ?
         BE    #JNOSWAP            YEAH - THEN FORGET THIS
*
         XR    R1,R1
         IC    R1,SWAPCODE         GET SWAP CODE
         BCTR  R1,0                SWAPCODE - 1
         MH    R1,=AL2(SWAPLENG)   GET OFFSET INTO SWAP TABLE
         LA    R14,SWAPTAB         GET ADDRESS OF THE SWAP CODE TABLE
         LA    R14,2(R1,R14)       ADD THE OFFSET
         CLC   SWAPSTAT(2),=C'L*'  LOGICAL SWAP ??
         BE    #JLOGSW             YEAH ...
         MVC   SWAPTEXT,0(R14)
         B     #JNOSWAP
*
#JLOGSW  EQU   *
         MVC   SWAPTEXT(13),=CL13'**LogSwap**  '
         MVC   SWAPTEXT+13(L'SWAPTEXT-13),0(R14)
*
#JNOSWAP EQU   *
         L     R14,RSTOR
         SRL   R14,8               DIVIDE BY 256 (FRAME -> MEG)
         MH    R14,PLOTAXIS
         SRDA  R14,32              FIGURE OUT THE RSTOR ON THE PLOT
         D     R14,BASESTOR
         ST    R15,RPCT
*
         L     R14,ESTOR
         SRL   R14,8               DIVIDE BY 256 (FRAME -> MEG)
         MH    R14,PLOTAXIS
         SRDA  R14,32              FIGURE OUT THE ESTOR ON THE PLOT
         D     R14,BASESTOR
         ST    R15,EPCT
*
         A     R15,RPCT            TOTAL OF RPCT&EPCT
         LH    R14,PLOTAXIS
         SR    R14,R15             NUMBER OF DOTS LEFT TO PLOT
         ST    R14,DOTS
*
         MVC   MARKS,BLANK
         MVC   JOBPCT,BLANK
*
         LA    R14,MARKS
         LA    R15,JOBPCT
*
         ICM   R1,B'1111',RPCT     GET NUMBER OF DOTS FOR RSTOR
         BZ    #J#EPCT
         BCTR  R1,0                MINUS 1 FOR EX
         MVI   0(R14),C'{'
         MVI   0(R15),C'r'
         BCTR  R1,0                AND ANOTHER (REPEATED MOVE)
         LTR   R1,R1               IS NUMBER NEGATIVE
         BC    4,#JNORPCT          YEH - THEN DON'T BOTHER TO MOVE
         EX    R1,MOVEMRKS         NOW - MOVE COLOR
         EX    R1,MOVEPCT          NOW - MOVE LETTER
*
#JNORPCT EQU   *
         LA    R14,2(R1,R14)       MOVE TO NEXT POSITION
         LA    R15,2(R1,R15)            """""""""
*
#J#EPCT  EQU   *
         ICM   R1,B'1111',EPCT     GET NUMBER OF DOTS FOR ESTOR
         BZ    #J#DOTS
         BCTR  R1,0                MINUS 1 FOR EX
         MVI   0(R14),C'~'
         MVI   0(R15),C'e'
         BCTR  R1,0                AND ANOTHER (REPEATED MOVE)
         LTR   R1,R1               IS NUMBER NEGATIVE
         BC    4,#JNOEPCT          YEH - THEN DON'T BOTHER TO MOVE
         EX    R1,MOVEMRKS         NOW - MOVE COLOR
         EX    R1,MOVEPCT          NOW - MOVE LETTER
*
#JNOEPCT EQU   *
         LA    R14,2(R1,R14)       MOVE TO NEXT POSITION
         LA    R15,2(R1,R15)            """""""""
*
#J#DOTS  EQU   *
         L     R1,DOTS             GET NUMBER OF DOTS LEFT OVER
         BCTR  R1,0                MINUS 1 FOR EX
         MVI   0(R14),C'}'
         MVI   0(R15),C'.'
         BCTR  R1,0                AND ANOTHER (REPEATED MOVE)
         LTR   R1,R1               IS NUMBER NEGATIVE
         BC    4,#JDOUIC           YEH - THEN DON'T BOTHER TO MOVE
         EX    R1,MOVEMRKS         NOW - MOVE COLOR
         EX    R1,MOVEPCT          NOW - MOVE LETTER
*
         B     #JDOUIC
*
MOVEMRKS MVC   1(0,R14),0(R14)
MOVEPCT  MVC   1(0,R15),0(R15)
*
#JDOUIC  EQU   *
         L     R14,UIC1
         A     R14,UIC2
         A     R14,UIC3
         A     R14,UIC4
         ST    R14,TOTUIC          FIGURE OUT TOTAL OF ALL UIC
         LTR   R14,R14             TEST FOR ZEROS (TOTAL UIC)
         BZ    #JZERO              IF YES - THEN PUT OUT DOTS ONLY
*
*------- DO UIC1
*
         L     R14,UIC1
         MH    R14,PLOTAXIS
         SRDA  R14,32              FIGURE OUT UIC PORTION THE PLOT
         D     R14,TOTUIC
         ST    R15,TEMP1
*
*------- DO UIC2
*
         L     R14,UIC2
         MH    R14,PLOTAXIS
         SRDA  R14,32              FIGURE OUT UIC PORTION THE PLOT
         D     R14,TOTUIC
         ST    R15,TEMP2
*
*------- DO UIC3
*
         L     R14,UIC3
         MH    R14,PLOTAXIS
         SRDA  R14,32              FIGURE OUT UIC PORTION THE PLOT
         D     R14,TOTUIC
         ST    R15,TEMP3
*
*------- DO UIC4
*
         L     R14,UIC4
         MH    R14,PLOTAXIS
         SRDA  R14,32              FIGURE OUT UIC PORTION THE PLOT
         D     R14,TOTUIC
         ST    R15,TEMP4
*
         MVC   UICDIST,BLANK
         MVC   UICMSKS,BLANK
*
         LA    R14,UICMSKS
         LA    R15,UICDIST
*
*
*
         ICM   R1,B'1111',TEMP1    GET NUMBER OF DOTS FOR UIC1
         BZ    #J#UIC2
         BCTR  R1,0                MINUS 1 FOR EX
         MVI   0(R14),C'~'
         MVI   0(R15),C'$'
         BCTR  R1,0                AND ANOTHER (REPEATED MOVE)
         LTR   R1,R1               IS NUMBER NEGATIVE
         BC    4,#JNOUIC1          YEH - THEN DON'T BOTHER TO MOVE
         EX    R1,MOVEMRKS         NOW - MOVE COLOR
         EX    R1,MOVEPCT          NOW - MOVE LETTER
*
#JNOUIC1 EQU   *
         LA    R14,2(R1,R14)       MOVE TO NEXT POSITION
         LA    R15,2(R1,R15)            """""""""
*
#J#UIC2  EQU   *
*
         ICM   R1,B'1111',TEMP2    GET NUMBER OF DOTS FOR UIC2
         BZ    #J#UIC3
         BCTR  R1,0                MINUS 1 FOR EX
         MVI   0(R14),C'#'
         MVI   0(R15),C'*'
         BCTR  R1,0                AND ANOTHER (REPEATED MOVE)
         LTR   R1,R1               IS NUMBER NEGATIVE
         BC    4,#JNOUIC2          YEH - THEN DON'T BOTHER TO MOVE
         EX    R1,MOVEMRKS         NOW - MOVE COLOR
         EX    R1,MOVEPCT          NOW - MOVE LETTER
*
#JNOUIC2 EQU   *
         LA    R14,2(R1,R14)       MOVE TO NEXT POSITION
         LA    R15,2(R1,R15)            """""""""
*
*
#J#UIC3  EQU   *
*
         ICM   R1,B'1111',TEMP3    GET NUMBER OF DOTS FOR UIC3
         BZ    #J#UIC4
         BCTR  R1,0                MINUS 1 FOR EX
         MVI   0(R14),C'_'
         MVI   0(R15),C'-'
         BCTR  R1,0                AND ANOTHER (REPEATED MOVE)
         LTR   R1,R1               IS NUMBER NEGATIVE
         BC    4,#JNOUIC3          YEH - THEN DON'T BOTHER TO MOVE
         EX    R1,MOVEMRKS         NOW - MOVE COLOR
         EX    R1,MOVEPCT          NOW - MOVE LETTER
*
#JNOUIC3 EQU   *
         LA    R14,2(R1,R14)       MOVE TO NEXT POSITION
         LA    R15,2(R1,R15)            """""""""
*
*
#J#UIC4  EQU   *
*
         ICM   R1,B'1111',TEMP4    GET NUMBER OF DOTS FOR UIC4
         BZ    #JOBDISP
         BCTR  R1,0                MINUS 1 FOR EX
         MVI   0(R14),C'{'
         MVI   0(R15),C'x'
         BCTR  R1,0                AND ANOTHER (REPEATED MOVE)
         LTR   R1,R1               IS NUMBER NEGATIVE
         BC    4,#JOBDISP          YEH - THEN DON'T BOTHER TO MOVE
         EX    R1,MOVEMRKS         NOW - MOVE COLOR
         EX    R1,MOVEPCT          NOW - MOVE LETTER
*
         B     #JOBDISP
*
#JZERO   EQU   *
         MVI   UICDIST,C'.'
         MVC   UICDIST+1(L'UICDIST-1),UICDIST
         MVI   UICMSKS,C'}'
         MVC   UICMSKS+1(L'UICMSKS-1),UICMSKS
*
#JOBDISP EQU   *
         MVC   WPANEL,JOBPANEL
         BAL   R14,DODISPL         DISPLAY THE JOB PANEL
         C     R15,=F'8'           IS IT 'END' OR 'RETURN' ?
         BE    #JOBEXIT            YEAH - THEN BACK TO DISPLAY
         BNH   #JOBENTR            ELSE - PREPARE DATA FOR DISPLAY
         MVC   ZEDSMSG,ERR5S
         MVC   ZEDLMSG,ERR5L
         BAL   R14,SETMYMSG        NOW SET UP MSG TO BE DISPLAYED
         B     #JOBEXIT            AND BACK TO DO THE DISPLAY
*
#JOBENTR EQU   *
         OI    SWITCH,$REFRESH+$JOBSLTD INDICATE TABLE NEEDS RE-BUILT
*                                       AND 'JOB DISPLAY' IS ON
         MVC   SAVEJOBN,JOBN       SAVE DATA
         MVC   SAVEASID,ASID
*
         L     R2,CVTPTR           GET ADDRESS OF CVT
         USING CVT,R2              ESTABLISH ADDRESSABILITY
         L     R2,CVTASVT          LOAD ADDRESS OF THE ASVT
         DROP  R2
         USING ASVT,R2
         L     R3,ASVTMAXU         GET NUMBER OF A.S.
         LA    R2,ASVTFRST         GET THE FIRST ASCB ENTRY ADDRESS
         ST    R2,NEXTASCB         SAVE THIS AWAY
         XC    COUNT,COUNT
         DROP  R2
*
#JLOOP   EQU   *
*
*------- NEXTASCB POINTS TO NEXT ASCB ADDRESS, R3=HOW MANY A.S.
*
         L     R2,NEXTASCB         GET ADDRESS OF NEXT ASVT ENTRY
         TM    0(R2),ASVTAVAI      IS ASCB AVAILABLE ?
         BO    #JNEXT              YEAH - THEN GO TO NEXT
*
         L     R2,0(,R2)           LOAD ADDRESS OF ASCB
         ST    R2,CURRASCB         SAVE ASCB ADDRESS FIRST
         BAL   R14,DO#1ASCB        NOW - GO PROCESS THIS ONE ASCB
*
         TM    SWITCH,$FNDASCB     IS THIS ASCB GOOD ???
         BO    #JOBCKIT            THEN - I FOUND THE ONE
*
*
#JNEXT   EQU   *
         L     R2,NEXTASCB         LOAD ASCB ENTRY ADDRESS INTO R2
         LA    R2,4(,R2)           POINT TO NEXT ASCB
         ST    R2,NEXTASCB         SAVE IT AWAY
         BCT   R3,#JLOOP
*
         BAL   R14,DOREMPOP
*
         MVC   PROCPCT,JOBNOTFN    MOVE 'JOBNOTFOUND' MSG TO DISPLAY
         MVI   MASKS,C'{'
         MVC   MASKS+1(L'MASKS-1),MASKS
         MVC   POPROW,=F'-1'
         MVC   POPCOL,=F'28'
         BAL   R14,DOADDPOP        POSITION THE POP-UP WINDOW
         MVC   WPANEL,MSGPNL
         BAL   R14,DODISPL         DISPLAY THE JOB PANEL
*
#JOBEXIT EQU   *
         BAL   R14,DOREMPOP
         B     BUILDTBL
         EJECT
*
*
*------- TO PROCESS THE 'SORT' OPTIONS AND PREPARE THE APPROPRIATE
*------- STATEMENTS USED IN 'TBSORT'
*
SORTOPTS EQU   *
         ST    R14,##SORT          SAVE R14
         MVC   POPCOL,=F'8'
         XC    POPROW,POPROW
         BAL   R14,DOADDPOP        POSITION THE POP-UP WINDOW
*
         MVC   WPANEL,SORTPNL
         BAL   R14,DODISPL         DISPLAY THE SORT PANEL
         C     R15,=F'8'           IS IT 'END' OR 'RETURN' ?
         BE    #SRTEND             YEAH - THEN BACK TO DISPLAY
         BNH   SORTCKIT            ELSE - CHECK FOR SORT OPTIONS
         MVC   ZEDSMSG,ERR5S       ELSE - PUT
         MVC   ZEDLMSG,ERR5L              OUT ERROR MESSAGE
         BAL   R14,SETMYMSG        NOW SET UP MSG TO BE DISPLAYED
         B     #SRTEND             AND BACK TO DO THE DISPLAY
*
SORTCKIT EQU   *
         MVC   WSORT,$SORT         MOVE THE 'SORT' MODEL STMT TO WKAREA
*
         CLC   OPTSTMT,BLANK       IS IT BLANK ?
         BE    #SNONE              YEAH - THEN SORT BY 'COUNT'
*
         OI    SWITCH,$JOBSORT     TURN ON 'SORT-REQUIRED' SWITCH
*
         CLC   =C'JOBN',OPTSTMT    IS IT 'JOBN' ?
         BE    #SJOBN              YEAH ...
         CLC   =C'TCBTIME',OPTSTMT    IS IT 'TCB' ?
         BE    #STCB               YEAH ...
         CLC   =C'SRBTIME',OPTSTMT    IS IT 'SRB' ?
         BE    #SSRB               YEAH ...
         CLC   =C'STORAGE',OPTSTMT    IS IT 'STORAGE' ?
         BE    #SSTG               YEAH ...
         CLC   =C'RSTOR',OPTSTMT      IS IT 'RSTOR' ?
         BE    #SRSTOR             YEAH ...
         CLC   =C'ESTOR',OPTSTMT      IS IT 'ESTOR' ?
         BE    #SESTOR             YEAH ...
         CLC   =C'EXCPCNT',OPTSTMT    IS IT 'EXCP' ?
         BE    #SEXCP              YEAH ...
         B     #SRTEND             ELSE - NOTHING
*
#SJOBN   EQU   *
         MVC   WKPARM(8),=CL8'JOBN'
         MVC   DWORD(1),SORTSEQ
         MVI   DWORD+1,C'C'        'CHARACTER' SORT
         B     #SSETUP
*
#STCB    EQU   *
         MVC   WKPARM(8),=CL8'TCBTIME'
         MVC   DWORD(1),SORTSEQ
         MVI   DWORD+1,C'N'        'NUMERIC' SORT
         B     #SSETUP
*
#SSRB    EQU   *
         MVC   WKPARM(8),=CL8'SRBTIME'
         MVC   DWORD(1),SORTSEQ
         MVI   DWORD+1,C'N'        'NUMERIC' SORT
         B     #SSETUP
*
#SSTG    EQU   *
         MVC   WKPARM(8),=CL8'STORAGE'
         MVC   DWORD(1),SORTSEQ
         MVI   DWORD+1,C'N'        'BINARY' SORT
         B     #SSETUP
*
#SRSTOR  EQU   *
         MVC   WKPARM(8),=CL8'RSTOR'
         MVC   DWORD(1),SORTSEQ
         MVI   DWORD+1,C'N'        'BINARY' SORT
         B     #SSETUP
*
#SESTOR  EQU   *
         MVC   WKPARM(8),=CL8'ESTOR'
         MVC   DWORD(1),SORTSEQ
         MVI   DWORD+1,C'N'        'BINARY' SORT
         B     #SSETUP
*
#SEXCP   EQU   *
         MVC   WKPARM(8),=CL8'EXCPCNT'
         MVC   DWORD(1),SORTSEQ
         MVI   DWORD+1,C'N'        'BINARY' SORT
         B     #SSETUP
*
*
#SSETUP  EQU   *
         MVC   WSORT+$SORTFLD(8),WKPARM
         MVC   WSORT+$SORTSEQ(1),DWORD
         MVC   WSORT+$SORTYPE(1),DWORD+1
         B     #SRTEND
*
#SNONE   EQU   *
         NI    SWITCH,X'FF'-$JOBSORT    TURN ON 'SORT' SWITCH
         $BLDLIST WKPARM,(TBSORT,TABLENM,WSORT),VL
         L     R15,LINKADD         GET LOAD ADDRESS
         BALR  R14,R15             DO THE CALL
*
#SRTEND  EQU   *
         BAL   R14,DOREMPOP
         L     R14,##SORT          RELOAD RETURN ADDRESS
         BR    R14                 BACK TO CALLER
         EJECT
*
*
*------- TO SETUP 'JOB' FILTER, I.E. STC ONLY, TSU ONLY ...
*
VIEWOPTS EQU   *
         ST    R14,##VIEW          SAVED REG 14
*
         MVC   POPCOL,=F'10'
         XC    POPROW,POPROW
         BAL   R14,DOADDPOP        POSITION THE POP-UP WINDOW
*
         MVC   WPANEL,VIEWPNL
*
         XR    R9,R9               CLEAR RETURN CODE FOR THIS ROUTINE
*
         BAL   R14,DODISPL         DISPLAY THE SORT PANEL
         C     R15,=F'8'           IS IT 'END' OR 'RETURN' ?
         BE    #VIEWNOP            YEAH - THEN BACK TO DISPLAY
         BNH   #VIEWCK             IF LESS THAN 4 ...
         MVC   ZEDSMSG,ERR5S
         MVC   ZEDLMSG,ERR5L
         BAL   R14,SETMYMSG        NOW SET UP MSG TO BE DISPLAYED
         B     #VIEWNOP            AND BACK TO DO THE DISPLAY
*
#VIEWCK  EQU   *
         MVI   SAVETYPE,C' '       BLANK OUT 'SAVED' TYPE
*
         CLC   JOBFLTR,BLANK       IS 'VIEW FILTER' REQUIRED ?
         BE    #VNONE
*
         OI    SWITCH,$JOBVIEW     TURN ON 'VIEW FILTER' SWITCH
*
         CLC   =C'STC',JOBFLTR     IS IT 'STC' ONLY ??
         BE    #VSTC
         CLC   =C'TSU',JOBFLTR     IS IT 'TSU' ONLY ??
         BE    #VTSU
         CLC   =C'BAT',JOBFLTR     IS IT 'BAT' ONLY ??
         BE    #VBAT
         CLC   =C'JOB',JOBFLTR     IS IT 'JOB' ONLY ??
         BE    #VJOB
         B     #VNONE              ELSE - ASSUME LIKE NOTHIN' HAPPENED
*
#VSTC    EQU   *
         MVI   SAVETYPE,C'S'       SAVED 'S' FOR COMPARISON LATER
         B     #VIEWEND            THEN GO BACK TO CALLER
*
#VTSU    EQU   *
         MVI   SAVETYPE,C'T'       SAVED 'T' FOR COMPARISON LATER
         B     #VIEWEND            THEN GO BACK TO CALLER
*
#VBAT    EQU   *
         MVI   SAVETYPE,C'B'       SAVED 'B' FOR COMPARISON LATER
         B     #VIEWEND            THEN GO BACK TO CALLER
*
#VJOB    EQU   *
         MVC   SAVEJLNG,=F'7'      ASSUME LENG OF 8 INITIALLY
         TRT   JOBSEL,JOBPFIX      TEST FOR BLANK OR '_'
         BC    8,#V8BYTES          IF ALL ZEROS, THEN JOBSEL = 8 CHARS
         LA    R14,JOBSEL
         SR    R1,R14              GET LENG OF JOB PREFIX
         BCTR  R1,0                SUB 1 FOR EXECUTE INSTRUCTION LATER
         ST    R1,SAVEJLNG         SAVE THIS LENG
*
#V8BYTES EQU   *
         MVC   SAVEJCMP,JOBSEL     AND JOB NAME FOR LATER COMPARISON
         B     #VIEWEND            NOW - BACK TO CALLER
*
#VNONE   EQU   *
         NI    SWITCH,X'FF'-$JOBVIEW    TURN OFF THE 'JOB FLTER' REQ SW
         B     #VIEWEND            AND THEN RETURN TO CALLER
*
#VIEWNOP EQU   *
         LA    R9,4                SET UP RETURN CODE
*
#VIEWEND EQU   *
         BAL   R14,DOREMPOP
         L     R14,##VIEW          GET REG 14 BACK
         LR    R15,R9              AND SETUP RETURN CODE
         BR    R14                 BACK TO CALLER
*
         EJECT
*
*
*---------------------------------------------------------------------*
*        THIS IS WHERE EACH ASCB IS EXAMINED AND APPROPRIATE DATA     *
*        IS SAVED INTO THE ISPF TABLE.                                *
*---------------------------------------------------------------------*
*
*------- R2 - ASCB, R3 - CONTAINS THE NUMBER OF ASVT ENTRIES LEFT
*------- R4 - OUCB, OUXB, RSME
*
DO#1ASCB EQU   *
         ST    R14,##DO#1          SAVE RETURN REGISTER
         NI    SWITCH,X'FF'-$FNDASCB   TURN OFF THE 'ASCB-GOOD' SWITCH
         ICM   R2,B'1111',CURRASCB LOAD ADDRESS OF CURRENT ASCB
         BZ    DO#1END             IF ZERO - THEN END THIS
         USING ASCB,R2             NOW - ESTABLISH ADDRESSABILITY
*
         CLC   ASCBASCB,=CL4'ASCB' IS THE ASCB GOOD ??
         BNE   DO#1END             NOOP - THEN GET OUT
*
         CLC   ASCBOUCB,=F'0'      IS OUCB PTR INVALID ?
         BE    DO#1END             YEAH - THEN GET OUT
*
         L     R1,COUNT            INCREMENT THE COUNT
         LA    R1,1(,R1)
         ST    R1,COUNT
*
         MVC   JOBN,=CL8'Starting'      START OUT WITH 'STARTING'
*
         ICM   R14,B'1111',ASCBJBNI     GET ADDRESS OF BATCH JOBN
         BZ    #1CKSTC             IF ZERO - THEN CHECK AS STC
         MVI   TYPE,C'B'           ELSE - THIS IS BATCH
         MVC   JOBN,0(R14)         SAVE JOBNAME
         B     #1CKAJOB
*
#1CKSTC  EQU   *
         MVC   JOBN,=CL8'**Init**'      START OUT WITH '**INIT**'
         ICM   R14,B'1111',ASCBJBNS     GET ADDRESS OF STC/TSO JOBN
         BZ    #1CKTSO             IF ZERO THEN GO AROUND
         MVC   JOBN,0(R14)         SAVE JOBNAME
*
#1CKTSO  EQU   *
         MVI   TYPE,C'S'           ASSUME THIS AS 'STC' FIRST
         ICM   R14,B'1111',ASCBTSB      IS THIS TSO ??
         BZ    #1CKAJOB                 NOOP - THEN BRANCH AROUND
         MVI   TYPE,C'T'                ELSE - MAKE IT TYPE 'T'
*
*
#1CKAJOB EQU   *
         LH    R1,ASCBASID         GET ASID
         STH   R1,WKPARM           STORE THIS
         UNPK  DWORD(5),WKPARM(3)
         TR    DWORD(4),NUMTRT-240
         MVC   ASID,DWORD+1        MOVE ASID
*
         TM    SWITCH,$JOBSLTD     IS 'JOB DISPLAY' ON
         BZ    #1CKVIEW            NOOP - THEN GO CHECK FOR 'VIEW'
*
         CLC   SAVEJOBN,JOBN       IS JOB NAME MATCHING ?
         BNE   DO#1END             NO - THEN I AM DONE HERE
         CLC   SAVEASID,ASID       IS JOB ASID MATCHING ?
         BNE   DO#1END             NO - THEN I AM DONE HERE
         B     #1OUCB              I FOUND THE 'ON DISPLAY' JOB
*
#1CKVIEW EQU   *
         TM    SWITCH,$JOBVIEW     IS 'VIEW FILTER' FLAG ON
         BZ    #1OUCB              NOOP - THEN GO ON
*
         CLI   SAVETYPE,C' '       IS IS BY 'JOB PREFIX' ??
         BNE   #1NOPFX             NOOP - THEN GO CHECK FOR JOBTYPE
*
         L     R1,SAVEJLNG         GET JOB LENG TO COMPARE
         EX    R1,CMPJOB           AND ACTUALLY DO THE COMPARE
         BNE   DO#1END             IF NOT THE SAME - THEN I'M GONE
         B     #1OUCB              ELSE - CONTINUE ON
*
CMPJOB   CLC   SAVEJCMP(0),JOBN
*
#1NOPFX  EQU   *
         CLC   TYPE,SAVETYPE       IS THE 'TYPE' MATCHING ??
         BNE   DO#1END             NO - THEN I GETOUTA HERE
*
*
*
#1OUCB   EQU   *
         MVC   WKPARM(1),ASCBDP    GET DISP PRIORITY
         UNPK  DWORD(3),WKPARM(2)
         TR    DWORD(2),NUMTRT-240
         MVC   DPRTY,DWORD
*
         LM    R14,R15,ASCBEJST    GET TCB TIME
         SRDL  R14,12              DIVIDE BY 4096
         D     R14,=F'10000'
         CVD   R15,DWORD
         MVC   TCBTIME(L'PAT),PAT     MOVE PATTERN OVER
         ED    TCBTIME(L'PAT),DWORD+3 EDIT THIS
*
         LM    R14,R15,ASCBSRBT    GET SRB TIME
         SRDL  R14,12              DIVIDE BY 4096
         D     R14,=F'10000'
         CVD   R15,DWORD
         MVC   SRBTIME(L'PAT),PAT     MOVE PATTERN OVER
         ED    SRBTIME(L'PAT),DWORD+3 EDIT THIS
*
         MVC   RDYTCBS,ASCBTCBS    SAVE 'READY TCBS'
*
         ICM   R4,B'1111',ASCBOUCB LOAD ADDRESS OF OUCB
         USING OUCB,R4             ESTAB ADDRESSABILITY
*
         MVC   INWSS,OUCBWSS       SAVE IN-WSS
         MVC   TARWSS,OUCBTWSS     SAVE TARGET-WSS
*
         XR    R1,R1               CLEAR REGISTER
         IC    R1,OUCBDMN          GET DOMAIN NUMBER
         ST    R1,DOMAIN           SAVE IT
*
         LH    R1,OUCBVAL          GET WSM RV
         ST    R1,WSMRV            SAVE IT
*
         LH    R1,OUCBSWC          GET SWAP COUNT
         ST    R1,SWAPCNT          SAVE IT
*
         MVC   SWAPCODE,OUCBSRC    SAVE SWAP-OUT CODE
*
         MVC   SWAPSTAT,BLANK      BLANK OUT SWAPSTAT FIRST
*
         XR    R1,R1               CLEAR REG1
         IC    R1,OUCBSRC          LOAD SWAP-OUT CODE
         C     R1,NUMSWAP          IS IT > THEN WHAT I HAVE ?
         BNH   #1SWAPOK            NOOP - THEN GO AROUND
         MVC   SWAPSTAT,=CL4'  ??' ELSE - INIT THIS WITH ??
         B     #1SWAPCK            NOW GO CHECK THE REAL STATUS
*
#1SWAPOK EQU   *
         BCTR  R1,0                SWAPCODE - 1
         MH    R1,=AL2(SWAPLENG)   GET OFFSET INTO SWAP TABLE
         LA    R14,SWAPTAB         GET ADDRESS OF THE SWAP CODE TABLE
         LA    R14,0(R1,R14)       ADD THE OFFSET
         MVC   SWAPSTAT+2(2),0(R14)     GET THE CORRECT CODE
*
#1SWAPCK EQU   *
         MVC   EVENTCDE,OUCBEFL    SAVE THE 'EVENT' CODE
*
         TM    OUCBSFL,OUCBNSW     NON-SWAP ??
         BO    #1NONSW             YEAH ..
         TM    OUCBQFL,OUCBGOO+OUCBGOI+OUCBGOB      TRANSITION ?
         BNZ   #1TRANS             YEAH ..
         TM    OUCBQFL,OUCBOUT     IS IT OUT (SWAP) ?
         BO    #1LOGSW             YEAH ..
         MVC   SWAPSTAT,=CL4'In'
         MVI   SWAPCODE,X'00'
         B     #1FLAGOK
*
#1NONSW  EQU   *
         MVC   SWAPSTAT,=CL4'N/S'
         MVI   SWAPCODE,X'00'
         B     #1FLAGOK
*
#1TRANS  EQU   *
         MVC   SWAPSTAT,=CL4'Tran'
         MVI   SWAPCODE,X'00'
         B     #1FLAGOK
*
#1LOGSW  EQU   *
         TM    OUCBQFL,OUCBLSW     REALLY LOGICAL SWAP ???
         BZ    #1FLAGOK
         MVC   SWAPSTAT(2),=CL2'L*'
         B     #1FLAGOK
*
#1FLAGOK EQU   *
         DROP  R4
*
         L     R4,ASCBOUXB         LOAD ADDRESS OF OUXB
         USING OUXB,R4
         MVC   $EXCPCNT,OUXBIOSM   SAVE EXCP COUNT
         L     R14,OUXBIOSM        LOAD THIS INTO R1
         SRDA  R14,32              SHIFT FOR DIVISION
         D     R14,=F'100'         DIVIDE BY '100'
         ST    R15,EXCPCNT         AND SAVE IT
         MVC   INTPGIN,OUXBPIN     SAVE PAGE-IN CNT
         MVC   INTPGOUT,OUXBPOUT   SAVE PAGE-OUT CNT
         DROP  R4
*
         L     R4,ASCBRSME         GET RSM ADDRESS
         USING RAX,R4
*
         MVC   ESTOR,RAXESCT       GET EXP STORAGE FRAMES
         MVC   RSTOR,RAXFMCT       GET CENTRAL STORAGE FRAMES
*
         L     R1,RAXESCT          LOAD EXP STOR FRAMES
         A     R1,RAXFMCT          ADD CENTRAL STORAGE
*
         ST    R1,STORAGE          STORE TOTAL STORAGE AWAY
*
         LH    R1,RAXBELFX         GET BELOW-FIXED STORAGE
         ST    R1,FIXBELOW         STORE THIS AWAY
*
         MVC   UIC1,RAXFBV1        SAVE UIC1
         MVC   UIC2,RAXFBV2        SAVE UIC2
         MVC   UIC3,RAXFBV3        SAVE UIC3
         MVC   UIC4,RAXFBV4        SAVE UIC4
*
         OI    SWITCH,$FNDASCB     TURN ON 'GOOD-ASCB' SWITCH
*
DO#1END  EQU   *
         L     R14,##DO#1          RELOAD RETURN REGISTER
         BR    R14                 AND THEN BRANCH BACK
         DROP  R2
*
*------- GENERAL ROUTINE TO DISPLAY AN ISPF PANEL
*
DODISPL  EQU   *
         ST    R14,##DISPL         SAVE REG 14
         $BLDLIST WKPARM,(DISPLAY,WPANEL),VL
         L     R15,LINKADD         GET LOAD ADDRESS
         BALR  R14,R15             DO THE CALL
         L     R14,##DISPL         RELOAD REG 14
         BR    R14
*
*------- GENERAL ROUTINE TO ISSUE 'ADDPOP'
*
DOADDPOP EQU   *
         ST    R14,##ADDPOP        SAVE REG 14
         $BLDLIST WKPARM,(ADDPOP,BLANK,POPROW,  ** FUNCTION **         X
               POPCOL),VL
         L     R15,LINKADD         GET LOAD ADDRESS
         BALR  R14,R15             DO THE CALL
         L     R14,##ADDPOP        RELOAD REG 14
         BR    R14
*
*------- GENERAL ROUTINE TO ISSUE 'REMPOP'
*
DOREMPOP EQU   *
         ST    R14,##REMPOP        SAVE REG 14
         $BLDLIST WKPARM,(REMPOP),VL
         L     R15,LINKADD         GET LOAD ADDRESS
         BALR  R14,R15             DO THE CALL
         L     R14,##REMPOP        RELOAD REG 14
         BR    R14
*
*
*------- THIS IS THE COMMON ROUTINE TO SET THE MSG TO BE DISPLAYED
*
SETMYMSG EQU   *
         ST    R14,##MSG           SAVE REG 14
         $BLDLIST WKPARM,(SETMSG,       ** FUNCTION **                 X
               ISRZ001),VL              ** TABLE NAME **
         L     R15,LINKADD         GET LOAD ADDRESS
         BALR  R14,R15             DO THE CALL
         L     R14,##MSG           GET THE RETURN ADDRESS BACK
         BR    R14                 NOW RETURN TO CALLER
*
*
*
*
END$JAD  EQU   *
         TM    SWITCH,$TBCREAT     HAS TABLE BEEN CREATED ?
         BZ    END#TAB             NOOP - THEN DO NO CLOSING
*
         $BLDLIST WKPARM,(TBCLOSE,TABLENM),VL     ** FUNCTION **
         L     R15,LINKADD         GET LOAD ADDRESS
         BALR  R14,R15             DO THE CALL
*
         MVC   ZEDSMSG,ENDSMSG
         MVC   ZEDLMSG,ENDLMSG
         BAL   R14,SETMYMSG        NOW SET UP MSG TO BE DISPLAYED
*
END#TAB  EQU   *
         ICM   R15,B'1111',LINKADD CHECK AND SEE IF 'ISPLINK' LOADED
         BZ    EXIT$JAD            IF NOT - THEN JUST ENDIT
         DELETE EP=ISPLINK         ELSE - DELETE THE MODULE
*
EXIT$JAD EQU   *
         EXIT                      EXIT
*
         LTORG
         EJECT
*
         DS    0F
PLOTAXIS DC    AL2(L'JOBPCT)
*
NUMTRT   DC    C'0123456789ABCDEF'
*
#MSGLWT  DC    CL(L'EVENT)'Long_Wait'
#MSGTRM  DC    CL(L'EVENT)'Term_Wait'
#MSGOWT  DC    CL(L'EVENT)'Out_Term_Wait'
#MSGCIM  DC    CL(L'EVENT)'Comp_Inp'
#MSGNQF  DC    CL(L'EVENT)'Enq_Hold'
#MSGQSS  DC    CL(L'EVENT)'QSCEST'
#MSGQSC  DC    CL(L'EVENT)'QSCECMP'
#MSGMWT  DC    CL(L'EVENT)'MSO_Det_Wait'
*
JOBNOTFN DC    CL(L'PROCPCT)'-Job Not Found-'
*
SWAPTAB  DS    0C
         DC    CL2'TO',CL(L'SWAPTEXT)'Terminal Output Wait'
SWAPLENG EQU   *-SWAPTAB           LENG OF EACH ENTRY
         DC    CL2'TI',CL(L'SWAPTEXT)'Terminal Input Wait'
         DC    CL2'LW',CL(L'SWAPTEXT)'Long Wait'
         DC    CL2'XS',CL(L'SWAPTEXT)'Aux Storage Shortage'
         DC    CL2'RS',CL(L'SWAPTEXT)'Central Storage Shortage'
         DC    CL2'DW',CL(L'SWAPTEXT)'Detected Wait'
         DC    CL2'RQ',CL(L'SWAPTEXT)'Requested Swap'
         DC    CL2'NQ',CL(L'SWAPTEXT)'Enqueue Exchange'
         DC    CL2'EX',CL(L'SWAPTEXT)'Exchange/Rec value'
         DC    CL2'US',CL(L'SWAPTEXT)'Unilateral'
         DC    CL2'TS',CL(L'SWAPTEXT)'Transition Swap'
         DC    CL2'IC',CL(L'SWAPTEXT)'Improve Central Storage'
         DC    CL2'IP',CL(L'SWAPTEXT)'Improve System Paging'
         DC    CL2'MR',CL(L'SWAPTEXT)'Make Room Swapped Users'
         DC    CL2'AW',CL(L'SWAPTEXT)'APPC Wait'
         DC    CL2'OI',CL(L'SWAPTEXT)'Input Wait'
         DC    CL2'OO',CL(L'SWAPTEXT)'Output Wait'
SWAPEND  EQU   *
         DS    0F
NUMSWAP  DC    AL4((SWAPEND-SWAPTAB)/SWAPLENG)
*
SETMSG   DC    CL8'SETMSG'
VDEFINE  DC    CL8'VDEFINE'        DEFINE VAR FUNCTION
TBCREATE DC    CL8'TBCREATE'       CREATE TABLE
TBSORT   DC    CL8'TBSORT'         TABLE SORT
TBCLOSE  DC    CL8'TBCLOSE'        CLOSE TABLE
TBADD    DC    CL8'TBADD'          ADD ROW TO TABLE
TBTOP    DC    CL8'TBTOP'          GET TO TOP OF TABLE
TBDISPL  DC    CL8'TBDISPL'        TABLE DISPLAY
REPLACE  DC    CL8'REPLACE'
DISPLAY  DC    CL8'DISPLAY'
ADDPOP   DC    CL8'ADDPOP'
REMPOP   DC    CL8'REMPOP'
NOWRITE  DC    CL8'NOWRITE'
CONTROL  DC    CL8'CONTROL'
LIST     DC    CL8'(LIST)'
*
ERRRET   DS    0CL16
         DC    CL8'ERRORS'
         DC    CL8'RETURN'
*
*
ISRZ001  DC    CL8'ISRZ001'
*
BLANK    DC    CL80' '
*
PAT      DC    XL11'40202020202020214B2020'
MEGPAT   DC    XL7'402020214B2020'
TOTPAT   DC    XL6'402020202021'
CPUPCT   DC    XL4'40202021'
*
TABVAR   DC    C'(JOBN TYPE ASID DPRTY INWSS TARWSS FIXBELOW ESTOR     X
               RSTOR STORAGE UIC1 UIC2 UIC3 UIC4 SRBTIME TCBTIME       X
               RDYTCBS SWAPCNT COUNT SWAPSTAT SWAPCODE EVENTCDE        X
               EXCPCNT DOMAIN WSMRV INTPGIN INTPGOUT $EXCPCNT)'
*
DEFVAR   DC    C'('
         DC    CL9'$EXCPCNT '
         DC    CL9'BASESTOR '
         DC    CL9'COUNT    '
         DC    CL9'DOMAIN   '
         DC    CL9'ESTOR    '
         DC    CL9'EXCPCNT  '
         DC    CL9'FIXBELOW '
         DC    CL9'INTPGIN  '
         DC    CL9'INTPGOUT '
         DC    CL9'INWSS    '
         DC    CL9'RDYTCBS  '
         DC    CL9'RSTOR    '
         DC    CL9'STORAGE  '
         DC    CL9'SWAPCNT  '
         DC    CL9'SYSUIC1  '
         DC    CL9'SYSUIC2  '
         DC    CL9'SYSUIC3  '
         DC    CL9'SYSUIC4  '
         DC    CL9'TARWSS   '
         DC    CL9'TOTEXP   '
         DC    CL9'TOTREAL  '
         DC    CL9'TOTSTOR  '
         DC    CL9'UIC1     '
         DC    CL9'UIC2     '
         DC    CL9'UIC3     '
         DC    CL9'UIC4     '
         DC    CL9'WSMRV    '
         DC    CL9'$ESTOR   '
         DC    CL9'$RSTOR   '
         DC    CL9'$TOTEXP  '
         DC    CL9'$TOTREAL '
         DC    CL9'ASID     '
         DC    CL9'CPUP     '
         DC    CL9'DPRTY    '
         DC    CL9'ESTORM   '
         DC    CL9'EVENT    '
         DC    CL9'EVENTCDE '
         DC    CL9'JOBFLTR  '
         DC    CL9'JOBN     '
         DC    CL9'JOBPCT   '
         DC    CL9'JOBSEL   '
         DC    CL9'MARKS    '
         DC    CL9'MASKS    '
         DC    CL9'MYCMD    '
         DC    CL9'MYSEL    '
         DC    CL9'OPT      '
         DC    CL9'OPTSTMT  '
         DC    CL9'PROCPCT  '
         DC    CL9'RSTORM   '
         DC    CL9'SORTSEQ  '
         DC    CL9'SRBTIME  '
         DC    CL9'SWAPCODE '
         DC    CL9'SWAPSTAT '
         DC    CL9'SWAPTEXT '
         DC    CL9'SYSID    '
         DC    CL9'TCBTIME  '
         DC    CL9'TYPE     '
         DC    CL9'UICDIST  '
         DC    CL9'UICMSKS  '
         DC    CL9'ZEDLMSG  '
         DC    CL9'ZEDSMSG  '
*
         DC    C')'            END OF VAR LIST
*
*
*
TABLENM  DC    CL8'$JADTAB'
TABPANEL DC    CL8'$JADTBL1'
JOBPANEL DC    CL8'$JADJOB'
SORTPNL  DC    CL8'$JADSORT'
VIEWPNL  DC    CL8'$JADVIEW'
MSGPNL   DC    CL8'$JADMSG'
*
LINKQRY  LINK  EP=ISPQRY,SF=L
LINKQRYL EQU   *-LINKQRY
*
JOBPFIX  DC    256XL1'00'
         ORG   JOBPFIX+C' '
         DC    C' '
         ORG   JOBPFIX+C'_'
         DC    C'_'
         ORG
*
*------- THE FOLLOWING FIELDS NEED TO STAY TOGETHER (ISPFVAR)
*
VARLENG  DS    0F
         DC    AL4(L'$EXCPCNT)
         DC    AL4(L'BASESTOR)
         DC    AL4(L'COUNT)
         DC    AL4(L'DOMAIN)
         DC    AL4(L'ESTOR)
         DC    AL4(L'EXCPCNT)
         DC    AL4(L'FIXBELOW)
         DC    AL4(L'INTPGIN)
         DC    AL4(L'INTPGOUT)
         DC    AL4(L'INWSS)
         DC    AL4(L'RDYTCBS)
         DC    AL4(L'RSTOR)
         DC    AL4(L'STORAGE)
         DC    AL4(L'SWAPCNT)
         DC    AL4(L'SYSUIC1)
         DC    AL4(L'SYSUIC2)
         DC    AL4(L'SYSUIC3)
         DC    AL4(L'SYSUIC4)
         DC    AL4(L'TARWSS)
         DC    AL4(L'TOTEXP)
         DC    AL4(L'TOTREAL)
         DC    AL4(L'TOTSTOR)
         DC    AL4(L'UIC1)
         DC    AL4(L'UIC2)
         DC    AL4(L'UIC3)
         DC    AL4(L'UIC4)
         DC    AL4(L'WSMRV)
*
         DC    AL4(L'$ESTOR)
         DC    AL4(L'$RSTOR)
         DC    AL4(L'$TOTEXP)
         DC    AL4(L'$TOTREAL)
         DC    AL4(L'ASID)
         DC    AL4(L'CPUP)
         DC    AL4(L'DPRTY)
         DC    AL4(L'ESTORM)
         DC    AL4(L'EVENT)
         DC    AL4(L'EVENTCDE)
         DC    AL4(L'JOBFLTR)
         DC    AL4(L'JOBN)
         DC    AL4(L'JOBPCT)
         DC    AL4(L'JOBSEL)
         DC    AL4(L'MARKS)
         DC    AL4(L'MASKS)
         DC    AL4(L'MYCMD)
         DC    AL4(L'MYSEL)
         DC    AL4(L'OPT)
         DC    AL4(L'OPTSTMT)
         DC    AL4(L'PROCPCT)
         DC    AL4(L'RSTORM)
         DC    AL4(L'SORTSEQ)
         DC    AL4(L'SRBTIME)
         DC    AL4(L'SWAPCODE)
         DC    AL4(L'SWAPSTAT)
         DC    AL4(L'SWAPTEXT)
         DC    AL4(L'SYSID)
         DC    AL4(L'TCBTIME)
         DC    AL4(L'TYPE)
         DC    AL4(L'UICDIST)
         DC    AL4(L'UICMSKS)
         DC    AL4(L'ZEDLMSG)
         DC    AL4(L'ZEDSMSG)
*
*------- END (ISPF VARIABLES)
*
*
*------- THE FOLLOWING FIELDS NEED TO STAY TOGETHER (ISPFVAR)
*
*
VARFORM  DS    0F
@$EXCPC  DC    CL8'FIXED'
@BASEST  DC    CL8'FIXED'
@COUNT   DC    CL8'FIXED'
@DOMAIN  DC    CL8'FIXED'
@ESTOR   DC    CL8'FIXED'
@EXCPCNT DC    CL8'FIXED'
@FIXBEL  DC    CL8'FIXED'
@INTPIN  DC    CL8'FIXED'
@INTPOUT DC    CL8'FIXED'
@INWSS   DC    CL8'FIXED'
@RDYTCBS DC    CL8'FIXED'
@RSTOR   DC    CL8'FIXED'
@STORAGE DC    CL8'FIXED'
@SWAPCNT DC    CL8'FIXED'
@SYSUIC1 DC    CL8'FIXED'
@SYSUIC2 DC    CL8'FIXED'
@SYSUIC3 DC    CL8'FIXED'
@SYSUIC4 DC    CL8'FIXED'
@TARWSS  DC    CL8'FIXED'
@TOTEXP  DC    CL8'FIXED'
@TOTREAL DC    CL8'FIXED'
@TOTSTOR DC    CL8'FIXED'
@UIC1    DC    CL8'FIXED'
@UIC2    DC    CL8'FIXED'
@UIC3    DC    CL8'FIXED'
@UIC4    DC    CL8'FIXED'
@WSMRV   DC    CL8'FIXED'
*
@$ESTOR  DC    CL8'CHAR'
@$RSTOR  DC    CL8'CHAR'
@$TTEXP  DC    CL8'CHAR'
@$TTREAL DC    CL8'CHAR'
@ASID    DC    CL8'CHAR'
@CPUP    DC    CL8'CHAR'
@DPRTY   DC    CL8'CHAR'
@ESTORM  DC    CL8'CHAR'
@EVENT   DC    CL8'CHAR'
@EVNTCDE DC    CL8'CHAR'
@JOBFLTR DC    CL8'CHAR'
@JOBN    DC    CL8'CHAR'
@JOBPCT  DC    CL8'CHAR'
@JOBSEL  DC    CL8'CHAR'
@MARKS   DC    CL8'CHAR'
@MASKS   DC    CL8'CHAR'
@MYCMD   DC    CL8'CHAR'
@MYSEL   DC    CL8'CHAR'
@OPT     DC    CL8'CHAR'
@OPTSTMT DC    CL8'CHAR'
@PROCPCT DC    CL8'CHAR'
@RSTORM  DC    CL8'CHAR'
@SORTSEQ DC    CL8'CHAR'
@SRBTIME DC    CL8'CHAR'
@SWPCODE DC    CL8'CHAR'
@SWPSTAT DC    CL8'CHAR'
@SWPTEXT DC    CL8'CHAR'
@SYSID   DC    CL8'CHAR'
@TCBTIME DC    CL8'CHAR'
@TYPE    DC    CL8'CHAR'
@UICDIST DC    CL8'CHAR'
@UICMSKS DC    CL8'CHAR'
@ZEDLMSG DC    CL8'CHAR'
@ZEDSMSG DC    CL8'CHAR'
*
*------- END (ISPF VARIABLES)
*
*
$SORT    DS    0C
         DC    C'('
$SORTFLD EQU   *-$SORT             OFFSET TO SORT FIELD NAME
         DC    CL8'COUNT'
         DC    C','
$SORTYPE EQU   *-$SORT
         DC    C'N'
         DC    C','
$SORTSEQ EQU   *-$SORT             OFFSET TO SORT SEQUENCE
         DC    C'A'
         DC    C')'
$SORTLNG EQU   *-$SORT
*
*
ERR1S    DC    CL(L'ZEDSMSG)'TBCREATE Error'
ERR1L    DC    CL(L'ZEDLMSG)'Servere error doing TBCREATE on $JADTAB'
*
ERR2S    DC    CL(L'ZEDSMSG)'TBADD Error'
ERR2L    DC    CL(L'ZEDLMSG)'Servere error doing TBADD on $JADTAB'
*
ERR3S    DC    CL(L'ZEDSMSG)'TBTOP Error'
ERR3L    DC    CL(L'ZEDLMSG)'Servere error doing TBTOP on $JADTAB'
*
ERR4S    DC    CL(L'ZEDSMSG)'TBTDISPL Error'
ERR4L    DC    CL(L'ZEDLMSG)'Servere error displaying $JADTAB'
*
ERR5S    DC    CL(L'ZEDSMSG)'DISPLAY Error'
ERR5L    DC    CL(L'ZEDLMSG)'Servere error displaying ISPF panel'
*
*
ENDSMSG DC  CL(L'ZEDSMSG)'$JAD Ended - RC=0'
ENDLMSG DC  CL(L'ZEDLMSG)'$JAD Module Date/Time - &SYSDATE-&SYSTIME'
*
         EJECT
WKAREA   DSECT
         DS    18F                 SAVE AREA
WKPARM   DS    40F                 PARM LIST
*
DWORD    DS    D                   WORK DOUBLE WORD
*
LINKADD  DS    F                   LOAD ADDRESS OF 'ISPLINK'
*
##MSG    DS    F                   SAVED REG 14
##DO#1   DS    F                   SAVED REG 14
##SORT   DS    F                   SAVED REG 14
##VIEW   DS    F                   SAVED REG 14
##DISPL  DS    F                   SAVED REG 14
##ADDPOP DS    F                   SAVED REG 14
##REMPOP DS    F                   SAVED REG 14
*
*
*
NEXTASCB DS    F                   ASVT POINTER ANCHOR
CURRASCB DS    F                   CURR ASCB ADDRESS
*
SWITCH   DS    CL1                 SWITCH
$REFRESH EQU   X'80'               NEED TO REFRESH THE TABLE
$FNDASCB EQU   X'40'               THIS ASCB IS GOOD !!!
$JOBVIEW EQU   X'20'               'VIEW' FILTER IS ON
$JOBSORT EQU   X'10'               'SORT' REQUIRED
$JOBSLTD EQU   X'08'               'A JOB' IS SELECTED FOR DISPLAY
*
$TBCREAT EQU   X'01'               TABLE WAS CREATED
*
WLINKQRY DS    CL(LINKQRYL)
WSORT    DS    CL($SORTLNG)        'SORT'
*
SAVEJOBN DS    CL(L'JOBN)
SAVEASID DS    CL(L'ASID)
*
*
SAVETYPE DS    CL(L'TYPE)          USED BY 'JOB FILTER'
SAVEJCMP DS    CL(L'JOBN)              (BY PREFIX)
SAVEJLNG DS    F
*
RPCT     DS    F
EPCT     DS    F
DOTS     DS    F
TOTUIC   DS    F
*
TEMP1    DS    F
TEMP2    DS    F
TEMP3    DS    F
TEMP4    DS    F
*
POPCOL   DS    XL4
POPROW   DS    XL4
WPANEL   DS    CL8                 PANEL TO BE DISPLAYED
*
*------- THE FOLLOWING FIELDS NEED TO STAY TOGETHER (ISPFVAR)
*
WVARS    DS    0F
$EXCPCNT DS    XL4
BASESTOR DS    XL4
COUNT    DS    XL4
DOMAIN   DS    XL4
ESTOR    DS    XL4
EXCPCNT  DS    XL4
FIXBELOW DS    XL4
INTPGIN  DS    XL4
INTPGOUT DS    XL4
INWSS    DS    XL4
RDYTCBS  DS    XL4
RSTOR    DS    XL4
STORAGE  DS    XL4
SWAPCNT  DS    XL4
SYSUIC1  DS    XL4
SYSUIC2  DS    XL4
SYSUIC3  DS    XL4
SYSUIC4  DS    XL4
TARWSS   DS    XL4
TOTEXP   DS    XL4
TOTREAL  DS    XL4
TOTSTOR  DS    XL4
UIC1     DS    XL4
UIC2     DS    XL4
UIC3     DS    XL4
UIC4     DS    XL4
WSMRV    DS    XL4
*
$ESTOR   DS    CL6
$RSTOR   DS    CL6
$TOTEXP  DS    CL8
$TOTREAL DS    CL8
ASID     DS    CL3                 ASID
CPUP     DS    CL4
DPRTY    DS    CL2                 DISPATCHING PRIORITY
ESTORM   DS    CL8
EVENT    DS    CL20
EVENTCDE DS    XL1
JOBFLTR  DS    CL8
JOBN     DS    CL8                 JOBNAME
JOBPCT   DS    CL50
JOBSEL   DS    CL8
MARKS    DS    CL(L'JOBPCT)
MASKS    DS    CL16
MYCMD    DS    CL80
MYSEL    DS    CL1
OPT      DS    CL1
OPTSTMT  DS    CL80
PROCPCT  DS    CL16
RSTORM   DS    CL8
SORTSEQ  DS    CL1
SRBTIME  DS    CL11
SWAPCODE DS    XL1
SWAPSTAT DS    CL4
SWAPTEXT DS    CL40
SYSID    DS    CL4
TCBTIME  DS    CL11
TYPE     DS    CL1                 JOBTYPE
UICDIST  DS    CL(L'JOBPCT)
UICMSKS  DS    CL(L'JOBPCT)
ZEDLMSG  DS    CL70
ZEDSMSG  DS    CL30
*
*------- END (ISPF VARIABLES)
*
WKLENG   EQU   *-WKAREA
         EJECT
         PRINT GEN
         CVT   DSECT=YES,LIST=YES
         EJECT
         IHAASVT LIST=YES
         EJECT
         IHAASCB LIST=YES
         EJECT
         IHAASXB LIST=YES
         EJECT
         IARRCE
         EJECT
         IARRAX
         EJECT
         IRAOUCB
         EJECT
         IHAOUXB
         END
*
