SEEK     TITLE 'SEEK -- TO LOCATE A MODULE'
         PRINT NOGEN
SEEK     CSECT
*
*-------------------------------------------------------------------
*
*        AUTHOR - VINH VU
*        PURPOSE - TO LOCATE A MODULE IN EITHER STEPLIB, JOBLIB
*              OR LINKLIST.
*        DATE WRITTEN - 11/04/81
*        MACROS USED - SET, EXIT, BLDL, TPUT, DCB, IKJPARM,
*              IKJPOSIT, IKJENDP, CVT, IKJCPPL, IKJPPL, IHALPDE.
*
*-------------------------------------------------------------------
*
*        USAGE OF REGS -
*
*              R0  - WORK
*              R1  - WORK
*              R2  - WORK
*              R3  - WORK
*              R4  - WORK
*              R5  - WORK
*              R6  - WORK
*              R7  - USED AS PDL BASE
*              R8  - USED AS PPL BASE
*              R9  - USED AS RETURN ADDR FOR SUB ROUTINE
*              R10 - CPPL ADDR
*              R11 - WORK
*              R12 - BASE FOR PROG
*              R13 - BASE FOR SAVE & GETMAINED AREA
*              R14 - USED AS RETURN ADDR FOR SUB ROUTINE
*              R15 - WORK
*
*        ABENDS -
*
*              10  - TPUT ERROR
*              20  - IKJPARS ERROR
*
*-------------------------------------------------------------------
*
*        MODIFIED - VINH VU - 03/16/93 - CHANGE ALL 'TPUT' TO 'PUTLINE'
*        ALSO ADDED THE SEARCH FOR MLPA/FLPA QUEUE.  THE LINKLIST
*        DATA SET NAME IS NOW ALSO DISPLAYED (ACCESS 'LLT').
*        MORE INFORMATION (MODULE ATTRIBUTES) WILL BE DISPLAYED IF
*        FOUND IN ANY LPA QUEUE.
*
*-------------------------------------------------------------------
*
         SET   DSECT=WKAREA,LV=WKLENG
         MVI   FNDSW,X'00'         INIT FOUND SW
         MVC   WKNAME,BLANK        BLANK OUT THE NAME
         LR    R10,R1              GET CPPL ADDR
         USING CPPL,R10            ESTAB ADDR
         XC    WKPPL,WKPPL         CLEAR OUT PPL
         LA    R8,WKPPL            GET ADDR OF PPL
         USING PPL,R8              ESTAB ADDR
         MVC   PPLUPT,CPPLUPT      GET UPT
         MVC   PPLECT,CPPLECT      GET ECT
         XC    MYECB,MYECB         CLEAR MY ECB
         LA    R1,MYECB            GET A(ECB)
         ST    R1,PPLECB           GET ECB
         MVC   PPLPCL,APCL         GET PPLPCL
         LA    R1,ANS
         ST    R1,PPLANS           GET ANS
         MVC   PPLCBUF,CPPLCBUF    GET CBUF
         CALLTSSR EP=IKJPARS,MF=(E,WKPPL)
         LTR   R15,R15
         BNZ   ABEND020
         L     R7,ANS              GET ANS
         LA    R1,0(0,R7)          CLEAR OUT TRASH
         LTR   R1,R1               CHECK IF ANS IS THERE
         BZ    ABEND020            NOP - THEN ABEND
         USING IKJPARMD,R7         ESTAB ADDR
         TM    MODNAME+6,X'80'     MODULE NAME THERE ?
         BZ    ABEND020            NO - THEN ABEND
         L     R1,MODNAME          GET PTR TO MODNAME
         LH    R2,MODNAME+4        GET LENG
         STC   R2,SAVELENG         SAVE THE LENG
         BCTR  R2,R0               MINUS 1 FOR MVC
         EX    R2,MVCIT            MOVE MODNAME
         MVC   WKFF,H1
         LA    R1,WKENTL           GET ENTRY LENG
         STCM  R1,B'0011',WKLL     STORE LENG INTO LIST
         BLDL  0,WKLIST
         LTR   R15,R15             TEST RETURN CODE
         BNZ   CKMFLPA             IS NON ZERO THEN CHECK LPA
         B     ANALYZE             GOTO ANALYZE IT
*
*
MVCIT    MVC   WKNAME(0),0(R1)
*
*--------------
*        MODULE IS FOUND IN EITHER LINKLIST OR JOBPACK AREA.
*--------------
*
ANALYZE  EQU   *
         OI    FNDSW,$FNDSTEP      TURN ON FND SW
         MVC   WKPRINT,MSG01       GET FIRST LINE
         MVC   WKPRINT+11(L'WKNAME),WKNAME
         LA    R1,WKPRINT+11       GET BEGIN ADDR OF MODNAME
         XR    R15,R15             CLEAR REG 15
         IC    R15,SAVELENG        GET LENG OF MODNAME
         LA    R1,0(R15,R1)        GET TO THE END OF MODNAME
         MVC   0(L'MSG01A,R1),MSG01A
*
         UNPK  WKDWORD(7),WKTTR(4)      GET TTR
         TR    WKDWORD(6),NUMTRT-240    MAKE THIS PRINTABLE
         MVC   18(6,R1),WKDWORD    MOVE THIS TO MESSAGE LINE
*
         LA    R1,WKPRINT          GET ADDR OF PUTLINE AREA
         LA    R15,L'WKPRINT       GET LENG OF MESSAGE
         BAL   R14,WLINE           ISSUE THE PUTLINE
*
         SR    R1,R1               CLEAR REG 1
         IC    R1,WKK              GET THE CONCAT NUMBER
         CVD   R1,WKDWORD          CONVERT TO PACK NUMBER
         UNPK  SAVENUM,WKDWORD+6(2)
         OI    SAVENUM+2,X'F0'     MAKE IT PRINTABLE
*
         SR    R11,R11             CLEAR REG 11
         IC    R11,WKZ             GET THE Z
*
*
*-------------------------------------------------------------------
*        THIS ROUTINE IS TO CHECK IF MODULE CAME FROM A PRIVATE
*        LIBRARY.
*-------------------------------------------------------------------
*
CHECK0   EQU   *
         C     R11,F0              IS IT PRIVATE LIBRARY ?
         BH    CHECK1              NOP - THEN CHECK FOR 1
         MVC   WKPRINT,MSG02            - GET MSG
         B     STEPLBPR            THEN GOTO PRINT IT
*
*
*-------------------------------------------------------------------
*        THIS ROUTINE IS TO CHECK IF MODULE CAME FROM A LINKLIST
*        LIBRARY.  IF IT IS, WILL DISPLAY MESSAGE AND THEN GO ON
*        TO CHECK IN LPA.
*-------------------------------------------------------------------
*
CHECK1   EQU   *
         C     R11,F1              IS IT LINK LIBRARY ?
         BH    CHECK2              NOP - THEN CHECK FOR 2
*
         MVC   WKPRINT,MSG03            GET MSG
         MVC   WKPRINT+36(3),SAVENUM    GET CONCAT NUMBER
*
         LA    R1,WKPRINT          GET ADDR OF PUTLINE AREA
         LA    R15,L'WKPRINT       GET LENG OF MESSAGE
         BAL   R14,WLINE           ISSUE THE PUTLINE
*
         SR    R15,R15             CLEAR REG15
         IC    R15,WKK             GET CONCAT # FOR LNKLST DSAT
         MH    R15,H45             MULT BY LLT ENTRY LENG
*
         L     R1,CVTPTR           GET CVT POINTER
         USING CVTMAP,R1
         L     R1,CVTLLTA          GET LLT ADDRESS
         DROP  R1
*
         LA    R1,8(R15,R1)        GO TO THE LLT ENTRY
         MVC   WKPRINT,MSG03A      GET MSG
         MVC   WKPRINT+18(44),1(R1)     GET DSN
         SR    R15,R15             CLEAR REG15
         IC    R15,0(R1)           GET LENG OF DSN
         LA    R1,WKPRINT+18(R15)  GO TO THE END OF DSN
         MVI   0(R1),C''''         PUT IN ENDING QUOTES
         MVI   1(R1),C')'
*
         LA    R1,WKPRINT          GET ADDR OF PUTLINE AREA
         LA    R15,L'WKPRINT       GET LENG OF MESSAGE
         BAL   R14,WLINE           ISSUE THE PUTLINE
*
         B     CKMFLPA             NOW GO CHECK LPA
*
*
*-------------------------------------------------------------------
*        THIS ROUTINE IS TO CHECK IF MODULE CAME FROM A STEP OR JOB
*        OR TASK LIBRARY.
*-------------------------------------------------------------------
*
CHECK2   EQU   *
         C     R11,F2              IS IT JOB, TASK OR STEP LIBRARY ?
         BH    CHECK3              NOP - THEN IT BELONGS TO PARENT TASK
         MVC   WKPRINT,MSG04       ELSE - GET MSG
         B     STEPLBPR            THEN GOTO PRINT IT
*
CHECK3   EQU   *
         LA    R1,MSG05            MOD FORM PARENT TASK LIBRARY
         LA    R15,L'MSG05
         BAL   R14,WLINE
*
         MVC   WKPRINT,MSG05A      GET MSG
         B     STEPLBPR            THEN GOTO PRINT IT
*
*
*
*
*--------------
*        THIS ROUTINE WILL PRINT OUT MESSAGE FOR A MODULE FOUND
*        IN STEPLIB (OR JOBPACK AREA), NOT FROM LINKLIST.
*        IF A MODULE IS FOUND IN LINKLIST, IT WILL BE PRINTED IN
*        'CHECK1' ROUTINE.
*--------------
*
STEPLBPR EQU   *
         MVC   WKPRINT+46(3),SAVENUM    GET CONCAT NUMBER
*
         LA    R1,WKPRINT          GET ADDR OF PUTLINE AREA
         LA    R15,L'WKPRINT       GET LENG OF MESSAGE
         BAL   R14,WLINE           ISSUE THE PUTLINE
*
         B     CKMFLPA             GOTO CHECK LPA
         EJECT
*
*
*
*-------------------------------------------------------------------
*        THIS ROUTINE IS TO CHECK IF MODULE CAME FROM FLPA/MLPA
*-------------------------------------------------------------------
*
CKMFLPA  EQU   *
         L     R1,CVTPTR           GET CVT POINTER
         USING CVTMAP,R1           ESTAB ADDR
         L     R11,CVTQLPAQ        GET MLPA DIR ENTRIES
         USING CDENTRY,R11         ESTAB ADDR
         DROP  R1
*
MFLOOP   EQU   *
         CLC   CDCHAIN,F0          END OF TABLE
         BE    CKLPA               YEAH - THEN CHECK PLPA
         CLC   CDNAME,WKNAME       NAME MATCH ?
         BE    FNDMFLPA            YEAH - THEN FOUND IT
         L     R11,CDCHAIN         ELSE - BUMP TO NEXT ENTRY
         B     MFLOOP              AND GOBACK TO LOOP
*
FNDMFLPA EQU   *
         OI    FNDSW,$FNDMF        TURN ON FND SW
*
         MVC   WKPRINT,MSG01       GET FIRST LINE
         MVC   WKPRINT+11(L'WKNAME),WKNAME
         LA    R1,WKPRINT+11       GET BEGIN ADDR OF MODNAME
         SR    R15,R15             CLEAR REG 15
         IC    R15,SAVELENG        GET LENG OF MODNAME
         LA    R1,0(R15,R1)        GET TO THE END OF MODNAME
         MVC   0(L'MSG01B,R1),MSG01B
*
         TM    FNDSW,$FNDSTEP      MOD FOUND ALREADY IN STEPLIB ?
         BZ    FNDMFONL            NOOP - ONLY FOUND HERE
         MVC   L'MSG01B(L'MSG01G,R1),MSG01G
         LA    R1,BLANK            PRINT OUT ONE BLANK LINE
         LA    R15,L'BLANK
         BAL   R14,WLINE
*
FNDMFONL EQU   *
         LA    R1,WKPRINT          GET ADDR OF MSG
         LA    R15,L'WKPRINT       GET LENG OF MSG
         BAL   R14,WLINE           AND DISPLAY
*
         MVC   WKDWORD(4),CDENTPT  MOVE ADDR TO A TEMP AREA
         NI    WKDWORD,X'FF'-CDEMODE    TURN OFF THE 31-BIT MODE FLAG
         UNPK  WKPRINT(9),WKDWORD(5)
         TR    WKPRINT(8),NUMTRT-240    SAVE ENTRY POINT
         MVC   MENTPT,WKPRINT
*
         MVC   M31BIT,$31BIT       DEFAULT - YES
         TM    CDENTPT,CDEMODE     IS IT REALLY ?
         BO    MFCOUNT             YES - GO GET USE COUNT
         MVC   M31BIT,#31BIT       ELSE - SAY NO
*
MFCOUNT  EQU   *
         LH    R1,CDUSE            GET USE COUNT
         CVD   R1,WKDWORD          CONVERT TO PACKED DECIMAL
         UNPK  MUSECNT,WKDWORD     UNPACK
         OI    MUSECNT+L'MUSECNT-1,X'F0'
*
         MVC   MRENT,$RENT         ASSUME DEFAULT AS 'RENT'
         TM    CDATTR,CDREN        IS IT REALLY ?
         BO    MFCKRES             YEAH - GO CHECK FOR 'REUSE'
         MVC   MRENT,#RENT         ELSE - SAY NO
*
MFCKRES  EQU   *
         MVC   MREUSE,$REUSE       ASSUME DEFAULT AS 'REUSE'
         TM    CDATTR,CDSER        IS IT REALLY ?
         BO    MFCKAC              YEAH - GO CHECK FOR 'AC=X'
         MVC   MREUSE,#REUSE       ELSE - SAY NO
*
MFCKAC   EQU   *
         MVC   MAUTH,$AUTH         ASSUME DEFAULT AS 'AUTH'
         TM    CDATTR2,CDAUTH      IS IT REALLY ?
         BO    MFCKLIB             YEAH - GO PRINT
         MVC   MAUTH,#AUTH         ELSE - SAY NO
*
MFCKLIB  EQU   *
         MVC   MAPF,$APF           ASSUME DEFAULT AS 'APF-LIB'
         TM    CDATTR2,CDSYSLIB    IS IT REALLY ?
         BO    LPAPRINT            YEAH - GO PRINT
         MVC   MAPF,#APF           ELSE - SAY NO
*
         B     LPAPRINT            NOW DO THE PRINT
         DROP  R11
*
*
*
*-------------------------------------------------------------------
*        THIS ROUTINE IS TO CHECK IF MODULE CAME FROM PLPA
*-------------------------------------------------------------------
*
CKLPA    EQU   *
         L     R1,CVTPTR           GET CVT POINTER
         USING CVTMAP,R1           ESTAB ADDR
         SR    R11,R11             CLEAR REG 11
         ICM   R11,B'0111',CVTLPDIR     GET LPA DIR ENTRIES
         USING LPDE,R11            ESTAB ADDR
         DROP  R1
*
LOOP     EQU   *
         CLC   LPDENAME,=8X'FF'    END OF TABLE
         BE    ENDIT               YEAH - THEN NOT FOUND
         CLC   LPDENAME,WKNAME     NAME MATCH ?
         BE    FNDIT               YEAH - THEN FOUND IT
         LA    R11,LPDELENG(0,R11) ELSE - BUMP TO NEXT ENTRY
         B     LOOP                AND GOBACK TO LOOP
*
FNDIT    EQU   *
         OI    FNDSW,$FNDPLPA      TURN ON FND SW
*
         MVC   WKPRINT,MSG01       GET FIRST LINE
         MVC   WKPRINT+11(L'WKNAME),WKNAME
         LA    R1,WKPRINT+11       GET BEGIN ADDR OF MODNAME
         SR    R15,R15             CLEAR REG 15
         IC    R15,SAVELENG        GET LENG OF MODNAME
         LA    R1,0(R15,R1)        GET TO THE END OF MODNAME
         MVC   0(L'MSG01C,R1),MSG01C
*
         TM    FNDSW,$FNDSTEP      MOD FOUND ALREADY IN STEPLIB ?
         BZ    FNDITONL            NOOP - ONLY FOUND HERE
         MVC   L'MSG01C(L'MSG01G,R1),MSG01G
         LA    R1,BLANK            PRINT OUT ONE BLANK LINE
         LA    R15,L'BLANK
         BAL   R14,WLINE
*
FNDITONL EQU   *
         LA    R1,WKPRINT          GET ADDR OF MSG
         LA    R15,L'WKPRINT       GET LENG OF MSG
         BAL   R14,WLINE           AND DISPLAY
*
         MVC   WKDWORD(4),LPDENTP  MOVE ADDR TO A TEMP AREA
         NI    WKDWORD,X'FF'-LPDEMODE   TURN OFF 31-BIT MODE FLAG
         UNPK  WKPRINT(9),WKDWORD(5)
         TR    WKPRINT(8),NUMTRT-240    SAVE ENTRY POINT
         MVC   MENTPT,WKPRINT
*
         MVC   M31BIT,$31BIT       DEFAULT - YES
         TM    LPDENTP,LPDEMODE    IS IT REALLY ?
         BO    DOCOUNT             YES - GO GET USE COUNT
         MVC   M31BIT,#31BIT       ELSE - SAY NO
*
DOCOUNT  EQU   *
         LH    R1,LPDEUSE          GET USE COUNT
         CVD   R1,WKDWORD          CONVERT TO PACKED DECIMAL
         UNPK  MUSECNT,WKDWORD     UNPACK
         OI    MUSECNT+L'MUSECNT-1,X'F0'
*
         MVC   MRENT,$RENT         ASSUME DEFAULT AS 'RENT'
         TM    LPDEATTR,LPDEREN    IS IT REALLY ?
         BO    CKRES               YEAH - GO CHECK FOR 'REUSE'
         MVC   MRENT,#RENT         ELSE - SAY NO
*
CKRES    EQU   *
         MVC   MREUSE,$REUSE       ASSUME DEFAULT AS 'REUSE'
         TM    LPDEATTR,LPDESER    IS IT REALLY ?
         BO    CKAC                YEAH - GO CHECK FOR 'AC=X'
         MVC   MREUSE,#REUSE       ELSE - SAY NO
*
CKAC     EQU   *
         MVC   MAUTH,$AUTH         ASSUME DEFAULT AS 'AC=1'
         TM    LPDEATT2,LPDEAUTH   IS IT REALLY ?
         BO    CKLIB               YEAH - GO CHECK FOR 'APF-LIB'
         MVC   MAUTH,#AUTH         ELSE - SAY NO
*
CKLIB    EQU   *
         MVC   MAPF,$APF           ASSUME DEFAULT AS 'APF-LIB'
         TM    LPDEATT2,LPDESYSL   IS IT REALLY ?
         BO    LPAPRINT            YEAH - GO PRINT
         MVC   MAPF,#APF           ELSE - SAY NO
*
         B     LPAPRINT
         DROP  R11
*
*
LPAPRINT EQU   *
         LA    R1,MSG01D           GET ADDR OF MSG
         LA    R15,L'MSG01D        GET LENG OF MSG
         BAL   R14,WLINE           AND DISPLAY
*
         MVC   WKPRINT,BLANK
         MVC   WKPRINT(L'MSG01E),MSG01E
         MVC   WKPRINT+12(L'MENTPT),MENTPT
         MVC   WKPRINT+24(L'M31BIT),M31BIT
         MVC   WKPRINT+30(L'MUSECNT),MUSECNT
         MVC   WKPRINT+38(L'MRENT),MRENT
         MVC   WKPRINT+45(L'MREUSE),MREUSE
         MVC   WKPRINT+53(L'MAUTH),MAUTH
         MVC   WKPRINT+58(L'MAPF),MAPF
         LA    R1,WKPRINT          GET ADDR OF MSG
         LA    R15,L'WKPRINT       GET LENG OF MSG
         BAL   R14,WLINE           AND DISPLAY
         B     EXITIT
*
*
ENDIT    EQU   *
         TM    FNDSW,$FNDONE       FOUND ANY ?
         BNZ   EXITIT              YEAH - THEN END IT
         MVC   WKPRINT,MSG01       GET MSG
         MVC   WKPRINT+11(L'WKNAME),WKNAME
         LA    R1,WKPRINT+11       GET BEGINNING ADDR OF MODNAME
         XR    R15,R15             CLEAR REG 15
         IC    R15,SAVELENG        GET LENG OF MODNAME
         LA    R1,0(R15,R1)        GET TO END OF MODNAME
         MVC   0(L'MSG01F,R1),MSG01F
         LA    R1,WKPRINT
         LA    R15,L'WKPRINT
         BAL   R14,WLINE
*
EXITIT   EQU   *
         EXIT
         EJECT
*
*
*---------------
*        AT ENTRY TO WLINE, R1 POINTS TO OUTPUT BUFFER, R15 POINTS TO
*        ITS LENGTH.  THIS IS THE MSG BUFFER TO BE DISPLAYED.
*---------------
*
WLINE    EQU   *
         ST    R14,SAVE14          SAVE RETURN ADDRESS
         MVC   WMSGLENG,H84        MOVE LENG TO PUTLINE WKAREA
         XC    WMSGRES,WMSGRES     CLEAR OUT THE RESERVED AREA
         MVI   WMSG,X'40'          CLEAR OUT MESSAGE AREA
         MVC   WMSG+1(L'WMSG-1),WMSG
         CH    R15,=AL2(L'WMSG)    IS MESSAGE GOING TO FIT ??
         BNH   WLINERDY            YEAH - THEN GO ON
         LH    R15,=AL2(L'WMSG)    ELSE - USE MAX LENG
*
WLINERDY EQU   *
         BCTR  R15,R0              SUBTRACT 1 FOR 'EX' INSTRUCTION
         EX    R15,WMOVEMSG        NOW MOVE MSG TO WKAREA
         XC    ECBADS,ECBADS       CLEAR OUT THE ECB
         XC    IOPLADS,IOPLADS     CLEAR OUT THE IOPL
         MVC   WPUTBLOK,PUTBLOK    MOVE PUTLINE LISTFORM TO WKAREA
         L     R3,CPPLUPT          GET UPT
         L     R4,CPPLECT          GET ECT
         PUTLINE PARM=WPUTBLOK,UPT=(R3),ECT=(R4),ECB=ECBADS,           X
               OUTPUT=(WMSGLENG,TERM,SINGLE,DATA),MF=(E,IOPLADS)
         LTR   R15,R15             TEST RETURN CODE
         BZ    WLINEOK             IF ZERO THEN GET READY TO TERMINATE
         ABEND 10
*
WLINEOK  EQU   *
         L     R14,SAVE14          LOAD RETURN ADDRESS
         BR    R14                 AND NOW RETURN
*
*
WMOVEMSG MVC   WMSG(0),0(R1)       MOVE MESSAGE TO PUTLINE WKAREA
*
*
         EJECT
*
*---------------
*        AT ENTRY TO GETBUF, R1 POINTS TO OUTPUT BUFFER, R15 POINTS TO
*        ITS LENGTH.  IF THE GETLINE WORKS, THE INPUT BUFFER (DATA
*        RETURNED BY GETLINE) WILL BE COPIED TO THIS AREA.
*---------------
*
*
GETBUF   EQU   *
         ST    R14,SAVE14          SAVE RETURN ADDRESS
         ST    R1,OUTPTR           SAVE THE BUFFER POINTER
         ST    R15,OUTLENG         SAVE THE BUFFER LENGTH
         XC    ECBADS,ECBADS       CLEAR OUT THE ECB
         XC    IOPLADS,IOPLADS     CLEAR OUT THE IOPL
         MVC   WGETBLOK,GETBLOK    MOVE PUTLINE LISTFORM TO WKAREA
         L     R3,CPPLUPT          GET UPT
         L     R4,CPPLECT          GET ECT
         GETLINE PARM=WGETBLOK,UPT=(R3),ECT=(R4),ECB=ECBADS,           X
               INPUT=(ISTACK,PHYSICAL),MF=(E,IOPLADS)
         LTR   R15,R15             TEST RETURN CODE
         BZ    GETBUFOK            IF ZERO THEN GET READY TO TERMINATE
         MVC   BUFFER,BLANK        BLANK OUT MSG BUFFER
         MVC   BUFFER(L'ERR1),ERR1      GET ERROR MSG TO BUFFER
         ST    R15,WKDWORD         SAVE RC
         UNPK  WKDWORD+5(3),WKDWORD+3(2) UNPACK RC
         MVC   BUFFER+3(2),WKDWORD+5    MOVE TO MESSAGE
         TR    BUFFER+3(2),NUMTRT-240   MAKE SURE IT'S TRANSLATED RIGHT
*
*--------------
*        NORMALLY, WE CAN'T CALL WLINE IN HERE, SINCE WLINE SAVE R14
*        INTO SAVE14 (WHICH WILL OVERLAY OUR SAVE14).  HOWEVER, AFTER
*        WE CALL WLINE, THE 'ABEND' WILL BE ISSUED AND WE DO NOT NEED
*        TO RETURN TO OUR CALLER (WHOEVER ISSUED GETBUF).
*--------------
*
         LA    R1,BUFFER
         LA    R15,L'BUFFER
         BAL   R14,WLINE           PUT OUT MESSAGE
         ABEND 999
*
GETBUFOK EQU   *
         L     R1,WGETBLOK+GTPBIBUF-GTPB      GET RET BUF ADDR
         LH    R14,0(R1)           GET LENG RETURN
*
         ST    R14,FREELENG        SAVE LENG TO BE FREEMAIN'ED
         ST    R1,FREEAREA         SAVE ADDRESS TO DO FREEMAIN
*
         C     R14,OUTLENG         COMPARE WITH MY ALLOWED MAX
         BNH   GETMOVE             IF OK THEN MOVE TO MY BUFFER
         L     R14,OUTLENG         ELSE - USE MY MAX
*
GETMOVE  EQU   *
         L     R15,OUTPTR          GET ADDR OF MY BUFFER
         BCTR  R14,R0              SUBTRACT 1 FOR 'EXE' INSTRUCTION
         EX    R14,MOVEBUF         THEN MOVE DATA TO MY BUFFER
*
         L     R3,FREEAREA
         L     R4,FREELENG
         FREEMAIN R,A=(R3),LV=(R4),SP=1
*
         L     R14,SAVE14          LOAD RETURN ADDRESS
         BR    R14                 AND NOW RETURN
*
*
MOVEBUF  MVC   0(0,R15),4(R1)
*
*---------------
*        IF IKJPARS FAILED
*---------------
*
ABEND020 EQU   *
         ABEND 20
         EJECT
*
*
*
*
H1       DC    H'1'
H45      DC    H'45'
H84      DC    H'84'
F0       DC    F'0'
F1       DC    F'1'
F2       DC    F'2'
APCL     DC    A(PCL)
*
*
PUTBLOK  PUTLINE MF=L
PUTBLOKL EQU   *-PUTBLOK           LENG OF THE PUTLINE LIST FORM
*
*
GETBLOK  GETLINE MF=L
GETBLOKL EQU   *-GETBLOK           LENG OF THE GETLINE LIST FORM
*
*
NUMTRT   DC    C'0123456789ABCDEF'
*
BLANK    DC    CL80' '
*
MSG01    DC    CL80'==> MODULE XXXXXXXX'
MSG01A   DC    C' WAS FOUND AT TTR=XXXXXX IN'
MSG01B   DC    C' WAS FOUND IN MLPA/FLPA OR ACTIVE PLPA QUEUE'
MSG01C   DC    C' WAS FOUND IN PLPA'
MSG01D   DC    C'               ENTRY  31BIT   COUNT   ------ ATTRIBUTE*
               S -------'
MSG01E   DC    C'            XXXXXXXX    YES   XXXXX   NORENT NOREUSE A*
               C=0 NOAPF'
MSG01F   DC    C' WAS NOT FOUND IN EITHER LINKLIST, STEPLIB, TASKLIB OR*
                LPA'
MSG01G   DC    C' (ALSO)'
MSG02    DC    CL80'         PRIVATE LIBRARY          ==>  NUMBER XXX'
MSG03    DC    CL80'      LINKLIST LIBRARY  ==>  NUMBER XXX'
MSG03A   DC    CL80'          (DSN = '''
MSG04    DC    CL80'      JOB, TASK OR STEP LIBRARY   ==>  NUMBER XXX'
MSG05    DC    CL80'      JOB, TASK OR STEP LIBRARY'
MSG05A   DC    CL80'          OF PARENT TASK          ==>  NUMBER XXX'
*
*
ERR1     DC    C'RC=XX - GETLINE ERROR'
*
$31BIT   DC    CL3'YES'
#31BIT   DC    CL3' NO'
$RENT    DC    CL6' RENT '
#RENT    DC    CL6'NORENT'
$REUSE   DC    CL7' REUSE '
#REUSE   DC    CL7'NOREUSE'
$AUTH    DC    CL4'AC=1'
#AUTH    DC    CL4'AC=0'
$APF     DC    CL5' APF '
#APF     DC    CL5'NOAPF'
*
         EJECT
*
WKAREA   DSECT
         DS    18F                 SAVE AREA
*
WKDWORD  DS    D
*
*
SAVE14   DS    F
*
ECBADS   DS    F                   ECB USED BY PUTLINE
IOPLADS  DS    4F                  IOPL USED BY PUTLINE
*
OUTPTR   DS    F
OUTLENG  DS    F
*
*
FREELENG DS    F
FREEAREA DS    F
*
*
ANS      DS    F
MYECB    DS    F
*
*
         DS    0F
WPUTBLOK DS    CL(PUTBLOKL)        PUTLINE LIST FORM
*
         DS    0F
WGETBLOK DS    CL(GETBLOKL)        GETLINE LIST FORM
*
*
*
*-------------------------------------------------------------------
*        DO NOT INSERT ANYTHING FROM HERE TO WKENTL
*-------------------------------------------------------------------
*
*
WKLIST   DS    0F
WKFF     DS    XL2
WKLL     DS    XL2
WKNAME   DS    CL8
WKTTR    DS    XL3
WKK      DS    XL1
WKZ      DS    XL1
WKC      DS    XL1
WKUSER   DS    CL62
WKENTL   EQU   *-WKNAME            LENG FOR THIS ENTRY
*
*
BUFFER   DS    CL80
*
WMSGLENG DS    H
WMSGRES  DS    H
WMSG     DS    CL80
*
*
MENTPT   DS    CL8
M31BIT   DS    CL3
MUSECNT  DS    CL5
MRENT    DS    CL6
MREUSE   DS    CL7
MAUTH    DS    CL4
MAPF     DS    CL5
*
WKPRINT  DS    CL80
SAVENUM  DS    CL3
*
FNDSW    DS    CL1
$FNDSTEP EQU   X'80'               FOUND IN JOB/STEP LIB
$FNDMF   EQU   X'40'               FOUND IN MLPA/FLPA
$FNDPLPA EQU   X'20'               FOUND IN PLPA
$FNDONE  EQU   $FNDSTEP+$FNDMF+$FNDPLPA
*
WKPPL    DS    CL(PPLLENG)
SAVELENG DS    CL1
*
WKLENG   EQU   *-WKAREA
         EJECT
         CVT   DSECT=YES
         EJECT
         IHALPDE
LPDELENG EQU   *-LPDE
         EJECT
         IHACDE
CDELENG  EQU   *-CDENTRY
         EJECT
         IKJCPPL
         EJECT
         IKJPPL
PPLLENG  EQU   *-PPL               LENG OF PPL
         EJECT
         IKJPSCB
         EJECT
         IKJUPT
         EJECT
         IKJECT
         EJECT
         IKJGTPB
         EJECT
*
SEEK     CSECT
         PRINT NOGEN
PCL      IKJPARM
MODNAME  IKJIDENT 'MODULE NAME',                                       X
               MAXLNTH=8,FIRST=ALPHANUM,OTHER=ALPHANUM,                X
               PROMPT='MODULE NAME',                                   X
               HELP=('NAME OF MODULE','NAME OF MODULE TO BE LOCATED')
         IKJENDP
         END
