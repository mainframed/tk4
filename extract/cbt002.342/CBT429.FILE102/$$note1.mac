Note for TAPESCAN.  06/22/00   Version 5.2      (Sam Golob)

   Frank Pajerski's updates to Howard Dean's version of TAPESCAN,
   called Version 5.1, has been fitted with 64K block support and
   has now been called Version 5.2.  See notes on Version 4.6.

Note for TAPESCAN.  06/22/00   Version 4.6A     (Sam Golob)

   A small fix has been made to both Versions 5.2 and 4.6, so
   that if you mount a tape with different JCL volser than the
   VOL1 label says, you get a descriptive error message
   mentioning both VOLSERs explicitly.

Note for TAPESCAN.  04/06/00   Version 4.6      (Sam Golob)

   I think I've fixed TAPESCAN to handle tapes with up to 64K
   blocks.  Since TAPESCAN is a complicated program, I'm making
   some notes to show you what I've had to do.

   TAPESCAN's I/O is as follows:  READs of input tapes are
   "officially" done using BSAM.  Write I/O (for tape copy) is
   done using EXCP.  There is a BSAM DCB with MACRF=RC (so the
   CNTRL macro can be used to position the tape).  But a clever
   way of pushing an EXCP into the BSAM control blocks is
   employed, so that most of the input I/O is really EXCP and not
   BSAM.  See label EXECEXCP for the guts of much of the read I/O
   (but not all of it) in this program.  The rest of the read I/O
   action is in the subroutine at label READON, which is BSAM.

   Since some of the input I/O in TAPESCAN is a BSAM READ, we need
   a remedy to handle 64K block sizes.  To make the TAPESCAN
   program handle up to 64K block sizes, I used a trick, whose
   explanation follows.  This trick was taught to me by Bruce Black
   and Larry Stout of Innovation Data Processing, and we all owe
   them, and that fine company, a huge amount of thanks.

   There is a way to "doctor" a BSAM READ or WRITE, so it will
   copy up to a 64K block of tape data, as opposed to the
   "official limit" of 32K.  You define the BSAM DCB (in our
   case, MACRF=RC) with RECFM=U and BLKSIZE=32760 (the DCBBLKSI
   field).  Then you stuff the number 65535 into the length
   parameter of the READ or WRITE macro (the 5th parameter).
   This works.  This trick was told to me courtesy of the FDR
   people (Bruce Black and Larry Stout).  In their programs, they
   also stuff (for good measure) the number 65535 into the BSAM
   DECB block size field too.  I didn't have to do that, but
   in the TAPESCAN source, below label READER, where the code does
   a subtraction of the residual count from the blocksize, since
   the original code got the blocksize from the DCBBLKSI field of
   the DCB (which is 32760 and unrealistic), I had to substitute a
   flat 65535 for the blocksize in that subtraction.

   Halfword arithmetic was eliminated from the entire program, as
   follows:  A workarea was defined as a fullword, and cleared to
   binary zeros.  Then the first two byte quantity was moved with
   a MVC instruction for 2 bytes, into the low order 2 bytes of the
   fullword.  The entire fullword, with zeroes in the upper 2 bytes
   and the full 16-byte quantity in the lower 2 bytes, was then
   loaded into a register, and fullword numeric operations were
   performed.  There were S instead of SH, and C instead of CH,
   usually.

   Please note that the Store Halfword (STH) instruction stores the
   entire 2-byte quantity, but the Load Halfword (LH) instruction
   does not.  They are NOT opposites, as L and ST are for fullwords.
   Therefore all of the STH instructions involving 2-byte numeric
   quantities, could be kept, as is.

   In this version, I've also forced tape units that are defined as
   3400-6 (which in former times could be either 1600 bpi or 6250)
   to default to DEN=4 (6250 bpi).  There aren't very many 1600
   bpi tape drives (or 6250 for that matter) around any more.

Note for TAPESCAN.  01/11/95   Version 4.5      (Sam Golob)

   This is just to mention that I've tried to remove an annoying
   aspect of using TAPESCAN, in that footage measures for cartridges
   were being displayed as if they were DEN=2 (800 bpi).  The numbers
   generated were unduly large, and hard to relate to.  I simply made
   an attempt to fool the program into thinking cartridges were DEN=4
   (6250 bpi), which generates footage numbers that are more
   "realistic" to most of us.  I have not attempted to put 38000 bpi
   code into this program.  For me, it's better to relate the numbers
   to "6250 tape" footages.  If you are actually reading a cartridge,
   the word CART appears at end of processing in several places.

   Also included is the previous version of this program in case
   I've inadventently messed something up.

   This program has been linkedited with a routine called "JULIAN"
   that can be found elsewhere on the CBT Tape.  However, I've put
   an object deck and a disassembly for this module here, to make
   your life (hopefully) easier.

        Sam Golob    P.O. Box 906    Tallman, NY 10982-0906
        845-362-1996

   Address of NaSPA:         (this has nothing to do with anything)
        NaSPA  414-768-8000   7044 S. 13th Street
                              Oak Creek, WI 53154-1429

