//AIMS31UE JOB 'IMSGROUP  SH28205610*110A044         999  3000009037',
//  NOTIFY=$A1016,
//  REGION=999K,TIME=5,MSGLEVEL=1,MSGCLASS=H
//*MAIN ORG=LOCAL,CLASS=L
//NARAOUE0 EXEC IMSUPDTE,DISPR=SHR,
//  MEMBER=DFSAOUEH,
//             P=IMA,LOAD='PVT.MODS',
//* CONDL=0,
//* XREFC='XREF(FULL)',
//  SYMI=SOURCETM,SYMO=SOURCETM,ACCT=1,SOUT='*'
//C.SYSIN  DD *
         TITLE 'DFSAOUE0    ---   MACROS.'
         MACRO
&NAME    CALLIST &X,&WXTRN=YES
         AIF   ('&WXTRN' EQ 'NO').WXTDUN
         WXTRN   &X
.WXTDUN  ANOP
&NAME    DC    CL8'&X',V(&X)
         MEND
         EJECT
         MACRO
&NAME    NARUEBUF &COMMENT
NUECPYBF DSECT
NUELL    DC    Y(0)
NUEZZ    DC    Y(0)
NUECMD   DC    CL4'/CMD'
         ORG   NUECMD
NUETXT   DC    CL7'DFS994I'
         ORG
         MEND
         EJECT
         MACRO
&NAME    SNAP1LST &N1,&N2,&VERBAGE,&MODE=,&ORG=
         GBLC  &VERBNAM(20),&VERBTXT(20)
         GBLA  &I
         LCLA  &L,&J
         AIF   ('&MODE' EQ 'MESSAGES').DOMSGS
.*************************************************************
         AIF   ('&VERBAGE'(1,1) EQ '').OVVERB
.*    *********************
&L       SETA  K'&VERBAGE-2         -2 FOR QUOTES.
&I       SETA  &I+1
&VERBNAM(&I) SETC 'SPL&SYSNDX.A'
&VERBTXT(&I) SETC '&VERBAGE'
         DC    A(SPL&SYSNDX.A)
         DC    A(SPL&SYSNDX.A+&L-1)
.OVVERB  ANOP
.***********************************************
         AIF   ('&MODE' EQ 'ADCONS').ADCONS
         AIF   ('&N1'(1,1) EQ '0').OVDCANM
.*    *********************
&N1      DC    A(SPL0000Y)
&N2      DC    A(SPL0000Z-1)
         AGO  .OVDCANM
.*    *********************
.ADCONS  DC    A(&N1,&N2)
.OVDCANM ANOP
.**************************
         AIF   ('&MODE' NE 'ENDLIST').OVEND
         ORG   *-4
         DC    X'80'
         ORG
.OVEND   ANOP
         MEXIT
.**************************************************************
.DOMSGS  ANOP
         AIF   ('&ORG' EQ '').OVADJ
         CNOPBIGR ORG=&ORG
.OVADJ   ANOP
.*******************************
.LOPMSG  ANOP
&J       SETA  &J+1
         AIF   (&J GT &I).DUNMSG
&VERBNAM(&J) DC   0D'0',CL32&VERBTXT(&J)
         AGO   .LOPMSG
.DUNMSG  ANOP
SPL0000Y DC    0D'0',CL32'NOT AVAILABLE IN THIS DUMP.'
SPL0000Z EQU   *
         MEND
**********************************************************************
  TITLE 'NARAOUE0 --- INITIALIZATION.'
**********************************************************************
DFSAOUE0 CSECT
**   REGS ON INPUT
*    R0     A FLAG VALUE
*          =0  INIT ENTRY FOR THIS MSG; UEHBFLG1=UEH1SEG=X'40' IF R0=0.
*              IF UEHFLG1=UEH1CPYP=X'20',THEN UEHCPYBF POINTS
*                                              TO A SYSTEM MESSAGE.
*              IF UEHFLG1=UEH1CMD=X'10', THEN UEHCPYBF POINTS
*                                              TO COPY OF ORIG BUFR.
*          =4  NEITHER FIRST NOR LAST ENTRY; SOMEWHERE IN THE MIDDLE.
*          =8  LAST ENTRY FOR THIS MSG.
*         =12=X'0C' ENTRY FOLLOWING REQUEST FOR STORAGE.
*                    ADDR IS IN UEHUBUFF; =0 IF NONE AVAIL.
*         =16=X'10' ERROR ENCOUNTERED; COMMAND ABORTED; NO SEG AVAIL.
*
*    R1    PTR TO UEHB
*    R7    PTR TO CTB
*    R9    PTR TO CLB
*    R11   PTR TO SCD
*    R13   SAVE AREA
*    R14   RETURN
*    R15   ENTRY POINT
**   REGS ON EXIT
*    R0      ADDRESS OF ALT DEST NAME IF RC/R15=0 OR 8; 8BYTES PADDED.
*            /OR/  SIZE OF STORAGE REQUEST IF RC/R15=16(X'10')
*    R1      ADDRESS OF SEG TO ISRT TO ALT DEST IF R15=0 OR 8.
*    R15  =0 ISRT SEG TO ALT DEST; R0-> DEST; R1-> SEGMENT
*         =4 IGNORE THIS SEG ONLY.
*         =8 PROC COMPLETE; A SEGMENT MAY BE ISRT'ED.
*        =12 PROC COMPLETE; CANCEL ALL ISRT'ED SEGMENTS.
*        =16 REQUEST FOR STORAGE  (R0)=SIZE-OF-AREA-TO-BE-GOTTEN.
*               NEXT ENTRY WILL HAVE (R0)=12.
*        =20
         PRINT   GEN
*        CHANGEID NAME=DFSAOUE,BASE=12
*        CHANGEID IDEND=YES
         PROLOGUE SAVE=*PRECHN
         REQUATE
         CEQUATE
         PRINT   GEN
D#E      EQU   R0        IN SRDUP   = REG FOR DIVIDE - EVEN MBR OF PAIR
D#O      EQU   D#E+1     IN SRDUP   = REG FOR DIVIDE - ODD  MBR OF PAIR
R#L      EQU   R1        IN SRLOGIT = PTR TO LTERM NAME.
M#T      EQU   R1        IN SRTIMSTP= PTR TO "TO"   AREA.
M#F      EQU   R2        IN SRTIMSTP= PTR TO "FROM" AREA.
*B#F     EQU   R2        IN         = PTR TO FEATURES BASE.
C#A      EQU   R1        IN SRDUP   = PTR TO A COMPARAND.
C#B      EQU   R2        IN SRDUP   = PTR TO A COMPARAND.
P#C      EQU   R2        IN SRCALL  = PTR TO CALL-LIST.
B#U      EQU   R3        BASE FOR THE UEHB.
B#C      EQU   R4        BASE FOR THE MSG/CMD BUFFER.
P#B      EQU   R5        IN SRTIMSTP= PTR TO THE BLANK SPOT (C/B = M#F)
P#F      EQU   R5        IN FGFEAT  = PTR TO FEATURE DBL WORD.
E#M      EQU   R6        IN SRTIMSTP= LENGTH TO EXECUTE IN MACH CODE.
B#SEC    EQU   R9        THE SECOND BASE REGITER.
B#S      EQU   R11       *** IDENTITY W/ IBM AT TIME OF CALL.
L##      EQU   R14       LINK TO ALL SUB ROUTINES.
R#X      EQU   R14       WORKING REGISTER --- SHORT TERM FOR INDEXING.
R#BALC   EQU   R14       BRANCH AND LINK CONDITIONAL.
R#W      EQU   R15       WORKING REGISTER --- SHORT TERM FOR MISC.
         STM   R0,R15,STM015
         LA    B#SEC,4095(R12)
         LA    B#SEC,1(B#SEC)
         USING DFSAOUE0+4096,B#SEC
         LR    B#U,R1
         USING UEHB,B#U
         USING SCD,B#S
         USING NUECPYBF,B#C
**************************************************
         ICM   R15,X'0F',=X'01000000'     PRETEND 31-BIT MODE.       XA
         LA    R15,0(R15)                 TRY TO CLEAR IT.           XA
         LTR   R15,R15                    Q. WAS IT CLEARED.         XA
         BZ    AMODE31X                     YES; IS 24, NOT 31.      XA
         OI    AMODE31F,X'80'               NO;  IS 31-BIT. SET FLAG.XA
         LA    R15,AMODE31X               RIG POINTER TO CONTINUE.   XA
         BSM   0,R15                      SET AMODE=24.              XA
AMODE31X #                                                           XA
**************************************************
         BAL   L##,SRLOGIT
         L     R#W,STMR0
         B     *+4(R#W)
         B     ENTRY0
         B     ENTRY4
         B     ENTRY8
         B     ENTRY12
         B     ENTRY16
AMODE31F DC    A(0)                                                  XA
**********************************************************************
  TITLE 'NARAOUE0 --- ENTRY0; INITIAL ENTRY FOR THIS PROCESS.'
**********************************************************************
*    R0     A FLAG VALUE
*          =0  INIT ENTRY FOR THIS MSG; UEHBFLG1=UEH1SEG=X'40' IF R0=0.
*              IF UEHFLG1=UEH1CPYP=X'20',THEN UEHCPYBF POINTS
*                                              TO A SYSTEM MESSAGE.
*              IF UEHFLG1=UEH1CMD=X'10', THEN UEHCPYBF POINTS
*                                              TO COPY OF ORIG BUFR.
ENTRY0   #
         TM    UEHBFLG1,UEH1CPYP
         BO    E0MSG
         TM    UEHBFLG1,UEH1CMD
         BO    E0CMD
         MVC   RETCODE,=A(12)
         B     EXITVV
**********************************************************************
  TITLE 'NARAOUE0 --- ENTRY4; MIDDLE ENTRY FOR THIS PROCESS.'
**********************************************************************
*    R0     A FLAG VALUE
*          =4  NEITHER FIRST NOR LAST ENTRY; SOMEWHERE IN THE MIDDLE.
ENTRY4   #
         TM    UEHBFLG1,UEH1CPYP
         BO    E4MSG
         TM    UEHBFLG1,UEH1CMD
         BO    E4CMD
         MVC   RETCODE,=A(08)
         MVC   RET#R0,=A(00)
         MVC   RET#R1,=A(00)
         B     EXITVV
**********************************************************************
  TITLE 'NARAOUE0 --- ENTRY8; LAST ENTRY FOR THIS PROCESS.'
**********************************************************************
*    R0     A FLAG VALUE
*          =8  LAST ENTRY FOR THIS MSG.
ENTRY8   #
         TM    UEHBFLG1,UEH1CPYP
         BO    E8MSG
         TM    UEHBFLG1,UEH1CMD
         BO    E8CMD
         MVC   RETCODE,=A(08)
         MVC   RET#R0,=A(00)
         MVC   RET#R1,=A(00)
         B     EXITVV
**********************************************************************
  TITLE 'NARAOUE0 --- ENTRY12; RETURN FROM GET-SPACE.'
**********************************************************************
*    R0     A FLAG VALUE
*         =12=X'0C' ENTRY FOLLOWING REQUEST FOR STORAGE.
*                    ADDR IS IN UEHUBUFF; =0 IF NONE AVAIL.
ENTRY12  #
         MVC   RETCODE,=A(12)
         B     EXITVV
**********************************************************************
  TITLE 'NARAOUE0 --- ENTRY16; ERROR.'
**********************************************************************
*    R0     A FLAG VALUE
*         =16=X'10' ERROR ENCOUNTERED; COMMAND ABORTED; NO SEG AVAIL.
ENTRY16  #
         MVC   RETCODE,=A(12)
         B     EXITVV
**********************************************************************
  TITLE 'NARAOUE0 --- RETURN '
**********************************************************************
EXITVV   BAL   L##,SRSNAP
EXITXX   STM   R0,R15,EXITREGS
***      ***********************
         TM    AMODE31F,X'80'      Q. HOW WAS AMODE WHEN WE ENTERED. XA
         BZ    AMODE31A              AMODE WAS =24; SKIP & IGNORE.   XA
         L     R14,=A(X'80000000'+AMODE31A)  RIG POINTER TO CONTINU. XA
         BSM   0,R14                 AMODE WAS =31; SET IT BACK.     XA
AMODE31A #                                                           XA
**********************************************************************
*&‰%$#   BAL   L##,SRSNAP              **&&%%$$##**
         L      R0,RET#R0
         L      R1,RET#R1
         L     R15,RETCODE
         EPILOGUE  RETURN=(R0,R1,R15)
**********************************************************************
  TITLE 'NARAOUE0 --- HANDLE AN OUTPUT MESSAGE.'
**********************************************************************
** FORMAT OF AREA POINTED TO BY UEHCPYBF
*   LLZZ,AL1(CC),'MESSAGE',AL1(CC),XL20'WORKAREA'
*   LL  INCLUDE ALL BUT THE LAST 20 BYTES.
*   CC  IS OPTIONAL CARRIAGE CONTROL
*   WORKAREA CONTENTS MOST LIKELY ARE GARBAGE.
         PRINT NOGEN
E0MSG    #
E4MSG    #
E8MSG    #
         L     R#W,UEHCPYBF
         MVC   MSGCPY9,0(R#W)           COPY MOST RECENT  BUFFER.
         CLC   MSGCPY0,MSGCPY1          Q. IS THE "FIRST" BUFFER FULL.
         BNE   *+4+6                      YES, SKIP; DO NOT   RE-FILL.
         MVC   MSGCPY1,0(R#W)             NO,  COPY INTO  BUFFER.
         BAL   L##,SRSNAP
         XC    MSGMSGPT,MSGMSGPT        CLEAR "MESSAGE TO SEND" PTR.
         L     B#C,UEHCPYBF
         BAL   L##,SRDUPLIC             CHECK FOR DUPES & NEAR-DUPES.
         BAL   L##,SRTIMSTP             ADD TIME STAMP IF NOT PRESENT.
         CLC   =C'DFS994',NUETXT        IF MSG-DFS994,
         BALC  EQ,MSG994,R=L##            THEN PROCESS NUC CHKPTS.
         CLC   =C'DFS681',NUETXT        IF MSG-DFS681,
         BALC  EQ,MSG681,R=L##            THEN PROCESS BMP CHKPTS.
         CLC   =C'DFS0488',NUETXT       IF MSG-DFS488,
         BALC  EQ,MSG488,R=L##            THEN PROCESS CMD COMPLETED.
         CLC   =C'IM0',NUETXT           IF MSG-IM0---- FROM B&B'S.
         BALC  EQ,MSGIF0,R=L##            THEN B&B'S IMF MESSAGE.
         CLC   =C'DFS551',NUETXT        IF MSG-DFS551,
         BALC  EQ,MSG551,R=L##            THEN PROCESS MSG/BMP STA/STO.
         CLC   =C'DFS552',NUETXT        IF MSG-DFS552,
         BALC  EQ,MSG551,R=L##            THEN PROCESS MSG/BMP STA/STO.
         OC    MSGMSGPT,MSGMSGPT        Q. ANY MESSAGE TO SEND.
         BNZ   MSGEX08R                   YES; RIG TO SEND IT.
         MVC   RETCODE,=A(04)             NO; EXIT.
         B     EXITXX
*******************
MSGEX08R L     R1,MSGMSGPT              POINT TO MSG TO SEND.
         LA    R0,=CL8'MASTER'          POINT TO DEST NAME.
         ST    R0,RET#R0                STO
         ST    R1,RET#R1                STO
         MVC   RETCODE,=A(00)           INDICATE NEED TO SEND MSG.
         B     EXITXX
*******************************
MSGMSGPT DC    A(0)
**********************************************************************
  TITLE 'NARAOUE0 --- MESSAGE "DFS994...".'
**********************************************************************
*-* IF NUC CHKPT MESSAGE
*-*   IF FIRST ONE
*-*     THEN CALL THE INITIALIZATION ROUTINE LIST.
MSG994   BENT
         AP    MSG994NN,=P'1'             COUNT CHECKPOINTMSGS.
         CP    MSG994NN,=P'1'             Q. IS THIS THE FIRST ONE.
         BE    MSG994#1                     YES; THEN DO SOME INIT.
         B     MSG994ZZ                     NO; EXIT.
MSG994#1 #
         DLLINK (M,4),'DFSAOUE0/RST=>',(B#C),*WTP
         DLLINK  M,*WTO
         LA    P#C,CALLIST1       POINT TO THE INITIALIZATION LIST.
         BAL   L##,SRCALIST       CALL THE FIND-AND-CALL ROUTINE.
MSG994ZZ BEXIT
MSG994NN DC    PL4'0'
**********************************************************************
  TITLE 'NARAOUE0 --- MESSAGE "DFS681...".'
**********************************************************************
*-* IF BMP CHKPT MESSAGE
*-*   IF THE FEAT=12 (DECIMAL) IS SET ON.
*-*     THEN IGNORE IT BY SETTING ITS LENGTH TO ZERO.
MSG681   BENT
         AP    MSG681NN,=P'1'             COUNT BMP CHKPT-MSGS.
         CP    MSG681NN,=P'4'             Q. IS THIS A LATE ONE.
         BH    MSG681#1                     YES; THEN SKIP THE WTP.
         DLLINK (M,4),'DFSAOUE0/681=>',(B#C),*WTP
MSG681#1 #
         PUSH  PRINT
         PRINT GEN
         NARSCDF B#F,NARSCFB0      GET  FEATURES BASE.
         TM    012*8(B#F),X'80'    Q. FEATURE #12 INFORCE.
         BZ    MSG681ZZ              NO; IGNORE; CONTINUE NORMALLY.
         POP   PRINT
         XC    NUELL,NUELL         SET LENGTH TO ZERO TO IGNORE THIS.
MSG681ZZ BEXIT
MSG681NN DC    PL4'0'
**********************************************************************
  TITLE 'NARAOUE0 --- MESSAGE "DFS488...".'
**********************************************************************
*-* IF CMD COMPLETED MSG.
*-*   IF THE FEAT=13 (DECIMAL) IS SET ON.
*-*     THEN IGNORE IT BY SETTING ITS LENGTH TO ZERO.
MSG488   BENT
         AP    MSG488NN,=P'1'             COUNT COMMAND COMPLETED MSGS.
         CP    MSG488NN,=P'4'             Q. IS THIS A LATE ONE.
         BH    MSG488#1                     YES; THEN SKIP THE WTP.
         DLLINK (M,4),'DFSAOUE0/488=>',(B#C),*WTP
MSG488#1 #
         PUSH  PRINT
         PRINT GEN
         NARSCDF B#F,NARSCFB0      GET  FEATURES BASE.
         TM    013*8(B#F),X'80'    Q. FEATURE #13 INFORCE.
         BZ    MSG488ZZ              NO; IGNORE; CONTINUE NORMALLY.
         POP   PRINT
         XC    NUELL,NUELL         SET LENGTH TO ZERO TO IGNORE THIS.
MSG488ZZ BEXIT
MSG488NN DC    PL4'0'
**********************************************************************
  TITLE 'NARAOUE0 --- MESSAGES "IM0...." FROM B && B''S IMF.'
**********************************************************************
*-* IF  IM0----       MSG.
*-*  IF IM0203        MSG.
*-*   IF THE FEAT=14 (DECIMAL) IS SET ON.
*-*     THEN IGNORE IT BY SETTING ITS LENGTH TO ZERO.
MSGIF0   BENT
         CLC   =C'IM0203',NUETXT       IF MSG-IM0203,
         BE    MSGIF0#0                  THEN SUPPRESS.
         B     MSGIF0ZZ                 ELSE SKIP AND ALLOW IT.
MSGIF0#0 AP    MSGIF0NN,=P'1'             COUNT B & B MSGS.
         CP    MSGIF0NN,=P'4'             Q. IS THIS A LATE ONE.
         BH    MSGIF0#1                     YES; THEN SKIP THE WTP.
         DLLINK (M,4),'DFSAOUE0/IM0=>',(B#C),*WTP
MSGIF0#1 #
         PUSH  PRINT
         PRINT GEN
         NARSCDF B#F,NARSCFB0      GET  FEATURES BASE.
         TM    014*8(B#F),X'80'    Q. FEATURE #14 INFORCE.
         BZ    MSGIF0ZZ              NO; IGNORE; CONTINUE NORMALLY.
         POP   PRINT
         XC    NUELL,NUELL         SET LENGTH TO ZERO TO IGNORE THIS.
MSGIF0ZZ BEXIT
MSGIF0NN DC    PL4'0'
**********************************************************************
  TITLE 'NARAOUE0 --- MESSAGES "DFS551" FOR MSG/BMP START/STOP.'
**********************************************************************
*-* IF MSG/BMP START/STOP MSG
*-*  CALL NARAOUP0 TO DO THE WORK.
MSG551   BENT
         AP    MSG551NN,=P'1'             COUNT THESE MSGS.
         CP    MSG551NN,=P'4'             Q. IS THIS A LATE ONE.
         BH    MSG551#1                     YES; THEN SKIP THE WTP.
         DLLINK (M,4),'DFSAOUE0/551=>',(B#C),*WTP
MSG551#1 #
         XC    MSG551MG,MSG551MG                 CLEAR MESSAGE PTR.
         CALL  NARAOUP0,((B#S),(B#U),MSG551MG),VL
**************
         L     R#W,=A(PST551FF)                  PTR TO SNAP FLAG.
         OC    0(4,R#W),0(R#W)                   Q. ANY NEED TO SNAP.
         BZ    MSG551S                             NO; SKIP.
         AP    SRSNPNNN,=P'4'                           BUMP CNTR.
         BAL   L##,SRSNAP                          YES; SNAP NOW.
MSG551S  #
**************
         OC    MSG551MG,MSG551MG                 Q. ANY MESSAGE.
         BZ    MSG551Z                             NO; SKIP.
         MVC   MSGMSGPT,MSG551MG                   YES; COPY TO CALLER.
MSG551Z  BEXIT
MSG551MG DC    A(0)
         BEXIT
MSG551NN DC    PL4'0'
**********************************************************************
  TITLE 'NARAOUE0 --- MESSAGE DUPLICATES.'
**********************************************************************
*-* IF THIS MESSAGE LOOKS A LOT LIKE THE LAST ONE.
*-*   IF THE FEAT=11 (DECIMAL) IS SET ON.
*-*     THEN IGNORE IT BY SETTING ITS LENGTH TO ZERO.
         LCLC  &SRDUL
&SRDUL   SETC  '100'
SRDUPLIC BENT
         AGO   .OVRDUPE
         NARSCDF B#F,NARSCFB0      GET  FEATURES BASE.
         TM    011*8(B#F),X'80'    Q. FEATURE #11 INFORCE.
         BZ    SRDUPEZZ              NO; IGNORE; EXIT.
       AGO   .OVRDUPE     *&‰%$#@*&‰%$#@
         XC    SRDUPFLG,SRDUPFLG        CLEAR "DUPE" FLAG.
         LH    E#M,NUELL                GET LENGTH.
         CH    E#M,SRDUPREV             Q. SAME AS PREV MSG'S LEN.
         BNE   SRDUPDIF                   NO; EXIT. NO CHANCE FOR DUPE.
         XC    SRDUCURR,SRDUCURR        CLEAR "CURR" SPACE.
         CH    E#M,=Y(L'SRDUCURR)       Q. IS IT TOO LONG.
         BC    GT,*+4+4                   NO; USE IT.
         LH    E#M,=Y(L'SRDUCURR)         YES; CUT IT OFF.
         BCTR  E#M,0                    MACHCODE.
         EX    E#M,SRDUMVC              MOVE MOST OF THIS MESSAGE.
*************************************
         ZAP   SRDUPCRD,=P'0'           ZERO THE DUPE COUNTER.
         ZAP   SRDUPCDF,=P'0'           ZERO THE DIFF COUNTER.
         LA    C#A,SRDUPREV-1           POINT TO THE
         LA    C#B,SRDUCURR-1                TWO COMPARANDS.
SRDULOOP LA    C#A,1(C#A)               BUMP THE
         LA    C#B,1(C#B)                    TWO COMPARAND POINTERS.
         C     C#B,=A(SRDUCURR+L'SRDUCURR)   Q. ARE WE THRU.
         BC    GE,SRDUDUN                      YES; EXIT.
         CLC   0(1,C#A),0(C#B)          Q. ARE THE CHARS ALIKE.
         BNE   SRDUPDIF                   NO; THEY ARE DIFFERENT.
         CLI   0(C#A),X'00'             Q. ARE THE CHARS X'00'.
         BE    SRDULOOP                   YES; TREAT AS A NULL; LOOP.
         CLI   0(C#A),X'40'             Q. ARE THE CHARS X'40'.
         BE    SRDULOOP                   YES; TREAT AS A NULL; LOOP.
         AP    SRDUPCRD,=P'1'           CHAR A NON-NULL REAL DUPE.
         B     SRDULOOP
SRDUPDIF AP    SRDUPCDF,=P'1'           CHAR IS DIFFERENT.
         B     SRDULOOP
****************
         ZAP   SRDUPCTL,SRDUPCDF        NBR OF DIFF CHRS
         SP    SRDUPCTL,SRDUPCRD         + NBR REAL DUPES = TTL REAL.
         LA    R#W,100
         CVB   D#O,SRDUPCRD             DUPE REAL
         M     D#E,R#W                    * 100   = 100*REAL DUPE.
         CVB   R#W,SRDUPCTL             TOTAL REAL.
         D     D#E,R#W                  D#O= PERCENT OF DUPE IN TOTAL.
         C     D#O,SRDUPRCT             Q. ARE THERE ENOUGH DUP CHRS.
         BC    GT,SRDUPYES                YES; TREAT AS DUPE MESSAGE.
*********************
*   THIS MESSAGE IS NOT LIKE THE PREV MESSAGE.
*    IF THE PREVIOUS MESSAGE WAS LIKE THE ONE BEFORE IT,
*      THEN WE WANT TO INDICATE HOW MANY WERE SUPPRESSED.
SRDUPDIF CP    SRDUPCTR,SRDUPCLM        Q. HAVE DUPES JUST GONE BY.
         BC    LT,SRDUPDFF                NO; EXIT.
*        BAL ???                          YES; ADD COUNT TO THIS MSG.
SRDUPDFF ZAP   SRDUPCTR,=P'0'           ZERO THE DUPE MESSAGE CTR.
         BE    SRDUPEZ5                 EXIT.
*********************
*   THIS MESSAGE IS LIKE THE PREVIOUS MESSAGE.
*    IF THERE HAVE BEEN ENOUGH OF THEM IN A ROW,
*      THEN WE WANT TO SUPPRESS THIS ONE.
SRDUPYES OI    SRDUPFLG,X'01'           SET THE FLAG.
         AP    SRDUPCTR,=P'1'           BUMP THE DUPE MESSAGE CTR.
         CP    SRDUPCTR,SRDUPCLM        Q. HAVE ENOUGH DUPE MESSAGES.
         BC    LT,SRDUPEZ5                NO; JUST A FEW; LET 'EM GO.
         XC    NUELL,NUELL                YES; SUPPRESS THIS ONE.
*************************************
SRDUPEZ5 MVC   SRDUPREV,SRDUCURR
.OVRDUPE ANOP
SRDUPEZZ BEXIT
******************************************************
SRDUPFLG DC    XL1'0'
SRDUPCLM DC    PL2'4'
SRDUPRCT DC    A(75)   PERCENT OF DUPES IN TTL REAL TO MAKE MSG A DUPE.
SRDUPCTL DC    PL4'0'
SRDUPCRD DC    PL4'0'
SRDUPCDF DC    PL4'0'
SRDUPCTR DC    PL4'0'
SRDUMVC  MVC   SRDUCURR(0),NUECPYBF
SRDUPREV DC    XL&SRDUL'0'
SRDUCURR DC    XL&SRDUL'0'
**********************************************************************
  TITLE 'NARAOUE0 --- HANDLE AN  INPUT COMMAND.'
**********************************************************************
** FORMAT OF AREA POINTED TO BY UEHCPYBF
*     UNKNOWN AT THIS POINT ??
** FORMAT OF AREA POINTED TO BY UEHECMD
*  AL1(F1),CL3'CMD',AL1(NK),AL1(F2),CL3'KEY',AL1(F2..........,C'.'
*  AL1(F1),CL3'CMD',AL1(NK),AL1(F2),AL1(LTH),AL1(DLM),AL1(F2.,C'.'
*      F1 = X'FE'  IF OK
*         = X'FC'  IF A BAD PARM
*      F2 = X'FC' ==> FOLLOWING PARM IS IN ERROR
*         = X'FF' ==> FOLLOWING IS A 3-BYTE KEYWORD
*         = X'FE' ==> FOLLOWING IS A 1-BYTE LENGTH THEN A PARM
*         = C'('  ==> FOLLOWING IS A 1-BYTE LENGTH THEN A PSWD
*      DLM = THE ENTERED DELIMITER (E.G., COMMA SPACE )
E0CMD    #
E4CMD    #
E8CMD    #
         L     R#W,UEHCPYBF
         MVC   CMDCPYW,0(R#W)           COPY MOST RECENT  BUFFER.
         MVC   CMDCPY9,0(R#W)           COPY MOST RECENT  BUFFER.
         CLC   CMDCPY0,CMDCPY1          Q. IS THE "FIRST" BUFFER FULL.
         BNE   *+4+6                      YES, SKIP; DO NOT   RE-FILL.
         MVC   CMDCPY1,0(R#W)             NO,  COPY INTO  BUFFER.
         L     R#W,UEHECMD
         MVC   ECMDCPY9,0(R#W)          COPY MOST RECENT  BUFFER.
         CLC   ECMDCPY0,ECMDCPY1        Q. IS THE "FIRST" BUFFER FULL.
         BNE   *+4+6                      YES, SKIP; DO NOT   RE-FILL.
         MVC   ECMDCPY1,0(R#W)            NO,  COPY INTO  BUFFER.
         BAL   L##,SRSNAP
         XC    CMDMSGPT,CMDMSGPT
*        *****
         CLC   CMDCPYW(2),=Y(L'CMDCPYW)
         BC    LT,*+4+6
         MVC   CMDCPYW(2),=Y(L'CMDCPYW)
*        *****
         L     B#C,UEHCPYBF
         MVC   RETCODE,=A(04)            SET RC= FOR NO NEW MSG NOW.
         CLC   NUECMD,=C'/LOC'
         BALC  EQ,CMDLOC,R=L##
         CLC   NUECMD,=C'/LOG'
         BALC  EQ,CMDLOG,R=L##
         CLC   NUECMD,=C'/STA'
         BALC  EQ,CMDSTA,R=L##
         CLC   NUECMD,=C'/CHE'
         BALC  EQ,CMDCHE,R=L##
         CLC   NUECMD,=C'/RCL'
         BALC  EQ,CMDRCL,R=L##
         CLC   NUECMD,=C'/SIG'
         BALC  EQ,CMDSIG,R=L##
         CLC   NUECMD,=C'/DIS'
         BALC  EQ,CMDDIS,R=L##
         OC    CMDMSGPT,CMDMSGPT        Q. ANY MESSAGE TO SEND.
         BNZ   CMDEX08R                   YES; RIG TO SEND IT.
         B     EXITXX
*******************
CMDEX08R L     R1,CMDMSGPT              POINT TO MSG TO SEND.
         LA    R0,=CL8'MASTER'          POINT TO DEST NAME.
         ST    R0,RET#R0                STO
         ST    R1,RET#R1                STO
         MVC   RETCODE,=A(00)           INDICATE NEED TO SEND MSG.
         B     EXITXX
******************************************
CMDMSGPT DC    A(0)
CMDPT1   DC    A(CMDPT2)
CMDPT2   DC    A(CMDCPYW) > UEHCPYBF
**********************************************************************
  TITLE 'NARAOUE0 --- SUBROUTINES '
**********************************************************************
*-* IF THIS COMMAND IS /LOCK
CMDLOC   BENT
         DLLINK (M,4),'  ',*DATETIME,' LOCK CMD =>',(B#C),*WTP
         BEXIT
************************
**
************************
*-* IF THIS COMMAND IS /LOG
*-*   IF THE /DYN  KEYWORD IS PRESENT
*-*     THEN CALL  NARDYNT0
*-*   IF THE /FLAG KEYWORD IS PRESENT
*-*          /FFF   OR  /FFFF
*-*     THEN CALL  NARSOUF0
CMDLOG   BENT
         DLLINK (M,4),'  ',*DATETIME,' LOG  CMD =>',(B#C),*WTP
         BAL   L##,SRKEYFLG
         CLI   PMDYN,0
         BNE   CMDLDYN
         OC    PMFLG(4),PMFLG3
         OC    PMFLG(4),PMFLG4
         CLI   PMFLG,0
         BNE   CMDLFLAG
CMDLOGX9 BEXIT
************************
         PUSH  PRINT
         PRINT NOGEN
CMDLFLAG CALL  NARAOUF0,((B#S),(B#U)),VL
         B     CMDLOGX9
*      *************
**
*      *************
         WXTRN NARDYNT0
CMDLDYN  #
*&‰%$#@  CALL  NARDYNT0,((B#S),(B#U)),VL
         POP   PRINT
         B     CMDLOGX9
************************
**
************************
*-* IF THIS COMMAND IS /LOG
*-*   IF THE /TRAN KEYWORD IS PRESENT
*-*          /TTT   OR  ETC.
*-*     IF THE .PROG KEYWORD IS PRESENT
*-*            .PPP OR  ETC.
*-*       THEN CALL  NARAOUT0 TO START THE PMG THAT GOES WITH THE TRAN.
CMDSTA   BENT
CMDSTA10 BAL   L##,SRKEYFLG
         OC    PMTTT(4),PMTTT2      "OR" TOGETHER ALL OF THE
         OC    PMTTT(4),PMTTT3           ALIASES FOR "TRAN".
         OC    PMTTT(4),PMTTT4
         OC    PMTTT(4),PMTTT5
         CLI   PMTTT,0
         BE    CMDSTAT9
         OC    PMPPP(4),PMPPP2      "OR" TOGETHER ALL OF THE
         OC    PMPPP(4),PMPPP3           ALIASES FOR "PROG".
         OC    PMPPP(4),PMPPP2A
         CLI   PMPPP,0
         BE    CMDSTAT9
         XC    CMDSTAMG,CMDSTAMG                 CLEAR MESSAGE PTR.
         CALL  NARAOUT0,((B#S),(B#U),CMDSTAMG),VL
         OC    CMDSTAMG,CMDSTAMG                 Q. ANY MESSAGE.
         BZ    CMDSTAT9                            NO; SKIP.
         MVC   CMDMSGPT,CMDSTAMG                   YES; COPY TO CALLER.
CMDSTAT9 BEXIT
CMDSTAMG DC    A(0)
************************
**
************************
*-* IF CHKPT COMMAND
*-*   IF A SHUTDOWN TYPE
*-*     THEN CALL THE TERMINATION    ROUTINE LIST.
CMDCHE   BENT
CMDCHE10 BAL   L##,SRKEYFLG
         CLI   PMFRE,0
         BNE   CMDCHE20
         CLI   PMDPQ,0
         BNE   CMDCHE20
         CLI   PMPUR,0
         BNE   CMDCHE20
         B     CMDCHE90
CMDCHE20 #
         DLLINK (M,4),'DFSAOUE0/SHUT=>',(B#C),*WTP
         LA    P#C,CALLIST2       POINT TO THE TERMINATION LIST.
         BAL   L##,SRCALIST       CALL THE FIND-AND-CALL ROUTINE.
         AP    SRSNPNNN,=P'30'    BUMP CTR TO GET AT LEAST N MORE.
         SP    SRLOGNNN,=P'100'   DECR CTR TO GET AT LEAST N MORE.
CMDCHE90 BAL   L##,SRSNAP
         BEXIT
************************
**
************************
*-* IF /RCL  COMMAND
*-*   IF FEATURE SET ON
*-*     THEN RIG RC=12 TO  NOT GET     RESPONSE TO THIS COMMAND.
*-*      AND TO SUPPRESS IMF'S GETTING RESPONSE TO THIS COMMAND.
CMDRCL   BENT
         NARSCDF B#F,NARSCFB0      GET  FEATURES BASE.
         TM    017*8(B#F),X'80'    Q. FEATURE     INFORCE.
         BZ    CMDRCL9W              NO; CONTINUE NORMALLY.
         MVC   RETCODE,=A(12)        YES; SET RC=12 TO IGNORE RESPONSE
CMDRCL9W BEXIT
************************
**
************************
*-* IF /SIG  COMMAND
*-*   IF FEATURE SET ON
*-*     THEN RIG RC=12 TO  NOT GET     RESPONSE TO THIS COMMAND.
*-*      AND TO SUPPRESS IMF'S GETTING RESPONSE TO THIS COMMAND.
CMDSIG   BENT
         NARSCDF B#F,NARSCFB0      GET  FEATURES BASE.
         TM    018*8(B#F),X'80'    Q. FEATURE     INFORCE.
         BZ    CMDSIG9W              NO; CONTINUE NORMALLY.
         MVC   RETCODE,=A(12)        YES; SET RC=12 TO IGNORE RESPONSE
CMDSIG9W BEXIT
************************
**
************************
*-* IF /DIS  COMMAND
*-*  IF NOT ENTERED FROM THE MASTER.
*-*   IF COMMAND DOES NOT HAVE .JJJ IN IT.
*-*    IF FEATURE SET ON
*-*     THEN RIG RC=12 TO  NOT GET     RESPONSE TO THIS COMMAND.
*-*      AND TO SUPPRESS IMF'S GETTING RESPONSE TO THIS COMMAND.
CMDDIS   BENT
         CLC   SRLOGNAM,=CL8'MASTER' Q. IS THIS THE MASTER.
         BE    CMDDIS9W                YES; SKIP. LET RC= STAND.
         CLC   SRLOGNAM,=CL8'WTOR'   Q. IS THIS THE CONSOLE.
         BE    CMDDIS9W                YES; SKIP. LET RC= STAND.
CMDDIS10 BAL   L##,SRKEYFLG
         OC    PMDIS(4),PMDIS2      "OR" TOGETHER ALL OF THE
         OC    PMDIS(4),PMDIS3           ALIASES FOR DIS/LOG/JRNL.
         CLI   PMDIS,0             Q. DO WE WANT IT LOGGED.
         BNE   CMDDIS9W              YES; SKIP. LET RC= STAND.
         NARSCDF B#F,NARSCFB0      GET  FEATURES BASE.
         TM    019*8(B#F),X'80'    Q. FEATURE     INFORCE.
         BZ    CMDDIS9W              NO; CONTINUE NORMALLY.
         MVC   RETCODE,=A(12)        YES; SET RC=12 TO IGNORE RESPONSE
CMDDIS9W BEXIT
************************
**
************************
**********************************************************************
  TITLE 'NARAOUE0 --- SUBROUTINES '
**********************************************************************
***  S/R TO FIND THE KEYWORD FLAGS.
SRKEYFLG BENT
         TR   CMDCPYW+4(L'CMDCPYW-4),TABLEC  SET CNTRL CHARS TO BLANKS.
         ST   R13,SRSAVEAR+04        SET HI-SAVE PTR IN NEW SAVE-AREA.
         LA   R13,SRSAVEAR                 PT TO NEW SAVE AREA FOR S/R.
         CALL KEYFLAGS,(CMDPT1,KEYWORDS)   S/R WILL FORE & BACK CHAIN.
         L    R13,04(R13)                  RESTORE SAVE-SET POINTER.
         BEXIT
**********************************************************************
  TITLE 'NARAOUE0 --- SUBROUTINES '
**********************************************************************
*** SUB-ROUTINE TO PUT DATE INTO MESSAGE IF ONE NOT ALREADY THERE.
*-*  IF "DFS" NEAR FRONT OF MESSAGE   /AND/
*-*    IF A BLANK SOON THEREAFTER       /AND/
*-*      IF NO COLON ":"  X'7D' SOON      /AND/
*-*        THEN INSERT A TIME STAMP OF THE FORM HH-MM-SS
*                                          AT THE SPOT OF THE BLANK.
*    ELSE EXIT WITHOUT ANY CHANGE.
*
***  MSG IS SEPARATED INTO TWO PARTS; FRONT PART & BACK PART.
*     FRONT PART IS LEFT INTACT.
*     BACK  PART IS COPIED TO A LOCAL /DC/.
*     OUR STAMP IS INSERTED AFTER FRONT PART.
*     BACK  PART IS COPIED TO ORIG BUFR AFTER OUR STAMP.
*     LENGTH IS CHANGED TO REFLECT ADDED STAMP.
*
* W-A-R-N-I-N-G    ----------
*   STRANGE MESSAGES MAY RESULT IF LENGTH .GT. "SRTILEN"
*
SRTIMSTP BENT
         LA    R#W,NUETXT-1            START OF TEXT PRE-DECRMTD.
         LA    R#X,10                  DEPTH TO SCAN.
SRTILOP1 LA    R#W,1(R#W)              BUMP SCAN PTR.
         CLC   =C'DFS',0(R#W)          Q. IS SACRED PREFIX PRESENT.
         BE    SRTIDFS                   YES, OK.
         BCT   R#X,SRTILOP1              NO, LOOP.
         B     SRTIEXIT                  NO, EXHAUSTED; EXIT.
**************************
SRTIDFS  LA    R#X,10                  DEPTH TO SCAN.
SRTILOP2 LA    R#W,1(R#W)              BUMP SCAN PTR.
         CLI   0(R#W),X'40'            Q. ANY BLANK TO BE FOUND.
         BE    SRTIBLNK                  YES, OK.
         BCT   R#X,SRTILOP2              NO, LOOP.
         B     SRTIEXIT                  NO, EXHAUSTED; EXIT
**************************
SRTIBLNK LR    P#B,R#W                 SAVE PTR TO BLANK.
         LA    R#X,6                   DEPTH TO SCAN.
SRTILOP3 LA    R#W,1(R#W)              BUMP SCAN PTR.
         CLI   0(R#W),C':'             Q. ANY COLON PRESENT.
         BE    SRTIEXIT                  YES, ALREADY STAMPED; EXIT.
         BCT   R#X,SRTILOP3              NO, LOOP.
*                                        NO, EXHAUSTED, OK; CONTINUE.
*********************************
SRTIDTIT #
         LR    R#W,P#B              ADDR OF THE IMEEDED BLANK.
         SR    R#W,B#C                - ADDR OF DL = SIZE OF FRONTEND.
         LH    E#M,NUELL            ORIG LENGTH
         SR    E#M,R#W                - FRONTEND   = BACKEND.
         C     E#M,=A(SRTILEN)      Q. LENGTH TOO BIG.
         BC    LE,SRTILNOK            NO, OK; SKIP.
         L     E#M,=A(SRTILEN)        YES, USE SMALLER LENGTH.
         OI    SRTI1FLG,X'80'               & SET FLAG.
SRTILNOK ST    E#M,SRTILBAK         STO LENGTH OF THE BACK END.
         BCTR  E#M,0                MACH CODE.
         LA    M#T,SRTITEMP         "TO"   PTR.
         LR    M#F,P#B              "FROM" PTR.
         EX    E#M,SRTIMVC          SAVE THE BACK END.
         TIME  DEC                      GET TIME.
         ST    R0,SRTIR0                STO TIME.
         UNPK  SRTIUNPK,SRTIR0          UNPACK TIME.
         MVC   SRTISTHH,SRTIUNHH        REFORMAT HOURS,
         MVC   SRTISTMM,SRTIUNMM                 MINUTES,
         MVC   SRTISTSS,SRTIUNSS                 SECONDS.
         MVC   0(SRTISTML,P#B),SRTISTMP MOVE INTO MESSAGE SPOT.
         LA    M#T,(SRTISTML)(P#B)      SET "TO"   PTR.
         L     E#M,SRTILBAK             LENGTH OF BACKEND.
         BCTR  E#M,0                    MACH CODE.
         LA    M#F,SRTITEMP             SET "FROM" PTR.
         EX    E#M,SRTIMVC              MOVE BACKEND BACK INTO PLACE.
         LH    R#W,NUELL             ORIGINAL LENGTH
         LA    R#W,SRTISTML(R#W)      + ADDED LENGTH
         STH   R#W,NUELL               =  NEW LENGTH.
SRTIEXIT BEXIT
************************************************
SRTIMVC  MVC   0(0,M#T),0(M#F)
SRTIR0   DC    A(0)
SRTIUNPK DC    CL8' '
SRTIUNHH EQU   SRTIUNPK+01
SRTIUNMM EQU   SRTIUNPK+03
SRTIUNSS EQU   SRTIUNPK+05
************
SRTISTM0 DC    0C'0'
         DC    C' '
SRTISTHH DC    CL2'  '
         DC    C'-'
SRTISTMM DC    CL2'  '
         DC    C'-'
SRTISTSS DC    CL2'  '
SRTISTML EQU   (*-SRTISTM0)
SRTISTMP EQU   SRTISTM0,SRTISTML
************
SRTI1FLG DC    A(0)
SRTILBAK DC    A(0)
SRTILEN  EQU   240
SRTITEMP DC    CL(SRTILEN)' '
**********************************************************************
  TITLE 'NARAOUE0 --- SUBROUTINES '
**********************************************************************
* WALK DOWN A NAME/ADCON LIST
* IF ADDRESS NEGATIVE, QUIT.
* IF ADDRESS NONZERO, CALL THE ADDRESS.
* IF ADDRESS IS ZERO, THEN DO BLDL.
* IF BLDL IS SUCCESSFUL, THEN LOAD IT.
* IF LOAD IS SUCCESSFUL, THEN CALL IT.
SRCALIST BENT
         S     P#C,=A(12)              PRE-DECREMENT THE LIST PTR.
SRCALOOP LA    P#C,12(P#C)             BUMP LIST PTR.
         DLLINK (M,4),'DFSAOUE0/CALL, ',((P#C),8)
         L     R#W,8(P#C)              GET THE POTENTIAL ADDRESS.
         C     R#W,=A(0)               Q. WAS THERE ONE.
         BL    SRCAEXIT            =-1   YES, NEGATIVE; END OF LIST.
         LA    R#W,0(R#W)              GET  JUST THE ADDRESS.
         C     R#W,=A(0)               Q. WAS THERE ONE.
         BNE   SRCALL40           ‰=0    YES; USE IT.
*                                  =0    NO; GOTTA TRY TO LOAD IT.
         MVC   BLDLNAME,0(P#C)         MOVE IN THE NAME FOR BLDL.
         BLDL  0,BLDLIST               ATTEMPT TO FIND THE MEMBER.
         LTR   R15,R15                 Q. WAS IT FOUND.
         BZ    SRCALDIT                      YES; GOODIE.
         DLLINK M,' NOT IN STEPLIB.',*WTP    NO; SEND MSG,
         OI    8(P#C),X'08'                       MARK AS "NOT FOUND".
         B     SRCALOOP                            & LOOP.
SRCALDIT LOAD  EPLOC=(P#C)                     LOAD IT.
         ST    R0,8(P#C)                       SAVE THE ADDR.
         OI       8(P#C),X'01'                 MARK AS "LOADED".
         DLLINK M,' FOUND IN STEPLIB.',*WTP    SEND MSG.
         B     SRCALL45                        GO TO IT.
SRCALL40 DLLINK M,' FOUND LINKEDITED.',*WTP    SEND MSG.
         OI    8(P#C),X'02'                    MARK AS "FOUND".
SRCALL45 LA    R1,CALLPRM                      GET PARM ADDRESS.
         L     R15,8(P#C)                      GET CALL ADDRESS.
         LA    R15,0(R15)                      JUST THE ADDR.
         BALR  R14,R15                         C-A-L-L THE ROUTINE.
         B     SRCALOOP                        LOOP.
SRCAEXIT BEXIT
**********************
         CNOP    0,4
CALLIST1 CALLIST NARBGN20
         CALLIST NARBGN40
         DC   3F'-1'
CALLIST2 CALLIST NAREND40
         DC   3F'-1'
CALLPRM  DC    V(NARSCD00)
         DC    V(DLLINK)
         DC    F'-1'
**********************************************************************
  TITLE 'NARAOUE0 --- SUBROUTINES '
**********************************************************************
*-*  IF A MESSAGE OR A COMMAND
*-*    IF ONE OF THE FIRST SEVERAL
*-*      THEN  WTP IT FOR EXAMPLING.
SRLOGIT  BENT
         PUSH  PRINT
         PRINT NOGEN
         L     R#W,UEHCPYBF
         MVC   SRLOGCPY,0(R#W)
         L     R#L,UEHSRCE             GET
         LA    R#L,(CNTNAME-CNT)(R#L)     THE
         MVC   SRLOGNAM,0(R#L)               LTERM NAME.
         CLC   =C'/SIG',SRLOGCPY+4     Q. IS IT "/SIGN ON".
         BE    SRLOGXX                   YES, SECY EXPOS; SKIP OUT.
**       CALL  NARAOUC0
         AP    SRLOGNNN,=P'1'
         CP    SRLOGNNN,SRLOGNZZ
         BH    SRLOGXX
         L     R#L,UEHSRCE
         LA    R#L,(CNTNAME-CNT)(R#L)
         DLLINK (M,4),'   ',*DATETIME,' BUFR==(',(SRLOGNAM,8),         *
               ')==>',SRLOGCDL
         DLLINK M,*WTP
         TM    UEHBFLG1,UEH1ECMD
         BZ    SRLOGOE
         L     R#W,UEHECMD
         MVC   SRLOGCPY,0(R#W)
         DLLINK (M,4),'   ',*DATETIME,' EDIT==>',SRLOGCDL
         DLLINK M,*WTP
SRLOGOE  #
         POP   PRINT
SRLOGXX  BEXIT
SRLOGNAM DC    D'0'
SRLOGCDL DC    0A(0),Y(84,0)
SRLOGCPY DC    CL80' '
SRLOGNAA DC    PL4'0'
SRLOGNNN DC    PL4'0'
SRLOGNZZ DC    PL4'100'
**********************************************************************
  TITLE 'NARAOUE0 --- SUBROUTINES '
**********************************************************************
*-*  IF A MESSAGE OR A COMMAND
*-*    IF ONE OF THE FIRST SEVERAL
*-*      THEN  SNAP IT FOR EXAMPLING.
         PUSH  PRINT
         PRINT NOGEN
         SNAP2 OPT=(DCB,NOSNAP),DDNAME=NAOUSNAP,DCB=SRSNPDCB
         POP   PRINT
SRSNAP   BENT
         CP    SRSNPNNN,=P'0'
         BE    SRSNAPXX
         SP    SRSNPNNN,=P'1'
SRSNAPOX BC    0,SRSNPOPX
         SNAP2 OPT=(OPEN,NOSNAP)
         MVI   SRSNAPOX+1,X'F0'
SRSNPOPX #
         LA    R#W,UEHB
         ST    R#W,NEHBA
         LA    R#W,UEHURSVD+20
         ST    R#W,NEHBZ
*        ***
         L     R#W,UEHSRCE
         ST    R#W,NEHSRCEA
         AH    R#W,=Y(64)
         ST    R#W,NEHSRCEZ
*        ***
         L     R#W,UEHDEST
         ST    R#W,NEHDESTA
         AH    R#W,=Y(64)
         ST    R#W,NEHDESTZ
*        ***
         L     R#W,UEHUBUFF
         ST    R#W,NEHUBUFA
         AH    R#W,=Y(64)
         ST    R#W,NEHUBUFZ
*        ***
         L     R#W,UEHCPYBF
         ST    R#W,NEHCPYBA
         AH    R#W,0(R#W)
         AH    R#W,=Y(20)
         ST    R#W,NEHCPYBZ
*        ***
         L     R#W,UEHECMD
         ST    R#W,NEHECMDA
         AH    R#W,=Y(64)
         ST    R#W,NEHECMDZ
*        ***
         L     R#W,UEHIPCB
         ST    R#W,NEHIPCBA
         AH    R#W,=Y(64)
         ST    R#W,NEHIPCBZ
*        ***
         SNAP2 LIST=SNAPLST0
SRSNAPXX #
         BEXIT
SRSNPNAA DC    PL4'0'
SRSNPNNN DC    PL4'06'
**********************************************************************
  TITLE 'NARAOUE0 --- CONSTANTS  -ETC.'
**********************************************************************
RETCODE  DC    A(12)
RET#R0   DC    A(00)
RET#R1   DC    A(00)
STM015   DC    16A(0)
         ORG   STM015
STMR0    DC    A(0)
STMR1    DC    A(0)
STMR2    DC    A(0)
STMR3    DC    A(0)
STMR4    DC    A(0)
STMR5    DC    A(0)
STMR6    DC    A(0)
STMR7    DC    A(0)
STMR8    DC    A(0)
STMR9    DC    A(0)
STMR10   DC    A(0)
STMR11   DC    A(0)
STMR12   DC    A(0)
STMR13   DC    A(0)
STMR14   DC    A(0)
STMR15   DC    A(0)
         ORG
EXITREGS DC    16A(0)
SRSAVEAR DC    18A(0)
BLDLIST  DC    Y(1),Y(76)
BLDLNAME DC    CL8' ',CL76' '
PMFRE    DLPARM FREEZE,KEYWORDS
PMDPQ    DLPARM DUMPQ
PMPUR    DLPARM PURGE
PMDYN    DLPARM /DYN
PMFLG    DLPARM /FLAG
PMFLG3   DLPARM /FFF
PMFLG4   DLPARM /FFFF
PMTTT    DLPARM TTT
PMTTT2   DLPARM TRA
PMTTT3   DLPARM TRAN
PMTTT4   DLPARM TRANSACTION
PMTTT5   DLPARM TRANSACTIONS
PMPPP    DLPARM .PPP
PMPPP2   DLPARM .PROG
PMPPP2A  DLPARM .PROGA
PMPPP3   DLPARM .PROGRAM
PMDIS    DLPARM .DDD
PMDIS2   DLPARM .JJJ
PMDIS3   DLPARM .LLL
         DC    Y(0,0,0,0)
MSGCPY0  DC   2D'2.718281828'
         ORG   MSGCPY0+8
MSGCPY1  DS   0XL64,XL8
         DC    XL56'0'
MSGCPY9  DC    XL64'0'
CMDCPY0  DC   2D'2.718281828'
         ORG   CMDCPY0+8
CMDCPY1  DS   0XL64,XL8
         DC    XL56'0'
CMDCPY9  DC    XL64'0'
CMDCPYW  DC    XL64'0'
ECMDCPY0 DC   2D'2.718281828'
         ORG   ECMDCPY0+8
ECMDCPY1 DS   0XL64,XL8
         DC    XL56'0'
ECMDCPY9 DC    XL64'0'
M        DC    XL200'00'
SNAPLST0 DC    0D'0'
         SNAP1LST DFSAOUE0,SNAPLST9,'MODULE DFSAOUE0',MODE=ADCONS
         SNAP1LST NEHBA,NEHBZ,'USER EXIT HEADER BLOCK (UEHB)' MODE=TAGS
         SNAP1LST NEHSRCEA,NEHSRCEZ,'SOURCE CNT'
         SNAP1LST NEHDESTA,NEHDESTZ,'DEST   CNT'
         SNAP1LST NEHUBUFA,NEHUBUFZ,'USER BUFFR'
         SNAP1LST NEHCPYBA,NEHCPYBZ,'COPY BUFFR'
         SNAP1LST NEHECMDA,NEHECMDZ,'EDITED CMD BUFR'
         SNAP1LST NEHIPCBA,NEHIPCBZ,'INIT PCB.'
SNAPAOUF SNAP1LST NARAOUF0,NARAOUFZ,'CSECT  NARAOUF0',MODE=ADCONS
SNAPAOUT SNAP1LST NARAOUT0,NARAOUTZ,'CSECT  NARAOUT0',MODE=ADCONS
SNAPAOUC SNAP1LST NARAOUC0,NARAOUCZ,'CSECT  NARAOUC0',MODE=ADCONS
SNAPAOUP SNAP1LST NARAOUP0,NARAOUPZ,'CSECT  NARAOUP0',MODE=ADCONS
         SNAP1LST 0,0,'END OF AREAS',MODE=ENDLIST
SNAPLST9 EQU   *-1
         SNAP1LST MODE=MESSAGES,ORG=DFSAOUE0
         LTORG
TABLEC   DC   256AL1(*-TABLEC)  TRANSLATE ALL-TO-SAME.
         ORG  TABLEC+00
         DC   064X'40'          EXCEPT FIRST 64(10) ARE SET TO X'40'.
         ORG
         CNOPBIGR ORG=DFSAOUE0
**********************************************************************
  TITLE 'NARAOUF0 --- PROCESS THE /LOG COMMANDS OF THE "FLAGS"-TYPE.'
**********************************************************************
NARAOUF0 CSECT
         DROP
*B#U     EQU   R3        BASE FOR THE UEHB.
*B#C     EQU   R4        BASE FOR THE MSG/CMD BUFFER.
*E#M     EQU   R6        LENGTH TO EXECUTE IN MACH CODE.
*B#S     EQU   R11       *** IDENTITY W/ IBM AT TIME OF CALL.
*L##     EQU   R14       LINK TO ALL SUB ROUTINES.
*R#X     EQU   R14       WORKING REGISTER --- SHORT TERM FOR INDEXING.
*R#W     EQU   R15       WORKING REGISTER --- SHORT TERM FOR MISC.
B#F      EQU   R2
P#S      EQU   R2
B#T      EQU   R5
P#P      EQU   R5
P#D      EQU   R5
         PROLOGUE SAVE=*PRECHN
         L     B#S,0(R1)
         L     B#U,4(R1)
         USING UEHB,B#U
         USING SCD,B#S
         USING NUECPYBF,B#C
         L     B#C,UEHCPYBF
*        *****
         MVC   FCMDCPYW,0(B#C)
         CLC   FCMDCPYW(2),=Y(L'FCMDCPYW)
         BC    LT,*+4+6
         MVC   FCMDCPYW(2),=Y(L'FCMDCPYW)
*        *****
         DLLINK (MM,4),'NARAOUF0 ==>',(B#C),*WTP
         DLLINK (MM,4),'NARAOUF0/PARM =>'
         TR    FCMDCPYW+4(L'FCMDCPYW-4),FTABLEC   CTRL CHARS TO BLANKS.
         ST    R13,FRSAVEAR+04        SET HI-SAVE PTR IN NEW SAVE-AREA.
         LA    R13,FRSAVEAR                PT TO NEW SAVE AREA FOR S/R.
         CALL  KEYFLAGS,(FCMDPT1,FKEYS)    S/R WILL FORE & BACK CHAIN.
         L     R13,04(R13)                 RESTORE SAVE-SET POINTER.
***************************
         NARSCDF B#F,NARSCFA0
         USING NARSCFA0,B#F
***      *********
         CLI   FPMBLDL,0
         BNE   FGPBLX0
         CLI   FPMSTOR,0
         BNE   FGPSTX0
         CLI   FPMHEX,0
         BNE   FGHEXX0
         CLI   FPMSNAP,0
         BNE   FGSNAPX0
         CLI   FPMTCT,0
         BNE   FGTCT0
         CLI   FPMMT2,0
         BNE   FGMT20
         CLI   FPMFEAT,0
         BNE   FGFEAT0
         CLI   FPMDEVC,0
         BNE   FGDEVC0
         B     FGWTP
**********************************************
**  /LOG /FLAG  BLDL SYSON     NOW
*                    SYSOFF
*                       ON
*                       OFF
*                       RESET
*     ON/OFF         TOGGLE NARSCFA2'S  X'10'
*     SYSON/SYSOFF   TOGGLE NARSCFA3'S  X'02'
*     RESET          SETS   NARSCFA2'S  X'02'
*   /LOG /FLAG SNAP LIST=NARLST--
*   /LOG /FLAG SNAP #=3
FGPBLX0  DLLINK MM,'=BLDL'
         CLI   FPMSON,0
         BE    FGPSNX9
         OI    NARSCFA3,X'02'
         BAL   L##,SRFGPSTS
         DLLINK MM,'=SYSON'
FGPSNX9  #
***      *********
         CLI   FPMSOFF,0
         BE    FGPSFX9
         NIF   NARSCFA3,X'02'
         BAL   L##,SRFGPSTS
         DLLINK MM,'=SYSOFF'
FGPSFX9  #
***      *********
         CLI   FPMON,0
         BE    FGPONX9
         NIF   NARSCFA2,X'10'
         BAL   L##,SRFGPSTS
         DLLINK MM,'=ON'
FGPONX9  #
***      *********
         CLI   FPMOFF,0
         BE    FGPOFX9
         OI    NARSCFA2,X'10'
         BAL   L##,SRFGPSTS
         DLLINK MM,'=OFF'
FGPOFX9  #
***      *********
         CLI   FPMRES,0
         BE    FGPREX9
         NARSCDF B#T,NARSTIM0
         STCK  NARSTBLD-NARSTIM0(B#T)
         AP    NARSTBLC-NARSTIM0(,B#T),=P'1'
         OI    NARSCFA2,X'02'
         BAL   L##,SRFGPSTS
         DLLINK MM,'=RESET'
FGPREX9  #
***      *********
*          THE "NOW" ISN'T VERY USEFUL AS MOST BLDL'S
*                             ON DONE ON A NON-IMSTASK CPU.
         CLI   FPMNOW,0
         BE    FGPNWX9
         DLLINK MM,'=NOW'
         DLLINK (MM2,4),'F IMSTASK,NOW  ',*COMMAND
FGPNWX9  #
FGPBLX9  B     FGWTP
***************************
FGPSTX0  #
         DLLINK MM,'=STOR'
         B     FGWTP
***************************
**   /LOG /FLAG HEX ID=A  OFFSET=/X DATA=/Y
*      WHERE                      X=> OFFSET=RIGHT 4 BITS OF CHAR "X"
*                                 Y=> DATA= THE CHAR AT "Y".
*     CONTROLS THE CONTENTS OF NARSCFA_
FGHEXX0  #
         DLLINK MM,'=HEX'
         LA    P#P,FPMID
         BAL   L##,SRLAYIN
         BNO   FGHEXX9
         CLI   L+4,C'A'
         BE    FGHEXA
         B     FGWTP
FGHEXA   LA    P#P,FPMOFSET
         BAL   L##,SRLAYIN
         MVC   FGHXOFF,L+4
         LA    P#P,FPMDATA
         BAL   L##,SRLAYIN
         MVC   FGHXBYT,L+4
         CLI   FGHXOFF,C'/'
         BNE   FGHEXX9
         CLI   FGHXBYT,C'/'
         BNE   FGHEXX9
         IC    R#X,FGHXOFF+1
         N     R#X,=A(X'0F')
         XR    R#W,R#W
         IC    R#W,FGHXBYT+1
         STC   R#W,NARSCFAX(R#X)
         BAL   L##,SRFGPSTS
FGHEXX9  #
         B     FGWTP
***************************
**  /LOG /FLAG SNAP LIST=NARLST--
**  /LOG /FLAG SNAP #=3
FGSNAPX0 #
         DLLINK MM,'=SNAP'
         CLI   FPMNBR,0                Q. WAS A NUMBER SPECIFIED.
         BNE   FGSNRSET                  YES, GO RESET.
         MVC   FBLDLNAM,FBLDLNM0       SET MEMBER NAME TO DEFAULT.
         SNAP2 OPT=(OPEN,NOSNAP)       MAKE SURE IT'S OPEN.
         LA    P#S,FSNAPLST            POINT TO DEFAULT SNAPLIST.
         LA    P#P,FPMLIST             POINT TO NAME OF LIST MODULE.
         BAL   L##,SRLAYIN             Q. WAS THERE ONE.
         BNO   FGSNBLDL                  NO; USE DEFAULT MEMBER.
         MVC   FBLDLNAM,L+4              YES; COPY MEMBER.
FGSNBLDL BLDL  0,FBLDLIST              ATTEMPT TO FIND THE MEMBER.
         LTR   R15,R15                 Q. WAS IT FOUND.
         BNZ   FGSNAPIT                  NO; USE DEFAULT LIST.
         LOAD  EPLOC=FBLDLNAM            YES; LOAD SPECD LIST &
         LR    P#S,R0                                     USE IT.
         DLLINK MM,' SNAPLIST=',(FBLDLNAM,8),' LOADED.'
         PUSH PRINT
         PRINT GEN
FGSNAPIT L     P#D,=A(SRSNPDCB)
         SNAP2 MF=(E,(P#S)),DCB=((P#D))  TAKE A SNAP.
         ST    R15,FGSNAP15
         POP  PRINT
         DELETE EPLOC=FBLDLNAM         DELETE THE MODULE, ANYWAY.
         DLLINK MM,*WTO
         B     FGWTP
**********************************************
**  /LOG /FLAG SNAP #=3
FGSNRSET LH    R#W,FPMNBR+2            GET THE NUMBER IN BINARY.
         CVD   R#W,FGWORKD             CONVERT TO DECIMAL.
         L     R#W,=A(SRSNPNNN)        FIND WHERE TO STORE IT.
         MVC   0(4,R#W),FGWORKD+4      THEN GO       STORE IT.
         L     R#W,=A(SRLOGNNN)        FIND WHERE TO STORE IT.
         ZAP   0(4,R#W),=P'0'          THEN GO ZAP IN A ZERO.
         DLLINK MM,' NUMBER RESET.'
         B     FGWTP
******************************************************
*    /LOG /FLAG TCT ON
*                   OFF
FGTCT0   #
         DLLINK MM,'=TCT'
         MVI   FGTCTP2+1,C' '          SET PARM TO BLANK.
         CLI   FPMON,0                 Q. IS "ON"  SPECIFIED.
         BE    *+4+4                     NO, SKIP.
         MVI   FGTCTP2+1,C'1'            YES, SET PARM TO C'-1'.
         CLI   FPMOFF,0                Q. IS "OFF" SPECIFIED.
         BE    *+4+4                     NO, SKIP.
         MVI   FGTCTP2+1,C'0'            YES, SET PARM TO C'-0'.
         CLI   FGTCTP2+1,C' '
         BE    FGTCTXX
         MVI   FGTCTP2+0,C'B'            YES, SET PARM TO C'B-'.
         PUSH  PRINT
         PRINT GEN
         LINK  EP=NARAO200,PARAM=((B#S),FGTCTP2)
         POP   PRINT
         DLLINK MM,' NARAO200/TCT CALLED WITH PARM ',(FGTCTP2,2)
         DLLINK MM,*WTO
FGTCTXX  #
         B     FGWTP
FGTCTP2  DC    D'0'
******************************************************
*-*  /LOG /FLAG SECONDARY ON
*-*                       OFF
*-*   IF "ON"
*-*     IF HAVE ORIGINAL ADDRESS SAVED FROM AN "OFF"-EXECUTION
*-*       THEN RESTORE IT.
*-*   IF "OFF"
*-*     IF HAVE ORIGINAL ADDRESS IN SCD TO SAVE
*-*       THEN SAVE IT & CLEAR THE ONE IN THE SCD.
FGMT20   #
         DLLINK MM,'=MT2'
         CLI   FPMON,0                 Q. IS "ON"  SPECIFIED.
         BE    FGMT2ON9                  NO, SKIP.
         OC    FGMT2SAV,FGMT2SAV         YES; Q. WAS ORIG ADDR SAVED.
         BZ    FGMT2ON9                         NO; SKIP OUT.
         MVC   SCDSMTRM,FGMT2SAV                YES, RESTORE IT.
         DLLINK MM,' ON'
FGMT2ON9 #
         CLI   FPMOFF,0                Q. IS "OFF" SPECIFIED.
         BE    FGMT2OF9                  NO, SKIP.
         OC    SCDSMTRM,SCDSMTRM         YES; Q. IS ORIG ADDR PRESENT.
         BZ    FGMT2OF9                         NO; SKIP OUT.
         MVC   FGMT2SAV,SCDSMTRM                YES, SAVE ORIG ADDR.
         XC    SCDSMTRM,SCDSMTRM                     CLEAR SCD-PTR.
         DLLINK MM,' OFF'
FGMT2OF9 #
         DLLINK MM,*WTO
         B     FGWTP
****************
FGMT2SAV DC   A(0)
******************************************************
FGFEAT0  #
*    /LOG /FLAG FEAT=13    ON
*                          OFF
*                       SYSON
*                       SYSOFF
*-*   IF "ON"
*-*     IF NO PREV "SYSOFF"
*-*       THEN SET  "ON"-BIT
*-*   IF "OFF"
*-*     IF NO PREV "SYSON"
*-*       THEN RESET "ON"-BIT
*-*   IF "SYSON"
*-*       THEN SET "ON"-BIT AND THE "SYSON"-BIT
*-*   IF "SYSOFF"
*-*       THEN RESET "ON"-BIT AND THE "SYSON"-BIT
*      THE IDEA IS THAT ONLY SYSTEMPROGRAMMERS CAN SET THE "SYS--" BITS
*       AND THE OPERATORS CAN SET THE "ON"-BIT BUT ONLY IF THE "SYS--"
*       BIT IS NOT SET.
*         AS OF YET THERE IS NO SUCH SECURITY.
*
*
FGFEBFET EQU   X'80'    SET TO 0 BY "SYSOFF"
*                       SET TO 1 BY "SYSON"
*                       SET TO 0 BY "OFF"; SET TO 1 BY "ON".
*                        * *  E X C E P T
*                          CANNOT BE SET TO 0 BY "OFF" IF "SYSON"  SET.
*                          CANNOT BE SET TO 1 BY "ON"  IF "SYSOFF" SET.
*                       BIT=0 ==> FEATURE IS OFF.
*                       BIT=1 ==> FEATURE IS ON.
FGFEBSON EQU   X'20'    SET TO 0 BY "SYSOFF"; SET TO 1 BY "SYSON".
*                       BIT=1 ==> FGFEBFET IS SET TO 1.
*                                    "OFF" CANNOT  TURN FEAT OFF.
*                                 "SYSOFF" REQD TO TURN FEAT OFF.
FGFEBSOF EQU   X'10'    SET TO 0 BY "SYSON"; SET TO 1 BY "SYSOFF".
*                       BIT=1 ==> FGFEBFET IS SET TO 0.
*                                    "ON"  CANNOT  TURN FEAT ON.
*                                 "SYSON"  REQD TO TURN FEAT ON.
FGFEBABE EQU   X'01'    SET TO 0 BY "S-/OFF  "; SET TO 1 BY "ABEND".
*                       BIT=1 ==> FEATURE CAN TEST FOR DEBUG ABEND.
         DLLINK MM,'=FEAT'
         CLI   FPMFEAT,X'40'
         BNE   FGFEATXX
         NARSCDF B#F,NARSCFB0          FEATURE FLAG BASE.
         LH    R#W,FPMFEAT+2           GET FEATURE NUMBER IN BINARY.
         N     R#W,=A(X'0000FFFF')     JUST SOME OF IT.
         C     R#W,=A(X'000000FF')     Q. SMALL ENOUGH.
         BH    FGFEATXX                  NO; PITY; EXIT.   (TOO BIG)
         MH    R#W,=H'8'               NBR * LGTH FLAG DBLWD = OFFSET.
         LA    P#F,0(R#W,B#F)          BASE + OFFSET = FLAG DBLWD ADD.
         CLI   FPMON,0                 Q. IS "ON"  SPECIFIED.
         BE    FGFEUON9                  NO, SKIP.
         TM    0(P#F),FGFEBSOF           YES; Q. IS SYS-OFF SET.
         BO    FGFEUON9                         YES; PITY; NOT ALLOWED.
         OI    0(P#F),FGFEBFET             A.O.K.; SET FEAT ON.
         DLLINK MM,'=ON'
FGFEUON9 #
         CLI   FPMOFF,0                Q. IS "OFF" SPECIFIED.
         BE    FGFEUOF9                  NO, SKIP.
         TM    0(P#F),FGFEBSON           YES; Q. IS SYS-ON  SET.
         BO    FGFEUOF9                         YES; PITY; NOT ALLOWED.
         NIF   0(P#F),FGFEBFET             A.O.K.; SET FEAT OFF.
         NIF   0(P#F),FGFEBABE                     SET ABND OFF.
         DLLINK MM,'=OFF'
FGFEUOF9 #
         CLI   FPMSON,0                Q. IS "SYSON"  SPECIFIED.
         BE    FGFESON9                  NO, SKIP.
         OI    0(P#F),FGFEBFET                     SET FEAT ON.
         OI    0(P#F),FGFEBSON                     SET SYSON  YES.
         NIF   0(P#F),FGFEBSOF                     SET SYSOFF NO.
         DLLINK MM,'=SYSON'
FGFESON9 #
         CLI   FPMSOFF,0               Q. IS "SYSOFF" SPECIFIED.
         BE    FGFESOF9                  NO, SKIP.
         NIF   0(P#F),FGFEBFET                     SET FEAT OFF.
         NIF   0(P#F),FGFEBSON                     SET SYSON  NO.
         NIF   0(P#F),FGFEBABE                     SET ABND OFF.
         OI    0(P#F),FGFEBSOF                     SET SYSOFF YES.
         DLLINK MM,'=SYSOFF'
FGFESOF9 #
         CLI   FPMABEND,0              Q. IS "ABEND " SPECIFIED.
         BE    FGFEABE9                  NO, SKIP.
         OI    0(P#F),FGFEBABE                     SET ABEND ON.
         DLLINK MM,'=SYSOFF'
FGFEABE9 #
         DLLINK MM,*WTO
FGFEATXX #
         B     FGWTP
******************************************************
FGDEVC0  #
*    /LOG /FLAG DEV=13     ON          (DEV=A-DECIMAL-NUMBER)
*                          OFF
*  THIS IMPLEMENTATION IS QUITE LIKE THE FEATURES IMPLEMENTATION;
*   AFTER DIFFERENT INITIAL LOGIC, THIS CODE BRANCHES TO THE FEAT CODE.
*  ANY NON-ZERO VALUE WILL IMPLY TO INSTR="TRT" THAT THIS DEVICE IS A
*   MEMBER OF THE SET NOMINALLY KNOWN AS "SIGN-ON-FORMAT CANDIDATES".
FGDEBDEV EQU   X'80'    SET TO 0/1 BY OFF/ON
         DLLINK MM,'=DEVICE'
         CLI   FPMDEVC,X'40'
         BNE   FGDEVCXX
         NARSCDF B#F,NARSDEV0          DEVICE  FLAG BASE.
         LH    R#W,FPMDEVC+2           GET DEVICE NUMBER IN BINARY.
         N     R#W,=A(X'0000FFFF')     JUST SOME OF IT.
         C     R#W,=A(X'000000FF')     Q. SMALL ENOUGH.
         BH    FGDEVCXX                  NO; PITY; EXIT.   (TOO BIG)
**
         LA    P#F,0(R#W,B#F)          BASE + OFFSET = FLAG DBLWD ADD.
         CLI   FPMON,0                 Q. IS "ON"  SPECIFIED.
         BE    FGDEUON9                  NO, SKIP.
         OI    0(P#F),FGDEBDEV           YES; SET DEVC ON.
         DLLINK MM,'=ON'
FGDEUON9 #
         CLI   FPMOFF,0                Q. IS "OFF" SPECIFIED.
         BE    FGDEUOF9                  NO, SKIP.
         NIF   0(P#F),FGDEBDEV           YES; SET DEVC OFF.
         DLLINK MM,'=OFF'
FGDEUOF9 #
         DLLINK MM,*WTO
FGDEVCXX #
         B     FGWTP
**********************************************
FGWTP    #
         DLLINK MM,*WTP
         EPILOGUE
**********************************************************************
  TITLE 'NARAOUF0 --- COPY FLAGS TO THE INDIVIDUAL AUXILIARY PST/S.'
**********************************************************************
SRFGPSTS BENT
         NARSCDF R14,NARPSTSL           PTR TO TABLE OF PST ADCONPAIRS.
         S     R14,=F'8'                     (PRE-DECRMT)
*        *****
SRFGPLOP LA    R14,8(R14)               PTR TO 1ST/NEXT     ADCONPAIR.
         L     R15,0(R14)               PTR TO 1ST/NEXT AUX PST.
         LTR   R15,R15                  Q. IS IT REAL & PRESENT.
         BNP   SRFGPDUN                      NO,  EXIT LOOP.
         L     R15,NARPSTW0-NARPST#0+12(R15) YES, PTR TO 4TH WORK AREA.
         NC    NARCFLGA-NARCMOV4(16,R15),SRFGBIT0 ZERO MOST BITS.
         OC    NARCFLGA-NARCMOV4(16,R15),NARSCFA0 FLAGS TO THIS AUXPST.
         L     R0,NARCNUCA-NARCMOV4(R15)     NUC ADDR
         A     R0,=X'01000000'                 +1 IN HIGH BYTE
         ST    R0,NARCNUCA-NARCMOV4(R15)         TO MAKE UNIQUE.
         B     SRFGPLOP                 LOOP FOR NEXT PST.
SRFGPDUN EQU   *
*        *****
         NC    NARSCFA0(16),SRFGBIT1        ZERO SOME BITS.
         BEXIT
SRFGBIT0 DC    XL16'00000200000000000000000000000000'
*                    0 1 2 3 4 5 6 7 8 9 A B C D E F
SRFGBIT1 DC    XL16'FFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFF'
**********************************************************************
  TITLE 'NARAOUF0 --- LAY PARM INTO FIELD.'
**********************************************************************
* SUB-ROTINE TO LAY INTO 'L' AREA THE PARM POINTED TO BY P#P.
*        LA    P#P,PARMFIELDNAME
*        BAL   L##,LAYIN
*        BNO   IF_NOT_FOUND
SRLAYIN  BENT
         TM    0(P#P),X'C0'
         BNO   SRLAYEX
         MVI   L+4,X'40'
         MVC   L+5(80),L+4
         XR    E#M,E#M
         IC    E#M,0(P#P)
         N     E#M,=A(63)
         S     E#M,=A(01)
*&‰%$    BALC  LT,ABEND
         L     R#W,0(P#P)
         EX    E#M,SRMVCPRM
         LA    E#M,5(E#M)
         STH   E#M,L
         OC    L+4(80),DCL80BBB    FORCE UPPER CASE.
         TM    *,1
SRLAYEX  BEXIT
*        ******
SRMVCPRM MVC   L+4(0),0(R#W)
L        DC    0D'0',Y(4,0),CL84'*PARAMETER-IS-MISSING*'
DCL80BBB DC    CL80' '
**********************************************************************
  TITLE 'NARAOUF0 --- CONSTANTS ETC.'
**********************************************************************
FCMDPT1  DC    A(FCMDPT2)
FCMDPT2  DC    A(FCMDCPYW)  ===> UEHCPYBF
FCMDCPYW DC    XL64'0'
FGHXOFF  DC    A(0)
FGHXBYT  DC    A(0)
FPMFLAG  DLPARM FLAG,FKEYS
FPMYES   DLPARM YES
FPMNO    DLPARM NO
FPMSON   DLPARM SYSON
FPMSOFF  DLPARM SYSOFF
FPMON    DLPARM ON
FPMOFF   DLPARM OFF
FPMBLDL  DLPARM BLDL
FPMRES   DLPARM RESET
FPMNOW   DLPARM NOW
FPMHEX   DLPARM HEX
FPMID    DLPARM ID
FPMOFSET DLPARM OFFSET
FPMDATA  DLPARM DATA
FPMSTOR  DLPARM STOR
FPMSNAP  DLPARM SNAP
FPMLIST  DLPARM LIST
FPMNBR   DLPARM #
FPMTCT   DLPARM TCT
FPMMT2   DLPARM SECONDARY
FPMFEAT  DLPARM FEAT
FPMDEVC  DLPARM DEV
FPMFVAL  DLPARM VAL
FPMABEND DLPARM ABEND
FPMNOI01 DLPARM ?01
FPMNOI02 DLPARM ?02
FPMNOI03 DLPARM ?03
         DC    4Y(0)
FGWORKD  DC    D'0'
FRSAVEAR DC    18F'0'
FGSNAP15 DC    A(0)
FBLDLIST DC    Y(1),Y(76)
FBLDLNAM DC    CL8'        ',CL76' '
FBLDLNM0 DC    CL8'NARSLST0'
FSNAPLST SNAP  MF=L,ID=099,LIST=SNAPLST0
MM       DC    XL200'0'
MM2      DC    XL200'0'
         LTORG
FTABLEC  DC    256AL1(*-FTABLEC)
         ORG   FTABLEC+00
         DC    064X'40'
         ORG
         CNOPBIGR ORG=NARAOUF0
NARAOUFZ EQU   *-1
**********************************************************************
  TITLE 'NARAOUT0 --- START PROGRAMS TO GO WITH EACH TRANSACTION.'
**********************************************************************
NARAOUT0 CSECT
         DROP
*B#U     EQU   R3        BASE FOR THE UEHB.
*B#C     EQU   R4        BASE FOR THE MSG/CMD BUFFER.
*P#P     EQU   R5
*E#M     EQU   R6        LENGTH TO EXECUTE IN MACH CODE.
*B#S     EQU   R11       *** IDENTITY W/ IBM AT TIME OF CALL.
*L##     EQU   R14       LINK TO ALL SUB ROUTINES.
*R#X     EQU   R14       WORKING REGISTER --- SHORT TERM FOR INDEXING.
*R#W     EQU   R15       WORKING REGISTER --- SHORT TERM FOR MISC.
T#A      EQU   R3
T#C      EQU   R4
T#D      EQU   R5
T#E      EQU   R6
         PROLOGUE SAVE=*PRECHN
         L     B#S,0(R1)
         L     B#U,4(R1)
         MVC   TCMDMSGP,8(R1)           ADDR WHERE TO LEAVE MSG ADD.
         USING UEHB,B#U
         USING SCD,B#S
         USING NUECPYBF,B#C
         L     B#C,UEHCPYBF
*        *****
         MVC   TCMDCPYW,0(B#C)
         CLC   TCMDCPYW(2),=Y(L'TCMDCPYW)
         BC    LT,*+4+6
         MVC   TCMDCPYW(2),=Y(L'TCMDCPYW)
         TR    TCMDCPYW+4(L'TCMDCPYW-4),TTABLEC   CTRL CHARS TO BLANKS.
         MVC   TCMDCPYW+2(2),=Y(0)                CLEAR ZZ.
*        *****
         DLLINK (TMM,4),'NARAOUT0 ==>',(B#C),*WTP
         DLLINK (TMM,4),'DFSAOUT0 PROG STARTED FOR TRAN  =>'
         ST    R13,TRSAVEAR+04        SET HI-SAVE PTR IN NEW SAVE-AREA.
         LA    R13,TRSAVEAR                PT TO NEW SAVE AREA FOR S/R.
         CALL  KEYFLAGS,(TCMDPT1,TKEYS)    S/R WILL FORE & BACK CHAIN.
         L     R13,04(R13)                 RESTORE SAVE-SET POINTER.
*        *****
         OC    TPMTTT(4),TPMTTT2    "OR" TOGETHER ALL OF THE
         OC    TPMTTT(4),TPMTTT3         ALIASES FOR "TRAN".
         OC    TPMTTT(4),TPMTTT4
         OC    TPMTTT(4),TPMTTT5
         CLI   TPMTTT,0
         BE    TRADONE7
         OC    TPMPPP(4),TPMPPP2    "OR" TOGETHER ALL OF THE
         OC    TPMPPP(4),TPMPPP3         ALIASES FOR "PROG".
         OC    TPMPPP(4),TPMPPP2A
         CLI   TPMPPP,0
         BE    TRADONE7
**************************************
*
**************************************
**  FIND EACH TRAN CODE IN COMMAND.
         LA    T#A,TPTRNAMS-4             FIRST TRAN PARM (PRE-DECR).
TRALOOP  LA    T#A,4(T#A)                 NEXT TRAN PARM.
         ICM   P#P,X'F',0(T#A)            Q. REAL PTR.
         BZ    TRADONE6                     NO, END; QUIT.
         BAL   L##,TRLAYIN                  YES, GET PARM IN W/A="TL".
         BNO   TRADONE6                          QUIT IF NONE.
         L     R14,=A(X'80000000'+X31SMB1)  RIG POINTER TO CONTINUE. XA
         BSM   0,R14                        SET AMODE=31.            XA
X31SMB1  #                                                           XA
******************************
*     FOR EACH TRAN CODE IN COMMAND, FIND THE CORRECT SMB.
         L     T#C,SCDSMBEP               ADDR OF FIRST SMB.
         LH    T#D,SCDSMBL                LENGTH OF EACH,
         MH    T#D,SCDNSMB+2                * NBR OF SMB,
         AR    T#D,T#C                      + FIRST = ADDR AFTER LAST.
         SH    T#C,SCDSMBL                PRE-DECREMENTED.
TRASMBLP AH    T#C,SCDSMBL                FIRST/NEXT SMB.
         CR    T#C,T#D                    Q. ANY LEFT.
         BC    GE,TRAERR1                   NO, QUIT; NEXT INPUT TRAN.
         CLC   SMBNAME-SMB(,T#C),TL+4     Q. IS THIS OUR SMB.
         BNE   TRASMBLP                     NO, KEEP LOOKING.
         TM    SMBFLAG2-SMB(T#C),SMB2RMT  Q. IS THIS A REMOTE SMB?
         BO    TRAERR1                      YES, QUIT; GO TO NEXT TRAN.
******************
*      FOR THE CORRECT SMB GET PTR TO THE PDIR.
         L     T#E,SMBPDIR-SMB(T#C)       PDIR POINTER.
*&‰%     A     T#E,SCDDLIPS               NO OFFSET+BASE IN THIS VER.
         NIF   PDIRCODE-PDIR(T#E),PDIRNOSC TURN OFF THE NO-SCHED BIT.
         DLLINK TMM,' ',TL
TRADONE1 #
         LA    R14,X24SMB1                RIG POINTER TO CONTINUE.   XA
         BSM   0,R14                      SET AMODE=24.              XA
X24SMB1  #                                                           XA
         B     TRALOOP                    LOOP FOR NEXT TRAN.
*****************************
TRAERR1  #                PUT (PARENS) AROUND TRANS IN ERROR.
         DLLINK TMM,' (',TL,')'
         B     TRADONE1                   LOOP FOR NEXT TRAN.
*****************************
TRADONE6 #
         STM   R0,R15,TRSTMZ9
         CLI   TPMPPP2A,0             Q. REQUEST FOR ABEND.
         BE    TRADONE8                 NO, SKIP.
         DC    A(0)                     YES;  S/0C1.
TRADONE8 #
         DLLINK TMM,*WTP
         DLLINK TMM,TMMCARR
         L     R#W,TCMDMSGP           WHERE TO PUT MSG PTR.
         MVC   0(4,R#W),=A(TMM)                PUT MSG PTR.
TRADONE7 #
         LA    R14,X24SMB7                RIG POINTER TO CONTINUE.   XA
         BSM   0,R14                      SET AMODE=24.              XA
X24SMB7  #                                                           XA
         EPILOGUE
**********************************************************************
  TITLE 'NARAOUT0 --- LAY PARM INTO FIELD.'
**********************************************************************
* SUB-ROTINE TO LAY INTO 'L' AREA THE PARM POINTED TO BY P#P.
*        LA    P#P,PARMFIELDNAME
*        BAL   L##,LAYIN
*        BNO   IF_NOT_FOUND
TRLAYIN  BENT
         TM    0(P#P),X'C0'
         BNO   TRLAYEX
         MVI   TL+4,X'40'
         MVC   TL+5(80),TL+4
         XR    E#M,E#M
         IC    E#M,0(P#P)
         N     E#M,=A(63)
         S     E#M,=A(01)
*&‰%$    BALC  LT,ABEND
         L     R#W,0(P#P)
         EX    E#M,TRMVCPRM
         LA    E#M,5(E#M)
         STH   E#M,TL
         OC    TL+4(80),TDCL80BB   FORCE UPPER CASE.
         TM    *,1
TRLAYEX  BEXIT
*        ******
TRMVCPRM MVC   TL+4(0),0(R#W)
TL       DC    0D'0',Y(4,0),CL84'*PARAMETER-IS-MISSING*'
TDCL80BB DC    CL80' '
**********************************************************************
  TITLE 'NARAOUT0 --- CONSTANTS AND BUFFERS.'
**********************************************************************
TCMDPT1  DC    A(TCMDPT2)
TCMDPT2  DC    A(TCMDCPYW)  ===> UEHCPYBF
TCMDCPYW DC    XL64'0'
TRSAVEAR DC    18A(0)
TMMCARR  DC    Y(5,0),X'15'
TCMDMSGP DC    A(0)
TPTRNAMS DC    A(TPMT1)
         DC    A(TPMT2)
         DC    A(TPMT3)
         DC    A(TPMT4)
         DC    A(TPMT5)
         DC    A(TPMT6)
         DC    A(TPMT7)
         DC    A(TPMT8)
         DC    A(TPMT9)
         DC    A(TPMT10)
         DC    A(TPMT11)
         DC    A(TPMT12)
         DC    A(TPMT13)
         DC    A(TPMT14)
         DC    A(TPMT15)
         DC    A(TPMT16)
         DC    A(TPMT17)
         DC    A(TPMT18)
         DC    A(TPMT19)
         DC    A(0)
TPMTTT   DLPARM TTT,TKEYS
TPMTTT2  DLPARM TRA
TPMTTT3  DLPARM TRAN
TPMTTT4  DLPARM TRANSACTION
TPMTTT5  DLPARM TRANSACTIONS
TPMPPP   DLPARM .PPP
TPMPPP2  DLPARM .PROG
TPMPPP2A DLPARM .PROGABEND
TPMPPP3  DLPARM .PROGRAM
TPMSTA1  DLPARM /STA                    TRAP THE VERB.
TPMALL   DLPARM ALL
TPMT1    DLPARM ?01
TPMT2    DLPARM ?01
TPMT3    DLPARM ?01
TPMT4    DLPARM ?01
TPMT5    DLPARM ?01
TPMT6    DLPARM ?01
TPMT7    DLPARM ?01
TPMT8    DLPARM ?01
TPMT9    DLPARM ?01
TPMT10   DLPARM ?01
TPMT11   DLPARM ?01
TPMT12   DLPARM ?01
TPMT13   DLPARM ?01
TPMT14   DLPARM ?01
TPMT15   DLPARM ?01
TPMT16   DLPARM ?01
TPMT17   DLPARM ?01
TPMT18   DLPARM ?01
TPMT19   DLPARM ?01
         DC    4Y(0)
         SPACE 2
TRSTMZ9  DC    16A(0)
TMM      DC    CL200' '
         LTORG
TTABLEC  DC    256AL1(*-TTABLEC)
         ORG   TTABLEC+00
         DC    072X'40'
         ORG
         CNOPBIGR ORG=NARAOUT0
NARAOUTZ EQU   *-1
**********************************************************************
  TITLE 'NARAOUP0 --- PROCESS THE DEPENDENT REGIONS START/STOP MSGS.'
**********************************************************************
NARAOUP0 CSECT
         DROP
*B#F     EQU   R2        BASE FOR THE FEATURES.
*B#U     EQU   R3        BASE FOR THE UEHB.
*B#C     EQU   R4        BASE FOR THE MSG/CMD BUFFER.
*P#P     EQU   R5
*E#M     EQU   R6        LENGTH TO EXECUTE IN MACH CODE.
*B#S     EQU   R11       *** IDENTITY W/ IBM AT TIME OF CALL.
*L##     EQU   R14       LINK TO ALL SUB ROUTINES.
*R#X     EQU   R14       WORKING REGISTER --- SHORT TERM FOR INDEXING.
*R#W     EQU   R15       WORKING REGISTER --- SHORT TERM FOR MISC.
         PROLOGUE SAVE=*PRECHN
         L     B#S,0(R1)
         L     B#U,4(R1)
         MVC   PMSGMSGP,8(R1)           ADDR WHERE TO LEAVE MSG ADD.
         USING UEHB,B#U
         USING SCD,B#S
         USING NUECPYBF,B#C
         L     B#C,UEHCPYBF
         ST    B#S,PST551SC               STORE IBM SCD PTR.
         LR      R#W,B#S                  COPY  IBM SCD PTR.
         NARSCDF R#W,NARSCD10,KNOWN=SCD   GET   AUX SCD PTR
         ST      R#W,PST551RI             STORE AUX SCD PTR.
*        *****
         MVC   PMSGCPYW,0(B#C)
         CLC   PMSGCPYW(2),=Y(L'PMSGCPYW)
         BC    LT,*+4+6
         MVC   PMSGCPYW(2),=Y(L'PMSGCPYW)
*        *****
         XC    PST551FF,PST551FF          CLEAR SNAP FLAG.
         DLLINK (PMM,4),'NARAOUP0 ==>',PMSGCPYW,*WTP
         DLLINK (PMM,4),'OK'
         DLLINK (PMM,4),'NARAOUP0 PST EXTENSION ERROR - A.'
*        ST    R13,PRSAVEAR+04        SET HI-SAVE PTR IN NEW SAVE-AREA.
*        LA    R13,PRSAVEAR                PT TO NEW SAVE AREA FOR S/R.
*        CALL  KEYFLAGS,(PCMDPT1,PKEYS)    S/R WILL FORE & BACK CHAIN.
*        L     R13,04(R13)                 RESTORE SAVE-SET POINTER.
*****************************************************************
*-* HERE FOR MSG/BMP START/STOP MSG
*-*       IF MSG/BMP START
*-*         IF FEAT=16 (DEC)
*-*           IF OUR PST DOES NOT EXIST.
*-*             THEN CREATE OUR PST EXTENSION AND POINT TO IT FROM
*-*                         OUR SCD EXTENSION.
*-*
*-*       IF    BMP START/STOP MSG.
*-*         IF THE FEAT=15 (DECIMAL) IS SET ON.
*-*           THEN ADD PSBNAME.
*
         MVI   PST551FG,0          CLEAR THE MSG/BMP START/STOP FLAG.
*************************************************
*   DETERMINE START OR STOP.
         MVI   PST551GF,C'A'
         CLC   =C'DFS551',NUETXT        IF MSG-DFS551,
         BE    PST551AS                   THEN PROCESS MSG/BMP STA.
         CLC   =C'DFS552',NUETXT        IF MSG-DFS552,
         BE    PST551AP                   THEN PROCESS MSG/BMP STO.
         B     PST551WW                 IF NONE; SKIP OUT.
PST551AS OI    PST551FG,PST551FS        FLAG FOR START.
         B     PST551B
PST551AP OI    PST551FG,PST551FP        FLAG FOR STOP.
         B     PST551B
*************************************************
*   FIND REGION TYPE  1=MSG, 2=BMP.
PST551B  #
         MVI   PST551GF,C'B'
         LA    R#W,NUETXT-1            START OF TEXT PRE-DECRMTD.
         LA    R#X,20                  DEPTH TO SCAN.
PST551L1 LA    R#W,1(R#W)              BUMP SCAN PTR.
         CLC   =C' MESSAGE ',0(R#W)    Q. IS IT A MSG.
         BE    PST551B1                  YES, OK.
         CLC   =C' BATCH ',0(R#W)      Q. IS IT A BMP.
         BE    PST551B2                  YES, OK.
         BCT   R#X,PST551L1              NO, LOOP.
         B     PST551WW                  NO, EXHAUSTED; EXIT.
PST551B1 OI    PST551FG,PST551F1       FLAG AS TYPE=1=MSG
         B     PST551C
PST551B2 OI    PST551FG,PST551F2       FLAG AS TYPE=2=BMP
         B     PST551C
*************************************************
*   FIND REGION NUMBER.
PST551C  LA    R#X,40                  DEPTH TO SCAN.
         MVI   PST551GF,C'C'
PST551L2 LA    R#W,1(R#W)              BUMP SCAN PTR.
         CLC   PST551C1,0(R#W)          Q. PST ID FOUND.
         BE    PST551D                   YES, OK.
         BCT   R#X,PST551L2              NO, LOOP.
         B     PST551WW                  NO, EXHAUSTED; EXIT.
**************************
PST551D  #
         MVI   PST551GF,C'D'
         LA    R#X,L'PST551C1(R#W)     PTR TO CHAR AFTER COMPARAND.
         ST    R#X,PST551A1            STO IT.        (R#X=FBA)
         LA    R#X,10                  DEPTH TO SCAN.
PST551L3 LA    R#W,1(R#W)              BUMP SCAN PTR.
         CLI   0(R#W),C' '             Q. TRAILING BLANK FOUND
         BE    PST551M                   YES, OK.     (R#W=LBA+1)
         BCT   R#X,PST551L3              NO, LOOP.
         B     PST551WW                  NO, EXHAUSTED; EXIT.
**************************
PST551M  MVC   PST551W1,PST551W0       INITIALIZE THE PST NUMBER.
         MVI   PST551GF,C'M'
         LA    M#T,PST551W1            PTR TO  "TO" FBA.
         LR    E#M,R#W                 LBA+1
         L     R#W,PST551A1                       ("FROM" FBA)
         SR    E#M,R#W                   - FBA = LENGTH OF SOURCE.
         LA    R#X,L'PST551W1                    LENGTH OF "TO".
         SR    R#X,E#M                 AMOUNT BY WHICH "TO" > "FROM".
         BC    EQ,PST551M0             IF 0, THEY ARE THE SAME.
         BC    GT,PST551M4             IF +, THEN "FROM" < "TO"
*      ********                        HERE WHEN  "FROM" > "TO"
         B     PST551WW                THIS IS AN ERROR SO SKIP.
*&‰      AR    R#W,R#X                        SO INCREASE FROM FBA,
*&‰      SR    E#M,R#X                           DECREASE MVC LGTH.
*&‰      B     PST551M0                        AND MOVE.
*      ********
PST551M4 #                             HERE WHEN  "FROM" < "TO"
         AR    M#T,R#X                        SO INCREASE "TO" FBA.
*      ********
PST551M0 #                             HERE WHEN ALL IS OK.
         BCTR  E#M,0                     (-1 FOR MACH.CODE.)
         EX    E#M,PST551MV            MOVE IT.
         PACK  PST551WP,PST551W1       PST NUMBER.
         CVB   R#W,PST551WP            PST NUMBER.
         ST    R#W,PST551WB            PST NUMBER.
*************************************************
*   TAKE APPROPRIATE ACTION.
*          (START LOGIC MUST PRECEDE PSB NAME LOGIC BECAUSE
*           PSBNAME LOGIC IS DEPENDENT UPON THE CHAINING.   )
         TM    PST551FG,PST551FS       Q. IS THIS A START.
         BALC  ALLON,PST551SA,R=L##      YES; GO CHAIN OUR PST.
         TM    PST551FG,PST551FP       Q. IS THIS A STOP.
         BALC  ALLON,PST551QA,R=L##      YES; RIG TO IGNORE.
         TM    PST551FG,PST551F2       Q. IS THIS A BMP.
         BALC  ALLON,PST551PA,R=L##      YES; ADD PSB NAME.
         B     PST551ZZ
*       **
PST551WW MVC   PST551FF,=A(*)
         DLLINK (PMM,4),'NARAOUP0 PST EXTENSION ERROR- W=',(PST551GF,1)
PST551ZZ STM   0,15,PST551RR
         CLC   PMM(2),=Y(12)          Q. IS THE MSG  TRIVIALLY SMALL.
         BC    LE,PST551Z9              YES, SMALL; SKIP.
         DLLINK PMM,*WTP
         DLLINK PMM,PMMCARR
         L     R#W,PMSGMSGP           WHERE TO PUT MSG PTR.
         MVC   0(4,R#W),=A(PMM)                PUT MSG PTR.
PST551Z9 #
         EPILOGUE
*************************************************
         SPACE 3
PST551FF DC    A(0)
PST551GF DC    A(0)
  TITLE 'NARAOUP0 --- SUB ROUTINES.'
*************************************************
** S/R          TO ESTABLISH THE EXTENDED/AUXILIARY PST'S AND TO
*   STO THE POINTERS INTO EACH OTHER.
R#N      EQU   R2
*B#C     EQU   R4
B#D      EQU   R6
B#B      EQU   R7
B#A      EQU   R8
*B#S     EQU   R11 IDENTITY W/IBM AT TIME OF CALL.  SCD ADDR.
PST551SA BENT
         USING   PST,B#B
         USING   SCD,B#S
         PUSH  PRINT
         PRINT GEN
         L       B#S,PST551SC
         NARSCDF B#F,NARSCFB0      GET  FEATURES BASE.
         TM    016*8(B#F),X'80'    Q. FEATURE #16 INFORCE.
         BZ    PST551SZ              NO; IGNORE; CONTINUE NORMALLY.
****************************************************
*&‰%$
*   FIND  THE IBM PST.
         L     R#N,PST551WB          REGN-NBR
         L     R14,=A(X'80000000'+X31CBT1)  RIG POINTER TO CONTINUE. XA
         BSM   0,R14                        SET AMODE=31.            XA
X31CBT1  #                                                           XA
         DFSCBTS  FUNC=FIND,TYPE=DPST,P1=(R#N,R),                      *
               OPTION=NOSER,                                           *
               PARM=PST551PM
         LA    R14,X24CBT1                RIG POINTER TO CONTINUE.   XA
         BSM   0,R14                      SET AMODE=24.              XA
X24CBT1  #                                                           XA
         LTR   R15,R15
         BNZ   PST551SZ
         LR    B#B,R1
****************************************************
*   FIND  OUR EXTENSION.
         NARSCDF R#X,NARPSTSA          PTR TO  NUMBER,LENGTH.
         L       R#N,PST551WB          REGN-NBR
         CH      R#N,0(R#X)            REGN-NBR : MAX AVAIL OUR PST'S.
         BC      GT,PST551S1            NOT ENOUGH; SKIP OUT.
         NARSCDF B#A,NARPSTSL          PTR TO  LIST OF ADCON PAIRS.
         SLL     R#N,3                 REGN-NBR * 8 = OFFSET IN LIST.
         AR      B#A,R#N               PTR TO ADCON PAIR.
         ICM     B#D,7,1(B#A)          GET  AUX  PST ADDR FROM LIST.
         BNZ     PST551S5              IF PRESENT, THEN USE  IT.
         IMODULE LOAD,EPLOC=PST551NM,SP=241,USE=NO NOT; LOAD IT.
         ST      R15,PST551R5          STO RETCDS.
         LTR     R15,R15               Q. AOK.
         BNZ     PST551S2                NO; PSHAW.
         LR      B#D,R0                  YES; GOT AN  ADDRESS.
         ST      B#D,NARPSTRI-NARPSTSL(B#A)   STO EXTD PST IN LIST.
         ST      B#B,NARPSTBM-NARPSTSL(B#A)   STO REAL PST IN LIST.
         ST      B#B,NARPIPS0-NARPST#0(B#D)   STO REAL PST IN EXTD PST.
         MVC   NARPSCD0-NARPST#0(4,B#D),PST551SC   REAL SCD IN AUX PST.
         MVC   NARPRS10-NARPST#0(4,B#D),PST551RI   EXTD SCD IN AUX PST.
         POP   PRINT
         DLLINK (PMM,4),'OK'    IF MSG IS SHORT, THEN IT'S NOT SENT.
         DLLINK (PMM,4),'NARAOUP0 PST EXTENSION LOADED.'
PST551SZ BEXIT
************************
PST551S1 DLLINK (PMM,4),'NARAOUP0 PST EXTENSION NOT ATTEMPED.'
         B     PST551SZ
PST551S2 DLLINK (PMM,4),'NARAOUP0 PST EXTENSION FAILED.'
         B     PST551SZ
PST551S5 #
         DLLINK (PMM,4),'NARAOUP0 PST EXTENSION ALREADY IN PLACE.'
         DLLINK (PMM,4),'IN'    IF MSG IS SHORT, THEN IT'S NOT SENT.
         B     PST551SZ
************************
PST551R5 DC    A(0)
PST551NM DC    CL8'NARPST00'
*************************************************
         SPACE 9
*************************************************
PST551QA BENT
         DLLINK (PMM,4),'STOP'     SHORT TO IGNORE.
         BEXIT
*************************************************
         EJECT
*************************************************
**    S/R TO ADD THE PSB NAME ONTO THE BMP STARTED MESSAGE.
PST551PA BENT
         NARSCDF B#F,NARSCFB0      GET  FEATURES BASE.
         TM    015*8(B#F),X'80'    Q. FEATURE #15 INFORCE.
         BZ    PST551PZ              NO; IGNORE; CONTINUE NORMALLY.
         NARSCDF R#X,NARPSTSA          PTR TO  NUMBER/SIZE WORD.
         L       R#N,PST551WB          REGN-NBR
         CH      R#N,0(R#X)            REGN-NBR : MAX AVAIL OUR PST'S.
         BC      GT,PST551P1            NOT ENOUGH; SKIP OUT.
         NARSCDF B#A,NARPSTSL          PTR TO  LIST OF ADCON PAIRS.
         SLL     R#N,3                 REGN-NBR * 8 = OFFSET IN LIST.
         AR      B#A,R#N               PTR TO ADCON PAIR.
         ICM   R#W,7,4+1(B#A)          GET  REAL PST ADDR FROM LIST.
         BZ    PST551P2                IF NONE.
         ICM   R#X,7,PSTPSB-PST+1(R#W) PTR TO THE PDIR.
         BZ    PST551P3                IF NONE.
         MVC   PST551PN,PDIRSYM-PDIR(R#X) MOVE THE NAME.
*        ***
         LA    R#W,NUETXT                  BEGINNING OF MESSAGE
         AH    R#W,0(R#W)                   + LGTH = LBA + 1.
         MVC   0(PST551PL,R#W),PST551P0        ADD ON THERE.
         LH    R#W,NUELL               ORIGINAL LENGTH
         LA    R#W,PST551PL(R#W)        + ADDED LENGTH
         STH   R#W,NUELL                 =  NEW LENGTH.
         DLLINK (PMM,4),'OK'
         DLLINK (PMM,4),'NARAOUP0 MSG REGN PSB NAME ADDED.'
PST551PZ #
         NARSCDF B#F,NARSCFB0
         TM    015*8(B#F),X'01'
         BZ    *+4+4
         DC    A(0)
         BEXIT
***************************************
PST551P1 DLLINK (PMM,4),'NARAOUP0 NOT ENUF NAR PST/S.'
         B     PST551PZ
PST551P2 DLLINK (PMM,4),'NARAOUP0 NO PST ADDRESS.'
         B     PST551PZ
PST551P3 DLLINK (PMM,4),'NARAOUP0 NO PDIR ADDRESS.'
         B     PST551PZ
**********************************************************************
  TITLE 'NARAOUP0 --- CONSTANTS AND BUFFERS.'
**********************************************************************
PST551SC DC    A(0)
PST551RI DC    A(0)
PST551MV MVC   0(0,M#T),0(R#W)         MOVE THE PST NUMBER IN EBCDIC.
PST551C1 DC    C'ID='
PST551A1 DC    A(0)
PST551W0 DC    CL4'0000'
PST551W1 DC    CL4'0000'
PST551WP DC    0D'0',PL8'0'
PST551WB DC    A(0)
*        ***
PST551PK DC    C'  PSB='
PST551PN DC    CL8' '
PST551PL EQU   *-PST551PK
PST551P0 EQU   PST551PK,PST551PL
*        ***
PST551FG DC    X'0'
PST551F1 EQU   X'01'
PST551F2 EQU   X'02'
PST551FS EQU   X'40'
PST551FP EQU   X'80'
PST551RR DC    16A(0)
PST551PM DC    A(*+4),2XL(CBTPLEN)'0'    PARM FIELD FOR DFSCBTS MACRO.
PMSGPT1  DC    A(PMSGPT2)
PMSGPT2  DC    A(PMSGCPYW)  ===> UEHCPYBF
PMSGCPYW DC    XL64'0'
PRSAVEAR DC    18A(0)
PRSTMZ9  DC    18A(0)
PMMCARR  DC    Y(5,0),X'15'
PMSGMSGP DC    A(0)
PMM      DC    CL200' '
         LTORG
         CNOPBIGR ORG=NARAOUP0
NARAOUPZ EQU   *-1
**********************************************************************
  TITLE 'NARAOUC0 --- STACK THE LAST NNN COMMANDS IN A CIRCLE.'
**********************************************************************
NARAOUC0 CSECT
         DROP
*B#U     EQU   R3        BASE FOR THE UEHB.
*B#C     EQU   R4        BASE FOR THE MSG/CMD BUFFER.
*E#M     EQU   R6        LENGTH TO EXECUTE IN MACH CODE.
*B#S     EQU   R11       *** IDENTITY W/ IBM AT TIME OF CALL.
*L##     EQU   R14       LINK TO ALL SUB ROUTINES.
*R#X     EQU   R14       WORKING REGISTER --- SHORT TERM FOR INDEXING.
*R#W     EQU   R15       WORKING REGISTER --- SHORT TERM FOR MISC.
         PROLOGUE SAVE=*PRECHN
         L     B#S,0(R1)
         L     B#U,4(R1)
         USING UEHB,B#U
         USING SCD,B#S
         USING NUECPYBF,B#C
         L     B#C,UEHCPYBF
*        *****
* THIS CODE IS TO KEEP IN CORE THE LAST NN COMMANDS ISSUED.
*  THE MECHANIZATION IS TO KEEP A TABLE OF NN ADCON PAIRS;
*  THE FIRST WORD POINTS TO THE NEXT ENTRY IN THE TABLE OF ADCON PAIRS;
*  THE 2-ND  WORD POINTS TO THE PARTICULAR ELEMENT IN THE DATA STACK.
*  (NECESSARILY THE LAST ENTRY POINTS TO THE FIRST)
*  THE ADDRESS OF THE NEXT ADSON PAIR ENTRY TO BE USED IS KEPT
*   IN A SEPARATE CONTROL WORD.
*   (NECESSARILY THIS IS INITIALIZED TO POINT TO THE LAST ENTRY)
* WHENEVER THE SYSTEM MAY ABEND, THE CONTROL WORD WILL POINT TO THE
*  MOST-RECENTLY-USED ADCON PAIR ENTRY IN THE TABLE. THE ENTRIES
*  MUST BE READ BACKWARD TO FIND THE LAST NN COMMANDS.
*        *****
         L     R#W,CCMDCTR0           GET PTR TO PREVIOUS ENTRY.
         L     R#W,4(R#W)                 PTR TO NEXT CONTROL PAIR.
         L     R#X,8(R#W)                 PTR TO ELEMENT IN THE STACK.
         MVC   0(L'CCMDSTAK,R#X),0(B#C)   COPY COMMAND INTO THE STACK.
         ST    R#W,CCMDCTR0           STO PTR TO       THIS ENTRY.
         EPILOGUE
*********************************
*
*********************************
CCNN     EQU   10
CCTL     EQU    8
CCSL     EQU   32
CCMDCTR0 DC    A(CCMDCTRZ)
** FOLLOWING IS A LIST OF POINTER-PAIRS CONTROLLING THE STACK.
*        DC   NN-A(PTR_TO_NEXT_PAIR, PTR_TO_A_STACK_ELEMENT)
         PUSH PRINT
         PRINT GEN,DATA
CCMDCTRL DC    (CCNN)A(*+CCTL,CCMDSTAK+((*-CCMDCTRL)/CCTL)*L'CCMDSTAK)
         ORG   *-CCTL OVERLAY LAST ENTRY
CCMDCTRZ DC      A(CCMDCTRL) W/ PTR TO FIRST ENTRY.
         ORG
         POP  PRINT
         DC    C'NARAOUC0 --- THE LAST NN COMMANDS FOLLOW HERE'
CCMDSTAK DC    (CCNN)XL(CCSL)'0'
         CNOPBIGR ORG=NARAOUC0
NARAOUCZ EQU   *-1
**********************************************************************
  TITLE 'NARAOUE0 --- D-S-E-C-T-S'
**********************************************************************
         NARSCD
         NARCPY
         NARUEBUF
         UEHB
         DFSCBTS FUNC=DSECT
*        PRINT NOGEN
         ISCD  SCDBASE=0
         PRINT NOGEN
         IDLI  PSTBASE=0,PDRBASE=0
         IAPS  SMBBASE=0
         ICLI  CNTBASE=0
         END
//L.IMSLOAD DD DISP=SHR,DSN=IMS.LOAD
//L.SYSIN DD *
  INCLUDE IMSLOAD(KEYFLAGS)
