//AIMS31B2 JOB 'IMSGROUP  SH28205610*110A044         999  3000007037',
//  REGION=999K,TIME=5,MSGLEVEL=1,MSGCLASS=H,NOTIFY=$A1016
//*MAIN ORG=LOCAL,CLASS=L
//NARBGN20 EXEC IMSUPDTE,MEMBER=NARBGN20,
//             P=IMA,LOAD='PVT.MODS',DISPR=SHR,
//  XREFC='XREF(FULL)',PGMC=IEV90,
//* CONDL=0,
//  SYMI=SOURCETM,SYMO=SOURCETM,RECORD=NO,ACCT=1,SOUT='*'
//C.SYSIN  DD *
         MACRO
&L       CHNEPST &EPST=(1),&ID=
.*  CHAIN EPST MACRO: TO CHAIN SPECIFIED PST EXTENSION BLOCK
.*  OFF PSTEPST.   BLOCK WILL BE PLACED AT HEAD OF QUEUE.
************************************************
**
**  THIS IS CURRENTLY A LOCAL ROCKWELL MACRO IN THIS PROGRAM
**    TO BE REPLACED BY AN IBM ONE SOMEDAY  ---  I HOPE.
**
************************************************
         AIF   ('&EPST'(1,1) EQ '(').PASS1
         MNOTE 12,'** EPST MUST BE REGISTER NOTATION'
         MEXIT
.PASS1   AIF   ('&ID' EQ '').PASS2 ID IS OPTIONAL
         AIF   ('&ID'(1,1) EQ '(').PASS2
         MNOTE 12,'** ID MUST BE REGISTER NOTATION'
         MEXIT
.PASS2   ANOP
         AIF   ('&L' EQ '').SKLABEL
&L       DS    0H
.SKLABEL AIF   ('&ID' EQ '').IDPRES  ID PRESET
         ST    &ID,4&EPST          SET EPSTID
.IDPRES  L     15,PSTEPST          A(TOP EPST)
         ST    15,0&EPST           MAKE IT NEXT TO TOP
         ST    &EPST,PSTEPST       MAKE YOURS TOP EPST
         MEND
*********************************************************************
         EJECT
*********************************************************************
NARBGN20 CSECT
         PRINT NOGEN
         PROLOGUE SAVE=*PRECHN
         REQUATE
         CEQUATE
         PRINT   GEN
**************************************************
PART1    DC    0Y(0)
**************************************************
         SPACE 3
**************************************************
** THIS CODE IS TO STO THE IBM AND NAR SCD POINTERS INTO EACH OTHER.
A#S      EQU   R11 IDENTITY W/IBM AT TIME OF CALL.  SCD ADDR.
A#A      EQU   R3                   NARSCD00 IN CSA
A#B      EQU   R4                   NARSCD10 IN CSA
A#C      EQU   R5                   NARSCD00 IN THE NUC
         MVC   PARMSIN,0(R1)        COPY INPUT PARMS.
         ST    A#S,AIBMSCD         STO THEIRS.
         USING SCD,A#S
         IMODULE LOAD,EPLOC=LOCALSCD,SP=241
         LTR   R15,R15
         BZ    PART1A1
         ST    R15,IMODR15
         LR    R3,R15
         WTO   'NARBGN20-IMODULE LOAD OF NARSCD FAILED; RC IS IN R3',  *
               ROUTCDE=(2,8,11)
         ABEND 1133,DUMP
PART1A1  LR    A#A,R0                         PTR TO OFFSET=00
         ST    A#A,ANARSCD
********************
         ST    A#S,NARSCD0I-NARSCD00(A#A)  IBMS SCD INTO OURS IN CSA
         L     A#B,NARSCD1#-NARSCD00(A#A)     PTR TO SCD10    IN CSA
         L     A#C,PARMNSCD                   PTR TO PREFIX   IN NUC
         MVC   0(X'18',A#C),0(A#A)          MOVE NUC PREFIX FROM CSA
         CHNESCD ESCD=(A#B)          CHAIN MASTER SCD TO OURS IN CSA
**************************************************
         SPACE 3
**************************************************
         NARSCDF A#C,NARSDLK#
         MVC   0(4,A#C),=V(DLLINK)   INITIALIZ DLLINK VCON IN NARSCD.
*&‰%$    NARSCDF A#C,NARSTAT#
*&‰%$    MVC   0(4,A#C),=V(NAR#STAT) INIT. NUC STATS  VCON IN NARSCD.
         DROP
**************************************************
         EJECT
**************************************************
** THIS CODE IS TO ESTABLISH THE EXTENDED/AUXILIARY PST'S AND TO
*   STO THE POINTERS INTO EACH OTHER.
         USING NARBGN20,R12
         AGO   .PSTZZ
B#A      EQU   R3
B#B      EQU   R4
B#C      EQU   R5
B#D      EQU   R6
B#S      EQU   R11 IDENTITY W/IBM AT TIME OF CALL.  SCD ADDR.
         USING   PST,B#B
         USING   SCD,B#S
         L       B#S,AIBMSCD
         LR      B#A,B#S
         NARSCDF B#A,NARPSTSL,KNOWN=SCD FIRST LIST ENTRY
         S       B#A,=A(8) PRE-DECREMENTED.
         L       B#B,SCDDLIPA           FIRST PST
         SH      B#B,SCDDLIPL            PRE-DECRMT BY LENGTH.
         LH      B#C,SCDDLIPN           NUMBER OF PST'S.
B2PSTLOP LA      B#A,8(B#A)      BUMP NEXT LIST ENTRY.
         CLI   0(B#A),X'FF'      Q. ANY MORE AUX PST'S.
         BE    B2PSTZ0             NO; EXIT.
         AH    B#B,SCDDLIPL        YES; BUMP REAL PST ADDR.
         L     B#D,0(B#A)               GET  AUX  PST ADDR FROM LIST.
         ST    B#B,NARPIPS0-NARPST#0(B#D)  STO REAL IN AUX PST.
         ST    B#B,NARPSTBM-NARPSTSL(B#A)  STO REAL IN LIST PAIR.
         CHNEPST EPST=(B#D)              CHAIN-'EM-UP;   MOVE-'EM-OUT.
         MVC   NARPSCD0-NARPST#0(4,B#D),AIBMSCD    REAL SCD IN AUX PST.
         BCT   B#C,B2PSTLOP          Q. ANY MORE REAL PST'S; YES, LOOP.
B2PSTZ0  #                                                   NO, QUIT.
.PSTZZ   ANOP
**************************************************
 SPACE 3
**************************************************
** THIS CODE ESTABLISHES A PSEUDO LOG RECORD WHICH IDENTIFIES THE
*   THE START-TIME AND CPU, ETC..
D#A      EQU   R3
D#B      EQU   R4
D#C      EQU   R5
D#D      EQU   R6
D#E      EQU   R7
D#F      EQU   R8
D#G      EQU   R9
         USING SCD,D#G
         L     D#G,AIBMSCD
         LR    D#E,D#G
         NARSCDF D#E,NARSDA10,KNOWN=SCD
         USING NARSDATA,D#E
         L     D#A,X'10'           PTR TO CVT.
         LR    D#B,D#A
         S     D#B,=A(PFXZZ-PFXAA) PTR TO CVT PREFIX.
         USING PFXAA,D#B
         L     D#C,X'C4'(D#A)      PTR TO SMCA.
         MVC   NARSDSID,00016(D#C) SYSTEM ID.          (EG.  "2A68" )
*                       00024(D#C) SMF VOLSER.
*                         ,35(D#C) SMF X/Y.
         MVC   NARSDSOS(1),116(D#A)     OS/CONFIG.     (FROM CVTDCB)
         MVC   NARSDSIM(6),SSCDOSPS     OS/IMS/CONFIG. (FROM SSCD)
         MVC   NARSDSLV,PFXRELNO        OS/LEVEL.      (FROM CVT PREFX)
         MVC   NARSDSLG,=A(X'000001')   LOG TAPE FORMAT  I.D.
         MVI   NARSDSNR,C'6'
         STCK        NARSDSTK      THE BIG CLOCK ON SOME MERIDIAN.
         TIME  DEC
         STM   R0,R1,NARSDTIM      THE BIG CLOCK ON THE WALL.
*
         MVC   NARSDBGN,NARSDTIM   COPY CURRENT TIMES AS BEGINNING ONE.
******************************
** THIS CODE STORES THE PHYSICAL MACHINE ID AS THE TENTHS SECOND DIGIT.
*        ALPHA         A  B  C
*          HEX         C1 C2 C3
*        TENTHS BYTE   1C 2C 3C
***                                GET MACHINE ID. (EG. "A" FROM 2A68)
         IC    D#F,NARSDSID+1      OBTAIN MACHINE ALPHA. (X'C1,C2,...')
         N     D#F,=A(X'0F')       JUST NUMERIC PART.    (X'01,02,...')
         C     D#F,=A(0009)        Q. BIGGER THAN  9.
         BC    LE,*+4+2              NO, OK;  CONTINUE.
         XR    D#F,D#F               YES, CLEAR TO 0.
         SLL   D#F,4               SHIFT TO L-H BYTE.    (X'10,20,...')
         O     D#F,=A(X'0C')       FORCE TO PACKED FMT.  (X'1C,2C,...')
         STC   D#F,NARSDSOS+1      STO IT.
         B     ENDPART1
 SPACE 3
AIBMSCD  DC    A(0)
ANARSCD  DC    A(0)
IMODR15  DC    A(0)
LOCALSCD DC    CL8'NARSCD00'
PARMSIN  DC    XL16'0'
         ORG   PARMSIN
PARMNSCD DC    A(0)
PARMDLNK DC    A(0)
         ORG
M        DC    CL100' '
MCS40    WTO   'MCS40',ROUTCDE=(2,8,11),MF=L
 SPACE 3
ENDPART1 DC    0Y(0)
****************************************
 SPACE 3
****************************************
         DSECT
PFXAA    DS    0D'0'
PFXRELNO DS    A(0)
PFXZZ    EQU   *
         DROP
***********************************************************
         EJECT
***********************************************************
NARBGN20 CSECT
         USING NARBGN20,R12
**  THIS CODE IS TO READ-IN THE FLAGR STANDARD VALUES.
         PRINT NOGEN
E#R      EQU   R2
PART2    RDJFCB DCBPO
         MVC   BLDLMBR1(8),JFCB00+44
         NIF               JFCB00+86,X'01'   NO MBR PRESENT.
         OI                JFCB00+52,X'08'   NO WRITEBACK.
         MVC               JFCB00+44(8),=CL8' '
         OPEN  (DCBPO,INPUT),TYPE=J
         TM     DCBPO+48,X'10'
         BZ    SKIPRJ
         BLDL   DCBPO,BLDLIST1
         LTR   R15,R15
         BNZ   SKIPRK
         CLOSE  DCBPO
         MVC               JFCB00+44(8),BLDLMBR1 MBR NAME.
         OI                JFCB00+86,X'01'       MBR IS PRESENT.
         OPEN  (DCBPS,INPUT)
         TM    DCBPS+48,X'10'
         BZ    SKIPRL
         GET   DCBPS,GETFLAGR
         L       E#R,AIBMSCD
         NARSCDF E#R,NARSCFRX,KNOWN=SCD FIND WHERE TO MOVE THE DATA.
         MVC   0(08,E#R),GETFLAGR                     MOVE THE DATA.
SKIPRJ   AP    SKIPR,=P'1'
SKIPRK   AP    SKIPR,=P'1'
SKIPRL   AP    SKIPR,=P'1'
         CLOSE  DCBPO
         CLOSE  DCBPS
         B     ENDPART2
****************************************
         SPACE 3
****************************************
GETFLAGR DC    XL80'0'
SKIPR    DC    PL4'0'
DCBPO    DCB   DDNAME=NARFLAGR,DSORG=PO,EXLST=EXLST,MACRF=R
DCBPS    DCB   DDNAME=NARFLAGR,DSORG=PS,EXLST=EXLST,MACRF=GM
EXLST    DC    0A(0),XL1'87',AL3(JFCB00)
JFCB00   DC    XL176'0'
BLDLIST1 DC    H'1',H'076'
BLDLMBR1 DC    CL8' ',XL76'0'
****************************************
         SPACE 3
ENDPART2 DC    0Y(0)
         DROP
***********************************************************
 EJECT
***********************************************************
**  THIS CODE IS TO SET DISP=MOD FOR SEVERAL DATASETS.
NARBGN20 CSECT
         USING NARBGN20,R12
         PRINT NOGEN
PART3    #
LOOPNAM  MVC   LTRDDNAM(8),NAMSHIFT     MOVE NAME INTO DCB.
         MVC   WORD3,NAMSHIFT
         MVI   JFCB3,0
         RDJFCB SYSUDUMP
         CLI   JFCB3,0
         BE    OVRDO
         NI    JFCB3+87,X'3F'
         OI    JFCB3+87,X'80'
         OPEN  (SYSUDUMP,(INPUT)),TYPE=J
         CLOSE (SYSUDUMP)
         ENQ   (SYSDSN,DSN,E,44,SYSTEM)
         ST    R13,SAVEAR3+04    SET HI-SAVE-AREA PTR IN NEW SAVE AREA.
         LA    R13,SAVEAR3                 PT TO NEW SAVE AREA FOR S/R.
         LINK  EP=LTRBLOCK,PARAM=(LTRLIST,LTRDDNAM) S/R WILL FORE&BACK.
         L     R13,SAVEAR3+04                     RESTORE SAVE-SET PTR.
         DEQ   (SYSDSN,DSN,0044,SYSTEM)
OVRDO    EQU   *
         CLI   NAMSHIFT+8,0            Q. WAS THAT THE LAST DD NAME.
         BE    ENDPART3                  YES; QUIT.
         MVC   NAMSHIFT(NAML),NAMSHIFT+8 NO, SHIFT AGAIN.
         B     LOOPNAM                     & LOOP.
******************************
LTRLIST  DC    CL8'*JOBNAME'
WORD2    DC    CL8' '
WORD3    DC    CL8' '
         DC    A(0)
SYSUDUMP DCB   DDNAME=SYSUDUMP,MACRF=E,EXLST=EXLST3
NAMSHIFT DC    CL8'SYSUDUMP',CL8'SYSUSNAP',CL8'SYSABEND',X'00'
NAML     EQU   *-NAMSHIFT
EXLST3   DC    0A(0),XL1'87',AL3(JFCB3)
SYSDSN   DC    CL8'SYSDSN'
DSN      DC    C'NARDUMPS.'
JFCB3    DC    0A(0),XL176'0'
LTRDDNAM EQU   SYSUDUMP+DCBDDNAM-IHADCB
LTRP2    DC    A(0)
SAVEAR3  DC    18A(0)
****************************************
         SPACE 3
ENDPART3 DC    0Y(0)
         DROP
***********************************************************
 EJECT
***********************************************************
**
NARBGN20 CSECT
         USING NARBGN20,R12
**********************************************************************
         SPACE 3
**********************************************************************
         EPILOGUE
   EJECT
         NARSCD
         PRINT NOGEN
         ISCD  SCDBASE=0
         IDLI  PSTBASE=0
         DCBD  DSORG=PS
         END
