USSEDIT  EQU   *
***********************************************************************
*                                                                     *
*        THIS SECTION IS THE FULL SCREEN MESSAGE EDITING ROUTINE.     *
*                                                                     *
*        EACH MESSAGE HAS A SEPARATE ENTRY POINT.  EACH OF            *
*        THESE ENTRY POINTS ESTABLISH THE COMMON BASE, SET            *
*        UP A POINTER TO THE MODIFIED MESSAGE TEXT AREA               *
*        AND THEN BRANCH TO THE COMMON MESSAGE EDITING CODE.          *
*                                                                     *
*        THE COMMON MESSAGE EDITING CODE WILL CHECK FOR THE           *
*        "FIRST TIME" THROUGH THIS CODE.  IF SO, THE "STATIC"         *
*        AREAS OF THE VARIABLE MESSAGE LINE (CPU ID, SMF SYSTEM       *
*        ID, ETC.) ARE FILLED IN IN THE MODEL MESSAGE LINE.           *
*                                                                     *
*        THE MODEL MESSAGE LINE IS MOVED INTO THE FULL SCREEN         *
*        MESSAGE AT THE ADDRESS SET UP BY THE ENTRY TO THE            *
*        MESSAGE EXIT ROUTINE.  THE TERMINAL NAME, DATE, AND TIME     *
*        ARE MOVED INTO THE MESSAGE AND CONTROL IS RETURNED           *
*        TO THE CALLER (ISTINCU6).                                    *
*                                                                     *
*        BY VIRTUE OF THIS ROUTINE MODIFYING MESSAGE TEXT,            *
*        IT IS NOT RE-ENTRANT.  IT IS, HOWEVER, REUSABLE TO           *
*        THE EXTENT THAT THE ONLY PERMANENT MODIFICATIONS             *
*        TO ITSELF THAT ARE DEPENDED UPON ARE THE SETTING OF          *
*        THE CPU ID, SMF ID, ETC. INTO THE MODEL MESSAGE.             *
*                                                                     *
*        SINCE THE ACTUAL MESSAGE TEXT OF THE FULL SCREEN             *
*        MESSAGE IS MODIFIED TO CONTAIN THE TERMINAL ADDRESS          *
*        AND SINCE THERE IS NO VTAM SERIALIZATION (THAT I AM          *
*        AWARE OF) BETWEEN THE "CALL" TO THIS ROUTINE AND             *
*        THE VTAM SEND THAT WILL PLACE IT INTO A VTAM BUFFER,         *
*        IT IS CONCEIVABLE THAT THE WRONG TERMINAL ADDRESS            *
*        COULD BE DISPLAYED ON A TERMINAL.  THIS SHOULD OCCUR         *
*        ONLY IF A VTAM BUFFER SHORTAGE CAUSES THE USSTAB             *
*        PROCESSOR TO WAIT FOR A BUFFER.                              *
*                                                                     *
*        WHEN ENTERED, REGISTER 15 IS THE ADDRESS OF THE              *
*        PARTICULAR MESSAGE EXIT ENTRY POINT, REGISTER 14             *
*        IS THE RETURN ADDRESS TO ISTINCU6,  REGISTER 13              *
*        POINTS TO A STANDARD SAVE AREA, AND REGISTER 0 (ZERO)        *
*        CONTAINS THE ADDRESS OF THE RDTE FOR THE TERMINAL.           *
*                                                                     *
***********************************************************************
         EJECT
MSGXEDIT DS    0D
         USING MSGXEDIT,R12
*
         USING *,R15               TEMPORARY BASE
LOGOEDIT STM   R14,R12,12(R13)     SAVE THE REGISTERS
         L     R12,=A(MSGXEDIT)    LOAD THE COMMON BASE
         DROP  R15                 DUMP THE TEMPORARY BASE
         L     R11,=A(LOGOLINE)    POINT AT MESSAGE AREA
         B     MSGXCOMN            GO TO COMMON PROCESSING
*
         USING *,R15
MSG2EDIT STM   R14,R12,12(R13)
         L     R12,=A(MSGXEDIT)
         DROP  R15
         L     R11,=A(MSG2LINE)
         B     MSGXCOMN
*
         USING *,R15
MSG4EDIT STM   R14,R12,12(R13)
         L     R12,=A(MSGXEDIT)
         DROP  R15
         L     R11,=A(MSG4LINE)
         B     MSGXCOMN
*
         USING *,R15
MSG5EDIT STM   R14,R12,12(R13)
         L     R12,=A(MSGXEDIT)
         DROP  R15
         L     R11,=A(MSG5LINE)
         B     MSGXCOMN
*
         USING *,R15
MSG7EDIT STM   R14,R12,12(R13)
         L     R12,=A(MSGXEDIT)
         DROP  R15
         L     R11,=A(MSG7LINE)
         B     MSGXCOMN
*
         EJECT
MSGXCOMN DS    0H
         LA    R10,MODELINE        LOAD THE ADDRESS OF THE MODEL
         USING MODELINE,R10
*
         CLI   MODLSYS,C'*'        CHECK IF STANDARD PART DONE
         BNE   MSGXSYSD            BRANCH IF SO
         L     R15,16              LOAD THE CVT ADDRESS
         L     R14,CVTSMCA-CVT(,R15)    LOAD THE SMCA ADDRESS
         MVC   MODLSYS,SMCASID-SMCABASE(R14) MOVE THE SYSTEM ID
*
         SL    R15,=F'4'           BACK UP TO RELEASE LEVEL
         MVC   MODLREL(1),1(R15)   MOVE FIRST HALF
         MVC   MODLREL+2(2),2(R15) MOVE SECOND HALF
*
         STIDP MSGXDBLE            GET THE CPU ID
*
         ED    MODLCPU-1(7),MSGXDBLE+1 FILL IN SERIAL NUMBER
         OI    MODLCPU,X'F0'       SET IN THE LEADING ZERO
*
         MVC   MODLMODL,=C'VM  '   SET FOR VM
         CLI   MSGXDBLE,255        CHECK FOR VM
         BE    MSGXSYSD            BRANCH IF SO
*
         CLC   MSGXDBLE+4(2),=X'0580'  Q: IS MODEL TYPE = 580
         BE    MSG580                  A: YES, GO CHECK SERIAL NO
*
         CLC   MSGXDBLE+4(2),=X'0470'  Q: IS MODEL TYPE=470
         BE    MSG470                  A: YES, GO CHECK SERIAL NO
         B     MODLUNKN            MODEL UNKNOWN, LEAVE QUESTION MARKS
*
MSG580   EQU   *
         NI    MSGXDBLE,X'0F'      SET LOW ORDER NIBBLE TO ZERO
*
         MVC   MODLMODL,=CL4'5880' SET FOR A 5880
         CLI   MSGXDBLE,4          CHECK FOR 5880
         BE    MSGXSYSD            BRANCH IF SO
*
         MVC   MODLMODL,=CL4'5870' SET FOR A 5870
         CLI   MSGXDBLE,3          CHECK FOR 5870
         BE    MSGXSYSD            BRANCH IF SO
*
         MVC   MODLMODL,=CL4'5860' SET FOR A 5860
         CLI   MSGXDBLE,2          CHECK FOR 5860
         BE    MSGXSYSD            BRANCH IF SO
*
         MVC   MODLMODL,=CL4'580 ' EXACT TYPE OF 580 UNKNOWN
         B     MSGXSYSD            SET TO 580
*
MSG470   EQU   *
*
         MVC   MODLMODL,=CL4'V/8 ' SET FOR A V/8
         CLI   MSGXDBLE,8          CHECK FOR C/8
         BE    MSGXSYSD            BRANCH IF SO
*
         MVC   MODLMODL,=CL4'V/7 ' SET FOR A V/7
         CLI   MSGXDBLE,7          CHECK FOR A V/7
         BE    MSGXSYSD            BRANCH IF SO
*
         MVC   MODLMODL,=CL4'V/6 ' SET FOR A V/6
         CLI   MSGXDBLE,6          CHECK FOR A V/6
         BE    MSGXSYSD            BRANCH IF SO
         CLI   MSGXDBLE,0          CHECK FOR A V/6 (OLD STYLE)
         BE    MSGXSYSD            BRANCH IF SO
*
         MVC   MODLMODL,=CL4'V/5 ' SET FOR A V/5
         CLI   MSGXDBLE,5          CHECK FOR A V/5
         BE    MSGXSYSD            BRANCH IF SO
*
         MVC   MODLMODL,=CL4' 470' EXACT 470 MODEL NOT DETERMINED
         B     MSGXSYSD            SET DEFAULT TO 470
*
MODLUNKN MVC   MODLMODL,=CL4'????' MODEL UNKNOWN, SET TO QUESTION MARKS
*
         EJECT
MSGXSYSD MVC   0(80,R11),MODELINE  MOVE THE PRESET PART
         DROP  R10                 DROP THE ACTUAL PART
         USING MODELINE,R11        FAKE IT FOR THE REST
*
         LR    R15,R0              MOVE THE RDTE ADDRESS
         MVC   MODLTERM,X'00'(R15) MOVE THE TERMINAL NAME
*
         TIME  DEC                 GET THE DATE AND TIME
         STM   R0,R1,MSGXDBLE
         ED    MODLDATE-1(7),MSGXDBLE+5
         ED    MODLTIME-1(9),MSGXDBLE
         OI    MODLTIME,X'F0'      PROVIDE FOR A LEADING ZERO
*
         LM    R14,R12,12(R13)     RESTORE THE REGISTERS
         BR    R14
*
         EJECT
MSGXDBLE DS    D                   DOUBLE WORD WORK AREA
*
LITERALS LTORG ,
*
MODELINE DS    0CL80
         DC    C'TERMINAL - '
MODLTERM DC    C'UNKNOWN '         TERMINAL NAME
         DC    C'  '
         DC    C'SYSTEM - '
MODLSYS  DC    C'****'             SMF SYSTEM ID
         DC    C'  '
         DC    C'CPU - '
MODLMODL DC    C'????'             CPU MODEL NUMBER
         DC    C' '
MODLCPU  DC    X'212020202020'     CPU SERIAL NUMBER
         DC    C'  '
         DC    C'MVS '
MODLREL  DC    C'X.XX'             MVS RELEASE LEVEL
         DC    C'  '
MODLDATE DC    X'20204B202020'     JULIAN DATE
         DC    C' '
MODLTIME DC    X'21207A20207A2020' TIME
*
