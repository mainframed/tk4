***********************************************************************
*                                                                     *
*                *===================================*                *
*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *
*                *===================================*                *
*                                                                     *
*   Copyright (c) 1990 by Leonard D. Woren.                           *
*   All rights reserved, except as explicitly noted herein.  This     *
*   program may be used, modified, and distributed, provided that     *
*   all of the following conditions are met:                          *
*                                                                     *
*   (1)  This notice and all references to the original author(s)     *
*        are retained forever in all copies and versions of the       *
*        source.                                                      *
*                                                                     *
*   (2)  This program may be distributed via "public domain" mods     *
*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *
*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *
*        Group) tape, etc, etc.  Only versions of this program        *
*        authorized by Leonard D. Woren may be placed on these        *
*        tapes.  Distribution of modified versions of this program,   *
*        via the above named tapes or via any method, is              *
*        specifically prohibited.  (Please see reason mentioned       *
*        below.)                                                      *
*                                                                     *
*   (3)  Permission is specifically NOT given to distribute MODIFIED  *
*        versions of this program.  Modified versions may be used     *
*        only at the site making the mods.  (Please see reason        *
*        mentioned below.)                                            *
*                                                                     *
*   (4)  The only charge which may be made for distribution is to     *
*        recover real costs, such as postage, or creating a tape.     *
*                                                                     *
*   (5)  The only charge for running the program which may be made    *
*        is your normal charge for computer time.                     *
*                                                                     *
*                                                                     *
*   The reason for the restrictions on distribution of modified       *
*   versions is to try to prevent circulation of many different       *
*   versions of the program, each with a few features that aren't     *
*   in any other version.                                             *
*                                                                     *
*   Since everyone will benefit from this, please send all updates    *
*   to me.  (Address below.)  I will try merge them in, if they       *
*   have been made to a reasonably current version of the source,     *
*   and if they are in keeping with the general design of the rest    *
*   of the program.  Mods may be altered by me for this purpose.      *
*   Any such mods which are incorporated into the program will then   *
*   become governed by the restrictions specified here for the whole  *
*   program, with appropriate credit to the contributor.              *
*                                                                     *
*   Although this program has been extensively tested, and is in use  *
*   in a production environment (MVS/ESA release 3.1.3, w/DFP 3.2),   *
*   no guarantee is made of (or responsibility assumed for) correct   *
*   or reliable operation.  I may try to help with problems.  I do    *
*   not assume any responsibility to distribute updates.              *
*                                                                     *
*   CONTACT:                                                          *
*          Leonard D. Woren                                           *
*        snail-mail:                                                  *
*          University of Southern California                          *
*          University Park  Mail Code 0251                            *
*          Los Angeles, CA   90089-0251                               *
*                                                                     *
*        e-mail:                                                      *
*          LDW@USCMVSA.BITNET                                         *
*          LDW@MVSA.USC.EDU                                           *
*          ...!usc!ldw                                                *
*                                                                     *
*          (213) 740-2875 (direct -- 11 am to 7 pm Pacific time)      *
*                                                                     *
*          I prefer electronic mail.  If you call me long distance    *
*          and leave a msg because you didn't get me, there's a good  *
*          chance that I won't call back.  Moral:  don't leave a      *
*          message for me to call you back unless you're in 213,      *
*          818, 714, or 310.  Sorry.                                  *
*                                                                     *
*          SHARE installation code:  USC                              *
*          GUIDE installation code:  OUY                              *
*                                                                     *
***********************************************************************
         EJECT ,
DEX      TITLE 'DEX - A DECIMAL-HEXADECIMAL CALCULATOR'
*---------------------------------------------------------------------*
* UPDATES:                                                            *
*    23JUL90  LDW2 - CHANGE DEFAULT MODE TO HEX                       *
*    14FEB89  LDW1 - FIX FOR ASMH V2                                  *
*    03/22/80 SDM1 - CHANGE 'PREVIOUS CHAR' SYMBOL FROM * TO $        *
*    04/20/79 SDM  - INSTALL FROM MVS USER GROUP                      *
*                    MAKE MANY SMALL CHANGES                          *
*---------------------------------------------------------------------*
DEX      CSECT
         SAVE  (14,12),,DEX_&SYSDATE._&SYSTIME                     LDW1
         LR    BASE,R15
         LA    BASE2,4095(,BASE)
         LA    BASE2,1(,BASE2)
         USING DEX,BASE,BASE2
         LA    R15,REGSAVE
         ST    R15,8(,R13)
         ST    R13,4(,R15)
         LR    R13,R15
         B     START
         SPACE 2
RETURN   L     R13,4(,R13)
         RETURN (14,12),RC=0
         EJECT
*   PUTGET IS CALLED BY:
*        LA    R1,OUTAREA
*        LA    R0,OUTSIZE
*        BAL   LINK,PUTGET
*
*   INPUT DATA LENGTH IS RETURNED IN R1.
*
         SPACE 1
PUTGET   TPUT  (1),(0),R                PUT THE MESSAGE OUT
         SPACE 1
         LA    R1,READINTO              SET INPUT AREA ADDRESS
         LA    R0,L'READINTO            SET AREA LENGTH
         ICM   R1,8,=X'80'              SPECIFY TGET
         TGET  (1),(0),R                GET INPUT
         LTR   R15,R1                   SAVE AND TEST INPUT DATA LEN
         BZR   LINK                     ZERO, DON'T FOOL WITH DATA
         OC    READINTO,BLANKS          CONVERT ALL TO UPPER CASE
         CH    R1,=H'3'                 IS IT THREE CHARS
         BNE   PG01                     NO, DON'T TEST FOR 'END'
         CLC   READINTO(3),=C'END'      DOES THIS END IT
         BE    RETURN                   YES, THE LEAVE NOW
PG01     BCTR  R15,0                    REDUCE LENGTH FOR MOVE
         EX    R15,PGMVC                MOVE DATA TO USER AREA
         BR    LINK                     RETURN TO CALLER
         SPACE 1
PGMVC    MVC   TSTRING(0),READINTO      << EXECUTED >>
         EJECT
START    XR    R1,R1                    SET MY OWN MASK
         SPM   R1
         MVI   TSTRING,X'00'            INDICATE INITIAL NULL INPUT
TLOOP    LA    R1,M2                    WRITE MESSAGE
         LA    R0,L'M2                  AND
         BAL   LINK,PUTGET              READ A LINE
TLOOP0   XC    PRES(8),PRES             INITIALIZE
         MVC   TNAME(8),SYMTBL
         XC    TNAME+8(4),TNAME+8
         MVI   PROP,C'+'
         MVI   EQYET,X'00'
         LA    R3,TSTRING
         ST    R3,TLSTART               SAVE START
         LTR   R1,R1                    TEST LENGTH
         BNP   TLOOP1                   DON'T CHANGE OLD INPUT
READOK   LA    R5,0(R3,R1)
         BCTR  R5,0
         CLI   0(R5),C';'               SEE IF LAST IS ;
         BE    NOSEMC                   IF SO, DO NOT INSERT
         MVI   1(R5),C';'               PUT A ; ON THE END
         LA    R5,1(,R5)                POINT TO NEXT
NOSEMC   MVI   1(R5),X'00'              AND A 00 AFTER THAT
TLOOP1   CLI   0(R3),C' '               LOOK FOR NON-BLANK
         BNE   TLOOP1A
         LA    R3,1(,R3)
         B     TLOOP1
TLOOP1A  CLI   EQYET,X'01'              SEE IF DONE SOMETHING YET
         BE    TLOOP1B                  IF SO, NO CHECK FOR COMMANDS
         CLC   0(5,R3),CDUMP            SEE IF ASKING FOR A DUMP
         BE    DUMP                     IF SO, GEEV EET 2 HEEM
         CLC   0(4,R3),CDEC             SEE IF MODE TO BE DEC
         BE    SETMODED                 IF SO, SET THE MODE
         CLC   0(4,R3),CHEX             SAME FOR HEX MODE
         BE    SETMODEH
         CLC   0(7,R3),CDEL             SEE IF TRYING TO DELETE
         BE    DELETE
         CLC   0(5,R3),CDISP            SEE IF SET DISPLAY MODE
         BE    YDISP
         CLC   0(7,R3),CNODISP          SEE IF SET NO DISPLAY MODE
         BE    NDISP
         CLC   0(5,R3),CSORT            SEE IF WANT A SORT
         BE    SORT
TLOOP1B  CLI   0(R3),X'00'              SEE IF AT END
         BE    TLOOP                    IF DO, GET MORE
TLOOP2   SR    R2,R2                    CLEAR REG 2
         TRT   0(20,R3),TRTBL           EXECUTE THE TRT
*        (R1) -> BYTE, (R2)=RESULT
         BZ    TNONE                    SEE IF FOUND A STOPPER
         CH    R2,=H'1'                 SEE IF NEW LINE
         BE    TNONE                    IF SO, COMPLAIN
         LR    R4,R1                    PUT WHERE BYTE IS IN R4
         SR    R4,R3                    (4) = # OF BYTES - 1
         MVI   TRES,C' '                BLANK RESULT
         MVC   TRES+1(49),TRES
TLOOP3   CLI   0(R1),C' '               LOOK AGAIN FOR NON-BLANK
         BNE   TLOOP4
         LA    R1,1(,R1)
         B     TLOOP3
TLOOP4   MVC   TRES(1),0(R1)            MOVE STOPPING CHAR
         LTR   R4,R4                    SEE IF NULL CHAR STRING
         BNE   TLOOP5
*SDM1    CLI   TRES,C'*'                SEE IF PREV RESULT
*SDM1    BE    TLPREV                   IF SO, SAY SO
         CLI   TRES,C'-'                SEE IF INITIAL -
         BE    TLFZ                     FORCE A ZERO
         CLI   TRES,C'+'                LEADING +?
         BE    TLFZ                     YES, FORCE A ZERO
         CLI   TRES,C';'                ONLY A SEMICOLON?
         BNE   TLMOP                    NO... MISSING OPERAND
*SDM1    B     TLFZ                     ELSE FORCE A 0
*SDM1 TLPREV MVI TRES+4,C'*'            SAY THIS IS A SYMBOL
*SDM1    LA    R1,1(,R1)                POINT 1 TO NEXT CHAR
*SDM1    LA    R4,1                     GIVE 4 A NICE VALUE
*SDM1    B     TLOOP3                   THEN CONTINUE
TLFZ     MVI   TRES+4,C'0'              IF SO, FORCE A 0
         B     TLOOP6
TNONE    LA    R1,TNMESS
         LA    R0,L'TNMESS
         BAL   LINK,PUTGET              NO STOPPERS FOUND - COMPLAIN
         LTR   R1,R1                    SEE IF ANYTHING ENTERED
         BZ    TNONE                    IF NOT, COMPLAIN AGAIN
         B     TLOOP0
TLOOP5   BCTR  R4,0                     CHOP R4 DOWN
         EX    R4,TMVC                  MOVE WITH EXECUTE
TLOOP6   LA    R3,1(,R1)                POINT R3 PAST CHAR
         CLI   TRES,C'='                SEE IF STORE RESULT
         BE    TLEQ
         MVI   EQYET,X'01'              DO NOT ALLOW ANY MORE =
         TRT   0(1,R1),TRTBL            SEE IF OPERAND STOPPED THE SCAN
         BZ    TLNOP                    IF NOT, ERROR
         LA    R1,TRES+4                IF NOT, FIND WHAT THING IS
         LA    R2,SYMTBL                START AT BEGINNING
         BAL   LINK,DEFSYM
         LTR   R1,R1                    SEE IF DEFINED
         BP    TLOK
TLUNDEF  MVC   TLUNDM(8),TRES+4         COMPLAIN ABOUT UNDEFINED
         LA    R1,TLUNDM
         LA    R0,L'TLUNDM
         BAL   LINK,PUTGET
         LTR   R1,R1
         BNZ   TLOOP0
         LA    R2,BLZR                  FAKE A NUMBER
TLOK     CLI   PROP,C'+'                SEE IF +
         BE    TLPL
         CLI   PROP,C'-'
         BE    TLMIN
         CLI   PROP,C'*'
         BE    TLMULT
         CLI   PROP,C'/'
         BNE   TLNOP
         L     R9,8(,R2)                GET DIVISOR
         LTR   R9,R9                    SEE IF ZERO
         BE    ZRDV                     IF SO, COMPLAIN
         CH    R9,=H'-1'                SEE IF DIVIDING BY -1
         BE    DVM1                     IF SO, DO A SUBTRACT
         L     R8,PRES+4                GET PREV RESULT
         SRDA  R8,32                    PROPAGATE SIGN
         D     R8,8(,R2)                DIVIDE BY THIS
         ST    R9,PRES+4                STORE RESULT
         B     NXTSYM                   GO TO NEXT
DVM1     SR    R9,R9                    DIVIDE BY -1
         S     R9,PRES+4                INSTEAD, SUBTRACT
         ST    R9,PRES+4
         B     NXTSYM                   THEN CONTINUE
ZRDV     MVC   ZRDVM(8),TRES+4          ZERO DIVIDE COMPLAINT
         LA    R1,ZRDVM
         LA    R0,L'ZRDVM
         BAL   LINK,PUTGET
         LTR   R1,R1
         BNZ   TLOOP0
         B     NXTSYM
TLNOP    LA    R1,TLNOPM
         LA    R0,L'TLNOPM
         BAL   LINK,PUTGET              MISSING OPERATOR COMPLAINT
         MVI   EQYET,X'01'              SET = OCCURED BIT
         LTR   R1,R1
         BNZ   TLOOP0
         MVI   PROP,C'+'
         BCTR  R3,0
         B     TLOOP1
TLMOP    LA    R3,1(,R1)                MISSING OPERAND COMPLAINT
         LA    R1,TLMOPM
         LA    R0,L'TLMOPM
         BAL   LINK,PUTGET
         MVI   EQYET,X'01'              SET = OCCURED BIT
         LTR   R1,R1
         BNZ   TLOOP0
         B     NXTSYM
TLMULT   L     R9,PRES+4                DO MULTIPLY
         M     R8,8(,R2)                DO IT
         ST    R9,PRES+4
         B     NXTSYM
TLPL     MVC   PRES+4(4),8(R2)          IF PREV WAS PLUS,SET
         B     NXTSYM
TLMIN    SR    R8,R8                    IF -, STORE -
         S     R8,8(,R2)
         ST    R8,PRES+4
         B     NXTSYM
TLEQ     CLI   EQYET,X'01'              FOUND AN =; SEE IF PREVIOUS
         BE    DUPEQ
         MVI   EQYET,X'01'              SET BIT
         MVC   TNAME(8),TRES+4
         ST    R4,TNAME+8
         B     TLOOP1
DUPEQ    LA    R1,DUPEQM
         LA    R0,L'DUPEQM+1
         BAL   LINK,PUTGET              COMPLAIN OF MORE THAN 1 =
         LTR   R1,R1                    SEE IF ANYTHING ENTERED
         BNZ   TLOOP0                   IF SO, RESTART
         B     TLOOP1                   ELSE CONTINUE
DUPEQM   DC    CL23'ILLEGAL OCCURANCE OF ='
NXTSYM   CLI   TRES,C';'                SEE IF END
         BE    NXTSYM1                  IF SO, DO NOT REPLACE OP
         MVC   PROP(1),TRES             NOW SEE IF ADD TO BIG TERM
         CLI   TRES,C'*'                IS NEXT OP * OR /
         BE    TLOOP1                   IF SO, JUST CONTINUE
         CLI   TRES,C'/'
         BE    TLOOP1
NXTSYM1  L     R8,PRES                  IF NOT, ADD TO BIG TOTAL
         A     R8,PRES+4
         ST    R8,PRES
         CLI   TRES,C';'                SEE IF END
         BNE   TLOOP1                   IF NOT, DO MORE
         L     R1,PRES                  GET RESULT
         CLI   EQYET,X'01'              SEE IF STORING
         BNE   NOEQ                     IF NOT, SKIP LOOKUP
         LA    R1,TNAME                 IF SO, FIND WHERE RESULT GOES
         L     R4,TNAME+8
         LA    R2,SYMTBL                START SEARCH AT BEGINNING
         BAL   LINK,DEFSYM              FIND WHERE IT GOES
         L     R1,PRES                  GET TOTAL
         ST    R1,8(,R2)                STORE IT
NOEQ     ST    R1,SYMTBL+8              STORE AT SYMBOL *
         BAL   LINK,CVD                 CONVERT TO DECIMAL
         MVC   TRES(21),0(R1)
         L     R1,TLSTART
         LR    R2,R3
         SR    R2,R1
         CH    R2,=H'75'                SEE IF MOVING TOO MUCH
         BL    NXTSYM2                  IF NOT, OK
         LH    R2,=H'75'                MOVE MAX
         BCTR  R2,0
NXTSYM2  EX    R2,TMVC1                 MOVE THE DESIRED AMOUNT
         MVI   TRES+21,C' '
         MVC   TRES+22(18),TRES+21      CLEAR OUT REST OF LINE
         CLI   0(R3),X'00'              SEE IF AT END
         BE    YESDISP                  IF SO, ALWAYS DISPLAY
         CLI   DISP,C'Y'                SEE IF DISPLAY
         BNE   TLNFNB                   IF NOT, SUPPRESS DISPLAY
YESDISP  LA    R1,TRES
         LA    R0,40(,R2)
         BAL   LINK,PUTGET              PUT IT OUT
         LTR   R1,R1
         BNZ   TLOOP0                   IF NOT, REPROCESS
TLNFNB   CLI   0(R3),C' '               LOOK FOR NON-BLANK
         BNE   TLNFNB1
         LA    R3,1(,R3)
         B     TLNFNB
TLNFNB1  CLI   0(R3),C';'               CHECK FOR NULL STATEMENT
         BNE   TLNFNB2
         LA    R3,1(,R3)
         B     TLNFNB
TLNFNB2  EQU   *
         MVI   PROP,C'+'
         MVI   EQYET,X'00'              NUTTIN YET
         XC    PRES(8),PRES
         MVC   TNAME(8),SYMTBL
         XC    TNAME+8(4),TNAME+8
         ST    R3,TLSTART
         B     TLOOP1
TMVC     MVC   TRES+4(1),0(R3)
TMVC1    MVC   TRES+40(1),0(R1)
*
*        LA    R1,SYMBOL
*        LA    R2,START_OF_SEARCH
*        BAL   LINK,DEFSYM
*
*        (R2) -> LOC OF SYMBOL
*        (R1) = 0 IF SYMBOL NEW, 1 IF OLD, -1 IF COULD NOT FIT,
*               2 IF CONSTANT
*
DEFSYM   ST    LINK,DEFSLINK            SAVE LINKAGE REGISTER
         MVC   DEFDRM(10),0(R1)         MOVE TO ERROR MESSAGE IN CASE
         CLI   0(R1),C'0'               SEE IF NUMBER
         BL    DEFSYM1
         CLI   0(R1),C'9'
         BH    DEFSYM1
         LA    R2,0(R1,R4)
         CLI   0(R2),C'.'               SEE IF ENDS IN A .
         BE    DEFDY                    IF SO, ALWAYS DECIMAL
         CLI   0(R2),C'H'               SEE IF ENDS IN H
         BE    DEFH                     IF SO, ALWAYS HEX
         CLI   MODE,C'D'                SEE WHAT THE MODE IS
         BE    DEFD0                    DECIMAL
         B     DEFMH                    IN HEX MODE - MUST BE HEX
DEFDY    BCTR  R2,0                     CUT 2 DOWN FOR CHECK
         BCTR  R4,0                     CUT 4 DOWN FOR LENGTH
         B     DEFD0                    GO TO CONVERT
DEFMH    LA    R4,1(,R4)                ADD 1 TO LENGTH COUNT
         B     DEFH                     THEN GO TO CONVERT HEX
DEFD0    CH    R4,=H'8'                 SEE IF TOO LONG
         BH    DEFDERR
DEFD01   CLI   0(R2),C'0'               CHECK FOR VALID #
         BL    DEFDERR
         BCTR  R2,0
         CLI   0(R2),C' '
         BNE   DEFD01
         LA    R2,0(R1,R4)
         EX    R4,DEFPACK               PACK  THE NUMBER
         CVB   R2,DEFPK                 CONVERT TO BINARY
DEFD1    ST    R2,DEFPK+8               MAKE CONSTANT LOOKLIKE SYMBOL
         LA    R2,DEFPK
         LA    R1,2
         B     DEFRET
DEFDERR  LA    R1,DEFDRM
         LA    R0,L'DEFDRM
         BAL   LINK,PUTGET              BAD DATA
         LTR   R1,R1
         BNZ   TLOOP0
         SR    R2,R2
         B     DEFD1
DEFH     SR    R0,R0
         LR    R2,R1
DEFH1    BCTR  R4,0
         IC    R1,0(,R2)                GET A CHARACTER
         CLI   0(R2),C'0'               SEE IF 0-N
         BNL   DEFH2                    IF SO, KEEP RIGHT 4 BITS
         CLI   0(R2),C'A'               MAKE SURE A-F
         BL    DEFDERR                  IF NOT, COMPLAIN
         CLI   0(R2),C'F'
         BH    DEFDERR
         LA    R1,9(,R1)                GET RIGHT 4 BITS + 9
DEFH2    SLL   R1,28
         LA    R2,1(,R2)
         SLDL  R0,4
         LTR   R4,R4
         BP    DEFH1
         LR    R2,R0
         B     DEFD1
DEFSYM1  SR    R0,R0                    ZERO REG 0 FOR TEST
DEFSYM2  CLI   0(R2),X'FF'              SEE IF AT END
         BE    DEFEND                   IF SO, SEE IF FOUND ANYTHING
         LTR   R0,R0                    SEEIF FOUND A PREVIOUS PLACE
         BNZ   DEFSYM3                  IF SO, SKIP
         CLI   0(R2),X'00'              SEE IF SPACE OPEN
         BNE   DEFSYM3
         LR    R0,R2                    IF SO, SAVE R2
DEFSYM3  CLC   0(8,R2),0(R1)            SEE IF MATCH
         BE    DEFOLD
         LA    R2,12(,R2)               IF NOT,
         B     DEFSYM2                    TRY AGAIN
DEFEND   LTR   R2,R0                    AT END - SEE IF FOUND SPACE
         BNZ   DEFNEW                   IF SO, OK
DEFATAL  MVC   DEFOVM1,0(1)             COULD NOT FIT
         LA    R1,DEFOVM
         LA    R0,L'DEFOVM
         BAL   LINK,PUTGET              COMPLAIN
         LTR   R1,R1
         BNZ   TLOOP0
         LA    R2,SYMTBL
         B     DEFOLD
DEFNEW   MVC   0(8,R2),0(R1)            NEW - MOVE SYMBOL IN
         XC    8(4,R2),8(R2)            GIVE IT A VALUE OF ZERO
         SR    R1,R1
         B     DEFRET                   RETURN
DEFOLD   LA    R1,1                     OLD SYMBOL
DEFRET   L     LINK,DEFSLINK
         BR    LINK
DEFPACK  PACK  DEFPK(8),0(1,R1)
CVD      CVD   R1,CVDN                  CONVERT TO DECIMAL
         LR    R5,R1
         LA    R2,CVHNR
         MVI   CVHNR,C'0'
         MVC   CVHNR+1(7),CVHNR
CVH1     SR    R4,R4
         LA    R6,CVHTBL
         LTR   R5,R5
         BZ    CVH2
         SLDA  R4,4
         LA    R6,0(R6,R4)
         MVC   0(1,R2),0(R6)
         LA    R2,1(,R2)
         B     CVH1
CVH2     EQU   *
         LR    R2,R1                    SAVE R1
         LA    R1,CVDNR+11              POINT 1 FOR EDMK
         MVC   CVDNR(12),CVDMSK         MOVE EDMK MASK
         EDMK  CVDNR(12),CVDN+2         DO THE EDIT
         LTR   R2,R2                    SEE IF INPUT NEG
         BM    CVDM
CVD1     LA    R1,CVDNR                 POINT 1 TO CVD
         BR    LINK
CVDM     BCTR  R1,0
         MVI   0(R1),C'-'
         B     CVD1
DUMP     LA    R2,SYMTBL+12             2 -> SYMBOL TABLE
DUMP1    LA    R3,SCREEN                3 -> DISPLAY SCREEN
         LA    R4,10 ***                4 COUNTS
DUMP2    CLI   0(R2),X'00'              SEE IF EMPYT PLACE
         BNE   DUMP2A                   IF SO, DO NOT DISPLAY
         LA    R2,12(,R2)               POINT 2 TO NEXT
         B     DUMP2                    TRY AGAIN
DUMP2A   CLI   0(R2),X'FF'
         BE    DUMP3
         MVI   0(R3),C' '               CLEAR OUT A LINE
         MVC   1(39,R3),0(R3)
         L     R1,8(,R2)                GET THE VALUE
         STM   R2,R4,DUMPSV
         BAL   LINK,CVD                 CONVERT TO A STRING
         LM    R2,R4,DUMPSV
         MVC   0(8,R3),0(R2)            MOVE IN NAME
         MVI   9(R3),C'='               AN =
         MVC   11(21,R3),0(R1)          AND THE VALUE
         LA    R3,40(,R3)               SET FOR NEXT
         LA    R2,12(,R2)
         BCT   R4,DUMP2                  6 TIMES PER SCREEN
DUMP3    LA    R4,SCREEN                FIND HOW MUCH TO DISPLAY
         SR    R3,R4
         BZ    TLOOP                    IF NONE, QUIT
         LA    R1,SCREEN
         LA    R0,0(,R3)
         BAL   LINK,PUTGET              PUT IT OUT
         LTR   R1,R1                    SEE IF ANYTHING READ
         BZ    DUMP1                    IF NOT, CONTINUE DUMP
         B     TLOOP0                   IF SO, GO TO PROCESS IT
SETMODED MVI   MODE,C'D'                SET THE MODE TO DECIMAL
         B     TLOOP                    THEN RESTART
SETMODEH MVI   MODE,C'H'                SET THE MODE TO HEX
         B     TLOOP                    THEN RESTART
*
* DELETE - REMOVE SYMBOLS FROM TABLE
*
DELETE   LA    R1,7(,R3)                POINT 1 PAST KEYWORD
DEL1     CLI   0(R1),C' '               SCAN FOR NON-BLANK
         BNE   DEL2
         LA    R1,1(,R1)
         B     DEL1
DEL2     CLI   0(R1),C';'               SEE IF AT END
         BE    TLOOP                    IF SO, QUIT
         LA    R3,1(,R1)                SET3 PAST NON-BLANK
DEL3     CLI   0(R3),X'15'              CHECK FOR END LINE
         BE    TNONE                    IF SO, KILL
         CLI   0(R3),C' '               SCAN FOR BLANK OR ;
         BE    DEL4
         CLI   0(R3),C';'
         BE    DEL4
         LA    R3,1(,R3)                POINT TO NEXT
         B     DEL3                     TRY AGAIN
DEL4     LR    R4,R3
         SR    R4,R1                    PUT LENGTH IN 4
         BCTR  R4,0                     CHANGE TO LENGTH-1
         CH    R4,=H'8'                 SEE IF REG4 TOO BIG
         BL    DEL4A
         LA    R4,7                     IF SO, SET TO 7
DEL4A    MVI   DELERM,C' '              BLANK OUT MESSAGE
         MVC   DELERM+1(7),DELERM
         EX    R4,DELMVC                MOVE TO ERROR MESSAGE IN CASE
         LA    R1,DELERM                POINT 1 NICE
         LA    R2,SYMTBL+12             START PAST PREV RESULT
         BAL   LINK,DEFSYM              FIND WHERE IT IS
         CH    R1,=H'1'                 SEE IF OLD
         BNE   DELERR                   IF NOT, ERROR
         MVC   DELMSG(8),DELERM         SAY  DELETED
         LA    R1,DELMSG
         LA    R0,L'DELMSG
         BAL   LINK,PUTGET
DEL5     MVI   0(R2),X'00'              DELETE SYMBOL
         LTR   R1,R1                    SEE IF READ IN STUFF
         BNZ   TLOOP0
         LR    R1,R3                    RESTORE 1
         B     DEL1                     CONTINUE
DELERR   LR    R0,R1                    SAVE 1 IN 0
         LA    R1,DELERM
         LA    R0,40
         BAL   LINK,PUTGET
         LTR   R0,R0                    SEE IF NEW AND JUST DEFINED
         BZ    DEL5                     IF SO, GO TO DELETE
         LTR   R1,R1                    SEE IF ANYTHING READ
         BNZ   TLOOP0
         LR    R1,R3                    CONTINUE
         B     DEL1
DELMVC   MVC   DELERM(0),0(R1)          <<< EXECUTED >>>
YDISP    MVI   DISP,C'Y'                DISPLAY ALL ANSWERS
         B     TLOOP
NDISP    MVI   DISP,C'N'                DISPLAY ONLY LAST ANSWERS
         B     TLOOP
*
* SORT - SORT THE SYMBOL TABLE
*
SORT     LA    R1,SYMTBL+12             1 -> MAIN FIELD
SORT1    CLI   0(R1),X'00'              SEE IF MAIN FIELD FREE
         BE    SORT4                    IF SO, IGNORE IT
         CLI   0(R1),X'FF'              SEE IF AT END
         BE    DUMP                     IF SO, TERMINATE SORT
         LA    R2,12(,R1)               2 -> FIELD TO BE COMPARED
SORT2    CLI   0(R2),X'00'              SEE IF SECONDARY FIELD FREE
         BE    SORT3                    IF SO, IGNORE IT
         CLI   0(R2),X'FF'              SEE IF AT END
         BE    SORT4                    IF SO, STOP THIS SCAN
         CLC   0(8,R1),0(R2)            WANT 1 <= 2
         BNH   SORT3                    IF OK, SKIP EXCHANGE
SORT2A   MVC   SORTSAVE(12),0(R1)       EXCHANGE
         MVC   0(12,R1),0(R2)
         MVC   0(12,R2),SORTSAVE
SORT3    LA    R2,12(,R2)               POINT 2 TO NEXT ENTRY
         B     SORT2                    CONTINUE SCAN
SORT4    LA    R1,12(,R1)               IF SO, POINT 1 TO NEXT
         B     SORT1                    THEN CONTINUE
         EJECT
         LTORG
REGSAVE  DC    9D'0'
DEFSLINK DC    A(0)
TLNOPM   DC    CL17'MISSING OPERATOR'
TLMOPM   DC    C'MISSING OPERAND'
TNMESS   DC    C'INVALID DATA - PLEASE  RE-ENTER'
M2       DC    C'ENTER EQUATION(S) OR ''END'''
CVDMSK   DC    X'402020202020202020202120'
CDUMP    DC    CL5'/DUMP'
CDEC     DC    CL4'/DEC'
CHEX     DC    CL4'/HEX'
CDEL     DC    CL7'/DELETE'
CDISP    DC    CL5'/DISP'
CNODISP  DC    CL7'/NODISP'
CSORT    DC    CL5'/SORT'
ZRDVM    DC    CL31'         = 0; DIVIDE SUPPRESSED'
PROP     DC    C'+'
PRES     DC    2F'0'
         DC    CL4' '
TNAME    DC    CL12' '
BLZR     DC    0F'0'
         DC    CL8'0'
         DC    2F'0'
EQYET    DC    X'00'
DISP     DC    C'Y'                     DISPLAY FLAG
         DC    0F'0'
BLANKS   DC    CL256' '
TSTRING  DS    CL256' '
TRES     DC    CL250' '
TRTBL    DC    XL256'00'
         ORG   TRTBL+X'00'
         DC    X'6A'
         ORG   TRTBL+X'01'
         DC    C'%'
         ORG   TRTBL+X'15'
         DC    X'01'
         ORG   TRTBL+C' '
         DC    C' '
         ORG   TRTBL+C'+'
         DC    C'+'
         ORG   TRTBL+X'55'
         DC    X'01'
         ORG   TRTBL+C'*'
         DC    C'*'
         ORG   TRTBL+C';'
         DC    C';'
         ORG   TRTBL+C'-'
         DC    C'-'
         ORG   TRTBL+C'/'
         DC    C'/'
         ORG   TRTBL+C'='
         DC    C'='
         ORG
TLSTART  DC    F'0'
DEFDRM   DC    CL30'           INVALID; 0 ASSUMED'
DEFOVM   DC    CL23'SYMBOL TABLE OVERFLOW; XXXXXXXX'
DEFOVM1  EQU   *-8,8
DELERM   DC    CL9' '
         DC    CL31'NOT PREVIOUSLY DEFINED - ERROR'
DELMSG   DC    C'XXXXXXXX DELETED'
SCREEN   DC    11CL40' '
READINTO DC    CL255' '                 PLACE TO READ INTO
DUMPSV   DC    3F'0'
         DC    0F'0'
*SDM1 SYMTBL DC CL8'*'
SYMTBL   DC    CL8'$'                                              SDM1
         DC    223F'0'
         DC    4X'FF'
DEFPK    DC    2D'0'
CVHTBL   DC    C'0123456789ABCDEF'
CVDN     DC    2D'0'
CVHN     DC    2D'0'
CVDNR    DC    CL13' '
CVHNR    DC    CL08' '
TLUNDM   DC    CL30'         UNDEFINED - SET TO 0'
         DC    0F'0'
*MODE    DC    C'D'                     INITIAL MODE - DECIMAL
MODE     DC    C'H'                     INITIAL MODE - HEX         LDW2
SORTSAVE DC    CL12' '
QQSAVE   DC    2F'0'
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
LINK     EQU   10
BASE2    EQU   11
BASE     EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END   DEX
