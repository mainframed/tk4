***********************************************************************
*                                                                     *
*                *===================================*                *
*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *
*                *===================================*                *
*                                                                     *
*   Copyright (c) 1991 by Leonard D. Woren.                           *
*   All rights reserved, except as explicitly noted herein.  This     *
*   program may be used, modified, and distributed, provided that     *
*   all of the following conditions are met:                          *
*                                                                     *
*   (1)  This notice and all references to the original author(s)     *
*        are retained forever in all copies and versions of the       *
*        source.                                                      *
*                                                                     *
*   (2)  This program may be distributed via "public domain" mods     *
*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *
*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *
*        Group) tape, etc, etc.  Only versions of this program        *
*        authorized by Leonard D. Woren may be placed on these        *
*        tapes.  Distribution of modified versions of this program,   *
*        via the above named tapes or via any method, is              *
*        specifically prohibited.  (Please see reason mentioned       *
*        below.)                                                      *
*                                                                     *
*   (3)  Permission is specifically NOT given to distribute MODIFIED  *
*        versions of this program.  Modified versions may be used     *
*        only at the site making the mods.  (Please see reason        *
*        mentioned below.)                                            *
*                                                                     *
*   (4)  The only charge which may be made for distribution is to     *
*        recover real costs, such as postage, or creating a tape.     *
*                                                                     *
*   (5)  The only charge for running the program which may be made    *
*        is your normal charge for computer time.                     *
*                                                                     *
*                                                                     *
*   The reason for the restrictions on distribution of modified       *
*   versions is to try to prevent circulation of many different       *
*   versions of the program, each with a few features that aren't     *
*   in any other version.                                             *
*                                                                     *
*   Since everyone will benefit from this, please send all updates    *
*   to me.  (Address below.)  I will try merge them in, if they       *
*   have been made to a reasonably current version of the source,     *
*   and if they are in keeping with the general design of the rest    *
*   of the program.  Mods may be altered by me for this purpose.      *
*   Any such mods which are incorporated into the program will then   *
*   become governed by the restrictions specified here for the whole  *
*   program, with appropriate credit to the contributor.              *
*                                                                     *
*   Although this program has been extensively tested, and is in use  *
*   in a production environment (MVS/ESA release 3.1.3, w/DFP 3.2),   *
*   no guarantee is made of (or responsibility assumed for) correct   *
*   or reliable operation.  I may try to help with problems.  I do    *
*   not assume any responsibility to distribute updates.              *
*                                                                     *
*   CONTACT:                                                          *
*          Leonard D. Woren                                           *
*        snail-mail:                                                  *
*          University of Southern California                          *
*          University Park  Mail Code 0251                            *
*          Los Angeles, CA   90089-0251                               *
*                                                                     *
*        e-mail:                                                      *
*          LDW@USCMVSA.BITNET                                         *
*          LDW@MVSA.USC.EDU                                           *
*          ...!usc!ldw                                                *
*                                                                     *
*          (213) 740-2875 (direct -- 11 am to 7 pm Pacific time)      *
*                                                                     *
*          I prefer electronic mail.  If you call me long distance    *
*          and leave a msg because you didn't get me, there's a good  *
*          chance that I won't call back.  Moral:  don't leave a      *
*          message for me to call you back unless you're in 213,      *
*          818, 714, or 310.  Sorry.                                  *
*                                                                     *
*          SHARE installation code:  USC                              *
*          GUIDE installation code:  OUY                              *
*                                                                     *
***********************************************************************
         EJECT ,
VMCP     TITLE 'V M C P'
***********************************************************************
***********************************************************************
**                                                                   **
**  PROGRAM NAME:  VMCP                                              **
**                                                                   **
**  AUTHOR:        JEFF JOHNSON (JCJ)                                **
**                                                                   **
**  PURPOSE:       ALLOW SYSTEM PROGRAMMERS TO ISSUE VM COMMANDS     **
**                 FROM TSO                                          **
**                                                                   **
**  Updates:                                                         **
**     12Aug91  U014 LDW - Check for VM/ESA (for reflection)         **
**     01Jan91  U013 LDW - Add "COUPLE" to valid commands table      **
**     14Dec90  U012 LDW - Add "SMSG" to valid commands table        **
**     24May90  U011 LDW - Fix for ASMH V2                           **
**     04/24/86 U010 LDW - Fix turkey bug in update 'U006'           **
**     03/26/86 U009 LDW - Update check for VM/SP, check for VM/XA   **
**     09/24/84 U008 LDW - Add "RESET" to valid commands table       **
**     09/20/84 U007 LDW - Don't use GISUTYP macro                   **
**                       - Fix for VM/SP                             **
**     02/18/81 U006 SDM - Use PCCA for VM test instead of STIDP     **
**                       - Move reply area to page bnd and pgfix it  **
**                       - Use new macros to test systems programmer **
**                       - Move other tests to after environ. test   **
**                       - Allow multiple command mode from batch    **
**     06/17/80 U005 LDW - Fix PSDB sysp check                       **
**                       - Reduce VM/370 reply buff to 4k (from 8k)  **
**     12/05/79 U004 SDM - Eliminate command--> WTO's                **
**     12/02/79 U003 SDM - Eliminate DESC=2 on security WTO's        **
**                       - Eliminate "system programmer's log" WTO   **
**     11/30/79 U002 LDW - Fix operation as a TSO CP                 **
**                       - Change authorized user check method       **
**     11/09/79 U001 LDW - Convert to MVS                            **
**                                                                   **
***********************************************************************
***********************************************************************
         TITLE 'V M C P   ---   MACROS'
         MACRO
&LAB     WTXT  &TEXT
         LCLA  &LEN,&LENC               LOCAL LEN USE
&LENC    SETA  K'&TEXT-2                SET TEXT LENGTH
&LEN     SETA  &LENC-1                  SET EXECUTE LENGTH
&LAB     DC    AL1(&LEN),CL&LENC&TEXT
         SPACE 1
         MEND
         SPACE 4
         MACRO
&LABEL   CTAB  &DATA
         LCLA  &IX,&L
         LCLC  &LAB
&IX      SETA  1                        INIT &SYSLIST INDEX
&LAB     SETC  '&LABEL'                 GET USER'S LABEL IF ANY
.LOOP    AIF   (&IX GT N'&SYSLIST).FINI BIF NO MORE INPUT DATA
&L       SETA  K'&SYSLIST(&IX)          SET LEN OF COMMAND
&LAB     DC    AL1(&L,&SYSLIST(&IX+1)),C'&SYSLIST(&IX)'
&LAB     SETC  ''                       DISABLE LABEL
&IX      SETA  &IX+2                    POINT TO NEXT ENTRY
         AGO   .LOOP                    GO CHECK FOR END
.FINI    DC    X'FF'                    FLAG END OF TABLE
         SPACE 2
         MEND
         TITLE 'V M C P   ---   REGISTER USAGE'
VMCP     CSECT
         SPACE 2
***********************************************************************
***********************************************************************
***********************************************************************
***                                                                 ***
R0       EQU   0                        SYSTEM,WORK                 ***
R1       EQU   1                        SYSTEM,WORK                 ***
R2       EQU   2                        WORK                        ***
R3       EQU   3                        WORK                        ***
R4       EQU   4                        WORK                        ***
R5       EQU   5                        WORK                        ***
R6       EQU   6                        * * *   F R E E   * * *     ***
R7       EQU   7                        * * *   F R E E   * * *     ***
R8       EQU   8                        * * *   F R E E   * * *     ***
R9       EQU   9                        * * *   F R E E   * * *     ***
R10      EQU   10                       PNTR TO INPUT PARM LIST     ***
R11      EQU   11                       BAL REG                     ***
R12      EQU   12                       PROGRAM BASE REGISTER       ***
R13      EQU   13                       SAVEAREA PNTR               ***
R14      EQU   14                       SYSTEM,WORK                 ***
R15      EQU   15                       SYSTEM,WORK                 ***
***                                                                 ***
***********************************************************************
***********************************************************************
***********************************************************************
         TITLE 'V M C P   ---   INITIALIZE'
***********************************************************************
***********************************************************************
**                                                                   **
** SAVE CALLER'S REGISTERS; BUY AND INITIALIZE OUR DYNAMIC WORKAREA. **
**                                                                   **
***********************************************************************
***********************************************************************
         SPACE 2
         SAVE  (14,12),,VMCP_&SYSDATE._&SYSTIME SAVE CALLER'S REGS U011
         LA    R12,0(,R15)              SET BASE REGISTER
         USING VMCP,R12                 SET ADDRESSIBILITY
         USING PSA,0                                               U006
         SPACE 2
         LR    R10,R1                   SAVE PARM PNTR
         GETMAIN RU,LV=WORKL,SP=1,BNDRY=PAGE BUY PROGRAM WORKAREA  U006
         ST    R1,8(,R13)               LSA IN HIS
         ST    R13,4(,R1)               HSA IN MINE
         LA    R13,0(,R1)               SET SAVAREA/WORKAREA PNTR
         USING WORK,R13                 SET ADDRESSIBILITY
         SPACE 2
         XC    WK#XC(WK#XCL),WK#XC      INIT WORK AREA
         XC    WK#TRT(WK#TRTL),WK#TRT   CLEAR TRT TABLE
         MVI   WK#TRT+X'15',X'FF'       SET FOR TRT TO X'15'
         OI    WK#FLAG,WK#FEXIT         DEFAULT SINGLE COMMAND MODE
*U004    MVC   WK#PRE(WTO#MSKL),WTO#MSK SET CMND PREFIX IN WORKAREA
         SPACE 2
         LA    R2,WORK                  -> DYNAMIC WORK AREA       U006
         AH    R2,=Y(WK#VMC-WORK)       -> COMMUNICATION AREA      U006
         ST    R2,WK#VMCA               SAVE COMM. AREA ADDRESS    U006
         TITLE 'V M C P   ---   DETERMINE CALLING ENVIRONMENT'
***********************************************************************
***********************************************************************
**                                                                   **
** DETERMINE OUR ENVIRONMENT. IF RUNNING UNDER TSO, SET UP PUTGET    **
** CONTROL BLOCK DATA IN CASE WE WILL BE DOING MULTIPLE COMMANDS.    **
** IF NOT RUNNING AS A TSO COMMAND PROCESSOR, MAKE THE 'CALL' PARM   **
** DATA LOOK LIKE A COMMAND INPUT BUFFER. VALIDITY CHECK THE MANNER  **
** OF INVOCATION; WE ONLY ALLOW PROCESSING IF RUNNING AS A TSO       **
** PROCESS UNDER A USER WITH THE SYSTEM PROGRAMMER BIT IN THE PSCB   **
** OR AS A SYSTEM TASK.                                              **
**                                                                   **
** REGISTER USE: R0  - WORK                                          **
**               R1  - WORK                                          **
**               R2  - WORK                                          **
**               R10 - INPUT PARAMETER ADDR                          **
**               R14 - WORK                                          **
**               R15 - WORK                                          **
**                                                                   **
***********************************************************************
***********************************************************************
         SPACE 2
         L     R14,PSATOLD              -> TCB                     U006
         L     R15,PSAAOLD              -> ASCB                    U006
         L     R15,ASCBCSCB-ASCB(,R15)  -> CSCB                    U002
         CLI   CHTRKID-CSCB(R15),1      TSO TASK?                  U002
         BNE   ENV#SYST                 NO - CHECK SYSTEM TASK     U002
         SPACE 2
         OI    WK#FLAG,WK#FTSO          SAY A TSO TASK
         L     R15,TCBJSCB-TCB(,R14)    TCB.JSCB                   U002
*U004    MVC   WK#PRE+4+7(4),=C'TSO/'   REPLACE 'COMMAND-->' WITH...
         L     R15,JSCBPSCB-IEZJSCB(,R15) JSCB.PSCB
*U004    MVC   WK#PRE+4+7+4(3),PSCBUSER-PSCB(R15) 'TSO/UID-->'
         MVC   WK#IOPL+IOPLUPT+1-IOPL(3),PSCBUPT+1-PSCB(R15) UPT ADDR
         L     R1,PSCBRLGB-PSCB(,R15)   PSCB.RLGB
         MVC   WK#IOPL+IOPLECT+1-IOPL(3),RLGBECT+1-RLGB(R1)        U002
         SPACE 1
*U007    GISUTYP (SYSPGMR,FAIL,ENV#ERRT),   FAIL IF NOT            U006+
               PSCB=(R15)                   SYSTEMS PROGRAMMER     U006
         TM    PSCBATR1-PSCB(R15),PSCBACCT  SYSTEMS PROGRAMMER?    U007
         BZ    ENV#ERRT                 NO - GET OUT               U007
         LA    R0,WK#ECB                PNT TO ATTN ECB
         LA    R1,WK#PGPB               AND PUTGET PARM BLOCK
         LR    R2,R15                   SAVE POSSIBLE PSCB ADDR    U006
         STM   R0,R1,WK#IOPL+IOPLECB-IOPL SET PUTGET IOPL ADDRS
         SPACE 2
         STAX  STAXEXIT,REPLACE=NO,DEFER=NO,USADDR=(R13),              +
               MF=(E,WK#STAX)           SET UP FOR ATTENTIONS
         EJECT
*  ----  CHECK IF RUNNING AS A COMMAND PROCESSOR HERE.
         SPACE 2
         CLM   R2,B'0111',CPPLPSCB+1-CPPL(R10) HAVE A CPPL?        U006
         BNE   ENV#PARM                 BIF IF NOT A CMND PROCESSOR
         SPACE 2
         L     R1,CPPLCBUF-CPPL(,R10)   GET CMND BUFFER ADDR
         LH    R14,0(,R1)               GET BUFFER LENGTH
         LH    R15,2(,R1)               GET OPERAND OFFSET
         SLR   R14,R15                  SUBTRACT COMMAND DATA LENGTH
         LA    R15,4(R1,R15)            POINT PAST COMMAND TEXT
         SLL   R14,16                   SHIFT NEW BUFFER LEN TO HI HALF
         L     R1,WK#VMCA               -> COMMUNICATION AREA      U006
         MVC   4(WK#OPRL-4,R1),0(R15)   TAKE MAX OPERAND LENGTH    U006
         ST    R14,0(,R1)               SET UP BUFFER HWORDS       U006
         B     VM#TEST                  AND CONTINUE
         SPACE 2
*  ----  WE GET HERE WITH ILLEGAL ACCESS BY A TSO USER.
         SPACE 2
ENV#ERRT MVC   WK#WTO(WTO#AC1L),WTO#AC1 MOVE IN WTO MASK
         MVC   WK#WTO+WTO#AC01(3),PSCBUSER-PSCB(R15) ADD USER INITS
         WTO   MF=(E,WK#WTO)            WTO THE OFFENDER'S IDENTITY
         B     EXIT#R16                 EXIT NOW                   U003
         SPACE 2
*  ----  WE GET HERE WITH ILLEGAL ACCESS BY PROBABLE BATCH JOB.
         SPACE 2
ENV#ERRJ MVC   WK#WTO(WTO#AC2L),WTO#AC2 MOVE IN WTO MASK
         MVC   WK#WTO+WTO#AC02(8),0(R14) PROPAGATE JOBNAME
         WTO   MF=(E,WK#WTO)            WTO THE OFFENDER'S IDENTITY
         B     EXIT#R16                 AND EXIT
         SPACE 2
*  ----  CHECK IF RUNNING AS A SYSTEM TASK HERE.
         SPACE 2
ENV#SYST L     R14,TCBTIO-TCB(,R14)     TIOT ADDR FOR JOBNAME      U002
         CLI   CHTRKID-CSCB(R15),2      JOB? (NOT INIT OR TSO)     U002
         BNE   ENV#ERRJ                 NO - FLAG ACCESS ERROR     U002
         SPACE 2
ENV#PARM L     R15,0(,R10)              GET ADDR OF PARMLIST
         LH    R1,0(,R15)               GET PARM LENGTH
         LA    R1,4(,R1)                ADD FOR CONTROL HALFWORDS
         L     R14,WK#VMCA              -> COMMUNICATION AREA      U006
         MVC   4(WK#OPRL-4,R14),2(R15)  MOVE MAX LENGTH DATA       U006
         SLL   R1,16                    SHIFT LENGTH TO HI HALFWORD
         ST    R1,0(,R14)               AND SET UP A FAKE CBUF     U006
         TITLE 'V M C P   ---   CHECK IF RUNNING UNDER VM'
***********************************************************************
***********************************************************************
**                                                                   **
** DETERMINE IF WE ARE RUNNING UNDER VM/370.                         **
** IF NO, TERMINATE; ELSE CONTINUE.                                  **
**                                                                   **
***********************************************************************
***********************************************************************
         SPACE 2
VM#TEST  L     R1,PSAPCCAV              -> PCCA                    U006
         CLC   =C'FF',4(R1)             IS THIS VM?                U006
         LA    R1,ERR#VM                PNT TO ERROR WTO TEXT IN CASE
         BNE   ERR#LOG                  NO - EXIT WITH ERROR
         TITLE 'V M C P   ---   PAGE FIX VM/370 COMMUNICATION AREA'
***********************************************************************
***********************************************************************
**                                                                   **
** PAGE FIX THE VM/370 COMMUNICATION BUFFER SO THAT IT WILL REMAIN   **
** IN STORAGE AS LONG AS WE DO.  LATER WE WILL GET THE LOCAL LOCK    **
** TO ENSURE THAT THE SYSTEM CANNOT SWAP US AND THUS MOVE THE FIXED  **
** PAGE AFTER WE HAVE DETERMINED ITS REAL ADDRESS FOR THE DIAGNOSE   **
** INSTRUCTION.                                                      **
**                                                                   **
** REGISTER USE: R0  - WORK                                          **
**               R1  - WORK; ERROR MESSAGE TEXT                      **
**               R2  - WORK; COMMUNICATION AREA POINTER              **
**               R14 - WORK                                          **
**               R15 - WORK                                          **
**                                                                   **
***********************************************************************
***********************************************************************
         SPACE 2
         L     R2,WK#VMCA               -> COMMUNICATION AREA      U006
         LR    R15,R2                   -> COMMUNICATION AREA      U006
         AH    R15,=Y(WK#VMCL)          -> END OF AREA + 1         U006
         LA    R0,WK#ECB                -> PGFIX ECB               U006
         PGFIX R,A=(2),EA=(15),LONG=Y,ECB=(0)   FIX THE STORAGE    U006
         LTR   R15,R15                  PGFIX COMPLETE?            U006
         BZ    FIX01                    YES, CONTINUE              U006
         LA    R1,ERR#PGFX              ERROR MESSAGE, IN CASE     U006
         CH    R15,=H'8'                PGFIX PROCEEDING?          U006
         BNE   ERR#LOG                  NO, GO DIE                 U006
         WAIT  ECB=WK#ECB               WAIT FOR PGFIX COMPL.      U006
FIX01    MVI   WK#ECB,X'00'             UNPOST THE ECB             U006
         OI    WK#FLAG,WK#FPGFX         INDICATE PGFIX COMPLETION  U006
         TITLE 'V M C P   ---   DETERMINE VM RELEASE LEVEL'
***********************************************************************
***********************************************************************
**                                                                   **
** DETERMINE WHICH VM VERSION WE ARE RUNNING UNDER. RELEASES         **
** PREVIOUS TO 6 DO NOT SUPPORT THE COMMAND RESPONSE BEING RETURNED  **
** IN A VIRTUAL BUFFER AREA. WE ISSUE DIAGNOSE CODE 00 TO DETERMINE  **
** THE RELEASE LEVEL OF THE CURRENT SYSTEM. NOTE THAT THE DIAGNOSE   **
** MAY RETURN INFORMATION ABOUT NESTED VM MACHINES; WE ONLY CARE     **
** ABOUT THE FIRST LEVEL MACHINE.                                    **
**                                                                   **
** REGISTER USE: R1 - ERROR MESSAGE TEXT PNTR                        **
**               R2 - ADDR OF PAGE FIXED STATUS BUFFER AREA          **
**               R3 - DIAGNOSE REG X - REAL ADDRESS OF STATUS AREA   **
**               R4 - DIAGNOSE REG Y - LENGTH OF STATUS BUFFER AREA  **
**                                                                   **
** DIAGNOSE RETURN: REG Y (R4) CONTAINS ITS ORIGINAL VALUE LESS THE  **
**                  NUMBER OF BYTES STORED.                          **
**                                                                   **
***********************************************************************
***********************************************************************
         SPACE 2
         L     R2,WK#VMCA               -> COMMUNICATION AREA      U006
         LA    R2,WK#STAT-WK#VMC(,R2)   -> DIAGNOSE 00 REPLY AREA  U006
         LA    R4,WK#STATL              LENGTH OF AREA             U006
         BAL   R11,PREPDIAG             GO PREPARE ENVIRONMENT     U006
         LRA   R3,0(,R2)                VM INSISTS ON REAL ADDR    U006
         BZ    *+8                      CONTINUE IF OK             U005
         EX    0,*                      DIE IF NOT                 U005
         DC    X'83',X'34',XL2'0000'    ISSUE DIAGNOSE CODE 00     U006
         BAL   R11,ENDDIAG              RESTORE NORMAL ENVIRONMENT U006
         SPACE 2
         SH    R4,=Y(WK#STATL)          GET NEG VALUE/BYTES RETURNED
         LPR   R4,R4                    GEN POSITIVE VALUE/TEST
         LA    R1,ERR#D0                PNT TO ERROR WTO TEXT IN CASE
         BNP   ERR#LOG                  FLAG ERROR IF NO RETURN STATUS
         CLI   8(R2),6                  RELEASE 6 OR GREATER?      U006
         BL    *+8                      NO - CANNOT DO REPLY REFLECTION
         OI    WK#FLAG,WK#FBUF          FLAG REFLECTION ALLOWABLE
*U009    TM    24(R2),X'E0'             VM/SP?                     U007
*U009    BNO   *+8                      NO - CANNOT DO REFLECTION  U007
*U009    OI    WK#FLAG,WK#FBUF          FLAG REFLECTION ALLOWABLE  U007
         CLC   =C'VM/SP',0(R2)          VM/SP?                     U009
         BNE   *+8                      NO - CANNOT DO REFLECTION  U009
         OI    WK#FLAG,WK#FBUF          FLAG REFLECTION ALLOWABLE  U009
         CLC   =C'VM/XA',0(R2)          VM/XA SF?                  U009
         BNE   *+8                      NO - CANNOT DO REFLECTION  U009
         OI    WK#FLAG,WK#FBUF          FLAG REFLECTION ALLOWABLE  U009
         CLC   =C'VM/ESA',0(R2)         VM/ESA?                    U014
         BNE   *+8                      NO - CANNOT DO REFLECTION  U014
         OI    WK#FLAG,WK#FBUF          FLAG REFLECTION ALLOWABLE  U014
         TITLE 'V M C P   ---   VALIDATE THE COMMAND TEXT'
***********************************************************************
***********************************************************************
**                                                                   **
** CHECK THE BUFFER DATA FOR VALIDITY. SKIP PAST LEADING BLANKS,     **
** FOLD TEXT TO UPPER CASE, AND TRUNCATE TRAILING BLANKS. IF THE     **
** FIRST THREE COMMAND CHARS ARE 'END', EXIT TO THE CALLER.          **
**                                                                   **
** REGISTER USE: R14 - BXLE INCREMENT                                **
**               R15 - BXLE END PNTR,COMPUTED COMMAND LENGTH         **
**                R1 - BXLE INDEX                                    **
**                R2 - ADDR OF FIRST COMMAND CHAR                    **
**                R4 - LENGTH OF COMMAND + OPERANDS                  **
**                                                                   **
***********************************************************************
***********************************************************************
         SPACE 2
VM#GO    L     R14,WK#VMCA              -> COMMUNICATION AREA      U006
         LH    R15,0(,R14)              GET BUFFER LENGTH          U006
         SH    R15,=H'4'                SUBTRACT OFF PREFIX LENGTH
         LA    R1,4(,R14)               POINT TO START OF DATA     U006
         BM    VM#BUFE                  BIF SOMETHING FUNNY
         CH    R15,=Y(WK#OPRL-4)        LENGTH WITHIN BOUNDS?
         LA    R14,1                    SET BXLE INCREMENT
         BH    VM#BUFE                  NO - FLAG ERROR
         ALR   R15,R1                   SET BXLE END/LAST BYTE + 1
         MVI   0(R15),C' '              INSURE NO NON-BLANK HIT
         SPACE 1
VM#BUF1  CLI   0(R1),C' '               LEADING BLANK?
         BE    VM#BUF2                  YES - SKIP IT              U006
         CLI   0(R1),X'00'              NO - LEADING NULL?         U006
         BNE   VM#BUF3                  NO - WE HAVE DATA
VM#BUF2  BXLE  R1,R14,VM#BUF1           LOOP TIL WE GET DATA
         SPACE 2
*  ----  WE GET HERE WITH AN EMPTY (OR NULL) INPUT BUFFER.
         TM    WK#FLAG,WK#FEXIT         INITIAL COMMAND?           U006
         BO    VM#PUT                   YES, GO ASK FOR MORE       U006
         B     EXIT#R00                 NO, EXIT NOW               U006
         SPACE 1
VM#BUFE  LA    R1,ERR#BUF               PNT TO ERROR TEXT
         B     ERR#LOG                  AND GO LOG IT/EXIT
         SPACE 1
VM#BUF3  LR    R2,R1                    SAVE ADDR OF FIRST BYTE
VM#BUF4  OI    0(R1),X'40'              FOLD TO UPPER CASE
         BXLE  R1,R14,VM#BUF4           DO REST OF BUFFER
         SPACE 1
         CLC   0(3,R2),=C'END'          TIME TO LEAVE?
         BE    EXIT#R00                 YES - EXIT
         SPACE 1
VM#BUF5  SLR   R15,R14                  DECREMENT END PNTR
         CLI   0(R15),C' '              TRAILING BLANK?
         BE    VM#BUF5                  YES - LOOP
         SPACE 1
         SLR   R15,R2                   GEN CMND LENGTH - 1
         LA    R4,1(,R15)               SET CMND LEN IN PARM REG
         TITLE 'V M C P   ---   ISSUE THE COMMAND VIA DIAGNOSE'
***********************************************************************
***********************************************************************
**                                                                   **
** PASS THE COMMAND TEXT TO VM FOR PROCESSING; WE ISSUE DIAGNOSE     **
** CODE X'08' TO ACCOMPLISH THIS FUNCTION. FOR VM RELEASE 6 AND      **
** ABOVE, CP WILL RETURN THE COMMAND RESPONSE TO A VIRTUAL MACHINE   **
** BUFFER AREA. WE CHECK IF COMMAND RESPONSE REPLY FEEDBACK IS       **
** ALLOWED AND SET THE CALLING REGISTERS APPROPRIATELY.              **
**                                                                   **
** REGISTER USE: R15 - WORK                                          **
**                R2 - DIAGNOSE REG X   - ADDR OF CP COMMAND STRING  **
**                R3 - DIAGNOSE REG X+1 - BUFF FOR COMMAND RESPONSE  **
**                R4 - DIAGNOSE REG Y   - X'FLAG',FL3(CMND LENGTH)   **
**                     FLAGS: X'80'     - CP TO REJECT LINK PASSWORD **
**                            X'40'     - CP TO RETURN COMMAND REPLY **
**                R5 - DIAGNOSE REG Y+1 - LENGTH OF RESPONSE BUFFER  **
**               R11 - BAL REG                                       **
**                                                                   **
***********************************************************************
***********************************************************************
         SPACE 2
         BAL   R11,CMND#CHK             CHECK IF COMMAND EXECUTE WTOR
         B     VM#XCHK                  RET +0 - DO NOT DO COMMAND
         SPACE 1
*U004    MVC   WK#WTO(WTO#MSKL),WK#PRE  INIT WTO PREFIX
*U004    MVC   WK#TXT(WTOL),0(R2)       MAX LEN CMND TO WORK BUFFER
*U004    LA    R15,WTO#MSKL(,R4)        GEN WTO LENGTH
*U004    CH    R4,=Y(WTOL)              COMMAND TOO LONG FOR BUFF?
*U004    BNH   *+12                     BIF COMMAND FITS IN WTO BUFFER
*U004    LA    R15,WTO#MSKL+WTOL        GEN MAX WTO LENGTH
*U004    MVI   WK#WTO+WTO#MSKL+WTOL-1,C'+' FLAG THE OVERFLOW SOMEWHAT
*U004    SPACE 1
*U004    STH   R15,WK#WTO               SET CMND WTO LENGTH
*U004    WTO   MF=(E,WK#WTO)            SAY WHAT WE ARE DOING
         SPACE 1
         TM    WK#FLAG,WK#FBUF          COMMAND RESPONSE TO BUFFER?
         BZ    VM#CMND                  NO - CONTINUE
         SPACE 1
         L     R3,WK#VMCA               ADDR OF REPLY BUFFER       U006
         LH    R5,=Y(WK#VMCL)           LENGTH OF REPLY BUFFER
         O     R4,=XL4'40000000'        TELL CP TO RETURN RESPONSE
         SPACE 2
VM#CMND  BAL   R11,PREPDIAG             GO PREPARE ENVIRONMENT     U006
         LRA   R2,0(,R2)                VM LIKES                   U001
         LRA   R3,0(,R3)                         REAL ADDRESSES    U001
         DC    X'83',X'24',XL2'0008'    ISSUE CP DIAGNOSE
         BALR  R2,0                     SAVE COND CODE IN CASE
         BAL   R11,ENDDIAG              RESTORE NORMAL ENVIRONMENT U006
         TITLE 'V M C P   ---   PROCESS COMMAND RETURN'
***********************************************************************
***********************************************************************
**                                                                   **
** PROCESS THE RETURN FROM THE DIAGNOSE HERE. IF WE ARE RUNNING      **
** UNDER RELEASE 5 OR LOWER, NO COMMAND REPLY FEEDBACK TO OUR        **
** BUFFER HAS BEEN REQUESTED. OTHERWISE, COMMAND REPLY FEEDBACK      **
** HAS BEEN REQUESTED. THE FOLLOWING RETURN STATUS MAY OCCUR:        **
**                                                                   **
** REGISTER USE: R14 - BAL REG                                       **
**               R15 - WORK                                          **
**                R1 - WORK                                          **
**                R2 - DIAGNOSE COND. CODE,WORK                      **
**                R3 - RETURN DATA LINE INDEX REG                    **
**                R4 - VM RETURN STATUS COUNT                        **
**                R5 - VM RETURN COUNT/MAX REPLY TEXT LENGTH         **
**                                                                   **
** NO FEEDBACK RETURN: RY (R4) CONTAINS 0 OR A NUMERIC ERROR MESSAGE **
**                     CODE.                                         **
** FEEDBACK RETURN:    RY (R4) CONTAINS 0 OR A NUMERIC ERROR MESSAGE **
**                     CODE.                                         **
**                     REPLY FIT IN BUFFER: COND CODE = 0            **
**                                          RY+1 (R5) = REPLY CHAR   **
**                                                      COUNT        **
**                     REPLY TOO LARGE:     COND CODE = 1            **
**                                          RY+1 (R5) = COUNT OF     **
**                                                      LOST CHARS   **
**                                                                   **
***********************************************************************
***********************************************************************
         SPACE 2
         LTR   R4,R4                    ALL WENT OK?
         MVC   WK#WTO(WTO#REPL),WTO#REP SET REPLY WTO PREFIX
         BNZ   VM#RERR                  NO - GO LOG ERROR MSG
         SPACE 2
         TM    WK#FLAG,WK#FBUF          COMMAND RESPONSE TO BUFFER?
         BZ    VM#XCHK                  NO - GO CHECK IF DONE
         SPACE 2
*  ----  CHECK RETURN STATUS; LOG MISSING CHARACTERS IF NECESSARY.
         SPACE 2
         SPM   R2                       RESET CONDITION CODE
         BC    8,VM#ECHO                BRANCH IF NO CHARS LOST
         SPACE 1
         LA    R1,WK#WTO                PNT TO TEXT TO WTO
         CVD   R5,WK#DBLW               LOST CHARS TO PACKED
         MVC   WK#WTO+WTO#REPL(17),=C'REPLY CHARS LOST ' ERR MSG PREFIX
         OI    WK#DBLW+7,X'0F'          SET FOR UNPK
         UNPK  WK#WTO+WTO#REPL+17(5),WK#DBLW+5(3) COUNT TO MSG
         LH    R5,=Y(WK#VMCL)           RESET REPLY TEXT LENGTH
         MVI   WK#WTO+1,WTO#REPL+17+5   SET WTO LENGTH
         BAL   R14,WTO#TXT              DO BATCH WTO/TSO TPUT
         SPACE 2
VM#ECHO  L     R2,WK#VMCA               POINT TO START OF DATA     U006
         ALR   R5,R2                    POINT TO LAST CHAR + 1
         SPACE 2
VM#DUMP  XR    R1,R1                    INSURE HI BYTE CLEAR FOR SUB
         CLR   R2,R5                    MORE DATA TO PROCESS?
         LR    R3,R2                    SET NEW SCAN START ADDR
         BNL   VM#XCHK                  NO - GO CHECK IF DONE
         SPACE 2
         TRT   0(WTOL,R3),WK#TRT        SCAN FOR X'15'
         LA    R2,1(,R1)                ASSUME HIT/SET NEW SCAN ADDR
         BZ    VM#MORE                  TOO LONG/MUST FOLD HERE
         SPACE 2
VM#GEN   SLR   R1,R3                    GEN DATA LENGTH
         TM    WK#FLAG,WK#FTSO          TSO CALLER?
         LR    R0,R1                    ASSUME YES/SET TPUT LENGTH
         BZ    VM#WTO                   BIF WTO TO DO
         SPACE 2
         LR    R1,R3                    SET TPUT ADDR
         TPUT  (1),(0),R                TPUT OUT THE RESPONSE
         B     VM#DUMP                  AND CHECK FOR NEXT SEGMENT
         SPACE 2
VM#WTO   MVC   WK#WTO+WTO#REPL(0),0(R3) <<< EXECUTED >>>
         EX    R1,*-6                   MOVE TEXT + 1 CHAR
         LA    R15,WTO#REPL(,R1)        GEN WTO LENGTH
         STH   R15,WK#WTO               SET FOR WTO
         WTO   MF=(E,WK#WTO)            DUMP IT OUT
         B     VM#DUMP                  AND CHECK FOR NEXT SEGMENT
         SPACE 2
VM#MORE  LA    R1,WTOL(,R3)             FAKE OUT A HIT
         LR    R2,R1                    SET RESUME ADDR
         B     VM#GEN                   CONTINUE
         TITLE 'V M C P   ---   PROCESS TSO COMMAND ENTRIES'
***********************************************************************
***********************************************************************
**                                                                   **
** CHECK FOR SINGLE COMMAND MODE (EITHER BATCH OR TSO WITH PARMS);   **
** EXIT TO THE CALLER IF THIS MODE IS IN EFFECT. ELSE ISSUE PUTGET   **
** FOR ANOTHER VM/CP COMMAND. SAVE COMMAND IN OUR WORKAREA, FREE     **
** THE PUTGET BUFFER, AND GO PROCESS THE COMMAND.                    **
**                                                                   **
** REGISTER USE: R0  - SYSTEM, WORK                                  **
**               R1  - SYSTEM, WORK                                  **
**               R2  - WORK, COMMUNICATION AREA ADDRESS              **
**               R3  - WORK                                          **
**               R14 - SYSTEM, WORK                                  **
**               R15 - SYSTEM, WORK                                  **
**                                                                   **
***********************************************************************
***********************************************************************
         SPACE 2
VM#XCHK  TM    WK#FLAG,WK#FEXIT         SINGLE COMMAND MODE?
         BO    EXIT#R00                 YES - EXIT TO CALLER
         SPACE 2
VM#PUT   NI    WK#FLAG,255-WK#FEXIT     KILL OFF SINGLE COMMAND FLAG
         TM    WK#FLAG,WK#FTSO          RUNNING UNDER TSO?         U006
         BNO   VM#WTOR                  NO, USE WTOR               U006
         SPACE 1
         PUTGET OUTPUT=(HERALD,SINGLE,MODE),                           +
               TERMPUT=(ASIS,WAIT,NOHOLD,NOBREAK),TERMGET=(EDIT,WAIT), +
               MF=(E,WK#IOPL)           PROMPT 'VMCP: ' AND GET REPLY
         CH    R15,=H'8'                CHECK MAX ALLOWABLE RC
         BE    EXIT#R00                 EXIT IF ATTN ENTERED
         BH    VM#ERRP                  TPUT ERROR IF PUTGET ERROR
         SPACE 2
         L     R1,WK#PGPB+PGPBIBUF-PGPB GET RETURNED BUFFER ADDR
         LH    R14,0(,R1)               GET BUFFER LENGTH          U010
         LR    R0,R14                   SAVE FOR FREEMAIN          U010
         CH    R14,=H'256'              TOO LONG?                  U010
         BNH   *+8                      NO - OK                    U010
         LH    R14,=H'256'              YES - USE MY MAX           U010
         L     R15,WK#VMCA              -> REPLY BUFFER            U006
         MVI   0(R15),C' '              CLEAR IT JUST FOR LAUGHS   U010
         MVC   1(255,R15),0(R15)        ...                        U010
         BCTR  R14,0                    -1 FOR EX                  U010
         EX    R14,PTGT#MVC             COPY THE REPLY BUFFER      U010
*U010    MVC   0(WK#OPRL,R15),0(R1)     MAX LEN DATA TO OUR BUF    U006
*U010    LH    R0,0(,R1)                GET BUFFER LENGTH
         O     R0,=XL4'01000000'        SET PROPER SUBPOOL
         FREEMAIN R,LV=(0),A=(1)        AND FREE THE BUFFER
         B     VM#GO                    GO PROCESS THIS INPUT
         SPACE 1
PTGT#MVC MVC   0(*-*,R15),0(R1)         << EXECUTED >>             U010
         SPACE 2
VM#ERRP  TPUTX 'PUTGET ERROR'           TELL USER WHAT HAPPENED
         B     EXIT#R16                 AND EXIT
         SPACE 2
VM#WTOR  MVC   WK#WTOR(WTR#CMDL),WTR#CMD  PREPARE COMMAND WTOR     U006
         L     R2,WK#VMCA               -> COMMUNICATION           U006
         LA    R3,4(,R2)                -> COMMAND AREA            U006
         MVC   0(WK#CMDL,R3),SPACES     CLEAR INPUT AREA           U006
         WTOR  ,(3),,WK#ECB,MF=(E,WK#WTOR)                         U006
         WAIT  ECB=WK#ECB                                          U006
         MVI   WK#ECB,X'00'             UNPOST THE ECB             U006
         MVC   0(4,R2),=Y(WK#CMDL+4,0)  SET COMMAND LENGTH         U006
         B     VM#GO                    GO EXECUTE THE COMMAND     U006
         TITLE 'V M C P   ---   PROCESS VM/CP COMMAND ERROR RETURNS'
***********************************************************************
***********************************************************************
**                                                                   **
** WE GET HERE IF VM RETURNS AN ERROR CODE. WTO THE ERROR CODE AND   **
** EXIT IF NOT RUNNING UNDER TSO. OTHERWISE, TPUT THE COMMAND ERROR  **
** CODE TO THE TERMINAL AND GO CHECK FOR ANOTHER COMMAND.            **
**                                                                   **
** REGISTER USE: R14 - BAL REG                                       **
**                R1 - WORK                                          **
**                R4 - VM ERROR CODE                                 **
**                                                                   **
***********************************************************************
***********************************************************************
         SPACE 2
VM#RERR  LA    R1,WK#WTO                POINT TO ERROR WTO
         CVD   R4,WK#DBLW               ERROR CODE TO PACKED
         MVC   WK#WTO+WTO#REPL(14),=C'CP ERROR CODE ' ID THE ERROR
         OI    WK#DBLW+7,X'0F'          FIX FOR UNPK
         UNPK  WK#WTO+WTO#REPL+14(3),WK#DBLW+6(2) MAP CODE TO BUFFER
         MVI   WK#WTO+1,WTO#REPL+14+3   SET WTO LENGTH
         BAL   R14,WTO#TXT              GO TO BATCH WTO/TSO TPUT
         SPACE 2
         B     VM#XCHK                  GO CHECK FOR TERMINATION
         SPACE 1
         TITLE 'V M C P   ---   TERMINATION'
***********************************************************************
***********************************************************************
**                                                                   **
** PROCESS TERMINATIONS HERE. ISSUE ANY REQUIRED ERROR MESSAGES,     **
** CLEAN UP, AND RETURN TO THE CALLER.                               **
**                                                                   **
** REGISTER USE: R14 - WORK                                          **
**                R0 - SYSTEM,WORK                                   **
**                R1 - SYSTEM,WORK                                   **
**                R2 - HOLDS RETURN CODE                             **
**               R11 - BAL REG                                       **
**                                                                   **
***********************************************************************
***********************************************************************
         SPACE 2
EXIT#R00 XR    R2,R2                    SET RC/ALL OK
         SPACE 2
EXIT     TM    WK#FLAG,WK#FPGFX         PAGES FIXED?               U006
         BNO   EXIT01                   NO, THEN DON'T FREE THEM   U006
         L     R1,WK#VMCA               -> COMMUNICATION AREA      U006
         LR    R15,R1                   -> COMMUNICATION AREA      U006
         AH    R15,=Y(WK#VMCL)          -> END OF AREA + 1         U006
         PGFREE R,A=(1),EA=(15),RELEASE=Y   UNFIX THE STORAGE      U006
         NI    WK#FLAG,255-WK#FPGFX     CLEAR FIXED PAGES INDIC.   U006
EXIT01   LA    R1,WORK                  SET ADDR OF AREA TO FREE   U006
         L     R13,4(,R13)              CALLER'S SAVE AREA
         FREEMAIN R,LV=WORKL,SP=1,A=(1) FREE VMCP WORKAREA         U006
         ST    R2,16(,R13)              SET RETCODE FOR RESTORE
         LM    R14,R12,12(R13)          RESTORE CALLER'S REGISTERS
         BR    R14                      RETURN TO CALLER
         SPACE 2
*  ----  WE GET HERE WITH SOME SORT OF ERROR TO BE LOGGED.
         SPACE 2
ERR#LOG  XR    R15,R15                  CLEAR FOR IC
         IC    R15,0(,R1)               GET EXLEN OF ERR TEXT
         MVC   WK#WTO(WTO#ERRL),WTO#ERR SET ERROR MSG PREFIX
         CH    R15,=Y(124+4-WTO#ERRL-1) TEXT TOO LONG?
         MVC   WK#WTO+WTO#ERRL(124+4-WTO#ERRL),1(R1) GET MAX TEXT LEN
         BNH   *+8                      NO - CONTINUE
         LH    R15,=Y(124+4-WTO#ERRL-1) ELSE SET MAX TEXTLEN
         LA    R15,WTO#ERRL+1(,R15)     ADD FOR PREFIX LENGTH/EXLEN
         LA    R1,WK#WTO                PNT TO WTO FOR WTO#TXT
         STH   R15,WK#WTO               SET WTO LENGTH
         BAL   R14,WTO#TXT              GO DO BATCH WTO/TSO TPUT
         SPACE 2
EXIT#R16 LA    R2,16                    ERROR RETCODE
         B     EXIT                     GO EXIT
         TITLE 'V M C P   ---   HANDLE ENVIRONMENT CHANGES'
***********************************************************************
***********************************************************************
**                                                                   **
** THESE ROUTINES ENTER AND LEAVE SUPERVISOR STATE.  AT THE SAME     **
** TIME, THEY ACQUIRE AND RELEASE THE LOCAL LOCK TO PREVENT THE      **
** POSSIBILITY OF ADDRESS SPACE SWAP MOVING THE FIXED PAGES THAT     **
** CONTAIN VM/370 COMMUNICATION AREAS.                               **
**                                                                   **
** REGISTER USE: R0  - WORK                                          **
**               R1  - WORK                                          **
**               R11 - RETURN ADDRESS                                **
**               R14 - WORK                                          **
**               R15 - WORK                                          **
**                                                                   **
***********************************************************************
***********************************************************************
         SPACE 2
PREPDIAG MODESET MODE=SUP,KEY=ZERO      ENTER SUPVR STATE          U006
         SPACE 2
GETLL    SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,  GET LOCAL LOCK    U006+
               REGS=USE,                USE R14 THRU R1            U006+
               RELATED=('DISALLOW ADDRESS SPACE SWAP',FREELL)      U006
         SPACE 2
         L     R14,PSATOLD              -> TCB                     U006
         USING TCB,R14                                             U006
         MODESET EXTKEY=TCB,WORKREG=1   RETURN TO PROBLEM KEY      U006
         DROP  R14                                                 U006
         LA    R1,ERR#GLKL              -> ERROR WTO TEXT          U006
         LTR   R15,R15                  DID WE GET THE LOCK?       U006
         BNZ   ERR#LOG                  NO - EXIT WITH ERROR       U006
         SPACE 2
         BR    R11                      RETURN TO CALLER           U006
         SPACE 4
ENDDIAG  MODESET EXTKEY=ZERO,WORKREG=1  GET ZERO KEY AGAIN         U006
         SPACE 2
FREELL   SETLOCK RELEASE,TYPE=LOCAL,    RELEASE LOCAL LOCK         U006+
               REGS=USE,                USE R14 THRU R1            U006+
               RELATED=('ALLOW ADDRESS SPACE SWAP',GETLL)          U006
         SPACE 2
         LA    R1,ERR#RLKL              -> ERROR WTO TEXT          U006
         LTR   R15,R15                  DID WE RELEASE THE LOCK?   U006
         BNZ   ERR#LOG                  NO - EXIT WITH ERROR       U006
         SPACE 2
         MODESET MODE=PROB,KEY=NZERO    BACK TO PROBLEM STATE      U006
         SPACE 2
         BR    R11                      RETURN TO CALLER           U006
         TITLE 'V M C P   ---   CHECK IF COMMAND EXECUTE WTOR TO DO'
***********************************************************************
***********************************************************************
**                                                                   **
** THIS ROUTINE IS CALLED TO CHECK IF THE CP COMMAND TO BE EXECUTED  **
** IS 'NICE' AND MAY BE INVOKED WITHOUT ASKING THE USER IF HE IS     **
** SURE IF HE WANTS TO DO THIS COMMAND. THE TABLE AT LOCATION        **
** 'CMND#TAB' DEFINES THE 'NICE' COMMANDS WE ALLOW TO BE EXECUTED    **
** WITHOUT A VALIDATION PASS. EACH TABLE ENTRY CONSISTS OF           **
** AL1(FULL-COMMAND-LENGTH),AL1(MINIMUM-ABBREVIATION-LENGTH),        **
** C'COMMAND'.                                                       **
**                                                                   **
** REGISTER USE: R14 - WORK                                          **
**               R15 - WORK                                          **
**                R0 - WORK                                          **
**                R1 - WORK                                          **
**                R2 - INPUT PNTR TO COMMAND/OPERANDS                **
**                R4 - INPUT LENGTH OF COMMAND/OPERANDS              **
**               R11 - RETURN ADDR                                   **
**                                                                   **
** RETURNS: +0 - COMMAND IS TO BE SKIPPED                            **
**          +4 - COMMAND IS TO BE PROCESSED                          **
**                                                                   **
***********************************************************************
***********************************************************************
         SPACE 2
CMND#CHK LR    R15,R2                   SET ADDRESS OF COMMAND
         LA    R0,0(,R4)                CLEAR HI BYTE/SET COMMAND LEN
         SPACE 1
CMND#LP1 CLI   0(R15),C' '              ENDING BLANK?
         BE    CMND#LEN                 YES - GO GEN CMND LENGTH
         LA    R15,1(,R15)              ELSE INCR INDEX PNTR
         BCT   R0,CMND#LP1              BIF MORE TEXT TO CHECK
         SPACE 2
CMND#LEN SLR   R15,R2                   GEN COMMAND LENGTH
         LR    R0,R15                   SAVE CMND LENGTH
         LA    R1,CMND#TAB              PNT TO LEGAL COMMAND TABLE
         BCTR  R15,0                    GEN COMMAND EXLEN
         XR    R14,R14                  CLEAR FOR IC
         SPACE 2
CMND#LP2 CLM   R0,B'0001',0(R1)         USER TEXT TOO LONG?
         IC    R14,0(R1)                GET LENGTH/THIS ENTRY
         BH    CMND#NXT                 BIF USER ENTRY TOO LONG
         CLM   R0,B'0001',1(R1)         USER TEXT TOO SHORT?
         BL    CMND#NXT                 YES - GO CHECK NEXT ENTRY
         CLC   0(0,R2),2(R1)            <<< EXECUTED >>>
         EX    R15,*-6                  USER ENTRY MATCH?
         BE    4(,R11)                  YES - RET +4 WITH CMND LEGAL
         SPACE 1
CMND#NXT LA    R1,1+1(R1,R14)           POINT TO NEXT ENTRY
         CLI   0(R1),X'FF'              END OF TABLE?
         BNE   CMND#LP2                 NO - GO CHECK NEXT ENTRY
         SPACE 2
*  ----  WE GET HERE WITH THE COMMAND NOT IN THE 'NICE' TABLE.
         SPACE 2
         LA    R0,WK#ASK                WTOR REPLY AREA
         LA    R1,WK#ECB                WTOR COMPLETION ECB
         LA    R14,0(,R4)               CLEAR HI/GET CMND TEXT LENGTH
         STM   R0,R1,WK#WTOR            INIT WTOR ADDRESSES
         MVC   WK#WTOR+8(WTR#MSKL),WTR#MSK GET WTOR PREFIX TEXT
         CH    R14,=Y(WTORL)            TEXT FIT?
         MVI   WK#WTOR+0,WK#ASKL        SET WTOR REPLY LENGTH
         MVC   WK#TXTR(WTORL),0(R2)     PROPAGATE MAX TEXT LENGTH
         BNH   *+8                      BIF COMMAND TEXT FITS
         LA    R14,WTORL                ELSE SET MAX POSSIBLE TEXT
         SPACE 1
         LA    R14,WTR#MSKL(,R14)       ADD IN PREFIX LENGTH
         LA    R1,WK#WTOR               PNT TO WTOR TEXT
         STH   R14,WK#WTOR+8            SET WTOR LENGTH
         MVC   WK#ASK(WK#ASKL),SPACES   CLEAR INPUT AREA           U006
         BAL   R14,WTO#TXT              GO HANDLE BATCH/TSO CASE
         SPACE 2
         OC    WK#ASK(3),SPACES         FOLD REPLY TO UPPER CASE
         CLC   WK#ASK(3),=C'YES'        DO THE COMMAND?
         BE    4(,R11)                  YES - RET +4 TO EXEC COMMAND
         SPACE 1
         LA    R1,WTO#SKP               PNT TO COMMAND IGNORED MSG
         BAL   R14,WTO#TXT              DUMP FOR TSO/BATCH
         BR    R11                      RET +0 - COMMAND INGNORED
         TITLE 'V M C P   ---   TSO TPUT/BATCH WTO CHECKS'
***********************************************************************
***********************************************************************
**                                                                   **
** THIS ROUTINE IS PASSED THE ADDRESS OF A WTO OR A WTOR. IT CHECKS  **
** IF WE ARE RUNNING UNDER TSO. IF NOT AND A WTO IS PASSED, THE WTO  **
** IS ISSUED AND THE ROUTINE RETURNS; IF NOT AND A WTOR IS PASSED,   **
** THE ROUTINE ISSUES THE WTOR, WAITS FOR A REPLY, AND RETURNS TO    **
** THE CALLER. IF WE ARE RUNNING UNDER TSO, WTOS ARE CONVERTED TO    **
** TPUTS, THE TPUTS ARE ISSUED, AND THE ROUTINE RETURNS. IF WE       **
** HAVE A TSO/WTOR ENVIRONMENT, THE WTOR TEXT IS CONVERTED TO A      **
** TPUT, THE TPUT IS ISSUED, AND A TGET IS ISSUED FOR THE SAME       **
** BUFFER/LENGTH AS THE WTOR. WHEN THE TGET COMPLETES, THE ROUTINE   **
** RETURNS TO THE CALLER.                                            **
**                                                                   **
** REGISTER USE: R14 - WORK                                          **
**               R15 - WORK                                          **
**                R1 - INPUT WTO/WTOR PNTR,WORK                      **
**                R2 - SAVE PNTR TO WTO/WTOR                         **
**               R11 - RETURN REGISTER                               **
**                                                                   **
** RETURN: +0 - ALWAYS                                               **
**                                                                   **
***********************************************************************
***********************************************************************
         SPACE 2
WTO#TXT  STM   R14,R2,12(R13)           SAVE WORK REGS
         TM    WK#FLAG,WK#FTSO          RUNNING UNDER TSO?
         LR    R2,R1                    SAVE WTO/WTOR ADDR
         BZ    WT#JOB                   NO - GO DO WTO/WTOR
         SPACE 2
         CLI   0(R2),0                  HAVE A WTO HERE?
         LH    R0,08(,R2)               ASSUME WTOR/GET LENGTH
         LA    R1,12+7(,R2)             ASSUME WTOR/GET ADDRESS
         BNZ   *+12                     BIF WTOR TEXT
         LH    R0,00(,R2)               GET WTO LENGTH
         LA    R1,04+7(,R2)             GET WTO ADDR
         SH    R0,=Y(4+7)               SUB FOR HWORD PREFIX,C'VMCP - '
         SPACE 1
         TPUT  (1),(0),R                TPUT THE MSG
         CLI   0(R2),0                  WTO HERE?
         BZ    WT#EXIT                  YES - RETURN
         SPACE 1
         ICM   R0,B'1111',0(R2)         GET AL1(LEN),AL3(REPLY-ADDR)
         SRDL  R0,24                    LEN TO LOW BYTE/ADDR TO R1
         SRL   R1,8                     ADDR TO LOW 3 BYTES
         MVI   0(R1),0                  NEGATE POSSIBLE FAKE REPLY
         O     R1,=XL4'80000000'        INDICATE TGET
         TGET  (1),(0),R                AND DO IT
         BXLE  R15,R15,WT#EXIT          RETURN IF RETCODE OK
         CH    R15,=Y(2*8)              ATTN?
         BE    WT#EXIT                  YES - JUST EXIT
         SPACE 1
         TPUTX 'TGET ERROR'             SAY WHAT WENT WRONG
         LM    R14,R2,12(R13)           RESTORE CALLER'S REGS
         B     EXIT#R16                 AND TERMINATE
         SPACE 2
WT#JOB   WTO   MF=(E,(1))               ISSUE THE WTO/WTOR
         CLI   0(R2),0                  WTO HERE?
         L     R2,4(,R2)                ASSUME NO/GET ECB ADDR
         BE    WT#EXIT                  BIF A WTO/EXIT
         SPACE 1
         WAIT  1,ECB=(2)                WAIT FOR COMPLETION
         MVI   0(R2),0                  UNPOST ECB
         SPACE 2
WT#EXIT  LM    R14,R2,12(R13)           RESTORE CALLER'S REGS
         BR    R14                      RETURN TO CALLER
         TITLE 'V M C P   ---   TSO STAX EXIT'
***********************************************************************
***********************************************************************
**                                                                   **
** PROCESS TSO ATTENTIONS HERE. EXIT IF THE TGET RETCODE IS 8        **
** (INDICATING AN ATTN). ELSE POST TSECB AND RETURN.                 **
**                                                                   **
** REGISTER USE: R14 - RETURN REG AT ENTRY                           **
**               R15 - STAX EXIT RETURN CODE                         **
**                R1 - STAX EXIT PARM LIST PNTR                      **
**                R2 - TAIE PNTR                                     **
**                R3 - HOLDS RETURN ADDR                             **
**                                                                   **
** RETURN: TSO - ALWAYS                                              **
**                                                                   **
***********************************************************************
***********************************************************************
         SPACE 2
STAXEXIT L     R13,8(,R1)               SET PROGRAM WORKAREA ADDR
         XR    R15,R15                  SET EXIT RETURN CODE
         L     R2,0(,R1)                GET TAIE ADDR
         CLI   TAIETGET-TAIE(R2),8      ATTN DURING TGET?
         BER   R14                      YES - RETURN DIRECTLY
         SPACE 2
         LR    R3,R14                   ELSE SAVE RETURN ADDR
         POST  WK#ECB                   WAKE UP THE CP
         XR    R15,R15                  RESET RETURN CODE
         BR    R3                       AND RETURN TO TSO
         TITLE 'V M C P   ---   STATIC DATA'
HERALD   DC    F'1',A(*+4),AL2(10,0),C' VMCP:'   PUTGET PROMPT     U006
*WTO#MSK DC    AL2(0,0),C'VMCP - COMMAND--> ' WTO PREFIX
*WTO#MSKL EQU  *-WTO#MSK                LENGTH OF PREFIX
WTO#REP  DC    AL2(0,0),C'VMCP - REPLY--> ' WTO PREFIX
WTO#REPL EQU   *-WTO#REP                LENGTH OF PREFIX
WTO#ERR  DC    AL2(0,0),C'VMCP - ERROR: ' ERROR WTO PREFIX
WTO#ERRL EQU   *-WTO#ERR                LENGTH OF PREFIX
WTR#CMD  WTOR  'VMCP - ENTER VM/370 COMMAND',,WK#CMDL,MF=L         U006
WTR#CMDL EQU   *-WTR#CMD                                           U006
WTR#MSK  DC    AL2(121+4,0)
         DC    C'VMCP - REPLY ''YES'' TO PROCESS COMMAND --> '
WTR#MSKL EQU   *-WTR#MSK                LENGTH OF PREFIX
SPACES   DC    CL120' '                                            U006
         SPACE 2
ERR#VM   WTXT  'NOT RUNNING UNDER VM'
ERR#PGFX WTXT  'PGFIX SVC FAILED'                                  U006
ERR#GLKL WTXT  'SETLOCK OBTAIN,TYPE=LOCAL FAILED'                  U006
ERR#RLKL WTXT  'SETLOCK RELEASE,TYPE=LOCAL FAILED'                 U006
ERR#D0   WTXT  'DIAGNOSE CODE 00 FAILED'
ERR#BUF  WTXT  'INVALID BUFFER DATA'
WTO#SKP  WTO   'VMCP - COMMAND IGNORED',MF=L
*WTO#LOG WTO 'VMCP - LOG IN SYSTEM PROGRAMMER''S LOG',
*U003          ROUTCDE=(2,9,11),MF=L
WTO#AC1  WTO   'VMCP - INVALID USAGE OF VMCP BY TSO USER XXX',         +
               ROUTCDE=(2,9,11),MF=L                               U003
WTO#AC1L EQU   *-WTO#AC1                LENGTH OF WTO TEXT
WTO#AC01 EQU   4+41                     OFFSET TO TSO USER LOC
WTO#AC2  WTO   'VMCP - INVALID USAGE OF VMCP BY JOB 12345678',         +
               ROUTCDE=(2,9,11),MF=L                               U003
WTO#AC2L EQU   *-WTO#AC2                LENGTH OF WTO TEXT
WTO#AC02 EQU   4+36                     OFFSET TO JOBNAME LOC
         SPACE 2
CMND#TAB CTAB  CHANGE,2,                                               +
               COUPLE,6,                                               +
               CLOSE,1,                                                +
               DISPLAY,1,                                              +
               DUMP,4,                                                 +
               INDICATE,3,                                             +
               MESSAGE,1,                                              +
               MSG,1,                                                  +
               ORDER,3,                                                +
               QUERY,1,                                                +
               RESET,5,                                                +
               SMSG,2,                                                 +
               SPOOL,2,                                                +
               TAG,2
         SPACE 2
         LTORG
         TITLE 'V M C P   ---   PROGRAM WORKAREA'
WORK     DSECT                          WORKAREA
         DS    9D                       SAVEAREA
WK#DBLW  DS    D                        CVD DBLWORD
WK#TRT   DS    (256/8)D                 TRT TABLE/X'15' SCAN
WK#TRTL  EQU   *-WK#TRT                 LENGTH FOR CLEARING
WK#XC    EQU   *                        START OF AREA TO CLEAR
WK#STAX  STAX  STAXEXIT,REPLACE=NO,DEFER=NO,MF=L
WK#VMCA  DS    A                        ADDRESS OF REPLY AREA      U006
WK#FLAG  DS    F                        CONTROL FLAGS
WK#FTSO  EQU   X'80'                    RUNNING AS A TSO TASK
WK#FBUF  EQU   X'40'                    VM SUPPORTS CMND REPLY TO BUF
WK#FEXIT EQU   X'20'                    EXIT AFTER DOING ONE COMMAND
WK#FPGFX EQU   X'10'                                               U006
WK#PGPB  DS    4F                       PUTGET PARM BLOCK
WK#IOPL  DS    4F                       PUTGET I/O BLOCK
WK#ECB   DS    F                        ECB FOR STAX POST
WK#XCL   EQU   *-WK#XC                  LENGTH OF AREA TO CLEAR
*WK#PRE  DS    CL(WTO#MSKL)             WORK BUF FOR CMND WTO PREFIX
         SPACE 1
WK#WTO   DS    0H                       COMMAND/REPLY WTO AREA
*U004    DS    CL(WTO#MSKL)             COMMAND WTO PREFIX
*U004    ORG   WK#WTO                   REDEFINE PREFIX
         DS    CL(WTO#REPL)             REPLY WTO PREFIX
         ORG   ,                        RESET TO LONGEST LENGTH
WTOL     EQU   124+4-(*-WK#WTO)         MAX WTO TEXT SUFFIX
WK#TXT   DS    CL(WTOL),C               WTO BUFFER AREA + OVERFLOW
         SPACE 1
         ORG   WK#WTO                   REUSE WTO AREA FOR WTOR    U006
WK#WTOR  WTOR  'X',WK#ASK,WK#ASKL,WK#ECB,MF=L FOR CMND EXEC REQUEST
         ORG   WK#WTOR                  REDEFINE AREA              U006
         DS    CL(WTR#CMDL)             ROOM FOR COMMAND WTOR      U006
         ORG   WK#WTOR+8                REDEFINE AREA
         DS    CL(WTR#MSKL)             WTOR PREFIX
WTORL    EQU   121+12-(*-WK#WTOR)       MAX WTOR TEXT SUFFIX
WK#TXTR  DS    CL(WTORL),4X,C           WTOR BUFFER + CODES + OVERFLOW
WK#ASK   DS    CL20                     WTOR REPLY AREA            U006
WK#ASKL  EQU   *-WK#ASK                 LENGTH OF WTOR REPLY AREA  U006
         ORG   ,                        GET OUT OF REDEFINE        U006
         SPACE 1
PAGELEN  EQU   4*1024                   DEFINE 4K PAGE LENGTH
         ORG   WORK+(*-WORK+PAGELEN-1)/PAGELEN*PAGELEN  PAGE BNDRY U006
WK#VMC   DS    CL(PAGELEN)              1 PAGE COMMUNICATION AREA  U006
WK#VMCL  EQU   *-WK#VMC                 LENGTH OF REPLY
WK#OPRL  EQU   256                      MAX ALLOWABLE OPERAND LENGTH
WK#STAT  EQU   WK#VMC+WK#OPRL+8         DIAG 00 RETURN (DW ALIGN)  U006
WK#STATL EQU   160                      DIAGNOSE 00 AREA LENGTH    U006
WK#CMDL  EQU   120                      CMD WTOR REPLY LENGTH      U006
         DS    0D                       ALIGN FOR GETMAIN
WORKL    EQU   *-WORK                   LENGTH FOR GETMAIN
         TITLE 'V M C P   ---   SYSTEM  DSECTS'
         PRINT NOGEN
         SPACE 4
         IKJCPPL ,
         SPACE 4
         IKJPSCB ,
         SPACE 1
*U007    GISPSCB ,                                                 U006
         SPACE 4
         IKJIOPL ,
         SPACE 4
         IKJPGPB ,
         SPACE 4
         IKJRLGB ,
         SPACE 4
         IEZJSCB ,
         SPACE 4
         IKJTAIE ,
         SPACE 4
         IKJTCB ,
         SPACE 4
         IHAPSA ,                                                  U006
         SPACE 4
         IHAASCB ,                                                 U002
         SPACE 4
CSCB     DSECT                                                     U002
         IEECHAIN ,                                                U002
         SPACE 4
         END   VMCP
