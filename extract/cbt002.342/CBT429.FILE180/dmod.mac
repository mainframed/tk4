DMOD     TITLE 'DMOD - TSO COMMAND FOR MODIFYING FORMAT 1 DSCB''S '
***********************************************************************
*                                                                     *
*                *===================================*                *
*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *
*                *===================================*                *
*                                                                     *
*   Copyright (c) 1988 by Leonard D. Woren.                           *
*   All rights reserved, except as explicitly noted herein.  This     *
*   program may be used, modified, and distributed, provided that     *
*   all of the following conditions are met:                          *
*                                                                     *
*   (1)  This notice and all references to the original author(s)     *
*        are retained forever in all copies and versions of the       *
*        source.                                                      *
*                                                                     *
*   (2)  This program may be distributed via "public domain" mods     *
*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *
*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *
*        Group) tape, etc, etc.  Only versions of this program        *
*        authorized by Leonard D. Woren may be placed on these        *
*        tapes.  Distribution of modified versions of this program,   *
*        via the above named tapes or via any method, is              *
*        specifically prohibited.                                     *
*                                                                     *
*   (3)  Permission is specifically NOT given to distribute MODIFIED  *
*        versions of this program.  Modified versions may be used     *
*        only at the site making the mods.                            *
*                                                                     *
*   (4)  The only charge which may be made for distribution is to     *
*        recover real costs, such as postage, or creating a tape.     *
*                                                                     *
*   (5)  The only charge for running the program which may be made    *
*        is your normal charge for computer time.                     *
*                                                                     *
*                                                                     *
*   The reason for the restrictions on distribution of modified       *
*   versions is to try to prevent circulation of many different       *
*   versions of the program, each with a few features that aren't     *
*   in any other version.                                             *
*                                                                     *
*   Since everyone will benefit from this, please send all updates    *
*   to me.  (Address below.)  I will try merge them in, if they       *
*   have been made to a reasonably current version of the source,     *
*   and if they are in keeping with the general design of the rest    *
*   of the program.  Mods may be altered by me for this purpose.      *
*   Any such mods which are incorporated into the program will then   *
*   become governed by the restrictions specified here for the whole  *
*   program, with appropriate credit to the contributor.              *
*                                                                     *
*                                                                     *
*                                                                     *
*   Although this program has been extensively tested, and is in use  *
*   in a production environment (MVS/ESA release 3.1, with DFP 3.1),  *
*   no guarantee is made of (or responsibility assumed for) correct   *
*   or reliable operation.  I may try to help with problems.  I do    *
*   not assume any responsibility to distribute updates.              *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*   CONTACT:                                                          *
*          Leonard D. Woren                                           *
*        snail-mail:                                                  *
*          University of Southern California                          *
*          University Park  Mail Code 0251                            *
*          Los Angeles, CA   90089-0251                               *
*                                                                     *
*        e-mail:                                                      *
*          LDW@USCMVSA.BITNET                                         *
*          LDW@MVSA.USC.EDU                                           *
*          ...!usc-oberon!LDW (last resort)                           *
*                                                                     *
*          (213) 743-5391 (direct -- 11 am to 7 pm Pacific time)      *
*          (213) 743-2957 (msgs)                                      *
*                                                                     *
*          I prefer electronic mail.  If you call me long distance    *
*          and leave a msg because you didn't get me, there's a good  *
*          chance that I won't call back.  Moral:  don't leave a      *
*          message for me to call you back unless you're in 213,      *
*          818, or 714.  Sorry.                                       *
*                                                                     *
*                                                                     *
*          SHARE installation code:  USC                              *
*          GUIDE installation code:  OUY                              *
*                                                                     *
***********************************************************************
         EJECT ,
*---------------------------------------------------------------------*
* UPDATES:                                                            *
*   07May91 U019 LDW  Fix for ASM2 fields that moved with V310 & SMS  *
*                     Fix to assemble under ASMH V2                   *
*   25Nov87 U018 SDM  Fix U016 to assemble again w/o ASM2.            *
*   27MAY87 U017 SDM  DO UCB SCAN WITH MVS/SP SERVICE 'IOSVSUCB'      *
*   16MAY87 U016 LDW  FIX BUG                                         *
*                     MAKE ASM2 CONDITIONAL ON &@@ASM2 IN @GLOBALS    *
*                     CHANGE SYS3.DMOD TO &@@DMOD                     *
*   14MAY87 U015 LDW  ADD "CHANGED", "NOCHANGED", "CHKPT", "NOCHKPT"  *
*   11FEB87 U014 LDW  ADD "LMDATE", "LMTIME", "LMID" ASM2 KEYWORDS    *
*                     ADD SECOND BASE REG (ARRGGH)                    *
*   20JAN87 U013 LDW  ADD SUPPORT FOR DSORG(VS)                       *
*   04JUN86 U012 LDW  ADD 'DSSN' KEYWORD                              *
*   02JUL85 U011 LDW  REMOVE ALIAS 'BLOCKS' FROM 'AVBLOCKS'... IT     *
*                        WILL CAUSE TOO MUCH CONFLICT WITH 'BLKSIZE'  *
*                     REFIT 17JUL84 MOD:  ALLOW USE IF BATCH AND      *
*                        REQUESTOR HAS ACCESS TO THE DMOD CONTROL DS  *
*   13JUN85 U010 SDM  ADD ALLOCATION TYPE KEYWORDS                    *
*                     SECONDARY ALLOC IS THREE BYTES LONG, NOT TWO    *
*   20FEB81 U009 SDM  CORRECT DSN PREFIX LOGIC FOR NULL PREFIX        *
*                     FIX FINGER SEQUENCE ERROR IN U008               *
*   12DEC80 U008 LDW  ADD SUPPORT FOR RACF BIT                        *
*                     CHANGE DMOD.PASSWORD TO SYS3.DMOD               *
*                     USE A FEW MORE SYMBOLICS                        *
*   06FEB80 U007 LDW  MARK 'DMOD.PASSWORD' NOT IN USE.                *
*   18JAN80 U006 LDW  ADD SUPPORT FOR "LDATE" AND "SECONDARY" KEYWDS  *
*   25OCT79 U005 SDM  INCLUDE EXTERNALLY ASSEMBLED MODULES HERE       *
*   26OCT79 U004 SDM  CORRECT THE LOGIC FOR DSNAME LISTS              *
*   28AUG79 U003 SDM  DO DISK ADDRESS PARAMETER CORRECTLY             *
*   21AUG79 U002 SDM  ADD PASSWORD TESTS                              *
*   02AUG79 U001 SDM  FIX UP TO RUN AT GIBRALTAR                      *
*---------------------------------------------------------------------*
         SPACE 3
*---------------------------------------------------------------------*
*                                                                     *
*  DMOD MODIFIED FOR OS/VS2 MVS -- ENHANCED VERSION                   *
*                                                                     *
*  DEVELOPED BY --                                                    *
*   PETER H. HAAS                                                     *
*   SENIOR SYSTEMS PROGRAMMER                                         *
*   MELLONICS INFORMATION CENTER                                      *
*   6701 VARIEL AVENUE                                                *
*   CANOGA PARK, CALIFORNIA 91303                                     *
*   TELEPHONE (213) 877-5100                                          *
*                                                                     *
*  ACKNOWLEDGEMENT --                                                 *
*   THIS PROGRAM IS A MODIFICATION OF THE ENHANCED VERSION OF THE     *
*   DMOD PROGRAM DEVELOPED AT MACAUTO BY R. J. STANN.  THROUGH A      *
*   EXCHANGE OF PROGRAMS, MY MVS DMOD COMMAND, WHICH WAS BASED UPON   *
*   THE ORIGINAL VERSION OF THE DMOD COMMAND WHICH SUPPORTED ONLY     *
*   MVT, WAS TRADED FOR THE ENHANCED VERSION OF THE DMOD COMMAND      *
*   WHICH ALSO SUPPORTED ONLY MVT.  MY MVS MODS WERE SUBSEQUENTLY     *
*   INCORPORATED INTO THIS ENHANCED VERSION, RESULTING IN THIS        *
*   PROGRAM.                                                          *
*                                                                     *
*---------------------------------------------------------------------*
         EJECT
         COPY  @GLOBALS                                            U016
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*  THIS PROGRAM WILL MODIFY ANY NON-SPACE RELATED FIELD IN A FORMAT 1 *
*  DSCB.  DUE TO ITS MODE OF OPERATION, DMOD WILL NOT CURRENTLY       *
*  EXECUTE UNDER MVS.                                                 *
*                                                                     *
*  DMOD IS RENTRANT AND REFRESHABLE.                                  *
*                                                                     *
*  OPERATOR AUTHORITY IS REQUIRED TO MODIFY DATASETS OTHER THAN       *
*     YOUR OWN, OR TO USE THE PASSWORD OPERAND.                       *
*                                                                     *
*  FORMAT -                                                           *
*                                                                     *
*    DMOD  'DSLIST' 'OPTIONS'                                         *
*                                                                     *
*  WHERE -                                                            *
*                                                                     *
*    DSLIST  -  LIST OF DATASETS TO ME MODIFIED.                      *
*    OPTIONS -  ANY OR ALL OF THE FOLLOWING FIELDS OF THE FORMAT 1    *
*               DSCB THAT ARE TO BE MODIFIED.                         *
*                                                                     *
*       BLKSIZE(NUMBER) -                                             *
*       LRECL(NUMBER) -                                               *
*       RECFM('FBS', 'VBA', 'U', ETC.) -                              *
*       DSORG('IS', 'ISU', 'DA', 'DAU', 'PO', 'POU', 'PS', OR 'PSU') -*
*       KEYLEN(NUMBER) -                                              *
*       CDATE(JULIAN DATE) -                                          *
*       EDATE(JULIAN DATE) -                                          *
*       LDATE(JULIAN DATE) -                                      U006*
*       SECONDARY(NUMBER) -                                       U006*
*       PASSWORD('R', 'W' OR 'N') -                                   *
*       AVBLOCKS/CYLINDERS/CYLS/TRACKS/TRKS -                     U011*
*       RACF/NORACF -                                             U008*
*       ROUND/NOROUND -                                           U010*
*       DSSN(VALUE) -                                             U012*
          AIF   (&@@ASM2 EQ 0).NOASM2A                                *
*       LMDATE(YYDDD) -                                           U014*
*       LMTIME(HHMM) -                                            U014*
*       LMID(JOBNAME) -                                           U014*
.NOASM2A  ANOP                                                        *
*       CHANGED/NOCHANGED -                                       U015*
*       CHKPT/NOCHKPT -                                           U015*
*       VOLUME(VOLSER FOR UNCATALOGED DATA SETS) -                    *
*       ADDRESS  -  WRITTEN AS IS - RETURNS DSCB ADDRESS              *
*                                                                     *
*  AUTHOR -                                                           *
*                                                                     *
*    RAYMOND J. STANN                                                 *
*    MCDONNELL DOUGLAS AUTOMATION COMPANY                             *
*    MAIL CODE 1-29                                                   *
*    3855 LAKEWOOD BLVD.                                              *
*    LONG BEACH, CA.  90846                                           *
*    3/12/76     (213) 593-4662                                       *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 3
         MACRO
&LABEL   MSG   &MSG
         LCLC  &IHBNX                                              U010
&IHBNX   SETC  'IHB&SYSNDX'                                        U010
DMODMSG  CSECT                                                     U010
&IHBNX   DC    AL2(&IHBNX.E-*,0)                                   U010
         DC    C&MSG
&IHBNX.E EQU   *                                                   U010
&LABEL   EQU   &IHBNX-DMODMSG                                      U010
&SYSECT  CSECT                                                     U010
         MEND
         EJECT
DMOD     CSECT                                                     U001
         USING PSA,0                                               U010
         SAVE  (14,12),,DMOD_&SYSDATE._&SYSTIME   SAVE REGISTERS   U019
         LR    BASE,R15                 SET PRIMARY BASE REGISTER  U001
         USING DMOD,BASE                                           U001
         LA    R11,4095(,BASE)          SET UP SECOND BASE REG     U014
         LA    R11,1(,R11)              ...                        U014
         USING DMOD+4096,R11                                       U014
         LR    R9,R1                    SAVE PARAMETER POINTER     U014
         USING CPPL,R9                                             U014
         GETMAIN R,LV=WORKALEN,SP=1     GET SAVE AND WORK AREA     U001
         ST    R1,8(,R13)               SET FORWARD CHAIN          U001
         ST    R13,4(,R1)               SET BACKWARD CHAIN         U001
         LR    R13,R1                   ESTABLISH PRIMARY SAVE AREAU001
         USING WORKAREA,R13                                        U001
         MVI   STATUS,0                 INITIALIZE STATUS SWITCHES U002
* DON'T TRUST THE CPPL - FIND THE PSCB THROUGH MVS CONTROL BLOCKS
         L     R1,PSATOLD               -> CURRENT TCB             U010
         L     R1,180(,R1)              -> JSCB                    U002
         L     R1,264(,R1)              -> PSCB                    U002
         ST    R1,PSCBADDR              SAVE THE ADDRESS FOR LATER U002
*
*  FILL IN PPL AND PUTLINE IOPL
*
         LA    R15,WKPPL                ADDRESS PPL STORAGE        U001
         USING PPL,R15                                             U001
         LA    R14,WKIOPL               -> PUTLINE IOPL            U001
         USING IOPL,R14                                            U001
         LA    R1,WKDAPL                -> DAIR PARM LIST          U002
         USING DAPL,R1                                             U002
         L     R0,CPPLUPT               -> USER PROFILE TABLE      U001
         ST    R0,PPLUPT                STORE IN PARSE PARAM LIST  U001
         ST    R0,IOPLUPT               STORE IN PUTLINE IOPL      U001
         ST    R0,DAPLUPT               STORE IN DAIR PARAM LIST   U002
         L     R0,CPPLECT               -> ENVIRON CONTROL TABLE   U001
         ST    R0,PPLECT                STORE IN PARSE PARAM LIST  U001
         ST    R0,IOPLECT               STORE IN PUTLINE IOPL      U001
         ST    R0,DAPLECT               STORE IN DAIR PARAM LIST   U002
         LA    R0,ECB                   -> THE ECB                 U001
         ST    R0,PPLECB                STORE IN PARSE PARAM LIST  U001
         ST    R0,IOPLECB               STORE IN PUTLINE IOPL      U001
         ST    R0,DAPLECB               STORE IN DAIR PARAM LIST   U002
         L     R0,PSCBADDR              -> PROTECTED STEP CTL BLK  U002
         ST    R0,DAPLPSCB              STORE IN DAIR PARAM LIST   U002
         L     R0,=A(CMDPCL)            PARSE CONTROL LIST         U001
         ST    R0,PPLPCL                STORE IN PARSE PARAM LIST  U001
         LA    R0,ANSWER                -> ANSWER POINTER          U001
         ST    R0,PPLANS                STORE IN PARSE PARAM LIST  U001
         L     R0,CPPLCBUF              -> COMMAND BUFFER          U001
         ST    R0,PPLCBUF               STORE IN PARSE PARAM LIST  U001
         SR    R0,R0                    ZERO THE                   U001
         ST    R0,ECB                   . ECB                      U001
         ST    R0,PPLUWA                . WORK AREA POINTER        U001
         ST    R0,ANSWER                . PARSE ANSWER POINTER     U001
         ST    R0,PLPARM                . PUTLINE PARM BLOCK       U001
         ST    R0,PLDLEN                . PUTLINE DATA LENGTH      U001
         DROP  R15                                                 U001
         LA    R0,WKDAPB                -> DAIR PARAM BLOCK        U002
         ST    R0,DAPLDAPB              STORE IN DAIR PARAM LIST   U002
         DROP  R1                                                  U002
         LA    R1,PLPARM                -> PUTLINE PARM BLOCK      U001
         ST    R1,IOPLIOPB              STORE IN PUTLINE IOPL      U001
         DROP  R14                                                 U001
*
*  PARSE COMMAND BUFFER
*
         LA    R1,WKPPL                 -> PARSE PARAM LIST        U001
         CALLTSSR EP=IKJPARS            CALL PARSE ROUTINE       P.H.H.
         LTR   R15,R15                  CHECK IF PARSE FAILED (ONLY
         BNZ   RETURN                     POSSIBLE IF NOPROMPT MODE)
         L     R10,ANSWER
         USING IKJPARMD,R10
*
**  FIND FULL DATA SET NAME
*
         LA    R5,P#DSNAME              A(FIRST DSNAME)            U004
NEXTDSN  MVC   SERIAL,SPACES            BLANK OUT VOLSER FIELD
         MVC   DS1DSNAM,SPACES          BALNK OUT DSNAME FIELD
         L     R1,0(,R5)                LOAD A(DSNAME FIELD)
         LH    R2,4(,R5)                LOAD L'DSNAME
         BCTR  R2,0                     DECREMENT LENGTH
         TM    6(R5),X'40'              TEST FOR QUOTES
         BO    MOVENAME                 DSNAME IN QUOTES
*
*  FIND USERID AND COMBINE IT WITH SUPPLIED DSNAME
*
         L     R3,CPPLUPT               UPT ADDR.                P.H.H.
         LA    R3,16(,R3)               UPTPREFX ADDR.           P.H.H.
         MVC   DS1DSNAM(7),0(R3)        MOVE USERID
         XR    R4,R4
         IC    R4,7(,R3)                LOAD L'(NON-BLANK PORTION)
         LTR   R4,R4                    ANY PREFIX?                U009
         BZ    MOVENAME                 NO, THEN DON'T PREFIX IT   U009
         LA    R4,DS1DSNAM(R4)
         MVI   0(R4),C'.'               INSERT QUALIFYING PERIOD
         EX    R2,TSODSN                MOVE DSNAME
         B     TESTAUTH
TSODSN   MVC   1(0,R4),0(R1)            MOVE TSO-TYPE DSNAME
OSDSN    MVC   DS1DSNAM(0),0(R1)        MOVE FULL DSNAME
MOVENAME EX    R2,OSDSN                 MOVE DSNAME
*
**  CHECK FOR AUTHORIZATION
*
TESTAUTH L     R15,PSCBADDR                                        U002
         USING PSCB,R15                                            U002
         CLI   PSCBUSRL,0               FUNNY USERID?              U002
*U011    BE    NOBATCH                  YES, FORGET IT             U002
         BE    TA04                     YES, ALLOW IF KNOWS PSWD   U011
         SR    R1,R1                    CLEAR FOR 'IC'             U002
         IC    R1,PSCBUSRL              GET USERID LENGTH          U002
         BCTR  R1,0                     FOR EX                     U002
         EX    R1,TACLC                 IS PREFIX = USERID?        U002
         BNE   TA01                     NO, BAD STUFF              U002
         LA    R1,DS1DSNAM+1(R1)        POINT TO QUAL. PERIOD      U002
         CLI   0(R1),C'.'               IS IT REALLY A PERIOD?     U002
         BE    TA02                     YES, GOOD STUFF            U002
TA01     TM    PSCBATR1,PSCBCTRL        OPER AUTHORIZATION?        U002
         BNO   NOTAUTH                  NO, TOO BAD FOR HIM        U002
TA02     TM    I#PSWD+6,X'80'           'PASSWORD' SPECIFIED?      U002
         BO    TA03                     YES - SEE IF OPER          U008
         CLI   K#RACF+1,0               RACF/NORACF SPECIFIED?     U008
         BE    FNDVOL                   NOT SPECIFIED              U008
TA03     TM    PSCBATR1,PSCBCTRL        OPER AUTHORIZATION?        U002
         BNO   NAUTHPW                  NO, TOO BAD FOR HIM        U002
         DROP  R15                                                 U002
TA04     CLC   DS1DSNAM(44),DMODPWDS+2  "THAT" DATASET?            U011
         BE    NOMODPW                  YES, FORGET IT             U002
         BAL   R14,DMODPW               TEST PASSWORD              U002
*
**  FIND VOLUME SERIAL NUMBER
*
FNDVOL   TM    I#VOL+6,X'80'            TEST FOR PRESENCE OF PARAMETER
         BZ    CHKCAT
         LH    R1,I#VOL+4               LOAD L'(VOLUME SERIAL)
         L     R2,I#VOL                 LOAD A(VOLUME SERIAL)
         BCTR  R1,0                     DECREMENT
         EX    R1,VOLMOVE               MOVE VOLUME SERIAL NO.
         B     RDDSCB
VOLMOVE  MVC   SERIAL(0),0(R2)          MOVE VOLUME SERIAL NUMBER
*
*  SEARCH CATALOG FOR VOLUME SERIAL NUMBER
*
CHKCAT   BAL   R14,LOOKUP                                          U005
*
**  READ THE DSCB
*
RDDSCB   BAL   R14,RDFMT1               READ THE FMT1 DSCB
*
**  CHANGE DSCB
*
*  CHECK BLKSIZE
*
         TM    I#BLKLEN+6,X'80'         CHECK IF SPECIFIED
         BZ    CHKLRECL                 NOT SPECIFIED
         L     R2,I#BLKLEN              LOAD A(BLKLEN)
         LH    R1,I#BLKLEN+4            LOAD L'BLKLEN)
         BCTR  R1,0                     DECREMENT
         EX    R1,PACK
         CVB   R1,WORK
         C     R1,=F'32760'             VERIFY LENGTH
         BH    BLKERR                   TOO LARGE
         STH   R1,DS1BLKL               STORE BLKSIZE
         OI    STATUS,UPDVTOC           UPDATE VTOC
*
*  CHECK LRECL
*
CHKLRECL TM    I#RECLEN+6,X'80'         CHECK IF SPECIFIED
         BZ    CHKRECFM                 NOT SPECIFIED
         L     R2,I#RECLEN              LOAD A(LRECL)
         LH    R1,I#RECLEN+4            LOAD L'LRECL
         BCTR  R1,0                     DECREMENT
         EX    R1,PACK
         CVB   R1,WORK
         C     R1,=F'32760'             VERIFY LENGTH
         BH    LENERR
         STH   R1,DS1LRECL              STORE NEW LRECL
         OI    STATUS,UPDVTOC           UPDATE VTOC
*
*  CHECK RECFM
*
CHKRECFM TM    I#RECFM+6,X'80'          CHECK IF SPECIFIED
         BZ    CHKKEYL                  NOT SPECIFIED
         L     R2,I#RECFM               LOAD A(RECFM)
         LH    R1,I#RECFM+4             LOAD L'RECFM
         NI    DS1RECFM,X'20'   INITIALIZE FIELD - LEAVE 'T' PARM ALONE
CHKREC1  CLI   0(R2),C'F'              FIND RECORD TYPE
         BE    RECF
         CLI   0(R2),C'V'
         BE    RECV
         CLI   0(R2),C'U'
         BE    RECU
         CLI   0(R2),C'B'               TEST FOR BLOCKING
         BE    RECB
         CLI   0(R2),C'S'          TEST FOR STANDARD BLOCKS OR SPANNING
         BE    RECS
         CLI   0(R2),C'A'               TEST FOR CARRAGE CONTROL
         BE    RECA
         CLI   0(R2),C'M'
         BE    RECM
         B     RECFMERR                 ILLEGAL RECFM CODE
RECF     TM    DS1RECFM,X'C0'           VERIFY NOT PREVIOUSLY SET
         BNZ   RECFMERR                 CODE ALREADY EXISTS
         OI    DS1RECFM,X'80'           SET CODE
         B     RECDECRI
RECV     TM    DS1RECFM,X'C0'           VERIFY NOT PREVIOUSLY SET
         BNZ   RECFMERR                 CODE ALREADY EXISTS
         OI    DS1RECFM,X'40'           SET CODE
         B     RECDECRI
RECU     TM    DS1RECFM,X'D9'       VERIFY ONLY 'T','A', AND/OR 'M' SET
         BNZ   RECFMERR                 CODE ALREADY EXISTS
         OI    DS1RECFM,X'C0'           SET CODE
         B     RECDECRI
RECB     TM    DS1RECFM,X'C0'           VERIFY NOT 'U'
         BO    RECFMERR                 ILLEGAL CODE
         TM    DS1RECFM,X'10'           VERIFY NOT PREVIOUSLY SET
         BO    RECFMERR
         OI    DS1RECFM,X'10'           SET CODE
         B     RECDECRI
RECS     TM    DS1RECFM,X'C0'           VERIFY NOT 'U'
         BO    RECFMERR                 ILLEGAL CODE
         TM    DS1RECFM,X'08'           VERIFY NOT PREVIOUSLY SET
         BO    RECFMERR
         OI    DS1RECFM,X'08'           SET CODE
         B     RECDECRI
RECA     TM    DS1RECFM,X'06'           VERIFY NOT PREVIOUSLY SET
         BNZ   RECFMERR                 CODE ALREADY EXISTS
         OI    DS1RECFM,X'04'           SET CODE
         B     RECDECRI
RECM     TM    DS1RECFM,X'06'           VERIFY NOT PREVIOUSLY SET
         BNZ   RECFMERR                 CODE ALREADY EXISTS
         OI    DS1RECFM,X'02'           SET CODE
RECDECRI LA    R2,1(R2)                 INCREMENT POINTER
         BCT   R1,CHKREC1               LOOP
         TM    DS1RECFM,X'C0'           FINAL VERIFICATION
         BZ    RECFMERR                 RECORD TYPE NOT SET
         OI    STATUS,UPDVTOC           UPDATE VTOC
*
*  CHECK KEYLEN
*
CHKKEYL  TM    I#KEYLEN+6,X'80'         CHECK IF SPECIFIED
         BZ    CHKDSORG                 NOT SPECIFIED
         L     R2,I#KEYLEN              LOAD A(KEYLEN)
         LH    R1,I#KEYLEN+4            LOAD L'KEYLEN
         BCTR  R1,0                     DECREMENT
         EX    R1,PACK
         CVB   R1,WORK
         CH    R1,=H'255'               CHECK FOR MAXIMUM LENGTH
         BH    KEYERR
         STC   R1,DS1KEYL
         OI    STATUS,UPDVTOC           UPDATE VTOC
*
*  CHECK DSORG
*
CHKDSORG TM    I#DSORG+6,X'80'          CHECK IF SPECIFIED
         BZ    CHKPSWRD                 NOT SPECIFIED
         L     R2,I#DSORG               LOAD A(DSORG)
         CLC   0(2,R2),=C'IS'           CHECK TYPES
         BE    DSOIS
         CLC   0(2,R2),=C'PS'
         BE    DSOPS
         CLC   0(2,R2),=C'DA'
         BE    DSODA
         CLC   0(2,R2),=C'PO'
         BE    DSOPO
         CLC   0(2,R2),=C'VS'                                      U013
         BE    DSOVS                                               U013
         B     DSOERR
DSOIS    MVI   DS1DSORG,X'80'
         B     CHKUNMOV
DSOPS    MVI   DS1DSORG,X'40'
         B     CHKUNMOV
DSODA    MVI   DS1DSORG,X'20'
         B     CHKUNMOV
DSOPO    MVI   DS1DSORG,X'02'
         B     CHKUNMOV                                            U013
DSOVS    MVC   DS1DSORG(2),=X'0008'                                U013
CHKUNMOV LH    R1,I#DSORG+4             LOAD L'DSORG
         OI    STATUS,UPDVTOC           UPDATE VTOC
         CH    R1,=H'3'
         BNE   CHKPSWRD
         CLI   2(R2),C'U'               TEST FOR UNMOVEABLE
         BNE   DSOERR
         OI    DS1DSORG,X'01'           SET CODE
*
*  CHECK PASSWORD PROTECTION CHARACTER
*
CHKPSWRD TM    I#PSWD+6,X'80'           CHECK IF SPECIFIED
         BZ    CHKRACF                  NOT SPECIFIED              U008
         OI    STATUS,UPDVTOC           UPDATE VTOC
         L     R2,I#PSWD                LOAD A(PASSWORD PROTECT SYMBOL)
         CLI   0(R2),C'R'               CHECK FOR READ/WRITE PROTECT
         BE    RWPROT                   IT IS
         CLI   0(R2),C'W'               CHECK FOR WRITE ONLY PROTECT
         BE    WPROT                    IT IS
         CLI   0(R2),C'N'               CHECK FOR NO PROTECTION
         BNE   PSWDERR
         NI    DS1DSIND,255-DS1IND10-DS1IND04 REMOVE PASSWORD BITS U008
         B     CHKRACF                                             U008
RWPROT   NI    DS1DSIND,255-DS1IND10-DS1IND04 REMOVE PASSWORD BITS U008
         OI    DS1DSIND,DS1IND10        ADD ONE BACK               U008
         B     CHKRACF                                             U008
WPROT    OI    DS1DSIND,DS1IND10+DS1IND04  ADD BOTH PASSWORD BITS  U009
*
*  CHECK RACF/NORACF KEYWORDS
*
CHKRACF  CLI   K#RACF+1,0               CHECK IF SPECIFIED         U008
         BE    CHKCHG                   NOT SPECIFIED              U015
         OI    STATUS,UPDVTOC           UPDATE VTOC                U008
         CLI   K#RACF+1,1               "RACF"?                    U008
         BNE   *+8                      NO - SKIP                  U008
         OI    DS1DSIND,DS1IND40        YES - SET FLAG             U008
         CLI   K#RACF+1,2               "RACF"?                    U008
         BNE   *+8                      NO - SKIP                  U008
         NI    DS1DSIND,255-DS1IND40    YES - UNSET FLAG           U008
*
*  CHECK CHANGED/NOCHANGED KEYWORDS                                U015
*
CHKCHG   CLI   K#CHANGE+1,0             CHECK IF SPECIFIED         U015
         BE    CHKCHKPT                 NOT SPECIFIED              U015
         OI    STATUS,UPDVTOC           UPDATE VTOC                U015
         CLI   K#CHANGE+1,1             "CHANGED"?                 U015
         BNE   *+8                      NO - SKIP                  U015
         OI    DS1DSIND,DS1DSCHA        YES - SET FLAG             U015
         CLI   K#CHANGE+1,2             "NOCHANGED"?               U015
         BNE   *+8                      NO - SKIP                  U015
         NI    DS1DSIND,255-DS1DSCHA    YES - UNSET FLAG           U015
*
*  CHECK CHKPT/NOCHKPT KEYWORDS                                    U015
*
CHKCHKPT CLI   K#CHKPT+1,0              CHECK IF SPECIFIED         U015
         BE    CHKCDATE                 NOT SPECIFIED              U015
         OI    STATUS,UPDVTOC           UPDATE VTOC                U015
         CLI   K#CHKPT+1,1              "CHKPT"?                   U015
         BNE   *+8                      NO - SKIP                  U015
         OI    DS1DSIND,DS1CHKPT        YES - SET FLAG             U015
         CLI   K#CHKPT+1,2              "NOCHKPT"?                 U015
         BNE   *+8                      NO - SKIP                  U015
         NI    DS1DSIND,255-DS1CHKPT    YES - UNSET FLAG           U015
*
*  CHECK CREATION DATE
*
CHKCDATE TM    I#CDATE+6,X'80'          CHECK IF SPECIFIED
         BZ    CHKEDATE                 NOT SPECIFIED
         OI    STATUS,UPDVTOC           UPDATE VTOC
         L     R2,I#CDATE               LOAD A(CDATE)
         LH    R1,I#CDATE+4             LOAD L'CDATE
         BAL   R3,DATE                  CONVERT DATE
         LTR   R15,R15                  CHECK RETURN
         BNZ   CDATERR
         MVC   DS1CREDT(3),WORK1        STORE CREATION DATE
*
*  CHECK EXPIRATION DATE
*
CHKEDATE TM    I#EDATE+6,X'80'          CHECK IF SPECIFIED
         BZ    CHKLDATE                 NOT SPECIFIED              U006
         OI    STATUS,UPDVTOC           UPDATE VTOC
         L     R2,I#EDATE               LOAD A(EDATE)
         LH    R1,I#EDATE+4             LOAD L'EDATE
         BAL   R3,DATE                  CONVERT DATE
         LTR   R15,R15                  CHECK RETURN
         BNZ   EDATERR
         MVC   DS1EXPDT(3),WORK1        STORE EXPIRATION DATE
*
*  CHECK LAST REFERENCED DATE
*
CHKLDATE TM    I#LDATE+6,X'80'          CHECK IF SPECIFIED         U006
         BZ    CHKLMDAT                 NOT SPECIFIED              U014
         OI    STATUS,UPDVTOC           UPDATE VTOC                U006
         L     R2,I#LDATE               LOAD A(LDATE)              U006
         LH    R1,I#LDATE+4             LOAD L'LDATE               U006
         BAL   R3,DATE                  CONVERT DATE               U006
         LTR   R15,R15                  CHECK RETURN               U006
         BNZ   EDATERR                                             U006
         MVC   DS1REFD(3),WORK1         STORE LAST REF'D DATE      U006
CHKLMDAT EQU   *                                                   U016
          AIF   (&@@ASM2 EQ 0).NOASM2B                             U016
*
*  CHECK LAST MODIFIED DATE (ASM2)                                 U014
*
         TM    I#LMDATE+6,X'80'         CHECK IF SPECIFIED         U014
         BZ    CHKLMTIM                 NOT SPECIFIED              U014
         OI    STATUS,UPDVTOC           UPDATE VTOC                U014
         L     R2,I#LMDATE              LOAD A(LMDATE)             U014
         LH    R1,I#LMDATE+4            LOAD L'LMDATE              U014
         BAL   R3,DATE                  CONVERT DATE               U014
         LA    R1,LMDATMSG              -> MESSAGE, IN CASE        U014
         LTR   R15,R15                  CHECK RETURN               U014
         BNZ   ERRMSG                   BAD - ISSUE ERROR MESSAGE  U014
         MVC   ASM2LMDT(3),WORK1        STORE LAST MOD'D DATE      U014
*
*  CHECK LAST MODIFIED TIME                                        U014
*
CHKLMTIM TM    I#LMTIME+6,X'80'         CHECK IF SPECIFIED         U014
         BZ    CHKLMID                  NOT SPECIFIED              U014
         L     R2,I#LMTIME              LOAD A(LMTIME)             U014
         LH    R15,I#LMTIME+4           LOAD L'LMTIME)             U014
         LA    R1,LMTIMMSG              -> MESSAGE, IN CASE        U014
         CH    R15,=H'4'                CORRECT LENGTH?            U014
         BNE   ERRMSG                   NO - ERROR                 U014
         PACK  WORK(2+1),0(4+1,R2)      HHMM IN UNSIGNED PACKED    U014
         MVC   ASM2LMTM(2),WORK         STORE LAST MOD'D TIME      U014
         OI    STATUS,UPDVTOC           UPDATE VTOC                U014
*
*  CHECK LAST-MODIFIED-BY ID                                       U014
*
CHKLMID  TM    I#LMID+6,X'80'           DSSN SPECIFIED?            U014
         BZ    CHKTYPE                  NOT PRESENT                U014
         OI    STATUS,UPDVTOC           UPDATE VTOC                U014
         MVC   ASM2LMID,=CL8' '         CLEAR THE FIELD            U014
         LH    R1,I#LMID+4              LOAD L'(VALUE)             U014
         L     R2,I#LMID                LOAD A(VALUE)              U014
         BCTR  R1,0                     DECREMENT                  U014
         EX    R1,LMIDMOVE              MOVE LMID VALUE            U014
         B     CHKADDR                  CONTINUE                   U014
LMIDMOVE MVC   ASM2LMID(*-*),0(R2)      << EXECUTED >>             U014
.NOASM2B  ANOP                                                     U016
*
*  CHECK SPACE ALLOCATION TYPE
*
CHKTYPE  CLI   K#TYPE+1,0               SPECIFY ANY KEYWORD?       U010
         BE    CHKROUND                 NO, GO CHECK FOR ROUND     U010
         IC    R1,DS1SCALO              TYPE OF ALLOCATION         U010
         N     R1,=A(JFCBSPAC)          CLR ALL EXCEPT SPACE TYPE  U010
         TM    I#SECND+6,X'80'          ANY SECONDARY SPECIFIED?   U010
         BZ    *+8                      NO, SPACE TYPE OKAY        U010
         LA    R1,JFCBABS               YES, FORCE SIMPLE LOGIC    U010
         SRL   R1,4                     OLD TYPE IN BITS 28-29     U010
         AH    R1,K#TYPE                ADD NEW TYPE IN BITS 30-31 U010
         IC    R1,TYPETBL(R1)           CORRECT ACTION STRING      U010
         LA    R1,TYPETBL(R1)           -> ACTION STRING           U010
         ST    R1,TYPACT                INITIALIZE LOOP            U010
TYPLOOP  L     R1,TYPACT                -> NEXT ACTION             U010
         XR    R0,R0                    CLEAR FOR IC               U010
         IC    R0,0(,R1)                NEXT ACTION VALUE          U010
         LA    R1,1(,R1)                -> NEW NEXT ACTION         U010
         ST    R1,TYPACT                SAVE FOR LOOP              U010
         LR    R1,R0                    ACTION TO USABLE REGISTER  U010
         B     TYPBRTB(R1)              BRANCH TO ACTION           U010
TYPBRTB  DC    0H'0'                    ACTION BRANCH TABLE        U010
TYPEAZER EQU   *-TYPBRTB                PUSH ZERO ONTO STACK       U010
         XR    R1,R1                    SET ZERO FOR PUSH          U010
         B     TYPPUSH                  PUSH IT ONTO STACK         U010
TYPEAVAL EQU   *-TYPBRTB                PUSH VALUE ONTO STACK      U010
         XR    R1,R1                    CLEAR FOR ICM              U010
         ICM   R1,B'0111',DS1SCALO+1    INPUT VALUE                U010
         B     TYPPUSH                  PUSH IT ONTO STACK         U010
TYPEABLK EQU   *-TYPBRTB                PUSH BLKS/TRK ONTO STACK   U010
         L     R0,DEB+32                -> UCB                     U010
         TRKCALC FUNCTN=TRKCAP,         COMPUTE TRACK CAPACITY     U010$
               UCB=(R0),                UCB OF DESIRED VOLUME      U010$
               R=1,                     NEXT RECORD NUMBER         U010$
               K=DS1KEYL,               KEY LENGTH                 U010$
               DD=DS1BLKL,              DATA LENGTH                U010$
               REGSAVE=YES,             SAVE REGISTERS             U010$
               MF=(E,TRKCLST)                                      U010
         LTR   R1,R0                    DID IT ALL WORK?           U010
         BZ    TYPERR                   NO, ERROR                  U010
         B     TYPPUSH                  YES, PUSH IT ONTO STACK    U010
TYPEATRK EQU   *-TYPBRTB                PUSH TRKS/CYL ONTO STACK   U010
         L     R1,DEB+32                -> UCB                     U010
         XR    R14,R14                  CLEAR FOR IC               U010
         IC    R14,19(,R1)              DEVICE UNIT TYPE           U010
         L     R1,CVTPTR                -> OS CVT                  U010
         L     R1,CVTZDTAB-CVT(,R1)     -> DEVICE DESCR. TABLE     U010
         IC    R14,0(R14,R1)            DEVICE DESCR. OFFSET       U010
         LH    R1,2(R14,R1)             TRACKS PER CYLINDER        U010
TYPPUSH  EQU   *                        PUSH R1 ONTO STACK         U010
         MVC   TYPEYREG,TYPEXREG        PUSH STACK DOWN            U010
TYPPUSH1 EQU   *                        PUT R1 ONTO STACK W/O PUSH U010
         CLM   R1,B'1000',=X'00'        VALUE FIT IN 3 BYTES?      U010
         BNE   TYPERR                   NO, CONVERSION ERROR       U010
         ST    R1,TYPEXREG              STORE VALUE ON STACK       U010
         B     TYPLOOP                  GET NEXT VALUE             U010
TYPEAMUL EQU   *-TYPBRTB                MULTIPLY                   U010
         L     R1,TYPEYREG              MULTIPLICAND               U010
         M     R0,TYPEXREG              MULTIPLIER                 U010
         B     TYPPUSH1                 PUT RESULT ON STACK        U010
TYPEADIV EQU   *-TYPBRTB                DIVIDE                     U010
         L     R1,TYPEYREG              DIVIDEND                   U010
         XR    R0,R0                    CLEAR HIGH ORDER WORD      U010
         D     R0,TYPEXREG              DIVISOR                    U010
         LTR   R0,R0                    IS REMAINDER ZERO?         U010
         BZ    TYPPUSH1                 YES, LEAVE RESULT ALONE    U010
         AH    R1,=H'1'                 NO, ADJUST QUOTIENT        U010
         B     TYPPUSH1                 PUT RESULT ON STACK        U010
TYPEXBLK EQU   *-TYPBRTB                EXIT (SET BLK)             U010
         LA    R1,JFCBAVR               SET AVBLK ALLOCATION TYPE  U010
         B     TYPXIT                   SET VALUE AND EXIT         U010
TYPEXTRK EQU   *-TYPBRTB                EXIT (SET TRK)             U010
         LA    R1,JFCBTRK               SET TRK ALLOCATION TYPE    U010
         B     TYPXIT                   SET VALUE AND EXIT         U010
TYPEXCYL EQU   *-TYPBRTB                EXIT (SET CYL)             U010
         LA    R1,JFCBCYL               SET CYL ALLOCATION TYPE    U010
TYPXIT   IC    R0,DS1SCALO              GET ALLOCATION TYPE        U010
         N     R0,=A(255-JFCBSPAC)      CLR SPACE TYPE             U010
         OR    R0,R1                    SET NEW SPACE TYPE         U010
         STC   R0,DS1SCALO              STORE NEW TYPE             U010
         L     R1,TYPEXREG              GET NEW VALUE              U010
         STCM  R1,B'0111',DS1SCALO+1    STORE NEW VALUE            U010
         OI    STATUS,UPDVTOC           UPDATE VTOC                U010
TYPEXIT  EQU   *-TYPBRTB                NO CONVERSION DONE         U010
*
*  CHECK FOR ROUNDED ALLOCATION
*
CHKROUND CLI   K#ROUND+1,0              WAS ROUND SPECIFIED?       U010
         BE    CHKSECND                 NO, GO CHECK SECONDARY     U010
         CLI   K#ROUND+1,1              WAS IT ROUND OR NOROUND?   U010
         BE    ROUND01                  IT WAS ROUND               U010
         TM    DS1SCALO,JFCROUND        NOROUND - ROUND IN DSCB?   U010
         BZ    CHKSECND                 NO, ALL IS CORRECT         U010
         NI    DS1SCALO,255-JFCROUND    YES, TURN IT OFF           U010
         OI    STATUS,UPDVTOC           UPDATE VTOC                U010
         B     CHKSECND                 GO CHECK SECONDARY         U010
ROUND01  TM    DS1SCALO,JFCROUND        ROUND - ROUND IN DSCB?     U010
         BO    CHKSECND                 YES, ALL IS CORRECT        U010
         OI    DS1SCALO,JFCROUND        YES, TURN IT ON            U010
         OI    STATUS,UPDVTOC           UPDATE VTOC                U010
*
*  CHECK SECONDARY
*
CHKSECND TM    I#SECND+6,X'80'          CHECK IF SPECIFIED         U006
         BZ    CHKDSSN                  NOT SPECIFIED              U012
         L     R2,I#SECND               LOAD A(SECOND)             U006
         LH    R1,I#SECND+4             LOAD L'SECOND)             U006
         BCTR  R1,0                     DECREMENT                  U006
         EX    R1,PACK                                             U006
         CVB   R1,WORK                                             U006
         CLM   R1,B'1000',=X'00'        VERIFY VALUE               U010
         BNE   SECERR                   TOO LARGE                  U010
         STCM  R1,B'0111',DS1SCALO+1    STORE SECONDARY SIZE       U010
         OI    STATUS,UPDVTOC           UPDATE VTOC                U006
         B     CHKDSSN                                             U012
*
*  DATE CONVERSION ROUTINE
*
DATE     CH    R1,=H'5'                 CHECK LENGTH OF INPUT
         BE    DATE1                    NORMAL DATE
         CH    R1,=H'1'                 CHECK FOR STAR
         BNE   DATERR
         CLI   0(R2),C'*'
         BNE   DATERR
         TIME  TU  ASKING FOR YESTERDAY'S DATE - FIRST GET TODAY'S DATE
         ST    R1,WORK                  DATE (00YYDDDF) RETURNED IN R1
         SP    WORK(4),=P'1'            CHANGE TO YESTERDAY'S DATE
         OI    WORK+3,X'0F'             CORRECT SIGN
         UNPK  WORK1(5),WORK+1(3)    PUT IN SAME FORMAT AS NORMAL INPUT
         LA    R2,WORK1
DATE1    LA    R1,1                     LOAD DECRIMENTED L'YEAR
         EX    R1,PACK                  CONVERT YEAR TO BINARY
         CVB   R0,WORK
         LA    R1,2                     LOAD DECRIMENTED L'DAY
         LA    R2,2(R2)                 INCREMENT POINTER
         EX    R1,PACK                  CONVERT DAY TO BINARY
         CVB   R1,WORK
         SLL   R1,16                    COMBINE YEAR AND DAY
         SRDL  R0,8
         ST    R1,WORK1
         XR    R15,R15                  INDICATE NORMAL COMPLETION
         BR    R3                       RETURN
DATERR   LA    R15,1                    INDICATE ERROR
         BR    R3
*
*  CHECK DSSN REQUEST                                              U012
*
CHKDSSN  TM    I#DSSN+6,X'80'           DSSN SPECIFIED?            U012
         BZ    CHKADDR                  NOT PRESENT                U012
         OI    STATUS,UPDVTOC           UPDATE VTOC                U012
         MVC   DS1DSSN,=CL6' '          CLEAR THE FIELD            U012
         LH    R1,I#DSSN+4              LOAD L'(VALUE)             U012
         L     R2,I#DSSN                LOAD A(VALUE)              U012
         BCTR  R1,0                     DECREMENT                  U012
         EX    R1,DSSNMOVE              MOVE DSSN VALUE            U012
         B     CHKADDR                  CONTINUE                   U012
DSSNMOVE MVC   DS1DSSN(*-*),0(R2)       << EXECUTED >>             U012
*
*  CHECK ADDRESS REQUEST
*
CHKADDR  TM    K#ADDR+1,X'01'        CHECK FOR PRESENCE OF ADDRESS PARM
         BZ    WRTDSCB   NOT PRESENT
         MVC   LINE(29),ADDRHDR
         MVC   TRWORK(5),DADDR+3
         MVC   TRWORK+5(5),TRWORK
         TR    TRWORK(5),PAT1
         TR    TRWORK+5(5),PAT2
         MVC   LINE+7(10),PAT3
         TR    LINE+7(10),TRWORK
         MVC   LINE+20(6),SERIAL
         MVC   LINE+29(44),DS1DSNAM
         LA    R1,LINE                  POINT TO DATA              U001
         LA    R0,73                    SET DATA LENGTH            U001
         BAL   R14,PUTLINE              WRITE THE MESSAGE          U001
*
**  DSCB MODIFICATIONS COMPLETE - RETURN DSCB TO VTOC
*
WRTDSCB  TM    STATUS,UPDVTOC           TEST TO UPDATE VTOC
         BNO   CHKPDE
         NI    STATUS,255-UPDVTOC       RESET UPDATE BIT
         BAL   R14,WRTFMT1              REWRITE DSCB
*
**  SUCCESSFUL COMPLETION OF REQUEST - RETURN NORMALLY
*
CHKPDE   CLI   24(R5),X'FF'             CHECK FOR END OF CHAIN
         BE    RETURN
         L     R5,24(R5)                A(PDE FOR NEXT DSNAME)
         B     NEXTDSN
*
**  ERRORS
*
NOTMNT   MVC   LINE(6),SERIAL
         MVC   LINE+6(L'NMNTMSG),NMNTMSG
         MVC   LINE+6+L'NMNTMSG(44),DS1DSNAM
         LA    R1,LINE                  POINT TO DATA              U001
         LA    R0,L'NMNTMSG+50          SET DATA LENGTH            U001
         BAL   R14,PUTLINE              WRITE THE MESSAGE          U001
         B     CHKPDE
         SPACE 3
DSNOTFND MVC   LINE(6),SERIAL
         MVC   LINE+6(L'NFNDMSG),NFNDMSG
         MVC   LINE+6+L'NFNDMSG(44),DS1DSNAM
         LA    R1,LINE                  POINT TO DATA              U001
         LA    R0,L'NFNDMSG+50          SET DATA LENGTH            U001
         BAL   R14,PUTLINE              WRITE THE MESSAGE          U001
         B     CHKPDE
         SPACE 3
RDERR    MVC   LINE(6),SERIAL
         MVC   LINE+6(L'RDMSG),RDMSG
         MVC   TRWORK(5),DADDR+3        A(VTOC ERROR)
         MVC   TRWORK+5(5),TRWORK
         TR    TRWORK(5),PAT1
         TR    TRWORK+5(5),PAT2
         MVC   LINE+9(10),PAT3
         TR    LINE+9(10),TRWORK
         MVC   LINE+6+L'RDMSG(44),DS1DSNAM
         LA    R1,LINE                  POINT TO DATA              U001
         LA    R0,L'RDMSG+50            SET DATA LENGTH            U001
         BAL   R14,PUTLINE              WRITE THE MESSAGE          U001
         B     CHKPDE
         SPACE 3
CATERR   MVC   LINE(L'CATMSG),CATMSG
         MVC   LINE+L'CATMSG(44),DS1DSNAM
         LA    R1,LINE                  POINT TO DATA              U001
         LA    R0,L'CATMSG+44           SET DATA LENGTH            U001
         BAL   R14,PUTLINE              WRITE THE MESSAGE          U001
         B     CHKPDE
         SPACE 3
*
**  UNRECOVERABLE ERRORS - MUST TERMINATE
*
BLKERR   LA    R1,BLKMSG                                           U001
         B     ERRMSG                                              U001
LENERR   LA    R1,LENMSG                                           U001
         B     ERRMSG                                              U001
RECFMERR LA    R1,RFMSG                                            U001
         B     ERRMSG                                              U001
KEYERR   LA    R1,KEYMSG                                           U001
         B     ERRMSG                                              U001
DSOERR   LA    R1,DOMSG                                            U001
         B     ERRMSG                                              U001
PSWDERR  LA    R1,PSWDMSG                                          U001
         B     ERRMSG                                              U001
CDATERR  LA    R1,CDTEMSG                                          U001
         B     ERRMSG                                              U001
EDATERR  LA    R1,EDTEMSG                                          U001
         B     ERRMSG                                              U001
LDATERR  LA    R1,LDTEMSG                                          U006
         B     ERRMSG                                              U006
SECERR   LA    R1,SECMSG                                           U006
         B     ERRMSG                                              U006
NOBATCH  LA    R1,NOBATMSG                                         U002
         B     ERRMSG                                              U002
NOTAUTH  LA    R1,NAUTHMSG                                         U001
         B     ERRMSG                                              U002
NAUTHPW  LA    R1,NAUTHPWM                                         U001
         B     ERRMSG                                              U002
NOMODPW  LA    R1,NOMODPWM                                         U001
         B     ERRMSG                                              U010
TYPERR   LA    R1,TYPERMSG                                         U010
ERRMSG   A     R1,=A(DMODMSG)           -> ACTUAL MESSAGE TEXT     U010
         BAL   R14,PUTMSG                                          U010
         LA    R15,8
         B     EXIT
*
**  RETURN
*
RETURN   XR    R15,R15
EXIT     LR    R1,R13                   SAVE FOR FREEMAIN          U001
         L     R13,4(,R13)              BACK UP SAVEAREA CHAIN     U001
         ST    R15,16(,R13)             SET RC IN SAVEAREA         U001
         FREEMAIN R,LV=WORKALEN,A=(1),SP=1   FREE WORK AREA        U001
         RETURN (14,12),T               RETURN TO CALLER           U001
*
**  OBJECTS OF EX INSTRUCTIONS
*
TACLC    CLC   DS1DSNAM(0),PSCBUSER-PSCB(R15) PREFIX VS. USERID    U002
PACK     PACK  WORK(8),0(0,R2)          UNIVERSAL PACK INSTRUCTION
         EJECT
*
**  PUTLINE INTERFACE
*
PUTLINE  ST    R14,PLLINK               SAVE ROUTINE LINKAGE       U001
         LTR   R15,R0                   GET MESSAGE LENGTH         U001
         BNPR  R14                      TOO SHORT, GIVE UP         U001
         CH    R15,=AL2(L'PLDATA)       TOO LONG?                  U001
         BNH   PL01                     NO                         U001
         LH    R15,=AL2(L'PLDATA)       REDUCE TO MAX              U001
PL01     BCTR  R15,0                    REDUCE FOR 'EX'            U001
         EX    R15,PLMVC                                           U001
         LA    R15,5(,R15)              SET REQUIRED LENGTH        U001
         STH   R15,PLDLEN               SET FOR PUTLINE            U001
         LA    R0,PLDLEN                POINT FOR PUTLINE          U001
         B     PL02                     PERFORM PUTLINE            U001
PUTMSG   ST    R14,PLLINK               SAVE ROUTINE LINKAGE       U001
         LR    R0,R1                    POINT TO MESSAGE           U001
PL02     PUTLINE OUTPUT=((0),TERM,SINGLE,DATA),                    U001X
               MF=(E,WKIOPL)                                       U001
         L     R14,PLLINK               RESTORE LINK REGISTER      U001
         BR    R14                      RETURN TO CALLER           U001
PLMVC    MVC   PLDATA(0),0(R1)          MOVE MESSAGE               U001
         EJECT
*
**  TEST DMOD PROGRAM PASSWORD
*
DMODPW   ST    R14,DPLINK                                          U002
         LA    R1,WKDAPB                -> DAIR PARAM BLOCK        U002
         USING DAPB08,R1                                           U002
         XC    DAPB08(DAPB08L),DAPB08   CLEAR THE WHOLE THING      U002
         MVC   DA08CD,=X'0008'          SET DAIR ENTRY CODE        U002
         LA    R0,DMODPWDS              -> DATASET NAME            U002
         ST    R0,DA08PDSN              SAVE IN PARAM BLOCK        U002
         MVC   DA08DDN,SPACES           ANY DD NAME WILL DO        U002
         MVC   DA08UNIT,SPACES          ANY UNIT WILL DO           U002
         MVC   DA08SER,SPACES           SAME FOR VOLSER            U002
         MVC   DA08MNM,SPACES           NO MEMBER NAME             U002
         MVC   DA08PSWD,SPACES          I DON'T KNOW THE PASSWORD  U002
         MVI   DA08DSP1,DA08SHR         LET'S ALLOCATE IT SHR      U002
         MVI   DA08DPS2,DA08KEEP        KEEP IT WHEN DONE          U002
         MVC   DA08ALN,SPACES           NO ATTRIBUTE LIST          U002
         DROP  R1                                                  U002
         LA    R1,WKDAPL                -> DAIR PARAM LIST         U002
         CALLTSSR EP=IKJDAIR            ALLOCATE THE DATASET       U002
         LTR   R15,R15                  DID DAIR WORK?             U002
         BNZ   DP01                     NO, LET USER CONTINUE      U002
         MVC   WKPWDCB(PWDCBL),PWDCB    MOVE THE DCB TO WORKAREA   U002
         MVC   DCBDDNAM-IHADCB+WKPWDCB,DA08DDN-DAPB08+WKDAPB       U002
         MVI   WKOCL,X'80'              INITIALIZE OPEN/CLOSE LIST U002
         OPEN  (WKPWDCB,(UPDATE)),      SEE IF HE KNOWS THE PSWD   U002X
               MF=(E,WKOCL)                                        U002
         CLOSE MF=(E,WKOCL)             WE CAN CLOSE IT NOW        U002
         SPACE 2
         LA    R1,WKDAPB                -> DAIR PARM BLOCK         U007
         USING DAPB2C,R1                                           U007
         XC    DAPB2C(DAPB2CL),DAPB2C   CLEAR THE WHOLE THING      U007
         MVI   DA2CCD+1,X'2C'           SET DAIR ENTRY CODE        U007
         MVI   DA2CFLG+1,X'01'          MARK SPECIFIC DDNAME       U007
         MVC   DA2CDDN,DCBDDNAM-IHADCB+WKPWDCB   GET DDNAME        U007
         DROP  R1                                                  U007
         LA    R1,WKDAPL                -> DAIR PARAM LIST         U007
         CALLTSSR EP=IKJDAIR            MARK THE DDN "NOT IN USE"  U007
*  IGNORE THE RETURN CODE.  THERE'S NOTHING WE CAN DO ANYWAY.
DP01     L     R14,DPLINK                                          U002
         BR    R14                                                 U002
         EJECT
*
**  DETERMINE LOCATION OF CATALOGED DATASET
*
LOOKUP   ST    R14,LULINK                                          U005
         MVC   CAMLST(CAMLSTL),CLPAT    BUILD CAMLST
         LA    R1,DS1DSNAM              -> DATASET NAME            U005
         ST    R1,CAMLST+4              STORE IT IN CAMLST         U005
         LA    R1,CAMAREA               -> CAMLST WORD AREA        U005
         ST    R1,CAMLST+12             STORE IT IN CAMLST         U005
         LOCATE CAMLST                  GET THE VOLUME
         LTR   R15,R15                  TEST CAM RETURN CODE       U005
         BNZ   CATERR                   NO GOOD - ERROR            U005
         MVC   SERIAL,CAMAREA+6         MOVE SERIAL NUMBER         U005
         L     R14,LULINK                                          U005
         BR    R14                                                 U005
         EJECT
*
**  READ, OR WRITE FORMAT 1 DSCB
*
RDFMT1   LA    R0,RDD                   INDICATE READ FUNCTION     U005
         B     START
         SPACE 2
WRTFMT1  LA    R0,WRTD                  INDICATE WRITE FUNCTION    U005
         SPACE 2
START    ST    R14,RWLINK                                          U005
*
*  MOVE PARTIALLY FILLED CONTROL BLOCKS TO DSECT
*
         MVC   DCB(DCBL),DCBPAT         DATA CONTROL BLOCK         U003
         MVC   DEB(DEBL),DEBPAT         DATA EXTENT CONTROL BLOCK  U003
         MVC   IOB(IOBL),IOBPAT         I/O BLOCK
         MVC   CHANPROG(CCWL),CCWPAT    CHANNEL PROGRAM            U003
*
*  FINISH FILLING THEM IN
*
         LA    R1,RWECB
         ST    R1,IOB+4
         LA    R1,CHANPROG
         ST    R1,IOB+16
         STCM  R1,7,CCW2+1
         LA    R1,CCW3
         STCM  R1,7,CCW5+1
         LA    R1,DCB
         ST    R1,IOB+20
         ST    R1,DEB+24
         MVI   DEB+24,X'0F'
         LA    R1,IOBSEEK+3
         STCM  R1,7,CHANPROG+1
         LA    R1,IECSDSL1              -> DSCB STORAGE            U005
         STCM  R1,7,CCW4+1
         LA    R1,44(,R1)
         ST    R1,CCW6
         STC   R0,CCW6                  SET SAVED CCW CODE
         LA    R1,COUNT
         STCM  R1,7,CCW3+1
         LA    R1,DEB
         ST    R1,DCBDEBAD-IHADCB+DCB   STORE A(DEB)
         MVI   DEB+28,X'04'             INDICATE DASD
*
*  FIND THE UCB
*
          AIF   (&@@SPLVL GE 130).UCB010                           U017
FDUCB    L     R1,CVTPTR                -> CVT                     U010
         L     R1,CVTILK2-CVT(,R1)      -> UCB LOOKUP TABLE        U010
*U014    L     R2,0(,R11)               -> DESIRED VOLSER          U003
         XR    R15,R15                  CLEAR FOR ICM              U010
         B     LOOP1                    ENTER THE SCAN LOOP        U017
CONT     LA    R1,2(,R1)                INCREMENT TO NEXT UCB      U017
LOOP1    ICM   R15,B'0011',0(R1)        GET A UCB ADDR             U010
         BZ    CONT                     THIS IS A UCB 'HOLE'     P.H.H.
         CLM   R15,B'0011',=X'FFFF'     END OF LOOKUP TABLE?       U010
         BE    NOTMNT                   YES, VOLUME IS NOT MOUNTED U010
         USING UCBCMSEG,R15             UCB COMMON SEGMENT         U017
         CLI   UCBTBYT3,UCB3DACC        DIRECT ACCESS?             U017
         BNE   CONT                     NO, GO TO NEXT UCB         U017
          AGO   .UCB020                                            U017
.UCB010   ANOP                                                     U017
FDUCB    LA    R1,IOSWORK               -> IOSVSUCB WORK AREA      U017
         ST    R1,IOSPARM               -> IOSVSUCB WORK AREA      U017
         LA    R1,IOSDVCLS              -> IOSVSUCB DEVICE CLASS   U017
         ST    R1,IOSPARM+4             -> IOSVSUCB DEVICE CLASS   U017
         LA    R1,IOSAUCB               -> IOSVSUCB RETURN -> UCB  U017
         ST    R1,IOSPARM+8             -> IOSVSUCB RETURN -> UCB  U017
         OI    IOSPARM+8,X'80'          FLAG END OF PARMS          U017
         XC    IOSWORK,IOSWORK          CLEAR IOSVSUCB WORK AREA   U017
         MVI   IOSDVCLS,UCB3DACC        LIMIT SCAN TO DASD         U017
         LA    R1,IOSPARM               -> IOSVSUCB PARAMETERS     U017
CONT     L     R15,CVTPTR               -> CVT                     U017
         L     R15,CVTUCBSC-CVT(,R15)   -> IOSVSUCB ROUTINE        U017
         BALR  R14,R15                  LOCATE NEXT UCB            U017
         LTR   R15,R15                  ANY UCB FOUND?             U017
         BNZ   NOTMNT                   NO, END OF SCAN            U017
         L     R15,IOSAUCB              -> UCB                     U017
         USING UCBCMSEG,R15             UCB COMMON SEGMENT         U017
.UCB020  ANOP                                                      U017
         TM    UCBSTAT,UCBONLI          ONLINE?                    U017
         BNO   CONT                     NO - IGNORE IT             U017
         CLC   SERIAL,UCBVOLI           THIS OUR VOLUME?           U017
         BNE   CONT                     TRY NEXT UCB
         STCM  R15,B'0111',DEB+33       STORE A(UCB)               U017
         MVC   TTR(3),UCBVTOC           MOVE RELATIVE VTOC ADDR    U017
         B     CONVERT
         DROP  R15                      UCBCMSEG                   U017
*
*  CONVERT TTR FOUND IN UCB TO CCHHR - A(VTOC)
*
CONVERT  L     R1,CVTPTR                -> CVT                     U010
         L     R15,CVTPCNVT-CVT(,R1)    -> TTR TO MBBCCHHR RTN     U010
         LA    R2,IOBSEEK               LOAD AREA FOR VTOC ADDRESS
         LA    R1,DEB
         L     R0,TTR                   CURRENT A(VTOC)
         STM   R14,R12,12(R13)      CONVERT ROUTINE SCREWS UP SOME REG.
         LR    R3,R13                   INCLUDING R13
         BALR  R14,R15                  BRANCH TO CONVERT ROUTINE
         LR    R13,R3                   RESTORE R13
         LM    R14,R12,12(R13)          RESTORE REST OF THE REGISTERS
         L     R1,CVTPTR                -> CVT                     U010
         MVC   DEB+29(3),CVTXAPG+1-CVT(R1)  -> SYSTEM'S AVT        U010
         L     R1,PSATOLD               -> CURRENT TCB             U010
         OC    DEB+24(1),28(R1)         MOVE TCB KEY
*
*  DO THE I/O IN KEY ZERO SO THE SYSTEM WON'T VALIDITY CHECK THE DEB
*
         MODESET KEY=ZERO                                          U001
         EXCP  IOB                      READ THE DSCB
         MODESET KEY=NZERO                                         U001
         WAIT  ECB=RWECB
         CLI   RWECB,X'7F'              CHECK FOR NORMAL COMPLETION
         BE    RWRET
         CLI   CSW+4,X'0C'              CHECK FOR SEVERE ERROR
         BNE   RDERR                    STATUS NOT CLEAN; ERROR
         B     DSNOTFND                 CLEAN, DATASET NOT FOUND
*
*  RETURN
*
RWRET    XC    DADDR(8),DADDR
         MVC   DADDR+3(5),COUNT         ADDRESS OF DSCB
         L     R14,RWLINK                                          U005
         BR    R14                                                 U005
         EJECT
         LTORG                                                     U001
         SPACE 2
*
**  ERROR MESSAGES
*
NMNTMSG  DC    CL17' - NOT MOUNTED - '
NFNDMSG  DC    CL24' - DATA SET NOT FOUND - '
RDMSG    DC    CL33' -            - VTOC I/O ERROR - '
WRTMSG   DC    CL23' - VTOC UPDATE ERROR - '
CATMSG   DC    CL17'NOT CATALOGUED - '
BLKMSG   MSG   'BLKSIZE ERROR'
LENMSG   MSG   'LRECL ERROR'
RFMSG    MSG   'RECFM ERROR'
KEYMSG   MSG   'KEYLEN ERROR'
DOMSG    MSG   'DSORG ERROR'
PSWDMSG  MSG   'PASSWORD OPERAND ERROR'
CDTEMSG  MSG   'CREATION DATE ERROR'
EDTEMSG  MSG   'EXPIRATION DATE ERROR'
LDTEMSG  MSG   'LAST REFERENCED DATE ERROR'                        U006
          AIF   (&@@ASM2 EQ 0).NOASM2C                             U016
LMDATMSG MSG   'LAST MODIFIED DATE ERROR'                          U014
LMTIMMSG MSG   'LAST MODIFIED TIME ERROR'                          U014
.NOASM2C  ANOP                                                     U016
SECMSG   MSG   'SECONDARY ALLOCATION ERROR'                        U006
NOBATMSG MSG   'DEFINITELY NOT FROM BATCH'                         U002
NAUTHMSG MSG   'ONLY YOUR OWN DATASETS, PLEASE'                    U002
NAUTHPWM MSG   'NOT AUTHORIZED TO CHANGE PASSWORD STATUS'          U002
NOMODPWM MSG   'PASSWORD OPERAND NOT OPERABLE ON ''&@@DMOD'''      U016
TYPERMSG MSG   'ALLOCATION TYPE CONVERSION ERROR'                  U010
ADDRHDR  DC    CL29'ADDR -            -        - '
SPACES   DC    CL80' '
PAT1     DC    C'000000000000000011111111111111112222222222222222'
         DC    C'333333333333333344444444444444445555555555555555'
         DC    C'666666666666666677777777777777778888888888888888'
         DC    C'9999999999999999AAAAAAAAAAAAAAAABBBBBBBBBBBBBBBB'
         DC    C'CCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEE'
         DC    C'FFFFFFFFFFFFFFFF'
PAT2     DC    C'0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF'
         DC    C'0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF'
         DC    C'0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF'
         DC    C'0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF'
         DC    C'0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF'
         DC    C'0123456789ABCDEF'
PAT3     DC    X'00050106020703080409'
DMODPWDS DC    H'09',CL44'&@@DMOD'                                 U016
PWDCB    DCB   DDNAME=TRASH,MACRF=E                                U002
PWDCBL   EQU   *-PWDCB                                             U002
CLPAT    CAMLST NAME,0,,0               DUMMY CAMLST
*
*  THE FOLLOWING IS THE PATTERN FOR THE IOB, CCW'S, DEB, DCB, ETC.
*
*  IOB
         DS    0D
IOBPAT   DC    X'42000000'
         DC    9F'0'
IOBL     EQU   *-IOBPAT                                            U003
CCWPAT   CCW   IDEQ,0,X'40',5           SEARCH ID EQUAL
         CCW   TIC,0,0,0
         CCW   RDC,0,X'40',8            READ COUNT
         CCW   KEYEQ,0,X'40',44         SEARCH KEY EQUAL
         CCW   TIC,0,0,0
         CCW   RDD,0,0,96               READ DATA
CCWL     EQU   *-CCWPAT                                            U003
IDEQ     EQU   X'31'   SEARCH ID EQUAL
TIC      EQU   X'08'   TRANSFER IN CHANNEL
RDC      EQU   X'92'   READ COUNT (MULTI TRACK)
RDD      EQU   X'86'   READ DATA (MULTI TRACK)
KEYEQ    EQU   X'A9'   SEARCH KEY EQUAL (MULTI TRACK)
WRTD     EQU   X'05'   WRITE DATA
DEBPAT   DC    4F'0'
         DC    X'01',AL3(0)
         DC    2F'0'
         DC    X'04',AL3(0)
         DC    X'C0',AL3(0)
         DC    F'0'
         DC    H'0',H'-1'
         DC    H'-1',X'7FFF'
DEBL     EQU   *-DEBPAT                                            U003
DCBPAT   DC    6F'0'
         DC    X'0000'
         DC    X'2000'
         DC    6F'0'
DCBL     EQU   *-DCBPAT
         EJECT
*
**  PARSE CONTROL LIST
*
         PRINT NOGEN                                               U006
         SPACE 2
CMDPCL   IKJPARM
         SPACE 2
P#DSNAME IKJPOSIT   DSNAME,LIST,PROMPT='DATA SET NAME'
         SPACE 2
K#BLKSZ  IKJKEYWD
         SPACE 2
         IKJNAME    'BLKSIZE',SUBFLD=S#BLKSZ
         SPACE 2
K#LRECL  IKJKEYWD
         SPACE 2
         IKJNAME    'LRECL',SUBFLD=S#LRECL
         SPACE 2
K#RECFM  IKJKEYWD
         SPACE 2
         IKJNAME    'RECFM',SUBFLD=S#RECFM
         SPACE 2
K#KEYLEN IKJKEYWD
         SPACE 2
         IKJNAME    'KEYLEN',SUBFLD=S#KEYLEN
         SPACE 2
K#DSORG  IKJKEYWD
         SPACE 2
         IKJNAME    'DSORG',SUBFLD=S#DSORG
         SPACE 2
K#CDATE  IKJKEYWD
         SPACE 2
         IKJNAME    'CDATE',SUBFLD=S#CDATE
         SPACE 2
K#EDATE  IKJKEYWD
         SPACE 2
         IKJNAME    'EDATE',SUBFLD=S#EDATE
         SPACE 2
K#LDATE  IKJKEYWD
         SPACE 2
         IKJNAME    'LDATE',SUBFLD=S#LDATE                         U006
         SPACE 2
          AIF   (&@@ASM2 EQ 0).NOASM2D                             U016
*  THE FOLLOWING STUPID MACRO DOES NOT ALLOW COMMENTS:             U014
K#LMDATE IKJKEYWD
         SPACE 2
         IKJNAME    'LMDATE',SUBFLD=S#LMDATE                       U014
         SPACE 2
*  THE FOLLOWING STUPID MACRO DOES NOT ALLOW COMMENTS:             U014
K#LMTIME IKJKEYWD
         SPACE 2
         IKJNAME    'LMTIME',SUBFLD=S#LMTIME                       U014
         SPACE 2
*  THE FOLLOWING STUPID MACRO DOES NOT ALLOW COMMENTS:             U014
K#LMID   IKJKEYWD
         SPACE 2
         IKJNAME    'LMID',SUBFLD=S#LMID                           U014
         SPACE 2
.NOASM2D  ANOP                                                     U016
K#SCNDRY IKJKEYWD
         SPACE 2
         IKJNAME    'SECONDARY',SUBFLD=S#SECND                     U006
         SPACE 2
K#PSWD   IKJKEYWD
         SPACE 2
         IKJNAME    'PASSWORD',SUBFLD=S#PSWD
         SPACE 2
K#RACF   IKJKEYWD
         SPACE 2
         IKJNAME    'RACF'                                         U008
         SPACE 2
         IKJNAME    'NORACF'                                       U008
         SPACE 2
*  THE FOLLOWING STUPID MACRO DOES NOT ALLOW COMMENTS:             U015
K#CHANGE IKJKEYWD
         SPACE 2
         IKJNAME    'CHANGED'                                      U015
         SPACE 2
         IKJNAME    'NOCHANGED'                                    U015
         SPACE 2
*  THE FOLLOWING STUPID MACRO DOES NOT ALLOW COMMENTS:             U015
K#CHKPT  IKJKEYWD
         SPACE 2
         IKJNAME    'CHKPT'                                        U015
         SPACE 2
         IKJNAME    'NOCHKPT'                                      U015
         SPACE 2
K#TYPE   IKJKEYWD ,                                                U010
         SPACE 2
         IKJNAME    'AVBLOCKS'   ,ALIAS=('BLOCKS')                 U011
TYPEBLK  EQU   1                                                   U010
         SPACE 2
         IKJNAME    'TRACKS',ALIAS='TRKS'                          U010
TYPETRK  EQU   2                                                   U010
         SPACE 2
         IKJNAME    'CYLINDERS',ALIAS='CYLS'                       U010
TYPECYL  EQU   3                                                   U010
         SPACE 2
K#ROUND  IKJKEYWD ,                                                U010
         SPACE 2
         IKJNAME    'ROUND'                                        U010
         SPACE 2
         IKJNAME    'NOROUND'                                      U010
         SPACE 2
K#VOL    IKJKEYWD
         SPACE 2
         IKJNAME    'VOLUME',SUBFLD=S#VOL
         SPACE 2
*  THE FOLLOWING STUPID MACRO DOES NOT ALLOW COMMENTS:             U012
K#DSSN   IKJKEYWD
         SPACE 2
         IKJNAME    'DSSN',SUBFLD=S#DSSN                           U012
         SPACE 2
K#ADDR   IKJKEYWD
         SPACE 2
         IKJNAME    'ADDRESS'
         EJECT
*
*  SUBFIELDS
*
         SPACE 2
S#BLKSZ  IKJSUBF
         SPACE 2
I#BLKLEN IKJIDENT   'NUMBER',MAXLNTH=5,FIRST=NUMERIC,OTHER=NUMERIC,    $
               PROMPT='BLOCK SIZE'
         SPACE 2
S#LRECL  IKJSUBF
         SPACE 2
I#RECLEN IKJIDENT   'NUMBER',MAXLNTH=5,FIRST=NUMERIC,OTHER=NUMERIC,    $
               PROMPT='LOGICAL RECORD LENGTH'
         SPACE 2
S#RECFM  IKJSUBF
         SPACE 2
I#RECFM  IKJIDENT   'SYMBOLS',MAXLNTH=4,PROMPT='RECFM+',               $
               HELP='(F,V OR U) (B) (S) (A OR M) ONLY'
         SPACE 2
S#KEYLEN IKJSUBF
         SPACE 2
I#KEYLEN IKJIDENT   'NUMBER',MAXLNTH=3,FIRST=NUMERIC,OTHER=NUMERIC,    $
               PROMPT='KEY LENGTH'
         SPACE 2
S#DSORG  IKJSUBF
         SPACE 2
I#DSORG  IKJIDENT   'SYMBOLS',MAXLNTH=3,PROMPT='DSORG+',               $
               HELP='IS,ISU,PO,POU,PS,PSU,DA OR DAU ONLY'
         SPACE 2
S#CDATE  IKJSUBF
         SPACE 2
I#CDATE  IKJIDENT   'NUMBER',ASTERISK,MAXLNTH=5,FIRST=NUMERIC,         $
               OTHER=NUMERIC,PROMPT='CREATION DATE+',                  $
               HELP=('5 DIGIT JULIAN DATE OR *+',                      $
               '* FOR YESTERDAY''S DATE')
         SPACE 2
S#EDATE  IKJSUBF
         SPACE 2
I#EDATE  IKJIDENT   'NUMBER',ASTERISK,MAXLNTH=5,FIRST=NUMERIC,         $
               OTHER=NUMERIC,PROMPT='EXPIRATION DATE+',                $
               HELP=('5 DIGIT JULIAN DATE OR *+',                      $
               '* FOR YESTERDAY''S DATE')
         SPACE 2
S#LDATE  IKJSUBF
         SPACE 2
I#LDATE  IKJIDENT   'NUMBER',ASTERISK,MAXLNTH=5,FIRST=NUMERIC,     U006$
               OTHER=NUMERIC,PROMPT='LAST REFERENCED DATE+',       U006$
               HELP=('5 DIGIT JULIAN DATE OR *+',                  U006$
               '* FOR YESTERDAY''S DATE')                          U006
         SPACE 2
          AIF   (&@@ASM2 EQ 0).NOASM2E                             U016
*  THE FOLLOWING STUPID MACRO DOES NOT ALLOW COMMENTS:             U014
S#LMDATE IKJSUBF
         SPACE 2
I#LMDATE IKJIDENT   'NUMBER',ASTERISK,MAXLNTH=5,FIRST=NUMERIC,     U014$
               OTHER=NUMERIC,PROMPT='LAST MODIFIED DATE+',         U014$
               HELP=('5 DIGIT JULIAN DATE OR *+',                  U014$
               '* FOR YESTERDAY''S DATE')                          U014
         SPACE 2
*  THE FOLLOWING STUPID MACRO DOES NOT ALLOW COMMENTS:             U014
S#LMTIME IKJSUBF
         SPACE 2
I#LMTIME IKJIDENT   'TIME',MAXLNTH=4,FIRST=NUMERIC,OTHER=NUMERIC,  U014$
               PROMPT='LAST MODIFIED TIME'                         U014
         SPACE 2
*  THE FOLLOWING STUPID MACRO DOES NOT ALLOW COMMENTS:             U014
S#LMID   IKJSUBF
         SPACE 2
I#LMID   IKJIDENT   'MOD ID',MAXLNTH=8,FIRST=ALPHANUM,OTHER=ALPHANUM,  $
               PROMPT='LAST-MODIFIED-BY ID'                        U014
.NOASM2E  ANOP                                                     U018
         SPACE 2
S#SECND  IKJSUBF
         SPACE 2
I#SECND  IKJIDENT   'NUMBER',MAXLNTH=8,FIRST=NUMERIC,OTHER=NUMERIC,    $
               PROMPT='SECONDARY ALLOCATION SIZE'                  U010
         SPACE 2
S#PSWD   IKJSUBF
         SPACE 2
I#PSWD   IKJIDENT   'SYMBOLS',MAXLNTH=1,                               $
               PROMPT='PASSWORD SET CHARACTER+',                       $
               HELP='''R'' FOR READ/WRITE PROTECTION, ''W'' FOR WRITE O$
               NLY PROTECTION OR ''N'' FOR NO PROTECTION'
         SPACE 2
S#VOL    IKJSUBF
         SPACE 2
I#VOL    IKJIDENT   'IDENTIFIER',MAXLNTH=6,FIRST=ALPHANUM,             $
               OTHER=ALPHANUM,PROMPT='VOLUME SERIAL NUMBER'
         SPACE 2
*  THE FOLLOWING STUPID MACRO DOES NOT ALLOW COMMENTS:             U012
S#DSSN   IKJSUBF
         SPACE 2
I#DSSN   IKJIDENT   'IDENTIFIER',MAXLNTH=6,FIRST=ALPHANUM,         U012$
               OTHER=ALPHANUM,PROMPT='DATASET''S FIRST VOLSER'     U012
         SPACE 2
         IKJENDP
         EJECT
*
**  COMMAND PROCESSOR PARAMETER LIST
*
         IKJCPPL
*
**  PROTECTED STEP CONTROL BLOCK
*
         IKJPSCB
*
**  DYNAMIC ALLOCATION (DAIR) PARAMETER LIST
*
         IKJDAPL
DAPLLEN  EQU   *-DAPL                                              U002
*
**  DYNAMIC ALLOCATION (DAIR) PARAMETER BLOCKS
*
         IKJDAP08
DAPB08L  EQU   *-DAPB08                                            U002
*
         IKJDAP2C
DAPB2CL  EQU   *-DAPB2C                                            U007
*
**  PARSE PARAMETER LIST
*
         IKJPPL ,                                                  U001
PPLLEN   EQU   *-PPL                                               U001
*
**  PUTLINE I/O PARAMETER LIST
*
         IKJIOPL ,                                                 U001
IOPLLEN  EQU   *-IOPL                                              U001
*
**  DATA CONTROL BLOCK
*
         DCBD
*                                        *
*** THE FOLLOWING DSECT MAPS SUBPOOL 1 ***
*                                        *
         SPACE 3
         PRINT GEN                                                 U016
WORKAREA DSECT                                                     U001
         DS    18F                                                 U001
LULINK   DS    A                                                   U005
RWLINK   DS    A                                                   U005
CAMLST   CAMLST NAME,CAMLST,,CAMLST
CAMLSTL  EQU   *-CAMLST
CAMAREA  DS    265X
         DS    0D
*
IOB      DC    X'42000000'
         DC    A(RWECB)
CSW      DC    2F'0'
         DC    A(CHANPROG)
         DC    A(DCB)
         DC    2F'0'
IOBSEEK  DC    2F'0'
*
COUNT    DS    XL8
*
CHANPROG DS    D
CCW2     DS    D                                                   U005
CCW3     DS    D                                                   U005
CCW4     DS    D                                                   U005
CCW5     DS    D                                                   U005
CCW6     DS    D                                                   U005
*
DEB      DC    4F'0'
         DC    X'01',AL3(0)   INDICATE 1 EXTENT
         DC    F'0'
         DC    X'0F',AL3(DCB)   INSERT PROTECT KEY LATER
         DC    X'04',AL3(0)   DASD / A(I/O APPENDAGE TABLE)
         DC    X'C0',AL3(0)   FILE MASK / A(UCB)
         DC    F'0'   BIN NO. / CYL START ADDR
         DC    H'0',H'-1'   TRK START ADDR / CYL END ADDR
         DC    H'-1',X'7FFF'   TRK END ADDR / TRKS IN THIS EXTENT
*
*
RWECB    DC    F'0'
*
TTR      DC    F'0'
DCB      DC    6F'0'
         DC    X'0000'
         DC    X'2000'   DIRECT DATA SET (FOR SVC 57 ONLY)
         DC    4F'0'
         DC    A(DEB)
         DC    F'0'
PSCBADDR DS    A                                                   U002
DPLINK   DS    A                                                   U002
ECB      DS    F
ANSWER   DS    F
ADDR     DS    3A
TYPACT   DS    F                                                   U010
TYPEXREG DS    F                                                   U010
TYPEYREG DS    F                                                   U010
TRKCLST  TRKCALC MF=L                                              U010
STATUS   DS    X
UPDVTOC  EQU   X'80'                    REWRITE THE VTOC           U002
LINE     DS    130C
TRWORK   DS    10C
         CNOP  2,4
SERIAL   DS    CL6                      VOLUME SERIAL NUMBER
DADDR    DS    CL8                      DIRECT ACCESS ADDRESS
WORK     DS    D
WORK1    DS    D
WKPPL    DS    0F                                                  U001
         ORG   *+PPLLEN                                            U001
PLLINK   DS    A                                                   U001
PLPARM   PUTLINE MF=L                   PUTLINE PARAM LIST STORAGE U001
PLDLEN   DS    0F,2H                    PUTLINE DATA STORAGE       U001
PLDATA   DS    CL80                     PUTLINE DATA STORAGE       U001
WKIOPL   DS    0F                       PUTLINE IOPL STORAGE       U001
         ORG   *+IOPLLEN                                           U001
WKDAPL   DS    0F                       DAIR PARAM LIST STORAGE    U002
         ORG   *+DAPLLEN                                           U002
WKDAPB   DS    0F                       DAIR PARAM BLOCK STORAGE   U002
         ORG   WKDAPB+DAPB08L                                      U002
WKPWDCB  DS    0F                       PASSWORD DCB STORAGE       U002
         ORG   *+PWDCBL                                            U002
IOSPARM  DC    A(IOSWORK,IOSDVCLS,IOSAUCB+X'80000000')             U017
IOSAUCB  DC    A(0)                     IOSVSUCB RETURNED UCB ADDR U017
IOSDVCLS DC    AL1(UCB3DACC)            IOSVSUCB DASD DEVICE CLASS U017
IOSWORK  DC    XL100'00'                IOSVSUCB SERVICE WORK AREA U017
WKOCL    OPEN  (0),MF=L                 OPEN/CLOSE LIST STORAGE    U002
*
*  MAP FORMAT 1 DSCB
*
         IECSDSL1 1
          AIF   (&@@ASM2 EQ 0).NOASM2F                             U016
         ORG   DS1DSSN                  FMT1+45                    U014
ASM2USE  DS    FL3                      ASM2 - USE COUNT           U014
ASM2LMDT DS    XL3    YDD               ASM2 - LAST MODIFY DATE    U014
         ORG   DS1SYSCD                 FMT1+62                    U014
ASM2LMID DS    CL8                      ASM2 - LAST MODIFY ID      U014
          AIF   (&@@ASM2 LT 310).ASM2X1                            U019
         DS    CL1                      ASM2 - wasted for stupidityU019
ASM2LMTM DS    XL2    HHMM              ASM2 - last modify time    U019
          AGO   .ASM2X2                                            U019
.ASM2X1   ANOP                                                     U019
         ORG   IECSDSL1+80              +2 INTO 4 BYTES RESERVED   U014
ASM2LMTM DS    XL2    HHMM              ASM2 - LAST MODIFY TIME    U014
.ASM2X2   ANOP                                                     U019
         ORG    ,                                                  U016
.NOASM2F  ANOP                                                     U016
WORKALEN EQU   *-WORKAREA                                          U001
         PRINT NOGEN                                               U016
*
*  MAP COMMUNICATIONS VECTOR TABLE
*
         CVT  DSECT=YES                                            U010
*
*  PREFIXED STORAGE AREA (LOW MEMORY)
*
         IHAPSA ,                                                  U010
*
*  MAP JOB FILE CONTROL BLOCK
*
         IEFJFCBN ,                                                U010
*
*  MAP UCB FIELDS                                                  U017
*
         IEFUCBOB ,                                                U017
         SPACE 3
*
*        ALLOCATION TYPE CONVERSION TABLES
*
DMOD     CSECT                                                     U010
TYPETBL  DC    16X'00'                                             U010
         ORG   TYPETBL+JFCBABS/16+TYPEBLK   ABSTR->BLK             U010
         DC    AL1(TYPETAB)                                        U010
         ORG   TYPETBL+JFCBABS/16+TYPETRK   ABSTR->TRK             U010
         DC    AL1(TYPETAT)                                        U010
         ORG   TYPETBL+JFCBABS/16+TYPECYL   ABSTR->CYL             U010
         DC    AL1(TYPETAC)                                        U010
         ORG   TYPETBL+JFCBAVR/16+TYPEBLK   BLK->BLK               U010
         DC    AL1(TYPETEX)                                        U010
         ORG   TYPETBL+JFCBAVR/16+TYPETRK   BLK->TRK               U010
         DC    AL1(TYPETBT)                                        U010
         ORG   TYPETBL+JFCBAVR/16+TYPECYL   BLK->CYL               U010
         DC    AL1(TYPETBC)                                        U010
         ORG   TYPETBL+JFCBTRK/16+TYPEBLK   TRK->BLK               U010
         DC    AL1(TYPETTB)                                        U010
         ORG   TYPETBL+JFCBTRK/16+TYPETRK   TRK->TRK               U010
         DC    AL1(TYPETEX)                                        U010
         ORG   TYPETBL+JFCBTRK/16+TYPECYL   TRK->CYL               U010
         DC    AL1(TYPETTC)                                        U010
         ORG   TYPETBL+JFCBCYL/16+TYPEBLK   CYL->BLK               U010
         DC    AL1(TYPETCB)                                        U010
         ORG   TYPETBL+JFCBCYL/16+TYPETRK   CYL->TRK               U010
         DC    AL1(TYPETCT)                                        U010
         ORG   TYPETBL+JFCBCYL/16+TYPECYL   CYL->CYL               U010
         DC    AL1(TYPETEX)                                        U010
         ORG   ,                        END OF TYPE TABLE          U010
TYPETEX  EQU   *-TYPETBL                                           U010
         DC    AL1(TYPEXIT)                                        U010
TYPETAB  EQU   *-TYPETBL                ABSTR->BLK                 U010
         DC    AL1(TYPEAZER)             PUSH ZERO                 U010
         DC    AL1(TYPEXBLK)             EXIT (SET BLK)            U010
TYPETAT  EQU   *-TYPETBL                ABSTR->TRK                 U010
         DC    AL1(TYPEAZER)             PUSH ZERO                 U010
         DC    AL1(TYPEXTRK)             EXIT (SET TRK)            U010
TYPETAC  EQU   *-TYPETBL                ABSTR->CTL                 U010
         DC    AL1(TYPEAZER)             PUSH ZERO                 U010
         DC    AL1(TYPEXCYL)             EXIT (SET CYL)            U010
TYPETBT  EQU   *-TYPETBL                BLK->TRK                   U010
         DC    AL1(TYPEAVAL)             PUSH BLKS                 U010
         DC    AL1(TYPEABLK)             PUSH BLKS/TRK             U010
         DC    AL1(TYPEADIV)             DIVIDE = TRKS             U010
         DC    AL1(TYPEXTRK)             EXIT (SET TRK)            U010
TYPETBC  EQU   *-TYPETBL                BLK->CYL                   U010
         DC    AL1(TYPEAVAL)             PUSH BLKS                 U010
         DC    AL1(TYPEABLK)             PUSH BLKS/TRK             U010
         DC    AL1(TYPEADIV)             DIVIDE = TRKS             U010
         DC    AL1(TYPEATRK)             PUSH TRKS/CYL             U010
         DC    AL1(TYPEADIV)             DIVIDE = CYLS             U010
         DC    AL1(TYPEXCYL)             EXIT (SET CYL)            U010
TYPETTB  EQU   *-TYPETBL                TRK->BLK                   U010
         DC    AL1(TYPEAVAL)             PUSH TRKS                 U010
         DC    AL1(TYPEABLK)             PUSH BLKS/TRK             U010
         DC    AL1(TYPEAMUL)             MULTIPLY = BLKS           U010
         DC    AL1(TYPEXBLK)             EXIT (SET BLK)            U010
TYPETTC  EQU   *-TYPETBL                TRK->CYL                   U010
         DC    AL1(TYPEAVAL)             PUSH TRKS                 U010
         DC    AL1(TYPEATRK)             PUSH TRKS/CYL             U010
         DC    AL1(TYPEADIV)             DIVIDE = CYLS             U010
         DC    AL1(TYPEXCYL)             EXIT (SET CYL)            U010
TYPETCB  EQU   *-TYPETBL                CYL->BLK                   U010
         DC    AL1(TYPEAVAL)             PUSH CYLS                 U010
         DC    AL1(TYPEATRK)             PUSH TRKS/CYL             U010
         DC    AL1(TYPEAMUL)             MULTIPLY = TRKS           U010
         DC    AL1(TYPEABLK)             PUSH BLKS/TRK             U010
         DC    AL1(TYPEAMUL)             MULTIPLY = BLKS           U010
         DC    AL1(TYPEXBLK)             EXIT (SET BLK)            U010
TYPETCT  EQU   *-TYPETBL                CYL->TRK                   U010
         DC    AL1(TYPEAVAL)             PUSH CYLS                 U010
         DC    AL1(TYPEATRK)             PUSH TRKS/CYL             U010
         DC    AL1(TYPEAMUL)             MULTIPLY = TRKS           U010
         DC    AL1(TYPEXTRK)             EXIT (SET TRK)            U010
         SPACE 3
R0       EQU   0                                                   U001
R1       EQU   1                                                   U001
R2       EQU   2                                                   U001
R3       EQU   3                                                   U001
R4       EQU   4                                                   U001
R5       EQU   5                                                   U001
R6       EQU   6                                                   U001
R7       EQU   7                                                   U001
R8       EQU   8                                                   U001
R9       EQU   9                                                   U001
R10      EQU   10                                                  U001
R11      EQU   11                                                  U001
R12      EQU   12                                                  U001
BASE     EQU   R12                                                 U001
R13      EQU   13                                                  U001
R14      EQU   14                                                  U001
R15      EQU   15                                                  U001
         SPACE 3
         END
