RELEASE  TITLE 'TSO DATA SET SPACE RELEASE COMMAND'
*---------------------------------------------------------------------*
*                                                                     *
* TITLE -      TSO DATA SET SPACE RELEASE COMMAND                     *
*                                                                     *
* FUNCTION -   PROVIDE THE ABILITY FOR A TSO USER TO RELEASE UNUSED   *
*              SPACE IN A DATA SET, OR A SERIES OF DATA SETS.         *
*                                                                     *
* OPERATION -  ACCEPT FROM THE TSO USER A COMMAND STRING CONTAINING   *
*              THE NAME(S) OF THE DATA SETS TO BE PROCESSED. OPEN     *
*              EACH DATA SET WITH DISP=MOD, THEN CLOSE THE DATA SET.  *
*                                                                     *
* INPUT -      STANDARD COMMAND PROCESSOR PARAMETER LIST POINTED TO   *
*              BY REGISTER 1                                          *
*                                                                     *
* OUTPUT -     UNUSED SPACE RELEASED IN THE REQUESTED DATA SETS.      *
*                                                                     *
* ATTRIBUTES - REENTRANT, REUSEABLE, REFRESHABLE.                     *
*                                                                     *
* UPDATES -                                                           *
*  24Apr88 U010 EMS  fix for asmh under mvs/xa.                       *
*  28Aug87 U009 SDM  Use USID to generate fully qualified DSNAME.     *
*  06Aug87 U008 SDM  Fix VERDSN routine 0C4 bug found under MVS/XA.   *
*                    Initialize all 8 characters of DA08SER for XA.   *
*                    Call DAIRFAIL to report DAIR return codes.       *
*  20OCT81 U007 SDM  FIX BUG WHEN RELEASE BYPASSED FOR KEEP TOO BIG   *
*  06AUG80 U006 SDM  ELIMINATE SPACE REQUEST IN JFCB TO FIX NON-CYL   *
*                       RELEASE BUG                                   *
*  09JUN80 U005 SDM  1) ELIMINATE 'CLEAR' MACRO                       *
*                    2) ADD LTORG RIGHT AFTER CODE                    *
*                    3) USE MVS MACRO FOR JFCB                        *
*                    4) SHORTEN PROMPT MESSAGE FOR NON-CYL RELEASE    *
*                    5) ELIMINATE CYLINDER BOUNDARY TEST              *
*                    6) ELIMINATE SECOND DCB                          *
*                    7) DETERMINE FINAL SIZE BY OPENING FILE AGAIN    *
*                    8) USE OBTAIN TO DETERMINE ORIGINAL ALLOC TYPE   *
*  01JUN79 U004 SDM  1) ELIMINATE 'TPUTX' MACRO                       *
*                    2) IMPROVE 'CLEAR' MACRO CODE                    *
*  31MAY79 U003 LDW  MVS UPDATES FROM MIC'S VERSION                   *
*  08FEB79 U002 JCJ  1) DE-ALLOCATE DATASETS AS WELL AS DDNAMES.      *
*                    2) ADD 'PDS/NOPDS' KEYWORDS (DEFAULT 'PDS') TO   *
*                       ALLOW/INHIBIT RELEASE OF DSORG=PO DATASETS.   *
*                    3) FIX ANCIENT DE-ALLOCATION/CLOSE BUG.          *
*  03OCT78 U001 JCJ  RELEASE DATASETS ALLOCATED CYLINDER ON A         *
*                    CYLINDER (NOT TRACK) BOUNDARY; IF USE OF A       *
*                    PARTIAL SPACE REQUEST WILL RELEASE TO A NON-CYL  *
*                    BOUNDARY, ASK IF RELEASE SHOULD BE PERFORMED.    *
*                                                                     *
*---------------------------------------------------------------------*
         EJECT
         MACRO
&NAME    ENTER &TYPE
         AIF   ('&TYPE' NE '').A1
&NAME    CSECT
         SPACE 2
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
WORKREG  EQU   10
BASEREG1 EQU   11
BASEREG2 EQU   12
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 5
         SAVE  (14,12),,&NAME._&SYSDATE._&SYSTIME                  u010
         LR    BASEREG1,R15
         LA    BASEREG2,4095(BASEREG1)
         LA    BASEREG2,1(BASEREG2)
         USING &NAME,BASEREG1,BASEREG2
         B     IHB&SYSNDX
         DC    C'COPYRIGHT 1972 BY FIREMAN''S FUND INSURANCE'
         DC    C'COPYRIGHT 1973 BY SECURITY PACIFIC NATIONAL BANK'
IHB&SYSNDX DS  0H
         SPACE 2
         MEXIT
.A1      AIF   ('&TYPE' NE 'VALCHECK').A2
&NAME    SAVE  (14,12)
         L     WORKREG,4(1)   WORK AREA ADDRESS
         LM    BASEREG1,BASEREG2,BASES RESTORE BASE REGISTERS
         L     R9,0(1)       PDE ADDRESS
         LA    R15,VALSAVE
         ST    R13,4(R15)
         ST    R15,8(R13)
         LR    R13,R15
         SPACE 3
         MEXIT
.A2      ANOP
         MNOTE 8,'INVALID TYPE ''&TYPE'''
         MEND
         SPACE 2
         MACRO
&NAME    EXIT  &LV=
&NAME    DS    0H
         AIF   ('&LV' EQ '').A1
         LR    R2,R13         ADDR OF THIS SAVE AREA
.A1      L     R13,4(R13)
         STM   R15,R1,16(R13) RETURN REGS 15, 0, 1
         AIF   ('&LV' EQ '').A2 NOT DYNAMIC CORE
         FREEMAIN R,LV=&LV,A=(R2)
.A2      SPACE 1
         RETURN (14,12),T
         MEND
         SPACE 2
         MACRO
&NAME    MSG   &TEXT
         LCLA  &A
&A       SETA  K'&TEXT-2+4
&NAME    DC    H'&A',H'0',C&TEXT
         MEND
         EJECT
RELEASE  ENTER
         LR    R2,R1          SAVE ADDR OF CPPL
         SPACE 1
         L     R3,CORESIZE
         GETMAIN R,LV=(R3)
         SPACE 2
         LR    WORKREG,R1     ADDR OF WORK AREA
         USING WORKAREA,WORKREG
         EJECT
*
*        CLEAR WORK AREA
*
         LR    R4,WORKREG     POINT TO WORKAREA                    U003
         LA    R5,0(,R3)      LOAD ITS LENGTH                      U003
         SR    R6,R6          ZERO REG 6                           U003
         SR    R7,R7          ZERO REG 7                           U003
         MVCL  R4,R6          CLEAR WORK AREA                      U003
         SPACE 2
         STM   BASEREG1,BASEREG2,BASES SAVE BASE ADDRESSES
         SPACE 2
         LA    R15,MAINSAVE
         ST    R15,8(R13)
         ST    R13,4(R15)
         LR    R13,R15
         MVI   OPENLIST,X'80'                                      U003
         EJECT
*
*        LOAD TSO SERVICE ROUTINES
*
         LOAD  EPLOC==CL8'IKJEHCIR'                                U003
         ST    R0,ADDRCIR
         SPACE 3
*                                                                  U003
*        SAVE CPPL ADDRESSES                                       U003
*                                                                  U003
         SPACE 3
         USING CPPL,R2        BASE FOR COMMAND PARM LIST           U003
         MVC   ADDRUPT,CPPLUPT ADDR OF USER PROFILE TABLE          U003
         MVC   ADDRPSCB,CPPLPSCB                                   U003
         MVC   ADDRECT,CPPLECT ADDR OF ENVIROMENT TABLE            U003
         MVC   ADDRCBUF,CPPLCBUF                                   U003
         DROP  R2                                                  U003
         EJECT
*
*        BUILD PARSE PARAMETER LIST AND INVOKE
*        IKJPARS TO ANALYZE COMMAND OPERANDS
*
         SPACE 3
         LA    R1,PARSELST    AREA FOR PARSE PARAMETERS
         USING PPL,R1         BASE FOR PARSE PARAMETER LIST
         SPACE 2
         MVC   PPLUPT,ADDRUPT PASS UPT ADDRESS
         MVC   PPLECT,ADDRECT AND ECT ADDRESS
         MVC   PPLCBUF,ADDRCBUF AND COMMAND BUFFER ADDR
         SPACE 1
         ST    WORKREG,PPLUWA ALSO WORK AREA ADDR FOR VALIDITY EXITS
         SPACE 1
         LA    R0,ATTNECB     ECB FOR ATTN INTERRUPTS
         MVI   ATTNECB,0      CLEAR ECB
         ST    R0,PPLECB      PASSE TO PARSE
         SPACE 1
         LA    R0,ADDRANSR    PASS ADDR OF WORD WHERE PARSE
         ST    R0,PPLANS      RETURNS PDL ADDRESS
         SPACE 1
         MVC   PPLPCL,ADDRPCL STORE PCL ADDRESS
         SPACE 3
         CALLTSSR EP=IKJPARS  INVOKE PARSE                         U003
         DROP  R1
         SPACE 2
         LA    R14,MAXPARSE   RETURN CODE LIMIT
         SPACE 1
         CR    R15,R14        VERIFY RETURN CODE WITHIN LIMITS
         BH    PARSEBAD       NO, ERROR
         SPACE 1
         B     *+4(R15)       PROCESS RETURN CODE
         SPACE 1
PARSERET B     PARSEOK         0- SUCESSFUL
         B     ERROROUT        4- PARSE UNABLE TO PROMPT
         B     ERROROUT        8- USER ENTERED ATTENTION
         B     PARSEBAD       12- INVALID PARAMETERS
         B     PARSEBAD       16- PARSE INTERNAL FAILURE
         B     ERROROUT       20 - VALIDITY CHECK ERROR
MAXPARSE EQU   *-PARSERET
         SPACE 5
PARSEBAD DS    0H
         MVC   MSGTEXT2+4(L'MSGPARSE),MSGPARSE
         LA    R1,MSGTEXT2+4+L'MSGPARSE
         SPACE 1
         CVD   R15,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  0(2,R1),DOUBLE
         SPACE 1
         LA    R0,MSGTEXT2-2
         SR    R1,R0
         SLL   R1,16
         ST    R1,MSGTEXT2
         SPACE 2
         LA    R0,MSGTEXT2    PUT OUT 'COMMAND ERROR' MSG
         LA    R1,MSGCMDER
         SPACE 1
         BAL   R14,ERRORMSG
         SPACE 3
EXIT12   DS    0H
ERROROUT LA    R15,12         ERROR CODE 12 - COMMAND FAILED
         B     RETURN
         SPACE 1
EXIT0    SR    R15,R15
         SPACE 3
RETURN   LTR   R2,R15         NORMAL EXIT?
         BZ    RETURN1        YES
         SPACE 2
         LA    R1,PARMLIST    AREA FOR STACK PARM LIST
         USING IOPL,R1
         SPACE 1
         MVC   IOPLUPT,ADDRUPT
         MVC   IOPLECT,ADDRECT
         LA    R0,ATTNECB
         MVI   ATTNECB,0
         ST    R0,IOPLECB
         SPACE 2
         STACK PARM=PARMLIST+16,DELETE=ALL,MF=(E,(1))
         SPACE 3
         TCLEARQ INPUT        CLEAR INPUT BUFFERS
         SPACE 3
RETURN1  DS    0H
         BAL   R14,FREEPDL    FREE THE PARSE STROAGE
         SPACE 3
         LR    R15,R2         RESTORE RETURN CODE
         SPACE 1
         L     R0,CORESIZE
         SPACE 1
         EXIT  LV=(0)
         EJECT
PARSEOK  DS    0H
         L     R9,ADDRANSR    ADDR OF PARSE DESCRIPTOR LIST
         USING PDL,R9         RETURNED BY PARSE
         SPACE 2
*  ----  CHECK IF DSORG=PO DATASETS ARE TO BE RELEASED.            U002
         SPACE 2
         CLI   OPTPDS+1,OPTPDS#N 'NOPDS' SPECIFIED?                U002
         BNE   DO#PDS         NO - CONTINUE                        U002
         SPACE 2
         OI    FLAGS2,FNOPDS  FLAG NO RELEASE ON DSORG=PO DATASETS U002
*U004    TPUTX 'PARTITIONED DATASETS WILL NOT BE RELEASED'         U002
         LA    R1,MSGNOPDS    NO PDS'S NEED APPLY                  U004
         SR    R0,R0          NO SECOND LEVEL MESSAGE              U004
         BAL   R14,ERRORMSG   USE PUTLINE TO WRITE THE MESSAGE     U004
         SPACE 2
DO#PDS   EQU   *                                                   U002
         SPACE 2
         LA    R2,OPTDSN      ADDR OF DSNAME PDL
         SPACE 3
NEXTPDL  DS    0H
         NI    FLAGS,X'FF'-FMATCH-FCVOL CLEAR DATA SET FOUND FLAGS
         SPACE 2
         MVC   DSNAME,SPACES                                       U005
         SPACE 1
         L     R15,0(R2)      MOVE DSNAME TO AREA
         LH    R14,4(R2)
         STH   R14,DSNLEN
         BCTR  R14,0
         MVC   DSNAME(0),0(R15)
         EX    R14,*-6
         SPACE 1
         MVC   PASSWORD,SPACES                                     U005
         TM    22(R2),X'80'   PASSWORD SUPPLIED?
         BZ    NOPASS         NO
         SPACE 1
         L     R15,16(R2)
         LH    R14,20(R2)
         BCTR  R14,0
         MVC   PASSWORD(0),0(R15)
         EX    R14,*-6
NOPASS   DS    0H
         SPACE 2
         BAL   R14,INDXSCAN   DETERMINE IF PATTERN INDEX SPECIFIED
         B     NOPATTRN       00-SYNTAX ERROR
         B     NOPATTRN       04-NOT PATTERN FORMAT
*                             08-DSN IS PATTERN
         EJECT
*
         SPACE 1
         MVC   PATTERN,SPACES CLEAR PATTERN AREA                   U005
         SPACE 2
*
*        PROCESS REQUEST BY INDEX LEVEL(S)
*
         SPACE 2
         SR    R5,R5          ZERO CIR BLOCK ADDR
         SR    R3,R3          ZERO INDEX LEVEL COUNTER
         LA    R4,PATTERN-1
         SPACE 2
         BAL   R14,PUSHCIR    GET ANOTHER CIR BLOCK
         USING CIRBLOCK,R5
         SPACE 2
NEXTLVL  DS    0H
         NI    CIRFLAGS,X'FF'-FLINDEX
         LA    R0,1(R3)       JUMP INDEX COUNTER
         CH    R0,INDEXCNT    CHECK FOR END OF SCAN
         BH    FINDDS         YES, END OF THIS LEVEL
         BL    NOTLAST
         OI    CIRFLAGS,FLINDEX  INDICATE LAST INDEX LEVEL
NOTLAST  DS    0H
         SPACE 1
         LR    R14,R3
         LA    R15,10
         LR    R3,R0
         MR    R14,R14       OFFSET OF INDEX NAME
         LA    R15,INDXLIST(R15)
         LH    R14,0(R15)
         LTR   R14,R14        PATTERN LEVEL?
         BZ    ANYINDEX       YES
         SPACE 1
         LA    R0,1(R4,R14)   END OF DSNAME
         LA    R1,PATTERN+L'PATTERN
         CR    R0,R1
         BH    INDXERR
         SPACE 1
         BCTR  R14,0
         MVI   0(R4),C'.'
         MVC   1(,R4),2(R15)
         EX    R14,*-6
         LA    R4,2(R4,R14)   JUMP DSNAME POINTER
         TM    CIRFLAGS,FLINDEX
         BO    FINDDS
         B     NEXTLVL
         SPACE 1
ANYINDEX DS    0H
         BAL   R14,PUSHCIR    NEXT WORK BLOCK
         SPACE 1
         MVC   DSNAME,SPACES                                       U005
         SPACE 1
         LR    R15,R4
         LA    R0,PATTERN
         SR    R15,R0
         STH   R15,DSNLEN
         SPACE 1
         BCTR  R15,0
         MVC   DSNAME(0),PATTERN
         EX    R15,*-6
         SPACE 2
SCANBLK  DS    0H
         TM    CIRFLAGS,FLINDEX  AT END OF NAME?
         BO    ENDLEVEL       YES, LOCATE BY DSNAME
         LA    R0,#INDEX      LOCATE BY INDEX
#INDEX   EQU   X'02'
         SPACE 1
         LA    R15,CIRDATA
         ST    R15,PTRENTRY
         BAL   R14,CALLCIR    LOCATE CIR INFORMATION
         LTR   R15,R15        SUCCESSFUL?
         BNZ   LASTINDX
         L     R1,PTRENTRY
         SPACE 2
NXTINDEX DS    0H
         L     R1,PTRENTRY
         TM    CIRFLAGS,FLINDEX
         LA    R15,ID#INDEX
         BZ    *+8
         LA    R15,ID#DSN
         SPACE 1
         CLI   0(R1),0
         EX    R15,*-4
ID#INDEX EQU   X'00'
ID#DSN   EQU   X'07'
         BNE   NXTENTRY       NO, GET NEXT ENTRY
         SPACE 2
         LA    R14,1(R1)
         LA    R1,8(R1)       SCAN FOR END OF INDEX
         CLI   0(R1),C' '
         BNE   *+8
         BCT   R1,*-8
         SPACE 1
         SR    R1,R14         LENGTH OF INDEX
         BM    INDXERR
         SPACE 1
         LA    R0,2(R4,R1)    END OF NAME
         LA    R15,PATTERN+L'PATTERN
         CR    R0,R15
         BH    INDXERR
         SPACE 1
         MVC   1(,R4),0(R14)
         EX    R1,*-6
         SPACE 1
         MVI   0(R4),C'.'
         LA    R4,2(R1,R4)
         SPACE 1
         TM    CIRFLAGS,FLINDEX
         BO    RLSETHIS
         SPACE 2
         B     NEXTLVL        SCAN NEXT LEVEL
         SPACE 3
INDXERR  DS    0H
NXTENTRY DS    0H
         L     R1,PTRENTRY
         LH    R3,CNTINDEX
         L     R4,PTRINDEX
         CLI   0(R1),X'FF'    END OF CURRENT BLOCK?
         BE    ENDBLOCK       YES
         SPACE 1
         CLI   0(R1),X'00'    INDEX ENTRY
         LA    R0,12
         BE    UPENTRY
         CLI   0(R1),X'07'    DSNAME ENTRY?
         LA    R0,9
         BE    UPENTRY
         CLI   0(R1),X'02'
         LA    R0,16
         BE    UPENTRY
         SPACE 3
CIRERROR EX    0,*
         SPACE 2
UPENTRY  DS    0H
         AR    R1,R0
         ST    R1,PTRENTRY    SAVE NEW ENTRY POINTER
         SPACE 1
         B     NXTINDEX
         SPACE 2
ENDBLOCK DS    0H
         OC    1(3,R1),1(R1)  END OF CHAIN?
         BZ    LASTINDX       YES
         SPACE 1
         MVC   TTR,1(R1)      NO, TTR OF NEXT BLOCK
         MVC   CVOL,4(R1)     ALSO CVOL NAME
         OI    FLAGS,FTTR+FCVOL INDICATE LOCATE BY TTR
         SPACE 1
         B     SCANBLK        SCAN NEW BLOCK
         SPACE 3
LASTINDX DS    0H
         BAL   R14,POPCIR     POP BACK ONE BLOCK
         B     ENDCHAIN       IF AT END OF CHAIN
DOWNINDX DS    0H
         B     NXTENTRY
         SPACE 3
ENDLEVEL DS    0H
         LA    R0,#DATASET    LOCATE BY DATA SET
#DATASET EQU   X'01'
         LA    R15,CIRDATA
         ST    R15,PTRENTRY
         BAL   R14,CALLCIR    LOCATE
         SPACE 2
         LTR   R15,R15        DATA SET PRESENT?
         BNZ   DOWNINDX
         SPACE 2
         B     NXTINDEX
         SPACE 3
RLSETHIS DS    0H
         LR    R15,R4
         LA    R1,PATTERN
         SR    R15,R1
         SPACE 2
         MVC   DSNAME,SPACES                                       U005
         SPACE 1
         STH   R15,DSNLEN
         BCTR  R15,0
         MVC   DSNAME(0),PATTERN
         EX    R15,*-6
         SPACE 2
         BAL   R14,RLSEDS     RELEASE SPACE IN THIS DATA SET
         SPACE 1
         B     NXTENTRY
         SPACE 5
FINDDS   DS    0H
         LR    R15,R4
         LA    R0,PATTERN
         SR    R15,R0
         STH   R15,DSNLEN
         SPACE 1
         MVC   DSNAME,SPACES                                       U005
         SPACE 1
         BCTR  R15,0
         MVC   DSNAME(0),PATTERN
         EX    R15,*-6
         SPACE 2
         NI    CIRFLAGS,X'FF'-FLINDEX
         LA    R0,#VOLUMES    LOCATE BY VOLUME
#VOLUMES EQU   X'04'
         LA    R15,BUFFER
         BAL   R14,CALLCIR
         SPACE 1
         LTR   R15,R15
         BNZ   NXTENTRY
         B     RLSETHIS
         EJECT
*
*        PUSH DOWN STACK FOR NEW INDEX LEVEL
*
         SPACE 2
PUSHCIR  DS    0H
         ST    R14,R14SAVE
         SPACE 1
         L     R1,BLOCKPTR    FREE BLOCK?
         LTR   R1,R1          YES, USE IT
         BNZ   PUSHCIR1
         SPACE 1
         GETMAIN R,LV=SIZECIR
         SPACE 1
         XC    0(LENCIR,R1),0(R1)
         SPACE 2
PUSHCIR1 DS    0H
         LR    R14,R5         SAVE ADDR OF LAST CIR BLOCK
         LR    R5,R1          ADDRESS OF NEW CIR BLOCK
         L     R15,CIRCHAIN
         ST    R15,BLOCKPTR
         XC    CIRBLOCK(LENCIR),CIRBLOCK
         ST    R14,CIRCHAIN   SAVE POINTER TO PREVIOUS BLOCK
         SPACE 1
         ST    R4,PTRINDEX    SAVE CURRENT INDEX LEVEL ADDRESS
         STH   R3,CNTINDEX    SAVE INDEX LEVEL COUNTER
         MVC   CIRFLAGS,CIRFLAGS-CIRBLOCK(R14) SAVE PREVIOUS FLAGS
         SPACE 1
         L     R14,R14SAVE
         BR    R14
         SPACE 5
*
*        POP THE STACK UP ONE LEVEL
*
         SPACE 2
POPCIR   DS    0H
         L     R0,CIRCHAIN    PREVIOUS CIR POINTER
         MVC   CIRCHAIN,BLOCKPTR
         ST    R5,BLOCKPTR
         SPACE 2
         LR    R5,R0
         SPACE 1
         NI    CIRFLAGS,X'FF'-FLINDEX
         L     R1,PTRENTRY    RESTORE ENTRY POINTER
         L     R4,PTRINDEX    RESTORE INDEX POINTER
         LH    R3,CNTINDEX    RESTORE INDEX COUNTER
         OC    CIRCHAIN,CIRCHAIN END OF STACK?
         BCR   8,R14          YES, EXIT
         SPACE 2
         B     4(,R14)
         EJECT
*
*        CATALOG INFORMATION ROUTINE INTERFACE SUBROUTINE
*
         SPACE 2
CALLCIR  DS    0H
         ST    R14,R14SAVE
         SPACE 1
         LA    R1,CIRPARMS
         USING CIRPARM,R1
         XC    0(LCIRPARM,R1),0(R1)
         SPACE 1
         STC   R0,CIROPT      SET FUNCTION CODE
         SPACE 1
         ST    R15,CIRWA
         LA    R0,VALSAVE     SECONDARY SAVE AREA
         ST    R0,CIRSAVE
         SPACE 1
         TM    FLAGS,FTTR     READ BY TTR?
         LA    R0,DSNAME      FOR SEARCH BY NAME
         ST    R0,CIRSRCH
         BZ    CALLCIR1
         XI    FLAGS,FTTR
         LA    R0,TTR
         ST    R0,CIRSRCH
         MVI   CIRSRCH,X'80'
CALLCIR1 DS    0H
         SPACE 2
         TM    FLAGS,FCVOL    ALTERNATE CVOL?
         BZ    CALLCIR2
         LA    R0,CVOL        CVOL ADDRESS
         ST    R0,CIRCVOL     SET CVOL ADDRESS
CALLCIR2 DS    0H
         SPACE 2
         L     R15,ADDRCIR    ADDRESS OF IKJEHCIR
         BALR  R14,R15
         SPACE 2
         L     R14,R14SAVE
         BR    R14            EXIT
         EJECT
*
*        PATTERN INDEX/DSNAME SCAN SUBROUTINE
*
         SPACE 2
INDXSCAN DS    0H
         STM   14,12,12(13)
         SPACE 1
         SR    R3,R3
         LA    R0,MAXINDEX
         LA    R1,DSNAME
         LH    R15,DSNLEN
         AR    R15,R1
         BCTR  R15,0
         LA    R14,1
         NI    FLAGS,X'FF'-FPATTERN
         SPACE 1
SCAN0    DS    0H
         LR    R2,R1          SAVE START OF INDEX AREA
SCAN1    DS    0H
         CLI   0(R1),C'*'     SPECIAL INDEX?
         BE    SCAN2          YES
         CLI   0(R1),C'.'     INDEX SEPERATOR?
         BE    SCAN3          YES
         BXLE  R1,R14,SCAN1   GET NEXT CHARACTER
         SPACE 1
SCAN3    DS    0H
         LR    R14,R1
         SR    R14,R2
         SPACE 1
SCAN4    DS    0H
         LA    R3,1(R3)
         CR    R3,R0
         BH    SCAN0A
         LA    R4,10
         LR    R5,R3
         BCTR  R5,0
         MR    R4,R4
         LA    R5,INDXLIST(R5)
         STH   R14,0(R5)
         LTR   R14,R14
         BZ    SCAN5
         BCTR  R14,0
         MVC   2(0,R5),0(R2)
         EX    R14,*-6
         SPACE 1
SCAN5    DS    0H
         LA    R14,1
         BXLE  R1,R14,SCAN0
         SPACE 1
         STH   R3,INDEXCNT
         TM    FLAGS,FPATTERN
         LA    R15,4
         BZ    SCANEXIT
         LA    R15,8
         SPACE 1
SCANEXIT DS    0H
         L     14,12(13)
         LM    0,12,20(13)
         B     0(R14,R15)
         SPACE 3
SCAN0A   DS    0H             SYNTAX ERROR - TOO MANY LEVELS
         SR    R15,R15
         B     SCANEXIT
         SPACE 2
SCAN2    DS    0H
         OI    FLAGS,FPATTERN
         SR    R14,R14
         LA    R1,1(R1)
         B     SCAN4
         EJECT
*
*        END OF PATTERN DSNAME PROCESSING
*
         SPACE 2
ENDCHAIN DS    0H
         TM    FLAGS,FMATCH   WAS ANY DATA SET FOUND
         BO    NEXTDSN        YES, CONTINUE
         SPACE 2
         MVC   MSGTEXT1,MSGNOPAT
         LH    R14,MSGTEXT1
         LH    R15,4(R2)      GET PATTERN LENGTH
         LA    R0,0(R14,R15)
         STH   R0,MSGTEXT1
         LA    R14,MSGTEXT1(R14)
         BCTR  R15,0
         L     R1,0(R2)
         MVC   0(0,R14),0(R1)
         EX    R15,*-6
         SPACE 2
         LA    R1,MSGTEXT1
         SR    R0,R0
         BAL   R14,ERRORMSG
         B     NEXTDSN
         EJECT
*
*        SINGLE DATA SET NAME PROCESSING
*
         SPACE 2
NOPATTRN DS    0H
         BAL   R14,RLSEDS     RELEASE SPACE IN THIS DATA SET
         SPACE 3
*
*        GET NEXT DATA SET/INDEX LEVEL
*
         SPACE 2
NEXTDSN  DS    0H
         L     R2,24(R2)      GET LIST CHAIN ADDRESS
         LA    R2,0(R2)       CLEAR TOP BYTE
         LTR   R2,R2          ANOTHER ENTRY IN THE LIST?
         BNZ   NEXTPDL        YES, CONTINUE
         SPACE 1
         B     EXIT0          SUCESSFUL COMPLETION EXIT
         EJECT
*
*        SPACE RELEASE SUBROUTINE
*
         SPACE 3
RLSEDS   ST    R14,R14RLSE
         SPACE 2
         LA    R1,DAIRBLK     ADDRESS OF DAIR PARAMETER BLOCK
         USING DAPB08,R1
         XC    DAIRBLK(LDAIRBLK),DAIRBLK
         SPACE 2
         MVI   DA08CD+1,X'08'                                      U005
         SPACE 2
         LA    R0,DSNLEN                -> DATASET NAME
         ST    R0,DA08PDSN              SAVE FOR DAIR
         SPACE 2
         MVC   DA08UNIT,SPACES          UNIT NAME                  U005
         MVC   DA08SER,VOLUME           VOLUME NAME
         MVC   DA08MNM,SPACES           MEMBER NAME                U005
         MVC   DA08PSWD,PASSWORD        DATASET PASSWORD
         SPACE 2
         OI    DA08DSP1,DA08OLD    ASSUME DISP=(OLD,KEEP,KEEP)     U003
         OI    DA08DPS2,DA08KEEP
         OI    DA08DPS3,DA08KEP
         SPACE 1
         MVC   DA08DDN,SPACES                                      U005
         SPACE 2
         BAL   R14,CALLDAIR             ALLOCATE THE DATA SET
         LTR   R15,R15                  CHECK RETURN CODE
         BNZ   NOTALLOC                 DATA SET DID NOT ALLOCATE
         SPACE 2
         LA    R1,DAIRBLK     MOVED UP FROM BELOW FOR 'NORLSE' FIX U002
         MVC   DCB(DCBL),DUMMYDCB       MOVED FOR 'NORLSE' FIX     U005
         MVC   DDNAME,DA08DDN           MOVED FOR 'NORLSE' FIX     U002
         SPACE 2
         OI    FLAGS,FMATCH             INDICATE DATA SET MATCH
         TM    DA08DSO,X'42'            DSORG=PS OR PO?
         BZ    NORLSE                   NO, BYPASS RELEASE
         SPACE 2
*  ----  CHECK IF BYPASSING RELEASE OF PARTITIONED DATASETS.       U002
         SPACE 2
         TM    DA08DSO,X'02'            DSORG=PO DATASET?          U002
         BZ    *+12                     NO - CONTINUE              U002
         SPACE 2
         TM    FLAGS2,FNOPDS  DON'T RELEASE DSORG=PO DATASETS?     U002
         BO    NORLSE         YES - SAY RELEASE BYPASSED/CONTINUE  U002
         SPACE 2
         LA    R1,EXLST
         IC    R0,DCBEXLST-IHADCB+DCB                              U005
         ST    R1,DCBEXLST-IHADCB+DCB                              U005
         STC   R0,DCBEXLST-IHADCB+DCB                              U005
         SPACE 2
         MVC   DCBDDNAM-IHADCB+DCB,DDNAME                          U005
         SPACE 2
         LA    R0,JFCB
         ST    R0,EXLST
         MVI   EXLST,X'87'
         SPACE 2
         RDJFCB DCB,MF=(E,OPENLIST)     GET THE JFCB               U005
         SPACE 2
         NI    JFCBIND2,255-JFCDISP     RESET DISP                 U005
         OI    JFCBIND2,JFCMOD          SET DISP=MOD               U005
         SPACE 1
         XC    JFCBPQTY,JFCBPQTY        ZERO PRIMARY SPACE         U006
         XC    JFCBCTRI,JFCBCTRI        ZERO ALLOCATION TYPE       U006
         XC    JFCBSQTY,JFCBSQTY        ZERO SECONDARY SPACE       U006
         XC    JFCBDQTY,JFCBDQTY        ZERO DIRECTORY SPACE       U006
         SPACE 2
         OI    JFCBIND1,JFCRLSE         TURN ON RELEASE            U005
         OPEN  (,OUTPUT),TYPE=J,MF=(E,OPENLIST)                    U005
         SPACE 2
         BAL   R14,CALCSIZE                                        U005
         ST    R0,SIZEDS                SAVE DATASET SIZE          U005
         LTR   R0,R0                    IS THERE ANY SPACE?        U005
         BM    FULLDS                   NO, THIS ONE'S THROUGH     U005
         EJECT
*
* DETERMINE FREE SPACE IN DATASET
*
         STM   R1,R12,24(R13)           SAVE REGISTERS             U005
         LR    R3,R13
         L     R1,DCBDEBAD-IHADCB+DCB   DEB ADDRESS                U005
         LA    R2,DCBFDAD-IHADCB+DCB    CCHHR OF LAST RECORD       U005
         L     R15,CVTPTR               ADDR OF CVT                U003
         L     R15,CVTPRLTV-CVT(,R15)   CCHHR TO TTR CONVERT       U003
         BALR  R14,R15
         LR    R13,R3
         LM    R1,R12,24(R13)           RESTORE REGISTERS          U005
         SPACE 2
         LTR   R0,R0                    TOTALLY EMPTY DATASET?     U005
         BZ    EMPTY                    YES, LEAVE USED TRACKS=0   U005
         SPACE 1
         SRL   R0,16                  GET RELATIVE # OF LAST TRACK
         AH    R0,=H'1'                 TOTAL USED TRACKS          U005
         SPACE 2
EMPTY    L     R1,SIZEDS                ALLOCATED SIZE OF DATASET  U005
         SR    R1,R0                    TOTAL FREE SPACE
         BNP   FULLDS                   IF NONE IS FREE
         SPACE 1
         STH   R1,SIZEFREE
         EJECT
*
*        COMPUTE ADDRESS OF LAST TRACK IN DATA SET
*
         SPACE 1
         MVC   SAVCCHHR,DCBFDAD-IHADCB+DCB SAVE LAST CCHHR         U005
         SPACE 1
         TM    FLAGS,FPARTIAL           PARTIAL SPACE REQUEST?
         BZ    FREEALL                  NO, RELEASE ALL SPACE
         SPACE 2
         SH    R1,SIZESAVE              AMOUNT OF SPACE TO SAVE
*U007    BNP   NORLSE                   NONE TO RELEASE
         BNM   *+6                      VALUE IS VALID             U007
         SR    R1,R1                    NOT VALID, FORCE ZERO      U007
         SPACE 2
         STH   R1,SIZEFREE              SAVE AMOUNT TO BE RELEASED
         SPACE 1
         STM   R14,R12,12(R13)          SAVE REGS FROM CONVERT     U005
         SPACE 1
         L     R0,SIZEDS                END OF DATA SET            U005
         SH    R0,SIZEFREE              MINUS AMOUNT TO FREE
         BNP   EMPTY2                   DATASET IS EMPTY           U005
         BCTR  R0,0                     MINUS 1                    U005
EMPTY2   SLL   R0,16                    LEAVES REL # OF LAST TRACK U005
         O     R0,=XL4'100'             FORM TTR0 OF LAST RECORD   U005
         SPACE 1
         L     R1,DCB+(DCBDEBAD-IHADCB) GET DEB ADDRESS            U005
         LA    R2,DCB+(DCBFDAD-IHADCB)  AREA FOR CCHHR             U005
         SPACE 1
         L     R15,CVTPTR                                          U003
         L     R15,CVTPCNVT-CVT(,R15)   TTR TO CCHHR CONVERT       U003
         LR    R3,R13
         BALR  R14,R15
         LR    R13,R3
         LM    R14,R12,12(R13)          RESTORE REGISTERS
         SPACE 2
FREEALL  DS    0H
         CLOSE MF=(E,OPENLIST)          RELEASE SPACE              U005
         SPACE 1
         NI    JFCBIND1,255-JFCRLSE     TURN OFF RELEASE           U005
         OPEN  TYPE=J,MF=(E,OPENLIST)   RE-OPEN DCB                U005
         SPACE 2
         BAL   R14,CALCSIZE             GET NEW SIZE OF DATASET    U005
         L     R1,SIZEDS                OLD SIZE OF DATASET        U005
         SR    R1,R0                    AMOUNT ACTUALLY FREED      U005
         STH   R1,SIZEFREE              SAVE FOR MESSAGE           U005
         SPACE 1
         MVC   DCBFDAD-IHADCB+DCB,SAVCCHHR SET LAST BLOCK CCHHR    U005
         SPACE 2
         CLOSE MF=(E,OPENLIST)          RESTORE CORRECT LAST       U005
*                                       RECORD ADDRESS
         SPACE 2
         LH    R1,SIZEFREE    TOTAL AMOUNT OF SPACE FREED          U003
         CVD   R1,DOUBLE
         OI    DOUBLE+7,X'0F'
         SPACE 2
         SR    R15,R15
         LA    R14,10         COMPUTE WIDTH OF NUMBER
         SPACE 1
FIXWIDTH DS    0H
         SR    R0,R0
         DR    R0,R14
         LA    R15,1(R15)
         LTR   R1,R1          SIZE DETERMINED?
         BNZ   FIXWIDTH       NO
         SPACE 2
         LR    R14,R15
         SLL   R15,4          SET WIDTH FOR UNPK
         SPACE 2
         UNPK  MSGTEXT1+4(0),DOUBLE
         EX    R15,*-6
         SPACE 1
         MVI   MSGTEXT1+4,C' '
         SPACE 1
         LA    R15,MSGTEXT1+5(R14)
         MVC   0(L'MSGTRACK,R15),MSGTRACK
         LH    R1,SIZEFREE    TOTAL SIZE FREED
         BCTR  R1,0
         LTR   R1,R1          ONLY ONE TRACK?
         LA    R15,L'MSGTRACK(R15)
         BZ    ONETRACK       YES
         SPACE 1
         MVI   0(R15),C'S'
         LA    R15,1(R15)
         SPACE 1
ONETRACK DS    0H
         MVC   0(L'MSGRLSED,R15),MSGRLSED
         LA    R15,L'MSGRLSED(R15)
         SPACE 1
         MVC   0(44,R15),JFCBDSNM       DATA SET NAME              U005
         LA    R15,44(R15)
         LA    R1,MSGTEXT1
         SR    R15,R1         TOTAL MSG LENGTH
         SLL   R15,16
         ST    R15,0(R1)
         SR    R0,R0
         SPACE 1
         BAL   R14,ERRORMSG
         SPACE 2
FREEDS   DS    0H
         LA    R1,DAIRBLK
         XC    DAIRBLK(LDAIRBLK),DAIRBLK
         USING DAPB18,R1
         SPACE 2
         MVC   DA18DDN,DDNAME RELEASE THE DATA SET
         LA    R0,X'18'
         MVI   DA18CTL,DA18PERM         DE-ALLOC THE DATASET ALSO  U002
         STH   R0,DA18CD
         SPACE 2
         BAL   R14,CALLDAIR
         SPACE 2
EXITRLSE DS    0H
         L     R14,R14RLSE
         BR    R14
         EJECT
*
*        CALCULATE TOTAL AMOUNT OF SPACE IN DATA SET
*
         SPACE 2
CALCSIZE ST    R14,CSLINK               SAVE ROUTINE LINKAGE       U005
         SR    R0,R0                    DATASET SIZE WORK REG
         L     R1,DCB+(DCBDEBAD-IHADCB) GET DEB ADDR               U005
         SR    R14,R14
         ICM   R14,B'0001',DEBNMEXT(R1) GET EXTENT COUNT
         BZ    CS02                     NO EXTENTS - SIZEDS=0      U005
         SR    R15,R15
         IC    R15,DEBAMLNG(R1)         GET EXTENT SIZE
         SPACE 2
CS01     AH    R0,DEBDVMOD+14(R1) ADD NUMBER OF TRACKS IN EXTENT
         AR    R1,R15                   JUMP EXTENT POINTER
         BCT   R14,CS01                 LOOP THROUGH EXTENTS
         SPACE 2
*        R0 = TOTAL NUMBER OF TRACKS IN DATA SET
         SPACE 2
CS02     L     R14,CSLINK               RESTORE LINKAGE            U005
         BR    R14                      RETURN TO CALLER           U005
         EJECT
* THE CODE ELIMINATED BELOW (CALLED CYL#FIX) ATTEMPTS TO ROUND     U005
* THE RELEASE REQUEST TO A CYLINDER BOUNDARY.  IT MIGHT BE USEFUL  U005
* WHEN THE 'CYL' KEYWORD IS IMPLEMENTED.  ON THE OTHER HAND, IT    U005
* MIGHT JUST BE EASIER TO RESET THE JFCNWRIT (NO REWRITE) BIT AND  U005
* SET JFCBSPAC TO JFCBCYL (ALLOC TYPE 'CYL') BEFORE THE CLOSE.     U005
         SPACE 1
         AGO   .NOFIX                                              U005
*---------------------------------------------------------------------*
*                                                                     *
* WE GET TO THIS SECTION OF CODE WHILE PROCESSING A DATASET THAT IS   *
* ALLOCATED CYLINDER. OUR DEFINITION OF CYLINDER ALLOCATION ONLY      *
* TAKES INTO ACCOUNT THE FIRST EXTENT OF THE DATASET. IF THE FILE     *
* MASK IN THE DEB FOR THE FIRST EXTENT ALLOWS HEAD AND/OR CYLINDER    *
* SEEKS, WE ASSUME THE DATASET IS ALLOCATED CYLINDER.                 *
*                                                                     *
* IN THIS SECTION OF CODE, WE FIRST SET THE CYLINDER ALLOCATION BITS  *
* IN THE JFCB AND TURN OFF THE JFCB NO-REWRITE-TO-JOBQ BIT SO CLOSE   *
* WILL SEE THE CYLINDER ALLOCATION BITS. NEXT, WE MAKE THE DATASET    *
* LOOK 'FULL' UP TO A CYLINDER BOUNDARY FOR THE MAINLINE RELEASE      *
* CODE. R0 ON INPUT CONTAINS THE RELATIVE NUMBER OF TRACKS (ACTUAL-1) *
* IN USE IN THE DATASET (FROM DS1LSTAR/DCBFDAD). WE ROUND THIS DATUM  *
* UP TO A VALUE EVENLY DIVISIBLE BY THE NUMBER OF TRACKS IN A         *
* CYLINDER FOR THE RESIDENCE DEVICE AND THEN DECREMENT THE VALUE BY   *
* ONE (RELATIVE TRACKS). IF NO USER PARTIAL SPACE REQUEST IS IN       *
* EFFECT, WE EXIT TO THE MAINLINE CODE. OTHERWISE, WE CHECK IF THE    *
* END RESULT OF THE RELEASE WITH THE USER'S PARTIAL SAVE REQUEST WILL *
* BE ON A CYLINDER BOUNDARY. IF IT IS, WE EXIT TO MAINLINE TO USE THE *
* USER'S REQUEST. IF IT IS NOT, WE TELL THE USER WHAT'S UP AND ASK IF *
* THE RELEASE SHOULD BE PERFORMED. DEPENDING ON THE ANSWER, WE EITHER *
* BYPASS THE RELEASE OR EXIT TO MAINLINE TO PERFORM THE RELEASE.      *
*                                                                     *
* REGISTERS USED: R14 - WORK,TRKS-PER-CYL FOR OWNING DEVICE           *
*                 R15 - INPUT DEB POINTER,WORK                        *
*                  R0 - INPUT COUNT OF TRACKS IN USE IN DATASET,      *
*                       OUTPUT COUNT ROUNDED UP TO 'CYL' MULTIPLE     *
*                  R1 - WORK                                          *
*                  R3 - WORK                                          *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
CYL#FIX  MVI   JFCBCTRI,JFCBCYL         SET CYL ALLOC FOR CLOSE    U005
         NI    JFCBTSDM,255-JFCNWRIT    REWRITE TO JOBQ FOR CLOSE  U005
         L     R15,DEBUCBAD(,R15)       UCB ADDR OF CURRENT DEVICE U001
         L     R14,16                   CVT ADDR                   U001
         IC    R15,UCBTYP+3(,R15)       DEV CHAR TAB OFFSET INDEX  U001
         L     R14,CVTZDTAB-CVT(,R14)   ADDR/DEV CHAR TAB INDICES  U003
         N     R15,=F'15'               ISOLATE OFFSET INDEX       U001
         LR    R1,R0                    GET TRKS IN USE MINUS ONE  U001
         IC    R15,0(R15,R14)           GET DEV TABLE ENTRY OFFSET U001
         XR    R0,R0                    INIT FOR DIVIDE            U001
         ALR   R14,R15                  GEN DEV. CHAR. TAB ADDR    U001
         LH    R14,2(,R14)              GET TRKS PER CYLINDER      U001
         LR    R3,R1                    SAVE INPUT REL. TRKS VALUE U001
         SPACE 2
         ALR   R1,R14                   ADD FOR FOLLOWING ROUNDUP  U001
         DR    R0,R14                   GENERATE CYLINDER COUNT    U001
         MR    R0,R14                   CONVERT TO TRACK COUNT     U001
         LR    R0,R1                    RESET MAINLINE WORK REG    U001
         BCTR  R0,0                     BACK TO RELATIVE TRACKS    U001
         SPACE 2
         TM    FLAGS,FPARTIAL           PARTIAL SPACE REQUEST?     U001
         BZ    CYL#RET                  NO - RETURN TO MAINLINE    U001
         SPACE 2
*  ----  PERFORM SPECIAL PARTIAL SPACE REQUEST CHECKS.             U001
         SPACE 2
         LH    R1,SIZESAVE              USER'S PARTIAL REQUEST     U001
         XR    R0,R0                    SET UP FOR DIVIDE          U001
         LA    R1,1(R1,R3)              GEN USER'S VALUE/TOT TRKS  U001
         DR    R0,R14                   DIVIDE BY TRKS PER CYL     U001
         LTR   R0,R0                    USER TOTAL A CYL MULTIPLE? U001
         BZ    CYL#BYE                  YES - LET HIM HAVE HIS WAY U001
         SPACE 2
*  ----  ASK IF WE SHOULD LET THE RELEASE CONTINUE. USE TGET TO    U001
*  ----  INSURE INPUT IS COMING FROM THE TERMINAL.                 U001
         SPACE 2
         MVC   MSGTEXT1(MSGASKO),MSGASKI SPACE REQ. NOT CYL BOUND. U001
         MVC   MSGTEXT1+MSGASKO(44),JFCBDSNM  APPEND DSNAME TO MSG U005
         XR    R0,R0                    NO SECOND LEVEL MSG        U001
         LA    R1,MSGTEXT1              POINT TO MSG               U001
         BAL   R14,ERRORMSG             USE PUTLINE TO OUTPUT MSG  U001
         SPACE 2
CYL#ASK  MVC   MSGTEXT1,MSGASKR         TYPE Y TO RLSE,N TO BYPASS U001
         XR    R0,R0                    NO SECOND LEVEL MSG        U001
         LA    R1,MSGTEXT1              POINT TO MSG               U001
         BAL   R14,ERRORMSG             USE PUTLINE TO OUTPUT MSG  U001
         SPACE 2
         LA    R0,1                     LENGTH OF INPUT WE WANT    U001
         LA    R1,MAINSAVE              ADDR OF INPUT BUFFER AREA  U001
         O     R1,=XL4'80000000'        INDICATE TGET              U001
         TGET  (1),(0),R                AND DO IT                  U001
         BXLE  R15,R15,CYL#CHK          CHECK DATA IF ALL KOSHER   U001
         SPACE 2
         CH    R15,=AL2(12*2)           TOO MUCH INPUT?            U001
         BNE   NORLSE                   NO - SKIP THE DSN          U001
         SPACE 2
         TCLEARQ INPUT                  CLEAN OUT THINGS           U001
         B     CYL#ASK                  AND ASK AGAIN              U001
         SPACE 2
CYL#CHK  OI    MAINSAVE,X'40'           FORCE UPPER CASE           U001
         CLI   MAINSAVE,C'N'            SKIP THE RELEASE?          U001
         BE    NORLSE                   YES - SO DO IT             U001
         SPACE 2
         CLI   MAINSAVE,C'Y'            DO THE RELEASE ANYWAY?     U001
         BNE   CYL#ASK                  NO - GO ASK AGAIN          U001
         SPACE 2
         NI    JFCBCTRI,255-JFCBCYL     TURN OFF CYL ALLOC         U005
         OI    JFCBTSDM,JFCNWRIT        NO JFCB FOR CLOSE TO SEE   U005
         SPACE 2
CYL#BYE  LR    R0,R3                    GET REL TRK COUNT BACK     U001
         B     CYL#RET                  AND RETURN TO MAINLINE     U001
.NOFIX   ANOP  ,                                                   U005
         EJECT
FULLDS   DS    0H
         MVC   MSGTEXT1,MSGSPACE
         B     SKIPRLSE
         SPACE 2
NORLSE   DS    0H
         MVC   MSGTEXT1,MSGNRLSE
         SPACE 2
SKIPRLSE DS    0H
         LH    R15,MSGTEXT1
         LA    R14,44(R15)
         STH   R14,MSGTEXT1
         SPACE 1
         LA    R15,MSGTEXT1(R15)
         MVC   0(44,R15),JFCBDSNM                                  U005
         SPACE 2
         TM    DCB+DCBOFLGS-IHADCB,DCBOFOPN DCB OPEN?              U005
         BZ    SKIP#CLS       NO - SO DON'T CLOSE IT               U002
         SPACE 2
         CLOSE DCB,MF=(E,OPENLIST)                                 U005
         SPACE 2
SKIP#CLS EQU   *                                                   U002
         SPACE 2
         SR    R0,R0
         LA    R1,MSGTEXT1
         BAL   R14,ERRORMSG
         B     FREEDS
         EJECT
*
*
*        DATA SET NAME VALIDITY CHECK EXIT
*
*
         SPACE 3
VERDSN   ENTER VALCHECK
         MVC   VOLUME,SPACES                                       U005
         SPACE 1
         TM    6(R9),X'80'    DSNAME SPECIFIED?
         MVC   MSGTEXT1,MSGDSERR
         BZ    DSNERROR       NO, MUST ONLY BE MEMBER NAME
         SPACE 3
         MVC   DSNAME,SPACES                                       U005
         SPACE 1
         L     R15,0(,R9)     GET ADDR OF DSNAME                   U008
         LH    R14,4(,R9)     GET DSN LENGTH                       U008
         STH   R14,DSNLEN
         SPACE 1
         BCTR  R14,0
         MVC   DSNAME(0),0(R15)
         EX    R14,*-6
         SPACE 2
         BAL   R14,INDXSCAN   DETERMINE IF PATTERN DSNAME
         B     VERDSN0C       EXIT - SYNTAX ERROR
         NOP   0              RETURN - NOT PATTERN
         SR    R15,R15        RETURN - PATTERN NAME
         SPACE 2
VERDSNX  DS    0H
         EXIT
         SPACE 3
VERDSN0C DS    0H
         MVC   MSGTEXT1,MSGNOPAT
         SPACE 1
DSNERROR DS    0H
         LH    R1,MSGTEXT1
         LH    R14,4(,R9)     LENGTH OF DSN                        U008
         LA    R0,0(R14,R1)
         STH   R0,MSGTEXT1
         SPACE 1
         LA    R1,MSGTEXT1(R1)
         L     R15,0(,R9)                                          U008
         SPACE 1
         BCTR  R14,0
         MVC   0(0,R1),0(R15)
         EX    R14,*-6
         SPACE 1
         LA    R1,MSGTEXT1
         SR    R0,R0
         SPACE 1
         BAL   R14,ERRORMSG
         LA    R15,4                    RETURN CODE OF 4
         B     VERDSNX
         EJECT
*
*        VOLUME VERIFICATION SUBROUTINE
*
         SPACE 2
VERVOL   ENTER VALCHECK
         L     R15,0(R9)
         LH    R14,4(R9)
         SPACE 2
         MVC   VOLUME,SPACES                                       U005
         SPACE 2
         BCTR  R14,0
         MVC   VOLUME(0),0(R15)
         EX    R14,*-6
         SPACE 2
         SR    R15,R15
         EXIT
         EJECT
*
*        FREE SPACE VALIDITY CHECK SUBROUTINE
*
         SPACE 2
VERSAVE  ENTER VALCHECK
         L     R15,0(R9)
         LH    R14,4(R9)
         SPACE 1
         BCTR  R14,0
         PACK  DOUBLE,0(,R15)
         EX    R14,*-6
         SPACE 1
         CVB   R1,DOUBLE
         STH   R1,SIZESAVE
         SPACE 1
         OI    FLAGS,FPARTIAL
         SPACE 2
         SR    R15,R15
         SPACE 2
         EXIT
         EJECT
*
*        PARSE CLEANUP ROUTINE
*
         SPACE 3
FREEPDL  DS    0H
         SPACE 1
         ST    R14,R14SAVE
         SPACE 1
         IKJRLSA ADDRANSR     RELEASE THE STORAGE
         SPACE 2
         XC    ADDRANSR,ADDRANSR
         SPACE 1
         L     R14,R14SAVE
         BR    R14
         EJECT
*
*        DYNAMIC ALLOCATION INVOCATION SUBROUTINE
*
         SPACE 3
CALLDAIR DS    0H
         ST    R14,R14SAVE    SAVE LINKAGE REGISTER
         SPACE 2
         LA    R1,PARMLIST    BUILD DYNAMIC ALLOCATION PARAMETER LIST
         USING DAPL,R1
         SPACE 1
         MVC   DAPLUPT,ADDRUPT
         MVC   DAPLECT,ADDRECT
         MVC   DAPLPSCB,ADDRPSCB
         SPACE 1
         LA    R0,ATTNECB
         MVI   ATTNECB,0
         ST    R0,DAPLECB
         SPACE 1
         LA    R0,DAIRBLK
         ST    R0,DAPLDAPB
         SPACE 2
         CALLTSSR  EP=IKJDAIR                                      U003
         ST    R15,DAIRRC     Save DAIR RC for DAIRFAIL            U008
         SPACE 2
         L     R14,R14SAVE    RESTORE LINKAGE REGISTER
         BR    R14            EXIT
         EJECT
NOTALLOC DS    0H
         TM    FLAGS,FPATTERN PATTERN REQUEST?
         BO    EXITRLSE       YES, EXIT W/O A MESSAGE
         SPACE 2
         LA    R14,MAXDAIR
         CR    R15,R14        CHECK DAIR RETURN CODE
         BH    DAIRBAD        VERY BAD ERROR
         SPACE 3
         B     *(R15)         DAIR ERROR PROCESSING
         B     DAIRBAD        RC=04 INVALID DAIR PARAMETERS
         B     DAIRCAM        RC=08 ERROR IN CATALOG MANAGEMENT
         B     DAIRDYN        RC=12 ERROR IN DYNAMIC ALLOCATION
         B     DAIRFULL       RC=16 NO SPACE IN TIOT
MAXDAIR  EQU   16
         SPACE 3
DAIRFULL LA    R1,MSGFULL     ERROR MSG
         LA    R0,MSGFULL1    SECOND LEVEL MSG
         OI    FLAGS,FNORETRY
         B     ALLOCERR
         EJECT
*
*        PROCESS ERRORS FROM CATALOG MANAGEMENT
*
         SPACE 2
DAIRCAM  DS    0H
         SPACE 2
*
*        PROCESS ERRORS FROM DYNAMIC ALLOCATION
*
         SPACE 3
DAIRDYN  DS    0H
         LA    R1,DFPLST      Area for DAIRFAIL parameter list     U008
         USING DFDSECTD,R1    DAIRFAIL parameter list              U008
         LA    R15,PARMLIST   -> failing DAIR parameter list       U008
         ST    R15,DFDAPLP    Set address for DAIRFAIL             U008
         LA    R15,DAIRRC     -> Return code from DAIR             U008
         ST    R15,DFRCP      Set address for DAIRFAIL             U008
         LA    R15,=A(0)      Don't know where IKJEFF02 is         U008
         ST    R15,DFJEFF02   Set address for DAIRFAIL             U008
         LA    R15,DFID       -> DAIRFAIL request type halfword    U008
         ST    R15,DFIDP      Set address for DAIRFAIL             U008
         MVC   DFID,=AL1(0,DFDAIR)  DIRFAIL flags set to:          U008
*                             use PUTLINE, error is from DAIR      U008
         DROP  R1             DFDSECTD                             U008
         LINK  EP=IKJEFF18    Call DAIRFAIL                        U008
         B     EXITRLSE       Go process another dataset           U008
         SPACE 3
DAIRBAD  DS    0H
         SR    R1,R1          DEFAULT TO FIRST LEVEL MSG
         LH    R14,MSGDYNER
         MVC   MSGTEXT2(0),MSGDYNER
         EX    R14,*-6        CREATE MSG - DYNAMIC ALLOCATION FAILURE
         STH   R15,DOUBLE
         LA    R14,MSGTEXT2(R14)
         UNPK  0(5,R14),DOUBLE(3)
         TR    0(4,R14),TRTABLE
         LA    R0,MSGTEXT2-4
         SR    R14,R0
         SLL   R14,16
         ST    R14,MSGTEXT2
         LA    R0,MSGTEXT2
         B     ALLOCERR
         EJECT
*
*
*        ALLOCATION ERROR MESSAGE SUBROUTINE
*
*
         SPACE 3
ALLOCERR DS    0H
         LA    R15,MSGTEXT1+4 MESSAGE BUFFER
         MVC   0(L'MSG1,R15),MSG1 MOVE 'DATA SET ' MSG TO BUFFER
         LH    R14,DSNLEN     LENGTH OF DSNAME
         LA    R15,L'MSG1(R15)
         SPACE 1
         MVC   0(0,R15),DSNAME
         EX    R14,*-6        MOVE DSNAME TO BUFFER
         AR    R15,R14
         SPACE 2
         MVC   0(L'MSG3,R15),MSG3 MOVE ' NOT ALLOCATED, ' MSG TO BUFFER
         LA    R15,L'MSG3(R15)
         SPACE 2
         LTR   R1,R1          DEFAULT FIRST LEVEL MSG?
         BNZ   ALOCERR4       NO
         SPACE 1
         LA    R1,MSG4        YES
         SPACE 1
ALOCERR4 LH    R14,0(R1)      GET MSG LEN + 4
         SPACE 1
         MVC   0(0,R15),4(R1)
         EX    R14,*-6
         AR    R15,R14
         LA    R14,MSGTEXT1+4
         SR    R15,R14
         SLL   R15,16
         ST    R15,MSGTEXT1   STORE MESSAGE LENGTH
         SPACE 1
         LA    R1,MSGTEXT1
         BAL   R14,ERRORMSG   ISSUE THE ERROR MESSAGE
         SPACE 1
         TM    FLAGS,FNORETRY
         BO    EXIT12
         SPACE 2
         B     EXITRLSE       FOR ANOTHER DATA SET
         EJECT
ERRORMSG DS    0H
         ST    R14,R14SAVE    SAVE LINKAGE REGISTER
         SPACE 1
         LTR   R0,R0          SECOND LEVEL MSG?
         BZ    ERRORM1        NO
         SPACE 1
         MVC   MSGTEXT1,0(R1) INSURE MSG IN WORK AREA
         LA    R1,MSGTEXT1
         SPACE 1
         LH    R14,0(R1)      LENGTH OF FIRST LEVEL MSG
         LA    R15,0(R14,R1)  ADDR OF END OF MSG
         LA    R14,1(R14)     JUMP MSG LENGTH
         STH   R14,0(R1)
         MVI   0(R15),C'+'    INDICATE SECOND LEVEL MSG EXISTS
         SPACE 2
         SR    R14,R14        CLEAR CHAIN FIELD
         LA    R15,1          ONE SEGMENT IN 2ND MSG
         STM   R14,R0,PUTOLD2 CREATE SECOND-LEVEL
*                             OUTPUT LINE DESCRIPTOR ('OLD')
         LA    R0,PUTOLD2
         SPACE 3
ERRORM1  LR    R14,R0         NEXT 'OLD' ADDR OR ZERO
         LA    R15,1          ONE SEGMENT
         LR    R0,R1          MSG ADDR
         STM   R14,R0,PUTOLD1 FIRST LEVEL 'OLD'
         SPACE 1
         LA    R1,PARMLIST
         USING IOPL,R1
         SPACE 1
         MVC   IOPLECT,ADDRECT
         MVC   IOPLUPT,ADDRUPT
         SPACE 1
         LA    R0,ATTNECB
         ST    R0,IOPLECB
         MVI   ATTNECB,0
         SPACE 3
         XC    PARMLIST+16(4),PARMLIST+16
         PUTLINE PARM=PARMLIST+16,MF=(E,(1)),                      U003X
               OUTPUT=(PUTOLD1,TERM,MULTLVL,INFOR)
         SPACE 3
         L     R14,R14SAVE
         BR    R14
         SPACE 3
         LTORG ,                                                   U005
         EJECT
*
*
*        P A R S E   C O N T R O L   L I S T
*
*
         SPACE 3
         PRINT NOGEN
PCLMAIN  IKJPARM DSECT=PDL
         SPACE 2
OPTDSN   IKJPOSIT DSTHING,LIST,USID,VALIDCK=VERDSN,                U009$
               PROMPT='NAME OF DATA SET TO BE RELEASED',               $
               HELP=('NAMES OF THE DATA SETS FOR WHICH UNUSED SPACE IS $
               TO BE RELEASED.')
         SPACE 2
OPTVOL   IKJKEYWD
         IKJNAME 'VOLUME',SUBFLD=$VOLUME
         SPACE 2
OPTSPACE IKJKEYWD
         IKJNAME 'SPACE',SUBFLD=$SAVE
         IKJNAME 'LEAVE',SUBFLD=$SAVE
         IKJNAME 'KEEP',SUBFLD=$SAVE
         IKJNAME 'SAVE',SUBFLD=$SAVE
         SPACE 2
OPTPDS   IKJKEYWD DEFAULT='PDS'                                    U002
         IKJNAME 'PDS'                                             U002
         IKJNAME 'NOPDS'                                           U002
OPTPDS#N EQU   2                        'NOPDS' KEYWORD POSITION   U002
         SPACE 2
$VOLUME  IKJSUBF
OPTSER   IKJIDENT 'VOLUME NAME',VALIDCK=VERVOL,                        $
               HELP=('NAME OF THE VOLUME ON WHICH THE DATA SET(S) RESID$
               E.','ALL DATA SETS MUST RESIDE ON THIS VOLUME.'),       $
               FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=6
         SPACE 2
$SAVE    IKJSUBF
OPTSAVE  IKJIDENT 'SPACE VALUE',VALIDCK=VERSAVE,                       $
               HELP=('AMOUNT OF FREE SPACE TO BE RETAINED IN THE DATA S$
               SET(S).'),                                              $
               FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=4
         SPACE 2
         IKJENDP
         SPACE 2
         PRINT GEN
         EJECT
*
*
*        CONSTANTS
*
*
         SPACE 2
UCBTYP   EQU   X'10'                    TYPE FIELD IN UCB          U001
         SPACE 1
DEBAMLNG EQU   4
DEBNMEXT EQU   16
DEBDVMOD EQU   32
DEBUCBAD EQU   X'20'                    LOC OF UCB ADDR            U001
         SPACE 2
         DS    0F
CORESIZE DC    AL1(1),AL3(LENWORK)
         SPACE 1
ADDRPCL  DC    A(PCLMAIN)     ADDR OF MAIN PARSE CONTROL LIST
         SPACE 3
TRTABLE  EQU   *-X'F0'
         DC    C'0123456789ABCDEF'
         SPACE 2
DUMMYDCB DCB   DDNAME=X,DSORG=PS,MACRF=W
DCBL     EQU   *-DUMMYDCB                                          U005
         SPACE 2
SPACES   DC    CL44' '                                             U005
         EJECT
*
*        PROGRAM MESSAGES
*
         SPACE 2
         PRINT NOGEN
         SPACE 1
MSGNOPDS MSG   ' PARTITIONED DATA SETS WILL NOT BE RELEASED'       U004
MSGDYNER MSG   ' DYNAMIC ALLOCATION ERROR CODE '
MSGFULL  MSG   'TOO MANY DATA SETS'
MSGFULL1 MSG   ' FREE DATA SETS NO LONGER REQUIRED'
MSGCMDER MSG   ' COMMAND SYSTEM ERROR'
MSGNRLSE MSG   ' RELEASE BYPASSED FOR DATA SET '
MSGSPACE MSG   ' NO EMPTY SPACE IN DATA SET '
MSGNOPAT MSG   ' NO DATA SETS FOUND MATCHING PATTERN NAME '
MSGDSERR MSG   ' INVALID DATA SET NAME, '
MSG4     MSG   'SYSTEM ERROR'
MSG1     DC    C' DATA SET '
MSG3     DC    C' NOT ALLOCATED, '
MSGPARSE DC    C' PARSE ERROR CODE '
MSGTRACK DC    C' TRACK'
MSGRLSED DC    C' RELEASED FROM DATA SET '
         SPACE 2
MSGASKR  MSG   ' TYPE N TO BYPASS RELEASE - Y TO RELEASE ON TRACK BOUND^
               ARY'                     SEE IF CYL ALLOC TO KILL   U001
MSGASKI  DC    AL2(MSGASKO+44,0)        PUTLINE CNTL DATA          U001
         DC    C' RELEASE REQUEST IS NOT TO CYL BOUNDARY FOR DSN = '
MSGASKO  EQU   *-MSGASKI                OFFSET TO START OF DSNAME  U001
         EJECT
*
*        DYNAMIC WORK AREA
*
         SPACE 3
WORKAREA DSECT
MAINSAVE DS    18A
VALSAVE  DS    18A
SAVCCHHR DS    CL8            REAL LAST MBBCCHHR                   U003
BASES    DS    2A             PROGRAM BASE ADDRESSES
DFPLST   DS    4F             DAIRFAIL parameter list              U008
DOUBLE   DS    D
VOLUME   DS    CL8            Same length as DA08SER               U008
DDNAME   DS    CL8
PASSWORD DS    CL8
DAIRBLK  DS    25D            SPACE FOR DAIR PARAMETER LIST
LDAIRBLK EQU   *-DAIRBLK
PARSELST DS    5A             AREA FOR PARSE PARAMETER LIST
R14SAVE  DS    A
R14RLSE  DS    A
CSLINK   DS    A
ADDRUPT  DS    A
ADDRECT  DS    A
ADDRPSCB DS    A
ADDRCBUF DS    A
ADDRCIR  DS    A
ADDRANSR DS    A
ATTNECB  DS    F
DAIRRC   DS    F              Return code from IKJDAIR             U008
CIRPARMS DS    0A
PARMLIST DS    7A
DFID     DS    XL2            DAIRFAIL caller ID                   U008
FLAGS    DS    XL2            GENERAL STATUS FLAGS
FNORETRY EQU   X'80'          TERMINATE PROCESSING
FPARTIAL EQU   X'40'           'PARTIAL' RELEASE REQUEST
FTTR     EQU   X'20'          LOCATE BY TTR
FCVOL    EQU   X'10'          ALTERNATE CVOL REQUIRED
FPATTERN EQU   X'04'
FMATCH   EQU   X'01'
FLAGS2   EQU   FLAGS+1        LABEL SECOND FLAG BYTE               U002
FNOPDS   EQU   X'80'          DO NOT RELEASE DSORG=PO DATASETS     U002
         SPACE 3
CVOL     DS    CL6
         DS    X
TTR      DS    XL3,X
BLOCKPTR DS    A
         DS    X
PATTERN  DS    CL44
         DS    0F
MSGTEXT1 DS    XL124
MSGTEXT2 DS    XL124
         SPACE 3
PUTOLD1  DS    3F
PUTOLD2  DS    3F
         SPACE 3
SIZEDS   DS    F                                                   U005
SIZEFREE DS    H
SIZESAVE DS    H
DSNLEN   DS    H
DSNAME   DS    0CL44
JFCB     DS    0D                       SAME ALIGN AS DSECT        U005
         IEFJFCBN                                                  U005
         SPACE 2
DCB      DS    XL(DCBL)
EXLST    DS    F
OPENLIST DS    F
         SPACE 2
MAXINDEX EQU   22
INDEXCNT DS    H
INDXLIST DS    (MAXINDEX)XL10
LINDXLST EQU   *-INDXLIST
         SPACE 2
         DS    0D
BUFFER   DS    XL265
         SPACE 2
         DS    0D
LENWORK  EQU   *-WORKAREA
         EJECT
         IKJPPL
         IKJIOPL
         IKJPSCB
         IKJECT
         IKJCPPL
         IKJDAPL
         IKJDAP08
         IKJDAP18
         IKJEFFDF DFDSECT=YES   DAIRFAIL parameter list            U008
         EJECT
         CVT   DSECT=YES                                           U003
         EJECT
         DCBD  DSORG=PS
         EJECT
CIRBLOCK DSECT
CIRCHAIN DS    A
PTRINDEX DS    A
PTRENTRY DS    A
CIRFLAGS DS    XL2
FLINDEX  EQU   X'80'
CNTINDEX DS    H
LENCIR   EQU   *-CIRBLOCK     LENGTH OF HEADER AREA
         SPACE 2
         DS    0D
CIRDATA  DS    XL265
SIZECIR  EQU   *-CIRBLOCK
         EJECT
CIRPARM  DSECT
CIROPT   DS    F
CIRSRCH  DS    A
CIRCVOL  DS    A
CIRWA    DS    A
CIRSAVE  DS    A
LCIRPARM EQU   *-CIRPARM
         SPACE 5
         END   RELEASE
