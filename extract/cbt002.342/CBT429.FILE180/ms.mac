MS       TITLE 'MS - TSO MASTER SUMMARY COMMAND'
***********************************************************************
*                                                                     *
*                *===================================*                *
*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *
*                *===================================*                *
*                                                                     *
*   Copyright (c) 1988 by Leonard D. Woren.                           *
*   All rights reserved, except as explicitly noted herein.  This     *
*   program may be used, modified, and distributed, provided that     *
*   all of the following conditions are met:                          *
*                                                                     *
*   (1)  This notice and all references to the original author(s)     *
*        are retained forever in all copies and versions of the       *
*        source.                                                      *
*                                                                     *
*   (2)  This program may be distributed via "public domain" mods     *
*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *
*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *
*        Group) tape, etc, etc.  Only versions of this program        *
*        authorized by Leonard D. Woren may be placed on these        *
*        tapes.  Distribution of modified versions of this program,   *
*        via the above named tapes or via any method, is              *
*        specifically prohibited.                                     *
*                                                                     *
*   (3)  Permission is specifically NOT given to distribute MODIFIED  *
*        versions of this program.  Modified versions may be used     *
*        only at the site making the mods.                            *
*                                                                     *
*   (4)  The only charge which may be made for distribution is to     *
*        recover real costs, such as postage, or creating a tape.     *
*                                                                     *
*   (5)  The only charge for running the program which may be made    *
*        is your normal charge for computer time.                     *
*                                                                     *
*                                                                     *
*   The reason for the restrictions on distribution of modified       *
*   versions is to try to prevent circulation of many different       *
*   versions of the program, each with a few features that aren't     *
*   in any other version.                                             *
*                                                                     *
*   Since everyone will benefit from this, please send all updates    *
*   to me.  (Address below.)  I will try merge them in, if they       *
*   have been made to a reasonably current version of the source,     *
*   and if they are in keeping with the general design of the rest    *
*   of the program.  Mods may be altered by me for this purpose.      *
*   Any such mods which are incorporated into the program will then   *
*   become governed by the restrictions specified here for the whole  *
*   program, with appropriate credit to the contributor.              *
*                                                                     *
*                                                                     *
*                                                                     *
*   Although this program has been extensively tested, and is in use  *
*   in a production environment (MVS/ESA release 3.1, with DFP 3.1),  *
*   no guarantee is made of (or responsibility assumed for) correct   *
*   or reliable operation.  I may try to help with problems.  I do    *
*   not assume any responsibility to distribute updates.              *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*   CONTACT:                                                          *
*          Leonard D. Woren                                           *
*        snail-mail:                                                  *
*          University of Southern California                          *
*          University Park  Mail Code 0251                            *
*          Los Angeles, CA   90089-0251                               *
*                                                                     *
*        e-mail:                                                      *
*          LDW@USCMVSA.BITNET                                         *
*          LDW@MVSA.USC.EDU                                           *
*          ...!usc-oberon!LDW (last resort)                           *
*                                                                     *
*          (213) 743-5391 (direct -- 11 am to 7 pm Pacific time)      *
*          (213) 743-2957 (msgs)                                      *
*                                                                     *
*          I prefer electronic mail.  If you call me long distance    *
*          and leave a msg because you didn't get me, there's a good  *
*          chance that I won't call back.  Moral:  don't leave a      *
*          message for me to call you back unless you're in 213,      *
*          818, or 714.  Sorry.                                       *
*                                                                     *
*                                                                     *
*          SHARE installation code:  USC                              *
*          GUIDE installation code:  OUY                              *
*                                                                     *
***********************************************************************
         EJECT ,
***********************************************************************
* UPDATES:                                                            *
*    16OCT89  U007 LDW - FIX FOR > 99,999.99 SECONDS OF CPU TIME      *
*                      - FIX CPU SECONDS COMPUTATION                  *
*    23AUG87  U006 LDW - FIX FOR MVS/XA                               *
*    10/28/82 U005 LDW - FIX FOR > 16M CPU SIZE                       *
*    12/16/80 U004 LDW - FIX FOR 4 CHAR CPU MODEL NUMBER              *
*                      - CHANGE TO INSTALLATION STANDARD MACROS       *
*                      - MARK SYSHELP NOT IN USE AFTER "HELP" SUBCMD  *
*    06/20/80 U003 LDW - CHANGE LINE LEN TO 78 FROM 79 (STUPID TCAM)  *
*                      - IMPROVE "LP" DISPLAY                         *
*    08/29/79 U002 SDM - SIMPLIFY IDLE INITIATOR LOGIC                *
*    11/30/76 U001     - REVISED FOR MVS R3.70 SU807. W.M. BLAKE      *
*    11/75         - FROM MVS USERS GROUP                             *
***********************************************************************
         MACRO                                                     U004
         TSWORK ,                                                  U004
         MEND                                                      U004
         SPACE 3
         COPY  @GLOBALS                                            U006
         EJECT
MS       OSENTER  ENV=(CP,SIM),PL=(CSCAN,DAIR),PARMREG=R2,         U004$
               EXIT=EXIT,RC=0,MACRO=YES                            U004
         SPACE 2
         IKJDAP2C  ,                                               U004
DA2CLEN  EQU   *-DAPB2C                                            U004
         SPACE 2
MS       CSECT                          RESUME                     U004
         SPACE 2
         MVC   ONNULL,=A(CMDJ)          DEFAULT ENTRY
         L     R3,CPPLCBUF              SET UP FOR FIRST TIME
         B     TIME1ST
         SPACE 3
* COMMAND FETCH AND ANALYZE
         SPACE 1
ASKAGAIN ICM   R1,15,GETPARM+12         GET PUTGET BUFF ADDR
         BZ    NOFREE                   NONE, THEN DON'T FREEMAIN
         LH    R0,0(R1)                 LINE LENGTH
         ICM   R0,B'1000',=X'01'        SUBPOOL
         FREEMAIN R,LV=(0),A=(1)
         SPACE 1
NOFREE   L     R3,CPPLECT
         L     R2,CPPLUPT
         PUTGET  PARM=GETPARM,UPT=(2),ECT=(3),ECB=GETECB,MF=(E,IOPLADS)
         SPACE 1
         L     R3,GETPARM+12            GET INPUT BUFFER
TIME1ST  ST    R3,CSPLCBUF              STORE FOR CMD SCAN
         ST    R3,CPPLCBUF              FOR HELP (IN CASE)
         SPACE 2
RESCAN   SR    R0,R0
         ST    R0,CSFLG                 ZERO FLAGS
* INVOKE CMD SCAN
         CALLTSSR EP=IKJSCAN,MF=(E,CSPL)
         SPACE 1
SCANRET  ICM   R2,15,CSOACNM            CMD NAME ADDR
         BZ    NULLLINE                 IF NONE DO SAME THIN
         SPACE 1
         CLI   0(R2),C'H'               IS HELP?
         BNE   NOHELP
         SPACE 1
         LA    R1,CPPL * * * * * * INVOKE HELP * * * * * * * * *
         LINK  EP=HELP
         LA    R1,DAPBAREA              -> WORK AREA               U004
         USNGX DAPB2C,R1                                           U004
         XC    DAPB2C(DA2CLEN),DAPB2C   CLEAR THE WHOLE THING      U004
         MVI   DA2CCD+1,X'2C'           SET ENTRY CODE             U004
         MVI   DA2CFLG+1,X'01'          MARK SPECIFIC DDNAME       U004
         MVC   DA2CDDN,=C'SYSHELP '     DDNAME TO BE UN-USED       U004
         DROPX R1                                                  U004
         TSDAIR  DAPB=(1)               MARK "SYSHELP" NOT-IN-USE  U004
         B     ASKAGAIN
         SPACE 1
NOHELP   CLC   =C'MS',0(R2)             FIRST TIME ENTRY
         BNE   NOT1TIME
         MVC   0(2,R2),BLANKS           BLANK 'MS' FOR RESCAN
         B     RESCAN
         SPACE 1
NULLLINE L     R15,ONNULL               GO TO SAVED EP
         BR    R15
NOT1TIME CLC   0(2,R2),=C'SS'           SYSTEM STATS
         BE    CMDSS
         CLC   0(2,R2),=C'LP'           SYSTEM STATS
         BE    CMDLP
         CLC   0(2,R2),=C'TS'           TSO    STATS
         BE    CMDTS
         CLI   0(R2),C'I'               INIT COMMAND?
         BE    CMDI
         CLI   0(R2),C'J'               JOBS COMMAND?
         BE    CMDJ
         CLI   0(R2),C'S'               TSC?
         BE    CMDS
         CLI   0(R2),C'T'               TSU
         BE    CMDT
         CLI   0(R2),C'E'               EXIT?
         BE    EXIT
         B     OPTIONS                  BAD INPUT GIVE OPTIONS
         SPACE 1
CMDI     MVC   PROMPT(2),=C'IN'
         MVC   ONNULL,=A(MAINLOOP)
         B     MAINLOOP
         SPACE 1
CMDTS    MVC   PROMPT(2),=C'TS'
         MVC   ONNULL,=A(MAINLOOP)
         B     MAINLOOP
         SPACE 1
CMDT     MVC   PROMPT(2),=C'T '
         MVC   ONNULL,=A(CMDT)
         CALL  USERS                    CALL USERS COMMAND
         B     ASKAGAIN
         SPACE 1
CMDJ     MVC   PROMPT(2),=C'J '
         MVC   ONNULL,=A(CMDJ)
         CALL  JOBS                     CALL JOB DISP COMMAND
         B     ASKAGAIN
         SPACE 1
CMDS     MVC   PROMPT(2),=C'S '
         MVC   ONNULL,=A(MAINLOOP)
         B     MAINLOOP
         SPACE 1
CMDSS    MVC   PROMPT(2),=C'SS'
         MVC   ONNULL,=A(MAINLOOP)
         B     MAINLOOP
         EJECT
* MAIN SCANNING LOOP
         SPACE 1
MAINLOOP L     R1,16                    FIND CVT
         L     R1,X'22C'(,R1)           FIND ASVT
         LA    R3,X'210'(,R1)           FIND FIRST ENTRY
         LA    R4,4                     BXLE INCREMENT
         L     R5,X'204'(,R1)           MAX ADDR SPEC
         SLA   R5,2                     MULT BY FOUR
         LA    R5,0(R3,R5)              POINT TO END
         BCTR  R5,0                     BACK UP ONE
         SPACE 1
         CLC   =C'SS',PROMPT            STATS COMMAND?
         BE    DOSS                     YES, GO DO IT
         SPACE 1
         TPUT  HEADER,L'HEADER
         SPACE 2
LOOP     TM    0(R3),X'FF'              CHECK BITS ON
         BNZ   LOOPBXLE                 SKIP IF ONE ON
         L     R2,0(,R3)                PICK UP POINTER TO ASCB
         MVC   LINE(80),BLANKS          BLANK LINE
*U002    ICM   R1,15,172(R2)            JOB NAME FOR INIT PGMS
*U002    BZ    *+10
*U002    MVC   LINE+15(8),0(R1)
         ICM   R1,15,176(R2)            JOBNAME FOR START MOUNT ETC
         BZ    *+10
         MVC   LINE+4(8),0(R1)
         SPACE 1
         ICM   R1,15,56(R2)             FIND CSCB POINTER
         BZ    TESTSYS                  NO POINTER, MUST BE SYSTASK
         SPACE 1
         ICM   R0,15,52(R1)             CHECK FOR V=R
         BZ    *+8
         MVI   LINE+13,C'R'             SET V=R INDICATOR
         SPACE 1
*U002    CLI   28(R1),0                 CHECK FOR SYSTEM TASKS
*U002    BE    TESTSYS
         CLI   28(R1),1                 CHECK FOR TSU
         BE    TESTTSU
         CLI   28(R1),3                 TEST FOR INITIATOR         U002
         BE    TESTINIT
         B     TESTSYS                  LEFT OVERS ARE STC
         SPACE 1
TESTTSU  CLI   PROMPT,C'T'              ASKING FOR TSU
         BNE   LOOPBXLE
         B     LIKEIT                   ELSE REJECT
         SPACE 1
TESTINIT CLI   PROMPT,C'I'              ASKING FOR INIT?
         BNE   LOOPBXLE
         MVC   LINE+4(6),=C'(IDLE)'                                U002
         ICM   R1,15,172(R2)            JOB NAME FOR INIT PGMS     U002
         BZ    LIKEIT                   INITIATOR IS IDLE          U002
         MVC   LINE+4(8),0(R1)                                     U002
         B     LIKEIT
         SPACE 1
TESTSYS  CLI   PROMPT,C'S'              WANT SYS TASKS?
         BNE   LOOPBXLE                 IF NOT, WE NO LIKE
         LTR   R1,R1                    CSCB PRESENT?
         BZ    LIKEIT                   NO, SKIP THE FOLLOWING
         MVC   LINE+4(8),16(R1)         MOVE IN ID
         CLI   24(R1),C' '              UNIT NAME PRES
         BNH   STNOU
         MVC   LINE+9(3),24(R1)         MOVE IN UNIT ID
         MVI   LINE+8,C'-'
STNOU    MVC   LINE+15(8),BLANKS
         SPACE 1
LIKEIT   LH    R1,36(,R2)               PICK UP ASID
         CVD   R1,DOUBLE
         UNPK  LINE(3),DOUBLE
         OI    LINE+2,C'0'              MAKE IT PRINTABLE
         SPACE 1
          AIF   (&@@SPLVL LT 200).XA01                             U006
         $AMODE 31                                                 U006
.XA01     ANOP                                                     U006
         L     R1,X'90'(,R2)            FIND OUCB
         TM    17(R1),X'80'             NON SWAP?
         BZ    *+20
         TM    LINE+13,C'R'   IS IT ALREADY V=R?
         BO    *+8            THEN DONT MARK N/S
         OI    LINE+13,C'$'
         TM    21(R1),X'80'             LONG WAIT?
         BZ    *+8
         MVI   LINE+14,C'L'
         TM    21(R1),X'40'             TERMINAL WAIT?
         BZ    *+8
         MVI   LINE+14,C'I'
         TM    21(R1),X'20'             OUTPUT   WAIT?
         BZ    *+8
         MVI   LINE+14,C'O'
         TM    21(R1),X'08'             ENQHOLD  PROCESSED
         BZ    *+8
         MVI   LINE+14,C'Q'
         SPACE 1
         SR    R0,R0
         ICM   R0,B'0011',38(R1)       XACTION SWAP COUNT
         CVD   R0,DOUBLE
         MVC   LINE+24(7),=X'4020206B202120'
         ED    LINE+24(7),DOUBLE+5
         SPACE 1
          AIF   (&@@SPLVL LT 200).XA02                             U006
         $AMODE 24                                                 U006
.XA02     ANOP                                                     U006
         SPACE 1
         SR    R0,R0
         ICM   R0,B'0011',112(R2)       LOAD # WAITS
         CVD   R0,DOUBLE
         MVC   LINE+17(7),=X'4020206B202120'
         ED    LINE+17(7),DOUBLE+5
         SPACE 1
         LH    R1,120(,R2)              ALLOC AUX SLOTS (VAM)
         SLA   R1,2                     MULT BY 4 TO GET IT IN 'K'
         CVD   R1,DOUBLE
         MVC   LINE+31(7),=X'4020206B202120'  EDIT MASK
         ED    LINE+31(7),DOUBLE+5      DO THE EDIT
         MVI   LINE+38,C'K'
         LH    R1,122(,R2)              ALLOC AUX SLOTS (NON-VAM)
         SLA   R1,2                     MULT BY 4 TO GET IT IN 'K'
         CVD   R1,DOUBLE
         MVC   LINE+39(7),=X'4020206B202120'  EDIT MASK
         ED    LINE+39(7),DOUBLE+5      DO THE EDIT
         MVI   LINE+46,C'K'
         LH    R1,152(,R2)              REAL STORAGE IN USE
         SLA   R1,2                     MULT BY 4 TO GET IT IN 'K'
         CVD   R1,DOUBLE
         MVC   LINE+47(6),=X'402020202120'  EDIT MASK              U003
         ED    LINE+47(6),DOUBLE+5      DO THE EDIT                U003
         MVI   LINE+53,C'K'                                        U003
         LM    R0,R1,64(R2)             PICK UP CPU TIME
*U007    SRDL  R0,24                    MOVE TO ODD REG
*U007    M     R0,=A(1048576)           COMPUTE IN SECONDS
*U007    D     R0,=A(10000*256)
         SRDL  R0,12                    GET MICROSECONDS           U007
         D     R0,=F'10000'             MAKE IT .01 SECONDS        U007
         CVD   R1,DOUBLE
         MVC   LINE+54(10),=X'4020206B2021204B2020'                U003
         ED    LINE+54(10),DOUBLE+4      DO THE EDIT               U003
         C     R1,=F'9999999'           DID IT FIT?                U007
         BNH   *+4+6+6                  YES - CONTINUE             U007
         MVC   LINE+54(10),=X'40206B2020206B202120'                U007
         ED    LINE+54(10),DOUBLE+3     AND DON'T SHOW HUNDREDTHS  U007
*LDW1    MVI   LINE+64,C'S'                                        U003
         LM    R0,R1,200(R2)            PICK UP SRB TIME
*U007    SRDL  R0,24                    MOVE TO ODD REG
*U007    M     R0,=A(1048576)           COMPUTE IN SECONDS
*U007    D     R0,=A(10000*256)
         SRDL  R0,12                    GET MICROSECONDS           U007
         D     R0,=F'10000'             MAKE IT .01 SECONDS        U007
         CVD   R1,DOUBLE
         MVC   LINE+64(10),=X'4020206B2021204B2020'                U003
         ED    LINE+64(10),DOUBLE+4      DO THE EDIT               U003
         C     R1,=F'9999999'           DID IT FIT?                U007
         BNH   *+4+6+6                  YES - CONTINUE             U007
         MVC   LINE+64(10),=X'40206B2020206B202120'                U007
         ED    LINE+64(10),DOUBLE+3     AND DON'T SHOW HUNDREDTHS  U007
         MVI   LINE+74,C'S'                                        U003
         MVI   LINE+64,C'S'                                        U003
         UNPK  DOUBLE(3),43(2,R2)       CONVERT DPRTY TO HEX
         TR    DOUBLE(2),HEXTAB
         MVC   LINE+76(2),DOUBLE        MOVE FOR PRNTING           U003
         SPACE 1
         TPUT  LINE,L'LINE
LOOPBXLE BXLE  R3,R4,LOOP
         SPACE 1
         B     ASKAGAIN
         EJECT
* ACTIVE LPA LISTER
         SPACE 1
CMDLP    MVC   PROMPT(2),=C'LP'
         MVC   ONNULL,=A(CMDLP)
         TPUT  LPHDR,LPHDRL             PRINT THE HEADER LINE      U003
         L     R2,16                    -> CVT
LPAFIRST L     R2,X'0BC'(,R2)           -> -> MOST RECENT LPDE
         ICM   R2,15,0(R2)              SKIP DUMMY
         BZ    ASKAGAIN                 IF NULL
LPALOOP  MVC   LINE(80),BLANKS          BLANK LINE
         LA    R3,LINE
         LA    R4,27                    BXLE SETUP                 U003
         LA    R5,LINE+78-(27-3)        -> LAST ENTRY ON LINE      U003
LPALOOP1 MVC   7(8,R3),8(R2)            MOVE IN MODULE NAME
         ST    R2,FWORK                 CONVERT LPDE ADDR TO HEX
         UNPK  DOUBLE(7),FWORK+1(4)
         TR    DOUBLE(6),HEXTAB
         MVC   0(6,R3),DOUBLE           LPDE ADDR TO PRINT LINE
         UNPK  DOUBLE(7),17(4,R2)       CONVERT EPA
         TR    DOUBLE(6),HEXTAB
         MVC   6+1+8+1(6,R3),DOUBLE     MOVE EPA TO PRINT LINE     U003
         ICM   R2,15,0(R2)              FOLLOW PNTR
         BZ    LPATPUT
         BXLE  R3,R4,LPALOOP1
LPATPUT  TPUT  LINE,L'LINE
         LTR   R2,R2
         BNZ   LPALOOP
         B     ASKAGAIN
LPHDR    DC    3CL27'-LPDE- -MODULE- -EPA--'                       U003
LPHDRL   EQU   *-LPHDR                                             U003
         SPACE 5
* CURRENT OPTIONS SUPPORTED DISPLAY
         SPACE 1
OPTIONS  MVC   PROMPT(2),=C'OP'
         MVC   ONNULL,=A(OPTIONS)
         TPUT  OP1,OPLEN
         B     ASKAGAIN
         EJECT
* SYSTEM STATISTICS DISPLAY
         SPACE 1
DOSS     SR    R7,R7                    VIO SLOTS USED COUNTER
         SR    R8,R8                    REG SLOTS IN USE COUNTER
SSLOOP   TM    0(R3),X'FF'              ENTRY IN USE
         BNZ   SSBXLE                   NO, SKIP
         L     R2,0(,R3)                PICK UP ASCB POINTER
         AH    R7,120(,R2)              PICK UP VIO PAGES
         AH    R8,122(,R2)              PICK UP AUX PAGES
SSBXLE   BXLE  R3,R4,SSLOOP
         SPACE 1
         MVC   LINE(80),BLANKS
         MVC   LINE+29(21),=C'* SYSTEM STATISTICS *'               U004
         TPUT  LINE,L'LINE
         SPACE 1
         L     R2,16                    FIND CVT
         L     R3,X'C4'(,R2)            FIND SMCA
         MVC   LINE(80),BLANKS
         MVC   LINE(7),=C'SYSTEM-'
         MVC   LINE+7(4),16(R3)         MOVE IN SYSTEM ID
         S     R2,=F'6'                 BACK UP TO CVT PREFIX
         MVC   LINE+20(8),=C'RELEASE-'
         MVC   LINE+28(2),2(R2)         FIRST HALF OF REL NO
         MVI   LINE+30,C'.'
         MVC   LINE+31(2),4(R2)         SECOND HALF OF REL NO
         UNPK  DOUBLE(5),0(3,R2)        MODEL NUM
         TR    DOUBLE(4),HEXTAB                                    U004
         MVC   LINE+40(10),=C'CPU MODEL-'
         MVC   LINE+50(4),DOUBLE                                   U004
         MVC   LINE+60(9),=C'CPU SIZE-'
         L     R3,312+6(,R2)
*U005    LA    R3,1(,R3)                BUMP BY ONE
         AH    R3,=H'1'                 BUMP BY ONE                U005
         SRL   R3,10                    CONVERT TO K
         CVD   R3,DOUBLE
         MVC   LINE+69(7),=X'4020206B202120'  EDIT MASK
         ED    LINE+69(7),DOUBLE+5      DO THE EDIT
         MVI   LINE+76,C'K'
         TPUT  LINE,L'LINE
         SPACE 1
         MVC   LINE(80),BLANKS
         MVC   LINE(16),=C'VIO SLOTS IN USE'
         SLA   R7,2                     MULT BY 4 TO MAKE K
         CVD   R7,DOUBLE
         MVC   LINE+20(10),=X'40206B2020206B202120'
         ED    LINE+20(10),DOUBLE+4
         MVI   LINE+30,C'K'
         MVC   LINE+40(17),=C'A.S. SLOTS IN USE'
         SLA   R8,2                     MULT BY 4 TO MAKE K
         CVD   R8,DOUBLE
         MVC   LINE+60(10),=X'40206B2020206B202120'
         ED    LINE+60(10),DOUBLE+4
         MVI   LINE+70,C'K'
         TPUT  LINE,L'LINE
         SPACE 1
         MVC   LINE(80),BLANKS
         MVC   LINE(17),=C'SLOT SPACE IN USE'
         AR    R7,R8                    SUM UP
         CVD   R7,DOUBLE
         MVC   LINE+20(10),=X'40206B2020206B202120'
         ED    LINE+20(10),DOUBLE+4
         MVI   LINE+30,C'K'
         L     R1,16                    FIND CVT
         L     R7,X'164'(,R1)           FIND PVT
         MVC   LINE+40(18),=C'USABLE FRAME SPACE'
         LH    R8,8(,R7)                USABLE FRAME COUNT
         SLL   R8,2                     MULT BY 4 TO GET K
         CVD   R8,DOUBLE
         MVC   LINE+60(10),=X'40206B2020206B202120'
         ED    LINE+60(10),DOUBLE+4
         MVI   LINE+70,C'K'
         TPUT  LINE,L'LINE
         SPACE 2
         CALL  PAGE
         B     ASKAGAIN
         EJECT
DOUBLE   DC    D'0'
ONNULL   DC    A(CMDJ)                  DEFAULT SUBCOMMAND
IOPLADS  DC    4F'0'                    PUTGET IOPL
GETPARM  PUTGET OUTPUT=(PROLD,SINGLE,MODE),TERMPUT=(ASIS),MF=L
FWORK    DC    F'0'
GETECB   DC    F'0'
LINE     DC    CL80' '
PROLD    DC    A(1,PRRDW)
PRRDW    DC    AL2(7,0),C' '
PROMPT   DC    CL2'IN'
BLANKS   DC    CL80' '
HEADER   DC    CL80'AID   NAME   FLGS  WAITS  SWAPS --VIO-- -SLOTS- WKG*
                SET  CPU TIME  SRB TIME PR'                        U003
OP1      DC    CL40'* * OPTIONS CURRENTLY SUPPORTED * *'
         DC    CL40'E  - END THIS PROCESSOR'
         DC    CL40'H  - HELP SUBCOMMAND (ENTER HELP HELP)'
         DC    CL40'I  - INITIATOR DISPLAY'
         DC    CL40'J  - RUNNING JOBS DISPLAY'
         DC    CL40'LP - ACTIVE LINK PACK AREA'
         DC    CL40'S  - STARTED TASK DISPLAY'
         DC    CL40'SS - SYSTEM PERFORMANCE STATISTICS'
         DC    CL40'T  - TSO USER DISPLAY'
         DC    CL40'TS - TSO USER DISPLAY W/STATISTICS'
OPLEN    EQU   *-OP1
         SPACE 2
         LTORG
         SPACE 1
HEXTAB   EQU   *-C'0'
         DC    C'0123456789ABCDEF'
         SPACE 2
         TITLE 'JOBS - TSO DISPLAY JOBS COMMAND'
JOBS    CSECT
         SAVE  (14,12),T,JOBS_TSO_COMMAND
         USING JOBS,R15
         LA    R11,SAVEARE2
         ST    R13,SAVEARE2+4
         ST    R11,8(,R13)
         LR    R13,R11
         B     STAR2
         DROP  R15
         SPACE 2
SAVEARE2 DC    18F'0'
         SPACE 2
STAR2    DS    0H
         USING SAVEARE2,R13
         SPACE 2
         L     R6,=V(CLEARREG)
         LM    R6,R9,0(R6)              INITIALIZE TABLE
         MVCL  R6,R8
         SPACE 1
         L     R1,16                    FIND CVT
         L     R2,X'94'(,R1)            FIND BASEA (M.S.RES.DATA)
         L     R3,=V(TABLE)             NAME TABLE
         LA    R4,80                    BXLE INCREMENT
         LR    R5,R3                    BXLE END
         A     R5,=A(LENTABLE)
         SR    R6,R6                    COUNT OF JOBS
CSCBLOOP ICM   R2,15,0(R2)
         BZ    CSCBEND                  WHEN DONE
         CLI   28(R2),2                 JOB IDENTIFIER ?
         BNE   CSCBLOOP
         SPACE 1
* FIND THE ASSOCIATED ASCB
         SPACE 1
         L     R1,16                    GET CVT
         L     R1,X'22C'(,R1)           FIND ASVT
         LA    R1,X'20C'(,R1)           FIND ENTRY ZERO
         LH    R0,30(,R2)               GET ASID
         SLA   R0,2                     MULT BY FOUR
         AR    R1,R0                    R1 NOW POINTS TO ASVT ENTRY
GOTASVE  L     R1,0(,R1)                GET ASCB ADDRESS
         SPACE 1
GOTASCB  ICM   R7,15,176(R1)            PICK UP STC NAME
         BZ    CSCBLOOP                 NONE, SKIP
         CLC   =CL8'INIT',0(R7)         CHECK FOR INIT
         BNE   CSCBLOOP                 SKIP IF NOT
         SPACE 2
         LA    R6,1(,R6)                BUMP USER COUNT
         MVC   1(8,R3),8(R2)            MOVE JOBNAME TO TABLE
         SPACE 1
          AIF   (&@@SPLVL LT 200).XA03                             U006
         $AMODE 31                                                 U006
.XA03     ANOP                                                     U006
         L     R15,X'90'(,R1)           FIND OUCB
         TM    17(R15),X'80'            NON SWAPPABLE?
         BZ    *+8
         MVI   0(R3),C'$'
         CLI   32(R2),C' '              CHECK FOR PRINTABLE
         BNH   *+10
         MVC   10(8,R3),32(R2)          MOVE IN PROCSTEP
         CLI   64(R2),C' '              CHECK FOR PRINTABLE
         BNH   *+10
         MVC   19(8,R3),64(R2)          MOVE IN STEPNAME
         SPACE 1
         LH    R0,120(,R1)              ALLOC AUX SLOTS (VAM)
         SLA   R0,2                     MULT BY 4 TO GET IT IN 'K'
         CVD   R0,WOUBLE
         MVC   27(7,R3),=X'4020206B202120'  EDIT MASK
         ED    27(7,R3),WOUBLE+5      DO THE EDIT
         MVI   34(R3),C'K'
         LH    R0,122(,R1)              ALLOC AUX SLOTS (NON-VAM)
         SLA   R0,2                     MULT BY 4 TO GET IT IN 'K'
         CVD   R0,WOUBLE
         MVC   35(7,R3),=X'4020206B202120'  EDIT MASK
         ED    35(7,R3),WOUBLE+5      DO THE EDIT
         MVI   42(R3),C'K'
*        LH    R0,152(,R1)              REAL STORAGE IN USE
         ICM   R15,15,52(R2)            CHECK FOR V=R
         BZ    VIRTJOB
         LR    R0,R15                   DISPLAY V=R SIZE
         MVI   0(R3),C'='               SHOW V=R
*IRTJOB  SLA   R0,2                     MULT BY 4 TO GET IT IN 'K'
VIRTJOB  LM    R14,R15,48(R2)           PICK UP REGION SIZE
         SRDL  R14,32                 MOVE TO ODD REGISTER
         D     R14,=A(1024)            CONVERT TO K
         CVD   R15,WOUBLE
         MVC   44(7,R3),=X'4020206B202120'  EDIT MASK              U003
         ED    44(7,R3),WOUBLE+5      DO THE EDIT                  U003
         MVI   51(R3),C'K'                                         U003
         LM    R14,R15,64(R1)           PICK UP CPU TIME
*U007    SRDL  R14,24                   MOVE TO ODD REG
*U007    M     R14,=A(1048576)          COMPUTE IN SECONDS
*U007    D     R14,=A(10000*256)
         SRDL  R14,12                   GET MICROSECONDS           U007
         D     R14,=F'10000'            MAKE IT .01 SECONDS        U007
         CVD   R15,WOUBLE
         MVC   54(10,R3),=X'4020206B2021204B2020'                  U003
         ED    54(10,R3),WOUBLE+4      DO THE EDIT                 U003
         C     R15,=F'9999999'          DID IT FIT?                U007
         BNH   *+4+6+6                  YES - CONTINUE             U007
         MVC   54(10,R3),=X'40206B2020206B202120'                  U007
         ED    54(10,R3),WOUBLE+3       AND DON'T SHOW HUNDREDTHS  U007
*LDW1    MVI   64(R3),C'S'                                         U003
         LM    R14,R15,200(R1)          PICK UP SRB TIME
*U007    SRDL  R14,24                   MOVE TO ODD REG
*U007    M     R14,=A(1048576)          COMPUTE IN SECONDS
*U007    D     R14,=A(10000*256)
         SRDL  R14,12                   GET MICROSECONDS           U007
         D     R14,=F'10000'            MAKE IT .01 SECONDS        U007
         CVD   R15,WOUBLE
         MVC   64(10,R3),=X'4020206B2021204B2020'                  U003
         ED    64(10,R3),WOUBLE+4      DO THE EDIT                 U003
         C     R15,=F'9999999'          DID IT FIT?                U007
         BNH   *+4+6+6                  YES - CONTINUE             U007
         MVC   64(10,R3),=X'40206B2020206B202120'                  U007
         ED    64(10,R3),WOUBLE+3       AND DON'T SHOW HUNDREDTHS  U007
         MVI   64(R3),C'S'                                         U003
         MVI   74(R3),C'S'                                         U003
         UNPK  WOUBLE(3),43(2,R1)       CONVERT DPRTY TO HEX
         TR    WOUBLE(2),TABHEX
         MVC   76(2,R3),WOUBLE          MOVE FOR PRNTING           U003
         SPACE 1
          AIF   (&@@SPLVL LT 200).XA04                             U006
         $AMODE 24                                                 U006
.XA04     ANOP                                                     U006
         BXLE  R3,R4,CSCBLOOP
         TPUT  MSGOV,L'MSGOV
         SPACE 2
CSCBEND  CVD   R6,WOUBLE                NUM JOBS MSG
         MVC   NUMJOBS(4),=X'40202120'
         ED    NUMJOBS(4),WOUBLE+6
         TPUT  NUMJOBS,LMSG
         SPACE 2
         LR    R5,R3                    SET END OF TABLE
         L     R2,=V(TABLE)             SET START OF TABLE
         LR    R6,R4                    FOR S0RT
         LR    R7,R5
         SR    R7,R6                    BACK UP ONE ENTRY
         SR    R7,R6
         LR    R8,R2                    SAVE FIRST ADDRESS
S0RTLOOP CLC   1(8,R2),81(R2)           COMPARE TWO
         BNH   S0RTBXLE
         LR    R8,R2                    LAST SWAP
         XC    0(80,R2),80(R2)
         XC    80(80,R2),0(R2)
         XC    0(80,R2),80(R2)
S0RTBXLE BXLE  R2,R6,S0RTLOOP
         LR    R7,R8                    SAVE LAST SWAP
         L     R2,=V(TABLE)             REINIT
         LR    R8,R2                    REINIT LAST SWAP
COMPARE  CR    R2,R7                    DONE?
         BL    S0RTLOOP
* OUTPUT THE DATA
         SPACE 1
BLNKLOOP CLC   =CL10' ',0(R2)           BLANK ENTRY?
         BE    PRNTBXLE
PRNTTPUT TPUT  (R2),(R4),R
PRNTBXLE BXLE  R2,R4,BLNKLOOP
         SPACE 1
         L     R13,SAVEARE2+4
         RETURN (14,12),RC=0
         SPACE 1
NUMJOBS  DC    X'40202120',C' ACTIVE JOBS            --VIO--'
         DC    C' -SLOTS-  RGN SIZE    CPU TIME  SRB TIME PR'      U003
LMSG     EQU   *-NUMJOBS
MSGOV    DC    C'* TABLE OVERFLOW *'
WOUBLE   DC    D'0'
         SPACE 1
TABHEX   EQU   *-C'0'
         DC    C'0123456789ABCDEF'
         SPACE 3
         LTORG
         SPACE 1
         TITLE 'USERS - TSO DISPLAY LOGGED ON USERS COMMAND'
USERS    CSECT
         ENTRY CLEARREG,TABLE
         SAVE  (14,12),T,USERS_TSO_COMMAND
         USING USERS,R15
         LA    R11,SAVEARE3
         ST    R13,SAVEARE3+4
         ST    R11,8(,R13)
         LR    R13,R11
         B     STAR3
         DROP  R15
         SPACE 2
SAVEARE3 DC    18F'0'
         SPACE 2
STAR3    DS    0H
         USING SAVEARE3,R13
         SPACE 2
         LM    R6,R9,CLEARREG
         MVCL  R6,R8                    CLEAR TABLE
         SPACE 1
         L     R1,16                    FIND CVT
         L     R2,X'94'(,R1)            FIND BASEA (M.S.RES.DATA)
         LA    R3,TABLE                 NAME TABLE
         LA    R4,10                    BXLE INCREMENT
         L     R5,=A(TABLE+LENTABLE)    BXLE END
         SR    R6,R6                    COUNT OF USERS
CSC8LOOP ICM   R2,15,0(R2)
         BZ    CSC8END                  WHEN DONE
         CLI   28(R2),1                 TSO USER ID?
         BNE   CSC8LOOP
         LA    R6,1(,R6)                BUMP USER COUNT
         MVC   0(8,R3),8(R2)            MOVE USERID TO TABLE
         BXLE  R3,R4,CSC8LOOP
         TPUT  MSG0V,L'MSG0V
         SPACE 2
CSC8END  CVD   R6,D0UBLE                NUM USERS MSG
         MVC   NUMUSERS(4),=X'40202020'
         ED    NUMUSERS(4),D0UBLE+6
         TPUT  NUMUSERS,LNSG
         SPACE 2
         LR    R5,R3                    SET END OF TABLE
         LA    R2,TABLE                 SET START OF TABLE
         LR    R6,R4                    FOR SORT
         LR    R7,R5
         SH    R7,=H'20'                BACK UP ONE ENTRY
         LR    R8,R2                    SAVE FIRST ADDRESS
SORTLOOP CLC   0(8,R2),10(R2)           COMPAIR TWO
         BNH   SORTBXLE
         LR    R8,R2                    LAST SWAP
         XC    0(8,R2),10(R2)
         XC    10(8,R2),0(R2)
         XC    0(8,R2),10(R2)
SORTBXLE BXLE  R2,R6,SORTLOOP
         LR    R7,R8                    SAVE LAST SWAP
         LA    R2,TABLE                 REINIT
         LR    R8,R2                    REINIT LAST SWAP
COMPAIR  CR    R2,R7                    DONE?
         BL    SORTLOOP
         SPACE 2
* SKIP FOR NON BLANK NAME
         SPACE 1
BLNKL00P CLI   0(R2),C' '
         BNE   PRNTLOOP
         BXLE  R2,R4,BLNKL00P
         SPACE 1
* OUTPUT NAMES
         SPACE 1
PRNTLOOP LR    R3,R5                    COMPUTE LENGTH
         SR    R3,R2
         BP    *+6                      IF ANSWER IS ZERO
         LR    R3,R4                    ONLY 1 USER IS ON
         TPUT  (2),(3),R
         SPACE 1
         L     R13,SAVEARE3+4
         RETURN (14,12),RC=0
         SPACE 1
NUMUSERS DC    X'40202020',C' USERS LOGGED ON'
LNSG     EQU   *-NUMUSERS
MSG0V    DC    C'* TABLE OVERFLOW *'
D0UBLE   DC    D'0'
         SPACE 3
         LTORG
         SPACE 1
CLEARREG DC    A(TABLE,2000),A(0),X'40000000'
TABLE    DS    200CL10' '
LENTABLE EQU   *-TABLE
         TITLE 'PAGE - PAGE TABLE STAT DISPLAY SUBROUTINE '
PAGE     CSECT
         SAVE (14,12),T,PAGEFRAME
         LR    R10,R15                  SET BASE
         USING PAGE,R10                                            U004
         LR    R9,R1
         LA    R1,SAVE
         ST    R1,8(R13)
         ST    R13,4(R1)
         LR    R13,R1
         MVI   OUTLINE,C' '
         MVC   OUTLINE+1(79),OUTLINE
         MVC   OUTLINE+24(31),=C'* PAGE FRAME TABLE STATISTICS *'
         TPUT  OUTLINE,L'OUTLINE
         XC    NUC(LEN),NUC
         L     R2,16
         L     R2,X'164'(R2)            PVT
         L     R3,12(R2)                PFT
         LR    R4,R3
         LH    R5,16(R2)                STARTING OFFSET
         AH    R4,18(R2)                ENDING OFFSET
         AR    R3,R5                    ADD STARTING OFFSET
         SRL   R5,4                     DIVIDE BY 16 FOR PAGE COUNT
         STH   R5,NUC                   PAGES OF NUC AND FIXED AREA
L00P     CLI   14(R3),0                 AVAILABE FRAME
         BNE   VR                       NO, TRY V=R
         LH    R1,AVAIL
         LA    R1,1(R1)
         STH   R1,AVAIL
         B     NEXT
VR       TM    12(R3),2                 IS IT USED FOR V=R
         BZ    BD                       NO, TEST FOR BAD FRAME
         LH    R1,REAL
         LA    R1,1(R1)
         STH   R1,REAL
         B     NEXT
BD       TM    12(R3),4                 IS IT A BAD FRAME
         BZ    FIX                      NO, TEST FOR LONG FIXED
INCBAD   LH    R1,BAD
         LA    R1,1(R1)
         STH   R1,BAD
         B     NEXT
FIX      TM    12(R3),16                IS IT LONG FIXED
         BZ    VIOTEST                  NO, TEST FOR SQA
         LH    R1,LONG
         LA    R1,1(R1)
         STH   R1,LONG
VIOTEST  TM    13(R3),X'10'             IS IT VIO
         BZ    SQAREA                   NO, TEST FOR SQA
         LH    R1,VIO
         LA    R1,1(R1)
         STH   R1,VIO
SQAREA   CLI   14(R3),4                 IS IT RESERVED FOR SQA
         BE    INCSQA                   YES, COUNT A PART OF SQA
         CLI   14(R3),12                IS IT SQA
         BNE   COM                      NO, TEST FOR LOCAL
INCSQA   LH    R1,SQA
         LA    R1,1(R1)
         STH   R1,SQA
         B     NEXT
COM      CLI   14(R3),8                 IS IT CSA
         BNE   LOC                      NO, TEST FOR LOCAL
         LH    R1,CSA
         LA    R1,1(R1)
         STH   R1,CSA
         B     STL
LOC      CLI   14(R3),X'80'             IS IT PROCGAMMER AREA
         BNE   LOCSQA                   NO, TEST FOR LSQA
         LH    R1,PGM
         LA    R1,1(R1)
         STH   R1,PGM
         B     INCLOC
LOCSQA   CLI   14(R3),X'84'             IS IT LSQA
         BNE   XXX                      NO, CANT BE
         LH    R1,LSQA
         LA    R1,1(R1)
         STH   R1,LSQA
INCLOC   LH    R1,LOCAL
         LA    R1,1(R1)
         STH   R1,LOCAL
STL      CLC   8(2,R3),=X'0000'         IS IT FIXED AT ALL
         BE    NEXT                     NO SKIP IT
         TM    12(R3),16                ISIT LONG FIX
         BO    NEXT                     YES, SKIP, WE WANT SHORT
         LH    R1,SHORT
         LA    R1,1(R1)
         STH   R1,SHORT
         B     NEXT
XXX      NOP   0
NEXT     LA    R3,16(R3)
         CR    R3,R4                    WE AT END
         BNH   L00P                     NO
         LA    R3,VALUES
         LA    R4,NUC
         LA    R5,NAMES
EACHLINE LA    R6,OUTLINE
         LA    R2,4                     PER LINE
         MVI   OUTLINE,C' '             BLANK
         MVC   OUTLINE+1(79),OUTLINE    RIPPLE
EACHVAL  MVC   0(9,R6),0(R5)  COPY NAME
         LH    R7,0(R4)                 GET VALUE
         SLL   R7,2
         CVD   R7,CVWORK
         MVC   9(7,R6),=X'4020206B202120'
         ED    9(7,R6),CVWORK+5
         MVI   16(R6),C'K'
         LA    R4,2(R4)                 NEXT VALUE
         LA    R5,9(R5)                 NEXT NAME
         LA    R6,20(R6)                NEXT POSITION IN LINE
         BCT   R3,BUMP
         B     PUT
BUMP     BCT   R2,EACHVAL
PUT      TPUT  OUTLINE,80
         LTR   R3,R3                    ANY MORE
         BNZ   EACHLINE                 YES
XIT      L     R13,4(R13)
         RETURN (14,12),RC=0
         EJECT
SAVE     DS    18F
CVWORK   DS    D
NUC      DS    H
AVAIL    DS    H
BAD      DS    H
SQA      DS    H
CSA      DS    H
REAL     DS    H
LONG     DS    H
VIO      DS    H
LSQA     DS    H
PGM      DS    H
LOCAL    DS    H
SHORT    DS    H
LEN      EQU   *-NUC
VALUES   EQU   12
REPLY    DS    CL3
OUTLINE  DS    CL80
NAMES    DC    CL9'NUCLEUS'
         DC    CL9'AVAILABLE'
         DC    CL9'BAD PAGES'
         DC    CL9'SQA'
         DC    CL9'LPA/CSA'
         DC    CL9'REAL'
         DC    CL9'LONG FIX'
         DC    CL9'VIO'
         DC    CL9'LSQA'
         DC    CL9'PROGRAM'
         DC    CL9'LOCAL'
         DC    CL9'SHORT FIX'
         LTORG
         SPACE 5
*U006    IKJCVT
         CVT   DSECT=YES                                           U006
         SPACE 5
         END   MS
