***********************************************************************
*                                                                     *
* Name:         COBANAL                                               *
*                                                                     *
* Author:       Roland Schiradin                                      *
*               roland(at)Schiradin.de                                *
*                                                                     *
* Date:         Februar 1996                                          *
*                                                                     *
* Description:  Show compile-settings and some other information      *
*                                                                     *
* Changes:      16.12.1996 (european)                                 *
*               Support for VS/COBOL1 (just a few)                    *
*               String macro no longer inside this source             *
*               (request FILE183 from Naspa or drop me an email)      *
*               28.04.1997 (european)                                 *
*               Support for COBOL for MVS and VM Release 2 (formally  *
*               called AD/Cycle COBOL/370)                            *
*               04.03.1998 (european)                                 *
*               MODID-marco dropped                                   *
*               Direct Load-Library support                           *
*               Some parts of Dave Alcocks code (DA$COBR)             *
*               (You can contact him at dalcock(at)csw.com)           *
*               24.03.1998 (european)                                 *
*               Prevent S15D abend you invoke COBANAL from TSO-CALL   *
*               (reported by Dave Alcock)                             *
*               Support for newer STRING macro STRING GENERATE instaed*
*               of STRING FINAL_CALL                                  *
*               (reported by Dave Alcock)                             *
*               Fixed a bug in statement list. Y now means Yes and not*
*               vice versa. Sorry                                     *
*               15.02.1999 (european)                                 *
*               Support for COBOL OS/390 and VM V2R1                  *
*               Some new Compile-options                              *
*               Compile-Date is European style, added long name       *
*               Some minor fixes I cant remember in detail            *
*               Support for MVS 4.3 (AMODE switching)                 *
*               10.06.1999 (european)                                 *
*               Fixed bugs reported by Mr. Smets (Thank you)          *
*               Show ?? as the century for COBOL2                     *
*               Support for Entrypoints (e.g. ENTRY 'DLITCBL')        *
*               Note: There is no need to do this for IMS             *
*               25.10.1999 (european)                                 *
*               Check ParmLength for Parameter "ALL".                 *
*               Close all datasets                                    *
*               Make CobAnal reentrant (LinkList!!!)                  *
*               Release storage                                       *
*               Load modules from DD COBANAL if exist                 *
*               29.12.1999 (european)                                 *
*               Abend 0C4 fixed                                       *
*               Add PPA2 support                                      *
*               Detect C/C++ and LE-enabled Assembler Programs        *
*               The product name for COBOL1 is OS/VS Cobol (MVS) and  *
*               DOS/VS COBOL (VSE)                                    *
*               13.04.1999 (european)                                 *
*               Support for some infos I missed (INVOKE, GLOBAL and   *
*               so on) Thank you Mr. Gross                            *
*               Add a third base register                             *
*               23.04.1999 (european)                                 *
*               Tested with STRING V507 from FILE183                  *
*               19.07.1999 (european)                                 *
*               Support for COBOL1 OEM products (e.g. CA-Optimzer)    *
*               Thank you Mr. Pfeifer                                 *
***********************************************************************
         TITLE 'Show Compile-Option and some more nice info'
COBANAL  CSECT
COBANAL  AMODE 31
COBANAL  RMODE 24
         BAKR  R14,R0             Save register
         LA    R10,1
         LR    R6,R15             set base register
         LA    R7,4095(R10,R6)    second base register
         LA    R12,4095(R10,R7)   third base register
         USING COBANAL,R6,R7,R12     Addressebility
         L     R9,0(R1)           Save Parmlist
         USING COBANAL_PARM,R9    addressebility
         LA    R0,COBANAL_WORK_LENGTH
         STORAGE OBTAIN,LENGTH=(R0),ADDR=(R1),COND=NO,LOC=BELOW
         LR    R11,R1             COBANAL_WORK register
         USING COBANAL_WORK,R11   addressebility
         MVC   EYECATCHER,=CL8'COBANAL'
         MVI   DOALL,C'N'         Default
         MVI   DD_COBANAL,C'N'    Default
         XC    SAVEAREA,SAVEAREA  clear saveare
         LA    R15,SAVEAREA       get address of savearea
         ST    R13,4(,R15)        chain the savearea back pointer
         ST    R15,8(,R13)        chain saveare forward
         LR    R13,R15            set new savearea
         ST    R11,ADR_COBANAL_WORK  save address
         ST    R9,ADR_COBANAL_PARM   save address
*------------------------------------------------------------*
*        Check JCL-Parm                                      *
*------------------------------------------------------------*
         MVC   PARM_LENGTH,COBANAL_PARM_LENGTH
         LH    R10,PARM_LENGTH
         LA    R9,2(R9)            jump length field
         MVC   PGMNAME,BLANKS      clear PGMNANE
         LA    R8,PGMNAME          first parm
COBANAL_010 DS  0H                 do until first ',' or end
         CLI   0(R9),C','          parm separator
         BE    COBANAL_020         next parm
         MVC   0(1,R8),0(R9)
         LA    R8,1(R8)            next digit
         LA    R9,1(R9)            next digit
         BCT   R10,COBANAL_010     loop
COBANAL_020 DS  0H
         MVC   SYSPRINT(SYSPRINT_FIX_LENGTH),SYSPRINT_FIX
         MVC   PARMLIST(C_LSTOL),C_LSTO
         LA    R9,SYSPRINT
         USING IHADCB,R9
         MVC   DCBDDNAM,=C'SYSPRINT'
         OPEN  ((R9),OUTPUT),MF=(E,PARMLIST)
         DROP  R9
         DEVTYPE =CL8'COBANAL',DOUBLE     Get COBANAL information
         LTR   R15,R15                    Is it allocated?
         BNZ   COBANAL_021                No, continue
         MVI   DD_COBANAL,C'Y'    Default
         MVC   INPUT(INPUT_FIX_LENGTH),INPUT_FIX
         MVC   PARMLIST(C_LSTIL),C_LSTI
         LA    R9,INPUT
         USING IHADCB,R9
         MVC   DCBDDNAM,=C'COBANAL '
         OPEN  ((R9),INPUT),MF=(E,PARMLIST)
         DROP  R9
COBANAL_021 DS  0H
         STRING 'COBOL module analysis is starting',INTO=RECORD
         BAL   R14,SPACE1                 Print starting message
         CLC   PGMNAME,BLANKS      check PGMNAME
         BE    COBANAL_PARM_ERROR  if clear ==> Error
         CLC   PGMNAME(3),=C'ALL'  PGMNAME = ALL indicate analyzing
         BNE   COBANAL_025         a complete Load, but check for
         CLC   PARM_LENGTH,=H'3'   length; maybe it is a prog called
         BNE   COBANAL_025         ALLWAYS :-))
         CLI   DD_COBANAL,C'Y'        Did you read the docs?
         BE    COBANAL_022           yes, thats fine
         STRING 'Parameter=ALL specified but DD-Name COBANAL missing', *
               INTO=RECORD
         BAL   R14,SPACE1                 Print starting message
         MVC   RETCODE,=F'12'
         B     COBANAL_EXIT         no, leave
** Loop
COBANAL_022 DS  0H
         MVI   DOALL,C'Y'          remember that
         BAL   R14,GETMEM          get the member name
         CLC   PGMNAME,XFF         more entries?
         BE    COBANAL_EXIT          leave
*------------------------------------------------------------*
*        Load the progamm from DD COBANAL                    *
*------------------------------------------------------------*
         LOAD  EPLOC=PGMNAME,DCB=INPUT,ERRET=COBANAL_LOAD_ERROR
         B     COBANAL_027
COBANAL_025 DS  0H
         CLI   DD_COBANAL,C'Y'    load from DD Cobanal ?
         BE    COBANAL_026           yes
*------------------------------------------------------------*
*        Load the progamm                                    *
*------------------------------------------------------------*
         LOAD  EPLOC=PGMNAME       Load the pgm
         B     COBANAL_027
COBANAL_026 DS  0H
*------------------------------------------------------------*
*        Load the progamm from DD COBANAL                    *
*------------------------------------------------------------*
         LOAD  EPLOC=PGMNAME,DCB=INPUT,ERRET=COBANAL_LOAD_ERROR
COBANAL_027 DS  0H
         LTR   R15,R15             check response
         BNZ   COBANAL_LOAD_ERROR if greater zero ==> Error
         ST    R0,ADR_PGMNAME      save the address
*------------------------------------------------------------*
*        Check length                                        *
*------------------------------------------------------------*
         CSVQUERY SEARCH=JPALPA,       SEARCH JPAQ                     +
               INADDR=ADR_PGMNAME,     ADDRESS                         +
               OUTLENGTH=CSV_LENGTH,                                   +
               MF=(E,CSVQRYWK)         WORK AREA
         LTR   R2,R15                  pass return code
         BNZ   COBANAL_CSV_ERROR if greater zero ==> Error
*------------------------------------------------------------*
*        Write info to sysprint                              *
*------------------------------------------------------------*
COBANAL_03 DS  0H
         STRING 'Program Name= ',PGMNAME,                              @
               ' was loaded into storage at EPA= ',(ADR_PGMNAME,,X),   @
               INTO=RECORD
         BAL   R14,SPACE1
*
*        Dump the first 256 Bytes for Identification.
*        Should be activate only in case of problems
*
         L     R4,ADR_PGMNAME
         LA    R3,256/16               LOOP COUNTER
*LOOP
COBANAL_04 DS  0H
         STRING 4X,((R4),4,X),1X,(4(R4),4,X),1X,(8(R4),4,X),1X,        X
               (12(R4),4,X),3X,((R4),16),                              $
               INTO=RECORD
         BAL   R14,SPACE1          <== next line
         LA    R4,016(,R4)             BUMP POINTER
         BCT   R3,COBANAL_04
*ENDLOOP
         L     R4,ADR_PGMNAME       Load-Entry-Point
         USING COBOL_370_DSECT,R4
         CLC   CSV_LENGTH,=F'24'    At least 24 bytes!!!
         BNH   COBANAL_06            prevent S0C4
         CLC   CEE_EYECATCHER,C_COBOL370   COBOL/370 ?  X'00C3C5C5'
         BE    COBOL_370
         CLC   CEE_EYECATCHER,C_OPLINK     C         ?  X'01C3C5C5'
         BE    C_370
         USING COBOL_2_DSECT,R4
         CLC   C2_EYECATCHER,=CL4' C2 '     COBOL/2 ?  X'40C3F240'
         BE    COBOL_2
         USING COBOL_1_DSECT,R4
* ???    CLC   C1_EYECATCHER,=CL2'AN'       ANS4 COBOL ?
* ???    BE    COBOL_1
         CLC   C1_EYECATCHER(4),=CL4'VSR1'       OS/VS COBOL/1 ?
         BE    COBOL_1
         CLC   C1_EYECATCHER(4),=CL4'VSR2'       OS/VS COBOL/1 ?
         BE    COBOL_1
COBANAL_06 DS  0H
         STRING 'Can not established the program_language',INTO=RECORD
         BAL   R14,SPACE1
         MVC   RETCODE,=F'8'
         B     COBANAL_EXIT         no, leave
COBANAL_08 DS  0H
         STRING 'Program=',PGMNAME,' seems to be LE but',              X
               ' PPA1 looks invalid',INTO=RECORD
         BAL   R14,SPACE1
         MVC   RETCODE,=F'8'
         B     COBANAL_EXIT         no, leave
COBANAL_09 DS  0H
         CLI   0(R2),X'03'          ID = C       (03) ?
         BNE   COBANAL_10             no check Assembler
         STRING 'Program=',PGMNAME,' is a C-Program ',INTO=RECORD
         BAL   R14,SPACE1
         MVC   RETCODE,=F'8'
         B     COBANAL_EXIT         no, leave
COBANAL_10 DS  0H
         CLI   0(R2),X'0F'          ID = Assembler (15) ?
         BNE   COBANAL_06             no, unknown language
         STRING 'Program=',PGMNAME,' is a LE-enabled ',                X
               'Assembler',INTO=RECORD
         BAL   R14,SPACE1
         MVC   RETCODE,=F'8'
         B     COBANAL_EXIT         no, leave
COBANAL_PARM_ERROR DS  0H
         STRING 'Error parm statement, check it',INTO=RECORD
         BAL   R14,SPACE1
         MVC   RETCODE,=F'12'
         B     COBANAL_EXIT         no, leave
COBANAL_LOAD_ERROR DS  0H
         STRING 'Error during load of program=',PGMNAME,INTO=RECORD
         BAL   R14,SPACE1
         MVC   RETCODE,=F'12'
         B     COBANAL_EXIT         no, leave
COBANAL_CSV_ERROR DS  0H
         STRING 'CSVQUERY failed, RC5=',((R2),,L),INTO=RECORD
         BAL   R14,SPACE1
         MVC   RETCODE,=F'12'
         B     COBANAL_EXIT         no, leave
COBANAL_EXIT       DS 0H
         DELETE EPLOC=PGMNAME       Delete the pgm
         CLI   DOALL,C'N'           Default
         BE    COBANAL_FIN
         CLC   PGMNAME,XFF          Last Programm?
         BNE   COBANAL_022           no loop
COBANAL_FIN        DS 0H
         LA    R9,SYSPRINT
         USING IHADCB,R9
         TM    DCBOFLGS-IHADCB(R3),DCBOFOPN Is it OPEN?
         BNO   COBANAL_FIN_1              No, ignore it
         MVC   PARMLIST(C_CLOSEL),C_CLOSE
         CLOSE ((R9)),MF=(E,PARMLIST)      Close it
         DROP  R9
COBANAL_FIN_1      DS 0H
         LA    R9,INPUT
         USING IHADCB,R9
         TM    DCBOFLGS-IHADCB(R3),DCBOFOPN Is it OPEN?
         BNO   COBANAL_FIN_2              No, ignore it
         MVC   PARMLIST(C_CLOSEL),C_CLOSE
         CLOSE ((R9)),MF=(E,PARMLIST)      Close it
         DROP  R9
COBANAL_FIN_2      DS 0H
         LA    R0,COBANAL_WORK_LENGTH
         STORAGE RELEASE,              free Storage                    *
               LENGTH=(R0),            Length                          *
               ADDR=((R11))
         L     R15,RETCODE
         PR
*============================================================*
*    C/370 Programm OPLINK Bit on !!!!!                      *
*    Offset instead of relative pointer!!!                   *
*============================================================*
C_370    DS 0H
         LR    R2,R4
         A     R2,12(,R4)          PPA1
         CLI   1(R2),X'CE'         Check PPA1
         BNE   COBANAL_08            seems invalid PPA1
         A     R4,4(,R2)           PPA2 pointer
         LR    R2,R4
         B     COBANAL_09          check languages
*============================================================*
*    COBOL/370 Programm                                      *
*============================================================*
COBOL_370 DS 0H
         USING COBOL_370_DSECT,R4
         LR    R2,R4
         A     R2,12(,R4)          PPA1
         CLI   1(R2),X'CE'         Check PPA1
         BNE   COBANAL_08            seems invalid PPA1
         ICM   R2,B'1111',4(R2)    PPA2 pointer
         BZ    COBANAL_08            seems invalid PPA1
         CLI   0(R2),X'05'         ID = Cobol!! (15)
         BNE   COBANAL_09            no, error
         MVI   LE_SWITCH,C'1'
         L     R4,CEE_PRI_EP_ADDRESS
         MVC   LE_VERS,CEE_VERS
         MVC   LE_REL,CEE_REL
         MVC   LE_MOD,CEE_MOD
         MVC   LE_PGM_NAME,CEE_PGM_NAME
         MVC   LE_COMP_DAY,CEE_COMP_DAY
         MVC   LE_COMP_MONTH,CEE_COMP_MONTH
         MVC   LE_COMP_YEAR,CEE_COMP_YEAR
         MVC   LE_COMP_HOURS,CEE_COMP_HOURS
         MVC   LE_COMP_MIN,CEE_COMP_MIN
         MVC   LE_COMP_SEC,CEE_COMP_SEC
         MVC   LE_DATA_STATEMENTS,CEE_DATA_STATEMENTS
         MVC   LE_PROC_LINES,CEE_PROC_LINES
         MVC   LE_YEAR_WINDOW,CEE_YEAR_WINDOW
         MVC   LE_STATUS_BYTE_01,CEE_STATUS_BYTE_01
         MVC   LE_STATUS_BYTE_02,CEE_STATUS_BYTE_02
         MVC   LE_STATUS_BYTE_03,CEE_STATUS_BYTE_03
         MVC   LE_STATUS_BYTE_04,CEE_STATUS_BYTE_04
         MVC   LE_STATUS_BYTE_05,CEE_STATUS_BYTE_05
         MVC   LE_STATUS_BYTE_06,CEE_STATUS_BYTE_06
         MVC   LE_STATUS_BYTE_07,CEE_STATUS_BYTE_07
         MVC   LE_STATUS_BYTE_08,CEE_STATUS_BYTE_08
         MVC   LE_STATUS_BYTE_09,CEE_STATUS_BYTE_09
         MVC   LE_STATUS_BYTE_10,CEE_STATUS_BYTE_10
         MVC   LE_STATUS_BYTE_11,CEE_STATUS_BYTE_11
         MVC   LE_STATUS_BYTE_12,CEE_STATUS_BYTE_12
         MVC   LE_STATUS_BYTE_13,CEE_STATUS_BYTE_13
         MVC   LE_STATUS_BYTE_14,CEE_STATUS_BYTE_14
         MVC   LE_STATUS_BYTE_15,CEE_STATUS_BYTE_15
         MVC   LE_STATUS_BYTE_16,CEE_STATUS_BYTE_16
         MVC   LE_STATUS_BYTE_17,CEE_STATUS_BYTE_17
         MVC   LE_STATUS_BYTE_18,CEE_STATUS_BYTE_18
         MVC   LE_STATUS_BYTE_19,CEE_STATUS_BYTE_19
         MVC   LE_STATUS_BYTE_20,CEE_STATUS_BYTE_20
         MVC   LE_STATUS_BYTE_21,CEE_STATUS_BYTE_21
         MVC   LE_STATUS_BYTE_22,CEE_STATUS_BYTE_22
         MVC   LE_STATUS_BYTE_23,CEE_STATUS_BYTE_23
         MVC   LE_STATUS_BYTE_24,CEE_STATUS_BYTE_24
         MVC   LE_STATUS_BYTE_25,CEE_STATUS_BYTE_25
         MVC   LE_STATUS_BYTE_26,CEE_STATUS_BYTE_26
         MVC   LE_STATUS_BYTE_27,CEE_STATUS_BYTE_27
         B     LE370_INFO
*============================================================*
*    COBOL/2 Programm                                        *
*============================================================*
COBOL_2 DS 0H
         USING COBOL_2_DSECT,R4
         MVI   LE_SWITCH,C'2'
         L     R4,C2_GET_ENTRY
         L     R4,0(R4)
         MVC   LE_VERS,C2_VERS
         MVC   LE_REL,C2_REL
         MVC   LE_MOD,C2_MOD
         MVC   LE_PGM_NAME,C2_PGM_NAME
         MVC   LE_COMP_DAY,C2_COMP_DAY
         MVC   LE_COMP_MONTH,C2_COMP_MONTH
         MVC   LE_COMP_YEAR(2),=C'??'    COBOL2 not Y2K ready
         MVC   LE_COMP_YEAR+2(2),C2_COMP_YEAR
         MVC   LE_COMP_HOURS,C2_COMP_HOURS
         MVC   LE_COMP_MIN,C2_COMP_MIN
         MVC   LE_COMP_SEC,C2_COMP_SEC
         MVC   LE_DATA_STATEMENTS,C2_DATA_STATEMENTS
         MVC   LE_PROC_LINES,C2_PROC_LINES
         MVC   LE_STATUS_BYTE_01,C2_STATUS_BYTE_01
         MVC   LE_STATUS_BYTE_02,C2_STATUS_BYTE_02
         MVC   LE_STATUS_BYTE_03,C2_STATUS_BYTE_03
         MVC   LE_STATUS_BYTE_04,C2_STATUS_BYTE_04
         MVC   LE_STATUS_BYTE_05,C2_STATUS_BYTE_05
         MVC   LE_STATUS_BYTE_06,C2_STATUS_BYTE_06
         MVC   LE_STATUS_BYTE_07,C2_STATUS_BYTE_07
         MVC   LE_STATUS_BYTE_08,C2_STATUS_BYTE_08
         MVC   LE_STATUS_BYTE_09,C2_STATUS_BYTE_09
         MVC   LE_STATUS_BYTE_10,C2_STATUS_BYTE_10
         MVC   LE_STATUS_BYTE_11,C2_STATUS_BYTE_11
         MVC   LE_STATUS_BYTE_12,C2_STATUS_BYTE_12
         MVC   LE_STATUS_BYTE_13,C2_STATUS_BYTE_13
         MVC   LE_STATUS_BYTE_14,C2_STATUS_BYTE_14
         MVC   LE_STATUS_BYTE_15,C2_STATUS_BYTE_15
         MVC   LE_STATUS_BYTE_16,C2_STATUS_BYTE_16
         MVC   LE_STATUS_BYTE_17,C2_STATUS_BYTE_17
         MVC   LE_STATUS_BYTE_18,C2_STATUS_BYTE_18
         MVC   LE_STATUS_BYTE_19,C2_STATUS_BYTE_19
         MVC   LE_STATUS_BYTE_20,C2_STATUS_BYTE_20
         MVC   LE_STATUS_BYTE_21,C2_STATUS_BYTE_21
         MVC   LE_STATUS_BYTE_22,C2_STATUS_BYTE_22
         MVC   LE_STATUS_BYTE_23,C2_STATUS_BYTE_23
         MVC   LE_STATUS_BYTE_24,C2_STATUS_BYTE_24
         MVC   LE_STATUS_BYTE_25,C2_STATUS_BYTE_25
         B     LE370_INFO
*============================================================*
* OS/VS COBOL   Program                                      *
*============================================================*
COBOL_1 DS 0H
         USING COBOL_1_DSECT,R4
         MVI   LE_SWITCH,C'3'
         MVC   LE_VERS,BLANKS
         MVC   LE_REL,C1_REL
         MVC   LE_MOD,BLANKS
         MVC   LE_PGM_NAME,C1_PGM_NAME
         MVC   LE_COMP_DAY,C1_COMP_DAY
         MVC   LE_COMP_MONTH,C1_COMP_MONTH
         MVC   LE_COMP_YEAR,C1_COMP_YEAR
         MVC   LE_COMP_HOURS,C1_COMP_HOURS
         MVC   LE_COMP_MIN,C1_COMP_MIN
         MVC   LE_COMP_SEC,C1_COMP_SEC
         L     R5,C1_TGT_PTR
         USING COBOL_1_TGT,R5
         CLC   C1_CHECK,=CL8'SYSOUT'     check
         BE    LE370_INFO
*
*        UNABLE TO FIND THE TASK GLOBAL TABLE  -
*
NOTTGT   DS    0H
         STRING 'Program ',PGMNAME,' failed the TGT (Task Global',     @
               'Table) test',INTO=RECORD
         BAL   R14,SPACE2
         LA    R15,8
         B     COBANAL_EXIT
LE370_INFO DS  0H
         STRING '============ Info ==================================',*
               '=============================================',        *
               INTO=RECORD
         BAL   R14,SPACE2
         STRING 'Programm: ',PGMNAME,' is COBOL/370 Version ',LE_VERS, *
               ' Release ',LE_REL,' Mod-Level ',LE_MOD,INTO=RECORD
         CLI   LE_SWITCH,C'1'
         BE    JUMP_AROUND
         STRING 'Programm: ',PGMNAME,' is COBOL/2 Version ',LE_VERS,   *
               ' Release ',LE_REL,' Mod-Level ',LE_MOD,INTO=RECORD
         CLI   LE_SWITCH,C'2'
         BE    JUMP_AROUND
         STRING 'Programm: ',PGMNAME,' is OS/VS COBOL Release ',LE_REL,*
               INTO=RECORD
JUMP_AROUND DS 0H
         BAL   R14,SPACE2
         STRING '============ Timestamps ============================',*
               '=============================================',        *
               INTO=RECORD
         BAL   R14,SPACE2
         STRING 'Compiled program name ',LE_PGM_NAME,INTO=RECORD
         BAL   R14,SPACE1
         BAL   R9,LE_370_12
         DC    CL2'01',CL3'Jan'      Long name
         DC    CL2'02',CL3'Feb'      for our non-european user
         DC    CL2'03',CL3'Mar'
         DC    CL2'04',CL3'Apr'
         DC    CL2'05',CL3'May'
         DC    CL2'06',CL3'Jun'
         DC    CL2'07',CL3'Jul'
         DC    CL2'08',CL3'Aug'
         DC    CL2'09',CL3'Sep'
         DC    CL2'10',CL3'Okt'
         DC    CL2'11',CL3'Nov'
         DC    CL2'12',CL3'Dec'
         DC    X'0000',CL3'n/a'             end of table
LE_370_12 DS   0H
         CLC   LE_COMP_MONTH(2),0(R9)         check properties
         BE    LE_370_14               jump if on
         LA    R9,5(,R9)              Skip entry
         CLI   0(R9),0                 end of table?
         BNE   LE_370_12               not yet, loop
LE_370_14 DS   0H
         STRING 'Date: ',LE_COMP_DAY,'.',(LE_COMP_MONTH,2),'.',        *
               LE_COMP_YEAR,' (european) ',LE_COMP_DAY,'.',            *
               (2(R9),3,T),'.',LE_COMP_YEAR,' (long) ',                *
               ' Time: ',LE_COMP_HOURS,':',LE_COMP_MIN,                *
               ':',LE_COMP_SEC,INTO=RECORD
         CLI   LE_SWITCH,C'3'    OS/VS COBOL ?
         BNE   JUMP_AROUND_2       no, go ahead
         STRING 'Date: ',LE_COMP_DAY,'.',LE_COMP_MONTH,'.',            *
               LE_COMP_YEAR,' Time: ',LE_COMP_HOURS,':',LE_COMP_MIN,   *
               ':',LE_COMP_SEC,INTO=RECORD
         BAL   R14,SPACE2
         B     INFO_COBOL            sorry no more information
JUMP_AROUND_2 DS 0H
         BAL   R14,SPACE2
         STRING '============ Statistics ============================',*
               '=============================================',        *
               INTO=RECORD
         BAL   R14,SPACE2
         STRING 'Number of data items  : ',(LE_DATA_STATEMENTS,F,R7B), *
               INTO=RECORD
         BAL   R14,SPACE1
         STRING 'Number of instructions: ',(LE_PROC_LINES,F,R7B),      *
               INTO=RECORD
         BAL   R14,SPACE2
         STRING '============ Options in effect =====================',*
               '=============================================',        *
               INTO=RECORD
         BAL   R14,SPACE2
         MVC   RECORD,BLANKS
         LA    R15,RECORD
         MVC   1(3,R15),=C'ADV'
         TM    LE_STATUS_BYTE_01,BIT0
         BO    *+10
         MVC   1(5,R15),=C'NOADV'
         LA    R15,8(R15)
         MVC   0(5,R15),=C'APOST'
         TM    LE_STATUS_BYTE_01,BIT1
         BO    *+10
         MVC   0(5,R15),=C'QUOTE'
         LA    R15,8(R15)
         MVC   RECORD+16(9),=CL9'DATA(31)'
         TM    LE_STATUS_BYTE_01,BIT2
         BO    *+10
         MVC   RECORD+16(9),=CL9'DATA(24)'
         MVC   RECORD+25(6),=CL6'DECK'
         TM    LE_STATUS_BYTE_01,BIT3
         BO    *+10
         MVC   RECORD+25(6),=CL6'NODECK'
         MVC   RECORD+33(6),=CL6'DUMP'
         TM    LE_STATUS_BYTE_01,BIT4
         BO    *+10
         MVC   RECORD+33(6),=CL6'NODUMP'
         MVC   RECORD+40(8),=CL8'DYNAM'
         TM    LE_STATUS_BYTE_01,BIT5
         BO    *+10
         MVC   RECORD+40(8),=CL8'NODYNAM'
         MVC   RECORD+51(10),=CL10'FASTSRT'
         TM    LE_STATUS_BYTE_01,BIT6
         BO    *+10
         MVC   RECORD+51(10),=CL10'NOFASTSRT'
         MVC   RECORD+62(8),=CL8'FDUMP'
         TM    LE_STATUS_BYTE_01,BIT7
         BO    *+10
         MVC   RECORD+62(8),=CL8'NOFDUMP'
         BAL   R14,SPACE1
         MVC   RECORD,BLANKS
         MVC   RECORD+1(6),=CL6'LIB'
         TM    LE_STATUS_BYTE_02,BIT0
         BO    *+10
         MVC   RECORD+1(6),=CL6'NOLIB'
         MVC   RECORD+8(7),=CL7'LIST'
         TM    LE_STATUS_BYTE_02,BIT1
         BO    *+10
         MVC   RECORD+8(7),=CL7'NOLIST'
         MVC   RECORD+16(9),=CL9'MAP'
         TM    LE_STATUS_BYTE_02,BIT2
         BO    *+10
         MVC   RECORD+16(9),=CL9'NOMAP'
         MVC   RECORD+25(6),=CL6'NUM'
         TM    LE_STATUS_BYTE_02,BIT3
         BO    *+10
         MVC   RECORD+25(6),=CL6'NONUM'
         MVC   RECORD+33(6),=CL6'OBJ'
         TM    LE_STATUS_BYTE_02,BIT4
         BO    *+10
         MVC   RECORD+33(6),=CL6'NOOBJ'
         MVC   RECORD+40(8),=CL8'OFFSET'
         TM    LE_STATUS_BYTE_02,BIT5
         BO    *+10
         MVC   RECORD+40(8),=CL8'NOOFFSET'
         MVC   RECORD+51(10),=CL10'OPTIMIZE'
         TM    LE_STATUS_BYTE_02,BIT6
         BO    *+10
         MVC   RECORD+51(10),=CL10'NOOPTIMIZE'
         MVC   RECORD+62(17),=CL17'DDNAME(no Default)'
         TM    LE_STATUS_BYTE_02,BIT7
         BO    *+10
         MVC   RECORD+62(17),=CL17'DDNAME(Default)'
         BAL   R14,SPACE1
         MVC   RECORD,BLANKS
         MVC   RECORD+1(15),=CL15'NUMPROC(MIG)'
         TM    LE_STATUS_BYTE_05,BIT0
         BO    LE_370_21
         MVC   RECORD+1(15),=CL15'NUMPROC(PFD)'
         TM    LE_STATUS_BYTE_03,BIT0
         BO    *+10
         MVC   RECORD+1(15),=CL15'NUMPROC(NOPFD)'
LE_370_21 DS 0H
         MVC   RECORD+16(7),=CL7'RENT'
         TM    LE_STATUS_BYTE_03,BIT1
         BO    *+10
         MVC   RECORD+16(7),=CL7'NORENT'
         MVC   RECORD+25(6),=CL6'RES'
         TM    LE_STATUS_BYTE_03,BIT2
         BO    *+10
         MVC   RECORD+25(6),=CL6'NORES'
         MVC   RECORD+33(6),=CL6'SEQ'
         TM    LE_STATUS_BYTE_03,BIT3
         BO    *+10
         MVC   RECORD+33(6),=CL6'NOSEQ'
         MVC   RECORD+40(12),=CL12'SIZE(MAX)'
         TM    LE_STATUS_BYTE_03,BIT4
         BO    *+10
         MVC   RECORD+40(12),=CL12'SIZE(value)'
         MVC   RECORD+51(9),=CL9'SOURCE'
         TM    LE_STATUS_BYTE_03,BIT5
         BO    *+10
         MVC   RECORD+51(9),=CL9'NOSOURCE'
         MVC   RECORD+62(10),=CL10'SSRANGE'
         TM    LE_STATUS_BYTE_03,BIT6
         BO    *+10
         MVC   RECORD+62(10),=CL10'NOSSRANGE'
         MVC   RECORD+72(8),=CL8'TERM'
         TM    LE_STATUS_BYTE_03,BIT7
         BO    *+10
         MVC   RECORD+72(8),=CL8'NOTERM'
         BAL   R14,SPACE1
         MVC   RECORD,BLANKS
         MVC   RECORD+1(8),=CL8'TEST'
         TM    LE_STATUS_BYTE_04,BIT0
         BO    *+10
         MVC   RECORD+1(8),=CL8'NOTEST'
         MVC   RECORD+8(10),=CL11'TRUNC(BIN)'
         TM    LE_STATUS_BYTE_05,BIT4
         BO    LE_370_33
         MVC   RECORD+8(10),=CL11'TRUNC(STD)'
         TM    LE_STATUS_BYTE_04,BIT1
         BO    *+10
         MVC   RECORD+8(10),=CL11'TRUNC(OPT)'
LE_370_33 DS 0H
         MVC   RECORD+25(8),=CL8'VBREF'
         TM    LE_STATUS_BYTE_04,BIT3
         BO    *+10
         MVC   RECORD+25(8),=CL8'NOVBREF'
         MVC   RECORD+33(6),=CL6'XREF'
         TM    LE_STATUS_BYTE_04,BIT4
         BO    *+10
         MVC   RECORD+33(6),=CL6'NOXREF'
         MVC   RECORD+40(6),=CL6'ZWB'
         TM    LE_STATUS_BYTE_04,BIT5
         BO    *+10
         MVC   RECORD+40(6),=CL6'NOZWB'
         MVC   RECORD+51(7),=CL7'NAME'
         TM    LE_STATUS_BYTE_04,BIT6
         BO    *+10
         MVC   RECORD+51(7),=CL7'NONAME'
         MVC   RECORD+62(8),=CL8'CMPR2'
         TM    LE_STATUS_BYTE_04,BIT7
         BO    *+10
         MVC   RECORD+62(8),=CL8'NOCMPR2'
         BAL   R14,SPACE1
         MVC   RECORD,BLANKS
         MVC   RECORD+1(12),=CL12'NUMCLS'  other Cobol
         TM    LE_STATUS_BYTE_05,BIT1
         BO    *+10
         MVC   RECORD+1(12),=CL12'NONUMCLS'
         CLI   LE_SWITCH,C'1'   COBOL/370
         BNE   LE_370_42
         CLC   LE_VERS(4),=C'0102'  Vers+Rel < 0102 COBOL MVS and VM
         BL    LE_370_42             yes
         MVC   RECORD+1(12),=CL12'NUMCLS(ALT)'
         TM    LE_STATUS_BYTE_05,BIT1
         BO    *+10
         MVC   RECORD+1(12),=CL12'NUMCLS(PRIM)'
LE_370_42 DS 0H
         MVC   RECORD+16(7),=CL7'DBCS'
         TM    LE_STATUS_BYTE_05,BIT2
         BO    *+10
         MVC   RECORD+16(7),=CL7'NODBCS'
         MVC   RECORD+25(6),=CL6'AWO'
         TM    LE_STATUS_BYTE_05,BIT3
         BO    *+10
         MVC   RECORD+25(6),=CL6'NOAWO'
         CLI   LE_SWITCH,C'1'                  Cobol/370
         BNE   LE_370_48                       no, jump around
         MVC   RECORD+33(9),=CL9'EVENTS'       n/a COBOL/2
         TM    LE_STATUS_BYTE_05,BIT5
         BO    *+10
         MVC   RECORD+33(9),=CL9'NOEVENTS'
         MVC   RECORD+51(11),=CL11'CURRENCY'   n/a COBOL/2
         TM    LE_STATUS_BYTE_05,BIT6
         BO    *+10
         MVC   RECORD+51(11),=CL11'NOCURRENCY'
LE_370_48 DS 0H
         BAL   R14,SPACE1
         MVC   RECORD,BLANKS
         MVC   RECORD+1(40),=CL40'Compilation unit = Class'
         TM    LE_STATUS_BYTE_05,BIT7
         BO    *+10
         MVC   RECORD+1(40),=CL40'Compilation unit = Program'
         BAL   R14,SPACE1
         MVC   RECORD+1(40),=CL40'User supplied reserved word list'
         TM    LE_STATUS_BYTE_04,BIT2
         BO    *+10
         MVC   RECORD+1(40),=CL40'Installation default res. word list'
         BAL   R14,SPACE1
         MVC   RECORD,BLANKS
         CLI   LE_SWITCH,C'1'   COBOL/370 ?
         BNE   LE_370_50Z         no
         CLC   LE_VERS(4),=C'0102'  Vers+Rel < 0102 COBOL MVS and VM
         BL    LE_370_50Z         no
*                         Supportet only for COBOL MVS and VM R2
         MVC   RECORD+1(11),=CL11'RMODE(ANY)'
         TM    LE_STATUS_BYTE_26,BIT0
         BO    *+10
         MVC   RECORD+1(11),=CL11'RMODE(24)'
         MVC   RECORD+16(13),=CL13'TEST(STMT)'
         TM    LE_STATUS_BYTE_26,BIT1
         BO    *+10
         MVC   RECORD+16(13),=CL13'NO TEST(STMT)'
         MVC   RECORD+33(13),=CL13'TEST(PATH)'
         TM    LE_STATUS_BYTE_26,BIT2
         BO    *+10
         MVC   RECORD+33(13),=CL13'NO TEST(PATH)'
         MVC   RECORD+51(14),=CL14'TEST(BLOCK)'
         TM    LE_STATUS_BYTE_26,BIT3
         BO    *+10
         MVC   RECORD+51(14),=CL14'NO TEST(BLOCK)'
         MVC   RECORD+72(17),=CL17'OPT(FULL)'
         TM    LE_STATUS_BYTE_26,BIT4
         BO    *+10
         MVC   RECORD+72(17),=CL17'NOOPT OR OPT(STD)'
         BAL   R14,SPACE1
         MVC   RECORD,BLANKS
         MVC   RECORD+1(13),=CL13'INTDATE(LIL)'
         TM    LE_STATUS_BYTE_26,BIT5
         BO    *+10
         MVC   RECORD+1(13),=CL13'INTDATE(ANSI)'
         MVC   RECORD+16(22),=CL22'PGMNAME(LONGUPPER)'
         TM    LE_STATUS_BYTE_27,BIT0
         BO    *+10
         MVC   RECORD+16(22),=CL22'NOT PGMNAME(LONGUPPER)'
         MVC   RECORD+40(22),=CL22'PGMNAME(LONGMIXED)'
         TM    LE_STATUS_BYTE_27,BIT1
         BO    *+10
         MVC   RECORD+40(22),=CL22'NOT PGMNAME(LONGMIXED)'
         BAL   R14,SPACE1
         MVC   RECORD,BLANKS
         MVC   RECORD+1(5),=CL5'DLL'
         TM    LE_STATUS_BYTE_27,BIT2
         BO    *+10
         MVC   RECORD+1(5),=CL5'NODLL'
         MVC   RECORD+16(11),=CL11'EXPORTALL'
         TM    LE_STATUS_BYTE_27,BIT3
         BO    *+10
         MVC   RECORD+16(11),=CL11'NOEXPORTALL'
         MVC   RECORD+33(10),=CL10'DATEPROC'
         TM    LE_STATUS_BYTE_27,BIT4
         BO    *+10
         MVC   RECORD+33(10),=CL10'NODATEPROC'
         STRING (RECORD,,L),1X,'YEARWINDOW(',(LE_YEAR_WINDOW,H,R4B),   *
               ')',INTO=RECORD
LE_370_50Z DS 0H
         BAL   R14,SPACE2
         STRING '============ Additional information ================',*
               '=============================================',        *
               INTO=RECORD
         BAL   R14,SPACE1
         STRING '============ about DATA DIVISION    ================',*
               '=============================================',        *
               INTO=RECORD
         BAL   R14,SPACE2
         STRING 'Program use no QSAM or SAM access method',INTO=RECORD
         TM    LE_STATUS_BYTE_06,BIT0
         BNO   LE_370_51
         STRING 'Program use QSAM or SAM access',INTO=RECORD
LE_370_51 DS 0H
         BAL   R14,SPACE1
         STRING 'Program use no VSAM sequential files',INTO=RECORD
         TM    LE_STATUS_BYTE_06,BIT1
         BNO   LE_370_52
         STRING 'Program use VSAM sequential files',INTO=RECORD
LE_370_52 DS 0H
         BAL   R14,SPACE1
         STRING 'Program use no VSAM indexed files',INTO=RECORD
         TM    LE_STATUS_BYTE_06,BIT2
         BNO   LE_370_53
         STRING 'Program use VSAM indexed files',INTO=RECORD
LE_370_53 DS 0H
         BAL   R14,SPACE1
         STRING 'Program use no VSAM rba files',INTO=RECORD
         TM    LE_STATUS_BYTE_06,BIT3
         BNO   LE_370_54
         STRING 'Program use VSAM rba files',INTO=RECORD
LE_370_54 DS 0H
         BAL   R14,SPACE1
         STRING 'Program use no CODE-SET (ASCII files)',INTO=RECORD
         TM    LE_STATUS_BYTE_06,BIT4
         BNO   LE_370_55
         STRING 'Program use CODE-SET (ASCII files)',INTO=RECORD
LE_370_55 DS 0H
         BAL   R14,SPACE1
         STRING 'Program use no spanned records',INTO=RECORD
         TM    LE_STATUS_BYTE_06,BIT5
         BNO   LE_370_56
         STRING 'Program use spanned receords',INTO=RECORD
LE_370_56 DS 0H
         BAL   R14,SPACE1
         STRING 'Program has no picture G (DBCS) items',INTO=RECORD
         TM    LE_STATUS_BYTE_06,BIT6
         BNO   LE_370_57
         STRING 'Program has picture G (DBCS) items',INTO=RECORD
LE_370_57 DS 0H
         BAL   R14,SPACE1
         STRING 'Program has no OCCURS DEPENDING ON items',INTO=RECORD
         TM    LE_STATUS_BYTE_06,BIT7
         BNO   LE_370_58
         STRING 'Program has OCCURS DEPENDING ON items',INTO=RECORD
LE_370_58 DS 0H
         BAL   R14,SPACE1
         STRING 'Program has no SYNCHRONIZED clause',INTO=RECORD
         TM    LE_STATUS_BYTE_07,BIT0
         BNO   LE_370_59
         STRING 'Program has SYNCHRONIZED clause',INTO=RECORD
LE_370_59 DS 0H
         BAL   R14,SPACE1
         STRING 'Program has no JUSTIFIED clause',INTO=RECORD
         TM    LE_STATUS_BYTE_07,BIT1
         BNO   LE_370_60
         STRING 'Program has JUSTIFIED clause',INTO=RECORD
LE_370_60 DS 0H
         BAL   R14,SPACE1
         STRING 'Program has no POINTER items',INTO=RECORD
         TM    LE_STATUS_BYTE_07,BIT2
         BNO   LE_370_61
         STRING 'Program has POINTER items',INTO=RECORD
LE_370_61 DS 0H
         BAL   R14,SPACE1
         STRING 'Program has no complex ODO clause',INTO=RECORD
         TM    LE_STATUS_BYTE_07,BIT3
         BNO   LE_370_62
         STRING 'Program has complex ODO clause',INTO=RECORD
LE_370_62 DS 0H
         BAL   R14,SPACE1
         STRING 'Program has no external floating-point items',        *
               INTO=RECORD
         TM    LE_STATUS_BYTE_07,BIT4
         BNO   LE_370_63
         STRING 'Program has external floating-point items',INTO=RECORD
LE_370_63 DS 0H
         CLI   LE_SWITCH,C'1'                  Cobol/370
         BNE   LE_370_64                       no, jump around
         BAL   R14,SPACE1
         STRING 'Program has no procedure-pointer items',INTO=RECORD
         TM    LE_STATUS_BYTE_07,BIT6       n/a cobol/2 or OS/VS COBOL
         BNO   LE_370_64
         STRING 'Program has procedure-pointer items',INTO=RECORD
LE_370_64 DS 0H
         BAL   R14,SPACE2
         STRING '============ Additional information    =============',*
               '=============================================',        *
               INTO=RECORD
         BAL   R14,SPACE1
         STRING '============ about ENVIROMENT DIVISION =============',*
               '=============================================',        *
               INTO=RECORD
         BAL   R14,SPACE2
         STRING 'Program use no FILE-STATUS clause',INTO=RECORD
         TM    LE_STATUS_BYTE_08,BIT0
         BNO   LE_370_66
         STRING 'Program use FILE-STATUS clause',INTO=RECORD
LE_370_66 DS 0H
         BAL   R14,SPACE1
         STRING 'Program use no RERUN clause in I/O-control',          *
               INTO=RECORD
         TM    LE_STATUS_BYTE_08,BIT1
         BNO   LE_370_67
         STRING 'Program has RERUN clause in I/O-control',INTO=RECORD
LE_370_67 DS 0H
         BAL   R14,SPACE1
         STRING 'Program use no UPSI switches',INTO=RECORD
         TM    LE_STATUS_BYTE_08,BIT2
         BNO   LE_370_68
         STRING 'Program use UPSI switches',INTO=RECORD
LE_370_68 DS 0H
         BAL   R14,SPACE2
         STRING '============ Additional information    =============',*
               '=============================================',        *
               INTO=RECORD
         BAL   R14,SPACE1
         STRING '============ about PROCEDURE DIVISION  =============',*
               '=============================================',        *
               INTO=RECORD
         BAL   R14,SPACE2
         STRING 'Following statements in control (check Y/N):',        *
               INTO=RECORD
         BAL   R14,SPACE1
         MVC   RECORD,BLANKS
         MVC   RECORD+1(6),=CL6'Accept'
         MVI   RECORD+15,C'N'
         TM    LE_STATUS_BYTE_09,BIT0
         BNO   *+8
         MVI   RECORD+15,C'Y'
         MVC   RECORD+18(3),=CL3'Add'
         MVI   RECORD+32,C'N'
         TM    LE_STATUS_BYTE_09,BIT1
         BNO   *+8
         MVI   RECORD+32,C'Y'
         MVC   RECORD+35(5),=CL5'Alter'
         MVI   RECORD+49,C'N'
         TM    LE_STATUS_BYTE_09,BIT2
         BNO   *+8
         MVI   RECORD+49,C'Y'
         MVC   RECORD+52(4),=CL4'Call'
         MVI   RECORD+66,C'N'
         TM    LE_STATUS_BYTE_09,BIT3
         BNO   *+8
         MVI   RECORD+66,C'Y'
         MVC   RECORD+69(6),=CL6'Cancel'
         MVI   RECORD+83,C'N'
         TM    LE_STATUS_BYTE_09,BIT4
         BNO   *+8
         MVI   RECORD+83,C'Y'
         MVC   RECORD+86(5),=CL5'Close'
         MVI   RECORD+100,C'N'
         TM    LE_STATUS_BYTE_09,BIT7
         BNO   *+8
         MVI   RECORD+100,C'Y'
         BAL   R14,SPACE1
         MVC   RECORD,BLANKS
         MVC   RECORD+1(7),=CL7'Compute'
         MVI   RECORD+15,C'N'
         TM    LE_STATUS_BYTE_10,BIT0
         BNO   *+8
         MVI   RECORD+15,C'Y'
         MVC   RECORD+18(6),=CL6'Delete'
         MVI   RECORD+32,C'N'
         TM    LE_STATUS_BYTE_10,BIT2
         BNO   *+8
         MVI   RECORD+32,C'Y'
         MVC   RECORD+35(7),=CL7'Display'
         MVI   RECORD+49,C'N'
         TM    LE_STATUS_BYTE_10,BIT4
         BNO   *+8
         MVI   RECORD+49,C'Y'
         MVC   RECORD+52(6),=CL6'Divide'
         MVI   RECORD+66,C'N'
         TM    LE_STATUS_BYTE_10,BIT5
         BNO   *+8
         MVI   RECORD+66,C'Y'
         MVC   RECORD+69(11),=CL11'End-Perform'
         MVI   RECORD+83,C'N'
         TM    LE_STATUS_BYTE_11,BIT1
         BNO   *+8
         MVI   RECORD+83,C'Y'
         MVC   RECORD+86(5),=CL5'Enter'
         MVI   RECORD+100,C'N'
         TM    LE_STATUS_BYTE_11,BIT2
         BNO   *+8
         MVI   RECORD+100,C'Y'
         BAL   R14,SPACE1
         MVC   RECORD,BLANKS
         MVC   RECORD+1(5),=CL5'Entry'
         MVI   RECORD+15,C'N'
         TM    LE_STATUS_BYTE_11,BIT3
         BNO   *+8
         MVI   RECORD+15,C'Y'
         MVC   RECORD+18(4),=CL4'Exit'
         MVI   RECORD+32,C'N'
         TM    LE_STATUS_BYTE_11,BIT4
         BNO   *+8
         MVI   RECORD+32,C'Y'
         MVC   RECORD+35(5),=CL5'Go to'
         MVI   RECORD+49,C'N'
         TM    LE_STATUS_BYTE_11,BIT6
         BNO   *+8
         MVI   RECORD+49,C'Y'
         MVC   RECORD+52(2),=CL2'If'
         MVI   RECORD+66,C'N'
         TM    LE_STATUS_BYTE_11,BIT7
         BNO   *+8
         MVI   RECORD+66,C'Y'
         MVC   RECORD+69(10),=CL10'Initialize'
         MVI   RECORD+83,C'N'
         TM    LE_STATUS_BYTE_12,BIT0
         BNO   *+8
         MVI   RECORD+83,C'Y'
         CLI   LE_SWITCH,C'1'   COBOL/370 ?
         BNE   LE_370_70          no, jump around
         MVC   RECORD+86(6),=CL6'Invoke'   comes with COBOL/370
         MVI   RECORD+100,C'N'
         TM    LE_STATUS_BYTE_12,BIT1
         BNO   *+8
         MVI   RECORD+100,C'Y'
LE_370_70 DS 0H
         BAL   R14,SPACE1
         MVC   RECORD,BLANKS
         MVC   RECORD+1(7),=CL7'Inspect'
         MVI   RECORD+15,C'N'
         TM    LE_STATUS_BYTE_12,BIT2
         BNO   *+8
         MVI   RECORD+15,C'Y'
         MVC   RECORD+18(5),=CL5'Merge'
         MVI   RECORD+32,C'N'
         TM    LE_STATUS_BYTE_12,BIT3
         BNO   *+8
         MVI   RECORD+32,C'Y'
         MVC   RECORD+35(4),=CL4'Move'
         MVI   RECORD+49,C'N'
         TM    LE_STATUS_BYTE_12,BIT4
         BNO   *+8
         MVI   RECORD+49,C'Y'
         MVC   RECORD+52(8),=CL8'Multiply'
         MVI   RECORD+66,C'N'
         TM    LE_STATUS_BYTE_12,BIT5
         BNO   *+8
         MVI   RECORD+66,C'Y'
         MVC   RECORD+69(4),=CL4'Open'
         MVI   RECORD+83,C'N'
         TM    LE_STATUS_BYTE_12,BIT6
         BNO   *+8
         MVI   RECORD+83,C'Y'
         MVC   RECORD+86(7),=CL7'Perform'
         MVI   RECORD+100,C'N'
         TM    LE_STATUS_BYTE_12,BIT7
         BNO   *+8
         MVI   RECORD+100,C'Y'
         BAL   R14,SPACE1
         MVC   RECORD,BLANKS
         MVC   RECORD+1(4),=CL4'Read'
         MVI   RECORD+15,C'N'
         TM    LE_STATUS_BYTE_13,BIT0
         BNO   *+8
         MVI   RECORD+15,C'Y'
         MVC   RECORD+18(7),=CL7'Release'
         MVI   RECORD+32,C'N'
         TM    LE_STATUS_BYTE_13,BIT2
         BNO   *+8
         MVI   RECORD+32,C'Y'
         MVC   RECORD+35(6),=CL6'Return'
         MVI   RECORD+49,C'N'
         TM    LE_STATUS_BYTE_13,BIT3
         BNO   *+8
         MVI   RECORD+49,C'Y'
         MVC   RECORD+52(7),=CL7'Rewrite'
         MVI   RECORD+66,C'N'
         TM    LE_STATUS_BYTE_13,BIT4
         BNO   *+8
         MVI   RECORD+66,C'Y'
         MVC   RECORD+69(6),=CL6'Search'
         MVI   RECORD+83,C'N'
         TM    LE_STATUS_BYTE_13,BIT5
         BNO   *+8
         MVI   RECORD+83,C'Y'
         MVC   RECORD+86(3),=CL3'Set'
         MVI   RECORD+100,C'N'
         TM    LE_STATUS_BYTE_13,BIT7
         BNO   *+8
         MVI   RECORD+100,C'Y'
         BAL   R14,SPACE1
         MVC   RECORD,BLANKS
         MVC   RECORD+1(4),=CL4'Sort'
         MVI   RECORD+15,C'N'
         TM    LE_STATUS_BYTE_14,BIT0
         BNO   *+8
         MVI   RECORD+15,C'Y'
         MVC   RECORD+18(5),=CL5'Start'
         MVI   RECORD+32,C'N'
         TM    LE_STATUS_BYTE_14,BIT1
         BNO   *+8
         MVI   RECORD+32,C'Y'
         MVC   RECORD+35(4),=CL4'Stop'
         MVI   RECORD+49,C'N'
         TM    LE_STATUS_BYTE_14,BIT2
         BNO   *+8
         MVI   RECORD+49,C'Y'
         MVC   RECORD+52(6),=CL6'String'
         MVI   RECORD+66,C'N'
         TM    LE_STATUS_BYTE_14,BIT3
         BNO   *+8
         MVI   RECORD+66,C'Y'
         MVC   RECORD+69(4),=CL8'Subtract'
         MVI   RECORD+83,C'N'
         TM    LE_STATUS_BYTE_14,BIT4
         BNO   *+8
         MVI   RECORD+83,C'Y'
         MVC   RECORD+86(8),=CL8'Unstring'
         MVI   RECORD+100,C'N'
         TM    LE_STATUS_BYTE_14,BIT7
         BNO   *+8
         MVI   RECORD+100,C'Y'
         BAL   R14,SPACE1
         MVC   RECORD,BLANKS
         MVC   RECORD+1(3),=CL3'Use'
         MVI   RECORD+15,C'N'
         TM    LE_STATUS_BYTE_15,BIT0
         BNO   *+8
         MVI   RECORD+15,C'Y'
         MVC   RECORD+18(5),=CL5'Write'
         MVI   RECORD+32,C'N'
         TM    LE_STATUS_BYTE_15,BIT1
         BNO   *+8
         MVI   RECORD+32,C'Y'
         MVC   RECORD+35(8),=CL8'Continue'
         MVI   RECORD+49,C'N'
         TM    LE_STATUS_BYTE_15,BIT2
         BNO   *+8
         MVI   RECORD+49,C'Y'
         MVC   RECORD+52(7),=CL7'End-Add'
         MVI   RECORD+66,C'N'
         TM    LE_STATUS_BYTE_15,BIT3
         BNO   *+8
         MVI   RECORD+66,C'Y'
         MVC   RECORD+69(8),=CL8'End-Call'
         MVI   RECORD+83,C'N'
         TM    LE_STATUS_BYTE_15,BIT4
         BNO   *+8
         MVI   RECORD+83,C'Y'
         MVC   RECORD+86(11),=CL11'End-Compute'
         MVI   RECORD+100,C'N'
         TM    LE_STATUS_BYTE_15,BIT5
         BNO   *+8
         MVI   RECORD+100,C'Y'
         BAL   R14,SPACE1
         MVC   RECORD,BLANKS
         MVC   RECORD+1(10),=CL10'End-Delete'
         MVI   RECORD+15,C'N'
         TM    LE_STATUS_BYTE_15,BIT6
         BNO   *+8
         MVI   RECORD+15,C'Y'
         MVC   RECORD+18(10),=CL10'End-Divide'
         MVI   RECORD+32,C'N'
         TM    LE_STATUS_BYTE_15,BIT7
         BNO   *+8
         MVI   RECORD+32,C'Y'
         MVC   RECORD+35(12),=CL12'End-Evaluate'
         MVI   RECORD+49,C'N'
         TM    LE_STATUS_BYTE_16,BIT0
         BNO   *+8
         MVI   RECORD+49,C'Y'
         MVC   RECORD+52(6),=CL6'End-If'
         MVI   RECORD+66,C'N'
         TM    LE_STATUS_BYTE_16,BIT1
         BNO   *+8
         MVI   RECORD+66,C'Y'
         MVC   RECORD+69(11),=CL11'End-Muliply'
         MVI   RECORD+83,C'N'
         TM    LE_STATUS_BYTE_16,BIT2
         BNO   *+8
         MVI   RECORD+83,C'Y'
         MVC   RECORD+86(8),=CL8'End-Read'
         MVI   RECORD+100,C'N'
         TM    LE_STATUS_BYTE_16,BIT3
         BNO   *+8
         MVI   RECORD+100,C'Y'
         BAL   R14,SPACE1
         MVC   RECORD,BLANKS
         MVC   RECORD+1(10),=CL10'End-Return'
         MVI   RECORD+15,C'N'
         TM    LE_STATUS_BYTE_16,BIT4
         BNO   *+8
         MVI   RECORD+15,C'Y'
         MVC   RECORD+18(11),=CL11'End-Rewrite'
         MVI   RECORD+32,C'N'
         TM    LE_STATUS_BYTE_16,BIT5
         BNO   *+8
         MVI   RECORD+32,C'Y'
         MVC   RECORD+35(10),=CL10'End-Search'
         MVI   RECORD+49,C'N'
         TM    LE_STATUS_BYTE_16,BIT6
         BNO   *+8
         MVI   RECORD+49,C'Y'
         MVC   RECORD+52(9),=CL9'End-Start'
         MVI   RECORD+66,C'N'
         TM    LE_STATUS_BYTE_16,BIT7
         BNO   *+8
         MVI   RECORD+66,C'Y'
         MVC   RECORD+69(10),=CL10'End-String'
         MVI   RECORD+83,C'N'
         TM    LE_STATUS_BYTE_17,BIT0
         BNO   *+8
         MVI   RECORD+83,C'Y'
         MVC   RECORD+86(13),=CL13'End-Substract'
         MVI   RECORD+100,C'N'
         TM    LE_STATUS_BYTE_17,BIT1
         BNO   *+8
         MVI   RECORD+100,C'Y'
         BAL   R14,SPACE1
         MVC   RECORD,BLANKS
         MVC   RECORD+1(12),=CL12'End-Unstring'
         MVI   RECORD+15,C'N'
         TM    LE_STATUS_BYTE_17,BIT2
         BNO   *+8
         MVI   RECORD+15,C'Y'
         MVC   RECORD+18(9),=CL9'End-Write'
         MVI   RECORD+32,C'N'
         TM    LE_STATUS_BYTE_17,BIT3
         BNO   *+8
         MVI   RECORD+32,C'Y'
         MVC   RECORD+35(6),=CL6'Goback'
         MVI   RECORD+49,C'N'
         TM    LE_STATUS_BYTE_17,BIT4
         BNO   *+8
         MVI   RECORD+49,C'Y'
         MVC   RECORD+52(9),=CL9'Evaluate'
         MVI   RECORD+66,C'N'
         TM    LE_STATUS_BYTE_17,BIT5
         BNO   *+8
         MVI   RECORD+66,C'Y'
         MVC   RECORD+69(7),=CL7'Service'
         MVI   RECORD+83,C'N'
         TM    LE_STATUS_BYTE_17,BIT7
         BNO   *+8
         MVI   RECORD+83,C'Y'
         MVC   RECORD+86(10),=CL10'End-Invoke'
         MVI   RECORD+100,C'N'
         TM    LE_STATUS_BYTE_18,BIT0
         BNO   *+8
         MVI   RECORD+100,C'Y'
         BAL   R14,SPACE1
         STRING '====================================================',*
               '=============================================',        *
               INTO=RECORD
         BAL   R14,SPACE2
         STRING 'No hexadecimal literals',INTO=RECORD
         TM    LE_STATUS_BYTE_21,BIT0
         BNO   LE_370_128
         STRING 'Procedure include hexadecimal literals',INTO=RECORD
LE_370_128 DS 0H
         BAL   R14,SPACE1
         STRING 'No altered GO TO',INTO=RECORD
         TM    LE_STATUS_BYTE_21,BIT1
         BNO   LE_370_129
         STRING 'Program contains altered GO TO',INTO=RECORD
LE_370_129 DS 0H
         BAL   R14,SPACE1
         STRING 'No I/O error declarative',INTO=RECORD
         TM    LE_STATUS_BYTE_21,BIT2
         BNO   LE_370_130
         STRING 'I/O error declarative',INTO=RECORD
LE_370_130 DS 0H
         BAL   R14,SPACE1
         STRING 'No Label declarative',INTO=RECORD
         TM    LE_STATUS_BYTE_21,BIT3
         BNO   LE_370_131
         STRING 'Label declarative',INTO=RECORD
LE_370_131 DS 0H
         BAL   R14,SPACE1
         STRING 'No debugging declarative',INTO=RECORD
         TM    LE_STATUS_BYTE_21,BIT4
         BNO   LE_370_132
         STRING 'Debugging declarative',INTO=RECORD
LE_370_132 DS 0H
         BAL   R14,SPACE1
         STRING 'No program segmentation',INTO=RECORD
         TM    LE_STATUS_BYTE_21,BIT5
         BNO   LE_370_133
         STRING 'Programm segmentation',INTO=RECORD
LE_370_133 DS 0H
         BAL   R14,SPACE1
         STRING 'No Open Extend',INTO=RECORD
         TM    LE_STATUS_BYTE_21,BIT6
         BNO   LE_370_134
         STRING 'Open Extend',INTO=RECORD
LE_370_134 DS 0H
         BAL   R14,SPACE1
         STRING 'No exit program',INTO=RECORD
         TM    LE_STATUS_BYTE_21,BIT7
         BNO   LE_370_135
         STRING 'Exit Program',INTO=RECORD
LE_370_135 DS 0H
         BAL   R14,SPACE1
         STRING 'No call literal',INTO=RECORD
         TM    LE_STATUS_BYTE_22,BIT0
         BNO   LE_370_136
         STRING 'Call literal (static?), see options',INTO=RECORD
LE_370_136 DS 0H
         BAL   R14,SPACE1
         STRING 'No call identifier',INTO=RECORD
         TM    LE_STATUS_BYTE_22,BIT1
         BNO   LE_370_137
         STRING 'Call identifier',INTO=RECORD
LE_370_137 DS 0H
         BAL   R14,SPACE1
         STRING 'No call on overflow',INTO=RECORD
         TM    LE_STATUS_BYTE_22,BIT2
         BNO   LE_370_138
         STRING 'Call on overflow',INTO=RECORD
LE_370_138 DS 0H
         BAL   R14,SPACE1
         STRING 'No call length of',INTO=RECORD
         TM    LE_STATUS_BYTE_22,BIT3
         BNO   LE_370_139
         STRING 'Call length of',INTO=RECORD
LE_370_139 DS 0H
         BAL   R14,SPACE1
         STRING 'No call address of',INTO=RECORD
         TM    LE_STATUS_BYTE_22,BIT4
         BNO   LE_370_140
         STRING 'Call address',INTO=RECORD
LE_370_140 DS 0H
         BAL   R14,SPACE1
         STRING 'No close reel/unit',INTO=RECORD
         TM    LE_STATUS_BYTE_22,BIT5
         BNO   LE_370_141
         STRING 'Close reel/unit',INTO=RECORD
LE_370_141 DS 0H
         BAL   R14,SPACE1
         STRING 'No exponentiation used',INTO=RECORD
         TM    LE_STATUS_BYTE_22,BIT6
         BNO   LE_370_142
         STRING 'Exponentiation used',INTO=RECORD
LE_370_142 DS 0H
         BAL   R14,SPACE1
         STRING 'No floating point items used',INTO=RECORD
         TM    LE_STATUS_BYTE_22,BIT7
         BNO   LE_370_143
         STRING 'Floating point items used',INTO=RECORD
LE_370_143 DS 0H
         BAL   R14,SPACE1
         STRING 'No Copy-Statements',INTO=RECORD
         TM    LE_STATUS_BYTE_23,BIT0
         BNO   LE_370_144
         STRING 'Copy-Statements used',INTO=RECORD
LE_370_144 DS 0H
         BAL   R14,SPACE1
         STRING 'No Basis-Statements',INTO=RECORD
         TM    LE_STATUS_BYTE_23,BIT1
         BNO   LE_370_145
         STRING 'Basis-Statements used',INTO=RECORD
LE_370_145 DS 0H
         BAL   R14,SPACE1
         STRING 'No DBCS-Name in Program',INTO=RECORD
         TM    LE_STATUS_BYTE_23,BIT2
         BNO   LE_370_146
         STRING 'DBCS-Name in Program',INTO=RECORD
LE_370_146 DS 0H
         BAL   R14,SPACE1
         STRING 'No Shift-In/Shift-Out',INTO=RECORD
         TM    LE_STATUS_BYTE_23,BIT3
         BNO   LE_370_147
         STRING 'Shift-In/Shift-Out',INTO=RECORD
LE_370_147 DS 0H
         BAL   R14,SPACE1
         STRING 'No DBCS literal',INTO=RECORD
         TM    LE_STATUS_BYTE_24,BIT0
         BNO   LE_370_148
         STRING 'DBCS literal',INTO=RECORD
LE_370_148 DS 0H
         BAL   R14,SPACE1
         STRING 'No Replace-Statements',INTO=RECORD
         TM    LE_STATUS_BYTE_24,BIT1
         BNO   LE_370_149
         STRING 'Replace-Statements',INTO=RECORD
LE_370_149 DS 0H
         BAL   R14,SPACE1
         STRING 'No Reference modification was used',INTO=RECORD
         TM    LE_STATUS_BYTE_24,BIT2
         BNO   LE_370_150
         STRING 'Reference modification was used',INTO=RECORD
LE_370_150 DS 0H
         BAL   R14,SPACE1
         STRING 'No nested Program',INTO=RECORD
         TM    LE_STATUS_BYTE_24,BIT3
         BNO   LE_370_151
         STRING 'Nested Program',INTO=RECORD
LE_370_151 DS 0H
         BAL   R14,SPACE1
         STRING 'No INITIAL Program',INTO=RECORD
         TM    LE_STATUS_BYTE_24,BIT4
         BNO   LE_370_152
         STRING 'INITIAL Program',INTO=RECORD
LE_370_152 DS 0H
         BAL   R14,SPACE1
         STRING 'No COMMON Program',INTO=RECORD
         TM    LE_STATUS_BYTE_24,BIT5
         BNO   LE_370_153
         STRING 'COMMON Program',INTO=RECORD
LE_370_153 DS 0H
         BAL   R14,SPACE1
         STRING 'No Select Optional Files',INTO=RECORD
         TM    LE_STATUS_BYTE_24,BIT6
         BNO   LE_370_154
         STRING 'Select Optional Files',INTO=RECORD
LE_370_154 DS 0H
         BAL   R14,SPACE1
         STRING 'No external Files',INTO=RECORD
         TM    LE_STATUS_BYTE_24,BIT7
         BNO   LE_370_155
         STRING 'External Files',INTO=RECORD
LE_370_155 DS 0H
         BAL   R14,SPACE1
         STRING 'No global Files',INTO=RECORD
         TM    LE_STATUS_BYTE_25,BIT0
         BNO   LE_370_156
         STRING 'Global Files',INTO=RECORD
LE_370_156 DS 0H
         BAL   R14,SPACE1
         STRING 'No Record is varying clause',INTO=RECORD
         TM    LE_STATUS_BYTE_25,BIT1
         BNO   LE_370_157
         STRING 'Record is varying clause',INTO=RECORD
LE_370_157 DS 0H
         BAL   R14,SPACE1
         STRING 'No Accept from SYSIPT used in Label Declarative',     *
               INTO=RECORD
         TM    LE_STATUS_BYTE_25,BIT2
         BNO   LE_370_158
         STRING 'Accept from SYSIPT not used in Label Declarative',    *
               INTO=RECORD
LE_370_158 DS 0H
         BAL   R14,SPACE1
         STRING 'No Display upon SYSLST used in Label Declarative',    *
               INTO=RECORD
         TM    LE_STATUS_BYTE_25,BIT3
         BNO   LE_370_159
         STRING 'Display upon SYSLST not used in Label Declarative',   *
               INTO=RECORD
LE_370_159 DS 0H
         BAL   R14,SPACE1
         STRING 'No Display upon SYSPCH used in Label Declarative',    *
               INTO=RECORD
         TM    LE_STATUS_BYTE_25,BIT4
         BNO   LE_370_160
         STRING 'Display upon SYSPCH not used in Label Declarative',   *
               INTO=RECORD
LE_370_160 DS 0H
         BAL   R14,SPACE1
         STRING 'No Intrinsic function was used',INTO=RECORD
         TM    LE_STATUS_BYTE_25,BIT5
         BNO   LE_370_161
         STRING 'Intrinsic function was used',INTO=RECORD
LE_370_161 DS 0H
         BAL   R14,SPACE1
         STRING '============ End  ==================================',*
               '=============================================',        *
               INTO=RECORD
         BAL   R14,SPACE2
         LA    R15,0
         B     COBANAL_EXIT
INFO_COBOL DS 0H
         CLI   C1_OEM_MOD_AREA,X'00' low-value ?                 RS0700
         BE    INFO_COBOL_OEM                                    RS0700
         STRING '============ OEM Modified Area =====================',*
               '=============================================',        *
               INTO=RECORD                                       RS0700
         BAL   R14,SPACE2                                        RS0700
         STRING ' ',C1_OEM_MOD_AREA,INTO=RECORD                  RS0700
         BAL   R14,SPACE2                                        RS0700
INFO_COBOL_OEM DS 0H                                             RS0700
         STRING '============ Options in effect =====================',*
               '=============================================',        *
               INTO=RECORD
         BAL   R14,SPACE2
         MVC   RECORD,BLANKS
         MVC   RECORD+1(8),=CL8'SYMDMP'
         TM    C1_STATUS_BYTE_01,X'08'
         BO    *+10
         MVC   RECORD+1(8),=CL8'NOSYMDMP'
         MVC   RECORD+10(6),=CL6'FLOW'
         TM    C1_STATUS_BYTE_01,X'04'
         BO    *+10
         MVC   RECORD+10(6),=CL6'NOFLOW'
         MVC   RECORD+17(7),=CL7'STATE'
         TM    C1_STATUS_BYTE_01,X'02'
         BO    *+10
         MVC   RECORD+17(7),=CL7'NOSTATE'
         MVC   RECORD+25(6),=CL6'OPT'
         TM    C1_STATUS_BYTE_01,X'01'
         BO    *+10
         MVC   RECORD+25(6),=CL6'NOOPT'
         MVC   RECORD+32(6),=CL6'TEST'
         TM    C1_STATUS_BYTE_02,X'10'
         BO    *+10
         MVC   RECORD+32(6),=CL6'NOTEST'
         MVC   RECORD+39(6),=CL6'RES'
         TM    C1_STATUS_BYTE_03,X'80'
         BO    *+10
         MVC   RECORD+39(6),=CL6'NORES'
         MVC   RECORD+46(8),=CL8'ENDJOB'
         TM    C1_STATUS_BYTE_03,X'40'
         BO    *+10
         MVC   RECORD+46(8),=CL8'NOENDJOB'
         MVC   RECORD+55(8),=CL8'OBJ370'
         TM    C1_STATUS_BYTE_03,X'20'
         BO    *+10
         MVC   RECORD+55(8),=CL8'NOOBJ370'
         MVC   RECORD+64(8),=CL8'COUNT'
         TM    C1_STATUS_BYTE_03,X'08'
         BO    *+10
         MVC   RECORD+64(8),=CL8'NOCOUNT'
         BAL   R14,SPACE1
         MVC   RECORD,BLANKS
         MVC   RECORD+1(11),=CL11'READY TRACE'
         TM    C1_STATUS_BYTE_03,X'04'
         BO    *+10
         MVC   RECORD+1(11),=CL11'NO TRACE'
         BAL   R14,SPACE1
         STRING 'Sorry no more infomation for OS/VS COBOL',INTO=RECORD
         BAL   R14,SPACE1
         STRING 'You better upgrade to COBOL for OS/390 (MVS) and VM', *
               INTO=RECORD
         BAL   R14,SPACE1
         STRING '============ End  ==================================',*
               '=============================================',        *
               INTO=RECORD
         BAL   R14,SPACE2
         LA    R15,0
         B     COBANAL_EXIT
*============================================================*
* Print                                                      *
*============================================================*
SPACE2   DS 0H
         ST    R14,SAVER14
         LA    R1,SYSPRINT         GET OUTPUT DCB ADDRESS
         LA    R0,RECORD           GET OBJECT NAME ADDRESS
         PUT   (1),(0)             WRITE NAME TO NOTIFY DATA SET
         LA    R1,SYSPRINT         GET OUTPUT DCB ADDRESS
         LA    R0,BLANKS           GET OBJECT NAME ADDRESS
         BAS   R14,AMODE24             AMode24
         PUT   (1),(0)             WRITE NAME TO NOTIFY DATA SET
         BAS   R14,AMODE31             AMode31
         L     R14,SAVER14
         BR    R14            return
SPACE1   DS 0H
         ST    R14,SAVER14
         LA    R1,SYSPRINT         GET OUTPUT DCB ADDRESS
         LA    R0,RECORD           GET OBJECT NAME ADDRESS
         BAS   R14,AMODE24             AMode24
         PUT   (1),(0)             WRITE NAME TO NOTIFY DATA SET
         BAS   R14,AMODE31             AMode31
         L     R14,SAVER14
         BR    R14            return
***************************************************************
*
*                  get Member Name from PDS-Directory
*
***************************************************************
GETMEM   EQU   *
         ST    R14,GETMSAVE            save return address
         L     R4,ADBLKPTR             restore pointer
         CLC   DIRAREA(2),=XL2'0000'   Directory present?
         BNE   NEWNAME                   yes, get next
NEWBLOCK EQU   *
         BAS   R14,AMODE24             Amode24
         GET   INPUT,DIRAREA           get a new directory
         BAS   R14,AMODE31             Amode24
         LA    R4,DIRAREA              get work area address
         AH    R4,DIRAREA              + length
         ST    R4,ADBLKEND             save ending address
         LA    R4,DIRAREA+2            Skip LL bytes
         ST    R4,ADBLKPTR             save pointer
NEWNAME  EQU   *
         C     R4,ADBLKEND             end of current dir block
         BNL   NEWBLOCK                  yes, get new block
         MVC   PGMNAME,0(R4)           Save member-name
         IC    R5,11(R4)               LOOK FOR ANY USER TTRN'S
         SLL   R5,27                   SHIFT OFF UNWANTED BITS
         SRL   R5,26                   SHIFT BACK THE USABLE BI
         LA    R4,12(R4,R5)            ADD DISPL TO GET OVER TT
         ST    R4,ADBLKPTR             save Pointer next mem
         L     R14,GETMSAVE            restore return address
         BR    R14                     goback
AMODE24  LA    R14,0(,R14)             remove XA bit
         BSM   R0,R14                  return
         SPACE 2
AMODE31  O     R14,HIBIT               add XA bit
         BSM   R0,R14                  return
*
*============================================================*
* SONSTIGE DEFINITIONS                                       *
*============================================================*
****************************** CONSTANTS *****************************
C_COBOL370 DC X'00',C'CEE'                   COBOL/370 ?  X'00C3C5C5'
C_OPLINK   DC X'01',C'CEE'                   COBOL/370 ?  X'01C3C5C5'
HIBIT    DC    A(X'80000000')         XA BIT CONSTANS
BLANKS   DC    CL255' '           just blanks
C_LSTO   OPEN  (*-*,(OUTPUT)),MF=L
C_LSTOL  EQU   *-C_LSTO
C_LSTI   OPEN  (*-*,(INPUT)),MF=L
C_LSTIL  EQU   *-C_LSTI
C_CLOSE  CLOSE (*-*),MF=L
C_CLOSEL EQU   *-C_CLOSE
XFF      DC    XL8'FFFFFFFFFFFFFFFF' just High-value
SYSPRINT_FIX DCB   DSORG=PS,DDNAME=SYSPRINT,MACRF=PM,                  *
               RECFM=FB,LRECL=121
SYSPRINT_FIX_LENGTH EQU *-SYSPRINT_FIX   Length workarea
INPUT_FIX DCB   DSORG=PS,DDNAME=COBANAL,MACRF=(GM),                    *
               RECFM=U,BLKSIZE=256
*INPUT_FIX DCB   DSORG=PO,DDNAME=COBANAL,MACRF=(R),                    *
               RECFM=U,BLKSIZE=256
INPUT_FIX_LENGTH EQU *-INPUT_FIX     Length workarea
*
*============================================================*
* Workarea below the line                                    *
*============================================================*
COBANAL_WORK        DSECT
EYECATCHER          DS    CL8   'COBANAL'
PGMNAME             DS    CL8   Pgmname from the parmlist
SAVEAREA            DS    18F
SAVER14             DS    F
RETCODE             DS    F
ADR_COBANAL_WORK    DS    F     Save Workarea pointer
ADR_COBANAL_PARM    DS    F     Save Parmlist pointer
ADR_PGMNAME         DS    F     Save entry-point Application PGM
RC_PGMNAME          DS    F     Save application RC
PARM_LENGTH         DS    H     Parm length wihout header
GETMSAVE            DS    F     Parm length wihout header
ADBLKPTR            DS    F     Parm length wihout header
ADBLKEND            DS    F     Parm length wihout header
DOALL               DS    CL1   Analyze a complete loadlib
DD_COBANAL          DS    CL1   Switch for DD CobAnal
DOUBLE              DS    D
CSV_LENGTH          DS    F     Length returned by CSVQuery
         CSVQUERY MF=(L,CSVQRYWK)
****************************** VARIABLES *****************************
LE_SWITCH           DS    CL1   Switch for COBOL/370 or COBOL/2
LE_PGM_NAME         DS CL8  name of program
LE_COMP_YEAR        DS CL4  year of compilation
*  3 bytes because of OS/VS COBOL
LE_COMP_MONTH       DS CL3  month of compilation
LE_COMP_DAY         DS CL2  day of compilation
LE_COMP_HOURS       DS CL2  hours of compilation
LE_COMP_MIN         DS CL2  minutes of compilation
LE_COMP_SEC         DS CL2  seconds of compilation
LE_VERS             DS CL2  version
LE_REL              DS CL2  release
LE_MOD              DS CL2  modification level
LE_STATUS_BYTE      DS    0C   signature bytes
LE_STATUS_BYTE_01   DS X    status byte
LE_STATUS_BYTE_02   DS X    status byte
LE_STATUS_BYTE_03   DS X    status byte
LE_STATUS_BYTE_04   DS X    status byte
LE_STATUS_BYTE_05   DS X    status byte
LE_STATUS_BYTE_06   DS X    status byte
LE_STATUS_BYTE_07   DS X    status byte
LE_STATUS_BYTE_08   DS X    status byte
LE_STATUS_BYTE_09   DS X    status byte
LE_STATUS_BYTE_10   DS X    status byte
LE_STATUS_BYTE_11   DS X    status byte
LE_STATUS_BYTE_12   DS X    status byte
LE_STATUS_BYTE_13   DS X    status byte
LE_STATUS_BYTE_14   DS X    status byte
LE_STATUS_BYTE_15   DS X    status byte
LE_STATUS_BYTE_16   DS X    status byte
LE_STATUS_BYTE_17   DS X    status byte
LE_STATUS_BYTE_18   DS X    status byte
LE_STATUS_BYTE_19   DS X    status byte
LE_STATUS_BYTE_20   DS X    status byte
LE_STATUS_BYTE_21   DS X    status byte
LE_STATUS_BYTE_22   DS X    status byte
LE_STATUS_BYTE_23   DS X    status byte
LE_STATUS_BYTE_24   DS X    status byte
LE_STATUS_BYTE_25   DS X    status byte
LE_STATUS_BYTE_26   DS X    status byte Cobol for MVS and VM
LE_STATUS_BYTE_27   DS X    status byte Cobol for MVS and VM
LE_COBOL_SIGNAT     DS X    cobol signature level
LE_DATA_STATEMENTS  DS XL4  number of data items
LE_PROC_LINES       DS XL4  number of proc statements
LE_YEAR_WINDOW      DS H    YearWindow
SYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,                      *
               RECFM=FB,LRECL=121
INPUT    DCB   DSORG=PS,DDNAME=COBANAL,MACRF=(GM),                     *
               RECFM=U,BLKSIZE=256
DIRAREA             DS    XL256 PDS-Directory input area
PARMLIST            DS XL40
RECORD              DS CL132
COBANAL_WORK_LENGTH EQU *-COBANAL_WORK  Length workarea
*
*============================================================*
* Parameter (JCL)                                            *
*============================================================*
COBANAL_PARM        DSECT
COBANAL_PARM_LENGTH DS H
*
*
*============================================================*
* COBOL/370 DCL
*============================================================*
COBOL_370_DSECT     DSECT
                    DS CL4  bypass
CEE_EYECATCHER      DS CL4  excatcher
CEE_STACK_FRAME     DS F    stack frame size
CEE_PPA1_OFFSET     DS F    offset to first ppa1
                    DS CL4  reserved
CEE_PPA1_START      DS 0C
CEE_OFFSET          DS X    offset to length of name from ppa1
CEE_SIGNATURE       DS X    CEL-Signature
CEE_FLAG1           DS X    CEL-FLAGS Bitmask
CEE_FLAG2           DS X    Member Flags for Cobol
CEE_ADDRESS_OF_PPA2 DS F    Address of PPA2
CEE_OFFSET_DBI      DS F    Offset BDI (None)
CEE_EP_DESCRIPTOR   DS F    Entry Point Descriptor
CEE_STACK_OVERFLOW  DS F    Offset for Stack overflow
                    DS F    available word
                    DS F    available word
                    DS F    available word
                    DS F    available word
CEE_PRIMARY_EP      DS 0C
CEE_PRI_EP_ADDRESS  DS A    primary entry-point address
CEE_PGT_ADDRESS     DS A    PGT-Address
CEE_TGT_ADDRESS     DS A    PGT-Address
CEE_EP_NAME         DS A    Offset to entry_point_name
CEE_CURRENT_EP      DS A    current EP-Address
CEE_START           DS A    procedure code Address
CEE_INIT_PROG       DS A    Initialize Routine
CEE_PARM_LIST       DS A    Address of parm list for CEEINT
                    DS F    available word
                    DS H    available half-word
CEE_LENGTH_NAME     DS XL2  length of program_name
CEE_NAME_PART       DS 0C
CEE_PGM_NAME        DS CL8  name of programm
CEE_COMP_YEAR       DS CL4  year of compilation
CEE_COMP_MONTH      DS CL2  month of compilation
CEE_COMP_DAY        DS CL2  day of compilation
CEE_COMP_HOURS      DS CL2  hours of compilation
CEE_COMP_MIN        DS CL2  minutes of compilation
CEE_COMP_SEC        DS CL2  seconds of compilation
CEE_VERS            DS CL2  version
CEE_REL             DS CL2  release
CEE_MOD             DS CL2  modification level
                    DS F    available word
                    DS H
CEE_YEAR_WINDOW     DS H    YearWindow
CEE_STATUS_BYTE_01  DS X    status byte
CEE_STATUS_BYTE_02  DS X    status byte
CEE_STATUS_BYTE_03  DS X    status byte
CEE_STATUS_BYTE_04  DS X    status byte
CEE_STATUS_BYTE_05  DS X    status byte
CEE_STATUS_BYTE_06  DS X    status byte
CEE_STATUS_BYTE_07  DS X    status byte
CEE_STATUS_BYTE_08  DS X    status byte
CEE_STATUS_BYTE_09  DS X    status byte
CEE_STATUS_BYTE_10  DS X    status byte
CEE_STATUS_BYTE_11  DS X    status byte
CEE_STATUS_BYTE_12  DS X    status byte
CEE_STATUS_BYTE_13  DS X    status byte
CEE_STATUS_BYTE_14  DS X    status byte
CEE_STATUS_BYTE_15  DS X    status byte
CEE_STATUS_BYTE_16  DS X    status byte
CEE_STATUS_BYTE_17  DS X    status byte
CEE_STATUS_BYTE_18  DS X    status byte
CEE_STATUS_BYTE_19  DS X    status byte
CEE_STATUS_BYTE_20  DS X    status byte
CEE_STATUS_BYTE_21  DS X    status byte
CEE_STATUS_BYTE_22  DS X    status byte
CEE_STATUS_BYTE_23  DS X    status byte
CEE_COBOL_SIGNAT    DS X    cobol signature level
CEE_DATA_STATEMENTS DS XL4  number of data items
CEE_PROC_LINES      DS XL4  number of proc statements
CEE_STATUS_BYTE_24  DS X    status byte
CEE_STATUS_BYTE_25  DS X    status byte
CEE_STATUS_BYTE_26  DS X    status byte
CEE_STATUS_BYTE_27  DS X    status byte
*============================================================*
* COBOL2 DCL
*============================================================*
COBOL_2_DSECT      DSECT
                   DS CL4  bypass
                   DS X
C2_PGM_NAME        DS CL8  name of programm
C2_EYECATCHER      DS CL4  eyecatcher
C2_VERS            DS CL2  version
C2_REL             DS CL2  release
C2_MOD             DS CL2  modification level
C2_COMP_MONTH      DS CL2  month of compilation
                   DS CL1
C2_COMP_DAY        DS CL2  day of compilation
                   DS CL1
C2_COMP_YEAR       DS CL2  year of compilation
                   DS CL1
C2_COMP_HOURS      DS CL2  hours of compilation
                   DS CL1
C2_COMP_MIN        DS CL2  minutes of compilation
                   DS CL1
C2_COMP_SEC        DS CL2  seconds of compilation
C2_GET_ENTRY       DS A    Address of address
C2_STATUS_BYTE_01  DS X    status byte
C2_STATUS_BYTE_02  DS X    status byte
C2_STATUS_BYTE_03  DS X    status byte
C2_STATUS_BYTE_04  DS X    status byte
C2_STATUS_BYTE_05  DS X    status byte
C2_STATUS_BYTE_06  DS X    status byte
C2_STATUS_BYTE_07  DS X    status byte
C2_STATUS_BYTE_08  DS X    status byte
C2_STATUS_BYTE_09  DS X    status byte
C2_STATUS_BYTE_10  DS X    status byte
C2_STATUS_BYTE_11  DS X    status byte
C2_STATUS_BYTE_12  DS X    status byte
C2_STATUS_BYTE_13  DS X    status byte
C2_STATUS_BYTE_14  DS X    status byte
C2_STATUS_BYTE_15  DS X    status byte
C2_STATUS_BYTE_16  DS X    status byte
C2_STATUS_BYTE_17  DS X    status byte
C2_STATUS_BYTE_18  DS X    status byte
C2_STATUS_BYTE_19  DS X    status byte
C2_STATUS_BYTE_20  DS X    status byte
C2_STATUS_BYTE_21  DS X    status byte
C2_STATUS_BYTE_22  DS X    status byte
C2_STATUS_BYTE_23  DS X    status byte
                   DS X    cobol signature level
C2_DATA_STATEMENTS DS XL4  number of data items
C2_PROC_LINES      DS XL4  number of proc statements
C2_STATUS_BYTE_24  DS X    status byte
C2_STATUS_BYTE_25  DS X    status byte
                   DS XL2  status byte
                   DS CL4  status byte
C2_PRI_EP_ADDRESS  DS A    primary entry-point address
*
*============================================================*
* OS/VS COBOL
*============================================================*
COBOL_1_DSECT      DSECT
                   DS CL12 bypass
C1_PGM_NAME        DS CL8  name of programm
C1_EYECATCHER      DS CL2  eyecatcher
C1_REL             DS CL2  release
                   DS CL36
C1_TGT_PTR         DS F    pointer to tgt
                   DS CL8  unknown                               RS0700
C1_OEM_MOD_AREA    DS CL60 Optimizer Info orgin COBOL low-values RS0700
                   DS CL4  unknown                               RS0700
C1_COMP_HOURS      DS CL2  hours of compilation
                   DS CL1
C1_COMP_MIN        DS CL2  minutes of compilation
                   DS CL1
C1_COMP_SEC        DS CL2  seconds of compilation
C1_COMP_MONTH      DS CL3  month of compilation
                   DS CL1
C1_COMP_DAY        DS CL2  day of compilation
                   DS CL2
C1_COMP_YEAR       DS CL4  year of compilation
COBOL_1_TGT        DSECT
                   DS CL72 ?
C1_STATUS_BYTE_01  DS X    status byte
C1_STATUS_BYTE_02  DS X    status byte
C1_STATUS_BYTE_03  DS X    status byte
                   DS CL369
C1_CHECK           DS CL8  check TGT for SYSOUT
*
         DCBD    DSORG=QS
         STRING GENERATE
BIT0     EQU   B'10000000'
BIT1     EQU   B'01000000'
BIT2     EQU   B'00100000'
BIT3     EQU   B'00010000'
BIT4     EQU   B'00001000'
BIT5     EQU   B'00000100'
BIT6     EQU   B'00000010'
BIT7     EQU   B'00000001'
*------------------------------------------------------------*
* Programm equates                                           *
*------------------------------------------------------------*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
