ENQ      TITLE 'ENQ TSO COMMAND PROCESSOR'
         SPACE 2
***********************************************************************
*                                                                     *
*   ENQ   -   MVS/SP3 VERSION                                         *
*                                                                     *
*   DESCRIPTION :-  THE ENQ COMMAND PROCESSOR IS USED TO FIND OUT     *
*                   DETAILS ON EITHER SPECIFIC OR NON-SPECIFIC        *
*   QUEUE CONTROL BLOCKS (QCB'S).                                     *
*                                                                     *
*                   THE DETAILS FOUND (IF REQUESTED) ARE THE MAJOR    *
*   AND MIN QCB'S NAMES AND THE JOBS ACCESSING THEM. IT WILL ALSO     *
*   TELL YOU WHAT STATUS EACH JOB HAS ON THE MINOR QCB (I.E. STATUS   *
*   OF SHR OR EXCLUSIVE), AND THE ADDRESS SPACE EACH JOB OCCUPIES.    *
*   A SELECTION OF ENQS FOR A SPECIFIC JOB CAN ALSO BE REQUESTED.     *
*                                                                     *
*   MODIFIED BY KEITH WILKINSON 7 DECEMBER 83 TO GIVE TRUE LENGTH OF  *
*   THE RNAME AND TO SHOW SCOPE IF NOT 'SYSTEM' 'LOCAL'               *
*      RNAME LENGTH APPEARS AFTER RNAME (IN PARENS)                   *
*      SCOPE APPEARS AFTER QNAME (IN PARENS)                          *
*                                                                     *
*                   THIS MODULE READS AND VALIDATES THE PARAMETERS    *
*   PASSED TO IT BY THE TSO USER, AND FINDS THE RELEVENT INFORMATION  *
*   FROM THE RIBS AND RIBES PASSED TO IT BY THE GQSCAN MACRO (SP3).   *
*                                                                     *
*   REGISTER USAGE                                                    *
*   ==============                                                    *
*                                                                     *
*      R0   -  WORK                                                   *
*      R1   -  WORK                                                   *
*      R2   -  WORK                                                   *
*      R3   -  POINTER TO PARAMETER DESCRIPTOR LIST (PDL)             *
*      R4   -  POINTER TO THE I/O PARAMETER LIST (IOPL)               *
*      R5   -  POINTER TO PARSE PARAMETER LIST (PPL)                  *
*      R6   -  NUMBER OF RIBS OBTAINED BY GQSCAN                      *
*      R7   -  NUMBER PF RIBES ASSOCIATED WITH A RIB                  *
*      R8   -  BASE REGISTER WHILST PROCESSING ATTN INTERRUPTS        *
*      R9   -  POINTER TO USER AREA FOR GQSCAN                        *
*      R10  -  RETURN ADDRESS USED BY BAL                             *
*      R11  -  SECOND BASE REGISTER IF NECESSARY                      *
*      R12  -  BASE REGISTER                                          *
*      R13  -  POINTER TO SAVE AREA                                   *
*      R14  -  WORK                                                   *
*      R15  -  WORK                                                   *
*                                                                     *
*   PARAMETERS                                                        *
*   ==========                                                        *
*                                                                     *
*      ADDRESS OF THE CPPL HELD IN REGISTER 1.                        *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        REGISTER SAVE AND EQUATES ETC.....
*                                                                     *
***********************************************************************
         SPACE 2
ENQ      CSECT
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*
         SAVE  (14,12),,ENQ.CTD.&SYSTIME..&SYSDATE
         BALR  R12,0                   * ESTABLISH BASE
         USING *,R12,R11               * TELL ASSEMBLER
         LA    R11,*+4095              * ESTABLISH SECOND BASE
         LA    R11,1(R11)              * ONE MORE COS INST RESTRICTION
         LR    R2,R1                   * SAVE POINTER TO CPPL
         L     R0,=A(WORKLEN)          * SAY HOW MUCH STORAGE WE WANT
         GETMAIN R,LV=(0)              * GET THE STORAGE
         ST    R1,8(R13)               * CHAIN BACK
         ST    R13,4(R1)               * CHAIN FORWARD
         LR    R13,R1                  * ESTABLISH SAVE AREA
         ST    R13,SAVER13             * SAVE REG 13 FOR ATTN EXIT
         USING WORKAREA,R13            * TELL ASSEMBLER
         EJECT
***********************************************************************
*                                                                     *
*        MAKE SURE THAT WE HAVE GOT ALL OF THE PARAMETERS CORRECTLY   *
*        AND SET UP AN IOPL FOR USE BY PUTLINE                        *
*                                                                     *
***********************************************************************
         SPACE 2
         USING CPPL,R2                 * MAKE FIELDS IN CPPL ADDR'ABLE
         LA    R4,ZIOPL                * )SET UP AN I/O
         USING IOPL,R4                 * ) PARAMETER LIST (IOPL)
         MVC   IOPLUPT,CPPLUPT         * MOVE IN PTR TO UPT
         MVC   IOPLECT,CPPLECT         * MOVE IN PTR TO ECT
         LA    R1,ZECB                 * )SET UP A PTR TO
         ST    R1,IOPLECB              * ) THE USER'S ECB
         LA    R5,ZPPL                 * )SET UP A PARSE
         USING PPL,R5                  * ) PARAMETER LIST (PPL)
         MVC   PPLUPT,CPPLUPT          * MOVE IN PTR TO UPT
         MVC   PPLECT,CPPLECT          * MOVE IN PTR TO ECT
         ST    R1,PPLECB               * PTR TO USER'S ECB
         L     R1,=A(ZPCL)             * )SET UP A PTR TO THE
         ST    R1,PPLPCL               * ) PARAMETER CONTROL LIST (PCL)
         LA    R3,ANS                  * )PTR TO THE PARM DESCRIPTOR
         ST    R3,PPLANS               * ) LIST (PDL) VIA THE PPL
         MVC   PPLCBUF,CPPLCBUF        * MOVE IN PTR OF COMMAND BUFFER
         XC    PPLUWA,PPLUWA           * ZEROEYES USER'S WORK AREA
         XC    ZECB,ZECB               * )ZEROEYES ZECB FIELD AND SET
         LR    R1,R5                   * ADDRESS OF PPL IN REG 1
         CALLTSSR EP=IKJPARS,MF=(E,(1)) * CALL IKJPARS
         LTR   R15,R15                 * DID IT WORK ???????
         DROP  R2                      * NO LONGER NEED
         BNZ   PERR                    * NO - ERROR; OTHERWISE CONT..
         L     R3,0(R3)                * )MAKE FIELDS IN THE PCL
         USING IKJPARMD,R3             * ) AND THE PDL ADDR'ABLE
         EJECT
***********************************************************************
*                                                                     *
*        ENSURE WE HAVE A MAJOR NAME AND A MINOR, IF NECESSARY        *
*                                                                     *
***********************************************************************
         SPACE
         LA    R1,JOBNAMES             * R1-> IKJIDENT PDE FOR JOBS
         LH    R2,4(R1)                * R2=LENGTH OF POSITIONAL PARM
         LTR   R2,R2                   * HAS A JOB PARM BEEN ENTERED?
         BZ    CHKMAJP                 * NO - NO NECESSARY, ELSE GET IT
         BCTR  R2,0                    * SUBTRACT 1 FOR EXECUTE INST
         L     R1,0(R1)                * R1-> POSITIONAL PARAMETER
         MVC   JOB,=CL8' '             * CLEAR JOB LINE TO SPACES
         EX    R2,MOVEA                * JOB NAME IN PARM TO 'JOB'
         B     WHERETO                 * BRANCH ROUND EXECUTE INST
MOVEA    MVC   JOB(0),0(R1)            * JOB NAME IN PARM TO 'JOB'
CHKMAJP  EQU   *
         LA    R1,MAJORS               * R1-> IKJIDENT PDE FOR MAJORS
         LH    R2,4(R1)                * R2=LENGTH OF POSITIONAL PARM
         LTR   R2,R2                   * HAS A MAJ PARM BEEN ENTERED?
         BNZ   GETMAJP                 * YES - GET IT !!;OTHERWISE -
         MVC   MAJOR,=CL8'SYSDSN'      * MAJ PARM DEFAULT TO 'SYSDSN'
         B     GETMINP                 * GO GET MINOR PARM
GETMAJP  EQU   *
         BCTR  R2,0                    * SUBTRACT 1 FOR EXECUTE INST
         L     R1,0(R1)                * R1-> POSITIONAL PARAMETER
         MVC   MAJOR,=CL8' '           * CLEAR MAJOR LINE TO SPACES
         EX    R2,MOVEB                * MAJOR NAME IN PARM TO 'MAJOR'
         B     GETMINP                 * BRANCH ROUND EXECUTE INST
MOVEB    MVC   MAJOR(0),0(R1)          * MAJOR NAME IN PARM TO 'MAJOR'
GETMINP  EQU   *
         MVC   MINOR,=CL54' '          * CLEAR MINOR NAME LINE
         LA    R1,MINORS               * R1-> IKJIDENT PDE FOR MINORS
         LH    R2,4(R1)                * R2=LENGTH OF POSITIONAL PARM
         LTR   R2,R2                   * HAS A MIN PARM BEEN ENTERED?
         BZ    WHERETO                 * YES - NO PARMS ARE REQUIRED.
         ST    R2,MINORLEN             * SAVE THE MINOR LENGTH
         BCTR  R2,0                    * SUBTRACT 1 FOR EXECUTE INST
         L     R1,0(R1)                * R1-> POSITIONAL PARAMETER
         EX    R2,MOVEC                * MINOR NAME IN PARM TO 'MINOR'
         B     WHERETO                 * BRANCH ROUND EXECUTE INST
MOVEC    MVC   MINOR(0),0(R1)          * MINOR NAME IN PARM TO 'MINOR'
         EJECT
***********************************************************************
*                                                                     *
*           DECIDE WHAT THE REQUEST WAS ACTUALLY FOR !!               *
*           ===========================================               *
*                                                                     *
*                           MAJOR NAME    MINOR NAME    JOB NAME      *
*                           ----------    ----------    --------      *
*           REQUEST :-  1)     ALL           ALL          N/A         *
*                       2)     ALL         SPECIFIC       N/A         *
*                       3)     ALL           NONE         N/A         *
*                       4)   SPECIFIC        ALL          N/A         *
*                       5)   SPECIFIC      SPECIFIC       N/A         *
*                       6)   SPECIFIC        NONE         N/A         *
*                       7)     N/A           N/A        SPECIFIC      *
*                                                                     *
*           NOTE: IF JOBNAME IS SPECIFIED THEN MAJOR AND MINOR NAMES  *
*                 ARE IGNORED AS IT DOES NOT SEEM NECESSARY.          *
*                                                                     *
***********************************************************************
         SPACE
WHERETO  EQU   *
         SR    R0,R0
         LA    R0,2048                 * GETMAIN 1K BYTES
         GETMAIN R,LV=(R0)             * GET 1K OF STORAGE FOR RIBS
         LR    R9,R1                   * REG 9 POINTS TO AREA FOR RIBS
         ST    R9,SAVEREG9             * SAVE REGISTER 8
         LA    R8,CONTSCAN             * SET UP TOKEN TO ZEROS
         NI    SRIBFLAG,X'FF'          * CLEAR END OF RIBS INDICATOR
         STAX  ATTNEXIT,OBUF=(ATTNMSG,80) * SET UP A SPECIAL ATTN ENV
         LTR   R15,R15                 * STAX SUCESSFUL?
         BZ    STAXOK                  * YES - THEN CONTINUE
         ABEND 999,DUMP                * ELSE ABEND
STAXOK   EQU   *
         CLC   MAJOR(3),=C'ALL'        * DO WE WANT ALL MAJORS?
         BNE   SPECMAJ                 * NO - THEN BRANCH
         CLC   MINOR(3),=C'ALL'        * DO WE WANT ALL MINORS?
         BE    REQUEST1                * YES - THEN BRANCH
         CLI   MINOR,C' '              * DO WE WANT MINORS?
         BNE   REQUEST2                * YES - THEN BRANCH
         B     REQUEST3                * ELSE BRANCH ELSEWHERE
SPECMAJ  EQU   *
         CLC   MINOR(3),=C'ALL'        * DO WE WANT ALL MINORS?
         BE    REQUEST4                * YES - THEN BRANCH
         CLI   MINOR,C' '              * DO WE WANT MINORS?
         BNE   REQUEST5                * YES  - THEN BRANCH
         CLI   JOB,C' '                * DO WE WANT JOB INFO?
         BE    REQUEST6                * NO - THEN MAJ AND NO MINS
         L     R1,16                   * GET ADDRESS OF CVT
         USING CVT,R1                  * TELL ASSEMBLER ABOUT CVT
         L     R1,CVTASVT              * GET ADDRESS OF ASVT
         DROP  R1                      * FINISHED WITH CVT DSECT
         USING ASVT,R1                 * TELL ASSEMBLER ABOUT ASVT
         LA    R1,ASVTENTY             * START OF ADDRESSES OF ASCBS
         DROP  R1                      * FINISHED WITH ASVT DSECT
GETASID  EQU   *
         CLC   0(4,R1),=X'80000000'    * IS THIS THE LAST ENTRY?
         BE    NOASID                  * YES - THEN BRANCH AND FINISH
         TM    0(R1),X'80'             * IS THIS ADDR SPACE ALLOCATED?
         BO    NOTALLOC                * NO - THEN BRANCH
         L     R2,0(R1)                * ELSE GET ASCB ADDRESS
         USING ASCB,R2                 * TELL ASSEMBLER ABOUT ASCB
         MVC   ASIDVAL+2(2),ASCBASID   * SAVE THIS ASID
         L     R3,ASCBJBNI             * POINT TO ASCB INIT JOBNAME
         CLC   JOB,0(R3)               * IS THIS THE REQUESTED JOB?
         BE    REQUEST7                * YES - THEN GO DO THE BUSINESS
         L     R3,ASCBJBNS             * POINT TO ASCB STARTED JOBNAME
         CLC   JOB,0(R3)               * IS THIS THE REQUESTED JOB?
         BE    REQUEST7                * YES - THEN GO DO THE BUSINESS
         DROP  R2                      * FINISHED WITH ASCB DSECT
NOTALLOC EQU   *
         LA    R1,4(R1)                * POINT TO NEXT ASCB
         B     GETASID                 * GO AND TRY THE NEXT ONE
         EJECT
***********************************************************************
*                                                                     *
*        THIS CODE IS FOR REQUEST #1 ONLY                             *
*                                                                     *
***********************************************************************
         SPACE 2
REQUEST1 EQU   *
         USING RIB,R9                  * MUST BE A NEW RIB
         GQSCAN AREA=(RIB,2048),MF=(E,GQSCAN), * EXECUTE FORM GQSCAN   C
               SCOPE=ALL,              * WE WANT ALL ENQS AND RESERVES C
               TOKEN=CONTSCAN          * TELL IT WHERE TO RESTART SCAN
         STH   R0,SRIBELEN             * SAVE LENGTH OF RIBES RETURNED
         SRL   R0,16                   * KEEP LENGTH OF RIB
         STH   R0,SRIBLEN              * SAVE LENGTH OF RIB RETURNED
         LR    R6,R1                   * NUMBER OF RIBS RETURNED, REG 6
         B     TESTGQS1(R15)           * DECIDE WHAT TO DO
TESTGQS1 EQU   *
         B     LASTRIB1                * GQSCAN HAS COMPLETED
         B     NORIB                   * NO RESOURCE MATCHED REQUEST
         B     GOTRIBS1                * GOT SOME OF THE RIBS
         B     RIBERR                  * ABNORMAL SITUATION, CRAP RIBS
         B     RIBERR                  * BAR-B-QUE SPARE RIBS!
LASTRIB1 EQU   *
         OI    SRIBFLAG,X'FF'          * SET END OF RIBS INDICATOR
GOTRIBS1 EQU   *
         CLC   RIBNRIBE,RIBTRIBE       * DID WE GET ALL THE RIBES?
         BNE   RIBEERR                 * NO - THEN BRANCH
         L     R7,RIBNRIBE             * SAVE NO OF RIBES ASSOCIATED
*        CLC   QNAME,RIBQNAME          * HAVE WE HAD THIS QNAME BEFORE
         MVC   RSQNAME(8),RIBQNAME     * QNAME FROM RIB
         MVC   RSQNAME+8(1),RIBSCOPE   * SCOPE FROM RIB
         CLC   SQNAME,RSQNAME          * QNAME/SCOPE  BEFORE ?
         BE    SKIPQ1                  * YES - THEN BRANCH
         BAL   R10,PUTQNAME            * PUT OUT THE QNAME TITLE
SKIPQ1   EQU   *
         SR    R1,R1                   * CLEAR REG 1
         IC    R1,RIBRNMLN             * INSERT RNAME LENGTH
         CVD   R1,PRNAMLN              * DECIMAL
         MVC   RNAMLN,=X'40202021'     * EDIT MASK
         ED    RNAMLN,PRNAMLN+6        * PRINTABLE LENGTH
         MVC   RNAMLN(1),=CL1'('       * OPENING PARENS OVER FILLER
         BCTR  R1,0                    * SUBRACT 1 FOR EXECUTE INST
         MVC   SRIBVLEN(2),RIBVLEN     * SAVE THE RIB VARIABLE LENGTH
         AH    R9,SRIBLEN              * POINT TO VARIABLE PART OF RIB
         BAL   R10,PUTRNAME            * PUT OUT RNAME TITLE
         BAL   R10,WHOSGOT             * GO FIND OUT WHOS GOT RESOURCE
         BCT   R6,GOTRIBS1             * END OF RIBS?
         CLI   SRIBFLAG,X'FF'          * GQSCAN COMPLETED?
         BE    FINISH                  * YES - THEN RETURN
         L     R9,SAVEREG9             * POSITION TO START OF RIB AREA
         B     REQUEST1                * ELSE CONTINUE WITH SCAN
         SPACE 2
***********************************************************************
*                                                                     *
*        END OF REQUEST #1 ONLY CODE                                  *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        THIS CODE IS FOR REQUEST #2 ONLY                             *
*                                                                     *
***********************************************************************
         SPACE 2
REQUEST2 EQU   *
         USING RIB,R9                  * MUST BE A NEW RIB
         GQSCAN AREA=(RIB,2048),MF=(E,GQSCAN), * EXECUTE FORM GQSCAN   C
               SCOPE=ALL,              * WE WANT ALL ENQS AND RESERVES C
               TOKEN=CONTSCAN          * TELL IT WHERE TO RESTART SCAN
         STH   R0,SRIBELEN             * SAVE LENGTH OF RIBES RETURNED
         SRL   R0,16                   * KEEP LENGTH OF RIB
         STH   R0,SRIBLEN              * SAVE LENGTH OF RIB RETURNED
         LR    R6,R1                   * NUMBER OF RIBS RETURNED, REG 6
         B     TESTGQS2(R15)           * DECIDE WHAT TO DO
TESTGQS2 EQU   *
         B     LASTRIB2                * GQSCAN HAS COMPLETED
         B     NORIB                   * NO RESOURCE MATCHED REQUEST
         B     GOTRIBS2                * GOT SOME OF THE RIBS
         B     RIBERR                  * ABNORMAL SITUATION, CRAP RIBS
         B     RIBERR                  * BAR-B-QUE SPARE RIBS!
LASTRIB2 EQU   *
         OI    SRIBFLAG,X'FF'          * SET END OF RIBS INDICATOR
GOTRIBS2 EQU   *
         CLC   RIBNRIBE,RIBTRIBE       * DID WE GET ALL THE RIBES?
         BNE   RIBEERR                 * NO - THEN BRANCH
         L     R7,RIBNRIBE             * SAVE NO OF RIBES ASSOCIATED
         SR    R1,R1                   * CLEAR REG 1
         IC    R1,RIBRNMLN             * INSERT RNAME LENGTH
         MVC   SRIBVLEN(2),RIBVLEN     * SAVE THE RIB VARIABLE LENGTH
         AH    R9,SRIBLEN              * POINT TO VARIABLE PART OF RIB
         DROP  R9                      * DROP REG 9
         USING RIBVAR,R9               * USE THE DSECT
         BCTR  R1,0                    * SUBRACT 1 FOR EXECUTE INST
         EX    R1,COMPARE2             * RNAME TO OUTPUT LINE
         B     *+10                    * BRANCH ROUND EXECUTE INST
COMPARE2 CLC   RIBRNAME(0),MINOR       * IS IT THE REQUIRED RNAME
         BE    DORIBES2                * YES - THEN BRANCH
         AH    R9,SRIBVLEN             * POINT TO FIRST RIBE
         MH    R7,SRIBELEN             * GET TOTAL LENGTH OF RIBES
         AR    R9,R7                   * POINT TO NEXT RIB
         BCT   R6,GOTRIBS2             * ANY MORE RIBS IN AREA?
         CLI   SRIBFLAG,X'FF'          * GQSCAN COMPLETED?
         BE    FINISH                  * YES - THEN RETURN
         L     R9,SAVEREG9             * POSITION TO START OF RIB AREA
         B     REQUEST2                * CONTINUE WITH SCAN
DORIBES2 EQU   *
         SH    R9,SRIBLEN              * GO BACK TO START OF RIB
         DROP  R9                      * DROP R9
         USING RIB,R9                  * USE DSECT
*        CLC   QNAME,RIBQNAME          * HAVE WE HAD THIS QNAME BEFORE
         MVC   RSQNAME(8),RIBQNAME     * QNAME FROM RIB
         MVC   RSQNAME+8(1),RIBSCOPE   * SCOPE FROM RIB
         CLC   SQNAME,RSQNAME          * QNAME/SCOPE  BEFORE ?
         BE    SKIPQ2                  * YES - THEN BRANCH
         BAL   R10,PUTQNAME            * PUT OUT THE QNAME TITLE
SKIPQ2   EQU   *
         SR    R1,R1                   * CLEAR REG 1
         IC    R1,RIBRNMLN             * INSERT RNAME LENGTH
         CVD   R1,PRNAMLN              * DECIMAL
         MVC   RNAMLN,=X'40202021'     * EDIT MASK
         ED    RNAMLN,PRNAMLN+6        * PRINTABLE LENGTH
         MVC   RNAMLN(1),=CL1'('       * OPENING PARENS OVER FILLER
         MVC   SRIBVLEN(2),RIBVLEN     * SAVE THE RIB VARIABLE LENGTH
         AH    R9,SRIBLEN              * POINT TO VARIABLE PART OF RIB
         DROP  R9                      * DROP REG 9
         USING RIBVAR,R9               * USE THE DSECT
         BCTR  R1,0                    * SUBRACT 1 FOR EXECUTE INST
         BAL   R10,PUTRNAME            * PUT OUT RNAME TITLE
         BAL   R10,WHOSGOT             * GO FIND OUT WHOS GOT RESOURCE
         BCT   R6,GOTRIBS2             * ANY MORE RIBS IN AREA?
         CLI   SRIBFLAG,X'FF'          * GQSCAN COMPLETED?
         BE    FINISH                  * YES - THEN RETURN
         L     R9,SAVEREG9             * POSITION TO START OF RIB AREA
         B     REQUEST2                * CONTINUE WITH SCAN
         SPACE 2
***********************************************************************
*                                                                     *
*        END OF REQUEST #2 ONLY CODE                                  *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        THIS CODE IS FOR REQUEST #3 ONLY                             *
*                                                                     *
***********************************************************************
         SPACE 2
REQUEST3 EQU   *
         USING RIB,R9                  * MUST BE A NEW RIB
         GQSCAN AREA=(RIB,2048),MF=(E,GQSCAN), * EXECUTE FORM GQSCAN   C
               SCOPE=ALL,              * WE WANT ALL ENQS AND RESERVES C
               TOKEN=CONTSCAN          * TELL IT WHERE TO RESTART SCAN
         STH   R0,SRIBELEN             * SAVE LENGTH OF RIBES RETURNED
         SRL   R0,16                   * KEEP LENGTH OF RIB
         STH   R0,SRIBLEN              * SAVE LENGTH OF RIB RETURNED
         LR    R6,R1                   * NUMBER OF RIBS RETURNED, REG 6
         B     TESTGQS3(R15)           * DECIDE WHAT TO DO
TESTGQS3 EQU   *
         B     LASTRIB3                * GQSCAN HAS COMPLETED
         B     NORIB                   * NO RESOURCE MATCHED REQUEST
         B     GOTRIBS3                * GOT SOME OF THE RIBS
         B     RIBERR                  * ABNORMAL SITUATION, CRAP RIBS
         B     RIBERR                  * BAR-B-QUE SPARE RIBS!
LASTRIB3 EQU   *
         OI    SRIBFLAG,X'FF'          * SET END OF RIBS INDICATOR
GOTRIBS3 EQU   *
         CLC   RIBNRIBE,RIBTRIBE       * DID WE GET ALL THE RIBES?
         BNE   RIBEERR                 * NO - THEN BRANCH
         L     R7,RIBNRIBE             * SAVE NO OF RIBES ASSOCIATED
*        CLC   QNAME,RIBQNAME          * HAVE WE HAD THIS QNAME BEFORE
         MVC   RSQNAME(8),RIBQNAME     * QNAME FROM RIB
         MVC   RSQNAME+8(1),RIBSCOPE   * SCOPE FROM RIB
         CLC   SQNAME,RSQNAME          * QNAME/SCOPE  BEFORE ?
         BE    SKIPQ3                  * YES - THEN BRANCH
         BAL   R10,PUTQNAME            * PUT OUT THE QNAME TITLE
SKIPQ3   EQU   *
         MVC   SRIBVLEN(2),RIBVLEN     * SAVE THE RIB VARIABLE LENGTH
         AH    R9,SRIBLEN              * POINT TO VARIABLE PART OF RIB
         BAL   R10,WHOSGOT             * GO FIND OUT WHOS GOT RESOURCE
         BCT   R6,GOTRIBS3             * ANY MORE RIBS IN AREA?
         CLI   SRIBFLAG,X'FF'          * GQSCAN COMPLETED?
         BE    FINISH                  * YES - THEN RETURN
         L     R9,SAVEREG9             * POSITION TO START OF RIB AREA
         B     REQUEST3                * CONTINUE WITH SCAN
         SPACE 2
***********************************************************************
*                                                                     *
*        END OF REQUEST #3 ONLY CODE                                  *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        THIS CODE IS FOR REQUEST #4 ONLY                             *
*                                                                     *
***********************************************************************
         SPACE 2
REQUEST4 EQU   *
         USING RIB,R9                  * MUST BE A NEW RIB
         GQSCAN AREA=(RIB,2048),MF=(E,GQSCAN), * EXECUTE FORM GQSCAN   C
               SCOPE=ALL,              * WE WANT ALL ENQS AND RESERVES C
               TOKEN=CONTSCAN,         * TELL IT WHERE TO RESTART SCAN C
               RESNAME=(MAJOR)         * SPECIFIC QNAME
         STH   R0,SRIBELEN             * SAVE LENGTH OF RIBES RETURNED
         SRL   R0,16                   * KEEP LENGTH OF RIB
         STH   R0,SRIBLEN              * SAVE LENGTH OF RIB RETURNED
         LR    R6,R1                   * NUMBER OF RIBS RETURNED, REG 6
         B     TESTGQS4(R15)           * DECIDE WHAT TO DO
TESTGQS4 EQU   *
         B     LASTRIB4                * GQSCAN HAS COMPLETED
         B     NORIB                   * NO RESOURCE MATCHED REQUEST
         B     GOTRIBS4                * GOT SOME OF THE RIBS
         B     RIBERR                  * ABNORMAL SITUATION, CRAP RIBS
         B     RIBERR                  * BAR-B-QUE SPARE RIBS!
LASTRIB4 EQU   *
         OI    SRIBFLAG,X'FF'          * SET END OF RIBS INDICATOR
GOTRIBS4 EQU   *
         CLC   RIBNRIBE,RIBTRIBE       * DID WE GET ALL THE RIBES?
         BNE   RIBEERR                 * NO - THEN BRANCH
         L     R7,RIBNRIBE             * SAVE NO OF RIBES ASSOCIATED
*        CLC   QNAME,RIBQNAME          * HAVE WE HAD THIS QNAME BEFORE
         MVC   RSQNAME(8),RIBQNAME     * QNAME FROM RIB
         MVC   RSQNAME+8(1),RIBSCOPE   * SCOPE FROM RIB
         CLC   SQNAME,RSQNAME          * QNAME/SCOPE  BEFORE ?
         BE    SKIPQ4                  * YES - THEN BRANCH
         BAL   R10,PUTQNAME            * PUT OUT THE QNAME TITLE
SKIPQ4   EQU   *
         SR    R1,R1                   * CLEAR REG 1
         IC    R1,RIBRNMLN             * INSERT RNAME LENGTH
         CVD   R1,PRNAMLN              * DECIMAL
         MVC   RNAMLN,=X'40202021'     * EDIT MASK
         ED    RNAMLN,PRNAMLN+6        * PRINTABLE LENGTH
         MVC   RNAMLN(1),=CL1'('       * OPENING PARENS OVER FILLER
         BCTR  R1,0                    * SUBRACT 1 FOR EXECUTE INST
         MVC   SRIBVLEN(2),RIBVLEN     * SAVE THE RIB VARIABLE LENGTH
         AH    R9,SRIBLEN              * POINT TO VARIABLE PART OF RIB
         BAL   R10,PUTRNAME            * PUT OUT RNAME TITLE
         BAL   R10,WHOSGOT             * GO FIND OUT WHOS GOT RESOURCE
         BCT   R6,GOTRIBS4             * END OF RIBS?
         CLI   SRIBFLAG,X'FF'          * GQSCAN COMPLETED?
         BE    FINISH                  * YES - THEN RETURN
         L     R9,SAVEREG9             * POSITION TO START OF RIB AREA
         B     REQUEST4                * ELSE CONTINUE WITH SCAN
         SPACE 2
***********************************************************************
*                                                                     *
*        END OF REQUEST #4 ONLY CODE                                  *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        THIS CODE IS FOR REQUEST #5 ONLY                             *
*                                                                     *
***********************************************************************
         SPACE 2
REQUEST5 EQU   *
         USING RIB,R9                  * MUST BE A NEW RIB
         L     R2,MINORLEN             * LOAD UP MINOR LENGTH
         GQSCAN AREA=(RIB,2048),MF=(E,GQSCAN), * EXECUTE FORM GQSCAN   C
               SCOPE=ALL,              * WE WANT ALL ENQS AND RESERVES C
               TOKEN=CONTSCAN,         * TELL IT WHERE TO RESTART SCAN C
               RESNAME=(MAJOR,MINOR,(R2)) * SPECIFIC RESOURCE
         STH   R0,SRIBELEN             * SAVE LENGTH OF RIBES RETURNED
         SRL   R0,16                   * KEEP LENGTH OF RIB
         STH   R0,SRIBLEN              * SAVE LENGTH OF RIB RETURNED
         LR    R6,R1                   * NUMBER OF RIBS RETURNED, REG 6
         B     TESTGQS5(R15)           * DECIDE WHAT TO DO
TESTGQS5 EQU   *
         B     LASTRIB5                * GQSCAN HAS COMPLETED
         B     NORIB                   * NO RESOURCE MATCHED REQUEST
         B     GOTRIBS5                * GOT THE RIBS
         B     RIBERR                  * ABNORMAL SITUATION, CRAP RIBS
         B     RIBERR                  * BAR-B-QUE SPARE RIBS!
LASTRIB5 EQU   *
         OI    SRIBFLAG,X'FF'          * SET END OF RIBS INDICATOR
GOTRIBS5 EQU   *
         CLC   RIBNRIBE,RIBTRIBE       * DID WE GET ALL THE RIBES?
         BNE   RIBEERR                 * NO - THEN BRANCH
         L     R7,RIBNRIBE             * SAVE NO OF RIBES ASSOCIATED
*        CLC   QNAME,RIBQNAME          * HAVE WE HAD THIS QNAME BEFORE
         MVC   RSQNAME(8),RIBQNAME     * QNAME FROM RIB
         MVC   RSQNAME+8(1),RIBSCOPE   * SCOPE FROM RIB
         CLC   SQNAME,RSQNAME          * QNAME/SCOPE  BEFORE ?
         BE    SKIPQ5                  * YES - THEN BRANCH
         BAL   R10,PUTQNAME            * PUT OUT THE QNAME TITLE
SKIPQ5   EQU   *
         SR    R1,R1                   * CLEAR REG 1
         IC    R1,RIBRNMLN             * INSERT RNAME LENGTH
         CVD   R1,PRNAMLN              * DECIMAL
         MVC   RNAMLN,=X'40202021'     * EDIT MASK
         ED    RNAMLN,PRNAMLN+6        * PRINTABLE LENGTH
         MVC   RNAMLN(1),=CL1'('       * OPENING PARENS OVER FILLER
         BCTR  R1,0                    * SUBRACT 1 FOR EXECUTE INST
         MVC   SRIBVLEN(2),RIBVLEN     * SAVE THE RIB VARIABLE LENGTH
         AH    R9,SRIBLEN              * POINT TO VARIABLE PART OF RIB
         BAL   R10,PUTRNAME            * PUT OUT RNAME TITLE
         BAL   R10,WHOSGOT             * GO FIND OUT WHOS GOT RESOURCE
         BCT   R6,GOTRIBS5             * END OF RIBS?
         CLI   SRIBFLAG,X'FF'          * GQSCAN COMPLETED?
         BE    FINISH                  * YES - THEN RETURN
         L     R9,SAVEREG9             * POSITION TO START OF RIB AREA
         B     REQUEST5                * ELSE CONTINUE WITH SCAN
         SPACE 2
***********************************************************************
*                                                                     *
*        END OF REQUEST #5 ONLY CODE                                  *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        THIS CODE IS FOR REQUEST #6 ONLY                             *
*                                                                     *
***********************************************************************
         SPACE 2
REQUEST6 EQU   *
         USING RIB,R9                  * MUST BE A NEW RIB
         GQSCAN AREA=(RIB,2048),MF=(E,GQSCAN), * EXECUTE FORM GQSCAN   C
               SCOPE=ALL,              * WE WANT ALL ENQS AND RESERVES C
               TOKEN=CONTSCAN,         * TELL IT WHERE TO RESTART SCAN C
               RESNAME=(MAJOR)         * SPECIFIC QNAME
         STH   R0,SRIBELEN             * SAVE LENGTH OF RIBES RETURNED
         SRL   R0,16                   * KEEP LENGTH OF RIB
         STH   R0,SRIBLEN              * SAVE LENGTH OF RIB RETURNED
         LR    R6,R1                   * NUMBER OF RIBS RETURNED, REG 6
         B     TESTGQS6(R15)           * DECIDE WHAT TO DO
TESTGQS6 EQU   *
         B     LASTRIB6                * GQSCAN HAS COMPLETED
         B     NORIB                   * NO RESOURCE MATCHED REQUEST
         B     GOTRIBS6                * GOT SOME OF THE RIBS
         B     RIBERR                  * ABNORMAL SITUATION, CRAP RIBS
         B     RIBERR                  * BAR-B-QUE SPARE RIBS!
LASTRIB6 EQU   *
         OI    SRIBFLAG,X'FF'          * SET END OF RIBS INDICATOR
GOTRIBS6 EQU   *
         CLC   RIBNRIBE,RIBTRIBE       * DID WE GET ALL THE RIBES?
         BNE   RIBEERR                 * NO - THEN BRANCH
         L     R7,RIBNRIBE             * SAVE NO OF RIBES ASSOCIATED
*        CLC   QNAME,RIBQNAME          * HAVE WE HAD THIS QNAME BEFORE
         MVC   RSQNAME(8),RIBQNAME     * QNAME FROM RIB
         MVC   RSQNAME+8(1),RIBSCOPE   * SCOPE FROM RIB
         CLC   SQNAME,RSQNAME          * QNAME/SCOPE  BEFORE ?
         BE    SKIPQ6                  * YES - THEN BRANCH
         BAL   R10,PUTQNAME            * PUT OUT THE QNAME TITLE
SKIPQ6   EQU   *
         MVC   SRIBVLEN(2),RIBVLEN     * SAVE THE RIB VARIABLE LENGTH
         AH    R9,SRIBLEN              * POINT TO VARIABLE PART OF RIB
         BAL   R10,WHOSGOT             * GO FIND OUT WHOS GOT RESOURCE
         BCT   R6,GOTRIBS6             * ANY MORE RIBS IN AREA?
         CLI   SRIBFLAG,X'FF'          * GQSCAN COMPLETED?
         BE    FINISH                  * YES - THEN RETURN
         L     R9,SAVEREG9             * POSITION TO START OF RIB AREA
         B     REQUEST6                * CONTINUE WITH SCAN
         SPACE 2
***********************************************************************
*                                                                     *
*        END OF REQUEST #6 ONLY CODE                                  *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        THIS CODE IS FOR REQUEST #7 ONLY                             *
*                                                                     *
***********************************************************************
         SPACE 2
REQUEST7 EQU   *
         L     R2,ASIDVAL              * THIS IS THE ASID WE WANT
         USING RIB,R9                  * MUST BE A NEW RIB
         GQSCAN AREA=(RIB,2048),MF=(E,GQSCAN), * EXECUTE FORM GQSCAN   C
               SCOPE=ALL,              * WE WANT ALL ENQS AND RESERVES C
               TOKEN=CONTSCAN,         * TELL IT WHERE TO RESTART SCAN C
               SYSNAME=(0,(R2))        * SPECIFIC ADDRESS SPACE
         STH   R0,SRIBELEN             * SAVE LENGTH OF RIBES RETURNED
         SRL   R0,16                   * KEEP LENGTH OF RIB
         STH   R0,SRIBLEN              * SAVE LENGTH OF RIB RETURNED
         LR    R6,R1                   * NUMBER OF RIBS RETURNED, REG 6
         B     TESTGQS7(R15)           * DECIDE WHAT TO DO
TESTGQS7 EQU   *
         B     LASTRIB7                * GQSCAN HAS COMPLETED
         B     NORIB                   * NO RESOURCE MATCHED REQUEST
         B     GOTRIBS7                * GOT SOME OF THE RIBS
         B     RIBERR                  * ABNORMAL SITUATION, CRAP RIBS
         B     RIBERR                  * BAR-B-QUE SPARE RIBS!
LASTRIB7 EQU   *
         OI    SRIBFLAG,X'FF'          * SET END OF RIBS INDICATOR
GOTRIBS7 EQU   *
         CLC   RIBNRIBE,RIBTRIBE       * DID WE GET ALL THE RIBES?
         BNE   RIBEERR                 * NO - THEN BRANCH
         L     R7,RIBNRIBE             * SAVE NO OF RIBES ASSOCIATED
*        CLC   QNAME,RIBQNAME          * HAVE WE HAD THIS QNAME BEFORE
         MVC   RSQNAME(8),RIBQNAME     * QNAME FROM RIB
         MVC   RSQNAME+8(1),RIBSCOPE   * SCOPE FROM RIB
         CLC   SQNAME,RSQNAME          * QNAME/SCOPE  BEFORE ?
         BE    SKIPQ7                  * YES - THEN BRANCH
         BAL   R10,PUTQNAME            * PUT OUT THE QNAME TITLE
SKIPQ7   EQU   *
         SR    R1,R1                   * CLEAR REG 1
         IC    R1,RIBRNMLN             * INSERT RNAME LENGTH
         CVD   R1,PRNAMLN              * DECIMAL
         MVC   RNAMLN,=X'40202021'     * EDIT MASK
         ED    RNAMLN,PRNAMLN+6        * PRINTABLE LENGTH
         MVC   RNAMLN(1),=CL1'('       * OPENING PARENS OVER FILLER
         BCTR  R1,0                    * SUBRACT 1 FOR EXECUTE INST
         MVC   SRIBVLEN(2),RIBVLEN     * SAVE THE RIB VARIABLE LENGTH
         AH    R9,SRIBLEN              * POINT TO VARIABLE PART OF RIB
         BAL   R10,PUTRNAME            * PUT OUT RNAME TITLE
         BAL   R10,WHOSGOT             * GO FIND OUT WHOS GOT RESOURCE
         BCT   R6,GOTRIBS7             * ANY MORE RIBS IN AREA?
         CLI   SRIBFLAG,X'FF'          * GQSCAN COMPLETED?
         BE    FINISH                  * YES - THEN RETURN
         L     R9,SAVEREG9             * POSITION TO START OF RIB AREA
         B     REQUEST7                * CONTINUE WITH SCAN
         SPACE 2
***********************************************************************
*                                                                     *
*        END OF REQUEST #7 ONLY CODE                                  *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        PUT OUT AN ERROR MESSAGE IF THE PARAMETER CONTROL            *
*        LIST (PCL) IS IN ERROR                                       *
*                                                                     *
***********************************************************************
         SPACE 2
PERR     EQU   *
         PUTLINE PARM=PUTBLOK,                                         C
               OUTPUT=(ENQERR1,SINGLE,DATA),                           C
               MF=(E,ZIOPL)
         B     FINISH                  * RETURN
         EJECT
***********************************************************************
*                                                                     *
*        PUT OUT AN ERROR MESSAGE IF REQUEST CANNOT BE SATISFIED      *
*                                                                     *
***********************************************************************
         SPACE 2
NORIB    EQU   *
         PUTLINE PARM=PUTBLOK,                                         C
               OUTPUT=(ENQERR2,SINGLE,DATA),                           C
               MF=(E,ZIOPL)
         B     FINISH                  * RETURN
         EJECT
***********************************************************************
*                                                                     *
*        PUT OUT AN ERROR MESSAGE IF GQSCAN HAS AN ERROR              *
*                                                                     *
***********************************************************************
         SPACE 2
RIBERR   EQU   *
         PUTLINE PARM=PUTBLOK,                                         C
               OUTPUT=(ENQERR3,SINGLE,DATA),                           C
               MF=(E,ZIOPL)
         B     FINISH                  * RETURN
         EJECT
***********************************************************************
*                                                                     *
*        PUT OUT AN ERROR IF ALL RIBES WONT FIT IN THE AREA           *
*                                                                     *
***********************************************************************
         SPACE 2
RIBEERR  EQU   *
         PUTLINE PARM=PUTBLOK,                                         C
               OUTPUT=(ENQERR4,SINGLE,DATA),                           C
               MF=(E,ZIOPL)
         B     FINISH                  * RETURN
         EJECT
***********************************************************************
*                                                                     *
*        PUT OUT AN ERROR IF A JOB REQUESTED COULD NOT BE FOUND       *
*                                                                     *
***********************************************************************
         SPACE 2
NOASID   EQU   *
         PUTLINE PARM=PUTBLOK,                                         C
               OUTPUT=(ENQERR5,SINGLE,DATA),                           C
               MF=(E,ZIOPL)
         B     FINISH                  * RETURN
         EJECT
***********************************************************************
*                                                                     *
*        ROUTINE TO PUT OUT THE QNAME TITLE LINES                     *
*                                                                     *
***********************************************************************
         SPACE 2
PUTQNAME EQU   *
         DROP  R9                      * DROP REG 9 IN CASE
         USING RIB,R9                  * ADDRESSABILITY FOR THE RIB
         MVC   SQNAME(8),RIBQNAME      * SAVE RIBQNAME FOR CLC
         MVC   SQNAME+8(1),RIBSCOPE    * SAVE SCOPE FOR CLC
         MVC   QNAME,RIBQNAME          * QNAME TO OUTPUT LINE
         MVC   SCOPE1,=CL8' '          * BLANK OUT SCOPE - SYSTEM
         MVC   SCOPE2,=CL8' '          * BLANK OUT SCOPE - LOCAL
         TM    RIBSCOPE,RIBSYSS        * SYSTEMS ENQ ?
         BNO   NOSYSS                  * NO
         MVC   SCOPE1(9),=CL9'(SYSTEMS)'  * MOVE IN SCOPE
NOSYSS   TM    RIBSCOPE,RIBSTEP        * STEP ENQ ?
         BNO   NOSTEP                  * NO
         MVC   SCOPE1(9),=CL9'(STEP   )'  * MOVE IN SCOPE
NOSTEP   TM    RIBSCOPE,RIBGLBL        * GLOBAL ENQ ?
         BNO   NOGLOB                  * NO
         MVC   SCOPE2,=CL8',GLOBAL)'   * MOVE IN SCOPE
NOGLOB   EQU   *
         PUTLINE PARM=PUTBLOK,         * PUT OUT A LINE                C
               OUTPUT=(MAJTITLE,MULTLIN,DATA),                         C
               MF=(E,ZIOPL)
         BR    R10                     * RETURN TO MAIN LINE CODE
         EJECT
***********************************************************************
*                                                                     *
*        ROUTINE TO PUT OUT THE RNAME TITLE LINES                     *
*                                                                     *
***********************************************************************
         SPACE 2
PUTRNAME EQU   *
         DROP  R9                      * DROP REG 9
         USING RIBVAR,R9               * ADDRESSABILITY FOR THE RIBVAR
         MVC   RNAME,=CL62' '          * CLEAR RNAME TO SPACES
         EX    R1,MOVED                * RNAME TO OUTPUT LINE
         B     *+10                    * BRANCH ROUND EXECUTE INST
MOVED    MVC   RNAME+10(0),RIBRNAME    * EXECUTED INSTRUCTION
         TRT   RNAME,TRLIST            * HAVE WE GOT ANY NAUGHTY BITS
         BZ    PUTR                    * NO - THEN BRANCH
         MVC   TRNAME(2),=C'X'''       * WE WILL DISPLAY THIS AS HEX
         UNPK  TRNAME+2(15),RNAME+10(8) * DO FIRST 7 CHARS
         UNPK  TRNAME+16(15),RNAME+17(8) * DO NEXT 7 CHARS
         UNPK  TRNAME+30(15),RNAME+24(8) * DO NEXT 7 CHARS
         UNPK  TRNAME+44(7),RNAME+31(4) * DO NEXT 3 CHARS, TOTAL= 24
         MVC   TRNAME+50(2),=C''' '    * FINISH OFF THE LINE
         MVC   RNAME+10(52),TRNAME     * MOVE IT BACK TO PRINT LINE
         TR    RNAME+12(48),TRANSTAB   * TRANSLATE TO GET THE ALPHAS
PUTR     EQU   *
         PUTLINE PARM=PUTBLOK,         * PUT OUT A LINE                C
               OUTPUT=(MINTITLE,SINGLE,DATA),                          C
               MF=(E,ZIOPL)
         BR    R10                     * RETURN TO MAIN LINE CODE
         EJECT
***********************************************************************
*                                                                     *
*        ROUTINE TO EXTRACT INFORMATION FROM THE RIBES AND PRINT IT   *
*                                                                     *
***********************************************************************
         SPACE 2
WHOSGOT  EQU   *
         AH    R9,SRIBVLEN             * POINT TO FIRST RIBE
         DROP  R9                      * DROP REG 9
         USING RIBE,R9                 * USE THE DSECT
NEXTRIBE EQU   *
         MVC   WORK(3),RIBEASID        * MOVE ASID INTO WORK AREA
         NI    WORK,X'80'              * TURN OFF THE SIGN BIT
         UNPK  ASIDWORK(5),WORK(3)     * UNPACK TO GET SEMI-PRINTABLE
         MVC   ASID(4),ASIDWORK        * DROP OFF THE SIGN BYTE
         TR    ASID(4),TRANSTAB        * MAKE COMPLETELY PRINTABLE
         MVC   JOBNAME,RIBEJBNM        * MOVE JOBNAME INTO PUT LINE
         TM    RIBERFLG,X'80'          * EXCLUSIVE OR SHARED?
         BZ    EXCL                    * EXCLUSIVE - THEN BRANCH
         MVC   REQTYPE,=CL9'SHARED'    * ELSE SHARED, INTO PUT LINE
         B     CHKRSTAT                * GO CHECK REQUEST STATUS
EXCL     EQU   *
         MVC   REQTYPE,=CL9'EXCLUSIVE' * MOVE EXCLUSIVE INTO PUT LINE
CHKRSTAT EQU   *
         TM    RIBESFLG,X'80'          * WAITING OR OWNER?
         BZ    WAIT                    * WAITING - THEN BRANCH
         MVC   REQSTAT,=CL7'OWNER'     * ELSE OWNER, INTO PUT LINE
         B     PUTINFO                 * GO PUT OUT INFO LINE
WAIT     EQU   *
         MVC   REQSTAT,=CL7'WAITING'   * MOVE WAITING INTO PUT LINE
PUTINFO  EQU   *
         PUTLINE PARM=PUTBLOK,         * PUT OUT A LINE                C
               OUTPUT=(INFOLINE,SINGLE,DATA),                          C
               MF=(E,ZIOPL)
         AH    R9,SRIBELEN             * POINT TO NEXT RIBE
         BCT   R7,NEXTRIBE             * END OF RIBES?
         BR    R10                     * RETURN TO MAIN LINE CODE
         EJECT
***********************************************************************
*                                                                     *
*        ROUTINE TO TIDY UP IF THE ATTENTION KEY IS STRUCK            *
*                                                                     *
***********************************************************************
         SPACE 2
ATTNEXIT EQU   *
         BALR  R8,0                    * SET UP A GOOD BASE REG
         USING *,R8                    * TELL ASSEMBLER
         L     R13,SAVER13             * PICK UP MY SAVE AREA ADDR
         GQSCAN QUIT=YES,TOKEN=CONTSCAN * TELL THE SCAN TO STOP
         LTR   R15,R15                 * WAS IT OK?
         BZ    FINISH                  * YES - THEN BRANCH
         ABEND 99,DUMP                 * ELSE ABEND
         DROP  R8                      * DROP REG 8
         EJECT
***********************************************************************
*                                                                     *
*        TIDY UP AND RETURN                                           *
*                                                                     *
***********************************************************************
         SPACE 2
FINISH   EQU   *
         BALR  R8,0                    * SET UP A GOOD BASE REG
         USING *,R8                    * TELL ASSEMBLER
         L     R1,SAVEREG9             * AREA USED FOR RIBS
         LA    R0,2048                 * LENGTH OF RIB AREA
         FREEMAIN R,LV=(0),A=(1)       * FREE UP OUR SAVE AREA
         L     R2,4(R13)               * CHAIN BACK TO FIND SAVE AREA
         LR    R1,R13                  * OUR SAVE AREA ADDR IN REG 1
         L     R0,=A(WORKLEN)          * LENGTH OF OUR SAVE AREA, REG 0
         FREEMAIN R,LV=(0),A=(1)       * FREE UP OUR SAVE AREA
         LR    R13,R2                  * REG 13-> TO PREVIOUS SAVE AREA
         RETURN (14,12),RC=0           * RESTORE REGISTERS AND RETURN
         DROP  R8                      * DONT NEED EXTRA BASE NOW
         EJECT
***********************************************************************
*                                                                     *
*        LIST FORM OF GQSCAN MACRO                                    *
*                                                                     *
***********************************************************************
         SPACE 2
GQSCAN   GQSCAN MF=L                   * PARM LIST FOR EXECUTE FORM
         EJECT
***********************************************************************
*                                                                     *
*        LIST FORM OF PUTLINE MACRO                                   *
*                                                                     *
***********************************************************************
         SPACE 2
PUTBLOK  PUTLINE MF=L                  * EXPANDS INTO PUTLINE PARM BLOK
         EJECT
***********************************************************************
*                                                                     *
*        OUTPUT LINES PUT TO THE SCREEN                               *
*                                                                     *
***********************************************************************
         SPACE 2
*
MAJTITLE DC    A(UNDERLN)              * FORWARD POINTER TO NEXT LINE
         DC    H'30'                   * LENGTH OF FIRST LINE
         DC    H'0'                    * RESERVED
QNAME    DC    CL8' '                  * MAJOR NAME FIELD IN PRINT LINE
         DC    CL2' '                  *
SCOPE1   DC    CL8' '                  * SYSTEMS/STEP - BLANK IF SYSTEM
SCOPE2   DC    CL8' '                  * GLOBAL - BLANK IF LOCAL
*
UNDERLN  DC    A(0)                    * END OF CHAIN INDICATOR
         DC    H'12'                   * LENGTH OF SECOND LINE
         DC    H'0'                    * RESERVED
         DC    CL8'********'           * UNDERLINE HEADING
*
MINTITLE DC    H'78'                   * LENGTH OF THE OUTPUT LINE
         DC    H'0'                    * RESERVED
RNAME    DC    CL62' '                 * MINOR NAME FIELD IN PRINT LINE
         DC    CL7' LENGTH'            *
RNAMLN   DS    CL4                     * LENGTH OF RNAME
         DC    CL1')'                  *
*
INFOLINE DC    H'66'                   * LENGTH OF MESSAGE+4
         DC    H'0'                    * RESERVED
         DC    CL14' '                 * BLANKS
         DC    CL5'ASID='              * ASID LABEL
ASID     DC    CL4' '                  * ASID
         DC    CL9',JOBNAME='          * JOBNAME LABEL
JOBNAME  DC    CL8' '                  * JOBNAME
         DC    CL1','                  * COMMA
REQTYPE  DC    CL9' '                  * EXCLUSIVE OR SHARED
         DC    CL1','                  * COMMA
REQSTAT  DC    CL7' '                  * WAITING OR OWNER
*
         EJECT
***********************************************************************
*                                                                     *
*        ERROR MESSAGES PUT TO THE SCREEN                             *
*                                                                     *
***********************************************************************
         SPACE 2
*
ENQERR1  DC    H'49'                   * LENGTH OF MESSAGE+4
         DC    H'0'                    * RESERVED
         DC    CL45'ERROR IN PARAMETER CONTROL LIST IN ENQ MODULE'
*
ENQERR2  DC    H'34'                   * LENGTH OF MESSAGE+4
         DC    H'0'                    * RESERVED
         DC    CL30'REQUEST COULD NOT BE SATISFIED'
*
ENQERR3  DC    H'49'                   * LENGTH OF MESSAGE+4
         DC    H'0'                    * RESERVED
         DC    CL45'GQSCAN ENCOUNTERED AN ERROR - THIS IS SERIOUS'
*
ENQERR4  DC    H'49'                   * LENGTH OF MESSAGE+4
         DC    H'0'                    * RESERVED
         DC    CL45'NOT ALL RIBES COULD FIT INTO AREA - DATA LOST'
*
ENQERR5  DC    H'54'                   * LENGTH OF MESSAGE+4
         DC    H'0'                    * RESERVED
         DC    CL50'THE JOBNAME SPECIFIED DOES NOT EXIST IN THE SYSTEM'
*
ATTNMSG  DC    CL80'ENQ COMMAND TERMINATED DUE TO ATTENTION'
*
         EJECT
***********************************************************************
*                                                                     *
*        DATA AREAS (DO NOT LET SAVER13 GO BEYOND +FFF IN THIS PROG   *
*        OTHERWISE THE ASSEMBLER WILL USE THE WRONG BASE REGISTER     *
*        FOR PROCESSING ATTENTION INTERRUPTS - IT SHOULD USE REG8).   *
*                                                                     *
***********************************************************************
         SPACE 2
JOB      DC    CL8' '                  * JOB NAME
ASIDVAL  DC    F'0'                    * ASID     (MUTUALLY EXCLUSIVE
MAJOR    DC    CL8' '                  * MAJOR NAME     WITH THIS
MINOR    DC    CL52' '                 * MINOR NAME     AND THIS).
MINORLEN DC    F'0'                    * MINOR NAME LENGTH (NO SIGN)
SAVEREG9 DC    F'0'                    * SAVE REG FOR USER AREA START
SAVER13  DC    F'0'                    * SAVE REG FOR USE ATTN EXIT
CONTSCAN DC    F'0'                    * TOKEN FOR GQSCAN
SRIBFLAG DC    X'00'                   * FLAG INDICATING GQSCAN END
SRIBLEN  DC    H'0'                    * SAVED RIB LENGTH
SRIBVLEN DC    H'0'                    * SAVED VARIABLE RIB LENGTH
SRIBELEN DC    H'0'                    * SAVED RIBE LENGTH
WORK     DC    XL3'00'                 * WORK AREA FOR ASID
ASIDWORK DC    XL5'00'                 * UNPACK WORK INTO THIS AREA
TRNAME   DC    CL52' '                 * USED TO TRANSLATE RNAME IF HEX
PRNAMLN  DS    D                       * DECIMAL RNAME LENGTH HERE
SQNAME   DC    CL9' '                  * LAST QNAME/SCOPE FOR CLC
RSQNAME  DC    CL9' '                  * QNAME/SCOPE FOR CLC
         LTORG
         EJECT
***********************************************************************
*                                                                     *
*        TRANSLATE TABLES                                             *
*                                                                     *
***********************************************************************
         SPACE 2
*
TRLIST   DS    0CL256                  * TEST FOR UNPRINTABLES
         DC    XL16'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
         DC    XL16'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
         DC    XL16'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
         DC    XL16'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
         DC    XL16'00FFFFFFFFFFFFFFFFFFFF0000000000'
         DC    XL16'00FFFFFFFFFFFFFFFFFF000000000000'
         DC    XL16'0000FFFFFFFFFFFFFFFF000000000000'
         DC    XL16'FFFFFFFFFFFFFFFFFFFF000000000000'
         DC    XL16'FF000000000000000000FFFFFFFFFFFF'
         DC    XL16'FF000000000000000000FFFFFFFFFFFF'
         DC    XL16'FFFF0000000000000000FFFFFFFFFFFF'
         DC    XL16'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
         DC    XL16'00000000000000000000FFFFFFFFFFFF'
         DC    XL16'00000000000000000000FFFFFFFFFFFF'
         DC    XL16'00FF0000000000000000FFFFFFFFFFFF'
         DC    XL16'00000000000000000000FFFFFFFFFFFF'
*
TRANSTAB DC    CL256' '                * MAKE CHARS PRINTABLE
         ORG   TRANSTAB+X'F0'
         DC    C'0123456789'
         ORG   TRANSTAB+X'FA'
         DC    C'ABCDEF'
         ORG   ,
*
         EJECT
***********************************************************************
*                                                                     *
*        PARAMETER CONTROL LIST                                       *
*                                                                     *
***********************************************************************
         SPACE 2
*
ZPCL     IKJPARM
*
JOBORK   IKJKEYWD
*
         IKJNAME 'JOB',SUBFLD=JOBORKS
*
         IKJNAME 'JOBNAME',SUBFLD=JOBORKS
*
MAJORK   IKJKEYWD
*
         IKJNAME 'MAJ',SUBFLD=MAJORKS
*
         IKJNAME 'MAJOR',SUBFLD=MAJORKS
*
MINORK   IKJKEYWD
*
         IKJNAME 'MIN',SUBFLD=MINORKS
         SPACE 2
         IKJNAME 'MINOR',SUBFLD=MINORKS
*
JOBORKS  IKJSUBF
*
JOBNAMES IKJIDENT 'JOB NAME PARAMETER',LIST,PROMPT='JOB NAME REQUIRED',-
               HELP=('JOB NAME REQUIRED FOR A LIST OF IT''S ENQS'),    -
               MAXLNTH=8,FIRST=ALPHA,OTHER=ANY
*
MAJORKS  IKJSUBF
*
MAJORS IKJIDENT 'MAJOR QCB PARAMETER',LIST,PROMPT='MAJOR QCB REQUIRED',-
               HELP=('MAJOR NAME OF QCB REQUIRED','ALL, FOR ALL THE MAJ-
               OR QCB''S - DEFAULT IS SYSDSN'),                        -
               MAXLNTH=8,FIRST=ALPHA,OTHER=ANY
*
MINORKS  IKJSUBF
*
MINORS IKJIDENT 'MINOR QCB PARAMETER',LIST,PROMPT='MINOR QCB REQUIRED',-
               HELP=('MINOR NAME OF QCB REQUIRED','ALL, FOR ALL THE MIN-
               OR QCB''S'),                                            -
               MAXLNTH=52,FIRST=ALPHA,OTHER=ANY
*
         IKJENDP
         EJECT
***********************************************************************
*                                                                     *
*        DSECTS                                                       *
*                                                                     *
***********************************************************************
         SPACE 2
*
         IKJCPPL                       * DSECT USED TO MAP CPPL
*
         IKJIOPL                       * DSECT USED TO MAP IOPL
*
         IKJPPL                        * DSECT USED TO MAP PPL
*
         CVT   DSECT=YES               * DSECT USED TO MAP CVT
*
         IHAASVT                       * DSECT USED TO MAP ASVT
*
         IHAASCB                       * DSECT USED TO MAP ASCB
*
         ISGRIB                        * 3 DSECTS USED TO MAP RIB
*
WORKAREA DSECT                         * DSECT USED TO MAP WORK AREA
         DS    18F                     * SAVE AREA OF CALLED MODULE
ZIOPL    DS    4F                      * I/O PARAMETER LIST (IOPL)
ZPPL     DS    7F                      * PARSE PARAMETER LIST (PPL)
ZECB     DS    F                       * USER'S ECB ADDRESS
ANS      DS    F                       * ANSWER FIELD ADDR IN PPL
WORKLEN  EQU   *-WORKAREA              * CALCULATE WORK-AREA LENGTH
*
         END
