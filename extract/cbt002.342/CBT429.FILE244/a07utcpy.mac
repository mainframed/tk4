         TITLE 'UTCOPY - IEBCOPY PRE-PROCESSOR'
UTCOPY   BEGIN R12
         REGEQS
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
**                          U T C O P Y                              **
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
**  THIS PROGRAM 'FRONT ENDS' IEBCOPY SO THAT IT IS POSSIBLE TO DO   **
**  A GENERIC COPY I.E. ALL MEMBERS STARTING ABC*****.               **
**                                                                   **
**   THE FORMAT OF THE PASSED PARAMETER IS :-                        **
**                                                                   **
**                    PARM='ACTION,REPLACE,GENERIC'                  **
**                                                                   **
**   WHERE 'ACTION' CAN BE EITHER 'SELECT' OR 'EXCLUDE' AND MUST BE  **
**   CODED. 'REPLACE' CODED AS 'R' SPECIFIES WHETHER EXISTING MEMBERS**
**   ARE TO BE REPLACED OR NOT. 'R' CAN BE OMITTED BUT THE COMMA MUST**
**   CODED. 'GENERIC' IS THE GENERIC TO BE COPIED.                   **
**                                                                   **
**   EXAMPLES OF PARAMETERS :-                                       **
**                                                                   **
**    PARM='SELECT,,IEB'      <=== THIS WILL COPY (WITHOUT REPLACING)**
**                                 ALL MEMBERS WHOSE NAMES START IEB **
**                                                                   **
**    PARM='SELECT,R,IEB'     <=== THIS WILL COPY (WITH REPLACE) ALL **
**                                 MEMBERS WHOSE NAMES START IEB     **
**                                                                   **
**    PARM='EXCLUDE,,IEB'     <=== THIS WILL COPY (WITHOUT REPLACING)**
**                                 ALL MEMBERS WHOSE NAMES DO NOT    **
**                                 WITH IEB                          **
**   SAMPLE JCL :-                                                   **
**   //STEP1    EXEC PGM=UTCOPY,PARM='SELECT,,FRED'                  **
**   //STEPLIB  DD   DSN=CZT001.LOADLIB,DISP=SHR                     **
**   //SYSPRINT DD   SYSOUT=*                                        **
**   //INPDS    DD   DSN=INPUT.PDS,DISP=SHR                          **
**   //STEPCRD  DD   DSN=&&TEMP,DISP=(,PASS),SPACE=(TRK,5),          **
**   //  DCB=(LRECL=80,BLKSIZE=6160,RECFM=FB),UNIT=SYSDA             **
**   //STEP2    EXEC PGM=IEBCOPY                                     **
**   //SYSPRINT DD   SYSOUT=*                                        **
**   //INPUT    DD   DSN=INPUT.PDS,DISP=SHR                          **
**   //OUTPUT   DD   DSN=OUTPUT.PDS,DISP=SHR                         **
**   //SYSIN    DD   DSN=*.STEP2.STEPCRD,DISP=SHR                    **
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*********************************************************************
*                                                                   *
*                      D I S C L A I M E R                          *
*                                                                   *
*   This computer programming material has been developed by        *
*   Kevin E. Ferguson, Technical Support Manager, at Cleveland      *
*   County Council. Please address any inquiries to:-               *
*                                                                   *
*         Cleveland County Council,                                 *
*         P.O. Box 17,                                              *
*         Melrose House,                                            *
*         1 Melrose Street,                                         *
*         Middlesbrough,                                            *
*         Cleveland. UK                                             *
*         TS1 1LY                                                   *
*         (0642) 248155                                             *
*                                                                   *
*         ATTN:  K.E.Ferguson (Ext. 2290)                           *
*         (or:   Technical Support (Ext. 2363))                     *
*                                                                   *
*   This material has been used successfully by Cleveland County    *
*   Council, and to the best of our knowledge this material and any *
*   system(s) of which it is a part are operational as of the       *
*   service level or date stated in the body of this material (if   *
*   so stated). However, NO warranty is given or implied as to the  *
*   accuracy of this material or any related material or systems,   *
*   and no responsibility is assumed for any effect or modification *
*   directly or indirectly caused by the use of this material.      *
*   It is the responsibility of any user of this material to        *
*   evaluate its usefulness to the user's environment.              *
*                                                                   *
*   Cleveland County Council does not guarantee to keep this or any *
*   related material current, nor does it guarantee to provide      *
*   any corrections or extensions described by any users of this    *
*   material, or any corrections or extensions made in the future   *
*   by Cleveland County Council itself.                             *
*                                                                   *
*                       C O P Y R I G H T                           *
*                                                                   *
*     This computer programming material remains the exclusive      *
*     property of Cleveland County Council. Permission for its use  *
*     may be obtained by contacting the address above               *
*                                                                   *
*   Cleveland County Council hereby grants permission for this      *
*   programming material to be :-                                   *
*                                                                   *
*   a). Stored on your system and displayed on your terminals.      *
*                                                                   *
*   b). Modified to meet your sites specific needs.                 *
*                                                                   *
*   c). Printed (or Photocopied), but only the specific number of   *
*       copies as are necessary for your sites needs.               *
*                                                                   *
*   d). Circulated amongst bona fida members of the following IBM   *
*       user groups or their sub-groups :-                          *
*                                                                   *
*            i) G.U.I.D.E. (UK and US)                              *
*           ii) SHARE                                               *
*                                                                   *
*       with the provisor that the copyright is not infringed by    *
*       those members.                                              *
*                                                                   *
***********************************************************************
GETPARM  EQU  *
         L     R2,0(R1)             R2 = PARM
         CLC   0(2,R2),=H'00'       IF NO PARM PRESENT
         BNE   TESTSEL              THEN
         MVC   MESS(L'MESS01),MESS01     WRITE ERROR MESS - STOP
         B     WRITE
TESTSEL  LA    R2,2(R2)             R2 = FIRST BYTE PARM DATA
         LR    R3,R2                R3 = PARMS
         CLC   0(6,R2),=C'SELECT'   IF PARM(1-6) = SELECT
         BNE   TESTEXC              THEN
         LA    R2,7(R2)                  SET R2 AT NEXT BYTE OF PARM
         B     REPCARD              ELSE
TESTEXC  CLC   0(7,R2),=C'EXCLUDE'       IF PARM(1-7) = EXCLUDE
         BNE   MESS2                     THEN
         LA    R2,8(R2)                       SET R2 NEXT BYTE OF PARM
         B     REPCARD
MESS2    MVC   MESS(L'MESS02),MESS02     ELSE
         B     WRITE                          WRITE ERROR MESSAGE - END
REPCARD  CLI   0(R2),X'6B'          IF NEXT BYTE ^= COMMA
         BE    PROCMEM              THEN
         CLC   0(2,R2),=C'R,'            IF NEXT BYTES = 'R,'
         BNE   MESS3                     THEN
         MVI   REPFLAG,C'Y'                   SET REPFLAG = 'Y'
         LA    R2,1(R2)                       SET R2 POINT AT COMMA
         B     PROCMEM                   ELSE
MESS3    MVC   MESS(L'MESS03),MESS03          WRITE ERROR MESSAGE - END
         B     WRITE
PROCMEM  BAL   R11,BUILDCOP         BUILD SYSIN COPY CARD
         LA    R2,1(R2)             R2 = START ADDR OF FIRST MEMBER
         LR    R4,R2                R4 = R2 - START ADDR OF NEXT MEMBER
         XR    R5,R5                R5 = 0 - COUNTER FOR LGTH OF MEMBER
         LA    R9,PARMLIST          R9 - POINTS TO START OF PARM TABLE
         XR    R10,R10              R10 = 0 - NUMBER OF MEMBERS ENTERED
LOOPD    EQU  *                     DO WHILE
         CLI   0(R2),X'00'              (NOT END  OF PARM)
         BE    ENDPARM
         CLI   0(R2),X'6B'              IF THIS BYTE IS A COMMA
         BNE   NEXBYTE                  THEN DO
         STH   R5,0(R9)                      SAVE LENGTH OF MEMBER
         BCTR  R5,0                          SUBTRACT 1 FOR EXECUTE
         LA    R9,2(R9)                      SET POINTER FOR MEMBER
         EX    R5,TABLOAD                    LOAD TABLE WITH MEMBER
         LA    R9,8(R9)                      POINT R9 FOR NEXT ENTRY
         LA    R10,1(R10)                    ENTRIES = ENTRIES + 1
         XR    R5,R5                         ZERO LENGTH COUNTER
         LA    R2,1(R2)                      POINT TO NEXT BYTE
         LR    R4,R2                         R4 POINTS TO NEW MEMBER
         B     LOOPD                         END
NEXBYTE  EQU   *                        ELSE DO
         LA    R5,1(R5)                      INCREMENT LENGTH COUNTER
         LA    R2,1(R2)                      POINT TO NEXT BYTE
         B     LOOPD                         END
*                                       END
ENDPARM  STH   R5,0(R9)
         BCTR  R5,0                          SUBTRACT 1 FOR EXECUTE
         LA    R9,2(R9)
         EX    R5,TABLOAD          LOAD LAST MEMBER IN TABLE
         LA    R10,1(R10)          ENTRIES = ENTRIES + 1
         B     OPENFIL
TABLOAD  MVC   0(0,R9),0(R4)       STATEMENT THAT LOADS NAME IN TABLE
*
OPENFIL  OPEN  (INPDS)              OPEN INPUT PDS FILE
         CLI   OPENFLG,C'Y'         IF OPEN ERROR
         BE    ERRDSN               THEN DATA SET NOT FOUND
LOOP     GET   INPDS,INSTRUC        READ BLOCK
         LA    R6,INSTRUC           ADDRESSABILITY IN R6
         LH    R7,0(R6)             LENGTH OF BLOCK IN R7
         LA    R7,0(R7,R6)          END ADDRESS IN R7
         LA    R6,2(R6)             SKIP PASSED LENGTH
DIRLOOP  CR    R6,R7                DO WHILE STILL MORE BLOCK ENTRIES
         BNL   LOOP                      READ NEXT BLOCK
         CLC   0(4,R6),=X'FFFFFFFF'      IF LAST ENTRY
         BE    ENDDIR                    THEN DROP OUT OF THIS LOOP
         MVC   NUM(1),11(R6)             NUMBER OF USER BLOCKS
         NI    NUM,X'1F'                 CLEAR ALL FLAGS BUT LENGTH
         L     R8,NUMB                   PUT IN R8
         MVC   MEMBER(8),0(R6)           SAVE MEMBER NAME
         LA    R9,PARMLIST               R9 - START OF TABLE AGAIN
         LR    R4,R10                    R4 - NUMBER OF ELEMENTS IN TAB
TABLOOP  EQU   *                         DO WHILE NOT END OF TABLE
         LH    R5,0(R9)                       R5 - LNGTH OF MEMBER
         BCTR  R5,0                           MINUS 1 FOR EXECUTE
         LA    R9,2(R9)                       POINT TO MEMBER
         CLI   0(R9),C'*'                     POSITIONAL ?
         BNE   COMPIT                         NO - GO AND COMPARE IT
         BCTR  R5,0                        YES - DOWN R5
         ST    R10,SAVER10
         ST    R8,SAVER8
         LA    R11,8                     MAX LOOP COUNT SET
         LR    R10,R9
         LA    R9,MEMBER
         LA    R8,1(R10)
COMPLOOP EX    R5,COMPARE2
         BE    OKNOW
         LA    R9,1(R9)
         BCT   R11,COMPLOOP
         LR    R9,R10
         L     R10,SAVER10
         L     R8,SAVER8
         B     NEXTTAB
SAVER10  DS    F
SAVER8   DS    F
COMPARE2 CLC   0(0,R8),0(R9)             THIS IS THE COMPARE STATEMENT
OKNOW    LR    R9,R10
         L     R10,SAVER10
         L     R8,SAVER8
         B     GOBUILD
COMPIT   EX    R5,COMPARE                     IF MEMBER = PARM MEMBER
         BNE   NEXTTAB                        THEN
GOBUILD  BAL   R11,BUILDCRD                        CALL BUILDCRD
NEXTTAB  LA    R9,8(R9)                       POINT TO NEXT ENTRY
         BCT   R4,TABLOOP                     END
         B     GETNEXT
COMPARE  CLC   0(0,R9),MEMBER            THIS IS THE COMPARE STATEMENT
*
GETNEXT  MH    R8,=H'2'                  MULTIPLY BY 2 TO GET BYTES
         LA    R8,12(R8)                 ADD 12 FIXED DIRECTORY INFO
         LA    R6,0(R8,R6)               SET ADDRESS OF NEXT ENTRY
         B     DIRLOOP                   END
ENDDIR   EQU   *
         CLOSE (INPDS,,STEPCRD)
         XR    R15,R15
ENDRET   L     R13,PRGMSAVE+4       RETURN SAVE AREA
         RETURN (14,12),RC=(15)     LINK TO CALLER
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* THIS ROUTINE WRITES AN ERROR MESSAGE SETS A RETURN
* CODE OF 12 AND THEN TERMINATES PROGRAM
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
WRITE    OPEN  (ERRPRNT,OUTPUT)     OPEN ERROR REPORT FILE
         PUT   ERRPRNT,MESSDTA      WRITE MESSAGE
         CLOSE (ERRPRNT)            CLOSE FILE
         LA    R15,12               RETURN CODE 12 - BAD PARM DATA
         B     ENDRET
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* EXIT LIST - IF OPEN FAILS CONTROL IS PASSED TO THIS ROUTINE
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
OPENX    DS    0F
         DC    XL1'91'
         DC    AL3(ERRONOP)
*
ERRONOP  CLC   0(2,R1),=X'0130'     IF ERROR = 0130
         BNE   JUSTRET              THEN RETURN
         MVI   3(R1),X'04'          ELSE FLAG OK TO IGNORE
         MVI   OPENFLG,C'Y'              FLAG OPEN ERROR
JUSTRET  RETURN
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* THIS ROUTINE WRITES AN ERROR MESSAGE SETS A RETURN
* CODE OF 12 AND THEN TERMINATES PROGRAM
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
ERRDSN   EQU   *
         WTO   'DATASET NOT FOUND'
         LA    R15,12               RETURN CODE 12 - DATASET NOT FOUND
         B     ENDRET
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* THIS ROUTINE BUILDS THE COPY SYSIN CARD
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
BUILDCOP EQU   *
         OPEN  (STEPCRD,OUTPUT)     OPEN OUTPUT FILE FOR SYSIN CARDS
         MVI   OUTSTRUC,C' '
         MVC   OUTSTRUC+1(79),OUTSTRUC
         MVC   OUTSTRUC(34),=C'COPYOPER   COPY OUTDD=OUTPUT,INDD='
         CLI   REPFLAG,C'Y'
         BNE   NORM
         CLC   0(7,R3),=C'EXCLUDE'
         BNE   NORM
         MVC   OUTSTRUC+34(11),=C'((INPUT,R))'
         B     WRITECOP
NORM     MVC   OUTSTRUC+34(5),=C'INPUT'
WRITECOP PUT   STEPCRD,OUTSTRUC
         BR    R11
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* THIS ROUTINE BUILDS A SELECT/EXCLUDE (DEPENDING ON PARM)
* FOR THE GIVEN MEMBER
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
BUILDCRD EQU   *
         LA    R2,OUTSTRUC
         MVI   OUTSTRUC,C' '
         MVC   OUTSTRUC+1(79),OUTSTRUC
         CLC   0(6,R3),=C'SELECT'
         BE    SELECT
         MVC   11(16,R2),=C'EXCLUDE  MEMBER='
         LA    R2,27(R2)
         B     NORMCRD
SELECT   MVC   11(15,R2),=C'SELECT  MEMBER='
         LA    R2,26(R2)
REPTEST  CLI   REPFLAG,C'Y'
         BNE   NORMCRD
         MVC   0(2,R2),=C'(('
         LA    R2,2(R2)
         MVC   0(8,R2),MEMBER
LOOPMEM  CLI   0(R2),C' '
         BE    ENDBIT
         LA    R2,1(R2)
         B     LOOPMEM
ENDBIT   MVC   0(5,R2),=C',,R))'
         B     WRITEIT
NORMCRD  MVC   0(8,R2),MEMBER
WRITEIT  PUT   STEPCRD,OUTSTRUC
         BR    R11
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* FILE DCB INFORMATION
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
INPDS    DCB  DSORG=PS,MACRF=(GM),DDNAME=INPDS,EXLST=OPENX,            X
               BLKSIZE=256,RECFM=F,LRECL=256
STEPCRD  DCB  DSORG=PS,MACRF=(PM),DDNAME=STEPCRD,                      X
               BLKSIZE=400,RECFM=FB,LRECL=80
ERRPRNT  DCB  DSORG=PS,MACRF=(PM),DDNAME=SYSPRINT,                     X
               BLKSIZE=133,RECFM=FBA,LRECL=133
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* WORK FIELDS FOR ERROR MESSAGES
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
MESSDTA  DS   0CL133
MESSCTL  DS   C
MESS     DS   CL132
*
MESS01   DC   C'NO GENERIC MEMBER NAME PRESENT'
MESS02   DC   C'SELECT/EXCLUDE MUST BE SPECIFIED'
MESS03   DC   C'ONLY R MAY BE SPECIFIED FOR REPLACE CARD'
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* WORK FIELDS
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
PARMLIST DS   CL300
OPENFLG  DC   CL1'N'
REPFLAG  DC   CL1'N'
         DS   0F
INSTRUC  DS   CL256
         DS   0F
OUTSTRUC DS   CL80
NUMB     DS   0F
         DC   XL3'000000'
NUM      DS   CL1
MEMBER   DC   CL8' '
         END
/*
