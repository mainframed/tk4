LVBSSCAN TITLE 'SCAN A VARIABLE (BLOCKED) SPANNED DATA SET, REPORTING  X
               ON SEGMENTATION ERRORS'
***********************************************************************
*                                                                     *
*        LVBSSCAN:  SCAN RECFM=VBS D/S FOR SEGMENT ERRORS             *
*                                                                     *
*        AUTHOR:    DAVE THORBY  APRIL 1989                           *
*                                                                     *
*        THIS PROGRAM WILL READ A VARIABLE SPANNED DATA SET, AND      *
*        REPORT ON ANY MISSING SEGMENTS IT FINDS.                     *
*        NOTE: THIS PROGRAM DOES NOT ATTEMPT ANY FORM OF CORRECTION   *
*              - USE SOMETHING LIKE MVS/DITTO.                        *
*                                                                     *
*        JCL:  //STEP01  EXEC PGM=LVBSSCAN                            *
*              //SYSPRINT DD  SYSOUT=*                                *
*              //SYSUT1   DD  DISP=SHR,DSN= ...                       *
*                                                                     *
*   RETURN CODES:-                                                    *
*                                                                     *
*      0    -  NO SEGMENT ERRORS FOUND                                *
*      4    -  DATA SET RECFM IS NOT VBS                              *
*      8    -  MISSING END OF SEGMENT AT END OF FILE                  *
*      12   -  MISSING SEGMENT OTHER THAN END OF FILE                 *
*                                                                     *
*   REGISTER USAGE :-                                                 *
*                                                                     *
*      R6   -  SEGMENT CONTROL CODE                                   *
*      R7   -  LOGICAL RECORD LENGTH                                  *
*      R8   -  LOGICAL RECORD ADDRESS                                 *
*      R9   -  PHYSICAL RECORD LENGTH                                 *
*      R10  -  GETMAINED BUFFER AREA                                  *
*      R12  -  BASE REGISTER                                          *
*      R13  -  SAVE AREA                                              *
*                                                                     *
***********************************************************************
         SPACE 3
LVBSSCAN CSECT
         SAVE  (14,12),,'LVBSSCAN &SYSDATE &SYSTIME'
         LR    R12,R15             ESTABLISH -
         USING LVBSSCAN,R12        BASE REGISTER
         LA    R10,SAVEAREA        ADDRESS REGISTER SAVE AREA
         ST    R10,8(R13)          CHAIN SAVE AREAS FORWARD
         ST    R13,4(R10)          CHAIN SAVE AREAS BACKWARD
         LR    R13,R10             ADDRESS SAVE AREA
         SPACE 3
         OPEN  (SYSUT1,INPUT,SYSPRINT,OUTPUT)
         PUT   SYSPRINT,M_HEADER   PUT OUT PAGE HEADER
         LA    R10,SYSUT1          POINT TO DCB
         USING IHADCB,R10          MAP DCB
         TM    DCBRECFM,DCBRECV+DCBRECSB VARIABLE + SPANNED ?
         BNO   NOTVBS              NO - ABORT
         LH    R0,DCBBLKSI         PICK UP BLOCKSIZE
         DROP  R10                 FINISHED WITH DCB MAP
         ST    R0,GETMAINL         STORE LENGTH OF BUFFER AREA
         GETMAIN R,LV=(0)          GET BUFFER STORAGE
         LR    R10,R1              POINT TO RETURNED AREA
         SR    R6,R6               ZEROISE SEGMENT CONTROL CODE
         EJECT
READFILE READ  DECB,SF,SYSUT1,(10) READ A RECORD
         CHECK DECB                WAIT FOR I/O TO COMPLETE
         LH    R9,0(R10)           PICK UP BLOCK LENGTH
         S     R9,=F'4'            SUBTRACT LENGTH OF RDW
         LA    R8,4(R10)           POINT TO LOGICAL RECORD
MATCH    LH    R7,0(R8)            PICK UP RECORD LENGTH
         IC    R6,2(R8)            PICK UP SEGMENT CONTROL CODE
         SLL   R6,2                MULTIPLY BY 4
         B     SEGTYPE(R6)         BRANCH ON TYPE
         SPACE 1
SEGTYPE  B     SEG00               COMPLETE LOGICAL RECORD
         B     SEG01               START OF SEGMENTED RECORD
         B     SEG10               END OF SEGMENTED RECORD
         B     SEG11               MIDDLE OF SEGMENTED RECORD
         SPACE 2
SEG00    TM    LASTSEG,X'01'       TEST FOR OUTSTANDING SEGMENT
         BZ    MATCHEND            NONE FOUND
         B     MISSEND             MISSING END OF SEGMENT
         SPACE 1
SEG01    TM    LASTSEG,X'01'       TEST FOR OUTSTANDING SEGMENT
         BZ    MATCHEND            NONE FOUND
         B     MISSEND             MISSING END OF SEGMENT
         SPACE 1
SEG10    TM    LASTSEG,X'01'       TEST FOR OUTSTANDING SEGMENT
         BO    MATCHEND            FOUND
         B     MISSTART            MISSING START OF SEGMENT
         SPACE 1
SEG11    TM    LASTSEG,X'01'       TEST FOR OUTSTANDING SEGMENT
         BO    MATCHEND            FOUND
         B     MISSTART            MISSING START OF SEGMENT
         SPACE 2
MATCHEND MVC   LASTSEG,2(R8)       SAVE SEGMENT CONTROL CODE
         SR    R9,R7               REMAINDER OF RECORD
         BZ    READFILE            END OF PHYSICAL RECORD
         AR    R8,R7               POINT TO NEXT LOGICAL RECORD
         B     MATCH               PROCESS THIS RECORD
         SPACE 3
MISSEND  NOTE  SYSUT1,TYPE=REL     GET CURRENT FILE POSITION
         ST    R1,NOTEPOS          STORE FILE POSITION
         UNPK  M_END+39(9),NOTEPOS(5) UNPACK FILE POSITION
         TR    M_END+39(8),TRANSTBL
         LR    R1,R8               POINT TO CURRENT RECORD
         SR    R1,R10              GET OFFSET WITHIN BLOCK
         ST    R1,NOTEPOS          STORE BLOCK OFFSET
         UNPK  M_END+48(5),NOTEPOS+2(3) UNPACK BLOCK OFFSET
         MVI   M_END+48,C'+'       INSERT SIGN
         PUT   SYSPRINT,M_END      WRITE MISSING END MESSAGE
         MVC   RETCODE,=F'12'      SET RETURN CODE
         B     MATCHEND            CONTINUE
         SPACE 2
MISSTART NOTE  SYSUT1,TYPE=REL     GET CURRENT FILE POSITION
         ST    R1,NOTEPOS          STORE FILE POSITION
         UNPK  M_START+39(9),NOTEPOS(5) UNPACK FILE POSITION
         TR    M_START+39(8),TRANSTBL
         LR    R1,R8               POINT TO CURRENT RECORD
         SR    R1,R10              GET OFFSET WITHIN BLOCK
         ST    R1,NOTEPOS          STORE BLOCK OFFSET
         UNPK  M_START+48(5),NOTEPOS+2(3) UNPACK BLOCK OFFSET
         MVI   M_START+48,C'+'     INSERT SIGN
         PUT   SYSPRINT,M_START    WRITE MISSING START MESSAGE
         MVC   RETCODE,=F'12'      SET RETURN CODE
         B     MATCHEND            CONTINUE
         EJECT
NOTVBS   PUT   SYSPRINT,M_NOTVBS   PUT OUT MESSAGE
         MVC   RETCODE,=F'4'       SET RETURN CODE
         B     RETURN              RETURN TO CALLER
         SPACE 3
EOF      TM    LASTSEG,X'01'       TEST FOR OUTSTANDING SEGMENT
         BZ    EOJ                 NONE FOUND
         PUT   SYSPRINT,M_EOF      WRITE MISSING END OF FILE MESSAGE
         CLC   RETCODE,=F'8'       HAVE WE ALREADY HAD AN ERROR ?
         BH    EOJ                 YES - RETAIN THAT RETURN CODE
         MVC   RETCODE,=F'8'       SET RETURN CODE
EOJ      L     R0,GETMAINL         PICK UP LENGTH OF BUFFER AREA
         LR    R1,R10              PICK UP ADDRESS OF BUFFER AREA
         FREEMAIN R,LV=(0),A=(1)   FREE BUFFER STORAGE
         PUT   SYSPRINT,M_ENDEND   PUT OUT END OF FILE MESSAGE
RETURN   CLOSE (SYSUT1,,SYSPRINT)  CLOSE FILES
         L     R15,RETCODE         PICK UP RETURN CODE
         L     R13,4(R13)          RESTORE HIGHER SAVE AREA
         RETURN (14,12),RC=(15)    RETURN TO CALLER
         EJECT
SAVEAREA DC    18F'0'              REGISTER SAVE AREA
RETCODE  DC    F'0'                PROGRAM RETURN CODE
GETMAINL DS    F                   LENGTH OF GETMAINED AREA
NOTEPOS  DS    F                   CURRENT FILE POSITION
         DC    X'04'               A REVERSED SPACE
LASTSEG  DC    X'00'               LAST SEGMENT CONTROL CODE
TRANSTBL DC    CL240' '
         DC    C'0123456789ABCDEF'
         SPACE 3
M_HEADER DC    CL81'1LVBSSCAN                    VARIABLE SPANNED RECORX
               D SCANNER                     '
M_END    DC    CL81'0MISSING  END  OF SEGMENT AT OR BEFORE XXXXXXXX +NNX
               N (HEX TTRZ OF RELATIVE TRACK)'
M_START  DC    CL81'0MISSING START OF SEGMENT AT OR BEFORE XXXXXXXX +NNX
               N (HEX TTRZ OF RELATIVE TRACK)'
M_EOF    DC    CL81'0MISSING  END  OF SEGMENT AT OR BEFORE END-OF-FILE X
                                             '
M_NOTVBS DC    CL81'-ERROR  ***** INPUT RECORD FORMAT IS NOT VARIABLE SX
               PANNED ***** RUN ABORTED *****'
M_ENDEND DC    CL81'-                              *****  END OF REPORTX
                 ******                      '
         PRINT NOGEN
SYSUT1   DCB   DSORG=PS,MACRF=RP,DDNAME=SYSUT1,EODAD=EOF
SYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,RECFM=FBA,LRECL=81,   X
               BLKSIZE=3159
         LTORG
         YREGS
         DCBD  DSORG=BS,DEVD=(TA,DA) MAP DCB FOR BSAM ON TAPE OR DISK
         END   LVBSSCAN
