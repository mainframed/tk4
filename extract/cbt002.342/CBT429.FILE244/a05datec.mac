/**REXX****************************************************************/
/*                                                                    */
/* EXEC NAME: DATECONV                                 DATE 01/11/88  */
/*    Author: William A. Mayne                                        */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  */
/*                       Functional Description                       */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/*
EXEC NAME: DATECONV                                        DATE 01/12/88
   Author: William A. Mayne

Syntax: DATECONV(datein,typein,typeout)
        - may also be executed as a command by -
        DATECONV datein typein typeout

                      FUNCTIONAL DESCRIPTION

This converts any date  Jan. 1, 0001 or later from  one form to another,
including finding the name of the month  or day of the week for any date
in that range.

TYPES SUPPORTED:

   B = "base date", or the number of days since Jan. 1, 0001.
       This is the only form which can be used to compute the
       number of days between two dates, even if they are in
       different centuries. Jan. 1, 0001 = 0.
   C = century date, i.e. days so far in the century.
       Centuries are defined to start with years divisible by 100.
       Jan. 1, xx00 = 1 (Note different origin from base date.)
       (This was intended for use in calculations before the 'B'
       type date was available. Its use is not recommended.)
   D = days since Jan. 1 of input year (including Jan. 1)
   E = "European" format, DD/MM/YY
   J = Julian date in "OS" form YYDDD.
   L = long format, e.g. DD Mnn YYYY, e.g. '1 May 1987'
       (Date() default. You never really need to give this.)
   M = month (spelled out)
   N = normal (same as L, included for consistency with Mansfield)
   O = ordered, YY/MM/DD (use letter "oh") - suitable for sorting
   S = sort format, YYYYMMDD
   U = U.S.A. format, MM/DD/YY
   W = day of week (spelled out)

L, M, N, and W may only be specified as output formats.

The default date is  the current date. The only use  for this default is
to get the current date in base date form, which is not supported by CMS
Rexx. If  either "datein" or  "typein" is  given both are  required. All
dates are assumed to  be be in the current century unless  format S or B
are used.

Default "typeout"  is 'L', which  is equivalent  to 'N' (long  or normal
format: dd  mmm yyyy).

This is based  on the DATECONV builtin function  of Mansfield Software's
Personal Rexx. The existing DATECONV EXEC  on the user exchange disk has
been  modified to  use  this one  when  called as  a  function with  the
arguments  for  this format,  so  a  DATECONV function  compatible  with
Personal Rexx is available.

There are two  false assumptions, neither of which  should normally make
any difference:

(1) The  calculation is done  as if  the present Gregorian  calendar had
been  in continuous  use from  the  starting date,  so historical  dates
before  the adoption  of  the Gregorian  calender in  1582  will not  be
correct. You  can't use this to  find the day  of the week for  Oct. 12,
1492, for example.

(2) For this function,  a century is presumed to start on  Jan. 1 of the
last year  divisible by  100, so all  dates in a  century have  the same
value in the hundreds place of the year. Purists note that centuries are
defined to begin  one year later than  that. There was no  year 0000, so
the  first  century  was  the  years  0001  through  0100.

COMPATIBILITY NOTES:

(1) Type 'L' is CMS equivalent of Mansfield's 'N'. Both are supported.
(2) Mansfield's format always requires both datein and typein.
(3) Mansfield's version does not support execution as a command.
(4) The basedate function treats Jan. 1, 0001 as day 0, to be consistent
    with IBM's date(b) and Personal  Rexx's basedate. Note that Personal
    incorrectly converts  base dates before Jan.  1, 100, so there  is a
    one day discrepancy before that.

ERROR HANDLING:

If formats  are invalid or  the input  date is not  a valid date  of the
specified format  the function returns  the null string and  the command
displays an error message. Error  checking may not be exhaustive. Report
any errors not handled correctly to the author.

IMPLEMENTATION NOTES/EXCUSES:

This code was hacked from an earlier DATECONV EXEC, which only supported
dates from Jan. 1,  1900 through Dec. 31, 1999 and  did not support base
dates. Therefore  the implementation is  a little messy, using  a global
variable "cc" for century and  making some modifications to the internal
functions.

Internally, basedate and century functions  work as if the first century
contained a  year 0. Basedates are  adjusted by 366 days  to correct for
this on  both input (adding 366)  and output (subtracting 366).  This is
done for  all basedates and  (theoretically) century dates in  the first
century.
*/
/**********************************************************************/
parse source . cmd .
if cmd = 'FUNCTION' then arg datein,typein,typeout
else arg datein typein typeout
if datein='' then do
  datein=date(s)
  typein='S'
  end
if typeout='' then typeout='L'
if typeout='N' then typeout='L'

/* convert input date to separate variables cc mm yy dd      */
/* convert century date to julian                            */
cc=left(date(s),2) /* default century is the current century */
/* Convert base date to century */
if typein='B' then do
  cc=0
  if datein>36525-366 then do
    datein=datein-36525+366   /* subtract out first century days */
    do forever
      cc=cc+1
      subdays=36524 /* days in normal century */
      if cc//4=0 then subdays=subdays+1 /* extra leap year in each 400 *
      if datein<=subdays then leave
      datein=datein-subdays
      end
    end
  else
    datein=datein+366 /* as if first century started with 0000 */
  typein='C'
  cc=right(cc+100,2)
  end
if typein='C' then do
  if datatype(datein,'W') then
    if datein<1 × datein>36524+leapyear(00) then
      signal baddate
    else
      nop
  else
    signal baddate
  typein='J'
  datein=yyddd(datein)
  end
if typein='D' then do
  datein=left(date('O'),2) ×× datein
  typein='J'
  end
if typein='E' then
  parse var datein dd '/' mm '/' yy
if typein='J' then do
  parse var datein yy 3 ddd
  /* convert ddd to mm dd */
  mm=1
  dd=ddd
  do forever
    n=daysin(yy,mm)
    if n<dd then dd=dd-n
    else leave
    mm=mm+1
    end
  end
if typein='O' then
  parse var datein yy '/' mm '/' dd
if typein='S' then
  parse var datein cc 3 yy 5 mm 7 dd
if typein='U' then
  parse var datein mm '/' dd '/' yy

/* Catch some errors in date format */
if datatype(mm,'W') & datatype(yy,'W') & datatype(dd,'W') then do
  if mm<1 × mm>12 then signal baddate
  if yy<0 then signal baddate
  if dd<1 × dd>daysin(yy,mm) then signal baddate
  end
else
 signal baddate

/* result=datein converted to typeout */
select
when typeout='B' then result=basedate(yy,mm,dd)-366
when typeout='C' then do
  result=century(julian(yy,mm,dd))
  if cc=0 then result=result-366
  end
when typeout='D' then result=right(julian(yy,mm,dd),3)
when typeout='E' then result=dd'/'mm'/'yy
when typeout='J' then result=julian(yy,mm,dd)
when typeout='L' then result=dd+0 left(monthname(mm),3) cc××yy
when typeout='M' then result=monthname(mm)
when typeout='O' then result=yy'/'mm'/'dd
when typeout='S' then result=cc××yy××mm××dd
when typeout='U' then result=mm'/'dd'/'yy
when typeout='W' then result=weekday(yy,mm,dd)
otherwise signal badtype
end

/* if function return result, else display */
if cmd='FUNCTION' then return result
else push result
exit

/* error exit for invalid input date */
baddate:
if cmd='FUNCTION' then return ''
else say 'Invalid date'
exit 1

/* error exit for invalid output type specified */
badtype:
if cmd='FUNCTION' then return ''
else say 'Invalid type'
exit 2

/* find number of days in year (if no month given) or month */
daysin: procedure expose cc
arg yy, mm
if mm='' then
  if leapyear(yy) then return 366
  else return 365
else
  select
  when mm=1 then return 31
  when mm=2 then
    do
      if leapyear(yy) then return 29
      else return 28
    end
  when mm=3 then return 31
  when mm=4 then return 30 /* april */
  when mm=5 then return 31
  when mm=6 then return 30 /* june */
  when mm=7 then return 31
  when mm=8 then return 31
  when mm=9 then return 30 /* september */
  when mm=10 then return 31
  when mm=11 then return 30 /* november */
  when mm=12 then return 31
  otherwise return 0
  end

/* determine if yy is a leap year */
leapyear: procedure expose cc; arg yy
  if yy=0 then
    if cc//4=0 then return 1
    else return 0
  else
    if yy//4<>0 then return 0
    else return 1

/* convert yy, mm, dd to yyddd (julian) */
julian: procedure expose cc; arg yy, mm, dd
ddd=dd
i=1
do while i<mm
  ddd=ddd+daysin(yy,i)
  i=i+1
end
return yy××right('00'××ddd,3)

/* convert century date (nnnnn) to julian (yyddd) */
yyddd: procedure expose cc; arg ddd
yy=0
do forever
  n=daysin(yy)
  if n<ddd then ddd=ddd-n
  else leave
  yy=yy+1
end
return right('0'yy,2)right('00'ddd,3)

/* convert julian (yyddd) to century (nnnnn) */
century: procedure expose cc; parse arg yy 3 ddd
if yy>0 then do
  ddd=ddd+365*yy             /* 365 days for each past year    */
  ddd=ddd+(yy-1)%4           /* add for leap years cc04 and after */
  end
if yy>0 & cc//4=0 then ddd=ddd+1 /* extra leap year each 4 centuries */
return ddd

/* convert days in century (nnnnn) to day of week */
weekday: procedure expose cc; arg yy,mm,dd
n=(basedate(yy,mm,dd)-366)//7+1
day.7='Sunday'
day.1='Monday'
day.2='Tuesday'
day.3='Wednesday'
day.4='Thursday'
day.5='Friday'
day.6='Saturday'
return day.n

/* Give the name of a month */
monthname: procedure; arg mm
select
when mm=1 then return 'January'
when mm=2 then return 'February'
when mm=3 then return 'March'
when mm=4 then return 'April'
when mm=5 then return 'May'
when mm=6 then return 'June'
when mm=7 then return 'July'
when mm=8 then return 'August'
when mm=9 then return 'September'
when mm=10 then return 'October'
when mm=11 then return 'November'
when mm=12 then return 'December'
otherwise return ''
end

basedate: procedure expose cc
arg yy, mm, dd
if cc=0 then return century(julian(yy,mm,dd))
bdate=cc*36524          /* days for all previous centuries           */
bdate=bdate+(cc-1)%4+1  /* extra leap year every 4 centuries         */
bdate=bdate+century(julian(yy,mm,dd))
return bdate-1
