SETVRGRP TITLE 'SET-UP A CLIST VARIABLE EQUAL TO RACF GROUP'
         SPACE 2
***********************************************************************
*                                                                     *
*   SETVRGRP - MVS/XA VERSION                                         *
*                                                                     *
*   DESCRIPTION :-  THE SETVRGRP COMMAND PROCESSOR IS USED TO SET     *
*                   UP A CLIST VARIABLE 'LEBRGRP' TO BE EQUAL TO THE  *
*                   USERS CURRENT CONNECT GROUP.                      *
*                   THIS CAN ONLY BE USED FROM WITHIN A CLIST         *
*                   ENVIRONMENT.                                      *
*                                                                     *
*   REGISTER USAGE                                                    *
*   ==============                                                    *
*                                                                     *
*      R0   -  WORK                                                   *
*      R1   -  WORK                                                   *
*      R2   -  POINTER TO CPPL                                        *
*      R3   -  POINTER TO ACEE                                        *
*      R4   -  POINTER TO UPT                                         *
*      R5   -  POINTER TO ECT                                         *
*      R6   -  NOT USED                                               *
*      R7   -  NOT USED                                               *
*      R8   -  NOT USED                                               *
*      R9   -  NOT USED                                               *
*      R10  -  NOT USED                                               *
*      R11  -  SECOND BASE REGISTER IF NECESSARY                      *
*      R12  -  BASE REGISTER                                          *
*      R13  -  POINTER TO SAVE AREA                                   *
*      R14  -  WORK                                                   *
*      R15  -  WORK                                                   *
*                                                                     *
*   PARAMETERS                                                        *
*   ==========                                                        *
*                                                                     *
*      ADDRESS OF THE CPPL HELD IN REGISTER 1.                        *
*                                                                     *
*   RETURN CODES                                                      *
*   ============                                                      *
*                                                                     *
*      REFER TO MANUAL 'TSO/E GUIDE TO WRITING A TMP OR A CP',        *
*      SC28-1136.                                                     *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        REGISTER SAVE AND EQUATES ETC.....
*                                                                     *
***********************************************************************
         SPACE 2
SETVRGRP CSECT
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*
         SAVE  (14,12),,SETVRGRP.&SYSTIME..&SYSDATE
         BALR  R12,0                   * ESTABLISH BASE
         USING *,R12,R11               * TELL ASSEMBLER
         LA    R11,*+4095              * ESTABLISH SECOND BASE
         LA    R11,1(R11)              * ONE MORE COS INST RESTRICTION
         LR    R2,R1                   * SAVE POINTER TO CPPL
         USING CPPL,R2                 * TELL ASSEMBLER ABOUT CPPL
         L     R4,CPPLUPT              * POINT TO THE UPT
         L     R5,CPPLECT              * POINT TO THE ECT
         LA    R1,SAVEAREA             * R1 -> MY SAVE AREA
         ST    R1,8(R13)               * CHAIN BACK
         ST    R13,4(R1)               * CHAIN FORWARD
         LR    R13,R1                  * ESTABLISH SAVE AREA
         EJECT
***********************************************************************
*                                                                     *
*        GET THE CURRENT RACF ACEE                                    *
*                                                                     *
***********************************************************************
         SPACE 2
         LA    R1,0                    * GET ADDRESS OF PSA
         USING PSA,R1                  * TELL ASSEMBLER ABOUT PSA
         L     R1,PSAAOLD              * GET ADDRESS OF ASCB
         DROP  R1                      * FINISHED WITH CVT DSECT
         USING ASCB,R1                 * TELL ASSEMBLER ABOUT ASCB
         L     R1,ASCBASXB             * GET ADDRESS OF ASXB
         DROP  R1                      * FINISHED WITH ASCB DSECT
         USING ASXB,R1                 * TELL ASSEMBLER ABOUT ASXB
         L     R3,ASXBSENV             * GET ADDRESS OF ACEE
         DROP  R1                      * FINISHED WITH ASXB DSECT
         USING ACEE,R3                 * TELL ASSEMBLER ABOUT ACEE
         XR    R1,R1                   * CLEAR WORK REG 1
         IC    R1,ACEEGRPL             * PICK UP GROUP LENGTH
         ST    R1,VASVVALL             * STORE IN VAS VALUE LENGTH
         MVC   VASVVALU,ACEEGRPN       * MOVE IN THE CONNECT GROUP
         MVC   PUTLGRPN,ACEEGRPN       * MOVE CONNECT GROUP TO MESSAGE
         EJECT
***********************************************************************
*                                                                     *
*        INVOKE THE TSO SERVICE ROUTINE TO SET THE PREFIX             *
*                                                                     *
***********************************************************************
         SPACE 2
         L     R1,16                   * GET THE CVT ADDRESS
         USING CVT,R1                  * TELL ASSEMBLER ABOUT CVT
         L     R1,CVTTVT               * GET THE TSVT ADDRESS
         DROP  R1                      * FINISHED WITH CVT DSECT
         USING TSVT,R1                 * TELL ASSEMBLER ABOUT TSVT
         L     R15,TSVTVACC            * ADDRESS VARIABLE ACCESS SERV.
         CALL  (15),                   * CALL THE TSO SERVICE ROUTINE  C
               (VASECODE,              * VAS ENTRY CODE                C
               VASVNAMP,               * VAS VARIABLE NAME POINTER     C
               VASVNAML,               * VAS VARIABLE NAME LENGTH      C
               VASVVALP,               * VAS VARIABLE VALUE POINTER    C
               VASVVALL,               * VAS VARIABLE VALUE LENGTH     C
               VASTOKEN),VL            * VAS TOKEN
         EJECT
***********************************************************************
*                                                                     *
*        PROCESS RETURN CODE AND RETURN OR ABEND                      *
*                                                                     *
***********************************************************************
         SPACE 2
         B     FINISH(R15)             * GO AND DO WHAT WE CAN
FINISH   EQU   *
         B     ENDGOOD                 * ENDED WITH RC=00 (GOOD)
         B     ENDABEND                * ENDED WITH RC=04 (ABEND)
         B     ENDABEND                * ENDED WITH RC=08 (ABEND)
         B     ENDABEND                * ENDED WITH RC=0C (ABEND)
         B     ENDABEND                * ENDED WITH RC=10 (ABEND)
         B     ENDABEND                * ENDED WITH RC=14 (ABEND)
         B     ENDABEND                * ENDED WITH RC=18 (ABEND)
         B     ENDABEND                * ENDED WITH RC=1C (ABEND)
         B     ENDABEND                * ENDED WITH RC=20 (ABEND)
         B     ENDABEND                * ENDED WITH RC=24 (ABEND)
         B     ENDNCLST                * ENDED WITH RC=28 (NOT CLIST)
         B     ENDABEND                * ENDED WITH RC=2C (ABEND)
         B     ENDABEND                * ENDED WITH RC=30 (ABEND)
         B     ENDABEND                * ENDED WITH RC=34 (ABEND)
         B     ENDABEND                * ENDED WITH RC=38 (ABEND)
         B     ENDABEND                * ENDED WITH RC=3C (ABEND)
ENDGOOD  EQU   *
         PUTLINE PARM=PUTLLIST,        * PARM IS THE LIST FORMAT       C
               UPT=(R4),               * POINTER TO UPT                C
               ECT=(R5),               * POINTER TO ECT                C
               ECB=PUTLECB,            * POINTER TO ECB                C
               OUTPUT=(PUTLM1,TERM,SINGLE,INFOR), * PUTLINE OPTIONS    C
               MF=(E,PUTLIOPL)         * LET PUTLINE INIT THE IOPL
         L     R13,4(R13)              * RESTORE HSA
         RETURN (14,12),RC=0           * RESTORE REGISTERS AND RETURN
ENDNCLST EQU   *
         PUTLINE PARM=PUTLLIST,        * PARM IS THE LIST FORMAT       C
               UPT=(R4),               * POINTER TO UPT                C
               ECT=(R5),               * POINTER TO ECT                C
               ECB=PUTLECB,            * POINTER TO ECB                C
               OUTPUT=(PUTLM2,TERM,SINGLE,INFOR), * PUTLINE OPTIONS    C
               MF=(E,PUTLIOPL)         * LET PUTLINE INIT THE IOPL
         L     R13,4(R13)              * RESTORE HSA
         RETURN (14,12),RC=40          * RESTORE REGS RET CODE 40(DEC)
         EJECT
***********************************************************************
*                                                                     *
*        ABEND AS WE SHOULD NOT GET THIS RETURN CODE FROM             *
*        THE VARIABLE ACCESS SERVICE, IKJCT441.                       *
*                                                                     *
***********************************************************************
         SPACE 2
ENDABEND EQU   *
         ABEND 100,DUMP                * ABEND USER 100
         EJECT
***********************************************************************
*                                                                     *
*        DATA AREAS FOR VARIABLE ACCESS SERVICE (IKJCT441)            *
*                                                                     *
***********************************************************************
         SPACE 2
*
VASECODE DC    A(TSVEUPDT)             * ENTRY CODE FOR SETTING VALUES
VASVNAMP DC    A(VASVNAME)             * POINTER TO VARIABLE NAME
VASVNAME DC    C'LEBRGRP'              * VARIABLE NAME
VASVNAML DC    AL4(*-VASVNAME)         * VARIABLE NAME LENGTH
VASVVALP DC    A(VASVVALU)             * POINTER TO VALUE NAME
VASVVALU DC    C'        '             * VALUE NAME
VASVVALL DC    F'0'                    * VALUE NAME LENGTH
VASTOKEN DC    F'0'                    * TOKEN
         EJECT
***********************************************************************
*                                                                     *
*        PUTLINE MESSAGE #1 TO GO TO THE TERMINAL                     *
*                                                                     *
***********************************************************************
         SPACE 2
PUTLM1   DC    F'1'                    * ONLY ONE TEXT SEGMENT
         DC    A(PUTLM1T)              * ADDRESS OF ONLY TEXT SEGMENT
*
PUTLM1T  DC    AL2(PUTLM1L-*)          * LENGTH OF TEXT SEGMENT
         DC    H'0'                    * OFFSET OF SEGMENT - ALWAYS 0
         DC    C' CLIST VARIABLE &&LEBRGRP SET TO CURRENT RACF CONNECT C
               GROUP - '               * TEXT , PART #1
PUTLGRPN DC    C'        '             * TEXT , PART #2 (RACF GROUP)
PUTLM1L  EQU   *
         EJECT
***********************************************************************
*                                                                     *
*        PUTLINE MESSAGE #2 TO GO TO THE TERMINAL                     *
*                                                                     *
***********************************************************************
         SPACE 2
PUTLM2   DC    F'1'                    * ONLY ONE TEXT SEGMENT
         DC    A(PUTLM2T)              * ADDRESS OF ONLY TEXT SEGMENT
*
PUTLM2T  DC    AL2(PUTLM2L-*)          * LENGTH OF TEXT SEGMENT
         DC    H'0'                    * OFFSET OF SEGMENT - ALWAYS 0
         DC    C' CLIST VARIABLE CAN NOT BE SET FROM OUTSIDE OF A CLISTC
                ENVIRONMENT'           * MESSAGE TEXT
PUTLM2L  EQU   *
         EJECT
***********************************************************************
*                                                                     *
*        I/O PARAMETER LIST AREA                                      *
*                                                                     *
***********************************************************************
         SPACE 2
PUTLIOPL DC    4F'0'                   * AREA FOR THE PUTLINE IOPL
PUTLECB  DC    F'0'                    * AREA FOR THE PUTLINE ECB
         EJECT
***********************************************************************
*                                                                     *
*        SAVE AREA                                                    *
*                                                                     *
***********************************************************************
         SPACE 2
SAVEAREA DC    18F'0'                  * SAVE AREA
         EJECT
***********************************************************************
*                                                                     *
*        PUTLINE LIST FORMAT                                          *
*                                                                     *
***********************************************************************
         SPACE 2
PUTLLIST PUTLINE MF=L
         EJECT
***********************************************************************
*                                                                     *
*        DSECTS                                                       *
*                                                                     *
***********************************************************************
         SPACE 2
*
         IHAPSA                        * DSECT USED TO MAP PSA
*
         CVT   DSECT=YES               * DSECT USED TO MAP CVT
*
         IHAASCB                       * DSECT USED TO MAP ASCB
*
         IHAASXB                       * DSECT USED TO MAP ASXB
*
         IHAACEE                       * DSECT USED TO MAP ACEE
*
         IKJCPPL                       * DSECT USED TO MAP CPPL
*
         IKJTSVT                       * DSECT USED TO MAP TSVT
*
         END
