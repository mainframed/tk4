*          DATA SET CBT1791    AT LEVEL 001 AS OF 12/20/87
         TITLE 'LINKLIST - COMMAND TO SHOW THE SYSTEM LINKLIST'
**********************************************************************
***                                                                ***
***  LOCAL MACROS                                                  ***
***                                                                ***
**********************************************************************
         MACRO
         IHALLT                       , MAP OF LLT  DSECT=LLT
.*
.*   The LLT is described in the Debugging Handbook, but the
.*   IHALLT macro is nowhere to be found.  This is my best guess
.*   at what it must look like, based on the handbook.
.*
LLT      DSECT
LLTHEAD  DS    0CL8                     TABLE HEADER
LLTID    DS    CL4                        TABLE ID 'LLT '
LLTCOUNT DS    F                          NUMBER OF ENTRIES IN TABLE
LLTENTRY DS    0CL45                    ENTRY IN TABLE
LLTDSLTH DS    XL1                        LENGTH OF DATASET NAME
LLTDSN   DS    CL44                       DATASET NAME
         MEND
*
         EJECT
         PRINT NOGEN
**********************************************************************
***                                                                ***
***                   LINKLIST                                     ***
***                                                                ***
***   This is a TSO command to show the system id and the          ***
***   LINKLIST for the running system.                             ***
***                                                                ***
***   Syntax -                                                     ***
***                                                                ***
***       LINKLIST   SYSID/ID       NUM                            ***
***       LL         NOSYSID/NOID   NONUM                          ***
***                                                                ***
***       Required - none                                          ***
***                                                                ***
***       Defaults - SYSID, NUM                                    ***
***                                                                ***
***                                                                ***
***   ATTRIBUTES - REENTERABLE, REUSABLE, REFRESHABLE              ***
***                                                                ***
**********************************************************************
*
         EJECT
**********************************************************************
***                                                                ***
***  Author -                                                      ***
***                                                                ***
***    Credit -                                                    ***
***      I attribute the idea for the basic approach used in this  ***
***      code to Paul L. Sullivan, who published the idea in the   ***
***      December, 1987, issue of Technical Support magazine.      ***
***                                                                ***
***      I took Paul's idea and incorporated it into a skeleton of ***
***      a "real" TSO command which I developed some time ago for  ***
***      presentations at meetings of SHARE, Inc., entitled "How   ***
***      to Write a TSO Command."  An ESTAE exit is part of this   ***
***      skeleton.                                                 ***
***                                                                ***
***    Initial Enhancements -                                      ***
***      I used mapping macros for all the data areas needed by    ***
***      the program.  This includes by best guess of what the     ***
***      IHALLT macro would look like, using the same data names   ***
***      as appear in the Debugging Handbook.  Also, I converted   ***
***      Paul's TPUT I/O to PUTLINE so that SYSOUT trapping        ***
***      available in CLISTs could be used to hold the output,     ***
***      and so that I/O would occur in batch.  I also added the   ***
***      command operands and the code to go get the SMF System    ***
***      ID for the output display.  Finally, I ensured that all   ***
***      code would now be reenterable.  A HELP document is        ***
***      included in this source code.                             ***
***                                                                ***
***    Chuck Hoffman                                               ***
***    Supervisor, IBM Systems Programming                         ***
***    GTE Laboratories - Technical Computation Center             ***
***    40 Sylvan Road                                              ***
***    Waltham, MA  02254                                          ***
***                            (w) 617/466-2131                    ***
***                            (h) 617/551-0185                    ***
***                                                                ***
**********************************************************************
*
         EJECT
**********************************************************************
***                                                                ***
***                   HELP TEXT                                    ***
***                                                                ***
***  )F FUNCTION -                                                 ***
***    The LINKLIST command is used to display the SMF system id,  ***
***    and the names of libraries on the current LNKLSTxx.         ***
***                                                                ***
***  )X SYNTAX -                                                   ***
***      LINKLIST   SYSID/ID       NUM                             ***
***      LL         NOSYSID/NOID   NONUM                           ***
***                                                                ***
***      Required - none                                           ***
***                                                                ***
***      Defaults - SYSID, NUM                                     ***
***                                                                ***
***  )O OPERANDS -                                                 ***
***                                                                ***
***  ))SYSID   - Show the SMF system id in a header line.          ***
***  ))ID      - Show the SMF system id in a header line.          ***
***                                                                ***
***  ))NOSYSID - Do not show the SMF system id in a header line.   ***
***  ))NOID    - Do not show the SMF system id in a header line.   ***
***                                                                ***
***  ))NUM     - Show a sequence number before each library name.  ***
***  ))NONUM   - Do not show a sequence number before each library ***
***              name.                                             ***
***                                                                ***
***  ))EXAMPLE -                                                   ***
***                                                                ***
***      READY                                                     ***
***      linklist                                                  ***
***                                                                ***
***      ---- BSYS LINK LIST ----                                  ***
***        0  SYS1.LINKLIB                                         ***
***        1  SYS1.CMDLIB                                          ***
***        2  SYS1.FORTLIB                                         ***
***        3  SYS1.COBLIB                                          ***
***                                                                ***
***      READY                                                     ***
***                                                                ***
***  )S SUBCOMMANDS -                                              ***
***    The LINKLIST command has no subcommands.                    ***
***                                                                ***
**********************************************************************
*
         EJECT
**********************************************************************
***                                                                ***
***   THE FOLLOWING COMMAND WILL PRODUCE PDE'S AS SHOWN.           ***
***                                                                ***
***   TEST AT LABEL PAEND.  EQUATE PARMPDL WITH 9R%.               ***
***                                                                ***
***          LINKLIST  NOSYSID                                     ***
***                                                                ***
***                                                                ***
***     KEYSYSID                                                   ***
***       +-----+                                                  ***
***       ×00 02×                                                  ***
***       +-----+                                                  ***
***                                                                ***
***     KEYNUM                                                     ***
***       +-----+                                                  ***
***       ×00 01×                                                  ***
***       +-----+                                                  ***
***                                                                ***
**********************************************************************
         EJECT
**********************************************************************
***                                                                ***
***   PROLOG                                                       ***
***                                                                ***
***     1.  Linkage conventions and addressability.                ***
***     2.  Clear the completion code                              ***
***     3.  Save the pointer to the CPPL.                          ***
***                                                                ***
**********************************************************************
*
LINKLIST CSECT
LINKLIST AMODE 24
LINKLIST RMODE 24
         STM   R14,R12,12(R13)          SAVE INTO CALLERS S.A.
         B     BASE-LINKLIST(0,R15)     BRANCH TO AROUND EYECATCHER
         DC    AL1(L'NAME)                LENGTH OF NAME
NAME     DC    C'LINKLIST'                MODULE NAME
         DC    C' &SYSDATE &SYSTIME '     DD.MM.YY HH.MM
BASE     LR    RBASE,R15                RBASE IS BASE REGISTER
         USING LINKLIST,RBASE             TELL ASSEMBLER
         GETMAIN  R,LV=WORKDLEN,SP=0    GET AREA FOR MYSAVE AND WORK
         ST    R13,4(0,R1)              CALLERS S.A. ADDR TO MY S.A.
         ST    R1,8(0,R13)              MY S.A. ADDR TO CALLERS S.A.
         LM    R15,R1,16(R13)           RESTORE REGS USED BY GETMAIN
         L     R13,8(0,R13)             R13 POINTS TO MY S.A.
         USING WORKD,R13                  TELL ASSEMBLER
*
         USING PARMPDL,R9               ADDRESSABILITY OF PDE LIST
*
         USING LLT,R8                   ADDRESSABILITY OF LINKLIST TBL
*
         XC    COMPCODE,COMPCODE        CLEAR COMPLETION CODE TO ZERO
         ST    R1,CPPLPTR               SAVE CPPL POINTER
*
         B     MAINLINE
*
         EJECT
**********************************************************************
***                                                                ***
***   MAIN LINE ROUTINE                                            ***
***                                                                ***
**********************************************************************
*
MAINLINE BAL   RBAL,ABEND               SET UP ABEND EXIT
         BAL   RBAL,PPLSETUP            SET UP PARSE PARM LIST
*
MAPARSE  BAL   RBAL,PARSE               PARSE THE INPUT PARAMETERS
         CLC   RETCDE(4),F0             IF RETURN CODE IS BAD
         BE    *+14                     THEN
         MVC   COMPCODE(4),F12            SET RETURN CODE TO 12
         B     ENDING                     AND GO TO ENDING
*
MALOCATE BAL   RBAL,LOCATE              LOCATE THE DATA AREAS
         CLC   RETCDE(4),F0             IF RETURN CODE IS BAD
         BE    *+14                     THEN
         MVC   COMPCODE(4),F12            SET RETURN CODE TO 12
         B     ENDING                     AND GO TO ENDING
*
MAPRINT  BAL   RBAL,PRINT               PRINT THE OUTPUT
         CLC   RETCDE(4),F0             IF RETURN CODE IS BAD
         BE    *+14                     THEN
         MVC   COMPCODE(4),F12            SET RETURN CODE TO 12
         B     ENDING                     AND GO TO ENDING
*
         B     ENDING                   BRANCH TO ENDING
         EJECT
**********************************************************************
***                                                                ***
***   EPILOG                                                       ***
***                                                                ***
***     1.  Release storage used by IKJPARS.                       ***
***     2.  Linkage conventions.                                   ***
***                                                                ***
**********************************************************************
ENDING04 LA       R15,X'04'(0,0)          RETURN CODE TO R15
         ST       R15,COMPCODE              SAVE IN COMPLETION CODE
*
ENDING   LA       R2,MYPPL+(PPLANS-PPL)   ADDRESS OF PTR TO PDL
         L        R2,0(0,R2)              R4 POINTS TO PDL
         IKJRLSA  (R2)                    FREE STORAGE OF PDL
*
ENDABEND ESTAE    0                       CANCEL THE ABEND EXIT
*
         L        R14,COMPCODE            R14 TEMPORARILY HAS COMP CODE
         LR       R15,R13                 R15 HAS MY SAVE AREA ADDRESS
         L        R13,4(0,R13)            R13 RESTORE, PNT TO CALLER SA
         FREEMAIN R,LV=WORKDLEN,SP=0,A=(R15)  FREE MYSAVE,COMPCODE,ETC
         LM       R0,R12,20(R13)          R0-R12 RESTORE FROM CALLER SA
         LR       R15,R14                 R15 GETS COMP CODE
         L        R14,12(0,R13)           R14 RESTORE FROM CALLERS S.A.
         MVI      12(R13),X'FF'           SIGNAL MODULE COMPLETE
         BR       R14                     RETURN
*
         EJECT
**********************************************************************
***                                                                ***
***           SET UP EXIT FOR ABENDS                               ***
***                                                                ***
***  Use ESTAE to set up an environment to trap ABENDs.            ***
***                                                                ***
***  1.  The exit is ESTXIT.                                       ***
***  2.  The return point is at label ENDING04 in main routine.    ***
***  3.  The parm list passed to the exit will be:                 ***
***                                                                ***
***         ESTUPL                                                 ***
***         +-----------+                                          ***
***         ×           ×==> Return point                          ***
***         +-----------+                                          ***
***         ×           ×==> User work area                        ***
***         +-----------+    +-----------+                         ***
***                          × Register  ×                         ***
***                          × save area ×                         ***
***                         ---         ---                        ***
***                         ---         ---                        ***
***                          ×           ×                         ***
***                          +-----------+                         ***
***                          × Other data×                         ***
***                          +-----------+                         ***
***                                                                ***
**********************************************************************
ABEND    ST    RBAL,ABRBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
         MVC   ESTAEL(ESTAELLN),ESTAED  INITIALIZE ESTAE PARM LIST
         LA    R15,ENDING04             ADDRESS OF RETURN POINT
         ST    R15,ESTUPL                 INTO USER PARM LIST
         LA    R15,ESTUWK               ADDRESS OF USER WORK AREA
         ST    R15,ESTUPL+4               INTO USER PARM LIST
         LA    R4,ESTUPL                R4 HAS ADDRESS OF USER PARM LST
         L     R5,VESTXIT               R5 HAS ADDRESS OF ESTAE EXIT
*
ABESTAE  ESTAE (R5),PARAM=(R4),MF=(E,ESTAEL)  EXECUTE ESTAE
*
ABENDEND L     RBAL,ABRBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
         EJECT
**********************************************************************
***                                                                ***
***        CREATE PARSE PARAMETER LIST AND I/O PARM LIST           ***
***                                                                ***
***        PARSE                                                   ***
***          1.  Copy addresses of UPT, ECT and CBUF from CPPL.    ***
***          2.  Add addresses of own ECB, ANS and UWA, and        ***
***              address of PCE List (PCL) created by macros.      ***
***                                                                ***
***        I/O                                                     ***
***          1.  Copy addresses of UPD and ECT from CPPL.          ***
***          2.  Add address of own I/O ECB.                       ***
***          3.  Zero the IOPLIOPB pointer.  This will point to    ***
***              the parm block for the appropriate I/O routine.   ***
***              It will be filled in by the execute form of the   ***
***              STACK, GETLINE, PUTLINE or PUTGET macro when      ***
***              executed.                                         ***
**********************************************************************
PPLSETUP ST    RBAL,PPRBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
         L     R4,CPPLPTR               ADDRESS OF CMD PROC PARM LIST
         USING CPPL,R4                    ADDRESSABILITY
         LA    R6,MYPPL                 ADDRESS OF MY PARSE PARM LIST
         USING PPL,R6                     ADDRESSABILITY
*
         MVC   PPLUPT(4),CPPLUPT        UPT  (CPPL)
         MVC   PPLECT(4),CPPLECT        ECT  (CPPL)
         LA    R5,MYECB
         ST    R5,PPLECB                ECB  (MINE)
         MVC   PPLPCL(4),VPARMPCL       PCL  (CSECT)
         LA    R5,MYANS
         ST    R5,PPLANS                ANS  (MINE)
         MVC   PPLCBUF(4),CPPLCBUF      CBUF (CPPL)
         LA    R5,MYUWA
         ST    R5,PPLUWA                UWA  (MINE)
         DROP  R6                       DROP ADDRESSABILITY
*
         LA    R6,MYIOPL                ADDRESS OF MY IO PARM LIST
         USING IOPL,R6                    ADDRESSABILITY
         MVC   IOPLUPT(4),CPPLUPT       UPT  (CPPL)
         MVC   IOPLECT(4),CPPLECT       ECT  (CPPL)
         LA    R15,MYIOECB
         ST    R15,IOPLECB              ECB  (MINE)
         XC    IOPLIOPB(4),IOPLIOPB     IOPB (0000)
*
         DROP  R4,R6
*
PPEND    L     RBAL,PPRBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
         EJECT
**********************************************************************
***                                                                ***
***    PARSE THE INPUT PARAMETER STRING                            ***
***                                                                ***
***      1.  Execute IKJPARS with CALLTSSR using own PPL.          ***
***      2.  Load address of Parm Descriptor Element List (PDL)    ***
***          from own ANS word into R9 for addressability.         ***
***                                                                ***
**********************************************************************
PARSE    ST    RBAL,PARBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
         XC    MYECB,MYECB              ZERO THE ECB FOR PARSE
PARSEIT  CALLTSSR EP=IKJPARS,MF=(E,MYPPL)  PARSE THE PARMS
         L     R9,MYPPL+(PPLANS-PPL)    POINTER TO PDL ADDRESS
         L     R9,0(0,R9)               ADDRESSABILITY OF PDL
*
PAEND    L     RBAL,PARBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
*
         EJECT
**********************************************************************
***                                                                ***
***  LOCATE THE DATA AREAS                                         ***
***                                                                ***
**********************************************************************
LOCATE   ST    RBAL,LORBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
*
LOPSA    XR    R15,R15                  ADDRESS OF PSA
         L     R15,(FLCCVT-PSA)(R15)    ADDRESS OF CVT
*
LOSMCA   CLC   KEYSYSID,=H'2'           IF 'NOSYSID'
         BE    LOLTA                      SKIP THIS
         L     R8,(CVTSMCA-CVT)(R15)              ADDR OF SMF WORK AREA
         MVC   LOSYSID(4),(SMCASID-SMCABASE)(R8)  SAVE THE SYSTEM ID
*
LOLTA    L     R8,(CVTLLTA-CVT)(R15)    ADDRESS OF LINKLIST TABLE
         ST    R8,LOLLTA                SAVE IT
*
         B     LOEND
*
LORET04  LA    R15,X'04'                RETURN CODE TO R15
         ST    R15,RETCDE               SAVE IT
         B     LOEND                    BRANCH TO ENDING
*
LOEND    L     RBAL,LORBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
*
         EJECT
**********************************************************************
***                                                                ***
***  FORMAT AND WRITE THE MESSAGES                                 ***
***                                                                ***
**********************************************************************
PRINT    ST    RBAL,PRRBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
         LA    R15,0                    SET MESSAGE NUMBER 0 (BLANK)
         BAL   RBAL,PUTLPROC            WRITE THE MESSAGE
*
PRSYSID  CLC   KEYSYSID,=H'2'           IF 'NOSYSID'
         BE    PRDSNS                     SKIP THIS
         MVC   MSG0001A(29),WRK0001A    INITIALIZE THE MESSAGE
         MVC   MSG0001A+10(4),LOSYSID   ADD THE SYSID
         LA    R15,1                    SET MESSAGE NUMBER
         BAL   RBAL,PUTLPROC            WRITE THE MESSAGE
*
PRDSNS   ICM   R2,15,LLTCOUNT           R2 HAS NUMBER OF DSNS
         LA    R3,LLTDSN                POSITION TO FIRST DSNAME
         S     R3,=F'45'                POSITION TO MINUS-1 DSNAME
         ZAP   PRCOUNT,=PL2'-1'         SET COUNT TO MINUS-1
PRLOOP1  LA    R3,45(0,R3)              POINT TO NEXT DSNAME
         AP    PRCOUNT,=PL2'+1'         ADD ONE TO COUNT
         MVC   MSG0002A(57),WRK0002A    INITIALIZE THE MESSAGE
PRDSN1   MVC   MSG0002A+10(44),0(R3)    PUT THE DSN ONTO THE MESSAGE
         CLC   KEYNUM(2),=H'2'          IF 'NONUM' IN USE
         BE    PRDSN2                     BRANCH AROUND
         MVC   MSG0002A+04(4),EDMASK    SET THE EDIT MASK
         ED    MSG0002A+04(4),PRCOUNT   EDIT THE NUMBER ONTO MESSAGE
         B     PRPRINT                  BRANCH AROUND NONUM STUFF
*
PRDSN2   MVC   MSG0002A(57),WRK0002A    RE-INITIALIZE THE MESSAGE
         MVC   MSG0002A+05(44),0(R3)    REPUT THE DSN ONTO THE MSG
*
PRPRINT  LA    R15,2                    SET MESSAGE NUMBER
         BAL   RBAL,PUTLPROC            WRITE THE MESSAGE
         BCT   R2,PRLOOP1               IF MORE, LOOP BACK UP
*
         LA    R15,0                    SET MESSAGE NUMBER 0 (BLANK)
         BAL   RBAL,PUTLPROC            WRITE THE MESSAGE
*
         B     PREND
*
PRRET04  LA    R15,X'04'                RETURN CODE TO R15
         ST    R15,RETCDE               SAVE IT
         B     PREND                    BRANCH TO ENDING
*
PREND    L     RBAL,PRRBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
         EJECT
**********************************************************************
***                                                                ***
***   WRITE MESSAGE WITH PUTLINE                                   ***
***                                                                ***
***    1.  IOPL was initialized at beginning of program, IOPLIOPB  ***
***        field will be filled in by PUTLINE execute macro.       ***
***    2.  PTPB will be filled in by PUTLINE execute macro.        ***
***    3.  OLD will be filled in by this procedure.                ***
***                                                                ***
***    Message number in R15 is multiplied by four and used as     ***
***    offset into PUTABLE.  PUTABLE contains branch addresses     ***
***    for processing appropriate message.                         ***
**********************************************************************
PUTLPROC ST    RBAL,PURBALSV            SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
         SLL   R15,2                    R15 IS NOW OFFSET INTO PUTABLE
         L     R15,PUTABLE(R15)         R15 NOW POINTS TO PROCESSING
         BR    R15                      GO TO APPROPRIATE PROCESSING
*
PUTABLE  DC    A(PU0000)                PROCESS ADDR FOR BLANK LINE
         DC    A(PU0001)                PROCESS ADDR FOR LST0001I
         DC    A(PU0002)                PROCESS ADDR FOR LST0002I
*
PU0000   LA    R15,1(0,0)               SEGMENTS = 1
         ST    R15,MYOLD                  INTO O.L.D.
         LA    R15,MSG0000              ADDR OF BLANK LINE
         ST    R15,MYOLD+4                INTO O.L.D.
         B     PUOUTPUT                 GO WRITE IT
*
PU0001   LA    R15,1(0,0)               SEGMENTS = 1
         ST    R15,MYOLD                  INTO O.L.D.
         LA    R15,MSG0001A             ADDR OF LST0001I, SEG #1
         ST    R15,MYOLD+4                INTO O.L.D.
         B     PUOUTPUT                 GO WRITE IT
*
PU0002   LA    R15,1(0,0)               SEGMENTS = 1
         ST    R15,MYOLD                  INTO O.L.D.
         LA    R15,MSG0002A             ADDR OF LST0002I, SEG #1
         ST    R15,MYOLD+4                INTO O.L.D.
         B     PUOUTPUT                 GO WRITE IT
*
PUOUTPUT XC    MYPTPB(MYPTPBLN),MYPTPB  ZERO THE PUTLINE PARM BLOCK
         XC    MYIOECB,MYIOECB          ZERO THE ECB
         PUTLINE PARM=MYPTPB,OUTPUT=MYOLD,MF=(E,MYIOPL)
         LTR   R15,R15                  IF RETURN IS ZERO
         BZ    PUEND                      GO TO END
         B     PUERR04                  ELSE GO TO ERROR
*
PUERR04  LA    R15,X'04'(0,0)           SET VALUE
         ST    R15,RETCDE                 INTO INTERNAL RETURN CODE
*
PUEND    L     RBAL,PURBALSV            RESTORE RETURN ADDRESS
         BR    RBAL                     RETURN
         EJECT
**********************************************************************
***                                                                ***
***   DATA CONSTANTS                                               ***
***                                                                ***
**********************************************************************
CONSTDTA DS    0D                       AREA FOR DATA CONSTANTS
VPARMPCL DC    V(PARMPCL)               ADDR OF PARM CONTROL LIST
VESTXIT  DC    V(ESTXIT)                ADDR OF ABEND EXIT
*
F0       DC    F'0'                     CONSTANT
F12      DC    F'12'                    CONSTANT
BLANKS   DC    CL80' '                  BLANK LINE
*                              0....+....1....+....2....+....3....+
MSG0000  DC    H'06',H'00',CL02'  '
WRK0001A DC    H'29',H'00',CL25' ---- XXXX LINK LIST ----'
WRK0002A DC    H'57',H'00',CL53' 000  DSNAME            '
*
EDMASK   DC    X'40202120'
*
ESTAED   ESTAE MF=L
*
         LTORG
*
CONSTEND DS    0D
CONSTLEN EQU   *-CONSTDTA               TOTAL LENGTH OF CONSTANTS
*
         EJECT
**********************************************************************
***                                                                ***
***    COMMAND OPERANDS                                            ***
***                                                                ***
***    See syntax description at beginning of program.             ***
***                                                                ***
**********************************************************************
PARMPCL  IKJPARM  DSECT=PARMPDL
*
KEYSYSID IKJKEYWD DEFAULT='SYSID'
         IKJNAME  'SYSID',ALIAS=('ID')
         IKJNAME  'NOSYSID',ALIAS=('NOID')
*
KEYNUM   IKJKEYWD DEFAULT='NUM'
         IKJNAME  'NUM'
         IKJNAME  'NONUM'
*
         IKJENDP
*
         EJECT
**********************************************************************
***                                                                ***
***   DATA AREA IN SUBPOOL 000                                     ***
***                                                                ***
**********************************************************************
WORKD    DSECT                          AREA-13 FOR VARIABLES
MYSAVE   DS    18F                      REGISTER SAVE AREA
CPPLPTR  DS    F                        INITIAL VALUE OF R1 (CPPLADDR)
RETCDE   DS    F                        INTERNAL RETURN CODE
COMPCODE DS    F                        PROGRAM COMPLETION CODE
*
ABRBALSV DS    F                        RETURN ADDRESS SAVE AREA
PPRBALSV DS    F                        RETURN ADDRESS SAVE AREA
PARBALSV DS    F                        RETURN ADDRESS SAVE AREA
PURBALSV DS    F                        RETURN ADDRESS SAVE AREA
LORBALSV DS    F                        RETURN ADDRESS SAVE AREA
PRRBALSV DS    F                        RETURN ADDRESS SAVE AREA
*
MYPPL    DS    7F                       PARSE PARAMETER LIST
MYECB    DS    F                        ECB FOR PARSE
MYANS    DS    F                        POINTER TO THE PDL
*
MYUWA    DS    0D                       WORK/SAVE AREA FOR PARSE EXITS
MYUWASV  DS    18F                      SAVE AREA FOR EXITS
MYUWAWRK DS    14F                      WORK AREA FOR EXITS
*
MSG0001A DS    H,H,CL25
MSG0002A DS    H,H,CL53
*
PRCOUNT  DS    PL2                      DSN COUNT
*
MYIOPL   DS    4F                       IO PARM LIST
MYIOECB  DS    F                        ECB FOR I/O ROUTINES
MYPTPB   PUTLINE MF=L                   PUTLINE PARM BLOCK (PTPB)
MYPTPBLN EQU   *-MYPTPB                   LENGTH OF PTPB
*                                       OUTPUT LINE DESCRIPTOR, 1 LEVEL
MYOLD    DS    F                          NUMBER OF SEGMENTS
         DS    5A                         ADDRS OF UP TO FIVE SEGMENTS
*
ESTAEL   ESTAE MF=L
ESTAELLN EQU   *-ESTAEL
ESTUPL   DS    0D                       ESTAE USER PARM LIST
         DS    A                          ADDRESS OF RETURN POINT
         DS    A                          ADDRESS OF USER WORK AREA
ESTUWK   DS    0D                       ESTAE USER WORK AREA
         DS    18F                        REGISTER SAVE AREA
         DS    D                          DOUBLE WORD FOR UNPACK
         DS    F                          BAL REGISTER SAVE AREA
         WTO   '.+....1....+....2....+....3....+....4....+....5',      X
               ROUTCDE=(11),DESC=(7),MF=L
*
LOLLTA   DS    A                        ADDRESS OF LINKLIST TABLE
LOSYSID  DS    CL4                      SMF SYSTEM ID
*
WORKDEND DS    0D
WORKDLEN EQU   *-WORKD                  TOTAL LENGTH OF WORK-13 AREA
         EJECT
**********************************************************************
***                                                                ***
***   MAPPING DSECTS                                               ***
***                                                                ***
**********************************************************************
*
         CVT   DSECT=YES              , CVTMAP FOR IKJPARS
         IKJCPPL                        COMMAND PROCESSOR PARM LIST
         IKJPPL                         PARSE PARM LIST
         IKJIOPL                        I/O PARM LIST
*
         IHASDWA                      , SDWA FOR ESTAE EXIT
*
         IHAPSA                         MAP OF PSA  DSECT=PSA
         IEESMCA                        MAP OF SMCA DSECT=SMCABASE
         IHALLT                         MAP OF LLT  DSECT=LLT
*
         EJECT
**********************************************************************
***                                                                ***
***   EQUATES                                                      ***
***                                                                ***
**********************************************************************
RBASE    EQU   12                       BASE REGISTER
RBAL     EQU   10                       BAL REGISTER
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
**********************************************************************
***                  ESTAE (ABEND) EXIT                            ***
***                                                                ***
***   This exit will receive control from RTM during ABEND         ***
***   processing.  Data areas available to this exit will be       ***
***   the System Diagnostic Work Area (SDWA) provided by the       ***
***   RTM, and the user parm list and the areas it points to       ***
***   which are provided by the main routine.                      ***
***                                                                ***
***   This exit will format an ABEND message, and write it         ***
***   with a WTO.  It will then return to RTM.                     ***
***                                                                ***
***   The register save area used by this exit has already been    ***
***   obtained by a GETMAIN by the main program, prior to the      ***
***   execution of the ESTAE macro.                                ***
***                                                                ***
***   This exit is entered by RTM with standard MVS linkage        ***
***   conventions.  Upon entry, the following relationships        ***
***   exist:                                                       ***
***                                                                ***
*** R1              SDWA (IHASDWA)   ESTUSRPL                      ***
*** +-----------+   +------------+   +-----------+                 ***
*** ×           ×==>× SDWAPARM   ×==>× ESURETA   ×==> Return point ***
*** +-----------+   +------------+   +-----------+                 ***
***                 × SDWAABCC   ×   × ESUWRKA   ×==> ESUWKD       ***
***                 +------------+   +-----------+   +-----------+ ***
***                 ×            ×                   × Save area × ***
***                ---          ---                 ---         ---***
***                ---          ---                 ---         ---***
***                 ×            ×                   ×           × ***
***                 +------------+                   +-----------+ ***
***                 × SDWAGR15   ×                   × Other work× ***
***                 +------------+                   ×   areas   × ***
***                 ×            ×                   +-----------+ ***
***                ---          ---                                ***
***                ---          ---                                ***
***                 ×            ×                                 ***
***                 +------------+                                 ***
***                                                                ***
**********************************************************************
         EJECT
**********************************************************************
***                                                                ***
***          SEE DOCUMENTATION ON PREVIOUS PAGE                    ***
***                                                                ***
**********************************************************************
ESTXIT   CSECT
         STM   R14,R12,12(R13)          SAVE REGS INTO CALLER'S S.A.
         LR    R12,R15                  R12 HAS BASE ADDRESS
         USING ESTXIT,R12                 ADDRESSABILITY
         LR    R11,R1                   R11 POINTS TO SDWA
         USING SDWA,R11                   ADDRESSABILITY
         L     R10,SDWAPARM             R10 POINTS TO USER PARM LIST
         USING ESTUSRPL,R10               ADDRESSABILITY
         L     R15,ESUSRWKA             R15 POINTS TO USER WORK AREA
         ST    R13,4(0,R15)             CALLER'S S.A. ADDR TO OWN S.A.
         ST    R15,8(0,R13)             OWN S.A. ADDR TO CALLER'S S.A.
         LR    R13,R15                  R13 POINTS TO OWN S.A.
         USING ESUWKD,R13                 ADDRESSABILITY
*
ESTMESSG BAL   R9,ESMSG                 FORMAT AND WRITE A MESSAGE
*
         PRINT GEN
         L     R4,ESURETA               R4 CONTAINS RETURN ADDRESS
ESTSETRP SETRP WKAREA=(R11),RC=4,RETADDR=(R4),RETREGS=YES,FRESDWA=YES
         PRINT NOGEN
*
ESTEND   XR    R15,R15                  CLEAR RETURN CODE
         L     R13,4(0,R13)             RESTORE R13, PNT TO CALLER'S SA
         LM    R0,R12,20(R13)           RESTORE R0-R12 FROM CALLER'S SA
         L     R14,12(0,R13)            RESTORE R14 FROM CALLER'S S.A.
         BR    R14                      RETURN
         EJECT
**********************************************************************
***                                                                ***
***                  WRITE ABEND MESSAGE                           ***
***                                                                ***
**********************************************************************
ESMSG    ST    R9,ESUBALS1              SAVE BAL REGISTER
*
         MVC   WTOL(WTOLLEN),WTOD       INITIALIZE WTO PARM LIST
*
ESSYSCDE L     R3,SDWAABCC              R3 HAS ABEND CODES
         SLL   R3,8                     LEFT JUSTIFY SYSTEM CODE
         LA    R4,WTOL+26               R4 POINTS INTO MESSAGE
         LA    R5,3                     R5 COUNTER SET TO 3
         BAL   R9,ESHEX                 CONVERT TO DISPLAYABLE HEX
*
ESR15CDE L     R3,SDWAGR15              R3 HAS ABEND R15 CONTENTS
         LA    R4,WTOL+42               R4 POINTS INTO MESSAGE
         LA    R5,8                     R5 COUNTER SET TO 8
         BAL   R9,ESHEX                 CONVERT TO DISPLAYABLE HEX
*
ESUSRCDE L     R3,SDWAABCC              R3 HAS ABEND CODES
         N     R3,ESXFFF                R3 HAS ONLY USER CODE
         CVD   R3,ESUWKDBL              CONVERT TO DECIMAL
         OI    ESUWKDBL+7,X'0F'         KILL THE SIGN
         UNPK  WTOL+33(4),ESUWKDBL(8)   UNPACK INTO MESSAGE
*
ESWTO    WTO   MF=(E,WTOL)              WRITE THE MESSAGE
*
ESMSGEND L     R9,ESUBALS1              RESTORE THE BAL REGISTER
         BR    R9                       RETURN
*
*
ESHEX    XR    R2,R2                    CLEAR EVEN REG OF EVEN/ODD
         SLDL  R2,4                     R2 RECEIVES ONE HEX DIGIT
         LA    R4,1(0,R4)               R4 POINTS TO NEXT MESSAGE CHAR
         LA    R2,ESHEXTBL(R2)          R2 POINTS TO CHAR IN TABLE
         MVC   0(1,R4),0(R2)            MOVE CHAR FROM TABLE TO MESSAGE
         BCT   R5,ESHEX                 LOOP BACK UP
         BR    R9                       RETURN
*
         EJECT
**********************************************************************
***                                                                ***
***          DATA AREAS AND DSECTS FOR ESTAE EXIT                  ***
***                                                                ***
**********************************************************************
ESHEXTBL DC    CL16'0123456789ABCDEF'   TRANSLATE TABLE
         DS    0F                       ALIGN
ESXFFF   DC    X'00000FFF'              MASK TO CLEAR BITS 0-19
WTOD     WTO   '*** ABEND ***  Codes: SXXX, U9999, R15=XXXXXXXX',      X
               ROUTCDE=(11),DESC=(7),MF=L
*
*
*
ESTUSRPL DSECT                          USER PARM LIST
ESURETA  DS    A                          RETURN ADDRESS FOR RTM
ESUSRWKA DS    A                          WORK AREA ADDRESS FOR ME
*
*
*
ESUWKD   DSECT                          USER WORK AREA
ESUWKSAV DS    18F                        REGISTER SAVE AREA
ESUWKDBL DS    D                          DOUBLE WORD FOR UNPACK
ESUBALS1 DS    F                          BAL REGISTER SAVE AREA
WTOL     WTO   '.+....1....+....2....+....3....+....4....+....5',      X
               ROUTCDE=(11),DESC=(7),MF=L
WTOLLEN  EQU   *-WTOL                     LENGTH OF WTO PARM LIST
*
#PAN$AUD CSECT
$PAN#AUD DC    CL21'001CBT1791   12/20/87'
         END
