         TITLE ' C O P Y R E C '
*---------------------------------------------------------------------*
*                                                                     *
*        LAST UPDATE: JDM - 04/10/96                                  *
*                                                                     *
*        THIS IS A PROGRAM USED TO COPY SELECTED RECORDS FROM A       *
*        SEQUENTIAL DATASET, REGARDLESS OF FORMAT. THE SELECTED       *
*        RECORDS ARE SELECTED BY PASSING CONTROL CARDS TO THE PGM     *
*        WITH PAIRS OF NUMBER, I.E. RECORD BEGIN AND END TO BE        *
*        SELECTED. LIKE  2 20 40 60 SELECTS RECORDS 2-40 & 40-60.     *
*                                                                     *
*        JCL:  //COPY1234 EXEC PGM=COPYREC                            *
*              //MSG      DD SYSOUT=*                                 *
*              //IN       DD  -- INPUT  DATASET --                    *
*              //OUT      DD  -- OUTPUT DATASET --                    *
*              //SYSIN    DD *                                        *
*              A1 A2  B1  B2   C1  C2                                 *
*              /*                                                     *
*                                                                     *
*              CONTROL CARD OR CARDS ARE PAIRS OF NUMBER TO           *
*              COPY.  TO COPY EVERYTHING JUST CODE   1 99999999.      *
*              YOU CAN HAVE MULTIPLE CONTROL CARDS.                   *
*                                                                     *
*                                                                     *
* WRITTEN: MR FRANK YATES, AEROSPACE CORP WHILE AT MULTIPURPOSE       *
*          FACILITY, LOWRY AFB, CO FOR USE UNDER OS/MVT               *
* CHANGE                                                              *
*     LOG: MAY 1978-INSTALLED OS/MVS, AIR FORCE DATA SVCS CENTER,     *
*                   WASHINGTON D.C. , JIM MARSHALL                    *
*          JUN 1981-CLEANED UP CODE AND PACKAGED IT SO YOU WOULD      *
*                   NOT HAVE TO GATHER ALL THE PIECES TO COMPILE IT.  *
*                   BE SURE TO USE A PARM=BATCH IN THE COMPILE.       *
*                   AFDSC / JIM MARSHALL                              *
*          NOV 1984-PACKAGED MACROS INSIDE OF CODE AND CONCATENATED   *
*                   THE OTHER ROUTINES. NEEDED TO DO SOMETHING TO     *
*                   USE BESIDES 'IEBGENER'.     J.MARSHALL            *
*          JUN 1991-CLEANED UP THE CODE FURTHER, RECODED ROUTINES TO  *
*                   EXIT GRACEFULLY INSTEAD OF "SVC 3". ADDED DSECTS  *
*                   AND CODE TO SUPPORT THEM (ALL PREP FOR ESA). CODE *
*                   NOW COMPILES IN 31BIT MODE (NEEDS TO SWITCH BACK  *
*                   TO 24BIT MODE). MUST RUN IN 24BIT FOR NOW.   JDM2 *
*          JUN 1991-BUG IN SYSIN2 WHEN DDNAME=SYSIN MISSING, NOT      *
*                   ERRMSG PRODUCED. IMPLIED OK COPY. WILL MAKE IT    *
*                   SO I CAPTURE YOUR ATTENTION !!!              JDM3 *
*          APR 1996-CORRECTED CODE TO PERMIT SYSTEM DETERMINED        *
*                   BLKSIZE.                                     JDM4 *
*---------------------------------------------------------------------*
         SPACE
         MACRO
&NAME    MSG
         GBLB &MSGUSED
         LCLA &OP,&COLUMN,&L1,&L2,&L3,&N,&DISP,&CT
         LCLC &D,&E
         ACTR 400
&NAME    STM 14,1,MSGREGS    SAVE REGS 14,15,0,1.
         AIF (&MSGUSED).LOOP
&MSGUSED SETB 1
         B MSGSKIP           BRANCH AROUND CONSTANTS AND SUBROUTINES
MSGBDW   DC F'0'             BLOCK DESCRIPTOR WORD
MSGRDW   DC F'0'             RECORD DESCRIPTOR WORD
MSGCC    DC C'0'             CARRIAGE CONTROL
MSGTEXT  DS CL147
MSGEDIT  DC CL12' '          EDITING AREA FOR DECIMAL STRINGS
MSGMOVE  MVC 0(0,15),0(14)
MSGPAT   DC X'40',9X'20',X'2120'  EDITING PATTERN
MSGREG   DS F                REGISTER CONTENTS FOR TRANSLATION
MSGREGS  DC 4F'0'            CONTENTS OF REGS 0-15 AT ENTRY TO MSG
MSGRTRN  DS F                RETURN ADDRESS FOR WRITE SUBROUTINE
MSGWORK  DC D'0'
MSGTAB   DC C'0123456789ABCDEF'        STRING FOR TRANSLATIONS TO HEX
MSGTABAD DC A(MSGTAB-C'0')   ADDRESS OF TRANSLATE TABLE
MSGDEC   CVD 0,MSGWORK       ROUTINE TO MAKE DECIMAL STRINGS
         MVC MSGEDIT,MSGPAT  RESTORE EDITING PATTERN.
         ED MSGEDIT,MSGWORK+2     EDIT.
         LR 0,14             SAVE RETURN ADDRESS.
         LA 14,MSGEDIT+11    REG 14 = LAST DIGIT ADDRESS IN MSGEDIT
         SR 14,1             REG 14 = FIRST DIGIT ADDRESS
         EX 1,MSGMOVE        COPY STRING TO TEXT AREA.
         LR 14,0
         BR 14
MSGUNPK  UNPK 0(15,15),0(8,1)
         LA 1,7(1)
         LA 15,14(15)
         BCT 0,MSGUNPK
         BR 14
MSGWRITE ST 14,MSGRTRN       SAVE RETURN ADDRESS
         L 15,=V(MSGWRITE)   REG 15 = ENTRY POINT OF MSGWRITE CSECT
         LA 1,MSGBDW         REG 1 = ADDRESS OF MESSAGE
         BALR 14,15          WRITE THE MESSAGE.
         L 14,MSGRTRN
         BR 14               RETURN TO THE MACRO CALL.
MSGSKIP  EQU *
.LOOP    AIF (&OP GE N'&SYSLIST).FIN
&OP      SETA &OP+1
&N       SETA N'&SYSLIST(&OP)
         AIF (&N EQ 1).N1
&D       SETC '&SYSLIST(&OP,1)'
&E       SETC '&D'(1,1)
         AIF ('&E' EQ 'X').COPYHEX
         AIF ('&E' EQ 'R').COPYREG
         AIF ('&E' EQ 'C').COPYCHR
         AIF ('&E' EQ 'D').COPYDEC
.ERROR1  MNOTE 'OPERAND &OP SKIPPED BECAUSE OF SYNTAX ERROR.'
         AGO .LOOP
.ERROR2  MNOTE 'TRUNCATED OPERANDS BECAUSE OF EXCESSIVE LENGTH'
         AGO .FIN
.N1      ANOP
&D       SETC '&SYSLIST(&OP)'
&E       SETC '&D'(1,1)
         AIF ('&E' EQ '''').NOTE
         AIF ('&E' EQ 'C').C
         AGO .ERROR1
.C       MVI MSGCC,&D                 SET CARRIAGE CONTROL
         AGO .LOOP
.NOTE    ANOP
&L3      SETA K'&SYSLIST(&OP)-2        LENGTH OF NOTE
         AIF (&COLUMN+&L3 GT 132).ERROR2
         AIF (&COLUMN NE 0).SKIP2
         MVC MSGTEXT(&L3),=C&SYSLIST(&OP)
         AGO .SKIP4
.SKIP2   MVC MSGTEXT+&COLUMN.(&L3),=C&SYSLIST(&OP)
         AGO .SKIP4
.COPYHEX AIF ('&SYSLIST(&OP,3)' EQ '').Q3
&L3      SETA &SYSLIST(&OP,3)*2        NUMBER OF OUTPUT HEX BYTES
         AGO .Q4
.Q3      ANOP
&L3      SETA (L'&SYSLIST(&OP,2))*2    COPY LENGTH FROM SYMBOL TABLE
.Q4      AIF (&COLUMN+&L3 GT 132).ERROR2
&DISP    SETA 0                        RESET &DISP IF PREVIOUSLY USED.
         AIF (&N LT 4).Q5
&DISP    SETA &SYSLIST(&OP,4)          DISPLACEMENT, IF SPECIFIED
.Q5      ANOP
&CT      SETA &L3/14+1
         LA 0,&CT                      NUMBER OF UNPK'S REQUIRED
         AIF ('&D' EQ 'XR').Q1
         LA 1,&SYSLIST(&OP,2)+&DISP    SOURCE ADDRESS, SYMBOL FORM
         AGO .Q2
.Q1      LA 1,&DISP.(&SYSLIST(&OP,2))  SOURCE ADDRESS, REGISTER FORM
.Q2      LA 15,MSGTEXT+&COLUMN         DESTINATION ADDRESS
         BAL 14,MSGUNPK      BRANCH TO UNPK SUBROUTINE
.TR2     L 14,MSGTABAD
         TR MSGTEXT+&COLUMN.(&L3),0(14)
.SKIP4   ANOP
&COLUMN  SETA &COLUMN+&L3
         AGO .LOOP
.COPYREG AIF (&COLUMN+8 GT 132).ERROR2
         AIF ('&SYSLIST(&OP,2)' EQ '0').R0
         AIF ('&SYSLIST(&OP,2)' EQ '1').R1
         AIF ('&SYSLIST(&OP,2)' EQ '14').R14
         AIF ('&SYSLIST(&OP,2)' EQ '15').R15
         ST &SYSLIST(&OP,2),MSGREG
.RX      ANOP
&L3      SETA 8              LENGTH
         UNPK MSGTEXT+&COLUMN.(9),MSGREG(5)
         AGO .TR2
.R0      MVC MSGREG,MSGREGS+8
         AGO .RX
.R1      MVC MSGREG,MSGREGS+12
         AGO .RX
.R14     MVC MSGREG,MSGREGS
         AGO .RX
.R15     MVC MSGREG,MSGREGS+4
         AGO .RX
.COPYCHR ANOP                          COPY AN EBCDIC FIELD.
         AIF ('&SYSLIST(&OP,3)' EQ '').QC1
&L3      SETA &SYSLIST(&OP,3)          ACCEPT LENGTH FROM 3RD. OPERAND.
         AGO .QC2
.QC1     ANOP
&L3      SETA L'&SYSLIST(&OP,2)        TAKE LENGTH FROM SYMBOL TABLE
.QC2     ANOP
         AIF (&COLUMN+&L3 GT 132).ERROR2
&DISP    SETA 0                        RESET &DISP I6 PREVIOUSLY USED.
         AIF (&N LT 4).QC3
&DISP    SETA &SYSLIST(&OP,4)          DISPLACEMENT IF SPECIFIED
.QC3     AIF ('&D' EQ 'CR').QC4
         MVC MSGTEXT+&COLUMN.(&L3),&SYSLIST(&OP,2)+&DISP
         AGO .SKIP4
.QC4     MVC MSGTEXT+&COLUMN.(&L3),&DISP.(&SYSLIST(&OP,2))
         AGO .SKIP4
.COPYDEC AIF ('&SYSLIST(&OP,3)' EQ '').Q6
&L3      SETA &SYSLIST(&OP,3)          LENGTH WAS SPECIFIED.
         AGO .Q7
.Q6      ANOP
&L3      SETA 10                       DEFAULT FIELD WIDTH
.Q7      AIF (&COLUMN+&L3 GT 132).ERROR2
&DISP    SETA 0                        RESET &DISP.
         AIF (&N LT 4).Q8
&DISP    SETA &SYSLIST(&OP,4)          GET DISPLACEMENT SPEC
.Q8      AIF ('&D' EQ 'DR').Q9         TEST FOR REGISTER FORM.
         L 0,&SYSLIST(&OP,2)+&DISP     REG 0 = VALUE
         AGO .Q10
.Q9      LR 0,&SYSLIST(&OP,2)          REG 0 = VALUE
.Q10     LA 15,MSGTEXT+&COLUMN         REG 15 = TEXT ADDRESS
         LA 1,&L3-1                    REG 1 = FIELD WIDTH - 1
         BAL 14,MSGDEC
         AGO .SKIP4
.FIN     AIF (&COLUMN EQ 0).EXIT
&L1      SETA &COLUMN+5
&L2      SETA &L1+4
         MVI MSGRDW+1,&L1             SET RECORD LENGTH
         MVI MSGBDW+1,&L2             SET BLOCK LENGTH
         BAL 14,MSGWRITE              BRANCH TO MSG WRITE SUBROUTINE
.EXIT    LM 14,1,MSGREGS              RESTORE REGS 14,15,0,1
         MEND
         MACRO
&NAME    COMMENT  &COM
.**********************************************************************
.*  WRITE A COMMENT TO THE  //MSG DD SYSOUT=A  DATASET.               *
.*            THIS MACRO PERMITS COMMENTS TO BE WRITTEN TO THE        *
.*       //MSG (SYSOUT) DATASET INTERSPERSED WITH THE OUTPUT (IF ANY) *
.*       FROM "MSG" MACROS. IF NO FORMATTING SERVICES ARE REQUIRED,   *
.*       THIS MACRO SHOULD BE USED IN PLACE OF THE "MSG" MACRO        *
.*       BECAUSE IT ENTAILS MINIMAL OVERHEAD. REGISTERS 0, 1, 14,     *
.*       AND 15 ARE USED BY THE MACRO AND ARE NOT RESTORED.           *
.*        -NAME-   COMMENT '  ANY COMMENT UP TO 132 BYTES IN LENGTH'  *
.*       NOTES:                                                       *
.*       1. APOSTROPHIES ARE THE DELIMITERS OF THE COMMENT, WHICH     *
.*          MAY CONTAIN A PRINTABLE CHARACTER. APOSTROPHIES AND       *
.*          AMPERSANDS (&) INSIDE THE COMMENT MUST BE DOUBLED.        *
.*       2. THE COMMENT MACRO WRITES BY CALLING THE SFI SUBROUTINE    *
.*          "MSGWRITE".                                               *
.**********************************************************************
         LCLA &BLK,&REC
         AIF ('&COM' EQ '').END
&REC     SETA  3+K'&COM                RECORD LENGTH
&BLK     SETA  4+&REC                  BLOCK LENGTH
&NAME    L 15,=V(MSGWRITE)             REG 15 = EP OF MSGWRITE ROUTINE
         CNOP 0,4
         BAL 1,COMM&SYSNDX             REG 1 = MESSAGE ADDRESS
         DC H'&BLK,0,&REC,0',C'0',C&COM     MESSAGE
COMM&SYSNDX BALR 14,15                 LINK TO MSGWRITE ROUTINE.
.END     MEND
         SPACE
         MACRO
&NAME    LOADIT  &REG,&SYMBOL,&TYPE
         LCLC  &A
&A       SETC '&SYMBOL'(1,1)
         AIF ('&A' EQ '(').REGFORM
&NAME    L&TYPE &REG,&SYMBOL
         MEXIT
.REGFORM ANOP
&NAME    L&TYPE &REG,0&SYMBOL
         MEND
         MACRO                                                   JDM1
&NAME    MODE   &AMODE=31                                        JDM1
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-JDM1*
.*  SET ADDR MODE.  EITHER 'MODE AMODE=31' OR 'MODE AMODE=24'    JDM1*
.* NOTES: EXAMPLE - '    MODE AMODE=31  SET ADDR MODE TO 31      JDM1*
.*                  ' -MORE CODE -                               JDM1*
.*                  '    MODE AMODE=24  SET ADDR MODE TO 24      JDM1*
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-JDM1*
         SPACE  1                                                JDM1
         LCLC   &I                                               JDM1
         GBLA   &B                                               JDM1
&I       SETC   '&SYSNDX'                                        JDM1
         AIF    (&AMODE EQ 31).MOD31                             JDM1
&NAME    LA     15,RMOD&I                                        JDM1
         BSM    0,15                                             JDM1
RMOD&I   DS     0H                                               JDM1
         AGO    .MEND                                            JDM1
.MOD31   ANOP                                                    JDM1
&NAME    L      15,AMOD&I                                        JDM1
         BSM    0,15                                             JDM1
AMOD&I   DC     A(CON&I+X'80000000')                             JDM1
CON&I    DS     0H                                               JDM1
.MEND    MEND                                                    JDM1
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8                   ADDR OF GETMAINED AREA
R9       EQU   9                   WORK REG
R10      EQU   10                  WORK REG
R11      EQU   11                  WORK & BAL REG
R12      EQU   12                  BASE REGISTER
R13      EQU   13
R14      EQU   14
R15      EQU   15
SP000    EQU   0
         SPACE 1
COPYREC  AMODE 31
COPYREC  RMODE 24
COPYREC  CSECT
         STM   R14,R12,12(13)
         LR    R12,R15
         USING COPYREC,R12
         LR    R15,R13
         LA    R13,SAVE
         ST    R15,4(R13)
         ST    R13,8(R15)
         SPACE
         OPEN  IN
         LA    R11,IN              GET ADDR OF DCB
         USING IHADCB,R11          TEMP ADDRESSABILITY
         TM    DCBOFLG,DCBOFOPN    GOOD OPEN ???
         BO    CONT1
         MODE  AMODE=24                                          JDM1
         COMMENT 'OPEN FOR DDNAME=IN FAILED '
         MODE  AMODE=31                                          JDM1
         B     ABORT                                             JDM3
CONT1    EQU   *
         LH    R0,DCBLRECL         REG 0 = LRECL
         ST    R0,GETSIZE          SAVE OFF AMOUNT FOR FREE
         GETMAIN RU,LV=(0),SP=SP000,LOC=BELOW  GET A BUFFER
         LR    R8,R1               REG 8 = BUFFER ADDRESS
         MVC   RECFM(1),DCBRECFM   SAVE RECFM
*        MVC   BLKSIZE(2),DCBBLKSI SAVE BLKSIZE                  JDM4
         MVC   LRECL(2),DCBLRECL   SAVE LRECL
         DROP  R11
         LA    R1,OUT              GET ADDR OF DCB
         USING IHADCB,R1           TEMP ADDRESSABILITY
         MVC   DCBRECFM(1),RECFM   STORE RECFM
*        MVC   DCBBLKSI(2),BLKSIZE STORE BLKSIZE                 JDM4
         MVC   DCBLRECL(2),LRECL   STORE LRECL
         DROP  R1
         LA    R1,IN               GET ADDR OF DCB
         USING IHADCB,R1           TEMP ADDRESSABILITY
         TM    DCBRECFM,DCBRECU    TEST FOR RECFM=U.
         DROP  R1
         BC    12,OPENOUT
         MVI   USW+1,0             PROCESS RECFM=U RECORDS.
OPENOUT  EQU   *
         OPEN  (OUT,OUTPUT)
         LA    R11,OUT             GET ADDR OF DCB
         USING IHADCB,R11          TEMP ADDRESSABILITY
         TM    DCBOFLG,DCBOFOPN    GOOD OPEN ???
         BO    CONT2
         DROP  R11
         MODE  AMODE=24                                          JDM1
         COMMENT 'OPEN FOR DDNAME=OUT FAILED '
         MODE  AMODE=31                                          JDM1
         BAL   R11,FREEMAIN
         B     ABORT                                             JDM3
         SPACE
CONT2    EQU   *
         SR    R6,R6               REG 6 = CURRENT RECORD NO
         SPACE
LOOP     BAL   R10,CONTROL
         LR    R4,R0               REG 4 = STARTING RECORD NO.
         BAL   R10,CONTROL
         LR    R5,R0               REG 5 = ENDING RECORD NO.
         SPACE
READ     EQU   *
         MODE  AMODE=24                                          JDM1
         GET   IN,(R8)             READ A RECORD.
         MODE  AMODE=31                                          JDM1
         LA    R6,1(R6)            REG 6 = RECORD NO.
         CR    R6,4                TEST FOR BEGINNING.
         BL    READ
         SPACE
USW      B     COPY
         LA    R1,IN               GET ADDR OF DCB
         USING IHADCB,R1           TEMP ADDRESSABILITY
         MVC   LRECL(2),DCBLRECL   SAVE LRECL
         DROP  R1
         LA    R1,OUT              GET ADDR OF DCB
         USING IHADCB,R1           TEMP ADDRESSABILITY
         MVC   DCBLRECL(2),LRECL   STORE LRECL
         DROP  R1
COPY     EQU   *
         MODE  AMODE=24                                          JDM1
         PUT   OUT,(8)             COPY THE RECORD.
         MODE  AMODE=31                                          JDM1
         CR    R6,R5               TEST FOR END.
         BL    READ
         MODE  AMODE=24                                          JDM1
         MSG   'COPIED RECORDS ',(DR,4,8),' THRU ',(DR,5,8)
         MODE  AMODE=31                                          JDM1
         B     LOOP
         SPACE
CONTROL  EQU   *
         CALL  SYSIN2              READ A NUMBER FROM //SYSIN.
         LTR   R15,R15
         BZ    CQ1
         MODE  AMODE=24                                          JDM1
         COMMENT '***NORMAL END***'
         MODE  AMODE=31                                          JDM1
CLOSE    EQU   *
         CLOSE (IN,,OUT)
         BAL   R11,FREEMAIN
         LA    R15,0               SUCCESSFUL RC
         ST    R15,RETCDE
RET      EQU   *
         L     R15,RETCDE          GET THE RETURN CODE
         L     R13,4(R13)
         ST    R15,16(,R13)        PUT IN RETURN CODE
         LM    R14,R12,12(R13)     RESTORE THE REGS
         BR    R14
         SPACE
*---------------------------------------------------------------------*
*        SUBROUTINES
*---------------------------------------------------------------------*
         SPACE
CQ1      EQU   *
         LM    R2,R3,0(R1)         R2 = ADDRESS  R3 = LENGTH
         BCTR  R3,0
         EX    R3,PACK
         CVB   R0,WORK             REG 0 = NUMBER
         BR    R10
         SPACE
EOF      EQU   *
         MODE  AMODE=24                                          JDM1
         COMMENT '***END OF FILE //IN.'
         MODE  AMODE=31                                          JDM1
         B     CLOSE
         SPACE
FREEMAIN EQU   *
         LR    R1,R8               GET ADDRESS OF AREA
         LH    R0,GETSIZE          GET AMOUNT
         FREEMAIN RU,LV=(R0),A=(R1),SP=SP000
         BR    R11
         SPACE 1
ABORT    EQU   *                                                 JDM3
         ABEND 69                                                JDM3
         SPACE 1
*---------------------------------------------------------------------*
*        DATA AREA
*---------------------------------------------------------------------*
         SPACE
PACK     PACK  WORK,0(0,2)
WORK     DC    D'0'
SAVE     DC    18F'0'
RETCDE   DC    F'0'                RETURN CODE
GETSIZE  DC    H'0'                AMOUNT OF GETMAIN
LRECL    DC    H'0'                LRECL OF INPUT
BLKSIZE  DC    H'00'               BLKSIZE OF INPUT
RECFM    DC    X'00'               RECFM OF INPUT
IN       DCB   DSORG=PS,MACRF=GM,EODAD=EOF,DDNAME=IN
OUT      DCB   DSORG=PS,MACRF=PM,DDNAME=OUT
         LTORG
         PRINT ON,NOGEN
         DCBD  DSORG=(PS)
         PRINT ON,GEN
         END
         TITLE ' S Y S I N 2 '
*---------------------------------------------------------------------*
*        SYSIN2 IS  A SUBROUTINE TO READ SYSIN CONTROL CARDS.         *
*                                                                     *
* WRITTEN - MR FRANK YATES, AEROSPACE CORPORATION, WHILE ASSIGNED     *
*           TO THE MULTIPURPOSE FACILITY, LOWRY AFB, CO.              *
*                                                                     *
* CHANGE LOG: INSTALLED FEB 1976, AIR FORCE DATA SVCS CENTER,         *
*             WASHINGTON D.C  OS/MVS.                                 *
*                                                                     *
*  21 JUNE 1981 - CLEANED UP CODE, JIM MARSHALL / AFDSC               *
*  15 JUNE 1991 - CLEANED UP CODE FURTHER. COMPILES IN 31BIT BUT MUST *
*                 GO BACK TO 24BIT (FOR NOW).                    JDM1 *
*  20 JUNE 1991 - CHANGED LABEL "IN" TO MATCH ITS DDNAME=SYSIN,       *
*                 COPYREC HAS A DDNAME=IN AND IT IS CONFUSING    JDM2 *
*  21 JUNE 1991 - BUG FIXED, LEAVE OUT DDNAME=SYSIN IN JOB AND        *
*                 IT SAYS "EOF ON INPUT" AND IMPLIES A SUCCESSFUL     *
*                 COPY. WE WILL ABEND.                           JDM3 *
*---------------------------------------------------------------------*
         SPACE
         MACRO                                                   JDM1
&NAME    MODE   &AMODE=31                                        JDM1
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-JDM1*
.*  SET ADDR MODE.  EITHER 'MODE AMODE=31' OR 'MODE AMODE=24'    JDM1*
.* NOTES: EXAMPLE - '    MODE AMODE=31  SET ADDR MODE TO 31      JDM1*
.*                  ' -MORE CODE -                               JDM1*
.*                  '    MODE AMODE=24  SET ADDR MODE TO 24      JDM1*
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-JDM1*
         SPACE  1                                                JDM1
         LCLC   &I                                               JDM1
         GBLA   &B                                               JDM1
&I       SETC   '&SYSNDX'                                        JDM1
         AIF    (&AMODE EQ 31).MOD31                             JDM1
&NAME    LA     15,RMOD&I                                        JDM1
         BSM    0,15                                             JDM1
RMOD&I   DS     0H                                               JDM1
         AGO    .MEND                                            JDM1
.MOD31   ANOP                                                    JDM1
&NAME    L      15,AMOD&I                                        JDM1
         BSM    0,15                                             JDM1
AMOD&I   DC     A(CON&I+X'80000000')                             JDM1
CON&I    DS     0H                                               JDM1
.MEND    MEND                                                    JDM1
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE
SYSIN2   AMODE 31
SYSIN2   RMODE 24
SYSIN2   CSECT
         STM   R14,R12,12(R13)
         LR    R12,R15
         USING SYSIN2,R12
         LR    R15,R13
         LA    R13,SAVE
         ST    R15,4(R13)
         ST    R13,8(R15)
STOPSW   BC    0,END
INITSW   BC    0,GO
         OPEN  SYSIN                                             JDM2
         LA    R15,SYSIN           GET DCB ADDR                  JDM2
         USING IHADCB,R15          GET ADDRESSABILITY
         TM    DCBOFLG,DCBOFOPN    SUCCESSFUL OPEN    ?
         DROP  R15                 TIDY UP
         BO    NOSTOP                                            JDM3
         ABEND 69                                                JDM3
         SPACE 1                                                 JDM3
NOSTOP   EQU   *                                                 JDM3
         MODE  AMODE=24                                          JDM1
         GET   SYSIN               READ THE FIRST CARD.          JDM2
         MODE  AMODE=31                                          JDM1
         LR    R7,R1
         BCTR  R7,0                REG 7 = SEARCH POINTER
         LA    R8,80(R7)           REG 8 = END OF CARD ADDRESS
         STM   R7,R8,POINTER
         MVI   INITSW+1,X'F0'
         SPACE
GO       LM    R7,R8,POINTER       RESTORE REGS 7 AND 8.
LOOP1    LA    R7,1(R7)
         CR    R7,R8               TEST FOR END OF CARD.
         BL    Q1
         MODE  AMODE=24                                          JDM1
         GET   SYSIN               READ ANOTHER CARD.            JDM2
         MODE  AMODE=31                                          JDM1
         LR    R7,R1               REG 7 = SEARCH POINTER
         LA    R8,80(R7)           REG 8 = END OF CARD ADDRESS
Q1       CLI   0(7),C' '
         BE    LOOP1
         LR    R5,R7               REG 5 = ADDRESS OF A WORD
         SPACE
LOOP2    LA    R7,1(R7)
         CR    R7,R8               TEST FOR END OF CARD.
         BNL   FOUNDIT
         CLI   0(7),C' '
         BNE   LOOP2
         SPACE
FOUNDIT  LR    R6,R7
         SR    R6,R5               REG 6 = LENGTH OF WORD
         STM   R5,R8,ADDRESS       LOAD PARMLIST AND SAVE REGS.
         SR    R15,R15             RETURN CODE = 0
         B     RETURN
         SPACE
EOF      CLOSE SYSIN               END OF FILE                   JDM2
         FREEPOOL SYSIN                                          JDM2
STOP     MVI   STOPSW+1,X'F0'      SHORT CIRCUIT FUTURE CALLS.
END      LA    R15,4               RETURN CODE = 4
RETURN   LA    R1,ADDRESS          REG 1 = PARMLIST ADDRESS
         L     R13,4(R13)
         LM    R2,R12,28(R13)      RESTORE REGS 2-12
         L     R14,12(R13)         RESTORE REG 14
         BR    R14                 EXIT - STAGE RIGHT
         SPACE
*---------------------------------------------------------------------*
*        DATA AREA
*---------------------------------------------------------------------*
         SPACE
SYSIN    DCB   DSORG=PS,MACRF=GL,EODAD=EOF,BUFNO=1,DDNAME=SYSIN  JDM2
         SPACE
SAVE     DC    18F'0'             SAVE AREA
ADDRESS  DC    F'0'               ADDRESS OF A WORD
LENGTH   DC    F'0'               LENGTH OF THE WORD
POINTER  DC    F'0'               SEARCH POINTER
ENDCARD  DC    F'0'               END OF CARD ADDRESS
         LTORG
         PRINT ON,NOGEN
         DCBD  DSORG=(PS)
         PRINT ON,GEN
         END
         TITLE ' M S G W R I T E '
*---------------------------------------------------------------------*
*        THIS IS THE WRITE ROUTINE USED BY THE MSG MACRO.             *
*                                                                     *
*                                                                     *
* WRITTEN : MR FRANK YATES, AEROSPACE CORPORATION, WHILE AT THE       *
*           MULTIPURPOSE FACILITY ( LOWRY AFB, CO) FOR USE ON         *
*           OS/MVT.                                                   *
*                                                                     *
* INSTALLED : JUNE 1976, AIR FORCE DATA SVCS CENTER, WASHINTON D.C.   *
*                                                                     *
* CHANGE LOG:                                                         *
*       JUNE 1978 - INSTALLED ON OS/MVS                               *
*       JUNE 1981 - CLEANED UP CODE AND DOCUMENTED, JIM MARSHALL      *
*       JUNE 1991 - THIS ASSEMBLES AND RUNS IN 24BIT MODE FOR NOW.    *
*                   COPYREC DOES A MODE MACRO GOING TO AMODE=24       *
*                   BEFORE COMING HERE.                          JDM1 *
*---------------------------------------------------------------------*
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE
         PRINT   GEN
MSGWRITE AMODE 24
MSGWRITE RMODE 24
MSGWRITE CSECT
         USING MSGWRITE,R15
         ST    R14,REG14           SAVE REG 14.
         STM   R1,R3,REGS          SAVE REGS 1, 2, AND 3.
         LR    R3,R15              REG 3 = BASE REG.
         DROP  R15
         USING MSGWRITE,R3
         LA    R15,MSGDCB          GET ADDR OF DCB
         USING IHADCB,R15          ESTABLISH ADDRESSABILITY
         TM    DCBOFLGS,DCBOFOPN   IS IT ALREADY OPEN ?
         DROP  R15                 TIDY UP
         BO    ISOPEN
         OPEN  (MSGDCB,OUTPUT)
ISOPEN   L     R2,REGS             R2=ADDRESS OF BLOCK DESCRIPTOR WORD
         WRITE W,SF,MSGDCB,(R2)    WRITE THE MESSAGE.
         CHECK W
         L     R14,REG14           RESTORE REG 14.
         SR    R15,R15             RETURN CODE = 0
         LA    R1,MSGDCB           RETURN DCB ADDRESS IN REG 1.
         LM    R2,R3,REGS+4        RESTORE REGS 2 AND 3.
         BR    R14                 RETURN.
         SPACE 2
***DATA AREA
REGS     DC    3F'0'
REG14    DC    F'0'
         ENTRY MSGDCB
MSGDCB   DCB   DSORG=PS,MACRF=W,RECFM=VBA,LRECL=137,BLKSIZE=141,       X
               DDNAME=MSG
         LTORG
         PRINT ON,NOGEN
         DCBD  DSORG=(PS)
         END
