./       ADD NAME=###DOC
         MACRO
         ###DOC
.*------------------------------------------------------------------*
.*       THIS MEMBER IS NOT REALLY A MACRO BUT A DOCUMENTATION      *
.*       MEMBER FOR THE MACRO MEMBER. THE REASON WHY I HAVE         *
.*       CHANGED THE './ ADD' CARDS TO '>< ADD' IS SO I CAN         *
.*       GENERATE MICROFICHE.  YOU NEED TO DO A MASS CHANGE OF      *
.*       '><' TO './'                                               *
.*                                                                  *
.*       JIM MARSHALL, CAPT, USAF-RET                               *
.*------------------------------------------------------------------*
         MEND
./       ADD NAME=$#SVCKP
         MACRO
&NAME    $#SVCKP
         PRINT OFF
.*------------------------------------------------------------------*
.*                                                                  *
.*       THIS MACRO REPRESENTS A SNEAKY WAY TO GET OUT OF           *
.*       SUPERVISOR STATE AND KEY=0. YOU SOMETIMES NEED THIS        *
.*       CAPABILITY IN SYSTEM PROGRAMMER TYPE FUNCTIONS. ONE        *
.*       MUST BE VERY CAREFUL TO ENSURE A USER DOES NOT LEARN       *
.*       OF THIS CAPABILITY (VIOLATES SECURITY). I CODED THIS       *
.*       MACRO SO WHEN WE HAVE SOURCE CODE, WE CAN CODE THIS        *
.*       MACRO AND NOT IMBED THE SENSITIVE CODE IN ALOT OF          *
.*       DIFFERENT PLACES.                                          *
.*                                                                  *
.*       JIM MARSHALL, CAPT, USAF-RET                               *
.*------------------------------------------------------------------*
&NAME    L     R0,=C'ZZLQ'         SETUP R0
         L     R1,=F'0'            SETUP R1
         SVC   255                 GO DO IT
         PRINT ON
         MEND
./       ADD NAME=$#SVCKS
         MACRO
&NAME    $#SVCKS
         PRINT OFF
.*------------------------------------------------------------------*
.*                                                                  *
.*       THIS MACRO REPRESENTS A SNEAKY WAY TO GET YOURSELF INTO    *
.*       SUPERVISOR STATE AND KEY=0. YOU SOMETIMES NEED THIS        *
.*       CAPABILITY IN SYSTEM PROGRAMMER TYPE FUNCTIONS. ONE        *
.*       MUST BE VERY CAREFUL TO ENSURE A USER DOES NOT LEARN       *
.*       OF THIS CAPABILITY (VIOLATES SECURITY). I CODED THIS       *
.*       MACRO SO WHEN WE HAVE SOURCE CODE, WE CAN CODE THIS        *
.*       MACRO AND NOT IMBED THE SENSITIVE CODE IN ALOT OF          *
.*       DIFFERENT PLACES.                                          *
.*                                                                  *
.*       JIM MARSHALL, CAPT, USAF-RET                               *
.*------------------------------------------------------------------*
&NAME    L     R0,=C'ZZLQ'         SETUP R0
         L     R1,=F'1'            SETUP R1
         SVC   255                 GO DO IT
         PRINT ON
         MEND
./       ADD NAME=$REGS
         MACRO
         $REGS
         GBLB  &PRORG
         AIF   (&PRORG).MEX2
&PRORG   SETB  1
 SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
 SPACE
REG0     EQU   0
REG1     EQU   1
REG2     EQU   2
REG3     EQU   3
REG4     EQU   4
REG5     EQU   5
REG6     EQU   6
REG7     EQU   7
REG8     EQU   8
REG9     EQU   9
REG10    EQU   10
REG11    EQU   11
REG12    EQU   12
REG13    EQU   13
REG14    EQU   14
REG15    EQU   15
 SPACE
.MEX2    ANOP
       MEND
./       ADD NAME=@
         MACRO
         @     &LETTERS
.* THIS MACRO IS USEFUL FOR INSERTING INTERESTING BLOCK-LETTER
.* COMMENTS INTO YOUR ASSEMBLY PROGRAM.  TRY IT--YOU'LL LIKE IT.
.**********************************************************************
.*
.* AIR FORCE DATA SERVICES CENTER--SYSTEMS SUPPORT DIRECTORATE
.* ROOM 1D987, THE PENTAGON, WASHINGTON, DC 20330
.* TELEPHONE: (AUTOVON) 225-1274/2478/1889
.*     COMMERCIAL (703) 695-1274/2478/1889
.*
.**********************************************************************
.* DATE INSTALLED: 790523
.**********************************************************
.** => CHANGE LOG: ENTER AUTHOR, DATE, SUMMARY OF CHANGE **
.**********************************************************
.* DATE OF LAST CHANGE:
.*
.**********************************************************************
         LCLC  &A(50)
         LCLC  &B(62),&C(62),&D(62),&E(62),&F(62),&G(62)
         LCLA  &I,&J,&K
&B(01)   SETC  'A'
&B(02)   SETC  'B'
&B(03)   SETC  'C'
&B(04)   SETC  'D'
&B(05)   SETC  'E'
&B(06)   SETC  'F'
&B(07)   SETC  'G'
&B(08)   SETC  'H'
&B(09)   SETC  'I'
&B(10)   SETC  'J'
&B(11)   SETC  'K'
&B(12)   SETC  'L'
&B(13)   SETC  'M'
&B(14)   SETC  'N'
&B(15)   SETC  'O'
&B(16)   SETC  'P'
&B(17)   SETC  'Q'
&B(18)   SETC  'R'
&B(19)   SETC  'S'
&B(20)   SETC  'T'
&B(21)   SETC  'U'
&B(22)   SETC  'V'
&B(23)   SETC  'W'
&B(24)   SETC  'X'
&B(25)   SETC  'Y'
&B(26)   SETC  'Z'
&B(27)   SETC  '#'
&B(28)   SETC  ','
&B(29)   SETC  '$'
&B(30)   SETC  '0'
&B(31)   SETC  '1'
&B(32)   SETC  '2'
&B(33)   SETC  '3'
&B(34)   SETC  '4'
&B(35)   SETC  '5'
&B(36)   SETC  '6'
&B(37)   SETC  '7'
&B(38)   SETC  '8'
&B(39)   SETC  '9'
&B(40)   SETC  '@'
&B(41)   SETC  '%'
&B(42)   SETC  '*'
&B(43)   SETC  '/'
&B(44)   SETC  '-'
&B(45)   SETC  '('
&B(46)   SETC  ')'
&B(47)   SETC  '&&'
&B(48)   SETC  '+'
&B(49)   SETC  '_'
&B(50)   SETC  'Ö'
&B(51)   SETC  '×'
&B(52)   SETC  '>'
&B(53)   SETC  ':'
&B(54)   SETC  ';'
&B(55)   SETC  '.'
&B(56)   SETC  '?'
&B(57)   SETC  '"'
&B(58)   SETC  '='
&B(59)   SETC  '!'
&B(60)   SETC  '<'
&B(61)   SETC  '^'
&B(62)   SETC  ' '
&C(01)   SETC  '  A  '
&D(01)   SETC  ' A A '
&E(01)   SETC  'A   A'
&F(01)   SETC  'AAAAA'
&G(01)   SETC  'A   A'
&C(02)   SETC  'BBBB '
&D(02)   SETC  'B   B'
&E(02)   SETC  'BBBB '
&F(02)   SETC  'B   B'
&G(02)   SETC  'BBBB '
&C(03)   SETC  ' CCCC'
&D(03)   SETC  'C    '
&E(03)   SETC  'C    '
&F(03)   SETC  'C    '
&G(03)   SETC  ' CCCC'
&C(04)   SETC  'DDDD '
&D(04)   SETC  'D   D'
&E(04)   SETC  'D   D'
&F(04)   SETC  'D   D'
&G(04)   SETC  'DDDD '
&C(05)   SETC  'EEEEE'
&D(05)   SETC  'E    '
&E(05)   SETC  'EEEE '
&F(05)   SETC  'E    '
&G(05)   SETC  'EEEEE'
&C(06)   SETC  'FFFFF'
&D(06)   SETC  'F    '
&E(06)   SETC  'FFFF '
&F(06)   SETC  'F    '
&G(06)   SETC  'F    '
&C(07)   SETC  ' GGGG'
&D(07)   SETC  'G    '
&E(07)   SETC  'G  GG'
&F(07)   SETC  'G   G'
&G(07)   SETC  ' GGGG'
&C(08)   SETC  'H   H'
&D(08)   SETC  'H   H'
&E(08)   SETC  'HHHHH'
&F(08)   SETC  'H   H'
&G(08)   SETC  'H   H'
&C(09)   SETC  ' III '
&D(09)   SETC  '  I  '
&E(09)   SETC  '  I  '
&F(09)   SETC  '  I  '
&G(09)   SETC  ' III '
&C(10)   SETC  '  JJJ'
&D(10)   SETC  '   J '
&E(10)   SETC  '   J '
&F(10)   SETC  'J  J '
&G(10)   SETC  ' JJ  '
&C(11)   SETC  'K  K '
&D(11)   SETC  'K K  '
&E(11)   SETC  'KK   '
&F(11)   SETC  'K K  '
&G(11)   SETC  'K  K '
&C(12)   SETC  'L    '
&D(12)   SETC  'L    '
&E(12)   SETC  'L    '
&F(12)   SETC  'L    '
&G(12)   SETC  'LLLLL'
&C(13)   SETC  'M   M'
&D(13)   SETC  'MM MM'
&E(13)   SETC  'M M M'
&F(13)   SETC  'M   M'
&G(13)   SETC  'M   M'
&C(14)   SETC  'N   N'
&D(14)   SETC  'NN  N'
&E(14)   SETC  'N N N'
&F(14)   SETC  'N  NN'
&G(14)   SETC  'N   N'
&C(15)   SETC  'OOOOO'
&D(15)   SETC  'O   O'
&E(15)   SETC  'O   O'
&F(15)   SETC  'O   O'
&G(15)   SETC  'OOOOO'
&C(16)   SETC  'PPPP '
&D(16)   SETC  'P   P'
&E(16)   SETC  'PPPP '
&F(16)   SETC  'P    '
&G(16)   SETC  'P    '
&C(17)   SETC  ' QQQ '
&D(17)   SETC  'Q   Q'
&E(17)   SETC  'Q Q Q'
&F(17)   SETC  'Q  Q '
&G(17)   SETC  ' QQ Q'
&C(18)   SETC  'RRRR '
&D(18)   SETC  'R   R'
&E(18)   SETC  'RRRR '
&F(18)   SETC  'R  R '
&G(18)   SETC  'R   R'
&C(19)   SETC  ' SSSS'
&D(19)   SETC  'S    '
&E(19)   SETC  ' SSS '
&F(19)   SETC  '    S'
&G(19)   SETC  'SSSS '
&C(20)   SETC  'TTTTT'
&D(20)   SETC  '  T  '
&E(20)   SETC  '  T  '
&F(20)   SETC  '  T  '
&G(20)   SETC  '  T  '
&C(21)   SETC  'U   U'
&D(21)   SETC  'U   U'
&E(21)   SETC  'U   U'
&F(21)   SETC  'U   U'
&G(21)   SETC  ' UUU '
&C(22)   SETC  'V   V'
&D(22)   SETC  'V   V'
&E(22)   SETC  'V   V'
&F(22)   SETC  ' V V '
&G(22)   SETC  '  V  '
&C(23)   SETC  'W   W'
&D(23)   SETC  'W   W'
&E(23)   SETC  'W W W'
&F(23)   SETC  'WW WW'
&G(23)   SETC  'W   W'
&C(24)   SETC  'X   X'
&D(24)   SETC  ' X X '
&E(24)   SETC  '  X  '
&F(24)   SETC  ' X X '
&G(24)   SETC  'X   X'
&C(25)   SETC  'Y   Y'
&D(25)   SETC  ' Y Y '
&E(25)   SETC  '  Y  '
&F(25)   SETC  '  Y  '
&G(25)   SETC  '  Y  '
&C(26)   SETC  'ZZZZZ'
&D(26)   SETC  '   Z '
&E(26)   SETC  '  Z  '
&F(26)   SETC  ' Z   '
&G(26)   SETC  'ZZZZZ'
&C(27)   SETC  ' # # '
&D(27)   SETC  '#####'
&E(27)   SETC  ' # # '
&F(27)   SETC  '#####'
&G(27)   SETC  ' # # '
&C(28)   SETC  '     '
&D(28)   SETC  '     '
&E(28)   SETC  '     '
&F(28)   SETC  ' ,,  '
&G(28)   SETC  '  ,  '
&C(29)   SETC  ' $$$$'
&D(29)   SETC  '$ $  '
&E(29)   SETC  ' $$$ '
&F(29)   SETC  '  $ $'
&G(29)   SETC  '$$$$ '
&C(30)   SETC  ' 000 '
&D(30)   SETC  '0   0'
&E(30)   SETC  '0   0'
&F(30)   SETC  '0   0'
&G(30)   SETC  ' 000 '
&C(31)   SETC  '  1  '
&D(31)   SETC  ' 11  '
&E(31)   SETC  '  1  '
&F(31)   SETC  '  1  '
&G(31)   SETC  ' 111 '
&C(32)   SETC  '2222 '
&D(32)   SETC  '    2'
&E(32)   SETC  '   2 '
&F(32)   SETC  '  2  '
&G(32)   SETC  '22222'
&C(33)   SETC  '3333 '
&D(33)   SETC  '    3'
&E(33)   SETC  ' 333 '
&F(33)   SETC  '    3'
&G(33)   SETC  '3333 '
&C(34)   SETC  '4  4 '
&D(34)   SETC  '4  4 '
&E(34)   SETC  '44444'
&F(34)   SETC  '   4 '
&G(34)   SETC  '   4 '
&C(35)   SETC  '55555'
&D(35)   SETC  '5    '
&E(35)   SETC  '5555 '
&F(35)   SETC  '    5'
&G(35)   SETC  '5555 '
&C(36)   SETC  ' 666 '
&D(36)   SETC  '6    '
&E(36)   SETC  '6666 '
&F(36)   SETC  '6   6'
&G(36)   SETC  ' 666 '
&C(37)   SETC  '77777'
&D(37)   SETC  '   7 '
&E(37)   SETC  '  7  '
&F(37)   SETC  '  7  '
&G(37)   SETC  '  7  '
&C(38)   SETC  ' 888 '
&D(38)   SETC  '8   8'
&E(38)   SETC  ' 888 '
&F(38)   SETC  '8   8'
&G(38)   SETC  ' 888 '
&C(39)   SETC  ' 999 '
&D(39)   SETC  '9   9'
&E(39)   SETC  ' 9999'
&F(39)   SETC  '    9'
&G(39)   SETC  ' 999 '
&C(40)   SETC  '@@@@ '
&D(40)   SETC  '    @'
&E(40)   SETC  '@@@ @'
&F(40)   SETC  '@ @ @'
&G(40)   SETC  '@@@@ '
&C(41)   SETC  '%%  %'
&D(41)   SETC  '   % '
&E(41)   SETC  '  %  '
&F(41)   SETC  ' %   '
&G(41)   SETC  '%  %%'
&C(42)   SETC  '* * *'
&D(42)   SETC  ' *** '
&E(42)   SETC  '*****'
&F(42)   SETC  ' *** '
&G(42)   SETC  '* * *'
&C(43)   SETC  '    /'
&D(43)   SETC  '   / '
&E(43)   SETC  '  /  '
&F(43)   SETC  ' /   '
&G(43)   SETC  '/    '
&C(44)   SETC  '     '
&D(44)   SETC  '     '
&E(44)   SETC  '-----'
&F(44)   SETC  '     '
&G(44)   SETC  '     '
&C(45)   SETC  '   ( '
&D(45)   SETC  '  (  '
&E(45)   SETC  '  (  '
&F(45)   SETC  '  (  '
&G(45)   SETC  '   ( '
&C(46)   SETC  ' )   '
&D(46)   SETC  '  )  '
&E(46)   SETC  '  )  '
&F(46)   SETC  '  )  '
&G(46)   SETC  ' )   '
&C(47)   SETC  ' &&&&&& '
&D(47)   SETC  '&&    '
&E(47)   SETC  ' &&&&  '
&F(47)   SETC  '&&   &&'
&G(47)   SETC  ' &&&&&&&&'
&C(48)   SETC  '  +  '
&D(48)   SETC  '  +  '
&E(48)   SETC  '+++++'
&F(48)   SETC  '  +  '
&G(48)   SETC  '  +  '
&C(49)   SETC  '     '
&D(49)   SETC  '     '
&E(49)   SETC  '     '
&F(49)   SETC  '     '
&G(49)   SETC  '_____'
&C(50)   SETC  '  *  '
&D(50)   SETC  ' C*C '
&E(50)   SETC  'C *  '
&F(50)   SETC  ' C*C '
&G(50)   SETC  '  *  '
&C(51)   SETC  '  ×  '
&D(51)   SETC  '  ×  '
&E(51)   SETC  '  ×  '
&F(51)   SETC  '  ×  '
&G(51)   SETC  '  ×  '
&C(52)   SETC  ' >   '
&D(52)   SETC  '  >  '
&E(52)   SETC  '   > '
&F(52)   SETC  '  >  '
&G(52)   SETC  ' >   '
&C(53)   SETC  ' ..  '
&D(53)   SETC  ' ..  '
&E(53)   SETC  '     '
&F(53)   SETC  ' ..  '
&G(53)   SETC  ' ..  '
&C(54)   SETC  ' ..  '
&D(54)   SETC  ' ..  '
&E(54)   SETC  '     '
&F(54)   SETC  ' ,,  '
&G(54)   SETC  '  ,  '
&C(55)   SETC  '     '
&D(55)   SETC  '     '
&E(55)   SETC  '     '
&F(55)   SETC  ' ..  '
&G(55)   SETC  ' ..  '
&C(56)   SETC  ' ??? '
&D(56)   SETC  '?   ?'
&E(56)   SETC  '   ? '
&F(56)   SETC  '  ?  '
&G(56)   SETC  '  ?  '
&C(57)   SETC  ' '' '' '
&D(57)   SETC  '     '
&E(57)   SETC  '     '
&F(57)   SETC  '     '
&G(57)   SETC  '     '
&C(58)   SETC  '     '
&D(58)   SETC  '====='
&E(58)   SETC  '     '
&F(58)   SETC  '====='
&G(58)   SETC  '     '
&C(59)   SETC  ' ××  '
&D(59)   SETC  ' ××  '
&E(59)   SETC  ' ××  '
&F(59)   SETC  '     '
&G(59)   SETC  ' ..  '
&C(60)   SETC  '   < '
&D(60)   SETC  '  <  '
&E(60)   SETC  ' <   '
&F(60)   SETC  '  <  '
&G(60)   SETC  '   < '
&C(61)   SETC  '     '
&D(61)   SETC  '     '
&E(61)   SETC  '^^^^^'
&F(61)   SETC  '    ^'
&G(61)   SETC  '     '
&C(62)   SETC  '     '
&D(62)   SETC  '     '
&E(62)   SETC  '     '
&F(62)   SETC  '     '
&G(62)   SETC  '     '
&J       SETA  1
&K       SETA  1
         AIF   ('&LETTERS'(1,1) NE '''').JLOOP
.LLOOP   ANOP
&J       SETA  &J+1
.JLOOP   AIF   (K'&LETTERS LT &J).END
         AIF   (K'&LETTERS EQ &J AND '&LETTERS'(&J,1) EQ '''').END
&I       SETA  1
.COMP    AIF   ('&B(&I)' EQ '&LETTERS'(&J,1)).FND
&I       SETA  &I+1
         AIF   (&I LT 62).COMP
.FND     ANOP
&A(&K)   SETC  '&C(&I)'
&A(&K+1) SETC  '&D(&I)'
&A(&K+2) SETC  '&E(&I)'
&A(&K+3) SETC  '&F(&I)'
&A(&K+4) SETC  '&G(&I)'
&K       SETA  &K+5
         AIF   (&K LT 51).LLOOP
.END     ANOP
         SPACE 2
         MNOTE *,'******************************************************
               ****************'
         MNOTE *,' '
&I       SETA  1
.REDO    MNOTE *,' &A(&I)  &A(&I+5)  &A(&I+10)  &A(&I+15)  &A(&I+20)  &*
               A(&I+25)  &A(&I+30)  &A(&I+35)  &A(&I+40)  &A(&I+45)'
&I       SETA  &I+1
         AIF   (&I LT 6).REDO
         MNOTE *,' '
         MNOTE *,'******************************************************
               ****************'
         MEXIT
         SPACE 4
         MEND
./       ADD NAME=CAPS
         MACRO
         CAPS
.**********************************************************************
.*       THIS MACRO INCLUDED IN THE DEFINE CONSTANT ARE OF A          *
.*       PROGRAM ALLOWS THE TRANSLATION OF LOWERCASE CHARACTERS       *
.*       TO UPPERCASE CHARACTERS. CAPS IS USED AS THE SECOND OPERAND  *
.*       OF THE TRANSLATE (TR) INSTRUCTION. THUS TO TRANSLATE         *
.*       THE DATA AREA CALLED 'FIELD' CODE:                           *
.*                 TR    FIELD,CAPS                                   *
.*       THE MACRO CODED IS                                           *
.*                 CAPS                                               *
.*       NOTE: THE MACRO GENERATES ITS OWN CONSTANT NAME OF'CAPS'.    *
.**********************************************************************
CAPS     DC CL256' '         TRANSLATE TABLE TO MAKE CAPITALS
         ORG CAPS+C'A'
         DC C'ABCDEFGHI'
         ORG CAPS+129        SMALL A
         DC C'ABCDEFGHI'
         ORG CAPS+C'J'
         DC C'JKLMNOPQR'
         ORG CAPS+145        SMALL J
         DC C'JKLMNOPQR'
         ORG CAPS+C'S'
         DC C'STUVWXYZ'
         ORG CAPS+162        SMALL S
         DC C'STUVWXYZ'
         ORG CAPS+C'0'
         DC C'0123456789'
         ORG CAPS+C'#'
         DC C'#'
         ORG CAPS+C'$'
         DC C'$'
         ORG CAPS+C'*'
         DC C'*'
         ORG CAPS+C'/'
         DC C'/'
         ORG CAPS+C'('
         DC C'('
         ORG CAPS+C')'
         DC C')'
         ORG CAPS+C'.'
         DC C'.'
         ORG CAPS+C','
         DC C','
         ORG CAPS+C'+'
         DC C'+'
         ORG CAPS+C'-'
         DC C'-'
         ORG CAPS+C'='
         DC C'='
         ORG CAPS+C''''
         DC C''''
         ORG CAPS+C'&&'
         DC C'&&'
         ORG
         MEND
./       ADD NAME=CLOSEIF
         MACRO
&NAME    CLOSEIF &OP
.**********************************************************************
.*       THIS MACRO WILL CLOSE THE SPECIFIED DATASET(S) IF THE ONE    *
.*  WAS PREVIOUSLY OPENED. CLOSEIF MAY REPLACE THE "CLOSE" MACRO IN   *
.*  PLACES WHERE THE DATASET(S) MAY OR MAY NOT BE OPEN.               *
.*    THE MACRO IS CODED                                              *
.*                 -NAME-    CLOSEIF  OPERAND                         *
.*   WHERE                                                            *
.*       OPERAND   A SUBLIST OF DCB'S AND THE OPTIONS AS FOR THE      *
.*                 CLOSE MACRO.                                       *
.*   **** WARNING ****     CLOSE TYPE=T  IS NOT SUPPORTED.            *
.**********************************************************************
.*  THIS MACRO CLOSES A DATA SET IF IT IS OPEN.
&NAME    TM &OP(1)+48,X'10'  TEST FOR DCB OPEN.
         BZ CIF&SYSNDX
         CLOSE &OP
CIF&SYSNDX EQU *
         MEND
./       ADD NAME=COMMENT
         MACRO
&NAME    COMMENT  &COM
.**********************************************************************
.*  WRITE A COMMENT TO THE  //MSG DD SYSOUT=A  DATASET.               *
.*            THIS MACRO PERMITS COMMENTS TO BE WRITTEN TO THE        *
.*       //MSG (SYSOUT) DATASET INTERSPERSED WITH THE OUTPUT (IF ANY) *
.*       FROM "MSG" MACROS. IF NO FORMATTING SERVICES ARE REQUIRED,   *
.*       THIS MACRO SHOULD BE USED IN PLACE OF THE "MSG" MACRO        *
.*       BECAUSE IT ENTAILS MINIMAL OVERHEAD. REGISTERS 0, 1, 14,     *
.*       AND 15 ARE USED BY THE MACRO AND ARE NOT RESTORED.           *
.*        -NAME-   COMMENT '  ANY COMMENT UP TO 132 BYTES IN LENGTH'  *
.*       NOTES:                                                       *
.*       1. APOSTROPHIES ARE THE DELIMITERS OF THE COMMENT, WHICH     *
.*          MAY CONTAIN A PRINTABLE CHARACTER. APOSTROPHIES AND       *
.*          AMPERSANDS (&) INSIDE THE COMMENT MUST BE DOUBLED.        *
.*       2. THE COMMENT MACRO WRITES BY CALLING THE SFI SUBROUTINE    *
.*          "MSGWRITE".                                               *
.**********************************************************************
         LCLA &BLK,&REC
         AIF ('&COM' EQ '').END
&REC     SETA  3+K'&COM      RECORD LENGTH
&BLK     SETA  4+&REC        BLOCK LENGTH
&NAME    L 15,=V(MSGWRITE)   REG 15 = ENTRY POINT OF MSGWRITE ROUTINE
         CNOP 0,4
         BAL 1,COMM&SYSNDX   REG 1 = MESSAGE ADDRESS
         DC H'&BLK,0,&REC,0',C'0',C&COM     MESSAGE
COMM&SYSNDX BALR 14,15       LINK TO MSGWRITE ROUTINE.
.END     MEND
./       ADD NAME=DFLOAT
         MACRO
&NAME    DFLOAT &I
.**********************************************************************
.*
.*  CONVERT A FULL-WORD INTEGER TO A LONG-PRECISION FLOATING POINT NBR
.*
.*  FUNCTIONS IDENTICALLY TO OS/360 FORTRAN DFLOAT FUNCTION
.*
.*  '&I' SPECIFIES THE ADDRESS OF A FULL WORD CONTAINING THE INTEGER
.*       VALUE TO BE CONVERTED.  CAN BE WRITTEN AS AN RX-TYPE ADDRESS
.*       OR CAN BE SUPPLIED IN R2-R12.
.*
.*  RESULTING VALUE RETURNED IN FR0.
.*
.*  USES R0,R1,R14 AND R15. THESE REGISTERS ARE NOT SAVED.
.*
.**********************************************************************
&NAME    FLOAT &I
         MEND
./       ADD NAME=EDIT
         MACRO
&NAME    EDIT &FROM,&TO,&PAT
.**********************************************************************
.*       EDIT THE CONTENTS OF A FULL WORD OR A REGISTER. THIS MACRO
.*  CONVERTS THE VALUE TO PACKED DECIMAL, MOVES THE EDITING PATTERN   *
.*  INTO THE "TO" FIELD, AND EDITS.                                   *
.*      THE MACRO IS                                                  *
.*                 -NAME-    EDIT  FROM,TO,PATTERN                    *
.*                 -NAME-    EDIT  (R1),D1(L,B1),PATTERN              *
.*                 -NAME-    EDIT  D1(X1,B1),D2(L,B2),PATTERN         *
.*       WHERE                                                        *
.*         FROM -  ADDRESS OF THE FULLWORD OR NAME OF THE REGISTER    *
.*                 CONTAINING THE DATA TO BE EDITED. REGISTER NAME    *
.*                 ENCLOSED IN PARENTHESES.                           *
.*         TO    - FIELD FOR THE EDITED RESULT.                       *
.*         PATTERN HEX CHARACTERS DEFINING THE EDITING PATTERN.       *
.*  EXAMPLES:                                                         *
.*       EDIT  DAT1,OUT1,40202120       EDIT INTEGER CONTENTS OF FULL *
.*                                     WORD AT DAT1 INTO FIELD OUT1   *
.*                                     WITH PATTERN X'40202120'.      *
.*       EDIT  (5),OUT2,4020206B20212060  EDIT CONTENTS OF REGISTER 5 *
.*                                     INTO FIELD OUT2 WITH PATTERN   *
.*                                     X'4020206B20212060'. NOTE MINUS*
.*                                     SIGN AT END OF PATTERN WHICH   *
.*                                     WILL BE PRINTED IF NUMBER IS   *
.*                                     NEGATIVE.                      *
.*  NOTES: 1. THE FIRST CALL OF THE MACRO CREATES A DOUBLE-WORD WORK  *
.*            AREA CALLED "EDITXX".                                   *
.*         2. THE FORMAT OF THE FIRST OPERAND IS CHANGED TO PACKED-   *
.*            DECIMAL AND STORED IN EDITXX.                           *
.*         3. THE "TO" FIELD DEFINITON MUST INCLUDE LENGTH. ANY EX-   *
.*            PRESSION WHICH IS VALID FOR THE FIRST OPERAND OF A MVC O*
.*            ED INSTRUCTION IS OK.                                   *
.*         4. IF "FROM" IS NOT A REGISTER, ANY EXPRESSION WHICH IS    *
.*            VALID FOR A LOAD INSTRUCTUON IS OK. IF IT IS A REGISTER *
.*            ANY EXPRESSION WHICH HAS AN ABSOLUTE VALUE EQUAL TO A   *
.*            REGISTER NUMBER IS OK.                                  *
.*         5. AFTER EXECUTION OF THE MACRO REGISTER 0 CONTAINS THE    *
.*            INTEGER VALUE (FROM) BEING EDITED. NO OTHER REGISTER IS *
.*            DISTURBED (NOT EVEN 1, 14, OR 15).                      *
.**********************************************************************
         GBLB &EDIT
         LCLA &A,&N,&WDISP
         LCLC &C
&A       SETA 0-1            &A = LOOP INDEX
.* COUNT THE DIGIT SELECTORS.
.LOOP    ANOP
&A       SETA &A+2           ADVANCE TO NEXT BYTE.
         AIF (&A GT K'&PAT).ENDPAT     TEST FOR END OF PATTERN.
&C       SETC '&PAT'(&A,1)   GET A TOP NIBBLE.
         AIF ('&C' NE '2').LOOP
&N       SETA &N+1           COUNT A DIGIT SELECTOR.
         AGO .LOOP
.ENDPAT  ANOP
&WDISP   SETA 8-(&N+1)/2     &WDISP = WORK DISPLACEMENT
.* GENERATE WORK AREA.
         AIF (&EDIT).GO
&EDIT    SETB 1
         B EDITXX+8
EDITXX   DC D'0'             WORK AREA FOR EDIT MACRO
.GO      ANOP
&C       SETC '&FROM'(1,1)
         AIF ('&C' EQ '(').REG    TEST FORM OF &FROM.
&NAME    L 0,&FROM
         CVD 0,EDITXX
         AGO .Q1
.REG     ANOP
&A       SETA K'&FROM-2
&C       SETC '&FROM'(2,&A)  &C = REGISTER NAME
&NAME    CVD &C,EDITXX
.Q1      MVC &TO,=X'&PAT'
         ED &TO,EDITXX+&WDISP
         MEND
./       ADD NAME=FLOAT
         MACRO
&NAME    FLOAT &I
.**********************************************************************
.*
.*  CONVERT A FULL-WORD INTEGER TO A SHORT-PRECISION FLOATING POINT NBR
.*
.*  FUNCTIONS IDENTICALLY TO OS/360 FORTRAN FLOAT FUNCTION
.*
.*  '&I' SPECIFIES THE ADDRESS OF A FULL WORD CONTAINING THE INTEGER
.*       VALUE TO BE CONVERTED.  CAN BE WRITTEN AS AN RX-TYPE ADDRESS
.*       OR CAN BE SUPPLIED IN R2-R12.
.*
.*  RESULTING VALUE RETURNED IN FRO.
.*
.*  USES R0,R1,R14 AND R15.  THESE REGISTERS ARE NOT SAVED.
.*
.**********************************************************************
         GBLC  &FL1
         GBLB  &FL2
         AIF   ('&I' NE '').GOOD
         MNOTE 12,'MISSING OPERAND'
         MEXIT
.GOOD    ANOP
&NAME    DS    0H
         AIF   ('&I'(1,1) EQ '(').REG
         L     0,&I                     VALUE OF ARG
         AGO   .LOAD15
.REG     ANOP
         L     0,0&I                    VALUE OF ARG
.LOAD15  ANOP
         AIF   (&FL2 NE 0).NOT1ST
         L     15,=A(FL&SYSNDX)         ADDR OF LOCAL SUBRTNE
         AGO   .FIRST
.NOT1ST  ANOP
         L     15,=A(FL&FL1)            ADDR OF LOCAL SUBRTNE
.FIRST   ANOP
         BALR  14,15                    GO TO LOCAL SUBRTNE
         AIF   (&FL2 NE 0).NOGEN
&FL1     SETC  '&SYSNDX'
&FL2     SETB  1
         USING FL&FL1,15
         B     X&SYSNDX                 BR AROUND GENERATED SUBRTNE
*
* LOCAL SUBROUTINE GENERATED BY 1ST APPEARANCE OF 'FLOAT' OR 'DFLOAT'
*
FL&FL1   DS    0H                       ALIGNMENT
         MVC   B&SYSNDX.(4),C&SYSNDX    INITIALIZE WORK AREA
         LPR   1,0                      MAKE ARG POSITIVE FOR NOW
         ST    1,B&SYSNDX+4             INSERT FRACTION
         LTR   0,0                      Q. ARG ORIGINALLY NEGATIVE
         BNL   A&SYSNDX                 A. NO
         OI    B&SYSNDX,X'80'           A. YES, INSERT NEGATIVE SIGN
A&SYSNDX LD    0,B&SYSNDX               PICK UP LONG PREC UNNORMALIZED
         AD    0,C&SYSNDX               NORMALIZE THE RESULT
         BR    14                       RETURN WITH RESULT IN FR0
B&SYSNDX DS    D                        WORK AREA
C&SYSNDX DC    X'4E00000000000000'      LONG FLOATING POINT ZERO
X&SYSNDX DS    0H
         DROP  15
.NOGEN   ANOP
         MEND
./       ADD NAME=IFIX
         MACRO
&NAME    IFIX  &F
.**********************************************************************
.*
.*  CONVERT A SHORT-PRECISION FLOATING POINT NUMBER TO A FULL-WORD
.*       INTEGER.
.*
.*  FUNCTIONS IDENTICALLY TO OS/360 FORTRAN IFIX FUNCTION
.*
.*  '&F' SPECIFIES THE ADDRESS OF A FULL WORD CONTAINING THE FLOATING
.*       POINT VALUE TO BE CONVERTED.  CAN BE WRITTEN AS AN RX-TYPE
.*       ADDRESS OR CAN BE SUPPLIED IN R2-R12.
.*
.*  RESULTING VALUE CONTAINED IN R0.
.*
.*
.*  USES R0,R1,R14 AND R15. THESE REGISTERS NOT SAVED.
.*
.**********************************************************************
         GBLC  &FX1
         GBLB  &FX2
         AIF   ('&F' NE '').GOOD
         MNOTE 12,'MISSING OPERAND'
         MEXIT
.GOOD    ANOP
&NAME    DS    0H
         SDR   0,0                      CLEAR DOUBLE
         AIF   ('&F'(1,1) EQ '(').REG
         LE    0,&F                     VALUE OF ARG
         AGO   .LOAD15
.REG     ANOP
         LE    0,0&F                    VALUE OF ARG
.LOAD15  ANOP
         AIF   (&FX2 NE 0).NOT1ST
         L     15,=A(FX&SYSNDX)         ADDR OF LOCAL SUBRTNE
         AGO   .FIRST
.NOT1ST  ANOP
         L     15,=A(FX&FX1)            ADDR OF LOCAL SUBRTNE
.FIRST   ANOP
         BALR  14,15                    GO TO LOCAL SUBRTNE
         AIF   (&FX2 NE 0).NOGEN
&FX1     SETC  '&SYSNDX'
&FX2     SETB  1
         USING FX&FX1,15
         B     X&SYSNDX                 BR AROUND GENERATED SUBRTNE
*
* LOCAL SUBROUTINE GENERATED BY 1ST APPEARANCE OF 'IFIX'
*
FX&FX1   DS    0H
         AW    0,C&SYSNDX               UNNORMALIZE THE ARG
         STD   0,B&SYSNDX               X
         L     0,B&SYSNDX+4             GET LOW-ORDER OF FRACTION
         LTDR  0,0                      TEST SIGN
         BNL   A&SYSNDX                 NOT LESS THAN ZERO
         LCR   0,0                      COMPLEMENT THE RESULT
A&SYSNDX EQU   *
         BR    14                       RETURN, RESULT IN R0
B&SYSNDX DS    D                        WORK AREA
C&SYSNDX DC    X'4E00000000000000'      LONG FLOATING POINT ZERO
X&SYSNDX DS    0H
         DROP  15
.NOGEN   ANOP
         MEND
./       ADD NAME=IKJZT301
         MACRO
         IKJZT301  &DSECT=YES
* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.
*
*        IKJZT301       RELEASE=OS/VS2.2  LEVEL=01
***********************************************************************
***********************************************************************
*                                                                     *
*                         SYS1.BRODCAST DATA SET                      *
*                                RECORD 1                             *
*                                                                     *
*        THE FIRST RECORD OF THE SYS1.BRODCAST DATA SET (R1BC) HAS    *
*        POINTERS TO THE NOTICES AND MAIL SECTIONS, AND OTHER INFO    *
*        CONCERNING THE DATA SET.                                     *
*                                           10/1/72    LEVEL=1        *
***********************************************************************
***********************************************************************
         AIF   ('&DSECT' EQ 'NO').NODSECT
R1BC     DSECT , -            RECORD 1 OF SYS1.BRODCAST DATA SET
         AGO   .SKIP
.NODSECT ANOP
R1BC     DS    0F -           RECORD 1 OF SYS1.BRODCAST DATA SET
.SKIP    ANOP
R1BCPTRP DS    0A -           SAME AS R1BCPTR BELOW
R1BCFLGS DS    B -            NOTICES FLAGS - NOT USED
R1BCPTR  DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST
*                               NOTICES DIRECTORY RECORD
R1USPTRP DS    0A -           SAME AS R1USPTR BELOW
R1USFLGS DS    B -            USER MAIL FLAGS - NOT USED
R1USPTR  DS    AL3 -          RBA OF FIRST USER MAIL DIRECTORY RECORD
R1RECNUM DS    F -            TOTAL NO. OF RECORDS IN SYS1.BRODCAST DS
R1BCMAX  DS    H -            MAXIMUM BRODCAST MSG NO. -
*                               FROM MASTER SCHEDULER BASEA, BABCMAX
*                                                                     *
R1DSN    DS    CL24 -         DATA SET NAME IN EBCDIC =
*                               ' SYS1.BRODCAST DATA SET '
R1LEVEL  DS    CL7 -          LEVEL NO. = 'LEVEL N', WHERE 'N' IS
*                               A 1-DIGIT NUMBER
         DS    CL84 -         RESERVED
         MEND
./       ADD NAME=IKJZT302
         MACRO
         IKJZT302  &DSECT=YES
* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.
*
*        IKJZT302      RELEASE=OS/VS2.2   LEVEL=01
***********************************************************************
***********************************************************************
*                                                                     *
*                         SYS1.BRODCAST DATA SET                      *
*                        NOTICES DIRECTORY RECORD                     *
*                                                                     *
*        THE BROADCAST NOTICES DIRECTORY RECORD (BCDIR) HAS BROADCAST *
*        MESSAGE NUMBERS AND A POINTER TO THE MESSAGE RECORD          *
*        ASSOCIATED WITH EACH MSG. NUMBER.                            *
*                                                                     *
*        NOTE: THIS MACRO USES EQUATES GENERATED BY 'IEZBITS' MACRO.  *
*              THEREFORE, THE IEZBITS MACRO MUST BE CODED             *
*              PREVIOUS TO CALLING THIS MACRO.                        *
*                                           10/1/72    LEVEL=1        *
***********************************************************************
***********************************************************************
         AIF   ('&DSECT' EQ 'NO').NODSECT
BCDIR    DSECT , -
         AGO   .SKIP
.NODSECT ANOP
BCDIR    DS    0F
.SKIP    ANOP
BCDNENT  EQU   25             NUMBER OF ENTRIES
BCDENTRY DS    0CL5 -         ENTRY FOR 1 BROADCAST MSG NO.
BCDMFLG  DS    0BL1 -         BROADCAST DIRECTORY MSG. FLAG:
BCDNOMSG EQU   BIT0
*                               '1' = NO NOTICES MSG ASSIGNED
*                                     TO THIS MSG NUMBER
*                               '0' = NOTICES MSG FOR THIS NUMBER
*                                     IS ASSIGNED
BCDMSGNO DS    FL2 -          BROADCAST NOTICES MSG NO. IN HEX
BCDMRBA  DS    AL3 -          RELATIVE BLOCK ADDR OF NOTICE MSG RCD
         DS    24CL5 -        RESERVE SPACE FOR 24 MORE ENTRIES
*                               IDENTICAL IN FORMAT TO 'BCDENTRY'
BCDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'
BCDNEXT  DS    AL3 -          CHAIN PTR TO NEXT NOTICE DIRECTORY RCD
*                               (ZERO IF LAST)
         MEND
./       ADD NAME=IKJZT303
         MACRO
         IKJZT303   &DSECT=YES
* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.
*
*        IKJZT303      RELEASE=OS/VS2.2  LEVEL=01
***********************************************************************
***********************************************************************
*                                                                     *
*                         SYS1.BRODCAST DATA SET                      *
*                         NOTICES MESSAGE RECORD                      *
*                                                                     *
*          THE BRODCAST NOTICES MESSAGE RECORD (BCMSG) IS A           *
*          RECORD IN THE SYS1.BRODCAST DATA SET WHICH CONTAINS A      *
*          NOTICES MESSAGE INTENDED FOR ALL USERS.                    *
*                                           10/1/72     LEVEL=1       *
***********************************************************************
***********************************************************************
         AIF   ('&DSECT' EQ 'NO').NODSECT
BCMSG    DSECT , -            BRODCAST NOTICES MESSAGE RECORD
         AGO   .SKIP
.NODSECT ANOP
BCMSG    DS    0F -           BRODCAST NOTICES MESSAGE RECORD
.SKIP    ANOP
BCMLNG   DS    FL1 -          LENGTH OF BRODCAST NOTICES MSG TEXT
BCMTEXT  DS    CL125 -        MESSAGE TEXT (PADDED WITH BLANKS)
         DS    XL3 -          RESERVED
         MEND
./       ADD NAME=IKJZT304
         MACRO
         IKJZT304  &DSECT=YES
* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.
*
*        IKJZT304       RELEASE=OS/VS2.2  LEVEL=01
***********************************************************************
***********************************************************************
*                                                                     *
*                         SYS1.BRODCAST DATA SET                      *
*                       USER MAIL DIRECTORY RECORD                    *
*                                                                     *
*        THE USER MAIL DIRECTORY RECORD (USDIR) IS A LOGICAL          *
*        DIRECTORY RECORD IN THE SYS1.BRODCAST DATA SET.              *
*        THE DIRECTORY CONTAINS USERIDS AND PTRS TO THE FIRST AND     *
*        LAST MESSAGE FOR EACH USERID.                                *
*                                           10/1/72    LEVEL=1        *
***********************************************************************
***********************************************************************
         AIF   ('&DSECT' EQ 'NO').NODSECT
USDIR    DSECT , -            USER MAIL DIRECTORY RECORD
         AGO   .SKIP
.NODSECT ANOP
USDIR    DS    0F -           USER MAIL DIRECTORY RECORD
.SKIP    ANOP
USDENTRY DS    0CL13 -        DIRECTORY ENTRY FOR 1 USERID
USDID    DS    CL7 -          USERID (LEFT JUSTIFIED, PADDED W/ BLANKS)
USDRBA   DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST
*                               MESSAGE FOR THIS USERID (ZERO IF NONE)
USDEND   DS    AL3 -          RBA OF LAST MESSAGE FOR THIS USERID
*                               (ZERO IF NONE)
         DS    8CL13 -        RESERVE SPACE FOR 8 MORE DIRECTORY
*                               ENTRIES IDENTICAL IN FORMAT TO THE
*                               PRECEDING 'USDENTRY'
         DS    XL8 -          RESERVED
USDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'
USDNEXT  DS    AL3 -          CHAIN PTR TO NEXT USER MAIL DIRECTORY
*                               RECORD (ZERO IF LAST)
         MEND
./       ADD NAME=IKJZT305
         MACRO
         IKJZT305     &DSECT=YES
* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.
*
*        IKJZT305       RELEASE=OS/VS2.2  LEVEL=01
***********************************************************************
***********************************************************************
*                                                                     *
*                         SYS1.BRODCAST DATA SET                      *
*                        USER MAIL MESSAGE RECORD                     *
*                                                                     *
*        THE USER MAIL MESSAGE RECORD (USMSG) IS A RECORD IN          *
*        THE SYS1.BRODCAST DATA SET WHICH CONTAINS A MAIL MESSAGE     *
*        INTENDED FOR A PARTICULAR USERID.                            *
*                                           10/1/72    LEVEL=1        *
***********************************************************************
***********************************************************************
         AIF   ('&DSECT' EQ 'NO').NODSECT
USMSG    DSECT , -            USER MAIL MESSAGE RECORD
         AGO   .SKIP
.NODSECT ANOP
USMSG    DS    0F -           USER MAIL MESSAGE RECORD
.SKIP    ANOP
USMLNG   DS    FL1 -          LENGTH OF MAIL MSG TEXT
USMTEXT  DS    CL125 -        MESSAGE TEXT (PADDED WITH BLANKS)
USMNEXT  DS    AL3 -          CHAIN PTR TO NEXT MAIL MESSAGE RECORD
*                               FOR THIS USERID (ZERO IF LAST)
         MEND
./       ADD NAME=LOADIT
         MACRO
&NAME    LOADIT  &REG,&SYMBOL,&TYPE
         LCLC  &A
&A       SETC '&SYMBOL'(1,1)
         AIF ('&A' EQ '(').REGFORM
&NAME    L&TYPE &REG,&SYMBOL
         MEXIT
.REGFORM ANOP
&NAME    L&TYPE &REG,0&SYMBOL
         MEND
./       ADD NAME=MOVE
         MACRO
&N       MOVE &TO,&FROM,&LEN
&N       LOADIT 15,&TO,A     REG 15 = OUTPUT ADDRESS
         LOADIT 14,&FROM,A   REG 14 = INPUT ADDRESS
         LOADS 1,&LEN     REG 1 = LENGTH
MOV1&SYSNDX C 1,=F'256'
         BNH MOV3&SYSNDX
         MVC 0(256,15),0(14)     COPY 256 BYTES.
         LA 15,256(15)
         LA 14,256(14)
         S 1,=F'256'
         B MOV1&SYSNDX
MOV2&SYSNDX MVC 0(0,15),0(14)    DUMMY MOVE INSTRUCTION
MOV3&SYSNDX LTR 1,1   TEST FOR RESIDUAL.
         BZ MOV4&SYSNDX
         BCTR 1,0
         EX 1,MOV2&SYSNDX    COPY THE LAST PART.
MOV4&SYSNDX EQU *
         MEND
./       ADD NAME=LOADS
         MACRO
&LABEL   LOADS &REG,&SYM
         LCLC  &A
&A       SETC  '&SYM'(1,1)
         AIF   ('&A' EQ '(').REG
         AIF   ('&A' LT '0').SYM
&LABEL   LA    &REG,&SYM
         MEXIT
.REG     ANOP
&LABEL   LA    &REG,0&SYM
         MEXIT
.SYM     ANOP
&A       SETC  T'&SYM
         AIF   ('&A' EQ 'F').FULL
         AIF   ('&A' EQ 'H').HALF
&LABEL   XR    &REG,&REG
         IC    &REG,&SYM
         MEXIT
.FULL    ANOP
         L     &REG,&SYM
         MEXIT
.HALF    ANOP
         LH    &REG,&SYM
         MEND
./       ADD NAME=MSG
         MACRO
&NAME    MSG
         GBLB &MSGUSED
         LCLA &OP,&COLUMN,&L1,&L2,&L3,&N,&DISP,&CT
         LCLC &D,&E
         ACTR 400
&NAME    STM 14,1,MSGREGS    SAVE REGS 14,15,0,1.
         AIF (&MSGUSED).LOOP
&MSGUSED SETB 1
         B MSGSKIP           BRANCH AROUND CONSTANTS AND SUBROUTINES
MSGBDW   DC F'0'             BLOCK DESCRIPTOR WORD
MSGRDW   DC F'0'             RECORD DESCRIPTOR WORD
MSGCC    DC C'0'             CARRIAGE CONTROL
MSGTEXT  DS CL147
MSGEDIT  DC CL12' '          EDITING AREA FOR DECIMAL STRINGS
MSGMOVE  MVC 0(0,15),0(14)
MSGPAT   DC X'40',9X'20',X'2120'  EDITING PATTERN
MSGREG   DS F                REGISTER CONTENTS FOR TRANSLATION
MSGREGS  DC 4F'0'            CONTENTS OF REGS 0-15 AT ENTRY TO MSG
MSGRTRN  DS F                RETURN ADDRESS FOR WRITE SUBROUTINE
MSGWORK  DC D'0'
MSGTAB   DC C'0123456789ABCDEF'        STRING FOR TRANSLATIONS TO HEX
MSGTABAD DC A(MSGTAB-C'0')   ADDRESS OF TRANSLATE TABLE
MSGDEC   CVD 0,MSGWORK       ROUTINE TO MAKE DECIMAL STRINGS
         MVC MSGEDIT,MSGPAT  RESTORE EDITING PATTERN.
         ED MSGEDIT,MSGWORK+2     EDIT.
         LR 0,14             SAVE RETURN ADDRESS.
         LA 14,MSGEDIT+11    REG 14 = LAST DIGIT ADDRESS IN MSGEDIT
         SR 14,1             REG 14 = FIRST DIGIT ADDRESS
         EX 1,MSGMOVE        COPY STRING TO TEXT AREA.
         LR 14,0
         BR 14
MSGUNPK  UNPK 0(15,15),0(8,1)
         LA 1,7(1)
         LA 15,14(15)
         BCT 0,MSGUNPK
         BR 14
MSGWRITE ST 14,MSGRTRN       SAVE RETURN ADDRESS
         L 15,=V(MSGWRITE)   REG 15 = ENTRY POINT OF MSGWRITE CSECT
         LA 1,MSGBDW         REG 1 = ADDRESS OF MESSAGE
         BALR 14,15          WRITE THE MESSAGE.
         L 14,MSGRTRN
         BR 14               RETURN TO THE MACRO CALL.
MSGSKIP  EQU *
.LOOP    AIF (&OP GE N'&SYSLIST).FIN
&OP      SETA &OP+1
&N       SETA N'&SYSLIST(&OP)
         AIF (&N EQ 1).N1
&D       SETC '&SYSLIST(&OP,1)'
&E       SETC '&D'(1,1)
         AIF ('&E' EQ 'X').COPYHEX
         AIF ('&E' EQ 'R').COPYREG
         AIF ('&E' EQ 'C').COPYCHR
         AIF ('&E' EQ 'D').COPYDEC
.ERROR1  MNOTE 'OPERAND &OP SKIPPED BECAUSE OF SYNTAX ERROR.'
         AGO .LOOP
.ERROR2  MNOTE 'TRUNCATED OPERANDS BECAUSE OF EXCESSIVE LENGTH'
         AGO .FIN
.N1      ANOP
&D       SETC '&SYSLIST(&OP)'
&E       SETC '&D'(1,1)
         AIF ('&E' EQ '''').NOTE
         AIF ('&E' EQ 'C').C
         AGO .ERROR1
.C       MVI MSGCC,&D        SET CARRIAGE CONTROL
         AGO .LOOP
.NOTE    ANOP
&L3      SETA K'&SYSLIST(&OP)-2   LENGTH OF NOTE
         AIF (&COLUMN+&L3 GT 132).ERROR2
         AIF (&COLUMN NE 0).SKIP2
         MVC MSGTEXT(&L3),=C&SYSLIST(&OP)
         AGO .SKIP4
.SKIP2   MVC MSGTEXT+&COLUMN.(&L3),=C&SYSLIST(&OP)
         AGO .SKIP4
.COPYHEX AIF ('&SYSLIST(&OP,3)' EQ '').Q3
&L3      SETA &SYSLIST(&OP,3)*2        NUMBER OF OUTPUT HEX BYTES
         AGO .Q4
.Q3      ANOP
&L3      SETA (L'&SYSLIST(&OP,2))*2    COPY LENGTH FROM SYMBOL TABLE
.Q4      AIF (&COLUMN+&L3 GT 132).ERROR2
&DISP    SETA 0              RESET &DISP IF PREVIOUSLY USED.
         AIF (&N LT 4).Q5
&DISP    SETA &SYSLIST(&OP,4)          DISPLACEMENT, IF SPECIFIED
.Q5      ANOP
&CT      SETA &L3/14+1
         LA 0,&CT            NUMBER OF UNPK'S REQUIRED
         AIF ('&D' EQ 'XR').Q1
         LA 1,&SYSLIST(&OP,2)+&DISP    SOURCE ADDRESS, SYMBOL FORM
         AGO .Q2
.Q1      LA 1,&DISP.(&SYSLIST(&OP,2))  SOURCE ADDRESS, REGISTER FORM
.Q2      LA 15,MSGTEXT+&COLUMN         DESTINATION ADDRESS
         BAL 14,MSGUNPK      BRANCH TO UNPK SUBROUTINE
.TR2     L 14,MSGTABAD
         TR MSGTEXT+&COLUMN.(&L3),0(14)
.SKIP4   ANOP
&COLUMN  SETA &COLUMN+&L3
         AGO .LOOP
.COPYREG AIF (&COLUMN+8 GT 132).ERROR2
         AIF ('&SYSLIST(&OP,2)' EQ '0').R0
         AIF ('&SYSLIST(&OP,2)' EQ '1').R1
         AIF ('&SYSLIST(&OP,2)' EQ '14').R14
         AIF ('&SYSLIST(&OP,2)' EQ '15').R15
         ST &SYSLIST(&OP,2),MSGREG
.RX      ANOP
&L3      SETA 8              LENGTH
         UNPK MSGTEXT+&COLUMN.(9),MSGREG(5)
         AGO .TR2
.R0      MVC MSGREG,MSGREGS+8
         AGO .RX
.R1      MVC MSGREG,MSGREGS+12
         AGO .RX
.R14     MVC MSGREG,MSGREGS
         AGO .RX
.R15     MVC MSGREG,MSGREGS+4
         AGO .RX
.COPYCHR ANOP                COPY AN EBCDIC FIELD.
         AIF ('&SYSLIST(&OP,3)' EQ '').QC1
&L3      SETA &SYSLIST(&OP,3)     ACCEPT LENGTH FROM 3RD. OPERAND.
         AGO .QC2
.QC1     ANOP
&L3      SETA L'&SYSLIST(&OP,2)  TAKE LENGTH FROM SYMBOL TABLE
.QC2     ANOP
         AIF (&COLUMN+&L3 GT 132).ERROR2
&DISP    SETA 0              RESET &DISP I6 PREVIOUSLY USED.
         AIF (&N LT 4).QC3
&DISP    SETA &SYSLIST(&OP,4)     DISPLACEMENT IF SPECIFIED
.QC3     AIF ('&D' EQ 'CR').QC4
         MVC MSGTEXT+&COLUMN.(&L3),&SYSLIST(&OP,2)+&DISP
         AGO .SKIP4
.QC4     MVC MSGTEXT+&COLUMN.(&L3),&DISP.(&SYSLIST(&OP,2))
         AGO .SKIP4
.COPYDEC AIF ('&SYSLIST(&OP,3)' EQ '').Q6
&L3      SETA &SYSLIST(&OP,3)     LENGTH WAS SPECIFIED.
         AGO .Q7
.Q6      ANOP
&L3      SETA 10             DEFAULT FIELD WIDTH
.Q7      AIF (&COLUMN+&L3 GT 132).ERROR2
&DISP    SETA 0              RESET &DISP.
         AIF (&N LT 4).Q8
&DISP    SETA &SYSLIST(&OP,4)     GET DISPLACEMENT SPECIFICATION.
.Q8      AIF ('&D' EQ 'DR').Q9    TEST FOR REGISTER FORM.
         L 0,&SYSLIST(&OP,2)+&DISP     REG 0 = VALUE
         AGO .Q10
.Q9      LR 0,&SYSLIST(&OP,2)     REG 0 = VALUE
.Q10     LA 15,MSGTEXT+&COLUMN    REG 15 = TEXT ADDRESS
         LA 1,&L3-1          REG 1 = FIELD WIDTH - 1
         BAL 14,MSGDEC
         AGO .SKIP4
.FIN     AIF (&COLUMN EQ 0).EXIT
&L1      SETA &COLUMN+5
&L2      SETA &L1+4
         MVI MSGRDW+1,&L1    SET RECORD LENGTH
         MVI MSGBDW+1,&L2    SET BLOCK LENGTH
         BAL 14,MSGWRITE     BRANCH TO MESSAGE WRITE SUBROUTINE
.EXIT    LM 14,1,MSGREGS     RESTORE REGS 14,15,0,1
         MEND
./       ADD NAME=OPENIF
         MACRO
&NAME    OPENIF  &OP
.*  THIS MACRO OPENS A DCB IF IT IS NOT ALREADY OPEN.
&NAME    TM &OP(1)+48,X'10'  TEST FOR DCB ALREADY OPEN.
         BO OIF&SYSNDX
         OPEN &OP
OIF&SYSNDX EQU *
         MEND
./       ADD NAME=OPENIN
         MACRO
&NAME    OPENIN  &DDNAME,&EODAD
         GBLB  &OPENIN,&MSGUSED
         AIF ('&NAME' EQ '').Q1
&NAME    EQU *
.Q1      AIF ('&EODAD' EQ '').Q2
         MVC IN+33(3),=AL3(&EODAD)     CHANGE EODAD.
.Q2      AIF ('&DDNAME' EQ '').Q3
         LA 1,=CL8'&DDNAME'
         BAL 14,OPENIN4      OPEN A NEW DDNAME.
         AGO .Q4
.Q3      BAL 14,OPENIN5      OPEN //IN OR PREVIOUS DDNAME.
.Q4      AIF (&OPENIN EQ 0).FIRST
         MEXIT
.FIRST   B OPENIN7           BRANCH AROUND DATA AND SUBROUTINES.
&OPENIN  SETB 1
IN       DCB DSORG=PS,MACRF=GL,EODAD=OPENIN3,DDNAME=IN
OPENIN1  DC F'0'             RETURN ADDRESS
OPENIN2  DC CL8'IN'          DDNAME
OPENIN3  MSG '***END OF FILE ',(C,OPENIN2,7)
         SVC 3
OPENIN4  MVC OPENIN2,0(1)    CHANGE THE DDNAME.
         MVC IN+40(8),0(1)
OPENIN5  ST 14,OPENIN1       SAVE RETURN ADDRESS.
         OPEN IN             OPEN SELECTED FILE.
         TM IN+48,X'10'      TEST FOR SUCCESSFUL OPEN.
         BO OPENIN6
         MSG '***UNABLE TO OPEN FILE ',(C,OPENIN2,7)
         SVC 3
OPENIN6  L 14,OPENIN1        RESTORE REG 14.
         BR 14               RETURN.
OPENIN7  EQU *
         MEND
./       ADD NAME=SEARCHDD
         MACRO
&LABEL   SEARCHDD &DDNAME,&ERRADDR=
.*
.* THIS MACRO WILL DETERMINE IF THERE IS A DD ENTRY IN THE TIOT FOR THE
.* SPECIFIED DDNAME. THE RETURN VALUE PASSED IN R15 INDICATES THE
.* RESULTS. IF R15=0, THE DDNAME WAS FOUND; IF R15=4, IT WAS NOT. THE
.* FIRST OPERAND IS REQUIRED, AND THE SECOND IS OPTIONAL; BOTH CAN BE
.* CODED IN ADDRESS OR REGISTER FORM. TO USE THIS MACRO, CODE:
.*
.*       SEARCHDD SYSUT1
.*
.* OPTIONALLY, AN ERROR ADDRESS CAN BE CODED. A BRANCH WILL BE TAKEN TO
.* THIS ADDRESS IF THE DDNAME IS NOT FOUND.
.*
.*       SEARCHDD (1),ERRADDR=NODDNAME
.*
.* IN THE ABOVE EXAMPLE, R1 CONTAINS THE ADDRESS OF AN 8-BYTE FIELD
.* CONTAINING THE DDNAME.
.*
         GBLB  &SWITCH
         AIF   ('&DDNAME' EQ '').NONAME
         AIF   (&SWITCH EQ 1).SECOND
         B     CAM&SYSNDX.F       SKIP THIS SUBROUTINE
CAM0000A L     15,16              GET CVT ADDR
         L     15,0(15)           GET TCB WORDS ADDR
         L     15,4(15)           GET CURRENT TCB ADDR
         L     15,12(15)          GET TIOT ADDR
         LA    15,24(15)          POINT TO START OF DD ENTRIES
         XR    0,0                CLEAR R0
CAM&SYSNDX.B CLC   0(4,15),CAM&SYSNDX.E END-OF-TIOT FLAG?
         BE    CAM&SYSNDX.C       YES? QUIT BAD... ELSE, CONTINUE...
         CLC   4(8,15),0(1)       DDNAMES EQUAL?
         BE    CAM&SYSNDX.D       YES? QUIT GOOD... ELSE, CONTINUE...
         IC    0,0(15)            GET DD ENTRY LENGTH, AND...
         AR    15,0               INCREMENT POINTER
         B     CAM&SYSNDX.B       TRY AGAIN
CAM&SYSNDX.C LA    15,4           SET RC=4
         BR    14                 RETURN
CAM&SYSNDX.D XR    15,15          SET RC=0
         BR    14                 RETURN
CAM&SYSNDX.E DC    F'0'           INDICATES END-OF-TIOT
CAM&SYSNDX.F EQU   *
&SWITCH  SETB  1
.SECOND  AIF   ('&DDNAME'(1,1) EQ '(').REG1
&LABEL   BAL   1,CAM&SYSNDX.G     LOAD ADDR OF DDNAME FIELD
         DC    CL8'&DDNAME'
CAM&SYSNDX.G BAL   14,CAM0000A    BRANCH TO THE SEARCH ROUTINE
         AGO   .SKIP1
.REG1    ANOP
&LABEL   LR    1,&SYSLIST(1,1)    LOAD ADDR OF DDNAME FIELD
         BAL   14,CAM0000A        BRANCH TO THE SEARCH ROUTINE
.SKIP1   AIF   ('&ERRADDR' EQ '').SKIP2
         LTR   15,15              TEST RETURN CODE
         AIF   ('&ERRADDR'(1,1) EQ '(').REG2
         BNZ   &ERRADDR           ^0? TAKE EXIT...ELSE, CONTINUE...
         AGO   .SKIP2
.REG2    BNZ   0&ERRADDR          ^0? TAKE EXIT...ELSE, CONTINUE...
.SKIP2   MEXIT
.NONAME  MNOTE 8,'MISSING DDNAME OPERAND'
         MEND
./       ADD NAME=SNAPREGS
         MACRO
&NAME    SNAPREGS
         GBLB &MSGUSED,&REGSUSE
&NAME    STM 0,15,REGSREGS   SAVE CURRENT REGISTER CONTENTS.
         AIF (&REGSUSE).GO
&REGSUSE SETB 1
         MSG
         B REGSREGS+64       BRANCH AROUND DATA.
REGSEP   MVI MSGBDW+1,123    ***REGS MACRO ROUTINES AND DATA
         MVI MSGRDW+1,119
         MVC MSGREG(1),MSGCC SAVE MSGCC.
         MVI MSGCC,C'0'
         L 3,MSGTABAD        REG 3 = TRANSLATE TABLE ADDRESS
         MVC MSGTEXT(10),REGSREGS-12
         SR 1,1              REG 1 = REGISTER NO.
         LA 14,REGSREGS      REG 14 = SOURCE ADDRESS
         BAL 2,REGSLOOP-8    COMPLETE AND WRITE A LINE.
         MVI MSGCC,C' '
         MVC MSGCC+1(10),MSGCC
         LA 1,8
         LA 14,REGSREGS+32
         BAL 2,REGSLOOP-8
         MVC MSGCC,MSGREG    RESTORE MSGCC.
         LM 0,4,REGSREGS     RESTORE REGS 0-4.
         LM 14,15,REGSREGS+56     RESTORE REGS 14 AND 15.
         BR 5                RETURN TO CALLING POINT.
         LA 4,8              REG 4 = LOOP COUNTER
         LA 15,MSGTEXT+10    REG 15 = TEXT POINTER
REGSLOOP CVD 1,REGSREGS-20
         MVC 0(4,15),=X'40202120'
         ED 0(4,15),REGSREGS-14
         MVI 4(15),C'='
         UNPK 5(9,15),0(5,14)
         TR 5(8,15),0(3)
         LA 1,1(1)
         LA 14,4(14)
         LA 15,13(15)
         BCT 4,REGSLOOP
         BAL 14,MSGWRITE
         BR 2                 RETURN FROM SUBROUTINE.
         DC D'0',CL12'REGISTERS'    WORK AREA AND LITERAL/MARKER
REGSREGS DC 16F'0'           REGISTERS 0 THRU 15 AT LAST CALL
.GO      BAL 5,REGSEP
         L 5,REGSREGS+20     RESTORE REG 5.
         MEND
./       ADD NAME=STAE$
         MACRO
&NAME    STAE$ &END=STAE$END,&WRK=STAE$WRK,&MF=(E,STAE$LST),           +
               &LOAD=YES,&MSG=TPUT
.*
.*        THIS MACRO SETS UP AN ESTAE ENVIRONMENT FOR STAE$XIT.
.*
.*        WRITTEN BY BILL GODFREY, PRC (PLANNING RESEARCH CORPORATION).
.*
.*        DATE UPDATED. APRIL 15 1981.
.*
.*        STAE$XIT IS AN ESTAE EXIT WHICH DISPLAYS (ON THE CONSOLE
.*        OR A TSO TERMINAL OR BOTH) INFORMATION ABOUT AN ABEND,
.*        INCLUDING THE PSW, REGISTERS, AND (IF THE PSW IS WITHIN
.*        THE CSECT THAT ISSUED THIS MACRO) THE CSECT NAME AND
.*        THE OFFSET OF THE PSW FROM THE BEGINNING OF THE CSECT.
.*
.*        TO USE STAE$XIT, YOU NEED TO ADD THE FOLLOWING 4 STATEMENTS
.*        TO YOUR PROGRAM.
.*
.*           1)  NEAR THE BEGINNING OF YOUR PROGRAM, AFTER YOU'VE
.*               SET UP YOUR BASE REGISTER AND (IN A RE-ENTRANT
.*               PROGRAM) GETMAINED A WORK AREA, CODE THE STAE$
.*               MACRO WITH NO OPERANDS.
.*           2)  ANYWHERE AFTER THE LAST EXECUTABLE INSTRUCTION
.*               (BUT WITHIN THE MAIN CSECT) INSERT:
.*                 STAE$END EQU   *
.*               THIS IS USED BY STAE$XIT TO DETERMINE IF THE PSW
.*               IS BETWEEN THE START OF THE CSECT AND HERE.
.*           3)  IN YOUR WORK AREA (WHICH IN A RE-ENTRANT PROGRAM
.*               IS USUALLY GETMAINED) INSERT:
.*                 STAE$WRK DS    32D
.*                 STAE$LST DS    16F
.*               THE FIRST IS A WORK AREA USED BY STAE$XIT WHEN
.*               AN ABEND OCCURS. THE SECOND IS A WORK AREA USED
.*               BY THE STAE$ MACRO AT THE TIME IT IS EXECUTED.
.*
.*        STAE$LST IS BROKEN DOWN AS FOLLOWS
.*               4F   -  ESTAE MF=L AREA
.*               2F   -  2 WORD PARAMETER LIST
.*               5F   -  OPTION LIST PREFIX (WORDS 3 AND 4 RESERVED)
.*               5F   -  FIRST CSECT DESCRIPTOR ENTRY
.*        THE STAE$ MACRO MAKES THESE 4 SECTIONS CONTIGUOUS,
.*        BUT THEY MAY IN FACT BE SCATTERED IF YOU GENERATE
.*        YOUR OWN PARAMETER LIST FOR STAE$XIT INSTEAD OF
.*        USING THIS MACRO.
.*
.*        THE STAE$XIT EXIT IS NORMALLY LOADED DYNAMICALLY BY THE
.*        STAE$ MACRO. THIS MAY BE UNACCEPABLE OVERHEAD FOR CERTAIN
.*        APPLICATIONS.  BY SPECIFYING LOAD=NO AS AN OPERAND OF
.*        THE MACRO, THE MACRO WILL REFERENCE THE EXIT WITH A
.*        V-TYPE ADDRESS CONSTANT INSTEAD OF LOADING IT, SO THE
.*        STAE$XIT EXIT CAN BE LINK-EDITED WITH THE ISSUING PROGRAM.
.*
.*        THERE ARE 2 ADVANTAGES TO LOADING THE EXIT DYNAMICALLY.
.*        FIRST, THE LINK-EDIT STEP NEED NOT BE CHANGED TO REFERENCE
.*        THE LIBRARY CONTAINING THE STAE$XIT EXIT.
.*        SECOND, IMPROVEMENTS MADE TO THE STAE$XIT EXIT WILL TAKE
.*        EFFECT AUTOMATICALLY, WITH NO RE-LINKING OF YOUR PROGRAM.
.*
.*        MESSAGES ARE NORMALLY DISPLAYED ON A TSO TERMINAL.
.*        FOR PROGRAMS NOT EXECUTING FROM TSO, THERE IS A MSG=WTO
.*        OPERAND WHICH CAUSES THE MESSAGES TO BE ISSUED VIA WTO.
.*        THERE IS ALSO A MSG=WTOT OPERAND, WHICH CAUSES MESSAGES
.*        TO BE ISSUED THRU WTO AND TSO BOTH.
.*
         AIF   ('&LOAD' EQ 'YES').LOAD
         AIF   ('&LOAD' EQ 'NO').VCON
         MNOTE 4,'LOAD=&LOAD INVALID, LOAD=YES ASSUMED'
.LOAD    LA    0,=CL8'STAE$XIT'    LOAD, EPLOC
         SR    1,1                 LOAD, NO DCB
         SVC   8                   ISSUE LOAD SVC
         AGO   .LOADED
.VCON    L     0,=V(STAE$XIT)
.LOADED  LA    1,&MF(2)            POINT TO ESTAE MF=L
         ST    0,0(,1)             STORE EXIT ADDRESS IN ESTAE MF=L
         MVI   0(1),22             OPTION BITS IN ESTAE MF=L
         XC    8(8,1),8(1)         CLEAR LAST 2 WORDS OF ESTAE MF=L
         LA    14,16(,1)           POINT TO 2-WORD PARAM LIST
         ST    14,4(,1)            STORE PARAM ADDRESS IN ESTAE MF=L
         LA    15,8(,14)           POINT TO 1ST PARAM (OPTIONS)
         ST    15,0(,14)           STORE 1ST PARAM ADDRESS
         LA    0,STAE$WRK          POINT TO 2ND PARAM (WORKAREA)
         ST    0,4(,14)            STORE 2ND PARAM ADDRESS
         XC    0(20,15),0(15)      CLEAR 1ST PARAM AREA
         AIF   ('&MSG' EQ 'TPUT').MSGT
         AIF   ('&MSG' EQ 'WTO').MSGW
         AIF   ('&MSG' EQ 'WTOT').MSGB
         MNOTE 4,'MSG=&MSG INVALID, MSG=TPUT ASSUMED'
.MSGT    MVI   0(15),64            MSG=TPUT
         AGO   .MSGX
.MSGW    MVI   0(15),128           MSG=WTO
         AGO   .MSGX
.MSGB    MVI   0(15),0             MSG=WTOT (WTO AND TPUT)
.MSGX    MVI   7(15),1             ONE CSECT IN LIST
         LA    14,20(,15)          ADDRESS OF FIRST CSECT ENTRY
         ST    14,16(,15)          STORE IN OPTION LIST WORD 5
         LA    0,&SYSECT           TOP OF CSECT
         ST    0,8(,14)            IN TABLE
         LA    0,&END              END OF CSECT
         ST    0,12(,14)           IN TABLE
         MVC   0(8,14),=CL8'&SYSECT' CSECT NAME
         XC    16(4,14),16(14)     ZERO POINTER TO NEXT CSECT
         SLR   0,0                 INDICATE ESTAE CREATE OPTION
         SVC   60                  ISSUE ESTAE SVC
         MEND
./       ADD NAME=TESTOPEN
         MACRO
&NAME    TESTOPEN &DCB,&EXIT
&NAME    LOADIT 1,&DCB,A     REG 1 = DCB ADDRESS
         TM 48(1),X'10'      TEST FOR SUCCESSFUL OPEN.
         AIF ('&EXIT' EQ '').NOEXIT
         LOADIT 15,&EXIT,A   REG 15 = EXIT ADDRESS
         BCR 8,15            BRANCH IF NO OPEN.
         MEXIT
.NOEXIT  BO TEST&SYSNDX      BRANCH IF OPEN OK.
         COMMENT 'OPEN TEST FAILED.'
         SVC 3
TEST&SYSNDX EQU *
         MEND
./       ADD NAME=TRC
         MACRO
&NAME    TRC
         GBLB &TRCUSED,&MSGUSED
         GBLA &TRCN
&TRCN    SETA &TRCN+1        INCREMENT TEST NUMBER.
         MNOTE '   ***RETURN CODE TEST NO. &TRCN'
&NAME    ST 15,TRCCODE       SAVE RETURN CODE.
         AIF (&TRCUSED).TRCSK1
&TRCUSED SETB 1
         B TRCSKIP1          BRANCH AROUND CONSTANTS.
TRCNO    DC X'0'             NUMBER OF LAST TEST EXECUTED
TRCCODE  DC F'0'             CONTENT OF REGISTER 15
TRCFAIL  MSG '***RETURN CODE FROM TEST NO. ',(X,TRCNO),' WAS ',        X
               (X,TRCCODE)
TRCEXIT  B *+4               DUMMY BRANCH TO FACILITATE AN EXIT.
         SVC 3               TERMINATE PROGRAM.
TRCSKIP1 EQU *
.TRCSK1  ANOP
         MVI TRCNO,&TRCN     SAVE TEST NUMBER AT EXECUTION TIME.
         CLC TRCCODE,=F'0'   TEST RETURN CODE.
         BNE TRCFAIL
         MEND
