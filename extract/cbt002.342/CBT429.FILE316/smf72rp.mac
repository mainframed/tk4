         TITLE '   S M F 7 2 R P   '
*--------------------------------------------------------------------*
*        WRITTEN BY. BILL GODFREY,  PLANNING RESEARCH CORPORATION.   *
*        DATE WRITTEN. SEPTEMBER 7 1978.                             *
*        DATE UPDATED. SEPTEMBER 7 1978.  THIS PROGRAM WAS A MF/1    *
*             REPORT AND WAS CONVERTED TO REPORT ON RMF DATA.        *
*             JIM MARSHALL, CAPT, USAF (RET)                         *
*                                                                    *
*        ATTRIBUTES. RE-ENTRANT.                                     *
*        COMMENTS.                                                   *
*            THIS PROGRAM PRODUCES THE RMF WORKLOAD ACTIVITY REPORT  *
*            FROM THE TYPE 72 SMF RECORD. EVERY TYPE 72 RECORD       *
*            FOUND IN THE INPUT DATA SET IS USED, UNLESS THE PARM    *
*            FIELD SPECIFIES A RESTRICTED RANGE OF JULIAN DATES.     *
*            E.G., PARM='78240,78240'.  CODE WILL SELECT THE SMF     *
*            TYPE 72 RECORDS FROM THE INPUT FILE.                    *
*                                                                    *
*            JCL IS AS FOLLOWS:                                      *
*                                                                    *
*            //REPORT   EXEC PGM=SMF72RP,PARM=' OPTIONAL '           *
*            //SYSPRINT DD SYSOUT=A                                  *
*            //SYSUT1   DD -- INPUT DATA SET --                      *
*                                                                    *
* CHNGE LOG: 06MAR91-CONVERTED IT FROM MF/1 TO RMF AND BEEFED    JDM1*
*            UP THE DOCUMENTATION                                    *
*--------------------------------------------------------------------*
         SPACE
         MACRO
&NAME    LOADF &R,&L
&NAME    MVC   FULL,&L
         L     &R,FULL
         MEND
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE
SMF72RP  AMODE 24
SMF72RP  RMODE 24
SMF72RP  CSECT
         USING *,R12
         B     32(,15)
         DC    AL1(11),CL11'SMF72RP '
         DC    CL16' &SYSDATE &SYSTIME '
         STM   14,12,12(13)
         LR    R12,15
         LR    R2,R1
         GETMAIN R,LV=MYDSECTL
         ST    13,4(,1)
         ST    1,8(,13)
         LR    13,1
         LR    R9,R1
         USING MYDSECT,R9
         SPACE 1
         SLR   R15,R15
         ST    R15,SWITCH
         ST    R15,RC
         ST    R15,JULIANI
         MVC   CTRPAG,=P'00000'
         MVC   CTRLIN,=P'000'
         MVC   CTRMAX,=P'050'
         MVI   LINE-1,C' '
         MVI   PRINTA-1,C' '
         MVI   OPT,0
         XC    PREVIOUS,PREVIOUS
         SPACE
         L     R2,0(,R2)           POINT TO PARM
         LH    R3,0(,R2)           GET LENGTH
         MVC   PARMLO,=P'00000'
         MVC   PARMHI,=P'99999'
         LTR   R3,R3               LENGTH ZERO?
         BZ    NOPARM              YES - BRANCH
         CH    R3,=H'11'           IS PARM LENGTH 11
         BNE   EXIT12              NO, QUIT
         PACK  PARMLO,2(5,R2)      GET LO DATE YYDDD
         PACK  PARMHI,8(5,R2)      GET HI DATE YYDDD
NOPARM   EQU   *
         SPACE
         LA    R4,MYDCBP
         MVC   0(DCBPL,R4),DCBP
         SPACE
         MVI   MYOPEN,X'80'
         LA    R1,MYOPEN
         SPACE
         OPEN  ((R4),OUTPUT),MF=(E,(1))
         SPACE
         TM    OFLGS(R4),X'10'
         BO    OKDCBP
         LA    R1,MSG01
         WTO   MF=(E,(1))
         B     EXIT12
OKDCBP   EQU   *
         OI    SWITCH,X'80'        SET CLOSE SWITCH ON
         LA    R5,MYDCBS
         MVC   0(DCBSL,R5),DCBS
         LA    R15,SMFEOD
         IC    R14,EODAD(,R5)
         ST    R15,EODAD(,R5)      EODAD=SMFEOD
         STC   R14,EODAD(,R5)
         SPACE
         MVI   MYOPEN,X'80'
         LA    R1,MYOPEN
         OPEN  ((R5),INPUT),MF=(E,(1))
         SPACE
         TM    OFLGS(R5),X'10'
         BO    OKDCBS
         LA    R1,MSG02
         LA    R0,L'MSG02
         BAL   R14,PRINT
         B     EXIT12
         SPACE
OKDCBS   EQU   *
         OI    SWITCH,X'40'        SET CLOSE SWITCH ON
READ     EQU   *
         LA    R5,MYDCBS
         GET   (R5)
         LR    R3,R1                                             JDM1
         USING SMF72HDR,R3                                       JDM1
         SPACE
         CLI   SMF72RTY,72         WORKLOAD ACTIVITY RECORD?
         BNE   READ
         CP    SMF72DTE,PARMLO
         BL    READ
         CP    SMF72DTE,PARMHI
         BH    READ
OK       EQU   *
         LR    R6,R3                                             JDM1
         A     R6,SMF72PRS             ADD IN OFFSET             JDM1
         USING SMF72MFV,R6             GET NEW ONE               JDM1
         CLC   SMF72IST(8),PREVIOUS
         BE    SAMEINTV
         ZAP   CTRLIN,=P'0'        FORCE NEW PAGE
         MVC   PREVIOUS(8),SMF72IST
         SPACE
         LA    R1,SMF72DTE
         BAL   R14,JULIAN
         MVC   HEADDTE,JULIANO
         SPACE
         LA    R15,HEADTME
         LA    R1,SMF72TME
         BAL   R14,TIMEX
         SPACE
         LA    R1,SMF72DAT
         BAL   R14,JULIAN
         MVC   HEADDAT,JULIANO
         SPACE
         LA    R15,WORK
         MVC   0(10,R15),=X'402120204B20204B2020'
         ED    0(10,R15),SMF72IST
         MVC   HEADIST,WORK+2
         SPACE
         MVC   WORK(10),=X'4021204B20204B202020'
         ED    WORK(10),SMF72INT
         MVC   HEADINT,WORK+1
         SPACE
         MVC   HEADSID,SMF72SID
         MVC   HEADRLS,SMF72MVS        HAS MOVED                 JDM1
         UNPK  HEADMFV,SMF72MFV        IS NOW PACKED             JDM1
         B     SAMEINTV                                          JDM1
SAMEINTV EQU   *
         SPACE
         MVC   LINE,LINE-1
         SPACE
         LR    R7,R3                                             JDM1
         A     R7,SMF72WLS             ADD IN OFFSET             JDM1
         USING SMF72FG1,R7             GET NEW ONE               JDM1
         MVC   HALF,SMF72SUB
         LH    R1,HALF
         CVD   R1,DOUBLE
         LA    R15,WORK
         MVC   0(4,R15),=X'40202120'
         ED    0(4,R15),DOUBLE+6
         MVC   LINSUB,1(R15)
         SPACE
         MVC   PGPNUM,SMF72PGN                                   JDM1
         MVC   PGPSIZE,SMF72PGL                                  JDM1
         MVC   HEADIPS,SMF72IPS
         LA    R0,1
         STH   R0,PGPNO
         LH    R1,PGPNUM
         LTR   R1,R1
         BZ    READ
         SLR   R15,R15
         ST    R15,SUMSER
         ST    R15,SUMTTX
         LR    R8,R3                                             JDM1
         A     R8,SMF72PGS                                       JDM1
PGPLOOP  EQU   *
         USING SMF72TTX,R8
         STH   R1,PGPNUM
         LH    R1,PGPNO
         CVD   R1,DOUBLE
         LA    R15,WORK
         MVC   0(4,R15),=X'40202120'
         ED    0(4,R15),DOUBLE+6
         MVC   LINPER,1(R15)
         SPACE
*              SERVICE IN INTERVAL
*              -------------------
         SPACE
         LOADF R1,SMF72SER
         LR    R15,R1
         A     R15,SUMSER
         ST    R15,SUMSER
         CVD   R1,DOUBLE
         LA    R15,LINSER
         MVC   0(15,R15),=X'4020206B2020206B2020206B202120'
         ED    0(15,R15),DOUBLE+2
         SPACE
*              AVERAGE SERVICE RATE
*              --------------------
         SPACE
*              SRV/ACT = SERVICE UNITS PER SECOND
         SPACE
         ZAP   DOUBLE,=P'0'
         LOADF R14,SMF72ACT
         LTR   R14,R14
         BZ    RATEZ
         SRDL  R14,32
         BAL   R2,POWER
         LA    R14,10(,R14)        MULTIPLY BY 1024
         LOADF R0,SMF72SER
         LTR   R0,R0
         BZ    RATEZ
         SRDL  R0,32
DEV00    CLR   R0,R15              IS R0 .GE. DEVISOR
         BL    DEV10               NO
         SRDL  R0,1                YES, DIVIDE DIVIDEND BY 2
         BCTR  R14,0               REMEMBER
         B     DEV00
DEV10    EQU   *
         SPACE
DEV20    SLDL  R0,1
         LA    R14,1(,R14)         REMEMBER
         CLR   R0,R15              DIVIDEND HALF1 .GE. DIVISOR
         BL    DEV20               NO, GO INCREASE DIVIDEND
         SRDL  R0,1                MAKE DEND HALF1 JUST .LT. DVOR
         BCTR  R14,0               REMEMBER
         SPACE
         SLDL  R0,1                MULTIPLY DIVIDEND BY 2
         CLR   R0,R15              WILL DIVIDE YIELD QUOTIENT > 31
         SRDL  R0,1                RESTORE DIVIDEND
         BL    DEV30               NO, GO DIVIDE
         SRDL  R0,1                YES, DIVIDE DIVIDEND BY 2
         BCTR  R14,0               REMEMBER
DEV30    EQU   *
         DR    R0,R15              DO THE DIVIDE
         LR    R15,R0              SAVE REMAINDER
         M     R0,=F'1000000'      MICROSEC TO SEC
         LTR   R14,R14             ANY POWERS OF 2 TO RECONCILE?
         BM    DEV40               BR IF NEGATIVE POWERS
         SRDL  R0,0(R14)           RAISE PRODUCT TO PROPER POWER
         B     DEV50               EXIT
DEV40    LCR   R14,R14             MAKE POS
         SLDL  R0,0(R14)           REDUCE TO PROPER POWER
DEV50    EQU   *
         CVD   R1,DOUBLE
RATEZ    MVC   LINRATE(15),=X'4020206B2020206B2020206B202120'
         ED    LINRATE(15),DOUBLE+2
         SPACE
*              WORKLOAD LEVEL
*              --------------
         SPACE
         LOADF R1,SMF72LEV
         SLR   R0,R0               NOT AN ESTIMATE
         LTR   R1,R1               IS IT NEG (EST)
         BNM   *+8                 NO, SKIP NEXT 2
         BCTR  R0,0                YES, SET SWITCH
         LCR   R1,R1               YES, MAKE POS
         MH    R1,=H'100'
         SRL   R1,8                DIVIDE BY 256
         CVD   R1,DOUBLE
         LA    R15,LINLEV
         MVC   0(7,R15),=X'402021204B2020'
         ED    0(7,R15),DOUBLE+5
         LTR   R0,R0               WAS IT AN ESTIMATE
         BZ    *+8                 NO
         MVI   7(R15),C'E'         YES
         SPACE
*              AVERAGE TRANSACTIONS
*              --------------------
         SPACE
*              ACT/INT
*              ACT IS IN SEC * 1000000 / 1024
*              INT IS IN SEC * 1000
*              THEREFORE ACT * 1024 / INT = AVTRANS * 1000
*
*              ACT IS THE SUM OF THE ELAPSED TIMES OF CONCURRENT
*              TRANSACTIONS, THEREFORE IT USUALLY EXCEEDS THE
*              LENGTH OF THE INTERVAL.
         SPACE
*              CONVERT INT FROM MMSSTTT TO THOUSANDTHS OF A SEC
*              ISOLATE MM FROM SSTTT BY DIVIDING BY 100000,
*              GIVING QUOTIENT MM AND REMAINDER SSTTT.
*              THEN MULTIPLY MM BY 60000, AND ADD TO SSTTT.
         SPACE
         MVC   DOUBLE+4(4),SMF72INT
         XC    DOUBLE(4),DOUBLE
         CVB   R0,DOUBLE
         SRDL  R0,32
         D     R0,=F'100000'
         LR    R15,R0              SAVE REMAINDER (SSTTT)
         M     R0,=F'60000'        CONVERT MINUTES TO SECONDS
         AR    R15,R1              ADD PRODUCT TO REMAINDER
         LOADF R0,SMF72ACT
         SRDL  R0,32               SHIFT INTO R1
         SLDL  R0,10               MULTIPLY BY 1024
         LTR   R15,R15             IS DIVISOR ZERO
         BNZ   *+12                NO, GO DIVIDE
         SRDL  R0,64               YES, MAKE RESULT ZERO
         B     *+6                 SKIP THE DIVIDE
         DR    R0,R15              DIVIDE BY INT
         LA    R1,5(,R1)           ADD 5 (TO ROUND)
         CVD   R1,DOUBLE
         MVO   DOUBLE,DOUBLE(7)    DIVIDE BY 10
         LA    R15,LINACT
         MVC   0(13,R15),=X'40206B2020206B2021204B2020'
         ED    0(13,R15),DOUBLE+3
         SPACE
*              ENDED TRANSACTIONS
*              ------------------
         SPACE
         LOADF R1,SMF72TTX
         LR    R15,R1
         A     R15,SUMTTX
         ST    R15,SUMTTX
         CVD   R1,DOUBLE
         LA    R15,LINTTX
         MVC   0(10,R15),=X'40206B2020206B202120'
         ED    0(10,R15),DOUBLE+4
         SPACE
*              AVERAGE TIME OF ENDED TRANSACTION
*              ---------------------------------
         SPACE
*              TTM/TTX
         SPACE
         ZAP   DOUBLE,=P'0'
         SLR   R2,R2               ZERO HOURS
         LOADF R14,SMF72TTX
         LTR   R14,R14
         BZ    TIMEZ
         SRDL  R14,32
         BAL   R2,POWER
         SLR   R2,R2               ZERO HOURS
         LOADF R0,SMF72TTM
         LTR   R0,R0
         BZ    TIMEZ
         SRDL  R0,32
         BAL   R2,DIVIDE
         SLDL  R0,10               MULTIPLY BY 1024
         LA    R15,100
         SR    R14,R14
         BAL   R2,DIVIDE
         D     R0,=F'36000000'
         LR    R2,R1               SAVE HOURS
         SRDL  R0,32
         D     R0,=F'600000'
         LR    R15,R1              SAVE MINUTES
         M     R14,=F'1000000'     GET  MM000000
         AR    R15,R0              SAVE MMSSTTTT
         A     R15,=F'5'           ADD 5 (TO ROUND)
         CVD   R15,DOUBLE
         MVO   DOUBLE,DOUBLE(7)    DIVIDE BY 10 (DROP ROUND DIGIT)
TIMEZ    EQU   *
         LA    R15,LINTTM
         MVC   3(10,R15),=X'4021204B20204B202020'
         ED    3(10,R15),DOUBLE+4
         CVD   R2,DOUBLE
         UNPK  0(3,R15),DOUBLE+6(2)
         OI    2(R15),X'F0'
         MVI   3(R15),C'.'
         CLI   4(R15),C' '
         BNE   *+8
         MVI   4(R15),C'0'
         SPACE
         BAL   R14,PRINTL
         MVC   LINE,LINE-1
PGPNEXT  EQU   *
         AH    R8,PGPSIZE
         LA    R1,1
         AH    R1,PGPNO
         STH   R1,PGPNO
         LH    R1,PGPNUM
         BCT   R1,PGPLOOP
         MVC   LINE,LINE-1
         BAL   R14,PRINTL
         MVC   LINPER,=C'ALL'
         L     R1,SUMSER
         CVD   R1,DOUBLE
         LA    R15,LINSER
         MVC   0(15,R15),=X'4020206B2020206B2020206B202120'
         ED    0(15,R15),DOUBLE+2
         L     R1,SUMTTX
         CVD   R1,DOUBLE
         LA    R15,LINTTX
         MVC   0(10,R15),=X'40206B2020206B202120'
         ED    0(10,R15),DOUBLE+4
         BAL   R14,PRINTL
         MVC   LINE,LINE-1
         BAL   R14,PRINTL
         B     READ
         SPACE
*              POWER:  INPUT R14-R15, DOUBLEWORD
*                      OUTPUT    R15, SINGLEWORD
*                                R14, SHIFT COUNT, MULTIPLIER
POWER    SR    R1,R1
POW10    LTR   R14,R14
         BZ    POW30
POW20    SRDL  R14,1
         LA    R1,1(,R1)
         B     POW10
POW30    LTR   R15,R15
         BM    POW20
         LR    R14,R1
         BR    R2
         SPACE
*              DIVIDE: INPUT R0-R1,   DIVIDEND
*                            R15      DIVISOR
*                            R14      SHIFT COUNT OF DIVISOR
*                      OUTPUT R0-R1   QUOTIENT
*                             R15     REMAINDER
*                             R14     SHIFT COUNT, + = DIVIDE
*                                                  - = MULT
DIVIDE   EQU   *
DIV00    CLR   R0,R15              IS R0 .GE. DIVISOR
         BL    DIV10               NO
         SRDL  R0,1                YES, DIVIDE DIVIDEND BY 2
         BCTR  R14,0               REMEMBER
         B     DIV00
DIV10    EQU   *
         SLDL  R0,1                MULTIPLY DIVIDEND BY 2
         CLR   R0,R15              WILL DIVIDE YIELD QUOTIENT > 31
         SRDL  R0,1                RESTORE DIVIDEND
         BL    DIV30               NO, GO DIVIDE
         SRDL  R0,1                YES, DIVIDE DIVIDEND BY 2
         BCTR  R14,0               REMEMBER
DIV30    EQU   *
         DR    R0,R15              DO THE DIVIDE
         LR    R15,R0              SAVE REMAINDER
         SR    R0,R0               EXTEND QUOTIENT W LEADING ZEROS
         LTR   R14,R14             ANY POWERS OF 2 TO RECONCILE?
         BM    DIV40               BR IF NEGATIVE POWERS
         SRDL  R0,0(R14)           RAISE PRODUCT TO PROPER POWER
         BR    R2                  EXIT
DIV40    LCR   R14,R14             MAKE POS
         SLDL  R0,0(R14)           REDUCE TO PROPER POWER
         BR    R2                  EXIT
         SPACE
SMFEOD   EQU   *
         B     EXIT0
         SPACE
HEX      MVC   1(1,R15),0(R1)      MOVE BYTE
         UNPK  0(3,R15),1(2,R15)   UNPACK
         TR    0(2,R15),HEXT-240
         LA    R15,2(,R15)         INCREMENT OUTPUT PTR
         LA    R1,1(,R1)           INCREMENT INPUT PTR
         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP
         MVI   0(R15),C' '         BLANK THE TRAILING BYTE
         BR    R14                 RETURN TO CALLER
HEXT     DC    C'0123456789ABCDEF' TRANSLATE TABLE
         SPACE
NUMBER   EQU   *
         MVC   FULL,0(R1)
         L     R1,FULL
         CVD   R1,DOUBLE
         MVC   0(9,R15),=X'40202020206B202120'
         ED    0(9,R15),DOUBLE+4
         MVC   0(8,R15),1(R15)
         MVI   8(R15),C' '
         BR    R14
         SPACE
JULIAN   EQU   *
         CLC   0(4,R1),JULIANI
         BER   R14
         MVC   JULIANI(4),0(R1)
         MVC   DOUBLE(4),0(R1)
         LH    R0,DOUBLE           GET 00YY
         SLL   R0,4                SHIFT TO 00000YY0
         STH   R0,DOUBLE+6
         OI    DOUBLE+7,X'0F'      SET SIGN
         XC    DOUBLE(6),DOUBLE
         CVB   R0,DOUBLE
         UNPK  JULIANO+6(2),DOUBLE+6(2)
         ST    R0,DOUBLE
         MVC   JULIANW(26),JULIAND SET DAYS PER MONTH
         TM    DOUBLE+3,X'03'      IS YEAR DIVISIBLE BY 4
         BNZ   JULIAN1             NO
         MVI   JULIANW+3,29        YES, CHANGE FEB TO 29
JULIAN1  EQU   *
         MVC   DOUBLE+4(4),0(R1)   GET 00YYDDDF
         XC    DOUBLE(6),DOUBLE    GET DDDF
         CVB   R1,DOUBLE           GET DDD IN BINARY
         LA    R15,2               INDEX FOR TABLE
         LR    R0,R15              INDEX INCREMENT
JULIAN2  EQU   *
         CH    R1,JULIANW-2(R15)   DAY .LT. OR .EQ. ENTRY
         BNH   JULIAN3             YES, BRANCH
         SH    R1,JULIANW-2(R15)   NO, SUBTRACT ENTRY FROM DDD
         ALR   R15,R0              ADD 2 TO INDEX
         B     JULIAN2             LOOP
JULIAN3  EQU   *
         SRL   R15,1               HALVE INDEX TO GET MM
         CVD   R1,DOUBLE           CONVERT DD TO PACKED
         OI    DOUBLE+7,X'0F'      SET SIGN OF DD
         UNPK  JULIANO+3(2),DOUBLE+6(2) UNPACK DD
         CVD   R15,DOUBLE          CONVERT MM TO PACKED
         OI    DOUBLE+7,X'0F'      SET SIGN OF MM
         UNPK  JULIANO+0(2),DOUBLE+6(2) UNPACK MM
         MVI   JULIANO+2,C'/'
         MVI   JULIANO+5,C'/'
         BR    R14
         SPACE
JULIAND  DC    H'31,28,31,30,31,30,31,31,30,31,30,31,999'
         SPACE
TIMEX    EQU   *
         MVC   DOUBLE(4),0(R1)
         L     R1,DOUBLE
         SLR   R0,R0
         D     R0,=F'360000'
         CVD   R1,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  0(2,R15),DOUBLE+6(2)
         MVI   2(R15),C'.'
         SRDL  R0,32
         D     R0,=F'6000'
         CVD   R1,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  3(2,R15),DOUBLE+6(2)
         MVI   5(R15),C'.'
         SRDL  R0,32
         D     R0,=F'100'
         CVD   R1,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  6(2,R15),DOUBLE+6(2)
         BR    R14
         SPACE
PRINTL   LA    R1,LINE
         LA    R0,133
PRINT    STM   R14,R2,PRINTS
         LA    R2,MYDCBP
         CP    CTRLIN,CTRMAX
         BNH   *+10
         ZAP   CTRLIN,=P'0'
         CP    CTRLIN,=P'0'
         BE    PRINTH
PRINTD   EQU   *
         MVC   PRINTA,PRINTA-1
         L     R14,PRINTS+8        GET LENGTH FROM R0
         L     R1,PRINTS+12        RELOAD R1
         LTR   R14,R14             LENGTH IN R0 = ZERO?
         BNP   PRINTD1             YES - PRINT BLANK LINE
         CH    R14,=H'133'         TOO LONG?
         BNH   *+8                 NO - BRANCH AROUND NEXT INS
         LH    R14,=H'133'         YES - TRUNCATE IT
         BCTR  R14,0               LENGTH MINUS 1 FOR EX
         B     *+10
         MVC   PRINTA+0(0),0(R1)   MOVE DATA
         EX    R14,*-6
PRINTD1  EQU   *
         LA    R1,MYDCBP
         PUT   (1),PRINTA
         AP    CTRLIN,=P'1'
         LM    R14,R2,PRINTS
         BR    R14
PRINTH   EQU   *
         AP    CTRPAG,=P'1'
         MVC   PRINTA,PRINTA-1
         MVI   PRINTA,C'1'         CARRIAGE CONTROL
         MVC   PRINTA+44(L'HEAD1A),HEAD1A
         PUT   (R2),PRINTA
         SPACE
         MVC   PRINTA,PRINTA-1
         LA    R15,PRINTA+121-9
         MVC   3(6,R15),=X'402020202020'
         ED    3(6,R15),CTRPAG
         MVC   0(4,R15),=C'PAGE'
         PUT   (R2),PRINTA
         SPACE
         MVC   PRINTA,PRINTA-1
         MVC   PRINTA+1(L'HEAD3S),HEAD3S
         MVC   PRINTA+13(L'HEAD3A),HEAD3A
         MVC   PRINTA+65(L'HEAD3B),HEAD3B
         MVC   PRINTA+48(4),HEADSID
         MVC   PRINTA+70(8),HEADDAT
         MVC   PRINTA+99(9),HEADINT
         PUT   (R2),PRINTA
         SPACE
         MVC   PRINTA,PRINTA-1
         MVC   PRINTA+1(8),HEADTME
         MVC   PRINTA+13(L'HEAD4A),HEAD4A
         MVC   PRINTA+65(L'HEAD4B),HEAD4B
         MVC   PRINTA+18(8),HEADRLS                              JDM1
         MVC   PRINTA+51(3),HEADMFV                              JDM1
         MVC   PRINTA+70(8),HEADIST
         MVC   PRINTA+90(8),HEADIPS
         PUT   (R2),PRINTA
         SPACE
         MVC   PRINTA,PRINTA-1
         PUT   (R2),PRINTA
         PUT   (R2),PRINTA
         MVC   PRINTA+1(L'HEAD5A),HEAD5A
         MVC   PRINTA+49(L'HEAD5B),HEAD5B
         MVC   PRINTA+91(L'HEAD5C),HEAD5C
         PUT   (R2),PRINTA
         SPACE
         MVC   PRINTA,PRINTA-1
         MVC   PRINTA+1(L'HEAD6A),HEAD6A
         MVC   PRINTA+49(L'HEAD6B),HEAD6B
         MVC   PRINTA+91(L'HEAD6C),HEAD6C
         PUT   (R2),PRINTA
         SPACE
         MVC   PRINTA,PRINTA-1
         MVC   PRINTA+1(L'HEAD7A),HEAD7A
         MVC   PRINTA+49(L'HEAD7B),HEAD7B
         MVC   PRINTA+91(L'HEAD7C),HEAD7C
         PUT   (R2),PRINTA
         SPACE
         MVC   PRINTA,PRINTA-1
         PUT   (R2),PRINTA
         PUT   (R2),PRINTA
         B     PRINTD
         SPACE
EXIT12   LA    R15,12
         B     EXITR
EXIT0    SLR   R15,R15
EXITR    ST    R15,RC
         TM    SWITCH,X'80'        IS SYSUT1 OPEN?
         BZ    NOCS                NO - BRANCH
         LA    R1,MYCLOSE
         MVI   0(R1),X'80'
         LA    R5,MYDCBS
         CLOSE ((R5)),MF=(E,(1))
NOCS     EQU   *
         TM    SWITCH,X'40'        IS SYSPRINT OPEN?
         BZ    NOCP                NO - BRANCH
         LA    R1,MYCLOSE
         MVI   0(R1),X'80'
         LA    R4,MYDCBP
         CLOSE ((R4)),MF=(E,(1))
NOCP     EQU   *
         L     R15,RC
         SPACE 1
EXIT     LR    1,13
         L     13,4(,13)
         ST    15,16(,13)
         FREEMAIN R,A=(1),LV=MYDSECTL
         LM    14,12,12(13)
         BR    14
         SPACE
************************************************************
*        CONSTANTS                                         *
************************************************************
         SPACE
MSG01    WTO   'SMF72RP  UNABLE TO OPEN SYSPRINT',               JDM1  +
               ROUTCDE=(11),MF=L                                 JDM1
         SPACE
MSG02    DC    C'*** ERROR ***  UNABLE TO OPEN SYSUT1'
MSG03    DC    C'*** ERROR ***  UNABLE TO OPEN SYSUT2'
         SPACE
         PRINT NOGEN
         SPACE
DCBP     DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=(PM),                    +
               RECFM=FBA,LRECL=133,BLKSIZE=133
DCBPL    EQU   *-DCBP
         SPACE
DCBS     DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=(GL),BFTEK=A,              X
               LRECL=32756,BLKSIZE=32760                         JDM1
DCBSL    EQU   *-DCBS
         SPACE
HEAD1A   DC    C'W O R K L O A D   A C T I V I T Y'
HEAD3S   DC    C'SMF'
HEAD3A   DC    C'OS/MVS/XA                SYSTEM ID'
HEAD3B   DC    C'DATE                     INTERVAL'
HEAD4A   DC    C'REL                      RMF  VERSION'          JDM1
HEAD4B   DC    C'TIME                     IEAIPS'
HEAD5A   DC    C'PERFORM        PERFORM        SERVICE'
HEAD6A   DC    C'GROUP          GROUP          IN'
HEAD7A   DC    C'NUMBER         PERIOD         INTERVAL'
HEAD5B   DC    C'AVERAGE                    AVERAGE'
HEAD6B   DC    C'TRANS.       WORKLOAD      TRANS-'
HEAD7B   DC    C'SRV RATE     LEVEL         ACTIONS'
HEAD5C   DC    C'ENDED          AVERAGE TIME OF'
HEAD6C   DC    C'TRANS-         ENDED TRANS.'
HEAD7C   DC    C'ACTIONS        HHH.MM.SS.TTT'
         LTORG
OFLGS    EQU   48
RECFM    EQU   36
LRECL    EQU   82
BLKSI    EQU   62
EODAD    EQU   32
EXLST    EQU   36
         SPACE
************************************************************
*        DSECTS                                            *
************************************************************
         SPACE
MYDSECT  DSECT
         DS    18F                 REGISTER SAVEAREA
MYOPEN   DS    F
MYCLOSE  DS    F
MYDCBP   DS    0F,(DCBPL)X
MYDCBS   DS    0F,(DCBSL)X
SWITCH   DS    F
OPT      DS    F
PARMLO   DS    PL3
PARMHI   DS    PL3
RC       DS    F
SMFVL    DS    F
UT2EXL   DS    F
JULIANI  DS    F
JULIANO  DS    CL8
JULIANW  DS    13H
DOUBLE   DS    D
HALF     EQU   DOUBLE,2
FULL     EQU   DOUBLE,4
PREVIOUS DS    CL8
WORK     DS    CL10
PGPNO    DS    H
PGPNUM   DS    H
PGPSIZE  DS    H
SUMSER   DS    F
SUMTTX   DS    F
HEADSID  DS    CL4
HEADDAT  DS    CL8
HEADINT  DS    CL9
HEADRLS  DS    CL8
HEADMFV  DS    CL3
HEADIST  DS    CL8
HEADIPS  DS    CL8
HEADDTE  DS    CL8
HEADTME  DS    CL8
PRINTS   DS    5F
CTRPAG   DS    PL3
CTRLIN   DS    PL2
CTRMAX   DS    PL2
         DS    C                   PRINTA-1
PRINTA   DS    CL133
         DS    C                   LINE-1
LINE     DS    CL133
         ORG   LINE
         DS    C
LINSUB   DS    CL3
         DS    CL12
LINPER   DS    CL3
         DS    CL6
LINSER   DS    CL15
         DS    CL1
LINRATE  DS    CL15
         DS    CL7
LINLEV   DS    CL7
         DS    CL1
LINACT   DS    CL13
         DS    CL4
LINTTX   DS    CL10
         DS    CL8
LINTTM   DS    CL13
         ORG   LINE+133
         DS    0D
MYDSECTL EQU   *-MYDSECT
         SPACE
         PRINT ON,NOGEN
*        MACRO IS FOUND IN SYS1.RMFMAC01                         JDM1
         ERBSMF72                                                JDM1
         END
