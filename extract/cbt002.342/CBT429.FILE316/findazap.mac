         TITLE '   F I N D A Z A P '
***********************************************************************
*                                                                     *
*  FINDAZAP: FIND A STRING IN A LOAD MODULE AND MAKE A ZAP.           *
*                                                                     *
*  'FINDAZAP' WAS WRITTEN TO SIMPLIFY THE SYSTEMS SUPPORT TASK        *
*  OF FINDING CERTAIN INSTRUCTIONS OR CONSTANTS IN A LOAD MODULE      *
*  AND CHANGING THEM.  THE PROGRAM DOES NOT DIRECTLY CHANGE THE       *
*  LOAD MODULE, BUT GENERATES CONTROL STATEMENTS FOR THE MVS          *
*  SERVICE AID PROGRAM 'AMASPZAP' WHICH COULD BE RUN SEPARATELY.      *
*                                                                     *
*  THIS PROGRAM FINDS ALL OCCURRENCES OF A SPECIFIED STRING           *
*  (UNLESS THE STRING SPANS 2 RECORDS) AND OPTIONALLY GENERATES       *
*  AMASPZAP STATEMENTS THAT COULD BE USED TO CHANGE THE STRING        *
*  TO A NEW VALUE OF EQUAL LENGTH.                                    *
*                                                                     *
*  'FINDAZAP' USES THE FOLLOWING DDNAMES:                             *
*    .  SYSPRINT - THE LOG AND MESSAGE OUTPUT,                        *
*    .  SYSIN    - THE CONTROL STATEMENT INPUT,                       *
*    .  SYSLIB   - THE PARTITIONED DATA SET CONTAINING                *
*                  THE MEMBER(S) TO BE PROCESSED.                     *
*    .  SYSPUNCH - OPTIONAL OUTPUT FILE FOR AMASPZAP                  *
*                  CONTROL STATEMENTS.                                *
*                                                                     *
*  WARNING - THIS PROGRAM IS INTENDED TO BE A TOOL FOR PEOPLE         *
*  WHO ALREADY HAVE EXPERIENCE MAKING ZAPS TO LOAD MODULES.           *
*  IN MANY CASES, PROBABLY IN MOST CASES, THE OUTPUT OF THIS          *
*  PROGRAM WILL NOT BE EXACTLY WHAT IS NEEDED FOR THE INTENDED        *
*  LOGICAL CHANGE, BUT MUST BE CAREFULLY EXAMINED, COMPARED           *
*  AGAINST SOURCE LISTINGS AND AMASPZAP DUMPS, SO EACH CHANGE         *
*  IS COMPLETELY UNDERSTOOD.  MANY TIMES A STRING IS FOUND THAT       *
*  HAS NO RELATION TO THE STRING THAT NEEDS TO BE CHANGED, BUT        *
*  JUST HAPPENS TO MATCH BY SHEER COINCIDENCE.  THE SHORTER           *
*  THE STRING, THE MORE COINCIDENTAL MATCHES WILL BE FOUND.           *
*  SOME STRINGS ARE NOT FOUND BECAUSE THEY SPAN 2 RECORDS.            *
*  IF THIS PROGRAM IS NOT USED WITH EXTREME CARE, IF IT IS            *
*  PRESUMED TO BE MORE THAN THE CRUDE STRING-FINDER THAT IT IS,       *
*  IT WILL PROBABLY DO MORE HARM THAN GOOD.                           *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*  'FINDAZAP' CONTROL STATEMENTS                                      *
*                                                                     *
*  CONTROL STATEMENTS ARE 80-CHARACTER RECORDS, IN WHICH              *
*  ONLY THE FIRST 72 CHARACTERS ARE SCANNED.  THE LAST                *
*  8 POSITIONS ARE IGNORED, AND ARE NOT LISTED ON THE LOG.            *
*                                                                     *
*  A CONTROL STATEMENT CONSISTS OF AN OPERATION AND ONE               *
*  OR MORE OPERANDS.  THE OPERATION MAY BEGIN IN COLUMN 1 OR          *
*  MAY BE PRECEDED BY ONE OR MORE BLANKS.                             *
*  ONE OR MORE OPERANDS FOLLOW THE OPERATION, SEPARATED               *
*  FROM IT AND FROM EACH OTHER BY ONE OR MORE BLANKS.                 *
*  STATEMENTS MAY NOT BE CONTINUED.                                   *
*                                                                     *
*  A STATEMENT CONTAINING ALL BLANKS WILL BE TREATED AS A             *
*  COMMENT AND MERELY LOGGED.  IF THE FIRST NONBLANK                  *
*  CHARACTER ON A STATEMENT IS AN ASTERISK (*), THE                   *
*  STATEMENT WILL BE TREATED AS A COMMENT.                            *
*                                                                     *
*  THE 'NAME' STATEMENT CONSISTS OF THE OPERATION 'NAME'              *
*  FOLLOWED BY THE MEMBER NAME OF THE LOAD MODULE, FOLLOWED           *
*  (OPTIONALLY) BY THE NAME OF THE CSECT OR THE WORD 'ALL'.           *
*                                                                     *
*  THE 'FIND' STATEMENT CONTAINS THE OPERATION 'FIND'                 *
*  OR 'F' FOLLOWED BY THE VALUE TO BE FOUND, IN HEX.                  *
*  FOR EXAMPLE: FIND C1C2,C3C4                                        *
*  WOULD CAUSE ALL OCCURRENCES OF 'ABCD' TO BE LISTED.                *
*                                                                     *
*  THE 'CHANGE' STATEMENT CONTAINS THE OPERATION 'CHANGE'             *
*  OR 'C' FOLLOWED BY THE OLD AND NEW VALUES, IN HEX.                 *
*  FOR EXAMPLE: CHANGE C1C2,C3C4 E4E2,C5D9                            *
*  WOULD CAUSE ALL OCCURRENCES OF 'ABCD' TO BE LISTED                 *
*  AND CHANGED TO 'USER' (BY PUNCHING AMASPZAP STATEMENTS).           *
*                                                                     *
*  THE STRINGS IN THE 'FIND' AND 'CHANGE' STATEMENTS                  *
*  MAY BE SPECIFIED IN EBCDIC INSTEAD OF HEX BY ENCLOSING             *
*  EACH STRING IN QUOTES (APOSTROPHES).  FOR EXAMPLE:                 *
*  CHANGE 'ABCD' 'USER'                                               *
*                                                                     *
*  THE 'OPTION' STATEMENT CONTAINS THE OPERATION 'OPTION'             *
*  FOLLOWED BY ANY OF THE FOLLOWING WORDS -                           *
*  FLUSH   - CONTROL STATEMENTS WILL BE FLUSHED IF AN ERROR OCCURS.   *
*  NOFLUSH - CONTROL STATEMENTS WILL NOT BE FLUSHED.                  *
*  LOG     - CONTROL STATEMENTS WILL BE LOGGED ON SYSPRINT.           *
*  NOLOG   - CONTROL STATEMENTS WILL NOT BE LOGGED.                   *
*  MSG     - ALL MESSAGES WILL BE ISSUED.                             *
*  NOMSG   - ONLY ERROR MESSAGES WILL BE ISSUED.                      *
*  THE DEFAULTS AT THE START OF THE PROGRAM ARE FLUSH, LOG, MSG.      *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*  THE PARM FIELD MAY BE USED TO SPECIFY OPTIONS.  IF THESE LETTERS   *
*  APPEAR ANYWHERE IN THE PARM, AND ARE NOT PRECEDED BY THE LETTER    *
*  'N', THEY ARE INTERPRETED AS FOLLOWS -                             *
*     F - FLUSH   L - LOG   M - MSG                                   *
*     D - DEBUG (MESSAGE FOR EACH RECORD PROCESSED)                   *
*  IF THE LETTER IS PRECEDED BY AN 'N', THE OPTION IS TURNED OFF.     *
*                                                                     *
*  IF THIS PROGRAM IS INVOKED BY ANOTHER PROGRAM, ALTERNATE           *
*  DDNAMES MAY BE PASSED AS PARAMETERS IN AN AREA POINTED TO BY       *
*  THE SECOND WORD IN THE PARM LIST (THE SAME CONVENTION USED         *
*  IN IBM UTILITIES AND COMPILERS). THE AREA CONSISTS OF A            *
*  HALFWORD LENGTH FIELD FOLLOWED BY A TABLE OF 8-BYTE DDNAMES.       *
*  THE FIRST 4 ENTRIES IN THE TABLE ARE IGNORED. ENTRIES              *
*  5, 6, 8, AND 9 ARE FOR SYSIN, SYSPRINT, SYSLIB, AND SYSPUNCH.      *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        'FINDAZAP'                                                   *
*                                                                     *
***********************************************************************
         SPACE
* WRITTEN BY BILL GODFREY, PRC INC.
*  (PRC INC. OF MCLEAN, VIRGINIA, WAS FORMERLY PLANNING RESEARCH CORP.)
* CURRENT INSTALLATION:
*  NOAA (NATIONAL OCEANIC AND ATMOSPHERIC ADMINISTRATION),
*  5200 AUTH ROAD, CAMP SPRINGS, MARYLAND 20746
* DATE WRITTEN. JULY 9 1980.
* DATE UPDATED. APRIL 25 1991.
* ATTRIBUTES. RE-ENTRANT.
* DISCLAIMER: NO GUARANTEE; NO WARRANTY; INSTALL/USE AT YOUR OWN RISK.
* DESCRIPTION.
*     THIS PROGRAM FINDS STRINGS IN A LOAD MODULE.
*        LOG OF CHANGES.
*         03SEP80 - LAST CHANGE BEFORE 06OCT82.
*         06OCT82 - ADD OPEN EXIT TO SYSLIB TO ZERO OPTCD.
*         08NOV82 - WHEN READING IN CESD RECORDS,
*                   STOP READING IF NON-CESD RECORD IS FOUND.
*                   ONLY SYM RECORDS MAY PRECEDE CESD RECORDS.
*                   SOLVES 0C4 PROBLEM WHEN FIRST BYTE OF TEXT
*                   IS X'20' (CESD RECORD ID).
*                 - MAKE ESDSIZE A CONSTANT SO IT CAN BE
*                   ZAPPED IF NECESSARY.
*         28OCT83 - ESDSIZE INCREASED FROM 32000 TO 48000.
*                   ISSUE MESSAGE IF ESD AREA TOO SMALL.
*         25APR91 - SYSLIB OPENED FOR INPUT ONLY.
*                   IN COMMENTS ABOUT CESD RECORD FORMAT,
*                   OFFSET 1 LENGTH 1 IS NO LONGER SPARE BUT FLAG.
*                   IN COMMENTS ABOUT CONTROL (CCW) RECORD FORMAT,
*                   OFFSET 3 LENGTH 1 IS NO LONGER SPARE BUT RLD COUNT.
*
***********************************************************************
*
*        LOAD MODULE RECORD FORMATS
*             OFFSET  LENGTH  DESCRIPTION
*
*        SYM     0       1    IDENTIFICATION X'40'
*
*        CESD    0       1    IDENTIFICATION X'20'
*                1       1    IF X'80' BYTE 12 OF ITEMS NOT SEG NUMBERS
*                2       2    SPARE, BINARY ZEROES
*                4       2    ESDID OF FIRST ESD ITEM
*                6       2    COUNT, IN BYTES, OF ESD DATA
*                8     240    UP TO 240 BYTES OF ESD DATA,
*                             UP TO 15 ENTRIES, 16 BYTES EACH
*
*        SCT     0       1    IDENTIFICATION X'10' SCATTER/TRANSLATION
*
*        CCW     0       1    IDENTIFICATION X'01' OR X'05' OR X'0D'
*                1       2    SPARE, BINARY ZEROES
*                3       1    COUNT, IN BYTES, OF RLD AND/OR CCW/RLD
*                             RECORDS FOLLOWING NEXT TEXT RECORD
*                4       2    LENGTH OF CONTROL DATA FOLLOWING CCW
*                6       2    COUNT, BINARY ZEROES
*                8       8    CCW TO READ TEXT RECORD THAT FOLLOWS.
*                             LINK-ASSIGNED ADDRESS, LENGTH OF RECORD.
*               16     240    CONTROL DATA, UP TO 60 4-BYTE ENTRIES.
*                             EACH ENTRY IS A 2 BYTE CESD ENTRY NUMBER
*                             AND A 2-BYTE CSECT SECTION SIZE.
*
*        RLD     0       1    IDENTIFICATION X'02' OR X'06' OR X'0E'
*                1       3    SPARE, BINARY ZEROES
*                4       2    COUNT, BINARY ZEROES
*                6       2    COUNT, IN BYTES, OF RLD DATA
*                8       8    SPARE, BINARY ZEROES
*               16     240    RLD DATA
*
*        CCW/    0       1    IDENTIFICATION X'03' OR X'07' OR X'0F'
*         RLD    1       3    SPARE, BINARY ZEROES
*                4       2    COUNT, IN BYTES, OF CONTROL DATA
*                6       2    COUNT, IN BYTES, OF RLD DATA
*                8       8    CCW TO READ FOLLOWING TEXT RECORD
*               16     240    RLD DATA FOLLOWED BY CONTROL DATA
*
*        IDR     0       1    IDENTIFICATION X'80'
         SPACE
         MACRO
&NAME    PARMC &C,&B
&NAME    CLI   0(R1),C'&C'         IS CHARACTER PRESENT?
         BNE   *+20                NO, SKIP REMAINING INSTRUCTIONS
         OI    OPTIONS,&B          YES, SET BIT ON
         CLI   1(R2),C'N'          IS CHARACTER PRECEDED BY 'N'?
         BNE   *+8                 NO, SKIP NEXT INSTRUCTION
         NI    OPTIONS,255-&B      YES, SET BIT OFF
         MEND
         SPACE
FINDAZAP START
         USING *,R10,R11
         B     @PROLOG-*(,15)
         DC    AL1(11),CL11'FINDAZAP'
         DC    CL16' &SYSDATE &SYSTIME '
@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)  SUBPOOL AND LENGTH
@PROLOG  STM   14,12,12(13)
         LR    R10,15              BASE REGISTER
         LA    R15,4095
         LA    R11,1(R15,R10)      BASE REGISTER
         LR    R7,R1               PARM LIST ADDRESS
         L     R0,@SIZE
         GETMAIN R,LV=(0)
         ST    13,4(,1)            CHAIN SAVEAREAS
         ST    1,8(,13)            CHAIN SAVEAREAS
         LR    13,1                NEW SAVEAREA POINTER
         USING @DATA,R13
         SPACE 1
         SLR   R15,R15
         ST    R15,COUNTIN
         STH   R15,RC
         MVI   SW,0
         MVI   OPTIONS,#DEFAULT    DEFAULT OPTIONS
         L     R2,0(,R7)           PARM
         LH    R0,0(,R2)           PARM LENGTH
         LTR   R0,R0               IS PARM PRESENT
         BZ    NOPARM              NO, BRANCH
         LA    R1,2(,R2)           POINT TO PARM DATA
PARMLOOP EQU   *
         PARMC L,#L                LOG CONTROL STATEMENTS
         SPACE
         PARMC M,#M                NORMAL MESSAGES
         SPACE
         PARMC F,#F                FLUSH AFTER FIRST ERROR
         SPACE
         PARMC D,#D                DEBUG
         SPACE
         LA    R1,1(,R1)           POINT TO NEXT CHARACTER
         LA    R2,1(,R2)           POINT TO NEXT CHARACTER MINUS 2
         BCT   R0,PARMLOOP         CONTINUE SCAN
NOPARM   EQU   *
         MVC   REPORTPG,=H'0'      INITIAL PAGE COUNTER
         MVC   REPORTLN,=H'0'      INITIAL LINE COUNTER
         MVC   REPORTMX,=H'50'     INITIAL LINES PER PAGE
         MVI   REPORTO-1,X'40'     BLANK PROPOGATOR
         MVI   LINE-1,X'40'        BLANK PROPOGATOR
         MVI   STATUS,0
         EJECT
************************************************************
*                                                          *
*        OPEN THE DCB'S                                    *
*                                                          *
************************************************************
         SPACE
         MVC   PRTDCBW(PRTDCBL),PRTDCB
         MVC   CTLDCBW(CTLDCBL),CTLDCB
         MVC   LIBDCBW(LIBDCBL),LIBDCB
         MVC   PUNDCBW(PUNDCBL),PUNDCB
         LA    R3,PRTDCBW
         LA    R4,CTLDCBW
         LA    R5,LIBDCBW
         LA    R6,PUNDCBW
         SPACE
         TM    0(R7),X'80'         IS THERE ONLY ONE PARM ADDRESS
         BO    DDLISTX             YES, BRANCH, NO DDNAME LIST
         L     R2,4(,R7)           POINT TO DDNAME LIST
         LH    R0,0(,R2)           GET LENGTH OF DDNAME LIST
         LA    R2,2(,R2)           POINT TO FIRST ENTRY
         SPACE
         CH    R0,=H'40'           ARE THERE AT LEAST 5 ENTRIES
         BL    DDLISTX             NO, BRANCH
         CLI   32(R2),0            IS THERE A NAME PRESENT
         BE    *+10                NO, LEAVE UNCHANGED
         MVC   DDNAM(8,R4),32(R2)  YES, REPLACE SYSIN
         SPACE
         CH    R0,=H'48'           ARE THERE AT LEAST 6 ENTRIES
         BL    DDLISTX             NO, BRANCH
         CLI   40(R2),0            IS THERE A NAME PRESENT
         BE    *+10                NO, LEAVE UNCHANGED
         MVC   DDNAM(8,R3),40(R2)  YES, REPLACE SYSPRINT
         SPACE
         CH    R0,=H'64'           ARE THERE AT LEAST 8 ENTRIES
         BL    DDLISTX             NO, BRANCH
         CLI   56(R2),0            IS THERE A NAME PRESENT
         BE    *+10                NO, LEAVE UNCHANGED
         MVC   DDNAM(8,R5),56(R2)  YES, REPLACE SYSLIB
         SPACE
         CH    R0,=H'72'           ARE THERE AT LEAST 9 ENTRIES
         BL    DDLISTX             NO, BRANCH
         CLI   64(R2),0            IS THERE A NAME PRESENT
         BE    *+10                NO, LEAVE UNCHANGED
         MVC   DDNAM(8,R6),64(R2)  YES, REPLACE SYSPUNCH
DDLISTX  EQU   *
         SPACE
         IC    R0,EXLST(,R3)
         LA    R14,PRTEXLST
         ST    R14,EXLST(,R3)
         STC   R0,EXLST(,R3)       SYSPRINT EXLST=PRTEXLST
         SPACE
         LA    R0,PRTEXO
         ST    R0,0(,R14)
         MVI   0(R14),X'85'        DCB EXIT
         SPACE
         IC    R0,EODAD(,R4)
         LA    R14,EODCTL
         ST    R14,EODAD(,R4)
         STC   R0,EODAD(,R4)       SYSIN EODAD=EODCTL
         SPACE
         IC    R0,EXLST(,R5)
         LA    R14,LIBEXLST
         ST    R14,EXLST(,R5)
         STC   R0,EXLST(,R5)       SYSLIB EXLST=LIBEXLST
         SPACE
         LA    R0,LIBEXOPN         OPEN EXIT ENTRY POINT
         ST    R0,0(,R14)
         MVI   0(R14),X'05'        OPEN EXIT
         LA    R0,JFCB
         ST    R0,4(,R14)
         MVI   4(R14),X'87'        JFCB EXIT
         SPACE
         IC    R0,EXLST(,R6)
         LA    R14,PUNEXLST
         ST    R14,EXLST(,R6)
         STC   R0,EXLST(,R6)       SYSPRINT EXLST=PRTEXLST
         SPACE
         LA    R0,PUNEXO
         ST    R0,0(,R14)
         MVI   0(R14),X'85'        DCB EXIT
         SPACE
         LA    R7,OPEN
         MVI   0(R7),128
         SPACE
         OPEN  ((R3),OUTPUT),MF=(E,(R7))
         SPACE
         TM    OFLGS(R3),X'10'
         BO    OKPRT
         LA    R15,16
         B     EXIT
PRTEXO   CLC   BLKSI(2,R1),=H'0'   IS BLKSIZE PRESENT
         BNER  R14                 YES, USE IT
         MVC   BLKSI(2,R1),LRECL(R1) NO, MAKE IT SAME AS LRECL
         NI    RECFM(R1),255-X'10' CHANGE RECFM TO UNBLOCKED
         BR    R14
OKPRT    OI    STATUS,OPENP        SYSPRINT IS OPEN
         SPACE
         OPEN  ((R4),INPUT),MF=(E,(R7))
         SPACE
         TM    OFLGS(R4),X'10'
         BO    OKCTL
         LA    R15,16
         B     EXIT
OKCTL    OI    STATUS,OPENC        SYSIN IS OPEN
         SPACE
         OPEN  ((R5),INPUT),MF=(E,(R7))
         B     OPENTM
         SPACE
LIBEXOPN MVI   OPTCD(R5),0
         BR    R14
         SPACE
OPENTM   TM    OFLGS(R5),X'10'
         BO    OKLIB
         LA    R15,16
         B     EXIT
OKLIB    OI    STATUS,OPENL        SYSLIB IS OPEN
         SPACE
         RDJFCB ((R5)),MF=(E,(R7))
         SPACE
         L     R0,=A(BUFF1L+BUFF2L)
         A     R0,ESDSIZE          ROOM FOR 2000 ESD ENTRIES
         ST    R0,GETSIZ
         GETMAIN R,LV=(0)
         ST    R1,BUFF1A           POINTER TO BUFFER1
         A     R1,=A(BUFF1L)       POINT PAST BUFFER1 TO BUFFER2
         ST    R1,BUFF2A           POINTER TO BUFFER2
         A     R1,=A(BUFF2L)       POINT PAST BUFFER2 TO ESD TABLE
         ST    R1,ESDPTR           POINTER TO ESD TABLE
         A     R1,ESDSIZE
         ST    R1,ESDEND
         OI    STATUS,GETMN
         SPACE
         LA    R4,DDNAM(,R6)       SYSPUNCH DDNAME
         DEVTYPE (R4),DEVDATA
         LTR   R15,R15             IS DDNAME ALLOCATED
         BNZ   NOPUNCH             NO, BRANCH
         SPACE
         OPEN  ((R6),OUTPUT),MF=(E,(R7))
         SPACE
         TM    OFLGS(R6),X'10'
         BO    OKPUN
         LA    R15,16
         B     EXIT
PUNEXO   CLC   BLKSI(2,R1),=H'0'   IS BLKSIZE PRESENT
         BNER  R14                 YES, USE IT
         MVC   BLKSI(2,R1),LRECL(R1) NO, MAKE BLKSIZE SAME AS LRECL
         NI    RECFM(R1),255-X'10' CHANGE RECFM TO UNBLOCKED
         BR    R14
OKPUN    OI    STATUS,OPENZ        SYSPUNCH IS OPEN
NOPUNCH  EQU   *
         SPACE
         MVC   LINE,LINE-1         MAKE A BLANK LINE
         BAL   R14,REPORT          WRITE BLANK LINE TO FORCE HEADING
         EJECT
************************************************************
*                                                          *
*        READ A CONTROL STATEMENT                          *
*                                                          *
************************************************************
         SPACE
READCTL  EQU   *
         CLI   RC+1,0              HAS THERE BEEN AN ERROR
         BE    READGET             NO, SKIP FLUSH CHECK
         TM    OPTIONS,#F          YES, IS OPTION FLUSH
         BO    FLUSH               YES, GO FLUSH REMAINING CARDS
READGET  EQU   *
         LA    R4,CTLDCBW
         GET   (R4),INREC          READ A CONTROL STATEMENT
         SPACE
         L     R1,COUNTIN
         A     R1,=F'1'            COUNT CONTROL STATEMENTS
         ST    R1,COUNTIN
         TR    INREC(72),CAPS      CONVERT ANY LOWER CASE TO UPPER
         MVC   LINE,LINE-1         CLEAR THE PRINT LINE
         TM    OPTIONS,#L          LOG
         BZ    NOLOG               BRANCH IF NOLOG
         MVC   MID(6),=C'MSG000'
         MVC   TXT(72),INREC       MOVE STMT TO PRINT LINE
         BAL   R14,REPORT          LOG THE STATEMENT
NOLOG    EQU   *
         SPACE
************************************************************
*                                                          *
*         PARSE THE CONTROL STATEMENT                      *
*                                                          *
************************************************************
         SPACE
         LA    R15,INREC           POINT TO COLUMN 1
         LA    R3,72-1             LENGTH CODE OF CONTROL STATEMENT
         LA    R6,ODL              POINT TO OPERAND DESCRIPTOR LIST
         XC    0(ODLL,R6),0(R6)    ZERO THE ODL
         SR    R1,R1               INSURE HI ORDER BYTE ZERO
         LA    R0,ODLL/8-1         NUMBER OF ENTRIES IN O.D.L.
*                                  MINUS 1 (LAST ODE WILL REMAIN ZERO)
         B     LOOP
TRTNONBL TRT   0(0,R15),TABNONBL   (EXECUTED)
TRTBLANK TRT   0(0,R15),TABBLANK   (EXECUTED)
TRTQUOTE TRT   0(0,R15),TABQUOTE   (EXECUTED)
LOOP     XC    0(8,R6),0(R6)       ZERO THE OPERAND DESCRIPTOR ENTRY
         EX    R3,TRTNONBL         FIND A NONBLANK
         BZ    DONE                BRANCH IF ALL BLANKS
         LR    R14,R1              GET ADDRESS OF STRING
         SR    R14,R15             GET LENGTH OF PRECEDING BLANKS
         SR    R3,R14              GET LENGTH OF REMAINING TEXT
         LR    R15,R1              GET ADDRESS OF NONBLANK
         CLI   0(R15),QUOTE        DOES OPERAND BEGIN WITH A QUOTE
         BE    PQUOTE              YES, BRANCH
         EX    R3,TRTBLANK         FIND A BLANK
         BZ    LAST                BRANCH IF NOT FOUND
         LR    R14,R1              GET ADDRESS OF BLANK
         SR    R14,R15             GET LENGTH OF FIELD
         OI    6(R6),PRESENT       OPERAND PRESENT
         ST    R15,0(,R6)          ADDRESS OF OPERAND
         STH   R14,4(,R6)          LENGTH OF OPERAND
         SR    R3,R14              GET LENGTH CODE OF REMAINING TEXT
         BZ    DONE                BRANCH IF ONE TRAILING BLANK
         LR    R15,R1              POINT TO BLANK
PNEXT    LA    R6,8(,R6)           POINT TO NEXT O.D.E.
         BCT   R0,LOOP             GO PROCESS NEXT OPERAND
         B     DONE                MAX OPERANDS PROCESSED
PQUOTE   LA    R15,1(,R15)         POINT PAST QUOTE
         LA    R1,1                VALUE 1
         SR    R3,R1               REDUCE LENGTH CODE BY 1
         BM    DONE                IGNORE QUOTE IN LAST COLUMN
         EX    R3,TRTQUOTE         FIND THE NEXT QUOTE
         BZ    LASTQ               NOT FOUND, USE ALL REM TEXT
         LR    R14,R1              GET ADDRESS OF QUOTE
         SR    R14,R15             GET LENGTH OF FIELD
         OI    6(R6),PRESENT+QUOTED OPERAND PRESENT AND IN QUOTES
         ST    R15,0(,R6)          ADDRESS OF OPERAND
         STH   R14,4(,R6)          LENGTH OF OPERAND
         SR    R3,R14              GET LENGTH CODE OF REM TEXT
         BZ    DONE                BRANCH IF QUOTE WAS FINAL CHAR
         LA    R15,1(,R1)          POINT TO CHAR AFTER ENDING QUOTE
         BCTR  R3,0                REDUCE LENGTH CODE BY 1
         B     PNEXT               SET UP FOR NEXT OPERAND
LASTQ    OI    6(R6),QUOTED        OPERAND IN QUOTES
LAST     LA    R14,1(,R3)          GET LENGTH
         OI    6(R6),PRESENT       OPERAND PRESENT
         ST    R15,0(,R6)          ADDRESS OF OPERAND
         STH   R14,4(,R6)          LENGTH OF OPERAND
DONE     EQU   *
         SPACE
************************************************************
*                                                          *
*         DETERMINE TYPE OF CONTROL STATEMENT              *
*                                                          *
************************************************************
         SPACE
         LA    R6,ODE1             POINT TO FIRST O.D.E.
         TM    6(R6),PRESENT       ANYTHING PRESENT
         BZ    READCTL             BRANCH IF WHOLE STATEMENT BLANK
         TM    6(R6),QUOTED        IS OPERATION IN QUOTES
         BO    ILLCARD             YES, ERROR
         L     R1,0(,R6)           POINT TO FIRST NONBLANK IN STATEMENT
         CLI   0(R1),C'*'          COMMENT CARD
         BE    READCTL             YES, BRANCH
         SPACE
         SPACE
         LA    R6,ODE1             RESTORE POINTER TO FIRST O.D.E.
         L     R1,0(,R6)           POINT TO FIRST STRING AGAIN
         LH    R15,4(,R6)          GET LENGTH OF STRING
         MVC   TYPE(1),0(R1)       SAVE FIRST CHARACTER
         LA    R0,7                MAX VALID LENGTH
         CR    R15,R0              IS STRING TOO LONG ?
         BH    ILLCARD             BRANCH IF TOO LONG
         SLL   R15,2               MULTIPLY LENGTH BY 4
         B     *(R15)              BRANCH TO ONE OF NEXT 7
         B     LEN1                1 CHAR
         B     ILLCARD             2 CHAR
         B     LEN3                3 CHAR
         B     LEN4
         B     ILLCARD
         B     LEN6
         B     ILLCARD
LEN1     CLI   0(R1),C'C'
         BE    CHANGE
         CLI   0(R1),C'F'
         BE    CHANGE
         B     TYPEI
LEN3     CLC   0(3,R1),=C'END'
         BE    EODCTL
         B     TYPEI
LEN4     EQU   *
         CLC   0(4,R1),=C'NAME'
         BE    NAME
         CLC   0(4,R1),=C'FIND'
         BE    CHANGE
         CLC   0(4,R1),=C'FILE'
         BE    FILE
TYPEI    MVI   TYPE,C'I'
         B     ILLCARD
LEN6     CLC   0(6,R1),=C'CHANGE'
         BE    CHANGE
         CLC   0(6,R1),=C'OPTION'
         BE    OPTION
         B     TYPEI
         SPACE
ILLCARD  EQU   *
         CLI   TYPE,C'F'
         MVI   TYPE,C'I'
         BE    FILE
         MVC   LINE,LINE-1
         TM    OPTIONS,#L          LOG
         BNZ   LOGGED              YES, BRANCH
         MVC   MID(6),=C'MSG000'
         MVC   TXT(72),INREC
         BAL   R14,REPORT
         MVC   LINE,LINE-1
LOGGED   MVC   MID(33),=C'MSG001  *** ILLEGAL STATEMENT ***'
ILLRC4   BAL   R14,REPORT
         MVI   RC+1,4
         B     READCTL
         SPACE
ILLPREV  MVC   MID(29),=C'MSG012  *** FILE NOT OPEN ***'
         B     ILLRC4
         EJECT
************************************************************
*                                                          *
*         CHANGE LIBRARY DDNAME                            *
*                                                          *
************************************************************
         SPACE
FILE     EQU   *
         NI    SW,255-SWN          SET NAME OFF
         MVI   ZPM,C' '
         SR    R15,R15             FORCE NEW PAGE
         STH   R15,REPORTLN
         LA    R6,CLOSE
         MVI   0(R6),128
         TM    STATUS,OPENL
         BZ    FILEC5X
         CLOSE ((R5)),MF=(E,(R6))
         NI    STATUS,255-OPENL
FILEC5X  EQU   *
         CLI   TYPE,C'I'
         BE    FILERR
         LA    R6,ODE2             POINT TO SECOND O.D.E.
         TM    6(R6),PRESENT       IS OPERAND PRESENT ?
         BZ    FILERR              BRANCH IF MISSING OPERAND
         TM    6(R6),QUOTED        IS OPERAND IN QUOTES ?
         BO    FILERR              YES, ERROR
         MVC   MEMBER,=CL8' '
         L     R1,0(,R6)           POINT TO STRING
         LH    R15,4(,R6)          GET LENGTH OF STRING
         LA    R0,8                MAX VALID LENGTH
         CR    R15,R0              IS LENGTH VALID ?
         BH    FILERR              BRANCH IF OPERAND TOO LONG
         BCTR  R15,0               LENGTH MINUS 1 FOR EX
         EX    R15,MVCMEM          MOVE STRING TO MEMBER
         DEVTYPE MEMBER,DEVDATA    TEST IF DDNAME ALLOCATED
         LTR   R15,R15             IS DDNAME ALLOCATED
         BNZ   FILENAV             NO, BRANCH
         MVC   DDNAM(8,R5),MEMBER
         LA    R6,CLOSE
         OPEN  ((R5),UPDAT),MF=(E,(R6))
         TM    OFLGS(R5),X'10'
         BO    OKFILE
FILENAV  MVC   MID(35),=C'MSG011  FILE XXXXXXXX NOT AVAILABLE'
         MVC   MID+13(8),MEMBER
FILERC4  MVI   JFCB,C' '
         MVC   JFCB+1(43),JFCB
         BAL   R14,REPORT
         MVI   RC+1,4
         B     READCTL
OKFILE   EQU   *
         OI    STATUS,OPENL        SYSLIB FILE IS OPEN
         RDJFCB ((R5)),MF=(E,(R6))
         MVC   LINE,LINE-1
         MVC   MID(19),=C'MSG010  NEW FILE IS'
         MVC   MID+20(8),MEMBER    DDNAME
         BAL   R14,REPORT
         B     READCTL
         SPACE
FILERR   MVC   MID(38),=C'MSG013  *** INVALID FILE STATEMENT ***'
         B     FILERC4
         EJECT
************************************************************
*                                                          *
*        NAME STATEMENT                                    *
*                                                          *
************************************************************
         SPACE
NAME     EQU   *
         NI    SW,255-SWE          CSECT SWITCH OFF
         MVI   ZPM,C' '            FORCE NAME CARD
         TM    STATUS,OPENL        IS SYSLIB OPEN?
         BZ    ILLPREV             NO, ERROR
         SPACE
         LA    R6,ODE2             POINT TO SECOND O.D.E.
         TM    6(R6),PRESENT       IS OPERAND PRESENT ?
         BZ    ILLCARD             BRANCH IF MISSING OPERAND
         TM    6(R6),QUOTED        IS OPERAND IN QUOTES ?
         BO    ILLCARD             YES, ERROR
         MVC   MEMBER,=CL8' '
         L     R1,0(,R6)           POINT TO STRING
         LH    R15,4(,R6)          GET LENGTH OF STRING
         LA    R0,8                MAX VALID LENGTH
         CR    R15,R0              IS LENGTH VALID ?
         BH    ILLCARD             BRANCH IF OPERAND TOO LONG
         BCTR  R15,0               LENGTH MINUS 1 FOR EX
         EX    R15,MVCMEM          MOVE STRING TO MEMBER
         SPACE
         MVC   LINE,LINE-1
         MVC   MID(14),=C'MSGXXX  MEMBER'
         MVC   MBR(8),MEMBER
         SPACE
         LA    R6,BLDL
         MVC   0(4,R6),=AL2(1,80)
         MVC   4(8,R6),MEMBER
         SPACE
         BLDL  (R5),(R6)
         SPACE
         B     BLDLRC(R15)
BLDLRC   B     BLDLRC00
         B     BLDLRC04
         B     BLDLRC08
         B     BLDLRC0C
         SPACE
BLDLRC04 MVC   RESULT(09),=CL09'NOT FOUND'
         B     BLDLERR
BLDLRC08 MVC   RESULT(17),=CL17'*** I/O ERROR ***'
         B     BLDLERR
BLDLRC0C MVC   RESULT(17),=CL17'*** DCB ERROR ***'
         B     BLDLERR
BLDLLMOD MVC   RESULT(17),=CL17'NOT A LOAD MODULE'
BLDLERR  MVC   MID+3(3),=C'007'
ERROR    MVI   RC+1,4
         BAL   R14,REPORT
         B     READCTL
BLDLRC00 LA    R6,4(,R6)
         CLI   11(R6),0            CONCATENATION ZERO
         BNE   BLDLRC04            NO, TREAT AS NOT FOUND
         TM    13(R6),X'60'        ANY TTR'S IN USER DATA
         BZ    BLDLLMOD            NO, NOT A LOAD MODULE
         SPACE
         MVC   POINTER,8(R6)       COPY TTR AND ZERO
         MVC   CSECT,=CL8' '
         LA    R6,ODE3             POINT TO CSECT OPERAND DESCRIPTOR
         TM    6(R6),PRESENT       IS OPERAND PRESENT ?
         BZ    NOCSECT             BRANCH IF NO OPERAND
         TM    6(R6),QUOTED        IS OPERAND IN QUOTES ?
         BO    ILLCARD             YES, ERROR
         L     R1,0(,R6)           POINT TO STRING
         LH    R15,4(,R6)          GET LENGTH OF STRING
         LA    R0,8                MAX VALID LENGTH
         CR    R15,R0              IS LENGTH VALID ?
         BH    ILLCARD             BRANCH IF OPERAND TOO LONG
         BCTR  R15,0               LENGTH MINUS 1 FOR EX
         EX    R15,MVCSEC          MOVE STRING TO MEMBER
         CLC   CSECT(4),=C'ALL '
         BNE   *+10
         MVC   CSECT,=CL8' '
NOCSECT  EQU   *
         SPACE
         IC    R0,EODAD(,R5)
         LA    R14,EODESD
         ST    R14,EODAD(,R5)
         STC   R0,EODAD(,R5)       SYSLIB EODAD=EODESD
         SPACE
         POINT (R5),POINTER
         SPACE
         L     R2,BUFF1A           POINT TO I/O BUFFER
         MVC   DECBW(DECBML),DECBM
ESDLOOP  EQU   *
         READ  DECBW,SF,(R5),(R2),BUFF1L,MF=E
         SPACE
         CHECK DECBW
         SPACE
         LH    R1,DECBW+6          GET LENGTH FROM DECB
         L     R15,DECBW+16        GET IOB ADDRESS
         SH    R1,14(,R15)         SUBTRACT RESIDUAL COUNT
         STH   R1,BLKLEN           SAVE ACTUAL LENGTH
         SPACE
*              ONLY A SYM RECORD CAN PRECEDE A CESD RECORD
         CLI   0(R2),X'40'         SYM RECORD
         BE    ESDLOOP             YES, LOOP UNTIL CESD FOUND
         CLI   0(R2),X'20'         CESD RECORD
         BNE   EODESD              NO, END OF CESD RECORDS
         L     R4,ESDPTR           ESD TABLE ORIGIN
         LH    R0,4(,R2)           ESDID OF FIRST ENTRY
         BCTR  R0,0                MINUS 1 FOR ZERO BASE
         SLL   R0,4                MULTIPLY BY 16
         AR    R4,R0               ADD OFFSET TO TABLE ORIGIN
         LH    R0,6(,R2)           LENGTH OF ESD DATA
         SRL   R0,4                DIVIDE LENGTH BY 16
         LTR   R0,R0               ARE THERE ANY ENTRIES
         BZ    ESDLOOP             NO, BRANCH (NEVER HAPPENS)
         LA    R1,8(,R2)           FIRST ENTRY
ENTLOOP  CLI   CSECT,C' '          CSECT NAME SPECIFIED
         BE    ENTCOPY             NO, BRANCH
         CLC   CSECT,0(R1)         YES, DOES IT MATCH THIS ENTRY
         BNE   ENTCOPY             NO, BRANCH
         TM    8(R1),X'0F'         TYPE SD
         BNZ   ENTCSTC             NO, TREAT AS NOT FOUND
         OI    SW,SWE
ENTCSTC  STC   R0,8(,R1)
ENTCOPY  C     R4,ESDEND           IS OUR ESD AREA BIG ENOUGH
         BNL   ESDFAIL             NO, CANNOT CONTINUE
         MVC   0(16,R4),0(R1)
         LA    R4,16(,R4)
ENTNEXT  LA    R1,16(,R1)
         BCT   R0,ENTLOOP
         B     ESDLOOP
EODESD   EQU   *
         MVI   0(R4),255
         CLI   CSECT,C' '          WAS CSECT SPECIFIED
         BE    ENTMSG              NO, BRANCH
         TM    SW,SWE              YES, WAS IT FOUND
         BZ    ENTNF               NO, BRANCH
ENTMSG   LR    R0,R4
         S     R0,ESDPTR           LENGTH OF ESD TABLE
         SRL   R0,4                DIVIDE BY 16
         CVD   R0,DOUBLE
         MVC   RESULT(6),=X'402020202120'
         ED    RESULT(6),DOUBLE+5
         MVC   RESULT+6(12),=C' ESD ENTRIES'
         MVC   MID+3(3),=C'003'
         OI    SW,SWN              VALID NAME STATEMENT
         TM    OPTIONS,#D          IN DEBUG MODE
         BZ    READCTL             NO, SKIP MEMBER MESSAGE
         TM    OPTIONS,#M          MSG
         BZ    READCTL
         BAL   R14,REPORT
         B     READCTL
ENTNF    MVC   RESULT(31),=CL31'FOUND, CSECT XXXXXXXX NOT FOUND'
         MVC   RESULT+13(8),CSECT
         MVC   MID+3(3),=C'008'
         B     ERROR
         SPACE
ESDFAIL  MVC   RESULT(34),=CL34'HAS ESD TOO LARGE FOR THIS PROGRAM'
         MVC   MID+3(3),=C'008'
         B     ERROR
         SPACE
MVCMEM   MVC   MEMBER(0),0(R1)     (EXECUTED)
MVCSEC   MVC   CSECT(0),0(R1)      (EXECUTED)
         EJECT
************************************************************
*                                                          *
*         FIND OR CHANGE STATEMENT                         *
*                                                          *
************************************************************
         SPACE
CHANGE   EQU   *
         CLI   TYPE,C'F'           FIND
         BNE   *+8                 NO, SKIP NEXT INSTRUCTION
         MVI   TYPE,C'X'           NOT TO BE CONFUSED WITH FILE
         TM    STATUS,OPENL        IS SYSLIB OPEN?
         BZ    ILLPREV             NO, ERROR
         SPACE
         TM    SW,SWN              NAME SPECIFIED
         BZ    ILLCARD             NO, BRANCH
         SPACE
         LA    R6,ODE2             FIRST OPERAND DESCRIPTOR
         TM    6(R6),PRESENT       IS OPERAND PRESENT
         BZ    ILLCARD
         TM    6(R6),QUOTED        IS OPERAND IN QUOTES
         BO    CHOP1Q              YES, NOT HEX
         LH    R0,4(,R6)           GET LENGTH OF OPERAND
         L     R1,0(,R6)           POINT TO OPERAND
         LA    R15,STRINGA         POINT TO OUTPUT AREA
         BAL   R14,VALX            VALIDATE THE HEX STRING
         STH   R0,STRINGL          SAVE LENGTH OF RESULT
         B     CHOP1X
         SPACE
CHOP1M   MVC   STRINGA(0),0(R15)   (EXECUTED)
CHOP1Q   LH    R0,4(,R6)           GET LENGTH OF OPERAND
         LTR   R1,R0               IS IT A NULL STRING
         BZ    ILLCARD             YES, BRANCH
         L     R15,0(,R6)          POINT TO OPERAND
         STH   R1,STRINGL          SAVE LENGTH OF OPERAND
         BCTR  R1,0
         EX    R1,CHOP1M           MOVE IT TO STRINGA
         SPACE
CHOP1X   CLI   TYPE,C'X'           FIND
         BE    CHGGO               YES, BRANCH
         SPACE
         LA    R6,ODE3             SECOND OPERAND DESCRIPTOR
         TM    6(R6),PRESENT       IS OPERAND PRESENT
         BZ    ILLCARD             NO, ERROR
         TM    6(R6),QUOTED        IS OPERAND IN QUOTES
         BO    CHOP2Q              YES, BRANCH
         LH    R0,4(,R6)           GET LENGTH OF OPERAND
         L     R1,0(,R6)           POINT TO OPERAND
         LA    R15,STRINGB         POINT TO OUTPUT AREA
         BAL   R14,VALX            VALIDATE THE HEX STRING
         B     CHOP2X
         SPACE
CHOP2M   MVC   STRINGB(0),0(R15)   (EXECUTED)
CHOP2Q   LH    R0,4(,R6)           GET LENGTH OF OPERAND
         LTR   R1,R0               IS IT A NULL STRING
         BZ    ILLCARD             YES, BRANCH
         L     R15,0(,R6)          POINT TO OPERAND
         BCTR  R1,0
         EX    R1,CHOP2M           MOVE IT TO STRINGA
         SPACE
CHOP2X   CH    R0,STRINGL          IS THE LENGTH SAME AS THE OTHER
         BNE   ILLCARD             NO, ERROR
         SPACE
         MVI   ZPVER,C' '          BUILD A VER STATEMENT
         MVC   ZPVER+1(79),ZPVER
         MVC   ZPVER+1(3),=C'VER'
         LA    R1,STRINGA
         LH    R0,STRINGL
         LA    R15,ZPVER+12
         BAL   R14,HEX
         SPACE
         MVI   ZPREP,C' '          BUILD A REP STATEMENT
         MVC   ZPREP+1(79),ZPREP
         MVC   ZPREP+1(3),=C'REP'
         LA    R1,STRINGB
         LH    R0,STRINGL
         LA    R15,ZPREP+12
         BAL   R14,HEX
         B     CHGGO
         SPACE
VALX     STM   R14,R3,VALXR        SAVE REGISTERS
         LR    R3,R1               COPY INPUT POINTER
         LA    R14,2               LOAD VALUE 2
VALXLOOP CR    R0,R14              ARE THERE AT LEAST 2 BYTES LEFT
         BL    VALXERR             NO, ERROR
         CLI   0(R3),C','          IS THE FIRST BYTE A COMMA
         BE    VALXCOMA            YES, BRANCH
         TRT   0(2,R3),VALXTAB     ARE THE TWO BYTES 0-9 OR A-F
         BNZ   VALXERRT            NO, R1 POINTS TO THE ERROR
         SR    R1,R1
         IC    R1,0(,R3)           REG 1  =  1ST CHAR
         CLI   0(R3),C'0'          NUMBER OR LETTER
         BNL   *+8                 NUMBER - BRANCH
         LA    R1,57(,R1)          LETTER - CONVERT TO FA-FF
         SLL   R1,4                SHIFT LEFT 4 BITS
         STC   R1,0(,R15)          STORE THE LEFT HALF
         SR    R1,R1
         IC    R1,1(,R3)           REG 1  =  2ND CHAR
         CLI   1(R3),C'0'          NUMBER OR LETTER
         BNL   *+8                 NUMBER - BRANCH
         LA    R1,57(,R1)          LETTER - CONVERT
         SLL   R1,28               SHIFT LEFT HALF TO OBLIVION
         SRL   R1,28               SHIFT BACK AGAIN
         STC   R1,1(,R15)          STORE RIGHT HALF
         OC    0(1,R15),1(R15)     'OR' RIGHT HALF OVER LEFT HALF
         LA    R3,2(,R3)           POINT PAST THE TWO CHARACTERS
         LA    R15,1(,R15)         POINT PAST MOVED CHARACTERS
         SR    R0,R14              REDUCE LENGTH BY 2
         BNZ   VALXLOOP            BRANCH IF LENGTH NOT ZERO YET
         LR    R0,R15              POINT PAST LAST BYTE OF RESULT
         S     R0,VALXR+4          R0 = LENGTH OF RESULT
         L     R14,VALXR           RETURN ADDRESS
VALXX    LM    R2,R3,VALXR+16      RESTORE REGISTERS
         BR    R14
VALXCOMA LA    R3,1(,R3)           POINT PAST COMMA
         BCTR  R0,0                REDUCE LENGTH ACCORDINGLY
         CLI   0(R3),C','          TWO COMMAS IN A ROW
         BNE   VALXLOOP            NO, BRANCH
VALXERR  LR    R1,R3               POINT R1 TO BYTE IN ERROR
VALXERRT LM    R2,R3,VALXR+16
         B     ILLCARD
         SPACE
************************************************************
*                                                          *
*        READ EACH RECORD OF THE MODULE                    *
*                                                          *
************************************************************
         SPACE
CHGGO    EQU   *
         IC    R0,EODAD(,R5)
         LA    R14,EODLIB
         ST    R14,EODAD(,R5)
         STC   R0,EODAD(,R5)       SYSLIB EODAD=EODESD
         SPACE
         POINT (R5),POINTER
         SPACE
         SLR   R15,R15
         ST    R15,COUNTREP
         ST    R15,COUNTSPN
         MVI   PREVTYPE,0
         L     R2,BUFF1A           POINT TO I/O BUFFER
         MVC   DECBW(DECBML),DECBM
READLOOP EQU   *
         READ  DECBW,SF,(R5),(R2),BUFF1L,MF=E
         SPACE
         CHECK DECBW
         SPACE
         LH    R1,DECBW+6          GET LENGTH FROM DECB
         L     R15,DECBW+16        GET IOB ADDRESS
         SH    R1,14(,R15)         SUBTRACT RESIDUAL COUNT
         STH   R1,BLKLEN           SAVE ACTUAL LENGTH
         SPACE
         NI    SW,255-SWT-SWC      SET RECORD TYPES OFF
         MVC   LINE,LINE-1
         MVC   LINE+1(31),=C'MSG004  RECORD SIZE NNNNN, TYPE'
         CVD   R1,DOUBLE
         MVC   LINE+20(6),=X'402020202120'
         ED    LINE+20(6),DOUBLE+5
         LA    R1,LINE+33
         TM    PREVTYPE,X'01'      WAS PREVIOUS RECORD A CCW
         BZ    NOTTXT              NO, BRANCH
         MVC   0(3,R1),=C'TXT'     YES, THIS ONE IS TEXT
         MVI   PREVTYPE,0
         OI    SW,SWT              TEXT
         B     OKRTYPE
NOTTXT   MVC   PREVTYPE,0(R2)
         CLI   0(R2),X'40'
         BNE   *+14
         MVC   0(3,R1),=C'SYM'
         B     OKRTYPE
         CLI   0(R2),X'20'
         BNE   *+14
         MVC   0(3,R1),=C'ESD'
         B     OKRTYPE
         CLI   0(R2),X'10'
         BNE   *+14
         MVC   0(3,R1),=C'SCT'
         B     OKRTYPE
         CLI   0(R2),X'80'
         BNE   *+14
         MVC   0(3,R1),=C'IDR'
         B     OKRTYPE
         TM    0(R2),X'03'
         BNO   *+14
         MVC   0(7,R1),=C'CCW/RLD'
         B     OKMORC
         TM    0(R2),X'01'
         BZ    *+14
         MVC   0(3,R1),=C'CCW'
         B     OKMORC
         TM    0(R2),X'02'
         BZ    *+14
         MVC   0(3,R1),=C'RLD'
         B     OKMORE
         MVC   0(3,R1),=C'***'
         B     OKRTYPE
OKMORC   OI    SW,SWC
OKMORE   TM    0(R2),X'0C'
         BZ    OKRTYPE
         MVC   8(3,R1),=C'EOM'
         TM    0(R2),X'08'
         BO    OKRTYPE
         MVC   8(3,R1),=C'EOS'
OKRTYPE  EQU   *
         TM    OPTIONS,#D          DEBUG MODE
         BZ    *+8                 NO, SKIP RECORD SIZE MESSAGE
         BAL   R14,REPORT
         MVC   LINE,LINE-1
         TM    SW,SWC
         BZ    NOTCCW
         L     R1,8(,R2)           GET LINK-ASSIGNED ADDRESS
         LA    R1,0(,R1)           ZERO HIGH ORDER BYTE
         ST    R1,ADDRESS          SAVE ADDRESS
         LH    R1,4(,R2)           LENGTH OF CONTROL DATA
         LTR   R1,R1               IS IT ZERO
         BZ    NOINFO
         LA    R15,16(,R2)         POINT TO CONTROL DATA
         AH    R15,6(,R2)          POINT PAST RLD INFO IF ANY
         BCTR  R1,0
         EX    R1,INFOMVC          MOVE CONTROL DATA
         LA    R1,1(,R1)
NOINFO   SRL   R1,2                DIVIDE LENGTH BY 4
         STH   R1,INFONUM          SAVE NUMBER OF ENTRIES
         B     READLOOP
INFOMVC  MVC   INFO(0),0(R15)      (EXECUTED)
NOTCCW   TM    SW,SWT              IS THIS A TEXT RECORD
         BZ    READLOOP            BRANCH IF NOT A TEXT RECORD
         SPACE
************************************************************
*                                                          *
*        SCAN THE TEXT FOR THE STRING                      *
*                                                          *
************************************************************
         SPACE
         NI    SW,255-SWM-SWS      SET CHANGE BIT OFF, SPAN BIT OFF
         LR    R4,R2
         LH    R3,BLKLEN
         BCTR  R3,0                LENGTH CODE OF RECORD
         LA    R6,STRINGA          POINT TO OLD STRING
         LH    R7,STRINGL          LENGTH OF STRING
         BCTR  R7,0                LENGTH CODE OF STRING
         LA    R8,STRINGB          POINT TO NEW STRING
CHGLOOP  CR    R7,R3               ROOM FOR STRING
         BH    CHGSPAN             NO, BRANCH
         EX    R7,CHGCLC           DOES STRING MATCH
         BNE   CHGNXT              NO, BRANCH
         BAL   R14,WHERE           FIND OUT WHAT CSECT THIS IS
         LTR   R15,R15             IS THIS CSECT ELIGIBLE
         BNZ   CHGNXT              NO, BRANCH
         BAL   R14,SHOW            PRINT THE OFFSET AND CSECT
         LA    R1,1
         A     R1,COUNTREP         COUNT THE HITS
         ST    R1,COUNTREP
         CLI   TYPE,C'X'           IS THIS A FIND
         BE    CHGBYP              YES, DO NOT MODIFY
         BAL   R14,PUNCH           PUNCH ZAPS
         EX    R7,CHGMVC           MOVE STRING INTO RECORD
         OI    SW,SWM              RECORD CHANGED
CHGBYP   AR    R4,R7               POINT TO LAST BYTE MOVED
         SR    R3,R7               REDUCE LENGTH ACCORDINGLY
CHGNXT   LA    R4,1(,R4)           POINT TO NEXT BYTE OF RECORD
         BCTR  R3,0                REDUCE LENGTH BY 1
         B     CHGLOOP             KEEP LOOKING
CHGCLC   CLC   0(0,R4),0(R6)       (EXECUTED)
CHGMVC   MVC   0(0,R4),0(R8)       (EXECUTED)
CHGSPAN  EQU   *
         LTR   R7,R7               IS STRING LENGTH 1
         BZ    CHGX                YES, CANT SPAN 2 RECORDS
         BCTR  R7,0                REDUCE STRING LENGTH CODE BY 1
CHGSPANL EX    R7,CHGCLC           DOES PART OF STRING MATCH
         BE    CHGSPANW            YES, BRANCH
         LA    R4,1(,R4)           POINT TO NEXT BYTE OF RECORD
         BCTR  R7,0                REDUCE LENGTH CODE BY 1
         LTR   R7,R7               IS LENGTH CODE NEGATIVE
         BNM   CHGSPANL            NO, BRANCH TO KEEP LOOKING
         B     CHGX                YES, NOT A SPAN CANDIDATE
CHGSPANW EQU   *
         OI    SW,SWS              INDICATE SPAN CANDIDATE
         BAL   R14,WHERE
         LTR   R15,R15             IS THIS AN ELIGIBLE CSECT
         BNZ   CHGX                NO, BRANCH
         BAL   R14,SHOW
         LA    R1,1
         A     R1,COUNTSPN         COUNT THE PARTIAL HITS
         ST    R1,COUNTSPN
CHGX     EQU   *
         B     READLOOP
         SPACE
************************************************************
*                                                          *
*         SUBROUTINE TO DETERMINE CURRENT CSECT            *
*                                                          *
************************************************************
         SPACE
WHERE    ST    R14,PUNCHR
         LR    R1,R4
         SR    R1,R2               OFFSET INTO RECORD
         LA    R15,INFO
         LH    R0,INFONUM
INFOLOOP CH    R1,2(,R15)          IN THIS CSECT
         BL    INFOFND             YES, BRANCH
         SH    R1,2(,R15)          REDUCE OFFSET BY CSECT LEN
         LA    R15,4(,R15)
         BCT   R0,INFOLOOP
         LA    R15,2
         B     WHEREX              ILLOGIC
INFOFND  LH    R15,0(,R15)         GET CESD ENTRY NUMBER
         BCTR  R15,0
         SLL   R15,4               MULTIPLY BY 16
         A     R15,ESDPTR
         LR    R0,R4               ADDRESS OF CHANGE
         SR    R0,R2               OFFSET INTO RECORD
         A     R0,ADDRESS          GET LINKED ADDRESS OF CHANGE
         L     R1,8(,R15)          GET LINKED ADDRESS OF CSECT
         LA    R1,0(,R1)           CLEAR HI ORDER BYTE
         SR    R0,R1               COMPUTE THE OFFSET
         L     R1,12(,R15)         GET THE LENGTH OF THE CSECT
         LA    R1,0(,R1)           CLEAR HIGH ORDER BYTE
         CR    R0,R1               IS OFFSET VALID
         BNL   WHEREX              NO, SOMETHING IS WRONG, ILLOGIC
         ST    R0,OFFSET
         MVC   OFFESD(16),0(R15)
         AH    R0,STRINGL          ADD LENGTH OF STRING TO OFFSET
         BCTR  R0,0                GET OFFSET OF LAST BYTE OF STRING
         CR    R0,R1               IS LAST BYTE IN SAME CSECT
         BNL   WHEREX              NO, EXIT WITH R15 NONZERO
         LA    R15,OFFESD
         IC    R0,8(,R15)
         NI    8(R15),X'0F'
         CLI   8(R15),X'04'        PRIVATE CODE CSECT
         BNE   WHERENP             NO, BRANCH
         MVC   0(8,R15),=C'$PRIVATE'
         STC   R0,8(,R15)          RESTORE BITS ERASED BY NI
         TM    8(R15),X'14'        IS IT ENTAB/SEGTAB
         BO    WHEREX              YES, EXIT WITH R15 NONZERO
WHERENP  EQU   *
         CLI   CSECT,C' '          DID NAME SPECIFY CSECT
         BE    WHEREOK             NO, ANY CSECT IS OK
         CLC   CSECT,0(R15)        IS THIS THE SPECIFIED CSECT
         BNE   WHEREX              NO, EXIT WITH R15 NONZERO
WHEREOK  SR    R15,R15             INDICATE CSECT ELIGIBLE
WHEREX   L     R14,PUNCHR
         BR    R14
         SPACE
************************************************************
*                                                          *
*         SUBROUTINE TO DISPLAY CURRENT LOCATION           *
*                                                          *
************************************************************
         SPACE
SHOW     ST    R14,PUNCHR
         MVC   LINE,LINE-1
         MVC   LINE+1(30),=C'MSG005  OFFSET XXXXXX IN CSECT '
         MVC   LINE+32(8),OFFESD
         TM    SW,SWS              SPAN CANDIDATE?
         BZ    *+14                NO, SKIP NEXT 2 INSTRUCTIONS
         MVI   MID+5,C'6'          MSG006
         MVC   LINE+42(L'SPANMSG),SPANMSG
         LA    R1,OFFSET+1
         LA    R0,3
         LA    R15,OFFHEX
         BAL   R14,HEX
         MVC   LINE+16(6),OFFHEX
         BAL   R14,REPORT
         L     R14,PUNCHR
         BR    R14
         SPACE
************************************************************
*                                                          *
*         SUBROUTINE TO PUNCH ZAP STATEMENTS               *
*                                                          *
************************************************************
         SPACE
PUNCH    TM    STATUS,OPENZ        IS SYSPUNCH OPEN
         BZR   R14                 NO, BRANCH
         ST    R14,PUNCHR
         CLC   ZPM,MEMBER          SAME AS LAST NAME STATEMENT
         BNE   ZPNAME              NO, GO WRITE NEW NAME STMT
         CLC   ZPC,OFFESD          SAME AS LAST NAME STMT
         BE    ZPNAMEX             YES, BYPASS NAME STATEMENT
ZPNAME   MVC   ZPM,MEMBER          UPDATE LAST NAME VALUE
         MVC   ZPC,OFFESD          UPDATE LAST NAME VALUE
         MVI   ZPOUT,C' '
         MVC   ZPOUT+1(79),ZPOUT
         MVC   ZPOUT+1(4),=C'NAME'
         MVC   ZPOUT+6(8),ZPM      MEMBER
         MVC   ZPOUT+15(8),ZPC     CSECT
         LA    R1,PUNDCBW
         PUT   (1),ZPOUT           WRITE A NAME STATEMENT
ZPNAMEX  EQU   *
         MVC   ZPVER+5(6),OFFHEX   VER OFFSET
         MVC   ZPREP+5(6),OFFHEX   REP OFFSET
         LA    R1,PUNDCBW
         PUT   (1),ZPVER           WRITE A VER STATEMENT
         LA    R1,PUNDCBW
         PUT   (1),ZPREP           WRITE A REP STATEMENT
NOZAPS   EQU   *
         L     R14,PUNCHR
         BR    R14
         SPACE
************************************************************
*                                                          *
*         END-OF-DATA ON CURRENT MEMBER                    *
*                                                          *
************************************************************
         SPACE
EODLIB   EQU   *
         MVC   LINE,LINE-1
         MVC   LINE+1(25),=C'MSG009  LOCATIONS FOUND ='
         L     R0,COUNTREP
         CVD   R0,DOUBLE
         LA    R1,LINE+26
         MVC   0(8,R1),=X'4020202020202120'
         ED    0(8,R1),DOUBLE+4
LEFT     CLI   1(R1),C' '          LEADING BLANK
         BNE   *+18                NO, BRANCH, SHIFT LEFT IS DONE
         MVC   1(6,R1),2(R1)       SHIFT LEFT
         MVI   7(R1),C' '          BLANK LAST BYTE
         B     LEFT                CONTINUE SHIFT
         L     R0,COUNTSPN
         LTR   R0,R0
         BZ    ZROSPAN
         CVD   R0,DOUBLE
         LA    R1,LINE+35
         MVC   0(4,R1),=C'PLUS'
         LA    R1,4(,R1)
         MVC   0(8,R1),=X'4020202020202120'
         ED    0(8,R1),DOUBLE+4
LEFTS    CLI   1(R1),C' '          LEADING BLANK
         BNE   *+18                NO, BRANCH, SHIFT LEFT IS DONE
         MVC   1(6,R1),2(R1)       SHIFT LEFT
         MVI   7(R1),C' '          BLANK LAST BYTE
         B     LEFTS               CONTINUE SHIFT
ZROSPAN  EQU   *
         BAL   R14,REPORT
         B     READCTL
         SPACE
HEX      UNPK  0(3,R15),0(2,R1)    UNPACK
         TR    0(2,R15),HEXTAB-240
         LA    R15,2(,R15)         INCREMENT OUTPUT PTR
         LA    R1,1(,R1)           INCREMENT INPUT PTR
         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP
         MVI   0(R15),C' '         BLANK THE TRAILING BYTE
         BR    R14                 RETURN TO CALLER
HEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE
         EJECT
************************************************************
*                                                          *
*         OPTION CONTROL STATEMENT                         *
*                                                          *
************************************************************
         SPACE
OPTION   EQU   *
         LA    R6,ODE2
         TM    6(R6),PRESENT
         BNO   ILLCARD
CTLSPEC  TM    6(R6),QUOTED        IS OPERAND IN QUOTES
         BO    ILLCARD             YES, ERROR
         L     R1,0(,R6)           POINT TO OPERAND
         LH    R15,4(,R6)          GET LENGTH OF KEYWORD
         CH    R15,=H'7'
         BE    CTL7
         CH    R15,=H'5'
         BE    CTL5
         CH    R15,=H'3'
         BNE   ILLCARD
CTL3     CLC   0(3,R1),OPMSG+2
         BNE   *+12
         OI    OPTIONS,#M          MSG
         B     CTLNEXT
         CLC   0(3,R1),OPLOG+2
         BNE   *+12
         OI    OPTIONS,#L          LOG
         B     CTLNEXT
         B     ILLCARD
CTL5     CLC   0(5,R1),OPLOG
         BNE   *+12
         NI    OPTIONS,255-#L      NOLOG
         B     CTLNEXT
         CLC   0(5,R1),OPMSG
         BNE   *+12
         NI    OPTIONS,255-#M      NOMSG
         B     CTLNEXT
         CLC   0(5,R1),OPFLUSH+2
         BNE   *+12
         OI    OPTIONS,#F          FLUSH
         B     CTLNEXT
         B     ILLCARD
CTL7     CLC   0(7,R1),OPFLUSH
         BNE   *+12
         NI    OPTIONS,255-#F      NOFLUSH
         B     CTLNEXT
         B     ILLCARD
CTLNEXT  LA    R6,8(,R6)           POINT TO NEXT O.D.E.
         TM    6(R6),PRESENT       OPERAND PRESENT?
         BO    CTLSPEC             YES, BRANCH
         B     READCTL
         EJECT
************************************************************
*                                                          *
*         ISSUE MESSAGE FOR PROGRAM LOGIC ERROR            *
*                                                          *
************************************************************
         SPACE
ILLOGIC  MVC   LINE,LINE-1
         MVC   LINE+1(26),=C'MSG099  LOGIC ERROR NUMBER'
         LA    R1,LINE+27
         CVD   R15,DOUBLE
         MVC   0(4,R1),=X'40202120'
         ED    0(4,R1),DOUBLE+6
         BAL   R14,REPORT
         MVI   RC+1,4
         B     READCTL
         EJECT
************************************************************
*                                                          *
*         REPORT WRITER                                    *
*                                                          *
************************************************************
         SPACE
REPORT   LA    R1,LINE
         LA    R0,121
REPORTW  STM   R14,R3,REPORTS
         LA    R3,PRTDCBW          POINT R3 TO DCB
         LH    R15,REPORTLN        GET CURRENT LINE COUNT
         CH    R15,REPORTMX        IS PAGE FILLED UP
         BNH   *+10                NO
         SR    R15,R15             YES, FORCE NEW PAGE
         STH   R15,REPORTLN        YES, ZERO THE LINE COUNT
         LTR   R15,R15             IS NEW PAGE REQUESTED?
         BZ    REPORTH             YES, GO PRINT HEADING
REPORTD  CH    R0,=H'121'          IS OUTPUT LINE LENGTH OK?
         BNL   REPORTP             YES, BRANCH
         MVC   REPORTO,REPORTO-1   BLANK THE WORK AREA
         LTR   R14,R0              COPY LENGTH
         BNP   REPORTB             BLANK LINE IF < 1
         BCTR  R14,0               LENGTH MINUS 1
         B     *+10
         MVC   REPORTO(0),0(R1)    COPY OUTPUT LINE
         EX    R14,*-6             EXECUTE MVC
REPORTB  LA    R1,REPORTO          POINT TO NEW OUTPUT LINE
REPORTP  LR    R2,R1               POINT R2 TO OUTPUT LINE
         PUT   (R3),(R2)           WRITE OUTPUT LINE
         LA    R15,1               INCREMENT
         AH    R15,REPORTLN         LINE
         STH   R15,REPORTLN          COUNT
REPORTX  LM    R14,R3,REPORTS      RESTORE REGS
         BR    R14                 RETURN
REPORTH  LA    R15,1               INCREMENT
         AH    R15,REPORTPG         PAGE
         STH   R15,REPORTPG          COUNT
         MVC   REPORTO,REPORTO-1   BLANK HEADING
         MVI   REPORTO,C'1'        CC = NEW PAGE
         MVC   REPORTO+1(L'HEAD1),HEAD1
         LA    R15,REPORTO+1+L'HEAD1
         MVC   0(44,R15),JFCB
         LA    R15,44(,R15)
APPENDV  CLI   0(R15),C' '
         BNE   *+8
         BCT   R15,APPENDV
         MVC   3(6,R15),JFCB+118   VOLUME
         LH    R15,REPORTPG        GET PAGE NUMBER
         CVD   R15,DOUBLE          CONVERT TO BINARY
         LA    R1,REPORTO+100-9    RIGHT EDGE PAGE NO
         MVC   3(6,R1),=X'402020202020' EDIT MASK
         ED    3(6,R1),DOUBLE+5    UNPACK PAGE NO
         MVC   0(4,R1),=C'PAGE'    INSERT 'PAGE'
         PUT   (R3),REPORTO        PUT HEADING LINE 1
         MVC   REPORTO,REPORTO-1   BLANK LINE
         PUT   (R3),REPORTO        PUT HEADING LINE 2
         LM    R0,R1,REPORTS+8     RESTORE R0 AND R1
         B     REPORTD             GO PRINT DETAIL LINE
         EJECT
FLUSH    MVC   LINE,LINE-1
         MVC   MID(L'MSG002),MSG002
         BAL   R14,REPORT
         SPACE
EODCTL   EQU   *
EXITRC   LH    R15,RC
EXIT     LR    R2,R15              SAVE RETURN CODE
         LA    R7,CLOSE
         MVI   0(R7),128
         TM    STATUS,OPENZ        IS SYSPUNCH OPEN?
         BZ    EXITCZX             NO, SKIP CLOSE
         LA    R6,PUNDCBW
         CLOSE ((R6)),MF=(E,(R7))
EXITCZX  EQU   *
         TM    STATUS,OPENL        IS SYSLIB OPEN?
         BZ    EXITC5X             NO, SKIP CLOSE
         CLOSE ((R5)),MF=(E,(R7))
EXITC5X  EQU   *
         TM    STATUS,GETMN        IS FREEMAIN NEEDED
         BZ    EXITGMX             NO, SKIP CLOSE
         L     R1,BUFF1A
         L     R0,GETSIZ
         FREEMAIN R,LV=(0),A=(1)
EXITGMX  EQU   *
         TM    STATUS,OPENC        IS SYSIN OPEN?
         BZ    EXITC4X             NO, SKIP CLOSE
         LA    R4,CTLDCBW
         CLOSE ((R4)),MF=(E,(R7))
EXITC4X  EQU   *
         TM    STATUS,OPENP        IS SYSPRINT OPEN?
         BZ    EXITC3X             NO, SKIP CLOSE
         LA    R3,PRTDCBW          POINT R3 TO DCB
         CLOSE ((R3)),MF=(E,(R7))
EXITC3X  EQU   *
         SPACE 1
         LR    1,13
         L     R0,@SIZE
         L     13,4(,13)
         FREEMAIN R,A=(1),LV=(0)
         LR    R15,R2              RESTORE RETURN CODE
         LM    0,12,20(13)
         L     14,12(,13)
         BR    14
         EJECT
************************************************************
*                                                          *
*        CONSTANTS                                         *
*                                                          *
************************************************************
         SPACE
         LTORG
OPLOG    DC    C'NOLOG'
OPMSG    DC    C'NOMSG'
OPFLUSH  DC    C'NOFLUSH'
         SPACE
HEAD1    DC    C'FINDAZAP - SYSTEMS SUPPORT PROGRAM - '
         PRINT NOGEN
         SPACE
PRTDCB   DCB   DDNAME=SYSPRINT,MACRF=(PM),DSORG=PS,                    +
               RECFM=FBA,LRECL=121
PRTDCBL  EQU   *-PRTDCB
         SPACE
CTLDCB   DCB   DDNAME=SYSIN,MACRF=(GM),DSORG=PS,LRECL=80
CTLDCBL  EQU   *-CTLDCB
         SPACE
LIBDCB   DCB   DDNAME=SYSLIB,MACRF=(R),DSORG=PO,                       +
               RECFM=U,BLKSIZE=32760
LIBDCBL  EQU   *-LIBDCB
         SPACE
PUNDCB   DCB   DDNAME=SYSPUNCH,MACRF=(PM),DSORG=PS,                    +
               RECFM=FB,LRECL=80
PUNDCBL  EQU   *-PUNDCB
         SPACE
         PRINT GEN
         SPACE
         READ  DECBM,SF,5,0,BUFF1L,MF=L
DECBML   EQU   *-DECBM
         SPACE
MSG002   DC    C'MSG002  *** ALL REMAINING STATEMENTS FLUSHED ***'
         SPACE
VALXTAB  DC    193X'FF',6X'00',41X'FF',10X'00',6X'FF'
*                       A-F            0-9
         SPACE
TABNONBL DC    64X'FF'
         DC    X'00'               BLANK
         DC    42X'FF'
         DC    X'FF'               COMMA
         DC    148X'FF'
TABBLANK DC    64X'00'
         DC    X'40'               BLANK
         DC    42X'00'
         DC    X'00'               COMMA
         DC    148X'00'
TABQUOTE DC    125X'00',X'7D',130X'00'
         SPACE
CAPS     DC    129AL1(*-CAPS)      00-80
         DC    9AL1(*-CAPS+X'40')  81-89 BECOME C1-C9
         DC    7AL1(*-CAPS)        8A-90
         DC    9AL1(*-CAPS+X'40')  91-99 BECOME D1-D9
         DC    8AL1(*-CAPS)        9A-A1
         DC    8AL1(*-CAPS+X'40')  A2-A9 BECOME E2-E9
         DC    86AL1(*-CAPS)       AA-FF
         SPACE
SPANMSG  DC    C'*** STRING ONLY PARTIALLY CHECKED ***'
         SPACE
QUOTE    EQU   X'7D'
         SPACE
EODAD    EQU   32                  OFFSET INTO DCB
RECFM    EQU   36                  OFFSET INTO DCB
EXLST    EQU   36                  OFFSET INTO DCB
OFLGS    EQU   48                  OFFSET INTO DCB
DDNAM    EQU   40                  OFFSET INTO DCB
OPTCD    EQU   52                  OFFSET INTO DCB
BLKSI    EQU   62                  OFFSET INTO DCB
LRECL    EQU   82                  OFFSET INTO DCB
         SPACE
#F       EQU   X'10'               FLUSH
#L       EQU   X'08'               LOG
#M       EQU   X'04'               MSG
#D       EQU   X'01'               DEBUG
#DEFAULT EQU   #F+#L+#M            FLUSH,LOG,MSG
         SPACE
ESDSIZE  DC    F'48000'            ROOM FOR 3000 ESD ENTRIES
         SPACE
BUFF1L   EQU   32760               LARGEST BLOCK SUPPORTED,
*                                  AND A MULTIPLE OF 8, PLEASE.
BUFF2L   EQU   0                   WILL BE CHANGED TO EQUAL BUFF1L IF
*                                  SUPPORT FOR FINDING STRINGS THAT
*                                  SPAN TWO RECORDS IS EVER ADDED.
         DC    0D'0'
         SPACE
************************************************************
*                                                          *
*        DSECTS                                            *
*                                                          *
************************************************************
         SPACE
@DATA    DSECT
         DS    18F                 REGISTER SAVEAREA
WORK     DS    0F
DOUBLE   DS    D
OPEN     DS    F
CLOSE    EQU   OPEN
COUNTIN  DS    F
GETSIZ   DS    F
BLKLEN   DS    H
BUFF1A   DS    F
BUFF2A   DS    F
ESDPTR   DS    F
ESDEND   DS    F
ADDRESS  DS    F
OFFSET   DS    F
OFFESD   DS    CL16
OFFHEX   DS    CL7
DEVDATA  DS    2F
COUNTREP DS    F
COUNTSPN DS    F
OPTIONS  DS    C
SW       DS    C
SWN      EQU   X'80'               VALID NAME STATEMENT
SWM      EQU   X'20'               RECORD HAS BEEN MODIFIED
SWT      EQU   X'10'               TEXT RECORD
SWC      EQU   X'08'               CCW TYPE RECORD
SWE      EQU   X'04'               CSECT FOUND
SWS      EQU   X'02'               STRING MIGHT SPAN 2 RECORDS
RC       DS    H
PUNCHR   EQU   *
VALXR    DS    6F
PRTDCBW  DS    0F,(PRTDCBL)X
CTLDCBW  DS    0F,(CTLDCBL)X
LIBDCBW  DS    0F,(LIBDCBL)X
PUNDCBW  DS    0F,(PUNDCBL)X
LIBEXLST DS    F
PRTEXLST DS    F
PUNEXLST DS    F
POINTER  DS    F
DECBW    DS    0F,(DECBML)X
JFCB     DS    196X
INREC    DS    0D,CL80
ODL      DS    0F                  OPERAND DESCRIPTOR LIST
ODE1     DS    2F                  OPERAND DESCRIPTOR ENTRY 1
ODE2     DS    2F                  OPERAND DESCRIPTOR ENTRY 2
ODE3     DS    2F                  OPERAND DESCRIPTOR ENTRY 3
ODE4     DS    2F                  OPERAND DESCRIPTOR ENTRY 4
ODE5     DS    2F                  OPERAND DESCRIPTOR ENTRY 5
ODE6     DS    2F                  OPERAND DESCRIPTOR ENTRY 6
ODLL     EQU   *-ODL
PRESENT  EQU   X'80'
QUOTED   EQU   X'40'
STRINGL  DS    H
STRINGA  DS    CL80
STRINGB  DS    CL80
TYPE     DS    C
STATUS   DS    C
OPENP    EQU   X'80'
OPENC    EQU   X'40'
OPENL    EQU   X'20'
OPENZ    EQU   X'10'
GETMN    EQU   X'08'
PREVTYPE DS    C
         DS    C                   LINE-1
LINE     DS    CL133
LINEH1   DS    CL133
MID      EQU   LINE+1,6
TXT      EQU   LINE+9
MBR      EQU   LINE+16,8
RESULT   EQU   LINE+25
MEMBER   DS    D
CSECT    DS    D
DSNAME   DS    CL44
VOLUME   DS    CL6
BLDL     DS    0D,CL80
REPORTS  DS    6F                  REGISTER SAVE AREA
REPORTPG DS    H                   PAGE COUNT, INIT H'0'
REPORTLN DS    H                   LINE COUNT, INIT H'0'
REPORTMX DS    H                   LINES/PAGE, INIT H'50'
REPORTOB DS    CL1                 REPORTO-1 (INIT BLANK)
REPORTO  DS    CL133               OUTPUT AREA
         DS    0D,CL6
INFONUM  DS    H
INFO     DS    CL256
ZPM      DS    CL8
ZPC      DS    CL8
ZPOUT    DS    CL80
ZPVER    DS    CL80
ZPREP    DS    CL80
@DATAL   EQU   *-@DATA
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
