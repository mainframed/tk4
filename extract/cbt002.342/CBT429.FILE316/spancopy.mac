         TITLE '   S P A N C O P Y    '
*---------------------------------------------------------------------*
*                                                                     *
*   SPANCOPY - ORIGINALLY DEVELOPED BY B GODFREY,                     *
*              PRC COMPUTER CENTER INC, MCLEAN VA                     *
*                                                                     *
*   UPDATED AT AFDSC/PENTAGON BY BILL GODFREY                         *
*                                                                     *
*   THIS PROGRAM COPIES AND CLEANS A SPANNED RECORD FILE.             *
*   CLEANING IT MEANS IT DROPS RECORDS LONGER THAN THE OUTPUT         *
*   LRECL, AND RECORDS WITH MISSING SEGMENTS.                         *
*   THE INPUT FILE IS READ USING BSAM WITH RECFM=U,                   *
*   SO ALMOST ANYTHING WILL BE ACCEPTABLE INPUT.                      *
*                                                                     *
*   MESSAGES ARE ISSUED FOR DROPPED RECORDS.                          *
*   IF PARM=SMF IS SPECIFIED WHEN COPYING SMF DATA, THEN THE          *
*   MESSAGES WILL INCLUDE RECORD TYPE, DATE, TIME, AND JOBNAME.       *
*                                                                     *
*   DUE TO THE WAY THE INPUT IS READ, THE PROGRAM RUNS RATHER         *
*   SLOWLY, SO IT SHOULD NOT BE USED TO COPY CLEAN DATA               *
*   (DATA THAT HAS ALREADY BEEN THRU THIS PROGRAM ONCE).              *
*   A COPY PROGRAM THAT USES QSAM WILL GO MUCH FASTER.                *
*                                                                     *
*   SAMPLE JCL                                                        *
*     //STEP EXEC PGM=SPANCOPY,PARM=SMF                               *
*     //SYSPRINT DD SYSOUT=A                                          *
*     //SYSTOTAL DD SYSOUT=A                                          *
*     //SYSUT1   DD DSN=INPUT.DATA,DISP=SHR                           *
*     //SYSUT2   DD DSN=OUTPUT.DATA,DISP=(NEW,KEEP),                  *
*     //            DCB=(RECFM=VBS,LRECL=XXXX,BLKSIZE=XXXX),          *
*     //            UNIT=XXXX,VOL=SER=XXXXXX                          *
*                                                                     *
*---------------------------------------------------------------------*
         EJECT
************************************************************
*                                                          *
*        'SPANCOPY'                                        *
*                                                          *
************************************************************
         SPACE
*        WRITTEN BY. BILL GODFREY, PLANNING RESEARCH CORPORATION.
*        INSTALLATION. PRC COMPUTER CENTER INC, MCLEAN VA.
*        DATE WRITTEN. NOVEMBER 12 1975.
*        DATE UPDATED. MAY 22 1980.
*        ATTRIBUTES. NOT REENTRANT.
*        REMARKS.
*            THIS PROGRAM COPIES A VARIABLE SPANNED DATASET.
*            IF THE INPUT DATASET CONTAINS MISSING SEGMENTS
*            OR INVALID BLOCK/SEGMENT DESCRIPTORS, THE BAD
*            RECORDS OR BLOCKS ARE DROPPED AND INFORMATIVE
*            MESSAGES ARE PRINTED.
*
* CHNGE LOG: 08AUG77 - LOGICAL RECS LONGER THAN THE OUTPUT LRECL ARE
*                      DROPPED AND MSG IS PRINTED
*                      UPDATED TO VS2 FOR PARM=SMF (X'02' 1ST BYTE)
*                      UPDATED TO VS2 FOR PARM=SMX (X'02' 1ST BYTE)
*            JAN79   - UPDATED TO VS2 FOR PARM=SM6 (X'02' 1ST BYTE)
*            28NOV86 - UPDATED TO MVS/XA FOR PARM=SMF ET ALL.
*                      X'06' 1ST BYTE.   JDM1 - JIM MARSHALL
*            30NOV90 - CHECK WAS BEING MADE TO SEE IF RECORD WAS OVER
*                      4095. THINGS HAVE CHANGED SINCE THE OLD DAYS
*                      AND IT WILL PROBABLY BE. JDM2 - JIM MARSHALL
*             3DEC90 - X'06' AND X'20' CHECKS CHANGED TO TM INSTR,
*                      MVS/XA CAN HAVE BOTH BITS ON. J MARSHALL
         SPACE
SPANCOPY CSECT
         USING *,R12
         B     @PROLOG-*(,R15)
         DC    AL1(11),CL11'SPANCOPY'
         DC    CL16' &SYSDATE &SYSTIME '  DATE AND TIME OF ASSEMBLY
@PROLOG  STM   14,12,12(13)
         LR    R12,15
         LR    14,13
         LA    13,SAVE
         ST    13,8(0,14)          CHAIN SAVEAREAS
         ST    14,4(0,13)          CHAIN SAVEAREAS
         SPACE
         MVI   SMFSW,C'N'
         L     R1,0(,R1)           GET PARM ADDRESS
         ST    R1,PARMPTR          SAVE POINTER TO PARM
         LH    R14,0(,R1)          GET PARM LENGTH
         CH    R14,=H'3'           LENGTH 3?
         BL    NOPARSMF            NO - BRANCH
         CLC   2(3,R1),=C'SMF'     SMF?
         BNE   *+8                 NO - BRANCH
         MVI   SMFSW,C'S'          YES - SET SWITCH
         CLC   2(3,R1),=C'SMX'     SMF AND DROP 14/15?
         BNE   *+8                 NO - BRANCH
         MVI   SMFSW,C'X'          YES - SET SWITCH
         CLC   2(3,R1),=C'SM6'     SMF AND SELECT TYPE 6
         BNE   *+8                 NO - BRANCH
         MVI   SMFSW,C'6'          YES - SET SWITCH
NOPARSMF EQU   *
         SPACE
         L     0,SIXTY4K
         GETMAIN R,LV=(0)
         LA    R1,0(0,R1)
         ST    R1,PTRIN            FIRST 32K FOR INPUT BUFFER
         A     R1,THIRTY2K
         ST    R1,PTROUT           SECOND 32K FOR OUTPUT BUFFER
         OPEN  (SYSUT1,INPUT)
         TM    SYSUT1+DCBOFLGS,X'10'
         BNO   ERRXIT
         OPEN  (SYSUT2,OUTPUT)
         TM    SYSUT2+DCBOFLGS,X'10'
         BNO   ERRXIT
         OPEN  (SYSPRINT,OUTPUT)
         OI    SWIT1,X'80'
         LA    R7,4
         L     R9,PTROUT
         XC    0(4,R9),0(R9)       CLEAR BLOCK DESCRIPTOR
         LA    R9,4(0,R9)          POINT PAST BLOCK DESCRIPTOR
READLOOP L     R8,PTRIN
         NI    SWIT1,B'10111111'   SET OFF SYNAD SWITCH
         XC    DECB1,DECB1
*
*              READ A BLOCK INTO WHERE R8 POINTS
*
         READ  DECB1,SF,SYSUT1,(R8),32767
         SPACE
         CHECK DECB1
         SPACE
         L     R14,COUNTB
         AH    R14,=H'1'
         ST    R14,COUNTB          ADD 1 TO NO. OF BLOCKS READ
         SPACE
         TM    SWIT1,B'01000000'   WAS SYNAD EXIT TAKEN DURING CHECK?
         BZ    CHECKOK             NO - BRANCH
         BAL   R14,FORMAT3
         MVC   MSG4M,=CL40'SYSUT1 I/O ERROR. SYNAD EXIT TAKEN.'
         BAL   R14,FORMAT48
         B     BADBLK
         SPACE
CHECKOK  LH    1,DECB1+6           GET BLKSIZE FROM DECB
         L     10,DECB1+16         GET IOB ADDRESS
         SH    1,14(0,10)          SUBTRACT RESIDUAL COUNT
         BP    LENPOS
         BAL   R14,FORMAT3
         MVC   MSG4M,=CL40'BLOCK LENGTH 0 OR LESS'
         BAL   R14,FORMAT48
         B     READLOOP
LENPOS   CH    R1,0(R8)            LENGTH SAME AS BLOCK DESCRIPTOR?
         BE    LENOK               YES - BRANCH
         BAL   R14,FORMAT3
         MVC   MSG4M,=CL40'BDW CONFLICTS WITH ACTUAL LENGTH'
         BAL   R14,FORMAT48
         B     BADBLK
LENOK    AR    R1,R8               POINT R1 PAST BLOCK
         BCTR  R1,0                POINT R1 TO LAST BYTE
         ST    R1,PTREOB             STORE ADDRESS OF LAST BYTE
         LA    R8,4(0,R8)          POINT R8 PAST BLOCK DESCRIPTOR
NXTSDW   TM    2(R8),B'11111100'
         BZ    SDWEDIT
         BAL   R14,FORMAT3
         MVC   MSG4M,=CL40'THIRD BYTE OF SDW INVALID.'
         BAL   R14,FORMAT48
BADBLK   OI    SWIT1,X'80'
         LA    R7,4
         L     R9,PTROUT
         LA    R9,4(0,R9)
         AP    SKIPBLK,P1          ADD 1 TO BLOCKS SKIPPED
         AP    SKIPBLK,CTR3
         ZAP   CTR3,P0
         B     READLOOP
SDWEDIT  CLI   3(R8),0
         BE    SDWED2
         BAL   R14,FORMAT3
         MVC   MSG4M,=CL40'FOURTH BYTE OF SDW NONZERO.'
         BAL   R14,FORMAT48
         B     BADBLK
SDWED2   TM    0(R8),X'80'
         BZ    SDWED3
         BAL   R14,FORMAT3
         MVC   MSG4M,=CL40'NEGATIVE LENGTH IN SDW.'
         BAL   R14,FORMAT48
         B     BADBLK
         SPACE
SDWED3   EQU   *
         MVC   HALF(2),0(R8)
         LH    R14,HALF
         AR    R14,R8
         BCTR  R14,0
         C     R14,PTREOB          IS THIS LENGTH EXCESSIVE?
         BNH   SDWED4              NO - BRANCH
         BAL   R14,FORMAT3
         MVC   MSG4M,=CL40'SDW LENGTH EXCEEDS REST OF BLOCK.'
         BAL   R14,FORMAT48
         B     BADBLK
SDWED4   EQU   *
         TM    SWIT1,X'80'         LOOKING TO BEGIN A NEW RECORD?
         BNO   CONTINUE            NO - BRANCH
EXPNEW   CLI   2(R8),X'00'         COMPLETE LOGICAL RECORD?
         BE    COMPLETE                YES - BRANCH
         CLI   2(R8),X'01'         FIRST SEGMENT?
         BE    NOTLAST                YES - BRANCH
*
*              HERE A COMPLETE OR FIRST SEGMENT WAS
*              EXPECTED, BUT THE MIDDLE OR LAST
*              SEGMENT HAS BEEN ENCOUNTERED. IGNORE IT.
*
         BAL   R14,FORMAT3
         MVC   MSG4M,=CL40'BEGINNING SEGMENT MISSING.'
         BAL   R14,FORMAT48
         MVC   HALF(2),0(R8)
         LH    R6,HALF
         LA    R8,0(R6,R8)
         AP    SKIPSEG,P1
TESTEOB  C     R8,PTREOB
         BL    NXTSDW
         BC    15,READLOOP
CONTINUE CLI   2(R8),X'02'         LAST SEGMENT?
         BE    COMPLETE                YES - BRANCH
         CLI   2(R8),X'03'         MIDDLE SEGMENT?
         BE    NOTLAST                YES - BRANCH
*
*              HERE THE LAST OR MIDDLE SEGMENT WAS
*              EXPECTED, BUT A FIRST OR COMPLETE
*              SEGMENT HAS BEEN ENCOUNTERED. IGNORE
*              WHAT HAS BEEN BUILT AND PROCEED WITH
*              THE NEW SEGMENT.
*
         OI    SWIT1,X'80'
         LA    R7,4
         AP    SKIPSEG,CTR3
         ZAP   CTR3,P0
         BAL   R14,FORMAT3
         MVC   MSG4M,=CL40'ENDING SEGMENT MISSING.'
         L     R9,PTROUT
         BAL   R14,FORMAT49
         LA    R9,4(0,R9)
         B     EXPNEW
COMPLETE OI    SWIT1,X'80'
         BAL   R10,MOVEDATA
         L     R9,PTROUT
         STH   R7,0(0,R9)          STORE LENGTH IN SDW
         CLC   0(2,R9),H4
         BNH   BADPUT
         XC    2(2,R9),2(R9)
         TM    0(R9),X'80'         NEGATIVE LENGTH?
         BO    BADPUT              YES - BRANCH
         CLC   0(2,R9),MAXLEN+2    LENGTH UNACCEPTABLE TO QSAM?
         BH    BADPUT              YES - BRANCH
         CLI   SMFSW,C'N'          SMF?
         BE    SMF1X               NO - BRANCH
         TM    4(R9),X'06'         SMF RECORD? (MVS/XA)      JDM3JDM1
         BO    SMF1X               YES                       JDM3JDM1
         TM    4(R9),X'02'         SMF RECORD? (VS2)             JDM3
         BNO   BADPUT              NO - BRANCH                   JDM3
SMF1X    EQU   *
         CLC   0(2,R9),SYSUT2+LRECL LONGER THAN LRECL?     08AUG77
         BNH   LRLOK
         BAL   R14,FORMAT3
         MVC   MSG4M,=CL40'LENGTH EXCEEDS OUTPUT LRECL.  REJECTED.'
         BAL   R14,FORMAT49
         B     NOPUT
LRLOK    EQU   *
         TM    0(R9),X'F0'         LENGTH GREATER THAN 4095
         B     NOWARN              FIX APPLIED                   JDM2
         BZ    NOWARN              NO - BRANCH
         BAL   R14,FORMAT3
         MVC   MSG4M,=CL40'WARNING - EXCEPTIONALLY LONG RECORD.'
         BAL   R14,FORMAT49
NOWARN   EQU   *
         CLI   SMFSW,C'X'          SMF EXCLUDING 14/15?
         BNE   SMFXX               NO - BRANCH
         CLI   5(R9),14            SMF TYPE 14 RECORD?
         BE    NOPUT               YES - BRANCH
         CLI   5(R9),15            SMF TYPE 15 RECORD?
         BE    NOPUT               YES - BRANCH
         B     SMFW
SMFXX    EQU   *
         CLI   SMFSW,C'6'
         BNE   SMFW
         CLI   5(R9),6
         BNE   NOPUT
SMFW     EQU   *
************************************************************
*        WRITE A LOGICAL RECORD                            *
************************************************************
         PUT   SYSUT2,(R9)
         L     R1,COUNTP
         AH    R1,=H'1'
         ST    R1,COUNTP
NOPUT    LA    R7,4
         L     R9,PTROUT
         LA    R9,4(0,R9)
         ZAP   CTR3,P0
         B     TESTEOB
NOTLAST  NI    SWIT1,X'7F'
         BAL   R10,MOVEDATA
         B     TESTEOB
*
*              MOVEDATA
*
*              INPUT: R8 POINTS TO SDW OF SEGMENT TO MOVE
*                     R9 POINTS TO DATA AREA TO RECEIVE DATA
*              OUTPUT: R8 POINTS TO NEXT SDW OR END OF BLOCK
*                     R9 POINTS PAST DATA AREA MOVED INTO.
*                     R7 IS INCREMENTED BY LENGTH OF MOVE
*                     CTR3 IS INCREMENTED BY 1.
*
MOVEDATA MVC   HALF(2),0(R8)
         TM    HALF,X'80'          NEGATIVE LENGTH?
         BO    BADMOV                YES - BRANCH
         LH    R6,HALF
         SH    R6,H4
         BM    BADMOV
         BCR   8,R10
         AR    R7,R6
         LA    R8,4(0,R8)
         LA    R14,255
         LA    15,256
MOVED1   CR    R6,15
         BNL   MOVED2
         LR    R14,R6
         BCTR  R14,0
MOVED2   C     R7,BUFFCAP          WOULD MOVE GO PAST END OF BUFFER?
         BH    *+8                 YES - DON'T ACTUALLY MOVE ANYTHING
         EX    R14,MVC98
         LA    R8,1(R14,R8)
         LA    R9,1(R14,R9)
         SR    R6,15
         BP    MOVED1
         AP    CTR3,P1             ONLY TIME CTR3 IS ADDED TO
         BR    R10
         SPACE
BADPUT   BAL   R14,FORMAT3
         MVC   MSG4M,=CL40'RECORD REJECTED JUST BEFORE WRITE.'
         BAL   R14,FORMAT49
         B     BADSEG
BADMOV   BAL   R14,FORMAT3
         MVC   MSG4M,=CL40'LENGTH TO MOVE IS LESS THAN 0.'
         BAL   R14,FORMAT48
BADSEG   AP    SKIPBLK,P1
         OI    SWIT1,X'80'
         LA    R7,4
         L     R9,PTROUT
         LA    R9,4(0,R9)
         AP    SKIPSEG,CTR3
         ZAP   CTR3,P0
         B     READLOOP
SYNAD    OI    SWIT1,X'C0'
         SR    15,15
         BR    R14
FORMAT3  STM   R14,R1,FORMAS
         L     R1,PTRIN
         LA    R15,MSG3HX
         LA    R0,24
         BAL   R14,UNPACK
         LA    R15,MSG3CCH
         LA    R1,SYSUT1+DCBFDAD+3
         LA    R0,5
         BAL   R14,UNPACK
         MVI   MSG3P,C')'
         L     R1,COUNTB
         CVD   R1,DOUBLE
         MVC   MSG3B,=X'4020202020202020'
         ED    MSG3B,DOUBLE+4
         PUT   SYSPRINT,MSG3
         LM    R14,R1,FORMAS
         BR    R14
         SPACE
FORMAT48 STM   R14,R1,FORMAS
         LR    R1,R8
         LA    R0,24
         LA    R15,MSG4HX
         BAL   R14,UNPACK
         PUT   SYSPRINT,MSG4
         LM    R14,R1,FORMAS
         BR    R14
FORMAT49 STM   R14,R1,FORMAS
         LR    R1,R9
         LA    R0,24
         LA    R15,MSG4HX
         BAL   R14,UNPACK
         PUT   SYSPRINT,MSG4
         CLI   SMFSW,C'N'
         BE    FORM49X
         MVC   DOUBLE(4),6(R9)     SMF TIME
         L     R1,DOUBLE
         LA    R15,MSG6T
         BAL   R14,TIMEX
         MVC   DOUBLE+4(4),10(R9)  SMF DATE
         OI    DOUBLE+7,X'0F'
         UNPK  MSG6D+1(5),DOUBLE+5(3)
         MVC   MSG6D(2),MSG6D+1    SHIFT YY
         MVI   MSG6D+2,C'.'
         MVC   MSG6J,18(R9)
         SLR   R1,R1
         IC    R1,4(,R9)
         CVD   R1,DOUBLE
         LA    R1,MSG6R
         UNPK  0(3,R1),DOUBLE+6(2)
         OI    2(R1),X'F0'
         CLI   0(R1),C'0'
         BNE   FORM49R2
         MVC   0(2,R1),1(R1)
         MVI   2(R1),C' '
FORM49R2 CLI   0(R1),C'0'
         BNE   FORM49RX
         MVC   0(2,R1),1(R1)
         MVI   2(R1),C' '
FORM49RX EQU   *
         PUT   SYSPRINT,MSG6
FORM49X  LM    R14,R1,FORMAS
         BR    R14
         SPACE
UNPACK   UNPK  0(3,15),0(2,1)        REG  1 --> SENDING FIELD
         TR    0(2,15),UNPACKT-240   REG 15 --> RECEIVING FIELD
         LA    15,2(,15)
         LA    1,1(,1)
         BCT   0,UNPACK              REG  0  =  LENGTH OF SENDING FIELD
         MVI   0(15),C' '
         BR    14                    REG 14 --> RETURN ADDRESS
UNPACKT  DC    C'0123456789ABCDEF'
         SPACE
TIMEX    SLR   R0,R0
         D     R0,=F'360000'
         CVD   R1,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  0(2,R15),DOUBLE+6(2)
         LR    R1,R0
         SLR   R0,R0
         D     R0,=F'6000'
         CVD   R1,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  3(2,R15),DOUBLE+6(2)
         MVI   2(R15),C'.'
         BR    R14
         SPACE
ERRXIT   EQU   *
EODUT1   EQU   *
         CLOSE (SYSUT1)
         CLOSE (SYSUT2)
         TM    SWIT1,X'80'         LOOKING TO BEGIN A NEW RECORD?
         BO    *+10                YES - LAST RECORD WAS COMPLETED
         AP    SKIPSEG,CTR3        NO - LAST RECORD NEVER COMPLETED
         ED    MSG1A(6),SKIPBLK
         ED    MSG2A(6),SKIPSEG
         L     R1,COUNTB
         CVD   R1,DOUBLE
         ED    MSG5A,DOUBLE+4
         L     R1,COUNTP
         CVD   R1,DOUBLE
         ED    MSG5B,DOUBLE+4
         TM    SYSPRINT+DCBOFLGS,X'10'
         BNO   BYPRINT
         OPEN  (SYSTOTAL,(OUTPUT))
         PUT   SYSTOTAL,MSG1
         PUT   SYSTOTAL,MSG2
         PUT   SYSTOTAL,MSG5
         CLOSE (SYSPRINT,,SYSTOTAL)
BYPRINT  L     13,SAVE+4
         LM    14,12,12(13)
         SR    15,15
         BR    14
         DC    0D'0'
         PRINT NOGEN
         SPACE 3
SYSUT1   DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=R,OPTCD=Z,                 X
               RECFM=U,LRECL=32760,BLKSIZE=32760,                      X
               EODAD=EODUT1,SYNAD=SYNAD
         DC    0D'0'
         SPACE 3
SYSUT2   DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=PM,BFTEK=S
         DC    0D'0'
         SPACE 3
SYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,                      X
               RECFM=VBA,LRECL=137,BLKSIZE=141
         DC    0D'0'
SYSTOTAL DCB   DDNAME=SYSTOTAL,DSORG=PS,MACRF=PM,                      X
               RECFM=VBA,LRECL=137,BLKSIZE=141
         DC    0D'0'
         PRINT GEN
         SPACE 3
SAVE     DC    18F'0'
PTREOB   DC    F'0'
PTRIN    DC    F'0'
PTROUT   DC    F'0'
HALF     DC    H'0'
SKIPBLK  DC    P'00000'
SKIPSEG  DC    P'00000'
CTR3     DC    P'000'
MVC98    MVC   0(0,9),0(8)
SWIT1    DC    X'00000700'
MSG1     DC    0H'0',AL2(MSG1L,0)
         DC    C'0' CARRIAGE CONTROL
         DC    C'  '
MSG1A    DC    X'402020202120'
         DC    C' BLOCKS SKIPPED.'
MSG1L    EQU   *-MSG1
MSG2     DC    0H'0',AL2(MSG2L,0)
         DC    C'0' CARRIAGE CONTROL
         DC    C'  '
MSG2A    DC    X'402020202120'
         DC    C' SEGMENTS SKIPPED.'
MSG2L    EQU   *-MSG2
         DC    C' '
MSG3     DC    0H'0',AL2(MSG3L,0)
         DC    C' '   CARRIAGE CONTROL
         DC    C'ERROR IN BLOCK NO.'
MSG3B    DC    CL8' '
         DC    C' (CCHHR '
MSG3CCH  DC    CL10' '
MSG3P    DC    C') 1ST 24 BYTES OF BLOCK IN HEX: '
MSG3HX   DC    CL48' '
MSG3L    EQU   *-MSG3
MSG4     DC    0H'0',AL2(MSG4L,0)
         DC    C' '   CARRIAGE CONTROL
         DC    34C' '
MSG4M    DC    CL40' '
         DC    CL2' '
MSG4HX   DC    CL48' '
MSG4L    EQU   *-MSG4
MSG5     DC    0H'0',AL2(MSG5L,0)
         DC    C'0'    CARRIAGE CONTROL
MSG5A    DC    X'4020202020202120'
         DC    C' BLOCKS READ.'
         DC    CL8' '
MSG5B    DC    X'4020202020202120'
         DC    C' LOGICAL RECORDS WRITTEN.'
MSG5L    EQU   *-MSG5
MSG6     DC    0H'0',AL2(MSG6L,0)
         DC    C' '
         DC    34C' '
         DC    C'SMF DATE='
MSG6D    DC    C'YY.DDD'
         DC    C' TIME='
MSG6T    DC    C'HH.MM'
         DC    C' TYPE='
MSG6R    DC    C'NNN'
         DC    C' JOBNAME='
MSG6J    DC    C'JJJJJJJJ'
MSG6L    EQU   *-MSG6
SIXTY4K  DC    0F'0',A(64*1024)
THIRTY2K DC    A(32*1024)
BUFFCAP  DC    A(32*1024)          BUFFER CAPACITY
MAXLEN   DC    A(32756)             MAXIMUM LENGTH ALLOWED BY QSAM
H4       DC    H'4'
P1       DC    P'1'
P0       DC    P'0'
COUNTB   DC    F'0'
COUNTP   DC    F'0'
DOUBLE   DC    D'0'
FORMAS   DC    4F'0'
PARMPTR  DS    F
SMFSW    DS    CL1
         LTORG
PATCH    DC    4D'0'
         SPACE
LRECL    EQU   82
DCBOFLGS EQU   48
DCBFDAD  EQU   5
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
