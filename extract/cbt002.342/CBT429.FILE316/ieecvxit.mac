IEECVXIT TITLE 'M C S   EXIT  -    IEECVXIT  ( LOC ) '
*---------------------------------------------------------------------*
*                                                                     *
*        FUNCTION:  THIS PROGRAM IS USED USED AS AN MCS EXIT.  IT CAN *
*              MINIPULATE CONSOLE MESSAGES OR TRIGER AN EVENT BECAUSE *
*              OF A CONSOLE MESSAGE BEING ISSUED.                     *
*                                                                     *
*        ENTRY:  IEECVXIT, CALLED BY IEAVVWTO (LMOD IGC0003E).        *
*                 ORDER IEAVVWTO(P),IEAVMWTO,IGC0203E,IEECVXIT(P)     *
*                 ENTRY IEAVVWTO                                      *
*                                                                     *
*        EXIT:  RETURN TO CALLER, VIA REGISTER 14                     *
*                                                                     *
*        INPUT:  PARAMETER LIST IN REGISTER 1                         *
*                                                                     *
*            REGISTER 1 ---->  ------------------------------------   *
*                              × UCMMSTXT  × UCMROUTC  × UCMDESCD ×   *
*                              × 128 BYTES ×   4 BYTES ×  4 BYETS ×   *
*                              ------------------------------------   *
*                                                                     *
*            REGISTER 5 + X'74' ----> VPARMAD IN THE SVRB EXTENTION   *
*                    4 BYTES INTO THIS FIELD IS THE ECB FOR THE WTOR  *
*                                                                     *
*        NO SUBPROGRAM CALLS.                                         *
*                                                                     *
*           THIS ROUTINE HAS TWO INTERNAL SUBROUTINES:                *
*           IEECR2D2 IS A SUBROUTINE THAT OPERATES UNDER SRB MODE.    *
*           IRBROUT IS A SUBROUTINE THAT REQUESTS SVC 34 FUNCTIONS    *
*           UNDER AN IRB THAT BELONGS TO 'CMD1'.  'CMD1' IS A TASK    *
*           THAT IS ALWAYS RUNNING. (IN OUR SHOP 'CMD1' IS STARTED AT *
*           IPL, AND PERFORMS A WAIT THAT IS NEVER POSTED).           *
*                                                                     *
*                                                                     *
*                                                                     *
*        FILES:  NONE.                                                *
*                                                                     *
*        NOTES ON OPERATION:  THIS ROUTINE OPERATES AS AN MCS EXIT.   *
*           IT IS CAPABLE OF PERFORMING THE FOLLOWING FUNCTIONS:      *
*                                                                     *
*            . CHANGING ROUTING CODES ON MESSAGES SO THAT MESSAGES    *
*              CAN BE SENT TO DIFFERENT CONSOLES THAN THOSE ORIGINALLY*
*              REQUESTED.                                             *
*                                                                     *
*            . CHANGING DESCRIPTOR CODES ON MESSAGES INORDER TO CHANGE*
*              MESSAGES TO ROLLABLE/NON-ROLLABLE.                     *
*                                                                     *
*            . DELETEING MESSAGE COMPLETELY BY CHANGING THE ROUTING   *
*              CODE TO ZERO.                                          *
*                                                                     *
*            . TRIGERING AN ACTIVITY (IE. START A TASK) IF A SPECIFIC *
*              MESSAGE IS ISSUED.                                     *
*                                                                     *
*            . REPLY TO 'WTORS' AUTOMATICALLY                         *
*                                                                     *
*        MAINTENANCE HISTORY:                                         *
*                                                                     *
*         7/16/82 - INITIAL RELEASE IN RESPONSE TO H8219703           *
*---------------------------------------------------------------------*
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*  MODULE  -   IEECVXIT     ( MCS EXIT )       REL 2.0  15 JUNE 82    *
*                                                                     *
*      THIS MCS EXIT IS BASED ON THE SOURCE FROM 'SYS1.SAMPLIB'       *
*      FROM THE IPO SYSTEM. THIS CODE CAME BY WAY OF FAIRCHILD        *
*      CAMERA CORPORATION THROUGH THE SHARE SPLA MVSMODS TAPE.        *
*                                                                     *
*      THAT IS WHERE THE SIMILIARITY ENDS. WE NOT ONLY WANT TO DO     *
*      THE CHANGING OF ROUTCDE'S, DESC CODES ETC, BUT ALSO WE         *
*      WANT TO DO SOME AUTOMATIC REPLIES. WHY WAKE UP THE OPER-       *
*      ATOR ???  SO FOR THINGS LIKE WHEN VTAM IS INITIALIZED,         *
*      THEN WE ALWAYS  ' S TSO '.  THUS  'R2D2' (ROUTINE IEECR2D2)    *
*      IS NOW ALIVE AND DOING GOOD THINGS. EVER GET AN OPERATOR       *
*      TO REPLY 'HOLD' TO THAT NASTY ALLOCATION MESSAGE AND MAKES     *
*      YOU 3033 LOOK LIKE IT IS RUNNING OS/MVT ( Q4 IS LOCKED ).      *
*      SO THERE ARE ALL KINDS OF POSSIBILITIES. HOPEFULLY THE         *
*      DIRTY WORK IS DONE. GOOD LUCK ALL                              *
*                                                                     *
*     NOTE: MODULE IS REENTRANT AND SHOULD STAY THAT WAY              *
*                                                                     *
*     INSTALLED: 15 JUNE 1982                                         *
*                                                                     *
*     ----- IMPORTANT INSTALLATION NOTE -----  (JTS-CDC)              *
*                                                                     *
*     THERE ONCE WAS AN APAR DESCRIBING A DISTRIBUTION ERROR FOR      *
*     THE BASE MVS 3.7 SYSTEM.  APAR OZ45469 DESCRIBES IT.            *
*     MODULE IEECVXIT (DUMMY BR14 MCS EXIT) WAS DISTRIBUTED ON        *
*     SYS1.AOSC5 WITH THE LKED ATTRIBUTES OF 'NONE' INSTEAD OF        *
*     'RENT' AND 'REFR' AS IT SHOULD HAVE BEEN.  DURING STAGE 2       *
*     OF THE SYSGEN PROCESS, THIS MODULE ALONG WITH THREE OTHERS      *
*     (IEAVVWTO & IEAVMWTO ON AOSC5 AND IGC0203E ON AOSB3) WERE       *
*     INCLUDED TOGETHER TO PRODUCE MODULE IGC0003E ON LPALIB.         *
*     ALTHOUGH THE OTHER THREE MODULES WERE SHIPPED WITH 'RENT' AND   *
*     'REFR' AS THEY SHOULD HAVE BEEN, THE IEECVXIT MODULE ATTRIBUTE  *
*     OF 'NONE' CAUSE THE FINAL IGC0003E MODULE TO BE GENERATED AS    *
*     'NOT RENT' AND 'NOT REFR'.  IGC0003E RUNNING SERIAL MODE DOES   *
*     LITTLE FOR SYSTEM PERFORMANCE SINCE IT IS IN CONTROL FOR EVERY  *
*     CONSOLE MESSAGE ISSUED.  APAR OZ45469 WAS CLOSED AS 'SUGGESTED  *
*     SYSTEM IMPROVEMENT' AND EVENTUALLY, MVS 3.8 WAS SHIPPED         *
*     CORRECTLY, HOWEVER, THE IPO FOLKS MANAGED TO MAKE THE SAME      *
*     MISTAKE WITH IEECVXIT AND AS FAR AS WAS KNOWN BY TAMPA BAY      *
*     AS OF 5/27/82 (SEE PROBLEM 5X333), THE IPO ERROR HAD NOT BEEN   *
*     OFFICIALLY APARED, BUT LEVEL 2 INDICATED AWARENESS OF THE       *
*     ERROR AND PROMISED TO CORRECT THE DISTRIBUTED CODE ON FUTURE    *
*     SHIPS.  THE CIRCUMVENTION, OF COURSE, IS TO ZAP THE ATTRIBUTE   *
*     OF IEECVXIT ON AOSC5 AND IGC0003E ON LPALIB TO 'RENT' & 'REFR'. *
*     WE HAVE DONE THIS WITHOUT INCIDENT AT CDC.                      *
*                                                                     *
*     SADSC:                                                          *
*                                                                     *
*     I WANT TO THANK JERRY SAUNDERS OF THE LIBRARY OF CONGRESS FOR   *
*     PUTTING THE SRB SCHEDULING INTO THE CODE. BILL COWAN OF         *
*     COCA-COLA IN ATLANTA HAS THE IDEA THAT WHAT WE SHOULD DO IS     *
*     HAVE STC. I WILL CALL IT 'C3PO'. IF YOU WANT TO CEASE THE       *
*     AUTO REPLY FUNCTIONS OR ANY FUNCTIONS OF 'R2D2' YOU SIMPLY      *
*     ' P D3PO '. C3PO WOULD BE NOTHING MORE THAN A STIMER WAIT       *
*     WAKING UP TO SEE IF A STOP COMMAND HAS BEEN ISSUED FOR HIM.     *
*     THEN THE SRB WILL SIMPLY DISAPPEAR. THEN TO RESTART THE         *
*     WHOLE PROCESS, YOU SIMPLY  ' S C3PO '. OPERATORS WILL UNDER-    *
*     STAND THIS LOGIC AND IT REMOVES THE RESTRICTION THAT YOU        *
*     BUMP THE SRB OFF  CMD1.  WILL WRITE THE CODE ASAP FOR I NEED    *
*     R2D2 BACK IN OPERATION ASAP. ALSO I WILL CLEAN UP THE CODE      *
*     A LITTLE IN MY OWN STYLE AND DELETE SOME OF THE CODE THAT       *
*     IS BYPASSED, PLUS ADD SOME MORE EXPLANATION OF AREAS IN THE     *
*     CODE.                                                           *
*                                JIM MARSHALL, CAPT, USAF             *
*                                SAN ANTONIO DATA SERVICES CENTER     *
*                                8630 BROADWAY                        *
*                                SAN ANTONIO, TX  78217               *
*                                (512) 828-0201/0334                  *
*                                                                     *
* CHNGE LOG: 1 AUG 84 - SUPPRESSION TABLE WAS ENTRIES OF 8 BYTES      *
*            WITH LENGTH SPECIFIED OF EACH ENTRY OF 7 BYTES. NO       *
*            WONDER  ONLY THE 1ST MSG OF THE TABLE WAS GETTING        *
*            THROWN AWAY.                                         JDM1*
*                                                                     *
*            19 OCT 84 - CAPT JIM PETERSON (AIR FORCE INSPECTION &    *
*            SAFETY CENTER, NORTON AFB, CA) REPORTED A PROBLEM WITH   *
*            THE INITIATOR ABENDING WHEN YOU RUN A JOB V=R. SUBPOOL   *
*            250 IS INVALID FOR THOSE TYPE OF JOBS. HE CHANGED THE    *
*            SUBPOOL TO SP=229 AND NO PROBLEMS. THANKS            JDM2*
*                                                                     *
*---------------------------------------------------------------------*
         EJECT
*---------------------------------------------------------------------*
*    MACRO DEFINITIONS                                                *
*---------------------------------------------------------------------*
         SPACE
         MACRO
         IEECODES &ROUTCDE=13,&DESC=,&ID=IEE
         LCLC  &CD(4)
         LCLA  &I,&N
         LCLB  &B(32)
.*
.* DESCRIPTOR CODES
.*
&I       SETA  1
.DCHK    AIF   (T'&DESC EQ 'O').RCHK
&N       SETA  &DESC(&I)
&I       SETA  &I+1
         AIF   (&N GE 1 AND &N LE 16).ASSIGND
         MNOTE 8,'&DESC(&I) IS INVALID DESCRIPTOR - IGNORED'
         AGO   .NXTD
.ASSIGND ANOP
&B(&N)   SETB  1
.NXTD    AIF  (&I LE N'&DESC).DCHK
&I       SETA  1
.*
.* ROUTE CODES
.*
.RCHK    AIF   (T'&ROUTCDE EQ 'O').ASSIGNC
&N       SETA  &ROUTCDE(&I)
&I       SETA  &I+1
         AIF   (&N GE 1 AND &N LE 16).ASSIGNR
         MNOTE 8,'ROUTCDE(&I) IS INVALID ROUTE - IGNORED'
         AGO   .NXTR
.ASSIGNR ANOP
&B(&N+16) SETB  1
.NXTR    AIF   (&I LE N'&ROUTCDE).RCHK
.ASSIGNC ANOP
&I       SETA  1
&CD(&I)   SETC  '&B(1)&B(2)&B(3)&B(4)&B(5)&B(6)&B(7)&B(8)'
&CD(&I+1) SETC  '&B(9)&B(10)&B(11)&B(12)&B(13)&B(14)&B(15)&B(16)'
&CD(&I+2) SETC  '&B(17)&B(18)&B(19)&B(20)&B(21)&B(22)&B(23)&B(24)'
&CD(&I+3) SETC  '&B(25)&B(26)&B(27)&B(28)&B(29)&B(30)&B(31)&B(32)'
&ID.DESCD DC   BL2'&CD(1)&CD(2)'
&ID.ROUTC DC   BL2'&CD(3)&CD(4)'
         MEND
         MACRO
&NAME    SVC34 &MESG
         LCLA  &LEN
&LEN     SETA  K'&MESG-2+4
         LA    1,*+8               GET ADDRESS OF CONTROL BLOCK
         B     LC&SYSNDX           GO ISSUE THE COMMAND
         DC    AL2(&LEN),AL2(0)    TEXT LENGTH
         DC    C&MESG              COMMAND TEXT
LC&SYSNDX SR    0,0                INDICATE MASTER CONSOLE
         SVC   34                  SEND THE COMMAND
         MEND
         MACRO
&L       CHECKMSG &CMDXX,&WHERE
&L       CLC   =C'&CMDXX',UCMMSTXT
         BE    &WHERE
         MEND
         TITLE 'M C S   EXIT  -    IEECVXIT  ( LOC ) -  MAIN ROUTINE'
IEECVXIT CSECT
         USING *,R15                   EST. ADDRESSABILITY
         B     PROLOG                  BYPASS PROLOGUE
         DC    AL1(L'ID)               PROLOGUE LENGTH
ID       DC    C'IEECVXIT &SYSDATE'    MODULE NAME AND COMPILE DATE
         DS    0H                      ALLIGNMENT
PROLOG   SAVE  (14,12)                 SAVE CALLERS REGS
         LR    R12,R15                 SAVE ENTRY ADRESS
         DROP  R15                     LOSE OLD BASE
         USING IEECVXIT,R12            REAL BASE ADDRESS=R12
         L     R2,0(R1)                SET ADDR TO IEECUCM DSECT
         USING IEECUCM,R2              EST. ADDR TO IEECUCM DSECT
         GETMAIN R,LV=WORKAL,SP=229    GET CORE FROM SP=229      JDM2
         LR    R10,R1                  SAVE THE ADDRESS
         USING WORKAREA,R10            GET ADDRESSABILITY
         ST    R13,SAVE1+4             SETUP
         ST    R10,8(R13)                  SAVEAREA
         LR    R13,R10                         CHAIN
*                                      GET VPARMAD FROM ORIGINAL
         L     R8,X'74'(R5)            SVRB EXTENTION
         MVC   $ECB,4(R8)              SAVE HIS ECB ADDRESS
*        CHECKMSG SPO002I,ATTACH12     S WTRH IF SPO002I
         CHECKMSG IST020I,ATTACH4      DO WE START ONLINES WITH STC ?
*        CHECKMSG IDC,UPDROUT1         IDC PREFIXED MSG ?
*        CHECKMSG IGF,UPDROUT2         IGF PREFIXED MSG ?
         SPACE 1
*---------------------------------------------------------------------*
*        SCAN THE TABLE FOR MSGS TO BE SUPPRESSED                     *
*---------------------------------------------------------------------*
SUPCHK   EQU   *
         LA    R7,RMSG0                SET UP R7
         LA    R8,L'RMSG0              GET LENGTH OF MSG
         LA    R9,RMSG0END-L'RMSG0     SET END OF TABLE ADDR
SUPCHK0  EQU   *
         CLI   0(R7),C' '              ARE WE DONE ???
         BE    RPLYCHK                 CHECK FOR AUTO REPLIES
         CLC   UCMMSTXT(L'RMSG0),0(R7) CHECK MSG ID
         BE    UPDROUT0                GO TO UPDATE
         BXLE  R7,R8,SUPCHK0           SCAN ENTIRE TABLE
         B     RPLYCHK                 SKIP CHKMSG LOGIC AT CDC
*---------------------------------------------------------------------*
*        SCAN THE TABLE FOR MSGS THAT REQUIRE AUTOMATIC REPLIES       *
*---------------------------------------------------------------------*
         SPACE
RPLYCHK  EQU   *
         LA    R7,RPLYTAB              POINT TO TABLE OF REPLIES
         LA    R8,L'RPLYTAB              GET LENGTH
         LA    R9,RPLYEND-L'RPLYTAB    SET END OF TABLE ADDR
RPLYCHK0 EQU   *
         CLI   0(R7),C' '              ARE WE DONE
         BE    ROLLCHK                 CONTINUE CHECKING
         CLC   UCMMSTXT(L'RPLYTAB-1),0(R7) CHECK THE MSG
         BE    RPLYCHK1                IF SO, CHECK FURTHER
         BXLE  R7,R8,RPLYCHK0          SO, LOOP
         B     ROLLCHK
RPLYCHK1 EQU   *
         CLC   UCMMSTXT(7),=C'IEF238D' ALLOC RECOVERY MSG ?
         BNE   ATTACH0                 NO - THEN ATTACH FOR SURE
         LA    R3,UCMMSTXT+19          BEGIN SCAN ADDRESS
         LA    R4,1                    INCREMENT
         LA    R5,UCMMSTXT+39          SCAN LIMIT ADDRESS
SCAN238  EQU   *
         CLI   0(R3),C'W'              SEARCH FOR 'WAIT' IN MSG
         BE    ATTACH0                 FOUND IT - ATTACH FOR REPLY
         BXLE  R3,R4,SCAN238           NOT FOUND - CONTINUE SCAN
         B     RETURN                  NO 'WAIT' IN MSG - QUIT
         SPACE
*---------------------------------------------------------------------*
*        SCAN THE TABLE FOR MSGS THAT ARE TO BE MADE                  *
*        ROLLABLE. I.E. THEY WILL ROLL OFF SCREEN                     *
*---------------------------------------------------------------------*
         SPACE
ROLLCHK  EQU   *
         LA    R7,ROLLTAB              POINT TO TABLE OF REPLIES
         LA    R8,L'ROLLTAB            GET LENGTH
         LA    R9,ROLLEND-L'ROLLTAB    SET END OF TABLE ADDR
ROLLCHK0 EQU   *
         CLI   0(R7),C' '              ARE WE DONE
         BE    RETURN                  ALL MISSES SO RETURN
         CLC   UCMMSTXT(L'ROLLTAB),0(R7) CHECK THE MSG
         BE    UPDROUT3                UPDATE
         BXLE  R7,R8,ROLLCHK0          SO, LOOP
         EJECT
*---------------------------------------------------------------------*
*        RETURN TO WHENCE WE CAME, JUST REMEMBER TO FREE UP           *
*        OUR GOTTEN CORE FROM SP=229                              JDM2*
*---------------------------------------------------------------------*
         SPACE
RETURN   EQU   *
         LR    R1,R13                  GET AREA ADDRESS
         L     R13,4(,R13)             POINT TO OLD SAVEAREA
         FREEMAIN R,A=(1),LV=WORKAL,SP=229 INVOKE FREEMAIN        JDM2
         LM    R14,R12,12(R13)         RESTORE ENTRY REGISTERS
         LA    R15,0(0,0)              SET RETURN CODE
         BR    R14                     RETURN TO MCS
         SPACE
*---------------------------------------------------------------------*
*        SUPPRESS THE ROUTCDE BY MOVING IN 0'S                        *
*---------------------------------------------------------------------*
         SPACE
UPDROUT0 EQU    *
         XC     UCMROUTC(2),UCMROUTC      MOVE IN ROUTCDE=0
         B      RETURN                    EXIT
         SPACE
*---------------------------------------------------------------------*
*        CHANGING ROUT AND DESC CODES                                 *
*---------------------------------------------------------------------*
         SPACE
UPDROUT1 EQU   *
         MVC   UCMROUTC(L'MSSROUTC),MSSROUTC   CHANGE ROUT CODE
         MVC   UCMDESCD(L'MSSDESCD),MSSDESCD   CHANGE DESC CODE
         B     RETURN                     RETURN TO CALLER
         SPACE
*---------------------------------------------------------------------*
*        ADD ROUTCDE 13 TO THE MSG. GOES TO MSS CONSOLE               *
*        AND MAKE THE MESSAGE NON-ROLLABLE                            *
*---------------------------------------------------------------------*
         SPACE
UPDROUT2 EQU   *
         MVC   UCMROUTC(L'IGFROUTC),IGFROUTC    CHANGE ROUT CODE
         MVC   UCMDESCD(L'IGFDESCD),IGFDESCD    CHANGE ROUT CODE
         B     RETURN                           RETURN TO CALLER
         SPACE
*---------------------------------------------------------------------*
*        CHANGE DESC CODE TO MAKE THIS MESSAGE ROLLABLE               *
*        INSTEAD OF NON-ROLLABLE & MAKE ROUTCDE=2                     *
*---------------------------------------------------------------------*
         SPACE
UPDROUT3 EQU   *
         MVC   UCMROUTC(2),ROLROUTC     CHANGE ROUTCDE
         MVC   UCMDESCD(2),ROLDESCD     CHANGE DESC
         B     RETURN                   RETURN TO CALLER
         EJECT
*---------------------------------------------------------------------*
*        SCHEDULE THE SUBROUTINE 'IEECR2D2'. THERE ARE MANY REASONS   *
*        WHY THIS ROUTINE NEEDS TO RUN IN SRB MODE.  YOU NEED TO REPLY*
*        TO A WTOR AND THE REPLY NUMBER HAS NOT BEEN GENERATED YET.   *
*        WE CAN'T WAIT FOR THE REPLY ID BECAUSE A WAIT IN IEECVXIT    *
*        WILL HALT THE PROCESSING OF THE WTOR.  SUBTASKING HERE DOES  *
*        NOT HELP EITHER BECAUSE THE MAIN TASK MIGHT COMPLETE BEFORE  *
*        A MCS SUBTASK... SO WHAT WE WILL DO IS SCHEDULE A ROUTINE    *
*        TO PROCESS THE WTOR UNDER A DIFERENT ASID - WHERE A WAIT CAN *
*        BE EFFECTIVE AND TOLERATED.  HERE WE WILL HAVE THE AUTOMATIC *
*        REPLIES DONE FOR US, ALSO WE CAN HAVE SOME COMMANDS EXECUTED *
*        VIA SVC 34. THE FOLLOWING IS A LIST OF ENTRY CODES FOR       *
*        DIRECTING THE FUNCTION OF THIS ROUTINE.                      *
*                                                                     *
*             (  R1  )          COMMAND                               *
*                                                                     *
*                0      -     ( SOME AUTO REPLY )                     *
*                4      -     S TSO AND CDCNETSL                      *
*                8      -     S WTRH                                  *
*               12      -     S WTRH                                  *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE
ATTACH12 EQU   *
         LA    R3,12            SET ENTRY CODE 'S WTRH'
         B     ATTACH           ENTER SRB SCHEDULE LOGIC.
         SPACE
ATTACH8  EQU   *
         LA    R3,8             SET ENTRY CODE 'S WTRH'
         B     ATTACH           ENTER SRB SCHEDULE LOGIC.
         SPACE
ATTACH4  EQU   *
         LA    R3,4             SET ENTRY CODE 'S SSTARTUP'
         B     ATTACH           ENTER SRB SCHEDULE LOGIC.
         SPACE
ATTACH0  EQU   *                SET ENTRY CODE TO ISSUE OPERATOR REPLYS
         LA    R3,0             PERFORM SOME AUTO REPLY
*        B     ATTACH           ENTER SRB SCHEDULE LOGIC.
         SPACE
ATTACH   EQU   *
         MVC   $REASON,7(R7)    MOVE IN REPLY CODE
         L     R1,CVTLOC        PTR CVT ADDRESS
         L     R1,0(R1)         CVT ADDRESS
         L     R1,12(R1)        ASCB ADDRESS
         MVC   $ASID,36(R1)     SAVE ASID FROM ASCB
         STC   R3,$CODE         SAVE ENTRY CODE
         GETMAIN R,LV=WORKAL,SP=245   GET CORE FROM SP=245
         LR    R3,R1            SAVE AREA ADDRESS
*                               COPY WORKAREA TO CSA FOR USE BY THE
*                               SRB AND IRB ROUTINES
         MVC   0(WORKAL-L'WTOAREA,R3),WORKAREA  COPY WORKAREA
         PUSH  USING
         DROP  R10
         USING WORKAREA,R3
         XC    SRB(SRBSIZE),SRB  ZERO OUT OUR SRB
         MVC   SRBID,=CL4'SRB '  MOVE IN THE SRB IDENTIFER
         L     R2,CVTLOC         PTR CVT ADDRESS
FNDASCB  EQU   *
         USING CVT,R2
         L     R2,CVTASVT        POINT TO ASVT
         USING ASVT,R2
         LA    R14,ASVTENTY-4    POINT TO FIRST ENTRY MINUS FOUR
         L     R15,ASVTMAXU      LOAD NUMBER OF ASID'S
*                                FIRST CHORE IS TO FIND CMD1'S
*                                ASID.
$NEXT    EQU   *
         BCTR  R15,R0            DECR NUMBER OF ASIDS
         LTR   R15,R15           LAST TIME ?
         BZ    RETURN            RETURN ASID NOT FOUND
         LA    R14,4(R14)        POINT TO NEXT ASVTENTY ENTRY
         USING ASVTENTY,R14
         ICM   R2,15,ASVTENTY    LOAD ASCB ADDR
         BM    $NEXT             BR IF NOT ACTIVE
         USING ASCB,R2
         ICM   R7,15,ASCBJBNS    LOAD TASK NAME
         BZ    CHKJOB            YES. CHECK JOB NAME
         CLC   =CL8'INIT',0(R7)  IS IT 'INIT' ?
         BNE   CHKIT             NO. SEE WHAT THE TASK NAME IS
CHKJOB   EQU   *
         ICM   R7,15,ASCBJBNI    JOB NAME ADDR
         BZ    $NEXT
CHKIT    EQU   *
         CLC   0(8,R7),=CL8'CMD1' IS THIS THE JOBNAME
         BNE   $NEXT             NO, LOOK AT NEXT ASCB
         ST    R2,SRBASCB        CMD1'S ASCB
         MVC   SRBPTCB,ASCBTNEW  SAVE FIRST READY TCB ADDRESS
         MVC   SRBPASID,ASCBASID SAVE CMD1'S ASID
         DROP  R2
         LA    R1,IEECR2D2       SRB ENTRY POINT
         ST    R1,SRBEP          SAVE IN SRB
         LA    R1,SRBCLEAN       SRB ABNORMAL TERMINATION ROUTINE
         ST    R1,SRBRMTR        SAVE IN SRB
         ST    R3,SRBPARM        SEND WORK AREA AS THE PARAMETER
*                                EVERYTHING IS READY SCHEDULE THE SRB
         SCHEDULE SRB=SRB,SCOPE=LOCAL
         POP   USING
         B     RETURN            ALL DONE SRB IS SCHEDULED
*
SRBCLEAN BR    R14               SRB ERROR ROUTINE
         EJECT
*---------------------------------------------------------------------*
*        CONSTANTS,  ETC,  ETC                                        *
*---------------------------------------------------------------------*
*
         LTORG
*
         SPACE
*---------------------------------------------------------------------*
*        MSG TO MSS CONSOLE ROUTCDE=(1,13),   MAKE MSG                *
*        DESC=4                                                       *
*---------------------------------------------------------------------*
         SPACE
         IEECODES ID=MSS,ROUTCDE=(2,13),DESC=4
         SPACE
*---------------------------------------------------------------------*
*        PUT MSG TO CONSOLE  (ROUTCDE=2),  MAKE MSG  DESC=4           *
*---------------------------------------------------------------------*
         SPACE
         IEECODES ID=ROL,ROUTCDE=2,DESC=4
         SPACE
*---------------------------------------------------------------------*
*        PUT MSG TO MASTER CONSOLE, SYSTEM INFORMATION                *
*        AND TO MSS CONSOLES (ROUTCDE=(1,2,13), AND MAKE              *
*        THE MSGS NON-DELETABLE FROM MASTER CONSOLE                   *
*        DESC=2                                                       *
*---------------------------------------------------------------------*
         IEECODES ID=IGF,ROUTCDE=(1,2,13),DESC=2
         SPACE
*---------------------------------------------------------------------*
*        MSGIDS IN THIS TABLE WILL BE UPDATED TO BE SUPPRESSED        *
*        PEOPLE WITH MVS/SP1.3 SHOULD LOOK AT THE PARMLIB FACILITY    *
*        TO DO THE SAME THING.                                        *
*---------------------------------------------------------------------*
         SPACE
RMSG0    DS    0CL7
         DC    C'IEC130I'      DD STATEMENT MISSING
         DC    C'IKF180I'      COBOL MSG
         DC    C'SAD0059'      SADSC SMF21 STATS MSG
         DC    C'UNU155I'      UNIV OF NEBRASKA MSG
         DC    C'*** SIG'      VSAPL SIGNOFF MSG
         DC    C'       '   <= LAST ONE MUST BE BLANK......
RMSG0END EQU   *
         SPACE
*---------------------------------------------------------------------*
*        MSGIDS FOR WHICH WE WANT TO PERFORM AUTOMATIC REPLIES.       *
*        THE AL(X) IS WHERE X IS THE FUNCTION THAT WE WANT PERFORMED  *
*        WHEN WE GO TO R2D2.  SHOULD BE A MULTIPLE OF 4 SO WE CAN     *
*        US IT IN A BRANCH TABLE.                                     *
*                                                                     *
*        NOTE: MSG IEC301A MAY LOOK STRANGE IN THIS TABLE. I HAVE     *
*              USERS WHO TRY TO CATALOG STRANGE THINGS. OPERATIONS    *
*              MANDATED THEY MUST KNOW THE MASTER PASSWORD. HAVE      *
*              TOLD THEM WHEN THEM SHOULD REPLY CORRECTLY, NEVER!     *
*              BUT I STILL FIND THINGS IN THE MASTER CATALOG. SO      *
*              'R2D2' WILL AUTO REPLY, OPERATOR IS GOING TO HAVE TO   *
*              BE POISED TO BEAT R2D2 TO THE PUNCH. REMEMBER THAT     *
*              IF YOU EVER HAVE TO REPLY ANYTHING, JUST SHUT DOWN     *
*              THE TASK THAT RECEIVES THE SRB, WHATEVER YOU USE;      *
*              IN MY CASE 'CMD1'.  J MARSHALL                         *
*---------------------------------------------------------------------*
         SPACE
RPLYTAB  DS    0CL8
         DC    C'IEF238D',AL1(0)    DEVICE NAME/WAIT/CANCEL (WAIT)
         DC    C'IEF433D',AL1(4)    HOLD OR NOHOLD (NOHOLD)
         DC    C'IEF434D',AL1(4)    INVALID REPLY HOLD/NOHOLD (NOHOLD)
         DC    C'IKT012D',AL1(8)    TCAS TERMINATION U/DUMP (U)
         DC    C'SAD0402',AL1(8)    SADSC MRCLEAN MSG.
         DC    C'IEC301A',AL1(8)    REPLY TO MAST CAT WRITE. WILL FAIL
*                                   FOR USER. WE HAVE MASTER CAT
*                                   PROTECTED. SO TO ACTUALLY DO IT
*                                   FIRSY ISSUE  P CMD1
*        DC    C'IEFTMS0',AL1(8)    REPLY U FOR UCC1-TMS (U)
         DC    C'IEC613A',AL1(8)    POSITIONING ERROR    (U)
         DC    C'DFH1505',AL1(12)   REPLY GO OR CANCEL (GO)
         DC    C'IEC804A',AL1(16)   REPLY POST/CONTINUE/DROP (POST)
         DC    C'       ',AL1(0)
         DC    C'       ',AL1(0)   <= LAST ONE MUST BE BLANK
RPLYEND  EQU   *
         SPACE
*---------------------------------------------------------------------*
*        MSGIDS FOR WHICH WE WANT TO MAKE ROLLABLE. LOOK THEM UP      *
*        IN THE MSG MANUAL TO SEE WHY. THE COMMENTED OUT ENTRIES      *
*        WILL GIVE YOU AN IDEA OF WHAT OTHER PEOPLE HAVE DONE FOR     *
*        MESSAGES TO MAKE THEM ROLLABLE. JUST THAT I DO NOT WANT      *
*        THOSE AT MY INSTALLATION.   JDM                              *
*---------------------------------------------------------------------*
         SPACE
ROLLTAB  DS    0CL7
         DC    C'FDRW90 '          FDR MSG
         DC    C'FDRW93*'          FDR MSG
         DC    C'IEA911E'          DUMP ON XXX FOR ASID NNN
         DC    C'IEA994E'
         DC    C'IEA994A'          DUMP DATA SETS ARE FULL
         DC    C'IGF995I'          I/O RESTART SCHEDULED FOR DEVICE CUU
*        DC    C'IGF991E'          MIC MESSAGES (MOUNT,SWAP,ETC)
         DC    C'       '          <= LAST ONE MUST BE BLANK
ROLLEND  EQU   *
         SPACE
         DROP
         TITLE 'IEECR2D2 - AUTOMATIC REPLY SUBTASK OF IEECVXIT'
*-------------------------------------------------------------------*
*                                                                   *
*              I  E  E  C  R  2  D  2     ( R 2 D 2 )               *
*                                                                   *
*      THIS SUBROUTINE IS RUN UNDER SRB MODE UNDER CMD1'S TCB.      *
*      IT WILL INVOKE A ROUTINE (IRBROUT) WHICH WILL PERFORM        *
*      AUTOMATIC REPLIES TO CERTAIN MSGS GIVEN TO THE OPERATOR      *
*      AND STARTED TASKS. YOU WILL SEE IN THE OPERATOR COMMANDS     *
*      I ISSUE, 'R2D2' APPEARS IN THE MSG BUT ONLY ON SYSLOG.       *
*      THAT IS TO KNOW IF YE OLE OPERATOR DECIDED TO DO IT OR       *
*      NOT; GENERALLY NOT.                                          *
*                                                                   *
*      THE STIMER IS NOTE WORTHY OF DISCUSSION. WHEN WE GO INTO     *
*      R2D2 WANTING A STARTED TASK, IT IS POSSIBLE FOR THE STARTED  *
*      TASK TO APPEAR ON THE CONSOLE LOGS AHEAD OF THE MSG THAT     *
*      CAUSED IT TO HAPPEN. THIS IS BECAUSE THE 'MCS' EXIT GETS     *
*      TO VIEW THE MSG BEFORE IT GETS ISSUED. SO TO KEEP OPS        *
*      MANAGERS FROM GETTING CONFUSED (HEAVEN FORBID), WE WAIT      *
*      FOR TWO SECONDS. IN THE CASE OF WTOR'S THE WAIT CAN BE       *
*      REPEATED UP TO 5 TIMES. THIS IS BECAUSE THE RQE (REPLY QUEUE *
*      ELEMENT) HAS NOT BEEN BUILT WHEN WE DETECT THE WTOR.  IF IT  *
*      IS NOT FOUND AT THE END OF THAT TIME WE CAN ASSUME THAT IT   *
*      WAS DOM'D OR THE OPERATOR WAS DAMN FAST.                     *
*                                                                   *
*      IF ANYONE HAS SUGGESTIONS OR FINDS BUGS, PLEASE CALL, THIS   *
*      CONCEPT HAS MANY, MANY POSSIBILITIES !!!!!!!!                *
*                                                                   *
*                                 JIM MARSHALL, CAPT, USAF          *
*                                 SAN ANTONIO DATA SERVICES CENTER  *
*                                 8630 BROADWAY                     *
*                                 SAN ANTONIO, TX  78217            *
*                                 (512) 828-0201/0334               *
*                                                                   *
*                                 SRB AND IRB MODIFICATIONS         *
*                                 DONE BY:                          *
*                                                                   *
*                                 JERRY SAUNDERS                    *
*                                 LIBRARY OF CONGRESS               *
*                                 WASHINGTON D.C. 20540             *
*                                 (202)  287-9026                   *
*                                                                   *
*                                                                   *
*      THE VALUE IN REGISTER 1 POINTS TO THE WORKAREA IN CSA        *
*      CREATED BY IEECVXIT.                                         *
*-------------------------------------------------------------------*
         EJECT
IEECR2D2 DS    0H
         BALR  R10,R0         ESTABLISH BASE REGISTER
         USING *,R10
         LR    R7,R14         SAVE SRB RETURN ADDRESS
         LR    R2,R1          GET PARAMETER ADDRESS
         USING WORKAREA,R2
         SPACE
*---------------------------------------------------------------------*
*        THIS ROUTINE IS ENTERED FROM IEECVXIT ASYNCHRONOUSLY.  IT IS *
*        CALLED WHEN IEECVXIT NEEDS TO REPLY TO A WTOR OR ISSUE SOME  *
*        COMMAND.  THE SRB WILL NEED TO ISSUE SVC 34. INORDER TO DO   *
*        THAT WE WILL NEED TO RUN UNDER AN IRB.                       *
*                                                                     *
*        TO CREATE THE ASYNCHRONOUS ROUTINE ON BEHALF OF THE CALLER   *
*        WE GET THE LOCAL LOCK AND CALL THE STAGE ONE EXIT EFFECTOR   *
*        TO BUILD US AN 'IRB' AND AN 'IQE'.  WE WILL THEN INITIALIZE  *
*        THESE CONTROL BLOCKS AND CALL THE STAGE TWO EXIT EFFECTOR    *
*        WHO WILL SCHEDULE THE ROUTINE FOR DISPATCH.                  *
*---------------------------------------------------------------------*
         SPACE
*---------------------------------------------------------------------*
*        GET THE LOCAL LOCK                                           *
*---------------------------------------------------------------------*
         SPACE
$GETLOCK SETLOCK OBTAIN,TYPE=LOCAL,REGS=USE,MODE=UNCOND,               C
               RELATED=$FREELOCK
         SPACE
*---------------------------------------------------------------------*
*        BUILD THE 'IRB' AND 'IQE'                                    *
*---------------------------------------------------------------------*
         SPACE
         L     R4,SRBPTCB       GET TCB ADDRESS FOR CIRB
         CIRB  EP=IRBROUT,KEY=SUPR,MODE=PP,BRANCH=YES,SVAREA=YES,      C
               STAB=(DYN),RETIQE=NO,WKAREA=30
         LR    R3,R1            ADDRESS OF IRB IN R3
         USING RBBASIC,R3
         L     R1,RBNEXAV       ADDRESS OF IQE IN R1
         USING IQESECT,R1
         ST    R3,IQEIRB        ADDRESS OF IRB IN IQEIRB
         ST    R2,IQEPARM       PARM LIST FOR USER
         ST    R4,IQETCB        ADDRESS OF TCB IN IQETCB
         LCR   R1,R1            COMPLEMENT REGISTER R1
         L     R12,CVTLOC       CVTADDRESS
         USING CVT,R12
         SPACE
*---------------------------------------------------------------------*
*        CALL THE STAGE TWO EXIT EFFECTOR
*---------------------------------------------------------------------*
         SPACE
         L     R14,CVT0EF00     ADDR OF STAGE TWO EXIT EFFECTOR
         BALR  R14,R14          GO SCHEDULE THE IQE
         DROP  R12
         SPACE
*--------------------------------------------------------------------*
*        FREE THE LOCKS AND RETURN TO POST                           *
*--------------------------------------------------------------------*
         SPACE
STAGE3   EQU   *
$FRELOCK SETLOCK RELEASE,TYPE=LOCAL,REGS=USE,RELATED=$GETLOCK
         LR    R14,R7           RESTORE REG 14.
         BR    R14              RETURN TO DISPACHER
         DROP
         EJECT
IRBROUT  SAVE  (14,12)       SAVE CALLERS REGISTERS
         LR    R12,R15       SETUP BASE REGISTER
         USING IRBROUT,R12   GET NEW BASE REGISTER
         LR    R10,R1        SAVE ENTRY CODE
         USING WORKAREA,R10  GET ADDRESSABILITY
         ST    R13,SAVE1+4   SETUP
         ST    R10,8(R13)         SAVEAREA
         LR    R13,R10                 CHAIN
         STIMER WAIT,BINTVL=TWOSEC  GIVE A LITTLE DELAY
         SR    R11,R11       ZERO WORK REGISTER
         IC    R11,$CODE     GO GET THE ENTRY CODE
         B     BRTAB(R11)    BRANCH TO BRANCH TABLE
BRTAB    EQU   *
         B     AUTOREP               REPLY TO OPERATOR COMMANDS
         B     CMD4                  DO START FOR R1=4
         B     CMD8                  DO START FOR R1=8
         B     CMD12                 DO START FOR R1=12
         B     $EXIT                 FUTURE USE
         EJECT
*--------------------------------------------------------------------*
*        SOME AUTOMATIC REPLY IS NEEDED TO BE SERVICED. SO WE ARE    *
*        GOING TO RUN THE WQE CHAIN LOOKING FOR THE BEAST, DETER-    *
*        MINE WHAT WE ARE REPLYING TO, COPY THE REPLY TO AN AREA     *
*        OF GETMAINED CORE, MOVE IN THE REPLY NUMBER, AND ISSUE      *
*        SVC 34 TO DO IT.                                            *
*--------------------------------------------------------------------*
         SPACE
AUTOREP  EQU   *
         LA    R7,5          ALLOW 5 COMPLETE SEARCHES THRU THE RQE'S
FNDRQE   EQU   *
         LA    R2,20         SEARCH COUNTER - TWENTY RQE'S MAX
         L     R1,CVTLOC     PLACE THE CVT ADDRESS IN REG. 1
         L     R1,100(R1)    ADDRESS OF UCM
         L     R1,28(R1)     FIRST RQE ADDRESS
GETRQE   EQU   *
         LA    R1,0(R1)      ZERO HIGH ORDER BYTE
         CLC   $ASID,24(R1)  DOES THE ASID IN THE RQE MATCH $ASID ?
         BNE   NEXTRQE       NO GET NEXT RQE
         L     R6,20(R1)     USERS ECB ADDRESS FROM RQE
         LA    R6,0(R6)      CLEAR NOISE
         C     R6,$ECB       COMPARE THE ECB IN THE RQE WITH $ECB
         BE    FOUND         GREAT IT'S OURS !!
NEXTRQE  EQU   *
         L     R1,0(R1)      GET ADDRESS OF NEXT RQE
         LTR   R1,R1         WAS IT THE LAST RQE ?
         BZ    ENDLOOK       YES, LAST RQE - TEST WAIT COUNTER
         BCT   R2,GETRQE     EXAMINE RQE FIELDS
         SPACE
*------------------------------------------------------------------*
*        NOW WE WAIT FOR MCS TO CATCH UP ALSO IF YOU FIND WHAT     *
*        YOU WANT THE SYSLOG WILL ALSO CATCH UP AND SHOW THE REPLY *
*        AFTER THE MSG. OUR TOKENISM TO OPS PEOPLE.                *
*------------------------------------------------------------------*
         SPACE
ENDLOOK  EQU   *
         STIMER WAIT,BINTVL=TWOSEC  WAIT FOR MCS TO CATCH UP
         BCT   R7,FNDRQE     WAIT A FEW SECONDS AND TRY AGAIN
         B     $EXIT         NEVER FOUND THE RQE - LEAVE
         SPACE
FOUND    EQU   *
         LR    R7,R1         SAVE RQE ADDRESS
         SR    R11,R11       ZERO INDEX REGISTER
         IC    R11,$REASON   GET REASON CODE FROM WORKAREA
         B     REPLY(R11)    BRANCH INTO AUTO REPLY LOGIC
REPLY    B     RWAIT            REPLY WAIT
         B     RNOHOLD          REPLY NOHOLD
         B     RU               REPLY U
         B     RGO              REPLY GO
         B     RPOST            REPLY POST
RNOHOLD  EQU   *
         MVC   WTOAREA(REPLY1L),REPLY1  MOVE IN REPLY WTO
         B     ISSUE         SEND THE REPLY
RU       EQU   *
         MVC   WTOAREA(REPLY2L),REPLY2  MOVE IN REPLY WTO
         B     ISSUE         SEND THE REPLY
RGO      EQU   *
         MVC   WTOAREA(REPLY3L),REPLY3  MOVE IN REPLY WTO
         B     ISSUE         SEND THE REPLY
RPOST    EQU   *
         MVC   WTOAREA(REPLY4L),REPLY4  MOVE IN REPLY WTO
         B     ISSUE         SEND THE REPLY
RWAIT    EQU   *
         MVC   WTOAREA(REPLY5L),REPLY5  MOVE IN REPLY WTO
         B     ISSUE         SEND THE REPLY
         SPACE
ISSUE    EQU   *
         MVC   WTOAREA+6(2),4(R7)       MOVE IN REPLY NUMBER FROM RQE
         LA    R1,WTOAREA               ADDRESS OF WTO CONTROL BLOCK
         SR    R0,R0                    WE WILL ISSUE REPLY TO WTOR NOW
         SVC   34                       SEND THE INTERNAL COMMAND
         B     $EXIT                    ADD DONE CLEAN UP AND LEAVE
         SPACE
CMD4     EQU   *
         SVC34 'S SSTARTUP   BY  R2D2'
*
         B     $EXIT
         SPACE
CMD8     EQU  *
         SVC34 'S WTRH   BY R2D2 '
         B     $EXIT
         SPACE
CMD12    EQU  *
         SVC34 'S WTRH   BY R2D2 '
         B     $EXIT
         SPACE
*---------------------------------------------------------------------*
*        NOW WE CLEANUP AFTER OURSELVES AND RETURN WITH THE OPERATORS *
*        NOT HAVING TO GET INVOLVED.  HUURRRRAYYYYYYY   JDM           *
*---------------------------------------------------------------------*
         SPACE
$EXIT    EQU   *
         LR    R1,R13            GET ADDRESS OF WORKAREA
         L     R13,SAVE1+4       ADDRESS OF PREVIOUS SAVE AREA
         FREEMAIN R,A=(1),LV=WORKAL,SP=245   FREE UP GOTTEN CORE
         LM    R14,R12,12(R13)   RESTORE THE REGISTERS
         LA    R15,0(0,0)        SET RC=0
         BR    R14               RETURN TO THE DISPACHER
         EJECT
*-------------------------------------------------------------------*
*        CONSTANTS                                                  *
*-------------------------------------------------------------------*
         SPACE
TWOSEC   DC    A(2*100)              2  SECOND DELAY
         SPACE
*------------------------------------------------------------------*
REPLY1   WTO   'R XX,''NOHOLD''  BY R2D2 ',ROUTCDE=(1),DESC=(5),MF=L
REPLY1L  EQU   *-REPLY1
*------------------------------------------------------------------*
REPLY2   WTO   'R XX,''U''  BY R2D2 ',ROUTCDE=(1),DESC=(5),MF=L
REPLY2L  EQU   *-REPLY2
*------------------------------------------------------------------*
REPLY3   WTO   'R XX,''GO''  BY R2D2 ',ROUTCDE=(1),DESC=(5),MF=L
REPLY3L  EQU   *-REPLY3
*------------------------------------------------------------------*
REPLY4   WTO   'R XX,''POST''  BY R2D2 ',ROUTCDE=(1),DESC=(5),MF=L
REPLY4L  EQU   *-REPLY4
*------------------------------------------------------------------*
REPLY5   WTO   'R XX,''WAIT''  BY R2D2 ',ROUTCDE=(1),DESC=(5),MF=L
REPLY5L  EQU   *-REPLY5
*------------------------------------------------------------------*
         SPACE
         LTORG
         TITLE 'DSECTS USED BY IEECVXIT'
WORKAREA DSECT
SAVE1    DS   18F                     SAVE AREA
$ECB     DS   A                       WTOR ECB ADDRESS
$ASID    DS   H                       ISSUERS ASID
$REASON  DS   X             A FLAG TO INDICATE WHICH REPLY TO USE
*                  0 = WAIT
*                  4 = NOHOLD
*                  8 = U
*                 12 = GO
*                 16 = POST
$CODE    DS   X
*                  0 = IS SOME AUTO CMD
*                  4 = S TSO AND CDCNETSL
*                  8 = S WTRX
*                 12 = S WTRH
SCRATCH  DS    0F'0',CL130
         ORG   SCRATCH
SRB      DS    0A
SRBID    DS    CL4                      EBCDIC ACRONYM   FOR SRB
SRBFLNK  DS    A                        FORWARD CHAIN FIELD
SRBASCB  DS    A                        PTR TO ASCB OF ADDRESS SPACE
*                                       SRB IS TO BE DISPATCHED TO
SRBFLC   DS    0CL8                     SRB AREA MOVED TO LOW CORE
SRBCPAFF DS    BL2                      CPU AFFINITY MASK
SRBPASID DS    H                        PURGEDQ ASID IDENTIFIER
SRBPTCB  DS    A                        PURGEDQ TCB IDENTIFIER
SRBEP    DS    A                        ENTRY POINT OF ROUTINE
SRBRMTR  DS    A                        ADDRESS OF RESOURCE MGR RTN
SRBPARM  DS    A                        USER PARAMETER
SRBSAVE  DS    A                        SAVE AREA POINTER
SRBPKF   DS    B                        PROTECT KEY INDICATION
SRBPRIOR DS    0B                       PRIORITY LEVEL INDIC
SRBFLGS  DS    B                        SRB OPTION FLAGS
SRBLLREQ EQU   X'80'                    LOCAL LOCK REQUIRED
SRBLLHLD EQU   X'40'                    LOCAL LOCK HELD
SRBFRREQ EQU   X'20'                    FRR REQUESTED
SRBFRRCL EQU   X'10'                    CLEAR FRR PARM AREA
SRBSUSP  EQU   X'08'                    SUSPENDED SRB ONLY ON FOR
*                                       SSRB
SRBPNONQ EQU   X'04'                    NON QUIESCABLE SRB
SRBRESV3 EQU   X'02'                    RESERVED FLAG
SRBRESV4 EQU   X'01'                    RESERVED FLAG
SRBPSYS  EQU   X'00'                    SYSTEM PRIORITY LEVEL
SRBHLHI  DS    BL1                      INDICATION OF SUSPEND LOCKS
*                                       HELD AT SRB SUSPENSION
         DS    BL1                      RESERVED
SRBFRRA  DS    A                        FRR ROUTINE ADDRESS
SRBEND   EQU   *                        END OF SRB
SRBSIZE  EQU   SRBEND-SRB               SIZE OF SRB
WTOAREA  EQU   SRB                      WORK AREA FOR WTO -MUST BE LAST
         ORG
WORKEND  EQU  *
WORKAL   EQU  WORKEND-WORKAREA
         SPACE 4
IEECUCM  DSECT
UCMMSTXT DS    CL128
UCMROUTC DS    CL4
UCMDESCD DS    CL4
         PRINT OFF
CVT      DSECT
         CVT
ASCB     DSECT
         IHAASCB
ASVT     DSECT
         IHAASVT
IHAPSA   DSECT
         IHAPSA
IHARB    DSECT
         IHARB  SYS=AOS2
         PRINT  ON
IQESECT  DSECT
IQELNK   DS    A     . WORD REFERENCE FOR IQELNKA
         ORG   IQELNK
IQESTAT1 DS    XL1   . RESERVED
IQELNKA  DS    AL3   . ADDRESS OF NEXT IQE
IQEPARM  DS    A     . PARMS TO BE PASSED TO ASYN RTN
IQEIRB   DS    A     . WORD REFERENCE FOR IQEIRBA
         ORG   IQEIRB
IQEFLAGS DS    XL1   . FLAG FIELD
IQEPURGE EQU   X'80' . THIS IQE MUST NOT BE SCHEDULED
IQEIRBA  DS    AL3   . ADDR IRB TO BE SCHEDULED
IQETCB   DS    A     . WORD REFERENCE FOR IQETCBA
         ORG   IQETCB
IQESTAT2 DS    C     . RESERVED
IQETCBA  DS    AL3   . ADDR OF TCB ASSOCIATED WITH THIS IQE
IQEDCB   DS    A     . ADDR OF DCB
IQEOUTLM DS    A     . ADDR OF OUTPUT LIMIT
IQEEND   DS    C     . END OF IQE
         TITLE 'EQUATES USED BY IEECVXIT'
R0       EQU   0
R1       EQU   1                       ADDRESS OF SUPPLIED PARAMETERS
R2       EQU   2                       ADDRESS OF EXIT PARAMETERS
R3       EQU   3                       ADDRESS OF CVT
R4       EQU   4                       ADDRESS OF UCB LOOKUP TABLE
R5       EQU   5                       ADDRESS OF UCB
R6       EQU   6
R7       EQU   7                       ADDRESS IN OPTIONAL MSG TABLE
R8       EQU   8                       INCREMENT FOR MSG TABLE
R9       EQU   9                       END ADDRESS OF MSG TABLE
R10      EQU   10
R11      EQU   11
R12      EQU   12                      BASE REGISTER
R13      EQU   13                      SAVE AREA POINTER
R14      EQU   14                      RETURN ADDRESS
R15      EQU   15                      ENTRY ADDRESS
CVTLOC   EQU   16                      LOCATION OF CVT
         END
