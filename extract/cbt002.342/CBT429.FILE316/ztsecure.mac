         TITLE '****   TAPE SECURITY PROGRAM   (TLS)  ****'
****----------------------------------------------------------------***
****     NAME      -SUPERTAP : ALIAS OF ZTSECURE                    ***
****                                                                ***
****     ENTRIES   -SUPERTAP                                        ***
****                                                                ***
****     FUNCTION  -TO ANALYZE TAPE FILES                           ***
****                                                                ***
****               .READS HEADERS AND TRAILERS AND SNAPS OUT THE    ***
****               LABELS BOTH IN A DUMP FORMAT AND IN A LABELED    ***
****               FORMAT.                                          ***
****                                                                ***
****               .KEEPS A COUNT OF THE TOTAL NUMBER OF RECORDS IN ***
****               A DATA FILE, I.E. BETWEEN TAPE MARKS             ***
****                                                                ***
****               .SNAPS OUT THE FIRST (3) BLOCKS OF EACH DATA SET ***
****                ALSO SNAPS THE LAST BLOCK OF EACH DATA SET      ***
****                                                                ***
****     JIM MARSHALL - PERFORMING SOME CLEAN-UP ON THE CODE.    JDM1**
****         15JUL90    ALWAYS SAID WHEN I HAD TIME AND HERE IT  JDM1**
****                    IS 13 YRS LATER. WILL TRY TO DOCUMENT IT JDM1**
****                    AS I REMEMBER AND BEFORE I GET TOO OLD   JDM1**
****                    AND NOT.                                 JDM1**
****                                                             JDM1**
****     ZTSECURE AS THE PROGRAM IS ALSO KNOWN AS CAME TO ME IN  JDM1**
****     THE 1970S FROM THE USAF, STRATEGIC AIR COMMNAND. THE    JDM1**
****     PGM USED BY ME FOR YEARS WAS TO ERASE FILES AFTER YOUR  JDM1**
****     DATA WHEN YOU EXPORT A TAPE.  FOR EXAMPLE WHEN YOU PUT  JDM1**
****     DATA TO A 'FOREIGN TAPE' THE FILE(S) DO NOT FILL UP THE JDM1**
****     WHOLE REEL. WHAT IS OUT PASSED THE DOUBLE END-OF-TAPE   JDM1**
****     MARK ??? YOU WOULD BE SURPRISED.                        JDM1**
****                                                             JDM1**
****     THUS ZTSECURE READS EACH PHYSICAL FILE AND DUMPS THE    JDM1**
****     FIRST 3 BLOCKS AND LAST BLOCK OF EACH FILE FOR YOU TO   JDM1**
****     INSPECT.  WHEN IT HITS THE 2 CONSECTUTIVE TAPE MARKS,   JDM1**
****     THE PROGRAM WILL ASK YOU IF IT HAS HIT THE EOT LIGHT IS JDM1**
****     TURNED ON (LOOK AT THE TAPE DRIVE). THE SYSTEM GIVES    JDM1**
****     YOU THE SAME INDICATION FOR BOTH CASES.                 JDM1**
****                                                             JDM1**
****     SO IN CASE 1 IF THE LIGHT IS NOT ON, THEN YOU REPLY 'N' JDM1**
****     AND THE TAPEMARKS ARE SKIPPED AND BINARY ZEROS ARE      JDM1**
****     WRITTEN OUT TO THE END OF THE REEL (I.E. SECURING YOUR  JDM1**
****     TAPE).  IN CASE 2 THEN IT IS APPARENT THIS IS AN OTHER  JDM1**
****     LAST REEL OF A MULTIVOLUME FILE. SO THE PROGRAM WILL    JDM1**
****     REWIND THE PRESENT TAPE AND ASK FOR THE NEXT REEL.      JDM1**
****                                                             JDM1**
****     THUS IN THE CASE OF MULTI-REEL FILES, YOU ONLY HAVE TO  JDM1**
****     'ZTSECURE' THE LAST REEL.                               JDM1**
****                                                             JDM1**
****     SURPRISING THE CODE STILL WORKS ON MVS/XA AND SEEMS TO  JDM1**
****     ME I CHECKED IT OUT ON 3480S. IT IS A TRIBUTE TO IBM    JDM1**
****     FOR WRITING TRANSPARENT OPERATING SYSTEMS.              JDM1**
****                                                             JDM1**
****     JCL SAMPLE: (WE USE TMS)                                JDM1**
****                                                             JDM1**
****     //SECURE   EXEC PGM=ZTSECURE                            JDM1**
****     //SNAPO    DD SYSOUT=A                                  JDM1**
****     //TAPE     DD DSN=MYDATA,DISP=OLD,UNIT=TAPE,            JDM1**
****     //            VOL=SER=TAPE01,                           JDM1**
****     //            LABEL=(1,BLP,EXPDT=98000)                 JDM1**
****----------------------------------------------------------------***
         TITLE '****   TAPE SECURITY PROGRAM   (TLS)   ****'
         PRINT NOGEN
         MACRO
&N       FORM  &A,&B,&C,&D
         LCLC  &XX
         PUSH  PRINT
         PRINT GEN
&XX      SETC  'L'''
         MVC    MSGBLKA(&XX&A),&A
         MVC    MSGBLKB(&XX&B),&B
         AIF   ('&C' EQ '').OUT
         MVC    MSGBLKC(&XX&C),&C
         MVC    MSGBLKD(&XX&D),&D
.OUT     ANOP
         BAL   R7,DEBE900
         POP   PRINT
         MEND
         TITLE '********   DCB  DSECT  *********'
         DCBD  DSORG=PS,DEVD=TA        THE DCB DSECT               SARM
         SPACE                                                     SARM
R0       EQU   0                       WORK                        SARM
R1       EQU   1                       PARMPTR                     SARM
R2       EQU   2                       WORK                        SARM
R3       EQU   3                       WORK                        SARM
R4       EQU   4                       WORK                        SARM
R5       EQU   5                       WORK                        SARM
R6       EQU   6                       LABEL PTR                   SARM
R7       EQU   7                       INTERNAL BRANCH REGISTER    SARM
R8       EQU   8                       BLOCK  COUNTER              SARM
R9       EQU   9                       LOOP CONTROL                SARM
R10      EQU   10                                                  SARM
R11      EQU   11                                                  SARM
R12      EQU   12                      BASE                        SARM
R13      EQU   13                      SAVE AREA PTR               SARM
R14      EQU   14                      RETURN ADDR                 SARM
R15      EQU   15                      LINK ADDR                   SARM
         SPACE
****----------------------------------------------------------------***
*              *   S Y S T E M   L A B E L           *
*              *   F I R S T   F O R M A T           *
****----------------------------------------------------------------***
         SPACE
LABEL    DSECT
         ORG   (LABEL)
LABEL1   DS    0F
HDRID    DC    0CL3'HDR'
EOVID    DC    0CL3'EOV'
EOFID    DC    0CL3'EOF'
LABELID1 DS    CL4 -                   LABEL IDENTIFIER
         ORG   (*-1) -
LABELNO1 DC    CL1'1' -                LABEL NUMBER
DSID1    DS    CL17 -                  DATA SET IDENTIFIER
DSSERNO1 DS    HL6 -                   DATA SET SERIAL NUMBER
VOLSNO1  DS    HL4 -                   VOLUME SEQUENCE NUMBER
DSSEQNO1 DS    HL4 -                   DATA SET SEQUENCE NUMBER
GENNO1   DS    HL4 -                   GENERATION NUMBER
VERNO1   DS    HL2 -                   VERSION NUMBER
CREATDT1 DS    XL6 -                   CREATION DATE
EXPIRDT1 DS    XL6 -                   EXPIRATION DATE
DSSEC1   DS    X -                     DATA SET SECURITY
BLOCKCT1 DS    XL6 -                   BLOCK COUNT
SYSCODE1 DS    XL13 -                  SYSTEM CODE
RESV1    DS    XL7 -                   RESERVED AREA
         SPACE
****----------------------------------------------------------------***
*              *   S Y S T E M   L A B E L           *
*              *   S E C O N D   F O R M A T         *
****----------------------------------------------------------------***
         SPACE
         ORG   (LABEL)
LABEL2   DS    0F
LABELID2 DS    CL4 -                   LABEL IDENTIFIER
         ORG   (*-1) -
LABELNO2 DC    CL1'1' -                LABEL NUMBER
RECFM2   DS    CL1 -                   RECORD FORMAT
BLKLEN2  DS    HL5 -                   BLOCK LENGTH
RECLEN2  DS    HL5 -                   RECORD LENGTH
TAPEDEN2 DS    HL1 -                   TAPE DENSITY
DSPOS2   DS    HL1 -                   DATA SET POSITION
JJSID2   DS    CL17 -                  JOB/JOBSTEP IDENTIFICATION
TAPEREC2 DS    CL2 -                   TAPE RECORDING TECHNIQUES
PRCC2    DS    CL1 -                   PRINT CONTROL CHARACTERS
RESV2    DS    X -                     RESERVED AREA
BLKATT2  DS    CL1 -                   BLOCK ATTRIBUTE
RESVED2  DS    CL41 -                  RESERVED AREA
         SPACE
****----------------------------------------------------------------***
*              *   U S E R   L A B E L               *
****----------------------------------------------------------------***
         SPACE
         ORG   (LABEL)
USERLAB  DS    0F
UHLX     DC    0CL3'UHL' -             USER HDR LABEL IDENTIFIER
UTLX     DC    0CL3'UTL' -             USER TRAILER LABEL IDENTIFIER
ULABID   DS    CL3 -                   LABEL IDENTIFIER
ULABNO   DS    HL1 -                   USER LABEL NUMBER
USPECDAT DS    CL76 -                  USER SPECIFIED DATA
         SPACE
****----------------------------------------------------------------***
*              *   S Y S T E M   L A B E L           *
*              *  VOLUME ONE LABEL                   *
****----------------------------------------------------------------***
         SPACE
         ORG   (LABEL)
LABELV   DS    0F
LABELIDV DC    CL4'VOL1' -             LABEL IDENTIFIER
VOLSERVN DS    CL6
RESVDV1  DS    C
VTOCPTRV DS    CL10                    VTOC POINTER(ONLY FOR DA)
RESVDV2  DS    CL10
RESVDV3  DS    CL10
OWNERNAV DS    CL10 -                  OWNER NAME AND ADDRESS
RESVDV4  DS    CL29
         TITLE '     *****DIAGNOSTIC MESSAGE DSECT*****'
*              ..............................................
*              . DSECT OF DIAGNOSTIC MESSAGE GIVEN BY SYNADAF.
*              ..............................................
         SPACE
DIAGMESS DSECT
         DS    0D -                    DOUBLE WORD BOUNDARY
         DC    H'128' -                LENGTH OF MESSAGE
         DC    H'0' -
         DC    H'124' -
         DC    H'0' -
INBUFFAD DS    F -                     INPUT BUFFER ADDRESS
NOBYTERD DS    H -                     NUMBER OF BYTES READ
         DC    CL36' ' -               RESERVED AREA OF BLANKS
JOBNAMD  DS    CL8 -                   JOB NAME
         DC    C',' -                  SEPARATING COMMA
STEPNAMD DS    CL8 -                   STEP NAME
         DC    C',' -                  SEPARATING COMMA
UNITADDR DS    CL3 -                   UNIT ADDRESS GIVING ERROR
         DC    C',' -                  SEPARATING COMMA
DEVTYPE  DS    CL2 -                   DEVICE TYPE - TAPE
         DC    C',' -                  SEPARATING COMMA
DDNAMD   DS    CL8 -                   DD NAME ON JCL
         DC    C',' -                  SEPARATING COMMA
OPERATTM DS    CL6 -                   OPERATION ATTEMPTED
         DC    C',' -                  SEPARATING COMMA
ERRDESC  DS    CL15 -                  DESCRIPTION OF THE ERROR
         DC    C',' -                  SEPARATING COMMA
RELBLKNO DS    CL7 -                   RELATIVE BLOCK NUMBER
         DC    C',' -                  SEPARATING COMMA
ACCMETH  DS    CL5 -                   ACCESS METHOD USED
         DC    CL8' ' -
         TITLE '************STANDARD LINKAGE IN************'
*******************************************************************SARM
***************           STANDARD LINKAGE IN              ********SARM
*******************************************************************SARM
         SPACE
ZTSECURE AMODE 24
ZTSECURE RMODE 24
ZTSECURE CSECT
         SAVE  (14,12),,ZTSECURE_&SYSDATE &SYSTIME                 BEH
         LR    R12,R15                 SET ADDRESSABILITY          SARM
         LA    R11,4095                DECLARE SECOND BASE         BEH
         LA    R11,1(R11,R12)                                      BEH
         USING ZTSECURE,R12,R11                                    BEH
         CNOP  0,4
         BAL   R15,SAVEAREA+72
SAVEAREA DC    18F'-1'
         ST    R13,4(R15)
         ST    R15,8(R13)
         LR    R13,R15
         LA    R8,3                    DEFAULT VALUES
         STH   R8,SNAPNUM              DEFAULT VALUE
         USING LABEL,R6                USE R6 AS LABEL PTR
         OPEN  (SNAPDCB,(OUTPUT)) SEPARATE THE OPENS               AM01
         SPACE
****----------------------------------------------------------------***
****           OPEN THE DCB'S FOR READING THE TAPE AND PUTTING      ***
****           OUT THE MESSAGES AND SNAP DUMPS                      ***
****----------------------------------------------------------------***
*        ******THIS APAR WAS DISCOVERED ON AUGUST 14,1970.   ******AM01
*        ******THE PROGRAMMER WAS TRYING TO DEBE A TAPE RECORD*****AM01
*        ******WHICH WAS CREATED IN A PREVIOUS STEP.  HE     ******AM01
*        ******REFERRED BACK TO IT AND APPARENTLY THE OTHER  ******AM01
*        ******JCCB WAS USED WHICH SPECIFIED LABEL PROCESSING******AM01
*        ******AND STD. LABELS.  THE DEBE BLEW IN THE OPEN J ******AM01
*******************************************************************AM01
         SPACE
         RDJFCB ,MF=(E,LISTJFCB)  READ THE DATA SET DESCRIPTION
*                                      CORRECTIONS CAN BE MADE     AM01
         L     R10,DSNO
         STH   R10,JFCBFLSQ       SET OPEN FOR 1ST D.S. (LABELS)   AM01
         NI    JFCBMASK+5,255-VOLLABPR TURN OFF VOL. LABEL PROCESS AM01
         OI    JFCBMASK+4,X'80'   INDICATE THAT OPEN IS TO READ THEAM01
*                                 JFCB OUT TO THE QUEUE            AM01
         CLI   JFCBLTYP,X'02'  TAPE CONTAIN SL'S ??
         BE    *+8             YES
         MVI   LSW,X'FF'       SET NO-LABEL SWITCH
         NI    JFCBLTYP,255-SL-NL-UL-NSL TURN OFF OTHER LABEL SW   AM01
         OI    JFCBLTYP,BLP       INDICATE BYPASS LABEL PROCESSING AM01
         OPEN  ,TYPE=J,MF=(E,LISTJFCB) OPEN DATA SET ON TAPE       AM01
         SPACE 1                                                   AM01
         EXTRACT TIOT,'S',FIELDS=(TIOT)
         L     R10,TIOT
         MVC   WTO1+10(8),0(R10)
         MVC   ZEND+10(8),0(R10)
         LA    R10,24(R10)
LOOPER   CLC   4(8,R10),DDTAPE
         BE    GOTDD
         CLC   0(4,R10),RECB
         BE    ENDALL1
         LA    R10,20(R10)
         B     LOOPER
         SPACE
TIOT     DC    F'0'
RECB     DC    F'0'
DDTAPE   DC    C'TAPE    '
LSW      DC    X'00'
REPLY    DC    X'00'
         SPACE
GOTDD    DS    0H
         L     R10,16(R10)
         MVC   WTO1+44(6),28(R10)
         MVC   WTO1+57(3),13(R10)
         MVC   SAYAGAIN+29(3),13(R10)
WTO1     WTO   '* JJJJJJJJ USING "ZTSECURE" ON TAPE=TTTTTT, UNIT=UUU *'*
               ,ROUTCDE=(1,11)
         TITLE '     *****MAIN GET-RECORD LOOPS*****     '
****----------------------------------------------------------------***
***      THIS INSTRUCTION BEGINS THE OUTER LOOP TO PRINT OUT THE FIRST*
***      (3) BLOCKS AND THE LAST BLOCK OF EACH DATA SET ON THE TAPE ***
****----------------------------------------------------------------***
         SPACE
DEBE010  DS    0H
         LH    R9,SNAPNUM              LOAD NUMBER OF BLOCKS TO SNAP
         SR    R8,R8                   ZERO BLOCK COUNTER
         ST    R8,BLKSAVE              SAVE THE BLOCK COUNT
         SPACE
****----------------------------------------------------------------***
***            G E T  A  T A P E   R E C O R D                      ***
****----------------------------------------------------------------***
         SPACE
DEBE020  DS    0H
         BAL   R8,SREAD                GET A RECORD
         MVI   EODX,X'00'
         NI    SW,255-EODENTRY         TURN OFF TAPE MARK INDICATOR
         TM    SW,SYNSW
         BNO   DEBE030
         NI    SW,255-SYNSW            TURN OFF 'SYNAD ENTERED ' SWITCH
         LA    R9,2(R9)                UP R9 COUNTER BY NINE
         B     DEBE030
         SPACE
DEBE030  DS    0H
         CLC   EOV,0(R1)               IS IT AN END OF VOLUME LABEL??
         BNE   DEBE080                 NO, GO AROUND TURN ON
         OI    SW,EOVLABEL             EOVLABEL ENCOUNTERED
DEBE080  DS    0H
         BAL   R3,DEBE500              GO TO BLOCK FORMATTING
         BCT   R9,DEBE020              GO BACK TO SNAP OUT MORE BLOCKS
         MVI   MYSW,X'FF'              SET NO SNAP SWITCH
         SPACE
***-----------------------------------------------------------------***
***      THIS IS A GET LOOP TO READ THROUGH THE DATA                ***
***-----------------------------------------------------------------***
         SPACE
DEBE300  DS    0H
         BAL   R8,SREAD                GET A RECORD
         TM    SW,SYNSW
         BNO   DEBE310                 SKIP
         NI    SW,255-SYNSW            TURN OFF 'SYNAD ENTERED ' SWITCH
         LA    R9,2                    LOAD  SNAP OUT BLK CTR WITH TWO
         MVI   MYSW,X'00'
         B     DEBE030
         SPACE
DEBE310  DS    0H
         TM    TAPESTAT,BLKLENX        LENGTH CHECK TO BE DONE???
         BO    LENCK                   GO CHECK LENGTH
DUM01    BAL   R3,DEBE500
         B     DEBE300                 CONTINUE PROCESSING
         SPACE
LENCK    L     R5,DCBIOBA-IHADCB+DEBEDCB
         SR    R4,R4                   ZERO
         IC    R4,DCBOFFSR-IHADCB+DEBEDCB
         AR    R4,R5                   GET ADDR OF IOB CSW
         LH    R4,6(R4)
         LH    R5,IOBCSW+6(R5)         LOAD RESIDUAL COUNT
         SR    R4,R5                   SUBTRACT TO GET COUNT READ
         CH    R4,BLKLENSS+2           ARE THEY EQUAL?(TEST FOR PROPER
         BE    DUM01                   YES
         LH    R7,BADLENNO             LOAD NUMBER OF BAD LENGTH BLOCKS
         LA    R7,1(R7)                UP ONE FOR THIS ONE
         STH   R7,BADLENNO             STORE NUMBER OF BAD BLOCKS
         CH    R7,TEN                  AT LIMIT????
         BH    DEBE320                 YES, DON'T SNAP
         MVI     MYSW,X'00'            TURN ON SNAPPER
         BAL   R3,DEBE500
         MVI     MYSW,X'FF'            TURN OFF SNAPPER
DEBE320  DS    0H
         L     R8,BLKSAVE
         XC    WA,WA                   CLEAR CONVERT AREA
         CVD   R8,WA                   CONVERT THE BLOCK NUMBER
         UNPK  BLNUM(8),WA+3(5)        MOVE IT INTO THE AREA
         OI    BLNUM+7,X'F0'           FOX-UP THE LAST DIGIT
         MVC   CONST(20),BADBLKLN      MOVE IN BAD BLOCK MESSAGE
         BAL   R8,SWRITE               GO DO WRITE
         B     DEBE300                 GO BACK
         SPACE
         TITLE '*****     SYNAD RTN     *****'
***-----------------------------------------------------------------***
***      S Y N A D   R O U T I N E                                  ***
***            . TURN ON SWITCH TO SAY SYNAD ENTERED                ***
***            . ISSUE SYNADAF TO DIAGNOSE MESS                     ***
***            . SAVE REGISTERS                                     ***
***            . FORMAT AND PRINT BAD BLOCK                         ***
***            . PUT OUT SYNAD MESSAGE AND DIAGNOSTIC               ***
***            . RESTORE REGISTERS AND RETURN                       ***
***-----------------------------------------------------------------***
         SPACE
SYNADXX  DS    0H
         OI    SW,SYNSW
         SYNADAF ACSMETH=BSAM          ANALYZE THE ERROR
         STM   R0,R15,SYNSAVE          SAVE THESE REGISTERS
         LA    R5,1(R5)                UP TO INCLUDE THIS SYNAD ENTRY
         STH   R5,SYNCTR               STORE FOR NEXT TIME
         LR    R2,R1                   LOAD ADDR OF DIAGNOSTIC STRING
         USING DIAGMESS,R2             SET ADDRESSABILITY
         LH    R3,NOBYTERD             LOAD NUMBER OF BYTES READ
         LTR   R3,R3                   HAVE ANY BYTES BEEN READ?????
         BZ    SYNZERO                 NO, SKIP AROUND SNAP DUMP
         MVI   SNAPLIST,100            MOVE IN BAD RECORD ID
         L     R1,INBUFFAD             LOAD PTR TO IN BUFFER
         LA    R1,0(R1)                ZERO HIGH ORDER BYTE
         ST    R1,STORAGE              STORE SNAP START ADDR
         AR    R1,R3                   ADD TO GET END OF BLOCK
         ST    R1,STORAGE+4            STORE SNAP END ADDR
         MVI   STORAGE+4,X'80'         SET END OF LIST BIT
         SNAP       ,MF=(E,SNAPLIST)          SNAP OUT THE BLOCK   SARM
         MVI   SNAPLIST,10             MOVE IN NORMAL ID
SYNZERO  DS    0H
         MVC   CONST(L'SYNMESS),SYNMESS     MOVE IN SYNAD ENTERED MESS
         BAL   R8,SWRITE               GO DO WRITE
         MVI   CONST,C' '              BLANK OUT AREA
         MVC   CONST+1(L'SYNMESS),CONST
         FORM  DIAG2,JOBNAMD,DIAG3,STEPNAMD
         FORM  DIAG6,DDNAMD
         FORM  DIAG7,OPERATTM,DIAGA,ACCMETH
         FORM  DIAG8,ERRDESC
         FORM  DIAG4,UNITADDR,DIAG5,DEVTYPE
         FORM  DIAG1,NOBYTERD,DIAG9,RELBLKNO
         DROP  R2
         LM    R0,R15,SYNSAVE          RESTORE REGISTERS
         SYNADRLS
         RETURN
         TITLE '*****     EODAD RTN     *****'
***-----------------------------------------------------------------***
***      1. CLOSE THE DEBE DCB AND LEAVE IT IN PLACE                ***
***      2. READ THE DATA SET'S  JOB FILE CONTROL BLOCK             ***
***      3. UP THE FILE SEQUENCE NUMBER BY ONE SO THAT OPEN WILL    ***
***      NOT REWIND THE TAPE                                        ***
***      4. FLAG THE DCB SO THAT JFCB WILL BE WRITTEN BACK TO Q     ***
***      5. GO BACK & LOOP TILL 10 DATASETS READ OR EOV ENCOUNTERED ***
***-----------------------------------------------------------------***
         SPACE
EODADXX  DS    0H
         MVI   MYSW,X'00'              CLEAR SNAPPER
         L     R8,BLKSAVE
         CH    R8,SNAPNUM              SEE IF RECORD ALREADY SNAPPED
         BNH   *+8                     LAST BLOCK ALREADY SNAPPED
         BAL   R3,DOSNAP               SO GO DO IT TO IT
         MVC   CONST(20),TMREAD        MOVE IN TAPE MARK MESSAGE
         BAL   R8,SWRITE               GO DO WRITE
         L     R15,TOTBLKS             ACCUMULATE TOTAL
         L     R8,BLKSAVE
         AR    R15,R8                  READ  DURING
         ST    R15,TOTBLKS             THIS PROCESSING
         CVD   R8,WA                   CONVERT BLOCK COUNT TO DECIMAL
         UNPK  WA2(8),WA+2(6)          UNPACK IT
         OI    WA2+7,X'F0'             FOX UP THE LAST BYTE
         MVC   CONST(20),RCMSGT        MOVE IN CONSTANT PART OF THE MES
         MVC   BLKLEN(8),WA2           MOVE IN CONSTANT PART OF THE MES
         BAL   R8,SWRITE               GO DO WRITE
         CLI   EODX,X'FF'
         BE    *+12
         MVI   EODX,X'FF'
         B     EODAD060
         L     R15,TOTBLKS             SET UP TO PRINT
         CVD   R15,WA                  TOTAL BLOCKS
         UNPK  WA2(8),WA+2(6)          READ DURING THIS
         OI    WA2+7,X'F0'             PROCESSING
         MVC   CONST(20),LASTTM        LAST TM MESSAGE
         MVC   BLKLEN(8),WA2           INSERT BLOCK COUNT
         BAL   R8,SWRITE               GO DO WRITE
         B     OUTFORCE                GO TERMINATE
         SPACE
EODX     DC    X'00'
         SPACE
EODAD060 DS    0H
         OI    SW,EODENTRY             TURN ON TAPE MARK INDICATOR
         MVC   BLKLEN(8),BLANKS
         CLI   LSW,X'FF'
         BNE   TESTEOV
         XC    RECB,RECB
SAYAGAIN WTO   ' ZTSECURE, DOES UNIT=XXX HAVE TAPE INDICATE?',         X
               ROUTCDE=(1,11)
         WTOR  ' ZTSECURE, REPLY ''Y'' OR ''N''',REPLY,1,RECB,         C
               ROUTCDE=(1,11)
         WTO   'ENTER "H" FOR EXPLANATION FOR ZTSECURE'
         WAIT  1,ECB=RECB
         XC    RECB,RECB CORRECTION (BEH) TO ALLOW RE-USE OF LOOP
         CLI   REPLY,C'N'
         BE    NEXTDS
         CLI   REPLY,C'Y'
         BE    NVOL
         WTO   'ZTSECURE: REPLY "Y" IF TAPE INDICATOR LIGHT IS ON'
         WTO   'THIS MEANS END-OF-VOLUME DETECTED AT REFLECTOR STRIP'
         WTO   'ZTSECURE: REPLY "N" IF TAPE INDICATOR LIGHT IS OFF'
         WTO   'THIS MEANS THAT ZTSECURE CAN WRITE ON THIS VOLUME'
         B     SAYAGAIN
         SPACE
TESTEOV  TM    SW,EOVLABEL
         BNO   NEXTDS
         NI    SW,255-EOVLABEL
NVOL     CLOSE DEBEDCB
         RDJFCB ,MF=(E,LISTJFCB)
         LH    R4,JFCBVLSQ
         LA    R4,1(R4)
         STH   R4,JFCBVLSQ
         L     R4,DSNO
         STH   R4,JFCBFLSQ
         B     NEXTVOL
         SPACE
NEXTDS   CLOSE (DEBEDCB,LEAVE)         CLOSE THE TWO DCB'S
         RDJFCB ,MF=(E,LISTJFCB)       READ IN THE DEBE JFCB
         LH    R4,JFCBFLSQ             LOAD FILE SEQUENCE NUMBER
         LA    R4,1(R4)
         STH   R4,JFCBFLSQ             STORE UPED DATA SET COUNT IN JFC
NEXTVOL  OI    JFCBMASK+4,X'80'        INSURE JFCB WILL BE READ BACK 2Q
         OPEN  ,TYPE=J,MF=(E,LISTJFCB) DO AN OPEN J
         B     DEBE010                 GO BACK TO SNAP OUT LOOP
         SPACE
OUTFORCE DS    0H
         MVC   BLKLEN(8),BLANKS
         CLOSE (DEBEDCB,LEAVE)
         RDJFCB   ,MF=(E,LISTJFCB)
         LH    R4,JFCBFLSQ
         LA    R4,1(R4)
         STH   R4,JFCBFLSQ
         OI    JFCBMASK+4,X'80'
         LA    R4,39                   REPEAT COUNT (39*256=9984)
         LA    R8,RAREA
         MVI   RAREA,X'FF'
FFLOOP   EQU   *
         MVC   1(256,R8),0(R8)         FILL BUFFER WITH X'FF'S
         LA    R8,256(R8)
         BCT   R4,FFLOOP
         MVC   1(15,R8),0(R8)          WRAP IT UP (1+9984+15=10000)
         OPEN  (DEBEDCB,(OUTPUT)),TYPE=J
*
         SR    R8,R8
RITELOOP WRITE WDECB,SF,DEBEDCB,RAREA,'S'
         WAIT  1,ECB=WDECB
         L     15,RITELOOP+20
         TM    12(15),X'01'
         BO    ENDALL
         CHECK WDECB
         LA    R8,1(R8)
         B     RITELOOP
         SPACE
ENDALL1  WTO   '* ZTSECURE - DISASTROUS ERROR - MUST STOP *',          C
               ROUTCDE=(1,11)
ENDALL   DS    0H
         CLOSE DEBEDCB
         CVD   R8,WA
         UNPK  WA2(8),WA+2(6)
         OI    WA2+7,X'F0'
         MVC   CONST(20),RITEMSG
         MVC   BLKLEN(8),WA2
         BAL   R8,SWRITE               GO DO WRITE
ZEND     WTO   '* JJJJJJJJ - ZTSECURE TERMINATING *',ROUTCDE=(1,11)
         MVC   CONST(L'MSGEND),MSGEND    MOVE IN END PROCESSING MESSAGE
         BAL   R8,SWRITE               GO DO WRITE
         CLOSE (SNAPDCB)
         TITLE '**************STANDARD LINKAGE OUT***********'
         L     R13,SAVEAREA+4                                      SARM
         LM    R14,R12,12(R13)                                     SARM
         XR    R15,R15                 0 RET CODE          MARSHALL
         BR    R14                                                 SARM
         TITLE '     *****BLOCK FORMATTING AND PRINTING RTN*****'
DEBE500  DS    0H
         LR    R6,R1
         SPACE
***-----------------------------------------------------------------***
***            S N A P  O U T  F I R S T  T E N  B L O C K S        ***
***-----------------------------------------------------------------***
         SPACE
         ST    R1,STORAGE              STORE BEGINNING OF BUFFER
         L     R5,DCBIOBA-IHADCB+DEBEDCB  ADDR OF IOB PREFIX
         SR    R4,R4                   ZERO OUT R4
         IC    R4,DCBOFFSR-IHADCB+DEBEDCB  OFFSET TO READ CCW IN IOB
         AR    R4,R5                   ADD TO GET PTR TO READ CCW
         LH    R4,6(R4)                LOAD ORIGINAL COUNT
IOBCSW   EQU   16                      OFFSET OF CCW IN IOB
         LH    R5,IOBCSW+6(R5)         LOAD RESIDUAL COUNT FROM CSW
         SR    R4,R5                   SUBTRACT TO GET # OF BYTES READ
         ST    R4,SAVE2                SAVE # BYTES READ FOR LATER USE
         LA    R5,0(R4,R1)             ADD TO GET END OF BUFFER PTR
         BCTR  R5,0                    BACK UP TO LAST BYTE OF RCD
         ST    R5,STORAGE+4            STORE END OF BUFFER ADDR
         MVI   STORAGE+4,X'80'         SET END OF LIST BIT
         TM    MYSW,X'FF'              CAN I SNAP
         BO    BYSNAP                  NO
DOSNAP   SNAP       ,MF=(E,SNAPLIST)   SNAP OUT THE BLOCK         SARM
BYSNAP   CLC   VOL1,LABELID1           IS IT VOL1???
         BE    DEBE700                 YES, GO TO VOL LABEL FOR,AT
         CLC   HDR,LABELID1            IS IT A HDR???
         BE    DEBE600                 YES, IT IS - GO TO SPEC.PRINT
         CLC   EOV,LABELID1            IS IT EOV???
         BE    DEBE600                 YES, IT IS - GO TO SPEC.PRINT
         CLC   EOF,LABELID1            IS IT EOF???
         BE    DEBE600                 YES, IT IS - GO TO SPEC.PRINT
         SPACE
***-----------------------------------------------------------------***
***            R4 HAS BLOCK LENGTH IN IT DO NOT DISTURB             ***
***-----------------------------------------------------------------***
         SPACE
DEBE520  DS    0H
         LA    R2,2                    LOAD R2 SO WE WILL COME BACK
         L     R4,SAVE2                GET # BYTES READ FOR PRINT OUT
         MVC   CONST(20),BLMSG         MOVE IN BLOCK LENGTH MSG
         B     DEBE560                 BRANCH AROUND SECOND MSG FORMAT
DEBE540  DS    0H
         L     R4,BLKSAVE
         MVC   CONST(20),RCMSG         MOVE IN RECORD COUNT MSG
DEBE560  DS    0H
         LA    R4,0(R4)                CLEAR HIGH ORDER BYTE
         XC    WA,WA                   CLEAR WORK AREA
         CVD   R4,WA                   CONVERT RECORD COUNT TO DECIMAL
         UNPK  WA2(8),WA+4(4)          UNPACK CONVERTED RECORD COUNT
         OI    WA2+7,X'F0'             SET LOW ORDER BYTE STRAIGHT
         MVC   BLKLEN,WA2+4            MOVE IT IN TO PRINT AREA
         TM    MYSW,X'FF'              PRINT ANY MESSAGES
         BO    BYMSG
         BAL   R8,SWRITE               GO DO WRITE
BYMSG    BCT   R2,DEBE540              BRANCH BACK FOR OHER MESSAGE
         MVC   BLKLEN,BLANKS           BLANK OUT BLOCK LENGTH FIELD
         BR    R3                      RETURN
         TITLE '     *****  FORM LABEL FORMATS *****'
DEBE600  DS    0H
         CLI   LABELNO1,C'1'           IS IT A '1' LABEL???
         BE    DEBE650                 YES
         CLI   LABELNO2,C'2'           IS IT A '2' LABEL???
         BNE   DEBE520                 NO GO BACK
         SPACE
***-----------------------------------------------------------------***
*              .  L A B E L  T W O   F O R M A T T I N G    .
***-----------------------------------------------------------------***
         SPACE
         FORM  TWO1,LABELID2,TWO3,RECFM2
         FORM  TWO4,BLKLEN2,TWO5,RECLEN2
         FORM  TWO6,TAPEDEN2,TWO7,DSPOS2
         FORM  TWO8,JJSID2,TWO9,TAPEREC2
         FORM  TWO10,PRCC2,TWO12,BLKATT2
         B     DEBE520
         SPACE
***-----------------------------------------------------------------***
*              .    L A B E L  O N E   F O R M A T T I N G  .
***-----------------------------------------------------------------***
DEBE650  DS    0H
         FORM  ONE1,LABELID1,ONE3,DSID1
         FORM  ONE4,DSSERNO1,ONE5,VOLSNO1
         FORM  ONE6,DSSEQNO1,ONE7,GENNO1
         FORM  ONE8,VERNO1,ONE9,CREATDT1
         FORM  ONE10,EXPIRDT1,ONE11,DSSEC1
         FORM  ONE12,BLOCKCT1,ONE13,SYSCODE1
         B     DEBE520
         SPACE
***-----------------------------------------------------------------***
*              .   V O L 1  L A B E L   F O R M A T I N G   .
***-----------------------------------------------------------------***
         SPACE
DEBE700  DS    0H
         BAL   R7,DEBE950              CLEAR MESSAGE AREA
         FORM  V1,LABELIDV,V2,VOLSERVN
         FORM  V3,OWNERNAV
         B     DEBE520
         SPACE
         TITLE '     *****   WRITE  OUT  FORMATTED  MESSAGES   *****'
DEBE900  DS    0H
         LA    R14,MSG1
         ST    R14,MSGPTR+MSGDECB
         BAL   R8,SWRITE               GO DO WRITE
DEBE950  DS    0H
         MVI   MSGBLOCK,C' '           MOVE IN BLANK TO BLANK OUT AREA
         MVC   MSGBLOCK+1(119),MSGBLOCK
         LA    R14,ERRMSG01
         ST    R14,MSGPTR+MSGDECB
         BR    R7
         TITLE ' *********   CONSTANTS   AND DCBS*********'
DSNO     DC    F'1'
V1       DC    C'LABEL IDENTIFIER'
V2       DC    C'VOLUME SERIAL NUMBER'
V3       DC    C'OWNER NAME AND ADDRESS'
ONE1     DC    C'LABEL IDENTIFIER'
ONE3     DC    C'DATA SET IDENTIFIER'
ONE4     DC    C'DATA SET SERIAL NUMBER'
ONE5     DC    C'VOLUME SEQUENCE NUMBER'
ONE6     DC    C'DATA SET SEQUENCE NUMBER'
ONE7     DC    C'GENERATION NUMBER'
ONE8     DC    C'VERSION NUMBER'
ONE9     DC    C' CREATION DATE'
ONE10    DC    C'EXPIRATION DATE'
ONE11    DC    C'DATA SET SECURITY'
ONE12    DC    C'BLOCK COUNT'
ONE13    DC    C'SYSTEM CODE'
TWO1     DC    C'LABEL IDENTIFIER'
TWO3     DC    C'RECORD FORMAT'
TWO4     DC    C'BLOCK LENGTH'
TWO5     DC    C'RECORD LENGTH'
TWO6     DC    C'TAPE DENSITY'
TWO7     DC    C'DATA SET POSITION'
TWO8     DC    C'JOB/JOBSTEP IDENTIFICATION'
TWO9     DC    C'TAPE RECORDING TECHNIQUES'
TWO10    DC    C'PRINTER CONTROL CHAR.'
TWO12    DC    C'BLOCK ATTRIBUTE'
DIAG1    DC    C'NUMBER OF BYTES READ'
DIAG2    DC    C'JOB NAME'
DIAG3    DC    C'STEP NAME'
DIAG4    DC    C'UNIT ADDRESS'
DIAG5    DC    C'DEVICE TYPE'
DIAG6    DC    C'DD NAME'
DIAG7    DC    C'OPERATION ATTEMPTED'
DIAG8    DC    C'ERROR DESCRIPTION'
DIAG9    DC    C'RELATIVE BLOCK ADDRESS'
DIAGA    DC    C'ACCESS METHOD USED'
EOF      DC    C'EOF'
HDR      DC    C'HDR'
VOL1     DC    C'VOL1'
RECOUT   EQU   *
         SPACE
MSGDCB   DS    0F
SNAPDCB  DCB   DSORG=PS,RECFM=VBA,MACRF=(W),BLKSIZE=882,LRECL=125,     X
               DDNAME=SNAPO,BUFNO=2
DEBEDCB  DCB   DSORG=PS,                                               X
               BFALN=D,                                                X
               BLKSIZE=10000,                                          X
               DDNAME=TAPE,                                            X
               EODAD=EODADXX,                                          X
               SYNAD=SYNADXX,                                          X
               BUFNO=3,                                                X
               DEVD=TA,                                                X
               RECFM=U,                                                X
               EXLST=EXITLIST,                                         X
               MACRF=(RC,WC)
SNAPLIST SNAP  DCB=SNAPDCB,ID=10,LIST=STORAGE,MF=L
STORAGE  DC    A(RECOUT),X'80',AL3(RECOUT+96)
LISTJFCB RDJFCB (DEBEDCB),MF=L
         SPACE
EXITLIST DS    0F
         DC    X'87'                   END OF LIST+JFCB READ INDICATOR
         DC    AL3(JFCBAREA)           AREA DEDICATED TO JFCB
SREAD    READ  RDECB,SF,MF=E           READ NEXT RECORD
         CHECK RDECB
         LA    R1,RAREA                MAINTAIN RECORD ADDRESSABILITY
         L     R6,BLKSAVE              GET LAST BLOCK COUNT
         LA    R6,1(R6)                INCREMENT COUNT
         ST    R6,BLKSAVE              SAVE UPDATED COUNT
         BR    R8                      RETURN
         READ  RDECB,SF,DEBEDCB,RAREA,'S',MF=L
SWRITE   WRITE MSGDECB,SF,MF=E         WRITE IT OUT
         CHECK MSGDECB
         BR    R8                      RETURN
         SPACE
         WRITE MSGDECB,SF,SNAPDCB,ERRMSG01,'S',MF=L
         SPACE
ERRMSG01 DS    0F
         DC    H'129'
         DC    H'0'
         DC    H'125'
         DC    H'0'
         DC    C'-'                    CONTROL CHAR TO SKIP 3 LINES
MSGBEGIN DC    CL135'     ***** T A P E  S E C U R E ***** -----'
         ORG   (MSGBEGIN+50)
CONST    DS    CL20
BLKLEN   DS    0F
         ORG   (MSGBEGIN+135)
BLANKS   DC    CL8' '
MSGEND   DC    C'END OF TAPE  SECURE  PROCESSING'
RCMSG    DC    CL20' RECORD NUMBER   --- '
BLMSG    DC    CL20' BLOCK  LENGTH    ---'
RITEMSG  DC    C' BLOCKS WRITTEN -   '
RCMSGT   DC    CL20'TOTAL RECORD COUNT --- '
SYNMESS  DC    C'     ***** SYNAD ENTERED - BAD BLOCK READ ******'
TMREAD   DC    CL20'TAPE MARK READ - EOD'  TAPE MARK READ MEWSAGE
LASTTM   DC    CL20'LAST DATA SET ## EOJ'
BADBLKLN DS     0CL20
         DC    CL12'BAD LEN-BLK='
BLNUM    DS    CL8                     CONVERTED BLOCK LENGTH
MSG1     DS    0F
         DC    H'129'
         DC    H'0'
         DC    H'125'
         DC    H'0'
         DC    C'0'                    CONTROL CHAR TO SKIP TWO LINES
MSGBLOCK DC    CL120' '
         ORG   (MSGBLOCK+5)
MSGBLKA  DS    CL38
MSGBLKB  DS    CL18
MSGBLKC  DS    CL38
MSGBLKD  DS    CL19
         DC    CL40' '
MSGPTR   EQU   12
         SPACE
TAPESTAT DC    X'00'                   THINGS TO DO FIELD
BLKLENX  EQU   X'80'                   CHECK LENGTH FO THE LBLOCKS
SW       DC    XL1'00'
EOVLABEL EQU   X'40' -                 EOV LABEL ENCOUNTERED
EODENTRY EQU   X'20'
SYNSW    EQU   X'10'
SYNCTR   DC    H'0'                    COUNTER FOR SYNAD ENTRIES-MAX 10
BLKSAVE  DS    F
SYNSAVE  DS    16F
SNAPNUM  DS    0H
BLENNUM  DS    0F
BLKLENSS DC    F'0'                    FIXED BLOCK LENGTH FOR TAPES
*                                      LENGTH IN FIXED BLOCK TAPEE
SAVE2    DS    F
TEN      DC    H'10'
EOV      DC    CL3'EOV'
MYSW     DC    X'00'                   BACKSPACE RECORDS SWITCH
WA2      DS    D
WA       DS    D
BADLENNO DS    H
TOTBLKS  DC    F'0'                    BLOCKS READ
         SPACE
         DS    0F
*******************************************************************AM01
VOLLABPR EQU   X'80' -            VOLUME LABEL PROCESSING SWITCH   AM01
NL       EQU   X'01' -            NON-LABELED TAPE                 AM01
SL       EQU   X'02' -            STD. LABELED TAPE                AM01
BLP      EQU   X'10' -            BYPASS LABL PROCESSING           AM01
UL       EQU   X'08' -            USER LABELS                      AM01
SUL      EQU   X'08' -            STD AND USER LABELS              AM01
NSL      EQU   X'04' -            NON-STD.  LABELED TAPE           AM01
*******************************************************************AM01
JFCBAREA DS    0CL176
INFMJFCB EQU   *     -
JFCBDSNM DS    CL44  -   DATA SET NAME
JFCBELNM DS    CL8   - ELEMENT NAME OR VERSION
JFCBTSDM DS    CL1   - TASK SCHEDULER - DATA MGMNT BYTE INTERFACE
JFCBSYSC DS    CL13  - SYSTEM CODE
JFCBLTYP DS    CL1   - LABEL TYPE AND USER'S LABEL INDICATOR
         DS    CL1   - NOT USED
JFCBFLSQ DS    CL2   - FILE SEQUENCE NUMBER
JFCBVLSQ DS    CL2   - VOLUME SEQUENCE NUMBER
JFCBMASK DS    CL8   - DATA MANAGEMENT MASK
JFCBCRDT DS    CL3   - DATA SET CREATION DATE
JFCBXPDT DS    CL3   - DATA SET EXPIRATION DATE
JFCBIND1 DS    CL1   - INDICATOR BYTE ONE
JFCBRLSE EQU   64    - BITS 0 AND 1 - EXTERNAL STORAGE RELEASE INDICATO
JFCBLOCT EQU   16    - BITS 2 AND 3 DATA SET HAS BEEN LOCATED
JFCBNEWV EQU   4     - BITS 4 AND 5 - NEW VOL ADDED TO DATA SET
JFCBPMEM EQU   1     - BITS 6 AND 7 - DS IS A MEM OF A PODS OR GDG
JFCBIND2 DS    CL1   - INDICATOR BYTE 2
JFCBSTAT EQU   64    - BITS 0 AND 1 - DS STATUS( OLD, NEW,MOD)
JFCBSCTY EQU   16    - BITS 2 AND 3 - DS SECURITY INDICATOR
JFCBUFNO DS    0AL1  -
JFCBUFRQ DS    AL1   -
JFCBFTEK DS    0BL1  -
JFCBFALN DS    BL1   -
JFCBUFL  DS    AL2   -
JFCEROPT DS    BL1   -
JFCTRTCH DS    0BL1  -
JFCKEYLE DS    0AL1  -
JFCMODE  DS    0BL1  -
JFCCODE  DS    0BL1  -
JFCSTACK DS    0BL1  -
JFCPRTSP DS    BL1   -
JFCDEN   DS    BL1   -
JFCLIMCT DS    AL3   -
JFCDSORG DS    BL2   -
JFCRECFM DS    BL1   -
JFCOPTCD DS    BL1   -
JFCBLKSI DS    AL2   -
JFCLRECL DS    AL2   -
JFCNCP   DS    AL1   -
JFCNTM   DS    AL1   -
JFCRKP   DS    AL2   -
JFCCYLOF DS    AL1   -
JFCDBUFN DS    AL1   -
JFCINTVL DS    AL1   -
JFCCPRI  DS    BL1   -
JFCSOWA  DS    AL2   -
JFCBNTCS DS    CL1   - NUMBER OF OVERFLOW TRACKS
JFCBNVOL DS    CL1   - NUMBER OF VOLUME SERIAL NUMBERS
JFCBVOLS DS    CL30  - VOLUME SERIAL NUMBERS( THE FIRST FIVE)
JFCBEXTL DS    CL1   - LENGTH OF BLK. OF EXTRA VOL SER NUMBERS
JFCBEXAD DS    CL3   - TRACK ADDR OF BLK OF EXTRA VOL SER NUMBERS
JFCBPQTY DS    CL3   - PRIM. QUANTITY OF D. A. STOR AVAILABLE
JFCBCTRI DS    CL1   - INDICATES WHETHER CYLINDERS, TRACKS OR RECORDS
*                    - ARE SPECIFIED IN JFCBPQTY AND JFCBSQTY
JFCBSQTY DS    CL3   - SECONDARY QUANTITY OF D.A. STORAGE REQUIRED
JFCBIND3 DS    CL1   - INDICATOR BYTE THREE
JFCBCNTG EQU   64    - BITS 0 AND 1 - CONTIG. STORAGE INDICATOR
JFCBMXIG EQU   16    - BITS 2 AND 3 - MAXIMUN AVAIL. EXTENT INDICATOR
JFCBALXI EQU   4     - BITS 4 AND 5 - ALL EXTENTS INDICATOR
JFCBRNDC EQU   1     - BITS 6 AND 7 - ROUND CYLINDER INDICATOR
JFCBDQTY DS    CL3   - QUANTITY OF D.A. STOR. REQ'D AS A DIRECTORY
JFCBSPNM DS    CL3   - CORE ADDR OF JFCB WITH WHICH CYLINDERS ARE SPLIT
JFCBABST DS    CL2   - RELATIVE ADDR OF FIRST TRK TO BE ALLOCATED
JFCBSBNM DS    CL3   - CORE ADDR OF JFCB FROM WHICH SPACE IS TO BE
*                    - SUBALLOCATED
JFCBDRLH DS    CL3   - AVERAGE DATA RECORD LENGTH
JFCBVLCT DS    CL1   - VOLUME COUNT
JFCBSPTN DS    CL1   - NUM OF TRKS PER CYL TO BE USED BY THIS DATA
*                    - SET WHEN SPLIT CYLINDERS IS INDICATED
JFCBLGTH EQU   176   - LENGTH OF JFCB
JFCBEND  EQU   *     -
         DS    0D
RAREA    DC    100CL100' '         10K INPUT AREA
         END
