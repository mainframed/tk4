         TITLE '   A S K O P E R   '
***********************************************************************
*                                                                     *
*        'ASKOPER'                                                    *
*                                                                     *
***********************************************************************
*
*        WRITTEN BY. BILL GODFREY.
*        DATE WRITTEN. SEPTEMBER 25 1980.
*        DATE UPDATED. FEBRUARY 9 1982.
*        DESCRIPTION.
*         THIS PROGRAM WRITES A MESSAGE ON THE OPERATOR CONSOLE,
*         WAITS FOR EITHER OF 2 VALID REPLIES,
*         SETS THE RETURN CODE TO 0 OR 8 BASED ON THE REPLY.     JDM1
*
*         THE PARM FIELD SPECIFIES THE MESSAGE AND THE VALID REPLIES.
*         THERE ARE 3 FIELDS IN THE PARM, SEPARATED BY COMMAS.
*
*         THE FIRST FIELD IN THE PARM IS THE REPLY THAT WILL SET
*         THE RETURN CODE TO 0.
*         THE SECOND FIELD IN THE PARM IS THE REPLY THAT WILL SET
*         THE RETURN CODE TO 8.                                  JDM1
*         THE THIRD FIELD IN THE PARM IS THE MESSAGE.
*
*         FOR EXAMPLE,
*            PARM='DAILY,WEEKLY,IS THIS THE DAILY OR WEEKLY RUN?'
*
*         IF THE FIRST TWO FIELDS ARE NULL (PARM=',,MESSAGE')
*            THEN 'YES' AND 'NO' ARE THE VALID REPLIES.
*
         SPACE
ASKOPER  AMODE 24
ASKOPER  RMODE 24
ASKOPER  CSECT
         SAVE  (14,12),,ASKOPER_&SYSDATE._&SYSTIME
         LR    R12,R15             GET EP ADDR
         USING ASKOPER,R12         ESTABLISH ADDRESSABILITY
         LR    R15,R13             PERFORM
         LA    R13,SAVE               SAVE
         ST    R15,4(,R13)              CHAINING
         ST    R13,8(,R15)               .........
         MVC   ANS0,=CL12'YES'
         MVC   ANS4,=CL12'NO'
         LA    R4,WTORW+12
         MVI   0(R4),C' '          FILL MESSAGE AREA
         MVC   1(69,R4),0(R4)         WITH BLANKS
         MVC   0(8,R4),WTOR1+12    MOVE DEFAULT MESSAGE 'REPLY?'
         LA    R0,70               SET DEFAULT LENGTH TO 70
         STH   R0,LENGTH
         L     R2,0(,R1)           POINT TO PARM
         LH    R3,0(,R2)           GET PARM LENGTH
         LTR   R3,R3               IS THERE A PARM
         BZ    PARMX               NO, USE DEFAULTS
         LA    R2,2(,R2)           POINT TO PARM DATA
         LA    R0,1                CONSTANT 1 FOR INCREMENTING
         LA    R1,12               MAX LENGTH OF ANSWERS
PARM1T   EQU   *
         LA    R4,ANS0             POINT TO ANSWER AREA
         CLI   0(R2),C','          IS IT NULL
         BE    PARM2               YES, LEAVE ANSWER DEFAULT
         MVC   ANS0,=CL12' '       PAD ANS0 WITH BLANKS
         SR    R5,R5               INITIAL LENGTH
PARM1L   EQU   *
         CLI   0(R2),C','          LOOK FOR END OF STRING
         BE    PARM2               ANS0 COMPLETE
         AR    R5,R0               ADD 1 TO LENGTH
         CR    R5,R1               IS IT TOO LONG
         BH    EXIT12              YES, PARM ERROR               JDM1
         MVC   0(1,R4),0(R2)       COPY THE CHARACTER
         AR    R4,R0               NEXT OUTPUT CHAR
         AR    R2,R0               NEXT INPUT CHAR
         BCT   R3,PARM1L           BRANCH UNLESS NO MORE PARM
         B     EXIT12              PARM ERROR                    JDM1
         SPACE
PARM2    EQU   *
         AR    R2,R0               POINT PAST COMMA
         SR    R3,R0               REDUCE LENGTH ACCORDINGLY
         BNP   EXIT12              NOTHING AFTER COMMA, PARM ERR JDM1
PARM2T   EQU   *
         LA    R4,ANS4             POINT TO ANSWER AREA
         CLI   0(R2),C','          IS IT NULL
         BE    PARM3               YES, LEAVE ANSWER DEFAULT
         MVC   ANS4,=CL12' '       PAD ANS4 WITH BLANKS
         SR    R5,R5               INITIAL LENGTH
PARM2L   EQU   *
         CLI   0(R2),C','          LOOK FOR END OF STRING
         BE    PARM3               ANS0 COMPLETE
         AR    R5,R0               ADD 1 TO LENGTH
         CR    R5,R1               IS IT TOO LONG
         BH    EXIT12              YES, PARM ERROR               JDM1
         MVC   0(1,R4),0(R2)       COPY THE CHARACTER
         AR    R4,R0               NEXT OUTPUT CHAR
         AR    R2,R0               NEXT INPUT CHAR
         BCT   R3,PARM2L           BRANCH UNLESS NO MORE PARM
         B     EXIT12              PARM ERROR                    JDM1
         SPACE
PARM3    EQU   *
         AR    R2,R0               POINT PAST COMMA
         SR    R3,R0               REDUCE LENGTH ACCORDINGLY
         BNP   EXIT12              NOTHING AFTER COMMA, PARM ERR JDM1
PARM3T   EQU   *
         LA    R4,WTORW+12         POINT TO WTOR TEXT
         CLI   0(R2),C','          IS IT NULL
         BE    EXIT12              YES, PARM ERROR               JDM1
         MVI   0(R4),C' '          PUT BLANK IN WTOR TEXT
         MVC   1(69,R4),0(R4)      PAD TEXT WITH BLANKS
         SR    R5,R5               INITIAL LENGTH
         LA    R1,70               MAX LENGTH OF TEXT
PARM3L   EQU   *
         CLI   0(R2),C','          LOOK FOR END OF STRING
         BE    PARM3X              TEXT COMPLETE
         AR    R5,R0               ADD 1 TO LENGTH
         CR    R5,R1               IS IT TOO LONG
         BH    EXIT12              YES, PARM ERROR               JDM1
         MVC   0(1,R4),0(R2)       COPY THE CHARACTER
         CLI   0(R4),C'%'          COMMA SUBSTITUTE
         BNE   *+8                 NO, SKIP NEXT INSTRUCTION
         MVI   0(R4),C','          REPLACE WITH COMMA
         AR    R4,R0               NEXT OUTPUT CHAR
         AR    R2,R0               NEXT INPUT CHAR
         BCT   R3,PARM3L           BRANCH UNLESS NO MORE PARM
PARM3X   EQU   *
         STH   R5,LENGTH
PARMX    EQU   *                   PARM EXIT
         LA    R1,WTORW
         MVC   0(12,R1),WTOR1      COPY WTOR PREFIX
         LH    R15,LENGTH
         LA    R15,4(,R15)
         STH   R15,8(,R1)
         LA    R15,8(R15,R1)       POINT PAST TEXT
         MVC   0(4,R1),WTOR1R      COPY DESC AND ROUTCDE
LOOP     EQU   *
         MVC   REPLY,=CL12' '
         XC    ECB,ECB
         WTOR  ,REPLY,12,ECB,MF=(E,WTORW)
         WAIT  ECB=ECB
         OC    REPLY,=CL12' '      UPPER CASE, CAPS
         CLC   REPLY,ANS0
         BE    EXIT0
         CLC   REPLY,ANS4
         BE    EXIT8
         WTO   MF=(E,WTOINV)
         B     LOOP
         SPACE
EXIT12   EQU   *
         LA    R15,12
         B     EXIT
         SPACE
EXIT8    EQU   *
         LA    R15,8
         B     EXIT
         SPACE
EXIT0    EQU   *
         SR    R15,R15
EXIT     EQU   *
         L     R13,4(,R13)
         RETURN (14,12),RC=(15)
         SPACE
         LTORG
         SPACE
WTOINV   WTO   ' REPLY IS INVALID ',ROUTCDE=(1,2,3,4,5),MF=L
         SPACE
WTOR1    WTOR  ' REPLY ?',                                             X
               ROUTCDE=(1,2,3,4,5),MF=L
WTOR1R   EQU   *-4
WTOR1L   EQU   *-WTOR1
ECB      DS    F
SAVE     DS    18F
REPLY    DS    CL12
ANS0     DS    CL12
ANS4     DS    CL12
WTORW    DS    3F,CL70,XL4
WTORWR   EQU   *-4
LENGTH   DS    H
         DS    0D
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END   ASKOPER
