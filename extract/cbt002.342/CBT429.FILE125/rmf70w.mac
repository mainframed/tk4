*-------------------------------------------------------------------*
× **THIS PROGRAM IS THE SAME AS RMF70 EXCEPT IT STORES DATA   **    ×
× **BY WEEK RATHER THAN BY MONTH. IT DOES THIS BY SAVEING     **    ×
× **THE DATA WITH A DIFFERENT NAME (CONTAINS THE CHARACTERS   **    ×
× **"WK" IN THE SAS NAME). COMPARE THE DATA STATEMENTS TO SEE **    ×
× **THE DIFFERENCE.                                           **    ×
× **CREATED FROM RMF70 ON 3/16/89 <====                       **    ×
×                                                                   ×
+-------------------------------------------------------------------+
×   ONLY LOOKING AT SMF TYPE 70 RECORDS. FOR MVS/XA SYSTEMS         ×
×   DATA MUST BE SORTED BEFORE BEING USED BY                        ×
×         SMF70SID,SMF70DAT,SMF70IST                                ×
×         (JUST USE THE SORT MEMBER)                                ×
×                                                                   ×
×   SMF DATA FOR -TSO  ACTIVITY                                     ×
×                -AVERAGE NUMBER OF BATCH JOBS RUNNING              ×
×                -AVERAGE NUMBER OF OUT AND READY ASIDS             ×
×                -PICKS UP WAIT TIME AND CALCULATES CPU UTILIZATION ×
×                                                                   ×
× ----                       -----                            ----  ×
×   SINCE THE DATA IS SAVED BY SYSTEM ID (SMF ID) THEN THE ONLY     ×
×   THING THAT MAKES THESE PROGRAMS INSTALLATION DEPENDANT ARE      ×
×   1) THE LITERALS FOR CHECKING THE SYSTEM ID                      ×
×       -LOCATED AT THE END OF THE PROGRAM                          ×
×   2) THE MEMBER NAME THAT IS GIVEN TO THE SAS DATASET (ONE FOR    ×
×      EACH SYSTEM)                                                 ×
×       -LOCATED IN THE BEGINING (DATA STATEMENT)                   ×
×        AND AT THE END, FOLLOWING THE "OUTPUT" STATEMENTS          ×
×                                                                   ×
×   IN ADDITION, SINCE THE DATA IS NORMALLY STORED BY MONTH         ×
×   THEN THE MEMBER NAMES REFERENCED IN NUMBER 2 ABOVE              ×
×   IS CHANGED SLIGHTLY EACH MONTH TO REFLECT THE MONTH AND YEAR.   ×
× ----                       -----                            ----  ×
×                                                                   ×
×   THIS SAS FILE THEN CAN BE USED AS INPUT TO CREATE A GRAPH       ×
×   EITHER ON THE TERMINAL OR TO A PRINTER USING GDDM.              ×
×                                                                   ×
×   SMF70RTY...... RECORD TYPE.                                     ×
×   SMF70SID...... SID.                                             ×
×   SMF70IST...... TIME RMF MEASUREMENT INTERVAL STARTED IN FORM    ×
×                  0HHMMSSF WHERE F IS THE SIGN.                    ×
×   SMF70DAT...... DATE AS 00YYDDDF MEASUREMENT INTERVAL STARTED    ×
×                  (F IS THE SIGN).                                 ×
×   SMF70INT...... DURATION OF RMF MEASUREMENT INTERVAL IN FORM     ×
×                  MMSSTTTF WHERE F IS THE SIGN.                    ×
×   SMF70TMN...... TSO USERS MINIMUM OVER INTERVAL.                 ×
×   SMF70TMM...... TSO USERS MAXIMUM OVER INTERVAL.
×   SMF70TTT...... TSO USERS TOTAL VALUE OVER INTERVAL.             ×
×                                                                   ×
×                                                                   ×
×   THE VARIABLES THAT ARE SAVE ARE:                                ×
×                                                                   ×
×   S70TMN........ MINIMUM TSO USERS                                ×
×   S70TMM........ MAXIMUM TSO USERS                                ×
×   S70TAV........ AVERAGE TSO USERS                                ×
×   S70TMM........ MAXIMUM TSO USERS                                ×
×   S70BMM........ MAXIMUM BATCH USERS                              ×
×   S70OAV........ AVERAGE NUMBER OF ASIDS OUT AND READY            ×
×   S70IST........ INTERVAL START TIME                              ×
×   S70DAT........ INTERVAL DATE                                    ×
×   S70INT........ LENGTH OF (RMF) INTERVAL                         ×
× × WAIT_PER...... PERCENT OF TIME CPU WAITING -NO LONGER SAVED     ×
× × CPU_UT........ AVG. PERCENT BUSY (1 - WAIT_PER FOR NON PR/SM) OR×
× ×                FROM SMF70PDT FOR PR/SM MACHINES                 ×
× × TOT_UT........ TOTAL UTILIZATION (ALL CPU'S IN PARTITION)       ×
× × NUMCPU........ NUMBER OF LOGICAL PROCESSORS ASSIGNED TO A       ×
× ×                PARTITION                                        ×
×   S70SID........ SYSTEM'S SMF ID                                  ×
×                                                                   ×
×   OUTPUT FILE NAME = SID...REC NO...WK.....WEEK NUMBER...         ×
×                       |       |      |       |                    ×
×                       |       |      |       |                    ×
×    E.G.   S1708811 = S1 ...  70  ...88  ... 09                    ×
×                                                                   ×
×                                                                   ×
×   NOTE1: CHANGE SASDB.S1708811 TO TEST0 FOR TEMPORARY DATASET     ×
×                                                                   ×
×   NOTE2: MONTHLY USE. IF THE LAST MONTH STORED WAS SEP 1988       ×
×          AND YOU WANT TO SAVE OCT 1988 DATA THEN ENTER THE        ×
×          FOLLOWING CHANGE COMMANDS:                               ×
×          C 70WK09 70WK10 ALL                                      ×
×                                                                   ×
×   UPDATES:                                                        ×
×    ADDED S70BMM TO THE DATA STATEMETS. THIS WILL SAVE MAXIMUM     ×
×    BATCH JOBS.                                                    ×
×                                                                   ×
×   UPDATES:  2/23/89                                               ×
×    ADDED ROUTINE TO CALCULATE CPU UTILIZATION FOR PR/SM LOGICAL   ×
×    AND DEDICATED PROCESSORS. NEW VARIABLES ARE:                   ×
×    TOT_UT (TOTAL UTILIZATION                                      ×
×    AND NUMCPU (NUMBER OF PROCESSORS IN THE PARTITION((SMS70BDN)). ×
×    NOTE: FOR NOW WE ARE JUST USING THE 1ST FOUR BYTES OF SMF70LPM ×
×          (THE PARTITION NAME)                                     ×
*-------------------------------------------------------------------*
;
   MACRO INPUTIT
   DATA
 SASDB.P170WK02 (KEEP=S70TMN S70TMM S70TAV S70BAV S70OAV S70IST S70DAT
             S70BMM
             S70INT WAIT_PER CPU_UT TOT_UT NUMCPU S70SID FLAG )
 SASDB.P070WK02 (KEEP=S70TMN S70TMM S70TAV S70BAV S70OAV S70IST S70DAT
             S70BMM
             S70INT WAIT_PER CPU_UT TOT_UT NUMCPU S70SID FLAG )
 SASDB.S170WK02 (KEEP=S70TMN S70TMM S70TAV S70BAV S70OAV S70IST S70DAT
             S70BMM
             S70INT WAIT_PER CPU_UT TOT_UT NUMCPU S70SID FLAG )
        ;
   INFILE SMF LENGTH=L ;
*  INFORMAT S70IST RMFDUR4. S70INT PDTIME4. ;
   INPUT @2 ID PIB1. @;
   IF ID = 70  THEN LINK X5;
   RETURN;
X5:
POINTER = 1;
M = -3;
INPUT @ POINTER
                SMF70FLG  PIB1.
             +9 SMF70SID  $CHAR4.
            +10 SMF70PRS  PIB4.
            +12 SMF70CPS  PIB4.
                SMF70CPL  PIB2.
                SMF70CPN  PIB2.
                SMF70ASS  PIB4.
                SMF70ASL  PIB2.
                SMF70ASN  PIB2.
                SMF70BCS  PIB4.
                SMF70BCL  PIB2.
                SMF70BCN  PIB2.
                SMF70BVS  PIB4.
                SMF70BVL  PIB2.
                SMF70BVN  PIB2.
                 @;
*  ***---------------RMF PRODUCT SECTION--------------***;
POINTER = SMF70PRS +M;
INPUT @ POINTER
           +10  SMF70IST  PD4.
                SMF70DAT  PD4.
                SMF70INT  PD4.
            +2  SMF70SAM  PIB4.
                 @;
*  ***---------------CPU DATA SECTION-----------------***;
POINTER = SMF70CPS +M;
  INPUT @ POINTER
                SMF70WAT  PIB8.
                SMF70CID  PIB2.
                SMF70CNF  PIB1.
                SMF70RV3  PIB1.
                SMF70SER  PK3.
                   @;
*  ***---------------ASID DATA AREA SECTION-----------***;
POINTER = SMF70ASS +M;
INPUT @ POINTER
          +128  SMF70OMN  PIB2.
                SMF70OMM  PIB2.
                SMF70OTT  PIB4.
          +104  SMF70BMN  PIB2.
                SMF70BMM  PIB2.
                SMF70BTT  PIB4.
          +104  SMF70TMN  PIB2.
                SMF70TMM  PIB2.
                SMF70TTT  PIB4.
                 @;
*  ***---------------PR/SM PARTITION DATA SECTION-----***;
POINTER = SMF70BCS + M;
  INPUT @ POINTER
                SMF70LPM  $CHAR4.
                LPM2HALF  $CHAR4.
                SMF70LPN  PIB1.
                SMF70PFG  PIB1.
                SMF70BDN  PIB2.
                SMF70BDS  PIB4.
                   @;
*  ***--LETS START DOING SOME CALCULATIONS--***;
  S70IST = SMF70IST;
  S70DAT = SMF70DAT;
  S70INT = SMF70INT;
  S70TMN = SMF70TMN;
  S70TMM = SMF70TMM;
  IF SMF70SAM = 0 THEN S70TAV = 0;
      ELSE S70TAV = SMF70TTT / SMF70SAM;
  S70OMN = SMF70OMN              /* MIN USERS OUT AND READY */;
  S70OMM = SMF70OMM              /* MAX USERS OUT AND READY */;
  IF SMF70SAM = 0 THEN S70OAV = 0;
     ELSE S70OAV = SMF70OTT / SMF70SAM /* AVG USERS OUT AND READY */;
  S70BMN = SMF70BMN              /* MIN BATCH OUT AND READY */;
  S70BMM = SMF70BMM              /* MAX BATCH OUT AND READY */;
  IF SMF70SAM = 0 THEN S70BAV = 0;
     ELSE S70BAV = SMF70BTT / SMF70SAM /* AVG BATCH OUT AND READY */;
  S70SID = SMF70SID;
   IF SMF70INT LT 0100000 THEN DELETE;
* ******************************************************;
 MIN  = FLOOR(SMF70INT/100000)  /*PICK UP THE MINUTES ONLY MMSSTTT*/;
 SEC  = FLOOR((SMF70INT - MIN*100000)/1000)                         ;
 INTSEC = (MIN*60) + SEC                /* NO. OF SECS IN INTERVAL*/;
* *************************BEG. OF CPU WAIT TIME ROUTINE************;
  IF SMF70FLG = '.... ...1'B THEN
      GO TO PRSM_UT                 /*BIT INDICATES PR/SM MACHINE */;
* **************ELSE USE WAIT TIME TO CALC CPU UTILIZATION**********;
  WAIT    = 0;
  CPU_CTR = 1;
  POINTER = SMF70CPS +M             /*LOCATE SMF70WAT             */;
CPU_LOOP:
   IF SMF70CNF = '.... ..1.'B THEN DO  /*DID CONFIG CHANGE        */;
      FLAG = '*';
      PUT 'SMF70CNF INDICATES CPU RECONFIGED DURING INTERVAL=' S70IST
          'ON DATE=' S70DAT 'CPU=' CPU_CTR;
      END;
   WAIT = WAIT + SMF70WAT;
   IF SMF70CPN = CPU_CTR THEN
      GO TO CONT;
   CPU_CTR = CPU_CTR + 1            /*    WE HAVE ANOTHER CPU */ ;
   POINTER = POINTER + SMF70CPL     /* POINT TO ITS WAIT TIME */ ;
  INPUT @ POINTER
                SMF70WAT  PIB8.
                SMF70CID  PIB2.
                SMF70CNF  PIB1.
                SMF70RV3  PIB1.
                SMF70SER  PK3.
                   @;
   GO TO CPU_LOOP;
CONT:
 WAIT = WAIT/CPU_CTR ;
 WAITMICS = WAIT/4096       /* CONVERT WAIT TIME TO MICRO SECS */;
 WAITSEC  = WAITMICS/1000000        /*      CONVERT TO SECONDS */;
**                         END OF CPU WAIT TIME ROUTINE;
   IF INTSEC = 0 THEN WAIT_PER = 0;
   ELSE WAIT_PER = WAITSEC/INTSEC  /* PERCENTAGE OF WAIT TIME  */;
   WAIT_PER = WAIT_PER*100               /* MAKE IT AN INTERGER*/;
   CPU_UT   = 100 - WAIT_PER             /* AVG CPU UTILIZATION*/;
   CPU_UT   = ROUND(CPU_UT,.1)           /* AVG CPU UTILIZATION*/;
   TOT_UT   = CPU_UT * CPU_CTR       /*TOTL CPU UTL FOR PARTITN*/;
   TOT_UT   = ROUND(TOT_UT,.1)       /*TOTL CPU UTL FOR PARTITN*/;
   NUMCPU   = CPU_CTR              /* TOTAL CPU'S THIS  PARTITN*/;
   GO TO SAVEIT                    /* ALL DONE                 */;
PRSM_UT:
    CUR_PDS  = SMF70BCS + M        /*FIRST PARTITION DATA SECT.*/;
    PART_CTR = 0                   /*PARTITION COUNTER         */;
PART_LP:
    PART_CTR = PART_CTR + 1        /*KEEP TRACK OF PARTITIONS  */;
    IF S70SID NE SMF70LPM
       THEN GO TO NEXT_P         /*ONLY WANT THIS SID PARTITION*/;
   IF SMF70PFG = '1... ....'B THEN DO  /*HAS PARTITION CHANGED */;
      FLAG = '*';
      PUT 'SMF70PFG INDICATES PARTITION HAS CHANGED. INTERVAL=' S70IST
          'ON DATE=' S70DAT 'PARTITION=' SMF70LPN;
      END;
   IF SMF70PFG = '.1.. ....'B THEN DO  /*HAS PROCESSOR CHANGED */;
      FLAG = '*';
      PUT 'SMF70PFG INDICATES LOG. PROCESSOR HAS CHANGED. INTERVAL='
          S70IST 'ON DATE=' S70DAT 'PARTITION=' SMF70LPN;
      END;
    TOT_UT  = 0                    /*TOTAL UTILIZATION         */;
    CP_UT   = 0                    /*PHYSICAL CPU UTILIZATION  */;
    CPU_CTR = 0;
****POINTER = OFFSET PLUS LENGTH TIMES NUM. OF SECTIONS TO SKIP**;
    POINTER = SMF70BVS + M + (SMF70BDS*SMF70BVL);
*  ***---------------PR/SM LOGICAL PROCESSOR DATA SECTION--***;
  INPUT @ POINTER
                SMF70PDT  PIB8.
                SMF70VPA  PIB2.
                SMF70BPS  PIB2.
                SMF70VPF  PIB1.
                   @;
    NUMCPU = SMF70BDN        /*NO. OF LPDS FOR THIS PARTITION*/;
*UT 'END OF PART_LP: ROUTINE AND WE HAVE THE FOLLOWING:  ';
*UT 'PART_CTR=' PART_CTR '  S70SID=' S70SID '   SMF70LPM=' SMF70LPM   ;
*UT 'TOT_UT=' TOT_UT 'CPU_CTR=' CPU_CTR;
*UT 'POINTER=' POINTER '  = ' SMF70BVS '+' M'+'SMF70BDS'*'SMF70BVL;
*UT 'LPDS=' SMF70PDT SMF70VPA SMF70BPS SMF70VPF ;
LPDS_LP1:
    CPU_CTR= CPU_CTR + 1          /*LOGICAL PROCESSOR NUMBER */;
***                                                          ***;
***IS PROCESSOR NOT DEDICATED AND IS WAIT COMPLETION DISABLED***;
***NOTE: 65535 = HEX'FFFF'                                   ***;
***                                                          ***;
    IF SMF70BPS NE 65535   AND
       SMF70VPF EQ '0... ....'B THEN DO;
        TOT_UT = TOT_UT +
        ((SMF70PDT/1000000)/INTSEC)*100     /*TOTAL CPU UTIL */;
       END;
***                                                          ***;
***IS PROCESSOR DEDICATED                                    ***;
***NOTE: 65535 = HEX'FFFF'                                   ***;
***                                                          ***;
    IF SMF70BPS EQ 65535 THEN DO;
       POINTHLD = POINTER;
       POINTER = SMF70CPS +M +((CPU_CTR - 1) * SMF70CPL);
       INPUT @ POINTER
                SMF70WAT  PIB8.
                SMF70CID  PIB2.
                SMF70CNF  PIB1.
                SMF70RV3  PIB1.
                SMF70SER  PK3.
                   @;
        WAITMICS = SMF70WAT/4096  /* CONVERT WAIT TIME TO MICRO SECS */;
        CP_WAIT = ((WAITMICS/1000000)/INTSEC)*100     /*THEN TO SECS*/;
        CP_UT   = 100 - CP_WAIT;
        TOT_UT = TOT_UT + CP_UT;
        IF SMF70CNF = '.... ..1.'B THEN DO  /*DID CONFIG CHANGE   */;
        FLAG = '*';
        PUT 'SMF70CNF INDICATES CPU RECONFIGED DURING INTERVAL=' S70IST
            'ON DATE=' S70DAT 'CPU=' CPU_CTR;
          END;
        POINTER = POINTHLD;
        GO TO LPDS_C1;
       END;
***                                                          ***;
***IS PROCESSOR NOT DIDICATED AND IS WAIT COMPLETION ENABLED ***;
***NOTE: 65535 = HEX'FFFF'                                   ***;
***                                                          ***;
    IF SMF70BPS EQ 65535 AND
       SMF70VPF EQ '1... ....'B THEN DO;
       POINTHLD = POINTER;
       POINTER = SMF70CPS +M +((CPU_CTR - 1) * SMF70CPL);
       INPUT @ POINTER
                SMF70WAT  PIB8.
                SMF70CID  PIB2.
                SMF70CNF  PIB1.
                SMF70RV3  PIB1.
                SMF70SER  PK3.
                   @;
        WAITMICS = SMF70WAT/4096  /* CONVERT WAIT TIME TO MICRO SECS */;
        CP_UT = (((SMF70PDT-WAITMICS)/1000000)/INTSEC)*100;
        TOT_UT = TOT_UT + CP_UT;
        IF SMF70CNF = '.... ..1.'B THEN DO  /*DID CONFIG CHANGE   */;
        FLAG = '*';
        PUT 'SMF70CNF INDICATES CPU RECONFIGED DURING INTERVAL=' S70IST
            'ON DATE=' S70DAT 'CPU=' CPU_CTR;
          END;
        POINTER = POINTHLD;
        GO TO LPDS_C1;
       END;
LPDS_C1:
    IF NUMCPU = CPU_CTR THEN
       GO TO LP_CONT1             /*DONE WITH THIS PART      */;
    POINTER = POINTER + SMF70BVL  /*POINT TO NEXT PROCESSOR  */;
*  ***---------------PR/SM LOGICAL PROCESSOR DATA SECTION--***;
  INPUT @ POINTER
                SMF70PDT  PIB8.
                SMF70VPA  PIB2.
                SMF70BPS  PIB2.
                SMF70VPF  PIB1.
                   @;
    GO TO LPDS_LP1           /*GO DO NEXT PROCESSOR          */;
LP_CONT1:
    CPU_UT = TOT_UT/NUMCPU   /*AVERAGE CPU UTL FOR PARTITION */;
   CPU_UT   = ROUND(CPU_UT,.1)           /* AVG CPU UTILIZATION*/;
   TOT_UT   = ROUND(TOT_UT,.1)       /*TOTL CPU UTL FOR PARTITN*/;
    GO TO SAVEIT;
NEXT_P:
    IF PART_CTR GE SMF70BCN THEN DO;
       PUT 'COULDNT FIND PARTN. SID=' S70SID 'PART=' SMF70LPM ;
       PUT 'SMF70BCN=' SMF70BCN 'PART_CTR=' PART_CTR;
       PUT 'AT LABEL  NEXT_P:';
       ABORT RETURN 99       /*COULDNT FIND CORRECT PARTITION*/;
       END;
    CUR_PDS = CUR_PDS + SMF70BCL /*SAVE NEXT PARTITION D.S.  */;
    POINTER = CUR_PDS            /*POINT TO NEXT PART. D.S.  */;
*  ***---------------PR/SM PARTITION DATA SECTION-----***;
  INPUT @ POINTER
                SMF70LPM  $CHAR4.
                LPM2HALF  $CHAR4.
                SMF70LPN  PIB1.
                SMF70PFG  PIB1.
                SMF70BDN  PIB2.
                SMF70BDS  PIB4.
                   @;
    GO TO PART_LP            /*LETS LOOK AT THIS PARTITION   */;
SAVEIT:
**                                                     ;
**  OUTPUT DATA FOR EACH SYSTEM THAT YOU WANT TO SAVE.         ;
**                                                             ;
**               SMF-ID                   P1708811             ;
**                 ×                      P1.........SYSTEM    ;
**                 ×                        70.......REC NUMBER;
**                 ×                          88.....YEAR      ;
**                 ×                            11...MONTH     ;
**                 V                                           ;
   IF SMF70SID = 'P1S2' THEN OUTPUT SASDB.P170WK02 ;
   IF SMF70SID = 'P0S3' THEN OUTPUT SASDB.P070WK02 ;
   IF SMF70SID = 'S1S1' THEN OUTPUT SASDB.S170WK02 ;
RETURN;
   %
   INPUTIT;
   PROC PRINT DATA=SASDB.P170WK02 ;
        VAR S70TMN S70TMM S70TAV S70BMM S70BAV S70OAV S70IST
            S70DAT CPU_UT TOT_UT NUMCPU S70SID FLAG ;
   PROC PRINT DATA=SASDB.P070WK02 ;
        VAR S70TMN S70TMM S70TAV S70BMM S70BAV S70OAV S70IST
            S70DAT CPU_UT TOT_UT NUMCPU S70SID FLAG ;
   PROC PRINT DATA=SASDB.S170WK02 ;
        VAR S70TMN S70TMM S70TAV S70BMM S70BAV S70OAV S70IST
            S70DAT CPU_UT TOT_UT NUMCPU S70SID FLAG ;
