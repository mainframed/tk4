*-------------------------------------------------------------------*
×   CPUT                                                            ×
×   ONLY LOOKING AT SMF TYPE 70 RECORDS. FOR MVS/XA SYSTEMS         ×
×   WITH OR WITHOUT PR/SM                                           ×
×   DATA MUST BE SORTED BEFORE BEING USED BY                        ×
×         SMF70SID,SMF70DAT,SMF70IST                                ×
×         (JUST USE THE SORT MEMBER)                                ×
×                                                                   ×
×   THIS PROGRAM IS THE FIRST STEP IN ATTEMPTING TO SUMMURIZE       ×
×   CPU UTILIZATION BY PHYSICAL PROCESSOR COMPLEX (E.G. ONE         ×
×   3090-400S). THE FOLLOWING ARE SOME THINGS TO REMEMBER.          ×
×                                                                   ×
×   A) A PHYSICAL PROCESSOR COMPLEX RUNNING IN BASIC MODE. IN THIS  ×
×      CASE IT WILL HAVE ONE OPERATING SYSTEM OR TWO OPERATING      ×
×      SYSTEMS IF THE MACHINE IS PHYSICALLY PARTITIONED.            ×
×     -THIS IS PRETTY STRAIGHT FORWARD AND ALL ONE HAS TO DO IS     ×
×      USE THE AVERAGE CPU UTILIZATION NUMBER PROVIDED BY RMF       ×
×      FOR A SINGLE OPERATING SYSTEM. IN THE CASE OF A PHYSICALLY   ×
×      PARTITIONED MACHINE THEN ONE HAS TO ADD THE TWO UTILIZATION  ×
×      NUMBERS FOR EACH OF THE OPERATING SYSTEMS AND DIVIDE BY 2.   ×
×                                                                   ×
×                                                                   ×
×   B) SIMILAR TO THE PHYSICALLY PARTITIONED MACHINE IS THE CASE    ×
×      OF THE LOGICALLY PARTITIONED PROCESSOR COMLEX (LPAR MODE)    ×
×      WHERE ALL THE PARTITIONS HAVE DEDICATED CPU'S. HERE WE HAVE  ×
×      TO ADD UP ALL THE CPU TIMES OF THE PARTITIONS AND DIVIDE BY  ×
×      THE NUMBER OF CPU'S. NOTE THAT THE CPU UTILIZATION (ACTUALLY ×
×      WAIT TIME) FOR DEDICATED CPU'S ARE ONLY CONTAINED IN THE     ×
×      RMF RECORDS OF THE SYSTEM WHICH PRODUCED THE RECORDS. THAT   ×
×      IS, YOU MUST READ RMF RECORDS FROM EACH SYSTEM TO PICK UP THE×
×      DEDICATED CPU TIMES.                                         ×
×                                                                   ×
×   C) NEXT, PROBABLY THE SIMPLEST, IS THE CASE OF LPAR MODE IN     ×
×      WHICH ALL THE CPU'S ARE SHARED. IN THIS CASE ONE CAN PICK    ×
×      UP THE CPU UTILIZATION OF ALL PARTITIONS FROM ONE SYSTEM'S   ×
×      RMF RECORDS.                                                 ×
×                                                                   ×
×   D) OF COURSE, THERE ARE OTHER SITUATIONS IN WHICH SOME          ×
×      LPARS HAVE DEDICATED CPU'S AND SOME HAVE SHARED. AND OF      ×
×      COURSE, DON'T FORGET A MACHINE THAT IS PHYSICALLY PARTITIONED×
×      AND ONE SIDE USES PR/SM IN VARIOUS CONFIGUARTIONS AND        ×
×      THE OTHER SIDE DOESN'T ...                                   ×
×                                                                   ×
× ----                       -----                            ----  ×
×   SINCE THE DATA IS SAVED BY SYSTEM ID (SMF ID) THEN THE ONLY     ×
×   THING THAT MAKES THESE PROGRAMS INSTALLATION DEPENDANT ARE      ×
×   1) THE LITERALS FOR CHECKING THE SYSTEM ID                      ×
×       -LOCATED AT THE END OF THE PROGRAM                          ×
×   2) THE MEMBER NAME THAT IS GIVEN TO THE SAS DATASET (ONE FOR    ×
×      EACH SYSTEM)                                                 ×
×       -LOCATED IN THE BEGINING (DATA STATEMENT)                   ×
×        AND AT THE END, FOLLOWING THE "OUTPUT" STATEMENTS          ×
×                                                                   ×
×   IN ADDITION, SINCE THE DATA IS NORMALLY STORED BY MONTH         ×
×   THEN THE MEMBER NAMES REFERENCED IN NUMBER 2 ABOVE              ×
×   IS CHANGED SLIGHTLY EACH MONTH TO REFLECT THE MONTH AND YEAR.   ×
× ----                       -----                            ----  ×
×                                                                   ×
×   THIS SAS FILE THEN CAN BE USED AS INPUT TO CREATE A GRAPH       ×
×   EITHER ON THE TERMINAL OR TO A PRINTER USING GDDM.              ×
×                                                                   ×
×   SMF70RTY...... RECORD TYPE.                                     ×
×   SMF70SID...... SID.                                             ×
×   SMF70IST...... TIME RMF MEASUREMENT INTERVAL STARTED IN FORM    ×
×                  0HHMMSSF WHERE F IS THE SIGN.                    ×
×   SMF70DAT...... DATE AS 00YYDDDF MEASUREMENT INTERVAL STARTED    ×
×                  (F IS THE SIGN).                                 ×
×   SMF70INT...... DURATION OF RMF MEASUREMENT INTERVAL IN FORM     ×
×                  MMSSTTTF WHERE F IS THE SIGN.                    ×
×   SMF70TMN...... TSO USERS MINIMUM OVER INTERVAL.                 ×
×   SMF70TMM...... TSO USERS MAXIMUM OVER INTERVAL.
×   SMF70TTT...... TSO USERS TOTAL VALUE OVER INTERVAL.             ×
×                                                                   ×
×                                                                   ×
×   THE VARIABLES THAT ARE SAVE ARE:                                ×
×                                                                   ×
×   S70IST........ INTERVAL START TIME                              ×
×   S70DAT........ INTERVAL DATE                                    ×
×   S70INT........ LENGTH OF (RMF) INTERVAL                         ×
×   S70MOD........ PROCESSOR MODEL (SMF70MOD)                       ×
×   S70VER........ VERSION (SMF70VER)                               ×
×   S70SER........ SERIAL NUMBER (SMF70SER)                         ×
×   S70SID........ SYSTEM'S SMF ID                                  ×
×   NUMLP......... NUMBER OF LOGICAL PROCESSORS                     ×
×   NUMPART....... NUMBER OF PARTITIONS                             ×
×   CPU_UT........ AVG. PERCENT BUSY (1 - WAIT_PER FOR NON PR/SM) OR×
×                  FROM SMF70PDT FOR PR/SM MACHINES                 ×
×   TOT_UT........ TOTAL UTILIZATION (ALL CPU'S IN PARTITION)       ×
×   NUMCPU........ NUMBER OF LOGICAL PROCESSORS ASSIGNED TO A       ×
×                  PARTITION. OR NUMBER OF DEDICATED CPU'S IN       ×
×                  THIS SYSTEM'S PARTITION.                         ×
×   MODE.......... MODE. BLANK=BASIC. D=LPAR WITH DEDICATED CPU'S   ×
×                        E=WAIT COMPLETION ENABLED (SHARED CPU'S).  ×
×                        P=PR/SM SHARED CPU'S.                      ×
×   FLAG.......... SOMETHING OCCURED IN THIS INTERVAL OUT OF THE    ×
×                  ORDINARY. DETAILED MESSAGE IS PRINTED.           ×
×                                                                   ×
×                                                                   ×
×   OUTPUT FILE NAME = SID...CONSTANT.YEAR...MONTH                  ×
×                       |       |      |       |                    ×
×                       |       |      |       |                    ×
×    E.G.   S1CP8811 = S1 ...  CP  ...88  ... 11                    ×
×                                                                   ×
×                                                                   ×
×   NOTE1: CHANGE SASDB.S1CP8811 TO S1CP8811 FOR TEMPORARY DATASET  ×
×                                                                   ×
×   NOTE2: MONTHLY USE. IF THE LAST MONTH STORED WAS SEP 1988       ×
×          AND YOU WANT TO SAVE OCT 1988 DATA THEN ENTER THE        ×
×          FOLLOWING CHANGE COMMANDS:                               ×
×          C CP8809 CP8810 ALL                                      ×
×                                                                   ×
×   UPDATES:                                                        ×
×    ADDED S70BMM TO THE DATA STATEMETS. THIS WILL SAVE MAXIMUM     ×
×    BATCH JOBS.                                                    ×
×                                                                   ×
×   UPDATES:                                                        ×
×     3/20/89 - ADDED NEW FIELD LABELED "MODE" TO INDICATED WHAT    ×
×      MODE THE MACHINE WAS OPERATING IN. P=PR/SM. BLANK FOR ALL    ×
×      OTHERS.                                                      ×
×     3/22/89 - ADDED "MISSOVER" TO INFILE STATEMENT TO KEEP SAS    ×
×      FROM LOOKING AHEAD WHEN IT CAN'T FIND ALL THE VARIABLES.     ×
×     3/27/89 - FIX TO HANDLE NO LPDS FOR A PARTITION. AND TO       ×
×      RECORD CORRECT NUMBER OF PHYSICAL CPU'S                      ×
×     4/25/89 - ADDED CODE TO HANDLE DEDICATED CPU'S UNDER PR/SM.   ×
×      CPU WAIT TIME IS ONLY RECORDED FOR THE SYSTEM THAT PRODUCED  ×
×      THE RMF RECORDS. NOT SURE (YET) ABOUT DEDICATED AND SHARED   ×
×      CPU'S.                                                       ×
×      ALSO ADDED A NEW "MODE" OF "D" TO INDICATED UNDER PR/SM      ×
×      BUT WITH DEDICATED CPU'S                                     ×
×     4/27/89 - CORRECTED CODE TO HANDLE SHARED CPU(S) WITH WAIT    ×
×      COMPLETION ENABLED. ADDED "MODE" OF "E" TO INDICATE SUCH.    ×
×--                                                                 ×
×    NOTE: FOR NOW WE ARE JUST USING THE 1ST FOUR BYTES OF SMF70LPM ×
×          (THE PARTITION NAME)                                     ×
*-------------------------------------------------------------------*
;
   MACRO INPUTIT
   DATA
 SASDB.P1CP8903 (KEEP=S70INT WAIT_PER S70MOD S70VER S70SER
                S70SID S70DAT S70IST
                NUMLP NUMPART TOT_UT CPU_UT NUMCPU  MODE FLAG )
 SASDB.P0CP8903 (KEEP=S70INT WAIT_PER S70MOD S70VER S70SER
                S70SID S70DAT S70IST
                NUMLP NUMPART TOT_UT CPU_UT NUMCPU  MODE FLAG )
 SASDB.S1CP8903 (KEEP=S70INT WAIT_PER S70MOD S70VER S70SER
                S70SID S70DAT S70IST
                NUMLP NUMPART TOT_UT CPU_UT NUMCPU  MODE FLAG )
        ;
   INFILE SMF LENGTH=L MISSOVER;
*  INFORMAT S70IST RMFDUR4. S70INT PDTIME4. ;
   INPUT @2 ID PIB1. @;
   IF ID = 70  THEN LINK X5;
   RETURN;
X5:
POINTER = 1;
M = -3;
INPUT @ POINTER
                SMF70FLG  PIB1.
             +9 SMF70SID  $CHAR4.
            +10 SMF70PRS  PIB4.
                SMF70PRL  PIB2.
                SMF70PRN  PIB2.
                SMF70CCS  PIB4.
                SMF70CCL  PIB2.
                SMF70CCN  PIB2.
                SMF70CPS  PIB4.
                SMF70CPL  PIB2.
                SMF70CPN  PIB2.
                SMF70ASS  PIB4.
                SMF70ASL  PIB2.
                SMF70ASN  PIB2.
                SMF70BCS  PIB4.
                SMF70BCL  PIB2.
                SMF70BCN  PIB2.
                SMF70BVS  PIB4.
                SMF70BVL  PIB2.
                SMF70BVN  PIB2.
                 @;
*  ***---------------RMF PRODUCT SECTION--------------***;
POINTER = SMF70PRS +M;
INPUT @ POINTER
           +10  SMF70IST  PD4.
                SMF70DAT  PD4.
                SMF70INT  PD4.
            +2  SMF70SAM  PIB4.
                 @;
*  ***---------------CPU CONTROL SECTION--------------***;
POINTER = SMF70CCS +M;
  INPUT @ POINTER
                SMF70MOD  PK2.
                SMF70VER  PK1.
                SMF70BNP  PIB1.
                SMF70INB  PIB1.
                   @;
*  ***---------------CPU DATA SECTION-----------------***;
POINTER = SMF70CPS +M;
  INPUT @ POINTER
                SMF70WAT  PIB8.
                SMF70CID  PIB2.
                SMF70CNF  PIB1.
                SMF70RV3  PIB1.
                SMF70SER  PK3.
                   @;
*  ***---------------ASID DATA AREA SECTION-----------***;
POINTER = SMF70ASS +M;
INPUT @ POINTER
          +128  SMF70OMN  PIB2.
                SMF70OMM  PIB2.
                SMF70OTT  PIB4.
          +104  SMF70BMN  PIB2.
                SMF70BMM  PIB2.
                SMF70BTT  PIB4.
          +104  SMF70TMN  PIB2.
                SMF70TMM  PIB2.
                SMF70TTT  PIB4.
                 @;
*  ***---------------PR/SM PARTITION DATA SECTION-----***;
POINTER = SMF70BCS + M;
  INPUT @ POINTER
                SMF70LPM  $CHAR4.
                LPM2HALF  $CHAR4.
                SMF70LPN  PIB1.
                SMF70PFG  PIB1.
                SMF70BDN  PIB2.
                SMF70BDS  PIB4.
                   @;
*  ***--LETS START DOING SOME CALCULATIONS--***;
***IF SMF70DAT NE 89030 THEN DELETE          /*<===TESTING ONLY==*/;
  S70IST = SMF70IST;
  S70DAT = SMF70DAT;
  S70INT = SMF70INT;
  S70SID = SMF70SID;
  S70MOD = SMF70MOD;
  S70VER = SMF70VER;
  S70SER = SMF70SER;
  S70BNP = SMF70BNP;
  S70CPN = SMF70CPN;
**IF SMF70SAM = 0 THEN S70TAV = 0;
   IF SMF70INT LT 0100000 THEN DELETE;
* ******************************************************************;
* ******************************************************************;
   IF SMF70INB = '1... ....'B THEN DO      /* PR/SM INDICATOR BITS*/;
      FLAG = '*';
      PUT 'SMF70INB INDICATES DIAGNOSE X''204'' FAILURE.'           ;
      PUT ' INTERVAL=' S70IST ' ON DATE=' S70DAT 'SYSTEM=' SMF70SID ;
      END;
   IF SMF70INB = '.1.. ....'B THEN DO;
      FLAG = '*';
      PUT 'SMF70INB INDICATES NO. OF PHYSICAL PROCESSORS HAS CHANGED.';
      PUT ' INTERVAL=' S70IST ' ON DATE=' S70DAT 'SYSTEM=' SMF70SID ;
      END;
   IF SMF70INB = '..1. ....'B THEN DO;
      FLAG = '*';
      PUT 'SMF70INB INDICATES DGLOBAL TIME SLICE VALUE HAS CHANGED.';
      PUT ' INTERVAL=' S70IST ' ON DATE=' S70DAT 'SYSTEM=' SMF70SID ;
      END;
* ******************************************************************;
* ******************************************************************;
  MIN = FLOOR(SMF70INT/100000)  /*PICK UP THE MINUTES ONLY MMSSTTT*/;
  SEC = FLOOR((SMF70INT - MIN*100000)/1000)                         ;
  INTSEC = (MIN*60) + SEC               /* NO. OF SECS IN INTERVAL*/;
* ******************************************************************;
* ******************************************************************;
* *************************BEG. OF CPU WAIT TIME ROUTINE************;
  IF SMF70FLG = '.... ...1'B THEN
      GO TO PRSM_UT                 /*BIT INDICATES PR/SM MACHINE */;
* **************ELSE USE WAIT TIME TO CALC CPU UTILIZATION**********;
  TOT_UT  = 0                       /*INITIALIZE TOTAL UTILIZATION*/;
  MODE    = '40'X                   /*INDICATE NON PR/SM MACHINE  */;
  WAIT    = 0;
  CPU_CTR = 1;
  POINTER = SMF70CPS +M             /*LOCATE SMF70WAT             */;
CPU_LOOP:
   IF SMF70CNF = '.... ..1.'B THEN DO  /*DID CONFIG CHANGE        */;
      FLAG = '*';
      PUT 'SMF70CNF INDICATES CPU RECONFIGED DURING INTERVAL=' S70IST
          'ON DATE=' S70DAT 'CPU=' CPU_CTR;
      END;
   WAIT = WAIT + SMF70WAT;
   IF SMF70CPN = CPU_CTR THEN
      GO TO CONT;
   CPU_CTR = CPU_CTR + 1            /*    WE HAVE ANOTHER CPU */ ;
   POINTER = POINTER + SMF70CPL     /* POINT TO ITS WAIT TIME */ ;
  INPUT @ POINTER
                SMF70WAT  PIB8.
                SMF70CID  PIB2.
                SMF70CNF  PIB1.
                SMF70RV3  PIB1.
                SMF70SER  PK3.
                   @;
   GO TO CPU_LOOP;
CONT:
 WAIT = WAIT/CPU_CTR ;
 WAITMICS = WAIT/4096       /* CONVERT WAIT TIME TO MICRO SECS */;
 WAITSEC  = WAITMICS/1000000        /*      CONVERT TO SECONDS */;
**                         END OF CPU WAIT TIME ROUTINE;
   IF INTSEC = 0 THEN WAIT_PER = 0;
   ELSE WAIT_PER = WAITSEC/INTSEC  /* PERCENTAGE OF WAIT TIME  */;
   WAIT_PER = WAIT_PER*100               /* MAKE IT AN INTERGER*/;
   CPU_UT   = 100 - WAIT_PER             /* AVG CPU UTILIZATION*/;
   CPU_UT   = ROUND(CPU_UT,.1)           /* AVG CPU UTILIZATION*/;
   TOT_UT   = CPU_UT * CPU_CTR       /*TOTL CPU UTL FOR PARTITN*/;
   TOT_UT   = ROUND(TOT_UT,.1)       /*TOTL CPU UTL FOR PARTITN*/;
   NUMCPU   = CPU_CTR              /* TOTAL CPU'S THIS  PARTITN*/;
   GO TO SAVEIT                    /* ALL DONE                 */;
* ******************************************************************;
* ******************************************************************;
* ********BEG. OF CPU UTILIZATION ROUTINE FOR PR/SM MACHINES********;
PRSM_UT:
    MODE     = 'P'                 /*INDICATE PR/SM MACHINE    */;
    CUR_PDS  = SMF70BCS + M        /*FIRST PARTITION DATA SECT.*/;
    PART_CTR = 0                   /*PARTITION COUNTER         */;
    TCPU_CTR = 0                   /*PROCESSOR COUNTER         */;
    TOT_UT   = 0                   /*TOTAL UTILIZATION         */;
PART_LP:
    PART_CTR = PART_CTR + 1        /*KEEP TRACK OF PARTITIONS  */;
   IF SMF70PFG = '1... ....'B THEN DO  /*HAS PARTITION CHANGED */;
      FLAG = '*';
      PUT 'SMF70PFG INDICATES PARTITION HAS CHANGED. INTERVAL=' S70IST
          'ON DATE=' S70DAT 'PARTITION=' SMF70LPN;
      END;
   IF SMF70PFG = '.1.. ....'B THEN DO  /*HAS PROCESSOR CHANGED */;
      FLAG = '*';
      PUT 'SMF70PFG INDICATES LOG. PROCESSOR HAS CHANGED. INTERVAL='
          S70IST 'ON DATE=' S70DAT 'PARTITION=' SMF70LPN;
      END;
    CP_UT   = 0                    /*PHYSICAL CPU UTILIZATION      */;
    CPU_CTR = 0             /*CPU NO. WITHIN A PARTICULAR PARTITION*/;
   IF SMF70BDN = 0 THEN GO TO NEXT_P /*BECAUSE NO. OF LOG. PROCESSORS*/;
**                                 FOR THIS PARTITION IS ZERO. ELSE,   ;
**                                 POINT TO LPDS FOR THIS PARTITION.***;
**  POINTER = OFFSET PLUS LENGTH TIMES NUM. OF SECTIONS TO SKIP     ***;
****POINTER = OFFSET PLUS LENGTH TIMES NUM. OF SECTIONS TO SKIP**;
    POINTER = SMF70BVS + M + (SMF70BDS*SMF70BVL);
*  ***---------------PR/SM LOGICAL PROCESSOR DATA SECTION--***;
  INPUT @ POINTER
                SMF70PDT  PIB8.
                SMF70VPA  PIB2.
                SMF70BPS  PIB2.
                SMF70VPF  PIB1.
                   @;
    NUMCPU = SMF70BDN       /*NUMBER OF LPDS FOR THIS PARTITION. THIS*/;
**                            VARIABLE USED TEMPORARILY TO CONTROL THE ;
**                            NUMBER OF TIMES TO LOOP. WILL BE RESET.  ;
* ******************************************************************;
*UT 'END OF PART_LP: ROUTINE AND WE HAVE THE FOLLOWING:  ';
*UT 'PART_CTR=' PART_CTR '  S70SID=' S70SID '   SMF70LPM=' SMF70LPM   ;
*UT 'TOT_UT=' TOT_UT 'CPU_CTR=' CPU_CTR;
*UT 'POINTER=' POINTER '  = ' SMF70BVS '+' M'+'SMF70BDS'*'SMF70BVL;
*UT 'LPDS=' SMF70PDT SMF70VPA SMF70BPS SMF70VPF ;
* ******************************************************************;
LPDS_LP1:
    CPU_CTR =  CPU_CTR + 1        /*     LOGICAL PROCESSOR NUMBER */;
    TCPU_CTR= TCPU_CTR + 1        /*TOTAL LOGICAL PROCESSORS      */;
**********                                            **************;
***IS PROCESSOR NOT DEDICATED AND IS WAIT COMPLETION DISABLED*******;
***NOTE: 65535 = HEX'FFFF'                                   *******;
**********                                            **************;
    IF SMF70BPS NE 65535   AND
       SMF70VPF EQ '0... ....'B THEN DO;
        TOT_UT = TOT_UT +
        ((SMF70PDT/1000000)/INTSEC)*100     /*TOTAL CPU UTIL */;
       END;
***                                                              ***;
***IS PROCESSOR DEDICATED AND DO WE STILL HAVE                   ***;
***CPU'S LEFT IN THE CPU DATA SECTION TO ANALYZE                 ***;
***IF NOT FORGET IT BECAUSE WE DID ALL THE DEDICATED CPU'S       ***;
***ALSO, WE ONLY UP ONE PARTITIONS DEDICATED CPU'S (THE ONE THAT ***;
***MATCHES THE SMF SID.                                          ***;
***NOTE: 65535 = HEX'FFFF'                                       ***;
***                                                              ***;
    IF SMF70BPS EQ 65535     AND
       S70SID   EQ SMF70LPM  AND
       CPU_CTR  LE S70CPN THEN DO;
* ******************************************************************;
*PUT 'DEDICATED CPU ROUTINE   AND WE HAVE THE FOLLOWING:  ';
*PUT 'DATE=' S70DAT '  TIME=' S70IST;
*PUT 'S70SID=' S70SID ' SMF70LPM=' SMF70LPM   ;
*PUT 'TOT_UT=' TOT_UT 'CPU_CTR=' CPU_CTR ' S70CPN=' S70CPN;
*PUT 'LPDS=' SMF70PDT SMF70VPA SMF70BPS SMF70VPF ;
* ******************************************************************;
       MODE     = 'D'           /*INDICATE PR/SM W/DEDICATED CPU  */;
       POINTHLD = POINTER;
       POINTER = SMF70CPS +M +((CPU_CTR - 1) * SMF70CPL);
       INPUT @ POINTER
                SMF70WAT  PIB8.
                SMF70CID  PIB2.
                SMF70CNF  PIB1.
                SMF70RV3  PIB1.
                SMF70SER  PK3.
                   @;
        WAITMICS = SMF70WAT/4096  /* CONVERT WAIT TIME TO MICRO SECS */;
        CP_WAIT = ((WAITMICS/1000000)/INTSEC)*100     /*THEN TO SECS*/;
        CP_UT   = 100 - CP_WAIT;
        TOT_UT = TOT_UT + CP_UT;
*PUT 'NEAR END OF CPU ROUTINE AND WE HAVE THE FOLLOWING:  ';
*PUT 'TOT_UT=' TOT_UT 'CPU_CTR=' CPU_CTR ' S70CPN=' S70CPN;
*PUT '*---   ';
        IF SMF70CNF = '.... ..1.'B THEN DO  /*DID CONFIG CHANGE   */;
        FLAG = '*';
        PUT 'SMF70CNF INDICATES CPU RECONFIGED DURING INTERVAL=' S70IST
            'ON DATE=' S70DAT 'CPU=' CPU_CTR;
          END;
        POINTER = POINTHLD;
        GO TO LPDS_C1;
       END;
***                                                          ***;
***IS PROCESSOR NOT DEDICATED AND IS WAIT COMPLETION ENABLED ***;
***NOTE: 65535 = HEX'FFFF'                                   ***;
***                                                          ***;
    IF SMF70BPS NE 65535 AND
       SMF70VPF EQ '1... ....'B THEN DO;
*PUT '===>I AM AT RT FOR PROC NOT DEDICATED AND WAIT COMP. ENABLED';
*PUT 'DATE=' S70DAT '  TIME=' S70IST;
*PUT 'S70SID=' S70SID ' SMF70LPM=' SMF70LPM   ;
*PUT '*---';
       MODE     = 'E'     /*INDICATE LPAR, SHARED CPU, WAIT COMP. ON*/;
       POINTHLD = POINTER;
       POINTER = SMF70CPS +M +((CPU_CTR - 1) * SMF70CPL);
       INPUT @ POINTER
                SMF70WAT  PIB8.
                SMF70CID  PIB2.
                SMF70CNF  PIB1.
                SMF70RV3  PIB1.
                SMF70SER  PK3.
                   @;
        WAITMICS = SMF70WAT/4096  /* CONVERT WAIT TIME TO MICRO SECS */;
        CP_UT = (((SMF70PDT-WAITMICS)/1000000)/INTSEC)*100;
        TOT_UT = TOT_UT + CP_UT;
        IF SMF70CNF = '.... ..1.'B THEN DO  /*DID CONFIG CHANGE   */;
        FLAG = '*';
        PUT 'SMF70CNF INDICATES CPU RECONFIGED DURING INTERVAL=' S70IST
            'ON DATE=' S70DAT 'CPU=' CPU_CTR;
          END;
        POINTER = POINTHLD;
        GO TO LPDS_C1;
       END;
LPDS_C1:
    IF NUMCPU = CPU_CTR THEN
       GO TO NEXT_P               /*DONE WITH THIS PART      */;
    POINTER = POINTER + SMF70BVL  /*POINT TO NEXT PROCESSOR  */;
*  ***---------------PR/SM LOGICAL PROCESSOR DATA SECTION--***;
  INPUT @ POINTER
                SMF70PDT  PIB8.
                SMF70VPA  PIB2.
                SMF70BPS  PIB2.
                SMF70VPF  PIB1.
                   @;
    GO TO LPDS_LP1           /*GO DO NEXT PROCESSOR          */;
NEXT_P:
*  ASSUMES WE ONLY ACCUMULATE CPU TIME FOR DEDICATED MODE DIFFERENTLY;
*  THAN IN SHARED MODE. IN SHARED WE CAN PICK UP CPU TIME FOR THE    ;
*  ENTIRE MACHINE. IN DEDICATED MODE WE ARE LIMITED TO THE SYSTEM    ;
*  WHOSE RMF RECORDS WE ARE ANALYZING. HAVE YET TO ACCOUNT FOR       ;
*  MACHINES THAT ARE BOTH DEDICATED AND SHARED. (WE WILL PICK UP     ;
*  EXTRA CPU TIME (FOR THE SHARED CPU'S) BUT THE CPU COUNTER WILL    ;
*  BE OFF.)                                                          ;
   IF PART_CTR GE SMF70BCN THEN DO;
    IF MODE = 'D' THEN NUMCPU = S70CPN  /*THE DEDICATED CPU'S      */;
       ELSE NUMCPU = S70BNP   /*OTHERWISE ALL THE CPU'S UNDER PR/SM*/;
    CPU_UT = TOT_UT/NUMCPU          /*  AVERAGE CPU UTL FOR MACHINE*/;
    CPU_UT   = ROUND(CPU_UT,.1)     /*  ROUND IT                   */;
    TOT_UT   = ROUND(TOT_UT,.1)     /*  TOTAL CPU UTIL FOR MACHINE */;
    NUMLP    = TCPU_CTR             /*  TOTAL NO. OF LOGICAL CPU'S */;
    NUMPART  = PART_CTR             /*  NUMBER OF PART. FOR MACHINE*/;
    GO TO SAVEIT;
       END;
    CUR_PDS = CUR_PDS + SMF70BCL /*SAVE NEXT PARTITION D.S.  */;
    POINTER = CUR_PDS            /*POINT TO NEXT PART. D.S.  */;
*  ***---------------PR/SM PARTITION DATA SECTION-----***;
  INPUT @ POINTER
                SMF70LPM  $CHAR4.
                LPM2HALF  $CHAR4.
                SMF70LPN  PIB1.
                SMF70PFG  PIB1.
                SMF70BDN  PIB2.
                SMF70BDS  PIB4.
                   @;
    GO TO PART_LP            /*LETS LOOK AT THIS PARTITION   */;
SAVEIT:
**                                                     ;
**  OUTPUT DATA FOR EACH SYSTEM THAT YOU WANT TO SAVE.         ;
**                                                             ;
**               SMF-ID                   P1CP8811             ;
**                 ×                      P1.........SYSTEM    ;
**                 ×                        CP.......CONSTANT  ;
**                 ×                          88.....YEAR      ;
**                 ×                            11...MONTH     ;
**                 V                                           ;
   IF SMF70SID = 'P1S2' THEN OUTPUT SASDB.P1CP8903 ;
   IF SMF70SID = 'P0S3' THEN OUTPUT SASDB.P0CP8903 ;
   IF SMF70SID = 'S1S1' THEN OUTPUT SASDB.S1CP8903 ;
RETURN;
   %
   INPUTIT;
   PROC PRINT DATA=SASDB.P1CP8903 ;
       VAR S70INT WAIT_PER S70MOD S70VER S70SER
           S70SID S70DAT S70IST
           NUMLP NUMPART TOT_UT CPU_UT NUMCPU MODE FLAG ;
   PROC PRINT DATA=SASDB.P0CP8903 ;
       VAR S70INT WAIT_PER S70MOD S70VER S70SER
           S70SID S70DAT S70IST
           NUMLP NUMPART TOT_UT CPU_UT NUMCPU MODE FLAG ;
   PROC PRINT DATA=SASDB.S1CP8903 ;
       VAR S70INT WAIT_PER S70MOD S70VER S70SER
           S70SID S70DAT S70IST
           NUMLP NUMPART TOT_UT CPU_UT NUMCPU MODE FLAG ;
