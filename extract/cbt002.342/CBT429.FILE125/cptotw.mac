*-------------------------------------------------------------------*
×   CPTOTW - SIMILAR TO CPTOT EXCEPT DATA IS FOR ONE WEEK.          ×
×                                                                   ×
×   THIS PROGRAM READS INPUT FROM 2 SYSTEMS. (THE INPUT IS CREATED  ×
×   BY "CPUT") IF MACHINES ARE = AND THIS IS NOT PR/SM THEN ADD     ×
×   THE 2 UTILIZATIONS TOGETHER AND DIVIDE BY THE APPROPRIATE       ×
×   NUMBER.                                                         ×
×   IF THIS IS PR/SM AND THE PARTITIONS ARE DEDICATED THEN DO THE   ×
×   SAME THING. HOWEVER, IF THE LPARS HAVE SHARED CPU'S THEN        ×
×   USE THE INFORMATION FROM ONE SYSTEM ONLY SINCE ALL THE INFO     ×
×   IS THERE.                                                       ×
×   .                                                               ×
×   IF PHYSICALLY PARTITIONED AND BOTH SIDES ARE NOT UP, THIS       ×
×   PROGRAM WILL SKIP RECORDS BECAUSE IT IS LOOKING FOR A MATCH.    ×
×                                                                   ×
×   THE VARIABLES THAT ARE SAVED ARE:                               ×
×                                                                   ×
×   S70INT........ LENGTH OF (RMF) INTERVAL                         ×
×   WAIT_PER...... PER OF WAIT TIME (NON PR/SM AND TIME SLICING)    ×
×   S70MOD........ CPU MODEL NUMBER (E.G. 3090)                     ×
×   S70VER........ CPU VERSION NUMBER (E.G. 41)                     ×
×   S70SER........ CPU SERIAL NUMBER                                ×
×   S70SID........ SYSTEM'S SMF ID -THE SYSTEM THAT PRODUCED THE    ×
×                  RMF RECORDS.                                     ×
×   S70DAT........ INTERVAL DATE                                    ×
×   S70IST........ INTERVAL START TIME                              ×
×   NUMLP......... NUMBER OF LOGICAL PROCESSORS (PR/SM)             ×
×   NUMPART....... NUMBER OF PARTITIONS RUNNING UNDER PR/SM         ×
×   TOT_UT........ TOTAL UTILIZATION (ALL CPU'S IN PARTITION)       ×
×   CPU_UT........ AVG. PERCENT BUSY (1 - WAIT_PER FOR NON PR/SM) OR×
×                  FROM SMF70PDT FOR PR/SM MACHINES - CALCULATED    ×
×                  BY: (TOT_UT/NUM_CP)  <===CHECK THIS.             ×
×   NUMCPU........ NUMBER OF LOGICAL PROCESSORS ASSIGNED TO A       ×
×                  PARTITION OR IS THE NUMBER AVAILABLE <=====???   ×
×   MODE.......... BLANK = BASIC MODE. "D" = LPAR HAS DEDICATED     ×
×                  CPU'S. "E" = LPAR'S HAVE SHARED CPU'S WITH       ×
×                  WAIT COMPLETION ENABLED. "P" = LPAR'S HAVE ALL   ×
×                  SHARED CPU'S.                                    ×
×   FLAG.......... INDICATES DATA MIGHT NOT BE COMPLETELY CORRECT   ×
×                  FOR THIS PARTICULAR RMF INTERVAL.                ×
×                                                                   ×
×   OUTPUT FILE NAME = TOTAL UTILIZATION                            ×
×                      FOR MACHINE #1                               ×
×                       |                                           ×
×                       |             WEEK...WEEK NUMBER            ×
×                       |              |       |                    ×
×                       |              |       |                    ×
×    E.G.   UTM18811 = UTM1...........WK  ... 0X                    ×
×                                                                   ×
×                                                                   ×
×   NOTE1: CHANGE SASDB.UTM1WK0X TO TEST0 FOR TEMPORARY DATASET     ×
×                                                                   ×
×   NOTE2: MONTHLY USE. IF THE LAST MONTH STORED WAS SEP 1988       ×
×          AND YOU WANT TO SAVE OCT 1988 DATA THEN ENTER THE        ×
×          FOLLOWING CHANGE COMMANDS:                               ×
×          C UTM18809 UTM18810 ALL                                  ×
×                                                                   ×
×   UPDATES:                                                        ×
*-------------------------------------------------------------------*
;
   DATA
 SASDB.UTM1WK04 (KEEP=S70INT S70MOD S70VER S70SER
                S70SID S70DAT S70IST
                TOT_UT CPU_UT NUMCPU  MODE FLAG )
        ;
  REC0SW = 'N'                     /*CLEAR RECORD WAITING SWITCH     */;
READP1:
   SET SASDB.P1CPWK04;
   IF S70IST LT 090000
      THEN GO TO READP1            /*THROW OUT ANYTHING BEFORE 9:00  */;
   IF S70INT LT 0500000
      THEN GO TO READP1            /*INTERVAL IS TOO SMALL           */;
  REC1SW = 'N'                     /*CLEAR RECORD WAITING SWITCH     */;
  IF MODE = 'P' OR
     MODE = 'E' THEN GO TO PR_SM   /*THIS IS A PR/SM MACHINE         */;
* ***                                                                  ;
* ***OTHERWISE WE HAVE PR/SM WITH DEDICATED CPU'S OR BASIC MODE.       ;
* ***IN THIS CASE WE WILL COMBINE THE CPU UTILIZATIONS FROM 2          ;
* ***OPERATING SYSTEMS.                                                ;
* ***                                                                  ;
   S70INT1 = S70INT;
   S70MOD1 = S70MOD;
   S70VER1 = S70VER;
   S70SER1 = S70SER;
   S70SID1 = S70SID;
   S70DAT1 = S70DAT;
   S70IST1 = S70IST;
   TOT_UT1 = TOT_UT;
   CPU_UT1 = CPU_UT;
   NUMCPU1 = NUMCPU;
   MODE1   = MODE;
   FLAG1   = FLAG;
   ISTHH1  = FLOOR(S70IST/10000)   /*HOUR THAT INTERVAL STARTED      */;
   ISTHM1  = FLOOR(S70IST1/100)    /*HH MM THAT INTERVAL STARTED     */;
   NXIST1  = S70IST+(S70INT1/1000) /*TIME NEXT INTERVAL SHOULD START */;
  IF REC0SW = 'Y' THEN GO TO EREADP0 /*ALREADY HAVE A REC, SKIP READ */;
READP0:
   SET SASDB.P0CPWK04;
  IF S70IST LT 090000
      THEN GO TO READP0            /*THROW OUT ANYTHING BEFORE 9:00  */;
  IF S70INT LT 0500000
      THEN GO TO READP0            /*INTERVAL IS TOO SMALL           */;
  REC0SW = 'N'                     /*CLEAR RECORD WAITING SWITCH     */;
   S70INT0 = S70INT;
   S70MOD0 = S70MOD;
   S70VER0 = S70VER;
   S70SER0 = S70SER;
   S70SID0 = S70SID;
   S70DAT0 = S70DAT;
   S70IST0 = S70IST;
   TOT_UT0 = TOT_UT;
   CPU_UT0 = CPU_UT;
   NUMCPU0 = NUMCPU;
   MODE0   = MODE;
   FLAG0   = FLAG;
   ISTHH0  = FLOOR(S70IST0/10000)  /*HOUR  THAT INTERVAL STARTED     */;
   ISTHM0  = FLOOR(S70IST0/100)    /*HH MM THAT INTERVAL STARTED     */;
   NXIST0  = S70IST0+(S70INT0/1000)  /*START OF NEXT INTERVAL        */;
EREADP0:
  IF S70DAT0 LT S70DAT1 THEN
     GO TO READP0                  /*NON PR/SM-WE WILL JUST SYNCH    */;
  IF S70DAT0 GT S70DAT1 THEN DO;
     PUT 'INPUT FOR P0 SOMEHOW GOT AHEAD OF P1.';
     PUT 'FOR P0 DATE=' S70DAT0 'TIME=' S70IST0 ;
     PUT 'FOR P1 DATE=' S70DAT1 'TIME=' S70IST1 ;
     PUT 'WILL GO TRY TO CATCH UP BY READING P1.';
     REC0SW = 'Y'                  /*HOLD THIS SYSTEMS RECORD        */;
     GO TO READP1;
     END;
***********************************************************************;
***** DATES ARE NOW EQUAL.  HOWEVER, WE DO NOT ACCOUNT FOR IST'S THAT  ;
***** ARE CLOSE BUT START MORE THAN A MINUTE APART.                    ;
*                                                             *********;
  IF ISTHM0 NE ISTHM1 THEN GO TO ISTNEQ ;
***********************************************************************;
***** NOW ALL WE HAVE IS INTERVAL START TIMES ARE EQUAL                ;
***********************************************************************;
  INTDIFF = ABS(S70INT0 - S70INT1)/100000 /*DIFF IN MINUTES          */;
  INTDIFF = FLOOR(INTDIFF)                /*INTEGER ONLY             */;
  IF ISTHM0 = ISTHM1 AND
     INTDIFF LT 4 THEN             /*IS DURATIONS WITHIN 4 MINUTES   */
     GO TO INTEQ                   /*YES, ADD EM UP AND WRITE EM OUT */;
     GO TO STEQ                    /*INT DURATION DIFF IS GT 4 MINS  */;
OTHERT:
   PUT 'AT OTHERT SHOULD NOT BE HERE';
     PUT 'FOR P0 DATE=' S70DAT0 'TIME=' S70IST0 ;
     PUT 'FOR P1 DATE=' S70DAT1 'TIME=' S70IST1 ;
   RETURN;
INTEQ:
   TOT_UT  = TOT_UT0 + TOT_UT1     /*SIDE 1 + SIDE 2                 */;
   NUMCPU  = NUMCPU0 + NUMCPU1     /*TOTAL ALL CPU'S                 */;
   CPU_UT  = TOT_UT/NUMCPU         /*UTILIZATION OF ALL PHYSICAL CP'S*/;
   S70INT  = S70INT1;
   S70MOD  = S70MOD1;
   S70VER  = S70VER1;
   S70SER  = S70SER1;
   S70SID  = S70SID1;
   S70DAT  = S70DAT1;
   S70IST  = S70IST1;
   MODE    = MODE1;
   FLAG    = FLAG1;
  OUTPUT SASDB.UTM1WK04            /*WRITE INFORMATION OUT           */;
  RETURN;
PR_SM:
  OUTPUT SASDB.UTM1WK04            /*WRITE INFORMATION OUT           */;
  RETURN;
STEQ:
 PUT 'AT STEQ:  INTDIFF=' INTDIFF;
 PUT 'P0 DATE=' S70DAT0 'TIME=' S70IST0 'DUR=' S70INT0;
 PUT 'P1 DATE=' S70DAT1 'TIME=' S70IST1 'DUR=' S70INT1;
   RETURN;
ISTNEQ:
 PUT 'AT ISTNEQ:  INTDIFF=' INTDIFF;
 PUT 'P0 DATE=' S70DAT0 'TIME=' S70IST0 'DUR=' S70INT0;
 PUT 'P1 DATE=' S70DAT1 'TIME=' S70IST1 'DUR=' S70INT1;
  IF ISTHM0 LT ISTHM1 THEN DO;
     REC1SW = 'Y'                  /*HOLD THIS RECORD AND            */;
     GO TO READP0                  /*GO TRY AND CATCH UP.            */;
     END                           /*OTHERWISE*/;
     REC0SW = 'Y'                  /*HOLD THIS RECORD AND            */;
     GO TO READP1                  /*GO TRY AND CATCH UP.            */;
RETURN;
   PROC PRINT DATA=SASDB.UTM1WK04 ;
