***********************************************************************
*                                                                     *
*             MODULE NAME = IEFACTRT                                  *
*                                                                     *
*             FUNCTION =                                              *
*                PUT MESSAGES VIA IEFYS ON SYSTEM MESSAGE DATA        *
*                SET.                                                 *
*                                                                     *
*                OPERATION =                                          *
*                   FOR JOB STEP TERMINATION PUT STATISTICS OF STEP.  *
*                   FOR JOB TERMINATION PUT OUT JOB END MESSAGE.      *
*                                                                     *
*              NOTES =                                                *
*                 DEPENDENCIES = CHARACTER SET IS EBCDIC.             *
*                                                                     *
*             MODULE TYPE = PROCEDURE                                 *
*                                                                     *
*                PROCESSOR = ASM                                      *
*                                                                     *
*                ATTRIBUTES = KEY 0, REENTRANT,                       *
*                   SUPERVISOR STATE, ENABLED, NO LOCKS HELD          *
*                                                                     *
*             ENTRY POINTS = IEFACTRT (ONLY ENTRY POINT)              *
*                                                                     *
*             INPUT = REG1 POINTS TO LIST OF FULLWORD ADDRESSES       *
*                     AS FOLLOWS.                                     *
*                 1.  PTR TO COMMON EXIT PARAMETER AREA               *
*                 2.  PTR TO STEPNAME FIELD                           *
*                 3.  PTR TO PROGRAMMER NAME FIELD                    *
*                 4.  PTR TO JOB CPU TIME FIELD                       *
*                 5.  PTR TO JOB ACCOUNTING FIELDS                    *
*                 6.  PTR TO STEP CPU TIME FIELD                      *
*                 7.  PTR TO STEP ACCOUNTING FIELDS                   *
*                 8.  PTR TO CANCEL FLAG & STEP NUMBER                *
*                 9.  PTR TO CONDITION CODE FIELD                     *
*                10.  PTR TO SMF RECORD TO BE WRITTEN                 *
*                                                                     *
*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *
*                OUTPUT = NONE                                        *
*                RETURN CODE = ZERO                                   *
*                                                                     *
*             EXIT - ERROR = NONE                                     *
*                OUTPUT = NONE                                        *
*                RETURN CODE = ZERO                                   *
*                                                                     *
*             EXTERNAL REFERENCES =                                   *
*                ROUTINES = NONE                                      *
*                DATA AREAS = NONE                                    *
*                CONTROL BLOCKS = NONE                                *
*                                                                     *
*             TABLES = NONE                                           *
*                                                                     *
*             MACROS = SAVE, WTO, RETURN, GETMAIN, FREEMAIN,          *
*                      SETRP, IFASMFR, IEFJMR, IHASDWA, TIME          *
*                                                                     *
*             MESSAGES =                                              *
*                STEP TERMINATION LINE AND JOB TERMINATION LINE.      *
*                                                                     *
*             ABEND CODES:                                            *
*                11 = RACLIST ERROR FOR APPL CLASES                   *
*                12 = RACLIST ERROR FOR APPL CLASES DELETE            *
*                21 = RACLIST ERROR FOR APPL CLASS_                   *
*                22 = RACLIST ERROR FOR APPL CLASS_ DELETE            *
*                41 = SMF RECORD WITHOUT ID SECTION                   *
*                42 = SMF RECORD WITHOUT COMPLETION SECTION           *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
*
* CONSTANT ADDRESS EQUATES
*
$MAXDA   EQU    253         MAX NUMBER OF SPOOL VOLUMES
OURTCB   EQU    X'04'       OFFSET INTO TCB LIST OF OUR TCB ADDRESS
BYTE06   EQU    X'06'       BYTE CONSTANT, VALUE X'06'
*
* REGISTER EQUATES
*
R0  EQU  0 WORK
R1  EQU  1 WORK / PARM
R2  EQU  2 WORK
R3  EQU  3 WORK
R4  EQU  4 SECTION PTR
R5  EQU  5 WORK
R6  EQU  6 OUTPUT LINE
R7  EQU  7 COMMON AREA
R8  EQU  8 WSRCC JCT
R9  EQU  9 SMF RECORD
R10 EQU 10 BASE REG2
R11 EQU 11 CONSTANTS
R12 EQU 12 BASE REG1
R13 EQU 13 SAVE AREA
R14 EQU 14 LINKAGE
R15 EQU 15 LINKAGE
         EJECT
IEFACTRT CSECT                    SMF TERMINATION EXIT
         SAVE  (14,12),,IEFACTRT_DELUXE_CHECK_&SYSDATE_&SYSTIME
*                                 SAVE THE REGISTERS
         LR    R12,R15            ESTABLISH ADDRESSABILITY
         USING IEFACTRT,R12       TELL THE ASSEMBLER
         LA    R10,4095(R12)      ESTABLISH ADDRESSABILITY
         USING IEFACTRT+4095,R10  TELL THE ASSEMBLER
*
*        DETERMINE REASON FOR ENTRY
*
         C     R0,=F'20'
         BNE   EXITO
*
*        DETERMINE WHETHER TSO USER OR STARTED TASK
*
         L     R9,36(R1)          LOAD ADDRESS OF SMF RECORD
         USING SMFRCD30,R9        ADDRESS THE TYPE 30 RECORD
         CLC   SMF30WID,JES2      TEST FOR TSO USER OR STARTED TASK
         BNE   EXITO              DISCONTINUE EXECUTION
         LR    R3,R1              SAVE REGISTER 1 (POINTER TO PARMS)
         L     R7,0(R3)
         USING JMR,R7
         CLC   JMRUCOM,=F'0'      ADDRESS ALREADY IN COM AREA?
         BNE   INIT               YES, USE IT
         GETMAIN R,LV=LTOTGM,SP=241
         ST    R1,JMRUCOM         STORE ADDRESS OF GTMN'D AREA
         ST    R13,4(R1)          STOR ADDRESS OF OLD SAVE IN NEW
         ST    R1,8(R13)          STOR ADDRESS OF NEW SAVE IN OLD
         LR    R13,R1
         USING DATA,R13
         XC    GMTAPES,GMTAPES    INIT TAPE COUNT
         MVC   BADEND,=C'N'       NO BAD RETURN CODES
         MVC   EXCPS,SPACES       INIT EXCP COUNT ERROR INDICATOR
         L     R11,4(R13)
         L     R11,68(R11)
         ST    R11,R12FORYS
         B     INIT2
INIT     LR    R1,R13
         L     R13,JMRUCOM
         ST    R1,SAVEBK
         ST    R13,SAVEFW
INIT2    MVC   PARMS(LPARMS),0(R3)
         ST    R7,JMRADDR
*
*        DETERMINE RECORD 30 SUBTYPE
*
         CLC   SMF30STP,R30JOB     JOB TERMINATION?
         BE    JOBTERM
         CLC   SMF30STP,R30STEP    STEP TERMINATION?
         BE    STEPTERM
         B     EXITR
         EJECT
***********************************************************************
*
*        HANDLE STEP TERMINATION CONDITIONS
*
***********************************************************************
STEPTERM MVC   WTO1TXT,STEPMSG1    MOVE ' ' MSG OVLY TO MSG BUFFER
         BAL   R14,MSGRTN
         MVC   WTO1TXT,STEPMSG2    MOVE '*' MSG OVLY TO MSG BUFFER
         BAL   R14,MSGRTN
         CLC   SMF30ION,=H'0'      IS THERE AN IDENTIFICATION SECTION?
         BH    CHKID               IF YES, LOOK AT IT; OTHERWISE
         ABEND 41,DUMP
CHKID    LR    R4,R9               POINT REGISTER TO SMF RECORD
         A     R4,SMF30IOF         AND THEN TO IDENTIFICATION SECTION
         USING SMF30ID,R4
         MVC   WTO1TXT,IDMSG       MOVE THE MSG OVLY TO MSG BUFFER
         LA    R5,WTO1TXT
         USING IDMSGS,R5
         MVC   ID1,SMF30STM        GET STEP NAME FROM SMF RECORD
         MVC   ID2,SMF30JBN        GET JOB NAME FROM SMF RECORD
         MVC   ID3,SMF30UIF        GET USERID FROM SMF RECORD
         MVC   ID4,SMF30CLS        GET CURRENT CLASS FROM SMF RECORD
         BAL   R14,MSGRTN
         MVC   JOBCLASS,SMF30CLS   SAVE CURRENT CLASS FROM SMF RECORD
         MVC   BSTCLAS,SMF30CLS    INITIALIZE CLASS RECOMMENDATION
*
* GET RETURN CODE INDICATORS
*
         CLC   SMF30TON,=H'0'      IS THERE A COMPLETION SECTION?
         BH    CODES               IF NOT, ABEND
         ABEND 42,DUMP
CODES    LR    R4,R9               POINT REGISTER TO SMF RECORD
         A     R4,SMF30TOF         AND THEN TO COMPLETION SECTION
         USING SMF30CMP,R4
         TM    SMF30STI,X'008'     IF BIT8 IS SET, IT INDICATES
         BNO   CODES010            INCORRECT EXCP COUNT FOR STEP
         MVC   EXCPS,=C'********'  WILL DISPLAY '***' INSTEAD OF COUNT
CODES010 CLC   BADEND,=C'Y'        BAD RETURN CODE FROM PREVIOUS STEP?
         BE    ACCT                DON'T BOTHER CHECKING FOR THIS STEP
         TM    SMF30STI,X'02'      ABEND FOR STEP? (BIT6 SET?)
         BNO   CODES050            IF NOT, CHECK NORMAL COMPLETION
         TM    SMF30SCC,X'80'      USER ABEND? CONSIDER RECOMMENDATION
         BO    ACCT                OTHERWISE, IT'S A SYSTEM ABEND
         CLC   SMF30SCC,=X'0722'   TOO MUCH SYSOUT?
         BNE   CODES020            IF NOT, CHECK FOR TIME-OUT ERROR
         MVC   BADEND,=C'Y'        IF YES, NO RECOMMENDATION
         B     ACCT
CODES020 CLC   SMF30SCC,=X'0522'   TIME-OUT ERROR?
         BNE   CODES030            IF NOT, CHECK FOR TIME-OUT ERROR
         MVC   BADEND,=C'Y'        IF YES, NO RECOMMENDATION
         B     ACCT
CODES030 CLC   SMF30SCC,=X'0322'   TIME-OUT ERROR?
         BNE   CODES040            IF NOT, CHECK FOR CANCELATION
         MVC   BADEND,=C'Y'        IF YES, NO RECOMMENDATION
         B     ACCT
CODES040 CLC   SMF30SCC,=X'0222'   CANCELED BY OPERATOR?
         BNE   ACCT                IF NOT, CONSIDER RECOMMENDATION
         MVC   BADEND,=C'Y'        IF YES, NO RECOMMENDATION
         B     ACCT
CODES050 TM    SMF30STI,X'01'      IF BIT7=0, RC=0; MAKE RECOMMENDATION
         BNO   ACCT                IF BIT7=1, STEP FLUSHED; NO RECC.
         MVC   BADEND,=C'Y'        IF SET, NO RECOMMENDATION
*
* GET STEP TIME UNDER TCB FOR LATER WORKING SET SIZE CALCULATIONS
*
ACCT     CLC   SMF30CON,=H'0'      IS THERE AN ACCOUNTING SECTION?
         BE    STG                 IF NOT, SKIP THIS PART
         LR    R4,R9               POINT REGISTER TO SMF RECORD
         A     R4,SMF30COF         AND THEN TO PROCESSOR ACCTNG SECTION
         USING SMF30CAS,R4
         MVC   STCPUTCB,SMF30CPT   STORE CPU TIME
         MVC   WTO1TXT,CPUMSG      MOVE THE MSG OVLY TO MSG BUFFER
         LA    R5,WTO1TXT
         USING CPUMSGS,R5
         L     R1,SMF30CPT         GET JOB TCB TIME
         BAL   R14,PCLOCK          CALL CLOCK CONVERTER
         MVC   CPU1,TIMEFLD+1
         L     R1,SMF30CPS         GET JOB SRB TIME
         BAL   R14,PCLOCK          CALL CLOCK CONVERTER
         MVC   CPU2,TIMEFLD+1
         L     R1,SMF30CPT         GET JOB TCB TIME
         A     R1,SMF30CPS         ADD JOB SRB TIME
         BAL   R14,PCLOCK          CALL CLOCK CONVERTER
         MVC   CPU3,TIMEFLD+1
         MVC   JOBMIN,TIMEFLD      STORE MINUTES
         OC    JOBMIN,ZEROS        INCLUDE LEADING ZEROS
         MVC   JOBSEC,TIMEFLD+5    STORE SECONDS
         OC    JOBSEC,ZEROS        INCLUDE LEADING ZEROS
         BAL   R14,MSGRTN
*
* GET REGION REQUESTED, STG USED BELOW 16M AND STG USED ABOVE 16M
*
STG      CLC   SMF30RON,=H'0'      IS THERE A STORAGE SECTION?
         BE    PAGES               IF NOT, SKIP THIS PART
         LR    R4,R9               POINT REGISTER TO SMF RECORD
         A     R4,SMF30ROF         AND THEN TO STORAGE SECTION
         USING SMF30SAP,R4
         MVC   WTO1TXT,STGMSG      MOVE THE MSG OVLY TO MSG BUFFER
         LA    R5,WTO1TXT
         USING STGMSGS,R5
         SLR   R2,R2               CLEAR REGISTER
         L     R2,SMF30RGN         GET REQUESTED REGION SIZE
         LA    R3,STG1
         BAL   R14,PCOUNT
         L     R2,SMF30URB         GET STORAGE (BELOW 16 MEGABYTES)
         SRL   R2,10               CONVERT FROM BYTES TO 'K' BYTES
         LA    R3,STG2
         BAL   R14,PCOUNT
         L     R2,SMF30EUR         GET STORAGE (BELOW 16 MEGABYTES)
         SRL   R2,10               CONVERT FROM BYTES TO 'K' BYTES
         LA    R3,STG3
         BAL   R14,PCOUNT
         BAL   R14,MSGRTN
*
* PAGE-IN AND PAGE-OUT STATISTICS
*
PAGES    CLC   SMF30RON,=H'0'      IS THERE A STORAGE SECTION?
         BE    TAPES               IF NOT, SKIP THIS PART
         LR    R4,R9               POINT REGISTER TO SMF RECORD
         A     R4,SMF30ROF         AND THEN TO STORAGE SECTION
         USING SMF30SAP,R4
         MVC   WTO1TXT,PAGMSG      MOVE THE MSG OVLY TO MSG BUFFER
         LA    R5,WTO1TXT
         USING PAGMSGS,R5
*
* GET PAGE COUNTS, CONVERT TO PRINT CHARACTERS, PUT INTO MESSAGE
*
         L     R2,SMF30PSI         GET STEP PAGE-INS
         LA    R3,PAG1
         BAL   R14,PCOUNT
         L     R2,SMF30PSO         GET STEP PAGE-OUTS
         LA    R3,PAG2
         BAL   R14,PCOUNT
         L     R2,SMF30VPI         GET STEP VIO PAGE-INS
         LA    R3,PAG3
         BAL   R14,PCOUNT
         L     R2,SMF30VPO         GET STEP VIO PAGE-OUTS
         LA    R3,PAG4
         BAL   R14,PCOUNT
*
* CALCULATE WORKING SET SIZE, CONVERT TO PRINT CHARS, PUT INTO MSG
*
         L     R2,STCPUTCB
         LTR   R2,R2               CPU TIME GOTTEN?
         BNZ   DIVI
         MVC   WSS,=C'********'
         B     PRT
DIVI     LM    R2,R3,SMF30PSC      COUNT OF CPU PAGE SECONDS
         D     R2,STCPUTCB         DIVIDE BY TCB TIME
         LR    R2,R3
         LA    R3,WSS
         BAL   R14,PCOUNT
*
* DISPLAY PAGE COUNTS, WORKING SET SIZE
*
PRT      BAL   R14,MSGRTN
*
* ADDRESS SPACE SWAP SEQUENCES
*
         MVC   WTO1TXT,SWPMSG      MOVE THE MSG OVLY TO MSG BUFFER
         LA    R5,WTO1TXT
         USING SWPMSGS,R5
         L     R2,SMF30NSW         GET SWAP SEQUENCE COUNT
         LA    R3,SWP1
         BAL   R14,PCOUNT
         BAL   R14,MSGRTN
*
* CHECK FOR DEVICES ALLOCATED IN THIS STEP, EXCP COUNT
*
TAPES    SLR   R2,R2
         LH    R2,SMF30EON         NUMBER OF EXCP SECTIONS
         LTR   R2,R2               IS THERE AN EXCP SECTION?
         BZ    EXIT                IF NOT, THEN SKIP THIS PART
         XC    GMDASD,GMDASD       INIT DASD COUNT FOR STEP
         LR    R4,R9               POINT TO SMF RECORD
         A     R4,SMF30EOF         AND THEN TO EXCP SECTION
         USING SMF30EXP,R4
         SLR   R5,R5               CLEAR REGISTER FOR TAPE COUNT
         SLR   R6,R6               CLEAR REGISTER FOR DASD COUNT
         SLR   R7,R7               CLEAR REGISTER FOR TOTAL EXCP COUNT
         ST    R7,DASDEXCP         CLEAR DASD TOTAL EXCP COUNT
         ST    R7,TAPEEXCP         CLEAR TAPE TOTAL EXCP COUNT
COUNTAP  CLC   SMF30DEV,=X'80'     IS THIS A TAPE ALLOCATION?
         BNE   COUNTDSK            NO, SEE IF IT'S DASD
         LA    R5,1(R5)            YES, COUNT TAPE
         L     R7,TAPEEXCP         YES, GET PREVIOUS EXCP COUNT
         A     R7,SMF30BLK         ADD EXCP'S FROM THIS SECTION
         ST    R7,TAPEEXCP         SAVE EXCP COUNT FOR FUTURE
         B     NXTEXCP
COUNTDSK CLC   SMF30DEV,=X'20'     IS THIS A DASD ALLOCATION?
         BNE   NXTEXCP             NO, CHECK NEXT EXCP SECTION
         LA    R6,1(R6)            YES, COUNT DASD
         L     R7,DASDEXCP         YES, GET PREVIOUS EXCP COUNT
         A     R7,SMF30BLK         ADD EXCP'S FROM THIS SECTION
         ST    R7,DASDEXCP         SAVE EXCP COUNT FOR FUTURE
NXTEXCP  LA    R4,22(R4)           LOOK AT NEXT EXCP SECTION
         BCT   R2,COUNTAP
         ST    R6,GMDASD           STORE STEP DASD COUNT
*
* GET TAPE COUNTS, COMPARE TO OLD COUNT, SAVE LARGER IN SAVED GETMAIN
*
         L     R2,GMTAPES          GET PREVIOUS HIGH TAPE COUNT
         CR    R5,R2               COMPARE STEP COUNT TO SAVED COUNT
         BNH   DEVMSGRT            TAPE COUNT NOT LARGER, SHOW COUNTS
         ST    R5,GMTAPES          OTHERWISE, STORE LARGER COUNT
DEVMSGRT ST    R5,STORX2           SAVE TAPE COUNT FOR STEP
         MVC   WTO1TXT,DEVMSG      MOVE THE MSG OVLY TO MSG BUFFER
         LA    R5,WTO1TXT
         USING DEVMSGS,R5
         L     R2,STORX2           LOAD TAPE COUNT FOR STEP
         LA    R3,DEV1
         BAL   R14,PCOUNT          CONVERT TAPE COUNT
         L     R2,TAPEEXCP         LOAD TAPE EXCP COUNT FOR STEP
         LA    R3,DEV2
         BAL   R14,PCOUNT          CONVERT TAPE EXCP COUNT
         L     R2,GMDASD           GET STEP DASD COUNT
         LA    R3,DEV3
         BAL   R14,PCOUNT          CONVERT DASD COUNT
         L     R2,DASDEXCP         GET STEP DASD EXCP COUNT
         LA    R3,DEV4
         BAL   R14,PCOUNT          CONVERT DASD EXCP COUNT
         L     R2,DASDEXCP         GET STEP DASD EXCP COUNT
         A     R2,TAPEEXCP         ADD STEP TAPE EXCP COUNT
         LA    R3,DEV5
         BAL   R14,PCOUNT          CONVERT TOTAL EXCP COUNT
         CLC   EXCPS,=C'********'  BAD EXCP COUNT?
         BNE   DEVPRT              IF OK, PRINT OUR ACCUMULATED COUNT
         MVC   DEV2,EXCPS          OTHERWISE, LOAD ****'S
         MVC   DEV4,EXCPS          OTHERWISE, LOAD ****'S
         MVC   DEV5,EXCPS          OTHERWISE, LOAD ****'S
         MVC   EXCPS,SPACES        AND CLEAR THEM OUT
DEVPRT   BAL   R14,MSGRTN
         B     EXIT
         EJECT
***********************************************************************
*
*        HANDLE JOB TERMINATION CONDITIONS
*
***********************************************************************
JOBTERM  MVC   WTO1TXT,STEPMSG1    MOVE ' ' MSG OVLY TO MSG BUFFER
         BAL   R14,MSGRTN
         MVC   WTO1TXT,STEPMSG2    MOVE '*' MSG OVLY TO MSG BUFFER
         BAL   R14,MSGRTN
         MVC   WTO1TXT,JOBMSG      MOVE THE MSG OVLY TO MSG BUFFER
         BAL   R14,MSGRTN
*
* GET JOB CPU TIMES, CONVERT TO PRINT CHARACTERS, DISPLAY
*
         CLC   SMF30CON,=H'0'      IS THERE AN ACCOUNTING SECTION?
         BE    TAPRTN              IF NOT, SKIP THIS PART
         LR    R4,R9               POINT REGISTER TO SMF RECORD
         A     R4,SMF30COF         AND THEN TO PROCESSOR ACCTNG SECTION
         USING SMF30CAS,R4
         MVC   WTO1TXT,CPUMSG      MOVE THE MSG OVLY TO MSG BUFFER
         LA    R5,WTO1TXT
         USING CPUMSGS,R5
         L     R1,SMF30CPT         GET JOB TCB TIME
         BAL   R14,PCLOCK          CALL CLOCK CONVERTER
         MVC   CPU1,TIMEFLD+1
         L     R1,SMF30CPS         GET JOB SRB TIME
         BAL   R14,PCLOCK          CALL CLOCK CONVERTER
         MVC   CPU2,TIMEFLD+1
         L     R1,SMF30CPT         GET JOB TCB TIME
         A     R1,SMF30CPS         ADD JOB SRB TIME
         BAL   R14,PCLOCK          CALL CLOCK CONVERTER
         MVC   CPU3,TIMEFLD+1
         MVC   JOBMIN,TIMEFLD      STORE MINUTES
         OC    JOBMIN,ZEROS        INCLUDE LEADING ZEROS
         MVC   JOBSEC,TIMEFLD+5    STORE SECONDS
         OC    JOBSEC,ZEROS        INCLUDE LEADING ZEROS
         BAL   R14,MSGRTN
*
* DISPLAY MAX TAPES
*
TAPRTN   MVC   WTO1TXT,TAPMSG      MOVE THE MSG OVLY TO MSG BUFFER
         LA    R5,WTO1TXT
         USING TAPMSGS,R5
         L     R2,GMTAPES          LOAD HIGHEST TAPE COUNT FOR JOB
         LA    R3,TAP1
         BAL   R14,PCOUNT
         BAL   R14,MSGRTN
         MVC   JOBTAPE,TAP1+7      INITIALIZE FOR CLASS RECOMMENDATION
*
* GET SYSOUT COUNT FROM JCT, DISPLAY TOTAL SYSOUT LINES
*
         MVC   WTO1TXT,SYSMSG          MOVE THE MSG OVLY TO MSG BUFFER
         LA    R5,WTO1TXT
         USING SYSMSGS,R5
         L     R8,CVTPTR               LOAD ADDR OF CVT POINTER
         L     R8,0(R8)                LOAD ADDR OF NEXT/CURR TCB'S
         L     R8,OURTCB(R8)           LOAD ADDR OF OUT TCB
         USING TCB,R8                  ESTABLISH ADDRESSABILITY - TCB
         L     R8,TCBJSCB              LOAD ADDR OF JSCB
         USING IEZJSCB,R8              ESTABLISH ADDRESSABILITY - JSCB
         L     R8,JSCBSSIB             LOAD ADDR OF LIFE-OF-JOB SSIB
         USING SSIB,R8                 ESTABLISH ADDRESSABILITY - SSIB
         L     R8,SSIBSUSE             LOAD ADDR OF JES2 SJB
         USING SJB,R8                  ESTABLISH ADDRESSABILITY - SJB
         L     R8,SJBSJB               LOAD ADDR OF JOB STEP SJB
         LTR   R8,R8                   IS THERE ONE?
         BZ    GETACEE                 NO, FIND ACEE FOR THIS USER
         L     R8,SJBJCT               LOAD ADDR OF JES2 JCT
         USING JCT,R8                  ESTABLISH ADDRESSABILITY - JCT
         L     R2,JCTLINES             GENERATED OUTPUT LINES
         LA    R3,SYS1
         BAL   R14,PCOUNT
         BAL   R14,MSGRTN
         MVC   JOBLINE,SYS1            STORE OUTPUT LINES
         OC    JOBLINE,ZEROS           INCLUDE LEADING ZEROS
*
* FIND ACEE FOR THIS USER
*
GETACEE  L     R8,CVTPTR              LOAD ADDRESS OF CVT POINTER
         L     R8,0(R8)               LOAD ADDRESS OF NEXT/CURR TCB'S
         L     R8,12(R8)              LOAD ADDRESS OF ASCB
         USING ASCB,R8
         L     R8,ASCBASXB
         USING ASXB,R8                ESTABLISH ADDRESSABILITY -
         L     R8,ASXBSENV            LOAD ADDRESS OF
         ST    R8,ACEEADDR            SAVE ACEEADDR
*
* WILL WE BE DOING RACF CHECKING FOR A CLASS RECOMMENDATION?
*
         CLC   BADEND,=C'Y'             BAD RETURN CODE?
         BE    EXIT                     THEN NO MESSAGE
*
* GET RACF PRODUCTION AND PROGRAMMING CLASSES: PROG=OPQ;PROD=123456789;
*
RACF10   MVC   CLASLIST,HALF01          SET NUMBER OF RESOURCE CLASSES
         MVI   CLASLEN,BYTE06           SET CLASS LENGTH
         MVC   CLASCNST(8),SPACES       INITIALIZE
         MVC   CLASCNST,CLASVAL1        SET RESOURCE NAME (CLASE)
         MVC   CLASS,=C'S'                                      (S)
         L     R6,ACEEADDR              POINTER TO ACEE
*                                       STATIC INFO TO DYNAMIC FORM
         MVC   RACLIST1(INITLEN1),INITDAT1
*                                       BUILD IN-STORAGE PROFILES
         RACROUTE CLASS=APPLNAM,LIST=CLASLIST,ENVIR=CREATE,ACEE=(R6),  +
               REQUEST=LIST,WORKA=RACWK,SUBPOOL=230,MF=(E,RACLIST1)
         LTR   R15,R15                  SUCCESSFUL?
         BZ    RACF20                   NO,MUST BE RACF PROBLEM
         ABEND 11,DUMP
RACF20   L     R6,ACEEADDR              POINTER TO ACEE ADDRESS
         USING ACEE,R6                  ESTABLISH ADDRESSABILITY - ACEE
         L     R6,ACEECLCP              LOAD ADDR OF IN-STORAGE PROFILE
         USING RACRTE,R6                ESTABLISH ADDRESSABILITY - ISP
         L     R6,RTETREE               LOAD ADDR OF RACRNE
         USING RACRNE,R6                ESTABLISH ADDRESSABILITY-RACRNE
         L     R6,RNEPROF               LOAD ADDR OF RACRPE
         USING RACRPE,R6                ESTABLISH ADDRESSABILITY-RACRPE
         LH    R7,RPEINSOF              OFFSET TO INSTALLATION DATA
         AR    R6,R7                    POINT REG 6 AT IT
         USING RPEINST,R6               ESTABLISH ADDRESSABILITY-RPEINS
         ICM   R7,B'0001',RPEINSTL      GET THE LENGTH
         LA    R6,1(R6)                 POINT PAST LENGTH TO DATA
RACF30   CLC   0(4,R6),=CL4'GRP='       GROUP OF CLASSES?
         BE    RACF40                   YES, GET THEM
RACF35   LA    R6,1(R6)                 INCREMENT R6
         BCT   R7,RACF30                CONTINUE PARSING
         MVC   RACLASS,SPACES           CLEAR CLASS LIST
         B     RACF70                   ALL CLASSES READ - GO ON
RACF40   LA    R2,4(R6)                 POINT TO CLASS DATA
         LA    R3,RACLASS               POINT TO CLASS LIST
         LA    R5,10                    MAXIMUM COUNT OF CLASSES
         MVC   RACLASS,SPACES           INIT CLASS LIST
RACF55   CLC   0(1,R2),SEMICOLN         END OF THIS TYPE CLASS?
         BE    RACF35                   YES, CONTINUE PARSING
         CLC   0(1,R2),SPACES           END OF DATA?
         BE    RACF35                   YES, CONTINUE PARSING
         CLC   JOBCLASS,0(R2)           IS THIS OUR JOB CLASS?
         BE    RACF70                   YES, DELETE IN-STORAGE PROFILE
         MVC   0(1,R3),0(R2)            EXTRACT CLASS
         LA    R2,1(R2)                 ADVANCE POINTER
         LA    R3,1(R3)                 ADVANCE POINTER
         BCT   R5,RACF55                CONTINUE EXTRACTING
         B     RACF35                   CONTINUE PARSING
*
* DELETE IN-STORAGE PROFILE
*
RACF70   L     R7,ACEEADDR              POINTER TO ACEE
*                                       STATIC INFO TO DYNAMIC FORM
         MVC   RACLIST1(INITLEN1),INITDAT1
*                                       BUILD IN-STORAGE PROFILES
         RACROUTE CLASS=APPLNAM,ENVIR=DELETE,ACEE=(R7),                +
               REQUEST=LIST,WORKA=RACWK,SUBPOOL=230,MF=(E,RACLIST1)
         LTR   R15,R15                  SUCCESSFUL?
         BZ    RACF75                   YES, BEST CLASS PROCESSING
         ABEND 12,DUMP                  NO, MUST BE RACF PROBLEM
*
* IS THIS JOB RUN IN A PRODUCTION OR PROGRAMMING CLASS?  NEITHER?
*
RACF75   CLC   RACLASS,SPACES           OUR CLASS MEMBER OF A GROUP?
         BE    EXIT                     NO, SKIP CLASS CHECK
         LA    R4,RACLASS               YES, POINT REGISTER TO LIST
RACF90   BAL   R14,RACFRTN              CHECK CLASSES TO GET BEST CLASS
*
*   DECIDE WHETHER TO PRINT A CLASS RECOMMENDATION
*
BSTST    CLC   BSTCLAS,JOBCLASS         ALREADY USING BEST CLASS?
         BE    EXIT                     THEN NO MESSAGE
         MVC   WTO1TXT,RECMSG           OTHERWISE, SUGGEST BETTER
         LA    R5,WTO1TXT
         USING RECMSGS,R5
         MVC   REC1,BSTCLAS
         BAL   R14,MSGRTN
         EJECT
***********************************************************************
*
* CLEAN UP AND EXITS
*
***********************************************************************
EXIT     MVC   WTO1TXT,STEPMSG2    MOVE '*' MSG OVLY TO MSG BUFFER
         BAL   R14,MSGRTN
         MVC   WTO1TXT,STEPMSG1    MOVE ' ' MSG OVLY TO MSG BUFFER
         BAL   R14,MSGRTN
         CLC   SMF30STP,R30STEP    STEP TERMINATION?
         BE    EXITR               IF SO, DON'T DO FREEMAIN
         L     R7,JMRADDR          RESTORE REGISTER
         L     R13,4(13)
         L     R1,JMRUCOM
         MVC   JMRUCOM,=F'0'       CLEAR FOR POSSIBLE REQ
         FREEMAIN R,LV=LTOTGM,A=(R1),SP=241
         LM    R14,R12,12(R13)
         SLR   R1,R1               ZERO RETURN CODE
         SLR   R15,R15             HERE, TOO
         BSM   0,R14               RETURN
EXITR    L     R13,4(13)
EXITO    DS    0H
         LM    R14,R12,12(R13)
         SLR   R1,R1               ZERO RETURN CODE
         SLR   R15,R15             HERE, TOO
         BSM   0,R14               RETURN
         SPACE 2
***********************************************************************
*
* WRITE MESSAGE TO SYSTEM MESSAGE DATASET
*
***********************************************************************
MSGRTN   STM   R14,R1,SAVEAR2      SAVE A FEW REGISTERS
         ST    R12,R12FORMS        SAVE R12
         L     R1,R12FORYS         GET THE R12 ON ENTRY TO IEFACTRT
         LA    R0,WTO1TXT          ADDRESS OF MESSAGE
         ST    R0,36(R1)           SAVE INTO 'SYSTEM' AREA
         MVC   42(2,R1),=AL2(114)  LENGTH SAVE INTO 'SYSTEM' AREA
         L     R15,=V(IEFYS)       ENTRY TO IEFYS
         LR    R12,R1              R12 PRIMED FOR YS
         BALR  R14,R15             GO TO IEFYS
         L     R12,R12FORMS        RESTORE R12
         LM    R14,R1,SAVEAR2      RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE 2
***********************************************************************
*
*  COUNT CONVERSION ROUTINE - CONVERTS BINARY TO CHARACTER OUTPUT
*        R2 - VALUE TO BE CONVERTED
*        R3 - ADDR OF FIELD WHERE EBCDIC CHARACTERS ARE TO BE PUT
*
***********************************************************************
PCOUNT   CVD      R2,DWORD                     CONVERT COUNT TO DECIMAL
         MVC      EDWORK,EDMASK                MOVE IN EDIT MASK
         ED       EDWORK,DWORD+3               CONVERT TO CHARACTER
         MVC      0(8,R3),EDWORK+2
         BR       R14                          RETURN TO CALLER
         EJECT
***********************************************************************
*
*  CLOCK CONVERSION ROUTINE - CONVERTS BINARY TO CHARACTER OUTPUT
*        R0 - WORK REGISTER
*        R1 - VALUE TO BE CONVERTED
*        R2 - WORK REGISTER
*        R3 - WORK REGISTER
*        TIMEFLD - WHERE EBCDIC CHARACTERS ARE TO BE PUT
*
***********************************************************************
PCLOCK   SR    R0,R0               CLEAR REGISTER
         L     R3,ZERODATE
         L     R2,ZERODATE
         MVC   TIMEFLD,TIMEMASK    MOVE IN COLONS AND DOT
         STCM  R3,B'0011',WORKDDD1 SAVE THE ENDING DAYS
         STCM  R2,B'0011',WORKDDD0 SAVE THE STARTING DAYS
         SRL   R3,12               MOVE THE YEAR OVER
         O     R3,=F'15'           OR IN THE PACKED SIGN NIBBLE
         STCM  R3,B'0011',WORKYY1  SAVE THE ENDING YEAR
         SRL   R2,12               MOVE THE YEAR OVER
         O     R2,=F'15'           OR IN THE PACKED SIGN NIBBLE
         STCM  R2,B'0011',WORKYY0  SAVE THE STARTING YEAR
         SR    R1,R0               SUBTRACT THE RAW TIME
         BNM   GTZERO1             THIS IS NOT A NEGATIVE NUMBER
         A     R1,HR24             CARRY 24 HOURS
         SP    WORKDDD1,=P'1'      SUBTRACT A DAY FOR THE CARRY
         BNZ   GTZERO1             WE DID NOT SUBTRACT ONE FROM JAN 1
         ZAP   WORKDDD1,=P'365'    CARRY A YEAR
         SP    WORKYY1,=P'1'       SUBTRACT A YEAR FOR THE CARRY
         TM    WORKYY1+1,B'00110000' WAS LAST YEAR A LEAP YEAR?
         BNZ   GTZERO1             NO IT WASN'T
         AP    WORKDDD1,=P'1'      ADD ONE (366 DAYS IN A LEAP YEAR)
GTZERO1  SP    WORKDDD1,WORKDDD0   SUBTRACT DAYS
         BNM   GTZERO2             WAS NO NEGATIVE
         AP    WORKDDD1,=P'365'    CARRY A YEAR
         SP    WORKYY1,=P'1'       SUBTRACT A YEAR FOR CARRY
         TM    WORKYY1+1,B'00110000' WAS LAST YEAR A LEAP YEAR
         BNZ   GTZERO2             NO
         AP    WORKDDD1,=P'1'      ADD ONE (366 DAYS IN A LEAP YEAR)
GTZERO2  SP    WORKYY1,WORKYY0     SUBTRACT THE YEARS
         BZ    NOLEAPYR            NO YEAR ARITHMATIC
         BP    YEARS               MAYBE MORE THAN ONE YEAR
         MVC   TIMEFLD,=C'----:--.--' DENOTE A NEGATIVE NUMBER
         B     PCLKEX              RETURN
YEARS    CP    WORKYY1,=P'1'       WE CAN ONLY HANDLE ONE YEAR
         BE    ADD365              ADD A YEAR OF DAYS
         MVC   TIMEFLD,=C'****:**.**' DENOTE A LARGE NUMBER
         B     PCLKEX              RETURN
ADD365   AP    WORKDDD1,=P'365'    CARR6 A YEAR
         TM    WORKYY0+1,B'00110000' WAS THE YEAR A LEAP YEAR?
         BNZ   NOLEAPYR            NOPE
         AP    WORKDDD1,=P'1'      ADD A DAY FOR LEAP YEAR
NOLEAPYR ZAP   DWORD,WORKDDD1      GET PREPARED TO CVB
         CVB   R3,DWORD            GET DAYS IN REGISTER
         M     R2,HR24             MULTIPLY BY 24 HRS
         AR    R3,R1               ADD TIME FROM SUBTRACT
         SR    R2,R2               CLEAR FOR DIVIDE
         D     R2,HR1              DIVIDE BY HRS
         MVC   PREHHHH(7),=XL7'40202020202021' MOVE IN EDIT FIELD
         LR    R1,R3               SAVE HOURS
         MH    R1,HALF60           HOURS --> MINUTES
         LR    R3,R2               MOVE REMAINDER FOR DIVISION
         SR    R2,R2               CLEAR FOR DIVIDE
         D     R2,MIN1             DIVIDE BY MINUTES
         AR    R3,R1               MINUTES-FROM-HOURS + MINUTES
         CVD   R3,DWORD            CONVERT MINUTES TO PACKED
         UNPK  MMMM,DWORD+6(2)     UNPACK
         OI    MMMM+3,X'F0'        FIX THE SIGN
         LR    R3,R2               MOVE REMAINDER FOR DIVISION
         SR    R2,R2               CLEAR FOR DIVISION
         D     R2,SEC1             DIVIDE BY SECONDS
         CVD   R3,DWORD            CONVERT SECONDS TO PACKED
         UNPK  SS,DWORD+6(2)       UNPACK
         OI    SS+1,X'F0'          FIX THE SIGN
         CVD   R2,DWORD            CONVERT REMAINDER PACKED
         UNPK  TH,DWORD+6(2)       UNPACK
         OI    TH+1,X'F0'          FIX THE SIGN
PCLKEX   BR    R14                 RETURN
         EJECT
***********************************************************************
*
*  RACF ROUTINE - CHECK ALL POSSIBLE CLASSES (EITHER PRODUCTION OR
*        PROGRAMMING) TO SEE WHETHER JOB WAS RUN IN THE BEST CLASS
*        R2 - POINTER TO INSTALLATION DATA
*        R3 - USED FOR MESSAGE HANDLING
*        R4 - POINTER TO CLASS IN RACPROD LIST OR RACPROG LIST
*        R5 - USED FOR MESSAGE HANDLING, POINTER TO BEST TIME FIELDS
*        R6 - POINTER TO KEYWORDS IN INSTALLATION DATA
*        R7 - ACEE ADDRESS, LENGTH OF INSTALLATION DATA
*        R8 - 6: MAX LENGTH OF TIME DATA
*        R9 - 10: COUNT OF POSSIBLE CLASSES
*
***********************************************************************
RACFRTN  ST    R9,SMFADDR               STORE REGISTER
         ST    R14,STORX3               STORE REGISTER
         LA    R9,10                    INIT COUNT OF POSSIBLE CLASSES
         MVC   CLASLIST,HALF01          SET NUMBER OF RESOURCE CLASSES
         MVI   CLASLEN,BYTE06           SET CLASS LENGTH
         MVC   CLASCNST(8),SPACES       INITIALIZE
         MVC   CLASCNST,CLASVAL2        SET RESOURCE NAME
RACF000  MVC   CLASS,0(R4)              SET JOB CLASS IN RESOURCE NAME
         L     R6,ACEEADDR              POINTER TO ACEE ADDRESS
*                                       STATIC INFO TO DYNAMIC FORM
         MVC   RACLIST1(INITLEN1),INITDAT1
*                                       BUILD IN-STORAGE PROFILES
         RACROUTE CLASS=APPLNAM,LIST=CLASLIST,ENVIR=CREATE,ACEE=(R6),  +
               REQUEST=LIST,WORKA=RACWK,SUBPOOL=230,MF=(E,RACLIST1)
         LTR   R15,R15                  SUCCESSFUL?
         BZ    RACF010                  NO,MUST BE RACF PROBLEM
         L     R6,ACEEADDR              POINTER TO ACEE
*                                       STATIC INFO TO DYNAMIC FORM
         MVC   RACLIST1(INITLEN1),INITDAT1
*                                       DELETE IN-STORAGE PROFILES
         RACROUTE CLASS=APPLNAM,ENVIR=DELETE,ACEE=(R6),                +
               REQUEST=LIST,WORKA=RACWK,SUBPOOL=230,MF=(E,RACLIST1)
         ABEND 21,DUMP
RACF010  L     R6,ACEEADDR              POINTER TO ACEE ADDRESS
         USING ACEE,R6                  ESTABLISH ADDRESSABILITY - ACEE
         L     R6,ACEECLCP              LOAD ADDR OF IN-STORAGE PROFILE
         USING RACRTE,R6                ESTABLISH ADDRESSABILITY - ISP
         L     R6,RTETREE               LOAD ADDR OF RACRNE
         USING RACRNE,R6                ESTABLISH ADDRESSABILITY-RACRNE
         L     R6,RNEPROF               LOAD ADDR OF RACRPE
         USING RACRPE,R6                ESTABLISH ADDRESSABILITY-RACRPE
         SLR   R7,R7                    CLEAR REGISTER
         LH    R7,RPEINSOF              OFFSET TO INSTALLATION DATA
         AR    R6,R7                    POINT REG 6 AT IT
         USING RPEINST,R6               ESTABLISH ADDRESSABILITY-RPEINS
         ICM   R7,B'0001',RPEINSTL      GET THE LENGTH OF INST DATA
         S     R7,=F'5'                 LAST 5 CHARS WON'T BE 'XXXX='
         LA    R6,1(R6)                 POINT PAST LENGTH TO DATA
         MVC   RACTAPE,SPACES           INITIALIZE DEFAULT TAPES
         MVC   RACTIME,SPACES           INITIALIZE DEFAULT TIME
         MVC   RACLINE,SPACES           INITIALIZE DEFAULT LINES
RACF020  CLC   0(5,R6),=CL5'TAPE='      DEFAULT TAPES FOR THIS CLASS?
         BE    RACF040                  YES, EXTRACT NUMBER OF TAPES
         CLC   0(5,R6),=CL5'TIME='      DEFAULT TIME FOR THIS CLASS?
         BE    RACF050                  YES, EXTRACT CPU TIME
         CLC   0(5,R6),=CL5'LINE='      DEFAULT LINES FOR THIS CLASS?
         BE    RACF090                  YES, EXTRACT SYSOUT LINES
RACF030  LA    R6,1(R6)                 POINT TO MORE DATA
         BCT   R7,RACF020               MORE DATA? CONTINUE PARSING
         B     RACF100                  DELETE IN-STORAGE PROFILE
RACF040  MVC   RACTAPE,5(R6)            EXTRACT DEFAULT TAPES
         B     RACF030                  CONTINUE PARSING
RACF050  LA    R2,5(R6)                 POINT TO TIME DATA
         LA    R3,RACTIME               POINT TO TIME DESTINATION
         LA    R8,6                     MAXIMUM LENGTH OF TIME DATA
RACF060  CLC   0(1,R2),SEMICOLN         END OF TIME DATA?
         BE    RACF030                  YES, CONTINUE PARSING
         CLC   0(1,R2),SPACES           END OF TIME DATA?
         BE    RACF030                  YES, CONTINUE PARSING
         CLC   0(1,R2),RPAREN           END OF TIME DATA?
         BE    RACF030                  YES, CONTINUE PARSING
         CLC   0(1,R2),LPAREN           BEGINNING OF TIME DATA?
         BE    RACF070                  POINT TO NEXT CHARACTER
         CLC   0(1,R2),COMMA            COMMA?
         BE    RACF070                  POINT TO NEXT CHARACTER
         B     RACF080                  GET FIRST VALUE
RACF070  LA    R2,1(R2)                 POINT TO NEXT CHARACTER
         B     RACF060
RACF080  MVC   0(1,R3),0(R2)            EXTRACT TIME VALUE
         LA    R2,1(R2)                 INCREMENT R2
         LA    R3,1(R3)                 INCREMENT R3
         BCT   R8,RACF060               CONTINUE EXTRACTING
         B     RACF030                  CONTINUE PARSING
RACF090  MVC   RACLINE,5(R6)            EXTRACT DEFAULT LINES
         B     RACF030                  CONTINUE PARSING
*
* DELETE IN-STORAGE PROFILE
*
RACF100  L     R7,ACEEADDR              POINTER TO ACEE
*                                       STATIC INFO TO DYNAMIC FORM
         MVC   RACLIST1(INITLEN1),INITDAT1
*                                       DELETE IN-STORAGE PROFILES
         RACROUTE CLASS=APPLNAM,ENVIR=DELETE,ACEE=(R7),                +
               REQUEST=LIST,WORKA=RACWK,SUBPOOL=230,MF=(E,RACLIST1)
         LTR   R15,R15                  SUCCESSFUL?
         BZ    RACF110                  NO,MUST BE RACF PROBLEM
         ABEND 22,DUMP
*
* DETERMINE BEST CLASS, IF POSSIBLE
*
RACF110  CLC   RACTAPE,=C'X'            UNLIMITED TAPES FOR RACF CLASS?
         BE    RACF120                  THEN COMPARE SYSOUT LINES
         CLC   RACTAPE,JOBTAPE          WITHIN TAPE LIMITS OF CLASS?
         BL    RACF140                  NO, TOO MANY; TRY NEXT CLASS
RACF120  CLC   RACLINE,JOBLINE          WITHIN LINE LIMITS OF CLASS?
         BL    RACF140                  NO, TOO MANY; TRY NEXT CLASS
         CLC   RACMIN,JOBMIN            WITHIN TIME LIMITS OF CLASS?
         BL    RACF140                  NO, TOO MUCH; TRY NEXT CLASS
         BH    RACF130                  YES, BEST CLASS SO FAR
         CLC   RACSEC,JOBSEC            WITHIN TIME LIMITS OF CLASS?
         BL    RACF140                  NO, TOO MUCH
RACF130  MVC   BSTCLAS,0(R4)            BEST CLASS SO FAR
         B     RACFRTNX                 & NOT CHECKING ANY MORE
RACF140  LA    R4,1(R4)                 NEXT CLASS
         CLC   0(1,R4),SPACES
         BE    RACFRTNX                 RETURN
         BCT   R9,RACF000
         B     RACFRTNX                 RETURN
RACFRTNX L     R9,SMFADDR               RESTORE REGISTER
         L     R14,STORX3               RESTORE REGISTER
         BR    R14                      RETURN
         EJECT
***********************************************************************
*                                                                     *
*  PROGRAM CONSTANTS                                                  *
*                                                                     *
***********************************************************************
CONSTANT DS    0D
APPLNAM  DC    CL8'APPL'           CLASS NAME
R30STEP  DC    H'4'                STEP TERMINATION
R30JOB   DC    H'5'                JOB TERMINATION
HR24     DC    A(24*60*60*100)     24 HRS IN .01 SECONDS
HR1      DC    A(60*60*100)        1 HR IN .01 SECONDS
MIN1     DC    A(60*100)           1 MIN IN .01 SECONDS
SEC1     DC    A(100)              1 SEC IN .01 SECONDS
EDMASK   DC    XL10'40202020202020202120'
TIMEMASK DC    CL10'MMMM:SS.TH'
DATEMASK DC    CL8'MO/DD/YY'
JES2     DC    CL4'JES2'
         DS    0F
ZERODATE DC    PL4'0'
HALF01   DC    H'1'
HALF60   DC    H'60'
CLASVAL1 DC    C'CLASE'
CLASVAL2 DC    C'CLASS'
SEMICOLN DC    C';'
SPACES   DC    CL11' '
ZEROS    DC    8C'0'
LPAREN   DC    C'('
RPAREN   DC    C')'
COMMA    DC    C','
         EJECT
***********************************************************************
*                                                                     *
*  STATIC LIST FORMS OF RACLIST                                       *
*                                                                     *
***********************************************************************
INITDAT1 RACROUTE REQUEST=LIST,MF=L  LIST FORM OF RACROUTE MACRO
INITLEN1 EQU      *-INITDAT1
         DS       0F
         LTORG
         EJECT
***********************************************************************
*                                                                     *
*  PROGRAM MESSAGES                                                   *
*                                                                     *
***********************************************************************
STEPMSG  DS    0C
         DC    C'IEFACTRT - STEP TOTALS:'
         DC    CL(114-(*-STEPMSG))' '
STEPMSG1 DS    0C
         DC    CL114' '
STEPMSG2 DS    0C
         DC    114C'*'
JOBMSG   DS    0C
         DC    C'IEFACTRT - JOB TOTALS:'
         DC    CL(114-(*-JOBMSG))' '
IDMSG    DS    0C
         DC    C'IEFACTRT - STEP: '
         DC    C'        '
         DC    C'  JOB: '
         DC    C'        '
         DC    C'  USERID: '
         DC    C'        '
         DC    C'  CURRENT CLASS: '
         DC    C' '
         DC    CL(114-(*-IDMSG))' '
CPUMSG   DS    0C
         DC    C'TIME UNDER TCB: '
         DC    C'MMM:SS.HS'
         DC    C'  '
         DC    C'TIME UNDER SRB: '
         DC    C'MMM:SS.HS'
         DC    C'  '
         DC    C'TOTAL CPU TIME: '
         DC    C'MMM:SS.HS'
         DC    C' '
         DC    CL(114-(*-CPUMSG))' '
PAGMSG   DS    0C
         DC    C'PAGE-INS: '
         DC    C'        '
         DC    C' PAGE-OUTS: '
         DC    C'        '
         DC    C' VIO PAGE-INS: '
         DC    C'        '
         DC    C' VIO PAGE-OUTS: '
         DC    C'        '
         DC    C' AVG WRK SET SIZE: '
         DC    C'        '
         DC    C'K'
         DC    CL(114-(*-PAGMSG))' '
TAPMSG   DS    0C
         DC    C'MAX TAPES/STEP: '
         DC    C'        '
         DC    CL(114-(*-TAPMSG))' '
DEVMSG   DS    0C
         DC    C'TAPES: '
         DC    C'        '
         DC    C'  EXCP''S: '
         DC    C'        '
         DC    C'  DASD: '
         DC    C'        '
         DC    C'  EXCP''S: '
         DC    C'        '
         DC    C'  TOTAL EXCP''S: '
         DC    C'        '
         DC    CL(114-(*-DEVMSG))' '
SYSMSG   DS    0C
         DC    C'TOTAL SYSOUT LINES: '
         DC    C'        '
         DC    CL(114-(*-SYSMSG))' '
SWPMSG   DS    0C
         DC    C'STEP SWAP SEQUENCES: '
         DC    C'        '
         DC    CL(114-(*-SWPMSG))' '
STGMSG   DS    0C
         DC    C'REGION REQUESTED: '
         DC    C'        '
         DC    C'K'
         DC    C'  AMOUNT USED, BELOW 16 MEG: '
         DC    C'        '
         DC    C'K'
         DC    C'  AMOUNT USED, ABOVE 16 MEG: '
         DC    C'        '
         DC    C'K'
         DC    CL(114-(*-STGMSG))' '
RECMSG   DS    0C
         DC    C'THIS JOB COULD HAVE BEEN RUN IN CLASS '
         DC    C' '
         DC    C'   (TENTATIVE RECOMMENDATION)'
         DC    CL(114-(*-RECMSG))' '
BSTMSG   DS    0C
         DC    C'GOOD CHOICE OF JOB CLASS'
         DC    CL(114-(*-BSTMSG))' '
         EJECT
***********************************************************************
*                                                                     *
*  WORKING STORAGE / SAVE AREA                                        *
*                                                                     *
***********************************************************************
DATA     DSECT
SAVE     DS    18F              SAVE AREA FOR REGISTERS ON ENTRY
         ORG   SAVE
SAVEXX   DS    F
SAVEBK   DS    F
SAVEFW   DS    F
SAVER14  DS    F
SAVER15  DS    F
SAVER0   DS    F
SAVER1   DS    F
         DS    11F
R12FORYS DS    F
R12FORMS DS    F
STORX2   DS    F
STORX3   DS    F
*
DWORD    DS    D
BADEND   DS    CL1
EXCPS    DS    CL8
JOBCLASS DS    CL1
*
SAVEAR2  DS    6F               INTERNAL SAVE REGISTER SAVE AREA
*
PARMS    DS    0F               PARMS PASSED IN REG 1 TO ROUTINE
PARMEPRM DS    F                PTR TO COMMON EXIT PARAMETER AREA
PARMSTEP DS    F                PTR TO STEPNAME FIELD
PARMPROG DS    F                PTR TO PROGRAMMER NAME FIELD
PARMJOBC DS    F                PTR TO JOB CPU TIME FIELD
PARMACCT DS    F                PTR TO JOB ACCOUNTING FIELDS
PARMSTPC DS    F                PTR TO STEP CPU TIME FIELD
PARMSACT DS    F                PTR TO STEP ACCOUNTING FIELDS
PARMINDC DS    F                PTR TO CANCEL FLAG & STEP NUMBER
PARMCOND DS    F                PTR TO CONDITION CODE FIELD
PARMRECD DS    F                PTR TO SMF RECORD TO BE WRITTEN
LPARMS   EQU   *-PARMS
EDWORK   DC    XL10'00'
WORKDDD1 DS    PL2
WORKYY1  DS    PL2
WORKDDD0 DS    PL2
WORKYY0  DS    PL2
         DS    C                   SPACE FOR PAD CHARACTER
MODDYY   DS    0CL8
MO       DS    CL2
         DS    C
DD       DS    CL2
         DS    C
YY       DS    CL2
JULIAN   DS    CL3
DAY      DS    CL3
PREHHHH  DS    CL3
TIMEFLD  DS    0CL10
MMMM     DS    CL4
         DS    C
SS       DS    CL2
         DS    C
TH       DS    CL2
*
STCPUTCB DS    F                STEP CPU TIME UNDER TCB
*
         DS    0F
JOBCPU   DS    0CL6             JOB CPU TIME
JOBMIN   DS    C'    '          JOB CPU MINUTES
JOBSEC   DS    C'  '            JOB CPU SECONDS
JOBTAPE  DS    C' '             JOB TAPE NUMBER
JOBLINE  DS    C'        '      JOB SYSOUT LINES
BSTCLAS  DS    C' '             BEST CLASS TO RUN THIS JOB IN
WTO1TXT  DS    CL114            MESSAGE TEXT
GMDASD   DS    F                NUMBER DASD ALLOCATIONS/STEP
GMTAPES  DS    F                HIGHEST # OF TAPES/STEP
DASDEXCP DS    F                DASD EXCP COUNT/STEP
TAPEEXCP DS    F                TAPE EXCP COUNT/STEP
ACEEADDR DS    F                ADDRESS OF ACEE
JMRADDR  DS    F
SMFADDR  DS    F
CLASLIST DS    0F               JOBCLASS RESOURCE FOR RACLIST
         DS    H                NUMBER OF NAMES IN LIST
CLASLEN  DS    AL1              LENGTH OF RESOURCE NAME (6)
CLASCNST DS    CL5              CONSTANT VALUE OF 'CLASS'
CLASS    DS    CL1              JOB CLASS
         DS    CL2
         DS    0F
RACWK    DS    CL512            RACROUTE WORK AREA
RACLASS  DS    CL11' '          LIST OF RACF CLASSES
RACTAPE  DS    CL1              DEFAULT TAPES FOR CLASS
RACTIME  DS    0CL6             DEFAULT TIME FOR CLASS
RACMIN   DS    CL4              MAX MINUTES FOR CLASS
RACSEC   DS    CL2              MAX SECONDS FOR CLASS
RACLINE  DS    CL8              DEFAULT LINES FOR CLASS
RACLIST1 DS    CL(INITLEN1)     LIST FORM OF RACROUTE MACRO
LTOTGM   EQU   *-DATA
         EJECT
***********************************************************************
*                                                                     *
*  MAPPING DSECTS                                                     *
*                                                                     *
***********************************************************************
         SPACE 2
IDMSGS   DSECT
         DC    C'IEFACTRT - STEP: '
ID1      DC    C'        '
         DC    C'  JOB: '
ID2      DC    C'        '
         DC    C'  USERID: '
ID3      DC    C'        '
         DC    C'  CURRENT CLASS: '
ID4      DC    C' '
         DC    67C' '
IDMSGLEN EQU   *-IDMSGS
         SPACE 2
CPUMSGS  DSECT
         DC    C'TIME UNDER TCB: '
CPU1     DC    C'MMM:SS.HS'
         DC    C'  '
         DC    C'TIME UNDER SRB: '
CPU2     DC    C'MMM:SS.HS'
         DC    C'  '
         DC    C'TOTAL CPU TIME: '
CPU3     DC    C'MMM:SS.HS'
         DC    C' '
CPUMLEN  EQU   *-CPUMSGS
         SPACE 2
PAGMSGS  DSECT
         DC    C'PAGE-INS: '
PAG1     DC    C'        '
         DC    C' PAGE-OUTS: '
PAG2     DC    C'        '
         DC    C' VIO PAGE-INS: '
PAG3     DC    C'        '
         DC    C' VIO PAGE-OUTS: '
PAG4     DC    C'        '
         DC    C' AVG WRK SET SIZE: '
WSS      DC    C'        '
         DC    C'K'
PAGMLEN  EQU   *-PAGMSGS
         SPACE 2
TAPMSGS  DSECT
         DC    C'MAX TAPES/STEP: '
TAP1     DC    C'        '
TAPMLEN  EQU   *-TAPMSGS
         SPACE 2
DEVMSGS  DSECT
         DC    C'TAPES: '
DEV1     DC    C'        '
         DC    C'  EXCP''S: '
DEV2     DC    C'        '
         DC    C'  DASD: '
DEV3     DC    C'        '
         DC    C'  EXCP''S: '
DEV4     DC    C'        '
         DC    C'  TOTAL EXCP''S: '
DEV5     DC    C'        '
DEVMLEN  EQU   *-DEVMSGS
         SPACE 2
SYSMSGS  DSECT
         DC    C'TOTAL SYSOUT LINES: '
SYS1     DC    C'        '
SYSMLEN  EQU   *-SYSMSGS
         SPACE 2
SWPMSGS  DSECT
         DC    C'STEP SWAP SEQUENCES: '
SWP1     DC    C'        '
SWPMLEN  EQU   *-SWPMSGS
         SPACE 2
STGMSGS  DSECT
         DC    C'REGION REQUESTED: '
STG1     DC    C'        '
         DC    C'K'
         DC    C'  AMOUNT USED, BELOW 16 MEG: '
STG2     DC    C'        '
         DC    C'K'
         DC    C'  AMOUNT USED, ABOVE 16 MEG: '
STG3     DC    C'        '
         DC    C'K'
         SPACE 2
RECMSGS  DSECT
         DC    C'THIS JOB COULD HAVE BEEN RUN IN CLASS '
REC1     DC    C' '
         DC    C'   (TENTATIVE RECOMMENDATION)'
RECMLEN  EQU   *-RECMSGS
         EJECT
         COPY     ICHPISP          DSECT FOR RACF IN-STORAGE PROFILE
         IFASMFR 30                SMF TYPE 30 RECORD
         IFGRPL
         IEFJMR                    JMR MAPS COMMON PARAMETER AREA
         IKJTSB LIST=YES,EXT=NO
         IKJTCB
         IKTTSBX
         IHAASCB
         IHAASXB
         IHAACEE
         IEZJSCB
         IEFJSSIB
         $BUFFER
         $SJB
         $TQE
         $JCT
         CVT
         END   IEFACTRT
