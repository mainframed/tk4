         TITLE 'DELUXE JES2 INTERNAL TEXT SCAN EXIT - PREAMBLE'
**********************************************************************
*                                                                    *
*           DELUXE JES2 INTERNAL TEXT SCAN EXIT 6                    *
*                                                                    *
*    PURPOSE:                                                        *
*       THE EXIT AS IMPLEMENTED AT DELUXE HAS THE PURPOSE            *
*       OF CHECKING THE NUMBER OF TAPE ALLOCATIONS PER STEP          *
*       AND CANCELING JOBS WHICH EXCEED THE NUMBER ALLOWED.          *
*                                                                    *
*    ENTRY POINT = DLXXIT06                                          *
*                                                                    *
*    INPUT (REGISTERS):                                              *
*       R0     A CODE INDICATING THE STATUS OF CONVERSION PROCESSING *
*              0  INDICATES THAT A JCL STATEMENT HAS BEEN CONVERTED  *
*                 TO AN INTERNAL TEXT IMAGE                          *
*              4  INDICATES THAT ALL OF THE JCL FOR A PARTICULAR     *
*                 JOB HAS BEEN CONVERTED TO INTERNAL TEXT            *
*       R1     ADDRESS OF A 4-WORD PARAMETER LIST                    *
*              +0  ADDRESS OF A 16-BYTE WORK AREA AVAILABLE TO THE   *
*                  INSTALLATION                                      *
*              +4  IF THE CODE PASSED IN R0 IS 0, THIS WORD POINTS   *
*                  TO THE ADDRESS OF THE LAST SINGLE INTERNAL TEXT   *
*                  IMAGE CONVERTED FROM A JCL STATEMENT.  IF THE     *
*                  CODE PASSED IN R0 IS 4, THIS WORD CONTAINS THE    *
*                  ADDRESS OF THE CONVERTER'S RETURN CODE.           *
*              +8  ADDRESS OF THE DTE                                *
*              +12 ADDRESS OF THE JCT                                *
*       R2-R10 N/A                                                   *
*       R11    ADDRESS OF THE HCT                                    *
*       R12    N/A                                                   *
*       R13    OS-STYLE 18 WORD SAVE AREA                            *
*       R14    RETURN ADDRESS                                        *
*       R15    ENTRY ADDRESS                                         *
*                                                                    *
*    RETURN (REGISTERS);                                             *
*       R0     A CODE INDICATING THE STATUS OF CONVERSION PROCESSING *
*              0  INDICATES THAT A JCL STATEMENT HAS BEEN CONVERTED  *
*                 TO AN INTERNAL TEXT IMAGE                          *
*              4  INDICATES THAT ALL OF THE JCL FOR A PARTICULAR     *
*                 JOB HAS BEEN CONVERTED TO INTERNAL TEXT            *
*       R1     ADDRESS OF A 4-WORD PARAMETER LIST                    *
*              +0  ADDRESS OF A 16-BYTE WORK AREA AVAILABLE TO THE   *
*                  INSTALLATION                                      *
*              +4  IF THE CODE PASSED IN R0 IS 0, THIS WORD POINTS   *
*                  TO THE ADDRESS OF THE LAST SINGLE INTERNAL TEXT   *
*                  IMAGE CONVERTED FROM A JCL STATEMENT.  IF THE     *
*                  CODE PASSED IN R0 IS 4, THIS WORD CONTAINS THE    *
*                  ADDRESS OF THE CONVERTER'S RETURN CODE.           *
*              +8  ADDRESS OF THE DTE                                *
*              +12 ADDRESS OF THE JCT                                *
*       R2-R10 N/A                                                   *
*       R11    ADDRESS OF THE HCT                                    *
*       R12    N/A                                                   *
*       R13    OS-STYLE 18 WORD SAVE AREA                            *
*       R14    RETURN ADDRESS                                        *
*       R15   CONTAINS A RETURN CODE AS FOLLOWS:                     *
*             = 0  TELLS JES2 THAT, IF THERE ARE ANY ADDITIONAL EXIT *
*                  ROUTINES, IT IS TO EXECUTE THE NEXT ONE.  IF      *
*                  THERE ARE NO ADDITIONAL ROUTINES, JES2 IS TO      *
*                  CONTINUE WITH NORMAL JES2 PROCESSING.             *
*             = 4  TELLS JES2 TO IGNORE ANY ADDITION EXIT ROUTINES   *
*                  ASSOCIATED WITH THIS EXIT AND TO CONTINUE WITH    *
*                  NORMAL JES2 PROCESSING.                           *
*             = 8  TELLS JES2 TO BYPASS EXECUTION AND CANCEL THE     *
*                  JOB; THE JOB IS QUEUED FOR OUTPUT RATHER THAN     *
*                  FOR EXECUTION.                                    *
*                                                                    *
*    JES2 MACROS USED:                                               *
*        $ENTRY, $MODEND, $HASPGBL,$HCT,$IOB,$SIT,$TEXT,$KEYS        *
*                                                                    *
*    MVS MACROS USED:                                                *
*        GETMAIN, FREEMAIN, SAVE, RESTORE                            *
*                                                                    *
*                                                                    *
*    CHANGE ACTIVITY:                                                *
*        02/06/87  WRITTEN.                             BC.          *
*                                                                    *
**********************************************************************
         EJECT
         COPY  $HASPGBL                 COPY HASP GLOBALS
TXTEX006 $MODULE ENVIRON=SUBTASK,                                      +
               $BUFFER,                                                +
               $HASPEQU,                REQUIRED FOR REG CONVENTIONS   +
               $MIT,                    REQ'D BY $MODULE               +
               $JCT,                    HASP JOB CONTROL TABLE MAPPING +
               $HCT,                    HASP CONTROL TABLE MAPPING     +
               $PCE,                    HASP PCE DSECT                 +
               TEXT,                    MVS TEXT DSECT                 +
               KEYS,                    MVS TEXT KEYS EQUATES          +
               WPL,                     MVS WPL DSECT                  +
               RPL                      REQ'D BY $BUFFER
         TITLE 'DELUXE JES2 INTERNAL TEXT SCAN EXIT '
         SPACE 1
DLXXIT06 $ENTRY BASE=R12                EXIT ROUTINE ENTRY POINT
         SAVE  (14,12)                  SAVE REGISTERS
         LR    R12,R15                  LOAD LOCAL BASE REG
         LTR   R2,R0                    SAVE CODE
         BNE   RETURNX                  IF NE 0, THEN SKIP EXIT
         LR    R3,R1                    SAVE ADDRESS OF PARAMETER LIST
         USING PARMLIST,R3              SET ADDRESSABILITY
         L     R4,USERADDR              GET ADDR OF USER WORK AREA
         USING USERAREA,R4              SET ADDRESSABILITY
***********************************************************************
*        SEE IF THERE'S A REASON TO TAKE THIS EXIT
***********************************************************************
         TM    USERFLAG,X'80'           SHOULD THIS EXIT CONTINUE?
         BO    RETURNX                  IF NOT, RETURN
         GETMAIN R,LV=LDATA             GET SAVEAREA
         ST    R13,4(R1)                SAVE OLD ADDR IN NEW
         ST    R1,8(R13)                SAVE NEW ADDR IN OLD
         LR    R13,R1                   LOAD R13 WITH CURRENT ADDR
         USING WORKAREA,R13             SET ADDRESSABILITY
         MVC   DATA(MOVEL),CDATA        INIT DATA IN AREA
         LA    R6,DSN                   SET UP CAMLST PARAMETERS
         ST    R6,LOCLIST+4               ADDR OF DATASET NAME
         LA    R6,LOCAREA
         ST    R6,LOCLIST+12              ADDR OF WORK BUFFER
         L     R7,JCTADDR               GET ADDR OF JCT
         USING JCT,R7                   ADDRESSABILITY TO JCT
***********************************************************************
*        MAKE SURE IT'S A BATCH JOB
***********************************************************************
         CLC   BATJOB,JCTJOBID          IS THIS A BATCH JOB ?
         BE    CONT                     IF SO, CONTINUE
         OI    USERFLAG,X'80'           ELSE, NO REASON TO GO THRU EXIT
         B     RETURN
***********************************************************************
*        IF UNLIMITED TAPES ALLOWED, DON'T BOTHER WITH THIS EXIT
***********************************************************************
CONT     EQU   *
         TM    JCTUSER0,X'02'          UNLIMITED TAPES?
         BO    NOLIM                   IF SO, BRANCH
         CLI   JCTUSER2+3,X'FF'        UNLIMITED TAPES?
         BNE   CHKTEXT                 IF NOT, BRANCH
NOLIM    EQU   *
         OI    USERFLAG,X'80'          NO REASON TO GO THRU EXIT
         B     RETURN
***********************************************************************
*        IF EXEC STATEMENT, INITIALIZE TAPE COUNTER
***********************************************************************
CHKTEXT  EQU   *
         L     R8,TEXTADDR              GET ADDR OF TEXT IMAGE
         USING TEXT,R8                  SET ADDRESSABILITY
         TM    STRINDCS,EXECSTR         EXEC STATEMENT?
         BNO   CHKTYPE                  NO, CONTINUE
         MVI   TAPECNT,X'00'            IF SO, INITIALIZE TAPE COUNTER
         B     RETURN                   AND RETURN
***********************************************************************
*        CONTINUE PROCESSING ONLY DD STATEMENTS
***********************************************************************
CHKTYPE  EQU   *
         TM    STRINDCS,DDSTR           IS THIS A DD STATEMENT?
         BNO   RETURN                   IF NOT, FORGET IT
DDCARD   EQU   *
         TM    STRDINDC,DTXDDNM         DDNAME= STATEMENT?
         BO    RETURN                   YES, BYPASS
         TM    STRDINDC,DTXDYNAM        DYNAM STATEMENT?
         BO    RETURN                   YES, BYPASS
         TM    STRDINDC,DTXSYSIN        INPUT SPOOL FILE?
         BO    RETURN                   YES, BYPASS
         TM    STRDINDC,DTXDUMMY        DUMMY STATEMENT?
         BO    RETURN                   YES, BYPASS
         TM    STRDINDC,DTXSYOUT        SYSOUT STATEMENT?
         BO    RETURN                   YES, BYPASS
DDSTART  EQU   *
         LA    R9,STRDKEY               LOAD START OF TRUE TEXT
         ST    R9,SAVEADDR              SAVE THE ADDRESS
DDPARM   EQU   *
         CLI   0(R9),ENDK               END OF TEXT STRING?
         BE    DDEND                    YES, END
***********************************************************************
*        CHECK FOR DATASET NAME
***********************************************************************
DDSNAME  EQU   *
         CLI   0(R9),DSNAMEK            SEE IF DSNAME KEY
         BNE   DUNIT                    NO, BRANCH
         SLR   R10,R10                  CLEAR R10
         ICM   R10,B'0001',2(R9)        LOAD LENGTH OF DSN
         BZ    DDLOOP                   IF ZERO, BRANCH
         BNM   DSNSTD                   HIGH BIT NOT ON, STANDARD DSN
         CLI   4(R9),C'*'               IF 1ST CHAR = *, REFERBACK
         BE    DDLOOP                   IF SO, IGNORE
***********************************************************************
*        DSNAME PROBABLY A GDG
***********************************************************************
DSNGDG   EQU   *
         N     R10,=X'FFFFFF7F'         CLEAR HIGH BIT IF BYTE
         CH    R10,=H'2'                MAKE SURE THERE ARE 2 SUBPARMS
         BNE   DDLOOP                   IF NOT, SKIP IT
         LA    R5,3(R9)                 LOAD ADDR OF 1ST ENTRY
         IC    R10,0(R5)                LOAD LENGTH OF 1ST ENTRY
         CH    R10,=H'35'               SEE IF MAX LENGTH EXCEEDED
         BH    DDLOOP                   IF SO, SKIP IT
         BCTR  R10,0                    DEC FOR MACHINE LENGTH
         EX    R10,MOVEDSN1             MOVE INTO DSNAME FIELD
         LA    R10,1(R10)               INC TO TRUE LENGTH
         LA    R5,1(R10,R5)             INC TO 2ND ENTRY
         LA    R6,DSNAME                GET ADDR OF DSNAME FIELD
         AR    R6,R10                   GET ADDR FOR GEN #
         LR    R15,R10                  SAVE LENGTH OF 1ST PART DSN
         ICM   R10,B'0001',0(R5)        GET LENGTH OF 2ND PART DSN
         BZ    DDLOOP                   IF NOTHING THERE, SKIP IT
         AR    R15,R10                  ADD LENGTHS TOGETHER
         CH    R15,=H'42'               SEE IF TOTAL LENGTH EXCEEDS MAX
         BH    DDLOOP                   IF SO, SKIP IT
         LA    R15,2(R15)               ADD ON THE PARENS
         STCM  R15,B'0001',LDSNAME      STORE THE WHOLE LENGTH
         MVI   0(R6),C'('               OPEN PARENS
         LA    R6,1(R6)                 GO TO NEXT POSITION
         BCTR  R10,0                    DEC FOR MACHINE LENGTH
         EX    R10,MOVEDSN2             MOVE GEN # TO DSNAME
         LA    R6,1(R10,R6)             INC TO END OF DSNAME FIELD
         MVI   0(R6),C')'               CLOSE PARENS
         B     DDLOOP                   GO GET NEXT ENTRY
***********************************************************************
*        DSNAME PROBABLY STANDARD
***********************************************************************
DSNSTD   EQU   *
         CH    R10,=H'44'               CHECK LENGTH OF DSN
         BH    RETURN                   IF > 44, SKIP IT
         STCM  R10,B'0001',LDSNAME      STORE THE DSN LENGTH
         CLC   3(8,R9),=CL8'NULLFILE'   SEE IF DSN=NULLFILE
         BE    RETURN                   IF SO, SKIP IT
         BCTR  R10,0                    DEC FOR MACHINE LENGTH
         EX    R10,MOVEDSN              MOVE DSN TO TEMP ENTRY
         B     DDLOOP
***********************************************************************
*        CHECK FOR UNIT PARAMETER
***********************************************************************
DUNIT    EQU   *
         CLI   0(R9),UNITK              SEE IF UNIT= KEYWORD
         BNE   DAFF                     NO,BRANCH
         SLR   R5,R5                    CLEAR R5
         ICM   R5,B'0001',1(R9)         GET NUMBER OF POS SUBPARAMS
         BZ    DDLOOP                   ZERO, NO POS SUBPARAMS
         LA    R9,2(R9)                 LOAD START OF POS SUBPARAMS
         SLR   R10,R10                  CLEAR R10
         ICM   R10,B'0001',0(R9)        GET LENGTH OF SUBPARAM
         CH    R10,=H'3'                IS IT AN ABSOLUTE ADDRESS?
         BNE   DUNIT10                  IF NOT, CONTINUE
         CLI   1(R9),C'0'               DOES IT START WITH 0?
         BE    DUNIT10                  IF SO, CONTINUE
         CLI   1(R9),C'8'               DOES IT START WITH 8?
         BE    DUNIT10                  IF SO, CONTINUE
         CLI   1(R9),C'A'               DOES IT START WITH A?
         BNE   CANJOB1                  IF NOT, CANCEL THE JOB
DUNIT10  EQU   *
         LTR   R10,R10                  IS LENGTH 0?
         BZ    DUNIT20                  IF SO, SKIP IT
         BCTR  R10,0                    DEC FOR MACHINE LENGTH
         EX    R10,MOVEUNIT             MOVE UNIT TO TEMP ENTRY
         LA    R10,1(R10)               INC FOR ORIGINAL LENGTH
DUNIT20  EQU   *
         LA    R9,1(R10,R9)             INC TO NEXT ENTRY
         BCT   R5,DUNIT1                IF NOT ZERO, PROCESS UNIT COUNT
         B     DDLOOP                   ELSE, DONE WITH UNIT=
***********************************************************************
*        CHECK FOR UNIT COUNT
***********************************************************************
DUNIT1   EQU   *
         LR    R5,R9                    SAVE POINTER TO UNIT COUNT
         ICM   R10,B'0001',0(R9)        GET LENGTH OF UNIT COUNT
         LTR   R10,R10                  CHECK FOR ZERO
         BE    DDLOOP                   IF SO, SKIP IT
         LA    R9,1(R9)
DUNIT30  EQU   *
         CLI   0(R9),C'0'               SEE IF NUMERIC
         BL    DDLOOP                   IF NOT, SKIP IT
         CLI   0(R9),C'9'               SEE IF NUMERIC
         BH    DDLOOP                   IF NOT, SKIP IT
         LA    R9,1(R9)                 CONTINUE TO CHECK
         BCT   R10,DUNIT30              LOOP TIL DONE
         LR    R9,R5                    RESTORE R9
         ICM   R10,B'0001',0(R9)        GET LENGTH OF UNIT COUNT
         BCTR  R10,0                    DEC FOR MACHINE LENGTH
         EX    R10,PACKIT               PACK UNIT COUNT
         LA    R10,1(R10)               INC FOR ORIGINAL LENGTH
         CVB   R5,DOUBLE                CONVERT TO BINARY
         ST    R5,UNITCT                SAVE UNIT COUNT
         B     DDLOOP
***********************************************************************
*        DD UNIT=AFF
***********************************************************************
DAFF     EQU   *
         CLI   0(R9),AFFMK              SEE IF UNIT=AFF= KEY
         BNE   DDLOOP                   IF NOT, BRANCH
         MVC   UNIT(8),=CL8'IGNORE'     IF SO, IGNORE THE UNIT
         B     DDLOOP
***********************************************************************
*        END OF DD PARAMETER - INC POINTER TO THE NEXT ONE
***********************************************************************
DDLOOP   EQU   *
         L     R9,SAVEADDR              RESTORE START ADDRESS
         SLR   R5,R5                    CLEAR R5
         LA    R9,1(R9)                 INC PAST KEYWORD
         ICM   R5,B'0001',0(R9)         GET SUBPARM COUNT
         BNZ   DDLOOP1                  IF SOME, BRANCH
         LA    R9,1(R9)                 ELSE, INC PAST COUNT
         B     DDLOOP5                  AND GET OUT
DDLOOP1  EQU   *
         LA    R9,1(R9)                 INC PAST COUNT
DDLOOP2  EQU   *
         SLR   R6,R6                    CLEAR R6
         ICM   R6,B'0001',0(R9)         GET PARAMETER LENGTH
         BNM   DDLOOP3                  IF HIGH BIT NOT ON, ONLY 1
         N     R6,=X'FFFFFF7F'          TURN OFF HIGH BIT
         LA    R9,1(R9)                 INC PAST CONTROL BYTE
         B     DDLOOP4                  AND BRANCH
DDLOOP3  EQU   *
         LA    R6,1                     SET PARM COUNT TO 1
DDLOOP4  EQU   *
         SLR   R10,R10                  CLEAR R10
         ICM   R10,B'0001',0(R9)        GET PARM LENGTH
         LA    R9,1(R10,R9)             INC PAST PARM
         BCT   R6,DDLOOP4               LOOP TIL PARMS PROCESSED
         BCT   R5,DDLOOP2               LOOP TIL PARMS PROCESSED
DDLOOP5  EQU   *
         ST    R9,SAVEADDR              SAVE NEW ADDRESS
         B     DDPARM                   CONTINUE
***********************************************************************
*        END OF DD STATEMENT, CHECK FOR TAPE
***********************************************************************
DDEND    EQU   *
         CLC   UNIT,=CL8' '             WAS A UNIT SPECIFIED?
         BE    LOCATE                   NOPE, MUST DO A LOCATE
         CLC   UNIT(4),=CL4'TAPE'       IS THE UNIT A TAPE?
         BE    COUNTAPE                 IF SO, GO COUNT IT
         CLC   UNIT(2),=CL2'34'         CHECK FOR 34XX ALSO
         BE    COUNTAPE                 IF SO, GO COUNT IT
         B     RETURN                   ELSE, TAKE NORMAL RETURN
***********************************************************************
*        UNIT NOT SPECIFIED, TRY A LOCATE ON THE DATASET NAME
***********************************************************************
LOCATE   EQU   *
         MVC   DSN,DSNAME               SAVE THE DATA SET NAME
         LOCATE LOCLIST                 TRY THE LOCATE
         LTR   R15,R15                  SUCCESSFUL?
         BNZ   LOCGDG                   IF NOT, TRY A GENERIC LOCATE
FOUND    EQU   *
         CLC   LOCAREA(2),=H'0'         ANY VOLUME ENTRIES?
         BE    RETURN                   IF NOT, FORGET IT
         CLI   LOCAREA+6,X'00'          MAKE SURE THERE IS A VOLSER
         BE    RETURN                   IF NOT, VSAM LIED
         TM    LOCAREA+4,X'80'          TAPE UNIT?
         BO    COUNTAPE                 YES, GO COUNT IT
         B     RETURN                   ELSE, FORGET IT
***********************************************************************
*        LOCATE FAILED, TRY SUPERLOCATE FOR A GDG
***********************************************************************
LOCGDG   EQU   *
         SLR   R2,R2                    CLEAR R2 FOR TAPE COUNTER
         GETMAIN R,LV=5000              GET WORK AREA FOR GEN LOCATE
         ST    R1,GENWORK               SAVE THE ADDRESS
         ST    R1,GENADDR               ALSO SAVE IT FOR LATER
         MVC   GENFLAG,=X'05201100'     SET UP FLAG FOR INITIAL LOCATE
         XC    GENX1,GENX1              CLEAR OUT 3RD WORD
         XC    GENX2,GENX2              CLEAR OUT 5TH WORD
         LA    R6,LDSNAME               GET ADDR OF GENERIC NAME
         ST    R6,GENNAME               STORE IT
         L     R6,GENADDR               GET ADDR OF GENERIC WORK AREA
         MVC   0(4,R6),=X'13880004'     INIT THE WORK BUFFER LENGTH
         LA    R1,GENPARM               LOAD PARAMETER ADDRESS
         SVC   26                       DO THE GENERIC LOCATE
         LTR   R15,R15                  CHECK FOR ERRORS
         BZ    LOCGDG0                  IF NOT, CONTINUE
         B     ENDGDG                   ELSE, FORGET IT
***********************************************************************
*        NOW DO LOCATES ON EACH GDG
***********************************************************************
LOCGDG0  EQU   *
         LH    R8,2(R6)                 LOAD LENGTH OF AREA
         SH    R8,=H'4'                 SUBTRACT LENGTH OF PREFIX
         SRDA  R8,32                    SHIFT TO ODD REGISTER OF PAIR
         D     R8,=F'45'                DIVIDE BY LENGTH OF EACH ENTRY
         LTR   R5,R9                    TEST NUMBER OF DSNAMES RETURNED
         BZ    ENDGDG                   IF NONE, FORGET IT
         BM    ENDGDG                   IF NEGATIVE, FORGET IT
         LA    R6,4(R6)                 POINT TO FIRST DSNAME
LOCGDG1  EQU   *
         CLI   0(R6),C'A'               IS THIS A GDG?
         BNE   NEXTENT                  IF NOT, SKIP IT
         SLR   R9,R9                    CLEAR R9
         IC    R9,LDSNAME               LOAD BASE DSN LENGTH
         LA    R9,2(R9,R6)              POINT PAST TYPE, BASE, AND '.'
         CLI   0(R9),C'G'               POSSIBLE GDG?
         BNE   NEXTENT                  NOPE
         CLI   5(R9),C'V'               POSSIBLE GDG?
         BNE   NEXTENT                  NOPE
         CLI   8(R9),C' '               POSSIBLE GDG?
         BNE   NEXTENT                  NOPE
         MVC   DOUBLE,0(R9)             SAVE DSN SUFFIX
         OC    DOUBLE,GDGMASK           TEST NUMERIC POSITIONS
         CLC   DOUBLE,0(R9)             SEE IF CHANGED
         BNE   NEXTENT                  YEP, NOT A GDG
         MVC   DSNAME,1(R6)             GET THE COMPLETE DATASET NAME
         MVC   DSN,1(R6)                GET THE COMPLETE DATASET NAME
         LOCATE LOCLIST                 DO THE LOCATE
         LTR   R15,R15                  CHECK FOR ERRORS
         BZ    LOCGDG2                  IF NONE, CONTINUE
         B     NEXTENT                  AND CONTINUE
LOCGDG2  EQU   *
         CLC   LOCAREA(2),=H'0'         ANY VOLUME ENTRIES?
         BE    NEXTENT                  NOPE, FORGET IT
         CLI   LOCAREA+6,X'00'          MAKE SURE THERE'S A VOLSER
         BE    NEXTENT                  THERE ISN'T, SO FORGET IT
         TM    LOCAREA+4,X'80'          TAPE UNIT?
         BNO   NEXTENT                  IF NOT, CONTINUE WITH NEXT ONE
         LA    R2,1(R2)                 COUNT THE TAPE UNIT
NEXTENT  EQU   *
         LA    R6,45(R6)                GO TO THE NEXT DATASET NAME
         BCT   R5,LOCGDG1               LOOP THRU NAMES
ENDGDG   EQU   *
         L     R1,GENADDR               GET ADDR FOR FREEMAIN
         FREEMAIN R,LV=5000,A=(R1)      FREE GENERIC LOCATE AREA
         ST    R2,UNITCT                SET THE TAPE UNIT COUNT
         LTR   R2,R2                    ANY TAPES TO BE COUNTED?
         BE    RETURN                   IF NOT, FORGET IT
***********************************************************************
*        COUNT TAPES (IF ANY) AND CHECK FOR MAX EXCEEDED
***********************************************************************
COUNTAPE EQU   *
         L     R10,UNITCT               GET UNIT COUNT
         LTR   R10,R10                  ANYTHING THERE?
         BNZ   COUNTAP1                 IF SO, OK
         LA    R10,1                    ELSE, SET TO 1
COUNTAP1 EQU   *
         SLR   R5,R5                    CLEAR R5
         ICM   R5,B'0001',TAPECNT       GET CURRENT TAPE COUNTER
         AR    R5,R10                   COUNT ANOTHER ONE (OR MORE)
         STCM  R5,B'0001',TAPECNT       RESET TAPE COUNT
         SLR   R6,R6                    CLEAR R6
         ICM   R6,B'0001',JCTUSER2+3    GET MAX TAPES ALLOWED
         CR    R5,R6                    MAX TAPES EXCEEDED?
         BNH   RETURN                   IF NOT, TAKE NORMAL RETURN
***********************************************************************
*        CANCEL IF MAX TAPES PER STEP EXCEEDED
***********************************************************************
CANJOB0  EQU   *
         MVC   WTOLIST(LWTO0),WTO0      WRITE ERROR TO LOG
         $$WTO WTOLIST
         B     CANJOB                   CANCEL JOB
***********************************************************************
*        CANCEL IF DEVICE ADDRESS SPECIFIED
***********************************************************************
CANJOB1  EQU   *
         MVC   WTOLIST(LWTO1),WTO1      WRITE ERROR TO LOG
         $$WTO WTOLIST
CANJOB   EQU   *
         OI    USERFLAG,X'80'           DON'T TAKE THIS EXIT ANYMORE
         LR    R1,R13                   GET ADDR OF SAVE AREA
         L     R13,4(R13)               RESTORE ADDR OF PREV SAVE AREA
         FREEMAIN R,LV=LDATA,A=(R1)     FREE PROGRAM SAVE AREA
         RETURN (14,12),RC=8            RESTORE REGISTERS & RETURN
RETURN   EQU   *
         LR    R1,R13                   GET ADDR OF SAVE AREA
         L     R13,4(R13)               RESTORE ADDR OF PREV SAVE AREA
         FREEMAIN R,LV=LDATA,A=(R1)     FREE PROGRAM SAVE AREA
RETURNX  EQU   *
         RETURN (14,12),RC=0            RESTORE REGISTERS & RETURN
********************** CONSTANTS *************************************
* DATA TO BE USED TO INIT PART OF THE GETMAIN'ED AREA
CDATA    DS    0F
LIST1    CAMLST NAME,*,,*
IUNITCT  DC    F'0'
IDSNAME  DC    CL44' '
IUNIT    DC    CL8' '
MOVEL    EQU   *-CDATA
*
         LTORG
* OTHER CONSTANTS
BATJOB   DC    CL3'JOB'
GDGMASK  DC    C'G0000V00'
MOVEDSN  MVC   DSNAME(0),3(R9)
MOVEDSN1 MVC   DSNAME(0),1(R5)
MOVEDSN2 MVC   0(0,R6),1(R5)
MOVEUNIT MVC   UNIT(0),1(R9)
PACKIT   PACK  DOUBLE,1(0,R9)
WTO0     WTO   '$EXIT006 MAX TAPES PER STEP EXCEEDED FOR THIS JOB CLASSX
                - JOB WILL BE CANCELED',ROUTCDE=(11),MF=L
LWTO0    EQU   *-WTO0
WTO1     WTO   '$EXIT006 SPECIFIC UNIT ADDRESS NOT ALLOWED - JOB WILL BX
               E CANCELED',ROUTCDE=(11),MF=L
LWTO1    EQU   *-WTO1
*
***********************  DSECTS  *************************************
*  DSECT FOR GETMAIN'ED AREA
WORKAREA DSECT
SAVEAREA DS    18F               SAVE AREA
SAVEADDR DS    F                 SAVE TEXT ADDRESS
GENADDR  DS    A                 ADDR OF WORK AREA FOR GENERIC LOCATE
DOUBLE   DS    D                 DOUBLE WORD FOR CONVERT TO BINARY
WTOLIST  DS    CL120             *** MUST START ON A FULL WORD ***
LDSNAME  DS    X               / DATASET NAME LENGTH \
DSN      DS    CL44            \    DATASET NAME     /
LOCAREA  DS    XL265             WORK AREA FOR LOCATE
*
GENPARM  DS    0F                PARAMETERS FOR GENERIC LOCATE
GENFLAG  DS    F
GENNAME  DS    A
GENX1    DS    A
GENWORK  DS    A
GENX2    DS    A
*
* DATA IN GETMAIN'ED AREA TO BE INITIALIZED
DATA     DS    0F
LOCLIST  DS    XL16
UNITCT   DS    F
DSNAME   DS    CL44
UNIT     DS    CL8
*
LDATA    EQU   *-WORKAREA
* END OF GETMAIN'ED AREA
*
* DSECT FOR THE 4-WORD PARAMETER LIST
PARMLIST DSECT
USERADDR DS    F
TEXTADDR DS    F
DTEADDR  DS    F
JCTADDR  DS    F
*
* DSECT FOR THE 16-BYTE USER AREA
USERAREA DSECT
USERFLAG DS    XL1
TAPECNT  DS    XL1
         DS    XL14
*
TXTEX006 CSECT
         $MODEND
         END  ,
