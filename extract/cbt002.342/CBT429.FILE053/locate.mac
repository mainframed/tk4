***********************************************************************
*
*        LOCATE IS A TSO COMMAND PROCESSOR USED TO LOCATE A NAMED
*        MODULE IN EITHER THE LINK PACK AREA OR VIA THE LINK LIST.
*        RELEVANT INFORMATION AND LOCATION IS DISPLAYED TO THE USER.
*
***********************************************************************
         MACRO
&LABEL   $PROLOG &LV=0
.**********************************************************************
.*
.*       THIS MACRO WILL PROVIDE ENTRY LINKAGE AND OPTIONALLY
.*       MULTIPLE BASE REGISTERS.  ALSO, VIA THE 'LV=' KEYWORD
.*       PROVIDE ADDITIONAL USER STORAGE (APPENDED TO THE
.*       SAVE AREA) ADDRESSABLE FROM REG 13.  IF NO OPERANDS
.*       ARE CODED, REG 12 IS ASSUMED THE BASE. EXAMPLE:
.*              SECTNAME $PROLOG          = STANDARD REG 12 BASE
.*              SECTNAME $PROLOG 5        = STANDARD, REG 5 BASE
.*              SECTNAME $PROLOG 10,LV=20 = ADD 20 BYTES TO SAVE AREA
.*                                             REG 10 IS BASE
.*              SECTNAME $PROLOG R10,R11  = REGS 10 AND 11 ARE BASES
.*
.**********************************************************************
         LCLA  &AA,&AB,&AC
         GBLB  &PRORG
&AC      SETA  4096
&LABEL   CSECT
         B     32(R15)             BRANCH AROUND
         DC    AL1(26)
         DC    CL8'&LABEL'         CSECT NAME
         DC    C'-'
         DC    CL8'&SYSDATE'       COMPILE DATE
         DC    C'-'
         DC    CL8'&SYSTIME'       COMPILE TIME
         CNOP  0,4                 ALIGNMENT
         STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R12,R15             LOAD BASE REG
         USING &LABEL,R12          INFORM ASSEMBLER
         AIF   (&LV GT 4023).MERR
         LA    R0,&LV+72           LOAD REG 0 WITH LENGTH VARIABLE
         GETMAIN R,LV=(0)          GET CORE FOR SAVEAREA AND USER
         AIF   (&LV+72 LE 256).XC2
         AIF   (&LV+72 LE 512).XC1
         MVI   0(R1),X'00'         MOVE X'00' TO FIRST BYTE
         LR    R2,R1               SAVE POINTER IN EVEN REG
         LA    R4,1(R1)            SET RECEIVING POINTER
         LR    R5,R0               SET RECEIVING LENGTH
         BCTR  R5,R0               DECREMENT LENGTH
         LA    R5,0(R5)            CLEAR HIGH ORDER BYTE
         LA    R3,1                SET SENDING LENGTH
         MVCL  R4,R2               INSTRUCTION PADS WITH X'00'
         AGO   .STORE
.XC1     ANOP
         XC    256(&LV-184,R1),256(R1)  CLEAR SAVE AREA
         XC    0(256,R1),0(R1)          CLEAR SAVE AREA
         AGO   .STORE
.XC2     ANOP
         XC    0(&LV+72,R1),0(R1)       CLEAR SAVE AREA
.STORE   ANOP
         ST    R13,4(R1)           SAVE BACK CHAIN
         ST    R1,8(R13)           SET FORWARD CHAIN
         LR    R11,R1              SAVE NEW SAVEAREA ADDRESS
         L     R15,16(R13)         RESTORE REG 15
         ST    R0,16(R13)          SAVE SAVEAREA LENGTH
         LM    R0,R1,20(R13)       RESTORE REGS USED IN GETMAIN
         LR    R13,R11             SET SAVEAREA POINTER
         AIF   (N'&SYSLIST EQ 0).MEND
         AIF   ('&SYSLIST(1)' EQ 'R12').SKIPIT
         AIF   ('&SYSLIST(1)' EQ '12').SKIPIT
         LA    &SYSLIST(1),&LABEL  LOAD REQUESTED BASE REG
         DROP  R12                 DROP ASSUMED BASE REG
         USING &LABEL,&SYSLIST(1)  INFORM ASSEMBLER
.SKIPIT  ANOP
&AA      SETA  2
.LOOP    ANOP
         AIF   (&AA GT N'&SYSLIST).MEXIT
&AB      SETA  &AA-1
         LA    &SYSLIST(&AA),2048(&SYSLIST(&AB))  LOAD NEXT BASE REG
         LA    &SYSLIST(&AA),2048(&SYSLIST(&AA))  LOAD NEXT BASE REG
         USING &LABEL+&AC,&SYSLIST(&AA) INFORM ASSEMBLER
&AC      SETA  &AC+4096
&AA      SETA  &AA+1
         AGO   .LOOP
.MEXIT   ANOP
         AIF   (&PRORG).MEX2
         SPACE
         $REGS
         SPACE
.MEX2    ANOP
&AA      SETA  &LV+72
         MNOTE *,'TOTAL STORAGE AREA RECEIVED = &AA'
         MEXIT
.MEND    ANOP
         MNOTE *,'NO REGISTER SPECIFIED - R12 ASSUMED'
         AGO   .MEXIT
.MERR    ANOP
         MNOTE 12,'LV > 4023 - REQUEST IGNORED'
         AGO   .MEXIT
         MEND
         MACRO
         $REGS
         GBLB  &PRORG
         AIF   (&PRORG).MEX2
&PRORG   SETB  1
 SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
 SPACE
REG0     EQU   0
REG1     EQU   1
REG2     EQU   2
REG3     EQU   3
REG4     EQU   4
REG5     EQU   5
REG6     EQU   6
REG7     EQU   7
REG8     EQU   8
REG9     EQU   9
REG10    EQU   10
REG11    EQU   11
REG12    EQU   12
REG13    EQU   13
REG14    EQU   14
REG15    EQU   15
 SPACE
.MEX2    ANOP
       MEND
         MACRO
&LABEL   $EPILOG &RC
&LABEL   LR    R1,R13              GET SAVEAREA ADDRESS
         L     R13,4(R13)          GET BACK CHAIN POINTER
         L     R0,16(R13)          GET SAVEAREA LENGTH
         ST    R15,16(R13)         SAVE REGISTER 15 (RETCODE)
         FREEMAIN R,LV=(0),A=(1)   FREE SAVEAREA
         LM    R14,R12,12(R13)     RESTORE CALLERS REGS
         AIF   (T'&RC EQ 'O').SPEC
         LA    R15,&RC             SET RETURN CODE
.SPEC    ANOP
         BR    R14                 RETURN TO CALLER
         MEND
LOCATE   $PROLOG
         USING CPPL,R1        ADDRESSABILITY FOR CPPL
         MVC   CMDUPT,CPPLUPT COPY UPT ADDRESS
         MVC   CMDECT,CPPLECT COPY ECT ADDRESS
         MVC   CMDCBUF,CPPLCBUF COPY ADDRESS OF COMMAND BUF
         DROP  R1
         LA    R1,CMDUPT      PROVIDE LIST FOR PARSE
         LINK  EP=IKJPARS     PARSE COMMAND
         L     R2,CMDANSR     GET POINTER TO ANSWER AREA
         USING IKJPARMD,R2    PROVIDE ADDRESSABILITY
         L     R1,IKJOPT      GET POINTER TO OPERAND
         LH    R2,IKJOPT+4    GET SIZE OF OPERAND
         DROP  R2
         BCTR  R2,R0          DECREMENT FOR EXECUTE
         EX    R2,MOVENAME    MOVE TO LIST FOR LOAD
         MVC   BLDLNAME(8),NAME MOVE NAME TO BLDL LIST
         MVC   MSG2NAME(8),NAME MOVE NAME TO MSG2
         L     R3,16          GET CVT ADDR
         L     R15,188(R3)    ACTIVE LPA QUEUE ADDRESS
         L     R15,0(R15)     1ST CDE ON THE QUEUE
         LA    R15,0(R15)     CLEAR HIGH ORDER FOR ICM
         LTR   R15,R15        ANYTHING ON THE QUEUE?
CDELOOP  BZ    DIRSRCH        NO, SEARCH THE LPA DIRECTORY
         CLC   NAME,8(R15)    NAMES EQUAL?
         BE    CDECHK         YES, FOUND
         ICM   R15,7,1(R15)   GET NEXT CDE POINTER
         B     CDELOOP        CHECK IT
CDECHK   XC    RETCODE,RETCODE INDICATE MODULE FOUND
         USING LPDE,R15       INFORM THE ASSEMBLER
         TM    LPDEATTR,LPDEMIN MINOR CDE?
         BZ    CDEMAJ         NO, CONTINUE
         L     R15,LPDEXLP    YES, COPY TRUE NAME'S CDE ADDR
         MVC   TRUENM,LPDENAME COPY TRUE NAME
CDEMAJ   L     R4,LPDEXLP     GET CDE EXTENT LIST ADDR
         S     R4,=F'24'      MAKE EXTENT LIST ADDRESSABLE AS LPDE
         B     LPTRUE         GO TO COMMON MSG ROUTINE
         DROP  R15
DIRSRCH  LM    R0,R1,NAME     PICK UP THE NAME
         L     R6,352(R3)     LPA SEARCH ROUTINE ADDR
         DS    0Y(R8,R9)      ROUTINES USES THESE REGISTERS
SRCHLPA  BALR  R14,R6         SEARCH LPA DIRECTORY
         B     GOTIT          IT'S THERE
         B     NOTLPA         BRANCH IF NOT THERE
GOTIT    XC    RETCODE,RETCODE INDICATE MODULE FOUND
         LR    R4,R0          PUT LPDE ADDR WHERE IT CAN DO SOME GOOD
         USING LPDE,R4        INFORM THE ASSEMBLER
         TM    LPDEATTR,LPDEMIN  MINOR LPDE?
         BZ    LPTRUE         NO, PROCESS MAJOR
         MVC   TRUENM,LPDEMJNM YES, COPY TRUE NAME
         LM    R0,R1,LPDEMJNM PUT IT IN REGS
         B     SRCHLPA        GET MAJOR LPDE
LPTRUE   UNPK  LENGTH(7),LPDEXTLN+1(4) UNPACK LENGTH FOR PRINT
         TR    LENGTH(6),TRTABLE-240 MAKE PRINTABLE
         MVI   LENGTH+6,C' '  CLEAR GARBAGE FROM UNPACK
         UNPK  ADDRESS(7),LPDEXTAD+1(4) UNPACK ADDRESS FOR PRINT
         TR    ADDRESS(6),TRTABLE-240 MAKE PRINTABLE
         MVI   ADDRESS+6,C' ' CLEAR GARBAGE FROM UNPACK
         DROP  R4
LPAMSG   CLI   TRUENM,C' '    IS THIS AN ALIAS?
         BNE   TPUTA          YES, ISSUE ALIAS TPUT
         TPUT  MSG1,LMSG1     MESSAGE WITHOUT ALIAS NAME
         B     NOTLPA         SEE IF IN LNKLST ALSO
TPUTA    TPUT  MSG1,LMSG1A    MESSAGE WITH ALIAS NAME
NOTLPA   BLDL  0,LIST         LOCATE MODULE IN LINK/STEP LIB
         LTR   R15,R15        CHECK RETURN CODE
         BNZ   EXIT           NOT FOUND, EXIT
         XC    RETCODE,RETCODE INDICATE MODULE FOUND
         TM    BLDLC,X'80'    IS THIS AN ALIAS?
         BZ    NOTALIAS       NO, MAJOR NAME
         MVC   MODTYPE(5),=C'MINOR' INDICATE MODULE TYPE
NOTALIAS CLI   BLDLZ,X'00'    PRIVATE LIBRARY?
         BE    LIBDONE        YES, ALL SET
         MVC   LIBTYPE(12),=C'JOB/STEP LIB' MODIFY MESSAGE TEXT
         CLI   BLDLZ,X'01'    LINKLIB/LINK LIST LIBRARY?
         BH    LIBDONE        NO, ALL SET
         MVC   LIBTYPE(12),=C'LINKLIST LIB' MODIFY MESSAGE TEXT
         CLI   BLDLK,X'00'    WAS IT LINKLIB ITSELF?
         BNE   LIBDONE        NO, FILL IN CONCATINATION NUMBER
         MVC   LIBTYPE(15),=CL15'SYS1.LINKLIB' MODIFY MESSAGE TEXT
         B     AROUND         SKIP CONCATINATION NUMBER
LIBDONE  SR    R1,R1          CLEAR FOR IC
         IC    R1,BLDLK       PICK UP CONCATINATION NUMBER
         XC    DBLWD,DBLWD    CLEAR FOR CONVERT
         CVD   R1,DBLWD       CONVERT TO DECIMAL
         UNPK  CONCAT(2),DBLWD+6(2) UNPACK FOR PRINT
         OI    CONCAT+1,C'0'  MAKE PRINTABLE
         MVI   CONCAT+2,C')'  ADD TRAILING PAREN
AROUND   UNPK  TTR(7),BLDLTTR(4) UNPACK FOR PRINT
         MVI   TTR+6,C' '     CLEAR LAST UNPACKED
         TR    TTR(6),TRTABLE-240 MAKE PRINTABLE
         TPUT  MSG2,LMSG2     ISSUE MESSAGE
EXIT     OC    RETCODE,RETCODE ANY MESSAGE ISSUED (MODULE FOUND) ?
         BZ    RETURN         YES, ALL DONE
         TPUT  MSG0,LMSG0     INFORM USER
RETURN   IKJRLSA CMDANSR      RELEASE PARSE STORAGE
         L     R15,RETCODE    SET RETURN CODE
         $EPILOG
MOVENAME MVC   NAME(0),0(R1)  MOVE NAME FOR LOAD
*-------------------------------------------------------------------
LIST     DC    H'1',H'14'     BLDLLIST
BLDLNAME DC    CL8' '         BLDL NAME OF MODULE
BLDLTTR  DC    XL3'00'        TTR OF MODULE
BLDLK    DC    X'00'          CONCATINATION NUMBER
BLDLZ    DC    X'00'          LOCATION
BLDLC    DC    X'00'          ENTRY TYPE
*-------------------------------------------------------------------
MSG0     DS    0F
         DC    C'REQUESTED MODULE NOT FOUND IN EITHER LPA OR LNKLST'
LMSG0    EQU   *-MSG0                SIZE OF MESSAGE
*-------------------------------------------------------------------
MSG1     DS    0F
NAME     DC    CL8' '
         DC    C' IS: '
LENGTH   DC    CL6' '
         DC    C' BYTES AT '
ADDRESS  DC    CL6' '
LMSG1    EQU   *-MSG1                SIZE OF MESSAGE
         DC    C' (ALIAS OF '
TRUENM   DC    CL8' ',C')'         TRUE NAME IF GIVEN NAME IS AN ALIAS
LMSG1A   EQU   *-MSG1                SIZE OF MESSAGE
*-------------------------------------------------------------------
MSG2     EQU   *
MSG2NAME DC    CL8' '
         DC    C' FOUND AS A '
MODTYPE  DC    C'MAJOR NAME, AT TTR '
TTR      DC    CL6' ',C' IN '
LIBTYPE  DC    C'PRIVATE LIB ('
CONCAT   DC    C'#)                '
LMSG2    EQU   *-MSG2         SIZE OF MESSAGE
*-------------------------------------------------------------------
TRTABLE  DC    C'0123456789ABCDEF' TRANSLATE TABLE
BLANKS   DC    CL81' '        BLANKS
DBLWD    DC    D'0'           WORKAREA
ADDR     DC    F'0'           ADDRESS WORK AREA
ECB      DC    F'0'           DUMB ECB FOR PARSE
RETCODE  DC    F'4'           RETURN CODE (AND MSG SWITCH)
CMDANSR  DC    F'0'           PARSE ANSWER AREA POINTER
CMDUPT   DC    F'0'           USER PROFILE TABLE POINTER
CMDECT   DC    F'0'           ENVIRONMENT CONTROL TABLE
CMDECB   DC    A(ECB)         ECB POINTER
CMDPCL   DC    A(IKJPCL)      ADDRESS OF IKJPARM
CMDANS   DC    A(CMDANSR)     PLACE TO PUT ANSWER
CMDCBUF  DC    F'0'           POINTER TO COMMAND BUFFER
         LTORG
IKJPCL   IKJPARM
IKJOPT   IKJIDENT 'MODULE NAME',MAXLNTH=8,FIRST=ALPHA,                 X
               OTHER=ALPHANUM,PROMPT='NAME OF MODULE TO LOCATE'
         IKJENDP
         IKJCPPL
         IHALPDE
         END
