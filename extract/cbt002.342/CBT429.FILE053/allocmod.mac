         PRINT NOGEN
         TITLE 'ALLOCMOD - MODULE DESCRIPTION AND FUNCTION'
***********************************************************************
*                                                                     *
*             MODULE NAME = ALLOCMOD                                  *
*                                                                     *
*             DESCRIPTIVE NAME =  DISPLAYS INFORMATION FOR DATA       *
*                                 SETS ALLOCATED TO TSO USER          *
*                                                                     *
*             FUNCTION =                                              *
*               THIS PROGRAM WILL DISPLAY INFORMATION FOR DATA SETS   *
*               ALLOCATED TO A TSO USER. INFORMATION IS EXTRACTED     *
*               FROM THE TIOT, JFCB AND FORMAT1 DSCB.                 *
*                                                                     *
*                OPERATION =                                          *
*                  GETMAIN WORK AREAS                                 *
*                  DEFINE DIALOG VARIABLES                            *
*                  CREATE TEMPORARY TABLE AND SET CRP TO TOP          *
*                  ESTABLISH ADDRESSABILITY TO THE TIOT               *
*                  LOOP THRU DDNAME ENTRIES FOUND IN THE TIOT         *
*                    OBTAIN DSCB FOR NEEDED ENTRIES                   *
*                    CONSTRUCT TABLE ENTRIES USING INFORMATION        *
*                      FROM THE TIOT, JFCB AND FORMAT1 DSCB           *
*                  DISPLAY THE TEMPORARY TABLE                        *
*                    IF ENTER HIT, CONTINUE DISPLAY                   *
*                    IF END HIT, FINISH                               *
*                  CLOSE (DELETE) TEMPORARY TABLE                     *
*                  FREE GETMAIN'ED AREAS                              *
*                  EXIT                                               *
*                                                                     *
*             NOTES =                                                 *
*                                                                     *
*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *
*                    REGISTERS 0 TO 1  = WORK REGISTERS               *
*                    REGISTER  2       = ADDRESSABILITY TO TIOT       *
*                    REGISTER  3       = ADDRESSABILITY TO JFCB       *
*                    REGISTER  4       = LENGTH OF TIOT DD ENTRY      *
*                    REGISTER  5       = BINARY/DECIMAL/ZONED WORK REG*
*                    REGISTERS 7 TO 10 = WORK REGISTERS               *
*                    REGISTER  11      = MAX TIOT DD ENTRIES PROCESSED*
*                    REGISTER  12      = ADDRESSABILITY TO ALLOCMOD   *
*                    REGISTER  13      = SAVE AREA REGISTER AND       *
*                                        ADDRESSABILITY TO GETMAINED  *
*                                        WORK AREA                    *
*                    REGISTERS 14,15   = WORK REGISTERS               *
*                                                                     *
*             MACROS = GETMAIN, ISPCALL, OBTAIN, FREEMAIN, RETURN     *
*                                                                     *
*             ATTRIBUTES = RE-ENTRANT, RE-USABLE & RE-FRESHABLE       *
*                                                                     *
*             CHANGE ACTIVITY =                                       *
*                05/16/85  WRITTEN.      JWC.                         *
*                                                                     *
***********************************************************************
         EJECT
         TITLE 'ALLOCMOD - ISPCALL MACRO'
         MACRO
&LBL     ISPCALL &LIST,        CALL PARAMETERS                         X
               &EP=ISPLINK,                                            X
               &LISTLBL=,      LABEL FOR PARAMETER LIST (NON-REENT)    X
               &EPADDR=,       LABEL FOR ADDRESS OF EP OF ISPLINK      X
               &WKAREA=,       TO BUILD CALL LIST (REENTERANT CODE)    X
               &WKREG=,        WORK REGISTER (DEFAULT 1)               X
               &TRACE=         'OFF' OR BIT FOR TRACE MODE
.*  ONCE WKAREA, WKREG, AND TRACE ARE SPECIFIED, THEY ARE USED IN ALL
.*  SUBSEQUENT OCCURRENCES OF THIS MACRO, UNLESS THE PARAMETER IS
.*  EXPLICITLY CODED.
.*  NOTE: FIRST 4 BYTES OF WKAREA ARE USED TO STORE NUMERIC VALUES,
.*  WHICH ARE PRIMARILY LENGTH FIELDS.
         LCLA  &S,&T,&U,&TRCEMSK
         LCLB  &NUMSW
         LCLC  &NDX,&WKAR,&WKRG,&WKEP
         GBLC  &ISPRREG,&ISPRAR,&ISPTRC1,&ISPEP
         GBLA  &ISPTRC2
&NDX     SETC  '&SYSNDX'
&S       SETA  1               SUBSCRIPT FOR GOING THRU &LIST
***********************************************************************
         AIF   (T'&LBL NE 'O').L1
*                  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL
         AGO   .L2
.L1      ANOP
&LBL     DS    0H  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL
.L2      ANOP
         AIF   (T'&LIST NE 'O').A1
         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE PROVIDED ***'
         AGO   .EXIT
.A1      AIF   ('&LIST'(1,1) EQ '(').CHKTRCE
         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE ENCLOSED IN PARENTHESX
               ES ***'
         AGO   .EXIT
.****************** ANALYZE "TRACE" PARAMETER *************************
.CHKTRCE AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' NE '').TRCE4
         AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' EQ '').TRCEOFF
         AIF   ('&TRACE'(1,1) EQ '(').TRCEON
         AIF   ('&TRACE' EQ 'OFF').TRCEOFF
         MNOTE 12,'*** INVALID TRACE PARAMETERS ***'
         AGO   .EXIT
.TRCEON  AIF   (T'&TRACE(2) EQ 'N').TRCE2
.TRCE8   MNOTE 12,'*** TRACE BIT (2ND PARAMETER) MUST BE 0 - 7 ***'
         AGO   .EXIT
         EJECT
.TRCE2   AIF   (&TRACE(2) GE 0 OR &TRACE(2) LE 7).TRCE3
         AGO   .TRCE8
.TRCE3   ANOP
&ISPTRC1 SETC  '&TRACE(1)'     SET GLOBAL VARIABLE
&ISPTRC2 SETA  &TRACE(2)       SET GLOBAL VARIABLE
.TRCE4   ANOP
&U       SETA  0
&TRCEMSK SETA  255
&T       SETA  128
.TRCE5   AIF   (&U GT 7).CHKREG
         AIF   (&ISPTRC2 NE &U).TRCE7
.TRCE6   ANOP
&U       SETA  &U+1
&T       SETA  &T/2
         AGO   .TRCE5
.TRCE7   ANOP
&TRCEMSK SETA  &TRCEMSK-&T
         AGO   .TRCE6
.TRCEOFF ANOP
&ISPTRC1 SETC  ''              SET GLOBAL VARIABLE
.****************** ANALYZE "WKREG" PARAMETER *************************
.CHKREG  AIF   (T'&WKREG EQ 'O').A2
&ISPRREG SETC  '&WKREG'        SET GLOBAL VARIABLE
.A2      AIF   ('&ISPRREG' EQ '').A3
&WKRG    SETC  '&ISPRREG'
         AGO   .CHKAREA
.A3      ANOP
&ISPRREG SETC  '1'             SET GLOBAL VARIABLE
         AGO   .A2
.****************** SEE IF USING PROVIDED WORKAREA ********************
.CHKAREA AIF   (T'&WKAREA NE 'O' OR '&ISPRAR' NE '').RENT
         AIF   (T'&LISTLBL EQ 'O').B1
&WKAR    SETC  '&LISTLBL'
         AGO   .B2
.B1      ANOP
&WKAR    SETC  'ISPC&NDX'      LABEL FOR MACRO WORKAREA
.B2      ANOP
&T       SETA  4*(N'&LIST+1)   LENGTH OF MACRO WORKAREA
         B     &WKAR.+&T             BRANCH AROUND DATA         ISPCALL
&T       SETA  N'&LIST+1
&WKAR    DC    &T.F'0'               PARAMETER LIST             ISPCALL
.******************** BUILD PARAMETER LIST ****************************
.LOOP    AIF   (&S GT N'&LIST).ENDLOOP
         AIF   ('&LIST(&S)'(1,1) EQ '''').C1 TEST FOR LITERAL
         AIF   (T'&LIST(&S) EQ 'N').NUM      TEST FOR NUMERIC
         AIF   ('&LIST(&S)'(1,1) EQ '(').REG TEST FOR REG NOTATION
         LA    &WKRG,&LIST(&S)       LOAD DATA ADDR             ISPCALL
.ST      ANOP
&T       SETA  4*&S
         ST    &WKRG,&WKAR.+&T       STORE IN PARAM LIST        ISPCALL
         AIF   ('&ISPTRC1' EQ '' OR &S GT 1).C3           TRACE
         TM    &ISPTRC1,&TRCEMSK     IS TRACE BIT ON?     TRACE ISPCALL
         BZ    ISPT&NDX                                   TRACE ISPCALL
         AIF   ('&WKRG' EQ '1' OR '&WKRG' EQ 'R1').C4     TRACE
         LR    1,&WKRG               LOAD SRVC NAME ADDR  TRACE ISPCALL
         EJECT
.C4      AIF   ('&LIST(&S)'(1,1) EQ '''').C5 LITERAL?     TRACE
         LA    0,8                   LOAD LENGTH          TRACE ISPCALL
         AGO   .C6                                        TRACE
.C5      ANOP                                             TRACE
&U       SETA  K'&LIST(&S)-2   LENGTH OF SERVICE NAME     TRACE
         LA    0,&U                  LOAD LENGTH          TRACE ISPCALL
.C6      ANOP                                             TRACE
         SVC   93                    ISSUE TPUT SVC       TRACE ISPCALL
ISPT&NDX EQU   *                                          TRACE ISPCALL
.C3      ANOP
&S       SETA  &S+1
         AGO   .LOOP
.C1      AIF   (&S EQ 1).C2    SPF SERVICE NAME - LENGTH IS OK
&T       SETA  K'&LIST(&S)-2
         AIF   (&T GT 7).C2    LENGTH 8 OR GREATER IS OK
&T       SETA  &T+1            ADD FOR ONE BLANK
         LA    &WKRG,=CL&T.&LIST(&S) LOAD DATA ADDR             ISPCALL
         AGO   .ST
.C2      ANOP
         LA    &WKRG,=C&LIST(&S)     LOAD DATA ADDR             ISPCALL
         AGO   .ST
.NUM     AIF   (&NUMSW).NUM2
.*  NOTE: SPF WILL MODIFY LENGTH FIELDS, SO THEY CANNOT BE IN
.*  REENTERANT CODE.
         MVC   &WKAR.(4),=F'&LIST(&S)'                                 X
                                     MOVE NUMERIC VALUE         ISPCALL
&NUMSW   SETB  1
         AGO   .LA
.NUM2    MNOTE 12,'*** ONLY ONE NUMERIC ALLOWED PER ISPCALL MACRO - LISX
               T ITEM &S --&LIST(&S)-- IS SECOND OCCURRENCE ***'
         AGO   .EXIT
.LA      ANOP
         LA    &WKRG,&WKAR           LOAD DATA ADDR             ISPCALL
         AGO   .ST
.REG     ANOP
&T       SETA  4*&S
         ST    &LIST(&S),&WKAR.+&T                              ISPCALL
         AGO   .C3
.******************** USING PROVIDED WORKAREA *************************
.RENT    AIF   (T'&WKAREA EQ 'O').RENT2
&ISPRAR  SETC  '&WKAREA'       SET GLOBAL VARIABLE
.RENT2   ANOP
&WKAR    SETC  '&ISPRAR'
         AGO   .LOOP
         EJECT
.****************** GENERATE STATEMENTS FOR CALL **********************
.ENDLOOP ANOP
         OI    &WKAR.+&T,X'80'       TURN ON VL BIT             ISPCALL
.*       LA    1,&WKAR.+4                                       ISPCALL
.*       L     15,=V(&EP)                                       ISPCALL
.*       BALR  14,15                                            ISPCALL
         AIF   (T'&EPADDR EQ 'O').EP2
&ISPEP   SETC  '&EPADDR'
         LOAD  EP=ISPLINK
         ST    R0,&ISPEP
.EP2     ANOP
&WKEP    SETC  '&ISPEP'
         L     15,&WKEP
         LA    1,&WKAR.+4
         CALL  (15)
.EXIT    ANOP
***********************************************************************
         SPACE 2
         MEND
         EJECT
         TITLE 'ALLOCMOD - INITIALIZATION SECTION'
ALLOCMOD CSECT
***********************************************************************
*  INITIALIZATION SECTION - GETMAIN WORKAREA AND SAVE AREA CHAINING
***********************************************************************
         SAVE  (14,12),,ALLOCMOD_&SYSDATE_&SYSTIME   SAVE REGISTERS
         LR    R12,R15                 LOAD REG 12 WITH ENTRY ADDRESS
         USING ALLOCMOD,R12            ESTABLISH ADDRESSABILITY TO
*                                      PROGRAM CSECT
         GETMAIN R,LV=WORKLEN          GETMAIN DYNAMIC WORKAREA
         ST    R13,4(R1)               STORE ADDRESS PREVIOUS SAVEAREA
         ST    R1,8(,R13)              STORE ADDRESS OF CURRENT
*                                      SAVEAREA IN PREVIOUS SAVEAREA
         LR    R13,R1                  LOAD REG 13 WITH ADDRESS OF
*                                      CURRENT SAVEAREA
         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO
*                                      DYNAMIC WORKAREA
***********************************************************************
*  INITIALIZATION SECTION - SET DIALOG CONTROL, DEFINE VARIABLES
***********************************************************************
*                                      SET DIALOG CONTROL
         ISPCALL ('CONTROL','ERRORS','RETURN'),                        X
               WKAREA=PARMS,                                           X
               EPADDR=ISPADDR
VDEF1    EQU   *
*                                      DEFINE VARIABLES
         ISPCALL ('VDEFINE',DEFLIST1,ALRECFM,'CHAR',4)
         LTR   R15,R15                 DEFINE SUCCESSFUL?
         BZ    VDEF2                   YES, CONTINUE DEFINE
         B     VDEF10(R15)             CHECK RETURN CODE
VDEF2    EQU   *
         ISPCALL ('VDEFINE',DEFLIST2,ALDISP,'CHAR',5)
         LTR   R15,R15                 DEFINE SUCCESSFUL?
         BZ    VDEF3                   YES, CONTINUE DEFINE
         B     VDEF10(R15)             CHECK RETURN CODE
VDEF3    EQU   *
         ISPCALL ('VDEFINE',DEFLIST3,ALDSN,'CHAR',30)
         LTR   R15,R15                 DEFINE SUCCESSFUL?
         BZ    VDEF4                   YES, CONTINUE DEFINE
         B     VDEF10(R15)             CHECK RETURN CODE
VDEF4    EQU   *
         ISPCALL ('VDEFINE',DEFLIST4,ALDDNAM,'CHAR',8)
         B     VDEF10(R15)             CHECK RETURN CODE
VDEF10   EQU   *
         B     TBCREAT                 RC = 00 (CONTINUE)
         B     DEFERR04                RC = 04 (NOT VALID FOR VDEF)
         B     DEFERR08                RC = 08 (DISPLAY PANEL / MSG)
         B     DEFERR12                RC = 12 (NOT VALID FOR VDEF)
         B     DEFERR16                RC = 16 (DISPLAY PANEL / MSG)
         B     DEFERR20                RC = 20 (DISPLAY PANEL / MSG)
         EJECT
***********************************************************************
*  INITIALIZATION SECTION - CREATE TEMPORARY TABLE AND POINT TO TOP
***********************************************************************
TBCREAT  EQU   *
*                                      CREATE TABLE
         ISPCALL ('TBCREATE','ALLOCTBL',' ',NAMELIST,'NOWRITE','REPLACEX
               ')
         B     TBCREA10(R15)           CHECK RETURN CODE
TBCREA10 EQU   *
         B     TBTOP                   RC = 00 (CONTINUE)
         B     TBTOP                   RC = 04 (CONTINUE)
         B     CREERR08                RC = 08 (DISPLAY PANEL / MSG)
         B     CREERR12                RC = 12 (DISPLAY PANEL / MSG)
         B     CREERR16                RC = 16 (DISPLAY PANEL / MSG)
         B     CREERR20                RC = 20 (DISPLAY PANEL / MSG)
TBTOP    EQU   *
*                                      POSITION CRP AT TOP OF TABLE
         ISPCALL ('TBTOP','ALLOCTBL')
         B     TBTOP10(R15)            CHECK RETURN CODE
TBTOP10  EQU   *
         B     SETOBTAN                RC = 00 (CONTINUE)
         B     TOPERR04                RC = 04 (NOT VALID FOR TBTOP)
         B     TOPERR08                RC = 08 (NOT VALID FOR TBTOP)
         B     TOPERR12                RC = 12 (DISPLAY PANEL / MSG)
         B     TOPERR16                RC = 16 (NOT VALID FOR TBTOP)
         B     TOPERR20                RC = 20 (DISPLAY PANEL / MSG)
***********************************************************************
*  INITIALIZATION SECTION - CREATE PARAMETER LIST FOR 'OBTAIN'
***********************************************************************
SETOBTAN EQU   *
*                                      PARAMETER LIST FOR OBTAIN
         MVC   OPCODE,OPCOD            SET OP CODE FOR DSN SEARCH
         LA    R6,ALDSN1               ADDRESS OF FULL DSNAME
         ST    R6,DSNPTR
         LA    R6,ALVOL                ADDRESS OF VOLUME SERIAL
         ST    R6,VOLPTR
         LA    R6,WORK                 ADDRESS OF 160 BYTE WORK AREA
         ST    R6,WORKPTR
         MVI   WORKPTR,X'80'           INDICATE LAST PARAMETER IN LIST
***********************************************************************
*  INITIALIZATION SECTION - ESTABLISH ADDRESSABILITY TO TIOT DD ENTRY
***********************************************************************
         L     R2,16                   R2 - ADDRESS OF CVT
         L     R2,0(R2)                R2 - ADDR OF TCB/ASCB ADDR LIST
         L     R2,4(R2)                R2 - ADDRESS OF CURRENT TCB
         L     R2,12(R2)               R2 - ADDRESS OF TIOT (BEGINNING)
         LA    R2,24(R2)               R2 - ADDR OF TIOT (DD ENTRY)
         LA    R11,400                 R11 - SET MAX NUMBER TO LOOP
         EJECT
         TITLE 'ALLOCMOD - PROCESSING SECTION'
***********************************************************************
*  PROCESSING SECTION - EXTRACT DDNAME, VOLSER AND DSN
***********************************************************************
LOADTBL  EQU   *
         SLR   R4,R4                   R4 - LENGTH OF TIOT DD ENTRY
         ICM   R4,B'0001',0(R2)        LOAD LENGTH OF ENTRY
         LTR   R4,R4                   R4 - IS LENGTH OF ENTRY ZERO?
         BZ    DISPL1                  YES, DISPLAY TABLE
         MVI   DSNFLG,X'00'              ITIALIZE DSN FLAG
         MVC   ALDDNAM(8),SPACES       INITIALIZE ALLOCATED DDNAME
         MVC   ALDSN(30),SPACES        INITIALIZE ALLOCATED DSN(1ST 30)
         MVC   ALDSN1(30),SPACES       INITIALIZE ALLOCATED DSN(1ST 30)
         MVC   ALDSN2(14),SPACES       INITIALIZE ALLOCATED DSN(END)
         MVC   ALDISP(5),SPACES        INITIALIZE ALLOCATED DISP
         MVC   ALDSORG(5),SPACES       INITIALIZE ALLOCATED DSORG
         MVC   ALRECFM(4),SPACES       INITIALIZE ALLOCATED RECFM
         MVC   ALBLKSZ(5),SPACES       INITIALIZE ALLOCATED BLKSIZE
         MVC   ALRECL(5),SPACES        INITIALIZE ALLOCATED LRECL
         MVC   ALVOL(8),SPACES         INITIALIZE ALLOCATED VOLSER
         TM    1(R2),X'80'             HAS THIS TIOT ENTRY BEEN FREED?
         BO    NEXTIOT                 YES, PROCEED TO NEXT TIOT ENTRY
         MVC   ALDDNAM,4(R2)           GET DDNAME FROM TIOT
         L     R3,11(R2)               R3 - ADDRESS OF JFCB
         LA    R3,16(R3)               FIRST BYTE TO '00', ADJUST
         USING INFMJFCB,R3             ESTABLISH JFCB ADDRESSABILITY
         MVC   ALVOL(6),JFCBVOLS       GET VOLSER FROM JFCB
         MVC   ALDSN(30),JFCBDSNM      GET 1ST 30 CHARACTERS OF DSN
         MVC   ALDSN1(30),JFCBDSNM     GET 1ST 30 CHARACTERS OF DSN
         MVC   ALDSN2(14),JFCBDSNM+30  GET LAST 14 CHARACTERS OF DSN
         CLC   ALDSN2(14),SPACES       DSN LONGER THAN 30 CHARACTERS?
         BE    CHKDISP                 NO, GET DISPOSITION
         MVI   DSNFLG,X'FF'            YES, SET DSN FLAG
***********************************************************************
*  PROCESSING SECTION - WRITE FIRST 30 CHAR OF DSN TO TABLE
***********************************************************************
WRITDSN1 EQU   *
         MVC   VOLSAVE,ALVOL           SAVE VOLSER FOR NEXT LINE
         MVC   ALVOL,SPACES            CLEAR VOLSER FOR THIS LINE
         LA    R8,ALDSN1               R8 - INDEX FOR ALDSN1
         LA    R8,29(R8)               POINT TO END OF ALDSN1
         LA    R9,8                    R9 - MAX NUM OF CHAR TO VIEW
         LA    R10,1                   R10 - REPRESENTS 1 CHAR POSITION
FINDEND  EQU   *
         CLC   0(1,R8),=CL1'.'         IS THIS THE END OF LAST SEGMENT?
         BE    FOUNDIT                 YES, SAVE IT TO BE ADDED TO NEXT
         SR    R8,R10                  POINT AT PREVIOUS POSITION
         BCT   R9,FINDEND              GO CHECK FOR SEGMENT END
FOUNDIT  EQU   *
         MVC   ALDSN(30),SPACES        CLEAR ALDSN TO PREPARE FOR MOVE
         LA    R7,ALDSN                R7 - USED IN EXECUTED MOVE
         LA    R10,ALDSN1              FIND NUMBER OF CHARACTERS
         SR    R8,R10                      TO BE MOVED FROM
         EX    R8,MOVEDSN1                     ALDSN1 TO ALDSN
         B     REPLACE
         EJECT
***********************************************************************
*  PROCESSING SECTION - DISP, DSORG, RECFM, LRECL & BLKSIZE FROM JFCB
***********************************************************************
CHKDISP  EQU   *
         TM    JFCBIND2,JFCSHARE       DISPOSITION SHR?
         BNO   CHKTEMP                 NO, CHECK TEMP
         MVC   ALDISP(4),=CL4'SHR'     YES, SET DISP TO SHR
         B     CHKDSOR1                GO CHECK DSORG
CHKTEMP  EQU   *
         TM    JFCBIND2,JFCTEMP        DISPOSITION TEMP?
         BNO   CHKNEW                  NO, CHECK NEW
         MVC   ALDISP(4),=CL4'TEMP'    YES, SET DISP TO TEMP
         B     CHKDSOR1                GO CHECK DSORG
CHKNEW   EQU   *
         TM    JFCBIND2,JFCNEW         DISPOSITION NEW?
         BNO   CHKMOD                  NO, CHECK MOD
         MVC   ALDISP(4),=CL4'NEW'     YES, SET DISP TO NEW
         B     CHKDSOR1                GO CHECK DSORG
CHKMOD   EQU   *
         TM    JFCBIND2,JFCMOD         DISPOSITION MOD?
         BNO   CHKOLD                  NO, CHECK OLD
         MVC   ALDISP(4),=CL4'MOD'     YES, SET DISP TO MOD
         B     CHKDSOR1                GO CHECK DSORG
CHKOLD   EQU   *
         TM    JFCBIND2,JFCOLD         DISPOSITION OLD?
         BNO   SETDISP                 NO, SET DISP
         MVC   ALDISP(4),=CL4'OLD'     YES, SET DISP TO OLD
         B     CHKDSOR1                GO CHECK DSORG
SETDISP  EQU   *
         MVC   ALDISP(4),=CL4'????'    SET DISP TO ????
CHKDSOR1 EQU   *
         TM    JFCDSRG1,JFCORGIS       DSORG INDEXED SEQUENTIAL?
         BNO   CHKPS1                  NO, CHECK PHYSICAL SEQUENTIAL
         MVC   ALDSORG(2),=CL2'IS'     YES, SET DSORG TO IS
         B     CHKFMT1                 GO CHECK RECFM
CHKPS1   EQU   *
         TM    JFCDSRG1,JFCORGPS       DSORG PHYSICAL SEQUENTIAL?
         BNO   CHKDA1                  NO, CHECK DIRECT ACCESS
         MVC   ALDSORG(2),=CL2'PS'     YES, SET DSORG TO PS
         B     CHKFMT1                 GO CHECK RECFM
CHKDA1   EQU   *
         TM    JFCDSRG1,JFCORGDA       DSORG DIRECT ACCESS?
         BNO   CHKPO1                  NO, CHECK PARTITIONED
         MVC   ALDSORG(2),=CL2'DA'     YES, SET DSORG TO DA
         B     CHKFMT1                 GO CHECK RECFM
CHKPO1   EQU   *
         TM    JFCDSRG1,JFCORGPO       DSORG PARTITIONED?
         BNO   CHKU1                   NO, CHECK UNMOVABLE
         MVC   ALDSORG(2),=CL2'PO'     YES, SET DSORG TO PO
         B     CHKFMT1                 GO CHECK RECFM
CHKU1    EQU   *
         TM    JFCDSRG1,JFCORGU        DSORG UNMOVABLE?
         BNO   OBTAINIT                NO, OBTAIN FORMAT 1 DSCB
         MVC   ALDSORG(2),=CL2'U'      YES, SET DSORG TO U
         EJECT
CHKFMT1  EQU   *
         TM    JFCRECFM,JFCUND         RECFM UNDEFINED?
         BNO   CHKF1                   NO, CHECK FIXED
         MVC   ALRECFM(1),=CL1'U'      YES, SET RECFM TO U
         B     CHKS1                   GO CHECK SPANNED
CHKF1    EQU   *
         TM    JFCRECFM,JFCFIX         RECFM FIXED?
         BNO   CHKV1                   NO, CHECK VARIABLE
         MVC   ALRECFM(1),=CL1'F'      YES, SET RECFM TO F
         B     CHKB1                   GO CHECK BLOCKED
CHKV1    EQU   *
         TM    JFCRECFM,JFCVAR         RECFM VARIABLE?
         BNO   OBTAINIT                NO, OBTAIN FORMAT 1 DSCB
         MVC   ALRECFM(1),=CL1'V'      YES, SET RECFM TO V
CHKB1    EQU   *
         TM    JFCRECFM,JFCRFB         RECFM BLOCKED?
         BNO   CHKS1                   NO, CHECK SPANNED
         MVC   ALRECFM+1(1),=CL1'B'    YES, SET RECFM TO B
CHKS1    EQU   *
         TM    JFCRECFM,JFCRFS         RECFM SPANNED?
         BNO   CHKA1                   NO, CHECK ASA CONTROL
         MVC   ALRECFM+2(1),=CL1'S'    YES, SET RECFM TO S
         B     GETBLK1                 GET MAX BLOCK SIZE
CHKA1    EQU   *
         TM    JFCRECFM,JFCASA         RECFM ASA CONTROL?
         BNO   CHKM1                   NO, CHECK MACHINE CODE CONTROL
         MVC   ALRECFM+2(1),=CL1'A'    YES, SET RECFM TO A
         B     GETBLK1                 GET MAX BLOCK SIZE
CHKM1    EQU   *
         TM    JFCRECFM,JFCMAC         RECFM MACHINE CODE CONTROL?
         BNO   GETBLK1                 NO, GET MAX BLOCK SIZE
         MVC   ALRECFM+2(1),=CL1'M'    YES, SET RECFM TO M
GETBLK1  EQU   *
         SLR   R5,R5                   R5 - BINARY/DECIMAL/ZONED WORK
         LH    R5,JFCBLKSI             LOAD BLOCK SIZE FROM JFCB
         CVD   R5,DEC                  CONVERT TO DECIMAL
         MVC   CONV,BLKPTTRN           MOVE EDIT PATTERN TO WORK AREA
         ED    CONV,DEC+5              CONVERT TO ZONED
         MVC   ALBLKSZ(5),CONV+1       MOVE TO OUTPUT AREA
         SLR   R5,R5                   R5 - BINARY/DECIMAL/ZONED WORK
         LH    R5,JFCLRECL             LOAD LOGICAL REC LEN FROM JFCB
         CVD   R5,DEC                  CONVERT TO DECIMAL
         MVC   CONV,BLKPTTRN           MOVE EDIT PATTERN TO WORK AREA
         ED    CONV,DEC+5              CONVERT TO ZONED
         MVC   ALRECL(5),CONV+1        MOVE TO OUTPUT AREA
         DROP  R3                      DROP JFCB ADDRESSABILITY
         B     REPLACE
         EJECT
***********************************************************************
*  PROCESSING SECTION - DISP, DSORG, RECFM, LRECL & BLKSIZE FROM DSCB
***********************************************************************
OBTAINIT EQU   *
         OBTAIN OBTANLST               GET DSCB1 INFORMATION
         LTR   R15,R15                 INFORMATION RETURNED?
         BNZ   REPLACE                 NO, WRITE OUT INFO AND CONTINUE
CHKDSOR2 EQU   *
         TM    WORK+38,DS1DSGIS        DSORG INDEXED SEQUENTIAL?
         BNO   CHKPS2                  NO, CHECK PHYSICAL SEQUENTIAL
         MVC   ALDSORG(2),=CL2'IS'     YES, SET DSORG TO IS
         B     CHKFMT2                 GO CHECK RECFM
CHKPS2   EQU   *
         TM    WORK+38,DS1DSGPS        DSORG PHYSICAL SEQUENTIAL?
         BNO   CHKDA2                  NO, CHECK DIRECT ACCESS
         MVC   ALDSORG(2),=CL2'PS'     YES, SET DSORG TO PS
         B     CHKFMT2                 GO CHECK RECFM
CHKDA2   EQU   *
         TM    WORK+38,DS1DSGDA        DSORG DIRECT ACCESS?
         BNO   CHKPO2                  NO, CHECK PARTITIONED
         MVC   ALDSORG(2),=CL2'DA'     YES, SET DSORG TO DA
         B     CHKFMT2                 GO CHECK RECFM
CHKPO2   EQU   *
         TM    WORK+38,DS1DSGPO        DSORG PARTITIONED?
         BNO   CHKU2                   NO, CHECK UNMOVABLE
         MVC   ALDSORG(2),=CL2'PO'     YES, SET DSORG TO PO
         B     CHKFMT2                 GO CHECK RECFM
CHKU2    EQU   *
         TM    WORK+38,DS1DSGU         DSORG UNMOVABLE?
         BNO   CHKFMT2                 NO, CHECK RECFM
         MVC   ALDSORG(2),=CL2'U'      YES, SET DSORG TO U
         EJECT
CHKFMT2  EQU   *
         TM    WORK+40,DS1RECFU        RECFM UNDEFINED?
         BNO   CHKF2                   NO, CHECK FIXED
         MVC   ALRECFM(1),=CL1'U'      YES, SET RECFM TO U
         B     CHKS2                   GO CHECK SPANNED
CHKF2    EQU   *
         TM    WORK+40,DS1RECFF        RECFM FIXED?
         BNO   CHKV2                   NO, CHECK VARIABLE
         MVC   ALRECFM(1),=CL1'F'      YES, SET RECFM TO F
         B     CHKB2                   GO CHECK BLOCKED
CHKV2    EQU   *
         TM    WORK+40,DS1RECFV        RECFM VARIABLE?
         BNO   CHKB2                   NO, CHECK FOR BLOCKED
         MVC   ALRECFM(1),=CL1'V'      YES, SET RECFM TO V
CHKB2    EQU   *
         TM    WORK+40,DS1RECFB        RECFM BLOCKED?
         BNO   CHKS2                   NO, CHECK SPANNED
         MVC   ALRECFM+1(1),=CL1'B'    YES, SET RECFM TO B
CHKS2    EQU   *
         TM    WORK+40,DS1RECFS        RECFM SPANNED?
         BNO   CHKA2                   NO, CHECK ASA CONTROL
         MVC   ALRECFM+2(1),=CL1'S'    YES, SET RECFM TO S
         B     GETBLK2                 GET MAX BLOCK SIZE
CHKA2    EQU   *
         TM    WORK+40,DS1RECFA        RECFM ASA CONTROL?
         BNO   CHKM2                   NO, CHECK MACHINE CODE CONTROL
         MVC   ALRECFM+2(1),=CL1'A'    YES, SET RECFM TO A
         B     GETBLK2                 GET MAX BLOCK SIZE
CHKM2    EQU   *
         TM    WORK+40,DS1RECMC        RECFM MACHINE CODE CONTROL?
         BNO   GETBLK2                 NO, GET MAX BLOCK SIZE
         MVC   ALRECFM+2(1),=CL1'M'    YES, SET RECFM TO M
GETBLK2  EQU   *
         SLR   R5,R5                   R5 - BINARY/DECIMAL/ZONED WORK
         LH    R5,WORK+42              LOAD BLOCK SIZE FROM DSCB1
         CVD   R5,DEC                  CONVERT TO DECIMAL
         MVC   CONV,BLKPTTRN           MOVE EDIT PATTERN TO WORK AREA
         ED    CONV,DEC+5              CONVERT TO ZONED
         MVC   ALBLKSZ(5),CONV+1       MOVE TO OUTPUT AREA
         SLR   R5,R5                   R5 - BINARY/DECIMAL/ZONED WORK
         LH    R5,WORK+44              LOAD LOGICAL REC LEN FROM DSCB1
         CVD   R5,DEC                  CONVERT TO DECIMAL
         MVC   CONV,BLKPTTRN           MOVE EDIT PATTERN TO WORK AREA
         ED    CONV,DEC+5              CONVERT TO ZONED
         MVC   ALRECL(5),CONV+1        MOVE TO OUTPUT AREA
         DROP  R3                      DROP DSCB1 ADDRESSABILITY
         EJECT
***********************************************************************
*  PROCESSING SECTION - REPLACE VARIABLES AND ADD TO TABLE
***********************************************************************
REPLACE  EQU   *
*                                      REPLACE VARIABLE VALUES
         ISPCALL ('VREPLACE',NAMELIST,LENLST1,ALRECFM)
         B     VREP10(R15)             CHECK RETURN CODE
VREP10   EQU   *
         B     TBADD                   RC = 00 (CONTINUE)
         B     REPERR04                RC = 04 (NOT VALID FOR VREPLACE)
         B     REPERR08                RC = 08 (NOT VALID FOR VREPLACE)
         B     REPERR12                RC = 12 (NOT VALID FOR VREPLACE)
         B     REPERR16                RC = 16 (DISPLAY PANEL / MSG)
         B     REPERR20                RC = 20 (DISPLAY PANEL / MSG)
TBADD    EQU   *
*                                      ADD VARIABLES TO TABLE
         ISPCALL ('TBADD','ALLOCTBL')
         B     TBADD10(R15)            CHECK RETURN CODE
TBADD10  EQU   *
         B     TESTDSN                 RC = 00 (CONTINUE)
         B     ADDERR04                RC = 04 (NOT VALID FOR TBADD)
         B     ADDERR08                RC = 08 (DISPLAY PANEL / MSG)
         B     ADDERR12                RC = 12 (DISPLAY PANEL / MSG)
         B     ADDERR16                RC = 16 (DISPLAY PANEL / MSG)
         B     ADDERR20                RC = 20 (DISPLAY PANEL / MSG)
***********************************************************************
*  PROCESSING SECTION - WRITE REMAINDER OF DSN TO TABLE
***********************************************************************
TESTDSN  EQU   *
         TM    DSNFLG,X'FF'            DSN LONGER THAN 30 CHARACTERS?
         BNO   NEXTIOT                 NO, POINT TO NEXT TIOT ENTRY
         MVC   ALDSN(30),SPACES        CLEAR ALDSN
         AR    R8,R10                  RESET R8
         LA    R10,8                   DETERMINE NUMBER OF CHARACTERS
         SR    R10,R9                      TO BE ADDED TO ALDSN2
         BNP   SKIPMOVE                NO CHARACTERS TO BE MOVED
         LA    R8,1(R8)                POINT TO SEGMENT TO BE MOVED
         LA    R7,ALDSN                R7 - INDEX POINTER TO ALDSN
         LA    R7,4(R7)                INDENT FOUR SPACES
         BCTR  R10,0                   DECREMENT R10 FOR MOVE
         EX    R10,MOVEDSN2            MOVE SEGMENT ALDSN1 TO ALDSN
SKIPMOVE EQU   *
         LA    R8,ALDSN                PREPARE TO MOVE ALDSN2 TO ALDSN
         LA    R8,4(R8)                INDENT FOUR SPACES
         AR    R8,R10                  SKIP PAST SEGMENT FROM ALDSN1
         MVC   1(14,R8),ALDSN2         MOVE ALDSN2 TO ALDSN
         MVC   ALDDNAM,SPACES          CLEAR DDNAME FOR NEXT LINE
         MVC   ALVOL,VOLSAVE           RESTORE ALVOL
         MVI   DSNFLG,X'00'            RESTORE DSNFLG
         B     CHKDISP                 GET MORE INFORMATION
NEXTIOT  EQU   *
         AR    R2,R4                   POINT TO NEXT DD ENTRY OF TIOT
         BCT   R11,LOADTBL             CONTINUE TO LOAD TABLE
         EJECT
         TITLE 'ALLOCMOD - DISPLAY SECTION'
***********************************************************************
*  DISPLAY SECTION - TOP OF TABLE AND DISPLAY USING 'ALLOCLST' PANEL
***********************************************************************
DISPL1   EQU   *
*                                      POSITION CRP AT TOP OF TABLE
         ISPCALL ('TBTOP','ALLOCTBL')
         B     TBTOP20(R15)            CHECK RETURN CODE
TBTOP20  EQU   *
         B     DISPL2                  RC = 00 (CONTINUE)
         B     TOPERR04                RC = 04 (NOT VALID FOR TBTOP)
         B     TOPERR08                RC = 08 (NOT VALID FOR TBTOP)
         B     TOPERR12                RC = 12 (DISPLAY PANEL / MSG)
         B     TOPERR16                RC = 16 (NOT VALID FOR TBTOP)
         B     TOPERR20                RC = 20 (DISPLAY PANEL / MSG)
DISPL2   EQU   *
*                                      DISPLAY TABLE USING 'ALLOCLST'
         ISPCALL ('TBDISPL','ALLOCTBL','ALLOCLST')
         B     TBDIS10(R15)            CHECK RETURN CODE
TBDIS10  EQU   *
         B     DISPL2                  RC = 00 (CONTINUE)
         B     DISPL2                  RC = 04 (CONTINUE)
         B     FINISH                  RC = 08 (CONTINUE)
         B     DISERR12                RC = 12 (DISPLAY PANEL / MSG)
         B     DISERR16                RC = 16 (NOT VALID FOR TBDISPL)
         B     DISERR20                RC = 20 (DISPLAY PANEL / MSG)
         EJECT
         TITLE 'ALLOCMOD - ERROR PROCESSING SECTION'
***********************************************************************
*  ERROR PROCESSING SECTION
***********************************************************************
ADDERR04 EQU   *
         MVC   ALMSGID,=CL8'ALLOC040'  SET MESSAGE-ID
         B     DISPL3                  DISPLAY PANEL WITH MESSAGE
ADDERR08 EQU   *
         MVC   ALMSGID,=CL8'ALLOC080'  SET MESSAGE-ID
         B     DISPL3                  DISPLAY PANEL WITH MESSAGE
ADDERR12 EQU   *
         MVC   ALMSGID,=CL8'ALLOC120'  SET MESSAGE-ID
         B     DISPL3                  DISPLAY PANEL WITH MESSAGE
ADDERR16 EQU   *
         MVC   ALMSGID,=CL8'ALLOC160'  SET MESSAGE-ID
         B     DISPL3                  DISPLAY PANEL WITH MESSAGE
ADDERR20 EQU   *
         MVC   ALMSGID,=CL8'ALLOC200'  SET MESSAGE-ID
         B     DISPL3                  DISPLAY PANEL WITH MESSAGE
CREERR08 EQU   *
         MVC   ALMSGID,=CL8'ALLOC081'  SET MESSAGE-ID
         B     DISPL3                  DISPLAY PANEL WITH MESSAGE
CREERR12 EQU   *
         MVC   ALMSGID,=CL8'ALLOC121'  SET MESSAGE-ID
         B     DISPL3                  DISPLAY PANEL WITH MESSAGE
CREERR16 EQU   *
         MVC   ALMSGID,=CL8'ALLOC161'  SET MESSAGE-ID
         B     DISPL3                  DISPLAY PANEL WITH MESSAGE
CREERR20 EQU   *
         MVC   ALMSGID,=CL8'ALLOC201'  SET MESSAGE-ID
         B     DISPL3                  DISPLAY PANEL WITH MESSAGE
DEFERR04 EQU   *
         MVC   ALMSGID,=CL8'ALLOC042'  SET MESSAGE-ID
         B     DISPL3                  DISPLAY PANEL WITH MESSAGE
DEFERR08 EQU   *
         MVC   ALMSGID,=CL8'ALLOC082'  SET MESSAGE-ID
         B     DISPL3                  DISPLAY PANEL WITH MESSAGE
DEFERR12 EQU   *
         MVC   ALMSGID,=CL8'ALLOC122'  SET MESSAGE-ID
         B     DISPL3                  DISPLAY PANEL WITH MESSAGE
DEFERR16 EQU   *
         MVC   ALMSGID,=CL8'ALLOC162'  SET MESSAGE-ID
         B     DISPL3                  DISPLAY PANEL WITH MESSAGE
DEFERR20 EQU   *
         MVC   ALMSGID,=CL8'ALLOC202'  SET MESSAGE-ID
         B     DISPL3                  DISPLAY PANEL WITH MESSAGE
         EJECT
DISERR12 EQU   *
         MVC   ALMSGID,=CL8'ALLOC123'  SET MESSAGE-ID
         B     DISPL3                  DISPLAY PANEL WITH MESSAGE
DISERR16 EQU   *
         MVC   ALMSGID,=CL8'ALLOC163'  SET MESSAGE-ID
         B     DISPL3                  DISPLAY PANEL WITH MESSAGE
DISERR20 EQU   *
         MVC   ALMSGID,=CL8'ALLOC203'  SET MESSAGE-ID
         B     DISPL3                  DISPLAY PANEL WITH MESSAGE
REPERR04 EQU   *
         MVC   ALMSGID,=CL8'ALLOC044'  SET MESSAGE-ID
         B     DISPL3                  DISPLAY PANEL WITH MESSAGE
REPERR08 EQU   *
         MVC   ALMSGID,=CL8'ALLOC084'  SET MESSAGE-ID
         B     DISPL3                  DISPLAY PANEL WITH MESSAGE
REPERR12 EQU   *
         MVC   ALMSGID,=CL8'ALLOC124'  SET MESSAGE-ID
         B     DISPL3                  DISPLAY PANEL WITH MESSAGE
REPERR16 EQU   *
         MVC   ALMSGID,=CL8'ALLOC164'  SET MESSAGE-ID
         B     DISPL3                  DISPLAY PANEL WITH MESSAGE
REPERR20 EQU   *
         MVC   ALMSGID,=CL8'ALLOC204'  SET MESSAGE-ID
         B     DISPL3                  DISPLAY PANEL WITH MESSAGE
TOPERR04 EQU   *
         MVC   ALMSGID,=CL8'ALLOC045'  SET MESSAGE-ID
         B     DISPL3                  DISPLAY PANEL WITH MESSAGE
TOPERR08 EQU   *
         MVC   ALMSGID,=CL8'ALLOC085'  SET MESSAGE-ID
         B     DISPL3                  DISPLAY PANEL WITH MESSAGE
TOPERR12 EQU   *
         MVC   ALMSGID,=CL8'ALLOC125'  SET MESSAGE-ID
         B     DISPL3                  DISPLAY PANEL WITH MESSAGE
TOPERR16 EQU   *
         MVC   ALMSGID,=CL8'ALLOC165'  SET MESSAGE-ID
         B     DISPL3                  DISPLAY PANEL WITH MESSAGE
TOPERR20 EQU   *
         MVC   ALMSGID,=CL8'ALLOC205'  SET MESSAGE-ID
DISPL3   EQU   *
*                                      DISPLAY TABLE USING 'ALLOCLST'
         ISPCALL ('TBDISPL','ALLOCTBL','ALLOCLST',ALMSGID)
         EJECT
         TITLE 'ALLOCMOD - CLOSING SECTION'
***********************************************************************
*  CLOSING SECTION - FREE GETMAINED AREA, SET RETURN CODE RESTORE REGS
***********************************************************************
FINISH   EQU   *
*                                      RELEASE AREA HELP BY TEMP TABLE
         ISPCALL ('TBEND','ALLOCTBL')
         LA    R0,WORKLEN              R0 - LENGTH OF WORKAREA
         LR    R1,R13                  R1 - ADDRESS OF WORKAREA
         L     R13,4(R13)              R13 - ADDR CALLER'S SAVE AREA
         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED VIRTUAL STORAGE
         RETURN (14,12),RC=(15)        RESTORE REGISTERS AND RETURN
         EJECT
         TITLE 'ALLOCMOD - EXECUTED INSTRUCTIONS AND REGISTER EQUATES'
***********************************************************************
*  EXECUTED INSTRUCTIONS
***********************************************************************
MOVEDSN1 MVC   0(0,R7),ALDSN1          MOVE FIRST PART OF DSN
MOVEDSN2 MVC   0(0,R7),0(R8)           MOVE SECOND PART OF DSN
MOVEDSN3 MVC   0(0,R8),0(R9)           MOVE SEARCH ARGUMENT TO ALDSN
***********************************************************************
*  REGISTER EQUATES
***********************************************************************
R0       EQU   00
R1       EQU   01
R2       EQU   02
R3       EQU   03
R4       EQU   04
R5       EQU   05
R6       EQU   06
R7       EQU   07
R8       EQU   08
R9       EQU   09
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
DS1DSGIS EQU   X'80'
DS1DSGPS EQU   X'40'
DS1DSGDA EQU   X'20'
DS1DSGPO EQU   X'02'
DS1DSGU  EQU   X'01'
DS1RECFU EQU   X'C0'
DS1RECFF EQU   X'80'
DS1RECFV EQU   X'40'
DS1RECFB EQU   X'10'
DS1RECFS EQU   X'08'
DS1RECFA EQU   X'04'
DS1RECMC EQU   X'02'
         EJECT
         TITLE 'ALLOCMOD - DATA CONSTANTS'
***********************************************************************
*  CONSTANTS
***********************************************************************
FULL00   DC    F'00'                   TEST FOR END OF TIOT
LENLST1  DS    0F                      LIST OF VARIABLE LENGTHS
FULL04   DC    F'04'                   LENGTH OF RECFM
FULL05   DC    F'05'                   LENGTH OF DISPOSITION
         DC    F'05'                   LENGTH OF DSORG
         DC    F'05'                   LENGTH OF BLKSIZE
         DC    F'05'                   LENGTH OF LRECL
FULL30   DC    F'30'                   LENGTH OF DSNAME-ONE
FULL08   DC    F'08'                   TEST FOR RETURN CODE OF EIGHT
         DC    F'08'                   LENGTH OF VOLUME SERIAL
*                                      LENGTH OF DDNAME
OPCOD    DC    XL4'C1000000'           SEARCH FOR DSNAME
BLKPTTRN DC    XL6'402020202020'       EDIT PATTERN FOR BLKSIZE & LRECL
SPACES   DC    CL80' '                 SPACES
NAMELIST DS    0F                      NAMES OF VARIABLES IN TABLE
         DC    F'08'
         DC    F'00'
         DC    CL8'ZALFMT'
         DC    CL8'ZALDISP'
         DC    CL8'ZALDORG'
         DC    CL8'ZALBLK'
         DC    CL8'ZALRECL'
         DC    CL8'ZALDSN'
         DC    CL8'ZALDD'
         DC    CL8'ZALVOL'
DEFLIST1 DS    0F                      NAMES OF VARIABLES (LENGTH 4)
         DC    F'01'
         DC    F'00'
         DC    CL8'ZALFMT'
DEFLIST2 DS    0F                      NAMES OF VARIABLES (LENGTH 5)
         DC    F'04'
         DC    F'00'
         DC    CL8'ZALDISP'
         DC    CL8'ZALDORG'
         DC    CL8'ZALBLK'
         DC    CL8'ZALRECL'
DEFLIST3 DS    0F                      NAMES OF VARIABLES (LENGTH 30)
         DC    F'01'
         DC    F'00'
         DC    CL8'ZALDSN'
DEFLIST4 DS    0F                      NAMES OF VARIABLES (LENGTH 8)
         DC    F'02'
         DC    F'00'
         DC    CL8'ZALDD'
         DC    CL8'ZALVOL'
         EJECT
         TITLE 'ALLOCMOD - LITERAL POOL AND MACROS'
         LTORG
***********************************************************************
*  MACROS
***********************************************************************
         IEFJFCBN
ALLOCMOD CSECT
         EJECT
         TITLE 'ALLOCMOD - DYNAMIC WORK AREA'
***********************************************************************
*  DYNAMIC WORK AREA
***********************************************************************
WORKAREA DSECT
SAVEAREA DS    18F                     PROGRAM SAVE AREA
ISPADDR  DS    A                       ADDRESS OF EP TO ISPLINK
PARMS    DS    7A                      PARM LIST FOR CALL
OBTANLST DS    0F                      ADDR LIST FOR OBTAIN MACRO
OPCODE   DS    F                       OPERATION CODE
DSNPTR   DS    F                       ADDRESS OF DATA SET NAME
VOLPTR   DS    F                       ADDRESS OF VOLUME SERIAL
WORKPTR  DS    F                       ADDRESS OF 160 BYTE WORK AREA
WORK     DS    20D                     160 BYTE WORK AREA FOR OBTAIN
DEC      DS    D                       BINARY TO DECIMAL CONVERSION
DSNFLG   DS    XL1                     FLAG SET IF DSN LONGER THAN 30
CONV     DS    CL6                     DECIMAL TO ZONED CONVERSION
ALRECFM  DS    CL4                     RECORD FORMAT OF ALLOCATED DSN
ALDISP   DS    CL5                     DISPOSITION OF ALLOCATED DSN
ALDSORG  DS    CL5                     DATA SET ORGINIZATION OF DSN
ALBLKSZ  DS    CL5                     MAX BLOCK SIZE OF ALLOCATED DSN
ALRECL   DS    CL5                     LOGICAL RECORD LENGTH OF DSN
ALDSN    DS    CL30                    1ST 30 CHAR OF ALLOCATED DSN
ALDDNAM  DS    CL8                     ALLOCATED DDNAME
ALVOL    DS    CL8                     VOLSER ON WHICH DSN RESIDES
ALDSN1   DS    CL30                    1ST 30 CHAR OF ALLOCATED DSN
ALDSN2   DS    CL14                    NEXT 14 CHAR OF ALLOCATED DSN
ALMSGID  DS    CL8                     ERROR MESSAGE-ID
VOLSAVE  DS    CL8                     ALLOCATED VOLSER SAVE AREA
WORKLEN  EQU   *-WORKAREA
         END   ALLOCMOD
