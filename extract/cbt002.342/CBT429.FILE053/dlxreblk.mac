         TITLE 'DLXREBLK - REBLOCK FILES'
***********************************************************************
*                                                                     *
*             MODULE NAME = DLXREBLK                                  *
*                                                                     *
*             DESCRIPTIVE NAME = CHANGE THE RECORD LENGTH AND         *
*                BLOCK SIZE OF FILES.                                 *
*                                                                     *
*             FUNCTION =                                              *
*                READS SYSUT1 FILE.  IF SPECIFIED OUTPUT RECORD       *
*                LENGTH IS SHORTER, CREATES AN INTEGRAL NUMBER        *
*                OF OUTPUT RECORDS FROM EACH SYSUT1 RECORD.  IF       *
*                SPECIFIED OUTPUT RECORD LENGTH IS LONGER,  COM-      *
*                BINES AN INTERGRAL NUMBER OF SYSUT1 RECORDS TO       *
*                MAKE EACH OUTPUT RECORD.                             *
*                                                                     *
*                OPERATION =                                          *
*                   READ PARAMETERS                                   *
*                   OPEN SYSUT1 AND SYSUT2 FILES                      *
*                   IF SPECIFIED LRECL IS SHORTER THAN SYSUT1'S:      *
*                     DETERMINE # OF OUTPUT RECORDS PER INPUT RECORD  *
*                     READ SYSUT1 RECORD                              *
*                     AT END-OF-FILE, EXIT                            *
*                     OUTPUT PREVIOUSLY DETERMINED # OF RECORDS       *
*                     GOTO READ SYSUT1                                *
*                   IF SPECIFIED LRECL IS LONGER THAN SYSUT1'S:       *
*                     DETERMINE # OF INPUT RECORDS PER OUTPUT RECORD  *
*                     READ PREVIOUSLY DETERMINED # OF SYSUT1 RECORDS  *
*                     AT END-OF-FILE, EXIT                            *
*                     WRITE INTO SYSUT2 FILE                          *
*                     GOTO READ                                       *
*                   CLOSE SYSUT1 AND SYSUT2 FILES                     *
*                   EXIT                                              *
*                                                                     *
*              NOTES =                                                *
*                                                                     *
*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *
*                    REGISTERS 0 TO 9  = WORK REGISTERS               *
*                    REGISTERS 10      = LINKAGE REGISTER             *
*                    REGISTERS 11      = ADDRESSABILITY TO DCB        *
*                    REGISTER  12      = ADDRESSABILITY TO DLXREBLK   *
*                                        CSECT                        *
*                    REGISTER  13      = SAVE AREA REGISTER AND       *
*                                        ADDRESSABILITY TO GETMAINED  *
*                                        WORK AREA                    *
*                    REGISTERS 14,15   = WORK REGISTERS               *
*                                                                     *
*             MACROS =                                                *
*                SAVE, GETMAIN, OPEN, GET, PUT, CLOSE, FREEMAIN       *
*                                                                     *
*             CHANGE ACTIVITY =                                       *
*                09/17/84  WRITTEN.      BC.                          *
*                04/14/86  ADDED "IGNRLAST" PARM TO,                  *
*                          ON A LARGE RECORD BEING BUILT FROM MANY    *
*                          MANY SMALLER RECORDS, IF IT IS ALL BLANKS, *
*                          IGNORE THE LAST INPUT RECORD   MJL.        *
*                08/27/86  ADDED "IGNRFRST" PARM TO SKIP THE FIRST    *
*                          80 BYTE RECORD IF IT IS ALL BLANKS. USED   *
*                          ONLY WHEN INCREASING LRECL.     JST.       *
*                                                                     *
* SAMPLE JCL =                                                        *
*                                                                     *
*     //DLXREBLK JOB (GEE1,0104),'BARB COUTURE',CLASS=S,MSGCLASS=A,   *
*     //         MSGLEVEL=(2,0),USER=SYSPGM,PASSWORD=????????         *
*     //STEP1 EXEC PGM=DLXREBLK,PARM='OUTLRECL=80,OUTBLKSZ=6144'      *
*     //SYSUT1 DD DSN=T99999.SYSUT1.TEST,DISP=SHR                     *
*     //SYSUT2 DD DSN=T99999.SYSUT2.TEST,DISP=(,CATLG),               *
*                UNIT=SYSDA,DCB=(RECFM=FB,LRECL=80,BLKSIZE=6144),     *
*                SPACE=(TRK,(5,2))                                    *
*                                                                     *
***********************************************************************
         PRINT NOGEN
*
DLXREBLK CSECT
         SAVE  (14,12)                 SAVE REGISTERS
         LR    R12,R15
         USING DLXREBLK,R12            ESTABLISH ADDRESSABILITY
         LR    R2,R1                   PRESERVE PTR TO PARMS
         GETMAIN R,LV=LDATA            GET DYNAMIC WORK AREA
         LR    R10,R1                  PRESERVE PTR TO WORK AREA
         ST    R13,4(R10)              STORE ADDR OF PREVIOUS SA
         ST    R10,8(,R13)             STORE ADDR OF CURRENT SA
         LR    R13,R10                 LOAD ADDR OF CURRENT SA
         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY
         LA    R6,DATA                 SET UP REGISTERS FOR
         LA    R7,MOVEL                  LONG MOVE
         LA    R8,CDATA
         LA    R9,MOVEL
         MVCL  R6,R8                   LOAD INITIAL DATA INTO WORKAREA
         MVI   IGNRLAST,C'N'           INIT IGNORE LAST RECORD FLAG
         MVI   IGNRFRST,C'N'           INIT IGNORE FIRST RECORD FLAG
*
*  GET 'OUTLRECL' AND 'OUTBLKSZ' PARMS.
*
GETPARM  EQU   *
         MVI   OUTLRECL,X'40'          CLEAR NEW RECORD LENGTH
         MVC   OUTLRECL+1(L'OUTLRECL-1),OUTLRECL
         MVI   OUTBLKSZ,X'40'          CLEAR NEW BLOCK SIZE
         MVC   OUTBLKSZ+1(L'OUTBLKSZ-1),OUTBLKSZ
         L     R5,0(R2)                GET PARM ADDRESS
         LH    R3,0(R5)                SAVE PARM LENGTH
         LTR   R3,R3                   ANY PARM DATA?
         BZ    GP40                    IF NOT, BRANCH
         LA    R5,2(R5)                SKIP PARM LENGTH FIELD
         LA    R4,PARMBUF              SET POINTER INTO PARM BUFFER
         MVI   PARMBUF,X'40'           CLEAR PARM BUFFER
         MVC   PARMBUF+1(L'PARMBUF-1),PARMBUF
GP10     EQU   *
         CLI   0(R5),C','              DELIMITING COMMA?
         BE    GP20                    IF SO, BRANCH
         MVC   0(1,R4),0(R5)           STORE PARM CHARACTER
         LA    R4,1(R4)                INCREMENT PARM BUFFER POINTER
         LA    R5,1(R5)                GO TO NEXT PARM CHARACTER
         BCT   R3,GP10                 LOOP BACK TIL DONE
GP20     EQU   *
         CLC   PARMBUF(9),=C'OUTLRECL='  CHECK FOR 'OUTLRECL' KEYWORD
         BNE   GP25                    IF NOT, BRANCH
         MVC   OUTLRECL,PARMBUF+9      SAVE OUTPUT RECORD LENGTH
         B     GP30
GP25     EQU   *
         CLC   PARMBUF(9),=C'OUTBLKSZ='  CHECK FOR 'OUTBLKSZ' KEYWORD
         BNE   GP26                    IF NOT, BRANCH
         MVC   OUTBLKSZ,PARMBUF+9      SAVE OUTPUT BLOCK SIZE
         B     GP30
GP26     EQU   *
         CLC   PARMBUF(8),=C'IGNRLAST'  CHECK FOR 'IGNRLAST' KEYWORD
         BNE   GP27                    IF NOT, BRANCH
         MVI   IGNRLAST,C'Y'            SET IGNORE LAST RECORD FLAG
         B     GP30
GP27     EQU   *
         CLC   PARMBUF(8),=C'IGNRFRST'  CHECK FOR 'IGNRFRST' KEYWORD
         BNE   GP30                    IF NOT, BRANCH
         MVI   IGNRFRST,C'Y'            SET IGNORE FIRST RECORD FLAG
GP30     EQU   *
         LA    R4,PARMBUF              RESET POINTER INTO PARM BUFFER
         MVI   PARMBUF,X'40'           CLEAR PARM BUFFER
         MVC   PARMBUF+1(L'PARMBUF-1),PARMBUF
         LTR   R3,R3                   ANY MORE PARMS?
         BZ    GP40                    IF NOT, EXIT
         LA    R5,1(R5)                IF SO, SKIP COMMA
         B     GP10                    AND LOOP BACK
GP40     EQU   *
         CLC   OUTLRECL,=CL8' '        NEW RECORD LENGTH SPECIFIED?
         BE    ERROR1                  IF NOT, ERROR
         CLC   OUTBLKSZ,=CL8' '        NEW BLOCK SIZE SPECIFIED?
         BE    ERROR2                  IF NOT, ERROR
         LA    R2,OUTLRECL             POINT TO BEGINNING OF LRECL
         BAL   R10,PACKIT              CONVERT TO PACKED DECIMAL
         CVB   R5,PWORK                CONVERT TO BINARY
         ST    R5,NLRECL               SAVE NEW RECORD LENGTH
         LA    R2,OUTBLKSZ             POINT TO BEGINNING OF BLKSZ
         BAL   R10,PACKIT              CONVERT TO PACKED DECIMAL
         CVB   R5,PWORK                CONVERT TO BINARY
         ST    R5,NBLKSZ               SAVE NEW BLOCK SIZE
*
*  INITIALIZE LRECL AND BLKSIZE OF SYSUT2 AND OPEN SYSUT1 AND
*  SYSUT2.
*
INIT     EQU   *
         LA    R11,SYSUT2              POINT TO OUTPUT DCB
         USING IHADCB,R11              ESTABLISH ADDRESSABILITY
         MVC   DCBLRECL,NLRECL+2       STORE NEW RECORD LENGTH
         MVC   DCBBLKSI,NBLKSZ+2       STORE NEW BLOCK SIZE
         OPEN  (SYSUT2,OUTPUT),MF=(E,EX2)  OPEN OUTPUT DATA SET
         LTR   R15,R15
         BNZ   ERROR3
         OPEN  (SYSUT1,INPUT),MF=(E,EX2)    OPEN INPUT DATA SET
         LTR   R15,R15
         BNZ   ERROR4
         LA    R11,SYSUT1              POINT TO INPUT DCB
         SLR   R5,R5
         ICM   R5,B'0011',DCBLRECL     GET OLD RECORD LENGTH
         ST    R5,OLRECL               AND SAVE IT
         L     R3,NLRECL               GET NEW RECORD LENGTH
         DROP  R11
         GETMAIN R,LV=(R3)             GET DYNAMIC AREA FOR OUTPUT REC
         ST    R1,OUTADDR              PRESERVE PTR TO OUTPUT AREA
         CR    R5,R3                   COMPARE OLD TO NEW
         BL    INCSIZE                 GO TO INCREASE RECORD SIZE
*
*  READ THE SYSUT1 RECORDS.  SPLIT EACH RECORD INTO AN INTEGRAL
*    NUMBER OF SMALLER RECORDS BASED ON NEW RECORD LENGTH SPECIFIED
*    IN THE PARAMETERS.
*
DECSIZE  EQU   *
         MVI   CHKFLG,C'N'             INDICATE NO CHECK NEEDED AT END
         SLR   R4,R4                   INIT R4
         DR    R4,R3                   DIVIDE NEW SIZE INTO OLD (R5)
         C     R4,=F'0'                ANY REMAINDER?
         BNE   ERROR5                  IF SO, FORGET IT
         ST    R5,NUMRECS              STORE # OF SMALLER RECS
         L     R9,OUTADDR
         BCTR  R3,0                    DECREMENT NEW RECORD LENGTH
DS10     EQU   *
         GET   SYSUT1                  READ AN INPUT RECORD
         LR    R7,R1                   SAVE ADDRESS OF RECORD
         L     R5,NUMRECS              GET # OF RECS TO OUTPUT
DS20     EQU   *
         EX    R3,LOADOUT              LOAD THE OUTPUT BUFFER
         PUT   SYSUT2,(R9)             WRITE INTO OUTPUT FILE
         AR    R7,R3                   POINT TO NEXT RECORD
         LA    R7,1(R7)
         BCT   R5,DS20                 LOOP TIL ALL OUTPUT
         B     DS10                    LOOP TIL ALL INPUT PROCESSED
*
*  READ THE SYSUT1 RECORDS.  PACK THE RECORDS INTO LARGER RECORDS
*    OF SPECIFIED RECORD LENGTH.
*
INCSIZE  EQU   *
         MVI   CHKFLG,C'Y'             INDICATE CHECK NEEDED AT END
         SLR   R2,R2                   INIT R2 FOR DIVIDE
         DR    R2,R5                   DIVIDE OLD SIZE INTO NEW (R3)
         C     R2,=F'0'                ANY REMAINDER?
         BNE   ERROR6                  IF SO, FORGET IT
         ST    R3,NUMRECS              SAVE NUMBER OF RECS
         L     R9,OUTADDR              GET ADDR OF OUTPUT BUFFER
         LR    R2,R9                   STORE IN R2
         BCTR  R5,0                    DECREMENT OLD RECORD LENGTH
IS10     EQU   *
         GET   SYSUT1                  READ AN INPUT RECORD
         LR    R7,R1                   GET POINTER TO BEGINNING
         CLI   IGNRFRST,C'Y'           IGNORE FIRST RECORD FLAG ON?
         BNE   IS11                    NO - BRANCH
         CLC   OLRECL+2(2),=X'0050'    IS IT AN 80 CHAR RECORD?
         BNE   IS11                    NO - BRANCH
         CLC   0(80,R7),=CL80' '       IS THE FIRST RECORD 80 BLANKS?
         BNE   IS11                    NO - BRANCH
         MVI   IGNRFRST,C'N'           YES - TURN OFF IGNRFRST SWITCH
         B     IS10                        AND GET ANOTHER RECORD
IS11     EX    R5,LOADOUT              MOVE RECORD INTO OUTPUT BUFFER
         AR    R9,R5                   MOVE OUTPUT POINTER
         LA    R9,1(R9)
         BCT   R3,IS10                 LOOP TIL ALL OUTPUT LOADED
         PUT   SYSUT2,(R2)             WRITE INTO OUTPUT FILE
         L     R9,OUTADDR              RESET R9
         L     R3,NUMRECS              RESET R3
         B     IS10                    LOOP TIL ALL INPUT PROCESSED
*
*  CHECK TO MAKE SURE THERE WERE ENOUGH SMALL RECORDS TO MAKE UP
*    THE LAST LARGER RECORD.  IF NOT, CLEAR THE OUTPUT FILE AND
*    REPORT AN ERROR.
*
ENDREAD  EQU   *
         CLI   CHKFLG,C'Y'             FINAL CHECK NEEDED?
         BNE   CLOSE                   IF NOT, BRANCH
         CLI   IGNRLAST,C'Y'           IGNORE LAST RECORD FLAG ON?
         BNE   ENDREAD2                SKIP LAST RECORD CHECKS
         CLC   OLRECL+2(2),=X'0050'    IS IT AN 80 CHAR RECORD
         BNE   ENDREAD2                IF NOT IGNRLAST DOES NOT APPLY
         SR    R9,R5                   SET R9 BACK ONE RECORD
         BCTR  R9,R0
         CLC   0(80,R9),=CL80' '       IS THE LAST RECORD 80 BLANKS?
         BNE   ENDREAD2                IF NOT IGNRLAST DOES NOT APPLY
         LA    R3,1(R3)                IGNRLAST APPLYS, INCREMENT COUNT
ENDREAD2 EQU   *
         C     R3,NUMRECS              CHECK R3
         BE    CLOSE                   IF EQUAL, OK
         CLOSE SYSUT2,MF=(E,EX4)       OTHERWISE, CLOSE OUTPUT
*        OPEN  (SYSUT2,OUTPUT),MF=(E,EX2)  AND REOPEN FOR INPUT
         B     ERROR7                  THEN REPORT ERROR
*
*  CLOSE FILES AND TERMINATE PROGRAM.
*
CLOSEX   EQU   *                       ERROR EXIT
         LR    R7,R15                  SAVE CONTENTS OF R15
         L     R3,NLRECL
         L     R9,OUTADDR
         FREEMAIN R,LV=(R3),A=(R9)
         CLOSE (SYSUT1,FREE,SYSUT2,FREE),MF=(E,EX4)
         LR    R15,R7                  RESTORE CONTENTS OF R15
         B     RETURN
CLOSE    EQU   *
         L     R3,NLRECL
         L     R9,OUTADDR
         FREEMAIN R,LV=(R3),A=(R9)
         CLOSE (SYSUT1,FREE,SYSUT2,FREE),MF=(E,EX4)
         SLR   R15,R15
RETURN   EQU   *
         LR    R7,R15                  SAVE RETURN CODE
         FREEMAIN R,LV=LDATA,A=(13)    FREE DYNAMIC WORK AREA
         LR    R15,R7                  RESTORE RETURN CODE
         L     R13,4(R13)              RESTORE REGISTERS
         RETURN (14,12),RC=(15)        AND END
*
ERROR1   EQU   *
         WTO   'DLX001E  DLXREBLK -- NEW RECORD LENGTH NOT SPECIFIED', X
               ROUTCDE=(11)
         LA    R15,8
         B     RETURN
ERROR2   EQU   *
         WTO   'DLX002E  DLXREBLK -- NEW BLOCK SIZE NOT SPECIFIED',    X
               ROUTCDE=(11)
         LA    R15,8
         B     RETURN
ERROR3   EQU   *
         WTO   'DLX003E  DLXREBLK -- OPEN ERROR ON SYSUT2 FILE',       X
               ROUTCDE=(11)
         B     CLOSEX
ERROR4   EQU   *
         WTO   'DLX004E  DLXREBLK -- OPEN ERROR ON SYSUT1 FILE',       X
               ROUTCDE=(11)
         B     CLOSEX
ERROR5   EQU   *
         WTO   'DLX005E  DLXREBLK -- OLD RECORD LENGTH IS NOT AN EVEN MX
               ULTIPLE OF THE NEW RECORD LENGTH',ROUTCDE=(11)
         LA    R15,8
         B     CLOSEX
ERROR6   EQU   *
         WTO   'DLX006E  DLXREBLK -- NEW RECORD LENGTH IS NOT AN EVEN MX
               ULTIPLE OF THE OLD RECORD LENGTH',ROUTCDE=(11)
         LA    R15,8
         B     CLOSEX
ERROR7   EQU   *
         WTO   'DLX007E  DLXREBLK -- NUMBER OF INPUT RECORDS DOES NOT CX
               REATE AN INTEGRAL NUMBER OF OUTPUT RECORDS',ROUTCDE=(11)
         LA    R15,8
         B     CLOSEX
*
*  SUBROUTINES
*
PACKIT   EQU   *
         SLR   R3,R3                   INIT LENGTH
         LR    R4,R2
PK10     EQU   *
         CLI   0(R4),X'40'             LOOK FOR SPACE
         BE    PK20                    WHEN FOUND, BRANCH
         CLI   0(R4),X'00'             LOOK FOR ZERO ALSO
         BE    PK20                    WHEN FOUND, BRANCH
         LA    R3,1(R3)                COUNT THE NON-SPACE
         LA    R4,1(R4)                GO TO THE NEXT BYTE
         B     PK10                    AND LOOP
PK20     EQU   *
         BCTR  R3,0                    DECREMENT LENGTH
         EX    R3,PACKNUM              CONVERT TO PACKED DECIMAL
         BR    R10                     AND RETURN
*
***********************************************************************
*                                                                     *
*                     CONSTANT DATA                                   *
*                                                                     *
***********************************************************************
*
*  REGISTER EQUATES
*
R0       EQU   00
R1       EQU   01
R2       EQU   02
R3       EQU   03
R4       EQU   04
R5       EQU   05
R6       EQU   06
R7       EQU   07
R8       EQU   08
R9       EQU   09
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*
         LTORG
*
*    THE FOLLOWING DATA IS USED TO INIT PART OF THE GETMAIN'ED AREA
*
CDATA    DS    0F
DCB1     DCB   DDNAME=SYSUT1,MACRF=(GL),EODAD=ENDREAD,DSORG=PS
DCB2     DCB   DDNAME=SYSUT2,DSORG=PS,RECFM=FB,MACRF=(PM)
LIST2    OPEN   (,),MF=L
LIST4    CLOSE  (,),MF=L
INST1    MVC   0(0,R9),0(R7)
INST2    PACK  PWORK,0(0,R2)
MOVEL    EQU   *-CDATA
*
*
*  MISCELLANEOUS CONSTANTS
*
*
***********************************************************************
*                                                                     *
*                    DSECTS FOR GETMAIN'ED AREA                       *
*                                                                     *
***********************************************************************
WORKAREA DSECT
SAVEAREA DS    18F
*
OUTBLKSZ DS    CL8
OUTLRECL DS    CL8
PARMBUF  DS    CL20
WORK     DS    CL8
CHKFLG   DS    CL1
IGNRFRST DS    CL1
IGNRLAST DS    CL1
NBLKSZ   DS    1F
NLRECL   DS    1F
OLRECL   DS    1F
OUTADDR  DS    1F
NUMRECS  DS    1F
PWORK    DS    1D
*
DATA     DS    0F
SYSUT1   DCB   DDNAME=SYSUT1,MACRF=(GL),EODAD=ENDREAD,DSORG=PS
SYSUT2   DCB   DDNAME=SYSUT2,DSORG=PS,RECFM=FB,MACRF=(PM)
EX2      OPEN   (,),MF=L
EX4      CLOSE  (,),MF=L
LOADOUT  MVC   0(0,R9),0(R7)
PACKNUM  PACK  PWORK,0(0,R2)
*
LDATA    EQU   *-WORKAREA
*
*
DCBSECT  DSECT
         DCBD  DSORG=PS,DEVD=DA
         END   DLXREBLK
