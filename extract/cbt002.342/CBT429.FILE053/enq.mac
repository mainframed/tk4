         MACRO
&LBL     MSG   &PARM
         LCLA  &A
&A       SETA  2+K'&PARM
&LBL     DC    0H'0',AL2(&A,0)
         DC    C&PARM
         MEND
ENQ      CSECT
         PUSH  PRINT
         PUSH  PRINT
         PRINT OFF,GEN
         POP   PRINT
         DS    0F
WDSECT   DSECT
         DC    AL1(1),AL3(0)           SP AND LENGTH OF WORK AREA
         DC    3A(0)                   R13 CHAIN, STAKMAX AND STACKERR
         L     R15,12(R12)             ADDR OF STACK OVERFLOW ROUTINE
         BR    R15                     CALL THE ROUTINE
AREAA    DS    F                       ADDRESS OF Q AREA
AREAL    DS    F                       LENGTH OF AREA
RIBL     DS    H                       LENGTH OF RIB
RIBEL    DS    H                       LENGTH OF RIBE
TOKEN    DS    F                       TOKEN FOR GQSCAN
GQRC     DS    F                       RETURN CODE FROM GQSCAN
NRIBS    DS    F                       NUMBER OF RIBS RETURNED
NRIBES   DS    F                       NUMBER OF RIBES THIS RIB
NCRIBES  DS    F                       NUMBER OF RIBES IN THIS AREA
GQLIST   GQSCAN MF=L
IOPLL    DS    4F
TSOECB   DS    F
GETADDR  DS    F                       ADDR OF BUF RETURNED BY PUTGET
GETLEN   DS    F                       LENGTH OF BUF RETURNED BY PUTGET
CURIN    DS    F                       PTR TO CURRENT INPUT POSITION
CUREND   DS    F                       PTR PAST END OF CURRENT INPUT
OLD      DS    2F                      OUTPUT LINE DESCRIPTOR
PARMLSTS EQU   *
PUTLL    PUTLINE MF=L                  PUTLINE PARM BLOCK
         ORG   PARMLSTS
PUTGETL  PUTGET  MF=L                  PUTGET PARM BLOCK
         ORG   PARMLSTS
GETMAINL GETMAIN VC,MF=L
         ORG   PARMLSTS
FREEML   FREEMAIN VU,MF=L
         ORG
QNL      DS    H                       QNAME LENGTH
RNL      DS    H                       RNAME LENGTH
JNL      DS    H                       JOBNAME LENGTH
FLGS     DS    X
CONTFLG  EQU   X'80'                   RIB HAS BEEN FORMATTED
CONFLG   EQU   X'40'                   CONFLICT COMMAND IN EFFECT
FINDFLG  EQU   X'20'                   FIND COMMAND IN EFFECT
GLOBFLG  EQU   X'10'                   GLOBAL COMMAND IN EFFECT
R0       EQU   00
R1       EQU   01
R2       EQU   02
R3       EQU   03
R4       EQU   04
R5       EQU   05
R6       EQU   06
R7       EQU   07
R8       EQU   08
R9       EQU   09
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
QNAME    DS    CL8                     QUEUE NAME
JNAME    DS    CL8                     JOB NAME
RNAME    DS    CL255                   RNAME
PRTLEN   DS    H                       PRINTLINE LENGTH
PRTOFF   DS    H                       OFFSET
PRTBUFF  DS    (300)CL1                OUTPUT BUFFER
STACK    DC    0D'0'
         DC    216XL1'0'               STACK AREA
XO0001   EQU   4096*(((*-WDSECT)+4095)/4096)
         ORG   WDSECT+XO0001
XL0001   EQU   *-WDSECT
ENQ      CSECT
         B     18(R15)                 BRANCH AROUND ID
         DC    AL1(13)                 IDENTIFIER LENGTH
         DC    CL13'ENQ_&SYSDATE'      IDENTIFIER
         STM   14,12,12(13)            SAVE CALLER'S REGISTERS
         LR    R10,R15                 SAVE BASE REGISTER
         USING ENQ,R10                 ESTABLISH ENQ ADDRESSABILITY
         LR    R9,R1                   SAVE PARM REGISTER
         USING CPPL,R9                 ESTABLISH CPPL ADDRESSABILITY
         GETMAIN R,LV=XL0001           GETMAIN DYNAMIC WORK AREA
         MVC   0(4,R1),*-10            COPY SP AND LENGTH
         ST    R13,4(R1)               SAVE AREA CHAINING
         ST    R1,8(R13)               ESTABLISH ADDRESSABILITY
         LR    R12,R1                  MOVE BASE OF WORK AREA
         USING WDSECT,R12
         L     R13,=A(STACK-WDSECT)    GET OFFSET TO STACK
         ALR   R13,R12                 POINT TO START OF STACK
         A     R1,=A(XL0001-71)        GET ADDR OF STACK MAX
         ST    R1,8(R12)               SAVE INTO WORK AREA
         MVC   16(6,R12),=XL6'58FC000C07FF'
         LA    R1,OVERFLOW             GET OVERFLOW ROUTINE ADDRESS
         ST    R1,12(R12)              STORE INTO WORK AREA
         B     INITIAL                 BEGIN INITIALIZATION
OVERFLOW EQU   *
         BALR  R15,0                   GET A BASE
         USING *,R15                   ESTABLISH ADDRESSABILITY
         WTO   'STACK OVERFLOW IN ENQ',ROUTCDE=11,DESC=7
         DROP  R15
         ABEND 900,DUMP                PRODUCE DUMP
         B     EXIT                        AND RETURN
         TITLE 'ENQ - INITIALIZATION'
*
*        INITIALIZATION
*
INITIAL  EQU   *
         LA    R8,IOPLL                INITIALIZE THE IOPL
         USING IOPL,R8                 ESTABLISH IOPL ADDRESSABILITY
         MVC   IOPLUPT(4),CPPLUPT      COPY UPT ADD FROM CPPL
         MVC   IOPLECT(4),CPPLECT      COPY ECT ADD FROM CPPL
         LA    R1,TSOECB               GET TSO ECB ADDRESS
         ST    R1,IOPLECB              STORE IN IOPL
         DROP  R8,R9                   IOPL, CPPL
         LA    R1,PRTLEN               INITIALIZE TO OLD
         ST    R1,OLD+4                STORE OUTPUT BUF ADD IN OLD
         LA    R1,1                    GET NUMBER OF OUTPUT SEGMENTS
         ST    R1,OLD                  STORE IN OLD
         XC    PRTOFF(2),PRTOFF        ZERO OFFSET OF FIRST SEGMENT
         MVC   GETMAINL(GETMLEN),GETMDC    BUY AN AREA FOR GQSCAN
GETAREA  GETMAIN VC,LA=MEMLOW,A=AREAA,MF=(E,GETMAINL),SP=1,            X
               RELATED=(FREEAREA)
         LTR   R15,R15
         BZ    CONFL1
         LA    R1,NOMEM                COMPLAIN ABOUT LACK OF MEMORY
         L     R15,=A(PRINT)
         BALR  R14,R15
         LA    R15,4
         B     EXIT
*
*        ON ENTRY WE ASSUME THE CONFLICT COMMAND
*
CONFL1   MVI   FLGS,CONFLG             INIT THE FLAG
         XC    QNL(6),QNL              ZERO LENGTHS
         MVC   GQLIST(CONQL),CONQ      INIT PARM LIST
         TITLE 'ENQ - MAIN Q SCAN/FORM AT LOOP'
*
*        MAIN  Q SCAN/FORMAT LOOP  FOR ALL COMMANDS
*
ENQLP    EQU   *
         L     R15,=A(SCAN)            GO SCAN QUEUES
         BALR  R14,R15
         BZ    ENQLP1                  RESOURCE FOUND
         TM    FLGS,CONFLG             CONFLICT REQUEST?
         BNO   GETCMD                  NO, DON'T ISSUE MESSAGE
         LA    R1,CONFLPRM             POINT TO NO CONFLICTS FOUND MSG
         ST    R1,OLD+4                STORE IN OLD
         L     R15,=A(PRINT)
         BALR  R14,R15
         BZ    GETCMD                  GET COMMAND
ENQLP1   EQU   *
         L     R9,AREAA                POINT TO FIRST RIB
         USING RIB,R9
*
*        LOOP  TO HERE AFTER RESCAN WHERE ALL RIBES FOR THE
*              PREVIOUS RIB OCCURED  IN THE PREVIOUS AREA
*
ENQLP2   MVC   NRIBES(4),RIBTRIBE      TOTAL NUM OF RIBE'S FOR THIS RIB
         NI    FLGS,X'FF'-CONTFLG      MARK START OF RIB
         MVC   NCRIBES(4),RIBNRIBE     SAVE # RIBES THIS AREA
         LR    R8,R9                   COPY RIB ADDR
         AH    R8,RIBL                 ADD RIBLENGTH RETURN BY GQSCAN
         AH    R8,RIBVLEN              ADD LENGTH OF VARIABLE PORTION
         USING RIBE,R8
*
*        LOOP  TO HERE TO PROCESS  A RIBE
*
ENQLP3   EQU   *
         L     R15,=A(FINDCHK)         SEE IF WE PRINT THIS ONE
         BALR  R14,R15
         BNZ   ENQ2                    IF NOT NO PRINT
         L     R15,=A(FMTRIBE)         FORMAT JOB INFO
         BALR  R14,R15
         L     R15,=A(FMTRIB)          FORMAT QNAME, RNAME INFO
         BALR  R14,R15
         L     R15,=A(PRINT)
         BALR  R14,R15
         BNZ   GETCMD                  IF ATTN, QUIT
ENQ2     AH    R8,RIBEL                POINT TO NEXT RIBE
         L     R1,NRIBES               GET # UNPROCESSED RIBES THIS RIB
         BCT   R1,ENQ4                 DECREMENT
*
*        FINISHED WITH THE RIBES IN THIS RIB
*        ADJUST POINTER AND DECREMENT NUMBER OF RIBS
*
ENQ2A    LR    R9,R8                   ITS A RIB NOT A RIBE
         NI    FLGS,X'FF'-CONTFLG      MARK START OF RIB
         L     R1,NRIBS                GET # UNPROCESSED RIBS
         BCT   R1,ENQ3                 DECREMENT
*
*        FINISHED WITH ALL THE RIBS IN THIS AREA
*        CHECK RC TO SEE IF THAT  WAS THE LAST RIB
*
         ICM   R1,15,GQRC              CHECK FOR END OF LIST
         BZ    GETCMD
         L     R15,=A(RESCAN)          GET NEXT CHUNK OF STUFF
         BALR  R14,R15
         L     R9,AREAA                POINT TO FIRST RIB
         BZ    ENQLP2
         B     GETCMD                  TOTAL NUM OF RIBE'S FOR THIS RIB
*
*        THERE IS AT LEAST ONE UNPROCESSED RIB IN THIS AREA
*
ENQ3     ST    R1,NRIBS                STORE NEW #
         B     ENQLP2                  GO PROCESS THIS RIB
*
*        THERE IS AT LEAST ONE UNPROCESSED RIBE IN THIS RIB
*
ENQ4     ST    R1,NRIBES               STORE NEW #
         L     R1,NCRIBES              GET # UNPROCESSED RIBS THIS AREA
         BCT   R1,ENQ5
*
*        THE RIBES FOR THIS RIB SPAN THIS AREA
*        PUT OUT A MSG OF (*MORE*) AND PROCESS THE NEXT RIB
*
         LA    R1,MOREM                POINT TO MORE MESSAGE
         ST    R1,OLD+4                STORE IN OLD
         L     R15,=A(PRINT)
         BALR  R14,R15
         BZ    ENQ2A                   PROCESS NEXT RIB
         B     GETCMD                  IF ATTN PROCESS NEXT CMD
*
*        THERE  IS AT LEAST ONE UNPROCESSED RIBE IN THIS AREA
*
ENQ5     ST    R1,NCRIBES              STORE NEW #
         B     ENQLP3                  GO FORMAT THIS ONE
         TITLE 'ENQ - COMMAND REQUESTOR'
*
*        COMMAND REQUESTOR
*
GETCMD   NI    FLGS,CONFLG+FINDFLG+GLOBFLG    CLEANUP FLAGS
         LA    R1,HERALD               POINT TO HERALD
         ST    R1,OLD+4                STORE IN OLD
         MVC   PUTGETL(PUTGTDCL),PUTGETDC    INIT PARM BLOCK
         XC    TSOECB(4),TSOECB        INIT ECB
         PUTGET PARM=PUTGETL,OUTPUT=(OLD,SINGLE,MODE),                 X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),                     X
               TERMGET=(EDIT,WAIT),MF=(E,IOPLL)
         CH    R15,=H'5'               SEE IF OK RETURN
         BL    GETCMD1
         CH    R15,=H'8'               WAS IT ATTENTION?
         BE    GETCMD                  IF SO REPROMPT
         CH    R15,=H'32'              DID THE USER HANG UP?
         BE    CLEANUP                 IF SO JUST EXIT
         EX    R0,*                    SHOULD NEVER HAPPEN
GETCMD1  L     R9,PUTGETL+12           GET ADDR OF REPLY
         ST    R9,GETADDR              SAVE AS ADDR OF INPUT BUFFER
         LH    R8,0(R9)                GET LENGTH OF INPUT BUFFER
         ST    R8,GETLEN               SAVE LENGTH
         CH    R8,=H'4'                SEE IF EMPTY
         BH    GETCMD2                 NO SO PROCESS IT
RECMD    TM    FLGS,CONFLG             DO LAST COMMAND AGAIN
         BO    CONFLICT                IF CONFLICT, DO IT AGAIN
         TM    FLGS,FINDFLG            IF FIND
         BO    FINDAG                  DO THAT AGAIN
         TM    FLGS,GLOBFLG            IF GLOBAL
         BO    GLOBAL                  DO THAT AGAIN
GETCMDAG EQU   *
         L     R15,=A(GETCMDFR)        FREE THE INPUT BUFFER
         BALR  R14,R15
         B     GETCMD                  AND ASK AGAIN
GETCMD2  LA    R7,0(R8,R9)             POINT PAST END OF INPUT BUFFER
         ST    R7,CUREND               SAVE THIS POSITION
         LA    R6,4(R9)                POINT TO FIRST TEXT CHAR
         ST    R6,CURIN                INIT CURRENT INPUT POSITION
         L     R15,=A(GETTOKEN)
         BALR  R14,R15
         BZ    RECMD                   IF EMPTY LINE, DO PREVIOUS CMD
         CLI   0(R1),C'C'              SEE IF CONFLICT
         BE    CONFLICT
         CLI   0(R1),C'D'              SEE IF DSN
         BE    DSN
         CLI   0(R1),C'E'              SEE IF END
         BE    END
         CLI   0(R1),C'F'              SEE IF FIND
         BE    FIND
         CLI   0(R1),C'G'              SEE IF GLOBAL
         BE    GLOBAL
         LA    R1,CMDNF                POINT TO INVALID COMMAND MSG
         ST    R1,OLD+4
         L     R15,=A(PRINT)
         BALR  R14,R15
         BZ    GETCMDAG                IF NO ATTN, ASK AGAIN
         B     END                     IF ATTN, END
         TITLE 'ENQ - COMMANDS'
CONFLICT EQU   *
         L     R15,=A(GETCMDFR)        CONFLICT
         BALR  R14,R15
         B     CONFL1
*
DSN      XC    QNL(6),QNL              ZERO ALL LENGTHS
         LA    R15,6                   LENGTH OF 'SYSDSN'
         STH   R15,QNL                 SAVE QNAME LENGTH
         MVC   QNAME,=CL6'SYSDSN'      MOVE INTO SAVE AREA
DSN1     EQU   *
         L     R15,=A(GETTOKEN)
         BALR  R14,R15
         BZ    DSN2                    IF NONE LEAVE REST EMPTY
         CLI   0(R1),C'*'              * IS SAME AS EMPTY
         BE    DSN2
         CH    R15,=H'255'
         BH    DSNPR
         STH   R15,RNL                 SAVE RNAME LENGTH
         BCTR  R15,0                   DECREMENT FOR EXECUTE
         MVC   RNAME(1),0(R1)          < EXECUTED >
         EX    R15,*-6
DSN2     EQU   *
         L     R15,=A(GETTOKEN)
         BALR  R14,R15
         BZ    DSNAG                   IF NONE LEAVE REST EMPTY
         CLI   0(R1),C'*'              * IS SAME AS EMPTY
         BE    DSNAG
         CH    R15,=H'8'               CHECK FOR VALID LENGTH
         BH    DSNPR
         STH   R15,JNL                 SAVE JOBNAME LENGTH
         BCTR  R15,0                   DECREMENT FOR EXECUTE
         MVC   JNAME(1),0(R1)          < EXECUTED >
         EX    R15,*-6
DSNAG    EQU   *
         L     R15,=A(GETCMDFR)
         BALR  R14,R15
         MVI   FLGS,FINDFLG            FIND
         MVC   GQLIST(ALLQL),ALLQ      INIT PARM BLOCK
         B     ENQLP
DSNPR    LA    R1,DSNPRM               POINT TO INVALID PARM MSG
         ST    R1,OLD+4                STORE IN OLD
         L     R15,=A(PRINT)
         BALR  R14,R15
         BZ    GETCMDAG                IF NO ATTN, ASK AGAIN
         B     END                     IF ATTN, QUIT
*
END      EQU   *
         L     R15,=A(GETCMDFR)        END
         BALR  R14,R15
         B     CLEANUP
*
GLOBAL   EQU   *
         L     R15,=A(GETCMDFR)        GLOBAL
         BALR  R14,R15
         MVI   FLGS,GLOBFLG            CLEAR FLAGS
         MVC   GQLIST(ALLQL),ALLQ      INIT PARM BLOCK
         B     ENQLP
*
FIND     XC    QNL(6),QNL              ZERO ALL LENGTHS
         L     R15,=A(GETTOKEN)
         BALR  R14,R15
         BZ    FIND1                   IF NONE LEAVE ALL EMPTY
         CLI   0(R1),C'*'              * IS SAME AS EMPTY
         BE    FIND1
         CH    R15,=H'8'               CHECK LENGTH
         BH    FINDPR
         STH   R15,QNL                 SAVE QNAME LENGTH
         BCTR  R15,0                   DECREMENT FOR EXECUTE
         MVC   QNAME(1),0(R1)          < EXECUTED >
         EX    R15,*-6                 MOVE INTO SAVE AREA
FIND1    EQU   *
         L     R15,=A(GETTOKEN)
         BALR  R14,R15
         BZ    FIND2                   IF NONE LEAVE REST EMPTY
         CLI   0(R1),C'*'              * IS SAME AS EMPTY
         BE    FIND2
         CH    R15,=H'255'
         BH    FINDPR
         STH   R15,RNL                 SAVE RNAME LENGTH
         BCTR  R15,0                   DECREMENT FOR EXECUTE
         MVC   RNAME(1),0(R1)          < EXECUTED >
         EX    R15,*-6
FIND2    EQU   *
         L     R15,=A(GETTOKEN)
         BALR  R14,R15
         BZ    FINDAG                  IF NONE LEAVE REST EMPTY
         CLI   0(R1),C'*'              * IS SAME AS EMPTY
         BE    FINDAG
         CH    R15,=H'8'               CHECK FOR VALID LENGTH
         BH    FINDPR
         STH   R15,JNL                 SAVE JOBNAME LENGTH
         BCTR  R15,0                   DECREMENT FOR EXECUTE
         MVC   JNAME(1),0(R1)          < EXECUTED >
         EX    R15,*-6
FINDAG   EQU   *
         L     R15,=A(GETCMDFR)
         BALR  R14,R15
         MVI   FLGS,FINDFLG            FIND
         MVC   GQLIST(ALLQL),ALLQ      INIT PARM BLOCK
         B     ENQLP
FINDPR   LA    R1,FINDPRM              POINT TO INVALID PARM MSG
         ST    R1,OLD+4                STORE IN OLD
         L     R15,=A(PRINT)
         BALR  R14,R15
         BZ    GETCMDAG                IF NO ATTN, ASK AGAIN
         B     END                     IF ATTN, QUIT
*
CLEANUP  MVC   FREEML(FREEMLEN),FREEMDC
FREEAREA FREEMAIN VU,A=AREAA,MF=(E,FREEML),SP=1,RELATED=(GETAREA)
         SR    R15,R15
EXIT     EQU   *
         LR    R1,R12                  SAVE WORK AREA BASE ADDRESS
         L     R13,4(R12)              UNCHAIN SAVE AREA
         ST    R15,16(R13)             SAVE RETURN CODE
         L     R0,0(R1)                GET SP AND LENGTH
         FREEMAIN R,LV=(0),A=(1)       FREE DYNAMIC WORK AREA
         LM    14,12,12(R13)           RESTORE CALLER'S REGISTERS
         LTR   R15,R15                 SET CONDITION CODE
         BR    R14                     RETURN
         DC    0D'0'                   PAD TO LTORG FOR COMPARES
         LTORG                         GOOD AS PLACE AS ANY
         TITLE 'ENQ - CONSTANTS'
         DS    0F                      ALLIGN TO FULLWORD BOUNDARY
MEMLOW   DC    X'00008000'             MEM LIMITS FOR GQ AREA
MEMHIGH  DC    X'7FFFFFFF'
GETMDC   GETMAIN VC,SP=1,MF=L
GETMLEN  EQU   *-GETMDC
FREEMDC  FREEMAIN VU,SP=1,MF=L
FREEMLEN EQU   *-FREEMDC
PUTGETDC PUTGET  OUTPUT=(0,,MODE),MF=L
PUTGTDCL EQU   *-PUTGETDC
ALLQ     GQSCAN REQLIM=MAX,SCOPE=ALL,SYSNAME=0,REQCNT=1,MF=L
ALLQL    EQU   *-ALLQ
CONQ     GQSCAN REQLIM=MAX,SCOPE=ALL,SYSNAME=0,WAITCNT=1,MF=L
CONQL    EQU   *-CONQ
NOMEM    MSG   ' NOT ENOUGH CORE TO PROCESS REQUEST'
HERALD   MSG   ' ENQ'
CMDNF    MSG   ' INVALID COMMAND'
CONFLPRM MSG   ' NO CONFLICTS FOUND'
DSNPRM   MSG   ' INVALID PARAMETER'
FINDPRM  MSG   ' INVALID PARAMETER'
MOREM    MSG   ' (*MORE*)'
         LTORG
         DROP  R10                     ENQ
         TITLE 'ENQ - SUBROUTINES'
*
*        SUBROUTINE TO PARSE AND  UPPERCASE NEXT TOKEN FROM INPUT LINE
*
*     ON ENTRY ASSUMES:
*        CURIN POINTS TO FIRST CHAR OF TEXT
*        CUREND POINTS PAST END OF TEXT
*
*     ON RETURN:
*        R1 POINTS TO FIRST CHAR OF TOKEN
*        R15 CONTAINS LENGTH OF TOKEN
*        CURIN POINTS TO NEXT POSITION IN INPUT STRING
*
         PUSH  PRINT
         DS    0F
GETTOKEN EQU   *
         STM   0,15,0(R13)             SAVE CALLER'S REGISTERS
         LR    R10,R15                 SAVE BASE REGISTER
         USING GETTOKEN,R10            ESTABLISH ADDRESSABILITY
         LR    R11,R13
         LA    R13,64(R13)             RESERVE THIS ELEMENT
         C     R13,8(R12)              CHECK FOR OVERFLOW
         BNL   16(R12)                 IF SO GO TO ERROR ROUTINE
*        THE FOLLOWING REGISTERS ARE IN USE:
*        R12 - WDSECT
*        R10 - GETTOKEN
*        R9  - RIB
*        R8  - RIBE
         POP   PRINT
         L     R6,CURIN                POINT TO CURRENT POS
         L     R7,CUREND               POINT PAST END OF STRING
         SR    R15,R15                 ASSUME ZERO LENGTH TOKEN
         CR    R6,R7                   SEE IF AT END OF TEXT
         BNL   GETTR1                  IF SO RETURN WITH EMPTY TOKEN
*
*        FIND  FIRST NON BLANK, OR COMMA
*
GETT1    OI    0(R6),C' '              UPPERCASE THE CHARACTER
         CLI   0(R6),C' '              SEE IF BLANK
         BNE   GETT2                   BRANCH IF NOT
         LA    R6,1(R6)                POINT TO NEXT CHAR
         CR    R6,R7                   SEE IF OFF END OF TEXT
         BL    GETT1                   IF NOT OFF END CONTINUE
         B     GETTR1                  IF OFF END RETURN EMPTY TOKEN
GETT2    CLI   0(R6),C','              IS IT A COMMA
         BNE   GETT3                   IF NOT THEN START OF TOKEN
         B     GETTR                   AND RETURN EMPTY TOKEN
*
*        NEXT  BLANK OR COMMA DELIMITS TOKEN
*
GETT3    LR    R1,R6                   SAVE START OF TOKEN
GETT4    OI    0(R6),C' '              UPPERCASE THE CHARACTER
         CLI   0(R6),C' '              FIND NEXT BLANK
         BE    GETTR                   END OF TOKEN
         CLI   0(R6),C','              COMMA IS ALSO A DELIMITER
         BE    GETTR                   END OF TOKEN
         LA    R15,1(R15)              COUNT THIS CHAR
         LA    R6,1(R6)                BUMP POINTER
         CR    R6,R7                   SEE IF OFF END OF TEXT
         BL    GETT4                   IF NOT, CONTINUE SCAN
GETTR    LA    R6,1(R6)                POINT TO NEXT CHAR
GETTR1   ST    R6,CURIN                SAVE NEW CURRENT POSSITION
         LTR   R15,R15                 GET RC
         LM    2,14,8(R11)             RESTORE CALLER'S REGISTERS
         BR    R14                     RETURN
         LTORG
         DROP  R10
         EJECT
*
*        SUBROUTINE TO FREE INPUT BUFFER FROM PUTGET
*        ASSUMES ADDR IN R9, LENGTH IN R8
*
         PUSH  PRINT
         DS    0F
GETCMDFR EQU   *
         STM   0,15,0(R13)             SAVE CALLER'S REGISTERS
         LR    R10,R15                 SAVE BASE REGISTER
         USING GETCMDFR,R10            ESTABLISH ADDRESSABILITY
         LR    R11,R13
         LA    R13,64(R13)             RESERVE THIS ELEMENT
         C     R13,8(R12)              CHECK FOR OVERFLOW
         BNL   16(R12)                 IF SO GO TO ERROR ROUTINE
*        THE FOLLOWING REGISTERS ARE IN USE:
*        R12 - WDSECT
*        R10 - GETTOKEN
*        R9  - RIB
*        R8  - RIBE
         POP   PRINT
         L     R9,GETADDR              POINT TO AREA TO BE FREED
         L     R8,GETLEN               GET LENGTH OF AREA TO BE FREED
         FREEMAIN R,A=(R9),LV=(R8),SP=1
         LM    2,14,8(R11)             RESTORE CALLER'S REGISTERS
         BR    R14                     RETURN
         LTORG
         DROP  R10
         EJECT
         PUSH  PRINT
         DS    0F
SCAN     EQU   *
         STM   0,15,0(R13)             SAVE CALLER'S REGISTERS
         LR    R10,R15                 SAVE BASE REGISTER
         USING SCAN,R10                ESTABLISH ADDRESSABILITY
         LR    R11,R13
         LA    R13,64(R13)             RESERVE THIS ELEMENT
         C     R13,8(R12)              CHECK FOR OVERFLOW
         BNL   16(R12)                 IF SO GO TO ERROR ROUTINE
*        THE FOLLOWING REGISTERS ARE IN USE:
*        R12 - WDSECT
*        R10 - GETTOKEN
*        R9  - RIB
*        R8  - RIBE
         POP   PRINT
         XC    TOKEN(4),TOKEN          ZERO TOKEN
         LM    R2,R3,AREAA             GET AREA ADDR AND LENGTH
         GQSCAN AREA=((R2),(R3)),TOKEN=TOKEN,MF=(E,GQLIST)
         ST    R15,GQRC                SAVE THE RC
         CH    R15,=H'4'               EMPTY
         BE    SCANRT                  IF SO RETURN
         CH    R15,=H'12'              ERROR
         BL    SCAN1
         EX    R0,*                    SHOULD NEVER HAPPEN
SCAN1    ST    R0,RIBL                 SAVE LENGTHS OF RIB AND RIBE
         ST    R1,NRIBS                SAVE # RIBS THIS AREA
         SR    R15,R15
SCANRT   EQU   *
         LTR   R15,R15                 GET RC
         LM    2,14,8(R11)             RESTORE CALLER'S REGISTERS
         BR    R14                     RETURN
         LTORG
         DROP  R10
         EJECT
*
*        CALL  TO GET NEXT CHUNK  OF DATA FROM GQSCAN
*
         PUSH  PRINT
         DS    0F
RESCAN   EQU   *
         STM   0,15,0(R13)             SAVE CALLER'S REGISTERS
         LR    R10,R15                 SAVE BASE REGISTER
         USING RESCAN,R10              ESTABLISH ADDRESSABILITY
         LR    R11,R13
         LA    R13,64(R13)             RESERVE THIS ELEMENT
         C     R13,8(R12)              CHECK FOR OVERFLOW
         BNL   16(R12)                 IF SO GO TO ERROR ROUTINE
*        THE FOLLOWING REGISTERS ARE IN USE:
*        R12 - WDSECT
*        R10 - GETTOKEN
*        R9  - RIB
*        R8  - RIBE
         POP   PRINT
         GQSCAN MF=(E,GQLIST)
SCANCHK  ST    R15,GQRC                SAVE THE RC
         CH    R15,=H'4'               EMPTY
         BE    RESCANRT                IF SO RETURN
         CH    R15,=H'12'              ERROR
         BL    RESCAN1
         EX    R0,*                    SHOULD NEVER HAPPEN
RESCAN1  ST    R0,RIBL                 SAVE LENGTHS OF RIB AND RIBE
         ST    R1,NRIBS                SAVE # RIBS THIS AREA
         SR    R15,R15
RESCANRT EQU   *
         LTR   R15,R15                 GET RC
         LM    2,14,8(R11)             RESTORE CALLER'S REGISTERS
         BR    R14                     RETURN
         LTORG
         DROP  R10
         EJECT
*
*        CHECK  TO SEE IF FIND IS  IN EFFECT
*        IF NOT RETURN RC=0
*
*        IF SO CHECK THAT SPECIFIED INITIAL PORTIONS OF
*        QNAME RNAME AND JOBNAME  MATCH
*        RETURN ZERO IF SO, NONZERO IF NOT
*
         PUSH  PRINT
         DS    0F
FINDCHK  EQU   *
         STM   0,15,0(R13)             SAVE CALLER'S REGISTERS
         LR    R10,R15                 SAVE BASE REGISTER
         USING FINDCHK,R10             ESTABLISH ADDRESSABILITY
         LR    R11,R13
         LA    R13,64(R13)             RESERVE THIS ELEMENT
         C     R13,8(R12)              CHECK FOR OVERFLOW
         BNL   16(R12)                 IF SO GO TO ERROR ROUTINE
*        THE FOLLOWING REGISTERS ARE IN USE:
*        R12 - WDSECT
*        R10 - GETTOKEN
*        R9  - RIB
*        R8  - RIBE
         POP   PRINT
         TM    FLGS,FINDFLG            IS FIND APPROPRIATE
         BNO   FINDC00                 NO, EVERYTHING IS FOUND
         SR    R1,R1                   CLEAR R1
         ICM   R1,3,QNL                GET QNAME LENGTH
         BZ    FINDC1
         BCTR  R1,0                    DECREMENT FOR EXECUTE
         CLC   RIBQNAME(1),QNAME       < EXECUTED >
         EX    R1,*-6
         BNE   FINDNZ
FINDC1   ICM   R1,3,JNL                GET JOBNAME LENGTH
         BZ    FINDC2
         BCTR  R1,0                    DECREMENT FOR EXECUTE
         CLC   RIBEJBNM(1),JNAME       < EXECUTED >
         EX    R1,*-6
         BNE   FINDNZ
FINDC2   ICM   R1,3,RNL                GET RNAME LENGTH
         BZ    FINDC00
         BCTR  R1,0                    DECREMENT FOR EXECUTE
         LR    R15,R9                  COPY RIB ADDR
         AH    R15,RIBL                POINT TO VARIABLE PORTION
         CLC   0(1,R15),RNAME          < EXECUTED >
         EX    R1,*-6
         BNE   FINDNZ
FINDC00  SR    R15,R15
FINDNZ   DS    0H                      R15 - BASE AND IS NON-ZERO
FINDRET  EQU   *
         LTR   R15,R15                 GET RC
         LM    2,14,8(R11)             RESTORE CALLER'S REGISTERS
         BR    R14                     RETURN
         LTORG
         DROP  R10
         EJECT
*
*        FORMAT THE REQUESTOR SPECIFIC INFO FROM THE RIB AND RIBE
*
         PUSH  PRINT
         DS    0F
FMTRIBE  EQU   *
         STM   0,15,0(R13)             SAVE CALLER'S REGISTERS
         LR    R10,R15                 SAVE BASE REGISTER
         USING FMTRIBE,R10             ESTABLISH ADDRESSABILITY
         LR    R11,R13
         LA    R13,64(R13)             RESERVE THIS ELEMENT
         C     R13,8(R12)              CHECK FOR OVERFLOW
         BNL   16(R12)                 IF SO GO TO ERROR ROUTINE
*        THE FOLLOWING REGISTERS ARE IN USE:
*        R12 - WDSECT
*        R10 - GETTOKEN
*        R9  - RIB
*        R8  - RIBE
         POP   PRINT
         MVC   PRTBUFF(7),=CL7' '      START WITH A BLANKS
         MVC   PRTBUFF+1(3),=C'SHR'    SHR -> PRTBUFF
         TM    RIBERFLG,X'80'          EXCLUSIVE CONTROL?
         BNZ   FMTRIBE1                NO, LEAVE AS SHARE
         MVC   PRTBUFF+1(3),=C'OLD'    OLD -> PRTBUFF
FMTRIBE1 EQU   *
         MVC   PRTBUFF+5(1),=C'W'      W -> PRTBUFF
         TM    RIBESFLG,X'80'          OWN RESOURCE?
         BNO   FMTRIBE2                NO, LEAVE AS WAIT
         MVC   PRTBUFF+5(1),=C'O'      O -> PRTBUFF
FMTRIBE2 EQU   *
         MVC   PRTBUFF+7(8),RIBEJBNM   COPY JOBNAME
         MVC   PRTLEN(2),=H'19'        LEN = 15+4 (NO VOL, UCB)
         TM    RIBERFLG,RIBERESV       TEST FOR RESERVE
         BNO   FMTRIBE3
         MVI   PRTBUFF+15,C' '
         MVC   PRTLEN(2),=H'31'        LEN = 27+4
         L     R2,RIBEUCB              GET UCB ADDRESS
         MVC   PRTBUFF+16(6),UCBVOLI-UCBOB(R2)
         MVI   PRTBUFF+22,C'-'
         SLL   R2,4                    SHIFT UCB ADDRESS LEFT 2
         ST    R2,PARMLSTS             STORE IN WORK AREA
         OI    PARMLSTS+3,X'0F'        OR IN SIGN
         UNPK  PRTBUFF+23(4),PARMLSTS+1(3)    UNPACK
         L     R1,=A(FMTTRTBL)         BECAUSE OF ADDRESSABILITY
         TR    PRTBUFF+23(4),0(R1)     CONVERT TO CHARACTER
FMTRIBE3 EQU   *
         LA    R1,PRTLEN               POINT TO THE SEGMENT
         ST    R1,OLD+4                STORE IN OLD
         LM    2,14,8(R11)             RESTORE CALLER'S REGISTERS
         BR    R14                     RETURN
FMTTRTBL EQU   *-X'F0'
         DC    C'0123456789ABCDEF'     TRANSLATE TABLE
         LTORG
         DROP  R10
         EJECT
*
*        FORMAT THE RESOURCE SPECIFIC INFO FROM THE RIB
*
*        ALTHOUGH THIS SUBROUTINE IS CALLED FOR EACH RIBE,
*        IT ONLY ADDS STUFF TO THE PRINT BUFFER ONCE FOR EACH
*        RIB.  IT ASSUMES THAT FMTRIBE HAS ALREADY BEEN CALLED
*
         PUSH  PRINT
         DS    0F
FMTRIB   EQU   *
         STM   0,15,0(R13)             SAVE CALLER'S REGISTERS
         LR    R10,R15                 SAVE BASE REGISTER
         USING FMTRIB,R10              ESTABLISH ADDRESSABILITY
         LR    R11,R13
         LA    R13,64(R13)             RESERVE THIS ELEMENT
         C     R13,8(R12)              CHECK FOR OVERFLOW
         BNL   16(R12)                 IF SO GO TO ERROR ROUTINE
*        THE FOLLOWING REGISTERS ARE IN USE:
*        R12 - WDSECT
*        R10 - GETTOKEN
*        R9  - RIB
*        R8  - RIBE
         POP   PRINT
         TM    FLGS,CONTFLG            SEE IF RIB ALREADY FORMATTED
         BO    FMTRIB00
         OI    FLGS,CONTFLG            MARK RIB AS FORMATTED
         LA    R1,PRTLEN               POINT TO OUTPUT BUFFER
         ST    R1,OLD+4                POINT OLD TO PRINT BUFFER
         LH    R2,PRTLEN               GET LENGTH
         LA    R1,0(R1,R2)             POINT PAST END OF BUFFER
         MVI   0(R1),C' '              MOVE IN QNAME
         MVC   1(8,R1),RIBQNAME
         MVI   9(R1),C' '
         AH    R2,=H'10'               ADDJUST LENGTH
         SR    R3,R3                   CLEAR R3
         ICM   R3,1,RIBRNMLN           GET RNAME LENGTH
         BNZ   FMTRIB1
         STH   R2,PRTLEN               SAVE NEW LENGTH
         B     FMTRIB00
FMTRIB1  AR    R2,R3                   ADD RNAME LENGTH TO PRINT LENGTH
         STH   R2,PRTLEN               SAVE NEW LENGTH
         LR    R4,R9                   COPY RIB ADDR
         AH    R4,RIBL                 POINT TO VARIABLE PORTION
         BCTR  R3,0                    DECREMENT FOR EXECUTE
         MVC   10(1,R1),0(R4)          < EXECUTED >
         EX    R3,*-6                  MOVE IN RNAME
FMTRIB00 EQU   *
         LM    2,14,8(R11)             RESTORE CALLER'S REGISTERS
         BR    R14                     RETURN
PRTSPACE MSG   '  '
         LTORG
         DROP  R10
         EJECT
*
*        PUTLINE SUBROUTINE, ASSUMES OLD POINTS TO SEGMENT TO BE
*         PRINTED. RETURNS NON ZERO IF ATTENTION SIGNALLED
*
         PUSH  PRINT
         DS    0F
PRINT    EQU   *
         STM   0,15,0(R13)             SAVE CALLER'S REGISTERS
         LR    R10,R15                 SAVE BASE REGISTER
         USING PRINT,R10               ESTABLISH ADDRESSABILITY
         LR    R11,R13
         LA    R13,64(R13)             RESERVE THIS ELEMENT
         C     R13,8(R12)              CHECK FOR OVERFLOW
         BNL   16(R12)                 IF SO GO TO ERROR ROUTINE
*        THE FOLLOWING REGISTERS ARE IN USE:
*        R12 - WDSECT
*        R10 - GETTOKEN
*        R9  - RIB
*        R8  - RIBE
         POP   PRINT
         XC    TSOECB(4),TSOECB
         MVC   PUTLL(PUTLDCL),PUTLDC
         PUTLINE PARM=PUTLL,OUTPUT=OLD,MF=(E,IOPLL)
         LTR   R15,R15
         BZ    PRINTRET
         CH    R15,4                   ATTENTION?
         BE    PRINTNZ                 IF SO RETURN NON ZERO RC
         CH    R15,20                  TERMINAL DISCONNECTED?
         BE    PRINTRET                IGNORE IT
         CH    R15,12                  SEVERE ERROR
         BL    PRINTRET                IGNORE ALL OTHERS
         EX    R0,*                    SHOULD NEVER HAPPEN
PRINTRET SR    R15,R15                 ZERO RETURN CODE
PRINTNZ  EQU   *
         LTR   R15,R15                 GET RC
         LM    2,14,8(R11)             RESTORE CALLER'S REGISTERS
         BR    R14                     RETURN
PUTLDC   PUTLINE MF=L
PUTLDCL  EQU   *-PUTLDC
         LTORG
         DROP  R10
         TITLE 'ENQ - DSECTS'
         IKJCPPL
         IKJIOPL
UCB      DSECT
         IEFUCBOB
         EJECT
         ISGRIB
         END
