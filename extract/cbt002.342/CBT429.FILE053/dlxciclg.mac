         TITLE 'DLXCICLG - CICS JOURNAL LOGGING'
***********************************************************************
*                                                                     *
*              MODULE NAME = DLXCICLG                                 *
*                                                                     *
*              DESCRIPTIVE NAME = CICS JOURNAL LOGGING                *
*                                                                     *
*              FUNCTION =                                             *
*                USE SVC99 TO DYNAMICALLY ALLOCATE 'CICS_.            *
*                DFHJ___' AS IEFRDER OR SYSUT1, A CICS JOURNAL        *
*                FILE AND 'CICS_.DFHJ__.TAPEBKP(+1)' AS NEWRDER       *
*                OR SYSUT2, A GDG USED TO CONTAIN BACKUP COPY         *
*                OF THE JOURNAL FILE. LINK TO 'DFSULTR0' OR           *
*                'IEBGENER' TO PERFORM THE ACTUAL COPY OF THE         *
*                JOURNAL TO BACKUP TAPE. IF REPL-ID IS PRESENT        *
*                AND JOURNAL BACKUP IS SUCCESSFUL, REPLY 'GO' TO      *
*                OUTSTANDING CICS MESSAGE. IF JOURNAL BACKUP IS NOT   *
*                SUCCESSFUL, ISSUE APPROPRIATE WTO.                   *
*                                                                     *
*              OPERATION =                                            *
*                SAVE REGISTERS AND ESTABLISH ADDRESSABILITY          *
*                IF 'REPLONLY' IS 'YES':                              *
*                    IF 'REPLYID' IS NOT 'XX':                        *
*                        GETMAIN DYNAMIC STORAGE                      *
*                        REPLY 'GO' TO OUTSTANDING CICS MESSAGE       *
*                        FREEMAIN DYNAMIC STORAGE                     *
*                IF 'REPLONLY' IS 'NO ':                              *
*                    GETMAIN DYNAMIC STORAGE                          *
*                    INVOKE DYNALLOC (SVC99) TO ALLOCATE THE          *
*                        JOURNAL FILE ON DISK:                        *
* ------------------------------------------------------------------- *
* ×       IEFRDER  DD  DSN=CICS_.DFHJ___,                           × *
* ×                    DISP=(SHR,KEEP,KEEP),                        × *
* ×                    DCB=RECFM=VB                                 × *
* ×                              OR                                 × *
* ×       SYSUT2   DD  DSN=CICS_.DFHJ___,                           × *
* ×                    DISP=(SHR,KEEP,KEEP),                        × *
* ×                    DCB=RECFM=VB                                 × *
* ------------------------------------------------------------------- *
*                    INVOKE DYNALLOC (SVC99) TO ALLOCATE THE          *
*                        BACKUP COPY OF THE JOURNAL FILE ON TAPE:     *
* ------------------------------------------------------------------- *
* ×       NEWRDER  DD  DSN=CICS_.DFHJ__.TAPEBKP(+1),                × *
* ×                    DISP=(NEW,CATLG,DELETE),                     × *
* ×                    UNIT=TAPE3480,                               × *
* ×                 DCB=(BLKSIZE=31165,DSORG=PS,LRECL=6233,RECFM=VB)× *
* ×                              OR                                 × *
* ×       SYSUT2   DD  DSN=CICS_.DFHJ__.TAPEBKP(+1),                × *
* ×                    DISP=(NEW,CATLG,DELETE),                     × *
* ×                    UNIT=TAPE3480,                               × *
* ×                 DCB=(BLKSIZE=31165,DSORG=PS,LRECL=6233,RECFM=VB)× *
* ------------------------------------------------------------------- *
*                    CHOOSE 'DFSULTR0' OR 'IEBGENER' BASED ON LOGPGM  *
*                    LINK TO 'LOGPGM' TO PERFORM COPY OPERATION       *
*                    IF 'LOGPGM' IS SUCCESSFUL:                       *
*                        REPLY 'GO' TO OUTSTANDING CICS MSG IF        *
*                        NECESSARY                                    *
*                    IF 'LOGPGM' IS NOT SUCCESSFUL:                   *
*                        ISSUE WTO SO THAT OPERATORS WILL TAKE        *
*                        APPROPRIATE ACTION                           *
*                    FREEMAIN DYNAMIC STORAGE                         *
*                RESTORE REGISTERS                                    *
*                EXIT                                                 *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*              NOTES =                                                *
*                                                                     *
*                REGISTER CONVENTIONS = STANDARD CONVENTIONS.         *
*                    REGISTER  1      = PARAMETER LIST POINTER        *
*                    REGISTER  2      = PARAMETER LIST WORK POINTER   *
*                    REGISTERS 3 - 10 = WORK REGISTERS                *
*                    REGISTER  11     = BAL REGISTER                  *
*                    REGISTER  12     = BASE REGISTER                 *
*                    REGISTER  13     = SAVE AREA POINTER             *
*                    REGISTER  14     = RETURN                        *
*                    REGISTER  15     = ENTRY POINT ADDRESS AND       *
*                                       RETURN CODE REGISTER          *
*                                                                     *
*              MACROS =                                               *
*                 SAVE, RETURN, EQUATE, GETMAIN, FREEMAIN,            *
*                 DYNALLOC, LINK, MODESET, MGCRPL, WTO                *
*                                                                     *
*              MAPPING MACROS USED =                                  *
*                 IEFZB4D0, IEFZB4D2, IEZMGCR                         *
*                                                                     *
*              ASSEMBLER OPTIONS = LIST,RENT                          *
*                                                                     *
*              LINKAGE EDITOR OPTIONS = LET,LIST,XREF,RENT,REUS,      *
*                                       REFR,AC=1                     *
*                                                                     *
*              LOAD LIBRARY = SYS1.PPLINK (LINKLST LIBRARY)           *
*                                                                     *
*                                                                     *
*              CHANGE ACTIVITY =                                      *
*                 12/04/85  WRITTEN.                            JWC.  *
*                                                                     *
*                 04/25/86  CHANGE TAPE DSN.                    JWC.  *
*                                                                     *
*                 04/29/86  CHANGE DCB INFORMATION FOR JOURNAL        *
*                           AND TAPE DATA SETS.                 JWC.  *
*                                                                     *
*                 07/29/86  ADD 'IEBGENER' OPTION.              JWC.  *
*                                                                     *
*                 08/21/86  ADD STIMER MACRO FOR 'TAPE UNIT           *
*                           UNAVAILABLE' ERRORS.                JWC.  *
*                                                                     *
*                 09/12/86  UPDATE TO WORK WITH CICS 1.7 AS           *
*                           WELL AS CICS 1.6.                   JWC.  *
*                                                                     *
*                 12/09/86  ADD STIMER MACRO FOR 'DATA SET            *
*                           UNAVAILABLE' ERRORS.                JWC.  *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*        INITIALIZATION
***********************************************************************
DLXCICLG CSECT                         CICS JOURNAL LOGGING
         SAVE  (14,12),,DLXCICLG_DELUXE_CHECK_&SYSDATE_&SYSTIME
*                                      SAVE REGISTERS
         LR    R12,R15                 R12 - BASE REGISTER
         USING DLXCICLG,R12            ESTABLISH PGM ADDRESSABILITY
         SR    R15,R15                 R15 - INITIALIZE TO ZERO
         L     R2,0(,R1)               PRESERVE PTR TO PARMS
         LA    R3,PARMSLEN             LENGTH OF PARMS
         BCTR  R3,0                    DECREMENT LENGTH BY ONE
         LA    R2,2(R2)                SKIP 2 BYTE LENGTH FIELD
         USING PARMSIN,R2              ESTABLISH ADDRESSABILITY TO
*                                      THE PARAMETER LIST DSECT
         EX    R3,TRANUPPR             TRANSLATE TEXT TO UPPER CASE
         CLC   REPLINFO,NALLOCNR       NEED TO ALLOCATE & RUN BACKUP
*                                      AND/OR REPLY TO CICS MESSAGE?
         BE    FINISH                  NO, RESTORE REGS & RETURN
         B     GETMAIN                 YES, GETMAIN DYNAMIC STORAGE
TRANUPPR OC    PARMSIN(0),SPACES       TRANSLATE TO UPPER CASE
***********************************************************************
*        GETMAIN DYNAMIC STORAGE
***********************************************************************
GETMAIN  DS    0H
         GETMAIN R,LV=WORKLEN,SP=SUBPOOL
*                                      GETMAIN DYNAMIC STORAGE
         ST    R13,4(R1)               STORE ADDRESS PREVIOUS SAVEAREA
         ST    R1,8(R13)               STORE ADDRESS OF CURRENT
*                                      SAVEAREA IN PREVIOUS SAVEAREA
         LR    R13,R1                  LOAD REG 13 WITH ADDRESS OF
*                                      CURRENT SAVEAREA
         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO
*                                      DYNAMIC WORKAREA
         MVC   MGCRETN,FULL00          INITIALIZE MGCRETN
         CLC   REPLONLY,YES            ALLOCATE FILES & RUN BACKUP?
         BE    REPLYMSG                NO, REPLY TO CICS MESSAGE ONLY
         EJECT
***********************************************************************
*        MOVE CICS ID AND DDNAME TO DYNAMIC STORAGE FOR DYNALLOC
***********************************************************************
MOVNAMES DS    0H
         GETMAIN R,LV=S99WKTOT         GETMAIN DYNAMIC STORAGE FOR
*                                      SVC 99 REQUEST BLOCK, TEXT UNIT
*                                      POINTER LIST & NEEDED STORAGE
         LR    R4,R1                   SAVE ADDRESS OF RETURNED STG
         USING S99WORK,R4              ESTABLISH ADDRESSABLIITY
*                                      FOR S99RBP DSECT, TEXT UNIT
*                                      POINTER LIST & NEEDED STORAGE
         LA    R6,S99WORK+NONRBLEN     POINT TO S99RBP DSECT
         USING S99RBP,R6               ESTABLISH ADDRESSABLIITY
         MVC   DSKDD(LDSKDD),DFSDSKDD    INITIAL DSKDD FOR DFSULTR0
         CLC   LOGPGM,IEBGENER         IEBGENER REQUESTED?
         BNE   MOVNAM10                NO, CONTINUE
         MVC   DSKDD(LDSKDD),IEBDSKDD    SET DSKDD FOR IEBGENER
MOVNAM10 DS    0H
         MVC   DSKDSN(LDSKDSN),DSKDSNAM
*                                      DISK DSN FROM STATIC TO DYNAMIC
         MVC   CICSDID,CICSJOB         CICSJOB FROM STATIC TO DYNAMIC
*                                      (1ST SEGMENT OF DISK DSN)
         MVC   CICSDDD,DDNAME          DDNAME FROM STATIC TO DYNAMIC
*                                      (2ND SEGMENT OF DISK DSN)
         MVC   TAPDD(LTAPDD),DFSTAPDD    INITIAL TAPDD FOR DFSULTR0
         CLC   LOGPGM,IEBGENER         IEBGENER REQUESTED?
         BNE   MOVNAM20                NO, CONTINUE
         MVC   TAPDD(LTAPDD),IEBTAPDD    SET TAPDD FOR IEBGENER
MOVNAM20 DS    0H
         MVC   TAPDSN(LTAPDSN),TAPDSNAM
*                                      TAPE DSN FROM STATIC TO DYNAMIC
         MVC   CICSTID,CICSJOB         CICSJOB FROM STATIC TO DYNAMIC
         MVC   CICSTDD,CICSDDD         DDNAME FROM DISK DSN TO TAPE DSN
***********************************************************************
*        BUILD SVC 99 REQUEST BLOCK FOR DYNAMIC ALLOCATION
***********************************************************************
BLDS99RB DS    0H
         LA    R7,S99RBPTR+4           POINT TO S99RB DSECT
         USING S99RB,R7                ESTABLISH ADDRESSABILITY
         ST    R7,S99RBPTR             HAVE RBPTR POINT TO S99RB
         OI    S99RBPTR,S99RBPND       TURN ON HIGH ORDER BIT - RBPTR
         XC    S99RB(RBLEN),S99RB      ZERO OUT REQUEST BLOCK
         MVI   S99RBLN,RBLEN           LENGTH OF RB IN LENGTH FIELD
         MVI   S99VERB,S99VRBAL        INDICATE ALLOCATION VERB FUNCTN
         EJECT
***********************************************************************
*        BUILD TEXT UNIT POINTER LIST FOR 'CICS_.DFHJ___',
*        DISK JOURNAL FILE AND ALLOCATE IT
***********************************************************************
DSKTUP   DS    0H
         MVC   DEVTYPE,DISK            INDICATE 'DISK' DEVICE TYPE
         LA    R8,S99RB+RBLEN          START OF TEXT UNIT POINTER LIST
         USING S99TUPL,R8              ESTABLISH ADDRESSABILITY FOR
*                                      TEXT UNIT POINTERS
         ST    R8,S99TXTPP             STORE ADDR OF TUP LIST IN RB
         LA    R9,DSKDD                GET ADDRESS OF FIRST TEXT UNIT
         ST    R9,S99TUPTR             AND STORE IT IN THE TUP LIST
         LA    R8,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY
         LA    R9,DSKDSN               GET ADDRESS OF NEXT TEXT UNIT
         ST    R9,S99TUPTR             AND STORE IT IN THE TUP LIST
         LA    R8,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY
         LA    R9,DSKSTATS             GET ADDRESS OF NEXT TEXT UNIT
         ST    R9,S99TUPTR             AND STORE IT IN THE TUP LIST
         LA    R8,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY
         LA    R9,DSKNDISP             GET ADDRESS OF NEXT TEXT UNIT
         ST    R9,S99TUPTR             AND STORE IT IN THE TUP LIST
         LA    R8,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY
         LA    R9,DSKCDISP             GET ADDRESS OF LAST TEXT UNIT
         ST    R9,S99TUPTR             AND STORE IT IN THE TUP LIST
         CLC   LOGPGM,IEBGENER         IEBGENER REQUESTED?
         BE    DSKTUP10                YES, SKIP DCB TEXT UNIT
         LA    R8,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY
         LA    R9,DSKRECFM             GET ADDRESS OF LAST TEXT UNIT
         ST    R9,S99TUPTR             AND STORE IT IN THE TUP LIST
DSKTUP10 DS    0H
         LA    R10,20                  R10 - MAX 30SEC INTERVAL TO WAIT
         BAL   R11,ALLOC               USE DYNALLOC TO ALLOCATE DSN
         EJECT
***********************************************************************
*        BUILD TEXT UNIT POINTER LIST FOR 'CICS_.DFHJ__.TAPEBKP(+1)',
*        TAPE BACKUP OF DISK JOURNAL FILE AND ALLOCATE IT
***********************************************************************
TAPTUP   DS    0H
         MVC   DEVTYPE,TAPE            INDICATE 'TAPE' DEVICE TYPE
         LA    R8,S99RB+RBLEN          START OF TEXT UNIT POINTER LIST
         USING S99TUPL,R8              ESTABLISH ADDRESSABILITY FOR
*                                      TEXT UNIT POINTERS
         ST    R8,S99TXTPP             STORE ADDR OF TUP LIST IN RB
         LA    R9,TAPDD                GET ADDRESS OF FIRST TEXT UNIT
         ST    R9,S99TUPTR             AND STORE IT IN THE TUP LIST
         LA    R8,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY
         LA    R9,TAPDSN               GET ADDRESS OF NEXT TEXT UNIT
         ST    R9,S99TUPTR             AND STORE IT IN THE TUP LIST
         LA    R8,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY
         LA    R9,TAPMEMBR             GET ADDRESS OF NEXT TEXT UNIT
         ST    R9,S99TUPTR             AND STORE IT IN THE TUP LIST
         LA    R8,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY
         LA    R9,TAPSTATS             GET ADDRESS OF NEXT TEXT UNIT
         ST    R9,S99TUPTR             AND STORE IT IN THE TUP LIST
         LA    R8,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY
         LA    R9,TAPNDISP             GET ADDRESS OF NEXT TEXT UNIT
         ST    R9,S99TUPTR             AND STORE IT IN THE TUP LIST
         LA    R8,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY
         LA    R9,TAPCDISP             GET ADDRESS OF NEXT TEXT UNIT
         ST    R9,S99TUPTR             AND STORE IT IN THE TUP LIST
         LA    R8,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY
         LA    R9,TAPUNIT              GET ADDRESS OF NEXT TEXT UNIT
         ST    R9,S99TUPTR             AND STORE IT IN THE TUP LIST
         LA    R8,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY
         LA    R9,TAPDCBDS             GET ADDRESS OF NEXT TEXT UNIT
         ST    R9,S99TUPTR             AND STORE IT IN THE TUP LIST
         CLC   LOGPGM,IEBGENER         IEBGENER REQUESTED?
         BE    TAPTUP10                YES, SKIP DCB TEXT UNITS
         LA    R8,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY
         LA    R9,TAPBLKSZ             GET ADDRESS OF NEXT TEXT UNIT
         ST    R9,S99TUPTR             AND STORE IT IN THE TUP LIST
         LA    R8,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY
         LA    R9,TAPDSORG             GET ADDRESS OF NEXT TEXT UNIT
         ST    R9,S99TUPTR             AND STORE IT IN THE TUP LIST
         LA    R8,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY
         LA    R9,TAPLRECL             GET ADDRESS OF NEXT TEXT UNIT
         ST    R9,S99TUPTR             AND STORE IT IN THE TUP LIST
         LA    R8,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY
         LA    R9,TAPRECFM             GET ADDRESS OF LAST TEXT UNIT
         ST    R9,S99TUPTR             AND STORE IT IN THE TUP LIST
TAPTUP10 DS    0H
         LA    R10,20                  R10 - MAX INTERVALS TO WAIT
         BAL   R11,ALLOC               USE DYNALLOC TO ALLOCATE DSN
         EJECT
***********************************************************************
*        LINK TO 'DFSULTR0' OR 'IEBGENER' TO PERFORM COPY OPERATION
***********************************************************************
LINKPGM  DS    0H
         CLC   LOGPGM,IEBGENER         IEBGENER REQUESTED?
         BNE   LINKP10                 NO, LINK TO DFSULTR0
         MVC   PARMLEN(2),HALF00       PARMSOUT LEN - STATIC TO DYNAMIC
         LA    R3,LINKLST              R3 - ADDR OF IEBGENER PARM LIST
         ST    R3,LINKLIST             STORE INTO LINKLIST
         LINK  EP=IEBGENER,                                            +
               MF=(E,LINKLIST)         BACKUP COPY OF CICS JOURNAL FILE
         ST    R15,LINKRETN            SAVE 'IEBGENER' RETURN CODE
         B     LINKP20                 CHECK RETURN CODE
LINKP10  DS    0H
         MVC   PARMLEN(2),HALF16       PARMSOUT LEN - STATIC TO DYNAMIC
         MVC   PARMSOUT,PARMLST        PARMSOUT - STATIC TO DYNAMIC
         LA    R3,LINKLST              R3 - ADDR OF DFSULTR0 PARM LIST
         ST    R3,LINKLIST             STORE INTO LINKLIST
         LINK  EP=DFSULTR0,                                            +
               MF=(E,LINKLIST)         BACKUP COPY OF CICS JOURNAL FILE
         ST    R15,LINKRETN            SAVE 'DFSULTR0' RETURN CODE
LINKP20  DS    0H
         C     R15,FULL04              LOG PROGRAM SUCCESSFUL?
         BNH   FREEMN1                 YES, FREEMAIN DYNALLOC STG
         MVC   WTOLIST_(LWTOLST1),WTOLIST1    MOVE WTO LIST FORM FROM
*                                      STATIC TO DYNAMIC
         MVC   WTOLIST_+4(5),CICSJOB   INDICATE APPROPRIATE CICS
         MVC   WTOLIST_+34(8),LOGPGM   INDICATE APPROPRIATE LOG PGM
         MVC   WTOLIST_+116(2),REPLID  INDICATE APPROPRIATE REPLY-ID
         WTO   MF=(E,WTOLIST_)         ISSUE THE MESSAGE
         B     ABEND                   NO, ABEND AND DUMP
         EJECT
***********************************************************************
*        FREEMAIN DYNAMIC STORAGE (DYNALLOC)
***********************************************************************
FREEMN1  DS    0H
         LR    R10,R4                  R10 - ADDR OF S99WORK
         FREEMAIN R,LV=S99WKTOT,A=(R10)   FREEMAIN DYNAMIC STORAGE
***********************************************************************
*        REPLY TO OUTSTANDING MESSAGE IF NEEDED
***********************************************************************
REPLYMSG DS    0H
         CLC   REPLID,NULLREPL         DO WE NEED TO REPLY 'GO'?
         BE    FREEMN2                 NO, FREE DYNAMIC STORAGE
         XC    MGCRPL(MGCRLTH),MGCRPL  CLEAR THE PARAMETER LIST
         MVI   MGCRFLG1,X'80'          SET FLAG1 TO INDICATE THAT FLAG2
*                                      CONTAINS VALID INFORMATION.
*                                      FLAG2 = X'0000' (NO USER TOKEN).
         MVC   MGCRTEXT(L'CMDTXT1),SPACES     INITIALIZE
         MVC   MGCRTEXT(L'CMDTXT1),CMDTXT1    MOVE REPLY CMD SKELETON
         MVC   CICSID,REPLID           INSERT REPLY ID
         MVC   CICSREPL,REPLY          INSERT REPLY
         LA    R1,(MGCRTEXT-MGCRPL)+L'CMDTXT1    GET MGCRPL LENGTH
         STC   R1,MGCRLGTH             SAVE LENGTH IN MGCRPL
         SR    R0,R0                   CLEAR REG 0
         MVC   MODLIST_(LMODLST1),MODLIST1    MOVE LIST FORM MODESET
*                                      STATIC TO DYNAMIC (KEY ZERO)
         MODESET MF=(E,MODLIST_)       SUPER STATE TO ISSUE COMMAND
         MGCR  MGCRPL                  ISSUE THE COMMAND
         ST    R15,MGCRETN             SAVE 'MGCR' RETURN CODE
         MVC   MODLIST_(LMODLST2),MODLIST2    MOVE LIST FORM MODESET
*                                      STATIC TO DYNAMIC (KEY NZERO)
         MODESET MF=(E,MODLIST_)       BACK TO USER KEY
         CLC   MGCRETN,FULL00          COMMAND ISSUED SUCCESSFULLY?
         BE    FREEMN2                 YES, FREE DYNAMIC STORAGE
         MVC   WTOLIST_(LWTOLST1),WTOLIST2    MOVE WTO LIST FORM FROM
*                                      STATIC TO DYNAMIC
         MVC   WTOLIST_+4(5),CICSJOB   INDICATE APPROPRIATE CICS
         MVC   WTOLIST_+86(2),REPLID   INDICATE APPROPRIATE REPLY-ID
         WTO   MF=(E,WTOLIST_)         ISSUE THE MESSAGE
         B     ABEND                   NO, ABEND AND DUMP
         EJECT
***********************************************************************
*        FREEMAIN DYNAMIC STORAGE
***********************************************************************
FREEMN2  DS    0H
         LR    R10,R13                 R10 - ADDR OF DYNAMIC WORKAREA
         L     R13,4(R13)              RESTORE REGISTER 13
         FREEMAIN R,LV=WORKLEN,A=(R10),SP=SUBPOOL
*                                      FREEMAIN DYNAMIC STORAGE
         L     R15,LINKRETN            R15 - RESTORE RETNCODE(LOGPGM)
***********************************************************************
*        RESTORE REGISTERS AND RETURN
***********************************************************************
FINISH   DS    0H
         RETURN (14,12),RC=(15)        RESTORE REGISTERS AND RETURN
***********************************************************************
*        ALLOCATE DATA SET NAME USING DYNALLOC (SVC 99)
***********************************************************************
ALLOC    DS    0H
         OI    S99TUPTR,S99TUPLN       TURN ON HIGH-ORDER BIT
*                                      IN LAST TUP LIST ENTRY
         LR    R1,R6                   R1 - ADDR OF REQUEST BLOCK PTR
         DYNALLOC                      INVOKE SVC 99 TO PROCESS REQUEST
         LTR   R15,R15                 SUCCESSFUL ALLOCATION?
         BZR   R11                     YES, RETURN
         CLC   DEVTYPE,TAPE            TAPE DEVICE ALLOCATION ERROR?
         BNE   ALLOC20                 NO, CONTINUE
         CLC   S99ERROR,NODSN          TAPE DATA SET NOT AVAILABLE?
         BE    ALLOC10                 YES, STIMER
         CLC   S99ERROR,NOUNIT         TAPE DEVICE NOT AVAILABLE?
         BNE   ALLOC20                 NO, CONTINUE
         STIMER WAIT,DINTVL=THRTYSEC   WAIT FOR 30 SECONDS
         BCT   R10,ALLOC               TRY TO ALLOCATE TAPE DEV
ALLOC10  DS    0H
         STIMER WAIT,DINTVL=SIXTYSEC   WAIT FOR 60 SECONDS
         BCT   R10,ALLOC               TRY TO ALLOCATE TAPE DSN
ALLOC20  DS    0H
         ST    R15,SVC99RTN            SAVE SVC99 RETURN CODE
         MVC   WTOLIST_(LWTOLST1),WTOLIST3    MOVE WTO LIST FORM FROM
*                                      STATIC TO DYNAMIC
         MVC   WTOLIST_+4(5),CICSJOB   INDICATE APPROPRIATE CICS
         MVC   WTOLIST_+47(4),DEVTYPE  INDICATE ALLOCATION DEVICE TYPE
         MVC   WTOLIST_+127(2),REPLID  INDICATE MESSAGE REPLY - ID
         WTO   MF=(E,WTOLIST_)         ISSUE THE MESSAGE
         ST    R7,DFS99RBP             STORE ADDRESS OF FAILING SVC99
*                                      REQUEST BLOCK IN DAIRFAIL DSECT
         LA    R5,SVC99RTN             R5 - ADDR OF SVC99 RETURN CODE
         ST    R5,DFRCP                STORE ADDRESS OF SVC99 RETURN
*                                      CODE IN DAIRFAIL DSECT
         MVC   IKJEFF02,FULL00         MSG WRITER ROUTINE (NOT KNOWN)
         LA    R5,IKJEFF02             R5 - PTR TO MSG WRITER ROUTINE
         ST    R5,DFJEFF02             STORE ADDR OF PTR TO MSG WRITER
*                                      ROUTINE IN DAIRFAIL DSECT
         OI    DFID,DFWTP              INDICATE WRITE TO PROGRAMMER
         OI    DFID+1,DFSVC99          INDICATE SVC99 ERROR
         LA    R5,DFID                 R5 - ADDR OF 2 BYTE CALLER ID
         ST    R5,DFIDP                STORE ADDRESS OF CALLER
*                                      IDENTIFIER IN DAIRFAIL DSECT
         MVC   DFCPPLP,FULL00          ADDR OF CPPL (NOT USED)
         MVC   DFBUFP,FULL00           ADDR MSG TEXT BUFFERS (NOT USED)
         LINK  EP=IKJEFF18,                                            +
               MF=(E,DFPARMS)          EXECUTE DAIRFAIL ROUTINE
         LTR   R15,R15                 DAIRFAIL FINISH SUCCESSFULLY?
         BZ    ABEND                   YES, CONTINUE WITH ABEND
         UNPK  CONDATA1,SVC99RTN+2     UNPACK SVC99 RETURN CODE
         TR    CONDATA1(8),TRANS       MAKE IT PRINTABLE
         MVC   DYNALRTN(2),CONDATA1+4  MOVE TO OUTPUT AREA
         UNPK  CONDATA2(10),S99ERROR(4)    UNPACK SVC99 REASON CODE
         TR    CONDATA2(10),TRANS      MAKE IT PRINTABLE
         MVC   DYNALRSN(4),CONDATA2+3  MOVE TO OUTPUT AREA
         MVC   WTOLIST_(LWTOLST1),WTOLIST4    MOVE WTO LIST FORM FROM
*                                      STATIC TO DYNAMIC
         MVC   WTOLIST_+100(28),CLASSX    RESERVED DYNALLOC ERROR CLASS
         CLI   S99ERROR,X'02'          DYNALLOC ERROR CLASS 2?
         BNE   CHK03                   NO, CHECK FOR CLASS 3
         MVC   WTOLIST_+100(28),CLASS2    INDICATE DYNALLOC ERROR CLASS
         B     WTO                     PERFORM WTO
CHK03    DS    0H
         CLI   S99ERROR,X'03'          DYNALLOC ERROR CLASS 3?
         BNE   CHK04                   NO, CHECK FOR CLASS 4
         MVC   WTOLIST_+100(28),CLASS3    INDICATE DYNALLOC ERROR CLASS
         B     WTO                     PERFORM WTO
CHK04    DS    0H
         CLI   S99ERROR,X'04'          DYNALLOC ERROR CLASS 4?
         BNE   CHK07                   NO, CHECK FOR CLASS 7
         MVC   WTOLIST_+100(28),CLASS4    INDICATE DYNALLOC ERROR CLASS
         B     WTO                     PERFORM WTO
CHK07    DS    0H
         CLI   S99ERROR,X'07'          DYNALLOC ERROR CLASS 7?
         BNE   WTO                     NO, CLASS IS RESERVED
         MVC   WTOLIST_+100(28),CLASS4    INDICATE DYNALLOC ERROR CLASS
         B     WTO                     PERFORM WTO
WTO      DS    0H
         MVC   WTOLIST_+62(2),DYNALRTN INDICATE DYNALLOC RETURN CODE
         MVC   WTOLIST_+80(4),DYNALRSN INDICATE DYNALLOC REASON CODE
         WTO   MF=(E,WTOLIST_)         ISSUE THE MESSAGE
***********************************************************************
*        ABEND DLXCICLG (USER 444)
***********************************************************************
ABEND    DS    0H
         ABEND 444,DUMP                ABEND AND DUMP
         EJECT
***********************************************************************
*        CONSTANTS
***********************************************************************
HALF00   DC    H'00'                   HALFWORD, VALUE '00' (PARM LEN)
HALF16   DC    H'16'                   HALFWORD, VALUE '16' (PARM LEN)
FULL00   DC    F'00'                   FULLWORD, VALUE '00' (RETN CODE)
FULL04   DC    F'04'                   FULLWORD, VALUE '04' (RETN CODE)
         DS    0D                      FORCE DOUBLEWORD BOUNDARY
THRTYSEC DC    CL8'00003000'           30 SEC TIME INTERVAL
SIXTYSEC DC    CL8'00010000'           60 SEC TIME INTERVAL
NODSN    DC    XL2'0210'               SVC99 REASON CODE - DSN UNAVAIL
NOUNIT   DC    XL2'0214'               SVC99 REASON CODE - UNIT UNAVAIL
SPACES   DC    CL87' '                 PARMSIN UPPER CASE TRANSLATION
PARMLST  DC    CL16'DBRC=NO,CICS=YES'  PARMSOUT PASSED TO 'DFSULTR0'
CMDTXT1  DC    C'REPLY XX,XXXX'        COMMAND TEXT DFH4583 (REPLY)
NULLREPL DC    CL2'XX'                 NULL MESSAGE REPLY-ID
IEBGENER DC    CL8'IEBGENER'           USE IEBGENER TO BACKUP LOG FILE
YES      DC    CL3'YES'                REPLY TO CICS MSG ONLY; DON'T
*                                      ALLOCATE FILES OR RUN BACKUP
NALLOCNR DC    CL5'XXYES'              DON'T ALLOC FILES, RUN BACKUP
*                                      OR REPLY TO CICS MESSAGE
DISK     DC    CL4'DISK'               'DISK' DEVICE TYPE
TAPE     DC    CL4'TAPE'               'TAPE' DEVICE TYPE
CLASS2   DC    C'UNAVAILABLE SYSTEM REASOURCE'  DYNALLOC ERROR CLASS 2
CLASS3   DC    C'INVALID PARAMETER LIST      '  DYNALLOC ERROR CLASS 3
CLASS4   DC    C'ENVIRONMENTAL ERROR         '  DYNALLOC ERROR CLASS 4
CLASS7   DC    C'SYSTEM ROUTINE ERROR        '  DYNALLOC ERROR CLASS 7
CLASSX   DC    C'UNKNOWN ERROR               '  DYNALLOC ERROR
         DS    0F
TRANS    EQU   *-C'0'                  HEX CHAR TRANSLATE TBL (OUTPUT)
         DC    C'0123456789ABCDEF'
         DS    0F
***********************************************************************
*              DISK DATA SET ALLOCATION TEXT UNITS
*     IEFRDER  DD  DSN=CICSA.DFHJ01A,DISP=(SHR,KEEP,KEEP),
*                  DCB=RECFM=VB
*                               OR
*     SYSUT1   DD  DSN=CICSA.DFHJ01A,DISP=(SHR,KEEP,KEEP),
*                  DCB=RECFM=VB
***********************************************************************
DFSDSKDD DC    AL2(DALDDNAM)           DDNAME SPECIFICATION
         DC    X'0001'
         DC    X'0008'
         DC    CL8'IEFRDER'
LDSKDD   EQU   *-DFSDSKDD              LENGTH OF DISK DDNAME
IEBDSKDD DC    AL2(DALDDNAM)           DDNAME SPECIFICATION
         DC    X'0001'
         DC    X'0008'
         DC    CL8'SYSUT1'
DSKDSNAM DC    AL2(DALDSNAM)           DSNAME SPECIFICATION
         DC    X'0001'
         DC    X'000D'
         DC    C'CICSA.DFHJ01A'
LDSKDSN  EQU   *-DSKDSNAM              LENGTH OF DISK DSNAME
DSKSTATS DC    AL2(DALSTATS)           DATA SET STATUS SPECIFICATION
         DC    X'0001'
         DC    X'0001'
         DC    X'08'
DSKNDISP DC    AL2(DALNDISP)           DATA SET NORMAL DISPOSITION
         DC    X'0001'
         DC    X'0001'
         DC    X'08'
DSKCDISP DC    AL2(DALCDISP)           DATA SET CONDITIONAL DISPOSITION
         DC    X'0001'
         DC    X'0001'
         DC    X'08'
DSKRECFM DC    AL2(DALRECFM)           RECFM SPECIFICATION
         DC    X'0001'
         DC    X'0001'
         DC    X'50'
         EJECT
***********************************************************************
*              TAPE DATA SET ALLOCATION TEXT UNITS
*     NEWRDER  DD  DSN=CICSA.DFHJ01.TAPEBKP(+1),
*                  DISP=(NEW,CATLG,DELETE),
*                  UNIT=TAPE3480,
*                  DCB=(BLKSIZE=31165,DSORG=PS,LRECL=6233,RECFM=VB)
*                               OR
*     SYSUT2   DD  DSN=CICSA.DFHJ01.TAPEBKP(+1),
*                  DISP=(NEW,CATLG,DELETE),
*                  UNIT=TAPE3480,
*                  DCB=(BLKSIZE=31165,DSORG=PS,LRECL=6233,RECFM=VB)
***********************************************************************
DFSTAPDD DC    AL2(DALDDNAM)           DDNAME SPECIFICATION
         DC    X'0001'
         DC    X'0008'
         DC    CL8'NEWRDER'
LTAPDD   EQU   *-DFSTAPDD              LENGTH OF TAPE DDNAME
IEBTAPDD DC    AL2(DALDDNAM)           DDNAME SPECIFICATION
         DC    X'0001'
         DC    X'0008'
         DC    CL8'SYSUT2'
TAPDSNAM DC    AL2(DALDSNAM)           DSNAME SPECIFICATION
         DC    X'0001'
         DC    X'0014'
         DC    C'CICSA.DFHJ01.TAPEBKP'
LTAPDSN  EQU   *-TAPDSNAM              LENGTH OF TAPE DSNAME
TAPMEMBR DC    AL2(DALMEMBR)           GENERATION SPECIFICATION
         DC    X'0001'
         DC    X'0002'
         DC    C'+1'
TAPSTATS DC    AL2(DALSTATS)           DATA SET STATUS SPECIFICATION
         DC    X'0001'
         DC    X'0001'
         DC    X'04'
TAPNDISP DC    AL2(DALNDISP)           DATA SET NORMAL DISPOSITION
         DC    X'0001'
         DC    X'0001'
         DC    X'02'
TAPCDISP DC    AL2(DALCDISP)           DATA SET CONDITIONAL DISPOSITION
         DC    X'0001'
         DC    X'0001'
         DC    X'04'
TAPUNIT  DC    AL2(DALUNIT)            UNIT DESCRIPTION SPECIFICATION
         DC    X'0001'
         DC    X'0008'
         DC    C'TAPE3480'
TAPDCBDS DC    AL2(DALDCBDS)           DCB DSN REFERENCE SPECIFICATION
         DC    X'0001'
         DC    X'000D'
         DC    C'DLX1.MODLDSCB'
TAPBLKSZ DC    AL2(DALBLKSZ)           BLKSIZE SPECIFICATION
         DC    X'0001'
         DC    X'0002'
         DC    X'79BD'
TAPDSORG DC    AL2(DALDSORG)           DSORG SPECIFICATION
         DC    X'0001'
         DC    X'0002'
         DC    X'4000'
TAPLRECL DC    AL2(DALLRECL)           LRECL SPECIFICATION
         DC    X'0001'
         DC    X'0002'
         DC    X'1859'
TAPRECFM DC    AL2(DALRECFM)           RECFM SPECIFICATION
         DC    X'0001'
         DC    X'0001'
         DC    X'50'
         EJECT
***********************************************************************
*        LIST FORM OF WTO
***********************************************************************
WTOLIST1 WTO   'CICS_ JOURNAL BACKUP UTILITY (DFSULTR0) FAILED! NOTIFY +
               SYSTEMS PROGRAMMING BEFORE REPLYING ''GO'' TO MESSAGE ID+
                - XX           ',ROUTCDE=(01),DESC=(02),MF=L
LWTOLST1 EQU   *-WTOLIST1
WTOLIST2 WTO   'CICS_ JOURNAL BACKUP UTILITY (DLXCICLG) FAILED! PLEASE +
               REPLY ''GO'' TO MESSAGE ID - XX. DO NOT NOTIFY SYSTEMS P+
               ROGRAMMING.     ',ROUTCDE=(01),DESC=(02),MF=L
WTOLIST3 WTO   'CICS_ JOURNAL BACKUP FAILED DUE TO DYNAMIC XXXX FILE AL+
               LOCATION ERROR. NOTIFY SYSTEMS BEFORE REPLYING ''GO'' TO+
                MESSAGE ID - XX',ROUTCDE=(01),DESC=(02),MF=L
WTOLIST4 WTO   'DAIRFAIL ROUTINE ERROR. DYNALLOC CODES ARE: RETURN CODE+
                = XX; REASON CODE = XXXX; ERROR CLASS - XXXXXXXXXXXXXXX+
               XXXXXXXXXXXXX.',ROUTCDE=(11),MF=L
***********************************************************************
*        LIST FORM OF MODESET
***********************************************************************
MODLIST1 MODESET KEY=ZERO,MODE=SUP,MF=L
LMODLST1 EQU   *-MODLIST1
MODLIST2 MODESET KEY=NZERO,MODE=PROB,MF=L
LMODLST2 EQU   *-MODLIST2
***********************************************************************
*        REGISTER EQUATES
***********************************************************************
         EQUATE
SUBPOOL  EQU   230
         EJECT
***********************************************************************
*        IEFZB4D2 - SVC99 TEXT UNIT MNEMONICS
***********************************************************************
         IEFZB4D2
         LTORG
         EJECT
***********************************************************************
*        DYNAMIC STORAGE AREA
***********************************************************************
WORKAREA DSECT
         DS    0F
SAVEAREA DS    18F                     DLXCICLG SAVE AREA
         DS    0F
MGCRETN  DS    F                       MGCR RETURN CODE
         EJECT
MGCR     IEZMGCR DSECT=NO              MGCRPL MAPPING MACRO
         ORG   MGCRTEXT
TXTREPL  DS    0CL13                   CMD TEXT DFH4583 'REPLY XX,XXXX'
         DS    CL6
CICSID   DS    CL2
         DS    CL1
CICSREPL DS    CL4
         ORG
         DS    0H
WTOLIST_ DS    CL(LWTOLST1)            DYNAMIC LIST FORM OF WTO MACRO
         DS    0H
MODLIST_ DS    CL(LMODLST1)            DYNAMIC LIST FORM OF MODESET
WORKLEN  EQU   *-WORKAREA
         EJECT
***********************************************************************
*        SVC99 DYNAMIC WORK AREA
***********************************************************************
S99WORK  DSECT
LINKRETN DS    F                       LOG PGM RETURN CODE
SVC99RTN DS    F                       SVC99 RETURN CODE
IKJEFF02 DS    F                       PTR MSG WRITER ROUTINE(UNKNOWN)
DFID     DS    H                       DAIRFAIL CALLER IDENTIFIER
CONDATA1 DS    CL9                     RETURN CODE CONVERSION
CONDATA2 DS    CL11                    REASON CODE CONVERSION
DSKDD    DS    0H                      DISK DDNAME SPECIFICATION
         DS    AL2(DALDDNAM)
         DS    X'0001'
         DS    X'0008'
         DS    CL8'IEFRDER'
DSKDSN   DS    0H                      DISK DSNAME SPECIFICATION
         DS    AL2(DALDSNAM)
         DS    XL2'0001'
         DS    XL2'000D'
DSKDSN2  DS    0CL13
CICSDID  DS    CL5'CICS_'
         DS    CL1'.'
CICSDDD  DS    CL7'DFHJ___'
TAPDD    DS    0H                      TAPE DDNAME SPECIFICATION
         DS    AL2(DALDDNAM)
         DS    X'0001'
         DS    X'0008'
         DS    CL8'NEWRDER'
TAPDSN   DS    0H                      TAPE DSNAME SPECIFICATION
         DS    AL2(DALDSNAM)
         DS    XL2'0001'
         DS    XL2'0015'
TAPDSN2  DS    0CL20
CICSTID  DS    CL5'CICS_'
         DS    CL1'.'
CICSTDD  DS    CL6'DFHJ__'
         DS    CL1'.'
         DS    CL7'TAPEBKP'
LINKLIST DS    F
LINKLST  DS    0F
PARMLEN  DS    H'16'                   LENGTH OF PARAMETER LIST
PARMSOUT DS    CL16'DBRC=NO,CICS=YES'  PARAMETER LIST
         IKJEFFDF DFDSECT=NO,DFDSEC2=NO    DAIRFAIL MAPPING MACRO
DEVTYPE  DS    CL4                     INDICATE 'DISK' OR 'TAPE'
DYNALRTN DS    CL2                     DYNALLOC RETURN CODE (OUTPUT)
DYNALRSN DS    CL4                     DYNALLOC REASON CODE (OUTPUT)
DYNALCLS DS    CL28                    DYNALLOC ERROR CLASS (OUTPUT)
NONRBEND EQU   *
***********************************************************************
*        IEFZB4D0 - SVC99 SYMBOLIC NAMES
***********************************************************************
         IEFZB4D0
RBLEN    EQU   (S99RBEND-S99RB)        LENGTH OF RB
NONRBLEN EQU   (NONRBEND-S99WORK)      LENGTH OF NON-RB DATA
S99RBTOT EQU   (RBLEN+25*4)            LEN OF RB + 25 TEXT UNIT ADDRS
S99WKTOT EQU   (S99RBTOT+NONRBLEN)     LEN OF RB + 25 TEXT UNIT ADDRS
*                                      & ALL NEEDED FOR DYNALLOC
***********************************************************************
*        MAPPING OF PARAMETER LIST
***********************************************************************
PARMSIN  DSECT
CICSJOB  DS    CL5                     CICS_ JOB NAME
DDNAME   DS    CL7                     CICS_ DDNAME
LOGPGM   DS    CL8                     DFSULTR0 OR IEBGENER
REPLINFO DS    0CL5                    MESSAGE REPLY INFORMATION
REPLID   DS    CL2                     MESSAGE REPLY ID
REPLONLY DS    CL3                     INDICATE IF FILES ARE TO BE
*                                      ALLOCATED AND BACKUP RUN
REPLY    DS    CL4                     MESSAGE REPLY TEXT
PARMSLEN EQU   *-PARMSIN
         END   DLXCICLG
