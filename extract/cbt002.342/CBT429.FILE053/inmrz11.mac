         TITLE 'INMRZ11' - RECEIVE PRE-PROCESSING EXIT
***********************************************************************
*                                                                     *
*             MODULE NAME = INMRZ11                                   *
*                                                                     *
*             DESCRIPTIVE NAME = RECEIVE PRE-PROCESSING EXIT          *
*                                                                     *
*             FUNCTION =                                              *
*                EXIT ALLOWS RECEIVE TO RUN IN BACKGROUND WITH        *
*                THE EXIT REPLACING THE USER INTERACTION IN           *
*                DETERMINING THE RECEIVING DATA SET NAME.             *
*                                                                     *
*                OPERATION =                                          *
*                   SAVE REGISTERS AND ESTABLISH ADDRESSABILITY       *
*                   GET ASCB ADDRESSABILITY                           *
*                   GET ASXB ADDRESSABILITY                           *
*                   GET ACEE ADDRESSABILITY                           *
*                   IF REQUEST IS FROM RACF GROUP 'JCLGRP',           *
*                     SET DELETE DATASET BIT AND EXIT WITH RC=0       *
*                   IF REQUEST IS FROM TSO USER,                      *
*                     EXIT WITH RC=0                                  *
*                   GET ADDRESS FOR BUILDING RECEIVE REPLY            *
*                   GET ASXB ADDRESSABILITY                           *
*                   DROP ASCB ADDRESSABILITY                          *
*                   GET ACEE ADDRESSABILITY                           *
*                   DROP ASXB ADDRESSABILITY                          *
*                   GET TCB ADDRESSABILITY                            *
*                   GET TIOT ADDRESSABILITY                           *
*                   DROP TCB ADDRESSSABILITY                          *
*                   SEARCH DD NAMES FOR 'SYSUT2'                      *
*                   IF 'SYSUT2' PRESENT,                              *
*                     GET ADDRESSABILITY TO JFCB                      *
*                     STORE SYSUT2 DATA SET NAME IN REPLY FIELD       *
*                     IF VOLUME PRESENT IN JFCB,                      *
*                       IF VOLSER=SCRTCH, REPORT ERROR AND EXIT       *
*                          WITH RC=4                                  *
*                       ELSE, ADD VOLUME TO REPLY                     *
*                     ADD 'OLD' OR 'MOD' INDICATOR TO REPLY           *
*                     SET FLAG TO TELL RECEIVE TO USE THIS REPLY      *
*                     EXIT WITH RC=0                                  *
*                   IF 'SYSUT2' NOT PRESENT,                          *
*                     IF 4TH CHARACTER OF USERID IS 'J' OR 'R',       *
*                       USE 1ST 3 CHARS FOR DSNAME'S 1ST QUALIFIER    *
*                     ELSE,                                           *
*                       USE ENTIRE USERID FOR 1ST QUALIFIER           *
*                     IF 2ND QUALIFIER OF XMITTED DSNAME IS 'DDNAME', *
*                       STORE TEMPORARY DATA SET ERROR MESSAGE        *
*                       SET FLAGS TO USE THIS ERROR MESSAGE           *
*                       EXIT WITH RC=4                                *
*                     SKIP THE FIRST QUALIFIER OF THE XMITTED DSNAME  *
*                     FINISH CONSTRUCTING NEW DSNAME WITH THE REST    *
*                     INDICATE 'NEW' ON THE REPLY                     *
*                     SET FLAG TO TELL RECEIVE TO USE THIS REPLY      *
*                     EXIT WITH RC=0                                  *
*                                                                     *
*              NOTES =                                                *
*                                                                     *
*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *
*                    REGISTER  1       = PARAMETER LIST POINTER       *
*                    REGISTER  2       = ASCB AND LATER TCB           *
*                                        ADDRESSABILITY AND           *
*                                        WORK REGISTER                *
*                    REGISTER  3       = ASXB AND LATER TIOT          *
*                                        ADDRESSABILITY AND           *
*                                        WORK REGISTER                *
*                    REGISTERS 4 - 10  = WORK REGISTERS               *
*                    REGISTER  11      = ACEE ADDRESSABILITY          *
*                    REGISTER  12      = BASE REGISTER                *
*                    REGISTER  13      = SAVE AREA POINTER            *
*                    REGISTER  14      = RETURN ADDRESS               *
*                    REGISTER  15      = ENTRY POINT ADDRESS AND      *
*                                        RETURN CODE REGISTER         *
*                                                                     *
*             MACROS =                                                *
*                SAVE, RETURN, EQUATE                                 *
*                                                                     *
*             MAPPING MACROS USED =                                   *
*                IHAACEE       ACEE MAP                               *
*                IHAASCB       ASCB MAP                               *
*                IHAASXB       ASXB MAP                               *
*                IEFJFCBN      JFCB MAP                               *
*                IKJTCB        TCB MAP                                *
*                IEFTIOT1      TIOT MAP                               *
*                                                                     *
*                                                                     *
*             CHANGE ACTIVITY =                                       *
*                02/06/84  WRITTEN.      BC.                          *
*                02/13/84  GENERATE ERROR MESSAGE IF VOLSER           *
*                          OF 'SCRTCH' SPECIFIED ON SYSUT2.   BC.     *
*                07/21/87  IF REQUEST IS FROM RACF GROUP 'JCLGRP'     *
*                          ALLOW RECEIPT OF MESSAGES BUT              *
*                          DISALLOW RECEIPT OF DATASETS.      ML.     *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
*
INMRZ11 CSECT
         SAVE  (14,12),,INMRZ11_DELUXE_CHECK_&SYSDATE_&SYSTIME
         LR    R12,R15
         USING INMRZ11,R12             ESTABLISH ADDRESSABILITY
         LR    R7,R1                   PRESERVE PTR TO PARMS
*
*  CHECK TO SEE IF USER HAS CONNECT GROUP 'JCLGRP'.  IF SO,
*    FAIL THE RECEIVE OF DATASETS BUT ALLOW MESSAGES.
*
CHKGRP   EQU   *
         L     R2,16                   GET ADDRESS OF CVT
         L     R2,0(R2)                GET ADDR OF TCB ADDRESS WORD
         L     R2,12(R2)               GET ADDRESS OF CURRENT ASCB
         USING ASCB,R2                 TELL ASSEMBLER
         L     R3,ASCBASXB             GET ADDRESS OF ASXB
         USING ASXB,R3                 TELL ASSEMBLER
         L     R11,ASXBSENV            GET ADDRESS OF ACEE
         DROP  R3
         USING ACEE,R11                ESTABLISH ADDRESSABILITY TO ACEE
         CLC   ACEEGRPN,=CL8'JCLGRP'   IS USER IN JCLGRP?
         BNE   BTCHCHK                 IF NOT, CONTINUE
         L     R8,8(R7)                GET ADDRESS OF ACTION FLAG BYTE
         OI    0(R8),X'02'             SET DELETE DATASETS BIT
         B     EXIT                    AND EXIT WITH RC=0
         DROP  R11
*
*  CHECK TO SEE IF THIS IS A BATCH JOB.  IF IT ISN'T, EXIT.
*
BTCHCHK  EQU   *
         L     R3,ASCBTSB              GET ADDRESS OF TSB
         LTR   R3,R3                   IF NOT ZERO,
         BNZ   EXIT                      THIS IS A TSO USER
*        L     R3,ASCBJBNS             GET STC/MNT/LOGON JOBNAME PTR
*        LTR   R3,R3                   IF THIS IS ZERO THEN THIS MAY
*        BNZ   EXIT                    BE A BATCH JOB ELSE EXIT
*        L     R3,ASCBJBNI             GET INITIATED JOB JOBNAME PTR
*        LTR   R3,R3                   IF THIS IS ZERO THIS IS NOT A
*        BZ    EXIT                    BATCH JOB IT IS A STC
*
*     IF WE GET HERE WE ARE FAIRLY CONFIDENT THAT WE ARE RUNNING BATCH
*
         L     R8,44(R7)               GET ADDRESS FOR BUILDING REPLY
         LA    R8,4(R8)                GET ADDRESS FOR ACTUAL BEGINNING
         MVC   0(8,R8),=CL8'DATASET('  START OUT WITH DATA SET NAME
*
*  GET ADDRESSABILITY TO THE ACEE IN CASE USERID IS NEEDED
*
         L     R3,ASCBASXB             GET ADDRESS OF ASXB
         DROP  R2
         USING ASXB,R3                 TELL ASSEMBLER
         L     R11,ASXBSENV            GET ADDRESS OF ACEE
         DROP  R3                      DROP ASXB ADDRESSABILITY
         USING ACEE,R11                ESTABLISH ADDRESSABILITY TO ACEE
*
*  LOOK FOR SYSUT2 DD NAME
*
CHKDD    EQU   *
         L     R2,16                   POINT TO CVT
         L     R2,0(R2)                GET ADDRESS OF TCB ADDR WORDS
         L     R2,4(R2)                GET ADDR OF CURRENT TCB
         USING TCB,R2                  TELL ASSEMBLER
         L     R3,TCBTIO               GET ADDRESS OF THIS TCB'S TIOT
         DROP  R2
         USING TIOT1,R3                TELL ASSEMBLER
         LA    R2,TIOELNGH             POINT TO START OF DD ENTRIES
         DROP  R3
         SLR   R3,R3                   CLEAR R3
CD10     EQU   *
         IC    R3,0(R2)                GET LENGTH OF ENTRY
         LTR   R3,R3                   ENTRY PRESENT?
         BZ    NEWDSN                  IF NOT, CONSTRUCT NEW DSN
         CLC   4(8,R2),=CL8'SYSUT2'    IS IT SYSUT2?
         BE    GETJFCB                 IF SO, GO FIND JFCB
         AR    R2,R3                   GO TO NEXT DD ENTRY
         B     CD10                    LOOP BACK
*
*  GET THE JFCB AND CONSTRUCT THE REPLY TO THE RECEIVE COMMAND
*
GETJFCB  EQU   *
         SLR   R5,R5
         ICM   R5,B'0111',12(R2)       GET ADDRESS OF JFCB PREFIX
         LA    R5,16(R5)               GET ADDRESS OF JFCB
         USING INFMJFCB,R5             TELL ASSEMBLER
         MVI   8(R8),X'7D'             MOVE IN QUOTE
         MVC   9(44,R8),JFCBDSNM       LOAD DATA SET NAME INTO REPLY
         LA    R8,53(R8)               GET ADDR OF END OF NAME
GJ10     EQU   *
         BCTR  R8,0                    LOOK AT PREVIOUS CHARACTER
         CLI   0(R8),X'40'             END OF DATA SET NAME?
         BE    GJ10                    IF NOT, KEEP LOOKING
         MVI   1(R8),X'7D'             MOVE IN QUOTE
         LA    R8,2(R8)                MOVE AHEAD TO NEXT SPACE
         CLI   JFCBVOLS,X'40'          VOLUME PRESENT?
         BE    GJ20                    IF NOT, BRANCH
         CLC   JFCBVOLS(6),=CL6'SCRTCH'  DOES VOLSER=SCRTCH?
         BNE   GJ15                    IF NOT, OK
         L     R5,16(R7)               GET ADDRESS FOR ERROR MESSAGE
         MVC   0(L'ERRMSG2,R5),ERRMSG2 STORE ERROR MESSAGE
         L     R8,8(R7)                GET ADDRESS TO FLAG
         OI    0(R8),X'C0'             SET FLAG TO ISSUE MESSAGE
         LA    R15,4                   SET A RETURN CODE OF 4
         B     EXITX                   AND EXIT
GJ15     EQU   *
         MVC   0(9,R8),=C') VOLUME('   GET READY TO ADD VOLUME
         MVC   9(6,R8),JFCBVOLS        LOAD THE VOLUME
         LA    R8,15(R8)
GJ20     EQU   *
         MVC   0(2,R8),=C') '          CLOSE OFF
         LA    R8,2(R8)
         TM    JFCBIND2,JFCNEW         NEW DATA SET?
         BNO   GJ30                    IF NOT, BRANCH
         MVC   0(3,R8),=C'OLD'         INDICATE OLD SO REALLOCATE IS
*                                      NOT ATTEMPTED
         LA    R8,3(R8)
         B     GJ50
GJ30     EQU   *
         TM    JFCBIND2,JFCMOD         MODIFY DATA SET?
         BNO   GJ40                    IF NOT, BRANCH
         MVC   0(3,R8),=C'MOD'         INDICATE MODIFY
         LA    R8,3(R8)
         B     GJ50
GJ40     EQU   *
         TM    JFCBIND2,JFCOLD         OLD DATA SET?
         BNO   GJ50                    IF NOT, BRANCH
         MVC   0(3,R8),=C'OLD'         INDICATE OLD
         LA    R8,3(R8)
GJ50     EQU   *
         B     FINI
*
*  CONSTRUCT NEW DATA SET NAME
*
NEWDSN   EQU   *
         MVI   8(R8),X'7D'             MOVE IN QUOTE
         CLI   ACEEUSRI+3,C'R'         REGION ID?
         BE    ND10                    IF SO, BRANCH
         CLI   ACEEUSRI+3,C'J'         ADMIN ID?
         BE    ND10                    IF SO, BRANCH
         MVC   9(8,R8),ACEEUSRI        LOAD COMPLETE USERID
         LA    R8,17(R8)               POINT TO END OF USER ID FIELD
ND05     EQU   *
         BCTR  R8,0                    LOOK AT PREVIOUS CHARACTER
         CLI   0(R8),X'40'             END OF USER ID?
         BE    ND05                    IF NOT, KEEP LOOKING
         LA    R8,1(R8)                GO TO AVAILABLE SPACE
         B     ND20
ND10     EQU   *
         MVC   9(3,R8),ACEEUSRI        LOAD ONLY FIRST 3 LETTERS OF ID
         LA    R8,12(R8)
ND20     EQU   *
         L     R9,28(R7)               GET ADDR OF TEXT UNIT PTR LIST
ND30     EQU   *
         L     R10,0(R9)               GET ADDR OF TEXT UNIT
         CLC   0(2,R10),=X'0002'       DATA SET NAME?
         BE    ND40                    IF SO, GO TO IT
         TM    0(R9),X'80'             END OF LIST?
         BO    EXIT                    IF SO, NOW WHAT?
         LA    R9,4(R9)                GO TO NEXT ADDR IN LIST
         B     ND30                    AND LOOP
ND40     EQU   *
         SLR   R3,R3
         ICM   R3,B'0011',2(R10)       GET NUMBER OF QUALIFIERS
         SLR   R5,R5
         ICM   R5,B'0011',4(R10)       GET LENGTH OF FIRST QUALIFIER
         LA    R10,6(R10)              GO TO FIRST QUALIFIER
         AR    R10,R5                  SKIP IT
         BCTR  R3,0                    COUNT IT
         LTR   R3,R3                   CHECK TO SEE IF THERE'RE MORE
         BZ    ND60                    IF NOT, BRANCH
         LA    R5,2(R10)               GET ADDRESS OF QUALIFIER
*
*  IF XMITTED DATA SET IS TEMPORARY, GENERATE ERROR MESSAGE AND
*    FORCE THEM TO USE SYSUT2 TO RECEIVE IT.
*
         CLC   0(6,R5),=C'DDNAME'      IS THIS A TEMPORARY DATASET?
         BNE   ND50                    IF NOT, BRANCH
         L     R5,16(R7)               GET ADDRESS FOR ERROR MESSAGE
         MVC   0(L'ERRMSG1,R5),ERRMSG1 STORE ERROR MESSAGE
         L     R8,8(R7)                GET ADDRESS TO FLAG
         OI    0(R8),X'C0'             SET FLAG TO ISSUE MESSAGE
         LA    R15,4                   SET A RETURN CODE OF 4
         B     EXITX                   AND EXIT
*
*  FINISH CONSTUCTING NEW DATA SET NAME FROM NAME OF XMITTED FILE.
*
ND50     EQU   *
         SLR   R5,R5
         ICM   R5,B'0011',0(R10)       GET LENGTH OF QUALIFIER
         LA    R10,2(R10)
         MVI   0(R8),C'.'              INSERT PERIOD
         LA    R8,1(R8)
         BCTR  R5,0                    DECREMENT LENGTH
         MVC   0(*-*,R8),0(R10)        EXECUTED MOVE
         EX    R5,*-6                  LOAD QUALIFIER
         LA    R5,1(R5)                INCREMENT LENGTH
         AR    R10,R5                  POINT TO NEXT QUALIFIER
         AR    R8,R5
         BCT   R3,ND50                 COUNT NUMBER OF QUALIFIERS
ND60     EQU   *
         MVI   0(R8),X'7D'             MOVE IN QUOTE
         MVC   1(5,R8),=C') NEW'       FINISH REPLY
         LA    R8,6(R8)
*
*  UPDATE REPLY LENGTH FIELD AND SET FLAG TO TELL RECEIVE TO USE
*    THE REPLY FIELD
*
FINI     EQU   *
         L     R6,44(R7)               GET BEGINNING ADDRESS
         SLR   R8,R6                   CALCULATE LENGTH OF REPLY
         STH   R8,0(R6)                AND STORE IT
         L     R8,8(R7)                ADDRESS OF FLAG BIT
         OI    0(R8),X'08'             SET FLAG TO USE REPLY
*
*  EXIT THE EXIT
*
EXIT     EQU   *
         SLR   R15,R15                 SET RETURN CODE TO ZERO
EXITX    EQU   *
         RETURN (14,12),RC=(15)        END THE EXIT
*
         LTORG
ERRMSG1  DS 0CL65
         DC H'0063'
         DC C'CREATION OF TEMPORARY DATA SET NAMES NOT SUPPORTED '
         DC C'- USE SYSUT2'
*
         DS 0H
ERRMSG2  DS 0CL40
         DC H'0038'
         DC C'VOLSER OF SCRTCH NOT ALLOWED ON SYSUT2'
*
*  REGISTER EQUATES
*
         EQUATE
*
*
*  DSECTS
*
         IHAACEE
         IHAASCB
         IHAASXB
         IEFJFCBN
         IKJTCB
         IEFTIOT1
*
         END   INMRZ11
