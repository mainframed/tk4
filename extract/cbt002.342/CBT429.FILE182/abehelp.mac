  The ABE command is used to create or modify sequential data sets
  or members of partitioned data sets. It is designed to work on a
  3270 crt display terminal, and uses the special capabilities of
  the terminal to display the data set(s) being edited.  ABE is also
  usable from other types of terminals.  Through use of the
  HARDCOPY keyword, ABE may also be invoked from a clist.  The
  following clist, for example, will edit any member of data set
  "u.sd.u000.subrtnes.list", and will delete the last line if it
  contains a 1 in column 1, and will delete lines 10 thru 60 if line
  30 contains "PAGE    0" beginning in column 53.

          PROC 1 MEM
          ABE  'U.SD.U000.SUBRTNES.LIST(&MEM.)' NON HARDCOPY
          '&&1 DEL' 1(('1':1:1 B))
          '10 60 DEL' 1(('PAGE    0':53 30))
          SE

 +Records may be either fixed or varying in  length.
 +Note that ABE is continually being changed and enhanced.  Any
  program bugs currently outstanding are documented in this help
  data.  You can get a list of these problems by entering "help
  problems" while in xmode entered via the help subcommand.
 +Note that ABE is a virtual editor.  That is, it keeps the entire
  data set being edited in virtual storage.  This means that you
  must supply a large enough region.  Use the size parameter at
  logon to specify at least a 2000k region.
 +Note that help can be entered under abe  either as a subcommand
  to find out about other subcommands of the abe  command (find,
  top, bottom, etc.), or as a major command to find out about
  other major commands (pli, listc, listds, etc.).  While under
  abe , if you are not currently in xmode (see help data for the
  x subcommand), and you enter "help" in the command area,
  abe  assumes the help subcommand, and will give you a list of
  subcommands.  When the list is displayed, abe  puts you in
  xmode.  If you have entered xmode in this fashion, until you
  return to scan mode, any help commands you enter are assumed to
  be requests for subcommand data.  If you enter xmode via the x
  subcommand, any help commands you enter are assumed to be
  requests for major command data.
 +Note that you can display and edit several data sets at
  the same time.  In this situation, each data set displayed has its
  own command line, and a subcommand entered on each command line
  applies only to the data set owning that command line.  In
  addition, any subcommand prefixed by the word "all" entered on any
  command line applies to all data sets currently being edited.  In
  the case of the top data set on the display, the command line is
  the fourth line down.  For other data sets on the display, the
  command line is the top line of the display area owned by the data
  set, and is identified by the character string ====> at the left
  end of the line.  Subcommands can be entered on any number of
  command lines at the same time.  Also, multiple commands can be
  entered at the same time in a single command line by entering a
  non-alphameric character (e.g. /, @) other than % as the first
  character on the command line.  Dent will recognize this character
  as a delimiter.  For example, /10 80 50. sr 5/10 80 40. sr 5/top,
  which is a string of three subcommands, could be entered on a
  command line.
 +Note also that if a subcommand is too long to fit on the command
  line, enter a plus sign (+) as the last character on the command
  line.  This is considered by ABE to be a continuation character.
  It will clear the screen and prompt you for more text for the
  command.  For example, you enter -

      1 2  +

  the screen will be cleared, and you will be prompted.  If you
  then enter -

      substr +

  you will be prompted again.  If you then enter

      'how now brown cow'

  the actual subcommand executed will be -

      1 2 substr 'how now brown cow'

 +Note that ABE can also be executed as a batch utility.
  Sample JCL follows:

  // EXEC PGM=ABEB,REGION=3000K,DYNAMNBR=30,
  // PARM='FIRST(TOM) LAST(SMITH)'
  //SYSPRINT DD SYSOUT=*
  //SYSRUN DD DSN=U.SD.U000.RUN,DISP=SHR  RUN LIBRARY
  //SYSLIB DD DSN=U.SD.U000.TEXT,DISP=SHR INCLUDE LIBRARY
  //OUT DD DSN=&OUT,DISP=(NEW,PASS),
  // UNIT=DISK,SPACE=(TRK,(1)),
  // DCB=(LRECL=80,BLKSIZE=80,RECFM=F)
  //IN DD *
  $CMD ECHO
  $CMD RLIM 4
  MY FIRST NAME IS &FIRST
  AND MY LAST NAME IS &LAST
  //SYSIN DD *
  LIST

  In the above JCL, the PARM field may contain any keyword you
  choose.  The keywords specify symbolic variable names and the
  associated parenthesized values specify their replacement
  values.  DD statements IN and OUT are both required.  IN must
  contain a RUN command list which will be run from OUT as though
  "$control nl" were preceding it.  When the RUN on IN is
  finished, a SAVE will be automatically issued to save the
  results in the OUT data set, and if SYSIN is supplied, it
  will be opened and any subcommands it contains will be executed.
  Finally, an "all end nosave" subcommand will be issued to
  terminate any further ABE processing.

 !!!!!!IMPORTANT!!!!!!! - If you haven't done so before, you should
 read Appendix H to the ABE Reference Manual, which describes LSUs
 The items <prefix>, <lsu>, <l1>, <l2>, <incr>, <off>, <len>, and
 <ncols> are commonly referred to in this text, and their complete
 descriptions are given only in Appendix H.  AN UNDERSTANDING OF
 LSUS IS ESSENTIAL TO THE USE OF MOST ABE SUBCOMMANDS.

)O OPERANDS -
  <dsname> - If the sysout keyword is not specified,
   this is the name of the data set to be created or edited.  If
   the fully qualified data set name is specified, it must be
   enclosed in single quotes.  If the data set name is not
   entered within quotes, the userid as a qualifier is appended
   to the left of the name, unless the "noprefix" keyword is
   specified (see help data).  If the rightmost qualifier is not
   entered by the user, one will be appended for him.  If more
   than one data set exists with the specified name, the user
   will be prompted to select the appropriate qualifier.

   <dsname> may also be a parenthesized list of dsnames,
   as in -

      abe (jobcard cntl(jcltemp) sample.data)

   In this case, all three data sets will be brought up on the
   display for editing at the same time.

   If the ABE subcommand is being entered on the subcommand line
   for a partitioned data set member currently being edited, and
   the ABE subcommand being entered specifies a member of the
   same partitioned dataset, a shorthand reference can be used
   in which the partitioned dataset name is not specified.  Only
   the member name is entered surrounded either by double
   parentheses or single braces, e.g. -

     abe ((jcltemp))

       or

     abe {jcltemp}

  +Note - the abe  command will enqueue on this data set,
   DISP=SHR.  If you subsequently do a SAVE subcommand, a system
   enqueue on the same name as used by utility u098ms01 will be
   issued before the save operation is done.
  +If the SYSOUT keyword is specified, <dsname> is not a dsname.
   instead, it indicates a job on sysout.  ABE will retrieve the
   sysout via the output command, and then display the data for
   editing.  The specification is in the form xx(jnn), where "xx"
   is the characters suffixed to your userid in the jobname,
   or if "xx" is longer than two characters, it is assumed to be
   the entire job name.
   The "(jnn)" part of the specification is optional.  Replace the
   "nn" with the jes job number.  The sysout will be retreived
   into a data set with name in the form "userid.jobname.outlist".
   Dent will check to see if the data set already exists.  If it
   does, it will use the existing copy.  If it doesn't, it will
   create one with the attributes lr(137) bl(19000) recfm(vba).
))CLIST - This keyword is used to specify which symbolic
   substitution subroutines are to be used, and should only be
   specified when ABE is being invoked from a clist.  To better
   understand what this keyword does, consider the following
   clist statements:

      1 ABE xyz hardcopy
      2 1982 mk 1
      3 getmk 1 lastln
      4 symc lastln
      5 set 10 'lastln = &lastln'

   Line 4 in the clist will cause the value "1982" to be printed
   at the terminal.  Line 5 will fail with an error message from
   TSO indicating that symbolic variable LASTLN is not initialized.
   The problem arises because ABE has its own internal symbolic
   substitution routines, which reference a different set of
   symbolic variables than those referenced in the CLIST logic.
   To get the above clist to work as desired, add the CLIST keyword
   on the ABE command in line 1 (ABE xyz hardcopy clist).  This
   will tell ABE to use the clist substitution facilities instead
   of its own.
))COUNT() - This keyword is used to limit the number of lines
   brought in for editing.  If count(500) is specified, for
   example, a maximum of 500 lines will be read in.  If you
   subsequently do a save back into the original data set,
   any lines not read for editing will be lost.
))DBD - This keyword tells ABE to immediately issue a "use in"
   subcommand for the new data set.  Note that the DBD keyword is
   the default if the low-level qualifier for the data set to be
   edited is DB (e.g. X75826.INVENTRY.DB).  If you don't want this
   default, use the NODBD keyword. See documentation for the USE
   subcommand for further details.
))DB2 - Equivalent to entering both the DB2IN and DB2OUT keywords.
))DB2IN - Indicates that the input data set is a table currently
   residing in a DB2 database.  See Appendix K for further
   information.
))DB2OUT - Indicates that the output data set is to be a table
   residing in a DB2 database.  See Appendix K for further
   information.
))FAM() - Specifies the name of aload module to be used when
   accessing records in the file.  This module receives a
   standard parameter list, which is documented in Appendix A
   under the title "file access modules".
))HARDCOPY - This keyword is used to force abe  to operate as
   though it were being invoked on a terminal other than a 3270.
   If HARDCOPY is specified, ABE will not use full screen mode,
   but instead will prompt you at the terminal for each
   subcommand with the string "ABE".  The HARDCOPY keyword is
   especially useful for running ABE in a clist.  The following
   clist, for example, will edit any member of data set
   "u.sd.u000.subrtnes.list", and will delete the last line if it
   contains a 1 in column 1, and will delete lines 10 thru 60 if
   line 30 contains "PAGE    0" beginning in column 53.

          PROC 1 MEM
          ABE  'U.SD.U000.SUBRTNES.LIST(&MEM.)' NON HARDCOPY
          '&&1 DEL' 1(('1':1:1 B))
          '10 60 DEL' 1(('PAGE    0':53 30))
          SE

))HEX - This keyword causes the data set to be displayed in hex
   mode.  In this mode, each record is displayed on two lines of
   the screen.  The first line will contain the record in ebcdic,
   except that unprintable characters will be translated to
   blanks, and a space will be inserted after each character
   of the record.  This spacing is done so that the characters
   will match up with their hexadecimal representation, which is
   displayed on the second line.  You can change data for the
   record in either line of the display, but remember that the
   first line contains periods where unprintable characters
   exist in the record; if you change data in this line, the
   unprintable characters in the record will be replaced with the
   periods from the display.  If you change data in the second
   line for a record, use hexadecimal character representations
   (e.g.  C1 = 'a').
))HICASE - Use this keyword to indicate that the data lines
   entered by the user in lower case on the display are to
   translated to upper case.  Note that the default for data sets
   with the descriptive qualifier "text" is locase, and for all
   others is hicase.
))INFILE() - This keyword may be used when you have preallocated
   the data set to be edited under a particular file name.  For
   example, if you had previously entered the TSO command
   "ALLOC FI(PPP) DA('U.SD.U000.DATA') SHR VOL(FSD300)", then
   you could edit that specific data set by entering
   "ABE X INFILE(PPP)".  Note that the X in the sample ABE
   command just shown has no meaning, but must be supplied
   because the parsing routine requires that a positional
   parameter always be entered as the first operand to ABE .
   Note also that when the END subcommand is entered for this
   data set, the file will remain allocated under the ddname PPP.
   This is contrary to the normal operand of ABE in which the
   edited file is freed when the END subcommand is entered.
))INPUT() - This keyword is used to specify an initial set of ABE
   subcommands to be executed immediately.  For example,
   "abe  data inp(/0 bl 5/top)" indicates that as soon as data
   set "data" is brought in for editing, the two subcommands
   "0 bl 5" and "top" are to be executed immediately.
   NOTE:  Maximum length of the INPUT string is 80 characters.
))INTERNAL - This keyword is ignored unless either the DB2 or the
   DB2IN keyword is also specified.  In this case, INTERNAL tells
   the editor to maintain fields retrieved from a DB2 table in
   internal form (packed decimal, floating point, fixed point, etc.).
   This may provide more efficient processing because data conversion
   need not be done to evaluate expressions involving fields in
   the data set.
))LINE() - This keyword is used to indicate the first line to be
   read from the data set to be edited.  If line(1000) is
   specified, for example, the first 999 lines will be skipped,
   and the first line read in for editing will be line 1000.
   Note that if you do a save back into the original data set,
   any lines not read for editing will be lost.  In the example,
   just cited, the first 999 lines would be lost.
))LOCASE - Use this keyword to indicate that the data lines
   entered by the user in lower case on the display are to remain
   in lower case.  Note that the default for data sets with the
   descriptive qualifier "text" is locase, and for all others is
   hicase.
))NAME() - This keyword can be used to assign a name (8
   characters or less) to the data set to be edited.  Note that this
   name has nothing to do with the data set name.  It is merely a
   tag to be used in certain ABE subcommands, such as MERD, and
   PFK.  This name will be displayed, along with the dsname, to the
   right end of the command line for that data set.
))NODBD - This keyword tells ABE NOT to immediately issue a "use in"
   subcommand for the new data set.  It would normally only issue
   the "use in" subcommand automatically if the DBD keyword were
   specified, or the low-level qualifier for the data set to be
   edited is DB (e.g. X75826.INVENTRY.DB). See documentation for the
   USE subcommand for further details.
))NOFREE - Specifying this keyword causes the data set to remain
   allocated when the END subcommand is entered for the data set.
   Normally, unless the edited data set is part of a concatenation,
   ABE  will automatically free the data set.
))NONUM - Use this keyword to indicate that the data set to be
   edited is an unnumbered data set.
))NOPREFIX - This keyword affects way the dsname that you
   specify for the data set to be edited is to be handled.  If
   you specify "noprefix", the data set name should not be
   entered in quotes, and your userid will not be prefixed.
))NOPROMPT - Specifies that if the data set to be edited does
   not already exist, ABE will create it without prompting you
   at the terminal.  If this keyword is not specified, the message
   "Data set does not exist - enter 'yes' to create one or 'no'".
))NOSHOW - Specifies that the data set is not to be given ownership
   of display lines if does not currently own any lines when a lines
   subcommand without operands is issued for another data set
   currently being edited.  See also the SHOW and NOSHOW keywords of
   the SUPPORT subcommand.
))OUTFI() - may be used to specify a preallocated data set into
   which data will be written when a SAVE subcommand is issued.
))OUTDA() - This keyword specifies an optional output data set
   into which the edited data will be written when a save subcommand
   is issued without a dsname operand.  If the fully qualified data
   set name is specified, it must be enclosed in single quotes.  If
   the data set name is not entered within quotes, the userid is
   always appended to the left of the name.  If the rightmost
   qualifier is not entered by the user, one will be appended for
   him if the output data set already exists.  If more than one data
   set exists with the specified name, the user will be prompted to
   select the appropriate qualifier.  If no data sets exist with the
   specified name, one will be created.
))OVOL(<VOLSER>) -  If this keyword is NOT specified, a search is
   made of currently allocated datasets to see if a matching output
   dsname can be found (The OUTDA keyword is used to specify the
   output dsname). If no match, the catalog is used allocate the
   dataset.  If the OVOL keyword is specified, the output dataset
   must exist on that disk volume for the ABE subcommand to be
   successful.
))PDF - This keyword is used when you want to add or change a
   panel format definition.  Such definitions are used in
   conjunction with the $fullscr and $seto statements of the PIL
   language used with the RUN subcommand.  This facility allows
   you to easily define your own full-screen panel displays.

   Suppose, for example, I wanted to create a new panel definition
   called "TSTPNL". To do so, I would issue the ABE  command as
   follows:

     abe  'u.sd.u000.panel(tstpnl)' pdf

   Data set 'U.SD.U000.PANEL' is my panel definition library.
   It should be a partitioned data set, and can have any LRECL
   up to 256, and can be either RECFM=VB or RECFM=FB, and can
   have any BLKSIZE up to full-track.  My panel definition
   library has the attributes (LRECL=80,BLKSIZE=19040,RECFM=FB).

   Since member TSTPNL does not exist, ABE  will display a blank
   screen on which I can define the new panel format.  Note that
   if the panel had already existed, ABE  would have displayed the
   existing definition so that I could make alterations.  If
   ABE  displays an existing panel, and I don't alter anything on
   the panel, it assumes I was just browsing and it will not update
   the library.

   You can define two different kinds of fields on the display:
   (1) literal fields, which are protected, and are used only
   for output; (2) input fields, which are unprotected, and are
   used both for output and for input from the terminal.

   You define the starting position of literal fields by
   placing an @ character on the screen, followed by any literal
   data you want displayed.  Note that you should always assume
   that an @ character is in the upper left-hand corner of the
   panel definition, but for technical reasons, it isn't displayed
   on the blank screen supplied by abe  during panel definition.

   You define the starting position of input fields by placing
   an & character on the screen, followed by a sequence of one
   or more X characters defining the length of the input field.

   The following box surrounded by asterisks simulates the
   appearance of the screen after defining a panel consisting of
   seven fields, four of which are literal fields and three of
   which are input fields:

   *****************************************************************
   * sample panel definition                                       *
   *                                                               *
   *       @first input field:&xxxxxx@                             *
   *                                                               *
   *                  second input field:&xxxxxx@                  *
   *                                                               *
   *                            third input field:&xxxxxx          *
   *                                                               *
   *****************************************************************

   Fields in a panel are referenced by name, and the field names by
   default have the form Fddddd, where ddddd is a five-digit number.
   The first field in the panel will be named F00001, and in this
   case, is a literal field in which the characters "SAMPLE PANEL
   DEFINITION" will be displayed by default.  The second field on
   the panel is named F00002, and in this case is also a literal
   field containing "FIRST INPUT FIELD:". The third field in our
   sample panel definition is called F00003, and is an input field
   of length 6, and so on.

   Note that you may override the default names for input fields.
   Specifying "&address   " on a panel, for example, would designate
   an input field named "address".  Note that your input field names
   must begin with an alphabetic character "A" to "Z", other than
   "X", and can only be up to eight characters long.

   Once you have finished defining all of the fields on a panel,
   the last thing you should do before hitting enter is to place
   the cursor where you want it when the panel is displayed.

   For further discussion on using your own full-screen panel
   displays, see the $fullscr and $seto statements of the PIL
   language described in the documentation for the RUN
   subcommand of ABE .

   It is frequently the case that you will want to repeat the
   field pattern on the screen.  For example, you want to define
   a panel such as the following:


   *****************************************************************
   *                 personal profile data panel                   *
   * division:&xxx@  department:&xxxx@                             *
   *         name              age       height      weight        *
   *  --------------------      --         ---         ---         *
   * &xxxxxxxxxxxxxxxxxxxx@    &xx@       &xxx@       &xxx@        *
   * &xxxxxxxxxxxxxxxxxxxx@    &xx@       &xxx@       &xxx@        *
   * &xxxxxxxxxxxxxxxxxxxx@    &xx@       &xxx@       &xxx@        *
   * &xxxxxxxxxxxxxxxxxxxx@    &xx@       &xxx@       &xxx@        *
   * &xxxxxxxxxxxxxxxxxxxx@    &xx@       &xxx@       &xxx@        *
   * &xxxxxxxxxxxxxxxxxxxx@    &xx@       &xxx@       &xxx@        *
   * &xxxxxxxxxxxxxxxxxxxx@    &xx@       &xxx@       &xxx@        *
   * &xxxxxxxxxxxxxxxxxxxx@    &xx@       &xxx@       &xxx@        *
   * &xxxxxxxxxxxxxxxxxxxx@    &xx@       &xxx@       &xxx@        *
   * &xxxxxxxxxxxxxxxxxxxx@    &xx@       &xxx@       &xxx@        *
   *                                                               *
   *****************************************************************

   To define this panel, you would merely type in the first five
   lines, and then hit program function key 1, as follows:


   *****************************************************************
   *                 personal profile data panel                   *
   * division:&xxx@  department:&xxxx@                             *
   *         name              age       height      weight        *
   *  --------------------      --         ---         ---         *
   * &xxxxxxxxxxxxxxxxxxxx@    &xx@       &xxx@       &xxx@        *
   *                                                               *
   *****************************************************************

   Hitting program function key 1 tells ABE to replicate the last
   line defined on the panel for as many times as will fit on the
   screen.

   You may find it desireable to manipulate the panel definition
   as an editable data set consisting of 80-column card-images,
   one card for each line of the panel display.  This would allow
   you with the full capabilities of all the ABE subcommands in
   making changes to the panel definition.  You can achieve
   this state by either entering the PDFE keyword on the ABE
   command instead of the PDF keyword, or once the panel definition
   is in full-screen display, by pressing the program function key
   2.  You can subsequently return to the full-screen display of
   the panel definition by entering the PDFD subcommand, or you
   convert back from card-images and save the panel definition by
   entering the PDFS subcommand.
))PDFC - Used to specify that the input data set contains a screen
   format created using the SCRDEF command.  ABE will convert to
   the format useable by $FULLSCR in RUN.
))PDFE - This keyword is used when you want to add or change a
   panel format definition.  Such definitions are used in
   conjunction with the $fullscr and $seto statements of the PIL
   language used with the RUN subcommand.  A more detailed
   explanation of full-screen definitions may be obtained by
   looking at the help data for the PDF keyword of ABE.  The
   PDFE keyword differs from the PDF keyword in that the screen
   image comes up as a series of 80-column card-images in edit
   mode.  Thus, you can manipulate the screen definition with
   any of the ABE subcommands.  When you have completed a screen
   definition, you can convert it to the format useable by
   $fullscr and save it by using the PDFS subcommand (see help).
))PRI() - This keyword is used only in conjunction with the
   sysout keyword, and indicates the number of tracks to be
   allocated as primary space for the outlist data set to be
   created.  The default is 1.
))PROFILE - This keyword tells the editor to immediately issue
   the subcommand 'RUN $PROFILE' when the editor is invoked
   from READY mode.  The keyword will be ignored if ABE is
   issued as a subcommand.
))RECSIZE() - This parameter is used only if the <dsname> parameter
   is specified as ''.  It is used to establish a record size for
   a virtual data set.  The default recsize value is 256.
))SAS - Equivalent to entering both the DB2IN and DB2OUT keywords.
))SASIN - Indicates that the input data set is a table currently
   residing in a SAS library.  See Appendix K for further
   information.
))SASOUT - Indicates that the output data set is to be a table
   residing in a SAS library.  See Appendix K for further
   information.
))SECY() - This keyword is used only in conjunction with the
   sysout keyword, and indicates the number of tracks to be
   allocated as secondary space for the outlist data set to be
   created.  The default is 1.
))SUPPORT - Specify this keyword if the data set is to be a
   support data set.  See the help data for the ABE SUPPORT
   subcommand for details.
))SYSOUT() - this keyword specifies that the data set to be edited
   is currently a sysout data set.  Dent will retrieve the sysout
   via the output command, and then display the data for editing.
   The first operand of abe  ('dsname') indicates the job for
   which sysout is to be retrieved.  The specification is in the
   form xx(jnn), where "xx" is the characters suffixed to your
   userid in the jobname, or if "xx" is longer than two characters,
   it is assumed to be the entire job name.
   The "(jnn)" part of the specification
   is optional.  Replace the "nn" with the jes job number.
  +Note that you may optionally specify a list of sysout classes
   with the sysout parameter, e.g., "sysout(1 2 a)" indicates that
   only sysouts from classes 1, 2, and A are to be retrieved.
  +Note that if the entire job name is specified ("xx" longer than
   two characters) and you do not specify any sysout classes,
   the default will be sysout class 2.
  +Note that the ABE  subcommands $CC, $EDIT, $JE, $PK, $PP, $PRT,
   and $PURGE are designed to facilitate viewing msgclass
   sysout.
  +Note that all unprintable characters are automatically
   translated to periods before the data is displayed.
))TRANSLAT - This keyword specifies that all unprintable
   characters in the data set are to be translated to periods
   before the data is displayed.  For more information,
   see the help data for the translat subcommand.  Note that
   the sysout keyword implies the translat keyword.
))VOL(<VOLSER>) -  If this keyword is NOT specified, a search is
   made of currently allocated datasets to see if a matching input
   dsname can be found.  If no match, the catalog is used allocate
   the dataset.  If the VOL keyword is specified, the specified
   dataset must exist on that disk volume for it to be edited.

