//AJEEAFNM JOB 0001,'SMD01-329-J.ELSWORTH',
//    CLASS=0,MSGCLASS=A,
//    NOTIFY=*******
/*ROUTE PRINT RMT99
//*
//*  RE: SYS0.APL.SOURCE( AFNMXXX )
//*
//* DOC: ASSEMBLE AND LINK AFNMXXX - FNM WTO EXIT PROCESSOR
//*
//ASM      EXEC  ASMHAL,LPARM=RENT,
//         PARM.ASM='DECK,NOOBJECT,XREF(SHORT),RENT'
//ASM.SYSLIB DD DSN=SYS1.MACLIB,DCB=(BLKSIZE=8000),DISP=SHR
//         DD DSN=SYS1.AMODGEN,DISP=SHR
//ASM.SYSIN  DD *
AFNMXXX  TITLE 'WTO EXIT FOR NPM MESSAGE PROCESSING'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*  MODULE NAME  . . . . AFNMXXX
*
*  DATE WRITTEN . . . . 03/85
*
*  AUTHOR . . . . . . . JIM ELSWORTH
*
*  ENVIRONMENT  . . . . MVS/XA WTO EXIT
*
*  FUNCTION
*    RECEIVES CONTROL FOR VARIOUS NPM MESSAGES ( FNMXXX ).
*    MAY START TASKS OR TAKE OTHER ACTIONS.
*
*
*  DESCRIPTION:
*    1) GETMAIN A SAVE AND WORK AREA
*    2) BRANCH DEPENDING ON MESSAGE ID
*
*    FNM215I:
*      START THE NPMRSS TASK, S NPMRSS,SA=?,SSF=?
*      SA IS LEFT ZERO FILLED HOST SUBAREA NUMBER
*      SSF IS SET TO 1 GREATER THAN THE CURRENT SESSION STATISTICS
*      FILE UNLESS THE CURRENT SSF FILE IS 4. IF THE CURRENT SSF FILE
*      IS 4 SSF IS WRAPPED BACK TO 1.
*
*    FNM341I:
*      START THE NPMRLF TASK, S NPMRLF,SA=?,LFN=?
*      SA IS THE LEFT ZERO FILLED SUBAREA NUMBER
*      LFN IS SET TO MODULO(CURRENT LFN + 1, 2).
*
*    3) FREEMAIN STORAGE
*    4) RETURN
*
*
*  REGISTERS AT ENTRY:
*     R1 : @CTXT COMMTAS USER EXIT PARAMETER LIST
*    R13 : @STANDARD SAVE AREA
*    R14 : RETURN ADDRESS
*    R15 : ENTRY POINT
*
*
*  REGISTERS AT EXIT: ALL REGISTERS RESTORED
*
*
*
*            ( CONTINUED ... )
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*  REGISTERS USED:
*
R0       EQU   0                       WORK REGISTER
R1       EQU   1                       INPUT PARMS AND WORK REGISTER
R2       EQU   2                       MESSAGE ATTRIBUTES BAR
R4       EQU   4                       MESSAGE TEXT BAR
CTXTPTR  EQU   5                       CTXT BAR
R7       EQU   7                       WORK REGISTER
R11      EQU   11                      DYNAMIC STORAGE BAR
R12      EQU   12                      BASE REGISTER
R13      EQU   13                      SAVE AREA POINTER
R14      EQU   14                      RETURN ADDRESS
R15      EQU   15                      ENTRY ADDRESS
*
*
*  CALLED MODULES: NONE
*
*  ASSUMPTIONS: MUST BE RUN UNDER AN MVS/XA SYSTEM
*
*
*  ATTRIBUTES:
*    REENTRANT
*    AMODE=31
*    RMODE=ANY
*
*  ABENDS: NONE
*
*
*  MESSAGES (WTO'S):
*    AFNMXXX - NO MESSAGE MATCH FOUND
*      ISSUED IF MODULE INVOKED FOR OTHER THAN ITS INTENDED PURPOSES
*
*    AFNMXXX - NO TCT FURTHER PROCESSING ABORTED
*       ISSUED IF TCBTCT ADDRESS IS NULL.
*
*
*  CAVEATS:
*    DO NOT ISSUE ANY WAITS IN THIS ROUTINE
*    BE SURE TO LINK AS REENTRANT
*
*
*
*
*
*
*
*
*
*
*            ( CONTINUED ... )
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*
*  IMPLEMENTATION NOTES:
*    AFTER ASSEMBLY AND LINK LLA MUST BE RESTARTED
*
*    IN SYS1.PARMLIB(MPFLST??) MUST CONTAIN AT LEAST ONE OF THE
*    FOLLOWING STATEMENTS:
*
*      FNM????,SUP(NO),USEREXIT(AFNMXXX)
*
*      WHERE FNM???? IS THE MESSAGE ID TO CAUSE OUR INVOCATION
*
*      TO ACTIVATE THE MPFLIST; T MPF=??  WHERE ?? IS THE MPFLST SUFFIX
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
         IEZVX100
         EJECT
         IKJTCB                        TIMING CONTROL TABLE
         EJECT
         IEFTCT                        TIMING CONTROL TABLE
         EJECT
         IEFJMR                        JOB MANAGEMENT RECORD
         EJECT
IHAPSA   DSECT
         IHAPSA
         EJECT
***********************************************************************
*  MAP SAVE AND WORK AREAS THAT ARE ACQUIRED
***********************************************************************
         SPACE 1
DYNAMIC  DSECT
SAVE1    DS   18F                      SAVE AREA
         SPACE 1
COMHDR   EQU   *
         SPACE 1
         ORG   COMHDR
         DS    AL2(COMLEN),AL2(0)      COMMAND HEADER
COMMAND  DS    C'S NPMRSS,SA='         COMMAND TEXT
COMSA    DS    C'??'                   COMMAND TEXT (SUBAREA)
         DS    C',SSF='                COMMAND TEXT
COMSSF   DS    C'?'                    COMMAND TEXT (SESSION STAT#)
COMLEN   EQU   *-COMHDR                COMMAND BLOCK LENGTH
         SPACE 1
         ORG   COMHDR
D341HDR  DS    AL2(D341LEN),AL2(0)     COMMAND HEADER
D341CMD  DS    C'S NPMRLF,SA='         COMMAND TEXT
D341SA   DS    C'??'                   COMMAND TEXT (SYSTEM)
         DS    C',LFN='                COMMAND TEXT
D341LFN  DS    C'?'                    COMMAND TEXT (LOG FILE#)
D341LEN  EQU   *-COMHDR                COMMAND BLOCK LENGTH
*
DSYS     DS    C                       SYSTEM ID
DSA      DS    CL2                     SUBAREA
         ORG
DYNAMICL EQU  *-DYNAMIC                LENGTH OF DYNAMIC AREA
         SPACE 5
MSGTEXT  DSECT
MSGID    DS    CL8                     MESSAGE ID
         EJECT
AFNMXXX  CSECT
AFNMXXX  AMODE 31                      31 BIT ADDRESSING MODE
AFNMXXX  RMODE ANY                     CAN RUN ABOVE OR BELOW
         SPACE 2
***********************************************************************
*  ESTABLISH ADDRESSABILITY, AND CHAIN SAVE AREAS
***********************************************************************
         SPACE 1
         USING *,R15                   EST. ADDRESSABILITY
         B     PROLOG                  BYPASS PROLOGUE
         DC    AL1(L'ID)               PROLOGUE LENGTH
ID       DC    C'&SYSDATE-&SYSDATE'    MODULE NAME AND COMPILE DATE
         DS    0H                      ALLIGNMENT
PROLOG   SAVE  (14,12)                 SAVE CALLERS REGS
         LR    R12,R15                 SAVE ENTRY ADRESS
         DROP  R15                     LOSE OLD BASE
         USING AFNMXXX,R12             REAL BASE ADDRESS=R12
         L     CTXTPTR,0(R1)           @CTXT
         USING CTXT,CTXTPTR            MAP CTXT
         SPACE 2
***********************************************************************
*
*  GETMAIN A SAVEAREA AND WORK AREA
*
* NOTE! STORAGE IS ACQUIRED BELOW THE LINE DUE TO SVC34 REQUIREMENTS
*
***********************************************************************
         SPACE 1
GTEMAIN  GETMAIN RU,LV=DYNAMICL,SP=230,LOC=BELOW,RELATED=(FREEMAIN)
         LR    R11,R1                  @ACQUIRED STORAGE
         USING DYNAMIC,R11             MAP DYNAMIC AREA
         ST    R13,SAVE1+4             SETUP
         LA    R15,SAVE1                 @OUR SAVE AREA
         ST    R15,8(R13)                SET FORWARD POINTER
         LR    R13,R15                   @OUR SAVE AREA
         EJECT
***********************************************************************
*  BUILD SOME COMMON PARAMETERS
***********************************************************************
         SPACE 1
*  GET SMF SYSTEM I.D.
         SPACE 1
         L     R7,PSATOLD-PSA          @OUR TCB
         ICM   R7,15,TCBTCT-TCB(R7)    @OUR TCT
         BNZ   FNM100
         WTO   'AFNMXXX - NO TCT - FURTHER PROCESSING ABORTED'
         B     RETURN
         SPACE 1
*  GUESS AT SUBAREA AS BASED ON SMF SYSTEM ID
         SPACE 1
FNM100   EQU   *
         L     R7,TCTJMR-SMFTCT(R7)    @JMR
         MVC   DSYS,JMRCPUID-JMR+3(R7) MOVE SIGNIFICANT PART OF CPUID
         MVC   DSA,=C'07'              ASSUME APLA
         CLI   DSYS,C'A'               YES ?
         BE    FNM120
         MVC   DSA,=C'09'              ASSUME APLB
         CLI   DSYS,C'B'               YES ?
         BE    FNM120
         MVC   DSA,=C'05'              ASSUME APLC
         CLI   DSYS,C'C'               YES ?
         BE    FNM120
         MVC   DSA,=C'??'              HAVE LITTLE IDEA OF WHATS UP
FNM120   EQU   *
         EJECT
***********************************************************************
*  DETERMINE WHICH MESSAGE TO PROCESS
***********************************************************************
         SPACE 1
         L     R2,CTXTTXPJ             @MESSAGE ATTRIBUTESS
         USING CTXTATTR,R2             MAP MESSAGE ATTRIBUTES
         LA    R4,CTXTTMSG             @BASE TEXT
         USING MSGTEXT,R4              MAP BASE TEXT
         CLC   MSGID,=CL8'FNM215I'     MESSAGE FNM215I ?
         BE    FNM215I                 -YES
         CLC   MSGID,=CL8'FNM341I'     MESSAGE FNM341I ?
         BE    FNM341I                 -YES
         SPACE 3
***********************************************************************
*  PUT TESTS FOR NEW MESSAGE TYPES HERE
***********************************************************************
         SPACE 1
         WTO   'AFNMXXX - NO MESSAGE MATCH FOUND'
         B     RETURN
         EJECT
***********************************************************************
*
*           1         2         3         4         5
*  1234567890123456789012345678901234567890123456789012
*
*  FNM215I NPMSESS? IS THE PRIMARY SESSION HISTORY FILE
*
***********************************************************************
         SPACE 1
NUMSESS  EQU   2                       NUMBER OF NPM SESSION DATASETS
         SPACE 1
C215COM  DC    AL2(COMLEN),AL2(0),C'S NPMRSS,SA=??,SSF=?'
         SPACE 2
FNM215I  EQU   *
         MVC   COMHDR(COMLEN),C215COM  MOVE CMD DATA TO DYNAMIC AREA
         MVC   COMSA,DSA               MOVE IN SUB AREA
         SPACE 1
*  DETERMINE WHICH SESSION DATASET TO INITIALIZE
         SPACE 1
         IC    R14,MSGID+15            SESS NUMBER
         N     R14,=X'0000000F'        TO BINARY
         LA    R14,1(R14)              PLUS 1
         C     R14,=A(NUMSESS)         BEYOND END ?
         BNH   F21590                  -NO
         LA    R14,1                   -YES, RESET TO 1ST ONE
F21590   EQU   *
         O     R14,=X'000000F0'        BACK TO EBCDIC
         STC   R14,COMSSF              INTO 'START' COMMAND
         SPACE 2
*  ISSUE THE START COMMAND VIA SVC34
         SPACE 1
         SR    R0,R0                   NO UCMID ADDRESS
         MGCR  COMHDR                  SEND COMMAND VIA SVC34
         B     RETURN
         EJECT
***********************************************************************
*
*           1         2         3         4         5
*  1234567890123456789012345678901234567890123456789012
*
*  FNM341I VTAM LOG RECORDING ON SYS4.NPM.APL?.SYSLOG?
*
***********************************************************************
         SPACE 1
NUMSLOG  EQU   2                       NUMBER OF NPM SESSION DATASETS
         SPACE 1
C341COM  DC    AL2(D341LEN),AL2(0),C'S NPMRLF,SA=??,LFN=?'
         SPACE 2
FNM341I  EQU   *
         MVC   COMHDR(D341LEN),C341COM COMMAND HEADER & PROTOTYPE
         MVC   D341SA,DSA              SUBAREA
         SPACE 1
*  DETERMINE WHICH SESSION DATASET TO INITIALIZE
         SPACE 1
         IC    R14,MSGID+50            SESS NUMBER
         N     R14,=X'0000000F'        TO BINARY
         LA    R14,1(R14)              PLUS 1
         C     R14,=A(NUMSLOG)         BEYOND END ?
         BNH   F34190                  -NO
         LA    R14,1                   -YES, RESET TO 1ST ONE
F34190   EQU   *
         O     R14,=X'000000F0'        BACK TO EBCDIC
         STC   R14,D341LFN             INTO 'START' COMMAND
         SPACE 2
*  ISSUE THE START COMMAND VIA SVC34
         SPACE 1
         SR    R0,R0                   NO UCMID ADDRESS
         MGCR  COMHDR                  SEND COMMAND VIA SVC34
         B     RETURN
         EJECT
***********************************************************************
*  RETURN
***********************************************************************
         SPACE 1
RETURN   EQU   *
         L     R13,4(R13)              @CALLERS SAVE AREA
         SPACE 2
*  FREE THE SAVE AREA AND WORK AREA THAT WAS ACQUIRED EARLIER
         SPACE 1
         FREEMAIN RU,LV=DYNAMICL,A=(R11),SP=230,RELATED=(GETMAIN)
         RETURN (14,12)                RESTORE REGS AND RETURN
         SPACE 5
***********************************************************************
*  CONSTANTS AND RENTRANT MISCELLANEOUS
***********************************************************************
         LTORG
         END
/*
//LKED.SYSLMOD DD DSN=APL1.LINKLIB,DISP=SHR
//LKED.SYSIN DD *
 NAME AFNMXXX(R)
/*
//LLA      EXEC PGM=OPERCMDS,COND=(0,LT)
//SYSIN    DD *
F LLA,REFRESH
T MPF=01
/*
