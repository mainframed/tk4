 GDGLIST: PROC OPTIONS(MAIN) REORDER;

 /*  THIS MODULE WILL CALL IDCAMS TO PERFORM LISTS OR CHANGES TO
     GDG BASE ENTRIES IN AN ICF CATALOGUE.  ALLOCATIONS AND
     DE-ALLOCATIONS ARE PERFORMED BY THE LISTGDGC MODULE THAT IS
     LINKED INTO SYS1.CMDLIB WITH THE APPROPRIATE NAME.  THIS
     MODULE IS LINKED TO BY LISTGDGC.

     THIS MODULE IS DEPENDENT UPON THE FORMAT OF THE SYSPRINT
     OUTPUT OF IDCAMS.

     THE GTABDATV AREA WILL HOLD 255 GENERATIONS OF A GDG WITH
     16 VOLSERS PER GENERATION OR MORE VOLSERS WITH
     LESS GENERATIONS. CHANGES TO THE BASE WILL NOT BE MADE
     IF MORE THAN 4095 VOLSERS ARE CATALOGUED IN ALL GENERATIONS.

     REQUESTS FOR LISTS OF GDG BASE ENTRIES AND GDGS CATALOGUED ARE
     DESCRIBED IN THE BANNER SENT TO THE USERS TERMINAL.  THE WORD
     'ALL' MAY BE USED INSTEAD OF 'NN' WITH THE 'LE' FORMAT.

     CHANGES TO THE GDG-BASE REQUIRE THE FOLLOWING FORMAT:
     GDG-BASE-NAME,LIMIT=NN
     FOLLOWED BY PROMPT TO THE USER FOR THE PASSWORD: MASTERPW

     NEW GDG BASE ENTRIES MAY BE CREATED WITH THE FORMAT:
     GDG-BASE-NAME,LIMIT=NN,NEW
     AND DOES NOT REQUIRE A PASSWORD.

     THIS MODULE WAS WRITTED FOR AND COMPILED WITH THE PL/1
     OPTOMIZING COMPLIER.

   MODULE HISTORY

     SUPPORT ADDED FOR 3480                              JWP 012888
     SUPPORT ADDED FOR ICF CAT DUP NAMES                 JWP 012888
     REMOVE 8 VOLSER PER GENERATION LIMIT                JWP 050190
     FIX OVERLAY BUG                                     JWP 050190
     SUPPORT ADDED FOR 3390                              JWP 050190
                                                                */

 DCL PLIXOPT CHAR(100) VAR INIT('ISA(0)') STATIC EXTERNAL;

 DCL IDCAMS  ENTRY OPTIONS(ASSEMBLER,INTER);

   /* FILE DECLARATIONS                                            */

 DCL GDGLOUT FILE RECORD SEQUENTIAL ENV(F RECSIZE(72) BLKSIZE(72));
 DCL GDGLINP FILE RECORD SEQUENTIAL ENV(F RECSIZE(72) BLKSIZE(72));
 DCL IDCAMIN FILE RECORD SEQUENTIAL ENV(F RECSIZE(80) BLKSIZE(80));
 DCL IDCAMOU FILE RECORD SEQUENTIAL;

   /* ENDFILE ON BLOCKS                                            */

 ON ENDFILE (IDCAMOU) GOTO ENDIDCOU;
 ON ENDFILE (GDGLINP) GOTO ENDJOB;

   /* CALL PARM LISTS FOR IDCAMS                                   */

 DCL OPTS           FIXED BIN(15,0)  INIT(0);

 DCL DDNAMLST       CHAR(100) VARYING  INIT(
   '                                IDCAMIN IDCAMOU ');
 DCL DDNAMLS2       CHAR(100) VARYING INIT(
   '                                IDCAMIN GDGLOUT ');

   /* IDCAMS CONTROL CARD SKELETONS                                */

 DCL IDCAMIN1       CHAR(80) STATIC INIT(
 ' LISTC ENT(                                        ) GDG ALL');
 DCL IDCAMIN2       CHAR(80) STATIC INIT(
 ' LISTC LVL(                                        ) VOL');
 DCL IDCAMIN3       CHAR(80) STATIC INIT(
 ' DEL (                                             ) NVSAM      ');
 DCL IDCAMIN4       CHAR(80) STATIC INIT(
 ' DEL (                                     ) GDG                ');
 DCL IDCAMIN5       CHAR(80) STATIC INIT(
 ' DEF GDG(NAME(                                    ) LIMIT(   ) SCR)');
 DCL IDCAMIN6       CHAR(80) STATIC INIT(
 ' DEF NVSAM(NAME(                                             ) - ');
 DCL IDCAMIN7       CHAR(80) STATIC INIT(' ');
 DCL IDCAMIN8       CHAR(80) STATIC INIT(' ');

   /* TERMINAL BANNER LINES                                        */

 DCL BANNER1        CHAR(72) STATIC INIT(
  'LISTGDG COMMAND');
 DCL BANNER1A       CHAR(72) STATIC INIT(
  'ENTER:  GDGNAME,LE  /  GDGNAME,LE,##  /  GDGNAME,LI   FOR QUERIES');
 DCL BANNER1B       CHAR(72) STATIC INIT(
  '      LE = LIST ENTRIES   /   LI = LIST BASE   /   ## = # ENTRIES');
 DCL BANNER1C       CHAR(72) STATIC INIT(
  'ENTER:  GDGNAME,LIMIT=##,NEW   TO CREATE NEW GDGBASE ENTRY       ');
 DCL BANNER3        CHAR(72) STATIC INIT(
  'ENTER:  GDGNAME,LE  /  ,LE,## /  ,LI  /  ,LIMIT=##,NEW  /  END ');
 DCL BANNER4        CHAR(72) STATIC INIT(
  'ENTER PASSWORD TO CHANGE GDG BASE                               ');

   /* TERMINAL ERROR MESSAGES                                      */

 DCL ERROR1         CHAR(72) STATIC INIT(
  '*** ERROR: INVALID NAME ENTERED OR MISSING COMMA ***');
 DCL ERROR2         CHAR(72) STATIC INIT(
  '*** ERROR: INVALID OPTION ENTERED ***');
 DCL ERROR3         CHAR(72) STATIC INIT(
  '*** ERROR: INVALID NUMBER ENTERED ***');
 DCL ERROR4         CHAR(72) STATIC INIT(
  '*** INVALID PASSWORD ENTERED - RESTART FROM BEGINING ***');
 DCL ERROR5         CHAR(72) STATIC INIT(
  '*** NO CHANGE MADE TO BASE * * INVALID DEVICE TYPE ENCOUNTERED ***');
 DCL ERROR5A        CHAR(72) STATIC INIT('**          ** ');
 DCL ERROR6         CHAR(72) STATIC INIT(
  '*** NO CHANGE MADE TO BASE * * OVER 4095 VOLUMES CATALOGUED ***');
 DCL ERROR7         CHAR(72) STATIC INIT(
  '*** ERROR * * * OVER 4095 VOLUMES CATALOGUED ***');

   /* WORK AREAS                                                   */

 DCL GDGLOUT1       CHAR(72) STATIC;         /* TERM OUTPUT WORK     */
 DCL GDGLINP1       CHAR(72) STATIC;         /* TERM INPUT WORK      */
 DCL ENTRIES        PIC'999' STATIC;         /* EXISTING LIMIT       */
 DCL NUMREQ         PIC'999' STATIC;         /* LE REQUEST LIMIT     */
 DCL NEWENT         PIC'999' STATIC;         /* NEW LIMIT FOR CHANGE */
 DCL IDCP           POINTER;
 DCL IDCWORK        CHAR(137) BASED(IDCP);
 DCL LIMIT          CHAR(3) STATIC INIT(' ');/* LIMIT FROM AMS       */
 DCL GDGNUM         CHAR(8) STATIC INIT(' ');/* GXXXXVYY FROM AMS    */
 DCL CREATE         CHAR(6) STATIC INIT(' ');/* CAT DATE FROM AMS    */
 DCL VOLSER         CHAR(6) STATIC INIT(' ');/* VOLSER FROM AMS      */
 DCL DEVTYP         CHAR(8) STATIC INIT(' ');/* DEVTYPE FROM AMS     */
 DCL DEVTYP6        CHAR(6) STATIC          ;/* DEVTYPE FROM FNDDEV  */
 DCL GTABINXX       FIXED BIN (31,0) STATIC INIT (0); /* INDEX TO    */
                                             /* GTABINX AND GTABDLL  */
 DCL FIRST          FIXED BIN (31,0) STATIC INIT(0);
 DCL TABFULL        FIXED BIN (31,0) STATIC INIT(0); /* TABLE FULL   */
 DCL GTEMPNXX       FIXED BIN (31,0) STATIC; /* TEMP INDEX TO GTABINX*/
 DCL GTEMPNXY       FIXED BIN (31,0) STATIC; /* TEMP INDEX TO GTABINX*/
 DCL GTABSUBS       FIXED BIN (31,0) STATIC; /* TEMP START OF ENTRY  */
 DCL NUMRESP        FIXED BIN (31,0) STATIC; /* NUMBER OF RESP GIVEN */
 DCL DEVSUBS        FIXED BIN (31,0) STATIC; /* WORK FOR RECAT SUBSTR*/
 DCL TEMPDLL        FIXED BIN (31,0) STATIC; /* TEMP LENGTH OF ENTRY */
 DCL NAMELEN        FIXED BIN (31,0) STATIC; /* LEN OF GDG-BASE NAME */
 DCL GTABINX  (256) FIXED BIN (31,0) STATIC; /* START OF ENTRY       */
 DCL GTABDLL  (256) FIXED BIN (31,0) STATIC; /* LENGTH OF ENTRY      */
 DCL (I,J)          FIXED BIN (31,0) STATIC;
 DCL GTABNAM   (256) CHAR(8)         STATIC; /* SAVE AREA GEN NAMES  */
 DCL GTABCRT   (256) CHAR(6)         STATIC; /* SAVE AREA CREATE DATE*/
 DCL GTABDATV (4095) CHAR(6)         STATIC; /* SAVE AREA VOLSERS    */
 DCL GTABDATD (4095) CHAR(8)         STATIC; /* SAVE AREA DEVTYPES   */
                       /* NUMDEV IS NUMBER OF DEVICE TYPES IN DEVTAB */
 DCL NUMDEV         FIXED BIN (31,0) STATIC INIT(10);
 DCL DEVTAB (NUMDEV) CHAR(12)     AUTOMATIC INIT('2009  3330  ',
                                                 '200A  3340  ',
                                                 '200B  3350  ',
                                                 '200C  3375  ',
                                                 '200D  3330-1',
                                                 '200E  3380  ',
                                                 '200F  3390  ',
                                                 '8001  2400  ',
                                                 '8003  3400-6',
                                                 '8080  3480  ');

 DCL MODAY (2,13) FIXED BIN (15,0) STATIC INIT(
  0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365,
  0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366 );
 DCL MON (12) CHAR (3) STATIC INIT('JAN','FEB','MAR','APR','MAY',
              'JUN','JUL','AUG','SEP','OCT','NOV','DEC');
 DCL MONTHC   CHAR (3) STATIC ;
 DCL YEARC    CHAR (2) STATIC ;
 DCL DAYC     CHAR (2) STATIC ;
 DCL YEARB    FIXED BIN (15,0) STATIC;
 DCL DAYB     FIXED BIN (15,0) STATIC;
 DCL JDAYB    FIXED BIN (15,0) STATIC;
 DCL JDAYC    CHAR (3) STATIC ;
 DCL LEAP     FIXED BIN (15,0) STATIC;
 DCL GNUMB    FIXED BIN (15,0) STATIC;
 DCL GNUMC    CHAR (3) STATIC ;

 DCL (ONCHAR,ONCODE,SUBSTR,BIN,CHAR,MOD) BUILTIN;
   ON CONVERSION BEGIN;       /* REPLACE ALPHA CHARS WITH ZEROS     */
     IF ONCODE = 612 THEN DO; /* IF CONVERSION ERROR                */
       ONCHAR = '0';
     END;
   END;

   OPEN FILE (GDGLOUT) OUTPUT;/* WRITE FULL BANNER LINES FIRST TIME */
   GDGLOUT1 = ' ';
   WRITE FILE (GDGLOUT) FROM (GDGLOUT1);
   WRITE FILE (GDGLOUT) FROM (BANNER1);
   WRITE FILE (GDGLOUT) FROM (BANNER1A);
   WRITE FILE (GDGLOUT) FROM (BANNER1B);
   WRITE FILE (GDGLOUT) FROM (BANNER1C);
   GDGLOUT1 = ' ';
   WRITE FILE (GDGLOUT) FROM (GDGLOUT1);
   CLOSE FILE (GDGLOUT);

 SREQIN1:
   DO I = 1 TO 256;           /* CLEAR INDEX POINTERS               */
     GTABINX(I) = 0;
     GTABDLL(I) = 0;
   END;
   GTABINX(1) = 1;            /* SET TO POINT TO 1ST OF GTABDATV    */
   GTABINXX   = 0;
   NUMREQ = 0;
   NEWENT = 0;
   GNUMB  = 0;
   LIMIT = ' ';
   IF FIRST = 0 THEN GOTO SREQIN3;

   OPEN FILE (GDGLOUT) OUTPUT;

 SREQIN2:                     /* WRITE SHORT BANNER AFTER 1ST TIME  */
   GDGLOUT1 = ' ';
   WRITE FILE (GDGLOUT) FROM (GDGLOUT1);
   WRITE FILE (GDGLOUT) FROM (BANNER3);
   GDGLOUT1 = ' ';
   WRITE FILE (GDGLOUT) FROM (GDGLOUT1);
   CLOSE FILE (GDGLOUT);

 SREQIN3:                     /* READ REQUEST                       */
   OPEN FILE (GDGLINP) INPUT;
   GDGLINP1 = ' ';
   READ FILE (GDGLINP) INTO (GDGLINP1);
   CLOSE FILE (GDGLINP);

   IF SUBSTR(GDGLINP1,1,4) = 'END '  ×
      SUBSTR(GDGLINP1,1,2) = 'E '    ×
      SUBSTR(GDGLINP1,1,5) = 'QUIT ' ×
      SUBSTR(GDGLINP1,1,2) = 'Q '   THEN GOTO ENDJOB;

   DO I = 1 TO 36;            /* PARSE FOR NAME OF GDG-BASE         */
     IF SUBSTR(GDGLINP1,I,1) = ',' ×
        SUBSTR(GDGLINP1,I,1) = ' ' THEN DO;
       NAMELEN = I-1;
       SUBSTR(IDCAMIN1,12,35)      = ' ';
       SUBSTR(IDCAMIN1,12,NAMELEN) = SUBSTR(GDGLINP1,1,NAMELEN);
       SUBSTR(IDCAMIN2,12,35)      = ' ';
       SUBSTR(IDCAMIN2,12,NAMELEN) = SUBSTR(GDGLINP1,1,NAMELEN);
       GOTO EREQIN1;
     END;
   END;
   OPEN FILE (GDGLOUT) OUTPUT;
   WRITE FILE (GDGLOUT) FROM (ERROR1);
   GOTO SREQIN2;

 EREQIN1:                     /* PARSE FOR OPERAND                  */
   IF SUBSTR(GDGLINP1,I,1) = ' ' THEN DO;
     NUMREQ = 0;
     GOTO EREQIN2;
   END;
   I = I + 1;                 /* IF LIST ENTRIES WITH SUBOPERAND    */
   IF SUBSTR(GDGLINP1,I,3) = 'LE,' THEN DO;
     IF SUBSTR(GDGLINP1,I+3,3) = 'ALL' THEN DO;
       NUMREQ = 256;
       GOTO EREQIN2;
     END;
     I = I + 3;
     DO J = 1 TO 3;           /* FIND HOW MANY ENTRIES TO LIST      */
       IF SUBSTR(GDGLINP1,I+J,1) = ' ' THEN DO;
         NUMREQ = SUBSTR(GDGLINP1,I,J);
         GOTO EREQIN2;
       END;
     END;
     OPEN FILE (GDGLOUT) OUTPUT;
     WRITE FILE (GDGLOUT) FROM (ERROR3);
     GOTO SREQIN2;
   END;
   IF SUBSTR(GDGLINP1,I,2) = 'LE' THEN DO;
     NUMREQ = 5;              /* IF LE ONLY THEN DEFAULT TO LIST 5  */
     GOTO EREQIN2;
   END;
                              /* IF LIMIT - SETUP FOR CHANGE BASE   */
   IF SUBSTR(GDGLINP1,I,6) = 'LIMIT=' THEN DO;
     I = I + 6;
     DO J = 1 TO 3;
       IF SUBSTR(GDGLINP1,I+J,1) = ' ' ×
          SUBSTR(GDGLINP1,I+J,1) = ',' THEN DO;
         NEWENT = SUBSTR(GDGLINP1,I,J);
         IF NEWENT = 0 × NEWENT > 255 THEN GOTO INVNEW;
                              /* IF NEW THEN GO TO SETUP FOR CREATE */
         IF SUBSTR(GDGLINP1,I+J,4) = ',NEW' THEN GOTO NEWGDG;
                              /* IF CHANGE THEN REQUEST PASSWORD    */
         OPEN FILE (GDGLOUT) OUTPUT;
         WRITE FILE (GDGLOUT) FROM (BANNER4);
         CLOSE FILE (GDGLOUT);
         OPEN FILE (GDGLINP) INPUT;
         READ FILE (GDGLINP) INTO (GDGLINP1);
         CLOSE FILE (GDGLINP);
         IF SUBSTR(GDGLINP1,1,8) ^= 'MASTERPW' THEN DO;
           OPEN FILE (GDGLOUT) OUTPUT;
           WRITE FILE (GDGLOUT) FROM (ERROR4);
           GOTO SREQIN2;
         END;
         GOTO EREQIN2;
       END;
     END;
 INVNEW:
     OPEN FILE (GDGLOUT) OUTPUT;
     WRITE FILE (GDGLOUT) FROM (ERROR3);
     GOTO SREQIN2;
   END;
                              /* IF LI THEN SETUP FOR LIST BASE ONLY*/
   IF SUBSTR(GDGLINP1,I,2) = 'LI' THEN DO;
     NUMREQ = 0;
     GOTO EREQIN2;
   END;

   OPEN FILE (GDGLOUT) OUTPUT;
   WRITE FILE (GDGLOUT) FROM (ERROR2);
   GOTO SREQIN2;

 EREQIN2:                     /* WRITE REQUEST TO TEMP FILE FOR AMS */
   OPEN FILE (IDCAMIN) OUTPUT;
   WRITE FILE (IDCAMIN) FROM (IDCAMIN1);
   WRITE FILE (IDCAMIN) FROM (IDCAMIN2);
   CLOSE FILE (IDCAMIN);

   FETCH IDCAMS;              /* LOAD AND CALL AMS                  */
   CALL IDCAMS (OPTS,DDNAMLST);
   RELEASE IDCAMS;
   OPEN FILE (IDCAMOU) INPUT;

 READIDCW:                    /* READ AND PARSE RESPONSE FROM AMS   */
   READ FILE (IDCAMOU) SET(IDCP);
   IF LIMIT = ' ' THEN DO;
     IF SUBSTR(IDCWORK,9,5) = 'LIMIT' THEN DO;
       LIMIT = SUBSTR(IDCWORK,30,3);
       DO I = 1 TO 3;         /* CHANGE - TO 0 IF LIMIT < 100       */
         IF SUBSTR(LIMIT,I,1) = '-' THEN SUBSTR(LIMIT,I,1) = '0';
       END;
     END;
   END;
   ELSE DO;                   /* IF GDG NAME                        */
     IF SUBSTR(IDCWORK,2,7) = 'NONVSAM' THEN DO;
       GDGNUM = SUBSTR(IDCWORK,18+NAMELEN+1,8);
       IF SUBSTR(GDGNUM,1,1)              = 'G' &
          SUBSTR(GDGNUM,2,1)             >= '0' &
          SUBSTR(GDGNUM,3,1)             >= '0' &
          SUBSTR(GDGNUM,4,1)             >= '0' &
          SUBSTR(GDGNUM,5,1)             >= '0' &
          SUBSTR(GDGNUM,6,1)              = 'V' &
          SUBSTR(GDGNUM,7,1)             >= '0' &
          SUBSTR(GDGNUM,8,1)             >= '0' THEN DO;
         IF GTABINXX = 0 THEN DO;
           GTABSUBS = 1;        /* SET POINTER FIRST TIME TO 1       */
         END;
         ELSE DO;               /* CALC POINTER TO NEXT FREE SLOT    */
           GTABSUBS = GTABSUBS + GTABDLL(GTABINXX);
         END;
         GTABINXX = GTABINXX + 1;      /* SET INDEX FOR ENTRY        */
         GTABINX(GTABINXX) = GTABSUBS; /* SET START OF ENTRY         */
         GTABNAM(GTABINXX) = GDGNUM;   /* SAVE GXXXVYY IN TABLE      */
         VOLSER = '      ';            /* FLAG GOOD INDEX            */
       END;
       ELSE DO;
         VOLSER = '@%#&$!';            /* FLAG OTHER INDEX           */
       END;
     END;
                              /* SAVE CATALOG - CREATE DATE          */
     IF SUBSTR(IDCWORK,9,8) = 'OWNER-ID' &
        VOLSER ^= '@%#&$!' THEN DO;
       CREATE = SUBSTR(IDCWORK,56,6);
       GTABCRT(GTABINXX) = CREATE; /* SAVE CREATE DATE IN TABLE     */
     END;
                              /* SAVE EACH VOLSER/DEVICE TYPE       */
     IF SUBSTR(IDCWORK,9,6) = 'VOLSER' &
        VOLSER ^= '@%#&$!' THEN DO;
       VOLSER = SUBSTR(IDCWORK,27,6);
       DEVTYP = SUBSTR(IDCWORK,53,8);
       GTEMPNXX = GTABSUBS+GTABDLL(GTABINXX); /* CALC NEW SLOT      */
       IF GTEMPNXX >= 4095 THEN DO;
         TABFULL = 1;
         GOTO ENDIDCOU;
       END;
       GTABDATV(GTEMPNXX) = VOLSER; /* SAVE VOLSER IN TABLE         */
       GTABDATD(GTEMPNXX) = DEVTYP; /* SAVE DEVTYP IN TABLE         */
       GTABDLL(GTABINXX) = GTABDLL(GTABINXX) + 1; /* RESET LENGTH   */
     END;
   END;
 GOTO READIDCW;

 ENDIDCOU:                    /* EOF ADDR ON IDCAMOU FILE           */
   CLOSE FILE (IDCAMOU);
   OPEN FILE (GDGLOUT) OUTPUT;
   GDGLOUT1 = ' ';
   WRITE FILE (GDGLOUT) FROM (GDGLOUT1);
   IF LIMIT = ' ' THEN DO;    /* NO LIMIT FOUND - NOT GDG-BASE      */
     SUBSTR(GDGLOUT1,1,3) = '***';
     SUBSTR(GDGLOUT1,7,35)  = SUBSTR(IDCAMIN1,12,35);
     SUBSTR(GDGLOUT1,45,12) = 'IS NOT A GDG';
     WRITE FILE (GDGLOUT) FROM (GDGLOUT1);
     GOTO ENDRESP;
   END;
                              /* SET UP LIST BASE ENTRY LINE        */
   SUBSTR(GDGLOUT1,1,5)   = 'BASE:';
   SUBSTR(GDGLOUT1,7,35)  = SUBSTR(IDCAMIN1,12,35);
   SUBSTR(GDGLOUT1,44,6)  = 'LIMIT:';
   SUBSTR(GDGLOUT1,51,3)  = LIMIT;
   SUBSTR(GDGLOUT1,58,8)  = 'ENTRIES:';
   ENTRIES                = GTABINXX;
   SUBSTR(GDGLOUT1,67,3)  = ENTRIES  ;
   WRITE FILE (GDGLOUT) FROM (GDGLOUT1);
   GDGLOUT1 = ' ';
   IF TABFULL = 1 THEN WRITE FILE (GDGLOUT) FROM (ERROR7);

   IF NEWENT ^= 0 THEN GOTO UNCAT;

   WRITE FILE (GDGLOUT) FROM (GDGLOUT1);
   NUMRESP = 0;
                           /* WRITE THE TABLE BACK IN INVERTED ORDER */
   DO GTEMPNXX = GTABINXX TO 1 BY -1;
     IF NUMREQ = NUMRESP THEN GOTO ENDRESP;
     NUMRESP = NUMRESP + 1;
                              /* SET START OF ENTRY FROM INDEX      */
     GTEMPNXY = GTABINX(GTEMPNXX);
     SUBSTR(GDGLOUT1,2,4)   = 'GEN:';
     SUBSTR(GDGLOUT1,7,8)   = GTABNAM(GTEMPNXX);
     GNUMC = SUBSTR(CHAR(GNUMB,9),7,3);
     SUBSTR(GDGLOUT1,18,3) = GNUMC;
     SUBSTR(GDGLOUT1,21,1) = ')';
     IF      GNUMB  =  0 THEN SUBSTR(GDGLOUT1,19,1) = '(';
     ELSE IF GNUMB <=  9 THEN SUBSTR(GDGLOUT1,18,2) = '(-';
     ELSE IF GNUMB <= 99 THEN SUBSTR(GDGLOUT1,17,2) = '(-';
     ELSE                     SUBSTR(GDGLOUT1,16,2) = '(-';
     GNUMB = GNUMB + 1;
     SUBSTR(GDGLOUT1,25,5)  = 'DATE:';
     CREATE = GTABCRT(GTEMPNXX);
     YEARC = SUBSTR(CREATE,1,2);
     JDAYC = SUBSTR(CREATE,4,3);
     YEARB = BIN(YEARC,15);
     JDAYB = BIN(JDAYC,15);
     LEAP = 1;
     IF MOD(YEARB,4) = 0 & MOD(YEARB,100) ^= 0 THEN LEAP = 2;
     DO I = 2 TO 13;
       IF MODAY(LEAP,I) >= JDAYC THEN DO;
         DAYB = JDAYB - MODAY(LEAP,I-1);
         DAYC = SUBSTR(CHAR(DAYB,9),8,2);
         IF SUBSTR(DAYC,1,1) = ' ' THEN SUBSTR(DAYC,1,1) = '0';
         MONTHC = MON(I-1);
         GOTO DATEFND;
       END;
     END;
 DATEFND:
     SUBSTR(GDGLOUT1,31,2)  = DAYC;
     SUBSTR(GDGLOUT1,33,3)  = MONTHC;
     SUBSTR(GDGLOUT1,36,2)  = YEARC;
     SUBSTR(GDGLOUT1,40,4)  = 'VOL:';
     SUBSTR(GDGLOUT1,45,6)  = GTABDATV(GTEMPNXY);
     SUBSTR(GDGLOUT1,53,4)  = 'DEV:';
     CALL FINDDEV;
     SUBSTR(GDGLOUT1,58,6)  = DEVTYP6;
     WRITE FILE (GDGLOUT) FROM (GDGLOUT1);
     GDGLOUT1 = ' ';
     TEMPDLL = 1 ;
                              /* PICK UP ADDITIONAL VOLSER/DEVICES  */
     DO WHILE (GTABDLL(GTEMPNXX) ^= TEMPDLL);
       GTEMPNXY = GTEMPNXY + 1;
       SUBSTR(GDGLOUT1,45,6)  = GTABDATV(GTEMPNXY);
       CALL FINDDEV;
       SUBSTR(GDGLOUT1,58,6)  = DEVTYP6;
       WRITE FILE (GDGLOUT) FROM (GDGLOUT1);
       GDGLOUT1 = ' ';
       TEMPDLL = TEMPDLL + 1;
     END;
   END;
   CLOSE FILE (GDGLOUT);
   GOTO ENDRESP;

                              /* BUILD THE AMS CONTROL CARDS TO     */
                              /* UNCAT EACH GEN, DELETE THE BASE,   */
                              /* REBUILD THE BASE WITH NEW LIMIT,   */
 UNCAT:                       /* AND RECAT EACH GEN THAT WILL FIT   */
   CLOSE FILE (GDGLOUT);
   OPEN FILE (IDCAMIN) OUTPUT;
   IF TABFULL = 1 THEN GOTO ABORT2; /* DONT MESS UP WITH OVERFLOWS  */
   SUBSTR(IDCAMIN3,7,44) = ' ';
   SUBSTR(IDCAMIN3,7,NAMELEN) = SUBSTR(IDCAMIN1,12,NAMELEN);
                              /* SET UP FOR UNCAT OF EACH GEN       */
   DO GTEMPNXX = 1 TO GTABINXX;
     SUBSTR(IDCAMIN3,NAMELEN+7,1) = '.';
     SUBSTR(IDCAMIN3,NAMELEN+8,8) = GTABNAM(GTEMPNXX);
     SUBSTR(IDCAMIN3,60,4)        = 'NSCR';
     I = GTABINXX - GTEMPNXX;
                              /* IF DECREMENTING LIMIT AND GENS TO  */
     IF I >= NEWENT THEN DO;  /* BE DROPPED, SCRATCH IF ON DASD     */
       GTEMPNXY = GTABINX(GTEMPNXX);
       IF SUBSTR(GTABDATD(GTEMPNXY),5,2) = '20' THEN
         SUBSTR(IDCAMIN3,60,4)        = '    ';
     END;
     WRITE FILE (IDCAMIN) FROM (IDCAMIN3);
   END;
                              /* SET UP TO UNCAT BASE ENTRY         */
   SUBSTR(IDCAMIN4,7,35)      = ' ';
   SUBSTR(IDCAMIN4,7,NAMELEN) = SUBSTR(IDCAMIN1,12,NAMELEN);
   WRITE FILE (IDCAMIN) FROM (IDCAMIN4);
                              /* SET UP TO BUILD NEW BASE ENTRY     */
   SUBSTR(IDCAMIN5,15,35)      = ' ';
   SUBSTR(IDCAMIN5,15,NAMELEN) = SUBSTR(IDCAMIN1,12,NAMELEN);
   SUBSTR(IDCAMIN5,59,3)       = NEWENT;
   WRITE FILE (IDCAMIN) FROM (IDCAMIN5);
   SUBSTR(IDCAMIN6,17,44) = ' ';
   SUBSTR(IDCAMIN6,17,NAMELEN) = SUBSTR(IDCAMIN1,12,NAMELEN);
                              /* SET UP TO RECAT EACH GENERATION    */
   DO GTEMPNXX = 1 TO GTABINXX;
     I = GTABINXX - GTEMPNXX;
                              /* DONT RECAT IF IT WONT FIT          */
     IF I >= NEWENT THEN GOTO NORECAT;
     SUBSTR(IDCAMIN6,NAMELEN+17,1) = '.';
     SUBSTR(IDCAMIN6,NAMELEN+18,8) = GTABNAM(GTEMPNXX);
     WRITE FILE (IDCAMIN) FROM (IDCAMIN6);
     GTEMPNXY = GTABINX(GTEMPNXX);
     TEMPDLL = 0;
     IDCAMIN7 = ' ';
     SUBSTR(IDCAMIN7,2,5) = 'DEVT(';
     DEVSUBS = 7;
     DO WHILE (GTABDLL(GTEMPNXX) ^= TEMPDLL);
       CALL FINDDEV;          /* FIND DEVICE TYPE IN TABLE          */
       SUBSTR(IDCAMIN7,DEVSUBS,6)  = DEVTYP6;
       GTEMPNXY = GTEMPNXY + 1;
       IF DEVSUBS >= 56 THEN DO;
         IF GTABDLL(GTEMPNXX) > TEMPDLL THEN DO;
           SUBSTR(IDCAMIN7,63,1) = '-';
           WRITE FILE (IDCAMIN) FROM (IDCAMIN7);
           IDCAMIN7 = ' ';
           DEVSUBS = 0;
         END;
       END;
       TEMPDLL = TEMPDLL + 1;
       DEVSUBS = DEVSUBS + 7;
     END;
     SUBSTR(IDCAMIN7,DEVSUBS,3) = ') -';
     WRITE FILE (IDCAMIN) FROM (IDCAMIN7);
     GTEMPNXY = GTABINX(GTEMPNXX);
     TEMPDLL = 0;
     IDCAMIN8 = ' ';
     SUBSTR(IDCAMIN8,2,5) = ' VOL(';
     DEVSUBS = 7;
     DO WHILE (GTABDLL(GTEMPNXX) ^= TEMPDLL);
       SUBSTR(IDCAMIN8,DEVSUBS,6)  = GTABDATV(GTEMPNXY);
       GTEMPNXY = GTEMPNXY + 1;
       IF DEVSUBS >= 56 THEN DO;
         IF GTABDLL(GTEMPNXX) > TEMPDLL THEN DO;
           SUBSTR(IDCAMIN8,63,1) = '-';
           WRITE FILE (IDCAMIN) FROM (IDCAMIN8);
           IDCAMIN8 = ' ';
           DEVSUBS = 0;
         END;
       END;
       TEMPDLL = TEMPDLL + 1;
       DEVSUBS = DEVSUBS + 7;
     END;
     SUBSTR(IDCAMIN8,DEVSUBS,3) = ') )';
     WRITE FILE (IDCAMIN) FROM (IDCAMIN8);

 NORECAT:
   END;

 CALLAMS:                     /* CALL IDCAMS FOR CHANGE             */
   CLOSE FILE (IDCAMIN);

   FETCH IDCAMS;
   CALL IDCAMS (OPTS,DDNAMLS2); /* CALL WITH SYSPRINT TO TERMINAL   */
   RELEASE IDCAMS;

   GOTO ENDRESP;

 NEWGDG:                      /* SET UP FOR CREATE NEW BASE         */
   OPEN FILE (IDCAMIN) OUTPUT;
   SUBSTR(IDCAMIN5,15,35)      = ' ';
   SUBSTR(IDCAMIN5,15,NAMELEN) = SUBSTR(IDCAMIN1,12,NAMELEN);
   SUBSTR(IDCAMIN5,59,3)       = NEWENT;
   WRITE FILE (IDCAMIN) FROM (IDCAMIN5);
   GOTO CALLAMS;

 ABORT1:
   CLOSE FILE (IDCAMIN);
   OPEN FILE (GDGLOUT) OUTPUT;
   WRITE FILE (GDGLOUT) FROM (ERROR5);
   SUBSTR(ERROR5A,4,8) =  GTABDATD(GTEMPNXY);
   WRITE FILE (GDGLOUT) FROM (ERROR5A);

 ABORT1A:
   GDGLOUT1 = ' ';
   SUBSTR(GDGLOUT1,1,8) = '* * FOR:';
   SUBSTR(GDGLOUT1,10,NAMELEN+9) = SUBSTR(IDCAMIN6,17,NAMELEN+9);
   WRITE FILE (GDGLOUT) FROM (GDGLOUT1);
   CLOSE FILE (GDGLOUT);
   GOTO ENDRESP;

 ABORT2:
   CLOSE FILE (IDCAMIN);
   OPEN FILE (GDGLOUT) OUTPUT;
   WRITE FILE (GDGLOUT) FROM (ERROR6);
   GOTO ABORT1A;

 ENDRESP:
   FIRST = 1;
   GOTO SREQIN1;

 FINDDEV: PROC;
   DO I = 1 TO NUMDEV;    /* FIND DEVICE TYPE IN TABLE          */
     IF SUBSTR(DEVTAB(I),1,4)  = SUBSTR(GTABDATD(GTEMPNXY),5,4)
       THEN DO;           /* FILL IN DEVICE TYPE IN AMS CARD    */
         DEVTYP6 = SUBSTR(DEVTAB(I),7,6);
         RETURN;
     END;
   END;
   GOTO ABORT1;
 END;

 ENDJOB:
   END;
