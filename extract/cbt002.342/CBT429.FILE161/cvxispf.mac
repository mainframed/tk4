         TITLE '   C V X - ISPF VERSION '
*-------------------------------------------------------------------*
*        'CVXISPF' - CONVERT DECIMAL TO HEX INTO AN ISPF VARIABLE.
*-------------------------------------------------------------------*
         SPACE
*-------------------------------------------------------------------*
*   WRITTEN BY BILL GODFREY, PRC INC.
*        (PRC INC. OF MCLEAN, VA, WAS FORMERLY PLANNING RESEARCH CORP.)
*   CURRENT INSTALLATION:
*        NOAA (NATIONAL OCEANIC AND ATMOSPHERIC ADMINISTRATION),
*        5200 AUTH ROAD, CAMP SPRINGS, MARYLAND 20746
*   DATE WRITTEN. OCT 17 1985.
*   DATE UPDATED. APR 25 1991.
*   ATTRIBUTES. RE-ENTRANT.
*-------------------------------------------------------------------*
         SPACE
*-------------------------------------------------------------------*
* DISCLAIMER: NO GUARANTEE; NO WARRANTY; INSTALL/USE AT YOUR OWN RISK.
* DESCRIPTION.
*   THIS TSO COMMAND DISPLAYS THE HEX VALUE OF A DECIMAL NUMBER
*   OR AN EBCDIC STRING.
*  SYNTAX.
*   FIRST OPERAND: 1 TO 9 DECIMAL DIGITS
*   OPTIONAL KEYWORD: C - CHARACTER TO HEX.
*  LOG OF CHANGES.
*   06NOV88 - CHANGE MAXLNTH FROM 8 TO 11 (11 CHARS IN -2147483647)
*             NOTE: IF VALUE > 2,147,483,647 (HEX 7FFFFFFF)
*                   OR      < -2,147,483,648 (HEX 80000000)
*                   THEN YOU GET AN ERROR MESSAGE.
*        25APR91 - NO CODE CHANGES. MINOR CHANGES TO COMMENTS.
*        15JUL99 - REWORKED CODE TO DOCUMENT MORE, ADD DSECT, CLEAN
*                  CODE FOR DISTRIBUTION.  MANY THANKS TO BILL.
*        16JUL99 - REWORKED CODE TO PUT ANSWER INTO AN ISPF VARIABLE
*                  VERSUS BEING RETURNED VIA TSO PUTLINE.
*-------------------------------------------------------------------*
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE
CVX      AMODE 24
CVX      RMODE 24
CVX      CSECT
         SAVE  (14,12),,CVX_&SYSDATE._&SYSTIME
         LR    R12,R15
         USING CVX,R12
         LR    R2,R1
         USING CPPL,R2
         L     R0,@SIZE
         GETMAIN R,LV=(0)
         ST    R13,4(,R1)
         ST    R1,8(,R13)
         LR    R13,R1
         USING @DATA,R13
         SPACE
*----------------------------------------------------------*
*        SET UP IOPL FOR PUTLINE
*----------------------------------------------------------*
         SPACE
         LA    R15,MYIOPL
         USING IOPL,R15
         MVC   IOPLUPT(4),CPPLUPT
         MVC   IOPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,IOPLECB
         XC    MYECB,MYECB
         LA    R0,MYPTPB
         ST    R0,IOPLIOPB
         DROP  R15
         SPACE
*----------------------------------------------------------*
*        SET UP PPL FOR PARSE
*----------------------------------------------------------*
         SPACE
         LA    R15,MYPPL
         USING PPL,R15
         MVC   PPLUPT(4),CPPLUPT
         MVC   PPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,PPLECB
         XC    MYECB,MYECB
         L     R0,=A(CVXPCL)
         ST    R0,PPLPCL
         LA    R0,MYANS
         ST    R0,PPLANS
         XC    MYANS,MYANS
         MVC   PPLCBUF(4),CPPLCBUF
         LA    R0,MYUWA
         ST    R0,PPLUWA
         DROP  R15                 PPL
         SPACE 1
*----------------------------------------------------------*
*        CALL THE PARSE SERVICE ROUTINE
*----------------------------------------------------------*
         SPACE 1
         LR    R1,R15              POINT TO PPL
         L     R15,16              CVTPTR
         TM    524(R15),X'80'     IF HI ORDER BIT NOT ON
         BNO   PARSELNK               THEN DO LINK, NOT CALL
         L     R15,524(,R15)       CVTPARS
         BALR  R14,R15             CALL IKJPARS
         B     PARSEEXT            SKIP AROUND LINK
PARSELNK EQU   *
         LINK  EP=IKJPARS
PARSEEXT EQU   *
         SPACE
         L     R3,MYANS
         USING IKJPARMD,R3
         SPACE
*----------------------------------------------------------*
*         GET FIRST POSITIONAL OPERAND
*----------------------------------------------------------*
         SPACE
         DROP  R2                  CPPL   (R2 CHANGED BY TRT)
         L     R4,POSIT1           REG 1  --> OPERAND
         LH    R14,POSIT1+4        REG 14  =  LENGTH OF OPERAND
         CLI   TYPEKW+1,2          C SPECIFIED
         BE    CHARCVX
         SPACE
*----------------------------------------------------------*
*        SINCE THE ABSOLUTE VALUE OF THE LARGEST NEGATIVE NUMBER
*        IS ONE GREATER THAN THE LARGEST POSITIVE NUMBER, AND
*        SINCE WE BUILD OUR RESULT BY MAKING A POSITIVE NUMBER
*        AND THEN NEGATING IT, WE MAKE A SPECIAL TEST FOR THE
*        LARGEST NEGATIVE NUMBER AND BYPASS THE NORMAL LOGIC.
*----------------------------------------------------------*
         SPACE
         L     R7,=A(X'80000000')  LARGEST NEGATIVE NUMBER
         CH    R14,=H'11'          IF LENGTH = 11
         BNE   NOTSPEC                AND
         CLC   0(11,R4),=C'-2147483648' LARGEST NEGATIVE NUMBER
         BE    GOTVAL                 THEN USE R7
         SPACE
*----------------------------------------------------------*
*        THE NEXT 3 INSTRUCTIONS TURN OFF FIXED-POINT OVERFLOW
*        INTERRUPTS (S0C8 ABENDS) WHICH COULD OCCUR ON THE 'AR'
*        INSTRUCTION LATER ON.  IT MAY NOT REALLY BE NECESSARY,
*        BECAUSE THE MASK BIT WAS ALREADY OFF IN TESTS WE RAN,
*        BUT WE DO IT ANYWAY JUST TO BE SURE.
*----------------------------------------------------------*
         SPACE
NOTSPEC  EQU   *
         BALR  R5,0                GET PROGRAM MASK
         N     R5,=A(X'F7FFFFFF')  TURN OFF FIXED POINT OVERFLOW
         SPM   R5                  SET PROGRAM MASK
         SPACE
         SR    R5,R5
         SR    R6,R6               INITIALIZE THE VALUE
         SR    R7,R7               INITIALIZE THE VALUE
         MVI   SIGN,C'+'
         TRT   0(1,R4),NUMERIC
         BZ    NOSIGN
         BCT   R14,CKSIGN
         B     ERROR               ONLY ONE BYTE, NOT NUMERIC
         SPACE
CKSIGN   EQU   *
         CLI   0(R4),C'+'
         BE    OKSIGN
         CLI   0(R4),C'-'
         BNE   ERROR               FIRST CHAR NOT A SIGN, NOT NUMERIC
OKSIGN   EQU   *
         MVC   SIGN,0(R4)
         LA    R4,1(,R4)           POINT TO NEXT CHARACTER
NUMLOOP  EQU   *
         TRT   0(1,R4),NUMERIC
         BNZ   ERROR
NOSIGN   EQU   *
         IC    R5,0(,R4)
         N     R5,=A(X'0000000F')  CHANGE F0-F9 TO 00-09
         M     R6,=F'10'
         LTR   R7,R7               IS RESULT GREATER THAN 31 BITS
         BM    ERROR
         LTR   R6,R6               IS RESULT GREATER THAN 32 BITS
         BNZ   ERROR
         AR    R7,R5
         BO    ERROR               BRANCH IF OVERFLOW
         LA    R4,1(,R4)           POINT TO NEXT CHARACTER
         BCT   R14,NUMLOOP
         CLI   SIGN,C'-'
         BNE   *+6
         LNR   R7,R7               CONVERT TO MINUS
         SPACE
GOTVAL   EQU   *
         ST    R7,DOUBLE
         LA    R1,DOUBLE
         LA    R0,4
         LA    R15,LINE
         BAL   R14,HEX
         LA    R0,8
         B     PUTLN
         SPACE
CHARCVX  EQU   *
         LR    R1,R4
         LR    R0,R14
         CH    R0,=H'128'
         BNH   *+8
         LH    R0,=H'128'
         LA    R15,LINE
         BAL   R14,HEX
         LA    R1,LINE
         LR    R0,R15
         SR    R0,R1
         SPACE
*----------------------------------------------------------*
*         DISPLAY THE RESULT
*----------------------------------------------------------*
         SPACE
PUTLN    EQU   *
         LA    R1,LINE
PUTRES   EQU   *
         AH    R0,=H'4'
         STH   R0,LINESEG
         XC    LINESEG+2(2),LINESEG+2
         SPACE
         BAL   R14,PUTLINE
         SPACE
         B     EXIT0
         SPACE
ERROR    EQU   *
         MVC   LINE(5),=C'ERROR'
         LA    R0,5
         B     PUTRES
         SPACE
*----------------------------------------------------------*
*        THIS ROUTINE CONVERTS DATA TO HEX
*----------------------------------------------------------*
         SPACE
HEX      EQU   *
         MVC   1(1,R15),0(R1)      MOVE BYTE
         UNPK  0(3,R15),1(2,R15)   UNPACK
         TR    0(2,R15),HEXTRAN-240
         LA    R15,2(,R15)         INCREMENT OUTPUT PTR
         LA    R1,1(,R1)           INCREMENT INPUT PTR
         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP
         MVI   0(R15),C' '         BLANK THE TRAILING BYTE
         BR    R14                 RETURN TO CALLER
HEXTRAN  DC    C'0123456789ABCDEF' TRANSLATE TABLE
         SPACE
*----------------------------------------------------------*
*        PUTMSG ROUTINE
*----------------------------------------------------------*
         SPACE
PUTMSG   EQU   *
         STM   R14,R1,PUTLINS
         XC    MYOLD(8),MYOLD
         XC    MYSEG1(4),MYSEG1
         MVC   MYPTPB(12),MODLPTPM
         LA    R14,1               NO. OF MESSAGE SEGMENTS
         ST    R14,MYOLD
         LA    R14,MYSEG1          POINT TO 1ST SEGMENT
         ST    R14,MYOLD+4
         LR    R14,R0              LENGTH IN R0
         LA    R14,4(,R14)         ADD 4
         LA    R15,MYSEG1+4
         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?
         BE    *+16                YES - BRANCH
         LA    R14,1(,R14)         ADD 1 TO LENGTH
         MVI   0(R15),C' '         INSERT LEADING BLANK
         LA    R15,1(,R15)         BUMP POINTER
         STH   R14,MYSEG1
         LR    R14,R0
         BCTR  R14,0
         B     *+10
         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN
         EX    R14,*-6
         SPACE
         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),MF=(E,MYIOPL)
         SPACE
         LM    R14,R1,PUTLINS
         BR    R14
         SPACE
*----------------------------------------------------------*
*        PUTLINE ROUTINE
*----------------------------------------------------------*
         SPACE
PUTLINE  EQU   *
         B     ISPFLINE            SHORT CIRCUIT PUTLINE         ISP
         SPACE 1                                                 ISP
         STM   R14,R1,PUTLINS
         MVC   MYPTPB(12),MODLPTPB
         SPACE
         PUTLINE PARM=MYPTPB,OUTPUT=(LINESEG,DATA),MF=(E,MYIOPL)
         SPACE
         LM    R14,R1,PUTLINS
         BR    R14
         SPACE
*----------------------------------------------------------*     ISP
*        ISPF VARIABLE CODE                                      ISP
*----------------------------------------------------------*     ISP
         SPACE 1                                                 ISP
ISPFLINE EQU   *                                                 ISP
         STM   R14,R1,PUTLINS                                    ISP
         MVC   XRESULT(22),=CL22' ' BLANK AREA                   ISP
         LH    R15,LINESEG          GET LENGTH OF ANSWER         ISP
         SH    R15,=H'4'            REVERSE THE PUTLINE          ISP
         LA    R7,XRESULT           POINT TO DATA LINE           ISP
         BCTR  R15,0                SUBTRACT ONE FOR EX          ISP
         EX    R15,IMOVE            DO THE VARIABLE MOVE         ISP
         B     ISPF1                                             ISP
IMOVE    MVC   0(*-*,R7),LINE                                    ISP
         SPACE 1                                                 ISP
*----------------------------------------------------------------ISP*
*        ISSUE VDEFINE FOR ALL 3 VARIABLES.                      ISP
*----------------------------------------------------------------ISP*
ISPF1    EQU   *                                                 ISP
         LA    R7,VDEF             GET ADDR OF VDEF              ISP
         ST    R7,CALL1            STASH THE ADDRESS             ISP
         LA    R7,XCVX             GET ADDR OF VARIABLE          ISP
         ST    R7,CALL1+4          STASH THE ADDRESS             ISP
         LA    R7,XRESULT          GET ADDR OF ANSWER            ISP
         ST    R7,CALL1+8          STASH THE ADDRESS             ISP
         LA    R7,CHAR             GET ADDR OF CHAR              ISP
         ST    R7,CALL1+12         STASH THE ADDRESS             ISP
         LA    R7,22               GET LENGTH                    ISP
         ST    R7,ISPFLEN          SAVE THE LENGTH               ISP
         LA    R7,ISPFLEN          GET ADDR OF LENGTH FIELD      ISP
         ST    R7,CALL1+16         STASH THE ADDRESS             ISP
         OI    CALL1+16,X'80'      FLIP ON HIGH ORDER BIT        ISP
         SPACE 1                                                 ISP
         LA    R1,CALL1            GET PARAM LIST ADDR           ISP
         LINK  EP=ISPLINK          GO OFF TO ISPLINK             ISP
         LTR   R15,R15                                           ISP
         BZ    ISPF2                                             ISP
         LR    R3,R15              SAVE RETURN CODE              ISP
         B     ABEND1              TRAP                          ISP
         SPACE 1                                                 ISP
*----------------------------------------------------------------ISP-*
*        WRITE THE VALUE INTO THE SHARED VARIABLE POOL           ISP
*----------------------------------------------------------------ISP-*
         SPACE 1                                                 ISP
ISPF2    EQU   *                                                 ISP
         LA    R7,VPUT             GET ADDR OF VPUT              ISP
         ST    R7,CALL2            STASH THE ADDRESS             ISP
         LA    R7,XCVX             GET ADDR OF VARIABLE NAME     ISP
         ST    R7,CALL2+4          STASH THE ADDRESS             ISP
         LA    R7,SHR              GET ADDR OF SHR               ISP
         ST    R7,CALL2+8          STASH THE ADDRESS             ISP
         OI    CALL2+8,X'80'       FLIP ON HIGH ORDER BIT        ISP
         LA    R1,CALL2            GET PARAM LIST ADDR           ISP
         LINK  EP=ISPLINK          GO OFF TO ISPLINK             ISP
         LTR   R15,R15                                           ISP
         BZ    ISPF3                                             ISP
         LR    R3,R15              SAVE RETURN CODE              ISP
         B     ABEND2              TRAP                          ISP
         SPACE 1                                                 ISP
*----------------------------------------------------------------ISP-*
*        DELETE THE VARIABLE FROM THIS POOL                      ISP
*----------------------------------------------------------------ISP-*
         SPACE 1                                                 ISP
ISPF3    EQU   *                                                 ISP
         LA    R7,VDEL             GET ADDR OF VDEL              ISP
         ST    R7,CALL3            STASH THE ADDRESS             ISP
         LA    R7,XCVX             GET ADDR OF RESULT            ISP
         ST    R7,CALL3+4          STASH THE ADDRESS             ISP
         OI    CALL3+4,X'80'       FLIP ON HIGH ORDER BIT        ISP
         SPACE 1                                                 ISP
         LA    R1,CALL3            GET PARAM LIST ADDR           ISP
         LINK  EP=ISPLINK          GO OFF TO ISPLINK             ISP
         LTR   R15,R15                                           ISP
         BZ    ISPFEND                                           ISP
         LR    R3,R15              SAVE RETURN CODE              ISP
         B     ABEND3              TRAP                          ISP
         SPACE 1                                                 ISP
ISPFEND  EQU   *                                                 ISP
         LM    R14,R1,PUTLINS                                    ISP
         BR    R14                                               ISP
         SPACE 1                                                 ISP
*----------------------------------------------------------*
*         TERMINATE
*----------------------------------------------------------*
         SPACE
EXIT0    SR    15,15
EXIT     IKJRLSA MYANS
         LR    R1,R13              ADDRESS TO FREEMAIN
         L     R0,@SIZE            LENGTH AND SUBPOOL TO FREEMAIN
         L     R13,4(,R13)
         LR    R2,R15
         FREEMAIN R,A=(1),LV=(0)
         LR    R15,R2
         LM    R0,R12,20(R13)
         L     R14,12(,R13)
         BR    R14
         DROP  R12                 BASE
ABEND1   ABEND 1,DUMP                                            ISP
ABEND2   ABEND 2,DUMP                                            ISP
ABEND3   ABEND 3,DUMP                                            ISP
         SPACE
*----------------------------------------------------------*
*        CONSTANTS
*----------------------------------------------------------*
         SPACE
         LTORG
@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)   SUBPOOL AND LENGTH
NUMERIC  DC    240X'FF',10X'00',6X'FF'
MODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L
         SPACE
MODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L
         SPACE
*----------------------------------------------------------*
*        PARSE PCL
*----------------------------------------------------------*
         SPACE
         PRINT NOGEN
CVXPCL   IKJPARM
POSIT1   IKJIDENT 'DATA TO BE CONVERTED TO HEX',ASIS,                  +
               FIRST=ANY,OTHER=ANY,MAXLNTH=11,                         +
               PROMPT='DATA TO BE CONVERTED TO HEX',                   +
               HELP='DATA (MAX LENGTH 10) TO BE CONVERTED TO HEX'
TYPEKW   IKJKEYWD
         IKJNAME 'N'
         IKJNAME 'C'
         IKJENDP
         PRINT GEN
*----------------------------------------------------------------ISP-*
*        DEFINE THE CONSTANTS, ISPF NEEDS THEM 8 BYTES LONG      ISP
*----------------------------------------------------------------ISP-*
VDEF     DC    CL8'VDEFINE'                                      ISP
VPUT     DC    CL8'VPUT'                                         ISP
VDEL     DC    CL8'VDELETE'                                      ISP
SHR      DC    CL8'SHARED'                                       ISP
XCVX     DC    CL8'(XCVX)  '       ENSURE ONE BLANK AT END !!!   ISP
CHAR     DC    CL8'CHAR'           ACCT IS CHARACTER DEFINED     ISP
         SPACE
*----------------------------------------------------------*
*        DSECTS
*----------------------------------------------------------*
         SPACE
@DATA    DSECT
         DS    18F
DOUBLE   DS    D
SIGN     DS    C
MYPPL    DS    7F
MYANS    DS    F
MYUWA    DS    F
MYECB    DS    F                  USED BY PUTLINE ROUTINE
MYIOPL   DS    4F                 USED BY PUTLINE ROUTINE
MYPTPB   DS    3F                 USED BY PUTLINE ROUTINE
MYOLD    DS    2F                 USED BY PUTLINE ROUTINE
MYSEG1   DS    2H,CL100           USED BY PUTLINE ROUTINE
PUTLINS  DS    4F                 USED BY PUTLINE ROUTINE
LINESEG  DS    2H
LINE     DS    CL256,CL1
         SPACE 1                                                 ISP
XRESULT  DS    CL22                                              ISP
ISPFLEN  DS    F                                                 ISP
CALL1    DS    0CL20                                             ISP
         DS    F                   A(VDEF)                       ISP
         DS    F                   A(VARIABLE NAME)              ISP
         DS    F                   A(VARIABLE VALUE)             ISP
         DS    F                   A(CHAR)                       ISP
         DS    F                   A(L4+X'80000000')             ISP
         SPACE 1                                                 ISP
*----------------------------------------------------------------ISP-*
*        DATA AREA TO WRITE VARIABLE INTO SHARED POOL            ISP
*----------------------------------------------------------------ISP-*
         SPACE 1                                                 ISP
         DS    0F                                                ISP
CALL2    DS    0CL12                                             ISP
         DS    F                   A(VPUT)                       ISP
         DS    F                   A(VARIABLE NAME)              ISP
         DS    F                   A(SHR+X'80000000')            ISP
         SPACE 1                                                 ISP
*----------------------------------------------------------------ISP-*
*        DATA AREA TO WRITE VARIABLE INTO SHARED POOL            ISP
*----------------------------------------------------------------ISP-*
         SPACE 1                                                 ISP
         DS    0F                                                ISP
CALL3    DS    0CL8                                              ISP
         DS    F                   A(VDEL)                       ISP
         DS    F                   A(VARIABLE NAME+X'80000000)   ISP
         DS    0D
         SPACE
@DATAL   EQU   *-@DATA
         SPACE
         IKJCPPL
         SPACE 3
         IKJIOPL
         SPACE 3
         IKJPPL
         END
