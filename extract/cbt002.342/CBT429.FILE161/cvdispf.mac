         TITLE '   C V D - ISPF VERSION'
*-------------------------------------------------------------------*
*        'CVDISPF' - CONVERT HEX TO DECIMAL INTO AN ISPF VARIABLE.
*-------------------------------------------------------------------*
         SPACE
*-------------------------------------------------------------------*
*   WRITTEN BY BILL GODFREY, PRC INC.
*        (PRC INC. OF MCLEAN, VA, WAS FORMERLY PLANNING RESEARCH CORP.)
*   CURRENT INSTALLATION:
*        NOAA (NATIONAL OCEANIC AND ATMOSPHERIC ADMINISTRATION),
*        5200 AUTH ROAD, CAMP SPRINGS, MARYLAND 20746
*   DATE WRITTEN. MAY 9 1985.
*   DATE UPDATED. APRIL 25 1991.
*   ATTRIBUTES. RE-ENTRANT.
*-------------------------------------------------------------------*
         SPACE
*-------------------------------------------------------------------*
* DISCLAIMER: NO GUARANTEE; NO WARRANTY; INSTALL/USE AT YOUR OWN RISK.
*   DESCRIPTION.
*        THIS TSO COMMAND DISPLAYS THE DECIMAL VALUE OF A HEX STRING.
*        THE VALUE IS ASSUMED TO BE POSITIVE UNLESS:
*        1) H IS NOT SPECIFIED, THERE ARE 8 HEX CHARACTERS, AND THE
*           FIRST CHARACTER IS GREATER THAN HEX 7.
*        2) H IS SPECIFIED, THERE ARE 4 HEX CHARACTERS, AND THE FIRST
*           CHARACTER IS GREATER THAN HEX 7.
*    IF THE 'TIME' KEYWORD IS SPECIFIED, THE HEX STRING IS CONVERTED
*    FROM TIME-OF-DAY AS RETURNED BY THE 'TIME BIN' MACRO (HUNDREDTHS
*    OF A SECOND SINCE MIDNIGHT) TO HH.MM.SS.
*   SYNTAX.
*         FIRST OPERAND: 1 TO 8 HEX DIGITS.
*         OPTIONAL KEYWORD: H - HALFWORD DATA (16 BIT SIGNED INTEGER).
*         OPTIONAL KEYWORD: T - TIME-OF-DAY
*   LOG OF CHANGES.
*        08AUG86 - TIME KEYWORD ADDED.
*        25APR91 - NO CODE CHANGES. MINOR CHANGES TO COMMENTS.
*        15JUL99 - REWORKED CODE TO DOCUMENT MORE, ADD DSECT, CLEAN
*                  CODE FOR DISTRIBUTION.  MANY THANKS TO BILL.
*        16JUL99 - REWORKED CODE TO PUT ANSWER INTO AN ISPF VARIABLE
*                  VERSUS BEING RETURNED VIA TSO PUTLINE.
*-------------------------------------------------------------------*
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE
CVDISPF  AMODE 24
CVDISPF  RMODE 24
CVDISPF  CSECT
         SAVE  (14,12),,CVDISPF_&SYSDATE._&SYSTIME
         LR    R12,R15
         USING CVDISPF,R12
         LR    R2,R1
         USING CPPL,R2
         L     R0,@SIZE
         GETMAIN R,LV=(0)
         ST    R13,4(,R1)
         ST    R1,8(,R13)
         LR    R13,R1
         USING @DATA,R13
         SPACE
*----------------------------------------------------------*
*        SET UP IOPL FOR PUTLINE
*----------------------------------------------------------*
         SPACE
         LA    R15,MYIOPL
         USING IOPL,R15
         MVC   IOPLUPT(4),CPPLUPT
         MVC   IOPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,IOPLECB
         XC    MYECB,MYECB
         LA    R0,MYPTPB
         ST    R0,IOPLIOPB
         DROP  R15
         SPACE
*----------------------------------------------------------*
*        SET UP PPL FOR PARSE
*----------------------------------------------------------*
         SPACE
         LA    R15,MYPPL
         USING PPL,R15
         MVC   PPLUPT(4),CPPLUPT
         MVC   PPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,PPLECB
         XC    MYECB,MYECB
         L     R0,=A(CVDPCL)
         ST    R0,PPLPCL
         LA    R0,MYANS
         ST    R0,PPLANS
         XC    MYANS,MYANS
         MVC   PPLCBUF(4),CPPLCBUF
         LA    R0,MYUWA
         ST    R0,PPLUWA
         DROP  R15                 PPL
         SPACE 1
*----------------------------------------------------------*
*        CALL THE PARSE SERVICE ROUTINE
*----------------------------------------------------------*
         SPACE 1
         LR    R1,R15              POINT TO PPL
         L     R15,16              CVTPTR
         TM    524(R15),X'80'      IF HI ORDER BIT NOT ON
         BNO   PARSELNK               THEN DO LINK, NOT CALL
         L     R15,524(,R15)       CVTPARS
         BALR  R14,R15             CALL IKJPARS
         B     PARSEEXT            SKIP AROUND LINK
         SPACE 1
PARSELNK EQU   *
         LINK  EP=IKJPARS
PARSEEXT EQU   *
         SPACE
         L     R3,MYANS
         USING IKJPARMD,R3
         SPACE
*----------------------------------------------------------*
*         GET FIRST POSITIONAL OPERAND
*----------------------------------------------------------*
         SPACE
         MVC   HEXATE(8),=8C'0'    LEADING ZEROES
         LA    R15,HEXATE+8        POINT PAST HEXATE
         SH    R15,HEXNUM+4        POINT INTO HEXATE BASED ON LENGTH
         L     R1,HEXNUM           REG 1  --> OPERAND
         LH    R14,HEXNUM+4        REG 15  =  LENGTH OF OPERAND
         BCTR  R14,0
         B     *+10
         MVC   0(0,R15),0(R1)      MOVE OPERAND INTO HEXATE
         EX    R14,*-6             EXECUTE MVC
         SPACE
         LA    R1,HEXATE           FROM AND TO ADDRESS
         LA    R0,4                LENGTH TO PACK
         BAL   R14,PACK            CONVERT TO BINARY
         SPACE
*----------------------------------------------------------*
*        DISPLAY THE RESULT
*----------------------------------------------------------*
         SPACE
         L     R0,HEXATE
         CLI   TYPEKW+1,3          T SPECIFIED
         BE    TIME
         CLI   TYPEKW+1,2          H SPECIFIED
         BNE   CVDBASE             NO, SKIP LH
         LH    R0,HEXATE+2         YES, LOAD HALFWORD
         CLC   HEXATE(2),=H'0'     MORE THAN 4 SIGNIFICANT DIGITS
         BNE   ERROR               YES, ERROR
CVDBASE  EQU   *
         CVD   R0,DOUBLE
         LA    R15,LINE
         LTR   R0,R0
         BNM   NOSIGN
         MVI   0(R15),C'-'
         LA    R15,1(,R15)
NOSIGN   EQU   *
         MVC   0(16,R15),=X'4020206B2020206B2020206B20212040'
         ED    0(15,R15),DOUBLE+2
         LA    R0,15(,R15)         POINT PAST LAST DIGIT
ZSUP1    EQU   *
         CLI   0(R15),C' '
         BNE   ZSUP2
         MVC   0(14,R15),1(R15)
         BCTR  R0,0
         B     ZSUP1
         SPACE
ZSUP2    EQU   *
         LA    R1,LINE
         SR    R0,R1               COMPUTE LENGTH OF RESULT
PUTRES   EQU   *
         AH    R0,=H'4'
         STH   R0,LINESEG
         XC    LINESEG+2(2),LINESEG+2
         SPACE
         BAL   R14,PUTLINE
         B     EXIT0
         SPACE
TIME     EQU   *
         LR    R1,R0
         SR    R0,R0
         D     R0,=A(360000)
         CVD   R1,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  LINE(2),DOUBLE+6(2)
         SRDL  R0,32
         D     R0,=F'6000'
         CVD   R1,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  LINE+3(2),DOUBLE+6(2)
         SRDL  R0,32
         D     R0,=F'100'
         CVD   R1,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  LINE+6(2),DOUBLE+6(2)
         MVI   LINE+2,C'.'
         MVI   LINE+5,C'.'
         LA    R0,8
         B     PUTRES
         SPACE
ERROR    EQU   *
         MVC   LINE(5),=C'ERROR'
         LA    R0,5
         B     PUTRES
         SPACE
*----------------------------------------------------------*
*        THIS ROUTINE CONVERTS EXTERNAL HEX TO BINARY HEX
*----------------------------------------------------------*
         SPACE
PACK     EQU   *
         ST    R14,PACK14
         LR    R15,R1              REG 15 --> SENDING/RECEIVING FLD
PACLOOP  EQU   *
         SR    R14,R14
         IC    R14,0(,R1)          REG 14  =  1ST CHAR
         CLI   0(R1),C'0'          NUMBER OR LETTER
         BNL   *+8                 NUMBER - BRANCH
         LA    R14,57(,R14)        LETTER - CONVERT TO FA-FF
         SLL   R14,4               SHIFT LEFT 4 BITS
         STC   R14,0(,R15)         STORE THE LEFT HALF
         IC    R14,1(,R1)          REG 14  =  2ND CHAR
         CLI   1(R1),C'0'          NUMBER OR LETTER
         BNL   *+8                 NUMBER - BRANCH
         LA    R14,57(,R14)        LETTER - CONVERT
         SLL   R14,28              SHIFT LEFT HALF TO OBLIVION
         SRL   R14,28              SHIFT BACK AGAIN
         STC   R14,1(,R15)         STORE RIGHT HALF
         OC    0(1,R15),1(R15)     'OR' RIGHT HALF OVER LEFT HALF
         LA    R1,2(,R1)           INCREMENT SENDING FIELD
         LA    R15,1(,R15)         INCREMENT RECEIVING FLD
         BCT   R0,PACLOOP          LOOP USING LENGTH IN REG 0
         L     R14,PACK14
         BR    R14                 EXIT
         SPACE
HEX      MVC   1(1,R15),0(R1)      MOVE BYTE
         UNPK  0(3,R15),1(2,R15)   UNPACK
         TR    0(2,R15),HEXTRAN-240
         LA    R15,2(,R15)         INCREMENT OUTPUT PTR
         LA    R1,1(,R1)           INCREMENT INPUT PTR
         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP
         MVI   0(R15),C' '         BLANK THE TRAILING BYTE
         BR    R14                 RETURN TO CALLER
HEXTRAN  DC    C'0123456789ABCDEF' TRANSLATE TABLE
         SPACE
*----------------------------------------------------------*
*        PUTMSG ROUTINE
*----------------------------------------------------------*
         SPACE
         DS    0H
PUTMSG   EQU   *
         STM   R14,R1,PUTLINS
         XC    MYOLD(8),MYOLD
         XC    MYSEG1(4),MYSEG1
         MVC   MYPTPB(12),MODLPTPM
         LA    R14,1               NO. OF MESSAGE SEGMENTS
         ST    R14,MYOLD
         LA    R14,MYSEG1          POINT TO 1ST SEGMENT
         ST    R14,MYOLD+4
         LR    R14,R0              LENGTH IN R0
         LA    R14,4(,R14)         ADD 4
         LA    R15,MYSEG1+4
         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?
         BE    *+16                YES - BRANCH
         LA    R14,1(,R14)         ADD 1 TO LENGTH
         MVI   0(R15),C' '         INSERT LEADING BLANK
         LA    R15,1(,R15)         BUMP POINTER
         STH   R14,MYSEG1
         LR    R14,R0
         BCTR  R14,0
         B     *+10
         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN
         EX    R14,*-6
         SPACE
         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),MF=(E,MYIOPL)
         SPACE
         LM    R14,R1,PUTLINS
         BR    R14
         SPACE
*----------------------------------------------------------*
*        PUTLINE ROUTINE
*----------------------------------------------------------*
         SPACE
PUTLINE  EQU   *
         B     ISPFLINE            SHORT CIRCUIT GODFREY CODE
         SPACE
         STM   R14,R1,PUTLINS
         MVC   MYPTPB(12),MODLPTPB
         SPACE
         PUTLINE PARM=MYPTPB,OUTPUT=(LINESEG,DATA),MF=(E,MYIOPL)
         SPACE
         LM    R14,R1,PUTLINS
         BR    R14
         SPACE
*----------------------------------------------------------*     ISP
*        ISPF VARIABLE CODE                                      ISP
*----------------------------------------------------------*     ISP
         SPACE 1                                                 ISP
ISPFLINE EQU   *                                                 ISP
         STM   R14,R1,PUTLINS                                    ISP
         MVC   IRESULT(16),=CL16' ' BLANK AREA                   ISP
         LH    R15,LINESEG          GET LENGTH OF ANSWER         ISP
         SH    R15,=H'4'            REVERSE THE PUTLINE          ISP
         LA    R7,IRESULT           POINT TO DATA LINE           ISP
         BCTR  R15,0                SUBTRACT ONE FOR EX          ISP
         EX    R15,IMOVE            DO THE VARIABLE MOVE         ISP
         B     ISPF1                                             ISP
IMOVE    MVC   0(*-*,R7),LINE                                    ISP
         SPACE 1                                                 ISP
*----------------------------------------------------------------ISP*
*        ISSUE VDEFINE FOR ALL 3 VARIABLES.                      ISP
*----------------------------------------------------------------ISP*
ISPF1    EQU   *                                                 ISP
         LA    R7,VDEF             GET ADDR OF VDEF              ISP
         ST    R7,CALL1            STASH THE ADDRESS             ISP
         LA    R7,ICVD             GET ADDR OF VARIABLE          ISP
         ST    R7,CALL1+4          STASH THE ADDRESS             ISP
         LA    R7,IRESULT          GET ADDR OF ANSWER            ISP
         ST    R7,CALL1+8          STASH THE ADDRESS             ISP
         LA    R7,CHAR             GET ADDR OF CHAR              ISP
         ST    R7,CALL1+12         STASH THE ADDRESS             ISP
         LA    R7,16               GET LENGTH                    ISP
         ST    R7,ISPFLEN          SAVE THE LENGTH               ISP
         LA    R7,ISPFLEN          GET ADDR OF LENGTH FIELD      ISP
         ST    R7,CALL1+16         STASH THE ADDRESS             ISP
         OI    CALL1+16,X'80'      FLIP ON HIGH ORDER BIT        ISP
         SPACE 1                                                 ISP
         LA    R1,CALL1            GET PARAM LIST ADDR           ISP
         LINK  EP=ISPLINK          GO OFF TO ISPLINK             ISP
         LTR   R15,R15                                           ISP
         BZ    ISPF2                                             ISP
         LR    R3,R15              SAVE RETURN CODE              ISP
         B     ABEND1              TRAP                          ISP
         SPACE 1                                                 ISP
*----------------------------------------------------------------ISP-*
*        WRITE THE VALUE INTO THE SHARED VARIABLE POOL           ISP
*----------------------------------------------------------------ISP-*
         SPACE 1                                                 ISP
ISPF2    EQU   *                                                 ISP
         LA    R7,VPUT             GET ADDR OF VPUT              ISP
         ST    R7,CALL2            STASH THE ADDRESS             ISP
         LA    R7,ICVD             GET ADDR OF VARIABLE NAME     ISP
         ST    R7,CALL2+4          STASH THE ADDRESS             ISP
         LA    R7,SHR              GET ADDR OF SHR               ISP
         ST    R7,CALL2+8          STASH THE ADDRESS             ISP
         OI    CALL2+8,X'80'       FLIP ON HIGH ORDER BIT        ISP
         LA    R1,CALL2            GET PARAM LIST ADDR           ISP
         LINK  EP=ISPLINK          GO OFF TO ISPLINK             ISP
         LTR   R15,R15                                           ISP
         BZ    ISPF3                                             ISP
         LR    R3,R15              SAVE RETURN CODE              ISP
         B     ABEND2              TRAP                          ISP
         SPACE 1                                                 ISP
*----------------------------------------------------------------ISP-*
*        DELETE THE VARIABLE FROM THIS POOL                      ISP
*----------------------------------------------------------------ISP-*
         SPACE 1                                                 ISP
ISPF3    EQU   *                                                 ISP
         LA    R7,VDEL             GET ADDR OF VDEL              ISP
         ST    R7,CALL3            STASH THE ADDRESS             ISP
         LA    R7,ICVD             GET ADDR OF RESULT            ISP
         ST    R7,CALL3+4          STASH THE ADDRESS             ISP
         OI    CALL3+4,X'80'       FLIP ON HIGH ORDER BIT        ISP
         SPACE 1                                                 ISP
         LA    R1,CALL3            GET PARAM LIST ADDR           ISP
         LINK  EP=ISPLINK          GO OFF TO ISPLINK             ISP
         LTR   R15,R15                                           ISP
         BZ    ISPFEND                                           ISP
         LR    R3,R15              SAVE RETURN CODE              ISP
         B     ABEND3              TRAP                          ISP
         SPACE 1                                                 ISP
ISPFEND  EQU   *                                                 ISP
         LM    R14,R1,PUTLINS                                    ISP
         BR    R14                                               ISP
         SPACE 1                                                 ISP
*----------------------------------------------------------*
*         TERMINATE
*----------------------------------------------------------*
         SPACE
EXIT0    EQU   *
         SR    R15,R15
EXIT     EQU   *
         IKJRLSA MYANS
         LR    R1,R13              ADDRESS TO FREEMAIN
         L     R0,@SIZE            LENGTH AND SUBPOOL TO FREEMAIN
         L     R13,4(,R13)
         LR    R2,R15
         FREEMAIN R,A=(1),LV=(0)
         LR    R15,R2
         LM    R0,R12,20(R13)
         L     R14,12(,R13)
         BR    R14
         DROP  R12                 BASE
         SPACE
*----------------------------------------------------------*
*        PARSE VALIDITY CHECK ROUTINE FOR HEX STRING
*
*        THE IKJIDENT MACRO SPECIFIES THE FOLLOWING:
*            FIRST=NONATNUM,OTHER=NONATNUM,VALIDCK=REPVALCK
*        THIS VALIDITY CHECKING ROUTINE ONLY HAS TO CHECK FOR
*        ALPHABETIC CHARACTERS GREATER THAN 'F' BECAUSE THE
*        CHARACTERS ARE KNOWN TO BE ALPHABETIC AND/OR NUMERIC.
*----------------------------------------------------------*
         SPACE
REPVALCK DC    0H'0'
         USING *,R6
         STM   R14,R12,12(R13)
         LR    R6,R15              REG 6  =  BASE
         L     R7,0(,R1)           REG 7 --> PDE
         L     R4,0(,R7)           REG 4 --> CHARACTER STRING
         LH    R0,4(,R7)           REG 0  =  LENGTH
         LA    R15,4               RETURN 4 IF CHECK FAILS
VALLOOP  EQU   *
         CLI   0(R4),C'0'          NUMERIC?
         BNL   VALINCR             YES - THIS CHAR OK
         CLI   0(R4),C'F'          IN RANGE A THRU F?
         BH    VALEXIT             NO - EXIT WITH RC=4
VALINCR  EQU   *
         LA    R4,1(,R4)           POINT TO NEXT CHAR
         BCT   R0,VALLOOP
         SR    R15,R15             SET RC=0
VALEXIT  EQU   *
         L     R14,R12(,R13)
         LM    R0,R12,20(R13)
         BR    R14
         DROP  R6
         SPACE
*----------------------------------------------------------*
*        CONSTANTS
*----------------------------------------------------------*
         SPACE
ABEND1   ABEND 1,DUMP                                            ISP
ABEND2   ABEND 2,DUMP                                            ISP
ABEND3   ABEND 3,DUMP                                            ISP
         SPACE
@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)   SUBPOOL AND LENGTH
         SPACE
         LTORG
         SPACE
MODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L
         SPACE
MODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L
         SPACE
*----------------------------------------------------------*
*        PARSE PCL
*----------------------------------------------------------*
         SPACE
         PRINT NOGEN
CVDPCL   IKJPARM
HEXNUM   IKJIDENT 'HEX NUMBER',                                        +
               FIRST=NONATNUM,OTHER=NONATNUM,MAXLNTH=8,                +
               VALIDCK=REPVALCK,                                       +
               PROMPT='HEXADECIMAL NUMBER',                            +
               HELP='HEX NUMBER (MAX LENGTH 8) TO BE CONVERTED TO DECIM+
               AL'
TYPEKW   IKJKEYWD
         IKJNAME 'F'
         IKJNAME 'H'
         IKJNAME 'TIME'
         IKJENDP
         PRINT GEN
         SPACE
*----------------------------------------------------------------ISP-*
*        DEFINE THE CONSTANTS, ISPF NEEDS THEM 8 BYTES LONG      ISP
*----------------------------------------------------------------ISP-*
VDEF     DC    CL8'VDEFINE'                                      ISP
VPUT     DC    CL8'VPUT'                                         ISP
VDEL     DC    CL8'VDELETE'                                      ISP
SHR      DC    CL8'SHARED'                                       ISP
ICVD     DC    CL8'(ICVD)  '       ENSURE ONE BLANK AT END !!!   ISP
CHAR     DC    CL8'CHAR'           ACCT IS CHARACTER DEFINED     ISP
*----------------------------------------------------------*
*        DSECTS
*----------------------------------------------------------*
         SPACE
@DATA    DSECT
         DS    18F
DOUBLE   DS    D
HEXATE   DS    D
MYPPL    DS    7F
MYANS    DS    F
MYUWA    DS    F
MYECB    DS    F                  USED BY PUTLINE ROUTINE
MYIOPL   DS    4F                 USED BY PUTLINE ROUTINE
MYPTPB   DS    3F                 USED BY PUTLINE ROUTINE
MYOLD    DS    2F                 USED BY PUTLINE ROUTINE
MYSEG1   DS    2H,CL100           USED BY PUTLINE ROUTINE
PUTLINS  DS    4F                 USED BY PUTLINE ROUTINE
PACK14   DS    F
LINESEG  DS    2H
LINE     DS    CL16
         SPACE 1                                                 ISP
IRESULT  DS    CL16                                              ISP
ISPFLEN  DS    F                                                 ISP
CALL1    DS    0CL20                                             ISP
         DS    F                   A(VDEF)                       ISP
         DS    F                   A(VARIABLE NAME)              ISP
         DS    F                   A(VARIABLE VALUE)             ISP
         DS    F                   A(CHAR)                       ISP
         DS    F                   A(L4+X'80000000')             ISP
         SPACE 1                                                 ISP
*----------------------------------------------------------------ISP-*
*        DATA AREA TO WRITE VARIABLE INTO SHARED POOL            ISP
*----------------------------------------------------------------ISP-*
         SPACE 1                                                 ISP
         DS    0F                                                ISP
CALL2    DS    0CL12                                             ISP
         DS    F                   A(VPUT)                       ISP
         DS    F                   A(VARIABLE NAME)              ISP
         DS    F                   A(SHR+X'80000000')            ISP
         SPACE 1                                                 ISP
*----------------------------------------------------------------ISP-*
*        DATA AREA TO WRITE VARIABLE INTO SHARED POOL            ISP
*----------------------------------------------------------------ISP-*
         SPACE 1                                                 ISP
         DS    0F                                                ISP
CALL3    DS    0CL8                                              ISP
         DS    F                   A(VDEL)                       ISP
         DS    F                   A(VARIABLE NAME+X'80000000)   ISP
         SPACE
@DATAL   EQU   *-@DATA
         SPACE
         IKJCPPL
         SPACE 3
         IKJIOPL
         SPACE 3
         IKJPPL
         SPACE 3
         END
