/* Calendar: REXX EXEC to display a calendar in an ISPF Dynamic Area */

/* trace results  */

/* ----------------------------------------------------------------- */
/*                                                                   */
/* Ref:  "Enterprise Systems Journal", November, 1992, article       */
/*       "Dynamic Areas in ISPF Panels", by Rao N. Arimilli, p. 78.  */
/*                                                                   */
/* 07Jul93, William Smith, Charles Schwab & Co., Inc.                */
/*                                                                   */
/* With corrections by William J. Smith, Charles Schwab & Co., Inc.  */
/* 101 Montgomery Street, 5th Floor, San Francisco, CA  94104-4122,  */
/* (415) 627-7607.                                                   */
/*                                                                   */
/* - Original listing of working source code obtained from Howard M. */
/*   Dean, American President Systems, Corporate Data Center,        */
/*   Alameda, CA (510) 748-8031.                                     */
/*                                                                   */
/* The REXX EXEC builds a variable OUT$$MTH, which consists of a     */
/* concatenation of variables WEEKHDR1, WEEKHDR2, WEEk.1, WEEK.2 ... */
/* WEEK.6.  It stores the 168-byte character string and the date for */
/* which the calendar was built in the user profile pool.  The main  */
/* logic of the EXEC is to compute the day of the week for the first */
/* day of the month and build a character string for the calendar.   */
/*                                                                   */
/* The REXX built-in function for day-of-week was deliberately not   */
/* used in order that the EXEC may be easily modified to build the   */
/* calendar for any date, not only the system date.  A reference     */
/* date of January 1, 1989 is used for computing the day-of-week.    */
/* The calendar string consists of two header lines and up to six    */
/* week lines.                                                       */
/*                                                                   */
/* The EXEC first determines the number of elapsed days from January */
/* 1, 1989 to the current date.  Adjustments are made for any leap   */
/* years between the two dates.  The day-of-week for the current     */
/* date is then computed because the reference day, January 1, 1989, */
/* is a Sunday.  The numerical code for the day-of-week used is 1    */
/* for Sunday, 2 for Monday, ... 7 for Saturday.  After all of the   */
/* necessary computations, the DAYOFWK variable will have the        */
/* numeric code for the day-of-week of the first day of the current  */
/* month.                                                            */
/*                                                                   */
/* The EXEC builds one week frame at a time starting with the first  */
/* of the month.  It builds a string of attribute characters and     */
/* dates.  The attribute character used is of low intensity for all  */
/* days in the except the current date, which would be in reverse    */
/* video for highlighting purposes.  Depending on the number of days */
/* in the month, there can be up to six week frames in the month.    */
/*                                                                   */
/* The "flag" variable in the EXEC is used to suppress the high-     */
/* lighting of the current date.  If this variable is set to any     */
/* value other than "Y", the EXEC will not highlight the current     */
/* date.  This would be useful if this EXEC is modified to display   */
/* any other month's calendar.                                       */
/*                                                                   */
/* All week frames along with month headers are concatenated into    */
/* one single variable:  OUT$$MTH.  This variable, along with the    */
/* current date called OUT$DTE, is stored in the user profile.  The  */
/* OUT$DTE is stored in the YY/MM/DD format to be able to compare    */
/* directly with the ISPF dialog variable &ZDATE.                    */
/*                                                                   */
/* The dynamic are is defined as one continuous variable of 168      */
/* bytes.  Since the calendar variables are stored in the user       */
/* profile, the values are automatically retrieved when the panel is */
/* displayed.  The first 21 bytes of OUT$$MTH are placed in the      */
/* first line of the dynamic are, the next 21 bytes are placed in    */
/* the second line and so on until the last 21 bytes are placed in   */
/* the eighth line.                                                  */
/*                                                                   */
/* There is no need to run the EXEC every time the main menu is      */
/* displayed.  The panel may be displayed several times a day        */
/* whereas the calendar needs to be built only once a day.  So, the  */
/* CALENDAR variable is built only when the systm date is different  */
/* from the date for which the calendar was previously built.        */
/*                                                                   */
/* An invisible option is added to the main menu, which is CALENDAR. */
/* This option executes the REXX EXEC CALENDAR.  When the system     */
/* date changes, the panel will simulate the CALENDAR option forcing */
/* the execution of the EXEC.  This is done by setting the &ZCMD     */
/* field to CALENDAR.  Then the .RESP field is set to ENTER.  This   */
/* will have the effect of the user entering CALENDAR in the option  */
/* field and hitting the ENTER key.  Any actual command entered in   */
/* the command line should be reentered during this process.         */
/*                                                                   */
/* Warning:  Proper care should be taken while implementing this     */
/* particular change to the )INIT section because of the potential   */
/* for the panel to go into an infinite loop.  The user must make    */
/* sure the TSO session save the profile variables as they are       */
/* updated.  If, for some reason, the CALENDAR variable are not      */
/* saved in the user profile, the ISPF main menu will hang, issuing  */
/* the CALENDAR command repeatedly expecting the OUT$DTE to be the   */
/* same as &ZDATE.                                                   */
/*                                                                   */
/* modified 09/02/99 - jdm - putting this into a main menu "is" very */
/*   dangerous for many reasons. change to invoke as a panel option. */
/* ----------------------------------------------------------------- */

curdate = date(standard)                /* Current date              */
curccyy = substr(curdate,1,4)           /* Current yyyy              */
curmm   = substr(curdate,5,2)           /* Current mm                */
curdd   = '01'                          /* Start with day 1          */
flag    = 'Y'                           /* Highlight current day     */

weekhdr1 = date(Month)                  /* Month name                */
year     = date(standard)               /* Standard Date             */
year     = substr(year,1,4)             /* Extract YYYY from STD     */
weekhdr1 = weekhdr1 year                /* String month and year     */
weekhdr1 = center(weekhdr1,20)          /* Center month and year     */
weekhdr1 = '`' ×× weekhdr1              /* Add attribute char        */
weekhdr2 = '[Su Mo Tu We Th Fr Sa'      /* Week names                */

                           /* Total number of days before each month */
days     = '000031059090120151181212243273304334'
baseccyy = 1989                         /* Reference year            */

noofyrs  = curccyy - baseccyy           /* No. of years since 1989   */
days1    = noofyrs * 365                /* No. of days since 1989    */
leapdays = noofyrs % 4                  /* Leap years in between     */

pos      = curmm * 3 - 2
a        = substr(days,pos,3)           /* Days in yr until last mon */
ddd      = a + curdd                    /* Days in yr until today    */
leapflag = curccyy - (curccyy%4)*4      /* If this year is leap      */

If (leapflag = 0) & (curmm > 2) then    /*  add one more day if      */
  ddd = ddd + 1                         /*  leap year and past Feb   */
ddd      = leapdays + days1 + ddd       /* Days from 1989/01/01      */
dayofwk  = ddd // 7
If dayofwk = 0 then
  dayofwk = 7                           /* Adjust Sat. day of week   */
curdd    =  substr(curdate,7,2)         /* Todays DD                 */

/* Compute the number of days in the month */
Select
  When ((curmm = 1) × (curmm = 3) × (curmm = 5) × (curmm = 7) ×,
        (curmm = 8) × (curmm = 10) × (curmm = 12)) then
    lastdd = 31
  When ((curmm = 4) × (curmm = 6) × (curmm = 9) × (curmm = 11))  then
    lastdd = 30
Otherwise
  If (leapflag = 0) then
    lastdd = 29
  Else
    lastdd = 28
End

                                        /*                           */
week.6 = ''                             /* Set last week to nulls    */
dd     = 1                              /* Beginning of the month    */
week   = ''
line   = 1                              /* Week # 1                  */
pos    = 1                              /* Day  # 1                  */
attr   = '~'                            /* Attribute character       */

Do while (line < 7)                     /* Do for all 6 possible wks */
  Do while (pos < 8)                    /* Do for all 7 days in a wk */
    If (line = 1) & (pos < dayofwk) then
      Do
        week = week ×× attr ×× '  '     /* Build character string    */
        pos  = pos + 1
      End
    Else
      Do
        If ((curdd = dd) & (flag = 'Y')) then
          Attr = '$'
        Else
          Attr = '~'
        If (length(dd) = 1) then
          dd = ' ' ×× dd
        week = week ×× attr ×× dd
        dd = dd + 1
        If (dd > lastdd) then
          pos = 99                      /* Quit columns loop         */
        Else
          pos = pos + 1
      End
  End
                                        /* 30 bytes w/o an ATTR char */
  week = week ×× '~                              '
  week = substr(week,1,21)              /* Extract 21 bytes          */
  week.line = week                      /* A week line is ready      */
  line = line + 1
  pos  = 1
  week = ''
  If (dd > lastdd) then                 /* Quit rows loop            */
    line = 99
End

out$$mth = weekhdr1 ×× weekhdr2 ×× week.1 ×× week.2
out$$mth = out$$mth ×× week.3   ×× week.4 ×× week.5 ×× week.6
out$dte  = date(ordered)                /* Today in YY/MM/DD format  */

Address
"ISPEXEC VPUT (OUT$$MTH OUT$DTE) SHARED"

Exit
