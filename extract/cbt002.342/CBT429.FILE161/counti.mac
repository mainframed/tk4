//*--------------------------------------------------------*
//* *  INSTALL THE 'COUNTI' TSO COMMAND                    *
//*--------------------------------------------------------*
//COUNTI   EXEC ASMHCL,COND=(0,NE),
//         PARM.C='LIST,OBJECT,NODECK,TERM,RENT',
//         PARM.L='LIST,MAP,RENT,REUS,REFR'
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR
//         DD DSN=SYS1.AMODGEN,DISP=SHR
//SYSPRINT DD SYSOUT=*
//SYSTERM  DD SYSOUT=*
//SYSIN    DD *
         TITLE '   C O U N T I  '
************************************************************
*
*        'COUNTI' TSO COMMAND, ISPF VERSION OF COUNT TSOCP
*
************************************************************
         SPACE
* ------------------------------------------------------------------ *
*        WRITTEN BY. BILL GODFREY,  PLANNING RESEARCH CORPORATION.
*        INSTALLATION. PRC COMPUTER CENTER INC, MCLEAN VA.
*        DATE WRITTEN. SEPTEMBER 27 1979.
*        DATE UPDATED. AUGUST 1, 1999.
*        ATTRIBUTES. RE-ENTRANT.
*        COMMENTS.
*            THIS TSO COMMAND COUNTS THE LOGICAL RECORDS IN A
*            SPECIFIED DATA SET AND DISPLAYS THE TOTAL ON THE TERMINAL.
*
*            IF AN UNQUALIFIED DATA SET NAME IS ENTERED, THE
*            CATALOG MUST BE READ TWICE, ONCE TO APPEND A
*            TRAILING QUALIFIER IF NECESSARY, AND AGAIN DURING
*            ALLOCATION. THE USER CAN ELIMINATE THE FIRST BY USING
*            THE FULLY QUALIFIED NAME, PREFIX AND ALL, IN QUOTES,
*            OR BY ENTERING ALL BUT THE PREFIX, WITHOUT QUOTES,
*            PLUS THE KEYWORD 'Q'. THE LATTER IS MUCH SIMPLER
*            AND GIVES THE SAME PERFORMANCE IMPROVEMENT AS A
*            FULLY QUALIFIED NAME.
*
*            THE 'FILE' KEYWORD IS USEFUL FOR COUNTING TEMPORARY
*            DATA SETS.  IT TELLS THE COMMAND TO TREAT THE FIRST
*            OPERAND AS A FILENAME (DDNAME) INSTEAD OF A DSNAME.
*            WHATEVER DATA SET IS CURRENTLY ALLOCATED TO THE
*            FILENAME WILL BE COUNTED (AND QUICKLY, BECAUSE
*            THE COMMAND DOESNT HAVE TO ALLOCATE ANYTHING).
*
*            VARIABLE SPANNED RECORDS ARE READ SEGMENT-BY-SEGMENT
*            AND TWO COUNTS ARE DISPLAYED, ONE REPRESENTING THE
*            NUMBER OF LOGICAL RECORDS AND ANOTHER THE NUMBER
*            OF SEGMENTS.  IF THE 'SPANNED' KEYWORD IS SPECIFIED
*            THEN THE DATA IS READ RECORD-BY-RECORD (BFTEK=A)
*            AND ONLY THE COUNT OF LOGICAL RECORDS IS DISPLAYED.
*
*            NOTE - IF A NON-EXISTENT MEMBER OF A PDS IS SPECIFIED,
*            THE RESULTING 013-18 ABEND IS TRAPPED BY A DCB ABEND
*            EXIT, BUT A MESSAGE IS ISSUED BY OPEN ANYWAY. THIS
*            METHOD IS USED BECAUSE THE ADDITIONAL OVERHEAD
*            OF ALLOCATING THE PDS AND DOING A 'BLDL' WOULD
*            DEGRADE THE PERFORMANCE UNACCEPTABLY.
* ------------------------------------------------------------------ *
         SPACE
* ------------------------------------------------------------------ *
*              INTERCEPT 'LINK' MACROS IMBEDDED IN PUTLINE & STACK
*              TO MAKE SF=(E,LINKAREA) THE DEFAULT.
*
* CHNGE LOG: 02JUN92 - INCLUDED 'OBTAIN' MACRO IN THE SOURCE. WITH
*        02JUN92 - INCLUDED 'OBTAIN' MACRO IN THE SOURCE. WITH
*                  MVS/XA 2.2.3, THE MACRO IS ONLY AVAILABLE IN
*                  'SYS1.AMACLIB' (SOUNDS LIKE IBM IS TRYING TO
*                  TELL US SOMETHING).  JIM MARSHALL         JDM1
*        25JUN92 - ADDED DSECT'S  TO CODE                    JDM2
*        01AUG99 - ALIGNED AND SCRUBBED CODE FOR READABILITY.
*        03AUG99 - CONVERTED TO PLACE ANSWER IN ISPF VARIABLE
*                  SO IT CAN DISPLAY ON A PANEL.             ISP
* ------------------------------------------------------------------ *
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE
         MACRO                                                   JDM1
&NAME    OBTAIN &LIST,&DUMMY=                                    JDM1
         AIF   (T'&LIST EQ 'O').E1                               JDM1
&NAME    IHBINNRA &LIST                 LOAD REG 1               JDM1
         SVC   27                       ISSUE OBTAIN SVC         JDM1
         MEXIT                                                   JDM1
.E1      IHBERMAC 34                    LIST ADDR MISSING        JDM1
         MEND                                                    JDM1
         MACRO
&NAME    LINK  &EP=,&SF=(E,LINKAREA)
&NAME    LA    15,&SF(2)
         LA    0,*+8
         B     *+12
         DC    CL8'&EP'
         ST    0,0(0,15)
         SVC   6             ISSUE LINK SVC
         MEND
         SPACE
         GBLB  &MVS
&MVS     SETB  1                   1 - MVS   0 - SVS,MVT
         SPACE
COUNTI   CSECT
         USING *,R12,R11
         B     @PROLOG-*(,R15)
         DC    AL1(11),CL11'COUNTI'
         DC    CL16' &SYSDATE &SYSTIME '
@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)
@PROLOG  STM   14,12,12(13)
         LR    R12,R15             BASE
         LA    R15,1
         LA    R11,4095(R15,R12)   BASE
         LR    R2,R1
         USING CPPL,R2
         L     R0,@SIZE
         GETMAIN R,LV=(0)
         LR    R9,R1
         USING @DATA,R9
         ST    R13,4(,R1)          CHAIN SAVEAREA
         ST    R1,8(,R13)          CHAIN SAVEAREA
         LR    R13,R1              NEW SAVEAREA
         SPACE 1
         MVI   STATUS,0
         XC    LINKAREA(8),LINKAREA
         SLR   R15,R15
         STH   R15,RC              SET RC = 0
         ST    R15,KOUNT
         ST    R15,KOUNTSP
         SPACE
* -------------------------------------------------------- *
*        SET UP IOPL FOR PUTLINE
* -------------------------------------------------------- *
         SPACE
         LA    R15,MYIOPL
         USING IOPL,R15
         MVC   IOPLUPT(4),CPPLUPT
         MVC   IOPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,IOPLECB
         XC    MYECB,MYECB
         LA    R0,MYPTPB
         ST    R0,IOPLIOPB
         DROP  R15                 IOPL
         SPACE
         AIF   (NOT &MVS).SKIP1
         L     R15,CVTPTR          LOAD CVT POINTER              JDM2
         USING CVT,R15             ADDRESSABILITY TO CVT         JDM2
         TM    CVTPUTL,X'80'       IS PUTLINE LOADED? (VS2)      JDM2
         BNO   PUTLOAD             NO - BRANCH TO LOAD
         L     R15,CVTPUTL         YES - USE CVTPUTL
         DROP  R15                 DROP ADDRESSABILITY           JDM2
         B     PUTLOADX            BRANCH AROUND LOAD
.SKIP1   ANOP
PUTLOAD  EQU   *
         LA    R0,=CL8'IKJPUTL '
         LOAD  EPLOC=(0)
         LR    R15,R0              GET ENTRY ADDRESS
         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE
PUTLOADX EQU   *
         ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS
         SPACE
* -------------------------------------------------------- *
*        SET UP PPL FOR PARSE
* -------------------------------------------------------- *
         SPACE
         LA    R15,MYPPL
         USING PPL,R15
         MVC   PPLUPT(4),CPPLUPT
         MVC   PPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,PPLECB
         XC    MYECB,MYECB
*        L     R0,=A(COUNTPCL)
         LA    R0,PCLADDR
         ST    R0,PPLPCL
         LA    R0,MYANS
         ST    R0,PPLANS
         XC    MYANS(4),MYANS
         MVC   PPLCBUF(4),CPPLCBUF
         ST    R9,PPLUWA
         DROP  R15                 PPL
         SPACE 1
* -------------------------------------------------------- *
*        CALL THE PARSE SERVICE ROUTINE
* -------------------------------------------------------- *
         SPACE 1
         LR    R1,R15              POINT TO PPL
         AIF   (NOT &MVS).SKIP2
         L     R15,CVTPTR          LOAD CVT POINTER              JDM2
         USING CVT,R15             ADDRESSABILITY TO CVT         JDM2
         TM    CVTPARS,X'80'       IS IKJPARS LOADED ?           JDM2
         BNO   PARSELNK               THEN DO LINK, NOT CALL
         L     R15,CVTPARS         CVTPARS                       JDM2
         DROP  R15                 DROP ADDRESSABILITY           JDM2
         BALR  R14,R15             CALL IKJPARS
         B     PARSEEXT            SKIP AROUND LINK
         SPACE 1
PARSELNK EQU   *
.SKIP2   ANOP
         LINK  EP=IKJPARS,SF=(E,LINKAREA)
PARSEEXT EQU   *
         SPACE 1
         LTR   R15,R15
         BZ    PARSEOK
         LA    R1,MSG01
         LA    R0,L'MSG01
         BAL   R14,PUTMSG
         LA    R15,12
         B     EXIT
         SPACE 1
PARSEOK  EQU   *
         L     R3,MYANS
         USING IKJPARMD,R3
         SPACE
* -------------------------------------------------------- *
*        QUALIFY THE DSNAME IF NECESSARY
* -------------------------------------------------------- *
         SPACE
         LA    R6,DSN
         TM    6(R6),X'80'         IS DATASET NAME SPECIFIED?
         BO    OKDSN               YES - BRANCH
         LA    R1,MSG05            NO - JUST MEMBER NAME
         LA    R0,L'MSG05
         BAL   R14,PUTMSG
         LA    R15,12
         B     NEXTDSN
         SPACE
OKDSN    EQU   *
         LA    R15,DSNAME+2
         MVI   0(R15),C' '         BLANK THE DSNAME AREA
         MVC   1(43,R15),0(R15)
         SLR   R1,R1
         STH   R1,DSNAME           ZERO DSNAME LENGTH
         TM    6(R6),X'40'         IS DSN QUOTED?
         BO    NOPREF              YES, SKIP PREFIXING
         CLI   FILEKW+1,1          DSN TO BE TREATED AS DDNAME
         BE    NOPREF              YES, SKIP PREFIXING
         AIF   (NOT &MVS).SKIPP    PREFIX WITH PREFIX
         L     R14,CPPLUPT         POINT TO UPT
         USING UPT,R14
         IC    R1,UPTPREFL         GET LENGTH OF PREFIX
         LTR   R1,R1               IS IT ZERO
         BZ    NOPREF              YES, SKIP PREFIXING
         B     *+10
         MVC   0(0,R15),UPTPREFX
         DROP  R14                 UPT
.SKIPP   AIF   (&MVS).SKIPU        PREFIX WITH USERID
         L     R14,CPPLPSCB        POINT TO PSCB
         USING PSCB,R14
         IC    R1,PSCBUSRL         GET LENGTH OF USERID
         LTR   R1,R1               IS IT ZERO
         BZ    NOPREF              YES, SKIP PREFIXING
         B     *+10
         MVC   0(0,R15),PSCBUSER
         DROP  R14                 PSCB
.SKIPU   ANOP
         EX    R1,*-6              MOVE USERID TO DSNAME AREA
         LA    R15,0(R1,R15)       POINT PAST USERID
         MVI   0(R15),C'.'         APPEND PERIOD
         LA    R15,1(,R15)         POINT PAST PERIOD
         LA    R1,1(,R1)           ADD 1 TO LENGTH
         STH   R1,DSNAME           STORE LENGTH OF USERID PLUS 1
NOPREF   EQU   *
         LH    R1,4(,R6)           GET LENGTH
         LR    R0,R1
         AH    R0,DSNAME           ADD LENGTH OF PREFIX OR ZERO
         STH   R0,DSNAME           SET COMBINED LENGTH
         L     R14,0(,R6)          POINT TO DSN VALUE
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         B     *+10                BRANCH AROUND EXECUTED MVC
         MVC   0(0,R15),0(R14)     (EXECUTED)
         EX    R1,*-6              MOVE DSN TO DSNAME (AFTER PREFIX)
         SPACE
* -------------------------------------------------------- *
*        IF 'FILE' KEYWORD IS SPECIFIED,
*        GET DSNAME FROM JFCB USING FILE NAME.
* -------------------------------------------------------- *
         SPACE
         CLI   FILEKW+1,1          'FILE' SPECIFIED?
         BNE   NOFILE              NO, BRANCH
         CLI   DSNAME+1,8          IS LENGTH 8 OR LESS
         BH    FILERR1             NO, BRANCH
         DEVTYPE DSNAME+2,DEVDATA  GET DEVICE TYPE
         LTR   R15,R15             WAS FILENAME VALID
         BNZ   FILERR2             NO, BRANCH
         TM    DEVDATA+2,X'20'     DIRECT ACCESS
         BZ    FILERR3             NO, BRANCH
         LA    R4,DYNDCBW
         MVC   0(DYNDCBL,R4),DYNDCB
         LA    R0,JFCB
         LA    R1,DYNEXLST
         ST    R0,0(,R1)
         MVI   0(R1),X'87'
         ST    R1,36(,R4)          DCBEXLST
         MVC   40(8,R4),DSNAME+2   DCBDDNAM
         MVC   DDSAVE,DSNAME+2
         MVI   OPEND,X'80'
         RDJFCB ((R4)),MF=(E,OPEND)
         MVC   DSNAME+2(44),JFCB
         LA    R1,DSNAME+45        LAST CHAR OF DSNAME
         LA    R0,44               INITIAL LENGTH
FILEA    EQU   *
         CLI   0(R1),C' '          IS THIS LAST NONBLANK
         BNE   FILEB               YES, BRANCH
         BCTR  R1,0                BACK UP 1 CHARACTER
         BCT   R0,FILEA            DECREMENT LENGTH AND BRANCH
FILEB    EQU   *
         STH   R0,DSNAME           STORE LENGTH OF DSNAME
*        MVC   VOLUME(6),JFCB+118  GET VOLUME FROM JFCB
         B     FILESPEC
         SPACE
FILERR1  EQU   *
         LA    R0,MSG14A
         B     FILERR
         SPACE
FILERR2  EQU   *
         LA    R0,MSG14B
         B     FILERR
         SPACE
FILERR3  EQU   *
         LA    R0,MSG14C
FILERR   EQU   *
         MVC   MSGWK(L'MSG14),MSG14
         LA    R15,MSGWK+L'MSG14
         LA    R14,DSNAME
         LH    R1,0(,R14)
         BCTR  R1,0
         B     *+10
         MVC   MSGWK+L'MSG14(0),2(R14)
         EX    R1,*-6
         LA    R15,1(R1,R15)
         LR    R14,R0 POINT TO MSG14A, B, OR C
         MVC   0(L'MSG14A,R15),0(R14)
         LA    R0,L'MSG14+L'MSG14A+1(,R1)
         LA    R1,MSGWK
         BAL   R14,PUTMSG
         B     NEXTD12
         SPACE
NOFILE   EQU   *
         TM    6(R6),X'40'         IS IT QUOTED?
         BO    DEFX                YES - SKIP DEFAULT SERVICE
         CLI   QUICKW+1,1          QUICK SPECIFIED
         BE    DEFX                YES, USER ENTERED ALL BUT PREFIX
         SPACE
         LA    R15,MYIOPL
         USING IOPL,R15
         LA    R14,MYDFPB
         ST    R14,IOPLIOPB
         USING DFPB,R14
         XC    0(20,R14),0(R14)
         LA    R0,DSNAME
         ST    R0,DFPBDSN
         OI    DFPBCODE,X'04'      SEARCH CAT AND PROMPT IF MULTI
         MVC   DFPBPSCB,CPPLPSCB
*        MVI   DFPBCNTL,X'20'      PREFIX THE DSNAME
         DROP  R14                 DFPB
         SPACE
         LA    R1,MYIOPL
         SPACE
         LR    R1,R15              POINT TO IOPL
         AIF   (NOT &MVS).SKIP4
         L     R15,CVTPTR          LOAD CVT POINTER              JDM2
         USING CVT,R15             ADDRESSABILITY TO CVT         JDM2
         TM    CVTEHDEF,X'80'      IS IKJEHDEF LOADED ?          JDM2
         BNO   EHDEFLNK               THEN DO LINK, NOT CALL
         L     R15,CVTEHDEF        CVTEHDEF
         DROP  R15                 DROP ADDRESSABILITY           JDM2
         BALR  R14,R15             CALL IKJEHDEF
         B     EHDEFEXT            SKIP AROUND LINK
         SPACE
EHDEFLNK EQU   *
.SKIP4   ANOP
         LINK  EP=IKJEHDEF,SF=(E,LINKAREA)
         SPACE
EHDEFEXT EQU   *
         B     DEFCODE(R15)
DEFCODE  B     DEF00               SUCCESS
         B     NEXTDSN              MSG ALREADY ISSUED
         B     DEF08               INVALID NAME GT 44
         B     NEXTDSN              MSG ALREADY ISUED
         B     DEF16               NOT IN CATALOG
         B     DEF20               NOT IN CATALOG
         B     DEF24               IMPOSSIBLE
         B     DEF28               COMMAND SYSTEM ERROR
         B     DEF32               IMPOSSIBLE
         B     DEF36               ?
DEF08    EQU   *
DEF16    EQU   *
         B     DEF24
DEF20    EQU   *
LOCERR   EQU   *
         MVC   MSGWK(L'MSG02),MSG02
         LA    R15,MSGWK+L'MSG02
         LA    R14,DSNAME
         LH    R1,0(,R14)
         BCTR  R1,0
         B     *+10
         MVC   MSGWK+L'MSG02(0),2(R14)
         EX    R1,*-6
         LA    R15,1(R1,R15)
         MVC   0(L'MSG02A,R15),MSG02A
         LA    R0,L'MSG02+L'MSG02A+1(,R1)
         LA    R1,MSGWK
         BAL   R14,PUTMSG
         B     NEXTDSN
DEF24    EQU   *
DEF28    EQU   *
DEF32    EQU   *
DEF36    EQU   *
         LA    R1,MSG03
         LA    R0,L'MSG03
         BAL   R14,PUTMSG
         B     NEXTDSN
         SPACE
DEF00    EQU   *
DEFX     EQU   *
         SPACE
* -------------------------------------------------------- *
*        ALLOCATE THE DATASET
* -------------------------------------------------------- *
         SPACE
         LA    R1,MYDAPL
         USING DAPL,R1
         MVC   DAPLUPT(4),CPPLUPT
         MVC   DAPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,DAPLECB
         MVC   DAPLPSCB(4),CPPLPSCB
         LA    R15,MYDAPB
         ST    R15,DAPLDAPB
         DROP  R1                  DAPL
         USING DAPB08,R15
         XC    0(84,R15),0(R15)
         MVI   DA08CD+1,X'08'
         LA    R0,DSNAME
         ST    R0,DA08PDSN
         MVC   DA08DDN(8),=CL8' '
         MVC   DA08UNIT,=CL8' '
         MVC   DA08SER,=CL8' '
         MVC   DA08MNM,=CL8' '
         MVC   DA08PSWD,=CL8' '
         MVI   DA08DSP1,DA08SHR
         MVI   DA08DPS2,DA08KEEP
         MVI   DA08DPS3,DA08KEP
         TM    14(R6),X'80'        MEMBER SPECIFIED?
         BZ    MEMBX               NO - BRANCH
         LH    R1,12(,R6)          GET LENGTH OF MEMBER
         BCTR  R1,0                MINUS 1 FOR EX
         L     R14,8(,R6)          GET ADDRESS OF MEMBER NAME
         B     *+10
         MVC   DA08MNM(0),0(R14)   MOVE MEMBER NAME
         EX    R1,*-6
MEMBX    EQU   *
         TM    22(R6),X'80'        PASSWORD SPECIFIED?
         BZ    PASSX               NO - BRANCH
         LH    R1,20(,R6)          GET LENGTH OF PSWD
         BCTR  R1,0                MINUS 1 FOR EX
         L     R14,16(,R6)         GET ADDRESS OF PSWD
         B     *+10
         MVC   DA08PSWD(0),0(R14)  MOVE PSWD
         EX    R1,*-6
PASSX    EQU   *
         LA    R1,MYDAPL
         SPACE
         BAL   R14,CALLDAIR
         LTR   R15,R15
         BZ    OKDAIR
         BAL   R14,DAIRFAIL
         LA    R15,12
         B     NEXTDSN
         SPACE
OKDAIR   EQU   *
         OI    STATUS,X'40'        TELL CLEANUP TO FREE IT
         LA    R15,MYDAPB
         MVC   DDSAVE,DA08DDN
         TM    DA08DSO,X'40'       IS DSORG SEQUENTIAL?
         BO    OKDSORG             YES - BRANCH
         TM    DA08DSO,X'02'       IS DSORG PARTITIONED?
         BO    OKDSORGP            YES, BRANCH
         SPACE
* -------------------------------------------------------- *
*        DSORG IS NEITHER PS NOR PO
*        ISAM=X'80' DA=X'20' VSAM=X'00' NONE=X'00'
* -------------------------------------------------------- *
         SPACE
ERRDSORG EQU   *
         LA    R1,MSG06
         LA    R0,L'MSG06
         BAL   R14,PUTMSG
         LA    R15,12
         B     NEXTDSN
         SPACE
OKDSORGP EQU   *
         CLC   DA08MNM,=CL8' '     WAS MEMBER SPECIFIED?
         BNE   OKDSORG             YES - BRANCH
         LA    R1,MSG07
         LA    R0,L'MSG07
         BAL   R14,PUTMSG
         LA    R15,12
         B     NEXTDSN
         SPACE
OKDSORG  EQU   *
         DROP  R15                 DAPB08
         SPACE
* -------------------------------------------------------- *
*        CHECK FORMAT-1 DSCB FOR EMPTY DATA SET
* -------------------------------------------------------- *
         SPACE
         L     R1,CVTPTR           GET ADDRESS OF CVT            JDM2
         USING CVT,R1              ADDRESSABILITY TO CVT         JDM2
         L     R1,CVTTCBP          GET ADDRESS OF DOUBLEWORD     JDM2
         DROP  R1                                                JDM2
         L     R1,4(,R1)           R1 = ADDR OF CURRENT TCB      JDM2
         USING TCB,R1              ADDRESSABILITY TO TCB         JDM2
         L     R1,TCBTIO           GET ADDRESS OF TIOT           JDM2
         DROP  R1                                                JDM2
         USING TIOT1,R1            ADDRESSABILITY TO TIOT        JDM2
         LA    R1,TIOELNGH         TOIENTRY                      JDM2
DDLOOP   EQU   *
         CLI   0(R1),0             END OF TIOT
         BE    NEXTDSN             YES, BRANCH (NEVER HAPPENS)
         CLC   4(8,R1),DDSAVE      DOES DDNAME MATCH
         BE    DDFOUND
         SLR   R15,R15
         IC    R15,0(,R1)
         LA    R1,0(R15,R1)
         B     DDLOOP
         SPACE
DDFOUND  EQU   *
         L     R15,16(,R1)         TIOEFSRT-1
         TM    18(R15),X'20'       DIRECT ACCESS DEVICE?
         DROP  R1                  GIVEUP ADDRESSABILITY         JDM2
         BZ    OBTX                NO, BYPASS OBTAIN
         MVC   VOLSER,28(R15)      UCBVOLI
OBTDSCB  EQU   *
         LA    R1,OBTAINW
         MVC   0(OBTAINL,R1),OBTAIN
         LA    R0,DSNAME+2         DSN FOR OBTAIN
         ST    R0,4(,R1)
         LA    R0,VOLSER           VOLUME FOR OBTAIN
         ST    R0,8(,R1)
         LA    R0,MYDSCB           ANSWER AREA FOR OBTAIN
         ST    R0,12(,R1)
         OBTAIN (1)
         LTR   R15,R15             WAS OBTAIN SUCCESSFUL
         BZ    OKDSCB              YES, BRANCH
         SPACE
* -------------------------------------------------------- *
*        OBTAIN HAS FAILED. HOW CAN THAT HAPPEN WHEN
*        DYNAMIC ALLOCATION WAS SUCCESSFUL? ONE WAY IT
*        CAN HAPPEN IS IF THE DSNAME IS AN ALIAS ENTRY
*        IN A VSAM CATALOG.  IF IT IS, A 'LOCATE' WILL
*        PUT THE TRUE NAME IN THE DSNAME FIELD, SO NOW
*        WE ISSUE A LOCATE, AND TRY THE OBTAIN AGAIN.
* -------------------------------------------------------- *
         SPACE
         TM    STATUS,X'08'        HAS LOCATE BEEN TRIED ALREADY?
         BZ    ALIAS               NO, GO TRY IT
ERROBT   EQU   *
         LA    R1,MSG09            UNABLE TO OBTAIN DSCB
         LA    R0,L'MSG09
         BAL   R14,PUTMSG
         LA    R15,12
         B     NEXTDSN
         SPACE
ALIAS    EQU   *
         OI    STATUS,X'08'        TRIP THE SWITCH
         LA    R1,LOCATEW
         MVC   0(LOCATEL,R1),LOCATE
         LA    R0,DSNAME+2         DSNAME FOR LOCATE
         ST    R0,4(,R1)
         LA    R0,LOCBUF           ANSWER AREA FOR LOCATE
         ST    R0,12(,R1)
         LOCATE (1)
         LTR   15,15               WAS LOCATE SUCCESSFUL?
         BZ    OBTDSCB             YES, GO OBTAIN AGAIN
         B     ERROBT              NO, ISSUE MESSAGE
         SPACE
OKDSCB   EQU   *
         NI    STATUS,255-X'08'    TURN OFF LOCATE SWITCH
         TM    MYDSCB-44+X'52',X'42' DSORG = PS OR PO
         BZ    ERRDSORG
         TM    MYDSCB-44+X'54',X'C0' RECFM = U
         BO    ERRRECFM
         CLC   MYDSCB-44+X'62'(3),=X'000000' CHECK DS1LSTAR
         BE    DYNEOD              BRANCH IF EMPTY DATA SET
OBTX     EQU   *
FILESPEC EQU   *
         SPACE
* -------------------------------------------------------- *
*        SET UP THE DCB
* -------------------------------------------------------- *
         SPACE
         MVC   DYNDCBW(DYNDCBL),DYNDCB
         LA    R4,DYNDCBW
         USING IHADCB,R4
         MVC   DCBDDNAM(8),DDSAVE
         SPACE
         SLR   R5,R5               R5 ZERO MEANS NOT-SPANNED
         CLI   SPANKW+1,1          'SPANNED' SPECIFIED
         BNE   *+6                 NO, LEAVE R5 ZERO
         BCTR  R5,0                YES, SPANNED, SET BFTEK=A SWITCH
         SPACE
         LA    R15,DYNEOD
         IC    R0,DCBEODAD-1
         ST    R15,DCBEODAD-1
         STC   R0,DCBEODAD-1
         SPACE
         LA    R15,DYNSYNAD
         IC    R0,DCBSYNAD-1
         ST    R15,DCBSYNAD-1
         STC   R0,DCBSYNAD-1
         SPACE
         LA    R15,DYNEXLST
         IC    R0,DCBEXLSA-1
         ST    R15,DCBEXLSA-1
         STC   R0,DCBEXLSA-1
         LA    R1,DYNDCBEX
         ST    R1,0(,R15)
         MVI   0(R15),X'05'
         LA    R1,DYNABEND
         ST    R1,4(,R15)
         MVI   4(R15),128+X'11'    OPEN ABEND EXIT (MVS)
         SPACE
         OI    STATUS,X'80'        TELL CLEANUP TO CLOSE DCB
         MVI   OPEND,X'80'
         SPACE
         OPEN  ((R4),INPUT),MF=(E,OPEND)
         SPACE
         TM    DCBOFLGS,X'10'
         BO    OKOPEN
         LA    R1,MSG08
         LA    R0,L'MSG08
         TM    STATUS,X'10'        MEMBER NOT FOUND?
         BO    DYNOPENM            YES, BRANCH
         LA    R1,MSG04
         LA    R0,L'MSG04
DYNOPENM EQU   *
         BAL   R14,PUTMSG
         LA    R15,12
         B     NEXTDSN
         SPACE
DYNDCBEX EQU   *
         LTR   R5,R5               'SPANNED' SPECIFIED
         BZR   R14                 NO, READ SEGMENT BY SEGMENT
         TM    DCBRECFM,X'C0'      RECFM U
         BOR   R14                 YES - BRANCH
         TM    DCBRECFM,X'48'      VARIABLE SPANNED
         BNOR  R14                 NO - BRANCH
         OI    DCBBFTEK,X'60'      BFTEK=A
         BR    R14
         SPACE
DYNABEND EQU   *
         L     R8,0(,R1)           GET COMPLETION CODE
         N     R8,=A(X'FFF0FF00')
         CL    R8,=A(X'01301800')  IS IT AN 013-18 ABEND
         BE    *+10                YES, BRANCH
         MVI   4(R1),0             ABNORMALLY TERMINATE
         BR    R14
         OI    STATUS,X'10'        INDICATE MEMBER NOT FOUND
         MVI   3(R1),4             IGNORE THE ABEND
         BR    R14
         SPACE
OKOPEN   EQU   *
         SLR   R5,R5
         TM    DCBRECFM,X'C0'      RECFM U
         BO    NOSEGS
         TM    DCBRECFM,X'48'      RECFM VS
         BNO   NOSEGS
         CLI   SPANKW+1,1          USING BFTEK=A
         BE    NOSEGS
         BCTR  R5,0                COUNT SEGMENTS AND FIRST-SEGMENTS
NOSEGS   EQU   *
         SPACE
READLOOP EQU   *
         MVI   SYNADSW,0           SET SYNAD SWITCH OFF
         SPACE
         GET   (R4)
         SPACE
         CLI   SYNADSW,0           WAS SYNAD EXIT TAKEN?
         BE    OKGET               NO - BRANCH
         LA    R1,SYNADMSG
         LA    R0,78
         BAL   R14,PUTMSG
         LA    R15,12
         B     NEXTDSN
         SPACE
OKGET    EQU   *
         LA    R14,1
         A     R14,KOUNT
         ST    R14,KOUNT
         LTR   R5,R5               ARE WE READING SEGMENTS
         BZ    READLOOP            NO, BRANCH
         CLI   2(R1),1             0 OR 1 (COMPLETE OR FIRST SEGMENT)
         BH    READLOOP            NO, DONT COUNT IT AS A RECORD
         LA    R14,1
         A     R14,KOUNTSP
         ST    R14,KOUNTSP         COUNT COMPLETE OR FIRST SEGMENT
         B     READLOOP
         SPACE
DYNEOD   EQU   *
         LTR   R5,R5               WERE WE READING SEGMENTS
         BZ    NOSWAP              NO, LEAVE COUNTERS UNCHANGED
         L     R14,KOUNT           YES, SWAP SEGMENT COUNT
         L     R15,KOUNTSP              WITH RECORD COUNT
         ST    R14,KOUNTSP
         ST    R15,KOUNT
NOSWAP   EQU   *
         LA    R1,MSGWK
         MVC   0(10,R1),=X'40206B2020206B202120'
         MVC   10(8,R1),=C' RECORDS'
         CLC   KOUNT,=F'1'
         BNE   *+8
         MVI   17(R1),C' '      CHANGE 'RECORDS' TO 'RECORD '
         L     R15,KOUNT
         CVD   R15,DOUBLE
         ED    0(10,R1),DOUBLE+4
         SPACE
SHIFLEFT EQU   *
         CLI   0(R1),C' '       LEADING BLANK?
         BNE   SHIFTED          NO - READY TO ISSUE
         MVC   0(17,R1),1(R1)   SHIFT LEFT 1
         MVI   17(R1),C' '      BLANK LAST BYTE
         B     SHIFLEFT
         SPACE
SHIFTED  EQU   *
         LTR   R5,R5            WERE WE READING SEGMENTS
         BZ    SHOWTOTL         NO, BRANCH
         MVC   18(10,R1),=X'40206B2020206B202120'
         MVC   28(9,R1),=C' SEGMENTS'
         L     R15,KOUNTSP
         CVD   R15,DOUBLE
         ED    18(10,R1),DOUBLE+4
         LA    R0,18+19
         B     *+8
SHOWTOTL EQU   *
         LA    R0,18
         BAL   R14,PUTLINE
         LA    R15,0
         B     NEXTDSN
         SPACE
NEXTD12  EQU   *
         LA    R15,12
         SPACE
NEXTDSN  EQU   *
         CH    R15,RC
         BNH   *+8
         STH   R15,RC              SET HIGHEST RC
         TM    STATUS,X'80'
         BZ    NOCLOSE
         TM    DCBOFLGS,X'10'      IS IT OPEN?
         BZ    NOCLOSE             NO, BRANCH
         MVI   CLOSED,X'80'
         CLOSE ((R4)),MF=(E,CLOSED)
         NI    STATUS,255-X'80'    CLOSED
         DROP  R4                  IHADCB
NOCLOSE  EQU   *
         TM    STATUS,X'40'        FREE REQUIRED?
         BZ    NOFREE
         LA    R1,MYDAPL
         LA    R15,MYDAPB
         USING DAPB18,R15
         XC    0(40,R15),0(R15)
         MVI   DA18CD+1,X'18'
         MVC   DA18DDN,DDSAVE
         MVC   DA18MNM(8),=CL8' '
         MVC   DA18SCLS(2),=CL8' '
         BAL   R14,CALLDAIR        UNALLOCATE
         NI    STATUS,255-X'40'    UNALLOCATED
         DROP  R15                 DAPB18
NOFREE   EQU   *
         SPACE
         IKJRLSA MYANS
         SPACE
         CLI   RC+1,0              IS RC ZERO?
         BZ    STACKDX             YES, BRANCH
         MVC   MYSTPB(STACKDL),STACKD
         SPACE
         STACK DELETE=ALL,PARM=MYSTPB,MF=(E,MYIOPL)
         SPACE
         TCLEARQ
STACKDX  EQU   *
         SPACE
         LH    R15,RC
         B     EXIT
         SPACE
* -------------------------------------------------------- *
*         CALL IKJDAIR SERVICE ROUTINE
* -------------------------------------------------------- *
          SPACE
CALLDAIR EQU   *
         ST    R14,DAIRREGS
         AIF   (NOT &MVS).SKIP6
         L     R15,CVTPTR          LOAD CVT POINTER              JDM2
         USING CVT,R15             ADDRESSABILITY TO CVT         JDM2
*        TM    732(R15),X'80'     CVTDAIR
         TM    CVTDAIR,X'80'       IS IKJDAIR LOADED ?           JDM2
         BNO   DAIRLINK
         L     R15,CVTDAIR         GET ADDRESS                   JDM2
         DROP  R15                 DROP ADDRESSABILITY           JDM2
         BALR  R14,R15
         B     DAIRFINI
         SPACE
DAIRLINK EQU   *
.SKIP6   ANOP
         LINK  EP=IKJDAIR,SF=(E,LINKAREA)
         SPACE
DAIRFINI EQU   *
         L     R14,DAIRREGS
         BR    R14
         SPACE
* -------------------------------------------------------- *
*        DYNAMIC ALLOCATION FAILURE ROUTINE
* -------------------------------------------------------- *
         SPACE
DAIRFAIL EQU   *
         ST    R14,MYDFREGS
         AIF   (NOT &MVS).SKIP7
         LA    R1,MYDFPARM
         USING DFDSECTD,R1
         ST    R15,MYDFRC
         LA    R15,MYDFRC
         ST    R15,DFRCP
         LA    R15,MYDAPL
         ST    R15,DFDAPLP
         SLR   R15,R15
         ST    R15,MYJEFF02
         LA    R15,MYJEFF02
         ST    R15,DFJEFF02
         LA    R15,DFDAIR
         STH   R15,MYDFID
         LA    R15,MYDFID
         ST    R15,DFIDP
         SLR   R15,R15
         ST    R15,DFCPPLP
         LINK  EP=IKJEFF18,SF=(E,LINKAREA)
         L     R15,MYDFRC
         DROP  R1                  DFDSECTD
.SKIP7   ANOP
         AIF   (&MVS).SKIP8
         LA    R1,MSGDAIR
         LA    R0,L'MSGDAIR
         BAL   R14,PUTMSG
.SKIP8   ANOP
         L     R14,MYDFREGS
         BR    R14
         SPACE
* -------------------------------------------------------- *
*        PUTMSG ROUTINE
* -------------------------------------------------------- *
         SPACE
PUTMSG   EQU   *
         STM   R14,R1,PUTLINS
         XC    MYOLD(8),MYOLD
         XC    MYSEG1(4),MYSEG1
         MVC   MYPTPB(12),MODLPTPM
         LA    R14,1               NO. OF MESSAGE SEGMENTS
         ST    R14,MYOLD
         LA    R14,MYSEG1          POINT TO 1ST SEGMENT
         ST    R14,MYOLD+4
         LR    R14,R0              LENGTH IN R0
         LA    R14,4(,R14)         ADD 4
         LA    R15,MYSEG1+4
         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?
         BE    *+16                YES - BRANCH
         LA    R14,1(,R14)         ADD 1 TO LENGTH
         MVI   0(R15),C' '         INSERT LEADING BLANK
         LA    R15,1(,R15)         BUMP POINTER
         STH   R14,MYSEG1
         LR    R14,R0
         BCTR  R14,0
         B     *+10
         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN
         EX    R14,*-6
         L     R15,MYPUTLEP
         SPACE
         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,MYIOPL)
         SPACE
         LM    R14,R1,PUTLINS
         BR    R14
         SPACE
* -------------------------------------------------------- *
*        PUTLINE ROUTINE
* -------------------------------------------------------- *
         SPACE
PUTLINE  EQU   *
*                  VERSUS BEING RETURNED VIA TSO PUTLINE.
*----------------------------------------------------------*     ISP
*        ISPF VARIABLE CODE                                      ISP
*----------------------------------------------------------*     ISP
         SPACE 1                                                 ISP
ISPFLINE EQU   *                                                 ISP
         STM   R14,R1,PUTLINS                                    ISP
         MVC   IRESULT(18),=CL18' ' BLANK AREA                   ISP
         MVC   IRESULT(18),0(R1)    MOVE IN ANSWER               ISP
*        TPUT  IRESULT,18           FOR DEBUG PURPOSES ONLY      ISP
         SPACE 1                                                 ISP
*----------------------------------------------------------------ISP*
*        ISSUE VDEFINE FOR ALL 3 VARIABLES.                      ISP
*----------------------------------------------------------------ISP*
ISPF1    EQU   *                                                 ISP
         LA    R7,VDEF             GET ADDR OF VDEF              ISP
         ST    R7,CALL1            STASH THE ADDRESS             ISP
         LA    R7,CNTI             GET ADDR OF VARIABLE          ISP
         ST    R7,CALL1+4          STASH THE ADDRESS             ISP
         LA    R7,IRESULT          GET ADDR OF ANSWER            ISP
         ST    R7,CALL1+8          STASH THE ADDRESS             ISP
         LA    R7,CHAR             GET ADDR OF CHAR              ISP
         ST    R7,CALL1+12         STASH THE ADDRESS             ISP
         LA    R7,18               GET LENGTH                    ISP
         ST    R7,ISPFLEN          SAVE THE LENGTH               ISP
         LA    R7,ISPFLEN          GET ADDR OF LENGTH FIELD      ISP
         ST    R7,CALL1+16         STASH THE ADDRESS             ISP
         OI    CALL1+16,X'80'      FLIP ON HIGH ORDER BIT        ISP
         SPACE 1                                                 ISP
         LA    R1,CALL1            GET PARAM LIST ADDR           ISP
         LINK  EP=ISPLINK          GO OFF TO ISPLINK             ISP
         LTR   R15,R15                                           ISP
         BZ    ISPF2                                             ISP
         LR    R3,R15              SAVE RETURN CODE              ISP
         B     ABEND1              TRAP                          ISP
         SPACE 1                                                 ISP
*----------------------------------------------------------------ISP-*
*        WRITE THE VALUE INTO THE SHARED VARIABLE POOL           ISP
*----------------------------------------------------------------ISP-*
         SPACE 1                                                 ISP
ISPF2    EQU   *                                                 ISP
         LA    R7,VPUT             GET ADDR OF VPUT              ISP
         ST    R7,CALL2            STASH THE ADDRESS             ISP
         LA    R7,CNTI             GET ADDR OF VARIABLE NAME     ISP
         ST    R7,CALL2+4          STASH THE ADDRESS             ISP
         LA    R7,SHR              GET ADDR OF SHR               ISP
         ST    R7,CALL2+8          STASH THE ADDRESS             ISP
         OI    CALL2+8,X'80'       FLIP ON HIGH ORDER BIT        ISP
         LA    R1,CALL2            GET PARAM LIST ADDR           ISP
         LINK  EP=ISPLINK          GO OFF TO ISPLINK             ISP
         LTR   R15,R15                                           ISP
         BZ    ISPF3                                             ISP
         LR    R3,R15              SAVE RETURN CODE              ISP
         B     ABEND2              TRAP                          ISP
         SPACE 1                                                 ISP
*----------------------------------------------------------------ISP-*
*        DELETE THE VARIABLE FROM THIS POOL                      ISP
*----------------------------------------------------------------ISP-*
         SPACE 1                                                 ISP
ISPF3    EQU   *                                                 ISP
         LA    R7,VDEL             GET ADDR OF VDEL              ISP
         ST    R7,CALL3            STASH THE ADDRESS             ISP
         LA    R7,CNTI             GET ADDR OF RESULT            ISP
         ST    R7,CALL3+4          STASH THE ADDRESS             ISP
         OI    CALL3+4,X'80'       FLIP ON HIGH ORDER BIT        ISP
         SPACE 1                                                 ISP
         LA    R1,CALL3            GET PARAM LIST ADDR           ISP
         LINK  EP=ISPLINK          GO OFF TO ISPLINK             ISP
         LTR   R15,R15                                           ISP
         BZ    ISPFEND                                           ISP
         LR    R3,R15              SAVE RETURN CODE              ISP
         B     ABEND3              TRAP                          ISP
         SPACE 1                                                 ISP
ISPFEND  EQU   *                                                 ISP
         LM    R14,R1,PUTLINS                                    ISP
         BR    R14                                               ISP
         SPACE 1                                                 ISP
* ---------------------------------------------------------------ISP *
*        STRANDED PUTLINE CODE FOR FUTURE REFERENCE.             ISP
* ---------------------------------------------------------------ISP *
         SPACE
         STM   R14,R1,PUTLINS
         XC    MYSEG1(4),MYSEG1
         MVC   MYPTPB(12),MODLPTPB
         LR    R14,R0              LENGTH IN R0
         LA    R14,4(,R14)         ADD 4
         STH   R14,MYSEG1
         LR    R14,R0
         BCTR  R14,0
         B     *+10
         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN
         EX    R14,*-6
         LA    R1,MYIOPL
         L     R15,MYPUTLEP
         SPACE
         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))
         SPACE
         LM    R14,R1,PUTLINS
         BR    R14
         SPACE 1
ERRRECFM EQU   *
         LA    R1,MSGRECFM
         LA    R0,L'MSGRECFM
         BAL   R14,PUTMSG
         B     NEXTD12
         SPACE
EXIT     EQU   *
         LR    R1,R13
         L     R0,@SIZE
         L     R13,4(,R13)
         ST    R15,16(,R13)
         FREEMAIN R,A=(1),LV=(0)
         LM    R14,R12,12(R13)
         BR    R14
         SPACE
* -------------------------------------------------------- *
*        SYNAD EXIT:
*        THIS ROUTINE IS ENTERED DURING THE 'GET' MACRO
*        IF AN I/O ERROR OCCURS.
* -------------------------------------------------------- *
         SPACE
DYNSYNAD EQU   *
         SYNADAF ACSMETH=QSAM
         MVC   SYNADMSG(78),50(R1)
         MVI   SYNADSW,X'FF'
         SYNADRLS
         BR    R14
         SPACE
ABEND1   ABEND 1,DUMP                                            ISP
ABEND2   ABEND 2,DUMP                                            ISP
ABEND3   ABEND 3,DUMP                                            ISP
*----------------------------------------------------------------ISP-*
*        DEFINE THE CONSTANTS, ISPF NEEDS THEM 8 BYTES LONG      ISP
*----------------------------------------------------------------ISP-*
VDEF     DC    CL8'VDEFINE'                                      ISP
VPUT     DC    CL8'VPUT'                                         ISP
VDEL     DC    CL8'VDELETE'                                      ISP
SHR      DC    CL8'SHARED'                                       ISP
CNTI     DC    CL8'(CNTI)  '       ENSURE ONE BLANK AT END !!!   ISP
CHAR     DC    CL8'CHAR'           ACCT IS CHARACTER DEFINED     ISP
         SPACE 1                                                 ISP
* -------------------------------------------------------- *
*        CONSTANTS
* -------------------------------------------------------- *
         SPACE
MODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L
         SPACE
MODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L
         SPACE
         PRINT NOGEN
         SPACE
DYNDCB   DCB   DDNAME=DYNAM,DSORG=PS,MACRF=(GL),                       +
               EODAD=0,SYNAD=0,EROPT=ACC
DYNDCBL  EQU   *-DYNDCB
         SPACE
         PRINT GEN
         SPACE
OBTAIN   CAMLST SEARCH,2,3,4
OBTAINL  EQU   *-OBTAIN
         SPACE
LOCATE   CAMLST NAME,2,,4
LOCATEL  EQU   *-LOCATE
         SPACE
STACKD   STACK DELETE=ALL,MF=L
STACKDL  EQU   *-STACKD
         SPACE
MSG01    DC    C'ERROR IN PARSE SERVICE ROUTINE'
MSG02    DC    C'IKJ58503I DATA SET '
MSG02A   DC    C' NOT IN CATALOG'
MSG03    DC    C'ERROR IN DEFAULT SERVICE ROUTINE'
MSG04    DC    C'UNABLE TO OPEN DATASET'
MSG05    DC    C'IKJ58509I DATA SET NAME REQUIRED WHEN MEMBER IS SPECIF+
               IED'
MSG06    DC    C'ORGANIZATION OF DATA SET MUST BE PARTITIONED OR SEQUEN+
               TIAL'
MSG07    DC    C'DATA SET IS PARTITIONED, MEMBER NOT SPECIFIED'
MSG08    DC    C'SPECIFIED MEMBER NOT FOUND IN DATASET'
MSG09    DC    C'UNABLE TO OBTAIN DSCB FOR DATA SET'
MSG14    DC    C'FILENAME '
MSG14A   DC    C' INVALID, MORE THAN 8 CHARACTERS  '
MSG14B   DC    C' IS NOT CURRENTLY ALLOCATED       '
MSG14C   DC    C' NOT ALLOCATED TO A DASD DATA SET '
MSGRECFM DC    C'RECORD FORMAT U NOT SUPPORTED'
MSGDAIR  DC    C'UNABLE TO ALLOCATE'
         LTORG
PCLADDR  DC    0D'0'               END OF CSECT
         SPACE
* -------------------------------------------------------- *
*        PARSE PARAMETERS
* -------------------------------------------------------- *
         SPACE
         PRINT NOGEN
COUNTPCL IKJPARM
DSN      IKJPOSIT DSNAME,PROMPT='DATA SET NAME'
FILEKW   IKJKEYWD
         IKJNAME 'FILE'
QUICKW   IKJKEYWD
         IKJNAME 'QUICK'
SPANKW   IKJKEYWD
         IKJNAME 'SPANNED'
         IKJENDP
         PRINT GEN
         SPACE
* -------------------------------------------------------- *
*        DSECTS
* -------------------------------------------------------- *
         SPACE
@DATA    DSECT
         DS    18F                 REGISTER SAVEAREA
LINKAREA DS    2F
MYPPL    DS    7F
MYANS    DS    F
MYECB    DS    F                  USED BY PUTLINE ROUTINE
MYIOPL   DS    4F                 USED BY PUTLINE ROUTINE
MYPTPB   DS    3F                 USED BY PUTLINE ROUTINE
MYOLD    DS    2F                 USED BY PUTLINE ROUTINE
MYSEG1   DS    2H,CL256           USED BY PUTLINE ROUTINE
PUTLINS  DS    4F                 USED BY PUTLINE ROUTINE
MYPUTLEP DS    F                  ADDRESS OF IKJPUTL
MYSTPB   DS    0F                 5 WORDS USED BY STACK DELETE
MYDAPL   DS    5F
MYDAPB   DS    21F
MYDFPB   DS    5F
DSNAME   DS    H,CL44
VOLSER   DS    CL6
LOCATEW  DS    0F
OBTAINW  DS    4F
LOCBUF   DS    0D                  USES NEXT 265 BYTES
MYDSCB   DS    CL140               96 BYTES OF DSCB, 5 BYTES CCHHR
MSGWK    DS    CL128
STATUS   DS    X
RC       DS    H
MYDFPARM DS    5F  USED BY DAIRFAIL
MYDFREGS DS    F   USED BY DAIRFAIL
MYDFRC   DS    F   USED BY DAIRFAIL
MYJEFF02 DS    F   USED BY DAIRFAIL
MYDFID   DS    H   USED BY DAIRFAIL
DOUBLE   DS    D
EIGHT    DS    CL8
DDSAVE   DS    CL8
DAIRREGS DS    F
OPEND    DS    0F
CLOSED   DS    F
DYNEXLST DS    2F
KOUNT    DS    F
KOUNTSP  DS    F
DYNDCBW  DS    0D,XL(DYNDCBL)
SYNADSW  DS    F
SYNADMSG DS    CL78
DEVDATA  DS    2F
JFCB     DS    0F,CL176
IRESULT  DS    CL18                                              ISP
ISPFLEN  DS    F                                                 ISP
CALL1    DS    0CL20                                             ISP
         DS    F                   A(VDEF)                       ISP
         DS    F                   A(VARIABLE NAME)              ISP
         DS    F                   A(VARIABLE VALUE)             ISP
         DS    F                   A(CHAR)                       ISP
         DS    F                   A(L4+X'80000000')             ISP
         SPACE 1                                                 ISP
*----------------------------------------------------------------ISP-*
*        DATA AREA TO WRITE VARIABLE INTO SHARED POOL            ISP
*----------------------------------------------------------------ISP-*
         SPACE 1                                                 ISP
         DS    0F                                                ISP
CALL2    DS    0CL12                                             ISP
         DS    F                   A(VPUT)                       ISP
         DS    F                   A(VARIABLE NAME)              ISP
         DS    F                   A(SHR+X'80000000')            ISP
         SPACE 1                                                 ISP
*----------------------------------------------------------------ISP-*
*        DATA AREA TO WRITE VARIABLE INTO SHARED POOL            ISP
*----------------------------------------------------------------ISP-*
         SPACE 1                                                 ISP
         DS    0F                                                ISP
CALL3    DS    0CL8                                              ISP
         DS    F                   A(VDEL)                       ISP
         DS    F                   A(VARIABLE NAME+X'80000000)   ISP
         DS    0D
@DATAL   EQU   *-@DATA
         SPACE
IHADCB   DSECT
         DS    32XL1
DCBBFTEK DS    XL1
DCBEODAD DS    AL3
DCBRECFM DS    X
DCBEXLSA DS    AL3
DCBDDNAM DS    CL8
DCBOFLGS DS    X
         DS    7XL1
         DS    X
DCBSYNAD DS    AL3
DCBBLKSI EQU   IHADCB+62,2
DCBLRECL EQU   IHADCB+82,2
         SPACE
         IKJCPPL
         SPACE 3
         IKJPPL
         SPACE
         IKJDFPB
         SPACE 2
         IKJUPT
         SPACE 2
         IKJIOPL
         SPACE 2
         IKJDAPL
         SPACE 2
         IKJDAP08
         SPACE 2
         IKJDAP18
         SPACE 2
         IKJPSCB
         SPACE 2
         CVT   DSECT=YES,LIST=YES,TSO=YES                        JDM2
         SPACE 2                                                 JDM2
         IEFTIOT1                                                JDM2
         SPACE 2                                                 JDM2
         IKJTCB LIST=YES,DSECT=YES                               JDM2
         SPACE 2                                                 JDM2
         AIF   (NOT &MVS).SKIP12
         IKJEFFDF DFDSECT=YES
.SKIP12  ANOP
         SPACE 2
         END
//L.SYSLMOD DD DSN=SHARE.LINKLIB,DISP=SHR,UNIT=
//L.SYSIN DD *
 NAME COUNTI(R)
/*
