BPT      TITLE 'BLKSPTRK -- PHYSICAL BLOCKS PER DASD TRACK CALCULATER'
************************************************************* 11/84 DBC
*                                                           * 11/84 DBC
* MODULE NAME = BLKSPTRK.                                   * 11/84 DBC
*                                                           * 11/84 DBC
* DESCRIPTIVE NAME = PHYSICAL BLOCKS PER DASD TRACK         * 11/84 DBC
*                    CALCULATOR.                            * 11/84 DBC
*                                                           * 11/84 DBC
* STATUS = RELEASE 8411.                                    * 11/84 DBC
*                                                           * 11/84 DBC
* FUNCTION = A TSO COMMAND THAT DISPLAYS TRACK CAPACITIES   * 11/84 DBC
*            FOR ANY SET OF DASD DEVICES, FOR ANY GIVEN     * 11/84 DBC
*            COMBINATION OF KEY LENGTHS, BLOCK SIZES,       * 11/84 DBC
*            AND/OR BLOCK COUNTS.                           * 11/84 DBC
*                                                           * 11/84 DBC
* PROCESSOR = OS/VS ASSEMBLER.                              * 11/84 DBC
*                                                           * 11/84 DBC
* TYPE = TSO COMMAND PROCESSOR.                             * 11/84 DBC
*                                                           * 11/84 DBC
* ATTRIBUTES = REENTRANT, REFRESHABLE, REUSABLE.            * 11/84 DBC
*                                                           * 11/84 DBC
* AUTHOR = DAVID B. COLE.                                   * 11/84 DBC
*                                                           * 11/84 DBC
************************************************************* 11/84 DBC
*                                                           * 11/84 DBC
* ENTRY POINT = BLKSPTRK.                                   * 11/84 DBC
*                                                           * 11/84 DBC
* ALIAS NAME = BPT.                                         * 11/84 DBC
*                                                           * 11/84 DBC
* COMMAND FORMAT = BLKSPTRK (<DEVTYPE> ...)                 * 11/84 DBC
*                  KEYLEN(<KEY_LENGTH> ...)                 * 11/84 DBC
*                  BLKSIZE(<BLOCK_SIZE>×#<BLOCK_COUNT>×0 ...) 11/84 DBC
*                                                           * 11/84 DBC
* ANY NUMBER OF DEVICE TYPES, KEY LENGTHS AND BLOCK SIZES   * 11/84 DBC
* MAY BE GIVEN. A MATRIX IS DISPLAYED SHOWING TRACK         * 11/84 DBC
* CAPACITIES FOR ALL COMBINATIONS OF THE GIVEN PARAMETERS.  * 11/84 DBC
*                                                           * 11/84 DBC
* THE KEYLEN PARAMETER CAN BE OMITTED IN WHICH CASE THE     * 11/84 DBC
* TRACK CAPACITIES WILL BE CALCULATED FOR BLOCKS WITHOUT    * 11/84 DBC
* KEYS. EQUIVALENTLY, KEYLEN(0) MAY BE GIVEN.               * 11/84 DBC
*                                                           * 11/84 DBC
* THE BLKSIZE PARAMETER ALSO CAN BE OMITTED IN WHICH CASE   * 11/84 DBC
* THE SIZE OF THE LARGEST BLOCK (CONSIDERING THE GIVEN OR   * 11/84 DBC
* OMITTED KEY LENGTH(S)) THAT CAN BE CONTAINED ON A TRACK   * 11/84 DBC
* IS DISPLAYED FOR EACH DEVICE TYPE REQUESTED.              * 11/84 DBC
* EQUIVALENTLY, BLKSIZE(0) MAY BE GIVEN.                    * 11/84 DBC
*                                                           * 11/84 DBC
* IF A BLKSIZE VALUE IS GIVEN AS #N (E.G., #6), THEN IT IS  * 11/84 DBC
* INTERPRETED AS A BLOCK COUNT INSTEAD OF A BLOCK SIZE. IN  * 11/84 DBC
* THIS CASE THE BLOCK SIZE DISPLAYED WILL BE THE LARGEST    * 11/84 DBC
* FOR WHICH N BLOCKS CAN FIT ON A TRACK FOR EACH DEVICE     * 11/84 DBC
* TYPE REQUESTED (TAKING INTO CONSIDERATION KEY LENGTH      * 11/84 DBC
* VALUES, IF ANY).                                          * 11/84 DBC
*                                                           * 11/84 DBC
************************************************************* 11/84 DBC
         EJECT ,
BLKSPTRK START ,
BPT      EQU   BLKSPTRK            ALIAS NAME
         SPACE 3
         #REGS R                   STANDARD REGISTER EQUATES
         EJECT
CONSTANT DSECT ,                   DEVICE DESCRIPTIVE DATA
LASTALT  DS    CL4                 CCHH OF LAST ALTERNATE.
CONVCYL  DS    CL4                 CONVERSION TO CHANGE CYLINDERS.
CONV1    DS    CL4                 CONVERSION TO GIVE CC-1,HH+XX.
MAXREC   DS    1H                  MAXIMUM RECORDS PER TRACK.
SACAP    DS    1H                  SURFACE ANALYSIS TRACK CAPACITY.
LASTORIG DS    CL4                 CCHH OF LAST PRIMARY TRACK.
TOTALALT DS    1H                  NUMBER OF ALTERNATES.
CYLNO    DS    1H                  NUMBER OF CYLINDERS.
TRKCYL   DS    1H                  TRACKS PER CYLINDER.
TRKCAP   DS    1H                  TRACK CAPACITY.
ROVRHD   DS    CL3                 RECORD OVERHEAD.
FLAG     DS    CL1                 FLAG BYTE.
TOLER    DS    1H                  TOLERANCE FACTOR.
DSCBTRK  DS    CL1                 DSCBS PER TRACK.
DIRBTRK  DS    CL1                 DIRECTORY BLOCKS PER TRACK.
TOTALPRM DS    1H                  NUMBER OF PRIMARY TRACKS.
KDEVSIZE EQU   *-CONSTANT          DDD ENTRY SIZE
         SPACE 1
*        FLAG BIT DEFINITIONS
DVC2BOV  EQU   X'08'               OVERHEAD IS SINGLE HALFWORD
DVCCELLS EQU   X'10'               DEVICE IS CELLULAR         11/84 DBC
DVCFTOL  EQU   X'01'               DEVICE USES TOLERENCE FACTOR
         SPACE 3
         IKJCPPL ,                 COMMAND PROCESSOR PARAMETER LIST
         SPACE 3
         IKJPPL ,                  PARSE PARAMETER LIST
PPLLEN   EQU   *-PPL               LIST LENGTH
         EJECT
         #DSA  ,                   DATA STORAGE AREA
DSAWORK  DS    D                   WORK AREA
DSABUFF  DS    CL80                MESSAGE BUFFER AND WORK AREA
DSAECB   DS    A                   ECB USED BY PARSE
DSAPDL   DS    A                   PARSE PARAMETER DESCRIPTER LIST PTR
         DS    0A
DSAPPL   DS    XL(PPLLEN)          PARSE PARAMETER LIST
DSALEN   EQU   *-DSA               DSA LENGTH
         EJECT
BLKSPTRK #ENTER SAVTYPE=(RENT,DSALEN) STANDARD REENTRANT ENTRY LINKAGE
         LR    R11,R13             COPY DSA PTR
         USING DSA,R11             DECLARE DSA BASE
         SPACE 3
*        INITIALIZE A PARAMETER LIST FOR PARSE AND THEN LINK TO IT
         SPACE 1
         LR    R2,R1               GET THE CPPL POINTER
         USING CPPL,R2             DECLARE A BASE FOR IT
         LA    R1,DSAPPL           POINT TO THE PPL
         USING PPL,R1              DECLARE A BASE FOR IT
         L     R0,CPPLUPT          INITIALIZE -
         ST    R0,PPLUPT            UPT POINTER
         L     R0,CPPLECT          INITIALIZE -
         ST    R0,PPLECT            ECT POINTER
         MVI   DSAECB,0            CLEAR AN ECB FOR PARSE
         LA    R0,DSAECB           INITIALIZE -
         ST    R0,PPLECB            ECB POINTER
         L     R0,=V(PCL)          INITIALIZE -
         ST    R0,PPLPCL            PCL POINTER
         LA    R0,DSAPDL           INITIALIZE -
         ST    R0,PPLANS            PDL POINTER POINTER
         L     R0,CPPLCBUF         INITIALIZE -
         ST    R0,PPLCBUF           CBUF POINTER
         ST    R13,PPLUWA          INITIALIZE VLDTY CHK WA PTR
         DROP  R2                  RELEASE CPPL BASE
         DROP  R1                  RELEASE PPL BASE
         LINK  EP=IKJPARS          PARSE THE INVOKING OPERANDS
         LTR   R15,R15             PARSE OK?
         BZ    PARSOK              YES, PROCEED
         CVD   R15,DSAWORK         NO, CNVRT RC TO DECIMAL
         UNPK  DSABUFF(2),DSAWORK+6(2) CNVRT TO EBCDIC
         OI    DSABUFF+1,X'F0'     FIX THE FUCKING SIGN
         LA    R4,DSABUFF          POINT TO EBCDIC RC
         LA    R5,1                GET ITS MACHINE LENGTH
         LA    R1,PARSFMSG-1       POINT TO ERROR MSG
         LR    R3,R15              SAVE THE RC
         BAL   R2,TPUTERRM         GO ISSUE THE ERROR MSG
         LR    R15,R3              RESTORE THE RC
         B     EXITGOOD            GO RETURN TO TMP
PARSOK   EQU   *
         SPACE 3
*        DISPLAY THE REQUESTED DATA
         SPACE 1
         L     R2,DSAPDL           POINT TO THE PDL
         USING PDL,R2              DECLARE A BASE FOR IT
         LA    R1,TITLE            POINT TO TITLE
         LA    R0,TITLEN           GET ITS LENGTH
         TPUT  (1),(0),R           SEND IT
         SPACE 3
         LA    R3,PDLDEVT          PNT TO DEVICE PARAMETER CHAIN
DEVTLOOP CLI   0(R3),X'FF'         OMITTED VALUE?
         BE    DEVTNEXT            YES, LOOP FOR NEXT
         MVI   DSABUFF,C' '        NO, CLEAR MSG BUFFER
         MVC   DSABUFF+1(TITLEN-1),DSABUFF
         L     R1,0(,R3)           POINT TO DEVTYPE STRING
         LH    R15,4(,R3)          GET ITS LENGTH
         BCTR  R15,0               CONVERT TO MACHINE LENGTH
         MVC   DSABUFF+TITDEVT(*-*),0(R1) (EXECUTED INSTRUCTION)
         EX    R15,*-6             COPY TO MSG BUFFER
         IC    R6,0(,R3)           GET THE DDD INDEX
         N     R6,=X'0000007F'     ISSOLATE IT
         MH    R6,=Y(KDEVSIZE)     CONVERT TO OFFSET
         LA    R6,#(R6)            --> DEVICE DESCRIPTER DATA
         USING CONSTANT,R6         DECLARE A BASE
         SPACE 3
         LA    R5,PDLKEYL          POINT TO KEYLEN(S) CHAIN
KEYLLOOP CLI   0(R5),X'FF'         OMITTED ENTRY?
         BE    KEYLNEXT            YES, SKIP
         MVC   DSABUFF+TITKEYL(3),=X'202120' NO, EDIT MASK
         L     R8,0(,R5)           GET KEYLENGTH VALUE
         CVD   R8,DSAWORK          CONVERT TO DECIMAL
         ED    DSABUFF+TITKEYL-1(4),DSAWORK+6 CNVRT TO EBCDIC
         SPACE 3
         LA    R4,PDLBLKS          PNT TO BLKSIZE(S) CHAIN
BLKSLOOP CLC   =4C'*',0(R4)        OMITTED ENTRY?             11/84 DBC
         BE    BLKSNEXT            YES, SKIP
         MVC   DSABUFF+TITBLKS(5),=X'2020202120' NO, EDIT MASK
         ICM   R9,15,0(R4)         GET GIVEN BLKSIZE; DEFAULT WANTED?
         BP    NDFLBLKS            NO, USE GIVEN VALUE        11/84 DBC
         LA    R15,1               (TREAT "0" AS "#1")        11/84 DBC
         BZ    DFLTBLKS            YES, PROCESS AS B(#1)      11/84 DBC
         LPR   R15,R9              NO, GET N OF B(#N)         11/84 DBC
         SPACE 1                                              11/84 DBC
DFLTBLKS SR    R9,R9               CLEAR                      11/84 DBC
         ICM   R9,3,TRKCAP         YES, GET TRACK CAPACITY    11/84 DBC
         SR    R7,R7               CLEAR
         TM    FLAG,DVCCELLS       CELLULAR DEVICE?           11/84 DBC
         BZ    OLDWAY1             NO, SKIP                   11/84 DBC
         SPACE 1                                              11/84 DBC
         IC    R7,ROVRHD+2         YES, GET CELL SIZE         11/84 DBC
         LR    R1,R9               GET TRKCAP                 11/84 DBC
         SR    R0,R0               CLEAR                      11/84 DBC
         DR    R0,R7               GET # CELLS AVAILABLE      11/84 DBC
         SR    R0,R0               CLEAR                      11/84 DBC
         DR    R0,R15              GET # CELLS AVAIL PER RCD  11/84 DBC
         MR    R0,R7               CNVRT BACK TO BYTES        11/84 DBC
         LR    R9,R1               AND COPY BACK TO R9        11/84 DBC
         LTR   R1,R8               ANY KEYS?                  11/84 DBC
         BZ    NWNOKYS1            NO, SKIP                   11/84 DBC
         AH    R1,TOLER            YES, ADD KEY-AREA OVERHEAD 11/84 DBC
         SR    R0,R0               CLEAR FOR DIVIDE           11/84 DBC
         DR    R0,R7               GET # CELLS NEEDED         11/84 DBC
         MR    R0,R7               CNVRT BACK TO ROUNDED UP   11/84 DBC
*                                  BYTES                      11/84 DBC
         SR    R9,R1               DECR SPACE FOR DATA        11/84 DBC
NWNOKYS1 SH    R9,ROVRHD           DECR FOR COUNT AREA OVHD   11/84 DBC
         LR    R1,R9               COPY                       11/84 DBC
         SR    R0,R0               CLEAR                      11/84 DBC
         DR    R0,R7               GET # CELLS AVAILABLE FOR  11/84 DBC
*                                  DATA AREA (+ OVERHEAD)     11/84 DBC
         MR    R0,R7               CNVRT BACK TO ROUNDED DOWN 11/84 DBC
*                                  BYTES                      11/84 DBC
         AR    R1,R7               ADD IN SPACE IN THE REST - 11/84 DBC
         BCTR  R1,0                 OF THE LAST CELL          11/84 DBC
         SH    R1,TOLER            DECR DATA AREA OVERHEAD    11/84 DBC
         BNP   NDFLBMIN            TOO MANY BLKS TO FIT       11/84 DBC
         LR    R9,R1               COPY BACK TO R9            11/84 DBC
         B     NDFLBLKS            DONE HERE                  11/84 DBC
         SPACE 1                                              11/84 DBC
OLDWAY1  LR    R1,R9               GET TRK CAPACITY           11/84 DBC
         TM    FLAG,DVC2BOV        LB_OVHD = NLB_OVHD?        11/84 DBC
         BNZ   DFLOHOK             YES, SKIP                  11/84 DBC
         IC    R7,ROVRHD           NO, GET NLB_OVHD           11/84 DBC
         AR    R1,R7               ADD TO TRK_CAP             11/84 DBC
         IC    R7,ROVRHD+1         GET LB_OVHD                11/84 DBC
         SR    R1,R7               TAKE BACK FROM TRK_CAP     11/84 DBC
DFLOHOK  SR    R0,R0               CLEAR                      11/84 DBC
         DR    R0,R15              GET BYTES AVAIL / RCD      11/84 DBC
         LR    R9,R1               COPY BACK TO R9            11/84 DBC
         SPACE 1                                              11/84 DBC
         LTR   R8,R8               ANY KEY?                   11/84 DBC
         BNZ   DFLBKEYD            YES, SKIP
         IC    R7,ROVRHD+2         NO, GET UNKEYED UNDERHEAD
         AR    R9,R7               ADD TO TRK CAPACITY
DFLBKEYD SR    R9,R8               SUBTRACT OFF KEY LENGTH
         IC    R7,ROVRHD           GET NLB_OVHD               11/84 DBC
         TM    FLAG,DVC2BOV        OVERHEAD IN 2 SINGLE BYTES?
         BZ    DFLBN2BO            YES, R7 IS OK
         LH    R7,ROVRHD           NO, GET ANY BLOCK OVERHEAD
DFLBN2BO SR    R9,R7               GET MAX BLKSIZE FOR CONDITIONS
         BP    NDFLBLKS            CAN DO; PROCEED            11/84 DBC
NDFLBMIN LA    R9,1                BLK_CNT WAS TOO LARGE; SET 11/84 DBC
*                                  MINIMUM BLKSIZE            11/84 DBC
NDFLBLKS CVD   R9,DSAWORK          CONVERT TO DECIMAL
         ED    DSABUFF+TITBLKS-1(6),DSAWORK+5 CNVRT TO EBCDIC
         SPACE 3
         TM    FLAG,DVCCELLS       CELLULAR DEVICE?           11/84 DBC
         BZ    OLDWAY2             NO, SKIP                   11/84 DBC
         SPACE 1                                              11/84 DBC
         SR    R7,R7               YES, CLEAR                 11/84 DBC
         IC    R7,ROVRHD+2         GET CELL SIZE              11/84 DBC
         SR    R14,R14             CLEAR RESIDUE REG          11/84 DBC
         LTR   R15,R8              COPY KEYLEN; ANY?          11/84 DBC
         BZ    NWNOKYS2            NO, SKIP                   11/84 DBC
         AH    R15,TOLER           YES, ADD OVERHEAD          11/84 DBC
         DR    R14,R7              CNVRT TO CELL COUNT        11/84 DBC
         MR    R14,R7              CNVRT BACK TO ROUNDED UP   11/84 DBC
*                                  BYTES                      11/84 DBC
NWNOKYS2 LTR   R1,R9               GET DATALEN; EOF?          11/84 DBC
         BNZ   NWNTEOF             NO, PROCEED                11/84 DBC
         LR    R1,R7               YES, DATA AREA STILL TAKES 11/84 DBC
*                                  A CELL                     11/84 DBC
NWNTEOF  AH    R1,TOLER            ADD DATA AREA OVERHEAD     11/84 DBC
         SR    R0,R0               CLEAR                      11/84 DBC
         DR    R0,R7               CNVRT TO CELL COUNT        11/84 DBC
         MR    R0,R7               CNVRT BACK TO ROUNDED UP   11/84 DBC
*                                  BYTES                      11/84 DBC
         AR    R1,R15              ADD SIZE OF KEY, IF ANY    11/84 DBC
         AH    R1,ROVRHD           ADD COUNT AREA OVHD        11/84 DBC
         SR    R15,R15             CLEAR                      11/84 DBC
         ICM   R15,3,TRKCAP        GET L'TRACK                11/84 DBC
         DR    R14,R1              CNVRT TO COUNT & RESIDUE   11/84 DBC
         LR    R1,R14              COPY                       11/84 DBC
         SR    R0,R0               CLEAR                      11/84 DBC
         DR    R0,R7               CNVRT TO CELL COUNT        11/84 DBC
         MR    R0,R7               CNVRT BACK TO ROUNDED DOWN 11/84 DBC
*                                  BYTES                      11/84 DBC
         AR    R1,R7               ADJUST                     11/84 DBC
         BCTR  R1,0                ADJUST                     11/84 DBC
         SR    R14,R14             ASSUME NO USEFUL RESIDUE   11/84 DBC
         SH    R1,TOLER            ADJUST; RIGHT?             11/84 DBC
         BNP   GOTRESDU            YES, DONE HERE             11/84 DBC
         LR    R14,R1              NO, GET USEFUL RESIDUE     11/84 DBC
         B     GOTRESDU            DONE HERE                  11/84 DBC
         SPACE 1                                              11/84 DBC
OLDWAY2  LA    R1,0(R8,R9)         GET KEYLEN+BLKSIZE         11/84 DBC
         LR    R0,R1               COPY FOR NOT-LAST-BLOCK
         TM    FLAG,DVCFTOL        APPLY TOLERANCE FACTOR TO ^LAST-BLK?
         BZ    NTOLF               NO, SKIP
         MH    R0,TOLER            YES, DO SO
         SRL   R0,9                DROP THE FRACTION
NTOLF    SR    R7,R7               CLEAR FOR "IC"'S
         CLI   3(R5),0             ANY KEY?
         BNE   GOTOVNK             YES, SKIP KEY-UNDERHEAD
         IC    R7,ROVRHD+2         NO, GET UNDERHEAD VALUE
         SR    R0,R7               ADJUST NOT-LAST-BLOCK
         SR    R1,R7               ADJUST LAST-BLOCK
GOTOVNK  IC    R7,ROVRHD           ASSUME NOT 2305
         TM    FLAG,DVC2BOV        OVERHEAD IS 2 BYTES?
         BZ    GOTNLB              NO, GOT NOT-LAST-BLOCK OVERHEAD
         LH    R7,ROVRHD           YES, GET ANY-BLOCK-OVERHEAD
GOTNLB   AR    R0,R7               ADD NOT-LAST-BLOCK OVERHEAD
         TM    FLAG,DVC2BOV        2305, ETC.?
         BO    GOTLB               YES, GOT ANY-BLOCK-OVERHEAD
         IC    R7,ROVRHD+1         NO, GET LAST-BLOCK OVERHEAD
GOTLB    AR    R1,R7               GET LAST-BLOCK LENGTH
         SR    R15,R15             CLEAR                      11/84 DBC
         ICM   R15,3,TRKCAP        GET L'TRACK                11/84 DBC
         SR    R14,R14             CLEAR
         DR    R14,R0              GET NOT-LAST-BLOCK CAPACITY
         CR    R14,R1              ROOM FOR LAST BLOCK?
         BL    GOTCPCTY            NO, SKIP
         LA    R15,1(,R15)         YES, COUNT IT
         SR    R14,R0              ADJUST RESIDULE (NEGATIVE)
         SPACE 1                                              11/84 DBC
GOTCPCTY SR    R1,R9               ISSOLATE LAST-BLOCK -      11/84 DBC
         SR    R1,R8                OVERHEAD
         SR    R14,R1              TAKE OFF FROM RESIDUE; ANY LEFT?
         BNM   GOTRESDU            YES, PROCEED
         SR    R14,R14             NO, CLEAR RESIDUE
GOTRESDU MVC   DSABUFF+TITRSDU(5),=X'2020202120' EDIT MASK
         CVD   R14,DSAWORK         CNVRT RESIDUE TO DECIMAL
         ED    DSABUFF+TITRSDU-1(6),DSAWORK+5 CNVRT TO EBCDIC
         MVC   DSABUFF+TITBPT(5),=X'2020202120' GET EDIT MASK 11/84 DBC
         CVD   R15,DSAWORK         CNVRT BPT TO DECIMAL       11/84 DBC
         ED    DSABUFF+TITBPT-1(6),DSAWORK+5 CNVRT TO EBCDIC  11/84 DBC
         SPACE 3
         LA    R1,DSABUFF          POINT TO MESSAGE
         LA    R0,TITLEN           GET ITS LENGTH
         TPUT  (1),(0),R           SEND THE MESSAGE
         SPACE 3
BLKSNEXT ICM   R4,7,9(R4)          NO, CHAIN TO NEXT BLKSIZE; ANY?
         BNZ   BLKSLOOP            YES, LOOP TO PROCESS
KEYLNEXT ICM   R5,7,9(R5)          CHAIN TO NEXT KEYLEN; ANY?
         BNZ   KEYLLOOP            YES, LOOP TO PROCESS
DEVTNEXT ICM   R3,7,9(R3)          NO, CHAIN TO NEXT DEVICE TYPE; ANY?
         BNZ   DEVTLOOP            YES, LOOP TO PROCESS
         DROP  R6                  RELEASE IEHDCONS BASE
         SPACE 3
         SR    R15,R15             SET AOK RC
EXITGOOD #EXIT ((R14,R12)),RC=(R15) RETURN TO TMP
         #DROP                     RELEASE PROGRAM BASE
         DROP  ,                   RELEASE ALL BASES
         EJECT
DEVTCHK  #ENTER ESDTYPE=NONE,SAVTYPE=RENT DEVT OPND CHK RTNE
         L     R12,=A(BLKSPTRK)    ADJUST BASE ADDRESS
         USING BLKSPTRK,R12        REDECLRAE THE PGM BASE
         LM    R2,R3,0(R1)         POINT TO PDE AND DSA
         LR    R11,R3              LOAD NORMAL DSA BASE
         USING DSA,R11             DECLARE DSA BASE
         L     R4,0(,R2)           NO, POINT TO STRING
         CLI   0(R4),C'*'          OMITTED VALUE?
         BNE   DNTSTAR             NO, PROCEED
DSTAR    MVI   0(R2),X'FF'         YES, REMEMBER
         B     EXITOK              RETURN TO PARSE
DNTSTAR  LH    R5,4(,R2)           GET ITS LENGTH
         BCTR  R5,0                CNVRT TO MACHINE LENGTH
         TM    6(R2),X'80'         OMITTED?
         BNO   DSTAR               YES, SKIP
         LTR   R5,R5               NO, NULL?
         BM    DSTAR               YES, SKIP
         SR    R15,R15             NO, CLEAR FOR TABLE SCAN
         LA    R1,LKUPDVTB-LKUPDNME-1 POINT TO TABLE
LKUPLOOP LA    R1,LKUPDNME+1(R15,R1) POINT TO NEXT ENTRY
         CLI   0(R1),X'FF'         END OF TABLE?
         BE    LKUPFAIL            YES, BAD STRING
         IC    R15,LKUPDNLN(,R1)   NO, GET ENTRY'S LENGTH
         CR    R15,R5              RIGHT ENTRY?
         BNE   LKUPLOOP            NO, KEEP LOOPING
         CLC   0(*-*,R4),LKUPDNME(R1) (EXECUTED INSTRUCTION)
         EX    R15,*-6             MAYBE, CHECK AGAIN
         BNE   LKUPLOOP            NO, KEEP LOOPING
         MVC   0(1,R2),LKUPDNDX(R1) YES, SAVE THE DEVICE TYPE
         B     EXITOK              GO RETURN TO PARSE
         DROP  ,                   RELEASE BASES
         EJECT
BLKSCHK  #ENTER ESDTYPE=NONE,SAVTYPE=RENT BLKSIZE CHECKING ROUTINE
         L     R12,=A(BLKSPTRK)    RESET THE BASE REGISTER
         USING BLKSPTRK,R12        REDECLARE IT
         LM    R2,R3,0(R1)         POINT TO PDE AND DSA
         LR    R11,R3              LOAD DSA BASE
         USING DSA,R11             DECLARE DSA BASE
         L     R4,0(,R2)           POINT TO BLKSIZE STRING
         CLI   0(R4),C'*'          ASTERISK?
         BNE   BNTSTAR             NO, PROCEED
BSTAR    MVC   0(4,R2),=4C'*'      YES, SIGNEL OPND OMITTED   11/84 DBC
         B     EXITOK              RETURN TO PARSE
BNTSTAR  LH    R5,4(,R2)           GET ITS LENGTH
         BCTR  R5,0                CONVERT TO MACHINE LENGTH
         TM    6(R2),X'80'         OMITTED?
         BNO   BSTAR               YES, GO REMEMBER
         LTR   R5,R5               NO, NULL?
         BM    BSTAR               YES, GO REMEMBER
         SPACE 1                                              11/84 DBC
         LA    R14,1               NO, ASSUME BLKSIZE         11/84 DBC
         CLI   0(R4),C'#'          BLOCK COUNT GIVEN?         11/84 DBC
         BNE   BNTCNT              NO, PROCEED                11/84 DBC
         SR    R5,R14              YES, DECR L'DIGITS; NULL?  11/84 DBC
         BM    BSTAR               YES, TREAT AS B(0)         11/84 DBC
         AR    R4,R14              NO, --> DIGITS             11/84 DBC
         LNR   R14,R14             SET "BLOCK COUNT" SIGNAL   11/84 DBC
BNTCNT   TM    0(R4),C'0'          VALID DIGIT?               11/84 DBC
         BNO   EXITFAIL            NO, ERROR                  11/84 DBC
         SPACE 1                                              11/84 DBC
         PACK  DSAWORK(8),0(*-*,R4) (EXECUTED INSTRUCTION)
         EX    R5,*-6              YES, PACK THE STRING
         CVB   R15,DSAWORK         CONVERT TO BINARY
         C     R15,=X'0000FFFF'    CHECK FOR MAX VALUE        11/84 DBC
         BH    BLKS2LRG            ERROR
         MR    R14,R14             OK, IF BLK_CNT; THEN MAKE  11/84 DBC
*                                  NEGATIVE                   11/84 DBC
         ST    R15,0(,R2)          RETURN THE CONVERTED VALUE
         B     EXITOK              GO RETURN TO PARSE
         DROP  ,                   RELEASE BASES
         EJECT
KEYLCHK  #ENTER ESDTYPE=NONE,SAVTYPE=RENT KEYLEN VALIDITY CHECK
         L     R12,=A(BLKSPTRK)    RESET BASE ADDRESS
         USING BLKSPTRK,R12        REDECLARE IT
         LM    R2,R3,0(R1)         POINT TO PDE AND DSA
         LR    R11,R3              LOAD DSA BASE
         USING DSA,R11             DECLARE DSA BASE
         L     R4,0(,R2)           POINT TO KEYLEN VALUE STRING
         CLI   0(R4),C'*'          IGNORE THIS?
         BNE   KNTSTAR             NO, PROCEED
         MVI   0(R2),X'FF'         YES, SIGNEL IT
         B     EXITOK              RETURN TO PARSE
KNTSTAR  LH    R5,4(,R2)           GET ITS LENGTH
         BCTR  R5,0                CONVERT TO MACHINE LENGTH
         PACK  DSAWORK(8),0(*-*,R4) (EXECUTED INSTRUCTION)
         EX    R5,*-6              PACK IT
         CVB   R15,DSAWORK         CONVERT TO BINARY
         C     R15,=A(255)         CHECK MAX VALUE
         BH    KEYL2LRG            ERROR
         ST    R15,0(,R2)          OK, RETURN CONVERTED VALUE
         B     EXITOK              GO RETURN TO PARSE
         DROP  ,                   RELEASE BASES
         EJECT
         USING BLKSPTRK,R12        DECLARE PROGRAM BASE
         USING DSA,R11             DECLARE DSA BASE
         SPACE 3
EXITFAIL LA    R15,8               ERROR RC
         B     EXIT
         SPACE 1
EXITOK   SR    R15,R15             SET AOK RC
EXIT     #EXIT ((R14,R12)),RC=(R15) RETURN TO PARSE
         SPACE 3
LKUPFAIL LA    R1,LKUPFMSG-1
         BAL   R2,TPUTERRM
         B     EXITFAIL
         SPACE 1
BLKS2LRG LA    R1,BLKS2MSG-1
         BAL   R2,TPUTERRM
         B     EXITFAIL
         SPACE 1
KEYL2LRG LA    R1,KEYL2MSG-1
         BAL   R2,TPUTERRM
         B     EXITFAIL
         SPACE 3
TPUTERRM LA    R15,DSABUFF         GET SINK SCANNER
         LTR   R5,R5               NULL OPERAND?
         BM    OPNDNULL            YES, SKIP
         MVC   DSABUFF(*-*),0(R4)  (EXECUTED INSTRUCTION)
         EX    R5,*-6              NO, MOVE OPND TO MSG
         ALR   R15,R5              ADVANCE SINK SCANNER
OPNDNULL SR    R14,R14             CLEAR
         IC    R14,0(,R1)          GET MSG LENGTH
         MVC   1(*-*,R15),1(R1)    (EXECUTED INSTRUCTION)
         EX    R14,*-6             MOVE MSG TO SINK
         LA    R0,2(R14,R15)       POINT PAST EO MSG
         LA    R1,DSABUFF          POINT TO START
         SR    R0,R1               GET MSG LENGTH
         TPUT  (1),(0),R           SEND THE MSG
         BR    R2                  RETURN TO CALLER
         DROP  ,                   RELEASE BASES
         EJECT
         PRINT NOGEN
         SPACE 3
PCL      IKJPARM DSECT=PDL
PDLDEVT  IKJIDENT 'DASD DEVICE TYPE(S)',LIST,ASTERISK,UPPERCASE,       *
               FIRST=ANY,OTHER=ANY,PROMPT='DASD DEVICE TYPE(S)',       *
               MAXLNTH=10,VALIDCK=DEVTCHK,                             *
               HELP='2301 2302 2303 2305-1 2305-2 2311 2314 2319 2321 3*
               330 3330-1 MSS-3330 MSS-3330-1 3340-1 3340-2 3350 3375 O*
               R 3380. ENTER AN ASTERISK TO SKIP THIS FIELD.'
PDLBLKSK IKJKEYWD
         IKJNAME 'BLKSIZE',SUBFLD=PCLBLKS
PDLKEYLK IKJKEYWD
         IKJNAME 'KEYLEN',SUBFLD=PCLKEYL
PCLBLKS  IKJSUBF
PDLBLKS  IKJIDENT 'NUMBER',LIST,ASTERISK,MAXLNTH=6,FIRST=ALPHANUM,     *
               OTHER=NUMERIC,PROMPT='BLKSIZE',VALIDCK=BLKSCHK,         *
               HELP='A PHYSICAL BLOCK LENGTH VALUE RANGING FROM 1 TO 65*
               535 OR A # FOLLOWED BY A BLOCK COUNT (E.G., #6). ENTER A*
                0 TO FIND THE MAXIMUM BLKSIZE. TO SKIP THIS FIELD, ENTE*
               R AN ASTERISK.'                                11/84 DBC
PCLKEYL  IKJSUBF
PDLKEYL  IKJIDENT 'NUMBER',LIST,ASTERISK,MAXLNTH=3,FIRST=NUMERIC,      *
               OTHER=NUMERIC,DEFAULT='0',VALIDCK=KEYLCHK,              *
               HELP='A KEY LENGTH VALUE RANGING FROM 0 TO 255. TO SKIP *
               THIS FIELD, ENTER AN ASTERISK.'
         IKJENDP
         SPACE 3
         PRINT ON,GEN,NODATA
         EJECT ,
#        DS    0H
*        DEVICE DESCRIPTIVE DATA
         SPACE 3
#2301    DS    0H                  2301 PARALLEL DRUM (OBSELETE)
         DC    X'000000C7,00000001,FFFF0008,009D,5090'
         DC    X'000000C7,0000,0019,0008,5003,BA3535,04'
         DC    X'0200,3F,2D,00C8'
         SPACE 3
#2302    DS    0H                  2302 DISK STORAGE (OBSELETE)
         DC    X'00F9002D,0000FFD3,FFFF002E,0051,13BD'
         DC    X'00F5002D,00B8,00FA,002E,1378,511414,01'
         DC    X'0219,16,0E,2C34'
         SPACE 3
#2303    DS    0H                  2303 SERIAL DRUM (OBSELETE)
         DC    X'004F0009,0000FFF7,FFFF000A,002F,1390'
         DC    X'004F0009,0000,0050,000A,131C,922626,00'
         DC    X'0200,11,0C,0320'
         SPACE 3
#23051   DS    0H                  2305-1 FIXED HEAD STORAGE FACILITY
         DC    X'00300000,0000FFF9,FFFF0008,0021,38F0'
         DC    X'002F0007,0001,0030,0008,38E8,027ACA,09'
         DC    X'0200,12,10,0180'
         SPACE 3
#23052   DS    0H                  2305-2 FIXED HEAD STORAGE FACILITY
         DC    X'00600000,0000FFF9,FFFF0008,0048,3A12'
         DC    X'005F0007,0001,0060,0008,3A0A,01215B,09'
         DC    X'0200,22,1A,0300'
         SPACE 3
#2311    DS    0H                  2311 DISK STORAGE DRIVE (OBSELETE)
         DC    X'00CA0009,0000FFF7,FFFF000A,003C,0E6E'
         DC    X'00C70009,001E,00CB,000A,0E29,511414,01'
         DC    X'0219,10,0A,07D0'
         SPACE 3
#2314    DS    0H                  DIRECT ACCESS STORAGE FACILITY
#2319    DS    0H                  DIRECT ACCESS STORAGE FACILITY
         DC    X'00CA0013,0000FFED,FFFF0014,0049,1CEA'
         DC    X'00C70013,003C,00CB,0014,1C7E,922D2D,01'
         DC    X'0216,19,11,0FA0'
         SPACE 3
#2321    DS    0H                  2321 DATA CELL DRIVE (OBSELETE)
         DC    X'13090413,000000ED,FFFF0014,0041,07D0'
         DC    X'13050413,0190,03E8,0014,07D0,641010,03'
         DC    X'0219,08,05,4C90'
         SPACE 3
#3330    DS    0H                  3330 DISK STORAGE
         DC    X'019A0012,0000FFEE,FFFF0013,0062,338B'
         DC    X'01930012,0085,019B,0013,336D,BFBF38,01'
         DC    X'0200,27,1C,1DFC'
         SPACE 3
#33301   DS    0H                  3330-1 DUAL DENSITY DISK STORAGE
         DC    X'032E0012,0000FFEE,FFFF0013,0062,338B'
         DC    X'03270012,0085,032F,0013,336D,BFBF38,01'
         DC    X'0200,27,1C,3BF8'
         SPACE 3
#MS3330  DS    0H                  3330 MSS VIRTUAL DISK STORAGE
         DC    X'019A0012,0000FFEE,FFFF0013,0062,338B'
         DC    X'01980012,0026,019B,0013,336D,BFBF38,01'
         DC    X'0200,27,1C,1E5B'
         SPACE 3
#MS33301 DS    0H                  3330-1 MSS VIRTUAL DUAL DENSITY DISK
*                                  STORAGE
         DC    X'032E0012,0000FFEE,FFFF0013,0062,338B'
         DC    X'03280012,0072,032F,0013,336D,BFBF38,01'
         DC    X'0200,27,1C,3C0B'
         SPACE 3
#33401   DS    0H                  3340-1 DISK
         DC    X'015C000B,0000FFF5,FFFF000C,0032,2157'
         DC    X'015B000B,000C,015D,000C,2157,F2F24B,01'
         DC    X'0200,16,10,105C'
         SPACE 3
#33402   DS    0H                  3340-2 DISK
         DC    X'02B9000B,0000FFF5,FFFF000C,0032,2157'
         DC    X'02B7000B,0018,02BA,000C,2157,F2F24B,01'
         DC    X'0200,16,10,20B8'
         SPACE 3
#3350    DS    0H                  3350 NON-REMOVABLE DISK STORAGE
         DC    X'022F001D,0000FFE3,FFFF001E,0067,4B36'
         DC    X'022A001D,0096,0230,001E,4B36,010B52,09'
         DC    X'0200,2F,24,410A'
         SPACE 3                                              11/84 DBC
#3375    DS    0H                  3375 NON-REMOVABLE DISK    11/84 DBC
         DC    X'03BF000B,0000FFF5,FFFF000C,0056,8FE0'        11/84 DBC
         DC    X'03BE000B,000C,03C0,000C,8CA0,00E020,10'      11/84 DBC
         DC    X'00BF,33,2B,2CF4'                             11/84 DBC
         SPACE 3                                              11/84 DBC
#3380    DS    0H                  3380 NON-REMOVABLE DISK    11/84 DBC
         DC    X'0375000E,0000FFF2,FFFF000F,005D,C040'        11/84 DBC
         DC    X'0374000E,000F,0376,000F,BB60,010020,10'      11/84 DBC
         DC    X'010B,35,2E,33DB'                             11/84 DBC
         EJECT
LKUPDVTB DC    AL1((#2301-#)/KDEVSIZE,3),C'2301'
         DC    AL1((#2302-#)/KDEVSIZE,3),C'2302'
         DC    AL1((#2303-#)/KDEVSIZE,3),C'2303'
         DC    AL1((#23051-#)/KDEVSIZE,5),C'2305-1'
         DC    AL1((#23052-#)/KDEVSIZE,5),C'2305-2'
         DC    AL1((#2311-#)/KDEVSIZE,3),C'2311'
         DC    AL1((#2314-#)/KDEVSIZE,3),C'2314'
         DC    AL1((#2319-#)/KDEVSIZE,3),C'2319'
         DC    AL1((#2321-#)/KDEVSIZE,3),C'2321'
         DC    AL1((#3330-#)/KDEVSIZE,3),C'3330'
         DC    AL1((#33301-#)/KDEVSIZE,5),C'3330-1'
         DC    AL1((#MS3330-#)/KDEVSIZE,7),C'MSS-3330'
         DC    AL1((#MS33301-#)/KDEVSIZE,9),C'MSS-3330-1'
         DC    AL1((#33401-#)/KDEVSIZE,5),C'3340-1'
         DC    AL1((#33402-#)/KDEVSIZE,5),C'3340-2'
         DC    AL1((#3350-#)/KDEVSIZE,3),C'3350'
         DC    AL1((#3375-#)/KDEVSIZE,3),C'3375'              11/84 DBC
         DC    AL1((#3380-#)/KDEVSIZE,3),C'3380'              11/84 DBC
         DC    X'FF'
         SPACE 1
LKUPDNDX EQU   0                   DEVICE TYPE
LKUPDNLN EQU   LKUPDNDX+1          DEVICE NAME LENGTH
LKUPDNME EQU   LKUPDNLN+1          DEVICE NAME
         SPACE 3
         LTORG
         EJECT ,
TITLE    DS    0C
TITDEVT  EQU   *-TITLE
         DC    C'DEVICE      KEYLEN'
TITKEYL  EQU   *-TITLE-3
         DC    C'  BLKSIZE'
TITBLKS  EQU   *-TITLE-5
         DC    C'  BLOCKS/TRACK'
TITBPT   EQU   *-TITLE-5
         DC    C'  RESIDUE'
TITRSDU  EQU   *-TITLE-5
TITLEN   EQU   *-TITLE
         SPACE 3
         DC    AL1(L'LKUPFMSG-1)
LKUPFMSG DC    C' - NOT A RECOGNIZABLE DASD DEVICE TYPE +'
         SPACE 3
         DC    AL1(L'BLKS2MSG-1)
BLKS2MSG DC    C' - VALUE TOO LARGE FOR A BLKSIZE OR A BLOCK COUNT. MAX*
                ALLOWED IS 65767 +'                           11/84 DBC
         SPACE 3
         DC    AL1(L'KEYL2MSG-1)
KEYL2MSG DC    C' - VALUE TOO LARGE FOR A KEYLEN. MAX ALLOWED IS 255 +'
         SPACE 3
         DC    AL1(L'PARSFMSG-1)
PARSFMSG DC    C' - PARSE ERROR CODE'
         SPACE 3
         END   BLKSPTRK
