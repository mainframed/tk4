         MACRO
&N       $BFGMSG  &ID,&WORKAR=,&MSGAREA=,&WTO=YES,&PRINT=NO
.**********************************************************************
.*                                                                    *
.*       THIS MACRO GENERATES THE INTERFACE TO THE NEW MESSAGE        *
.*       PROCESSOR.                                                   *
.*                                                                    *
.*       SYNTAX                                                       *
.*                                                                    *
.*         $BFGMSG 32,(TYPE,ADDR),(TYPE,ADDR),...                     *
.*                                                                    *
.*                  WHERE  TYPE   IS ONE OF CNN    CHAR OF LEN NN     *
.*                                          D1     1 BYTE DECIMAL     *
.*                                          D2     2 BYTE DECIMAL     *
.*                                          D4     3 BYTE DECIMAL     *
.*                                          H1     1 BYTE HEX         *
.*                                          H2     2 BYTE HEX         *
.*                                          H4     4 BYTE HEX         *
.*                                                                    *
.*                          ADDR   IS EITHER A SYMBOL OR (REG)        *
.*                                                                    *
.*                                                                    *
.*       ON ENTRY                                                     *
.*            R0  ===  MESSAGE ID                                     *
.*            R1  -->  +0   GENERAL FLAGS                             *
.*                          X'80' IF ON ISSUE WTO,IF OFF DO NOT       *
.*                     +1   AL3(MESSAGE CSECT BFGIMSG)                *
.*                     +4   S(18 WORD WORKAREA)                       *
.*                     +6   S(MESSAGE BUILD AREA, LEN>=132)           *
.*                     +8   8 BYTE CSECT NAME                         *
.*                     +16  4 BYTE FIRST INSERTION CONTROL            *
.*                     +20  4 BYTE SECOND INSERTION CONTROL           *
.*                     +24  ETC.                                      *
.*                                                                    *
.*      EACH INSERTION CONTROL IS FORMATED:                           *
.*                +0     X'80' IS ON THEN TYPE=C & MAX LEN =X'3F'     *
.*                       X'80' IS OFF THEN TYPE= X'3F' VALUE          *
.*                             TYPE = 0  NO OPERATION                 *
.*                                    1  1 BYTE HEX FORMAT            *
.*                                    2  1 BYTE DECIMAL FORMAT        *
.*                                    3  2 BYTE HEX FORMAT            *
.*                                    4  2 BYTE DECIMAL FORMAT        *
.*                                    5  4 BYTE HEX FORMAT            *
.*                                    6  4 BYTE DECIMAL FORMAT        *
.*                       X'40' IS ON THEN IT IS LAST INSERTION CONTROL*
.*                       X'40' IS OFF THEN MORE FOLLOW                *
.*                                                                    *
.*                +1     NOT USED                                     *
.*                +2,3   IF < 16 THEN IS REGISTER # WHICH CONTAINS    *
.*                             ADDRESS OF INSERT VALUE                *
.*                       IF > 16 THEN IS S-TYPE VALUE (B/DDD) WHICH   *
.*                             EVALUATES TO THE ADDRESS OF INSERT     *
.*                             VALUE                                  *
.*                                                                    *
.*                                                                    *
.*                                                                    *
.**********************************************************************
         GBLB  &GUYMWK
         GBLC  &WKAR,&MSGAR
         LCLC  &LB,&L,&TYPE
         LCLA  &I,&J,&K
         LCLB  &WT
.*
.**      IF FIRST TIME THROUGH COPY CSECT
.*
         AIF   (&GUYMWK).NOTEXT
         PUSH  USING,PRINT
         AIF   ('&PRINT' EQ 'YES').COPY
         PRINT OFF
.COPY    ANOP
         COPY  $BFGMSGC                 COPY IN CODE
         POP   USING,PRINT
&SYSECT  CSECT
.NOTEXT  ANOP
.*
.**      IF WORKAR AND MSGAREA SPECIFIED THEN SAVE
.*
         AIF   (T'&WORKAR EQ 'O' OR T'&MSGAREA EQ 'O').NOWK
&WKAR    SETC  '&WORKAR'
&MSGAR   SETC  '&MSGAREA'
&GUYMWK  SETB  1
.NOWK    ANOP
.*
.**      IF WORKAR AND MSGAREA HAVE NOT YET BEEN SPECIFIED THEN DEFAULT
.*
         AIF   (&GUYMWK).WKOK
         MNOTE 4,'WORKAREA AND MESSAGE AREA NOT DEFINED'
         MNOTE *,'DEFAULTS USED'
         MNOTE *,'             WORKAREA=MSGWORK'
         MNOTE *,'             MSGAREA=MSGAREA'
&WKAR    SETC  'MSGWORK'
&MSGAR   SETC  'MSGAREA'
&GUYMWK  SETB  1
.WKOK    ANOP
.*
.**      SEE IF MESSAGE TO GENERATE
.*
         AIF   (T'&ID EQ 'O').ENDIT
.*
.**      GENERATE INITIAL CODE
.*
&LB      SETC  'ZMSG&SYSNDX'
         CNOP  0,4
&N       BAL   R1,&LB
&WT      SETB  0
         AIF   ('&WTO' NE 'YES').DONEWTO
&WT      SETB  1
.DONEWTO ANOP
         DC    B'&WT.0000000'
         DC    AL3(BFGIMSG)        ADDRESS OF MESSAGE CSECT
         DC    S(&WKAR),S(&MSGAR)
         AIF   ('&SYSECT' EQ '').NOSECT
         DC    CL8'&SYSECT'        THIS ID
         AGO   .GOSECT
.NOSECT  DC    CL8'UNKNOWN'
.GOSECT  ANOP
&I       SETA  2                   POINT AT FIRST TYPE/ADDR PAIR
.*
.**      TOP OF LOOP FOR EACH TYPE/ADDR PAIR
.*
.LOOP    AIF   (N'&SYSLIST LT &I).DONE
         AIF   (T'&SYSLIST(&I) EQ 'O').EDNTY
         AIF   ('&SYSLIST(&I)'(1,1) NE '(').ERR1
         AIF   (N'&SYSLIST(&I) NE 2).ERR2
&TYPE    SETC  '&SYSLIST(&I,1)'
.*
.**      CHECK FOR LAST ENTRY
.*
&K       SETA  0                   ASSUME NO EOF
         AIF   (N'&SYSLIST NE &I).NOEOF
&K       SETA  64                  SET EOF FLAG
.NOEOF   ANOP
.*
.**      FORMAT TYPE BYTE
.*
         AIF   (K'&SYSLIST(&I,1) LT 2).ERR3
         AIF   ('&TYPE'(1,1) NE 'C').NOTC
&J       SETA  128                 SET VALUE
&L       SETC  '&TYPE'(2,3)
         DC    AL1(&K+&J+&L)
         AGO   .DNTY
.NOTC    ANOP
         AIF   ('&TYPE'(1,1) NE 'H').NOTH
&J       SETA  1
         AGO   .HDLEN
.NOTH    AIF   ('&TYPE'(1,1) NE 'D').ERR4
&J       SETA  2
.HDLEN   ANOP
         AIF   ('&TYPE'(2,1) EQ '1').GENTYPE
         AIF   ('&TYPE'(2,1) NE '2').NOT2
&J       SETA  &J+2
         AGO   .GENTYPE
.NOT2    AIF   ('&TYPE'(2,1) NE '4').ERR5
&J       SETA  &J+4
.GENTYPE DC    AL1(&J+&K)
.*
.**      FORMAT ADDR BYTES
.*
.DNTY    ANOP
         AIF   ('&SYSLIST(&I,2)'(1,1) NE '(').NOTREG
         DC    AL3(&SYSLIST(&I,2))
         AGO   .EDNTY
.NOTREG  DC    AL1(0),S(&SYSLIST(&I,2))
.EDNTY   ANOP
.*
.**      LOOP FOR NEXT ADDR PAIR
.*
&I       SETA  &I+1
         AGO   .LOOP
.*
.**      SEE IF NEED TO GENERATE DUMMY ENTRY
.*
.DONE    ANOP
         AIF   (&I NE 2).NODUM
         DC    AL1(64),AL3(0)      DUMMY LIST FOR NO INSERTION
.NODUM   ANOP
.*
.**      GENERATE FINAL CODE
.*
&LB      L     R15,=V(BFGMSG)
         LA    R0,MSG&ID.ID
         BALR  R14,R15
.ENDIT   MEXIT
.ERR1    MNOTE 12,'INVALID TYPE/ADDR PAIR FORMAT'
         MNOTE *,'-&I-&SYSLIST(&I)-'
         MEXIT
.ERR2    MNOTE 12,'NUMBER OF ITEMS INVALID'
&J       SETA  N'&SYSLIST(&I)
         MNOTE *,'-&I-&SYSLIST(&I)-&J'
         MEXIT
.ERR3    MNOTE 12,'TYPE=C SPECIFIED WITHOUT MAX LENGTH'
&J       SETA  K'&SYSLIST(&I,1)
         MNOTE *,'-&I-&TYPE-&SYSLIST(&I,1)-&J-'
         MEXIT
.ERR4    MNOTE 12,'INVALID TYPE CODE SPECIFIED'
         MNOTE *,'-&I-&TYPE-'
         MEXIT
.ERR5    MNOTE 12,'INVALID LENGTH CODE IN TYPE FIELD'
         MNOTE *,'-&I-&TYPE-'
         MEXIT
         MEND
