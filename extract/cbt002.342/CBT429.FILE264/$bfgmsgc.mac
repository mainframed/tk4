BFGMSG   CSECT
         SAVE  (14,12),,BFGMSG..&SYSDATE..&SYSTIME
         LR    R12,R15             SETUP BASE
         USING BFGMSG,R12          SETUP ADDRESSABILITY
         LR    R9,R1               SAVE INPUT REG LIST
         LR    R11,R1              SAVE INPUT REG LIST (FOR GOOD)
         LR    R3,R0               SAVE MESSSAGE ID
         LR    R8,R13              SAVE REG SAVE AREA ADDR
         LA    R1,4(R9)            POINT TO WORKAREA B/DDD
         BAL   R14,SFMCBD          GET EFF ADDR IN R1
         ST    R13,4(R1)           CHAIN SAVE AREAS
         LR    R13,R1              POINT TO NEW SAVE AREA
         L     R1,0(R9)            GET MESSAGE OFFSET CSECT
         L     R6,0(R1)            GET MESSAGE TEXT CSECT
         AR    R1,R3               POINT TO PROPER OFFSET CSECT ENTRY
         LR    R3,R1               SAVE ADDR OF OFFSET ENTRY
         AH    R6,0(R1)            INCREMENT TO ACTUAL MSG TEXT
         LH    R7,0(R6)            GET LENGTH
         LA    R1,6(R9)            POINT AT MSG AREA B/DDD
         BAL   R14,SFMCBD          GET EFF ADDR IN R1
         LR    R5,R1               SAVE IN REG
*
**       REGISTER CONTENTS
**             R9  -->   PLIST
**             R8  -->   OS SAVE AREA CONTAINING REGS
**             R7  ===   LENGTH OF MSG TEXT TO MOVE
**             R6  -->   NEXT BYTE OF MSG TEXT TO MOVE
**             R5  -->   NEXT BYTE OF MSG OUTPUT TO MOVE
*
*
**       MOVE FIRST 4 BYTES (LENGTH WILL BE SET LATER)
*
         MVC   0(4,R5),0(R6)       MOVE IN LEN AND FLAGS
         LA    R5,4(R5)            POINT TO AREA PAST
         LA    R6,4(R6)            POINT FROM AREA PAST
         SH    R7,=H'4'            DECREMENT LENGTH
*
**       SETUP MESSAGE NUMBER
*
         MVC   0(3,R5),=C'BFG'     MOVE IN BASIC ID
         MVC   3(8,R5),8(R9)       MOVE IN CSECT NAME
         LA    R1,11               GET NUMBER TO DO
SFM04    CLI   0(R5),C' '          READ END OF CSECT YET
         BE    SFM06               QUIT AT BLANK
         LA    R5,1(R5)            POINT TO NEXT ONE
         BCT   R1,SFM04            LOOP TILL DONE
SFM06    MVC   0(2,R5),2(R3)       MOVE IN MESSAGE NUMBER
         LA    R5,2(R5)            POINT TO NEXT BYTE
         LA    R9,16(R9)           POINT AT INSERTION CONTROLS
*
**       MOVE MESSAGE TEXT LOOKING FOR INSERTION CHARACTER
*
SFM10    CLI   0(R6),C'Ö'          IS THIS INSERT CHAR
         BNE   SFM20               GO AND INSERT DATA
         BAL   R14,SFMINSRT        GO AND INSERT STRING
         B     SFM30               IF ALL DONE THE SKIP 'Ö'
SFM20    MVC   0(1,R5),0(R6)       MOVE CHAR OF MSG TEXT
         LA    R5,1(R5)            POINT TO AREA PAST
SFM30    LA    R6,1(R6)            POINT FROM AREA PAST
         BCT   R7,SFM10            KEEP GOING
*
**       DONE WITH WTO MESSAGE BUT FOR ALL THE ROUT AND DESC CODES
*
         MVC   0(4,R5),0(R6)       MOVE IN ROUTE AND DESC CODES
*
**       COMPUTE LENGTH OF MESSAGE
*
         LA    R1,6(R11)           POINT AT MSG AREA B/DDD
         BAL   R14,SFMCBD          GET EFF ADDR IN R1
         SR    R5,R1               GET LENGTH OF WTO
         STH   R5,0(R1)            SAVE LENGTH
*
**       ISSUE WTO AND RETURN
*
         TM    0(R11),X'80'        DO THE WTO??
         BZ    SFM40               NOPE
         L     R14,4(R13)          ACCESS OLD SAVEAREA
         L     R0,12+8(R14)        GET ORIG R0
         WTO   MF=(E,(R1))         ISSUE WTO
SFM40    L     R13,4(R13)          GET SAVE AREA ADDR
         RETURN (14,12)
*
**       FETCH REGISTER CONTENTS AT ENTRY
**
**       INPUT
**             R1  -->  1 BYTE FIELD BX
**                            WHERE B IS REGISTER NUMBER TO GET
**
**       OUTPUT
**             R15 === VALUE IN REGISTER B AT ENTRY
*
SFMFREG  DS    0H
         SR    R15,R15             CLEAR REG
         IC    R15,0(R1)           GET REG NUMBER
         SRL   R15,4               GET JUST REG NIBBLE
         SLL   R15,2               TIMES 4
         CH    R15,=AL2(R13*4)     IS IT R13
         BE    SFMRG80             YES SO EASY
         BL    SFMRG30             BEWTEEN R0 AND R12
         SH    R15,=AL2(16*4)      IF R14 OR R15 GET NEGATIVE
SFMRG30  L     R15,20(R8,R15)      GET VALUE
         BR    R14                 EXIT
SFMRG80  LR    R15,R8              GET ORIG R13 VALUE
         BR    R14                 EXIT
*
**       ROUTINE TO CONVERT B/DDD FORMAT HALFWORDS TO EFFECTIVE ADDRESS
**
**       INPUT
**             R1   -->   2 BYTE FIELD IN B/DDD FORM (S-TYPE CONSTANT)
**
**       OUTPUT
**             R1   ===   EFFECTIVE ADDRESS
*
SFMCBD   DS    0H
         LR    R0,R14              SAVE RETURN ADDR
         BAL   R14,SFMFREG         GET REGISTER
         ICM   R1,3,0(R1)          GET B/DDD
         N     R1,=A(X'00000FFF')  GET JUST DISPLACEMENT
         AR    R1,R15              GET EFFECTIVE ADDR
         LR    R14,R0              GET RETURN ADDR
         BR    R14                 EXIT
*
**       ROUTINE TO DO INSERTION
**
**       INPUT
**             R5   -->   OUTPUT AREA TO USE
**             R9   -->   INSERTION CONTROL TO USE
**
**       OUTPUT
**             R5   -->   NEXT OPEN BYTE IN OUTPUT AREA
**             R9   -->   NEXT INSERTION CONTROL OR 0
*
SFMINSRT DS    0H
         LTR   R9,R9               ANY INSERTION CONTROL LEFT
         BZR   R14                 NOPE
         ST    R14,12(R13)         SAVE RETURN ADDR
*
**       HANDLE NOP
*
         TM    0(R9),X'BF'         IS THIS NOP
         BZ    SFMIN90             YES SO SKIP
*
**       HANDLE CHARACTER FORMAT
*
         TM    0(R9),X'80'         IS THIS CHARACTER
         BZ    SFMIN20             NOPE
         BAL   R14,SFMINSAD        GET ADDR IN R1
         LR    R4,R1               SAVE ADDR TO MOVE
         SR    R3,R3               CLEAR REG
         IC    R3,0(R9)            GET LENGTH
         N     R3,=XL4'0000003F'   GET JUST LENGTH
SFMIN10  CLI   0(R4),C' '          IS IT BLANK
         BE    SFMIN90             YES SO DONE
         MVC   0(1,R5),0(R4)       MOVE IN CHAR
         LA    R5,1(R5)            UP TO PTR
         LA    R4,1(R4)            UP FROM PTR
         BCT   R3,SFMIN10          LOOP TILL DONE OR BLANK
         B     SFMIN90             ALL DONE
*
**       HANDLE OTHER NUMERIC TYPES
*
SFMIN20  SR    R1,R1               CLEAR REG
         IC    R1,0(R9)            GET TYPE BYTE
         N     R1,=XL4'0000003F'   GET JUST TYPE
         CH    R1,=H'6'            IS IT TOO BIG
         BH    SFMIN90             IF SO THEN EXIT NOT SUPPORTED
         SLL   R1,2                TIMES 4
         L     R15,SFMTYPE-4(R1)   GET RTN ADDR
         BR    R15                 AND GO THERE
SFMTYPE  DC    A(SFMIN30H,SFMIN30D) =1,2    1 BYTE HEX, DECIMAL
         DC    A(SFMIN40H,SFMIN40D) =3,4    2 BYTE HEX, DECIMAL
         DC    A(SFMIN50H,SFMIN50D) =5,6    4 BYTE HEX, DECIMAL
*
**       FORMAT 1 BYTE IN HEX
*
SFMIN30H DS    0H
         BAL   R14,SFMINSAD        GET ADDR IN R1
         ICM   R15,8,0(R1)         GET A BYTE
         BAL   R14,SFMHEX          FORMAT HEX WORD
         MVC   0(2,R5),20(R13)     MOVE IN CHARS
         LA    R5,2(R5)            POINT PAST IT
         B     SFMIN90             NOW EXIT
*
**       FORMAT 1 BYTE IN DECIMAL
*
SFMIN30D DS    0H
         BAL   R14,SFMINSAD        GET ADDR IN R1
         SR    R15,R15             CLEAR REGISTER
         ICM   R15,1,0(R1)         GET A BYTE
         BAL   R14,SFMDEC          FORMAT HEX WORD
         B     SFMIN90             NOW EXIT
*
**       FORMAT 2 BYTES IN HEX
*
SFMIN40H DS    0H
         BAL   R14,SFMINSAD        GET ADDR IN R1
         ICM   R15,12,0(R1)        GET TWO BYTES
         BAL   R14,SFMHEX          FORMAT HEX WORD
         MVC   0(4,R5),20(R13)     MOVE IN CHARS
         LA    R5,4(R5)            POINT PAST IT
         B     SFMIN90             NOW EXIT
*
**       FORMAT 2 BYTES IN DECIMAL
*
SFMIN40D DS    0H
         BAL   R14,SFMINSAD        GET ADDR IN R1
         SR    R15,R15             CLEAR REGISTER
         ICM   R15,3,0(R1)         GET A BYTE
         BAL   R14,SFMDEC          FORMAT HEX WORD
         B     SFMIN90             NOW EXIT
*
**       FORMAT 4 BYTES IN HEX
*
SFMIN50H DS    0H
         BAL   R14,SFMINSAD        GET ADDR IN R1
         ICM   R15,15,0(R1)        GET TWO BYTES
         BAL   R14,SFMHEX          FORMAT HEX WORD
         MVC   0(8,R5),20(R13)     MOVE IN CHARS
         LA    R5,8(R5)            POINT PAST IT
         B     SFMIN90             NOW EXIT
*
**       FORMAT 4 BYTES IN DECIMAL
*
SFMIN50D DS    0H
         BAL   R14,SFMINSAD        GET ADDR IN R1
         SR    R15,R15             CLEAR REGISTER
         ICM   R15,15,0(R1)        GET A BYTE
         BAL   R14,SFMDEC          FORMAT HEX WORD
         B     SFMIN90             NOW EXIT
*
**       HANDLE POSSIBLE LAST ONE
*
SFMIN90  L     R14,12(R13)         GET RETURN ADDR
         TM    0(R9),X'40'         IS THIS LAST ENTRY
         BZ    SFMIN92             NOPE
         SR    R9,R9               YES SO CLEAR INSERTION CONTROL
         BR    R14                 EXIT
SFMIN92  LA    R9,4(R9)            POINT TO NEXT
         BR    R14                 EXIT
*
**       ROUTINE TO EVALUATE VALUE ADDRESS FROM INSERTION CONTROL ENTRY
**
**       INPUT
**             R9   -->   INSERTION CONTROL
**
**       OUTPUT
**             R1   -->   VALUE TO BE INSERTED
*
SFMINSAD DS    0H
         CLC   2(2,R9),=H'16'      IS THIS A REG
         BH    SFMINA10            NOPE
*
**       FETCH REGISTER CONTENTS
*
         LR    R3,R14              SAVE RETURN ADDR
         IC    R1,3(R9)            GET REG
         SLL   R1,4                MOVE TO DIFFERENT NIBBLE
         STC   R1,0(R13)           SAVE IT
         LA    R1,0(R13)           POINT AT IT
         BAL   R14,SFMFREG         GET VALUE
         LR    R1,R15              RETURN IT PROPERLY
         BR    R3                  EXIT
*
**       EVALUATE B/DDD FIELD
*
SFMINA10 DS    0H
         LA    R1,2(R9)            POINT AT B/DDD
         B     SFMCBD              GO AND CONVERT HE WILL RETURN
*
**       ROUTINE TO FORMAT VALUE IN R15 IN HEX
**
**       INPUT
**             R15  ===   VALUE TO CONVERT TO HEX
**
**       OUTPUT
**             20(R13)   ===   8 CHARACTERS  (HEX REPRESENTATION OF R1)
*
SFMHEX   DS    0H
         ST    R15,16(R13)         SAVE WORD
         UNPK  20(9,R13),16(5,R13) UNPACK IT
         TR    20(8,R13),SFMTRTBL-240 MAKE HEX
         BR    R14
SFMTRTBL DC    C'0123456789ABCDEF'
*
**       ROUTINE TO FORMAT VALUE IN R15 IN DECIMAL
**
**       INPUT
**             R5   -->   AREA TO PUT CONVERTED STRING
**             R15  ===   VALUE TO CONVERT TO DECIMAL
**
**       OUTPUT
**             R5   -->   NEXT OPEN BYTE
*
SFMDEC   DS    0H
         ST    R15,16(R13)         SAVE WORD
         MVC   20(15,R13),=XL15'4020206B2020206B2020206B202120'
         LA    R1,44(R13)          GET ADDRESS
         N     R1,=XL4'FFFFFFF8'   GET DOUBLE WORD OFFSET
         CVD   R15,0(R1)           MAKE DECIMAL
         ED    20(15,R13),2(R1)    MAKE CHARACTER
         LA    R15,15              NUMBER TO DO
         LA    R1,20(R13)          POINT AT STRING
SFMDEC1  CLI   0(R1),C' '          IS IT BLANK
         BNE   SFMDEC2             NOPE SO MOVE IT
         LA    R1,1(R1)            MOVE PTR
         BCT   R15,SFMDEC1         KEEP GOING
         BR    R14                 EXIT **IMPOSSIBLE ALL BLANK**
SFMDEC2  BCTR  R15,0               GET MACHINE LENGTH
         EX    R15,SFMDEC9         MOVE IN DATA
         LA    R5,1(R5,R15)        POINT TO NEXT BYTE
         BR    R14
SFMDEC9  MVC   0(0,R5),0(R1)       MOVE IN STRING
         LTORG
