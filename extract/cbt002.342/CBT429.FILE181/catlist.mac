CATLIST  TITLE '-----  PRODUCE CONDENSED LISTING OF ICF CATALOG  -----'
***********************************************************************
*                                                                     *
*                *===================================*                *
*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *
*                *===================================*                *
*                                                                     *
*   Copyright (c) 1984, 1985, 1988, 1989 by Leonard D. Woren.         *
*   All rights reserved, except as explicitly noted herein.  This     *
*   program may be used, modified, and distributed, provided that     *
*   all of the following conditions are met:                          *
*                                                                     *
*   (1)  This notice and all references to the original author(s)     *
*        are retained forever in all copies and versions of the       *
*        source.                                                      *
*                                                                     *
*   (2)  This program may be distributed via "public domain" mods     *
*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *
*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *
*        Group) tape, etc, etc.  Only versions of this program        *
*        authorized by Leonard D. Woren may be placed on these        *
*        tapes.  Distribution of modified versions of this program,   *
*        via the above named tapes or via any method, is              *
*        specifically prohibited.  (Please note the reason stated     *
*        below.)                                                      *
*                                                                     *
*   (3)  Permission is specifically NOT given to distribute MODIFIED  *
*        versions of this program.  Modified versions may be used     *
*        only at the site making the mods.  (Please note the reason   *
*        stated below.)                                               *
*                                                                     *
*   (4)  The only charge which may be made for distribution is to     *
*        recover real costs, such as postage, or creating a tape.     *
*                                                                     *
*   (5)  The only charge for running the program which may be made    *
*        is your normal charge for computer time.                     *
*                                                                     *
*   The reason for the restrictions on distribution of modified       *
*   versions is to try to prevent circulation of many different       *
*   versions of the program, each with a few features that aren't     *
*   in any other version.                                             *
*                                                                     *
*   Since everyone will benefit from this, please send all updates    *
*   to me.  (Address below.)  I will try merge them in, if they       *
*   have been made to a reasonably current version of the source,     *
*   and if they are in keeping with the general design of the rest    *
*   of the program.  Mods may be altered by me for this purpose.      *
*   Any such mods which are incorporated into the program will then   *
*   become governed by the restrictions specified here for the whole  *
*   program, with appropriate credit to the contributor.              *
*                                                                     *
*   Although this program has been extensively tested, and is in use  *
*   in a production environment (MVS/ESA release 3.1, with DFP 3.1),  *
*   no guarantee is made of (or responsibility assumed for) correct   *
*   or reliable operation.  I may try to help with problems.  I do    *
*   not assume any responsibility to distribute updates.              *
*                                                                     *
*                                                                     *
*   CONTACT:                                                          *
*          Leonard D. Woren                                           *
*        snail-mail:                                                  *
*          University of Southern California                          *
*          University Park  Mail Code 0251                            *
*          Los Angeles, CA   90089-0251                               *
*                                                                     *
*        e-mail:                                                      *
*          LDW@USCMVSA.BITNET                                         *
*          LDW@MVSA.USC.EDU                                           *
*          ...!usc!ldw (last resort)                                  *
*                                                                     *
*          (213) 740-2875 (direct -- 11 am to 7 pm Pacific time)      *
*                                                                     *
*          I prefer electronic mail.  If you call me long distance    *
*          and leave a msg because you didn't get me, there's a good  *
*          chance that I won't call back.  Moral:  don't leave a      *
*          message for me to call you back unless you're in 213,      *
*          818, 714, or 310.  Sorry.                                  *
*                                                                     *
*          SHARE installation code:  USC                              *
*          GUIDE installation code:  OUY                              *
*                                                                     *
***********************************************************************
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*   PROGRAM NAME:  CATLIST                                            *
*                                                                     *
*   PURPOSE:       PRINT A CONDENSED LISTING OF WHAT'S CATALOGED IN   *
*                  AN ICF CATALOG BY READING EITHER THE CATALOG       *
*                  ITSELF (APF AUTHORIZATION REQUIRED) OR AN          *
*                  'EXPORT TEMP' COPY OF AN ICF CATALOG.              *
*                                                                     *
*   AUTHOR:        LEONARD D. WOREN                                   *
*                                                                     *
*   DATE:          FEBRUARY 15, 1984                                  *
*                                                                     *
*   ATTRIBUTES:    NONE                                               *
*                                                                     *
*   JCL:                                                              *
*        //CATLIST  EXEC PGM=CATLIST                                  *
*        //SYSPRINT  DD  SYSOUT=*                                     *
*        //CATIN     DD  DISP=SHR,DSN=CATALOG.NAME                    *
*                                                                     *
*   UPDATES:                                                          *
*      29OCT89  LDW  ADD CODE TO READ ICF CATALOG DIRECTLY            *
*      29MAY88  LDW  FIX FOR UNKNOWN RECORD TYPES                     *
*      06/17/85 LDW  ADD SUPPORT FOR TYPES 'T' AND 'C'                *
*                    RENAME FROM ICFCATL TO CATLIST                   *
*      05/08/84 LDW  ADD LINECNT= PARM                                *
*                                                                     *
*---------------------------------------------------------------------*
         EJECT ,
         MACRO
&NFS     TYPENT  &TYPE,&DESC
         LCLC  &WHERE
&WHERE   SETC  '-1'
         AIF   (K'&TYPE EQ 2).GEN
&WHERE   SETC  'TYPE$&TYPE-$'
         AIF   ('&TYPE' NE '?').GEN
&WHERE   SETC  'TYPE$$-$'
.GEN     ANOP
&NFS     DC    Y(&WHERE),CL1'&TYPE',CL10&DESC,XL3'00',F'0'
         SPACE 1
         MEND
         SPACE 3
CATLIST  OSENTER  EXIT=LEAVE,RC=0,PARMREG=R2,LENREG=R3,ADDRREG=R4,     $
               ENV=(CALL,SIM),BASE2=R11
$        EQU   CATLIST                  MAS'S STUNT
LINK     EQU   R10                      INTERNAL LINKAGE REGISTER
         LTR   R3,R3                    ANY PARM?
         SPACE 1
PARMLOOP BNP   NO$PARM                  NO - SKIP
         CH    R3,=H'4'                 LONG ENOUGH?
         BL    NO$PARM                  NO - SKIP
         CLC   =C'TEST',0(R4)           PARM=TEST?
         BNE   PARM$01                  NO - try next
         OI    FLAGS,FTEST              YES - SET FLAG FOR LATER
         LA    R4,5(,R4)                -> NEXT PARM ITEM
         SH    R3,=H'5'                 DECREMENT LENGTH
         B     PARMLOOP                 CONTINUE IF MORE PARM
         SPACE 2
PARM$01  CH    R3,=H'5'                 LONG ENOUGH?
         BL    NO$PARM                  NO - SKIP
         CLC   =C'PSWD=',0(R4)          PARM=PSWD=xxxx?
         BNE   PARM$02                  NO - try next
         LA    R4,5(,R4)                -> password
         SH    R3,=H'5'                 DECREMENT LENGTH
         BNP   NO$PARM                  skip if nothing left
         LA    R1,CAT#PSWD+1            -> target
         LA    R0,8                     max length
         SPACE 1
PSWD$LP  MVC   0(1,R1),0(R4)            move one char of password
         LA    R1,1(,R1)                bump output ptr
         LA    R4,1(,R4)                bump input ptr
         BCT   R3,*+8                   continue if more parm
         B     NO$PARM                  nothing left - stop
         BCT   R0,PSWD$LP               move next char of password
         B     PARMLOOP                 CONTINUE IF MORE PARM
         SPACE 2
PARM$02  CH    R3,=H'10'                LONG ENOUGH?
         BL    NO$PARM                  NO - SKIP
         CLC   =C'LINECNT=',0(R4)       PARM=LINECNT=NN?
         BNE   NO$PARM                  NO - SKIP
         IC    R0,8(,R4)                GET FIRST DIGIT
         IC    R1,9(,R4)                GET SECOND DIGIT
         N     R0,=F'15'                STRIP IT
         N     R1,=F'15'                STRIP IT
         MH    R0,=H'10'                SCALE FIRST DIGIT
         AR    R0,R1                    COMBINE DIGITS
         SH    R0,=H'7'                 ADJUST FOR MY OVERHEAD
         STH   R0,LINECT                SAVE FOR PUTLINE'S USE
         LA    R4,11(,R4)               -> NEXT PARM ITEM
         SH    R3,=H'11'                DECREMENT LENGTH
         B     PARMLOOP                 CONTINUE IF MORE PARM
         SPACE 3
NO$PARM  RDJFCB  CATIN                  GET THE JFCB
         LTR   R15,R15                  OK?
         BZ    OK$JFCB                  YES
         ABEND 98,DUMP
         SPACE 2
OK$JFCB  TM    JFCDSRG2,JFCORGAM        VSAM?
         BZ    GO$OPEN                  NO - SKIP
         OI    FLAGS,FACB               YES - REMEMBER WE'RE USING ACB
         LA    R0,CATACB                YES - ALTER OPEN LIST TO ...
         ST    R0,OPENMFL               ... POINT TO ACB INSTEAD OF DCB
         SPACE 2
GO$OPEN  OPEN  MF=(E,OPENMFL)
         SPACE 1
         LTR   R15,R15                  OPEN OK?
         BNZ   ABEND99                  NO
**       TM    CATIN+48,X'10'
         L     R1,OPENMFL               -> CATIN OR CATACB
         TM    48(R1),X'10'
         BNO   ABEND99
         TM    SYSPRINT+48,X'10'
         BO    OPENOK
ABEND99  ABEND 99
OPENOK   TM    FLAGS,FACB               USING ACB?
         BZ    NOT$VSAM                 NO - READ EXPORT HEADER RECORDS
         MVC   HEADER1+33(44),JFCBDSNM  PUT CATALOG NAME INTO MY HEADER
         SPACE 1
         TODAY HEADER1+80,TIME=HEADER1+103  CURRENT DATE/TIME INTO HDR
         SPACE 2
         GETMAIN  RU,LV=32767,SP=2      get a buffer
         SPACE 1
         ST    R1,ADDRREC               save for later
         SPACE 1
         MODCB RPL=CATRPL,AREA=(R1)     put buffer address into RPL
         SPACE 2
         B     LOOP                     START PROCESSING
         SPACE 3
NOT$VSAM BAL   LINK,GETCATIN            READ EXPORT HEADER REC # 1
         MVC   HEADER1+80(8),X'18'(R1)  PUT HIS DATE INTO MY HEADER
         MVC   HEADER1+91(8),X'10'(R1)  PUT HIS TIME INTO MY HEADER
         BAL   LINK,GETCATIN            READ EXPORT HEADER REC # 2
         BAL   LINK,GETCATIN            READ EXPORT HEADER REC # 3
******** MVC   HEADER1+33(44),X'BF'(R1) PUT CATALOG NAME INTO MY HEADER
         BAL   LINK,GETCATIN            READ EXPORT HEADER REC # 4
         BAL   LINK,GETCATIN            READ EXPORT HEADER REC # 5
         MVC   HEADER1+33(44),9(R1)     PUT CATALOG NAME INTO MY HEADER
         BAL   LINK,GETCATIN            READ EXPORT HEADER REC # 6
         BAL   LINK,GETCATIN            READ EXPORT HEADER REC # 7
         BAL   LINK,GETCATIN            READ EXPORT HEADER REC # 8
         BAL   LINK,GETCATIN            READ EXPORT HEADER REC # 9
         EJECT
*---------------------------------------------------------------------*
*  MAIN LOOP - GET ANOTHER CATALOG RECORD                             *
*---------------------------------------------------------------------*
LOOP     MVC   OLINE,BLANKS             CLEAR PRINT LINE
         BAL   LINK,GETCATIN            GET A CATALOG RECORD
**       ST    R1,ADDRREC               SAVE RECORD ADDRESS
**       LH    R3,4(,R1)                SAVE LENGTH OF RECORD (NOT RDW)
**       SH    R3,=H'2'                 ADJUST FOR LL
**       LA    R4,4+2(,R1)              -> FIRST CELL IN RECORD
*                                       (SKIP RDW (4) & LL (2) )
         LH    R3,0(,R1)                SAVE LENGTH OF RECORD (NOT RDW)
         SH    R3,=H'2'                 ADJUST FOR LL
         LA    R4,2(,R1)                -> FIRST CELL IN RECORD
         LA    R2,TYPETBL               -> CELL TYPE TABLE
         SPACE 1
TYPELOOP CLC   2(1,R4),2(R2)            THIS AN INTERESTING ENTRY TYPE?
         BE    PROCESS                  YES - USE IT
         LA    R2,TYPETBLL(,R2)         -> NEXT ENTRY TYPE
         CLI   0(R2),X'FF'              END OF TABLE?
         BNE   TYPELOOP                 NO - KEEP LOOKING
******** B     LOOP                     YES - IGNORE THIS RECORD
         LA    R2,TYPEUNKN              YES - PROCESS AS UNKNOWN TYPE
         SPACE 2
PROCESS  MVC   OL#ENTRY,3(R2)           FILL IN ENTRY TYPE
         L     R14,16(,R2)              GET ENTRY COUNT
         LA    R14,1(,R14)              INCREMENT
         ST    R14,16(,R2)              SAVE UPDATED ENTRY COUNT
         LH    R15,0(,R2)               GET OFFSET OF ROUTINE
         B     $(R15)                   INVOKE CORRECT ROUTINE
         SPACE 3
GETCATIN TM    FLAGS,FACB               USING ACB?
         BNZ   GET$ACB                  YES - USE IT
         SPACE 1
         GET   CATIN                    GET A COMPLETE CATALOG RECORD
         SPACE 1
         LA    R1,4(,R1)                SKIP OVER RDW
         ST    R1,ADDRREC               SAVE RECORD ADDRESS
         BR    LINK                     RETURN TO CALLER
         SPACE 2
GET$ACB  GET   RPL=CATRPL               READ FROM THAT LOCATION
         SPACE 1
         L     R1,ADDRREC               GET RECORD ADDRESS
         LTR   R15,R15                  O.K.?
         BZR   LINK                     YES - RETURN TO CALLER
         ST    R15,DWD
         MVC   OLINE(66),=C'-*** VSAM GET Error *** R15 = xxxxxxxx RPL $
               Feedback = xx xx xx ***'
         HEX   OLINE+30,DWD,LEN=4       R15
         HEX   OLINE+54,CATRPL+13,LEN=1 feedback (return code)
         HEX   OLINE+57,CATRPL+14,LEN=1 feedback (component)
         HEX   OLINE+60,CATRPL+15,LEN=1 feedback (reason code)
         BAL   LINK,PUTLINEB            PRINT LINE AND CLEAR
         ABEND 2,DUMP                   NO
         EJECT ,
*---------------------------------------------------------------------*
*  PROCESS ENTRY TYPE 'NONVSAM'         PAGE 82                       *
*---------------------------------------------------------------------*
         USNGX NVNC,R4
TYPE$A   MVC   OL#NAME,NVNAME           ENTRY NAME TO PRINT LINE
         LH    R2,NVOLCNT               GET VOLUME COUNT
         DROPX R4                       NVNC
         BAL   LINK,NEXTCELL            ADVANCE TO NEXT CELL
         BAL   LINK,SKIP$OWN       %%%  SKIP REQUIRED OWNER CELL
         BAL   LINK,SKIP$ASC       %%%  SKIP OPTIONAL ASSOC CELL
         SPACE 1
A$VOL$LP BAL   LINK,FMT$VOL             FORMAT VOLUME CELL(S)
         BCT   R2,*+8                   CONTINUE IF MORE VOLUME CELLS
         B     A$VOL$EX                 SEE IF ANY MORE CELLS
         LTR   R3,R3                    ANY LENGTH LEFT?
         BP    A$VOL$LP                 YES - GO FORMAT NEXT VOL CELL
         BAL   R14,LOGICERR             NO - DIE
         SPACE 1
A$VOL$EX LTR   R3,R3                    ANY LENGTH LEFT?
         BNP   LOOP                     NO - GO READ NEXT RECORD
         BAL   R14,LOGICERR             NO - DIE
         EJECT ,
*---------------------------------------------------------------------*
*  PROCESS ENTRY TYPE 'ALIAS'           PAGE 82                       *
*---------------------------------------------------------------------*
         USNGX NVNC,R4
TYPE$X   MVC   OL#NAME,NVNAME           ENTRY NAME TO PRINT LINE
         BAL   LINK,NEXTCELL            ADVANCE TO NEXT CELL
         DROPX R4                       NVNC
         USNGX ASSOCC,R4
         CLI   ASCTYPE,X'03'            ASSOCIATION CELL?
         BE    *+8                      YES - OK
         BAL   R14,LOGICERR             NO - DIE
*  DON'T CHECK THE NUMBER OF ASSOCIATIONS (ASCOUNT)
         LA    R5,ASCKEYS               -> FIRST ASSOCIATION ENTRY
         USNGX ASCKEYS,R5
         IC    R15,ASCKYLEN             GET LENGTH OF ASSOC KEY
         BCTR  R15,0                    -1 FOR EX
         BCTR  R15,0                    -1 FOR SOME OTHER STUPID REASON
         MVC   OL#MISC(*-*),ASCKEY      << EXECUTED >>
         EX    R15,*-6                  ASSOCIATED NAME TO PRINT LINE
         BAL   LINK,PUTLINE
         BAL   LINK,NEXTCELL            ADVANCE TO NEXT CELL
         BNP   LOOP                     GET NEXT REC IF NO MORE CELLS
         B     UNKN$LP                  MORE CELLS - WHAT ARE THEY???
         SPACE 2
         DROPX R4,R5                    ASSOCC, ASCKEYS
         EJECT ,
*---------------------------------------------------------------------*
*  PROCESS ENTRY TYPE 'GDG BASE'        PAGE 83                       *
*---------------------------------------------------------------------*
         USNGX GDGNC,R4
TYPE$B   MVC   OL#NAME,GDGNAME          ENTRY NAME TO PRINT LINE
         LA    R15,GDGNAME+43           -> END OF NAME
         CLI   0(R15),C' '              FIND END OF NAME?
         BNE   *+12                     YES - GO COMPUTE LENGTH
         BCT   R15,*-8                  TRY PREVIOUS CHARACTER
         BAL   R14,LOGICERR             SCANNED THRU ALL OF STORAGE???
         LA    R14,GDGNAME-1            -> START OF NAME -1
         SR    R15,R14                  COMPUTE LENGTH OF BASE NAME
         STH   R15,GDG#LEN              SAVE LENGTH OF GDG BASE (KEY)
         MVC   GDG#NAME,GDGNAME         SAVE GDG BASE NAME
         CLI   GDGNOEXT,0               ANY EXTENSION RECORDS?
         BE    B$NO$EXT                 NO - OK
         MVC   OL#UNKN(14),=C'NBR EXT RECS ='
         HEX   OL#UNKN+15,GDGNOEXT,1
         DROPX R4                       GDGNC
         SPACE 2
B$NO$EXT BAL   LINK,NEXTCELL            ADVANCE TO NEXT CELL
         BAL   LINK,SKIP$OWN       %%%  SKIP OWNER CELL (REQUIRED)
         BP    *+8                      CONTINUE IF MORE CELLS
         BAL   R14,LOGICERR             DIE IF RECORD EXHAUSTED
         USNGX GATC,R4
         CLI   GATYPE,X'05'             IS IT A GEN AGING TABLE CELL?
         BE    *+8                      YES - CONTINUE
         BAL   R14,LOGICERR             NO - DIE
         SPACE 1
         MVC   OL#MISC(6),=C'LIMIT='
         SR    R0,R0                    CLEAR FOR IC
         IC    R0,GATLIMIT              GET MAX NUMBER OF ENTRIES
         CVD   R0,DWD                   CONVERT TO PACKED
         OI    DWD+7,X'0F'              REMOVE SIGN NIBBLE
         UNPK  OL#MISC+6(3),DWD
         SPACE 1
         MVC   OL#MISC+11(8),=C'CURRENT='
         SR    R0,R0                    CLEAR FOR IC
         IC    R0,GATCNT                GET CURRENT NUMBER OF ENTRIES
         CVD   R0,DWD                   CONVERT TO PACKED
         OI    DWD+7,X'0F'              REMOVE SIGN NIBBLE
         UNPK  OL#MISC+19(3),DWD
         SPACE 1
         MVC   OL#MISC+25(9),=C'NOSCRATCH'  ASSUME NOSCRATCH
         TM    GATATTR,GATSCRTH         SCRATCH?
         BNO   *+10                     NO - OK
         MVC   OL#MISC+25(2),BLANKS     YES - CHANGE TO '  SCRATCH'
         SPACE 1
         MVC   OL#MISC+36(7),=C'NOEMPTY'  ASSUME NOEMPTY
         TM    GATATTR,GATDELET         EMPTY?
         BNO   *+10                     NO - OK
         MVC   OL#MISC+36(2),BLANKS     YES - CHANGE TO '  EMPTY'
         SPACE 1
         BAL   LINK,PUTLINE
         SR    R5,R5                    CLEAR FOR IC
         IC    R5,GATCNT                GET CURRENT NUMBER OF ENTRIES
         BAL   LINK,NEXTCELL            ADVANCE TO NEXT CELL
         BNP   LOOP                     GET NEXT REC IF NO MORE CELLS
         DROPX R4                       GATC
         SPACE 10
*---------------------------------------------------------------------*
*  PROCESS GDS 'NONVSAM' SUBENTRIES     PAGE 83                       *
*---------------------------------------------------------------------*
         SPACE 1
         USNGX GDSNC,R4
GDG$LOOP CLI   GDSTYPE,C'H'             IS THIS A GDG NAME CELL?
         BE    *+8                      YES - CONTINUE
         BAL   R14,LOGICERR             NO - DIE
         MVC   OL#ENTRY,TYPEGDGE+3      INDICATE GDG-NONVSAM
         L     R14,TYPEGDGE+16          GET ENTRY COUNT
         LA    R14,1(,R14)              INCREMENT
         ST    R14,TYPEGDGE+16          SAVE UPDATED ENTRY COUNT
         MVC   OL#NAME(35),GDG#NAME     ENTRY NAME TO PRINT LINE
         LA    R1,OL#NAME               -> START OF NAME FIELD
         AH    R1,GDG#LEN               -> END OF GDG BASE NAME
         SR    R0,R0                    CLEAR FOR ICM
         ICM   R0,B'0011',GDSGENO       GET GENERATION NUMBER
         CVD   R0,DWD                   BINARY -> PACKED
         UNPK  2(4,R1),DWD              PACKED -> PRINTABLE
         SR    R0,R0                    CLEAR FOR IC
         IC    R0,GDSVERNO              GET VERSION NUMBER
         CVD   R0,DWD                   BINARY -> PACKED
         UNPK  7(2,R1),DWD              PACKED -> PRINTABLE
         OC    0(9,R1),=C'.G0000V00'    PUT IN MISC, REMOVE SIGNS
         SPACE 1
******** LH    R2,GDSVOLCT              GET VOLUME COUNT
*  APPARENTLY, THE ABOVE NUMBER IS ALWAYS 1 FOR A GDS!!!
*  SO, USE A DIFFERENT NUMBER...
         SR    R2,R2                    CLEAR FOR ICM
         ICM   R2,B'0011',GDSCMPLN      GET LENGTH OF GDS COMPONENT
*  WHAT DINGBAT PUT A HALFWORD NUMBER NOT HALFWORD ALIGNED???
         DROPX R4                       GDSNC
         BAL   LINK,NEXTCELL            ADVANCE TO NEXT CELL
         BP    *+8                      CONTINUE IF MORE CELLS
         BAL   R14,LOGICERR             DIE IF RECORD EXHAUSTED
         SR    R2,R0                    SUBTRACT LENGTH OF PREV CELL
         USNGX VOLCELL,R4               I HOPE
         CLI   VOLTYPE,X'01'            OWNER CELL?
         BNE   H$NO$OWN                 NO - SKIP
         BAL   LINK,NEXTCELL            ADVANCE TO NEXT CELL
         BP    *+8                      CONTINUE IF MORE CELLS
         BAL   R14,LOGICERR             DIE IF RECORD EXHAUSTED
         SR    R2,R0                    SUBTRACT LENGTH OF PREV CELL
         BP    *+8                      CONTINUE IF MORE CELLS
         BAL   R14,LOGICERR             DIE IF RECORD EXHAUSTED
         SPACE 1
H$NO$OWN BAL   LINK,SKIP$ASC       %%%  SKIP ASSOC CELL (OPTIONAL)
         BP    *+8                      CONTINUE IF MORE CELLS
         BAL   R14,LOGICERR             DIE IF RECORD EXHAUSTED
         SR    R2,R0                    SUBTRACT LENGTH OF PREV CELL
         BP    *+8                      CONTINUE IF MORE CELLS
         BAL   R14,LOGICERR             DIE IF RECORD EXHAUSTED
         SPACE 1
H$VOL$LP SH    R2,VOLLEN                SUBTRACT LENGTH OF THIS CELL
         BAL   LINK,FMT$VOL             FORMAT VOLUME CELL(S)
         LTR   R2,R2                    DONE WITH THIS COMPONENT?
         BNP   H$NEXT                   NO - PROCESS NEXT, IF ANY
         LTR   R3,R3                    ANY LENGTH LEFT?
         BP    H$VOL$LP                 YES - FORMAT NEXT VOL LINE
         BAL   R14,LOGICERR             NO - DIE
         SPACE 1
H$NEXT   BCT   R5,*+8                   CONTINUE IF MORE GDS ENTRIES
         B     LOOP                     GET NEXT RECORD IF NO MORE GDS
         LTR   R3,R3                    ANY LENGTH LEFT?
         BP    GDG$LOOP                 YES - FORMAT NEXT GDS LINE
         BAL   R14,LOGICERR             NO - DIE
         DROPX R4                       VOLCELL
         EJECT ,
*---------------------------------------------------------------------*
*  PROCESS ENTRY TYPE 'TRUENAME'        PAGE 82                       *
*---------------------------------------------------------------------*
         USNGX TNC,R4
TYPE$T   MVC   OL#NAME,TRUENAME         ENTRY NAME TO PRINT LINE
         MVI   OL#MISC,C'('
         MVC   OL#MISC+1(1),TRUNTYPE    ENTRY TYPE OF ASSOCIATED ENTRY
         MVI   OL#MISC+2,C')'
         BAL   LINK,NEXTCELL            ADVANCE TO NEXT CELL
         DROPX R4                       NVNC
         SPACE 2
         USNGX ASSOCC,R4
         CLI   ASCTYPE,X'03'            ASSOCIATION CELL?
         BE    *+8                      YES - OK
         BAL   R14,LOGICERR             NO - DIE
*  DON'T CHECK THE NUMBER OF ASSOCIATIONS (ASCOUNT)
         LA    R5,ASCKEYS               -> FIRST ASSOCIATION ENTRY
         USNGX ASCKEYS,R5
         IC    R15,ASCKYLEN             GET LENGTH OF ASSOC KEY
         BCTR  R15,0                    -1 FOR EX
         BCTR  R15,0                    -1 FOR SOME OTHER STUPID REASON
         MVC   OL#MISC+5(*-*),ASCKEY    << EXECUTED >>
         EX    R15,*-6                  ASSOCIATED NAME TO PRINT LINE
         BAL   LINK,PUTLINE
         BAL   LINK,NEXTCELL            ADVANCE TO NEXT CELL
         BZ    LOOP                     GET NEXT REC IF NO MORE CELLS
         B     UNKN$LP                  MORE CELLS - WHAT ARE THEY???
         SPACE 2
         DROPX R4,R5                    ASSOCC, ASCKEYS
         EJECT ,
*---------------------------------------------------------------------*
*  PROCESS ENTRY TYPE 'CLUSTER'         PAGE 83                       *
*---------------------------------------------------------------------*
         USNGX VCNC,R4
TYPE$C   MVC   OL#NAME,CLNAME           ENTRY NAME TO PRINT LINE
         CLI   CLNOEXT,0                ANY EXTENSION RECORDS?
         BE    C$NO$EXT                 NO OK
         MVC   OL#UNKN(14),=C'NBR EXT RECS ='
         HEX   OL#UNKN+15,CLNOEXT,1
C$NO$EXT BAL   LINK,NEXTCELL            ADVANCE TO NEXT CELL
         BAL   LINK,SKIP$OWN       %%%  SKIP OWNER CELL (REQUIRED)
         BAL   LINK,SKIP$SEC            SKIP SECURITY CELL (OPTIONAL)
         BAL   LINK,SKIP$ASC       %%%  SKIP ASSOC CELL (OPTIONAL)
         BAL   LINK,SKIP$REL            SKIP RELATION CELL (OPTIONAL)
         BAL   LINK,PUTLINE
         LTR   R3,R3                    ANY MORE CELLS?
         BP    *+8                      YES - CONTINUE
         BAL   R14,LOGICERR             DIE IF RECORD EXHAUSTED
         SPACE 1
*---  NEXT CELLS SHOULD BE DATA/OWNER/SECURITY/VOLUME...
         CLI   CLTYPE,C'D'              DATA NAME CELL?
         BE    *+8                      OK - CONTINUE
         BAL   R14,LOGICERR             DIE IF RECORD EXHAUSTED
         LA    R1,TYPEDATA              -> TYPE DESCRIPTOR
         BAL   LINK,FMT$DINC            FORMAT DATA COMPONENT
         LTR   R3,R3                    ANYTHING LEFT?
         BNP   LOOP                     NO - READ NEXT RECORD
         CLI   CLTYPE,C'I'              INDEX NAME CELL?
         BE    *+8                      OK - CONTINUE
         BAL   R14,LOGICERR             DIE IF RECORD EXHAUSTED
         LA    R1,TYPEINDX              -> TYPE DESCRIPTOR
         BAL   LINK,FMT$DINC            FORMAT DATA COMPONENT
         LTR   R3,R3                    ANYTHING LEFT?
         BNP   LOOP                     NO - READ NEXT RECORD
         B     UNKN$LP                  YES - DUMP ALL REMAINING CELLS
         DROPX R4                       NVNC
         SPACE 6
*---------------------------------------------------------------------*
*  SUBROUTINE TO FORMAT A COMPLETE DATA OR INDEX COMPONENT    PAGE 83 *
*---------------------------------------------------------------------*
         USNGX DINC,R4                  DATA NAME CELL
FMT$DINC ST    LINK,LINKDINC            SAVE LINKAGE REGISTER
         MVC   OL#ENTRY,3(R1)           SET ENTRY TYPE
         L     R0,16(,R1)               GET COUNT
         AH    R0,=H'1'                 INCREMENT
         ST    R0,16(,R1)               SAVE UPDATED COUNT
         SR    R2,R2                    CLEAR FOR ICM
         ICM   R2,B'0011',DIDCMPLN      GET COMPONENT LENGTH
         IC    R15,DIDKEYLN             GET CONDENSED KEY LENGTH
         BCTR  R15,0                    -1 FOR EX
         BCTR  R15,0                    -1 FOR SOME OTHER STUPID REASON
         MVC   OL#NAME(*-*),DIDKEY      << EXECUTED >>
         EX    R15,*-6                  MOVE DATA COMPONENT NAME
         CLI   DIDIRFLG,0               ANY INTERRUPTION?
         BE    D$NOTINT                 NO - SKIP
         MVC   OL#MISC(26),=C'* INTERRUPTED OPERATION --'
         TM    DIDIRFLG,DIDELETE        DELETE?
         BNO   *+10                     NO - SKIP
         MVC   OL#MISC+27(8),=C'DELETE *'
         TM    DIDIRFLG,DIDUPDAT        UPDATE-EXTEND?
         BNO   *+10                     NO - SKIP
         MVC   OL#MISC+27(15),=C'UPDATE-EXTEND *'
         TM    DIDIRFLG,DIDSRMU         SUB-RECORD MOVE & UPDATE?
         BNO   *+10                     NO - SKIP
         MVC   OL#MISC+27(21),=C'SUB-REC MOVE && UPDATE'
         SPACE 1
         DROPX R4                       DINC
         SPACE 1
D$NOTINT BAL   LINK,NEXTCELL            ADVANCE TO NEXT CELL
         BP    *+8                      CONTINUE IF MORE CELLS
         BAL   R14,LOGICERR             DIE IF NO MORE CELLS
         SR    R2,R0                    ADJUST REMAINING COMPONENT LEN
         BP    *+8                      CONTINUE IF MORE CELLS
         BAL   R14,LOGICERR             DIE IF NO MORE CELLS
         SPACE 1
         BAL   LINK,SKIP$OWN       %%%  SKIP OWNER CELL (REQUIRED)
         SR    R2,R0                    ADJUST REMAINING COMPONENT LEN
         SPACE 1
         BAL   LINK,SKIP$SEC            SKIP SECURITY CELL (OPTIONAL)
         SR    R2,R0                    ADJUST REMAINING COMPONENT LEN
         SPACE 1
         USNGX VOLCELL,R4
         SPACE 1
D$VOL$LP SH    R2,VOLLEN                SUBTRACT LENGTH OF THIS CELL
         BAL   LINK,FMT$VOL             FORMAT VOLUME CELL(S)
         L     LINK,LINKDINC            RESTORE RETURN ADDRESS
         LTR   R2,R2                    DONE WITH THIS COMPONENT?
         BNPR  LINK                     YES - RETURN TO CALLER
         LTR   R3,R3                    ANY LENGTH LEFT?
         BP    D$VOL$LP                 YES - FORMAT NEXT VOL LINE
         BAL   R14,LOGICERR             NO - DIE
         SPACE 1
         DROPX R4                       VOLCELL
         EJECT ,
*---------------------------------------------------------------------*
*  PROCESS UNSUPPORTED ENTRY TYPE                                     *
*---------------------------------------------------------------------*
TYPE$H   EQU   *                        GDG ENTRY
TYPE$D   EQU   *                        DATA
TYPE$I   EQU   *                        INDEX
TYPE$G   EQU   *                        AIX
TYPE$R   EQU   *                        PATH
TYPE$U   EQU   *                        UCAT CONNECTOR
TYPE$$   EQU   *                        UNKNOWN
         MVC   OL#UNKN(3),=C'LL='
         HEX   OL#UNKN+3,(0,R1),2       LL
         SPACE 1
UNKN$LP  MVC   OL#UNKN+11(7),=C'L''CELL='
         HEX   OL#UNKN+18,(0,R4),2      LENGTH OF FIRST CELL
         MVC   OL#UNKN+24(5),=C'TYPE='
         OC    OL#UNKN+29(1),2(R4)      CELL TYPE
         MVI   OL#UNKN+31,C'('
         HEX   OL#UNKN+32,(2,R4),1,BYTE=C')'  CELL TYPE
         LH    R1,0(,R4)                GET CELL LENGTH
         SH    R1,=H'4'                 -3 ALEADY PRINTED, -1 FOR EX
         CH    R1,=Y(L'OLINE-(OL#UNKN+38-OLINE)-1)  TOO LONG?
         BNH   *+8                      NO - OK
         LH    R1,=Y(L'OLINE-(OL#UNKN+38-OLINE)-1)  YES - USE MAX
         OC    OL#UNKN+38(*-*),3(R4)    << EXECUTED >>
         EX    R1,*-6                   PRINT SOME OF THE RECORD
         BAL   LINK,PUTLINE
         SH    R3,0(,R4)                SUBTRACT LENGTH OF THIS CELL
         AH    R4,0(,R4)                -> NEXT CELL
         LTR   R3,R3                    ANY MORE CELLS?
         BP    UNKN$LP                  YES - PROCESS
         B     LOOP                     GET NEXT RECORD IF NONE
         EJECT ,
*---------------------------------------------------------------------*
*  END OF FILE ON INPUT DATASET -- PRINT ENTRY COUNTERS               *
*---------------------------------------------------------------------*
         SPACE 1
*  FROM HERE ON, I WON'T USE 'PUTLINE', SINCE IT WILL BREAK THE OUTPUT.
*  I CAN GET AWAY WITH THIS BECAUSE I KNOW THE NUMBER OF ENTRY TYPES
*  IS LESS THAN THE PAGE SIZE.
         SPACE 1
EOF      AP    PAGENUM,=P'1'            INCREMENT PAGE NUMBER
         MVC   WORK,=X'402020202020'    MOVE IN EDIT MASK
         ED    WORK(6),PAGENUM
         MVC   H1PGNUM(4),WORK+2
         SPACE 1
         PUT   SYSPRINT,HEADER1         PRINT THE HEADER
         SPACE 1
         MVI   OLINE,C'-'               TRIPLE SPACE THIS LINE
         MVC   OLINE+10(27),=C'Number of Entries, by Type:'
         BAL   LINK,PUTLINEB            PRINT LINE AND CLEAR
         MVI   OLINE,C'0'               DOUBLE SPACE THE HEADER
         MVC   OLINE+10(26),=C'Count   Type   Description'
         BAL   LINK,PUTLINEB            PRINT LINE AND CLEAR
         MVI   OLINE,C'+'               OVERPRINT THE UNDERLINES
         MVC   OLINE+10(26),=C'_____   ____   ___________'
         BAL   LINK,PUTLINEB            PRINT LINE AND CLEAR
         MVC   OLINE,BLANKS             CLEAR PRINT LINE
         MVI   OLINE,C'0'               DOUBLE SPACE THE FIRST ONE
         LA    R2,TYPETBL               -> FIRST ENTRY
         SR    R3,R3                    CLEAR ACCUMULATOR
         SPACE 2
SUMMLOOP BAL   LINK,SUMMLINE            PRINT A SUMMARY LINE
         LA    R2,TYPETBLL(,R2)         -> NEXT TYPE ENTRY
         CLI   0(R2),X'FF'              END OF LIST?
         BNE   SUMMLOOP                 NO - DO NEXT
         LA    R2,TYPEUNKN              -> UNKNOWNS CELL
         BAL   LINK,SUMMLINE            PRINT A SUMMARY LINE
         LA    R2,TYPETOTL              -> TOTALS CELL
         ST    R3,16(,R2)               SAVE GRAND TOTAL IN TOTALS CELL
         MVI   OLINE,C'0'               DOUBLE SPACE LAST LINE
         BAL   LINK,SUMMLINE            PRINT A SUMMARY LINE
         SPACE 1
         CLOSE MF=(E,OPENMFL)           CLOSE CATIN AND SYSPRINT
         SPACE 1
         B     LEAVE
         SPACE 3
SUMMLINE MVI   OLINE+18,C'('
         MVC   OLINE+19(1),2(R2)        FILL IN TYPE CHARACTER
         MVI   OLINE+20,C')'
         MVC   OLINE+25(10),3(R2)       FILL IN DESCRIPTION
         L     R0,16(,R2)               GET ENTRY COUNT
         AR    R3,R0                    ADD TO RUNNING TOTAL
         CVD   R0,DWD                   MAKE IT PACKED
         MVC   OLINE+06(9),=X'206B2020206B202020'  GET EDIT MASK
         ED    OLINE+05(10),DWD+4       MAKE IT PRINTABLE
         B     PUTLINEB                 PRINT LINE AND CLEAR
*              (WILL RETURN TO 'LINK', WHICH IS SUMMLINE'S CALLER)
         EJECT
*---------------------------------------------------------------------*
*  SUBROUTINE TO FORMAT VOLUME CELLS                                  *
*---------------------------------------------------------------------*
         USNGX VOLCELL,R4
FMT$VOL  ST    LINK,LINKVOL             SAVE LINKAGE REGISTER
         CLI   VOLTYPE,X'04'            IS IT A VOLUME CELL???
         BE    *+8                      YES - CONTINUE
         BAL   R14,LOGICERR             NO - DIE
         SPACE 1
         MVC   OL#VOLSR,VOLSERN         VOLSER TO PRINT LINE
         HEX   OL#DEVTP,VOLDEVTP        DEVTYPE TO PRINT LINE
         LA    R1,VOLDEVTP              -> HEX DEVTYPE
         LA    R15,DEVTABLE             -> FIRST TABLE ENTRY
         SPACE 1
DT$LOOP  CLC   0(4,R1),0(R15)           THIS IT?
         BE    DT$FOUND                 YES
         LA    R15,4+8(,R15)            -> NEXT TABLE ENTRY
         CLI   0(R15),X'FF'             END OF TABLE?
         BNE   DT$LOOP                  NO - KEEP LOOKING
         B     DT$NONE                  YES - NOTHING TO MOVE
         SPACE 1
DT$FOUND MVC   OL#DEVTP,4(R15)          SET THE PRINTABLE DEVICE TYPE
         SPACE 1
DT$NONE  LH    R0,VOLFLSEQ              GET FILE SEQUENCE NUMBER
         CVD   R0,DWD                   CONVERT TO PACKED
         MVC   WORK(6),=X'402020202020'  COPY EDIT MASK
         ED    WORK(6),DWD+5
         MVC   OL#FSEQN,WORK+2
         BAL   LINK,PUTLINE
         BAL   LINK,NEXTCELL            ADVANCE TO NEXT CELL
         L     LINK,LINKVOL             RESTORE LINKAGE REGISTER
         BR    LINK                     RETURN TO CALLER IF NONE
         DROPX R4                       VOLCELL
         EJECT
*---------------------------------------------------------------------*
*  AN ERROR HAS OCCURRED -- MAY BE A DOCUMENTATION ERROR, A BAD       *
*  RECORD IN THE CATALOG, OR A PROGRAMMING ERROR IN THIS PROGRAM.     *
*---------------------------------------------------------------------*
LOGICERR SR    R14,R12                  COMPUTE OFFSET OF ERROR
         SH    R14,=H'4'                ACCOUNT FOR LENGTH OF 'BAL'
         STH   R14,DWD                  SAVE FOR UNPK
         SR    LINK,R12                 COMPUTE OFFSET OF LINK
         SH    LINK,=H'4'               ACCOUNT FOR LENGTH OF 'BAL'
         STH   LINK,DWD+2               SAVE FOR UNPK
         CLC   OLINE,BLANKS             ANY PARTIAL LINE?
         BE    *+8                      NO - SKIP
         BAL   LINK,PUTLINE             YES - PRINT UNFINISHED LINE
         MVC   OLINE(49),=C'0*** LOGIC ERROR AT OFFSET XXXX *** LINK=XX$
               XX ***'
         HEX   OLINE+27,DWD,2           FORMAT 'R14' OFFSET
         HEX   OLINE+41,DWD+2,2         FORMAT 'LINK' OFFSET
         TM    FLAGS,FTEST              PARM=TEST?
         BO    LE$TEST                  YES - HANDLE DIFFENTLY
**       MVC   OLINE+46(36),=C'-- SKIPPING TO NEXT INPUT RECORD ***'
         MVC   OLINE+46(60),=C'-- WILL DUMP THIS RECORD, THEN SKIP TO N$
               EXT INPUT RECORD ***'
         LH    R15,CURLINE              GET CURRENT LINE NUMBER
         LA    R15,2(,R15)              ADJUST FOR DOUBLE SPACED ERRMSG
         STH   R15,CURLINE              SAVE UPDATED LINE NUMBER
         BAL   LINK,PUTLINE             PRINT THE ERROR MSG
**       B     LOOP                     AND GO GET THE NEXT RECORD
         L     R1,ADDRREC               RESTORE RECORD POINTER
**       LH    R3,4(,R1)                SAVE LENGTH OF RECORD (NOT RDW)
**       SH    R3,=H'2'                 ADJUST FOR LL
**       LA    R4,4+2(,R1)              -> FIRST CELL IN RECORD
*                                       (SKIP RDW (4) & LL (2) )
         LH    R3,0(,R1)                SAVE LENGTH OF RECORD (NOT RDW)
         SH    R3,=H'2'                 ADJUST FOR LL
         LA    R4,2(,R1)                -> FIRST CELL IN RECORD
         MVI   OLINE,C'0'               DOUBLE SPACE NEXT OUTPUT LINE
         B     TYPE$$                   AND FORMAT AS IF UNKNOWN
         SPACE 2
LE$TEST  ABEND 1000,DUMP
         EJECT
*---------------------------------------------------------------------*
*  SUBROUTINES TO ADVANCE TO OR OVER VARIOUS CELL TYPES               *
*---------------------------------------------------------------------*
         USNGX CELL,R4                  GENERAL CELL DESCRIPTION
         SPACE 3
*  SKIP OWNER CELL (REQUIRED)
SKIP$OWN CLI   CELLTYPE,X'01'           OWNER CELL?
         BE    NEXTCELL                 YES - GO TO NEXT CELL
         BAL   R14,LOGICERR             NO - LOGIC ERROR
         SPACE 2
NEXTCELL LH    R0,CELLLEN               GET LENGTH OF THIS CELL
         SR    R3,R0                    SUBTRACT FROM REMAINING REC LEN
         BNM   *+8                      CONTINUE IF OK
         BAL   R14,LOGICERR             ABORT IF LENGTH WENT NEGATIVE
         AR    R4,R0                    ADVANCE POINTER TO NEXT CELL
         LTR   R3,R3                    SET CC FOR REMAINING LENGTH
         BR    LINK                     RETURN TO CALLER
         SPACE 3
*  SKIP SECURITY CELL (OPTIONAL)
SKIP$SEC SR    R0,R0                    ASSUME THIS CELL DOESN'T EXIST
         CLI   CELLTYPE,X'02'           SECURITY CELL?
         BE    NEXTCELL                 YES - SKIP IT
         BR    LINK                     NO - JUST RETURN TO CALLER
         SPACE 3
*  SKIP ASSOCIATION CELL (OPTIONAL)
SKIP$ASC SR    R0,R0                    ASSUME THIS CELL DOESN'T EXIST
         CLI   CELLTYPE,X'03'           ASSOCIATION CELL?
         BE    NEXTCELL                 YES - SKIP IT
         BR    LINK                     NO - JUST RETURN TO CALLER
         SPACE 3
*  SKIP RELATION CELL (OPTIONAL)
SKIP$REL SR    R0,R0                    ASSUME THIS CELL DOESN'T EXIST
         CLI   CELLTYPE,X'06'           RELATION CELL?
         BE    NEXTCELL                 YES - SKIP IT
         BR    LINK                     NO - JUST RETURN TO CALLER
         SPACE 2
         DROPX R4                       CELL
         EJECT
*---------------------------------------------------------------------*
*  SUBROUTINE TO PUT A LINE TO PRINT FILE                             *
*---------------------------------------------------------------------*
PUTLINE  LH    R15,CURLINE              GET CURRENT LINE NUMBER
         LA    R15,1(,R15)              INCREMENT
         STH   R15,CURLINE              SAVE UPDATED LINE NUMBER
         CH    R15,LINECT               IS THIS PAGE FULL?
         BNH   PL$PUT                   NO - CONTINUE
         MVC   CURLINE,=H'1'            YES - RESET LINE COUNT
         AP    PAGENUM,=P'1'            INCREMENT PAGE NUMBER
         MVC   WORK,=X'402020202020'    MOVE IN EDIT MASK
         ED    WORK(6),PAGENUM
         MVC   H1PGNUM(4),WORK+2
         MVI   OLINE,C'0'               DOUBLE SPACE THE FIRST ONE
         LA    R0,HEADER1
         BAL   R14,PUTPRINT
         LA    R0,HEADER2
         BAL   R14,PUTPRINT
         LA    R0,HEADER3
         BAL   R14,PUTPRINT
         LH    R15,CURLINE              RESTORE UPDATED LINE COUNTER
         SPACE 2
PL$PUT   LA    R0,OLINE
         BAL   R14,PUTPRINT             PRINT THE LINE
         SPACE 2
         LH    R15,CURLINE              RESTORE UPDATED LINE COUNTER
         SR    R14,R14                  CLEAR FOR DIVIDE
         D     R14,=F'5'                UNDERSCORE EVERY FIFTH LINE
         CH    R14,=F'5'                IS THIS THE LAST IN THE GROUP?
         BNE   PL$CLEAR                 NO - SKIP IT
         MVC   OLINE(2),=C'+_'          OVERPRINT THIS LINE
         MVC   OLINE+2(L'OLINE-2),OLINE+1  PROPAGATE THE UNDERSCORES
         SPACE 1
PUTLINEB LA    R0,OLINE
         BAL   R14,PUTPRINT             PRINT THE LINE
         SPACE 2
PL$CLEAR MVC   OLINE,BLANKS             CLEAR THE BUFFER
         BR    LINK                     RETURN TO CALLER
         SPACE 3
PUTPRINT PUT   SYSPRINT,(0)
         SPACE 1
         ORG   *-2                      BACK OVER THE BALR
         BR    R15                      MAKE 'PUT' RETURN TO MY CALLER
         EJECT ,
         LTORG ,
         EJECT ,
         DC    0F'0'                    ALIGNMENT
TYPETBL  TYPENT  A,'NONVSAM'            NONVSAM
TYPETBLL EQU   *-TYPETBL                LENGTH OF A TABLE ENTRY
         TYPENT  C,'CLUSTER'            CLUSTER
TYPEDATA TYPENT  D,'  DATA'             DATA
TYPEINDX TYPENT  I,'  INDEX'            INDEX
         TYPENT  G,' AIX'               AIX
         TYPENT  R,' PATH'              PATH
         TYPENT  B,'GDG BASE'           GDG BASE
TYPEGDGE TYPENT  H,'   NONVSAM'         GDG ENTRY
         TYPENT  U,'CATALOG'            UCAT CONNECTOR
         TYPENT  T,'TRUENAME'           TRUENAME
         TYPENT  X,' ALIAS'             ALIAS
         DC    X'FFFF'                  END OF TABLE
         SPACE 1
TYPEUNKN TYPENT  ?,'*UNKNOWN*'          UNKNOWN
TYPETOTL TYPENT  **,'*** TOTALS'        GRAND TOTALS
         EJECT ,
DWD      DC    D'0'
LINKVOL  DC    A(0)                     SAVE FOR 'LINK' IN 'FMT$VOL'
LINKDINC DC    A(0)                     SAVE FOR 'LINK' IN 'FMT$DINC'
ADDRREC  DC    A(0)                     SAVED ADDRESS OF INPUT RECORD
GDG#LEN  DC    H'0'                     LENGTH OF CURRENT GDG BASE NAME
GDG#NAME DC    CL35' '                  NAME   OF CURRENT GDG BASE
VSAMKEY  DC    XL45'00'
PAGENUM  DC    PL3'0'
LINECT   DC    H'55'
CURLINE  DC    H'9999'
WORK     DC    CL6' '
FLAGS    DC    B'0'
FTEST    EQU   X'80'
FACB     EQU   X'40'                    USING ACB, NOT DCB
         DC    X'00'                    WASTED FOR ALIGNMENT
         SPACE 2
DEVTABLE DC    X'3010200E',C'3380    '
         DC    X'78008080',C'3480    '
         DC    X'3050200B',C'3350    '
         DC    X'32008003',C'3400-5  '
         DC    X'32108003',C'3400-6  '
         DC    X'34208003',C'3400-4  '
         DC    X'3050200D',C'3330-1  '
         DC    X'34208001',C'2400-4  '
         DC    X'3040200A',C'3340    '
         DC    X'3010200C',C'3375    '
         DC    X'30502009',C'3330    '
         DC    X'30C08001',C'2400-2  '
         DC    X'30008001',C'2400    '
         DC    X'30C08003',C'3400-2  '
         DC    X'34008003',C'3400-3  '
         DC    X'30008001',C'2400    '
         DC    X'00000000',C'INDIRECT'  INDIRECT CATALOG
         DC    X'FF'                    END OF TABLE INDICATOR
         SPACE 2
         HEXTAB  DUAL=NO
         SPACE 2
MONTHS   MONTHS  ,
         SPACE 2
BLANKS   DC    CL133' '
HEADER1  DC    CL133'1Condensed Listing of Catalog --'
         ORG   HEADER1+116
         DC    C'Page '
H1PGNUM  DC    C'0000'
         ORG   ,
HEADER2  DC    CL133'-ENTRY TYPE   DEV TYPE  VOLSER FSEQ  ENTRY NAME'
HEADER3  DC    CL133'+__________   ________  ______ ____  __________'
OLINE    DC    CL133' '
         ORG   OLINE+1
OL#ENTRY DC    C'ENTRY TYPE',CL3' '
OL#UNKN  DS    0C                       START OF AREA FOR UNKNOWN INFO
OL#DEVTP DC    C'DEV TYPE',CL2' '
OL#VOLSR DC    C'VOLSER',CL1' '
OL#FSEQN DC    C'FSEQ',CL2' '
OL#NAME  DC    CL44' ',CL2' '
OL#MISC  DS    CL(OLINE+133-*)          REMAINDER OF PRINT LINE
         ORG   OLINE
         DC    CL133' '
         ORG   ,
DCBEXIT  DCBEXIT  BLKSIZE=6118
         LTORG ,
         SPACE 2
CAT#PSWD DC    FL1'8',CL8'        '     CATALOG PASSWORD
         SPACE 2
OPENMFL  OPEN  (CATIN,,SYSPRINT,(OUTPUT)),MF=L
         SPACE 2
EXLST    DC    0F'0',X'85',AL3(DCBEXIT)
         SPACE 2
EXLST#IN DC    0F'0',X'87',AL3(IN#JFCB)
IN#JFCB  DC    XL176'00'
         PUSH  PRINT
         PRINT NOGEN
         ORG   IN#JFCB
         IEFJFCBN
         ORG   ,
         POP   PRINT
         SPACE 2
CATRPL   RPL   ACB=CATACB,AM=VSAM,KEYLEN=45,AREA=*-*,AREALEN=32767,    $
               ARG=VSAMKEY,OPTCD=(KEY,NSP,SEQ,KGE,MVE)
         SPACE 2
CATEXLST EXLST EODAD=(EOF,A)
         SPACE 5
CATIN    DCB   DDNAME=CATIN,MACRF=GL,EODAD=EOF,                        $
               DSORG=PS,RECFM=VBS,BFTEK=A,EXLST=EXLST#IN
         SPACE 5
SYSPRINT DCB   DDNAME=SYSPRINT,MACRF=PM,EXLST=EXLST,                   $
               DSORG=PS,RECFM=FBA,LRECL=133
         SPACE 5
*?TACB   ACB   DDNAME=CATIN,MACRF=(CNV,KEY,SEQ,DIR,IN,NCI),
CATACB   ACB   DDNAME=CATIN,MACRF=(KEY,SEQ,IN,NCI),                    $
               AM=VSAM,EXLST=CATEXLST,PASSWD=CAT#PSWD
**             BUFND=8,BUFNI=2
         SPACE 5
WORKD    DSECT ,                        resume
RECBUFF  DS    CL32767                  record area
         EJECT ,
CELL     DSECT                          GENERAL CELL FORMAT
CELLLEN  DS    H                        LENGTH OF THIS CELL
CELLTYPE DS    C                        TYPE OF THIS CELL
         SPACE 3
NVNC     DSECT     PAGE 86              NONVSAM NAME CELL
NVCELEN  DS    H                        LENGTH OF NVNC INCLUDING ITSELF
NVTYPE   DC    C'A'                     TYPE 'A' FOR NONVSAM
NVRESV   DS    X                        RESERVED
NVOLCNT  DS    H                        NUMBER OF VOLUME CELLS (TO 255)
NVKEYLN  DS    AL1                      LENGTH OF NONVSAM KEY
NVNAME   DS    CL44                     NONVSAM NAME
NVPAD    DS    X                        PAD VALUE (BINARY ZEROES)
         SPACE 3
VOLCELL  DSECT     PAGE 89              VOLUME CELL
VOLLEN   DS    H                        LENGTH OF VOLCELL INCL ITSELF
VOLTYPE  DC    X'04'                    TYPE X'04' FOR VOLUME CELL
VOLOFSET DS    X                        NOT USED
VOLSERN  DS    CL6                      VOLUME SERIAL NUMBER
VOLDEVTP DS    XL4                      DEVICE TYPE
VOLFLAG1 DS    B                        VOLUME FLAG 1
VOLPRIME EQU   X'80'                    PRIME VOLUME - ALLOCATED SPACE
VOLCANDI EQU   X'40'                    CANDIDATE VOLUME NO SPACE
VOLOFLOW EQU   X'20'                    OVERFLOW KEYRANGE ONLY
VOLCONV  EQU   X'10'                    CONVERTED VSAM DATA SET VOLUME
VOLNVSAM EQU   X'08'                    NONVSAM VOLUME CELL
VOLKYRNG EQU   X'04'                    KEYRANGE QUALIFIER PRESENT
VOLVPCI  EQU   X'02'                    PRIMARY VVR CI
VOLSSQWD EQU   X'01'                    SEQUENCE SET WITH DATA
VOLFLAG2 DS    B                        RESERVED
VOLVVRBA DS    0XL4                     RELATIVE BYTE ADDRESS OF VVR
VOLDSTTR DS    XL3                      NONVSAM FORMAT 1 DSCB TTR
         DS    X                        RESERVED
VOLFLSEQ DS    H                        NONVSAM FILE SEQUENCE NO (TAPE)
VOLKRQL  DS    XL4                      KEYRANGE QUALIFIER (VSAM ONLY)
         DS    XL4                      RESERVED FOR NONVSAM
VOLLKYLN DS    H                        LENGTH OF LOW KEY RANGE KEY
VOLLOWKY DS    0C                       1-64 BYTE LOW KEY
VOLHKYLN DS    H                        LENGTH OF HIGH KEY RANGE KEY
VOLHIKY  DS    0C                       1-64 BYTE HIGH KEY
         SPACE 3
ASSOCC   DSECT     PAGE 89              ASSOCIATION CELL
ASCLEN   DS    H                        LENGTH OF ASSOCIATION CELL
ASCTYPE  DC    X'03'                    TYPE X'03' FOR ASSOCC
ASCOUNT  DS    HL2                      COUNT OF ASSOCIATIONS
         SPACE 1
*  THE FOLLOWING FIELDS ARE REPEATED 'ASCOUNT' TIMES
ASCKEYS  DS    0X
ASCFLAG  DS    X                        RESERVED
ASCREUS  EQU   X'80'                    USED IN RELATION CELL ONLY
ASCKYLEN DS    AL1                      LENGTH OF CONDENSED ASSOC KEY
ASCKEY   DS    0C                       2-45 BYTE CONDENSED ASSOC KEY
         SPACE 3
GATC     DSECT     PAGE 90              GENERATION AGING TABLE CELL
GATCELN  DS    H                        LENGTH OF GATC
GATYPE   DC    X'05'                    TYPE X'05' FOR GATC
GATATTR  DS    B                        ATTRIBUTES
GATDELET EQU   X'80'                    EMPTY SPECIFIED
GATSCRTH EQU   X'40'                    SCRATCH SPECIFIED
GATLIMIT DS    AL1                      MAXIMUM GDS ENTRIES IN GDG BASE
GATCNT   DS    AL1                      CURRENT NBR OF ENTRIES IN GAT
         SPACE 1
*  THE FOLLOWING FIELDS ARE REPEATED 'GATCNT' TIMES
GAT      EQU   *
GATENT   EQU   *
GATEXTNO DS    AL1                      EXTENSION RECORD SEQUENCE NBR
GATGEN   DS    HL2                      GENERATION NUMBER OF GDS
GATWRAP  EQU   X'80'                    GENERATION EXCEEDED 9999
GATVER   DS    AL1                      VERSION NUMBER OF GDS
         SPACE 3
GDGNC    DSECT     PAGE 86              GENERATION DATA GROUP NAME CELL
GDGCELLN DS    H                        LNTH OF GDGNC INCLUDING ITSELF
GDGTYPE  DC    C'B'                     TYPE 'B' FOR GDG
GDGCMPLN DS    AL2                      LENGTH OF GDG COMPONENT
GDGNOEXT DS    AL1                      NUMBER OF EXTENSION RECORDS
GDGKYLEN DS    AL1                      LENGTH OF GDG KEY
GDGNAME  DS    CL44                     1-35 BYTE GDG NAME
GDGPAD   DS    X                        PAD VALUE (BINARY ZEROES)
         SPACE 3
GDSNC    DSECT     PAGE 86              GENERATION DATASET NAME CELL
GDSCELEN DS    H                        LENGTH OF GDSNC
GDSTYPE  DC    C'H'                     TYPE 'H' FOR GDSNC
GDSCMPLN DS    AL2                      LENGTH OF GDS COMPONENT
GDSGENO  DS    AL2                      GENERATION NUMBER OF GDS
GDSVERNO DS    AL1                      VERSION NUMBER OF GDS
GDSVOLCT DS    AL2                      NUMBER OF VOLUME CELLS IN GDS
         SPACE 3
TNC      DSECT    PAGE 87
TRUCELN  DS    H                        LENGTH OF TNC INCLUDING ITSELF
TRUTYPE  DC    C'T'                     TYPE 'T' FOR TRUENAME
TRURESV  DS    CL2                      RESERVED
TRUNTYPE DS    C                        TRUENAME RECORD FOR 'G','D','I'
TRUEKEYL DS    AL1                      TRUENAME KEY LENGTH
TRUENAME DS    CL44                     DATA, INDEX OR AIX NAME
TRUPAD   DS    XL1                      PAD VALUE (BINARY ZEROS)
         SPACE 3
VCNC     DSECT     PAGE 84
CLCELLN  DS    H                        LENGTH OF VCNC INCLUDING ITSELF
CLTYPE   DC    C'C'                     TYPE 'C' FOR CLUSTER
CLCOMPLN DS    AL2                      LENGTH OF THE CLUSTER COMPONENT
CLNOEXT  DS    AL1                      NUMBER OF EXTENSION RECORDS
CLNMLEN  DS    AL1                      LENGTH OF THE CLUSTER KEY (45)
CLNAME   DS    CL44                     CLUSTER NAME PART OF KEY
CLNMPAD  DS    XL1                      PAD VALUE, SET TO BINARY ZERO
         SPACE 3
DINC     DSECT     PAGE 85              DATA OR INDEX NAME CELL
DIDLEN   DS    H                        LENGTH OF DINC
DIDTYPE  DC    C'D'                     'D' OR 'I' FOR DATA OR INDEX
DIDCMPLN DS    AL2                      LENGTH OF DINC COMPONENT
DIDIRFLG DS    B                        INTERRUPTION RECOGNITION FLAGS
DIDELETE EQU   B'10000000'              DELETE IN PROGRESS
DIDUPDAT EQU   B'01000000'              UPDATE-EXTEND IN PROGRESS
DIDSRMU  EQU   B'00100000'              SUB-REC MOVE & UPDT IN PROGRESS
DIDKEYLN DS    AL1                      CONDENSED KEY LENGTH
DIDKEY   EQU   *                        CONDENSED KEY
         SPACE 3
         END
