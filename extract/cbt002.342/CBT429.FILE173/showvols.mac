SHOWVOLS TITLE '** TSO SHOW VOLUMES COMMAND **'
***********************************************************************
*                                                                     *
*    NAME - SHOWVOLS                                                  *
*                                                                     *
*    AUTHOR - TED BESTANI                                             *
*                                                                     *
*    PURPOSE - THIS IS A FULL-SCREEN COMMAND PROCESSOR THAT IS ONLY   *
*              INTENDED TO BE USED BY SYSTEMS PROGRAMMERS.  IT CHECKS *
*              FOR OPERATOR AUTHORITY.  IT DISPLAYS ALL VOLUMES THAT  *
*              ALL MOUNTED ONLINE, AND CAN BE PAGED FORWARD/BACKWARD. *
*                                                                     *
*    ATTRIBUTES - NON-REUSABLE                                        *
*                                                                     *
*    REQUIREMENTS - SHOWVOLS REQUIRES A 3270 DISPLAY STATION WITH AT  *
*                   LEAST 24 LINES.  IT WILL WORK ON LARGER TUBES,    *
*                   BUT DOES NOT REQUIRE THEM.                        *
*                                                                     *
*    MACROS USED - TGET, TPUT                                         *
*                                                                     *
***********************************************************************
         EJECT
         PRINT ON,NOGEN,NODATA
SHOWVOLS CSECT
         STM   R14,R12,12(R13)         SAVE CALLERS REGISTERS
         BALR  R9,0                    WHERE ARE WE?
         USING *,R9                    TEMPORARY BASE REGISTER
         ST    R13,SAVEAREA+4          SAVE BACKWARD SA PTR
         LA    R8,SAVEAREA             GET SA ADDR
         ST    R8,8(R13)               SAVE FORWARD SA PTR
         LR    R13,R8                  COPY SA ADDR
         LA    R12,4095(R13)           BASE2 = BASE1 + 4095 +
         LA    R12,1(R12)                                     1
         LA    R11,4095(R12)           BASE3 = BASE2 + 4095 +
         LA    R11,1(R11)                                     1
         LA    R10,4095(R11)           BASE4 = BASE3 + 4095 +
         LA    R10,1(R10)                                     1
         USING SAVEAREA,R13,R12,R11,R10    PERMANENT BASE REGISTERS
         USING EXTRAREA,R2             ESTABLISH ADDRESSABILITY
         USING SCRNLINE,R4             ESTABLISH ADDRESSABILITY
         DROP  R9                      DROP TEMPORARY BASE REGISTER
         MVC   SAVECPPL(16),0(R1)      SAVE CP PARM LIST
         SPACE 1
         BAL   R9,DRIVER               INVOKE MAIN ROUTINE
         SPACE 1
         L     R13,SAVEAREA+4          GET ADDR OF CALLER'S SA
         LM    R14,R12,12(R13)         RESTORE REGISTERS
         LA    R15,0                   SET RC=0
         BR    R14                     GO HOME....
         SPACE 1
SAVEAREA DS    18F    PROGRAM MAIN SAVE AREA
SAVECPPL DS    0F     ** TSO COMMAND PROCESSOR PARAMETER LIST **
CPPLCBUF DS    A      ADDRESS OF COMMAND INPUT BUFFER
CPPLUPT  DS    A                 USER PROFILE TABLE
CPPLPSCB DS    A                 PROTECTED STEP CONTROL BLOCK
CPPLECT  DS    A                 ENVIRONMENT CONTROL TABLE
         SPACE 1
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
***********************************************************************
*     THIS IS THE HIGHEST LEVEL WORK ROUTINE IN THE PROGRAM.  IT      *
*   DIRECTS THE FLOW OF CONTROL TO THE WORK ROUTINES.                 *
*     THE PROGRAM IS WRITTEN USING BASIC STRUCTURED PROGRAMMING. FLOW *
*   BETWEEN ROUTINES IS ACCOMPLISHED VIA REGISTER 9, WHICH IS ALWAYS  *
*   SAVED UPON ENTRY AND RESTORED BEFORE EXIT.                        *
***********************************************************************
         SPACE 2
DRIVER   DS    0H
         ST    R9,SAVE10
         B     BSAVE10
SAVE10   DC    F'-1'
         DC    CL8'DRIVER  '
BSAVE10  EQU   *
         SPACE 1
         L     R1,CPPLPSCB             ADDR OF THE PSCB
         TM    16(R1),X'80'            DOES USER HAVE OPERATOR AUTH?
         BO    GOWITHIT                YES, BYPASS ERROR MESSAGE
         TPUT  MSG1,L'MSG1             PUT OUT ERROR MESSAGE
         B     EXIT10                  EXIT COMMAND
GOWITHIT EQU   *
         GTTERM PRMSZE=PRMSZE,ALTSZE=ALTSZE,ATTRIB=ATTRIB
         L     R2,=A(ATTNRTN)          GET ADDR OF ATTN ROUTINE
         STAX  (R2)                    SET UP STAX QUEUE ELEMENT
         LTR   R15,R15                 GO OK?
         BZ    DRBYPERR                YES, BYPASS ERROR CODE
         TPUT  MSG6,L'MSG6             PUT OUT ERROR MESSAGE
         B     EXIT10                  GO HOME.....
DRBYPERR EQU   *
         BAL   R9,DEVINFO              GO GET DEVICE INFORMATION
         BAL   R9,FINDMCAT             FIND THE MASTER-CATALOG VOLUME
         STFSMODE ON,INITIAL=YES       SET FULL SCREEN MODE ON
DRLOOPMN EQU   *
         BAL   R9,FORMATER             FORMAT EXTRACT DATA INTO SCREEN
         BAL   R9,TPUTMAIN             GO PAINT MAIN INPUT SCREEN
         CLI   MESSAGE,X'7A'           DID USER PRESS PF10?
         BNE   DRNOPF10                NO, BYPASS
         MVI   SHIFTED,C'L'            YES, CHANGE SPEC
         MVC   EATBLNXT,EATBLPRV       PAINT THE SAME SCREEN AGAIN
         B     DRLOOPMN                GO BACK AND DO IT AGAIN
DRNOPF10 EQU   *
         CLI   MESSAGE,X'7B'           DID USER PRESS PF11?
         BNE   DRNOPF11                NO, BYPASS
         MVI   SHIFTED,C'R'            YES, CHANGE SPEC
         MVC   EATBLNXT,EATBLPRV       PAINT THE SAME SCREEN AGAIN
         B     DRLOOPMN                GO BACK AND DO IT AGAIN
DRNOPF11 EQU   *
*        CLI   MESSAGE,C'3'            DID USER PRESS PF3? (IN FULLSCR)
*        BE    DRCLEAR                 GO TO DRIVER'S CLEAR/EXIT
*------> IF USER MOVED THE CURSOR WE WANT TO MOVE THE PAGE THERE
         CLC   MESSAGE+1(2),=XL2'5C7D' WHERE IT IS NORMALLY...
         BE    DRCSRNMV                CURSOR DIDN'T MOVE
         MVC   BUFFADDR,MESSAGE+1      MOVE THE CURSOR LANDING SPOT
         BAL   R9,TUBETORC             CONVERT TO ROW/COLUMN
         CLC   ROW,=CL2'05'            LESS THAN ROW 5?
         BL    DRCSRNMV                IGNORE REQUEST
         CLC   ROW,=CL2'22'            MORE THAN ROW 22?
         BH    DRCSRNMV                IGNORE REQUEST
         PACK  WORKDBLW,ROW            PACK THE ROW
         CVB   R4,WORKDBLW             MAKE IT HEX
         BCTR  R4,0                    NORMALIZE LINE NUMBER
         MH    R4,=H'80'               MULTIPLY LINE LENGTH
         LA    R3,SC1LN01              GET ORIGIN
         AR    R4,R3                   PTR TO START OF LINE
         MVC   WORKDBLW(6),SCVOLSER    MOVE VOLSER FOUND FROM SCREEN
         L     R2,EATBLFST             GET ORIGIN OF TABLE
         L     R3,EATBLAST             GET END OF TABLE
DRSRCH01 EQU   *
         CR    R2,R3                   END-OF-TABLE?
         BNL   DRCSRNMV                IGNORE REQUEST
         CLC   WORKDBLW(6),EAVOLSER    IS IT THIS ENTRY?
         BE    DRSRCHFN                YES, GO TO FOUND
         LA    R2,EXTRLNTH(R2)         BUMP
         B     DRSRCH01                ITERATE
DRSRCHFN EQU   *
         ST    R2,EATBLNXT             SET NEW PTR
         ST    R2,EATBLTOP             SET NEW PTR
DRCSRNMV EQU   *
         CLI   MESSAGE,C'7'            DID USER PRESS PF7?
         BNE   DRNOTPB                 BYPASS PAGEBACK CODE
         L     R2,EATBLTOP             PTR TO NEXT ENTRY
         LA    R3,EXTRLNTH             GET LENGTH OF NODE
         MH    R3,=H'17'               GO BACK 17 LINES
         SR    R2,R3                   SUBTRACT 17 VOLUMES
         C     R2,EATBLFST             GONE TOO FAR?
         BNL   DRBYPTOO                OK, BYPASS RESET CODE
         L     R2,EATBLFST             RESET
DRBYPTOO EQU   *
         ST    R2,EATBLNXT             STORE NEW NEXT PTR (PAGEBACK)
DRNOTPB  EQU   *
         B     DRLOOPMN                MAIN DRIVER LOOP
DRCLEAR  EQU   *
         TPUT  CLSCREEN,12,FULLSCR     CLEAR SCREEN
         STLINENO MODE=OFF,LINE=1      SET FULL SCREEN MODE OFF
         SPACE 1
EXIT10   EQU   *
         L     R9,SAVE10
         BR    R9
         EJECT
***********************************************************************
*     THIS ROUTINE SCANS THROUGH THE UCB LOOKUP TABLE (PSEUDO) AND    *
*   STORES THE ACCUMULATED INFORMATION IN THE DEVICE INFORMATION      *
*   TABLE FOR LATER USE.                                              *
***********************************************************************
         SPACE 2
DEVINFO  DS    0H
         ST    R9,SAVE20
         B     BSAVE20
SAVE20   DC    F'-1'
         DC    CL8'DEVINFO '
BSAVE20  EQU   *
         SPACE 1
         L     R0,=A(EXTRLNTH)         SET FOR NODE LENGTH
         MH    R0,=AL2(500)            MAX NUMBER OF DASD
         GETMAIN R,LV=(R0),BNDRY=DBLWD GO GET SOME MEMORY
         LR    R2,R1                   COPY ORIGIN ADDRESS
         ST    R2,EATBLFST             STORE ORIGIN ADDRESS
         ST    R2,EATBLNXT             INITIALLY FIRST ENTRY
*------------------------------------------------------------------
***>>>>>>----UCB SCAN SERVICE FOR MVS/SP1.2 AND ABOVE:-----<<<<<<***
** PARM: (100BYTE-WORK, 1BYTE-DEV-CLASS, 1WORD-UCB-PTR)           **
** RETURN CODES: R15 = 00-UCB RETURNED; 04-NO MORE UCBS           **
*------------------------------------------------------------------
         XC    DSXAWORK,DSXAWORK       ZERO OUT UCB WORKDBLW
         LA    R1,DSXAWORK             ADDR OF UCB WORKDBLW
         ST    R1,DSXAWA               STORE IT IN PARM LIST
         LA    R1,DSXACLAS             PTR TO DEV CLAS TO SEARCH
         ST    R1,DSXADEVT             STORE IN PARM LIST
         MVI   DSXACLAS,UCB3DACC       ONLY SEARCH DASD
         LA    R1,DSXAUCBP             AREA TO STORE UCB ADDR
         ST    R1,DSXAUCB              IN PARM LIST
         OI    DSXAUCB,X'80'           SIGNIFY END OF PARMLIST
UCBLOOP  EQU   *
         L     R15,CVTPTR
         MVC   DSADCB,CVTDCB-CVT(R15)  SAVE OPERATING SYSTEM TYPE
         ICM   R15,15,CVTUCBSC-CVT(R15) CVTUCBSC VALID?(IOSVSUCB)
         LA    R1,DSXALIST             PTR TO PARM LIST
         BALR  R14,R15                 BRANCH TO IT
         LTR   R15,R15                 GOT ONE?
         BNZ   UCBLPEND                THAT'S PLENTY
         L     R8,DSXAUCBP GET ADR OF  UCB FROM PTR
         USING UCBCMSEG,R8
         CLI   UCBID,UCBSTND           IS ADDRESS VALID
         BNE   UCBLOOP                 NO
         CLI   UCBDVCLS,UCB3DACC       IS IT DASDI
         BNE   UCBLOOP                 NO   SKIP
         TM    UCBSTAT,UCBONLI         IS IT ONLINE
         BNO   UCBLOOP                 NO  SKIP
         TM    UCBSTAT,UCBCHGS         IS IT CHANGING STATUS
         BO    UCBLOOP                 YES SKIP
         TM    UCBFLA,UCBNRY           IS IT NOT READY
         BO    UCBLOOP                 YES SKIP
MVDEVTYP EQU   *
         MVI   EAFLAGS,X'00'           CLEAR FLAGS
         MVC   EAVOLSER,UCBVOLI        MOVE VOLSER
         MVC   EAUNITYP,UCBDVCLS       MOVE DEVICE TYPE
         MVC   EAUCBID,UCBNAME         MOVE UCB NUMBER
*------- ----- SHOW NUMBER OF USERS
         XR    R1,R1
         IC    R1,UCBUSER              CONCURRENT USERS(+26X)
         LH    R1,UCBUSER              2BYTES IN XA            DDMMM84
         CVD   R1,WORKDBLW             PACKED "   "
         MVC   EAUSECNT,WORKDBLW+6     MOVE FIELD
*------- ----- SHOW CHANNEL PATHS
         LH    R15,=H'-24'             GET TO UCBCHPS
         AR    R15,R8                  GET ADDR OF UCBSHPS
         UNPK  EACHPATH(9),0(5,R15)    HANDLE 1ST FOUR PATHS
         MVI   EACHPATH+8,C' '         GET RID OF SIGN
         TR    EACHPATH(8),HEXTR-X'F0' MAKE DISPLAYABLE
*------- ----- SHOW ONLINE PATHS
         LH    R15,=H'-28'             GET TO UCBLPM
         AR    R15,R8                  GET ADDR OF UCBLPM
         IC    R15,0(R15)              GET PATH BYTE
         SRL   R15,4                   ISOLATE NIBBLE
         N     R15,=F'15'              CLEAR HIGH-ORDER BYTES
         XR    R14,R14                 CLEAR A WORK REG
         IC    R14,PTHONTAB(R15)       TRANSLATE TO ONLINE PATHS
         TM    DSADCB,DSADCBXA         XA?
         BZ    DOPATHR                 NO, CONTINUE
         SH    R14,=H'4'               370:0=ON/1=OFF  XA:0=OFF/1=ON
         LPR   R14,R14                 FLIP FOR XA LOGIC
DOPATHR  EQU   *
         STC   R14,EAPATHON            SAVE NUMBER OF PATHS
         TR    EAPATHON,HEXTR          MAKE DISPLAYABLE
*------- ----- SHOW PATH MASK
         SLL   R15,2                   *4=0,4,8,...
         LA    R14,PATHMASK(R15)       CONVER PATH TO BITS
         MVC   EAPTHMSK,0(R14)         NIBBLE IN BITS C'XXXX'
*------- ----- SHOW SUBCHANNEL NUMBER
         LH    R15,=H'-34'             GET TO THE ADDRESS OF
         AR    R15,R8                  THE SUBCHANNEL NUMBER
         LH    R15,0(R15)              PICK UP HALFWORD SUBCHANNEL
         CVD   R15,WORKDBLW
         MVC   EASUBCHN,WORKDBLW+6     STORE SUBCHANNEL NUMBER
*------- ----- GET VOLUME ATTRIBUTE
         TM    UCBSTAB,UCBBPRV         IS IT PRIVATE?
         BNO   CHKPUB                  NO BRANCH AROUND
         MVC   EAVOLATR,=C'PVT'     ELSE
         B     CHKIPL
CHKPUB   TM    UCBSTAB,UCBBPUB         IS IT PUBLIC?
         BNO   CHKSTR                  NO BRANCH AROUND
         MVC   EAVOLATR,=C'PUB'     ELSE
         B     CHKIPL
CHKSTR   TM    UCBSTAB,UCBBSTR         IS IT STORAGE?
         BNO   CHKIPL                  NO BRANCH AROUND
         MVC   EAVOLATR,=C'STR'     ELSE
*------- ----- HI-LITE IPL, PAGE, AND CAT VOLUMES
CHKIPL   EQU   *
         TM    UCBSTAT,UCBSYSR         IS THIS THE IPL SYSRES?
         BNO   CHKCAT                  NO, BYPASS
         OI    EAFLAGS,EAIPLRES        YES, MARK
         MVC   EAVOLATR,=CL3'IPL'      INDICATE IPL VOLUME
CHKCAT   EQU   *
         TM    UCBSTAB,UCBBNUL         DOES THIS HAVE A CATALOG?
         BNO   CHKPAGE                 NO, BYPASS
         OI    EAFLAGS,EACATVOL        YES, MARK
         MVC   EAVOLATR,=CL3'CAT'      INDICATE IPL VOLUME
CHKPAGE  EQU   *
         TM    UCBSTAB,UCBPGFL         DOES THIS HAVE PAGE DATASETS?
         BNO   DIBYPCHK                NO, BYPASS
         OI    EAFLAGS,EAPAGING        YES, MARK
         MVC   EAVOLATR,=CL3'PAG'      INDICATE IPL VOLUME
DIBYPCHK EQU   *
*------- ----- SEE IF INDEXED
         MVI   EAIXFLAG,C' '           INITIALIZE FIELD
CHKIX    CVAFTST  UCB=(R8)             CHECK FOR IX BIT
         B     BRTBL(R15)              TEST  RETURN CODE
BRTBL    B     RC0
         B     RC4
         B     RC8                     INDEXED
         B     RC12
         B     RC16
RC8      MVI   EAIXFLAG,C'I'
RC4      EQU   *
RC0      EQU   *
RC12     EQU   *
RC16     EQU   *
*------- ----- PICK UP VOLUME SPACE INFORMATION
         LA    R0,UCBCMSEG             ADDRESS OF UCB COMMON SEGMENT
         LA    R1,UCBWA                ADDRESS OF UCB WORKAREA
         SVC   78                      ISSUE LSPACE SVC
         MVC   EAFREECY,WA#CYL         NUMBER OF FREE CYLINDERS
         MVC   EAFREETR,WA#TRK         FREE TRACKS
         MVC   EAFREEXT,WA#EXT         FREE EXTENTS
         MVC   EACCYL,WA#CCYL          CONTIGUOUS CYLINDERS
         MVC   EACTRK,WA#CTRK          CONTIGUOUS TRACKS
*------- ----- BUMP TO NEXT ENTRY
         LA    R2,EXTRLNTH(R2)         BUMP TO NEXT ENTRY
         B     UCBLOOP                 ITERATE
UCBLPEND EQU   *
         ST    R2,EATBLAST             STORE PTR TO END OF TABLE
         DROP  R8
         SPACE 1
EXIT20   EQU   *
         L     R9,SAVE20
         BR    R9
         EJECT
***********************************************************************
*   THIS ROUTINE DYNAMICALLY ALLOCATES 'SYS1.NUCLEUS(SYSCATLG)',      *
*   READS THE MASTER-CATALOG DESCRIPTION RECORD AND THEN FREES IT.    *
*   THE INFORMATION IS STORED IN THE EXTRACT AREA FOR LATER USE.      *
***********************************************************************
         SPACE 2
FINDMCAT DS    0H
         ST    R9,SAVE30
         B     BSAVE30
SAVE30   DC    F'-1'
         DC    CL8'FINDMCAT'
BSAVE30  EQU   *
         SPACE 1
         XC    S99C1,S99C1             CLEAR
         XC    S99C2,S99C2             CLEAR
         XC    S99INFO,S99INFO         CLEAR
         LA    R1,S99RBPTR             GET ADDRESS OF S99 PARM LIST
         DYNALLOC                      ISSUE DYNAMIC ALLOCATION SVC99
         LTR   R15,R15                 DID DYNALLOC WORK OK?
         BNZ   EXIT30                  NO GOOD, TRY NEXT MOM
         L     R0,=A(32*1024)          MEMORY FOR I/O
         GETMAIN R,LV=(R0),BNDRY=DBLWD GO GET SOME MEMORY
         LR    R8,R1                   SAVE PTR TO MEMORY
         OPEN  (SYSCATLG,(INPUT))      OPEN THE MEMBER
         READ  READDECB,SF,SYSCATLG,(R8),32760
         CHECK READDECB                CHECK FOR COMPLETION
         MVC   MCATREC,0(R8)           MOVE THE RECORD TO SAFEKEEP
         CLOSE (SYSCATLG)              CLOSE THE MEMBER
         L     R0,=A(32*1024)          MEMORY FOR I/O
         FREEMAIN R,LV=(R0),A=(R8)     FREE THE MEMORY
         XC    S98C1,S98C1             CLEAR
         XC    S98C2,S98C2             CLEAR
         XC    S98INFO,S98INFO         CLEAR
         LA    R1,S98RBPTR             GET ADDRESS OF S99 PARM LIST
         DYNALLOC                      ISSUE DYNAMIC ALLOCATION SVC99
         L     R2,EATBLFST             GET ORIGIN OF THE TABLE
         L     R3,EATBLAST             GET END    OF THE TABLE
FMLOOP01 EQU   *
         CR    R2,R3                   END OF TABLE?
         BNL   EXIT30                  TERMINATE
         CLC   EAVOLSER,MCATVOL        SAME VOLUME NAME?
         BE    FMLOOPFN                FOUND
         LA    R2,EXTRLNTH(R2)         BUMP
         B     FMLOOP01                ITERATE
FMLOOPFN EQU   *
         OI    EAFLAGS,EAMCAT          POST STATUS
         MVC   EAVOLATR,=CL3'MCT'      POST STATUS
         SPACE 1
EXIT30   EQU   *
         L     R9,SAVE30
         BR    R9
         EJECT
***********************************************************************
*     THIS ROUTINE FORMATS THE DATA DERIVED IN THE EXTRACT ROUTINE    *
*   AND FORMATS IT INTO THE SCREEN THAT IS THEN PAINTED DURING THE    *
*   TPUTMAIN ROUTINE WHICH FOLLOWS.                                   *
***********************************************************************
         SPACE 2
FORMATER DS    0H
         ST    R9,SAVE50
         B     BSAVE50
SAVE50   DC    F'-1'
         DC    CL8'FORMATER'
BSAVE50  EQU   *
         SPACE 1
         XC    SCRESPTR,SCRESPTR       CLEAR IPL RES PTR
         XC    SCPAGPTR,SCPAGPTR       CLEAR PAGING  PTR
         XC    SCMCTPTR,SCMCTPTR       CLEAR MCAT    PTR
         L     R2,EATBLNXT             GET NEXT ADDRESS
         ST    R2,EATBLTOP             SAVE CURRENT TOP
         LA    R4,SC1LN05              GET ORIGIN IN SCREEN
         LA    R5,18                   18 LINES OF DATA PER SCREEN
FMTLOOP1 EQU   *
         C     R2,EATBLAST             END OF EXTRACT TABLE?
         BNL   FMTCLEAR                CLEAR REST OF SCREEN LINES
         MVI   0(R4),C' '              CLEAR FIRST BYTE
         MVC   1(79,R4),0(R4)          CLEAR THE REST OF THE LINE
         MVC   SCVOLSER,EAVOLSER       MOVE VOLSER
         MVC   SCUCBID,EAUCBID         MOVE UCB-NUMBER
         TM    EAFLAGS,EAIPLRES        ENTRY FOR THE IPL RES VOLUME?
         BNO   FMTNOIPL                NO, BYPASS
         ST    R4,SCRESPTR             STORE PTR TO RES VOLUME
FMTNOIPL EQU   *
         TM    EAFLAGS,EAPAGING        ENTRY FOR THE PAGING VOLUME?
         BNO   FMTNOPAG                NO, BYPASS
         ST    R4,SCPAGPTR             STORE PTR TO PAG VOLUME
FMTNOPAG EQU   *
         TM    EAFLAGS,EAMCAT          ENTRY FOR THE MASTER CATALOG?
         BNO   FMTNOMCT                NO, BYPASS
         ST    R4,SCMCTPTR             STORE PTR TO MCT VOLUME
FMTNOMCT EQU   *
*        MVC   SCUNITYP,EAUNITYP       MOVE UNIT-TYPE
*------> FIND THE DEVICE TYPE IN THE TABLE AND GET THE TRK/CYL COUNT
FDEVICE0 EQU   *
         LA    R6,DEVTABLE
FDEVICE1 EQU   *
         CLC   0(2,R6),=X'0000'    END OF TABLE?
         BE    FUNKNOWN                YES, SET TO UNKNOWN
         CLC   0(2,R6),EAUNITYP    IF SAME DEVICE CODE....
         BE    FDEVICE2
         LA    R6,15(R6)           BUMP TO NEXT ENTRY
         B     FDEVICE1
FUNKNOWN EQU   *
         MVC   SCUNITYP,=CL6'UNKNWN'    DEVICE TYPE NOT KNOWN
         B     FMTNEXT             BRANCH AROUND
FDEVICE2 EQU   *
         MVC   SCUNITYP,9(R6)      MOVE UNIT TYPE
         MVC   SCUSECNT,=XL4'40202120'  NUMBER OF USERS
         ED    SCUSECNT,EAUSECNT   FORMAT FIELD
         MVC   SCSUBCHN,=XL4'40202120'  SUBCHANNEL NUMBER
         ED    SCSUBCHN,EASUBCHN   FORMAT FIELD
         MVC   SCVOLATR,EAVOLATR   MOVE VOLUME ATTRIBUTE
         MVC   SCIXFLAG,EAIXFLAG   MOVE INDEXED = I
         MVC   SCCHPATH,EACHPATH   MOVE CHANNEL PATHS
         MVC   SCPATHON,EAPATHON   MOVE NUMBER OF PATHS ONLINE
         MVC   SCPTHMSK,EAPTHMSK   MOVE PATH MASK
         CLI   SHIFTED,C'R'        ARE WE RIGHT-SHIFTED?
         BE    FMTRIGHT            YES, BRANCH AROUND CODE
*------- ----- THIS SECTION IS EXECUTED IF WE ARE LEFT-SHIFTED
         TRT   EAFREECY,TRTALLOW   IS THIS FIELD NUMERIC?
         BC    8,OKTOPACK          YEP, BYPASS
         MVC   EAFREECY,=CL4'0000' NO, CLEAR
         MVC   EAFREETR,=CL4'0000' NO, CLEAR
         MVC   EAFREEXT,=CL4'0000' NO, CLEAR
OKTOPACK EQU   *
         MVC   SC1LN03(80),SC1LN3L MOVE TITLE
         PACK  WORKDBLW,EAFREECY   PACK FREE CYLINDERS
         MVC   SCFREECY,=XL7'4020206B202120'
         ED    SCFREECY,WORKDBLW+5
         PACK  WORKDBLW,EAFREETR   PACK FREE TRACKS
         MVC   SCFREETR,=XL7'4020206B202120'
         ED    SCFREETR,WORKDBLW+5
         PACK  WORKDBLW,EAFREEXT   PACK FREE EXTENTS
         MVC   SCFREEXT,=XL6'402020202120'
         ED    SCFREEXT,WORKDBLW+5
         B     FMTNEXT             BYPASS RIGHT-SHIFTED CODE
*------- ----- THIS SECTION IS EXECUTED IF WE ARE RIGHT-SHIFTED
FMTRIGHT EQU   *
         MVC   SC1LN03(80),SC1LN3R MOVE TITLE
         MVC   SCTRKCNT,=XL4'40202120'   TRACKS / CYLINDER
         ED    SCTRKCNT,2(R6)      FORMAT FIELD
         MVC   SCCYLCNT,=XL4'40202120'   CYLINDERS / VOLUME
         ED    SCCYLCNT,4(R6)      FORMAT FIELD
         MVC   SCBYTCNT,=XL7'4020206B202120' BYTES / TRACK
         ED    SCBYTCNT,6(R6)      FORMAT FIELD
FMTNEXT  EQU   *
         LA    R4,80(R4)               BUMP TO NEXT SCREEN LINE
         LA    R2,EXTRLNTH(R2)         BUMP TO NEXT ENTRY
         BCT   R5,FMTLOOP1             ITERATE
         LA    R7,EXTRLNTH             GET LENGTH OF EXTRACT ENTRY
         SR    R2,R7                   SUBTRACT ONE ENTRY
         MVC   EATBLPRV,EATBLNXT       SAVE OLD ORIGIN PTR
         ST    R2,EATBLNXT             STORE NEW NEXT PTR
FMTCLEAR EQU   *
         LTR   R5,R5                   RUN OUT OF LINES YET?
         BZ    FMTEND                  YES, ENOUGH IS ENOUGH
         MVI   0(R4),C' '              CLEAR FIRST BYTE
         MVC   1(79,R4),0(R4)          CLEAR THE REST OF THE LINE
         LA    R4,80(R4)               BUMP TO NEXT LINE
         BCT   R5,FMTCLEAR             ITERATE
FMTEND   EQU   *
         SPACE 1
EXIT50   EQU   *
         L     R9,SAVE50
         BR    R9
         EJECT
***********************************************************************
*     THIS ROUTINE PAINTS THE INPUT SCREEN AND READS A RESPONSE FROM  *
*   THE TERMINAL.  UPON RETURN, REGISTER 1 WILL CONTAIN THE NUMBER    *
*   OF BYTES READ FROM THE TERMINAL.                                  *
***********************************************************************
         SPACE 2
TPUTMAIN DS    0H
         ST    R9,SAVE60
         B     BSAVE60
SAVE60   DC    F'-1'
         DC    CL8'TPUTMAIN'
BSAVE60  EQU   *
         SPACE 1
         LA    R2,ATRLST1B             ADDR OF ATTRIBUTE LIST
         ST    R2,ALISTPTR             STORE IN PTR AREA
         LA    R2,SCREEN1              ADDR OF ATTRIBUTE LIST
         ST    R2,ASCRNPTR             STORE IN PTR AREA
         LA    R2,SC1SUFIX             ADDR OF SUFFIX
         ST    R2,ASUFXPTR             STORE IN PTR AREA
         LA    R2,L'SC1SUFIX           GET LENGTH OF SUFFIX
         STC   R2,ASUFXPTR             STORE IN PTR AREA
         MVC   ASCRNSIZ,=F'1920'       STORE SIZE OF SCREEN
         BAL   R9,FULLSCR              GO DO DEMO SCREEN WORK
         LTR   R1,R1                   DID USER TYPE IN COMMAND?
         BZ    DRCLEAR                 YES, BYPASS CLEAR
         SPACE 1
EXIT60   EQU   *
         L     R9,SAVE60
         BR    R9
         EJECT
***********************************************************************
*   THIS ROUTINE BUILDS THE FINAL SCREEN, DOES A FULL SCREEN TPUT,    *
* A DUMMY TGET, AND CLEARS THE SCREEN.  THE MAJOR PART OF THE CODE    *
* IS THE BUILDING OF THE FINAL SCREEN.  THE ROUTINE HAS THREE INPUTS. *
* 'ASCRNPTR' POINTS TO A STANDARD 1920 BYTE SCREEN IMAGE WITH NO      *
* ATTRIBUTE CHARACTERS.  'ALISTPTR' CONTAINS THE ADDRESS OF THE       *
* ATTRIBUTE LIST THAT WE WILL USE THIS TIME AROUND.  'SCPREFIX' IS    *
* THE CONTROL STREAM WHICH IS TO BE PREFIXED ONTO THE FINAL SCREEN.   *
*   USING THE THREE INPUTS, A TPUT'ABLE FINAL SCREEN IS BUILT IN THE  *
* 'SCRBLD' AREA AT THE END OF THE PROGRAM.                            *
***********************************************************************
         SPACE 1
FULLSCR  DS    0H
         ST    R9,SAVE70
         B     BSAVE70
SAVE70   DC    F'-1'
         DC    CL8'FULLSCR '
BSAVE70  EQU   *
         SPACE 1
*--> INIT REGISTERS
         L     R2,ALISTPTR             GET PTR TO ATTRIBUTE LIST
         L     R3,0(R2)                GET END OF ATTRIBUTE LIST
         LA    R2,4(R2)                BUMP PAST END ADDRESS
         LA    R4,SCRBLD               GET ADDR OF BUILD AREA
         XR    R5,R5                   INIT LENGTH REGISTER
         L     R6,ASCRNPTR             GET ADDR OF INPUT SCREEN
         LR    R7,R6                   GET BEGINNING
         A     R7,ASCRNSIZ             ADD SIZE OF SCREEN TO GET END
*--> INSERT PREFIX
         MVC   0(L'SCPREFIX,R4),SCPREFIX   MOVE PREFIX
         LA    R4,L'SCPREFIX(R4)       BUMP PTR
         LA    R5,L'SCPREFIX(R5)       ADD LENGTH
*--> FLAG ATTRIBUTE BYTES FIRST
FSLOOP10 EQU   *
         CR    R2,R3                   END OF ATTRIBUTE LIST?
         BE    FSLOOP20                YES, END OF FLAGGING
         L     R8,0(R2)                GET ADDR OF NEXT ATTR BYTE
         MVI   0(R8),X'1D'             FLAG BYTE WITH A X'FF'
         LA    R2,4(R2)                GET NEXT ATTRIBUTE ADDR
         B     FSLOOP10                GO TRY NEXT
FSLOOP20 EQU   *
         L     R2,ALISTPTR             GET PTR TO ATTRIBUTE LIST
         LA    R2,4(R2)                BUMP PAST END ADDRESS
FSLOOP30 EQU   *
         CR    R6,R7                   INPUT SCREEN EXHAUSTED?
         BE    FSLOOP50                GO TPUT
         CLI   0(R6),X'1D'             IS THIS A FLAG?
         BE    FSLOOP40                YES, GO PROCESS
         MVC   0(1,R4),0(R6)           NO, MOVE THIS BYTE TO OUTPUT
         LA    R4,1(R4)                BUMP PTR TO OUTPUT SCREEN
         LA    R5,1(R5)                BUMP LENGTH OF OUTPUT
         LA    R6,1(R6)                BUMP TO NEXT INPUT BYTE
         B     FSLOOP30                GO TRY NEXT BYTE
FSLOOP40 EQU   *
         MVC   0(1,R4),0(R6)           MOVE FLAG TO OUTPUT
         MVC   1(1,R4),0(R2)           MOVE ATTR TO OUTPUT
         LA    R2,4(R2)                BUMP TO NEXT ATTR
         LA    R4,2(R4)                BUMP TWO BYTES IN OUTPUT
         LA    R5,2(R5)                BUMP LENGTH BY TWO
         LA    R6,1(R6)                BUMP TO NEXT INPUT BYTE
         B     FSLOOP30                GO TRY NEXT BYTE
FSEXMVC  MVC   0(0,R4),0(R8)           MOVE SUFFIX TO OUTPUT
FSLOOP50 EQU   *
         XR    R1,R1                   CLEAR REGISTER
         IC    R1,ASUFXPTR             GET LENGTH TO MOVE
         BCTR  R1,0                    SUBTRACT ONE FOR MVC
         L     R8,ASUFXPTR             ADDR OF SUFFIX
         EX    R1,FSEXMVC              MOVE THE SUFFIX TO OUTPUT
         AR    R4,R1                   BUMP LENGTH OF SUFFIX
         AR    R5,R1                   BUMP LENGTH OF SUFFIX
         LA    R4,1(R4)                RESTORE 1 BYTE FROM EX
         LA    R5,1(R5)                RESTORE 1 BYTE FROM EX
*--> TGET'S AND TPUT'S
         CLI   STAXSW,C'1'             HAVE WE BEEN INTERRUPTED?
         BE    FSINTRPT                YES, BYPASS THIS TPUT
FSREFRSH EQU   *
         TPUT  SCRBLD,(R5),FULLSCR     PAINT OUTPUT SCREEN
         TM    ATTRIB+3,X'01'          DOES THIS TUBE SUPPORT COLOR?
         BNO   NOCOLOR                 BRANCH AROUND COLORS
         TPUT  SC1COLOR,LSC1CLR,NOEDIT WRITE SPECIALTY COLORS
NOCOLOR  EQU   *
         BAL   R9,HILITRES             HIGH-LIGHT RES IF PRESENT
         BAL   R9,YELLOPAG             HIGH-LIGHT PAG IF PRESENT
         BAL   R9,HILITMCT             HIGH-LIGHT MCAT IF PRESENT
         TGET  MESSAGE,126,ASIS        GET DUMMY INPUT
         CLI   MESSAGE,C'3'            DID USER PRESS PF3?
         BE    DRCLEAR                 GO TO DRIVER'S CLEAR/EXIT
         CLI   MESSAGE,X'7D'           DID USER PRESS ENTER
         BE    FSREFRSH                RE-PAINT SCREEN
         CLI   STAXSW,C'1'             HAVE WE BEEN INTERRUPTED?
         BNE   EXIT70                  NO, CONTINUE
FSINTRPT EQU   *
         TPUT  CLSCREEN,12,FULLSCR     CLEAR SCREEN
         TPUT  MSG7,L'MSG7             SEND INTERRUPTED MESSAGE
         L     R13,SAVEAREA+4          GET ADDR OF SAVEAREA
         LM    R14,R12,12(R13)         RESTORE CALLERS REGISTERS
         LA    R15,4                   SET RC=4
         BR    R14                     RETURN TO CALLER
         SPACE 1
EXIT70   EQU   *
         L     R9,SAVE70
         BR    R9
         EJECT
***********************************************************************
*   THIS ROUTINE HIGH-LIGHTS THE RES VOLUME IF PRESENT ON THE SCREEN  *
***********************************************************************
         SPACE 2
HILITRES DS    0H
         ST    R9,SAVE80
         B     BSAVE80
SAVE80   DC    F'-1'
         DC    CL8'HILITRES'
BSAVE80  EQU   *
         SPACE 1
         L     R8,SCRESPTR             PICK UP PTR TO RES VOLUME
         LTR   R8,R8                   IS ONE PRESENT?
         BZ    EXIT80                  NO, SPLIT
         BAL   R9,CALCADDR             CONVERT ROW/COLUMN TO SCREEN ADR
         MVC   SC1HILTR+01(2),STARTADR ADDRESS TO YELLOW: STARTING
         MVC   SC1HILTR+12(2),BUFFADDR ADDRESS TO YELLOW: ENDING
         TPUT  SC1HILIT,LSC1HIL,NOEDIT HI-LITE IPL SYSRES
         SPACE 1
EXIT80   EQU   *
         L     R9,SAVE80
         BR    R9
         EJECT
***********************************************************************
*   THIS ROUTINE YELLOW-LIGHTS ANY PAGING DATASETS THAT SHOW UP       *
***********************************************************************
         SPACE 2
YELLOPAG DS    0H
         ST    R9,SAVE90
         B     BSAVE90
SAVE90   DC    F'-1'
         DC    CL8'YELLOPAG'
BSAVE90  EQU   *
         SPACE 1
         L     R8,SCPAGPTR             PICK UP PTR TO PAG VOLUME
         LTR   R8,R8                   IS ONE PRESENT?
         BZ    EXIT90                  NO, SPLIT
*------> UNLIKE SYSRES, THERE MAY BE MORE THAN ONE PAGE VOL PER SCREEN
         LA    R4,SC1LN05              GET ORIGIN ADDRESS
         LA    R5,18                   # DISPLAY LINES PER SCREEN
YPLOOP01 EQU   *
         CLC   SCVOLATR,=CL3'PAG'      PAGING VOLUME?
         BE    YPFOUND1                YEP, GO PROCESS
YPLOOP02 EQU   *
         LA    R4,80(R4)               BUMP
         BCT   R5,YPLOOP01             ITERATE
         B     EXIT90
YPFOUND1 EQU   *
         LR    R8,R4                   COPY THIS PTR
         BAL   R9,CALCADDR             CONVERT ROW/COLUMN TO SCREEN ADR
         MVC   SC1YELLA+01(2),STARTADR ADDRESS TO YELLOW: STARTING
         MVC   SC1YELLA+12(2),BUFFADDR ADDRESS TO YELLOW: ENDING
         TPUT  SC1YELLO,LSC1YEL,NOEDIT YELLOW-LIGHT PAGING VOLUME
         B     YPLOOP02                GO BACK TO BUMP/ITERATE CODE
         SPACE 1
EXIT90   EQU   *
         L     R9,SAVE90
         BR    R9
         EJECT
***********************************************************************
*   THIS ROUTINE CALCULATES THE SCREEN ADDR'S FROM LINE START ADDRESS *
***********************************************************************
         SPACE 2
CALCADDR DS    0H
         ST    R9,SAVE100
         B     BSAVE100
SAVE100  DC    F'-1'
         DC    CL8'CALCADDR'
BSAVE100 EQU   *
         SPACE 1
*------> AT ENTRY, R8 MUST CONTAIN A PTR TO A VOLSER ON A SCREEN LINE
         LA    R7,SC1LN01              PICK UP ADDR OF START OF SCREEN
         SR    R8,R7                   GENERATE DISPLACEMENT
         CVD   R8,WORKDBLW             CONVERT TO DECIMAL
         DP    WORKDBLW,=PL2'80'       DIVIDE BY LINE LENGTH
         AP    WORKDBLW(6),=PL1'1'     VOLSER IS ON FOLLOWING LINE
         UNPK  ROW,WORKDBLW+4(2)       UNPACK
         OI    ROW+1,X'F0'             CLEAR SIGN NIBBLE
         MVC   COLUMN,=CL2'01'         SET UP COLUMN
         BAL   R9,RCTOTUBE             CONVERT ROW/COLUMN TO SCREEN ADR
         MVC   STARTADR,BUFFADDR       STARTING ADDRESS
         MVC   COLUMN,=CL2'26'         SET UP COLUMN
         BAL   R9,RCTOTUBE             CONVERT ROW/COLUMN TO SCREEN ADR
         MVC   ENDADDR,BUFFADDR        ENDING SCREEN ADDRESS
         SPACE 1
EXIT100  EQU   *
         L     R9,SAVE100
         BR    R9
         EJECT
***********************************************************************
*   THIS ROUTINE HIGH-LIGHTS THE MCT VOLUME IF PRESENT ON THE SCREEN  *
***********************************************************************
         SPACE 2
HILITMCT DS    0H
         ST    R9,SAVE110
         B     BSAVE110
SAVE110  DC    F'-1'
         DC    CL8'HILITMCT'
BSAVE110 EQU   *
         SPACE 1
         L     R8,SCMCTPTR             PICK UP PTR TO RES VOLUME
         LTR   R8,R8                   IS ONE PRESENT?
         BZ    EXIT110                 NO, SPLIT
         BAL   R9,CALCADDR             CONVERT ROW/COLUMN TO SCREEN ADR
         MVC   SC1MCATA+01(2),STARTADR ADDRESS TO YELLOW: STARTING
         MVC   SC1MCATA+12(2),BUFFADDR ADDRESS TO YELLOW: ENDING
         TPUT  SC1MCAT,LSC1MCT,NOEDIT  HI-LITE MASTER CATALOG
         SPACE 1
EXIT110  EQU   *
         L     R9,SAVE110
         BR    R9
         EJECT
***********************************************************************
*     THIS ROUTINE PROCESSES THE ROW/COLUMN TO BUFFER CONVERSION      *
***********************************************************************
         SPACE 2
RCTOTUBE DS    0H
         ST    R9,SAVE510
         B     BSAVE510
SAVE510  DC    F'-1'
         DC    CL8'RCTOTUBE'
BSAVE510 EQU   *
         SPACE 1
*--> USER WANTS A ROW/COLUMN TO BUFFER ADDRESS CONVERSION
         PACK  R327FLD1,ROW            PACK THE ROW NUMBER
         SP    R327FLD1,=PL1'1'        SUBTRACT 1
         MP    R327FLD1,=PL2'80'       NO, MULTIPLY BY 80
         PACK  R327FLD2,COLUMN         PACK THE COLUMN
         AP    R327FLD1,R327FLD2       ADD TO GET POSITION NUMBER
         SP    R327FLD1,=PL1'1'        SUBTRACT TO GET REL POSITION
         DP    R327FLD1,=PL2'64'       DIVIDE BY BASE 64
         ZAP   WORKDBLW,R327FLD1(2)    MOVE FOR CONVERSION
         CVB   R2,WORKDBLW             CONVERT FOR USE AS AN INDEX
         LA    R3,TABLE327             GET BASE ADDRESS
         AR    R3,R2                   ADD DISPLACEMENT TO BASE
         MVC   BUFFADDR+0(1),0(R3)     MOVE CHARACTERS FROM TABLE
         ZAP   WORKDBLW,R327FLD1+2(2)  MOVE FOR CONVERSION
         CVB   R2,WORKDBLW             CONVERT FOR USE AS AN INDEX
         LA    R3,TABLE327             GET BASE ADDRESS
         AR    R3,R2                   ADD DISPLACEMENT TO BASE
         MVC   BUFFADDR+1(1),0(R3)     MOVE CHARACTERS FROM TABLE
         SPACE 1
EXIT510  EQU   *
         L     R9,SAVE510
         BR    R9
         EJECT
***********************************************************************
*     THIS ROUTINE PROCESSES THE BUFFER TO ROW/COLUMN CONVERSION      *
***********************************************************************
         SPACE 2
TUBETORC DS    0H
         ST    R9,SAVE520
         B     BSAVE520
SAVE520  DC    F'-1'
         DC    CL8'TUBETORC'
BSAVE520 EQU   *
         SPACE 1
*--> USER WANTS A BUFFER ADDRESS TO ROW/COLUMN CONVERSION
         LA    R2,TABLE327             GET BASE ADDRESS OF TABLE
         LA    R3,64                   GET TABLE LENGTH
R3270510 EQU   *
         CLC   BUFFADDR(1),0(R2)       IS IT THIS POINT IN TABLE
         BE    R3270520                YES, BREAK OUT
         LA    R2,1(R2)                BUMP
         BCT   R3,R3270510             ITERATE
         ISK   0,0                     BUG, KILL IT RIGHT HERE
R3270520 EQU   *
         LA    R3,TABLE327             GET BASE ADDRESS OF TABLE
         SR    R2,R3                   GET OFFSET
         SLL   R2,6                    MULTIPLY BY 64
         CVD   R2,WORKDBLW             CONVERT TO DECIMAL
         ZAP   R327FLD1,WORKDBLW       PLACE IN SAFE-KEEPING
         LA    R2,TABLE327             GET BASE ADDRESS OF TABLE
         LA    R3,64                   GET TABLE LENGTH
R3270530 EQU   *
         CLC   BUFFADDR+1(1),0(R2)     IS IT THIS POINT IN TABLE
         BE    R3270540                YES, BREAK OUT
         LA    R2,1(R2)                BUMP
         BCT   R3,R3270530             ITERATE
         ISK   0,0                     BUG, KILL IT RIGHT HERE
R3270540 EQU   *
         LA    R3,TABLE327             GET BASE ADDRESS OF TABLE
         SR    R2,R3                   GET OFFSET
         CVD   R2,WORKDBLW             CONVERT TO DECIMAL
         AP    R327FLD1,WORKDBLW       ADD TO BASE
         DP    R327FLD1,=PL2'80'       NO, DIVIDE BY 80
         AP    R327FLD1+0(2),=PL1'1'   ADD 1 TO GET REAL ROW
         AP    R327FLD1+2(2),=PL1'1'   ADD 1 TO GET REAL COLUMN
         UNPK  ROW,R327FLD1(2)         RETURN THE ROW
         OI    ROW+1,X'F0'             CLEAR SIGN
         UNPK  COLUMN,R327FLD1+2(2)    RETURN THE COLUMN
         OI    COLUMN+1,X'F0'          CLEAR SIGN
         SPACE 1
EXIT520  EQU   *
         L     R9,SAVE520
         BR    R9
         EJECT
***********************************************************************
*           W O R K I N G   S T O R A G E   S E C T I O N             *
***********************************************************************
         SPACE 2
SCRESPTR DC    A(0)                    PTR TO IPL SYSRES PTR IN SCREEN
SCPAGPTR DC    A(0)                    PTR TO PAGING VOLUME  IN SCREEN
SCMCTPTR DC    A(0)                    PTR TO MCAT VOLUME    IN SCREEN
MSG1     DC    CL36'COMMAND REQUIRES OPERATOR AUTHORITY'
MSG6     DC    CL17'STAX MACRO FAILED'
MSG7     DC    CL19'COMMAND INTERRUPTED'
SHIFTED  DC    C'L'                    LEFT(L) OR RIGHT(R)
MESSAGE  DC    CL126' '                MESSAGE TO BE RECEIVED
ENDLINE1 DC    CL40'--------------------- MORE TO COME - PRE'
         DC    CL40'SS ENTER FOR NEXT PAGE -----------------'
ENDLINE2 DC    CL40'------------------ DISPLAY COMPLETE - PR'
         DC    CL40'ESS ENTER TO CONTINUE ------------------'
PRMSZE   DS    CL2                     PRIMARY SCREEN SIZE
ALTSZE   DS    CL2                     SECONDARY SCREEN SIZE
ALTMOD3  EQU   X'20'                   TERMINAL = 3278/9 MOD 3
ATTRIB   DS    F                       TERMINAL ATTRIBUTES
LASTLNSW DC    CL1'0'                  LAST LINE PROCESSED SWITCH
STAXSW   DC    CL1'0'                  INTERRUPTED, YES/NO
         SPACE 1
HEXTR    DC    CL16'0123456789ABCDEF'  TRANSLATE HEX TO CHAR
TRTALLOW DC    256XL1'FF'              TRT TABLE/ALLOWABLE CHARS
         ORG   TRTALLOW+C'0'           ALLOW 0-9
         DC    10XL1'00'                 CLEAR CHARS
         ORG
         SPACE 2
         LTORG                         LITERAL POOL
         EJECT
***********************************************************************
*      WORK AREAS FOR 3270 ADDRESS CONVERSION ROUTINES                *
***********************************************************************
         SPACE 1
WORKDBLW DC    D'0'                    HEX/DECIMAL CONVERSION AREA
ROW      DS    CL2                     ROW
COLUMN   DS    CL2                     COLUMN
BUFFADDR DS    XL2                     3270 BUFFER ADDRESS
STARTADR DS    XL2                     3270 BUFFER ADDRESS: STARTING
ENDADDR  DS    XL2                     3270 BUFFER ADDRESS: ENDING
*--> WORK DATA ITEMS FOR 3270 TRANSLATION ROUTINE
R327FLD1 DS    F                       WORK AREA
R327FLD2 DS    F                       WORK AREA
*--> IBM 3270 BASE 64 ENCODING TABLE (IS THERE A ROUTINE SOMEWHERE?)
TABLE327 EQU   *
         DC    X'40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F'
         DC    X'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F'
         DC    X'6061E2E3E4E5E6E7E8E96A6B6C6D6E6F'
         DC    X'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'
         EJECT
***********************************************************************
*      WORK AREA FOR DASD ANALYSIS ROUTINE (SVC 78/LSPACE)            *
***********************************************************************
         SPACE 1
UCBWA    DS    CL30                    AREA FOR LSPACE RETURN
WA#CYL   EQU   UCBWA+06,4              FREE CYL
WA#TRK   EQU   UCBWA+11,4              FREE TRK
WA#EXT   EQU   UCBWA+16,4              EXTENTS
WA#CCYL  EQU   UCBWA+21,4              CONTIG. CYL
WA#CTRK  EQU   UCBWA+26,4              CONTIG. TRK
         EJECT
***********************************************************************
*      WORK AREA FOR UCB SCAN ROUTINE (FROM TSUCBSCN)                 *
***********************************************************************
         SPACE 1
DSXALIST DS    0F                      PARMLIST FOR UCB
DSXAWA   DS    F                       %100-BYTE WORK AREA
DSXADEVT DS    F                       %DEV TYPE TO SEARCH
DSXAUCB  DS    F                       %UCB FULL WORD PTR
         DS    0D                      FOLLOWING MUST BE ALIGNED
DSXAWORK DS    CL100                   UCB WORK AREA
DSXAEUCB EQU   DSXAWORK+00,04          EMULATION CURR. UCB PTR
DSXAEILK EQU   DSXAWORK+04,04          EMULATION CVTILK2 ADDR
DSXACLAS DS    CL1                     DEVICE CLASS TO SEARCH
DSXAUCBP DS    F                       %UCB
******** ***** *********************** END OF UCB LOOKUP DSA
DSAEND   EQU  *                         LENGTH OF WORK
DSADCB   DC   XL1'00'                   EXTRACT FROM CVT
DSADCBXA EQU  X'80'                     MVS/XA
*                 0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F  - MASK BITS
PTHONTAB DC   AL1(4,3,3,2,3,2,2,1,3,2,2,1,2,1,1,0) - # ZEROS
PATHMASK DC   C'0000',C'0001',C'0010',C'0011'        0-3 MASK
         DC   C'0100',C'0101',C'0110',C'0111'        4-7 MASK
         DC   C'1000',C'1001',C'1010',C'1011'        8-B MASK
         DC   C'1100',C'1101',C'1110',C'1111'        C-F MASK
EATBLFST DS   F                        POINTER TO BGN OF EXTRACT TABLE
EATBLTOP DS   F                        POINTER TO TOP OF CURRENT SCREEN
EATBLAST DS   F                        POINTER TO END OF EXTRACT TABLE
EATBLPRV DS   F                        POINTER TO PREVIOUS SCREEN START
EATBLNXT DS   F                        POINTER TO NEXT ENTRY TO SHOW
         EJECT
***********************************************************************
*                                                                     *
*               D E V I C E   N A M E   T A B L E                     *
*                                                                     *
***********************************************************************
         SPACE 1
DEVTABLE EQU   *
         DC    X'2006'
         DC    PL2'8'
         DC    PL2'0'
         DC    PL3'0'
         DC    CL6'2305-1'
         DC    X'2007'
         DC    PL2'8'
         DC    PL2'0'
         DC    PL3'0'
         DC    CL6'2305-2'
         DC    X'2009'
         DC    PL2'19'
         DC    PL2'404'
         DC    PL3'13030'
         DC    CL6'3330  '
         DC    X'200D'
         DC    PL2'19'
         DC    PL2'808'
         DC    PL3'13030'
         DC    CL6'3330-1'
         DC    X'200B'
         DC    PL2'30'
         DC    PL2'555'
         DC    PL3'19069'
         DC    CL6'3350  '
         DC    X'200E'
         DC    PL2'15'
         DC    PL2'885'
         DC    PL3'47968'
         DC    CL6'3380  '
         DC    X'0000'         ** MARKS END OF DEVICE TABLE **
         EJECT
*--> THE FOLLOWING ARE USED BY THE 'FULLSCR' ROUTINE
CLSCREEN DC    XL12'C11140403C4040001140C113'
SCPREFIX DC    XL11'C11140403C404000114040'
         SPACE 1
ALISTPTR DC    A(0)                    PTR TO ACTIVE ATTR LIST
ASCRNPTR DC    A(0)                    PTR TO ACTIVE INPUT SCREEN
ASCRNSIZ DC    F'0'                    SIZE OF THE SCREEN INPUT
ASUFXPTR DC    A(0)                    LENGTH/PTR TO SUFFIX
         SPACE 1
ATRLST1B DS    0F
         DC    A(ATRLST1E)             END OF THIS LIST
         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE
         DC    AL3(SC1LN01+00)         FIRST BYTE OF SCREEN
         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE
         DC    AL3(SC1LN02+00)         FIRST BYTE OF SECOND LINE
         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE
         DC    AL3(SC1LN04+00)         FIRST BYTE OF FIFTH LINE
         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE
         DC    AL3(SC1LN24+00)         BEGINNING OF LAST LINE
         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE
         DC    AL3(SC1LN24+11)         BEGINNING OF PFK LIST
         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE
         DC    AL3(SC1LN24+67)         END OF PFK LIST
ATRLST1E EQU   *
         SPACE 1
ATR@PL   EQU   X'E4'                   PROTECT-LOW  / BLUE
ATR@PH   EQU   X'E8'                   PROTECT-HIGH / WHITE
ATR@UL   EQU   X'C4'                   UNPROT-LOW   / GREEN
ATR@UH   EQU   X'C8'                   UNPROT-HIGH  / RED
         EJECT
***********************************************************************
*  EXTENDED COLOR FIELDS FOR FULL CAPABILITY SCREENS                  *
***********************************************************************
         SPACE 1
SC1COLOR EQU   *
         DC    XL1'F1'                 WRITE COMMAND
         DC    XL1'C2'                 WCC - RELEASE KEYBOARD
*--> BACK-LIGHT THE TITLE LINE
         DC    XL16'1140402903C0F841F442F311C14F1DE8'
*--> REVERSE VIDEO THE TITLE BLOCKS
         DC    XL16'11C2602903C0F841F242F111C36F1DE8'
*--> LONG RANGE SENSORS
*        DC    XL16'11C1D22903C0F8410042F511C1D61DE8'
*--> STATISTICS
*        DC    XL16'11D54A2903C0F8410042F411D54F1DE8'
ESC1CLR  EQU   *
LSC1CLR  EQU   ESC1CLR-SC1COLOR
         SPACE 2
*------- ----- HI-LITE RES VOLUME FIELD
SC1HILIT EQU   *
         DC    XL1'F1'                 WRITE COMMAND
         DC    XL1'C2'                 WCC - RELEASE KEYBOARD
SC1HILTR DC    XL16'1199992903C0F841F142F21199991DE4'
         DC    XL4'115C7D13'           SET BUFFER ADDR/COMMAND ENTRY
ESC1HIL  EQU   *
LSC1HIL  EQU   ESC1HIL-SC1HILIT
         SPACE 2
*------- ----- MAGENTA MCAT VOLUME
SC1MCAT  EQU   *
         DC    XL1'F1'                 WRITE COMMAND
         DC    XL1'C2'                 WCC - RELEASE KEYBOARD
SC1MCATA DC    XL16'1199992903C0F8410042F31199991DE4'
         DC    XL4'115C7D13'           SET BUFFER ADDR/COMMAND ENTRY
ESC1MCT  EQU   *
LSC1MCT  EQU   ESC1MCT-SC1MCAT
         SPACE 2
*------- ----- YELLOW PAGE DATASETS
SC1YELLO EQU   *
         DC    XL1'F1'                 WRITE COMMAND
         DC    XL1'C2'                 WCC - RELEASE KEYBOARD
SC1YELLA DC    XL16'1199992903C0F8410042F61199991DE4'
         DC    XL4'115C7D13'           SET BUFFER ADDR/COMMAND ENTRY
ESC1YEL  EQU   *
LSC1YEL  EQU   ESC1YEL-SC1YELLO
         EJECT
***********************************************************************
*  THE FOLLOWING IS THE DYNALLOC AREA FOR SYS1.NUCLEUS(SYSCATLG)      *
***********************************************************************
         SPACE 1
         DS    0F
S99RBPTR DC    X'80',AL3(S99RB)        ADDR OF THE REQUEST BLOCK
S99RB    DC    AL1(20)                 CONSTANT LENGTH
S99TYPE  DC    AL1(01)                 DSNAME ALLOCATION
         DC    X'0000'                 MAY USE EXISTING ALLOCATION
S99ERROR DS    CL2                     RETURN ERROR CODE
S99INFO  DS    CL2                     ERROR INFO CODE
S99TXTPP DC    A(S99TUPL)              PTR TO TEXT PTR LIST
S99C1    DC    A(0)                    RESERVED
S99C2    DC    A(0)                    RESERVED
S99TUPL  DC    A(S99TXT01)             PTR TO TEXT 01
         DC    A(S99TXT02)             PTR TO TEXT 02
         DC    A(S99TXT03)             PTR TO TEXT 02
         DC    X'80',AL3(S99TXT04)     PTR TO LAST TEXT BLOCK
S99TXT01 DC    XL06'000100010008'      ESTABLISH DDNAME
S99DDNAM DC    CL8'SYSCATLG'               THIS IS THE DDNAME
S99TXT02 DC    XL06'00020001000C'      REQUEST BY DSNAME
S99DSN   DC    CL12'SYS1.NUCLEUS'          THIS IS THE DSNAME
S99TXT03 DC    XL06'000300010008'      REQUEST BY MEMBER
S99MBR   DC    CL8'SYSCATLG'               THIS IS THE MEMBER
S99TXT04 DC    XL07'00040001000108'    DISP=SHR
         SPACE 1
*--> THE FOLLOWING ENTRIES ARE USED BY DYNALLOC (SVC 99)
         DS    0F
S98RBPTR DC    X'80',AL3(S98RB)        ADDR OF THE REQUEST BLOCK
S98RB    DC    AL1(20)                 CONSTANT LENGTH
S98TYPE  DC    AL1(02)                 UNALLOCATE DDNAME
         DC    X'0000'                 MAY USE EXISTING ALLOCATION
S98ERROR DS    CL2                     RETURN ERROR CODE
S98INFO  DS    CL2                     ERROR INFO CODE
S98TXTPP DC    A(S98TUPL)              PTR TO TEXT PTR LIST
S98C1    DC    A(0)                    RESERVED
S98C2    DC    A(0)                    RESERVED
S98TUPL  DC    A(S98TXT01)             PTR TO FIRST TEXT BLOCK
         DC    X'80',AL3(S98TXT08)     PTR TO LAST TEXT BLOCK
S98TXT01 DC    XL06'000100010008'      UNALLOCATE DD STATEMENT
S98DD    DC    CL08'SYSCATLG'          NAME OF THE DD STATEMENT
S98TXT08 DC    XL04'00080000'          REMOVE IN-USE ATTRIBUTE
         SPACE 1
*--> DCB AND DATA AREAS USED TO ACCESS SYS1.NUCLEUS(SYSCATLG)
SYSCATLG DCB   DSORG=PS,                                               X
               RECFM=U,                                                X
               MACRF=R,                                                X
               LRECL=32760,                                            X
               BLKSIZE=32760,                                          X
               NCP=1,                                                  X
               DDNAME=SYSCATLG
MEMNAME  DC    CL8'SYSCATLG'
MCATREC  DS    0CL54
MCATVOL  DS    CL6
MCAT1    DS    CL1
MCATUNIT DS    CL1
         DS    CL2
MCATDSN  DS    CL44
         EJECT
SCREEN1  EQU   *
SC1LN01  DC    CL40'                      T S O   V O L U M '
         DC    CL40'E   D I S P L A Y                       '
SC1LN02  DC    CL40' ---------------------------------------'
         DC    CL40'--------------------------------------- '
SC1LN03  DC    CL40' VOLSER  UCB  TYPE    ATR               '
         DC    CL40'                                        '
SC1LN04  DC    CL40'                                        '
         DC    CL40'                                        '
SC1LN05  DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
SC1LN24  DC    CL40' ---------   PF3=END  PF7=BACK  PF8=FORW'
         DC    CL40'ARD  PF10=LEFT  PF11=RIGHT   ---------- '
SC1SUFIX DC    XL4'115C7D13'
         SPACE 1
SC1LN3L  DC    CL40' VOLSER  UCB  TYPE    ATR  USE  SUB  IXV'
         DC    CL40'   PATHS   ON  MASK    CYL    TRK   EXT '
SC1LN3R  DC    CL40' VOLSER  UCB  TYPE    ATR  USE  SUB  IXV'
         DC    CL40'   PATHS   ON  MASK  T/C  CYL  BYTES/T  '
SCRBLD   DS    CL4096                  BUILD AREA FOR FINAL SCREEN
         EJECT
***********************************************************************
*  INTERRUPTION EXIT ROUTINE ---- STAX SERVICE ROUTINE                *
***********************************************************************
         SPACE 2
ATTNRTN  CSECT
         STM   R14,R12,12(R13)         SAVE CALLERS REGISTERS
         BALR  R12,R0                  SET UP BASE REGISTER
         DROP  R12                     DROP OLD BASE REGISTER
         USING *,R12                   SET UP NEW BASE REGISTER
         ST    R13,STAXSAVE+4          SAVEAREA BACKWARD PTR
         LA    R11,STAXSAVE            PICK UP OUR SAVEAREA ADDR
         ST    R11,8(R13)              SAVEAREA FORWARD PTR
         LR    R13,R11                 ESTABLISH NEW S/A PTR
         SPACE 1
         L     R3,STAXSWAD             GET ADDR OF SWITCH ADDR
         MVI   0(R3),C'1'              TURN SWITCH ON
         SPACE 1
         L     R13,STAXSAVE+4          PICK UP OLD S/A ADDR
         LM    R14,R12,12(R13)         RESTORE CALLERS REGISTERS
         LA    R15,0                   SET RC=0
         BR    R14                     RETURN TO CALLER
         SPACE 1
STAXSWAD DC    A(STAXSW)               ADDR OF INTERRUPT SWITCH
STAXSAVE DS    18F                     SAVE AREA FOR INTERRUPT RTN
         EJECT
***********************************************************************
*                     D S E C T S                                     *
***********************************************************************
         SPACE 2
         PRINT ON,NOGEN,NODATA
EXTRAREA DSECT
EAVOLSER DS    CL6                     VOLSER
EAUCBID  DS    CL3                     UCB #
EAUNITYP DS    CL4                     DEVICE TYPE
EAUSECNT DS    PL2                     NUMBER OF USERS
EASUBCHN DS    PL2                     SUBCHANNEL NUMBER
EAVOLATR DS    CL3                     VOLUME ATTRIBUTE
EAIXFLAG DS    CL1                     INDEXED=I
EACHPATH DS    CL9                     CHANNEL PATHS
EAPATHON DS    CL1                     NUMBER OF PATHS ONLINE
EAPTHMSK DS    CL4                     PATH MASK
EAFLAGS  DS    CL1                     VOLUME ATTRIBUTES
EAIPLRES EQU   X'80'                     CURRENT SYSRES VOLUME
EAPAGING EQU   X'40'                     CONTAINS PAGE DATASET(S)
EACATVOL EQU   X'20'                     CONTAINS CATALOG(S)
EAMCAT   EQU   X'10'                     CURRENT MASTER CATALOG
EAFREECY DS    CL4                     FREE CYLINDERS
EAFREETR DS    CL4                     FREE TRACKS
EAFREEXT DS    CL4                     FREE EXTENTS
EACCYL   DS    CL4                     CONTIGUOUS CYLINDERS
EACTRK   DS    CL4                     CONTIGUOUS TRACKS
EXTRLNTH EQU   *-EXTRAREA              LENGTH OF ENTRY
         SPACE 2
SCRNLINE DSECT
         DS    CL1
SCVOLSER DS    CL6                     VOLSER
         DS    CL2
SCUCBID  DS    CL3                     UCB #
         DS    CL2
SCUNITYP DS    CL6                     DEVICE TYPE
         DS    CL2
SCVOLATR DS    CL3                     VOLUME ATTRIBUTE
         DS    CL1
SCUSECNT DS    CL4                     NUMBER OF USERS
         DS    CL1
SCSUBCHN DS    CL4                     SUBCHANNEL NUMBER
         DS    CL3
SCIXFLAG DS    CL1                     INDEXED=I
         DS    CL3
SCCHPATH DS    CL8                     CHANNEL PATHS
         DS    CL2
SCPATHON DS    CL1                     NUMBER OF PATHS ONLINE
         DS    CL2
SCPTHMSK DS    CL4                     PATH ONLINE MASK
SCLEFT   DS    0CL20                   USED IF SCREEN IS PF10'D
SCFREECY DS    CL7                     FREE CYLINDERS
SCFREETR DS    CL7                     FREE TRACKS
SCFREEXT DS    CL6                     FREE EXTENTS
         ORG   SCLEFT
SCRIGHT  DS    0CL20                   USED IF SCREEN IS PF11'D
         DS    CL1
SCTRKCNT DS    CL4                     TRACKS / CYLINDER
         DS    CL1
SCCYLCNT DS    CL4                     CYLINDERS / VOLUME
         DS    CL2
SCBYTCNT DS    CL7                     BYTES / TRACK
         DS    CL1
         ORG
         SPACE 2
         PRINT ON,GEN,NODATA
         IEFUCBOB ,                    UCB
         SPACE 2
         PRINT ON,NOGEN,NODATA
         CVT   DSECT=YES               CVT
         END   SHOWVOLS
