TSOCMDR TITLE '** TSO COMMANDER **'
***********************************************************************
*                                                                     *
*    NAME - TSOCMDR                                                   *
*                                                                     *
*    AUTHOR - TED BESTANI                                             *
*                                                                     *
*    PURPOSE - THIS IS A FULL-SCREEN COMMAND PROCESSOR THAT IS ONLY   *
*              INTENDED TO BE USED BY SYSTEMS PROGRAMMERS.  IT CHECKS *
*              FOR OPERATOR AUTHORITY.  IT DISPLAYS THE NAME OF OTHER *
*              COMMANDS THAT ARE AVAILABLE, ALONG WITH HELP/SYNTAX.   *
*                                                                     *
*    ATTRIBUTES - NON-REUSABLE                                        *
*                                                                     *
*    REQUIREMENTS - TSOCMDR REQUIRES A 3270 DISPLAY STATION WITH AT   *
*                   LEAST 24 LINES.  IT WILL WORK ON LARGER TUBES,    *
*                   BUT DOES NOT REQUIRE THEM.                        *
*                                                                     *
*    MACROS USED - TGET, TPUT, STAX                                   *
*                                                                     *
***********************************************************************
         EJECT
         PRINT ON,NOGEN,NODATA
TSOCMDR CSECT
         STM   R14,R12,12(R13)         SAVE CALLERS REGISTERS
         BALR  R9,0                    WHERE ARE WE?
         USING *,R9                    TEMPORARY BASE REGISTER
         ST    R13,SAVEAREA+4          SAVE BACKWARD SA PTR
         LA    R8,SAVEAREA             GET SA ADDR
         ST    R8,8(R13)               SAVE FORWARD SA PTR
         LR    R13,R8                  COPY SA ADDR
         LA    R12,4095(R13)           BASE2 = BASE1 + 4095 +
         LA    R12,1(R12)                                     1
         LA    R11,4095(R12)           BASE3 = BASE2 + 4095 +
         LA    R11,1(R11)                                     1
         LA    R10,4095(R11)           BASE4 = BASE3 + 4095 +
         LA    R10,1(R10)                                     1
         USING SAVEAREA,R13,R12,R11,R10    PERMANENT BASE REGISTERS
         USING EXTRAREA,R2             ESTABLISH ADDRESSABILITY
         USING SCRNLINE,R4             ESTABLISH ADDRESSABILITY
         DROP  R9                      DROP TEMPORARY BASE REGISTER
         MVC   SAVECPPL(16),0(R1)      SAVE CP PARM LIST
         SPACE 1
         BAL   R9,DRIVER               INVOKE MAIN ROUTINE
         SPACE 1
         L     R13,SAVEAREA+4          GET ADDR OF CALLER'S SA
         LM    R14,R12,12(R13)         RESTORE REGISTERS
         LA    R15,0                   SET RC=0
         BR    R14                     GO HOME....
         SPACE 1
SAVEAREA DS    18F    PROGRAM MAIN SAVE AREA
SAVECPPL DS    0F     ** TSO COMMAND PROCESSOR PARAMETER LIST **
CPPLCBUF DS    A      ADDRESS OF COMMAND INPUT BUFFER
CPPLUPT  DS    A                 USER PROFILE TABLE
CPPLPSCB DS    A                 PROTECTED STEP CONTROL BLOCK
CPPLECT  DS    A                 ENVIRONMENT CONTROL TABLE
         SPACE 1
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
***********************************************************************
*     THIS IS THE HIGHEST LEVEL WORK ROUTINE IN THE PROGRAM.  IT      *
*   DIRECTS THE FLOW OF CONTROL TO THE WORK ROUTINES.                 *
*     THE PROGRAM IS WRITTEN USING BASIC STRUCTURED PROGRAMMING. FLOW *
*   BETWEEN ROUTINES IS ACCOMPLISHED VIA REGISTER 9, WHICH IS ALWAYS  *
*   SAVED UPON ENTRY AND RESTORED BEFORE EXIT.                        *
***********************************************************************
         SPACE 2
DRIVER   DS    0H
         ST    R9,SAVE10
         B     BSAVE10
SAVE10   DC    F'-1'
         DC    CL8'DRIVER  '
BSAVE10  EQU   *
         SPACE 1
         L     R1,CPPLPSCB             ADDR OF THE PSCB
         TM    16(R1),X'80'            DOES USER HAVE OPERATOR AUTH?
         BO    GOWITHIT                YES, BYPASS ERROR MESSAGE
         TPUT  MSG1,L'MSG1             PUT OUT ERROR MESSAGE
         B     EXIT10                  EXIT COMMAND
GOWITHIT EQU   *
         MVC   USERID,0(R1)            COPY USERID
         GTTERM PRMSZE=PRMSZE,ALTSZE=ALTSZE,ATTRIB=ATTRIB
         L     R2,=A(ATTNRTN)          GET ADDR OF ATTN ROUTINE
         STAX  (R2)                    SET UP STAX QUEUE ELEMENT
         LTR   R15,R15                 GO OK?
         BZ    DRBYPERR                YES, BYPASS ERROR CODE
         TPUT  MSG6,L'MSG6             PUT OUT ERROR MESSAGE
         B     EXIT10                  GO HOME.....
DRBYPERR EQU   *
         STFSMODE ON,INITIAL=YES       SET FULL SCREEN MODE ON
DRLOOPMN EQU   *
         BAL   R9,FORMATER             FORMAT EXTRACT DATA INTO SCREEN
         BAL   R9,TPUTMAIN             GO PAINT MAIN INPUT SCREEN
         CLI   MESSAGE,X'7A'           DID USER PRESS PF10?
         BNE   DRNOPF10                NO, BYPASS
         BAL   R9,STACKRTN             YES, GO LAUNCH REQUESTED COMMAND
         B     DRCLEAR                 EXIT
*        CLI   MESSAGE,C'3'            DID USER PRESS PF3? (IN FULLSCR)
*        BE    DRCLEAR                 GO TO DRIVER'S CLEAR/EXIT
*------> IF USER MOVED THE CURSOR WE WANT TO MOVE THE PAGE THERE
DRNOPF10 EQU   *
         CLC   MESSAGE+1(2),=XL2'C54B' WHERE IT IS NORMALLY...
         BE    DRCSRNMV                CURSOR DIDN'T MOVE
         MVC   BUFFADDR,MESSAGE+1      MOVE THE CURSOR LANDING SPOT
         BAL   R9,TUBETORC             CONVERT TO ROW/COLUMN
         CLC   ROW,=CL2'05'            LESS THAN ROW 5?
         BL    DRCSRNMV                IGNORE REQUEST
         CLC   ROW,=CL2'13'            MORE THAN ROW 13?
         BH    DRCSRNMV                IGNORE REQUEST
         PACK  WORKDBLW,ROW            PACK THE ROW
         CVB   R4,WORKDBLW             MAKE IT HEX
         BCTR  R4,0                    NORMALIZE LINE NUMBER
         MH    R4,=H'80'               MULTIPLY LINE LENGTH
         LA    R3,SC1LN01              GET ORIGIN
         AR    R4,R3                   PTR TO START OF LINE
         MVC   WORKDBLW(6),SCCMDNAM    MOVE CMDNAME FOUND FROM SCREEN
         L     R2,EATBLFST             GET ORIGIN OF TABLE
         L     R3,EATBLAST             GET END OF TABLE
DRSRCH01 EQU   *
         CR    R2,R3                   END-OF-TABLE?
         BNL   DRCSRNMV                IGNORE REQUEST
         CLC   WORKDBLW(6),EACMDNAM    IS IT THIS ENTRY?
         BE    DRSRCHFN                YES, GO TO FOUND
         LA    R2,EXTRLNTH(R2)         BUMP
         B     DRSRCH01                ITERATE
DRSRCHFN EQU   *
         ST    R2,EATBLNXT             SET NEW PTR
         ST    R2,EATBLTOP             SET NEW PTR
DRCSRNMV EQU   *
         CLI   MESSAGE,C'7'            DID USER PRESS PF7?
         BNE   DRNOTPB                 BYPASS PAGEBACK CODE
         L     R2,EATBLTOP             PTR TO NEXT ENTRY
         LA    R3,EXTRLNTH             GET LENGTH OF NODE
         MH    R3,=H'9'                GO BACK 9 LINES
         SR    R2,R3                   SUBTRACT 9 LINES
         C     R2,EATBLFST             GONE TOO FAR?
         BNL   DRBYPTOO                OK, BYPASS RESET CODE
         L     R2,EATBLFST             RESET
DRBYPTOO EQU   *
         ST    R2,EATBLNXT             STORE NEW NEXT PTR (PAGEBACK)
DRNOTPB  EQU   *
         B     DRLOOPMN                MAIN DRIVER LOOP
DRCLEAR  EQU   *
         TPUT  CLSCREEN,12,FULLSCR     CLEAR SCREEN
         STLINENO MODE=OFF,LINE=1      SET FULL SCREEN MODE OFF
         SPACE 1
EXIT10   EQU   *
         L     R9,SAVE10
         BR    R9
         EJECT
***********************************************************************
*   THIS ROUTINE STACKS THE NEW COMMAND ONTO THE TSO COMMAND STACK.   *
***********************************************************************
         SPACE 1
STACKRTN DS    0H
         ST    R9,SAVE20
         B     BSAVE20
SAVE20   DC    F'-1'
         DC    CL8'STACKRTN'
BSAVE20  EQU   *
         SPACE 1
         OC    MESSAGE+6(80),=CL80' '  SET TO UPPER CASE
         GETMAIN LU,LA=STCKGMRQ,A=STCKGMRS,SP=78
         SPACE 1
         L     R4,STCKGMRS             ADDR OF LSD & COMMAND
         MVC   0(16,R4),STCKLSD        MOVE LSD TO SP 78 AREA
         L     R5,STCKGMRS+4           ADDR OF SP 78 COMMAND AREA
         MVC   0(80,R5),MESSAGE+6      MOVE OUR COMMAND NAME
         ST    R5,0(R4)                STORE COMMAND ADDR IN LSD
         ST    R5,8(R4)                STORE COMMAND ADDR IN LSD
         L     R2,CPPLUPT              ADDR OF USER PROFILE TABLE
         L     R3,CPPLECT              ADDR OF ENVIRONMENT CONTROL TBL
         SPACE 1
         STACK PARM=STCKLIST,          ADDR OF LIST FORM MACRO         X
               UPT=(R2),               ADDR OF USER PROFILE TABLE      X
               ECT=(R3),               ADDR OF ENVIRONMENT CONTROL TBL X
               ECB=STCKECB,            ADDR OF EVENT CONTROL BLOCK     X
               STORAGE=((R4),SOURCE),  ADDR OF LIST STORAGE DESCRIPTOR X
               MF=(E,STCKIOPL)         EXECUTE FORM & IOPL STORAGE
         LTR   R15,R15                 SUCCESSFUL OPERATION?
         BZ    EXIT20                  YES, EXIT
         ISK   0,0                     NO, ABEND RIGHT HERE
         SPACE 1
EXIT20   EQU   *
         L     R9,SAVE20
         BR    R9
         EJECT
***********************************************************************
*     THIS ROUTINE FORMATS THE DATA DERIVED IN THE EXTRACT ROUTINE    *
*   AND FORMATS IT INTO THE SCREEN THAT IS THEN PAINTED DURING THE    *
*   TPUTMAIN ROUTINE WHICH FOLLOWS.                                   *
***********************************************************************
         SPACE 2
FORMATER DS    0H
         ST    R9,SAVE50
         B     BSAVE50
SAVE50   DC    F'-1'
         DC    CL8'FORMATER'
BSAVE50  EQU   *
         SPACE 1
         L     R2,EATBLNXT             GET NEXT ADDRESS
         ST    R2,EATBLTOP             SAVE CURRENT TOP
         LA    R4,SC1LN05              GET ORIGIN IN SCREEN
         LA    R5,9                    # LINES OF DATA PER SCREEN
         L     R1,EASAMPTR             GET ADDRESS OF SAMPLE LINE
         ST    R1,SAMPTRSV             SAVE THIS ADDRESS
         MVC   SC1LN22+1(78),0(R1)     MOVE SAMPLE LINE
         LA    R6,SC1LN22+1            GET START ADDRESS
         LA    R7,78                   GET COUNT FOR BCT
FMTUSER1 EQU   *
         CLC   0(7,R6),=CL7'%USERID'   SPECIAL IDENTIFIER?
         BE    FMTUSER2                YUP, GO REPLACE
         LA    R6,1(R6)                BUMP
         BCT   R7,FMTUSER1             ITERATE
         B     FMTHELPR                BYPASS USERID MOVE
FMTUSER2 EQU   *
         MVC   0(7,R6),USERID          MOVE IN USERID
         CLI   6(R6),C' '              7TH CHAR A BLANK?
         BNE   FMTHELPR                NO, IT'S OK
         MVC   6(2,R6),=CL2') '        TRANSPOSE SPACE
FMTHELPR EQU   *
         L     R1,EAHELPTR             GET ADDRESS OF HELP LINE
         MVC   SC1LN16(80),0(R1)       MOVE SAMPLE LINE
         LA    R1,80(R1)               GET ADDRESS OF NEXT HELP LINE
         MVC   SC1LN17(80),0(R1)       MOVE SAMPLE LINE
         LA    R1,80(R1)               GET ADDRESS OF NEXT HELP LINE
         MVC   SC1LN18(80),0(R1)       MOVE SAMPLE LINE
         LA    R1,80(R1)               GET ADDRESS OF NEXT HELP LINE
         MVC   SC1LN19(80),0(R1)       MOVE SAMPLE LINE
         LA    R1,80(R1)               GET ADDRESS OF NEXT HELP LINE
         MVC   SC1LN20(80),0(R1)       MOVE SAMPLE LINE
FMTLOOP1 EQU   *
         C     R2,EATBLAST             END OF EXTRACT TABLE?
         BNL   FMTCLEAR                CLEAR REST OF SCREEN LINES
         MVI   0(R4),C' '              CLEAR FIRST BYTE
         MVC   1(79,R4),0(R4)          CLEAR THE REST OF THE LINE
         MVC   SCCMDNAM,EACMDNAM       MOVE CMD FULL NAME
         MVC   SCSHORT,EASHORT         MOVE CMD NICKNAME
         L     R1,EATITPTR             GET PTR TO TITLE LINE
         MVC   SCTITLE,0(R1)           MOVE TITLE INFORMATION
FMTNEXT  EQU   *
         LA    R4,80(R4)               BUMP TO NEXT SCREEN LINE
         LA    R2,EXTRLNTH(R2)         BUMP TO NEXT ENTRY
         BCT   R5,FMTLOOP1             ITERATE
         LA    R7,EXTRLNTH             GET LENGTH OF EXTRACT ENTRY
         SR    R2,R7                   SUBTRACT ONE ENTRY
         MVC   EATBLPRV,EATBLNXT       SAVE OLD ORIGIN PTR
         ST    R2,EATBLNXT             STORE NEW NEXT PTR
FMTCLEAR EQU   *
         LTR   R5,R5                   RUN OUT OF LINES YET?
         BZ    FMTEND                  YES, ENOUGH IS ENOUGH
         MVI   0(R4),C' '              CLEAR FIRST BYTE
         MVC   1(79,R4),0(R4)          CLEAR THE REST OF THE LINE
         LA    R4,80(R4)               BUMP TO NEXT LINE
         BCT   R5,FMTCLEAR             ITERATE
FMTEND   EQU   *
         SPACE 1
EXIT50   EQU   *
         L     R9,SAVE50
         BR    R9
         EJECT
***********************************************************************
*     THIS ROUTINE PAINTS THE INPUT SCREEN AND READS A RESPONSE FROM  *
*   THE TERMINAL.  UPON RETURN, REGISTER 1 WILL CONTAIN THE NUMBER    *
*   OF BYTES READ FROM THE TERMINAL.                                  *
***********************************************************************
         SPACE 2
TPUTMAIN DS    0H
         ST    R9,SAVE60
         B     BSAVE60
SAVE60   DC    F'-1'
         DC    CL8'TPUTMAIN'
BSAVE60  EQU   *
         SPACE 1
         LA    R2,ATRLST1B             ADDR OF ATTRIBUTE LIST
         ST    R2,ALISTPTR             STORE IN PTR AREA
         LA    R2,SCREEN1              ADDR OF ATTRIBUTE LIST
         ST    R2,ASCRNPTR             STORE IN PTR AREA
         LA    R2,SC1SUFIX             ADDR OF SUFFIX
         ST    R2,ASUFXPTR             STORE IN PTR AREA
         LA    R2,L'SC1SUFIX           GET LENGTH OF SUFFIX
         STC   R2,ASUFXPTR             STORE IN PTR AREA
         MVC   ASCRNSIZ,=F'1920'       STORE SIZE OF SCREEN
         BAL   R9,FULLSCR              GO DO DEMO SCREEN WORK
         LTR   R1,R1                   DID USER TYPE IN COMMAND?
         BZ    DRCLEAR                 YES, BYPASS CLEAR
         SPACE 1
EXIT60   EQU   *
         L     R9,SAVE60
         BR    R9
         EJECT
***********************************************************************
*   THIS ROUTINE BUILDS THE FINAL SCREEN, DOES A FULL SCREEN TPUT,    *
* A DUMMY TGET, AND CLEARS THE SCREEN.  THE MAJOR PART OF THE CODE    *
* IS THE BUILDING OF THE FINAL SCREEN.  THE ROUTINE HAS THREE INPUTS. *
* 'ASCRNPTR' POINTS TO A STANDARD 1920 BYTE SCREEN IMAGE WITH NO      *
* ATTRIBUTE CHARACTERS.  'ALISTPTR' CONTAINS THE ADDRESS OF THE       *
* ATTRIBUTE LIST THAT WE WILL USE THIS TIME AROUND.  'SCPREFIX' IS    *
* THE CONTROL STREAM WHICH IS TO BE PREFIXED ONTO THE FINAL SCREEN.   *
*   USING THE THREE INPUTS, A TPUT'ABLE FINAL SCREEN IS BUILT IN THE  *
* 'SCRBLD' AREA AT THE END OF THE PROGRAM.                            *
***********************************************************************
         SPACE 1
FULLSCR  DS    0H
         ST    R9,SAVE70
         B     BSAVE70
SAVE70   DC    F'-1'
         DC    CL8'FULLSCR '
BSAVE70  EQU   *
         SPACE 1
*--> INIT REGISTERS
         L     R2,ALISTPTR             GET PTR TO ATTRIBUTE LIST
         L     R3,0(R2)                GET END OF ATTRIBUTE LIST
         LA    R2,4(R2)                BUMP PAST END ADDRESS
         LA    R4,SCRBLD               GET ADDR OF BUILD AREA
         XR    R5,R5                   INIT LENGTH REGISTER
         L     R6,ASCRNPTR             GET ADDR OF INPUT SCREEN
         LR    R7,R6                   GET BEGINNING
         A     R7,ASCRNSIZ             ADD SIZE OF SCREEN TO GET END
*--> INSERT PREFIX
         MVC   0(L'SCPREFIX,R4),SCPREFIX   MOVE PREFIX
         LA    R4,L'SCPREFIX(R4)       BUMP PTR
         LA    R5,L'SCPREFIX(R5)       ADD LENGTH
*--> FLAG ATTRIBUTE BYTES FIRST
FSLOOP10 EQU   *
         CR    R2,R3                   END OF ATTRIBUTE LIST?
         BE    FSLOOP20                YES, END OF FLAGGING
         L     R8,0(R2)                GET ADDR OF NEXT ATTR BYTE
         MVI   0(R8),X'1D'             FLAG BYTE WITH A X'FF'
         LA    R2,4(R2)                GET NEXT ATTRIBUTE ADDR
         B     FSLOOP10                GO TRY NEXT
FSLOOP20 EQU   *
         L     R2,ALISTPTR             GET PTR TO ATTRIBUTE LIST
         LA    R2,4(R2)                BUMP PAST END ADDRESS
FSLOOP30 EQU   *
         CR    R6,R7                   INPUT SCREEN EXHAUSTED?
         BE    FSLOOP50                GO TPUT
         CLI   0(R6),X'1D'             IS THIS A FLAG?
         BE    FSLOOP40                YES, GO PROCESS
         MVC   0(1,R4),0(R6)           NO, MOVE THIS BYTE TO OUTPUT
         LA    R4,1(R4)                BUMP PTR TO OUTPUT SCREEN
         LA    R5,1(R5)                BUMP LENGTH OF OUTPUT
         LA    R6,1(R6)                BUMP TO NEXT INPUT BYTE
         B     FSLOOP30                GO TRY NEXT BYTE
FSLOOP40 EQU   *
         MVC   0(1,R4),0(R6)           MOVE FLAG TO OUTPUT
         MVC   1(1,R4),0(R2)           MOVE ATTR TO OUTPUT
         LA    R2,4(R2)                BUMP TO NEXT ATTR
         LA    R4,2(R4)                BUMP TWO BYTES IN OUTPUT
         LA    R5,2(R5)                BUMP LENGTH BY TWO
         LA    R6,1(R6)                BUMP TO NEXT INPUT BYTE
         B     FSLOOP30                GO TRY NEXT BYTE
FSEXMVC  MVC   0(0,R4),0(R8)           MOVE SUFFIX TO OUTPUT
FSLOOP50 EQU   *
         XR    R1,R1                   CLEAR REGISTER
         IC    R1,ASUFXPTR             GET LENGTH TO MOVE
         BCTR  R1,0                    SUBTRACT ONE FOR MVC
         L     R8,ASUFXPTR             ADDR OF SUFFIX
         EX    R1,FSEXMVC              MOVE THE SUFFIX TO OUTPUT
         AR    R4,R1                   BUMP LENGTH OF SUFFIX
         AR    R5,R1                   BUMP LENGTH OF SUFFIX
         LA    R4,1(R4)                RESTORE 1 BYTE FROM EX
         LA    R5,1(R5)                RESTORE 1 BYTE FROM EX
*--> TGET'S AND TPUT'S
         CLI   STAXSW,C'1'             HAVE WE BEEN INTERRUPTED?
         BE    FSINTRPT                YES, BYPASS THIS TPUT
FSREFRSH EQU   *
         TPUT  SCRBLD,(R5),FULLSCR     PAINT OUTPUT SCREEN
         TM    ATTRIB+3,X'01'          DOES THIS TUBE SUPPORT COLOR?
         BNO   NOCOLOR                 BRANCH AROUND COLORS
         TPUT  SC1COLOR,LSC1CLR,NOEDIT WRITE SPECIALTY COLORS
NOCOLOR  EQU   *
         MVI   MESSAGE,C' '            CLEAR FIRST CHARACTER
         MVC   MESSAGE+1(85),MESSAGE   CLEAR REST
         TGET  MESSAGE,86,ASIS         GET DUMMY INPUT
         CLI   STAXSW,C'1'             HAVE WE BEEN INTERRUPTED?
         BE    FSINTRPT                YES, CLEAR AND END
         CLI   MESSAGE,C'3'            DID USER PRESS PF3?
         BE    DRCLEAR                 GO TO DRIVER'S CLEAR/EXIT
         L     R8,SAMPTRSV             GET ADDRESS OF CURRENT SAMP LINE
         MVC   0(80,R8),MESSAGE+6      SAVE USER'S CHANGES
         CLI   MESSAGE,X'7D'           DID USER PRESS ENTER
         BNE   EXIT70                  NO, EXIT
         L     R7,EATBLTOP             GET CURRENT TOP
         ST    R7,EATBLNXT             SAVE INTO NEXT
         B     EXIT70                  SPLIT
FSINTRPT EQU   *
         TPUT  CLSCREEN,12,FULLSCR     CLEAR SCREEN
         TPUT  MSG7,L'MSG7             SEND INTERRUPTED MESSAGE
         L     R13,SAVEAREA+4          GET ADDR OF SAVEAREA
         LM    R14,R12,12(R13)         RESTORE CALLERS REGISTERS
         LA    R15,4                   SET RC=4
         BR    R14                     RETURN TO CALLER
         SPACE 1
EXIT70   EQU   *
         L     R9,SAVE70
         BR    R9
         EJECT
***********************************************************************
*   THIS ROUTINE CALCULATES THE SCREEN ADDR'S FROM LINE START ADDRESS *
***********************************************************************
         SPACE 2
CALCADDR DS    0H
         ST    R9,SAVE100
         B     BSAVE100
SAVE100  DC    F'-1'
         DC    CL8'CALCADDR'
BSAVE100 EQU   *
         SPACE 1
*------> AT ENTRY, R8 MUST CONTAIN A PTR TO A VOLSER ON A SCREEN LINE
         LA    R7,SC1LN01              PICK UP ADDR OF START OF SCREEN
         SR    R8,R7                   GENERATE DISPLACEMENT
         CVD   R8,WORKDBLW             CONVERT TO DECIMAL
         DP    WORKDBLW,=PL2'80'       DIVIDE BY LINE LENGTH
         AP    WORKDBLW(6),=PL1'1'     VOLSER IS ON FOLLOWING LINE
         UNPK  ROW,WORKDBLW+4(2)       UNPACK
         OI    ROW+1,X'F0'             CLEAR SIGN NIBBLE
         MVC   COLUMN,=CL2'01'         SET UP COLUMN
         BAL   R9,RCTOTUBE             CONVERT ROW/COLUMN TO SCREEN ADR
         MVC   STARTADR,BUFFADDR       STARTING ADDRESS
         MVC   COLUMN,=CL2'26'         SET UP COLUMN
         BAL   R9,RCTOTUBE             CONVERT ROW/COLUMN TO SCREEN ADR
         MVC   ENDADDR,BUFFADDR        ENDING SCREEN ADDRESS
         SPACE 1
EXIT100  EQU   *
         L     R9,SAVE100
         BR    R9
         EJECT
***********************************************************************
*     THIS ROUTINE PROCESSES THE ROW/COLUMN TO BUFFER CONVERSION      *
***********************************************************************
         SPACE 2
RCTOTUBE DS    0H
         ST    R9,SAVE510
         B     BSAVE510
SAVE510  DC    F'-1'
         DC    CL8'RCTOTUBE'
BSAVE510 EQU   *
         SPACE 1
*--> USER WANTS A ROW/COLUMN TO BUFFER ADDRESS CONVERSION
         PACK  R327FLD1,ROW            PACK THE ROW NUMBER
         SP    R327FLD1,=PL1'1'        SUBTRACT 1
         MP    R327FLD1,=PL2'80'       NO, MULTIPLY BY 80
         PACK  R327FLD2,COLUMN         PACK THE COLUMN
         AP    R327FLD1,R327FLD2       ADD TO GET POSITION NUMBER
         SP    R327FLD1,=PL1'1'        SUBTRACT TO GET REL POSITION
         DP    R327FLD1,=PL2'64'       DIVIDE BY BASE 64
         ZAP   WORKDBLW,R327FLD1(2)    MOVE FOR CONVERSION
         CVB   R2,WORKDBLW             CONVERT FOR USE AS AN INDEX
         LA    R3,TABLE327             GET BASE ADDRESS
         AR    R3,R2                   ADD DISPLACEMENT TO BASE
         MVC   BUFFADDR+0(1),0(R3)     MOVE CHARACTERS FROM TABLE
         ZAP   WORKDBLW,R327FLD1+2(2)  MOVE FOR CONVERSION
         CVB   R2,WORKDBLW             CONVERT FOR USE AS AN INDEX
         LA    R3,TABLE327             GET BASE ADDRESS
         AR    R3,R2                   ADD DISPLACEMENT TO BASE
         MVC   BUFFADDR+1(1),0(R3)     MOVE CHARACTERS FROM TABLE
         SPACE 1
EXIT510  EQU   *
         L     R9,SAVE510
         BR    R9
         EJECT
***********************************************************************
*     THIS ROUTINE PROCESSES THE BUFFER TO ROW/COLUMN CONVERSION      *
***********************************************************************
         SPACE 2
TUBETORC DS    0H
         ST    R9,SAVE520
         B     BSAVE520
SAVE520  DC    F'-1'
         DC    CL8'TUBETORC'
BSAVE520 EQU   *
         SPACE 1
*--> USER WANTS A BUFFER ADDRESS TO ROW/COLUMN CONVERSION
         LA    R2,TABLE327             GET BASE ADDRESS OF TABLE
         LA    R3,64                   GET TABLE LENGTH
R3270510 EQU   *
         CLC   BUFFADDR(1),0(R2)       IS IT THIS POINT IN TABLE
         BE    R3270520                YES, BREAK OUT
         LA    R2,1(R2)                BUMP
         BCT   R3,R3270510             ITERATE
         ISK   0,0                     BUG, KILL IT RIGHT HERE
R3270520 EQU   *
         LA    R3,TABLE327             GET BASE ADDRESS OF TABLE
         SR    R2,R3                   GET OFFSET
         SLL   R2,6                    MULTIPLY BY 64
         CVD   R2,WORKDBLW             CONVERT TO DECIMAL
         ZAP   R327FLD1,WORKDBLW       PLACE IN SAFE-KEEPING
         LA    R2,TABLE327             GET BASE ADDRESS OF TABLE
         LA    R3,64                   GET TABLE LENGTH
R3270530 EQU   *
         CLC   BUFFADDR+1(1),0(R2)     IS IT THIS POINT IN TABLE
         BE    R3270540                YES, BREAK OUT
         LA    R2,1(R2)                BUMP
         BCT   R3,R3270530             ITERATE
         ISK   0,0                     BUG, KILL IT RIGHT HERE
R3270540 EQU   *
         LA    R3,TABLE327             GET BASE ADDRESS OF TABLE
         SR    R2,R3                   GET OFFSET
         CVD   R2,WORKDBLW             CONVERT TO DECIMAL
         AP    R327FLD1,WORKDBLW       ADD TO BASE
         DP    R327FLD1,=PL2'80'       NO, DIVIDE BY 80
         AP    R327FLD1+0(2),=PL1'1'   ADD 1 TO GET REAL ROW
         AP    R327FLD1+2(2),=PL1'1'   ADD 1 TO GET REAL COLUMN
         UNPK  ROW,R327FLD1(2)         RETURN THE ROW
         OI    ROW+1,X'F0'             CLEAR SIGN
         UNPK  COLUMN,R327FLD1+2(2)    RETURN THE COLUMN
         OI    COLUMN+1,X'F0'          CLEAR SIGN
         SPACE 1
EXIT520  EQU   *
         L     R9,SAVE520
         BR    R9
         EJECT
***********************************************************************
*           W O R K I N G   S T O R A G E   S E C T I O N             *
***********************************************************************
         SPACE 2
MSG1     DC    CL36'COMMAND REQUIRES OPERATOR AUTHORITY'
MSG6     DC    CL17'STAX MACRO FAILED'
MSG7     DC    CL19'COMMAND INTERRUPTED'
MESSAGE  DC    CL86' '                 MESSAGE TO BE RECEIVED
PRMSZE   DS    CL2                     PRIMARY SCREEN SIZE
ALTSZE   DS    CL2                     SECONDARY SCREEN SIZE
ALTMOD3  EQU   X'20'                   TERMINAL = 3278/9 MOD 3
ATTRIB   DS    F                       TERMINAL ATTRIBUTES
LASTLNSW DC    CL1'0'                  LAST LINE PROCESSED SWITCH
STAXSW   DC    CL1'0'                  INTERRUPTED, YES/NO
USERID   DC    CL7' '                  USERID, PADDED WITH BLANKS
         SPACE 1
HEXTR    DC    CL16'0123456789ABCDEF'  TRANSLATE HEX TO CHAR
TRTALLOW DC    256XL1'FF'              TRT TABLE/ALLOWABLE CHARS
         ORG   TRTALLOW+C'0'           ALLOW 0-9
         DC    10XL1'00'                 CLEAR CHARS
         ORG
         SPACE 2
         LTORG                         LITERAL POOL
         EJECT
***********************************************************************
*      WORK AREAS FOR 3270 ADDRESS CONVERSION ROUTINES                *
***********************************************************************
         SPACE 1
WORKDBLW DC    D'0'                    HEX/DECIMAL CONVERSION AREA
SAMPTRSV DS    F                       PTR TO CURRENT SAMPLE LINE
ROW      DS    CL2                     ROW
COLUMN   DS    CL2                     COLUMN
BUFFADDR DS    XL2                     3270 BUFFER ADDRESS
STARTADR DS    XL2                     3270 BUFFER ADDRESS: STARTING
ENDADDR  DS    XL2                     3270 BUFFER ADDRESS: ENDING
*--> WORK DATA ITEMS FOR 3270 TRANSLATION ROUTINE
R327FLD1 DS    F                       WORK AREA
R327FLD2 DS    F                       WORK AREA
*--> IBM 3270 BASE 64 ENCODING TABLE (IS THERE A ROUTINE SOMEWHERE?)
TABLE327 EQU   *
         DC    X'40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F'
         DC    X'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F'
         DC    X'6061E2E3E4E5E6E7E8E96A6B6C6D6E6F'
         DC    X'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'
*--> POINTERS TO KEEP TRACK OF THE CURRENT SCREEN POSITION
EATBLFST DC   A(CMDNMTBL)              POINTER TO BGN OF EXTRACT TABLE
EATBLTOP DC   A(CMDNMTBL)              POINTER TO TOP OF CURRENT SCREEN
EATBLAST DC   A(CMDNMEND)              POINTER TO END OF EXTRACT TABLE
EATBLPRV DC   A(CMDNMTBL)              POINTER TO PREVIOUS SCREEN START
EATBLNXT DC   A(CMDNMTBL)              POINTER TO NEXT ENTRY TO SHOW
         EJECT
***********************************************************************
*               S T A C K   M A C R O   A R E A                       *
***********************************************************************
         SPACE 1
STCKGMRS DC    2F'0'                   GETMAIN RESPONSE AREA
STCKGMRQ DS    0F                      GETMAIN REQUEST AREA
         DC    F'16'                       16 BYTES FOR THE LSD
         DC    X'80'                       LAST REQUEST INDICATOR
         DC    AL3(80)                     80 BYTES FOR COMMAND
STCKLIST STACK MF=L                    LIST FORM STACK MACRO
STCKECB  DC    F'0'                    ECB FOR STACK MACRO USE
STCKIOPL DC    4F'0'                   INPUT/OUTPUT PARAMETER LIST
STCKLSD  DS    0F                      LIST SOURCE DESCRIPTOR
         DC    A(0)                        ADDR OF IN-STORAGE LIST
         DC    H'52'                       RECORD LENGTH OF ELEMENT
         DC    H'52'                       TOTAL LENGTH OF LIST
         DC    A(0)                        POINTER TO COMMAND
         DC    A(0)                        RESERVED
         EJECT
***********************************************************************
*               C O M M A N D   N A M E   T A B L E                   *
***********************************************************************
         SPACE 1
SCCMDPTR DC    A(CMDNMTBL)     ADDRESS OF COMMAND LINE TO HILITE
CMDNMTBL EQU   *
         DC    CL8'ARITH   '   NAME OF THE COMMAND
         DC    CL4'AR  '       NICKNAME
         DC    A(HELPAR)       ADDRESS OF HELP TEXT
         DC    A(SAMPAR)       ADDRESS OF SAMPLE COMMAND TEXT
         DC    A(TITLAR)       ADDRESS OF TITLE TEXT
         DC    CL8'DSATTRIB'   NAME OF THE COMMAND
         DC    CL4'DSAT'       NICKNAME
         DC    A(HELPDSAT)     ADDRESS OF HELP TEXT
         DC    A(SAMPDSAT)     ADDRESS OF SAMPLE COMMAND TEXT
         DC    A(TITLDSAT)     ADDRESS OF TITLE TEXT
         DC    CL8'LISTALOC'   NAME OF THE COMMAND
         DC    CL4'LA  '       NICKNAME
         DC    A(HELPLA)       ADDRESS OF HELP TEXT
         DC    A(SAMPLA)       ADDRESS OF SAMPLE COMMAND TEXT
         DC    A(TITLLA)       ADDRESS OF TITLE TEXT
         DC    CL8'LISTLEV '   NAME OF THE COMMAND
         DC    CL4'LL  '       NICKNAME
         DC    A(HELPLL)       ADDRESS OF HELP TEXT
         DC    A(SAMPLL)       ADDRESS OF SAMPLE COMMAND TEXT
         DC    A(TITLLL)       ADDRESS OF TITLE TEXT
         DC    CL8'LISTPDS '   NAME OF THE COMMAND
         DC    CL4'LPDS'       NICKNAME
         DC    A(HELPLPDS)     ADDRESS OF HELP TEXT
         DC    A(SAMPLPDS)     ADDRESS OF SAMPLE COMMAND TEXT
         DC    A(TITLLPDS)     ADDRESS OF TITLE TEXT
         DC    CL8'LISTVTOC'   NAME OF THE COMMAND
         DC    CL4'LV  '       NICKNAME
         DC    A(HELPLV)       ADDRESS OF HELP TEXT
         DC    A(SAMPLV)       ADDRESS OF SAMPLE COMMAND TEXT
         DC    A(TITLLV)       ADDRESS OF TITLE TEXT
         DC    CL8'MONJOB  '   NAME OF THE COMMAND
         DC    CL4'MJ  '       NICKNAME
         DC    A(HELPMJ)       ADDRESS OF HELP TEXT
         DC    A(SAMPMJ)       ADDRESS OF SAMPLE COMMAND TEXT
         DC    A(TITLMJ)       ADDRESS OF TITLE TEXT
         DC    CL8'SHOWVOLS'   NAME OF THE COMMAND
         DC    CL4'SV  '       NICKNAME
         DC    A(HELPSV)       ADDRESS OF HELP TEXT
         DC    A(SAMPSV)       ADDRESS OF SAMPLE COMMAND TEXT
         DC    A(TITLSV)       ADDRESS OF TITLE TEXT
         DC    CL8'KERTS   '   NAME OF THE COMMAND
         DC    CL4'KE  '       NICKNAME
         DC    A(HELPKE)       ADDRESS OF HELP TEXT
         DC    A(SAMPKE)       ADDRESS OF SAMPLE COMMAND TEXT
         DC    A(TITLKE)       ADDRESS OF TITLE TEXT
         DC    CL8'TSOCMDR '   NAME OF THIS COMMAND
         DC    CL4'TC  '       NICKNAME
         DC    A(HELPTC)       ADDRESS OF HELP TEXT
         DC    A(SAMPTC)       ADDRESS OF SAMPLE COMMAND TEXT
         DC    A(TITLTC)       ADDRESS OF TITLE TEXT
         DC    CL8'VTAMOPER'   NAME OF THE COMMAND
         DC    CL4'VO  '       NICKNAME
         DC    A(HELPVO)       ADDRESS OF HELP TEXT
         DC    A(SAMPVO)       ADDRESS OF SAMPLE COMMAND TEXT
         DC    A(TITLVO)       ADDRESS OF TITLE TEXT
CMDNMEND DC    XL8'00'         ** MARKS END OF DEVICE TABLE **
         EJECT
*--> THE FOLLOWING ARE USED BY THE 'FULLSCR' ROUTINE
CLSCREEN DC    XL12'C11140403C4040001140C113'
SCPREFIX DC    XL11'C11140403C404000114040'
         SPACE 1
ALISTPTR DC    A(0)                    PTR TO ACTIVE ATTR LIST
ASCRNPTR DC    A(0)                    PTR TO ACTIVE INPUT SCREEN
ASCRNSIZ DC    F'0'                    SIZE OF THE SCREEN INPUT
ASUFXPTR DC    A(0)                    LENGTH/PTR TO SUFFIX
         SPACE 1
ATRLST1B DS    0F
         DC    A(ATRLST1E)             END OF THIS LIST
         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE
         DC    AL3(SC1LN01+00)         FIRST BYTE OF SCREEN
         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE
         DC    AL3(SC1LN02+00)         FIRST BYTE OF SECOND LINE
         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE
         DC    AL3(SC1LN04+00)         FIRST BYTE OF FIFTH LINE
         DC    AL1(ATR@UH)             UNPROTECTED  / RED
         DC    AL3(SC1LN05+10)         START OF ACTIVE COMMAND
         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE
         DC    AL3(SC1LN05+16)         END OF ACTIVE COMMAND
         DC    AL1(ATR@UHMO)           UNPROT-HIGH  / RED / MDT-ON
         DC    AL3(SC1LN22+00)         INPUT FROM COMMAND LINE
         DC    AL1(ATR@PL)             UNPROTECTED  / RED
         DC    AL3(SC1LN22+79)         END OF COMMAND LINE
         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE
         DC    AL3(SC1LN24+00)         BEGINNING OF LAST LINE
         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE
         DC    AL3(SC1LN24+11)         BEGINNING OF PFK LIST
         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE
         DC    AL3(SC1LN24+67)         END OF PFK LIST
ATRLST1E EQU   *
         SPACE 1
ATR@PL   EQU   X'E4'                   PROTECT-LOW  / BLUE
ATR@PH   EQU   X'E8'                   PROTECT-HIGH / WHITE
ATR@UL   EQU   X'C4'                   UNPROT-LOW   / GREEN
ATR@UH   EQU   X'C8'                   UNPROT-HIGH  / RED
ATR@UHMO EQU   X'C9'                   UNPROT-HIGH  / RED / MDT-ON
         EJECT
***********************************************************************
*  EXTENDED COLOR FIELDS FOR FULL CAPABILITY SCREENS                  *
***********************************************************************
         SPACE 1
SC1COLOR EQU   *
         DC    XL1'F1'                 WRITE COMMAND
         DC    XL1'C2'                 WCC - RELEASE KEYBOARD
*--> BACK-LIGHT THE TITLE LINE
         DC    XL16'1140402903C0F841F442F311C14F1DE8'
*--> REVERSE VIDEO THE TITLE BLOCKS
         DC    XL16'11C2602903C0F841F242F111C36F1DE8'
*--> HILIT THE CURRENT ACTIVE COMMAND
*        DC    XL16'11C5C92903C0F8410042F211C5501DE4'
*--> BACK-LIGHT THE HELP BLOCK
         DC    XL16'11D1602903C0F841F442F311D26F1DE8'
         DC    XL16'11D9402903C0F841F442F3115A4F1DE8'
ESC1CLR  EQU   *
LSC1CLR  EQU   ESC1CLR-SC1COLOR
         SPACE 2
         EJECT
SCREEN1  EQU   *
SC1LN01  DC    CL40'                           T S O   C O M'
         DC    CL40' M A N D E R                            '
SC1LN02  DC    CL40' ---------------------------------------'
         DC    CL40'--------------------------------------- '
SC1LN03  DC    CL40' FULLNAME  SHORT  *---------------------'
         DC    CL40'-- DESCRIPTION -----------------------* '
SC1LN04  DC    CL40'                                        '
         DC    CL40'                                        '
SC1LN05  DC    CL40'                                        '
         DC    CL40'                                        '
SC1LN06  DC    CL40'                                        '
         DC    CL40'                                        '
SC1LN07  DC    CL40'                                        '
         DC    CL40'                                        '
SC1LN08  DC    CL40'                                        '
         DC    CL40'                                        '
SC1LN09  DC    CL40'                                        '
         DC    CL40'                                        '
SC1LN10  DC    CL40'                                        '
         DC    CL40'                                        '
SC1LN11  DC    CL40'                                        '
         DC    CL40'                                        '
SC1LN12  DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
SC1LN16  DC    CL40'                                        '
         DC    CL40'                                        '
SC1LN17  DC    CL40'                                        '
         DC    CL40'                                        '
SC1LN18  DC    CL40'                                        '
         DC    CL40'                                        '
SC1LN19  DC    CL40'                                        '
         DC    CL40'                                        '
SC1LN20  DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
SC1LN22  DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
SC1LN24  DC    CL40' ---------   PF3=END  PF7=BACK  PF8=FORW'
         DC    CL40'ARD  PF10=LAUNCH COMMAND    ----------- '
SC1SUFIX DC    XL4'11C54B13'
SCRBLD   DS    CL4096                  BUILD AREA FOR FINAL SCREEN
         EJECT
***********************************************************************
*  HELP AND SAMPLE DATA TEXT FOR THE COMMAND LINE ENTRIES             *
***********************************************************************
         SPACE 1
HELPAR   DC    CL40'   AR PROVIDES ARITHMETIC FUNCTIONS IN D'
         DC    CL40'ECIMAL AND HEX, AS WELL AS 3270 BUFFER  '
         DC    CL40'   ADDRESS CONVERSION CAPABILITIES.  IT '
         DC    CL40'IS FULL-SCREEN MENU DRIVEN.  RESULTS    '
         DC    CL40'   ARE SAVED FROM ONE COMMAND TO THE NEX'
         DC    CL40'T.  INDIVIDUAL SCREENS MAY BE EXITED    '
         DC    CL40'   BY PRESSING PA1 OR ATTN.             '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
SAMPAR   DC    CL40'AR  <NO OPERANDS - THIS COMMAND IS MENU '
         DC    CL40'DRIVEN>                                 '
TITLAR   DC    CL40'PERFORMS ARITHMETIC OPERATIONS, HEX AND '
         DC    CL20'3270 CALCULATIONS   '
         SPACE 1
HELPDSAT DC    CL40'   DSAT PROVIDES EXTENSIVE INFORMATION A'
         DC    CL40'BOUT INDIVIDUAL DATASETS.  THE FORMAT   '
         DC    CL40'   IS DSAT DSNAME, WHERE DSNAME MAY BE E'
         DC    CL40'ITHER FULLY QUALIFIED OR IF ENTERED     '
         DC    CL40'   WITHOUT APOSTROPHES WILL HAVE YOUR US'
         DC    CL40'ERID APPENDED.  EXTENT INFORMATION MAY  '
         DC    CL40'   BE OBTAINED BY USING THE /X SWITCH.  '
         DC    CL40'SCREENS MAY BE SAVED BY PROVIDING AN    '
         DC    CL40'   FBA/133 DATASETS TO DDNAME DSATPRNT. '
         DC    CL40'                                        '
SAMPDSAT DC    CL40'DSAT DATASET.NAME                       '
         DC    CL40'/X                                      '
TITLDSAT DC    CL40'DISPLAYS DATASET ATTRIBUTES AND OPTIONAL'
         DC    CL20'LY THE EXTENTS      '
         SPACE 1
HELPLA   DC    CL40'   THIS COMMAND DISPLAYS ALL DATASETS TH'
         DC    CL40'AT ARE ALLOCATED TO YOUR CURRENT TSO    '
         DC    CL40'   SESSION, ALONG WITH DISPOSITION INFOR'
         DC    CL40'MATION.  PLEASE NOTE THAT YOU CAN       '
         DC    CL40'   POSITION THE SCREEN PRECISELY BY MOVI'
         DC    CL40'NG THE CURSOR TO THE STARTING LINE AND  '
         DC    CL40'   PRESSING EITHER PF7 OR PF8.          '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
SAMPLA   DC    CL40'LA  <NO OPERANDS>                       '
         DC    CL40'                                        '
TITLLA   DC    CL40'DISPLAYS FOREGROUND ALLOCATIONS BY DDNAM'
         DC    CL20'E AND DISPOSITION   '
         SPACE 1
HELPLL   DC    CL40'   THIS COMMAND WILL LIST ALL DATASETS W'
         DC    CL40'ITHIN A GIVEN QUALIFIER, UP TO TWO      '
         DC    CL40'   LEVELS.  THE SECOND QUALIFIER MAY BE '
         DC    CL40'WILD-CARDED, BUT NO ASTERISK OR OTHER   '
         DC    CL40'   WILD-CARD CHARACTER IS REQUIRED.  THE'
         DC    CL40' SCREEN MAY BE PRECISELY POSITIONED BY  '
         DC    CL40'   MOVING THE CURSOR TO THE LINE DESIRED'
         DC    CL40' AND THEN PRESSING PF7 OR PF8.          '
         DC    CL40'                                        '
         DC    CL40'                                        '
SAMPLL   DC    CL40'LL  LEV(%USERID)                        '
         DC    CL40'                                        '
TITLLL   DC    CL40'DISPLAYS DATASET LISTS FROM THE CATALOG '
         DC    CL20'USING A QUALIFER    '
         SPACE 1
HELPLPDS DC    CL40'   THE LPDS COMMAND IS A POWERFUL UTILIT'
         DC    CL40'Y THAT PERFORMS MANY OPERATIONS ON ANY  '
         DC    CL40'   KIND OF PDS.  THE FORMAT OF THE COMMA'
         DC    CL40'ND IS LPDS DSNAME, WHICH MAY EITHER BE  '
         DC    CL40'   FULLY QUALIFIED OR USERID-ASSUMED.  I'
         DC    CL40'F THIS IS YOUR FIRST TIME USING THE     '
         DC    CL40'   COMMAND, TRY ENTERING O FOR OPTIONS. '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
SAMPLPDS DC    CL40'LPDS DATASET.NAME                       '
         DC    CL40'                                        '
TITLLPDS DC    CL40'PERFORMS NUMEROUS USEFUL ACTIVITIES ON A'
         DC    CL20'NY PDS              '
         SPACE 1
HELPLV   DC    CL40'   THIS COMMAND LISTS ALL DATASETS ON A '
         DC    CL40'PARTICULAR DASD VOLUME, OPTIONALLY BY   '
         DC    CL40'   LEVEL.  THE FORMAT IS LV VOL(VOLSER) '
         DC    CL40' LEV(QUALIFIERS).  THE LEV INFORMATION  '
         DC    CL40'   IS WILD-CARDED BUT REQUIRES NO SPECIA'
         DC    CL40'L CHARACTER.  THE SCREEN MAY BE PRE-    '
         DC    CL40'   CISELY POSITIONED BY MOVING THE CURSO'
         DC    CL40'R TO THE LINE DESIRED AND PRESSING PF7  '
         DC    CL40'   OR PF8.                              '
         DC    CL40'                                        '
SAMPLV   DC    CL40'LV  VOL(VOLSER) LEV(%USERID)            '
         DC    CL40'                                        '
TITLLV   DC    CL40'DISPLAYS LISTS OF DATASETS ON A SPECIFIC'
         DC    CL20' VOLUME BY LEVEL    '
         SPACE 1
HELPMJ   DC    CL40'   MONJOB IS USEFUL IF YOU ARE WATCHING '
         DC    CL40'A JOB OR STARTED TASK RUN OR ARE JUST   '
         DC    CL40'   WAITING FOR IT TO FINISH.  THE FORMAT'
         DC    CL40' OF THE COMMAND IS MJ JOB(JOBNAME) AND  '
         DC    CL40'  YOU MAY OPTIONALLY CHANGE THE UPDATE I'
         DC    CL40'NTERVAL BY ALSO APPENDING INT(N) WHERE  '
         DC    CL40'   N OR NN IS THE NUMBER OF REFRESH SECO'
         DC    CL40'NDS, WHICH DEFAULTS TO 5.  PRESS PA1    '
         DC    CL40'   OR ATTN TO EXIT THE MONITORING SESSIO'
         DC    CL40'N THAT IS IN PROGRESS.                  '
SAMPMJ   DC    CL40'MJ  JOB(%USERID) INT(10)                '
         DC    CL40'                                        '
TITLMJ   DC    CL40'MONITOR EXECUTION OF A JOB, STARTED TASK'
         DC    CL20' OR TSO USER BY NAME'
         SPACE 1
HELPSV   DC    CL40'   SHOWVOLS DISPLAYS A LIST OF ALL DASD '
         DC    CL40'VOLUMES THAT ARE PRESENTLY MOUNTED ON   '
         DC    CL40'   THE SYSTEM.  IT REQUIRES NO OPERANDS.'
         DC    CL40'  THE SCREEN MAY BE MORE PRECISELY      '
         DC    CL40'   POSITIONED BY MOVING THE CURSOR AND P'
         DC    CL40'RESSING PF7 OR PF8.  THE IPL, MASTER    '
         DC    CL40'   CATALOG, AND PAGING VOLUMES ARE HIGH-'
         DC    CL40'LIGHTED.                                '
         DC    CL40'                                        '
         DC    CL40'                                        '
SAMPSV   DC    CL40'SV  <NO OPERANDS>                       '
         DC    CL40'                                        '
TITLSV   DC    CL40'DISPLAYS A LIST OF VOLUMES THAT ARE ONLI'
         DC    CL20'NE TO THE SYSTEM    '
         SPACE 1
HELPKE   DC    CL40'   THIS FULL-SCREEN STAR TREK WAS WRITTE'
         DC    CL40'N AS A DEMONSTRATION OF 3270 EXTENDED   '
         DC    CL40'   HIGH-LIGHTING CAPABILITIES, AND IS NO'
         DC    CL40'T PARTICULARLY CHALLENGING AS A GAME.   '
         DC    CL40'   IT IS MENU DRIVEN.  THIS IS A GOOD TO'
         DC    CL40'OL FOR DEMONSTRATING TSO TO NON-DP      '
         DC    CL40'   LITERATE FRIENDS.                    '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
SAMPKE   DC    CL40'KE  <NO OPERANDS>                       '
         DC    CL40'                                        '
TITLKE   DC    CL40'FULL SCREEN STAR TREK (MEANT AS A DEMO T'
         DC    CL20'OOL ONLY)           '
         SPACE 1
HELPTC   DC    CL40'   TSO COMMANDER TRACES ITS LINEAGE TO T'
         DC    CL40'HE FAMOUS PC/DOS UTILITY CALLED NORTON  '
         DC    CL40'   COMMANDER.  TSO HAS ALWAYS SUFFERED F'
         DC    CL40'ROM A LACK OF FULL-SCREEN ONLINE HELP   '
         DC    CL40'   FOR NON-ISPF COMMANDS.  THIS IS AN AT'
         DC    CL40'TEMPT TO REDRESS THAT SAD SITUATION.    '
         DC    CL40'   TRY MOVING THE CURSOR TO THE LINE THA'
         DC    CL40'T YOU WANT AND PRESS EITHER PF7/PF8.    '
         DC    CL40'                                        '
         DC    CL40'                                        '
SAMPTC   DC    CL40'TC  <NO OPERANDS>                       '
         DC    CL40'                                        '
TITLTC   DC    CL40'THIS COMMAND - TSO COMMANDER            '
         DC    CL20'                    '
         SPACE 1
HELPVO   DC    CL40'   VTAMOPER (VO) IS A VTAM SECONDARY PRO'
         DC    CL40'GRAM OPERATOR (SPO).  IT IS A SORT OF   '
         DC    CL40'   MINI-NCCF (NETVIEW) FACILITY THAT USE'
         DC    CL40'S SENDCMD/RCVCMD MACROS TO ISSUE VTAM   '
         DC    CL40'   COMMANDS AND RETRIEVE THE OUTPUT TO T'
         DC    CL40'HE SCREEN.  BEING A SPO RATHER THAN A   '
         DC    CL40'   PPO, IT HAPPILY CO-EXISTS WITH NETVIE'
         DC    CL40'W, AND CAN BE VERY HELPFUL FOR ISSUING  '
         DC    CL40'   NETWORK COMMANDS WHEN YOU ARE LOGGED '
         DC    CL40' ONTO TSO.                              '
SAMPVO   DC    CL40'VO  <NO OPERANDS>                       '
         DC    CL40'                                        '
TITLVO   DC    CL40'VTAM OPERATOR - SORT OF A MINI NCCF     '
         DC    CL20'                    '
         EJECT
***********************************************************************
*        INTERRUPTION EXIT ROUTINE --- STAX SERVICE ROUTINE           *
***********************************************************************
         SPACE 2
ATTNRTN  CSECT
         STM   R14,R12,12(R13)         SAVE CALLERS REGISTERS
         BALR  R12,R0                  SET UP BASE REGISTER
         DROP  R12                     DROP OLD BASE REGISTER
         USING *,R12                   SET UP NEW BASE REGISTER
         ST    R13,STAXSAVE+4          SAVEAREA BACKWARD PTR
         LA    R11,STAXSAVE            PICK UP OUR SAVEAREA ADDR
         ST    R11,8(R13)              SAVEAREA FORWARD PTR
         LR    R13,R11                 ESTABLISH NEW S/A PTR
         SPACE 1
         L     R3,STAXSWAD             GET ADDR OF SWITCH ADDR
         MVI   0(R3),C'1'              TURN SWITCH ON
         SPACE 1
         L     R13,STAXSAVE+4          PICK UP OLD S/A ADDR
         LM    R14,R12,12(R13)         RESTORE CALLERS REGISTERS
         LA    R15,0                   SET RC=0
         BR    R14                     RETURN TO CALLER
         SPACE 1
STAXSWAD DC    A(STAXSW)               ADDR OF INTERRUPT SWITCH
STAXSAVE DS    18F                     SAVE AREA FOR INTERRUPT RTN
         EJECT
***********************************************************************
*                     D S E C T S                                     *
***********************************************************************
         SPACE 2
         PRINT ON,NOGEN,NODATA
EXTRAREA DSECT
EACMDNAM DS    CL8                     COMMAND FULL NAME
EASHORT  DS    CL4                     NICKNAME
EAHELPTR DS    A                       POINTER TO HELP BLOCK
EASAMPTR DS    A                       POINTER TO SAMPLE COMMAND BLOCK
EATITPTR DS    A                       POINTER TO TITLE LINE
EXTRLNTH EQU   *-EXTRAREA              LENGTH OF ENTRY
         SPACE 2
SCRNLINE DSECT
         DS    CL1
SCCMDNAM DS    CL8                     COMMAND FULL NAME
         DS    CL2
SCSHORT  DS    CL4                     NICKNAME
         DS    CL3
SCTITLE  DS    CL60                    TITLE (SHORT DESCRIPTION)
         SPACE 2
         END   TSOCMDR
