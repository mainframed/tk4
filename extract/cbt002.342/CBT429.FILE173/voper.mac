VTAMOPER TITLE '** TSO ACF/VTAM OPERATOR COMMAND **'
***********************************************************************
*                                                                     *
*    NAME - VTAMOPER (VO)                                             *
*                                                                     *
*    AUTHOR - TED BESTANI                                             *
*                                                                     *
*    PURPOSE - THIS COMMAND ALLOWS TSO USERS TO ENTER VTAM CONSOLE    *
*              COMMANDS AND RECEIVE RESPONSES IN A FULL SCREEN        *
*              FORMAT.  ALL VTAM COMMANDS ARE AVAILABLE EXCEPT        *
*              HALT AND START.  THIS COMMAND IS ONLY AVAILABLE        *
*              TO TSO USERS WITH OPERATOR AUTHORITY.  IT IS INTENDED  *
*              PRIMARILY FOR SYSTEMS PROGRAMMERS AND OTHERS WHO MUST  *
*              MAINTAIN THE VTAM NETWORK.                             *
*                                                                     *
*    ATTRIBUTES - NON-REUSABLE                                        *
*                                                                     *
*    REQUIREMENTS - VTAMOPER REQUIRES A 3270 DISPLAY STATION WITH AT  *
*                   LEAST 24 LINES.  IT WILL WORK ON 32 LINE TUBES,   *
*                   BUT DOES NOT REQUIRE THEM.  ALSO, AN APPL MUST    *
*                   BE ADDED TO 'SYS1.VTAMLST' WITH SPO AUTHORITY.    *
*                   'TSOINQ   APPL AUTH=(SPO)'                        *
*                                                                     *
*    MACROS USED - TGET, TPUT, OPEN, CLOSE, ACB, SENDCMD, RCVCMD      *
*                                                                     *
***********************************************************************
         EJECT
         PRINT ON,NOGEN,NODATA
VTAMOPER CSECT
         STM   R14,R12,12(R13)         SAVE CALLERS REGISTERS
         BALR  R9,0                    WHERE ARE WE?
         USING *,R9                    TEMPORARY BASE REGISTER
         ST    R13,SAVEAREA+4          SAVE BACKWARD SA PTR
         LA    R8,SAVEAREA             GET SA ADDR
         ST    R8,8(R13)               SAVE FORWARD SA PTR
         LR    R13,R8                  COPY SA ADDR
         LA    R12,4095(R13)           BASE2 = BASE1 + 4095 +
         LA    R12,1(R12)                                     1
         LA    R11,4095(R12)           BASE3 = BASE2 + 4095 +
         LA    R11,1(R11)                                     1
         LA    R10,4095(R11)           BASE4 = BASE3 + 4095 +
         LA    R10,1(R10)                                     1
         USING SAVEAREA,R13,R12,R11,R10    PERMANENT BASE REGISTERS
         DROP  R9                      DROP TEMPORARY BASE REGISTER
         MVC   SAVECPPL(16),0(R1)      SAVE CP PARM LIST
         SPACE 1
         BAL   R9,DRIVER               INVOKE MAIN ROUTINE
         SPACE 1
         L     R13,SAVEAREA+4          GET ADDR OF CALLER'S SA
         LM    R14,R12,12(R13)         RESTORE REGISTERS
         LA    R15,0                   SET RC=0
         BR    R14                     GO HOME....
         SPACE 1
SAVEAREA DS    18F    PROGRAM MAIN SAVE AREA
SAVECPPL DS    0F     ** TSO COMMAND PROCESSOR PARAMETER LIST **
CPPLCBUF DS    A      ADDRESS OF COMMAND INPUT BUFFER
CPPLUPT  DS    A                 USER PROFILE TABLE
CPPLPSCB DS    A                 PROTECTED STEP CONTROL BLOCK
CPPLECT  DS    A                 ENVIRONMENT CONTROL TABLE
         SPACE 1
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
***********************************************************************
*     THIS IS THE HIGHEST LEVEL WORK ROUTINE IN THE PROGRAM.  IT      *
*   DIRECTS THE FLOW OF CONTROL TO THE WORK ROUTINES.                 *
*     THE PROGRAM IS WRITTEN USING BASIC STRUCTURED PROGRAMMING. FLOW *
*   BETWEEN ROUTINES IS ACCOMPLISHED VIA REGISTER 9, WHICH IS ALWAYS  *
*   SAVED UPON ENTRY AND RESTORED BEFORE EXIT.                        *
***********************************************************************
         SPACE 2
DRIVER   DS    0H
         ST    R9,SAVE10
         B     BSAVE10
SAVE10   DC    F'-1'
         DC    CL8'DRIVER  '
BSAVE10  EQU   *
         SPACE 1
         L     R1,CPPLPSCB             ADDR OF THE PSCB
         TM    16(R1),X'80'            DOES USER HAVE OPERATOR AUTH?
         BO    GOWITHIT                YES, BYPASS ERROR MESSAGE
         TPUT  MSG1,L'MSG1             PUT OUT ERROR MESSAGE
         B     EXIT10                  EXIT COMMAND
GOWITHIT EQU   *
         GTTERM PRMSZE=PRMSZE,ALTSZE=ALTSZE,ATTRIB=ATTRIB
         OPEN  APPLACB                 IDENTIFY OURSELVES TO VTAM
         L     R2,=A(ATTNRTN)          GET ADDR OF ATTN ROUTINE
         STAX  (R2)                    SET UP STAX QUEUE ELEMENT
         LTR   R15,R15                 GO OK?
         BZ    GETCMND                 YES, BYPASS ERROR CODE
         TPUT  MSG6,L'MSG6             PUT OUT ERROR MESSAGE
         CLOSE APPLACB                 CLOSE THE ACB
         B     EXIT10                  GO HOME.....
GETCMND  EQU   *
         STFSMODE ON,INITIAL=YES       SET FULL SCREEN MODE ON
GETCMND1 EQU   *
         MVI   SCANSW,C'1'             INIT RC SWITCH=EXPECT RESPONSE
         BAL   R9,TPUTMAIN             GO PAINT MAIN INPUT SCREEN
         LTR   R1,R1                   DID USER TYPE IN COMMAND?
         BZ    DRCLEAR                 NO, CLEAR SCREEN AND GO HOME
         CLC   COMMAND(4),=CL4'END '   DID USER REQUEST END?
         BE    DRCLEAR                 YES, END COMMAND PROCESSOR
         BAL   R9,SENDCMDR             SEND COMMAND TO ACF/VTAM
         BAL   R9,SCANCMDR             SCAN COMMAND FOR VARY/MODIFY
         CLI   SCANSW,C'1'             SCAN FOUND VARY/MODIFY?
         BNE   GETCMND                 NO, DON'T EXPECT RESPONSES
         BAL   R9,RCVRESPR             RECEIVE RESPONSES/BUILD SCREENS
         B     GETCMND1                GO GET NEXT COMMAND
DRCLEAR  EQU   *
         TPUT  CLSCREEN,12,FULLSCR     CLEAR SCREEN
         STLINENO MODE=OFF,LINE=1      SET FULL SCREEN MODE OFF
         CLOSE APPLACB                 DISCONNECT FROM VTAM
         SPACE 1
EXIT10   EQU   *
         L     R9,SAVE10
         BR    R9
         EJECT
***********************************************************************
*     THIS ROUTINE PAINTS THE INPUT SCREEN AND READS A RESPONSE FROM  *
*   THE TERMINAL.  UPON RETURN, REGISTER 1 WILL CONTAIN THE NUMBER    *
*   OF BYTES READ FROM THE TERMINAL.                                  *
***********************************************************************
         SPACE 2
TPUTMAIN DS    0H
         ST    R9,SAVE20
         B     BSAVE20
SAVE20   DC    F'-1'
         DC    CL8'TPUTMAIN'
BSAVE20  EQU   *
         SPACE 1
         LA    R2,ATRLST1B             ADDR OF ATTRIBUTE LIST
         ST    R2,ALISTPTR             STORE IN PTR AREA
         LA    R2,SCREEN1              ADDR OF ATTRIBUTE LIST
         ST    R2,ASCRNPTR             STORE IN PTR AREA
         LA    R2,SC1SUFIX             ADDR OF SUFFIX
         ST    R2,ASUFXPTR             STORE IN PTR AREA
         LA    R2,L'SC1SUFIX           GET LENGTH OF SUFFIX
         STC   R2,ASUFXPTR             STORE IN PTR AREA
         MVC   ASCRNSIZ,=F'1920'       STORE SIZE OF SCREEN
         BAL   R9,FULLSCR              GO DO DEMO SCREEN WORK
         LTR   R1,R1                   DID USER TYPE IN COMMAND?
         BZ    DRCLEAR                 YES, BYPASS CLEAR
         SPACE 1
EXIT20   EQU   *
         L     R9,SAVE20
         BR    R9
         EJECT
***********************************************************************
*  THIS ROUTINE SENDS THE COMMAND ENTERED BY THE USER TO ACF/VTAM     *
***********************************************************************
         SPACE 2
SENDCMDR DS    0H
         ST    R9,SAVE30
         B     BSAVE30
SAVE30   DC    F'-1'
         DC    CL8'SENDCMDR'
BSAVE30  EQU   *
         SPACE 1
*--> MOVE COMMAND TO DISPLAY SCREENS
         MVC   SC1LN04+33(126),COMMAND MOVE INPUT COMMAND
         MVC   SC2LN04+30(126),COMMAND MOVE INPUT COMMAND
*--> DO NOT ALLOW ANY WIERD CHARACTERS TO GO TO ACF/VTAM
         TRT   COMMAND,TRTALLOW        ANY BAD CHARACTERS?
         BC    8,PCBYP1                NO, BYPASS CODE
         MVI   SCANSW,C'0'             SET RC SWITCH=NO RESPONSE
         MVC   SC2LN08(80),=CL80'VTAMOPER - INVALID CHARACTER ENTERED'
         LA    R3,14                   NUMBER OF LINES - 1
         CLI   ALTSZE,ALTMOD3          IS THIS A 3278/9 MOD 3?
         BNE   PCMOD2A1                NO, LEAVE MSG ALONE
         MVC   SC2LN32(80),ENDLINE2    MOVE 'DISPLAY COMPLETE' MSG
PCMOD2A1 EQU   *
         BAL   R9,TPUTOUTP             GO TPUT SCREEN
         B     EXIT30                  RETURN TO DRIVER
PCBYP1   EQU   *
*--> BUILD MESSAGE AND SEND IT TO ACF/VTAM
         LA    R2,CMDHDR               ESTABLISH ADDRESSABILITY TO
         USING ISTDPOHD,R2                 HEADER DSECT
         MVI   POHRSVD,X'00'           CLEAR RESERVED BYTE
         MVI   POHSTAT,POHRREQ+POHGEN  RESPONSE REQUIRED + ORIGIN=SPO
         LH    R1,MSGNUM               GET MESSAGE COUNTER
         LA    R1,1(R1)                BUMP BY 1
         STH   R1,POHID                STORE MESSAGE ID
         STH   R1,MSGNUM               STORE NEW MESSAGE COUNTER
         SENDCMD RPL=SENDRPL,OPTCD=SYN SEND COMMAND TO ACF/VTAM
         STM   R15,R0,SAVE15N0         SAVE THE RETURN REGISTERS
         SHOWCB AM=VTAM,               GET THESE FIELDS FROM THE RPL:  X
               RPL=SENDRPL,                                            X
               AREA=SHOWCB1,                1) 'RTNCD' FIELD           X
               FIELDS=(RTNCD,FDBK2),        2) 'FDBK2' FIELD'          X
               LENGTH=8
         L     R15,SAVE15N0
         LTR   R15,R15                 DID SENDCMD COMPLETE OK?
         BZ    EXIT30                  YES, BYPASS ISK
         CLC   SHOWCB1+4(4),=X'00000071'   COMMAND NOT RECOGNIZED
         BNE   PCKILLIT                NO, GO KILL IT
         MVI   SCANSW,C'0'             SET RC SWITCH=NO RESPONSE
         MVC   SC2LN08(80),=CL80'VTAMOPER - INVALID COMMAND ENTERED'
         LA    R3,14                   NUMBER OF LINES - 1
         MVC   SC2LN24(80),ENDLINE2    MOVE 'DISPLAY COMPLETE' MSG
         CLI   ALTSZE,ALTMOD3          IS THIS A 3278/9 MOD 3?
         BNE   PCMOD2A2                NO, LEAVE MSG ALONE
         MVC   SC2LN32(80),ENDLINE2    MOVE 'DISPLAY COMPLETE' MSG
PCMOD2A2 EQU   *
         BAL   R9,TPUTOUTP             GO TPUT SCREEN
         B     EXIT30                  RETURN TO DRIVER
PCKILLIT EQU   *
         CLOSE APPLACB                 CLOSE THE ACB
         TPUT  CLSCREEN,12,FULLSCR     CLEAR THE SCREEN
         TPUT  MSG2,L'MSG2             SEND THE ERROR MESSAGE
         ISK   0,0                     KILL THE COMMAND PROCESSOR
         SPACE 1
EXIT30   EQU   *
         L     R9,SAVE30
         BR    R9
         EJECT
***********************************************************************
*  THIS ROUTINE SCANS THE COMMAND ENTERED FOR VARY/MODIFY             *
***********************************************************************
         SPACE 2
SCANCMDR DS    0H
         ST    R9,SAVE40
         B     BSAVE40
SAVE40   DC    F'-1'
         DC    CL8'SCANCMDR'
BSAVE40  EQU   *
         SPACE 1
*--> FIND THE FIRST NON-BLANK IN THE COMMAND
         LA    R2,SC2LN04+30           GET ADDR OF COMMAND SENT
         LA    R3,126                  GET MAX LENGTH FOR BCT
SCFINDBL EQU   *
         CLI   0(R2),C' '              IS IT A BLANK
         BNE   SCFNDNBL                NO, GO TO FOUND-NON-BLANK
         LA    R2,1(R2)                BUMP TO NEXT CHAR
         BCT   R3,SCFINDBL             LOOP
         ISK   0,0                     SHOULD NEVER HAPPEN
SCFNDNBL EQU   *
*--> CHECK AND SEE IF COMMAND IS IN THE SEARCH TABLE
         LA    R3,SCTBLBGN             BEGINNING OF TABLE
         LA    R4,SCTBLEND             END OF TABLE
SCSCANTB EQU   *
         CR    R3,R4                   END OF TABLE?
         BE    EXIT40                  YES, EXIT W/O RESETTING RC SW
         XR    R5,R5                   CLEAR EXECUTE REGISTER
         IC    R5,0(R3)                GET FIRST LENGTH
         LR    R6,R5                   SAVE FOR LATER
         SH    R5,=H'2'                SUB, 1 FOR EX, 1 FOR LENGTH
         EX    R5,SCEXCLC              EXECUTE COMPARE
         BE    SCFNDINT                HIT - GO RESET RC SWITCH
         AR    R3,R6                   ADD LENGTH OF ENTRY
         B     SCSCANTB                GO CHECK NEXT ENTRY
SCEXCLC  CLC   1(0,R3),0(R2)           EXECUTED CLC - FIND COMMAND
SCFNDINT EQU   *
         MVI   SCANSW,C'0'             SET RC SW=NO RESPONSE
         MVC   SC2LN08(80),MSG4        SET 'MESSAGE ACCEPTED' MSG
         MVC   SC2LN09(80),MSG5        SET 'USE DISPLAY' MSG
         LA    R3,13                   NUMBER OF LINES - 2
         MVC   SC2LN24(80),ENDLINE2    MOVE 'DISPLAY COMPLETE' MSG
         CLI   ALTSZE,ALTMOD3          IS THIS A 3278/9 MOD 3?
         BNE   SCMOD2A1                NO, LEAVE MSG ALONE
         MVC   SC2LN32(80),ENDLINE2    MOVE 'DISPLAY COMPLETE' MSG
SCMOD2A1 EQU   *
         BAL   R9,TPUTOUTP             GO TPUT SCREEN.........
         SPACE 1
EXIT40   EQU   *
         L     R9,SAVE40
         BR    R9
         SPACE 2
SCTBLBGN EQU   *
         DC    AL1(3),C'V '
         DC    AL1(6),C'VARY '
         DC    AL1(3),C'F '
         DC    AL1(8),C'MODIFY '
SCTBLEND EQU   *
         EJECT
***********************************************************************
*  THIS ROUTINE RECEIVES RESPONSES FROM ACF/VTAM AND DISPLAYS THEM ON *
*  ON THE USERS TSO TERMINAL.                                         *
***********************************************************************
         SPACE 2
RCVRESPR DS    0H
         ST    R9,SAVE50
         B     BSAVE50
SAVE50   DC    F'-1'
         DC    CL8'RCVRESPR'
BSAVE50  EQU   *
         SPACE 1
PCSENDOK EQU   *
         MVI   LASTLNSW,C'0'           RESET END LINE SWITCH
         LA    R2,RECHDR               ESTABLISH ADDRESSABILITY
         LA    R3,15                   NUMBER OF USEABLE LINES/MOD 2
         MVC   ASCRNSIZ,=F'1920'       MOVE SIZE OF SMALL SCREEN
         CLI   ALTSZE,ALTMOD3          IS THIS A 3278/9 MOD 3?
         BNE   PCMOD2A                 NO, LEAVE R3 ALONE
         LA    R3,22                   ADD 8 MORE LINES
         MVC   ASCRNSIZ,=F'2560'       MOVE SIZE OF BIG SCREEN
PCMOD2A  EQU   *
         LA    R4,SC2LN08              START AREA ON SCREEN
PCSCRCHK EQU   *
         CH    R3,=H'2'                ARE LESS THAN TWO LINES LEFT?
         BNL   PCRCVCMD                NO, CONTINUE RECEIVING...
         STM   R2,R7,SAVE2TO7          SAVE REGISTERS
         CLI   ALTSZE,ALTMOD3          IS THIS A 3278/9 MOD 3?
         BNE   PCMOD2B                 NO, LEAVE MESSAGE ON LINE 24
         MVC   SC2LN32(80),ENDLINE1    PUT MSG ON LINE 32 INSTEAD
         B     PCMOD2B1                BRANCH AROUND OTHER MESSAGE
PCMOD2B  EQU   *
         MVC   SC2LN24(80),ENDLINE1    MOVE 'MORE TO COME' MSG
PCMOD2B1 EQU   *
         BAL   R9,TPUTOUTP             GO TPUT THIS SCREEN
         LM    R2,R7,SAVE2TO7          RESTORE REGISTERS
         LA    R4,SC2LN08              RESET START AREA ON SCREEN
         LA    R3,15                   RESET NUMBER OF USEABLE LINES
         CLI   ALTSZE,ALTMOD3          IS THIS A 3278/9 MOD 3?
         BNE   PCRCVCMD                NO, LEAVE R3 ALONE
         LA    R3,22                   ADD 8 MORE LINES
PCRCVCMD EQU   *
         MVI   MESSAGE,C' '            MOVE FIRST BLANK
         MVC   MESSAGE+1(125),MESSAGE  PROPOGATE BLANKS
         RCVCMD RPL=RECVRPL,OPTCD=SYN  RECEIVE MESSAGE FROM ACF/VTAM
         CLI   STAXSW,C'1'             HAVE WE BEEN INTERRUPTED?
         BE    FSINTRPT                YES, BYPASS THIS TPUT
         STM   R15,R0,SAVE15N0         SAVE THE RETURN REGISTERS
         SHOWCB AM=VTAM,               GET THESE FIELDS FROM THE RPL:  X
               RPL=RECVRPL,                  1) LENGTH OF RESPONSE     X
               AREA=SHOWCB2,                 2) 'RTNCD' FIELD          X
               FIELDS=(AREALEN,RTNCD,FDBK2), 3) 'FDBK2' FIELD'         X
               LENGTH=12
         L     R15,SAVE15N0
         LTR   R15,R15                 DID MACRO COMPLETE OK?
         BZ    PCRCVOK                 YES, BRANCH AROUND
         CLOSE APPLACB                 CLOSE THE ACB
         TPUT  CLSCREEN,12,FULLSCR     CLEAR THE SCREEN
         TPUT  MSG3,L'MSG3             SEND THE ERROR MESSAGE
         ISK   0,0                     KILL THE COMMAND PROCESSOR
PCRCVOK  EQU   *
         LA    R1,126                  NUMBER OF BYTES
         LA    R8,MESSAGE+125          POINT TO LAST BYTE
PCBLANK1 EQU   *
         CLI   0(R8),C' '              IS IT A SPACE?
         BNE   PCBLANK2                NO, BREAK OUT OF LOOP
         BCTR  R8,0                    SUBTRACT 1
         BCT   R1,PCBLANK1             LOOP
         B     PCRCVCMD                HUH??? GO GET ANOTHER LINE
PCBLANK2 EQU   *
         ST    R1,SHOWCB2              STORE LENGTH
         CLI   LASTLNSW,C'1'           WAS LAST LINE PROCESSED?
         BE    PCRCVEND                YES, END OF SCREEN
         TM    POHSTAT,POHEND          END LINE?
         BNO   PCRCVCON                NO, CONTINUE
         CLI   POHSTAT,X'81'           ANY DATA?
         BE    PCRCVEND                NO DATA, END OF SCREEN
         MVI   LASTLNSW,C'1'           SET LAST LINE PROCESSED
PCRCVCON EQU   *
         L     R5,SHOWCB2              GET THE LENGTH OF THE MESSAGE
         LA    R7,MESSAGE              GET ADDRESS OF THE MESSAGE
         CH    R5,=H'80'               IS IT BIGGER THAN 80?
         BNH   PCONEMVC                NO, ONLY ONE MOVE REQUIRED
         LR    R6,R5                   COPY LENGTH
         SH    R6,=H'80'               SUBTRACT FIRST 80
         BCTR  R6,0                    SUBTRACT ONE FOR EX INSTRUCTION
         MVI   0(R4),C' '              CLEAR FIRST BYTE
         MVC   1(79,R4),0(R4)          PROPOGATE SPACES
         EX    R6,PCEXMVC              EXECUTE THE FIRST MVC
         BCTR  R3,0                    SUBTRACT ONE FROM LINE COUNTER
         LA    R4,80(R4)               POINT TO NEXT LINE
         LA    R7,80(R7)               BUMP TO NEXT LINE FOR MVC
         LR    R5,R6                   SET LENGTH FOR SECOND MVC
PCONEMVC EQU   *
         BCTR  R5,0                    SUBTRACT ONE FOR EX INSTRUCTION
         MVI   0(R4),C' '              CLEAR FIRST BYTE
         MVC   1(79,R4),0(R4)          PROPOGATE SPACES
         EX    R5,PCEXMVC              EXECUTE THE SECOND/ONLY MVC
         BCTR  R3,0                    SUBTRACT ONE FROM LINE COUNTER
         LA    R4,80(R4)               POINT TO NEXT LINE
         TM    POHSTAT,POHEND          WAS THAT THE LAST RESPONSE?
         BO    PCRCVEND                YES, NO MOVE SCROLL NEEDED?
         B     PCSCRCHK                GO GET NEXT RESPONSE
PCEXMVC  MVC   0(0,R4),0(R7)           EXECUTED MOVE
PCRCVEND EQU   *
         CLI   ALTSZE,ALTMOD3          IS THIS A 3278/9 MOD 3?
         BNE   PCMOD2C                 NO, LEAVE MESSAGE ON LINE 24
         MVC   SC2LN32(80),ENDLINE2    PUT MSG ON LINE 32 INSTEAD
         B     PCMOD2C1                BRANCH AROUND OTHER MSG
PCMOD2C  EQU   *
         MVC   SC2LN24(80),ENDLINE2    MOVE 'DISPLAY COMPLETE' MSG
PCMOD2C1 EQU   *
         BAL   R9,TPUTOUTP             GO TPUT SCREEN......
         SPACE 1
EXIT50   EQU   *
         L     R9,SAVE50
         BR    R9
         EJECT
***********************************************************************
*     THIS ROUTINE BLANKS OUT THE SCROLL LINES NOT USED IN THE        *
*   RCVRESPR ROUTINE, AND CALLS FULLSCR TO TPUT THE SCREEN.           *
***********************************************************************
         SPACE 2
TPUTOUTP DS    0H
         ST    R9,SAVE60
         B     BSAVE60
SAVE60   DC    F'-1'
         DC    CL8'TPUTOUTP'
BSAVE60  EQU   *
         SPACE 1
*--> CLEAR UNUSED SCROLL LINES ON DISPLAY SCREEN
         LA    R3,1(R3)                BUMP RESIDUAL COUNT BY 1
         LA    R2,SC2LN23              GET ADDR OF LAST SCROLL LINE
         CLI   ALTSZE,ALTMOD3          IS THIS A 3278/9 MOD 3?
         BNE   TOLOOP01                NO, LEAVE IT AT 23
         LA    R2,SC2LN31              GET ADDR OF LAST SCROLL LINE
TOLOOP01 EQU   *
         MVI   0(R2),C' '              CLEAR FIRST BYTE TO SPACE
         MVC   1(79,R2),0(R2)          CLEAR REST OF THE LINE
         SH    R2,=H'80'               BUMP UPWARDS ONE LINE
         BCT   R3,TOLOOP01             LOOP THROUGH CLEAR
*--> PREPARE FOR CALLING THE FULLSCR ROUTINE
         LA    R2,ATRLST2B             ADDR OF ATTRIBUTE LIST
         ST    R2,ALISTPTR             STORE IN PTR AREA
         LA    R2,SCREEN2              ADDR OF ATTRIBUTE LIST
         ST    R2,ASCRNPTR             STORE IN PTR AREA
         LA    R2,SC2SUFIX             ADDR OF SUFFIX
         ST    R2,ASUFXPTR             STORE IN PTR AREA
         LA    R2,L'SC2SUFIX           GET LENGTH OF SUFFIX
         STC   R2,ASUFXPTR             STORE IN PTR AREA
         BAL   R9,FULLSCR              FORMAT/WRITE OUTPUT SCREEN
         SPACE 1
EXIT60   EQU   *
         L     R9,SAVE60
         BR    R9
         EJECT
***********************************************************************
*   THIS ROUTINE BUILDS THE FINAL SCREEN, DOES A FULL SCREEN TPUT,    *
* A DUMMY TGET, AND CLEARS THE SCREEN.  THE MAJOR PART OF THE CODE    *
* IS THE BUILDING OF THE FINAL SCREEN.  THE ROUTINE HAS THREE INPUTS. *
* 'ASCRNPTR' POINTS TO A STANDARD 1920 BYTE SCREEN IMAGE WITH NO      *
* ATTRIBUTE CHARACTERS.  'ALISTPTR' CONTAINS THE ADDRESS OF THE       *
* ATTRIBUTE LIST THAT WE WILL USE THIS TIME AROUND.  'SCPREFIX' IS    *
* THE CONTROL STREAM WHICH IS TO BE PREFIXED ONTO THE FINAL SCREEN.   *
*   USING THE THREE INPUTS, A TPUT'ABLE FINAL SCREEN IS BUILT IN THE  *
* 'SCRBLD' AREA AT THE END OF THE PROGRAM.                            *
***********************************************************************
         SPACE 1
FULLSCR  DS    0H
         ST    R9,SAVE70
         B     BSAVE70
SAVE70   DC    F'-1'
         DC    CL8'FULLSCR '
BSAVE70  EQU   *
         SPACE 1
*--> INIT REGISTERS
         L     R2,ALISTPTR             GET PTR TO ATTRIBUTE LIST
         L     R3,0(R2)                GET END OF ATTRIBUTE LIST
         LA    R2,4(R2)                BUMP PAST END ADDRESS
         LA    R4,SCRBLD               GET ADDR OF BUILD AREA
         XR    R5,R5                   INIT LENGTH REGISTER
         L     R6,ASCRNPTR             GET ADDR OF INPUT SCREEN
         LR    R7,R6                   GET BEGINNING
         A     R7,ASCRNSIZ             ADD SIZE OF SCREEN TO GET END
*--> INSERT PREFIX
         MVC   0(L'SCPREFIX,R4),SCPREFIX   MOVE PREFIX
         LA    R4,L'SCPREFIX(R4)       BUMP PTR
         LA    R5,L'SCPREFIX(R5)       ADD LENGTH
*--> FLAG ATTRIBUTE BYTES FIRST
FSLOOP10 EQU   *
         CR    R2,R3                   END OF ATTRIBUTE LIST?
         BE    FSLOOP20                YES, END OF FLAGGING
         L     R8,0(R2)                GET ADDR OF NEXT ATTR BYTE
         MVI   0(R8),X'1D'             FLAG BYTE WITH A X'FF'
         LA    R2,4(R2)                GET NEXT ATTRIBUTE ADDR
         B     FSLOOP10                GO TRY NEXT
FSLOOP20 EQU   *
         L     R2,ALISTPTR             GET PTR TO ATTRIBUTE LIST
         LA    R2,4(R2)                BUMP PAST END ADDRESS
FSLOOP30 EQU   *
         CR    R6,R7                   INPUT SCREEN EXHAUSTED?
         BE    FSLOOP50                GO TPUT
         CLI   0(R6),X'1D'             IS THIS A FLAG?
         BE    FSLOOP40                YES, GO PROCESS
         MVC   0(1,R4),0(R6)           NO, MOVE THIS BYTE TO OUTPUT
         LA    R4,1(R4)                BUMP PTR TO OUTPUT SCREEN
         LA    R5,1(R5)                BUMP LENGTH OF OUTPUT
         LA    R6,1(R6)                BUMP TO NEXT INPUT BYTE
         B     FSLOOP30                GO TRY NEXT BYTE
FSLOOP40 EQU   *
         MVC   0(1,R4),0(R6)           MOVE FLAG TO OUTPUT
         MVC   1(1,R4),0(R2)           MOVE ATTR TO OUTPUT
         LA    R2,4(R2)                BUMP TO NEXT ATTR
         LA    R4,2(R4)                BUMP TWO BYTES IN OUTPUT
         LA    R5,2(R5)                BUMP LENGTH BY TWO
         LA    R6,1(R6)                BUMP TO NEXT INPUT BYTE
         B     FSLOOP30                GO TRY NEXT BYTE
FSEXMVC  MVC   0(0,R4),0(R8)           MOVE SUFFIX TO OUTPUT
FSLOOP50 EQU   *
         XR    R1,R1                   CLEAR REGISTER
         IC    R1,ASUFXPTR             GET LENGTH TO MOVE
         BCTR  R1,0                    SUBTRACT ONE FOR MVC
         L     R8,ASUFXPTR             ADDR OF SUFFIX
         EX    R1,FSEXMVC              MOVE THE SUFFIX TO OUTPUT
         AR    R4,R1                   BUMP LENGTH OF SUFFIX
         AR    R5,R1                   BUMP LENGTH OF SUFFIX
         LA    R4,1(R4)                RESTORE 1 BYTE FROM EX
         LA    R5,1(R5)                RESTORE 1 BYTE FROM EX
*--> TGET'S AND TPUT'S
         CLI   STAXSW,C'1'             HAVE WE BEEN INTERRUPTED?
         BE    FSINTRPT                YES, BYPASS THIS TPUT
         TPUT  SCRBLD,(R5),FULLSCR     PAINT OUTPUT SCREEN
         TGET  COMMAND,126             GET DUMMY INPUT
         OC    COMMAND,=CL126' '       SET TO UPPERCASE
         CLI   STAXSW,C'1'             HAVE WE BEEN INTERRUPTED?
         BNE   EXIT70                  NO, CONTINUE
FSINTRPT EQU   *
         TPUT  CLSCREEN,12,FULLSCR     CLEAR SCREEN
         TPUT  MSG7,L'MSG7             SEND INTERRUPTED MESSAGE
         CLOSE APPLACB                 CLOSE THE ACB NORMALLY
         LTR   R15,R15                 DID CLOSE GO OK?
         BZ    FSCLOSOK                YES, BYPASS
         CLOSE APPLACB                 DISCARD UNRECEIVED MESSAGES
FSCLOSOK EQU   *
         L     R13,SAVEAREA+4          GET ADDR OF SAVEAREA
         LM    R14,R12,12(R13)         RESTORE CALLERS REGISTERS
         LA    R15,4                   SET RC=4
         BR    R14                     RETURN TO CALLER
         SPACE 1
EXIT70   EQU   *
         L     R9,SAVE70
         BR    R9
         EJECT
***********************************************************************
*           W O R K I N G   S T O R A G E   S E C T I O N             *
***********************************************************************
         SPACE 2
MSG1     DC    CL36'COMMAND REQUIRES OPERATOR AUTHORITY'
MSG2     DC    CL20'SENDCMD MACRO FAILED'
MSG3     DC    CL19'RCVCMD MACRO FAILED'
MSG4     DC    CL40'THE COMMAND YOU ENTERED HAS BEEN PASSED '
         DC    CL40'TO ACF/VTAM                             '
MSG5     DC    CL40'USE THE DISPLAY COMMAND TO FIND OUT THE '
         DC    CL40'RESULT                                  '
MSG6     DC    CL17'STAX MACRO FAILED'
MSG7     DC    CL33'VTAM OPERATOR COMMAND INTERRUPTED'
ENDLINE1 DC    CL40'--------------------- MORE TO COME - PRE'
         DC    CL40'SS ENTER FOR NEXT PAGE -----------------'
ENDLINE2 DC    CL40'------------------ DISPLAY COMPLETE - PR'
         DC    CL40'ESS ENTER TO CONTINUE ------------------'
MSGNUM   DC    H'0'                    SENDMSG MESSAGE NUMBER
SAVE15N0 DC    2F'0'                   SAVE AREA FOR REGS 15 AND 0
SAVE2TO7 DC    6F'0'                   SAVE AREA FOR REGS 2 THRU 7
SHOWCB1  DC    2F'0'                   RETURN AREA FROM SHOWCB MACRO
SHOWCB2  DC    3F'0'                   RETURN AREA FROM SHOWCB MACRO
PRMSZE   DS    CL2                     PRIMARY SCREEN SIZE
ALTSZE   DS    CL2                     SECONDARY SCREEN SIZE
ALTMOD3  EQU   X'20'                   TERMINAL = 3278/9 MOD 3
ATTRIB   DS    F                       TERMINAL ATTRIBUTES
LASTLNSW DC    CL1'0'                  LAST LINE PROCESSED SWITCH
SCANSW   DC    CL1'1'                  RESPONSE EXPECTED, YES/NO
STAXSW   DC    CL1'0'                  INTERRUPTED, YES/NO
         SPACE 1
TRTALLOW DC    256XL1'FF'              TRT TABLE/ALLOWABLE CHARS
         ORG   TRTALLOW+C'A'           ALLOW A-I
         DC    9XL1'00'                  CLEAR CHARS
         ORG   TRTALLOW+C'J'           ALLOW J-R
         DC    9XL1'00'                  CLEAR CHARS
         ORG   TRTALLOW+C'S'           ALLOW S-Z
         DC    8XL1'00'                  CLEAR CHARS
         ORG   TRTALLOW+C'0'           ALLOW 0-9
         DC    10XL1'00'                 CLEAR CHARS
         ORG   TRTALLOW+C'='           ALLOW =
         DC    XL1'00'                   CLEAR CHARS
         ORG   TRTALLOW+C','           ALLOW ,
         DC    XL1'00'                   CLEAR CHARS
         ORG   TRTALLOW+C' '           ALLOW BLANK
         DC    XL1'00'                   CLEAR CHARS
         ORG
         SPACE 2
         LTORG                         LITERAL POOL
         SPACE 2
*--> ACF/VTAM CONTROL BLOCKS AND DATA AREAS
APPLID   DC    AL1(L'APPLNAME)         LENGTH OF APPLID
APPLNAME DC    CL6'TSOINQ'             NAME OF APPLID
APPLACB  ACB   AM=VTAM,APPLID=APPLID,MACRF=NLOGON
SENDRPL  RPL   AM=VTAM,ACB=APPLACB,AREA=SENDMSG,RECLEN=130,OPTCD=NQ
RECVRPL  RPL   AM=VTAM,ACB=APPLACB,AREA=RECVMSG,AREALEN=130,OPTCD=NQ
         SPACE 1
SENDMSG  DS    0CL130                  MESSAGE AREA TO ACF/VTAM
CMDHDR   DC    XL4'00'                 HEADER: SEE DSECT ISTDPOHD
COMMAND  DC    CL126' '                COMMAND TO BE PASSED
         SPACE 1
RECVMSG  DS    0CL130                  MESSAGE AREA FROM ACF/VTAM
RECHDR   DC    XL4'00'                 HEADER: SEE DSECT ISTDPOHD
MESSAGE  DC    CL126' '                MESSAGE TO BE RECEIVED
         EJECT
*--> THE FOLLOWING ARE USED BY THE 'FULLSCR' ROUTINE
CLSCREEN DC    XL12'C11140403C4040001140C113'
SCPREFIX DC    XL11'C11140403C404000114040'
         SPACE 1
ALISTPTR DC    A(0)                    PTR TO ACTIVE ATTR LIST
ASCRNPTR DC    A(0)                    PTR TO ACTIVE INPUT SCREEN
ASCRNSIZ DC    F'0'                    SIZE OF THE SCREEN INPUT
ASUFXPTR DC    A(0)                    LENGTH/PTR TO SUFFIX
         SPACE 1
ATRLST1B DS    0F
         DC    A(ATRLST1E)             END OF THIS LIST
         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE
         DC    AL3(SC1LN01+00)         FIRST BYTE OF SCREEN
         DC    AL1(ATR@UH)             UNPROT-HIGH  / RED
         DC    AL3(SC1LN04+32)         JUST BEFORE INPUT COMMAND
         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE
         DC    AL3(SC1LN05+79)         END OF INPUT COMMAND
ATRLST1E EQU   *
         SPACE 1
ATRLST2B DS    0F
         DC    A(ATRLST2E)             END OF THIS LIST
         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE
         DC    AL3(SC2LN01+00)         FIRST BYTE OF SCREEN
         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE
         DC    AL3(SC2LN04+29)         JUST BEFORE INPUT COMMAND
         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE
         DC    AL3(SC2LN05+79)         END OF INPUT COMMAND
ATRLST2E EQU   *
         SPACE 1
ATR@PL   EQU   X'E4'                   PROTECT-LOW  / BLUE
ATR@PH   EQU   X'E8'                   PROTECT-HIGH / WHITE
ATR@UL   EQU   X'C4'                   UNPROT-LOW   / GREEN
ATR@UH   EQU   X'C8'                   UNPROT-HIGH  / RED
         EJECT
SCREEN1  EQU   *
SC1LN01  DC    CL40'    T S O   A C F / V T A M   C O N S O '
         DC    CL40'L E   O P E R A T O R   C O M M A N D   '
         DC    CL40'----------------------------------------'
         DC    CL40'----------------------------------------'
         DC    CL40'                                        '
         DC    CL40'                                        '
SC1LN04  DC    CL40'ENTER VTAM CONSOLE COMMAND ====>        '
         DC    CL40'                                        '
SC1LN05  DC    CL40'                                        '
         DC    CL40'                                        '
SC1LN06  DC    CL40'----------------------------------------'
         DC    CL40'----------------------------------------'
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'EXAMPLES OF ACF/VTAM CONSOLE COMMANDS:  '
         DC    CL40'                                        '
         DC    CL40'D NET,ID=NODENAME,E                     '
         DC    CL40'V NET,ACT,ID=NODENAME                   '
         DC    CL40'D NET,TERMS                             '
         DC    CL40'V NET,INACT,{I,F,OMIT},ID=NODENAME      '
         DC    CL40'D NET,CLSTRS                            '
         DC    CL40'V NET,TERM,{P,S}LU=NODENAME,TYPE=FORCE  '
         DC    CL40'D NET,LINES                             '
         DC    CL40'                                        '
         DC    CL40'D NET,MAJNODES                          '
         DC    CL40'                                        '
         DC    CL40'D NET,BFRUSE                            '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'F NET,(NO)TRACE,TYPE={IO,BUF,LINE},ID=NO'
         DC    CL40'DENAME                                  '
         DC    CL40'F NET,DUMP,ID=NCPNAME,DYNA              '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'****************************************'
         DC    CL40'****************************************'
         DC    CL40'* IF THIS COMMAND TAKES MORE THAN 10 SEC'
         DC    CL40'ONDS TO RESPOND, PLEASE PRESS ATTN!!!! *'
         DC    CL40'****************************************'
         DC    CL40'****************************************'
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
SC1LN24  DC    CL40'--------------------- PRESS ENTER TO PRO'
         DC    CL40'CESS COMMAND ---------------------------'
SC1SUFIX DC    XL11'11C57B3CC64D0011C4D113'
         EJECT
SCREEN2  EQU   *
SC2LN01  DC    CL40'    T S O   A C F / V T A M   C O N S O '
         DC    CL40'L E   O P E R A T O R   C O M M A N D   '
         DC    CL40'----------------------------------------'
         DC    CL40'----------------------------------------'
         DC    CL40'                                        '
         DC    CL40'                                        '
SC2LN04  DC    CL40'YOU ENTERED THE COMMAND ====>           '
         DC    CL40'                                        '
SC2LN05  DC    CL40'                                        '
         DC    CL40'                                        '
SC2LN06  DC    CL40'----------------------------------------'
         DC    CL40'----------------------------------------'
         DC    CL40'                                        '
         DC    CL40'                                        '
SC2LN08  DC    CL40'                                        '
         DC    CL40'                                        '
SC2LN09  DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
SC2LN23  DC    CL40'                                        '
         DC    CL40'                                        '
SC2LN24  DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
SC2LN31  DC    CL40'                                        '
         DC    CL40'                                        '
SC2LN32  DC    CL40'                                        '
         DC    CL40'                                        '
SC2SUFIX DC    XL4'11C44E13'
         SPACE 1
SCRBLD   DS    CL4096                  BUILD AREA FOR FINAL SCREEN
         EJECT
***********************************************************************
*  INTERRUPTION EXIT ROUTINE ---- STAX SERVICE ROUTINE                *
***********************************************************************
         SPACE 2
ATTNRTN  CSECT
         STM   R14,R12,12(R13)         SAVE CALLERS REGISTERS
         BALR  R12,R0                  SET UP BASE REGISTER
         DROP  R12                     DROP OLD BASE REGISTER
         USING *,R12                   SET UP NEW BASE REGISTER
         ST    R13,STAXSAVE+4          SAVEAREA BACKWARD PTR
         LA    R11,STAXSAVE            PICK UP OUR SAVEAREA ADDR
         ST    R11,8(R13)              SAVEAREA FORWARD PTR
         LR    R13,R11                 ESTABLISH NEW S/A PTR
         SPACE 1
         L     R3,STAXSWAD             GET ADDR OF SWITCH ADDR
         MVI   0(R3),C'1'              TURN SWITCH ON
         SPACE 1
         L     R13,STAXSAVE+4          PICK UP OLD S/A ADDR
         LM    R14,R12,12(R13)         RESTORE CALLERS REGISTERS
         LA    R15,0                   SET RC=0
         BR    R14                     RETURN TO CALLER
         SPACE 1
STAXSWAD DC    A(STAXSW)               ADDR OF INTERRUPT SWITCH
STAXSAVE DS    18F                     SAVE AREA FOR INTERRUPT RTN
         EJECT
***********************************************************************
*                     D S E C T S                                     *
***********************************************************************
         SPACE 2
         PRINT ON,GEN,NODATA
         SPACE 2
         ISTDPOHD
         SPACE 2
         END   VTAMOPER
