MONJOB TITLE '** MONITOR JOB EXECUTION **'
***********************************************************************
*                                                                     *
*    NAME - MONJOB                                                    *
*                                                                     *
*    AUTHOR - TED BESTANI                                             *
*                                                                     *
*    PURPOSE - THIS IS A FULL-SCREEN COMMAND PROCESSOR THAT IS ONLY   *
*              INTENDED TO BE USED BY SYSTEMS PROGRAMMERS.  IT CHECKS *
*              FOR OPERATOR AUTHORITY.  IT DISPLAYS THE STATUS OF A   *
*              JOB THAT IS RUNNING, AND DISPLAYS TIME USED.           *
*                                                                     *
*    ATTRIBUTES - NON-REUSABLE                                        *
*                                                                     *
*    REQUIREMENTS - MONJOB REQUIRES A 3270 DISPLAY STATION WITH AT    *
*                   LEAST 24 LINES.  IT WILL WORK ON LARGER TUBES,    *
*                   BUT DOES NOT REQUIRE THEM.                        *
*                                                                     *
*    MACROS USED - TGET, TPUT                                         *
*                                                                     *
***********************************************************************
         EJECT
         PRINT ON,NOGEN,NODATA
MONJOB CSECT
         STM   R14,R12,12(R13)         SAVE CALLERS REGISTERS
         BALR  R9,0                    WHERE ARE WE?
         USING *,R9                    TEMPORARY BASE REGISTER
         ST    R13,SAVEAREA+4          SAVE BACKWARD SA PTR
         LA    R8,SAVEAREA             GET SA ADDR
         ST    R8,8(R13)               SAVE FORWARD SA PTR
         LR    R13,R8                  COPY SA ADDR
         LA    R12,4095(R13)           BASE2 = BASE1 + 4095 +
         LA    R12,1(R12)                                     1
         LA    R11,4095(R12)           BASE3 = BASE2 + 4095 +
         LA    R11,1(R11)                                     1
         LA    R10,4095(R11)           BASE4 = BASE3 + 4095 +
         LA    R10,1(R10)                                     1
         USING SAVEAREA,R13,R12,R11,R10    PERMANENT BASE REGISTERS
         USING SCRNLINE,R2             ESTABLISH ADDRESSABILITY
         DROP  R9                      DROP TEMPORARY BASE REGISTER
         MVC   SAVECPPL(16),0(R1)      SAVE CP PARM LIST
         SPACE 1
         BAL   R9,DRIVER               INVOKE MAIN ROUTINE
         SPACE 1
         L     R13,SAVEAREA+4          GET ADDR OF CALLER'S SA
         LM    R14,R12,12(R13)         RESTORE REGISTERS
         LA    R15,0                   SET RC=0
         BR    R14                     GO HOME....
         SPACE 1
SAVEAREA DS    18F    PROGRAM MAIN SAVE AREA
SAVECPPL DS    0F     ** TSO COMMAND PROCESSOR PARAMETER LIST **
CPPLCBUF DS    A      ADDRESS OF COMMAND INPUT BUFFER
CPPLUPT  DS    A                 USER PROFILE TABLE
CPPLPSCB DS    A                 PROTECTED STEP CONTROL BLOCK
CPPLECT  DS    A                 ENVIRONMENT CONTROL TABLE
         SPACE 1
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
***********************************************************************
*     THIS IS THE HIGHEST LEVEL WORK ROUTINE IN THE PROGRAM.  IT      *
*   DIRECTS THE FLOW OF CONTROL TO THE WORK ROUTINES.                 *
*     THE PROGRAM IS WRITTEN USING BASIC STRUCTURED PROGRAMMING. FLOW *
*   BETWEEN ROUTINES IS ACCOMPLISHED VIA REGISTER 9, WHICH IS ALWAYS  *
*   SAVED UPON ENTRY AND RESTORED BEFORE EXIT.                        *
***********************************************************************
         SPACE 2
DRIVER   DS    0H
         ST    R9,SAVE10
         B     BSAVE10
SAVE10   DC    F'-1'
         DC    CL8'DRIVER  '
BSAVE10  EQU   *
         SPACE 1
         L     R1,CPPLPSCB             ADDR OF THE PSCB
         TM    16(R1),X'80'            DOES USER HAVE OPERATOR AUTH?
         BO    GOWITHIT                YES, BYPASS ERROR MESSAGE
         TPUT  MSG1,L'MSG1             PUT OUT ERROR MESSAGE
         B     EXIT10                  EXIT COMMAND
GOWITHIT EQU   *
         GTTERM PRMSZE=PRMSZE,ALTSZE=ALTSZE,ATTRIB=ATTRIB
         L     R2,=A(ATTNRTN)          GET ADDR OF ATTN ROUTINE
         STAX  (R2)                    SET UP STAX QUEUE ELEMENT
         LTR   R15,R15                 GO OK?
         BZ    DRBYPERR                YES, BYPASS ERROR CODE
         TPUT  MSG2,L'MSG2             PUT OUT ERROR MESSAGE
         B     EXIT10                  GO HOME.....
DRBYPERR EQU   *
         BAL   R9,PARSEINP             PARSE INPUT COMMAND
         STFSMODE ON,INITIAL=YES       SET FULL SCREEN MODE ON
DRLOOPMN EQU   *
         BAL   R9,TPUTMAIN             GO PAINT MAIN INPUT SCREEN
         CLI   STAXSW,C'1'             HAVE WE BEEN INTERRUPTED?
         BE    DRCLEAR                 YES, GET OUTTA HERE
         BAL   R9,MONITOR              HERE'S THE TIMER CODE
DRCLEAR  EQU   *
         TPUT  CLSCREEN,12,FULLSCR     CLEAR SCREEN
         STLINENO MODE=OFF,LINE=1      SET FULL SCREEN MODE OFF
         SPACE 1
EXIT10   EQU   *
         L     R9,SAVE10
         BR    R9
         EJECT
***********************************************************************
*   THIS ROUTINE PARSES THE COMMAND INPUT                             *
***********************************************************************
         SPACE 2
PARSEINP DS    0H
         ST    R9,SAVE15
         B     BSAVE15
SAVE15   DC    F'-1'
         DC    CL8'PARSEINP'
BSAVE15  EQU   *
         SPACE 1
*--> GET THE INPUT PARAMETERS
         L     R2,CPPLCBUF             GET CBUF PTR
         CLC   0(2,R2),=H'13'          IS IT AT LEAST 13?
         BL    GETINTVL                NO, GO ASK FOR IT
         LA    R3,7(R2)                EARLIEST POINT TO START LOOKING
         LH    R5,0(R2)                COPY LENGTH
         SH    R5,=H'8'                PREFIX + 1 FOR EX
         EX    R5,PIEXOC               RAISE TO UPPER-CASE
PIEXOC   OC    0(0,R3),=CL25' '        RAISE TO UPPER-CASE
         LH    R4,0(R2)                PICK UP COMPLETE LENGTH
         SH    R4,=H'7'                KNOCK OFF PREFIX
PIFNDFLD EQU   *
         CLC   0(4,R3),=CL4'JOB('      FIND THE JOB QUALIFIER
         BE    PIFOUNDJ                FOUND, GO PROCESS
         CLC   0(4,R3),=CL4'INT('      FIND THE INTERVAL DESIGNATOR
         BE    PIFOUNDI                FOUND, GO PROCESS
         LA    R3,1(R3)                BUMP
         BCT   R4,PIFNDFLD             ITERATE
         B     GETINTVL                GO ASK FOR INFORMATION
PIFOUNDJ EQU   *
         LA    R3,4(R3)                BUMP TO START OF JOBNAME
         SH    R4,=H'4'                SUBTRACT FOR PREFIX
         LR    R5,R3                   SAVE JOBNAME START ADDRESS
PIFNDPR1 EQU   *
         CLI   0(R3),C')'              REACHED THE END YET?
         BE    PIPR1FND                YEP, GO PROCESS
         LA    R3,1(R3)                BUMP
         BCT   R4,PIFNDPR1             ITERATE
         B     GETINTVL                GO ASK FOR INFORMATION
PIPR1FND EQU   *
         LR    R6,R3                   COPY ENDING ADDRESS
         SR    R6,R5                   LENGTH OF JOBNAME
         BCTR  R6,0                    SUBTRACT 1 FOR EX
         EX    R6,PIEXMVC1             MOVE THE JOBNAME
         B     PIFNDFLD                GO TRY FOR THE INTERVAL
PIEXMVC1 MVC   JOBNAME(1),0(R5)        MOVE THE JOBNAME
PIFOUNDI EQU   *
         LA    R3,4(R3)                BUMP TO START OF INTERVAL
         SH    R4,=H'4'                SUBTRACT FOR PREFIX
         LR    R5,R3                   SAVE INTERVAL START ADDRESS
PIFNDPR2 EQU   *
         CLI   0(R3),C')'              REACHED THE END YET?
         BE    PIPR2FND                YEP, GO PROCESS
         LA    R3,1(R3)                BUMP
         BCT   R4,PIFNDPR2             ITERATE
         B     GETINTVL                GO ASK FOR INFORMATION
PIPR2FND EQU   *
         LR    R6,R3                   COPY ENDING ADDRESS
         SR    R6,R5                   LENGTH OF INTERVAL
         BCTR  R6,0                    SUBTRACT 1 FOR EX
         EX    R6,PIEXTRT1             IS IT NUMERIC?
         BC    7,GETINTVL              NO, GO ASK FOR IT AGAIN
         AH    R6,=AL2(7*16)           SET UP LEFT LENGTH NIBBLE
         EX    R6,PIEXPACK             MOVE THE INTERVAL
         MVI   INTVFLAG,C'1'           INDICATE THAT WE GOT THE INTVL
         B     PIFNDFLD                GO TRY FOR THE JOBNAME
PIEXTRT1 TRT   0(0,R5),TRTALLOW        EXECUTED TRT
PIEXPACK PACK  WORKDBLW(0),0(0,R5)     MOVE THE INTERVAL
GETINTVL EQU   *
         CLI   INTVFLAG,C'1'           DID WE GET AN INTERVAL?
         BE    GIBYPACK                YES, BYPASS
         ZAP   WORKDBLW,=PL2'05'       ESTABLISH DEFAULT INTERVAL
GIBYPACK EQU   *
         ED    SC1INTVL,WORKDBLW+6     PLACE INTO SCREEN TITLE
         CVB   R1,WORKDBLW             CONVERT SECONDS TO HEX
         MH    R1,=H'100'              MULTIPLY BY HUNDREDTHS
         ST    R1,INTERVAL             PUT IT IN IT'S PLACE
         B     GETJOBNM                BRANCH AROUND EXECUTED PACK
GIEXPACK PACK  WORKDBLW(8),INTERVAL(0) EXECUTED PACK
GIEXTRT  TRT   INTERVAL(0),TRTALLOW    EXECUTED TRT
GETJOBNM EQU   *
         CLI   JOBNAME,C' '            IS THE FIRST CHARACTER BLANK?
         BNE   BYPTGETS                NO, BYPASS REQUEST
         TPUT  MSG5,L'MSG5             ASK FOR JOBNAME
         TGET  JOBNAME,8               READ IT
         LTR   R1,R1                   IS IT ZERO?
         BZ    GETJOBNM                YES, GO ASK FOR IT AGAIN
         CH    R1,=H'8'                IS IT TOO BIG?
         BH    GETJOBNM                YES, GO ASK FOR IT AGAIN
BYPTGETS EQU   *
         OC    JOBNAME,=CL8' '         CHANGE IT TO UPPER CASE
         SPACE 1
EXIT15   EQU   *
         L     R9,SAVE15
         BR    R9
         EJECT
***********************************************************************
*     THIS ROUTINE SEARCHES TO CSCB CHAIN FOR THE JOB REQUIRED, AND   *
*   IF IT FINDS IT, PUTS A MESSAGE OUT TO THE USERS SCREEN.  IT THEN  *
*   GOES INTO A TIMER WAIT BASED ON THE USERS INTERVAL REQUEST.       *
***********************************************************************
         SPACE 2
MONITOR  DS    0H
         ST    R9,SAVE18
         B     BSAVE18
SAVE18   DC    F'-1'
         DC    CL8'MONITOR '
BSAVE18  EQU   *
         SPACE 1
MONLOOP0 EQU   *
         LA    R3,18                   GET NUMBER OF LINES/SCREEN
         ZAP   LINENUM,=PL1'5'         STARTING LINE NUMBER
MONLOOP1 EQU   *
         L     R2,16                   GET CVT ADDRESS
         L     R2,148(R2)              GET MSER ADDRESS
         L     R2,0(R2)                FIRST CSCB ON CHAIN
MONLOOP2 EQU   *
         LTR   R2,R2                   END OF CSCB CHAIN?
         BZ    ENDOFJOB                YES, JOBNAME NOT FOUND
         CLC   JOBNAME,8(R2)           IS THIS THE JOB?
         BE    MONLOOP3                YES, GO PUT OUT MESSAGE
         L     R2,0(R2)                GET NEXT CSCB ADDRESS
         B     MONLOOP2                GO TRY NEXT
MONLOOP3 EQU   *
         TIME  DEC                     GET THE SYSTEM TIME/DATE
         STM   R0,R1,WORKDBLW          STORE IN WORK AREA
         UNPK  WORKTIME,WORKDBLW+0(4)  UNPACK THE TIME
         OI    WORKTIME+7,X'F0'        CLEAR SIGN NIBBLE
         MVC   SC1UPDTE+0(2),WORKTIME+1 MOVE THE HH
         MVC   SC1UPDTE+3(2),WORKTIME+3 MOVE THE MM
         MVC   SC1UPDTE+6(2),WORKTIME+5 MOVE THE SS
         MVC   SC1UPDTE+9(8),JOBNAME   MOVE JOBNAME
         MVC   SC1UPDTE+18(8),64(R2)   MOVE JOBSTEP
         MVC   SC1UPDTE+27(8),32(R2)   MOVE STEPNAME
         LH    R4,30(R2)               GET ASID
         L     R5,16                   GET CVT
         L     R5,564(R5)              GET CVTASCBH
MONLOOP4 EQU   *
         LTR   R5,R5                   END OF ASCB READY Q?
         BZ    MONLOOP6                JOB'S THERE BUT WE CAN'T SEE IT
         CH    R4,36(R5)               IS THIS THE RIGHT ASID?
         BE    MONLOOP5                YES, GO GET TIMING
         L     R5,4(R5)                GET NEXT ASCB ON QUEUE
         B     MONLOOP4                GO TRY AGAIN
MONLOOP5 EQU   *
         LM    R6,R7,64(R5)            PICK UP ASCBJSTL
         SRDL  R6,12                   DIVIDE BY 2**11
         D     R6,=F'10000'            DIVIDE BY 10,000
         LR    R8,R7                   COPY FOR LATER
         LM    R6,R7,200(R5)           PICK UP ASCBSRBT
         SRDL  R6,12                   DIVIDE BY 2**11
         D     R6,=F'10000'            DIVIDE BY 10,000
         AR    R1,R7                   TOTAL-TIME = TCB-TIME + SRB-TIME
         CVD   R8,WORKDBLW             CONVERT RADIX
         MVC   SC1UPDTE+41(10),=XL10'4020206B2021204B2020'
         ED    SC1UPDTE+41(10),WORKDBLW+4 FORMAT TIMING FIELD
         TM    102(R5),X'04'           ASCB SWAPPED OUT?
         BO    MONLOOP6                YES, BYPASS
         MVC   SC1UPDTE+37(4),=CL4'IN' INDICATE JOB SWAPPED-IN
         B     MONLOOP7                BYPASS SWAPPED-OUT INDICATOR
MONLOOP6 EQU   *
         MVC   SC1UPDTE+37(4),=CL4'OUT' INDICATE JOB SWAPPED-OUT
MONLOOP7 EQU   *
         CLI   STAXSW,C'1'             HAVE WE BEEN INTERRUPTED?
         BE    DRCLEAR                 YES, GET OUTTA HERE
         BAL   R9,HILIT                TPUT THE UPDATE LINE
         STIMER WAIT,BINTVL=INTERVAL   WAIT FOR DESIGNATED PERIOD
         AP    LINENUM,=PL1'1'         BUMP TO NEXT LINE
         BCT   R3,MONLOOP1             WAKE UP, GO TRY AGAIN
         B     MONLOOP0                SCREEN FULL, CLEAR/HEADING
ENDOFJOB EQU   *
         B     DRCLEAR                 GO TO THE DRIVER'S EXIT POINT
         SPACE 1
EXIT18   EQU   *
         L     R9,SAVE18
         BR    R9
         EJECT
***********************************************************************
*   THIS ROUTINE HIGH-LIGHTS THE UPDATE LINE WHEN NECESSARY           *
***********************************************************************
         SPACE 2
HILIT    DS    0H
         ST    R9,SAVE20
         B     BSAVE20
SAVE20   DC    F'-1'
         DC    CL8'HILIT   '
BSAVE20  EQU   *
         SPACE 1
         UNPK  ROW,LINENUM             STARTING ROW NUMBER
         OI    ROW+1,X'F0'             CLEAR SIGN NIBBLE
         MVC   COLUMN,=CL2'01'         ALWAYS START IN COLUMN 1
         BAL   R9,RCTOTUBE             CONVERT ROW/COLUMN TO SCREEN ADR
         MVC   SC1HILTR+01(2),BUFFADDR ADDRESS : STARTING
         MVC   SC1FIELD+01(2),BUFFADDR ADDRESS : STARTING
         MVC   SC1LOLTR+01(2),LASTSTRT ADDRESS : STARTING
         MVC   LASTSTRT,BUFFADDR       STORE NEW LAST ADDR: STARTING
         MVC   COLUMN,=CL2'80'         ALWAYS END IN COLUMN 80
         BAL   R9,RCTOTUBE             CONVERT ROW/COLUMN TO SCREEN ADR
         MVC   SC1HILTR+12(2),BUFFADDR ADDRESS : ENDING
         MVC   SC1LOLTR+12(2),LASTEND  ADDRESS : ENDING
         MVC   LASTEND,BUFFADDR        STORE NEW LAST ADDR: ENDING
         TPUT  SC1HILIT,LSC1HIL,NOEDIT HI-LITE
         SPACE 1
EXIT20   EQU   *
         L     R9,SAVE20
         BR    R9
         EJECT
***********************************************************************
*     THIS ROUTINE PROCESSES THE ROW/COLUMN TO BUFFER CONVERSION      *
***********************************************************************
         SPACE 2
RCTOTUBE DS    0H
         ST    R9,SAVE40
         STM   R2,R3,SAVE40A
         B     BSAVE40
SAVE40   DC    F'-1'
SAVE40A  DC    2F'-1'
         DC    CL8'RCTOTUBE'
BSAVE40  EQU   *
         SPACE 1
*--> USER WANTS A ROW/COLUMN TO BUFFER ADDRESS CONVERSION
         PACK  R327FLD1,ROW            PACK THE ROW NUMBER
         SP    R327FLD1,=PL1'1'        SUBTRACT 1
         MP    R327FLD1,=PL2'80'       NO, MULTIPLY BY 80
         PACK  R327FLD2,COLUMN         PACK THE COLUMN
         AP    R327FLD1,R327FLD2       ADD TO GET POSITION NUMBER
         SP    R327FLD1,=PL1'1'        SUBTRACT TO GET REL POSITION
         DP    R327FLD1,=PL2'64'       DIVIDE BY BASE 64
         ZAP   WORKDBLW,R327FLD1(2)    MOVE FOR CONVERSION
         CVB   R2,WORKDBLW             CONVERT FOR USE AS AN INDEX
         LA    R3,TABLE327             GET BASE ADDRESS
         AR    R3,R2                   ADD DISPLACEMENT TO BASE
         MVC   BUFFADDR+0(1),0(R3)     MOVE CHARACTERS FROM TABLE
         ZAP   WORKDBLW,R327FLD1+2(2)  MOVE FOR CONVERSION
         CVB   R2,WORKDBLW             CONVERT FOR USE AS AN INDEX
         LA    R3,TABLE327             GET BASE ADDRESS
         AR    R3,R2                   ADD DISPLACEMENT TO BASE
         MVC   BUFFADDR+1(1),0(R3)     MOVE CHARACTERS FROM TABLE
         SPACE 1
EXIT40   EQU   *
         LM    R2,R3,SAVE40A
         L     R9,SAVE40
         BR    R9
         EJECT
***********************************************************************
*     THIS ROUTINE PAINTS THE INPUT SCREEN AND READS A RESPONSE FROM  *
*   THE TERMINAL.  UPON RETURN, REGISTER 1 WILL CONTAIN THE NUMBER    *
*   OF BYTES READ FROM THE TERMINAL.                                  *
***********************************************************************
         SPACE 2
TPUTMAIN DS    0H
         ST    R9,SAVE50
         B     BSAVE50
SAVE50   DC    F'-1'
         DC    CL8'TPUTMAIN'
BSAVE50  EQU   *
         SPACE 1
         LA    R2,ATRLST1B             ADDR OF ATTRIBUTE LIST
         ST    R2,ALISTPTR             STORE IN PTR AREA
         LA    R2,SCREEN1              ADDR OF ATTRIBUTE LIST
         ST    R2,ASCRNPTR             STORE IN PTR AREA
         LA    R2,SC1SUFIX             ADDR OF SUFFIX
         ST    R2,ASUFXPTR             STORE IN PTR AREA
         LA    R2,L'SC1SUFIX           GET LENGTH OF SUFFIX
         STC   R2,ASUFXPTR             STORE IN PTR AREA
         MVC   ASCRNSIZ,=F'1920'       STORE SIZE OF SCREEN
         BAL   R9,FULLSCR              GO DO DEMO SCREEN WORK
         SPACE 1
EXIT50   EQU   *
         L     R9,SAVE50
         BR    R9
         EJECT
***********************************************************************
*   THIS ROUTINE BUILDS THE FINAL SCREEN, DOES A FULL SCREEN TPUT,    *
* A DUMMY TGET, AND CLEARS THE SCREEN.  THE MAJOR PART OF THE CODE    *
* IS THE BUILDING OF THE FINAL SCREEN.  THE ROUTINE HAS THREE INPUTS. *
* 'ASCRNPTR' POINTS TO A STANDARD 1920 BYTE SCREEN IMAGE WITH NO      *
* ATTRIBUTE CHARACTERS.  'ALISTPTR' CONTAINS THE ADDRESS OF THE       *
* ATTRIBUTE LIST THAT WE WILL USE THIS TIME AROUND.  'SCPREFIX' IS    *
* THE CONTROL STREAM WHICH IS TO BE PREFIXED ONTO THE FINAL SCREEN.   *
*   USING THE THREE INPUTS, A TPUT'ABLE FINAL SCREEN IS BUILT IN THE  *
* 'SCRBLD' AREA AT THE END OF THE PROGRAM.                            *
***********************************************************************
         SPACE 1
FULLSCR  DS    0H
         ST    R9,SAVE60
         B     BSAVE60
SAVE60   DC    F'-1'
         DC    CL8'FULLSCR '
BSAVE60  EQU   *
         SPACE 1
*--> INIT REGISTERS
         L     R2,ALISTPTR             GET PTR TO ATTRIBUTE LIST
         L     R3,0(R2)                GET END OF ATTRIBUTE LIST
         LA    R2,4(R2)                BUMP PAST END ADDRESS
         LA    R4,SCRBLD               GET ADDR OF BUILD AREA
         XR    R5,R5                   INIT LENGTH REGISTER
         L     R6,ASCRNPTR             GET ADDR OF INPUT SCREEN
         LR    R7,R6                   GET BEGINNING
         A     R7,ASCRNSIZ             ADD SIZE OF SCREEN TO GET END
*--> INSERT PREFIX
         MVC   0(L'SCPREFIX,R4),SCPREFIX   MOVE PREFIX
         LA    R4,L'SCPREFIX(R4)       BUMP PTR
         LA    R5,L'SCPREFIX(R5)       ADD LENGTH
*--> FLAG ATTRIBUTE BYTES FIRST
FSLOOP10 EQU   *
         CR    R2,R3                   END OF ATTRIBUTE LIST?
         BE    FSLOOP20                YES, END OF FLAGGING
         L     R8,0(R2)                GET ADDR OF NEXT ATTR BYTE
         MVI   0(R8),X'1D'             FLAG BYTE WITH A X'FF'
         LA    R2,4(R2)                GET NEXT ATTRIBUTE ADDR
         B     FSLOOP10                GO TRY NEXT
FSLOOP20 EQU   *
         L     R2,ALISTPTR             GET PTR TO ATTRIBUTE LIST
         LA    R2,4(R2)                BUMP PAST END ADDRESS
FSLOOP30 EQU   *
         CR    R6,R7                   INPUT SCREEN EXHAUSTED?
         BE    FSLOOP50                GO TPUT
         CLI   0(R6),X'1D'             IS THIS A FLAG?
         BE    FSLOOP40                YES, GO PROCESS
         MVC   0(1,R4),0(R6)           NO, MOVE THIS BYTE TO OUTPUT
         LA    R4,1(R4)                BUMP PTR TO OUTPUT SCREEN
         LA    R5,1(R5)                BUMP LENGTH OF OUTPUT
         LA    R6,1(R6)                BUMP TO NEXT INPUT BYTE
         B     FSLOOP30                GO TRY NEXT BYTE
FSLOOP40 EQU   *
         MVC   0(1,R4),0(R6)           MOVE FLAG TO OUTPUT
         MVC   1(1,R4),0(R2)           MOVE ATTR TO OUTPUT
         LA    R2,4(R2)                BUMP TO NEXT ATTR
         LA    R4,2(R4)                BUMP TWO BYTES IN OUTPUT
         LA    R5,2(R5)                BUMP LENGTH BY TWO
         LA    R6,1(R6)                BUMP TO NEXT INPUT BYTE
         B     FSLOOP30                GO TRY NEXT BYTE
FSEXMVC  MVC   0(0,R4),0(R8)           MOVE SUFFIX TO OUTPUT
FSLOOP50 EQU   *
         XR    R1,R1                   CLEAR REGISTER
         IC    R1,ASUFXPTR             GET LENGTH TO MOVE
         BCTR  R1,0                    SUBTRACT ONE FOR MVC
         L     R8,ASUFXPTR             ADDR OF SUFFIX
         EX    R1,FSEXMVC              MOVE THE SUFFIX TO OUTPUT
         AR    R4,R1                   BUMP LENGTH OF SUFFIX
         AR    R5,R1                   BUMP LENGTH OF SUFFIX
         LA    R4,1(R4)                RESTORE 1 BYTE FROM EX
         LA    R5,1(R5)                RESTORE 1 BYTE FROM EX
*--> TGET'S AND TPUT'S
         CLI   STAXSW,C'1'             HAVE WE BEEN INTERRUPTED?
         BE    FSINTRPT                YES, BYPASS THIS TPUT
FSREFRSH EQU   *
         TPUT  SCRBLD,(R5),FULLSCR     PAINT OUTPUT SCREEN
         TM    ATTRIB+3,X'01'          DOES THIS TUBE SUPPORT COLOR?
         BNO   NOCOLOR                 BRANCH AROUND COLORS
         TPUT  SC1COLOR,LSC1CLR,NOEDIT WRITE SPECIALTY COLORS
NOCOLOR  EQU   *
         CLI   STAXSW,C'1'             HAVE WE BEEN INTERRUPTED?
         BNE   EXIT60                  NO, CONTINUE
FSINTRPT EQU   *
         TPUT  CLSCREEN,12,FULLSCR     CLEAR SCREEN
         TPUT  MSG3,L'MSG3             SEND INTERRUPTED MESSAGE
         L     R13,SAVEAREA+4          GET ADDR OF SAVEAREA
         LM    R14,R12,12(R13)         RESTORE CALLERS REGISTERS
         LA    R15,4                   SET RC=4
         BR    R14                     RETURN TO CALLER
         SPACE 1
EXIT60   EQU   *
         L     R9,SAVE60
         BR    R9
         EJECT
***********************************************************************
*           W O R K I N G   S T O R A G E   S E C T I O N             *
***********************************************************************
         SPACE 2
MSG1     DC    CL36'COMMAND REQUIRES OPERATOR AUTHORITY'
MSG2     DC    CL17'STAX MACRO FAILED'
MSG3     DC    CL19'COMMAND INTERRUPTED'
MSG5     DC    CL24'PLEASE ENTER THE JOBNAME'
MSG6     DC    CL23'JOB NOT FOUND BY SEARCH'
MSG8     DC    XL12'C11140403C4040001140C113'
WORKTIME DS    D
INTERVAL DS    F
INTERDEC DS    F
JOBNAME  DC    CL8' '                  JOBNAME TO BE MONITORED
MESSAGE  DC    CL126' '                MESSAGE TO BE RECEIVED
PRMSZE   DS    CL2                     PRIMARY SCREEN SIZE
ALTSZE   DS    CL2                     SECONDARY SCREEN SIZE
ALTMOD3  EQU   X'20'                   TERMINAL = 3278/9 MOD 3
ATTRIB   DS    F                       TERMINAL ATTRIBUTES
STAXSW   DC    CL1'0'                  INTERRUPTED, YES/NO
LINENUM  DC    PL2'5'                  LINE NUMBER ON SCREEN
INTVFLAG DC    C'0'                    1=INTERVAL SUCCESSFULLY PARSED
         SPACE 1
TRTALLOW DC    256XL1'FF'              TRT TABLE/ALLOWABLE CHARS
         ORG   TRTALLOW+C'0'           ALLOW 0-9
         DC    10XL1'00'                 CLEAR CHARS
         ORG
         SPACE 2
         LTORG                         LITERAL POOL
         EJECT
***********************************************************************
*      WORK AREAS FOR 3270 ADDRESS CONVERSION ROUTINES                *
***********************************************************************
         SPACE 1
WORKDBLW DC    D'0'                    HEX/DECIMAL CONVERSION AREA
ROW      DS    CL2                     ROW
COLUMN   DS    CL2                     COLUMN
BUFFADDR DS    XL2                     3270 BUFFER ADDRESS
LASTSTRT DC    XL2'C540'               3270 BUFFER ADDRESS
LASTEND  DC    XL2'C64F'               3270 BUFFER ADDRESS
*--> WORK DATA ITEMS FOR 3270 TRANSLATION ROUTINE
R327FLD1 DS    F                       WORK AREA
R327FLD2 DS    F                       WORK AREA
*--> IBM 3270 BASE 64 ENCODING TABLE (IS THERE A ROUTINE SOMEWHERE?)
TABLE327 EQU   *
         DC    X'40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F'
         DC    X'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F'
         DC    X'6061E2E3E4E5E6E7E8E96A6B6C6D6E6F'
         DC    X'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'
         EJECT
*--> THE FOLLOWING ARE USED BY THE 'FULLSCR' ROUTINE
CLSCREEN DC    XL12'C11140403C4040001140C113'
SCPREFIX DC    XL11'C11140403C404000114040'
         SPACE 1
ALISTPTR DC    A(0)                    PTR TO ACTIVE ATTR LIST
ASCRNPTR DC    A(0)                    PTR TO ACTIVE INPUT SCREEN
ASCRNSIZ DC    F'0'                    SIZE OF THE SCREEN INPUT
ASUFXPTR DC    A(0)                    LENGTH/PTR TO SUFFIX
         SPACE 1
ATRLST1B DS    0F
         DC    A(ATRLST1E)             END OF THIS LIST
         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE
         DC    AL3(SC1LN01+00)         FIRST BYTE OF SCREEN
         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE
         DC    AL3(SC1LN02+00)         FIRST BYTE OF SECOND LINE
         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE
         DC    AL3(SC1LN24+00)         BEGINNING OF LAST LINE
         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE
         DC    AL3(SC1LN24+11)         BEGINNING OF PFK LIST
         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE
         DC    AL3(SC1LN24+67)         END OF PFK LIST
ATRLST1E EQU   *
         SPACE 1
ATR@PL   EQU   X'E4'                   PROTECT-LOW  / BLUE
ATR@PH   EQU   X'E8'                   PROTECT-HIGH / WHITE
ATR@UL   EQU   X'C4'                   UNPROT-LOW   / GREEN
ATR@UH   EQU   X'C8'                   UNPROT-HIGH  / RED
         EJECT
***********************************************************************
*  EXTENDED COLOR FIELDS FOR FULL CAPABILITY SCREENS                  *
***********************************************************************
         SPACE 1
*------- ----- BACK-LIGHT THE TITLE LINE
SC1COLOR EQU   *
         DC    XL1'F1'                 WRITE COMMAND
         DC    XL1'C2'                 WCC - RELEASE KEYBOARD
         DC    XL16'1140402903C0F841F442F311C14F1DE8'
         DC    XL5'11C14A1DE4'
SC1INTVL DC    XL4'40202120'
         DC    XL16'11C14A2903C0F8410042F611C14F1DE8'
ESC1CLR  EQU   *
LSC1CLR  EQU   ESC1CLR-SC1COLOR
         SPACE 2
*------- ----- HI-LITE THE UPDATE LINE
SC1HILIT EQU   *
         DC    XL1'F1'                 WRITE COMMAND
         DC    XL1'C2'                 WCC - RELEASE KEYBOARD
SC1FIELD DC    XL5'1199991DE4'
         DC    CL12' '
SC1UPDTE DC    CL67'HH:MM:SS JJJJJJJJ PPPPPPPP SSSSSSSS'
SC1LOLTR DC    XL16'1199992903C0F8410042F31199991DE4'
SC1HILTR DC    XL16'1199992903C0F841F142F21199991DE4'
         DC    XL4'115C7D13'           SET BUFFER ADDR/COMMAND ENTRY
ESC1HIL  EQU   *
LSC1HIL  EQU   ESC1HIL-SC1HILIT
         EJECT
SCREEN1  EQU   *
SC1LN01  DC    CL40'                      T S O   S T A T U '
         DC    CL40'S   M O N I T O R                       '
SC1LN02  DC    CL40' ---------------------------------------'
         DC    CL40'--------------------------------------- '
SC1LN03  DC    CL40'             >-TIME-< JOBNAME  JOBSTEP  '
         DC    CL40'PROCSTEP  STAT  CPU-TIME                '
         DC    CL40'                                        '
         DC    CL40'                                        '
SC1LN05  DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
         DC    CL40'                                        '
SC1LN24  DC    CL40' ---------   PRESS ATTN (ALT/SYSREQ) TO '
         DC    CL40'TERMINATE STATUS MONITOR   ------------ '
SC1SUFIX DC    XL4'115C7D13'
         SPACE 1
SCRBLD   DS    CL4096                  BUILD AREA FOR FINAL SCREEN
         EJECT
***********************************************************************
*  INTERRUPTION EXIT ROUTINE ---- STAX SERVICE ROUTINE                *
***********************************************************************
         SPACE 2
ATTNRTN  CSECT
         STM   R14,R12,12(R13)         SAVE CALLERS REGISTERS
         BALR  R12,R0                  SET UP BASE REGISTER
         DROP  R12                     DROP OLD BASE REGISTER
         USING *,R12                   SET UP NEW BASE REGISTER
         ST    R13,STAXSAVE+4          SAVEAREA BACKWARD PTR
         LA    R11,STAXSAVE            PICK UP OUR SAVEAREA ADDR
         ST    R11,8(R13)              SAVEAREA FORWARD PTR
         LR    R13,R11                 ESTABLISH NEW S/A PTR
         SPACE 1
         L     R3,STAXSWAD             GET ADDR OF SWITCH ADDR
         MVI   0(R3),C'1'              TURN SWITCH ON
         SPACE 1
         L     R13,STAXSAVE+4          PICK UP OLD S/A ADDR
         LM    R14,R12,12(R13)         RESTORE CALLERS REGISTERS
         LA    R15,0                   SET RC=0
         BR    R14                     RETURN TO CALLER
         SPACE 1
STAXSWAD DC    A(STAXSW)               ADDR OF INTERRUPT SWITCH
STAXSAVE DS    18F                     SAVE AREA FOR INTERRUPT RTN
         EJECT
***********************************************************************
*                     D S E C T S                                     *
***********************************************************************
         SPACE 2
         PRINT ON,NOGEN,NODATA
SCRNLINE DSECT
         DS    CL1
SCJOBNM  DS    CL8                     JOBNAME
         END   MONJOB
