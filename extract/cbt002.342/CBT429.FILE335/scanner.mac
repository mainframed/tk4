??=ifdef MVS    //* RS
   ??=pragma filetag("IBM-1047")  //* RS
??=endif                          //* RS
/*
      *% ALIAS SCANNER
      *%
      *% AUTOR IE23218
      *%
      *% DATE-WRITTEN 13.02.1993
      *%
      *% DESCRIPTION
      *%  'Konvertierung von C-Sourcen gemÂ¹ den C/370 Code Mappings. '
      *%  'Die Umsetzungen sind syntaxabhÂngig und werden nicht in    '
      *%  'Kommentaren gemacht. Innerhalb von strings werden nur die  '
      *%  'special characters wie \n \t \\ usw. berÀcksichtigt.       '
      *%
      *% COMPILE-PARAMETER
      *   'TEST(ALL),RENT,DECK,SOURCE,SOURCE,LIST,XREF,'
      *%  'RENT,DECK,NOTEST,OPTIMIZE,MEMORY,SOURCE,'
      *%  'DEFINE(C370)'
      *%
      *% LINK-PARAMETER
      *%  'AMODE=31,RMODE=ANY,RENT,XREF,MAP'
      *%
      *% LINK-STEUERANWEISUNGEN
      *%
*/

#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include "C370.h"
                         /* ISPF-define's (TSO-Edit) */
#define lsb   0x63       /* left square bracket      */
#define rsb   0xFC       /* right square bracket     */
#define lbr   0x43       /* left brace               */
#define rbr   0xDC       /* right brace              */
#define bsl   0xEC       /* backslash                */
#define lor   0xBB       /* logical or               */
#define lno   0x4F       /* logical not              */
#define bno   0x59       /* binary not               */
#define bxo   0x5F       /* binary xor               */
#define cld   0x7D       /* character literal delim. */
#define sld   0x7F       /* string literal delimiter */
#define siq   0x79       /* single quote             */

                         /* C/370 Mappings           */
#define lsb_  0xAD       /* left square bracket      */
#define rsb_  0xBD       /* right square bracket     */
#define lbr_  0xC0       /* left brace               */
#define rbr_  0xD0       /* right brace              */
#define bsl_  0xE0       /* backslash                */
#define lor_  0x6A       /* logical or               */
#define lno_  0x5A       /* logical not              */
#define bno_  0xA1       /* binary not               */
#define bxo_  bxo        /* binary xor               */
#define cld_  cld        /* character literal delim. */
#define sld_  sld        /* string literal delimiter */
#define siq_  siq        /* single quote             */

int ispf_c370( int ch )
{
   switch(ch) {
   case lsb  : return lsb_;
   case rsb  : return rsb_;
   case lbr  : return lbr_;
   case rbr  : return rbr_;
   case bsl  : return bsl_;
   case lor  : return lor_;
   case lno  : return lno_;
   case bno  : return bno_;
   }
   return ch;
}

int c370_ispf( int ch )
{
   switch(ch) {
   case lsb_ : return lsb;
   case rsb_ : return rsb;
   case lbr_ : return lbr;
   case rbr_ : return rbr;
   case bsl_ : return bsl;
   case lor_ : return lor;
   case lno_ : return lno;
   case bno_ : return bno;
   }
   return ch;
}

FILE *in, *out;
int  tri, rsc, dru, pra, pfa, ret;

int make_print( int ch )
{
   if ((dru == 1) && !isprint(ch))           /* make printable */
     switch (ch) {                           /* by space char  */
       case '\v':
       case '\r':
       case '\n': return ch;
     }
   return ch;
}

void switch_char( int ch )
{
   if (rsc == 1) {
      ch = make_print(ch);
      ch = c370_ispf(ch);
      fputc( ch, out );
   }
   else {
      ch = ispf_c370(ch);
      ch = make_print(ch);
      if (tri == 0)
         fputc( ch, out );
      else        /* Trigraph-Umsetzung */
         switch(ch) {
         case '#'  : fputs( "??", out ); fputc( '=', out ); break;
         case lsb_ : fputs( "??", out ); fputc( '(', out ); break;
         case rsb_ : fputs( "??", out ); fputc( ')', out ); break;
         case bsl_ : fputs( "??", out ); fputc( '/', out ); break;
         case lbr_ : fputs( "??", out ); fputc( '<', out ); break;
         case rbr_ : fputs( "??", out ); fputc( '>', out ); break;
         case lor_ : fputs( "??", out ); fputc( lno_, out ); break;
         case bxo_ : fputs( "??", out ); fputc( cld_, out ); break;
         case bno_ : fputs( "??", out ); fputc( '-', out ); break;
         default   : fputc( ch, out );
         }
   }
}

void Comment(void)
{
   int ch;

   fputc( ch=fgetc(in), out);
   do {
      while (ch != EOF && ch != '*')
         fputc( ch=fgetc(in), out);
      fputc( ch=fgetc(in), out);
   }
   while (ch != EOF && ch != '/');
}

void String(int sep)
{
   int ch, ch1;

   while ((ch = fgetc(in)) != EOF) {
      switch( ch ) {
      case sld  :
      case cld  : fputc( ch, out );
                  if (sep == ch) return;
                  break;
      case bsl  :
      case bsl_ : ch1 = fgetc(in);
                  switch( ch1 ) {
                  case 'a'  :          /* bell              */
                  case 'b'  :          /* backspace         */
                  case 'f'  :          /* formfeed          */
                  case 'n'  :          /* newline           */
                  case 'r'  :          /* carriage-return   */
                  case 't'  :          /* horizontal tab    */
                  case 'v'  :          /* vertical tab      */
                  case '?'  :          /* question mark     */
                  case bsl  :          /* backslash         */
                  case cld  :          /* single: '         */
                  case sld  :          /* double: "         */
                  case '\n' :          /* continuation char */
                  case '0'  :          /* numeric constants */
                  case '1'  :
                  case '2'  :
                  case '3'  :
                  case '4'  :
                  case '5'  :
                  case '6'  :
                  case '7'  :
                  case '8'  :
                  case '9'  :
                  case 'x'  : switch_char( ch );
                              switch_char( ch1 );
                              break;
                  default   : fputc( ch, out ); /* No Conversions */
                              fputc( ch1, out );
                  }
                  break;
      default   : fputc( ch, out );    /* No Conversions */
      }
   }
}

void scanner( char *i_file, char *o_file )
{
   char in_fileÖ80×, out_fileÖ80×;
   int ch;

   if (pfa == 0) {
      strcpy( in_file, i_file );
      strcpy( out_file, o_file );
   }
   else {
      sprintf( in_file, "'%s'", i_file );
      sprintf( out_file, "'%s'", o_file );
   }
   if ((in = fopen( in_file, "r" )) == NULL) {
      fprintf( stderr, "%i: Error opening %s\n", ++ret, in_file );
      return;
   }
   if ((out = fopen( out_file, "w" )) == NULL) {
      fprintf( stderr, "%i: Error opening %s\n", ++ret, out_file );
      fclose( in );
      return;
   }
   printf("processing: %s -> %s\n", in_file, out_file );
   if (pra == 1)
      fputs( "#pragma nomargins nosequence\n", out );

   while ((ch = fgetc(in)) != EOF) {
      switch_char( ch );
      switch( ch ) {
      case '/'  : ch = fgetc(in);
                  switch_char( ch );
                  if (ch == '*')
                     Comment();
                  break;
      case sld  :
      case cld  : String( ch );
                  break;
      }
   }
   fclose( out );
   fclose( in );
}

void usage( void )
{
   printf( "Usage: scanner options memberlist\n" );
   printf( "   -T: (optinal) produce Trigraphs\n" );
   printf( "   -P: (optinal) #pragma nosequnce nomargins\n" );
   printf( "   -R: (optinal) changing TSO -> ISPF values\n" );
   printf( "   -D: (optinal) Drucker-Output, valid for -R\n" );
   printf( "   -A: (optinal) dsname without UserId-Prefix\n" );
   printf( "   -I: (optinal) partitioned dataset for input\n" );
   printf( "   -O: (optinal) partitioned dataset for output\n\n" );
}

int main( int argc, char *argvÖ× )
{
   int  i, members = 0;
   char in_fileÖ80×, out_fileÖ80×;
   char *ip = NULL, *op = NULL;

   printf( "Usage: scanner -H for help\n" );
   tri = pra = rsc = dru = ret = pfa = 0;
   for (i=1;i<argc;i++) {
      char *p = argvÖi×;
      if (*p == '-')
         switch(toupper(*++p)) {
         case 'T' : tri = 1;              /* Trigraph-Option */
                    printf( "processing: -T  generating Trigraphs\n" );
                    break;
         case 'P' : pra = 1;              /* Pragma-Option */
                    printf( "processing: -P  inserting '" );
                    printf( "'#pragma nomargins nosequence'\n" );
                    break;
         case 'R' : rsc = 1;              /* ReScan-Option */
                    printf( "processing: -R " );
                    printf( "changing TSO -> ISPF values\n" );
                    break;
         case 'D' : dru = 1;              /* Druck-Option */
                    printf( "processing: -D " );
                    printf( "producing printable chars\n" );
                    break;
         case 'A' : pfa = 1;              /* Pfad-Option */
                    break;
         case 'I' : ip = p+1;
                    break;
         case 'O' : op = p+1;
                    break;
         case 'H' : usage();
                    break;
         }
      else {
         members++;
         if (ip && op) {
            sprintf( in_file, "%s(%s)", ip, p );
            sprintf( out_file, "%s(%s)", op, p );
            scanner( in_file, out_file );
         }
      }
   }
   if (members == 0) {
      if (ip && op)
         scanner( ip, op );
      else
         scanner( "DD:IN", "DD:OUT" );
   }
   if (ret != 0)
      printf( "\n%i errors occured\n", ret );
   exit( ret );
}
