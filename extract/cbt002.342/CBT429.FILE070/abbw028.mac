++ USERMOD(ABBW028) /* ADD SMF STEP END USEREXIT IEFACTRT:

        1) THIS MODIFICATION ADDS IEFACTRT WHICH PRODUCES DEVICE
           AND OTHER STEP STATISTICAL DATA ON SYSMSG FOR THE USER.
        2) IT ALSO ADDS IEFCUU$ WHICH PRODUCES JOB COST AND OTHER
           STEP STATISTICAL DATA ON SYSMSG FOR THE USER.
        3) IT ALSO ADDS JOBCUU$ TO LPALIB FOR TSO USAGE (REALTIME)
           AND JESCUU$ TO LINKLIB FOR JOB USAGE (JES OUTPUT ONLY).

    UPDATE HISTORY:

        05/01/88 - PUT APR 1988 NUU RATES INTO CFACTOR. (RCC)
        10/12/88 - PUT SEP 1988 NUU RATES INTO CFACTOR. (RCC)
        10/18/88 - RESTRUCTURE  FOR MVS/XA 2.2.1        (RCC)
        10/11/88 - PUT OCT 1988 NUU RATES INTO CFACTOR. (RCC)
        11/23/88 - PUT NOV 1988 NUU RATES INTO CFACTOR. (RCC)

                                                                 */ .
++ VER(Z038) FMID(HBB2102) /* 1988 ALGORITHM - R.C. CREWS 1/5/88 */ .
++ JCLIN .
//GEN11 JOB WC07N0044,'531-1 CM SINGER'
//SG21 EXEC LINKS,
// PARM='NCAL,LIST,XREF,LET,REUS,RENT',
//    UNIT='3350',SER=IPLXXX,N=GEN1,NAME=LPALIB,P1=' ',
//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T
//AOSB3   DD DISP=SHR,VOLUME=(,RETAIN),DSNAME=SYS1.AOSB3
//INCLUDE DD DISP=SHR,VOLUME=(,RETAIN),DSNAME=SYS1.AOSB3
//SYSLIN DD *
 INCLUDE INCLUDE(IGX00016)
 NAME    IGX00016(R)
 INCLUDE INCLUDE(IEFACTRT)
 INCLUDE INCLUDE(JOBCUU$)
 INCLUDE INCLUDE(CFACTOR)
 INCLUDE INCLUDE(FORMTAB)
 INCLUDE AOSB3(IEFTB724)
 ALIAS   JOBCUU$
 ALIAS   PRTCUU$
 ENTRY   IEFACTRT
 NAME    IEFACTRT(R)
/*
//SG22 EXEC LINKS,
// PARM='NCAL,LIST,XREF,LET,REUS,RENT',
//    UNIT='3350',SER=IPLXXX,N=SYS2,NAME=HSSLINK,P1=' ',
//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T
//AOSB3   DD DISP=SHR,VOLUME=(,RETAIN),DSNAME=SYS1.AOSB3
//INCLUDE DD DISP=SHR,VOLUME=(,RETAIN),DSNAME=SYS1.AOSB3
//SYSLIN DD *
 INCLUDE INCLUDE(JESCUU$)
 INCLUDE INCLUDE(CFACTOR)
 INCLUDE INCLUDE(FORMTAB)
 ENTRY   JESCUU$
 NAME    JESCUU$(R)
/*
++ SRC(IEFACTRT) DISTLIB(ASRCLIB) .
         TITLE 'IEFACTRT SMF STATISTICS PRINTING PROGRAM'
IEFACTRT CSECT
*
*  PURPOSE - IEFACTRT IS AN SMF EXIT WHICH IS INVOKED AT JOB
*            AND STEP TERMINATION TIME AND WHOSE PURPOSE IS
*            TO PROVIDE STEP RESOURCE UTILIZATION INFORMATION
*            ON THE JOB'S SYSOUT.
*
*  RELEASE - VS2, R3.7
*
*  MACROS USED - FREEMAIN,GETMAIN,RETURN,SAVE
*
*  ENTRY POINTS - IEFACTRT
*
*  EXTERNAL REFERENCES - IEFYS
*
*  OUTPUTS - RESOURCE USAGE DATA ON THE SYSOUT VIA IEFYS
*
*  INPUTS -  A. REG 12 CONTAINS THE ADDRESS OF IEFYS'S WORKAREA
*            B. REG 1 CONTAINS THE ADDRESS OF A TEN WORD LIST
*               CONSISTING OF THE FOLLOWING PARAMETERS....
*               +00 - ADDR OF AN (SMF) EXIT PARM AREA
*               +04 - ADDR OF AN 8 BYTE AREA CONTAINING THE
*                     LEFT JUSTIFIED, BLANK PADDED, STEPNAME.
*               +08 - ADDR OF A 20 BYTE AREA CONTAINING PGMR NAME
*               +12 - ADDR OF A 4 BYTE AREA CONTAINING, IN THE
*                     FIRST THREE BYTES THE ACCUMULATIVE JOB TCB
*                     CPU TIME IN HUNDREDTHS OF A SECOND (BINARY)
*                     AND, IN THE LAST BYTE, THE BINARY NUMBER
*                     OF ACCOUNTING FIELDS IN THE JOB STATEMENT.
*               +16 - ADDRESS OF AN AREA CONTAINING ACCOUNTING
*                     INFORMATION FROM THE JOB CARD.
*               +20 - THE ADDRESS OF A 4 BYTE AREA CONTAINING,
*                     IN THE FIRST THREE BYTES STEP CPU TIME IN
*                     HUNDREDTHS OF A SECOND (BINARY) NUMBER OF
*                     ACCOUNTING FIELDS IN THE EXEC STMT.
*               +24 - ADDR OF AN AREA CONTAINING ACCOUNTING INFO
*                     FROM THE EXEC STMT.
*               +28 - ADDR OF A 2 BYTE AREA.  THE FIRST BYTE IS AN
*                     INDICATOR.  IF BIT 7 IS SET TO 1 THE JOB HAS
*                     BEEN CANCELED. (IF THE EXIT SETS BIT 7 TO 1,
*                     THE JOB WILL BE CANCELED.)  THE 2ND BYTE
*                     CONTAINS THE NUMBER OF CURRENT JOB STEP.
*               +32 - THE ADDRESS OF A 2 BYTE AREA CONTAINING THE
*                     CONDITION OR COMPLETION CODE OF THE STEP.
*               +36 - THE ADDRESS OF AN AREA CONTAINING A 4 BYTE
*                     RDW IMMEDIATELY FOLLOWED BY THE TYPE 30
*                     SMF RECORD TO BE WRITTEN TO THE SMF
*                     DATA SET.
         EJECT
R0       EQU   0
R1       EQU   1              AT ENTRY, ADDR OF THE 10 WORK PARM LIST
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7              ADDR OF THE 10 WORD PARM LIST
R8       EQU   8              ADDR OF THE SMF RECORD
R9       EQU   9              BASE FOR THE GOTTEN CORE DSECT
R10      EQU   10             BASE FOR THE CSECT
R11      EQU   11             INTERNAL BALR'S ONLY
R12      EQU   12             PARM REG FOR IEFYS - MUST NOT BE MODIFIED
R13      EQU   13
R14      EQU   14
R15      EQU   15
* * * * * * * * * * * * *
*                       *
*  LINKAGE AND GETMAIN  *
*                       *
* * * * * * * * * * * * *
         SAVE  (14,12)
         BALR  R10,0          REG 10 FOR BASE
         USING *,R10
         WXTRN IEFCUU$
         LR    R7,R1          SAVE REG 1
         LA    R0,WORKLEN     GET SIZE OF WORK AREA
         GETMAIN R,LV=(0)     ISSUE UNCONDITIONAL GETMAIN FOR WORKSPACE
         LR    R9,R1
         USING WORK,R9        REG 9 IS BASE FOR GOTTEN CORE
         ST    R13,SAV+4
         LA    R14,SAV
         ST    R14,8(,R13)
         LR    R13,R14
* INITIALIZE GOTTEN CORE
         MVC   LINE1,SKLINE1
         MVC   LINE2,SKLINE2
         MVC   LINE3,SKLINE3
         MVC   EDMASK1,EDSKEL1
         MVC   EDMASK2,EDSKEL2
         MVC   EDMASK3,EDSKEL3
         MVC   EDMASK4,EDSKEL4
* POINT REG 8 AT THE SMF RECORD
         L     R8,36(,R7)     POINT AT RDW
         USING SMFRCD30,R8    PROVIDE ADDRESSABILITY               @JBD
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*  AT THIS POINT, ALL DATA SKELETONS HAVE BEEN MOVED TO GOTTEN CORE,  *
*  REG 7 POINTS TO THE LIST OF (10) INPUT PARMS, REG 8 POINTS TO THE  *
*  TYPE 30 SUBTYPE 4 (STEP TERMINATION), AND WE ARE READY TO START    *
*  BUILDING THE (3) OUTPUT LINES, FILLING IN THE FIELDS FROM LEFT TO  *
*  RIGHT, TOP TO BOTTOM (AS THEY OCCUR ON THE SYSOUT).                *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*  TEST FOR TYPE 30 SUBTYPE 4 (STEP TERMINATION TOTAL)                *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         CLI   SMF30RTY,30    IS THIS A TYPE 30 ?                  @JBD
         BNE   RET            NO - SKIP IT
         L     R3,SMF30SOF    OFFSET TO SUBSYSTEM SECTION          @JBD
         AR    R3,R8          ADDRESS OF SUBSYSTEM SECTION
         USING SMF30PSS,R3                                         @JBD
         CLC   SMF30TYP,=H'4' IS THIS A SUBTYPE 4?                 @JBD
         BNE   RET            EXIT IF NOT
         L     R3,SMF30TOF                                         @JBD
         AR    R3,R8          ADDRESS OF COMPLETION SECTION
         USING SMF30CMP,R3    ADDRESS IT                           @JBD
         TM    SMF30STI,SMF30FLH WAS THIS STEP FLUSHED?            @JBD
         BO    RET            EXIT IF IT WAS
         L     R3,16          CVT POINTER
         L     R3,0(R3)       TCB WORDS
         L     R3,4(R3)       CURRENT TCB
         ICM   R3,B'1111',TCBTCT-TCB(R3) IS THERE A TCT            @JBD
         BZ    RET            NO - GET OUT
         L     R3,TCTLCTAD-SMFTCT(,R3) LCT POINTER                 @JBD
         L     R3,LCTJCTAD-LCT(,R3) JOBS JCT POINTER               @JBD
         USING JCT,R3                                              @JBD
         TM    JCTJMGLV,INCMALL  MSGLEVEL=(,1)                     @JBD
         BZ    RET            NO - DON'T DO IT
* * * * * * * *
*             *
*  STEP NAME  *
*             *
* * * * * * * *
         L     R3,SMF30IOF    OFFSET TO IDENTIFICATION SECTION     @JBD
         AR    R3,R8          ADDRESS OF IDENTIFICATION SECTION
         MVC   L1STEP,SMF30STM-SMF30ID(R3)                         @JBD
* * * * * * * * * * *
*                   *
*  ELAPSED TIME     *
*                   *
* * * * * * * * * * *
         L     R3,SMF30POF    OFFSET TO PERFORMANCE SECTION        @JBD
         USING SMF30PRF,R3                                         @JBD
         AR    R3,R8          ADDRESS OF PERFORMANCE SECTION
         ICM   R1,15,SMF30TAT                                      @JBD
         M     R0,=F'1024'    CONVERT TO USECS
         D     R0,=F'10000'   CONVERT TO 100THS OF SEC
         LTR   R1,R1          TEST FOR ZERO
         BNZ   ETNZ                                                @JBD
         LA    R1,1           MAKE IT NOT ZERO
ETNZ     DS    0H                                                  @JBD
         LA    R2,L2ELP       ADDR OF ELAPSED FIELD IN OUTPUT LINE
         BAL   R11,CNVHE      CONVERT AND SAVE IN OUTPUT LINE
* * * * * * * * * * *
*                   *
*  RESIDENCY TIME   *
*                   *
* * * * * * * * * * *
         ICM   R1,15,SMF30RES R1 = RESIDENCY TIME                  @JBD
         M     R0,=F'1024'    CONVERT TO USECS
         D     R0,=F'10000'   CONVERT TO 100THS OF SEC
         LTR   R1,R1          TEST FOR ZERO
         BNZ   RTNZ                                                @JBD
         LA    R1,1           MAKE IT NOT ZERO
RTNZ     DS    0H                                                  @JBD
         ST    R1,RESSAV1
*        LA    R2,L2RES       ADDR OF RESIDENCY FIELD IN OUTPUT LINE
*        BAL   R11,CNVHE      CONVERT AND SAVE IN OUTPUT LINE
* * * * *
*       *
* VECTR *
*       *
* * * * *
         L     R3,SMF30COF    OFFSET TO PROCESSOR SECTION          @JBD
         USING SMF30CAS,R3                                         @JBD
         AR    R3,R8          ADDRESS OF PROCESSOR SECTION
         ICM   R1,15,SMF30JVU R1 = STEP VECTOR TIME                @JBD
         LA    R2,L2VCT       ADDR OF VECTOR FIELD IN OUTPUT LINE
         BAL   R11,CNVHE      CONVERT AND SAVE IN OUTPUT LINE
* * * * *
*       *
*  SRB  *
*       *
* * * * *
         ICM   R1,15,SMF30CPS R1 = SRB TIME                        @JBD
         A     R1,SMF30ISB       + INIT SRB TIME                   @JBD
         LA    R2,L2SRB       ADDR OF SRB FIELD IN OUTPUT LINE
         BAL   R11,CNVHE
* * * * *
*       *
*  TCB  *
*       *
* * * * *
         ICM   R1,15,SMF30CPT R1 = TCB TIME                        @JBD
         A     R1,SMF30ICU       + ITCB TIME                       @JBD
         LA    R2,L2TCB       ADDR OF TCB FIELD IN OUTPUT LINE
         BAL   R11,CNVHE      CONVERT AND SAVE IN OUTPUT LINE
         EJECT
* * * * * * *
*           *
*  PAGE/SEC *
*           *
* * * * * * *
         L     R3,SMF30ROF                                         @JBD
         USING SMF30SAP,R3                                         @JBD
         AR    R3,R8          ADDRESS OF STORAGE SECTION
         ICM   R1,15,SMF30PGI R1 = NO. PAGEINS                     @JBD
         A     R1,SMF30PGO       + NO. PAGEOUTS                    @JBD
         A     R1,SMF30PSI       + NO. SWAP PAGES IN               @JBD
         A     R1,SMF30PSO       + NO. SWAP PAGES OUT              @JBD
         A     R1,SMF30VPI       + NO. VIO PAGES IN                @JBD
         A     R1,SMF30VPO       + NO. VIO PAGES OUT               @JBD
         M     R0,=F'100'     R1 = PAGE/SEC IN 100'S OF SECOND
         D     R0,RESSAV1     R3 = PAGE/SEC
         CVD   R1,CVDWORK
         ED    EDMASK2,CVDWORK+6     STRIP ZEROS (ALLOW 3 CHARS)
         MVC   L1PSEC(2),EDMASK2+2  PAGE/SEC TO OUTPUT LINE
* * * * * * * * *
*               *
*  SYSIN COUNT  *
*               *
* * * * * * * * *
         L     R3,SMF30UOF                                         @JBD
         USING SMF30URA,R3                                         @JBD
         AR    R3,R8          ADDRESS OF I/O SECTION
         ICM   R1,15,SMF30INP                                      @JBD
         CVD   R1,CVDWORK
         ED    EDMASK3,CVDWORK+5     STRIP ZEROS (ALLOW 5 CHARS)
         MVC   L1SYSIN(4),EDMASK3+2  SYSIN COUNT TO OUTPUT LINE
* * * * * * * * *
*               *
*  TYPE40 EXCPS *
*               *
* * * * * * * * *
         L     R1,16                 CVT POINTER
         L     R1,0(R1)              GET TCB WORDS
         L     R1,4(R1)              GET CURRENT TCB
         ICM   R1,B'1111',TCBTCT-TCB(R1) GET TCT POINTER           @JBD
         ICM   R1,B'1111',TCTJMR-SMFTCT(R1) GET JMR POINTER        @JBD
         SR    R2,R2                 CLEAR REG 2
         ICM   R2,7,JMRUCOM-JMR+1(R1) PICK UP USER COMM. FIELD     @JBD
         BZ    NOUCF                                               @JBD
         L     R2,0(R2)              GET T40SAVE VALUE
NOUCF    DS    0H                                                  @JBD
         CVD   R2,CVDWORK
         ED    EDMASK4,CVDWORK+4     STRIP ZEROS (ALLOW 5 CHARS)
         MVC   L1TYP40(8),EDMASK4    SYSIN COUNT TO OUTPUT LINE
* * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                 *
*  FIRST TWO DATA LINES FORMATTED. WRITE BOX AND  *
*  THE TWO LINES IN PREPARATION FOR POSSIBLE      *
*  MULTIPLE DEVICE LINES.                         *
*                                                 *
* * * * * * * * * * * * * * * * * * * * * * * * * *
         LA    R14,ASTALL     * * * * * * * * ...*
         BAL   R11,WRLINE
         LA    R14,ASTEND     *               ...*
         BAL   R11,WRLINE
         LA    R14,LINE1      *  GD/DSD       ...*
         BAL   R11,WRLINE
         LA    R14,ASTEND     *               ...*
         BAL   R11,WRLINE
         LA    R14,LINE2      *  CORE         ...*
         BAL   R11,WRLINE
         LA    R14,ASTEND     *               ...*
         BAL   R11,WRLINE
         EJECT
* * * * * * * * *
*               *
*  EXCP-DEVICE  *
*               *
* * * * * * * * *
         LH    R1,SMF30EON    R1 = NUMBER OF EXCP SECTIONS         @JBD
         LTR   R1,R1          ARE THERE ANY DEVICE ENTRIES
         BZ    ENDLINES       GO IF NO DEVICE ENTRIES
         LH    R6,SMF30ELN    R3 = LENGTH OF EXCP SECTIONS         @JBD
         MR    R0,R6          NUMBER * LENGTH
         L     R2,SMF30EOF    OFFSET TO EXCP SECTIONS              @JBD
         USING SMF30EXP,R2                                         @JBD
         AR    R2,R8          ADDRESS OF EXCP SECTION
         LA    R1,0(R1,R2)   *R1 = END OF DEVICE ENTRIES
         LA    R3,L3FIELDS   *R3 = ADDR OF (FIRST) OUTPUT FIELD
         LA    R4,8          *R4 = NUMBER OF FIELDS IN OUTPUT LINE
NEXTDEV  EQU   *
         ICM   R5,15,SMF30BLK R5 = EXCP COUNT FOR THIS ENTRY       @JBD
         CVD   R5,CVDWORK
         MVC   0(8,R3),EDSKEL4   SET EDIT MASK FOR EXCP COUNT
         ED    0(8,R3),CVDWORK+4     STRIP ZEROS AND UNPK INTO OUTPUT
         MVI   8(R3),C'-'     INSERT THE MAGIC DASH SEPARATOR
* TEST THE UNIT ADDRESS FIELD FOR X'0000' (SPOOLED DATA SET)
*                                 X'0FFF' (VIO)
         CLC   =X'0000',SMF30CUA IS THIS A SPOOLED DATASET         @JBD
         BE    SPOOL          GO IS SPOOL
         CLC   =X'0FFF',SMF30CUA IS THIS VIO                       @JBD
         BE    VIO            GO IF VIO
         CLC   =X'7FFF',SMF30CUA IS THIS VIO                       @JBD
         BE    VIO            GO IF VIO
*  NOT SPOOL OR VIO.  TRANSLATE THE UNIT ADDRESS.
         IC    R5,SMF30CUA    FIRST CHAR OF UAD                    @JBD
         SLL   R5,28          TURN OFF THE
         SRL   R5,28                     MSS BIT
         STC   R5,XCHAR
         TR    XCHAR,XTAB     XLATE 1ST CHAR TO EBCDIC 'HEX'
         MVC   9(1,R3),XCHAR  1ST CHAR TO OUTPUT FIELD
         IC    R5,SMF30CUA+1  2ND CHAR OF UADR                     @JBD
         SLL   R5,24          LEAVE LEFTMOST
         SRL   R5,28                      FOUR BITS
         STC   R5,XCHAR
         TR    XCHAR,XTAB     XLATE 2ND CHAR TO EBCDIC 'HEX'
         MVC   10(1,R3),XCHAR 2ND CHAR TO OUTPUT FIELD
         IC    R5,SMF30CUA+2  3RD CHAR OF UADR                     @JBD
         SLL   R5,28          LEAVE RIGHTMOST
         SRL   R5,28                       FOUR BITS
         STC   R5,XCHAR
         TR    XCHAR,XTAB     XLATE 3RD CHAR TO EBCDIC 'HEX'
         MVC   11(1,R3),XCHAR 3RD CHAR TO OUTPUT FIELD
         B     TESTNEXT
SPOOL    EQU   *
         MVC   9(3,R3),=C'SPL'  UAD = SPOOL
         B     TESTNEXT
VIO      EQU   *
         MVC   9(3,R3),=C'VIO'  UAD = VIO
TESTNEXT EQU   *
         LA    R2,0(R2,R6)    POINT TO (NEXT) DEVICE ENTRY
         LA    R3,12(,R3)     POINT TO (NEXT) FIELD IN OUTPUT LINE
         CR    R2,R1          ANY MORE DEVICE ENTRIES
         BNL   LASTEXCP       GO IF NO MORE
         BCT   R4,NEXTDEV     GO DO NEXT DEVICE IF THIS OUTPUT
*                             LINE IS NOT FULL
*  EXCP LINE IS FULL.  PRINT IT AND SET UP FOR THE NEXT.
         LA    R14,LINE3
         BAL   R11,WRLINE     WRITE THE EXCP LINE ON THE SYSOUT
         LA    R4,8           RESET OUTPUT FIELD COUNTER
         LA    R3,L3FIELDS    RESET OUTPUT FIELD POINTER
         MVC   LINE3,SKLINE3  REBUILD OUTPUT LINE SKELETON
         B     NEXTDEV
LASTEXCP EQU   *
         LA    R14,LINE3
         BAL   R11,WRLINE     WRITE THE (LAST) EXCP LINE
ENDLINES EQU   *
         LA    R14,ASTEND     *               ...*
         BAL   R11,WRLINE
         B     DONE           EXIT
         EJECT
* * * * * * * * * * * *
*                     *    ENTRY REQMTS ...
*  WRITE SYSOUT DATA  *        REG 14 = ADDR OF LINE TO PRINT
*                     *
* * * * * * * * * * * *
WRLINE   EQU   *
         ST    R14,36(,R12)   SAVE ADDR OF MSG IN IEFYS PARM AREA
         LA    R14,111        ASSUME A LENGTH OF 111 CHARACTERS
         STH   R14,42(,R12)   SAVE LENGTH OF MSG IN IEFYS PARM AREA
         ST    R13,SAV13      SAVE REG 13
         LA    R13,IEFYSWA    45 WORD WORK AREA FOR IEFYS
         L     R15,=V(IEFYS)
         BALR  R14,R15
         L     R13,SAV13      RESTORE REG 13
         BR    R11            RETURN
* * * * * * * * * * * * * * * * *    INPUT REQMTS....
*                               *
*  CONVERT BINARY HUNDREDTHS OF *        REG 1 = BINARY TIME IN HUNDRED
*  A SECOND TO EBCDIC MM.SS.HH  *        REG 2 = ADDR OF EBCDIC FIELD
*                               *        REG 4 AND REG 5 ARE DESTROYED
* * * * * * * * * * * * * * * * *
CNVHE    EQU   *
         SR    R4,R4          SET UP FOR
         LR    R5,R1                  DIVIDE
         D     R4,=F'100'     R4 = HUNDREDTHS, R5 = SECONDS
         CVD   R4,CVDWORK
         UNPK  9(2,R2),CVDWORK+6(2)  HUNDREDTHS TO OUTPUT LINE
         OI    10(R2),X'F0'
         SR    R4,R4          CLEAR HUNDREDTHS
         D     R4,=F'60'      R4 = SECONDS, R5 = MINUTES
         CVD   R4,CVDWORK
         UNPK  6(2,R2),CVDWORK+6(2)   SECONDS TO OUTPUT LINE
         OI    7(R2),X'F0'
         SR    R4,R4
         D     R4,=F'60'      R4 = MINUTES, R5 = HOURS
         CVD   R4,CVDWORK
         UNPK  3(2,R2),CVDWORK+6(2)   MINUTES TO OUTPUT LINE
         OI    4(R2),X'F0'
         CVD   R5,CVDWORK
         UNPK  0(2,R2),CVDWORK+6(2) HOURS TO OUT LINE
         OI    1(R2),X'F0'
         MVI   2(R2),C':'     INSERT PERIODS
         MVI   5(R2),C':'                 BETWEEN FIELDS
         MVI   8(R2),C'.'
         BR    R11
         SPACE 3
* * * * * * * * * * * * * * * * * * * * * * * *
*                                             *
*  FREE GOTTEN CORE, ZERO RET CODES, AND EXIT *
*                                             *
* * * * * * * * * * * * * * * * * * * * * * * *
DONE     L     R15,=V(IEFCUU$)
         LTR   R15,R15
         BZ    PUTAST
         LA    R14,ASDASH     - - - - - - - - ...*
         BAL   R11,WRLINE
         B     CALL$
PUTAST   LA    R14,ASTALL     * * * * * * * * ...*
         BAL   R11,WRLINE
         B     NO$
*
RET      L     R15,=V(IEFCUU$)
         LTR   R15,R15
         BZ    NO$
CALL$    LR    R1,R7          GET PARM POINTER BACK
         L     R15,=V(IEFCUU$)
         BALR  R14,R15
NO$      L     R11,SAV+4      GET 'OLD' R13 ADDRESS FROM GOTTEN CORE
         LA    R0,WORKLEN     GET SIZE OF WORK AREA
         A     R0,=F'7'       AND ROUND UP
         N     R0,=X'FFFFFFF8' TO A DOUBLE WORD
         FREEMAIN R,LV=(0),A=(9)  RETURN GOTTEN CORE
         LR    R13,R11        RESTORE 'OLD' R13
         RETURN (14,12),RC=0
         EJECT
* * * * * * * * * * * * * * *
*                           *
*  SKELETONS FOR DSECT AREA *
*                           *
* * * * * * * * * * * * * * *
SKLINE1  DS    0CL111
         DC    C'*  GD/DSD RESOURCE USAGE FOR STEP 12345678  PAGE/S'
         DC    C'EC      SYSIN 1234   EXCPS TO DEALLOCATED DATASETS'
         DC    C'          *'
*
SKLINE2  DS    0CL111
         DC    C'*  ELAPSED TIME                VECTOR USE TIME    '
         DC    C'             TCB TIME                 SRB TIME    '
         DC    C'          *'
*
SKLINE3  DS    0CL111
         DC    C'*  EXCP-UNIT'
         DC    8X'404040404040404040404040'
         DC    C'  *'
*
EDSKEL1  DC    X'40202020202020202120'
EDSKEL2  DC    X'40202120'
EDSKEL3  DC    X'402020202120'
EDSKEL4  DC    X'4020202020202120'
         SPACE 3
* * * * * * * *
*             *
*  CONSTANTS  *
*             *
* * * * * * * *
ASTALL   DS    0CL111
         DC    C'**************************************************'
         DC    C'**************************************************'
         DC    C'***********'
*
ASDASH   DS    0CL111
         DC    C'*  -----------------------------------------------'
         DC    C'--------------------------------------------------'
         DC    C'--------  *'
*
ASTEND   DS    0CL111
         DC    C'*                                                 '
         DC    C'                                                  '
         DC    C'          *'
*
XTAB     DC    C'0123456789ABCDEF'
         EJECT
* * * * * * * * * * * * * *
*                         *
*  DSECT FOR GOTTEN CORE  *
*                         *
* * * * * * * * * * * * * *
WORK     DSECT
CVDWORK  DS    D              CONVERT-TO-DECIMAL WORK AREA
SAV      DS    18F            LINKAGE REG SAVE AREA
SAV13    DS    F              REG 13 SAVE DURING IEFYS
IEFYSWA  DS    18F            WORK AREA FOR IEFYS
RESSAV1  DS    F              COMPUTED RESIDENCY TIME IN HUNDREDTHS
EDMASK1  DS    CL10
EDMASK2  DS    CL4
EDMASK3  DS    CL6
EDMASK4  DS    CL8
XCHAR    DS    C              STORAGE FOR CHAR TO XLATE
* FIRST LINE OF THE REPORT DATA
LINE1    DS    0CL111
         DS    CL34
L1STEP   DS    CL8
         DS    CL11
L1PSEC   DS    CL2
         DS    CL9
L1SYSIN  DS    CL4
         DS    CL32
L1TYP40  DS    CL8
         DS    CL3
* SECOND LINE OF THE REPORT DATA
LINE2    DS    0CL111
         DS    CL16
L2ELP    DS    CL11
         DS    CL20
L2VCT    DS    CL11
         DS    CL14
L2TCB    DS    CL11
         DS    CL14
L2SRB    DS    CL11
         DS    CL3
* THIRD LINE OF THE REPORT DATA
LINE3    DS    0CL111
         DS    CL12
L3FIELDS DS    CL99
WORKLEN  EQU   ((*-WORK+7)/8)*8                                    @JBD
         EJECT ,                                                   @JBD
         IFASMFR 30                                                @JBD
         IKJTCB ,                                                  @JBD
         IEFTCT ,                                                  @JBD
LCT      DSECT ,                                                   @JBD
         IEFALLCT ,                                                @JBD
JCT      DSECT ,                                                   @JBD
         IEFAJCTB ,                                                @JBD
         IEFJMR ,                                                  @JBD
         END   IEFACTRT
++ SRC(IGX00016) DISTLIB(ASRCLIB) .
         TITLE 'IEFSSREQ ISSUEING SVC'
IGX00016 CSECT
         DC    X'0DF0'            BASR  15,0 (SET UP BASE REG)
         USING *,15
         L     14,0(1)            GET PARAMETER BLOCK ADDRESS
*
         CLC   0(4,14),=C'SSOB'   GOT AN SSOB ?
         BE    SSOB               YES - GO ISSUE IEFSSREQ
*
         CLC   0(4,14),=C'TEST'   FOR TESTING ?
         BE    TEST               YES - GO PROCESS
*
         CLC   0(4,14),=C'DMC '   GOT A DMC REQUEST?
         BNE   RETURN             NO - WHY ARE WE HERE ?
*
         L     10,16              CVT POINTER
         TM    X'74'(10),X'80'    IS THIS MVS XA ?
         BZ    *+10               NO - DON'T NEED 31 BIT MODE
         L     10,=A(X'80000000'+MODX31) SET RETURN ADDRESS
         DC    X'0B0A'            (BSM   R0,10) SET 31 BIT MODE
MODX31   EQU   *
*
         L     1,4(14)            GET ADDRESS OF REQUESTED DMC
         CLC   56(4,1),=C'DMC '   VALID DMC ?
         BNE   RETM24             NO - RETURN
         MVC   8(84,14),0(1)      MOVE DMC TO OUR WORK AREA
*
RETM24   L     10,16              CVT POINTER
         TM    X'74'(10),X'80'    IS THIS MVS XA ?
         BZ    *+10               NO - DON'T NEED 31 BIT MODE
         LA    10,MODX24          SET RETURN ADDRESS
         DC    X'0B0A'            (BSM   R0,10) SET 24 BIT MODE
MODX24   EQU   *
*
         B     RETURN             AND RETURN
*
TEST     EQU   *
         B     RETURN
         L     2,180(4)           FOR TESTING ONLY
         BCT   0,SETOFF           DELETE WHEN DONE
         OI    236(2),X'01'
         B     RETURN
SETOFF   NI    236(2),X'FE'
         B     RETURN             AND RETURN
*
SSOB     EQU   *                  JES SSOB REQUEST
      IEFSSREQ ,                  ISSUE SUBSYSTEM REQUEST
*
RETURN   L     14,CVTPTR          GET CVT POINTER
         USING CVTMAP,14
         L     14,CVTEXP1         GET EXIT PROLOGUE ADDRESS
         BR    14
         DROP  14
*
         PRINT NOGEN
CVTMAP   CVT   DSECT=YES
*
      IEFJESCT ,                  JES COMMUNICATION TABLE DSECT
         END
++ SRC(CFACTOR) DISTLIB(ASRCLIB) .
CFACTOR  CSECT
*
EYECATCH DC    CL12'DIMES/NUU = ' EYECATCHER FOR ZAPING
CDURATE  DC    F'1000'            NUU SCALING FACTOR (JANUARY 1988)
*
***********************************************************************
*                                                                     *
*      ***************  1988 (NUU) ALGORITHM    ***************       *
*                                                                     *
***********************************************************************
*                                                                     *
*      THE EIGHT C-FACTORS ARE:                                       *
*                                                                     *
*      FACTOR       RESOURCE         NATURAL UNITS           RATE     *
*      ------    ---------------   ----------------------   ------    *
*        C1A  =  PROCESSOR         (PROCESSING MINUTES)     $12.89    *
*        C1B  =  PROCESSOR         (PROCESSING MINUTES)     $ 6.45    *
*        C1C  =  TAPE SERVICES     (TAPE MOUNTS)            $ 1.97    *
*        C1D  =  DASD STORAGE      (MEGABYTE WEEKS)         $ 0.38    *
*        C1F  =  INTERACTIVE       (MEGABYTES TRANSFERED)   $21.12    *
*        C1G  =  OUTPUT SERVICES   (10K LINES PRINTED)      $ 1.72    *
*        C1J  =  DASD I/O          (DEV CONNECT MINUTES)    $ 2.05    *
*        C1M  =  MEMORY            (MEGABYTE HOURS)         $ 0.00    *
*        C1P  =  FORMS CHARGE      (PAGES PRINTED) X 1000   $10.59    *
*                                                                     *
***********************************************************************
*
STANDSRM DC    F'7125'            STANDARD CPU SRM CONSTANT * 10
*
BYTTGET  DC    F'20'              "AVERAGE" TERM TGET BYTES
BYTTPUT  DC    F'200'             "AVERAGE" TERM TPUT BYTES
*
CFACT1A  DC    F'1289000'         NET C1A * 100000    NOVEMBER 88
CFACT1B  DC    F'0645000'         NET C1B * 100000    NOVEMBER 88
CFACT1C  DC    F'0197000'         NET C1C * 100000    NOVEMBER 88
CFACT1D  DC    F'0038000'         NET C1D * 100000    NOVEMBER 88
CFACT1F  DC    F'2112000'         NET C1F * 100000     OCTOBER 88
CFACT1G  DC    F'0172000'         NET C1G * 100000        JULY 88
CFACT1J  DC    F'0205000'         NET C1J * 100000   SEPTEMBER 88
CFACT1M  DC    F'0000000'         NET C1M * 100000     JANUARY 88
CFACT1P  DC    F'1059000'         NET C1P * 100000000SEPTEMBER 88
         EJECT
*
*YECATCH DC    CL12'CENTS/CDU = ' EYECATCHER FOR ZAPING
*DURATE  DC    F'2180'            CENTS PER CDU (NOVEMBER 1987)
*
***********************************************************************
*                                                                     *
*      ***************  1987 (CDU) ALGORITHM    ***************       *
*                                                                     *
***********************************************************************
*                                                                     *
*      THE EIGHT C-FACTORS ARE:                                       *
*                                                                     *
*      FACTOR       RESOURCE         NATURAL UNITS                    *
*      ------    ---------------   ----------------------             *
*        C1A  =  PROCESSOR         (PROCESSING MINUTES)               *
*        C1B  =  PROCESSOR         (PROCESSING MINUTES)               *
*        C1C  =  TAPE SERVICES     (TAPE MOUNTS)                      *
*        C1D  =  DASD STORAGE      (MEGABYTE WEEKS)                   *
*        C1F  =  INTERACTIVE       (MEGABYTES TRANSFERED)             *
*        C1G  =  OUTPUT SERVICES   (10K LINES PRINTED)                *
*        C1J  =  DASD I/O          (DEV CONNECT MINUTES)              *
*        C1M  =  MEMORY            (MEGABYTE HOURS)                   *
*        C1P  =  FORMS CHARGE      (PAGES PRINTED)                    *
*                                                                     *
*                                                                     *
*      NET C-FACTORS ARE COMPUTED USING THE FOLLOWING NUMBERS:        *
*                                                                     *
*                  1987      1987     1987                            *
*                  CUUS    OP PLAN  NAT UNIT                          *
*      FACTOR    ESTIMATE   %COST   ESTIMATE     C FACTOR             *
*      ------    -------    -----   --------     --------             *
*        C1A  =  1388066 *  0.372 /   742829  =  0.695127             *
*        C1B  =  1388066 *  0.372 /   742829  =  0.695127             *
*        C1C  =  1388066 *  0.080 /  1218991  =  0.091096             *
*        C1D  =  1388066 *  0.111 /  4299846  =  0.035833             *
*        C1F  =  1388066 *  0.220 /   229303  =  1.331751             *
*        C1G  =  1388066 *  0.110 /  2201543  =  0.069355             *
*        C1J  =  1388066 *  0.041 /   824288  =  0.069042             *
*        C1M  =  1388066 *  0.000 /   400000  =  0.000000             *
*        C1P  =  1388066 *  0.066 /214737253  =  0.000426824          *
*                                                                     *
*                                                                     *
*      THE ABOVE NET C-FACTORS ARE USED AS FOLLOWS:                   *
*                                                                     *
*   CDUS (COST DISTRIBUTION UNITS) = NATURAL UNITS * NET CFACTOR      *
*               JOB COST (DOLLARS) = CDUS * CDURATE                   *
*                                                                     *
***********************************************************************
*
*TANDSRM DC    F'7125'            STANDARD CPU SRM CONSTANT * 10
*
*YTTGET  DC    F'20'              "AVERAGE" TERM TGET BYTES
*YTTPUT  DC    F'200'             "AVERAGE" TERM TPUT BYTES
*
*FACT1A  DC    F'0621695'         NET C1A * 1000000      AUGUST 87
*FACT1B  DC    F'0621695'         NET C1B * 1000000      AUGUST 87
*FACT1C  DC    F'0104685'         NET C1C * 1000000      AUGUST 87
*FACT1D  DC    F'0019945'         NET C1D * 1000000      AUGUST 87
*FACT1F  DC    F'1105084'         NET C1F * 1000000      AUGUST 87
*FACT1G  DC    F'0143346'         NET C1G * 1000000    NOVEMBER 87
*FACT1J  DC    F'0127349'         NET C1J * 1000000      AUGUST 87
*FACT1M  DC    F'0000000'         NET C1M * 1000000      AUGUST 87
*FACT1P  DC    F'0744000'         NET C1P * 1000000000 NOVEMBER 87
         EJECT
*
*YECATCH DC    CL12'CENTS/CUU = ' EYECATCHER FOR ZAPING
*UURATE  DC    F'2975'            CENTS PER CUU (NOV 1986)
*
***********************************************************************
*                                                                     *
*      ***************     1985 ALGORITHM       ***************       *
*                                                                     *
***********************************************************************
*                                                                     *
*      NET K FACTORS ARE COMPUTED USING THE FOLLOWING NUMBERS:        *
*                                                                     *
*      SYSADJUST IS COMPUTED BY TAKING THE SRM CPU CONSTANT FOR       *
*      THE MACHINE AND DIVIDING BY 368.4 (3081K32 SRM CONSTANT).      *
*      CAPTURE RATIO IS EITHER 1.855 FOR TSO OR 1.357 FOR BATCH.      *
*      SYSADJUST AND CAPTURE RATIO ARE APPLIED TO ALL MEASURES        *
*      USING CPU TIME (K01 &  - ALL - OF K04) BEFORE MULTIPLYING      *
*      BY THE NET K FACTORS AS SHOWN BELOW.                           *
*                                                                     *
*                       K00        KXX             NET KXX            *
*                    --------   --------         -----------          *
*                                                                     *
*        K01    =    0.165156 * 0.0345672     =  .0057090             *
*        K02    =    0.165156 * 2.954590E-6   =  .0000004880          *
*        K03    =    0.165156 * 5.802620E-6   =  .0000009583          *
*        K04    =    0.165156 * 2.713970E-6   =  .0000004482          *
*        K05    =    0.165156 * 1.359985E-5   =  .0000022461          *
*        K14    =    0.165156 * 6.880570E-6   =  .0000011364          *
*        K15    =    0.165156 * 6.137730E-5   =  .0000101368          *
*        K16    =    FROM FORMS TABLE (K00 NOT APPLIED)               *
*        K18    =    0.165156 * 9.023050E-4   =  .0001490211          *
*        K21    =    0.165156 * 2.953150E-3   =  .0004877             *
*                                                                     *
***********************************************************************
*
*TANDARD DC    F'3684'            STANDARD CPU SRM CONSTANT * 10
*SOCR    DC    F'1855'            TSO CAPTURE RATIO * 1000
*ATCR    DC    F'1357'            BATCH CAPTURE RATIO * 1000
*
*VGDBLK  DC    F'6233'            "AVERAGE" DISK BLOCK LENGTH
*VGTBLK  DC    F'16384'           "AVERAGE" TAPE BLOCK LENGTH
*VGDTIM  DC    F'13951'           "AVERAGE" NUMBER USECS PER DISK I/O
*VGTTIM  DC    F'13048'           "AVERAGE" NUMBER USECS PER TAPE I/O
*VGTGET  DC    F'20'              "AVERAGE" TERM TGET BYTES
*VGTPUT  DC    F'200'             "AVERAGE" TERM TPUT BYTES
*
*FACT01  DC    F'005709'          NET K01 * 1000000
*FACT02  DC    F'000488'          NET K02 * 1000000000
*FACT03  DC    F'000958'          NET K03 * 1000000000
*FACT04  DC    F'000448'          NET K04 * 1000000000
*FACT05  DC    F'002246'          NET K05 * 1000000000
*FACT14  DC    F'001136'          NET K14 * 1000000000
*FACT15  DC    F'010137'          NET K15 * 1000000000
*FACT18  DC    F'149021'          NET K18 * 1000000000
*FACT21  DC    F'000488'          NET K21 * 1000000
         EJECT
***********************************************************************
*                                                                     *
*      ***************  1984 (81) ALGORITHM     ***************       *
*                                                                     *
***********************************************************************
*                                                                     *
*      NET K FACTORS ARE COMPUTED USING THE FOLLOWING NUMBERS:        *
*                                                                     *
*      SYSADJUST IS COMPUTED BY TAKING THE SRM CPU CONSTANT FOR       *
*      THE MACHINE AND DIVIDING BY 260.8 (3081K+ SRM CONSTANT/1.5).   *
*      CAPTURE RATIO IS EITHER 2.000 FOR TSO OR 1.000 FOR BATCH.      *
*      SYSADJUST AND CAPTURE RATIO ARE APPLIED TO ALL MEASURES        *
*      USING CPU TIME (K01 &  - ALL - OF K04) BEFORE MULTIPLYING      *
*      BY THE NET K FACTORS AS SHOWN BELOW.                           *
*                                                                     *
*                       K00        KXX             NET KXX            *
*                    --------   --------         -----------          *
*                                                                     *
*        K01    =    0.073888 * 0.0616340     =  .0045549             *
*        K02    =    0.073888 * 1.933640E-5   =  .0000014287          *
*        K03    =    0.073888 * 1.498050E-5   =  .0000011069          *
*        K04    =    0.073888 * 5.904840E-6   =  .0000004363          *
*        K05    =    0.073888 * 2.952420E-5   =  .0000021815          *
*        K14    =    0.073888 * 6.567040E-6   =  .0000004852          *
*        K15    =    0.073888 * 6.756530E-5   =  .0000049923          *
*        K16    =    FROM FORMS TABLE (K00 NOT APPLIED)               *
*        K18    =    0.073888 * 4.172970E-4   =  .0000308332          *
*        K21    =    0.073888 * 3.102380E-3   =  .0002292             *
*                                                                     *
***********************************************************************
*
*TANDARD DC    F'2608'            STANDARD CPU SRM CONSTANT * 10
*SOCR    DC    F'2000'            TSO CAPTURE RATIO * 1000
*ATCR    DC    F'1000'            BATCH CAPTURE RATIO * 1000
*
*VGDBLK  DC    F'6233'            "AVERAGE" DISK BLOCK LENGTH
*VGTBLK  DC    F'8192'            "AVERAGE" TAPE BLOCK LENGTH
*VGDTIM  DC    F'13951'           "AVERAGE" NUMBER USECS PER DISK I/O
*VGTTIM  DC    F'13048'           "AVERAGE" NUMBER USECS PER TAPE I/O
*VGTGET  DC    F'60'              "AVERAGE" TERM TGET BYTES
*VGTPUT  DC    F'60'              "AVERAGE" TERM TPUT BYTES
*
*FACT01  DC    F'004555'          NET K01 * 1000000
*FACT02  DC    F'001429'          NET K02 * 1000000000
*FACT03  DC    F'001107'          NET K03 * 1000000000
*FACT04  DC    F'000436'          NET K04 * 1000000000
*FACT05  DC    F'002182'          NET K05 * 1000000000
*FACT14  DC    F'000485'          NET K14 * 1000000000
*FACT15  DC    F'004992'          NET K15 * 1000000000
*FACT18  DC    F'030833'          NET K18 * 1000000000
*FACT21  DC    F'000229'          NET K21 * 1000000
         END
++ SRC(FORMTAB) DISTLIB(ASRCLIB) .
FORMTAB  CSECT
***********************************************************************
*                                                                     *
*                    DSD FORM CHARGE RATE TABLE                       *
*                                                                     *
*        ORIGINAL DATA IS IN 'DCW9.SYSINLIB(WC02IBM)' AND 'DCWT.      *
*        SYSINLIB(OH02R902)'.  IF ANY ADDITIONS OR CHANGES ARE        *
*        MADE TO THESE OTHER TABLES THEY MUST ALSO BE MADE HERE.      *
*                                                                     *
*    ENTRY = FORMID,(CUUS/LINE)*10**9,LINES/PAGE,(CDUS/PAGE)*10**9    *
*                                                                     *
***********************************************************************
         DC    CL4'M001',F'001980',F'050',F'1059000'
         DC    CL4'PD21',F'010570',F'050',F'1059000'
         DC    CL4'PLT2',F'014770',F'085',F'1059000'
         DC    CL4'PLT3',F'014770',F'999',F'1059000'
         DC    CL4'PLT4',F'014770',F'763',F'1059000'
         DC    CL4'PLT5',F'014770',F'094',F'1059000'
         DC    CL4'PLT7',F'014770',F'097',F'1059000'
         DC    CL4'PTW1',F'007887',F'050',F'1059000'
         DC    CL4'P021',F'008010',F'050',F'1059000'
         DC    CL4'P392',F'006030',F'050',F'1059000'
         DC    CL4'UNKN',F'014770',F'050',F'1059000'
         DC    CL4'V001',F'001980',F'050',F'1059000'
         DC    CL4'0000',F'014770',F'034',F'1059000'
         DC    CL4'0001',F'014770',F'003',F'1059000'
         DC    CL4'0002',F'014770',F'023',F'1059000'
         DC    CL4'0003',F'014770',F'026',F'1059000'
         DC    CL4'0009',F'014770',F'001',F'1059000'
         DC    CL4'0019',F'014770',F'001',F'1059000'
         DC    CL4'0021',F'062820',F'050',F'1059000'
         DC    CL4'0039',F'070070',F'050',F'1059000'
         DC    CL4'0068',F'101420',F'050',F'1059000'
         DC    CL4'0069',F'084560',F'050',F'1059000'
         DC    CL4'0075',F'083100',F'050',F'1059000'
         DC    CL4'0099',F'083100',F'058',F'1059000'
         DC    CL4'0100',F'014770',F'001',F'1059000'
         DC    CL4'0121',F'014770',F'037',F'1059000'
         DC    CL4'0122',F'083100',F'050',F'1059000'
         DC    CL4'0131',F'253700',F'050',F'1059000'
         DC    CL4'0132',F'383600',F'050',F'1059000'
         DC    CL4'0133',F'063800',F'050',F'1059000'
         DC    CL4'0138',F'185800',F'050',F'1059000'
         DC    CL4'0141',F'090150',F'050',F'1059000'
         DC    CL4'0163',F'014770',F'001',F'1059000'
         DC    CL4'0163',F'014770',F'001',F'1059000'
         DC    CL4'0164',F'014770',F'001',F'1059000'
         DC    CL4'0166',F'014770',F'035',F'1059000'
         DC    CL4'0167',F'014770',F'016',F'1059000'
         DC    CL4'0168',F'014770',F'035',F'1059000'
         DC    CL4'0170',F'014770',F'016',F'1059000'
         DC    CL4'0173',F'014770',F'010',F'1059000'
         DC    CL4'0180',F'014770',F'016',F'1059000'
         DC    CL4'0182',F'023120',F'050',F'1059000'
         DC    CL4'0183',F'014770',F'001',F'1059000'
         DC    CL4'0184',F'014770',F'001',F'1059000'
         DC    CL4'0188',F'014770',F'007',F'1059000'
         DC    CL4'0190',F'014770',F'003',F'1059000'
         DC    CL4'0191',F'014770',F'003',F'1059000'
         DC    CL4'0192',F'014770',F'003',F'1059000'
         DC    CL4'0193',F'014770',F'003',F'1059000'
         DC    CL4'0194',F'014770',F'003',F'1059000'
         DC    CL4'0195',F'014770',F'003',F'1059000'
         DC    CL4'0202',F'014770',F'001',F'1059000'
         DC    CL4'0203',F'014770',F'003',F'1059000'
         DC    CL4'0204',F'014770',F'003',F'1059000'
         DC    CL4'0208',F'014770',F'001',F'1059000'
         DC    CL4'0212',F'016800',F'050',F'1059000'
         DC    CL4'0213',F'025300',F'050',F'1059000'
         DC    CL4'0214',F'020700',F'050',F'1059000'
         DC    CL4'0215',F'028900',F'050',F'1059000'
         DC    CL4'0216',F'025300',F'050',F'1059000'
         DC    CL4'0217',F'025300',F'050',F'1059000'
         DC    CL4'0218',F'021900',F'050',F'1059000'
         DC    CL4'0224',F'014770',F'003',F'1059000'
         DC    CL4'0225',F'014770',F'003',F'1059000'
         DC    CL4'0226',F'014770',F'003',F'1059000'
         DC    CL4'0228',F'014770',F'055',F'1059000'
         DC    CL4'0237',F'020800',F'050',F'1059000'
         DC    CL4'0249',F'014770',F'001',F'1059000'
         DC    CL4'0250',F'014770',F'040',F'1059000'
         DC    CL4'0251',F'014770',F'040',F'1059000'
         DC    CL4'0255',F'014770',F'001',F'1059000'
         DC    CL4'0261',F'009960',F'050',F'1059000'
         DC    CL4'0261',F'014770',F'016',F'1059000'
         DC    CL4'0269',F'090100',F'050',F'1059000'
         DC    CL4'0270',F'090100',F'055',F'1059000'
         DC    CL4'0271',F'090100',F'055',F'1059000'
         DC    CL4'0272',F'090100',F'055',F'1059000'
         DC    CL4'0273',F'090100',F'055',F'1059000'
         DC    CL4'0274',F'090100',F'055',F'1059000'
         DC    CL4'0275',F'014770',F'010',F'1059000'
         DC    CL4'0276',F'014770',F'038',F'1059000'
         DC    CL4'0277',F'014770',F'051',F'1059000'
         DC    CL4'0279',F'008010',F'050',F'1059000'
         DC    CL4'0279',F'014770',F'057',F'1059000'
         DC    CL4'0280',F'014770',F'055',F'1059000'
         DC    CL4'0281',F'014770',F'049',F'1059000'
         DC    CL4'0282',F'014770',F'043',F'1059000'
         DC    CL4'0284',F'009960',F'050',F'1059000'
         DC    CL4'0288',F'014770',F'020',F'1059000'
         DC    CL4'0289',F'014770',F'039',F'1059000'
         DC    CL4'0291',F'014770',F'019',F'1059000'
         DC    CL4'0299',F'014770',F'038',F'1059000'
         DC    CL4'0304',F'002520',F'036',F'1059000'
         DC    CL4'0309',F'014770',F'027',F'1059000'
         DC    CL4'0312',F'014770',F'039',F'1059000'
         DC    CL4'0316',F'010570',F'050',F'1059000'
         DC    CL4'0317',F'014770',F'030',F'1059000'
         DC    CL4'0705',F'014770',F'001',F'1059000'
         DC    CL4'0732',F'014770',F'001',F'1059000'
         DC    CL4'0904',F'014770',F'001',F'1059000'
         DC    CL4'0905',F'014770',F'001',F'1059000'
         DC    CL4'1075',F'014770',F'002',F'1059000'
         DC    CL4'1076',F'014770',F'002',F'1059000'
         DC    CL4'1093',F'014770',F'037',F'1059000'
         DC    CL4'1103',F'014770',F'033',F'1059000'
         DC    CL4'1109',F'014770',F'033',F'1059000'
         DC    CL4'1115',F'014770',F'038',F'1059000'
         DC    CL4'1130',F'014770',F'016',F'1059000'
         DC    CL4'1132',F'014770',F'008',F'1059000'
         DC    CL4'1145',F'014770',F'030',F'1059000'
         DC    CL4'1148',F'050200',F'050',F'1059000'
         DC    CL4'1154',F'014770',F'031',F'1059000'
         DC    CL4'1160',F'014770',F'037',F'1059000'
         DC    CL4'1161',F'014770',F'043',F'1059000'
         DC    CL4'1184',F'014770',F'002',F'1059000'
         DC    CL4'1233',F'014770',F'055',F'1059000'
         DC    CL4'1234',F'014770',F'055',F'1059000'
         DC    CL4'1235',F'014770',F'055',F'1059000'
         DC    CL4'1600',F'014770',F'031',F'1059000'
         DC    CL4'1601',F'014770',F'030',F'1059000'
         DC    CL4'1602',F'014770',F'030',F'1059000'
         DC    CL4'2999',F'014770',F'059',F'1059000'
         DC    CL4'3101',F'014770',F'009',F'1059000'
         DC    CL4'3104',F'006620',F'023',F'1059000'
         DC    CL4'3105',F'015612',F'051',F'1059000'
         DC    CL4'3106',F'014770',F'024',F'1059000'
         DC    CL4'3108',F'014770',F'053',F'1059000'
         DC    CL4'3109',F'014770',F'037',F'1059000'
         DC    CL4'3110',F'022370',F'062',F'1059000'
         DC    CL4'3111',F'014770',F'043',F'1059000'
         DC    CL4'3113',F'013108',F'050',F'1059000'
         DC    CL4'3114',F'014770',F'011',F'1059000'
         DC    CL4'3115',F'006350',F'050',F'1059000'
         DC    CL4'3117',F'014770',F'022',F'1059000'
         DC    CL4'3118',F'014770',F'022',F'1059000'
         DC    CL4'3122',F'014770',F'019',F'1059000'
         DC    CL4'3123',F'018750',F'023',F'1059000'
         DC    CL4'3124',F'009915',F'050',F'1059000'
         DC    CL4'3125',F'022552',F'050',F'1059000'
         DC    CL4'3130',F'025643',F'050',F'1059000'
         DC    CL4'3132',F'014770',F'031',F'1059000'
         DC    CL4'3133',F'014770',F'031',F'1059000'
         DC    CL4'3134',F'014770',F'049',F'1059000'
         DC    CL4'3139',F'014770',F'007',F'1059000'
         DC    CL4'3144',F'014770',F'014',F'1059000'
         DC    CL4'3146',F'058330',F'026',F'1059000'
         DC    CL4'3147',F'058330',F'026',F'1059000'
         DC    CL4'3148',F'201760',F'010',F'1059000'
         DC    CL4'3149',F'025480',F'016',F'1059000'
         DC    CL4'3150',F'014770',F'008',F'1059000'
         DC    CL4'3152',F'014770',F'012',F'1059000'
         DC    CL4'3154',F'014770',F'026',F'1059000'
         DC    CL4'3155',F'014770',F'026',F'1059000'
         DC    CL4'3159',F'014770',F'016',F'1059000'
         DC    CL4'3160',F'014770',F'001',F'1059000'
         DC    CL4'3161',F'014770',F'001',F'1059000'
         DC    CL4'3165',F'014770',F'003',F'1059000'
         DC    CL4'3166',F'014770',F'003',F'1059000'
         DC    CL4'3169',F'014770',F'003',F'1059000'
         DC    CL4'3170',F'014770',F'003',F'1059000'
         DC    CL4'3174',F'014770',F'003',F'1059000'
         DC    CL4'3175',F'014770',F'003',F'1059000'
         DC    CL4'3176',F'014770',F'001',F'1059000'
         DC    CL4'3177',F'014770',F'001',F'1059000'
         DC    CL4'3187',F'014770',F'003',F'1059000'
         DC    CL4'3188',F'014770',F'003',F'1059000'
         DC    CL4'3189',F'014770',F'003',F'1059000'
         DC    CL4'3190',F'014770',F'001',F'1059000'
         DC    CL4'3192',F'014770',F'003',F'1059000'
         DC    CL4'3193',F'014770',F'003',F'1059000'
         DC    CL4'3194',F'014770',F'001',F'1059000'
         DC    CL4'3195',F'014770',F'003',F'1059000'
         DC    CL4'3196',F'014770',F'003',F'1059000'
         DC    CL4'3197',F'014770',F'003',F'1059000'
         DC    CL4'3200',F'014770',F'016',F'1059000'
         DC    CL4'3201',F'050742',F'020',F'1059000'
         DC    CL4'3202',F'014770',F'010',F'1059000'
         DC    CL4'3203',F'032980',F'032',F'1059000'
         DC    CL4'3204',F'013972',F'050',F'1059000'
         DC    CL4'3209',F'014770',F'026',F'1059000'
         DC    CL4'3210',F'014770',F'025',F'1059000'
         DC    CL4'3239',F'014770',F'026',F'1059000'
         DC    CL4'3240',F'014770',F'022',F'1059000'
         DC    CL4'3255',F'014770',F'012',F'1059000'
         DC    CL4'3256',F'018010',F'054',F'1059000'
         DC    CL4'3257',F'014700',F'054',F'1059000'
         DC    CL4'3259',F'030420',F'050',F'1059000'
         DC    CL4'3262',F'014770',F'055',F'1059000'
         DC    CL4'3265',F'014770',F'011',F'1059000'
         DC    CL4'3266',F'014770',F'016',F'1059000'
         DC    CL4'3268',F'014770',F'008',F'1059000'
         DC    CL4'3276',F'014770',F'026',F'1059000'
         DC    CL4'3278',F'014770',F'054',F'1059000'
         DC    CL4'3280',F'014770',F'001',F'1059000'
         DC    CL4'3286',F'014770',F'001',F'1059000'
         DC    CL4'3287',F'014770',F'098',F'1059000'
         DC    CL4'3289',F'014770',F'027',F'1059000'
         DC    CL4'3290',F'014770',F'056',F'1059000'
         DC    CL4'3291',F'014770',F'003',F'1059000'
         DC    CL4'3292',F'014770',F'003',F'1059000'
         DC    CL4'3293',F'014770',F'003',F'1059000'
         DC    CL4'3294',F'014770',F'003',F'1059000'
         DC    CL4'3296',F'014770',F'026',F'1059000'
         DC    CL4'3297',F'014770',F'008',F'1059000'
         DC    CL4'3314',F'042623',F'050',F'1059000'
         DC    CL4'3318',F'014770',F'035',F'1059000'
         DC    CL4'3319',F'014770',F'018',F'1059000'
         DC    CL4'3320',F'012090',F'047',F'1059000'
         DC    CL4'3321',F'014770',F'031',F'1059000'
         DC    CL4'3330',F'014770',F'042',F'1059000'
         DC    CL4'3374',F'005843',F'027',F'1059000'
         DC    CL4'3401',F'014770',F'006',F'1059000'
         DC    CL4'3402',F'004630',F'050',F'1059000'
         DC    CL4'3407',F'014770',F'028',F'1059000'
         DC    CL4'3408',F'014770',F'055',F'1059000'
         DC    CL4'3411',F'042100',F'050',F'1059000'
         DC    CL4'3414',F'003759',F'030',F'1059000'
         DC    CL4'3416',F'014770',F'010',F'1059000'
         DC    CL4'3419',F'118479',F'050',F'1059000'
         DC    CL4'3420',F'014770',F'034',F'1059000'
         DC    CL4'3421',F'014770',F'026',F'1059000'
         DC    CL4'3422',F'014770',F'040',F'1059000'
         DC    CL4'3423',F'131130',F'050',F'1059000'
         DC    CL4'3425',F'014770',F'020',F'1059000'
         DC    CL4'3426',F'014770',F'056',F'1059000'
         DC    CL4'3428',F'014770',F'059',F'1059000'
         DC    CL4'3429',F'014770',F'042',F'1059000'
         DC    CL4'3430',F'014770',F'033',F'1059000'
         DC    CL4'3479',F'014770',F'001',F'1059000'
         DC    CL4'3482',F'014770',F'001',F'1059000'
         DC    CL4'3483',F'014770',F'001',F'1059000'
         DC    CL4'3500',F'012685',F'050',F'1059000'
         DC    CL4'3502',F'055100',F'014',F'1059000'
         DC    CL4'3506',F'014770',F'010',F'1059000'
         DC    CL4'3507',F'014770',F'023',F'1059000'
         DC    CL4'3511',F'045040',F'050',F'1059000'
         DC    CL4'3512',F'046574',F'050',F'1059000'
         DC    CL4'3513',F'014770',F'009',F'1059000'
         DC    CL4'3516',F'014770',F'028',F'1059000'
         DC    CL4'3519',F'014770',F'046',F'1059000'
         DC    CL4'3524',F'014770',F'929',F'1059000'
         DC    CL4'3563',F'014770',F'001',F'1059000'
         DC    CL4'3566',F'014770',F'001',F'1059000'
         DC    CL4'3600',F'009573',F'048',F'1059000'
         DC    CL4'3601',F'062030',F'116',F'1059000'
         DC    CL4'3604',F'014770',F'015',F'1059000'
         DC    CL4'3639',F'049800',F'012',F'1059000'
         DC    CL4'3800',F'014770',F'003',F'1059000'
         DC    CL4'3801',F'014770',F'003',F'1059000'
         DC    CL4'3802',F'075700',F'008',F'1059000'
         DC    CL4'3815',F'014770',F'001',F'1059000'
         DC    CL4'3902',F'009960',F'058',F'1059000'
         DC    CL4'3903',F'028543',F'050',F'1059000'
         DC    CL4'3904',F'040792',F'050',F'1059000'
         DC    CL4'3910',F'020453',F'050',F'1059000'
         DC    CL4'3912',F'014770',F'007',F'1059000'
         DC    CL4'3917',F'006230',F'044',F'1059000'
         DC    CL4'3918',F'008143',F'058',F'1059000'
         DC    CL4'3919',F'004398',F'050',F'1059000'
         DC    CL4'3920',F'003810',F'055',F'1059000'
         DC    CL4'3921',F'014960',F'045',F'1059000'
         DC    CL4'3922',F'023855',F'049',F'1059000'
         DC    CL4'3923',F'034633',F'043',F'1059000'
         DC    CL4'3924',F'034633',F'055',F'1059000'
         DC    CL4'3925',F'034633',F'050',F'1059000'
         DC    CL4'3926',F'034633',F'046',F'1059000'
         DC    CL4'3931',F'014498',F'050',F'1059000'
         DC    CL4'3932',F'002120',F'062',F'1059000'
         DC    CL4'3933',F'006150',F'048',F'1059000'
         DC    CL4'3937',F'015328',F'050',F'1059000'
         DC    CL4'3940',F'014770',F'007',F'1059000'
         DC    CL4'3941',F'012081',F'050',F'1059000'
         DC    CL4'3942',F'008698',F'050',F'1059000'
         DC    CL4'3943',F'007650',F'050',F'1059000'
         DC    CL4'3949',F'002520',F'050',F'1059000'
         DC    CL4'3950',F'007733',F'050',F'1059000'
         DC    CL4'3952',F'001933',F'044',F'1059000'
         DC    CL4'3953',F'003810',F'033',F'1059000'
         DC    CL4'3954',F'014770',F'009',F'1059000'
         DC    CL4'3955',F'002910',F'062',F'1059000'
         DC    CL4'3956',F'003880',F'063',F'1059000'
         DC    CL4'3999',F'014770',F'058',F'1059000'
         DC    CL4'4444',F'014770',F'381',F'1059000'
         DC    CL4'5060',F'014770',F'903',F'1059000'
         DC    CL4'5068',F'014770',F'026',F'1059000'
         DC    CL4'5069',F'014770',F'026',F'1059000'
         DC    CL4'5203',F'014770',F'016',F'1059000'
         DC    CL4'5555',F'014770',F'081',F'1059000'
         DC    CL4'7777',F'014770',F'034',F'1059000'
         DC    CL4'7868',F'014770',F'002',F'1059000'
         DC    CL4'8888',F'014770',F'028',F'1059000'
         DC    CL4'9999',F'014770',F'065',F'1059000'
*
         DC    CL4'DFLT',F'014770',F'050',F'1059000'
         END
++ SRC(JESCUU$) DISTLIB(ASRCLIB) .
         MACRO
         REGS
         LCLA  &R
.R       AIF   (&R EQ 16).END
R&R      EQU   &R
&R       SETA  &R+1
         AGO   .R
.END     MEND
         TITLE 'CDU CALCULATION AND REPORTING PROGRAM'
*        PRINT NOGEN
         REGS
JESCUU$  CSECT
         SAVE  (14,12),,*         SAVE REGS
         BALR  R10,R0             SET UP TRUE BASE REG
         USING *,R10              SET UP ADDRESSABILITY
         LA    R10,0(R10)         CLEAR HIGH ORDER BYTE FOR XA
         LR    R7,R1              SAVE REG 1
         LA    R2,CDUWSIZ         GET SIZE OF WORKAREA
         A     R2,=F'7'           ROUND UP TO
         N     R2,=X'FFFFFFF8'    A DOUBLE WORD
       GETMAIN R,LV=(R2)          GETMAIN WORK AREA
         LR    R11,R1             SAVE POINTER
         USING CDUSAVE,R11        SET UP ADDRESSABILITY
         LA    R1,CDUSAVE         CHAIN
         ST    R1,8(R13)                THE
         ST    R13,4(R1)                    SAVE
         LR    R13,R1                            AREAS
*
         LA    R2,CUUPRINT        ADDRESS OF GETMAINED AREA TO INIT
         LA    R3,CDUISIZ         GET SIZE OF AREA TO INITIALIZE
         LA    R4,INITDCB         ADDRESS OF INITIALIZATION LINES
         LR    R5,R3              SIZE OF SOURCE (SAME)
         MVCL  R2,R4              INITIALIZE IT
         OPEN  (CUUPRINT,OUTPUT),MF=(E,OPENPL)
         L     R12,=V(CFACTOR)    GET CONSTANT CSECT ADDRESS
         USING CFACTOR,R12        ESTABLISH ADDRESSABILITY
*
         LA    R8,DMAREA          POINT TO DMC HEADER
         STCM  R8,7,DMPARM+1      SAVE IT BACK
         LA    R8,SSAREA          POINT TO SSOB HEADER
         STCM  R8,7,SSPARM+1      SAVE IT BACK
*
         L     R2,=A(SSCS$ASZ*25) GET SIZE OF ARRAY AREA
         A     R2,=A(SSCSIZE+SSCS$PSZ+SSCS$ASZ) SSOB + WORK + 1 ZEROS
         A     R2,=F'7'           ROUND UP TO
         N     R2,=X'FFFFFFF8'    A DOUBLE WORD
       GETMAIN R,LV=(R2)          GETMAIN WORK AREA
*
         STM   R2,R5,CDUSAVE+12   SAVE REGS
*
         ST    R1,STORLIST        SAVE IN STOR LIST
         LR    R3,R2              GET SIZE OF AREA TO INITIALIZE
         AR    R3,R1              ADD BEGINNING ADDRESS
         BCTR  R3,R0              AND SUBTRACT 1
         STCM  R3,7,STORLIST+5    AND SAVE DOWN
*
         LR    R3,R2              GET SIZE OF AREA TO INITIALIZE
         LR    R2,R1              ADDRESS OF GETMAINED AREA TO INIT
         LA    R4,=F'0'           ADDRESS OF DUMMY INIT DATA AREA
         SR    R5,R5              FILL CHAR (00) AND SOURCE SIZE (0)
         MVCL  R2,R4              INITIALIZE IT
         LM    R2,R5,CDUSAVE+12   RESTORE REGS
         LR    R3,R1              POINT TO SSOB PROPER
         ST    R3,SSOBPTR         PUT IN HEADER
         USING SSCSBGN,R3         ESTABLISH ADDRESSABILITY
         LA    R8,SSCS$CAE        POINT TO FIRST ARRAY ENTRY
         USING SSCS$CAE,R8        ESTABLISH ADDRESSABILITY
*
         MVI   SSCSFLGS,SSCS$CST  INDICATE EXTENDED STATUS
*
         L     R2,=A(SSCS$ASZ*25) GET SIZE OF ARRAY AREA
         STH   R2,SSCSDIMP        SAVE DOWN SIZE OF WORK AREA
         LR    R1,R8              POINT TO FIRST ARRAY ENTRY
         AR    R1,R2              POINT TO END OF LAST ARRAY ENTRY
         ST    R1,LASTONE         SAVE FOR END TEST
         A     R2,=A(SSCSIZE+SSCS$PSZ+SSCS$ASZ) SSOB + WORK + 1 ZEROS
         STH   R2,SSCSLEN         SAVE TOTAL LENGTH
*
         L     R1,0(R7)           GET PARM POINTER
         LTR   R1,R1              ANY THERE ?
         BZ    THISJOB            NO - DO THIS JOB
         LH    R2,0(R1)           GET LENGTH
         C     R2,=F'16'          IS IT 16 BYTES ?
         BNE   THISJOB            NO - DON'T KNOW WHAT IT IS
         MVC   SSCSJOBN(16),2(R1) MOVE IT IN
         B     SVC109             AND GO DO IT
*
THISJOB  L     R2,16              CVT POINTER
         L     R2,0(R2)           TCB WORDS POINTER
         L     R2,4(R2)           CURRENT TCB POINTER
         L     R2,X'B4'(R2)       ADDRESS OF JSCB
         L     R1,X'104'(R2)      JCT-10 POINTER
         MVC   SSCSJOBN(8),24(R1) MOVE IN CURRENT JOBNAME FROM JCT
         L     R2,X'13C'(R2)      ADDRESS OF SSIB
         MVC   SSCSJOBI(4),=CL4'JOB0' FIRST PART
         MVC   SSCSJOBI+4(4),16(R2) MOVE IN CURRENT JOB NUMBER
         L     R2,X'20'(R2)       ADDRESS OF MEME
*
         L     R15,16             CVT POINTER
         TM    X'74'(R15),X'80'   IS THIS MVS XA ?
         BZ    *+10               NO - DON'T NEED 31 BIT MODE
         L     R15,=A(X'80000000'+MODX31) SET RETURN ADDRESS
         DC    X'0B0F'            (BSM   R0,R12) SET 31 BIT MODE
MODX31   EQU   *
*
         L     R1,X'120'(R2)      ACB ADDR FROM MEMSACB FLD IN IATYMEM
         LTR   R1,R1              IS THERE ONE THERE?
         BZ    RETM24             NO - RETURN
         L     R2,X'124'(R2)      DEB ADDR FROM MEMSDEB FLD IN IATYMEM
         L     R2,X'08'(R2)       DSS ADDR FROM DEBIRBAD FLD IN IEZDEB
         CLC   0(4,R2),=CL4'DSS ' IS THIS A DSS? (JES3 1.3.4)
         BE    DSSPTR             YES GO GET DSB POINTER
         CLC   0(4,R2),=CL4'DSB ' IS THIS A DSB? (JES3 2.1.5)
         BE    DSSPTR+4           YES - SKIP DSS
         B     RETM24             NO - I DONT KNOW WHO THIS IS
DSSPTR   L     R2,X'04'(R2)       DSB ADDR FROM DSSDSB FLD IN IATYDSS
         L     R2,X'24'(R2)       DMC ADDR FROM DSBCDMC FLD IN IATYDSB
         ST    R2,DMADDR          SAVE IT IN PARM LIST
         LA    R1,DMPARM          LOAD ADDRESS OF DMPARM
         LA    R15,16             ESR CODE FOR DMC GET
         SVC   109                ESR SVC
*
RETM24   L     R15,16             CVT POINTER
         TM    X'74'(R15),X'80'   IS THIS MVS XA ?
         BZ    *+10               NO - DON'T NEED 31 BIT MODE
         LA    R15,MODX24         SET RETURN ADDRESS
         DC    X'0B0F'            (BSM   R0,R12) SET 24 BIT MODE
MODX24   EQU   *
*
SVC109   LA    R1,SSPARM          LOAD ADDRESS OF SSOB
         LA    R15,16             ESR CODE FOR IEFSSREQ
         SVC   109                ESR SVC
*
*        STM   R2,R5,CDUSAVE+12   SAVE REGS
*        LR    R5,R15             SAVE R15
*        OPEN  (SNAPDUMP,OUTPUT),MF=(E,SNAPPL)
*        LR    R15,R5             RESTORE R15
*        TM    SNAPDUMP+48,X'10'  DID IT OPEN ?
*        BNO   SKIPSNAP           NO SKIP ALL THIS
*        LA    R2,SNAPDUMP        POINT TO DCB
*        LA    R3,STORLIST        POINT TO LIST
*        SNAP  DCB=(2),LIST=(3),MF=(E,SNAPLIST)
*        CLOSE MF=(E,SNAPPL)
*        LR    R15,R5             RESTORE R15
*KIPSNAP LM    R2,R5,CDUSAVE+12   RESTORE REGS
*
         LTR   R15,R15            TEST RETURN CODE
         BNZ   DEFAULT            NOT ZERO - SSOB ERROR - NO DATA
         CLC   SSOBRC(4),=F'0'    SSOB RETURN CODE ALSO ZERO ?
         BE    SSOB1              YES - GO PROCESS
*
DEFAULT  MVC   SSOBRC(4),=F'0'    ZERO OUT RETURN CODE
         MVC   SSCS$JDS(4),=F'0'  CLEAR JDS POINTER JUST IN CASE
         MVI   SSCS$CAE,X'00'     ZERO OUT
         MVC   SSCS$CAE+1(255),SSCS$CAE    AREA
         MVC   SSCS$TYP,=CL8'PRT     ' DEFAULT
         MVC   SSCS$FRM,=CL4'3920' DEFAULT
         MVI   SSCS$CPY,1         DEFAULT
         MVC   SSCS$LNC,=F'10000' NO - MUST BE BATCH SO CHANGE TO 10K
*
SSOB1    CLC   LINESUM(4),=F'0'   FIRST TIME THROUGH
         BNE   SSOBQ              YES - SKIP HEADINGS
         MVC   LINEXX+00(46),SSCS$FIL+26
*
*        ABORT PRINTING CDU NUMBERS
*
         MVC   LINEXX+73(22),LINEXX+95
         MVI   LINEXX+95,C' '
         MVC   LINEXX+96(21),LINEXX+95
*
         PUT   CUUPRINT,LINEPX
         MVI   LINEXX,C' '        BLANK
         MVC   LINEXX+1(120),LINEXX      OUT LINE
         PUT   CUUPRINT,LINE00
         PUT   CUUPRINT,LINE01
         PUT   CUUPRINT,LINE02
SSOBQ    L     R1,LASTONE         GET POINTER TO LAST (ZERO) ARRAY
         CLC   SSCS$CAE(SSCS$ASZ),0(R1) IS THIS ONE EMPTY ?
         BE    SPOOLED            YES - GET OUT
         CLC   SSCS$CAE(SSCS$ASZ),SSCS$FIL OR DUPLICATE MESSAGE ?
         BE    SPOOLED            YES - GET OUT
*
         MVC   LINEXX+00(8),SSCS$STP
         MVC   LINEXX+09(8),SSCS$DDN
         MVC   LINEXX+18(8),SSCS$DST
         MVC   LINEXX+27(4),SSCS$TYP
         MVC   LINEXX+32(4),SSCS$FRM
         MVC   LINEXX+37(4),SSCS$CAR
         MVC   LINEXX+42(3),SSCS$UCS
         MVC   LINEXX+47(1),SSCS$CLS
*
         CLC   SSCS$DDN(8),=CL8'SYSMSG  '
         BNE   NORMALC
         L     R1,DMC+72          GET SYSMSG LINECOUNT FROM OUR DMC
         LTR   R1,R1              WAS IT ZERO ?
         BZ    NORMALC            YES - USE SSOB COUNT
         LA    R1,12(R1)          12 LINES FOR US
         ST    R1,SSCS$LNC        STORE SYSMSG LINECOUNT
*
NORMALC  L     R1,SSCS$LNC        GET LINECOUNT FROM SSOB
         CVD   R1,WORK            CVD
         L     R6,LINESUM         GET SUM
         AR    R6,R1              ADD SUM
         ST    R6,LINESUM         AND SAVE IT
         MVC   LINEXX+48(10),=X'40206B2020206B202120'
         ED    LINEXX+48(10),WORK+4
*
         L     R6,=V(FORMTAB)     GET ADDRESS OF FORM CHARGE TABLE
FLOOP    CLC   0(4,R6),=CL4'DFLT' END OF LIST ?
         BE    FHIT               YES - GO USE IT
         CLC   0(4,R6),SSCS$FRM   THIS OUR FORM?
         BE    FHIT               YES - GO USE IT
         LA    R6,16(R6)          NEXT ONE
         B     FLOOP              AROUND
FHIT     L     R7,SSCS$PGS        GET PAGE COUNT
         LTR   R7,R7              ANYTHING?
         B     PAGCALC            ALWAYS USE TABLE LINECOUNT (LIKE R2)
         BZ    PAGCALC            NO - USE LINECOUNT
         LR    R1,R7              PUT IN REG 1
         B     FRMCALC            GO COMPUT CDUS
PAGCALC  SR    R0,R0              CLEAR REG
         A     R1,8(R6)           ADD LINES/PAGE FOR LAST PAGE
         S     R1,=F'1'           SUBTRACT ONE
         D     R0,8(R6)           DIVIDE BY LINES/PAGE
FRMCALC  SR    R7,R7              CLEAR REG
         IC    R7,SSCS$CPY        GET COPY COUNT
         MR    R0,R7              AND MULTIPLY
         L     R9,PAGESUM         GET SUM
         AR    R9,R1              ADD SUM
         ST    R9,PAGESUM         AND SAVE IT
         CVD   R1,WORK            CVD
         MVC   LINEXX+60(10),=X'40206B2020206B202120'
         ED    LINEXX+60(10),WORK+4
*
         SR    R9,R9              CLEAR REG
         IC    R9,SSCS$CPY        GET COPY COUNT
         CVD   R9,WORK            CVD
         MVC   LINEXX+58(4),=X'40202120'
         ED    LINEXX+58(4),WORK+6
*
         CLI   SSCS$CLS,C'V'      SPECIAL TEST FOR VPS
         BE    NOPAGES            YES - WE CAN NOT YET BILL FOR VPS
         CLC   SSCS$DST,=CL8'AUTOCOM ' MICROFICHE ?
         BE    NOPAGES            YES - WE DONT CHARGE PAGES FOR FICHE
         CLC   SSCS$DST(3),=C'RMT' REMOTE DESTINATION ?
         BNE   SIPAGES            NO - PROBABLY CHARGED FOR
         CLC   SSCS$DST+3(2),=C'05' SPECIAL CHARGED-FOR REMOTE
         BE    SIPAGES            YES - GO COUNT THIS ONE
         CLC   SSCS$DST+3(2),=C'27' SPECIAL CHARGED-FOR REMOTE
         BE    SIPAGES            YES - GO COUNT THIS ONE
         CLC   SSCS$DST+3(2),=C'29' SPECIAL CHARGED-FOR REMOTE
         BE    SIPAGES            YES - GO COUNT THIS ONE
         CLC   SSCS$DST+3(2),=C'31' SPECIAL CHARGED-FOR REMOTE
         BE    SIPAGES            YES - GO COUNT THIS ONE
         CLC   SSCS$DST+3(2),=C'34' SPECIAL CHARGED-FOR REMOTE
         BE    SIPAGES            YES - GO COUNT THIS ONE
         CLC   SSCS$DST+3(2),=C'66' SPECIAL CHARGED-FOR REMOTE
         BE    SIPAGES            YES - GO COUNT THIS ONE
         CLC   SSCS$DST+3(2),=C'72' SPECIAL CHARGED-FOR REMOTE
         BE    SIPAGES            YES - GO COUNT THIS ONE
         CLC   SSCS$DST+3(2),=C'73' SPECIAL CHARGED-FOR REMOTE
         BE    SIPAGES            YES - GO COUNT THIS ONE
         CLC   SSCS$DST+3(2),=C'77' SPECIAL CHARGED-FOR REMOTE
         BNE   NOPAGES            NO - SKIP COUNTING
NOPAGES  MVC   LINEXX+100(9),=X'4040404040F04BF0F0'
         MVC   LINEXX+78(7),=X'4040F04BF0F0F0'
         B     EXPAGES
*
SIPAGES  M     R0,12(R6)          MULTIPLY PAGECOUNT BY TOTAL CHARGE
         LA    R14,FORMS          POINT TO FORMS
         BAL   R9,DOLLARS         CONVERT TO DOLLARS
         MVC   LINEXX+100(9),=X'4020202021204B2020'
         ED    LINEXX+100(9),WORK+4
         AP    DOLSUM,WORK        ADD TO TOTAL
         CVD   R1,WORK            CONVERT CDUS TO DECIMAL
         MVC   LINEXX+78(7),=X'4021204B202020'
         ED    LINEXX+78(7),WORK+5
         AP    CDUSUM,WORK        ADD TO TOTAL
*
EXPAGES  CLC   SSCS$DDN(8),=CL8'JESMSG  '  DONT
         BE    NORMALX                         COUNT
         CLC   SSCS$DDN(8),=CL8'JESJCL  '           THESE
         BE    NORMALX                                   IN
         CLC   SSCS$DDN(8),=CL8'SYSMSG  '      LINES SPOOLED
         BE    NORMALX
         LA    R7,1(R7)           ADD ONE FOR COPY SPOOLED
NORMALX  L     R1,SSCS$LNC        GET LINECOUNT
         MR    R0,R7              GET TOTAL LINES PRINTED
         L     R15,PRINT          GET TOTAL SO FAR
         AR    R15,R1             ADD THIS ONE
         ST    R15,PRINT          SAVE IT BACK
         D     R0,=F'10'          SCALE TO 10K LINES
         C     R0,=F'05'          MORE THAN 1/2
         BNH   *+8                NO - SKIP ADDING
         A     R1,=F'1'           ADD ONE
*
         CLI   SSCS$CLS,C'V'      SPECIAL TEST FOR VPS
         BE    NOLINES            YES - WE CAN NOT YET BILL FOR VPS
         CLC   SSCS$DST(3),=C'RMT' REMOTE DESTINATION ?
         BNE   SILINES            NO - PROBABLY CHARGED FOR
         CLC   SSCS$DST+3(2),=C'05' SPECIAL CHARGED-FOR REMOTE
         BE    SILINES            YES - GO COUNT THIS ONE
         CLC   SSCS$DST+3(2),=C'27' SPECIAL CHARGED-FOR REMOTE
         BE    SILINES            YES - GO COUNT THIS ONE
         CLC   SSCS$DST+3(2),=C'29' SPECIAL CHARGED-FOR REMOTE
         BE    SILINES            YES - GO COUNT THIS ONE
         CLC   SSCS$DST+3(2),=C'31' SPECIAL CHARGED-FOR REMOTE
         BE    SILINES            YES - GO COUNT THIS ONE
         CLC   SSCS$DST+3(2),=C'34' SPECIAL CHARGED-FOR REMOTE
         BE    SILINES            YES - GO COUNT THIS ONE
         CLC   SSCS$DST+3(2),=C'66' SPECIAL CHARGED-FOR REMOTE
         BE    SILINES            YES - GO COUNT THIS ONE
         CLC   SSCS$DST+3(2),=C'72' SPECIAL CHARGED-FOR REMOTE
         BE    SILINES            YES - GO COUNT THIS ONE
         CLC   SSCS$DST+3(2),=C'73' SPECIAL CHARGED-FOR REMOTE
         BE    SILINES            YES - GO COUNT THIS ONE
         CLC   SSCS$DST+3(2),=C'77' SPECIAL CHARGED-FOR REMOTE
         BNE   NOLINES            NO - SKIP COUNTING
NOLINES  MVC   LINEXX+92(9),=X'4040404040F04BF0F0'
         MVC   LINEXX+71(7),=X'4040F04BF0F0F0'
         B     EXLINES
*
SILINES  M     R0,CFACT1G         MULTIPLY BY CFACTOR
         LA    R14,PRT10          DUMMY POINTER
         BAL   R9,DOLLARS         CONVERT TO DOLLARS
         MVC   LINEXX+92(9),=X'4020202021204B2020'
         ED    LINEXX+92(9),WORK+4
         AP    DOLSUM,WORK        ADD TO TOTAL
         CVD   R1,WORK            CONVERT CDUS TO DECIMAL
         MVC   LINEXX+71(7),=X'4021204B202020'
         ED    LINEXX+71(7),WORK+5
         AP    CDUSUM,WORK        ADD TO TOTAL
*
EXLINES  MVC   WORK(9),=X'4020202021204B2020'
         ED    WORK(9),DOLSUM+4
         MVC   LINEXX+109(8),WORK+1
         AP    DOLTOT,DOLSUM      ADD TO TOTAL
         MVC   DOLSUM,=PL8'0'     THEN CLEAR
         MVC   WORK(9),=X'40202021204B202020'
         ED    WORK(9),CDUSUM+4
         MVC   LINEXX+85(7),WORK+2
         AP    CDUTOT,CDUSUM      ADD TO TOTAL
         MVC   CDUSUM,=PL8'0'     THEN CLEAR
*
*        ABORT PRINTING CDU NUMBERS
*
         MVC   LINEXX+73(22),LINEXX+95
         MVI   LINEXX+95,C' '
         MVC   LINEXX+96(21),LINEXX+95
*
         PUT   CUUPRINT,LINEPX
         LA    R8,SSCS$ASZ(R8)    POINT TO NEXT ARRAY ENTRY
         B     SSOBQ              GO LOOK FOR ANOTHER ONE
*
SPOOLED  CLC   SSCS$JDS(4),=F'0'  LAST JDS POINTER THERE ?
         BE    FREEJES            NO - FREE GETMAINED AREA
*
         L     R1,SSCS$JDS        PICK UP JDS POINTER
         STM   R2,R5,CDUSAVE+12   SAVE REGS
         LA    R2,SSCSDIMR        POINT TO BEGINNING OF RETURNED AREA
         LH    R3,SSCSDIMP        GET SIZE OF ARRAY AREA
         A     R3,=A(SSCSELSZ+SSCS$PSZ+SSCS$ASZ+2) ARRAY+WORK+1 ZEROS
         LA    R4,=F'0'           ADDRESS OF DUMMY INIT DATA AREA
         SR    R5,R5              FILL CHAR (00) AND SOURCE SIZE (0)
         MVCL  R2,R4              INITIALIZE IT
         LM    R2,R5,CDUSAVE+12   RESTORE REGS
         ST    R1,SSCS$JDS        SAVE JDS POINTER
         LA    R8,SSCSIZE+SSCS$PSZ(,R3) FIRST ARRAY ENTRY
         B     SVC109             AND GO GET ANOTHER LOAD
*
FREEJES  L     R1,SSOBPTR         ADDRESS OF ARRAY
         LH    R2,SSCSLEN         SIZE OF WORK AREA
         A     R2,=F'7'           ROUND UP TO
         N     R2,=X'FFFFFFF8'    A DOUBLE WORD
      FREEMAIN R,LV=(R2),A=(R1)   FREEMAIN WORK AREA
         DROP  R3,R8              RELEASE REGS
         MVI   LINEXX,C' '        BLANK
         MVC   LINEXX+1(120),LINEXX      OUT LINE
         L     R1,LINESUM         GET SUM
         CVD   R1,WORK            CVD
         MVC   LINEXX+48(10),=X'40206B2020206B202120'
         ED    LINEXX+48(10),WORK+4
*
         L     R1,PAGESUM         GET SUM
         CVD   R1,WORK            CVD
         MVC   LINEXX+60(10),=X'40206B2020206B202120'
         ED    LINEXX+60(10),WORK+4
*
         L     R15,FORMS          POINT TO FORMS
         BAL   R9,CENTS           CONVERT TO DOLLARS
         MVC   LINEXX+100(9),=X'4020202021204B2020'
         ED    LINEXX+100(9),WORK+4
         CVD   R1,WORK            CONVERT CDUS TO DECIMAL
         MVC   LINEXX+78(7),=X'4021204B202020'
         ED    LINEXX+78(7),WORK+5
*
         SR    R0,R0              CLEAR REG
         L     R1,PRINT           POINT TO TRUE SPOOL COUNT
         D     R0,=F'10'          SCALE TO 10K LINES
         C     R0,=F'05'          MORE THAN 1/2
         BNH   *+8                NO - SKIP ADDING
         A     R1,=F'1'           ADD ONE
         M     R0,CFACT1G         MULTIPLY BY CFACTOR
         LA    R14,PRT10          DUMMY POINTER
         BAL   R9,DOLLARS         CONVERT TO DOLLARS
         MVC   LINEXX+92(9),=X'4020202021204B2020'
         ED    LINEXX+92(9),WORK+4
         CVD   R1,WORK            CONVERT CDUS TO DECIMAL
         MVC   LINEXX+71(7),=X'4021204B202020'
         ED    LINEXX+71(7),WORK+5
*
         MVC   WORK(9),=X'4020202021204B2020'
         ED    WORK(9),DOLTOT+4
         MVC   LINEXX+109(8),WORK+1
         MVC   WORK(9),=X'40202021204B202020'
         ED    WORK(9),CDUTOT+4
         MVC   LINEXX+85(7),WORK+2
*
         PUT   CUUPRINT,LINE09
*
*        ABORT PRINTING CDU NUMBERS
*
         MVC   LINEXX+73(22),LINEXX+95
         MVI   LINEXX+95,C' '
         MVC   LINEXX+96(21),LINEXX+95
*
         PUT   CUUPRINT,LINEPX
         CLOSE MF=(E,OPENPL)
         LA    R2,CDUWSIZ         GET SIZE OF WORKAREA
         A     R2,=F'7'           ROUND UP TO
         N     R2,=X'FFFFFFF8'    A DOUBLE WORD
         L     R13,4(R13)         BACK CHAIN SAVE AREAS
      FREEMAIN R,LV=(R2),A=(R11)  FREEMAIN WORK AREA
        RETURN (14,12),RC=0       RETURN
*
DOLLARS  D     R0,=F'1000000'     GET CDUS * 1000
         C     R0,=F'500000'      MORE THAN 1/2 ?
         BNH   *+8                NO - SKIP ADDING
         A     R1,=F'1'           ADD ONE
         LR    R15,R1             SAVE REG
         A     R1,0(R14)          ADD THIS ONE
         ST    R1,0(R14)          SAVE IT BACK
CENTS    LR    R1,R15             RESTORE REG
         M     R0,CDURATE         MULTIPLY BY $/CDU * 100
         D     R0,=F'1000'        GET DOLLARS
         C     R0,=F'500'         MORE THAN 1/2 ?
         BNH   *+8                NO - SKIP ADDING
         A     R1,=F'1'           ADD ONE
         CVD   R1,WORK            CVD
         LR    R1,R15             RESTORE REG
         BR    R9                 RETURN
         EJECT
LINE00   DC    CL01' '
         DC    CL40'                                        '
         DC    CL40'                                   1G   '
         DC    CL40'   1P    TOTAL                          '
LINE01   DC    CL01' '
         DC    CL40'STEPNAME  DDNAME    DEST   TYPE FORM FCB'
         DC    CL40'  UCS  C LINECOUNT CPY  PAGES   DOLLARS '
         DC    CL40'DOLLARS DOLLARS                         '
LINE02   DC    CL01' '
         DC    CL40'-------- -------- -------- ---- ---- ---'
         DC    CL40'- ---- - --------- --- -------  ------- '
         DC    CL40'------- -------                         '
LINE09   DC    CL01' '
         DC    CL40'                                        '
         DC    CL40'         ---------     -------  ------- '
         DC    CL40'------- -------                         '
         LTORG
         EJECT
         PRINT GEN
SSOB     DSECT
      IEFJSSOB CS,CONTIG=NO       SSOB HEADER + NON-CONTIG SSOB
         EJECT
CDUWORK  DSECT
CDUSAVE  DS    18F                SAVE AREA
WORK     DS    2D
CUUPRINT DS    0D
         DCB   DDNAME=CUUPRINT,MACRF=PM,DSORG=PS,                      X
               RECFM=FA,LRECL=121,BLKSIZE=121
SNAPDUMP DCB   DDNAME=SNAPDUMP,MACRF=(W),DSORG=PS,                     X
               RECFM=VBA,LRECL=125,BLKSIZE=1632
SNAPLIST SNAP  MF=L
         DS    0D
STORLIST DS    F
         DS    XL1,AL3
DMPARM   DS    XL1,AL3            ADDRESS OF DMC HEADER
DMAREA   DS    CL4                CONTROL BLOCK IDENTIFIER
DMADDR   DS    AL4                CONTROL BLOCK ADDRESS
DMC      DS    XL84               DMC ITSELF
SSPARM   DS    XL1,AL3            ADDRESS OF SSOB HEADER
SSAREA   DS    CL4                CONTROL BLOCK IDENTIFIER
         DS    AL2                LENGTH OF SSOB HEADER
         DS    AL2                FUNCTION ID
         DS    AL4                ADDRESS OF SSIB OR ZERO
SSOBRC   DS    F                  RETURN CODE FROM SUBSYSTEM
SSOBPTR  DS    AL4                FUNCTION DEPENDENT AREA POINTER
         DS    F                  SAVE RETURN ADDRESS FOR 31 BIT CALL
         DS    CL4                RESERVED
OPENPL   DS    F                  OPEN PARM LIST
SNAPPL   DS    F                  OPEN PARM LIST
LASTONE  DS    F
LINESUM  DS    F
PAGESUM  DS    F
PRINT    DS    F
PRT10    DS    F
FORMS    DS    F
CDUSUM   DS    PL8
DOLSUM   DS    PL8
CDUTOT   DS    PL8
DOLTOT   DS    PL8
LINEPX   DS    CL1
LINEXX   DS    CL120
CDUWSIZ  EQU   *-CDUSAVE          LENGTH OF WORK AREA
CDUISIZ  EQU   *-CUUPRINT         LENGTH TO INITIALIZE
         EJECT
CFACTOR  DSECT
*
EYECATCH DS    CL12               EYECATCHER FOR ZAPING
CDURATE  DS    F                  CENTS PER CDU (JAN 1987)
*
STANDSRM DS    F                  STANDARD CPU SRM CONSTANT * 10
*
BYTTGET  DS    F                  "AVERAGE" TERM TGET BYTES
BYTTPUT  DS    F                  "AVERAGE" TERM TPUT BYTES
*
CFACT1A  DS    F                  NET C1A * 1000000
CFACT1B  DS    F                  NET C1B * 1000000
CFACT1C  DS    F                  NET C1C * 1000000
CFACT1D  DS    F                  NET C1D * 1000000
CFACT1F  DS    F                  NET C1F * 1000000
CFACT1G  DS    F                  NET C1G * 1000000
CFACT1J  DS    F                  NET C1J * 1000000
CFACT1M  DS    F                  NET C1M * 1000000
CFACT1P  DS    F                  NET C1P * 1000000
         EJECT
JESCUU$  CSECT
INITDCB  DS    0D
         DCB   DDNAME=CUUPRINT,MACRF=PM,DSORG=PS,                      X
               RECFM=FA,LRECL=121,BLKSIZE=121
         DCB   DDNAME=SNAPDUMP,MACRF=(W),DSORG=PS,                     X
               RECFM=VBA,LRECL=125,BLKSIZE=1632
         SNAP  MF=L
         DS    0D
         DC    F'0'
         DC    XL1'80',AL3(0)
         DC    X'80',AL3(0)       ADDRESS OF DMC HEADER
         DC    C'DMC '            CONTROL BLOCK IDENTIFIER
         DC    A(0)               ADDRESS OF DMC
         DC    XL84'00'           DMC ITSELF
         DC    X'80',AL3(0)       ADDRESS OF SSOB HEADER
         DC    C'SSOB'            CONTROL BLOCK IDENTIFIER
         DC    AL2(SSOBHSIZ)      LENGTH OF SSOB HEADER
         DC    AL2(03)            FUNCTION ID (JOB STATUS - SPECIAL)
         DC    A(0)               ADDRESS OF SSIB OR ZERO
         DC    F'0'               RETURN CODE FROM SUBSYSTEM
         DC    A(0)               FUNCTION DEPENDENT AREA POINTER
         DC    F'0'               SAVE RETURN ADDRESS FOR 31 BIT CALL
         DC    XL4'00000000'      RESERVED
         DC    XL4'80000000'      OPEN PARM LIST
         DC    XL4'80000000'      OPEN SNAP LIST
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    PL8'0'
         DC    PL8'0'
         DC    PL8'0'
         DC    PL8'0'
         DC    CL121' '
         END
++ SRC(JOBCUU$) DISTLIB(ASRCLIB) .
         MACRO
         REGS
         LCLA  &R
.R       AIF   (&R EQ 16).END
R&R      EQU   &R
&R       SETA  &R+1
         AGO   .R
.END     MEND
         TITLE 'CDU CALCULATION AND REPORTING PROGRAM'
         PRINT NOGEN
JOBCUU$  CSECT
***********************************************************************
*                                                                     *
*        JOBCUU$:                                                     *
*                                                                     *
*        THIS PROGRAM COMPUTES THE ESTIMATED COST OF THE CURRENT      *
*        JOB STEP.  IT OBTAINS DATA FROM THE CURRENT ASCB AND TCT.    *
*        IT ALSO OBTAINS SYSOUT DATA FROM JES3 USING THE "STATUS"     *
*        SUB SYSTEM INTERFACE (REQUIRES MODIFICATION TO IATGRWQ TO    *
*        RUN THE JDS CHAIN AND RETURN REQUSTED DATA).  OUTPUT IS      *
*        WRITTEN TO DDNAME OF CUUPRINT OR IF IN FOREGROUND TPUTS      *
*        ARE USED TO WRITE OUTPUT LINES TO THE TERMINAL.              *
*                                                                     *
***********************************************************************
         REGS
         ENTRY PRTCUU$
         ENTRY IEFCUU$
         WXTRN IEFYS
         USING *,R15
         SAVE  (14,12),,*         SAVE REGS
         SR    R8,R8              SET UP FLAG REG (NON-IEFACTRT)
         SR    R9,R9              SET UP FLAG REG (NON-TSO-JOB)
         B     SETUP              GET ON WITH IT
*
         USING *,R15
PRTCUU$  SAVE  (14,12),,*         SAVE REGS
***********************************************************************
*                                                                     *
*        PRTCUU$:                                                     *
*                                                                     *
*        SAME AS JOBCUU$ EXCEPT THAT IN FOREGROUND OUTPUT WILL BE     *
*        WRITTEN TO DDNAME CUUPRINT.  IF CUUPRINT CANNOT BE OPENED    *
*        (AND IT IS IN FOREGROUND) THEN TPUTS ARE USED INSTEAD.       *
*                                                                     *
***********************************************************************
         SR    R8,R8              SET UP FLAG REG (NON-IEFACTRT)
         ICM   R9,15,=X'000000FF' SET UP FLAG REG (TSO-JOB)
         B     SETUP              GET ON WITH IT
*
         USING *,R15
IEFCUU$  SAVE  (14,12),,*         SAVE REGS
***********************************************************************
*                                                                     *
*        IEFCUU$:                                                     *
*                                                                     *
*        THIS PROGRAM COMPUTES THE ESTIMATED COST OF THE CURRENT      *
*        JOB STEP. IT IS CALLED FROM IEFACTRT AND OBTAINS DATA FROM   *
*        THE TYPE 30 SUBTYPE 4 SMF RECORD CURRENTLY BEING PROCESSED.  *
*        A WORK AREA IS GETMAINED AND DATA FROM ALL SUBTYPE 4 REC-    *
*        ORDS IS ACCUMULATED AND A JOB TOTAL IS WRITTEN OUT WHEN      *
*        A SUBTYPE 5 RECORD IS ENCOUNTERED.  FOR ALL SUBTYPE 5S IT    *
*        ALSO OBTAINS SYSOUT DATA FROM JES3 USING THE "STATUS"        *
*        SUB SYSTEM INTERFACE (REQUIRES MODIFICATION TO IATGRWQ TO    *
*        RUN THE JDS CHAIN AND RETURN REQUSTED DATA).  OUTPUT IS      *
*        ALWAYS WRITTEN TO TO THE JOBS SYSMSG FILE.                   *
*                                                                     *
***********************************************************************
         ICM   R8,15,=X'000000FF' SET UP FLAG REG (IEFACTRT)
         SR    R9,R9              SET UP FLAG REG (NON-TSO-JOB)
         DROP  R15                DROP ENTRY REG
*
SETUP    BALR  R10,R0             SET UP BASE REG
         USING *,R10              SET UP ADDRESSABILITY
         LA    R10,0(R10)         CLEAR HIGH ORDER BYTE FOR XA
         LR    R7,R1              SAVE REG 1
         LA    R2,CDUWSIZ         GET SIZE OF WORKAREA
         A     R2,=F'7'           ROUND UP TO
         N     R2,=X'FFFFFFF8'    A DOUBLE WORD
       GETMAIN R,LV=(R2)          GETMAIN WORK AREA
         LR    R11,R1             SAVE POINTER
         USING CDUSAVE,R11        SET UP ADDRESSABILITY
         LA    R1,CDUSAVE         CHAIN
         ST    R1,8(R13)                THE
         ST    R13,4(R1)                    SAVE
         LR    R13,R1                            AREAS
*
         ST    R7,SAV1            SAVE POINTER TO PARM AREA
         ST    R12,SAV12          SAVE R12
         L     R12,=V(CFACTOR)    GET ADDRESS OF CFACTOR CSECT
         USING CFACTOR,R12        SET UP ADDRESSABILITY
         STC   R8,IEFFLAG         SAVE IEFACTRT FLAG
         STC   R9,TJBFLAG         SAVE TSO-JOB FLAG
         MVI   BATLINE+110,C'*'   INITIALIZE END OF LINE
         LA    R2,CUUPRINT        ADDRESS OF GETMAINED AREA TO INIT
         LA    R3,CDUISIZ         GET SIZE OF AREA TO INITIALIZE
         LA    R4,INITDCB         ADDRESS OF INITIALIZATION LINES
         LR    R5,R3              SIZE OF SOURCE (SAME)
         MVCL  R2,R4              INITIALIZE IT
*
         L     R2,16              CVT POINTER
         L     R3,X'25C'(R2)      SRM CONTROL TABLE ADDRESS
         L     R4,0(R2)           TCB WORDS
         L     R4,12(R4)          CURRENT ASCB
         L     R4,X'90'(R4)       OUCB POINTER
         L     R1,=F'16000000'    SET CONSTANT
         M     R0,=F'10000'       SCALE FACTOR
*
         TM    X'74'(R2),X'80'    IS THIS MVS XA ?
         BZ    *+10               NO - DON'T NEED 31 BIT MODE
         L     R15,=A(X'80000000'+MODE31) SET RETURN ADDRESS
         DC    X'0B0F'            (BSM   R0,R15) SET 31 BIT MODE
*
MODE31   L     R5,X'40'(R3)       GET SRM CPU CONSTANT
         L     R6,X'10'(R4)       GET OUCB TYPE FIELD
*
         TM    X'74'(R2),X'80'    IS THIS MVS XA ?
         BZ    *+10               NO - DON'T NEED TO RETURN TO EARTH
         LA    R15,MODE24         SET RETURN ADDRESS
         DC    X'0B0F'            (BSM   R0,R15) SET 24 BIT MODE
*
MODE24   DR    R0,R5              DIVIDE TO GET SRM CPU CONSTANT*10000
         SRL   R5,1               DIVIDE BY 2
         CR    R0,R5              MORE THAN 1/2 ?
         BNH   *+8                NO - SKIP ADDING
         A     R1,=F'1'           ADD ONE
         L     R5,STANDSRM        GET STANDARD CPU SRM NUMBER
         SR    R0,R0              CLEAR FOR DIVIDE
         DR    R0,R5              DIVIDE BY STANDARD CPU SRM NUMBER
         SRL   R5,1               DIVIDE BY 2
         CR    R0,R5              MORE THAN 1/2 ?
         BNH   *+8                NO - SKIP ADDING
         A     R1,=F'1'           ADD ONE ( R1 = SYSADJUST * 1000 )
         ST    R1,ADJUST          SAVE CPU ADJUST FACTOR
*
         CLI   IEFFLAG,X'FF'      ARE WE IN IEFACTRT ?
         BNE   TSOCODE            NO - MUST BE STANDALONE (NOT ACTRT)
         L     R8,16              CVT POINTER
         L     R8,0(R8)           TCB WORDS
         L     R8,4(R8)           CURRENT TCB
         L     R8,X'A4'(R8)       TCT POINTER
         LTR   R8,R8              ANY TCT ?
         BZ    STOP               NO - DON'T GO NO FURTHER
         L     R8,X'98'(R8)       LCT POINTER
         L     R8,X'10'(R8)       JOBS JCT POINTER
         TM    X'07'(R8),B'10000000' MSGLEVEL=(,1) ?
         BZ    STOP               NO - DON'T DO IT
*
         L     R4,36(R7)          GET POINTER TO RECORD
         ST    R4,RECPTR          SAVE POINTER TO RECORD
         CLI   5(R4),30           IS IT A TYPE 30?
         BNE   STOP               NO - STOP RIGHT HERE
*
         L     R8,24(R4)          OFFSET TO SUBSYSTEM SECTION
         AR    R8,R4              ADDRESS OF SUBSYSTEM SECTION
         CLC   0(2,R8),=H'04'     IS IT A STEP TOTAL RECORD?
         BNE   TRY05              NO - TRY NEXT ONE
*
         CLC   18(4,R4),=CL4'TSO ' TSO?
         BNE   *+12               NO - SKIP SWITCH
         MVI   TSOFLAG,X'F0'      TURN ON TSO SWITCH
         B     XXXTSO1            SKIP OTHER CHECK
         L     R8,32(R4)          OFFSET TO IDENTIFICATION SECTION
         AR    R8,R4              ADDRESS OF IDENTIFICATION SECTION
         CLI   42(R8),C'O'        OVERNITE CLASS ?
         BNE   XXXTSO1            NO
         MVI   TSOFLAG,X'0F'      TURN ON OVN SWITCH
*
XXXTSO1  L     R8,48(R4)          OFFSET TO COMPLETION SECTION
         AR    R8,R4              ADDRESS OF COMPLETION SECTION
         TM    2(R8),X'01'        WAS THIS STEP FLUSHED ?
         BO    STOP               YES - STOP
*
         MVC   LINETO+27(10),=CL10'TOTAL STEP' CHANGE TOTAL LINE
         MVC   LINETO+55(05),=CL05' STEP' CHANGE TOTAL LINE
         L     R5,0(R7)           GET COMMON PARAMETER AREA
         SR    R9,R9              CLEAR REG 9
         ICM   R9,7,33(R5)        PICK UP USER COMMUNICATION FIELD
         LTR   R9,R9              ANY THERE NOW ?
         BNZ   JOBCODE            YES BYPASS GETMAIN & INIT
*
         LA    R4,SMFWSIZ         GET SIZE OF WORKAREA
         A     R4,=F'7'           ROUND UP TO
         N     R4,=X'FFFFFFF8'    A DOUBLE WORD
       GETMAIN R,LV=(R4),SP=255   GETMAIN WORK AREA
         LR    R9,R1              SAVE POINTER
         USING SMFWORK,R9         SET UP ADDRESSING
         MVI   0(R9),X'0'         ZERO ONE
         MVC   1(SMFWSIZ-1,R9),0(R9)  ZERO IT ALL OUT
         STCM  R9,7,33(R5)        SAVE POINTER
         B     JOBCODE            GO SET CAPTURE RATIO
*
TRY05    CLC   0(2,R8),=H'05'     IS IT A JOB TOTAL RECORD?
         BNE   STOP               NO - NOTHING ELSE TO DO HERE
*
         CLC   18(4,R4),=CL4'TSO ' TSO?
         BNE   *+12               NO - SKIP SWITCH
         MVI   TSOFLAG,X'F0'      TURN ON TSO SWITCH
         B     XXXTSO2            SKIP OTHER CHECK
         L     R8,32(R4)          OFFSET TO IDENTIFICATION SECTION
         AR    R8,R4              ADDRESS OF IDENTIFICATION SECTION
         CLI   42(R8),C'O'        OVERNITE CLASS ?
         BNE   XXXTSO2            NO
         MVI   TSOFLAG,X'0F'      TURN ON OVN SWITCH
*
XXXTSO2  L     R5,0(R7)           GET COMMON PARAMETER AREA
         SR    R9,R9              CLEAR REG 9
         ICM   R9,7,33(R5)        PICK UP USER COMMUNICATION FIELD
         LTR   R9,R9              ANY THERE NOW ?
         BZ    STOP               YES BYPASS (ENTIRE JOB FLUSHED)
*
         MVI   T05FLAG,X'FF'      TURN ON FLAG
         MVC   LINETO+27(10),=CL10' TOTAL JOB' CHANGE TOTAL LINE
         MVC   LINETO+55(05),=CL05'  JOB' CHANGE TOTAL LINE
         B     JOBCODE            GO ON WITH IT
*
TSOCODE  ST    R6,OUCBFLG         SAVE OUCB FLAG
         TM    OUCBFLG+2,X'20'    LOGON CREATED ASID
         BZ    JOBCODE            NO - SKIP TSO FLAG
         MVI   TSOFLAG,X'F0'      SET TSOFLAG
*
JOBCODE  CLI   IEFFLAG,X'FF'      ARE WE IEFACTRT ?
         BE    NOOPEN             YES - BYPASS OPEN
         CLI   TSOFLAG,X'F0'      ARE WE TSO ?
         BNE   OPENER             NO - MUST DO OPEN
         CLI   TJBFLAG,X'FF'      ARE WE TSO-JOB ?
         BNE   PSTARS             NO - WILL DO TPUTS
         MVC   CUUPRINT+82(2),=H'80' CHANGE LRECL
         MVC   CUUPRINT+62(2),=H'80' CHANGE BLKSIZE
OPENER   OPEN  (CUUPRINT,OUTPUT),MF=(E,OPENPL)
         TM    CUUPRINT+48,X'10'  DID IT OPEN ?
         BO    PSTARS             YES - GO PUT OUT STAR LINE
         CLI   TJBFLAG,X'FF'      ARE WE TSO-JOB ?
         BNE   STOP               NO - NO RECOURSE
         MVI   TJBFLAG,X'00'      TURN OFF TSO-JOB FLAG (DO TPUTS)
         B     PSTARS             AND GO WRITE OUT STAR LINE
*
NOOPEN   CLI   T05FLAG,X'FF'      ARE WE IN IEFACTRT FOR A TYPE 05 ?
         BNE   NSTARS             NO - SKIP STARS (IEFACTRT DID THEM)
PSTARS   LA    R2,STARS           POINT TO LINE TO BE WRITTEN
         LA    R15,STARS          POINT TO BATCH TITLE IF NEEDED
         BAL   R3,PRINTER         THEN WRITE IT OUT
NSTARS   LA    R2,STAR1           POINT TO LINE TO BE WRITTEN
         LA    R15,STAR1          POINT TO BATCH TITLE IF NEEDED
         BAL   R3,PRINTER         THEN WRITE IT OUT
         B     NOABORT
*
*        PATCH TO ABORT PROCESSING
*
         LA    R2,ABORT1          POINT TO ABORT MESSAGE
         LA    R15,ABORT1         POINT TO ABORT MESSAGE
         BAL   R3,PRINTER         THEN WRITE IT OUT
         B     EXITA              THEN END
ABORT1   DC    CL50'*                    ESTIMATED JOB COST USING THE '
         DC    CL50'1987 DSD ALGORITHM IS NOT YET AVAILABLE.          '
         DC    CL11'          *'
*
NOABORT  L     R2,16              CVT POINTER
         L     R2,0(R2)           TCB WORDS POINTER
         L     R3,4(R2)           CURRENT TCB POINTER
         L     R4,X'A4'(R3)       CURRENT TCT POINTER
         ST    R4,TCTPTR          SAVE TCT POINTER
         L     R2,12(R2)          CURRENT ASCB POINTER
*
         L     R1,28(R4)          PICK UP JMR POINTER
         CLC   24(2,R1),=CL2'OS'  IS THIS AN OUTSIDE SALES PCS ?
         BNE   *+8                NO - SKIP SWITCH
         MVI   OSSFLAG,X'FF'      YES - SET SWITCH
         EJECT
***********************************************************************
*                                                                     *
*              CPU TIME (C1A)                                         *
*                                                                     *
***********************************************************************
         CLI   IEFFLAG,X'FF'      ARE WE IN IEFACTRT ?
         BNE   JOBTCB             NO - USE ASCB TIME
         CLI   T05FLAG,X'FF'      ARE WE IN IEFACTRT FOR A SUB TYPE 5 ?
         BNE   T04C1A             NO - USE SUBTYPE 4 TIMES
         L     R1,C1ASAVE         GET TOTAL SO FAR
         B     JOBC1A             AND GO ON
*
T04C1A   L     R1,RECPTR          GET SMF RECORD POINTER
         L     R5,56(R1)          OFFSET TO PROCESSOR SECTION
         AR    R5,R1              ADDRESS OF PROCESSOR SECTION
         L     R1,4(R5)           GET STEP TCB TIME
         A     R1,8(R5)           GET STEP SRB TIME
         A     R1,12(R5)          GET STEP ITCB TIME
         A     R1,16(R5)          GET STEP ISRB TIME
         M     R0,=F'10'          CONVERT TO MILLISECONDS
         L     R14,C1ASAVE        GET PREVIOUS TOTAL
         AR    R14,R1             ADD CURRENT STEP IN
         ST    R14,C1ASAVE        GET PREVIOUS TOTAL
         B     JOBC1A             GO DO IT
*
JOBTCB   LM    R0,R1,64(R2)       PICK UP TCB TIME FROM ASCB
         SRDL  R0,12              GET NUMBER OF TCB MICROSECONDS
         D     R0,=F'1000'        GET NUMBER IN MILLISECONDS
         C     R0,=F'500'         MORE THAN 1/2
         BNH   *+8                NO - SKIP ADDING
         A     R1,=F'1'           ADD ONE
         LR    R15,R1             PUT IN REG 15
         LM    R0,R1,200(R2)      PICK UP SRB TIME FROM ASCB
         SRDL  R0,12              GET NUMBER OF TCB MICROSECONDS
         D     R0,=F'1000'        GET NUMBER IN MILLISECONDS
         C     R0,=F'500'         MORE THAN 1/2
         BNH   *+8                NO - SKIP ADDING
         A     R1,=F'1'           ADD ONE
         AR    R15,R1             ADD TO REG 15
         L     R1,132(R4)         PICK UP INITIATOR TCB TIME FROM TCT
         M     R0,=F'10'          GET NUMBER IN MILLISECONDS
         AR    R15,R1             ADD TO REG 15
         L     R1,136(R4)         PICK UP INITIATOR SRB TIME FROM TCT
         M     R0,=F'10'          GET NUMBER IN MILLISECONDS
         AR    R1,R15             ADD IN THE REST
*
JOBC1A   LTR   R1,R1              ANYTHING ?
         BZ    C1GCODE            NO - DON'T PRINT LINE
         M     R0,ADJUST          MULTIPLY BY SYSADJUST * 1000
         D     R0,=F'1000'        GET ADJUSTED CPU MILLISECONDS
         C     R0,=F'500'         MORE THAN 1/2
         BNH   *+8                NO - SKIP ADDING
         A     R1,=F'1'           ADD ONE
         ST    R1,TCBSECS         SAVE FOR LATER (MILLISECONDS)
         SR    R0,R0              CLEAR REG
         D     R0,=F'60'          GET ADJUSTED CPU 60 MSEC UNITS
         C     R0,=F'30'          MORE THAN 1/2
         BNH   *+8                NO - SKIP ADDING
         A     R1,=F'1'           ADD ONE
         CVD   R1,WORK            MAKE DECIMAL
         CLI   TSOFLAG,X'0F'      OVERNITE CLASS ?
         BE    JOBC1B             YES
         L     R0,CFACT1A         MULTIPLY BY NET C FACTOR * 10E6
         LA    R2,LINE1A          POINT TO LINE TO BE WRITTEN
         L     R15,=A(BLNE1A)     POINT BATCH TITLE IF NEEDED
         BAL   R3,FORMATM         THEN WRITE IT OUT
         B     C1GCODE            TAPE MOUNTS NEXT
*
JOBC1B   L     R0,CFACT1B         MULTIPLY BY NET C FACTOR * 10E6
         LA    R2,LINE1B          POINT TO LINE TO BE WRITTEN
         L     R15,=A(BLNE1B)     POINT BATCH TITLE IF NEEDED
         BAL   R3,FORMATM         THEN WRITE IT OUT
         EJECT
***********************************************************************
*                                                                     *
*              JES3 EXTENDED STATUS - ONLY RUN AT JOB TERMINATION     *
*              THIS PROVIDES DATA FOR THREE CHARGE FACTORS:           *
*                                                                     *
*              TAPE MOUNTS (C1C) (MDS PART)                           *
*              LINES SPOOLED AND PRINTED/PUNCHED (C1G)                *
*              PAGES PRINTED (C1P)                                    *
*                                                                     *
***********************************************************************
C1GCODE  CLI   IEFFLAG,X'FF'      ARE WE IN IEFACTRT ?
         BE    C1GCK01            YES - CHECK WHY WE ARE HERE
         CLI   TJBFLAG,X'FF'      WERE WE CALLED FROM PROGRAM ?
         BE    C1CCODE            YES - DONT DO THIS THEN
         B     JOBSPL             NO - THEN DO SPOOL REPORT
C1GCK01  CLI   T05FLAG,X'FF'      ARE WE IN IEFACTRT FOR A SUBTYPE 5 ?
         BNE   C1CCODE            NO - SKIP THIS ALTOGETHER
*
JOBSPL   LA    R8,DMAREA          POINT TO DMC HEADER
         STCM  R8,7,DMPARM+1      SAVE IT BACK
         LA    R8,SSAREA          POINT TO SSOB HEADER
         STCM  R8,7,SSPARM+1      SAVE IT BACK
*
         L     R2,=A(SSCS$ASZ*25) GET SIZE OF ARRAY AREA
         A     R2,=A(SSCSIZE+SSCS$PSZ+SSCS$ASZ) SSOB + WORK + 1 ZEROS
         A     R2,=F'7'           ROUND UP TO
         N     R2,=X'FFFFFFF8'    A DOUBLE WORD
       GETMAIN R,LV=(R2)          GETMAIN WORK AREA
*
         STM   R2,R5,CDUSAVE+12   SAVE REGS
         LR    R3,R2              GET SIZE OF AREA TO INITIALIZE
         LR    R2,R1              ADDRESS OF GETMAINED AREA TO INIT
         LA    R4,=F'0'           ADDRESS OF DUMMY INIT DATA AREA
         SR    R5,R5              FILL CHAR (00) AND SOURCE SIZE (0)
         MVCL  R2,R4              INITIALIZE IT
         LM    R2,R5,CDUSAVE+12   RESTORE REGS
         LR    R3,R1              POINT TO SSOB PROPER
         ST    R3,SSOBPTR         PUT IN HEADER
         USING SSCSBGN,R3         ESTABLISH ADDRESSABILITY
         LA    R8,SSCS$CAE        POINT TO FIRST ARRAY ENTRY
         USING SSCS$CAE,R8        ESTABLISH ADDRESSABILITY
         MVI   SSCSFLGS,SSCS$CST  INDICATE EXTENDED STATUS
         L     R2,=A(SSCS$ASZ*25) GET SIZE OF ARRAY AREA
         STH   R2,SSCSDIMP        SAVE DOWN SIZE OF WORK AREA
         LR    R1,R8              POINT TO FIRST ARRAY ENTRY
         AR    R1,R2              POINT TO END OF LAST ARRAY ENTRY
         ST    R1,LASTONE         SAVE FOR END TEST
         A     R2,=A(SSCSIZE+SSCS$PSZ+SSCS$ASZ) SSOB + WORK + 1 ZEROS
         STH   R2,SSCSLEN         SAVE TOTAL LENGTH
*
         L     R2,16              CVT POINTER
         L     R2,0(R2)           TCB WORDS POINTER
         L     R2,4(R2)           CURRENT TCB POINTER
         CLI   IEFFLAG,X'FF'      ARE WE IN IEFACTRT ?
         BNE   JOBTASK            NO - USE JOBS SSIB FROM JSCB
         L     R2,X'A4'(R2)       TCT POINTER
         L     R2,X'98'(R2)       LCT POINTER
         L     R1,X'10'(R2)       ADDRESS OF JCT
         MVC   SSCSJOBN(8),8(R1)  MOVE IN CURRENT JOBNAME FROM JCT
         L     R2,X'194'(R2)      SSOB POINTER
         L     R2,X'08'(R2)       SSIB POINTER
         B     JOBSSIB            SKIP CODE FOR NON IEFACTRT
JOBTASK  L     R2,X'B4'(R2)       ADDRESS OF JSCB
         L     R1,X'104'(R2)      JCT-10 POINTER
         MVC   SSCSJOBN(8),24(R1) MOVE IN CURRENT JOBNAME FROM JCT
         L     R2,X'13C'(R2)      ADDRESS OF SSIB
JOBSSIB  MVC   SSCSJOBI(4),=CL4'JOB0' FIRST PART
         MVC   SSCSJOBI+4(4),16(R2) MOVE IN CURRENT JOB NUMBER
         L     R2,X'20'(R2)       ADDRESS OF MEME
*
         L     R15,16             CVT POINTER
         TM    X'74'(R15),X'80'   IS THIS MVS XA ?
         BZ    *+10               NO - DON'T NEED 31 BIT MODE
         L     R15,=A(X'80000000'+MODX31) SET RETURN ADDRESS
         DC    X'0B0F'            (BSM   R0,R12) SET 31 BIT MODE
MODX31   EQU   *
*
         L     R1,X'120'(R2)      ACB ADDR FROM MEMSACB FLD IN IATYMEM
         LTR   R1,R1              IS THERE ONE THERE?
         BZ    RETM24             NO - RETURN
         L     R2,X'124'(R2)      DEB ADDR FROM MEMSDEB FLD IN IATYMEM
         L     R2,X'08'(R2)       DSS ADDR FROM DEBIRBAD FLD IN IEZDEB
         CLC   0(4,R2),=CL4'DSS ' IS THIS A DSS? (JES3 1.3.4)
         BE    DSSPTR             YES GO GET DSB POINTER
         CLC   0(4,R2),=CL4'DSB ' IS THIS A DSB? (JES3 2.1.5)
         BE    DSSPTR+4           YES - SKIP DSS
         B     RETM24             NO - I DONT KNOW WHO THIS IS
DSSPTR   L     R2,X'04'(R2)       DSB ADDR FROM DSSDSB FLD IN IATYDSS
         L     R2,X'24'(R2)       DMC ADDR FROM DSBCDMC FLD IN IATYDSB
         ST    R2,DMADDR          SAVE IT IN PARM LIST
         LA    R1,DMPARM          LOAD ADDRESS OF DMPARM
         LA    R15,16             ESR CODE FOR DMC GET
         SVC   109                ESR SVC
*
RETM24   L     R15,16             CVT POINTER
         TM    X'74'(R15),X'80'   IS THIS MVS XA ?
         BZ    *+10               NO - DON'T NEED 31 BIT MODE
         LA    R15,MODX24         SET RETURN ADDRESS
         DC    X'0B0F'            (BSM   R0,R12) SET 24 BIT MODE
MODX24   EQU   *
*
SVC109   LA    R1,SSPARM          LOAD ADDRESS OF SSOB
         LA    R15,16             ESR CODE FOR IEFSSREQ
         SVC   109                ESR SVC
*
*        NOP   DEFAULT            ALWAYS DO IT NOW (TEST ONLY)
*
         LTR   R15,R15            TEST RETURN CODE
         BNZ   DEFAULT            NOT ZERO - SSOB ERROR - NO DATA
         CLC   SSOBRC(4),=F'0'    SSOB RETURN CODE ALSO ZERO ?
         BE    SSOBQ              YES - GO PROCESS
*
DEFAULT  MVI   JESFLAG,X'FF'      SET BAD JES FLAG
         MVC   SSOBRC(4),=F'0'    ZERO OUT RETURN CODE
         MVC   SSCS$JDS(4),=F'0'  CLEAR JDS POINTER JUST IN CASE
         MVI   SSCS$CAE,X'00'     ZERO OUT
         MVC   SSCS$CAE+1(255),SSCS$CAE    AREA
         MVC   SSCS$TYP,=CL8'PRT     ' DEFAULT
         MVC   SSCS$FRM,=CL4'3920' DEFAULT
         MVI   SSCS$CPY,1         DEFAULT
*
         MVC   SSCS$LNC,=F'1000'  ALWAYS PUT IN SAMPLE OF 1000
         CLI   TSOFLAG,X'F0'      ARE WE TSO ?
         BE    *+10               YES - THEN 1000 IS OK
         MVC   SSCS$LNC,=F'10000' NO - MUST BE BATCH SO CHANGE TO 10K
*
SSOBQ    L     R1,LASTONE         GET POINTER TO LAST (ZERO) ARRAY
         CLC   SSCS$CAE(SSCS$ASZ),0(R1) IS THIS ONE EMPTY ?
         BE    SPOOLED            YES - GET OUT
*
         L     R1,SSCS$LNC        GET LINE COUNT
         CLC   SSCS$DDN(8),=CL8'JESMSG  '   DONT
         BE    NORMALX                          COUNT
         CLC   SSCS$DDN(8),=CL8'JESJCL  '            THESE
         BE    NORMALX                                    IN
         CLC   SSCS$DDN(8),=CL8'SYSMSG  '       LINES SPOOLED
         BNE   NORMALC
         L     R6,DMC+72          GET SYSMSG LINECOUNT FROM OUR DMC
         LTR   R6,R6              WAS IT ZERO ?
         BZ    NORMALX            YES - USE SSOB COUNT
         LA    R1,12(R6)          12 LINES FOR US
         ST    R1,SSCS$LNC        STORE SYSMSG LINECOUNT
         B     NORMALX
*
NORMALC  L     R6,SPOOL           GET NUMBER OF LINES SPOOLED
         AR    R6,R1              GET LINECOUNT
         ST    R6,SPOOL           ADD TO COUNT SPOOLED ALREADY
NORMALX  SR    R6,R6              CLEAR REG
         CLI   SSCS$CLS,C'V'      SPECIAL TEST FOR VPS
         BE    NOPRINT            YES - WE CAN NOT YET BILL FOR VPS
         LA    R15,RMTTABLE       POINT TO TABLE
RM1LOOP  CLC   SSCS$DST(5),0(R15) CHARGE FOR THIS ONE ?
         BE    SIPRINT            YES - GO COUNT THIS ONE
         LA    R15,5(R15)         POINT TO NEXT ENTRY
         CLC   ENDTABLE(5),0(R15) END OF TABLE?
         BE    NOPRINT            YES - DO NOT CHARGE FOR
         B     RM1LOOP            CHECK THIS ONE
SIPRINT  IC    R6,SSCS$CPY        GET COPY COUNT
NOPRINT  MR    R0,R6              MULTIPLY BY LINE COUNT
         L     R6,PRINT           GET LINE COUNT
         AR    R6,R1              ADD CURRENT PRINTED
         ST    R6,PRINT           AND SAVE
         L     R6,=V(FORMTAB)     GET ADDRESS OF FORM CHARGE TABLE
FLOOP    CLC   0(4,R6),=CL4'DFLT' END OF LIST ?
         BE    FHIT               YES - GO USE IT
         CLC   0(4,R6),SSCS$FRM   THIS OUR FORM?
         BE    FHIT               YES - GO USE IT
         LA    R6,16(R6)          NEXT ONE
         B     FLOOP              AROUND
FHIT     L     R7,SSCS$PGS        GET PAGE COUNT
         LTR   R7,R7              ANYTHING ?
         B     PAGCALC            ALWAYS USE TABLE LINECOUNT (LIKE R2)
         BZ    PAGCALC            NO - USE LINECOUNT
         LR    R1,R7              PUT IN REG1 (OVERLAY LINES)
         B     FRMCALC            GO COMPUTE CDUS
PAGCALC  SR    R0,R0              CLEAR R0
         L     R1,SSCS$LNC        GET ORIGINAL LINE COUNT
         A     R1,8(R6)           ADD LINES/PAGE FOR LAST PAGE
         S     R1,=F'1'           SUBTRACT ONE
         D     R0,8(R6)           DIVIDE BY LINES/PAGE
FRMCALC  SR    R7,R7              CLEAR REG 7
         CLI   SSCS$CLS,C'V'      SPECIAL TEST FOR VPS
         BE    NOPAGES            YES - WE CAN NOT YET BILL FOR VPS
         CLC   SSCS$DST,=CL8'AUTOCOM ' MICROFICHE ?
         BE    NOPAGES            YES - WE DONT CHARGE PAGES FOR FICHE
         CLC   SSCS$DST(3),=C'RMT' REMOTE DESTINATION ?
         BNE   SIPAGES            NO - PROBABLY CHARGED FOR
         LA    R15,RMTTABLE       POINT TO TABLE
RM2LOOP  CLC   SSCS$DST(5),0(R15) CHARGE FOR THIS ONE ?
         BE    SIPAGES            YES - GO COUNT THIS ONE
         LA    R15,5(R15)         POINT TO NEXT ENTRY
         CLC   ENDTABLE(5),0(R15) END OF TABLE?
         BE    NOPAGES            YES - DO NOT CHARGE FOR
         B     RM2LOOP            CHECK THIS ONE
SIPAGES  IC    R7,SSCS$CPY        GET COPY COUNT
NOPAGES  MR    R0,R7              MULTIPLY BY COPY COUNT
         L     R7,PAGES           GET PREVIOUS PAGE COUNT
         AR    R7,R1              ADD IN CURRENT
         ST    R7,PAGES           AND SAVE
         M     R0,12(R6)          MULTIPLY BY TOTAL CHARGE
         D     R0,=F'1000000'     TOTAL CDU * 1000
         C     R0,=F'500000'      MORE THAN 1/2
         BNH   *+8                NO - SKIP ADDING
         A     R1,=F'1'           ADD ONE
         A     R1,PAGES+4         ADD PREVIOUS CHARGES
         ST    R1,PAGES+4         AND SAVE
         LA    R8,SSCS$ASZ(R8)    POINT TO NEXT ARRAY ENTRY
         B     SSOBQ              GO LOOK FOR ANOTHER ONE
*
SPOOLED  LH    R1,SSCS$NTM        GET NUMBER OF MDS TAPE MOUNTS
         CLI   IEFFLAG,X'FF'      ARE WE IN IEFACTRT ?
         BNE   NOTAPES            MO - SKIP ADDING IN MDS TAPE MOUNTS
         A     R1,C1CSAVE         ADD NUMBER OF MVS TAPE MOUNTS
         ST    R1,C1CSAVE         SAVE BACK
NOTAPES  CLC   SSCS$JDS(4),=F'0'  LAST JDS POINTER THERE ?
         BE    FREEJES            NO - FREE GETMAINED AREA
*
         L     R1,SSCS$JDS        PICK UP JDS POINTER
         STM   R2,R5,CDUSAVE+12   SAVE REGS
         LA    R2,SSCSDIMR        POINT TO BEGINNING OF RETURNED AREA
         LH    R3,SSCSDIMP        GET SIZE OF ARRAY AREA
         A     R3,=A(SSCSELSZ+SSCS$PSZ+SSCS$ASZ+2) ARRAY+WORK+1 ZEROS
         LA    R4,=F'0'           ADDRESS OF DUMMY INIT DATA AREA
         SR    R5,R5              FILL CHAR (00) AND SOURCE SIZE (0)
         MVCL  R2,R4              INITIALIZE IT
         LM    R2,R5,CDUSAVE+12   RESTORE REGS
         ST    R1,SSCS$JDS        SAVE JDS POINTER
         LA    R8,SSCSIZE+SSCS$PSZ(,R3) FIRST ARRAY ENTRY
         B     SVC109             AND GO GET ANOTHER LOAD
*
FREEJES  L     R1,SSOBPTR         ADDRESS OF ARRAY
         LH    R2,SSCSLEN         SIZE OF WORK AREA
         A     R2,=F'7'           ROUND UP TO
         N     R2,=X'FFFFFFF8'    A DOUBLE WORD
      FREEMAIN R,LV=(R2),A=(R1)   FREEMAIN WORK AREA
         DROP  R3,R8              RELEASE REGS
         B     C1CCODE            SKIP OVER RMT TABEL
*
*        TABLE OF RJE STATIONS THAT WE CHARGE FOR PRINTED OUTPUT
*
RMTTABLE DC    C'RMT05'
         DC    C'RMT27'
         DC    C'RMT29'
         DC    C'RMT31'
         DC    C'RMT34'
         DC    C'RMT66'
         DC    C'RMT72'
         DC    C'RMT73'
         DC    C'RMT77'
ENDTABLE DC    C'99999'
         EJECT
***********************************************************************
*                                                                     *
*              TAPE VOLUME MOUNTS (C1C)                               *
*                                                                     *
***********************************************************************
C1CCODE  L     R4,TCTPTR          RESTORE TCT POINTER
         CLI   IEFFLAG,X'FF'      ARE WE IN IEFACTRT ?
         BNE   JOBTAP             NO - USE TCT COUNT
         CLI   T05FLAG,X'FF'      ARE WE IN IEFACTRT FOR A TYPE 05 ?
         BNE   T04C1C             NO - USE SUBTYPE 4 FIELDS
         L     R1,C1CSAVE         GET TOTAL SO FAR
         B     JOBC1C             AND GO ON
*
T04C1C   L     R5,RECPTR          GET SMF RECORD POINTER
         L     R1,88(R5)          OFFSET TO OPERATOR SECTION
         AR    R5,R1              ADDRESS OF OPERATOR SECTION
         L     R1,8(R5)           GET NONSPECIFIC MOUNTS
         A     R1,12(R5)          GET SPECIFIC MOUNTS
         L     R14,C1CSAVE        GET PREVIOUS TOTAL
         AR    R14,R1             ADD CURRENT STEP IN
         ST    R14,C1CSAVE        GET PREVIOUS TOTAL
         B     JOBC1C             GO DO IT
*
JOBTAP   L     R1,92(R4)          GET NONSPECIFIC MOUNTS
         A     R1,96(R4)          ADD SPECIFIC MOUNTS
         ST    R1,TAPEMTS         SAVE FOR LATER
*
JOBC1C   LTR   R1,R1              ANYTHING ?
         BZ    C1FCODE            NO - DON'T PRINT LINE
         CVD   R1,WORK            MAKE DECIMAL
         MVC   LINE1C+18(12),=X'402020206B2020206B202120'
         ED    LINE1C+18(12),WORK+3 DO THE EDIT
         MVI   LINE1C+18,C'='     PUT '=' BACK
         M     R0,=F'1000'        SCALE FOR LATER EDIT
         L     R0,CFACT1C         MULTIPLY BY TOTAL C FACTOR * 10E6
         LA    R2,LINE1C          POINT TO LINE TO BE WRITTEN
         L     R15,=A(BLNE1C)     POINT BATCH TITLE IF NEEDED
         BAL   R3,FORMATX         THEN WRITE IT OUT
         EJECT
***********************************************************************
*                                                                     *
*              COMMUNICATIONS MBYTES TRANSFERED (C1F)                 *
*                                                                     *
***********************************************************************
C1FCODE  CLI   IEFFLAG,X'FF'      ARE WE IN IEFACTRT ?
         BNE   JOBCOM             NO - USE TCT DATA
         CLI   T05FLAG,X'FF'      ARE WE IN IEFACTRT FOR A TYPE 05 ?
         BNE   T04C1F             NO - USE SUBTYPE 4 FIELDS
         LM    R0,R1,C1FSAVE      GET TOTAL (TPUTS,TGETS)
         B     JOBC1F             AND GO ON
*
T04C1F   L     R5,RECPTR          GET SMF RECORD POINTER
         L     R7,40(R5)          OFFSET TO I/O ACTIVITY SECTION
         AR    R5,R7              ADDRESS OF I/O ACTIVITY SECTION
         LM    R0,R1,8(R5)        GET TPUT,TGET COUNTS
         LM    R14,R15,C1FSAVE    GET TPUT,TGET TOTAL SO FAR
         AR    R14,R0             ADD CURRENT STEP TPUTS
         AR    R15,R1             ADD CURRENT STEP TGETS
         STM   R14,R15,C1FSAVE    SAV TPUT,TGET TOTAL SO FAR
         B     JOBC1F             GO DO IT
*
JOBCOM   L     R0,52(R4)          GET TPUT COUNT
         L     R1,48(R4)          GET TGET COUNT
*
JOBC1F   LR    R7,R0              SAVE TPUT COUNT
         M     R0,BYTTGET         GET NUMBER OF BYTES (TGET)
         M     R6,BYTTPUT         GET NUMBER OF BYTES (TPUT)
         AR    R0,R6              ADD HIGH ORDER WORDS
         ALR   R1,R7              ADD TPUT TO TGET BYTES
         BNO   *+8                OVERFLOW ?
         A     R0,=F'1'           YES - ADD IT IN
         SRDL  R0,10              CONVERT TO 1K
         M     R0,=F'1000'        SCALE FOR DIVIDE
         D     R0,=F'1024'        CONVERT TO MEGABYTES * 1000
         C     R0,=F'512'         MORE THAN 1/2
         BNH   *+8                NO - SKIP ADDING
         A     R1,=F'1'           ADD ONE
         LTR   R1,R1              ANYTHING ?
         BZ    C1GPRNT            NO - DON'T PRINT LINE
         CVD   R1,WORK            MAKE DECIMAL
         L     R0,CFACT1F         MULTIPLY BY TOTAL C FACTOR * 10E6
         LA    R2,LINE1F          POINT TO LINE TO BE WRITTEN
         L     R15,=A(BLNE1F)     POINT BATCH TITLE IF NEEDED
         BAL   R3,FORMATM         THEN WRITE IT OUT
         EJECT
***********************************************************************
*                                                                     *
*        PRINT LINES SPOOLED (C1G)                                    *
*                                                                     *
***********************************************************************
C1GPRNT  L     R1,SPOOL           GET SPOOLED LINE COUNT
         A     R1,PRINT           ADD PRINT LINE COUNT
         LTR   R1,R1              ANYTHING ?
         BZ    C1JCODE            NO - DON'T PRINT LINE
         SR    R0,R0              CLEAR REG
         D     R0,=F'10'          CONVERT TO 10K LINE UNITS
         C     R0,=F'05'          MORE THAN 1/2
         BNH   *+8                NO - SKIP ADDING
         A     R1,=F'1'           ADD ONE
         CVD   R1,WORK            MAKE DECIMAL
         L     R0,CFACT1G         MULTIPLY BY TOTAL C FACTOR * 10E6
         LA    R2,LINE1G          POINT TO LINE TO BE WRITTEN
         L     R15,=A(BLNE1G)     POINT BATCH TITLE IF NEEDED
         BAL   R3,FORMATM         THEN WRITE IT OUT
         EJECT
***********************************************************************
*                                                                     *
*              DEVICE CONNECT MINUTES (C1J)                           *
*                                                                     *
***********************************************************************
C1JCODE  CLI   IEFFLAG,X'FF'      ARE WE IN IEFACTRT ?
         BNE   JOBIO              NO - USE TCT TIMES
         CLI   T05FLAG,X'FF'      ARE WE IN IEFACTRT FOR A TYPE 05 ?
         BNE   T04C1J             NO - USE SUBTYPE 4 TIMES
         LM    R0,R1,C1JSAVE      GET TOTALS SO FAR (DISK,TAPE)
         B     JOBC1J             AND GO ON
*
T04C1J   SR    R0,R0              CLEAR DISK TIME ACCUMULATOR
         SR    R1,R1              CLEAR TAPE TIME ACCUMULATOR
         SR    R15,R15            CLEAR DISC TIME ACCUMULATOR
T04C1K   L     R5,RECPTR          GET SMF RECORD POINTER
         LH    R7,102(R5)         NUMBER OF EXCP SECTIONS
         LTR   R7,R7              ARE THERE ANY ?
         BZ    DONEDD1            NO - GO AROUND
         L     R6,96(R5)          OFFSET TO EXCP SECTION
         AR    R5,R6              ADDRESS OF EXCP SECTION
DDLOOP1  CLI   0(R5),X'20'        DISK DEVICE ?
         BNE   TAPEDD1            NO - LOOK FOR TAPE
         A     R0,18(R5)          ADD CONNECT TIME (128 USECS)
         A     R15,12(R5)         ADD BLOCK COUNT
         B     NEXTDD1            AND DO NEXT ENTRY
TAPEDD1  CLI   0(R5),X'80'        TAPE DEVICE ?
         BNE   NEXTDD1            NO - SKIP IT
         A     R1,18(R5)          ADD CONNECT TIME (128 USECS)
         A     R15,12(R5)         ADD BLOCK COUNT
NEXTDD1  LA    R5,22(R5)          POINT TO NEXT DD ENTRY
         BCT   R7,DDLOOP1         AND AROUND AGAIN
*
DONEDD1  EQU   *
*
*        M     R14,=F'32'         MULTIPLY BY 4 MSEC/IO
*        AR    R1,R15             ADD TO TAPE CONNECT TIME
*
         CLI   IEFFLAG,X'FF'      ARE WE IN IEFACTRT ?
         BNE   JOBIO2             NO - THIS WAS THE EXCP HOLD REC
*
*        CLI   TSOFLAG,X'F0'      ARE WE A TSO USER?
*        BNE   JOBC1X             NO - SKIP TGETS
*        L     R5,RECPTR          GET SMF RECORD POINTER
*        L     R7,40(R5)          OFFSET TO I/O ACTIVITY SECTION
*        AR    R5,R7              ADDRESS OF I/O ACTIVITY SECTION
*        L     R15,12(R5)         GET TGET COUNT
*        M     R14,=F'7812'       MULTIPLY BY 1 SECONDS
*        AR    R1,R15             ADD TO TAPE CONNECT TIME
*
JOBC1X   LM    R14,R15,C1JSAVE    GET TOTAL SO FAR
         AR    R14,R0             ADD CURRENT STEP IN
         AR    R15,R1             ADD CURRENT STEP IN
         STM   R14,R15,C1JSAVE    SAVE BACK DOWN
         B     JOBC1J             SKIP OVER
*
JOBIO    L     R5,144(R4)         GET ADDRESS OF STEP TOTAL TYPE 30
         LA    R5,8(R5)           GET TRUE ADDRESS
         ST    R5,RECPTR          SAVE IT
         B     T04C1J             GO GET STEP COUNTS SO FAR
JOBIO2   L     R5,148(R4)         GET ADDRESS OF EXCP HOLD TYPE 30
         LA    R5,8(R5)           GET TRUE ADDRESS
         C     R5,RECPTR          SECOND TIME AROUND ?
         BE    JOBIO3             YES - GO RUN THE TCT ENTRIES
         ST    R5,RECPTR          SAVE IT
         B     T04C1K             GO GET STEP COUNTS SO FAR
JOBIO3   L     R5,12(R4)          GET TCT I/O TABLE ADDRESS
         LA    R6,8(R5)           START OF DD ENTRY TABLE
         SR    R8,R8              CLEAR BLOCK COUNT REG
DDLOOP   CLC   0(8,R6),=XL8'00'   ALL ZEROS ?
         BE    DONEDDX            YES - DONE
         L     R7,4(R6)           PICK UP POINTER TO I/O COUNTER ENTRY
         LA    R7,0(R5,R7)        ADD TO ORGIN OF I/O TABLE
         L     R14,0(R7)          GET UCB ADDRESS
         LTR   R14,R14            ANY THERE ?
         BZ    NEXTDD             NO - SKIP THIS ONE
         L     R15,16(R7)         GET 128 USEC UNITS
         S     R15,20(R7)         SUBTRACT OUT THOSE ALREADY SAVED
         LTR   R15,R15            ANY THERE ?
         BZ    NEXTDD             NO - SKIP THIS ONE
         CLI   18(R14),X'20'      DISK DEVICE ?
         BNE   TAPEDD             NO - LOOK FOR TAPE
         AR    R0,R15             ADD CONNECT TIME (128 USECS)
         A     R8,8(R7)           GET BLOCK COUNTS
         S     R8,12(R7)          SUBTRACT OUT THOSE ALREADY SAVED
         B     NEXTDD             AND DO NEXT ENTRY
TAPEDD   CLI   18(R14),X'80'      TAPE DEVICE ?
         BNE   NEXTDD             NO - SKIP IT
         AR    R1,R15             ADD CONNECT TIME (128 USECS)
         A     R8,8(R7)           GET BLOCK COUNTS
         S     R8,12(R7)          SUBTRACT OUT THOSE ALREADY SAVED
NEXTDD   LA    R6,8(R6)           POINT TO NEXT DD ENTRY
         B     DDLOOP             AND AROUND AGAIN
*
DONEDDX  EQU   *
*
*        LR    R15,R8             GET TOTAL BLOCK COUNT
*        M     R14,=F'32'         MULTIPLY BY 4 MSEC/IO
*        AR    R1,R15             ADD TO TAPE CONNECT TIME
*        L     R15,TAPEMTS        GET TAPE MOUNTS IF ANY
*        M     R14,=F'234375'     MULTIPLY BY 30 SECONDS
*        AR    R1,R15             ADD TO TAPE CONNECT TIME
*        CLI   TSOFLAG,X'F0'      ARE WE A TSO USER?
*        BNE   JOBC1J             NO - SKIP TGETS
*        L     R15,48(R4)         GET TGET COUNT
*        M     R14,=F'7812'       MULTIPLY BY 4 SECONDS
*        AR    R1,R15             ADD TO TAPE CONNECT TIME
*
JOBC1J   LR    R15,R0             GET DISK IO CONNECT TIME
         M     R14,=F'128'        GET USECS
         D     R14,=F'1000'       GET CONNECT MILLISECONDS
         C     R14,=F'500'        MORE THAN 1/2
         BNH   *+8                NO - SKIP ADDING
         A     R15,=F'1'          ADD ONE
*
*        M     R0,=F'128'         GET TAPE USECS
*        D     R0,=F'1000'        GET CONNECT MILLISECONDS
*        C     R0,=F'500'         MORE THAN 1/2
*        BNH   *+8                NO - SKIP ADDING
*        A     R1,=F'1'           ADD ONE
*        AR    R1,R15             ADD DISK I/O TIME (FOR C1M)
*        A     R1,TCBSECS         ADD TCB MILLISECONDS * SYSADJUST
*        STM   R0,R1,OCCUPCY      SAVE OCCUPANCY TIME
*
         SR    R0,R0              CLEAR REG
         LR    R1,R15             GET DISK IO TIME (FOR C1J)
         D     R0,=F'60'          CONVERT TO 60 MSEC UNITS
         C     R0,=F'30'          MORE THAN 1/2
         BNH   *+8                NO - SKIP ADDING
         A     R1,=F'1'           ADD ONE
         LTR   R1,R1              ANYTHING ?
*
         BZ    C1PPRNT            SKIP MEMORY (NOT IN ALGORITHM)
*
         CVD   R1,WORK            MAKE DECIMAL
         L     R0,CFACT1J         MULTIPLY BY TOTAL C FACTOR * 10E6
         LA    R2,LINE1J          POINT TO LINE TO BE WRITTEN
         L     R15,=A(BLNE1J)     POINT BATCH TITLE IF NEEDED
         BAL   R3,FORMATM         THEN WRITE IT OUT
*
         B     C1PPRNT            SKIP MEMORY (NOT IN ALGORITHM)
*
         EJECT
***********************************************************************
*                                                                     *
*              VIRTUAL MEMORY OCCUPANCY (C1M)                         *
*                                                                     *
***********************************************************************
C1MCODE  CLI   IEFFLAG,X'FF'      ARE WE IN IEFACTRT ?
         BNE   JOBMEM             NO - USE TCT FIELDS
         CLI   T05FLAG,X'FF'      ARE WE IN IEFACTRT FOR A TYPE 05 ?
         BNE   T04C1M             NO - USE SUBTYPE 4 FIELDS
         LM    R0,R1,C1MSAVE      GET TOTAL SO FAR
         B     JOBC1M             AND GO ON
*
T04C1M   L     R5,RECPTR          GET SMF RECORD POINTER
         L     R6,72(R5)          OFFSET TO STORAGE SECTION
         AR    R5,R6              ADDRESS OF STORAGE SECTION
         LH    R6,6(R5)           REGION USED FROM THE TOP (SMF30SYS)
         SLL   R6,10              MULTIPLY BY 1024
         A     R6,88(R5)          REGION USED FROM BOTTOM (SMF30URB)
         TM    2(R5),X'80'        V=R JOB ?
         BO    *+8                YES - DONT ADD IN EXTENDED
         A     R6,92(R5)          ADD EXTENDED PRIVATE (SMF30EUR)
         SRL   R6,10              CONVERT TO KBYTES
         LM    R0,R1,OCCUPCY      LOAD OCCUPANCY TIME
         MR    R0,R6              AND MULTIPLY BY OCCUPANCY
         STM   R0,R1,WORK         SAVE REGS
         A     R0,C1MSAVE         ADD HIGH ORDER WORD
         AL    R1,C1MSAVE+4       ADD CURRENT STEP IN
         BNO   *+8                OVERFLOW ?
         A     R0,=F'1'           YES - ADD IT IN
         STM   R0,R1,C1MSAVE      SAVE BACK DOWN
         LM    R0,R1,WORK         RESTORE REGS
         B     JOBC1M             GO DO IT
*
JOBMEM   L     R4,16              CVT POINTER
         L     R4,0(R4)           TCB WORDS POINTER
         L     R4,4(R4)           CURRENT TCB POINTER
         L     R4,X'A4'(R4)       CURRENT TCT POINTER
         L     R5,8(R4)           GET TCT STORAGE TABLE ADDRESS
         L     R6,0(R5)           GET REGION USED FROM BOTTOM
         A     R6,4(R5)           ADD REGION USED FROM TOP
         L     R2,16              CVT POINTER
         L     R2,0(R2)           TCB WORDS
         L     R2,12(R2)          CURRENT ASCB POINTER
         TM    52(R2),X'10'       IS THIS A V=R ADDRESS SPACE ?
         BO    *+8                YES - SKIP EXTENDED PRIVATE
         A     R6,20(R5)          ADD EXTENDED PRIVATE AREA
         SRL   R6,10              CONVERT TO KBYTES
         LM    R0,R1,OCCUPCY      LOAD OCCUPANCY TIME
         MR    R0,R6              AND MULTIPLY BY OCCUPANCY
*
JOBC1M   SRDL  R0,10              CONVERT TO  MBYTE-MILLISECS
         D     R0,=F'3600'        CONVERT TO  MBYTE-MILLIHOURS
         C     R0,=F'1800'        MORE THAN 1/2
         BNH   *+8                NO - SKIP ADDING
         A     R1,=F'1'           ADD ONE
         LTR   R1,R1              ANYTHING ?
         BZ    C1PPRNT            NO - DON'T PRINT LINE
         CVD   R1,WORK            MAKE DECIMAL
         L     R0,CFACT1M         MULTIPLY BY C1M FACTOR
         LA    R2,LINE1M          POINT TO LINE TO BE WRITTEN
         L     R15,=A(BLNE1M)     POINT BATCH TITLE IF NEEDED
         BAL   R3,FORMATM         THEN WRITE IT OUT
         EJECT
***********************************************************************
*                                                                     *
*        PRINT PAGES CHARGE (C1P)                                     *
*                                                                     *
***********************************************************************
C1PPRNT  L     R1,PAGES           GET PAGES COUNT
         LTR   R1,R1              ANYTHING ?
         BZ    TOTCODE            NO - DON'T PRINT LINE
         CVD   R1,WORK            MAKE DECIMAL
         L     R0,CFACT1P         MULTIPLY BY TOTAL C FACTOR * 10E6
         LA    R2,LINE1P          POINT TO LINE TO BE WRITTEN
         L     R15,=A(BLNE1P)     POINT BATCH TITLE IF NEEDED
         BAL   R3,FORMATM         THEN WRITE IT OUT
         EJECT
***********************************************************************
*                                                                     *
*              TOTAL COST                                             *
*                                                                     *
***********************************************************************
TOTCODE  L     R1,DOLTOT          GET TOTAL DOLLARS (STEP)
         CVD   R1,WORK            MAKE DECIMAL
         MVC   LINETO+68(09),=X'4020202021204B2020'
         ED    LINETO+68(09),WORK+4 DO THE EDIT
         MVI   LINETO+68,C'$'     REPLACE $
         CLI   OSSFLAG,X'FF'      ARE WE OUTSIDE SALES ?
         BNE   *+16               NO - SKIP OVERWRITE
         MVC   LINETO+48(6),=C'  *.**'   DON'T DISPLAY IT
         MVC   LINETO+69(8),=C'    *.**' DON'T DISPLAY IT
         L     R2,=A(LINETX)      POINT TO LINE TO BE WRITTEN
         LA    R15,STAR1          POINT BATCH TITLE IF NEEDED
         BAL   R3,PRINTER         THEN WRITE IT OUT
         LA    R2,LINETO          POINT TO LINE TO BE WRITTEN
         LA    R15,STAR1          POINT BATCH TITLE IF NEEDED
         BAL   R3,PRINTER         THEN WRITE IT OUT
         EJECT
*
*              RETURN
*
EXITA    LA    R2,STAR1           POINT TO LINE TO BE WRITTEN
         LA    R15,STAR1          POINT BATCH TITLE IF NEEDED
         BAL   R3,PRINTER         THEN WRITE IT OUT
         CLI   IEFFLAG,X'FF'      ARE WE IEFACTRT ?
         BNE   CKJES              NO - WE MAY NEED EXTRA LINES
         CLI   T05FLAG,X'FF'      ARE WE A TYPE 5 ?
         BE    CKJES              YES - WE MAY NEED EXTRA LINES
         CLI   TSOFLAG,X'F0'      TSO (TYPE 34)?
         BNE   LSTAR              NO - DON'T  NEED EXTRA LINES (TYPE 4)
CKJES    CLI   JESFLAG,X'FF'      DID JES SSOB FAIL ?
         BNE   OSSCK              NO - SKIP PUTTING IN (GOT REAL STUFF)
         L     R15,=A(BLNEXX)     POINT BATCH TITLE IF NEEDED
         L     R2,=A(BLNETT)      POINT TO LINE TO BE WRITTEN
         BAL   R3,PRINTER         THEN WRITE IT OUT
OSSCK    CLI   OSSFLAG,X'FF'      OUTSIDE SALES ?
         BNE   *+20               NO - GO PUT OUT LAST LINE
         L     R15,=A(BLNEOS)     POINT BATCH TITLE IF NEEDED
         LA    R2,30(R15)         POINT TO LINE TO BE WRITTEN
         BAL   R3,PRINTER         WRITE IT OUT
         B     *+12               SKIP OVER TEST
         CLI   JESFLAG,X'FF'      DID WE PUT OUT EXTRA LINE ?
         BNE   LSTAR              NO - SKIP EXTRA LINE
         LA    R2,STAR1           POINT TO LINE TO BE WRITTEN
         LA    R15,STAR1          POINT BATCH TITLE IF NEEDED
         BAL   R3,PRINTER         THEN WRITE IT OUT
LSTAR    LA    R2,STARS           POINT TO LINE TO BE WRITTEN
         LA    R15,STARS          POINT BATCH TITLE IF NEEDED
         BAL   R3,PRINTER         THEN WRITE IT OUT
         CLI   IEFFLAG,X'FF'      ARE WE IEFACTRT ?
         BE    NOCLOSE            YES - BYPASS CLOSE
         CLI   TSOFLAG,X'F0'      ARE WE TSO ?
         BNE   CLOSER             NO - MUST DO CLOSE
         CLI   TJBFLAG,X'FF'      ARE WE TSO-JOB ?
         BNE   NOCLOSE            NO - WILL DO TPUTS
CLOSER   CLOSE MF=(E,OPENPL)
NOCLOSE  CLI   T05FLAG,X'FF'      WAS THIS A TYPE 5 ?
         BNE   STOP               NO - JUST RETURN
         LA    R2,SMFWSIZ         GET SIZE OF WORKAREA
         A     R2,=F'7'           ROUND UP TO
         N     R2,=X'FFFFFFF8'    A DOUBLE WORD
         LTR   R9,R9              STILL THERE ?
         BZ    CLEAR              NO
      FREEMAIN R,LV=(R2),A=(R9),SP=255  FREEMAIN WORK AREA
CLEAR    L     R2,SAV1            GET PARM AREA ADDRESS
         L     R2,0(R2)           GET COMMON EXIT AREA
         MVC   33(3,R2),X'000000' ZERO OUT USER COMMUNICATIONS FIELD
STOP     LA    R2,CDUWSIZ         GET SIZE OF WORKAREA
         A     R2,=F'7'           ROUND UP TO
         N     R2,=X'FFFFFFF8'    A DOUBLE WORD
         L     R13,4(R13)         BACK CHAIN SAVE AREAS
      FREEMAIN R,LV=(R2),A=(R11)  FREEMAIN WORK AREA
        RETURN (14,12),RC=0       RETURN
         EJECT
FORMATM  MVC   18(12,R2),=X'402020206B2021204B202020'
         ED    18(12,R2),WORK+3   DO THE EDIT
         MVI   18(R2),C'='        PUT '=' BACK
*
FORMATX  CVD   R0,WORK            MAKE DECIMAL
         MVC   46(09,R2),=X'40202021204B202040'
         ED    46(09,R2),WORK+3   DO THE EDIT
         MVI   47(R2),C'='        PUT '=' BACK
         MR    R0,R0              MULTIPLY BY RATE
         CVD   R0,WORK            MAKE DECIMAL
         D     R0,=F'1000000'     GET CDUS * 1000
         C     R0,=F'500000'      MORE THAN 1/2
         BNH   *+8                NO - SKIP ADDING
         A     R1,=F'1'           ADD ONE
         M     R0,CDURATE         MULTIPLY BY TOTAL $/CDU * 100
         D     R0,=F'1000'        GET ACTUAL DOLLARS
         C     R0,=F'500'         MORE THAN 1/2
         BNH   *+8                NO - SKIP ADDING
         A     R1,=F'1'           ADD ONE
         L     R14,DOLTOT         GET DOLLARS TOTAL (STEP)
         AR    R14,R1             ACCUMULATE DOLLARS
         ST    R14,DOLTOT         SAVE DOLLARS TOTAL (STEP)
         CVD   R1,WORK            MAKE DECIMAL
         MVC   68(09,R2),=X'4020202021204B2020'
         ED    68(09,R2),WORK+4   DO THE EDIT
         MVI   68(R2),C'$'        REPLACE $
         CLI   OSSFLAG,X'FF'      ARE WE OUTSIDE SALES ?
         BNE   *+16               NO - SKIP OVERWRITE
         MVC   48(06,R2),=C'  *.**'   DON'T DISPLAY IT
         MVC   69(08,R2),=C'    *.**' DON'T DISPLAY IT
PRINTER  CLI   TSOFLAG,X'F0'      ARE WE TSO ?
         BE    TPUTER             YES - POSSIBILITY OF TPUT EXISTS
BATMAT   L     R14,=A(BLNEXX)     C1G LINE  ADDRESS
         CLC   0(25,R15),0(R14)   C1G SPECIAL LINE?
         BE    PTALLT             NO - MOVE IT AROUND
         L     R14,=A(ABORT1)     NEXT TEST
         CLC   0(50,R15),0(R14)   ABORT LINE ?
         BNE   *+14               NO - MOVE IT AROUND
PTALLT   MVC   BATLINE(111),0(R15) MOVE IN WHAT WE GOT
         B     PTTEST             AND GO ON
         MVC   BATLINE(50),0(R15) MOVE IN BATCH TITLE
         MVC   BATLINE+48(60),18(R2) MOVE TO BATLINE
         MVC   BATLINE+108(2),BATLINE+107 FIX UP LINE END
PTTEST   LA    R2,BATLINE         POINT TO IT
         CLI   IEFFLAG,X'FF'      ARE WE IEFACTRT ?
         BE    IEFPUT             YES - GO WRITE TO SYSMSG
PUTIT    PUT   CUUPRINT,(R2)      NO - MUST BE PLAIN BATCH
         BR    R3                 AND RETURN
TPUTER   CLI   IEFFLAG,X'FF'      ARE WE IEFACTRT ?
         BE    BATMAT             YES - GO FORMAT AND WRITE TO SYSMSG
         L     R14,=A(BLNEOS)     OUTSIDE SALES LINE
         CLC   0(10,R2),30(R14)   SPECIAL FIX UP NEEDED?
         BNE   TPUTTZ             NO
         MVC   BATLINE(4),=CL4'*   ' MOVE IN NEW STRING
         MVC   BATLINE+4(74),4(R2) REST OF LINE
         MVC   BATLINE+78,=CL2'* ' LAST CHARACTERS
         LA    R2,BATLINE         CHANGE POINTER
         B     TPUTTS             AND CONTINUE
TPUTTZ   L     R14,=A(ABORT1)     ABORT MESSAGE?
         CLC   0(50,R2),0(R14)    SPECIAL FIX UP NEEDED?
         BNE   TPUTTS             NO
         MVC   BATLINE(4),=CL4'*   ' MOVE IN NEW STRING
         MVC   BATLINE+4(74),20(R2) REST OF LINE
         MVC   BATLINE+78,=CL2'* ' LAST CHARACTERS
         LA    R2,BATLINE         CHANGE POINTER
TPUTTS   CLI   TJBFLAG,X'FF'      ARE WE TSO-JOB ?
         BE    PUTIT              YES - GO DO PUT TO CUUPRINT
         TPUT  (R2),79,MF=(E,TPUT) TPUT TO TERMINAL
         BR    R3                 AND RETURN
IEFPUT   L     R12,SAV12          RESTORE REG 12
         ST    R2,36(,R12)        SAVE ADDR OF MSG IN IEFYS PARM AREA
         LA    R14,111            ASSUME A LENGTH OF 111 CHARACTERS
         STH   R14,42(,R12)       SAVE LENGTH OF MSG IN IEFYS PARM
         ST    R13,SAV13          SAVE REG 13
         LA    R13,IEFYSWA        45 WORD WORK AREA FOR IEFYS
         L     R15,=V(IEFYS)
         LTR   R15,R15            IS IT THERE ?
         BZ    *+6                NO - SKIP THE 0C1
         BALR  R14,R15
         L     R12,=V(CFACTOR)    RESTORE REG 12
         L     R13,SAV13      RESTORE REG 13
         BR    R3                 AND RETURN
         EJECT
STARS    DC    79C'*'
         DC    CL1' '
STAR1    DC    CL78'*'
         DC    CL2'* '
         LTORG
         EJECT
         PRINT GEN
SSOB     DSECT
      IEFJSSOB CS,CONTIG=NO       SSOB HEADER + NON-CONTIG SSOB
         PRINT NOGEN
         EJECT
CFACTOR  DSECT
*
EYECATCH DS    CL12               EYECATCHER FOR ZAPING
CDURATE  DS    F                  CENTS PER CDU (JAN 1987)
*
STANDSRM DS    F                  STANDARD CPU SRM CONSTANT * 10
*
BYTTGET  DS    F                  "AVERAGE" TERM TGET BYTES
BYTTPUT  DS    F                  "AVERAGE" TERM TPUT BYTES
*
CFACT1A  DS    F                  NET C1A * 1000000
CFACT1B  DS    F                  NET C1B * 1000000
CFACT1C  DS    F                  NET C1C * 1000000
CFACT1D  DS    F                  NET C1D * 1000000
CFACT1F  DS    F                  NET C1F * 1000000
CFACT1G  DS    F                  NET C1G * 1000000
CFACT1J  DS    F                  NET C1J * 1000000
CFACT1M  DS    F                  NET C1M * 1000000
CFACT1P  DS    F                  NET C1P * 1000000
         EJECT
TOTWORK  DSECT
SMFWORK  EQU   *
T40SAVE  DS    F                  TYPE 40 I/O COUNTER (FROM IEFU83)
         DS    F                  EXTRA WORD FOR FUTURE USE
C1ASAVE  DS    F                  TOTAL JOB TCB MILLISECONDS (C1A)
C1CSAVE  DS    F                  TOTAL JOB TAPE MOUNTS (C1C)
         DS    F                  EXTRA WORD FOR FUTURE USE
         DS    F                  EXTRA WORD FOR FUTURE USE
C1MSAVE  DS    D                  TOTAL JOB VMEM OCCUPANCY (C1M)
C1FSAVE  DS    D                  TOTAL JOB COMM (C1F) (TPUT,TGET)
C1JSAVE  DS    D                  TOTAL JOB I/O TIME (C1J) (DISK,TAPE)
         DS    D                  EXTRA DOUBLE WORD FOR FUTURE USE
         DS    D                  EXTRA DOUBLE WORD FOR FUTURE USE
SMFWSIZ  EQU   *-SMFWORK          LENGTH OF WORK AREA
         EJECT
CDUWORK  DSECT
CDUSAVE  DS    18F                SAVE AREA
IEFYSWA  DS    18F                18 WORD WORK AREA FOR IEFYS
OUCBFLG  DS    F                  HOLDER FOR OUCBFLG FIELD
ADJUST   DS    F                  CPU ADJUST FACTOR (SYSADJ*1000)
SAV1     DS    F                  SAVE REG 1
SAV12    DS    F                  SAVE REG 12 FOR CALL TO IEFYS
SAV13    DS    F                  SAVE REG 13 DURING CALL TO IEFYS
RECPTR   DS    F                  POINTER TO SMF RECORD
TCTPTR   DS    F                  POINTER TO TCT
LASTONE  DS    F                  POINTER TO LAST (ZERO) ARRAY ENTRY
IEFFLAG  DS    XL1                IEFACTRT/USER SWITCH
TJBFLAG  DS    XL1                TSO-JOB FLAG
BATLINE  DS    CL111              BATCH LINE WORK AREA
WORK     DS    D                  CVD/EDIT WORK AREA
CUUPRINT DS    0D
         DCB   DDNAME=CUUPRINT,MACRF=PM,DSORG=PS,                      X
               RECFM=F,LRECL=111,BLKSIZE=111
TPUT     TPUT  ,,MF=L
         DS    0D
DMPARM   DS    XL1,AL3            ADDRESS OF DMC HEADER
DMAREA   DS    CL4                CONTROL BLOCK IDENTIFIER
DMADDR   DS    AL4                CONTROL BLOCK ADDRESS
DMC      DS    XL84               DMC ITSELF
SSPARM   DS    XL1,AL3            ADDRESS OF SSOB HEADER
SSAREA   DS    CL4                CONTROL BLOCK IDENTIFIER
         DS    AL2                LENGTH OF SSOB HEADER
         DS    AL2                FUNCTION ID
         DS    AL4                ADDRESS OF SSIB OR ZERO
SSOBRC   DS    F                  RETURN CODE FROM SUBSYSTEM
SSOBPTR  DS    AL4                FUNCTION DEPENDENT AREA POINTER
         DS    F                  SAVE RETURN ADDRESS FOR 31 BIT CALL
         DS    CL4                RESERVED
OPENPL   DS    F                  OPEN PARM LIST
LINE1A   DS    CL80               C1A CHARGES
LINE1B   DS    CL80               C1B CHARGES
LINE1C   DS    CL80               C1C CHARGES
LINE1F   DS    CL80               C1F CHARGES
LINE1G   DS    CL80               C1G CHARGES
LINE1J   DS    CL80               C1J CHARGES
LINE1M   DS    CL80               C1M CHARGES
LINE1P   DS    CL80               C1P CHARGES
LINETO   DS    CL80               TOTAL CHARGES
CDUTOT   DS    F                  CDU TOTAL (STEP)
DOLTOT   DS    F                  DOLLAR TOTAL (STEP)
SPOOL    DS    F                  SPOOLED LINE ACCUMULATOR
PRINT    DS    F                  PRINTED LINE ACCUMULATOR
PAGES    DS    D                  PAGES,CDU  ACCUMULATOR
TCBSECS  DS    F                  HOLDER FOR TCB MILLISECONDS
TAPEMTS  DS    F                  HOLDER FOR TAPE MOUNTS
OCCUPCY  DS    D                  HOLDER FOR JOB OCCUPANCY TIME
TSOFLAG  DS    XL1                BATCH/TSO SWITCH + OVERNITE CLASS
T05FLAG  DS    XL1                WE HAVE A TYPE05 RECORD FOLKS
OSSFLAG  DS    XL1                WE HAVE AN OUTSIDE SALES PCS NUMBER
JESFLAG  DS    XL1                JES SSOB PROCESSING FAILED
CDUWSIZ  EQU   *-CDUSAVE          LENGTH OF WORK AREA
CDUISIZ  EQU   *-CUUPRINT         LENGTH TO INITIALIZE
         EJECT
JOBCUU$  CSECT
INITDCB  DS    0D
         DCB   DDNAME=CUUPRINT,MACRF=PM,DSORG=PS,                      X
               RECFM=F,LRECL=111,BLKSIZE=111
         TPUT  ,,MF=L
         DS    0D
         DC    X'80',AL3(0)       ADDRESS OF DMC HEADER
         DC    C'DMC '            CONTROL BLOCK IDENTIFIER
         DC    A(0)               ADDRESS OF DMC
         DC    XL84'00'           DMC ITSELF
         DC    X'80',AL3(0)       ADDRESS OF SSOB HEADER
         DC    C'SSOB'            CONTROL BLOCK IDENTIFIER
         DC    AL2(SSOBHSIZ)      LENGTH OF SSOB HEADER
         DC    AL2(03)            FUNCTION ID (JOB STATUS - SPECIAL)
         DC    A(0)               ADDRESS OF SSIB OR ZERO
         DC    F'0'               RETURN CODE FROM SUBSYSTEM
         DC    A(0)               FUNCTION DEPENDENT AREA POINTER
         DC    F'0'               SAVE RETURN ADDRESS FOR 31 BIT CALL
         DC    XL4'00000000'      RESERVED
         DC    XL4'80000000'      OPEN PARM LIST
         DC    CL36'* CPU PROCESS MIN =            NUUS '
         DC    CL19'   1A RATE =       '
         DC    CL25'   1A COST = $         * '
         DC    CL36'* CPU PROCESS MIN =            NUUS '
         DC    CL19'   1B RATE =       '
         DC    CL25'   1B COST = $         * '
         DC    CL36'* TAPE VOL MOUNTS =            NUUS '
         DC    CL19'   1C RATE =       '
         DC    CL25'   1C COST = $         * '
         DC    CL36'* COMM MBYTE XFER =            NUUS '
         DC    CL19'   1F RATE =       '
         DC    CL25'   1F COST = $         * '
         DC    CL36'* 10K REC SPL+PRT =            NUUS '
         DC    CL19'   1G RATE =       '
         DC    CL25'   1G COST = $         * '
         DC    CL36'* DASD CONECT MIN =            NUUS '
         DC    CL19'   1J RATE =       '
         DC    CL25'   1J COST = $         * '
         DC    CL36'* VMEM MBYTE-HOUR =            NUUS '
         DC    CL19'   1M RATE =       '
         DC    CL25'   1M COST = $         * '
         DC    CL36'* FORMS: 1K PAGES =            NUUS '
         DC    CL19'   1P RATE =       '
         DC    CL25'   1P COST = $         * '
         DC    CL36'*                                   '
         DC    CL19'                   '
         DC    CL25'TOTAL COST = $         * '
         DC    F'0'               CDU TOTAL (STEP)
         DC    F'0'               DOLLAR TOTAL (STEP)
         DC    F'0'               SPOOLED LINE ACCUMULATOR
         DC    F'0'               PRINTED LINE ACCUMULATOR
         DC    D'0'               PAGES ACCUMULATOR
         DC    F'0'               HOLDER FOR TCT POINTER
         DC    F'0'               HOLDER FOR TCB MILLISECONDS
         DC    F'0'               HOLDER FOR DASD IO MILLISECONDS
         DC    F'0'               HOLDER FOR TAPE MOUNTS
         DC    D'0'               HOLDER FOR JOB OCCUPANCY TIME
         DC    XL1'00'            BATCH/TSO SWITCH
         DC    XL1'00'            WE HAVE A TYPE05 RECORD FOLKS
         DC    XL1'00'            WE HAVE AN OUTSIDE SALES PCS NUMBER
         DS    XL1'00'            JES SSOB PROCESSING FAILED
*
BLNE1A   DC    CL50'*     CPU PROCESSING (ADJUSTED TCB+SRB MINUTES)  ='
BLNE1B   DC    CL50'*     CPU PROCESSING (ADJUSTED TCB+SRB MINUTES)  ='
BLNE1C   DC    CL50'*                 TAPE SERVICES (VOLUME MOUNTS)  ='
BLNE1F   DC    CL50'*     COMMUNICATIONS I/O (MEGABYTES TRANSFERED)  ='
BLNE1G   DC    CL50'*   ESTIMATED OUTPUT SERV (10K REC SPL+PRT+PUN)  ='
BLNE1J   DC    CL50'*             DASD I/O (DEVICE CONNECT MINUTES)  ='
BLNE1M   DC    CL50'*     VIRTUAL MEMORY OCCUPANCY (MEGABYTE-HOURS)  ='
BLNE1P   DC    CL50'*   ESTIMATED OUTPUT FORMS CHARGE (1,000 PAGES)  ='
LINETX   DC    CL32'*                                       '
         DC    CL23'                       '
         DC    CL25'               ------- * '
BLNEXX   DC    CL50'*     C1G AND C1P CHARGES ARE NOT ACTUALS FOR JOB '
         DC    CL50'BUT THE RATE PER 10,000 LINES ON STANDARD ONE PART'
         DC    CL11' FORM.    *'
BLNETT   DC    CL50'*     C1G AND C1P CHARGES ARE RATE PER 1,000 LINES'
         DC    CL30' ON STANDARD ONE PART FORM. * '
BLNEOS   DC    CL50'*  YOU ARE AN OUTSIDE SALES USER. PLEASE CONTACT D'
         DC    CL50'SD ADMINISTRATION AND FINANCE FOR YOUR ACTUAL CDU '
         DC    CL11'RATE.     *'
         END
