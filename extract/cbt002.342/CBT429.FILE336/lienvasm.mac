         TITLE 'LIENVASM -- SIMULATED PL/I ENVIRONMENT (LIE) ROUTINES'
         BANNER LIENVASM
         SPACE
***********************************************************************
*                                                                     *
* MODULE NAME -                                                       *
*        LIENVASM                                                     *
*                                                                     *
* FUNCTION -                                                          *
*        TO PROVIDE SOME OF THE SERVICES OF THE PL/I ENVIRONMENT      *
*        (NOTABLY STORAGE-MANAGEMENT AND BLOCK-STRUCTURING SERVICES)  *
*        IN AN ASSEMBLER-ONLY LOAD MODULE.                            *
*                                                                     *
* ENVIRONMENT -                                                       *
*        NON-PL/I                                                     *
*                                                                     *
* ENTRY POINTS AND FUNCTIONS -                                        *
*        LIEBEGN: CREATE ENVIRONMENT AND ALLOCATE INITIAL STORAGE AREA*
*        LIENTER: OBTAIN DYNAMIC SAVE AREA ON ROUTINE ENTRY           *
*        LIELIFO: OBTAIN VDA (AUTOMATIC STORAGE EXTENSION)            *
*        LIEXIT:  RETURN FROM ROUTINE, FREEING DSA AND VDA'S          *
*        LIERETC: RETURN FROM ROUTINE, SETTING A RETURN CODE AND      *
*                 FREEING DSA AND VDA'S                               *
*        LIEGET:  OBTAIN NON-LIFO (BASED) STORAGE                     *
*        LIEFREE: FREE NON-LIFO (BASED) STORAGE                       *
*        LIESIGN: SIGNAL A PL/I CONDITION (OR ISSUE STOP)             *
*        LIEGOTO: GOTO A PL/I-LIKE LABEL VARIABLE                     *
*        LIEBLK:  INTERCEPT GOTO FROM CALLED ROUTINES                 *
*        LIENSUR: MAKE MEMORY AVAILABLE FOR GETMAIN (NO OP)           *
*        LIERLSE: ALLOW RECLAMATION OF FREED MEMORY (NO OP)           *
*                                                                     *
* NOTE -                                                              *
*        THE SAME SERVICES AND ENTRY POINTS ARE PROVIDED IN A PL/I    *
*        ENVIRONMENT BY THE LIENVPLI MODULE, WHICH INTERFACES TO THE  *
*        PL/I LIBRARY. MODULES WHICH REQUEST PL/I ENVIRONMENTAL       *
*        SERVICES ONLY THROUGH THESE INTERFACES CAN BE RUN EQUALLY    *
*        WELL IN THE PSEUDO-PL/I ENVIORNMENT IMPLEMENTED BY THIS      *
*        MODULE AS IN A TRUE PL/I ENVIRONMENT.                        *
***********************************************************************
         EJECT
LIENVASM CSECT
         SPACE
         REGISTER
         SPACE
         ENTRY LIEBEGN            ENTRY TO SET UP ENVIRONMENT
         ENTRY LIENTER,LIELIFO,LIERETC,LIEXIT,LIEGET,LIEFREE,LIESIGN
         ENTRY LIEGOTO,LIEBLK,LIENSUR,LIERLSE
         TITLE 'LIEBEGN -- CREATE PSEUDO-PL/I ENVIRONMENT AND INITIAL S*
               TORAGE AREA'
         BANNER LIEBEGN
         SPACE
***********************************************************************
*                                                                     *
* ROUTINE NAME -                                                      *
*        LIEBEGN                                                      *
*                                                                     *
* FUNCTION -                                                          *
*        TO SET UP THE PSEUDO-PL/I ENVIRONMENT, ALLOCATE THE INITIAL  *
*        STORAGE AREA, AND CREATE THE DSA FOR THE MAIN PROCEDURE.     *
*                                                                     *
* LINKAGE -                                                           *
*        BALR R11,R10, GENERATED BY THE LIENTRY MACRO, USED AS THE    *
*        FIRST STATEMENT OF THE MAIN ROUTINE.                         *
*                                                                     *
* PARAMETERS -                                                        *
*        THE SIZE OF THE ISA IS CONTAINED IN REGISTER 1, AND THE SIZE *
*        OF THE MAIN ROUTINE'S DSA IN REGISTER 0.                     *
*                                                                     *
* RETURN INFORMATION -                                                *
*        THE MAIN ROUTINE'S DSA IS CONTAINED IN REGISTER 13. REGISTER *
*        12 ADDRESSES THE PSEUDO-TCA.                                 *
***********************************************************************
         EJECT
***********************************************************************
*        THE ROUTINE LIEBEGN IS CALLED TO INITIALIZE THE ENVIRONMENT, *
*        BY ALLOCATING THE ISA AND FIRST DSA. THIS ROUTINE ALLOCATES  *
*        AND INITIALIZES A PSEUDO-REGISTER VECTOR, AND POINTS R12 TO A*
*        PSEUDO-TCA. THE FIRST TWO FLAG BYTES OF THE TCA AND THE      *
*        PSEUDO-REGISTER POINTER AT OFFSET 4 ARE USED COMPATIBLY      *
*        WITH PL/I, FOR THE BENEFIT OF CALLING ROUTINES. (IN          *
*        PARTICULAR, THIS ALLOWS THE STANDARD TEST FOR A CHECKOUT     *
*        COMPILER ENVIRONMENT TO BE MADE RELIABLY.)                   *
***********************************************************************
         SPACE
         USING LIEBEGN,R10
LIEBEGN  STH   R0,8(,R13)         SAVE SIZES
         STH   R1,10(,R13)
         LR    R0,R1              MOVE ISA SIZE
         O     R0,=X'01000000'    TAKE IT FROM SUBPOOL 1
         GETMAIN R,LV=(0)         GET INITIAL STORAGE AREA
         USING ATCA,R1
         ST    R12,ATCAR12        SAVE CALLER'S R12
         LR    R12,R1             POINT R12 TO PSEUDO-TCA
         DROP  R1
         USING ATCA,R12
         MVI   ATCAFLGS,ATCAFAKE  SET FAKE TCA FLAG (= PL/I CICS FLAG)
         LH    R0,10(,R13)        GET THE ISA SIZE
         STH   R0,ATCAISIZ        AND SAVE FOR EXIT
         LA    R0,ATCALEN(,R12)   START OF PSEUDO-REGS
         ST    R0,ATCAPRVA
         AH    R1,10(,R13)        FIND END OF ISA
         XC    ATCAOPIC(ATCALEN-ATCAOPIC+ATCA),ATCAOPIC
         ST    R1,ATCAEOS         STORE FOR LATER
         L     R1,PRLEN           GET LENGTH OF PSEUDO-REGS
         BCTR  R1,0
         EX    R1,CLEAR           CLEAR THEM (LENGTH MUST < 256)
         LA    R1,ATCALEN+1(R1,R12) POINT PAST TCA & PSEUDO-REGS
         LH    R0,8(,R13)         GET SIZE OF 1ST DSA
         USING ADSA,R1
         ST    R0,ADSALEN         SAVE FOR EVENTUAL EXIT
         MVI   ADSALEN,ADSAFINL   MARK AS FINAL DSA
         AR    R0,R1
         ST    R0,ATCANAB         UPDATE NEXT AVAILABLE BYTE
         B     CHAIN2             GO CHAIN SAVE AREAS
         SPACE 2
CLEAR    XC    ATCALEN(0,R12),ATCALEN(R12)  ZERO PSEUDO-REGISTERS
         SPACE 2
PRLEN    CXD   ,                  LENGTH OF PSEUDO-REGISTERS
         TITLE 'LIENTER -- DSA ALLOCATION ROUTINE'
         BANNER LIENTER
         SPACE
***********************************************************************
*                                                                     *
* ROUTINE NAME -                                                      *
*        LIENTER                                                      *
*                                                                     *
* FUNCTION -                                                          *
*        TO OBTAIN A DSA AND AUTOMATIC STORAGE FOR ITS CALLER.        *
*                                                                     *
* LINKAGE -                                                           *
*        BALR R11,R10, GENERATED BY THE LIENTRY MACRO, USED AS THE    *
*        THE FIRST STATEMENT OF THE CALLING ROUTINE.                  *
*                                                                     *
* PARAMETERS -                                                        *
*        THE SIZE OF THE DSA IS CONTAINED IN REGISTER 0.              *
*                                                                     *
* RETURN INFORMATION -                                                *
*        THE ADDRESS OF THE NEW DSA IS CONTAINED IN REGISTER 13.      *
***********************************************************************
         EJECT
***********************************************************************
*        LIENTER IS CALLED TO GET A NEW DYNAMIC SAVE AREA FOR         *
*        ENTRY INTO A NEW ROUTINE. DSA'S ARE ALLOCATED FROM THE ISA   *
*        IF POSSIBLE; OTHERWISE, THEY ARE OBTAINED BY GETMAIN. NOTE   *
*        THAT THE FIELDS IN THE DSA RELATING TO GOTO INTERCEPTION,    *
*        AND TO PL/I CONDITION HANDLING ARE DEFINED COMPATIBLY WITH   *
*        PL/I, FOR THE BENEFIT OF THOSE ROUTINES WHICH REQUIRE THOSE  *
*        SERVICES IN AN UNKNOWN ENVIRONMENT.                          *
***********************************************************************
         SPACE
         USING LIENTER,R10
LIENTER  ST    R0,8(,R13)         STORE REQUESTED SIZE
         L     R1,ATCANAB         GET NEXT AVAILABLE IN ISA
         AR    R0,R1              ADD REQUESTED LENGTH
         C     R0,ATCAEOS         COMPARE TO END OF ISA
         BH    OVERFLOW           TOO LARGE, MUST USE GETMAIN
         ST    R0,ATCANAB         STORE NEW NEXT AVAILABLE
         B     CHAIN              GO CHAIN AREAS
OVERFLOW MVI   8(R13),X'01'       ADD SUBPOOL TO LENGTH
         L     R0,8(,R13)
         GETMAIN R,LV=(0)         GET A DSA FROM THE SYSTEM
         DROP  R10
         SPACE
CHAIN    MVC   ADSALEN,8(R13)     MOVE THE DSA LENGTH
         SPACE
***********************************************************************
*        CONTROL COMES HERE FROM LIEBEGN TO COMPLETE THE ALLOCATION OF*
*        THE MAIN ROUTINE'S DSA.                                      *
***********************************************************************
         SPACE
CHAIN2   ST    R1,ADSACHN2-ADSA(,R13)  LINK SAVE AREAS
         ST    R13,ADSACHN
         XC    ADSAFLGS(4),ADSAFLGS
         XC    ADSAVDA,ADSAVDA    ZERO VDA POINTER
         XC    ADSAOERX,ADSAOERX  AND ERROR EXIT POINTER
         ST    R1,ATCADSA         STORE NEW TOP DSA
         LR    R13,R1             ESTABLISH NEW SAVE AREA
         BR    R11                AND RETURN
         DROP  R1
         TITLE 'LIELIFO -- GET LIFO STORAGE (VDA) ROUTINE'
         BANNER LIELIFO
         SPACE
***********************************************************************
*                                                                     *
* ROUTINE NAME -                                                      *
*        LIELIFO                                                      *
*                                                                     *
* FUNCTION -                                                          *
*        TO OBTAIN WORK STORAGE WHICH WILL BE FREED ON EXIT FROM      *
*        THE CALLING ROUTINE.                                         *
*                                                                     *
* LINKAGE -                                                           *
*        CALL, GENERATED BY THE LIFO MACRO.                           *
*                                                                     *
* PARAMETERS -                                                        *
*        THE SIZE OF THE STORAGE REQUIRED IS PASSED IN REGISTER 0.    *
*                                                                     *
* RETURN INFORMATION -                                                *
*        THE ADDRESS OF THE ALLOCATED STORAGE IS RETURNED IN REGISTER *
*        1.                                                           *
***********************************************************************
         EJECT
***********************************************************************
*        OBTAIN VDA STORAGE FROM THE ISA IF POSSIBLE, OR OTHERWISE BY *
*        GETMAIN. THE VDA'S ARE CHAINED FROM THE DSA, SO THEY CAN BE  *
*        FREED ON BLOCK EXIT.                                         *
***********************************************************************
         SPACE
         USING LIELIFO,R11
         USING ADSA,R13
LIELIFO  STM   R14,R11,ADSASAVE
         LR    R11,R15            SET UP BASE REG
         LR    R8,R0              MOVE REQUESTED LENGTH
         LA    R8,AVDAHLEN(,R8)   ADD SPACE FOR HEADER
         L     R1,ATCANAB         FIND NEXT AVAILABLE
         AR    R8,R1              ADD IN LENGTH NEEDED
         C     R8,ATCAEOS         IS THERE ENOUGH LEFT?
         BH    OVERLIFO           NO, MUST GETMAIN
         ST    R8,ATCANAB         YES, STORE NEW AVAILABLE POINTER
         SR    R8,R1              GET LENGTH BACK IN R8
         B     GOTLIFO
         SPACE
OVERLIFO SR    R8,R1              GET BACK AMOUNT NEEDED
         O     R8,=X'01000000'    GET FROM SUBPOOL 1
         GETMAIN R,LV=(R8)        GET A VDA
GOTLIFO  L     R9,ADSAVDA         GET VDA POINTER FROM DSA
         ST    R1,ADSAVDA         ADD TO CHAIN
         USING AVDA,R1
         ST    R9,AVDACHN
         ST    R8,AVDALEN         ADD LENGTH TO HEADER
         LA    R1,AVDAHLEN(,R1)   PART AVAILABLE TO CALLER
         ST    R1,24(,R13)        RETURN IN R1
         LM    R14,R11,12(R13)
         BR    R14                RETURN TO CALLER
         SPACE
         DROP  R11,R1
         TITLE 'LIERETC/LIEXIT -- PROCEDURE EXIT ROUTINES'
         BANNER LIEXIT
         SPACE
         BANNER LIERETC
         SPACE
***********************************************************************
*                                                                     *
* ROUTINE NAMES -                                                     *
*        LIEXIT AND LIERETC                                           *
*                                                                     *
* FUNCTION -                                                          *
*        TO RETURN TO OUR CALLER'S CALLER, AFTER FREEING THE DSA AND  *
*        ANY VDA'S.                                                   *
*                                                                     *
* LINKAGE -                                                           *
*        ENTERED BY BR R14, GENERATED BY THE LIEXIT MACRO.            *
*                                                                     *
* PARAMETERS -                                                        *
*        FOR LIEXIT, NONE. FOR LIERETC, THE RETURN CODE IS PASSED IN  *
*        REGISTER 15.                                                 *
*                                                                     *
* RETURN INFORMATION -                                                *
*        RETURN IS NOT MADE TO THE CALLING ROUTINE, BUT TO ITS CALLER.*
*        LIERETC DOES RETURN THE REQUESTED RETURN CODE IN REGISTER 15.*
***********************************************************************
         EJECT
***********************************************************************
*        LIERETC AND LIEXIT EXECUTE A STANDARD RETURN SEQUENCE AFTER  *
*        FREEING THE DSA AND ANY VDA'S. FOR STORAGE TAKEN FROM THE    *
*        ISA, THIS MERELY INVOLVES MOVING THE NAB (NEXT AVAILABLE     *
*        BYTE POINTER). AREAS TAKEN OUTSIDE THE ISA MUST BE           *
*        INDIVIDUALLY FREEMAINED.                                     *
***********************************************************************
         SPACE
         USING LIERETC,R14
LIERETC  L     R7,ADSACHN         PREVIOUS SAVE AREA
         ST    R15,16(,R7)        STORE RETURN CODE
         BAL   R11,FREEUP         JOIN WITH LIEXIT
         DROP  R14
         SPACE
         USING LIEXIT,R11
LIEXIT   LR    R11,R14            SET UP BASE
         L     R7,4(,R13)         LOCATE PREVIOUS SAVE AREA
         SPACE
***********************************************************************
*        THE PSEUDO-PL/I ENVIRONMENT SUPPORTS A DEBUGGING FACILITY,   *
*        IMPLEMENTED BY THE LIERRSET ROUTINE (Q.V.). UPON EXIT FROM   *
*        A ROUTINE, WE SEE IF THAT ROUTINE ESTABLISHED A SPIE EXIT    *
*        THROUGH LIERRSET AND, IF SO, ISSUE SPIE TO RESTORE THE       *
*        PREVIOUS ENVIRONMENT.                                        *
***********************************************************************
         SPACE
FREEUP   CLI   ADSAOERX,0         NEED TO RESET SPIE?
         BZ    NOUNSPIE           NO.
         L     R1,ATCAOPIC        YES, GET ORIGINAL
         SPIE  MF=(E,0(R1))
         XC    ATCAOPIC,ATCAOPIC  REMOVE POINTER FROM TCA
NOUNSPIE OC    ADSAOERX,ADSAOERX  NEED TO RESET EXIT POINT?
         BZ    NOERRX             NO.
         MVC   ATCAERRX+1(3),ADSAOERX+1 YES,RESET
         SPACE
NOERRX   L     R8,ADSAVDA         LOCATE FIRST VDA
FREELIFO LTR   R9,R8              IS THERE ANY MORE?
         USING AVDA,R9
         BZ    FREESAVE           NO.
         L     R8,AVDACHN         YES, GET THE CHAIN
         CLI   AVDALEN,ADSAGOT    WAS IT GETMAINED?
         BNE   POPLIFO            NO.
         L     R0,AVDALEN         YES, LOAD LENGTH & SUBPOOL
         FREEMAIN R,LV=(0),A=(R9) GIVE IT BACK
         B     FREELIFO           AND CONTINUE
POPLIFO  ST    R9,ATCANAB         MAKE VDA AVAILABLE
         B     FREELIFO
         DROP  R9
         SPACE
FREESAVE TM    ADSALEN,ADSAFINL   CHECK FOR 1ST/GETMAINED DSA
         BO    ALLDONE            IF THE VERY FIRST
         BZ    POPSAVE            IF NOT GETMAINED
         L     R0,ADSALEN         GET SIZE OF DSA
         FREEMAIN R,LV=(0),A=(R13)     RETURN DSA TO SYSTEM
         B     RETURN             AND RETURN TO CALLER'S CALLER
POPSAVE  ST    R13,ATCANAB        DSA NOW HEADS AVAILABLE
RETURN   ST    R7,ATCADSA         UPDATE TOP DSA POINTER
RETURN2  LR    R13,R7             OLD DSA TO R13
         LM    R14,R11,ADSASAVE
         BR    R14                RETURN
         SPACE
***********************************************************************
*        IF WE ARE ABOUT TO FREE THE FIRST DSA, WE MUST DESTROY THE   *
*        PSEUDO-PL/I ENVIRONMENT. WE DEALLOCATE THE INITIAL STORAGE   *
*        AREA, AND RESTORE THE CONTENTS OF REGISTER 12 WHEN THE       *
*        ENVIRONMENT WAS ORIGINALLY CREATED.                          *
***********************************************************************
         SPACE
ALLDONE  LH    R0,ATCAISIZ        GET ORIGINAL ISA SIZE
         O     R0,=X'01000000'
         LR    R1,R12
         L     R12,ATCAR12        RESTORE CALLER'S R12
         FREEMAIN R,LV=(0),A=(1)  GIVE BACK THE ISA
         B     RETURN2            AND RETURN TO CALLER
         SPACE
         DROP  R11,R13
         TITLE 'LIEGET/LIEFREE -- NON-LIFO STORAGE GET AND FREE ROUTINE*
               S'
         BANNER LIEGET
         SPACE
         BANNER LIEFREE
         SPACE
***********************************************************************
*                                                                     *
* ROUTINE NAMES -                                                     *
*        LIEGET AND LIEFREE                                           *
*                                                                     *
* FUNCTION -                                                          *
*        TO ALLOCATE AND FREE (RESPECTIVELY) NON-LIFO STORAGE, I.E.,  *
*        STORAGE WHOSE LIFETIME IS NOT THE SAME AS THAT OF THE        *
*        CALLING ROUTINE.                                             *
*                                                                     *
* LINKAGE -                                                           *
*        CALL, GENERATED BY THE LIGET AND LIFREE MACROS, RESPECTIVELY.*
*                                                                     *
* PARAMETERS -                                                        *
*        R0 CONTAINS THE AMOUNT OF STORAGE TO ALLOCATE OR FREE. FOR   *
*        LIEFREE, R1 CONTAINS THE AREA TO FREE.                       *
*                                                                     *
* RETURN INFORMATION -                                                *
*        FOR LIEGET, R1 WILL CONTAIN THE ADDRESS OF THE ALLOCATED     *
*        MEMORY. NO INFORMATION IS RETURNED FROM LIEFREE.             *
***********************************************************************
         EJECT
***********************************************************************
*        LIEGET AND LIEFREE MERELY ISSUE GETMAIN AND FREEMAIN (FROM   *
*        SUBPOOL 1) TO PERFORM THEIR FUNCTION.                        *
***********************************************************************
         SPACE
         USING LIEGET,R15
LIEGET   ST    R14,12(,R13)       SAVE RETURN POINT
         O     R0,=X'01000000'    GET FROM SUBPOOL 1
         GETMAIN R,LV=(0)         GIMME SOME
         L     R14,12(,R13)       RESTORE RETURN POINT
         BR    R14                AND RETURN
         SPACE 10
         USING LIEFREE,R15
LIEFREE  ST    R14,12(,R13)       SAVE RETURN POINT
         O     R0,=X'01000000'    STORAGE IS SUBPOOL 1
         FREEMAIN R,LV=(0),A=(1)  RECYCLE CORE
         L     R14,12(,R13)       RESTORE RETURN POINT
         BR    R14
         SPACE
         DROP  R15
         TITLE 'LIESIGN -- SIGNAL PL/I CONDITION ROUTINE'
         BANNER LIESIGN
         SPACE
***********************************************************************
*                                                                     *
* ROUTINE NAME -                                                      *
*        LIESIGN                                                      *
*                                                                     *
* FUNCTION -                                                          *
*        TO SIGNAL A PL/I CONDITION (OR ISSUE A PL/I STOP, WHICH IS   *
*        REALLY A PECULIAR WAY OF SIGNALLING FINISH).                 *
*                                                                     *
* LINKAGE -                                                           *
*        CALL, GENERATED BY THE LISIGNAL MACRO.                       *
*                                                                     *
* PARAMETERS -                                                        *
*        REGISTER 1 ADDRESS A PL/I CONDITION WORD, WHICH DEFINES      *
*        THE CONDITION TO BE SIGNALLED.                               *
*                                                                     *
* RETURN INFORMATION -                                                *
*        NONE                                                         *
***********************************************************************
         EJECT
***********************************************************************
*        LIESIGN IS CALLED TO SIGNAL A CONDITION, ROUTING CONTROL TO  *
*        AN "ON-UNIT" ESTABLISHED BY THE LION MACRO (WHICH GENERATES  *
*        CODE SIMILAR TO THAT GENERATED BY THE PL/I ON STATEMENT,     *
*        INVOLVING MANIPULATION OF "ON-CELLS" IN THE DSA). "ON-UNITS" *
*        MAY BE OF EITHER "CALL" TYPE, IN WHICH CASE CONTROL IS TO    *
*        RETURN TO THE SIGNALLER AFTER EXECUTION OF THE UNIT, OR OF   *
*        "GOTO" TYPE. IF NO "ON-UNIT" FOR THE CONDITION IS OUTSTANDING*
*        THE SIGNAL IS TREATED AS A NO-OP, UNLESS THE SIGNAL WAS A    *
*        "STOP" REQUEST (IN WHICH CASE EXIT IS MADE TO THE CALLER OF  *
*        THE CREATOR OF THE ENVIRONMENT WITH A RETURN CODE OF 1000),  *
*        OR AN "ERROR" REQUEST (WHICH IS LIKE STOP WITH CODE 2000).   *
*                                                                     *
*        NOTE: SEE THE PL/I OPTIMIZER EXECUTION LOGIC MANUAL FOR MORE *
*        INFORMATION ON THE IMPLEMENTATION OF "ON-CELLS".             *
***********************************************************************
         SPACE
         USING LIESIGN,R15
LIESIGN  STM   R14,R5,12(R13)     SAVE SOME REGISTERS
         LR    R5,R13             COPY THE DSA POINTER
         USING ADSA,R5
ONSRCH   TM    ADSAFLGS,ADSAON    THIS BLOCK HAVE ON UNITS?
         BZ    ONUP               NO, TRY PREVIOUS
         L     R14,ADSAONCL       YES, FIND FIRST ON CELL
CONDLKUP CLC   0(1,R1),0(R14)     THIS CELL FOR THIS CONDITION?
         BE    CALLUNIT           YES.
         LA    R14,1(,R14)        NO, CONTINUE
         CLI   0(R14),X'01'       UNTIL END CELL FOUND
         BNE   CONDLKUP
ONUP     TM    ADSALEN,ADSAFINL   REACHED THE FIRST DSA?
         BO    IGNORE             YES, IGNORE THE CONDITION
         L     R5,ADSACHN         NO, TRY PREVIOUS BLOCK
         B     ONSRCH
         SPACE
CALLUNIT S     R14,ADSAONCL       COMPUTE OFFSET OF ON CELL
         SLL   R14,3              MULTIPLY BY ONCB SIZE
         A     R14,ADSAONCB       FIND THE RIGHT ONCB
         USING ONCB,R14
         TM    LSFG,LSF2          IS THIS A GOTO UNIT?
         BNZ   ONGOTO             YES, DO SO
         MVC   ADSAOR14,12(R13)   NO, SAVE R14 & R5
         MVC   ADSAOR5,40(R13)    PERMANENTLY
         L     R15,LSTR           LOCATE ON UNIT ENTRY
         BALR  R14,R15            AND CALL IT
         L     R14,ADSAOR14       RESTORE R14
         L     R5,ADSAOR5         AND R5
         SPACE
IGNORE   BALR  R15,0              GET A NEW BASE REG
         USING *,R15
         CLC   0(2,R1),=X'0D80'   IS THIS A STOP?
         BE    STOP               YES, DO SO
         CLI   0(R1),X'0C'        IS THIS SIGNAL ERROR?
         BE    SIGNERR            YES, STOP
         BR    R14                NO, RETURN
         SPACE
         USING LIESIGN,R15        RESTORE ENTRY BASE REG
ONGOTO   L     R14,LSTR           FIND THE LABEL VAR OFFSET
         AR    R5,R14             FIND THE LABEL VAR
         LIGOTO 0(R5)             AND GO TO IT
         DROP  R5,R14
         SPACE
***********************************************************************
*        A STOP REQUIRES THE TERMINATION OF ALL ACTIVE PROCEDURES, AND*
*        CAN THEREFORE BE REGARDED AS THE ULTIMATE NON-LOCAL GOTO. IT *
*        IS IMPLEMENTED THROUGH THE GOTO HANDLER, WITH THE TARGET DSA *
*        PARAMETER REGISTER SET TO 0 TO INDICATE THAT A FULL EXIT IS  *
*        REQUIRED.                                                    *
***********************************************************************
         SPACE
STOP     SR    R1,R1              TELL GOTO TO GO ALL THE WAY
         B     GETOUT
SIGNERR  LA    R1,1               MAKE R1 NEGATIVE FOR SIGNAL ERROR
         LNR   R1,R1
GETOUT   BALR  R14,0              AND USE GOTO TO STOP
         DROP  R15
         TITLE 'LIEGOTO -- GOTO LABEL VARIABLE ROUTINE'
         BANNER LIEGOTO
         SPACE
***********************************************************************
*                                                                     *
* ROUTINE NAME -                                                      *
*        LIEGOTO                                                      *
*                                                                     *
* FUNCTION -                                                          *
*        TO GO TO A PSEUDO-PL/I LABEL IN A CALLING ROUTINE,           *
*        TERMINATING INTERVENING BLOCKS.                              *
*                                                                     *
* LINKAGE -                                                           *
*        BR 14, GENERATED BY THE LIGOTO MACRO.                        *
*                                                                     *
* PARAMETERS -                                                        *
*        REGISTER 0 ADDRESSES THE TARGET ADDRESS AND REGISTER 1       *
*        CONTAINS THE DSA OF THE ROUTINE TO WHICH CONTROL IS TO BE    *
*        RETURNED.                                                    *
*                                                                     *
* RETURN INFORMATION -                                                *
*        NONE (CONTROL NEVER RETURNS)                                 *
***********************************************************************
         EJECT
***********************************************************************
*        LIEGOTO IS CALLED TO TRANSFER TO A PSEUDO-PL/I LABEL IN      *
*        ANOTHER ROUTINE, GENERATED BY THE LIBEL MACRO. (THE LABEL    *
*        IN FACT CONTAINS THE SAME INFORMATION AS A PL/I LABEL        *
*        VARIABLE.) DSA'S FOR ROUTINES BETWEEN THE CALLER AND THE     *
*        DESTINATION ARE FREED BEFORE THE GOTO IS COMPLETED. ALSO,    *
*        IF ANY OF THE ROUTINES TO BE TERMINATED HAVE REQUESTED       *
*        GOTO INTERCEPTION, THEY ARE GIVEN CONTROL TO ALLOW THEM TO   *
*        CLEAN UP BEFORE THE GOTO COMPLETES.                          *
***********************************************************************
         SPACE
         USING LIEGOTO,R14
         USING ADSA,R13
LIEGOTO  CR    R1,R13             FOUND THE RIGHT DSA?
         BNE   LOWER              NO.
         SPACE
***********************************************************************
*        THE LABEL VALUE CONSISTS OF TWO WORDS. THE FIRST IS THE      *
*        ADDRESS TO WHICH CONTROL SHOULD BE TRANSFERRED, AND THE      *
*        SECOND IS THE BASE ADDRESS OF THE ROUTINE, WHICH IS TO BE    *
*        LOADED INTO REGISTER 2 (THE NORMAL PL/I BASE REGISTER)       *
*        BEFORE EXECUTING THE BRANCH.                                 *
***********************************************************************
         SPACE
         LR    R2,R0              YES, LOCATE LABEL CONSTANT
         LM    R1,R2,0(R2)        LOAD ADDR & BASE VALUE
         BR    R1                 GO TO THE LABEL
         SPACE
LOWER    TM    ADSAFLGS+1,ADSABLOK     ARE GOTO'S INTERCEPTED?
         L     R2,ADSACHN         FIND PREVIOUS DSA
         BZ    NOBLOCK            NO, EXIT THIS LEVEL
         L     R2,ADSACHN-ADSA(,R2)    YES, FIND THE ONE BEFORE THAT
         NI    ADSAFLGS+1,255-ADSABLOK TURN OFF BLOCKING FLAG
         SPACE
***********************************************************************
*        IF THE DSA TO GOTO IS NOT FOUND, AND THIS IS NOT A "STOP"    *
*        REQUEST, ISSUE A MESSAGE AND ABEND, AS THIS SHOULD NOT OCCUR.*
*        IF IT IS A STOP REQUEST, ISSUE LIEXIT TO DESTROY THE         *
*        ENVIRONMENT AND PASS A RETURN CODE OF 1000 TO OUR ULTIMATE   *
*        CALLER.                                                      *
***********************************************************************
         SPACE
NOBLOCK  TM    ADSALEN,ADSAFINL   HAVE WE HIT BOTTOM?
         BNO   CONTINUE           NO.
         LTR   R1,R1              YES, EXECUTING STOP?
         BNZ   NOSTOP             NO.
         LIEXIT RC=1000           YES, EXIT WITH RC 1000
NOSTOP   BALR  R2,0
         USING *,R2
         LTR   R1,R1              IS THIS SIGNAL ERROR?
         BM    ERREND             YES, SKIP WTP
         WTO   'LIE001T LOGIC ERROR -- INVALID USE OF GOTO',           *
               DESC=7,ROUTCDE=11  TRY TO SEND A MESSAGE
ERREND   ABEND 2000,DUMP          AND DIE AFTER ERROR
         DROP  R2
         SPACE
***********************************************************************
*        IF THE FATHER OF THE ACTIVE ROUTINE IS INTERCEPTING GOTO'S,  *
*        RETURN CONTROL THERE, AFTER MODIFYING HIS SAVE AREA SO HE    *
*        WILL REENTER LIEGOTO WHEN HE RETURNS. ELSE, MODIFY THE       *
*        ACTIVE ROUTINE'S SAVE AREA SIMILARLY, AND ISSUE LIEXIT TO    *
*        FREE THAT ROUTINE'S DSA AND VDA'S. LIEXIT WILL THEN RETURN   *
*        CONTROL TO LIEGOTO (WITH THE SAME PARAMETERS) TO ALLOW THE   *
*        GOTO TO PROCEED.                                             *
***********************************************************************
         SPACE
CONTINUE STM   R14,R1,12(R2)      CAUSE "RETURN" TO LIEGOTO
         C     R2,ADSACHN         INTERCEPTION IN PROGRESS?
         BNE   BLOCKRET           YES.
         LIEXIT ,                 NO, EXIT THIS LEVEL
BLOCKRET L     R13,ADSACHN        IF INTERCEPTED, RETURN DIRECTLY
         LM    R14,R11,ADSASAVE
         BR    R14
         TITLE 'LIEBLK -- GOTO INTERCEPTION ROUTINE'
         BANNER LIEBLK
         SPACE
***********************************************************************
*                                                                     *
* ROUTINE NAME -                                                      *
*        LIEBLK                                                       *
*                                                                     *
* FUNCTION -                                                          *
*        TO REQUEST INTERCEPTION OF ANY ATTEMPT TO EXIT THE CALLING   *
*        ROUTINE VIA GOTO. IF SUCH A GOTO OCCURS, CONTROL RETURNS     *
*        TEMPORARILY TO THE CALLER OF OUR CALLER; ON RETURN THEREFROM,*
*        THE GOTO IS ALLOWED TO COMPLETE.                             *
*                                                                     *
* LINKAGE -                                                           *
*        CALL, GENERATED BY THE LIBLOCK MACRO.                        *
*                                                                     *
* PARAMETERS -                                                        *
*        REGISTER 1 MUST CONTAIN THE DSA OF THE INTERCEPTING ROUTINE  *
*        (I.E., OUR CALLER'S CALLER).                                 *
*                                                                     *
* RETURN INFORMATION -                                                *
*        NONE                                                         *
*                                                                     *
* NOTE -                                                              *
*        BYTE 1 OF THE CALLER'S DSA MUST BE SET IN ADVANCE TO X'08'.  *
*        IF A GOTO IS INTERCEPTED, THE BIT IS TURNED OFF TO INDICATE  *
*        THIS TO THE INTERCEPTING ROUTINE.                            *
***********************************************************************
         EJECT
***********************************************************************
*        LIEBLK IS CALLED TO PREVENT GOTO'S OUT OF A ROUTINE. THIS    *
*        ROUTINE ONLY NEEDS TO CHAIN DSA'S TOGETHER, AS ONLY THE      *
*        SETTING OF A BIT IN THE DSA IS NECESSARY TO INHIBIT GOTO     *
*        OUT OF BLOCK (AND THIS MUST BE PERFORMED BY OUR CALLER, AS   *
*        THAT IS HOW IT IS DONE IN PL/I).                             *
***********************************************************************
         SPACE
LIEBLK   ST    R1,4(,R13)         CHAIN DSA'S TOGETHER
         BR    R14                AND THEN RETURN
         TITLE 'LIENSUR/LIERLSE -- GETMAIN ASSURANCE/FREEMAIN RECOVERY *
               ROUTINES'
         BANNER LIENSUR
         SPACE
         BANNER LIERLSE
         SPACE
***********************************************************************
*                                                                     *
* ROUTINE NAMES -                                                     *
*        LIENSUR AND LIERLSE                                          *
*                                                                     *
* FUNCTION -                                                          *
*        TO RESPECTIVELY ENSURE THAT A GETMAIN WILL BE SUCCESSFUL AND *
*        TO ALLOW THE RECLAMATION OF FREEMAINED MEMORY. THESE ROUTINES*
*        PERFORM NO FUNCTION IN THE PSEUDO-PL/I ENVIRONMENT; THEY     *
*        ARE PRESENT FOR RESOLUTION OF REFERENCES BY ROUTINES WHICH   *
*        REQUIRE THESE SERVICES IN A PL/I CHECKOUT COMPILER           *
*        ENVIRONMENT.                                                 *
*                                                                     *
* LINKAGE -                                                           *
*        CALL, GENERATED BY THE LINSURE AND LIRLSE MACROS,            *
*        RESPECTIVELY.                                                *
*                                                                     *
* PARAMETERS -                                                        *
*        FOR LIENSUR, REGISTER 0 CONTAINS THE AMOUNT OF MEMORY        *
*        TO BE MADE AVAILABLE. NO PARAMETERS ARE PASSED TO LIERLSE.   *
*                                                                     *
* RETURN INFORMATION -                                                *
*        NONE                                                         *
***********************************************************************
         EJECT
LIENSUR  BR    R14                INSURANCE NOT AVAILABLE
         SPACE 5
LIERLSE  BR    R14
         SPACE 3
         LTORG
         TITLE 'LIENVASM -- PSEUDO-PL/I CONTROL BLOCK MAPPINGS'
         ASMTCA
         SPACE 5
         ASMDSA
         EJECT
         ASMVDA
         SPACE 5
         PLIONCB ,                MAP PL/I STATIC ONCB
         END
