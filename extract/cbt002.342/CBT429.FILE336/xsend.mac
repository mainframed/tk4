         MACRO
&NAME    ERROR &TEXT,&EXIT
&NAME    UPUT  ERR&SYSNDX-1,L'ERR&SYSNDX+1,INFOR,CPPL=$CPPL       MVS
         MVI   RCODE+1,12         INDICATE ERROR TO CALLER        MVS
         B     &EXIT
         DC    C' '                                               MVS
ERR&SYSNDX DC C&TEXT
         MEND
XSND     TITLE 'XSEND -- EXTENDED "SEND" COMMAND'
XSEND    SAVEX LV=WORKLEN                                         MVS
         SPACE 3
ON       EQU   X'FF'
OFF      EQU   X'00'
HIGHP    EQU   X'20'                                              MVS
NOWAIT   EQU   X'10'                                              MVS
BREAKIN  EQU   X'04'                                              MVS
$1       EQU   R4
$2       EQU   R5
TEXTADDR EQU   R6
ECBLIST  EQU   R6                                                 MVS
TEXTLEN  EQU   R7
BUSY     EQU   R7                                                 MVS
ECB      EQU   R7                                                 MVS
TABLPNTR EQU   R8
TABLLEN  EQU   R9
TABLBASE EQU   R10
         EJECT
***********************************************************************
*        THIS IS THE ICSA XSEND COMMAND. NOTEWORTHY FEATURES:         *
*              (A) THE ABILITY TO INFORM A NOINTERCOM USER OF AN      *
*        ATTEMPT TO COMMUNICATE THROUGH USE OF AN SVC (XTPUT)         *
*        TO SEND "BELLS" AT HIGH PRIORITY.                            *
*              (B) THE ABILITY TO REQUEST EXIT FROM A "WAIT" SEND     *
*        OPERATION, EITHER AT THE END OF A SPECIFIED NUMBER OF        *
*        SECONDS OR UPON RECEIPT OF AN ATTENTION.                     *
***********************************************************************
         SPACE
         USING WORKAREA,R13        DECLARE BASE FOR WORK AREA
         MVI   TPUTPARM,NOWAIT    DEFAULT TPUT PARMS              MVS
         LM    R1,R4,0(R1)         LOAD PARAMETERS
         STM   R1,R4,$CPPL         STORE IN LOCAL COPIES
         LA    R5,$CPPL           SET UP ADDRESSABILITY           MVS
         LA    R6,$PPL                                            MVS
         USING CPPL,R5                                            MVS
         USING PPL,R6                                             MVS
         ST    R1,PPLCBUF          STORE CBUF POINTER IN PPL
         ST    R2,PPLUPT           STORE UPT POINTER IN PPL
         ST    R4,PPLECT           STORE ECT POINTER IN PPL
         XC    PECB,PECB           CLEAR EVENT CONTROL BLOCK      MVS
         LA    R1,PECB             POINT TO ECB                   MVS
         ST    R1,PPLECB           STORE POINTER TO ECB IN PPL
         L     R1,=A(PCL)          POINT TO PARSE CONTROL BLOCK
         ST    R1,PPLPCL           STORE PCL POINTER IN PPL
         LA    R1,ANS              POINT TO PDL LOCATION HOLDER
         ST    R1,PPLANS           STORE POINTER IN PPL
         LA    R1,PPL              POINT TO PARSE PARM LIST
         DROP  R5,R6                                              MVS
         CALLTSSR EP=IKJPARS      CALL UP TSO PARSE               MVS
         LTR   R15,R15             DID IT GO OK?
         BNZ   PARSFAIL            NO, ERROR
         L     R1,CVTPTR           -> CVT                         MVS
         L     R1,CVTASVT-CVTMAP(R1)   ->ASVT                     MVS
         USING ASVT,R1                                            MVS
         MVC   $ASCBNUM,ASVTMAXU+2     SAVE MAX # OF ADDR SPACES  MVS
         LA    R1,ASVTFRST                                        MVS
         ST    R1,$ASCB1          SAVE ADDR OF 1ST ENTRY          MVS
         DROP  R1                                                 MVS
         L     R11,ANS             PICK UP PDL ADDRESS
         USING PDL,R11             DECLARE BASE FOR IT
         CLI   $BELL+1,2          FLASH?                          MVS
         BNE   NOFLASH            NO.                             MVS
         OI    TPUTPARM,HIGHP     YES, ADD HIGHP TO FLAGS         MVS
NOFLASH  CLI   $INTRUPT+1,1       INTERRUPT?                      MVS
         BNE   NOIRUPT            NO                              MVS
         OI    TPUTPARM,BREAKIN   YES, SET TPUT FLAG              MVS
NOIRUPT  DS    0H                                                 MVS
         L     TEXTADDR,$WHAT      LOAD TEXT POINTER
         LH    TEXTLEN,$WHAT+4     LOAD TEXT LENGTH
         LH    R1,$WHICH           GET SEND TYPE
         SLL   R1,2                *4 FOR TABLE OFFSET
         B     *(R1)               BRANCH INTO TABLE
         B     $USER               GO TO USER-LIST SUB.
         B     $ALL                GO TO ALL-USERS SUB.
         B     $OPER               GO TO WTO SUBR.
         SPACE
***********************************************************************
*        ALLOCATE AN INFORMATION TABLE WITH AN ENTRY FOR EACH         *
*        DESTINATION USERID. DETERMINE THE USER'S ASID AND STORE IT IN*
*        THE TABLE ENTRY.                                             *
***********************************************************************
         SPACE
$USER    DS    0H
         LA    TABLLEN,16          LOAD MIN LENGTH TABLE          MVS
         L     R1,$WHO+8           LOAD CHAIN TO SECOND USERID    MVS
$UL1     DS    0H
         LTR   R1,R1               END OF CHAIN?
         BM    $UX1                YES, EXIT LOOP1
         LA    TABLLEN,16(,TABLLEN) INCERMENT TABLE LENGTH        MVS
         L     R1,8(,R1)           STEP TO NEXT ENTRY             MVS
         B     $UL1                LOOP FOR NEXT USERID
$UX1     DS    0H
         ST    TABLLEN,$LENGTH     SAVE LENGTH FOR FREEMAIN       MVS
         GETMAIN R,LV=(TABLLEN)    GET ENOUGH CORE                MVS
         ST    R1,$ADDRESS         SAVE ADDRESS FOR FREEMAIN
         LR    TABLBASE,R1         POINT TO FIRST ENTRY
         LA    $1,$WHO             POINT TO FIRST ENTRY
         LR    $2,TABLBASE         POINT TO FIRST ENTRY
$UL2     DS    0H
         USING TABLSECT,$2                                        MVS
         MVC   TABLUSER,=CL7' '     CLEAR USERID                  MVS
         L     R1,0($1)            LOAD USERID POINTER
         LH    R0,4($1)            LOAD USERID LENGTH
         BCTR  R0,0                MAKE IT MVC-FORM
         STC   R0,*+5              INSERT INTO:
         MVC   TABLUSER(0),0(R1)       MOVE IN USERID             MVS
         L     R1,$ASCB1           LOAD POINTER TO ASCB TABLE     MVS
         LH    R0,$ASCBNUM         LOAD NUMBER OF ENTRIES         MVS
$UL3     DS    0H
         TM    0(R1),X'80'        THIS ASID EXIST?                MVS
         BNZ   $UA3                                               MVS
         L     R14,0(,R1)         YES, FIND ASCB                  MVS
         USING ASCB,R14                                           MVS
         CLC   ASCBTSB,=F'0'      TSO ADDR SPACE?                 MVS
         BE    $UA3               NO.                             MVS
         L     R15,ASCBJBNS       YES, FIND JOBNAME=USERID        MVS
         CLC   TABLUSER,0(R15)    THE ONE WANTED?                 MVS
         BE    $UX3               YES                             MVS
$UA3     DS    0H                                                 MVS
         LA    R1,4(,R1)          SKIP TO NEXT ASVT ENTRY         MVS
         BCT   R0,$UL3                                            MVS
         MVI   TABLSTAT,X'14'     FLAG 'NOT ON TSO'               MVS
         B     $UP3               USERID NOT FOUND                MVS
$UX3     DS    0H
         MVI   TABLSTAT,X'04'     INIT FLAGS TO "BUSY"            MVS
         MVC   TABLASID,ASCBASID  SAVE THE USER'S ASID            MVS
$UP3     DS    0H
         LA    $2,16(,$2)          STEP TO NEXT TABLE ENTRY       MVS
         L     $1,8(,$1)           STEP TO NEXT USERID            MVS
         LTR   $1,$1               IS THERE ONE?
         BP    $UL2                YES, LOOP FOR IT
         B     $GO                 GO TO FEG'S CODE
         DROP  $2
         SPACE
***********************************************************************
*        ALLOCATE AN INFORMATION TABLE WITH AN ENTRY FOR EACH POSSIBLE*
*        TSO USER. FIND THE USERIDS AND ASID'S FOR CURRENT USERS      *
*        AND STORE THEM IN THE TABLE ENTRIES.                         *
***********************************************************************
         SPACE
$ALL     DS    0H
         LH    R0,$ASCBNUM         PICK UP MAX NUM. OF ASIDS      MVS
         MH    R0,=H'16'           TIMES ENTRY LENGTH             MVS
         ST    R0,$LENGTH          SAVE LENGTH FOR FRREMAIN
         GETMAIN R,LV=(0)          GET ENOUGH CORE FOR ALL USERS
         ST    R1,$ADDRESS         SAVE ADDRESS FOR FREEMAIN
         LR    TABLBASE,R1         POINT TO FIRST ENTRY
         SLR   TABLLEN,TABLLEN     ZERO TABLE LENGTH
         L     $1,$ASCB1          POINT TO FIRST ASVT ENTRY       MVS
         LH    R15,$ASCBNUM        LOAD NUMBER OF ASID'S          MVS
$AL1     DS    0H
         USING TABLSECT,R1                                        MVS
         TM    0($1),X'80'        THIS ASID ACTIVE?               MVS
         BNZ   $AP1                NO, SKIP THIS ONE              MVS
         L     R14,0(,$1)         YES, FIND ASCB                  MVS
         USING ASCB,R14                                           MVS
         CLC   ASCBTSB,=F'0'      TSO ADDR SPACE?                 MVS
         BE    $AP1               NO.                             MVS
         L     $2,ASCBJBNS        YES, FIND JOBNAME=USERID        MVS
         LTR   $2,$2              IS JOBNAME 0?                   MVS
         BZ    $AP1               YES, SKIP IT                    MVS
         MVC   TABLUSER,0($2)      INSERT USERID                  MVS
         MVI   TABLSTAT,X'04'     SET STAT TO "BUSY"              MVS
         MVC   TABLASID,ASCBASID   INSERT ASID                    MVS
         DROP  R14                                                MVS
         LA    R1,16(,R1)          STEP TO NEXT TABLE ENTRY       MVS
         LA    TABLLEN,16(,TABLLEN) INCREMENT TABLE LENGTH        MVS
         DROP  R1                                                 MVS
$AP1     DS    0H
         LA    $1,4(,$1)          STEP TO NEXT ASVT ENTRY         MVS
         BCT   R15,$AL1            LOOP IF MORE ASID'S            MVS
         B     $GO                 GO TO FEG'S CODE
$OPER    ERROR '"OPER" OPERAND NOT YET IMPLEMENTED',RLSA
         SPACE
***********************************************************************
*        BUILD THE MESSAGE TO BE SENT. THE SENDING USERID IS APPENDED *
*        TO THE END OF THE MESSAGE. IF BELL OR FLASH IS SPECIFIED,    *
*        ADD *ATTN* TO THE FRONT OF THE MESSAGE FOR TERMINALS WHERE   *
*        BELLS/ALARMS ARE NOT SUPPORTED.                              *
***********************************************************************
         SPACE
$GO      DS    0H
         USING TABLSECT,TABLBASE .      *ESTABLISH BASE REGISTER
         SLR   TABLPNTR,TABLPNTR .      *DO I=0 TO TABLLEN
         LA    R3,TPBUFFER        WHERE TO BUILD MESSAGE          MVS
         CLI   $BELL+1,0          BELL/FLASH?                     MVS
         BE    NOATTN             NO.                             MVS
         MVC   0(7,R3),=C'*ATTN* '     YES, ADD ATTN FOR NON-TWX  MVS
         LA    R3,7(,R3)          PUT MSG TEXT AFTER              MVS
NOATTN   DS    0H                                                 MVS
         C     TEXTLEN,=F'235' .        *MAX LENGTH IS 235 BYTES  MVS
         BNH   NOTRUNC                                            MVS
         UPUT  TRUNC235,L'TRUNC235,INFOR,CPPL=$CPPL               MVS
         MVI   RCODE+1,4          SET WARNING INDICATOR           MVS
         LA    TEXTLEN,235        PUT MAX IN TEXTLEN              MVS
NOTRUNC  DS    0H                                                 MVS
         BCTR  TEXTLEN,0                                          MVS
         EX    TEXTLEN,TXTMOVE .        *MOVE MSG TEXT TO BUFFER
         LA    R2,1(TEXTLEN,R3)     . *LOAD ADDRESS FOR USERID    MVS
         MVC   0(2,R2),=C'--'     SEPARATE USERID FROM TEXT       MVS
         L     R3,CPPLPSCB-CPPL+$CPPL   *GET PSCB ADDRESS....     MVS
         MVC   2(7,R2),0(R3) . *...AND INSERT USERID IN MSG       MVS
         LA    TEXTADDR,TPBUFFER . *...AND POINTER TEXTADDR TO BUFFER
         LA    TEXTLEN,8(,R2)     COMPUTE FULL MSG LEN            MVS
TRIM     CLI   0(TEXTLEN),C' '    IGNORING TRAILING BLANKS        MVS
         BNE   TRIMD                                              MVS
         BCT   TEXTLEN,TRIM       SO XTPUT WILL SEE USERID        MVS
TRIMD    LA    TEXTLEN,1(,TEXTLEN)     POINT PAST MSG END         MVS
         SR    TEXTLEN,TEXTADDR                                   MVS
         B     MSGLOOP0 .               *AND CONTINUE PROCESSING  MVS
TXTMOVE  MVC   0(0,R3),0(TEXTADDR)     . *MVC TO VAR MOVE         MVS
         SPACE
***********************************************************************
*        ATTEMPT TO SEND THE MESSAGE TO EACH USER NOWAIT, EVEN IF     *
*        THE WAIT KEYWORD WAS SPECIFIED. THIS LETS US GO THROUGH THE  *
*        OVERHEAD OF OUR WAIT PROCESSING FOR AS FEW USERS AS POSSIBLE.*
*        IF NOWAIT WAS SPECIFIED, WE MAKE A SECOND TRY TO SEND TO ANY *
*        "BUSY" USER BEFORE GIVING UP.                                *
***********************************************************************
         SPACE
MSGLOOP0 DS    0H                                                 MVS
         ST    TEXTLEN,PUTPLIST   SAVE TPUT LENGTH                MVS
         MVC   PUTPLIST(1),$BELL+1     SAVE BELL FLAG             MVS
         STAX  IGNORE,DEFER=YES   DON'T LET ATTN INTERFERE        MVS
         LOAD  EP=XSENDPUT        LOAD TPUT ROUTINE               MVS
         ST    R0,PUTADDR         STORE ENTRY POINT ADDR          MVS
         SR    BUSY,BUSY          ZERO COUNT OF BUSY USERS        MVS
MSGLOOP1 CR    TABLPNTR,TABLLEN .       *
         BNL   TRYWAIT  .               *                         MVS
         LA    R3,TABLSTAT(TABLPNTR) .  *CHECK ASID STATUS        MVS
         CLI   0(R3),X'14' .            *IS THIS USER ON?         MVS
         BE    MSGLOOP2 .               *NO,...CONTINUE           MVS
         LA    R2,TABLASID(TABLPNTR) .  *GET ADDRESS OF ASID      MVS
         LA    R1,PUTPLIST        POINT R1-TPUT PARMS             MVS
         L     R15,PUTADDR        CALL TPUT ROUTINE               MVS
         BALR  R14,R15                                            MVS
         CH    R15,=H'4'          WAS IT NOWAIT?                  MVS
         BNE   MSGLOOP2           NO, PROCEED                     MVS
         LA    BUSY,1(,BUSY)      YES, INCREASE BUSY COUNT        MVS
         CLI   $HOW+1,2           XSEND WAIT?                     MVS
         BE    MSGLOOP2           YES, CONTINUE NOWAIT            MVS
         LA    R1,PUTPLIST        NO, RELOAD TPUT PARMS           MVS
         L     R15,PUTADDR        TRY TO SEND MSG AGAIN           MVS
         BALR  R14,R15                                            MVS
MSGLOOP2 LA    TABLPNTR,16(,TABLPNTR) . *GO TO NEXT ASID          MVS
         B     MSGLOOP1 .               *...AND CONINUE
         SPACE
***********************************************************************
*        IF WAIT WAS SPECIFIED, AND ONE OR MORE USERS WERE BUSY, WE   *
*        NOW TRY AGAIN SPECIFYING WAIT. TO PERMIT THE TPUT'S TO       *
*        PROCEED INDEPENDENTLY, WE ATTACH A SEPARATE TASK TO SEND     *
*        TO EACH REMAINING USER. TO ALLOW TIME-OUT OR ATTN-OUT        *
*        OF THE WAIT, WE ESTABLISH A TIMER EXIT TO CHECK FOR          *
*        ATTENTION OR TOO MUCH WAIT TIME. IN EITHER CASE, THE         *
*        TIMER EXIT WILL DETACH ANY INCOMPLETE SUBTASKS SO WE         *
*        CAN TERMINATE.                                               *
***********************************************************************
         SPACE
TRYWAIT  DS    0H                                                 MVS
         CLI   $HOW+1,2           WILLING TO WAIT?                MVS
         BNE   PRNTRSLT           NO, STOP NOW                    MVS
         LTR   BUSY,BUSY          YES, ANYONE TO WAIT FOR         MVS
         BZ    PRNTRSLT           NO, GIVE REPORT                 MVS
         NI    TPUTPARM,255-NOWAIT     YES, OFF NOWAIT FLAG       MVS
         TM    $HOWLONG+6,X'80'   WAIT INTERVAL PRESENT?          MVS
         BZ    NOINT              NO, INDEFINITE WAIT ALLOWED     MVS
         L     R2,$HOWLONG        YES, FIND DIGITS                MVS
         CLI   $HOWLONG+5,1       1 DIGIT?                        MVS
         BE    SHORTINT           YES.                            MVS
         PACK  DWORK,0(2,R2)      NO, CONVERT 2                   MVS
         B     CONVERT                                            MVS
SHORTINT PACK  DWORK,0(1,R2)                                      MVS
CONVERT  CVB   R2,DWORK           GET SECONDS IN BINARY           MVS
         SRA   R2,1               DIVIDE BY 2 SEC.                MVS
         BNZ   *+8                CHECK FOR 0                     MVS
         LA    R2,1               REPLACE BY 1 IF SO              MVS
         STH   R2,INTERVAL        STORE FOR EXIT                  MVS
NOINT    DS    0H                                                 MVS
         LA    R0,1(,BUSY)        GET AN ECB LIST                 MVS
         SLL   R0,2               COMPUTE SIZE                    MVS
         GETMAIN R,LV=(0)                                         MVS
         ST    BUSY,0(,R1)        STORE NUMBER OF ENTRIES         MVS
         LR    ECB,R1             SAVE LIST ADDR                  MVS
         LR    ECBLIST,R1         TWICE                           MVS
         SLR   TABLPNTR,TABLPNTR  DO TABLPNTR=0 TO TABLLEN        MVS
WTLOOP1  DS    0H                                                 MVS
         LA    R2,TABLSTAT(TABLPNTR)   THIS USER RESOLVED?        MVS
         CLI   0(R2),X'04'                                        MVS
         BNE   WTLOOP2            YES.                            MVS
         LA    R2,TABLASID(TABLPNTR)   NO, FIND ASID              MVS
         LA    R3,TABLSTAT(TABLPNTR)   POINT R3 TO RCODE SLOT     MVS
         LA    R5,TABLECB(TABLPNTR)    FIND HIS ECB               MVS
         XC    0(4,R5),0(R5)      CLEAR IT                        MVS
         LA    R1,PUTPLIST        ADDR XSENDPUT PARMS             MVS
         ATTACH EP=XSENDPUT,ECB=(R5),ETXR=DETACHER    CREATE SUBTASK   *
                                  TO WAIT FOR TPUT                MVS
         ST    R5,4(,ECB)         STORE ECB ADDR IN LIST          MVS
         LA    ECB,4(,ECB)        BUMP ECB POINTER                MVS
WTLOOP2  DS    0H                                                 MVS
         CR    TABLPNTR,TABLLEN   LOOKED AT ALL USERS?            MVS
         BNL   WAITER             YES, NOW WAIT                   MVS
         LA    TABLPNTR,16(TABLPNTR)   NO, CONTINUE               MVS
         B     WTLOOP1                                            MVS
WAITER   DS    0H                                                 MVS
         OI    0(ECB),X'80'       SET ECBLIST END BIT             MVS
         STIMER REAL,ATTNCHK,BINTVL=TWOSEC  START 2 SECOND TIMER  MVS
         L     R0,0(,ECBLIST)     LOAD NUMBER OF ECBS             MVS
         LA    R1,4(,ECBLIST)     POINT TO START OF LIST          MVS
         WAIT  (0),ECBLIST=(1)    WAIT FOR TASKS TO END           MVS
         TTIMER CANCEL            CANCEL OUTSTANDING INTERVAL     MVS
         LR    R1,ECBLIST         RETURN ECB LIST MEMORY          MVS
         LA    R0,1                                               MVS
         A     R0,0(,ECBLIST)                                     MVS
         SLL   R0,2                                               MVS
         FREEMAIN R,LV=(0),A=(1)                                  MVS
         SPACE
***********************************************************************
*        REPORT ON THE RESULTS, GIVING FOR EACH ABNORMAL TPUT         *
*        RESULT THE LIST OF USERIDS AFFECTED. AFTER THE REPORT IS     *
*        COMPLETE, ALLOW ATTENTIONS AND RETURN.                       *
***********************************************************************
         SPACE
PRNTRSLT DS    0H .                     *MESSAGE PRINTER
         SLR   R3,R3 .                  *CLEAR RETC COUNTER
         SLR   R4,R4 .                  *THIS IS A WORK REGISTER
ERRLOOP1 LA    R2,TPBUFFER .            *GET ADDRESS OF TPUT BUFFER
         LA    R3,4(,R3) .              *GO TO NEXT TPUT RC
         C     R3,=X'00000014' .       *HAVE WE REACCH ED END
         BH    SCMMDEND .               *IF YES,...TERMINATE CP
         MVI   0(R2),X'40'              *BLANK OUT THE BUFFER
         MVC   1(63,R2),0(R2)           *CLEAR BUFFER
         MVI   INHIBIT,X'00'           *CLEAR INHIBIT FLAGS       MVS
         SLR   TABLPNTR,TABLPNTR .      *DO FOR ALL ASIDS         MVS
ERRLOOP4 CR    TABLPNTR,TABLLEN .             *
         BNL   ERRLOOP2 .               *IF WE EXCEEDED TABLE...
         IC    R4,TABLSTAT(TABLPNTR) .  *GET TJID STATUS
         CR    R3,R4 .                  *IS THIS AN INSTANCE OF ERRCD
         BNE   ERRLOOP3                 *NO,...SKIP IT
         CLI   INHIBIT,X'FF'           *INHIBIT?                  MVS
         BE    ERRLOOP6                 *YES,...SKIP PRINT
         L     R1,TPADDR(R3)            *LOAD TEXT ADDRESS
         UPUT  (1),42,INFOR,CPPL=$CPPL PRINT MESSAGE              MVS
         MVI   INHIBIT,X'FF'           *INHIBIT MESSAGE           MVS
         MVI   RCODE+1,8          SET TROUBLE RET CODE            MVS
ERRLOOP6 C     R2,=A(TPBUFFER+64)         *IS THE MESSAGE FULL?
         BL    ERRLOOP5                   *NO,...CONTINUE
         UPUT  TPBUFFER,64,INFOR,CPPL=$CPPL PRINT MESSAGE         MVS
         LA    R2,TPBUFFER                *REINITIALIZE POINTER
         MVI   0(R2),X'40'                *BLANK OUT BUFFER
         MVC   1(63,R2),0(R2)             *
ERRLOOP5 LA    R5,TABLUSER(TABLPNTR)    *POINT TO USERID
         MVC   1(7,R2),0(R5)            *INSERT USER IN BUFFER    MVS
         MVI   0(R2),X'40' .            *INSERT LEADING BLANK     MVS
         LA    R2,8(,R2) .              *...AND INCREMENT POINTER
ERRLOOP3 LA    TABLPNTR,16(,TABLPNTR) . *TRY NEXT ASID-USER PAIR  MVS
         B     ERRLOOP4  .              *...AND CONTINUE INNER LOOP
ERRLOOP2 S     R2,=A(TPBUFFER) .        *COMPUTE LENGTH OF FAILING
         BZ    ERRLOOP1 .               *YES...CONTINUE
         UPUT  TPBUFFER,(R2),INFOR,CPPL=$CPPL    WRITE TO SENDER  MVS
         B     ERRLOOP1 .               *...AND CONTINUE
         DROP  TABLBASE .               *FREE BASE REGISTER
SCMMDEND DS    0H                       .TERMINATE CP
         STAX  DEFER=NO           LET ATTENTION TAKE EFFECT       MVS
$FREE    DS    0H
         L     R1,$ADDRESS         LOAD ADDRESS OF CORE TABLE
         L     R0,$LENGTH          LOAD LENGTHS OF CORE TABLE
         FREEMAIN R,LV=(0),A=(1)   FREE CORE TABLE
RLSA     IKJRLSA ANS               RELEASE SPACE FOR PDE
         LH    R15,RCODE          LOAD RETURN CODE                MVS
         RETURNX RC=(15)                                          MVS
PARSFAIL MVI   RCODE+1,12         SET WORST RETURN CODE           MVS
         CH    R15,=H'4'          PROMPT ERROR?                   MVS
         BE    FLUSH              YES, NO MSG NEEDED              MVS
         ERROR 'PARSE FAILURE',FLUSH                              MVS
FLUSH    STACK PARM=DELALL,MF=(E,$PPL) FLUSH TSO STACK            MVS
         B     RLSA                                               MVS
         EJECT
IGNORE   BR    R14                DUMMY ROUTINE TO IGNORE ATTN    MVS
         SPACE 3
DETACHER DS    0H                 ETXR ROUTINE TO DETACH TASK     MVS
         DROP  ,                                                  MVS
         STM   R14,R12,12(R13)    SAVE REGS                       MVS
         LA    R1,24(,R13)        POINT TO R1 SAVE SLOT           MVS
         DETACH (1)               DETACH ENDED TASK               MVS
         LM    R14,R12,12(R13)    RESTORE REGS                    MVS
         BR    R14                AND RETURN                      MVS
         SPACE 3
ATTNCHK  DS    0H                 TIMER EXIT TO CHECK ATTN        MVS
         STM   R14,R12,12(R13)    SAVE REGS                       MVS
         LR    R12,R15                                            MVS
         USING ATTNCHK,R12                                        MVS
         USING PSA,R0                                             MVS
         L     R3,PSATOLD         FIND OUR TCB                    MVS
         USING TCB,R3                                             MVS
         ICM   R3,15,TCBLTC       FIND A SUBTASK                  MVS
         BZ    TIMERET            IF NONE, CAN TERMINATE          MVS
         CLI   TCBSTPCT,0         HAS IT BEEN STOPPED?            MVS
         BNE   DETECTED           YES, ASSUME ATTN                MVS
         LH    R4,INTERVAL        NO, IS WAIT TIME UP?            MVS
         BCT   R4,*+8                                             MVS
         B     DETECTED           YES, END IT                     MVS
         STH   R4,INTERVAL        UPDATE TIME LEFT                MVS
         STIMER REAL,ATTNCHK,BINTVL=TWOSEC  NO, WAIT 2 SECS MORE  MVS
TIMERET  LM    R14,R12,12(R13)                                    MVS
         BR    R14                RETURN TO SYSTEM                MVS
DETECTED ST    R3,DETWORK         SAVE SUBTASK TCB ADDR           MVS
         L     R3,TCBNTC          FIND NEXT SUBTASK TCB           MVS
         DETACH DETWORK           KILL ORIGINAL TASK              MVS
         LTR   R3,R3              ANY MORE SUBTASKS?              MVS
         BNZ   DETECTED           YES, CONTINUE                   MVS
         B     TIMERET            NO, LEAVE EXIT                  MVS
DETWORK  DS    A                  DETACH WORK AREA                MVS
         EJECT
PUTPLIST DS    A                  TPUT REG 0 DATA                 MVS
TPUTPARM DS    XL1     .                 *TPUT OPTION BITS        MVS
         DC    AL3(TPBUFFER)      TPUT MESSAGE ADDR               MVS
PUTADDR  DS    A                  ADDR OF TPUT ROUTINE            MVS
TWOSEC   DC    F'200'             2 SECOND TIMER INTERVAL         MVS
INTERVAL DS    H                  WAIT TIME ALLOWED               MVS
INHIBIT  DS    XL1                      WORK FLAG FOR MSG PRINTER MVS
RCODE    DC    H'0'               EVENTUAL RET CODE               MVS
TPADDR   DC    A(0)                     *LIST OF TP MESSAGES
         DC    A(TPBUSY) .              *TPUT RC 04
         DC    A(TPSTAX) .              *STAX DURING TP
         DC    A(TPNOIN) .              *PROFILE NOINTERCOM
         DC    A(TPINVA) .              *INVALID TPUT PARAMETERS
         DC    A(TPNOTON) .             *TJID NOT ON
DELALL   STACK DELETE=ALL,MF=L    STACK FLUSH PARMS               MVS
TPBUSY   DC    CL42' USER(S) BUSY, MESSAGE CANCELLED-'            MVS
TPSTAX   DC    CL42' USER(S) CANCELLED MESSAGE-'                  MVS
TPNOIN   DC    CL42' USER(S) NOT ACCEPTING MESSAGES-'             MVS
TPINVA   DC    CL42' USER(S) FOULED UP-'                          MVS
TPNOTON  DC    CL42' USER(S) NOT LOGGED ON, MESSAGE CANCELLED-'   MVS
TRUNC235 DC    C' MESSAGE TRUNCATED TO 235 CHARACTERS.'           MVS
TPBUFFER DC    CL256' '                 *TP BUFFER
         LTORG
         PRINT NOGEN
PCL      IKJPARM DSECT=PDL
$WHAT    IKJPOSIT QSTRING,ASIS,PROMPT='MESSAGE IN QUOTES'
$HOW     IKJKEYWD DEFAULT='NOWAIT'
         IKJNAME 'NOWAIT'
         IKJNAME 'WAIT',SUBFLD=$WAITSF                            MVS
$BELL    IKJKEYWD
         IKJNAME 'BELL',ALIAS='ATTN'                              MVS
         IKJNAME 'FLASH'                                          MVS
$INTRUPT IKJKEYWD DEFAULT='NOINTERRUPT'                           MVS
         IKJNAME 'INTERRUPT'                                      MVS
         IKJNAME 'NOINTERRUPT'                                    MVS
$WHICH   IKJKEYWD DEFAULT='USER'                                  MVS
         IKJNAME 'USER',SUBFLD=$WHOSF
         IKJNAME 'ALL'
         IKJNAME 'OPER'
$WHOSF   IKJSUBF
$WHO     IKJIDENT 'USERID',LIST,FIRST=ALPHA,OTHER=ALPHANUM,MAXLNTH=7,  *
               PROMPT='USERID(S) TO RECEIVE MESSAGE'              MVS
$WAITSF  IKJSUBF
$HOWLONG IKJIDENT 'WAIT INTERVAL',FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=2*
                                                                  MVS
         IKJENDP
TABLSECT DSECT
TABLUSER DS    CL7                      *USERID ENTRY
TABLSTAT DS    CL1                      *USERID - MESSAGE STATUS
TABLECB  DS    A                  END OF SUBTASK ECB              MVS
TABLASID DS    1H                       *ASID FOR THIS USERID     MVS
WORKAREA DSECT
         DS    18F                 O/S SAVE AREA
DWORK    DS    D                                                  MVS
$ADDRESS DS    A                   -> CORE TABLE
$LENGTH  DS    A                   LENGTH OF CORE TABLE
$ASCB1   DS    A                   -> FIRST ASVT ENTRY            MVS
$ASCBNUM DS    H                   NUMBER OF ASIDS ALLOWED        MVS
PECB     DS    F                   EVENT CONTROL BLOCK FOR ATTN   MVS
ANS      DS    A                   -> PDL FROM PARSE
$CPPL    DS    4A                 SPACE FOR CPPL COPY             MVS
$PPL     DS    7A                 SPACE FOR PPL COPY              MVS
WORKLEN  EQU   *-WORKAREA                                         MVS
         EJECT
         IKJCPPL ,                                                MVS
         SPACE
         IKJPPL ,                                                 MVS
         SPACE
         PRINT NOGEN                                              MVS
         CVT   DSECT=YES                                          MVS
         SPACE
         IHAPSA ,                                                 MVS
         SPACE
         IKJTCB ,                                                 MVS
         SPACE
         IHAASVT ,                                                MVS
         SPACE
         IHAASCB ,                                                MVS
         SPACE 2
         END   XSEND
