1
-
      The Language Independent  Environment (LIE)  is two  different thi
      It  is a  mechanism by  which assembler  subroutines can  make use
      services of the  PL/I Optimizer/Checker environment.   It  can als
      used to  provide PL/I-like services  in a pure  assembler environm
      these  services include  simulation of  AUTOMATIC storage  managem
      block structure, ON-units, SIGNAL and GOTO out-of-block.
0     The LIE services are requested via macro  calls.   In a few cases,
      may be necessary to set or test bits in the PL/I TCA or DSA,  mapp
      for which  may be obtained using  the PLITCA and PLIDSA  macros.
      functional LIE macros and what they do are as follows:
0          LIBEL -- Define a label for use later as a target of LIGOTO.
           LIBLOCK -- Request temporary interception of LIGOTO.
           LIENTRY -- Define an internal or external "procedure".
           LIERRSET  --  Define  program check  handling  in  a  pseudo-
                environment.
           LIEXIT -- Return from a "procedure" to its caller.
           LIFO -- Obtain LIFO (block-related) storage.
           LIFREE -- Free non-LIFO storage.
           LIGET -- Get non-LIFO storage.
           LIGOTO -- GOTO a PL/I label variable  or a label defined by L
                in another "procedure".
           LINSURE -- In  a Checkout compiler environment,   invoke "GET
                assurance".
           LION -- Define an "ON-unit".
           LIONCB -- Generate space  for ON control blocks in the  DSA f
                "procedure".
           LIREVERT -- Cancel an "ON-unit".
           LIRLSE -- In  a Checkout compiler environment,   invoke "FREE
                recovery".
           LISECT -- Define a CSECT containing  one or more procedures u
                LIENTRY.
           LISIGNAL -- Signal a PL/I condition or simulate a STOP statem
-     Now, in a more pedagogical order, here is how the macros are used:
-     LISECT is used  to define a CSECT  which contains one or  more use
      LIENTRY.  Its syntax is:
0          &LABEL   LISECT &ON=NO
0     &LABEL defines the  CSECT name,  and &ON specifies whether  on not
      LION macro will be used.   It is strongly recommended that K'&LABE
      8;  for PL/I compatibility,  I suggest that  &LABEL be the name of
      first entry point, followed by a '1'.
-     LIENTRY  is  used  to  define  a   procedure.    Three  forms  can
      distinguished:  external procedures (callable from outside),  inte
      procedures,   and  main  procedures (which  initialize  a  pseudo-
      environment on entry).  The syntax of LIENTRY is:
0          &LABEL   LIENTRY &DSA=DSA,&DSALEN=DSALEN,&BASE=R11,&PARM=R2,
                          &ISASIZE=,&ENV=
0     &LABEL defines the  procedure name.   For an  external procedure,
      name must be shorter than 8 characters;  by convention, internal n
      are exactly  eight characters  long.   &DSA  defines the  name of
      procedure's DSA,   and &DSALEN  defines its  length (which  must b
      multiple of 8).   When LIENTRY is used normally,  a DSECT named DS
      defined to include  AUTOMATIC storage as well as a  PL/I register
      area,  and DSALEN is  equated to the length of the  DSECT (forced
      doubleword multiple).   DSA=*,DSALEN=88  can be specified when  yo
      not need to define a DSA DSECT for  your own data.   (Note that if
      use the LION  macro,  an explicit DSA definition  is mandatory.
      note that the first  88 bytes of the DSA (116 when  LION is used)
      reserved for  use by  the environment,  and  so must  not be  used
      anything else.)   &BASE specifies the base register for the proced
      and &PARM specifies  a register to which  the contents of R1  at e
      are to be copied.
0     If  &ISASIZE  is  specified,   the procedure  is  defined  as  a
      procedure,  and the value of &ISASIZE  defines the size of its ini
      storage area.    The LIENTRY code in  this case will call  the LIE
      routine to setup a pseudo-PL/I environment.
1
0                                                                     PA
0     If  &ENV  is specified,   the  procedure  is  defined as  an  inte
      procedure.    &ENV in  this case  defines  a register  into which
      contents of R5 on entry should be copied.  It is expected that R5
      point to the DSA of the  containing external procedure;  it is eas
      (if you have  registers to spare)  to just  set up R5 this  way at
      start and not worry about it thereafter.
-     LIEXIT is used to return from a procedure.  Its syntax is:
0          &LABEL   LIEXIT &RC=
0     &RC may be used to specify a code  which is to be returned in R15;
      &RC is omitted, the contents of R15 on entry are restored.
-     The LIFO macro  is used to obtain  LIFO storage,  which will  be f
      when LIEXIT is used to return.   (In PL/I terms, it gets a VDA.)
      syntax is:
0          &LABEL   LIFO  &LV=
0     &LV is the  amount of storage to obtain  (in bytes).   If it  is n
      multiple of eight, terrible things will happen.
-     The LIGET macro is  used just like LIFO,  except that  it obtains
      LIFO storage which must be explicitly freed with LIFREE.  In a pse
      PL/I environment,   storage allocated  by LIGET  is not  automatic
      freed when the main procedure is LIEXITed.
-     The LIFREE  macro is used  to free  storage allocated by  LIGET.
      syntax is:
0          &LABEL   LIFREE &A=,&LV=
0     &A defines the  location of the area  to free,  and &LV  its lengt
      multiple of 8).
-     The LINSURE macro  is used to attempt  to assure that,  in  a Chec
      compiler environment,  a  later use of GETMAIN will not  fail.   (
      non-Checkout environment, it has no effect.)  Its syntax is:
0          &LABEL   LINSURE &LV=
0     &LV is the amount  of storage which will soon be  required;  it ma
      expressed as an integer constant followed by the letter K.
-     The LIRLSE  macro is  used,  in a  Checkout compiler  environment,
      inform the  compiler that  it may now  reclaim storage  freed up
      previous use  of LINSURE.   (In a  non-Checkout environment it  ha
      effect.)  LIRLSE has no parameters.
-     The LIBEL  macro is  used to  define a label  which can  be used
      target of LIGOTO.   LIBEL has two forms,   a static form and a dyn
      form.   Both  of these  forms must  be used  to successfully  defi
      label.  The syntax of LIBEL is as follows:
0          &NAME    LIBEL &LABEL,&ADDR=
0     If &ADDR= is not specified to LIBEL,   this is a "static" call,  w
      defines the position of the label in the code.  &LABEL in this cas
      the LIE name of the label;  the name field of the macro can be use
      define a standard assembler name.   Note  that the addresses of &L
      and &NAME will  usually not be the  same.   &NAME can be  branched
      while &LABEL should be referenced only  in the dynamic LIBEL macro
      the same label.
1
0                                                                     PA
0     When &ADDR= is  specified by LIBEL,  we have a  "dynamic" call,  w
      sets up a PL/I  label variable in the DSA of  its caller.   This m
      should be positioned so that it will be executed before any attemp
      LIGOTO the label.  The &LABEL parameter is used to define the poin
      which LIGOTO should transfer control;   it should be defined somew
      in the  calling routine by a  static LIBEL).   The &ADDR  value sh
      specify the  location of the "label  variable".   The name field
      dynamic LIBEL has its normal meaning.
-     The LIGOTO macro is used to transfer control to a PL/I label varia
      or to a label in a procedure which called the one issuing LIGOTO.
      syntax is:
0          &NAME    LIGOTO &LABEL
0     &LABEL must specify the address of a  PL/I label variable,  or the
      equivalent (which must  have been previously initialized  by a dyn
      LIBEL macro).
-     The  LIBLOCK  macro  is  used to  allow  a  procedure  to  tempora
      intercept "GOTO out-of-block",   so it can perform  cleanup before
      GOTO completes.   The corresponding PL/I  facility was defined for
      use of PLISORT, so that a GOTO out of a sort exit could be trapped
      long enough to terminate the sort program.  Usage of LIBLOCK is ra
      complex; the following steps must be performed:
0     1.  The calling  procedure must have  an internal subroutine  to i
          LIBLOCK;  this subroutine  must use the LIBLOCK  macro rather
          LIENTRY.  The subroutine must be entered with a "BAL R14".
0     2.  The calling procedure's DSA  must end with an area of  88 byte
          larger,  to  be used as  a DSA  by the internal  subroutine.
          internal subroutine should  save registers and load  R13 with
          secondary DSA address before issuing LIBLOCK.
0     3.  Before calling the internal subroutine,  the mainline should c
          the secondary DSA, set the CGTO flag in its second byte,  and
          the contents of TFB1 (a flag byte of the TCA) somewhere handy.
0     4.  Before returning, the mainline should restore TFB1.
0     Now, when the internal subroutine, or one of its descendants, atte
      to do  a GOTO  which would terminate  the calling  procedure,  con
      returns  to the  instruction after  the  "BAL R14"  which invoked
      internal subroutine.    The CGTO flag in  the secondary DSA  will
      been turned  off,  which  allows the mainline  to determine  wheth
      normal return  or a GOTO  has taken place.    The mainline can  no
      whatever cleanup is required; when it returns, the GOTO will magic
      continue, due to some arcane manipulation of save areas.
0     The syntax of LIBLOCK is:
0          &LABEL   LIBLOCK &OLDSA=(1)
0     &OLDSA  should be  specified  in the  form (reg),   where  "reg" i
      register addressing the DSA for the mainline routine.
1
0                                                                     PA
0     Here is  a sample code  fragment using LIBLOCK  to show how  it sh
      work:
0     ************** MAINLINE CODE
               XC    DSASAVE2,DSASAVE2    CLEAR SECONDARY DSA
               OI    DSASAVE2+1,CGTO      SET GOTO INTERCEPT FLAG
               MVC   DSATCASV,TFB1        SAVE TCA FLAG BYTE
               BAL   R14,INTERNAL         CALL INTERNAL SUBRTN
               TM    DSASAVE2+1,CGTO      ABNORMAL GOTO CAUGHT?
               BNZ   NOGOTO               NO, NORMAL RETURN
0     ************** EXIT CODE
               MVC   TFB1,DSATCASV        RESTORE TCA FLAGS
               LIEXIT ,                   AND RETURN
0     ************** INTERNAL SUBROUTINE
      INTERNAL STM   R14,R11,12(R13)      SAVE REGISTERS
               LR    R2,R13               SAVE MAINLINE DSA ADDRESS
               USING DSA,R2
               LA    R13,DSASAVE2         SET UP NEW DSA REGISTER
               LIBLOCK OLDSA=(R2)         FINISH INTERCEPTION OF GOTOS
0     ************** EXIT FROM INTERNAL SUBROUTINE
               LR    R13,R2
               LM    R14,R11,12(R13)
               BR    R14
0     ************** DSA DEFINITION
      DSA      DSECT
               DS    22F                  STANDARD PL/I DSA
      ************** OTHER DSA FIELDS
      DSATCASV DS    XL1                  TCA BYTE SAVE AREA
               DS    0D                   DOUBLEWORD ALIGN
      DSASAVE2 DS    22F                  DSA FOR INTERNAL ROUTINE
      DSALEN   EQU   *-DSA
-     The LISIGNAL macro is used to signal a PL/I condition.  Its syntax
0          &LABEL   LISIGNAL &WK,&COND=
0     &WK addresses a fullword  in the DSA which can be used  as a work
      by the macro expansion.  &COND specifies the name of a PL/I condit
      Presently,  the conditions ATTN,  ERROR,  FINISH and STOP are hand
      (More could  be added  by updating  the LICOND  macro,  which  def
      them.)  LISIGNAL of the "STOP" condition is equivalent to executio
      a PL/I STOP statement.
-     The LION macro establishes an ON-unit for a PL/I condition.   Only
      equivalents of "ON  cond GOTO x" and  "ON cond CALL x"  are suppor
      The syntax of LION is:
0          &LABEL   LION  &COND,&GOTO=,&CALL=
0     The &COND parameter  names the condition to be handled.    Only on
      &GOTO and &CALL may  be specified;  if &GOTO is used,   it must na
      "label variable" suitable as a target for LIGOTO; if &CALL is used
      must point to an LIENTRY-defined internal procedure.
-     The LIREVERT macro performs the equivalent of a PL/I REVERT statem
      Its syntax is:
0          &LABEL   LIREVERT &COND
0     &COND is the PL/I condition name which  should no longer be handle
      this procedure.
-     The LIONCB macro is used to generate PL/I  "ON cells" in the DSA f
      routine which uses  the LION macro.   It should  be placed immedia
      after the definition of the PL/I part of the DSA (which,  when LIO
      used, should consist of 29 fullwords).  LIONCB has no operands.
1
0                                                                     PA
0     The LIERRSET  macro is  used in  a pseudo-PL/I  environment to  de
      program-check  handling.    It  can  only be  used  in  a  pseudo-
      environment;  in a  real PL/I environment it will  do horrible thi
      The syntax of LIERRSET is:
0          &LABEL   LIERRSET &EXIT
0     After the execution of LIERRSET, if a program check occurs, it wil
      intercepted by a  LIE SPIE routine,  which will print  out a proce
      traceback (using  WTP),  and  then branch to  the &EXIT  label.
      control reaches the &EXIT point,  the registers will be the same a
      the  point of  interrupt,  so  the &EXIT  code  should set  up a
      register and execute  LIGOTO or LISIGNAL to get to  a known proced
      Note that if a program check occurs  and R12 has been altered from
      standard LIE contents (a pointer to  a pseudo-TCA),  the LIE SPIE
      program check and the program will ABEND.  Also note that the LIE
      exit is cancelled  when the procedure which issued  the first LIER
      returns.
-     When LIE  is used,  with a  few exceptions references to  PL/I con
      blocks should not be necessary.  The pseudo-PL/I implementation of
      does maintain a little bit of the start of the TCA (addressed via
      compatibly with  PL/I.   Notably,  you  can test whether  the Chec
      compiler is active by "TM TFB0,TTCK"; similarly, you can check for
      pseudo-PL/I environment by "TM TFB0,TTFC".  (This flag is used by
      to indicate the  CICS environment;  we have not used  LIE ourselve
      any context where  this could cause any confusion.)    Also,  the
      word  can be  trusted  to contain  a  pointer  to the  pseudo-regi
      vector,  which,  in a pseudo-PL/I environment,  will be initialize
      zeroes).   Other fields in the TCA,   DSA etc.,  should not be tru
      unless you test TTFC to verify a true PL/I environment.
