 /*                                                                 */
 /*      PDSDOC *VSAMANDX - CALCULATE INDEX PARAMETERS..............*/
 /*                                                                 */
 /* 09AUG93 DARNICK COMPUTING LTD. ALLOW UNLIMITED ICF INDEX CISIZE */
 /*                                                                 */
 /*                                                                 */
  VINDEX: PROC (KEYLEN,IMBFCTR,REPLFCTR,#CICA,#TRKDATA,#TRKCA,#TRKINDX,
                TRKCAP,BLKOVRHD,#INDXLV,ICISZ,#CIHIGHL) OPTIONS(MAIN);
          DCL (KEYLEN,IMBFCTR,REPLFCTR) FIXED BIN (15,0);
          DCL (#CICA,#TRKDATA,#TRKCA,#TRKINDX,TRKCAP,BLKOVRHD,#INDXLV,
               ICISZ,#CIHIGHL) FIXED BIN (31,0);
          DCL (CICAROOT,DROOT) FIXED BIN(31,14);
          DCL (A,B,C,D,X,Y,REMAINDR,MAXPTRS,#CILV2,#CILV3H,
              #CINXTLL,#ICITRK,#CISS,IBLKSZ,IWORK) FIXED BIN(31,0)
              INITIAL (0);
     CICAROOT = SQRT(#CICA);
            X = 31+2*(KEYLEN+2)+(3*#CICA);
            Y = 31+(#CICA*8)+(2*CICAROOT);
 /*  IF X > Y THEN ICISZ = X;                                       */
 /*           ELSE ICISZ = Y;                                       */
 /*                                                                 */
            ICISZ = ((#CICA * (KEYLEN / 2)) + 7 );
            DO IWORK = 512 TO 8192 BY 512;
               IF IWORK > ICISZ THEN GOTO FND#CISS;
            END;
            DO IWORK = 8192 BY 2048;
               IF IWORK > ICISZ THEN GOTO FND#CISS;
            END;
 /*                                                                 */
 FND#CISS:  ICISZ = IWORK;
            #CISS=#TRKDATA/#TRKCA;
             A = 0;
             B = 0;
             C = #CICA;
             D = C;
                     DO WHILE (A < ICISZ);
                         A = 31+2*(KEYLEN+2)+(3*C);
                         C = C+1;
                     END;
                     DO WHILE (B < ICISZ);
                         DROOT = SQRT(D);
                         B = 31+(D*8)+(2*DROOT);
                         D = D+1;
                     END;
                     IF C > D THEN MAXPTRS = D;
                              ELSE GO TO MAXISC;
                     IF B > ICISZ THEN MAXPTRS = MAXPTRS - 1;
                              GO TO CILEVELS;
             MAXISC: IF A > ICISZ THEN MAXPTRS = C - 1;
                              ELSE MAXPTRS = C;
 CILEVELS: #CILV2 = #CISS/MAXPTRS;
                REMAINDR = MOD(#CISS,MAXPTRS);
                IF REMAINDR ^= 0 THEN #CILV2 = #CILV2 + 1;
       #CINXTLL = #CILV2;
       #INDXLV  = 2;
                IF #CILV2 = 1 THEN GO TO CALC#CII;
                     DO WHILE (#CINXTLL ^= 1);
                         A = #CINXTLL/MAXPTRS;
                             REMAINDR = MOD(#CINXTLL,MAXPTRS);
                             IF REMAINDR ^= 0 THEN #CINXTLL = A+1;
                                              ELSE #CINXTLL = A;
                         #INDXLV = #INDXLV+1;
                         #CILV3H = #CILV3H+#CINXTLL;
                     END;
 CALC#CII: #CIHIGHL = #CILV2+#CILV3H;
           IF (IMBFCTR = 1 & REPLFCTR = 1) THEN GO TO IMBREPL;
           IF IMBFCTR = 1 THEN GO TO CALCITRK;
           IF REPLFCTR = 1 THEN #TRKINDX = #CIHIGHL + #CISS;
                           ELSE GO TO NOIMBREP;
           GO TO EXITINDX;
 IMBREPL:  #TRKINDX = #CIHIGHL;
           GO TO EXITINDX;
 NOIMBREP: #CIHIGHL = #CIHIGHL + #CISS;
 CALCITRK: IF BLKOVRHD = 0 THEN GO TO EXITINDX;
           IBLKSZ = ICISZ+BLKOVRHD;
           #ICITRK = TRKCAP/IBLKSZ;
           #TRKINDX = #CIHIGHL/#ICITRK;
                      REMAINDR = MOD(#CIHIGHL,#ICITRK);
                      IF REMAINDR ^= 0 THEN #TRKINDX = #TRKINDX+1;
 EXITINDX: END VINDEX;
