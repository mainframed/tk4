         TITLE 'HIGH LEVEL ASSEMBLER SYNTAX CHECKER'
*---------------------------------------------------------------------*
*
*       THIS PROGRAM WAS WRITTEN AS AN EXERCISE TO SEE IF ONE ALC
*       PROGRAM COULD DO DUPLICATE THE FUNCTIONS OF WRITING A TRUE
*       TSO COMMAND PROCESSOR.  ALSO I WANTED SOMETHING WHICH COULD
*       BE EASILY MAINTAINED BY LESS THAN GENIUS ASSEMBLER PROGRAMMERS.
*       ALTERNATIVE.
*
*       TO ACCOMPLISH THE ABOVE STATED GOAL, I USED THE EXAMPLE TO
*       CREATING A HIGH LEVEL ASSEMBLER SYNATX CHECKER FOR DOING A
*       VERY FAST INTERACTIVE COMPILE WITHOUT ALL THE OVERHEAD OF
*       LETTING THE USERS CREATE OBJECT MODULES, LISTINGS, ETC.  IF
*       A USER CAN BE CODING IN ONE SPLIT SCREEN OF AN ISPF SESSION,
*       SAVE THE CODE AND SWAP TO THE OTHER SCREEN, THEN BY DOING A
*       QUICK SYNTAX CHECK, THE PERSON COULD FIX ERRORS AND CONTINUE
*       CODING.  I DO THIS NOW AND IT MAKES FOR RAPID ALC DEVELOPMENT.
*       FOR THOSE WHO ARE NOT ALC TYPES, THIS TECHNIQUE CAN BE USED
*       FOR COBOL, FORTRAN, ETC.
*
*       TO ACHIEVE THE GOAL OF WRITING A "PSEUDO TSO CP", ONE CAN
*       DO THE FOLLOWING:
*
*       1. USE THE FUNCTIONS OF CLIST OR REXX TO REPLACE THE TSO CP
*          FUNCTIONS OF IKJDAIR AND PARSING THE COMMAND STRING FOR
*          THE VARIABLES.  ALLOCATIONS AND CHECKING THOSE ALLOCATIONS
*          ARE MADE IN THE CLIST.
*
*       2. THE VARIABLE INTRODUCTIONS IS DONE IN ISPF PANELS AND/OR
*          SKELETONS.  THE PANEL CAN DO THE VALIDITY CHECKING OF
*          WHAT SHOULD BE SPECIFIED.  THIS SAVES A WHOLE BUNCH OF
*          IN TO TSO CP TO DO THE SAME.
*
*       3. FINALLY THE ALC PROGRAM MUST LOOK LIKE A TSO CP AND BE
*          PASSED ONLY THE VARIABLES IT NEEDS IN THE PARM STRING.
*          THE FORMAT OF THE PARM STRING CAN BE CONSTRUCTED IN THE
*          CLIST (REXX) EXEC.  THE ALC PROGRAM JUST MUST ACT KNOW
*          THAT THE ADDRESS PASSED TO IT IS AN ADDRESS OF A TSO
*          CPPL.  THEN ONE CHAINS DOWN TO GET THE PARM STRING IN
*          THE COMMAND BUFFER.
*
*       4. SINCE ALL OF THE TOUGH STUFF IS DONE IN THE CLIST AND
*          ISPF, THE ABILITY TO RUN IN 24 OR 32 BIT MODE IS
*          DEPENDENT ON THE PROGRAM YOU WILL INVOKE.
*
*       5. THERE IS ONE CLIST AND ISPF PANEL WHICH GOES ALONG WITH
*          THIS PROGRAM.
*
*       JIM MARSHALL, CAPT, USAF (RET)
*       DEPARTMENT OF TREASURY/FINANCIAL MANAGEMENT SERVICE
*
* INSTALLED:  01 MAY 97
*
* CHANGE LOG: NONE
*---------------------------------------------------------------------*
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
SP000    EQU   0
         SPACE
HLASM    CSECT
HLASM    AMODE 24
HLASM    RMODE 24
         SAVE  (14,12),,HLASM_&SYSDATE &SYSTIME
         LR    R12,R15
         USING HLASM,R12
         LR    R11,R1              SAVE PARAMETER REGISTER
         USING CPPL,R11            ESTABLISH ADDR TO CPPL
         GETMAIN RU,LV=WORKSIZE,SP=SP000,LOC=BELOW
         USING WORKAREA,R1
         ST    R13,SAVE+4
         ST    R1,8(R13)
         LR    R13,R1
         DROP  R1
         USING WORKAREA,R13
         SPACE
*-------------------------------------------------------------------*
*        MOVE OUR STATIC PARAMETER LIST FROM STORAGE TO THE BUFFER
*        IN GOTTEN STORAGE.
*-------------------------------------------------------------------*
         SPACE
         LA    R2,SOPTSL           GET FORCE OPTS LENGTH
         STH   R2,OPTLEN           STORE OUR COMBINED AMOUNT
         MVC   OPTS(SOPTSL),SOPTS  MOVE IN FORCED OPTIONS
         LA    R2,OPTS             GET ADDR OF OPTION AREA
         LH    R1,OPTLEN           GET LENGTH OF STAN OPTIONS
         AR    R2,R1               CALCULATE ADDR TO PLACE NEW OPTS
         SPACE
*-------------------------------------------------------------------*
*        PROCESS THE CMD BUFFER TO GET THE REST OF THE PARMS TO
*        PASS TO THE HIGH LEVEL ASSEMBLER.
*
*        CMD BUFFER
*          2   2
*        *---*---*---------------------------------------*
*        *BUF*CMD*HLASM 'BATCH,TERM'                     *
*        *LEN*LEN*                                       *
*        *---*---*---------------------------------------*
*
*-------------------------------------------------------------------*
         SPACE
         L     R10,CPPLCBUF        LOAD R10 W/ADDR OF INPUT CMD BUF
         LH    R9,0(,R10)          GET LENGTH OF CMD BUFFER
         LTR   R9,R9               IS IT ZERO??
         BZ    ABEND1              SOMETHING IS AMISS??
         LH    R9,2(,R10)          GET LENGTH OF 1ST CMD
         LTR   R9,R9               IS IT ZERO??
         BZ    ABEND2              SOMETHING IS AMISS??
         SPACE
*-------------------------------------------------------------------*
*        NOW WE START DOWN THE CMD BUFFER LOOKING FOR THE 1ST
*        QUOTE AND WHEN FOUND MOVE EVERYTHING UNTIL YOU FIND THE
*        NEXT QUOTE.
*-------------------------------------------------------------------*
         SPACE
         LA    R10,4(,R10)         POINT TO 1ST CHAR IN BUFFER
BUFLOOP  EQU   *
         CLI   0(R10),X'7D'        FOUND SINGLE QUOTE
         BE    CPLOOP1
         LA    R10,1(,R10)         MOVE ALONG IN BUFFER
         B     BUFLOOP
         SPACE
CPLOOP1  EQU   *
         LA    R10,1(,R10)         SKIP OVER 1ST SINGLE QUOTE
         LH    R4,OPTLEN           GET OPTION LENGTH
CPLOOP2  EQU   *
         CLI   0(R10),X'7D'        FOUND 2ND SINGLE QUOTE?
         BE    CPLOOP3
         MVC   0(1,R2),0(R10)      MOVE IN 1 BYTE
         LA    R2,1(,R2)           MOVE ALONG IN INPUT BUF
         LA    R10,1(,R10)         MOVE ALONG IN OUTPUT BUF
         LA    R4,1(,R4)           UP THE COUNT BY ONE
         B     CPLOOP2
         SPACE
CPLOOP3  EQU   *
         STH   R4,OPTLEN           SAVE FINAL COUNT
         SPACE
*-------------------------------------------------------------------*
*        LINK OFF TO THE HIGH LEVEL ASSEMBLER
*-------------------------------------------------------------------*
         SPACE
         LA    R8,OPTS
         LH    R9,OPTLEN
         TPUT  (R8),(R9),R         PUT IT TO SCREEN
         LA    R3,OPTLIST
         LINK  EP=ASMA90,PARAM=((R3),DDNLIST),VL=1
         SPACE
*--------------------------------------------------------------------*
*        NOW WE CLEANUP AFTER OURSELVES AND GO HOME.
*--------------------------------------------------------------------*
         SPACE
EOJ      EQU   *
         LR    R1,R13
         L     R13,SAVE+4
         ST    R15,16(,R13)            PASS HLASM  RC BACK
         FREEMAIN RU,LV=WORKSIZE,A=(R1),SP=SP000
         LM    R14,R12,12(R13)
         BR    R14
         SPACE
ABEND1   ABEND 1
ABEND2   ABEND 2
         SPACE
*--------------------------------------------------------------------*
*        DATA AREA
*--------------------------------------------------------------------*
         SPACE
         LTORG
         SPACE
         DC    H'0'                FILL AREA
STANOPTS EQU   *
         DC    H'0'                LENGTH OF STANDARD OPTION
SOPTS    EQU   *
         DC    C'NODECK,'          NO OBJ DECK
         DC    C'NODX,'            NO DSECT XREF LISTING
         DC    C'NOESD,'           NO EXT SYMBOL DICT LISTING
         DC    C'NOLIST,'          NO LISTING
         DC    C'NOMX,'            NO MACRO XREF LISTING
         DC    C'NOOBJ,'           NO OBJECT CODE
         DC    C'NORLD,'           NO RELOCATION DICTIONARY
         DC    C'TERM(NARROW),'    TERMINAL
         DC    C'NOXREF,'          NO XREF LISTING
SOPTSL   EQU   *-SOPTS
         SPACE
         DS    0F
         DC    H'0'                FILL AREA
DDNLIST  EQU   *
DDNLEN   DC    H'96'               LENGTH OF DDNAME LIST
DDNAMES  EQU   *
         DC    CL8'HASMLIN '       01 - SYSLIN
         DC    XL8'00'             02 - N/A
         DC    XL8'00'             03 - N/A
         DC    CL8'HASMLIB '       04 - SYSLIB
         DC    CL8'HASMIN  '       05 - SYSIN
         DC    CL8'HASMPRT '       06 - SYSPRINT
         DC    CL8'HASMPUN '       07 - SYSPUNCH
         DC    CL8'HASMUT1 '       08 - SYSUT1
         DC    XL8'00'             09 - N/A
         DC    XL8'00'             10 - N/A
         DC    XL8'00'             11 - N/A
         DC    CL8'HASMTERM'       12 - SYSTERM
DDNAMESL EQU   *-DDNAMES
         SPACE
WORKAREA DSECT
SAVE     DS    18F
         DS    0F
         DS    H                   FILL AREA
OPTLIST  EQU   *
OPTLEN   DS    H                   LENGTH OF OPTIONS
OPTS     DS    XL140               PLACE TO PUT OPTION
WORKSIZE EQU   *-WORKAREA
         SPACE
CPPL     IKJCPPL
         END
