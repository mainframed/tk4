         TITLE ' W H A T I F '
***********************************************************************
*                                                                     *
* WHATIF - A TSO COMMAND WHICH TESTS THE STATUS OF A DATA SET         *
*          OR THE VALUE OF A VARIABLE IN A COMMAND PROCEDURE          *
*          OR THE VALUE OF SYSRC (LAST RETURN CODE)                   *
*          AND STACKS A COMMAND IF THE CONDITION IS TRUE.             *
*                                                                     *
* CONVERTED FROM OS/MVT VERSION TO MVS VERSION AT AFDSC/PENTAGON      *
* BY BILL GODFREY. MAJOR CHANGE WAS REPLACING SEARCH OF 'DSE'         *
* CHAIN WITH SEARCH OF 'DSAB' CHAIN.  DATE 11SEP80.                   *
*                                                                     *
* CHANGES -                                                           *
* 11SEP80                                                             *
*  .  REPLACE 'DSE' SEARCH WITH 'DSAB' SEARCH.  DSE'S HAD             *
*     DDNAME AND DSNAME FIELDS. DSAB'S HAVE POINTER TO TIOT           *
*     INSTEAD, WHICH CONTAINS DDNAME AND POINTER TO JFCB WHICH        *
*     CONTAINS THE DSNAME.                                            *
*  .  MOVE DATA SET NAME TO 44-BYTE FIELD PADDED WITH BLANKS          *
*     IMMEDIATELY AFTER PARSE.                                        *
*  .  REMOVE DATA SET NAME PADDING ROUTINE FROM LOCATE.               *
*  .  REPLACED USER MACROS (TSENTRY,TSPARSE,EXIT,TSPARERR)            *
*     WITH INLINE CODE.                                               *
*  .  ADDED IKJRLSA TO FREE PARSE PDL.                                *
*  .  MOVED DSECTS FROM TOP OF PROGRAM TO BOTTOM.                     *
*  .  ADDED 'USID' TO DSN IKJPOSIT MACRO SO UNQUOTED                  *
*     DATA SET NAMES WILL BE PREFIXED.  ON OS/MVT VERSION             *
*     UNQUOTED DSNAMES WERE TREATED AS FULLY QUALIFIED.               *
*  .  THESE FIRST TWO PAGES OF COMMENTS WERE ADDED.                   *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
* PROBLEMS -                                                          *
*  .  IF THE COMMAND TO BE STACKED IS 'GOTO' THEN THIS COMMAND        *
*     LOADS AND CALLS 'GOTO' DIRECTLY INSTEAD OF STACKING IT.         *
*     THE 'GOTO' COMMAND IS NOT CONVERTED TO MVS, BUT THE MVS         *
*     CLIST PROCESSOR HAS ITS OWN 'GOTO' STATEMENT.  OS/MVT           *
*     USERS USING THE OLD 'GOTO' COULD CONVERT THEIR CLISTS           *
*     AS FOLLOWS:                                                     *
*     1. REMOVE THE 'THEN(GOTO)' KEYWORD FROM THE 'WHATIF'            *
*        COMMAND. THIS WILL CAUSE 'WHATIF' TO SET ITS RETURN          *
*        CODE TO 0 WHEN TRUE AND 4 WHEN FALSE.                        *
*     2. ADD A STATEMENT AFTER EACH 'WHATIF' COMMAND TO TEST          *
*        THE RETURN CODE. THE STATEMENT WOULD LOOK LIKE THIS:         *
*        IF &LASTCC = 0 THEN GOTO LABEL1                              *
*     3. CHANGE THE OS/MVT LABELS ('LABEL' COMMAND) REFERENCED        *
*        BY THE OLD 'GOTO' TO AN MVS CLIST LABEL                      *
*        (A NAME FOLLOWED BY A COLON).                                *
*                                                                     *
*  .  USERS WHOSE CLISTS HAD UNQUOTED DSNAMES UNDER OS/MVT            *
*     MUST BE INFORMED THAT THE NAMES WILL NOW BE PREFIXED.           *
*                                                                     *
*  .  IF A DATA SET IS CONCATENATED BEHIND ANOTHER DATA SET,          *
*     THERE IS NOTHING IN THIS COMMAND TO CONNECT IT WITH THE         *
*     DDNAME IT IS ALLOCATED TO.                                      *
*                                                                     *
* MISCELLANEOUS -                                                     *
*  .  IF THE 'THEN(COMMAND)' KEYWORD IS NOT SPECIFIED, THE            *
*     RETURN CODE WILL BE SET TO INDICATE TRUE (0) OR FALSE (4).      *
*                                                                     *
*  .  IF THE 'THEN(COMMAND)' KEYWORD IS SPECIFIED, THE RETURN         *
*     CODE WILL BE COPIED FROM THE 'ECT', WHERE THE RETURN CODE       *
*     OF THE PREVIOUS COMMAND IS STORED. SO IF THE COMMAND IS         *
*     NOT STACKED, THE VALUE OF &LASTCC WILL BE THE SAME AS IT       *
*     WAS BEFORE THE WHATIF COMMAND.  IF THE COMMAND IS STACKED       *
*     THE VALUE OF &LASTCC WILL BE SET BY THE STACKED COMMAND WHEN    *
*     IT EXECUTES, BUT BETWEEN THE TIME WHATIF ENDS AND THE           *
*     STACKED COMMAND STARTS, THE RETURN CODE IN THE 'ECT' IS THE     *
*     SAME AS IT WAS PRIOR TO WHATIF.                                 *
*                                                                     *
***********************************************************************
         EJECT
***   COPYRIGHT 1976 - REGENTS OF THE UNIVERSITY OF CALIFORNIA,     ***
***   CAMPUS COMPUTING NETWORK   (SHARE CODE 'UR')  -  1/15/76      ***
***   ALTHOUGH WE ARE RUNNING THIS MODULE IN OUR PRODUCTION SYSTEM, ***
***   NO WARRANTY, EXPRESSED OR IMPLIED, IS MADE BY CCN AS TO THE   ***
***   FUNCTIONING OR CORRECTNESS OF THE FOLLOWING CODE.             ***
         SPACE
         MACRO
&L       ERR   &M
         LCLA  &A
&A       SETA  K'&M
&L.MSG   DC    H'&A'
         DC    C&M
         MEND
         SPACE
WHATIF   CSECT
         USING *,R12
         B     @PROLOG-*(,R15)
         DC    AL1(11),CL11'WHATIF'
         DC    CL16' &SYSDATE &SYSTIME '
@SIZE    DC    0F'0',AL1(1),AL3(TSDSECTL) SUBPOOL AND SIZE
@PROLOG  STM   14,12,12(R13)
         LR    R12,R15                  BASE REGISTER
         LR    R5,R1                    CPPL POINTER
         L     R0,@SIZE
         GETMAIN R,LV=(0)
         ST    R13,4(,R1)               CHAIN SAVEAREAS
         ST    R1,8(,R13)               CHAIN SAVEAREAS
         LR    R13,R1                   NEW SAVEAREA PTR
         USING TSDSECT,R13
         MVC   CPPL(16),0(R5)
         L     R1,CPPLUPT
         L     R2,CPPLECT
         LA    R3,TSECB
         SR    R0,R0
         ST    R0,TSECB
         STM   R1,R3,PPL
         LA    R4,TSPARANS
         ST    R4,PPLANS
         ST    R13,PPLUWA
         ST    R0,TSPARANS
         STM   R1,R3,IOPL
         SPACE
         L     R1,CPPLECT               GET PTR TO ECT
         TM    ECTSWS-ECT(R1),ECTNOPD   SEE IF ANY OPERANDS
         BO    SYN                      IF NOT EXIT
         LA    R1,SYSREL
         ST    R1,PPLUWA
         SPACE
         L     R0,=V(PCL)
         ST    R0,PPLPCL
         L     R0,CPPLCBUF
         ST    R0,PPLCBUF
         LA    R1,PPL
         L     R15,16              CVTPTR
         TM    524(R15),X'80'      IF HI ORDER BIT NOT ON
         BNO   PARSELNK               THEN DO LINK, NOT CALL
         L     R15,524(,R15)       CVTPARS
         BALR  R14,R15             CALL IKJPARS
         B     PARSERET            SKIP AROUND LINK
PARSELNK EQU   *
         LINK  EP=IKJPARS
PARSERET LTR   R15,R15
         BNZ   PARSEBAD
         SPACE
         L     R11,TSPARANS
         USING PDL,R11
         CLI   DTSK+1,0                 'DATASET' SPECIFIED
         BE    NOPAD                    NO, SKIP PADDING ROUTINE
         LH    R1,DSN+4                 GET LENGTH OF DSN
         BCTR  R1,0                     DECREMENT FOR EXECUTE
         LA    R2,DSNB                  GET TO ADDRESS
         MVI   0(R2),C' '               BLANK IN DSNAME
         MVC   1(43,R2),0(R2)           PAD WITH BLANKS
         L     R3,DSN                   GET PTR TO DSN
         EX    R1,MVC                   MVC 0(1,R2),0(R3)
NOPAD    EQU   *
         CLI   SYSRCK+1,0               SEE IF  SYSRC SPECIFIED
         BE    IF0
         BAL   R10,SYSRCTST
IF0      CLI   RELK+1,0                 SEE IF STRING RELATION SPECIFD
         BE    IF1
         BAL   R10,STRING               IF SO DO THE CHECK
IF1      CLI   ALK+1,0                  SEE IF ALLOCATE KEYWORD SPECIFD
         BE    IF2
         BAL   R10,ALOCTEST
IF2      CLI   CATK+1,0                 SEE IF CAT KEYWORD SPECFD
         BE    STK
         BAL   R10,CATEST
STK      CLI   THENK+1,1                SEE IF THEN SPECIFIED
         BE    STK0
         B     RC0
STK0     L     R2,THEN                  GET ADD OF STRING
         BCTR  R2,0                     ADJUST FOR SPACE
         ST    R2,THEN                  STORE FOR LATER USE
         BCTR  R2,0                     ADJUST FOR SCAN
         LH    R1,THEN+4                GET LENGTH OF STR
         LA    R1,1(R1)                 ADJUST FOR SPACE
STK1     LA    R3,0(R2,R1)              GET PTR TO END OF STRING
         CLI   0(R3),C')'               SEE IF THIS IS TRAILING PAREN
         BE    STK2
         BCT   R1,STK1
         B     SYN
STK2     CH    R1,=H'1'                 SEE IF A NULL ARG
         BE    SYN
         BCTR  R1,0                     ADJUST FOR TRAILING PAREN
         STH   R1,THEN+4                STORE FOR LATER USE
         LA    R1,STKLEN(0,R1)          LENGTH FOR GETMAIN
         LA    R0,78                    SP FOR GETMAIN
         SLL   R0,24                    PUT SP IN POSITION
         AR    R0,R1                    ADD IN LENGTH
         GETMAIN R,LV=(0)
         LR    R10,R1                   SAVE ADDRESS
* CHECK TO SEE WHETHER THE COMMAND IS GOTO
         L     R6,THEN                  GET PTR TO START OF STR
         LR    R5,R3                    COPYTO R6
         AH    R5,THEN+4                PTR ONE PAST END OF STRING
         BCTR  R5,0                     GET PTR TO END OF STRING
         LA    R4,1                     GET DELTA
STK3     CLI   0(R6),C' '               FIND FIRST NON BLANK
         BNE   STK4
         BXLE  R6,R4,STK3               LOOP
         B     SYN                      IF ENTIRE STR BLNK JUST EXIT
STK4     LA    R7,2(R6)                 IS STR LONG ENOUGH TO BE GOTO
         CR    R5,R7
         BNH   STK10                    IF NOT STACK THE STR
         CLC   0(4,R6),=CL4'GOTO'       SEE IF COMMAND IS GOTO
         BNE   STK10                    IF NOT STACK THE COMMAND
         LA    R7,2(R6)                 SEE IF STR IS EXACTLY GOTO
         CR    R5,R7
         BNE   STK6
STK5     LH    R6,THEN+4                IF SO COMPUTE OFFSET
         B     STK9                     AND CALL GOTO
STK6     CLI   4(R6),C' '               SEE IF COMMAND WAS REALY GOTO
         BNE   STK10                    IF NOT STACK THE STRING
         LA    R6,4(R6)                 SIP OVER 'GOTO'
STK7     CLI   0(R6),C' '               FIND NEXT NON BLNK
         BNE   STK8
         BXLE  R6,R4,STK7               LOOP
         B     STK5                     IF GOTO HAD NO ARG IS A SPECIAL
STK8     S     R6,THEN                  COMPUTE OFSET TO ARG
         USING GTDSECT,R10
STK9     STH   R6,GTOFST                STORE OFFSET
         LH    R6,THEN+4                GET LENGTH OF STRING
         LA    R6,4(R6)                 ADJUST FOR HEADER
         STH   R6,GTLNTH                STORE LENGTH
         MVC   GTCPPL(16),CPPL          INIT A NEW CPPL
         LA    R2,GTLNTH                GET ADD OF CMD BUF
         ST    R2,GTCBUFP               STORE IN PSEUDO CPPL
         LA    R2,GTBUF                 ADD OF START OF TEXT IN CBUF
         L     R3,THEN                  GET PTR TO STRING
         SH    R6,=H'5'                 COMPUTE LNTH  EXECUTE
         EX    R6,MVC                   MVC 0(1,R2),0(R3)
         LOAD  EP=GOTO
         LR    R15,R0                   MOVE ADD TO BASE POS
         LR    R1,R10                   PTR TO PSEUDO CPPL
         LA    R14,RC0                  RETURN ADD
         BR    R15                      CALL GOTO
         DROP  R10
         USING STKBLK,R10
STK10    XC    STKBLK(STKLEN),STKBLK    ZERO WORKING STORAGE
         L     R3,THEN                  GET STRING ADD
         LH    R1,THEN+4                GET LENGTH
         STH   R1,LSDRLEN               STORE IN LSD
         STH   R1,LSDTLEN
         BCTR  R1,0                     DECREMENT FOR EXECUTE
         LA    R2,STKBUF                GET ADD OF STR BUFFER
         ST    R2,LSDATA                STORE IN LSD
         ST    R2,LSDNXT
         EX    R1,MVC                   MVC 0(1,R2),0(R3)
         STACK PARM=STKPB,STORAGE=(LSDATA,SOURCE),MF=(E,IOPL)
         BXLE  R15,R15,RC0
         LA    R1,STKMSG                GET ADD OF STACK ERR MSG
         B     ERROR                    GO PRINT IT
         DROP  R10
RTN      L     R15,CPPLECT              RESTORE RETURN CODE OF CALLER
         L     R15,ECTRCDF-ECT(R15)
RETURN   EQU   *
         LR    R2,R15                  HOLD RETURN CODE
         IKJRLSA TSPARANS
         LR    R1,R13                  ADDRESS TO BE FREED
         L     R0,@SIZE                SUBPOOL AND LENGTH
         L     R13,4(,R13)             OLD SAVEAREA PTR
         FREEMAIN R,LV=(0),A=(1)
         LR    R15,R2                  RESTORE RETURN CODE
         LM    0,12,20(R13)            RESTORE REGISTERS
         L     R14,12(,R13)            RESTORE RETURN ADDRESS
         BR    R14                     RETURN
         SPACE
RC0      CLI   THENK+1,1               SEE IF THEN GIVEN
         BE    RTN
         XR    R15,R15
         B     RETURN
RC4      CLI   THENK+1,1               SEE IF THEN GIVEN
         BE    RTN
         LA    R15,4
         B     RETURN
         EJECT
***********************************************************************
*                                                                     *
*     COMPARE PSTRING AND QSTRING ACCORDING TO THE RELATION SPECIFIED *
*     BY THE RELK KEYWORD. IF THE RELATION HOLDS RETURN VIA R10, ELSE *
*     GOTO RC0                                                        *
*                                                                     *
***********************************************************************
         SPACE 2
STRING   SR    R8,R8                    CLEAR CONDITION REGISTERS
         SR    R9,R9
         CLC   PSTRING+4(2),QSTRING+4   SEE IF EQUAL SIZE
         BE    STR1
         BH    STR4
         LA    R9,1                     SET LESS THAN CONDITION
         B     STR4
STR1     LH    R1,PSTRING+4             GET LENGTH OF STRINGS
         LTR   R1,R1                    SEE IF BOTH ZERO
         BNZ   STR2
         LA    R8,1                     IF SO SET EQUAL CONDITION
         B     STR4
STR2     BCTR  R1,0                     DECREMENT FOR EXECUTE
         L     R2,PSTRING               GET ADD OF STRING A
         L     R3,QSTRING               GET ADD OF STRING B
         EX    R1,CLC                   CLC 0(1,R2),0(R3)
         BNE   STR3
         LA    R8,1                     IF = SET EQUAL CONDITION
         B     STR4
STR3     BH    STR4
         LA    R9,1                     IF LESS THAN SET LT CONDITION
STR4     LA    R1,RELK+1                POINT TO RELATION
         B     CONDTEST                 GO DO THE TEST
         EJECT
***********************************************************************
*                               00003820                              *
* COMPARE THE RETURN CODE FROM THE PERVIOUS COMMAND WITH THE          *
* GIVEN VALUE                                                         *
*                                                                     *
***********************************************************************
         SPACE 2
SYSRCTST L     R1,RC                    GET ADD OF STRING
         LH    R2,RC+4                  GET LNTH OF STRING
         BCTR  R2,0                     DECREMENT FOR EXECUTE
         EX    R2,PACK                  PACK IT
         CVB   R2,WA                    CONVERT TO BINARY
         SR    R8,R8                    CLEAR CONDITION REGS
         SR    R9,R9
         L     R1,CPPLECT               GET PTR TO ECT
         C     R2,ECTRCDF-ECT(R1)       COMPARE RETURN CD
         BNE   RCD1
         LA    R8,1                     SET EQUAL CONDITION
         B     RCD2
RCD1     BNH   RCD2
         LA    R9,1                     SET LESS THAN CONDITION
RCD2     LA    R1,SYSREL
         B     CONDTEST
PACK     PACK  WA(8),0(1,R1)
         EJECT
***********************************************************************
*                                                                     *
*     ON ENTRY R8=1 IF COMPARANDS WERE EQUAL, R9=1 IF FIRST WAS LESS  *
*     R1 CONTAINS A POINTER TO A RELATION NUMBER. TEST TO SEE IF REL  *
*     SATISFIED                                                       *
***********************************************************************
         SPACE 2
         USING COND,R1
CONDTEST LA    R7,1                     GET A BIT TO DO FLIPS WITH
         CLI   COND,1                   SEE IF RELATION IS EQ
         BE    COND6
         CLI   COND,2                   SEE IF RELATION IS NE
         BNE   COND1
         XR    R8,R7                    FLIP = COND
         B     COND6
COND1    CLI   COND,3                   SEE IF RELATION IS LE
         BNE   COND2
         OR    R8,R9                    OR EQ AND LT
         B     COND6
COND2    CLI   COND,4                   SEE IF RELATION IS GE
         BNE   COND3
         XR    R9,R7                    FLIP LESSTHAN RELATION
         OR    R8,R9                    MOVE COND TO CORRECT REG
         B     COND6
COND3    CLI   COND,5                   SEE IF RELATION IS LT
         BNE   COND4
         LR    R8,R9                    MOVE COND TO CORRECT REG
         B     COND6
COND4    CLI   COND,6                   SEE IF RELATION IS NL
         BNE   COND5
         XR    R9,R7                    FLIP LT COND
         LR    R8,R9                    MOVE COND TO CORRECT REG
         B     COND6
COND5    XR    R8,R7                    GENERATE NE CONDITION
         XR    R8,R9                    GENERATE GT CONDITION
         CLI   COND,7                   SEE IF RELATION IS GT
         BE    COND6
         CLI   COND,8                   SEE IF RELATION IS NG
         BNE   RC4
         XR    R8,R7
COND6    LTR   R8,R8                    SEE IF CONDITION HOLDS
         BZ    RC4                      IF NOT EXIT
         BR    R10                      IF SO RETURN TO CALLER
COND     DS    0XL1
         DROP  R1
         EJECT
***********************************************************************
*                                                                     *
* GIVEN A DDNAME OR DSNAME SEE IF CORRESPONDING FILE IS ALLOCATED     *
* GIVEN BOTH SEE IF DSNAME ALLOCATED TO GIVEN DDNAME.                 *
* IF NOT FORM OF KEYWORD SPECIFIED FLIP THE RESULTING TRUE/FALSE COND *
* IF THE FINAL COND IS TRUE RETURN VIA REGISTER 10 ELSE GOTO RC0      *
*                                                                     *
***********************************************************************
         SPACE 2
ALOCTEST L     R9,16                    CVTPTR
         L     R9,0(R9)                 NEW/OLD
         L     R9,4(R9)                 TCB
         L     R9,X'B4'(,R9)            TCBJSCB
         L     R9,X'140'(,R9)           JSCDSABQ, QDB FOR DSAB CHAIN
         L     R9,12(,R9)               FIRST DSAB
         LA    R9,0(,R9)                SEE IF ANY THERE
         SR    R8,R8                    CLEAR CONDITION REGISTER
         LTR   R9,R9                    IF NOT NOTHING ALLOCATED
         BZ    ALTST                    SO GO TO KEYWORD TEST
         USING DSAB,R9
         CLI   FILEK+1,1                SEE IF DDN GIVEN
         BE    AL1                      IF SO GO PROCESS
         CLI   DTSK+1,1                  SEE IF SEARCH ON DSNAME
         BE    ALDSNSRC                 IF SO GO DO THAT SEARCH
         B     ALTST
AL1      MVI   WA,C' '                  BLANK WORK AREA
         MVC   WA+1(7),WA
         LH    R1,DDN+4                 GET LENGTH OF DDN
         BCTR  R1,0                     DECREMENT FOR EXECUTE
         LA    R2,WA                    GET TO ADDRESS
         L     R3,DDN                   GET PTR TO DDN
         EX    R1,MVC                   MVC 0(1,R2),0(R3)
ALDDNLP  L     R7,DSABTIOT              POINT TO TIOT ENTRY
         CLC   WA(8),4(R7)              COMPARE DDNAME TO TIOT DDNAME
         BNE   ALDDNINC                 IF NO MATCH SKIP
         TM    DSABFLG1,DSABDALC+DSABPALC DYNAMICLY OR PERMANENTLY
         BNZ   ALDDNFND                 IF SO GO TO DDN FOUND
ALDDNINC L     R9,DSABFCHN              STEP DOWN CHAIN
         LA    R9,0(R9)                 CLEAR HIGH ORDER BYTE
         LTR   R9,R9                    SEE IF END OF CHAIN
         BNZ   ALDDNLP                  IF NOT CONTINUE SCAN
         B     ALTST                    COND=NO
ALDDNFND CLI   DTSK+1,1                 SEE IF DSNAME ALSO GIVEN
         BNE   ALYES                    IF NOT SET COND AND TEST
         L     R3,DSABTIOT
         L     R3,12(,R3)               TIOEJFCB
         SRL   R3,8                     CONVERT TO STORAGE ADDRESS
         CLC   12(4,R3),=C'JFCB'        THIS SHOULD ALWAYS BE TRUE
         BNE   ALTST
         LA    R3,16(,R3)               POINT TO JFCB
         CLC   DSNB(44),0(R3)           COMPARE DSN TO JFCB
         BE    ALYES                    IF MATCH SET COND AND TEST
         B     ALTST                    IF NOT SET COND AND TEST
ALDSNSRC EQU   *
ALDSNLP  EQU   *
         L     R3,DSABTIOT
         L     R3,12(,R3)               TIOEJFCB
         SRL   R3,8                     CONVERT TO STORAGE ADDRESS
         CLC   12(4,R3),=C'JFCB'        THIS SHOULD ALWAYS BE TRUE
         BNE   ALTST
         LA    R3,16(,R3)               POINT TO JFCB
         CLC   DSNB(44),0(R3)           COMPARE DSN TO JFCB
         BNE   ALDSNINC                 IF NOT SKIP
         TM    DSABFLG1,DSABDALC+DSABPALC SEE IF ALLOCATED
         BNZ   ALYES                    SET YES COND AND TEST
ALDSNINC L     R9,DSABFCHN              STEP DOWN CHAIN
         LA    R9,0(R9)                 CLEAR HIGH ORDER BYTE
         LTR   R9,R9                    SEE IF END OF CHAIN
         BNZ   ALDSNLP                  IF NOT CONTINUE SCAN
         B     ALTST                    COND FALSE TEST KEYWORD
ALYES    LA    R8,1                     SET COND TRUE
ALTST    LH    R1,ALK                   GET KEYWORD
         BCTR  R1,0                     PERFORM RITUAL MAGIC
         XR    R1,R8                    TO DETERMIN PROPER COND
         BZ    RC4                      IF FALSE GO EXIT
         BR    R10                      IF TRUE RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
* GIVEN DSN SEE IF IT IS CATALOGED. IF NOT FORM OF KEYWORD SPECIFIED  *
* FLIP THE RESULTING CONDITION. IF THE FINAL CONDITION IS TRUE RETURN *
* VIA REGISTER 10 ELSE GOTO RC0                                       *
*                                                                     *
***********************************************************************
         SPACE 2
CATEST   TM    DSN+6,X'80'              SEE IF ARGUMENT SPECIFIED
         BO    CT1                      IF SO PROCESS
         LA    R1,ARGMSG                IF NOT COMPLAIN
         B     ERROR
CT1      MVC   CAMLST(LCAMLST),CAMLSTDC INIT CAMLST
         LA    R1,DSNB
         ST    R1,DSNP
         LA    R1,OUTAREA
         ST    R1,OUTAP
         L     R3,DSN                   GET PTR TO DSN
         LH    R1,DSN+4                 GET LENGTH OF DSN
         BCT   R1,CT2                   DECREMENT FOR EXECUTE
         CLI   0(R3),C'*'              SEE IF TERMINAL
         BE    CTYES                   TERM ALWAYS EXISTS
CT2      SR    R9,R9                    CLEAR CODITION REG
         LOCATE CAMLST                  DO THE LOCATE
         L     R14,CTBTBL(R15)          ANALIZE RETURN
         BR    R14
CTBTBL   DC    A(CTYES)                 0
         DC    A(CTERR)                 4
         DC    A(CTEST)                 8
         DC    A(CTEST)                 12
         DC    A(CTEST)                 16
         DC    A(CTERR)                 24
         DC    A(CTERR)                 32
CTERR    LA    R1,CATMSG
         B     ERROR
CTYES    LA    R9,1                     SET COND TRUE
CTEST    LH    R1,CATK                  GET CAT KEYWORD
         BCTR  R1,0                     PERFORM RITUAL MAGIC
         XR    R1,R9                    TO DETERMIN CORRECT COND
         BZ    RC4                      IF FALSE EXIT
         BR    R10                      IF TRUE RETURN VIA R10
         EJECT
ERROR    LH    R0,0(R1)                 GET LENGTH OF MSG
         LA    R1,2(R1)                 GET ADD OF MSG
         TPUT  (1),(0),R
ABND     ABEND 1
SYN      LA    R1,SYNMSG
         LA    R0,L'SYNMSG
         TPUT  (1),(0),R
         B     RTN
SYNMSG   DC    C'SYNTAX ERROR ON IF COMMAND'
PARSEBAD LA    R1,PARMSG
         B     ERROR
         EJECT
***********************************************************************
*                                                                     *
* VALIDITY CHECK ROUTINE FOR THE RELATION OPERAND OF THE SYSRC KEYWORD*
* ROUTINE PLACES A NUMERIC EQUIVALENT OF THE RELATION IN SYSREL       *
*                                                                     *
***********************************************************************
         SPACE 2
         USING *,R15
RELCK    L     R2,0(R1)                 GET ADD OF PDE
         L     R3,4(R1)                 GET ADDRESS OF RESULT
         CLI   5(R2),2                  SEE IF STRING IS CORRECT LENGTH
         BNE   RELKE
         L     R2,0(R2)                 GET PTR TO STRING
         CLC   0(2,R2),=CL2'EQ'
         BNE   RELK1
         MVI   0(R3),1
         B     RELKR
RELK1    CLC        0(2,R2),=CL2'NE'
         BNE   RELK2
         MVI   0(R3),2
         B     RELKR
RELK2    CLC   0(2,R2),=CL2'LE'
         BNE   RELK3
         MVI   0(R3),3
         B     RELKR
RELK3    CLC   0(2,R2),=CL2'GE'
         BNE   RELK4
         MVI   0(R3),4
         B     RELKR
RELK4    CLC   0(2,R2),=CL2'LT'
         BNE   RELK5
         MVI   0(R3),5
         B     RELKR
RELK5    CLC   0(2,R2),=CL2'NL'
         BNE   RELK6
         MVI   0(R3),6
         B     RELKR
RELK6    CLC   0(2,R2),=CL2'GT'
         BNE   RELK7
         MVI   0(R3),7
         B     RELKR
RELK7    CLC   0(2,R2),=CL2'NG'
         BNE   RELKE
         MVI   0(R3),8
RELKR    SR    R15,R15
         BR    R14
RELKE    LA    R15,4
         BR    R14
         DROP  R15
         EJECT
MVC      MVC   0(1,R2),0(R3)
CLC      CLC   0(1,R2),0(R3)
CAMLSTDC CAMLST NAME,0,,0
STK      ERR   'STACK ERROR'
ARG      ERR   'INCORECT ARGUMENT(S) SPECIFIED'
CAT      ERR   'ERROR IN TRYING TO ACCESS CATALOG'
PAR      ERR   'PARSE ERROR'
         LTORG
         SPACE
***********************************************************************
*                                                                     *
*         PARSE PCL DEFINITION                                        *
*                                                                     *
***********************************************************************
         SPACE
         PRINT NOGEN
PCL      IKJPARM DSECT=PDL
ASTK     IKJKEYWD
         IKJNAME 'PSTRING',SUBFLD=ASTS
BSTK     IKJKEYWD
         IKJNAME 'QSTRING',SUBFLD=BSTS
RELK     IKJKEYWD
         IKJNAME 'EQ'
         IKJNAME 'NE'
         IKJNAME 'LE'
         IKJNAME 'GE'
         IKJNAME 'LT'
         IKJNAME 'NL'
         IKJNAME 'GT'
         IKJNAME 'NG'
SYSRCK   IKJKEYWD
         IKJNAME 'SYSRC',SUBFLD=SYSRC
ALK      IKJKEYWD
         IKJNAME 'ALLOCATED'
         IKJNAME 'NALLOCATED'
CATK     IKJKEYWD
         IKJNAME 'CATALOGED'
         IKJNAME 'NCATALOGED'
FILEK    IKJKEYWD
         IKJNAME 'FILE',SUBFLD=FILES
DTSK     IKJKEYWD
         IKJNAME 'DATASET',SUBFLD=DTSS
THENK    IKJKEYWD
         IKJNAME 'THEN',SUBFLD=THENS
ASTS     IKJSUBF
PSS      IKJPOSIT DELIMITER
PSTRING  IKJPOSIT STRING,PROMPT='PSTRING'
BSTS     IKJSUBF
QSS      IKJPOSIT DELIMITER
QSTRING  IKJPOSIT STRING,PROMPT='QSTRING'
FILES    IKJSUBF
DDN      IKJIDENT 'DDNAME',MAXLNTH=8,OTHER=ALPHANUM
DTSS     IKJSUBF
DSN      IKJPOSIT DSTHING,USID,PROMPT='DSNAME'
THENS    IKJSUBF
THENSP   IKJPOSIT SPACE
THEN     IKJPOSIT STRING
SYSRC    IKJSUBF
SYSREL1  IKJIDENT 'RELATION',MAXLNTH=2,FIRST=ALPHA,OTHER=ALPHA,        X
               VALIDCK=RELCK,PROMPT='RELATION'
RC       IKJIDENT 'COMPARAND',MAXLNTH=15,FIRST=NUMERIC,OTHER=NUMERIC,  X
               PROMPT='COMPARAND'
         IKJENDP
         EJECT
         SPACE
***********************************************************************
*                                                                     *
*         DSECTS                                                      *
*                                                                     *
***********************************************************************
         SPACE
TSDSECT  DSECT
         DS    18F
CPPL     DS    0A
CPPLCBUF DS    A        PTR TO COMMAND BUFFER
CPPLUPT  DS    A        PTR TO UPT
CPPLPSCB DS    A        PTR TO PSCB
CPPLECT  DS    A        PTR TO ECT
PPL      DS    0A
PPLUPT   DS    A        PTR TO UPT
PPLECT   DS    A        PTR TO ECT
PPLECB   DS    A        PTR TO CP'S ECB
PPLPCL   DS    A        PTR TO PCL
PPLANS   DS    A        PTR TO ANS PLACE
PPLCBUF  DS    A        PTR TO CMD BUFFER
PPLUWA   DS    A        PTR TO USER WORK AREA (FOR VALIDITY CK RTNS)
IOPL     DS    0A
IOPLUPT  DS    A        PTR TO UPT
IOPLECT  DS    A        PTR TO ECT
IOPLECB  DS    A        PTR TO USER'S ECB
IOPLIOPB DS    A        PTR TO THE I/O SERVICE RTN PARM BLOCK
TSECB    DS    A
TSPARANS DS    A
WA       DS    D
CAMLST   DS    0F
         DS    3AL1(0)                  FCTN FLGS
         DS    AL1(0)                   OPTION 3
DSNP     DS    A                        PTR TO DSNAME
         DS    A                        PARM 3
OUTAP    DS    A                        PTR TO RETURN AREA
LCAMLST  EQU   *-CAMLST
DSNB     DS    CL44
OUTAREA  DS    0D
         DS    CL265
SYSREL   DS    X
STKPB    DS    2F                                                *WDD*
         DS    0D
TSDSECTL EQU   *-TSDSECT
         SPACE 3
GTDSECT  DSECT
GTCPPL   DS    0F
GTCBUFP  DS    F
GTUPT    DS    F
GTPSCB   DS    F
GTECT    DS    F
GTLNTH   DS    H
GTOFST   DS    H
GTBUF    EQU   *
         SPACE
STKBLK   DSECT
*TKPB    DS    2F                       PARM BLK                  *WDD*
LSDATA   DS    F                        PTR TO CMD BUFF
LSDRLEN  DS    H                        RECORD LENGTH
LSDTLEN  DS    H                        TOTAL LENGTH
LSDNXT   DS    F                        PTR TO NEXT REC
LSDRSVD  DS    F                        RESERVED
STKLEN   EQU   *-STKBLK
STKBUF   EQU   *
         SPACE
         IKJECT
         SPACE
R0       EQU   0                   <>
R1       EQU   1                 <<  >>
R2       EQU   2               <<      >>
R3       EQU   3             <<          >>
R4       EQU   4           <<              >>
R5       EQU   5         <<                  >>
R6       EQU   6       <<                      >>
R7       EQU   7     <<    SYMBOLIC REGISTERS    >>
R8       EQU   8       <<                      >>
R9       EQU   9         <<                  >>
R10      EQU   10          <<              >>
R11      EQU   11            <<          >>
R12      EQU   12              <<      >>
R13      EQU   13                <<  >>
R14      EQU   14                  <>
R15      EQU   15
         SPACE
*        IHADSAB
*
* /*******************************************************************/
* /*                                                                 */
* /*                       IHADSAB                                   */
* /*                                                                 */
* /*               DATA SET ASSOCIATION BLOCK                        */
* /*                                                                 */
* /* MACMEAN DSAB MEANS DATA SET ASSOCIATION BLOCK                   */
* /* MACCOMP Y-2 SC1B4/PZD82                                         */
* /* MACSTAT Y-2 73082/016236                                        */
* /*                                                                 */
* /* THE DATA SET ASSOCIATION BLOCK, DSAB, AND ITS CORRESPONDING     */
* /* TIOT DD ENTRY CONTAIN INFORMATION WHICH SERVE AS AN INTERFACE   */
* /* BETWEEN ALLOCATION (BOTH STEP AND DYNAMIC) AND OTHER SYSTEM     */
* /* COMPONENTS. DSAB'S ARE ELEMENTS OF A NON-CONTIGUOUS, DOUBLE     */
* /* THREADED CHAIN. THIS CHAIN IS HEADED BY A QUEUE DESCRIPTOR      */
* /* BLOCK WHICH IS ADDRESSED BY A FIELD IN THE JSCB, JSCBDSAB.      */
* /* THE TIOT ENTRY IS ADDRESSED FROM THE DSAB FIELD, DSABTIOT.      */
* /*                                                                 */
* /*******************************************************************/
* /* C 031005, 064040                                        @ZD03010*/
*
DSAB    DSECT
         DS    0F
DSABID   DS    CL4                     IN-CORE ID,CHARACTERS 'DSAB'
DSABFCHN DS    F                       NEXT DSAB PTR, 0 IF LAST
DSABBCHN DS    F                       PREVIOUS DSAB PTR,0 IF FIRST
DSABLNTH DS    H                       LENGTH OF DSAB
DSABOPCT DS    H                       OPEN DCB COUNT FOR TIOT DD ENTRY
DSABTIOT DS    F                       TIOT DD ENTRY PTR
DSABRS01 DS    C                       RESERVED
DSABSSVA DS    CL3                     SWA VIRTUAL ADDRESS OF SIOT
DSABGIDP DS    F                       DEVICE GROUP-ID LIST PTR
DSABANMP DS    F                       &NAME OR GDG-ALL DSNAME PTR,
*                                      0 IF NONE
DSABORG  DS    0CL2                    DATA SET  ORGANIZATION
DSABORG1 DS    B                       1ST BYTE OF DSORG FLAGS
DSABIS   EQU   X'80'                   INDEXED SEQUENTIAL ORGANIZATION
DSABPS   EQU   X'40'                   PHYSICAL SEQUENTIAL ORGANIZATION
DSABDA   EQU   X'20'                   DIRECT ACCESS ORGANIZATION
DSABCX   EQU   X'10'                   COMMUNICATIONS LINE GROUP
DSABCQ   EQU   X'08'                   DIRECT ACCESS MESSAGE QUEUE
DSABMQ   EQU   X'04'                   PROBLEM PROGRAM MESSAGE QUEUE
DSABPO   EQU   X'02'                   PARTITIONED ORGANIZATION
DSABU    EQU   X'01'                   UNMOVEABLE
DSABORG2 DS    B                       2ND BYTE OF DSORG FLAGS
DSABGS   EQU   X'80'                   GRAPHICS ORGANIZATION
DSABTX   EQU   X'40'                   TCAM LINE GROUP
DSABTQ   EQU   X'20'                   TCAM MESSAGE QUEUE
DSABAM   EQU   X'08'                   VSAM
DSABTR   EQU   X'04'                   TCAM 3705
DSABFLG1 DS    B                       FLAGS-RESTORED BY RESTART
DSABDALC EQU   X'80'                   DYNAMICALLY ALLOCATED
DSABPALC EQU   X'40'                   PERMANENTLY ALLOCATED ATTRIBUTE
DSABDCNV EQU   X'20'                   DYNAMICALLY CONVERTED
DSABCONV EQU   X'10'                   CONVERTIBLE ATTRIBUTE
DSABDCAT EQU   X'08'                   DYNAMICALLY CONCATENATED
DSABPCAT EQU   X'04'                   PERMANENTLY CONCATENATED
DSABCATM EQU   X'02'                   CONCATENATED GROUP MEMBER
DSABNUSE EQU   X'01'                   IN-USE ATTRIBUTE
DSABFLG2 DS    B                       FLAGS-RESTORED BY RESTART
DSABOPEN EQU   X'80'                   DATA SET HAS BEEN OPENED
DSABIRM  EQU   X'40'                   D.S. REVERSED MERGED FOR INPUT
DSABUNAL EQU   X'20'                   UNALLOCATE WHEN CLOSED
DSABFLG3 DS    B                       FLAGS-NOT RESTORED BY RESTART
DSABDEFR EQU   X'80'                   DEFERRED MOUNTING
DSABPASS EQU   X'40'                   PASS/RETAIN IND         @ZD03010
DSABVAM  EQU   X'20'                   VAM DATA SET
DSABVMSC EQU   X'10'                   VAM PAGING SPACE RELEASED
DSABCATL EQU   X'08'                   DATA SET IS A CATALOG
DSABJSCT EQU   X'04'                   JOBCAT OR STEPCAT DATA SET
DSABFLG4 DS    B                       FLAGS-NOT RESTORED BY RESTART
DSABCKDS EQU   X'80'                   THIS IS A CHECKPT DATA SET
DSABCKVL EQU   X'40'                   VOLUME CONTAINING CHECKPT
*                                      DATA SET IS SECURE
DSABCKSI EQU   X'20'                   SECURITY INTERFACE EXISTS FOR
*                                      THE CHECKPT DATA SET
DSABRS02 DS    2C                      RESERVED
DSABTCBP DS    F                       TCB UNDER WHICH SET IN-USE
DSABPTTR DS    F                       RELATIVE TTR OF DATA SET
*                                      PASSWORD
DSABSSNM DS    CL4                     SUB-SYSTEM NAME
DSABSSCM DS    F                       SUB-SYSTEM COMMUNICATION
*                                      AREA POINTER
DSABDCBM DS    CL6                     BIT MAP OF DCB FIELDS
DSABRS03 DS    CL2                     RESERVED
DSABSIOT DS    F                       SIOT IN-CORE ADDRESS
DSABRS04 DS    F                       RESERVED
DSABL    EQU   *-DSAB                  LENGTH OF DSECT
DSABANMI DSECT                         ALTERNATE DSNAME INFORMATION
DSABANML DS    FL1                     LENGTH OF ALTERNATE DSNAME
DSABANAM DS    C                       ALTERNATE  DSNAME
DSABANL  EQU   *-DSABANMI              LENGTH OF DSECT
DSABGIDL DSECT                         DEVICE GROUP-ID LIST
DSABLLEN DS    F                       DEVICE GROUP-ID LIST LENGTH
DSABGRID DS    CL4                     DEVICE GROUP-ID
DSABGL   EQU   *-DSABGIDL              LENGTH OF DSECT
         END
