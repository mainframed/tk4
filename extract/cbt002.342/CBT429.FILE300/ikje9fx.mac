         TITLE '   F I N D X   ( F X )  S U B C O M M A N D '
***********************************************************************
*                                                                     *
*         FINDX SUBCOMMAND OF EDIT   (FIND A HEX STRING)              *
*                                                                     *
***********************************************************************
*                                                                     *
*         WRITTEN BY BILL GODFREY, PLANNING RESEARCH CORPORATION      *
*         DATE WRITTEN. JULY 7 1981.                                  *
*         DATE UPDATED.                                               *
*         ATTRIBUTES. RE-ENTRANT.                                     *
*         DESCRIPTION.                                                *
*          THIS IS A SUBCOMMAND OF THE EDIT TSO COMMAND               *
*          WHICH FINDS A LINE CONTAINING A SPECIFIED STRING,          *
*          THE STRING BEING SPECIFIED IN HEXADECIMAL NOTATION.        *
*                                                                     *
*          THE SYNTAX IS EXACTLY LIKE THE 'FIND' SUBCOMMAND,          *
*          BUT THE STRING WILL BE TREATED AS HEX DATA.                *
*                                                                     *
*          FOR EXAMPLE:    FINDX /C1F1/ 10                            *
*          IS THE SAME AS: FIND /A1/ 10                               *
*                                                                     *
*          THE SOURCE CODE FOR THE IBM 'FIND' SUBCOMMAND IS USED,     *
*          WITH MODIFICATIONS TO TREAT THE STRING AS HEX.             *
*                                                                     *
*          THE HEX STRING MUST CONTAIN AN EVEN NUMBER OF CHARACTERS   *
*          AND THE CHARACTERS MUST BE 0 THRU 9 AND A THRU F.          *
*          IF NOT, THE MESSAGE 'TEXT NOT FOUND' WILL BE ISSUED.       *
*                                                                     *
*          FINDX OR FIND WITH NO OPERANDS ARE EXACTLY IDENTICAL.      *
*          THEY BOTH REPEAT THE PREVIOUS FIND OR FINDX, WHICHEVER     *
*          WAS USED LAST.                                             *
*                                                                     *
*          IF VERIFY IS ON, THE LINE WILL BE LISTED, BUT NOT IN HEX.  *
*          THERE IS A SEPARATE LISTX (LX) SUBCOMMAND THAT CAN BE      *
*          USED TO LIST A LINE IN HEX.                                *
*                                                                     *
*          NOTE - 'ASIS' HAS BEEN REMOVED FROM THE 'STRNGA' AND       *
*          'STRNGB' PARSE DEFINITIONS, SO LOWER CASE ALPHABETICS      *
*          WILL BE ACCEPTABLE AS HEX CHARACTERS.                      *
*                                                                     *
***********************************************************************
*BEFI    TITLE 'TSO EDIT COMMAND  FIND SUBCOMMAND  IKJEBEFI'
IKJEBEFX CSECT
         SPACE
*A180600-181200,319250,518240-519562,612600-613200               A45363
*A718000,738600,748200-749000                                    A45363
*C666000                                                         A45363
*D163200-163500,334000-344000,350000-386000,518240-519800,672000 A45363
*D718000-720000,732000,772400-773200                             A45363
*A684800-687600                                                  A45110
*D346000-348500                                                  A45110
*C693000,703000                                                  S21004
*D556000-564000,568300-568900,571000-573700                      A42955
*A100500,685700,686900                                           YM0056
         SPACE
***********************************************************************
*                                                                     *
*STATUS -- VERSION NO. 01, OS/360 RELEASE NO. 20                      *
*                                                                     *
*FUNCTION -- THIS EDIT SUBCOMMAND CONTROLS LOCATION OF A SPECIFIED    *
*   TEXT IN THE DATA SET. FOR TEXT DATA SETS THE SEARCH STRING        *
*   MAY OVERLAP TO THE NEXT RECORD.                                   *
*                                                                     *
*ENTRY POINT -- IKJEBEFI                                              *
*                                                                     *
*INPUT -- REGISTER 1 CONTAINS A POINTER TO THE EDIT COMMUNICATION     *
*   AREA,DEFINED IN THE IKJEBECA MACRO.                               *
*                                                                     *
*OUTPUT --REGISTER 15 CONTAINS A RETURN CODE                          *
*   00 - SUCCESSFUL COMPLETION                                        *
*   08 - INCOMPLETE PROCESSING, FLUSH STACK                           *
*   0C - I/O ERROR                                                    *
*                                                                     *
*EXTERNAL REFERENCES --                                               *
*        IKJEBEUT -- READS UTILITY DATA SET                           *
*        IKJEBESE -- FINDS STRING AT ANY OFFSET IN RECORD             *
*        IKJEBEMS -- MESSAGE SELECTION INTERFACE                      *
*        IKJPARS  -- PARSES SUBCOMMAND OPERANDS                       *
*                                                                     *
*   MACROS USED --                                                    *
*        IKJEBESV -- ENTRY LINKAGE                                    *
*        IKJEBERT -- EXIT LINKAGE                                     *
*        IKJEBESH -- CALLS SERVICE ROUTINES                           *
*        IKJEBECA -- DEFINES COMMUNICATION AREA DSECT                 *
*        IKJEBEMI -- EQU'S FOR MESSAGE SELECTION                      *
*        IKJPPL   -- DEFINES DSECT FOR IKJPARS PARAMETERS             *
*                                                                     *
*EXITS, NORMAL -- RETURN TO CALLER, WITH RETURN CODE.                 *
*                                                                     *
*EXITS, ERROR -- NONE.                                                *
*                                                                     *
*TABLES/WORK AREAS -- THE CASCWKA FIELD OF THE EDIT COMMUNICATION     *
*   AREA IS USED FOR WORK AREAS.                                      *
*   THE CAFINDIS BIT OF THE EDIT COMMAREA IS TURNED ON UPON EXIT      *
*   THE CAFIBFR AREA OF THE EDIT COMMAREA WILL CONTAIN THE            *
*   TOTAL LENGTH OF THE FIND STRING PLUS 4 IN THE FIRST 2 BYTES       *
*   FOLLOWED BY THE SEARCH OFFSET, OR ZERO IF NONE, FOLLOWED BY THE   *
*   SEARCH STRING.                                                    *
*                                                                     *
*ATTRIBUTES -- REFRESHABLE, ENABLED, NON-PRIVILEGED.                  *
*                                                                     *
*NOTES -- THERE IS CHARACTER-CODE INDEPENDENCE                        *
***********************************************************************
         EJECT
*  REGISTER AND SPECIAL EQUATES
PARMREG0 EQU   0                   PARAMETER REGISTER
PARMREG1 EQU   1                   PARAMETER REGISTER
WRA      EQU   2                   GENERAL REGISTER
WRB      EQU   3                   GENERAL REGISTER
TMPCDREG EQU   3                   REGISTER TO SAVE RETCODE     YM00056
WRC      EQU   4                   GENERAL REGISTER
WRD      EQU   5                   GENERAL REGISTER
WRE      EQU   6                   GENERAL REGISTER
WRF      EQU   7                   GENERAL REGISTER
WRG      EQU   8                   GENERAL REGISTER
COMMREG  EQU   9                   BASE REG FOR COMMAREA DSECT
BASEREG  EQU   11                  BASE REG FOR PROGRAM CSECT
DATAREG  EQU   12                  RESERVED REGISTER
SAVEREG  EQU   13                  SAVE AREA POINTER
RETREG   EQU   14                  RETURN ADDR REG
RETCDREG EQU   15                  RETURN CODE REG
DELIMOP  EQU   X'80'               DELIM STRING OPERAND
WORKREGA EQU   2                   GENERAL REGISTER
PARSREG  EQU   10                  BASE REG FOR PARSE DSECT
CUREAD   EQU   X'00'               OPERAND FOR CURRENT READ
FIRSTRD  EQU   X'04'               OPERAND FOR FIRST READ
NEXTRD   EQU   X'02'               OPERAND FOR NEXT READ
EOPARM   EQU   X'80'               OPERAND FOR END OF PARM LIST
L0       EQU   0                   LENGTH
L4       EQU   4                   LENGTH
L5       EQU   5                   LENGTH
L12      EQU   12                  LENGTH
RET4     EQU   4                   RETURN CODE FOR EOD
RET12    EQU   12                  RETURN CODE FOR I/O ERROR
L20      EQU   20                  LENGTH
L255     EQU   255                 LENGTH
L6       EQU   6                   LENGTH
L2       EQU   2                   LENGTH
L3       EQU   3                   LENGTH
L1       EQU   1                   LENGTH
OFF1     EQU   1                   OFFSET
RET8     EQU   8                   RETURN CODE FOR STRING NOT FOUND
*                                  AND FLUSH STACK
L8       EQU   8                   LENGTH
L7       EQU   7                   LENGTH
         IKJEBEMI  (0,312,313,501,506)
         EJECT
*  ENTRY LINKAGE
         IKJEBESV (14,12),,*
         USING IKJEBECA,COMMREG
         EJECT
         SPACE
*  TEST FOR OPERANDS
         TM    CAPTIBFR,CAOPERND   ANY OPERANDS
         BZ    NOOPS               IF NOT, BRANCH
         LA    PARMREG1,CATMPLST   PREPARE PARSE PARMLIST
         USING PPL,PARMREG1
         L     WORKREGA,PRSADA     VCON FOR PARSE PCL
PARSENT  ST    WORKREGA,PPLPCL     ADDR OF PCL
         SR    WORKREGA,WORKREGA   INITIALIZE COUNT FIELD IN     A45363
         STH   WORKREGA,CAFIBFR+L2   FIND BUFFER TO ZERO         A45363
         LA    WORKREGA,CAPTPRSD   PTR TO PDL WILL GO IN
         ST    WORKREGA,PPLANS     ANSWER PLACE ADDR RCV
         L     WORKREGA,CAPTIBFR   PTR TO COMMAND BUFFER
         ST    WRA,PPLCBUF         ADDR OF SUBCOMMAND
         ST    COMMREG,PPLUWA      PTR TO CAMMAREA IN USER WKAREA
         DROP  PARMREG1
         LINK  EP=IKJPARS
         B     RETCHECK(RETCDREG)   CHECK PARSE RETURN CODE
         SPACE
*  CHECK PARSE RETURN CODE
RETCHECK EQU   *
         B     ASTRTST             RC 0 CONTINUE
         B     OUT8                RC 4 CANT PROMPT, EXIT
         B     OUT                 RC 8 ATTN ISSUED, EXIT
         B     CMDERR              RC 12 CMD SYS ERR MSG
         B     NOSPAC              RC 16 NO CORE AVAIL MSG
         EJECT
*  NO OPERANDS ON SUBCOMMAND
         SPACE
NOOPS    TM    CACFLAG4,CAFINDIS   WAS FIND PREVIOUSLY CALLED
         BNZ   NNFIND1             YES, GO READ RECORD
*  SET UP 'PROMPT' PARSE PCL
         LA    PARMREG1,CATMPLST   ADDR OF TMP PARMLIST
         L     WRA,PRSADB          ADDR OF PCL FOR PROMPT
         B     PARSENT             GO TO ENTER PARSE
         EJECT
         SPACE
*  CHECK FOR *=0
ASTRTST  L     WRA,CACURNUM        GET CURRENT LINE NUMBER
         LTR   WRA,WRA             IS IT ZERO
         BNZ   READCUR             IF NOT, BRANCH
         SPACE
*  READ FIRST RECORD
         L     WRA,CAPTCDCB        ADDR OF CURRENT DCB
         ST    WRA,BEUTABA         STORE IN PARM LIST
         MVI   BEUTABA,FIRSTRD     CODE FOR FIRST READ
         LA    WRA,BEUTABA         ADDR OF PARM LIST
         SR    WRB,WRB             ZERO REG
         ST    WRB,BEUTABB         ZERO UT PARM FOR RCD KEY
         LA    WRB,CABFRPL         ADDR OF BUFFERPOOL
         ST    WRB,BEUTABC         PTR FOR RCD READ MOVE MODE
         OI    BEUTABC,EOPARM      END OF PARMLIST INDICATOR
         IKJEBESH   (COMMREG),IKJEBEUT,PARAM=((COMMREG),(WRA)),        X
               MF=(E,SHAREA)
         LTR   RETCDREG,RETCDREG   TEST RETURN CODE
         BZ    LESTRNG             IF ZERO, BRANCH
TESTAS   LA    WRA,RET4               CODE FOR EOD
         CR    WRA,RETCDREG        COMPARE WITH RC
         BNE   IOER                BRANCH IF IO ERROR OCCURRED
         MVC   AREAM(LEND-LBEG),LBEG  MOVE LFORM OF ML MACRO
LABEL    IKJEBEML   M501,,,,MF=(E,AREAM)   WRITE EMPTY DS.MSG
         B     OUT                 AND  EXIT
IOER     LA    RETCDREG,RET12      SET IO ERROR RETCODE
         B     OUTA                 AND EXIT
         EJECT
*  READ CURRENT RECORD
READCUR  L     WRA,CAPTCDCB        ADDR OF CURRENT DCB
         ST    WRA,BEUTABA         STORE IN PARM LIST
         LA    WRA,CABFRPL         ADDR OF BUFFERPOOL
         ST    WRA,BEUTABC         UT PTR TO STGE FOR RCD READ
         MVI   BEUTABA,CUREAD      CODE FOR CURRENT READ
         LA    WRB,CACURNUM        CURRENT LINE NUMBER
         LA    WRA,BEUTABA         ADDR OF PARM LIST
         ST    WRB,BEUTABB         UT PTR TO KEY TO READ ON
         OI    BEUTABC,EOPARM      END OF PARMLIST INDICATOR
         IKJEBESH   (COMMREG),IKJEBEUT,PARAM=((COMMREG),(WRA)),        X
               MF=(E,SHAREA)
         LTR   RETCDREG,RETCDREG   TEST RC
         BZ    LESTRNG             IF SUCCESSFUL GO TO LINEDIT STRING
TESTIO   LA    WRA,RET4            RETCODE FOR EOD
         CR    WRA,RETCDREG        COMPARE
         BE    NOTFOUND            IF EOD, BRANCH
         B     IOER                ELSE, I/O ERROR OCCURRED, BRANCH
         EJECT
*  EXAMINE PARSE PDL
LESTRNG  L     PARSREG,CAPTPRSD    ADDRESS OF PARSE PDL
         USING IKJPARMD,PARSREG    ADDRESSABILITY FOR PARSE DSECT
         SR    WRA,WRA
         TM    CACFLAG1,CANONUM    IS DS NUMBERED
         BNZ   NUMORNOT            IF NOT DONT CONSIDER SEQ FIELD
         IC    WRA,CALENGTH        SEQ FIELD LENGTH
NUMORNOT LA    WRA,L4(WRA)         CONTROL WORD LENGTH
         LH    WRB,CALRECL         TOTAL LENTH OF CW,SEQ,DATA
         SR    WRB,WRA             MAX VALID LENGTH FOR STRING
         LH    WRA,STRNGB+L4       LENGTH OF STRING
         LTR   WRA,WRA             IS IT A NULL STRING
         BZ    NOTFOUND            IF SO, TREAT AS NOT FOUND
FI000100 EQU   *                                                 A45363
         CLI   CADSCODE,CATEXT     IS DSTYPE TEXT
         BE    NOLNCMP             IF SO THEN LENGTH OF TEXT MAY BE
*                                  GT LINESIZE SINCE SEARCH ACROSS BDYS
         CR    WRA,WRB             COMPARE
         BH    NOTFOUND            IF LENGTH GT MAX, BRANCH
NOLNCMP  EQU   *                   BRANCH FOR TEXT DSTYPE
         BCTR  WRA,PARMREG0        DECREMENT FOR EX MVC
         L     WRB,STRNGB          ADDR OF STRING
         EX    WRA,MOVB            MOVE STRING
         LA    WRA,L5(WRA)          INCREMENT LENGTH FOR LL00
         STH   WRA,CAFIBFR         STORE IN FIND BUFFER
         TM    CAFIBFR+1,X'01'     IS LENGTH ODD                  .PRC.
         BO    NOTFOUND            YES, TREAT AS NOT FOUND        .PRC.
         LA    0,4                 GET A 4                        .PRC.
         SR    WRA,0               GET LENGTH                     .PRC.
         LR    0,WRA               SAVE LENGTH                    .PRC.
         SRL   WRA,1               HALVE THE LENGTH               .PRC.
         LA    WRA,4(,WRA)         PLUS 4                         .PRC.
         STH   WRA,CAFIBFR         STORE IN FIND BUFFER           .PRC.
         LA    1,CAFIBFR+4         POINT TO HEX DATA              .PRC.
         BAL   WRA,HEXPACK         CONVERT HEX TO BINARY          .PRC.
         LR    0,COMMREG           RESTORE REG 0                  .PRC.
         OI    CACFLAG4,CAFINDIS   TURN ON FIND ISSUED BIT
         EJECT
*  LINE-EDIT THE SEARCH STRING
LEDIT    LA    WRA,CAFIBFR         ADDR OF BUFFER
         ST    WRA,LEAREA          STORE IN PARM LIST
         MVI   LEAREA,DELIMOP      OPERAND FOR DELIM STRING
         ST    COMMREG,LEAREA+L4    PTR TO COMM AREA
         LA    WRA,LEAREA
         IKJEBESH (COMMREG),IKJEBELE,PARAM=((WRA)),MF=(E,SHAREA)
NNFIND   LH    WRA,CAFIBFR+L2       COUNT SPECIFIED
         LTR   WRA,WRA             IS IT NOT SPECIFIED
         BZ    STRSERCH            IF NOT SPECIFIED  BRANCH
         EJECT
*  THIS ROUTINE PLACES PTR TO BEGINNING OF DATA PORTION OF
*  RECORD IN WRB, AND PTR TO ONE BYTE PAST END OF DATA PORTION
*  IN WRC.
SRCHIT   LA    WRB,CABFRPL         ADDR OF LINE
         LH    WRC,L4(WRB)          LENGTH IN REGC
         LA    WRB,L4(WRB)         INCREMENT TO POINT AT LL00
         AR    WRC,WRB             ADD TO POINT NEAR END
         TM    CACFLAG1,CANONUM    IS NONUM SPECIFIED
         BZ    NUMBRD              IF NOT, BRANCH AS IF FIXED
         LA    WRB,L4(WRB)          INCREMENT PTR
         B     OUTPT               EXIT FROM RTN
NUMBRD   EQU   *                   IF LINE NUMBERED
         SR    WRA,WRA             ZERO REG AND
         IC    WRA,CALINE          INSERT OFFSET OF LINE NUMBER
         LA    WRD,OFF1            ONE
         CR    WRA,WRD             IS OFFSET OF LINE NUM ONE
         BNE   LCALDCD             IF NOT BRANCH
         IC    WRA,CALENGTH        GET LENGTH OF LINE NUM
         AR    WRB,WRA             INCREMENT PTR PAST LINE NUMBER
         LA    WRB,L4(WRB)         INCREMENT BY 4 FOR LL00
         B     OUTPT               EXIT RTN
LCALDCD  EQU   *                   IF OFFSET GT ONE
         LR    WRC,WRB             SAVE PTR TO LL00
         AR    WRC,WRA             INCREMENT BY LINE NUM OFFSET
         LA    WRC,L3(WRC)         INCREMENT ENDPTR FOR LL00
         LA    WRB,L4(WRB)         INCREMENT DATA PTR FOR LL00
OUTPT    EQU   *                   EXIT FROM ROUTINE
         EJECT
*  WRB CONTAINS BEGINNING POINTER
*  WRC CONTAINS END POINTER
         LH    WRD,CAFIBFR+L2      COUNT ORIGIN ONE
         BCTR  WRD,PARMREG0        DECREMENT FOR 0 BASE
         AR    WRD,WRB             POINT TO BYTE TO BEGIN SEARCH
         LR    WRA,WRD             REGA HAS PTR TO SEARCH POINT
         LH    WRD,CAFIBFR         LENGTH OF FIND STRING TO
         LA    WRE,L4
         BCTR  WRD,PARMREG0        DECREMENT FOR EX
         SR    WRD,WRE             DECREMENT FOR LENGTH OF STRING
         LR    WRE,WRD
         AR    WRE,WRA             WILL SEARCH GO OVER END OF DATA
         CR    WRE,WRC             COMPARE
         BNL   RDNXT               IF OVERFLOW, BRANCH
         EX    WRD,COMPARE         EXECUTE THE STRING COMPARE
         BE    FOUND               IF FOUND, BRANCH
         EJECT
*  READ NEXT RECORD
RDNXT    L     WRA,CAPTCDCB        ADDR OF CURRENT DCB
         ST    WRA,BEUTABA         STORE IN PARM LIST
         MVI   BEUTABA,NEXTRD      CODE FOR NEXT READ
         SR    WRA,WRA             ZERO REG FOR
         ST    WRA,BEUTABB         UT PTR TO KEY FOR READ
         LA    WRA,CABFRPL         PTR TO BUFFERPOOL
         ST    WRA,BEUTABC         UT PTR TO STGE FOR RCD READ
         OI    BEUTABC,EOPARM      END OF PARMLIST INDICATOR
         LA    WRA,BEUTABA         ADDR OF PARM LIST
         IKJEBESH   (COMMREG),IKJEBEUT,PARAM=((COMMREG),(WRA)),        X
               MF=(E,SHAREA)
         LTR   RETCDREG,RETCDREG   TEST RETURN CODE
         BNZ   TESTIOT             IF NOT ZERO, BRANCH
         TM    CAATTN,CAATTNIS     WAS ATTN ISSUED
         BZ    SRCHIT              IF NOT, BRANCH
         SR    RETCDREG,RETCDREG   ZERO RETCODE
         B     OUT                 EXIT
         EJECT
         SPACE
*  VALIDITY CHECK EXIT
CHKVAL   EQU   *
         IKJEBESV  (14,12),,,COMMREG=L4(,PARMREG1),CODEREG=NO    A45363
         BALR  WRC,PARMREG0        ESTABLISH ADDRESSABILITY      A45363
         USING *,WRC                                             A45363
         SPACE
*  CONVERT COUNT TO BINARY, REPROMPT IF ZERO                     A45363
         SPACE
         L     WRA,L0(,PARMREG1)   ADDR OF PDE                   A45363
         LH    WRB,L4(,WRA)        LENGTH OF COUNT IN EBCDIC     A45363
         BCTR  WRB,PARMREG0        DECREMENT FOR EXECUTE         A45363
         L     WRA,L0(,WRA)        ADDR OF COUNT IN EBCDIC       A45363
         EX    WRB,FIPACK          COUNT IN PACKED DECIMAL       A45363
         CVB   WRB,FIDWORD         COUNT IN BINARY               A45363
         LTR   WRB,WRB             WAS ZERO SPECIFIED            A45363
         BZ    FI000210            YES, SPECIFY NOT VALID        A45363
         STH   WRB,CAFIBFR+L2      NO, SAVE COUNT                A45363
         SR    RETCDREG,RETCDREG   SPECIFY COUNT VALID           A45363
         SPACE
FI000220 EQU   *                                                 A45363
         IKJEBERT  (14,12),,RC=(15)  RETURN TO IKJPARS           A45363
         SPACE 2
FI000210 EQU   *                                                 A45363
         LA    RETCDREG,RET4       SPECIFY NOT VALID, REPROMPT   A45363
         B     FI000220            RETURN TO IKJPARS             A45363
         SPACE 2
         DROP  WRC
         EJECT
*  MESSAGE FOR NO CORE AVAILABLE
NOSPAC   MVC   AREAM(LEND-LBEG),LBEG  MOVE MSG PARAMS
         IKJEBEML  M312,0,NONINS,0,MF=(E,AREAM)
         SR    RETCDREG,RETCDREG
         B     OUT8                EXIT
         EJECT
*  IKJEBEUT RETURN CODE OTHER THAN ZERO
TESTIOT  LA    WRB,RET4            CODE FOR EOD
         CR    WRB,RETCDREG        COMPARE
         BE    NOTFOUND            IF EOD, BRANCH
         B     IOER                GO TO IO ERROR RTN
         EJECT
         SPACE
*  READ ANOTHER RECORD
NNFIND1  EQU   *
         L     WRA,CAPTCDCB        PTR TO UTIL DCB
         ST    WRA,BEUTABA         STORE IN IKJEBEUT PARM LIST
         MVI   BEUTABA,NEXTRD      OPERAND FOR READ NEXT
         LA    WRA,CABFRPL         ADDR OF BUFFER TO PUT RCD
         ST    WRA,BEUTABC         STORE IN PARM LIST
         LA    WRB,CACURNUM        ADDR OF LINE NUMBER (CURRENT)
         ST    WRB,BEUTABB         STORE IN PARM LIST
         OI    BEUTABC,EOPARM      OPERAND FOR END OF PARMLIST
         LA    WRA,BEUTABA         ADDR OF PARM BLOCK
         L     WRB,CACURNUM        CURRENT LINE NUMBER
         LTR   WRB,WRB             IS IT ZERO
         BNZ   OKRD                IF * IS NOT ZERO READ CURRENT RCD
         MVI   BEUTABA,FIRSTRD     IF * IS ZERO READ FIRST RECORD
OKRD     EQU   *
         IKJEBESH  (COMMREG),IKJEBEUT,PARAM=((COMMREG),(WRA)),         X
               MF=(E,SHAREA)
         LTR   WRB,WRB             WAS CACURNUM ZERO
         BZ    TSTZR               IF SO TEST RC DIFFERENTLY
TESTIX   EQU   *
         LTR   RETCDREG,RETCDREG   TEST IO RETURN CODE
         BZ    NNFIND              IF OKAY, CONTINUE
         LA    WRA,RET4            IF NEXT RCD NOT FOUND
         CR    WRA,RETCDREG        AS INDICATED BY RC 4
         BE    NOTFOUND            GO TO NOT FOUND RTN
         B     IOER                ELSE IO ERROR EXIT
TSTZR    EQU   *
         LTR   RETCDREG,RETCDREG   TEST IO RETURN CODE
         BNZ   TESTAS              IF UNSUCCESSFUL, TEST FURTHER
         LA    WRA,CABFRPL         POINT TO CURRENT KEY FOR READ NEXT
         ST    WRA,BEUTABB         STORE IN PARM LIST
         MVI   BEUTABA,NEXTRD      CODE FOR READ NEXT
         LA    WRA,BEUTABA         POINT TO PARM LIST
         IKJEBESH (COMMREG),IKJEBEUT,PARAM=((COMMREG),(WRA)),          X
               MF=(E,SHAREA)
         B     TESTIX              GO TO TEST RETURN CODE
         EJECT
*  TEXT NOT FOUND
NOTFOUND EQU   *
LAA      IKJEBEML   M506,0,0,0,MF=(E,AREAM)
         SR    RETCDREG,RETCDREG   ZERO RC
         B     OUT8                AND EXIT
         EJECT
         SPACE
*  COMMAND SYSTEM ERROR MESSAGE
CMDERR   EQU   *                   COMMAND  SYSTEM ERROR MSG
         IKJEBEML  M313,M3131,0,CSERIN,MF=(E,AREAM)
         B     OUT8                EXIT
         EJECT
*  ROUTINE TO GO TO STRING SEARCH SERVICE RTN FOR FINDING
*  STRINGS AT ANY INCREMENT OR ACROSS TWO RECORDS (FOR TEXT DATASETS)
STRSERCH EQU   *
         L     WRA,CAPTCDCB        PTR TO CURRENT UTILITY DCB
         ST    WRA,DCBPTR          STORE IN PARM LIST
         LH    WRA,CAFIBFR         LENGTH OF STRING
         LA    WRB,L4               AND LL00
         SR    WRA,WRB             ADJUST FOR LL00
         ST    WRA,LNTXT           STORE IN PARM LIST
         LA    WRA,CAFIBFR+L4       ADDR OF STRING
         ST    WRA,TXTPTR          STORE IN PARM LIST
         LA    WRA,CABFRPL         ADDR OF BUFFER
         ST    WRA,BUFPTR          STORE IN PARM LIST
         LA    WRA,SRANGE          SEARCH RANGE
         ST    WRA,LINRNPTR        STORE IN PARM LIST
         LA    WRA,L255            INITIALIZE SEFLAGS TO ZERO    A45363
         ST    WRA,SEFLAGCT          AND COUNT TO MAX POSSIBLE   A45363
         L     WRA,CABFRPL         RECORD KEY
         ST    WRA,SRANGE          FIRST RCD OF SEARCH RANGE
         L     WRA,ENINPO          MAX RCD KEY
         ST    WRA,SRANGE+L4       END OF SEARCH RANGE
         LA    PARMREG1,DCBPTR     ADDR OF PARM LIST
         LR    PARMREG0,COMMREG    PTR TO COMM AREA
         L     RETCDREG,STRADR     LOAD ADDRESS OF STRING SEARCH
         BALR  RETREG,RETCDREG         AND LINK TO IKJEBESE
         TM    CAATTN,CAATTNIS     WAS ATTN ISSUED
         BZ    TXTS                IF NOT, BRANCH
         SR    RETCDREG,RETCDREG   ZERO RETURN CODE
         B     OUT                 AND EXIT
TXTS     ST    RETCDREG,SESAVE     STORE RETURN CODE
         SR    WRA,WRA             ZERO REGISTER
         IC    WRA,SESAVE          INSERT RC BYTE
         LTR   WRA,WRA             TEST
         BZ    FOND                IF FOUND, BRANCH
         LA    WRB,RET4
         CR    WRA,WRB             TEST FOR FOUND ACROSS LINES (TEXT)
         BE    FOND                IF SO, BRANCH
         LA    WRD,RET8               CODE FOR NOT FOUND
         CR    WRA,WRD             COMPARE
         BE    NOTFOUND            IF NOT FOUND, BR TO PUT MSG
         B     IOER                ELSE, BR TO PUT TO ERROR MSG
         EJECT
*  STRING WAS FOUND AT CORRECT OFFSET
FOND     EQU   *                   EXIT FOR STRING FOUND
FOUND    EQU   *                   EXIT FOR STRING FOUND
         L     WRA,CABFRPL         KEY OF RECORD                 A45363
         ST    WRA,CACURNUM        STORE IN CURRENT LINE NUM
         OI    CACFLAG1,CALNTOVF   TURN ON LINE TO BE VERIFIED SW
OUT      EQU   *                   NORMAL ENTRY TO EXIT RTN
         SR    RETCDREG,RETCDREG   ZERO RETURN CODE
OUTA     EQU   *                   ERROR ENTRANCE TO EXIT RTN
         MVC   CATEMPBF+L12(L8),CABFRPL  MOVE VERIFY
         MVC   CATEMPBF+L20(L255),CABFRPL+L8  LINE INTO BUFFER
         SPACE
*  FREE PARSE PDL IF NECESSARY                                   A45110
         TM    CAPRSPDL,CAFREEDL   IS THERE A PARSE PDL          A45110
         BO    FI000500            NO, EXIT                      A45110
         LR    TMPCDREG,RETCDREG   SAVE RETCODE ACROSS SVC      YM00056
         LA    PARSREG,CAPTPRSD    ADDR OF PDL POINTER           A45110
         IKJRLSA (PARSREG)         FREE PDL                      A45110
         OI    CAPRSPDL,CAFREEDL   INDICATE PDL FREED            A45110
         LR    RETCDREG,TMPCDREG   RESTORE 15                   YM00056
         SPACE
FI000500 EQU   *                                                 A45110
         IKJEBERT   (14,12),,RC=(15)
OUT8     EQU   *
         LA    RETCDREG,RET8       RETURN CODE FOR STACK FLUSH
         B     OUTA                EXIT
         SPACE 1                                                  .PRC.
HEXPACK  LTR   14,0                LENGTH VALID?                  .PRC.
         BNPR  WRA                 NO - EXIT                      .PRC.
         BCTR  14,0                LENGTH MINUS 1 FOR EX          .PRC.
         LR    15,WRA              SAVE REG 2                     .PRC.
         EX    14,HEXTRT           ARE ALL CHARS HEX              .PRC.
         LR    WRA,15              RESTORE REG 2                  .PRC.
         BNZ   NOTFOUND            NO, ILLEGAL STRING             .PRC.
         LR    15,1                REG 15 --> RECEIVING FIELD     .PRC.
         LR    14,0                SAVE THE LENGTH                .PRC.
         SRL   0,1                 HALVE THE LENGTH               .PRC.
         SLL   0,1                 AND DOUBLE IT BACK             .PRC.
         CR    0,14                IS IT THE SAME AS IT WAS       .PRC.
         SRL   0,1                 HALVE IT FOR GOOD              .PRC.
         BNE   NOTFOUND            ERROR, ODD NUMBER OF CHARS     .PRC.
HEXPACKL SR    14,14               CLEAR REG 14                   .PRC.
         IC    14,0(,1)            REG 14  =  1ST CHAR            .PRC.
         CLI   0(1),C'0'           NUMBER OR LETTER               .PRC.
         BNL   *+8                 NUMBER - BRANCH                .PRC.
         LA    14,57(,14)          LETTER - CONVERT TO FA-FF      .PRC.
         SLL   14,4                SHIFT LEFT 4 BITS              .PRC.
         STC   14,0(,15)           STORE LEFT HALF                .PRC.
         IC    14,1(,1)            REG 14  =  2ND CHAR            .PRC.
         CLI   1(1),C'0'           NUMBER OR LETTER               .PRC.
         BNL   *+8                 NUMBER - BRANCH                .PRC.
         LA    14,57(,14)          LETTER - CONVERT               .PRC.
         SLL   14,28               SHIFT LEFT HALF TO OBLIVION    .PRC.
         SRL   14,28               SHIFT BACK AGAIN               .PRC.
         STC   14,1(,15)           STORE RIGHT HALF               .PRC.
         OC    0(1,15),1(15)       'OR' RIGHT HALF OVER LEFT HALF .PRC.
HEXPACKN LA    1,2(,1)             INCREMENT SENDING FLD          .PRC.
         LA    15,1(,15)           INCREMENT RECEIVING FLD        .PRC.
         BCT   0,HEXPACKL          LOOP USING LENGTH IN REG 0     .PRC.
         BR    WRA                 EXIT                           .PRC.
         SPACE 1                                                  .PRC.
HEXTRT   TRT   0(0,1),HEXVAL       (EXECUTED)                     .PRC.
HEXVAL   DC    0D'0',193X'FF',6X'00',41X'FF',10X'00',6X'FF'       .PRC.
*              THE ABOVE TABLE CAN BE USED TO TEST FOR            .PRC.
*              HEX CHARACTERS WITH A 'TRT' INSTRUCTION.           .PRC.
*              IF THE FIELD IS HEX, CONDITION CODE IS 0.          .PRC.
*              OTHERWISE, 'TRT' CHANGES THE LOW ORDER 8 BITS      .PRC.
*              OF REGISTER 2 AND LOW ORDER 24 BITS OF REG 1.      .PRC.
         EJECT
*  PARSE PCL MACROS FOR SECOND AND SUBSEQUENT ENTRIES INTO FIND
IKJEBFI0 IKJPARM  DSECT=DUMMIE
DELJAA   IKJPOSIT   DELIMITER
STRNGA IKJPOSIT STRING,SQSTRING                                  S21004
COUNTA IKJIDENT 'COUNT',MAXLNTH=3,FIRST=NUMERIC,OTHER=NUMERIC,         X
               VALIDCK=CHKVAL
         IKJENDP
         EJECT
*  PARSE PCL MACROS FOR FIRST ENTRY INTO FIND
IKJEBFI1 IKJPARM
DELIMB   IKJPOSIT   DELIMITER
STRNGB IKJPOSIT STRING,SQSTRING,PROMPT='STRING'                  S21004
COUNTB IKJIDENT 'COUNT',MAXLNTH=3,FIRST=NUMERIC,OTHER=NUMERIC,         X
               VALIDCK=CHKVAL
         IKJENDP
         EJECT
*  CONSTANTS AND MESSAGE CONSTANTS
LBEG     IKJEBEML 0,,,,MF=L
LEND     EQU   *
ENINPO   DC    F'100000000'        LARGEST RECORD NUMBER ALLOWABLE
MOVB     MVC   CAFIBFR+L4(L0),L0(WRB) MOVE FOR STRING INTO BUFFER
FIPACK   PACK  FIDWORD(L8),L0(L0,WRA)  EX TARGET INSTRUCTION     A45363
MOVBUF   MVC   CATEMPBF+L12(L0),CABFRPL     MOVE FOR VERIFY
PRSADB   DC    V(IKJEBFI1)          POINTER TO 'PROMPT' PCL
PRSADA   DC    V(IKJEBFI0)          POINTER TO NOPROMPT PCL
COMPARE  CLC   CAFIBFR+L4(L0),L0(WRA) COMPARE FOR CHAR STRING
STRADR   DC    V(IKJEBESE)         ADDR OF STRING SEARCH RTN
NONINS   IKJEBEMG  ,M312IN1,'FIND'
CSERIN   IKJEBEMG CSERINA,M3131IN1,'PARSE'
CSERINA  IKJEBEMG ,M3131IN2,'12'
         EJECT
         IKJEBECA
         EJECT
*  WORK AREAS
         ORG   CASCWKA             SUBCOMMAND WORKAREA
FIDWORD  DS    D                   DOUBLE WORD FOR COUNT CVB     A45363
         SPACE
DCBPTR   DS    1F                  IKJEBESE PARM LIST, DCB PTR
LNTXT    DS    1F                  LENGTH OF TEXT
TXTPTR   DS    1F                  POINTER TO TEXT
BUFPTR   DS    1F                  POINTER TO BUFFER AREA
LINRNPTR DS    1F                  POINTER TO LINE RANGE
SEFLAGCT DS    0F                  LABEL FOR STORE               A45363
         DS    X                   RESERVED                      A45363
SEFLAGS  DS    X                   FLAGS                         A45363
SEMODSW  EQU   X'80'               LINE HAS BEEN MODIFIED FLAG   A45363
SECHARCT DS    H                   MAX NUMBER OF CHAR TO SCAN    A45363
         SPACE
LEAREA   DS    2F                  LINEDIT PARMLIST
         DS    0D
CONAR    DS    1F                  CONVERSION RTN WORKAREA
CONAREA  DS    1F                  CONVERSION RTN WORKAREA
SHAREA   DS    10F                 SR HANDLER PARMLIST
AREAM    DS    10F                 MSG SELECT PARM LIST
BEUTABA  DS    1F                  UT PARM LIST, OPCODE AND PTR TO DCB
BEUTABB  DS    1F                  UT PARM LIST, PTR TO KEY
BEUTABC  DS    1F                  UT PARM LIST, PTR TO BUFFER
SRANGE   DS    2F                  SEARCH RANGE
SESAVE   DS    1F                  STRING SEARCH RETCODE STGE
         ORG   ,                   RESTORE COUNTER
         EJECT
         IKJPPL
         END
         BE    RET                 RETURN RET4 CODE IF COUNT ZEROE
