         TITLE 'IKJEGLSA, ''LIST'' SUBCOMMAND OF TEST, SECOND LOAD'
* /* START OF SPECIFICATIONS ****
*02*  PROCESSOR = ASSEMBLER
**** END OF SPECIFICATIONS ***/
***********************************************************************
*
* STATUS --
*    VERSION NO.  00, OS/VS2 RELEASE NO. 02
*    MODIFIED TO GENERATE 'DC' IF TYPE I AND INVALID OPCODE.      .PRC.
*
* FUNCTION --
*    THIS MODULE IS THE SECOND LOAD OF IKJEGLST, THE LIST SUBCOMMAND.
*    IT IS ENTERED WHEN THE OUTPUT TYPE IS ONE OF THE FOLLOWING- A, B,
*    C, D, E, F, H, I, L, P, Q, S, V, Y, OR Z.  THE ROUTINE CALLS
*    IKJEGCVT TO CONVERT THE DATA (EXCEPT FOR CHARACTER, BINARY, OR
*    ZONED FORMATS WHICH ARE DONE WITHIN THIS MODULE), FORMATS THE
*    DATA IN THE BUFFER, AND GOES TO IKJEGIO TO OUTPUT THE DATA. THIS
*    MODULE LISTS AREAS OF CORE IN ONE OF THE ABOVE NAMED FORMATS.
*
* ENTRY POINTS --
*         IKJEGLSA  MAIN ENTRY PT, ENTERED BY XCTL FROM IKJEGLST
*
* INPUT --
*    REG 1 POINTS TO A 2 WORD LIST, THE FIRST WORD IS A POINTER TO
*    THE CURRENT ADDRESS PDE AND THE SECOND WORD IS A POINTER TO THE
*    'LSTWORK' DSECT WHICH HAS ALREADY BEEN INITIALIZED.
*    REG 9 CONTAINS THE ADDRESS OF 'TCOMTAB', THE COMMUNICATIONS DSECT
*
* OUTPUT --
*    LINES TO THE TERMINAL DISPLAYING REQUESTED DATA OR, IF THE PRINT
*    KEYWORD HAS BEEN SPECIFIED, THE REQUESTED DATA IS WRITTEN TO THE
*    DESIGNATED DATA SET.
*
* EXTERNAL REFERENCES --
*         IKJEGCVT  FOR CONVERSION OF ADDRESSES AND DATA FROM MACHINE
*         FORMAT TO PRINTABLE FORMAT. FOR CONVERSION OF ADDRESSES,
*         CVT IS ENTERED WITH THE HIGH ORDER BIT OF REG 0 SET TO ONE
*         AND REGISTER 1 CONTAINING THE COMPLEMENT OF THE ADDRESS OF
*         AN ADDRESS PDE. THE ADDRESS PDE DESCRIBES THE ADDRESS TO BE
*         CONVERTED.  FOR DATA CONVERSIONS, REG 0 IS SET TO ZERO, AND
*         REG 1 CONTAINS THE ADDRESS OF A VALUE PDE DESCRIBING THE
*         TO BE CONVERTED.
*
*         IKJEGIO  TO OUTPUT DATA TO THE TERMINAL OR TO A PRINT DATA
*
* EXITS, NORMAL --
*         BR 14  TO THE ORIGINAL CALLER OF IKJEGLST WHEN THE LAST
*         ADDRESS PDE HAS BEEN PROCESSED.
*         XCTL  TO IKJEGLST IF THE NEXT ADDRESS IN A LIST OF ADDRESSES
*         IS REGISTER TYPE, OR IF THE FORMAT TYPE IS HEX (X).
*
* EXITS, ERROR --
*         NONE
*
* TABLES/WORK AREAS --
*    TCOMTAB  POINTED AT BY REG 9, IS THE COMMUNICATIONS TABLE FOR THE
*    TEST PROCESSOR.
*
*    LSTWORK  THE MAPPING DSECT FOR THE WORK AREA USED BY IKJEGLST AND
*    IKJEGLSA. IT HOLDS WORKING COPIES OF THE ATTRIBUTES, ADDRESSES
*    FOR THE DATA CURRENTLY BEING LISTED, PARAMETER LISTS FOR CALLING
*    VARIOUS ROUTINES, AND A DATA BUFFER FOR REMOVING BREAKPOINT SVC'S
*
*    PARAMETER DESCRIPTOR LIST  (PDE) SET UP BY PARSE
*
* ATTRIBUTES --
*    REENTRANT, REFRESHABLE, PROBLEM PROGRAM.
*
* CHARACTER CODE DEPENDENCY --
*
* NOTES --
*
* CHANGE ACTIVITY --
*   ADDED CODE TO SUBROUTINE ADDRCHK TO CLEAR OUTPUT BUFFER   @ZA11395
*   UPON RETURN FROM SVC 97.                                  @ZA11395
*  A575080-575400,804200                                      @OZ36690
*  D549000                                                    @ZA40502
*  D231000-233000                                             @AZ48272
*
***********************************************************************
         EJECT
         COPY  IKJEGSIO            OBTAIN I/O CALLING MACROS
IKJEGLSA CSECT
*D562500,D563000                                                YA00087
         SPACE 1
***********************************************************************
*  REGISTER EQUATES.
         SPACE
R0       EQU   0                   WORK REG
R1       EQU   1                   WORK REG
R2       EQU   2                   WORK REG
R3       EQU   3                   WORK REG
R4       EQU   4                   USED IN PROCESS SECTION FOR CONTROL
R5       EQU   5                   WORK REG
R6       EQU   6                   IN PROCESS SECTION, CUR BUF PTR
R7       EQU   7                   INTERNAL LINKAGE REGISTER
R8       EQU   8                   POINTS TO CURRENT ADDRESS PDE
R9       EQU   9                   BASE FOR TCOMTAB DSECT
R10      EQU   10                  BASE FOR LSTWORK DSECT
R11      EQU   11                  SPACE REGISTER
R12      EQU   12                  PROGRAM BASE REGISTER
R13      EQU   13                  PROGRAM SAVE AREA
R14      EQU   14                  EXTERNAL LINKAGE REGISTER
R15      EQU   15                  EXTERNAL LINKAGE REGISTER
***********************************************************************
         SPACE 2
*  DATA EQUATES FOR OPERANDS OF IMMEDIATE TYPE INSTRUCTIONS.
         SPACE
NULL     EQU   0                   USED FOR BALR R,0 AND BCTR R,0.
ZERO     EQU   0                   SYMBOLIC EQUATE
ONE      EQU   1                   SYMBOLIC EQUATE
TWO      EQU   2                   SYMBOLIC EQUATE
THREE    EQU   3                   SYMBOLIC EQUATE
FOUR     EQU   4                   SYMBOLIC EQUATE
FIVE     EQU   5                   SYMBOLIC EQUATE
SIX      EQU   6                   USED AS THE MAX INSTRUCTION LENGTH
EIGHT    EQU   8                   SYMBOLIC EQUATE
SIXTEEN  EQU   16                  SYMBOLIC EQUATE
HEX0A    EQU   X'0A'               USED IN SIGNTBL FOR ZONED FORMAT
HEX80    EQU   X'80'               SYMBOLIC MASK
HEXFF    EQU   X'FF'               SYMBOLIC MASK
         SPACE
BLANK    EQU   C' '                SYMBOLIC FOR BLANK (SPACE).
PERIOD   EQU   C'.'                SYMBOLIC FOR PERIOD (.)
CHAR0    EQU   C'0'                SYMBOLIC FOR  CHARACTER 0
CHAR1    EQU   C'1'                SYMBOLIC FOR A CHARACTER 1
CHAR9    EQU   C'9'                SYMBOLIC FOR CHARACTER 9
         SPACE
CFLDMASK EQU   B'00011111'         MASK TO ISOLATE REMAINDERS FOR C TYP
DWBDY    EQU   B'00000111'         USED TO TEST ADDRS FOR DBL WRD BDY.
FWBDY    EQU   B'00000011'                                FULL
HWBDY    EQU   B'00000001'                                HALF
INSTRLEN EQU   B'11000000'         FOR TESTING 1ST 2 BITS OF INSTRS
PACKMSK  EQU   X'6F'               USED TO SET UP LNTHS FOR PACK INSTR
         SPACE
*  EQUATES FOR OFFSETS INTO A SYMINFO BLOCK.
         SPACE
SIDATAPT EQU   0                   OFFSET INTO SYMINFO BLK FOR DATA PTR
SITYPE   EQU   4                   OFFSET INTO SYMINFO FOR TYPE
SIMUL    EQU   6                   OFFSET TO LAST 2 BYTES OF MLTPLCTY
SILEN    EQU   8                   OFFSET TO LNTH IN SYMINFO
SINXTPTR EQU   12                  OFFSET INTO SYMINFO BLK FOR CHAIN PT
SYMINFOL EQU   16                  SYMBOLIC FOR LENGTH OF SYMINFO BLK
         SPACE
LL00LEN  EQU   4                   SYMBOLIC FOR LENGTH OF LL00 FIELD
LSTBUFL  EQU   82                  LENGTH TO BE BLANKED IN BUFFER
MINLL    EQU   40                  MINIMUM LINE LNTH FORMATTED BY LIST
STDLL    EQU   81                  DEFAULT LINE LNTH WHEN TMPLL IS LOW
CHARLEN  EQU   32                  LENGTH OF AN OUTPUT FLD, CHAR FORMAT
SP1      EQU   1                   USED TO INCREMENT BY 1 SPACE
SP2      EQU   2                   USED TO INCREMENT BY 2 SPACES
SP4      EQU   4                   FOR INCREMENTING PAST 4 SPACES
         SPACE
H2ND     EQU   1                   OFFSET TO 2ND BYTE OF A HALFWORD
F1STHALF EQU   0                   OFFSET TO 1ST HALFWORD OF A FIELD
LL00OFF  EQU   0                   OFFSET INTO BUFFER FOR LL00 FIELD
ADDRLEN  EQU   7                   SYMBOLIC LNTH OF ABS/REL ADDRESSES
BFLDLEN  EQU   8                   SYMBOLIC LNTH OF 1 BINARY FIELD
BDATALEN EQU   1                   SYMBOLIC LNTH OF INPUT FOR 1 BIN FLD
SIGNLEN  EQU   1                   LENGTH OF A SING FIELD
DATAOFF  EQU   4                   OFFSET TO DATA PORTION OF BUFFER
MSGOFFST EQU   80                  OFFSET INTO BUFFER FOR PLACING MSG
R6OFF    EQU   44                  OFFSET INTO SAVE AREA FOR REG 6
R10OFF   EQU   60                  OFFSET INTO SAVE AREA FOR R10
TYPELEN  EQU   1                   SYMBOLIC LNTH OF TYPE FIELD IN MSG
         SPACE
LSTWRKPT EQU   0                   PARM LIST OFFSET TO LSTWORK BASE
LSTPDEPT EQU   4                   PARM LIST OFFSET TO CUR ADDR PDE
         SPACE
L0AOFF   EQU   DATAOFF+ADDRLEN     OFFSET TO FIRST INSTR FROM BUF BEGIN
FOREPTR  EQU   8                   OFFSET TO FOREWARD PTR IN SAVE AREA
BACKPTR  EQU   4                   OFFSET TO BACKWARD PTR IN SAVE AREA
FIRSTI   EQU   DATAOFF+ADDRLEN+SP4 OFFSET INTO BUF OF 1ST INSTR, I TYPE
CONLNTH  EQU   0                   OFFSET INTO CONVERT AREA FOR LENGTH
CONDATA  EQU   1                   OFFSET INTO CONAREA TO START OF DATA
MAXLINE  EQU   100                 MAX LINE LENGTH FOR OUTPUT
LSTIBLK  EQU   31                  LNTH OF DATA MOVED TO HOLD AREA
CVTSPACE EQU   64                  OFFSET INTO COMMON WORK AREA FOR LST
ATTNBIT  EQU   B'01000000'
EQZERO   EQU   8                   COND CODE MASK FOR CC OF 0
NOTONES  EQU   14                  COND. CODE MASK FOR CC OF 0, 1, OR 2
         SPACE
MAXPLEN  EQU   16                  LENGTH LIMIT FOR P,Z,L TYPES
POUTMAX  EQU   32                  MAX OUTPUT LNTH FOR P TYPE
ZOUTMAX  EQU   17                  MAX OUTPUT LNTH FOR Z TYPE
LOUTMAX  EQU   32                  MAX OUTPUT LNTH FOR L TYPE
MAXFLEN  EQU   8                   LENGTH LIMIT FOR F,E,H,D TYPES
FOUTMAX  EQU   20                  MAX OUTPUT LNTH FOR F,H TYPES
EOUTMAX  EQU   23                  MAX OUTPUT LNTH FOR E,D TYPES
MAXALEN  EQU   4                   LENGTH LIMIT FOR A,Q,V TYPE
AOUTMAX  EQU   11                  MAX OUTPUT LNTH FOR A,V,Q TYPES
MAXYLEN  EQU   2                   LENGTH LIMIT FOR Y,S TYPES
YOUTMAX  EQU   6                   MAX OUTPUT LNTH FOR Y TYPE
SOUTMAX  EQU   8                   MAX OUTPUT LNTH FOR S TYPE
MAXGENR  EQU   15                  MAXIMUM GENERAL REGISTER NUMBER
TWENTY   EQU   20                  NUMBER FOR COMPARE
MAXFPR   EQU   6                   MAXIMUM FLOATING PT REG NUMBER
ELEVEN   EQU   11                  GENERAL EQUATE FOR 11
BADESTAE EQU   24                  RTN CODE IF BAD ESTAE
M0019    EQU   19                  NUMBER OF ERROR MESSAGE
M0020    EQU   20                  NUMBER OF ERROR MESSAGE
M0021    EQU   21                  NUMBER OF ERROR MESSAGE
         SPACE 2
*  EQUATES FOR INTERNAL ASSEMBLER-TYPE-CODES.
         SPACE
CHARCODE EQU   X'00'               TYPE ATTRIBUTE =CHAR
HEXCODE  EQU   X'04'                ''     ''     =HEXADECIMAL
BINCODE  EQU   X'08'                ''     ''     =BINARY
ICODE    EQU   X'0C'                ''     ''     =INSTRUCTION
FCODE    EQU   X'10'                ''     ''     =FIXED PT, FULLWORD
HCODE    EQU   X'14'                ''     ''       ''   '', HALFWORD
ECODE    EQU   X'18'                ''     ''     =FLT PT, FULLWORD
DCODE    EQU   X'1C'                ''     ''      ''  '', DBL WORD
AQCODE   EQU   X'20'                ''     ''     =A AND Q ADDR CONST
YCODE    EQU   X'24'                ''     ''     =Y ADDR CONST
SCODE    EQU   X'28'                ''     ''     =S ADDR CONST
VCODE    EQU   X'2C'                ''     ''     =V ADDR CONST
PACKCODE EQU   X'30'                ''     ''     =PACKED DECIMAL
ZONECODE EQU   X'34'                ''     ''     =ZONED DECIMAL
LCODE    EQU   X'38'                ''     ''     =FLT PT, EXTENDED
         SPACE
         TITLE 'IKJEGLSA, ''LIST'', INITIALIZATION SECTION.'
***********************************************************************
*                                                                     *
*  PROGRAM BEGINS WITH STANDARD LINKAGE CONVENTIONS.                  *
*                                                                     *
***********************************************************************
         SPACE
LIST     SAVE  (14,12),,*
         LR    R12,R15             R12=BASE REG FOR PROG ADDRESSABILITY
         USING LIST,R12
         USING TCOMTAB,R9          COMMUNICATION TABLE ADDRESSABILITY.
         L     R4,REGSAVE2         R4=NEXT SAVE AREA
         ST    R4,FOREPTR(R13)     FOREWARD CHAIN SAVE AREAS.
         ST    R13,BACKPTR(R4)     BACKWARD CHAIN SAVE AREAS.
         LR    R13,R4              R13=NEXT REGSAVE AREA ADDR.
         SPACE 1
         L     R8,LSTPDEPT(R1)     GET PTR TO CURRENT ADDRESS PDE
         L     R10,LSTWRKPT(R1)    GET BASE ADDR FOR LSTWORK DSECT
         USING IKJPARMA,R8         ADDRESSABILITY FOR ADDR PDE DSECT
         USING LSTWORK,R10
         SPACE
*
*        ISSUE STAE MACRO
*
         NI    TSTFLGS2,HEXFF-TSTXCTL  TURN OFF XCTL IN PROGRESS SW
         LA    R1,STAELIST         PTR TO LIST FORM MACRO
         L     R2,TSTSTAE          PTR TO TEST STAE MODULE
         STM   R10,R12,R10OFF(R13)     SAVE BASE PTR
         ESTAE (R2),CT,PARAM=IKJEGSPL,RECORD=YES,XCTL=NO,MF=(E,(R1))
         SPACE
         LTR   R15,R15             TEST RETURN CODE
SMTSTAE  DS    0H                  SMT TEST LABEL FOR STAE MACRO
         BZ    STAEOK              CONTINUE IF ZERO
         STC   R15,TSTESTRC        SAVE RTN CODE FOR MAINLINE
         LA    R15,BADESTAE        PREPARE TO RETURN BAD ESTAE RTN CODE
         ST    R15,LSTRETCD        SAVE FOR EXIT
         B     LSTMN90             BRANCH TO EXIT
         SPACE
STAEOK   DS    0H
         SPACE
***********************************************************************
*                                                                     *
*  BEGINNING OF REPEAT SECTION.  THE ROUTINE BELOW IS RE-ENTERED IF   *
*  A LIST OF ADDRESSES HAS BEEN GIVEN.                                *
*                                                                     *
***********************************************************************
LSTMN04  DS    0H
         L     R2,LMATTR           GET LENGTH AND MULTIPLICITY ATTR'S
         ST    R2,A1LMATTR             AND SET ADDRESS 1 ATTRIBUTES.
         SPACE
         TM    PDE2FLG3,AFLG       WAS A SECOND ADDRESS GIVEN
         L     R15,PDEUSER         GET DATA ADDR OR SI PTR
         BO    LSTMN05             IF YES, BRANCH
         TM    PDE2FLG2,CTNAMFLG   WAS 2ND ADDRESS A CSECT NAME
         BNO   LSTMN06             BRANCH IF NO 2ND ADDRESS
LSTMN05  DS    0H
         OI    COMFLGS,TWOADDRS    SET FLAG TO INDICATE ADDRESS RANGE
LSTMN06  DS    0H
         LTR   R15,R15             IF R15 NEG, R15 POINTS TO SYMINFO
         BM    SYM1                IF SYMBOLIC, BRANCH
LSTMN07  DS    0H
         LA    R15,ZERO(R15)       ZERO OUT THE PDE WRITE BIT
         ST    R15,A1              SAVE ADDR OF CURRENT INPUT
         TM    COMFLGS,TWOADDRS    WERE TWO ADDRESSESS SPECIFIED
         BZ    ONLYONE             IF ONLY ONE ADDR, BRANCH
         L     R15,PDE2USER        GET SECOND ADDR OR SI PTR
         LTR   R15,R15             IF R15 NEG, R15 POINTS TO SYMINFO
         BNM   ONLYONE             IF ADDR2 IS SYMBOLIC, BRANCH
         L     R15,SIDATAPT(R15)   PICK UP INPUT ADDR FROM SI BLOCK
ONLYONE  DS    0H
         LA    R15,ZERO(R15)       ZERO OUT THE PDE WRITE BIT
         ST    R15,A2              SET A2 TO CURRENT SECOND ADDR
         LA    R15,HOLDAREA        MAKE A PTR TO DATA HOLDING AREA
         ST    R15,VPDEPT          SET UP VALUE PDE FOR CONVERT
         SPACE
*  NEXT TEST WHETHER ADDR IF REG TYPE
         SPACE
         TM    PDEFLG4,GENR+LFPR+SFPR  IS ADDRESS TYPE REGISTER
         BZ    NOTREG              IF NOT, BRANCH
         NC    PDEINDCT,PDEINDCT   IF REG, IS IT INDIRECT
         BZ    LSTREG              IF REG IS NOT INDIRECTED, BRANCH
         SPACE
*  NEXT TEST WHETHER ADDRESS IS RELATIVE
         SPACE
NOTREG   DS    0H
         TM    PDEFLG4,CTONLY      IS ADDRESS A CSECT NAME
         BO    LSTMN09             IF CSECT NAME, BRANCH
         TM    PDEFLG4,RELADDR     IS ADDRESS TYPE RELATIVE
         BZ    LSTMN10             IF NOT RELATIVE, BRANCH
         NC    PDEINDCT,PDEINDCT   IF RELATIVE, IS IT INDIRECTED
         BNZ   LSTMN10             IF INDIRECTED, BRANCH
         TM    PDEEXPTR,HEXFF      IF RELATIVE, IS IT AN EXPRESSION
         BNO   LSTMN10             IF START OF AN EXPRESSION, BRANCH
         OI    A1FLG,A1REL         TURN ON ADDRESS IS RELATIVE FLAG
         TM    PDEFLG2,CTNAMFLG    IS RELATIVE ADDR QUALIFIED
         BNO   LSTMN14             IF NOT QUALIFIED, BRANCH
         SPACE
***********************************************************************
*                                                                     *
*  IF THE ADDRESS IS A QUALIFIED RELATIVE, CALCULATE THE BASE FOR     *
*   RELATIVES BY CONVERTING THE RELATIVE OFFSET TO BINARY AND         *
*    SUBTRACTING IT FROM THE RESOLVED CURRENT ADDRESS. THIS BASE      *
*     ADDRESS IS KEPT IN 'PPTEMP' FOR USE BY IKJEGCVT.                *
*                                                                     *
***********************************************************************
         XC    HOLDAREA(APL),HOLDAREA  CLEAR AN AREA FOR AN ADDR PDE
         L     R2,PDEUSER          GET BINARY START ADDRESS
         LA    R2,ZERO(R2)         ZERO OUT HIGH ORDER BIT
         SPACE
*  NEXT MOVE THE ADDRESS POINTER AND THE LENGTH TO THE NEW ADDR PDE.
         SPACE
         MVC   HOLDAREA+PDEADRPT-IKJPARMA(PDERSV3-PDEADRPT),PDEADRPT
         MVI   HOLDAREA+PDEEXPTR-IKJPARMA,HEXFF  INDICATE NOT INDIRECT
         SPACE
*  THE ADDRESS TYPE FIELD IS ZERO WHICH IS THE CODE FOR ABSOLUTE.
         SPACE
         LA    R1,HOLDAREA         SET UP A POINTER TO NEW PDE.
         L     R15,TSTCONVT        GET ADDRESS OF CONVERT ROUTINE
         SR    R0,R0               MAKE REG 0, ZERO FOR CONVERT TO BIN
         LCR   R1,R1               MAKE REG 1 NEGATIVE FOR ADDR CONVERT
         BALR  R14,R15             GO CONVERT RELATIVE OFFSET TO BINARY
         LTR   R15,R15             IS THE RETURN CODE ZERO
         L     R1,HOLDAREA+PDEUSER-IKJPARMA  GET CONVERTED DATA
         LA    R1,ZERO(R1)         ZERO OUT HIGH ORDER BIT
         BNZ   LSTCVTRC            IF RC WAS NOT 0, BRANCH
         SR    R2,R1               SUBTRACT OFFSET FROM ADDRESS
         ST    R2,PPTEMP           SET UP DIVVERENCE AS BASE FOR RELS
         B     LSTMN14             BRANCH AROUND SET UP FOR ABSOLUTE
         SPACE
LSTMN09  DS    0H
         OI    A1FLG,A1SYM         TURN ON ADDR IS SYMBOLIC FLAG
LSTMN10  DS    0H
         XC    APDE(APL),APDE      CLEAR ADDRESS PDE,
         OI    APDE+(PDEFLG3-IKJPARMA),AFLG     SET FLAG, ADDR PRESENT
         OI    APDE+(PDEFLG4-IKJPARMA),ABSADDR  SET FLAG FOR ABSOLUTE
LSTMN14  DS    0H
         SPACE
*  NOW PICK UP TYPE FIELD AND USE AS INDEX INTO BRANCH TABLE.
         SR    R15,R15             CLEAR REG
         IC    R15,A1TYPE              PICK UP TYPE CODE
         B     TYPEBTBL(R15)               AND BRANCH INTO BRANCH TABLE
         SPACE
TYPEBTBL DS    0H
         B     LSTCHAR             CODE X'00' FOR CHAR
         B     LSTHEX              CODE X'04' FOR HEXADECIMAL
         B     LSTBIN              CODE X'08' FOR BINARY
         B     LSTINSTR            CODE X'0C' INSTRUCTION FORMAT
         B     FCON                CODE X'10' FOR FULLWORD FIXED PT
         B     HCON                CODE X'14' FOR HALFWORD FIXED PT
         B     ECON                CODE X'18' FOR SHORT FLT PT
         B     DCON                CODE X'1C' FOR LONG FLT PT
         B     ACON                CODE X'20' FOR A AND Q ADDR CNSTNTS
         B     YCON                CODE X'24' FOR Y ADDR CONSTANTS
         B     SCON                CODE X'28' FOR S ADDR CONSTANTS
         B     ACON                CODE X'2C' FOR V ADDR CONSTANTS
         B     PACKED              CODE X'30' FOR PACKED DECIMAL
         B     ZONED               CODE X'34' FOR ZONED DECIMAL
         B     LCON                CODE X'38' FOR EXTENDED FLT PT
         TITLE 'IKJEGLSA, ''LIST'', XCTL FOR REG ADDR OR HEX FORMAT'
*  IF FORMAT TYPE IS HEX (X), OR, IF THE ADDRESS TYPE IS REG, XCTL TO *
*  IKJEGLST WITH THE 'PCHLSTVL' SW IN 'TCOMTAB(TSTFLGS1)' SET TO 1    *
*  TO SHOW ENTRY FROM IKJEGLSA
         SPACE
LSTHEX   DS    0H
LSTREG   DS    0H
         SPACE
*        THE FOLLOWING XCTL IS EXECUTED TO OBTAIN LST
         SPACE 2
NOBLDL   DS    0H
         L     R13,BACKPTR(R13)    PICK UP ADDR OF CALLERS SAVE AREA
         LA    R15,LXCTL           SET UP PTR TO LIST FORM OF XCTL MAC
         LA    R1,LXCTL1           SET UP PTR TO LIST XCTL PARM LIST
         ST    R8,LSTPDEPT(R1)     PASS PTR TO CUR ADDR PDE
         ST    R10,LSTWRKPT(R1)    PASS BASE ADDR OF LSTWORK DSECT
         OI    TSTFLGS1,PCHLSTVL   INDICATE CALL IS FROM IKJEGLSA
         OI    TSTFLGS2,TSTXCTL    INDICATE XCTL WITHIN LIST SUB-CMD
         SPACE
         XCTL  (2,12),EP=IKJEGLST,SF=(E,(15))
         SPACE
SMTXCTL  DS    0H                  SMT TEST LABEL FOR XCTL MAC
         TITLE 'IKJEGLSA, ''LIST'', WRAPUP AND NON-ZERO RETURN CODES'
***********************************************************************
*                                                                     *
*  COMPLETION ROUTINE, TESTS FOR ADDITIONAL ADDRESSES TO LIST AND     *
*  SETS A 0 RETURN CODE. WHEN ALL ADDRESSES HAVE BEEN PROCESSED,      *
*  THE ROUTINE RETURNS TO THE CALLER.                                 *
*                                                                     *
***********************************************************************
         SPACE
LSTCC0   DS    0H
         TM    COMFLGS,OUTCORE     WAS THERE AN OUT OF CORE REQUEST
         BZ    LSTOK               BRANCH IF NOT
         BAL   R7,LSTOUT           GO PUT OUT MESSAGE IF SO
LSTOK    DS    0H
         TM    PDE2CHAI,HEXFF      IS THERE ANOTHER ADDRESS PDE
         BNO   MORE                IF YES, BRANCH
LSTMN90  DS    0H
*  TURN OFF ALL SWITCH'S WHICH MAY HAVE BEEN USED.
         NI    TSTFLGS1,HEXFF-TSTPRINT-TSTFIRST-PCHLSTVL-RANGESW
         ESTAE 0,OV                REMOVE ESTAE
         L     R15,LSTRETCD        PICK UP RETURN CODE
         L     R13,BACKPTR(R13)    GET ADDR OF PREVIOUS SAVE AREA.
         NI    TSTFLGS4,HEXFF-TSTRERTN TURN OFF RETRY IN PROCESS IF ON
         RETURN (14,12),RC=(15)    RETURN TO CALLER
         SPACE
MORE     DS    0H
         L     R6,OUTBUF           GET ADDR OF OUTPUT BUFFER
         ST    R6,DATAPT           SET UP THE IO PARM LIST
         BAL   R7,LSTIO            GO TO IO RTN TO VERTICAL SPACE 1
         SPACE
         XC    LSTRPT(RPTSIZE),LSTRPT  CLEAR ADDR PORTION OF WORK AREA
         L     R8,PDE2CHAI         GET ADDR OF NEXT PDE FROM CHAIN PTR
         IC    R2,TYPESAVE         GET TYPE CODE OR DEFAULT TYPE CODE
         STC   R2,A1TYPE           SET FORMAT TYPE (EXCEPT FOR SYMBOLS)
         B     LSTMN04             GO BACK AND PROCESS NEXT ADDR
         SPACE
LSTCC16  DS    0H
         LA    R15,SIXTEEN         R15=16
         ST    R15,LSTRETCD        RC=16
         B     LSTMN90             GO CLEAN UP AND RETURN
         SPACE
LSTCVTRC DS    0H
         CH    R15,H16             IS RC=16
         BE    LSTCC16             IF EQUAL, ATTN, BRANCH
         B     LSTCC0              OTHERWISE, GO CHECK FOR MORE ADDRS
         EJECT
***********************************************************************
*                                                                     *
*  SYMBOLIC ADDRESS SETUP ROUTINE. THIS ROUTINE SETS UP THE A1 FIELD  *
*  AND FILLS IN ANY ATTRIBUTES NOT OVER-RIDDEN BY THE USER.           *
*                                                                     *
***********************************************************************
SYM1     DS    0H
         TM    LSTFLGS,TYPEFLG     WAS A TYPE GIVEN BY THE USER
         BO    HAVETYPE            IF GIVEN, IGNORE ATTRS OF SYMBOL
         SR    R2,R2               CLEAR A REG,
         IC    R2,SITYPE(R15)          PICK UP THE TYPE,
         STC   R2,A1TYPE                   AND MAKE IT THE TYPE FOR A1
HAVETYPE DS    0H
*        TM    LSTFLGS,LNTHFLG     WAS LNTH ATTR GIVEN BY USER
*        BO    SYM1L               IF GIVEN, IGNORE ATTRS OF SYMBOL
*        LH    R2,SILEN(R15)       PICK UP SYMS LENGTH ATTR
*        STH   R2,A1L              ESTABLISH SYMS LNTH FOR THIS DATA
*YM1L    DS    0H
         TM    LSTFLGS,MULTIFLG    WAS MULTIPLICITY ATTR GIVEN BY USER
         BO    SYM1M               IF GIVEN, IGNORE ATTRS OF SYMBOL
         LH    R2,SIMUL(R15)       PICK UP SYMS MULTIPLICITY FACTOR
         STH   R2,A1M              EST. SYMS MULTI FOR THIS DATA
SYM1M    DS    0H
         L     R15,SIDATAPT(R15)   GET PTR TO INPUT FROM SYMINFO BLOCK
         OI    A1FLG,A1SYM         SET FLAG TO INDICATE ADDR SYMBOLIC
         B     LSTMN07             RETURN TO MAINLINE SETUP ROUTINE
         TITLE 'IKJEGLSA, ''LIST'', CHARACTER FORMATTING ROUTINE'
***********************************************************************
*                                                                     *
*  CHARACTER FORMATTING ROUTINE.                                      *
*                                                                     *
***********************************************************************
         SPACE
LSTCHAR  DS    0H
         TM    COMFLGS,TWOADDRS    TEST FOR 1 OR 2 ADDRESSES
         BO    LSTC20              IF TWO, BRANCH
         SR    R0,R0               SET UP A CONSTANT OF 0
         CH    R0,A1M              WAS MULTIPLICITY GIVEN
         BNE   LSTC04              IF GIVEN, BRANCH
         MVI   A1M+H2ND,ONE        DEFAULT MULTIPLICITY TO ONE
LSTC04   DS    0H
         CH    R0,A1L              WAS A LENGTH GIVEN
         BNE   LSTC06              IF GIVEN, BRANCH
         MVI   A1L+H2ND,ONE        DEFAULT LENGTH TO ONE
         SPACE
LSTC06   DS    0H
         BAL   R14,LSTLMTCK        GO CHECK UPPER ADDR OF THIS REQUEST
         BAL   R14,ADDRCHK         GO CHECK VALIDITY 2ND ADDR
         LTR   R15,R15             HAS THE MULTIPLICITY BECOME ZERO
         BNZ   LSTCC0              IF ZERO, BRANCH
         LH    R1,A1L              GET LENGTH GIVEN BY USER
         CH    R1,H32              COMPARE IT TO MAX-CHARS/LINE
         BH    LSTC24              IF GREATER THAN MAX, BRANCH
LSTC08   DS    0H
         XC    REMAIN,REMAIN       SET REMAINDER TO 0
         LH    R4,A1M              SET CONTROL TO MULTIPLICITY
LSTC10   DS    0H
         STH   R1,VPDEL            PUT LENGTH IN VALUE PDE AND
         STH   R1,A1L                  IN LENGTH FIELD.
         TM    A1FLG,A1SYM         TEST ADDRESS TYPE OF ADDR 1.
         BZ    LSTC12              IF TYPE IS ABSOLUTE, BRANCH
         BO    LSTC40              IF TYPE IS SYMBOLIC, BRANCH
         SPACE
*  SETUP ROUTINE FOR RELATIVE TYPE ADDRESSES
         SPACE
         MVC   APDE(APL),IKJPARMA  MOVE ORIGINAL PDE TO WORK AREA
         SPACE
LSTC12   DS    0H
         LA    R2,A1               SET UP PTR TO CURRENT ADDRESS FLD
         ST    R2,APDE+(PDEADRPT-IKJPARMA) STORE IT IN THE ADDR PDE
         B     LSTC50              GO TO CHAR PROCESS ROUTINE
         SPACE 3
*  SETUP ROUTINE FOR TWO ADDRESSES
         SPACE
LSTC20   DS    0H
         L     R1,A2               R3=ADDR2
         S     R1,A1               ADDR2-ADDR1=LNTH EXCLUDING END BYTE
         LA    R1,ONE(R1)          ADD 1 TO INCLUDE BYTE AT END
         STH   R1,A1L              SET LENGTH TO A2-A1+1
         MVI   A1M+H2ND,ONE        SET MULTIPLICITY TO ONE
         CH    R1,H32              IS COMPUTED LNTH GT MAX-CHARS/LINE
         BNH   LSTC08              IF NOT GREATER THAN MAX, BRANCH
         B     LSTC26              BRANCH TO ROUTINE FOR MULTIPLE LINES
         SPACE
LSTC24   DS    0H
         OI    COMFLGS,ARTIMSW     TURN ON ARTIFICIAL MULTIPLICITY SW
LSTC26   DS    0H
         LA    R2,CFLDMASK         MASK TO ISOLATE REMAINDER
         LH    R4,A1L              R4=LENGTH TO BE LISTED
         NR    R2,R4               R2=REMAINDER OF LNTH/CHARLEN
         SRL   R4,FIVE             DIVIDE LNTH BY 32
         STH   R2,REMAIN           SAVE REMAINDER
         STH   R2,REMAIN2          SAVE A COPY OF THE REMAINDER
         STH   R4,ARTIFMUL         SAVE CONTROL, (QUOTIENT). R4=CONTROL
         LA    R1,CHARLEN          SET UP MAX-CHARS/LINE AS LENGTH
         B     LSTC10              RETURN TO COMMON SETUP RTN
         SPACE 2
*  SETUP ROUTINE FOR SYMBOLIC ADDRESSES
         SPACE
LSTC40   DS    0H
         BAL   R7,LSTSYM           GO MOVE SYMBOL TO BUF
         L     R3,CONAREA          SET UP PTR TO CONVERT OUTPUT AREA
         CH    R4,HONE             IS CONTROL = 1
         BH    LSTC42              IF GREATER THAN 1 BRANCH
         SR    R15,R15             MAKE A ZERO CONSTANT
         CH    R15,ARTIFMUL        IS THERE AN ARTIFICIAL MULTIPLICITY
         BNE   LSTC42              IF YES, BRANCH
         CH    R15,REMAIN          IS THERE A REMAINDER
         BNE   LSTC42              IF YES, BRANCH
         LH    R15,A1L             GET LENGTH OF OUTPUT FIELD
         LA    R15,SP2(R6,R15)     CALCULATE BUF PTR AT END OF DATA
         C     R15,ENDOBUF         WILL ADDR + DATA FIT IN THE BUFFER
         BNH   LSTC58              IF DATA WILL FIT, BRANCH
         SPACE
LSTC42   DS    0H
         BAL   R7,LSTIO            GO OUTPUT ADDR ON A SEPARATE LINE
         B     LSTC54              GO OUTPUT REL ADDRS AND DATA.
         SPACE
***********************************************************************
*                                                                     *
*  PROCESS LOOP OF LSTCHAR SUBROUTINE. CALLS 'LSTBPT' TO REMOVE ANY   *
*  BREAKPOINTS FROM THE INPUT DATA, THEN CALLS IKJEGCVT TO CONVERT    *
*  THE DATA ADDRESS TO PRINTABLE, AND THEN TRANSLATES UNPRINTABLES TO *
*  PERIODS. WHER BUF IS READY, LSTIO IS CALLED TO OUTPUT A LINE OF    *
*  DATA. IF THE ADDRESS WAS SYMBOLIC, THE ROUTINE MAY BE ENTERED AT   *
*  LSTC54 OR LSTC58, NORMAL ENTRY IS TO LSTC50.                       *
*  AT THIS POINT, THE ADDRESS IS IN THE BUFFER AND THE DATA MUST BE   *
*  MOVE TO THE BUFFER AND HAVE THE UNPRINTABLES TRANSLATED TO PERIODS *
*                                                                     *
***********************************************************************
LSTC50   DS    0H
         L     R6,OUTBUF           GET PTR TO OUTPUT BUFFER
         LA    R6,DATAOFF(R6)      INCRE BUF PTR PAST LL00 FIELD
LSTC52   DS    0H
         BAL   R14,LSTBPT          GO CLEAR BREAKPOINT SVC'S FROM DATA
LSTC54   DS    0H
         L     R15,TSTCONVT        ADDR OF CONVERT ROUTINE
         LA    R1,APDE             R1=ADDR OF ADDR PDE
         SR    R0,R0               R0=0
         LCR   R1,R1               MAKE NEGATIVE FOR ADDR CONVERSION
         BCTR  R0,NULL             R0 NEGATVE FOR CONVERT TO PRINTABLE
         BALR  R14,R15             GO CONVERT AN ADDR TO PRINTABLE
         LTR   R15,R15             TEST RETURN CODE
         BNZ   LSTCVTRC            IF RC IS NON-ZERO, GO ANALYZE.
         L     R1,CONAREA          ADDR OF CONVERT OUTPUT AREA
         MVC   ZERO(ADDRLEN,R6),CONDATA(R1)    MOVE CONVERTED ADDR
         LA    R6,ADDRLEN(R6)      INCRE BUF PTR PAST ADDR
LSTC58   DS    0H
         LH    R1,A1L              GET PERMANENT DATA LENGTH
         LH    R2,VPDEL            PICK UP LENGTH OF THIS DATA FIELD
         LA    R1,SP2(R1,R6)       CALCULATE POTENTIAL END OF LINE ADDR
         C     R1,ENDOBUF          WILL DATA + ADDR FIT IN THE BUFFER
         BNH   LSTC64              IF ADDR+DATA WILL FIT, BRANCH
         BAL   R7,LSTIO            OTHERWISE, GO OUTPUT ADDR ON SEP LN
LSTC64   DS    0H
         MVC   TWO*SP1(CHARLEN,R6),HOLDAREA    MOVE MAX POSSIBLE BYTES
         TR    TWO*SP1(CHARLEN,R6),TRTABLE     TRANSLATE TO PRINTABLE
         LA    R6,TWO*SP1(R2,R6)   INCRE BUF PTR PAST DATA
         BAL   R7,LSTIO            GO OUTPUT THE DATA
         A     R2,VPDEPT           CALCULATE NEW INPUT ADDR
         ST    R2,VPDEPT           SET NEW INPUT ADDRESS
         BCT   R4,LSTC52           TEST AND DECREMTN CNTRL
         CH    R4,REMAIN           IS REMAINDER NON-ZERO
         BE    LSTC70              IF NOT, BRANCH
         LH    R1,REMAIN           R1=REMAINDER LENGTH
         STH   R1,VPDEL            SET VALUE PDE FOR REMAINDED LNTH
         STH   R4,REMAIN           SET REMAINDER TO ZERO
         LA    R4,ONE              SET CONTROL TO 1 FIELD.
         B     LSTC52              GO BACK AND PROCESS REMAINDER
         SPACE
LSTC70   DS    0H
         TM    COMFLGS,ARTIMSW     WAS CONTROL AN ARTIFICIAL MLTPLCTY
         BNO   LSTCC0              IF NOT, RETURN TO LIST MAINLINE
         LH    R15,A1M             R15=TRUE MULTIPLICITY
         BCT   R15,LSTC74          TEST AND DECRE MULTIPLICITY
         B     LSTCC0              IF NO MORE TO DO, RETURN TO MAINLINE
LSTC74   DS    0H
         STH   R15,A1M             SAVE DECREMENTED VALUE
         LH    R1,A1L              R1=LENGTH OF AN OUTPUT FIELD.
         LH    R2,REMAIN2          PICK UP REMAINDER
         LH    R4,ARTIFMUL         RESET CONTROL TO ARTIFICIAL MLTPLCTY
         STH   R1,VPDEL            RESET LENGTH OF OUTPUT FIELD
         STH   R2,REMAIN           RESET REMAINDER
         B     LSTC52              GO PROCESS NEXT FIELD
         TITLE 'IKJEGLSA, ''LIST'', FORMAT INITIALIZATION'
***********************************************************************
*                                                                     *
*  THE FOLLOWING ROUTINES SET UP LIMITS AND DEFAULT VALUES FOR THEIR  *
*  RESPECTIVE ASSEMBLER TYPES.  AFTER SETUP, CONTROL IS PASSED TO     *
*  A COMMON ROUTINE TO CHECK VALUES AND SET ANY NECESSARY DEFAULTS.   *
*                                                                     *
***********************************************************************
         SPACE
PACKED   DS    0H
         LA    R0,MAXPLEN          R0= LNTH LIMIT
         SR    R1,R1               R1=SHIFT VALUE TO DIVIDE BY 1
         LA    R2,ONE              R2=DEFAULT LNTH
         LA    R3,POUTMAX          R3=LNTH MAX FOR OUTPUT
         B     LSTGEN00            GO TO COMMAN ROUTINE
         SPACE
ZONED    DS    0H
         LA    R0,MAXPLEN          SAME LIMIT AS PACKED
         SR    R1,R1               R1=SHIFT VALUE TO DIVIDE BY 1
         LA    R2,ONE              DEFAULT LNTH
         LA    R3,ZOUTMAX          MAX FLD SIZE FOR Z OUTPUT
         B     LSTGEN00            GO TO COMMON ROUTINE
         SPACE
LCON     DS    0H
         LA    R15,HEXCODE         CONVERT TO HEX CHAR FOR PRINTING
         LA    R0,MAXPLEN          SAME LIMIT AS PACKED
         LA    R1,FOUR             R1=SHIFT VALUE TO DIVIDE BY 16
         LA    R2,SIXTEEN          DEFAULT LENGTH
         LA    R3,LOUTMAX          MAX FLD SIZE FOR L OUTPUT
         B     LSTGEN00            GO TO COMMON ROUTINE
         SPACE
FCON     DS    0H
         LA    R0,MAXFLEN          R0=LENGTH LIMIT
         LA    R1,TWO              R1=SHIFT VALUE TO DIVIDE BY 4
         LA    R2,FOUR             DEFAULT LENGTH
         LA    R3,FOUTMAX          MAX OUTPUT LNTH
         B     LSTGEN00            GO TO COMMON ROUTINE
         SPACE
ECON     DS    0H
         LA    R0,MAXFLEN          SAME LIMIT AS F TYPE
         LA    R1,TWO              R1=SHIFT VALUE TO DIVDIE BY 4
         LA    R2,FOUR             DEFAUT LENGTH
         LA    R3,EOUTMAX          MAX OUTPUT FIELD SIZE
         B     LSTGEN00            GO TO COMMON ROUTINE
         SPACE
HCON     DS    0H
         LA    R0,MAXFLEN          SAME LIMIT AS F TYPE
         LA    R1,ONE              R1=SHIFT VALUE TO DIVIDE BY 2
         LA    R2,TWO              DEFAULT LENGTH
         LA    R3,FOUTMAX          SAME LIMIT AS F TYPE
         B     LSTGEN00            GO TO COMMON ROUTINE
         SPACE
DCON     DS    0H
         LA    R0,MAXFLEN          SAME LIMIT AS F TYPE
         LA    R1,THREE            R1=SHIFT VALUE TO DIVIDE BY 8
         LA    R2,EIGHT            DEFAULT LENGTH
         LA    R3,EOUTMAX          SAME LIMIT AS E TYPE
         B     LSTGEN00            GO TO COMMON ROUTINE
         SPACE
ACON     DS    0H                  ALSO Q AND V FORMATS
         LA    R0,MAXALEN          R0=LNTH LIMIT
         LA    R1,TWO              R1=SHIFT VALUE TO DIVIDE BY 4
         LA    R2,FOUR             DEFAULT LENGTH
         LA    R3,AOUTMAX          MAX OUTPUT FLD SIZE
         B     LSTGEN00            GO TO COMMON ROUTINE
         SPACE
YCON     DS    0H
         LA    R0,MAXYLEN          LENGTH LIMIT
         LA    R1,ONE              R1=SHIFT VALUE TO DIVIDE BY 2
         LA    R2,TWO              DEFAULT LENGTH
         LA    R3,YOUTMAX          MAX OUTPUT FLD SIZE
         B     LSTGEN00            GO TO COMMON ROUTINE
         SPACE
SCON     DS    0H
         LA    R0,MAXYLEN          SAME LIMIT AS Y TYPE BUT MUST BE EQ
         TM    LSTFLGS,LNTHFLG     DID USER SPECIFY LENGTH
         BNO   SCON04              IF NOT, USE DEFAULT LENGTH
         CH    R0,A1L              IS LNTH EXACTLY TWO
         BNE   LSTSERR             IF LENGTH NOT 2, BRANCH
SCON04   DS    0H
         LA    R1,ONE              R1=SHIFT VALUE TO DIVIDE BY TWO
         LA    R2,TWO              DEFAULT LENGTH
         LA    R3,SOUTMAX          MAX OUTPUT FIELD SIZE
         B     LSTGEN00            GO TO COMMON ROUTINE
LSTSERR  DS    0H
         L     R7,OUTBUF           PICK UP ADDRESS FOR MSG INSERT
         MVC   ZERO(TWO,R7),LENFIVE   MOVE IN MESSAGE INSERT LENGTH
         MVI   FOUR(R7),C'S'       MOVE INTO INSERT INSERT TEXT
         LA    R2,M0019            PUT MESSAGE TO ISSUE NUMBER IN REG
         LA    R3,ZERO             INDICATE - NO SECOND LEVEL
         B     MSGOUT              GO ISSUE MESSAGE
         TITLE 'IKJEGLSA, ''LIST'', GENERAL FORMATTING ROUTINE'
***********************************************************************
*                                                                     *
*  GENERAL ROUTINE FOR LISTING DATA IN P, S, AQV, H, F, E, D, AND L   *
*  FORMATS. THE ROUTINE IS ENTERED FROM THE SETUP ROUTINE FOR THE     *
*  REGUESTED TYPE. AT ENTRY THE FOLLOWING REGS MUST BE SET.           *
*        R0=MAXIMUM LENGTH FOR THE PARTICULAR CONSTANT TYPE.          *
*        R1=A SHIFT VALUE FOR DIVIDING A RANGE INTO DEFAULT SIZED FLDS*
*        R2=THE DEFAULT LENGTH TO BE USED IF NONE GIVEN BY USER       *
*        R3=MAXIMUM LENGTH FOR OUTPUT IN THE GIVEN DATA TYPE.         *
*        R15=HEX CODE FOR REQUESTED TYPE                              *
*                                                                     *
***********************************************************************
         SPACE
LSTGEN00 DS    0H
         STC   R15,VPDET           TYPE CODE TO PDE FOR CONVERT
         TM    COMFLGS,TWOADDRS    TEST FOR ONE ON TWO ADDRS
         BO    LSTGEN20            IF TWO, BRANCH
*  SET UP FOR 1 ADDRESS
         SR    R15,R15             GET A ZERO COMPAREND
         CH    R15,A1M             WAS MULTIPLICITY GIVEN
         BNE   LSTGEN04            IF GIVEN, BRANCH
         MVI   A1M+H2ND,ONE        DEFAULT MULTIPLICITY TO ONE
LSTGEN04 DS    0H
         CH    R15,A1L             WAS LENGTH GIVEN
         BE    LSTGEN08            IF NOT, BRANCH AND USE DEFAULT LNTH
         LH    R2,A1L              PICK UP GIVEN LENGTH
LSTGEN08 DS    0H
         CR    R2,R0               TEST REQUESTED FIELD LENGTH
         STH   R2,VPDEL            LENGTH TO VALUE PDE, ANTICIPATE OK.
         BH    LSTGEN90            IF LENGTH GREATER THAN MAX, BRANCH
         STH   R2,A1L              SAVE LENGTH TO BE USED IN THIS LIST
         BAL   R14,LSTLMTCK        GO CHECK UPPER ADDR OF THIS REQUEST
         BAL   R14,ADDRCHK         GO CK VALIDITY OF 2ND ADDR
         LTR   R15,R15             WAS REMAINING MULTIPLICITY ZERO
         BNZ   LSTCC0              IF ZERO, BRANCH
         LH    R4,A1M              SET CONTROL TO MULTIPLICITY
LSTGEN10 DS    0H
         TM    A1FLG,A1SYM         WHAT IS THE ADDRESS TYPE
         BZ    LSTGEN12            IF ADDRESS IS ABSOLUTE, BRANCH
         BO    LSTGEN40            IF SYMBOLIC, BRANCH
         SPACE
*  IF THE ADDRESS TYPE IS RELATIVE, FALL THRU AND SET UP FOR RELATIVES
         SPACE
         MVC   APDE(APL),IKJPARMA  MOVE ORIGINAL PDE TO WORK AREA
LSTGEN12 DS    0H
         LA    R2,A1               GET PTR TO INPUT DATA ADDRESS
         ST    R2,APDE+(PDEADRPT-IKJPARMA) STORE IT IN THE ADDR PDE
         CLI   A1TYPE,ZONECODE     IS REQUESTED FORMAT ZONED
         BE    LSTZ50              IF ZONED, BRANCH TO SPECIAL RTN
         B     LSTGEN50            GO PROCESS DATA
         SPACE
*  SET UP FOR 2 ADDRESSES
LSTGEN20 DS    0H
         STH   R2,VPDEL            FOR ADDR RANGE, USE DEFAULT LNTH
         L     R4,A2               R4=2ND ADDRESS IN RANGE
         AR    R4,R2               INCLUDE FIELD AT 2ND ADDRESS
         C     R4,ENDADR           DOES THIS ADDR EXCEED HIGHEST ADDR
         BNH   LSTGEN24            IF NOT, BRANCH
         SR    R4,R2               EXCLUDE LAST FIELD IF OUT OF CORE
LSTGEN24 DS    0H
         S     R4,A1               CALCULATE RANGE IN BYTES
         SRA   R4,ZERO(R1)         DIVIDE RANGE BY FIELD LENGTH
         B     LSTGEN10            GO BACK TO COMMON RTN.
         SPACE
LSTGEN40 DS    0H
         BAL   R7,LSTSYM           GO MOVE SYMBOLS TO BUF
         CH    R4,HONE             TEST CONTROL FOR MORE THAN 1 FIELD
         BH    LSTGEN42            IF MORE THAN 1, BRANCH
         LA    R15,ONE(R3,R6)      R15=MAX POSSIBLE NEEDED LNTH
         C     R15,ENDOBUF         WOULD THIS BE OUT OF BUF.
         BH    LSTGEN42            IF OUT OF BUF, BRANCH
         L     R3,CONAREA          SET UP PTR TO CONVERT OUTPUT AREA
         CLI   A1TYPE,ZONECODE     IS OUTPUT FORMAT TO BE ZONED
         BE    LSTZ58              IF ZONED, BRANCH TO SPECIAL RTN
         B     LSTGEN58            OTHERWISE, DATA WILL FIT, PROCESS IT
LSTGEN42 DS    0H
         BAL   R7,LSTIO            GO OUTPUT THE SYMBOLIC ADDRESS
         CLI   A1TYPE,ZONECODE     IS OUTPUT FORMAT TO BE ZONED
         BE    LSTZ54              IF ZONED, BRANCH TO SPECIAL RTN
         B     LSTGEN54            GO PROCESS ADDRESSES AND DATA
         SPACE 2
***********************************************************************
*                                                                     *
*  MAIN PROCESS PORTION OF THE GENERAL LIST ROUTINE
*        FIRST, GO CONVERT THE ADDRESS TO PRINTABLE                   *
*  AT THIS POINT, THE ADDRESS HAS BEEN PLACED IN THE BUFFER.          *
*        NEXT, GO CONVERT THE DATA TO THE PROPER FORMAT AND MOVE IT   *
*        TO THE BUFFER.                                               *
***********************************************************************
LSTGEN50 DS    0H
         L     R6,OUTBUF           GET PTR TO THE OUTPUT BUFFER
         LA    R6,DATAOFF(R6)      INCRE BUFFER PTR PAST LL00 FIELD
LSTGEN52 DS    0H
         BAL   R14,LSTBPT          GO CLEAR BREAKPOINT SVC'S FROM DATA
LSTGEN54 DS    0H
         SR    R0,R0               R0=0
         LA    R1,APDE             R1=ADDR OF ADDRESS PDE
         L     R15,TSTCONVT        R15=ADDR OF CONVERT ROUTINE
         BCTR  R0,NULL             R0=NEGATIVE FOR CONVERT TO PRINTABLE
         LCR   R1,R1               R1=NEG TO SHW ADDRESS CONVERSION
         BALR  R14,R15             GO TO CONVERT ROUTINE
         LTR   R15,R15             TEST RETURN CODE FROM IKJEGCVT
         BNZ   LSTCVTRC            IF NON-ZERO, GO ANALYZE
         L     R3,CONAREA          ADDR OF CONVERT OUTPUT AREA
         MVC   ZERO(ADDRLEN,R6),CONDATA(R3)  MOVE CONVERTED ADDR TO BUF
         LA    R6,ADDRLEN(R6)      INCREMENT BUF PTR PAST ADDRESS
LSTGEN58 DS    0H
         L     R15,TSTCONVT        R15=ADDR OF CONVERT ROUTINE
         LA    R1,VPDE             R1=ADDR OF VALUE PDE
         BALR  R14,R15             GO CONVERT DATA TO PROPER FORMAT
         LTR   R15,R15             TEST RETURN CODE FROM IKJEGCVT
         BNZ   LSTCVTRC            IF NON-ZERO, BRANCH AND ANALYZE
         IC    R15,CONLNTH(R3)     GET LENGTH OF CONVERTED DATA
         BCTR  R15,NULL            DECREMENT LENGTH FOR MVC INSTR
         EX    R15,DATAMOVE        MOVE CONVERTED DATA TO BUF
         LA    R6,SP2+ONE(R15,R6)  INCREMENT BUF PTR PAST SPACE+DATA
         L     R15,VPDEPT          R15=PTR TO LAST DATA
         AH    R15,VPDEL           ADD LNTH OF DATA JUST PROCESSED
         ST    R15,VPDEPT          STORE UPDATE DATA PTR
         BAL   R7,LSTIO            GO OUTPUT ADDR AND 1 FIELD
         BCT   R4,LSTGEN52         IF MORE FIELDS, LOOP BACK
         B     LSTCC0              OTHERWISE, GO TO COMPLETION RTN
         SPACE
         SPACE
*  MGS FORMATTING ROUTINE FOR LSTGEN AND LST I ROUTINES.
LSTGEN90 DS    0H
         SR    R5,R5               CLEAR OUT REGISTER
         IC    R5,VPDET            PICK UP TYPE CODE FOR DATA
         SRL   R5,TWO              DIVIDE HEX TYPE CODE BY 4 FOR INDEX
         L     R4,OUTBUF           PICK UP ADDRESS TO BUILD INSERT
         MVC   ZERO(TWO,R4),LENFIVE  MOVE THE CONTROL LENGTH IN
         LA    R5,LSTTYPE(R5)      SET UP PTR TO TYPE CODE
         MVC   FOUR(TYPELEN,R4),ZERO(R5)  MOVE TYPE CODE TO INSERT
         XC    TSTIOPRM,TSTIOPRM   ZERO OUT I/O PARM LIST
         IKJEGSIO MSG,FIRST=M0019,INST11=(ADDR,(R4)),ID=LSA19,         *
               MF=(E,TSTIOPRM)     CALL I/O TO ISSUE ERROR MESSAGE
         CH    R15,H16             TEST FOR SERIOUS ERROR CONDITION
         BL    LSTCC0              IF NOT SERIOUS TRY NEXT ADDRESS
         ST    R15,LSTRETCD        SAVE RETURN CODE FOR MAINLINE
         B     LSTMN90             IF SERIOUS GO BACK TO MAINLINE
         TITLE 'IKJEGLSA, ''LIST'', ZONED DECIMAL FORMATTING ROUTINE'
***********************************************************************
*                                                                     *
*  AFTER BEING SETUP BY THE COMMON ROUTINE, CONTROL IS PASSED TO THIS *
*  ROUTINE IF THE FORMAT IS TO BE ZONED. ENTRY IS AS FOLLOWS          *
*        TO LSTZ50 FOR RELATIVE AND ABSOLUTEADDRESSES                 *
*        TO LSTZ54 FOR SYMBOLIC ADDRESSES WITH MULTIPLE OUTPUT LINES  *
*        TO LSTZ58 FOR SYMBOLIC ADDRESSES WITH ONLY ONE OUTPUT LINE   *
*                                                                     *
*  THIS ROUTINE VALIDITY CHECKS THE DATA TO ASSURE ZONED FORMAT, MOVES*
*  THE CORRECT SIGN TO THE BUFFER, THE DATA TO THE BUFFER, AND SETS   *
*  THE ZONE FIELD OF THE RIGHTMOST BYTE.                              *
*                                                                     *
***********************************************************************
         SPACE
LSTZ50   DS    0H
         L     R6,OUTBUF           GET PTR TO THE OUTPUT BUFFER
         LA    R6,DATAOFF(R6)      INCRE BUFFER PTR PAST LL00 FIELD
LSTZ52   DS    0H
         BAL   R14,LSTBPT          GO CLEAR BREAKPOINT SVC'S FROM DATA
LSTZ54   DS    0H
         SR    R0,R0               R0=0
         LA    R1,APDE             R1=ADDR OF ADDRESS PDE
         L     R15,TSTCONVT        ADDR OF CONVERT ROUTINE
         BCTR  R0,NULL             R0=-1 TO INDICATE CONVERT TO PRNTBL
         LCR   R1,R1               R1=NEG TO INDICATE ADDR CONVERSION
         BALR  R14,R15             GO TO CONVERT ROUTINE
         LTR   R15,R15             TEST RETURN CODE FROM IKJEGCVT
         BNZ   LSTCVTRC            IF NON-ZERO, GO ANALYZE
         L     R3,CONAREA          R3=ADDR OF CONVERT OUTPUT AREA
         MVC   ZERO(ADDRLEN,R6),CONDATA(R3)  MOVE ADDRESS TO BUF
         LA    R6,ADDRLEN(R6)      INCREMENT BUF PTR PAST ADDR
LSTZ58   DS    0H
         LH    R15,VPDEL           R15=DATA FIELD LENGTH
         LR    R3,R15              SAVE A COPY OF THE LENGTH
         BCTR  R15,NULL            REDUCE LENGTH BY 1 FOR SS INSTR
         L     R1,VPDEPT           R1=PTR TO DATA
         SR    R2,R2               CLEAR A REG
         IC    R2,ZERO(R15,R1)     PICK UP LAST BYTE OF DATA FIELD
         CH    R2,SIGNPAT          TEST FOR VAL ZONE
         BL    LSTZ90              IF SIGN FLD LESS THAN X'A0', BRANCH
         SRL   R2,FOUR             DISCARD RIGHT HALF OF BYTE
         IC    R2,SIGNTBL(R2)      PICK UP CORRECT SIGN
         STC   R2,SP2(R6)          PLACE SIGN IN BUFFER
         LA    R6,SP2+SIGNLEN(R6)  INCREMENT BUF PTR PAST SIGN
         AR    R15,R1              R15=ADDR OF LAST DATA BYTE IN BUF
         MVZ   ZERO(ONE,R15),VALZONE   MOVE A VALID ZONE TO SIGN BYTE
         LR    R15,R3              SET SAVED COPY OF THE DATA LENGTH
         LA    R3,ZERO(R3,R1)      INCREMENT DATA PTR TO NEXT DATA
         ST    R3,VPDEPT           SAVE UPDATED PTR
         SPACE
*  NEXT, ELIMINATE LEADING ZEROS (EXCEPT IF CONSTANT EQUALS).
         SPACE
         BCT   R15,LSTZ66          IF LNTH GREATER THAN ONE, BRANCH
LSTZ62   DS    0H
         EX    R15,ZDATAMVC        MOVE DATA TO BUF
         LA    R15,ONE(R15)        INCREMENT DATA LNTH BY ONE
LSTZ64   DS    0H
         CLI   ZERO(R6),CHAR0      CHAR MUST BE 0 OR GREATER
         BL    LSTZ90              IF LOW, BRANCH
         CLI   ZERO(R6),CHAR9      CHAR MUST BE 9 OR LESS
         BH    LSTZ90              IF GREATER THAN 9, ERROR, BRANCH
         LA    R6,ONE(R6)          INCREMENT BUF PTR TO NEXT DATA
         BCT   R15,LSTZ64          DECRE REMAINING LNTH, TEST FOR DONE
         BAL   R7,LSTIO            IF DONE, GO OUTPUT DATA
         BCT   R4,LSTZ52           TEST FOR MORE TO DO
         B     LSTCC0              GO TO COMPLETION ROUTINE
         SPACE
LSTZ66   DS    0H
         CLI   ZERO(R1),CHAR0      IS THIS CHAR A ZERO
         BNE   LSTZ62              IF NOT, BRANCH
         LA    R1,ONE(R1)          INCREMENT DATA PTR TO NEXT BYTE
         BCT   R15,LSTZ66          DECRE BYTE COUNT AND CHECK FOR DONE
         B     LSTZ62              IF ONLY ONE BYTE REMAINS, BRANCH
         SPACE
LSTZ90   DS    0H
         LA    R2,M0020            OBTAIN FIRST LEVEL MSG NUMBER
         LA    R3,ZERO             INDICATE NO SECOND LEVEL MSG
         L     R7,OUTBUF           OBTAIN POINTER TO AREA TO BUILD INST
         MVC   ZERO(TWO,R7),LENFIVE   MOVE INSERT LENGTH TO INSERT
         MVI   FOUR(R7),C'Z'       MOVE Z AS THE INSERT TEXT
         B     MSGOUT              BRANCH TO CALL I/O TO MESSAGE
         SPACE
ZDATAMVC MVC   ZERO(NULL,R6),ZERO(R1)  FOR MOVING RAW DATA TO BUFFER
         TITLE 'IKJEGLSA, ''LIST'', BINARY FORMATTING ROUTINE'
***********************************************************************
*                                                                     *
*  THE FOLLOWING SUBROUTINE LIST AREAS OF CORE IN THE BINARY OUTPUT   *
*  FORMAT. CONVERSION TO PRINTABLE IS DONE IN THIS ROUTINE.           *
***********************************************************************
LSTBIN   DS    0H
         TM    COMFLGS,TWOADDRS    TEST FOR 1 OR 2 ADDRESSES
         BO    LSTB20              IF TWO, BRANCH
         SR    R0,R0               R0=0
         CH    R0,A1M              WAS A MULTIPLICITY GIVEN
         BNE   LSTB04              IF GIVEN, BRANCH
         MVI   A1M+H2ND,ONE        DEFAULT MULTIPLICITY TO ONE
LSTB04   DS    0H
         CH    R0,A1L              WAS A LNTH GIVEN
         BNE   LSTB06              IF GIVEN, BRANCH
         MVI   A1L+H2ND,ONE        DEFAULT LENGTH TO ONE
LSTB06   DS    0H
         BAL   R14,LSTLMTCK        GO CHECK UPPER ADDR OF THIS REQUEST
         BAL   R14,ADDRCHK         GO CK VALIDITY OF 2ND ADDR
         LTR   R15,R15             IS REMAINING MULTIPLICITY ZERO
         BNZ   LSTB80              IF ZERO, BRANCH
         LH    R4,A1M              SET UP CONTROL
         LH    R5,A1L              SET UP LENGTH CTR
LSTB10   DS    0H
         TM    A1FLG,A1SYM         WAS ADDR SYMBOLIC, REL, OR ABS.
         BZ    LSTB12              IF ADDRESS IS ABSOLUTE, BRANCH
         BO    LSTB40              IF SYMBOLIC, BRANCH
         SPACE
*  IF THE ADDRESS TYPE IS RELATIVE, FALL THRU AND SET UP FOR RELATIVES
         SPACE
         MVC   APDE(APL),IKJPARMA  MOVE ORIGINAL PDE TO WORK AREA
LSTB12   DS    0H
         LA    R1,A1               GET PTR TO INPUT DATA ADDRESS
         ST    R1,APDE+(PDEADRPT-IKJPARMA) SET UP PTR IN ADDRESS PDE
         L     R6,OUTBUF           GET PTR TO THE OUTPUT BUFFER
         LA    R6,DATAOFF(R6)      INCRE BUFFER PTR PAST LL00 FIELD
LSTB52   DS    0H
         BAL   R14,LSTBPT          GO CLEAR BREAKPOINT SVC'S FROM DATA
         LA    R1,APDE             R1=ADDR OF ADDRESS PDE
         L     R15,TSTCONVT        R15=ADDR OF CONVERT ROUTINE
         SR    R0,R0               ZERO REG
         BCTR  R0,NULL             MAKE REG 0 NEG FOR CONVERT TO PRINT
         LCR   R1,R1               R1=NEG, SHOW CONVERT AN ADDRESS
         BALR  R14,R15             GO TO CONVERT ROUTINE
         LTR   R15,R15             TEST RETURN CODE FROM CONVERT
         BNZ   LSTCVTRC            IF NON-ZERO, GO ANALYZE FURTHER
         L     R3,CONAREA          R3=ADDR OF CONVERT OUTPUT AREA
         MVC   ZERO(ADDRLEN,R6),CONDATA(R3)  MOVE CONVERTED ADDR TO BUF
         LA    R6,ADDRLEN(R6)      INCRE BUF PTR PAST ADDR FIELD
LSTB58   DS    0H
         LA    R1,BFLDLEN+SP2(R6)  COMPUTE BUF PTR AFTER 1 FLD + 2 SP'S
         C     R1,ENDOBUF          WILL A DATA BYTE FIT.
         BNH   LSTB60              IF MORE DATA WILL FIT, GO PROCESS
         BAL   R7,LSTIO            IF DATA WONT FIT, GO OUTPUT BUF
         B     LSTB52              GO CONVERT ANOTHER ADDR
         SPACE
LSTB60   DS    0H
         L     R1,VPDEPT           R1=PTR TO CUR BYTE OF INPUT DATA
         LA    R15,EIGHT           SET UP LOOP CONTROL
         LA    R2,HEX80            INITIALIZE TEST MASK
         LA    R6,SP2(R6)          INCRE BUF PTR FOR 2 BLANKS
LSTB62   DS    0H
         EX    R2,BTM              TEST BIT FOR 1 OR 0
         BO    LSTB68              IF ONE, BRANCH
         MVI   ZERO(R6),CHAR0      MOVE A ZERO TO THE BUF FOR THIS BIT
LSTB64   DS    0H
         LA    R6,BDATALEN(R6)     INCRE BUF PTR PAST DATA
         SRL   R2,ONE              MOVE MASK TO TEST NEXT BIT
         BCT   R15,LSTB62          TEST FOR DONE
         LA    R1,BDATALEN(R1)     INCREMENT DATA PTR TO NEXT BYTE
         ST    R1,VPDEPT           SAVE UPDATED DATA ADDRESS
         BCT   R5,LSTB58           IF MORE BYTES TO DO,BRANCH
         BAL   R7,LSTIO            ELSE, GO OUTPUT BUF
         LH    R5,A1L              RELOAD LENGTH IN CASE MORE TO LIST
         BCT   R4,LSTB52           IF MULTIPLICITY NOT ZERO DO MORE
         B     LSTCC0              IF DONE, RETURN TO MAIN ROUTINE
LSTB68   DS    0H
         MVI   ZERO(R6),CHAR1      MOVE A ONE TO THE BUF FOR THIS BIT
         B     LSTB64              RETURN TO INCRE PTRS
BTM      TM    ZERO(R1),NULL       FOR TESTING BITS FOR 0 OR 1.
         SPACE
LSTB20   DS    0H
         L     R1,A1               GET START ADDR
         L     R5,A2               GET ENDING ADDR
         BCTR  R1,NULL             DECREMENT A1 TO GET INCLUSIVE LENGTH
         SR    R5,R1               COMPUTE LNTH, R5 IS LNTH CNTRL REG
         STH   R5,A1L              STORE LENGTH FOR LATER
         LA    R4,ONE              SET MULTIPLICITY CONTROL TO 1.
         B     LSTB10              GO SET UP ADDRESSES.
         SPACE
LSTB40   DS    0H
         BAL   R7,LSTSYM           GO INITIALIZE BUF WITH SYMBOL
         B     LSTB58              GO TO BINARY PROCESS ROUTINE
         SPACE
LSTB80   DS    0H
         LH    R5,LASTLEN          AMT OF REQUEST STILL IN CORE
         LA    R4,ONE              SET MULTIPLICITY CNTRL TO ONE
         STH   R4,A1M              SAVE MULTIPLICITY CNTRL
         STH   R5,A1L              SAVE REMAINING LENGTH
         B     LSTB10              GO LIST QUANTITY WITHIN CORE
         TITLE 'IKJEGLSA, ''LIST'', INSTRUCTION FORMATTING ROUTINE'
***********************************************************************
*                                                                     *
*  THIS ROUTINE WILL OUTPUT DATA IN THE INSTRUCTION FORMAT.           *
*  CONTROL CAN BE BY LNTH (INCLUDING RANGE), BY MULTIPLICITY, OR BY   *
*  BOTH, WITH THE ROUTINE ENDING WHEN EITHER MULTIPLICITY REACHES 0,  *
*  OR WHEN THE NEXT-INSTR-ADDR IS INCRE PAST THE STOP ADDRESS.        *
*  WITHIN THE PROCESS SECTION (BEGINS AT LSTI50) REGS AND CONTROLS    *
*  ARE SET AS FOLLOWS.                                                *
*                                                                     *
*        R2    CONTAINS THE STOP ADDR                                 *
*        R3    CONTAINS THE CURRENT TRUE DATA ADDRESS                 *
*        R4    CONTAINS THE MULTIPLICITY OR 32767.                    *
*        R5    CONTAINS A COUNTER FOR REFRESHING HOLDAREA.            *
*        R6    IS THE CURRENT BUFFER PTR                              *
*                                                                     *
***********************************************************************
LSTINSTR DS    0H
         NI    LASTINST,TURNOFF    TURN OFF SW IN CASE SW ON
         STC   R15,VPDET           TYPE CODE TO VALUE PDE.
         L     R3,A1               SET UP CURRENT TRUE DATA ADDR
         LA    R3,ZERO(ZERO,R3)    CLEAR HIGH ORDER BYTE FOR CALCULATE
         TM    COMFLGS,TWOADDRS    IF ADDRESS RANGE WAS NOT GIVEN
         BNO   LSTI05               ... THEN BRANCH
*  PROCESS ADDRESS RANGE
         L     R2,A2               SET 2ND ADDRESS IN ANTICIPATION
         LA    R2,ONE(R2)          ADD 1 TO MAKE RANGE INCULSIVE
         LH    R4,MAXHWRD          SET MULTI=32767 FOR LOOP CONTROL
         B     LSTI20              SKIP SINGLE ADDR PROCESSING
*  PROCESS SINGLE ADDRESS
LSTI05   DS    0H
         SR    R15,R15             CONSTANT OF 0 FOR COMPARE
         LH    R4,A1M              R4=MULTPLICITY OR 0
         LH    R2,A1L              R2=LENGTH OR 0
         TM    LSTFLGS,LNTHFLG     IF LENGTH WAS GIVEN
         BO    LSTI06              ... THEN BRANCH
         TM    LSTFLGS,MULTIFLG    IF MULTIPLICITY WAS NOT GIVEN
         BNO   LSTI06              ... THEN BRANCH
         LA    R2,SIX              SET REG 2 VALUE 6 FOR MULT
         MH    R2,A1M              MULT BY THE NUMBER OF INST
         B     LSTI07              GO TO NEXT PROCESS INSTR
LSTI06   DS    0H
         LH    R4,MAXHWRD          SET MULTI=32767 FOR LOOP CONTROL
LSTI07   DS    0H
         AR    R2,R3               CALCULATE STOP ADDR AS ADDR1+LENGTH
LSTI20   DS    0H
         C     R2,ENDADR           IS STOP ADDRESS OUT OF CORE
         BNH   LSTI21              IF STOP ADDR WITHIN CORE, BRANCH
         L     R2,ENDADR           GET HIGHEST CORE ADDR FOR STOPPER
*        LA    R2,ONE(ZERO,R2)     INCRE BY ONE FOR USE AS A STOPPER
         EJECT
LSTI21   DS    0H
         ST    R2,A2               ADDR2 IS STOP ADDR
         BAL   R14,ADDRCHK         GO TEST VALIDITY ENDING ADDR
         TM    A1FLG,A1SYM         TEST ADDR TYPE
         BZ    LSTI22              IF ADDRESS IS ABSOLUTE, BRANCH
         BO    LSTI40              IF SYMBOLIC, BRANCH
         SPACE
*  IF THE ADDRESS TYPE IS RELATIVE, FALL THRU AND SET UP FOR RELATIVES
         SPACE
         MVC   APDE(APL),IKJPARMA  MOVE ORIGINAL PDE TO WORK AREA
LSTI22   DS    0H
         LA    R2,APDE+PDEUSER-IKJPARMA    GET PTR TO DATA ADDRESS
         ST    R2,APDE+(PDEADRPT-IKJPARMA) STORE IT IN THE ADDR PDE
         B     LSTI50              GO PROCESS.
         SPACE
LSTI40   DS    0H
         BAL   R7,LSTSYM           GO MOVE SYM TO BUF
         LA    R2,APDE+PDEUSER-IKJPARMA    GET PTR TO DATA ADDRESS
         ST    R2,APDE+(PDEADRPT-IKJPARMA) STORE IT IN THE ADDR PDE
         TM    COMFLGS,TWOADDRS    TEST FOR 1 OR 2 ADDRS
         L     R2,CONAREA          GET ADDR OF CONVERT OUTPUT AREA
         BO    LSTI42              IF AN ADDR RANGE WAS USED, BRANCH
         LA    R15,ONE             MAKE A CONSTANT OF 1 FOR COMPARISON
         CH    R15,A1M             IF MULTIPLICITY GT ONE
         BL    LSTI42              ...THEN BRANCH
         ST    R3,APDE+PDEUSER-IKJPARMA    STORE CURRENT DATA ADDR
         EJECT
LSTI42   DS    0H
         BAL   R7,LSTIO            GO OUTPUT SYMBOLIC ADDRESS
         B     LSTI51              GO PROCESS LIST REQUEST
         SPACE 2
*  PROCESS ADDRESS FOR THE FIRST LINE OF OUTPUT.
         SPACE
LSTI50   DS    0H
         L     R6,OUTBUF           GET PTR TO THE OUTPUT BUFFER
         LA    R6,DATAOFF(R6)      INCREMENT BUF PTR PAST LL00 FIELD
         BAL   R14,LSTBPT          GO REMOVE BREAKPOINT SVC'S FROM DATA
         L     R2,CONAREA          ADDR OF CONVERT OUTPUT AREA
LSTI51   DS    0X
         LA    R5,L'HOLDAREA/SIX   SET UP COUNTER FOR DATA IN HOLDAREA
LSTI52   DS    0H
         ST    R3,APDE+PDEUSER-IKJPARMA    STORE CUR DATA ADDRESS
         SR    R0,R0               R0=0
         LA    R1,APDE             R1=ADDR OF THE ADDRESS PDE
         L     R15,TSTCONVT        R15=ADDR OF CONVERT ROUTINE
         BCTR  R0,NULL             MAKE R0 NEG FOR CONVERT TO PRINTABLE
         LCR   R1,R1               R1 NEG TO SHOW ADDR CONVERSION
         BALR  R14,R15             GO TO CONVERT ROUTINE
         LTR   R15,R15             TEST RETURN CODE.
         BNZ   LSTCVTRC            IF NON-ZERO, BRANCH
         TM    LASTINST,INSTSW   TEST FOR LAST INST IN BUFFER @OZ36690
         BZ    LSTI53            BRANCH AROUND - CONTINUE     @OZ36690
         L     R6,OUTBUF         GET POINTER TO OUTPUT BUFFER @OZ36690
         LA    R6,DATAOFF(R6)    INCREMENT PAST OFFSET FIELD  @OZ36690
LSTI53   DS    0H                                             @OZ36690
         MVC   ZERO(ADDRLEN,R6),CONDATA(R2)  CONVERTED DATA TO BUF
         LA    R6,ADDRLEN(R6)      INCRE BUF PTR PAST LL00 FIELD
         EJECT
*  CONVERT ONE INSTRUCTION, AND MOVE IT INTO THE BUFFER.
LSTI54   DS    0H
         LA    R1,VPDE             ADDR OF THE VALUE PDE
         L     R15,TSTCONVT        ADDR OF CONVERT ROUTINE.
         BALR  R14,R15             GO TO CONVERT ROUTINE
         CL    R15,FFOUR           WAS ERR 'INVALID INSTRUCTION'  .PRC.
         BL    ZZZRC0+6            BRANCH IF NO ERROR             .PRC.
         BH    LSTI80              BRANCH IF WORSE ERROR          .PRC.
         MVC   4(8,R6),ZZZDC       MOVE DC CONSTANT               .PRC.
         L     R15,VPDEPT          ADDRESS OF DATA                .PRC.
         UNPK  12(5,R6),0(3,R15)   CONVERT DATA                   .PRC.
         TR    12(4,R6),ZZZHEX-240    TO HEX                      .PRC.
         MVI   16(R6),C''''        APPEND QUOTE                   .PRC.
         LA    R15,2(,R15)         INCREMENT ADDRESS              .PRC.
         LA    R3,2(,R3)           INCREMENT TRUE ADDRESS         .PRC.
         LA    R6,17(,R6)          POINT PAST TEXT                .PRC.
         B     LSTI70              GO PRINT IT                    .PRC.
ZZZHEX   DC    C'0123456789ABCDEF' HEX TRANSLATE TABLE            .PRC.
ZZZDC    DC    C'DC    X'''        DC CONSTANT                    .PRC.
ZZZRC0   DC    0H'0'               END OF MOD                     .PRC.
         LTR   R15,R15             TEST RETURN CODE
         BNZ   LSTI80              IF NON-ZERO, BRANCH
         IC    R15,CONLNTH(R2)     PICK UP LENGTH OF CONVERTED DATA
         BCTR  R15,NULL            DECREMENT LNTH FOR MVC INSTR
         TM    LASTINST,INSTSW     TEST FOR LAST INSTR IN BUFFER
         BZ    CONT                BRANCH AROUND AND CONTINUE
         L     R6,OUTBUF           GET PTR TO THE OUTPUT BUFFER
         LA    R6,ELEVEN(R6)       INCREMENT BUF PTR PAST ADDR
CONT     DS    0H                  LABEL TO BRANCH TO CONT PROC
         EX    R15,INSTRMVC        MOVE CONVERTED DATA TO BUF
         LA    R6,ONE+SP4(R15,R6)  INCRE BUF PTR PAST DATA AND SPACES
         SPACE
*  NEXT, INCREMENT THE POINTERS PAST THE INSTRUCITON JUST PROCESSED.
         SPACE
LSTI66   DS    0H
         L     R15,VPDEPT          R15=ADDR OF DATA JUST CONVERTED
         TM    LASTINST,INSTSW     TEST FOR LAST INSTR IN BUFFER
         BO    CONTINUE            BRANCH BY SPECIAL HANDLING
         LR    R1,R3               PREPARE TEST NEAR END OF PG
         TM    ZERO(R15),INSTRLEN  TEST FOR INST. SIZE
         BZ    ADJUST1             IF INSTR BEGINS 00, LNTH=2
         BM    ADJUST2             IF BEGINS 10 OR 01, LNTH=4
         BO    ADJUST3             IF INSTR BEGINS 11, LNTH=6
TESTOUT  DS    0H                  BRANCH BACK TO AFTER ADJUSTED
         C     R1,A2               TEST FOR LAST INSTR IN BUFFER
         BL    CONTINUE            BRANCH BY SPECIAL HANDLING
         OI    LASTINST,INSTSW     TURN ON THE LAST INST SWITCH
         ST    R1,A2               ESTABLISH ENDING ADDRESS
         BAL   R14,ADDRCHK         GO TEST VALIDITY ENDING ADDR
         B     LOADBUFF            BRANCH TO MOVE LAST INST
CONTINUE DS    0H                  BRANCHED TO IF INST LEFT
         TM    ZERO(R15),INSTRLEN  TEST INSTR LENGTH FOR 2, 4, OR 6
         BM    LSTI68              IF INSTR BEGINS 10 OR 01, LNTH=4, GO
         LA    R15,TWO(R15)        INCRE DATA PTR BY 2 IF LNTH 2 OR 6
         LA    R3,TWO(R3)          ALSO INCRE TRUE ADDR BY 2
         BZ    LSTI70              IF INSTR BEGINS 00, LNTH=2, BRANCH
         SPACE
*  IF THE INSTRUCITON BEGINS 11, THE LNTH=6, 2 HAS ALREADY BEEN ADDED
*  SO FALL THRU AND ADD 4 MORE. THIS INSTR IS BRANHCED TO IF LNTH=4.
         SPACE
LSTI68   DS    0H
         LA    R15,FOUR(R15)       INCRE DATA PTR BY 4 IF LNTH 4 OR 6
         LA    R3,FOUR(R3)         ALSO INCRE TRUE ADDR BY 4
LSTI70   DS    0H
         C     R3,A2               COMPARE UPDATED ADDR TO STOP ADDR
         ST    R15,VPDEPT          STORE UPDATED ADDR IN VALUE PDE
         BNL   LSTI74              IF PAST LIMIT, BRANCH TO FINALE
         TM    LASTINST,INSTSW     TEST FOR LAST INSTR IN BUFFER
         BO    LSTI74              BRANCH TO PRINT OUT LAST INST
         BCT   R4,LSTI64           IF CONTROL-1 NOT ZERO, DO ANOTHER
LSTI74   DS    0H
         NI    LASTINST,TURNOFF    TURN OFF LAST INSTR SWITCH
         BCTR  R3,NULL             DECRE ADDR TO TEST FOR OUT-OF-CORE
         C     R3,ENDADR           WAS LISTING STOPPED BY TOP OF CORE
         BH    LSTI78              IF INSTR IN BUF OUT-OF-CORE, BRANCH
         BAL   R7,LSTIO            GO OUTPUT FINAL DATA
         B     LSTCC0              RETURN TO MAIN ROUTINE
ADJUST1  DS    0H                  BRANCHED TO FOR 2 BYTE INST
         LA    R1,ONE(R1)          INCREMENT BY 1 BYTES FOR MOVE
         B     TESTOUT             BRANCH TO TEST LAST INST
ADJUST2  DS    0H                  BRANCHED TO FOR 4 BYTE INST
         LA    R1,THREE(R1)        INCREMENT BY 3 BYTES FOR MOVE
         B     TESTOUT             BRANCH TO TEST LAST INST
ADJUST3  DS    0H                  BRANCHED TO FOR 6 BYTE INST
         LA    R1,FIVE(R1)         INCREMENT BY 5 BYTES FOR MOVE
         B     TESTOUT             BRANCH TO TEST LAST INST
         SPACE
LSTI78   DS    0H
         OI    COMFLGS,OUTCORE     SET REQUEST EXTENDS OUT OF CORE SW
         B     LSTCC0              GO TO COMPLETION ROUTINE
         EJECT
*****************************************************************
*
*  THIS ROUTINE IS ENTERED AT THIS POINT TO CHECK THE VALIDITY OF
*  THE CALCULATED STOP ADDRESS FOR THE LIST COMMAND.
*  REGS ARE SAVE AND RESTORED AND THE ROUTINE RETURNS TO CALLER
*  IF THE ADDRESS PROVES TO BE VALID; OTHERWISE, THE ROUTINE
*  BRANCHES TO PRINT MESSAGE AND RETURN TO MAINLINE.
*
*****************************************************************
ADDRCHK  DS    0H
         SAVE (14,12)              STANDARD SAVE
         L     R6,PPTCB            ESTAB PTR TO PROB PROG TCB
         L     R7,A2               ESTAB PTR TO STOP ADDR
         IKJEGS9G  ADDRCHK,TCBADDR=(R6),VALUE=(R7),MF=(E,WKWORDS)
         L     R1,OUTBUF           RE INIT OUTPUT BUFFER      @ZA11395
         MVI   DATAOFF(R1),C' '    TO BLANKS...IT HAS BEEN    @ZA11395
         MVC   DATAOFF+1(OUTBUFRL-5,R1),DATAOFF(R1) CLOBBERED @ZA11395
         C     R15,FEIGHT          RTN CODE(ZERO/FOUR GOOD ADDR)
         BL    GOODADDR            OK - - RETURN TO PROCESSING
         BH    ERR97               ERROR IN SVC97
         XC    TSTIOPRM,TSTIOPRM   ZERO OUT I/O PARM LIST
         IKJEGSIO MSG,FIRST=M0018,SECOND=M0285,ID=LSA19,  ISSUE CALL   *
               MF=(E,TSTIOPRM)     CALL I/O TO ISSUE ERROR MESSAGE
         CH    R15,H16             TEST FOR SERIOUS ERROR CONDITION
         BL    LSTCC0              IF NOT SERIOUS TRY NEXT ADDRESS
ERR97    DS    0H
         ST    R15,LSTRETCD        SAVE RETURN CODE FOR MAINLINE
         B     LSTMN90             IF SERIOUS GO BACK TO MAINLINE
         EJECT
GOODADDR RETURN (14,12)            RETURN TO PROCESSING
         EJECT
LSTI64   DS    0H
         BAL   R7,LSTIO            GO OUTPUT DATA
         BCT   R5,LSTI52           IF MODE DATA IN HOLDAREA, BRANCH
LOADBUFF DS    0H                  BRANCHED TO FOR LAST INST
         BAL   R14,LSTBPT          GO REMOVE BREAKPOINT SVC'S
         LA    R5,L'HOLDAREA/SIX   RESET HOLDAREA COUNTER
         B     LSTI52              GO UPDATE THE CURRENT DATA ADDRESS
         SPACE
LSTI80   DS    0H
         C     R15,FFOUR           IS THE RETURN CODE 4
         BNE   LSTCVTRC            IF NOT 4, GO ANALYZE
         SPACE
*  IF THE RETURN CODE WAS 4, AN INVALID OP CODE WAS ENCOUNTERED, AND
*     A MESSAGE INDICATING WHERE MUST BE PUT OUT.
         SPACE
         L     R15,OUTBUF          GET START ADDRESS OF OUTPUT BUFFER
         LR    R14,R15             SAVE START ADDRESS OF BUFFER
         LA    R15,DATAOFF(R15)    INCREMENT ADDRESS PAST LL00 FIELD
         SR    R6,R15              CALCUALTE LENGTH OF ADDRESS IN BUF
         SPACE
*  NEXT, BYPASS ANY LEADING BLANKS IN THE ADDRESS ALREADY IN THE BUF.
         SPACE
LSTI84   DS    0H
         BCTR  R6,NULL             REDUCE LENGTH BY ONE FOR MVC INSTR
         CLI   ZERO(R15),BLANK     IS THE NEXT CHARACTER IN BUF A BLANK
         BNE   LSTI86              IF NOT A BLANK, BRANCH
         LA    R15,ONE(R15)        INCREMENT BUF ADDR TO NEXT CHAR
         B     LSTI84              LOOP BACK TO CHECK NEXT CHARACTER
         SPACE
LSTI86   DS    0H
         LA    R14,FOUR(R14)       POINT TO BYTE AFTER INST HEADER
         L     R7,OUTBUF           POINT TO BEGINNING OF INSERT
         EX    R6,MSGMOVE3         MOVE ADDRESS INTO 1ST LVL MSG
         LA    R6,FIVE(R6)         CALCUALTE TOTAL LENGTH OF INSERT
         STH   R6,ZERO(R7)         STORE LENGTH IN MSG LENGTH FIELD
         LA    R2,M0021            OBTAIN FIRST LEVEL MSG NUMBER
         LA    R3,ZERO             INDICATE NO SECOND  LEVEL MSG
MSGOUT   DS    0H
         XC    TSTIOPRM,TSTIOPRM   ZERO OUT I/O PARM FIELD
         IKJEGSIO MSG,FIRST=(R2),INST11=(ADDR,(R7)),SECOND=(R3), CALL  *
               ID=LSA19,MF=(E,TSTIOPRM)   FOR OUTPUT OF MESSAGE
         CH    R15,H16             TEST FOR SERIOUS ERROR
         BL    LSTCC0              IF NOT CONTINUE
         ST    R15,LSTRETCD        SAVE RETURN CODE FOR  MAINLINE
         B     LSTMN90             RETURN TO MAINLINE
         SPACE
MSGMOVE3 MVC   ZERO(NULL,R14),ZERO(R15)  MOVES ADDR INTO MESS
BLOW1    DS    0H                  ESTABLISH ADDR IF ABEND
INSTRMVC MVC   SP4(NULL,R6),CONDATA(R2)  MOVES INSTRUCTIONS TO BUF
         TITLE 'IKJEGLSA, ''LIST'', LSTIO SUBROUTINE FOR OUTPUT'
***********************************************************************
*                                                                     *
*  THES ROUTINE SETS UP THE PTRS AND CALLS IKJEGIO1 TO OUTPUT A LINE  *
*  OF DATA. AT ENTRY, THE FOLLOWING REGS ARE SET.                     *
*        R6  POINTS TO THE NEXT AVAILABLE BYTE IN THE BUFFER          *
*        R7  HAS THE RETURN POINT ADDRESS                             *
*                                                                     *
*  THE CONTENTS OF REGS 0, 1, 6, 14, AND 15 ARE MODIFIED BY THIS RTN  *
*                                                                     *
***********************************************************************
         SPACE
LSTIO    DS    0H
         STM   R2,R3,WKWORDS       SAVE CONTENTS OF WORK REGISTERS
         L     R2,DATAPT           SET UP PTR TO 2 WORD LIST
         LR    R15,R6              R15=PTR TO 'END OF DATA'+1
         L     R6,OUTBUF           R6=PTR TO BEGINNING OF BUF
         SR    R15,R6              CALCULATE LENGTH OF DATA
         STH   R15,F1STHALF(R6)    LNTH TO 1ST HALF WORD OF BUFFER
         SPACE
*  COMMON PORTION OF IO ROUTINE.
LSTIO1   DS    0H
         TM    TSTFLGS1,TSTPRINT+TSTFIRST  IS OUTPUT TO A DS 1ST TIME
         BM    FIRSTIO             IF OUTPUT TO DS 1ST TIME, BRANCH
         SR    R3,R3               IF NOT 1ST TIME, INDICATE SO BY R0=0
LSTIO4   DS    0H
         XC    TSTIOPRM,TSTIOPRM   ZERO OUT I/O PARM AREA
         IKJEGSIO DATA,DATAPTR=(R2),DSNAME=(R3),ID=LSA19,              *
               MF=(E,TSTIOPRM)     CALL I/O TO OUTPUT DATA LINE
         LM    R2,R3,WKWORDS       RESTORE WORK REGISTERS
         MVI   DATAOFF(R6),BLANK   MOVE A BLANK TO START OF DATA AREA
         MVC   DATAOFF+ONE(LSTBUFL,R6),DATAOFF(R6)     BLANK OUT BUFFER
         LA    R6,DATAOFF(R6)      INCRE BUF PTR PAST LL00 FIELD
         LTR   R15,R15             TEST RETURN CODE
         BCR   EQZERO,R7           IF ZERO, RETURN TO CALLER
         CH    R15,H16             TEST FOR SERIOUS ERROR
         BL    LSTIO3              IF NOT SERIOUS CONTINUE
         ST    R15,LSTRETCD        SAVE RETURN CODE FOR MAINLINE
         B     LSTMN90             RETURN TO MAINLINE
LSTIO3   DS    0H
         XC    LSTRETCD,LSTRETCD   SET THE RETURN CODE TO 0
         LTR   R15,R15             SEE IF PROCESSING SHOULD BE CONT'D
         BNZ   LSTMN90             RETURN TO MAINLINE
         B     LSTCC0              GO CLEAN UP AND RETURN
         SPACE
FIRSTIO  DS    0H
         L     R14,TSTANSPL        PICK UP BASE ADDR FOR PARSE DSECT
         USING IKJPARMD,R14        ADDRESSABILITY FOR THE PDL
         LA    R3,DSNAME           SET UP PTR TO THE DSNAME PDE
         OI    TSTFLGS1,TSTFIRST   SET FIRST TIME SWITCH TO 1
         DROP  R14
         B     LSTIO4              RETURN TO MAIN IO ROUTINE
         TITLE 'IKJEGLSA, ''LIST'', GENERAL USE SUBROUTINES'
***********************************************************************
*                                                                     *
*  THIS CLOSED SUBROUTINE CHECKS SEGMENTS OF CORE FOR INSERTED BREAK- *
*  POINTS AND REPLACES THEM WITH THE ORIGINAL CONTENTS OF THE LOCATION*
*  THE ROUTINE MOVES THE NEXT 32 BYTES TO BE LISTED TO A WORKAREA AND *
*  SCANS THE BREAK ELEMENT QUEUE FOR ANY BREAK POINT SVC'S WITHIN THE *
*  32 BYTE FIELD. WHEN A BREAKPOINT SVC IS FOUND TO BE IN THE RANGE,  *
*  THE ORIGINAL INSTRUCTION IS MOVED (1ST 2 BYTES) INTO WORK AREA OVER*
*  THE BREAKPOINT SVC.  REGISTERS ARE SAVED AND RESTORED.             *
*  INPUT A1=ORIGINAL START ADDR OF DATA IN HOLD AREA                  *
*        VPDEPT =ADDR OF NEXT BY OF HOLD AREA TO BE LISTED            *
*                                                                     *
***********************************************************************
         SPACE
LSTBPT   DS    0H
         SAVE  (14,12)             STANDARD SAVE
         SPACE
*  CALCULATE THE NEW DATA ADDRESS.
         SPACE
         L     R3,VPDEPT           GET ADDR OF NEXT BYTE OF HOLDAREA
         LA    R5,HOLDAREA         SET UP START ADDR OF HOLDING CORE
         SR    R3,R5               DETERMINE NUMBER OF BYTES USED
         A     R3,A1               INCRE INPUT CORE ADDR BY AMT LISTED
         LA    R4,LSTIBLK(R3)      ESTABLISH ADDR OF END OF NEXT BLK
         C     R4,ENDADR           IS END ADDR GREATER THAN HIGHEST
         BH    LSTBPT30            IF OUT OF CORE, BRANCH TO ADJUST RTN
         L     R0,A2               OBTAIN LAST ADDRESS
         SR    R0,R3               PREPARE TEST LESS THAN FULL
         CH    R0,H32              TEST FOR 32 OR MORE LEFT
         BNL   MOVEMAX             IF MORE THAN 32 BRANCH AROUND
         LR    R1,R0               ESTAB NUMBER OF BYTES TO MOVE
         B     LSTBPT04            BRANCH TO MOVE ROUTINE
MOVEMAX  DS    0H                  BRANCHED TO IF CAN MOVE 32
         LA    R1,LSTIBLK          USE STANDARD LENGTH FOR HOLD DATA
LSTBPT04 DS    0H
         EX    R1,HOLDMVC          MOVE DATA TO HOLDING AREA
         SPACE
*  IF THE DATA ADDRESS IS NOT ON A HALF WORD BOUNDARY, R0 WILL CONTAIN
*  A ONE (1), IF THE DATA ADDRESS IS ON A HALFWORD BOUNDARY, R0 WILL
*  CONTAIN A ZERO (0). THE CONTENTS OF R0 WILL THEN BE USED TO ADJUST
*  THE DATA ADDRESS AND THE HOLDAREA ADDRESS. THIS ADJUSTMENT IS TO
*  TAKE CARE OF THE CASE WHERE THE DATA START ADDRESS IS THE SECOND
*  BYTE OF A BREAKPOINT.
         SPACE
BLOW2    DS    0H                  ESTABLISH ADDR IF ABEND
         LA    R0,ONE              SET THE LOW ORDER BIT ON IN REG 0
         NR    R0,R3               TEST DATA ADDRESS FOR A HALFWORD BDY
         SR    R3,R0               ADJUST DATA START ADDRESS IF NEEDED
         SR    R5,R0               MAKE SAME CHANGE FOR HOLDAREA ADDR
         L     R6,BREAKTAB         GET PTR TO FIRST BREAK ELEMENT
         USING BRKELEM,R6          ADDRESSABILITY FOR KREAK ELEMENT
         LTR   R6,R6               IS THERE A 1ST BREAK ELEMENT
         BP    LSTBPT12            IF THERE IS A BREAK ELEMENT, BRANCH
         B     LSTBPT20            IF NONE, RETURN
         SPACE
LSTBPT08 DS    0H
         L     R6,BRKLINK          PICK UP FOREWARD PTR
         LTR   R6,R6               TEST FOR ANOTHER
         BNP   LSTBPT20            IF NO MORE, BRANCH
LSTBPT12 DS    0H
         C     R3,BRKADDR          COMPARE START ADDR TO BREAKPOINT
         BH    LSTBPT08            IF BRK-PT LOW, NOT IN RANGE, BRANCH
         C     R4,BRKADDR          COMPARE END ADDR TO BREAKPOINT
         BNL   LSTBPT40            IF END ADDR HI OR EQ, ADDR IN RANGE
LSTBPT20 DS    0H
         AR    R3,R0               RE-ADJUST DATA ADDRESS AS NEEDED
         AR    R5,R0               DO THE SAME FOR HOLD AREA ADDRESS.
         ST    R3,A1               SAVE ACTUAL CORE ADDR OF CUR DATA
         ST    R5,VPDEPT            RESET VALUE PDE TO PT AT HOLD AREA
         RETURN (14,12)            RETURN TO CALLER
         SPACE
LSTBPT30 DS    0H
         L     R1,ENDADR           PICK UP HIGHEST CORE ADDR
         LR    R4,R1               SET TOP ADDR AS TOP OF CORE
         SR    R1,R3               DETERMINE REMAINING LENGTH IN BYTES
         B     LSTBPT04            RETURN TO MAIN LSTBPT FLOW
         SPACE
*  IF A BREAK POINT IS FOUND IN THE RANGE, THE FOLLOWING CODE
*  WILL REPLACE THE BREAK POINT SVC WITH THE ORIGINAL INSTRUCTION
         SPACE
LSTBPT40 DS    0H
         L     R2,BRKADDR          R2=ADDR OF BREAKPOINT SVC
         SR    R2,R3               DETERMINE OFFSET INTO HOLD AREA,
         AR    R2,R5               ADD THE ADDR OF HOLDAREA
         SPACE
*  IF THE BREAK ELEMENT IS STILL ACTIVE, REPLACE THE BREAKPOINT SVC
*    WITH THE DATA FROM THE BREAK ELEMENT.
         SPACE
         MVC   ZERO(TWO,R2),BRKINST        REPLACE SAVED INSTR
         B     LSTBPT08            RETURN TO SEARCH LOOP
BLOW3    DS    0H                  ESTAB ADDR IF ABEND
HOLDMVC  MVC   HOLDAREA(NULL),ZERO(R3) MOVE SEG OF CORE TO HOLD
         DROP  R6
         EJECT
***********************************************************************
*                                                                     *
*  GENERAL SUBROUTINE FOR MOVING SYMBOLIC ADDRESSES TO THE OUTPUT BUF *
*        AT ENTRY,  R6 SHOULD POINT TO FIRST BYTE OF OUTPUT AREA      *
*                   R7 POINTS TO RETURN POINT.                        *
***********************************************************************
         SPACE
LSTSYM   DS    0H
         OI    APDE+(PDEFLG2-IKJPARMA),CTNAMFLG TURN ON 'QUALIFIED' SW
*  TURN RELATIVE ADDR FLAG ON, AND ABSOLUTE ADDR SW OFF
         XI    APDE+(PDEFLG4-IKJPARMA),RELADDR+ABSADDR
         LA    R2,A1               GET ADDR OF INPUT DATA PTR
         ST    R2,APDE+(PDEADRPT-IKJPARMA) PUT IT IN THE ADDRESS PDE
         L     R6,OUTBUF           GET PTR TO START OF OUTPUT BUFFER
         LA    R6,DATAOFF(R6)      INCREMENT PTR PAST LL00 FIELD
         BAL   R14,LSTAMV          GO MOVE THE ADDRESS TO THE BUFFER
         L     R15,A1              R15=START ADDR OF DATA
         ST    R15,PPTEMP          MAKE START OF DATA ADDR BASE FOR REL
         SR    R0,R0               R0=0
         BCTR  R0,NULL             MAKE REG 0 NEG FOR CNVRT TO PRINT
         BAL   R14,LSTBPT          GO CLEAR BREAKPOINT SVC'S FROM DATA
         BR    R7                  RETURN TO CALLER
         EJECT
***********************************************************************
*  THIS ROUTINE WILL ADD THE PRODUCT OF THE LENGTH AND MULTIPLICITY   *
*  TO THE START ADDRESS AND COMPARE THE SUM TO 'ENDADR'. IF THE       *
*  SUM EXCEEDS 'ENDADR', A NEW MULTIPLICITY IS CALCULATED AND SWITCH  *
*  'OUTCORE' IN COMFLGS IS SET, THE NUMBER OF BYTES NOT OUT           *
*  OF CORE IS PLACED 'LASTLEN', AND THE CALCULATED MULTIPLICITY IS    *
*  STORED IN 'A1M'.                                                   *
*  RETURN CODES---   4  IF 'NEW' MULTIPLICITY IS ZERO                 *
*                    0  FOR ALL OTHER CASES.                          *
***********************************************************************
LSTLMTCK DS    0H
         SAVE  (0,12)
         L     R2,A1               GET DATA START ADDR
         LH    R3,A1L              GET LENGTH FOR THIS REQUEST
         LA    R2,ZERO(ZERO,R2)    CLEAR HIGH BYTE FOR CALCULATION
         MH    R3,A1M              MULTIPLY  (LENGTH X MULTIPLICITY)
         AR    R3,R2               ADD START ADDR TO LENGTH OF REQUEST
         BCTR  R3,NULL             DECREMENT TO MAKE EXCLUSIVE
         ST    R3,A2               STORE 2ND ADDR FOR LATER USE
         C     R3,ENDADR           COMPARE POTENTIAL END ADDR TO TOP
         BH    LSTLMT20            IF REQUEST GOES OUT OF CORE, BRANCH
LSTLMT10 DS    0H
         SR    R15,R15             SET RETURN CODE TO ZERO
LSTLMT14 DS    0H
         RETURN  (0,12)
         SPACE
LSTLMT20 DS    0H
         L     R5,ENDADR           GET LAST MACHINE ADDRESS
         ST    R5,A2               STORE 2ND ADDR FOR LATER USE
         SR    R4,R4               CLEAR EVEN REG FOR DIVIDE
         LH    R3,A1L              GET LENGTH FOR THIS REQUEST
         SR    R5,R2               TOP ADDR - START ADDR
         LA    R5,ONE(ZERO,R5)     MAKE LASTLEN INCLUSIVE
         DR    R4,R3               DIVIDE BYTES IN CORE BY LENGTH
         STH   R5,A1M              SET NEW MULTIPLICITY
         STH   R4,LASTLEN          SAVE NO. OF BYTES IN CORE
         OI    COMFLGS,OUTCORE
         LTR   R5,R5               WAS REMAINING MULTI ZERO
         BNZ   LSTLMT10            IF NOT, BRANCH
         LA    R15,FOUR            SET RETURN CODE TO FOUR
         B     LSTLMT14            GO RETURN WITH A RC=4
         SPACE
LSTOUT   DS    0H
         XC    TSTIOPRM,TSTIOPRM   ZERO OUT I/O PARM LIST
         IKJEGSIO MSG,FIRST=M0022,INST11=(APDE,(R8)),ID=LSA19,         *
               SECOND=M0272,MF=(E,TSTIOPRM)   CALL I/O ISSUE ERROR MSG
         CH    R15,H16             TEST FOR SERIOUS ERROR CONDITION
         BL    LSTMN90             IF NOT SERIOUS TRY NEXT ADDRESS
         ST    R15,LSTRETCD        SAVE RETURN CODE FOR MAINLINE
         B     LSTMN90             IF SERIOUS GO BACK TO MAINLINE
         EJECT
***********************************************************************
*                                                                     *
*  GENERAL SUBROUTINE FOR MOVING ADDRESSES TO THE OUTPUT BUFFER.      *
*        AT ENTRY,  R6 SHOULD POINT TO THE NEXT AVAILABLE BUFFER BYTE *
*                   R8 SHOULD CONTAIN THE ADDRESS OF THE ADDR PDE.    *
*        AT-EXIT,   R6 CONTAINS THE UPDATED BUFFER PTR, AND           *
*                   THE OUTPUT BUFFER CONTAINS THE ADDRESS STRING.    *
*                                                                     *
***********************************************************************
LSTAMV   DS    0H
         SAVE  (14,12)             SAVE CALLERS REGS
         TM    PDEFLG1,LDNAMFLG    WAS A LOADNAME USED
         BZ    LSTAMV04                IF NOT, BRANCH
         LH    R2,PDELEN1          PICK UP LENGTH OF LOAD NAME
         BCTR  R2,NULL                 DECREMENT BY 1 FOR MVC INSTR.
         L     R15,PDELDNAM        PICK UP PTR TO LOAD NAME
         EX    R2,SYMMOVE          MOVE SYMBOL TO BUFFER
         LA    R6,ONE(R2,R6)       INCREMENT BUF PTR PAST NAME
LSTAMV04 DS    0H
         TM    PDEFLG2,CTNAMFLG    WAS ENTRY NAME SPECIFIED
         BZ    LSTAMV08                IF NOT, BRANCH
         MVI   ZERO(R6),PERIOD     MOVE IN ENTRY NAME PREFIX
         LA    R6,L'PERIOD(R6)     INCREMENT BUF PTR PAST PREFIX
         LH    R2,PDELEN2          GET LENGTH OF ENTRY NAME AND
         BCTR  R2,NULL                 DECREMENT BY 1 FOR MVC INSTR.
         L     R15,PDECTNAM        PICK UP PTR TO ENTRY NAME
         EX    R2,SYMMOVE          MOVE NAME TO OUTPUT AREA
         LA    R6,ONE(R2,R6)       INCREMENT BUF PTR PAST ENTRY NAME
         TM    PDEFLG4,CTONLY      IS ADDR TYPE STAND ALONE ENTRYNAME
         BO    LSTAMV16                IF STAND ALONE ENTRYNAME, BRANCH
         MVI   ZERO(R6),PERIOD     MOVE IN SYMBOL SEPARATOR
         LA    R6,L'PERIOD(R6)     INCREMENT BUF PTR PAST PREFIX
LSTAMV08 DS    0H
         LH    R2,PDELEN3          PICK UP LENGTH OF WYMBOL AND
         BCTR  R2,NULL                 DECREMENT BY 1 FOR MVC INSTR.
         L     R15,PDEADRPT        R15=PTR TO SYMBOL
         EX    R2,SYMMOVE          MOVE SYMBOL TO OUTPUT AREA
         LA    R6,ONE(R2,R6)       INCREMENT BUF PTR PAST SYMBOL
LSTAMV16 DS    0H
         ST    R6,R6OFF(R13)       MODIFY REG 6 CONTENTS (IN SAVE AREA)
         RETURN (14,12)            RETRUN TO CALLER WITH HIS REGS
         SPACE
SYMMOVE  MVC   ZERO(NULL,R6),ZERO(R15)  FOR MOVING NAMES TO BUFFER
DATAMOVE MVC   SP2(NULL,R6),CONDATA(R3) MOVES CONVERTED DATA TO BUFFER
         SPACE 2
***********************************************************************
*
*        STAE RETRY ROUTINE
*
***********************************************************************
         SPACE 3
RETRY    DS    0H
         L     R4,CVTPTR           PTR TO CVT
         USING CVTDSECT,R4         ADDRESSABILITY FOR CVT
         L     R4,CVTTCBP          TCB PTR
         L     R4,FOUR(R4)         CURRENT TCB PTR
         DROP  R4
         USING TCB,R4              TCB ADDRESSABILITY
         L     R9,TCBTRN           TCOMTAB PTR
         OI    TSTFLGS4,TSTRERTN   TURN ON RETRY IN PROCESS SW
         L     R13,REGSAVE2        PTR TO SAVE AREA
         LM    R10,R12,R10OFF(R13)     RESTORE MODULE ADDRESSABILITY
         LA    R15,TWENTY          INDICATE ERROR RETURN
         ST    R15,LSTRETCD        SAVE RETURN CODE
         B     LSTMN90             RETURN
         EJECT
RETRYAD  DC    A(RETRY)            PTR TO STAE RETRY ROUTINE
FFOUR    DC    F'4'                CONSTANT OF 4, GENERAL USE
FEIGHT   DC    F'8'                CONSTANT OF 8, GENERAL USE
TWELVE   DC    F'12'               CONSTANT OF 12, GERERAL USE
LENFIVE  DC    H'5'                LENGTH FOR MESSAGE INSERTS
         DS    0F
SPMASK   DC    X'01000000'         SUBPOOL NUMBER MASK FOR FREEMAIN
ENDADR   DC    X'00FFFFFF'         MAXIMUM CORE ADDRESS
HONE     DC    H'1'                CONSTANT OF 1, GENERAL USE
H16      DC    H'16'               CONSTANT OF 16, GENERAL USE
H32      DC    H'32'               CONSTANT OF 32
MAXHWRD  DC    H'32767'            MAX POSITIVE HALFWORD VALUE
         SPACE
SMTLABL  DS    0H                  SMT TEST LABEL FOR XCTL MACRO
LST      DC    C'LST'              CONSTANT USED BY MAINLINE BLDL RTNE
         SPACE
         ORG   *-HEX0A             ACCOUNT FOR X'00H TO X'09' IN TABLE
SIGNTBL  DS    0H                  TABLE FOR CONVERTING A ZONE TO SIGN
         ORG   *+HEX0A             RESET LOC CTR TO ACTUAL TABLE
         DC    C'+-+-++'           ACTUAL SIGN TABLE
         SPACE
         DS    0H
SIGNPAT  DC    X'00A0'             USED TO TEST FOR VALID SIGN
VALZONE  DC    C'0'                USED TO GET A NUMERIC ZONE
         SPACE 2
***********************************************************************
*                                                                     *
*  THIS TABLE IS USED TO CONVERT THE HEX TYPE CODES TO THEIR CHARACTER
*  EQUIVALENT FOR PLACING THE FORMAT TYPE IN MESSAGES.
*                                                                     *
***********************************************************************
         SPACE
LSTTYPE  DC    C'CXBIFHEDAYSVPZ'   EBCDIC FOR DATA TYPE CODES
IKJEGSPL IKJEGSPL RTRY=RETRY,ABNTB=ABENDTAB,MODNM=IKJEGLSA,TNM=LIST
SUPERZAP DC    50CL1'Z'            AREA FOR TEMP UPDATES
ABENDTAB DS    0F                  FULL WORD ALIGNMENT         @ZA06225
         DC    AL1(97)             CODE FOR PROTECTION CHECK
         DC    AL3(BLOW3)          RESUME ADDRESS FOLLOWING
         DC    AL1(97)             CODE FOR PROTECTION CHECK
         DC    AL3(BLOW1)          RESUME ADDRESS FOLLOWING
         DC    AL1(97)             CODE FOR PROTECTION CHECK
         DC    AL3(BLOW2)          RESUME ADDRESS FOLLOWING
         DC    AL1(97)             CODE FOR PROTECTION CHECK
         DC    AL3(LSTBPT04)       RESUME ADDRESS FOLLOWING
         DC    X'FF'               END OF TABLE
         EJECT
***********************************************************************
*
*  THE FOLLOWING TABLE IS USED TO TRANSLATE UNPRINTABLE CHARACTERS    *
*  TO PERIODS (.) SO THAT THEY WILL BE ACCEPTABLE TO THE TERMINAL.    *
*  USED WHEN OUTPUT TYPE IS 'C'.                                      *
***********************************************************************
         SPACE
TRTABLE  DS    0H
         DC    256C'.'             ALL CHARS NOT OTHERWISE DEFINED ='.'
         ORG   TRTABLE+X'40'       BLANK OR SPACE
         DC    AL1(*-TRTABLE)      DEFINE
         ORG   TRTABLE+X'4A'       CENT, PERIOD, LT, LEFT PAREND,
*                                  PLUS, VERTICAL BAR, AMPERSAND
         DC    7AL1(*-TRTABLE)     DEFINE
         ORG   TRTABLE+X'5A'       EXCLAMATION, DOLLAR, PERIOD,
*                                  RIGHT PAREND, SEMICOLON,
*                                  LOGICAL NOT, DASH, SLASH
         DC    8AL1(*-TRTABLE)     DEFINE
         ORG   TRTABLE+C','        COMMA, PERCENT, UNDERLINE, GT, QUES.
         DC    5AL1(*-TRTABLE)     DEFINE
         ORG   TRTABLE+C':'        COLON, LB., AT, APSTRPHE, EQ, DBL Q.
         DC    6AL1(*-TRTABLE)     DEFINE
         ORG   TRTABLE+C'A'-C' '   LOWER CASE 'A' TO 'I'
         DC    9AL1(*-TRTABLE)     DEFINE
         ORG   TRTABLE+C'J'-C' '   LOWER CASE 'J' TO 'R'
         DC    9AL1(*-TRTABLE)     DEFINE
         ORG   TRTABLE+C'S'-C' '   LOWER CASE 'S' TO 'Z'
         DC    8AL1(*-TRTABLE)     DEFINE
         ORG   TRTABLE+C'A'        UPPER CASE 'A' TO 'I'
         DC    9AL1(*-TRTABLE)     DEFINE
         ORG   TRTABLE+C'J'        UPPER CASE 'J' TO 'R'
         DC    9AL1(*-TRTABLE)     DEFINE
         ORG   TRTABLE+C'S'        UPPER CASE 'S' TO 'Z'
         DC    8AL1(*-TRTABLE)     DEFINE
         ORG   TRTABLE+C'0'        NUMERALS '0' TO '9'
         DC    10AL1(*-TRTABLE)    DEFINE
         ORG   TRTABLE+256         SET LOCATION CTR TO END OF TRTABLE
         EJECT
***********************************************************************
*
*
*  ---NOTICE---  THIS DSECT IS A COPY OF THE ONE PRODUCED BY THE PARSE
*                MACROS IN IKJEGLST. THIS DSECT MUST BE UPDATED
*                WHENEVER THE PARSE MACROS ARE CHANGED OR WHEN THEIR
*                EXPANSION CHANGES.
***********************************************************************
IKJPARMD DSECT
         DS    2A                  CHAIN PTR
ADDR1    DS    9A                  ADDRESS PDE FOR 1ST ADDR OF RANGE
         DS    9A                  ADDRESS PDE FOR 2ND ADDR OF RANGE
         DS    A                   CHAIN ADDRESS
TYPE     DS    AL2                 TYPE KEYWORD PDE
LATTR    DS    AL2                 LENGTH ATTRIBUTE PDE
MATTR    DS    AL2                 MULTIPLICITY ATTRIBUTE PDE
PRINT    DS    AL2                 PRINT KEYWORD PDE
LENGTH   DS    2A                  LENGTH SUBFIELD
MULTI    DS    2A                  MULTIPLICITY SUBFIELD
DSNAME   DS    6A                  DSNAME SUBFIELD OF PRINT KEYWORD
         DS    0D                  ALIGNMENT FOR STORAGE PURPOSES
         SPACE
         EJECT
IKJEGLSA CSECT
         EJECT
LSTWORK  DSECT
         SPACE
***********************************************************************
*                                                                     *
*  ---NOTICE---                                                       *
*                                                                     *
***** THERE IS A DUPLICATE OF THIS DSECT IN IKJEGLST AND ANY CHANGES **
*****  TO THE DSECT MUST BE MADE IN BOTH MODULES.                    **
*                                                                     *
*  THIS DSECT MAPS A SECTION OF THE COMMON WORKING CORE POINTED TO    *
*  BY 'WORKAREA' IN TCOMTAB.                                          *
*                                                                     *
***********************************************************************
         SPACE
DWORK    DS    D                   DOUBLE WORD WORKAREA
         ORG   DWORK               USE WORK AREA FOR XCTL LIST
LXCTL1   DS    2A                  LIST PARM LIST FOR XCTL
PARSEPL  DS    7F                  PARSE CALLING PARAMETER LIST.
         ORG   PARSEPL             REUSE CORE USED BY PARSE PARM LIST
LSTRPT   DS    0H                  START OF SECTION REUSED FOR ADDR LST
APDE     DS    9F                  WORKING COPY OF THE ADDRESS PDE
A1       DS    A                   CONTAINS CURRENT ADDR OF INPUT
A1LMATTR DS    F                   LENGTH AND MULTIPLICITY FACTORS
         ORG   A1LMATTR            PLACE LNTH AND MULTI IN ONE FULLWORD
A1L      DS    H                   LENGTH
A1M      DS    H                   MULTPLICITY FACTOR
A1FLG    DS    X                   FLAG BYTE FOR ADDR1 INFORMATION
A1FPD    EQU   X'80'               FLOATING PT DBL
A1FPE    EQU   X'40'               FLOATING PT SINGLE
A1GEN    EQU   X'20'               GENERAL REG
A1REG    EQU   X'10'               ADDRESS 1 IS A REG.
         SPACE
A1ABS    EQU   X'00'               ADDR IS ABSOLUTE
A1SYM    EQU   X'03'               ADDR IS SYMBOLIC
A1REL    EQU   X'01'               ADDR IS RELATIVE
         SPACE
A1TYPE   DS    X                   CONTAINS TYPE CODE FOR ADDR1
REMAIN   DS    H                   REMAINDER
A2       DS    A                   SECOND ADDR IF A RANGE WAS GIVEN
ARTIFMUL DS    H                   VALUE OF ARTIFICIAL MULTIPLICITY
REMAIN2  DS    H                   BACKUP COPY OF REMAINDER
REGSTART DS    F                   START ADDR OF REG SAVE AREA TO LIST
LSTRETCD DS    F                   HOLDS RETURN CODE
LASTLEN  DS    H                   CONTAINS REMAINDER FROM LSTLMTCK
COMFLGS  DS    X                   FLAG BYTES FOR PROCESS CONTROL
TWOADDRS EQU   X'80'               1 INDICATE ADDR RANGE
ARTIMSW  EQU   X'40'               1 INDICATE CONTROL IS ARTIFICIAL
NOINDENT EQU   X'20'               1 INDICATES DATA NOT TO BE INDENTED
SECOND   EQU   X'10'               1 INDICATES PROCESSING 2ND GROUP
WRAPSW   EQU   X'08'               1 INDICATES 2ND REG LOWER THAN 1ST
PARSEFLG EQU   X'04'               SW SHOWS IO REQUESTED BY PARSE EXIT
OUTCORE  EQU   X'02'               REQUEST EXTENDS OUT OF CORE
DATASIZE EQU   X'01'               SYMBOLIC FOR NUMBER OF HEX FLDS/GRP
         SPACE
*  THE FOLLOWING FIELDS DEFINE A VALUE PDE FOR CONVERTING DATA.
VPDE     DS    0F                  VALUE PDE FOR CONVERTING DATA
VPDEPT   DS    A                   PTR TO DATA
VPDEL    DS    H                   LENGTH OF DATA FOR CONVERSION
VPDEFLG  DS    X                   FLAGS
VPDET    DS    X                   HEX TYPE CODE FOR VALUE.
         SPACE
RPTSIZE  EQU   *-LSTRPT            LNTH OF REUSED SECTION.
LMATTR   DS    F                   LENGTH AND MULTIPLICITY FACTOR FLD'S
         ORG   LMATTR              PLACE LNTH AND MULTI IN ONE FULLWORD
BINLEN   DS    H                   CONVERTED LENGTH GIVEN BY USER
BINMUL   DS    H                   CONVERTED MLTPLCTY GIVEN BY USER
LXCTL    XCTL  ,SF=L               RESERVE SPACE FOR LIST FORM OF XCTL
ENDOBUF  DS    A                   CONTAINS MAX BUF ADDR + 1
ENDOGRP  DS    A                   CONTAINS GROUP STOP ADDRESS
DATAPT   DS    2F                  DATA PTR LIST FOR IKJEGIO1
         SPACE
TYPESAVE DS    X                   CONTAINS SPECIFIED OR DEFAULTED TYPE
RETRYSAV DS    AL3                 CONTAINS MAINLINES STAE RETRY ADDR
LSTFLGS  DS    X                   FLAG BYTES TO SAVE PARSE DATA
TYPEFLG  EQU   B'10000000'         SET TO ONE IF TYPE KEYWORD USED
LNTHFLG  EQU   B'01000000'         SET TO ONE IF LENGTH KEYWORD USED
MULTIFLG EQU   B'00100000'         SET TO ONE IF MULTIPLICITY GIVEN
         SPACE
         DS    X                   SPILL BYTE FOR HOLDAREA  ON ODD ADDR
LASTINST DS    X                   BYTE FOR INSTR FORMATTING
TURNOFF  EQU   B'00000000'         USED TO TURN OFF LAST INST SW
INSTSW   EQU   B'11111111'         USED TO COMPARE IF LAST INST
         DS    0D                  ALIGN HOLDAREA
HOLDAREA DS    XL32                HOLDS DATA BEING CONVERTED CURRENTLY
WKWORDS  DS    3F                  FWDS-DYNAMIC WK AREA
*                                  WHEN CALLED TO CK VAL. OF ADD
STAELIST STAE  MF=L
         SPACE
LWLNTH   EQU   *-LSTWORK           LENGTH OF DSECT
         EJECT
         TITLE 'IKJEGLSA, ''LIST'', TCOMTAB, COMMUNICATIONS DSECT'
         TCOMTAB
         TITLE 'IKJEGLSA, ''LIST'', IKJPARMA, ADDRESS PDE MAP DSECT'
         IKJPARMA
APL      EQU   PDECHAIN-IKJPARMA   SYMBOLIC LENGTH OF AN ADDRESS PDE
         TITLE 'IKJEGLSA, ''LIST'', BRKELEM, BREAK ELEMENT MAP DSECT'
         BRKELEM
CVTDSECT DSECT
*        CVT
CVTPTR   EQU   16                                                 .PRC.
CVTTCBP  DS    F                                                  .PRC.
*        IKJTCB
TCB      DSECT                                                    .PRC.
TCBTRN   EQU   TCB+X'14'                                          .PRC.
         END
