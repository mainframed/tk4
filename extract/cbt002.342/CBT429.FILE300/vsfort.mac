         TITLE 'VS FORTRAN TSO PROMPTER - FORTVPMT'
***********************************************************************
*                                                                     *
*                    VS FORTRAN TSO PROMPTER                          *
*                                                                     *
*        THIS PROMPTER WILL PARSE THE USER SUPPLIED TSO COMMAND       *
*        OPTIONS, ALLOCATE THE NECESSARY DATASETS, CONSTRUCT THE      *
*        APPROPIATE PARM STRING AND ALTERNATE DDNAME LIST, AND        *
*        XCTL TO THE 2ND LOAD OF THE VS FORTRAN PROMPTER.             *
*                                                                     *
*        AUTHOR ----                                                  *
*          JOHN SILL                                                  *
*          C.B.I INDUSTRIES (CBI)                                     *
*          800 JORIE BLVD                                             *
*          OAK BROOK, IL 60521                                        *
*          TEL. (312) 654-7439                                        *
*                                                                     *
*        MAINTENANCE ACTIVITY LOG ----                                *
*                                                                     *
*         PLEASE REPORT ANY BUGS OR ENHANCEMENTS TO AUTHOR ABOVE.     *
*                                                                     *
*         VERSION    DATE    AUTHOR        DESCRIPTION                *
*          01.00   10/10/83   JRS     INITIAL IMPLEMENTATION          *
*          01.01   11/04/83   JRS     FIXED SYSPRINT DUMMY ALLOCATION *
*          02.00   03/01/85   JRS     UPDATED FOR RELEASE 4.0 PARMS   *
*                                                                     *
*        MODULE ATTRIBUTES ---                                        *
*          REENTERANT, REUSABLE, REFRESHABLE, NOT AUTHORIZED          *
*                                                                     *
*        INSTALLATION NOTES ---                                       *
*          - CUSTOMIZE THE FORTVS LOCAL MACRO BELOW TO CONFORM TO     *
*            YOUR INSTALLATIONS DEFAULT COMPILER OPTIONS.             *
*                                                                     *
*          - SPECIFY THE VERSION OF THE VS FORTRAN COMPILER THIS      *
*            PROMPTER IS TO SUPPORT BY EITHER CHANGING THE VALUE      *
*            SPECIFIED ON THE FORTVVER MACRO BELOW OR PROVIDING A     *
*            &SYSPARM VALUE AT COMPILE TIME.                          *
*                                                                     *
*          - VERIFY THE &P2NDLID AND &COMPID VARIABLES BELOW          *
*            INSURING THEY SPECIFY THE MODULE NAMES OF THE PROMPTER   *
*            2ND LOAD AND VS FORTRAN COMPILER AT YOUR INSTALLATION.   *
*                                                                     *
*        OTHER NOTES---                                               *
*          THE "TASKLIB" PARAMETER IS NOT DOCUMENTED IN THE HELP      *
*          MEMBER FOR THIS PROMPTER, BUT CAN BE USED TO TEST NEW      *
*          VERSIONS OF THE VS FORTRAN COMPILER AS THE 2ND LOAD OF     *
*          THIS PROMPTER WILL POINT TO THE LIBRARY SPECIFIED IN THE   *
*          "TASKLIB" PARM WHEN ATTACHING THE COMPILER.                *
*                                                                     *
***********************************************************************
         EJECT
         MACRO
         FORTVVER &V
.**********************************************************************
.*                                                                    *
.*       THIS MACRO SPECIFIES THE VERSION OF THE VS FORTRAN COMPILER  *
.*       THAT THIS PROMPTER IS TO BE GENERATED FOR.  ANY &SYSPARM     *
.*       VALUE SPECIFIED WILL OVERRIDE THE VALUE CODED ON THIS MACRO. *
.*       THE VALUE SPECIFIED FOR THE VERSION NUMBER SHOULD BE A TWO   *
.*       DIGIT NUMERIC VALUE (I.E. VERSION 3.1 = 31).                 *
.*                                                                    *
.**********************************************************************
         GBLA  &CVER
         LCLC  &A,&B
&CVER    SETA  &V
         MNOTE *,'****************************************************'
         AIF   ('&SYSPARM' EQ '').NSYSP
&CVER    SETA  &SYSPARM
         MNOTE *,'*         SYSPARM OVERRIDE ACCEPTED'
.NSYSP   ANOP
&A       SETC  '&CVER'(1,1)
&B       SETC  '&CVER'(2,1)
         MNOTE *,'*         THIS PROMPTER WAS GENERATED FOR'
         MNOTE *,'*             VERSION &A..&B'
         MNOTE *,'*         OF THE VS FORTRAN COMPILER'
         MNOTE *,'****************************************************'
         MEND
         MACRO
        FORTVS &LOAD=LOAD,&PRINT=NOPRINT,&SOURCE=NOSOURCE,&LIST=NOLIST,*
               &MAP=NOMAP,&TERM=TERM,&GOSTMT=NOGOSTMT,&FIPS=NOFIPS,    *
               &TEST=NOTEST,&FLAG=I,&FORM=FIXED,&SDUMP=NOSDUMP,        *
               &SRCFLG=NOSRCFLG,&SYM=NOSYM,&TRMFLG=TRMFLG,&XREF=NOXREF,*
               &LANGLVL=66,&OPTL=3,&OPT=OPTIMIZE,&RENT=NORENT,&SXM=SXM,*
               &AUTODBL=NONE
         GBLA  &CVER               COMPILER VERSION
FORTVPCL IKJPARM
INPUTDSN IKJPOSIT DSTHING,LIST,PROMPT='INPUT DATA SET NAME',           *
               HELP=('THE NAME(S) OF THE DATA SET(S) CONTAINING THE FOR*
               TRAN SOURCE STATEMENTS'),VALIDCK=DSNCHECK
         AIF   (&CVER LT 40).NOTV4
RENTOPT  IKJKEYWD DEFAULT='&RENT'
         IKJNAME 'NORENT'
         IKJNAME 'RENT'
SXMOPT   IKJKEYWD DEFAULT='&SXM'
         IKJNAME 'NOSXM'
         IKJNAME 'SXM'
ADBLOPT  IKJKEYWD
         IKJNAME 'AUTODBL',SUBFLD=ADBLSF,ALIAS=('AD')
.NOTV4   ANOP
CHRLNOPT IKJKEYWD
         IKJNAME 'CHARLEN',SUBFLD=CHARLSF,ALIAS=('CL')
CIOPT    IKJKEYWD
         IKJNAME 'CI',SUBFLD=CISF
DCOPT    IKJKEYWD
         IKJNAME 'DC',SUBFLD=DCSF
FIPSOPT  IKJKEYWD DEFAULT='&FIPS'
         IKJNAME 'NOFIPS'
         IKJNAME 'FIPS',SUBFLD=FIPSSF
FLAGOPT  IKJKEYWD DEFAULT='FLAG&FLAG'
         IKJNAME 'FLAGI'
         IKJNAME 'FLAGW'
         IKJNAME 'FLAGE'
         IKJNAME 'FLAGS'
FORMOPT  IKJKEYWD DEFAULT='&FORM'
         IKJNAME 'FIXED'
         IKJNAME 'FREE'
GOSTOPT  IKJKEYWD DEFAULT='&GOSTMT'
         IKJNAME 'NOGOSTMT',ALIAS=('NOGS')
         IKJNAME 'GOSTMT',ALIAS=('GS')
LNGLVOPT IKJKEYWD
         IKJNAME 'LANGLVL',SUBFLD=LLSF,ALIAS=('LVL')
LIBOPT   IKJKEYWD
         IKJNAME 'NOLIB'
         IKJNAME 'LIB',SUBFLD=LIBSF
TASKLOPT IKJKEYWD
         IKJNAME 'TASKLIB',SUBFLD=TASKLSF
LINECOPT IKJKEYWD
         IKJNAME 'LINECNT',SUBFLD=LINCT,ALIAS=('LC')
LISTOPT  IKJKEYWD DEFAULT='&LIST'
         IKJNAME 'NOLIST'
         IKJNAME 'LIST'
LOADOPT  IKJKEYWD DEFAULT='&LOAD'
         IKJNAME 'NOLOAD',ALIAS=('NOOBJECT')
         IKJNAME 'LOAD',SUBFLD=LOADNAME,ALIAS=('OBJECT')
MAPOPT   IKJKEYWD DEFAULT='&MAP'
         IKJNAME 'NOMAP'
         IKJNAME 'MAP'
PGMNAME  IKJKEYWD
         IKJNAME 'NAME',SUBFLD=PROGNME
OPTOPT   IKJKEYWD DEFAULT='&OPT'
         IKJNAME 'NOOPTIMIZE'
         IKJNAME 'OPTIMIZE',SUBFLD=OPTSF
         AIF   ('&PRINT' EQ '').F01
PRINTOPT IKJKEYWD DEFAULT='&PRINT'
         AGO   .F02
.F01     ANOP
PRINTOPT IKJKEYWD
.F02     ANOP
         IKJNAME 'NOPRINT'
         IKJNAME 'PRINT',SUBFLD=PRINTNME
SDUMPOPT IKJKEYWD DEFAULT='&SDUMP'
         IKJNAME 'NOSDUMP'
         IKJNAME 'SDUMP'
SOURCOPT IKJKEYWD DEFAULT='&SOURCE'
         IKJNAME 'NOSOURCE'
         IKJNAME 'SOURCE'
SRCFOPT  IKJKEYWD DEFAULT='&SRCFLG'
         IKJNAME 'NOSRCFLG',ALIAS=('NOSF')
         IKJNAME 'SRCFLG',ALIAS=('SF')
SYMOPT   IKJKEYWD DEFAULT='&SYM'
         IKJNAME 'NOSYM'
         IKJNAME 'SYM'
TERMOPT  IKJKEYWD DEFAULT='&TERM'
         IKJNAME 'NOTERMINAL'
         IKJNAME 'TERMINAL'
TESTOPT  IKJKEYWD DEFAULT='&TEST'
         IKJNAME 'NOTEST'
         IKJNAME 'TEST'
TRMFOPT  IKJKEYWD DEFAULT='&TRMFLG'
         IKJNAME 'NOTRMFLG',ALIAS=('NOTF')
         IKJNAME 'TRMFLG',ALIAS=('TF')
XREFOPT  IKJKEYWD DEFAULT='&XREF'
         IKJNAME 'NOXREF'
         IKJNAME 'XREF'
         AIF   (&CVER LT 40).NOTV4A
ADBLSF   IKJSUBF
ADBLV    IKJIDENT 'AUTODBL VALUE',FIRST=ALPHANUM,OTHER=ALPHANUM,       *
               MAXLNTH=7,DEFAULT='&AUTODBL',VALIDCK=ADBLCHK,           *
               HELP=('THE LEVEL OF AUTOMATIC PRECISION INCREASE REQUIRE*
               D')
.NOTV4A  ANOP
CHARLSF  IKJSUBF
CHARLNV  IKJIDENT 'CHARACTER LENGTH INTEGER',FIRST=NUMERIC,            *
               OTHER=NUMERIC,MAXLNTH=5,VALIDCK=CHARLCHK,               *
               PROMPT='MAX CHARACTER VARIABLE LENGTH',                 *
               HELP=('THE MAXIMUM LENGTH PERMITTED FOR ANY CHARACTER VA*
               RIABLE')
CISF     IKJSUBF
CINUMS   IKJIDENT 'INCLUDE IDENTIFIER(S)',LIST,FIRST=NUMERIC,          *
               OTHER=NUMERIC,MAXLNTH=6,                                *
               PROMPT='INCLUDE IDENTIFIER(S)',                         *
               HELP=('THE IDENTIFICATION NUMBER(S) OF THE INCLUDES TO B*
               E PROCESSED')
DCSF     IKJSUBF
DCNAMES  IKJIDENT 'COMMON BLOCK NAME(S)',LIST,FIRST=NONATABC,          *
               OTHER=NONATNUM,MAXLNTH=6,                               *
               PROMPT='COMMON BLOCK NAME(S)',                          *
               HELP=('THE NAME(S) OF THE COMMON BLOCK(S) TO BE ALLOCATE*
               D AT EXECUTION TIME')
FIPSSF   IKJSUBF
FIPSVAL  IKJKEYWD DEFAULT='F'
         IKJNAME 'F'
         IKJNAME 'S'
LLSF     IKJSUBF
LANGLVAL IKJIDENT 'LANGUAGE LEVEL',FIRST=NUMERIC,DEFAULT='&LANGLVL',   *
               OTHER=NUMERIC,MAXLNTH=2,VALIDCK=LANGLCHK,               *
               HELP=('THE LANGUAGE LEVEL IN WHICH THE SOURCE PROGRAM WA*
               S WRITTEN - "66" OR "77"')
TASKLSF  IKJSUBF
TASKLDSN IKJPOSIT DSNAME,                                              *
               PROMPT='TASK LIBRARY DATA SET NAME',                    *
               HELP=('THE NAME OF THE DATA SET CONTAINING THE VS FORTRA*
               N COMPILER'),VALIDCK=TASKLCHK
LIBSF    IKJSUBF
LIBDSN   IKJPOSIT DSNAME,LIST,                                         *
               PROMPT='INCLUDE LIBRARY DATA SET NAME(S)',              *
               HELP=('THE NAME(S) OF THE DATA SET(S) CONTAINING THE INC*
               LUDED FORTRAN SOURCE STATEMENTS'),VALIDCK=LIBCHECK
LINCT    IKJSUBF
LINECNTT IKJIDENT 'LINECNT INTEGER',FIRST=NUMERIC,OTHER=NUMERIC,       *
               MAXLNTH=2,PROMPT='LINECNT INTEGER',VALIDCK=LINE#CHK,    *
               HELP=('THE NUMBER OF LINES PER PAGE FOR THE OUTPUT LISTI*
               NG')
PROGNME  IKJSUBF
PROGNAME IKJIDENT 'PROGRAM NAME',FIRST=ALPHA,OTHER=ALPHANUM,           *
               MAXLNTH=6,PROMPT='PROGRAM NAME',                        *
               HELP=('THE NAME OF THE PROGRAM TO BE COMPILED')
LOADNAME IKJSUBF
LOADDSN  IKJPOSIT DSNAME
OPTSF    IKJSUBF
OPTVAL   IKJIDENT 'OPTIMIZATION LEVEL',FIRST=ALPHANUM,DEFAULT='&OPTL', *
               MAXLNTH=1,VALIDCK=OPT#CHK,                              *
               HELP=('THE OPTIMIZATION LEVEL TO BE USED DURING COMPILAT*
               ION')
PRINTNME IKJSUBF
PRINTDSN IKJPOSIT DSTHING,VALIDCK=PRINTCHK
         IKJENDP
         MEND
         SPACE 2
         MACRO
&NAME    BLDOPTS
         LCLA  &NOPT,&C
&NOPT    SETA  N'&SYSLIST
&C       SETA  0
         AIF   ('&NAME' EQ '').NONAME
&NAME    DS    0H
.NONAME  ANOP
.LOOP    ANOP
&C       SETA  &C+1
         AIF   (&C GT &NOPT).END
         LA    R2,&SYSLIST(&C).OPT ADDR OF PARSED OPTION
         LA    R6,&SYSLIST(&C)     ADDR OF OPTION TEXT TO INSERT
         BALR  R14,R15             PERFORM OPTION TEXT INSERTION
         AGO   .LOOP
.END     MEND
         EJECT
         GBLA  &CVER               COMPILER VERSION
         LCLC  &P2NDLID,&COMPID
&P2NDLID SETC  'VSFORT2'           PROMPTER 2ND LOAD MODULE NAME
&COMPID  SETC  'FORTVS'            VS FORTRAN COMPILER MODULE NAME
FORTVPMT CSECT
         FORTVVER 40
         SPACE
R0       EQU   0                   REGISTER 0
R1       EQU   1                   REGISTER 1
R2       EQU   2                   REGISTER 2
R3       EQU   3                   REGISTER 3
R4       EQU   4                   REGISTER 4
R5       EQU   5                   REGISTER 5
R6       EQU   6                   REGISTER 6
R7       EQU   7                   REGISTER 7
R8       EQU   8                   REGISTER 8
R9       EQU   9                   REGISTER 9
R10      EQU   10                  REGISTER 10
R11      EQU   11                  REGISTER 11
R12      EQU   12                  REGISTER 12
R13      EQU   13                  REGISTER 13
R14      EQU   14                  REGISTER 14
R15      EQU   15                  REGISTER 15
         SPACE 2
OPTOFF   EQU   X'01'               INDICATES NEGATIVE OPTION
OPTON    EQU   X'02'               INDICATES POSITIVE OPTION
DIRSPACE EQU   1                   DIRECTORY SPACE QUANTITY
NAMEOPT  EQU   X'01'               INDICATES NAME OPTION WAS SPECIFIED
LNCTOPT  EQU   X'01'               INDICATES LINECNT OPTION SPECIFIED
CHLNOPT  EQU   X'01'               INDICATES CHARLEN OPTION SPECIFIED
CIOPTON  EQU   X'01'               INDICATES CI OPTION SPECIFIED
DCOPTON  EQU   X'01'               INDICATES DC OPTION SPECIFIED
FIXEDOPT EQU   X'01'               INDICATES FIXED FORMAT SOURCE
LVLOPT   EQU   X'01'               INDICATES LANGLVL OPTION SPECIFIED
ADBLOON  EQU   X'01'               INDICATES AUTODBL OPTION SPECIFIED
ENDLIST  EQU   X'80'               USED TO DENOTE END OF PARM LIST
         EJECT
***********************************************************************
*                                                                     *
*        PROMPTER INITIALIZATION ROUTINE                              *
*                                                                     *
***********************************************************************
         SAVE  (14,12)             SAVE CALLER'S REGISTERS
         LR    R12,R15             COPY ENTRY ADDR
         USING FORTVPMT,R12,R8     SET PROMPTER ADDRESSABILITY
         LA    R8,4095(,R12)       LOAD 2ND
         LA    R8,1(,R8)             BASE REG
         LR    R10,R1              COPY CPPL ADDRMMAND PROCESSOR
         USING CPPL,R10            SET CPPL DSECT ADDRESSABILITY
         LA    R0,TWORKAL          SUBPOOL AND LENGTH OF GETMAIN
         GETMAIN R,LV=(0)          OBTAIN PROMPTER WORKAREA
         LR    R11,R1              SAVE WORKAREA ADDR
         USING WORKAREA,R11        SET WORKAREA DSECT ADDRESSABILITY
         ST    R13,SAVEAREA+4      CHAIN
         ST    R11,8(R13)            SAVEAREAS
         LR    R13,R11             POINT TO OUR SAVEAREA
         LA    R2,STORZERO         ADDR OF AREA TO BE ZEROED
         LA    R3,ZEROSTOR         LENGTH OF AREA TO BE ZEROED
         SR    R4,R4               ZERO FROM ADDR
         SR    R5,R5               ZERO FROM LGTH AND PAD CHAR
         MVCL  R2,R4               ZERO GOTTEN MEMORY
         LA    R6,PARSEPL          LOAD PPL ADDR
         USING PPL,R6              SET PPL DSECT ADDRESSABILITY
         LA    R7,DAIRPL           LOAD DAPL ADDR
         USING DAPL,R7             SET DAPL DSECT ADDRESSABILITY
         LA    R14,IOPLPL          LOAD IOPL ADDR
         USING IOPL,R14            SET IOPL DSECT ADDRESSABILITY
         LM    R1,R4,CPPL          GET CBUF,UPT,PSCB AND ECT ADDRS
         LR    R5,R3               COPY PSCB ADDR
         LR    R3,R4               MOVE ECT ADDR
         LA    R4,ECB              GET THE ADDRESS OF THE ECB
         STM   R2,R4,PPL           INITIALIZE PARSE PARM LIST
         STM   R2,R5,DAPL          INITIALIZE DAIR PARM LIST
         STM   R2,R4,IOPL          INITIALIZE I/O SERVICE PARM LIST
         ST    R1,PPLCBUF          STORE CMD BUF ADDR IN PARSE PARM
         LA    R9,GFAREA           ADDR OF GEN FAIL PARM LIST
         ST    R9,GFAREAP          STORE IT IN POINTER WORD
         USING  GFDSECTD,R9        SET GF DSECT ADDRESSABILITY
         ST    R10,GFCPPLP         STORE CPPL ADDR
         ST    R4,GFECBP           STORE ECB ADDR
         DROP  R9                  REMOVE GF DSECT
         LA    R9,DFAREA           ADDR OF DAIR FAIL PARM LIST
         USING DFDSECTD,R9         SET DF DSECT ADDRESSABILITY
         ST    R10,DFCPPLP         STORE CPPL
         LA    R0,DAIRFRC          ADDR OF FAILURE RETURN CODE
         ST    R0,DFRCP            STORE IT IN DAIR FAIL PARM LIST
         LA    R0,DFBUFP           ADDR OF IKJEFF02 (UNKNOWN SO -> 0)
         ST    R0,DFJEFF02         STORE IT IN DAIR FAIL PARM LIST
         LA    R0,DFDAIRID         ADDR OF DAIR IDENTIFIER
         ST    R0,DFIDP            STORE IT IN DAIR FAIL PARM LIST
         LA    R0,DAIRPL           ADDR OF DAIR PARM LIST
         ST    R0,DFDAPLP          STORE IT IN DAIR FAIL PARM LIST
         DROP  R9                  REMOVE DF DSECT
         LA    R9,MFPL             ADDR OF TSMSG PARM LIST
         USING MTDSECTD,R9         SET DSECT ADDRESSABILITY
         ST    R10,MTCPPLP         STORE CPPL ADDR
         ST    R4,MTECBP           STORE ECB ADDR
         LA    R0,MTCSECTP         ADDR OF MSG DESC PARM LIST
         ST    R0,MTPLPTR          STORE IN PARM LIST
         L     R0,FVMSGCA          LOAD ADDR OF MSG CSECT
         ST    R0,MTCSECTP         STORE IN PARM LIST
         MVI   MTSW1,MTPUTLSW      SET PUTLINE INDICATOR
         LA    R0,MSGSEG1          ADDR OF 1ST MSG SEGMENT
         LA    R1,MSGSEG2          ADDR OF 2ND MSG SEGMENT
         STM   R0,R1,MTINSRTS      STORE ADDRS IN PARM LIST
         DROP  R9                  REMOVE TSMSG DSECT
         SR    R1,R1               CLEAR
         ST    R1,ECB              ZERO ECB
         L     R0,ADDRPCL          LOAD PCL ADDR
         LA    R1,PDLADDR          LOAD ANSWER WORD ADDR
         ST    R0,PPLPCL           STORE IN PPL
         ST    R1,PPLANS           STORE IN PPL
         ST    R13,PPLUWA          STORE ADDR OF USER WORK IN PPL
         DROP  R6,R10,R14          REMOVE DSECTS
         LA    R9,DAIRPB           ADDR OF DAIR PARM BLOCKS
         ST    R9,DAPLDAPB         STORE IN DAIR PARM LIST
         DROP  R7                  REMOVE DAPL DSECT
         EJECT
***********************************************************************
*                                                                     *
*        INVOKE PARSE TO VALIDATE USER COMMAND INPUT                  *
*                                                                     *
***********************************************************************
         SPACE 1
         CALLTSSR EP=IKJPARS,MF=(E,PARSEPL) CALL PARSE
         LTR   R15,R15             TEST THE RETURN CODE FROM PARSE
         LA    R0,20               LOAD CONSTANT 20
         BZ    PARSEOK             ... NORMAL, GO
         CR    R15,R0              PARSE EXIT REQUEST TERMINATION
         LA    R0,4                LOAD CONSTANT 4
         BE    EXITRC12            ... YES, GO
         CR    R15,R0              WAS PARSE RC = 4
         BE    EXITRC12            ... YES, GO
         LA    R0,GFPARSE          LOAD PARSE ID FOR GEN FAIL
         BAL   R10,GENFAIL         CALL GENERAL FAIL ROUTINE
         B     TERMNATE
         SPACE 1
PARSEOK  EQU   *
         L     R7,PDLADDR          ADDR OF PARSE DESCRIPTOR LIST
         USING IKJPARMD,R7
         EJECT
***********************************************************************
*                                                                     *
*        IF NOPRINT THEN FORCE NOSOURCE,NOLIST,NOMAP,NOXREF,NOSRCFLG  *
*        IF SOURCE,LIST,MAP,XREF, OR SRCFLG THEN FORCE PRINT          *
*        IF PRINT(*) FORCE NOTERM, SXM                                *
*                                                                     *
***********************************************************************
         SPACE 1
         CLI   PRINTOPT+1,OPTOFF   TEST IF NOPRINT WAS SPECIFIED
         BNE   PRTOOK              ... YES, GO
         MVI   SOURCOPT+1,OPTOFF   SET NOSOURCE,
         MVI   LISTOPT+1,OPTOFF    NOLIST,
         MVI   MAPOPT+1,OPTOFF     NOMAP,
         MVI   XREFOPT+1,OPTOFF    NOXREF,
         MVI   SRCFOPT+1,OPTOFF    AND NOSRCFLG
         B     TSTPTRM             GO TEST PRINT(*)
         SPACE 1
PRTOOK   EQU   *
         CLI   PRINTOPT+1,OPTON    WAS PRINT SPECIFIED
         BE    TSTPTRM             ... YES, GO
         CLI   SOURCOPT+1,OPTON    WAS SOURCE SPECIFIED
         BE    SETPOPT             ... YES, GO
         CLI   LISTOPT+1,OPTON     WAS LIST SPECIFIED
         BE    SETPOPT             ... YES, GO
         CLI   MAPOPT+1,OPTON      WAS MAP SPECIFIED
         BE    SETPOPT             ... YES, GO
         CLI   XREFOPT+1,OPTON     WAS XREF SPECIFIED
         BE    SETPOPT             ... YES, GO
         CLI   SRCFOPT+1,OPTON     WAS SRCFLG SPECIFIED
         BE    SETPOPT             ... YES, GO
         MVI   PRINTOPT+1,OPTOFF   FORCE NOPRINT
         B     TSTPTRM             GO TEST PRINT(*)
         SPACE 1
SETPOPT  MVI   PRINTOPT+1,OPTON    FORCE PRINT OPTION
         SPACE 1
TSTPTRM  EQU   *
         L     R4,PRINTDSN         LOAD PRINT DSNAME ADDR
         LTR   R4,R4               PRINT DSNAME OMITTED?
         BZ    TERMOOK             ... YES, GO
         CLI   0(R4),C'*'          TERMINAL ALLOCATION REQUESTED?
         BNE   TERMOOK             ... NO, GO
         MVI   TERMOPT+1,OPTOFF    SET NOTERM
         MVI   TRMFOPT+1,OPTOFF    SET NOTRMFLG
         AIF   (&CVER LT 40).NOFSXM
         MVI   SXMOPT+1,OPTON      FORCE SXM FOR TERMINAL OUTPUT
.NOFSXM  ANOP
         SPACE 1
TERMOOK  EQU   *
         EJECT
***********************************************************************
*                                                                     *
*        ALLOCATE SYSPRINT DATASET                                    *
*                                                                     *
***********************************************************************
         SPACE 1
         CLI   PRINTOPT+1,OPTOFF   NOPRINT SPECIFIED?
         LA    R0,SYSPRINT         ADDR OF SYSPRINT DDNAME SLOT
         ST    R0,ADDNPTR          SAVE FOR DDNAME MOVE
         BE    NOPRTOPT            ... YES, GO
         LA    R1,LISTT            ADDR OF DSNAME QUALIFIER
         LA    R2,PRINTDSN         ADDR OF PRINT DSNAME PARSE DATA
         MVC   NEWSPACE,PRTSPACE   SET SPACE ALLOCATION VALUES
         NI    SWBYTE,255-BLDL-OLD-LIBR-INP-LIBT RESET INDICATORS
         BAL   R14,VCHKRTN         PERFORM ALLOCATION
         LTR   R15,R15             ANY ERRORS
         BNZ   TERMNATE            ... YES, GO
         B     TSTLOAD
         SPACE 1
NOPRTOPT EQU   *
         BAL   R10,COMDA08R        CONSTRUCT STD DAIR 08 BLOCK
         USING DAPB08,R9
         SR    R15,R15             ZERO
         ST    R15,DA08PDSN          DSN POINTER
         MVI   DA08MNM,C' '        BLANK MEMBER
         MVC   DA08MNM+1(L'DA08MNM-1),DA08MNM NAME
         MVC   DA08PSWD,DA08MNM    AND PASSWORD
         MVI   DA08CTL,DA08DMMY    INDICATE DD DUMMY REQUEST
         BAL   R10,DAIRLINK        CALL DAIR
         LTR   R15,R15             ANY ERRORS
         MVC   SYSPRINT,DA08DDN    MOVE DDNAME TO ALT DDNAME LIST
         DROP  R9
         BZ    TSTLOAD             ... NO, GO
         LA    R10,TERMNATE         ERROR EXIT
         B     DAIRERR             ANALYZE DAIR ERROR
         EJECT
***********************************************************************
*                                                                     *
*        ALLOCATE THE SYSLIN DATASET                                  *
*                                                                     *
***********************************************************************
         SPACE 1
TSTLOAD  EQU   *
         CLI   LOADOPT+1,OPTON     WAS LOAD REQUESTED?
         BNE   NOLOPT              ... NO, GO
         LA    R1,OBJ              ADDR OF DSNAME QUALIFIER
         LA    R2,LOADDSN          ADDR OF LOAD DSNAME
         LA    R0,SYSLIN           ADDR OF SYSLIN DDNAME AREA
         ST    R0,ADDNPTR          SAVE FOR DDNAME MOVE
         MVC   NEWSPACE,OBJSPACE   SET SPACE ALLOCATION VALUES
         NI    SWBYTE,255-BLDL-OLD-LIBR-INP-LIBT RESET INDICATORS
         BAL   R14,VCHKRTN         PERFORM ALLOCATION
         LTR   R15,R15             ANY ERRORS
         BNZ   TERMNATE            ... YES, GO
         SPACE 1
NOLOPT   EQU   *
         EJECT
***********************************************************************
*                                                                     *
*        ALLOCATE SYSTERM DATASET                                     *
*                                                                     *
***********************************************************************
         SPACE 1
         CLI   TERMOPT+1,OPTON     TERM SPECIFIED
         LA    R0,SYSTERM          ADDR OF SYSTERM DDNAME SLOT
         LA    R2,TERMPDE          ADDR OF TERMINAL DUMMY PDE
         ST    R0,ADDNPTR          SAVE FOR DDNAME MOVE
         BNE   NOTRMOPT            ... NO, GO
         NI    SWBYTE,255-BLDL-OLD-LIBR-INP-LIBT RESET INDICATORS
         BAL   R14,VCHKRTN         PERFORM TERMINAL ALLOCATION
         LTR   R15,R15             ANY ERRORS?
         BNZ   TERMNATE            ... YES, GO
         SPACE 1
NOTRMOPT EQU   *
         EJECT
***********************************************************************
*                                                                     *
*        CONCATENATE SYSIN IF NECESSARY                               *
*                                                                     *
***********************************************************************
         SPACE 1
         LH    R1,INPDDCNT         LOAD INPUT DDNAME COUNTER
         LA    R0,1                CONSTANT ONE
         CR    R1,R0               CONCATENATION NEEDED
         MVC   SYSIN,INPDDNMS      MOVE 1ST DDNAME TO ALT DDNAME LIST
         BNH   NICONCAT            ... NO, GO
         USING DAPB0C,R9           SET DAPB0C DSECT ADDRESSABILITY
         XC    DAPB0C(DAPB0CLN),DAPB0C ZERO PARM LIST
         MVI   DA0CCD+1,X'0C'      SET ENTRY CODE
         STH   R1,DA0CNUMB         SET NBR OF DDNAMES
         SLL   R1,3                TIMES 8
         SR    R1,R0               CALC MACHINE LENGTH
         EX    R1,MOVIDDNS         MOVE DDNAMES TO PARM LIST
         BAL   R10,DAIRLINK        CALL DAIR
         LTR   R15,R15             ANY ERRORS
         BZ    ICONCOK             ... NO, GO
         BAL   R10,DAIRERR         CALL DAIR ERROR ANALYZER
         B     TERMNATE            QUIT
         SPACE 1
MOVIDDNS MVC   DA0CDDN(*-*),INPDDNMS EXECUTED MOVE
         SPACE 1
ICONCOK  EQU   *
         OI    SWBYTE,ICONCAT      INDICATE CONCATENATION DONE
         SPACE 1
NICONCAT EQU   *
         DROP  R9                  REMOVE DAPB0C DSECT
         EJECT
***********************************************************************
*                                                                     *
*        CONCATENATE SYSLIB DATASETS IF NECESSARY                     *
*                                                                     *
***********************************************************************
         SPACE 1
         LH    R1,LIBDDCNT         LOAD SYSLIB DDNAME COUNTER
         LA    R0,1                CONSTANT ONE
         CR    R1,R0               CONCATENATION NEEDED
         MVC   SYSLIB,LIBDDNMS     MOVE 1ST DDNAME TO ALT DDNAME LIST
         BNH   NLCONCAT            ... NO, GO
         USING DAPB0C,R9           SET DAPB0C DSECT ADDRESSABILITY
         XC    DAPB0C(DAPB0CLN),DAPB0C ZERO PARM LIST
         MVI   DA0CCD+1,X'0C'      SET ENTRY CODE
         STH   R1,DA0CNUMB         SET NBR OF DDNAMES
         SLL   R1,3                TIMES 8
         SR    R1,R0               CALC MACHINE LENGTH
         EX    R1,MOVLDDNS         MOVE DDNAMES TO PARM LIST
         BAL   R10,DAIRLINK        CALL DAIR
         LTR   R15,R15             ANY ERRORS
         BZ    LCONCOK             ... NO, GO
         BAL   R10,DAIRERR         CALL DAIR ERROR ANALYZER
         B     TERMNATE            QUIT
         SPACE 1
MOVLDDNS MVC   DA0CDDN(*-*),LIBDDNMS EXECUTED MOVE
         SPACE 1
LCONCOK  EQU   *
         OI    SWBYTE,LCONCAT      INDICATE CONCATENATION DONE
         SPACE 1
NLCONCAT EQU   *
         DROP  R9                   REMOVE DAPB0C DSECT
         EJECT
***********************************************************************
*                                                                     *
*        BUILD VS FORTRAN PARM STRING                                 *
*                                                                     *
***********************************************************************
         SPACE 1
         SR    R4,R4               CLEAR
         LA    R15,OPTSINS         ADDR OF OPTION INSERTION ROUTINE
         LA    R1,OPTNLIST         ADDR OF OPTION BUILD AREA
         MVC   0(L'NODECK,R1),NODECK MOVE NODECK INTO OPTION LIST
         LA    R1,L'NODECK(R1)     UPDATE POINTER TO THE NEXT AVAIL
         AIF   (&CVER LT 40).NV4OPTS
         BLDOPTS SXM,RENT,SDUMP    ADD VERSION 4 RENT,SXM,SDUMP OPTS
         AGO   .V4OPTS
.NV4OPTS ANOP
         CLI   SDUMPOPT+1,OPTOFF   WAS NOSDUMP SPECIFIED
         BNE   SDUMPON             ... NO, GO
         BLDOPTS SDUMP             ADD NOSDUMP TO OPT STRING
         SPACE 1
SDUMPON  EQU   *
.V4OPTS  ANOP
         BLDOPTS GOST,LIST,LOAD,MAP,SOURC,SRCF,SYM,TERM,       XXXXXXXXX
               TEST,TRMF,XREF      PRECESS YES/NO OPTIONS
         BLDOPTS FIPS              SET UP FIPS OPTION
         CLI   FIPSOPT+1,OPTON     FIPS OPTION REQUESTED
         BNE   INSRTFLG            ... NO, GO
         LH    R6,FIPSVAL          LOAD FIPS VALUE
         IC    R0,FIPSTBL-1(R6)    LOAD PROPER FIPS OPTION CHAR
         MVI   0(R1),C'('          MOVE IN LEADING PAREN
         STC   R0,1(R1)            STORE IT IN OPTION LIST
         MVI   2(R1),C')'          MOVE IN TRAILING PAREN
         LA    R1,3(,R1)           UPDATE POINTER
         SPACE 1
INSRTFLG EQU   *
         MVC   0(L'FLAGTXT,R1),FLAGTXT MOVE ",FLAG(" TO OPTION LIST
         LH    R6,FLAGOPT          LOAD FLAG OPTION NUMBER
         IC    R0,FLAGVALS-1(R6)   GET PROPER FLAG CHARACTER
         STC   R0,L'FLAGTXT(R1)    PLACE IT IN OPTION LIST
         MVI   L'FLAGTXT+1(R1),C')' MOVE IN TRAILING PAREN
         LA    R1,L'FLAGTXT+2(,R1) UPDATE POINTER
         CLI   FORMOPT+1,FIXEDOPT  IS FORMAT "FIXED"
         BNE   INSRTFR             ... NO, GO
         MVC   0(L'FIXED,R1),FIXED MOVE ",FIXED" TO OPTION LIST
         LA    R1,L'FIXED(,R1)     UPDATE POINTER
         B     INSRTLL
         SPACE 1
INSRTFR  EQU   *
         MVC   0(L'FREE,R1),FREE   MOVE ",FREE" TO OPTION LIST
         LA    R1,L'FREE(,R1)      UPDATE POINTER
         SPACE 1
INSRTLL  EQU   *
         CLI   LNGLVOPT+1,LVLOPT   WAS LANGLVL SPECIFIED
         BNE   INSRTO              ... NO, GO
         MVC   0(L'LANGLVL,R1),LANGLVL MOVE ",LVL(" TO OPTION LIST
         LA    R1,L'LANGLVL-1(,R1) UPDATE POINTER
         L     R6,LANGLVAL         ADDR OF LANGLVL VALUE
         LH    R2,LANGLVAL+4       LENGTH OF VALUE
         BAL   R14,INSERTOR        INSERT LANGLVL VALUE
         SPACE 1
INSRTO   EQU   *
         BLDOPTS OPT               ADD OPT KEYWORD TO PARM STRING
         CLI   OPTOPT+1,OPTON      WAS "OPT" SPECIFIED
         BNE   INSRTCHL            ... NO, GO
         MVI   0(R1),C'('          MOVE IN LEADING PAREN
         L     R6,OPTVAL           ADDR OF OPT VALUE
         LH    R2,OPTVAL+4         LENGTH OF VALUE
         BAL   R14,INSERTOR        INSERT OPT VALUE
         SPACE 1
INSRTCHL EQU   *
         CLI   CHRLNOPT+1,CHLNOPT  CHARLEN KEYWORD SPECIFIED
         BNE   INSRTNME            ... NO, GO
         MVC   0(L'CHARLEN,R1),CHARLEN INSERT "CHARLEN(" INTO OPTION
         LA    R1,L'CHARLEN-1(,R1) UPDATE THE POINTER
         L     R6,CHARLNV          ADDR OF CHARLEN VALUE
         LH    R2,CHARLNV+4        LENGTH OF VALUE
         BAL   R14,INSERTOR        INSERT CHARLEN
         SPACE 1
INSRTNME EQU   *
         CLI   PGMNAME+1,NAMEOPT   NAME KEYWORD SPECIFIED?
         BNE   INSRTLIN            ... NO, GO
         MVC   0(L'NAME,R1),NAME INSERT 'NAME(' INTO THE OPTION LIST
         LA    R1,L'NAME-1(R1)    UPDATE THE POINTER
         L     R6,PROGNAME         GET THE ADDRESS OF THE PROGRAM NAME
         LH    R2,PROGNAME+4       GET THE LENGTH OF THE PROGRAM NAME
         BAL   R14,INSERTOR        INSERT PROGRAM NAME
         SPACE 1
INSRTLIN EQU   *
         CLI   LINECOPT+1,LNCTOPT  LINECNT SPECIFIED?
         BNE   INSRTCI               ... NO, GO
         MVC   0(L'LINECNT,R1),LINECNT   INSERT 'LC('
         LA    R1,L'LINECNT-1(R1)     UPDATE THE POINTER
         L     R6,LINECNTT         GET THE ADDRESS OF THE LINECNT
         LH    R2,LINECNTT+4       GET THE LENGTH OF THE LINECNT
         BAL   R14,INSERTOR        INSERT THE LINECNT INTEGER
         SPACE 1
INSRTCI  EQU   *
         CLI   CIOPT+1,CIOPTON     CI OPTION SPECIFIED
         BNE   INSRTDC             ... NO, GO
         MVC   0(L'CI,R1),CI       MOVE ",CI(" TO OPTION LIST
         LA    R1,L'CI-1(,R1)      UPDATE POINTER
         LA    R10,CINUMS          ADDR OF CI VALUES PDE LIST
         SPACE 1
ICILOOP  EQU   *
         L     R6,0(,R10)          ADDR OF CI VALUE
         LH    R2,4(,R10)          LENGTH OF CI VALUE
         BAL   R14,INSERTOR        INSERT CI VALUE INTO OPT LIST
         CLC   FF000000,8(R10)     END OF LIST
         L     R10,8(,R10)         ADDR OF NEXT PDE IN LIST
         BE    INSRTDC             ... YES, GO
         BCTR  R1,0                BACK UP POINTER
         MVI   0(R1),C','          INSERT A COMMA
         B     ICILOOP             LOOP
         SPACE 1
INSRTDC  EQU   *
         CLI   DCOPT+1,DCOPTON     DC OPTION SPECIFIED
         BNE   INSRTAD             ... NO, GO
         MVC   0(L'DC,R1),DC       MOVE ",DC(" TO OPTION LIST
         LA    R1,L'DC-1(,R1)      UPDATE POINTER
         LA    R10,DCNAMES         ADDR OF DC VALUES PDE LIST
         SPACE 1
IDCLOOP  EQU   *
         L     R6,0(,R10)          ADDR OF DC VALUE
         LH    R2,4(,R10)          LENGTH OF DC VALUE
         BAL   R14,INSERTOR        INSERT DC VALUE INTO OPT LIST
         CLC   FF000000,8(R10)     END OF LIST
         L     R10,8(,R10)         ADDR OF NEXT PDE IN LIST
         BE    INSRTAD             ... YES, GO
         BCTR  R1,0                BACK UP POINTER
         MVI   0(R1),C','          INSERT A COMMA
         B     IDCLOOP             LOOP
         SPACE 1
INSRTAD  EQU   *
         AIF   (&CVER LT 40).NOADBLO
         CLI   ADBLOPT+1,ADBLOON   NAME KEYWORD SPECIFIED?
         BNE   CALCPLN             ... NO, GO
         MVC   0(L'ADBL,R1),ADBL   INSERT 'AD(' INTO THE OPTION LIST
         LA    R1,L'ADBL-1(R1)     UPDATE THE POINTER
         L     R6,ADBLV            ADDR OF ADBL OPTION VALUE
         LH    R2,ADBLV+4          LENGTH OF ADBL VALUE
         BAL   R14,INSERTOR        INSERT AUTODBL VALUE
.NOADBLO ANOP
         SPACE 1
CALCPLN  EQU   *
         LA    R0,OPTNLIST         ADDR OF OPTION LIST START
         SR    R1,R0               LENGTH OF OPTION LIST
         STH   R1,OPTNLTH          STORE THE LENGTH OF OPTION LIST
         LA    R1,DDNLLEN          LENGTH OF ALT DDNAME LIST
         STH   R1,DDNLTH           THE DDNAME LIST HEADER FIELD
         EJECT
***********************************************************************
*                                                                     *
*        OPEN TASKLIB IF NECESSARY                                    *
*                                                                     *
***********************************************************************
         CLI   TASKLIB,0           WAS TASKLIB SPECIFIED
         BE    NOTASKL             ... NO, GO
         MVC   DCBG(LTHDCB),DCB    COPY DCB IMAGE
         LA    R3,DCBG             ADDR OF DCB IMAGE
         USING IHADCB,R3
         MVC   DCBDDNAM,TASKLIB    MOVE IN DDNAME
         MVI   OPENPL,X'80'        MARK END OF OPEN LIST
         OPEN  ((R3),INPUT),MF=(E,OPENPL) OPEN TASKLIB
         TM    DCBOFLGS,DCBOFOPN   OPEN SUCCESSFUL
         BO    NOTASKL             ... YES, GO
         MVI   MFPL+MTLEN-MTDSECTD,0 SET NO 1ST INSERTION
         MVI   MFPL+L'MTINSRT+MTLEN-MTDSECTD,0 SET NO 2ND INSERTION
         LA    R1,TOFMID           TASKLIB OPEN FAIL MSG ID
         LA    R10,TERMNATE        ERROR RETURN
         B     OUTMSG              OUTPUT MESSAGE
         DROP  R3
         SPACE 1
NOTASKL  EQU   *
         EJECT
***********************************************************************
*                                                                     *
*        CLEANUP PROMPTER 1ST LOAD WORKAREAS AND XCTL TO 2ND LOAD     *
*                                                                     *
***********************************************************************
         LA    R1,OPTNLTH          ADDR OF OPTION LIST
         ST    R1,OPTNPTR          STORE IN VS FORTRAN PARM LIST
         LA    R1,DDNLTH           ADDR OF DDNAME LIST
         ST    R1,DDNPTR           STORE IN VS FORTRAN PARM LIST
         OI    DDNPTR,ENDLIST      SET END OF PARM LIST
         BAL   R10,DELETER         RELEASE UNNEEDED STORAGE
         BAL   R10,PDLRLSE         RELEASE THE PDL
         MVC   COMPLRID,FORTVS     COMPILER MODULE ID
         LR    R1,R11              WORKAREA ADDR
         L     R13,SAVEAREA+4      PREVIOUS SAVE ADDR
         L     R14,12(R13)         RESTORE THE RETURN ADDRESS
         XCTL  (2,12),EP=&P2NDLID  XCTL TO THE 2ND LOAD OF PROMPTER
         EJECT
***********************************************************************
*                                                                     *
*        OPTION INSERTION SUBROUTINES                                 *
*                                                                     *
***********************************************************************
         SPACE 1
OPTSINS  EQU   *
         CLI   1(R2),OPTON         WAS OPTION REQUESTED
         MVI   0(R1),C','          INSERT SEPARATOR ','
         IC    R4,0(R6)            LENGTH OF OPTION -1
         BE    YESOPT              ... YES, GO
         MVC   1(L'NO,R1),NO       INSERT 'NO'
         LA    R1,L'NO(R1)         UPDATE THE POINTER
YESOPT   EQU   *
         EX    R4,MOVEOPT          COPY OPTION TO OPTION STRING
         LA    R1,2(R4,R1)         UPDATE THE POINTER
         BR    R14                 RETURN
         SPACE 1
INSERTOR EQU   *
         BCTR  R2,0                DECREMENT FOR MACHINE LENGTH
         BCTR  R6,0                POSITION FOR MVC
         EX    R2,MOVEOPT          COPY OPTION TO OPTION STRING
         LA    R1,2(R2,R1)         UPDATE THE POINTER
         MVI   0(R1),C')'          ADD TRAILING PAREN
         LA    R1,1(,R1)           UPDATE POINTER
         BR    R14                 RETURN
         SPACE 1
MOVEOPT  MVC   1(*-*,R1),1(R6)     EXECUTED MVC
         EJECT
***********************************************************************
*                                                                     *
*        PROMPTER/VALIDITY CHECK EXIT ROUTINES                        *
*                                                                     *
***********************************************************************
         SPACE 1
ALLOCXIT EQU   *
         TM    SWBYTE,LIBR+INP     SYSLIB OR SYSIN?
         L     R15,ADDNPTR         ADDR OF DDNAME SLOT
         BZ    GEMOVDDN            ... NO, GO
         LH    R4,0(R15)           LOAD DDNAME COUNTER
         LA    R0,1(,R4)           INCREMENT COUNTER
         STH   R0,0(,R15)          SAVE COUNTER
         SLL   R4,3                TIMES 8
         LA    R15,2(R4,R15)       ADDR OF PROPER SLOT
         SPACE
GEMOVDDN EQU   *
         USING DAPB08,R9
         CLI   DA08CD+1,X'08'      DSNAME ALLOCATE
         LA    R4,DA08DDN          ADDR OF DSNAME ALLOC DDNAME
         BE    GEDM                ... YES, GO
         USING DAPB1C,R9
         LA    R4,DA1CDDN          ADDR OF TERM ALLOC DDNAME
         SPACE 1
GEDM     EQU   *
         MVC   0(L'DA08DDN,R15),0(R4)   MOVE DDNAME TO ALT DD LIST
         DROP  R9
         SPACE 1
EXITRC0  SR    R15,R15             RC = 0
         B     EXIT
         SPACE 1
EXITRC4  LA    R15,4               RC = 4
         B     EXIT
         SPACE 1
EXITRC8  LA    R15,8               RC = 8
         B     EXIT
         SPACE 1
EXITRC12 LA    R15,12              RC = 12
         SPACE 1
EXIT     EQU   *
         LR    R4,R13              COPY CURRENT SAVEAREA ADDR
         CR    R4,R11              IS THIS A VALIDITY CHECK RTN RETURN
         L     R13,4(R13)          RESTORE PREVIOUS SAVEAREA ADDR
         BNE   NOWKAF              ... YES, GO
         BAL   R10,PDLRLSE         FREE PDL
         LA    R0,WORKA1L          LOAD GETMAIN LEN AND SUBPOOL
         BAL   R6,FREECOR          FREE WORKAREA
         SPACE 1
NOWKAF   EQU   *
         L     R14,12(R13)         RESTORE RETURN ADDR
         LM    R0,R12,20(R13)      RESTORE REGS 0-12
         BR    R14                 RETURN
         EJECT
***********************************************************************
*                                                                     *
*        PROMPTER ABNORMAL EXIT ROUTINE                               *
*                                                                     *
***********************************************************************
TERMNATE EQU   *
         STACK PARM=STACKPB,DELETE=ALL,MF=(E,IOPLPL) DELETE STACK
         TCLEARQ INPUT              CLEAR THE INPUT QUEUE
         TM    SWBYTE,ICONCAT       WAS CONCATENATION DONE
         BZ    NOIDECON             ... NO, GO
         USING DAPB10,R9
         XC    DAPB10(DAPB10LN),DAPB10 ZERO PARM LIST
         MVI   DA10CD+1,X'10'      SET ENTRY CODE
         MVC   DA10DDN,SYSIN       MOVE IN DDNAME
         DROP  R9
         BAL   R10,DAIRLINK        CALL DAIR
         LTR   R15,R15             ANY ERRORS
         BZ    IDECONOK            ... NO, GO
         BAL   R10,DAIRERR         GO ANALYZE ERROR
         B     NOIDECON
         SPACE 1
IDECONOK EQU   *
         XC    SYSIN,SYSIN         ZERO SYSIN ALT DDNAME ENTRY
         SPACE 1
NOIDECON EQU   *
         USING DAPB18,R9
         XC    DAPB18(DAPB18LN),DAPB18 ZERO PARM LIST
         MVI   DA18CD+1,X'18' SET ENTRY CODE
         MVI   DA18MNM,C' '        BLANK
         MVC   DA18MNM+1(L'DA18MNM-1),DA18MNM MEMBER NAME
         LH    R2,INPDDCNT         LOAD COUNT OF INPUT DD'S
         LA    R0,1                CONSTANT ONE
         CR    R2,R0               MORE THAN ONE
         BNH   DDLIBFR             ... NO, GO
         SPACE 1
INPDDFR  EQU   *
         LR    R1,R2               COPY COUNTER
         SLL   R1,3                TIMES 8
         LA    R1,INPDDNMS-8(R1)   ADDR OF DDNAME
         MVC   DA18DDN,0(R1)       MOVE TO DAIR PARM LIST
         BAL   R10,DAIRLINK        CALL DAIR
         BCT   R2,INPDDFR          DECREMENT AND LOOP
         SPACE 1
DDLIBFR  EQU   *
         TM    SWBYTE,LCONCAT       WAS CONCATENATION DONE
         BZ    NOLDECON             ... NO, GO
         USING DAPB10,R9
         XC    DAPB10(DAPB10LN),DAPB10 ZERO PARM LIST
         MVI   DA10CD+1,X'10'      SET ENTRY CODE
         MVC   DA10DDN,SYSLIB      MOVE IN DDNAME
         DROP  R9
         BAL   R10,DAIRLINK        CALL DAIR
         LTR   R15,R15             ANY ERRORS
         BZ    LDECONOK            ... NO, GO
         BAL   R10,DAIRERR         GO ANALYZE ERROR
         B     NOLDECON
         SPACE 1
LDECONOK EQU   *
         XC    SYSLIB,SYSLIB       ZERO SYSLIB ALT DDNAME ENTRY
         SPACE 1
NOLDECON EQU   *
         USING DAPB18,R9
         XC    DAPB18(DAPB18LN),DAPB18 ZERO PARM LIST
         MVI   DA18CD+1,X'18' SET ENTRY CODE
         MVI   DA18MNM,C' '        BLANK
         MVC   DA18MNM+1(L'DA18MNM-1),DA18MNM MEMBER NAME
         LH    R2,LIBDDCNT         LOAD COUNT OF INPUT DD'S
         LA    R0,1                CONSTANT ONE
         CR    R2,R0               MORE THAN ONE
         BNH   DDLSTFR             ... NO, GO
         SPACE 1
LIBDDFR  EQU   *
         LR    R1,R2               COPY COUNTER
         SLL   R1,3                TIMES 8
         LA    R1,LIBDDNMS-8(R1)   ADDR OF DDNAME
         MVC   DA18DDN,0(R1)       MOVE TO DAIR PARM LIST
         BAL   R10,DAIRLINK        CALL DAIR
         BCT   R2,LIBDDFR          DECREMENT AND LOOP
         SPACE 1
DDLSTFR  EQU   *
         LA    R2,DDNLLEN/8+1      NBR OF DDNAMES PLUS TASKLIB
         LA    R4,DDNLIST          ADDR OF ALT DDNAME LIST
         SPACE 1
DDLFRLP  EQU   *
         CLI   0(R4),0             ENTRY EMPTY
         MVC   DA18DDN,0(R4)       MOVE DDNAME TO PARM LIST
         LA    R4,8(,R4)           BUMP TO NEXT ENTRY
         BE    DDLFRNXT            ... YES, GO
         BAL   R10,DAIRLINK        CALL DAIR
         SPACE 1
DDLFRNXT EQU   *
         BCT   R2,DDLFRLP          DECREMENT AND LOOP
         BAL   R10,DELETER         FREE WORKAREA
         B     EXITRC12            RETURN TO TMP WITH RC = 12
         DROP  R9
         EJECT
***********************************************************************
*                                                                     *
*        FREE PROMPTER 1ST LOAD WORKAREA                              *
*                                                                     *
***********************************************************************
         SPACE 1
DELETER  EQU   *
         LA    R4,WORKA2           ADDR OF 2ND PART OF WORKAREA
         LA    R0,WORKA2L          LENGTH OF 2ND PART OF WORKAREA
         BAL   R6,FREECOR          FREE 2ND PART OF WORKAREA
         BR    R10                 RETURN TO CALLER
         EJECT
PDLRLSE  EQU   *
         LR    R5,R15              PRESERVE RETURN CODE
         IKJRLSA PDLADDR           RELEASE THE PDL
         LR    R15,R5              RESTORE THE RETURN CODE
         MVC   PDLADDR,FF000000    INDICATE PDL FREED
         BR    R10                 RETURN
         EJECT
FREECOR  EQU   *
         LR    R5,R15              SAVE RETURN CODE
         FREEMAIN R,LV=(0),A=(4)   FREE STORAGE
         LR    R15,R5              RESTORE THE RETURN CODE
         BR    R6                  RETURN
         EJECT
***********************************************************************
*                                                                     *
*        TASKLIB PARAMETER VALIDITY CHECK ROUTINE                     *
*                                                                     *
***********************************************************************
TASKLCHK DS    0H
         SAVE  (14,12)             SAVE CALLER'S REGISTERS
         LM    R2,R3,0(R1)         ADDR OF PDE AND USER WORK AREA
         LM    R4,R12,36(R3)       RELOAD REGS FROM USER WORK AREA
         ST    R13,VALSAVE+4       BACKWARD CHAIN SAVE AREAS
         LA    R15,VALSAVE         FORWARD CHAIN
         ST    R15,8(R13)          SAVE AREAS
         LR    R13,R15             COPY SAVEAREA ADDR
         ST    R1,VCHKADDR         SAVE ADDR OF VALIDITY EXIT LIST
         USING DSNPDED,R2
         SR    R0,R0               ZERO
         LA    R4,TASKLIB          ADDR OF TASKLIB DDNAME SLOT
         ST    R0,DSNPDEMA         INSURE MEMBER NAME NOT USED
         ST    R4,ADDNPTR          SAVE FOR DDNAME MOVE
         OI    SWBYTE,OLD+LIBT     SET THE OLD AND TASKLIB INDICATORS
         NI    SWBYTE,255-BLDL-INP-LIBR RESET BLDL, INPUT INDICATORS
         LA    R1,LOADT            ADDR OF ASM QUALIFIER
         B     ALLOCDSN            BRANCH TO ALLOCATE TASKLIB
         EJECT
***********************************************************************
*                                                                     *
*        LIB PARAMETER VALIDITY CHECK ROUTINE                         *
*                                                                     *
***********************************************************************
         SPACE 1
LIBCHECK EQU   *
         SAVE  (14,12)             SAVE CALLER'S REGISTERS
         LM    R2,R3,0(R1)         ADDR OF PDE AND USER WORK AREA
         LM    R4,R12,36(R3)       RELOAD REGS FROM USER WORK AREA
         ST    R13,VALSAVE+4       BACKWARD CHAIN SAVE AREAS
         LA    R15,VALSAVE         FORWARD CHAIN
         ST    R15,8(R13)          SAVE AREAS
         LR    R13,R15             COPY SAVEAREA ADDR
         ST    R1,VCHKADDR         SAVE ADDR OF VALIDITY EXIT LIST
         USING DSNPDED,R2
         SR    R0,R0               ZERO
         LA    R4,LIBDDCNT         LOAD SYSLIB DSN COUNTER
         ST    R0,DSNPDEMA         INSURE MEMBER NAME NOT USED
         ST    R4,ADDNPTR          SAVE FOR DDNAME MOVE
         OI    SWBYTE,OLD+LIBR     SET THE OLD AND SYSLIB INDICATORS
         NI    SWBYTE,255-BLDL-INP-LIBT RESET BLDL, INPUT INDICATORS
         LA    R1,FORT             ADDR OF FORT QUALIFIER
         B     ALLOCDSN            BRANCH TO ALLOCATE SYSLIB
         EJECT
***********************************************************************
*                                                                     *
*        INPUT DSNAME VALIDITY CHECK ROUTINE                          *
*                                                                     *
***********************************************************************
         SPACE 1
DSNCHECK EQU   *                   INPUT DATA SET NAME VALIDITY EXIT
         SAVE  (14,12)             SAVE CALLER'S REGISTERS
         LM    R2,R3,0(R1)         ADDR OF PDE AND USER WORK AREA
         LM    R4,R12,36(R3)       RELOAD REGS FROM USER WORK AREA
         ST    R13,VALSAVE+4       BACKWARD CHAIN SAVE AREAS
         LA    R15,VALSAVE         FORWARD CHAIN
         ST    R15,8(R13)          SAVE AREAS
         LR    R13,R15             COPY SAVEAREA ADDR
         ST    R1,VCHKADDR         SAVE ADDR OF VALIDITY EXIT LIST
         L     R4,DSNPDEDA         GET ADDRESS OF SPECIFIED DSNAME
         LTR   R15,R4              WAS DSN SPECIFIED
         LA    R6,FORT             ADDR OF FORT QUALIFIER
         BZ    TST1STDS            ... NO, GO
         CLI   DSNPDEDL+1,1        LENGTH OF DSN = 1
         LH    R5,DSNPDEDL         LOAD DSN LENGTH
         BE    TST1STDS            ... YES, GO
         SPACE 1
DSNIATST EQU   *
         CLI   0(R15),C'*'         IS CHAR AN ASTERISK
         LA    R15,1(,R15)         BUMP TO NEXT CHARACTER
         BE    EXITRC4             ... YES, IMBEDDED ASTERISK ERROR
         BCT   R5,DSNIATST         DECREMENT AND LOOP
         SPACE 1
TST1STDS EQU   *
         CLI   INPDDCNT+1,0        1ST INPUT DSN
         BNE   DSNALLOC            ... NO, GO
         LTR   R4,R4               TEST IF THE DSNAME WAS OMITTED
         BZ    DSNNSPEC            ... YES, GO
         CLI   0(R4),C'*'          TERMINAL REQUEST
         BE    DSNNSPEC            ... YES, GO
         TM    DSNPDEDF,DSNPDEDQ   TEST IF THE DSNAME WAS IN QUOTES
         LH    R5,DSNPDEDL         GET THE LENGTH OF THE DSNAME
         LR    R7,R5               SAVE THIS LENGTH
         BO    DSNSPEC             ... YES, GO
         SR    R15,R15             CLEAR
         IC    R15,0(,R6)          LOAD QUALIFIER LENGTH
         CR    R5,R15              DSNAME LENGTH GT QUALIFIER
         BNH   DSNSPEC             ... NO, GO
         AR    R5,R4               GET THE ADDRESS OF THE LAST FIVE
         SR    R5,R15              CHARACTERS OF THE SPECIFIED DSNAME
         BCTR  R15,0               DECREMENT FOR MACHINE LENGTH
         EX    R15,QUALCLC         DOES QUALIFIER MATCH
         LA    R15,1(,R15)         RESTORE TRUE LENGTH
         BNE   DSNSPEC             ... NO, GO
         SR    R7,R15              DECREMENT FOR QUALIFIER
         SPACE 1
DSNSPEC  EQU   *
         ST    R4,IDSNADDR         SAVE DSN ADDR
         STH   R7,IDSNLEN          SAVE DSN LENGTH
         B     DSNSINMN
         SPACE 1
DSNNSPEC EQU   *
         SR    R1,R1               ZERO
         ST    R1,IDSNADDR         INDICATE NO
         STH   R1,IDSNLEN            DSN SPECIFIED
         SPACE 1
DSNSINMN EQU   *
         MVC   IMBRADDR,DSNPDEMA   COPY MBR NAME ADDR
         MVC   IMBRLEN,DSNPDEML    COPY MBR NAME LENGTH
         SPACE 1
DSNALLOC EQU   *
         LR    R1,R6               ADDR OF QUALIFIER
         LA    R4,INPDDCNT         ADDR OF INPUT DSN COUNTER
         ST    R4,ADDNPTR          SAVE FOR DDNAME MOVE
         OI    SWBYTE,BLDL+OLD+INP SET BLDL, OLD AND INPUT INDICATORS
         NI    SWBYTE,255-LIBR-LIBT RESET SYSLIB INDICATOR
         B     ALLOCDSN
         SPACE 1
QUALCLC  CLC   0(*-*,R5),1(R6)     EXECUTED QUALIFIER COMPARE
         EJECT
***********************************************************************
*                                                                     *
*        PRINT PARAMETER VALIDITY CHECK ROUTINE                       *
*                                                                     *
***********************************************************************
PRINTCHK DS    0H                  PRINT DATA SET NAME VALIDITY EXIT
         SAVE  (14,12)             SAVE CALLER'S REGISTERS
         LM    R2,R3,0(R1)         ADDR OF PDE AND USER WORK AREA
         LM    R4,R12,36(R3)       RELOAD REGS FROM USER WORK AREA
         USING DSNPDED,R2
         L     R4,DSNPDEDA         GET ADDRESS OF THE PRINT DSNAME
         LTR   R4,R4               TEST IF THE DSNAME WAS OMITTED....
         ST    R13,VALSAVE+4       BACKWARD CHAIN SAVE AREAS        .
         LA    R15,VALSAVE         FORWARD CHAIN                    .
         ST    R15,8(R13)          SAVE AREAS                       .
         LR    R13,R15             COPY SAVEAREA ADDR               .
         BZ    EXITRC0             ... YES, GOOD EXIT       <........
         CLI   DSNPDEDL+1,1        LENGTH OF DSN = 1
         LH    R5,DSNPDEDL         LENGTH OF DSNAME
         BE    EXITRC0             ... YES, GOOD EXIT
         SPACE 1
CHECKAST EQU   *
         CLI   0(R4),C'*'          CHECK FOR AN ASTERISK
         LA    R4,1(R4)            UPDATE POINTER
         BE    EXITRC4             EMBEDDED ASTERISK, ERROR EXIT
         BCT   R5,CHECKAST         DECREMENT AND LOOP
         B     EXITRC0             GOOD EXIT
         EJECT
***********************************************************************
*                                                                     *
*        LINECOUNT PARAMETER VALIDITY CHECK ROUTINE                   *
*                                                                     *
***********************************************************************
         SPACE 1
LINE#CHK DS    0H
         SAVE  (14,12)             SAVE CALLER'S REGISTERS
         LM    R2,R3,0(R1)         ADDR OF PDE AND USER WORK AREA
         LM    R4,R12,36(R3)       RELOAD REGS FORM USER WORK AREA
         ST    R13,VALSAVE+4       BACKWARD CHAIN SAVE AREAS
         LA    R15,VALSAVE         FORWARD CHAIN
         ST    R15,8(R13)          SAVE AREAS
         LR    R13,R15             COPY SAVEAREA ADDR
         L     R4,0(R2)            ADDR OF LINECNT VALUE
         LH    R5,4(R2)            LENGTH OF LINECNT VALUE
         SPACE 1
CHECKNUM EQU   *
         CLI   0(R4),C'0'          CHECK IF DIGIT IS A ZERO
         LA    R4,1(R4)            UPDATE POINTER
         BNE   EXITRC0             ... NO, GOOD EXIT
         BCT   R5,CHECKNUM         DECREMENT AND LOOP
         B     EXITRC4             ALL ZEROS, ERROR EXIT
         AIF   (&CVER LT 40).NADCHKR
         EJECT
***********************************************************************
*                                                                     *
*        AUTODBL PARAMETER VALIDITY CHECK ROUTINE                     *
*                                                                     *
***********************************************************************
         SPACE 1
ADBLCHK  DS    0H
         SAVE  (14,12)             SAVE CALLER'S REGISTERS
         LM    R2,R3,0(R1)         ADDR OF PDE AND USER WORK AREA
         LM    R4,R12,36(R3)       RELOAD REGS FORM USER WORK AREA
         ST    R13,VALSAVE+4       BACKWARD CHAIN SAVE AREAS
         LA    R15,VALSAVE         FORWARD CHAIN
         ST    R15,8(R13)          SAVE AREAS
         LR    R13,R15             COPY SAVEAREA ADDR
         L     R4,0(R2)            ADDR OF AUTODBL VALUE
         LH    R5,4(R2)            LENGTH OF AUTODBL VALUE
         CLI   0(R4),C'0'          NUMERIC VALUE SPECIFIED
         BNL   ADBLNUM             ... YES, GO
         LA    R14,ADBLVALS        ADDR OF ALPHA VALUES TABLE
         SR    R15,R15             ZERO
         SPACE 1
ADBLVLP  EQU   *
         IC    R15,0(,R14)         LOAD TABLE ENTRY LENGTH
         LTR   R6,R15              END OF TABLE
         BZ    EXITRC4             ... YES, INVALID VALUE
         CR    R15,R5              TBL ENTRY LEN = INPUT LENGTH
         BNE   ADBLVLN             ... NO, GO
         BCTR  R6,0                DECREMENT FOR MACHINE LENGTH
         EX    R6,ADBLVCLC         INPUT VALUE = TABLE ENTRY
         BE    EXITRC0             ... YES, GOOD EXIT
         SPACE 1
ADBLVLN  EQU   *
         LA    R14,1(R15,R14)      BUMP TO NEXT TABLE ENTRY
         B     ADBLVLP             LOOP
         SPACE 1
ADBLVCLC CLC   0(*-*,R4),1(R14)    EXECUTED VALUE COMPARE
         SPACE 1
ADBLNUM  EQU   *
         LA    R15,L'ADBLMAXN      MAX NUMERIC LENGTH
         CR    R15,R5              LENGTH = INPUT LENGTH
         BNE   EXITRC4             ... NO, ERROR EXIT
         LA    R14,ADBLMAXN        ADDR OF MAX NUMBER TABLE
         SPACE 1
ADBLNLP  EQU   *
         CLI   0(R4),C'0'          IS CHARACTER NUMERIC
         BL    EXITRC4             ... NO, ERROR EXIT
         CLC   0(1,R4),0(R14)      NUM CHAR EXCEED MAX
         BH    EXITRC4             ... YES, ERROR EXIT
         LA    R4,1(,R4)           BUMP TO NEXT INPUT CHAR
         LA    R14,1(,R14)         BUMP TO NEXT TABLE CHAR
         BCT   R15,ADBLNLP         DECREMENT AND LOOP
         B     EXITRC0             GOOD EXIT
         SPACE 1
ADBLVALS DS    0C                  ALPHA VALUES TABLE
         DC    AL1(4),C'NONE'
         DC    AL1(3),C'DBL'
         DC    AL1(4),C'DBL4'
         DC    AL1(4),C'DBL8'
         DC    AL1(6),C'DBLPAD'
         DC    AL1(7),C'DBLPAD4'
         DC    AL1(7),C'DBLPAD8'
         DC    AL1(0)              END OF TABLE MARKER
         SPACE 1
ADBLMAXN DC    C'35337'            MAX NUMERICS TABLE
.NADCHKR ANOP
         EJECT
***********************************************************************
*                                                                     *
*        CHARLEN PARAMETER VALIDITY CHECK ROUTINE                     *
*                                                                     *
***********************************************************************
         SPACE 1
CHARLCHK DS    0H
         SAVE  (14,12)             SAVE CALLER'S REGISTERS
         LM    R2,R3,0(R1)         ADDR OF PDE AND USER WORK AREA
         LM    R4,R12,36(R3)       RELOAD REGS FORM WORK AREA
         ST    R13,VALSAVE+4       BACKWARD CHAIN SAVE AREAS
         LA    R15,VALSAVE         FORWARD CHAIN
         ST    R15,8(R13)          SAVE AREAS
         LR    R13,R15             COPY SAVE AREA ADDR
         L     R4,0(R2)            ADDR OF THE CHARLEN INTEGER ENTERED
         LH    R5,4(R2)            LENGTH OF THE CHARLEN INTEGER
         LA    R0,L'N32767         LOAD LENGTH OF MAX VALUE
         CR    R0,R5               IS INTEGER MAX VALUE CHARS LONG
         BNE   CHRCKNUM            ... NO, GO
         CLC   N32767,0(R4)        EXCEED MAXIMUM?
         BL    EXITRC4             ... YES, ERROR RETURN
         SPACE 1
CHRCKNUM EQU   *
         CLI   0(R4),C'0'          CHECK IF DIGIT IS A ZERO
         LA    R4,1(R4)            ADDR OF NEXT DIGIT
         BNE   EXITRC0             ... NO, GOOD RETURN
         BCT   R5,CHRCKNUM         DECREMENT AND LOOP
         B     EXITRC4             ERROR RETURN
         SPACE 1
N32767   DC    C'32767'            MAX CHARLEN VALUE
         EJECT
***********************************************************************
*                                                                     *
*        LANGLVL PARAMETER VALIDITY CHECK ROUTINE                     *
*                                                                     *
***********************************************************************
         SPACE 1
LANGLCHK DS    0H
         SAVE  (14,12)             SAVE CALLER'S REGISTERS
         LM    R2,R3,0(R1)         ADDR OF PDE AND USER WORK AREA
         LM    R4,R12,36(R3)       RELOAD REGS FROM USER WORK AREA
         ST    R13,VALSAVE+4       BACKWARD CHAIN SAVE AREAS
         LA    R15,VALSAVE         FORWARD CHAIN
         ST    R15,8(R13)          SAVE AREAS
         LR    R13,R15             COPY SAVE AREA ADDR
         L     R4,0(R2)            ADDR OF THE LANGLVL INTEGER ENTERED
         LH    R5,4(R2)            LENGTH OF THE LANGLVL INTEGER
         LA    R0,L'LANGL66        MAX VALUE LENGTH
         CR    R0,R5               IS INTEGER MAX VALUE LENGTH LONG
         BNE   EXITRC4             ... NO, ERROR RETURN
         CLC   LANGL66,0(R4)       LANGLVL = 66
         BE    EXITRC0             ... YES, GOOD RETURN
         CLC   LANGL77,0(R4)       LANGLVL = 77
         BE    EXITRC0             ... YES, GOOD RETURN
         B     EXITRC4             ERROR RETURN
         SPACE 1
LANGL66  DC    C'66'               LANGUAGE LEVEL 66
LANGL77  DC    C'77'               LANGUAGE LEVEL 77
         EJECT
***********************************************************************
*                                                                     *
*        OPT PARAMETER VALIDITY CHECK ROUTINE                         *
*                                                                     *
***********************************************************************
         SPACE 1
OPT#CHK  DS    0H
         SAVE  (14,12)             SAVE CALLER'S REGISTERS
         LM    R2,R3,0(R1)         ADDR OF PDE AND USER WORK AREA
         LM    R4,R12,36(R3)       RELOAD REGS FORM USER WORK AREA
         ST    R13,VALSAVE+4       BACKWARD CHAIN SAVE AREAS
         LA    R15,VALSAVE         FORWARD CHAIN
         ST    R15,8(R13)          SAVE AREAS
         LR    R13,R15             COPY SAVE AREA ADDR
         L     R4,0(R2)            ADDR OF THE OPT INTEGER ENTERED
         CLI   0(R4),OPTLOWV       OPT LT LOWEST PERMISSABLE
         BL    EXITRC4             ... YES, ERROR RETURN
         CLI   0(R4),OPTHIGHV      OPT GT HIGHEST PERMISSABLE
         BH    EXITRC4             ... YES, ERROR RETURN
         B     EXITRC0             GOOD RETURN
         SPACE 1
OPTLOWV  EQU   C'0'                LOWEST OPT VALUE
OPTHIGHV EQU   C'3'                HIGHEST OPT VALUE
         EJECT
***********************************************************************
*                                                                     *
*        VALIDITY CHECK EXIT SIMULATION ROUTINE                       *
*                                                                     *
***********************************************************************
VCHKRTN  DS    0H                  VALIDITY EXIT SIMULATION ROUTINE
         SAVE  (14,12)             SAVE CALLER'S REGISTERS
         ST    R13,VALSAVE+4       BACKWARD CHAIN SAVE AREAS
         LA    R15,VALSAVE         FORWARD CHAIN
         ST    R15,8(R13)          SAVE AREAS
         LR    R13,R15             COPY SAVE AREA ADDR
         LA    R15,VCHKLIST        SAVE THE ADDRESS OF THE DUMMY
         ST    R15,VCHKADDR        VALIDITY EXIT PARAMETER LIST
         EJECT
***********************************************************************
*                                                                     *
*        ALLOCATION CONTROL BLOCKS CONSTRUCTION ROUTINE               *
*                                                                     *
***********************************************************************
         USING DAPB08,R9
ALLOCDSN EQU   *
         L     R4,DSNPDEDA         ADDR OF DSNAME
         LTR   R4,R4               WAS DSNAME OMITTED
         BZ    QUALDSN             ... YES, GO
         CLI   0(R4),C'*'          TERMINAL ALLOCATION REQUESTED?
         BE    ALOCTERM            ... YES, GO
QUALDSN  EQU   *
         SR    R6,R6               CLEAR
         L     R4,DSNPDEDA         ADDR OF INPUT DSNAME
         LTR   R4,R4               TEST IF THE DSNAME WAS OMITTED....
         MVC   SAVDSNF,DSNPDEDF    SAVE FLAGS                       .
         LH    R5,DSNPDEDL         GET THE LENGTH OF THE DSNAME     .
         LR    R7,R5               SAVE THE LENGTH OF THE DSNAME    .
         LR    R3,R5               IN TWO REGISTERS                 .
         IC    R6,0(R1)            LENGTH OF DESCRIPTIVE QUALIFIER  .
         LA    R1,1(R1)            POINT TO ACTUAL QUALIFIER        .
         BZ    USEINDSN            ... YES, GO           <...........
         TM    SAVDSNF,DSNPDEDQ    TEST IF THE DSNAME WAS IN QUOTES
         BO    NOINSRT             ... YES, GO
         CR    R5,R6               DSN LENGTH GT QUALIFIER LENGTH
         BNH   INSRT               ... NO, GO
         AR    R5,R4               TEST TO SEE IF THE LOWEST LEVEL
         SR    R5,R6               OF QUALIFICATION OF THE DSNAME IS
         BCTR  R6,0                THE SAME AS THE DESCRIPTIVE
         EX    R6,COMPARE          QUALIFIER
         LA    R6,1(R6)            RESTORE THE LENGTH OF THE QUALIFIER
         BE    NOINSRT             ... YES, DO NOT APPEND QUALIFIER
         SPACE 1
INSRT    EQU   *
         LA    R5,DSNAME(R7)       ADDR OF END OF DSNAME
         AR    R3,R6               UPDATE THE LENGTH OF THE DSNAME
         BCTR  R6,0                MOVE THE DESCRIPTIVE QUALIFIER
         EX    R6,MOVE             INTO THE DSNAME FIELD
         SPACE 1
NOINSRT  EQU   *
         BCTR  R7,0                DECREMENT FOR MACHINE LENGTH
         LR    R1,R4               ADDR OF INPUTTED DSNAME
         LA    R5,DSNAME           ADDR OF DSNAME FIELD
         EX    R7,MOVE             MOVE THE DSNAME
         STH   R3,DSNLEN           SAVE DSNAME LENGTH
         B     TESTMEMB
         SPACE 1
USEINDSN EQU   *
         L     R4,DSNPDEMA         TEST TO SEE IF A MEMBER NAME
         LTR   R4,R4               WAS SPECIFIED
         BNZ   NOINDSN             ... YES, GO
         L     R4,IDSNADDR         ADDR OF INPUT DSNAME
         LTR   R4,R4               INPUT DSNAME EXIST?
         BZ    NOINDSN             ... NO, GO
         LH    R7,IDSNLEN          LENGTH OF THE INPUT DSNAME
         LR    R3,R7               COPY LENGTH
         B     INSRT
         SPACE 1
NOINDSN  EQU   *
         LA    R4,1(R1)            DSN = QUALIFIER
         BCTR  R6,0                DECREMENT FOR LEADING PERIOD
         LR    R7,R6               SAVE LENGTH
         LR    R3,R6               SAVE LENGTH
         B     NOINSRT
         SPACE 1
MOVE     MVC   0(*-*,R5),0(R1)     EXECUTED MOVE
COMPARE  CLC   0(*-*,R5),0(R1)     EXECUTED COMPARE
         EJECT
***********************************************************************
*                                                                     *
*        PDS MEMBER NAME PROCESSING ROUTINE                           *
*                                                                     *
***********************************************************************
TESTMEMB EQU   *
         L     R1,DSNPDEMA         ADDR OF INPUT MEMBER NAME
         LTR   R1,R1               TEST IF THE MEMBER NAME OMITTED...
         MVI   DA08MNM,C' '        BLANK OUT                        .
         MVC   DA08MNM+1(L'DA08MNM),DA08MNM MEMBER NAME FIELD       .
         MVC   MEMBSAVE,DA08MNM    BLANK OUT THE MEMBSAVE FIELD     .
         LA    R5,DA08MNM          ADDRESS OF THE MEMBER NAME       .
         LH    R7,DSNPDEML         THE LENGTH OF THE MEMBER NAME    .
         BNZ   INSRMEMB            MEMBER SPECIFIED, GO    <.........
         L     R1,DSNPDEDA         ADDR OF DSN
         LTR   R1,R1               WAS DSN SPECIFIED
         BNZ   TESTPASS            ... YES, GO
         L     R1,IMBRADDR         ADDR OF MEMBER NAME
         LTR   R1,R1               DOES IT EXIST
         BZ    TESTPASS            ... NO, GO
         LH    R7,IMBRLEN          LOAD LENGTH
         SPACE 1
INSRMEMB EQU   *                   INSERT MEMBER NAME
         TM    SWBYTE,BLDL         BLDL REQUIRED?
         STH   R7,MBRNSLEN         STORE LEN OF SAVED MEMBER NAME
         BCTR  R7,0                DECREMENT FOR MACHINE LENGTH
         BNO   ALOCMEMB            ... NO, GO
         LA    R5,MEMBSAVE         ADDR OF MEMBER SAVE FIELD
         SPACE
ALOCMEMB EQU   *
         EX    R7,MOVE             MOVE THE MEMBER NAME
         EJECT
***********************************************************************
*                                                                     *
*        DATASET PASSWORD PROCESSING ROUTINE                          *
*                                                                     *
***********************************************************************
TESTPASS EQU   *
         L     R1,DSNPDEPA         ADDR OF PASSWORD ENTERED
         LTR   R1,R1               PASSWORD OMITTED?
         MVI   DA08PSWD,C' '       BLANK PASSWORD FIELD IN
         MVC   DA08PSWD+1(L'DA08PSWD-1),DA08PSWD DAIR PARM LIST
         BZ    NOPSWD              ... YES, GO
         LH    R7,DSNPDEPL         LENGTH OF PASSWORD ENTERED
         BCTR  R7,0                DECREMENT FOR MACHINE LENGTH
         LA    R5,DA08PSWD         ADDR OF PASSWORD IN PARM LIST
         EX    R7,MOVE             MOVE PASSWORD INTO THE DAIR BLOCK
         SPACE 1
NOPSWD   EQU   *
         EJECT
***********************************************************************
*                                                                     *
*        INVOKE DAIR FOR OLD/SHR ALLOCATION                           *
*                                                                     *
***********************************************************************
         SPACE 1
CALLDAIR EQU   *
         BAL   R10,COMDA08R        SET UP PARM LIST
         BAL   R10,OLDDA08R        ADD "OLD" OPTIONS
         BAL   R10,DAIRLINK        CALL DAIR
         LTR   R15,R15             ANY ALLOCATION ERRORS
         BNZ   DAIRERTN            ...YES, GO
         CLI   DA08MNM,C' '        WAS ALLOCATION WITH MEMBER NAME
         BNE   TESTPDS             ... YES, GO
         TM    SWBYTE,LIBR+LIBT    ALLOCATING SYSLIB OR TASKLIB
         BNZ   TESTPDS             ... YES, GO
         CLI   DA08DSO,DCBDSGPO    TEST IF THE DATA SET IS PARTITIONED
         BE    TSTMSPEC            ... YES, GO
         CLI   MEMBSAVE,C' '       WAS MEMBER NAME SPECIFIED, ON SEQ
         BE    ALLOCXIT            ... NO, GO
         MVC   DA08MNM,MEMBSAVE    MOVE MEMBER NAME FOR ERROR MSG
         B     NOTPDS              ISSUE ERROR MESSAGE
         SPACE
TESTPDS  EQU   *
         CLI   DA08DSO,DCBDSGPO    TEST IF DATA SET IS PARTITIONED
         BE    ALLOCXIT            ... YES, GO
         TM    SWBYTE,LIBR+LIBT    ALLOCATING SYSLIB OR TASKLIB
         BZ    NOTPDS              ... NO, GO
         LA    R1,MSGSEG1          ADDR OF MSG SEGMENT
         BAL   R10,MOVEDSN         DSNAME TO ERROR MESSAGE
         STC   R15,MFPL+MTLEN-MTDSECTD STORE LENGTH IN PARM LIST
         MVI   MFPL+L'MTINSRT+MTLEN-MTDSECTD,0 SET NO 2ND INSERT
         LA    R1,LNPMID           LIBRARY NOT PDS MSG ID
         B     PDSERRM
         SPACE
NOTPDS   EQU   *
         LA    R1,MSGSEG1          ADDR OF 1ST MSG SEGMENT
         BAL   R10,MOVEMNM         MEMBER NAME TO ERROR MSG
         STC   R15,MFPL+MTLEN-MTDSECTD SET MBR NAME LENGTH IN PARM LIST
         LA    R1,MSGSEG2          ADDR OF 2ND MSG SEGMENT
         BAL   R10,MOVEDSN         DSNAME TO ERROR MSG
         STC   R15,MFPL+L'MTINSRT+MTLEN-MTDSECTD SET DSN LEN
         LA    R1,MNPMID           MBR SPEC NOT PDS MSG ID
         SPACE
PDSERRM  EQU   *
         BAL   R10,OUTMSG          OUTPUT ERROR MESSAGE
         B     FREEDSN
         SPACE
TSTMSPEC EQU   *
         CLI   MEMBSAVE,C' '       TEST IF A MEMBER NAME WAS SPECIFIED
         BE    TESTBLDL            ... NO, GO
         MVC   DA08MNM,MEMBSAVE    MOVE MEMBER NAME TO DAIR BLOCK
         BAL   R10,VERMBREX        TEST IF MEMBER EXISTS
         LTR   R15,R15             DOES MEMBER EXIST?
         BZ    REALLOC             ... YES, GO
         LA    R1,MSGSEG1          ADDR OF 1ST MSG SEGMENT
         BAL   R10,MOVEMNM         MEMBER NAME TO ERROR MSG
         STC   R15,MFPL+MTLEN-MTDSECTD SET MBR NAME LENGTH IN PARM LIST
         LA    R1,MSGSEG2          ADDR OF 2ND MSG SEGMENT
         BAL   R10,MOVEDSN         DSNAME TO ERROR MSG
         STC   R15,MFPL+L'MTINSRT+MTLEN-MTDSECTD SET DSN LEN
         LA    R1,MNFMID           MBR NOT FOUND MSG ID
         BAL   R10,OUTMSG          OUTPUT ERROR MESSAGE
         SPACE
FREEDSN  EQU   *
         BAL   R10,UNALLOC         BUILD DAIR UNALLOC PARM LIST
         BAL   R10,DAIRLINK        UNALLOCATE THE DATA SET
         LTR   R15,R15             ANY ERRORS?
         BZ    EXITRC8             ... NO, GO
         B     DAIRERR             CALL DAIR FAIL
         SPACE
TESTBLDL EQU   *
         TM    SWBYTE,BLDL         BLDL REQUIRED?
         MVC   DA08MNM,TEMPNAME    SET THE MEMBER NAME = TEMPNAME
         BNO   REALLOC             ... NO, GO
         BAL   R10,VERMBREX        SEE IF TEMPNAME EXISTS
         LTR   R15,R15             DOES IT?
         BZ    MBR2TEMP            ... YES, GO
         LA    R1,MSGSEG1          ADDR OF MSG SEGMENT
         BAL   R10,MOVEDSN         DSNAME TO ERROR MESSAGE
         STC   R15,MFPL+MTLEN-MTDSECTD STORE LENGTH IN PARM LIST
         MVI   MFPL+L'MTINSRT+MTLEN-MTDSECTD,0 SET NO 2ND INSERT
         L     R1,VCHKADDR         ADDR OF VALIDITY EXIT PARM LIST
         LA    R15,TNAMSG          ADDR OF MSG TO RETURN TO PARSE
         ST    R15,8(R1)           STORE IN PARMLIST
         LA    R1,TNFMID           TEMPNAME NOT FOUND MSG ID
         BAL   R10,OUTMSG          OUTPUT ERROR MESSAGE
         B     FREEDSN             FREE DATA SET AND RETURN
         EJECT
***********************************************************************
*                                                                     *
*        STANDARD DAPB08 CONSTRUCTION ROUTINE                         *
*                                                                     *
***********************************************************************
         SPACE 1
COMDA08R DS    0H
         MVI   DA08CD+1,X'08'      SET ENTRY CODE
         SR    R1,R1               ZERO
         STC   R1,DA08FLG            FLAGS
         STH   R1,DA08DARC           DASDM ERROR FLAGS
         STH   R1,DA08CTRC           CATALOG ERROR FALGS
         ST    R1,DA08BLK            BLKSIZE
         ST    R1,DA08PQTY           PRIMARY SPACE
         ST    R1,DA08SQTY           SECONDARY SPACE
         ST    R1,DA08DQTY           DIRECTORY BLKS
         MVI   DA08DDN,C' '        BLANK OUT
         MVC   DA08DDN+1(L'DA08DDN-1),DA08DDN DDNAME
         MVC   DA08UNIT,DA08DDN    BLANK UNIT NAME
         MVC   DA08SER,DA08DDN     BLANK VOL SER
         LA    R1,DSNAREA          ADDR OF DSNAME AREA
         ST    R1,DA08PDSN         STORE IN PARM LIST
         TM    SAVDSNF,DSNPDEDQ    WAS DSNAME IN QUOTES
         MVI   DA08CTL,X'00'       ASSUME YES
         BOR   R10                 ... YES, RETURN
         OI    DA08CTL,DA08UID     INDICATE PREFIX THE USERID
         BR    R10                 RETURN
         EJECT
***********************************************************************
*                                                                     *
*        OLD/SHR DAPB08 CONSTRUCTION ROUTINE                          *
***********************************************************************
OLDDA08R EQU   *
         TM    SWBYTE,OLD          OLD ALLOCATION?
         MVI   DA08DSP1,DA08OLD    ASSUME OLD
         BZ    NOSHR               ... YES, GO
         MVI   DA08DSP1,DA08SHR    SET DISP = SHR
         SPACE
NOSHR    EQU   *
         CLI   DA08MNM,C' '        IS THIS A PDS MEMBER?
         MVI   DA08DPS2,DA08KEEP   NORMAL DISP = KEEP
         MVI   DA08DPS3,DA08KEP    COND DISP = KEEP
         BNER  R10                 ... YES, NO RLSE --- RETURN
         OI    DA08CTL,DA08RLSE    INDICATE RLSE
         BR    R10                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        NEW DAPB08 CONSTRUCTION ROUTINE                              *
*                                                                     *
***********************************************************************
NEWDA08R EQU   *
         CLI   DA08MNM,C' '        TEST IF THE ALLOCATING A PDS .....
         LH    R1,NEWAVLTH         LOAD AVG BLK LENGTH              .
         LH    R0,NEWPRIME         LOAD PRIMARY SPACE QUANTITY      .
         ST    R1,DA08BLK          STORE IN DAIR PARM LIST          .
         ST    R0,DA08PQTY         STORE IN DAIR PARM LIST          .
         LH    R1,NEWSEC           LOAD SECONDARY SPACE QUANTITY    .
         ST    R1,DA08SQTY         STORE IN DAIR PARM LIST          .
         BE    NOTNPDS             ... NOT A PDS, GO    <............
         LA    R1,DIRSPACE         LOAD NBR OF DIRECTORY BLKS
         ST    R1,DA08DQTY         STORE IN DAIR PARM LIST
         SPACE
NOTNPDS  EQU   *
         MVI   DA08DSP1,DA08NEW    DISP = NEW
         MVI   DA08DPS2,DA08CAT    DISP=(,CATLG)
         MVI   DA08DPS3,DA08CATL   DISP=(,,CATLG)
         OI    DA08CTL,DA08ABKL+DA08RLSE SET AVG BLK AND RLSE
         BR    R10                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        NEW DYNAMIC ALLOCATION ROUTINE                               *
*                                                                     *
***********************************************************************
ALLOCNEW EQU   *
         BAL   R10,COMDA08R        BUILD STD DAIR ALLOC BLOCK
         BAL   R10,NEWDA08R        ADD NEW ALLOC PARMS
         BAL   R10,DAIRLINK        CALL DAIR
         LTR   R15,R15             ANY ERRORS?
         BZ    ALLOCXIT            ... NO, GO
         LA    R10,EXITRC8         LOAD ERROR RETURN ADDR
         B     DAIRERR             CALL DAIR FAIL
         EJECT
***********************************************************************
*                                                                     *
*        TERMINAL ALLOCATION ROUTINE                                  *
*                                                                     *
***********************************************************************
ALOCTERM EQU   *
         USING DAPB1C,R9
         XC    DAPB1C(DAPB1CLN),DAPB1C ZERO PARM LIST
         MVI   DA1CCD+1,X'1C'      SET ENTRY CODE
         MVI   DA1CDDN,C' '        BLANK
         MVC   DA1CDDN+1(L'DA1CDDN-1),DA1CDDN DDNAME FIELD
         BAL   R10,DAIRLINK        CALL DAIR
         LTR   R15,R15             ANY ERRORS
         BZ    ALLOCXIT            ... NO, GO
         LA    R10,TERMNATE        ERROR RETURN
         B     DAIRERR
         DROP  R9
         EJECT
***********************************************************************
*                                                                     *
*        DEFAULT MEMBER NAME (TEMPNAME) ROUTINE                       *
*                                                                     *
***********************************************************************
MBR2TEMP EQU   *
         LA    R1,TEMPNAME         ADDR OF "TEMPNAME"
         ST    R1,IMBRADDR         STORE AS INPUT MEMBER NAME
         LA    R1,L'TEMPNAME       LENGTH OF "TEMPNAME"
         STH   R1,IMBRLEN          STORE AS INPUT MEMBER NAME LENGTH
         EJECT
***********************************************************************
*                                                                     *
*        PDS REALLOCATION ROUTINE                                     *
*                                                                     *
***********************************************************************
REALLOC  EQU   *
         USING DAPB18,R9
         BAL   R10,UNALLOC         BUILD UNALLOC BLOCK
         BAL   R10,DAIRLINK        CALL DAIR
         LTR   R15,R15             ANY ERRORS?
         BNZ   DAIRERR             ... YES, GO
         B     CALLDAIR            GO REALLOC WITH MEMBER NAME
         EJECT
***********************************************************************
*                                                                     *
*        DAPB18 CONSTRUCTION ROUTINE                                  *
*                                                                     *
***********************************************************************
UNALLOC  EQU   *
         MVI   DA18CD+1,X'18'      SET IN ENTRY CODE
         SR    R1,R1               ZERO
         STC   R1,DA18FLG            FLAGS
         STH   R1,DA18DARC           DAIR ERROR CODES
         STH   R1,DA18CTRC           CATALOG ERROR CODES
         ST    R1,DA18PDSN           DSN ADDR
         STH   R1,DA18SCLS           SYSOUT CLASS
*              LEAVE DDNAME FROM DAPB08 IMAGE
         MVI   DA18MNM,C' '        BLANK OUT THE MEMBER NAME
         MVC   DA18MNM+1(L'DA18MNM-1),DA18MNM FIELD
         MVI   DA18DPS2,0          ZERO
         MVI   DA18CTL,0           ZERO
         BR    R10                 RETURN TO CALLER
         DROP  R9
         EJECT
***********************************************************************
*                                                                     *
*        INVOKE DAIR ROUTINE                                          *
*                                                                     *
***********************************************************************
DAIRLINK EQU   *
         SR    R1,R1               ZERO
         ST    R1,ECB                ECB
         CALLTSSR EP=IKJDAIR,MF=(E,DAIRPL) INVOKE DAIR
         BR    R10                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        VERIFY MEMBER EXISTS ROUTINE                                 *
*                                                                     *
***********************************************************************
         USING DAPB08,R9
VERMBREX EQU   *
         MVC   DCBG(LTHDCB),DCB    COPY DCB TO WORK AREA
         LA    R3,DCBG             ADDR OF COPIED DCB
         USING IHADCB,R3
         MVC   DCBDDNAM,DA08DDN    MOVE DDNAME TO DCB
         MVI   OPENPL,X'80'        SET 1 ELEMENT IN LIST
         OPEN  ((R3),INPUT),MF=(E,OPENPL) OPEN THE DATA SET
         TM    DCBOFLGS,DCBOFOPN   TEST FOR A SUCCESSFUL OPEN
         BNO   OPENERR             ... NO, GO
         MVC   MEMBNAME,DA08MNM    MOVE MEMBER NAME TO BLDL LIST
         MVC   BLDLLEN,BLDLLENV    MOVE LENGTH INFO TO BLDL LIST
         XC    TTR,TTR             ZERO OUT REST OF BLDL LIST
         BLDL  (R3),BLDLLIST       SEARCH FOR MEMBER NAME
         LR    R4,R15              SAVE THE BLDL RETURN CODE
         CLOSE ,MF=(E,OPENPL)      CLOSE THE DATA SET
         LA    R0,8                LOAD CONSTANT 8
         LR    R15,R4              RESTORE THE RETURN CODE
         CR    R15,R0              TEST IF BLDL HAD A PERM I/O ERROR
         BNER  R10                 ... NO, RETURN
         SPACE
BLDLERR  EQU   *
         LA    R1,MSGSEG1          ADDR OF MSG SEGMENT
         BAL   R10,MOVEDSN         DSNAME TO ERROR MESSAGE
         STC   R15,MFPL+MTLEN-MTDSECTD STORE LENGTH IN PARM LIST
         MVI   MFPL+L'MTINSRT+MTLEN-MTDSECTD,0 SET NO 2ND INSERT
         LA    R1,IOEMID           OPEN ERROR MSG ID
         BAL   R10,OUTMSG          OUTPUT ERROR MESSAGE
         B     TERMNATE
         SPACE
OPENERR  EQU   *
         LA    R1,MSGSEG1          ADDR OF MSG SEGMENT
         BAL   R10,MOVEDSN         DSNAME TO ERROR MESSAGE
         STC   R15,MFPL+MTLEN-MTDSECTD STORE LENGTH IN PARM LIST
         MVI   MFPL+L'MTINSRT+MTLEN-MTDSECTD,0 SET NO 2ND INSERT
         LA    R1,DNUMID           OPEN ERROR MSG ID
         BAL   R10,OUTMSG          OUTPUT ERROR MESSAGE
         B     TERMNATE
         DROP  R3,R9
         EJECT
***********************************************************************
*                                                                     *
*        OLD/SHR DYNAMIC ALLOCATION ERROR HANDLING ROUTINE            *
*                                                                     *
***********************************************************************
DAIRERTN EQU   *
         USING DAPB08,R9
         LA    R0,8                LOAD CONSTANT 8
         CR    R15,R0              TEST IF A CATALOG ERROR OCCURED
         LA    R10,EXITRC8         LOAD ERROR RETURN ADDR
         BNE   DAIRERR             ... NO, GO
         CH    R0,DA08CTRC         WAS DATASET NOT FOUND?
         BNE   DAIRERR             ... NO, GO
         TM    SWBYTE,OLD          OLD ALLOCATION?
         BNO   ALLOCNEW            ... NO, GO
         SPACE 1
DAIRERR  EQU   *
         ST    R15,DAIRFRC         SAVE RETURN CODE
         LINK  EP=IKJEFF18,MF=(E,DFAREA) CALL DAIR FAIL
         BR    R10                 EXIT
         DROP  R9
         EJECT
***********************************************************************
*                                                                     *
*        PARSE FAILURE ANALYSIS ROUTINE                               *
*                                                                     *
*       INPUT --                                                      *
*             R0  - FAILING ROUTINE IDENTIFIER                        *
*             R10 - RETURN ADDRESS                                    *
*             R15 - FAILING ROUTINE'S RETURN CODE                     *
*                                                                     *
***********************************************************************
GENFAIL  DS    0H
         LA    R1,GFAREA           ADDR OF GEN FAIL PRAM LIST
         USING GFDSECTD,R1
         STH   R0,GFCALLID         STORE FAILING ROUTINE ID IN LIST
         ST    R15,GFRCODE         STORE FAILING ROUTINE'S RC IN LIST
         DROP  R1
         SR    R1,R1               ZERO
         ST    R1,ECB                ECB
         LINK  EP=IKJEFF19,MF=(E,GFAREAP) CALL GENERAL FAIL
         BR    R10                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        ERROR MESSAGE OUTPUTING ROUTINE                              *
*                                                                     *
*        INPUT --                                                     *
*          R1  - ADDR OF MESSAGE ID                                   *
*          R10 - RETURN ADDRESS                                       *
*                                                                     *
***********************************************************************
OUTMSG   EQU   *
         MVC   MTMSGID+MFPL-MTDSECTD,0(R1) SET MSGID IN PARM LIST
         CALLTSSR EP=IKJEFF02,MF=(E,MFPL) ISSUE MESSAGE
         LTR   R15,R15             ANY ERRORS
         BZR   R10                 ... NO, RETURN
         LA    R10,TERMNATE        ADDR OF TERM ROUTINE
         LA    R0,GFPUTL           ADDR OF PUTLINE ID
         B     GENFAIL
         EJECT
***********************************************************************
*                                                                     *
*        COPY DSN TO MESSAGE SEGMENT ROUTINE                          *
*                                                                     *
*        INPUT --                                                     *
*          R1  - MESSAGE SEGMENT ADDR                                 *
*          R10 - RETURN ADDRESS                                       *
*        OUTPUT --                                                    *
*          R15 - MESSAGE SEGMENT LENGTH                               *
*                                                                     *
***********************************************************************
MOVEDSN  EQU   *
         SR    R0,R0               ZERO QUOTE COUNTER
         TM    SAVDSNF,DSNPDEDQ    DSN QUOTED?
         LR    R15,R1              SET MOVE RECEIVING ADDR
         MVI   0(R1),C' '          ASSUME NOQUOTED DSNAME
         BNO   NOQUOTE             ... NO, GO
         MVI   0(R1),C''''         SET FOR QUOTE PROPAGATION
         LA    R15,1(,R1)          SET MOVE RECEIVING ADDR
         LA    R0,2                SET QUOTE COUNTER
         SPACE 1
NOQUOTE  EQU   *
         MVC   1(L'MSGSEG1,R1),0(R1) INITIALIZE MSG SEGMENT
         LH    R14,DSNLEN          LOAD DSN LENGTH
         BCTR  R14,0               DECREMENT FOR MACHINE LENGTH
         EX    R14,DSNMOVE         MOVE DSN TO MSG SEGMENT
         LA    R15,1(R14)          RESTORE DSN LENGTH
         AR    R15,R0              PLUS QUOTE COUNTER
         BR    R10                 RETURN
         SPACE 1
DSNMOVE  MVC   0(*-*,R15),DSNAME   EXECUTED DSNAME MOVE
         EJECT
***********************************************************************
*                                                                     *
*        COPY MEMBER NAME TO MESSAGE SEGMENT ROUTINE                  *
*                                                                     *
*        INPUT --                                                     *
*          R1  - MESSAGE SEGMENT ADDR                                 *
*          R10 - RETURN ADDRESS                                       *
*        OUTPUT --                                                    *
*          R15 - MESSAGE SEGMENT LENGTH                               *
*                                                                     *
***********************************************************************
MOVEMNM  EQU   *
         USING DAPB08,R9
         MVI   0(R1),C' '          BLANK
         MVC   1(L'MSGSEG1-1,R1),0(R1) MSG SEGMENT
         MVI   0(R1),C'('          SET LEADING PAREN
         LH    R15,MBRNSLEN        LOAD SAVED MEMBER NAME LENGTH
         BCTR  R15,0               DECREMENT FOR MACHINE LENGTH
         EX    R15,MNMMOVE         MOVE MEMBER NAME TO MSG SEGMENT
         LA    R0,C')'             LOAD RIGHT PAREN
         STC   R0,2(R15,R1)        SET TRAILING PAREN
         LA    R15,3(R15)          SET MSG SEGMENT LENGTH
         BR    R10                 RETURN
         SPACE 1
MNMMOVE  MVC   1(*-*,R1),DA08MNM   EXECUTED MEMBER NAME MOVE
         DROP  R9
         EJECT
***********************************************************************
*                                                                     *
*        PROMPTER CONSTANTS                                           *
*                                                                     *
***********************************************************************
         SPACE
ADDRPCL  DC    A(FORTVPCL)         PARSE PARM LIST ADDR
FVMSGCA  DC    A(FORTVMSG)         MESSAGE TABLE ADDR
FF000000 DC    X'FF000000'         DCHAIN DELIMITER
TERMPDE  DS    0F                  SYSTERM DUMMY PDE
         DC    A(TERMDSN)
         DC    AL2(L'TERMDSN),AL1(DSNPDEDP,0)
         DC    4A(0)
         PRINT NOGEN
DCB      DCB   DDNAME=DDNAME,DSORG=PO,MACRF=R DCB FOR BLDL, TASKLIB
LTHDCB   EQU   *-DCB               LENGTH OF DCB
         PRINT GEN
PRTSPACE DC    H'6233'             PRINT BLKSIZE
         DC    H'45'               PRINT PRIMARY SPACE
         DC    H'15'               PRINT SECONDARY SPACE
OBJSPACE DC    H'3120'             OBJ BLKSIZE
         DC    H'40'               OBJ PRIMARY ALLOCATION
         DC    H'20'               OBJ SECONDARY ALLOCATION
DFDAIRID DC    0H'0',AL1(0,DFDAIR) DAIR FAILURE ID
BLDLLENV DS    0H                  BLDL LENGTH INFO
         DC    H'1'
         DC    H'14'
TNAMSG   DS    0H
         DC    AL2(TNAMSGE-TNAMSGB,0) LEN AND OFFSET OF SEGMENT
TNAMSGB  DC    C'FOR78106I TEMPNAME ASSUMED AS MEMBER NAME'
TNAMSGE  DS    0C
NODECK   DC    C'NOD'              NODECK OPTION
TEST     DC    AL1(L'TESTTXT-1)    LENGTH LESS ONE OF 'TEST'
TESTTXT  DC    C'TEST'             TEST OPTION
LOAD     DC    AL1(L'LOADTXT-1)    LENGTH LESS ONE OF 'LOAD'
LOADTXT  DC    C'OBJ'              LOAD OPTION
SOURC    DC    AL1(L'SRCTXT-1)     LENGTH LESS ONE OF 'SOURCE'
SRCTXT   DC    C'S'                SOURCE OPTION
LIST     DC    AL1(L'LISTTXT-1)    LENGTH LESS ONE OF 'LIST'
LISTTXT  DC    C'L'                LIST OPTION
MAP      DC    AL1(L'MAPTXT-1)     LENGTH LESS ONE OF 'MAP'
MAPTXT   DC    C'MAP'              MAP OPTION
OPT      DC    AL1(L'OPTTXT-1)     LENGTH LESS ONE OF 'OPT'
OPTTXT   DC    C'OPT'              MAP OPTION
TERM     DC    AL1(L'TERMTXT-1)    LENGTH LESS ONE OF 'TERM'
TERMTXT  DC    C'TERM'             TERM OPTION
XREF     DC    AL1(L'XREFTXT-1)    LENGTH LESS ONE OF 'XREF'
XREFTXT  DC    C'X'                XREF OPTION
FIPS     DC    AL1(L'FIPSTXT-1)    LENGTH LESS ONE OF 'FIPS'
FIPSTXT  DC    C'FIPS'             FIPS OPTION
GOST     DC    AL1(L'GOSTTXT-1)    LENGTH LESS ONE OF 'GOSTMT'
GOSTTXT  DC    C'GS'               GOSTMT OPTION
SDUMP    DC    AL1(L'SDMPTXT-1)    LENGTH LESS ONE OF 'SDUMP'
SDMPTXT  DC    C'SD'               SDUMP OPTION
SRCF     DC    AL1(L'SRCFTXT-1)    LENGTH LESS ONE OF 'SRCFLG'
SRCFTXT  DC    C'SF'               SRCFLG OPTION
SYM      DC    AL1(L'SYMTXT-1)     LENGTH LESS ONE OF 'SYM'
SYMTXT   DC    C'SYM'              SYM OPTION
TRMF     DC    AL1(L'TRMFTXT-1)    LENGTH LESS ONE OF 'TRMFLG'
TRMFTXT  DC    C'TF'               TRMFLG OPTION
         AIF   (&CVER LT 40).NOV4OVS
RENT     DC    AL1(L'RENTTXT-1)    LENGTH LESS ONE OF 'RENT'
RENTTXT  DC    C'RENT'             RENT OPTION
SXM      DC    AL1(L'SXMTXT-1)     LENGTH LESS ONE OF 'SXM'
SXMTXT   DC    C'SXM'              SXM OPTION
ADBL     DC    C',AD('             AUTODBL OPTION PLUS A COMMA
.NOV4OVS ANOP
NO       DC    C'NO'               'NO' USED TO NEGATE OPTIONS
CHARLEN  DC    C',CL('             CHAR LENGTH OPTION PLUS A COMMA
NAME     DC    C',NAME('           PROGRAM NAME OPTION PLUS A COMMA
LINECNT  DC    C',LC('             LINECNT OPTION PLUS SEPARATOR ','
FLAGTXT  DC    C',FLAG('           FLAG OPTION PLUS A COMMA
FLAGVALS DC    C'IWES'             FLAG OPTION VALUES
LANGLVL  DC    C',LVL('            LANGLVL OPTION PLUS A COMMA
LANGLTXT DC    C'67'               LANGLVL VALUES
FIPSTBL  DC    C'FS'               FIPS VALUES TABLE
FIXED    DC    C',FIXED'           FIXED OPTION PLUS A COMMA
FREE     DC    C',FREE'            FREE OPTION PLUS A COMMA
CI       DC    C',CI('             CI OPTION PLUS A COMMA
DC       DC    C',DC('             DC OPTION PLUS A COMMA
LOADT    DC    AL1(L'LODTTXT)      LENGTH OF '.LOAD'
LODTTXT  DC    C'.LOAD'            TASKLIB QUALIFIER '.LOAD'
FORT     DC    AL1(L'FORTTXT)      LENGTH OF '.FORT'
FORTTXT  DC    C'.FORT'            INPUT QUALIFIER '.FORT'
LISTT    DC    AL1(L'LISTTTXT)     LENGTH OF '.LIST'
LISTTTXT DC    C'.LIST'            OUTPUT QUALIFIER '.LIST'
OBJ      DC    AL1(L'OBJTXT)       LENGTH OF '.OBJ'
OBJTXT   DC    C'.OBJ'             OBJECT QUALIFIER '.OBJ'
FORTVS   DC    CL8'&COMPID'        COMPILER MODULE NAME
TEMPNAME DC    CL8'TEMPNAME'       DEFAULT MEMBER = TEMPNAME
TERMDSN  DC    C'*'                TERMINAL DSNAME
LNPMID   DC    CL4'LNP'            LIB NOT PARTITIONED MSG ID
MNPMID   DC    CL4'MNP'            MBR SPEC NOT PART MSG ID
MNFMID   DC    CL4'MNF'            MBR NOT FOUND MSG ID
TNFMID   DC    CL4'TNF'            TEMPNAME NOT FOUND MSG ID
DNUMID   DC    CL4'DNU'            DATASET NOT USABLE MSG ID
IOEMID   DC    CL4'IOE'            I/O ERROR MSG ID
TOFMID   DC    CL4'TOF'            TASKLIB OPEN FAIL MSG ID
         EJECT
         PRINT NOGEN
         FORTVS
         PRINT GEN
FORTVMSG CSECT
         IKJTSMSG ('FOR78100I TASKLIB OPEN FAILED'),TOF
         IKJTSMSG ('FOR78106I MEMBER ',,' NOT IN DATA SET ',),MNF
         IKJTSMSG ('FOR78108I DATA SET ',,' NOT USABLE+'),DNU1
         IKJTSMSG ('FOR78108I CANNOT OPEN DATA SET'),DNU,DNU1
         IKJTSMSG ('FOR78116I MEMBER ',,' SPECIFIED BUT ',,' NOT A PART*
               ITIONED DATA SET'),MNP
         IKJTSMSG ('FOR78117I LIBRARY ',,' SPECIFIED BUT NOT A PARTITIO*
               NED DATA SET'),LNP
         IKJTSMSG ('FOR78106I MEMBER TEMPNAME NOT IN DATA SET ',,'+'), *
               TNF1
         IKJTSMSG ('FOR78106I TEMPNAME ASSUMED AS MEMBER NAME'),TNF,   *
               TNF1
         IKJTSMSG ('FOR78108I BLDL I/O ERROR'),IOE,DNU1
         IKJTSMSG
         EJECT
         PRINT NOGEN
         IKJEFFDF DFDSECT=YES,DFDSEC2=YES
         IKJEFFGF GFDSECT=YES
         IKJCPPL
         IKJPPL
PPLLN    EQU   *-PPL               LENGTH OF PARSE PARM LIST
         IKJDAPL
DAPLLN   EQU   *-DAPL              LENGTH OF DAIR PARM LIST
         IKJDAP08
DAPB08LN EQU   *-DAPB08            LENGTH OF DAIR 08 PARM LIST
         IKJDAP18
DAPB18LN EQU   *-DAPB18            LENGTH OF DAIR 18 PARM LIST
         IKJDAP1C
DAPB1CLN EQU   *-DAPB1C            LENGTH OF DAIR 1C PARM LIST
         IKJDAP0C
DA0CDDN  DS    16CL8               CONCATENATED DDNAMES
DAPB0CLN EQU   *-DAPB0C            LENGTH OF DAIR 0C PARM LIST
         IKJDAP10
DAPB10LN EQU   *-DAPB10            LENGTH OF DAIR 10 PARM LIST
         IKJIOPL
IOPLLN   EQU   *-IOPL              LENGTH OF IOPL
         IKJEFFMT MTDSECT=YES,MTNINST=2
         DCBD  DSORG=PO,DEVD=DA
         CVT   LIST=NO,DSECT=YES
         PRINT GEN
         EJECT
DSNPDED  DSECT
DSNPDEDA DS    F                   ADDR OF DSNAME ENTERED
DSNPDEDL DS    H                   LENGTH OF DSNAME ENTERED
DSNPDEDF DS    X                   DSNAME FLAGS
DSNPDEDP EQU   X'80'               - INDICATES DSNAME IS PRESENT
DSNPDEDQ EQU   X'40'               - INDICATES DSNAME WAS IN QUOTES
         DS    X                   RESERVED FIELD
DSNPDEMA DS    F                   ADDR OF MEMBER NAME ENTERED
DSNPDEML DS    H                   LENGTH OF MEMBER NAME ENTERED
DSNPDEMF DS    X                   MEMBER NAME FLAGS
         DS    X                   RESERVED FIELD
DSNPDEPA DS    F                   ADDR OF PASSWORD ENTERED
DSNPDEPL DS    H                   LENGTH OF PASSWORD ENTERED
DSNPDEPF DS    X                   PASSWORD FLAGS
         DS    X                   RESERVED FIELD
         EJECT
WORKAREA DSECT
SAVEAREA DS    18F                 MAIN PROMPTER SAVE AREA
STORZERO EQU   *                   START OF AREA TO BE ZEROED
PARMLIST DS    0F                  VS FORTRAN PARM LIST
OPTNPTR  DS    A                   - OPTION LIST ADDR
DDNPTR   DS    A                   - ALTERNATE DDNAME LIST ADDR
OPTNLTH  DS    H                   OPTION LIST LENGTH
OPTNLIST DS    CL512               FORTRAN OPTION LIST
DDNLTH   DS    H                   ALTERNATE DDNAME NAME LIST LENGTH
DDNLIST  DS    0C                  ALTERNATE DDNAME LIST
SYSLIN   DS    CL8                 - SYSLIN SLOT
         DS    CL24                - SLOTS NOT USED BY VS FORTRAN
SYSIN    DS    CL8                 - SYSIN SLOT
SYSPRINT DS    CL8                 - SYSPRINT SLOT
         DS    CL8                 - SYSPUNCH SLOT (NOT USED)
         DS    CL16                - SLOTS NOT USED BY VS FORTRAN
SYSTERM  DS    CL8                 - SYSTERM SLOT
SYSLIB   DS    CL8                 - SYSLIB SLOT
DDNLLEN  EQU   *-DDNLIST           LENGTH OF ALT DDNAME LIST
TASKLIB  DS    CL8                 TASKLIB DDNAME (MUST FOLLOW DDNLIST)
COMPLRID DS    CL8                 MODULE NAME IF COMPILER
ATCHLST  ATTACH SF=L
OPENPL   OPEN  (,),MF=L            OPEN PARAMETER LIST
DCBG     DS    0F                  DCB FOR PARTITIONED DATA SET
         DS    (LTHDCB)X
PDLADDR  DS    F                   PARSE RETURNED PDL ADDR
ECB      DS    F                   EVENT CONTROL BLOCK
DFAREA   DS    0F                  DAIR FAIL PARM LIST
         DS    (DFLEN)X
DAIRFRC  DS    F                   DAIR FAIL RETURN CODE SAVE
DAIRPL   DS    0F
         DS    (DAPLLN)X           DAIR PARAMETER LIST
DAIRPB   DS    0F                  DAIR PARAMETER BLOCKS
         DS    (DAPB08LN)X
         ORG   DAIRPB
         DS    (DAPB18LN)X
         ORG   DAIRPB
         DS    (DAPB1CLN)X
         ORG   DAIRPB
         DS    (DAPB0CLN)X
         ORG   DAIRPB
         DS    (DAPB10LN)X
         ORG   ,
INPDDCNT DS    H                   COUNT OF INPUT DATASETS
INPDDNMS DS    16CL8               DDNAMES FOR CONCATENATION
LIBDDCNT DS    H                   COUNT OF SYSLIB DATASETS
LIBDDNMS DS    16CL8               DDNAMES FOR CONCATENATION
         SPACE 1
WORKA2   DS    0D                  START OF 2ND PART OF WORKAREA
VALSAVE  DS    18F                 VALIDITY EXIT SAVE AREA
VCHKLIST DS    3F                  DUMMY VALIDITY EXIT PARM LIST
VCHKADDR DS    F                   VALIDITY EXIT PARM LIST SAVEAREA
PARSEPL  DS    0F
         DS    (PPLLN)X            AREA FOR THE PARSE PARAMETER LIST
IOPLPL   DS    0F                  AREA FOR THE I/O SERVICE LIST
         DS    (IOPLLN)X
GFAREA   DS    0F                  GENERAL FAIL PARM LIST
         DS    (GFLENGF)X
GFAREAP  DS    F                   GENERAL FAIL PARM LIST PNTR
MFPL     DS    0F                  IKJEFF02 PARM LIST
         DS    (MTLENMT)X
STACKPB  STACK ,MF=L               AREA FOR THE STACK PARAMETER BLOCK
ADDNPTR  DS    F                   ALT DDNAME LIST POINTER
IMBRADDR DS    F                   ADDR OF INPUT MEMBER NAME
IDSNADDR DS    F                   ADDR OF INPUT DSNAME
IMBRLEN  DS    H                   LENGTH OF INPUT MEMBER NAME
MBRNSLEN DS    H                   LENGTH OF MEMBER NAME SAVE FIELD
IDSNLEN  DS    H                   LENGTH OF INPUT DSNAME
DSNAREA  DS    0H                  DSNAME WORKAREA
DSNLEN   DS    H                   - LENGTH OF DSNAME FIELD
DSNAME   DS    CL50                - DATA SET NAME FIELD FOR DAIR
         DS    0H
NEWSPACE DS    0CL6                NEW ALLOCATION SPACE PARMS
NEWAVLTH DS    H                   - AVERAGE RECORD LENGTH
NEWPRIME DS    H                   - PRIMARY ALLOCATION
NEWSEC   DS    H                   - SECONDARY ALLOCATION
BLDLLIST DS    0H                  BLDL LIST
BLDLLEN  DS    XL4                 - LENGTH INFORMATION
MEMBNAME DS    CL8                 - MEMBER NAME BLDL IS TO SEARCH FOR
TTR      DS    CL6                 - RELATIVE TRACK INFORMATION ETC.
SWBYTE   DS    X                   PROGRAM INDICATORS
BLDL     EQU   X'80'               - INDICATES BLDL REQUIRED
OLD      EQU   X'40'               - INDICATES OLD DISPOSITION
ICONCAT  EQU   X'20'               - INDICATES INPUT CONCATENATED
LCONCAT  EQU   X'10'               - INDICATES SYSLIB CONCATENATED
LIBR     EQU   X'08'               - INDICATES SYSLIB BEING ALLOCATED
INP      EQU   X'04'               - INDICATES INPUT BEING ALLOCATED
LIBT     EQU   X'02'               - INDICATES TASKLIB BEING ALLOCATED
SAVDSNF  DS    X                   DSN PDE FLAGS SAVEAREA
MEMBSAVE DS    CL8                 MEMBER NAME SAVEAREA
MSGSEG1  DS    CL52                TEXT OF SEGMENT
MSGSEG2  DS    CL52                TEXT OF SEGMENT
ENDWORKA DS    0D                  END OF PROMPTER GETMAIN STORAGE
ZEROSTOR EQU   ENDWORKA-STORZERO   LENGTH OF AREA TO BE ZEROED
TWORKAL  EQU   ENDWORKA-WORKAREA   LENGTH OF PROMPTER GETMAIN STORAGE
WORKA1L  EQU   WORKA2-WORKAREA     LENGTH OF FIRST PART OF WORKAREA
WORKA2L  EQU   ENDWORKA-WORKA2     LENGTH OF SECOND PART OF WORKAREA
         END
