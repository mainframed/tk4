         TITLE '* * *  POF - VTAM SECONDARY PROGRAM OPERATOR  * * *'
*---------------------------------------------------------------------*
*  PURPOSE - PROVIDE VTAM SECONDARY PROGRAM OPERATOR FOR USE IN TSO   *
*            COMMAND OR AS A STAND ALONE VTAM APPLICATION PROGRAM.    *
*                                                                     *
*  OPERATION - POF OPENS ITS OWN ACB, AND USING TPUT/TGET AND         *
*              SENDCMD/RCVCMD ALLOWS AN AUTHORIZED TSO USER TO        *
*              BE A VTAM SECONDARY PROGRAM OPERATOR.  THE COMMANDS    *
*              AND RESPONSES ARE ALSO RECORDED ON SYSLOG.             *
*---------------------------------------------------------------------*
*              D I S C L A I M E R                                    *
*                                                                     *
*      THE AUTHOR SUPPLIES THIS CODE WITH NO GUARANTEES EXPRESSED     *
*      OR IMPLIED BY THE AUTHOR AND/OR THE U.S. POSTAL SERVICE.       *
*---------------------------------------------------------------------*
*  WRITTEN BY DOUG MOORE - SEPTEMBER 1978                             *
*                                                                     *
*  MODIFIED BY DOUG MOORE - JANUARY 1980                              *
*     SUPPORT ADDED FOR * = REPEAT LAST COMMAND                       *
*                       ? = SHOW LAST COMMAND                         *
*                       X = PCF EXIT                                  *
*                                                                     *
*  MODIFIED BY DOUG MOORE - AUGUST 1980                               *
*     SUPPORT ADDED FOR MULTIPLE POF'S.  CURRENT MAX OF 3.            *
*                                                                     *
*  MODIFIED BY DOUG MOORE - JULY 1981                                 *
*     SUPPORT ADDED FOR PFKEYS.                                       *
*                                                                     *
*  MODIFIED BY MARK WHITE - DECEMBER 1982                             *
*     FIXED ABEND U128 DUE TO RCVCMD RTNCD=14 FDBK2=70 AFTER          *
*     'END' ENTERED                                                   *
*                                                                     *
*  MODIFIED BY MARK WHITE - MAY 1983                                  *
*     ADDED BRANCH AROUND CODE THAT ECHOS COMMAND RESULTS TO          *
*     CONSOLE TO AVOID CLUTTERING CONSOLE WITH UNNECESSARY JUNK       *
*                                                                     *
*  MODIFIED BY BRIAN SCOTT - DECEMBER 1982                      WASC  *
*     ADDED CODE TO DISALLOW "V NET" COMMANDS EXCEPT FOR THE    WASC  *
*     ELITE FEW. ALSO ALLOWED THE NATIONAL VTAM OPERATORS TO    WASC  *
*     USE POF WITHOUT OPERATOR CAPABILITY. ALSO ADDED ANOTHER   WASC  *
*     BASE REGISTER.                                            WASC  *
*                                                               WASC  *
*     NOTE: THE FOLLOWING IS THE VTAM PARAMTERS FOR YOUR        WASC  *
*           VTAM PARAMETER LIBRARY.                             WASC  *
*                                                               WASC  *
*         VBUILD TYPE=APPL             APPLICATION MAJOR NODE   WASC  *
* TPPOF1  EAS=1,                       ONLY 1 PER ACB           WASC  *
*         ACBNAME=POF001,              ACB # 1                  WASC  *
*         AUTH=(SPO),                                           WASC  *
*         PRTCT=POFSPOPW                                        WASC  *
* TPPOF2  EAS=1,                       ONLY 1 PER ACB           WASC  *
*         ACBNAME=POF002,              ACB # 2                  WASC  *
*         AUTH=(SPO),                                           WASC  *
*         PRTCT=POFSPOPW                                        WASC  *
* TPPOF3  EAS=1,                       ONLY 1 PER ACB           WASC  *
*         ACBNAME=POF003,              ACB # 3                  WASC  *
*         AUTH=(SPO),                                           WASC  *
*         PRTCT=POFSPOPW                                        WASC  *
*                                                                     *
*  MODIFIED BY JIM MARSHALL - MARCH 1987                        JDMA  *
*        FIXED BUG PER SUGGESTION BY FRANK WALSCHANGER OF SPIEGEL     *
*        CATALOG. ONCE A SCREEN IS RETURNED, IT COMES TO YOU FROM AN  *
*        ASYNCHRONOUS EXIT. WELL SINCE THE PROCESSOR IS SO FAST, THE  *
*        ROUTINE GETS BACK TO THE USER BEFORE THE RESULTS. SOLVING    *
*        THE PROBLEM WE PUT A STIMER FOR 1 SEC, THEREBY LETTING THE   *
*        ASYNCH EXIT PUMPING OUT THE DETAILS.                   JDMA  *
*                                                                     *
*        JANUARY 1988                                           JDMB  *
*        FIXED USER ABEND  TO RCVCMD RTNCD=14 FDBK2=6D AFTER    JDMB  *
*        'END' ENTERED                                          JDMB  *
*---------------------------------------------------------------------*
         SPACE 2
POF      CSECT
         SAVE  (14,12),,POF-&SYSDATE-&SYSTIME   SAVE REGISTERS
         LR    R12,R15             LOAD BASE REGISTER
         LA    R6,1                GET ANOTHER BASE REG READY    WASC
         LA    R6,4095(R6,R12)     BASE REG 6 AT R12 PLUS 4K     WASC
         USING POF,R12,R6                                        WASC
         LR    R2,R13              SAVE PREVIOUS RSA POINTER
         LA    R13,POFRSA          POINT TO MY RSA
         ST    R2,4(R13)           CHAIN SAVE AREAS
         ST    R13,8(R2)           CHAIN SAVE AREAS
         SPACE 2
         L     R2,PSAAOLD          GET A(ASCB)
         USING ASCB,R2
         L     R2,ASCBTSB          GET A(TSB)
         LTR   R2,R2               Q. IS THIS TSO (A(TSB) NOT = 0)
         BZ    POFRTN              ...NO, FORGET IT
         ST    R1,CPPLPTR          SAVE A(CPPL)
         USING CPPL,R1
         MVC   CSPLUPT,CPPLUPT     GET A(UPT)
         MVC   CSPLECT,CPPLECT     GET A(ECT)
         L     R2,CPPLPSCB         GET A(PSCB)
         USING PSCB,R2
         DROP  R1
         MVC   POFUSRID,PSCBUSER   SAVE USERID
         SPACE 1                                                   WASC
         LA    R10,SIDTAB          GET ADDRESS OF ID TABLE         WASC
         LA    R9,SIDEND           GET ADDRESS OF LAST ENTRY       WASC
         LA    R8,7                LOAD INCREMENT                  WASC
         SPACE 1                                                   WASC
SIDLOOP  CLC   POFUSRID(7),0(R10)  IS THIS A GOOD GUY ?            WASC
         BE    VAUTH               BIF YES,ALLOW "V NET" COMMANDS  WASC
         SPACE 2                                                   WASC
         CLC   0(7,R10),=XL7'FF'   IS THIS THE DUMMY ENTRY? WASC
         BE    CNATOP              BIF YES,CHECK FOR NAT'L OPER    WASC
         SPACE 2                                                   WASC
         BXLE  R10,R8,SIDLOOP      MORE ENTRIES?, BIF YES          WASC
         SPACE 1                                                   WASC
CNATOP   CLI   POFUSRID,C'$'       COULD THIS BE NATIONAL OPER?    WASC
         BNE   CONT1               BIF NO,CHECK FOR OPER CAP.      WASC
         SPACE 1                                                   WASC
         CLC   POFUSRID+3(2),=C'NO' IS THIS NAT'L VTAM OPER        WASC
         BE    POFAUTH             BIF YES,HE'S OK TO DISPLAY      WASC
         SPACE 2                                                   WASC
CONT1    TM    PSCBATR1,PSCBCTRL   Q. OPER AUTHORIZED WASC
         BO    POFAUTH             ...YES, OK TO PROCEED
         MVC   POFOUT(23),=C'* USER NOT AUTHORIZED *'
         TPUT  POFOUT,23
         B     POFRTN              DONT LET THEM PLAY
         SPACE 2
         DROP  R2
         EJECT
VAUTH    MVI   VAUTHFLG,X'FF'      TURN "V NET" AUTH. FLAG        WASC
         SPACE 1                                                  WASC
POFAUTH  DS    0H
         OPEN  (POFACB)            OPEN SPO ACB
         LTR   R15,R15             Q. OPEN OK
         BZ    POFOPNOK            ...YES, CONTINUE
         SPACE 2
POFOPNF  DS    0H
         LA    R2,POFACB           POINT TO ACB
         USING IFGACB,R2
         CLI   ACBOFLGS,X'02'      Q. POSSIBLE ACB ALREADY OPEN
         BNE   POFOPNF2            ...NO, SOMETHING ELSE
         CLI   ACBERFLG,X'58'      Q. POSSIBLE ACB ALREADY OPEN
         BNE   POFOPNF2            ...NO, SOMETHING ELSE
         CLC   =CL8'POF005',POFACBAI+1   Q. IS THIS THE LAST ALTERNATE
         BE    POFMAXU                   ...YES, THAT WAS THE LAST ACB
         AP    POFACB#,=PL1'1'     GET NEXT ACB NUMBER
         UNPK  POFACBAI+4(3),POFACB#(2)
         OI    POFACBAI+6,X'F0'
         B     POFAUTH             TRY AGAIN
POFMAXU  DS    0H
         MVC   POFOUT(37),=C'* MAXIMUM POF USERS ALREADY STARTED *'
         TPUT  POFOUT,37
         B     POFRTN              GO AWAY
         SPACE 2
POFOPNF2 DS    0H
         MVC   POFOUT(39),=C'OPEN FAILED FOR VTAM SPO ACB - XXXXXXXX'
         MVC   POFOUT+31(8),POFACBAI+1   INSERT ACB NAME
         TPUT  POFOUT,39
         MVC   POFDBLWK+1(1),ACBOFLGS   GET OPEN FLAGS
         UNPK  POFDBLWK(1),POFDBLWK+1(1)   PREPARE FOR CONVERSION
         MVC   POFDBLWK+3(1),ACBERFLG   GET ERROR FLAGS
         UNPK  POFDBLWK+2(1),POFDBLWK+3(1) PREPARE FOR CONVERSION
         NC    POFDBLWK(4),=X'0F0F0F0F'    PREPARE FOR TRANSLATE
         TR    POFDBLWK(4),POFTRTBL     TRANSLATE
         MVC   POFMSG1(4),POFDBLWK    PUT IN MESSAGE
         TPUT  POFMSG1,L'POFMSG1
         B     POFRTN              OPEN FAILED SO GET OUT
         SPACE 2
         DROP  R2
         EJECT
POFOPNOK DS    0H
         GTSIZE                    , GET SCREEN SIZE
         STC   R0,GTSIZE0          SAVE FOR LATER TEST
         STC   R1,GTSIZE1          SAVE FOR LATER TEST
         MVC   WTOLTH,=AL2(33)     LENGTH OF MESSAGE
         MVC   WTOTXT(7),POFUSRID  PUT USERID IN MESSAGE
         MVC   WTOTXT+7(14),=C' LOGGED ON TO '
         MVC   WTOTXT+21(8),POFACBAI+1   PUT ACB IN MESSAGE
         WTO   MF=(E,WTOLIST)      WRITE LOGON TO SYSLOG
         SPACE 2
         MVC   POFOUT(40),=C'VTAM SPO FUNCTION ACTIVATED FOR XXXXXXXX'
         MVC   POFOUT+32(8),POFACBAI+1   PUT ACB IN MESSAGE
         TPUT  POFOUT,40
         SPACE 2
POFRCV1  DS    0H
         RCVCMD RPL=POFRPLRC       ISSUE FIRST RCVCMD
         LTR   R15,R15             Q. ACCEPTED
         BZ    POFRQCMD            ...YES, GO REQUEST COMMANDS
         BAL   R10,ABEND           ...NO, GIVE UP
         SPACE 2
POFRQCMD DS    0H
         STIMER WAIT,BINTVL=SNOOZE                               JDMA
         MVC   POFOUT(32),=CL32'ENTER VTAM CMD, HELP, OR PF1'    JDMA
         TPUT  POFOUT,32
         CLI   GTSIZE0,X'00'       Q. IS THIS 3270 INPUT
         BNE   POF3270             ...YES, GO DO 3270 PROCESSING
         TGET  POFIN,L'POFIN       GET THE COMMAND
         LTR   R1,R1               Q. ANY INPUT
         BZ    POFRQCMD            ...NO, GO ASK AGAIN
POFRQCHK DS    0H
         OC    POFIN,=CL80' '      MAKE UPPERCASE FOR WRITING TO SYSLOG
         CLC   =CL3'END',POFIN     Q. THE END
         BE    POFEOJ              ...YES, GO TO EOJ
         CLC   =CL4'HELP',POFIN    Q. HELP WANTED
         BE    POFHELP             ...YES, GO DO HELP
         SPACE 2
         CLI   POFIN,C'*'          Q. WANT TO DO SAME THING
         BNE   POFCHKQ             ...NO, GO CHECK FOR QUESTION MARK
         L     R1,SAVECMDL         RELOAD LENGTH
         MVC   POFIN,SAVECMD       RELOAD COMMAND
         B     POFDOCMD            GO DO COMMAND
         SPACE 2
POFCHKQ  DS    0H
         CLI   POFIN,C'?'          Q. WANT TO SEE LAST COMMAND
         BNE   POFSTORE            ...NO, GO SAVE THIS INPUT
         L     R1,SAVECMDL         RELOAD LENGTH
         TPUT  SAVECMD,(1)         WRITE LAST COMMAND BACK OUT
         B     POFRQCMD            GO SEE WHAT TO DO
         SPACE 2
POFSTORE DS    0H
         ST    R1,SAVECMDL         SAVE LENGTH
         MVC   SAVECMD,POFIN       SAVE COMMAND
POFDOCMD DS    0H
         CLC   =CL2'X ',POFIN      Q. X FOR PCF
         BE    PCFEXIT             ...YES, GO DO IT
         SPACE 2
* ISSUE THE COMMAND
         SPACE 1                                                  WASC
         LA    R10,POFIN           GET STARTING ADDRESS           WASC
         LA    R9,POFIN+72         GET ENDING ADDRESS             WASC
         LA    R8,1                LOAD INCREMENT                 WASC
         SPACE 1                                                  WASC
SRCHNBLK CLI   0(R10),C' '         IS IT NON-BLANK?               WASC
         BNE   CHKVARY             BIF YES,FOUND FIRST NON-BLANK  WASC
         SPACE 1                                                  WASC
         BXLE  R10,R8,SRCHNBLK     ARE WE DONE? BIF NO            WASC
         SPACE 1                                                  WASC
CHKVARY  CLI   0(R10),C'V'         IS THIS A "V NET" COMMAND?     WASC
         BNE   ALLOWCMD            BIF NO,ALLOW COMMAND           WASC
         SPACE 2                                                  WASC
         CLI   VAUTHFLG,X'FF'      IS THIS OPER AUTHORIZED?       WASC
         BE    ALLOWCMD            BIF YES,ALLOW COMMAND          WASC
         SPACE 2                                                  WASC
         MVC   POFOUT(35),=C'* USER NOT AUTHORIZED TO DO "V NET"' WASC
         TPUT  POFOUT,35           TELL HIM HE DID A NO-NO        WASC
         SPACE 1                                                  WASC
         B     POFRQCMD            GO GET ANOTHER COMMAND         WASC
         SPACE 1                                                  WASC
ALLOWCMD LA    R2,POFRPLSC         POINT TO SENDCMD RPL           WASC
         USING IFGRPL,R2
         AH    R1,=H'4'            ADD HEADER LENGTH TO COMMAND LENGTH
         ST    R1,RPLRLEN          STORE LENGTH IN RPL
         DROP  R2
         STH   R1,WTOLTH           STORE LENGTH IN WTO
         MVC   WTOTXT(L'POFIN),POFIN   MOVE COMMAND TO WTO
         WTO   MF=(E,WTOLIST)      WRITE COMMAND TO LOG
         SENDCMD RPL=POFRPLSC
         LTR   R15,R15             Q. SUCCESSFUL
         BZ    POFRQCMD            ...YES, GO GET ANOTHER COMMAND
         BAL   R10,ABEND           ...NO, GIVE UP
         EJECT
PCFEXIT  DS    0H
         XC    POFCECB,POFCECB     CLEAR ECB
         XC    POFCBUF+2(2),POFCBUF+2   CLEAR OFFSET
         MVC   POFCBUF+4(80),POFIN   GET COMMAND
         LA    R1,CSPLIST          POINT TO CSPL
         LINK  EPLOC=IKJSCAN
         B     POFRQCMD
         EJECT
POF3270  DS    0H
         TGET  POFIN,L'POFIN,ASIS  GET THE COMMAND
         LTR   R1,R1               Q. ANY INPUT
         BZ    POFRQCMD            ...NO, GO ASK AGAIN
         LA    R11,AIDTABLE        POINT TO AID TABLE
         LA    R10,NUMAIDS         NUMBER OF AIDS I MIGHT SEE
POFAIDLP DS    0H
         CLC   POFIN(1),0(R11)     Q. IS THIS THE AID
         BE    POFGAID             ...YES, PROCEED
         LA    R11,4(0,R11)        POINT TO NEXT ENTRY
         BCT   R10,POFAIDLP        LOOP UNTIL DONE
*        NO HITS POINTS TO DEFAULT ENTRY
         SPACE 2
POFGAID  DS    0H
         L     R2,0(0,R11)         GET ADDRESS OF AID FUNCTION TABLE
         CLI   0(R2),X'FF'         Q. ENTER KEY
         BNE   POFNOTEN            ...NO, PROCEED
         MVC   POFIN(74),POFIN+6   GET RID OF 3270 STUFF
         SH    R1,=H'6'            FIX LENGTH
         BNP   POFRQCMD            THERE WAS NO INPUT, GET NEW CMD
         B     POFRQCHK            RETURN TO NORMAL FLOW
POFNOTEN DS    0H
         MVC   WORKCMD,POFIN       SAVE INPUT TEMPORARILY
         MVC   POFIN,BLNKLINE      BLANK OUT BUFFER
         CLI   0(R2),X'00'         Q. ANY PROCESSING
         BNE   POFAIDP             ...YES, PROCEED
POFNOOPS DS    0H
         SLR   R3,R3               CLEAR REG FOR EXECUTE
         IC    R3,1(0,R2)          GET LENGTH FOR EXECUTE MOVE
         EX    R3,AIDMVC           MOVE IN COMMAND
         LA    R1,1(0,R3)          PUT REAL LENGTH IN R1
         B     POFRQCHK            RETURN TO NORMAL FLOW
AIDMVC   MVC   POFIN(0),2(R2)      MOVE COMMAND TO BUFFER
BLDMVC   MVC   0(0,R4),WORKCMD+6   BUILD NEW COMMAND
         SPACE 2
POFAIDP  DS    0H
         CLI   0(R2),X'01'         Q. FURTHER PROCESSING REQUIRED
         BNE   POFAIDF             ...NO, PROCEED
         SH    R1,=H'6'            CORRECT LENGTH
         BNP   POFNOOPS            BRANCH IF NO OPERANDS
         SLR   R3,R3               CLEAR REG FOR EXECUTE
         IC    R3,1(0,R2)          GET LENGTH FOR EXECUTE MOVE
         EX    R3,AIDMVC           MOVE IN 1ST PART OF COMMAND
         LA    R4,POFIN+1(R3)      POINT TO END OF THIS PIECE
         BCTR  R1,0                DECREMENT FOR EXECUTED MOVE
         EX    R1,BLDMVC           MOVE IN REMAINDER OF COMMAND
         LA    R1,2(R1,R3)         ADD NEW PART TO TOTAL(+2 FOR EX MVC)
         B     POFRQCHK            RETURN TO NORMAL FLOW
         SPACE 2
POFAIDF  DS    0H
         LA    R11,BADAID          POINT TO UNSUPPORTED AID
         B     POFGAID             THROW IN THE TOWEL
         EJECT
POFHELP  DS    0H
         LA    R11,PFK1            POINT TO PFK1
         LA    R10,PFK13           POINT TO PFK13
         LA    R9,12               12 * 2 PFKEYS
         SLR   R2,R2               CLEAR REG
POFHLOOP DS    0H
         MVC   POFOUT,BLNKLINE     CLEAR LINE
         MVC   POFOUT(7),=C'PFKXX ='
         MVC   POFOUT+30(7),=C'PFKXX ='
         LA    R8,25               GET PFK NUMBER FROM LOOP COUNTER
         SR    R8,R9
         CVD   R8,POFDBLWK
         UNPK  POFDBLWK(3),POFDBLWK+6(2)
         MVC   POFOUT+33(2),POFDBLWK+1
         OI    POFOUT+34,X'F0'
         SP    POFDBLWK+6(2),=P'12'
         UNPK  POFDBLWK(3),POFDBLWK+6(2)
         MVC   POFOUT+3(2),POFDBLWK+1
         OI    POFOUT+4,X'F0'
         IC    R2,1(R11)           GET LENGTH OF MSG
         EX    R2,HELPMVC1         MOVE TO BUFFER
         LA    R11,3(R2,R11)       POINT TO NEXT MESSAGE
         IC    R2,1(R10)           GET LENGTH OF MSG
         EX    R2,HELPMVC2         MOVE TO BUFFER
         LA    R10,3(R2,R10)       POINT TO NEXT MESSAGE
         LA    R0,39(0,R2)         GET REAL LENGTH
         LA    R1,POFOUT           POINT TO OUTPUT BUFFER
         ICM   R1,B'1000',=X'20'   SET TPUT PARMS
         TPUT  (1),(0),R           PUT OUT THE MESSAGE
         BCT   R9,POFHLOOP         LOOP UNTIL DONE
         B     POFRQCMD            RETURN
         SPACE 2
HELPMVC1 MVC   POFOUT+8(0),2(R11)  MOVE IN MESSAGE
HELPMVC2 MVC   POFOUT+38(0),2(R10) MOVE IN MESSAGE
         EJECT
ABEND    DS    0H
         LA    R1,1                SET DUMP OPTION
         SLL   R1,31
         ALR   R1,R15              SET ABEND CODE
         ABEND (1)
         EJECT
POFEOJ   DS    0H
         CLOSE (POFACB)            CLOSE THE ACB
         LTR   R15,R15             Q. CLOSE SUCCESSFUL
         BZ    POFCLSOK            ...YES, PROCEED
         MVC   POFOUT(29),=C'CLOSE FAILED FOR VTAM SPO ACB'
         TPUT  POFOUT,29
         SPACE 2
POFCLSF  DS    0H
         LA    R2,POFACB           POINT TO ACB
         USING IFGACB,R2
         CLI   ACBERFLG,X'4C'      Q. MORE MESSAGES OUSTANDING
         BNE   POFCLSF2            ...NO, PRESS ON
         MVC   POFOUT(27),=C'OUTSTANDING MESSAGES PURGED'
         TPUT  POFOUT,27
         B     POFEOJ              TRY CLOSE AGAIN
         SPACE 2
POFCLSF2 DS    0H
         MVC   POFDBLWK+1(1),ACBOFLGS   GET OPEN FLAGS
         UNPK  POFDBLWK(1),POFDBLWK+1(1)   PREPARE FOR CONVERSION
         MVC   POFDBLWK+3(1),ACBERFLG   GET ERROR FLAGS
         UNPK  POFDBLWK+2(1),POFDBLWK+3(1) PREPARE FOR CONVERSION
         NC    POFDBLWK(4),=X'0F0F0F0F'    PREPARE FOR TRANSLATE
         TR    POFDBLWK(4),POFTRTBL     TRANSLATE
         MVC   POFMSG1(4),POFDBLWK    PUT IN MESSAGE
         TPUT  POFMSG1,L'POFMSG1
         B     POFRTN              CLOSE FAILED SO GET OUT
         SPACE 2
         DROP  R2
         SPACE 2
POFCLSOK DS    0H
         MVC   WTOLTH,=AL2(34)     LENGTH OF MESSAGE
         MVC   WTOTXT(7),POFUSRID  PUT USERID IN MESSAGE
         MVC   WTOTXT+7(15),=C' LOGGED OFF OF '
         MVC   WTOTXT+22(8),POFACBAI+1    PUT ACB IN MESSAGE
         WTO   MF=(E,WTOLIST)      WRITE LOGOFF TO SYSLOG
         SPACE 2
POFRTN   DS    0H
         L     R13,4(R13)          RESTORE CALLERS RSA
         RETURN (14,12),RC=0       RESTORE REGISTERS AND RETURN
         SPACE 2
         DROP  R12
         EJECT
POFRCVEX DS    0H
         LR    R12,R15             GET NEW BASE
         USING POFRCVEX,R12
         LR    R11,R14             SAVE RETURN REG
         LR    R2,R1               SAVE RPL POINTER
         USING IFGRPL,R2           ADDRESS RPL
         LA    R13,POFRCVSA        POINT TO RSA
         CHECK RPL=POFRPLRC        CHECK RCVCMD RPL
         LTR   R15,R15             Q. SUCCESSFUL
         BZ    POFRCVA             ...YES, PROCEED
         BAL   R10,RCVEABND        ...NO, GIVE UP
         SPACE 3
POFRCVA  DS    0H
         CLC   =XL2'100D',RPLRTNCD   Q. ACB CLOSED
         BE    POFRCVR               ...YES, DONT DO ANY MORE
         CLC   =XL2'1470',RPLRTNCD   Q. RCVCMD AFTER ACB CLOSED     MSW
         BE    POFRCVR               ...YES, DONT DO ANY MORE       MSW
         TM    POFCMDI+1,X'C0'     Q. COMBINE DATA AND END LINE     JDM
         BO    POFRCVB             ...YES, GO DISPLAY               JDM
         TM    POFCMDI+1,X'80'     Q. END OF MULTI-LINE, NO DATA
         BO    POFRCVI             ...YES, NO OUTPUT, ISSUE RCVCMD
POFRCVB  DS    0H
         L     R0,RPLRLEN          GET LENGTH OF REPLY
         STH   R0,WTOLTH           STORE LENGTH FOR WTO
         SH    R0,=H'4'               LESS HEADER LENGTH
         LA    R1,POFIMSG          A(REPLY)
         TPUT  (1),(0),EDIT,WAIT,NOHOLD,BREAKIN,HIGHP               JDM
         B     POFRCVI             SKIP WTO OF REPLY                MSW
         SPACE 2
POFRCVN  DS    0H
         MVC   WTOTXT(L'POFIMSG),POFIMSG   MOVE RESPONSE TO WTO
         WTO   MF=(E,WTOLIST)      WRITE RESPONSE TO LOG
POFRCVI  DS    0H
         RCVCMD RPL=POFRPLRC       ISSUE ANOTHER RCVCMD
         LTR   R15,R15             Q. ACCEPTED
         BZ    POFRCVR             ...YES, RETURN
         BAL   R10,RCVEABND        ...NO, GIVE UP
POFRCVR  DS    0H
         LR    R14,R11             RESTORE RETURN REG
         BR    R14                 RETURN
         SPACE 3
RCVEABND DS    0H
         LA    R1,1                SET DUMP OPTION
         SLL   R1,31
         ALR   R1,R15              SET ABEND CODE
         ABEND (1)                 THIS ABEND WILL CAUSE A SVC DUMP
*                                     ENTITLED 'VTAM IRB ABEND'
         SPACE 2
         DROP  R2,R12
         SPACE 2
POFRCVSA DS    18F                 RSA FOR RCVCMD EXIT
         EJECT
POFLERAD DS    0H
POFSYNAD DS    0H
         LR    R12,R15             SET UP BASE
         USING POFLERAD,R12
         LR    R2,R1               SAVE RPL POINTER
         USING IFGRPL,R2
         LR    R11,R14             SAVE RETURN ADDRESS
         CLC   =XL2'100D',RPLRTNCD   Q. IS THIS PSEUDO ERROR (ACB CLSD)
         BE    POFNOERR            ...YES, NOT REALLY AN ERROR
         CLC   =XL2'146E',RPLRTNCD   Q. IS THIS PSEUDO ERROR
         BE    POFNOERR            ...YES, NOT REALLY AN ERROR
         CLC   =XL2'146D',RPLRTNCD   Q. IS THIS PSEUDO ERROR       JDMB
         BE    POFNOERR            ...YES, NOT REALLY AN ERROR     JDMB
         CLC   =XL2'1470',RPLRTNCD   Q. IS THIS PSEUDO ERROR        MSW
         BE    POFNOERR            ...YES, NOT REALLY AN ERROR      MSW
         CLC   =XL2'1471',RPLRTNCD   Q. IS THIS PSEUDO ERROR
         BE    POFNOERR            ...YES, NOT REALLY AN ERROR
         SPACE 2
         MVC   POFOUT(14),=C'UNKNOWN FAILED'
         TM    RPLREQ,RPLRVCMD     Q. RCVCMD FAILED
         BNO   POFREQ2             ...NO, TRY SENDCMD
         MVC   POFOUT(7),=C'RCVCMD '   SHOW RCVCMD
         B     POFREQST
POFREQ2  DS    0H
         TM    RPLREQ,RPLSDCMD     Q. SENDCMD FAILED
         BNO   POFREQST            ...NO, THATS IT
         MVC   POFOUT(7),=C'SENDCMD'   SHOW SENDCMD
POFREQST DS    0H
         TPUT  POFOUT,14
POFLEMSG DS    0H
         MVC   POFDBLWK+1(1),RPLRTNCD   GET RETURN CODE
         UNPK  POFDBLWK(1),POFDBLWK+1(1)   PREPARE FOR CONVERSION
         MVC   POFDBLWK+3(1),RPLFDB2    GET FEEDBACK FIELD
         UNPK  POFDBLWK+2(1),POFDBLWK+3(1) PREPARE FOR CONVERSION
         NC    POFDBLWK(4),=X'0F0F0F0F'    PREPARE FOR TRANSLATE
         TR    POFDBLWK(4),POFTRTBL     TRANSLATE
         MVC   POFMSG2(4),POFDBLWK    PUT IN MESSAGE
         TPUT  POFMSG2,L'POFMSG2
         SPACE 2
POFLERTN DS    0H
         LA    R15,BIT0            INDICATE SENDCMD/RCVCMD FAILURE
         LR    R14,R11             RELOAD RETURN REG
         BR    R14                 RETURN
         SPACE 2
POFNOERR DS    0H
         SLR   R15,R15             SET GOOD RETURN CODE
         LR    R14,R11             RELOAD RETURN REG
         BR    R14                 RETURN
         SPACE 2
LEABEND  DS    0H
         LA    R15,BIT0+BIT1       INDICATE SENDCMD/RCVCMD FAILURE
*                                     PLUS TPUT FAILURE
         LR    R14,R11             RELOAD RETURN REG
         BR    R14                 RETURN
         SPACE 2
         DROP  R2,R12
         EJECT
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 2
BIT0     EQU   X'80'
BIT1     EQU   X'40'
BIT2     EQU   X'20'
BIT3     EQU   X'10'
BIT4     EQU   X'08'
BIT5     EQU   X'04'
BIT6     EQU   X'02'
BIT7     EQU   X'01'
         SPACE 2
PSAAOLD  EQU   548                 A(CURRENT ASCB)
         EJECT
POFRSA   DS    18D                 REGISTER SAVE AREA
POFDBLWK DS    D                   DOUBLE WORD WORK AREA
         SPACE 2
CPPLPTR  DC    A(0)                A(CPPL)
         SPACE 2
CSPLIST  EQU   *
CSPLUPT  DC    A(0)                A(UPT)
CSPLECT  DC    A(0)                A(ECT)
CSPLECB  DC    A(POFCECB)          A(ECB)
CSPLFLG  DC    A(POFCFLG)          A(FLAGS)
CSPLOA   DC    A(POFCOA)           A(OUTPUT AREA)
CSPLCBUF DC    A(POFCBUF)          A(BUFFER)
         SPACE 2
POFCECB  DC    A(0)                ECB
POFCFLG  DC    X'80',AL3(0)        FLAGS
POFCOA   DC    XL8'00'             OUTPUT AREA
POFCBUF  EQU   *
         DC    H'84'               LENGTH
         DC    H'0'                OFFSET
         DC    CL80' '             BUFFER
         SPACE 2
         DS    0F                                                JDMA
SNOOZE   DC    A(100*1)            ONE SEC                       JDMA
IKJSCAN  DC    CL8'IKJSCAN'        NAME OF IKJSCAN FOR LINK
         SPACE 1
SIDTAB   DC    CL7'SOF001'         IDS OF GOOD GUYS               WASC
         DC    CL7'SOF002'                                        WASC
         DC    CL7'SOF003'                                        WASC
         DC    CL7'SOF004'                                        WASC
         DC    CL7'JDMARSH'                                       WASC
         DC    CL7'FEMILLE'                                       WASC
         DC    CL7'WJBECKE'        DUMMY ENTRIES                  WASC
         DC    CL7'DTHUPFE'        DUMMY ENTRIES                  WASC
         DC    CL7'MLSKINN'        DUMMY ENTRIES                  WASC
         DC    XL7'FF'             DUMMY ENTRIES                  WASC
         DC    XL7'FF'             DUMMY ENTRIES                  WASC
         DC    XL7'FF'             DUMMY ENTRIES                  WASC
SIDEND   EQU   (*-7)               THIS IS THE END OF SIDTAB      WASC
         SPACE 1                                                  WASC
VAUTHFLG DC    X'00'                                              WASC
POFTRTBL DC    X'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5F6'
         SPACE 2
POFOUT   DS    CL80                TPUT BUFFER
         SPACE 2
POFCMDI  EQU   *                   COMMAND INPUT BUFFER (FROM VTAM)
         DS    CL4                 COMMAND HEADER
POFIMSG  DS    CL126               MESSAGE
POFCMDIL EQU   *-POFCMDI
         SPACE 2
POFCMDO  EQU   *                   COMMAND OUTPUT BUFFER (TO VTAM)
         DC    X'00'               COMMAND HEADER
         DC    X'03'
         DC    X'0000'
POFIN    DS    CL80                TGET BUFFER
POFCMDOL EQU   *-POFCMDO
         SPACE 2
SAVECMDL DC    F'0'                LENGTH OF SAVED COMMAND
SAVECMD  DC    CL80' '             SAVED COMMAND
WORKCMD  DC    CL80' '             COMMAND WORK AREA
BLNKLINE DC    CL80' '             BLANK LINE FOR CLEARING OUT BUFFER
         SPACE 2
WTOLIST  WTO   ' ',MCSFLAG=HRDCPY,MF=L   WTO TO LOG CMDS & RESPONSES
         SPACE 2
WTOLTH   EQU   WTOLIST,2           LENGTH OF TEXT + 4
         ORG   WTOLIST+4           POINT TO MESSAGE
WTOTXT   DS    CL126               MESSAGE TEXT (MAX OF 124)
         SPACE 2
POFUSRID DS    CL7                 TSO USER ID
POFMSG1  DC    C'XXXX = ACBOFLGS/ACBERFLG'
POFMSG2  DC    C'XXXX = RTNCD/FDBK2'
GTSIZE0  DS    X                   NUMBER OF LINES/SCREEN
GTSIZE1  DS    X                   NUMBER OF CHARS/LINE
         EJECT
AIDTABLE DS    0F
         DC    X'7D',AL3(ENTER)    ENTER KEY/SELECTOR LIGHT-PEN ATTN
         DC    X'F1',AL3(PFK1)     PFK 1
         DC    X'F2',AL3(PFK2)     PFK 2
         DC    X'F3',AL3(PFK3)     PFK 3
         DC    X'F4',AL3(PFK4)     PFK 4
         DC    X'F5',AL3(PFK5)     PFK 5
         DC    X'F6',AL3(PFK6)     PFK 6
         DC    X'F7',AL3(PFK7)     PFK 7
         DC    X'F8',AL3(PFK8)     PFK 8
         DC    X'F9',AL3(PFK9)     PFK 9
         DC    X'7A',AL3(PFK10)    PFK 10
         DC    X'7B',AL3(PFK11)    PFK 11
         DC    X'7C',AL3(PFK12)    PFK 12
         DC    X'C1',AL3(PFK13)    PFK 13
         DC    X'C2',AL3(PFK14)    PFK 14
         DC    X'C3',AL3(PFK15)    PFK 15
         DC    X'C4',AL3(PFK16)    PFK 16
         DC    X'C5',AL3(PFK17)    PFK 17
         DC    X'C6',AL3(PFK18)    PFK 18
         DC    X'C7',AL3(PFK19)    PFK 19
         DC    X'C8',AL3(PFK20)    PFK 20
         DC    X'C9',AL3(PFK21)    PFK 21
         DC    X'4A',AL3(PFK22)    PFK 22
         DC    X'4B',AL3(PFK23)    PFK 23
         DC    X'4C',AL3(PFK24)    PFK 24
         DC    X'6E',AL3(PA2)      PA 2
         DC    X'6B',AL3(PA3)      PA 3
NUMAIDS  EQU   (*-AIDTABLE)/4      TOTAL NUMBER OF AIDS
BADAID   DC    X'00',AL3(NOSUPT)   NOT SUPPORTED
         EJECT
ENTER    DC    X'FF'               FLAGS
         DC    AL1(ENTERL-3)       LENGTH FOR EXECUTED MOVE
         DC    C' '                COMMAND
ENTERL   EQU   *-ENTER             LENGTH
PFK1     DC    X'00'
         DC    AL1(PFK1L-3)
         DC    C'HELP'
PFK1L    EQU   *-PFK1
PFK2     DC    X'00'
         DC    AL1(PFK2L-3)
         DC    C'D NET,BFRUSE'
PFK2L    EQU   *-PFK2
PFK3     DC    X'00'
         DC    AL1(PFK3L-3)
         DC    C'END'
PFK3L    EQU   *-PFK3
PFK4     DC    X'00'
         DC    AL1(PFK4L-3)
         DC    C'D NET,PENDING'
PFK4L    EQU   *-PFK4
PFK5     DC    X'00'
         DC    AL1(PFK5L-3)
         DC    C'D NET,APPLS'
PFK5L    EQU   *-PFK5
PFK6     DC    X'00'
         DC    AL1(PFK6L-3)
         DC    C'D NET,MAJNODES'
PFK6L    EQU   *-PFK6
PFK7     DC    X'00'
         DC    AL1(PFK7L-3)
         DC    C'D NET,LINES,I'
PFK7L    EQU   *-PFK7
PFK8     DC    X'00'
         DC    AL1(PFK8L-3)
         DC    C'D NET,CLSTRS,I'
PFK8L    EQU   *-PFK8
PFK9     DC    X'00'
         DC    AL1(PFK9L-3)
         DC    C'D NET,TERMS,I'
PFK9L    EQU   *-PFK9
PFK10    DC    X'01'
         DC    AL1(PFK10L-3)
         DC    C'D NET,ID='
PFK10L   EQU   *-PFK10
PFK11    DC    X'01'
         DC    AL1(PFK11L-3)
         DC    C'V NET,ACT,ID='
PFK11L   EQU   *-PFK11
PFK12    DC    X'01'
         DC    AL1(PFK12L-3)
         DC    C'V NET,INACT,ID='
PFK12L   EQU   *-PFK12
PFK13    DC    X'00'
         DC    AL1(PFK13L-3)
         DC    C'HELP'
PFK13L   EQU   *-PFK13
PFK14    DC    X'00'
         DC    AL1(PFK14L-3)
         DC    C'D NET,BFRUSE'
PFK14L   EQU   *-PFK14
PFK15    DC    X'00'
         DC    AL1(PFK15L-3)
         DC    C'END'
PFK15L   EQU   *-PFK15
PFK16    DC    X'00'
         DC    AL1(PFK16L-3)
         DC    C'D NET,PENDING'
PFK16L   EQU   *-PFK16
PFK17    DC    X'00'
         DC    AL1(PFK17L-3)
         DC    C'D NET,APPLS'
PFK17L   EQU   *-PFK17
PFK18    DC    X'00'
         DC    AL1(PFK18L-3)
         DC    C'D NET,MAJNODES'
PFK18L   EQU   *-PFK18
PFK19    DC    X'00'
         DC    AL1(PFK19L-3)
         DC    C'D NET,LINES,I'
PFK19L   EQU   *-PFK19
PFK20    DC    X'00'
         DC    AL1(PFK20L-3)
         DC    C'D NET,CLSTRS,I'
PFK20L   EQU   *-PFK20
PFK21    DC    X'00'
         DC    AL1(PFK21L-3)
         DC    C'D NET,TERMS,I'
PFK21L   EQU   *-PFK21
PFK22    DC    X'01'
         DC    AL1(PFK22L-3)
         DC    C'D NET,ID='
PFK22L   EQU   *-PFK22
PFK23    DC    X'01'
         DC    AL1(PFK23L-3)
         DC    C'V NET,ACT,ID='
PFK23L   EQU   *-PFK23
PFK24    DC    X'01'
         DC    AL1(PFK24L-3)
         DC    C'V NET,INACT,ID='
PFK24L   EQU   *-PFK24
PA2      DC    X'00'
         DC    AL1(PA2L-3)
         DC    C'PA 2 KEY'
PA2L     EQU   *-PA2
PA3      DC    X'00'
         DC    AL1(PA3L-3)
         DC    C'PA 3 KEY'
PA3L     EQU   *-PA3
NOSUPT   DC    X'00'
         DC    AL1(NOSUPTL-3)
         DC    C'THIS AID NOT SUPPORTED.'
NOSUPTL  EQU   *-NOSUPT
         EJECT
POFACB   ACB   AM=VTAM,                                                *
               APPLID=POFACBAI,                                        *
               PASSWD=POFACBPW,                                        *
               EXLST=POFACBEX,                                         *
               MACRF=NLOGON
         SPACE 2
POFACB#  DC    PL2'1'              ACB COUNTER FOR MULTIPLE POF'S
POFACBAI DC    X'08'
         DC    CL8'POF001'         ACB NAME
POFACBPW DC    X'08'
         DC    CL8'POFSPOPW'       ACB PASSWORD
         EJECT
POFACBEX EXLST AM=VTAM,                                                *
               LERAD=POFLERAD,                                         *
               SYNAD=POFSYNAD
         EJECT
POFRPLSC RPL   AM=VTAM,                                                *
               ACB=POFACB,                                             *
               AREA=POFCMDO,                                           *
               RECLEN=POFCMDOL,                                        *
               OPTCD=(SYN)
         EJECT
POFRPLRC RPL   AM=VTAM,                                                *
               ACB=POFACB,                                             *
               AREA=POFCMDI,                                           *
               AREALEN=POFCMDIL,                                       *
               EXIT=POFRCVEX,                                          *
               OPTCD=(ASY,Q,TRUNC)
         EJECT
         LTORG
         EJECT
         ISTDPOHD
         SPACE 5
         PRINT NOGEN
         SPACE 5
         IFGACB AM=VTAM
         SPACE 5
         IFGRPL AM=VTAM
         SPACE 5
         IHAASCB
         SPACE 5
         IKJPSCB
         SPACE 5
         IKJCPPL
         SPACE 5
         END   POF
