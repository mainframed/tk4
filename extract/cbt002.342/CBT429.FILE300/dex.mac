DEX      TITLE '   D E X   -   H E X   C A L C U L A T O R '
***********************************************************************
*                                                                     *
*         DEX TSO COMMAND - HEX CALCULATOR                            *
*                                                                     *
***********************************************************************
         SPACE
*         OBTAINED AT AFDSC/PENTAGON FROM SHARE MODS TAPE.
*         ATTRIBUTES: NOT RE-ENTRANT.
*         CHANGES MADE AT AFDSC/PENTAGON, 13MAY81.
*          USER MACROS REMOVED AND REPLACED WITH EQUIVALENT CODE.
*          INPUT TRANSLATED TO UPPER CASE.
*          DESCRIPTION PARAGRAPH ADDED.
*         DESCRIPTION.
*          SEE HELP FOR DETAILED DESCRIPTION.
*          THIS COMMAND ACCEPTS EQUATIONS AND SUBCOMMANDS.
*
*          /HEX SUBCOMMAND PUTS THE CALCULATOR IN A MODE WHERE
*          ALL VALUES ARE ASSUMED TO BE ENTERED IN HEX, EXCEPT
*          THOSE FOLLOWED BY A PERIOD, WHICH ARE DECIMAL.
*
*          /DEC SUBCOMMAND PUTS THE CALCULATOR IN A MODE WHERE
*          ALL VALUES ARE ASSUMED TO BE ENTERED IN DECIMAL, EXCEPT
*          THOSE FOLLOWED BY AN 'H', WHICH ARE HEX.
*
*          CALCULATOR BEGINS IN DECIMAL MODE.
*
*          ENTER A LEADING ZERO ON HEX VALUES SO THEY WONT BE
*          INTERPRETED AS A SYMBOLIC NAME.
*
*          /DUMP SUBCOMMAND DISPLAYS ALL SYMBOLS AND THEIR VALUES.
*          /SORT SUBCOMMAND DISPLAYS ALL SYMBOLS AND THEIR VALUES.
*
*          END SUBCOMMAND ENDS THE CALCULATOR.
*
*          SAMPLE INPUT -
*           /HEX
*           A=10;B=10
*           C=A+B
*           END
         SPACE
TSODSECT DSECT
TSOSAVE  DS    18F
         DS    0D
TSOLENG  EQU   *-TSODSECT
         SPACE
DEX      CSECT
         USING *,R11,R12
         B     @PROLOG-*(,R15)
         DC    AL1(11),CL11'DEX'
         DC    CL16' &SYSDATE &SYSTIME '
TSOLEN   DC    0F'0',AL1(0),AL3(TSOLENG)
@PROLOG  STM   14,12,12(R13)
         LR    R11,R15             BASE REGISTER
         LA    R15,1
         LA    R12,4095(R15,R11)
         LR    R2,R1               SAVE CPPL ADDRESS
         SPACE
         L     R0,TSOLEN
         GETMAIN R,LV=(0)
         SPACE
         ST    R13,4(,R1)
         ST    R1,8(,R13)
         LR    R13,R1
         USING TSODSECT,R13
         SPACE
         B     START
         EJECT
N256     EQU   256
         SPACE 2
*        SVCX0 IS CALLED BY:
*        BAL   14,SVCX0
*        LA    1,OUTAREA
*        LA    0,OUTSIZE
*        LA    1,INAREA
*        LA    0,INSIZE
*
*        CONTROL IS RETURNED TO THE INSTRUCTION FOLLOWING THE 4-TH LA.
*        THE NUMBER OF CHARACTERS READ IS IN GPR 1.
*
         SPACE 1
SVCX0    ST    R14,SR14                 SAVE REG
         TPUT  TITLE,L'TITLE            PUT OUT MESSAGE
         L     R14,SR14                 RESTORE
         EX    0,0(14)                  GET STUFF
         EX    0,4(14)
         LR    R14,R1                   ADDRESS
         LR    R15,R0                   LENGTH
SVCX00   SH    R15,=H'40'               GET LENGTH
         BNP   SVCX01                   NO - LAST TIME
         STM   R14,R15,QQSAVE           SAVE THEM
         TPUT  (R14),40                 PUT IT OUT
         LM    R14,R15,QQSAVE           GET THEM BACK
         LA    R14,40(,R14)             POINT AT NEXT
         B     SVCX00                   TRY AGAIN
         SPACE 1
SVCX01   AH    R15,=H'40'               GET LENGTH BACK
         LR    R0,R15                   GET LEN
         TPUT  (R14),(R0)               PUT IT OUT
SVCX0G   L     R14,SR14                 RESTORE AGAIN
         EX    0,12(14)
         TGET  READINTO,(0)             GET INPUT
         LTR   R15,R15                  TEST RETURN CODE
         BZ    SVCX0R                   OK
         TCLEARQ INPUT                  CLEAR OUT INPUT
         B     SVCX0G                   TRY AGAIN
SVCX0R   TR    READINTO(256),CAPS       UPPER CASE
         L     R14,SR14                 LOAD SAVED REG
         LA    R15,X'F0'                FOR EXECUTE
         EX    R15,08(R14)              GET ADDRESS IN R15
         CH    R1,=H'3'                 IS IT AT LEAST 3 LONG?
         BL    TSOSET                   NO
         CLC   =CL3'END',READINTO       IS IT END?
         BE    TSOLEAVE                 YES
TSOSET   LTR   R1,R1                    TEST FOR A LENGTH
         BZ    16(,14)                  FORGET IT
         BCTR  R1,0                     SUBTRACT ONE
         EX    R1,TSOMOVE               DO IT
         LA    R1,1(,R1)                INCREMENT AGAIN
*        AR    R15,R1                   ADD LENGTH
*        MVI   0(R15),X'00'             SET STOPPER
         B     16(,14)                  RETURN TO CALLER
         SPACE 1
TSOMOVE  MVC   0(0,R15),READINTO        <<EXECUTED>>
TSOLEAVE EQU   *                        LEAVE
         LR    R1,R13
         L     R13,4(,R13)
         L     R0,TSOLEN
         FREEMAIN R,LV=(0),A=(1)
         LM    14,12,12(R13)
         SR    R15,R15
         BR    R14
         SPACE
         LTORG
         EJECT
TRTMAKE  XC    0(256,2),0(2)            ZERO TRTBL
         SR    3,3                      ZERO REGS
         SR    4,4
TRTM1    IC    3,0(1)                   GET CHAR
         IC    4,1(1)                   GET WHAT WILL BE
         STC   4,0(2,3)                 STORE IT
         CLI   0(1),C' '                SEE IF BLANK (FOR LAST)
         BE    0(14)                    IF SO, RETURN
         LA    1,2(1)                   IF NOT,
         B     TRTM1                      GET ANOTHER
         SPACE 3
START    XR    1,1                      SET MY OWN MASK
         SPM   1
         LA    1,TRTLIST                POINT R1 TO LIST
         LA    2,TRTBL                  POINT TO PROPOSED TABLE
         BAL   14,TRTMAKE               MAKE THE TABLE
         MVI   TSTRING,X'00'            PUT FINISHER ON
TLOOP    BAL   14,SVCX0                 READ A LINE
         LA    1,M2                     WITH A MESSAGE
         LA    0,L'M2
         LA    1,TSTRING                INTO TSTRING
         LA    0,N256                   UP TO 256 CHARS
TLOOP0   XC    PRES(08),PRES            INITIALIZE
         MVC   TNAME(8),SYMTBL
         XC    TNAME+8(4),TNAME+8
         MVI   PROP,C'+'
         MVI   EQYET,X'00'
         LA    3,TSTRING
         ST    3,TLSTART                SAVE START
         LTR   R1,R1                    TEST LENGTH
         BNP   TLOOP1                   DON'T CHANGE OLD INPUT
READOK   LA    5,0(3,1)
         BCTR  5,0
         CLI   0(5),C';'                SEE IF LAST IS ;
         BE    NOSEMC                   IF SO, DO NOT INSERT
         MVI   1(5),C';'                PUT A ; ON THE END
         LA    5,1(5)                   POINT TO NEXT
NOSEMC   MVI   1(5),X'00'               AND A 00 AFTER THAT
TLOOP1   CLI   0(3),C' '                LOOK FOR NON-BLANK
         BNE   TLOOP1A
         LA    3,1(3)
         B     TLOOP1
TLOOP1A  CLI   EQYET,X'01'              SEE IF DONE SOMETHING YET
         BE    TLOOP1B                  IF SO, NO CHECK FOR COMMANDS
         CLC   0(5,3),CDUMP             SEE IF ASKING FOR A DUMP
         BE    DUMP                     IF SO, GEEV EET 2 HEEM
         CLC   0(4,3),CDEC              SEE IF MODE TO BE DEC
         BE    SETMODED                 IF SO, SET THE MODE
         CLC   0(4,3),CHEX              SAME FOR HEX MODE
         BE    SETMODEH
         CLC   0(7,3),CDEL              SEE IF TRYING TO DELETE
         BE    DELETE
         CLC   0(5,3),CDISP             SEE IF SET DISPLAY MODE
         BE    YDISP
         CLC   0(7,3),CNODISP           SEE IF SET NO DISPLAY MODE
         BE    NDISP
         CLC   0(5,3),CSORT             SEE IF WANT A SORT
         BE    SORT
TLOOP1B  CLI   0(3),X'00'               SEE IF AT END
         BE    TLOOP                    IF DO, GET MORE
TLOOP2   SR    2,2                      CLEAR REG 2
         TRT   0(20,3),TRTBL            EXECUTE THE TRT
*        (1) -> BYTE, (2)=RESULT
         BZ    TNONE                    SEE IF FOUND A STOPPER
         CH    2,H1                     SEE IF NEW LINE
         BE    TNONE                    IF SO, COMPLAIN
         LR    4,1                      PUT WHERE BYTE IS IN R4
         SR    4,3                      (4) = # OF BYTES - 1
         MVI   TRES,C' '                BLANK RESULT
         MVC   TRES+1(49),TRES
TLOOP3   CLI   0(1),C' '                LOOK AGAIN FOR NON-BLANK
         BNE   TLOOP4
         LA    1,1(1)
         B     TLOOP3
TLOOP4   MVC   TRES(1),0(1)             MOVE STOPPING CHAR
         LTR   4,4                      SEE IF NULL CHAR STRING
         BNE   TLOOP5
         CLI   TRES,C'*'                SEE IF PREV RESULT
         BE    TLPREV                   IF SO, SAY SO
         CLI   TRES,C'-'                SEE IF INITIAL -
         BE    TLFZ                     FORCE A ZERO
         CLI   TRES,C'+'                LEADING +?
         BE    TLFZ                     YES, FORCE A ZERO
         CLI   TRES,C';'                ONLY A SEMICOLON?
         BNE   TLMOP                    NO... MISSING OPERAND
         B     TLFZ                     ELSE FORCE A 0
TLPREV   MVI   TRES+4,C'*'              SAY THIS IS A SYMBOL
         LA    1,1(1)                   POINT 1 TO NEXT CHAR
         LA    4,1                      GIVE 4 A NICE VALUE
         B     TLOOP3                   THEN CONTINUE
TLFZ     MVI   TRES+4,C'0'              IF SO, FORCE A 0
         B     TLOOP6
TNONE    BAL   14,SVCX0                 NO STOPPERS FOUND - COMPLAIN
         LA    1,TNMESS
         LA    0,39
         LA    1,TSTRING
         LA    0,N256
         LTR   1,1                      SEE IF ANYTHING ENTERED
         BZ    TNONE                    IF NOT, COMPLAIN AGAIN
         B     TLOOP0
TLOOP5   BCTR  4,0                      CHOP R4 DOWN
         EX    4,TMVC                   MOVE WITH EXECUTE
TLOOP6   LA    3,1(1)                   POINT R3 PAST CHAR
         CLI   TRES,C'='                SEE IF STORE RESULT
         BE    TLEQ
         MVI   EQYET,X'01'              DO NOT ALLOW ANY MORE =
         TRT   0(1,1),TRTBL             SEE IF OPERAND STOPPED THE SCAN
         BZ    TLNOP                    IF NOT, ERROR
         LA    1,TRES+4                 IF NOT, FIND WHAT THING IS
         LA    2,SYMTBL                 START AT BEGINNING
         BAL   14,DEFSYM
         LTR   1,1                      SEE IF DEFINED
         BP    TLOK
TLUNDEF  MVC   TLUNDM(8),TRES+4         COMPLAIN ABOUT UNDEFINED
         BAL   14,SVCX0
         LA    1,TLUNDM
         LA    0,29
         LA    1,TSTRING
         LA    0,N256
         LTR   1,1
         BNZ   TLOOP0
         LA    2,BLZR                   FAKE A NUMBER
TLOK     CLI   PROP,C'+'                SEE IF +
         BE    TLPL
         CLI   PROP,C'-'
         BE    TLMIN
         CLI   PROP,C'*'
         BE    TLMULT
         CLI   PROP,C'/'
         BNE   TLNOP
         L     9,8(2)                   GET DIVISOR
         LTR   9,9                      SEE IF ZERO
         BE    ZRDV                     IF SO, COMPLAIN
         CH    9,HM1                    SEE IF DIVIDING BY -1
         BE    DVM1                     IF SO, DO A SUBTRACT
         L     8,PRES+4                 GET PREV RESULT
         SRDA  8,32                     PROPAGATE SIGN
         D     8,8(2)                   DIVIDE BY THIS
         ST    9,PRES+4                 STORE RESULT
         B     NXTSYM                   GO TO NEXT
DVM1     SR    9,9                      DIVIDE BY -1
         S     9,PRES+4                 INSTEAD, SUBTRACT
         ST    9,PRES+4
         B     NXTSYM                   THEN CONTINUE
ZRDV     MVC   ZRDVM(8),TRES+4          ZERO DIVIDE COMPLAINT
         BAL   14,SVCX0
         LA    1,ZRDVM
         LA    0,31
         LA    1,TSTRING
         LA    0,N256
         LTR   1,1
         BNZ   TLOOP0
         B     NXTSYM
TLNOP    BAL   14,SVCX0                 MISSING OPERATOR COMPLAINT
         LA    1,TLNOPM
         LA    0,16
         LA    1,TSTRING
         LA    0,N256
         MVI   EQYET,X'01'              SET = OCCURED BIT
         LTR   1,1
         BNZ   TLOOP0
         MVI   PROP,C'+'
         BCTR  3,0
         B     TLOOP1
TLMOP    LA    3,1(1)                   MISSING OPERAND COMPLAINT
         BAL   14,SVCX0
         LA    1,TLMOPM
         LA    0,15
         LA    1,TSTRING
         LA    0,N256
         MVI   EQYET,X'01'              SET = OCCURED BIT
         LTR   1,1
         BNZ   TLOOP0
         B     NXTSYM
TLMULT   L     9,PRES+4                 DO MULTIPLY
         M     8,8(2)                   DO IT
         ST    9,PRES+4
         B     NXTSYM
TLPL     MVC   PRES+4(4),8(2)           IF PREV WAS PLUS,SET
         B     NXTSYM
TLMIN    SR    8,8                      IF -, STORE -
         S     8,8(2)
         ST    8,PRES+4
         B     NXTSYM
TLEQ     CLI   EQYET,X'01'              FOUND AN =; SEE IF PREVIOUS
         BE    DUPEQ
         MVI   EQYET,X'01'              SET BIT
         MVC   TNAME(8),TRES+4
         ST    4,TNAME+8
         B     TLOOP1
DUPEQ    BAL   14,SVCX0                 COMPLAIN OF MORE THAN 1 =
         LA    1,DUPEQM
         LA    0,23
         LA    1,TSTRING
         LA    0,N256
         LTR   1,1                      SEE IF ANYTHING ENTERED
         BNZ   TLOOP0                   IF SO, RESTART
         B     TLOOP1                   ELSE CONTINUE
DUPEQM   DC    CL23'ILLEGAL OCCURANCE OF ='
NXTSYM   CLI   TRES,C';'                SEE IF END
         BE    NXTSYM1                  IF SO, DO NOT REPLACE OP
         MVC   PROP(1),TRES             NOW SEE IF ADD TO BIG TERM
         CLI   TRES,C'*'                IS NEXT OP * OR /
         BE    TLOOP1                   IF SO, JUST CONTINUE
         CLI   TRES,C'/'
         BE    TLOOP1
NXTSYM1  L     8,PRES                   IF NOT, ADD TO BIG TOTAL
         A     8,PRES+4
         ST    8,PRES
         CLI   TRES,C';'                SEE IF END
         BNE   TLOOP1                   IF NOT, DO MORE
         L     1,PRES                   GET RESULT
         CLI   EQYET,X'01'              SEE IF STORING
         BNE   NOEQ                     IF NOT, SKIP LOOKUP
         LA    1,TNAME                  IF SO, FIND WHERE RESULT GOES
         L     4,TNAME+8
         LA    2,SYMTBL                 START SEARCH AT BEGINNING
         BAL   14,DEFSYM                FIND WHERE IT GOES
         L     1,PRES                   GET TOTAL
         ST    1,8(2)                   STORE IT
NOEQ     ST    1,SYMTBL+8               STORE AT SYMBOL *
         BAL   14,CVD                   CONVERT TO DECIMAL
         MVC   TRES(21),0(1)
         L     1,TLSTART
         LR    2,3
         SR    2,1
         CH    2,H75                    SEE IF MOVING TOO MUCH
         BL    NXTSYM2                  IF NOT, OK
         LH    2,H75                    MOVE MAX
         BCTR  2,0
NXTSYM2  EX    2,TMVC1                  MOVE THE DESIRED AMOUNT
         MVI   TRES+21,C' '
         MVC   TRES+22(18),TRES+21      CLEAR OUT REST OF LINE
         CLI   0(3),X'00'               SEE IF AT END
         BE    YESDISP                  IF SO, ALWAYS DISPLAY
         CLI   DISP,C'Y'                SEE IF DISPLAY
         BNE   TLNFNB                   IF NOT, SUPPRESS DISPLAY
YESDISP  BAL   14,SVCX0                 PUT IT OUT
         LA    1,TRES
         LA    0,40(2)
         LA    1,TSTRING
         LA    0,N256
         LTR   1,1
         BNZ   TLOOP0                   IF NOT, REPROCESS
TLNFNB   CLI   0(3),C' '                LOOK FOR NON-BLANK
         BNE   TLNFNB1
         LA    3,1(3)
         B     TLNFNB
TLNFNB1  CLI   0(3),C';'                CHECK FOR NULL STATEMENT
         BNE   TLNFNB2
         LA    3,1(3)
         B     TLNFNB
TLNFNB2  EQU   *
         MVI   PROP,C'+'
         MVI   EQYET,X'00'              NUTTIN YET
         XC    PRES(08),PRES
         MVC   TNAME(8),SYMTBL
         XC    TNAME+8(4),TNAME+8
         ST    3,TLSTART
         B     TLOOP1
TMVC     MVC   TRES+4(1),0(3)
TMVC1    MVC    TRES+40(1),0(1)
*
*        LA    1,SYMBOL
*        LA    2,START_OF_SEARCH
*        BAL   14,DEFSYM
*
*        (2) -> LOC OF SYMBOL
*        (1) = 0 IF SYMBOL NEW, 1 IF OLD, -1 IF COULD NOT FIT,
*              2 IF CONSTANT
*
DEFSYM   MVC   DEFDRM(10),0(1)          MOVE TO ERROR MESSAGE IN CASE
         CLI   0(1),C'0'                SEE IF NUMBER
         BL    DEFSYM1
         CLI   0(1),C'9'
         BH    DEFSYM1
         LA    2,0(1,4)
         CLI   0(2),C'.'                SEE IF ENDS IN A .
         BE    DEFDY                    IF SO, ALWAYS DECIMAL
         CLI   0(2),C'H'                SEE IF ENDS IN H
         BE    DEFH                     IF SO, ALWAYS HEX
         CLI   MODE,C'D'                SEE WHAT THE MODE IS
         BE    DEFD0                    DECIMAL
         B     DEFMH                    IN HEX MODE - MUST BE HEX
DEFDY    BCTR  2,0                      CUT 2 DOWN FOR CHECK
         BCTR  4,0                      CUT 4 DOWN FOR LENGTH
         B     DEFD0                    GO TO CONVERT
DEFMH    LA    4,1(4)                   ADD 1 TO LENGTH COUNT
         B     DEFH                     THEN GO TO CONVERT HEX
DEFD0    CH    4,N9                     SEE IF TOO LONG
         BH    DEFDERR
DEFD01   CLI   0(2),C'0'                CHECK FOR VALID #
         BL    DEFDERR
         BCTR  2,0
         CLI   0(2),C' '
         BNE   DEFD01
         LA    2,0(1,4)
         EX    4,DEFPACK                PACK  THE NUMBER
         CVB   2,DEFPK                  CONVERT TO BINARY
DEFD1    ST    2,DEFPK+8                MAKE CONSTANT LOOKLIKE SYMBOL
         LA    2,DEFPK
         LA    1,2
         B     DEFRET
DEFDERR  EQU   *                        BAD DATA
         LR     0,14                    SAVE R14
         BAL   14,SVCX0
         LA    1,DEFDRM
         LA    0,29
         LA    1,TSTRING
         LA    0,N256
         LTR   1,1
         BNZ   TLOOP0
         LR    14,0
         SR    2,2
         B     DEFD1
DEFH     SR    0,0
         LR    2,1
DEFH1    BCTR  4,0
         IC    1,0(2)                   GET A CHARACTER
         CLI   0(2),C'0'                SEE IF 0-N
         BNL   DEFH2                    IF SO, KEEP RIGHT 4 BITS
         CLI   0(2),C'A'                MAKE SURE A-F
         BL    DEFDERR                  IF NOT, COMPLAIN
         CLI   0(2),C'F'
         BH    DEFDERR
         LA    1,9(1)                   GET RIGHT 4 BITS + 9
DEFH2    SLL   1,28
         LA    2,1(2)
         SLDL  0,4
         LTR   4,4
         BP    DEFH1
         LR    2,0
         B     DEFD1
DEFSYM1  SR    0,0                      ZERO REG 0 FOR TEST
DEFSYM2  CLI   0(2),X'FF'               SEE IF AT END
         BE    DEFEND                   IF SO, SEE IF FOUND ANYTHING
         LTR   0,0                      SEEIF FOUND A PREVIOUS PLACE
         BNZ   DEFSYM3                  IF SO, SKIP
         CLI   0(2),X'00'               SEE IF SPACE OPEN
         BNE   DEFSYM3
         LR    0,2                      IF SO, SAVE R2
DEFSYM3  CLC   0(8,2),0(1)              SEE IF MATCH
         BE    DEFOLD
         LA    2,12(2)                  IF NOT,
         B     DEFSYM2                    TRY AGAIN
DEFEND   LR    2,0                      AT END - SEE IF FOUND SPACE
         LTR   2,2
         BNZ   DEFNEW                   IF SO, OK
DEFATAL  MVC   DEFOVM1(8),0(1)          COULD NOT FIT
         LR     0,14
         BAL   14,SVCX0                 COMPLAIN
         LA    1,DEFOVM
         LA    0,31
         LA    1,TSTRING
         LA    0,N256
         LTR   1,1
         BNZ   TLOOP0
         LR    14,0
         LA    2,SYMTBL
         B     DEFOLD
DEFNEW   MVC   0(8,2),0(1)              NEW - MOVE SYMBOL IN
         XC    8(4,2),8(2)              GIVE IT A VALUE OF ZERO
         SR    1,1
         B     DEFRET                   RETURN
DEFOLD   LA    1,1                      OLD SYMBOL
DEFRET   BR    14
DEFPACK  PACK  DEFPK(08),0(1,1)
CVD      CVD   1,CVDN                   CONVERT TO DECIMAL
         LR    5,1
         LA    2,CVHNR
         MVI   CVHNR,C'0'
         MVC   CVHNR+1(7),CVHNR
CVH1     SR    4,4
         LA    6,CVHTBL
         LTR   5,5
         BZ    CVH2
         SLDA  4,4
         LA    6,0(6,4)
         MVC   0(1,2),0(6)
         LA    2,1(2)
         B     CVH1
CVH2     EQU   *
         LR    2,1                      SAVE R1
         LA    1,CVDNR+11               POINT 1 FOR EDMK
         MVC   CVDNR(12),CVDMSK         MOVE EDMK MASK
         EDMK  CVDNR(12),CVDN+2         DO THE EDIT
         LTR   2,2                      SEE IF INPUT NEG
         BM    CVDM
CVD1     LA    1,CVDNR                  POINT 1 TO CVD
         BR    14
CVDM     BCTR  1,0
         MVI   0(1),C'-'
         B     CVD1
DUMP     LA    2,SYMTBL+12              2 -> SYMBOL TABLE
DUMP1    LA    3,SCREEN                 3 -> DISPLAY SCREEN
         LA    4,10 ***                 4 COUNTS
DUMP2    CLI   0(2),X'00'               SEE IF EMPYT PLACE
         BNE   DUMP2A                   IF SO, DO NOT DISPLAY
         LA    2,12(2)                  POINT 2 TO NEXT
         B     DUMP2                    TRY AGAIN
DUMP2A   CLI   0(2),X'FF'
         BE    DUMP3
         MVI   0(3),C' '                CLEAR OUT A LINE
         MVC   1(39,3),0(3)
         L     1,8(2)                   GET THE VALUE
         STM   2,4,DUMPSV
         BAL   14,CVD                   CONVERT TO A STRING
         LM    2,4,DUMPSV
         MVC   0(8,3),0(2)              MOVE IN NAME
         MVI   9(3),C'='                AN =
         MVC   11(21,3),0(1)            AND THE VALUE
         LA    3,40(3)                  SET FOR NEXT
         LA    2,12(2)
         BCT   4,DUMP2                   6 TIMES PER SCREEN
DUMP3    LA    4,SCREEN                 FIND HOW MUCH TO DISPLAY
         SR    3,4
         BZ    TLOOP                    IF NONE, QUIT
         BAL   14,SVCX0                 PUT IT OUT
         LA    1,SCREEN
         LA    0,0(3)
         LA    1,TSTRING
         LA    0,N256
         LTR   1,1                      SEE IF ANYTHING READ
         BZ    DUMP1                    IF NOT, CONTINUE DUMP
         B     TLOOP0                   IF SO, GO TO PROCESS IT
SETMODED MVI   MODE,C'D'                SET THE MODE TO DECIMAL
         B     TLOOP                    THEN RESTART
SETMODEH MVI   MODE,C'H'                SET THE MODE TO HEX
         B     TLOOP                    THEN RESTART
*
* DELETE - REMOVE SYMBOLS FROM TABLE
*
DELETE   LA    1,7(3)                   POINT 1 PAST KEYWORD
DEL1     CLI   0(1),C' '                SCAN FOR NON-BLANK
         BNE   DEL2
         LA    1,1(1)
         B     DEL1
DEL2     CLI   0(1),C';'                SEE IF AT END
         BE    TLOOP                    IF SO, QUIT
         LA    3,1(1)                   SET3 PAST NON-BLANK
DEL3     CLI   0(3),X'15'               CHECK FOR END LINE
         BE    TNONE                    IF SO, KILL
         CLI   0(3),C' '                SCAN FOR BLANK OR ;
         BE    DEL4
         CLI   0(3),C';'
         BE    DEL4
         LA    3,1(3)                   POINT TO NEXT
         B     DEL3                     TRY AGAIN
DEL4     LR    4,3
         SR    4,1                      PUT LENGTH IN 4
         BCTR  4,0                      CHANGE TO LENGTH-1
         CH    4,H8                     SEE IF REG4 TOO BIG
         BL    DEL4A
         LA    4,7                      IF SO, SET TO 7
DEL4A    MVI   DELERM,C' '              BLANK OUT MESSAGE
         MVC   DELERM+1(7),DELERM
         EX    4,DELMVC                 MOVE TO ERROR MESSAGE IN CASE
         LA    1,DELERM                 POINT 1 NICE
         LA    2,SYMTBL+12              START PAST PREV RESULT
         BAL   14,DEFSYM                FIND WHERE IT IS
         CH    1,H1                     SEE IF OLD
         BNE   DELERR                   IF NOT, ERROR
         MVC   DELMSG(8),DELERM         SAY  DELETED
         BAL   14,SVCX0
         LA    1,DELMSG
         LA    0,16
         LA    1,TSTRING
         LA    0,N256
DEL5     MVI   0(2),X'00'               DELETE SYMBOL
         LTR   1,1                      SEE IF READ IN STUFF
         BNZ   TLOOP0
         LR    1,3                      RESTORE 1
         B     DEL1                     CONTINUE
DELERR   LR    0,1                      SAVE 1 IN 0
         BAL   14,SVCX0
         LA    1,DELERM
         LA    0,40
         LA    1,TSTRING
         LA    0,N256
         LTR   0,0                      SEE IF NEW AND JUST DEFINED
         BZ    DEL5                     IF SO, GO TO DELETE
         LTR   1,1                      SEE IF ANYTHING READ
         BNZ   TLOOP0
         LR    1,3                      CONTINUE
         B     DEL1
DELMVC   MVC   DELERM(0),0(1)           <<< EXECUTED >>>
YDISP    MVI   DISP,C'Y'                DISPLAY ALL ANSWERS
         B     TLOOP
NDISP    MVI   DISP,C'N'                DISPLAY ONLY LAST ANSWERS
         B     TLOOP
*
* SORT - SORT THE SYMBOL TABLE
*
SORT     LA    1,SYMTBL+12              1 -> MAIN FIELD
SORT1    CLI   0(1),X'00'               SEE IF MAIN FIELD FREE
         BE    SORT4                    IF SO, IGNORE IT
         CLI   0(1),X'FF'               SEE IF AT END
         BE    DUMP                     IF SO, TERMINATE SORT
         LA    2,12(1)                  2 -> FIELD TO BE COMPARED
SORT2    CLI   0(2),X'00'               SEE IF SECONDARY FIELD FREE
         BE    SORT3                    IF SO, IGNORE IT
         CLI   0(2),X'FF'               SEE IF AT END
         BE    SORT4                    IF SO, STOP THIS SCAN
         CLC   0(8,1),0(2)              WANT 1 <= 2
         BNH   SORT3                    IF OK, SKIP EXCHANGE
SORT2A   MVC   SORTSAVE(12),0(1)        EXCHANGE
         MVC   0(12,1),0(2)
         MVC   0(12,2),SORTSAVE
SORT3    LA    2,12(2)                  POINT 2 TO NEXT ENTRY
         B     SORT2                    CONTINUE SCAN
SORT4    LA    1,12(1)                  IF SO, POINT 1 TO NEXT
         B     SORT1                    THEN CONTINUE
H75      DC    H'200'
H1       DC    H'1'
HM1      DC    X'FFFF'
H8       DC    H'8'
SVCXSMI  DC    X'4A'
TLNOPM   DC    CL17'MISSING OPERATOR'
TLMOPM   DC    CL16'MISSING OPERAND'
TNMESS   DC    CL40'INVALID DATA - PLEASE RE-ENTER'
M2       DC    C'ENTER EQUATION(S) OR ''END'' '
CDUMP    DC    CL5'/DUMP'
CVDMSK   DC    X'402020202020202020202120'
CDEC     DC    CL4'/DEC'
CHEX     DC    CL4'/HEX'
CDEL     DC    CL7'/DELETE'
CDISP    DC    CL5'/DISP'
CNODISP  DC    CL7'/NODISP'
CSORT    DC    CL5'/SORT'
ZRDVM    DC    CL31'         = 0; DIVIDE SUPPRESSED'
PROP     DC    C'+'
PRES     DC    2F'0'
         DC    CL4' '
TNAME    DC    CL12' '
BLZR     DC    0F'0'
         DC    CL8'0'
         DC   2F'0'
EQYET    DC    X'00'
DISP     DC    C'Y'                     DISPLAY FLAG
TSTRING  DC    0F'0'
TRTLIST  DC    X'1501006A550101'
         DC    C'%'
         DC    CL096'++--**//==;;'
         DC    2CL101' '
TRES     DC    CL250' '
TRTBL    DC    64F'0'
TLSTART  DC    F'0'
DEFDRM   DC    CL30'           INVALID; 0 ASSUMED'
DEFOVM   DC    CL23'SYMBOL TABLE OVERFLOW;'
DEFOVM1  DC    CL9' '
DELERM   DC    CL9' '
         DC    CL31'NOT PREVIOUSLY DEFINED - ERROR'
DELMSG   DC    CL16'XXXXXXXX DELETED'
TITLE    DC    C'DEX '
SCREEN   DC    11CL40' '
READINTO DC    2CL200' '                PLACE TO READ INTO
DUMPSV   DC    3F'0'
         DC    0F'0'
SYMTBL   DC    CL8'*'
         DC    223F'0'
         DC     4X'FF'
DEFPK    DC   2D'0'
CVHTBL   DC    C'0123456789ABCDEF'
CVDN     DC   2D'0'
CVHN     DC    2D'0'
CVDNR    DC    CL13' '
CVHNR    DC    CL08' '
TLUNDM   DC    CL30'         UNDEFINED - SET TO 0'
         DC    0F'0'
SR14     DC    F'0'
N9       DC    H'8'
MODE     DC    C'D'                     INITIAL MODE - DECIMAL
SORTSAVE DC    CL12' '
SVCX14   DC    F'0'
QQSAVE   DC    2F'0'
         SPACE
CAPS     DC    129AL1(*-CAPS)      00-80
         DC    9AL1(*-CAPS+X'40')  81-89 BECOME C1-C9
         DC    7AL1(*-CAPS)        8A-90
         DC    9AL1(*-CAPS+X'40')  91-99 BECOME D1-D9
         DC    8AL1(*-CAPS)        9A-A1
         DC    8AL1(*-CAPS+X'40')  A2-A9 BECOME E2-E9
         DC    86AL1(*-CAPS)       AA-FF
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
