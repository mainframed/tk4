LM       TITLE '      SHOW DIRECTORY (LIST MEMBER NAMES OF A PDS)      X
               MARCH 27, 1978'
*
*
*
*
*
SHOWDIR  CSECT
* ******************************************************************
*   WRITTEN BY DICK SZEIDE (CSC AT OMB) .
*   MODIFIED FOR GSFC BY RICK DUVALL (CSC) APRIL 1977.
*                                                                   JFS
*   MOFIFIED BY J. SCHINDLER, CSC, JANUARY 26, 1978 TO:             JFS
*   1) PUT IN TITLE CARD.                                           JFS
*   2) CORRECTED PROGRAM SO THAT THE DS (OR DA) DATA SET NAME WOULD JFS
*      OUTPUT CORRECTLY WHEN THE DATA SET IS NOT SEQUENTIAL.        JFS
*   3) PUT IN SOME PRINT NOGEN'S (COULDN'T SEE THE FOREST FOR THE   JFS
*      TREES).                                                      JFS
*   4) CHANGED DATE ON SAVE MACRO.                                  JFS
*   5) CHANGED ERROR MESSAGE (OUTMESS).                             JFS
*   6) PUT IN EJECT BEFORE HELP DATA LOCATED AT THE END OF THIS     JFS
*      SOURCE.                                                      JFS
*   MODIFIED BY J. SCHINDLER, CSC, MARCH 27, 1978 TO:       JFS03/27/78
*   1) CORRECT AN ERROR WHEN THE PRINT DATA EXISTS,         JFS03/27/78
*      BUT IS NOT CURRENTLY ALLOCATED.                      JFS03/27/78
*                                                                   JFS
*   2) REPLACED EQUREGS BY ALL THE EQUATES   JIM MARSHALL          JDM1
* *****************************************************************
         SPACE 1                                                 JDM1
R0       EQU   0                                                 JDM1
R1       EQU   1                                                 JDM1
R2       EQU   2                                                 JDM1
R3       EQU   3                                                 JDM1
R4       EQU   4                                                 JDM1
R5       EQU   5                                                 JDM1
R6       EQU   6                                                 JDM1
R7       EQU   7                                                 JDM1
R8       EQU   8                                                 JDM1
R9       EQU   9                                                 JDM1
R10      EQU   10                                                JDM1
R11      EQU   11                                                JDM1
R12      EQU   12                                                JDM1
R13      EQU   13                                                JDM1
R14      EQU   14                                                JDM1
R15      EQU   15                                                JDM1
         SPACE 1                                                 JDM1
         SAVE  (14,12),,SHOWDIR-3/27/78                     JFS03/27/78
         BALR  R12,0                  BASE ADDR
         USING *,R12
*
         LR    R11,R13                SAVE BACKWARD POINTER
         LR    R10,R1      PRESERVE CPPL POINTER
*
         LA    R0,WKLEN           LENGTH TO GETMAIN                SFI
         A     R0,TABLEN          ADD IN CORE FOR TABLE            SFI
         GETMAIN R,LV=(0)             GET WORK AREA.               SFI
         LR    R13,R1                      AND MAKIT ADDRESSABLE
         USING SAVEAREA,R13
         LA    R2,SAVEAREA            ADDR OF WKA IN R1
         LA    R3,WKLEN               LENGTH OF WKA                SFI
         A     R3,TABLEN          ADD IN LENGTH OF TABLE           SFI
         LA    R4,256          MAX LENGTH OF MOVE ON 360           SFI
         MVI   0(R2),X'00'      ZERO 1ST BYTE                      SFI
         S     R3,=F'2'         SUB 1 FOR BYTE ALREADY MOVED AND   SFI
*                               1 TO GET LENGTH-1                  SFI
MVCLOOP  CR    R3,R4            IS LENGTH REMAINING < 256          SFI
         BL    EXMOVE            BR IF YES                         SFI
         MVC   1(256,R2),0(R2)   PROPAGATE ZEROES                  SFI
         SR    R3,R4             SUB NUMBER OF BYTES MOVED         SFI
         AR    R2,R4             INCR POINTER TO SECTION TO CLEAR  SFI
         B     MVCLOOP           GO TO TOP OF LOOP                 SFI
MOVEIT   MVC   1(0,R2),0(R2)                                       SFI
EXMOVE   EX    R3,MOVEIT         CLEAR REMAINING BYTES             SFI
*
*
         ST    R11,SAVEAREA+4        BSCK CHAIN
         ST    R13,8(R11)          FOREWARD CHAIN
*
        EJECT
         USING CPPL,R10               CPPL ADDR WAS SAVED IN R10
         MVC   IOPLUPT(4),CPPLUPT      PREPARE IOPL
         MVC   IOPLECT(4),CPPLECT
         LA    R2,ECB
         ST    R2,IOPLECB
         DROP  R10                    WE NO LONGER NEED THE CPPL
*
*
         BAL   R3,PARSINPT                 PARSE INPUT BUFFER
         BAL   R3,DSNFMT                   FORMAT DSNAME FOR DAIR
         BAL   R3,PREALLOC                 IS DSNAME ALLOCATED?
         BAL   R3,ALLOC                    ALLOCATE INPUT
         BAL   R3,OPENER               OPEN DCB FOR INPUT
*
*
         BAL   R3,ALIAS                SPECIAL FORMAT FOR ALIASES?
         BAL   R3,PSTRING              SET UP MASKS FOR COMPARE
         BAL   R3,LINESIZE             LINE SIZE SPECIFIED?
         BAL   R3,PRINT                DO WE WANT DISK OP?
         BAL   R3,PRNTALOC             ALLOCATE IF YES.
         BAL   R3,PUTBL                 BLANK OUTPUT AREA
*
         LA    R5,CHANTOP
         LR    R7,R5                                               SFI
         A     R7,TABLEN          GET END OF TABLE ADDR            SFI
         LA    R6,16                    LENGTH OF AN ENTRY
         SR    R7,R6         SUB TO MAKE R7 POINT TO LAST ITEM     SFI
*
         LA    R10,DIRDATA+256          FORCE GETTER TO GET A DIRECTORY
         LR    R9,R10                       BLOCK ON FIRST ACCESS
*
         OI    LINECNT+(L'LINECNT-1),X'0C'          FOR MSG & SEQ
*
MAINLOOP BAL   R3,GETTER                GET A MEMBER ENTRY
         BAL   R3,CHAIN                 CHECK FOR ALIAS
         B     MAINLOOP                 THE EXITS FROM THIS LOOP ARE
*                                           END-OF-FILE (LOGICAL OR
*                                            PHYSICAL) ON INPUT.
EODAD    LR    R7,R5              SET UP THE HIGH-WATER MARK AS
         LA    R5,CHANTOP             LIMIT FOR THE RUN-OUT
         CR    R5,R7              CHECK FOR NO OUTPUT
         BE    EODEDIT
         LA    R6,16              SET INCREMENT
         SR    R7,R6              BACK OFF FOR FLYING START
*
         LA    R9,PUTLINE-10      OUTPUTLINE LIMIT
         AH    R9,LINELENG
         LA    R8,10              OUTLINE INCREMENT
         BAL   R3,PUTBL
*
PRNTLOOP BAL   R3,FORMAT          FORMAT OUTPUT FOR EACH MEMBER,
         BXLE  R5,R6,PRNTLOOP        AND PRINT ON A FULL LINE.
         BAL   R3,FLUSHER         PRINT LAST LINE
*
EODEDIT  L        R3,HITCOUNT        MAKE HIT COUNT VISIBLE        SFI
         LTR   R3,R3              WERE ANY MEMBERS FOUND?          SFI
         BNZ   EODPUT                RC = 4 IF HITCOUNT=0
         OI    RCDE+3,X'04'
         B     EODPUT2            BYPASS CHECK FOR < 10 FOUND      SFI
EODPUT   C     R3,=F'10'            WERE 10 MEMBERS LISTED?        SFI
         NOP   QUIT                 IF NOT, DON'T PRINT COUNT      SFI
**** ZAP ABOVE TO A BL   QUIT TO ACTIVATE (X'4700' TO X'4740')
EODPUT2  CVD   R3,HITCOUNT          CONVERT TO DECIMAL             SFI
         ED    FINAL,HITCOUNT+5     EDIT FOR OUTPUT                SFI
*                                                                  SFI
         MVC   PUTLINE(LFINAL),FINAL    MOVE TO OUT AREA           SFI
         LA    R0,LFINAL            LENGTH FOR TPUT
         L     R10,SAVPARMD       LOAD POINTER TO PARAM LIST       SFI
         USING IKJPARMD,R10       ADDRESSABILITY FOR PARMS         SFI
         TM    PARPFXD+6,X'80'    WAS MASK PARM SPECIFIED          SFI
         BNO   NOMASK             BR IF NOT                        SFI
*    IF IT WAS, WE WILL DISPLAY IT FOR THE USER                    SFI
         MVC   PUTLINE+22(L'OUTMASK),OUTMASK  MOVE IN 'USING MASK' SFI
         L     R6,PARPFXD         GET POINTER TO MASK              SFI
         LH    R5,PARPFXD+4       GET LENGTH OF MASK               SFI
         BCTR  R5,0               DECR TO GET LENGTH-1             SFI
         EX    R5,MOMOVE          MOVE MASK TO OUTPUT LINE         SFI
         LA    R6,PUTLINE+22+L'OUTMASK-12+1(R5)                    SFI
*      NOW R6 POINTS TO END OF MASK IN OUTPUT LINE +1              SFI
         MVI   0(R6),C''''        PUT ENDING QUOTE AFTER MASK      SFI
         MVC   3(LFINAL-22,R6),FINAL+22   RESTORE REST OF LINE     SFI
         LA    R0,LFINAL(R5)      SET UP LENGTH TO TPUT            SFI
NOMASK   EQU   *                                                   SFI
         BAL   R3,FORTPUTT              AND WRITE FINAL LINE
*
*
QUIT     CLOSE ,MF=(E,CLOSEL)    CLOSE DCB OR DCBS
*
FREE     L     R15,DONTFREE              RETRIEVE SWITCH
         B     FREETAB(R15)
MOMOVE   MVC   PUTLINE+22+L'OUTMASK-12(0),0(R6)                    SFI
FREETAB  B     FREEMAIN                  FREE IT
*
         LA    R1,XDAPL                ADDR OF 'FREE' PARAMETER BLOCK
         USING DAPL,R1
         LA    R9,DA18AREA             ADDR OF DAIR WORKAREA
         ST    R9,DAPLDAPB             ADDRESSABLE FOR "FREE"
         DROP  R1
         LINK  EP=IKJEFD00             FREE DATA SET
*
         LTR   R15,R15                 WHAT DOES DAIR SAY?
         BZ    FREEMAIN                    IF NOTHING, WE PASS
         BAL   R3,DAIRERR                  OTHERWISE, WE TALK IT OVER
*
FREEMAIN EQU   *                                                   SFI
*REEMAIN L     R15,RCDE             MAKE RC VISIBLE
*        BAL   R3,RESTOHEX
*        STH   R5,STCMFULL                                         SFI
*        CLC   RCZIP(2),STCMFULL                                   SFI
*        BE    RCZERO              BR IF IT IS. ( NO RC MESSAGE)   SFI
*        MVC   PUTLINE+3(2),STCMFULL                               SFI
*        MVC   PUTLINE(3),=C'RC='
*        LA    R5,5            LGTH FOR TPUT
*        BAL   R3,FORTPUT
*
RCZERO   L     R2,SAVEAREA+4       RETRIVE BACKWARD CHAIN
         L     R3,RCDE             RETRIVE MAX RC
         LA    R0,WKLEN           LENGTH TO FREE                   SFI
         A     R0,TABLEN          ADD IN CORE FOR TABLE            SFI
         LR    R1,R13             AREA TO FREE                     SFI
         FREEMAIN R,LV=(0),A=(1)   RETURN WHAT WE GOT              SFI
*
         LR    R13,R2                   OLD SAVEAREA ADDRESSABLE
         LR    R15,R3                   PRESERVE RC
         RETURN (14,12),,RC=(15)
         DC    0H'0'
*RCZIP   DC    X'F0F0'                                             SFI
         EJECT
*
*            * ERROR ROUTINES *
*
PARSERR  TPUT  PARSMSG,L'PARSMSG
         OI    RCDE+3,X'10'                 NO OUTPUT
         B     FREEMAIN
*
*
NOTPART  LH    R6,DSNBUF          GET LENGTH OF DSN                SFI
         BCTR  R6,0               DECREMENT TO GET LENGTH-1        SFI
         EX    R6,DSNMVIN         MOVE DSN TO MESSAGE              SFI
         LA    R6,INMESS+19(R6)   POINT PAST DSN                   SFI
         MVC   0(L'PARTMSG,R6),PARTMSG     MOVE IN MESSAGE         SFI
BADIN    TPUT  INMESS,L'INMESS    PUT OUT BAD INPUT MESSAGE        SFI
         OI    RCDE+3,X'0C'                 INVALID INPUT          SFI
         B     FREE
*
*
DSNMVIN  MVC   INMESS+16(0),DSNBUF+2       VARIABLE LENGTH MOVE    SFI
OPENERR  LH    R6,DSNBUF          GET LENGTH OF DSN                SFI
         BCTR  R6,0               DECREMENT TO GET LENGTH-1        SFI
         EX    R6,DSNMVIN         MOVE DSN TO MESSAGE              SFI
         LA    R6,INMESS+19(R6)   POINT PAST DSN                   SFI
         MVC   0(L'OPENMSG,R6),OPENMSG     MOVE IN MESSAGE         SFI
         B     BADIN                                               SFI
*
*
PRDAIRER ST    R3,PRSTR3
         BAL   R3,DAIRERR
         L     R3,PRSTR3
         NI    PRINTSW,X'00'            IN THIS CASE, TURN OFF PRINT,
         OI    RCDE+3,X'08'             NOT QUITE RIGHT OUTPUT     SFI
         BR    R3                            BUT GIVE WHAT WE CAN.
*
PROPNERR LH    R6,DSNBUF          GET LENGTH OF DSN                SFI
         BCTR  R6,0               DECREMENT TO GET LENGTH-1        SFI
         EX    R6,DSNMVOUT        MOVE DSN TO MESSAGE              SFI
         LA    R6,OUTMESS+20(R6)   POINT PAST DSN                  SFI
         MVC   0(L'OPENMSG,R6),OPENMSG     MOVE IN MESSAGE         SFI
BADOUT   TPUT  OUTMESS,L'OUTMESS    PUT OUT BAD INPUT MESSAGE      SFI
         NI    PRINTSW,X'00'
         OI    RCDE+3,X'08'             NOT QUITE RIGHT OUTPUT     SFI
         BR    R3
*
DSNMVOUT MVC   OUTMESS+17(0),DSNBUF+2      VARIABLE LENGTH MOVE    SFI
         EJECT
*
*              * SET UP MASKS FOR MEMBER NAME COMPARE  *
*
*
         USING IKJPARMD,R10
PSTRING  TM    PARPFXD+6,B'10000000'    IS THE STRING PRESENT?
         BCR   14,R3                       NO - TAKE DEFAULT
         MVC   PSAND,=X'FFFFFFFFFFFFFFFF'
*
*
         L     R6,PARPFXD              POINTER TO STRING
         LH    R5,PARPFXD+4            LENGTH OF STRING
         CH    R5,=H'8'                VALIDATE STRING LENGTH, AND
         BL    PSMASK                      TRUNCATE TO 8.
         LA    R5,8
*
PSMASK   MVC   PSXC(8),=C'********'    DEFAULT TO ALL MASK CHARS
         BCTR  R5,0                    DEC REGISTER FOR EXECUTE
         EX    R5,PSORIN               MOVE INTO MASK, AND SHIFT TO
*                                          UPPER CASE.
*
         SR    R4,R4                   CONSTANT ZERO
         LA    R7,8                    LIMIT LOOP
         LA    R8,C'*'                 COMPARANDS FOR MASK CHARS
         SR    R15,R15                 IC REGISTER
*
         CLC   PSXC(3),PSALL0        SPECIAL CASE FOR COMPATIBILITY
         BNE   PSLOOP                      WITH OPSDIR
         XC    PSXC(8),PSXC
         XC    PSAND,PSAND
         BR    R3
*
PSLOOP   IC    R15,PSXC-1(R7)          GET CHARACTER
         CR    R15,R8                  IS IT A MASK CHARACTER?
         BNE   PSINCR                      IF SO, ZERO OUT
*                                          THE CORRESPONDING POSITION
         STC   R4,PSAND-1(R7)              IN THE AND & OR MASKS
         STC   R4,PSXC-1(R7)
         B     PSINCR
*
PSINCR   BCT   R7,PSLOOP               8 REPITITIONS
         BR    R3                      AND GET OUT
*
*
PSORIN   MVC   PSXC(0),0(R6)           MOVE INTO TEST POSITION
         EJECT
*
*              *  DETERMINE OUTPUT LINE SIZE  *
*
LINESIZE LA    R15,70                  DEFAULT IS 7 ENTRIES/LINE
         TM    PARLND+6,B'10000000'    IS LINE LENGTH SPECIFIED?
         BNO   LINEQUIT                    NO - TAKE DEFAULT
*
         L     R4,PARLND               ADDRESS OF STRING
         IC    R5,0(R4)               TAKE FIRST DIGIT OF STRING
         LA    R4,15                   SET UP AN AND MASK
         NR    R5,R4                   R5 SHOULD HAVE FOUR BITS LEFT
         IC    R15,LINETAB(R5)         GET ACTUAL LINE LENGTH
*
LINEQUIT STH   R15,LINELENG
         BR    R3
         DROP  R10
*
*
*               DECIDE UPON SPECIAL FORMAT FOR ALIASES
*
*
         USING IKJPARMD,R10
ALIAS    ICM   R15,B'0011',PARALIAS   IF THE KEYWORD NUMBER IS ODD WE
         BCR   8,R3                    WILL  SUPPRESS
         SLL   R15,7                  THE SEARCH FOR EQUAL TTR
         STC   R15,CHAND+1               AND THE PUTTING OF ALIAS
         BR    R3                     NAMES IN PARENTHESIS
         DROP  R10
*
         EJECT
         USING CPPL,R10                    AND MAKE IT ADDRESSABLE
         USING PPL,R8
PARSINPT LA    R8,PPLAREA                MAKE PPL ADDRESSABLE
         MVC   PPLUPT,CPPLUPT          SET UP IKJPARSE PARMS
         MVC   PPLECT,CPPLECT
         MVC   PPLCBUF,CPPLCBUF
         LA    R9,ECB
         ST    R9,PPLECB
         MVC   PPLPCL(4),=A(PARMDSN)
         LA    R9,ANS
         ST    R9,PPLANS
*
*
*
         LA    R1,PPL                  MAKE PPL ADDRESSABLR
         LINK  EP=IKJPARS              PARSE  THE INPUT BUFFER
*
         LTR   R15,R15                 CHECK FOR RETURN OTHER THAN ZERO
         BNZ   PARSERR
*
         DROP  R10
         ICM   R10,B'1111',PPLANS      TOP OF PDL CHAIN
         BNP   PARSERR                 PARSE OF BUFFER UNSUCESSFUL
         L     R10,0(R10)              PDL HEADER
         ST    R10,SAVPARMD       SAVE POINTER TO PARAM LIST       SFI
         BR    R3
         DROP  R8
         EJECT
         USING IKJPARMD,R10
*
PREALLOC LA    R9,DA00AREA             MAKE DAIR WORK AREAS
         USING DAPB00,R9
*
         LA    R1,XDAPL
         USING DAPL,R1
         ST    R9,DAPLDAPB                  POINT DAPL TO SRCH
         DROP  R1
         LINK  EP=IKJEFD00
*
         B     PRECONT(R15)                 CHECK FOR ERROR
PRECONT  B     PRETM
*
         BAL   R3,DAIRERR                   ERROR DETECTED
         B     FREEMAIN                     NO OUTPUT
*
PRETM    LA    R15,4                         4 MEANS FREE IT
         TM    DA00FLG,B'00001010'          WAS IT ALLOCATED
         BZ    PRETEND                         YES - DON'T FREE IT
*
         SR    R15,R15                       0 MEANS DON'T FREE
         TM    DA00DSO,B'10'                 IS IT PARTITIONED?
         BNO   NOTPART                            ERROR MSG IF NOT.
*
PRETEND  ST    R15,DONTFREE                  SAVE DON'T FREE SWITCH
         BR    R3
*
         DROP  R9
         DROP  R10
         EJECT
         USING IKJPARMD,R10
*
ALLOC    LA    R8,DA08AREA             MAKE DAIR WORK AREAS
         LA    R9,DA18AREA                 ADDRESSABLE
         USING DAPB08,R8
         USING DAPB18,R9
*
DAUNIT   MVI   DA08DDN,C' '
         MVC   DA08DDN+1(23),DA08DDN BLANK UNIT AND SERIAL NUMBER
         MVC   DA08MNM(16),DA08UNIT    BLANK MEMBER & PASSWORD
*
         OI    DA08DSP1,X'08'          DISP=(SHR,KEEP,KEEP)
         OI    DA08DPS2,X'08'
         OI    DA08DPS3,X'08'
         OI    DA18DPS2,X'08'
*
         MVC   DA18MNM(10),DA08UNIT    BLANK MEMBER & SYSOUT CLASS
*
         LA    R1,XDAPL                POINTER FOR LINK
         USING DAPL,R1
         ST    R8,DAPLDAPB             ADDRESS OF DAIR WORK AREA IN
*                                          DAIR PARAMETER BLOCK
         DROP  R1
         LINK  EP=IKJEFD00             CALL ALLOCATE
*
*
         CH    R15,=H'8'               WE HAVE A SPECIAL MESSAGE
         BNE   ALLOCONT                    FOR A DATA SET NOT IN THE
         CH    R15,DA08CTRC                CATALOG.
         BNE   ALLOCONT
*
         LH    R6,DSNBUF            GET LENGTH OF DSN
         BCTR  R6,0                 AND DECREMENT FOR EXECUTE
         EX    R6,DSNMOVE3          PUT NAME IN MESSAGE
         LA    R6,MSGNOTCT+13(R6)    POINT PAST DSNAME
         MVC   0(17,R6),=C'IS NOT CATALOGED.'
*
         TPUT  MSGNOTCT,L'MSGNOTCT
         OI    RCDE+3,X'0C'           NO OUTPUT RC                 SFI
         B     FREEMAIN
*
ALLOCONT LTR   R15,R15              ARE WE ALLOCATED
         BZ    ALLOCKPO                  YES - CHECK FOR PARTITIONED
         BAL   R3,DAIRERR
         B     FREEMAIN
*
*
ALLOCKPO LA    R7,DCB                  MAKE INPUT DCB ADDRESSABLE
         USING IHADCB,R7
         MVC   DCBDDNAM(8),DA08DDN     PUT DDNAME INTO DCB
         MVC   DA18DDN(8),DA08DDN         AND FREE BLOCK
*
*            * CHECK FOR DSORG=PO, AND SET UP FOR OPEN
         TM    DA08DSO,B'10'           IS IT PARTITIONED ?
         BNO   NOTPART                     NO - DON'T REPORTIT
*
         BR    R3
*
DSNMOVE3 MVC   MSGNOTCT+10(0),DSNBUF+2    VARIABLE LENGTH MOVE
*
         DROP  R7
         DROP  R8
         DROP  R9
         DROP  R10
         EJECT
OPENER   LA    R9,DCB                  MAKE INPUT DCB ADDRESSABLE
         USING IHADCB,R9
*
         OPEN  (DCB,(INPUT))
         TM    DCBOFLGS,B'10000'       ARE WE OPEN ?
         BNO   OPENERR                     NOPE - TELL 'EM
         DROP  R9
         BR    R3
*
         EJECT
GETTER   CR    R9,R10              ARE WE PAST LAST MEMBER ENTRY?
         BL    GETINCR                 IF SO, GET A NEW DIRECTORY BLOCK
*
GETREAD  LA    R4,DIRDATA             GET THE OUTAREA IN A REG
         READ  DECB1,SF,DCB,(R4),'S'  GET THE BLOCK
         CHECK DECB1
*
         LA    R9,DIRDATA+2        POINTER TO CURRENT MEMBER
         LA    R10,DIRDATA         SET UP LIMIT TO SEARCH FOR
         AH    R10,DIRDATA              MEMBER NAMES
         B     GETCOMPR
*
GETINCR  SR    R4,R4                GET NUMBER OF HALFWORDS OF
         IC    R4,11(R9)               USER DATA,
         LA    R8,31                   BUT LIMITED TO 5 BITS
         NR    R4,R8
         SLA   R4,1             CONVERT TO BYTES
         LA    R9,12(R4,R9)       POINT TO NEXT MEMBER ENTRY
*
         CR    R9,R10             HAVE WE PASSED LAST MEMBER?
         BNL   GETREAD                 YES - GET A NEW DIRECTORY BLOCK
*
GETCOMPR CLC   0(8,R9),=X'FFFFFFFFFFFFFFFF'  LAST ENTRY IN DIRECTORY?
         BE    EODAD                   YES - QUIT
*
         MVC   PSARGU(8),0(R9)    MOVE MEMBER NAME TO WORK AREA
         NC    PSARGU,PSAND            MASK OFF NON-COMPARE BYTES
         XC    PSARGU,PSXC             DOES IT MATCH THE MASK?
         BNZ   GETINCR                     NO - PASS IT BY
*
         L     R8,HITCOUNT                                         SFI
         LA    R8,1(R8)                     COUNT THE MEMBER       SFI
         ST    R8,HITCOUNT                                         SFI
         BR    R3
*
         EJECT
CHAIN    MVC   0(12,R5),0(R9)        PUT MEMBER NAME IN TABLE
         ST    R3,CHAINR3            SAVE FOR SUBROUTINE CALLS
         ST    R5,CHAINR5            SAVE FOR ALIAS CHASING
CHAND    NI    11(R5),X'80'          TURN OFF ALL INDICATORS BUT ALIAS
         TM    CHAND+1,X'80'          IF NOALIAS WAS SPECIFIED, WE
         BZ    CHANOGOT                SKIP THE SEARCH FOR EQUAL TTR
*
*
         LA    R2,CHANTOP            START SEARCH FOR EQUAL TTR
         MVC   STCMFULL(4),8(R9)     MOVE TO FULLWORD ALIGN       SFI
         L     R15,STCMFULL                                       SFI
         SRL   R15,8                 SHIFT THE N OFFA TTRN
         BAL   R3,CHANSEEK
         LTR   R2,R2                 WAS AN EQUAL TTR FOUND?
         BZ    CHANOGOT                  NO - WHO CARES ?
*
         TM    11(R9),X'80'          IS THE CURRENT GUY AN ALIAS ?
         BNO   CHASTKIT                  IF SO, WE'LL RUN THE CHAIN OF
*                                        ALIASES, AND PUT THE NEW KID
         BAL   R3,CHALIAS                AT THE TAIL.
         OI    11(R5),X'01'              IF NOT, WE'LL PUT THE NEW ONE
         ST    R5,12(R2)                 AT THE HEAD OF THE CHAIN.
         B     CHANOGOT
*
CHASTKIT ST    R2,12(R5)             POINT TO FORMER CHAIN HEAD
         OI    11(R2),X'01'          INDICATE THAT FORMER HEAD NOW
*                                    HAS A PREDECESSOR
*
CHANOGOT BXH   R5,R6,CHNOCORE       INCREMENT & CHECK FOR OUT OF
         L     R3,CHAINR3               STORAGE<H
         BR    R3                   RETURN TO CALLER
*
*
CHANSEEK CR    R2,R5                R2=0 MEANS THIS IS A UNIQUE TTR
         BNL   CHANR0
*
CHANSEER LR    R4,R6                PUT INCREMENT IN R4
         L     R14,8(R2)            TTRN FROM TABLE
         SRL   R14,8                DROP N
         CR    R14,R15
         BE    CHANEQ               FOUND EQUAL TTR
*
         AR    R2,R4                R2=0 MEANS THIS IS A UNIQUE TTR
         B     CHANSEEK
*
*
CHANR0   SR    R2,R2
CHANEQ   BR    R3
*
CHALIAS  ICM   R4,B'1111',12(R2)  LOAD AND TEST POINTER TO NEXT ALIAS
         BZ    CHGOTIT
         LR    R2,R4              FOLLOW THE ALIAS CHAIN 'TILL
         B     CHALIAS                IT ENDS
*
CHGOTIT  BR    R3
*
*
CHNOCORE TPUT  MSGNOCOR,L'MSGNOCOR
         OI    RCDE+3,X'08'       BAD OUTPUT RC
         B     EODAD
         EJECT
FORMAT   TM    11(R5),X'01'         DOES THIS ENTRY HAVE A
         BO    FORMRET                   PREDECESSOR?
*                                        YES - SKIP IT
         ST    R3,FORMR3            SAVE OUR RETURN ADDR
         ST    R5,FORMR5            SAVE OUR INPUT PTR
*
         TM    11(R5),X'80'         ARE WE AN ALIAS, HMMMM?
         BNO   FORMCHAI                   IF NOT WE'RE AN ORPHAN
*
         MVC   1(8,R10),=C'*ORPHAN*'      SO MARK IT AS SUCH
         BAL   R3,FORMINCR
*
FORMCHAI BAL   R3,FORMSTIK             PUT THIS GUY IN OUTPUT LINE
         ICM   R5,B'1111',12(R5)      GET NEXT ALIAS
         BNZ   FORMCHAI              AND CHAIN TO THE END
*
*
FORMFLUS L     R3,FORMR3              RETRIEVE RETURN ADDR
         L     R5,FORMR5              AND ORIGIONAL MEMBER
         B     FORMRET
*
*
FORMSTIK MVC   1(8,R10),0(R5)         PUT MEMBER NAME IN OUTPUT LINE
         TM    11(R5),X'80'        IF WE ARE AN ALIAS, WE WILL
         BNO   FORMINCR             PRINT IN PARENTHISIS
         MVI   0(R10),C'('
         LA    R15,8(R10)            WE'LL SCAN RIGHT TO LEFT TO PLACE
FORMSCAN CLI   0(R15),C' '                  A RIGHT PARENTHESIS AFTER
         BNE   FORMPARN                     THE LAST CHAR
         BCT   R15,FORMSCAN
FORMPARN MVI   1(R15),C')'
FORMINCR BXLE  R10,R8,FORMSTR         INCREMENT OUTPUT POINTER AND
*                                         CHECK LINE LENGTH
FORMWRR  IC    R15,PRINTSW            SNAG CONTROL FOR DISK O/P
         EX    R15,PUTBR
FORTPUT  LH    R0,LINELENG            LENGTH FOR TPUT
FORTPUTT TPUT  PUTLINE,(R0)
*
PUTBL    MVI   PUTLINE,C' '            BLANK OUT THE
         MVC   PUTLINE+1(99),PUTLINE   OUTPUT LINE
         LA    R10,PUTLINE                  AND RESET POINTER
         LA    R15,4                   R15=4 MEANS WE ARE WORKING
         BR    R3                         ON A NEW LINE.
*
FORMSTR  SR    R15,R15                 R15=0 MEANS CONTINUE PRESENT
         BR    R3                          LINE
*
FORMRET   BR    R3
*
FLUSHER  LA    R6,PUTLINE              WRITE THE LAST BUFFER,
         SR    R10,R6                       IF NECESSARY
         BCR   13,R3
         B     FORMWRR
*
*
*
*
PUTBR    BC    0,*+4                SNAG THE TPUT, AND MAKE IT A
         AP    LINECNT,=P'10'           PUT. THEN INCREMENT EDIT LINE
         UNPK  PUTLINE+73(8),LINECNT    COUNT AND PUT IN OUTPUT LINE.
         OI    PUTLINE+80,X'F0'     MAKE POSITIVE
         PUT   PRDCB,PUTLINE+1
         B     PUTBL
        EJECT
*      N.B. - ALL REFERENCES IN THIS SECTION TO THE 'PRINT'        SFI
*             PARAMETER REALLY REFER TO THE 'DA' PARAMETER.        SFI
*             ALSO, ALL REFERENCES TO 'PRINTING' REALLY            SFI
*             MEAN 'CREATING A DISK DATA SET.                      SFI
PRINT    LA    R8,DA04AREA              MAKE DAIR WKA ADDRESSABLE
         USING DAPB04,R8
         USING IKJPARMD,R10
*
         TM    PARPND+6,X'80'           IS PRINT PARAMETER PRESENT?
         BO    PRSWITST                     YES -SET SWITCH
NOPRINT  OI    CLOSEL,X'80'                  NO  - TRUNCATE CLOSE LSFI
         BR    R3                            AND RETURN
*
PRSWITST L     R6,PARPND                POINTER TO DSNAME          SFI
         CLI   0(R6),C'*'         IF DA PARAM IS '*' THEN          SFI
         BE    NOPRINT            DON'T CREATE DISK OUTPUT         SFI
         OI    PRINTSW,X'F0'            SET SWITCH FOR DISK OUTPUT SFI
         MVI   DA04CD+1,X'04'           SET JUST LOOKIN' CODE
         LH    R5,PARPND+4              LENGTH OF DSNAME
         STH   R5,PRPNDSN              LENGTH IF QUOTED
         BCTR  R5,0                     DECREMENT FOR INCREMENT
         EX    R5,PRDSNMV               MOVE TO DAIR AREA
*
         TM    PARPND+6,B'01000000'     IS DSN IN QUOTES?
         BO    PRUNIT                       YES - SKIP REST.
*
         OI    DA04CTL,B'100000'         USER ID NEEDED
         SR    R14,R14         SCAN TABLE OF VALID QUALIFIERS
         LA    R15,PRQALND       FOR DISK DSNAME
         LA    R7,PRQALTB            TOP OF TABLE
*
PRQALOOP IC    R14,0(R7)      LENGTH OF TABLE ENTRY
         LA    R6,PRPNDSN+2(R5) POINT AT LAST 2 CHARS OF DSN
         SR    R6,R14           BACK UP BY LENGTH OF TABLE ENTRY
         EX    R14,PRQACMP      COMPARE TO TABLE ENTRY, AND QUIT
         BE    PRUNIT              IF A MATCH IS FOUND
*
         LA    R14,2(R14)        INCREMENT TO ACTUAL LENGTH
         BXLE  R7,R14,PRQALOOP      SEARCH CONTINUES
*
         LA     R6,PRPNDSN+1(R5)    POINT PAST ENTERED NAME
         MVC   2(5,R6),=C'.DATA'
         LA    R5,6(R5)                         AND INCREMENT ACTUAL
PRASMD   STH   R5,PRPNDSN                       LENGTH
*
*
PRUNIT   LA    R5,PRPNDSN              ADDR OF DAIR DSN
         ST    R5,DA04PDSN
*
         LA    R6,XDAPL                   WE EXPECT THE DAPL TO BE
         USING DAPL,R6                         ALREADY FORMATTED
         ST    R8,DAPLDAPB
         DROP  R6
*
         LR    R1,R6                       DAPL ADDR INTO R1
         LINK  EP=IKJEFD00                 ALLOCATE OR ELSE
*
         LA    R9,DA08AREA           MAKE ALLOCATE WKA ADDRESSABLE
         USING DAPB08,R9
*
         MVC   DA08DSP1(3),=X'040204'  DEFAULT DISP=(NEW,CATLG,DELETE)
         OI    DA08CTL,X'10'           DEFAULT SPACE IS RLSE
         MVC    DA08CTL(1),DA04CTL       CARRY ACROSS USERID
         MVC   DA08PDSN(4),DA04PDSN       CARRY ACROSS DSNAME
*
         B     *+4(R15)        INDEXED BY RC FROM DAIR
         B     PROLD       RC=0 MEANS IT EXISTS
         B     PRDAIRER    RC=4 MEANS OUR ERROR
         CLC   DA04CTRC(2),=X'0008'  RC=8 AND CATALOG8 MEANS DISP=NEW
         BE    PRRET3
         B     PRDAIRER
*
PROLD    MVC   DA08DSP1(3),=X'010808'      DISP=(OLD,KEEP,KEEP) AND
         NI    DA08CTL,B'00100000'           ONLY ALLOW USERID
         TM    DA04FLG,X'02' IS DSNAME IN DSE?              JFS03/27/78
         BZ    PRRET3        NO                             JFS03/27/78
         TM    DA04DSO,X'40'                 IS IT DSORG=PS
         BO    PRRET3                            YES - OK
*
         LA    R6,OUTMESS+16  OUTPUT ERROR MESSAGE                  JFS
         TM    PARPND+6,X'40'  DATA SET NAME IN QUOTES?             JFS
         BZ    PRNOQ1          NO                                   JFS
         MVI   0(R6),C''''     YES, MOVE IN FIRST QUOTE             JFS
         LA    R6,1(R6)  INCREMENT FOR QUOTE                        JFS
PRNOQ1   DC    0H'0'                                                JFS
         L     R15,PARPND  LOAD ADDR OF DSNAME                      JFS
         LH    R14,PARPND+4  LOAD LENGTH OF DSNAME                  JFS
         BCTR  R14,R0  DECREMENT FOR MVC INST.                      JFS
         EX    R14,PRMVC   MOVE DSNAME                              JFS
         LA    R6,1(R6,R14)   ADD LENGTH OF DSNAME                  JFS
         TM    PARPND+6,X'40'  DSNAME IN QUOTES?                    JFS
         BZ    PRNOQ2          NO                                   JFS
         MVI   0(R6),C''''     YES, MOVE IN LAST QUOTE              JFS
         LA    R6,1(R6)  FOR THE QUOTE                              JFS
PRNOQ2   DC    0H'0'                                                JFS
         LA    R6,1(R6)   FOR 1 SPACE AFTER DSNAME                  JFS
         MVC   0(L'MSGNOTPS,R6),MSGNOTPS     MOVE IN MESSAGE       SFI
         B     BADOUT             GO PUT MESS                      SFI
*
*
PRRET3   BR    R3
*
PRQACMP  CLC   0(0,R6),1(R7)   VARIABLE LENGTH COMPARE FOR
*                                    QUALIFIER
PRMVC    MVC   0(0,R6),0(R15)   MOVE INST.                          JFS
*                                                                   JFS
         DROP  R8,R9,R10
         EJECT
PRNTALOC IC    R1,PRINTSW                  ARE WE NEEDED?
         EX    R1,PRNTSNAG                     IF NOT, GO BACK
         BR    R3
*
PRNTSNAG BC    0,*+4            CONTINUE IF NEEDED
         LA    R8,DA08AREA      MAKE WORK AREAS ADDRESSABLE
         USING DAPB08,R8
*
         MVI   DA08DDN,C' '               BLANK UNIT,SERIAL#, MEMBER
         MVC   DA08DDN+1(23),DA08DDN      NAME, PASSWORD, AND
         MVC   DA08MNM(16),DA08DDN        SYSOUT CLASS
         MVI   DA08DSO,X'40'              DSORG=(PS)
         MVC   DA08BLK(12),PRSPACE        SPACE=(1680,(20,10),RLSE)
         OI    DA08CTL,X'40'              ALLOCATE IN BLOCKS
*
         LA    R6,XDAPL                   WE EXPECT THE DAPL TO BE
         USING DAPL,R6                         ALREADY FORMATTED
         ST    R8,DAPLDAPB
         DROP  R6
*
         LR    R1,R6        DAPL INTO R1
         LINK  EP=IKJEFD00
         LTR   R15,R15
         BNZ   PRDAIRER
         TM    DA08DSO,X'40'  IS DATA SET SEQUENTIAL?      JFS03/27/78
         BO    PRNTSEQ        YES                          JFS03/27/78
         L     R10,SAVPARMD   LOAD ADDR OF PARSE PARM      JFS03/27/78
PRNTSEQ  DC    0H'0'                                       JFS03/27/78
*
         LA    R6,PRDCB              OUTPUT DCB
         USING IHADCB,R6
         MVC   DCBDDNAM(8),DA08DDN   PUT DDNAME INTO OUTPUT DCB
         OPEN  (PRDCB,(OUTPUT))
         TM    DCBOFLGS,B'10000'
         BNO   PROPNERR
*
         LH    R6,LINELENG          LIMIT LINE LENGTH TO 70
         LA    R7,70
         CR    R6,R7
         BNH   PRRET
         STH   R7,LINELENG
*
PRRET    BR    R3
*
PRDSNMV  MVC   PRPNDSN+2(0),0(R6)   GET PRINT DSN INTO DAIR FORMAT
         DROP  R6,R8
         EJECT
RESTOHEX LA    R6,4               PREPARE WORK REGISTERS
*                                    R6 GETS A BIT FOR EACH SIGNIFICANT
         LR    R9,R6                 DIGIT. R7 IS THE SOURCE OF BITS.
         SR    R7,R7                 IT IS EITHER ALL F'S OR ALL 0'S.
         LA    R10,1                 R10 IS A ONE-TIME SWITCH.
*                                    R15 HAS THE ARGUMENT. R14 IS FOR
*                                    WORK, R4, AND R5 GET RESULTS.
RESLOOP  SLDL  R4,8              MOVE PREVIOUS RESULT OVER
         SR    R14,R14
         SLDL  R14,4             GET 4 BITS INTO R14
         LTR   R14,R14           ARE WE SIGNIFICANT?
         BZ    *+6                   NO  - LEAVE BITS ZERO
         BCTR  R7,0                  YES - SET SOURCE BITS ON
*
         SLDL  R6,1              MOVE BIT OR ZERO, DEPENDING ON
         IC    R5,ONETOF(R14)        SIGNIFICANCE, AND TRANSLATE
*                                    THE BITS IN R14
         BCT   R9,RESLOOP        AFTER 4 NIBBLES WE RESET THE
         BCT   R10,RESOUT            SIGNIFICANCE SWITCH AND LOOP
         SR    R7,R7             AFTER THE SECOND 4 NIBBLES, WE QUIT.
         SLL   R6,4              R6 WILL CONTAIN BOTH A BIT MAP
         LA    R6,5(R6)               AND THE REGISTER NUMBERS IN
         LA    R9,4                   WHICH THE DIGITS ARE HELD.
         B     RESLOOP
*
RESOUT   BR    R3
*
*
*
RESTODEC CVD   R15,RESDWD               PACK IT
         L     R15,RESDWD+4             BACK INTO REGISTER
         SRL   R15,4                    SHIFT OFF SIGN
         B     RESTOHEX                 CONTINUE AS THOUGH IT WAS HEX
*
         EJECT
         USING DAPL,R1
DAIRERR  L     R8,DAPLDAPB          ASSUME R1 STILL POINTS TO DAPL
         DROP  R1
         USING DAPB08,R8            WE'LL USE THE '08 PARAMETER BLOCK
*                                        DSECT, BUT ACTUALLY HANDLE
*                                        MANY BLOCKS.
         OI    RCDE+3,X'0C'         INDICATE BAD OUTPUT            SFI
         MVC   DAMSGWK(L'DAMSGMSK),DAMSGMSK  INITIALIZE ERROR MESSAGE
*                                                   WORK AREA.
         ST    R3,DAIRR3            SAVE RETURN REGISTER
         ST    R15,DAIR15          SAVE INPUT ARGUMENT
*
         XC    ECB,ECB              ZERO THE EVENT CONTROL BLOCK
         LA    R0,STKLEN            LENGTH OF SP78 AREA
         ICM   R0,B'1000',=AL1(78)  INDICATE SUBPOOL
         GETMAIN R,LV=(0)
*
         LR    R2,R1             WE SHARE SP78 WITH THE TERMINAL
         USING LSD,R2                MONITOR, SO IT WON'T GO AWAY
         XC    LSD(STKLEN),LSD       WHEN WE TERMINATE.
*
         LA    R4,INSTGLST       ADDR OF COMMANDS TO BE STACKED
         LA    R5,32             LENGTH OF A COMMAND
         SLL   R5,16                  IN LEFT HALFWORD
         LR    R6,R4             ADDR OF FIRST COMMAND TO BE STACKED
         STM   R4,R6,LSD         INITIALIZE LIST SOURCE DESCRIPTOR
         MVC   INSTGLST(INSTGL),INSTGMSK    INITIALIZE IN-STORAGE LIST
         ST    R2,IOPLIOPB       COMPLETE PARAMETER CHAIN FROM R1
*
*
         L     R15,DAIR15              GET DAIR RC BACK
         BAL   R3,RESTODEC              MAKE IT VISIBLE
         LA    R9,DAIRR15             FOR EX
         BAL   R3,STCMST             PUT IT INTO MESSAGE
         LA    R9,INSTGLST+L'INSTDAIR       AND INTO STACK COMMAND
         BAL   R3,STCMMVC(R7)                                      SFI
         MVC   LSDTOTLN(2),=H'96'       LENGTH OF THREE ENTRIES
*
         L     R15,DA08CD               ENTRY CODE AND FLAGS
         BAL   R3,RESTOHEX
         STH   R4,STCMFULL      THEY GO INTO MESSAGE WITHOUT       SFI
         MVC   DAIRNTRY(2),STCMFULL                                SFI
         STH   R5,STCMFULL       ZERO SUPPRESSION                  SFI
         MVC   DAIRFLG(2),STCMFULL                                 SFI
*
         LH    R15,DA08DARC             DAIR RETURN CODE
         BAL   R3,RESTOHEX
         LA    R9,DAIRDARC
         BAL   R3,STCMST                                           SFI
         LA    R9,INSTGLST+32+L'INSTDARC
         BAL   R3,STCMMVC(R7)                                      SFI
*
         LH    R15,DA08CTRC             CATALOG RETURN CODE
         BAL   R3,RESTODEC              CONVERT TO DECIMAL
         LA    R9,DAIRCTRC              CTLG RETURN CODE
         BAL   R3,STCMST                                           SFI
         LA    R9,INSTGLST+64+L'INSTCTRC     AND INTO STACK COMMAND
         BAL   R3,STCMMVC(R7)                                      SFI
*
         SR    R15,R15              CHECK TO SEE IF RC'S ARE THERE.
         CH    R15,DA08DARC            IS THERE A DARC RETURN CODE?
         BNE   DAIRCKCL                   YES - LET IT ALONE
         MVC   INSTGLST+32(32),INSTGLST+64  NO  - SQUEEZE EMPTY ENTRY
         MVC   LSDTOTLN(2),=H'64'              AND CUT TO LENGTH
*
DAIRCKCL CH    R15,DA08CTRC            IS THERE A CATALOG RC
         BNE   DAIRSTK                    YES - LET IT ALONE
         LH    R15,LSDTOTLN               NO  - CUT IT OFF
         SH    R15,=H'32'
         STH   R15,LSDTOTLN
*
DAIRSTK  STACK PARM=DAIRSTKL,ECB=ECB,STORAGE=(LSD,SOURCE),        MMMMMM
               MF=(E,IOPL)
*
*
         LA    R0,DAMSGLEN         LGTH OF MSG
         LA    R1,DAMSGWK          ADDR OF MSG
         TPUT  (R1),(R0),R
*
*
         L     R3,DAIRR3               RETURN ADDRESS
         BR    R3
*
STCMST   SRDL  R6,4          SHIFT LENGHT MASK OUT OF R6 TO R7     SFI
         SLL   R6,4          SHIFT BACK TO SET UP REG FOR STORE    SFI
         EX    R6,STCMSTOR      STORE DATA                         SFI
*        ST    0,STCMFULL    STORE THE INDICATED REGISTER          SFI
         SRL   R7,28         SHIFT LENGTH CODE TO LOW ORDER BYTE   SFI
         STC   R7,STCMMASK    STORE MASK BYTE                      SFI
         TR    STCMMASK,STCMTRAN   TRANSLATE TO GET BRANCH OFFSET  SFI
         IC    R7,STCMMASK   RE-LOAD FOR USE IN INDEX REGISTER     SFI
         B     STCMMVC(R7)    BRANCH TO CORRECT MOMVC INSTRUCTION  SFI
* THIS CODE IS USED TO MOVE CORRECT BYTES FOR STCM REPLACEMENT     SFI
STCMMVC  MVC   0(4,R9),STCMFULL                                    SFI
         BR    R3                RETURN                            SFI
         MVC   0(3,R9),STCMFULL+1                                  SFI
         BR    R3                                                  SFI
         MVC   0(2,R9),STCMFULL+2                                  SFI
         BR    R3                                                  SFI
         MVC   0(1,R9),STCMFULL+3                                  SFI
         BR    R3                                                  SFI
STCMTRAN DC    X'06181010080808080000000000000000'                 SFI
STCMSTOR ST    0,STCMFULL    STORE COMMAND TO BE EXECUTED          SFI
         EJECT
         USING IKJPARMD,R10
*
DSNFMT   LA    R8,DA08AREA             MAKE DAIR WORK AREAS
         LA    R9,DA18AREA                 ADDRESSABLE
         LA    R4,DA00AREA                 ADDRESSABLE
         USING DAPB00,R4
         USING DAPB08,R8
         USING DAPB18,R9
*
         MVI   DA08CD+1,X'08'          FILLING OUT DAIR PARAMETER AREAS
         MVI   DA18CD+1,X'18'          ENTRY CODES
*
         L     R7,PARDSN               POINTER TO DSN
         LH    R6,PARDSN+4             LENGTH OF DSN
         STH   R6,DSNBUF               PASS LENGTH TO DAIR
         BCTR  R6,0                    DECREMENT FOR EXECUTE
         EX    R6,DSNMOVE              MOVE DSN TO BUFFER
         EX    R6,DSNMOVE2             PUT DSN IN FINAL MSG
         B     DSNMOVE+6               JUMP EX 'ED MOVE
DSNMOVE  MVC   DSNBUF+2(0),0(R7)     PUT DSN INTO DAIR FORMAT
DSNMOVE2 MVC   FINDSN(0),0(R7)         DSN INTO FINAL MSG
*
         LA    R6,DSNBUF               ADDR OF DSN BUFFER FOR DAIR
         ST    R6,DA00PDSN                 PASS TO FIND
         ST    R6,DA08PDSN                 PASS TO ALLOCATE
*
         TM    PARDSN+6,B'01000000'    IS THE DSN IN QUOTES
         BO    DSNDAPL                     YES - DON'T SET USERID FLAG
         OI    DA00CTL,B'00100000'         NO  - DAIR MUST DO USERID
         OI    DA08CTL,B'00100000'
*
*
*              FORMAT DAIR PARMMETER BLOCK
*
DSNDAPL  LA    R6,XDAPL
         USING DAPL,R6
         MVC   DAPLUPT(12),PPLAREA    UPT, ECT, & ECB ARE FROM PARSE
*                                          PARAMETER LIST
         LA    R5,DAPLPSCB            TARGET FIELD
         EXTRACT (R5),'S',FIELDS=(PSB)   PROTECTED STEP CONTROI BLOCK
*
         BR    R3
         DROP  R4
         DROP  R6
         DROP  R8
         DROP  R9
         EJECT
*
*                            * * *  WORKING STORAGE * * *
*
WKPOINTR  DC   F'0'
*
PSALL0   DC    C'ALL',XL5'0'
*
LINETAB  DC    X'500A141E28323C46505A'
*
TABLEN   DC    F'32000'           TABLE LENGTH IN BYTES            SFI
*
PARSMSG  DC    C'INVALID PARAMETERS SPECIFIED. PLEASE TRY AGAIN.'  SFI
*
DAIRMSG  DC    C'DAIR ERROR.'                                      SFI
*
PARTMSG  DC    C'IS NOT A PDS'                                     SFI
*
OPENMSG  DC    C'-  UNSUCCESSFUL OPEN.'                            SFI
*
MSGNOCOR DC    C'INSUFFIECENT STORAGE TO SORT ALIASES. OUTPUT TRUNCATEDX
               .'
MSGNOTCT DC    CL80'DATA SET'
*
MSGNOTPS DC    C'IS NOT SEQUENTIAL, NOTHING OUTPUT TO DATA SET'     JFS
*
INMESS   DC    CL80'INPUT DATA SET'                                SFI
*
OUTMESS   DC    CL80'OUTPUT DATA SET'                              SFI
OUTMASK  DC    C'USING MASK  ''            '                       SFI
FINAL    DC    X'402020202121'
          DC    C'  MEMBERS FOUND IN DATA SET   '
FINDSN   DC    CL44' '
LFINAL   EQU   *-FINAL
*
PRSPACE  DC    A(1680)
         DC    A(20)
         DC    A(10)
*
*
*
CLOSEL   CLOSE (DCB,,PRDCB),MF=L
*
ONETOF   DC    C'0123456789ABCDEF'
*
DAMSGMSK DC    C'DAIR R15=0    DAIR ENTRY=0    DAIR FLG=0    DAIRDARC=0X
                   DAIRCTRC=0            '
*
INSTGMSK DS    0C
INSTDAIR DC    C'HELP ERROR OP(DAIR'
         DC    CL(32-L'INSTDAIR)' '
INSTDARC DC    C'HELP ERROR OP('
         DC    CL(32-L'INSTDARC)' '
INSTCTRC DC    C'HELP ERROR OP(CATALOG'
         DC    CL(32-L'INSTCTRC)' '
INSTGL   EQU   *-INSTGMSK
PRQALTB  DC    AL1(3),C'.ASM'
         DC    AL1(3),C'.PLI'
         DC    AL1(4),C'.DATA'
         DC    AL1(4),C'.CNTL'
         DC    AL1(4),C'.FORT'
         DC    AL1(5),C'.CLIST'
         DC    AL1(4),C'.SPIT'                                     SFI
PRQALND  DC    AL1(5),C'.COBOL'
*
*
         LTORG
*        PRINT NOGEN                                                JFS
         EJECT
PARMDSN  IKJPARM
PARDSN   IKJPOSIT DSNAME,PROMPT='DSNAME OF SUBJECT PDS'
PARALIAS IKJKEYWD
         IKJNAME   'ALIAS'
         IKJNAME   'NOALIAS'
PARPARM  IKJKEYWD
         IKJNAME  'PREFIX',SUBFLD=PARPFX
         IKJNAME  'MASK',SUBFLD=PARPFX                             SFI
PARLINE  IKJKEYWD
         IKJNAME  'LINESIZE',SUBFLD=PARLN                          SFI
PARPNT   IKJKEYWD
         IKJNAME  'DA',SUBFLD=PARDS                                SFI
         IKJNAME 'DS',SUBFLD=PARDS                                 SFI
PARPFX   IKJSUBF
PARPFXD  IKJIDENT  'STRING',MAXLNTH=8,FIRST=ANY,OTHER=ANY,             X
               PROMPT='MASK'
PARLN    IKJSUBF
PARLND   IKJIDENT 'NUMBER',MAXLNTH=2,FIRST=NUMERIC,OTHER=NUMERIC,      X
               PROMPT='LINESIZE'
PARDS    IKJSUBF
PARPND   IKJPOSIT  DSTHING,PROMPT='DSNAME YOU WISH TO RECIEVE OUTPUT'
         IKJENDP
*
DCB      DCB   DSORG=PS,RECFM=U,BLKSIZE=256,MACRF=(R),EODAD=EODAD
         EJECT
PRDCB    DCB   DSORG=PS,RECFM=FB,BLKSIZE=1680,MACRF=(PM),              M
               LRECL=80
*
         EJECT
*        ADDITIONAL WORK AREAS
*
WKA      DSECT
SAVEAREA DS    18F
*
RCDE     DS    F             RETURN CODE FOR PROGAM
DONTFREE DS    F             SWITCH TO PREVENT FREEING A PREALLOCATED
*                                 DATASET
CHAINR3  DS    F
CHAINR5  DS    F
FORMR3   DS    F
FORMR5   DS    F
*
*
*
XPPL     DS    7F            * RESERVE SEVEN WORDS FOR PARSE    *
*                            *    PARAMETER  LIST               *
CBUF     DS    CL80          * COMMAND BUFFER                   *
ECB      DS    F             * EVENT CONTROL BLOCK FOR PARSE    *
ANS      DS    F             * POINTER TO PARAMETER DESCRIPTOR  *
*                            *    LIST                          *
PPLAREA  DS    7F
DA00AREA DS     5F
DA04AREA DS     5F
*
DA08AREA DS    CL84
         DS    0F
DA18AREA DS    CL40
DSNBUF   DS    H
         DS    CL44
*
XDAPL    DS    5F                      RESERVE 5 WDS FOR DAIR PARMMETER
*                                          BLOCK
*
PSAND    DS    CL8                     AND THE MEMBER NAME WITH PSAND,
PSXC     DS    CL8                         SO IT WILL LOOK LIKE PSXC
PSARGU   DS    CL8                         FOR AN EQUAL COMPARE
*
LINELENG DS    H
*
DIRDATA  DS    CL256
PUTLINE  DS    CL120
*
HITCOUNT DS    D                                                   SFI
LINECNT  DS    PL5
*
PRINTSW  DS    XL1
*
         DS    0H
PRPNDSN  DS    CL46
PRSTR3   DS    F
*
IOPL     DS    0F
IOPLUPT  DS    F
IOPLECT  DS    F
IOPLECB  DS    F
IOPLIOPB DS    F
*
DAIRSTKL DS    D           SAME AS STACK MF=L
*
*
DAIRR3   DS    F
DAIR15   DS    F
*
DAMSGWK  DS    0C
         DS    9C
DAIRR15  DS    5C
         DS    11C
DAIRNTRY DS    5C
         DS    9C
DAIRFLG  DS    5C
         DS    9C
DAIRDARC DS    5C
         DS    9C
DAIRCTRC DS    5C
DAMSGLEN EQU   *-DAMSGWK
STCMMASK DS    C
STCMFULL DS    F
SAVPARMD DS    F                  AREA TO SAVE --> PARAMETER LIST  SFI
*
RESDWD   DS    D
WKLEN    EQU   *-SAVEAREA                                          SFI
CHANTOP  DS    6000F              THE TABLE                        SFI
         EJECT
*                            * * *  DSECTS  * * *
*
*        PRINT GEN
         IKJPPL
       EJECT
         IKJDAP00        SEARCH
       EJECT
         IKJDAP04        SEARCH
         EJECT
         IKJDAP08        ALLOCATE
         EJECT
         IKJDAP18        DEALLOCATE
         EJECT
         IKJDAPL         DAIR PARAMETER BLOCK
         EJECT
         IKJCPPL
         EJECT
*
*
*        THIS IS THE LIST SOURCE DESCRIPTOR, AND THE IN-STORAGE
*        LIST THAT ARE PASSED TO STACK. THEY GO INTO SP78, SO
*        THEY ARE NOT FREED WHEN SHOWDIR ENDS.
*
LSD      DSECT
LSDADATA DS    F
LSDRCLEN DS    H
LSDTOTLN DS    H
LSDANEXT DS    F
LSDRSVRD DS    F
*
*
*
INSTGLST DS    4CL32
*
STKLEN   EQU   *-LSD
         EJECT
*        PRINT NOGEN
         DCBD
         EJECT
*./ ADD   NAME=SHOWDIR
*./ NUMBER NEW1=10,INCR=10
*./ ALIAS   NAME=LM
*)F FUNCTION -
*  THE SHOWDIR COMMAND IS USED TO PRINT OUT PART OR ALL OF
*  THE DIRECTORY OF A PARTITIONED DATA SET.
*  OPTIONALLY, IT WILL PRODUCE A DISK DATA SET SUITABLE
*  FOR MANIPULATION WITH EDIT.
*  SHOWDIR GENERATES A RETURN CODE OF ZERO IF SUCCESSFUL.
*  SHOULD NO MEMBERS MEET THE REQUIREMENTS FOR LISTING (SEE MASK
*  PARAMETER) A RETURN CODE OF 4 IS RETURNED. THE FOLLOWING
*  RETURN CODES INDICATE UNSUCCESSFUL COMPLETION OF SHOWDIR.
*      08 - OUTPUT INCOMPLETE OR OUTPUT DATA SET NOT CREATED.
*      12 - INPUT DATA SET UNREADABLE OR NOT PARTITIONED.
*      16 - PARSE ERROR PROCESSING USER'S PARAMETERS.
*  WHENEVER A NON-ZERO RETURN CODE IS GENERATED, AN APPROPRIATE
*  MESSAGE WILL BE DISPLAYED AT THE USER'S TERMINAL.
*)X SYNTAX  -
*         SHOWDIR  'DSNAME'   LINESIZE('SIZE')    MASK('MASK')
*                  DA('DSN')  ALIAS/NOALIAS
*  REQUIRED - DSNAME
*  DEFAULTS - LINESIZE=7    MASK=ALL        ALIAS
*  ALIAS    - LM
*)O OPERANDS -
*   'DSNAME'         - THE PARTITIONED DATA SET FOR WHICH THE DIRECTORY
*                      LISTING IS REQUIRED.
*))LINESIZE('SIZE') - THE NUMBER OF MEMBER NAMES TO BE DISPLAYED
*                      ON A SINGLE LINE. MAXIMUM IS 9.
*                      IF THE "DA" OPTION IS TAKEN, THE FIRST
*                      MEMBER NAME ON EACH LINE WILL BEGIN IN
*                      POSITION 1.
*))MASK('MASK')   - AN OPTIONAL MASK OR PREFIX  USED AS A SEARCH MASK.
*               UP TO EIGHT CHARACTERS ON WHICH TO COMPARE
*               FOR EQUAL BEFORE PRINTING. AN ASTERISK (*), IN ANY
*               POSITION MAKES IT A NON-COMPARE POSITION.
*               EXAMPLES:
*
*                    MASK(BPS)    WILL RETURN ANY MEMBER NAME
*                                   THAT BEGINS WITH "BPS".
*
*                    PRE(*****XYS)  WILL RETURN ANY MEMBER NAME THAT
*                                   ENDS IN "XYZ" IN COLUMNS 6-8.
*
*                    M(BPS****7)   WILL RETURN ANY MEMBER NAME THAT
*                                   BEGINS "BPS" AND ENDS IN A "7".
*
*))PREFIX('MASK')    - SAME AS MASK PARAMETER
*
*))DA('DSN')      WILL RETURN THE LIST OF MEMBER NAMES IN
*               A SEQUENTIAL DATA SET NAMED, "USERID.(DSN).DATA".
*               A DSNAME IN QUOTES WILL BE RESPECTED, AS WILL A VALID
*               QUALIFIER (ASM,CLIST,CNTL,COBOL,DATA,FORT,PLI OR SPIT).
*               THE DATA SET WILL HAVE SEQUENCE NUMBERS IN EDIT FORMAT.
*               N.B. - DA(*) WILL BE TREATED AS IF THE DA
*               PARAMETER WAS NOT ENTERED AT ALL (OUTPUT WILL GO TO
*               THE USER'S TERMINAL').
*
*))DS('DSN')   SAME AS DA PARAMETER
*
*))ALIAS/NOALIAS    - "NOALIAS" WILL SUPPRESS THE SPECIAL FORMATTING
*               GIVEN TO ALIAS NAMES. "ALIAS" IS THE DEFAULT.
*               NOTE -- AN "*ORPHAN*" IS AN ALIAS NAME THAT
*               MATCHES NO MAIN MEMBER NAME.
*               A SPURIOUS *ORPHAN* WILL BE GENERATED WHEN
*               AN ALIAS MEMBER NAME MATCHES THE SEARCH MASK,
*               BUT THE MAIN NAME DOES NOT. ALSO, AN ALIAS WILL NOT
*               BE SHOWN IF IT DOES NOT MATCH THE SEARCH MASK
*               EVEN THOUGH THE MAIN MEMBER NAME MATCHES AND
*               IS DISPLAYED.
         END
