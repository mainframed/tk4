         TITLE 'STACK CP - PUT OUTPUT OF TSO CMD TO A FILE'
STACK    ENTERR LEVEL=V1M3
         LR    R11,R1                   R11 -> CPPL
         USING CPPL,R11
         EJECT
**********************************************************************
*       MAINLINE PROCESSING CONTROL ROUTINE:                         *
**********************************************************************
*
*              FIRST STEP IS EXTRACT OUR OPERANDS FROM COMMAND:
*
B4       BAL   R14,PB                   FIX BUFFER
         LTR   R15,R15                  OK?
         BNZ   TERMWERR                 NO
*
*              NOW GET SET UP
*
         BAL   R14,STACKME              STACK AND GET CMD
         LTR   R15,R15                  OK?
         BNZ   TERMWERR                 NO
*
*              DO THE CMD
*
         BAL   R14,ATTACHME             CALL HIM
*        LTR   R15,R15                  OK?
*        BNZ   TERM                     NO
*
*              REMOVE FROM STACK ?:
*
         BAL   R14,UNSTACKM             REMOVE TOP IF WE ADDED
         EJECT
         L     R15,AECB                 GET CMD RC IF NORMAL
         SPACE 3
TERM     LEAVER
         SPACE 3
TERMWERR WTP   'ERROR HAS OCCURED IN STACK CMD'
         B     TERM
         EJECT
*
*        PB -  PROCESS BUFFER TO REMOVE AND FLAG OUR OPERANDS
*
PB       ST    R14,L1LS
*
*       FIRST BUILD KOMAND-PROCESSING PARAMETER LIST:
*
BPI      XC    KPPL(40),KPPL            CLEAR BUFFER PROC PARMLIST
         L     R10,0(,R11)              R10 -> CBUF
         ST    R10,CBUFPTR              BUFFER PTR
         LA    R10,OPLIST               OPERAND LIST
         ST    R10,OPLSTPTR             PASS IT
         LA    R9,FLAG                  FLAG AREA
         ST    R9,FLAGPTR               PASS IT
         LA    R8,UNKNEX                EXIT FOR OPS NOT IN MY LIST
         ST    R8,UNKNEXIT              PASS IT
         LA    R6,L1LS                  WORK AREA FOR EXIT
         ST    R6,EXITPARM              PASS IT TO THE EXIT
         LA    R7,FASTAREA              R7 -> OPLEN AREA
         ST    R7,WORKPASS              LENGTH PTR RETURN AREA
         XC    OPFLAG,OPFLAG            CLEAR OPERANDS PRESENT FLAG
*
*       THEN CALL KMDPARS (PARSE SUBROUTINE):
*
         LA    R1,KPPL                  R1 -> BUFFER PROC PARMLIST
DOPO     CALL  KMDPARS                  PROCESS AN OPERAND
         LTR   R15,R15                  ANYTHING FOUND?
         BNZ   BPT                      YES
         OI    OPFLAG,X'FF'
*
*       SAY DONE AND EXIT:
*
BPT      SLR   R15,R15                  RC=0
         L     R14,L1LS
         BR    R14
*
*   THIS EXIT SETS A FLAG IF ANY OPERANDS WHICH ARE NOT KNOWN ARE HERE:
*
UNKNEX   L     R1,0(,R1)                R1 -> L1LS
         USING L1LS,R1
         OI    UNKNFLAG,X'FF'           SET IT ON
         SLR   R15,R15                  RC = 0  SAY OK TO CONTINUE
         BR    R14                      RETURN TO KMDPARS
         DROP  R1
         EJECT
*
*   THIS EXIT SAVES THE DDNAMES:
*
DDINS    LA    R15,12(,R15)
DDOUTS   LA    R15,12(,R15)
TASKSV   LA    R15,10(,R15)
DDSENT   STM   R14,R12,12(R13)          SAVE REGS
         BALR  R11,R0                   R11->DDSTART
         USING DDSTART,R11
DDSTART  LA    R11,0(,R11)              CLR HI BYTE
         SR    R15,R11                  R15 = 16,8,OR 0
         L     R10,0(,R1)               R10-> L1LS
         USING L1LS,R10
         L     R9,4(,R1)                R9->BPPL
         USING BPPL,R9
         L     R8,SUBPTR                R8->SUB FLD
         LTR   R8,R8                    ANY?
         BZ    TRUBELL                  NO
         L     R7,SUBLENPT              R7->SUBFLD LEN
         LH    R6,0(R7)                 R6=SUBLEN
         SH    R6,=H'3'                 -3 FOR PARENS AND EX
         MVC   DDSAVE(8),=CL8' '        BLANK FILL
RMVC     MVC   DDSAVE(0),1(R8)          EX ED MVC
         EX    R6,RMVC                  SAVE IT
         LA    R5,TASKDD(R15)           PT TO CORRECT AREA FOR THIS GUY
         MVC   0(8,R5),DDSAVE           MOVE HIM TO HIS SLOT
TRUBELL  LM    R14,R12,12(R13)          RESTORE REGS
         SLR   R15,R15                  RC = 0  SAY OK TO CONTINUE
         BR    R14                      RETURN TO KMDPARS
         DROP  R11
         DROP  R10
         DROP  R9
         USING CPPL,R11
         EJECT
*
*   THIS ROUTINE STACKS THE DATASETS AND GETS THE CMD:
*
STACKME  ST    R14,L1LS
*
         TM    FLAG,X'80'               DDIN PRESENT?
         BO    STCK                     YES->DOIT
GETPRE   BAL   R14,GETL                 NO-> GET THE CMD FIRST
         LTR   R15,R15            OK?
         BNZ   STEX               NO
         SPACE
STCK     TM    FLAG,X'C0'               ANY DD TO STACK?
         BZ    GETPOST                  NO
STACKIT  BAL   R14,ADDIT                YES->DOIT
         LTR   R15,R15            OK?
         BNZ   STEX               NO
         SPACE
GETPOST  TM    FLAG,X'80'               DDIN PRES?
         BNO   PUTCK                    NO->WE ALREADY DID THIS
         BAL   R14,GETL                 YES-> GET CMD
         LTR   R15,R15            OK?
         BNZ   STEX               NO
         SPACE
PUTCK    TM    FLAG,X'10'               LIST?
         BNO   STEX
         BAL   R14,PUTL                 YES-> ECHO CMD
         SPACE
STEX     L     R14,L1LS
         BR    R14
         EJECT
*
*   THIS ROUTINE STACKS THE DDNAME:
*
ADDIT    ST    R14,L2LS
*
         L     R7,CPPLUPT               R7->UPT
         L     R6,CPPLECT               R6->ECT
         TM    FLAG,X'80'               DDIN PRES?
         BZ    SE2                      NO
         SPACE 2
SE       STACK PARM=STPB,UPT=(R7),ECT=(R6),ECB=ECB,                    X
               DATASET=(OUTDD=DDOUT,CNTL,SEQ,INDD=DDIN),MF=(E,IOPL)
         SPACE
         B     ADDX
         EJECT
*
SE2      STACK PARM=STPB,UPT=(R7),ECT=(R6),ECB=ECB,                    X
               DATASET=(OUTDD=DDOUT,CNTL,SEQ),                         X
               MF=(E,IOPL)
         SPACE 3
ADDX     LTR   R15,R15            STACK OK?
         BNZ   AXT                NO
         SPACE
         OI    28(R6),X'02'             PRETEND BACKGROUND
         SPACE
         L     R5,4(,R6)          R5->IOSRL
         MVC   SAVELEM(4),4(R5)   SAVE BOTTOM OF STACK PTR
         MVC   4(4,R5),0(R5)      PRETEND ONLY ONE ELEMENT IN STACK
*              (PREVENTS SUBTASK FROM TRYING TO DELETE IT)
         SPACE
AXT      L     R14,L2LS
         BR    R14
         EJECT
GETL     ST    R14,L2LS
         L     R7,CPPLUPT               R7->UPT
         L     R6,CPPLECT               R6->ECT
         SPACE 3
         GETLINE  PARM=GTPB,UPT=(R7),ECT=(R6),ECB=ECB,                 X
               INPUT=(ISTACK,LOGICAL),TERMGET=(EDIT,WAIT),MF=(E,IOPL)
         SPACE 3
         C     R15,=F'4'          RC=4
         BNE   GETX               NO->LEAVE IT
         SLR   R15,R15            4 SAME AS 0
         SPACE 3
GETX     L     R14,L2LS
         BR    R14
         EJECT
PUTL     ST    R14,L2LS
         L     R5,GTPB+4
         SPACE 3
         PUTLINE  PARM=PUTLIST,UPT=(R7),ECT=(R6),ECB=ECB,              X
               OUTPUT=((R5),TERM,SINGLE,DATA),MF=(E,IOPL)
         SPACE 3
PUTX     L     R14,L2LS
         BR    R14
         EJECT
*
*        THIS  ROUTINE ATTACHES THE CMD:
*
ATTACHME ST    R14,L1LS
         SPACE 2
         BAL   R14,SCAN                 SCAN FOR A CMD NAME
         LTR   R15,R15                  OK?
         BNZ   AEX                      NO
*
*              CALL APPROPRIATE ATTACH SUBRTN:
*
         TM    FLAG,X'20'               TASKDD PRES?
         BNO   NTL                      NO
         BAL   R14,AWTL                 YES->ATTACH WITH TASKLIB
         B     AEX                      GOON
         SPACE
NTL      BAL   R14,AWNTL                ATTACH W/NO TASKLIB
         SPACE 2
AEX      L     R14,L1LS
         BR    R14
         EJECT
SCAN     ST    R14,L2LS
         LA    R10,CSPLA                R10->CSPL
         USING CSPL,R10
         LA    R9,CSOAA                 R9->CSOA
         USING CSOA,R9
         XC    CSPLA(9),CSPLA
         MVC   CSPLUPT,CPPLUPT
         MVC   CSPLECT,CPPLECT
         LA    R8,ECB             R8->ECB
         ST    R8,CSPLECB
         LA    R7,CSOAF           R7->CSOAF
         ST    R7,CSPLFLG
         ST    R9,CSPLOA
         L     R1,GTPB+4                R1->CBUF
         ST    R1,CSPLCBUF              PASS CBUF TO SCAN
         CLI   4(R1),C'0'               FIRST CHAR < 0 ?
         BL    SCANIT                   YES->NO LINE NUMBER
         MVC   4(8,R1),=CL8' '          NO->KILL LINE NUMBER
         SPACE
SCANIT   LR    R1,R10                   R1->CSPL
         CALLTSSR EP=IKJSCAN
         LTR   R15,R15
         BNZ   SCANEX
         EJECT
         TM    CSOAFLG,X'C0'      ANY?
         BNZ   GCN                YES
SCANERR  LA    R15,33             NO->RC=33
         B     SCANEX
GCN      L     R6,CSOACNM               R6->CMD NAME
         LTR   R6,R6                    OK?
         BZ    SCANERR            YES
GCL      LH    R5,CSOALNM               R5=CMD NAME LEN
         LTR   R5,R5              R5>0?
         BNP   SCANERR            NO
         BCTR  R5,R0                    R5=R5-1 FOR EX
         MVC   EPNAME,=CL8' '           CLEAR EPNAME AREA
RM       MVC   EPNAME(0),0(R6)          EX'ED CMDNAME SAVE
         EX    R5,RM                    DOIT
         SPACE
         L     R4,CPPLECT         R4->ECT
         USING ECT,R4
         MVC   ECTPCMD,=CL8' '          CLEAR ECT NAME AREA
CNS      MVC   ECTPCMD(0),0(R6)         EX'ED CMDNAME SAVE
         EX    R5,CNS                   DOIT
         SPACE
         NI    ECTSWS,255-ECTNOPD SAY OPERANDS
         CLI   CSOAFLG,X'80'      PRESENT?
         BE    SCANEX             YES
         OI    ECTSWS,ECTNOPD     SAY NO OPERANDS
         DROP  R4
         SPACE
SCANEX   L     R14,L2LS
         BR    R14
         EJECT
AWNTL    ST    R14,L2LS
         SPACE 2
AWNTL2   MVC   CPPLCBUF,GTPB+4          PASS CBUF
         LA    R1,CPPL                  PASS CPPL
         SPACE
         XC    ATTACHL(60),ATTACHL
         ATTACH EPLOC=EPNAME,ECB=AECB,SHSPV=78,SF=(E,ATTACHL)
ACFIN    LTR   R1,R1                    ANY TCB?
         BZ    AWNTLX                   NO->FASTEXIT
         ST    R1,TCBADD
         SPACE 2
         XC    AECB,AECB                CLEAR ECB
         WAIT  ECB=AECB                 LET HIM RUN THEN
         SPACE 2
         DETACH TCBADD                  REMOVE DEAD TCB
         SPACE 2
AWNTLX   L     R14,L2LS
         BR    R14
         EJECT
AWTL     ST    R14,L2LS
         SPACE
         MVC   DCBL(96),DCBP            INIT DCB
         MVC   DCBL+40(8),TASKDD       GET DDNAME
         MVC   OPENL(4),=X'80000000'    INIT OPEN
         OPEN  (DCBL,INPUT),MF=(E,OPENL)  OPEN THE TASKLIB
         TM    DCBL+48,X'10'            DID IT OPEN?
         BZ    AWNTL2                   NO->DON'T USE IT THEN
         MVC   CPPLCBUF,GTPB+4          PASS CBUF
         LA    R1,CPPL                  PASS CPPL
         SPACE 2
         XC    ATTACHL(60),ATTACHL
         ATTACH EPLOC=EPNAME,ECB=AECB,SHSPV=78,DCB=DCBL,               X
               TASKLIB=DCBL,SF=(E,ATTACHL)
         SPACE
         B     ACFIN                    REST IS THE SAME
         EJECT
*
*        THIS  ROUTINE UNSTACKS WHATEVER WE STACKED:
*
UNSTACKM ST    R14,L1LS
*
         TM    FLAG,X'C0'               ANYTHING STACKED?
         BZR   R14                      NO->EXIT FAST
         SPACE 2
         L     R6,CPPLECT         R6->ECT
         L     R5,4(,R6)          R5->IOSRL
         MVC   4(4,R5),SAVELEM    RESTORE TRUE STACK BOTTOM FIRST
         SPACE 2
         BAL   R14,DELIT                REMOVE TOP ENTRY
         SPACE 3
USX      L     R14,L1LS
         BR    R14
         EJECT
*
*        THIS  ROUTINE REMOVES THE TOP ELEMENT ON THE STACK:
*
DELIT    ST    R14,L2LS
*
         L     R7,CPPLUPT               R7->UPT
         L     R6,CPPLECT               R6->ECT
*
SED      STACK PARM=STPB,UPT=(R7),ECT=(R6),ECB=ECB,                    X
               DELETE=TOP,MF=(E,IOPL)
         SPACE 3
         NI    28(R6),X'FD'             RETURN TO FOREGROUND
         SPACE 3
         L     R14,L2LS
         BR    R14
         EJECT
STATWORK EQU   *
*
*              STACK DDIN() DDOUT() TASKLIB() LIST
*
OPLIST   DC    F'0'                     LIST OF KNOWN OPERANDS:
         DC    A(OPER1)
         DC    A(OPER2)
         DC    A(OPER3)
         DC    A(OPER4)
         DC    F'0'
         DC    F'0'
         SPACE
OPER1    DS    0F
         DC    X'8000'                  BYTE1=FLAG MASK,BYTE2=FLAG BYTE
         DC    X'8000'                  OPTIONS  (X'80'=TAKE EXIT)
*                                       OPTIONS  (X'40'=BLANK OUT)
         DC    A(DDINS)                 EXIT ADDR
         DC    H'4'                     OPERAND LENGTH
DDI      DC    CL8'DDIN'                OPERAND NAME
         SPACE
OPER2    DS    0F
         DC    X'4000'
         DC    X'8000'                  OPTIONS  (X'80'=TAKE EXIT)
*                                       OPTIONS  (X'40'=BLANK OUT)
         DC    A(DDOUTS)                EXIT ADDR
         DC    H'5'
DDO      DC    CL8'DDOUT'
         SPACE
OPER3    DS    0F
         DC    X'2000'
         DC    X'8000'                  OPTIONS  (X'80'=TAKE EXIT)
*                                       OPTIONS  (X'40'=BLANK OUT)
         DC    A(TASKSV)                EXIT ADDR
         DC    H'7'
TASKLB   DC    CL8'TASKLIB'
         SPACE
OPER4    DS    0F
         DC    X'1000'
         DC    X'0000'                  OPTIONS  (X'80'=TAKE EXIT)
*                                       OPTIONS  (X'40'=BLANK OUT)
         DC    A(0)                     EXIT ADDR
         DC    H'4'
LIST     DC    CL8'LIST'
         SPACE 3
         LTORG
         DC    80X'00'                  ZAP AREA
         EJECT
DCBP     DCB   DSORG=PO,MACRF=R         PATTERN DCB
         EJECT
WORKAREA DSECT
SAVEAREA DS    18F
L1LS     DS    F
L2LS     DS    F
L3LS     DS    F
L4LS     DS    F
*
FLAG     DS    F
OPFLAG   DS    X
UNKNFLAG DS    X
SAVELEM  DS    F
DDSAVE   DC    CL8' '                   DDN SAVE
TASKDD   DC    CL8' '                   DDN SAVE
DDOUT    DC    CL8' '                   DDN SAVE
DDIN     DC    CL8' '                   DDN SAVE
EPNAME   DC    CL8' '                   EPN SAVE
TCBADD   DC    F'0'
*
*              I/O RTN PARM AREA:
*
IOPL     DS    4F
PUTLIST  PUTLINE  MF=L
*
STPB     STACK MF=L
*
GTPB     GETLINE MF=L
*
ECB      DS    F
AECB     DS    F
*
*              CMD SCAN PARM AREA:
*
CSPLA    DS    6F
CSOAA    DS    2F
CSOAF    DS    F
*
         EJECT
OPENL    OPEN  (DCBL,INPUT),MF=L
         SPACE 3
DCBL     DCB   DSORG=PO,MACRF=R         EXECUTION DCB
         EJECT
ATTACHL  ATTACH EPLOC=EPNAME,ECB=AECB,SHSPV=78,SF=L
         EJECT
         KPPL
FASTAREA DS    XL600                    SOME AREA TO GIVE KMDPARS
*
WORKLEN  EQU   *-WORKAREA
         EJECT
X        DSECT
         BPPL
         EJECT
MCSPL    IKJCSPL
MCSOA    IKJCSOA
         IKJCVT
         IKJCPPL
         IKJECT
         END
