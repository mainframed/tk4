*          DATA SET CBT1089    AT LEVEL 006 AS OF 10/22/80
*PROGRAM DESCRIPTION:
*
*       EXTERNAL REQUIREMENTS: IEFSD095
*                     LIBRARY: SYS1.AOSB0
*
*       SYS1.APVTMACS IS A REQUIRED MACRO LIBRARY.
*             (TO ACCESS MACROS IHADECB AND IHASTOW)
*
*       TO USE THE FACILITIES OF THE BLOCK AND HEADER
*       KEYWORDS, MODULE IEFSD095 MUST BE INCLUDED FROM
*       SYS1.AOSB0 AT LINK EDIT.
*
*       PHRANQUE IS A PTF UTILITY PRIMARILY INTENDED TO PROVIDE
*       A CONVENIENT MEANS OF CREATING COVER LETTERS FROM THE PTF
*       FILE OF A PUT TAPE. ADDITIONAL FEATURES ASSOCIATED WITH
*       COVER LETTER PROCESSING, INTENDED TO ENHANCE ITS
*       USABILITY, MAY BE REQUESTED VIA THE CONTROL DATASET.
*       THESE FEATURES ARE:
*
*             BLOCK PRINT THE PTF NUMBER BEFORE EACH COVER LETTER
*             TO MAKE MICROFICHE COPIES EASIER TO SCAN. (BLOCK)
*
*             START EACH COVER LETTER ON A NEW PAGE. (EJECT)
*
*             CHANGE THE PAGE SIZE. (LINES)
*
*             PROVIDE A LIST OF PTF'S CONTAINED IN THE
*             COVER LETTER LISTING. (PTFLIST)
*
*             PROVIDE A CROSS REFERENCE LIST INDICATING
*             WHICH PTF'S WILL HIT EACH ELEMENT. (XREF)
*
*             PROVIDE A CROSS REFERENCE OF WHICH PTF'S APPLY
*             TO EACH FUNCTION. (FMIDLIST)
*
*             LIST THE COVER LETTERS IN ASSENDING ORDER BY
*             PTF NUMBER. (SORT)
*
*       OTHER FUNCTIONS AVAILABLE ARE:
*
*             CONTROL OVER WHICH PTF'S ARE TO BE PROCESSED.
*             IT IS POSSIBLE TO PROCESS ONLY SPECIFIED
*             PTF'S (INCLUDE) OR TO PROCESS ALL EXCEPT A
*             LIST OF SPECIFIED PTF'S (EXCLUDE).
*
*             OMIT TEXT ELEMENT IF A SOURCE UPDATE ELEMENT
*             WITH THE SAME ELEMENT NAME EXISTS WITHIN A
*             PTF. (NOMOD)
*
*             PRODUCE A COPY OF THE PROCESSED PTF'S AS
*             SPECIFIED IN THE CONTROL DATASET.
*             (IF SORT WAS SPECIFIED, THE COPIED PTF'S
*             WILL BE SORTED; IF NOMOD WAS SPECIFIED,
*             COPIED PTF'S WILL NOT CONTAIN TEXT ELEMENTS
*             FOR WHICH A SOURCE UPDATE EXISTS; AND THE
*             CONTENTS OF THE COPIED OUTPUT WILL BE TAILORED
*             AS SPECIFIED BY ANY INCLUDE OR EXCLUDE LIST
*             PROVIDED)
*
*             MERGE THE PTF'S SELECTED FROM THE PTFIN DATASET
*             INTO AN EXISTING DATASET AS SPECIFIED BY PTFOUT,
*             REPLACE DUPLICATE PTF'S WITH THE LAST COPY EXISTING
*             ON PTFOUT OR WITH A COPY FROM PTFIN IF ONE EXISTS,
*             AND CREATE A COVER LETTER LISTING WHICH REFLECTS
*             THE NEW CONTENTS OF THE PTFOUT DATASET. THIS
*             FUNCTION IS AUTOMATICALLY INVOKED WHEN SORT IS
*             REQUESTED AND A PTFOUT DD STATEMENT IS INCLUDED
*             WHICH DOES NOT SPECIFY A DISPOSITION OF NEW OR
*             MOD. THE OPTION TO UNCONDITIONALLY BYPASS THE
*             MERGE FUNCTION IS AVAILABLE. (NOMERGE) TO AVOID
*             ACCIDENTAL LOSS OF DATA, IF NOMERGE IS SPECIFIED
*             OR IF SORT IS NOT SPECIFIED, A DISPOSITION OF
*             OLD (FOR PTFOUT) WILL BE AUTOMATICALLY CHANGED
*             TO A DISPOSITION OF MOD.
         EJECT
*             PHRANQUE WILL ALSO SEPERATE NON-SMP DATA FROM
*             SMP FORMAT DATA IF THE PTFIN DATASET IS
*             ARRANGED SUCH THAT ALL OF THE NON-SMP DATA
*             IS BEFORE THE SMP FORMAT DATA. (THIS FUNCTION
*             WILL, FOR EXAMPLE, SEPERATE PUTDOC FROM PTF'S
*             OBTAINED IN THE SAME DLS RUN. IT IS NECESSARY TO
*             SPECIFY THAT THE PUTDOC MUST BE TRANSFERRED
*             FIRST.) AS PTFIN IS READ, ALL STATEMENTS PRIOR
*             TO THE FIRST ++ SYSMOD HEADER WILL BE WRITTEN
*             TO THE SYSPUNCH DATASET. THE FIRST ++ SYSMOD
*             HEADER STATEMENT INDICATES THE BEGINNING OF
*             SMP FORMAT DATA AND ALL SUBSEQUENT STATEMENTS
*             ARE CONSIDERED PTF'S.
         EJECT
*DD STATEMENTS:
*
*       SYSIN    =>CONTROL DATASET. SEE KEYWORD PARAMETERS.
*                  LRECL=80,BLKSIZE MUST BE SPECIFIED.IF SYSIN
*                  IS OMITTED OR SPECIFIED AS DUMMY, PROCESSING
*                  WILL CONSIST OF TOTALLY COPYING THE CONTENTS
*                  OF THE PTFIN DATASET, STARTING WITH THE FIRST
*                  ++ SYSMOD HEADER STATEMENT, TO THE PTFOUT
*                  DATASET (IF A PTFOUT DD STATEMENT EXISTS),
*                  ALL RECORDS READ FROM THE PTFIN DATASET PRIOR
*                  TO THE FIRST ++ SYSMOD HEADER STATEMENT WILL
*                  BE COPIED TO THE SYSPUNCH DATASET (IF A
*                  SYSPUNCH DD STATEMENT EXISTS) AND COVER
*                  LETTER INFORMATION WILL BE WRITTEN TO THE
*                  PTFDATA DATASET. DSORG=PS.
*
*       PTFDATA  =>OUTPUT DATASET CONTAINING PTF COVER LETTERS,
*                  AND ALL REQUESTED LISTS. IF A SORT WAS REQUESTED
*                  AND A SYSUT2 DATASET WAS PROVIDED, THE PTFLIST
*                  AND XREF (IF REQUESTED) WILL BE FIRST, FOLLOWED
*                  BY THE PTF COVER LETTERS IN ASSENDING SEQUENCE
*                  BY PTF NUMBER, WITH THE FMIDLIST (IF REQUESTED)
*                  LAST. IF A SORT WAS NOT REQUESTED, THE PTF
*                  COVER LETTERS WILL OCCUR FIRST, ARRANGED IN
*                  THE SAME ORDER AS THE EXIST ON THE PTFIN
*                  DATASET, FOLLOWED BY THE LISTS (AS REQUESTED).
*                  LRECL IS 121 WITH MACHINE PRINT CONTROL
*                  CHARACTERS. BLKSIZE MUST BE SPECIFIED AS
*                  A MULTIPLE OF 121 (BUT NOT 121). THIS
*                  STATEMENT IS REQUIRED. DSORG=PS
*
*       PTFIN    =>INPUT DATASET CONTAINING PTF'S FOR
*                  PROCESSING. LRECL IS 80. RECFM AND BLKSIZE
*                  MUST BE SPECIFIED. THIS STATEMENT IS
*                  REQUIRED. DSORG=PS
*
*       PTFOUT   =>OUTPUT DATASET CONTAINING PTF'S COPIED
*                  FROM PTFIN. FURTHER INFORMATION REGUARDING
*                  THIS DATASET MAY BE FOUND IN THE PROGRAM
*                  DESCRIPTION. THIS STATEMENT IS OPTIONAL
*                  AND IF OMITTED, PROCESSING IS THE SAME
*                  AS SPECIFING DUMMY. LRECL IS 80. BLKSIZE
*                  MUST BE SPECIFIED AS 80 OR A MULTIPLE
*                  OF 80. DSORG=PS
*
*       SYSUT1   =>OPTIONAL SEQUENTIAL WORK DATASET REQUIRED TO
*                  PERFORM THE NOMOD FUNCTION. SEE THE PROGRAM
*                  DESCRIPTION AND NOMOD KEYWORD DESCRIPTION
*                  FOR MORE INFORMATION.
*
*       SYSUT2   =>OPTIONAL PARTITIONED WORK DATASET REQUIRED
*                  TO PERFORM THE SORT FUNCTION. SEE THE
*                  PROGRAM DESCRIPTION FOR MORE INFORMATION.
*
*       SYSPRINT =>PRINT DATASET FOR MESSAGES.LRECL AND
*                  BLKSIZE ARE 121, WITH MACHINE PRINT
*                  CONTROL CHARACTERS. THIS STATEMENT IS
*                  REQUIRED. DSORG=PS
*
*       SYSPUNCH =>OUTPUT DATASET WHICH WILL CONTAIN ALL
*                  RECORDS READ FROM PTFIN PRIOR TO THE FIRST
*                  ++ SYSMOD HEADER STATEMENT. THIS STATEMENT
*                  IS OPTIONAL. IF IT IS OMITTED, PROCESSING
*                  IS THE SAME AS SPECIFING DUMMY. DSORG=PS
         EJECT
*KEYWORD PARAMETERS:
*
*       THE FORMAT OF THE CONTROL STATEMENTS IS FREE FORM. EACH
*       KEYWORD MAY BE LOCATED ANYWHERE IN COLUMNS 1 THROUGH 72
*       (COLUMNS 73 THROUGH 80 ARE IGNORED). AN ASTERISK IN
*       COLUMN 1 INDICATES A COMMENT AND THAT STATEMENT IS
*       IGNORED. WHEN A KEYWORD HAS SYNTAX CONSIDERATIONS,
*       THESE ARE OUTLINED IN THE ASSOCIATED KEYWORD
*       DESCRIPTION.
*
*       THE FOLLOWING PARAMETERS MAY BE SPECIFIED IN THE
*       CONTROL DATASET OR AS PARAMETERS ON THE EXECUTE
*       STATEMENT OR A COMBINATION. NOTE: EACH KEYWORD
*       MAY BE SPECIFIED ONLY ONCE.
*
*       BLOCK    =>PRINT THE PTF NUMBER IN BLOCK LETTERS BEFORE
*                  EACH COVER LETTER
*
*       EJECT    =>BEGIN EACH COVER LETTER ON A NEW PAGE
*
*       SORT     =>PLACE PTF'S IN COALATING SEQUENCE IN BOTH
*                  THE PRINTED OUTPUT AND MACHINE READABLE PTF
*                  OUTPUT (PRESENT IF THE PTFOUT DD STATEMENT
*                  IS PROVIDED). SYSUT2 IS REQUIRED TO PERFORM
*                  THIS FUNCTION.
*
*       NOMOD    =>DO NOT PLACE A MOD ELEMENT IN THE PTFOUT
*                  DATASET IF A SOURCE ELEMENT OF THE SAME
*                  NAME EXISTS WITHIN THE PTF. SYSUT1 IS
*                  REQUIRED TO PERFORM THIS FUNCTION.
*
*       EXCLUDE
*          OR    =>PROVIDES A LIST OF PTF'S TO BE EXCLUDED FROM
*       INCLUDE    THE OUTPUT OR A LIST OF PTF'S WHICH WILL BE
*                  SELECTED (INCLUDE) FROM PTFIN TO BE INCLUDED
*                  IN THE OUTPUT. THE LIST IS IN PARENTHESES
*                  AND MAY SPAN SEVERAL INPUT RECORDS. PTF
*                  NUMBERS MUST BE SEPERATED BY ONE OR MORE
*                  SPACES. A COMMA IS OPTIONAL.
*
*                  FOR EXAMPLE:  TO PROCESS 3 SPECIFIC PTF'S
*                                FROM PTFIN, SPECIFY
*
*                  INCLUDE  (AA11111 AA22222  , AA33333  )
*
*                  THE DEFAULT MAXIMUM LIST SIZE IS 50. IT MAY BE
*                  CHANGED BY SPECIFING A NEW MAXIMUM LIST SIZE
*                  AS SHOWN IN THE FOLLOWING EXAMPLE:
*
*                  EXCLUDE = 100 (BB11111,BB22222 ....)
*
*                  INCLUDE AND EXCLUDE ARE MUTUALLY EXCLUSIVE.
*                  THIS LIST APPLIES ONLY TO PTF'S READ FROM
*                  THE PTFIN DATASET. READBACK OF PTFOUT
*                  IS NOT AFFECTED. (SEE PROGRAM DESCRIPTION)
*
*       PTFLIST  =>INCLUDE, IN THE PRINTED OUTPUT, A LIST
*                  OF THE NUMBERS OF ALL PTF'S PROCESSED.
*
         EJECT
*       XREF     =>INCLUDE, IN THE PRINTED OUTPUT, A CROSS
*                  REFERENCE LIST OF WHICH PTF'S CONTAIN
*                  EACH ELEMENT NAME, BY ELEMENT NAME.
*
*       FMIDLIST =>INCLUDE, IN THE PRINTED OUTPUT, A CROSS
*                  REFERENCE LIST OF WHICH PTF'S APPLY TO
*                  EACH FUNCTION, BY FUNCTION NAME.
*
*       SYSMODS  =>EACH LIST (PTFLIST, XREF, AND FMIDLIST)
*                  REQUIRES AN INTERNAL TABLE. THE DEFAULT
*                  TABLE SIZE ALLOWS A MAXIMUM OF 1500 PTF'S
*                  TO BE PROCESSED. SPACE FOR THE XREF TABLE
*                  IS BASED ON AN AVERAGE OF 8 ELEMENTS PER
*                  PTF. SPACE FOR THE FMIDLIST TABLE IS BASED
*                  ON AN AVERAGE OF 4 VER STATEMENTS PER PTF.
*                  THE SIZE OF THE TABLES MAY BE ALTERED BY
*                  CHANGING THE THE MAXIMUM PTF'S ALLOWED VALUE
*                  AS SHOWN IN THE FOLLOWING EXAMPLES:
*
*                         SYSMODS ( 2000 )
*
*                              OR
*
*                         SYSMODS = 500
*
*                  THE STORAGE REQUIRED FOR THESE TABLES MAY
*                  BE CALCULATED AS FOLLOWS:
*
*                  PTFLIST  = 16 + (8 * 1500 OR SYSMODS VALUE)
*
*                  XREF     = 16 + (64 * 1500 OR SYSMODS VALUE)
*
*                  FMIDLIST = 16 + (32 * 1500 OR SYSMODS VALUE)
*
*       LINES    =>SPECIFIES THE MAXIMUM NUMBER OF LINES PER
*                  PAGE FOR THE PTFDATA DATASET. THE DEFAULT
*                  LINE COUNT IS 55. FOR EXAMPLE:
*
*                  LINES (60 )    OR    LINES =100
*
*       NOMERGE  =>INHIBIT READING THE PTFOUT DATASET PRIOR
*                  TO READING THE PTFIN DATASET. FURTHER
*                  INFORMATION ON THIS FUNCTION IS CONTAINED
*                  IN THE PROGRAM DESCRIPTION.
*
*       HEADER   =>PRINT 2 PAGES OF HEADER DATA, IN BLOCK
*                  LETTERS, AT THE BEGINNING AND END OF THE
*                  PTFDATA DATASET. THE DATA MAY BE ANY
*                  PRINTABLE CHARACTERS NO EXCEEDING A
*                  MAXIMUM OF SEVEN. FOR EXAMPLE:
*
*                  HEADER ( PTF'S)   OR   HEADER =PUT8008
*
*       END      =>OPTIONALLY USED TO INDICATE THE END OF
*                  THE CONTROL DATASET. NO FURTHER CONTROL
*                  STATEMENT SCANNING TAKES PLACE.
*
         EJECT
*SAMPLE JCL
*
*  //STEP01    EXEC PGM=PHRANQUE,REGION=1024K
*  //*
*  //* THIS RUN WILL GENERATE THE FOLLOWING PTF TAPE XREF
*  //* REPORTS.
*  //*
*  //*        ALL REPORTS ARE IN EBCDIC COLLATING SEQUENCE
*  //*
*  //*      1. A LIST OF ALL THE PTF'S APPEARING ON THE TAPE
*  //*
*  //*      2. A LIST OF ALL ELEMENTS (MODULE, MACROS, ETC.) APPEARING
*  //*         ON THE TAPE AND THE PTF'S THAT REFERENCE THEM
*  //*
*  //*      3. A LIST OF ALL THE COVER LETTERS AND THEIR JCLIN IF
*  //*         THERE IS A JCLIN FOR THAT PTF
*  //*
*  //*      4. A LIST OF ALL FMID'S APPEARING ON THE TAPE AND THE PTF'S
*  //*         THAT REFERENCE THOSE FMIDS
*  //*
*  //*    ABNLIGNR   >===  TO SUPRESS ANY ABENDAID OPTIONS (OPTIONAL)
*  //*    SYSPRINT   >===  PRINT ANY MESSAGES AND CONTROL CARD ERRORS
*  //*    SYSIN      >===  INPUT CONTROL STATEMENT
*  //*    SYSUT2     >===  TEMPORARY WORK PDS
*  //*    PTFIN      >===  INPUT PTF TAPE
*  //*    PTFDATA    >===  OUTPUT XREF REPORTS AND PTF COVER LETTERS
*  //*    SYSUDUMP   >===  DUMP DD CARD
*  //*
*  //ABNLIGNR  DD  DUMMY
*  //SYSPRINT  DD  SYSOUT=1
*  //SYSIN     DD  *
*   BLOCK SORT EJECT PTFLIST XREF FMIDLIST LINES(80) HEADER(PUT8008)
*  //SYSUT2    DD DSN=TEMPPDS,UNIT=(DASD,2),SPACE=(CYL,(50,30,200)),
*  //          DISP=(NEW,PASS)
*  //PTFIN     DD DSN=PTFS,VOL=SER=DLSTAP,UNIT=3400-5,DISP=(OLD,KEEP),
*  //          LABEL=(1,NL),DCB=(RECFM=FB,LRECL=80,BLKSIZE=7200,DEN=4)
*  //PTFDATA   DD SYSOUT=Y,DCB=(BLKSIZE=3630,RECFM=FBM)
*  //SYSUDUMP  DD SYSOUT=1
         EJECT
         PRINT NOGEN
         IHADECB
BSAMADDR DS    F
BSAMSIZE DS    H
RDCOUNT  DS    H
BSAMSW   DS    X
FIRSTWT  EQU   1
LASTWT   EQU   2
PTREND   DS    0F
         ORG   DECB
WORKAREA DS    F
ESIZE    DS    F
LOWENTRY DS    F
ENDENTRY DS    F
TSTART   DS    X
         ORG
PTRSIZE  EQU   PTREND-DECB
DSSIZE   EQU   PTRSIZE+2*PREFIX
BSAMAREA DSECT
BSAMLINK DS    F
BSAMBUFE DS    F
BSAMBUFC DS    F
BSAMBUF  DS    38CL80
PREFIX   EQU   BSAMBUF-BSAMAREA
LISTNAME DSECT
LNAME    DS    7C
LSW      DS    C
RECDATA  DSECT
REC      DS    80X
         IHASTOW
STOWEND  EQU   *
STOWSIZE EQU   STOWEND-STOW
         EJECT
PHRANQUE CSECT
         STM   R14,R12,12(R13)
         LR    R12,R15
         USING PHRANQUE,R12
         USING DECB,R8
         USING LNAME,R4
         USING IHADCB,R2
         USING REC,R3
         USING BSAMAREA,R11
         L     R4,ASAVE           ADDR OF SAVE AREA
         ST    R13,4(R4)          SAVE BACK POINTER
         ST    R4,8(R13)          SAVE FORWARD POINTER
         LR    R13,R4             NEW SAVE AREA
         LR    R4,R1              SAVE PARM REG
         USING SAVE,R13
         OPEN  MF=(E,ODDS)
         LA    R10,OPTIONS        SET RETURN FROM SPACES
         L     R1,0(R4)           POINTER TO PARM DATA
         LH    R2,0(R1)           LENGTH OF PARM DATA
         LTR   R2,R2              ZERO LENGTH?
         BZ    NOPARMS            YES, NO EXEC CARD PARMS
         C     R2,=F'100'         LENGTH CHECK
         BH    ERROR12            CAN'T BE OVER 100
         BCTR  R2,0               MINUS ONE FOR MOVE
         EX    R2,MOVEPARM        DO MOVE
         BAL   R6,PTPARM          FIND FIRST KEYWORD
         LA    R6,ERECORD         END OF NORMAL RECORD
         ST    R6,RECEND             SAVE FOR COMPARES
         MVI   RECORD,C' '        CLEAR
         MVC   RECORD+1(119),RECORD     RECORD AREA
NOPARMS  EQU   *
         RDJFCB MF=(E,OSYSIN)
         LTR   R15,R15            SYSIN DD PROVIDED?
         BNZ   SYSINEOF           NO, TAKE DEFAULTS
         OPEN MF=(E,OSYSIN),TYPE=J
         OI    SW3,SYINOPEN       INDICATE SYSIN OPEN
         BALR  R6,0               RETURN ADDR FOR GET
         GET   SYSIN,RECORD
PTPARM   EQU   *
         LA    R0,PRECORD         ADDR OF PRINT RECORD
         BAL   R14,MPRINT         LINK TO SYSPRINT RTN
         CLI   RECORD,C'*'        IS THIS A COMMENT?
         BER   R6                 YES, GET ANOTHER RECORD
         LA    R3,RECORD          ADDR OF RECORD
         B     SPACES1
MOVEPARM MVC   RECORD(0),2(R1)    MOVE PARMS TO RECORD AREA
         EJECT
OPTIONS  EQU   *
         CLC   REC(5),=C'BLOCK'   BLOCK PRINT REQUIRED?
         BE    SETBLOCK
         CLC   REC(7),=C'EXCLUDE' IS THIS AN EXCLUDE LIST?
         BE    SETEX
         CLC   REC(5),=C'NOMOD'   ARE MODULES WANTED?
         BE    SETNOMOD           NO, GO SET THAT
         CLC   REC(4),=C'SORT'    SORT ALSO?
         BE    SETSORT            YES,GO SET UP FOR IT
         CLC   REC(7),=C'INCLUDE'
         BE    SETLIST            YES, PROCESS THE LIST
         CLC   REC(5),=C'EJECT'     SKIP TO ONE BETWEEN SYSMODS?
         BE    SETEJECT
         CLC   REC(7),=C'NOMERGE'    INHIBIT READBACK?
         BE    SETNMRGE           YES, SET NOMERGE
         CLC   REC(7),=C'PTFLIST' IS A PTF LIST REQUESTED?
         BE    STPTFLST           YES, GO SET IT
         CLC   REC(4),=C'XREF'    IS AN ELEMENT-SYSMOD XREF REQUESTED?
         BE    SETXREF            YES, GO SET IT
         CLC   REC(5),=C'LINES'   CHANGE PAGE SIZE?
         BE    SETLINES           YES, DO CHANGE
         CLC   REC(8),=C'FMIDLIST' IS AN FMID LIST REQUESTED?
         BE    SETFLIST           YES, GO SET IT
         CLC   REC(6),=C'HEADER'   IS AN HEADER REQUESTED?
         BE    SETHEADR           YES, GO SET IT
         CLC   REC(7),=C'SYSMODS'  CHANGE SYSMOD COUNT?
         BE    SETSYSMD           YES, CHANGE IT
         CLC   REC(3),=C'END'     END OF CONTROL STATEMENTS?
         BE    SYSINEOF           YES, GO TO EOF ON SYSIN
         B     ERROR1             UNKNOWN KEYWORD
ASAVE    DC    A(PHRA0003)
         EJECT
SETLINES EQU   *
         TM    SW4,LINES          DUPLICATE KEYWORD?
         BO    ERROR5             YES, ERROR
         OI    SW4,LINES          SET LINES PROCESSED
         LA    R3,5(R3)           BUMP OVER KEYWORD
         BAL   R8,CVB             LINK TO BINARY CONVERT
         ST    R15,MAXLINES       NEW PAGE SIZE
         ST    R15,LCOUNT         FORCE NEW PAGE
         B     SPACES
         SPACE 3
CVB      EQU *
         ST    R10,SAVER10        SAVE BAL REG
         BAL   R10,SPACES         SKIP OVER SPACES
         CLI   REC,C'='           EQUAL SIGN?
         BE    FOREQU             PROCESS EQUAL SIGN FORMAT
         CLI   REC,C'('           SYNTAX CHECK
         BNE   ERROR6             NO, ?
         BAL   R4,DOCONV          DO BINARY CONVERT
         CLI   REC,C')'           IS IT ?
         BNE   ERROR6             NO, ?
         LA    R3,1(R3)           BUMP OVER IT
CVBRETRN EQU   *
         L     R10,SAVER10        RESTORE R10
         BR    R8
FOREQU   EQU   *
         BAL   R4,DOCONV          DO BINARY CONVERT
         B     CVBRETRN
DOCONV   EQU   *
         LA    R3,1(R3)           BUMP POINTER
         BAL   R11,SCANRTN1       FIND OPERAND AND LENGTH
         C     R5,=F'7'           OPERAND OVER 7 CHARACTERS?
         BH    ERROR6             YES, SYSTAX ERROR
         LR    R15,R5             SAVE LENGTH FOR NUMERIC SCAN
TESTNUM  EQU   *
         BCTR  R15,0              DECREMENT INDEX REG
         TM    REC,X'F0'          IS IT NUMERIC ?
         BNO   ERROR6             IF NOT, SYNTAX ERROR
         LA    R3,1(R3)           BUMP RECORD POINTER
         LTR   R15,R15            END OF SCAN ?
         BNZ   TESTNUM            NO, CONTINUE SCAN
         SR    R3,R5              RESTORE RECORD POINTER
         LR    R15,R5             SAVE LENGTH AGAIN
         BCTR  R5,0               DECREMENT FOR PACK
         O     R5,=F'112'         OR IN L1 FOR PACK
         EX    R5,PACKIT          EXECUTE PACK
         AR    R3,R15             SKIP OVER OPERAND
         BAL   R10,SPACES         LOOK FOR )
         CVB   R15,PACKDEC        CONVERT TO BINARY
         BR    R4
PACKIT   PACK  PACKDEC(0),REC(0)  EXECUTED PACK
         EJECT
SETSYSMD EQU   *
         TM    SW2,SYSMOD         DUPLICATE KEYWORD
         BO    ERROR5             YES, ERROR
         OI    SW2,SYSMOD         SET CHANGE SYSMOD COUNT
         LA    R3,7(R3)           BUMP OVER KEYWORD
         BAL   R8,CVB             LINK TO BINARY CONVERT
         ST    R15,SMCOUNT        SET NEW COUNT
         B     SPACES
         SPACE 3
SETHEADR EQU   *
         TM    SW2,PHEADER        CHECK FOR DUPLICATE PARM
         BO    ERROR5
         L     R1,BLOCKPT         ADDR OF BLOCK PRINT RTN
         LTR   R1,R1              IS BLOCK PRINT RTN LINKED?
         BZ    ERROR13            NO, ERROR
         OI    SW2,PHEADER        INDICATE PRINT HEADER
         ST    R10,SAVER10        SAVE BAL REG
         MVC   IMSG3(8),=8C' '    CLEAR STOW NAME
         LA    R3,6(R3)           BUMP POINTER
         BAL   R10,SPACES         STEP TO HEADER DATA
         CLI   REC,C'='           FORMAT EQUAL SIGN?
         BE    HEADEQU            YES, DO THAT FORMAT
         CLI   REC,C'('           OTHER FORMAT?
         BNE   ERROR6             NO, WHO KNOWS?
         BAL   R4,MOVECHRS        MOVE HEADER DATA TO STOW NAME
         CLI   REC,C')'           CLOSING THING?
         BNE   ERROR6             NO, ERROR
         LA    R3,1(R3)           BUMP OVER IT
CHRSEXIT EQU   *
         L     R10,SAVER10        RESTORE BAL REG
         B     SPACES
HEADEQU  EQU   *
         BAL   R4,MOVECHRS        MOVE HEADER DATA TO STOW NAME
         B     CHRSEXIT
MOVECHRS EQU   *
         LA    R3,1(R3)           BUMP OVER DELIMITER
         BAL   R11,SCANRTN1       DO SPACES AND LENGTH
         LTR   R5,R5              ZERO LENGTH?
         BZ    HEADROFF           YES,TURN OFF HEADER
         C     R5,=F'7'           7 CHARACTERS MAX
         BH    ERROR6             TOO MANY IS AN ERROR
         LR    R15,R5             SAVE LENGTH
         BCTR  R5,0               MINUS ONE FOR EXECUTE
         EX    R5,MVECHARS        DO MOVE
         AR    R3,R15             BUMP OVER HEADER DATA
HEADER1  EQU   *
         BAL   R10,SPACES         DO SPACES STUFF
         BR    R4
HEADROFF EQU   *
         NI    SW2,255-PHEADER    RESET PHEADER
         B     HEADER1
MVECHARS MVC   IMSG3(0),REC
         EJECT
SETEX    EQU   *
         TM    SW,EXCLUDE         CHECK FOR DUPLICATE PARM
         BO    ERROR5
         OI    SW,EXCLUDE         SET EXCLUDE
         B     SETLIST
         SPACE 3
SETBLOCK EQU   *
         TM    SW3,BLOCK          DUPLICATE KEYWORD?
         BO    ERROR5             YES, ERROR
         L     R1,BLOCKPT         ADDR OF BLOCK PRINT RTN
         LTR   R1,R1              IS IT LINKED?
         BZ    ERROR13            NO, ERROR
         OI    SW3,BLOCK
         LA    R3,5(R3)
         B     SPACES
         SPACE 3
SETSORT  EQU   *
         TM    SW,SORT            HAVE WE ALREADY SELECTED SORT?
         BO    ERROR5             YES, DUPLICATE KEYWORD
         RDJFCB MF=(E,OSYSUT2)
         LTR   R15,R15            RETURN CODE ZERO?
         BNZ   ERROR10
         OI    SW,SORT            SET SORT SW
         OPEN  MF=(E,OSYSUT2),TYPE=J
         OPEN  MF=(E,OUT2DIR)
         L     R15,APUTUT2        ADDR OF PUT RTN
         ST    R15,APUTRTN        STORE IN ADDR LIST
         LA    R2,SYSUT2          DCB ADDR
         LA    R8,ABSAMUT2        ADDR OF BSAM POINTER
         BAL   R7,GETBUF          GET AND SET UP BUFFER
         OI    SW2,UT2OPEN        SYSUT2 HAS BEEN OPENED
         LA    R3,4(R3)           BUMP POINTER
         B     SPACES
APUTUT2  DC    A(PUTUT2)
         SPACE 2
         EJECT
SETLIST  EQU   *
         TM    SW,LIST            HAVE WE ALREADY PROCESSED A LIST?
         BO    ERROR5             YES, DUPLICATE KEYWORD
         OI    SW3,DOSCAN         SCAN LIST AT END
         OI    SW,LIST            SET LIST SW
         ST    R10,SAVER10        SAVE BAL REG
         LA    R3,7(R3)           BUMP POINTER
         BAL   R10,SPACES         SKIP OVER SPACES
         CLI   REC,C'='           CHANGE TABLE SIZE ?
         BNE   DOPTFLST           NO, BUILD TABLE
         BAL   R4,DOCONV          CONVERT NEW TABLE SIZE
         ST    R15,APTFLIST       NEW SIZE
DOPTFLST EQU   *
         CLI   REC,C'('           IS THIS A LIST?
         BNE   ERROR6             NO, WHO KNOWS?
         LA    R1,8               ENTRY SIZE
         M     R0,APTFLIST        GETMAIN SIZE
         LR    R8,R1              SAVE LENGTH
         GETMAIN R,LV=(R1),SP=10
         ST    R1,APTFLIST        ADDR OF PTF LIST
         LR    R4,R1
         LA    R8,0(R1,R8)        END OF LIST
ADD1     EQU   *
         LA    R3,1(R3)           BUMP RECORD POINTER
         BAL   R10,SPACES         SKIP OVER BLANK CHARACTERS
         CLI   REC,C')'           END OF LIST?
         BE    ENDLIST            YES, RETURN
         BAL   R10,LENGTH         GET LENGTH OF THIS PARM
         LA    R10,7              LENGTH MUST BE 7
         CLR   R10,R5             ARE THEY EQUAL?
         BNE   ERROR2             NO, DO ERROR MSG
         CR    R8,R4              TABLE FULL?
         BNH   ERROR7             YEP
         MVC   0(7,R4),REC        MOVE SYSMOD NAME TO TABLE
         MVI   7(R4),X'00'        ZERO COUNTER
         LA    R4,8(R4)           BUMP LIST POINTER
         LA    R3,6(R3)           BUMP RECORD POINTER
         B     ADD1               LOOP BACK
ENDLIST  EQU   *
         ST    R4,ENDPTFL         SAVE END POINTER
         L     R10,SAVER10        RESTORE BAL REG
         LA    R3,1(R3)           BUMP RECORD POINTER
         B     SPACES
         SPACE 3
SETNMRGE EQU   *
         TM    SW3,NOMERGE        DUPLICATE KEYWORD?
         BO    ERROR5             YES, MSG AND EXIT
         OI    SW3,NOMERGE        SET NOMERGE
         LA    R3,7(R3)
         B     SPACES
         EJECT
SETNOMOD EQU   *
         TM    SW,NOMOD           HAVE WE ALREADY SELECTED NOMOD?
         BO    ERROR5             YES, DUPLICATE KEYWORD
         RDJFCB MF=(E,OSYSUT1)
         LTR   R15,R15            RETURN CODE ZERO?
         BNZ   ERROR11
         OI    SW,NOMOD           SET NOMOD SW
         OPEN  MF=(E,OSYSUT1),TYPE=J
         LA    R2,SYSUT1          DCB ADDR
         LA    R8,ABSAMUT1        ADDR OF BSAM POINTER
         BAL   R7,GETBUF          GET AND SET UP BUFFER
         OI    SW2,UT1OPEN        SYSUT1 HAS BEEN OPENED
         L     R1,NAMELIST        LIST SIZE
         LR    R8,R1              SAVE LENGTH
         GETMAIN R,LV=(R1),SP=10
         ST    R1,NAMELIST        ADDR OF ELEMENT LIST
         LA    R8,0(R1,R8)        END OF LIST
         ST    R8,ENDNAMEL        END OF ELEMENT LIST
         LA    R3,5(R3)           BUMP POINTER
         B     SPACES
         SPACE 3
SETEJECT EQU   *
         TM    SW3,EJECT          DUPLICATE PARM?
         BO    ERROR5             YES, ERROR MSG
         OI    SW3,EJECT          SET EJECT
         LA    R3,5(R3)
         B     SPACES
         SPACE 3
SETXREF  EQU   *
         TM    SW3,XREF           DUPLICATE KEYWORD?
         BO    ERROR5             YES, ERROR
         OI    SW3,XREF           SET XREF
         LA    R3,4(R3)           BUMP POINTER
         B     SPACES
         SPACE 3
STPTFLST EQU   *
         TM    SW3,PTFLIST        DUPLICATE KEYWORD?
         BO    ERROR5             YES, ERROR
         OI    SW3,PTFLIST        SET PTFLIST
         LA    R3,7(R3)           BUMP POINTER
         B     SPACES
         SPACE 3
SETFLIST EQU   *
         TM    SW4,FMIDLIST       DUPLICATE PARM?
         BO    ERROR5             YES, ERROR
         OI    SW4,FMIDLIST       INDICATE BUILD LIST
         LA    R3,8(R3)           BUMP OVER KEYWORD
         B     SPACES
         EJECT
SETUPTBL EQU   *
         L     R15,0(R8)          CLACULATE
         M     R14,SMCOUNT          GETMAIN
         MR    R14,R11                SIZE
         LA    R14,16(R15)        ADD 16 BYTES FOR HEADER
         GETMAIN R,LV=(R14),SP=10
         ST    R1,0(R8)           SAVE TABLE ADDR
         LR    R8,R1              BASE FOR TABLE
         AR    R14,R1             END OF TABLE
         ST    R14,ENDENTRY       LAST TABLE POSITION
         SR    R14,R11            BACK UP ONE
         ST    R14,LOWENTRY       ADDR OF LOWEST ENTRY
         BCTR  R11,0              ENTRY SIZE MINUS 1
         ST    R11,ESIZE          SAVE IT
         EX    R11,CLRENTRY       MAKE LOW ENTRY ZEROS
         BR    R7
CLRENTRY XC    0(0,R14),0(R14)
         SPACE 3
SYSINEOF EQU   *
         TM    SW3,XREF           BUILD XREF?
         BZ    NOTXREF            NO, TRY PTFLIST
         LA    R8,XREFADDR        ADDR OF XREF TABLE
         LA    R11,16             ENTRY SIZE
         BAL   R7,SETUPTBL        GET STORAGE AND INITIALIZE TABLE
NOTXREF  EQU   *
         TM    SW3,PTFLIST        BUILD PTFLIST?
         BZ    NOTPTFL            NO, TRY FMIDLIST
         LA    R8,TADDR           ADDR OF PTFLIST TABLE
         LA    R11,8              ENTRY SIZE
         BAL   R7,SETUPTBL        GET STORAGE AND INITIALIZE TABLE
NOTPTFL  EQU   *
         TM    SW4,FMIDLIST       BUILD FMIDLIST?
         BZ    NOTFMIDL           NO,MOVE ON
         LA    R8,FMIDADDR        FMID LIST TABLE
         LA    R11,16             ENTRY SIZE
         BAL   R7,SETUPTBL        BUILD FMID TABLE
NOTFMIDL EQU   *
         TM    SW3,SYINOPEN       IS SYSIN OPEN?
         BZ    NOSYSIN            NO, DO NOT CLOSE
         CLOSE MF=(E,OSYSIN)
         FREEPOOL SYSIN
NOSYSIN  EQU   *
         CALL  PHRA0001
SYSIN    DCB   DDNAME=SYSIN,DSORG=PS,EODAD=SYSINEOF,LRECL=80,          X
               MACRF=GM,RECFM=F,BLKSIZE=80,EXLST=XLIST
OSYSIN   OPEN  (SYSIN,INPUT),MF=L
         EJECT
         LTORG
         EJECT
PHRA0001 CSECT
         BALR  R12,0
         USING *,R12
         BAL   R4,HEADERTN        LINK TO HEADER RTN
         RDJFCB MF=(E,OPTFOUT)    IS THERE PTFOUT DATASET?
         LTR   R15,R15            RETURN CODE ZERO?
         BNZ   DONTREAD           NO, DO NOT OPEN
         TM    SW3,NOMERGE        BYPASS MERGE?
         BO    NOREAD             YES, NO READBACK
         TM    JFCBTSDM,JFCSDS    SYSOUT DATA SET ?
         BO    NOREAD             YES, NO READ
         TM    JFCBIND2,JFCMOD    DISP = NEW OR MOD?
         BO    NOREAD             YES, DO NOT READ OUTPUT TAPE
         OI    SW,DISPOLD         PTFOUT DISP=OLD
NOREAD   EQU   *
         OPEN  MF=(E,OPTFOUT),TYPE=J
         OI    SW2,OUTOPEN
         LA    R2,PTFOUT          DCB ADDR
         LA    R8,ABSAMOUT        ADDR OF BSAM POINTER
         BAL   R7,GETBUF          GET AND SET UP BUFFER
         TM    SW,DISPOLD+SORT    SORT AND PTFOUT DISP=OLD?
         BO    READIT             YES, START READING
         TM    SW,DISPOLD         DISP=OLD BUT NOT SORT?
         BZ    DONTREAD           NO, START WITH PTFIN
         CLOSE (PTFOUT,LEAVE),TYPE=T  REPOSITION AT END OF DATA SET
         B     DONTREAD
READIT   EQU   *
         BAL   R14,MSG6
         L     R6,APUTRTN         ADDR OF PUT RTN
         LA    R9,GETOUT          ADDR OF GET RTN
         L     R8,ABSAMOUT        ADDR OF BSAM POINTERS
         LA    R7,NEXTPTF         RETURN FOR ++SYSMOD
         B     INITREAD           DO INITIAL READ
         EJECT
POUTEOF  EQU   *
         BAL   R6,STOWRTN         DO FINAL STOW
         CLOSE (PTFOUT,REREAD),TYPE=T
         L     R8,ABSAMOUT        ADDR OF BSAM POINTERS
         L     R11,BSAMADDR       ADDR OF BSAM AREA
         LA    R14,BSAMBUF        START OF IO AREA
         ST    R14,BSAMBUFC       MAKE IT CURRENT
DONTREAD EQU   *
         BAL   R14,MSG7
         OI    SW,NRDBACK
         NI    SW,255-HEADER-PTFSEL
         LA    R9,GETPTF          ADDR OF GET ROUTINE
         LR    R6,R9              LOOP TO GET IF NOT ++
         RDJFCB MF=(E,OPUNCH)
         LTR   R15,R15            WAS IT SUCCESSFUL?
         BNZ   NOPUNCH            NO, DONT OPEN
         OPEN  MF=(E,OPUNCH),TYPE=J
         LA    R6,PUTPUNCH        ADDR OF PUNCH RTN
         OI    SW2,PUNOPEN        INDICATE SYSPUNCH OPEN
NOPUNCH  EQU   *
         BALR  R7,R9              LINK TO INPUT ROUTINE
NEXTPTF  EQU   *
         BAL   R6,CKPTF           FINISH UP THIS SYSMOD
         LR    R6,R9              SET UP RETURN REG
         NI    SW,255-HEADER-PTFSEL
         AR    R3,R5              BUMP RECORD POINTER
         BAL   R11,SCANRTN        FIND NEXT DATA WORD
         TM    SW,LIST+NRDBACK    LIST AND NOT READING PTFOUT?
         BNO   NOLIST             DO LIST ONLY IF BOTH ARE ONE
         BAL   R15,LISTRTN        CHECK PTF LIST
NOLIST   EQU   *
         L     R4,NAMELIST        ADDR OF ELEMENT LIST
         ST    R4,CNAMEL          MAKE IT CURRENT
         OI    SW,PTFSEL          INDICATE THAT A PTF IS SELECTED
         MVC   STOWA(8),=8C' '    CLEAR STOW AREA
         MVC   STOWA(7),REC       MOVE PTF NUMBER TO MEMBER NAME
         MVC   TEMPNAME+8(8),STOWA SYSMOD NAME FOR XREF TABLE
SETPUT   EQU   *
         L     R6,APUTRTN         ADDR OF PUT RTN
         BR    R6                 GO DO PUT
         EJECT
LISTRTN  EQU   *
         L     R4,APTFLIST        ADDR OF PTF LIST
COMPARE  EQU   *
         CLC   LNAME(7),REC       CHECK FOR MATCH
         BE    PTFMATCH           YES, SELECT THIS PTF
         LA    R4,8(R4)           BUMP POINTER
         CL    R4,ENDPTFL         END?
         BC    10,NOMATCH         YES, NOT FOUND
         B     COMPARE            LOOP BACK
NOMATCH  EQU   *
         TM    SW,EXCLUDE         IS THIS AN EXCLUDE LIST?
         BZR   R6                 NO, NO PTFSEL
         BR    R15
PTFMATCH EQU   *
         MVI   LSW,X'01'          MARK AS SELECTED
         TM    SW,EXCLUDE         IS THIS AN EXCLUDE LIST?
         BOR   R6                 YES, BYPASS THIS SYSMOD
         BR    R15
         SPACE 3
CKPTF    EQU   *
         TM    SW2,INNOMOD        IS PART OF THIS SYSMOD ON SYSUT1?
         BO    RDSYSUT1           YES, GET MOD ELEMENTS FROM SYSUT1
         TM    SW,PTFSEL          IS A PTF SELECTED?
         BZR   R6                 NO, BYPASS STOW
         TM    SW,SORT            ARE WE DOING A SORT?
         BO    STOWRTN            YES, STOW SYSMOD NAME
         BAL   R14,MSG2           END OF PTF MSG
DOPLIST  EQU   *
         TM    SW3,PTFLIST        IS PTFLIST TO BE DONE?
         BZR   R6                 NO, RETURN
         L     R8,TADDR           ADDR OF TABLE
         LA    R10,STOWA          ADDR OF OBJECT FOR TABLE ADD
         B     TBLSORT            DO ADD TO PTF LIST
STOWRTN  EQU   *
         L     R8,ABSAMUT2        ADDR OF BSAM POINTERS
         BAL   R4,CHKWRITE        FINISH UP OUTPUT
         STOW  SYSUT2,STOWA       STOW THE PTF NUMBER
CHKSTOW  EQU   *
         B     *+4(R15)           BRANCH TABLE FOR CHECKING STOW
         B     DOPLIST            GOOD STOW, DO TABLE
         B     DUPNAME            SECOND COPY OF THIS PTF, USE THIS ONE
         B     ERROR9             INVALID STOW REQUEST
         B     ERROR8             OUT OF DIRECTORY SPACE
DUPNAME  EQU   *
         BAL   R14,MSG1           DUPLICATE PTF MSG
         STOW  SYSUT2,STOWA,R     DO STOW WITH REPLACE
         B     CHKSTOW            CHECK RETURN CODE AGAIN
         EJECT
PUTPTF   EQU   *
         TM    SW,HEADER          HAVE WE PRINTED THE HEADER YET?
         BO    COPY               YES, DONT DO IT AGAIN
         BAL   R10,BLOCKRTN       GO TO BLOCK PRINT RTN
COPY     EQU   *
         BALR  R6,0               SET UP RETURN FOR NOT ++PTF
         TM    SW4,LISTREC        PRINT THIS REC?
         BZ    NOPRINT            NO, BR
         LA    R0,PRECORD         ADDR OF PRINT RECORD
         BAL   R14,PRINT          LINK TO PRINT ROUTINE
         TM    SW4,NLISTALL       SHOULD WE LIST ALL?
         BZ    NOPRINT            YES, BYPASS CHECK FOR PERIOD
         TM    SW4,NCOMMENT       ARE WE IN COMMENT?
         BZ    CHKCOM             YES, CHECK FOR END OF COMMENT
PERIOD   EQU   *
         CLI   REC,C'.'           END OF STATEMENT?
         BE    LISTOFF            YES, TURN LIST OFF
         TM    SW4,NINVER         ARE WE IN A ++VER STATEMENT?
         BO    NOTVER             NO, DO NOT CHECK FMID LIST
         TM    SW4,FMIDPARN+FMIDID WHERE IN FMID STUFF ARE WE?
         BZ    FMID1              ZERO = LOOKING FOR C'FMID'
         BM    FMID2              MIXED = LOOKING FOR C'('
*                                 ONES = LOOKING FOR FUNCTION ID
NOTVER   EQU   *
         CLC   REC(2),=C'/*'      START OF COMMENT?
         BE    SETCOM             YES, GO SET COMMENT
PERIOD1  EQU   *
         TM    SW4,FMIDPARN+FMIDID ARE WE LOOKING FOR FUNCTION ID ?
         BNO   PERIOD2            NO, CONTINUE NORMAL SCAN
         CLI   REC,C' '           IS THIS CHARACTER A BLANK?
         BNE   FMID3              NO, THEN IT IS FUNCTION ID
PERIOD2  EQU   *
         LA    R3,1(R3)           NEXT CHARACTER
         C     R3,RECEND          END OF RECORD?
         BC    10,NOPRINT         YES, MOVE ON
         B     PERIOD
SETCOM   EQU   *
         NI    SW4,255-NCOMMENT      SET IN COMMENT
         B     CHKCOM1
CHKCOM   EQU   *
         CLC   REC(2),=C'*/'      END OF COMMENT?
         BE    RESETCOM           YES,GO CHECK FOR PERIOD
CHKCOM1  EQU   *
         LA    R3,1(R3)           NEXT CHARACTER
         C     R3,RECEND          END OF RECORD?
         BC    10,NOPRINT         YES, MOVE ON
         B     CHKCOM
RESETCOM EQU   *
         OI    SW4,NCOMMENT       SET NOT IN COMMENT
         B     PERIOD1
LISTOFF  EQU   *
         NI    SW4,255-LISTREC    TURN OFF LIST AND VER
NOPRINT  EQU   *
         L     R4,RECCOUNT        INCREMENT
         LA    R4,1(R4)           RECORD
         ST    R4,RECCOUNT        COUNT
         TM    SW2,OUTOPEN        IS PTFOUT OPEN?
         BZR   R9                 NO, DO NOT WRITE
         L     R8,ABSAMOUT        ADDR OF BSAM POINTERS
         BAL   R10,BSAMWRIT       PUT RECORD TO PTFOUT
         BR    R9
         EJECT
FMID1    EQU   *
         CLC   REC(4),=C'FMID'    IS THIS FMID KEYWORD ?
         BNE   NOTVER             NO, CONTINUE LOOKING
         LA    R3,3(R3)           BUMP POINTER L'FMID-1
         OI    SW4,FMIDID         HAVE FOUND C'FMID'
         B     NOTVER
         SPACE 3
FMID2    EQU   *
         CLI   REC,C'('           IS THIS C'(' AFTER C'FMID'
         BNE   NOTVER             NO, CONTINUE LOOKING
         OI    SW4,FMIDPARN+NINVER HAVE FOUND C'('--- ALSO
*                                 SET 'NOT IN VER STATEMENT' --
*                                 DON'T NEED TO DO THAT CHECKING NOW
         B     PERIOD2
         SPACE 3
FMID3    EQU   *
         MVC   TEMPNAME(7),REC    MOVE FMID FOR TABLE
         MVI   TEMPNAME+7,C' '    PUT BLANK ON END
         NI    SW4,255-FMIDPARN-FMIDID
         ST    R6,SAVER10         SAVE BAL REG
         L     R8,FMIDADDR        ADDR OF FMID TABLE
         LA    R10,TEMPNAME       ADDR OF OBJECT FOR TABLE ADD
         BAL   R6,TBLSORT         ADD TO FMID TABLE
         LA    R3,3(R3)           BUMP POINTER L'FUNCTION-1
         L     R6,SAVER10         RESTORE BAL REG
         B     NOTVER
         SPACE 3
PUTUT2   EQU   *
         L     R8,ABSAMUT2        ADDR OF BSAM POINTERS
         BAL   R10,BSAMWRIT
         BR    R9
         SPACE 3
TCLOSE   EQU   *
         CLOSE (SYSUT1,REREAD),TYPE=T
         BR    R10
         EJECT
UT2EOF   EQU   *
         L     R14,CURDE          ADDR OF CURRENT DIRECTORY ENTRY
         CLC   0(8,R14),KEY       IS THIS END OF DIRECTORY BLOCK?
         BNE   STEPDIR            NO, GET NEXT DIRECTORY ENTRY
STARTDIR EQU   *
         LA    R14,KEY            ADDR OF DIRECTORY BUFFER
         READ  DIRECB,SF,UT2DIR,(R14)
         CHECK DIRECB
         LA    R14,DIR            ADDR OF DIRECTORY RECORD
         B     DOPOINT
STEPDIR  EQU   *
         IC    R15,STOCTTRN-STOW(R14)  LENGTH BYTE
         N     R15,USERL          USE ONLY LENGTH BITS
         LA    R15,12(R15,R15)    SIZE OF THIS ENTRY
         AR    R14,R15            ADDR OF NEXT ENTRY
DOPOINT  EQU   *
         ST    R14,CURDE          ADDR OF CURRENT DIRECTORY ENTRY
         CLC   0(8,R14),=8X'FF'   END OF DIRECTORY?
         BE    DIREOF             YES, CLEAN UP AND EXIT
         MVC   STOWA(12),0(R14)   MOVE TO STOW AREA
         NC    STOWA+STOTTR-STOW(L'STOTTR+L'STOCTTRN),TTRMASK
         POINT SYSUT2,STOWA+STOTTR-STOW
         L     R8,ABSAMUT2        ADDR OF BSAM POINTERS
INITREAD EQU   *
         BAL   R10,IREAD          START READ PROCESS
         B     CHECKREC
         SPACE 3
IREAD    EQU   *
         L     R11,BSAMADDR       ADDR OF BSAM AREA
         BAL   R4,READ
         B     DOREAD
         EJECT
RDSYSUT1 EQU   *
         L     R8,ABSAMUT1        ADDR OF BSAM POINTERS
         BAL   R10,BSAMWRIT       OUTPUT CURRENT BUFFER, START NEW ONE
LSTRDUT1 EQU   *
         BAL   R4,CHKWRITE        FINISH UP OUTPUT
         BAL   R10,TCLOSE         SET TO REREAD SYSUT1
         ST    R9,AGETRTN         SAVE GET RTN ADDR
         LA    R9,GETUT1          ADDR OF GET ROUTINE
         OI    SW2,UT1LOOP        INDICATE READING FROM SYSUT1
         LR    R6,R9              RETURN FOR NOT ++PTF
         BAL   R7,INITREAD        START READ PROCESS
ENDUT1LP EQU   *
         L     R8,ABSAMUT1        ADDR OF BSAM POINTERS
         L     R11,BSAMADDR       CURRENT BSAMAREA
         BAL   R4,RESETBUF        RESET BUFFER POINTERS
         CHECK (R8)
UT1EOF   EQU   *
         TM    SW3,EOFPTFIN       IS PTFIN AT EOF?
         BO    ENDNOMOD           YES, EXIT INPUT PROCESSING
         BAL   R10,TCLOSE         POSITION SYSUT1 FOR REUSE
         NI    SW2,255-INNOMOD-UT1LOOP
         L     R9,AGETRTN         RESTORE GET RTN ADDR
         LA    R7,NEXTPTF
         BR    R7                 GO DO NEXT PTF
         SPACE 3
PTFINEOF EQU   *
         OI    SW3,EOFPTFIN       INDICATE PTFIN AT EOF
         L     R8,ABSAMUT1        ADDR OF BSAM POINTERS
         TM    SW2,INNOMOD        IS ANYTHING ON SYSUT1?
         BO    LSTRDUT1           FINISH READING SYSUT1
ENDNOMOD EQU   *
         NI    SW2,255-INNOMOD-UT1LOOP
         BAL   R6,CKPTF           FINISH UP THIS SYSMOD
         BAL   R6,PRINTLST        BUILD PTF LIST
         TM    SW,SORT            ARE WE DOING A SORT?
         BZ    DIREOF1            NO,FINISHED,GO TO END
         NI    SW,255-LIST-SORT-NOMOD-PTFSEL
         BAL   R14,RPRINT         SKIP TO ONE
         LA    R9,GETUT2          ADDR OF NEW GET RTN
         ST    R9,AGETRTN         SAVE FOR LATTER
         LA    R6,PUTPTF          ADDR OF NEW PUT RTN
         ST    R6,APUTRTN         SAVE IT FOR LATTER
         LA    R7,NEXTPTF         RETURN FOR ++PTF
         B     STARTDIR
         SPACE 3
DIREOF   EQU   *
         BAL   R6,CKPTF           END MSG IF NECESSARY
         BAL   R6,PRNTXREF        NOW DO FMIDLIST
DIREOF1  EQU   *
         CALL  PHRA0002
         EJECT
GETOUT   EQU   *
         L     R8,ABSAMOUT        ADDR OF BSAM POINTERS
         B     GOREAD
GETUT2   EQU   *
         L     R8,ABSAMUT2        ADDR OF BSAM POINTERS
         B     GOREAD
GETUT1   EQU   *
         L     R8,ABSAMUT1        ADDR OF BSAM POINTERS
GOREAD   EQU   *
         BAL   R10,BSAMREAD       GET RECORD FROM BSAM BUFFER
         B     CHECKREC
GETPTF   EQU   *
         GET   PTFIN,RECORD
CHECKREC EQU   *
         LA    R3,RECORD          RESET RECORD POINTER
         CLC   RECORD(2),=C'++'   IS IT ++ CARD?
         BNER  R6                 NO RETURN
         OI    SW4,LISTREC+NCOMMENT+NLISTALL+NINVER
         NI    SW4,255-FMIDPARN-FMIDID
         LA    R3,2(R3)           PASS OVER ++
         BAL   R11,SCANRTN1       FIND NEXT DATA WORD
         CLC   REC(8),=C'FUNCTION'     IS IT SYSMOD TPYE FUNCTION?
         BER   R7                 YES, PROCESS IT
         CLC   REC(3),=C'PTF'     IS IT SYSMOD TYPE PTF?
         BER   R7                 YES, PROCESS IT
         CLC   REC(4),=C'APAR'    IS IT SYSMOD TYPE APAR?
         BER   R7                 YES, PROCESS IT
         CLC   REC(7),=C'USERMOD' IS IT SYSMOD TYPE USERMOD?
         BER   R7                 YES, PROCESS IT
         TM    SW,PTFSEL          IS A SYSMOD SELECTED?
         BNOR  R6
         CLC   REC(2),=C'IF'
         BE    SETPUT             YES, BYPASS TABLE STUFF
         CLC   REC(5),=C'JCLIN'   IS THIS A JCLIN STATEMENT?
         BE    DOJCLIN            YES, BYPASS TABLE STUFF
         CLC   REC(3),=C'VER'     IS THIS A VER STATEMENT?
         BE    DOVER              YES, CHECK FOR FMID LIST
         MVC   TEMPNAME(8),=8C' ' CLEAR WORK AREA
         ST    R3,SAVER10
         BAL   R10,LENGTH         GET LENGTH OF ELEMENT TYPE
         AR    R3,R5              BUMP RECORD POINTER
         BAL   R11,SCANRTN        FIND NEXT DATA WORD
         BCTR  R5,0               SET UP COUNT FOR EXECUTED MOVE
         EX    R5,MOVE            MOVE ELEMENT NAME TO TABLE
         TM    SW,NOMOD+NRDBACK   NOMOD AND NOT READBACK?
         BNO   BLDXREF            NO, JUST BUILD AN XREF
         L     R3,SAVER10
         CLC   REC(3),=C'MOD'     IS IT NMOD?
         BNE   DOTABLE            NO, DO ADD TO ELEMENT NAME TABLE
         TM    SW2,UT1LOOP        ARE WE READING FROM SYSUT1?
         BO    CHECKTBL           YES, CHECK FOR DUPLICATE SOURCE
         OI    SW2,INNOMOD        INDICATE THAT A ++MOD IS ON SYSUT1
         BALR  R6,0               SET UP RETURN FOR NOT ++PTF
         L     R8,ABSAMUT1        ADDR OF BSAM POINTERS
         BAL   R10,BSAMWRIT       PUT TO SYSUT1
         BR    R9                 RETURN
         EJECT
DOVER    EQU   *
         TM    SW4,FMIDLIST       FMID LIST REQUESTED?
         BZ    SETPUT             NO, BYPASS TABLE
         NI    SW4,255-NINVER     SET IN ++VER STATEMENT
         B     SETPUT
         SPACE 3
DOJCLIN  EQU   *
         NI    SW4,255-NLISTALL   LIST ALL UNTIL NEXT ++
         B     SETPUT             GO TO PUT RTN
         EJECT
DOTABLE  EQU   *
         L     R4,CNAMEL          ELEMENT LIST CURRENT POINTER
         CL    R4,ENDNAMEL        END OF TABLE?
         BE    ERROR4             YES, TOO MANY ELEMENTS TO DO
         MVC   LNAME(8),TEMPNAME  MOVE ELEMENT NAME TO ELEMENT TABLE
         LA    R4,8(R4)           BUMP POINTER
         ST    R4,CNAMEL          MAKE IT CURRENT
BLDXREF  EQU   *
         TM    SW3,XREF           IS XREF TO BE DONE?
         BZ    SETPUT             NO, BYPASS IT
         L     R8,XREFADDR        ADDR OF XREF TABLE
         LA    R10,TEMPNAME       ADDR OF OBJECT FOR TABLE ADD
         BAL   R6,TBLSORT         ADD TO XREF TABLE
         B     SETPUT             RESTORE PUT RTN ADDR AND DO PUT
MOVE     MVC   TEMPNAME(0),REC
         SPACE 3
CHECKTBL EQU   *
         L     R4,NAMELIST        ADDR OF ELEMENT LIST
CHKLOOP  EQU   *
         CL    R4,CNAMEL          ARE WE AT FIRST EMPTY ENTRY?
         BE    BLDXREF            YES, NOT FOUND, COPY THIS ELEMENT
         CLC   LNAME(8),TEMPNAME  DOES SAME NAME EXIST?
         BE    SKIPMOD            YES, BYPASS THIS ELEMENT
         LA    R4,8(R4)           BUMP POINTER
         B     CHKLOOP
         SPACE 3
SKIPMOD  EQU   *
         BAL   R14,MSG9           ISSUE MOD DELETED MSG
         BAL   R14,MSG10          PUT IT TO PTFDATA ALSO
         LR    R6,R9              SET RETURN FOR NOT ++PTF
         BR    R9
         SPACE 3
PUTPUNCH EQU   *
         LA    R0,SKIP            SKIP TO ONE
         BAL   R14,MPRINT         SKIP TO ONE
         BALR  R6,0               RETURN FOR PUTS TO SYSPUNCH
         LA    R0,PRECORD         ADDR OF PRINT RECORD
         BAL   R14,MPRINT         LINK TO SYSPRINT RTN
         PUT   SYSPUNCH,RECORD
         BALR  R7,R9              RETURN FOR ++SYSMOD, LINK TO GET RTN
         LA    R0,SKIP
         BAL   R14,MPRINT         LINK TO SYSPRINT RTN
         LA    R7,NEXTPTF         PROCESS ++SYSMOD
         BR    R7
         EJECT
BLOCKRTN EQU   *
         OI    SW,HEADER          SET HEADER PRINTED
         TM    SW3,EJECT          SKIP TO ONE REQUIRED?
         BZ    NOEJECT            NO, CONTINUE
         BAL   R14,RPRINT         SKIP AND RESET COUNTER
NOEJECT  EQU   *
         TM    SW3,BLOCK          BLOCK PRINT REQUESTED?
         BZ    DOMSG3             WRITE MSG3 AND RETURN
         L     R1,LCOUNT          CURRENT LINE COUNT
         A     R1,FOURTEEN        BLOCK PRINT REQUIRES 14 LINES
         CL    R1,MAXLINES        WILL BLOCK PRINT FIT ON PAGE?
         BNH   COUNTOK            YES, CONTINUE
         OI    LCOUNT,X'FF'       FORCE SKIP TO ONE ON NEXT PRINT
COUNTOK  EQU   *
         BAL   R14,MSG3           START OF PTF MSG
DOHEADER EQU   *
         MVI   MSGAREA,C' '
         MVC   MSGAREA+1(119),MSGAREA   CLEAR TO BLANKS
         LA    R0,PMSGAREA
         BAL   R14,PRINT
         LA    R1,1               STARTING COUNT
         ST    R1,COUNT           SET IT IN THE PARM COUNT FIELD
BLOKLOOP EQU   *
         LA    R1,BLKPARM         ADDR OF PARM LIST
         L     R15,BLOCKPT        ADDR OF BLOCK PRINT RTN
         BALR  R14,R15
         LA    R0,PMSGAREA
         BAL   R14,PRINT
         MVI   MSGAREA,C' '
         MVC   MSGAREA+1(119),MSGAREA   CLEAR TO BLANKS
         L     R1,COUNT           CURRENT BLOCK LINE COUNT
         LA    R1,1(R1)           BUMP BY ONE
         ST    R1,COUNT           SAVE IN BLOCK PARM FOR NEXT LINE
         C     R1,MAXCOUNT        BUT, WAS THAT THE LAST LINE ?
         BL    BLOKLOOP           NO, LOOP TO DO NEXT BLOCK LINE
         LA    R0,PMSGAREA
         BAL   R14,PRINT
         B     COPY1
DOMSG3   EQU   *
         BAL   R14,MSG3           START OF PTF MSG
COPY1    EQU   *
         MVC   SKIPNAME(8),STOWA
         BR    R10
         EJECT
HEADERTN EQU   *
         TM    SW2,PHEADER        PRINT HEADER PAGES?
         BZR   R4                 NO, SKIPIT
         MVC   STOWA(8),IMSG3     MOVE HEADER DATA
         BAL   R10,DOHEADER       HEADER 1
         BAL   R10,DOHEADER       HEADER 2
         BAL   R10,DOHEADER       HEADER 3
         OI    LCOUNT,X'FF'       FORCE NEW PAGE
         BAL   R10,DOHEADER       HEADER 1
         BAL   R10,DOHEADER       HEADER 2
         BAL   R10,DOHEADER       HEADER 3
         OI    LCOUNT,X'FF'       FORCE NEW PAGE
         BR    R4
         EJECT
PRINTLST EQU   *
         TM    SW3,DOSCAN         IS THERE A LIST?
         BZ    NOSCAN             NO, NO LIST TO SCAN
         L     R4,APTFLIST        ADDR OF PTF LIST
         TM    SW,EXCLUDE         IS THIS AN EXCLUDE LIST?
         BZ    SCANLOOP           NO, DO 'NOT FOUND' LIST
         MVC   IMSG5+12(9),=C'EXCLUDED '    MAKT IT EXCLUDED MSG
         BALR  R7,0               SET LOOP ADDR
         TM    LSW,X'01'          WAS THIS ONE EXCLUDED?
         BZ    LISTED             NO, DO NOT LIST
         B     NLISTED            YES, PUT OUT EXCLUDED MSG
         USING LNAME,R4
SCANLOOP EQU   *
         BALR  R7,0               SET LOOP ADDR
         TM    LSW,X'01'          WAS SYSMOD FOUND?
         BO    LISTED             YES, CHECK NEXT ENTRY
NLISTED  EQU   *
         MVC   IMSG5+4(7),LNAME      MOVE PTF NUMBER TO MSG
         BAL   R14,MSG5           NOT FOUND MSG
LISTED   EQU   *
         LA    R4,8(R4)           BUMP POINTER
         CL    R4,ENDPTFL         END OF LIST?
         BLR   R7                 NO TRY NEXT ENTRY
NOSCAN   EQU   *
         TM    SW,SORT            WAS A SORT DONE?
         BO    DONTSKIP           YES, ALLREADY AT TOP OF PAGE
         BAL   R14,RPRINT         SKIP TO ONE
DONTSKIP EQU   *
         TM    SW3,PTFLIST        WAS PTF LIST DONE?
         BZ    PRNTXREF           NO, TRY XREF
         NI    SW3,255-PTFLIST    DISABLE PTFLIST
         L     R8,TADDR           ADDR OF TABLE
         L     R11,ESIZE          ENTRY SIZE MINUS 1
         LTR   R11,R11            IS ENTRY SIZE ZERO?
         BZ    PRNTXREF           YES,GO TRY XREF
         L     R15,LOWENTRY       ADDR OF LOWEST ENTRY
         LA    R15,8(R15)         SKIP OVER ZEROS
         ST    R15,LOWENTRY       PUT IT BACK
         MVC   SKIPNAME(8),=C'PTFLIST '
         BALR  R14,0              RETURN FOR LOOP AFTER PRINT
         L     R15,LOWENTRY       ADDR OF LOWEST ENTRY
         C     R15,ENDENTRY       ARE WE AT END?
         BE    ENDBLD1            YES,EXIT, THIS LINE EMPTY
         MVI   MSGAREA,C' '       CLEAR
         MVC   MSGAREA+1(119),MSGAREA  MSG AREA
         MVC   MSGAREA+90(8),SKIPNAME LIST NAME TO PRINT LINE
         LA    R1,MSGAREA         PRINT LINE ADDR
         LA    R11,8              LOOP COUNT
BLDLOOP  EQU   *
         C     R15,ENDENTRY       AT END?
         BE    ENDBLD             YES, OUTPUT LAST LINE
         MVC   0(8,R1),0(R15)     MOVE TO PRINT LINE
         LA    R1,11(R1)          STEP PRINT POSITION
         LA    R15,8(R15)         STEP TABLE POINTER
         BCT   R11,BLDLOOP        LOOP TILL ZERO
         ST    R15,LOWENTRY       PUT IT BACK
         LA    R0,PMSGAREA        ADDR OF PRINT LINE
         B     PRINT              DO PRINT
ENDBLD   EQU   *
         LA    R0,PMSGAREA        ADDR OF PRINT LINE
         BAL   R14,PRINT          PRINT LAST LINE
ENDBLD1  EQU   *
         BAL   R14,RPRINT         SKIP TO ONE
         EJECT
PRNTXREF EQU   *
         ST    R6,SAVER10         SAVE BAL REG
         TM    SW3,XREF           WAS XREF DONE?
         BZ    XREF1              NO, TRY FMID LIST
         NI    SW3,255-XREF       DISABLE XREF
         L     R8,XREFADDR        ADDR OF XREF TABLE
         L     R11,ESIZE          ENTRY SIZE MINUS 1
         LTR   R11,R11            IS IT ZERO?
         BZ    XREF1              YES, TRY FMID LIST
         MVC   SKIPNAME(8),=C'XREF    ' NEW LIST NAME
         BAL   R6,PRINTBL         PRINT XREF TABLE
XREF1    EQU   *
         TM    SW,SORT            DID WE DO A SORT?
         BO    XREF3              YES, DONT DO FMIDLIST YET
         TM    SW4,FMIDLIST       IS THERE AN FMID LIST?
         BZ    XREF2              NO RETURN
         NI    SW4,255-FMIDLIST
         L     R8,FMIDADDR        ADDR OF FMID TABLE
         L     R11,ESIZE          ENTRY SIZE
         LTR   R11,R11            IS IT ZERO
         BZ    XREF2              YES, BYPASS PRINT
         MVC   SKIPNAME(8),=C'FMIDLIST' NEW LIST NAME
         BAL   R14,RPRINT         SKIP TO ONE
         BAL   R6,PRINTBL         PRINT FMID TABLE
XREF2    EQU   *
         OI    LCOUNT,X'FF'       FORCE NEW PAGE
         BAL   R4,HEADERTN        TRY ENDING HEADER
XREF3    EQU   *
         L     R6,SAVER10         RESTORE BAL REG
         BR    R6
         EJECT
PRINTBL  EQU   *
         LA    R4,2               START FOR ADD LINES
         ST    R4,PACKDEC+4       SAVE IT
         SR    R4,R4
         ST    R4,WORKAREA        ASSUME ZERO TO START SCAN
         L     R15,LOWENTRY       ADDR OF LOWEST ENTRY
         LA    R15,16(R15)        SKIP OVER ZEROS
         ST    R15,LOWENTRY       PUT IT BACK
         BALR  R14,0              RETURN FROM PRINT
         MVI   MSGAREA,C' '       CLEAR
         MVC   MSGAREA+1(119),MSGAREA  MSGAREA
         MVC   MSGAREA+90(8),SKIPNAME LIST NAME TO PRINT LINE
         MVI   MSGAREA+28,C'*'
         MVI   MSGAREA+58,C'*'
         L     R4,WORKAREA        ARE WE IN ADD LINES?
         SRL   R4,1               NO ADD IF COUNT 0 OR 1
         LTR   R4,R4
         BNZ   ADDLINE            YES, ADD THEM
         L     R15,LOWENTRY       ADDR OF LOWEST ENTRY
         C     R15,ENDENTRY       ARE WE AT THE END?
         BER   R6                 YES, EXIT
         ST    R15,PACKDEC        SAVE LOWENTRY FOR ADDLINE
         LA    R1,MSGAREA         ADDR FOR MOVE
         BAL   R10,CHKDUP         SCAN FOR MULTIPLE ENTRIES
         LA    R1,MSGAREA+30      ADDR FOR MOVE
         BAL   R10,CHKDUP         SCAN FOR MULTIPLE ENTRIES
         LA    R1,MSGAREA+60      ADDR FOR MOVE
         BAL   R10,CHKDUP         SCAN FOR MULTIPLE ENTRIES
PASSCOMP EQU   *
         ST    R15,LOWENTRY       NEW LOWEST ENTRY
         L     R4,WORKAREA        GET MAXIMUM DUP COUNT
         LA    R4,1(R4)           ADD 1 IN CASE COUNT IS ODD
         SRL   R4,1               DIVIDE BY 2 (2 ENTRIES/LINE)
         A     R4,LCOUNT          PLUS CORRENT PRINT LINE COUNT
         CL    R4,MAXLINES        WILL THEY ALL FIT ON THIS PAGE?
         BL    LINESOK            YES, GO PRINT
         OI    LCOUNT,X'FF'       NO, FORCE NEW PAGE
LINESOK  EQU   *
         LA    R0,PMSGAREA        PRINT LINE ADDR
         B     PRINT              GO PRINT
UPCOUNT  EQU   *
         LA    R15,16(R15)        BUMP TABLE POINTER
         LTR   R4,R4              IS THIS FIRST DUP?
         BNZ   NOTFIRST           NO, CONTINUE TO COUNT DUPS
         MVC   20(8,R1),8(R15)    MOVE FIRST DUP TO PRINT
NOTFIRST EQU   *
         LA    R4,1(R4)           BUMP MAX COUNTER
         B     DUPLOOP
CHKDUP   EQU   *
         MVC   0(8,R1),0(R15)     MOVE ELEMENT NAME
         MVC   10(8,R1),8(R15)    MOVE SYSMOD NAME
DUPLOOP  EQU   *
         LA    R11,16(R15)        LAST ENTRY CHECK
         C     R11,ENDENTRY       END OF TABLE?
         BL    DOCOMP             NO, COMPARE TO FIND DUP
         LA    R10,PASSCOMP       SET RETURN TO DO NO MORE CHECKS
         B     ENDCOUNT
DOCOMP   EQU   *
         CLC   0(8,R15),16(R15)   THIS ENTRY SAME AS NEXT?
         BE    UPCOUNT            YES, STEP COUNTERS AND LOOP
ENDCOUNT EQU   *
         LA    R15,16(R15)        BUMP TABLE POINTER
         C     R4,WORKAREA        DID WE EXCEED PREVIOUS MAX?
         BL    SETCOUNT           NO,
         ST    R4,WORKAREA        YES, MAKE THIS NEW MAX
SETCOUNT EQU   *
         SR    R4,R4
         BR    R10
         EJECT
ADDLOOP  EQU   *
         SR    R4,R4
CLOOP    EQU   *
         LA    R11,16(R15)        END CHECK
         C     R11,ENDENTRY       ARE WE AT END?
         BE    ENDDUP             YES, GET OUT
         CLC   0(8,R15),16(R15)   THIS ENTRY SAME AS NEXT
         BNER  R10                NO, RETURN
         LA    R4,1(R4)           BUMP MAX COUNTER
         LA    R15,16(R15)        BUMP TABLE POINTER
         C     R4,PACKDEC+4       IS THIS THE CURRENT DUP?
         BE    MOVEDUP            YES, MOVE IT TO PRINT LINE
         L     R2,PACKDEC+4       GET CURRENT DUP VALUE
         LA    R2,1(R2)           ADD 1
         CR    R4,R2              IS THIS CURRENT VALUE + 1 ?
         BNE   CLOOP              NO, CONTINUE LOOPING
         LA    R4,1(R4)           BUMP COUNTER FOR THIS DUP
         MVC   10(8,R1),8(R15)    MOVE TO PRINT LINE
         B     CLOOP              CONTINUE LOOPING
MOVEDUP  EQU   *
         MVC   0(8,R1),8(R15)     MOVE SYSMOD NAME TO MSGAREA
         B     CLOOP              LOOP TO FIND NEXT ELEMENT
ADDLINE  EQU   *
         L     R15,PACKDEC        TABLE START FOR DUP LINES
         LA    R1,MSGAREA+10      FIRST POSITION
         BAL   R10,ADDLOOP
         LA    R1,MSGAREA+40      SECOND POSITION
         LA    R15,16(R15)        BUMP TABLE POINTER
         BAL   R10,ADDLOOP
         LA    R1,MSGAREA+70      THIRD POSITION
         LA    R15,16(R15)        BUMP TABLE POINTER
         BAL   R10,ADDLOOP
ENDDUP   EQU   *
         L     R4,PACKDEC+4       CURRENT DUP NUMBER
         LA    R4,2(R4)           BUMP BY 2 (2 DUPS/LINE)
         ST    R4,PACKDEC+4       SAVE IT
         C     R4,WORKAREA        GREATER THAN MAX?
         BNH   LINESOK            NO,DO NEXT DUP
         LA    R4,2               RESET
         ST    R4,PACKDEC+4       DUP COUNTER
         SR    R4,R4              RESET
         ST    R4,WORKAREA        MAX COUNTER
         B     LINESOK
         EJECT
         LTORG
         EJECT
PHRA0002 CSECT
         BALR  R12,0
         USING *,R12
         TM    SW2,UT2OPEN        IS SYSUT2 OPEN?
         BZ    NOSORT             NO, DONT CLOSE IT
         CLOSE MF=(E,OSYSUT2)
         CLOSE MF=(E,OUT2DIR)
NOSORT   EQU   *
         BALR R12,0               SET NEW BASE
         USING *,R12
         BAL   R14,MSG4           DONE MSG
         TM    SW2,OUTOPEN        IS PTFOUT OPEN?
         BZ    NOOUTPUT           NO, NO WRITE TO FINISH
         L     R8,ABSAMOUT        ADDR OF BSAM POINTERS
         BAL   R4,CHKWRITE        FINISH UP OUTPUT
         CLOSE MF=(E,OPTFOUT)
NOOUTPUT EQU   *
         TM    SW2,UT1OPEN        IS SYSUT1 OPEN?
         BZ    NTSYSUT1           NO, NO CLOSE REQUIRED
         CLOSE MF=(E,OSYSUT1)
NTSYSUT1 EQU   *
         TM    SW2,PUNOPEN        IS SYSPUNCH OPEN?
         BZ    NPUNO
         CLOSE MF=(E,OPUNCH)
         LA    R1,SYSPUNCH
         BAL   R10,FREEPOOL
NPUNO    EQU   *
         CLOSE MF=(E,ODDS)
         LA    R1,PTFDATA         DCB ADDR
         BAL   R10,FREEPOOL       FREE BUFFERS
         LA    R1,SYSPRINT        ADDR OF DCB
         BAL   R10,FREEPOOL
         LA    R1,PTFIN           ADDR OF DCB
         BAL   R10,FREEPOOL
         L     R13,4(R13)          SAVE AREA BACK POINTER
         FREEMAIN RU,SP=10
         LM    R14,R12,12(R13)    RESTORE REGS
         SR    R15,R15            ZERO RETURN CODE NO MATTER WHAT
         BR    R14                RETURN
         SPACE 3
FREEPOOL EQU   *
         FREEPOOL (R1)
         BR    R10
         EJECT
PHRA0003 CSECT
SAVE     DS    18F
         SPACE 3
BSAMWRIT EQU   *
         L     R11,BSAMADDR       ADDR OF BSAM AREA
         L     R14,BSAMBUFE       END OF BSAM IO AREA
         S     R14,BSAMBUFC       MINUS CURRENT POINTER
         BNZ   MOVEBUF            NO, PUT RECORD IN CURRENT BUFFER
DOWRITE  EQU   *
         L     R11,BSAMADDR       ADDR OF BSAM AREA
         TM    BSAMSW,FIRSTWT     HAVE WE WRITTEN YET?
         BZ    NOCHECK            NO, NOTHING TO CHECK
         CHECK (R8)
NOCHECK  EQU   *
         LA    R14,BSAMBUF        START OF IO BUFFER
         L     R1,BSAMBUFC        CURRENT POINTER
         CR    R1,R14             EQUAL?
         BER   R10                YES, NOTHING TO WRITE
         OI    BSAMSW,FIRSTWT+LASTWT
         SR    R1,R14             BLKSIZE FOR WRITE
         L     R2,DECDCBAD        DCB ADDR
         STH   R1,DCBBLKSI        BLKSIZE FOR WRITE
         WRITE (R8),SF,,(R14),'S',MF=E
         L     R11,BSAMLINK       ADDR OF OTHER BUFFER AREA
         ST    R11,BSAMADDR       MAKE IT CURRENT
         BAL   R15,SETUPBUF       RESET BUFFERS
MOVEBUF  EQU   *
         L     R14,BSAMBUFC       CURRENT POINTER
         MVC   0(80,R14),RECORD   MOVE OUT RECORD
         LA    R14,80(R14)        BUMP POINTER
         ST    R14,BSAMBUFC       MAKE CURRENT
         BR    R10
         EJECT
BSAMREAD EQU   *
         L     R11,BSAMADDR       ADDR OF BSAM AREA
         L     R14,BSAMBUFC       ADDR OF CURRENT ENTRY
         S     R14,BSAMBUFE       MINUS END ADDR
         BNZ   BUFMOVE            ARE WE AT END?
DOREAD   EQU   *
         CHECK (R8)
         L     R2,DECDCBAD        DCB ADDR
         LH    R14,DCBBLKSI       BYTE COUNT FOR READ
         L     R1,DCBIOBA         ADDR OF IOB
         SH    R14,22(R1)         MINUS RESIDULE BYTE COUNT
         STH   R14,RDCOUNT
         BAL   R4,READ
         ST    R11,BSAMADDR       MAKE IT CURRENT
         LA    R14,BSAMBUF        START OF IO AREA
         ST    R14,BSAMBUFC       MAKE IT CURRENT
         AH    R14,RDCOUNT        LENGTH OF NEXT RECORD
         ST    R14,BSAMBUFE       END OF IO AREA
BUFMOVE  EQU   *
         L     R14,BSAMBUFC       CURRENT POINTER
         MVC   RECORD(80),0(R14)   MOVE INTO RECORD
         LA    R14,80(R14)        BUMP POINTER
         ST    R14,BSAMBUFC       MAKE CURRENT
         BR    R10                RETURN
         SPACE 2
READ     EQU   *
         LA    R14,BSAMBUF        START OF IO AREA
         L     R2,DECDCBAD        DCB ADDR
         LH    R1,BSAMSIZE        MAX READ BLOCK SIZE
         STH   R1,DCBBLKSI
         READ  (R8),SF,,(R14),'S',MF=E
         L     R11,BSAMLINK       ADDR OF OTHER BUFFER AREA
         BR    R4
         SPACE 3
SCANRTN  EQU   *
         BAL   R10,SPACES         BYPASS SPACES
         CLI   REC,C'('           IS IT LEFT PAREN?
         BNE   ERROR3             NO, SYNTAX ERROR
         LA    R3,1(R3)           BUMP RECORD POINTER
SCANRTN1 EQU   *
         BAL   R10,SPACES         SKIP OVER BLANK CHARACTERS
         BAL   R10,LENGTH         GET LENGTH OF ELEMENT NAME
         BR    R11
         EJECT
GETBUF   EQU   *
         LH    R14,DCBBLKSI       MAXIMUM BLOCK SIZE
         LA    R14,3(R14)         ROUND UP
         SRL   R14,2              TO NEXT
         SLL   R14,2              FULL WORD
         LA    R1,DSSIZE(R14,R14)      GETMAIN SIZE
         GETMAIN R,LV=(R1),SP=10
         ST    R1,0(R8)           SAVE AREA POINTER
         LR    R8,R1              BASE FOR POINTER AREA
         LH    R15,DCBBLKSI       MAXIMUM BLKSIZE
         STH   R15,BSAMSIZE       SAVE FOR LATTER
         MVI   BSAMSW,X'00'
         ST    R2,DECDCBAD        SAVE DCB ADDR
         LA    R15,PTRSIZE(R8)    ADDR OF FIRST IO AREA
         ST    R15,BSAMADDR       SAVE AS FIRST BUFFER POINTER
         LA    R11,PREFIX(R15,R14) ADDR OF SECOND IO AREA
         ST    R15,BSAMLINK       LINK BUFFERS
         ST    R11,BSAMLINK-BSAMAREA(R15)   TOGETHER
         BAL   R15,SETUPBUF      SET UP BUFFER ADDRESSES
         L     R11,BSAMLINK       OTHER BUFFER NOW
         BAL   R15,SETUPBUF      SET UP BUFFER ADDRESSES
         BR    R7
         SPACE 3
SETUPBUF EQU   *
         LA    R14,BSAMBUF        ADDR OF BSAM BUFFER
         ST    R14,BSAMBUFC       MAKE IT CURRENT
         AH    R14,BSAMSIZE       ADD MAXIMUM BLKSIZE
         ST    R14,BSAMBUFE       SAVE IN END POINTER
         BR    R15
         EJECT
CHKWRITE EQU   *
         NI    BSAMSW,255-LASTWT
         BAL   R10,DOWRITE        WRITE LAST BUFFER
         TM    BSAMSW,LASTWT
         BZ    NOLWRITE
         CHECK (R8)
NOLWRITE EQU   *
         NI    BSAMSW,255-FIRSTWT-LASTWT
RESETBUF EQU   *
         BAL   R15,SETUPBUF       SET UP BUFFER ADDRESSES
         L     R11,BSAMLINK       ADDR OF OTHER BUFFER
         BAL   R15,SETUPBUF       SET UP BUFFER ADDRESSES
         BR    R4
         EJECT
LENGTH   EQU   *
         LR    R5,R3              START OF SCAN
LENGTH1  EQU   *
         C     R5,RECEND          END OF FIELD?
         BCR   10,R10             YES, RETURN WITH THIS LENGTH
         CLI   0(R5),C' '         IS IT A BLANK?
         BE    LENGTH2            YES, RETURN WITH THIS LENGTH
         CLI   0(R5),C'('         IS IT A RIGHT PAREN?
         BE    LENGTH2            YES, RETURN WITH THIS LENGTH
         CLI   0(R5),C')'         IS IT A LEFT PAREN?
         BE    LENGTH2            YES, RETURN WITH THIS LENGTH
         CLI   0(R5),C','         IS IT A COMMA?
         BE    LENGTH2            YES, RETURN WITH THIS LENGTH
         LA    R5,1(R5)           BUMP BY ONE
         B     LENGTH1
LENGTH2  EQU   *
         SR    R5,R3              CALCULATE LENGTH
         BR    R10                RETURN
         SPACE 3
SPACES1  EQU   *
         CLI   REC,SPACE          IS THIS A SPACE?
         BNE   CKCOMMA            CHECK IF ITS A COMMA
CKNEXT   EQU   *
         LA    R3,1(R3)           DUMP RECORD POINTER
SPACES   EQU   *
         C     R3,RECEND          END OF RECORD?
         BCR   10,R6              YES, RETURN
         B     SPACES1
CKCOMMA  EQU   *
         CLI   REC,COMMA          IS IT A COMMA?
         BNER  R10                NO, RETURN
         B     CKNEXT             YES, CONTINUE CHECKING FOR NO SPACE
         EJECT
ERROR1   EQU   *
         BAL   R10,ERRPRINT       LINK TO ERROR PRINT
         DC    AL1(L'EMSG1-1)
EMSG1    DC    C'UNKNOWN KEYWORD'
         DS    0H
ERROR2   EQU   *
         BAL   R10,ERRPRINT       LINK TO ERROR PRINT
         DC    AL1(L'EMSG2-1)
EMSG2    DC    C'SYSMOD NAME MUST 7 CHARACTERS'
         DS    0H
ERROR3   EQU   *
         MVC   EMSG3+23(7),STOWA  MOVE SYSMOD NAME TO MSG
         BAL   R10,ERRPRINT       LINK TO ERROR PRINT
         DC    AL1(L'EMSG3-1)
EMSG3    DC    C'SYNTAX ERROR IN SYSMOD        '
         DS    0H
ERROR4   EQU   *
         BAL   R10,PUTEMSG        LINK TO ERROR PRINT
         DC    AL1(L'EMSG4-1)
EMSG4    DC    C'SYSMOD IS TOO LARGE FOR TABLE- DO NOT USE NOMOD'
         DS    0H
ERROR5   EQU   *
         BAL   R10,ERRPRINT       LINK TO ERROR PRINT
         DC    AL1(L'EMSG5-1)
EMSG5    DC    C'DUPLICATE KEYWORD'
         DS    0H
ERROR6   EQU   *
         BAL   R10,ERRPRINT       LINK TO ERROR PRINT
         DC    AL1(L'EMSG6-1)
EMSG6    DC    C'SYNTAX ERROR'
         DS    0H
ERROR7   EQU   *
         BAL   R10,ERRPRINT       LINK TO ERROR PRINT
         DC    AL1(L'EMSG7-1)
EMSG7    DC    C'SYSMOD LIST TOO LARGE, SPECIFY LARGER LIST SIZE'
         DS    0H
ERROR8   EQU   *
         BAL   R10,PUTEMSG        LINK TO ERROR PRINT
         DC    AL1(L'EMSG8-1)
EMSG8    DC    C'INSUFFICIENT DIRECTORY SPACE FOR SYSUT2'
         DS    0H
ERROR9   EQU   *
         LA    R14,ABEND          ABEND AFTER PRINT
         BAL   R10,MSGPRINT       LINK TO PRINT MSG RTN
         DC    AL1(L'EMSG9-1)
EMSG9    DC    C'STOW RC=8 FOR ADD REQUEST'
         DS    0H
ERROR10  EQU   *
         BAL   R10,PUTEMSG
         DC    AL1(L'EMSG10-1)
EMSG10   DC    C'SYSUT2 DD MISSING'
         EJECT
         DS    0H
ERROR11  EQU   *
         BAL   R10,PUTEMSG
         DC    AL1(L'EMSG11-1)
EMSG11   DC    C'SYSUT1 DD MISSING'
         DS    0H
ERROR12  EQU   *
         BAL   R10,PUTEMSG
         DC    AL1(L'EMSG12-1)
EMSG12   DC    C'EXEC CARD PARMS EXCEED LENGTH OF 100'
         DS    0H
ERROR13  EQU   *
         BAL   R10,PUTEMSG
         DC    AL1(L'EMSG13-1)
EMSG13   DC    C'BLOCK PRINT REQUESTED BUT IEFSD095 NOT LINKED'
         DS    0H
MSG1     EQU   *
         MVC   IMSG1+17(7),STOWA  MOVE NAME TO MSG
         BAL   R10,MSGPRINT       LINK TO PRINT MSG RTN
         DC    AL1(L'IMSG1-1)
IMSG1    DC    C'DUPLICATE OF PTF         FOUND, LAST COPY USED'
         DS    0H
MSG2     EQU   *
         L     R4,RECCOUNT        CURRENT RECORD COUNT
         CVD   R4,PACKDEC         CONVERT TO DECIMAL
         SR    R4,R4              CLEAR COUNTER
         ST    R4,RECCOUNT        FOR NEXT TIME
         OI    PACKDEC+7,X'0F'    FIX UP LAST BYTE
         MVC   IMSG2B(9),EDITMASK MAKE RECORD COUNT
         ED    IMSG2B(8),PACKDEC+4 PRINTABLE
         LA    R0,IMSG2P
         B     PRINT
IMSG2P   DC    X'09'
IMSG2    DC    0CL20'*',20C'*'
IMSG2A   DC    C' END OF PTF         ** '
IMSG2B   DC    0CL57'*',C'         RECORDS ',20C'*',20C' '
         DC    20C' '
         DS    0H
MSG3     EQU   *
         MVC   RECORD+90(8),STOWA NAME TO RIGHT MARGIN
         MVC   IMSG2+32(8),STOWA  MOVE NAME TO MSG
         MVC   IMSG2+90(8),STOWA  NAME TO RIGHT MARGIN
         MVC   IMSG3+25(8),STOWA  MOVE NAME TO MSG
         MVC   IMSG3+90(8),STOWA  NAME TO RIGHT MARGIN
         LA    R0,IMSG3P
         B     PRINT
IMSG3P   DC    X'09'
IMSG3    DC    0CL20'*',20C'*'
IMSG3A   DC    C' PTF         '
IMSG3B   DC    0CL67'*',47C'*',20C' '
         DC    20C' '
         EJECT
         DS    0H
MSG4     EQU   *
         BAL   R10,MSGPRINT       LINK TO PRINT MSG RTN
         DC    AL1(L'IMSG4-1)
IMSG4    DC    C'PROCESSING COMPLETE'
         DS    0H
MSG5     EQU   *
         BAL   R10,MSGPRINT       LINK TO PRINT MSG RTN
         DC    AL1(L'IMSG5-1)
IMSG5    DC    C'PTF         NOT FOUND'
         DS    0H
MSG6     EQU   *
         BAL   R10,MSGPRINT       LINK TO PRINT MSG RTN
         DC    AL1(L'IMSG6-1)
IMSG6    DC    C'READING PTFOUT'
         DS    0H
MSG7     EQU   *
         BAL   R10,MSGPRINT       LINK TO PRINT MSG RTN
         DC    AL1(L'IMSG7-1)
IMSG7    DC    C'READING PTFIN'
         DS    0H
MSG8     EQU   *
         SR    R11,R11            MAKE ENTRY SIZE
         ST    R11,ESIZE          ZERO
         LR    R14,R6             SET RETURN ADDR
         BAL   R10,MSGPRINT       PRINT MSG
         DC    AL1(L'IMSG8-1)
IMSG8    DC    C'PTFLIST OR XREF TABLE OVERFLOW--FUNCTION DISABLED'
         DS    0H
MSG9     EQU   *
         MVC   IMSG9A(7),STOWA    SYSMOD NAME TO MSG
         MVC   IMSG9B(8),TEMPNAME ELEMENT NAME TO MSG
         BAL   R10,MSGPRINT       PRINT MSG
         DC    AL1(L'IMSG9+L'IMSG9A+L'IMSG9B-1)
IMSG9    DC    C'NOMOD PROCESSING--SYSMOD '
IMSG9A   DC    C'        MODULE ELEMENT '
IMSG9B   DC    C'         DELETED'
         DS    0H
MSG10    EQU   *
         MVC   IMSG10(L'IMSG9+L'IMSG9A+L'IMSG9B),IMSG9
         MVC   IMSG10+90(8),STOWA
         LA    R0,IMSG10P
         B     PRINT
IMSG10P  DC    X'09'
IMSG10   DC    CL120' '
         EJECT
         DS    0H
ABEND    EQU   *
         ABEND 1,DUMP
         SPACE 3
EMOVE    MVC   MSGAREA(0),1(R10)
ERRPRINT EQU   *
         LA    R0,PRECORD         PRINT ADDR FOR RECORD
         BAL   R14,MPRINT         LINK TO SYSPRINT RTN
         MVI   RECORD,C' '
         MVC   RECORD+1(119),RECORD  MOVE BLANKS ACCROSS RECORD
         MVI   REC,C'*'
         LA    R0,PRECORD
         BAL   R14,MPRINT         LINK TO SYSPRINT RTN
PUTEMSG  EQU   *
         BAL   R14,MSGPRINT       GO DO PRINT
         CALL  PHRA0002           CLEAN UP AND EXIT
         SPACE 3
MSGPRINT EQU   *
         MVI   MSGAREA,C' '  BLANK TO MSG AREA
         MVC   MSGAREA+1(119),MSGAREA   CLEAR TO BLANKS
         IC    R1,0(R10)          GET MSG LENGTH BYTE
         EX    R1,EMOVE
         LA    R0,PMSGAREA
MPRINT   EQU   *
         LA    R2,SYSPRINT        DCB ADDR
         LR    R1,R2
         L     R15,DCBWRITE
         BR    R15
         SPACE 3
RPRINT   EQU   *
         LA    R0,SKIP            SKIP TO ONE
         SR    R15,R15            SET LINE COUNT TO ZERO
         B     RPRINT1
PRINT    EQU   *
         L     R15,LCOUNT         CURRENT LINE COUNT
         CL    R15,MAXLINES       ARE WE AT MAX?
         BL    NOSKIP             NO, DO PRINT
         STM   R14,R1,PRINTSAV    SAVE REGS OVER SKIP TO 1
         PUT   PTFDATA,SKIP       SKIP TO 1
         LM    R14,R1,PRINTSAV
         SR    R15,R15            RESTART LINE COUNT
NOSKIP   EQU   *
         LA    R15,1(R15)
RPRINT1  EQU   *
         ST    R15,LCOUNT         SAVE LINE COUNT
         LA    R2,PTFDATA
         LR    R1,R2              DCB ADDR FOR PUT
         L     R15,DCBWRITE       ADDR OF PUT ROUTINE
         BR    R15                BRANCH TO PUT ROUTINE
         EJECT
TBLSORT  EQU   *
         L     R11,ESIZE          ENTRY SIZE
         LTR   R11,R11            IS ENTRY SIZE ZERO?
         BZR   R6                 YES, RETURN
         L     R14,LOWENTRY       ADDR OF LOWEST ENTRY
         LA    R0,TSTART          START OF TABLE
         CR    R0,R14             IS TABLE FULL?
         BE    MSG8               PUT OUT ERROR MSG
         LR    R15,R14            SAVE START POINTER
COMPLOOP EQU   *
         EX    R11,COMP1          COMPARE OBJECT TO TABLE ENTRY
         BER   R6                 DO NOT MAKE DUPLICATE ENTRIES
         BNH   MOVEIT             MOVE IF NOT HIGHER THAN TABLE
         ST    R15,WORKAREA       INSERT ADDR
         LA    R15,1(R11,R15)     INCREMENT TABLE POINTER
         C     R15,ENDENTRY       END OF TABLE?
         BNE   COMPLOOP           NO, LOOP TO COMPARE
MOVEIT   EQU   *
         SR    R15,R14            LENGTH OF MOVE
         LR    R1,R11             ENTRY SIZE MINUS 1
         LA    R1,1(R1)           ENTRY SIZE
         L     R0,LOWENTRY        ADDR OF LOWEST ENTRY
         SR    R0,R1              NEW LOWEST ENTRY ADDR
         ST    R0,LOWENTRY        SAVE IT
         LR    R1,R15             LENGTH OF MOVE
         MVCL  R0,R14             DO MOVE
         L     R15,WORKAREA       INSERT ADDR
         EX    R11,MOVETBL1        PLACE ENTRY INTO TABLE
         BR    R6
         SPACE 3
COMP1    CLC   0(0,R10),0(R15)
MOVETBL1 MVC   0(0,R15),0(R10)
         EJECT
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 3
COMMA    EQU   C','
SPACE    EQU   C' '
SW       DC    X'00'
HEADER   EQU   128
EXCLUDE  EQU   64
NRDBACK  EQU   32
NOMOD    EQU   16
LIST     EQU   8
SORT     EQU   4
PTFSEL   EQU   2
DISPOLD  EQU   1
SW2      DC    X'00'
UT2OPEN  EQU   128
INNOMOD  EQU   64
UT1LOOP  EQU   32
UT1OPEN  EQU   16
OUTOPEN  EQU   8
PUNOPEN  EQU   4
SYSMOD   EQU   2
PHEADER  EQU   1
SW3      DC    X'00'
XREF     EQU   128
PTFLIST  EQU   64
NOMERGE  EQU   32
EJECT    EQU   16
DOSCAN   EQU   8
EOFPTFIN EQU   4
SYINOPEN EQU   2
BLOCK    EQU   1
SW4      DC    X'00'
NLISTALL EQU   128
NCOMMENT EQU   64
LISTREC  EQU   32
FMIDLIST EQU   16
LINES    EQU   8
NINVER   EQU   4
FMIDPARN EQU   2
FMIDID   EQU   1
         EJECT
         PRINT NOGEN
SYSUT2   DCB   DDNAME=SYSUT2,DSORG=PO,MACRF=(R,W),BLKSIZE=3040,        X
               RECFM=U,EODAD=UT2EOF,EXLST=XLIST
UT2DIR   DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=R,KEYLEN=8,EODAD=DIREOF,   X
               RECFM=F,LRECL=256,BLKSIZE=256
PTFIN    DCB   DDNAME=PTFIN,DSORG=PS,EODAD=PTFINEOF,MACRF=GM,LRECL=80
PTFOUT   DCB   DDNAME=PTFOUT,DSORG=PS,MACRF=(R,W),EXLST=XLIST,         X
               EODAD=POUTEOF
SYSPUNCH DCB   DDNAME=SYSPUNCH,DSORG=PS,MACRF=PM,LRECL=80,EXLST=XLIST
SYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,LRECL=121,BLKSIZE=121,         X
               MACRF=PM,RECFM=FM
PTFDATA  DCB   DDNAME=PTFDATA,DSORG=PS,LRECL=121,MACRF=PM,RECFM=FBM
SYSUT1   DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=(R,W),BLKSIZE=3040,        X
               RECFM=U,EODAD=UT1EOF,EXLST=XLIST
OUT2DIR  OPEN  (UT2DIR,INPUT),MF=L
OPUNCH   OPEN  (SYSPUNCH,OUTPUT),MF=L
OSYSUT1  OPEN  (SYSUT1,OUTIN),MF=L
OSYSUT2  OPEN  (SYSUT2,OUTIN),MF=L
OPTFOUT  OPEN  (PTFOUT,INOUT),MF=L
ODDS     OPEN  (PTFIN,,SYSPRINT,OUTPUT,PTFDATA,OUTPUT),MF=L
TADDR    DC    A(1)         ENTRY SIZE * SYSMODS
XREFADDR DC    A(8)         ENTRY SIZE * SYSMODS * ELEMENTS/SYSMOD
FMIDADDR DC    A(4)         ENTRY SIZE * SYSMODS * ++VER/SYSMOD
SMCOUNT  DC    A(1500)      DEFAULT SYSMOD COUNT VALUE
MAXLINES DC    F'55'
FOURTEEN DC    F'14'
LCOUNT   DC    F'55'
APTFLIST DC    F'50'
NAMELIST DC    F'800'
APUTRTN  DC    A(PUTPTF)
RECEND   DC    A(RECORD+100)
USERL    DC    A(STODATSZ)
TTRMASK  DC    (L'STOTTR)X'FF',(L'STOCTTRN)X'00'
XLIST    DC    X'87',AL3(INFMJFCB)
BLKPARM  DC    A(STOWA)
         DC    A(COUNT)
         DC    A(MSGAREA)
         DC    A(DATASIZE)
COUNT    DC    F'0'
DATASIZE DC    F'7'
BLOCKPT  DC    V(IEFSD095)        SYS1.AOSB0
MAXCOUNT DC    F'13'
RECCOUNT DC    F'0'
EDITMASK DC    X'402020202020202040'
SKIP     DC    X'8B',CL90'       SKIP TO ONE'
SKIPNAME DC    30C' '
PRECORD  DC    X'09'
RECORD   DC    120C' '
ERECORD  EQU   RECORD+71
PMSGAREA DC    X'09'
MSGAREA  DC    120C' '
         EJECT
         LTORG
PACKDEC  DS    D
ENDPTFL  DS    F
ENDNAMEL DS    F
CNAMEL   DS    F
ABSAMUT1 DS    F
ABSAMUT2 DS    F
ABSAMOUT DS    F
PRINTSAV DS    4F
AGETRTN  DS    F
SAVER10  DS    F
CURDE    DS    F
         DS    0F
JFCB     IEFJFCBN LIST=YES
TEMPNAME DS    16C
STOWA    DS    CL(STOWSIZE)
KEY      DS    8C
LEN      DS    2C
DIR      DS    254C
         DCBD  DSORG=(PS,PO)
         END
