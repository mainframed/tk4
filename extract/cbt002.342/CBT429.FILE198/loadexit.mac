*********************************************************************
*                                                                   *
*                        HASP EXIT 05                               *
*                                                                   *
*     This exit processes the $REPEXIT and $ADDEXIT JES2 commands.  *
*                                                                   *
*     > $REPEXIT - Replace a JES2 exit module.  Command syntax is   *
*                  "$REPEXIT,modname".  The following rules and     *
*                  restrictions apply to the use of $REPEXIT:       *
*               1. The exit module to be replaced must be a JES2    *
*                  module.  The exit environment may be "JES2",     *
*                  "SUBTASK", "USER", or "FSS".                     *
*               2. The exit module must have been previously loaded *
*                  by a LOADMOD JES2PARM statement, or HASPINIT     *
*                  during the last JES2 initialization, or by a     *
*                  previous $REPEXIT command.                       *
*               3. The routine names and number of routines that    *
*                  are associated with the exit cannot be changed - *
*                  $REPEXIT will ignore new/changed routine names.  *
*                  If either of these needs to be changed, use the  *
*                  $ADDEXIT command to add a new exit load module.  *
*               4. If the original module resides in the JES2       *
*                  private area, the new copy will be loaded into   *
*                  JES2 private.  If the original module does not   *
*                  reside in the JES2 private area, the new copy    *
*                  will be loaded into CSA.                         *
*               5. The new copy of the module must be found in an   *
*                  APF authorized LNKLSTxx library.                 *
*     > $ADDEXIT - Add a JES2 exit module.  Command syntax is       *
*                  "$ADDEXIT,modname,exit#".  Exit# can range from  *
*                  1 to 255 and must be specified.                  *
*                  The following rules and restrictions apply to    *
*                  the use of $ADDEXIT:                             *
*               1. The exit module to be added must be a JES2       *
*                  module.  The exit environment may be "JES2",     *
*                  "SUBTASK", "USER", or "FSS".                     *
*               2. The exit must not be currently defined to JES2   *
*                  or a new copy will not be loaded and defined.    *
*               3. The new exit module will be loaded into either   *
*                  JES2 private or CSA, depending on the exit       *
*                  environment.                                     *
*               4. The copy of the exit module to be added must be  *
*                  found in an APF authorized LNKLSTxx library.     *
*               5. The newly added exit module and routines must be *
*                  defined in JES2PARM before the next time JES2 is *
*                  restarted.  If this is not done, an exit module  *
*                  that was loaded into JES2 private will be lost   *
*                  on a subsequent restart.                         *
*                                                                   *
*     Entry point: EXIT05                                           *
*                                                                   *
*     Input registers:                                              *
*        R0-4   N/A                                                 *
*        R5     Pointer to current operand address                  *
*        R6     Increment value of 4                                *
*        R7     Pointer to address of last operand                  *
*        R8-10  N/A                                                 *
*        R11    HCT address                                         *
*        R12    N/A                                                 *
*        R13    PCE address                                         *
*        R14    Return address                                      *
*        R15    Entry address                                       *
*                                                                   *
*     Output registers:                                             *
*        R0     Unchanged or $CRET message length                   *
*        R1-14  Unchanged                                           *
*        R15    Return code                                         *
*                                                                   *
*     Register usage(internal):                                     *
*        R0-8   Work registers                                      *
*        R9     WORKAREA address                                    *
*        R10    JCT address                                         *
*        R11    HCT address                                         *
*        R12    Base register                                       *
*        R13    PCE address                                         *
*        R14-15 Work and linkage registers                          *
*                                                                   *
*     Author: Bob Break                                             *
*             St. Louis, Mo.                                        *
*             314-340-9301                                          *
*             314-845-2018                                          *
*     IBMMAIL - USSWB2ZB                                            *
*     EMAIL   - CB7485@MOMAIL.SBC.COM                               *
*               bbreak@swbell.net                                   *
*                                                                   *
*********************************************************************

         COPY  $HASPGBL

HASPEX05 $MODULE ENVIRON=JES2,                                         X
               RMODE=ANY,                                              X
               SPLEVEL=NOCHECK,                                        X
               CVT,                                                    X
               PDS,                                                    X
               PSA,                                                    X
               RPL,                                                    X
               $BUFFER,                                                X
               $CADDR,                                                 X
               $CAT,                                                   X
               $COMWORK,                                               X
               $DCT,                                                   X
               $HASPEQU,                                               X
               $HCT,                                                   X
               $HCCT,                                                  X
               $JCT,                                                   X
               $JOE,                                                   X
               $JQE,                                                   X
               $LMT,                                                   X
               $MIT,                                                   X
               $MITETBL,                                               X
               $PCE,                                                   X
               $PIT,                                                   X
               $PSV,                                                   X
               $TQE,                                                   X
               $USERCBS,                                               X
               $XECB,                                                  X
               $XIT,                                                   X
               $XRT

EXIT05  $ENTRY BASE=R12            Exit routine entry point

*********************************************************************
*                                                                   *
*        Save caller's registers and establish addressabilities.    *
*                                                                   *
*********************************************************************

EXIT000 $SAVE  NAME=EXIT05         Save caller's registers
         LR    R12,R15             Set base register

*********************************************************************
*                                                                   *
*        Obtain a module workarea.                                  *
*                                                                   *
*********************************************************************

         LA    R1,EXIT05WL         Get workarea length
         LA    R1,3(,R1)           Round up to word boundary
         SRL   R1,2                Convert to number of words
         LA    R1,1(,R1)           Add one for identifier
        $GETWORK WORDS=(R1),USE=EX05
         LA    R1,4(,R1)           Point past identifier
         LR    R9,R1               Set workarea address
         LR    R14,R1              Set move to address
         LA    R15,EXIT05WL        Set move to length
         XR    R1,R1               Set move from length and pad
         MVCL  R14,R0              Clear workarea
         USING EXIT05W,R9

*********************************************************************
*                                                                   *
*        Determine if this is a the $REPEXIT or $ADDEXIT command.   *
*                                                                   *
*********************************************************************

EXIT100  LA    R1,COMVERB            Get command verb address
         CLC   0(7,R1),=C'REPEXIT'   $REPEXIT command
         BE    EXIT200               Yes - branch, process $REPEXIT
         CLC   0(7,R1),=C'ADDEXIT'   $ADDEXIT command
         BE    EXIT300               Yes - branch, process $ADDEXIT
         XR    R15,R15               Set return code
         B     RETURN                Branch - return

*********************************************************************
*                                                                   *
*        Process the $REPEXIT command.                              *
*                                                                   *
*********************************************************************

EXIT200  LA    R1,COMVERB            Get command verb address
         MVC   EXITMODN(8),$BLANKS   Save modname
         MVC   EXITMODN(8),8(R1)     *

*********************************************************************
*                                                                   *
*        Check if the exit module is currently defined to JES2.     *
*                                                                   *
*********************************************************************

EXIT210  ICM   R8,15,$LMT1           Get LMT address
         BZ    EXIT213               Branch - no LMT chain
         USING LMT,R8
EXIT211  CLC   LMTMODNM,EXITMODN     Module name match?
         BNE   EXIT212               No - branch, continue
         TM    LMTFLG1,LMT1INVD      LMT invalid?
         BZ    EXIT220               No - branch, continue
EXIT212  ICM   R8,15,LMTCHAIN        Get next LMT entry
         BNZ   EXIT211               Loop back to check next LMT entry
EXIT213  MVC   COMMAND(8),EXITMODN   Set modname in message text
         MVC   COMMAND+8(MSG1L),MSG1ERR1  Set fixed message text
         B     EXIT250               Branch - continue

*********************************************************************
*                                                                   *
*        Invoke the MVS BLDL service to check if a copy of the      *
*        module is located in a LINKLIST library.  If so, get       *
*        storage to perform a directed load.                        *
*                                                                   *
*********************************************************************

         USING PDSBLDL,R2
         USING PDS2,R3
EXIT220  LA    R2,$GENWORK           Use $GENWORK as BLDL parm area
         MVC   PDSBLDLN,$H1          Set number of BLDL entries
         MVC   PDSBLDLL,=AL2(PDS2BLEN)  Set BLDL entry length
         LA    R3,PDSBLDLE           Point to the BLDL entry
         XC    PDSBLDLE(PDS2BLEN+LMTLEN),PDSBLDLE  Clear BLDL workarea
         MVC   PDS2NAME,EXITMODN     Set module name for BLDL
         L     R1,CVTPTR             Get CVT pointer
         L     R1,CVTLINK-CVT(,R1)   Get LNKLIST DCB pointer
         BLDL  (R1),(R2)             Locate module
         DROP  R2                    PDSBLDL
         LTR   R15,R15               Module located in LINKLIST?
         BNZ   EXIT221               No - branch, error
         TM    PDS2LIBF,PDS2LLNK     Module reside in linklist?
         BO    EXIT222               Yes - branch, continue
EXIT221  MVC   COMMAND(8),EXITMODN   Set modname in message text
         MVC   COMMAND+8(MSG1L),MSG1ERR2  Set fixed message text
         B     EXIT250               Branch - continue
EXIT222  XR    R0,R0                 Get module length
         ICM   R0,7,PDS2STOR           from the pds directory
         XR    R2,R2                 Assume SP=0 (JES2 private module)
         TM    LMTFLG1,LMT1PVT       Module loaded in JES2 private?
         BO    EXIT223               Yes - branch, continue
         ICM   R2,1,SP241            Set SP=241
EXIT223  TM    PDS2FTB2,PDSLRMOD     Module RMODE31?
         BO    EXIT224               Yes - branch, continue
         GETMAIN RC,LV=(R0),SP=(R2),KEY=0,LOC=BELOW
         B     EXIT225               Branch - continue
EXIT224  GETMAIN RC,LV=(R0),SP=(R2),KEY=0,LOC=ANY
EXIT225  LR    R6,R1                 Set storage address for LOAD
         LR    R14,R1                Set move to address
         XR    R15,R15               Set move to length
         ICM   R15,7,PDS2STOR        *
         XR    R1,R1                 Set move from length and pad
         MVCL  R14,R0                Clear module area

*********************************************************************
*                                                                   *
*        Perform the directed load of the new module.               *
*                                                                   *
*********************************************************************

EXIT230  LA    R4,EXITMODN           Set modname address
         L     R5,CVTPTR             Get CVT pointer
         L     R5,CVTLINK-CVT(,R5)   Get LNKLIST DCB pointer
         IPK   0(0)                  Get current psw key
         SPKA  0(0)                  Set psw key zero
         LOAD  EPLOC=(R4),DCB=(R5),ADDR=(R6),ERRET=EXIT231
EXIT231  SPKA  0(R2)                 Reset psw key
         LTR   R15,R15               Load successful?
         BZ    EXIT235               Yes - branch, continue
         MVC   COMMAND(8),EXITMODN   Set modname in message text
         MVC   COMMAND+8(MSG1L),MSG1ERR3  Set fixed message text
         XR    R0,R0                 Get module length
         ICM   R0,7,PDS2STOR           from the pds directory
         TM    LMTFLG1,LMT1PVT       Module loaded in JES private?
         BO    EXIT250               Yes - branch, continue
         XR    R2,R2                 Set SP=241
         ICM   R2,1,SP241            *
         FREEMAIN RU,A=(R6),LV=(R0),SP=(R2),KEY=0
         B     EXIT250               Branch, continue

*********************************************************************
*                                                                   *
*        Replace the module information in the LMT.                 *
*                                                                   *
*********************************************************************

EXIT235  ST    R6,LMTMITAD           Set module address in LMT
         TM    PDS2FTB2,PDSLRMOD     Module RMODE31?
         BO    EXIT236               Yes - branch, continue
         OI    LMTFLG2,LMT2RM24      Set RMODE24 flag on
         NI    LMTFLG2,255-LMT2RM31  Turn RMODE31 flag off
         B     EXIT237               Branch - continue
EXIT236  OI    LMTFLG2,LMT2RM31      Set RMODE31 flag on
         NI    LMTFLG2,255-LMT2RM24  Turn RMODE24 flag off
EXIT237  TM    LMTFLG1,LMT1PVT       Module loaded in JES private?
         BO    EXIT240               Yes - branch, continue
         MVI   LMTSUBPL,X'F1'        Set SP=241
         MVC   LMTMODLN,PDS2STOR     Set module length
         OI    LMTFLG1,LMT1CMN       Set load flags
         DROP  R3                    PDS2

*********************************************************************
*                                                                   *
*        Replace the module information in the XRT.                 *
*                                                                   *
*********************************************************************

         USING XIT,R1
         USING XRT,R3
EXIT240  LA    R0,XIT#PTS            Get maximum # XIT entries
         L     R1,$XITADDR           Get XIT chain address
EXIT241  ICM   R3,15,XITXRTAD        Get XRT address
         BZ    EXIT246               Branch - no XRT, check next XIT
         XR    R15,R15               Get number of routines
         IC    R15,XIT#RTNS            associated with this exit point
EXIT242  L     R14,LMTMITAD          Get MIT address
         L     R14,MITENTAD-MIT(,R14)  Get MITETBL address
         USING MTE,R14
EXIT243  CLI   MTENAME,X'FF'         Last MTE?
         BE    EXIT245               Yes - branch, check next XRT
         CLC   XRTRNAME,MTENAME      XRT name match MIT name?
         BE    EXIT244               Yes - branch, continue
         LA    R14,MTELEN(,R14)      Bump to next MITETBL entry
         B     EXIT243               Loop back for next MITETBL entry
EXIT244  MVC   XRTRADDR,MTEADDR      Set routine addr in XRT
EXIT245  LA    R3,XRTLNGTH(,R3)      Bump to next XRT entry
         BCT   R15,EXIT242           Loop back for next XRT entry
         DROP  R3,R8,R14             XRT, LMT, MTE
EXIT246  LA    R1,XITLNGTH(,R1)      Bump to next XIT entry
         BCT   R0,EXIT241            Loop back for next XIT entry
         DROP  R1                    XIT
         MVC   COMMAND(8),EXITMODN   Set modname in message text
         MVC   COMMAND+8(MSG1L),MSG1OK  Set fixed message text

*********************************************************************
*                                                                   *
*        Set the message length and return.                         *
*                                                                   *
*********************************************************************

EXIT250  LA    R0,8+MSG1L            Get message length
        $STORE (R0)                    and set in return R0
         MVC   RETCODE,=F'16'        Set return code
         B     RETURN                Branch - return

*********************************************************************
*                                                                   *
*        Process the $ADDEXIT command.                              *
*                                                                   *
*********************************************************************

EXIT300  LA    R3,COMVERB            Get command verb address
         LA    R3,8(,R3)             Point to module name
         LR    R15,R3                *
         LA    R0,9                  Set max. modname check length
EXIT301  CLI   0(R15),C','           "," delimiter found?
         BE    EXIT302               Yes - branch, continue
         LA    R15,1(,R15)           Bump to next modname position
         BCT   R0,EXIT301            Loop back for next character
         MVC   COMMAND(8),=C'$ADDEXIT'  Set command in message text
         MVC   COMMAND+8(MSG2L),MSG2ERR1  Set fixed message text
         B     EXIT390               Branch - continue
EXIT302  LR    R14,R15               Calculate exit modname length
         SLR   R14,R3                *
         BCTR  R14,0                 Minus 1 for execute
         MVC   EXITMODN(8),$BLANKS   Blank init modname
         MVC   EXITMODN(0),0(R3)     Executed instruction
         EX    R14,*-6               Save modname
         LA    R15,1(,R15)           Point to exit number
         LR    R3,R15                *
         LA    R0,4                  Set max. exit # check length
EXIT303  CLI   0(R15),C','           "," delimiter found?
         BE    EXIT304               Yes - branch, continue
         CLI   0(R15),C' '           " " delimiter found?
         BE    EXIT304               Yes - branch, continue
         LA    R15,1(,R15)           Bump to next exit nbr position
         BCT   R0,EXIT303            Loop back for next character
EXIT304  LR    R14,R15               Calculate exit number length
         SLR   R14,R3                *
         BCTR  R14,0                 Minus 1 for execute
         TRT   0(0,R3),TRTABLE       Executed instruction
         EX    R14,*-6               Exit number valid?
         BZ    EXIT305               Yes - branch, continue
         MVC   COMMAND(8),=C'$ADDEXIT'  Set command in message text
         MVC   COMMAND+8(MSG2L),MSG2ERR2  Set fixed message text
         B     EXIT390               Branch - continue
EXIT305  PACK  WORKDBL,0(0,R3)       Executed instruction
         EX    R14,*-6               Convert exit number to decimal
         CVB   R1,WORKDBL            Convert exit number to binary
         STCM  R1,1,EXITNBR          Save exit number
         C     R1,$F1                Exit number less than 1?
         BL    EXIT306               Yes - branch, error
         C     R1,$F255              Exit number greater than 255?
         BNH   EXIT310               No - branch, continue
EXIT306  MVC   COMMAND(8),=C'$ADDEXIT'  Set command in message text
         MVC   COMMAND+8(MSG2L),MSG2ERR3  Set fixed message text
         B     EXIT390               Branch - continue

*********************************************************************
*                                                                   *
*        Check if the exit module is currently defined to JES2.     *
*                                                                   *
*********************************************************************

EXIT310  ICM   R8,15,$LMT1           Get LMT address
         BZ    EXIT313               Branch - no LMT chain
         USING LMT,R8
EXIT311  CLC   LMTMODNM,EXITMODN     Module name match?
         BNE   EXIT312               No - branch, continue
         TM    LMTFLG1,LMT1INVD      LMT invalid?
         BO    EXIT312               Yes - branch, continue
         MVC   COMMAND(8),EXITMODN   Set modname in message text
         MVC   COMMAND+8(MSG2L),MSG2ERR4  Set fixed message text
         B     EXIT390               Branch - continue
EXIT312  ICM   R8,15,LMTCHAIN        Get next LMT entry
         BNZ   EXIT311               Loop back to check next LMT entry
EXIT313  XR    R14,R14               Get new exit number
         ICM   R14,1,EXITNBR         *
         LA    R1,XITLNGTH           Get XIT length
         XR    R0,R0                 Calculate XIT index
         MR    R0,R14                *
         L     R15,$XITADDR          Get XIT chain address
         ALR   R15,R1                Calculate XIT address
         ST    R15,EXITXIT           Save XIT address
         USING XIT,R15
         TM    XITFLAGS,XITCMN       Must exit reside in CSA/LPA?
         BZ    EXIT314               No - branch, continue
         OI    WORKFLAG,EXITCSA      Set exit resides in CSA flag
         B     EXIT315               Branch - continue
EXIT314  OI    WORKFLAG,EXITPVT      Set exit resides in pvt flag
         DROP  R15                   XIT

*********************************************************************
*                                                                   *
*        The exit module is not currently defined to JES2, so       *
*        acquire an LMT for the module.                             *
*                                                                   *
*********************************************************************

EXIT315  XR    R2,R2                 Assume SP=0 (JES2 private module)
         TM    WORKFLAG,EXITPVT      Module loaded in JES2 private?
         BO    EXIT316               Yes - branch, continue
         ICM   R2,1,SP241            Set SP=241
EXIT316  LA    R0,LMTLEN+$CSBPRFX    Get LMT+prefix length
         GETMAIN RC,LV=(R0),SP=(R2),LOC=ANY
         LR    R8,R1                 Save new LMT prefix address
         LR    R14,R1                Set move to address
         LA    R15,LMTLEN+$CSBPRFX   Set move to length
         XR    R1,R1                 Set move from length and pad
         MVCL  R14,R0                Clear LMT and prefix
         MVC   $CSBID(4,R8),=C'LMT '  Set eyecatcher in prefix
         STCM  R2,1,$CSBSPLN(R8)     Set storage subpool in prefix
         LA    R0,LMTLEN+$CSBPRFX    Set LMT+prefix length in prefix
         STCM  R0,7,$CSBSPLN+1(R8)   *
         LA    R8,$CSBPRFX(,R8)      Point to actual LMT
         ST    R8,EXITLMTA           Save new LMT address

*********************************************************************
*                                                                   *
*        Invoke the MVS BLDL service to check if a copy of the      *
*        module is located in a LINKLIST library.  If so, get       *
*        storage to perform a directed load.                        *
*                                                                   *
*********************************************************************

         USING PDSBLDL,R2
         USING PDS2,R3
EXIT320  LA    R2,$GENWORK           Use $GENWORK as BLDL parm area
         MVC   PDSBLDLN,$H1          Set number of BLDL entries
         MVC   PDSBLDLL,=AL2(PDS2BLEN)  Set BLDL entry length
         LA    R3,PDSBLDLE           Point to the BLDL entry
         XC    PDSBLDLE(PDS2BLEN+LMTLEN),PDSBLDLE  Clear BLDL workarea
         MVC   PDS2NAME,EXITMODN     Set module name for BLDL
         L     R1,CVTPTR             Get CVT pointer
         L     R1,CVTLINK-CVT(,R1)   Get LNKLIST DCB pointer
         BLDL  (R1),(R2)             Locate module
         DROP  R2                    PDSBLDL
         LTR   R15,R15               Module located in LINKLIST?
         BNZ   EXIT321               No - branch, error
         TM    PDS2LIBF,PDS2LLNK     Module reside in linklist?
         BO    EXIT322               Yes - branch, continue
EXIT321  MVC   COMMAND(8),EXITMODN   Set modname in message text
         MVC   COMMAND+8(MSG2L),MSG2ERR5  Set fixed message text
         B     EXIT390               Branch - continue
EXIT322  XR    R0,R0                 Get module length
         ICM   R0,7,PDS2STOR           from the pds directory
         XR    R2,R2                 Assume SP=0 (JES2 private module)
         TM    WORKFLAG,EXITPVT      Module loaded in JES2 private?
         BO    EXIT323               Yes - branch, continue
         ICM   R2,1,SP241            Set SP=241
EXIT323  TM    PDS2FTB2,PDSLRMOD     Module RMODE31?
         BO    EXIT324               Yes - branch, continue
         GETMAIN RC,LV=(R0),SP=(R2),KEY=0,LOC=BELOW
         B     EXIT325               Branch - continue
EXIT324  GETMAIN RC,LV=(R0),SP=(R2),KEY=0,LOC=ANY
EXIT325  LR    R6,R1                 Set storage address for LOAD
         LR    R14,R1                Set move to address
         XR    R15,R15               Set move to length
         ICM   R15,7,PDS2STOR        *
         XR    R1,R1                 Set move from length and pad
         MVCL  R14,R0                Clear module area

*********************************************************************
*                                                                   *
*        Perform the directed load of the new module.               *
*                                                                   *
*********************************************************************

EXIT330  LA    R4,EXITMODN           Set modname address
         L     R5,CVTPTR             Get CVT pointer
         L     R5,CVTLINK-CVT(,R5)   Get LNKLIST DCB pointer
         IPK   0(0)                  Get current psw key
         SPKA  0(0)                  Set psw key zero
         LOAD  EPLOC=(R4),DCB=(R5),ADDR=(R6),ERRET=EXIT331
EXIT331  SPKA  0(R2)                 Reset psw key
         LTR   R15,R15               Load successful?
         BZ    EXIT335               Yes - branch, continue
         MVC   COMMAND(8),EXITMODN   Set modname in message text
         MVC   COMMAND+8(MSG2L),MSG2ERR6  Set fixed message text
         XR    R0,R0                 Get module length
         ICM   R0,7,PDS2STOR           from the pds directory
         TM    WORKFLAG,EXITPVT      Module loaded in JES private?
         BO    EXIT390               Yes - branch, continue
         XR    R2,R2                 Set SP=241
         ICM   R2,1,SP241            *
         FREEMAIN RU,A=(R6),LV=(R0),SP=(R2),KEY=0
         B     EXIT390               Branch, continue

*********************************************************************
*                                                                   *
*        Initialize the new LMT.                                    *
*                                                                   *
*********************************************************************

EXIT335  L     R8,EXITLMTA           Get new LMT address
         ST    R6,LMTMITAD           Set module address in LMT
         MVC   LMTMODNM,EXITMODN     Set module name in LMT
         TM    PDS2FTB2,PDSLRMOD     Module RMODE31?
         BO    EXIT336               Yes - branch, continue
         OI    LMTFLG2,LMT2RM24      Set RMODE24 flag on
         NI    LMTFLG2,255-LMT2RM31  Turn RMODE31 flag off
         B     EXIT337               Branch - continue
EXIT336  OI    LMTFLG2,LMT2RM31      Set RMODE31 flag on
         NI    LMTFLG2,255-LMT2RM24  Turn RMODE24 flag off
EXIT337  TM    WORKFLAG,EXITPVT      Module loaded in JES private?
         BO    EXIT338               Yes - branch, continue
         OI    LMTFLG1,LMT1CMN       Set module loaded in common flag
         MVI   LMTSUBPL,X'F1'        Set SP=241
         B     EXIT339               Branch - continue
EXIT338  OI    LMTFLG1,LMT1PVT       Set module loaded in private flag
EXIT339  MVC   LMTMODLN,PDS2STOR     Set module length
         OI    LMTFLG1,LMT1BSPL      Set bypass SPLEVEL check flag
         DROP  R3                    PDS2

*********************************************************************
*                                                                   *
*        Chain the new LMT.                                         *
*                                                                   *
*********************************************************************

EXIT340  TM    WORKFLAG,EXITCSA      Module loaded in common?
         BO    EXIT343               Yes - branch, continue
         ICM   R15,15,$LMTPBOT       Get last private entry addrss
         BNZ   EXIT341               Branch - continue
         ST    R8,$LMT1              Reset first private entry address
         B     EXIT342               Branch - continue
EXIT341  ST    R8,LMTCHAIN-LMT(,R15)  Reset chain in old last entry
EXIT342  MVC   LMTCHAIN,$LMT1C       Reset chain in new last entry
         ST    R8,$LMTPBOT           Reset last private entry address
         B     EXIT350               Branch - continue
EXIT343  ICM   R15,15,$LMT1C         Get first CSA entry address
         BNZ   EXIT345               Branch - continue
         ICM   R1,15,$LMTPBOT        Get last private entry addrss
         BZ    EXIT344               Branch - no private entries
         ST    R8,LMTCHAIN-LMT(,R1)  Reset chain in last private entry
EXIT344  ST    R8,$LMT1C             Reset first CSA entry address
         B     EXIT350               Branch - continue
EXIT345  CLC   LMTCHAIN-LMT(4,R15),$ZEROS  End of CSA chain?
         BE    EXIT346               Branch - end of CSA chain
         L     R15,LMTCHAIN-LMT(,R15)  Get next CSA entry address
         B     EXIT345               Loop back to check next entry
EXIT346  ST    R8,LMTCHAIN-LMT(,R15)  Reset chain in old last entry

*********************************************************************
*                                                                   *
*        Obtain and initialize an XRT for each new exit routine     *
*        that is defined in the new exit module.                    *
*                                                                   *
*********************************************************************

EXIT350  LA    R0,255*WORKXRTL       Get XRT workarea size
         GETMAIN RC,LV=(R0),LOC=ANY
         ST    R1,WORKXRTA           Save XRT workarea address
         LR    R14,R1                Set move to address
         LA    R15,255*WORKXRTL      Set move to length
         XR    R1,R1                 Set move from length and pad
         MVCL  R14,R0                Clear XRT workarea
         L     R3,EXITXIT            Get exit XIT address
         USING XIT,R3
         L     R14,LMTMITAD          Get MIT address
         L     R14,MITENTAD-MIT(,R14)  Get MITETBL address
         USING MTE,R14
         LA    R14,MTELEN(,R14)      Bump past MITETBL eyecatcher MTE
         L     R15,WORKXRTA          Get XRT workarea address
         USING WORKXRTE,R15
         XR    R7,R7                 Init new exit routine count
EXIT351  CLI   MTENAME,X'FF'         Last MTE?
         BE    EXIT352               Yes - branch, continue
         LA    R7,1(,R7)             Increment exit routine count
         MVC   EXITRTNN,MTENAME      Save exit routine name
         MVC   EXITRTNA,MTEADDR      Save exit routine address
         LA    R14,MTELEN(,R14)      Bump to next MITETBL entry
         LA    R15,WORKXRTL(,R15)    Bump to next XRT workarea entry
         B     EXIT351               Loop back for next MITETBL entry
         DROP  R14,R15               MTE, WORKXRTE
EXIT352  LTR   R7,R7                 Any new exit routines defined?
         BNZ   EXIT353               Yes - branch, continue
         OI    LMTFLG1,LMT1INVD      Invalidate the new LMT
         MVC   COMMAND(8),=C'$ADDEXIT'  Set command in message text
         MVC   COMMAND+8(MSG2L),MSG2ERR7  Set fixed message text
         LA    R0,255*WORKXRTL       Get XRT workarea size
         L     R1,WORKXRTA           Get XRT workarea address
         FREEMAIN RU,A=(R1),LV=(R0)
         B     EXIT390               Branch - continue
EXIT353  STCM  R7,1,WORKXRT#         Save number of new XRTs
         XR    R2,R2                 Get # routines currently defined
         ICM   R2,1,XIT#RTNS         *
         ALR   R7,R2                 Calculate number of XRTs (new+old)
         LA    R15,XRTLNGTH          Get XRT length
         XR    R6,R6                 Calculate total XRTs length
         MR    R6,R15                *
         GETMAIN RC,LV=(R7),SP=241,LOC=ANY
         ST    R1,NEWXRTSA           Save new XRT area address
         LR    R14,R1                Set move to address
         LR    R15,R7                Set move to length
         XR    R1,R1                 Set move from length and pad
         MVCL  R14,R0                Clear area
         L     R1,NEWXRTSA           Get new XRT area address
         USING XRT,R1
         LTR   R2,R2                 Any routines currently defined?
         BZ    EXIT355               No - branch, define new routines
         L     R15,XITXRTAD          Get first old XRT address
EXIT354  MVC   0(XRTLNGTH,R1),0(R15)  Move old XRT to new area
         LA    R1,XRTLNGTH(,R1)      Bump to next new area slot
         LA    R15,XRTLNGTH(,R15)    Bump to next old XRT
         BCT   R2,EXIT354            Loop back to move next XRT
EXIT355  XR    R0,R0                 Get # new exit routines (XRTs)
         ICM   R0,1,WORKXRT#         *
         L     R15,WORKXRTA          Get XRT workarea address
         USING WORKXRTE,R15
EXIT356  MVC   XRTRNAME,EXITRTNN     Set new exit routine name
         MVC   XRTRADDR,EXITRTNA     Set new exit routine address
         LA    R1,XRTLNGTH(,R1)      Bump to next new area slot
         LA    R15,WORKXRTL(,R15)    Bump to next XRT workarea entry
         BCT   R0,EXIT356            Loop back to init next new XRT
         DROP  R1,R15                XRT, WORKXRTE
         LA    R0,255*WORKXRTL       Get XRT workarea size
         L     R1,WORKXRTA           Get XRT workarea address
         FREEMAIN RU,A=(R1),LV=(R0)

*********************************************************************
*                                                                   *
*        Finish initializing the XIT for the new exit.              *
*                                                                   *
*********************************************************************

EXIT360  OI    XITFLAGS,XITDENBL+XITBSPL  Set exit defined, enabled,
*                                           and bypass SPLEVEL check
         NI    XITFLAGS,255-XITTRACE  Turn exit tracing off
         MVC   XITXRTAD,NEWXRTSA     Set first exit XRT address
         XR    R0,R0                 Get # routines currently defined
         ICM   R0,1,XIT#RTNS         *
         XR    R1,R1                 Get # new routines
         ICM   R1,1,WORKXRT#         *
         ALR   R0,R1                 Calculate total # exit routines
         STCM  R0,1,XIT#RTNS         Set total # exit routines
         L     R14,LMTMITAD          Get MIT address
         MVC   XITENVIR,MITENVIR-MIT(R14)  Set environment byte
         DROP  R3,R8                 XIT, LMT
         MVC   COMMAND(8),EXITMODN   Set modname in message text
         MVC   COMMAND+8(MSG2L),MSG2OK  Set fixed message text

*********************************************************************
*                                                                   *
*        Set the message length and return.                         *
*                                                                   *
*********************************************************************

EXIT390  LA    R0,8+MSG2L            Get message length
        $STORE (R0)                    and set in return R0
         MVC   RETCODE,=F'16'        Set return code
         B     RETURN                Branch - return

*********************************************************************
*                                                                   *
*        Return to caller.                                          *
*                                                                   *
*********************************************************************

RETURN   L     R2,RETCODE          Get routine return code
         S     R9,$F4              Get EXIT05 workarea address
        $RETWORK (R9)              Return workarea
         LR    R15,R2              Set routine return code
        $RETURN RC=(R15)           Return to caller

         LTORG

TRTABLE  DC    256X'FF'            Table of valid numberics
         ORG   TRTABLE+C'0'        *
         DC    10X'00'             *
         ORG                       *

SP241    DC    X'F1'

MSG1OK   DC    C' replaced                        '
MSG1L    EQU   *-MSG1OK
MSG1ERR1 DC    C' not currently being used by JES2'
MSG1ERR2 DC    C' not located in LINKLIST library '
MSG1ERR3 DC    C' LOAD error                      '

MSG2OK   DC    C' added                           '
MSG2L    EQU   *-MSG2OK
MSG2ERR1 DC    C' no exit number specified        '
MSG2ERR2 DC    C' invalid exit number specified   '
MSG2ERR3 DC    C' exit number out of range        '
MSG2ERR4 DC    C' exit module already defined     '
MSG2ERR5 DC    C' not located in LINKLIST library '
MSG2ERR6 DC    C' LOAD error                      '
MSG2ERR7 DC    C' no $ENTRY points defined        '

        $MODEND

EXIT05W  DSECT                     EXIT05 workarea
RETCODE  DS    F                   EXIT05 return code
WORKFLAG DS    XL1                 EXIT05 workflag
EXITPVT  EQU   X'80'               Add exit to JES2 private
EXITCSA  EQU   X'40'               Add exit to common
EXITNBR  DS    XL1                 Exit number
EXITMODN DS    CL8                 Exit module name
EXITLMTA DS    A                   Exit module LMT address
WORKDBL  DS    D                   Doubleword workarea
EXITXIT  DS    A                   XIT entry address
WORKXRTA DS    A                   XRT workarea address
WORKXRT# DS    XL1                 Number of new XRTs
NEWXRTSA DS    A                   New XRTs area
EXIT05WL EQU   *-EXIT05W           EXIT05 workarea length

WORKXRTE DSECT                     XRT workarea entry
EXITRTNN DS    CL8                 Exit routine name
EXITRTNA DS    A                   Exit routine address
WORKXRTL EQU   *-WORKXRTE          XRT workarea entry length

         END
