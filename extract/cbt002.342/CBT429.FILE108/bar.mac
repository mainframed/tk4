//BARMACRO JOB ,'BAR Macro',
//  TIME=(,3),REGION=1M
/*JOBPARM Q=H
//BAR EXEC    ASMPCL,PDS='....................',NAME=BAR
//P.SYSIN  DD  *
BAR      TITLE 'Comment Bar Edit Program Macro'
         SMLIST CONVERT=YES
*---------------------------------------------------------------------*
*
*  COPYRIGHT (C) 1986 CLEMSON UNIVERSITY
*
*  PROGRAM     BAR
*
*  ABSTRACT    This is the 'BAR' macro, which will add standard
*              Assembler comment bars to column 39 of the data lines
*              specified by 'OO' line commands.  Also, the operands 'X'
*              or 'NX' on the command line will cause 'BAR' to process
*              only the excluded ('X') or nonexcluded ('NX') lines.
*              'BAR' will not insert its '×' for lines that begin with
*              a '*', '.*', '/', '++*' or lines where columns 38-40 are
*              not blank.
*
*  INPUTS:
*      PARAMETERS  None
*      FILES       None
*      OTHER       Variables from ISPF/PDF Edit (See code)
*
*  OUTPUTS:
*      MESSAGES
*        Enter "O" line cmd
*           . "BAR" requires an "O" cmd to indicate line(s) to be
*             processed
*        Invalid BAR option
*           . On command line, use "X" for excluded lines or "NX" for
*             nonexcluded lines.
*        BAR command incomplete
*           . Use "O" line command to specify lines to be processed by
*             BAR.
*      FILES       None
*      OTHER       Modifies lines in dataset currently under edit
*
*  PROGRAM     NONREENTRANT, PROBLEM KEY AND STATE, STANDARD LINKAGE,
*  ATTRIBUTES  NON-AUTHORIZED, AMODE(31), RMODE(ANY)
*
*  SPECIAL
*  NOTES       None
*
*  CHANGE
*  HISTORY     07/19/88 PLH - New
*              01/11/89 PLH - Cleaned up
*
*  METHOD OF
*  OPERATION   See code
*
*
*---------------------------------------------------------------------*
         eject
 block   name=bar,type=program,options=(*norent,xa,mode),              *
               amode=31,rmode=any,pl=(parmlist,6)
         space 1
  load   ep=isplink                   × Get ISPLINK.
  st     r0,isplink                   ×
* *-------------------------------------------------------------------*
* *  Issue VDEFINEs for the following variables:
* *    XNXPARM - Parameter 'X' or 'NX' from command line
* *    XNX     - Exclude status of current line
* *    LRECL   - LRECL of current dataset.
* *    LINE    - Data line currently being processed
* *    LINE1   - Starting line of range entered by user. Also used
* *              as pointer to current line.
* *    LINE2   - Ending line of range entered by user.
* *-------------------------------------------------------------------*
  callx  isplink,('vdefine','(xnxparm)',xnxparm,'char',2)
  callx  isplink,('isredit',0,'Ö macro (xnxparm) noprocess Ö')
  callx  isplink,('vdefine','(xnx)',xnx,'char',2)
  callx  isplink,('vdefine','(line1)',line1,'fixed',4)
  callx  isplink,('vdefine','(line2)',line2,'fixed',4)
  callx  isplink,('vdefine','(lrecl)',lrecl,'fixed',4)
  callx  isplink,('isredit',0,'Ö (lrecl) = lrecl Ö')
  callx  isplink,('vdefine','(line)',line,'char',lrecl)
         space 1
* *-------------------------------------------------------------------*
* *  Use ISREDIT service to extract range of lines specified by user.
* *-------------------------------------------------------------------*
  callx  isplink,('isredit',0,'Ö process range o $ Ö')
  errexit name=block_incomplete,(ch,r15,eq,=h'16')
  errexit name=process_error,(treg,r15,nz)
  callx  isplink,('isredit',0,'Ö (line1) = linenum .zfrange Ö')
  callx  isplink,('isredit',0,'Ö (line2) = linenum .zlrange Ö')
* *-------------------------------------------------------------------*
* *  Determine if user requested processing of excluded or non-
* *  excluded lines. Note that &XNXPARM is not converted to uppercase
* *  by ISREDIT.
* *-------------------------------------------------------------------*
  oc     xnxparm,=c'  '               × Convert &XNXPARM to uppercase
  if     (clc,xnxparm,eq,=c'x ')      × Excluded lines only?
   sbit  stcf1x                       ×  Set flag for later.
  elseif (clc,xnxparm,eq,=c'nx')      × Nonexcluded lines only?
   sbit  stcf1nx                      ×  Set flag for later.
  elseif (clc,xnxparm,ne,=c'  ')      × Something else?
   errexit name=invalid_xnxparm       ×  Issue error message.
  endif                               × Endif. (X or NX specified)
         space 3
* *-------------------------------------------------------------------*
* *  Loop thru the lines specified, rotating the lines as required.
* *  If "X" or "NX" was requested, query the exclude status of each
* *  line as it goes by: otherwise, don't bother.
* *-------------------------------------------------------------------*
  l      r5,line1                     × Get starting line
  loop   while,(c,r5,le,line2)        × Do for all lines requested
   callx isplink,('isredit',0,'Ö (line) = line &&line1 Ö')
*                                     ×  Get the data line
         space 2
*  *------------------------------------------------------------------*
*  * Ignore lines we don't want to process.
*  *------------------------------------------------------------------*
   if    ((clc,line+37(3),eq,=c'   '),and, If bar area blank, and      *
               (cli,line,ne,c'*'),and,       not assembler comment, and*
               (cli,line,ne,c'/'),and,       not JCL statement, and    *
               (clc,line(2),ne,=c'.*'),and,  not Macro comment, and,   *
               (clc,line(3),ne,=c'++*'))     not Xsub statement, then
    if   not,(tbit,(stcf1x+stcf1nx),off)   If X or NX requested
     callx isplink,('isredit',0,'Ö (xnx) = xstatus &&line1 Ö')
    endif                             ×  Get exclude status.
          space 2
    if   (tbit,stcf1x+stcf1nx,off),or,   If exclude status OK,         *
               ((tbit,stcf1x,on),and,(clc,xnx,eq,=c'x ')),or,          *
               ((tbit,stcf1nx,on),and,(clc,xnx,eq,=c'nx'))
     mvi line+38,c'×'                 ×   Insert bar.
     callx isplink,('isredit',0,'Ö line &&line1 = (line) Ö')
     l   r1,count                     ×   Update line counter.
     la  r1,1(r1)                     ×     and save back
     st  r1,count                     ×       for next loop.
    endif                             ×  Endif. (Exclude status OK)
   endif                              × Endif. (OK data line)
   la    r5,1(r5)                     × Increment 'line number'
   st    r5,line1                     × Save where ISREDIT can get it
  endloop while                       × Loop thru all lines.
         space 1
  callsub display_count               × Display # of lines processed.
         space 1
 endblk  block=bar,rc=0
         eject
*---------------------------------------------------------------------*
*  Subroutine: Display_Count
*  Abstract:   Display an ISPF short msg/long msg telling the user
*              how many lines were rotated.
*---------------------------------------------------------------------*
         SPACE 1
 block   name=display_count,type=subroutine,save=(r14,stcr14),         *
               pl=(parmlist,6)
         space 1
  l      r1,count
  cvd    r1,stcd
  ed     cntsmsg+dspcsm(l'dspcsm),stcd+5
  ed     cntlmsg+dspclm(l'dspclm),stcd+5
  callx  isplink,('vdefine','(zedsmsg)',cntsmsg,'char',=a(l'cntsmsg))
  callx  isplink,('vdefine','(zedlmsg)',cntlmsg,'char',=a(l'cntlmsg))
  callx  isplink,('setmsg','isrz001 ')
         space 1
 endblk  block=display_count,rc=0
         space 3
*---------------------------------------------------------------------*
*  Errexit:    Process_Error
*  Purpose:    Called when there was an error in processing the user's
*              line commands.
*  Called By:  Mainline
*  Inputs:     None.
*  Outputs:    Issues error message telling user to use "O" line cmd.
*---------------------------------------------------------------------*
         SPACE 1
 block   name=process_error,type=errexit,pl=(parmlist,6)
  callx  isplink,('vdefine','(zedsmsg)',procsmsg,'char',=a(l'procsmsg))
  callx  isplink,('vdefine','(zedlmsg)',proclmsg,'char',=a(l'proclmsg))
  callx  isplink,('setmsg','isrz001 ')
 endblk  block=process_error,rc=12
         space 3
*---------------------------------------------------------------------*
*  Errexit:    Invalid_XNXPARM
*  Purpose:    Called when user specified something other than X or
*              NX on the command line.
*  Called By:  Mainline
*  Inputs:     None.
*  Outputs:    Issues error message telling user to use "X" or "NX"
*              on command line.
*---------------------------------------------------------------------*
         space 1
 block   name=invalid_xnxparm,type=errexit,pl=(parmlist,6)
  callx  isplink,('vdefine','(zedsmsg)',xnxsmsg,'char',=a(l'xnxsmsg))
  callx  isplink,('vdefine','(zedlmsg)',xnxlmsg,'char',=a(l'xnxlmsg))
  callx  isplink,('setmsg','isrz001 ')
 endblk  block=invalid_xnxparm,rc=12
         space 3
*---------------------------------------------------------------------*
*  Errexit:    Block_Incomplete
*  Purpose:    Called when PROCESS says the user didn't specify the
*              whole block command.
*  Called By:  Mainline
*  Inputs:     None.
*  Outputs:    Issues error message telling user to use "O" block cmd.
*---------------------------------------------------------------------*
         space 1
 block   name=block_incomplete,type=errexit,pl=(parmlist,6)
  callx  isplink,('vdefine','(zedsmsg)',blkismsg,'char',=a(l'blkismsg))
  callx  isplink,('vdefine','(zedlmsg)',blkilmsg,'char',=a(l'blkilmsg))
  callx  isplink,('setmsg','isrz001 ')
 endblk  block=block_incomplete,rc=12
         space 1
*---------------------------------------------------------------------*
*  Storage area.  (Non-reentrant.)
*---------------------------------------------------------------------*
         psd
stc      ds    d                      ×
stcd     ds    d                      ×
stcr14   ds    f                      ×
isplink  ds    f                      × Address of ISPLINK in LPA
parmlist ds    6f                     × Place for CALLX parmlists
xnxparm  dc    cl2' '                 × 'X'/'NX' from BAR command
xnx      dc    cl2' '                 × Current line exclude status
stcf1    dc    x'00'                  × Work flags:
stcf1x   equ   x'80'   ×1... ....×    ×  "BAR X" was specified
stcf1nx  equ   x'40'   ×.1.. ....×    ×  "BAR NX" was specified
line     dc    cl255' '               × Current line from file
line1    dc    f'0'                   × Starting/current line #
line2    dc    f'0'                   × Last line #
lrecl    dc    f'0'                   × LRECL of data set.
         space 1
count    dc    f'0'                   ×
cntsmsg  dc    c"...... lines changed"
dspcsm   equ   0,6                    ×
         org   cntsmsg+dspcsm         ×
         dc    x'402020202120'        ×
         org   ,                      ×
cntlmsg  dc    c"The BAR macro modified...... data lines."
dspclm   equ   22,6                   ×
         org   cntlmsg+dspclm         ×
         dc    x'402020202120'        ×
         org   ,                      ×
*
         SMLIST CONVERT=NO
PROCSMSG DC    C'Enter "O" line cmd'
PROCLMSG DC    C'BAR requires an "O" command to indicate line(s) to be *
               processed.'
XNXSMSG  DC    C'Invalid BAR option'  ×
XNXLMSG  DC    C'On command line, use "X" for excluded lines or "NX" fo*
               r nonexcluded lines.'  ×
BLKISMSG DC    C'BAR command incomplete'
BLKILMSG DC    C'Use "O" line commands to specify lines to be processed*
                by BAR.'
         SMLIST CONVERT=YES
         endpsd
         end
