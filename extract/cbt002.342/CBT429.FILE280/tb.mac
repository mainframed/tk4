.cm SCRIPT REFERENCE TB
.SUBT Purpose
The TAB SETTING control word specifies the tab stops to be assumed
for the following lines
when converting the TAB character (X'05') generated by the typewriter
TAB key into the appropriate number
of spaces.
.nf
.SUBT Format
            <n1 n2 n3 ...>
.bs $
   .TB      <<'string'×char/>n<L$_×R×C×'char'> ...>
.bs
            <SET <char>>
.SUBT Usage
.sp;.fo
Tabulation characters present in the input file are expanded
by SCRIPT into one or more fill characters, blanks by default, or
the fill parameter if specified, to simulate
the effect of several logical tab positions.
.sp 1
The logical tab position n can be used with the optional
fill parameter and alignment parameter.
The .TB control word operand n specifies the location
of the logical tab stops.
The tab columns may be specified with signed values in which
case the tab is set in the last tab column plus n.
As text is entered the blank space between the end of
this text and the next tab position (tabulation gap)
is used to accomodate the fill parameter. The fill
parameter char or string is associated with
a particular column n and may be a single character
or a string delimited by ', ", or /.
If the fill string is a single character, this
character is propagated in the tabulation gap.
(see examples 1 and 2).
For a fill string greater than one character the
following situation results.
The fill string is propagated in a work area and the
particular column bounds of the tabulation gap
are used to extract the expanded fill string, that is, a fill string
of 'abc' in a tabulation gap from column 5 to 9 inclusive, will be
filled in as bcabc.
(see example 3).
If the tabulation gap is smaller than the fill string then
only a subset of the fill string is extracted.
(see example 4).
.sp
The alignment parameter associated with column n
can be used for left or right justification, centering, or
character alignment.
When tab positions are specified, fields are left justified
in column n. If fields are to be right justifed or
centred then an R or C should immediately follow the tab
position. (See examples 6 and 7).
Fields can also be aligned on a particular
character by specifying the quoted character following the
n operand.
The alignment processing is done during input before
any other formatting occurs.
This functions by logically tabbing to column n and
searching for the alignment character. The length of
the tabulation gap is subsequently adjusted so this
character will be aligned in column n. (see example 8).
.sp
.sp 1
A .TB control word with no operands causes reversion to the default
tab settings.
.sp
A .TB control word with a "SET" operand may be used to define a single
character that is to be treated as a user tab character.
The user Tab character is in addition to the normal Tab character
and is treated as a Tab in text and control commands.
A "SET" with no character operand following only allows
the normal Tab character (X'05').
.sp
.sp
.SUBT Defaults
This control word will create a break.  Until ".tb" is encountered
with operands,
the tab columns are 5, 10, 15,  ..., 80.  They will be in effect from
the beginning or when ".tb" is
encountered without operands.
.SUBT Notes
.of 4
(1) The tab stops must be specified in ascending order.
.of 4
(2) Upon encountering a phrase which can
.ur .ul not
be centered or right justified on a particular column,
then the next tab setting is obtained which allows
the desired result.
Thus each phrase under an alignment constraint is
bounded by the previous and next tab stops specified.
(see example 5).
.of 4
(3) Under CONCATENATE (.CO) or FORMAT (.FO), attempting to tab outside
the limit of the LINE LENGTH (.LL) produces unpredictable results.
.SUBT Examples
.tr ^ .
.of 4
.nf
(1) ^tb set :
^tb 5 +/15 -/25 */35
:a:b:c:d
.sp
will produce
.sp
.of
.in
.fo
.tb set :
.tb 5r 15r 25r 35r
:5:15:25:35
.bs $
:v$×:v$×:v$×:v$×
.bs
.tb 5 +/15 -/25 */35
:a:b:c:d
.sp
.nf
.tb set
.in 5
.of 4
(2) An equivalent result is produced by:
.sp
^tb 5 +/+10 -/+10 */+10
.sp
.cp 8
.of 4
(3) ^tb set :
^tb 20 'xyza'30
12345:123:123
.sp
produces
.sp
.of
.tb set :
.tb 20r 30r
:20:30
.bs $
:v$×:v$×
.bs
.tb 20 'xyza'30
12345	123	123
.sp
.tb set
.of 4
.nf
(4) ^tb set :
^tb 1/10 '234'25 "5678"40 /1234567890/55
this:is a:tab:fill:test.
.sp
produces
.of
.in
.sp
.fo
.tb set :
.tb  10r 20r 30r 40r 50r
:10:20:30:40:50
.bs $
:v$×:v$×:v$×:v$×:v$×
.bs
.tb 1/10 '234'25 "5678"40 /1234567890/55
this:is a:tab:fill:test.
.of 4
.nf
.tb set
.in 4
.sp
(5) ^tb set :
^tb 5c 10c
:2345678
^sp
:234 67890
.sp
will produce
.sp
.of
.in
.tb set :
.tb 5r 10r
:5:10
.bs $
:v$×:v$×
.bs
.tb 5c 10c
:2345678
.sp
:234 67890
.sp
.tb set
.of 4
.in 5
.nf
.of 4
(6) ^tb set :
^tb 19c 30c 50c
^nf
^ur ^uc command:break:default:meaning
^sp
^tb 20r 30c 40l
 cw c:no:c=;:control word separator is c
^sp
 in n:yes:n=0:indent left margin n spaces
^sp
 br:yes::break
.sp
produces
.of
.in
.sp
.tb set $
.tb 19c 30c 50c
.bs =
	19	30	50
	 v=×	v=×	v=×
.bs
.nf
.ur .uc command$break$default$meaning
.sp
.tb 20r 30c 40l
 cw c$no$c=;$control word separator is c
.sp
 in n$yes$n=0$indent left margin n spaces
.sp
 br$yes$$break
.tb set
.sp
.cp 12
.in 5
.of 4
(7) ^tb set :
^sp
^tb   10r  12l 50r
:sin x =:x - x**3/3! + x**5/5! - ...:(9)
^sp
:sinh x =:x + x**3/3! - x**5/5! + ...:(10)
.sp
produces
.of 0
.in
.tb set $
.sp
.tb   10r  12l 50r
$sin x =$x - x**3/3! + x**5/5! - ...$(9)
.sp
$sinh x =$x + x**3/3! - x**5/5! + ...$(10)
.sp
.nf
.of 4
.in 5
.tb set
.of 4
(8) ^tb set :
^tb 25'.'
CPU charges:$123.45
^sp
I/O costs:$1.26
.sp
produces
.in
.of
.sp
.tb 25'.'
.tb set :
CPU charges:$123.45
.sp
I/O costs:$1.26
.tb set
.tr
.in
.cm End of TB
