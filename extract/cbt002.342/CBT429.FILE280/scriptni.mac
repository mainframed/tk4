..im syspub layout=guide hy=full
..sr pubCHrom = 'roman upper'
..tm 12;..hs 3
..us ×..tt 1 /×UNIVERSITY OF WATERLOO COMPUTING CENTRE×//SCRIPTniq/
..ur ..us ×.tt 3 /×SCRIPT Techniques×//&sysdate/
.prelim 'ABSTRACT'
..tm 6;..hs 0;..tt ////;..tt 3 ////
..pp The University of Waterloo version of SCRIPT (referred to as
Waterloo SCRIPT, or simply as SCRIPT)
is a powerful text formatting program.
A general introduction to SCRIPT is given in the "Introduction to SCRIPT
document available from any of the Consulting Offices.
It is assumed that you are familiar with and experienced at using the
SCRIPT control words presented in that document.
..pp;This "SCRIPT Techniques" document illustrates
some of the programming-language capabilities of SCRIPT which will enabl
you to automate the preparation and maintenance of documentation.
..pp;There are two good reasons for automating the production of documen
.point begin
to eliminate the "unnecessary re-work" impact of making changes, so that
you can add a chapter, delete a section, interchange large sections of t
etc., without affecting the rest of the document;
.point
to make it easier for someone else
to learn how to use the computer to prepare documenation, and also reduc
the amount of "human time" needed to produce a document.
.point end
..pp;A number of the techniques presented in the following pages can be
to create a set of "higher-level" formatting commands so that repetitive
can be automated, standardized, and simplified.
..cm --------------------------------------------------------------
..cc begin;.boxon
This document is continually being modified and extended
to include additional techniques of potential wide-spread interest.
.boxoff;..cc end
..cm --------------------------------------------------------------
.chapter 'Imbedding Other Input Files'
..pp;With any large document, it is to your advantage to create a separa
..us file;(collection of input lines)
for each of its constituent parts, and then construct
a small "driver" file to imbed each file, in the desired order.  In this
fashion, small sections of text may be developed independently
and may easily be interchanged by changing the order in which they are
imbedded.
..pp;You can instruct SCRIPT to imbed another input file
by using the ".im"
..ix 'im (IMBED)'
IMBED control word.  For example, if an input file consisted only of
..sp;     .im chap1;.im chap2;.im chap3
..sp;the three "chapters" could be maintained as three
separate files.  Moreover, the first file, "chap1", could consist of
..sp;     .im sect1;.im sect2
..sp;which would, in turn, cause two more files to be imbedded during th
formatting process.
.chapter 'SCRIPT As A Programming Language'
.section 'System Reference Variables'
..pp;SCRIPT maintains a large number of "status indicators" and "system
information  values" in special variables called "System Reference Varia
In the examples listed below, the name of the System Reference Variable
shown on the right, followed by a brief explanation, followed in parenth
by it's value at the time this document was formatted.
..sp;..ju no;..in 11
..oo 1 SYSDATE
..ur contains today's date (&sysdate)
..sp;..oo 1 SYSLINE
..ur the current line number on the page (&sysline)
..sp;..oo 1 SYSLL
..ur the current LINE LENGTH (&sysll)
..sp;..oo 1 SYSPAGE
..ur contains the current page number, as a number (&syspage)
..sp;..cc begin;..oo 1 SYSPPAGE
..ur contains the current page number, as a character string (&sysppage)
..br;(if we were on page 2 and page numbers were being printed as lower-
roman numerals, SYSPPAGE would have the value "ii")
..cc end;..sp;..oo 1 SYSOUT
..ur a "TERM" if output is on-line, otherwise "PRINT" (&sysout)
..in;..pp;System Reference Variables are used in conjunction with the ".
..ix 'ur (USE REFERENCE)';control word,
as shown in the following
example which prints today's date.
..sp;     .ur Today is &sysdate..
..ix 'ur (USE REFERENCE)'
..pp;The first period after "&sysdate" is treated as a "concatenation
indicator" by SCRIPT.
Thus, "&sysdate.." means "today's date, concatenated with a period", and
result is:
..sp;..ur      Today is &sysdate..
.section 'User-Defined Reference Variables'
..pp;You can define Reference Variables of your own (just don't pick nam
which start with the letters "sys") and assign values to them by using
the ".sr" control word.
..sp;..cc 3;     .sr name = numeric integer value
     .sr name = string
     .sr name = 'a delimited string'
..ix 'sr (SET REFERENCE)'
..sp;The name of a Reference Variable may contain up to ten alphanumeric
characters.
A Reference Variable may optionally be subscripted from (-32767) to (+32
The value assigned to the Reference Variable may be an integer (such as
..us 3×), an undelimited string (such as the word
..us dog×), or a delimited string (such as ×'hello_there').
..pp;If you wish to use other Reference Variables on the left- or right-
side of the "=", then you must use the alternate form of SET REFERENCE,
..ix 'se (SET REFERENCE)'
which does symbolic substitution as many times as is needed to
eliminate Reference Variables from both the "name" and "value" fields.
For example,
..sp;     .se i = &i + 1
..sp;adds 1 to the previous value of Reference Variable "i".  If "i" has
previously been defined, the above is equivalent to
..sp;     .se i =  + 1
..sp;since the "&i" results in the null string.
..pp;If Reference Variable "dog" contained the string "cat", then
..sp;     .se &dog = 1
..sp;would create a Reference Variable "cat" with the value "1".
.section 'Automatic Substitution of Reference Variables'
..pp Whenever there are a large number of lines containing Reference
Variables, it is often easier to use
the SUBSTITUTE REFERENCE control word ".su"
..ix 'su (SUBSTITUTE REFERENCE)'
to cause symbolic substitution,
rather than numerous occurrences of ".ur".
For example, the following
..sp;.cc begin
     .su on
     .sr fignum = &fignum + 1
     Figure &fignum ....... &sysppage
     .su off
..cc end;..sp
produces:
..sp
..su on
..sr fignum=&fignum+1
     Figure &fignum ....... &sysppage
..su off
.section 'The "PERFORM" Control Word'
..pp;The SCRIPT ".pe" control word is used in one of the two forms
..sp;..cc 2
     .pe n;operand line          .pe n
                         (or)    operand line
..ix 'pe (PERFORM)'
..sp;It causes the "operand line", which may contain both SCRIPT control
words and text, to be "performed" the specified "n" times.
For example, it is sometimes desirable to construct a dashed line which
will stretch across the full width of the page (that is, has the same nu
of "-"s as the LINE LENGTH value).
This can be done as follows:
..sp;..cc 3
     .sr dash = ''
     .ur .pe &sysll
     .se dash = '-&dash'
..sp;The first line sets "dash" to the null string.
The second line results in a "perform counter" equal to the ".ll" value.
The third line adds another "-" to the value of "dash".
The Reference Variable "dash" can then be used to create a dashed line a
the page, as follows:
..sp;     .br;.ur &dash
..sp;which results in
..br;..ur &pubdash
.section 'Testing Various Conditions:  the "IF" Control Word'
..pp;The full power
of Reference Variables is realized in conjunction with the ability to te
the value of a Reference Variable, and then conditionally do something.
For example, the input line
..sp;     .ur .if &syspage ne 1;.pa
..sp;says "if the value of the current page number is not equal to 1, th
eject to the top of the next page".
The ".if" control word has two forms:
..ix 'if (IF)'
..sp;     .if <condition>;<operand>
..sp;and
..sp;..cc 3;     .if <condition>
     .th <operand1>
..ix 'if (IF)' 'th (THEN)'
     .el <operand2>
..ix 'if (IF)' 'el (ELSE)'
..sp;In both of the above forms, the "operand" may be either a single
SCRIPT control word, or it may be a text line.
.subsection '"DO" Groups'
..pp;The full power of the ".if" control word is realized when it is use
conjunction with the ".do" and ".do end" control words.
..ix 'do (DO)'
..ix 'do (DO)' 'do end (DO END)'
..sp;..cc begin
     .if <condition>;.th .do
     <operand1>
     .do end;.el .do
     <operand2>
     .do end
..cc end
..sp;The operands can now be any number of SCRIPT control words and/or
text lines.
.section 'LENGTH, TYPE, and SUBSTRING Operations on Reference Variables'
..pp;SCRIPT provides you with the ability to determine the number of
characters in a Reference Variable or whether a Reference Variable conta
an integer or a character string, and to take a substring of the content
a Reference Variable, as shown below:
..sp;..ju no;..in 16;..cc begin
..oo 1 L'&refvar
the value of this expression is the number of characters in the variable
"refvar"
..cc end;..sp;..cc begin;..oo 1 T'&refvar
the value of this expression is the character "N" if "refvar" has an
integer value, or "C" otherwise
..cc end;..sp;..cc begin
..oo 1 &refvar(m:n)
the value of this expression is a string consisting of all the character
from positions "m" through "n" inclusive in the value of "refvar"
..cc end
..in;..ju
..pp;For example, let us assume that at the start of each major section
of a reference manual, the section number is contained in the Reference
Variable "number" and the section title in the Reference Variable "title
At the start of each section, we wish to eject to a new page, reset the
page number to "1", set the page number prefix to the first 5 characters
of the section title (in upper case) and followed by a dash,
add one to the section number, and print the section number and
title such that the title is underscored but the number is not.
If the title takes more than one line to print, we want the second and
subsequent lines offset ten spaces more than the length of the section n
The following sequence of SCRIPT control words accomplishes that:
..rm macro 2 nosave
     .pa 1
..ur      .ur .up .pn prefix &&&1.(1:5).-
     .se number = &number + 1
     .ur .of 10+L'&number
     .ud set ×
..ur      .ur .us ×&&number   ×&&&1
     .of;.sp
.rm
..sp;..cc begin;.macro title;..cc end
..ur ..sr maceg1 = ×&pubSWprt×;..ur ..sr maceg2 = ×&sysppage×
.chapter 'Writing Your Own Higher-Level Formatting Commands'
.section 'MACROs'
..pp;A MACRO is a "named" sequence of SCRIPT control words and text deli
with ".dm"
..ix 'dm (DEFINE MACRO)'
control words.  SCRIPT saves these input lines
and invokes them automatically whenever
the name of the MACRO is used as a SCRIPT control word.
MACROs are of the form:
..sp;..cc 3
     .dm name begin
     text and/or additional SCRIPT control words
     .dm name end
..sp;and are invoked by specifying:
..sp;     .name operands
..sp;The operands can be a mixture of two forms:  positional and keyword
When the MACRO is invoked, SCRIPT processes the keyword operands as thou
they were of the form
..sp;     .sr keyword=value
..sp;and assigns the values of the positional operands to the Reference
Variables "1", "2", "3", ..., and assigns the
..us number;of positional operands to the Reference Variable "0", and th
executes the body of the MACRO.
..pp;..ur For example, in Section &maceg1 on page &maceg2., we illustrat
a sequence of SCRIPT control words which were to be executed at the star
of each section of a reference manual.
By using MACROs, we could write a higher-level formatting command, calle
"section", to do the same thing:
..sp;..cc begin
     .dm section begin
.macro '1'
     .dm section end
..cc end;..sp;Now, all that is necessary to start a new section is to us
this "section" MACRO just like a SCRIPT control word:
..sp;     .section 'title of section'
..sp;SCRIPT will assign the positional operand "title of section" to
Reference Variable "1", and execute the body of the MACRO.
..pp;To give a simpler example, we can write a "paragraph" MACRO
and use it to start each paragraph of text in our document:
..sp;..cc 3
     .dm para begin
     .sp a;.il +8
     .dm para end
..sp;defines a MACRO named "para" which you can invoke by specifying
..sp;     .para
..sp;and, as a result, one blank line will be generated and the next lin
of text will be indented 8 positions to the right of the current INDENT
.section 'REMOTEs'
..pp;A REMOTE is a special sequence of SCRIPT control words and/or text
delimited by ".rm" control words.
..ix 'rm (REMOTE)'
SCRIPT saves these input lines and invokes them automatically when a
particular event occurs.
For example,
..sp;..cc 3
     .rm 10
     text and/or other SCRIPT control words
     .rm
..sp
defines a REMOTE which will be invoked the next time SCRIPT attempts to
something on line number 10 (if we're already past line 10 on the curren
page, then it will be invoked at line 10 of the next page).
If we wanted this sequence invoked for the next 5 occurrences of line 10
(that is, on the next 5 pages), then changing the first line to
..sp;     .rm 10 5
..sp;would accomplish that.
If we wanted this sequence invoked on all subsequent pages, then
..sp;     .rm 10 save
..sp;would prevent the REMOTE from being deleted after being invoked a s
number of times.
..pp;If we wanted to invoke this REMOTE ourselves, whether we were on li
or not, we could do so by using the
SCRIPT ".si" (SIGNAL REMOTE) control word:
..sp;     .si 10
..ix 'si (SIGNAL REMOTE)'
..pp;If we wanted to delete the REMOTE, to prevent it from being invoked
we could do so by specifying:
..sp;     .rm 10 delete
..pp;Rather than deleting a REMOTE, it may be desirable to "deactivate"
temporarily.
This can be done as follows:
..sp;..cc 4
     .rm 10 save
     .ur &efcm
     text and/or control words
     .rm
..sp;Setting the Reference Variable "efcm" to the value ".cm" results in
"comment" line when the REMOTE is invoked, so that the "text and/or cont
words" which follow it will get executed as normal.
When we want to "deactivate" the REMOTE, however, re-defining the Refere
Variable "efcm" to have the value ".ef"
..ix 'ef (END FILE)';(END FILE) will cause SCRIPT to terminate processin
of the REMOTE when it executes the ".ef" control word.
The REMOTE will still be invoked every time SCRIPT tries to print on lin
but it won't do anything.
You can re-define "efcm" back to ".cm" when you want to re-activate the
later.
.chapter 'Floating Blocks'
..pp;SCRIPT provides several control words which cause text to be format
into an "internal workarea" and then printed; they are of the form
..sp;..cc 3
     .xx begin
     text and/or additional control words
     .xx end n
..sp;where ".xx" is one of the control words
..sp;..cc 4
     .cc   (conditional column)
     .cp   (conditional page)
     .fk   (floating keep)
     .fb   (floating block)
..sp;SCRIPT formats the text in this begin/end sequence into an internal
workarea, and keeps a count of the number of lines of "output" which res
If an integer "n" has been specified after the "end" operand, SCRIPT add
value of "n" to this count.
SCRIPT uses the count in determining where the block of "output" lines s
be printed, as follows:
..sp;..in 6;..ju no;..cc begin;..oo 1 .cc
if the number of lines remaining in the text area in this column is less
the count
of lines in the block, SCRIPT begins a new column and then prints the bl
..cc end;..sp;..cc begin;..oo 1 .cp
if the number of lines remaining in the text area on this page is less t
the count
of lines in the block, SCRIPT begins a new page and then prints the bloc
..cc end;..sp;..cc begin;..oo 1 .fk
if the number of lines remaining in the text area in this column is less
the count
of lines in the block, SCRIPT attempts to fill the remainder of this col
by formatting the input which follows the block until the column is full
then prints the block at the top of the next column
..cc end;..in;..ju
..pp;The ".fb" (FLOATING BLOCK) control word functions in a slightly dif
..ix 'fb (FLOATING BLOCK)'
manner; the block doesn't print until you tell SCRIPT to print it, and t
makes ".fb" a useful programming tool.
SCRIPT provides two Reference Variables related to ".fb"s:
..sp;..in 8;..ju no;..cc begin;..oo 1 SYSFBC
the count of the total number of output lines waiting to print, in all
".fb" blocks
..cc end;..sp;..cc begin;..oo 1 SYSFBF
the count of the number of output lines in the FIRST block waiting to pr
..cc end;..in;..ju
..pp;To print a ".fb" block, you must specify the SCRIPT control word
..sp;     .fb dump n
..sp;If used without specifying an "n", all existing ".fb" blocks will b
printed; if you just want to print the first one, specify a value of "1"
"n"; if you want to print the first 3, then specify a value of "3".
.chapter 'Case-Study Examples'
.section 'Automating Papers for IEEE Two-Column Photo-Offset Publication
..pp;The style requirements and layout form for papers submitted to the
Institute of Electrical and Electronics Engineers
provide an excellent case-study example in the use of SCRIPT to automate
preparation of a document.
..pp;The layout grid provided by
.footnote IEEE
..ju no;IEEE Editorial Department, 345 East 47 Street, New York, N.Y. 10
.footend
is a 9.5"x13" area with two columns with a 1/4" gutter between them.
On the first page, the top 2.5" of the page is to contain a full-page-wi
title area, and the bottom 2.5" of the left column is to be left blank f
use by the IEEE.
There is a two-line bottom margin; page numbers are centered on the seco
these two lines.
The style requirements dictate three levels of headings, which we shall
refer to as "chapters", "sections", and "subsections".
Chapter titles are to be centered, in capitals, and underscored.
Section titles are to be flush with the left margin, upper- and lower-ca
and underscored.
Subsection titles are to be "paragraph" indented, upper- and lower-case,
underscored, followed by a period, and run in with the text of the parag
The body of the paper is to begin with a short "ABSTRACT" in the same st
as a chapter.
For purposes of simplification, we are going to assume that the output
is being produced at 6 lines to the vertical inch and 10 characters to t
horizontal inch.
..pp;Our objective in this example is to write a file called "ieee" whic
author will imbed at the start of the input file for the paper being pro
This "ieee" file will contain all the SCRIPT control words needed to set
the formatting environment so that the author's task in producing the pa
.fignum ieee1
can be simplified to the point of producing an input file as shown in
..ur Figure &ieee1..
.figbegin;.boxon;..li >
.im ieee
TITLE OF PAPER
.sp
Name of Author
Author's Business Affiliation
City, Province/State, Country
.abstract
.pp;text of abstract ...
.chapter 'title'
.pp;text ...
.section 'title'
.pp;.text ...
.subsection 'title'
text ...
   .
   .
.chapter 'References'
   .
   .
>>li .
.figure ieee1 'Input File Prepared by Author for IEEE Layout'
.boxoff;.figend
..pp;The author imbeds the "ieee" file, enters the text for the page-one
area without worrrying about the vertical or horizontal centering of tha
in the title area, and then uses the commands we are going to write as M
to create the paper.
To begin, we will write the SCRIPT control words which define the format
.fignum ieee2
..ur environment for the paper, as shown in Figure &ieee2..
.figbegin;.boxon;..li >
.cm --- define page for terminal or printer
.hs 0;.hm 0;.tm 0;.bt //%//
.ur .if &sysout eq TERM
.th .do;.pl 78;.bm 2;.do end
.el .do;.pl 132;.bm 56;.do end
.cm --- define hyphenation environment
.hy on;.hy set thresh 4;.hy set minpt 2
.hy set endpt 3;.hy set sup 2
.cm --- define two-column environment
.ll 95;.cl 45;.cd 2 0 50
.cm --- define a remote to leave bottom 15 lines
.cm     of first column blank
.ur .rm &syspl-&sysbm-15 1
.cb
.rm
.cm --- go into single-column mode, collect title area
.sc;.ce yes;.fb begin
>>li .
.figure ieee2 'The "ieee" Formatting Environment'
.boxoff;.figend
..pp;..ur Note that, after "ieee" is imbedded, we are in "centered" mode
the input text lines are being formatted in the internal ".fb" workarea.
Also, there is a REMOTE waiting to be invoked at line 61 (page length mi
bottom margin minus 15) which will issue a ".cb" COLUMN BEGIN and cause
last 15 lines (2.5") of the first column to be left blank.
.fignum ieee3
..ur The ".abstract" MACRO (see Figure &ieee3), must terminate the ".fb"
centre the floating-block lines at the top of the page, go into two-colu
mode, print the "ABSTRACT" title, and start formatting the text.
.figbegin;.boxon;..li >
.dm abstract begin
.cm --- print the title area centered vertically
.fb end;.ur .sp (15-&sysfbc)/2;.fb dump
.cm --- go to line 26, print "ABSTRACT"
.ln 26;.mc;.ce 1;.uc abstract
.fo;.sk c
.dm abstract end
>>li .
.figure ieee3 'The Abstract MACRO'
.boxoff;.figend
..pp;The ".sk c" produces a "skip conditional":
..ix 'sk (SKIP)' 'conditional'
a blank line which will only exist if it is not followed immediately
by something which produces another blank line (otherwise, SCRIPT will t
the conditional blank line away).
We can now write the MACROs for ".chapter", ".section", and ".subsection
.fignum ieee4;..ur as shown in Figure &ieee4..
.figbegin;.boxon;..li >
.dm chapter begin
.sp 2;.cc 6;.in;.ce 1;.ur .uc &1
.fo;.sk c
.dm chapter end
.dm section begin
.sp;.cc 4;.in;.co;.ju no;.hy sup
.ur .us &1
.ju;.sk c
.dm section end
.dm subsection begin
.sp;.cc 2;.in;.fo
.il 3;.ur .us &1..
.dm subsection end
>>li .
.figure ieee4 'The Chapter, Section, and Subsection MACROs'
.boxoff;.figend
..pp;The ".in"s issued by each of these MACROs are just a "safety precau
in case the author left an INDENT or OFFSET outstanding -- it depends on
how much you want to try to protect people from themselves.
.section 'Automating Footnotes'
..pp;The SCRIPT ".fn" (FOOTNOTE) control word handles the placement of
..ix 'fn (FOOTNOTE)';footnote text for you, but it does no more than tha
In this example, we will write a set of MACROs based on the ".fn" contro
word to automate footnotes completely.
We assume that footnotes are to be numbered consecutively starting at "1
and that if the document is being produced on the printer, a print train
containing superscript numbers is being used, but if the document is bei
produced at an on-line terminal, then such superscripts are not availabl
The MACROs we are going to write will be called ".footnote" and ".footen
and we will use them in the same way that ".fn begin" and ".fn end" are
.fignum foot1
In order to translate footnote numbers to superscripts, we need the
..ur control words shown in Figure &foot1..
.figbegin;.boxon;..li >
.cm --- define the "_" to be the backspace character
.cm     and define the hex codes for the superscripts
.bs _
.sr super1 = 'B_1'
.sr super2 = 'B_2'
.sr super3 = 'B_3'
.sr super4 = 'B_4'
.sr super5 = 'B_5'
.sr super6 = 'B_6'
.sr super7 = 'B_7'
.sr super8 = 'B_8'
.sr super9 = 'B_9'
.sr super0 = 'B_0'
.bs
>>li .
.figure foot1 'Translating Footnote Numbers to Superscripts'
.boxoff;.figend
..pp;..ur The control words shown in Figure &foot1 define 10 Reference
Variables called "super1" through "super0" whose values are the machine-
representations for the superscript digits 1 through 0.
.fignum foot2
..ur The MACROs are shown in Figure &foot2..
They are used as follows:
..sp;..cc 5
     text, up to word to be
     .footnote referenced
     text of footnote
     .footend
     followed by rest of sentence
..sp;and produce the following result:
..sp;..cc 2
text, up to word to be
.footnote referenced
text of footnote
.footend
followed by rest of sentence
.figbegin;.boxon;..li >
.dm footnote begin
.cm --- add 1 to the previous footnote number
.se footnum = &footnum + 1
.cm --- are we online or offline?
.ur .if &sysout eq TERM;.th .se x = '(&footnum)'
.el .do
.sr x = '';.sr i = 0;.up .pe L'&footnum
.se i = &i + 1;.se x = '&x.&&&&super&&footnum(&i:&i)'
.do end
.cm --- output the word and the footnote number
.ur &1.&x
.fn begin
.cm --- if already some footnotes on this page,
.cm     leave blank line between footnotes
.ur .if &sysfnc gt 0 .sp
.cm --- indent and output the footnote symbol
.ur .in L'&x
.ur .oo 1 &x
.cm --- start collecting footnote text
.dm footnote end
.dm footend begin
.fn end
.dm footend end
>>li .
.figure foot2 'The Footnote MACROs'
.boxoff;.figend
..pp;The ".footnote" MACRO adds one to the footnote number, and if
output is being produced to the terminal, creates a footnote symbol
consisting of the footnote number in parentheses.
If output is to the printer, it creates a footnote symbol by converting
each of the digits in the footnote number to its corresponding
superscript representation.
The input line
..sp;     .se x = '&x.&&&&super&&footnum(&i:&i)'
..sp;requires an explanation of SCRIPT's "substitution scan" algorithm.
Each time SCRIPT encounters "&&", it replaces it by a single "&" and the
continues scanning the input line.
If the footnote number were "25" and SCRIPT were on the first time throu
".pe", then, after one pass of the substitution scan algorithm, the abov
line would have been reduced to
..sp;     .se x = '&&super&footnum(1:1)'
..sp;and after the second pass, would have been reduced to
..sp;     .se x = '&super2'
..sp;which would give "x" the machine-code value "B2" on the next pass.
On the second time through the ".pe", "x" would end up containing the
machine-code value "B2B5", the superscript representation of the number
.section 'Automating Boxes'
..pp;In this example, we will write MACROs called ".boxon" and ".boxoff"
.fignum boxes
..ur to automate the placement of boxes around text (see Figure &boxes).
.figbegin;.boxon;..li >
.dm boxon begin
.sk;.ur .bx &sysin+1 &syscl+(&sysinr)
.in +3 -3;.sk
.dm boxon end
.dm boxoff begin
.sk;.in -3 +3;.bx off;.sk
.dm boxoff end
>>li .
.figure boxes 'The Boxon and Boxoff MACROs'
.boxoff;.figend
.index 1 'INDEX OF SCRIPT CONTROL WORDS' 2
.contents
