Subj:   MVS-UTIL Digest - 30 Nov 1998 to 1 Dec 1998
Date: 98-12-02 00:01:40 EST
From: LISTSERV@VM.MARIST.EDU (Automatic digest processor)
Sender: MVS-UTIL@VM.MARIST.EDU (MVS-UTIL MVS Utilities)
Reply-to: MVS-UTIL@VM.MARIST.EDU (MVS-UTIL MVS Utilities)
To: MVS-UTIL@VM.MARIST.EDU (Recipients of MVS-UTIL digests)

There are 5 messages totalling 357 lines in this issue.

Topics of the day:

  1. Copying a PDS in alphabetical order
  2. Copying a PDS in alphabetica (4)

----------------------------------------------------------------------

Date:    Tue, 1 Dec 1998 09:26:42 -0500
From:    Les von Holstein {Dallas} <LVONHOLS@SCTCORP.COM>
Subject: Re: Copying a PDS in alphabetical order

Thanks to all of you who replied. I ended up using PDSMAN's utility
PDSM20 to generate SELECT MEMBER=$$$$$$$$ statements. These control
statements were then used as input to IEBCOPY to re-copy my PDS to
a new one. Since the control statements were generated alphabetically
the new PDS could be accessed in alphabetical order.

------------------------------------------------------------------------
Les von Holstein - SCT Dallas             Internet: LVONHOLS@SCTCORP.COM
Phone: (972)383-7611 FAX: (972)387-8991 Voice Mail: (800)541-5330 x 4742
------------------------------------------------------------------------

------------------------------

Date:    Tue, 1 Dec 1998 10:25:00 -0500
From:    Edward Strauss <Edward.Strauss@FISC.COM>
Subject: Re: Copying a PDS in alphabetica

For those of you without PDSMAN, here is a program that reads a
directory and writes out the member names in 80-byte records.


LISTER   CSECT
         STM   R14,R12,12(R13)
         LR    12,15
         USING LISTER,R12
         ST    R13,OLD13
         LA    R13,SAVEAREA
         ST    R13,NEW13
*
SS0102   DS    0H                 OPEN INFILE AND OUTFILE
         OPEN  (INFILE,(INPUT))      INPUT PDS
         OPEN  (OUTFILE,(OUTPUT))    OUTPUT SEQUENTIAL FILE
         EJECT
*
**********************************************************************
*
*   SS02   (READ BLOCK)
*
**********************************************************************
*
SS0201   DS    0H                 ISSUE READ AND CHECK
         READ  DIRDECB,SF,INFILE,DIRBLK,264
         CHECK DIRDECB
*
SS0202   DS    0H                 SET END OF BLOCK ADDRESS
         SR    R1,R1
         ICM   R1,3,DIRBLK+8
         A     R1,=AL4(DIRBLK)
         LA    R1,8(R1)
         ST    R1,ENDIRBLK
*
SS0203   DS    0H                 POINT TO 1ST ENTRY
         LA    R3,DIRBLK+10
         EJECT
*
**********************************************************************
*
*   SS03   (PROCESS ENTRY)
*
**********************************************************************
*
SS0301   DS    0H                 IS MEM NAME X'FF'
*                                 (Y) SS0501 (READ COMPLETE)
*                                 (N) SS0302
         CLC   0(8,R3),=8X'FF'
         BE    SS0501             YES
*        B     SS0302             NO
*
SS0302   DS    0H                 WRITE NAME
         MVC   OUTAREA(80),=80C' '
         MVC   OUTAREA(8),0(R3)
         PUT   OUTFILE,OUTAREA
         EJECT
*
*********************************************************************
*
*   SS04   (EOP FOR AN ENTRY)
*
*********************************************************************
*
SS0401   DS    0H                 POINT TO NEXT DIR ENTRY
         IC    R1,11(R3)
         SLL   R1,27
         SRL   R1,26
         AR    R3,R1
         LA    R3,12(R3)
*
SS0402   DS    0H                 PAST BLOCK END ?
*                                 (Y) SS0201 (READ BLOCK)
*                                 (N) SS0403
         C     R3,ENDIRBLK
         BNL   SS0201             YES
*        B     SS0403             NO
*
SS0403   DS    0H                 IS MEM NAME X'FF' ?
*                                 (Y) SS0501 (READ COMPLETE)
*                                 (N) SS0301 (PROCESS ENTRY)
         CLC   0(8,R3),=8X'FF'
         BNE   SS0301             NO
*        B     SS0501             YES
         EJECT
*
***********************************************************************
*
*   SS05   (READ COMPLETE)
*
***********************************************************************
*
SS0501   DS    0H                 CLOSE FILES
         CLOSE (INFILE)
         CLOSE (OUTFILE)
*
SS0502   DS    0H                 RETURN TO CALLER
         L     R13,OLD13
         L     R14,R12(R13)
         LM    R0,R12,20(R13)
         BR    14
*
INFILE   DCB   DDNAME=INFILE,MACRF=R,DSORG=PO,LRECL=256,BLKSIZE=256,   X
               KEYLEN=8,EODAD=SS0501
OUTFILE  DCB   DDNAME=OUTFILE,MACRF=PM,DSORG=PS,LRECL=80
*
         DS    0F
ENDIRBLK DS    XL4                A(DIRECTORY BLOCK END)
SAVEAREA DS    F
OLD13    DS    F
NEW13    DS    F
         DS    15F
OUTAREA  DS    CL80
DIRBLK   DS    CL264              DIRECTORY BLOCK READ HERE
         LTORG
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END

------------------------------

Date:    Tue, 1 Dec 1998 12:21:57 -0600
From:    "John P. Kalinich" <jkalinic@csc.com>
Subject: Re: Copying a PDS in alphabetica

If anyone is interested, I have the Rexx equivalent of Edward's assembly
language program to deblock a PDS directory.
---

At 10:25 AM 12/1/98 -0500, Edward Strauss wrote:
>For those of you without PDSMAN, here is a program that reads a
>directory and writes out the member names in 80-byte records.
>

------------------------------

Date:    Tue, 1 Dec 1998 11:38:14 -0800
From:    Ted Gardener <tgardener@MAIL.ARC.NASA.GOV>
Subject: Re: Copying a PDS in alphabetica

This is a multi-part message in MIME format.
--------------D5AFF6663CC68CD2E5372544
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

I'm interested.

"John P. Kalinich" wrote:

> If anyone is interested, I have the Rexx equivalent of Edward's assemb
> language program to deblock a PDS directory.
> ---
>
> At 10:25 AM 12/1/98 -0500, Edward Strauss wrote:
> >For those of you without PDSMAN, here is a program that reads a
> >directory and writes out the member names in 80-byte records.
> >

--------------D5AFF6663CC68CD2E5372544
Content-Type: text/x-vcard; charset=us-ascii;
 name="tgardener.vcf"
Content-Transfer-Encoding: 7bit
Content-Description: Card for Ted Gardener
Content-Disposition: attachment;
 filename="tgardener.vcf"

begin:vcard
n:Gardener;Ted
tel;cell:(408)505-9123
tel;fax:(650)965-0566
tel;home:(650)965-7535
tel;work:(650)604-6953
x-mozilla-html:TRUE
org:Recom Technologies;BSG
version:2.1
email;internet:tgardener@mail.arc.nasa.gov
title:Year 2000 Programmer Analyst
adr;quoted-printable:;;Recom Technologies=0D=0ANASA - Ames Research Cent
x-mozilla-cpt:;19184
fn:Ted Gardener
end:vcard

--------------D5AFF6663CC68CD2E5372544--

------------------------------

Date:    Tue, 1 Dec 1998 14:49:16 -0600
From:    "John P. Kalinich" <jkalinic@csc.com>
Subject: Re: Copying a PDS in alphabetica

--=====================_912566956==_
Content-Type: text/plain; charset="us-ascii"

At 11:38 AM 12/1/98 -0800, Ted Gardener wrote:
>I'm interested.
>
>"John P. Kalinich" wrote:
>
>> If anyone is interested, I have the Rexx equivalent of Edward's assem
>> language program to deblock a PDS directory.
>> ---
>>
>> At 10:25 AM 12/1/98 -0500, Edward Strauss wrote:
>> >For those of you without PDSMAN, here is a program that reads a
>> >directory and writes out the member names in 80-byte records.
>> >
>
>Attachment Converted: "c:\eudora\attach\tgardener.vcf"
>
--=====================_912566956==_
Content-Type: text/plain; charset="us-ascii"
Content-Disposition: attachment; filename="Pdsdir.rex"

/*% NOCOMMENT REXX */
TRACE
/*  For batch, use the following JCL and comment out the TSO
    ALLOCATE sequence:

    //REXX     EXEC  PGM=IRXJCL,PARM='name.of.rexx.exec'
    //SYSEXEC  DD  DSN=your.rexx.library,DISP=SHR
    //SYSTSPRT DD  SYSOUT=*
    //SYSTSIN  DD  DUMMY
    //PDS      DD  DSN=your.pds.name,DISP=SHR,
    //             DCB=(RECFM=F,DSORG=PS,LRECL=256,BLKSIZE=256)

*/

/*  For TSO, use the following ALLOCATE sequence:   */

ARG dsn
ADDRESS TSO
"ALLOC F(PDS) DA("dsn") SHR REUSE",    /* pds directory */
"  RECFM(F) DSORG(PS) LRECL(256) BLKSIZE(256)"

/*-------------------------------------------------------------------*/

mainline:
SAY ' Name                VV.MM Created   Changed    Size',
    ' Init   Mod   ID'
"EXECIO * DISKR PDS (STEM DIR. FINIS"  /* read pds directory */
DO blk = 1 to dir.0
  usedbytes = C2D(SUBSTR(dir.blk,1,2))
  index = 3                            /* skip past used bytes */
  DO WHILE index < usedbytes
    IF SUBSTR(dir.blk,index,8) = 'FFFFFFFFFFFFFFFF'x THEN
      LEAVE blk
    pds2name = SUBSTR(dir.blk,index,8) /* member name */
    index = index + 11                 /* skip past name and ttr */
    pds2indc = SUBSTR(dir.blk,index,1)
    len = BITAND(pds2indc,'1F'x)       /* isolate user data length */
    userdata = C2D(len) * 2            /* halfwords to bytes */
    IF userdata = 30 THEN              /* ISPF statistics? */
      DO
        vv = c2d(SUBSTR(dir.blk,index+1,1))
        mm = c2d(SUBSTR(dir.blk,index+2,1))
        created = p2d(SUBSTR(dir.blk,index+6,3))
        lastmod = p2d(SUBSTR(dir.blk,index+10,3))
        time = p2d(SUBSTR(dir.blk,index+13,3))
        time = SUBSTR(time,1,2)××':'××SUBSTR(time,3,2)
        size = c2d(SUBSTR(dir.blk,index+15,2))
        init = c2d(SUBSTR(dir.blk,index+17,2))
        mod = c2d(SUBSTR(dir.blk,index+19,2))
        id = SUBSTR(dir.blk,index+21,8)
        SAY pds2name,
            '           ',
            RIGHT(vv,2,0)××'.'××RIGHT(mm,2,0),
            created,
            ' ',
            lastmod,
            time,
            FORMAT(size,5),
            FORMAT(init,5),
            FORMAT(mod,5),
            id
      END
    ELSE
      SAY pds2name
    index = index + userdata + 1       /* skip past user data */
  END
END
EXIT

p2d: procedure
/* rexx      convert packed decimal to number */
/* Michael Pollak, c/o RWG, Raepplenstr. 17, D-70191 Stuttgart */
/* Tel: +49-711-2012-387                                       */
/* Fax: +49-711-2012-502        e-mail: daapm@rwg.de           */
parse arg number_p
erg = c2x(number_p)
sign = right(erg,1)
number = left(erg,length(erg)-1)
if sign = 'D' then
   return '-'××number
else
   return number

d2p: procedure
/* rexx   convert number to packed decimal  */
/* Michael Pollak, c/o RWG, Raepplenstr. 17, D-70191 Stuttgart */
/* Tel: +49-711-2012-387                                       */
/* Fax: +49-711-2012-502        e-mail: daapm@rwg.de           */
arg number
if datatype(number) ^= 'NUM' then
   return ''
if number < 0 then
   interpret "number_p = '"abs(number)"D'x"
else
   interpret "number_p = '"number"C'x"
return number_p

/* J. KALINICH, X4521 */
/* EXEC TO DEBLOCK PDS DIRECTORY                                      */

--=====================_912566956==_--

------------------------------

End of MVS-UTIL Digest - 30 Nov 1998 to 1 Dec 1998
**************************************************
<FONT COLOR="#0f0f0f" BACK="#fffffe" SIZE=3>

----------------------- Headers --------------------------------
Return-Path: <owner-MVS-UTIL@VM.MARIST.EDU>
Received: from  rly-za03.mx.aol.com (rly-za03.mail.aol.com [172.31.36.99
Received: from VM.MARIST.EDU (vm.marist.edu [148.100.1.2])
   by rly-za03.mx.aol.com (8.8.8/8.8.5/AOL-4.0.0)
   with SMTP id AAA07349 for <SBGOLOB@AOL.COM>;
   Wed, 2 Dec 1998 00:01:36 -0500 (EST)
Message-Id: <199812020501.AAA07349@rly-za03.mx.aol.com>
Received: from VM.MARIST.EDU by VM.MARIST.EDU (IBM VM SMTP V2R3)
   with BSMTP id 3796; Wed, 02 Dec 98 00:02:21 EST
Received: from VM.MARIST.EDU (NJE origin LISTSERV@MARIST) by VM.MARIST.E
Date:     Wed, 2 Dec 1998 00:02:17 -0500
Reply-To: MVS-UTIL MVS Utilities <MVS-UTIL@VM.MARIST.EDU>
Sender: MVS-UTIL MVS Utilities <MVS-UTIL@VM.MARIST.EDU>
From: Automatic digest processor <LISTSERV@VM.MARIST.EDU>
Subject:  MVS-UTIL Digest - 30 Nov 1998 to 1 Dec 1998
To: Recipients of MVS-UTIL digests <MVS-UTIL@VM.MARIST.EDU>

</PRE></HTML>
