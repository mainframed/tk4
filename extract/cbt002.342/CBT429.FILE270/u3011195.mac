U3011195 CSECT
*
*
*             THE PURPOSE OF THIS PROGRAM IS TO EXTRACT INFORMATION
*        FROM JCL STREAMS AND PLACE IT INTO RECORDS THAT ARE EASILY
*        WORKED WITH BY HIGHER LEVEL LANGUAGE PROGRAMS.  THESE PRO-
*        GRAMS WILL CREATE DSN AND PROGRAM CROSS REFERENCE LISTINGS
*        AS WELL AS AN EASY TO READ JOB STREAM LISTING.  SECONDARY
*        RECORDS ARE ALSO PRODUCED TO RESOLVE DSN BACKREFS.
*
*
*        WRITTEN: 5-14-75 BY HOWARD GLASTETTER
*
*        LATEST FLAG: 06-03-86
*        PURPOSE: ENTER: F XXXXXX MEM NAME ISN'T GETTING ON PROC
*                 NO CHANGE MADE; BUT U3011SPC WAS CHANGE FOR A
*                 SPECIAL PERSONAL EFFORT.
*        LATEST UPDATE: 01-25-84
*        PURPOSE: ALLOW SP PARMS TO 1536 (FROM 1024),
*                 CORRECT SP PGM RESOLVE LOGIC,
*                 ELIMINATE JCL COMMENT RECORD LOGIC.
*        PRIOR UPDATE: 12-29-83
*        PURPOSE: STREAMLINE THE SP RESOLUTION PROCESS.
*
R0       EQU   0
R1       EQU   1
R2       EQU   2         WORK - ADDR SAVE AREA
R3       EQU   3         WORK - BXLE LOGIC
R4       EQU   4         *                   DO NOT ALTER R4
R5       EQU   5         *
R6       EQU   6         WORK AIDS SOME BXLE ROUTINES
R7       EQU   7         WORK FOR EXECUTE MOVE INSTRUCTION - LENGTH
R8       EQU   8         *                                   TO FIELD
R9       EQU   9         *                                   FROM FIELD
R10      EQU   10        SUBROUTINE LINKAGE
R11      EQU   11        WORK
R12      EQU   12        BASE
R13      EQU   13        SYSTEM LINKAGE
R14      EQU   14
R15      EQU   15
         EJECT
BEGIN    SAVE  (14,12)       PROGRAM LINKAGE AND INITIATION
         BALR  12,0
         USING *,12
         ST    R13,REGSAVE+4
         LA    R11,REGSAVE
         ST    R11,8(R13)
         LR    R13,R11
*
         PRINT ON,NOGEN
         OPEN  (FILEIN,,FILEOUT1,(OUTPUT),FILEOUT2,(OUTPUT))
         LA    R4,1          PERMANENTLY INIALIZE R4
LOOP9    EQU   *
         MVC   RCRDOUT1(161),RCRDOUT1-1
*
LOOP10   EQU   *
         BAL   R10,READ70
LOOP10A  EQU   *
         CLC   RCRDIN(2),=C'//'         CHECK FOR NON-JCL
         BNE   LOOP10
         LA    R3,RCRDIN+2         SEARCH FOR 'PROC ' STATEMENT
         LA    R5,RCRDIN+40        PROC STATEMENT SHOULD BE BEFORE HERE
LOOP10C  EQU   *
         CLC   0(6,R3),=C' PROC '
         BE    PRCLP11             FOUND PROC NOW CHECK SYMBOLIC PARMS
         CLC   0(5,R3),=C' JOB '   TREAT A JOB CARD AS IF IT WERE PROC
         BE    JOB11AA
         BXLE  R3,R4,LOOP10C
*
         LA    R3,RCRDIN+2
LOOP10D  EQU   *                   SEARCH FOR STEP AND PGM CARD
         CLC   0(6,R3),=C' EXEC '
         BE    STPRG12             HIT, NOW EXTRACT STEP AND PROG NAMES
         BXLE  R3,R4,LOOP10D
*
         LA    R3,RCRDIN+2
LOOP10E  EQU   *
         CLC   0(6,R3),=C' PEND '
         BE    LPEND10F
         BXLE  R3,R4,LOOP10E
         B     CHKDD30
LPEND10F EQU   *              YOU HAVE HIT A PEND AT THIS POINT
         MVI   OUT1TYPE,C'E'
         MVC   OUT1PRCN,PROCSAVE                   (XXXXXXXXX)
         MVC   PROCSAVE(32),PROCSAVE-1
         B     WRITE20
*
JOB11AA  EQU   *                                   (XXXXXXXXXX)
         MVC   OUT1PRCN+9(5),=C'(JOB)'  INDICATE JOB RATHER THAN PROC
PRCLP11  EQU   *              PROC LOOP
         MVC   PROCSAVE(32),PROCSAVE-1
         LA    R3,RCRDIN+2
         LA    R5,RCRDIN+9
         LA    R6,PROCSAVE    FIRST MOVE PROC NAME TO SAVE AREA
PRCLP11A EQU   *
         CLI   0(R3),C' '
         BE    PRCLP11B       YOU HAVE IT ALL-LEAVE
         MVC   0(1,R6),0(R3)  MOVE A BYTE AT A TIME TO SAVE AREA
         LA    R6,1(0,R6)
         BXLE  R3,R4,PRCLP11A
*                             PROC FULL 8 CHARACTERS ON FALL THRU
PRCLP11B EQU   *
         MVI   OUT1TYPE,C'P'
         MVC   OUT1PRCN,PROCSAVE   PROC CARD NOW CREATED
         BAL   R10,CLRSP60         BLANK SYMPARM WORK AREA
         MVI   SPSTRING,C','  COMMA TRIGGERS FUTURE COMPARE OF SP STRNG
*                                  LETS LOOK FOR SYMBOLIC PARMS
         LA    R5,RCRDIN+71        PREPARE TO SCAN WHOLE RECORD
         LA    R6,SPSTRING+1       POINT TO SYM PARM SAVE AREA
         LA    R7,SPSTRING+1535    POINT PAST LAST BYTE OF STRING
PRCLP11C EQU   *
         CLC   0(5,R3),=C' JOB '
         BE    WRITE20
         CLC   0(6,R3),=C' PROC '
         BE    PRCLP11D
         BXLE  R3,R4,PRCLP11C      YOU WILL NEVER FALL THRU SINCE YOU
*                                  WOULD NOT BE HERE IF NOT 'PROC' RCRD
*                                  OR A 'JOB' CARD.
PRCLP11D EQU   *
         LA    R3,6(R3)       NOW MOVE PARMS IF ANY
PRLP11DA EQU   *
         CLI   0(R3),C' '     SEARCHING FOR FIRST NON BLANK HERE
         BNE   PRCLP11E
         BXLE  R3,R4,PRLP11DA
         B     WRITE20        FALL THRU MEANS NO PARMS
*
PRCLP11E EQU   *
         MVC   0(1,R6),0(R3)  MOVE PARMS TO SYM PARM STRING SAVE AREA
         LA    R6,1(R6)
         CR    R6,R7           YOU MAY ONLY HAVE 1.5 K OF SYMBOLICS
         BE    WRITE20         ANY MORE WILL BE LOST - SORRY
         BXLE  R3,R4,PRCLP11F
         B     WRITE20         FALL THRU MEANS YOU HAVE THEM ALL
*
PRCLP11F EQU   *
         CLC   0(2,R3),=C', '      CONTINUE ON NEXT CARD?
         BE    PRCLP11G            YES
         CLI   0(R3),C' '
         BNE   PRCLP11E            BLANK MEANS YOU HAVE THEM ALL
         B     WRITE20             YOU DO, BYE
PRCLP11G EQU   *
         MVI   0(R6),C','     SEPERATE FIRST SP ON NEXT RECORD
         LA    R6,1(R6)       FROM THE LAST ONE ON THIS RECORD
         BAL   R10,READ70
         LA    R3,RCRDIN+3
         B     PRLP11DA
         EJECT
*        YOU ARE MOVING STEP AND PROGRAM NAME AT THIS POINT
*
STPRG12  EQU   *
         LA    R2,5(R3)           POINT TO AREA PAST ' EXEC '
         LA    R3,RCRDIN+2
         LA    R5,RCRDIN+9
         SR    R7,R7
STPRG12A EQU   *              FIRST GET STEPNAME
         CLI   0(R3),C' '
         BE    STPRG12B
         LA    R7,1(R7)
         BXLE  R3,R4,STPRG12A
*                             FALL THRU MEANS STEPNAME 8 BYTES LONG
STPRG12B EQU   *
         CH    R7,=H'0'       CHECK FOR NO STEPNAME
         BNE   STPR12BA
         MVC   STEPSAVE,=C'*NONAME*'
         B     STPR12BB
STPR12BA EQU   *
         MVI   STEPSAVE,C' '
         MVC   STEPSAVE+1(7),STEPSAVE
         LA    R9,RCRDIN+2
         LA    R8,STEPSAVE
         BAL   R10,MOVE100
STPR12BB EQU   *
         MVI   OUT1TYPE,C'S'
         MVC   OUT1STPN,STEPSAVE
         LR    R3,R2         POINT TO AREA PAST ' EXEC '
*                                  NOW FIND PROGRAM NAME
         LA    R5,RCRDIN+71
STPRG12C EQU   *
         CLI   0(R3),C' '
         BNE   STPRG12D
         BXLE  R3,R4,STPRG12C
*                             SHOULD NEVER FALL THRU
STPRG12D EQU   *
         CLC   0(4,R3),=C'PGM='
         BE    STPRG12F
         CLC   0(5,R3),=C'PROC='
         BE    STPRG12E
         MVC   OUT1PRGN+9(6),=C'(PROC)' INDICATE PROC RATHER THAN PGM
         B     STPRG12G       YOU ARE POINTING TO PROC NAME HERE
STPRG12E EQU   *
         LA    R3,1(R3)       ADJUST TO PROC NAME
         MVC   OUT1PRGN+9(6),=C'(PROC)' INDICATE PROC RATHER THAN PGM
STPRG12F EQU   *
         LA    R3,4(R3)       ADJUST TO PGM NAME
STPRG12G LR    R9,R3
STPRG12H EQU   *              BEGIN OF PROC OR PGM NAME
         CLI   0(R3),C' '
         BE    STPRG12I
         CLI   0(R3),C','
         BE    STPRG12I
         BXLE  R3,R4,STPRG12H
*                             AS ABOVE SHOULD NOT FALL THRU
STPRG12I EQU   *
         SR    R3,R9
         LR    R7,R3          LENGTH OF PGM OR PROC NAME
*              MAY BE MOVING MORE THAN 8 BYTES IF &PGM OR *.PGM.STEP
STPRG12J EQU   *
         LA    R8,OUT1PRGN
         BAL   R10,MOVE100
         MVC   PROGSAVE,OUT1PRGN
         CLI   0(R9),X'50'     FIRST CHECK FOR SYMBOLIC PGM
         BNE   WRITE20         NOT SP - JUST WRITE IT
         LA    R8,PARMARG
         LA    R9,1(R9)        POINT PAST '&'
         BAL   R10,MOVE100     '&' REQUIRES 1 MORE R7 REDUCTION
         LA    R7,1(R7)        RESET R7 FOR SYPRM42 PROCESS
         LA    R8,OUT1PRGN     POINT TO 'TO' AREA
         LA    R10,STPRG12K
         B     SYPRM42        DOUBLE THE MILEAGE OF DSN SP ROUTINES
STPRG12K EQU   *
         MVC   PROGSAVE,OUT1PRGN   RESOLVE 'PROGSAVE' TOO
*
WRITE20  EQU   *
         BAL   R10,WRITE80
         B     LOOP10
         EJECT
CHKDD30  EQU   *              FIND DDNAME
         LA    R3,RCRDIN+2
         LA    R5,RCRDIN+72
CHDD30AA EQU   *
         CLC   0(4,R3),=C' DD '
         BE    CHKDD30A       IT IS
         BXLE  R3,R4,CHDD30AA
*                             FALL THRU MEANS NOT DD RECORD
         B     CKDSN40        SEE IF DSN RECORD
CHKDD30A EQU   *
         CLI   RCRDIN+2,C' '  CONCATINATION?
         BE    CHKDD30D       YES, MOVE SAVED DDNAME TO RECORD
*
         LA    R3,RCRDIN+2    NO, SAVE DD NAME
         LA    R5,RCRDIN+9
         SR    R7,R7
CHKDD30B CLI   0(R3),C' '
         BE    CHKDD30C       END OF DDNAME
         LA    R7,1(R7)
         BXLE  R3,R4,CHKDD30B
*                             FALL THRU MEANS DDN IS 8 BYTES LONG
CHKDD30C EQU   *
         LA    R9,RCRDIN+2
         LA    R8,DDNSAVE
         MVI   DDNSAVE,C' '
         MVC   DDNSAVE+1(7),DDNSAVE
         BAL   R10,MOVE100     MOVE DDNAME TO SAVE AREA
CHKDD30D EQU   *
         MVC   OUT1DDN,DDNSAVE            TO RECORD
         MVI   OUT1TYPE,C'D'
*
CKDSN40  EQU   *              FIND DSN
         LA    R3,RCRDIN+3
         LA    R5,RCRDIN+71
CKDSN40A EQU   *
         CLC   0(4,R3),=C'DSN='
         BE    CKDSN40D
         CLC   0(7,R3),=C'DSNAME='
         BE    CKDSN40C
         CLC   0(2,R3),=C', '      CONTINUATION?
         BE    CKDSN40B
         BXLE  R3,R4,CKDSN40A
*                                  NO DSN OR CONTINUATION ON FALL THRU
         B     LOOP9               START LOOKING FOR SOMETHING ELSE
*
CKDSN40B EQU   *              KEEP LOOKING FOR DSN ON CONTINUATION
         BAL   R10,READ70     RECORDS
         B     CKDSN40
*
CKDSN40C EQU   *
         LA    R3,3(R3)       ADJUST FOR DSNAME
CKDSN40D EQU   *
         LA    R3,4(R3)       ADJUST FOR DSN=
*
*                             MOVE DSN NO MATTER WHAT THE FORMAT
MVDSN41  EQU   *
         LR    R9,R3
         SR    R7,R7
MVDSN41A EQU   *
         CLI   0(R3),C' '
         BE    MVDSN41B
         CLI   0(R3),C','
         BE    MVDSN41B
         LA    R7,1(R7)
         BXLE  R3,R4,MVDSN41A
*
MVDSN41B EQU   *
         LA    R8,OUT1DSN          DSN IN WHATEVER FORMAT NOW IN RCRD 1
         BAL   R10,MOVE100         R7 DECREMENTED BY 1 HERE
*
*                         (1) HHG  12-29-83 SYMPARM RESOLVE REWRITE
*
         MVC   WORKDSN,WORKDSN-1   CLEAR WORK DSN AREA
         LA    R8,WORKDSN          POINT TO BUILD DSN AREA
         LA    R3,OUT1DSN
         LA    R5,OUT1DSN+43
MDSN41BA EQU   *
         CLC   0(2,R3),=X'5050'    CHECK FOR TEMPDSN
         BE    WDDDSN50                YEP, YOU'RE THRU
         CLI   0(R3),X'50'         CHECK FOR SYMPARM
         BE    MDSN41BD                RESOLVE IT
         CLC   0(2,R3),=X'4B4B'    CHECK .. AFTER SYMPARM
         BE    MDSN41BC
         CLI   0(R3),C' '          BLANK MEANS DSN IS BUILT
         BE    MDSN41BB
         MVC   0(1,R8),0(R3)       MOVE BYTE TO WORK DSN
         LA    R8,1(R8)            POINT TO BUILD DSN AREA NEXT BYTE
MDSN41BB EQU   *
         BXLE  R3,R4,MDSN41BA
*
         MVC   OUT1DSN,WORKDSN     MOVE RESOLVED DSN BACK TO RECORD
         B     MDSN41BG            CHECK FOR (+0) GEN
*                                                    -
MDSN41BC EQU   *
         LA    R3,1(R3)            POINT TO BUILD DSN AREA NEXT BYTE
         MVI   0(R8),C'.'          MOVE DELIMITER INDICATOR
         LA    R8,1(R8)            POINT TO BUILD DSN AREA NEXT BYTE
         B     MDSN41BB            BUMP POINTER AND KEEP LOOKING
*
MDSN41BD EQU   *                   BUILD THE ARGUMENT
         SR    R7,R7               LENGTH TO 0
         MVC   PARMARG,PARMARG-1
         LA    R9,PARMARG
         LA    R10,MDSN41BF        BE SURE TO FINISH SEARCH
         LA    R3,1(R3)            POINT PAST THE &
MDSN41BE EQU   *
         MVC   0(1,R9),0(R3)       MOVE BYTE TO WORK DSN
         LA    R7,1(R7)            UP LENGTH +1
         LA    R9,1(R9)            POINT TO BUILD ARG AREA NEXT BYTE
         LA    R3,1(R3)            POINT TO FROM DSN AREA NEXT BYTE
         CLI   0(R3),C'.'          ARE WE DONE?
         BE    SYPRM42             YEP
         CLI   0(R3),C' '
         BE    SYPRM42             YEP
         CLI   0(R3),C'('
         BE    SYPRM42             YEP
         CLI   0(R3),C')'
         BE    SYPRM42             YEP
         CLI   0(R3),X'50'
         BE    SYPRM42             YEP
         CR    R3,R5
         BH    SYPRM42             YEP   THE DSN HAS BEEN EXHAUSTED
         B     MDSN41BE            NOPE
*
MDSN41BF EQU   *                   RETURN HERE AND GO FOR MORE
         L     R3,SAVE3
         L     R5,SAVE5
         AR    R8,R7               UP WORK DSN POINTER
         LA    R8,1(R8) TO NEXT EMPTY SPACE
         BCT   R3,MDSN41BB         BXLE ADJUSTMENT AND DOITTOIT
*
*                     END (1) HHG  12-29-83 SYMPARM RESOLVE REWRITE
*
*                     MUCH REDUNDANT CODE BELOW WAS REMOVED - HHG
*
*
MDSN41BG EQU   *
*
         LA    R3,OUT1DSN+1   MAKE ANY '(+0)' = '(0)' -- AID THE XREF
         LA    R5,OUT1DSN+41
MDSN41BH EQU   *
         CLC   0(4,R3),=C'(+0)'
         BE    MDSN41BI
         BXLE  R3,R4,MDSN41BH
         B     MDSN41BJ           FALL THRU MEANS NO '(+0)'
MDSN41BI EQU   *
         LA    R3,1(R3)
         LA    R5,1(R3)
         MVC   0(2,R3),0(R5)  THIS OVERLAYS THE '+'
         MVI   1(R5),X'40'    BLANK OUT EXTRA ')'
*
MDSN41BJ EQU   *
         MVC   OUT2DSN,OUT1DSN     DSN NOW IN RECORD2 TO HANDLE BACKREF
         CLI   0(R9),C'*'          IS THIS A BACK REF?
         BE    BKREF43             YEP
         B     WDDDSN50            NOPE
         EJECT
*                         (2) HHG  12-29-83 SYMPARM RESOLVE REWRITE
SYPRM42  EQU   *
         LA    R9,PARMARG
         ST    R3,SAVE3       MAINTAIN POINTERS TO ORIGINAL DSN
         ST    R5,SAVE5       *
         BCT   R7,*+4         EXEC MOVE ADJUSTMENT
         ST    R7,SAVE7       *
         LA    R3,SPSTRING
         LA    R5,SPSTRING+1535
*                             END (2) HHG  12-29-83 REWRITE
SYPR42AA EQU   *
         CLI   0(R3),C','
         BNE   SYPR42A1       COMPARE ONLY AFTER ',' DELIMITER
         LA    R3,1(R3)       OK TO COMPARE - START WITH NEXT BYTE
         EX    R7,COMP120
         BE    SYPRM42A       YOU FOUND PARM NOW MOVE DSN
SYPR42A1 EQU   *
         BXLE  R3,R4,SYPR42AA
         B     SYPRM42C       FALL THRU MEANS & IS PART OF DSN
SYPRM42A EQU   *
         AR    R3,R7          ADJUST TO REAL DSN
         CLI   1(R3),C'='     MAKE SURE SP HAS NOT HIT ON AN = PREFIX
         BNE   SYPR42A1       IT HAS, KEEP LOOKING
         LA    R3,2(R3)       POINT PAST EQUAL '='  (ADJUST FOR R7)
         CLI   0(R3),X'7D'    SURROUNDED BY QUOTES
         BNE   SYPR42A2       NO
         CLC   0(2,R3),=X'7D7D' YES. CHECK DOUBLE QUOTES FIRST HG 10/93
         BE    SYPRM42C       PARM IS NULL, DON'T RESOLVE      HG 10/93
         LA    R3,1(R3)       YES
SYPR42A2 EQU   *
         CLI   0(R3),C','     CHECK FOR A NO DEFAULT SITUATION
         BE    SYPRM42C       I.E. 'PARM=,'
         CLI   0(R3),C' '     CHECK FOR A NO DEFAULT SITUATION
         BE    SYPRM42C       I.E. 'PARM= '
         SR    R7,R7
         LR    R9,R3        SAVE ADDR OF DEFAULT NAME
SYPR42AB EQU   *
         CLI   0(R3),C','
         BE    SYPRM42B
         CLI   0(R3),C' '
         BE    SYPRM42B
         CLI   0(R3),X'7D'    HAVE YOU HIT AN ENDING QUOTE?
         BE    SYPRM42B
         LA    R7,1(R7)
         BXLE  R3,R4,SYPR42AB FALL THRU SHOULD NOT HAPPEN
SYPRM42B EQU   *
         BCT   R7,*+4         EXEC MOVE ADJUSTMENT
         EX    R7,MOVE110     MOVE DSN FROM SYM PARM STRING
         BR    R10            BACK TO STPRG12K OR MDSN41BF
SYPRM42C EQU   *
         LA    R9,PARMARG-1   MOVE UNRESOLVED PARM TO WORK DSN
         L     R7,SAVE7       LENGTH OF UNRESOLVED SP
         LA    R7,1(R7)       EXEC MOVE ADJUSTMENT-PICK UP &
         EX    R7,MOVE110     MOVE DSN FROM SYM PARM STRING
         BR    R10            BACK TO STPRG12K OR MDSN41BF
         EJECT
*                        CREATE RECORD TO RESOLVE BACK REF
BKREF43  EQU   *
         LR    R3,R9     RESTORE TO BEGIN OF DSN
         SR    R6,R6     USE AS A COUNTER
         LA    R3,1(R3)  POINT TO 1ST REFERBACK DELIMITER
BKREF43A EQU   *
         CLI   0(R3),C'.'     CHECK DELIMITERS
         BE    BKREF43B       YES
         CLI   0(R3),C','     CHECK END OF BACK REF
         BE    BKREF43C       YES
         CLI   0(R3),C' '
         BE    BKREF43C       YES
         BXLE  R3,R4,BKREF43A
*
BKREF43B EQU   *
         LA    R6,1(R6)       INCRIMENT COUNT REGISTER
         BXLE  R3,R4,BKREF43A
*                             SHOULD NOT FALL THRU
BKREF43C EQU   *
         CH    R6,=H'1'       BACK REF FOR THIS STEP?
         BNE   BKREF43D
         LA    R9,2(R9)       YES,POINT TO DDNAME
         LR    R3,R9     INITIATE LOOP 44A
         SR    R7,R7     *
         MVC   OUT2STPR,STEPSAVE  MOVE THIS STEPNAME AS STEP REF
         B     MVDDR44A
*
BKREF43D EQU   *
         LA    R9,2(R9)            POINT TO PRIOR STEP NAME
         SR    R7,R7
         LR    R3,R9
BKREF43E EQU   *
         CLI   0(R3),C'.'
         BE    BKREF43F
         LA    R7,1(R7)            LENGTH OF STEP NAME
         BXLE  R3,R4,BKREF43E WILL NOT FALL THRU
*
BKREF43F EQU   *
         LA    R8,OUT2STPR    POINT TO STEP REF
         BAL   R10,MOVE100    MOVE IT
         LA    R3,1(R3)       POINT TO PROCSTEP OR DDNAME
         CH    R6,=H'2'       IS IT DDNAME?
         BE    MVDDR44        YES
*                             AT THIS POINT YOU HAVE A PROC STEP
BKREF43G EQU   *
         CLI   0(R3),C'.'
         BE    BKREF43H       YOU HAVE NOW PASSED PROCSTEPNAME
         BXLE  R3,R4,BKREF43G
*                             YOU WILL NOT DROP THRU
BKREF43H EQU   *
         LA    R3,1(R3)       POINT TO DDNAME
         EJECT
MVDDR44  EQU   *
         SR    R7,R7
         LR    R9,R3          SAVE DDNAME ADDR
MVDDR44A EQU   *
         CLI   0(R3),C','
         BE    MVDDR44B
         CLI   0(R3),C' '
         BE    MVDDR44B
         LA    R7,1(R7)       LENGTH OF DDNAME
         BXLE  R3,R4,MVDDR44A
*                             SHOULD NOT FALL THRU
MVDDR44B EQU   *
         LA    R8,OUT2DDNR
         BAL   R10,MOVE100    MOVE THE BACK REF DDN TO RECORD2
WTBKRF45 EQU   *
         MVC   OUT2PRCN,PROCSAVE
         MVC   OUT2DDN,DDNSAVE
         MVC   OUT2STPN,STEPSAVE
         MVI   OUT2TYPE,C'R'
         BAL   R10,WRITE90
*                             WRITE RECORD 1 AT THIS POINT
WDDDSN50 EQU   *
         MVC   OUT1STPX,STEPSAVE
         MVC   OUT1PRGX,PROGSAVE
         MVC   OUT1PRCX,PROCSAVE
         BAL   R10,WRITE80
         BAL   R10,READ70
         LA    R3,RCRDIN+2
         LA    R5,RCRDIN+72
NOMODD51 EQU   *                   MAKE SURE THE NEXT CARD IS NOT
         CLC   0(6,R3),=C' PROC '  A DD CONCATINATION
         BE    NOMODD52
         CLC   0(5,R3),=C' JOB '
         BE    NOMODD52
         CLC   0(6,R3),=C' PEND '
         BE    NOMODD53
         CLC   0(6,R3),=C' EXEC '
         BE    NOMODD54
         BXLE  R3,R4,NOMODD51
*
         CLI   RCRDIN+2,C'*'
         BNE   CHKDD30             YOU HAVE ANOTHER DD RECORD HERE
*                                      OR RESIDUE FROM THE LAST ONE.
         MVI   DDNSAVE,C' '
         MVC   DDNSAVE+1(7),DDNSAVE
         B     LOOP10A
*
NOMODD52 EQU   *
         MVC   PROCSAVE(32),PROCSAVE-1       BLANK SAVE AREAS
NOMODD53 EQU   *
         BAL   R10,CLRSP60         BLANK SYMPARM WORK AREA
NOMODD54 EQU   *
         MVI   STEPSAVE,C' '
         MVC   STEPSAVE+1(23),STEPSAVE
         B     LOOP10A
         EJECT
*                   S U B R O U T I N E S
*
CLRSP60  EQU   *
         MVC   SPSTRING(256),SPSTRING-1
         MVC   SPSTRING+256(256),SPSTRING+255
         MVC   SPSTRING+512(256),SPSTRING+511
         MVC   SPSTRING+768(256),SPSTRING+767
         MVC   SPSTRING+1024(256),SPSTRING+1023
         MVC   SPSTRING+1280(256),SPSTRING+1279
         BR    R10
*
READ70   EQU   *
         GET   FILEIN,RCRDIN
         CLC   RCRDIN(3),=C'//*'  BYPASS COMMENTS (8-29-83) HG
         BE    READ70
         MVI   RCRDIN+71,C' ' BLANK WILL ALWAYS FOLLOW LAST COMMA
         BR    R10
*
WRITE80  EQU   *                  WRITE PRIMARY FILE
         PUT   FILEOUT1,RCRDOUT1
         MVC   RCRDOUT1,RCRDOUT1-1
         BR    R10
*
WRITE90  EQU   *                  WRITE SECONDARY FILE
         PUT   FILEOUT2,RCRDOUT2
         MVC   RCRDOUT2,RCRDOUT2-1
         BR    R10
*
MOVE100  BCT   R7,MOVE100A        CORRECT LENGTH IN R7
MOVE100A EX    R7,MOVE110
         BR    R10
*
MOVE110  MVC   0(0,R8),0(R9)      EXECUTED MOVE INSTRUCTION
COMP120  CLC   0(0,R3),0(R9)      EXECUTED COMPARE INSTRUCTION
*
EOF130   EQU   *
         CLOSE (FILEIN,,FILEOUT1,,FILEOUT2)
         L     R13,REGSAVE+4
         RETURN (14,12),RC=0
         EJECT
REGSAVE  DS    9D
SVDSNLN  DS    F         SAVE AREA FOR DSN LENGTH
SVPRMWD  DS    F         SAVE AREA FOR DSN ADDR
SAVE9    DS    F         SAVE AREA FOR ADDR OF SUB PARM SYM PARM
*
*                         (3) HHG  12-29-83 SYMPARM RESOLVE REWRITE
*
SAVE3    DS    F         SAVE AREA R3
SAVE5    DS    F         SAVE AREA R5
SAVE7    DS    F         SAVE AREA R7
         DC    X'50'
PARMARG  DS    CL8       SYMBOLIC ARGUMENT WORK AREA
FILLER   DC    CL32'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
*
*                     END (3) HHG  12-29-83 SYMPARM RESOLVE REWRITE
*
FILEIN   DCB   DSORG=PS,LRECL=80,DDNAME=FILEIN,MACRF=(GM),EODAD=EOF130
FILEOUT1 DCB   DSORG=PS,LRECL=80,DDNAME=FILEOUT1,MACRF=(PM)
FILEOUT2 DCB   DSORG=PS,LRECL=80,DDNAME=FILEOUT2,MACRF=(PM)
*
RCRDIN   DS    CL80
         DC    C' '
RCRDOUT1 DS    0CL80     PRIMARY OUTPUT FILE
OUT1TYPE DS    CL1
OUT1DDN  DS    CL8       THIS DESCRIPTION IS FOR THE TYPE 'D' RECORD.
OUT1DSN  DS    CL44      IT CONTAINS DDNAME AND DSNAME.
OUT1STPX DS    CL8       IN ADDITION IT DUPLICATES INFO FOUND IN OTHER
OUT1PRGX DS    CL8       RECORDS.   IE STEPNAME, PROGNAME AND PROCNAME.
OUT1PRCX DS    CL8
         DS    CL3
*
         ORG   OUT1DDN   THIS DESCRIPTION IS FOR THE TYPE 'S' RECORD.
OUT1STPN DS    CL8       IT CONTAINS STEPNAME AND PROGNAME
OUT1PRGN DS    CL8
*
         ORG   OUT1DDN   THIS DESCRIPTION IS FOR THE TYPE 'P' OR 'E'
OUT1PRCN DS    CL8       RECORD. IT CONTAINS PROCNAME FOR BEGIN OR END
         ORG
*
         DC    C' '
RCRDOUT2 DS    0CL80     SECONDARY OUTPUT FILE
OUT2TYPE DS    CL1       IDENTIFIED WITH 'R' FOR REFERBACK.
OUT2DDN  DS    CL8       DDNAME                 * THIS FILE CAN BE USED
OUT2DSN  DS    CL36      DSNAME                 * BY A FOLLOWING PROG
OUT2PRCN DS    CL8        PROC REFERED TO
OUT2STPN DS    CL8       THIS STEP NAME         * TO RESOLVE DSN BACK
OUT2STPR DS    CL8       STEP NAME REFERED TO   * REFERENCES
OUT2DDNR DS    CL8       DD NAME REFERED TO
         DS    CL3
         DC    C' '
SPSTRING DC    1536C' '  SYMBOLIC PARM SAVE AREA
         DC    C' '
PROCSAVE DC    CL8' '
STEPSAVE DC    CL8' '
PROGSAVE DC    CL8' '
DDNSAVE  DC    CL8' '
         DC    C' '
WORKDSN  DC    CL44' '   SAVE AREA FOR QUAL  DSNS WITH SYM PARMS
         END
DOITTOIT ABEND 16,DUMP,STEP
