         TITLE 'FINDMEM -- SEARCH PDS FOR A PARTICULAR MEMBER'
**********************************************************************
*        THIS PROGRAM IS A SUBROUTINE WHICH DYNAMICALLY ALLOCATES
*        THE FILE WITH DSN PASSED TO THIS PROGRAM AND THEN SEARCHES
*        THE DIRECTORY TO DETERMINE WHETHER THE MEMBER NAME PASSED
*        TO THIS PROGRAM EXISTS.
*
*        TO CALL THIS PROGRAM FROM A COBOL PROGRAM, DO THE FOLLOWING:
*
*           IF YOUR PDS IS CATALOGUED,
*
*               MOVE YOUR DSN TO DSNAME OF FINDMEM-I-O-AREA.
*               MOVE YOUR MEMBER NAME
*                   TO MEMBER-NAME OF FINDMEM-I-O-AREA.
*               CALL 'FINDMEM' USING FINDMEM-I-O-AREA.
*
*                    WHERE:
*
*                          01  FINDMEM-I-O-AREA.
*                              05  OP-SYS VALUE 'VS'  PIC X(2).
*                              05  MEMBER-NAME        PIC X(8).
*                              05  DSNAME             PIC X(44).
*                              05  SUCCESS-INDICATOR  PIC 99.
*
*
*           IF YOUR PDS IS NOT CATALOGUED,
*
*               MOVE YOUR DSN TO DSNAME OF FINDMEM-I-O-AREA.
*               MOVE YOUR MEMBER NAME
*                   TO MEMBER-NAME OF FINDMEM-I-O-AREA.
*               MOVE THE VOLUME SERIAL NUMBER TO VOL-SER-NO.
*               CALL 'FINDMEM' USING FINDMEM-I-O-AREA, VOL-SER-NO.
*
*                    WHERE:
*
*                          01  FINDMEM-I-O-AREA (SEE ABOVE)
*                          01  VOL-SER-NO             PIC X(6).
*
*
*
*             SUCCESS-INDICATOR   MEANING
*             -----------------   -----------------------------------
*
*                    00           SUCCESSFUL ALLOCATION AND FIND
*                    04           SUCCESSFULLY ALLOCATED FILE BUT
*                                   COULDN'T FIND MEMBER IN DIRECTORY
*                    08           UNSUCCESSFUL ALLOCATION
*                    12           DSN PASSED TO THIS PGM IS SPACES
*                    16           MEMBER NAME PASSED IS SPACES
*                    20           I/O ERROR READING DIRECTORY
*                    24           UNSUCCESSFUL FREE OF DDNAME FINDMEDD
*                    28           INVALID VOL SER PASSED TO THIS PGM
*
*
*        ASSIGNMENT OF REGISTERS
*        -----------------------
*
*        REGISTER      USAGE
*        --------      -------------------------------------------
*
*           1          ADDRESS OF PARAMETER LIST
*           2          NOT USED
*           3          NOT USED
*           4          NOT USED
*           5          RETURN REG USED IN ALL BR AND LINK INSTRUCTIONS
*           6          NOT USED
*           7          WORK REGISTER
*           8          WORK REGISTER
*           9          WORK REGISTER
*           10         SAVE RETURN CODE VALUE
*           11         SAVE REGISTER 1
*           12         BASE REGISTER
*           13         ADDRESS OF SAVE AREA
*           14         RETURN ADDRESS
*           15         ENTRY POINT ADDRESS
*
*---------------------------------------------------------------------
*
*  ACTIVITY LOG:
*
*    V2.0  -   GORDON J. SCHILLINGER    DIS/CSD                09/7/88
*              MODIFIED TO MAKE FINDMEM RE-ENTERANT
*
**********************************************************************
         EJECT
FINDMEM  ENTERR LEVEL=V_2.0
         LR    R11,R1
********************************************************************
*        INITIALIZE DYNAMIC AREAS
********************************************************************
         OI    ROPPL,X'80'
         OI    RCPPL,X'80'
         MVC   CBLOK(CINITL),CINIT
         MVC   PDSFILE(PDSFLEN),PDSFINIT
         MVC   FREEBLOK(FREELEN),FREEINIT
         MVC   ALOCBLOK(ALOCLEN),ALOCINIT
         LA    R1,FREERB
         STCM  R1,7,FREEPARM+1
         LA    R1,FREETUPL
         ST    R1,ERCODE+4
         LA    R1,FREEUNT1
         ST    R1,FREETUPL
         LA    R1,FREEUNT2
         STCM  R1,7,FREETUPL+5
         LA    R1,DD1RB
         STCM  R1,7,DD1PARM+1
         LA    R1,DD1TUPL
         ST    R1,DD1RB+8
         LA    R1,DD1UNIT1
         LA    R2,DD1UNIT2
         STM   R1,R2,DD1TUPL
         LA    R1,DD1UNIT3
         STCM  R1,7,DD1HIGH3+1
         LA    R1,DD1UNIT4
         STCM  R1,7,DD1HIGH4+1
         LA    R1,DD1UNIT5
         STCM  R1,7,DD1HIGH5+1
*
         L     R9,0(R11)
         MVC   IOAREA,0(R9)
         TM    0(R11),X'80'   CALLED W/ SINGLE PARM?
         BO    NOINVOL        IF SO, BRANCH TO NOINVOL
         L     R9,4(R11)      R9==> ADDRESS OF VOL SER NO
         MVC   INVOL,0(R9)    PUT VOL SER NO INTO INVOL
         B     MAINLINE       BRANCH TO MAINLINE
NOINVOL  MVC   INVOL,=CL6'ABSENT'
         EJECT
         SPACE 3
*
********************************************************************
*                                                                  *
*        M A I N   L I N E   L O G I C                             *
*                                                                  *
********************************************************************
*
MAINLINE BAL   5,LOADSN            LOAD DATA AREAS DSNLEN AND DSNAME
         CLC   PROCESSW,CYES       WERE DATA AREAS SUCCESSFULLY LOADED?
         BNE   SHUTDOWN            IF NOT, BRANCH TO SHUTDOWN
         CLC   INVOL,=CL6'ABSENT'  WAS VOL SER PROVIDED ?
         BE    ALLOKATE            IF NOT, BRANCH TO ALLOKATE
         BAL   5,EDITVOL           EDIT THE VOL SER PROVIDED
         CLC   GOODVOL,CYES        WAS THE VOL SER VALID ?
         BNE   SHUTDOWN            IF NOT, BRANCH TO SHUTDOWN
ALLOKATE BAL   5,DYNAMALC          PERFORM DYNAMIC ALLOCATION
         CLC   PROCESSW,CYES       WAS DYNAMIC ALLOCATION SUCCESSFUL?
         BE    OPENFIL             IF YES, GO TO OPENFIL
         B     SHUTDOWN            BRANCH TO SHUTDOWN
OPENFIL  OPEN  (PDSFILE,(INPUT)),MF=(E,ROPPL)  OPEN PDSFILE
         MVC   FILOPEN,CYES        MOVE 'YES' TO FILOPEN
         BAL   5,SERCHPDS          PERFORM SEARCH DIRECTORY FOR MEMBER
         CLC   PROCESSW,CYES       WAS MEMBER FOUND?
         BE    FOUND               IF YES, GO TO FOUND
         B     SHUTDOWN            BRANCH TO SHUTDOWN
FOUND    MVC   INDICATR,C00        MOVE 00 TO SUCCESS-INDICATOR
         LA    R10,0               MOVE 0 TO REGISTER 10
         B     SHUTDOWN            BRANCH TO SHUTDOWN
         EJECT
         SPACE 3
*
********************************************************************
*                                                                  *
*        THIS ROUTINE IS RESPONSIBLE FOR LOADING THE 2 DATA AREAS  *
*        DSNLEN AND DSNAME.  THE DSN THAT IS PASSED TO THIS PGM    *
*        IS MOVED TO DSNAME.  THIS ROUTINE THEN CALCULATES THE     *
*        SIGNIFICANT LENGTH OF DSNAME AND MOVE THAT VALUE TO       *
*        DSNLEN (EXPRESSED IN BINARY)                              *
*                                                                  *
********************************************************************
*
LOADSN   ST    R5,SAVEIT1            SAVE REG 5 IN SAVEIT1
         MVC   DSNAME,DSN            MOVE DSN THAT IS PASSED TO THIS
*                                      PROGRAM TO DSNAME
         LA    R8,44                 LOAD REG 8 WITH 44
         LA    R7,DSNAME+43
COMPR1   C     R8,=F'1'              COMPARE REG 8 TO 1
         BNL   COMPR2                IF NOT LOW, GO TO COMPR2
         MVC   INDICATR,C12          MOVE 12 TO SUCCESS-INDICATOR
         LA    R10,12                MOVE 12 TO REGISTER 10
         MVC   PROCESSW,CNO          MOVE 'NO ' TO PROCESSW
         B     EXITLOAD              BRANCH TO EXITLOAD
COMPR2   CLI   0(R7),C' '            IS DSNAME AS INDEXED BY REG 7
*                                      EQUAL TO A SPACE?
         BNE   LOADLEN               IF NOT, GO TO LOADLEN
         S     R7,=F'1'              SUBTRACT 1 FROM REGISTER 7
         S     R8,=F'1'              SUBTRACT 1 FROM REGISTER 8
         B     COMPR1                BRANCH TO COMPR1
LOADLEN  ST    R8,R8LENGTH           STORE REG 8 IN R8LENGTH
         MVC   DSNLEN(2),R8LENGTH+2  MOVE LOW ORDER 2 BYTES
*                                      OF R8LENGTH TO DSNLEN
         MVC   PROCESSW,CYES         MOVE 'YES' TO PROCESSW
EXITLOAD L     R5,SAVEIT1            RESTORE REGISTER 5
         BR    R5                    RETURN
         EJECT
         SPACE 3
*
********************************************************************
*                                                                  *
*               D Y N A M I C   A L L O C A T I O N                *
*               -----------------------------------                *
*                                                                  *
*        THIS ROUTINE FIRST ATTEMPTS TO FREE DDNAME FINDMEDD.      *
*        IF DDNAME FINDMEDD WAS SUCCESSFULLY FREED, THEN THIS      *
*        ROUTINE BRANCHES TO THE DYNAMIC ALLOCATION MACRO          *
*        DYNALLOC.  IF DDNAME FINDMEDD WAS NOT SUCCESSFULLY        *
*        FREED, THEN IT CHECKS FOR ERROR REASON CODE 0438          *
*        (DDNAME NOT FOUND).  IF THE ERROR REASON CODE IS 0438,    *
*        THEN THIS ROUTINE BRANCHES TO THE DYNAMIC ALLOCATION      *
*        MACRO DYNALLOC, ELSE IT PRODUCES AN ERROR CONDITION       *
*        (SUCCESS-INDICATOR = '24')                                *
*                                                                  *
********************************************************************
*
         SPACE 3
DYNAMALC ST    R5,SAVEIT2
         MVC   PROCESSW,CYES
         LA    R1,FREEPARM
         DYNALLOC                      FREE F(FINDMEDD)
         LTR   R15,R15                 TEST REGISTER 15 FOR ZERO
         BZ    DODYNAM                 IF ZERO, BRANCH TO DODYNAM
         CLC   ERCODE,HEX0438          COMPARE ERROR REASON CODE
*                                         AGAINST HEXADECIMAL 0438
         BE    DODYNAM                 IF EQUAL, BRANCH TO DODYNAM
         MVC   PROCESSW,CNO            MOVE 'NO ' TO PROCESSW
         MVC   INDICATR,C24            MOVE '24' TO SUCCESS-INDICATOR
         LA    R10,24                  MOVE 24 TO REGISTER 10
         BR    R5                      RETURN
DODYNAM  CLC   INVOL,=CL6'ABSENT'      WAS VOL SER PROVIDED ?
         BE    DODYNAM1                IF NOT, BRANCH TO DODYNAM1
         MVI   DD1HIGH3,X'00'
         MVI   DD1HIGH4,X'00'
         MVI   DD1HIGH5,X'80'
         MVC   DD1VOLSR,INVOL
         B     DODYNAM2
DODYNAM1 MVI   DD1HIGH3,X'80'
         MVI   DD1HIGH4,X'00'
         MVI   DD1HIGH5,X'00'
DODYNAM2 LA    R1,DD1PARM
         DYNALLOC                      ALLOC F(FINDMEDD) DA(DSN) SHR
         L     R5,SAVEIT2
         LTR   R15,R15                 TEST REGISTER 15 FOR ZERO
         BZR   R5                      IF ZERO, RETURN
         MVC   PROCESSW,CNO            MOVE 'NO ' TO PROCESSW
         MVC   INDICATR,C08            MOVE '08' TO SUCCESS-INDICATOR
         LA    R10,8                   MOVE 8 TO REGISTER 10
         BR    R5                      RETURN
         EJECT
*
********************************************************************
*                                                                  *
*        THIS ROUTINE IS RESPONSIBLE FOR SEARCHING THE             *
*        DYNAMICALLY ALLOCATED PDS FOR THE GIVEN MEMBER            *
*                                                                  *
********************************************************************
*
SERCHPDS ST    R5,SAVEIT3           SAVE REG 5 IN SAVEIT3
         CLC   MEMBER,EIGHTSP       IS MEMBER EQUAL TO 8 SPACES?
         BNE   SEARCHIT             IF NOT, GO TO SEARCHIT
         MVC   INDICATR,C16         MOVE 16 TO SUCCESS-INDICATOR
         LA    R10,16               MOVE 16 TO REGISTER 10
         MVC   PROCESSW,CNO         MOVE 'NO ' TO PROCESSW
         B     EXITSRCH             BRANCH TO EXITSRCH
SEARCHIT FIND  PDSFILE,MEMBER,D     SEARCH DIRECTORY FOR MEMBER
         ST    R15,SAVER15          PUT REG 5 CONTENTS INTO SAVER15
         CLI   SAVER15+3,X'00'      CONDITION CODE 00?
         BE    RC00                 IF YES, GO TO RC00
         CLI   SAVER15+3,X'04'      CONDITION CODE 04?
         BE    RC04                 IF YES, GO TO RC04
         MVC   INDICATR,C20         MOVE 20 TO SUCCESS-INDICATOR
         LA    R10,20               MOVE 20 TO REGISTER 10
         MVC   PROCESSW,CNO         MOVE 'NO ' TO PROCESSW
         B     EXITSRCH             BRANCH TO EXITSRCH
RC04     MVC   INDICATR,C04         MOVE 04 TO SUCCESS-INDICATOR
         LA    R10,4                MOVE 4 TO REGISTER 10
         MVC   PROCESSW,CNO         MOVE 'NO ' TO PROCESSW
         B     EXITSRCH             BRANCH TO EXITSRCH
RC00     MVC   PROCESSW,CYES        MOVE 'YES' TO PROCESSW
EXITSRCH L     R5,SAVEIT3           RESTORE REGISTER 5
         BR    R5                   RETURN
         EJECT
*
*
***********************************************************
*                                                         *
*        THIS ROUTINE IS RESPONSIBLE FOR EDITING INVOL    *
*                                                         *
*        IF INVOL MEETS THE CRITERIA FOR BEING A VALID    *
*        VOLUMER SERIAL NUMBER (6 BYTES LONG, ALL         *
*        NUMERICS AND ALPHABETICS), THEN THIS ROUTINE     *
*        WILL MOVE 'YES' TO GOODVOL ELSE MOVE 'NO '       *
*        TO GOODVOL                                       *
*                                                         *
***********************************************************
*
*
EDITVOL  ST    R5,SAVEIT4
         MVC   GOODVOL,=CL3'YES'
         MVC   EDITBYTE(1),INVOL
         BAL   R5,EDIT1BYT
         CLC   GOODVOL,=CL3'YES'
         BNE   EXITEVOL
         MVC   EDITBYTE(1),INVOL+1
         BAL   R5,EDIT1BYT
         CLC   GOODVOL,=CL3'YES'
         BNE   EXITEVOL
         MVC   EDITBYTE(1),INVOL+2
         BAL   R5,EDIT1BYT
         CLC   GOODVOL,=CL3'YES'
         BNE   EXITEVOL
         MVC   EDITBYTE(1),INVOL+3
         BAL   R5,EDIT1BYT
         CLC   GOODVOL,=CL3'YES'
         BNE   EXITEVOL
         MVC   EDITBYTE(1),INVOL+4
         BAL   R5,EDIT1BYT
         CLC   GOODVOL,=CL3'YES'
         BNE   EXITEVOL
         MVC   EDITBYTE(1),INVOL+5
         BAL   R5,EDIT1BYT
         B     EXITEVOL
*
*
*
EDIT1BYT ST    R5,SAVEIT5            SAVE REG 14 ADDRESS IN SAVEIT5
         CLI   EDITBYTE,C'0'
         BL    NEXTEST
         CLI   EDITBYTE,C'9'
         BH    BADINVOL
         B     EXITEDT1
NEXTEST  CLI   EDITBYTE,C'A'
         BL    BADINVOL
         CLI   EDITBYTE,C'Z'
         BH    BADINVOL
         B     EXITEDT1
BADINVOL MVC   GOODVOL,=CL3'NO '
         MVC   INDICATR,C28         MOVE 28 TO SUCCESS-INDICATOR
         LA    R10,28               MOVE 28 TO REGISTER 10
EXITEDT1 L     R5,SAVEIT5
         BR    R5
*
*
*
EXITEVOL L     R5,SAVEIT4
         BR    R5
         EJECT
*
********************************************************************
*                                                                  *
*        E N D  O F   J O B   P R O C E S S I N G                  *
*                                                                  *
********************************************************************
*
SHUTDOWN L     R9,0(R11)
         MVC   0(56,R9),IOAREA
         CLC   FILOPEN,CYES        WAS FILE OPENED?
         BNE   LOADR15             IF NOT, GO TO LOADR15
         CLOSE (PDSFILE),MF=(E,RCPPL)  CLOSE FILE
LOADR15  LR    R15,R10
         L     R13,4(R13)
         RETURN (14,12),RC=(15)
         EJECT
********************************************************************
*                                                                  *
*        S T A T I C   W O R K   A R E A                           *
*                                                                  *
********************************************************************
CINIT    DS    0F
         DC    CL3'YES'
         DC    CL3'NO '
         DC    CL2'00'
         DC    CL2'04'
         DC    CL2'08'
         DC    CL2'12'
         DC    CL2'16'
         DC    CL2'20'
         DC    CL2'24'
         DC    CL2'28'
         DC    CL3'NO '
         DC    CL8' '
         DS    CL3
         DC    X'0438'
CINITL   EQU   *-CINIT
PDSFINIT DCB   DDNAME=FINDMEDD,DSORG=PO,MACRF=(R)
PDSFLEN  EQU   *-PDSFINIT
*
*        DATA STRUCTURE FOR FREEING OF DDNAME FINDMEDD
FREEINIT DS    0F
         DC    X'80'         TURN ON HIGH ORDER BIT
         DC    AL3(0)        ADDRESS OF REQUEST BLOCK
         DC    X'14'         S99RBLN (LENGTH OF REQUEST BLOCK)
         DC    X'02'         S99VERB (REQUEST FOR UNALLOCATION)
         DC    X'2000'       S99FLAG1 (DO NOT MOUNT VOLUMES)
         DC    X'0000'       S99ERROR (ERROR REASON CODE)
         DC    X'0000'       S99INFO (INFORMATION REASON CODE)
         DC    A(0)          S99TXTPP (ADDR OF POINTER TO TEXT UNIT)
         DC    X'00000000'   RESERVED
         DC    X'00000000'   S99FLAG2
         DC    A(0)          ADDRESS OF TEXT UNIT #1
         DC    X'80'         TURN ON HIGH ORDER BIT
         DC    AL3(0)        ADDRESS OF TEXT UNIT #2
         DC    X'0001',X'0001',X'0008',C'FINDMEDD'
         DC    X'0007'
         DC    X'0000'
FREELEN  EQU   *-FREEINIT
*
*        DATA STRUCTURE FOR DYNAMIC ALLOCATION
ALOCINIT DS    0F
         DC    X'80'         TURN ON HIGH ORDER BIT
         DC    AL3(0)        ADDRESS OF REQUEST BLOCK
         DC    X'14'         S99RBLN (LENGTH OF REQUEST BLOCK)
         DC    X'01'         S99VERB (REQUEST FOR DSNAME ALLOC)
         DC    X'2000'       S99FLAG1 (DO NOT MOUNT VOLUMES)
         DC    X'0000'       S99ERROR (ERROR REASON CODE)
         DC    X'0000'       S99INFO (INFORMATION REASON CODE)
         DC    A(0)          S99TXTPP (ADDR OF POINTERS TO TEXT UNITS
         DC    X'00000000'   RESERVED
         DC    X'00000000'   S99FLAG2
         DC    A(0)          ADDRESS OF TEXT UNIT #1
         DC    A(0)          ADDRESS OF TEXT UNIT #2
         DS    XL1
         DC    AL3(0)        ADDRESS OF TEXT UNIT #3
         DS    XL1
         DC    AL3(0)        ADDRESS OF TEXT UNIT #4
         DS    XL1
         DC    AL3(0)        ADDRESS OF TEXT UNIT #5
         DC    X'0001',X'0001',X'0008',C'FINDMEDD'
         DC    X'0002'
         DC    X'0001'
         DS    BL2
         DS    CL44
         DC    X'0004',X'0001',X'0001',X'08'
         DC    X'0015',X'0001',X'0008',C'SYSALLDA'
         DC    X'0010'
         DC    X'0001'
         DC    X'0006'
ALOCLEN  EQU   *-ALOCINIT
*
*        LITERAL POOL
         LTORG
         EJECT
********************************************************************
*                                                                  *
*        D Y N A M I C   W O R K   A R E A                         *
*                                                                  *
********************************************************************
WORKAREA DSECT
SAVEAREA DS    18F
SAVEIT1  DS    F
SAVEIT2  DS    F
SAVEIT3  DS    F
SAVEIT4  DS    F
SAVEIT5  DS    F
SAVER15  DS    F
R8LENGTH DS    F
INVOL    DS    CL6
GOODVOL  DS    CL3
EDITBYTE DS    CL1
*
CBLOK    DS    0F
CYES     DC    CL3'YES'
CNO      DC    CL3'NO '
C00      DC    CL2'00'
C04      DC    CL2'04'
C08      DC    CL2'08'
C12      DC    CL2'12'
C16      DC    CL2'16'
C20      DC    CL2'20'
C24      DC    CL2'24'
C28      DC    CL2'28'
FILOPEN  DC    CL3'NO '
EIGHTSP  DC    CL8' '
PROCESSW DS    CL3
HEX0438  DC    X'0438'
*
IOAREA   DS    0CL56
         DS    CL2
MEMBER   DS    CL8
DSN      DS    CL44
INDICATR DS    CL2
PDSFILE  DCB   DDNAME=FINDMEDD,DSORG=PO,MACRF=(R)
ROPPL    DC    F'0'          OPEN PARM LIST
RCPPL    DC    F'0'          CLOSE PARM LIST
*
FREEBLOK DS    0F
FREEPARM DC    X'80'         TURN ON HIGH ORDER BIT
         DC    AL3(FREERB)   ADDRESS OF REQUEST BLOCK
FREERB   DC    X'14'         S99RBLN (LENGTH OF REQUEST BLOCK)
         DC    X'02'         S99VERB (REQUEST FOR UNALLOCATION)
         DC    X'2000'       S99FLAG1 (DO NOT MOUNT VOLUMES)
ERCODE   DC    X'0000'       S99ERROR (ERROR REASON CODE)
         DC    X'0000'       S99INFO (INFORMATION REASON CODE)
         DC    A(FREETUPL)   S99TXTPP (ADDR OF POINTER TO TEXT UNIT)
         DC    X'00000000'   RESERVED
         DC    X'00000000'   S99FLAG2
FREETUPL DC    A(FREEUNT1)   ADDRESS OF TEXT UNIT #1
         DC    X'80'         TURN ON HIGH ORDER BIT
         DC    AL3(FREEUNT2) ADDRESS OF TEXT UNIT #2
FREEUNT1 DC    X'0001',X'0001',X'0008',C'FINDMEDD'
FREEUNT2 DC    X'0007'
         DC    X'0000'
*
*        DATA STRUCTURE FOR DYNAMIC ALLOCATION
ALOCBLOK DS    0F
DD1PARM  DC    X'80'         TURN ON HIGH ORDER BIT
         DC    AL3(DD1RB)    ADDRESS OF REQUEST BLOCK
DD1RB    DC    X'14'         S99RBLN (LENGTH OF REQUEST BLOCK)
         DC    X'01'         S99VERB (REQUEST FOR DSNAME ALLOC)
         DC    X'2000'       S99FLAG1 (DO NOT MOUNT VOLUMES)
         DC    X'0000'       S99ERROR (ERROR REASON CODE)
         DC    X'0000'       S99INFO (INFORMATION REASON CODE)
         DC    A(DD1TUPL)    S99TXTPP (ADDR OF POINTERS TO TEXT UNITS
         DC    X'00000000'   RESERVED
         DC    X'00000000'   S99FLAG2
DD1TUPL  DC    A(DD1UNIT1)   ADDRESS OF TEXT UNIT #1
         DC    A(DD1UNIT2)   ADDRESS OF TEXT UNIT #2
DD1HIGH3 DS    XL1
         DC    AL3(DD1UNIT3) ADDRESS OF TEXT UNIT #3
DD1HIGH4 DS    XL1
         DC    AL3(DD1UNIT4) ADDRESS OF TEXT UNIT #4
DD1HIGH5 DS    XL1
         DC    AL3(DD1UNIT5) ADDRESS OF TEXT UNIT #5
DD1UNIT1 DC    X'0001',X'0001',X'0008',C'FINDMEDD'
DD1UNIT2 DC    X'0002'
         DC    X'0001'
DSNLEN   DS    BL2
DSNAME   DS    CL44
DD1UNIT3 DC    X'0004',X'0001',X'0001',X'08'
DD1UNIT4 DC    X'0015',X'0001',X'0008',C'SYSALLDA'
DD1UNIT5 DC    X'0010'
         DC    X'0001'
         DC    X'0006'
DD1VOLSR DS    CL6
WORKLEN  EQU   *-WORKAREA
         END
