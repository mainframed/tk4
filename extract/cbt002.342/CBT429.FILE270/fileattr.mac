*          DATA SET 764FILATTR AT LEVEL 008 AS OF 11/24/82
         SPACE 3
********************************************************************
*        SAVE REGISTERS AND ESTABLISH REGISTER 12 AS BASE REGISTER *
********************************************************************
         SPACE 3
FILEATTR START
         SAVE  (14,12),,*
         LR    12,15
         USING FILEATTR,12
         ST    13,SAVEAREA+4
         LA    13,SAVEAREA
         B     STARTIT
         SPACE
SAVEAREA DC    18F'0'
         SPACE 3
********************************************************************
*        EQUATE RESISTERS 0 THRU 15 TO MORE MEANINGFUL NAMES       *
********************************************************************
         SPACE 3
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
         SPACE 3
********************************************************************
*        INITIALIZATION AND ESTABLISHING DATA AREAS                *
*        CONTAINING OUR PARAMETERS                                 *
********************************************************************
         SPACE 3
STARTIT  DS    0D
         LR    R11,R1         SAVE REG 1 CONTENTS IN REG 11
         L     R9,0(R11)
         MVC   INDSN,0(R9)    PUT PARAMETER #1 INTO INDSN
         TM    32(R11),X'80'  IS DEVICE THE LAST PARAMETER PROVIDED?
         BO    NOINVOL        IF SO, BRANCH TO NOINVOL
         L     R9,36(R11)     PUT PARAMETER #10 INTO INVOL
         MVC   INVOL,0(R9)
         B     MAINLINE       BRANCH TO MAINLINE
NOINVOL  MVC   INVOL,=CL6'ABSENT'
         EJECT
         SPACE 3
********************************************************************
*        MAIN LINE LOGIC                                           *
********************************************************************
         SPACE 3
MAINLINE MVI   VOLSER,C' '
         MVC   VOLSER+1(5),VOLSER     MOVE SPACES TO VOLSER
         MVI   LRECL,C' '
         MVC   LRECL+1(4),LRECL       MOVE SPACES TO LRECL
         MVI   BLKSIZE,C' '
         MVC   BLKSIZE+1(4),BLKSIZE   MOVE SPACES TO BLKSIZE
         MVI   DSORG,C' '
         MVC   DSORG+1(1),DSORG       MOVE SPACES TO DSORG
         MVI   RECFM,C' '             MOVE SPACE TO RECFM
         BAL   R14,BREAKDSN           PERFORM ROUTINE TO BREAKDOWN
*                                       DSNAME FIELD INTO AN 8 BYTE
*                                       MEMBER NAME AND A 44 BYTE DSN
         SPACE 1
         CLC   VALIDSW(3),YESS        IS VALIDSW = 'YES'?
         BNE   SHUTDOWN               IF NOT, BRANCH TO SHUTDOWN
         SPACE 2
         CLC   INVOL,=C'ABSENT'       IS INVOL = 'ABSENT' ?
         BE    LOKAYT                 IF YES, BRANCH TO LOKAYT
         BAL   R14,EDITVOL            EDIT INVOL
         CLC   GOODVOL,=CL3'YES'      WAS INVOL VALID ?
         BE    MOVEVOL                IF SO, BRANCH TO MOVEVOL
         MVC   ERRMSG(30),MESS16      MOVE 'INVALID VOL SER GIVEN'
*                                       TO ERRMSG
         MVC   VALIDSW(3),NOPE        MOVE 'NO ' TO VALIDSW
         B     SHUTDOWN               BRANCH TO SHUTDOWN
MOVEVOL  MVC   OBTVOL,INVOL           MOVE INVOL TO OBTVOL
         B     OBTANE                 BRANCH TO OBTANE
LOKAYT   LOCATE CAMLIST1
         SPACE 2
         C     R15,=F'0'              COMPARE REG 15 TO BE = 0
         BE    RC0                    IF REG 15=0, BRANCH TO RC0
         MVC   ERRMSG(30),MESS1       MOVE 'DATASET NOT CATALOGED'
*                                       TO ERRMSG
         MVC   VALIDSW(3),NOPE        MOVE 'NO ' TO VALIDSW
         B     SHUTDOWN               BRANCH TO SHUTDOWN
RC0      CLC   BRKGDG,YESS            IS IT IN GDG EXPRESSED FORMAT ?
         BNE   CHKVOLCT               IF NOT, BRANCH TO CHKVOLCT
         BAL   R14,DSNSUFFX           PERFORM A ROUTINE TO DETERMINE
*                                        IF THIS DATASET IS A GDG ENTRY
         CLC   ISITAGDG,YESS          IS THE DATASET A GDG ?
         BE    CHKVOLSR               IF SO, BRANCH TO CHKVOLSR
         MVC   ERRMSG(30),MESS18      MOVE 'DATASET IS NOT A GDG'
*                                       TO ERRMSG
         MVC   VALIDSW(3),NOPE        MOVE 'NO ' TO VALIDSW
         B     SHUTDOWN               BRANCH TO SHUTDOWN
CHKVOLSR CLC   LOCAREA+6(6),=XL6'000000000000'
         BNE   CHKVOLCT
         MVC   ERRMSG(30),MESS1       MOVE 'DATASET NOT CATALOGUED'
*                                       TO ERRMSG
         MVC   VALIDSW(3),NOPE        MOVE 'NO ' TO VALIDSW
         B     SHUTDOWN               BRANCH TO SHUTDOWN
CHKVOLCT CLC   LOCAREA(2),HEX0001     VERIFY THAT THE NUMBER OF
*                                        VOLUMES COUNT IS 1
         BE    MATCH                  IF YES, BRANCH TO MATCH
         MVC   VALIDSW(3),NOPE        MOVE 'NO ' TO VALIDSW
         MVC   ERRMSG(30),MESS2       MOVE 'FILE IS ON MORE THAN
*                                       1 VOLUME' TO ERRMSG
         MVC   VOLSER(6),LOCAREA+6    LOAD 1ST VOL SER HOWEVER
         B     SHUTDOWN               BRANCH TO SHUTDOWN
MATCH    MVC   VOLSER(6),LOCAREA+6    LOAD VOLSER FROM CAMLST WORKAREA
         MVC   OBTVOL(6),VOLSER
         CLI   LOCAREA+4,X'80'        COMPARE LOCAREA+4 TO BE EQUAL
*                                       TO HEXADECIMAL 80  (THIS
*                                       INDICATES THAT THE DATASET
*                                       IS ON TAPE)
         BE    ONTAPE                 IF YES; BRANCH TO ONTAPE
         MVI   DEVICE,C'D'            MOVE 'D' (FOR DISK) TO DEVICE
         B     OBTANE                 BRANCH TO OBTANE
ONTAPE   MVI   DEVICE,C'T'            MOVE 'T' (FOR TAPE) TO DEVICE
         MVC   ERRMSG(30),MESS15      MOVE 'DATASET IS ON TAPE'
*                                       TO ERRMSG
         MVC   VALIDSW(3),NOPE        MOVE 'NO ' TO VALIDSW
         B     SHUTDOWN               BRANCH TO SHUTDOWN
         SPACE 2
OBTANE   OBTAIN CAMLIST2
         SPACE 2
         C     R15,=F'0'              COMPARE REG 15 TO BE = 0
         BE    RCODE0                 IF REG 15=0, BRANCH TO RCODE0
         C     R15,=F'4'              COMPARE REG 15 TO BE = 4
         BE    RCODE4                 IF REG 15=4, BRANCH TO RCODE4
         C     R15,=F'8'              COMPARE REG 15 TO BE = 8
         BE    RCODE8                 IF REG 15=8, BRANCH TO RCODE8
         MVC   ERRMSG(30),MESS5       MOVE 'OBTAIN MACRO RETURNED
*                                       RC 12/16' TO ERRMSG
         B     MOVENOPE
RCODE4   MVC   ERRMSG(30),MESS3       MOVE 'REQUIRED VOLUME NOT
*                                       MOUNTED' TO ERRMSG
         B     MOVENOPE
RCODE8   MVC   ERRMSG(30),MESS4       MOVE 'FORMAT-1 DSCB NOT FOUND
*                                       ON VOL' TO ERRMSG
MOVENOPE MVC   VALIDSW(3),NOPE        MOVE 'NO ' TO VALIDSW
         B     SHUTDOWN               BRANCH TO SHUTDOWN
RCODE0   MVC   VALIDSW(3),YESS        MOVE 'YES' TO VALIDSW
         MVI   ERRMSG,C' '
         MVC   ERRMSG+1(29),ERRMSG    MOVE SPACES TO ERRMSG
         MVI   DEVICE,C'D'            MOVE 'D' (FOR DISK) TO DEVICE
         MVC   VOLSER,OBTVOL
         SPACE 1
         BAL   R14,LRECLRT            PERFORM LRECL ROUTINE
         SPACE 1
         BAL   R14,BLKSIZRT           PERFORM BLKSIZE ROUTINE
         SPACE 1
         BAL   R14,DSORGRT            PERFORM DSORG ROUTINE
         SPACE 1
         BAL   R14,RECFMRT            PERFORM RECFM ROUTINE
         SPACE 1
         CLC   MEMCNTL(3),YESS        WAS MEMBER NAME PROVIDED
         BNE   SHUTDOWN               IF NOT, BRANCH TO SHUTDOWN
         SPACE 1
         CLC   DSORG,=CL2'PO'         DSORG = 'PO' ?
         BE    DOSRCH                 IF SO, BRANCH TO DOSRCH
         MVC   ERRMSG(30),MESS17      MOVE 'DATASET NOT PARTITIONED'
*                                        TO ERRMSG
         MVC   VALIDSW(3),NOPE        MOVE 'NO ' TO VALIDSW
         B     SHUTDOWN               BRANCH TO SHUTDOWN
DOSRCH   BAL   R14,SRCHDIR            PERFORM ROUTINE TO CALL 'FINDMEM'
*                                       WHICH SEARCHES THE DIRECTORY
*                                       FOR MEMBER NAME = FNDMEMBR
         B     SHUTDOWN               BRANCH TO SHUTDOWN
         EJECT
*
*
***********************************************************
*                                                         *
*  THIS ROUTINE IS RESPONSIBLE FOR CREATING THE PARAMETER *
*  LRECL THAT IS PASSED BACK TO THE CALLING PROGRAM       *
*                                                         *
***********************************************************
*
*
LRECLRT  ST    R14,SAVEIT2
         MVI   FULLWURD,X'00'              MOVE ALL BINARY ZEROS
         MVC   FULLWURD+1(3),FULLWURD        TO FULLWURD
         MVC   FULLWURD+2(2),OBTAREA+44    MOVE LRECL WHICH IS 2 BYTES
*                                            IN LENGTH BINARY TO LOW
*                                            ORDER 2 BYTES OF FULLWURD
         L     R9,FULLWURD                 LOAD REG 9 WITH FULLWURD
         CVD   R9,DUBLWURD                 CONVERT REG 9 CONTENTS TO
*                                            PACKED DECIMAL AND
*                                            PLACE INTO DUBLWURD
         UNPK  LRECL(5),DUBLWURD+5(3)      CONVERT PACKED DECIMAL IN
*                                            DUBLWURD+5 (FOR A LENGTH
*                                            OF 3 BYTES) AND PLACE
*                                            INTO LRECL (FOR A LENGTH
*                                            OF 5 BYTES)
         OI    LRECL+4,X'F0'               GET RID OF THE SIGN OF
*                                            LRECL (I.E. CHANGE HIGH
*                                            ORDER 4 BITS OF LOW ORDER
*                                            BYTE OF LRECL TO ALL ONES
         L     R14,SAVEIT2
         BR    14
         EJECT
*
*
***********************************************************
*                                                         *
*  THIS ROUTINE IS RESPONSIBLE FOR CREATING THE PARAMETER *
*  BLKSIZE THAT IS PASSED BACK TO THE CALLING PROGRAM     *
*                                                         *
***********************************************************
*
*
BLKSIZRT ST    R14,SAVEIT3
         MVI   FULLWURD,X'00'              MOVE ALL BINARY ZEROS
         MVC   FULLWURD+1(3),FULLWURD        TO FULLWURD
         MVC   FULLWURD+2(2),OBTAREA+42    MOVE BLKSIZE WHICH IS
*                                            2 BYTES BINARY TO LOW
*                                            ORDER 2 BYTES OF FULLWURD
         L     R9,FULLWURD                 LOAD REG 9 WITH FULLWURD
         CVD   R9,DUBLWURD                 CONVERT REG 9 CONTENTS TO
*                                            PACKED DECIMAL AND
*                                            PLACE INTO DUBLWURD
         UNPK  BLKSIZE(5),DUBLWURD+5(3)    CONVERT PACKED DECIMAL IN
*                                            DUBLWURD+5 (FOR A LENGTH
*                                            OF 3 BYTES) AND PLACE
*                                            INTO BLKSIZE (FOR A
*                                            LENGTH OF 5 BYTES)
         OI    BLKSIZE+4,X'F0'             GET RID OF THE SIGN OF
*                                            BLKSIZE (I.E. CHANGE HIGH
*                                            ORDER 4 BITS OF LOW ORDER
*                                            BYTE OF BLKSIZE TO ALL
*                                            ONES)
         L     R14,SAVEIT3
         BR    14
         EJECT
*
*
***********************************************************
*                                                         *
*  THIS ROUTINE IS RESPONSIBLE FOR CREATING THE PARAMETER *
*  DSORG THAT IS PASSED BACK TO THE CALLING PROGRAM       *
*                                                         *
***********************************************************
*
*
DSORGRT  ST    R14,SAVEIT4
         TM    OBTAREA+38,B'10000000'
         BO    MOVEIT1
         TM    OBTAREA+38,B'01000000'
         BO    MOVEIT2
         TM    OBTAREA+38,B'00100000'
         BO    MOVEIT3
         TM    OBTAREA+38,B'00010000'
         BO    MOVEIT4
         TM    OBTAREA+38,B'00001000'
         BO    MOVEIT5
         TM    OBTAREA+38,B'00000100'
         BO    MOVEIT6
         TM    OBTAREA+38,B'00000010'
         BO    MOVEIT7
         B     MOVEIT8
MOVEIT1  MVC   DSORG(2),ORGTABLE        MOVE 'IS' TO DSORG
         B     EXITDSRG
MOVEIT2  MVC   DSORG(2),ORGTABLE+2      MOVE 'PS' TO DSORG
         B     EXITDSRG
MOVEIT3  MVC   DSORG(2),ORGTABLE+4      MOVE 'DA' TO DSORG
         B     EXITDSRG
MOVEIT4  MVC   DSORG(2),ORGTABLE+6      MOVE 'CX' TO DSORG
         B     EXITDSRG
MOVEIT5  MVC   DSORG(2),ORGTABLE+8      MOVE 'CQ' TO DSORG
         B     EXITDSRG
MOVEIT6  MVC   DSORG(2),ORGTABLE+10     MOVE 'MQ' TO DSORG
         B     EXITDSRG
MOVEIT7  MVC   DSORG(2),ORGTABLE+12     MOVE 'PO' TO DSORG
         B     EXITDSRG
MOVEIT8  CLI   OBTAREA+38,X'00'
         BNE   DSORGU
         CLC   OBTAREA+96(5),=XL5'0000000000'
         BNE   DSORGU
         MVC   DSORG(2),ORGTABLE+16     MOVE 'VS' TO DSORG
         B     EXITDSRG
DSORGU   MVC   DSORG(2),ORGTABLE+14     MOVE 'U ' TO DSORG
EXITDSRG L     R14,SAVEIT4
         BR    14
         EJECT
*
*
***********************************************************
*                                                         *
*  THIS ROUTINE IS RESPONSIBLE FOR CREATING THE PARAMETER *
*  RECFM THAT IS PASSED BACK TO THE CALLING PROGRAM       *
*                                                         *
***********************************************************
*
*
RECFMRT  ST    R14,SAVEIT5
         TM    OBTAREA+40,B'11000000'
         BO    RECFMU
         TM    OBTAREA+40,B'01000000'
         BO    RECFMV
         MVI   RECFM,C'F'
         B     EXITRCFM
RECFMU   MVI   RECFM,C'U'
         B     EXITRCFM
RECFMV   MVI   RECFM,C'V'
EXITRCFM L     R14,SAVEIT5
         BR    14
         EJECT
*
******************************************************************
*                                                                *
*        THIS ROUTINE BREAKS DOWN A DSN OF THE FORM              *
*        DSNAME OF THE PDS(MEMBER NAME) INTO TWO SEPARATE        *
*        DATA FIELDS FNDDSN AND FNDMEMBR WHERE FNDDSN IS         *
*        44 BYTES IN LENGTH (PADDED WITH SPACES) AND FNDMEMBR    *
*        IS 8 BYTES IN LENGTH (ALSO PADDED WITH SPACES)          *
*                                                                *
******************************************************************
*
BREAKDSN ST    R14,SAVEIT1            SAVE REG 14 ADDRESS IN SAVEIT1
         MVC   BRKINDSN,INDSN
         CALL  BREAKDSN,(BRKDSNIO),VL
         MVC   FNDDSN,BRKOTDSN
         MVC   FNDMEMBR,BRKMEMBR
         MVC   MEMCNTL,BRKMEMPR
         MVC   VALIDSW,BRKVALID
         MVC   ERRMSG,BRKERROR
         L     R14,SAVEIT1
         BR    R14
         EJECT
*
******************************************************************
*                                                                *
*        THIS ROUTINE IS RESPONSIBLE FOR VALIDATING THAT A       *
*        GIVEN BYTE OF A MEMBER NAME IS VALID.  THAT IS;         *
*        IS IT EQUAL TO A-Z, 0-9 OR ONE OF THE THREE NATIONAL    *
*        CHARACTERS @, $, OR #                                   *
*                                                                *
******************************************************************
*
CHEKBYTE ST    R14,SAVEIT6            SAVE REG 14 ADDRESS IN SAVEIT6
         MVC   OKBYTE,YESS            MOVE 'YES' TO OKBYTE
         L     R9,=A(OKCHARS)         LOAD ADDR OF OKCHARS INTO REG 9
CHEK1    CLI   0(R9),X'FF'            END OF TABLE OKCHARS REACHED?
         BE    NOGOOD                 IF YES, BRANCH TO NOGOOD
         CLC   0(1,R6),0(R9)          MEMBER NAME BYTE = TABLE ENTRY?
         BE    EXITCHEK               IF YES, BRANCH TO EXITCHEK
         A     R9,=F'1'               ADD 1 TO INDEX REGISTER 9
         B     CHEK1                  BRANCH TO CHEK1
NOGOOD   MVC   OKBYTE,NOPE            MOVE 'NO ' TO OKBYTE
EXITCHEK L     R14,SAVEIT6
         BR    R14
         EJECT
*
*
***********************************************************
*                                                         *
*  THIS ROUTINE IS RESPONSIBLE FOR CALLING THE SUBROUTINE *
*  FINDMEM WHICH DYNAMICALLY FREES AND ALLOCATES THE      *
*  FILE WITH DSN = FNDDSN TO DDNAME FINDMEDD AND THEN     *
*  SEARCHES THE DIRECTORY FOR MEMBER NAME = FNDMEMBR      *
*                                                         *
*  THE TWO BYTE FIELD INDICATR RETURNS VALUES WHICH       *
*  RELATE TO THE SUCCESS OR NON SUCCESS OF THAT SEARCH    *
*                                                         *
***********************************************************
*
*
SRCHDIR  ST    R14,SAVEIT7            SAVE REG 14 ADDRESS IN SAVEIT7
         CALL  FINDMEM,(IOAREA,VOLSER),VL
         CLC   INDICATR,C00           INDICATR = '00'?
         BE    EXITFIND               IF YES, BRANCH TO EXITFIND
         MVC   VALIDSW(3),NOPE        MOVE 'NO ' TO VALIDSW
         CLC   INDICATR,C04           INDICATR = '04'?
         BE    INDIC04                IF YES, BRANCH TO INDIC04
         CLC   INDICATR,C08           INDICATR = '08'?
         BE    INDIC08                IF YES, BRANCH TO INDIC08
         CLC   INDICATR,C20           INDICATR = '20'?
         BE    INDIC20                IF YES, BRANCH TO INDIC20
         CLC   INDICATR,C24           INDICATR = '24'?
         BE    INDIC24                IF YES, BRANCH TO INDIC24
         MVC   ERRMSG(30),MESS7       MOVE 'PROBLEM IN BAL PGM
*                                       FILEATTR' TO ERRMSG
         B     EXITFIND               BRANCH TO EXITFIND
INDIC04  MVC   ERRMSG(30),MESS8       MOVE 'MEMBER NAME DOES NOT EXIST
*                                       TO ERRMSG
         B     EXITFIND               BRANCH TO EXITFIND
INDIC08  MVC   ERRMSG(30),MESS9       MOVE 'UNSUCCESSFUL ALLOCATION'
*                                       TO ERRMSG
         B     EXITFIND               BRANCH TO EXITFIND
INDIC20  MVC   ERRMSG(30),MESS10      MOVE 'I/O ERROR READING DIRECTRY
*                                       TO ERRMSG
         B     EXITFIND               BRANCH TO EXITFIND
INDIC24  MVC   ERRMSG(30),MESS11      MOVE 'UNSUCESSFUL FREE OF DDNAME
*                                       TO ERRMSG
EXITFIND L     R14,SAVEIT7
         BR    R14
         EJECT
*
*
***********************************************************
*                                                         *
*        THIS ROUTINE IS RESPONSIBLE FOR EDITING INVOL    *
*                                                         *
*        IF INVOL MEETS THE CRITERIA FOR BEING A VALID    *
*        VOLUMER SERIAL NUMBER (6 BYTES LONG, ALL         *
*        NUMERICS AND ALPHABETICS), THEN THIS ROUTINE     *
*        WILL MOVE 'YES' TO GOODVOL ELSE MOVE 'NO '       *
*        TO GOODVOL                                       *
*                                                         *
***********************************************************
*
*
EDITVOL  ST    R14,SAVEIT8            SAVE REG 14 ADDRESS IN SAVEIT8
         MVC   GOODVOL,=CL3'YES'
         MVC   EDITBYTE(1),INVOL
         BAL   R14,EDIT1BYT
         CLC   GOODVOL,=CL3'YES'
         BNE   EXITEVOL
         MVC   EDITBYTE(1),INVOL+1
         BAL   R14,EDIT1BYT
         CLC   GOODVOL,=CL3'YES'
         BNE   EXITEVOL
         MVC   EDITBYTE(1),INVOL+2
         BAL   R14,EDIT1BYT
         CLC   GOODVOL,=CL3'YES'
         BNE   EXITEVOL
         MVC   EDITBYTE(1),INVOL+3
         BAL   R14,EDIT1BYT
         CLC   GOODVOL,=CL3'YES'
         BNE   EXITEVOL
         MVC   EDITBYTE(1),INVOL+4
         BAL   R14,EDIT1BYT
         CLC   GOODVOL,=CL3'YES'
         BNE   EXITEVOL
         MVC   EDITBYTE(1),INVOL+5
         BAL   R14,EDIT1BYT
         B     EXITEVOL
*
*
*
EDIT1BYT ST    R14,SAVEIT9            SAVE REG 14 ADDRESS IN SAVEIT9
         CLI   EDITBYTE,C'0'
         BL    NEXTEST
         CLI   EDITBYTE,C'9'
         BH    BADINVOL
         B     EXITEDT1
NEXTEST  CLI   EDITBYTE,C'A'
         BL    BADINVOL
         CLI   EDITBYTE,C'Z'
         BH    BADINVOL
         B     EXITEDT1
BADINVOL MVC   GOODVOL,=CL3'NO '
EXITEDT1 L     R14,SAVEIT9
         BR    R14
*
*
*
EXITEVOL L     R14,SAVEIT8
         BR    R14
         EJECT
*
*
***********************************************************
*                                                         *
*        THIS ROUTINE IS RESPONSIBLE FOR DETERMINING      *
*        WHETHER THE DATASET NAME CONTAINED IN FNDDSN     *
*        IS A GDG (DETERMINED BY ITS LAST QUALIFIER       *
*        BEING .GXXXXVXX)                                 *
*                                                         *
*        IF IT IS, THIS ROUTINE WILL MOVE 'YES' TO        *
*        ISITAGDG ELSE IT WILL MOVE 'NO ' TO ISITAGDG     *
*                                                         *
***********************************************************
*
*
DSNSUFFX ST    R14,SAVEIT10           SAVE REG 14 ADDRESS IN SAVEIT10
         LA    R3,FNDDSN              R3==> ADDRESS OF FNDDSN
         A     R3,=F'43'              ADD 43 TO REGISTER 3
         LA    R4,0                   R4==> 0
SUFFIX1  C     R4,=F'43'              HAVE WE INDEXED THRU FNDDSN?
         BH    NOTAGDG                IF SO, BRANCH TO NOTAGDG
         CLI   0(R3),C'.'             HAVE WE FOUND THE LAST PERIOD ?
         BE    SUFFIX2                IF SO, BRANCH TO SUFFIX2
         A     R4,=F'1'               ADD 1 TO REG 4
         S     R3,=F'1'               SUBTRACT 1 FROM REG 3
         B     SUFFIX1                BRANCH TO SUFFIX1
SUFFIX2  A     R3,=F'1'               ADD 1 TO REG 3
         CLI   0(R3),C'G'
         BNE   NOTAGDG
         A     R3,=F'1'
         CLI   0(R3),C'0'
         BL    NOTAGDG
         CLI   0(R3),C'9'
         BH    NOTAGDG
         A     R3,=F'1'
         CLI   0(R3),C'0'
         BL    NOTAGDG
         CLI   0(R3),C'9'
         BH    NOTAGDG
         A     R3,=F'1'
         CLI   0(R3),C'0'
         BL    NOTAGDG
         CLI   0(R3),C'9'
         BH    NOTAGDG
         A     R3,=F'1'
         CLI   0(R3),C'0'
         BL    NOTAGDG
         CLI   0(R3),C'9'
         BH    NOTAGDG
         A     R3,=F'1'
         CLI   0(R3),C'V'
         BNE   NOTAGDG
         A     R3,=F'1'
         CLI   0(R3),C'0'
         BL    NOTAGDG
         CLI   0(R3),C'9'
         BH    NOTAGDG
         A     R3,=F'1'
         CLI   0(R3),C'0'
         BL    NOTAGDG
         CLI   0(R3),C'9'
         BH    NOTAGDG
         MVC   ISITAGDG,=CL3'YES'     MOVE 'YES' TO ISITAGDG
         B     EXITSUFF               BRANCH TO EXITSUFF
NOTAGDG  MVC   ISITAGDG,=CL3'NO '     MOVE 'NO ' TO ISITAGDG
EXITSUFF L     R14,SAVEIT10
         BR    R14
         EJECT
         SPACE 3
********************************************************************
*        LOAD PARAMETERS 2 - 8 AND BRANCH BACK TO CALLING PROGRAM  *
********************************************************************
         SPACE 3
SHUTDOWN LA    R15,0                  SET RC = 0
         L     R9,4(R11)
         MVC   0(3,R9),VALIDSW        MOVE VALIDSW TO PARAMETER #2
         L     R9,8(R11)
         MVC   0(30,R9),ERRMSG        MOVE ERRMSG  TO PARAMETER #3
         L     R9,12(R11)
         MVC   0(6,R9),VOLSER         MOVE VOLSER  TO PARAMETER #4
         L     R9,16(R11)
         MVC   0(5,R9),LRECL          MOVE LRECL   TO PARAMETER #5
         L     R9,20(R11)
         MVC   0(5,R9),BLKSIZE        MOVE BLKSIZE TO PARAMETER #6
         L     R9,24(R11)
         MVC   0(2,R9),DSORG          MOVE DSORG   TO PARAMETER #7
         L     R9,28(R11)
         MVC   0(1,R9),RECFM          MOVE RECFM   TO PARAMETER #8
         L     R9,32(R11)
         MVC   0(1,R9),DEVICE         MOVE DEVICE  TO PARAMETER #9
         L     R13,4(R13)
         RETURN (14,12),RC=(15)
         EJECT
         SPACE 3
********************************************************************
*        DATA AREAS                                                *
********************************************************************
         SPACE 3
         DS    0F
INDSN    DS    CL44
CAMLIST1 CAMLST NAME,FNDDSN,,LOCAREA
LOCAREA  DS    0D
         DS    265C
         DS    0D
CAMLIST2 CAMLST SEARCH,FNDDSN,OBTVOL,OBTAREA
OBTAREA  DS    0D
         DS    140C
         DS    0D
OBTVOL   DS    CL6
VALIDSW  DS    CL3
ISITAGDG DS    CL3
ERRMSG   DS    CL30
VOLSER   DS    CL6
LRECL    DS    CL5
BLKSIZE  DS    CL5
DSORG    DS    CL2
RECFM    DS    CL1
DEVICE   DS    CL1
INVOL    DS    CL6
HEX0001  DC    X'0001'
YESS     DC    C'YES'
NOPE     DC    C'NO '
*
*   B R E A K D S N   P A R A M E T E R S
*
BRKDSNIO DS    0CL135
BRKINDSN DS    CL44
BRKOTDSN DS    CL44
BRKMEMBR DS    CL8
BRKMEMPR DS    CL3
BRKGDG   DS    CL3
BRKVALID DS    CL3
BRKERROR DS    CL30
*
*
*
MESS1    DC    C'DATASET NOT CATALOGED         '
MESS2    DC    C'FILE IS ON MORE THAN 1 VOLUME '
MESS3    DC    C'REQUIRED VOLUME NOT MOUNTED   '
MESS4    DC    C'FORMAT-1 DSCB NOT FOUND ON VOL'
MESS5    DC    C'OBTAIN MACRO RETURNED RC 12/16'
MESS6    DC    C'INVALID SYNTAX FOR DSNAME     '
MESS7    DC    C'PROBLEM IN BAL PGM FILEATTR   '
MESS8    DC    C'MEMBER NAME NOT FOUND         '
MESS9    DC    C'UNSUCCESFUL DYNAMIC ALLOCATION'
MESS10   DC    C'I/O ERROR READING DIRECTORY   '
MESS11   DC    C'UNSUCCESSFUL FREE OF DDNAME   '
MESS13   DC    C'MEMBER NAME TOO LONG          '
MESS14   DC    C'INVALID MEMBER NAME           '
MESS15   DC    C'DATASET IS ON TAPE            '
MESS16   DC    C'INVALID VOL SER GIVEN         '
MESS17   DC    C'DATASET NOT PARTITIONED       '
MESS18   DC    C'DATASET IS NOT A GDG          '
ORGTABLE DC    C'ISPSDACXCQMQPOU VS'
         DS    0D
DUBLWURD DS    D
FULLWURD DS    F
SAVEIT1  DS    F
SAVEIT2  DS    F
SAVEIT3  DS    F
SAVEIT4  DS    F
SAVEIT5  DS    F
SAVEIT6  DS    F
SAVEIT7  DS    F
SAVEIT8  DS    F
SAVEIT9  DS    F
SAVEIT10 DS    F
GOODVOL  DS    CL3
OKBYTE   DS    CL3
MEMCNTL  DS    CL3
EDITBYTE DS    CL1
IOAREA   DS    0CL56
         DS    CL2
FNDMEMBR DS    CL8
FNDDSN   DS    CL44
INDICATR DS    CL2
CONSTPO  DC    CL2'PO'
C00      DC    CL2'00'
C04      DC    CL2'04'
C08      DC    CL2'08'
C20      DC    CL2'20'
C24      DC    CL2'24'
OKCHARS  DC    C'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
         DC    C'0123456789'
         DC    C'#@$'
         DC    X'FF'
         END
