
PROC NAME: CHKBLOCK

FUNCTION:  LIST EVERY MEMBER OF A JCL OR PROCEDURE LIBRARY, AND
           REPORT EVERY OUTPUT DD STATEMENT NOT OPTIMALLY BLOCKED.

AUTHOR:    Howard H. Glastetter    (206) 902-3102

AGENCY:    Washington State Data Processing Service Center #1

Correct Direct Access Storage Device (DASD) blocking is one of the most
effective ways to reduce EDP costs and increase thoughput performance.
This procedure will make it easy to correctly block output on both old
and new batch job streams.

One reason for optimal blocking is emphasized in an IBM Technical
Bulletin titled AN MVS TUNING PERSPECTIVE.  It states: "An evaluation of
an installations sequential data set blocksize is unquestionably the
first thing to do when trying to reduce CPU utilization.  No other
activity has anywhere near the potential for saving CPU cycles."

A second reason for optimal blocking is that ten to ninty percent of
DASD space used by a data set can be wasted by poor blocksize.  See
March 1986 WDPSC Newsletter.  DASD space is still a system cost
consideration and should be used effectively.

To use this procedure to examine your JCL or PROC library, simply use
the following JCL:


//         JOB CARD
//CHKITOUT EXEC CHKBLOCK,LIBRARY='YOUR.LIBRARY.NAME'


All the JCL you requested will be listed.  Every output DD record that
isn't optimally blocked will have a warning message listed before it and
suggested new blocksize listed after it.  This process only suggests
blocking for 3380 and TAPE devices since that is where all customer
data now resides.  Non JCL in your library and comments imbedded within
DD statements will not be printed.

Once you have the list, you may simply take it and go thru your JCL or
PROC library with SPF Option 2 and change the DD statements that aren't
optimally blocked.


Output Examples (for simplicity, all have 80 character records):


Example 1 shows a blocksize that was effective on 3350 devices, but
is wasting 20% of 3380 space.  The new suggestion will put 100 more
records on every track, saving DASD space and execution time.

THE BLOCKSIZE BELOW ONLY ALLOWS 4 BLOCKS PER TRACK AND IS WASTING SPACE

//OUTSMALL  DD DSN=AGY999.SMALL.DSN,DISP=(NEW,PASS,DELETE),
//             UNIT=SYSDA,SPACE=(CYL,(30,10),RLSE),
//             DCB=(LRECL=80,BLKSIZE=9440,RECFM=FB)

*-> BLOCKSIZE TOO LOW, TRY 11440 THIS IS 1/4 TRK BLOCKING, SAVE DISK


Example 2 shows a blocksize that was likely picked because 10 is an easy
number to multiply something by.  There are about 250 bytes of overhead
for every block on a 3380 track.  Blocksize should normally be a minimum
of 1/5 track.  This corresponds to the normal buffer default of 5 and
causes a full track to be processed with each physical I/O, optimising
performance.  The new suggestion will put 565 records on every track
rather than 360, a 63% space utilization improvement.  With more than
10 times the records per block this file will be written with 1/10 the
EXCPs, reducing CPU occupancy time and JOB costs.

BLOCKSIZE BELOW IS UNDER 1/5 TRACK. IT'S WASTING DASD AND CPU CYCLES.

//OUTTINY   DD DSN=AGY999.TINY.DSN,DISP=(NEW,PASS,DELETE),
//             UNIT=SYSDA,SPACE=(CYL,(30,10),RLSE),
//             DCB=(LRECL=80,BLKSIZE=800,RECFM=FB)

*-> BLOCKSIZE TOO LOW, TRY 09040 THIS IS 1/5 TRK BLOCKING, SAVE DISK


Example 3 shows a blocksize that was incorrectly selected.  It just
exceeds 1/2 track and is wasting 50% of 3380 space.  The new suggestion
will put 586 records on every track rather than 294, which is a 99%
improvement.  Likely, you would want to cut your disk allocation request
while changing your JCL.

BLOCKSIZE BELOW IS TOO HIGH AND ONLY ALLOWS ONE BLOCK PER TRACK.

//OUTBIG    DD DSN=AGY999.BIG.DSN,DISP=(NEW,PASS,DELETE),
//             UNIT=SYSDA,SPACE=(CYL,(40,20),RLSE),
//             DCB=(LRECL=80,BLKSIZE=23520,RECFM=FB)

*-> BLOCKSIZE TOO HIGH, TRY 23440 THIS IS 1/2 TRK BLOCKING, SAVE DISK


Example 4 shows a blocksize that is effective for DASD, but is small for
tape output.  Tape should be blocked as high as possible unless there is
a reason (such as COM tapes) not to.

THE TAPE BELOW WOULD PROCESS MORE EFFICIENTLY WITH MAXIMUM BLOCKING

//OUTTAPE   DD DSN=TAPE.BLOCKED.LOW,DISP=(NEW,PASS,DELETE),
//             UNIT=TAPE16,
//             DCB=(LRECL=80,BLKSIZE=11440,RECFM=FB)

*-> BLOCKSIZE TOO LOW, TRY 32720 THIS IS MAXIMUM BLOCKING, SAVE TIME


