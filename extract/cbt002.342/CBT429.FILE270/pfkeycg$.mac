1                                                        PFKEYCHG.1
                                                         01/09/84


  PROGRAM:       PFKEYCHG
  AUTHOR:        Gary Duffield
  AGENCY:        DIS
  LANGUAGE:      COBOL
  LOCATION:      Located in a "system library".  That is, it can be
                 executed without supplying STEPLIB.
  FUNCTION:      Used  with Dialog  Manager to  allow  the user  to
                 determine which Program Function (PF) Key has been
                 pressed or  to determine  which function  (such as
                 END, RETURN, UP, DOWN, LEFT,  RIGHT, etc) has been
                 requested.

  RUN MODE:      Used under Dialog Manager only.

  This program has two basic uses:

       .    To determine which PF Key has been pressed
                                or
       .    To determine which function has been requested, such as
            PRINT, SPLIT,  END, RETURN,  scrolling UP,  DOWN, LEFT,
            RIGHT, etc.

  This program works in conjunction  with PFKEYRST.  Place PFKEYCHG
  at the  beginning of the  Dialog Manager application.   This will
  permit the determination of the PF Key usage in the Dialog.  When
  the Dialog  no longer needs  to make this  determination, execute
  PFKEYRST.   Reference  documentation  of   PFKEYRST  for  further
  discussion of its purpose.




1                                                        PFKEYCHG.2
                                                         01/09/84


  HOW TO USE THIS PROGRAM
  _______________________

  Place  the following  Dialog Manager  service in  your CLIST  (or
  equivalent CALL to ISPLINK if your  function is written in a high
  level language  program such  as COBOL) just  prior to  the point
  where you wish to determine the PF Key usage:

       ISPEXEC SELECT PGM(PFKEYCHG) PARM(parm)

            where the PARM may be coded in any one of the following
            three ways:

                 FORMAT I.   PARM(KEYNO)

                                or

                 FORMAT II.  PARM( )
                      or no PARM

                                or

                 FORMAT III. PARM(list of functions)




1                                                        PFKEYCHG.3
                                                         01/09/84


  FORMAT I.   PARM(KEYNO)

       Use this format to determine which PF Key was pressed.

       This program will  change all 24 (or 12)  PF Key definitions
       to >K01 thru >K24 (or >K12).   This program also "saves" the
       original PF Key definitions so  that when the application is
       terminated,  program PFKEYRST  can  "restore"  them back  to
       their original values.

       The greater than sign (>) causes  the value Kxx to be passed
       directly to the dialog in  the variable ZCMD.  Therefore, by
       examining xx, it  is possible to determine which  PF Key was
       pressed.

  FORMAT II.  PARM( ) or no PARM

       Use  this  format  to  determine  which  function  has  been
       requested.

       This program will insert the greater  than sign (>) in front
       of all  24 (or  12) PF Key  definitions.  This  program also
       "saves" the  original PF  Key definitions  so that  when the
       application is  terminated, program  PFKEYRST can  "restore"
       them back to their original values.

       The greater than  sign (>) causes the  function itself (E.G.
       END, RETURN, SPLIT, UP, DOWN, LEFT, RIGHT, etc) to be passed
       directly to the dialog in the variable ZCMD.




1                                                        PFKEYCHG.4
                                                         01/09/84


  FORMAT III  PARM(list of functions)

       Use this format  to determine whether a  particular function
       (or functions) has been requested.

       This program will insert the greater  than sign (>) in front
       of only those  functions which are provided in  the PARM and
       leave all  other PF  Key definitions  intact.  This  program
       also "saves"  the original PF  Key definitions so  that when
       the  application   is  terminated,   program  PFKEYRST   can
       "restore" them back to their original values.

       The greater than  sign (>) causes the  function itself (E.G.
       END, RETURN, SPLIT, UP, DOWN, LEFT, RIGHT, etc) to be passed
       directly to the dialog in the variable ZCMD.




1                                                        PFKEYCHG.5
                                                         01/09/84


  POSSIBLE RETURN CODES FROM PFKEYCHG:

  Return Code                           Meaning
  -----------         --------------------------------------------

       0              Successful completion

       4              PFKEY  backup   not  made  (one   already  in
                      existance) (e.g., two  consecutive executions
                      of PFKEYCHG without  an intervening execution
                      of PFKEYRST)

       8              Invalid PARM specified.
                      One of the following reasons:

                      o    More than 15 values specified
                           in the list

                      o    Value in list greater than 8
                           characters

                      o    Missing value in list
                           (e.g. PARM=(UP,,DOWN)

                      o    Invalid value in list

                      o    KEYNO can not be one of the
                           listed items




1                                                        PFKEYCHG.6
                                                         01/09/84

  EXAMPLE:  Use PFKEYCHG and PFKEYRST so that the Dialog could
            detect and process the UP and DOWN scroll keys:

            ISPEXEC SELECT PGM(PFKEYCHG) PARM(UP,DOWN)
            SET &RC = &LASTCC
            IF &RC NE 0 THEN DO
              WRITE ***********************************
              WRITE *  ERROR IN PFKEYCHG              *
              WRITE *                                 *
              WRITE *        RETURN CODE IS &RC       *
              WRITE ***********************************
              EXIT
              ENDO

            ISPEXEC DISPLAY PANEL(your panel name)

  IF &ZCMD = UP THEN
       do whatever processing that was intended  to be done once it
       is known  that the scroll UP Key was pressed

  IF &ZCMD = DOWN THEN
       do whatever processing that was intended  to be done once it
       is known  that the scroll DOWN Key was pressed
            .
            .
            .

  ENDIT: ISPEXEC SELECT PGM(PFKEYRST)
         EXIT




