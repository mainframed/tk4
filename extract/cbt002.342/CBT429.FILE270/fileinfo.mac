*
*FFFFFFFF IIIIIIII LL       EEEEEEEE IIIIIIII NN    NN FFFFFFFF OOOOOO
*FF          II    LL       EE          II    NNN   NN FF      OO    OO
*FFFFFF      II    LL       EE          II    NNNN  NN FFFFFF  OO    OO
*FFFFFF      II    LL       EEEEEEEE    II    NN NN NN FFFFFF  OO    OO
*FF          II    LL       EE          II    NN  NNNN FF      OO    OO
*FF          II    LL       EE          II    NN   NNN FF      OO    OO
*FF          II    LL       EE          II    NN    NN FF      OO    OO
*FF       IIIIIIII LLLLLLLL EEEEEEEE IIIIIIII NN     N FF       OOOOOO
*
*
*  -----------------------------------------------------------------
*  COMMAND     OPERANDS
*  -----------------------------------------------------------------
*  FILEINFO    DSN('DATASET NAME') VOL('VOL SER') MEM('MEMBER NAME')
*  -----------------------------------------------------------------
*
*
*  OPERANDS -
*
*       REQUIRED -
*
*           DSN('DATASET NAME')  -- 'DATASET NAME' IS THE DATASET
*                                   NAME OF THE DATASET THAT YOU
*                                   WISH TO RECIEVE FILE INFORMATION
*                                   ABOUT.  IF THE DATASET IS NOT
*                                   QUOTED, THEN THE PROFILE PREFIX
*                                   WILL BE APPENDED.  YOU MAY PROVIDE
*                                   A MEMBER NAME OF A PDS IF YOU WISH.
*                                   THIS COMMAND WILL RETURN IN CLIST
*                                   VARIABLE MEMFND 'YES' IF THE
*                                   MEMBER IS FOUND IN THE DIRECTORY
*                                   AND 'NO ' IF IT IS NOT FOUND IN
*                                   THE DIRECTORY.
*
*       OPTIONAL -
*
*           VOL('VOL SER') -------- 'VOL SER' IS TO BE USED IF YOUR
*                                   FILE IS NOT CATALOGUED.
*
*
*           MEM('MEMBER NAME') ---- 'MEMBER NAME' IS THE MEMBER NAME
*                                   OF THE PDS NAMED BY 'DATASET NAME'.
*                                   THIS COMMAND WILL RETURN IN CLIST
*                                   VARIABLE MEMFND 'YES' IF THE
*                                   MEMBER IS FOUND IN THE DIRECTORY
*                                   AND 'NO ' IF IT IS NOT FOUND IN
*                                   THE DIRECTORY.
         EJECT
*        AFTER EXECUTION OF THIS COMMAND, THE FOLLOWING CLIST VARIABLES
*        ARE SET.   THERE NAMES AND CONTENTS ARE AS FOLLOWS:
*
*             CLIST
*            VARIABLE    CONTENTS
*            --------    --------------------------------------------
*
*            &FULLDSN    YOUR DATASET NAME AS FOLLOWS:
*                           A.  PROFILE PREFIX ADDED IF DATASET NAME
*                                 IN DSN KEYWORD WAS NOT QUOTED
*                           B.  QUOTES NOW STRIPPED OFF
*                           C.  MEMBER NAME INCLUDED IF AND ONLY IF
*                                 MEMBER NAME WAS PROVIDED IN THE
*                                 DSN KEYWORD TO THE COMMAND.  THUS;
*                                 IF A MEMBER NAME WAS PROVIDED IN
*                                 THE MEM KEYWORD, THEN &FULLDSN WILL
*                                 NOT INCLUDE THIS MEMBER NAME
*
*            &LRECL      LOGICAL RECORD LENGTH OF DATASET
*
*            &BLKSIZE    BLOCK SIZE OF DATASET
*
*            &RECFM      WILL CONTAIN ONE OF THE FOLLOWING 3 VALUES:
*
*                            'F'  FOR FIXED LENGTH RECORDS
*                            'V'  FOR VARIABLE LENGTH RECORDS
*                            'U'  FOR UNDEFINED RECORDS
*
*            &CNTLCHAR   WILL CONTAIN ONE OF THE FOLLOWING 3 VALUES:
*
*                            'A'  FOR ANSI CONTROL CHARACTERS
*                            'M'  FOR MACHINE CONTROL CHARACTERS
*                            'N'  FOR NO CONTROL CHARACTERS
*
*            &DEVTYPE    WILL CONTAIN ONE OF THE FOLLOWING 2 VALUES:
*
*                            'T'  DATASET IS ON TAPE
*                            'D'  DATASET IS ON DISK
*
*            &VOLSER     VOLUME SERIAL NUMBER WHERE DATASET RESIDES
*
*            &DSORG      WILL CONTAIN ONE OF THE FOLLOWING 9 VALUES:
*
*                            'IS' FOR  INDEXED SEQUENTIAL ORGANIZATION
*                            'PS' FOR  PHYSICAL SEQUENTIAL ORGANIZATION
*                            'DA' FOR  DIRECT ORGANIZATION
*                            'CX' FOR  BTAM OR QTAM LINE GROUP
*                            'CQ' FOR  QTAM DIRECT ACCESS MESSAGE QUEUE
*                            'MQ' FOR  QTAM PROBLEM PGM MESSAGE QUEUE
*                            'PO' FOR  PARTITIONED
*                            'U ' FOR  UNMOVABLE - THE DATA CONTAINS
*                                      LOCATION DEPENDENT INFORMATION
*                            'VS' FOR  VSAM DATASET
         EJECT
*
*             CLIST
*            VARIABLE    CONTENTS
*            --------    --------------------------------------------
*
*
*            &ISITCAT    WILL CONTAIN ONE OF THE FOLLOWING 3 VALUES:
*
*                            'YES' IF DATASET IS CATALOGUED
*                            'NO ' IF DATASET IS NOT CATALOGUED
*                            '   ' IF N/A (HIGHER LEVEL ERROR WAS
*                                      DETECTED PRIOR TO LOCATE)
*
*            &MEMFND     WILL CONTAIN ONE OF THE FOLLOWING 3 VALUES:
*
*                            'YES' IF MEMBER OF PDS WAS FOUND
*                            'NO ' IF MEMBER OF PDS WAS NOT FOUND
*                            '   ' IF N/A (USER DIDNT REQUEST THIS
*                                      COMMAND TO LOCATE A MEMBER)
*
*            &MEMCNTL    WILL CONTAIN ONE OF THE FOLLOWING 2 VALUES:
*
*                            'YES' IF MEMBER NAME WAS INCLUDED WITH
*                                     THE DSN IN THE DSN KEYWORD
*                            'NO ' IF MEMBER NAME WAS NOT INCLUDED
*                                     WITH THE DSN IN THE DSN KEYWORD
*
*            &TRKSUSED   NUMBER OF USED TRACKS
*
*            &EXTENTNO   NUMBER OF USED EXTENTS
*
         EJECT
*
*
*        THIS COMMAND WILL ALSO MAKE AVAILABLE TWO OTHER VARIABLES
*        THAT THE INVOKING CLIST MAY INTERROGATE.  BELOW IS A TABLE
*        OF VALUES AFTER EXECUTION OF THIS COMMAND FOR THESE TWO
*        VARIABLES &OUTMSG AND &LASTCC (RETURN CODE)
*
*        ×---------×-----------------------------------------------×
*        × &LASTCC ×                 &OUTMSG                       ×
*        ×---------×-----------------------------------------------×
*        ×    0    × SUCCESSFUL COMPLETION                         ×
*        ×---------×-----------------------------------------------×
*        ×    4    × DATASET NOT CATALOGUED                        ×
*        ×---------×-----------------------------------------------×
*        ×    8    × FILE IS ON MORE THAN 1 VOLUME                 ×
*        ×---------×-----------------------------------------------×
*        ×    12   × REQUIRED VOLUME NOT MOUNTED                   ×
*        ×---------×-----------------------------------------------×
*        ×    16   × FORMAT-1 DSCB NOT FOUND ON VOL                ×
*        ×---------×-----------------------------------------------×
*        ×    20   × OBTAIN MACRO RETURNED RC 12/16                ×
*        ×---------×-----------------------------------------------×
*        ×    24   × MEMBER NAME NOT FOUND                         ×
*        ×---------×-----------------------------------------------×
*        ×    28   × UNSUCCESSFUL DYNAMIC ALLOCATION               ×
*        ×---------×-----------------------------------------------×
*        ×    32   × I/O ERROR READING DIRECTORY                   ×
*        ×---------×-----------------------------------------------×
*        ×    36   × UNSUCCESSFUL FREE OF DDNAME                   ×
*        ×---------×-----------------------------------------------×
*        ×    40   × FILE IS ON A TAPE VOLUME                      ×
*        ×---------×-----------------------------------------------×
*        ×    44   × DATASET NOT PARTITIONED                       ×
*        ×---------×-----------------------------------------------×
*        ×    48   × INVALID SYNTAX OF MEMBER NAME                 ×
*        ×---------×-----------------------------------------------×
*        ×    52   × ERROR IN PROGRAM FILSPACE                     ×
*        ×---------×-----------------------------------------------×
*        ×    96   × INVALID SYNTAX OF OPERAND(S)                  ×
*        ×---------×-----------------------------------------------×
*
*
*×-----------------------------------------------------------------×
*× CHANGE ACTIVITY:                                                ×
*×                                                                 ×
*×       VERSION 2.0  -  GORDON SCHILLINGER  DIS/CSD   09/02/88    ×
*×                       MODIFIED CODE TO BE REENTERABLE           ×
*×                                                                 ×
*×_________________________________________________________________×
         EJECT
FILEINFO ENTERR LEVEL=V_2.0
         LA    R6,BASEREG2   R6 IS TO BE THE SECOND BASE REGISTER
         USING BASEREG2,R6
         EJECT
********************************************************************
*                                                                  *
*      M A I N   L I N E   L O G I C   F O R   F I L E I N F O     *
*                                                                  *
********************************************************************
*
         LR    R11,R1              SAVE THE PARM POINTER
         BAL   R14,DOPARSE         PERFORM THE PARSE SERVICE ROUTINE
         CLC   PROCESSW,=C'YES'    WAS PARSE SUCCESFUL ?
         BNE   INITL               IF NOT, BRANCH TO INITL
         BAL   R14,LOADFLDS        PERFORM ROUTINE TO LOAD THE PARSED
*                                    FIELDS INTO QUALDSN, INVOL,
*                                    AND QUALMEM
         CLC   PROCESSW,=C'YES'    IS EVERTHING STILL HONKEY DOREY ?
         BNE   INITL               IF NOT, BRANCH TO INITL
         BAL   R14,PRCSFLDS        PERFORM ROUTINE TO PROCESS QUALDSN,
*                                    INVOL, AND QUALMEM
*                                      (I.E.
*                                           DO LOCATE AND OBTAIN
*                                             ON QUALDSN)
INITL    BAL   R14,INITLIST        BUILD PARMLIST FOR IKJUPDT
         BAL   R14,SETFLDSN        SET CLIST VARIABLE FULLDSN
         BAL   R14,SETLRECL        SET CLIST VARIABLE LRECL
         BAL   R14,SETBLKSZ        SET CLIST VARIABLE BLKSIZE
         BAL   R14,SETRECFM        SET CLIST VARIABLE RECFM
         BAL   R14,SETCCHAR        SET CLIST VARIABLE CNTLCHAR
         BAL   R14,SETDEVTP        SET CLIST VARIABLE DEVTYPE
         BAL   R14,SETVOLSR        SET CLIST VARIABLE VOLSER
         BAL   R14,SETDSORG        SET CLIST VARIABLE DSORG
         BAL   R14,SETISCAT        SET CLIST VARIABLE ISITCAT
         BAL   R14,SETMEMFD        SET CLIST VARIABLE MEMFND
         BAL   R14,SETMEMCT        SET CLIST VARIABLE MEMCNTL
         BAL   R14,SETRKUSD        SET CLIST VARIABLE TRKSUSED
         BAL   R14,SETEXTNO        SET CLIST VARIABLE EXTENTNO
         BAL   R14,SETOUTMG        SET CLIST VARIABLE OUTMSG
         B     SHUTDOWN            BRANCH TO SHUTDOWN
         EJECT
********************************************************************
*                                                                  *
*        P A R S E   I N P U T   C O M M A N D   B U F F E R       *
*                                                                  *
********************************************************************
*
DOPARSE  ST    R14,SAVEIT9
         KKPARSE
         LTR   R15,R15              RC = 0 ? (I.E PARSE GO OK ?)
         BNZ   PARSERR              IF NOT, BRANCH TO PARSERR
         MVC   PROCESSW,=C'YES'     MOVE 'YES' TO PROCESSW
         L     R10,ANS
         USING IKJPARMD,R10
         B     EXITPARS
PARSERR  MVC   PROCESSW,=C'NO '     MOVE 'NO ' TO PROCESSW
         LA    R4,96                SET REG 4 = 96
         MVC   OUTMSG,MESS96        MOVE 'INVALID SYNTAX OF OPERANDS'
*                                       TO OUTMSG
EXITPARS L     R14,SAVEIT9
         BR    14
         EJECT
********************************************************************
*                                                                  *
*        THIS ROUTINE PROCESSES THE PARSED FIELDS AND THEN         *
*        LOADS DATA FIELDS QUALDSN, INVOL, AND QUALMEM SO          *
*        THAT THE ROUTINE PRCSFLDS (PROCESS FIELDS) CAN            *
*        WORK ON EM                                                *
*                                                                  *
*        THIS ROUTINE ALSO LOADS DATA FIELD MEMCNTL                *
*                                                                  *
********************************************************************
*
LOADFLDS ST    R14,SAVEIT10
         TM    DSTRING+6,X'80'         IS DSNAME PRESENT ?
         BO    CLERQDSN                IF SO, BRANCH TO CLERQDSN
         LA    R4,96                   SET R4 = 96
         MVC   OUTMSG,MESS96           MOVE 'INVALID SYNTAX OF OPERANDS
*                                         TO OUTMSG
         MVC   PROCESSW,=C'NO '        MOVE 'NO ' TO PROCESSW
         B     EXITLOAD                BRANCH TO EXITLOAD
CLERQDSN MVI   QUALDSN,C' '            A BLANK
         MVC   QUALDSN+1(43),QUALDSN   SPREAD IT AROUND
         MVI   FULLDSN,C' '            A BLANK
         MVC   FULLDSN+1(53),FULLDSN   SPREAD IT AROUND
         LA    R1,QUALDSN              R1 ==> ADDRESS OF QUALDSN
         L     R8,DSTRING              R8 ==> ADDRESS OF THE DSN
         LH    R7,DSTRING+4            R7 ==> LENGTH OF THE DSN
         S     R7,=F'1'                SUBTRACT 1 FOR EX
         SPACE 1
MOVEDSN  MVC   0(0,R1),0(R8)           MOVE THE DSN TO QUALDSN
         EX    R7,MOVEDSN
         SPACE 1
         LA    R1,FULLDSN
         EX    R7,MOVEDSN
         TM    DSTRING+14,X'80'        IS MEMBER NAME PRESENT ?
         BNO   MOVE89S                 IF NOT, BRANCH TO MOVE89S
         MVC   MEMCNTL,=C'YES'         MOVE 'YES' TO MEMCNTL
         MVC   CPMEM1,=CL8' '          MOVE 8 SPACES TO CPMEM1
         LA    R1,CPMEM1               R1 ==> ADDRESS OF CPMEM1
         L     R8,DSTRING+8            R8 ==> ADDRESS OF THE MEMBER
         LH    R7,DSTRING+12           R7 ==> LENGTH OF THE MEMBER
         S     R7,=F'1'                SUBTRACT 1 FOR EX
         SPACE 1
         EX    R7,MOVEMM1
         B     DOMKYWD                 BRANCH TO DOMKYWD
MOVEMM1  MVC   0(0,R1),0(R8)           MOVE THE MEMBER TO CPMEM1
         SPACE 1
MOVE89S  MVC   CPMEM1,=C'99999999'     MOVE '99999999' TO CPMEM1
         MVC   MEMCNTL,=C'NO '         MOVE 'NO ' TO MEMCNTL
DOMKYWD  MVC   CPMEM2,=CL8' '          MOVE 8 SPACES TO CPMEM2
         LA    R1,CPMEM2               R1 ==> ADDRESS OF CPMEM2
         L     R8,MSTRING              R8 ==> ADDRESS OF THE MEMBER
         LH    R7,MSTRING+4            R7 ==> LENGTH OF THE MEMBER
         S     R7,=F'1'                SUBTRACT 1 FOR EX
         SPACE 1
MOVEMM2  MVC   0(0,R1),0(R8)           MOVE THE MEMBER TO CPMEM2
         EX    R7,MOVEMM2
         SPACE 1
         CLC   CPMEM1,=C'99999999'     IS CPMEM1 = ALL NINES ?
         BE    M1IS999                 IF YES, BRANCH TO M1IS999
         CLC   CPMEM2,=C'99999999'     IS CPMEM2 = ALL NINES ?
         BE    M2IS999                 IF YES, BRANCH TO M2IS999
         CLC   CPMEM1,CPMEM2           IS CPMEM1 = CPMEM2 ?
         BNE   NOMATCH                 IF NOT, BRANCH TO NOMATCH
         MVC   QUALMEM,CPMEM1          MOVE CPMEM1 TO QUALMEM
         B     CHEKMEM                 BRANCH TO CHEKMEM
M1IS999  MVC   QUALMEM,CPMEM2          MOVE CPMEM2 TO QUALMEM
         B     CHEKMEM                 BRANCH TO CHEKMEM
M2IS999  MVC   QUALMEM,CPMEM1          MOVE CPMEM2 TO QUALMEM
         B     CHEKMEM                 BRANCH TO CHEKMEM
NOMATCH  LA    R4,96                   SET R4 = 96
         MVC   OUTMSG,MESS96           MOVE 'INVALID SYNTAX OF OPERANDS
*                                         TO OUTMSG
         MVC   PROCESSW,=C'NO '        MOVE 'NO ' TO PROCESSW
         B     EXITLOAD                BRANCH TO EXITLOAD
CHEKMEM  CLC   QUALMEM,=C'99999999'    IS QUALMEM = '99999999' ?
         BE    DOVOLSR                 IF YES, BRANCH TO DOVOLSR
         BAL   R14,EDITMEM             PERFORM EDIT MEMBER NAME
         CLC   VALIDMEM,=C'YES'        IS MEMBER NAME VALID ?
         BE    DOVOLSR                 IF YES, BRANCH TO DOVOLSR
         LA    R4,48                   SET R4 = 48
         MVC   OUTMSG,MESS48           MOVE 'INVALID SYNTAX OF MEMBER
*                                         NAME' TO OUTMSG
         MVC   PROCESSW,=C'NO '        MOVE 'NO ' TO PROCESSW
         B     EXITLOAD                BRANCH TO EXITLOAD
DOVOLSR  TM    VSTRING+6,X'80'         IS VOL SER PRESENT ?
         BNO   MOVE69S                 IF NOT, BRANCH TO MOVE69S
         MVC   INVOL,=CL6' '           MOVE 6 SPACES TO INVOL
         LA    R1,INVOL                R1 ==> ADDRESS OF INVOL
         L     R8,VSTRING              R8 ==> ADDRESS OF THE VOL SER
         LH    R7,VSTRING+4            R7 ==> LENGTH OF THE VOL SER
         S     R7,=F'1'                SUBTRACT 1 FOR EX
         SPACE 1
         EX    R7,MOVEVOL
         B     MOVEYES                 BRANCH TO MOVEYES
MOVEVOL  MVC   0(0,R1),0(R8)           MOVE THE VOL SER TO INVOL
         SPACE 1
MOVE69S  MVC   INVOL,=C'999999'        MOVE '999999' TO INVOL
MOVEYES  MVC   PROCESSW,=C'YES'        MOVE 'YES' TO PROCESSW
*
*
*
*
*
******************************************************************
*                                                                *
*        BUILD CAMLIST1 AND CAMLIST2 FOR LOCATE AND OBTAIN       *
*                                                                *
******************************************************************
*
         MVI   CAMLIST1,X'00'
         MVC   CAMLIST1+1(CAML1LEN-1),CAMLIST1
         MVI   CAMLIST2,X'00'
         MVC   CAMLIST2+1(CAML2LEN-1),CAMLIST2
         MVI   CAMLIST1,68
         MVI   CAMLIST2,193
         LA    R1,QUALDSN
         ST    R1,CAMLIST1+4
         ST    R1,CAMLIST2+4
         LA    R1,LOCAREA
         ST    R1,CAMLIST1+12
         LA    R1,OBTAREA
         ST    R1,CAMLIST2+12
         LA    R1,OBTVOL
         ST    R1,CAMLIST2+8
*
******************************************************************
*                                                                *
*        E X I T   L O A D F L D S                               *
*                                                                *
******************************************************************
*
EXITLOAD L     R14,SAVEIT10
         BR    14
         EJECT
********************************************************************
*                                                                  *
*        AS AN OVERVIEW, THIS ROUTINE DOES THE FOLLOWING:          *
*                                                                  *
*            1.  WAS VOLUME SERIAL NUMBER PROVIDED BY INVOKER ?    *
*            2.  IF YES, GO TO 10                                  *
*            3.  SEARCH CATALOG FOR QUALDSN (LOCATE)               *
*            4.  IF NOT FOUND,                                     *
*                     LOAD OUTMSG                                  *
*                     SET UP RETURN CODE                           *
*                     MOVE 'NO ' TO ISITCAT                        *
*                     EXIT                                         *
*            5.  IF FOUND, MOVE 'YES' TO ISITCAT                   *
*            6.  STORE VOL SER                                     *
*            7.  IS DATASET ON TAPE ?                              *
*            8.  IF YES,                                           *
*                     MOVE 'T' TO DEVTYPE                          *
*                     LOAD OUTMSG                                  *
*                     SET UP RETURN CODE                           *
*                     EXIT                                         *
*            9.  MOVE 'D' TO DEVTYPE                               *
*           10.  OBTAIN FORMAT-1 DSCB FOR DATASET                  *
*           11.  RETURN CODE OF OBTAIN = 0 ?                       *
*           12.  IF NOT,                                           *
*                     LOAD OUTMSG                                  *
*                     SET UP RETURN CODE                           *
*                     EXIT                                         *
*           13.  PERFORM ROUTINE TO GENERATE LRECL                 *
*           14.  PERFORM ROUTINE TO GENERATE BLKSIZE               *
*           15.  PERFORM ROUTINE TO GENERATE DSORG                 *
*           16.  PERFORM ROUTINE TO GENERATE RECFM                 *
*           16A. PERFORM ROUTINE TO GENERATE CNTLCHAR              *
*           16B. PERFORM ROUTINE TO GENERATE TRKSUSED AND EXTENTNO *
*           17.  IS DATASET A PARTITIONED DATASET ?                *
*           18.  IF YES, GO TO 24                                  *
*           19.  WAS MEMBER NAME PROVIDED ?                        *
*           20.  IF YES,                                           *
*                     LOAD OUTMSG                                  *
*                     SET UP RETURN CODE                           *
*                     EXIT                                         *
*           21.  SET RETURN CODE REG TO 0                          *
*           22.  LOAD OUTMSG WITH 'SUCCESSFUL COMPLETION'          *
*           23.  EXIT                                              *
*           24.  WAS MEMBER NAME PROVIDED ?                        *
*           25.  IF YES, GO TO 29                                  *
*           26.  SET RETURN CODE REG TO 0                          *
*           27.  LOAD OUTMSG WITH 'SUCCESSFUL COMPLETION'          *
*           28.  EXIT                                              *
*           29.  CALL BAL PGM 'FINDMEM' TO DETERMINE WHETHER       *
*                   MEMBER DOES EXIST IN THE DIRECTORY ?           *
*           30.  MEMBER FOUND ?                                    *
*           31.  IF NOT,                                           *
*                     LOAD OUTMSG                                  *
*                     SET UP RETURN CODE                           *
*                     EXIT                                         *
*           32.  SET RETURN CODE REG TO 0                          *
*           33.  LOAD OUTMSG WITH 'SUCCESSFUL COMPLETION'          *
*           34.  EXIT                                              *
*                                                                  *
********************************************************************
         EJECT
*
PRCSFLDS ST    R14,SAVEIT11
         CLC   INVOL,=C'999999'       IS INVOL = '999999' ?
         BE    LOKAYT                 IF YES, BRANCH TO LOKAYT
         MVC   OBTVOL,INVOL           MOVE INVOL TO OBTVOL
         B     OBTANE                 BRANCH TO OBTANE
LOKAYT   LOCATE CAMLIST1
         SPACE 2
         C     R15,=F'0'              COMPARE REG 15 TO BE = 0
         BE    RC0                    IF REG 15=0, BRANCH TO RC0
         MVC   ISITCAT,NOPE           MOVE 'NO ' TO ISITCAT
         LA    R4,4                   SET REG 4 = 4
         MVC   OUTMSG,MESS4           MOVE 'DATASET NOT CATALOGUED'
*                                       TO OUTMSG
         B     EXITPRCS               BRANCH TO EXITPRCS
RC0      MVC   ISITCAT,YESS           MOVE 'YES' TO ISITCAT
         MVC   FULLDSN(44),QUALDSN    MOVE QUALDSN TO FULLDSN
         MVC   FULLDSN+44(10),=CL10'          '
         CLC   MEMCNTL,=CL3'YES'      WAS A MEMBER NAME GIVEN ?
         BNE   RC0CONT                IF NOT, BRANCH TO RC0CONT
         BAL   R14,GENFULDS           PERFORM ROUTINE TO SUFFIX (MNAME)
*                                        TO FULLDSN
RC0CONT  CLC   LOCAREA(2),HEX0001     VERIFY THAT THE NUMBER OF
*                                        VOLUMES COUNT IS 1
         BE    MATCH                  IF YES, BRANCH TO MATCH
         LA    R4,8                   SET REG 4 = 8
         MVC   OUTMSG,MESS8           MOVE 'FILE IS ON MOR THAN 1 VOL'
*                                       TO OUTMSG
         B     EXITPRCS               BRANCH TO EXITPRCS
MATCH    MVC   VOLSER(6),LOCAREA+6    LOAD VOLSER FROM CAMLST WORKAREA
         MVC   OBTVOL(6),VOLSER       MOVE VOLSER TO OBTVOL
         CLI   LOCAREA+4,X'80'        IS DATASET ON TAPE ?
         BE    ONTAPE                 IF YES; BRANCH TO ONTAPE
         MVI   DEVTYPE,C'D'           MOVE 'D' (FOR DISK) TO DEVTYPE
         B     OBTANE                 BRANCH TO OBTANE
ONTAPE   MVI   DEVTYPE,C'T'           MOVE 'T' (FOR TAPE) TO DEVTYPE
         LA    R4,40                  SET REG 4 = 40
         MVC   OUTMSG,MESS40          MOVE 'FILE IS ON A TAPE VOLUME'
*                                       TO OUTMSG
         B     EXITPRCS               BRANCH TO EXITPRCS
         SPACE 2
OBTANE   OBTAIN CAMLIST2
         SPACE 2
         C     R15,=F'0'              COMPARE REG 15 TO BE = 0
         BE    RCODE0                 IF REG 15=0, BRANCH TO RCODE0
         C     R15,=F'4'              COMPARE REG 15 TO BE = 4
         BE    RCODE4                 IF REG 15=4, BRANCH TO RCODE4
         C     R15,=F'8'              COMPARE REG 15 TO BE = 8
         BE    RCODE8                 IF REG 15=8, BRANCH TO RCODE8
         LA    R4,20                  SET REG 4 = 20
         MVC   OUTMSG,MESS20          MOVE 'OBTAIN MACRO RETURNED'
*                                       RC 12/16' TO OUTMSG
         B     EXITPRCS               BRANCH TO EXITPRCS
RCODE4   LA    R4,12                  SET REG 4 = 12
         MVC   OUTMSG,MESS12          MOVE 'REQUIRED VOL NOT MOUNTED'
*                                       TO OUTMSG
         B     EXITPRCS               BRANCH TO EXITPRCS
RCODE8   LA    R4,16                  SET REG 4 = 16
         MVC   OUTMSG,MESS16          MOVE 'FORMAT-1 DSCB NOT FOUND'
*                                       ON VOL' TO ERRMSG
         MVC   VOLSER,=CL6' '         MOVE SPACES TO VOLSER
         B     EXITPRCS               BRANCH TO EXITPRCS
RCODE0   MVC   VOLSER,OBTVOL          MOVE OBTVOL TO VOLSER
         MVI   DEVTYPE,C'D'           MOVE 'D' (FOR DISK) TO DEVTYPE
         MVC   FULLDSN(44),QUALDSN    MOVE QUALDSN TO FULLDSN
         MVC   FULLDSN+44(10),=CL10'          '
         CLC   MEMCNTL,=CL3'YES'      WAS A MEMBER NAME GIVEN ?
         BNE   GENLRECL               IF NOT, BRANCH TO GENLRECL
         BAL   R14,GENFULDS           PERFORM ROUTINE TO SUFFIX (MNAME)
*                                        TO FULLDSN
         SPACE 1
GENLRECL BAL   R14,LRECLRT            PERFORM LRECL ROUTINE
         SPACE 1
         BAL   R14,BLKSIZRT           PERFORM BLKSIZE ROUTINE
         SPACE 1
         BAL   R14,DSORGRT            PERFORM DSORG ROUTINE
         SPACE 1
         BAL   R14,RECFMRT            PERFORM RECFM ROUTINE
         SPACE 1
         BAL   R14,CCHARRT            PERFORM CNTLCHAR ROUTINE
         SPACE 1
         BAL   R14,SPACERT            PERFORM ROUTINE TO GENERATE
*                                        TRKSUSED AND EXTENTNO
         SPACE 1
         CLC   GOODCALL,=CL3'YES'     DID ALL GO OK ?
         BNE   EXITPRCS               IF NOT, BRANCH TO EXITPRCS
         CLC   DSORG(2),=C'PO'        COMPARE DSORG = 'PO'
         BE    PDS                    IF YES, BRANCH TO PDS
         CLC   QUALMEM,=C'99999999'   IS QUALMEM = '99999999' ?
         BE    NOMEM                  IF YES; BRANCH TO NOMEM
         LA    R4,44                  SET REG 4 = 44
         MVC   OUTMSG,MESS44          MOVE 'DATASET NOT PARTITIONED'
*                                       TO OUTMSG
         B     EXITPRCS               BRANCH TO EXITPRCS
NOMEM    LA    R4,0                   SET REG 4 = 0
         MVC   OUTMSG,MESS0           MOVE 'SUCCESSFUL COMPLETION'
*                                       TO OUTMSG
         B     EXITPRCS               BRANCH TO EXITPRCS
         SPACE 1
PDS      CLC   QUALMEM,=C'99999999'   IS QUALMEM = '99999999' ?
         BNE   SEERCH                 IF NOT, BRANCH TO SEERCH
         LA    R4,0                   SET REG 4 = 0
         MVC   OUTMSG,MESS0           MOVE 'SUCCESSFUL COMPLETION'
*                                       TO OUTMSG
         B     EXITPRCS               BRANCH TO EXITPRCS
SEERCH   MVC   FNDDSN,QUALDSN         MOVE QUALDSN TO FNDDSN
         MVC   FNDMEMBR,QUALMEM       MOVE QUALMEM TO FNDMEMBR
         BAL   R14,SRCHDIR            PERFORM ROUTNE TO CALL 'FINDMEM'
*                                        WHICH SEARCHES THE DIRECTORY
*                                        FOR MEMBER NAME = INMEM
         CLC   INDICATR,=C'00'        IS INDICATR = '00' ?
         BE    FOUND                  IF YES, BRANCH TO FOUND
         MVC   MEMFND,NOPE            MOVE 'NO ' TO MEMFND
         B     EXITPRCS               BRANCH TO EXITPRCS
FOUND    MVC   MEMFND,YESS            MOVE 'YES' TO MEMFND
         LA    R4,0                   SET REG 4 = 0
         MVC   OUTMSG,MESS0           MOVE 'SUCCESSFUL COMPLETION'
*                                       TO OUTMSG
EXITPRCS L     R14,SAVEIT11
         BR    14
         EJECT
*
*
***********************************************************
*                                                         *
*  THIS ROUTINE IS RESPONSIBLE FOR CREATING THE PARAMETER *
*  LRECL THAT IS MADE AVAILABLE TO THE CALLING CLIST      *
*                                                         *
***********************************************************
*
*
LRECLRT  ST    R14,SAVEIT2
         MVI   FULLWURD,X'00'              MOVE ALL BINARY ZEROS
         MVC   FULLWURD+1(3),FULLWURD        TO FULLWURD
         MVC   FULLWURD+2(2),OBTAREA+44    MOVE LRECL WHICH IS 2 BYTES
*                                            IN LENGTH BINARY TO LOW
*                                            ORDER 2 BYTES OF FULLWURD
         L     R9,FULLWURD                 LOAD REG 9 WITH FULLWURD
         CVD   R9,DUBLWURD                 CONVERT REG 9 CONTENTS TO
*                                            PACKED DECIMAL AND
*                                            PLACE INTO DUBLWURD
         UNPK  LRECL(5),DUBLWURD+5(3)      CONVERT PACKED DECIMAL IN
*                                            DUBLWURD+5 (FOR A LENGTH
*                                            OF 3 BYTES) AND PLACE
*                                            INTO LRECL (FOR A LENGTH
*                                            OF 5 BYTES)
         OI    LRECL+4,X'F0'               GET RID OF THE SIGN OF
*                                            LRECL (I.E. CHANGE HIGH
*                                            ORDER 4 BITS OF LOW ORDER
*                                            BYTE OF LRECL TO ALL ONES
         L     R14,SAVEIT2
         BR    14
         EJECT
*
*
***********************************************************
*                                                         *
*  THIS ROUTINE IS RESPONSIBLE FOR CREATING THE PARAMETER *
*  BLKSIZE THAT IS MADE AVAILABLE TO THE CALLING CLIST    *
*                                                         *
***********************************************************
*
*
BLKSIZRT ST    R14,SAVEIT3
         MVI   FULLWURD,X'00'              MOVE ALL BINARY ZEROS
         MVC   FULLWURD+1(3),FULLWURD        TO FULLWURD
         MVC   FULLWURD+2(2),OBTAREA+42    MOVE BLKSIZE WHICH IS
*                                            2 BYTES BINARY TO LOW
*                                            ORDER 2 BYTES OF FULLWURD
         L     R9,FULLWURD                 LOAD REG 9 WITH FULLWURD
         CVD   R9,DUBLWURD                 CONVERT REG 9 CONTENTS TO
*                                            PACKED DECIMAL AND
*                                            PLACE INTO DUBLWURD
         UNPK  BLKSIZE(5),DUBLWURD+5(3)    CONVERT PACKED DECIMAL IN
*                                            DUBLWURD+5 (FOR A LENGTH
*                                            OF 3 BYTES) AND PLACE
*                                            INTO BLKSIZE (FOR A
*                                            LENGTH OF 5 BYTES)
         OI    BLKSIZE+4,X'F0'             GET RID OF THE SIGN OF
*                                            BLKSIZE (I.E. CHANGE HIGH
*                                            ORDER 4 BITS OF LOW ORDER
*                                            BYTE OF BLKSIZE TO ALL
*                                            ONES)
         L     R14,SAVEIT3
         BR    14
         EJECT
*
*
***********************************************************
*                                                         *
*  THIS ROUTINE IS RESPONSIBLE FOR CREATING THE PARAMETER *
*  DSORG THAT IS MADE AVAILABLE TO THE CALLING CLIST      *
*                                                         *
***********************************************************
*
*
DSORGRT  ST    R14,SAVEIT4
         TM    OBTAREA+38,B'10000000'
         BO    MOVEIT1
         TM    OBTAREA+38,B'01000000'
         BO    MOVEIT2
         TM    OBTAREA+38,B'00100000'
         BO    MOVEIT3
         TM    OBTAREA+38,B'00010000'
         BO    MOVEIT4
         TM    OBTAREA+38,B'00001000'
         BO    MOVEIT5
         TM    OBTAREA+38,B'00000100'
         BO    MOVEIT6
         TM    OBTAREA+38,B'00000010'
         BO    MOVEIT7
         B     MOVEIT8
MOVEIT1  MVC   DSORG(2),ORGTABLE        MOVE 'IS' TO DSORG
         B     EXITDSRG
MOVEIT2  MVC   DSORG(2),ORGTABLE+2      MOVE 'PS' TO DSORG
         B     EXITDSRG
MOVEIT3  MVC   DSORG(2),ORGTABLE+4      MOVE 'DA' TO DSORG
         B     EXITDSRG
MOVEIT4  MVC   DSORG(2),ORGTABLE+6      MOVE 'CX' TO DSORG
         B     EXITDSRG
MOVEIT5  MVC   DSORG(2),ORGTABLE+8      MOVE 'CQ' TO DSORG
         B     EXITDSRG
MOVEIT6  MVC   DSORG(2),ORGTABLE+10     MOVE 'MQ' TO DSORG
         B     EXITDSRG
MOVEIT7  MVC   DSORG(2),ORGTABLE+12     MOVE 'PO' TO DSORG
         B     EXITDSRG
MOVEIT8  CLI   OBTAREA+38,X'00'
         BNE   DSORGU
         CLC   OBTAREA+96(5),=XL5'0000000000'
         BNE   DSORGU
         MVC   DSORG(2),ORGTABLE+16     MOVE 'VS' TO DSORG
         B     EXITDSRG
DSORGU   MVC   DSORG(2),ORGTABLE+14     MOVE 'U ' TO DSORG
EXITDSRG L     R14,SAVEIT4
         BR    14
         EJECT
*
*
***********************************************************
*                                                         *
*  THIS ROUTINE IS RESPONSIBLE FOR CREATING THE PARAMETER *
*  RECFM THAT IS MADE AVAILABLE TO THE CALLING CLIST      *
*                                                         *
***********************************************************
*
*
RECFMRT  ST    R14,SAVEIT5
         TM    OBTAREA+40,B'11000000'
         BO    RECFMU
         TM    OBTAREA+40,B'01000000'
         BO    RECFMV
         MVI   RECFM,C'F'
         B     EXITRCFM
RECFMU   MVI   RECFM,C'U'
         B     EXITRCFM
RECFMV   MVI   RECFM,C'V'
EXITRCFM L     R14,SAVEIT5
         BR    14
         EJECT
*
*
***********************************************************
*                                                         *
*  THIS ROUTINE IS RESPONSIBLE FOR CREATING THE PARAMETER *
*  CNTLCHAR THAT IS MADE AVAILABLE TO THE CALLING CLIST   *
*                                                         *
***********************************************************
*
*
CCHARRT  ST    R14,SAVEIT28
         TM    OBTAREA+40,B'00000100'
         BO    ANSICNTL
         TM    OBTAREA+40,B'00000010'
         BO    MACHCNTL
         MVI   CNTLCHAR,C'N'
         B     EXITCCHR
ANSICNTL MVI   CNTLCHAR,C'A'
         B     EXITCCHR
MACHCNTL MVI   CNTLCHAR,C'M'
EXITCCHR L     R14,SAVEIT28
         BR    14
         EJECT
*
*
************************************************************
*                                                          *
*  THIS ROUTINE IS RESPONSIBLE FOR CREATING THE            *
*  PARAMETERS TRKSUSED AND EXTENTNO                        *
*                                                          *
************************************************************
*
*
SPACERT  ST    R14,SAVEIT31
         MVC   GOODCALL,=CL3'YES'       MOVE 'YES' TO GOODCALL
         MVC   EXTENTNO,=CL2'00'        MOVE 00 TO EXTENTNO
         MVC   TRKSUSED,=CL5'00000'     MOVE 00000 TO TRKSUSED
         CLC   DSORG,=CL2'PS'           DSORG = 'PS' ?
         BE    SPACERT2                 IF SO, BRANCH TO SPACERT2
         CLC   DSORG,=CL2'PO'           DSORG = 'PO' ?
         BE    SPACERT2                 IF SO, BRANCH TO SPACERT2
         B     EXITSPAC                 BRANCH TO EXITSPAC
SPACERT2 CLI   DEVTYPE,C'D'             IS DATASET ON DISK ?
         BNE   EXITSPAC                 IF NOT, BRANCH TO EXITSPAC
         MVC   FLSPDSN,QUALDSN
         MVC   FLSPVOL,VOLSER
         CALL  FILSPACE,(FLSPAREA),VL,MF=(E,RPPL)  GET # USED TRACKS
         C     R15,=F'0'                RETURN CODE = 0 ?
         BE    GNSPINFO                 IF SO, BRANCH TO GNSPINFO
         MVC   GOODCALL,=CL3'NO '       MOVE 'NO ' TO GOODCALL
         LA    R4,52                    SET R4 = 52
         MVC   OUTMSG,MESS52            MOVE 'ERROR IN PGM FILSPACE'
*                                         TO OUTMSG
         B     EXITSPAC                 BRANCH TO EXITSPAC
GNSPINFO MVC   EXTENTNO,OUTEXTNO        LOAD EXTENTNO
         MVC   TRKSUSED,OUTTRKNO        LOAD TRKSUSED
EXITSPAC L     R14,SAVEIT31
         BR    14
         EJECT
*
*
***********************************************************
*                                                         *
*  THIS ROUTINE IS RESPONSIBLE FOR CALLING THE SUBROUTINE *
*  FINDMEM WHICH DYNAMICALLY FREES AND ALLOCATES THE      *
*  FILE WITH DSN = FNDDSN TO DDNAME FINDMEDD AND THEN     *
*  SEARCHES THE DIRECTORY FOR MEMBER NAME = FNDMEMBR      *
*                                                         *
*  THE TWO BYTE FIELD INDICATR RETURNS VALUES WHICH       *
*  RELATE TO THE SUCCESS OR NON SUCCESS OF THAT SEARCH    *
*                                                         *
***********************************************************
*
*
SRCHDIR  ST    R14,SAVEIT7            SAVE REG 14 ADDRESS IN SAVEIT7
         MVC   FNDVOL,VOLSER
         CALL  FINDMEM,(IOAREA,FNDVOL),VL,MF=(E,RPPL)
         CLC   INDICATR,=C'00'        INDICATR = '00'?
         BE    EXITFIND               IF YES, BRANCH TO EXITFIND
         CLC   INDICATR,=C'04'        INDICATR = '04'?
         BE    INDIC04                IF YES, BRANCH TO INDIC04
         CLC   INDICATR,=C'08'        INDICATR = '08'?
         BE    INDIC08                IF YES, BRANCH TO INDIC08
         CLC   INDICATR,=C'20'        INDICATR = '20'?
         BE    INDIC20                IF YES, BRANCH TO INDIC20
         CLC   INDICATR,=C'24'        INDICATR = '24'?
         BE    INDIC24                IF YES, BRANCH TO INDIC24
INDIC04  LA    R4,24                  SET REG 4 = 24
         MVC   OUTMSG(30),MESS24      MOVE 'MEMBER NAME NOT FOUND'
*                                       TO OUTMSG
         B     EXITFIND               BRANCH TO EXITFIND
INDIC08  LA    R4,28                  SET REG 4 = 28
         MVC   OUTMSG(30),MESS28      MOVE 'UNSUCCESSFUL DYNAMIC
*                                       ALLOCATION' TO OUTMSG
         B     EXITFIND               BRANCH TO EXITFIND
INDIC20  LA    R4,32                  SET REG 4 = 32
         MVC   OUTMSG(30),MESS32      MOVE 'I/O ERROR READING
*                                       DIRECTORY' TO OUTMSG
         B     EXITFIND               BRANCH TO EXITFIND
INDIC24  LA    R4,36                  SET REG 4 = 36
         MVC   OUTMSG(30),MESS36      MOVE 'UNSUCCESSFUL FREE OF
*                                       DDNAME' TO OUTMSG
EXITFIND L     R14,SAVEIT7
         BR    R14
         EJECT
*
*
***********************************************************
*                                                         *
*        THIS ROUTINE IS RESPONSIBLE FOR EDITING THE      *
*        MEMBER NAME WHICH IS IN QUALMEM.                 *
*                                                         *
*        IF THE MEMBER NAME IS VALID, IT WILL MOVE 'YES'  *
*        TO VALIDMEM ELSE IT WILL MOVE 'NO ' TO VALIDMEM  *
*                                                         *
***********************************************************
*
*
EDITMEM  ST    R14,SAVEIT6            SAVE REG 14 ADDRESS IN SAVEIT6
         LA    R9,OKCHARS1            R9==> ADDRESS OF OKCHARS1
EDIT1    CLI   0(R9),C'+'             AT END OF TABLE OKCHARS1 ?
         BE    NOGOOD                 IF YES, BRANCH TO NOGOOD
         CLC   QUALMEM(1),0(R9)       HIGH ORDER BYTE OF QUALMEM
*                                       MATCH ON TABLE ELEMENT ?
         BE    EDIT2                  IF YES, BRANCH TO EDIT2
         A     R9,=F'1'               ADD 1 TO REGISTER 9
         B     EDIT1                  BRANCH TO EDIT1
EDIT2    LA    R8,QUALMEM+1           R8==> ADDRESS OF QUALMEM + 1
         LA    R7,1                   R7==> VALIDATED BYTES OF QUALMEM
EDIT3    LA    R9,OKCHARS2            R9==> ADDRESS OF OKCHARS2
EDIT4    CLI   0(R9),C'+'             AT END OF TABLE OKCHARS2 ?
         BE    NOGOOD                 IF YES, BRANCH TO NOGOOD
         CLC   0(1,R8),0(R9)          QUALMEM AS INDEXED BY REG 8
*                                       MATCH TO TABLE ELEMENT ?
         BE    EDIT5                  IF YES, BRANCH TO EDIT5
         A     R9,=F'1'               ADD 1 TO REGISTER 9
         B     EDIT4                  BRANCH TO EDIT4
EDIT5    A     R8,=F'1'               ADD 1 TO REGISTER 8
         A     R7,=F'1'               ADD 1 TO REGISTER 7
         C     R7,=F'8'               ALL 8 BYTES OF QUALMEM VALIDATED?
         BL    EDIT3                  IF NOT, BRANCH TO EDIT3
         MVC   VALIDMEM,=C'YES'       MOVE 'YES' TO VALIDMEM
         B     EXITEDIT               BRANCH TO EXITEDIT
NOGOOD   MVC   VALIDMEM,=C'NO '       MOVE 'NO ' TO VALIDMEM
EXITEDIT L     R14,SAVEIT6
         BR    R14
         EJECT
*
*
***********************************************************
*                                                         *
*        THIS ROUTINE IS RESPONSIBLE FOR GENERATING THE   *
*        DATA FIELD FULLDSN IF A MEMBER NAME WAS PROVIDED *
*        WITHIN THE DATASET NAME                          *
*                                                         *
*        FULLDSN = X(Y)                                   *
*                                                         *
*            WHERE X IS THE SIGNIFICANT PORTION OF THE    *
*               OS CATALOG NAME (THE INPUT DSNAME         *
*               COULD HAVE BEEN AN ALIAS NAME)            *
*                                                         *
*            WHERE Y IS THE SIGNIFICANT PORTION OF THE    *
*               MEMBER NAME (FOUND IN QUALMEM)            *
*                                                         *
***********************************************************
*
*
GENFULDS ST    R14,SAVEIT26           SAVE REG 14 ADDRESS IN SAVEIT26
         LA    R7,FULLDSN
         LA    R8,1
GENLOOP1 C     R8,=F'44'
         BH    GENHIT1
         CLI   0(R7),C' '
         BE    GENHIT1
         A     R7,=F'1'
         A     R8,=F'1'
         B     GENLOOP1
GENHIT1  MVI   0(R7),C'('
         A     R7,=F'1'
         LA    R8,1
         LA    R1,QUALMEM
GENLOOP2 C     R8,=F'8'
         BH    GENHIT2
         CLI   0(R1),C' '
         BE    GENHIT2
         MVC   0(1,R7),0(R1)
         A     R7,=F'1'
         A     R8,=F'1'
         A     R1,=F'1'
         B     GENLOOP2
GENHIT2  MVI   0(R7),C')'
         L     R14,SAVEIT26
         BR    R14
         EJECT
********************************************************************
*                                                                  *
*        BUILD UPDTLIST (IKJUPDT PARM LIST)                        *
*                                                                  *
********************************************************************
*
INITLIST ST    R14,SAVEIT13
         MVC   UPDTUPT,CPPLUPT          UPT
         MVC   UPDTECT,CPPLECT          ECT
         LA    R9,ECB
         ST    R9,UPDTECB               ECB
         LA    R8,UPLIST
         ST    R8,UPDTUPL               UPLIST
         L     R14,SAVEIT13
         BR    14
         EJECT
********************************************************************
*                                                                  *
*        BUILD UPDATE PARM LIST FOR &FULLDSN AND CALL IKJUPDT      *
*                                                                  *
********************************************************************
*
SETFLDSN ST    R14,SAVEIT14
         LA    R9,=C'FULLDSN'      R9 ==> ADDRESS OF VAR NAME
         ST    R9,LOCPTR           STORE ADDR OF VAR NAME IN LOCPTR
         MVC   LOCLEN,=F'7'        LOCLEN = LENGTH OF VAR NAME
         LA    R5,FULLDSN          R5 ==> ADDRESS OF VARIABLE
         ST    R5,VALPTR           STORE ADDRESS OF VARIABLE IN VALPTR
         LA    R9,0                R9 ==> 0
CMPGT53  C     R9,=F'53'           IS REG 9 GREATER THAN 53 ?
         BH    DSNGT53             IF YES, BRANCH TO DSNGT53
         CLI   0(R5),C' '          IS FULLDSN AS INDEXED BY REG 5
*                                     EQUAL TO SPACE ?
         BE    HITASPAC            IF YES, BRANCH TO HITASPAC
         A     R5,=F'1'            ADD 1 TO REGISTER 5
         A     R9,=F'1'            ADD 1 TO REGISTER 9
         B     CMPGT53             BRANCH TO CMPGT53
DSNGT53  LA    R9,54               R9 ==> 54
HITASPAC ST    R9,VALLEN           VALLEN = LENGTH OF DATA FIELD
         LA    R1,UPDTLIST         R1 ==> IKJUPDT PARM LIST
         CALL  IKJUPDT             DO THE UPDATE
         L     R14,SAVEIT14
         BR    14
         EJECT
********************************************************************
*                                                                  *
*        BUILD UPDATE PARM LIST FOR &LRECL AND CALL IKJUPDT        *
*                                                                  *
********************************************************************
*
SETLRECL ST    R14,SAVEIT15
         LA    R9,=C'LRECL'        R9 ==> ADDRESS OF VAR NAME
         ST    R9,LOCPTR           STORE ADDR OF VAR NAME IN LOCPTR
         MVC   LOCLEN,=F'5'        LOCLEN = LENGTH OF VAR NAME
         LA    R5,LRECL            R5 ==> ADDRESS OF VARIABLE
         ST    R5,VALPTR           STORE ADDRESS OF VARIABLE IN VALPTR
         MVC   VALLEN,=F'5'        VALLEN = LENGTH OF DATA FIELD
         LA    R1,UPDTLIST         R1 ==> IKJUPDT PARM LIST
         CALL  IKJUPDT             DO THE UPDATE
         L     R14,SAVEIT15
         BR    14
         EJECT
********************************************************************
*                                                                  *
*        BUILD UPDATE PARM LIST FOR &BLKSIZE AND CALL IKJUPDT      *
*                                                                  *
********************************************************************
*
SETBLKSZ ST    R14,SAVEIT16
         LA    R9,=C'BLKSIZE'      R9 ==> ADDRESS OF VAR NAME
         ST    R9,LOCPTR           STORE ADDR OF VAR NAME IN LOCPTR
         MVC   LOCLEN,=F'7'        LOCLEN = LENGTH OF VAR NAME
         LA    R5,BLKSIZE          R5 ==> ADDRESS OF VARIABLE
         ST    R5,VALPTR           STORE ADDRESS OF VARIABLE IN VALPTR
         MVC   VALLEN,=F'5'        VALLEN = LENGTH OF DATA FIELD
         LA    R1,UPDTLIST         R1 ==> IKJUPDT PARM LIST
         CALL  IKJUPDT             DO THE UPDATE
         L     R14,SAVEIT16
         BR    14
         EJECT
********************************************************************
*                                                                  *
*        BUILD UPDATE PARM LIST FOR &RECFM AND CALL IKJUPDT        *
*                                                                  *
********************************************************************
*
SETRECFM ST    R14,SAVEIT17
BASEREG2 LA    R9,=C'RECFM'        R9 ==> ADDRESS OF VAR NAME
         ST    R9,LOCPTR           STORE ADDR OF VAR NAME IN LOCPTR
         MVC   LOCLEN,=F'5'        LOCLEN = LENGTH OF VAR NAME
         LA    R5,RECFM            R5 ==> ADDRESS OF VARIABLE
         ST    R5,VALPTR           STORE ADDRESS OF VARIABLE IN VALPTR
         MVC   VALLEN,=F'1'        VALLEN = LENGTH OF DATA FIELD
         LA    R1,UPDTLIST         R1 ==> IKJUPDT PARM LIST
         CALL  IKJUPDT             DO THE UPDATE
         L     R14,SAVEIT17
         BR    14
         EJECT
********************************************************************
*                                                                  *
*        BUILD UPDATE PARM LIST FOR &CNTLCHAR AND CALL IKJUPDT     *
*                                                                  *
********************************************************************
*
SETCCHAR ST    R14,SAVEIT27
         LA    R9,=C'CNTLCHAR'     R9 ==> ADDRESS OF VAR NAME
         ST    R9,LOCPTR           STORE ADDR OF VAR NAME IN LOCPTR
         MVC   LOCLEN,=F'8'        LOCLEN = LENGTH OF VAR NAME
         LA    R5,CNTLCHAR         R5 ==> ADDRESS OF VARIABLE
         ST    R5,VALPTR           STORE ADDRESS OF VARIABLE IN VALPTR
         MVC   VALLEN,=F'1'        VALLEN = LENGTH OF DATA FIELD
         LA    R1,UPDTLIST         R1 ==> IKJUPDT PARM LIST
         CALL  IKJUPDT             DO THE UPDATE
         L     R14,SAVEIT27
         BR    14
         EJECT
********************************************************************
*                                                                  *
*        BUILD UPDATE PARM LIST FOR &DEVTYPE AND CALL IKJUPDT      *
*                                                                  *
********************************************************************
*
SETDEVTP ST    R14,SAVEIT18
         LA    R9,=C'DEVTYPE'      R9 ==> ADDRESS OF VAR NAME
         ST    R9,LOCPTR           STORE ADDR OF VAR NAME IN LOCPTR
         MVC   LOCLEN,=F'7'        LOCLEN = LENGTH OF VAR NAME
         LA    R5,DEVTYPE          R5 ==> ADDRESS OF VARIABLE
         ST    R5,VALPTR           STORE ADDRESS OF VARIABLE IN VALPTR
         MVC   VALLEN,=F'1'        VALLEN = LENGTH OF DATA FIELD
         LA    R1,UPDTLIST         R1 ==> IKJUPDT PARM LIST
         CALL  IKJUPDT             DO THE UPDATE
         L     R14,SAVEIT18
         BR    14
         EJECT
********************************************************************
*                                                                  *
*        BUILD UPDATE PARM LIST FOR &VOLSER AND CALL IKJUPDT       *
*                                                                  *
********************************************************************
*
SETVOLSR ST    R14,SAVEIT19
         LA    R9,=C'VOLSER'       R9 ==> ADDRESS OF VAR NAME
         ST    R9,LOCPTR           STORE ADDR OF VAR NAME IN LOCPTR
         MVC   LOCLEN,=F'6'        LOCLEN = LENGTH OF VAR NAME
         LA    R5,VOLSER           R5 ==> ADDRESS OF VARIABLE
         ST    R5,VALPTR           STORE ADDRESS OF VARIABLE IN VALPTR
         MVC   VALLEN,=F'6'        VALLEN = LENGTH OF DATA FIELD
         LA    R1,UPDTLIST         R1 ==> IKJUPDT PARM LIST
         CALL  IKJUPDT             DO THE UPDATE
         L     R14,SAVEIT19
         BR    14
         EJECT
********************************************************************
*                                                                  *
*        BUILD UPDATE PARM LIST FOR &DSORG AND CALL IKJUPDT        *
*                                                                  *
********************************************************************
*
SETDSORG ST    R14,SAVEIT20
         LA    R9,=C'DSORG'        R9 ==> ADDRESS OF VAR NAME
         ST    R9,LOCPTR           STORE ADDR OF VAR NAME IN LOCPTR
         MVC   LOCLEN,=F'5'        LOCLEN = LENGTH OF VAR NAME
         LA    R5,DSORG            R5 ==> ADDRESS OF VARIABLE
         ST    R5,VALPTR           STORE ADDRESS OF VARIABLE IN VALPTR
         MVC   VALLEN,=F'2'        VALLEN = LENGTH OF DATA FIELD
         LA    R1,UPDTLIST         R1 ==> IKJUPDT PARM LIST
         CALL  IKJUPDT             DO THE UPDATE
         L     R14,SAVEIT20
         BR    14
         EJECT
********************************************************************
*                                                                  *
*        BUILD UPDATE PARM LIST FOR &ISITCAT AND CALL IKJUPDT      *
*                                                                  *
********************************************************************
*
SETISCAT ST    R14,SAVEIT21
         LA    R9,=C'ISITCAT'      R9 ==> ADDRESS OF VAR NAME
         ST    R9,LOCPTR           STORE ADDR OF VAR NAME IN LOCPTR
         MVC   LOCLEN,=F'7'        LOCLEN = LENGTH OF VAR NAME
         LA    R5,ISITCAT          R5 ==> ADDRESS OF VARIABLE
         ST    R5,VALPTR           STORE ADDRESS OF VARIABLE IN VALPTR
         MVC   VALLEN,=F'3'        VALLEN = LENGTH OF DATA FIELD
         LA    R1,UPDTLIST         R1 ==> IKJUPDT PARM LIST
         CALL  IKJUPDT             DO THE UPDATE
         L     R14,SAVEIT21
         BR    14
         EJECT
********************************************************************
*                                                                  *
*        BUILD UPDATE PARM LIST FOR &MEMFND AND CALL IKJUPDT       *
*                                                                  *
********************************************************************
*
SETMEMFD ST    R14,SAVEIT23
         LA    R9,=C'MEMFND'       R9 ==> ADDRESS OF VAR NAME
         ST    R9,LOCPTR           STORE ADDR OF VAR NAME IN LOCPTR
         MVC   LOCLEN,=F'6'        LOCLEN = LENGTH OF VAR NAME
         LA    R5,MEMFND           R5 ==> ADDRESS OF VARIABLE
         ST    R5,VALPTR           STORE ADDRESS OF VARIABLE IN VALPTR
         MVC   VALLEN,=F'3'        VALLEN = LENGTH OF DATA FIELD
         LA    R1,UPDTLIST         R1 ==> IKJUPDT PARM LIST
         CALL  IKJUPDT             DO THE UPDATE
         L     R14,SAVEIT23
         BR    14
         EJECT
********************************************************************
*                                                                  *
*        BUILD UPDATE PARM LIST FOR &MEMCNTL AND CALL IKJUPDT      *
*                                                                  *
********************************************************************
*
SETMEMCT ST    R14,SAVEIT24
         LA    R9,=C'MEMCNTL'      R9 ==> ADDRESS OF VAR NAME
         ST    R9,LOCPTR           STORE ADDR OF VAR NAME IN LOCPTR
         MVC   LOCLEN,=F'7'        LOCLEN = LENGTH OF VAR NAME
         LA    R5,MEMCNTL          R5 ==> ADDRESS OF VARIABLE
         ST    R5,VALPTR           STORE ADDRESS OF VARIABLE IN VALPTR
         MVC   VALLEN,=F'3'        VALLEN = LENGTH OF DATA FIELD
         LA    R1,UPDTLIST         R1 ==> IKJUPDT PARM LIST
         CALL  IKJUPDT             DO THE UPDATE
         L     R14,SAVEIT24
         BR    14
         EJECT
********************************************************************
*                                                                  *
*        BUILD UPDATE PARM LIST FOR &TRKSUSED AND CALL IKJUPDT     *
*                                                                  *
********************************************************************
*
SETRKUSD ST    R14,SAVEIT29
         LA    R9,=C'TRKSUSED'     R9 ==> ADDRESS OF VAR NAME
         ST    R9,LOCPTR           STORE ADDR OF VAR NAME IN LOCPTR
         MVC   LOCLEN,=F'8'        LOCLEN = LENGTH OF VAR NAME
         LA    R5,TRKSUSED         R5 ==> ADDRESS OF VARIABLE
         ST    R5,VALPTR           STORE ADDRESS OF VARIABLE IN VALPTR
         MVC   VALLEN,=F'5'        VALLEN = LENGTH OF DATA FIELD
         LA    R1,UPDTLIST         R1 ==> IKJUPDT PARM LIST
         CALL  IKJUPDT             DO THE UPDATE
         L     R14,SAVEIT29
         BR    14
         EJECT
********************************************************************
*                                                                  *
*        BUILD UPDATE PARM LIST FOR &EXTENTNO AND CALL IKJUPDT     *
*                                                                  *
********************************************************************
*
SETEXTNO ST    R14,SAVEIT30
         LA    R9,=C'EXTENTNO'     R9 ==> ADDRESS OF VAR NAME
         ST    R9,LOCPTR           STORE ADDR OF VAR NAME IN LOCPTR
         MVC   LOCLEN,=F'8'        LOCLEN = LENGTH OF VAR NAME
         LA    R5,EXTENTNO         R5 ==> ADDRESS OF VARIABLE
         ST    R5,VALPTR           STORE ADDRESS OF VARIABLE IN VALPTR
         MVC   VALLEN,=F'2'        VALLEN = LENGTH OF DATA FIELD
         LA    R1,UPDTLIST         R1 ==> IKJUPDT PARM LIST
         CALL  IKJUPDT             DO THE UPDATE
         L     R14,SAVEIT30
         BR    14
         EJECT
********************************************************************
*                                                                  *
*        BUILD UPDATE PARM LIST FOR &OUTMSG AND CALL IKJUPDT       *
*                                                                  *
********************************************************************
*
SETOUTMG ST    R14,SAVEIT25
         LA    R9,=C'OUTMSG'       R9 ==> ADDRESS OF VAR NAME
         ST    R9,LOCPTR           STORE ADDR OF VAR NAME IN LOCPTR
         MVC   LOCLEN,=F'6'        LOCLEN = LENGTH OF VAR NAME
         LA    R5,OUTMSG           R5 ==> ADDRESS OF VARIABLE
         ST    R5,VALPTR           STORE ADDRESS OF VARIABLE IN VALPTR
         MVC   VALLEN,=F'30'       VALLEN = LENGTH OF DATA FIELD
         LA    R1,UPDTLIST         R1 ==> IKJUPDT PARM LIST
         CALL  IKJUPDT             DO THE UPDATE
         L     R14,SAVEIT25
         BR    14
         EJECT
********************************************************************
*                                                                  *
*        E N D   O F   J O B   R O U T I N E                       *
*                                                                  *
********************************************************************
*
SHUTDOWN LR   R15,R4
         LEAVER
         EJECT
         SPACE 3
********************************************************************
*                                                                  *
*        D A T A   A R E A   C O N S T A N T S                     *
*                                                                  *
********************************************************************
*
HEX0001  DC    X'0001'
YESS     DC    C'YES'
NOPE     DC    C'NO '
MESS0    DC    C'SUCCESSFUL COMPLETION         '
MESS4    DC    C'DATASET NOT CATALOGED         '
MESS8    DC    C'FILE IS ON MORE THAN 1 VOLUME '
MESS12   DC    C'REQUIRED VOLUME NOT MOUNTED   '
MESS16   DC    C'FORMAT-1 DSCB NOT FOUND ON VOL'
MESS20   DC    C'OBTAIN MACRO RETURNED RC 12/16'
MESS24   DC    C'MEMBER NAME NOT FOUND         '
MESS28   DC    C'UNSUCCESFUL DYNAMIC ALLOCATION'
MESS32   DC    C'I/O ERROR READING DIRECTORY   '
MESS36   DC    C'UNSUCCESSFUL FREE OF DDNAME   '
MESS40   DC    C'FILE IS ON A TAPE VOLUME      '
MESS44   DC    C'DATASET NOT PARTITIONED       '
MESS48   DC    C'INVALID SYNTAX OF MEMBER NAME '
MESS52   DC    C'ERROR IN PROGRAM FILSPACE     '
MESS96   DC    C'INVALID SYNTAX OF OPERAND(S)  '
ORGTABLE DC    C'ISPSDACXCQMQPOU VS'
OKCHARS1 DC    C'ABCDEFGHIJKLMNOPQRSTUVWXYZ@$#+'
OKCHARS2 DC    C'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@$# +'
         LTORG
         EJECT
         SPACE 3
********************************************************************
*                                                                  *
*        D Y N A M I C   W O R K   A R E A                         *
*                                                                  *
********************************************************************
*
WORKAREA DSECT
SAVEAREA DS    18F
PPLA     DS    7F
ANS      DS    F
ECB      DS    F
QUALDSN  DS    CL44
INVOL    DS    CL6
QUALMEM  DS    CL8
CPMEM1   DS    CL8
CPMEM2   DS    CL8
CAMLIST1 CAMLST NAME,QUALDSN,,LOCAREA
CAML1LEN EQU   *-CAMLIST1
LOCAREA  DS    0D
         DS    265C
         DS    0D
CAMLIST2 CAMLST SEARCH,QUALDSN,OBTVOL,OBTAREA
CAML2LEN EQU   *-CAMLIST2
OBTAREA  DS    0D
         DS    140C
         DS    0D
OBTVOL   DS    CL6
*
*   THESE FIELDS ARE TO BECOME THE CLIST VARIABLE FIELDS BY SAME NAME
*
FULLDSN  DS    CL54
LRECL    DS    CL5
BLKSIZE  DS    CL5
RECFM    DS    CL1
CNTLCHAR DS    CL1
DEVTYPE  DS    CL1
VOLSER   DS    CL6
DSORG    DS    CL2
ISITCAT  DS    CL3
MEMFND   DS    CL3
MEMCNTL  DS    CL3
TRKSUSED DS    CL5
EXTENTNO DS    CL2
OUTMSG   DS    CL30
*
****************************************************************
*
PROCESSW DS    CL3
GOODCALL DS    CL3
VALIDMEM DS    CL3
         DS    0D
DUBLWURD DS    D
FULLWURD DS    F
SAVEIT2  DS    F
SAVEIT3  DS    F
SAVEIT4  DS    F
SAVEIT5  DS    F
SAVEIT6  DS    F
SAVEIT7  DS    F
SAVEIT9  DS    F
SAVEIT10 DS    F
SAVEIT11 DS    F
SAVEIT13 DS    F
SAVEIT14 DS    F
SAVEIT15 DS    F
SAVEIT16 DS    F
SAVEIT17 DS    F
SAVEIT18 DS    F
SAVEIT19 DS    F
SAVEIT20 DS    F
SAVEIT21 DS    F
SAVEIT23 DS    F
SAVEIT24 DS    F
SAVEIT25 DS    F
SAVEIT26 DS    F
SAVEIT27 DS    F
SAVEIT28 DS    F
SAVEIT29 DS    F
SAVEIT30 DS    F
SAVEIT31 DS    F
SAVR1    DS    F
*
UPDTLIST DS    0F
UPDTUPT  DS    F
UPDTECT  DS    F
UPDTECB  DS    F
UPDTUPL  DS    F
*
UPLIST   DS    0F
LOCPTR   DS    AL4
LOCLEN   DS    FL4
VALPTR   DS    AL4
VALLEN   DS    FL4
*
ACCTVAL  DS    CL9
IOAREA   DS    0CL56
         DS    CL2
FNDMEMBR DS    CL8
FNDDSN   DS    CL44
INDICATR DS    CL2
FNDVOL   DS    CL6
FLSPAREA DS    0CL59
         DS    CL2
FLSPDSN  DS    CL44
FLSPVOL  DS    CL6
OUTEXTNO DS    CL2
OUTTRKNO DS    CL5
RPPL     CALL  ,(0,0),VL,MF=L
WORKLEN  EQU   *-WORKAREA
FILEINFO CSECT
         EJECT
********************************************************************
*                                                                  *
*                   P A R S E   M A C R O S                        *
*                                                                  *
********************************************************************
*
PCL      IKJPARM
DSN      IKJKEYWD DEFAULT='DSN'
         IKJNAME 'DSNAME',SUBFLD=DSNAM,ALIAS=('DATASET')
VOL      IKJKEYWD DEFAULT='VOL(999999)'
         IKJNAME 'VOLUME',SUBFLD=VOLSR,ALIAS=('VOLSER')
MEM      IKJKEYWD DEFAULT='MEM'
         IKJNAME 'MEMBER',SUBFLD=MEMBR
DSNAM    IKJSUBF
DSTRING  IKJPOSIT DSNAME,USID
VOLSR    IKJSUBF
VSTRING  IKJPOSIT DSNAME,VOLSER
MEMBR    IKJSUBF
MSTRING  IKJIDENT 'MEM NAME',MAXLNTH=13,DEFAULT='99999999',CHAR
         IKJENDP
         END
