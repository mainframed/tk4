CHKBLOCK CSECT
*
*
*        THIS PROGRAM'S PURPOSE IS TO PRINT JCL STREAMS, EXAMINING
*        THE BLOCKSIZE OF OUTPUT DATASETS TO SEE IF THE BLOCKSIZE IS
*        EFFICIENT FOR THE LRECL.  OPTIMUM BLOCKSIZES ARE COMPARED TO
*        THE SELECTED BLOCKSIZE.  IF THE SELECTED BLOCKSIZE IS WITHIN
*        ONE RECORD LENGTH OF ANY OF THE HIGHEST FOUR OPTIMUM SIZES,
*        THE DD STATEMENT IS PRINTED W/O COMMENT AND PROCESSING KEEPS
*        GOING.  IF NOT, A STATEMENT WILL BE WRITTEN PRIOR TO THE DD
*        STATEMENT SAYING WHAT IS WRONG WITH THE ORIGINAL BLOCKSIZE
*        CHOICE.  THEN  A SUGGESTED BLOCKSIZE IS GIVEN FOLLOWING THE
*        WRITING OF THE DD STATEMENT.  THIS SUGGESTED BLOCKSIZE WILL
*        BE WITHIN ONE LRECL OF THE OPTIMUM FOR FB RECORDS OR EQUAL
*        TO THE OPTIMUM IN THE CASE OF VB RECORDS.  ONE FIFTH TRACK
*        BLOCKING IS CHOSEN AS THE SMALLEST SUGGESTED BLOCKSIZE.
*        THIS IS BECAUSE THE BUFNO=5 DEFAULT WILL CAUSE A TRACK TO
*        BE READ OR WRITTEN WITH EACH PHYSICAL I/O CYCLE.  PROCESSING
*        A TRACK AT A TIME IS EFFICIENT FOR DASD AND THE CPU.  ONLY
*        3380 DEVICES AND TAPE WILL BE CONSIDERED, SINCE THAT IS WHERE
*        MOST USER DATA NOW RESIDES.
*
*        WRITTEN 4-7-86 BY HOWARD H.GLASTETTER
*
R0       EQU   0
R1       EQU   1
R2       EQU   2         WORK - ADDR SAVE AREA
R3       EQU   3         WORK - BXLE LOGIC
R4       EQU   4         *                   ALTER R4 WITH CARE
R5       EQU   5         *
R6       EQU   6         WORK AIDS SOME BXLE ROUTINES
R7       EQU   7         WORK FOR EXECUTE MOVE INSTRUCTION - LENGTH
R8       EQU   8         *                                   TO FIELD
R9       EQU   9         *                                   FROM FIELD
R10      EQU   10        SUBROUTINE LINKAGE
R11      EQU   11        WORK POINT TO DDJCLTAB
R12      EQU   12        BASE
R13      EQU   13        SYSTEM LINKAGE
R14      EQU   14
R15      EQU   15
*
BEGIN    SAVE  (14,12)       PROGRAM LINKAGE AND INITIATION
         BALR  12,0
         USING *,12
         ST    R13,REGSAVE+4
         LA    R11,REGSAVE
         ST    R11,8(R13)
         LR    R13,R11
*
         PRINT ON,NOGEN
         EJECT
         OPEN  (FILEIN,,FILEOUT,(OUTPUT))
*
         LA    R4,1                SEMI-PERMANENTLY INIALIZE R4
*
LOOP10   EQU   *                   INITIAL SEARCH FOR A DD STATEMENT
         BAL   R10,READ70
         CLC   RCRDIN(2),=C'//'    CHECK FOR NON-JCL
         BNE   LOOP10              BYPASS NON JCL
         CLI   RCRDIN+2,C'*'       CHECK FOR COMMENT
         BE    WRITE20
         LA    R3,RCRDIN+2
         LA    R5,RCRDIN+71
LOOP10A  EQU   *
         CLC   0(6,R3),=C' $;.* '  PRIOR STEP INSERTS THIS RECORD
         BE    LOOP10AA            PRINT MEM NAME AT TOP OF PAGE
         BXLE  R3,R4,LOOP10A
         LA    R3,RCRDIN+2         NOT JOB OR PROC, KEEP GOING
         B     LOOP10B
LOOP10AA EQU   *
         CP    OUTCOUNT,=P'1'      WAS THE PRIOR MEMBER WHOLLY NON JCL
         BNE   LOOP10AB            NOPE
         MVI   PRINTCHR,C' '
         MVC   RCRDOUT,PRINTCHR    BLANK THE RECORD
         MVI   PRINTCHR,C'-'       SKIP 3 FOR NEXT PRINT LINE
         MVC   RCRDOUT(38),=C'THE ABOVE MEMBER NAME CONTAINED NO JCL'
LOOP10AB EQU   *
         SP    OUTCOUNT,OUTCOUNT   CLEAR THE COUNT FIELD
         MVC   RCRDOUT,RCRDIN
         MVC   RCRDOUT(2),=C' ('
         MVC   RCRDOUT+10(32),=C') IS THE MEMBER NAME CONTAINING '
         MVC   RCRDOUT+42(28),=C'THE FOLLOWING JCL.          '
         BAL   R10,WRITE80         SKIP TO TOP OF PAGE
         MVI   PRINTCHR,C'-'       SKIP 3 FOR NEXT PRINT LINE
         B     LOOP10              GET THE NEXT RECORD
LOOP10B  EQU   *
         CLC   0(4,R3),=C' DD '    FIND A 'DD' CLUSTER
         BE    BLDTB30             THERE IT IS!
         BXLE  R3,R4,LOOP10B
*                                  FALL THRU MEANS NOT DD RECORD
WRITE20  EQU   *
         MVC   RCRDOUT,RCRDIN
         BAL   R10,WRITE90
         B     LOOP10
         EJECT
*        THIS ROUTINE BUILDS A TABLE OF RECORDS FOR A DD CLUSTER
*
BLDTB30  EQU   *
         MVC   DDJCLTAB(256),DDJCLTAB-1        INIT TABLE
         MVC   DDJCLTAB+256(256),DDJCLTAB+255  (DEBUG AID)
         MVC   DDJCLTAB+512(256),DDJCLTAB+511
         MVC   DDJCLTAB+768(256),DDJCLTAB+767
         MVC   DDJCLTAB+1024(256),DDJCLTAB+1023
         MVC   DDJCLTAB+1280(256),DDJCLTAB+1279
         MVC   DDJCLTAB+1536(64),DDJCLTAB+1535
         LA    R11,DDJCLTAB
BLDTB30A EQU   *
         LA    R3,RCRDIN+3
         LA    R5,RCRDIN+71
         CLC   RCRDIN(3),=C'//*'  CHECK FOR NON-JCL W/I DD STATEMENT
         BE    BLDTB30D           IMBEDDED COMMENTS WILL BE DROPPED
BLDTB30B EQU   *
         CLC   0(2,R3),=C', '     CONTINUATION?
         BE    BLDTB30C
         BXLE  R3,R4,BLDTB30B
         MVC   0(80,R11),RCRDIN   PUT LAST RECORD IN TABLE
         B     CKDCB40            HAVE ALL THE DD CLUSTER NOW
BLDTB30C EQU   *
         MVC   0(80,R11),RCRDIN
         LA    R11,80(R11)        BUMP TABLE ONE SLOT
BLDTB30D EQU   *
         BAL   R10,READ70
         B     BLDTB30A           PROCESS ANOTHER STATEMENT
*
*        END OF BUILD TABLE, NOW SEARCH DD CLUSTER FOR NEEDED FIELDS
         EJECT
CKDCB40  EQU   *                  FIND DCB AND UNIT INFO BY
         MVC   UNITSAVE,SPACES    SEARCHING THE COMPLETE DD
         MVC   RECFMSAV,SPACES    STATEMENT NOW ISOLATED IN
         ZAP   PACKRECL,=P'0'     THE TABLE.
         ZAP   DISKSIZE,=P'0'
         ZAP   PACKBLOK,=P'0'
         LA    R3,DDJCLTAB
         LA    R5,80(R11)         END OF LAST TABLE ELEMENT
*
CKDCB40A EQU   *                  GET OR BUILD NEEDED FIELDS
         CLC   0(5,R3),=C'UNIT='
         BE    CUNIT40C
         CLC   0(6,R3),=C'RECFM='
         BE    CRECF40D
         CLC   0(8,R3),=C'BLKSIZE='
         BE    CBLK50A
         CLC   0(6,R3),=C'LRECL='
         BE    CREC50B
*
CKDCB40B EQU   *
         BXLE  R3,R4,CKDCB40A
         B     CALC50EA            FALLTHRU SEARCH IS OVER
*
CUNIT40C EQU   *
         MVC   UNITSAVE,5(R3)      SAVE THE UNIT
         B     CKDCB40B
*
CRECF40D EQU   *
         MVC   RECFMSAV,6(R3)      SAVE RECFM TYPE
         B     CKDCB40B
         EJECT
*                                  PACK THE BLOCKSIZE ROUTINE
*
CBLK50A  EQU   *
         LA    R3,8(R3)            POINT TO BLOCKSIZE HIGH ORDER
         CLI   0(R3),C'*'          WE DON'T DO BACKREFS HERE!!!
         BE    WRTAB60             PURGE THE TABLE
         CLI   0(R3),X'50'         WE DON'T DO SYMBOLICS EITHER!!
         BE    WRTAB60             PURGE THE TABLE
         LA    R8,PACKBLOK         POINT TO BEGIN RECL
         LR    R9,R3               SAVE BEGIN ADDR
         L     R7,=F'48'           SET 'TO' FIELD (L1) TO 4 (HEX 30)
         B     CREC50C             COMMON PACK TO WORK ROUTINE
*
*                                  PACK THE LRECL ROUTINE
*
CREC50B  EQU   *
         LA    R3,6(R3)            POINT TO BEGIN RECL
         LA    R8,PACKRECL         POINT TO BEGIN RECL
         LR    R9,R3               SAVE BEGIN ADDR
         L     R7,=F'32'           SET 'TO' FIELD (L1) TO 3 (HEX 20)
CREC50C EQU   *
         CLI   0(R3),C','          IS THIS THE DELIMITER??
         BE    CALC50D
         CLI   0(R3),C')'          OR THIS?
         BE    CALC50D
         CLI   0(R3),C' '          OR THIS?
         BE    CALC50D
         LA    R7,1(R7)            UP SEND FIELD LENGTH (L2)
         BXLE  R3,R4,CREC50C
*                                  FALL THRU SHOULD NOT HAPPEN
*
CALC50D  EQU   *
         BCT   R7,*+4              DECRIMENT TO LOW ORDER CHARACTER
         EX    R7,PACK100          PACK THE RECORD LENGTH
         B     CKDCB40B            FINISH THE SEARCH
         EJECT
CALC50EA EQU   *
         CP    PACKBLOK,=P'0'        BLKSIZE IN DCB STMT?
         BE    WRTAB60               NO, PURGE THE TABLE
         CP    PACKRECL,=P'0'        LRECL IN DD STMT?
         BNE   CALC50EB              YES, KEEP GOING
         B     WRTAB60               NO, PURGE THE TABLE
CALC50EB EQU   *
         CLC   UNITSAVE,=C'SYSDA'    IS THIS A 3380 DEVICE?
         BE    CALC50G
         CLC   UNITSAVE,=C'SYSSQ'
         BE    CALC50G
         CLC   UNITSAVE(4),=C'3380'
         BE    CALC50G
         CLC   UNITSAVE(4),=C'TAPE'  OR A TAPE?
         BE    CALC50F
         B     WRTAB60               NO, PURGE THE TABLE
*
*                                    HANDLE TAPE BLOCKSIZE
*
CALC50F  EQU   *
         CP    PACKBLOK,TAPEBLOK     IS TAPE BLOCKED 32K?
         BNL   WRTAB60               YEP
         LA    R3,TAPEBLOK           BLOCKSIZE TABLE
         B     CALC50HC              GIVE EM A TAPE SUGGESTION
*
*                                    HANDLE HIGH BLOCKSIZE
*
CALC50G  EQU   *
         LA    R3,OPTTABLE           BLOCKSIZE TABLE
         LA    R5,OPTTBEND           END OF TABLE
         LA    R4,20                 INCRIMENT
         CP    PACKBLOK,0(3,R3)      BLOCKED MORE THAN 1/2 TRACK?
         BL    CALC50H               NO, CHECK FOR LOW BLOCKSIZE
         BE    WRTAB60               PURGE TABLE, IT'S EXACTLY 1/2
         MVI   MSGCOUNT,C'1'         TELL EM THEY CAN ONLY GET 1
         MVI   S,C' '                BLOCK
         MVC   PRINTREC,WARNMSG1     PER TRACK
         BAL   R10,WRITE90
         MVI   PRINTCHR,C'0'         SKIP A LINE BEFORE DD PRINT
         BAL   R10,NUBLK110          GET THE BLOCKSIZE
         MVC   MESSAGE1,=C'*-->> ABOVE BLOCKSIZE TOO HIGH, USE '
         B     WRTAB60               PURGE TABLE AND GIVE WARNING
         EJECT
*
*                                    HANDLE LOW BLOCKSIZE
*
CALC50H  EQU   *                     CHECK BLOCKSIZE TABLE
         CP    PACKBLOK,0(3,R3)      FIND CLOSEST OPTIMUM
         BL    CALC50HA
         BE    WRTAB60               YOU CAN'T DO BETTER THAN EQUAL
         B     CALC50HB
CALC50HA EQU   *
         BXLE  R3,R4,CALC50H         CHECK AGAIN
CALC50HB EQU   *                     FALL THRU AT BOTTOM OF TABLE
         SH    R3,=H'20'             GET BACK TO THE LOW BLOCK
CALC50HC EQU   *                     FALL THRU AT BOTTOM OF TABLE
         CLC   RECFMSAV,=C'VB'       VARIABLE SHOULD BE OPTIMUM
         BNE   CALC50HF
         CP    PACKBLOK,PACKRECL     IGNORE VBS
         BL    WRTAB60               BLOCK SMALLER THAN LRECL - SKIP
*
         BAL   R10,WARN120           EXPLAIN WHAT'S WRONG
*
         MVC   MESSAGE1,=C' BLOCK ABOVE RECFM=VB OPTIMALLY USE '
         UNPK  BLOKSIZE,0(3,R3)      OPT BLKSIZE IN DISPLAY AREA
         OI    BLOKSIZE+4,X'F0'      REMOVE THE SIGN, IF ANY
         B     WRTAB60               PURGE TABLE AND GIVE WARNING
CALC50HF EQU   *                     FALL THRU AT BOTTOM OF TABLE
         AP    PACKBLOK,PACKRECL     ADD A RECORD LENGTH TO BLKSIZE
         CP    PACKBLOK,0(3,R3)      IS THE CHOSEN BLOCK OPTIMUM
         BNL   WRTAB60               SEEMS SO
*
         BAL   R10,WARN120           EXPLAIN WHAT'S WRONG
*
         BAL   R10,NUBLK110          GET THE LOWEST HIGHER BLOCKSIZE
         MVC   MESSAGE1,=C'*-->> ABOVE BLOCKSIZE TOO LOW,  USE '
*                                    FALL THRU AND WRITE TABLE OUT
         EJECT
*                                    WRITE TABLE TO OUTPUT
WRTAB60  EQU   *
         CLC   MESSAGE1(8),SPACES    ANY SUGGESTIONS?
         BE    WRTAB60A              NOPE
         MVC   MESSAGE2,BLOKSIZE     MOVE EM WHILE R3 IS GOOD
         MVC   MESSAGE4,3(R3)        1/N TRACK OR MAXIMUM
         MVC   MESSAGE6,10(R3)       WHAT WILL IT SAVE
WRTAB60A EQU   *
         LA    R3,DDJCLTAB
         LA    R4,80
         LR    R5,R11                POINT TO BEGIN OF LAST RECORD
WRTAB60B EQU   *
         MVC   RCRDOUT,0(R3)
         BAL   R10,WRITE90
         BXLE  R3,R4,WRTAB60B        FALL THRU WHEN DD CLUSTER PRINTS
*
         CLC   MESSAGE1(8),SPACES    ANY SUGGESTIONS?
         BE    WRTAB60C              NOPE
         MVC   PRINTREC,MESSAGES     YEP
         BAL   R10,WRITE90
         MVI   PRINTCHR,C'-'         TRIPLE SPACE AFTER WARNING
         MVC   MESSAGE1(8),SPACES    RESET AS A SWITCH
WRTAB60C EQU   *
         LA    R4,1                  NORMAL CONTENTS OF R4
         B     LOOP10
         EJECT
*                                    S U B R O U T I N E S
READ70   EQU   *
         GET   FILEIN,RCRDIN
         MVI   RCRDIN+71,C' '        BLANK ALWAYS FOLLOWS LAST COMMA
         BR    R10
*
WRITE80  EQU   *                     CAUSE PRINT AT TOP OF PAGE
         MVI   PRINTCHR,C'1'
WRITE90  EQU   *                     WRITE JCL
         PUT   FILEOUT,PRINTREC
         AP    OUTCOUNT,=P'1'        COUNTER TO CHECK FOR NO JCL
         MVI   PRINTCHR,C' '         PRINT ALL ELSE NORMAL
         MVC   HIGHLITE,SPACES       CLEANUP
         BR    R10
*
PACK100  PACK  0(0,R8),0(0,R9)       BOTH LENGTHS IN R7
*
NUBLK110 EQU   *
         ZAP   DISKSIZE,0(3,R3)      PLACE SELECTED BLOCK IN WORK
         DP    DISKSIZE,PACKRECL
         ZAP   PBLKSIZE,DISKSIZE(5)
         MP    PBLKSIZE,PACKRECL     OPT BLKSIZE IN PACKED FORM
         UNPK  BLOKSIZE,PBLKSIZE     OPT BLKSIZE IN SAVEAREA
         OI    BLOKSIZE+4,X'F0'      REMOVE THE SIGN, IF ANY
         BR    R10
*
WARN120  EQU   *                     EXPLAIN WHAT IS WRONG
         ST    R10,TENSAVE
         CLC   UNITSAVE(4),=C'TAPE'
         BE    WARN120B
         CLI   5(R3),C'5'            AT LOWEST BLOCK?
         BNE   WARN120A              NO
         MVC   PRINTREC,WARNMSG2     TELL EM THEY ARE TOO LOW
         B     WARN120C
WARN120A EQU   *
         MVC   MSGCOUNT,5(R3)        TELL EM THEY CAN ONLY GET N
         MVI   S,C'S'                BLOCKS
         MVC   PRINTREC,WARNMSG1     PER TRACK
         B     WARN120C
WARN120B EQU   *
         MVC   PRINTREC,WARNMSG3     TELL EM TAPE SHOULD BE OPTIMUM
WARN120C EQU   *
         BAL   R10,WRITE90           WRITE WHATEVER WARNING MESSAGE
         MVI   PRINTCHR,C'0'         SKIP A LINE BEFORE DD PRINT
         L     R10,TENSAVE
         BR    R10
*
EOF130   EQU   *
         CLOSE (FILEIN,,FILEOUT)
         L     R13,REGSAVE+4
         RETURN (14,12),RC=0
         EJECT
REGSAVE  DS    9D
TENSAVE  DS    F
RECFMSAV DS    CL2
UNITSAVE DS    CL5
PACKRECL DS    PL3
PACKBLOK DS    PL4
DISKSIZE DS    PL8
BLOKSIZE DS    CL5
PBLKSIZE DS    PL8
OUTCOUNT DC    PL3'0'
TAPEBLOK DC    PL3'32760',CL7'MAXIMUM',CL10'JOB TIME  '
OPTTABLE DC    PL3'23476',CL7'1/2 TRK',CL10'DISK SPACE'
         DC    PL3'15476',CL7'1/3 TRK',CL10'DISK SPACE'
         DC    PL3'11476',CL7'1/4 TRK',CL10'DISK SPACE'
OPTTBEND DC    PL3'09076',CL7'1/5 TRK',CL10'DISK SPACE'
WARNMSG1 DS    0CL91
MESSAGEA DC    CL33'-THE BLOCKSIZE BELOW ONLY ALLOWS '
MSGCOUNT DC    C'X'
MESSAGEB DC    CL6' BLOCK'
S        DC    C'S'
MESSAGEC DC    CL31' PER TRACK AND IS WASTING SPACE'
         DC    CL19'        <--------****'
WARNMSG2 DS    0CL91
         DC    CL33'-THE BLOCKSIZE BELOW IS UNDER 1/5'
         DC    CL30' TRACK BLOCKING.  THIS CAUSES '
         DC    CL28'DASD AND CPU CYCLE OVERHEAD.'
WARNMSG3 DS    0CL91
         DC    CL34'-THE TAPE BELOW WOULD PROCESS MORE'
         DC    CL33' EFFICIENTLY IF MAXIMUM BLOCKING'
         DC    CL24' WERE USED     <-----***'
SPACES   DC    CL21' '
MESSAGES DS    0CL91
MSGCCHAR DC    C'0'                         SKIP A LINE
MESSAGE1 DC    CL36'                                    '
MESSAGE2 DC    CL5' '                       SUGGESTED BLOCK
MESSAGE3 DC    CL9' THIS IS '
MESSAGE4 DC    CL7' '                       (1/N TRK)
MESSAGE5 DC    CL23' BLOCK OPTIMUM <- SAVE '
MESSAGE6 DC    CL10' '                      SAVE ...
*
FILEIN   DCB   DSORG=PS,LRECL=80,DDNAME=FILEIN,MACRF=(GM),EODAD=EOF130
FILEOUT  DCB   DSORG=PS,LRECL=91,DDNAME=FILEOUT,MACRF=(PM)
*
RCRDIN   DS    CL80      INPUT RECORD AREA
*
PRINTREC DS    0CL91
PRINTCHR DC    C' '
RCRDOUT  DS    CL80      OUTPUT RECORD AREA
HIGHLITE DC    CL10' '
         DC    C'#'
DDJCLTAB DS    CL1600    HOLD AREA FOR 'DD' CLUSTER
         END
