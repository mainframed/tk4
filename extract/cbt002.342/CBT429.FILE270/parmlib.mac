./ ADD NAME=ANTIFIND 0111-82173-82173-1632-00001-00027-00001-JS02150
OPTION RESTORE ANTIFIND
./ ADD NAME=BANNTBLE 0102-84356-84356-1527-00095-00095-00000-GD02150

÷   ÷÷    ÷÷÷÷÷÷ ÷÷    ÷÷÷÷      ÷÷      ÷÷    ÷÷ ÷÷÷÷÷÷    ÷÷
.                                                ..      ..
<      <<    <<    <<    <<      <<        <<        <<        <<
(      ((     ((     ((     ((      ((       ((       ((       ((
+           ++      ++   ++++++++++++++++   ++      ++
◊   ◊◊      ◊◊      ◊◊      ◊◊      ◊◊      ◊◊      ◊◊      ◊◊
&  &&&    && &&   && &&    &&&    &&&& &&&&  &&& &&  &&&  &&&& &&
!   !!      !!      !!      !!      !!      !!              !!
$   $$    $$$$$$ $$ $$ $$$$$$$      $$$$$$$ $$ $$ $$$$$$    $$
*
)))       ))       ))       ))      ))     ))     ))     ))
;                 ..      ..              ,,      ,,     ,
^                        ^^^^^^^^       ^^
-                        --------
/      //     //     //     //     //     //     //
|   ||      ||      ||                      ||      ||      ||
,                                         ,,      ,,     ,
%%%%    %%%%   %%     %%     %%     %%     %%     %%  %%%%%   %%%
_                                                        ________
>>>        >>        >>        >>      >>    >>    >>    >>
?  ????   ??  ??      ??     ??     ??      ??              ??
`
:                 ..      ..              ..      ..
# ##  ##  ##  ## ######## ##  ##  ##  ## ######## ##  ##  ##  ##
@ @@@@@@ @@    @@@@ @@ @@@@ @@ @@@@ @@@@@@@       @@@@@@
'     '''      ''     '
=                ================
""""  """ ""   """    "
a AAAAAA AA    AAAA    AAAAAAAAAAAA    AAAA    AAAA    AAAA    AA
bBBBBBBB BB    BBBB    BBBBBBBBB BB    BBBB    BBBB    BBBBBBBBB
c CCCCCC CC    CCCC      CC      CC      CC      CC    CC CCCCCC
dDDDDDDD DD    DDDD    DDDD    DDDD    DDDD    DDDD    DDDDDDDDD
eEEEEEEEEEE      EE      EEEEE   EE      EE      EE      EEEEEEEE
fFFFFFFFFFF      FF      FFFF    FF      FF      FF      FF
g GGGGGG GG    GGGG      GG      GG   GGGGG    GGGG    GG GGGGGG
hHH    HHHH    HHHH    HHHHHHHHHHHH    HHHH    HHHH    HHHH    HH
iIIIIIIII   II      II      II      II      II      II   IIIIIIII
j      JJ      JJ      JJ      JJ      JJ      JJJJ    JJ JJJJJJ
kKK   KK KK  KK  KK KK   KKKK    KK KK   KK  KK  KK   KK KK    KK
lLL      LL      LL      LL      LL      LL      LL      LLLLLLLL
mM      MMM    MMMMM  MMMMMMMMMMMMM MM MMMM    MMMM    MMMM    MM
nNN    NNNNN   NNNNNN  NNNN NN NNNN  NNNNNN   NNNNN    NNNN     N
o OOOOOO OO    OOOO    OOOO    OOOO    OOOO    OOOO    OO OOOOOO
pPPPPPPP PP    PPPP    PPPPPPPPP PP      PP      PP      PP
q QQQQQQ QQ    QQQQ    QQQQ    QQQQ    QQQQ QQ QQQQ  QQQQ QQQQQQ
rRRRRRRR RR    RRRR    RRRRRRRRR RR RR   RR  RR  RR   RR RR    RR
~
s SSSSSS SS    SSSS       SSS        SSS       SSSS    SS SSSSSS
tTTTTTTTT   TT      TT      TT      TT      TT      TT      TT
uUU    UUUU    UUUU    UUUU    UUUU    UUUU    UUUU    UU UUUUUU
vVV    VVVV    VVVV    VVVV    VVVV    VVVV    VV VV  VV    VV
wWW    WWWW    WWWW    WWWW WW WWWWWWWWWWWWW  WWWWW    WWW      W
xXX    XXXX    XX XX  XX   XXXX    XXXX   XX  XX XX    XXXX    XX
yYY    YYYY    YY YY  YY   YYYY     YY      YY      YY      YY
zZZZZZZZZ     ZZ     ZZ    ZZZZZ    ZZ     ZZ     ZZ     ZZZZZZZZ
{  {{{{{{  {{      {{     {{      {{       {{      {{      {{{{{{
A AAAAAA AA    AAAA    AAAAAAAAAAAA    AAAA    AAAA    AAAA    AA
BBBBBBBB BB    BBBB    BBBBBBBBB BB    BBBB    BBBB    BBBBBBBBB
C CCCCCC CC    CCCC      CC      CC      CC      CC    CC CCCCCC
DDDDDDDD DD    DDDD    DDDD    DDDD    DDDD    DDDD    DDDDDDDDD
EEEEEEEEEEE      EE      EEEEE   EE      EE      EE      EEEEEEEE
FFFFFFFFFFF      FF      FFFF    FF      FF      FF      FF
G GGGGGG GG    GGGG      GG      GG   GGGGG    GGGG    GG GGGGGG
HHH    HHHH    HHHH    HHHHHHHHHHHH    HHHH    HHHH    HHHH    HH
IIIIIIIII   II      II      II      II      II      II   IIIIIIII
}}}}}}       }}      }}       }}      }}     }}      }}  }}}}}}
J      JJ      JJ      JJ      JJ      JJ      JJJJ    JJ JJJJJJ
KKK   KK KK  KK  KK KK   KKKK    KK KK   KK  KK  KK   KK KK    KK
LLL      LL      LL      LL      LL      LL      LL      LLLLLLLL
MM      MMM    MMMMM  MMMMMMMMMMMMM MM MMMM    MMMM    MMMM    MM
NNN    NNNNN   NNNNNN  NNNN NN NNNN  NNNNNN   NNNNN    NNNN     N
O OOOOOO OO    OOOO    OOOO    OOOO    OOOO    OOOO    OO OOOOOO
PPPPPPPP PP    PPPP    PPPPPPPPP PP      PP      PP      PP
Q QQQQQQ QQ    QQQQ    QQQQ    QQQQ    QQQQ QQ QQQQ  QQQQ QQQQQQ
RRRRRRRR RR    RRRR    RRRRRRRRR RR RR   RR  RR  RR   RR RR    RR
\\\       \\       \\       \\       \\       \\
S SSSSSS SS    SSSS       SSS        SSS       SSSS    SS SSSSSS
TTTTTTTTT   TT      TT      TT      TT      TT      TT      TT
UUU    UUUU    UUUU    UUUU    UUUU    UUUU    UUUU    UU UUUUUU
VVV    VVVV    VVVV    VVVV    VVVV    VVVV    VV VV  VV    VV
WWW    WWWW    WWWW    WWWW WW WWWWWWWWWWWWW  WWWWW    WWW      W
XXX    XXXX    XX XX  XX   XXXX    XXXX   XX  XX XX    XXXX    XX
YYY    YYYY    YY YY  YY   YYYY     YY      YY      YY      YY
ZZZZZZZZZ     ZZ     ZZ    ZZZZZ    ZZ     ZZ     ZZ     ZZZZZZZZ
0  0000   00  00  00  00  00  00  00  00  00  00  00  00   0000
1    1     111      11      11      11      11      11    111111
2  2222   22  22      22     22     22     22     22      222222
3 333333     33     33    3333       33      33  33  33   3333
4   44     44     44 44   444444     44      44      44      44
5 555555  55      55555   5   55      55      55  55  55   5555
6   66     66     66      66      66666   66  66  66  66   6666
7 777777     77     77     77     77      77      77      77
8  8888   88  88   8888   88  88  88  88  88  88  88  88   8888
9  9999   99  99  99  99   99999      99     99     99     99
./ ADD NAME=BAN2TBLE                               17OCT89 12.48.04

÷   ÷÷    ÷÷÷÷÷÷ ÷÷       ÷÷÷÷÷÷    ÷÷
.                        ..      ..
<    <<     <<     <<       <<       <<
(     ((     ((      ((      ((       ((
+   ++      ++   ++++++++   ++      ++
◊   ◊◊      ◊◊      ◊◊      ◊◊      ◊◊
&  &&&    && &&   &&&& &&&&  &&&  &&&& &&
!   !!      !!      !!              !!
$  $$$    $$  $     $     $  $$    $$$
*
) ))       ))      ))      ))     ))
;         ..              ,,     ,
^                ^^^^^^^^      ^^
-                --------
/  //       //       //       //       //
|   ||      ||              ||      ||
,                 ,,      ,,     ,
% %%  %%     %%     %%     %%     %%  %%
_                                ________
>  >>       >>       >>     >>      >>
?  ????   ?   ??     ??             ??
`
: ..      ..              ..      ..
# ##  ## ######## ##  ## ######## ##  ##
@ @@@@@@ @@ @  @@@@ @@@@@@@       @@@@@@
'     '''      ''     '
=                ================
""""  """ ""   """    "
a AAAAAA AA    AAAAAAAAAAAA    AAAA    AA
bBBBBBBB BB    BBBBBBBBB BB    BBBBBBBBB
c CCCCCC CC    CCCC      CC    CC CCCCCC
dDDDDDDD DD    DDDD    DDDD    DDDDDDDDD
eEEEEEEEEEE      EEEE    EE      EEEEEEEE
fFFFFFFFFFF      FFFF    FF      FF
g GGGGGG GG      GG   GGGGG    GG GGGGGG
hHH    HHHH    HHHHHHHHHHHH    HHHH    HH
iIIIIIIII   II      II      II   IIIIIIII
j      JJ      JJ      JJJJ    JJ JJJJJJ
kKK  KK  KK KK   KKKK    KK KK   KK  KK
lLL      LL      LL      LL      LLLLLLLL
mMM    MMMMM  MMMMMMMMMMMMM MM MMMM    MM
nNNN   NNNNNN  NNNN NN NNNN  NNNNNN   NNN
o OOOOOO OO    OOOO    OOOO    OO OOOOOO
pPPPPPPP PP    PPPPPPPPP PP      PP
q QQQQQQ QQ    QQQQ QQ QQQQ  QQQQ QQQQQQQ
rRRRRRRR RR    RRRRRRRRR RR   RR RR    RR
~
s SSSSSS SSS    S  SSSS  S    SSS SSSSSS
tTTTTTTTT   TT      TT      TT      TT
uUU    UUUU    UUUU    UUUU    UU UUUUUU
vVV    VVVV    VVVV    VV VV  VV    VV
wWW    WWWW WW WWWWWWWWWWWWW  WWWWW    WW
xXX    XX XX  XX   XXXX   XX  XX XX    XX
yYY    YY YY  YY   YYYY     YY      YY
zZZZZZZZZ     ZZ    ZZ    ZZ     ZZZZZZZZ
{  {{{{{{  {{     {{       {{      {{{{{{
A AAAAAA AA    AAAAAAAAAAAA    AAAA    AA
BBBBBBBB BB    BBBBBBBBB BB    BBBBBBBBB
C CCCCCC CC    CCCC      CC    CC CCCCCC
DDDDDDDD DD    DDDD    DDDD    DDDDDDDDD
EEEEEEEEEEE      EEEE    EE      EEEEEEEE
FFFFFFFFFFF      FFFF    FF      FF
G GGGGGG GG      GG   GGGGG    GG GGGGGG
HHH    HHHH    HHHHHHHHHHHH    HHHH    HH
IIIIIIIII   II      II      II   IIIIIIII
}}}}}}}      }}       }}     }}  }}}}}}
J      JJ      JJ      JJJJ    JJ JJJJJJ
KKK  KK  KK KK   KKKK    KK KK   KK  KK
LLL      LL      LL      LL      LLLLLLLL
MMM    MMMMM  MMMMMMMMMMMMM MM MMMM    MM
NNNN   NNNNNN  NNNN NN NNNN  NNNNNN   NNN
O OOOOOO OO    OOOO    OOOO    OO OOOOOO
PPPPPPPP PP    PPPPPPPPP PP      PP
Q QQQQQQ QQ    QQQQ QQ QQQQ  QQQQ QQQQQQQ
RRRRRRRR RR    RRRRRRRRR RR   RR RR    RR
\\\       \\       \\       \\       \\
S SSSSSS SSS    S  SSSS  S    SSS SSSSSS
TTTTTTTTT   TT      TT      TT      TT
UUU    UUUU    UUUU    UUUU    UU UUUUUU
VVV    VVVV    VVVV    VV VV  VV    VV
WWW    WWWW WW WWWWWWWWWWWWW  WWWWW    WW
XXX    XX XX  XX   XXXX   XX  XX XX    XX
YYY    YY YY  YY   YYYY     YY      YY
ZZZZZZZZZ     ZZ    ZZ    ZZ     ZZZZZZZZ
0  0000   00  00  00  00  00  00   0000
1    1     111      11      11    111111
2  2222   22  22     22     22    222222
3 3333   33  33     33   33  33   3333
4  4444   44 44  4444444     44      44
5 555555  55        555   55  55   5555
6  66     66      66666   66  66   6666
7 777777     77     77     77     77
8  8888   88  88   8888   88  88   8888
9  9999   99  99   99999      99     99
./ ADD NAME=BAN3TBLE                               17OCT89 12.48.04

÷   OO    OOOOOO OO       OOOOOO    OO
.                        OO      OO
<    OO     OO     OO       OO       OO
(     OO     OO      OO      OO       OO
+   OO      OO   OOOOOOOO   OO      OO
◊   OO      OO      OO      OO      OO
&  OOO    OO OO   OOOO OOOO  OOO  OOOO OO
!   OO      OO      OO              OO
$  OOO    OO  O     O     O  OO    OOO
*
) OO       OO      OO      OO     OO
;         OO              OO     O
^                OOOOOOOO      OO
-                OOOOOOOO
/  OO       OO       OO       OO       OO
|   OO      OO              OO      OO
,                 OO      OO     O
% OO  OO     OO     OO     OO     OO  OO
_                                OOOOOOOO
>  OO       OO       OO     OO      OO
?  OOOO   O   OO     OO             OO
`
: OO      OO              OO      OO
# OO  OO OOOOOOOO OO  OO OOOOOOOO OO  OO
@ OOOOOO OO O  OOOO OOOOOOO       OOOOOO
'     OOO      OO     O
=                OOOOOOOOOOOOOOOO
"OOO  OOO OO   OOO    O
a OOOOOO OO    OOOOOOOOOOOO    OOOO    OO
bOOOOOOO OO    OOOOOOOOO OO    OOOOOOOOO
c OOOOOO OO    OOOO      OO    OO OOOOOO
dOOOOOOO OO    OOOO    OOOO    OOOOOOOOO
eOOOOOOOOOO      OOOO    OO      OOOOOOOO
fOOOOOOOOOO      OOOO    OO      OO
g OOOOOO OO      OO   OOOOO    OO OOOOOO
hOO    OOOO    OOOOOOOOOOOO    OOOO    OO
iOOOOOOOO   OO      OO      OO   OOOOOOOO
j      OO      OO      OOOO    OO OOOOOO
kOO  OO  OO OO   OOOO    OO OO   OO  OO
lOO      OO      OO      OO      OOOOOOOO
mOO    OOOOO  OOOOOOOOOOOOO OO OOOO    OO
nOOO   OOOOOO  OOOO OO OOOO  OOOOOO   OOO
o OOOOOO OO    OOOO    OOOO    OO OOOOOO
pOOOOOOO OO    OOOOOOOOO OO      OO
q OOOOOO OO    OOOO OO OOOO  OOOO OOOOOOO
rOOOOOOO OO    OOOOOOOOO OO   OO OO    OO
~
s OOOOOO OOO    O  OOOO  O    OOO OOOOOO
tOOOOOOOO   OO      OO      OO      OO
uOO    OOOO    OOOO    OOOO    OO OOOOOO
vOO    OOOO    OOOO    OO OO  OO    OO
wOO    OOOO OO OOOOOOOOOOOOO  OOOOO    OO
xOO    OO OO  OO   OOOO   OO  OO OO    OO
yOO    OO OO  OO   OOOO     OO      OO
zOOOOOOOO     OO    OO    OO     OOOOOOOO
{  OOOOOO  OO     OO       OO      OOOOOO
A OOOOOO OO    OOOOOOOOOOOO    OOOO    OO
BOOOOOOO OO    OOOOOOOOO OO    OOOOOOOOO
C OOOOOO OO    OOOO      OO    OO OOOOOO
DOOOOOOO OO    OOOO    OOOO    OOOOOOOOO
EOOOOOOOOOO      OOOO    OO      OOOOOOOO
FOOOOOOOOOO      OOOO    OO      OO
G OOOOOO OO      OO   OOOOO    OO OOOOOO
HOO    OOOO    OOOOOOOOOOOO    OOOO    OO
IOOOOOOOO   OO      OO      OO   OOOOOOOO
}OOOOOO      OO       OO     OO  OOOOOO
J      OO      OO      OOOO    OO OOOOOO
KOO  OO  OO OO   OOOO    OO OO   OO  OO
LOO      OO      OO      OO      OOOOOOOO
MOO    OOOOO  OOOOOOOOOOOOO OO OOOO    OO
NOOO   OOOOOO  OOOO OO OOOO  OOOOOO   OOO
O OOOOOO OO    OOOO    OOOO    OO OOOOOO
POOOOOOO OO    OOOOOOOOO OO      OO
Q OOOOOO OO    OOOO OO OOOO  OOOO OOOOOOO
ROOOOOOO OO    OOOOOOOOO OO   OO OO    OO
\OO       OO       OO       OO       OO
S OOOOOO OOO    O  OOOO  O    OOO OOOOOO
TOOOOOOOO   OO      OO      OO      OO
UOO    OOOO    OOOO    OOOO    OO OOOOOO
VOO    OOOO    OOOO    OO OO  OO    OO
WOO    OOOO OO OOOOOOOOOOOOO  OOOOO    OO
XOO    OO OO  OO   OOOO   OO  OO OO    OO
YOO    OO OO  OO   OOOO     OO      OO
ZOOOOOOOO     OO    OO    OO     OOOOOOOO
0  OOOO   OO  OO  OO  OO  OO  OO   OOOO
1    O     OOO      OO      OO    OOOOOO
2  OOOO   OO  OO     OO     OO    OOOOOO
3 OOOO   OO  OO     OO   OO  OO   OOOO
4  OOOO   OO OO  OOOOOOO     OO      OO
5 OOOOOO  OO        OOO   OO  OO   OOOO
6  OO     OO      OOOOO   OO  OO   OOOO
7 OOOOOO     OO     OO     OO     OO
8  OOOO   OO  OO   OOOO   OO  OO   OOOO
9  OOOO   OO  OO   OOOOO      OO     OO
./ ADD NAME=BAN4TBLE 0103-84356-84356-1525-00095-00095-00000-GD02150

÷   OO    OOOOOO OO    OOOO      OO      OO    OO OOOOOO    OO
.                                                OO      OO
<      OO    OO    OO    OO      OO        OO        OO        OO
(      OO     OO     OO     OO      OO       OO       OO       OO
+           OO      OO   OOOOOOOOOOOOOOOO   OO      OO
◊   OO      OO      OO      OO      OO      OO      OO      OO
&  OOO    OO OO   OO OO    OOO    OOOO OOOO  OOO OO  OOO  OOOO OO
!   OO      OO      OO      OO      OO      OO              OO
$   OO    OOOOOO OO OO OOOOOOO      OOOOOOO OO OO OOOOOO    OO
*
)OO       OO       OO       OO      OO     OO     OO     OO
;                 OO      OO              OO      OO     O
^                        OOOOOOOO      OO
-                        OOOOOOOO
/      OO     OO     OO     OO     OO     OO     OO
|   OO      OO      OO                      OO      OO      OO
,                                         OO      OO     O
%OOO    OOOO   OO     OO     OO     OO     OO     OO  OOOOO   OOO
_                                                        OOOOOOOO
>OO        OO        OO        OO      OO    OO    OO    OO
?  OOOO   OO  OO      OO     OO     OO      OO              OO
`
:                 OO      OO              OO      OO
# OO  OO  OO  OO OOOOOOOO OO  OO  OO  OO OOOOOOOO OO  OO  OO  OO
@ OOOOOO OO    OOOO OO OOOO OO OOOO OOOOOOO       OOOOOO
'     OOO      OO     O
=                OOOOOOOOOOOOOOOO
"OOO  OOO OO   OOO    O
a OOOOOO OO    OOOO    OOOOOOOOOOOO    OOOO    OOOO    OOOO    OO
bOOOOOOO OO    OOOO    OOOOOOOOO OO    OOOO    OOOO    OOOOOOOOO
c OOOOOO OO    OOOO      OO      OO      OO      OO    OO OOOOOO
dOOOOOOO OO    OOOO    OOOO    OOOO    OOOO    OOOO    OOOOOOOOO
eOOOOOOOOOO      OO      OOOOO   OO      OO      OO      OOOOOOOO
fOOOOOOOOOO      OO      OOOO    OO      OO      OO      OO
g OOOOOO OO    OOOO      OO      OO   OOOOO    OOOO    OO OOOOOO
hOO    OOOO    OOOO    OOOOOOOOOOOO    OOOO    OOOO    OOOO    OO
iOOOOOOOO   OO      OO      OO      OO      OO      OO   OOOOOOOO
j      OO      OO      OO      OO      OO      OOOO    OO OOOOOO
kOO   OO OO  OO  OO OO   OOOO    OO OO   OO  OO  OO   OO OO    OO
lOO      OO      OO      OO      OO      OO      OO      OOOOOOOO
mO      OOO    OOOOO  OOOOOOOOOOOOO OO OOOO    OOOO    OOOO    OO
nOO    OOOOO   OOOOOO  OOOO OO OOOO  OOOOOO   OOOOO    OOOO     O
o OOOOOO OO    OOOO    OOOO    OOOO    OOOO    OOOO    OO OOOOOO
pOOOOOOO OO    OOOO    OOOOOOOOO OO      OO      OO      OO
q OOOOOO OO    OOOO    OOOO    OOOO    OOOO OO OOOO  OOOO OOOOOO
rOOOOOOO OO    OOOO    OOOOOOOOO OO OO   OO  OO  OO   OO OO    OO
~
s OOOOOO OO    OOOO       OOO        OOO       OOOO    OO OOOOOO
tOOOOOOOO   OO      OO      OO      OO      OO      OO      OO
uOO    OOOO    OOOO    OOOO    OOOO    OOOO    OOOO    OO OOOOOO
vOO    OOOO    OOOO    OOOO    OOOO    OOOO    OO OO  OO    OO
wOO    OOOO    OOOO    OOOO OO OOOOOOOOOOOOO  OOOOO    OOO      O
xOO    OOOO    OO OO  OO   OOOO    OOOO   OO  OO OO    OOOO    OO
yOO    OOOO    OO OO  OO   OOOO     OO      OO      OO      OO
zOOOOOOOO     OO     OO    OOOOO    OO     OO     OO     OOOOOOOO
{  OOOOOO  OO      OO     OO      OO       OO      OO      OOOOOO
A OOOOOO OO    OOOO    OOOOOOOOOOOO    OOOO    OOOO    OOOO    OO
BOOOOOOO OO    OOOO    OOOOOOOOO OO    OOOO    OOOO    OOOOOOOOO
C OOOOOO OO    OOOO      OO      OO      OO      OO    OO OOOOOO
DOOOOOOO OO    OOOO    OOOO    OOOO    OOOO    OOOO    OOOOOOOOO
EOOOOOOOOOO      OO      OOOOO   OO      OO      OO      OOOOOOOO
FOOOOOOOOOO      OO      OOOO    OO      OO      OO      OO
G OOOOOO OO    OOOO      OO      OO   OOOOO    OOOO    OO OOOOOO
HOO    OOOO    OOOO    OOOOOOOOOOOO    OOOO    OOOO    OOOO    OO
IOOOOOOOO   OO      OO      OO      OO      OO      OO   OOOOOOOO
}OOOOO       OO      OO       OO      OO     OO      OO  OOOOOO
J      OO      OO      OO      OO      OO      OOOO    OO OOOOOO
KOO   OO OO  OO  OO OO   OOOO    OO OO   OO  OO  OO   OO OO    OO
LOO      OO      OO      OO      OO      OO      OO      OOOOOOOO
MO      OOO    OOOOO  OOOOOOOOOOOOO OO OOOO    OOOO    OOOO    OO
NOO    OOOOO   OOOOOO  OOOO OO OOOO  OOOOOO   OOOOO    OOOO     O
O OOOOOO OO    OOOO    OOOO    OOOO    OOOO    OOOO    OO OOOOOO
POOOOOOO OO    OOOO    OOOOOOOOO OO      OO      OO      OO
Q OOOOOO OO    OOOO    OOOO    OOOO    OOOO OO OOOO  OOOO OOOOOO
ROOOOOOO OO    OOOO    OOOOOOOOO OO OO   OO  OO  OO   OO OO    OO
\OO       OO       OO       OO       OO       OO
S OOOOOO OO    OOOO       OOO        OOO       OOOO    OO OOOOOO
TOOOOOOOO   OO      OO      OO      OO      OO      OO      OO
UOO    OOOO    OOOO    OOOO    OOOO    OOOO    OOOO    OO OOOOOO
VOO    OOOO    OOOO    OOOO    OOOO    OOOO    OO OO  OO    OO
WOO    OOOO    OOOO    OOOO OO OOOOOOOOOOOOO  OOOOO    OOO      O
XOO    OOOO    OO OO  OO   OOOO    OOOO   OO  OO OO    OOOO    OO
YOO    OOOO    OO OO  OO   OOOO     OO      OO      OO      OO
ZOOOOOOOO     OO     OO    OOOOO    OO     OO     OO     OOOOOOOO
0  OOOO   OO  OO  OO  OO  OO  OO  OO  OO  OO  OO  OO  OO   OOOO
1    O     OOO      OO      OO      OO      OO      OO    OOOOOO
2  OOOO   OO  OO      OO     OO     OO     OO     OO      OOOOOO
3 OOOOOO     OO     OO    OOOO       OO      OO  OO  OO   OOOO
4   OO     OO     OO OO   OOOOOO     OO      OO      OO      OO
5 OOOOOO  OO      OOOOO   O   OO      OO      OO  OO  OO   OOOO
6   OO     OO     OO      OO      OOOOO   OO  OO  OO  OO   OOOO
7 OOOOOO     OO     OO     OO     OO      OO      OO      OO
8  OOOO   OO  OO   OOOO   OO  OO  OO  OO  OO  OO  OO  OO   OOOO
9  OOOO   OO  OO  OO  OO   OOOOO      OO     OO     OO     OO
./ ADD NAME=CICSTATS 0112-85108-85262-0918-00079-00063-00079-JS02150
 FILE FILEIN FB 124
  SMF64TME     4           (END'TIME)
  SMF64DTE     4 PD
  SMF64JBN     8           (JOB NAME)
  JOBPRFIX     3 9
  CICS_REGION  1 12
  SMF64RST     4 17
  FILLER       1
  SMF64RSD     3 PD        (JOB'DATE)
  SMF64DNM     44          (VSAM DSN)
  SMF64NLR     4 BI Z      (RECORD'TOTAL)
  SMF64NFS     4 BI Z      (BYTES'NOT'USED)
  FILLER       2
  SMF64NCS     2 BI Z      (TOT'CI'SPLT)
  FILLER       2
  SMF64NAS     2 BI Z      (TOT'CA'SPLT)
  SMF64DDE     4 BI Z      (REC'DEL)
  SMF64DIN     4 BI Z      (REC'INS)
  SMF64DUP     4 BI Z      (REC'UPD)
  SMF64DRE     4 BI Z      (REC'READ)
  SMF64DFS     4 BI
  FILLER       2
  SMF64DCS     2 BI Z      (JOB'CI'SPLITS)
  FILLER       2
  SMF64DAS     2 BI Z      (JOB'CA'SPLITS)
  FILLER       1
  SMF64DEP     3 BI Z      (JOB'EXCPS)
  FILLER       1 BI
  SMF64XTN     1 BI Z      (EX'TNS)
  SMF64VSR     6           (VOLSER)
WORKAREA
  PARMHOLD     7
  PREFIX1      3  1
  PREFIX1A     1  4
  PREFIX2      3  4
  PREFIX2A     1  7
*                    PARMS COULD BE  AAACIC  (AGENCY & ALL CICS)
*                                    AAACICX (AGENCY & SPECIFIC CICS)
*                                    CIC     (ALL CICS)
*                                    CICX    (SPECIFIC CICS)
  NONREAD      4  BI  Z  (UPDATES'INSERTS'DELETES)
  KILOWASTE    4  BI  Z  (UNUSED'KILO'BYTES)
  IF SMF64DEP GT 20 GOTO SORTEM ELSE REJECT ENDIF
SORTEM:
  MOVE DYLPARM TO PARMHOLD
  SORT FILEIN USING SMF64JBN SMF64DEP D
  IF JOBPRFIX NE 'CIC' REJECT ENDIF
  IF PREFIX1 NE 'CIC' GOTO CHK2 ENDIF
  IF PREFIX1A EQ ' ' GOTO DOIT ENDIF
  IF PREFIX1A EQ CICS_REGION GOTO DOIT ELSE REJECT ENDIF
CHK2:
  IF PREFIX2A EQ ' ' GOTO DOIT ENDIF
  IF PREFIX2A EQ CICS_REGION GOTO DOIT ELSE REJECT ENDIF
DOIT:
   NONREAD = SMF64DDE + SMF64DIN + SMF64DUP
   KILOWASTE = SMF64NFS / 1000
  REPORT 150 WIDE
  CONTROL SMF64JBN
  LIST SUPPRESS SMF64JBN SUPPRESS SMF64RSD
   SMF64DEP
   SMF64NLR
   SMF64DNM
   SMF64VSR
   SMF64DRE
   NONREAD
   SMF64NCS
   SMF64NAS
   SMF64XTN
   SMF64TME
   KILOWASTE WITH 1 BEFORE
  ON CHANGE SMF64JBN
  LIST 'TOTALS' AT SMF64JBN SUM SMF64DEP
                            SUM SMF64DRE
                            SUM NONREAD
                            WITH 2 BEFORE AND WITH EJECT AFTER
 T1 'VSAM ACTIVITY BY CICS REGION'
 T1+5 DYLDATE
 T1+125 DYLPAGE
 T2 ' '
./ ADD NAME=DIAL21   0101-80179-80183-0824-00001-00002-00001-JS02150
DUMMY
./ ADD NAME=DIAL22   0101-80179-80183-0825-00001-00002-00001-JS02150
DUMMY
./ ADD NAME=DIAL26   0101-80175-80183-0824-00001-00002-00001-JS02150
DUMMY
./ ADD NAME=DIAL7    0100-80183-80183-0825-00001-00001-00000-JS02150
DUMMY
./ ADD NAME=DLFR901A 0100-84061-84061-1121-00001-00001-00000-JS02150
 VERIFY FILE(VRFY1)
./ ADD NAME=DLFR901B 0100-84061-84061-1122-00001-00001-00000-JS02150
 VERIFY FILE(VRFY2)
./ ADD NAME=DLFR904  0100-84061-84061-1345-00008-00008-00000-JS02150
C          00080
FA
FJ             R
D     3  A1                   EQ3  V.IM                 REJ
D     3  A1                   EQ3  VX'4B8994'           REJ
D     3  A1                   EQ3  VX'4BC994'           REJ
D     3  A1                   EQ3  VX'4B89D4'           REJ
D     80 A1                     80 R1                   OUTOUT
./ ADD NAME=DLFR905  0101-84061-84069-1059-00002-00002-00000-JS02150
   AUTH 1
   SCRIPT FROM(INGO) (FILE(FRMTOUT)) TWOPASS
./ ADD NAME=DLF2DOC1 0100-85015-85015-1649-00049-00049-00000-GD02150
************************************************************************
*    PROGRAM PURPOSE: DISECT RECORD, WRITING OUT 80 BYTE CHUNCKS
************************************************************************
OPTION STRUCTURED
FILE INFILE VB 255 LENGTH INLEN        ;INPUT FILE, VARIABLE BLOCKED 255
   INCHAR 1
FILE OUTFILE OUTPUT FROM OUTFILE FB 80 ;OUTPUT FILE, FIXED BLOCKED 80
   OUTCHAR 1
   OUTREC 80 1
WORKAREA
   LEN1       3 NU          ;LENGTH OF CHUNK OF INPUT RECORD BEING WRITT
   LEN2       3 NU                 ;LENGTH OF REMAINING INPUT RECORD
   SEVENTYTWO 3 NU VALUE 72 REINIT ;DISPLACEMENT OF 72 FROM INDEX START
***********************************************************************
*    NEXT RECORD READ HERE BY DYL280
***********************************************************************
LEN2 = INLEN      ;INITIALIZE LENGTH OF REMAINING INPUT RECORD TO FULL L
INW = 0           ;INITIALIZE PARSE POINT IN INPUT RECORD
DOWHILE LEN2 GT 0  ;ANYTHING LEFT TO OUTPUT?
   INX = INW       ;INITIALIZE PARSE POINT IN INPUT RECORD
   DYLCOUNT1 = 0   ;INITIALIZE CHUNK LENGTH ACCUMULATOR
************************************************************************
*           REST OF INPUT RECORD FIT IN 72?
************************************************************************
   IF LEN2 LE 72
      LEN1 = LEN2          ;SET CHUNK LENGTH TO REMAINING RECORD LENGTH
************************************************************************
*           NO? THEN SET CHUNK LENGTH TO 72 OR LOCATION OF LAST BLANK
************************************************************************
   ELSE
      LEN1 = 72                      ;SET CHUNK LENGTH TO 72
      DOWHILE INX LT SEVENTYTWO      ;LOOK FOR BLANK CLOSEST TO 72
         DYLCOUNT1 = DYLCOUNT1 + 1   ;ACCUMULATE LENGTH OF CHUNK TO BE M
         IF INCHAR (INX) EQ SPACE    ;BLANK POSITION?
            LEN1 = DYLCOUNT1         ;SET CHUNK LENGTH TO ACCUMLATOR
            ENDIF
         INX = INX + 1
         ENDDO
      ENDIF
************************************************************************
*           WRITE OUT THE CHUNK
************************************************************************
   MOVE INCHAR (INW) LENGTH LEN1 TO OUTCHAR ;MOVE CHUNK TO OUTPUT
   WRITE OUTFILE                            ;WRITE OUTPUT
   MOVE SPACE TO OUTREC                     ;CLEAR OUTPUT BUFFER
   INW = INW + LEN1      ;INCREMENT PARSE POINT BY LENGTH OF CHUNCK WRIT
   LEN2 = INLEN - INW    ;DECREMENT REMAINING RECORD LENGTH BY CHUNK MOV
   SEVENTYTWO = INW + 72 ;COMPUTE OFFSET FOR NEXT 72 BYTE CHUNK
   ENDDO
./ ADD NAME=DLF2DOC3 0106-86013-86013-1456-00023-00022-00000-GD02150
OPTION STRUCTURED
FILE INFILE LENGTH INLEN
   SCRIPTAG  11  10
   ENDTAG     8  7
   GOODREC   79  8
FILE OUTFILE OUTPUT FROM OUTFILE FB 80
   FILLER     1  1 VALUE ' '
   OUTREC    79  2
READ INFILE
DOWHILE SCRIPTAG NE 'SCRIPT FROM'
   MOVE SPACE TO INFILE LENGTH 256
   READ INFILE
   ENDDO
MOVE SPACE TO INFILE LENGTH 256
READ INFILE
DOWHILE ENDTAG NE 'DSMEXC09'
   MOVE SPACE TO OUTREC
   MOVE GOODREC TO OUTREC LENGTH INLEN
   WRITE OUTFILE
   MOVE SPACE TO INFILE LENGTH 256
   READ INFILE
   ENDDO
STOP
./ ADD NAME=DSNSTATS 0108-85108-88270-1309-00072-00067-00016-HG00155
 FILE FILEIN FB 124
  SMF64TME     4           (STEP'END)
  SMF64DTE     4 PD
  SMF64JBN     8           (JOB NAME)
  JOBPRFIX     3 9
  FILLER       2 12
  JOBSUFIX     3 14
  SMF64RST     4 17        (TIME)
  FILLER       1
  SMF64RSD     3 PD        (JOB'DATE)
  SMF64DNM     44          (VSAM DSN)
  FILLER       1
  SMF64NLR     3 BI Z      (RECD'TOTL)
  SMF64NFS     4 BI
  FILLER       2 BI
  SMF64NCS     2 BI Z      (TOT'CI'SPLT)
  FILLER       2
  SMF64NAS     2 BI Z      (TOT'CA'SPLT)
  FILLER       1 BI
  SMF64DDE     3 BI Z      (REC'DEL)
  FILLER       1 BI
  SMF64DIN     3 BI Z      (REC'INS)
  FILLER       1 BI
  SMF64DUP     3 BI Z      (REC'UPD)
  FILLER       1
  SMF64DRE     3 BI Z      (REC'READ)
  SMF64DFS     4 BI
  FILLER       2
  SMF64DCS     2 BI Z      (JOB'CI'SPLITS)
  FILLER       2
  SMF64DAS     2 BI Z      (JOB'CA'SPLITS)
  FILLER       1
  SMF64DEP     3 BI Z      (JOB'EXCPS)
  FILLER       1 BI
  SMF64XTN     1 BI Z      (EX'TNS)
  SMF64VSR     6           (VOLSER)
WORKAREA
   AGENCY       3
   NONREAD      3  BI  Z  (UPDTS'INSRTS'DELS)
  ON ONE
  MOVE DYLPARM TO AGENCY
  ENDONE
  IF JOBSUFIX NE AGENCY REJECT ENDIF
  IF JOBSUFIX EQ '155' AND JOBPRFIX EQ 'CIC' REJECT ENDIF
  IF SMF64DEP GT 200 GOTO SORTEM ELSE REJECT ENDIF
SORTEM:
  SORT FILEIN USING SMF64DNM SMF64RSD SMF64TME
  REPORT 145 WIDE
  CONTROL SMF64DNM
   NONREAD = SMF64DDE + SMF64DIN + SMF64DUP
  LIST SUPPRESS SMF64DNM SUPPRESS SMF64RSD
   SMF64TME
   SMF64JBN
   SMF64VSR
   SMF64NLR
   SMF64DEP
   SMF64DRE
   NONREAD
   SMF64XTN
   SMF64NCS
   SMF64NAS
   SMF64XTN
                        WITH 1 BEFORE
  ON CHANGE SMF64DNM
  LIST 'TOTALS' AT SMF64JBN SUM SMF64DEP
                            SUM SMF64DRE
                            SUM NONREAD
                            WITH 2 BEFORE AND WITH 2 AFTER
 T1 'VSAM ACTIVITY BY DSN SHOWING SUMMARY FILE STATUS'
 T1+5 DYLDATE
 T1+125 DYLPAGE
 T2 ' '
./ ADD NAME=DYLABEL,SSI=00005123                   17OCT89 12.48.04
$IF FREE
$DEFAULT       #1=4     #2=6     #3=33     #4=132
               #5=NULL           #6=1      #7=NULL
$DEND
*    #1 - NUMBER OF LABELS ACROSS THE PAGE - A NUMERIC VALUE
*         OR DATANAME, LIMIT IS BASED ON THE LABEL SIZE & REPORT WIDTH
*    #2 - NUMBER OF PRINT LINES PER LABEL - A NUMERIC VALUE
*         OR DATANAME, LIMIT IS 9
*    #3 - SIZE OF LABEL - A NUMERIC VALUE, LIMIT IS LE REPORT WIDTH
*    #4 - WIDTH OF PRINTER - A NUMERIC VALUE, LIMIT IS 204
*    #5 - PAGE EJECT OR SPACE 0-9 LINES AFTER PRINTING LAST LINE
*       - 'EJECT' OR NUMERIC VALUES OF 0 THROUGH 9
*    #6 - EVERY NTH RECORD IS SELECTED - A NUMERIC VALUE OR DATANAME
*    #7 - LIMIT THE LABELS - A NUMERIC VALUE OR DATANAME
*       - MAXIMUM IS 999,999,999
*    #8 - LINE 1 FIELD - A DATANAME OR A LITERAL
*    #9 - LINE 2 FIELD - A DATANAME OR A LITERAL
*    #A - LINE 3 FIELD - A DATANAME OR A LITERAL
*    #B - LINE 4 FIELD - A DATANAME OR A LITERAL
*    #C - LINE 5 FIELD - A DATANAME OR A LITERAL
*    #D - LINE 6 FIELD - A DATANAME OR A LITERAL
*    #E - LINE 7 FIELD - A DATANAME OR A LITERAL
*    #F - LINE 8 FIELD - A DATANAME OR A LITERAL
*    #G - LINE 9 FIELD - A DATANAME OR A LITERAL
WORKAREA
    DYL#ZSELNO      2  PD   VALUE 0
    DYL#ZSZLBL      2  PD   VALUE 0
    DYL#ZLIMIT      5  PD   VALUE 0
    DYL#ZLBLCT      2  PD   VALUE 0
    DYL#ZLINES      2  PD   VALUE 9
    DYL#ZERR       30       VALUE 'CHECK YOUR VARIABLE INPUT(S) !'
WORKAREA
$IF  #8
    DYL#ZLINE1      #4
$IFE
$IF  #9
    DYL#ZLINE2      #4
$IFE
$IF  #A
    DYL#ZLINE3      #4
$IFE
$IF  #B
    DYL#ZLINE4      #4
$IFE
$IF  #C
    DYL#ZLINE5      #4
$IFE
$IF  #D
    DYL#ZLINE6      #4
$IFE
$IF  #E
    DYL#ZLINE7      #4
$IFE
$IF  #F
    DYL#ZLINE8      #4
$IFE
$IF  #G
    DYL#ZLINE9      #4
$IFE
$IF  #8
    REDEFINE   DYL#ZLINE1     DYL#ZL1LBL    #3
$IFE
$IF  #9
    REDEFINE   DYL#ZLINE2     DYL#ZL2LBL    #3
$IFE
$IF  #A
    REDEFINE   DYL#ZLINE3     DYL#ZL3LBL    #3
$IFE
$IF  #B
    REDEFINE   DYL#ZLINE4     DYL#ZL4LBL    #3
$IFE
$IF  #C
    REDEFINE   DYL#ZLINE5     DYL#ZL5LBL    #3
$IFE
$IF  #D
    REDEFINE   DYL#ZLINE6     DYL#ZL6LBL    #3
$IFE
$IF  #E
    REDEFINE   DYL#ZLINE7     DYL#ZL7LBL    #3
$IFE
$IF  #F
    REDEFINE   DYL#ZLINE8     DYL#ZL8LBL    #3
$IFE
$IF  #G
    REDEFINE   DYL#ZLINE9     DYL#ZL9LBL    #3
$IFE
*
ON ONE     MOVE  #3        TO   DYL#ZSZLBL
           IF    DYL#ZLINES    LT   #2
$IF  #6
           OR    DYL#ZSELNO   EQ   #6
$IFE
$IF  #7
           OR    DYL#ZLIMIT     EQ   #7
$IFE
           OR    DYL#ZLIMIT     EQ   #1
           OR    DYL#ZSZLBL     GT   #4
           OR    DYL#ZSZLBL     EQ   0
                 PRINT     DYL#ZERR     STOP      ENDIF
ENDONE
*
$IF  #6
    DYL#ZSELNO   =   DYL#ZSELNO    +  1
    IF   DYL#ZSELNO   LT   #6    REJECT   ENDIF
    DYL#ZSELNO   =   0
$IFE
**********************************************************************
*   SAVE DATA OF RECORD(S) IN WORKAREA                               *
**********************************************************************
$IF  #8
    MOVE   #8    TO     DYL#ZL1LBL (INW)
$IFE
$IF  #9
    MOVE   #9    TO     DYL#ZL2LBL (INW)
$IFE
$IF  #A
    MOVE   #A    TO     DYL#ZL3LBL (INW)
$IFE
$IF  #B
    MOVE   #B    TO     DYL#ZL4LBL (INW)
$IFE
$IF  #C
    MOVE   #C    TO     DYL#ZL5LBL (INW)
$IFE
$IF  #D
    MOVE   #D    TO     DYL#ZL6LBL (INW)
$IFE
$IF  #E
    MOVE   #E    TO     DYL#ZL7LBL (INW)
$IFE
$IF  #F
    MOVE   #F    TO     DYL#ZL8LBL (INW)
$IFE
$IF  #G
    MOVE   #G    TO     DYL#ZL9LBL (INW)
$IFE
*
$IF  #7
    DYL#ZLIMIT    =      DYL#ZLIMIT    +      1
    IF      DYL#ZLIMIT   LT   #7    GOTO   DYL#ZCONT   ENDIF
    STOP
$IFE
**********************************************************************
*   PRINT THE LABELS WHEN THE RIGHT AMOUNT IS ACCUMULATED            *
**********************************************************************
DYL#ZCONT:
    INW      =      INW      +     #3
    DYL#ZLBLCT   =      DYL#ZLBLCT   +      1
    IF    DYL#ZLBLCT    LT      #1     ACCEPT   ENDIF
    PERFORM    DYL#ZPROD   TO    DYL#ZPRODX
    DYL#ZLBLCT   =      0
    INW      =      0
    INX      =      #2       *      #4
    MOVE     SPACES     TO     DYL#ZLINE1     LENGTH    INX
    ACCEPT
*
*
REPORT   #4   WIDE
DYL#ZPROD:
$IF  #8
             LIST    DYL#ZLINE1   AT    1
$IFE
$IF  #9
             LIST    DYL#ZLINE2   AT    1
$IFE
$IF  #A
             LIST    DYL#ZLINE3   AT    1
$IFE
$IF  #B
             LIST    DYL#ZLINE4   AT    1
$IFE
$IF  #C
             LIST    DYL#ZLINE5   AT    1
$IFE
$IF  #D
             LIST    DYL#ZLINE6   AT    1
$IFE
$IF  #E
             LIST    DYL#ZLINE7   AT    1
$IFE
$IF  #F
             LIST    DYL#ZLINE8   AT    1
$IFE
$IF  #G
             LIST    DYL#ZLINE9   AT    1
$IFE
$IF  #5
                     WITH    #5    AFTER
$IFE
DYL#ZPRODX:

ON FINAL
$IF  #8
             LIST    DYL#ZLINE1   AT    1
$IFE
$IF  #9
             LIST    DYL#ZLINE2   AT    1
$IFE
$IF  #A
             LIST    DYL#ZLINE3   AT    1
$IFE
$IF  #B
             LIST    DYL#ZLINE4   AT    1
$IFE
$IF  #C
             LIST    DYL#ZLINE5   AT    1
$IFE
$IF  #D
             LIST    DYL#ZLINE6   AT    1
$IFE
$IF  #E
             LIST    DYL#ZLINE7   AT    1
$IFE
$IF  #F
             LIST    DYL#ZLINE8   AT    1
$IFE
$IF  #G
             LIST    DYL#ZLINE9   AT    1
$IFE
$IF  #5
                     WITH    #5    AFTER
$IFE
$IF FIXED
*  DYLABEL NOT VALID EXCEPT WITH DYL-280/DYL-280 II
./ ADD NAME=DYLETTER 0112-85003-85009-0802-00274-00254-00030-GD02150
OPTION STRUCTURED
REPORT1
FILE LETTERIN LENGTH INLEN
INREC   80
INCHAR   1 1
FILE TEMPFILE OUTPUT FROM TEMPFILE VB 160 LENGTH OUTLEN
OUTREC 160
OUTCHAR  1 1
WORKAREA
   APOST 1   VALUE "'"
   QUOT  1   VALUE '"'
INX = 0
INZ = 0
INW = 79
DOWHILE INW GT 0 AND INCHAR (INW) EQ SPACE
   INW = INW - 1
   ENDDO
DOWHILE INX LE INW
   CASE INCHAR (INX)
      WHEN EQ APOST
         MOVE QUOT TO OUTCHAR (INZ)
         INZ = INZ + 1
         MOVE APOST TO OUTCHAR (INZ)
         INZ = INZ + 1
         MOVE QUOT TO OUTCHAR (INZ)
         INZ = INZ + 1
         INX = INX + 1
      WHEN EQ QUOT
         MOVE APOST TO OUTCHAR (INZ)
         INZ = INZ + 1
         MOVE QUOT TO OUTCHAR (INZ)
         INZ = INZ + 1
         MOVE APOST TO OUTCHAR (INZ)
         INZ = INZ + 1
         INX = INX + 1
      ELSE
         MOVE INCHAR (INX) TO OUTCHAR (INZ)
         INZ = INZ + 1
         INX = INX + 1
      ENDCASE
   ENDDO
OUTLEN = INZ
WRITE TEMPFILE
REPORT2
FILE TEMPFILE VB 160 STATUS LETTERSTAT LENGTH INLEN COUNT INCOUNT
   INREC     160
   INCHAR      1 1
FILE CODEOUT FB 80 OUTPUT FROM CODEOUT
   OUTREC     80
   LTDLABEL    5 1
   OUTTEXT    75
WORKAREA
   SPACELINE   6
      FILLER   4 1    VALUE '@(SP'
      SPACEAMT 1
      FILLER   1      VALUE ')'
WORKAREA
   OUTFIXED   80
      FILLER   1 1    VALUE '@'
      OUTPOS1  2
      FILLER   1      VALUE ' '
      OUTAT   76      VALUE ' '
WORKAREA
   DOLLARDEF   53     VALUE '$DEFAULT #1=1 #2=NULL #3=NULL #4=NULL'
                            ' #5=NULL #6=NULL'
WORKAREA
   OUTPOS       2 NU  VALUE 0
   MOVELEN      2 NU  VALUE 0
WORKAREA
   CHECKIT    160     VALUE ' '
READ TEMPFILE
MOVE INREC LENGTH INLEN TO CHECKIT
MOVE DOLLARDEF TO OUTREC
WRITE CODEOUT
MOVE SPACE TO OUTREC
MOVE '$DEND' TO OUTREC
WRITE CODEOUT
MOVE SPACE TO OUTREC
MOVE 'OPTION COLUMNS 1 80' TO OUTREC
WRITE CODEOUT
MOVE SPACE TO OUTREC
MOVE 'LTH #1' TO OUTREC
WRITE CODEOUT
MOVE SPACE TO OUTREC
MOVE '$IF #2' TO OUTREC
WRITE CODEOUT
MOVE SPACE TO OUTREC
MOVE '#2 WIDE' TO OUTREC
WRITE CODEOUT
MOVE SPACE TO OUTREC
MOVE '$IFE' TO OUTREC
WRITE CODEOUT
MOVE SPACE TO OUTREC
MOVE '$IF #3' TO OUTREC
WRITE CODEOUT
MOVE SPACE TO OUTREC
MOVE '#3 LONG' TO OUTREC
WRITE CODEOUT
MOVE SPACE TO OUTREC
MOVE '$IFE' TO OUTREC
WRITE CODEOUT
MOVE SPACE TO OUTREC
MOVE '$IF #4' TO OUTREC
WRITE CODEOUT
MOVE SPACE TO OUTREC
MOVE 'NOEJECT' TO OUTREC
WRITE CODEOUT
MOVE SPACE TO OUTREC
MOVE '$IFE' TO OUTREC
WRITE CODEOUT
MOVE SPACE TO OUTREC
MOVE '$IF #5' TO OUTREC
WRITE CODEOUT
MOVE SPACE TO OUTREC
MOVE 'INDENT #5' TO OUTREC
WRITE CODEOUT
MOVE SPACE TO OUTREC
MOVE '$IFE' TO OUTREC
WRITE CODEOUT
MOVE SPACE TO OUTREC
MOVE '$IF #6' TO OUTREC
WRITE CODEOUT
MOVE SPACE TO OUTREC
MOVE 'IDLENGTH #6' TO OUTREC
WRITE CODEOUT
MOVE SPACE TO OUTREC
MOVE '$IFE' TO OUTREC
WRITE CODEOUT
MOVE SPACE TO OUTREC
MOVE '$IF #7' TO OUTREC
WRITE CODEOUT
MOVE SPACE TO OUTREC
MOVE 'LASER#7' TO OUTREC
WRITE CODEOUT
MOVE SPACE TO OUTREC
MOVE '$IFE' TO OUTREC
WRITE CODEOUT
MOVE SPACE TO OUTREC
MOVE 'LTD  ' TO LTDLABEL
DOWHILE LETTERSTAT NE 'E'
   DOWHILE CHECKIT EQ SPACE
      DYLCOUNT1 = DYLCOUNT1 + 1
      IF DYLCOUNT1 GT 9
         MOVE '@(SP10)' TO OUTTEXT
         WRITE CODEOUT
         MOVE SPACE TO OUTTEXT
         DYLCOUNT1 = 1
         ENDIF
      READ TEMPFILE
      MOVE SPACE TO CHECKIT
      MOVE INREC LENGTH INLEN TO CHECKIT
      ENDDO
   IF DYLCOUNT1 GT 0
      SPACEAMT = DYLCOUNT1 + 1
      MOVE SPACELINE TO OUTTEXT
      WRITE CODEOUT
      MOVE SPACE TO OUTTEXT
      DYLCOUNT1 = 0
      ENDIF
   PERFORM CNTBLANKS TO ENDCOUNT
   IF DYLCOUNT3 GT 3
      PERFORM ASISOUT TO ENDASIS
   ELSE
      PERFORM TEXTOUT TO ENDTEXT
      ENDIF
   READ TEMPFILE
   MOVE SPACE TO CHECKIT
   MOVE INREC LENGTH INLEN TO CHECKIT
   ENDDO
CNTBLANKS:
   INX = 0
   DYLCOUNT2 = 0
   DYLCOUNT3 = 0
   DOWHILE INX LT INLEN
      IF INCHAR (INX) EQ SPACE
         DYLCOUNT2 = DYLCOUNT2 + 1
      ELSE
         IF DYLCOUNT2 GT DYLCOUNT3
            DYLCOUNT3 = DYLCOUNT2
            ENDIF
         DYLCOUNT2 = 0
         ENDIF
      INX = INX + 1
      ENDDO
ENDCOUNT:
ASISOUT:
   MOVE '@(ASIS) @1' TO OUTTEXT
   WRITE CODEOUT
   MOVE SPACE TO OUTREC
   INX = 0
   DOWHILE INCHAR (INX) NE '@' AND INX LT INLEN
      INX = INX + 1
      ENDDO
   IF INX GT 0
      IF INX LT 80
         MOVE INCHAR LENGTH INX TO OUTREC
      ELSE
         MOVE INCHAR LENGTH 80 TO OUTREC
         ENDIF
      IF CODEOUT EQ SPACE
         MOVE X'00' TO CODEOUT
         ENDIF
      WRITE CODEOUT
      MOVE SPACE TO OUTREC
      IF INX GE 80
         INW = 80
         MOVE INCHAR (INW) LENGTH INX TO OUTREC
         IF CODEOUT EQ SPACE
            MOVE X'00' TO CODEOUT
            ENDIF
         WRITE CODEOUT
         MOVE SPACE TO OUTREC
         ENDIF
      ENDIF
   DOWHILE INX LT INLEN
      INW = INX
      MOVELEN = 0
      DOWHILE INCHAR (INX) NE SPACE AND INX LT INLEN
         MOVELEN = MOVELEN + 1
         INX = INX + 1
         ENDDO
      OUTPOS = INW + 1
      MOVE OUTPOS TO OUTPOS1
      MOVE INCHAR (INW) LENGTH MOVELEN TO OUTAT
      MOVE OUTFIXED TO OUTREC
      WRITE CODEOUT
      MOVE SPACE TO OUTREC
      MOVE SPACE TO OUTAT
      DOWHILE INCHAR (INX) EQ SPACE AND INX LT INLEN
         INX = INX + 1
         ENDDO
      ENDDO
   MOVE SPACE TO OUTTEXT
   MOVE 'LTD  ' TO LTDLABEL
ENDASIS:
TEXTOUT:
   IF INLEN GT 74
      PERFORM WRITESPLIT TO ENDSPLIT
   ELSE
      MOVE INREC LENGTH INLEN TO OUTTEXT
      WRITE CODEOUT
      MOVE SPACE TO OUTTEXT
      ENDIF
ENDTEXT:
WRITESPLIT:
   PERFORM FINDLAST TO ENDLAST
   INX = INX + 1
   MOVE INCHAR LENGTH INX TO OUTTEXT
   WRITE CODEOUT
   MOVE SPACE TO OUTTEXT
   INX = INX - 1
   MOVE INCHAR (INX) LENGTH DYLCOUNT4 TO OUTTEXT
   WRITE CODEOUT
   MOVE SPACE TO OUTTEXT
ENDSPLIT:
FINDLAST:
   DYLCOUNT4 = 0
   INX = 79
   DOUNTIL (INX LT 75 AND INCHAR (INX) EQ SPACE) OR INX EQ 0
      DYLCOUNT4 = DYLCOUNT4 + 1
      INX = INX - 1
      ENDDO
   IF INX EQ 0 AND INCHAR (INX) NE SPACE
      LIST 'RECORD' ' NOT PARSEABLE' ' -NUMBER:' INCOUNT ()
      STOP
      ENDIF
ENDLAST:
ON END OF INPUT
   MOVE 'ENDLTD' TO OUTREC
   WRITE CODEOUT
   MOVE SPACE TO OUTREC
   MOVE 'OPTION COLUMNS 1 72' TO OUTREC
   WRITE CODEOUT
   STOP
./ ADD NAME=DYLLISTC 0111-83237-83241-1646-00098-00092-00000-GD02150
OPTION STRUCTURED
FILE DUMMFILE DUMMY
FILE LISTFILE VB LENGTH LISTLEN STATUS INEOF
   COLUMN1TAG  9   9
   RECTOTAL   12  21
   COLUMN2TAG 12  38
   HURBA      12  50
   COLUMN4TAG  6  96
   CISIZE      5 115
   CIPERCA     5 115
   INXLEVELS   5 115
WORKAREA
   CISIZFND    3     VALUE 'NO '
   CICAFND     3     VALUE 'NO '
   HURBAFND    3     VALUE 'NO '
   RECTOFND    3     VALUE 'NO '
WORKAREA
   VDEFINE     7     VALUE 'VDEFINE'
   VPUT        4     VALUE 'VPUT'
   VARNAME    10     VALUE ' '
   CHAR        4     VALUE 'CHAR'
   LEN         4  BI VALUE 0
WORKAREA
   WKRECTOT   12
   WKHURBA    12
   WKCISIZE    5
   WKCIPERCA   5
   WKINXLVL    5
ON ONE
   READ LISTFILE
   MOVE '(LCISIZE)' TO VARNAME
   MOVE 5 TO LEN
   CALL ISPLINK USING VDEFINE VARNAME WKCISIZE CHAR LEN
   MOVE '(LRECTOT)' TO VARNAME
   MOVE 12 TO LEN
   CALL ISPLINK USING VDEFINE VARNAME WKRECTOT CHAR LEN
   MOVE '(LHURBA)' TO VARNAME
   CALL ISPLINK USING VDEFINE VARNAME WKHURBA CHAR LEN
   MOVE '(LINXLVL)' TO VARNAME
   MOVE 5 TO LEN
   CALL ISPLINK USING VDEFINE VARNAME WKINXLVL CHAR LEN
   MOVE '(LCIPERCA)' TO VARNAME
   CALL ISPLINK USING VDEFINE VARNAME WKCIPERCA CHAR LEN
ENDONE
DOWHILE INEOF NE 'E'
   IF LISTLEN GT 118
      PERFORM CHECKMISC TO ENDMISC
      ENDIF
   IF LISTLEN GT 60
      PERFORM CHECKHURB TO ENDHURB
      ENDIF
   IF LISTLEN GT 31
      PERFORM CHECKREC  TO ENDREC
      ENDIF
   READ LISTFILE
   ENDDO
MOVE '(LCISIZE)' TO VARNAME
CALL ISPLINK USING VPUT VARNAME
MOVE '(LCIPERCA)' TO VARNAME
CALL ISPLINK USING VPUT VARNAME
MOVE '(LINXLVL)' TO VARNAME
CALL ISPLINK USING VPUT VARNAME
MOVE '(LRECTOT)' TO VARNAME
CALL ISPLINK USING VPUT VARNAME
MOVE '(LHURBA)' TO VARNAME
CALL ISPLINK USING VPUT VARNAME
STOP
CHECKMISC:
   IF COLUMN4TAG EQ 'CISIZE'
      AND CISIZFND EQ 'NO '
      MOVE CISIZE TO WKCISIZE
      MOVE 'YES' TO CISIZFND
      ENDIF
   IF COLUMN4TAG EQ 'CI/CA-'
      AND CICAFND EQ 'NO '
      MOVE CIPERCA TO WKCIPERCA
      MOVE 'YES' TO CICAFND
      ENDIF
   IF COLUMN4TAG EQ 'LEVELS'
      MOVE INXLEVELS TO WKINXLVL
      ENDIF
ENDMISC:
CHECKHURB:
   IF COLUMN2TAG EQ 'HI-USED-RBA-'
      AND HURBAFND EQ 'NO '
      MOVE HURBA TO WKHURBA
      MOVE 'YES' TO HURBAFND
      ENDIF
ENDHURB:
CHECKREC:
   IF COLUMN1TAG EQ 'REC-TOTAL'
      IF RECTOFND EQ 'YES'
         MOVE RECTOTAL TO WKRECTOT
      ELSE
         MOVE 'YES' TO RECTOFND
         ENDIF
      ENDIF
ENDREC:
./ ADD NAME=DYLPRT   1700-85128-85128-1006-00008-00008-00000-REL17
$DEFAULT #2=NULL
$DEND
$IF #2
IF INCOUNT GT #2
   STOP
   ENDIF
$IFE
#1 #0
./ ADD NAME=DYLSEL   1700-85128-85128-1006-00038-00038-00000-REL17
$DEFAULT #0=DYLONE  #1=EQ   #2=1    #3=NULL #4=NULL #5=NULL #6=NULL
 #7=NULL #8=NULL #9=NULL #A=NULL #B=NULL #C=NULL #D=NULL #E=NULL
 #F=NULL #G=NULL #H=NULL #I=NULL #J=NULL #K=NULL #L=NULL #M=NULL
 #N=NULL #O=NULL #P=NULL #Q=NULL #R=NULL #S=NULL #T=NULL #U=NULL
$DEND
IF #0
   #1
   #2
   #3
   #4
   #5
   #6
   #7
   #8
   #9
   #A
   #B
   #C
   #D
   #E
   #F
   #G
   #H
   #I
   #J
   #K
   #L
   #M
   #N
   #O
   #P
   #Q
   #R
   #S
   #T
   #U
 NEXT
 ELSE REJECT ENDIF
./ ADD NAME=DYLSPR1  1700-85128-85128-1006-00095-00095-00000-REL17
$DEFAULT  #0=NULL #1=NULL #2=NULL #3=NULL #4=NULL #5=NULL #6=NULL
 #7=TOTAL #8=NULL #9=NULL #A=NULL #B=NULL #C=NULL #D=NULL #E=NULL
 #F=NULL  #G=NULL #H=NULL #I=NULL #J=NULL #K=NULL #L=NULL #M=NULL
 #N=NULL  #O=NULL #P=NULL #Q=NULL #R=NULL #S=NULL #T=NULL #U=NULL
 #V=NULL  #W=NULL #X=NULL
$DEND
WORKAREA
   LINETOT 7 PD 2 E (#7) VALUE 0 REINIT
   UNDRSCORE  3     VALUE 'NO '
   COLHOLDER 15     (CONTROL FIELD) VALUE ' '
WORKAREA
   BRKNAME1  21     VALUE ' #0'
   BRKNAME2  21     VALUE ' #1'
   BRKNAME3  21     VALUE ' #2'
   BRKNAME4  21     VALUE ' #3'
   BRKNAME5  21     VALUE ' #4'
   BRKNAME6  21     VALUE ' #5'
WORKAREA
   USEBREAK1 15  ()
   USEBREAK2 15  ()
   USEBREAK3 15  ()
   USEBREAK4 15  ()
   USEBREAK5 15  ()
   USEBREAK6 15  ()
WORKAREA
   WRKBREAK  20
   BRKCHAR    1 1
WORKAREA
   USEBRK    20
   USECHAR    1 1
ON ONE
   MOVE BRKNAME1 TO WRKBREAK
   PERFORM PARSEBRK TO ENDPARSE
   MOVE USEBRK TO USEBREAK1
   MOVE BRKNAME2 TO WRKBREAK
   PERFORM PARSEBRK TO ENDPARSE
   MOVE USEBRK TO USEBREAK2
   MOVE BRKNAME3 TO WRKBREAK
   PERFORM PARSEBRK TO ENDPARSE
   MOVE USEBRK TO USEBREAK3
   MOVE BRKNAME4 TO WRKBREAK
   PERFORM PARSEBRK TO ENDPARSE
   MOVE USEBRK TO USEBREAK4
   MOVE BRKNAME5 TO WRKBREAK
   PERFORM PARSEBRK TO ENDPARSE
   MOVE USEBRK TO USEBREAK5
   MOVE BRKNAME6 TO WRKBREAK
   PERFORM PARSEBRK TO ENDPARSE
   MOVE USEBRK TO USEBREAK6
   ENDONE
$IF #0
SORT #6 USING
   #5
   #4
   #3
   #2
   #1
   #0
CONTROL
   #0
   #1
   #2
   #3
   #4
   #5
$IFE
PERFORM TOTALIT TO ENDTOT
LIST #8
#9
#A
#B
#C
#D
#E
#F
#G
#H
#I
#J
#K
#L
#M
#N
#O
#P
#Q
#R
#S
#T
#U
#V
#W
#X
LINETOT
COLHOLDER
./ ADD NAME=DYLSPR2  1700-85128-85128-1006-00327-00327-00000-REL17
$DEFAULT #0=NULL #1=NULL #2=NULL #3=NULL #4=NULL #5=NULL #6=NULL
 #7=NULL #8=NULL #9=NULL #A=NULL #B=NULL #C=NULL #D=NULL #E=NULL
 #F=NULL #G=NULL #H=NULL #I=NULL #J=NULL #K=NULL #L=NULL #M=NULL
 #N=NULL #O=NULL #P=NULL #Q=NULL #R=NULL #S=NULL #T=NULL #U=NULL
 #V=NULL #W=NULL #X=NULL
$DEND
TOTALIT:
LINETOT = LINETOT
$IF #8
   + #8
$IFE
$IF #9
   + #9
$IFE
$IF #A
   + #A
$IFE
$IF #B
   + #B
$IFE
$IF #C
   + #C
$IFE
$IF #D
   + #D
$IFE
$IF #E
   + #E
$IFE
$IF #F
   + #F
$IFE
$IF #G
   + #G
$IFE
$IF #H
   + #H
$IFE
$IF #I
   + #I
$IFE
$IF #J
   + #J
$IFE
$IF #K
   + #K
$IFE
$IF #L
   + #L
$IFE
$IF #M
   + #M
$IFE
$IF #N
   + #N
$IFE
$IF #O
   + #O
$IFE
$IF #P
   + #P
$IFE
$IF #Q
   + #Q
$IFE
$IF #R
   + #R
$IFE
$IF #S
   + #S
$IFE
$IF #T
   + #T
$IFE
$IF #U
   + #U
$IFE
$IF #V
   + #V
$IFE
$IF #W
   + #W
$IFE
$IF #X
   + #X
$IFE
ENDTOT:
PARSEBRK:
   INX = 0
   INY = 0
   UNDRSCORE = 'NO '
LOOP:
   IF INX LT 20
      PERFORM MOVEBRK TO ENDBRK
      GOTO LOOP
      ENDIF
ENDPARSE:
MOVEBRK:
   IF UNDRSCORE EQ 'YES'
      MOVE BRKCHAR (INX) TO USECHAR (INY)
      INY = INY + 1
      ENDIF
   IF BRKCHAR (INX) EQ '_'
      MOVE 'YES' TO UNDRSCORE
      ENDIF
   INX = INX + 1
ENDBRK:
$IF #0
ON CHANGE #0
   LIST SUM(#8
   #9
   #A
   #B
   #C
   #D
   #E
   #F
   #G
   #H
   #I
   #J
   #K
   #L
   #M
   #N
   #O
   #P
   #Q
   #R
   #S
   #T
   #U
   #V
   #W
   #X
   LINETOT)
   USEBREAK1 AT COLHOLDER WITH 2 AFTER
$IFE
$IF #1
ON CHANGE #1
   LIST SUM(#8
   #9
   #A
   #B
   #C
   #D
   #E
   #F
   #G
   #H
   #I
   #J
   #K
   #L
   #M
   #N
   #O
   #P
   #Q
   #R
   #S
   #T
   #U
   #V
   #W
   #X
   LINETOT)
   USEBREAK2 AT COLHOLDER WITH 2 AFTER
$IFE
$IF #2
ON CHANGE #2
   LIST SUM(#8
   #9
   #A
   #B
   #C
   #D
   #E
   #F
   #G
   #H
   #I
   #J
   #K
   #L
   #M
   #N
   #O
   #P
   #Q
   #R
   #S
   #T
   #U
   #V
   #W
   #X
   LINETOT)
   USEBREAK3 AT COLHOLDER WITH 2 AFTER
$IFE
$IF #3
ON CHANGE #3
   LIST SUM(#8
   #9
   #A
   #B
   #C
   #D
   #E
   #F
   #G
   #H
   #I
   #J
   #K
   #L
   #M
   #N
   #O
   #P
   #Q
   #R
   #S
   #T
   #U
   #V
   #W
   #X
   LINETOT)
   USEBREAK4 AT COLHOLDER WITH 2 AFTER
$IFE
$IF #4
ON CHANGE #4
   LIST SUM(#8
   #9
   #A
   #B
   #C
   #D
   #E
   #F
   #G
   #H
   #I
   #J
   #K
   #L
   #M
   #N
   #O
   #P
   #Q
   #R
   #S
   #T
   #U
   #V
   #W
   #X
   LINETOT)
   USEBREAK5 AT COLHOLDER WITH 2 AFTER
$IFE
$IF #5
ON CHANGE #5
   LIST SUM(#8
   #9
   #A
   #B
   #C
   #D
   #E
   #F
   #G
   #H
   #I
   #J
   #K
   #L
   #M
   #N
   #O
   #P
   #Q
   #R
   #S
   #T
   #U
   #V
   #W
   #X
   LINETOT)
   USEBREAK6 AT COLHOLDER WITH 2 AFTER
$IFE
ON FINAL
   LIST SUM(#8
   #9
   #A
   #B
   #C
   #D
   #E
   #F
   #G
   #H
   #I
   #J
   #K
   #L
   #M
   #N
   #O
   #P
   #Q
   #R
   #S
   #T
   #U
   #V
   #W
   #X
   LINETOT)
   'FINAL' AT COLHOLDER
T1
T1+2 DYLPAGE
T2
T2+2 DYLDATE
T3   '#6'   WITH 4 AFTER
./ ADD NAME=DYLSRT   1700-85128-85128-1006-00019-00019-00000-REL17
$DEFAULT #1=NULL #2=NULL #3=NULL #4=NULL #5=NULL #6=NULL #7=NULL
 #8=NULL #9=NULL #A=NULL #B=NULL #C=NULL #D=NULL #E=NULL #F=NULL
$DEND
SORT #0 USING
   #1
   #2
   #3
   #4
   #5
   #6
   #7
   #8
   #9
   #A
   #B
   #C
   #D
   #E
   #F
./ ADD NAME=DYLSTD1  1700-85128-85128-1006-00114-00114-00000-REL17
$DEFAULT #0=NULL #1=NULL #2=NULL #3=NULL #4=NULL #5=NULL #6=NULL
 #7=NULL #8=NULL #9=NULL #A=NULL #B=NULL #C=NULL #D=NULL #E=NULL
 #F=NULL #G=NULL #H=NULL #I=NULL #J=NULL #K=NULL #L=NULL #M=NULL
 #N=NULL #O=NULL #P=NULL #Q=NULL #R=NULL #S=NULL #T=NULL #U=NULL
 #V=NULL #W=NULL #X=NULL
$DEND
WORKAREA
   COLHOLDER 15 (CONTROL FIELD) VALUE ' '
   UNDRSCORE  3     VALUE 'NO '
WORKAREA
   BRKNAME1  21     VALUE ' #0'
   BRKNAME2  21     VALUE ' #1'
   BRKNAME3  21     VALUE ' #2'
   BRKNAME4  21     VALUE ' #3'
   BRKNAME5  21     VALUE ' #4'
   BRKNAME6  21     VALUE ' #5'
WORKAREA
   USEBREAK1 15  ()
   USEBREAK2 15  ()
   USEBREAK3 15  ()
   USEBREAK4 15  ()
   USEBREAK5 15  ()
   USEBREAK6 15  ()
WORKAREA
   WRKBREAK  20
   BRKCHAR    1 1
WORKAREA
   USEBRK    20
   USECHAR    1 1
ON ONE
   MOVE BRKNAME1 TO WRKBREAK
   PERFORM PARSEBRK TO ENDPARSE
   MOVE USEBRK TO USEBREAK1
   MOVE BRKNAME2 TO WRKBREAK
   PERFORM PARSEBRK TO ENDPARSE
   MOVE USEBRK TO USEBREAK2
   MOVE BRKNAME3 TO WRKBREAK
   PERFORM PARSEBRK TO ENDPARSE
   MOVE USEBRK TO USEBREAK3
   MOVE BRKNAME4 TO WRKBREAK
   PERFORM PARSEBRK TO ENDPARSE
   MOVE USEBRK TO USEBREAK4
   MOVE BRKNAME5 TO WRKBREAK
   PERFORM PARSEBRK TO ENDPARSE
   MOVE USEBRK TO USEBREAK5
   MOVE BRKNAME6 TO WRKBREAK
   PERFORM PARSEBRK TO ENDPARSE
   MOVE USEBRK TO USEBREAK6
   ENDONE
$IF #0
SORT #6 USING
   #5
   #4
   #3
   #2
   #1
   #0
CONTROL
   #0
   #1
   #2
   #3
   #4
   #5
$IFE
LIST #7
   #8
   #9
   #A
   #B
   #C
   #D
   #E
   #F
   #G
   #H
   #I
   #J
   #K
   #L
   #M
   #N
   #O
   #P
   #Q
   #R
   #S
   #T
   #U
   #V
   #W
   #X
   COLHOLDER
ACCEPT
PARSEBRK:
   INX = 0
   INY = 0
   UNDRSCORE = 'NO '
LOOP:
   IF INX LT 20
      PERFORM MOVEBRK TO ENDBRK
      GOTO LOOP
      ENDIF
ENDPARSE:
MOVEBRK:
   IF UNDRSCORE EQ 'YES'
      MOVE BRKCHAR (INX) TO USECHAR (INY)
      INY = INY + 1
      ENDIF
   IF BRKCHAR (INX) EQ '_'
      MOVE 'YES' TO UNDRSCORE
      ENDIF
   INX = INX + 1
ENDBRK:
./ ADD NAME=DYLSTD2  1700-85128-85128-1006-00228-00228-00000-REL17
$DEFAULT #0=NULL #1=NULL #2=NULL #3=NULL #4=NULL #5=NULL #6=NULL
 #7=NULL #8=NULL #9=NULL #A=NULL #B=NULL #C=NULL #D=NULL #E=NULL
 #F=NULL #G=NULL #H=NULL #I=NULL #J=NULL #K=NULL #L=NULL #M=NULL
 #N=NULL #O=NULL #P=NULL #Q=NULL #R=NULL #S=NULL #T=NULL #U=NULL
 #V=NULL #W=NULL #X=NULL
$DEND
$IF #0
ON CHANGE #0
   LIST SUM (#7
   #8
   #9
   #A
   #B
   #C
   #D
   #E
   #F
   #G
   #H
   #I
   #J
   #K
   #L
   #M
   #N
   #O
   #P
   #Q
   #R
   #S
   #T
   #U
   #V
   #W
   #X)
   USEBREAK1 AT COLHOLDER WITH 2 AFTER
$IFE
$IF #1
ON CHANGE #1
   LIST SUM (#7
   #8
   #9
   #A
   #B
   #C
   #D
   #E
   #F
   #G
   #H
   #I
   #J
   #K
   #L
   #M
   #N
   #O
   #P
   #Q
   #R
   #S
   #T
   #U
   #V
   #W
   #X)
   USEBREAK2 AT COLHOLDER WITH 2 AFTER
$IFE
$IF #2
ON CHANGE #2
   LIST SUM (#7
   #8
   #9
   #A
   #B
   #C
   #D
   #E
   #F
   #G
   #H
   #I
   #J
   #K
   #L
   #M
   #N
   #O
   #P
   #Q
   #R
   #S
   #T
   #U
   #V
   #W
   #X)
   USEBREAK3 AT COLHOLDER WITH 2 AFTER
$IFE
$IF #3
ON CHANGE #3
   LIST SUM (#7
   #8
   #9
   #A
   #B
   #C
   #D
   #E
   #F
   #G
   #H
   #I
   #J
   #K
   #L
   #M
   #N
   #O
   #P
   #Q
   #R
   #S
   #T
   #U
   #V
   #W
   #X)
   USEBREAK4 AT COLHOLDER WITH 2 AFTER
$IFE
$IF #4
ON CHANGE #4
   LIST SUM (#7
   #8
   #9
   #A
   #B
   #C
   #D
   #E
   #F
   #G
   #H
   #I
   #J
   #K
   #L
   #M
   #N
   #O
   #P
   #Q
   #R
   #S
   #T
   #U
   #V
   #W
   #X)
   USEBREAK5 AT COLHOLDER WITH 2 AFTER
$IFE
$IF #5
ON CHANGE #5
   LIST SUM (#7
   #8
   #9
   #A
   #B
   #C
   #D
   #E
   #F
   #G
   #H
   #I
   #J
   #K
   #L
   #M
   #N
   #O
   #P
   #Q
   #R
   #S
   #T
   #U
   #V
   #W
   #X)
   USEBREAK6 AT COLHOLDER WITH 2 AFTER
$IFE
$IF #0
ON FINAL
   LIST SUM (#7
   #8
   #9
   #A
   #B
   #C
   #D
   #E
   #F
   #G
   #H
   #I
   #J
   #K
   #L
   #M
   #N
   #O
   #P
   #Q
   #R
   #S
   #T
   #U
   #V
   #W
   #X)
   'FINAL' AT COLHOLDER
$IFE
T1
T1+2 DYLPAGE
T2
T2+2 DYLDATE
T3   '#6'   WITH 4 AFTER
./ ADD NAME=DYLSUM1  1700-85128-85128-1006-00113-00113-00000-REL17
$DEFAULT #0=NULL #1=NULL #2=NULL #3=NULL #4=NULL #5=NULL #6=NULL
 #7=NULL #8=NULL #9=NULL #A=NULL #B=NULL #C=NULL #D=NULL #E=NULL
 #F=NULL #G=NULL #H=NULL #I=NULL #J=NULL #K=NULL #L=NULL #M=NULL
 #N=NULL #O=NULL #P=NULL #Q=NULL #R=NULL #S=NULL #T=NULL #U=NULL
 #V=NULL #W=NULL #X=NULL
$DEND
WORKAREA
   UNDRSCORE  3     VALUE 'NO '
WORKAREA
   BRKNAME1  21     VALUE ' #0'
   BRKNAME2  21     VALUE ' #1'
   BRKNAME3  21     VALUE ' #2'
   BRKNAME4  21     VALUE ' #3'
   BRKNAME5  21     VALUE ' #4'
   BRKNAME6  21     VALUE ' #5'
WORKAREA
   USEBREAK1 15  (CONTROL FIELD)
   USEBREAK2 15  ()
   USEBREAK3 15  ()
   USEBREAK4 15  ()
   USEBREAK5 15  ()
   USEBREAK6 15  ()
WORKAREA
   WRKBREAK  20
   BRKCHAR    1 1
WORKAREA
   USEBRK    20
   USECHAR    1 1
ON ONE
   MOVE BRKNAME1 TO WRKBREAK
   PERFORM PARSEBRK TO ENDPARSE
   MOVE USEBRK TO USEBREAK1
   MOVE BRKNAME2 TO WRKBREAK
   PERFORM PARSEBRK TO ENDPARSE
   MOVE USEBRK TO USEBREAK2
   MOVE BRKNAME3 TO WRKBREAK
   PERFORM PARSEBRK TO ENDPARSE
   MOVE USEBRK TO USEBREAK3
   MOVE BRKNAME4 TO WRKBREAK
   PERFORM PARSEBRK TO ENDPARSE
   MOVE USEBRK TO USEBREAK4
   MOVE BRKNAME5 TO WRKBREAK
   PERFORM PARSEBRK TO ENDPARSE
   MOVE USEBRK TO USEBREAK5
   MOVE BRKNAME6 TO WRKBREAK
   PERFORM PARSEBRK TO ENDPARSE
   MOVE USEBRK TO USEBREAK6
   ENDONE
$IF #0
SORT #6 USING
   #5
   #4
   #3
   #2
   #1
   #0
CONTROL
   #0
   #1
   #2
   #3
   #4
   #5
$IFE
ACCEPT
PARSEBRK:
   INX = 0
   INY = 0
   UNDRSCORE = 'NO '
LOOP:
   IF INX LT 20
      PERFORM MOVEBRK TO ENDBRK
      GOTO LOOP
      ENDIF
ENDPARSE:
MOVEBRK:
   IF UNDRSCORE EQ 'YES'
      MOVE BRKCHAR (INX) TO USECHAR (INY)
      INY = INY + 1
      ENDIF
   IF BRKCHAR (INX) EQ '_'
      MOVE 'YES' TO UNDRSCORE
      ENDIF
   INX = INX + 1
ENDBRK:
ON CHANGE #0
   LIST #8
   #9
   #A
   #B
   #C
   #D
   #E
   #F
   #G
   #H
   #I
   #J
   #K
   #L
   #M
   #N
   #O
   #P
   #Q
   #R
   #S
   #T
   #U
   #V
   #W
   #X
   USEBREAK1 WITH 2 AFTER
./ ADD NAME=DYLSUM2  1700-85128-85128-1006-00196-00196-00000-REL17
$DEFAULT #0=NULL #1=NULL #2=NULL #3=NULL #4=NULL #5=NULL #6=NULL
 #7=NULL #8=NULL #9=NULL #A=NULL #B=NULL #C=NULL #D=NULL #E=NULL
 #F=NULL #G=NULL #H=NULL #I=NULL #J=NULL #K=NULL #L=NULL #M=NULL
 #N=NULL #O=NULL #P=NULL #Q=NULL #R=NULL #S=NULL #T=NULL #U=NULL
 #V=NULL #W=NULL #X=NULL
$DEND
$IF #1
ON CHANGE #1
   LIST SUM (#8
   #9
   #A
   #B
   #C
   #D
   #E
   #F
   #G
   #H
   #I
   #J
   #K
   #L
   #M
   #N
   #O
   #P
   #Q
   #R
   #S
   #T
   #U
   #V
   #W
   #X)
   USEBREAK2 AT USEBREAK1 WITH 2 AFTER
$IFE
$IF #2
ON CHANGE #2
   LIST SUM (#7
   #8
   #9
   #A
   #B
   #C
   #D
   #E
   #F
   #G
   #H
   #I
   #J
   #K
   #L
   #M
   #N
   #O
   #P
   #Q
   #R
   #S
   #T
   #U
   #V
   #W
   #X)
   USEBREAK3 AT USEBREAK1 WITH 2 AFTER
$IFE
$IF #3
ON CHANGE #3
   LIST SUM (#7
   #8
   #9
   #A
   #B
   #C
   #D
   #E
   #F
   #G
   #H
   #I
   #J
   #K
   #L
   #M
   #N
   #O
   #P
   #Q
   #R
   #S
   #T
   #U
   #V
   #W
   #X)
   USEBREAK4 AT USEBREAK1 WITH 2 AFTER
$IFE
$IF #4
ON CHANGE #4
   LIST SUM (#7
   #8
   #9
   #A
   #B
   #C
   #D
   #E
   #F
   #G
   #H
   #I
   #J
   #K
   #L
   #M
   #N
   #O
   #P
   #Q
   #R
   #S
   #T
   #U
   #V
   #W
   #X)
   USEBREAK5 AT USEBREAK1 WITH 2 AFTER
$IFE
$IF #5
ON CHANGE #5
   LIST SUM (#7
   #8
   #9
   #A
   #B
   #C
   #D
   #E
   #F
   #G
   #H
   #I
   #J
   #K
   #L
   #M
   #N
   #O
   #P
   #Q
   #R
   #S
   #T
   #U
   #V
   #W
   #X)
   USEBREAK6 AT USEBREAK1 WITH 2 AFTER
$IFE
$IF #1
ON FINAL
   LIST SUM (#7
   #8
   #9
   #A
   #B
   #C
   #D
   #E
   #F
   #G
   #H
   #I
   #J
   #K
   #L
   #M
   #N
   #O
   #P
   #Q
   #R
   #S
   #T
   #U
   #V
   #W
   #X)
   'FINAL' AT USEBREAK1
$IFE
T1
T1+2 DYLPAGE
T2
T2+2 DYLDATE
T3   '#6'   WITH 4 AFTER
./ ADD NAME=DYLVER   1700-85128-85128-1006-00056-00056-00000-REL17
OPTION STRUCTURED
FILE IN01 STATUS INEOF
   INLEFT  80  2
   ERRMSG   5  2
   COPYMSG  6  6
   INRIGHT 80 13
   COMMENT  1 13
   HEADER   9 13
   CROSSREF 9 27
   INREST  52 81
FILE OUT01 OUTPUT FROM OUT01 FB 80
  OUTREC 80
   OUTERR   5  1
   OUTREST 75  6
READ IN01
DOWHILE COPYMSG EQ 'COPIED' AND INEOF NE 'E'
   READ IN01
   ENDDO
IF CROSSREF EQ 'C R O S S'
   STOP
   ENDIF
ON ONE
  DOUNTIL COMMENT EQ '*' OR INEOF EQ 'E'
     READ IN01
     ENDDO
  ENDONE
IF HEADER EQ 'D Y L A K'
   READ IN01
   IF CROSSREF EQ 'C R O S S'
      STOP
      ENDIF
   READ IN01
   ENDIF
IF INLEFT EQ BLANK
   IF DYLCOUNT1 GT 1
      DOWHILE INLEFT EQ BLANK AND INEOF NE 'E'
         READ IN01
         ENDDO
      DYLCOUNT1 = 0
   ELSE
      DYLCOUNT1 = DYLCOUNT1 + 1
      ENDIF
   ENDIF
IF ERRMSG EQ 'ERROR'
   MOVE INLEFT TO OUTREC
   WRITE OUT01
   MOVE SPACE TO OUTREC
   MOVE ERRMSG TO OUTERR
   MOVE INREST TO OUTREST
   WRITE OUT01
ELSE
   IF COPYMSG NE 'COPIED'
      MOVE INRIGHT TO OUTREC
      WRITE OUT01
      ENDIF
   ENDIF
./ ADD NAME=D04TEXT  0105-84079-84089-1414-00594-00378-00000-GD02150
               IBM OS Cobol interactive debug reference summary

                 Notation conventions for TESTCOB subcommands

 1. The symbols below are used to define subcommand format. With the exc
 of the hyphen, which may be used as a continuation character under TSO,
 symbols should not be typed at the terminal.

          NAME                  SYMBOL                 MEANING

       hyphen                     -            joins lower case
                                               letters, words, and
                                               symbols to form a single
                                               variable

       underscore               ______         indicates a default
                                               option, one you need not
                                               type if it is the one
                                               you want

       slash                      //           group related items: you
                                               MAY choose one of the
                                               items between slashes

       exclamation point         !!            group related items: you
                                               MUST choose one of the
                                               items between exclamation
                                               marks

       ellipsis                   ...          indicates that the
                                               preceding item or group
                                               of items can be repeated
                                               one or more times in
                                               succession if you want

 2. Upper case letters, numbers, and symbols other than the ones above m
 typed exactly as they appear in the format.

 3. Lower case letters represent variable information that is supplied b
 user.
1




                 Notation conventions for TESTCOB subcommands

                                 (continued)

 4. The following terms have special meanings in subcommand formats:

    * addr         is a COBOL index-name, a COBOL data-name, or a COBOL
                   special register
    * expression   is a relationship expressed in this format:

                   addr-1  operator   !value! !addr-2!

                   (Addr, operator, and value are defined here.)
    * operator     is one of the following:

                   EQ or =   equal to
                   GT or >   greater than
                   LT or <   less than
                   NE or ^=  not equal to
                   GE or >=  greater than or equal to
                   LE or <=  less than or equal to

    * statement    is expressed: line number /.verb number/
    * symbol       is any character combination that follows the rules
                   for forming a data-name in the COBOL language.
    * value        is a literal constant or a figurative constant.

 5. A range of statements, which includes all statements within the rang
 delimited by two statements separated by a colon:
                   statement-1:statement-2
    (this applies to a range of data-names or index-names.)
 6. A list of statements, which includes only the statements listed, is
 enclosed in parentheses, and each statement is separated from the next
 commas, blanks, or tabs:
                   (statement-1,statement-2,statement-3)
    (this applies to a list of addrs, symbols, and so on.)
 7. Valid delimiters between operands in all TESTCOB subcommands are bla
 commas, and tabs. You can use these interchangeably.
1




 Subcommand/Operands

 AT  !statement!
     !(statement-1/,statement-2/...)!
     !statement-3:statement-4!

     /(subcommand list)/ /COUNT(n)/

     /NOTIFY/
+     ______
     /NONOTIFY/

     statement
        is the point where you want to establish an AT breakpoint.

     (statement-1,statement-2)
        are points where you want to establish AT breakpoints. Use this
        if you want to establish AT breakpoints in several NONCONSECUTIV
        statements in your program.

     statement-3:statement-4
        delimit a range of statements where you want to establish AT
        breakpoints. Using this operand establishes AT breakpoints at ev
        statement, which means at every COBOL verb, between statement-3
        statement-4. Therefore, statement-3 must appear before statement
        the program, and both statements must appear in the same program

     (subcommand list)
        is a list of one or more TESTCOB subcommands. Each subcommand in
        list must be separated from the next by a semicolon.  Also, the
        may include AT if you wish. When an AT breakpoint is executed, t
        system stops program execution and then executes the subcommand
        there is one. Once the subcommand list is executed, control is r
        to the terminal where you may enter additional subcommands or ca
        program execution to resume.

        NOTE: If the Interactive Debug command processor encounters the
        RUN subcommand in the subcommand list, no additional subcommands
        be executed after GO or RUN. In this situation, program executio
        resumed. If the END subcommand is encountered in the subcommand
        the command processor immediately terminates the debugging sessi

     COUNT(n)
        is a way to specify that you want the AT breakpoint to cause an
        interruption every nth time it is encountered during program exe
        where n is the value of a positive integer.  (Thus, if COUNT(5)
        specified, the FIRST execution of the AT breakpoint occurs the F
        time the breakpoint is encountered. The verb at this breakpoint
        executed FOUR times, and the interruption occurs before the verb
        executed a FIFTH time.)

     NOTIFY
        means that you want the system to print an identifying message e
        time the AT breakpoint is executed. To suppress the message, spe
        NONOTIFY. NOTIFY is the default.
1




 Subcommand/Operands

 DROP   /symbol/
        /(symbol-1/,symbol-2/...)/

     symbol
        is the same symbol you specified in an EQUATE subcommand.  Speci
        this symbol in EQUATE puts it in a special symbol table. Similar
        specifying this symbol in DROP removes it from that table.

        NOTE: If no symbol operand is included in DROP, the entire symbo
        is deleted. This eradicates the effect of all EQUATE subcommands
        have been entered during your debugging session.

     (symbol-1,symbol-2)
        is a list of symbols that you want to delete. This operand enabl
        to remove several symbols from the symbol table in one quick ste
1




 Subcommand/Operands

 DUMP
1




 Subcommand/Operands

 END
1




 Subcommand/Operands

 EQUATE (or EQ)

        symbol

        !data-name!
        !index-name!
        !special register!

     symbol
        is any character conbination that follows the rules for forming
        data-name. It cannot be qualified nor used as a qualifier. NOTE:
        symbol cannot be qualified by program-name.

        A symbol can represent only one data-name, index-name, or COBOL
        register. If the same symbol is used in a second EQUATE subcomma
        second definition is the only one that the system will recognize
        accept. Once a symbol has been defined by an EQUATE subcommand,
        entered into a symbol table. Thereafter, the symbol can be used
        subcommand in place of the data-name, index-name, or special reg
        it represents. The definition is effective until you remove the
        from the symbol table by using the DROP or RUN subcommand or unt
        end the debugging session, whichever comes first. If the symbol
        defined already in the program, the symbol defined in EQUATE tak
        priority.

     data-name
        is any data-name in your program, including a qualified data-nam
        as A of B of C.

     index-name
        is any index-name in your program.

     special register
        is any one of the COBOL special registers.
1




 Subcommand/Operands

 GO
        !statement!

     statement
        may correspond to any COBOL verb recognized by TESTCOB, in the
        currently executing program only.
1




 Subcommand/Operands

 HELP (or H)

        /subcommand-name/  /FUNCTION/
                           /SYNTAX/
                           /OPERANDS/(list of operands)!
                           /ALL/
+                           ___

     subcommand-name
        is the name of the TESTCOB subcommand that you want to find out
        use. Specifying only a subcommand-name in the operand field will
        you an explanation of the function, syntax, and operands of that
        subcommand. If you omit all operands, the system will display a
        all the TESTCOB subcommands that are available for your use.

     FUNCTION
        indicates that you want a description of the function of the sub
        you have specified in subcommand-name.

     SYNTAX
        indicates that you want a description of the syntax of the subco
        you have specified in subcommand-name.

     OPERANDS
        indicates that you want a description of the operands that are u
        with the subcommand you have specified in subcommand-name.

     (list-of-operands)
        is a list of the particular operands that you want described in
        Each operand in this list must be separated from the next by one
        more blanks or by a comma. List-of-operands must be used with OP
        in the HELP subcommand as shown above.

     ALL
        indicates that you want a description of the function, syntax, a
        operands of the subcommand you have specified in subcommand-name
        is the default.
1




 Subcommand/Operands

 IF (expression)   !HALT (or HA)!
                   !GO!

     (expression)
        is an expression that is evaluated immediately when the IF subco
        is executed. If the two operands in the expression are data-name
        must belong to the same program. The format of an expression is:

           addr-1   operator  !value! !addr-2!

        If addr-2 is used, the data attribute (that is, usage and catego
        must be identical to that represented by addr-1. If value is use
        must have the same data type as addr-1. For example, if addr-1 i
        floating-point, the literal must be floating point.

        The rules for comparison, such as collating sequence, truncation
        padding, will be the same as those in the COBOL language.

     HALT
        or its abbreviation, HA, indicates that you want control returne
        the terminal if the expression is true.

     GO
        indicates that you want to restart program execution if the
        expression is true.
1




 Subcommand/Operands

 LIST or L

        !addr!
        !(addr-1/,addr-2/...)!
        !addr-3:addr-4!
        !ALL!

        /PRINT/

     addr
        is the data-name, index-name, or COBOL special register whose co
        you want desplayed on an output device. If addr is a data-name w
        RENAMES clause, the effect will be the same as using the data-na
        which has been renamed except that the LIST output is displayed
        hexadecimal. If addr is a group item, it will be listed, followe
        all the group items and elementary items it contains. Items cont
        data which is invalid for the defined data type will be identifi
        such and displayed in hexadecimal.

     (addr-1,addr-2)
        is a list of several data-names, index-names, or COBOL special
        registers whose contents you want displayed on an output device.
        same rules for addr, described above, apply to this operand.

     addr-3:addr-4
        delimit a range of data-names and index-names whose contents you
        displayed on an output device. Addr-3 and addr-4 may be data-nam
        index-names, or both, but may not be COBOL special registers. Th
        contents of every data-name and index- name between addr-3 and a
        will be displayed. Addr-3 must appear in the program BEFORE addr

     ALL
        indicates you want all index names, data names, and COBOL specia
        registers, and the contents of the TGT table displayed. The tabl
        displayed in hexadecimal.

     PRINT
        indicates that the display is directed to the data set that was
        specified by the user at the beginning of the debugging session.
        PRINT is omitted, the display is directed to the terminal.
1




 Subcommand/Operands

 LISTBRKS  /PRINT/

     PRINT
        indicates that the list is directed to the data set that was spe
        by the user at the beginning of the debugging session. If PRINT
        omitted, the display is directed to the terminal.
1




 Subcommand/Operands

 LISTFILE    file-name   /PRINT/

     file-name
        is an FD name in the source program.

     PRINT
        indicates that the display is directed to the data set that was
        specified by the user at the beginning of the debugging session.
        PRINT is omitted, the display is directed to the terminal.
1




 Subcommand/Operands

 NEXT (or N)
1




 Subcommand/Operands

 OFF    /statement/
        /(statement-1/,statement-2/...)/
        /statement-3:statement-4/

     statement
        is the point where you want to remove an AT breakpoint.

     (statement-1,statement-2)
        are the points where you want to remove AT breakpoints. Use this
        operand if you want to remove AT breakpoints in several nonconse
        statements.

     statement-3:statement-4
        delimit a range of statements where you want to remove all the A
        breakpoints. Statement-3 must appear in the program before state
        All AT breakpoints are removed in this range whether they were
        established by one AT or several AT subcommands.
1




 Subcommand/Operands

 OFFWN  /identifier/
        /(identifier-1/,identifier-2/...)/

     identifier
        is the identifier that you assigned when you entered the WHEN
        subcommand. You can remove a particular WHEN breakpoint by speci
        its unique identifier in the OFFWN subcommand.

     (identifier-1,identifier-2)
        are the unique identifiers of two WHEN breakpoints that you want
        remove. Use this operand to remove several WHEN breakpoints in s
        nonconsecutive statements. This list can include two or more
        identifiers.

        NOTE: If no operand appears in the OFFWN subcommand, all WHEN
        breakpoints are removed.
1




 Subcommand/Operands

 QUALIFY (or Q)     program-name

     program-name
        is a program-name formed according to the COBOL language rules.
        first character of the program-name is a numeric character or a
        you must change it to conform to the COBOL rules.
1




 Subcommand/Operands

 RUN (or R)     /statement/

     statement
        is the point where you wnat program execution to begin; statemen
        refer to any COBOL verb recognized by TESTCOB and in the program
        is executing. If statement is omitted, program execution begins
        point of last interruption.  This statement must appear in the s
        program in which the last interruption occurred; that is, you ca
        transfer control to another program by entering RUN (or GO).
1




 Subcommand/Operands

 SET (or S)   addr-1   =   !addr-2!
                           !value!
     addr-1
        is the data-name that is initialized or modified. The contents o
        addr-2 or value replace the contents of addr-1. Addr-1 cannot co
        or be the object of an OCCURS clause with the DEPENDING ON optio
        your program.

     addr-2
        represents the contents that are moved to addr-1. The data attri
        (that is, usage and category) of addr-2 must be the same as addr
        Addr-2 and addr-1 must be data-names in the same COBOL program o
        subprogram. Truncation and padding occurs according to the COBOL

     value
        must be the same data type (that is, nonnumeric, fixed point, or
        floating point) as addr-1.
1




 Subcommand/Operands

 SOURCE (or SO)   /line number/                    /ddname/
                  /line number-1:line number -2/

     line number
        is the line number in your source program that you want to displ
        the terminal.

     line number-1:line number-2
        delimit the range of line numbers in your source program that yo
        to display at the terminal. Thus, all line numbers between line
        number-1 and line number-2 will be displayed. If no line-number
        is specified in SOURCE, the entire data set is displayed at the
        terminal. This provides compile-time output that can be used for
        reference during the debugging session.

     ddname
        is the name of the file that contains the listing of the source
        produced at compile time. If ddname is omitted, the program-name
        executing program is used as a default ddname. The program-name
        name that appears in the PROGRMAM-ID paragraph of the source pro
1




 Subcommand/Operands

 TRACE (or T)   /ENTRY/  /PRINT/
                /PARA/
+                ____
                /NAME/
                /OFF/

     ENTRY
        causes a display of the program-name every time a COBOL program
        entered.

     PARA
        causes a display of the line number of each paragraph and sectio
        the moment the execution of each paragraph and section begins. T
        the default.

     NAME
        causes a display of the paragraph-name and line number at the mo
        the execution of each paragraph and section begins.

     OFF
        terminates the effect of a previous TRACE subcommand.  (Entering
        subcommand also terminates a previous TRACE.)

     PRINT
        indicates that the display is directed to the data set that was
        specified by the user at the beginning of the debugging session.
        PRINT is omitted or if there is no PRINT file, the display is di
        to the terminal.
1




 Subcommand/Operands

 WHEN (or WN)   identifier   !addr!    !(expression)!

     identifier
        is a user-supplied string of four-or-less alphanumeric character
        Sometime later in the debugging session, you may want to remove
        breakpoint. You use the OFFWN subcommand to do this, and you spe
        the operand field of the OFFWN subcommand the identifier of each
        breakpoint you want to remove. Therefore, each identifier in a W
        subcommand must be unique.

        NOTE: An identifier cannot be qualified.

     addr
        is a data-name whose content or value is evaluated before each C
        verb is executed. If the value is different from that which it
        previously contained when the WHEN subcommand was either entered
        last executed, program execution is stopped at that point, and c
        is returned to the terminal.

     (expression)
        is an expression that is evaluated before each COBOL verb is exe
        If the two operands in the expression are data-names, they must
        to the same program. If the expression is evaluated as being tru
        program execution is stopped at that point and control is return
        the terminal so you can enter additional subcommands if you wish

        All true expressions are identified at the terminal by a message
        contains the program-name, the statement where the interruption
        occurred, and the identifier that the user assigned to that WHEN
        subcommand.
./ ADD NAME=FILEUSE  0100-82202-82202-1603-00010-00010-00000-JS02150
C          00080
FA
FJ             R
D     10 A6                   EQ10 VNONVSAM --             REJ
D     1  V                      1  R1
D     79 R1                     79 R2
D     2  A1     B               2  UINW   B
D     2  V21                  - 2  UINW   B
D     W  A22                    W  R1                   OUTOUT
END
./ ADD NAME=FILEUSE2 0100-84110-84110-0940-00001-00001-00000-JS02150
 BATCHLOG FILEUSE
./ ADD NAME=FLAGMEMB 0100-86100-86100-1030-00013-00013-00000-HG88150
C          81               1
FA F
FJ F           R
D     11 A2                   EQ11 VMEMBER NAME         MEMJCL
*   ***  IF RECORD IS STANDARD JCL
DJCL  81 A1                     81 R1
D     1  V1                     1  UCLR                 OUTOUT
*   ***  IF RECORD IS MEMBER STATEMENT
DMEM  8  A15                    8  R4
D     2  V//                    2  R2
D     4  V$;.*                  4  R13
D     1  V1                     1  UCLR                 OUTOUT
END
./ ADD NAME=FRANPROF 0103-85053-86126-1341-00015-00008-00000-JS02150
REPORT 74 LONG ASA
FILE MASTR FB 80
  INCHAR 1
  DATALINE 80 1  (INFOR)
IF DYLLINE GT 73 AND INCHAR EQ '1'
    MOVE SPACE TO INCHAR
ENDIF
IF INCHAR EQ '1'
    MOVE SPACE TO INCHAR
    LIST ' ' AT 1 WITH EJECT AFTER
ENDIF
LIST DATALINE AT 1
T1 '              >>>  WDPSC CUSTOMER PROFILE  <<<'  FIXED WITH 4 AFTER
T1+60 DYLDATE
FIN
./ ADD NAME=I94TP490 0100-84111-84111-1141-00001-00001-00000-JS02150
 BATCHLOG I94TP490
./ ADD NAME=JCLXREF  0100-84110-84110-0947-00001-00001-00000-JS02150
 BATCHLOG JCLXREF
./ ADD NAME=JCLXREF1                               17OCT89 12.48.04
C          00080                               0000
FA F10008000080
FJ             R
D   L 1  V0                     2  UINW   B
D   L 1  V0                     2  UINX   B
DT1 L 1  U41     W            EQ1  V◊                   T2
D   L 1  U41     W              1  U1      X
D   L 1  V1                   + 1  U18
D   L 1  U18                  GT1  V6                   BAD
D   L 1  V1                   + 2  UINW   B
D   L 1  V1                   + 2  UINX   B             T1 T1
DT2 L 1  U18                  EQ1  V6                      BAD
D   L 1  V1                   + 2  UINW   B
D   L 1  V0                     2  UINX   B
DT3 L 1  U41     W            EQ1  V◊                   T4
D   L 1  U41     W              1  U11     X
D   L 1  V1                   + 1  U19
D   L 1  U19                  GT1  V5                   BAD
D   L 1  V1                   + 2  UINW   B
D   L 1  V1                   + 2  UINX   B             T3 T3
DT4 L 1  U19                  EQ1  V4                   T5
D   L 1  U19                  EQ1  V5                      BAD
DT5 L 16 V LISTPDS DSNAME=      16 R1
D   L 1  V1                   + 2  UINW   B
D   L 2  V16                    2  UINX   B
DT6 L 1  U41     W            EQ1  V◊                   T7
D   L 1  U41     W              1  R1      X
D   L 1  V1                   + 2  U20
D   L 2  U20                  GT2  V44                  BAD
D   L 1  V1                   + 2  UINW   B
D   L 1  V1                   + 2  UINX   B             T6 T6
DT7 L 5  V,VOL=                 5  R1      X
D   L 1  V5                   + 2  UINX   B
D   L 1  U19                    2  UINY   B
D   L Y  U11                    Y  R1      X
D   L 1  U19                  + 2  UINX   B
D   L 1  V=                     1  R1      X
D   L 1  V1                   + 2  UINX   B
D   L 6  U1                     6  R1      X
D   L 1  V0                     2  URTC   B
D   L 1  V2                     1  UEOJ                 OUTOUT
DBADL 1  V8                     2  URTC   B
D     1  V2                     1  UEOJ                 REJREJ
END
./ ADD NAME=JCLXREF2                               17OCT89 12.48.04
C           80                MEMBER NAME=
FA
FJ             R
D    115 VPUNCH TYPORG=PO       15 R4
D    120 V,MAXNAME=600          20 R19
D    1                        WJ
D     3   17                  EQ3  U41                     REJ
D     8   12                    8  U13
D     65 U1                     65 R4
D                             WJ
D     1  VY                     1  U70                  OUTOUT
D   L 1  U70                  EQ1  VY                      EJ2
D   L 1  V0                     2  URTC   B             EJ3EJ3
DEJ2L 1  V8                     2  URTC   B
DEJ3  1  V2                     1  UEOJ                 REJREJ
./ ADD NAME=JCLXREF3                               17OCT89 12.48.04
 SORT FIELDS=(16,8,CH,A)
./ ADD NAME=JCLXREF4                               17OCT89 12.48.04
C
FA
D     6   4                   EQ6  VMEMBER              OUTREJ
R01 60 80
T1                        WASHINGTON STATE LIQUOR CONTROL BOARD
T2                         SUMMARY OF CATALOGUED PROCEDURES
T2 2 U8011195-1
P   8  UEDT      15
P   8   16                  X            PROCEDURE'NUMBER
./ ADD NAME=JCLXREF5                               17OCT89 12.48.04
C          80
FA
FJ             R
D     80  2                     80 R1
D     6  R1                   EQ6  VMEMBER                 OUT
D     8  R14                    8  U41                  REJREJ
R01 60         E
T1                                                 WASHINGTON STATE LIQ
T1   UOR CONTROL BOARD
T2                                                        CATALOGUED PR
T2 2 OCEDURES                                        U8211195-2
P   8  U41                1 S            PROCEDURE NUMBER
P   80 R1                   X            JCL STATEMENTS
P   30 ULDT      2001                   *DATE AND PAGE NUMBER
./ ADD NAME=JCLXREF6                               17OCT89 12.48.04
C          148
FA
FJ             R
D      1  1                   EQ1  VP                      S
DP                            PS                        CP EXT
D      1  1                       1R1
D      1 V                        1R2
D      3 V000                     3R19
D     6   10                    6  R82
D      8  2                       8R3                   OUTOUT
DS     1  1                   EQ  1VS                      D
D      1  1                       1R1
D      8  2                       8R11
D      3 V001                  +  3R19
D     6  R82                    6  U1
D                             PS                        CS EXT
D     6  U1                     6  R82
D     7   18                    7  R88
D      8  10                      8R22                  OUTOUT
DD     1  1                   EQ  1VD                      REJ
D      1  1                       1R1
D      8  2                       8R30
D      44 10                     44R38                  OUTOUT
DCP   8  V                      8  R11
D     8  V                      8  R22
DCS    8 V                        8R30
D     20 V                       20R38
D     20 V                       20R58
D     20 V                       20R78
D     20 V                       20R98
D     10 V                       10R118
DEXT  20 V                       20R128
R01 60
T1                                                 WASHINGTON STATE LIQ
T1   UOR CONTROL BOARD
T2                                                            SYSTEM RE
T2 2 PORT                                            U3211195-02
P   6  R82                  S
P   8  R3                   S            PROCEDURE
P   3  R19             Z    S            STEP' NUMBER
P   8  R11                  S            STEPNAME
P   8  R22                  S            PROGRAM' NAME
P   7  R88                  S
P   8  R30                  S            DDNAME
P   44 R38                  X            DATA SET NAME
P   30 ULDT      2001
./ ADD NAME=JCLXREF7                               17OCT89 12.48.04
 SORT FIELDS=(22,8,A,3,8,A,11,8,A),FORMAT=CH
./ ADD NAME=JCLXREF8                               17OCT89 12.48.04
C
FA
D     1   1                   EQ1  VS                      REJ
R01 060090    1 2 2
T1                               WASHINGTON STATE LIQUOR CONTROL BOARD
T2                                       PROGRAM CROSS REFERENCE
T2 2  U3311195-02
P   7   88                  X
P   8   22                  S            PROGRAM NUMBER
P   6   82                  X
P   8   3                   S            PROCEDURE NAME
P   8   11                  X            STEP NAME
P   3   19             E    X            STEP NUMBER
END
./ ADD NAME=JCLXREF9                               17OCT89 12.48.04
 SORT FIELDS=(38,43,A,3,8,A,11,8,A),FORMAT=CH
./ ADD NAME=JCLXRF0B                               17OCT89 12.48.04
C          88               1
*   BUILD OUTPUT RECORDS WITH JOB NAME IN ALL RECORDS RELATED TO A
*  PARTICULAR NON-CATLGD PROCEDURE FOR PURPOSES OF SORTING AND
*  SUBSEQUENT REPORTING
FA F
FJ F           R   1
D     3   12                  EQ3  VJOB                    MTR
D     8   3                     8  R1
DMTR  80  1                     80 R9                   OUTOUT
./ ADD NAME=JCLXRF0C                               17OCT89 12.48.04
   SORT FIELDS=(4,2,CH,A,1,3,CH,A)
   END
./ ADD NAME=JCLXRF0D                               17OCT89 12.48.04
C
FA
D     3   20                  EQ3  VJOB                    OUT
D     8   11                    8  U41                  OUTOUT
R01 60          E
T1                                                 WASHINGTON STATE LIQ
T1   UOR CONTROL BOARD
T2                                                      NON-CATALOGUED
T2 2 PROCEDURES                                      U7911195-2
P   8  U41                1 S            PROCEDURE NUMBER
P   80  9                   X            JCL STATEMENTS
P   30 ULDT      2001                   *DATE AND PAGE NUMBER
./ ADD NAME=JCLXRF10                               17OCT89 12.48.04
C
FA
D     1   1                   EQ1  VD                      REJ
R01 060       1 2 2
T1                                                  WASHINGTON STATE LI
T1   QUOR CONTROL BOARD
T2       U3411195-02                                        DATA SET CR
T2 2 OSS REFERENCE                     DATE
P   43  38               L  S            DATA SET NAME
P   6   82                  X
P   8   3                   S            PROCEDURE NAME
P    8  11                  S            STEP NAME
P   3   19             E    S            STEP'NUMBER
P   7   88                  X
P   8   22                  S            PROGRAM NUMBER
P   8   30                  X            DD NAME
P   30 ULDT      2101                   *DATE AND PAGE HEADING
END
./ ADD NAME=JCLXRTWO 0101-83215-83350-1458-00019-00016-00000-JS02150
C          00080              MEMBER NAME=
FA
FJ             R
D    115 VPUNCH TYPORG=PO       15 R4
D    120 V,MAXNAME=600          20 R19
D    1                        WJ
D     3  U41                  EQ3  VALL                 AWL
D     3  A6                   EQ3  U41                     REJ
DAWL  8  A1                     8  U13
D     40 U1                     40 R4
D     3  V                      3  R44
D     22 U44                    22 R47
D                             WJ
D     1  VY                     1  U70                  OUTOUT
D   L 1  U70                  EQ1  VY                      EJ2
D   L 1  V0                     2  URTC   B             EJ3EJ3
DEJ2L 1  V8                     2  URTC   B
DEJ3  1  V2                     1  UEOJ                 REJREJ
END
./ ADD NAME=JOBSTATS 0107-85108-88270-1310-00072-00072-00014-HG00155
 FILE FILEIN FB 124
  SMF64TME     4           (STEP'END)
  SMF64DTE     4 PD
  SMF64JBN     8           (JOB NAME)
  JOBPRFIX     3 9
  FILLER       2 12
  JOBSUFIX     3 14
  SMF64RST     4 17        (STRT'TIME)
  FILLER       1
  SMF64RSD     3 PD        (JOB'DATE)
  SMF64DNM     44          (VSAM DSN)
  SMF64NLR     4 BI Z      (RECORD'TOTAL)
  SMF64NFS     4 BI
  FILLER       2 BI
  SMF64NCS     2 BI Z      (TOT'CI'SPLT)
  FILLER       2
  SMF64NAS     2 BI Z      (TOT'CA'SPLT)
  FILLER       1 BI
  SMF64DDE     3 BI Z      (REC'DEL)
  FILLER       1 BI
  SMF64DIN     3 BI Z      (REC'INS)
  FILLER       1 BI
  SMF64DUP     3 BI Z      (REC'UPD)
  FILLER       1
  SMF64DRE     3 BI Z      (REC'READ)
  SMF64DFS     4 BI
  FILLER       2
  SMF64DCS     2 BI Z      (JOB'CI'SPLT)
  FILLER       2
  SMF64DAS     2 BI Z      (JOB'CA'SPLT)
  FILLER       1
  SMF64DEP     3 BI Z      (JOB'EXCPS)
  FILLER       1
  SMF64XTN     1 BI Z      (EX'TNS)
  SMF64VSR     6           (VOLSER)
WORKAREA
   AGENCY       3
   NONREAD      3  BI  Z  (UPDTS'INSRTS'DELS)
  ON ONE
  MOVE DYLPARM TO AGENCY
  ENDONE
  IF JOBSUFIX NE AGENCY REJECT ENDIF
  IF JOBSUFIX EQ '155' AND JOBPRFIX EQ 'CIC' REJECT ENDIF
  IF SMF64DEP GT 200 GOTO SORTEM ELSE REJECT ENDIF
SORTEM:
  SORT FILEIN USING SMF64JBN SMF64RSD SMF64TME
   NONREAD = SMF64DDE + SMF64DIN + SMF64DUP
  REPORT 145 WIDE
  CONTROL SMF64JBN
  LIST SUPPRESS SMF64JBN SUPPRESS SMF64RSD
   SMF64TME
   SMF64DNM
   SMF64VSR
   SMF64NLR
   SMF64DEP
   SMF64DRE
   NONREAD
   SMF64DAS
   SMF64DCS
   SMF64XTN
                        WITH 1 BEFORE
  ON CHANGE SMF64JBN
  LIST 'TOTALS' AT SMF64VSR SUM SMF64DEP
                            SUM SMF64DRE
                            SUM NONREAD
                            SUM SMF64DAS
                            SUM SMF64DCS
          WITH 1 BEFORE AND WITH 2 AFTER
 T1 'VSAM ACTIVITY BY JOB SHOWING DETAIL FILE ACTIONS'
 T1+5 DYLDATE
 T1+125 DYLPAGE
 T2 ' '
./ ADD NAME=KILLGDG  0100-84110-84110-0948-00001-00001-00000-JS02150
 BATCHLOG KILLGDG
./ ADD NAME=LLINKDYL 0109-80133-80318-1502-00063-00010-00000-JS02150
C          00080              1
FA F
FJ F           R
D     1  U1                   EQ1  V1                      LB1
D     7  A45                  EQ7  VLISTIDR                REJ
D     1  V2                     1  U1                   T1 T1
DLB1  15 A28                  EQ15 VWAS PRODUCED BY     T2
D     5  A12                  EQ5  VCSECT               T3
D     1  A83                  EQ1  V/                   T4 REJ
DT1   20 V                      20 R1
D     10 V                      10 R21
D     20 A57                    20 R31
D     20 V                      20 R51
D     10 V                      10 R71
D                             WJ
D     1  V                      1  R1
D     79 R1                     79 R2
D                             WJ
D     1  V-                     1  R1
D     77 R1                     77 R2
D                             WJ
D     1  V                      1  R1
D     79 R1                     79 R2
D                             WJ                        OUTOUT
DT2   6  V                      6  R1
D     34 A7                     34 R7
D     18 A70                    18 R41
D     2  A104                   2  U11
D     3  A92                    3  U13
D         JTOSDATE            EL    U11,U21
D     2  U23                    2  R59
D     1  V/                     1  R61
D     2  U25                    2  R62
D     1  V/                     1  R64
D     2  U21                    2  R65
D     10 V                      10 R67
D     4  V                      4  R77
D                             WJ
D     1  V                      1  R1
D     79 R1                     79 R2
D                             WJ
D     1  V-                     1  R1
D     77 R1                     77 R2
D                             WJ
D     1  V                      1  R1
D     79 R1                     79 R2
D                             WJ                        OUTOUT
DT3   80 A11                    80 R1
D                             WJ
D     1  V                      1  R1
D     79 R1                     79 R2
D                             WJ                        OUTOUT
DT4   2  A81                    2  U11
D     3  A84                    3  U13
D         JTOSDATE            EL    U11,U21
D     68 A11                    68 R1
D     2  U23                    2  R69
D     1  V/                     1  R71
D     2  U25                    2  R72
D     1  V/                     1  R74
D     2  U21                    2  R75
D     4  V                      4  R77
D                             WJ                        OUTOUT
./ ADD NAME=LOADXREF 0100-84110-84110-0948-00001-00001-00000-JS02150
 BATCHLOG LOADXREF
./ ADD NAME=LODXREF1                               17OCT89 12.48.04
  LISTLOAD OUTPUT=ALL,DDN=OURLIB
./ ADD NAME=LODXREF2                               17OCT89 12.48.04
    SORT FIELDS=(1,8,CH,A,9,8,CH,A)
./ ADD NAME=LODXREF3                               17OCT89 12.48.04
    SORT FIELDS=(9,8,CH,A,1,8,CH,A)
./ ADD NAME=MOD2TAPE 0100-84110-84110-0949-00001-00001-00000-JS02150
 BATCHLOG MOD2TAPE
./ ADD NAME=OPTBLOCK 0100-84157-84157-1537-00001-00001-00000-JS02150
 BATCHLOG OPTBLOCK
./ ADD NAME=PANRESTR 0100-84110-84110-0950-00001-00001-00000-JS02150
 BATCHLOG PANRESTR
./ ADD NAME=PROCLIST 0100-84110-84110-0950-00001-00001-00000-JS02150
 BATCHLOG PROCLIST
./ ADD NAME=PRTCPGM  0100-87213-87213-1043-00021-00021-00000-JS02155
FILE INCPGM
   READLINE 80
   NEWPGE    5 1
FILE MICMOUSE
   PRTCHAR   1 1
   PGMLINE 127 6
FILE OUTCLIST OUTPUT FROM MICMOUSE
WORKAREA
   TOPOFPAGE 1 VALUE 'N'
IF NEWPGE EQ '/* np'
   MOVE 'Y' TO TOPOFPAGE
   REJECT
   ENDIF
MOVE SPACE TO MICMOUSE LENGTH 133
MOVE READLINE TO PGMLINE
TRANSLATE PGMLINE FROM X'104A4F6370717275768A8E8F9CB1B2'
                    TO X'6EADBD4F4F1B1F1B1E2D1E1C2D1F1C'
IF TOPOFPAGE EQ 'Y'
   MOVE '1' TO PRTCHAR
   MOVE 'N' TO TOPOFPAGE
   ENDIF
./ ADD NAME=PRTLB92A 0103-87260-87261-1328-00036-00011-00000-JS02155
FILE INREC FB 80 LENGTH LEN1
     PDS DSNFIELD MEMBER MEMNAME STATUS STATIND
     MEMREC 80
FILE OUTRC FB 90 OUTPUT FROM OUTRC
     OUTREC  90
        REAL_RECORD 8 31
WORKAREA
  LIBRARY_REC 90
      FILLER 20 1 VALUE '      LIBRARY NAME: '
      LIBRARY_NAME 44
WORKAREA
  DATE_REC 90
      FILLER 20 1 VALUE '      CURRENT DATE: '
      PRINT_DATE 8
MOVE DYLPARM TO LIBRARY_NAME
MOVE DYLDATE TO PRINT_DATE
MOVE SPACES TO OUTREC
WRITE OUTRC
MOVE SPACES TO OUTREC
WRITE OUTRC
MOVE LIBRARY_REC TO OUTREC
WRITE OUTRC
MOVE SPACES TO OUTREC
WRITE OUTRC
MOVE DATE_REC TO OUTREC
WRITE OUTRC
MOVE SPACES TO OUTREC
WRITE OUTRC
MOVE SPACES TO OUTREC
WRITE OUTRC
READPDS:
  READDIR INREC
  IF STATIND  EQ 'E' STOP ENDIF
  MOVE MEMNAME TO REAL_RECORD
  WRITE OUTRC
  GOTO READPDS
./ ADD NAME=PRTLB92B 0107-87261-87265-1654-00024-00006-00000-JS02155
FILE INFILE
    INREC 84 2
    LEADING_DASHES 11 2
    TRAILING_DASHES 11 21
FILE OUTFILE OUTPUT FROM OUTFILE FB 90
    OUTREC 84 7
MOVE SPACES TO OUTFILE LENGTH 90
ON ONE
   MOVE '1' TO OUTFILE
   WRITE OUTFILE
   MOVE SPACES TO OUTFILE LENGTH 90
ENDONE
IF   LEADING_DASHES EQ '---------- '
 AND TRAILING_DASHES EQ ' ----------'
   WRITE OUTFILE
   WRITE OUTFILE
ENDIF
MOVE INREC TO OUTREC
WRITE OUTFILE
IF   LEADING_DASHES EQ '---------- '
 AND TRAILING_DASHES EQ ' ----------'
   MOVE SPACES TO OUTFILE LENGTH 90
   WRITE OUTFILE
ENDIF
./ ADD NAME=PRTLB92C 0101-87264-87265-1011-00001-00002-00000-JS02155
          089100090   000000N
./ ADD NAME=PRTLIB90 0100-84110-84110-0952-00001-00001-00000-JS02150
 BATCHLOG PRTLIB90
./ ADD NAME=RECVPAT  0100-86301-86301-1534-00011-00011-00000-KX00150
TSOEXEC RECEIVE
COPY DSN(DYYDDD.THHMMSS.WORK1)
COPY DSN(DYYDDD.THHMMSS.WORK2)
COPY DSN(DYYDDD.THHMMSS.WORK3)
COPY DSN(DYYDDD.THHMMSS.WORK4)
COPY DSN(DYYDDD.THHMMSS.WORK5)
COPY DSN(DYYDDD.THHMMSS.WORK6)
COPY DSN(DYYDDD.THHMMSS.WORK7)
COPY DSN(DYYDDD.THHMMSS.WORK8)
COPY DSN(DYYDDD.THHMMSS.WORK9)
END
./ ADD NAME=RELINK   0100-84110-84110-0953-00001-00001-00000-JS02150
 BATCHLOG RELINK
./ ADD NAME=RJESUBIT 0100-84110-84110-0953-00001-00001-00000-JS02150
 BATCHLOG RJESUBIT
./ ADD NAME=SPLITTER 0100-84242-84242-1041-00052-00052-00000-JS02150
$DEFAULT #1=FB #2=80 #3=NULL
$DEND
OPTION STRUCTURED
FILE INFILE #1 #2 COUNT INCOUNT
FILE OUTFILE1 OUTPUT FROM INFILE
FILE OUTFILE2 OUTPUT FROM INFILE
FILE OUTFILE3 OUTPUT FROM INFILE
FILE OUTFILE4 OUTPUT FROM INFILE
FILE OUTFILE5 OUTPUT FROM INFILE
FILE OUTFILE6 OUTPUT FROM INFILE
FILE OUTFILE7 OUTPUT FROM INFILE
FILE OUTFILE8 OUTPUT FROM INFILE
WORKAREA
  NORECS  9 NU
  NORECS2 9 NU
  NORECS3 9 NU
  NORECS4 9 NU
  NORECS5 9 NU
  NORECS6 9 NU
  NORECS7 9 NU
  NORECS8 9 NU
ON ONE
   NORECS = 2800000 / #2
$IF #3
   NORECS = #3
$IFE
   NORECS2 = NORECS * 2
   NORECS3 = NORECS * 3
   NORECS4 = NORECS * 4
   NORECS5 = NORECS * 5
   NORECS6 = NORECS * 6
   NORECS7 = NORECS * 7
   NORECS8 = NORECS * 8
   ENDONE
CASE INCOUNT
   WHEN LE NORECS
      WRITE OUTFILE1
   WHEN LE NORECS2
      WRITE OUTFILE2
   WHEN LE NORECS3
      WRITE OUTFILE3
   WHEN LE NORECS4
      WRITE OUTFILE4
   WHEN LE NORECS5
      WRITE OUTFILE5
   WHEN LE NORECS6
      WRITE OUTFILE6
   WHEN LE NORECS7
      WRITE OUTFILE7
   ELSE
      WRITE OUTFILE8
   ENDCASE
./ ADD NAME=SPLTINPT 0100-84242-84242-1100-00006-00006-00000-JS02150
FILE INFILE DUMMY
FILE OUTFILE OUTPUT FROM OUTFILE FB 80
  RECOUT  80
MOVE DYLPARM TO RECOUT
WRITE OUTFILE
STOP
./ ADD NAME=STRCTDYL 0102-85014-85183-1026-00022-00021-00000-GD02150
STATEOFF
OPTION STRUCTURED NOTOTAL
FILE INFILE COUNT INCOUNT
   INREC   80
FILE OUTFILE OUTPUT FROM OUTFILE FB 80
   OUTREC  80
   OUTCHAR  1 1
IF INCOUNT GT 1
   WRITE OUTFILE
   ENDIF
MOVE INREC TO OUTREC
ON END OF INPUT
   INX = 71
   DOWHILE OUTCHAR (INX) EQ SPACE AND INX GE 1
      INX = INX - 1
      ENDDO
   IF OUTCHAR (INX) NE ';'
      INX = INX + 1
      MOVE ';' TO OUTCHAR (INX)
      ENDIF
   WRITE OUTFILE
   STOP
./ ADD NAME=STRUCTLC 0100-84110-84110-0954-00001-00001-00000-JS02150
 BATCHLOG STRUCTLC
./ ADD NAME=STRUCTRM 0101-84110-84110-0955-00001-00001-00000-JS02150
 BATCHLOG STRUCTRM
./ ADD NAME=STR33RM1 0104-84179-84181-0809-00042-00048-00000-JS02150
 DEF CL-
      (NAME(VSAMT.EXCHANGE.**** REPLACE ME ****.EDIT)-
          CYL(1 3)-
          VOL(338019)-
          RECSZ(200 200)-
          NUMD) -
          CAT(SYS1.USERCATT)
 DEF CL-
      (NAME(VSAMT.EXCHANGE.**** REPLACE ME ****.CTEXT)-
          CYL(1 3)-
          VOL(338019)-
          RECSZ(88 88)-
          NUMD) -
          CAT(SYS1.USERCATT)
 DEF CL-
      (NAME(VSAMT.EXCHANGE.**** REPLACE ME ****.CENTRY)-
          CYL(1 3)-
          VOL(338019)-
          RECSZ(12 12)-
          NUMD) -
          CAT(SYS1.USERCATT)
 DEF CL-
      (NAME(VSAMT.EXCHANGE.**** REPLACE ME ****.PAGEFILE)-
          CYL(1 3)-
          VOL(338019)-
          RECSZ(88 88)-
          NUMD) -
          CAT(SYS1.USERCATT)
 DEF CL-
      (NAME(VSAMT.EXCHANGE.**** REPLACE ME ****.REFER)-
          CYL(1 3)-
          VOL(338019)-
          RECSZ(159 159)-
          NUMD) -
          CAT(SYS1.USERCATT)
 DEF CL-
      (NAME(VSAMT.EXCHANGE.**** REPLACE ME ****.UNDEF)-
          CYL(1 3)-
          VOL(338019)-
          RECSZ(155 155)-
          NUMD) -
          CAT(SYS1.USERCATT)
./ ADD NAME=STR33RM2 0102-84179-84180-1304-00006-00006-00000-JS02150
      DEL  (VSAMT.EXCHANGE.**** REPLACE ME ****.EDIT) PURGE CL
      DEL  (VSAMT.EXCHANGE.**** REPLACE ME ****.CTEXT) PURGE CL
      DEL  (VSAMT.EXCHANGE.**** REPLACE ME ****.CENTRY) PURGE CL
      DEL  (VSAMT.EXCHANGE.**** REPLACE ME ****.PAGEFILE) PURGE CL
      DEL  (VSAMT.EXCHANGE.**** REPLACE ME ****.REFER) PURGE CL
      DEL  (VSAMT.EXCHANGE.**** REPLACE ME ****.UNDEF) PURGE CL
./ ADD NAME=TELESORT 0100-84110-84110-0955-00001-00001-00000-JS02150
 BATCHLOG TELESORT
./ ADD NAME=TSTPRT   0101-84129-84159-1342-00200-00200-00000-KK00150
LINE  1
LINE  2
LINE  3
LINE  4
LINE  5
LINE  6
LINE  7
LINE  8
LINE  9
LINE 10
LINE 11
LINE 12
LINE 13
LINE 14
LINE 15
LINE 16
LINE 17
LINE 18
LINE 19
LINE 20
LINE 21
LINE 22
LINE 23
LINE 24
LINE 25
LINE 26
LINE 27
LINE 28
LINE 29
LINE 30
LINE 31
LINE 32
LINE 33
LINE 34
LINE 35
LINE 36
LINE 37
LINE 38
LINE 39
LINE 40
LINE 41
LINE 42
LINE 43
LINE 44
LINE 45
LINE 46
LINE 47
LINE 48
LINE 49
LINE 50
LINE 51
LINE 52
LINE 53
LINE 54
LINE 55
LINE 56
LINE 57
LINE 58
LINE 59
LINE 60
LINE 61
LINE 62
LINE 63
LINE 64
LINE 65
LINE 66
LINE 67
LINE 68
LINE 69
LINE 70
LINE 71
LINE 72
LINE 73
LINE 74
LINE 75
LINE 76
LINE 77
LINE 78
LINE 79
LINE 80
LINE 81
LINE 82
LINE 83
LINE 84
LINE 85
LINE 86
LINE 87
LINE 88
LINE 89
LINE 90
LINE 91
LINE 92
LINE 93
LINE 94
LINE 95
LINE 96
LINE 97
LINE 98
LINE 99
LINE100
LINE101
LINE102
LINE103
LINE104
LINE105
LINE106
LINE107
LINE108
LINE109
LINE110
LINE111
LINE112
LINE113
LINE114
LINE115
LINE116
LINE117
LINE118
LINE119
LINE120
LINE121
LINE122
LINE123
LINE124
LINE125
LINE126
LINE127
LINE128
LINE129
LINE130
LINE131
LINE132
LINE133
LINE134
LINE135
LINE136
LINE137
LINE138
LINE139
LINE140
LINE141
LINE142
LINE143
LINE144
LINE145
LINE146
LINE147
LINE148
LINE149
LINE150
LINE151
LINE152
LINE153
LINE154
LINE155
LINE156
LINE157
LINE158
LINE159
LINE160
LINE161
LINE162
LINE163
LINE164
LINE165
LINE166
LINE167
LINE168
LINE169
LINE170
LINE171
LINE172
LINE173
LINE174
LINE175
LINE176
LINE177
LINE178
LINE179
LINE180
LINE181
LINE182
LINE183
LINE184
LINE185
LINE186
LINE187
LINE188
LINE189
LINE190
LINE191
LINE192
LINE193
LINE194
LINE195
LINE196
LINE197
LINE198
LINE199
LINE200
./ ADD NAME=UCC11TBL 0101-83252-83252-1355-00001-00001-00000-GD02150
OPTION RESTORE UCC11TAB
./ ADD NAME=UCC11TB1 0100-85291-85291-1323-00001-00001-00000-GD02150
OPTION RESTORE UCC11TA1
./ ADD NAME=VBCHART  0100-84110-84110-0956-00001-00001-00000-JS02150
 BATCHLOG VBCHART
./ ADD NAME=VERIFY   1700-85128-85128-1006-00001-00001-00000-REL17
OPTION VERIFY
./ ADD NAME=XMIT     0106-87146-87146-1259-00001-00001-00000-GS00150
~~EOT~~
