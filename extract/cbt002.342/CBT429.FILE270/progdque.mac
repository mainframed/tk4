PROGDQUE CSECT
***********************************************************************
*                                                                     *
*   INITIALIZE FOR EXECUTION USE STANDARD MVS REGISTER CONVENTIONS    *
*                                                                     *
***********************************************************************
         USING *,R12
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         STM   R14,R12,D12(R13)
         LR    R12,R15
         ST    R13,SAVE+D4
         LA    R5,SAVE
         ST    R5,D8(R13)
         LR    R13,R5
         SPACE
         CALL  RETURN
         LTR   R15,R15
         BNZ   STAB
         LA    R15,1
STAB     ST    R15,TABSIZE
         SPACE
***********************************************************************
*                                                                     *
*   OPEN SYSIN FILE. OPEN UTILITY FILE. CHECK OPENS.                  *
*                                                                     *
***********************************************************************
         OPEN  (DCB1,(INPUT))
         LA    R2,D1
         TM    DCB1+D48,F10
         BNO   ABEND1               U0001 ABEND
         OPEN  (DCB2,(OUTPUT))
         LA    R2,D2
         TM    DCB1+D48,F10
         BNO   ABEND1               U0002 ABEND
***********************************************************************
*                                                                     *
*   READ SYSIN AND BUILD TERMINAL TABLES(QABS). WRITE QABS TO SYSUT1. *
*                                                                     *
***********************************************************************
INIT1    L     R5,C0008             POINT PAST QUEUE HEADER IN QAB
         L     R7,TABSIZE           INDICATE NUMBER OF BLOCKS FOR QABS
         STH   R7,QABHEAD+D2        MAKE NEXT BLOCK FIRST FREE ELEMENT
         MVC   QBUF(L8),QABHEAD     MOVE QAB HEADER TO BUFFER.
QUE1     GET   DCB1,INPUT           READ PRINTER NAME AND TYPE FILE
         CLI   INPUT,C'*'           IS IT A COMMENT?
         BE    QUE1                 YES - READ ANOTHER CARD
         CL    R5,C2456             HAVE WE PREVIOUSLY FILLED THIS QAB?
         BNH   QUE2                 NO - PROCEED TO BUILD ANCHOR ENTRY
         PUT   DCB2,QBUF            WRITE THIS QAB TO SYSUT1
         LA    R2,D3                PREPARE FOR INSUFFICIENT QAB BLOCKS
         BCT   R7,QUE3              QAB BLOCKS LEFT? YES-INIT NEXT BLK
         B     ABEND1               NO - U0003 ABEND
QUE3     MVC   QBUF(L8),ZEROES      INITIALIZE NEXT QAB BLOCK
         L     R5,C0008             POINT PAST QAB HEADER
QUE2     LA    R6,QBUF(R5)          ADDRESS THIS ANCHOR BLOCK ENTRY
         MVC   D0(L8,R6),INPUT      MOVE NODE NAME TO ENTRY
         MVC   D8(L8,R6),ZEROES     INITIALIZE QUE PTRS TO ZEROES
         LA    R2,D4                PREPARE FOR UNKNOWN FEATURES COMBO
         LA    R1,ACODE             R1->TYPE CODE TABLE
Q4LOOP   CLI   0(R1),X'00'          END OF TABLE?
         BE    ABEND1               OOPS - U0004 ABEND
         CLC   0(1,R1),INPUT+D9     IS IT CORRECT ENTRY?
         BE    SETTYPE              YES - COPY IT TO QAB
         LA    R1,9(,R1)            R1->NEXT TAB ENTRY
         B     Q4LOOP               GO CHECK IT OUT
SETTYPE  MVC   D16(L8,R6),1(R1)     MOVE FEATURES TO ENTRY
         MVC   INPUT+D9(2),=H'3'    SET A LENGTH VALUE
         LA    R1,=A(INPUT+D9)      R1->ADDR OF LENGTH,DATA FIELD
         CALL  RETURN               READ PAGELEN
         LTR   R15,R15              ANY DATA?
         BZ    TRYWIDTH             NOPE
         STC   R15,D16+3(,R6)       SAVE NEW PAGELEN
TRYWIDTH MVC   INPUT+13(2),=H'3'    SET A LENGTH VALUE
         LA    R1,=A(INPUT+13)      R1->ADDR OF LENGTH,DATA FIELD
         CALL  RETURN               READ WIDTH
         LTR   R15,R15              ANY DATA?
         BZ    NOWID                NOPE
         STC   R15,D16+2(,R6)       SAVE NEW PAGELEN
NOWID    AL    R5,C0024             POINT TO NEXT ENTRY
         B     QUE1                 GO READ SYSIN
***********************************************************************
*                                                                     *
*   EOF ON SYSIN. CLOSE OUT QABS. FLAG LAST QAB USED AND ZERO REST.   *
*                                                                     *
***********************************************************************
END1     CL    R5,C2456             PREV ENTRY LAST IN QAB?
         BH    END1A                YES - GO FLAG AND WRITE QAB
         LA    R6,QBUF(R5)          ADDRESS THIS ENTRY
         MVC   D0(L24,R6),ZEROES    ZERO ENTRY
         AL    R5,C0024             POINT TO NEXT ENTRY
         B     END1                 GO CHECK FOR LAST ENTRY AGAIN
END1A    MVI   QBUF,QABLAST         FLAG QAB AS LAST USED
END1B    PUT   DCB2,QBUF            WRITE QAB TO SYSUT1
         BCT   R7,END2              IS IT LAST ALLOCATED QAB BLOCK?
         B     QUE10                YES - GO BUILD PQE CHAINS
END2     SR    R5,R5                NO - POINT TO BEGINNING OF NEXT QAB
END2A    LA    R6,QBUF(R5)          ADDRESS QAB
         MVC   D0(L80,R6),ZEROES    ZERO 80 BYTES OF QAB
         CL    R5,C2400             ALL ZIPPED OUT?
         BE    END1B                YES - WRITE QAB
         AL    R5,C0080             INCREMENT TO NEXT 80 BYTES
         B     END2A                GO ZIP IT
***********************************************************************
*                                                                     *
*   INITIALIZE QUEUE BLOCKS FOR FREE ELEMENT CHAINS(PQE).             *
*                                                                     *
***********************************************************************
QUE10    L     R4,TABSIZE           POINT TO BLOCK FOR FIRST PQE
         L     R7,QUESIZE           NUMBER OF BLOCKS FOR PQES
         SR    R5,R5                POINT TO FIRST PQE IN THIS BLOCK
QUE13    LA    R6,QBUF(R5)          ADDRESS THE PQE
         MVC   D0(L80,R6),ZEROES    ZERO THE ENTRY
         CL    R5,C2400             IS IT THE LAST PQE IN THIS BLOCK?
         BNE   QUE11                NO - GO POINT TO NEXT PQE THIS BLK
         L     R6,TABSIZE           LOAD QAB SIZE
         AL    R6,QUESIZE           ADD PQE SIZE
         SL    R6,C0001             SUBTRACT ONE. SHOULD EQUAL LAST BLK
         CLR   R4,R6                IS IT LAST BLOCK?
         BNE   QUE14                NO - GO POINT TO FIRST PQE NEXT BLK
         CL    R7,C0001             DOES PQE BLOCK COUNT CONCUR?
         BE    QUE12                LAST PQE THIS BLOCK HAS ZERO PTRS
         LA    R2,D5                CONFLICT ON QUEUE SIZE
         B     ABEND1               U0005 ABEND
QUE12    PUT   DCB2,QBUF            WRITE PQE BLOCK TO SYSUT1
         BCT   R7,QUE13             LAST PQE BLOCK? NO CONTINUE CHAIN
         L     R6,C2400             POINT TO LAST PQE LAST BLOCK
         LA    R6,QBUF(R6)          ADDRESS IT
         CLC   D0(L4,R6),ZEROES     DOES IT POINT NOWHERE?
         BE    END3                 YES - GO COPY QUEUE
         LA    R2,D6                BAD POINTER IN LAST PQE IN LAST BLK
         B     ABEND1               U0006 ABEND
QUE11    STH   R4,QBUF(R5)          STORE THIS BLK AS NEXT PQE BLK PTR
         LR    R6,R5                SET UP TO INCREMENT PQE BYTE OFFSET
         AL    R6,C0080             POINT TO NEXT PQE OFFSET THIS BLOCK
         STH   R6,QBUF+D2(R5)       STORE NEXT PQE OFFSET IN THIS BLOCK
         LR    R5,R6                INCREMENT PQE OFFSET PTR TO NEXT
         B     QUE13                GO BUILD ANOTHER PQE
QUE14    AL    R4,C0001             INCREMENT BLOCK POINTER
         STH   R4,QBUF(R5)          STORE NEXT BLK IN THIS PQE BLK PTR
         SR    R5,R5                POINT TO FIRST PQE NEXT BLOCK
         B     QUE12                GO BUILD FIRST PQE NEXT BLOCK
***********************************************************************
*                                                                     *
*   CLOSE SYSIN. CLOSE SYSUT1. REOPEN FOR INPUT. OPEN SYSUT2 OUTPUT.  *
*                                                                     *
***********************************************************************
END3     CLOSE DCB1
         CLOSE DCB2
         OPEN  (DCB2,(INPUT))
         LA    R2,D7
         TM    DCB2+D48,F10
         BNO   ABEND1               U0007 ABEND
         OPEN  (DCB3,(OUTPUT))
         LA    R2,D8
         TM    DCB3+D48,F10
         BNO   ABEND1               U0008 ABEND
***********************************************************************
*                                                                     *
*   COPY NEW QUEUE FROM UTILITY DATA SET TO THE REAL ONE.             *
*                                                                     *
***********************************************************************
END3A    GET   DCB2,QBUF            READ BLOCK FROM SYSUT1
         PUT   DCB3,QBUF            WRITE BLOCK TO SYSUT2
         B     END3A                GO GET ANOTHER BLOCK
***********************************************************************
*                                                                     *
*   UNIVERSAL ABEND MACRO. REGISTER TWO SHOULD CONTAIN ABEND CODE.    *
*                                                                     *
***********************************************************************
ABEND1   ABEND (R2),DUMP            ABEND WITH DUMP
***********************************************************************
*                                                                     *
*   EOF ON SYSUT1. CLOSE SYSUT1. CLOSE SYSUT2. SEE YA AROUND.         *
*                                                                     *
***********************************************************************
END4     CLOSE DCB2
         CLOSE DCB3
         L     R13,SAVE+D4
         LM    R14,R12,D12(R13)
         LA    R15,D0
         BR    R14
DCB1     DCB   DDNAME=SYSIN,DSORG=PS,MACRF=GM,EODAD=END1
DCB2     DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=(GM,PM),EODAD=END4
DCB3     DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=PM
SAVE     DC    18F'0'               STANDARD SAVE AREA SET
C0001    DC    F'1'                 BASIC BINARY ONE
C0008    DC    F'8'                 BASIC BINARY EIGHT
C0024    DC    F'24'                SIZE OF QAB ENTRY
C0080    DC    F'80'                SIZE OF PQE ENTRY
C2400    DC    F'2400'              OFFSET TO LAST PQE IN BLOCK
C2456    DC    F'2456'              OFFSET TO LAST QAB ENTRY IN BLOCK
TABSIZE  DC    F'1'                 NUMBER OF BLOCKS ALLOCATED FOR QAB
QUESIZE  DC    F'4'                 NUMBER OF BLOCKS ALLOC FOR PQES
QABHEAD  DC    X'0002000000000001'  QAB HEADER-20 SEC-START WITH REQ#1
         SPACE
*        TABLE OF PRINTER TYPES:
ACODE    DC    C'A'                 TYPE A
ATYPE    DC    X'0600844202028401'  3286 W/O VFC
BCODE    DC    C'B'                 TYPE B
BTYPE    DC    X'0600844202028402'  3286 WITH VFC
CODE1    DC    C'1'                 TYPE 1
TYPE1    DC    X'0600844202028401'  3286 W/O VFC
CODE2    DC    C'2'                 TYPE 2
TYPE2    DC    X'0600844202028402'  3286 WITH VFC
CODE3    DC    C'3'                 TYPE 3
TYPE3    DC    X'0600844202028403'  3790 LINE PRTR
CODE4    DC    C'4'                 TYPE 4
TYPE4    DC    X'0600844202028404'  3287 W/O VFC
CODE6    DC    C'6'                 TYPE 6
TYPE6    DC    X'0600844202028406'  3287 WITH VFC
         DC    3XL9'00'             SOME ZAPPABLE ENTRIES
ENDTABL  DC    X'00'                END OF THE TABLE
ZEROES   DC    80X'00'              80 BYTES OF BINARY ZERO
INPUT    DC    80C' '               SYSIN BUFFER
QBUF     DC    2480X'00'            QUEUE BLOCK BUFFER
*********  DISPLACEMENT EQUATES  **********
D0       EQU   0
D1       EQU   1
D2       EQU   2
D3       EQU   3
D4       EQU   4
D5       EQU   5
D6       EQU   6
D7       EQU   7
D8       EQU   8
D9       EQU   9
D12      EQU   12
D16      EQU   16
D48      EQU   48
*********  LENGTH EQUATES  ****************
L4       EQU   4
L8       EQU   8
L24      EQU   24
L80      EQU   80
*********  FLAG EQUATES  ******************
F10      EQU   16
*********  BIT  EQUATES  ******************
QABLAST  EQU   128
*********  CHAR EQUATES  ******************
APRT     EQU   193
BPRT     EQU   194
         END
