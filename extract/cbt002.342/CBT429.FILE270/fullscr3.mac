*          DATA SET 761KKFS3   AT LEVEL 001 AS OF 10/13/80
*          DATA SET 761KKFSCRN AT LEVEL 003 AS OF 02/20/79
         TITLE 'FULLSCRN - 3270 I/O SUBROUTINE  -  VERSION 3.3'
*          DATA SET 761KKFSCRN AT LEVEL 002 AS OF 06/07/78
*  AUTHOR: KERMIT KISER - WASHINGTON STATE DP SERVICE CENTER (WDPSC).
*          (206) 902-3119
FULLSCR3 CSECT
FULLSCRN DS    0H                 FOR VERSION 2
         ENTRY FULLSCRN
FULLSC   DS    0H                 FOR FORTRAN
         ENTRY FULLSC
         SAVE  (14,12),,FULLSCR3-V3M3
         LR    R12,R15            HOPE HE KNOWS WHAT HE'S DOING
         USING FULLSCR3,R12
         EJECT
*
*   VERSION 2  FORMAT:
*           CALL 'FULLSCRN' USING IOPARM OUTLEN OUTBUFF
*                                       /INLEN  INBUFF/
*                                       /RETLEN/ .
*
* WHERE:  /INLEN INBUFF/ AND /RETLEN/ ARE OPTIONAL PARMS, AND;
*         IOPARM IS - "I"  FOR INPUT ONLY
*                     "O"  FOR OUTPUT ONLY
*                     "B"  FOR BOTH
*
*
*
*
*   VERSION 3  FORMAT:
*           CALL 'FULLSCR3' USING IOPARM  /OUTLEN OUTBUFF/
*                                         /INLEN  INBUFF/
*                                         /RETLEN/
*                                         /SCRUFF/ .
*
* WHERE: IOPARM IS THE ONLY REQUIRED PARM AND HAS THE FOLLOWING FORMAT:
*        IOPARM IS - "VT123456"   WHERE:
*                  V - IS "3" TO INDICATE VERSION CALLED.
*                        ("S" TO INDICATE SPF TYPE CALL.)
*                  T - IS CALL TYPE: SAME AS IOPARM FOR VERSION 2.
*                  1 - IS "X" IF OUTLEN PARM PRESENT.
*                  2 - IS "X" IF OUTBUF PARM PRESENT.
*                  3 - IS "X" IF INLEN  PARM PRESENT.
*                  4 - IS "X" IF INBUFF PARM PRESENT.
*                  5 - IS "X" IF RETLEN PARM PRESENT.
*                  6 - IS ONE OF THE FOLLOWING IF SCRUFF PARM PRESENT:
*                         "I" IF INPUT PARSE DESIRED.
*                         "O" IF OUTPUT PARSE DESIRED.
*                         "B" IF BOTH PARSES DESIRED.
*                         "U" IF UNFORMATTED INPUT ONLY PARSE.
*        SCRUFF IS - A NEW SCREEN BUFFER PARM OF 1920 BYTES WHICH MUST
*                    BE SUPPLIED IF PARSING IS REQUESTED. INBUFF IS
*                    STILL REQUIRED TO GIVE TGET SPACE FOR THE INPUT.
*
*    3270 DATA STREAMS ARE IN THE FOLLOWING FORMAT:
*
*  OUTBUFF:  WCC/SBA/ADDR/SF/ATTR/TEXT..SBA/ADDR/SF/ATTR/TEXT/..IC
*  INBUFF :  AID/CURSOR-ADDR/SBA/ADDR/TEXT/..SBA/ADDR/TEXT....
*
*    FULLSCRN RETURN CODES:
*              99 - TOO MANY PARMS FOR VERSION TWO CALL
*              21 - NO OUTPUT LENGTH PARM FOR OUTPUT OPERATION
*              23 - NO OUTPUT BUFFER PARM FOR OUTPUT OPER
*              25 - NO INPUT LENGTH PARM FOR INPUT OPERATION
*              27 - NO INPUT BUFFER PARM FOR INPUT OPERATION
*              OTHER - IF THE RETURN CODE IS EVEN THEN IT IS
*                      256*(TGET RETURN CODE)+(TPUT RETURN CODE)
*
         EJECT
*
*               NOTES ON USAGE OF FULLSCR3:
*
*        IN MOST CASES, THE USE OF ALL PARAMETERS IS SUGGESTED.
*    INPUT AND OUTPUT BUFFERS AND LENGTHS MUST STILL BE SUPPLIED
*    FOR VERSION 3. THE USER MUST PROVIDE THE SCREEN IMAGE BUFFER
*    IF HE REQUESTS PARSING. A SPACE IN POSITIONS 3-8 OF IOPARM
*    INDICATES THAT THE CORRESPONDING PARAMETER HAS NOT BEEN PASSED
*    AND FULLSCR3 WILL ATTEMPT TO USE ANOTHER PARAMETER IN ITS PLACE
*    IF IT IS NEEDED.
*                   AN EXAMPLE OF IOPARM IS : "3BXXXXXB" .
*
*            SCREEN IMAGE BUFFER ("SCRUFF"):
*
*        A NEW PARAMETER ("SCRUFF") IS AVAILABLE FOR FULLSCRN'S
*    PARSE CAPABILITIES WHICH ARE NEW WITH VERSION 3. THIS PARAMETER
*    IS AN AREA 1920 BYTES LONG; THE SAME SIZE AS THE 3277-2 SCREEN.
*    IT HAS NO RELATION TO THE TERMINAL I/O; HOWEVER, IT MUST BE
*    SUPPLIED IN ADDITION TO THE I/O PARMS IF PARSING IS REQUESTED.
*    IF BOTH OUTPUT AND INPUT PARSING ("B" IN POSITION 8 OF IOPARM)
*    ARE REQUESTED, FULLSCR3 WILL TRY TO MAINTAIN AN IMAGE OF THE
*    TERMINAL SCREEN IN THIS AREA. THIS IS DONE BY PARSING THE OUTPUT
*    AND INPUT STREAMS AFTER THE I/O HAS OCCURED AND PLACING THE
*    RESULTS IN THE PROPER LOCATIONS IN THE SCREEN IMAGE BUFFER.
*        ATTRIBUTE BYTES ARE STORED IN THE BUFFER WITH THE TWO
*    HIGH-ORDER BITS TURNED OFF EXCEPT FOR THE SPACE ATTRIBUTE (X'40')
*    WHICH IS STORED AS X'C0' (TWO HIGH-ORDER BITS ONLY ON.) IN ORDER
*    TO DIFFERENTIATE IT FROM THE NULL CHARACTER (X'00'). THIS ENABLES
*    FULLSCR3 TO CLEAR TO THE END OF FIELDS, DO PROGRAM TABBING,
*    ERASE UNPROTECTED TO ADDRESS, ETC.
*
         EJECT
*
*              MAINLINE CODE:
*
PARMCK   BAL   R14,INIT           SET UP VERSION & PARMS
         LTR   R15,R15            OK?
         BNZ   BGO                NO
*
IOCHECK  CLI   0(R10),C' '        I/O DESIRED?
         BE    PARSECK            NO
         BAL   R14,DOIO           YES -> DO IT
         LTR   R15,R15            OK?
         BNZ   BGO                NO
*
PARSECK  CLI   5(R9),C' '         PARSE DESIRED?
         BE    NOPARS             NO
         BAL   R14,DOPARS         YES -> DO IT
         LTR   R15,R15            OK?
         BNZ   BGO                NO
*
NOPARS   EQU   *
BGO      EQU   *
EXIT     RETURN (14,12),RC=(15)
         SPACE
*
*   GET THE INPUT PARAMETERS:
*
INIT     LR    R11,R1             SAVE THE PARM POINTER
         SLR   R15,R15            CLEAR RC
         L     R10,0(R11)         R10 -> IOFLAG
         CLI   0(R10),C'3'        VERSION 3 CALL?
         BE    REL3               YES
         CLI   0(R10),C'S'              SPF?
         BNE   REL2                NO-> MUST BE PREVIOUS VERSION
REL3     LA    R10,1(,R10)        R10 -> OLD IOPARM
         LA    R9,1(,R10)         R9 -> PARM PARM
         BR    R14                RETURN TO MAINLINE
REL2     LR    R9,R11             R9=R11
CNTLOOP  TM    8(R9),X'80'        LAST PARM?
         BO    SETPARM            YES
         LA    R9,4(,R9)          R9 = R9+ 4
         B     CNTLOOP            CHECK NEXT ONE
SETPARM  SR    R9,R11             R9=R9-R11
         C     R9,=F'12'          GOOD COUNT?
         BNH   OKSET              YES
         LA    R15,99             NO
         BR    R14                GET OUT
OKSET    SLL   R9,1               R9=R9*2
         LA    R9,PARMPARM(R9)    R9 -> PSEUDO PARM FOR V2 CALL
         BR    R14
         EJECT
DOIO     EQU   *
*
*   CHECK FOR A WRITE
*
         CLI   0(R10),C'I'        IN ONLY?
         BE    READCHK            YES
*
         BAL   R7,WRITESET        GET WRITE PARMS
*
         L     R15,0(,R11)              R15->IOPARM
         CLI   0(R15),C'S'              SPF TYPE?
         BNE   BUFFRITE                 NO
         ICM   R15,15,=C'SPFP'          YES->TELL SVC
BUFFRITE TPUT  (R5),(R6),FULLSCR
         LR    R3,R15             R3=R15 SAVE RC
         SLR   R15,R15            CLEAR FOR READ RC
         B     READCHK            CHECK FOR READ
         SPACE 5
*              SUBRTN TO GET WRITE PARMS
*
WRITESET CLI   0(R9),C' '         OUTLEN GIVEN?
         BNE   LOL                YES
         LA    R15,21             NO -> RC=21
         BR    R14                X
LOL      L     R6,4(,R11)         R6-> OUTLEN
         LH    R6,0(,R6)          R6 =  "
         CLI   1(R9),C' '         OUTBUFF GIVEN?
         BNE   LOB                YES
         LA    R15,23             NO -> RC=23
         BR    R14                X
LOB      L     R5,8(,R11)         R5 -> OUTBUF
         LA    R5,0(,R5)          CLEAR HI BIT
         BR    R7                 X
         EJECT
*
*   CHECK FOR A READ
*
READCHK  CLI   0(R10),C'O'        OUT ONLY?
         BE    IOX                YES.
*
         BAL   R7,READSET         R5->INBUF,R6=INLEN
         BAL   R7,RETCK           R4 -> RETLEN AREA
*
         L     R15,0(,R11)              R15->IOPARM
         CLI   0(R15),C'S'              SPF TYPE?
         BNE   BUFFREAD                 NO
         ICM   R15,15,=C'SPFG'          YES->TELL SVC
BUFFREAD TGET  (R5),(R6),ASIS     GET WHAT WE CAN
         STH   R1,0(R4)           GIVE HIM THE LENGTH
         SPACE 5
IOX      EQU   *
FINISH   SLL   R15,8(0) SAVE TGET RETURN CODE
         OR    R15,R3    GET TPUT RETURN CODE
         BR    R14                X
         EJECT
*
*              SUBRTNS TO GET READ PARMS
*
READSET  CLI   2(R9),C' '         INLEN PRESENT?
         BE    TOL                NO
         LA    R1,3               PARM 3 NEEDED
         BAL   R2,FINDPARM        POINT R1 -> PARM 3
         LH    R6,0(,R1)          R6 = INLEN
         B     GIBA
TOL      CLI   0(R9),C' '         OUTLEN?
         BNE   GOL                YES
         LA    R15,25             NO -> RC=25
         BR    R14                X
GOL      L     R6,4(,R11)         R6 -> OUTLEN
         LH    R6,0(,R6)          R6 = OUTLEN
GIBA     CLI   3(R9),C' '         INBUF?
         BE    TOB                NO
         LA    R1,4               PARM 4 REQ
         BAL   R2,FINDPARM        R1 -> PARM 4
         LR    R5,R1              R5 -> INBUF
         BR    R7                 X
TOB      CLI   1(R9),C' '         OUTBUF?
         BNE   GOB                YES
         LA    R15,27             NO -> RC=27
         BR    R14                X
GOB      L     R5,8(,R11)         R5 -> OUTBUF
         BR    R7                 X
         SPACE 3
*
*              RTN TO POINT R4 TO RETLEN PARM:
*
RETCK    CLI   4(R9),C' '         RETLEN?
         BE    TIL                NO
         LA    R1,5               GET P5
         BAL   R2,FINDPARM        R1 -> P5
         LR    R4,R1              R4 -> RETLEN
         BR    R7                 X
TIL      CLI   2(R9),C' '         INLEN?
         BE    UOL                NO
         LA    R1,3               GET P3
         BAL   R2,FINDPARM        R1 -> P3
         LR    R4,R1              R4 -> INLEN
         BR    R7
UOL      L     R4,4(,R11)         R4 -> OUTLEN
         BR    R7
         EJECT
*
*              PARSE I/O BUFFERS  SUBROUTINES:
*
DOPARS   CLI   5(R9),C'I'         IN ONLY?
         BE    IPARS              YES
         CLI   5(R9),C'U'         UNFORMATTED OPTION?
         BE    IPARS              YES
*
OPARS    EQU   *
*
*              OUTPUT BUFFER PARSE SUBRTN GOES HERE:
*
         BAL   R7,WRITESET        R5->OUTBUF,R6=OUTLEN
         LA    R1,6               REQ P6
         BAL   R2,FINDPARM        R1->SCRUFF
         LA    R8,0(,R1)          R8-> SCREEN BUFF  (MUST CLEAR HI BIT)
         LR    R7,R8              R7-> SCREEN BUFF
         LA    R3,1920(,R8)       R3-> SCREEN BUFF END(+1)
         ICM   R15,15,=X'000000FF' INIT R15
*
*        SKIP  ESCAPE,CMD,WCC     IF PRESENT:
*
         CLI   0(R5),X'27'        ESC CHAR?
         BE    ESC                YES
         B     WCC                NO-> SKIP WCC
*
*        PICK  ROUTINE TO HANDLE  EACH BUFFER BYTE:
*
OPM      IC    R15,0(R5)          LOAD BYTE
         CLI   0(R5),X'11'        SBA CHAR?
         BE    OSBA               YES
         CLI   0(R5),X'1D'        SF  CHAR?
         BE    SF                 YES
         CLI   0(R5),X'13'        IC  CHAR?
         BE    IC                 YES
         CLI   0(R5),X'05'        PT  CHAR?
         BE    PT                 YES
         CLI   0(R5),X'3C'        RA  CHAR?
         BE    RA                 YES
         CLI   0(R5),X'12'        EUA CHAR?
         BE    EUA                YES
         MVC   0(1,R7),0(R5)      MUST BE DATA -> MOVE IT
         SLR   R15,R15            SAY NO ORDER THIS TIME
         BAL   R2,BAC             BUFF ADDR CHECK
         B     D1                 POINT PAST
         EJECT
*               OUTPUT BUFFER PARSE SUBRTN SUBRTNS:
*
*                                 COMMON EXITS:
*
D3       LA    R5,1(,R5)          R5=R5+1
         SH    R6,=H'1'           R6=R6-1
D2       LA    R5,1(,R5)          R5=R5+1
         SH    R6,=H'1'           R6=R6-1
D1       LA    R5,1(,R5)          R5=R5+1
         SH    R6,=H'1'           R6=R6-1
*
BEC      SLL   R15,8              SAVE ORDER STATUS FOR PT
         BP    OPM                CONTINUE IF NOT DONE
         B     IPARS              CHECK FOR INPUT PARSE IF DONE HERE
*
*              COMMON SUB FUNCTIONS:
*
BAC      LA    R7,1(,R7)          R7=R7+1  UPDATE BUFFER DATA PTR
         CR    R7,R3              PAST END?
         BLR   R2                 NO
         LR    R7,R8              R7->START OF BUFF
         BR    R2
*
SBA      IC    R1,1(,R5)          R1= 1ST ADDR BYTE
         IC    R0,2(,R5)          R0= 2ND ADDR BYTE
         N     R1,=X'0000003F'    STRIP HIGH BITS
         N     R0,=X'0000003F'    STRIP HIGH BITS
         SLL   R1,6               SHIFT HI ADDR LEFT 6 BITS
         OR    R1,R0              PUT IT TOGETHER
         LA    R7,0(R1,R8)        R7 -> NEW SCREEN BUF POSN
         LA    R5,3(,R5)          R5= R5+3 PT PAST SBA SEQ
         SH    R6,=H'3'           UPDATE LENGTH
         BR    R2
*
GAB      LR    R1,R7              SAVE OUR SCREEN LOC
         SLR   R15,R15            CLEAR R15 IN CASE NO ATTR EXISTS
GL       LA    R1,1(,R1)          R1=R1+1
         CR    R1,R3              PAST SCREEN?
         BL    SIB                NO
         LR    R1,R8              SET TO TOP
SIB      CLI   0(R1),X'00'        NULL?
         BE    GEC                YES
         CLI   0(R1),X'C0'        SP ATTR?
         BE    GA                 YES
         TM    0(R1),X'C0'        OTHER ATTR?
         BNZ   GEC                NO
GA       IC    R15,0(R1)          GET ATTR IN R15
GEC      CR    R1,R7              DONE?
         BNE   GL                 NO -> GO ON
         BR    R2                 YES -> EXIT
         EJECT
*
*              INDIVIDUAL ORDER HANDLING ROUTINES:
*
ESC      EQU   D3                 IGNORE COMMAND CODE
WCC      EQU   D1                 SKIP WCC
IC       EQU   D1                 IGNORE IC ORDER
*
*                                 SBA ORDER:
OSBA     BAL   R2,SBA             DO AN SBA
         B     BEC                CONTINUE
*
*                                 SF ORDER:
SF       MVC   0(1,R7),1(R5)      MOVE ATTRIBUTE BYTE
         NI    0(R7),X'3F'        STRIP HI 2 BITS TO SAY ATTR
         CLI   0(R7),X'00'        WAS IT SPACE?
         BNE   SFS1               NO -> ITS OK
         OI    0(R7),X'C0'        TURN ON HI BITS TO DIFFER FROM NULL
SFS1     BAL   R2,BAC             BUFFER ADDRESS CHECK
         B     D2                 POINT PAST
*
*                                 RA ORDER:
RA       LR    R4,R7              SAVE BUFF ADDR
         BAL   R2,SBA             GET NEW
RAL      MVC   0(1,R4),0(R5)      MOVE RA DATA CHAR
         LA    R4,1(,R4)          R4=R4+1
         CR    R4,R3              PAST SCREEN?
         BL    CRAD               NO
         LR    R4,R8              YES->RESET TO START
CRAD     CR    R4,R7              RA DONE?
         BNE   RAL                NO
         B     D1                 YES->CONT
         EJECT
*              ORDER ROUTINES CONTINUED:
*
*
*                                 EUA ORDER:
EUA      LR    R4,R7              SAVE OUR SCREEN LOC
         BAL   R2,GAB             FIND ITS ATTRIBUTES
         BAL   R2,SBA             FIND END ADDR
EL       CLI   0(R4),X'00'        NULL?
         BE    IN                 YES
         CLI   0(R4),X'C0'        SP ATTR?
         BE    EA                 YES
         TM    0(R4),X'C0'        OTHER ATTR?
         BNZ   ENA                NO
EA       IC    R15,0(R4)          GET ATTR IN R15
IN       LA    R4,1(,R4)          R4=R4+1  PT PAST
         CR    R4,R3              OFF SCREEN?
         BL    EDC                NO->OK
         LR    R4,R8              SET TO TOP
EDC      CR    R4,R7              DONE?
         BNE   EL                 NO
         IC    R15,=X'12'         SAY EUA OCCURED
         B     D1                 EXIT EUA
ENA      N     R15,=X'00000020'   PROTECTED FIELD?
         BNZ   IN                 YES -> GO ON
         NI    0(R4),X'00'        NO -> KILL DATA
         B     IN                 GO ON
*
*                                 PT ORDER:
PT       CLI   0(R7),X'00'        NULL?
         BE    PTPP               YES
         CLI   0(R7),X'C0'        SP ATTR?
         BE    PTA                YES
         TM    0(R7),X'C0'        OTHER ATTR?
         BZ    PTA                YES
PTD      N     R15,=X'0000FF00'   ORDER MODE?
         BNZ   PTPP               YES
         NI    0(R7),X'00'        NO -> KILL IT
PTPP     BAL   R2,BAC             R7=R7+1 SCREEN ADDR UPDT
         BL    PT                 GO ON IF STILL IN SCREEN
         B     D1                 ELSE END
PTA      ICM   R15,2,=X'05'       SAY ORDER MODE NOW
         TM    0(R7),X'20'        PROTECTED FIELD?
         BO    PTPP               YES->SKIP IT
         BAL   R2,BAC             NO -> POINT AT DATA PART
         IC    R15,0(,R5)         LOAD PT ORDER
         B     D1                 EXIT PT
         EJECT
*
*               INPUT BUFFER PARSE SUBRTN:
*
*
*              GET SET:
*
IPARS    CLI   5(R9),C'O'         OUT ONLY?
         BE    PARX               YES
         BAL   R7,GIBA            R5->INPUT BUFF
         BAL   R7,RETCK           R4->INPUT LEN
         LH    R6,0(,R4)          R6 = INPUT LEN
         LA    R1,6               REQ P6
         BAL   R2,FINDPARM        R1 -> SCREEN BUFF
         LA    R8,0(,R1)          R8 -> SCREEN BUFF (MUST CLEAR HI BIT)
         LR    R7,R8              R7 -> OUT AREA
         LR    R4,R7              R4 -> CURRENT FIELD
         LA    R3,1920(,R8)       R3 -> END BUFF+1
*
*              PARSE IT:
*
         CH    R6,=H'3'           AID,CURR ONLY?
         BE    PARX               YES -> SKIP PARSING IT
         SH    R6,=H'3'           R6 = R6-3
         LA    R5,3(,R5)          R5=R5+3 SKIP AID,CURR
         CLI   0(R5),X'11'        SBA?
         BE    ISBA               YES-> DON'T CHECK FIELD FILL 1ST TIME
         EJECT
*
*              INPUT PARSE LOOP:
*
IPL      CLI   0(R5),X'11'        SBA?
         BNE   MDB                NO -> MUST BE DATA
*
         CLI   5(R9),C'U'         UNFORMATTED?
         BE    FF1X               YES-> DO NOT ERASE EOF THE FIELD
FF1      CLI   0(R7),X'00'        NULL BYTE?
         BE    FS1                YES
         CLI   0(R7),X'C0'        SPACE ATTR?
         BE    FF1X               YES
         TM    0(R7),X'C0'        ATTR BYTE?
         BZ    FF1X               YES-> GO ON
         MVI   0(R7),X'00'        NO -> MAKE IT NULL
FS1      BAL   R2,BAC             BUFF OK?
         CR    R7,R4              DONE HERE?
         BNE   FF1                MORE?
FF1X     EQU   *                  END-OF-FIELD
*
ISBA     BAL   R2,SBA             YES -> DO IT
         LR    R4,R7              R4 -> CURRENT FIELD
*                                                                 WDPSC
*              CODE TO SET MDT FOR MODIFIED FIELDS:               WDPSC
*                                                                 WDPSC
         BCTR  R7,R0                    R7=R7-1                   WDPSC
         CR    R7,R8                    R7<R8=SCREEN START?       WDPSC
         BNL   MDTCHK                   NO->CHK ATTR              WDPSC
         LA    R7,1919(,R8)             R7->END OF SCREEN         WDPSC
MDTCHK   CLI   0(R7),X'00'              NULL?                     WDPSC
         BE    NMDT               YES
         CLI   0(R7),X'C0'        SPACE ATTR?
         BE    SMDT               YES
         TM    0(R7),X'C0'        ATTR BYTE?
         BNZ   NMDT               NO -> GO ON
SMDT     OI    0(R7),X'01'              SET MDT ON                WDPSC
         NI    0(R7),X'3F'              MAKE SURE STILL ATTR      WDPSC
NMDT     LR    R7,R4                    RESET R7                  WDPSC
         LTR   R6,R6                    RESET CC                  WDPSC
*                                                                 WDPSC
         BP    IPL                CONTINUE
         B     FFNF                     FINAL FIELD NULL FILL
         EJECT
*                                                                 WDPSC
*              CODE TO MOVE A DATA BYTE TO SCRUFF:                WDPSC
*                                                                 WDPSC
MDB      MVC   0(1,R7),0(R5)            MOVE DATA
         BAL   R2,BAC             BUFFER ADDR CHECK
         LA    R5,1(,R5)          R5 = R5+1
BLOK     BCT   R6,IPL             LOOP THE LOOP
*                                                                 WDPSC
*              CODE TO CLEAR TO END OF FINAL FIELD IF NEEDED:     WDPSC
*                                                                 WDPSC
FFNF     CLI   5(R9),C'U'               UNFORMATTED?
         BE    FF2X               YES-> DO NOT PAD
FF2      CLI   0(R7),X'00'        NULL BYTE?
         BE    FS2                YES
         CLI   0(R7),X'C0'        SPACE ATTR?
         BE    FF2X               YES
         TM    0(R7),X'C0'        ATTR BYTE?
         BZ    FF2X               YES-> GO ON
         MVI   0(R7),X'00'        NO -> MAKE IT NULL
FS2      BAL   R2,BAC             BUFF OK?
         CR    R7,R4              DONE HERE?
         BNE   FF2                MORE?
FF2X     EQU   *                  NOMORE.
         SPACE
*
*              RETURN FROM PARSE  TO MAINLINE
*
PARX     SLR   R15,R15            RC=0
         BR    R14
         EJECT
*
*              SUBRTN TO LOAD PTR TO A GIVEN PARM:
*
FINDPARM EQU   *
         LR    R15,R9             R15=R9
         LR    R0,R1              R0=R1
         SLR   R1,R1              R1=0
FL       BCT   R0,PC              THERE YET?
         SLL   R1,2               R1=R1*4   YES
         L     R1,4(R1,R11)       R1=4+R1+R11 -> PARM DESIRED
         BR    R2                 RET
*
PC       CLI   0(R15),C' '        PARM HERE?
         LA    R15,1(,R15)        R15=R15+1
         BE    FL                 NO PARM
         LA    R1,1(,R1)          YES -> R1=R1+1 COUNT IT
         B     FL
         EJECT
*
*              STATIC DATA:
*
PARMPARM EQU   *                  PSEUDO PARMS
         DC    CL8'YY    '
         DC    CL8'YY  Y '
         DC    CL8'YYYY  '
         DC    CL8'YYYYY '
         LTORG
         REGEQU
         END
