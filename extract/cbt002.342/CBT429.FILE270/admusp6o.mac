*          DATA SET 761KKUSP6O AT LEVEL 001 AS OF 08/30/82
         TITLE ' TSO FILE I/O MODULE FOR DATA PLOT APPLICATION'
***********************************************************************
*                                                                     *
*     THIS ROUTINE PROVIDES PRIMITIVE FILE I/O FACLITIES ON TSO       *
*     FOR THE DATA PLOT APPLICATION, ADMUSP6.                         *
*                                                                     *
*     THE ENTRIES ARE:  -  ADMUSP6O  TO OPEN A FILE WITH A GIVEN NAME *
*                           AND RETURN A FLAG IF SUCCESSFUL           *
*                       -  ADMUSP6R  TO READ AN 80 BYTE RECORD FROM   *
*                           THE FILE AND RETURN A FLAG IF SUCCESSFUL  *
*                       -  ADMUSP6C  TO CLOSE THE FILE                *
*                                                                     *
*     THE ROUTINE IS NOT RE-ENTRANT.                                  *
*                                                                     *
***********************************************************************
ADMUSP6O CSECT ,                   ADMUSP6O - THE MAIN ENTRY
@MAINENT DS    0H
         USING *,@15
         B     @PROLOG
         DC    AL2(@EP00001-@MAINENT)
ADMUSP6C DS    0H                  FILE CLOSE ENTRY POINT
         USING *,@15
         B     @PROLOG
         DC    AL2(@EP00022-ADMUSP6C)
         ENTRY ADMUSP6C
*
ADMUSP6R DS    0H                  FILE READ ENTRY POINT
         USING *,@15
         B     @PROLOG
         DC    AL2(@EP00031-ADMUSP6R)
         ENTRY ADMUSP6R
*
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)     NON-REENTRANT PROLOGUE
         BALR  @12,0               - SET BASE REGISTER
@PSTART  DS    0H
         USING @PSTART,@12
         ST    @13,@SA00001+4      PERFORM SAVE AREA CHAINING
         LA    @14,@SA00001
         ST    @14,8(,@13)
         LR    @13,@14
         AH    @15,4(,@15)         AND BRANCH TO CODE FOR ENTRY
         BR    @15
*
*        ADMUSP6O ENTRY(FNAME,RETCODE);
*        DECLARE FNAME CHARACTER(8),   THE FILE NAME
*                RETCODE FIXED(31);    INDICATOR THAT NO FILE EXISTS
*
@EP00001 MVC   @PC00001(8),0(@01)
*                                  ADMUSP6O CODE
         OPEN  (FILEDCB,(INPUT))   OPEN THE DATA FILE
         LA    @03,FILEDCB         ADDRESS DCB
         USING IHADCB,@03          AND
         TM    DCBOFLGS,X'10'      FIND IF OPEN SUCCESSFUL,
         BZ    NOTOPEN             IF NOT GO TO DIAGNOSE IT.
         B     FIND                IF OK CONTINUE WITH FIND
*
NOTOPEN  DS    0H                  DIAGNOSE ERRONEOUS OPEN -
         LA    @03,8               SET RETURN CODE 8.
         B     RETURNO
*                                  INSERT FILENAME INTO LONGNAME
FIND     L     @15,@PC00001        WHICH IS JUST A TEMPORARY
         MVC   LONGNAME(8),0(@15)
         FIND  FILEDCB,LONGNAME,D  FIND THE PROPER MEMBER
         LA    @03,4               INITIALISE RETURN CODE
         C     @15,=F'4'           IF FILE NOT FOUND
         BE    RETURNE             RETURN WITH CODE 4.
         LA    @03,8               IF ERROR, SET RETURN CODE 8 AND
         BH    RETURNE             RETURN
         SR    @03,@03             OTHERWISE SET RETURN CODE 0  AND
         LH    R0,FILEDCB+X'3E'         R0=BLKSIZE                WDPSC
         AH    R0,=H'2'                 XTRA 2 FOR LENGTH         WDPSC
         GETMAIN R,LV=(0)               R1->BUFFER                WDPSC
         ST    R1,BUFFAD                SAVE ADDR                 WDPSC
         NI    VBF,X'00'                SAY BLK NEEDED            WDPSC
         B     RETURNO             RETURN
*
RETURNE  CLOSE FILEDCB             CLOSE THE FILE AGAIN BEFORE RETURN
*
RETURNO  L     @14,@PC00001+4      ADDRESS THE SECOND PARAMETER
         ST    @03,0(@14)          AND STORE THE RETURN CODE
         L     @13,4(,@13)
         LM    @14,@12,12(@13)
         BR    @14
*
*           ADMUSP6C: ENTRY;
*
@EP00022 MVC   @PC00001(4),0(@01)
         CLOSE FILEDCB             CLOSE THE FILE
         LH    R0,FILEDCB+X'3E'         R0=BLKSIZE                WDPSC
         L     R1,BUFFAD                GET  ADDR                 WDPSC
         FREEMAIN R,LV=(0),A=(1)        FREE IO BUFFER            WDPSC
         L     @14,@PC00001        ADDRESS THE PARAMETER
         SR    @15,@15             CLEAR RETURN CODE
         ST    @15,0(@14)          AND STORE THE RETURN CODE.
         L     @13,4(,@13)
         LM    @14,@12,12(@13)     RETURN
         BR    @14
         EJECT
*
*     ADMUSP6R:ENTRY(INREC,RETCODE);
*     DECLARE INREC CHARACTER (80), RETCODE FIXED(31);
*
@EP00031 MVC   @PC00001(8),0(@01) MOVE PARAMETERS
*
         SLR   R15,R15                  R15=0 INIT RC TO ZERO     WDPSC
         TM    VBF,X'FF'                VALID BLOCK PRESENT?      WDPSC
         BO    WHAB                     YES->WE HAVE A BLOCK      WDPSC
         BAL   R14,RANB                 NO ->READ A NEW BLOCK     WDPSC
*                                                                 WDPSC
WHAB     BAL   R14,MCR                  MOVE CURRENT RECORD       WDPSC
         BAL   R14,FNR                  FIND NEXT RECORD          WDPSC
         B     RETURNR                  RETURN TO CALLER          WDPSC
*
RETURNR  L     @14,@PC00001+4      ADDRESS THE SECOND PARAMETER
         ST    @15,0(@14)          AND STORE THE RETURN CODE
         L     @13,4(,@13)
         LM    @14,@12,12(@13)
         BR    @14
         EJECT
*                                                                 WDPSC
RANB     ST    R14,L1LS                                           WDPSC
         L     @03,BUFFAD         GET BUFFER AREA                 WDPSC
         LA    R3,2(,R3)                R3+2 SKIP XTRA LENGTH     WDPSC
*                                 THEN READ THE NEXT RECORD
         READ  RDECB,SF,FILEDCB,(@03)
         CHECK RDECB
         SR    @15,@15             CLEAR RETURN CODE
*        B     RETURNR                                            WDPSC
         OI    VBF,X'FF'                SET VALID BUFFER FLAG     WDPSC
         TM    FILEDCB+X'24',X'40'   V  TYPE RECORDS?             WDPSC
         BO    SETV                     YES
         MVC   NRADD,BUFFAD             RESET NEXT RECORD PTR     WDPSC
REX      L     R14,L1LS                                           WDPSC
         BR    R14                                                WDPSC
*
SETV     L     R4,BUFFAD                R4->START OF BUFFER(-2)   WDPSC
         LA    R4,6(,R4)                R4+6 PT PAST BDW          WDPSC
         ST    R4,NRADD                 SAVE NEXT RECORD PTR      WDPSC
         B     REX
*
READERR  DS   0H                   I/O ERROR ON READ -
         LA   @15,8                SET RETURN CODE 8.
         B RETURNR
*
NODATA   DS   0H                   END OF FILE -
         LA   @15,4                SET RETURN CODE 4.
         B     RETURNR                                            WDPSC
         EJECT
MCR      L     R3,@PC00001              R3->CALLERS REC           WDPSC
         L     R4,NRADD                 R4->NEXT RECORD           WDPSC
         TM    FILEDCB+X'24',X'40'      V TYPE RECORDS?           WDPSC
         BO    MVR                      YES                       WDPSC
         LH    R5,FILEDCB+X'52'         R5=LRECL                  WDPSC
         STH   R5,0(,R4)                PREFIX RECORD             WDPSC
         ST    R4,0(,R3)                PASS TO ADMUSP6           WDPSC
         BR    R14                                                WDPSC
*                                                                 WDPSC
MVR      LH    R5,0(,R4)                R5=RECORDS LENGTH         WDPSC
         SH    R5,=H'4'                 R5-4 FOR RDW              WDPSC
         STH   R5,2(,R4)                PREFIX THE RECORD         WDPSC
         LA    R4,2(,R4)                R4->NEW RECORD PREFIX     WDPSC
         ST    R4,0(,R3)                PASS TO ADMUSP6           WDPSC
         BR    R14                                                WDPSC
*                                                                 WDPSC
FNR      TM    FILEDCB+X'24',X'40'      V TYPE RECORDS?           WDPSC
         BNO   FNR2                     NO                        WDPSC
         L     R4,NRADD                 R4->NEXT RECORD           WDPSC
         LH    R3,0(,R4)                R3=REAL LENGTH            WDPSC
         B     FNR3                                               WDPSC
FNR2     LH    R3,FILEDCB+X'52'         R3=LRECL                  WDPSC
FNR3     A     R3,NRADD                 R3->NEW NEXT RECORD       WDPSC
         ST    R3,NRADD                 SAVE ADDR                 WDPSC
*                                                                 WDPSC
         LH    R4,FILEDCB+X'3E'         R4=BLKSIZE                WDPSC
         L     R5,RDECB+16              R5->IOB                   WDPSC
         SH    R4,14(,R5)               R4=BLKSIZE-RESIDUAL       WDPSC
         A     R4,BUFFAD                R4->END OF BLK +1         WDPSC
*                                                                 WDPSC
         CR    R3,R4                    STILL IN BLK?             WDPSC
         BLR   R14                      YES                       WDPSC
         NI    VBF,X'00'                NO->SAY NEW BLK NEEDED    WDPSC
         BR    R14                                                WDPSC
         EJECT
*
         REGEQU
*                END OF MODULE
@DATA    DS    0F
@SA00001 DS    18F
@PC00001 DS    2F
L1LS     DS    F                                                  WDPSC
BUFFAD   DS    F                                                  WDPSC
VBF      DS    X                                                  WDPSC
NRADD    DS    F                                                  WDPSC
         DS    0D
LONGNAME DS    CL8
         LTORG
         EJECT
FILEDCB  DCB   DDNAME=DATA,DSORG=PO,MACRF=(R),                         C
               SYNAD=READERR,EODAD=NODATA
         DCBD  DSORG=PO
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
@ENDDATA EQU   *
         END   ADMUSP6O
