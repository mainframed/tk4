      *******************************
       ID DIVISION.
      *******************************

       PROGRAM-ID. BLKING.
       AUTHOR.     GARY DUFFIELD.
       REMARKS.
                   THIS PROGRAM COMPUTES OPTIMUM BLKSIZE AND SPACE
             ALLOCATIONS FOR 3330, 3350 OR 3380 DISK PACKS.
           EJECT
      *******************************
       ENVIRONMENT DIVISION.
      *******************************

       CONFIGURATION SECTION.

       SPECIAL-NAMES.

       INPUT-OUTPUT SECTION.

       FILE-CONTROL.

           EJECT
      *******************************
       DATA DIVISION.
      *******************************

       FILE SECTION.

       WORKING-STORAGE SECTION.
     5 77  PAN-VALET PICTURE X(24) VALUE '007CBT1536   10/27/89'.

       01  SWITCHES.
           05  3330-BIG                 PIC XXX     VALUE 'NO '.
               88  3330-EXCEEDED                    VALUE 'YES'.

           05  3350-BIG                 PIC XXX     VALUE 'NO '.
               88  3350-EXCEEDED                    VALUE 'YES'.

           05  3380-BIG                 PIC XXX     VALUE 'NO '.
               88  3380-EXCEEDED                    VALUE 'YES'.

       01  WORK-AREAS.
           05  UNITTYPE                 PIC X(21)         VALUE SPACE.
           05  TRKCYL                   PIC XXX           VALUE 'TRK'.
           05  BLOCKSIZE                PIC Z(4)9         VALUE ZERO.
           05  PRIMARYA                 PIC Z(4)9         VALUE ZERO.
           05  SECONDARYA               PIC Z(4)9         VALUE ZERO.
           05  BLKSIZE                  PIC S9(9)  COMP-3 VALUE ZERO.
           05  PRIMARY                  PIC S9(9)  COMP-3 VALUE ZERO.
           05  SECONDARY                PIC S9(9)  COMP-3 VALUE ZERO.
           05  TRKSINCYL                PIC S9(9)  COMP-3 VALUE ZERO.
           05  MAXBLK                   PIC S9(9)  COMP-3 VALUE ZERO.
           05  MAXSIZE                  PIC S9(9)  COMP-3 VALUE ZERO.
           05  MAXSIZE1                 PIC S9(9)  COMP-3 VALUE ZERO.
           05  RECINBLK                 PIC S9(9)  COMP-3 VALUE ZERO.
           05  RECINTRK                 PIC S9(9)  COMP-3 VALUE ZERO.
           05  NOOFTRKS                 PIC S9(9)  COMP-3 VALUE ZERO.
           05  HOLDSIZE                 PIC S9(9)  COMP-3 VALUE ZERO.
           05  NOOFCYLS                 PIC S9(9)  COMP-3 VALUE ZERO.
           05  HOLDCYLS                 PIC S9(9)  COMP-3 VALUE ZERO.
           05  BLKPERTRK                PIC S9(9)  COMP-3 VALUE ZERO.
           05  BLKFCTR                  PIC S9(9)  COMP-3 VALUE ZERO.
           05  OVERHEAD                 PIC S9(9)  COMP-3 VALUE ZERO.
           05  TEST-BLKSIZE             PIC S9(9)  COMP-3 VALUE ZERO.
           05  HOLD-RECSINTRK           PIC S9(9)  COMP-3 VALUE ZERO.
           05  RECSINTRK                PIC S9(9)  COMP-3 VALUE ZERO.
           05  BLKPERTRK1               PIC S9(9)  COMP-3 VALUE ZERO.
           05  RECSINTRK1               PIC S9(9)  COMP-3 VALUE ZERO.
               EJECT
      *******************************
       LINKAGE SECTION.
      *******************************

      * THE LRECL AND APPROXIMATE NUMBER OF RECORDS IN THE FILE ARE
      * PASSED TO THE PROGRAM HERE.

         01 PARM-FIELDS.
            05  PARM-LENGTH             PIC S9(4) COMP.
            05  LRECL                   PIC 9(7).
            05  FILESIZE                PIC 9(9).
               EJECT
      **************************************
       PROCEDURE DIVISION USING PARM-FIELDS.
      **************************************
       100-CONTROL-MODULE.
      *******************************

           PERFORM 300-PROCESS-PARMS-MODULE.
           STOP RUN.
           EJECT
      *******************************
       300-PROCESS-PARMS-MODULE.
      *******************************

           DISPLAY '            UNIT TYPE          BLKSIZE   SPACE    '
                   ' PRIMARY      SECONDARY'
           DISPLAY '                                         UNIT'
           IF LRECL > 13030
                DISPLAY '     3330                        CANNOT BE'
                        ' USED (LRECL TOO LARGE)'
                MOVE 'YES' TO 3330-BIG
           ELSE
                PERFORM 310-COMPUTE-3330.
           IF LRECL > 19069
                DISPLAY '     3350                        CANNOT BE'
                        ' USED (LRECL TOO LARGE)'
                MOVE 'YES' TO 3350-BIG
           ELSE
                PERFORM 320-COMPUTE-3350.
           IF LRECL > 32767
                DISPLAY '     3380                        CANNOT BE'
                        ' USED (LRECL TOO LARGE)'
                MOVE 'YES' TO 3380-BIG
           ELSE
                PERFORM 330-COMPUTE-3380.
           IF 3330-EXCEEDED OR 3350-EXCEEDED
                DISPLAY '     3330-3350 COMPATIBLE        (NOT'
                        ' APPLICABLE)'
           ELSE
                PERFORM 340-COMPUTE-3050.
           IF 3350-EXCEEDED OR 3380-EXCEEDED
                DISPLAY '     3350-3380 COMPATIBLE        (NOT'
                        ' APPLICABLE)'
           ELSE
                PERFORM 350-COMPUTE-5080.

      *******************************
       310-COMPUTE-3330.
      *******************************

           MOVE '3330' TO UNITTYPE.
           MOVE     19 TO TRKSINCYL.
           MOVE      0 TO HOLD-RECSINTRK.
           MOVE  13165 TO MAXSIZE.
           MOVE    135 TO OVERHEAD.
           MOVE      0 TO BLKFCTR.
           MOVE      0 TO TEST-BLKSIZE.
           PERFORM 400-CHECK-BEST-MODULE
              UNTIL TEST-BLKSIZE > MAXSIZE.
           PERFORM 500-COMPUTE-MODULE.

      *******************************
       320-COMPUTE-3350.
      *******************************

           MOVE '3350' TO UNITTYPE.
           MOVE     30 TO TRKSINCYL.
           MOVE      0 TO HOLD-RECSINTRK.
           MOVE  19254 TO MAXSIZE.
           MOVE    185 TO OVERHEAD.
           MOVE      0 TO BLKFCTR.
           MOVE      0 TO TEST-BLKSIZE.
           PERFORM 400-CHECK-BEST-MODULE
              UNTIL TEST-BLKSIZE > MAXSIZE.
           PERFORM 500-COMPUTE-MODULE.

      *******************************
       330-COMPUTE-3380.
      *******************************

           MOVE '3380' TO UNITTYPE.
           MOVE     15 TO TRKSINCYL.
           MOVE      0 TO HOLD-RECSINTRK.
           MOVE  47968 TO MAXSIZE.
           MOVE    480 TO OVERHEAD.
           MOVE      0 TO BLKFCTR.
           MOVE      0 TO TEST-BLKSIZE.
           PERFORM 400-CHECK-BEST-MODULE
              UNTIL TEST-BLKSIZE > 32767.
           PERFORM 500-COMPUTE-MODULE.

      *******************************
       340-COMPUTE-3050.
      *******************************

           MOVE '3330-3350 COMPATIBLE' TO UNITTYPE.
           MOVE     19 TO TRKSINCYL.
           MOVE      0 TO HOLD-RECSINTRK.
           MOVE  13165 TO MAXSIZE.
           MOVE  19254 TO MAXSIZE1.
           MOVE    185 TO OVERHEAD.
           MOVE      0 TO BLKFCTR.
           MOVE      0 TO TEST-BLKSIZE.
           PERFORM 420-CHECK-BEST-OF-BOTH-MODULE
              UNTIL TEST-BLKSIZE > MAXSIZE.
           PERFORM 500-COMPUTE-MODULE.

      *******************************
       350-COMPUTE-5080.
      *******************************

           MOVE '3350-3380 COMPATIBLE' TO UNITTYPE.
           MOVE     15 TO TRKSINCYL.
           MOVE      0 TO HOLD-RECSINTRK.
           MOVE  19254 TO MAXSIZE.
           MOVE  47968 TO MAXSIZE1.
           MOVE    480 TO OVERHEAD.
           MOVE      0 TO BLKFCTR.
           MOVE      0 TO TEST-BLKSIZE.
           PERFORM 420-CHECK-BEST-OF-BOTH-MODULE
              UNTIL TEST-BLKSIZE > MAXSIZE.
           PERFORM 500-COMPUTE-MODULE.
           EJECT
      *******************************
       400-CHECK-BEST-MODULE.
      *******************************

           ADD 1 TO BLKFCTR
           COMPUTE TEST-BLKSIZE = (LRECL * BLKFCTR) + OVERHEAD.
           IF TEST-BLKSIZE NOT > MAXSIZE
              PERFORM 410-COMPUTE-BEST-MODULE.

      *******************************
       410-COMPUTE-BEST-MODULE.
      *******************************

           COMPUTE BLKPERTRK = MAXSIZE / TEST-BLKSIZE.
           COMPUTE RECSINTRK = BLKPERTRK * BLKFCTR.
           IF RECSINTRK > HOLD-RECSINTRK
              MOVE RECSINTRK      TO HOLD-RECSINTRK
              MOVE RECSINTRK      TO RECINTRK
              MOVE BLKFCTR        TO RECINBLK
              COMPUTE BLKSIZE = TEST-BLKSIZE - OVERHEAD.

      *******************************
       420-CHECK-BEST-OF-BOTH-MODULE.
      *******************************

           ADD 1 TO BLKFCTR.
           COMPUTE TEST-BLKSIZE =
                   (LRECL * BLKFCTR) + OVERHEAD.
           IF TEST-BLKSIZE NOT > MAXSIZE
              PERFORM 430-COMPUTE-BEST-OF-BOTH.

      *******************************
       430-COMPUTE-BEST-OF-BOTH.
      *******************************

           COMPUTE BLKPERTRK = MAXSIZE / TEST-BLKSIZE.
           COMPUTE RECSINTRK = BLKPERTRK * BLKFCTR.
           COMPUTE BLKPERTRK1 = MAXSIZE1 / TEST-BLKSIZE.
           COMPUTE RECSINTRK1 = BLKPERTRK1 * BLKFCTR.
           IF RECSINTRK NOT < RECSINTRK1
              COMPUTE RECSINTRK =
                 (RECSINTRK + RECSINTRK1) - (RECSINTRK - RECSINTRK1)
           ELSE
              COMPUTE RECSINTRK =
                 (RECSINTRK1 + RECSINTRK) - (RECSINTRK1 - RECSINTRK).
           IF RECSINTRK > HOLD-RECSINTRK
              MOVE RECSINTRK      TO HOLD-RECSINTRK
              MOVE RECSINTRK      TO RECINTRK
              MOVE BLKFCTR        TO RECINBLK
              COMPUTE BLKSIZE = TEST-BLKSIZE - OVERHEAD.
           EJECT
      *******************************
       500-COMPUTE-MODULE.
      *******************************

           COMPUTE NOOFTRKS  = FILESIZE / RECINTRK.
           COMPUTE HOLDSIZE  = NOOFTRKS * RECINTRK.
           IF HOLDSIZE < FILESIZE
                ADD 1 TO NOOFTRKS.
           MOVE NOOFTRKS TO PRIMARY.
           COMPUTE NOOFCYLS = NOOFTRKS / TRKSINCYL.
           IF NOOFCYLS > ZERO
                MOVE 'CYL' TO TRKCYL
                MOVE NOOFCYLS TO PRIMARY
                COMPUTE HOLDCYLS  = NOOFCYLS * TRKSINCYL
                IF HOLDCYLS < NOOFTRKS
                     ADD 1 TO PRIMARY.
           COMPUTE SECONDARY  = PRIMARY / 4.
           COMPUTE PRIMARY  = PRIMARY - SECONDARY.
           IF SECONDARY = 0
                MOVE 1 TO SECONDARY.
           MOVE BLKSIZE TO BLOCKSIZE.
           MOVE PRIMARY TO PRIMARYA.
           MOVE SECONDARY TO SECONDARYA.
           DISPLAY '     ' UNITTYPE '     ' BLOCKSIZE '     ' TRKCYL
                '      ' PRIMARYA '         ' SECONDARYA
           MOVE ZERO TO BLKSIZE PRIMARY SECONDARY TRKSINCYL MAXBLK
                RECINBLK RECINTRK NOOFTRKS HOLDSIZE NOOFCYLS TRKSINCYL
                HOLDCYLS.
           MOVE SPACE TO UNITTYPE.
           MOVE 'TRK' TO TRKCYL.
