         TITLE 'DATASET ACCESS REPORT - &SYSDATE'
***********************************************************************
*                                                                     *
*                          F L S M F D S N                            *
*                                                                     *
*                                                                     *
*        THIS PROGRAM WAS WRITTEN TO FORMAT A REPORT OF SELECTED      *
*        SMF TYPE 14, 15, AND 64 RECORDS.  THE FOLLOWING              *
*        INFORMATION CAN BE WRITTEN IN THE REPORT:                    *
*                                                                     *
*        1)  BLKSIZE                                                  *
*        2)  DATASET NAME                                             *
*        3)  OPEN DATE            (NON-VSAM ONLY)                     *
*        4)  OPEN DAY OF THE WEEK (NON-VSAM ONLY)                     *
*        5)  CLOSE DATE                                               *
*        6)  CLOSE DAY OF THE WEEK                                    *
*        7)  DDNAME                                                   *
*        8)  DSORG                                                    *
*        9)  EXCP COUNT                                               *
*        10) HOW OPENED                                               *
*        11) JOB TYPE                                                 *
*        12) JOBNAME                                                  *
*        13) LRECL                                                    *
*        14) RECFM                                                    *
*        15) SMF SYSTEM-ID                                            *
*        16) TIME                                                     *
*        17) UNIT TYPE                                                *
*        18) VOLSER         (FIRST VOLUME IF MULTIVOLUME)             *
*                                                                     *
***********************************************************************
*                                                                     *
*                           NOTE                                      *
*                                                                     *
*                                                                     *
*        MULTIVOLUME DATASETS ARE DIFFICULT TO HANDLE.  THIS IS       *
*        BECAUSE OF THE VARYING WAYS THAT SMF REPORTS THEM.  THE      *
*        ISSUES ARE AS FOLLOWS:                                       *
*                                                                     *
*        1)  MULTIVOLUME SEQUENTIAL FILES HAVE A RECORD WRITTEN       *
*            FOR EACH VOLUME OF THE DATASET AS END-OF-VOLUME OR       *
*            END-OF-FILE IS REACHED.  THIS ALLOWS THE BLOCK           *
*            COUNTS TO BE DISPLAYED FOR EACH VOLUME. SINCE            *
*            EACH VOLUME WILL PRODUCE A UNIQUE LINE ON THE            *
*            REPORT WITH DIFFERENT DATES AND/OR TIMES IT MAY          *
*            APPEAR AS IF EACH LINE IS A SEPARATE ACCESS              *
*            INSTEAD OF PART OF THE SAME PROCESS.                     *
*                                                                     *
*        2)  MULTIVOLUME SEQUENTIAL FILES WHICH ARE PROCESSED         *
*            AS BDAM FILES SUCH AS ADABAS DATASETS ARE                *
*            PROCESSED AS TRUE MULTIVOLUME FILES WITH THE             *
*            BLOCK COUNT REFLECTING THE TOTAL I/O FOR ALL             *
*            VOLUMES.                                                 *
*                                                                     *
*        3)  MULTIVOLUME VSAM FILES ALSO SHOW US AS MULTIVOLUME       *
*            DATASETS WITH I/O COUNTS REFLECTING THE TOTAL FOR        *
*            ALL VOLUMES.                                             *
*                                                                     *
*        4)  WHEN THE VOLSER IS REQUESTED ON THE REPORT, IT           *
*            WILL SHOW ONLY THE FIRST VOLUME OF A MULTIVOLUME         *
*            DATASET.  THERE WAS NO GOOD WAY TO DISPLAY ALL           *
*            OF THEM WITHOUT APPEARING AS SEPARATE EVENTS.            *
*                                                                     *
*        5)  WHEN SELECTING OR EXCLUDING BY VOLSER, ALL               *
*            VOLUMES FOR A MULTIVOLUME DATASET ARE CONSIDERED.        *
*            AGAIN, IF THE VOLSER IS PRINTED ON THE REPORT, IT        *
*            WILL SHOW ONLY THE FIRST VOLSER WHICH MAY NOT BE         *
*            THE VOLSER USED FOR SELECTION.                           *
*                                                                     *
***********************************************************************
*                                                                     *
*                           NOTE                                      *
*                                                                     *
*                                                                     *
*        DAY OF THE WEEK SELECTION CAN BE MADE ON THE ACCORDING       *
*        TO THE DAY OF THE WEEK ACCORDING TO THE DATE THE DATA        *
*        SET WAS OPENED OR CLOSED.  THE KEYWORD ODAY IS USED          *
*        TO SPECIFY WHICH DAYS WILL BE SELECTED BASED UPON            *
*        OPEN DATE.  THE KEYWORD CDAY IS USED FOR THE CLOSE           *
*        DATE.  ONE OR MORE SUBPARAMETERS CAN BE SPECIFIED ON         *
*        THE ODAY OR CDAY STATEMENT OR MULTIPLE STATEMENTS            *
*        CAN BE USED.  IN EITHER CASE, THE SUBPARAMETERS ARE          *
*        PROCESSED IN THE ORDER SPECIFIED.  SOME SUBPARAMETERS        *
*        "INCLUDE" ONE OR MORE DAYS WHILE OTHERS "EXCLUDE".           *
*        BECAUSE OF THIS THE ORDER OF ENTRY IS CRITICAL.  AT          *
*        LEAST 1 "INCLUDING" STATEMENT MUST BE USED OR NO DAYS        *
*        WILL BE SELECTED.  THE "INCLUDING' STATEMENTS ARE AS         *
*        FOLLOWS:                                                     *
*                                                                     *
*        1)  SUNDAY           INCLUDE SUNDAY DATA                     *
*        2)  MONDAY           INCLUDE MONDAY DATA                     *
*        3)  TUESDAY          INCLUDE TUESDAY DATA                    *
*        4)  WEDNESDAY        INCLUDE WEDNESDAY DATA                  *
*        5)  THURSDAY         INCLUDE THURSDAY DATA                   *
*        6)  FRIDAY           INCLUDE FRIDAY DATA                     *
*        7)  SATURDAY         INCLUDE SATURDAY DATA                   *
*        8)  WEEKDAY          INCLUDE SAT AND SUN DATA                *
*        9)  WEEKEND          INCLUDE MON THROUGH FRI DATA            *
*        10) ALLDAYS/EVERYDAY INCLUDE DATA FOR ALL DAYS               *
*                                                                     *
*        AFTER "INCLUDING" DATA FOR SOME DAYS OF THE WEEK, ONE        *
*        OR MORE CAN THEN BE "EXCLUDED".  THE "EXCLUDING"             *
*        SUBPARAMETERS ARE AS FOLLOWS:                                *
*                                                                     *
*        1)  NOSUNDAY         EXCLUDE SUNDAY DATA                     *
*        2)  NOMONDAY         EXCLUDE MONDAY DATA                     *
*        3)  NOTUESDAY        EXCLUDE TUESDAY DATA                    *
*        4)  NOWEDNESDAY      EXCLUDE WEDNESDAY DATA                  *
*        5)  NOTHURSDAY       EXCLUDE THURSDAY DATA                   *
*        6)  NOFRIDAY         EXCLUDE FRIDAY DATA                     *
*        7)  NOSATURDAY       EXCLUDE SATURDAY DATA                   *
*        8)  NOWEEKDAY        EXCLUDE SAT AND SUN DATA                *
*        9)  NOWEEKEND        EXCLUDE MON THROUGH FRI DATA            *
*                                                                     *
*        IF NEITHER THE ODAY OR CDAY STATEMENT IS ENTERED, THEN       *
*        ALL DAYS ARE INCLUDED.                                       *
*                                                                     *
*        IT IS POSSIBLE THAT THROUGH AN INVALID COMBINATION OF        *
*        PARAMETERS THAT NO DATA SELECTION MAY OCCUR.  THE            *
*        PARAMETERS ARE PROCESSED IN THE ORDER ENTERED.  FOR          *
*        INSTANCE:                                                    *
*                                                                     *
*        WEEKEND                                                      *
*        NOSATURDAY                                                   *
*        NOSUNDAY                                                     *
*                                                                     *
*        THIS COMBINATION WOULD LOGICALLY EXCLUDE ALL DATA.           *
*                                                                     *
*        LIKEWISE:                                                    *
*                                                                     *
*        NOMONDAY                                                     *
*                                                                     *
*        THIS COMBINATION WOULD LOGICALLY EXCLUDE ALL DATA.           *
*        IF ONLY EXCLUDING PARAMETERS ARE ENTERED, NO SELECTION       *
*        CAN OCCUR.  IT IS PROBABLY SAFER TO ONLY USE INCLUDING       *
*        STATEMENTS.                                                  *
*                                                                     *
***********************************************************************
*                                                                     *
*                                                                     *
*        RECORD SELECTION AND CONTROL IS BY SYSIN CONTROL             *
*        STATEMENTS (IF ANY).  ANY NUMBER OF STATEMENTS CAN           *
*        BE ENTERED WITH THE KEYWORD STARTING IN COLUMN 1             *
*        OF EACH STATEMENT.                                           *
*                                                                     *
*                                                                     *
*        ALLOWABLE INPUT RECORD KEYWORDS ARE AS FOLLOWS:              *
*                                                                     *
*        1)  JOBNAME=JJJJJJJJ(NN)                                     *
*            WHERE JJJJJJJJ IS A 1 TO 8 CHARACTER JOBNAME             *
*                  N IS THE STARTING POSITION WITHIN THE FULL         *
*                  JOBNAME TO BE USED FOR SELECTION                   *
*                                                                     *
*            ALIASES JOBNM                                            *
*                                                                     *
*            UP TO 1000 JOBNAME CONTROL STATEMENTS MAY BE             *
*            ENTERED                                                  *
*                                                                     *
*        2)  EXJOBNAME=JJJJJJJJ(NN)                                   *
*            WHERE JJJJJJJJ IS A 1 TO 8 CHARACTER JOBNAME             *
*                  N IS THE STARTING POSITION WITHIN THE FULL         *
*                  JOBNAME TO BE EXCLUDED FROM SELECTION.             *
*                                                                     *
*            ALIASES XJOBNAME, EXJOBNM, XJOBNM                        *
*                                                                     *
*            UP TO 1000 EXJOBNAME CONTROL STATEMENTS MAY BE           *
*            ENTERED                                                  *
*                                                                     *
*        3)  DATE=SDATE:EDATE                                         *
*            WHERE SDATE IS THE START DATE AND EDATE IS THE           *
*                  OPTIONAL END DATE OF THE DATES WHEN THE            *
*                  DATASET WAS OPENED OR CLOSED.  NOTE THAT           *
*                  NONVSAM DATASETS PROVIDE AN OPEN DATE AND          *
*                  TIME.  THE DATE RANGE WILL CONSIDER THE            *
*                  OPEN DATE FOR THE SDATE SPECIFIECATION AND         *
*                  THE CLOSE DATE FOR THE EDATE SPECIFICATION.        *
*                  THE TWO DATES MUST HAVE ONE OF THE FOLLOWING       *
*                  FORMATS:                                           *
*                                                                     *
*                  YY.DDD                                             *
*                  YYYY.DDD                                           *
*                  MM/DD/YY                                           *
*                  YYYY/MM/DD                                         *
*                                                                     *
*                                                                     *
*            ALIASES *NONE*                                           *
*                                                                     *
*            UP TO 1000 DATE RANGE CONTROL STATEMENTS MAY BE          *
*            ENTERED                                                  *
*                                                                     *
*        4)  OTIME=STIME:ETIME                                        *
*            WHERE STIME IS THE START TIME AND ETIME IS THE           *
*                  OPTIONAL END TIME OF THE TIMES WHEN THE            *
*                  DATASET WAS OPENED.  STIME AND THE OPTIONAL        *
*                  ETIME MUST HAVE THE FOLLOWING FORMAT:              *
*                                                                     *
*                  HH.MM                                              *
*                                                                     *
*            ALIASES OPENTIME                                         *
*                                                                     *
*            UP TO 1000 OTIME RANGE CONTROL STATEMENTS MAY BE         *
*            ENTERED                                                  *
*                                                                     *
*        5)  CTIME=STIME:ETIME                                        *
*            WHERE STIME IS THE START TIME AND ETIME IS THE           *
*                  OPTIONAL END TIME OF THE TIMES WHEN THE            *
*                  DATASET WAS CLOSED.  STIME AND THE OPTIONAL        *
*                  ETIME MUST HAVE THE FOLLOWING FORMAT:              *
*                                                                     *
*                  HH.MM                                              *
*                                                                     *
*            ALIASES CLOSETIME/TIME                                   *
*                                                                     *
*            UP TO 1000 CTIME RANGE CONTROL STATEMENTS MAY BE         *
*            ENTERED                                                  *
*                                                                     *
*        6)  SYSTEM=SSSS                                              *
*            WHERE SSSS IS THE 4 CHARACTER SMF SYSTEM ID TO BE        *
*                  USED FOR SELECTION                                 *
*                                                                     *
*            ALIASES SYSID                                            *
*                                                                     *
*            UP TO 1000 SYSTEM ID CONTROL STATEMENTS MAY BE           *
*            ENTERED                                                  *
*                                                                     *
*        7)  EXSYSTEM=SSSS                                            *
*            WHERE SSSS IS THE 4 CHARACTER SMF SYSTEM ID TO BE        *
*                  EXCLUDED FROM SELECTION                            *
*                                                                     *
*            ALIASES EXSYSID, XSYSTEM, XSYSID                         *
*                                                                     *
*            UP TO 1000 EXSYSTEM ID CONTROL STATEMENTS MAY BE         *
*            ENTERED                                                  *
*                                                                     *
*        8)  DSN=DDDDDDDDD                                            *
*            WHERE DDDDDDDD IS THE DATASET NAME BEING PROCESSED       *
*                  TO BE USED FOR SELECTION                           *
*                                                                     *
*            ALIASES DATASET                                          *
*                                                                     *
*            UP TO 1000 DATASET NAME CONTROL STATEMENTS MAY BE        *
*            ENTERED                                                  *
*                                                                     *
*        9)  EXDSNAME=DDDDDDDDD                                       *
*            WHERE DDDDDDDD IS THE DATASET NAME BEING PROCESSED       *
*                  TO BE EXCLUDED FROM SELECTION                      *
*                                                                     *
*            ALIASES EXDATASET, XDSNAMD, XDATASET                     *
*                                                                     *
*            UP TO 1000 EXDATASET NAME CONTROL STATEMENTS MAY BE      *
*            ENTERED                                                  *
*                                                                     *
*        10) DDNAME=FFFFFFFF                                          *
*            WHERE FFFFFFFF IS THE DDNAME BY WHICH THE DATASET        *
*                  WAS DEFINED TO BE USED FOR SELECTION               *
*                                                                     *
*            ALIASES FILENAME                                         *
*                                                                     *
*            UP TO 1000 DD NAME CONTROL STATEMENTS MAY BE             *
*            ENTERED                                                  *
*                                                                     *
*        11) EXDDNAME=FFFFFFFF                                        *
*            WHERE FFFFFFFF IS THE DDNAME BY WHICH THE DATASET        *
*                  WAS DEFINED TO BE EXCLUDED FROM SELECTION          *
*                                                                     *
*            ALIASES EXFILENAME, XDDNAME, XFILENAME                   *
*                                                                     *
*            UP TO 1000 EXDD NAME CONTROL STATEMENTS MAY BE           *
*            ENTERED                                                  *
*                                                                     *
*        12) ACCESS=TYPE                                              *
*            WHERE TYPE IS THE ACCESS TYPE (INPUT/OUTPUT/ALL)         *
*                  TO BE USED FOR SELECTION                           *
*                                                                     *
*            ALIASES *NONE*                                           *
*                                                                     *
*            UP TO 1000 ACCESS TYPE CONTROL STATEMENTS MAY BE         *
*            ENTERED                                                  *
*                                                                     *
*        13) UNIT=UUUU                                                *
*            WHERE UUUU IS THE UNIT TYPE (DISK/TAPE) TO BE            *
*                  USED FOR SELECTION                                 *
*                                                                     *
*            ALIASES *NONE*                                           *
*                                                                     *
*            UP TO 1000 UNIT TYPE CONTROL STATEMENTS MAY BE           *
*            ENTERED                                                  *
*                                                                     *
*        14) VOLSER=VVVVVV                                            *
*            WHERE VVVVVV IS THE VOLSER OF THE DASD OR TAPE           *
*                  DEVICE CONTAINING THE DATASET.                     *
*                                                                     *
*            ALIASES VOLUME                                           *
*                                                                     *
*            UP TO 1000 VOLSER CONTROL STATEMENTS MAY BE              *
*            ENTERED                                                  *
*                                                                     *
*        15) EXVOLSER=VVVVVV                                          *
*            WHERE VVVVVV IS THE VOLSER OF THE DASD OR TAPE           *
*                  DEVICE CONTAINING THE DATASET TO BE EXCLUDED       *
*                  FROM SELECTION.                                    *
*                                                                     *
*            ALIASES EXVOLUME, XVOLSER, XVOLUME                       *
*                                                                     *
*            UP TO 1000 EXVOLSER CONTROL STATEMENTS MAY BE            *
*            ENTERED                                                  *
*                                                                     *
*        16) DSORG=DDD                                                *
*            WHERE DDD IS THE DATASET ORGANIZATION OF THE DATASET     *
*                  TO BE USED FOR SELECTION                           *
*                                                                     *
*            ALIASES *NONE*                                           *
*                                                                     *
*            UP TO 1000 DATASET ORGANIZATION CONTROL STATEMENTS       *
*            MAY BE ENTERED                                           *
*                                                                     *
*        17) RECFM=RRR                                                *
*            WHERE RRR IS THE RECORD FORMAT OF THE DATASET TO         *
*                  BE USED FOR SELETION                               *
*                                                                     *
*            ALIASES *NONE*                                           *
*                                                                     *
*            UP TO 1000 RECORD FORMAT CONTROL STATEMENTS MAY BE       *
*            ENTERED                                                  *
*                                                                     *
*        18) LRECL>NNNNN                                              *
*            LRECL<NNNNN                                              *
*            WHERE NNNNN IS THE LOGICAL RECORD LENGTH OF THE          *
*                  DATASET TO BE USED FOR SELECTION                   *
*                                                                     *
*            ALIASES RECORDLEN                                        *
*                                                                     *
*        19) BLKSIZE>NNNNN                                            *
*            BLKSIZE<NNNNN                                            *
*            WHERE NNNNN IS THE PHYSICAL BLOCK SIZE OF THE            *
*                  DATASET TO BE USED FOR SELECTION                   *
*                                                                     *
*            ALIASES BLOCKLEN                                         *
*                                                                     *
*        20) EXCPS>NNNNNNNNN                                          *
*            EXCPS<NNNNNNNNN                                          *
*            WHERE NNNNNNNNN IS THE I/O COUNT FOR THE STEP TO BE      *
*                  USED FOR SELECTION                                 *
*                                                                     *
*            ALIASES BLOCKCOUNT/BLOCKCNT/BLOCKS                       *
*                                                                     *
*        21) JOBTYPE=X                                                *
*            WHERE X IS EITHER A T FOR TEST JOBS OR A P FOR           *
*                  PRODUCTION JOBS TO BE USED FOR SELECTION.          *
*                                                                     *
*            ALIASES JTYPE/TYPE                                       *
*                                                                     *
*        22) STOPAFTER=NNNNNNNNN                                      *
*                                                                     *
*            WHERE NNNNNNNNN IS THE NUMBER OF ITEMS TO INCLUDE        *
*                  ON THE REPORT.  IT WILL THE BE FIRST NNNNNN        *
*                  INPUT TYPE 14, 15, OR 64 RECORDS IF THE SORT       *
*                  OPTION IS NOT TAKEN OR THE FIRST NNNNNN            *
*                  RECORDS OF THE REQUESTED SORT SEQUENCE.            *
*                                                                     *
*            ALIASES STOPCOUNT/STOPCNT                                *
*                                                                     *
*        23) ODAY=OPT1,OPT2,OPT3,OPT4                                 *
*            WHERE SELECTING OF DATA IS BASED UPON THE DAY OF THE     *
*            WHEN THE DATASET WAS OPENED.  THE ALLOWABLE OPTIONS      *
*            ARE LISTED BELOW:                                        *
*                                                                     *
*            SUNDAY/NOSUNDAY                                          *
*            MONDAY/NOMONDAY                                          *
*            TUESDAY/NOTUESDAY                                        *
*            WEDNESDAY/NOWEDNESDAY                                    *
*            THURSDAY/NOTHURSDAY                                      *
*            FRIDAY/NOFRIDAY                                          *
*            SATURDAY/NOSATURDAY                                      *
*            WEEKDAY/NOWEEKDAY                                        *
*            WEEKEND/NOWEEKEND                                        *
*            ALLDAYS/EVERYDAY                                         *
*                                                                     *
*            THESE CONTROL PARAMETERS, WHEN USED IN COMBINATION,      *
*            WILL SELECT DATA BASED UPON THE DAY OF THE WEEK.         *
*            THEY ARE PROCESSED IN THE ORDER RECEIVED.  NO DATA       *
*            IS AUTOMATICALLY INCLUDED.  AT LEAST ONE "INCLUDING"     *
*            STATEMENT MUST BE ENTERED IF ANY OF THESE STATEMENTS     *
*            ARE ENTERED.  IF NONE OF THESE PARAMETERS ARE USED,      *
*            ALL DAYS ARE SELECTED.                                   *
*                                                                     *
*        24) CDAY=OPT1,OPT2,OPT3,OPT4                                 *
*            WHERE SELECTING OF DATA IS BASED UPON THE DAY OF THE     *
*            WHEN THE DATASET WAS CLOSED.  THE ALLOWABLE OPTIONS      *
*            ARE LISTED BELOW:                                        *
*                                                                     *
*            SUNDAY/NOSUNDAY                                          *
*            MONDAY/NOMONDAY                                          *
*            TUESDAY/NOTUESDAY                                        *
*            WEDNESDAY/NOWEDNESDAY                                    *
*            THURSDAY/NOTHURSDAY                                      *
*            FRIDAY/NOFRIDAY                                          *
*            SATURDAY/NOSATURDAY                                      *
*            WEEKDAY/NOWEEKDAY                                        *
*            WEEKEND/NOWEEKEND                                        *
*            ALLDAYS/EVERYDAY                                         *
*                                                                     *
*            THESE CONTROL PARAMETERS, WHEN USED IN COMBINATION,      *
*            WILL SELECT DATA BASED UPON THE DAY OF THE WEEK.         *
*            THEY ARE PROCESSED IN THE ORDER RECEIVED.  NO DATA       *
*            IS AUTOMATICALLY INCLUDED.  AT LEAST ONE "INCLUDING"     *
*            STATEMENT MUST BE ENTERED IF ANY OF THESE STATEMENTS     *
*            ARE ENTERED.  IF NONE OF THESE PARAMETERS ARE USED,      *
*            ALL DAYS ARE SELECTED.                                   *
*                                                                     *
*        25) SORT=OPT1,OPT2,OPT3,OPT4,OPT5                            *
*            WHERE SORTING OF THE INPUT DATA IS REQUESTED IN THE      *
*            ORDER IN WHICH THE FOLLOWING OPTIONS ARE LISTED:         *
*                                                                     *
*            A)  ACCESS                                               *
*            B)  BLKSIZE/BLOCKLEN                                     *
*            C)  CDATE/CLOSEDATE/CJDATE/CLOSEJDATE/DATE               *
*            D)  CDAY/CLOSEDAY/DAYOFTHEWEEK                           *
*            E)  CGDATE/CLOSEGDATE/GDATE                              *
*            F)  CTIME/CLOSETIME/TIME                                 *
*            G)  DDNAME/FILENAME                                      *
*            H)  DSNAME/DATASET                                       *
*            I)  DSORG                                                *
*            J)  EXCPS/BLOCKCOUNT/BLOCKCNT/BLOCKS                     *
*            K)  JOBNAME/JOBNM                                        *
*            L)  JOBTYPE/JTYPE/TYPE                                   *
*            M)  LRECL/RECORDLEN                                      *
*            N)  ODATE/OPENDATE/OJDATE/OPENJDATE                      *
*            O)  ODAY/OPENDAY                                         *
*            P)  OGDATE/OPENGDATE                                     *
*            Q)  OTIME/OPENTIME                                       *
*            R)  RECFM                                                *
*            S)  SYSTEM/SYSID                                         *
*            T)  UNIT                                                 *
*            U)  VOLSER/VOLUME                                        *
*                                                                     *
*            NOTE THAT EACH KEYWORD CAN BE SUFFIXED BY "(A)" OR       *
*            "(D)" FOR ASCENDING OR DESCENDING SORT SEQUENCE.         *
*            THE DEFAULT IS "(A)" FOR ASCENDING                       *
*                                                                     *
*            A MAXIMUM OF FIVE OF THE ABOVE OPTIONS MAY BE MADE       *
*            ON A GIVEN RUN.                                          *
*                                                                     *
*            IF AN OPTION IS NOT SPECIFIED, NO SORTING ON THAT        *
*            FIELD WILL BE MADE.                                      *
*                                                                     *
*        26) PRINT=FIELD1,FIELD2,FIELD3,FIELD4, ... FIELD.            *
*            WHERE CUSTOM SELECTION OF THE FIELDS TO BE INCLUDED      *
*            ON THE OUTPUT REPORT IS BEING MADE.  THE FIELDS          *
*            WILL BE PRINTED IN THE ORDER SPECIFIED AND INCLUDE       *
*            THE FOLLOWING VALUES:                                    *
*                                                                     *
*            A)  ACCESS                                               *
*            B)  BLKSIZE/BLOCKLEN                                     *
*            C)  CDATE/CLOSEDATE/CJDATE/CLOSEJDATE/DATE               *
*            D)  CDAY/CLOSEDAY/DAYOFTHEWEEK                           *
*            E)  CGDATE/CLOSEGDATE/GDATE                              *
*            F)  CTIME/CLOSETIME/TIME                                 *
*            G)  DDNAME/FILENAME                                      *
*            H)  DSNAME/DATASET                                       *
*            I)  DSORG                                                *
*            J)  EXCPS/BLOCKCOUNT/BLOCKCNT/BLOCKS                     *
*            K)  JOBNAME/JOBNM                                        *
*            L)  JOBTYPE/JTYPE/TYPE                                   *
*            M)  LRECL/RECORDLEN                                      *
*            N)  ODATE/OPENDATE/OJDATE/OPENJDATE                      *
*            O)  ODAY/OPENDAY                                         *
*            P)  OGDATE/OPENGDATE                                     *
*            Q)  OTIME/OPENTIME                                       *
*            R)  RECFM                                                *
*            S)  SYSTEM/SYSID                                         *
*            T)  UNIT                                                 *
*            U)  VOLSER/VOLUME                                        *
*                                                                     *
*            AS MANY FIELDS MAY BE SELECTED AS WILL FIT IN THE        *
*            133 CHARACTER PRINT LINE.                                *
*                                                                     *
*            MULTIPLE PRINT STATEMENTS CAN BE USED IF THE NUMBER      *
*            OR FIELDS NAMES IS EXCESSIVE.                            *
*                                                                     *
*                                                                     *
*                                                                     *
*        L I N K A G E    E D I T O R    I N F O R M A T I O N        *
*                                                                     *
*        SIZE - 28K                                                   *
*        ATTR - NORENT, NOREUS, NOREFR, AMODE24, RMODE24              *
*                                                                     *
*                                                                     *
*                                                                     *
*        WRITTEN BY:                                                  *
*                   JOHN V. HOOPER                                    *
*                   FOOD LION, INC.                                   *
*                   2110 EXECUTIVE DRIVE                              *
*                   SALISBURY, N.C.  28145-1330                       *
*                                                                     *
*                                                                     *
*                           DISCLAIMER                                *
*                                                                     *
*      THE AUTHORS INCLUDING FOOD LION, ITS OFFICERS,                 *
*      DIRECTORS, AND EMPLOYEES MAKE NO REPRESENTATION OR             *
*      WARRANTY OF ANY KIND WHATSOEVER, INCLUDING, BUT NOT            *
*      LIMITED TO, REPRESENTATIONS OR WARRANTIES, EXPRESS OR          *
*      IMPLIED, OR MERCHANTABILITY, FITNESS FOR USE OR PURPOSE,       *
*      ACCURACY OR COMPLETENESS OF PROCESSES, PROCEDURES,             *
*      DESIGNS, DEFINITIONS, INSTRUCTIONS, INFORMATION, OR            *
*      FUNCTIONING OF ANY PROGRAMS, DOCUMENTS, OR RELATED             *
*      MATERIALS; THE AUTHORS FURTHER EXPRESSLY DISCLAIM ANY          *
*      KNOWLEDGE OF PURPOSE FOR WHICH THESE PROGRAMS,                 *
*      DOCUMENTS, OR RELATED MATERIAL MAY BE UTILIZED OR THEIR        *
*      APPLICABILITY FOR SUCH USE, NOR SHALL THE FACT OF MAKING       *
*      THEM AVAILABLE CONSTITUTE ANY SUCH REPRESENTATION,             *
*      WARRANTY, OR KNOWLEDGE; NOR DO THE AUTHORS ASSUME ANY          *
*      LIABILITY, RESPONSIBILITY, OR OBLIGATION ARISING FROM          *
*      THE USE OR MALFUNCTIONING OF OF THESE COMPUTER PROGRAMS,       *
*      DOCUMENTATION, OR RELATED MATERIALS.                           *
*                                                                     *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*                                                                     *
*                           SAMPLE JCL                                *
*                                                                     *
*       //JOBNAME  JOB ....                                           *
*       //STEP1    EXEC PGM=FLSMFDSN                                  *
*       //SMFIN    DD  DSN=SMF.INPUT.FILE,DISP=SHR                    *
*       //SYSPRINT DD  SYSOUT=*                                       *
*       //SYSOUT   DD  SYSOUT=*                                       *
*       //SYSUDUMP DD  SYSOUT=*                                       *
*       //SYSIN    DD  *                                              *
*       DSORG=PS                                                      *
*       BLKSIZE<10000                                                 *
*       BLKSIZE>1                                                     *
*       SORT=DSN                                                      *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*                                                                     *
*                        M A C R O S    U S E D                       *
*                                                                     *
*                                                                     *
*        01)  ABEND        SYS1.MACLIB                                *
*        02)  CLOSE        SYS1.MACLIB                                *
*        03)  DCB          SYS1.MACLIB                                *
*        04)  DCBD         SYS1.MACLIB                                *
*        05)  GET          SYS1.MACLIB                                *
*        06)  IEFJFCBN     SYS1.MACLIB                                *
*        07)  IFASMFR      SYS1.MACLIB                                *
*        08)  LINK         SYS1.MACLIB                                *
*        09)  OPEN         SYS1.MACLIB                                *
*        10)  PUT          SYS1.MACLIB                                *
*        11)  RETURN       SYS1.MACLIB                                *
*        12)  SAVE         SYS1.MACLIB                                *
*        13)  WTO          SYS1.MACLIB                                *
*                                                                     *
***********************************************************************
         SPACE 3
         EJECT
FLSMFDSN CSECT
***********************************************************************
*                                                                     *
*                         REGISTER EQUATES                            *
*                                                                     *
***********************************************************************
R0       EQU   00
R1       EQU   01
R2       EQU   02
R3       EQU   03
R4       EQU   04
R5       EQU   05
R6       EQU   06
R7       EQU   07
R8       EQU   08                  WORK AREA BASE
R9       EQU   09                  BASE REGISTER 2
R10      EQU   10                  BASE REGISTER 3
R11      EQU   11                  BASE REGISTER 4
R12      EQU   12                  BASE REGISTER 5
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
***********************************************************************
*                                                                     *
*        START OF PROGRAM                                             *
*                                                                     *
***********************************************************************
         SAVE  (14,12),,'FLSMFDSN_&SYSDATE._&SYSTIME'
         USING FLSMFDSN,R9,R10,R11,R12 SET PROGRAM ADDRESSABILITY
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LA    R2,SAVEAREA         LOAD ADDRESS OF NEW SAVE
         ST    R13,4(R2)           SAVE CALLER'S SAVE AREA ADDR
         ST    R2,8(R13)           SAVE MY SAVE AREA ADDRESS
         LR    R13,R2              LOAD REGISTER 13 WITH SAVE AREA
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
         B     CHECKPR             GO CHECK SYSPRINT FILE
SAVEAREA DS    18F                 PROGRAM SAVE AREA
         EJECT
***********************************************************************
*                                                                     *
*        THIS ROUTINE WILL PROCESS THE INPUT SYSIN CONTROL            *
*        STATEMENTS (IF ANY).                                         *
*                                                                     *
***********************************************************************
CHECKPR  MVC   DDNAME,=CL8'SYSPRINT' SET DDNAME TO 'SYSPRINT'
         L     R15,=V(FINDDN)      LOAD ADDRESS OF TIOT SEARCH ROUTINE
         BALR  R14,R15             GO SEARCH TIOT FOR DDNAME
         LTR   R15,R15             CHECK RETURN CODE
         BNZ   ERROR030            NOT ZERO, ERROR
OPENPR   OPEN  (SYSPRINT,(OUTPUT)) OPEN PRINT FILE
         SPACE 3
PROCOUT  MVC   DDNAME,=CL8'DATAOUT' SET DDNAME TO 'DATAOUT'
         L     R15,=V(FINDDN)      LOAD ADDRESS OF TIOT SEARCH ROUTINE
         BALR  R14,R15             GO SEARCH TIOT FOR DDNAME
         LTR   R15,R15             CHECK RETURN CODE
         BNZ   PROCSYS             NOT ZERO, NOT PRESENT
         OPEN  (DATAOUT,(OUTPUT))  OPEN OUTPUT DATAOUT FILE
         OI    SWITCH+1,OPTOUT     TURN OF OPTIONAL OUTPUT FILE IND
         SPACE 3
PROCSYS  MVC   DDNAME,=CL8'SYSIN'  SET DDNAME TO 'SYSIN'
         L     R15,=V(FINDDN)      LOAD ADDRESS OF TIOT SEARCH ROUTINE
         BALR  R14,R15             GO SEARCH TIOT FOR DDNAME
         LTR   R15,R15             CHECK RETURN CODE
         BZ    OPENSYS             ZERO, GO OPEN INPUT
         WTO   'SMF2000 - OPTIONAL SYSIN DD STATEMENT NOT SPECIFIED, NOX
                OPTIONS SPECIFIED',                                    X
               ROUTCDE=11
         B     NOPARM              ZERO, NO PARM, BRANCH
OPENSYS  OPEN  (SYSIN)             OPEN INPUT SYSIN DATA SET
         PUT   SYSPRINT,HEAD       WRITE THE OPTION HEADINGS
READSYS  GET   SYSIN,CARDAREA      READ INPUT OPTIONS
         MVC   CARDAREA+72(8),=CL8' ' BLANK POSSIBLE CARD SEQ NUMBER
         PUT   SYSPRINT,CARDREC    WRITE THE OPTION CARD
         MVI   CARDREC,C' '        SET NEXT LINE TO SINGLE SPACE
         CLI   CARDAREA,C'*'       SEE IF COMMENT STATEMENT
         BE    READSYS             YES, GO READ ANOTHER STATEMENT
         L     R15,=V(PRMCHK)      LOAD ADDRESS OF PARM CHECK ROUTINE
         BALR  R14,R15             GO PROCESS PARM
         LTR   R15,R15             TEST RETURN CODE
         BNZ   ERROR999            NOT ZERO, BAD PARM
         B     READSYS             GO GET ANOTHER SYSIN OPTION CARD
         SPACE 3
***********************************************************************
*        END OF PARMS                                                 *
***********************************************************************
ENDPARM  TM    SWITCH+1,SELODAY    SEE IF OPEN DAY-OF-THE-WEEK SEL
         BNO   ENDPARM1            NO, CONTINUE
         CLI   CDAYSW,0            SEE IF ANY DAYS SELECTED
         BE    ERROR013            NO, ERROR
ENDPARM1 TM    SWITCH+1,SELCDAY    SEE IF CLOSE DAY-OF-THE-WEEK SEL
         BNO   ENDPARM2            NO, CONTINUE
         CLI   ODAYSW,0            SEE IF ANY DAYS SELECTED
         BE    ERROR076            NO, ERROR
ENDPARM2 CLOSE (SYSIN)             CLOSE SYSIN FILE
         EJECT
NOPARM   DS    0H
***********************************************************************
*                                                                     *
*        SET UP DEFAULT PRINT OPTIONS IF NECESSARY.                   *
*                                                                     *
***********************************************************************
PRDFLT   TM    SWITCH+4,SELPRINT   SEE IF PRINT OPTION SPECIFIED
         BO    PRSETUP             YES, DO NOT SET DEFAULTS
         L     R1,=V(PRTOPT)       LOAD ADDRESS OF PRINT OPTIONS
         L     R2,=V(OPTKEY)       LOAD ADDRESS OF OPTIONS KEYWORD TBL
PRDFLT1  CLI   0(R2),X'FF'         END OF TABLE
         BE    PRSETUP             YES, QUIT
         CLI   19(R2),0            SEE IF PRINT SEQUENCE SPECIFIED
         BNE   PRDFLT3             YES, BRANCH
PRDFLT2  LA    R2,34(,R2)          INCREMENT TO NEXT TABLE ENTRY
         B     PRDFLT1             LOOP
PRDFLT3  SLR   R15,R15             CLEAR REG FOR IC
         IC    R15,21(R2)          LOAD DEFAULT PR SEQUENCE NUMBER
         BCTR  R15,0               MAKE RELATIVE TO ZERO
         MH    R15,=H'6'           MULTIPLY BY LENGTH OF EACH ENTRY
         AR    R15,R1              POINT TO PROPER ENTRY
         MVI   0(R15),C'Y'         TURN ON PRINTABLE INDICATOR
         MVC   4(2,R15),2(R2)      SAVE INDEX FROM OPTION TABLE
         B     PRDFLT2             GO PROCESS NEXT OPTION ENTRY
         EJECT
***********************************************************************
*                                                                     *
*        COMPLETE SETUP FOR THE SPECIFIED OR DEFAULT PRINT            *
*        OPTIONS.  EACH PRINT FIELD HAS A PROCESSING ROUTINE          *
*        TO SET THE HEADING VALUES AND ESTABLISH THE OFFSET           *
*        WITHIN THE DETAIL RECORD FOR OUPTUT PROCESSING.              *
*                                                                     *
***********************************************************************
PRSETUP  L     R1,=V(PRTOPT)       LOAD ADDRESS OF PRINT OPTIONS
         CLI   0(R1),C'Y'          MAKE SURE AT ONE FIELDS PRINTED
         BNE   ERROR046            NO, ERROR
         LA    R2,HEAD2A+1         POINT TO 1ST VARIABLE HEAD LINE
         LA    R3,HEAD2B+1         POINT TO 2ND VARIABLE HEAD LINE
         LA    R4,1                SET LINE LENGTH TO 1
PRSETUP1 CLI   0(R1),X'FF'         PHYSICAL END OF TABLE
         BE    PRSETUP4            YES, BRANCH
         CLI   0(R1),C'N'          LOGICAL END OF TABLE
         BE    PRSETUP4            YES, BRANCH
         LH    R15,4(R1)           LOAD BRANCH TABLE OFFSET
         B     PRSETUP2(R15)       BRANCH TO PROPER ROUTINE BY INDEX
PRSETUP2 B     SETJOBNM            INDEX = 00
         B     SETCJDTE            INDEX = 04
         B     SETCTIME            INDEX = 08
         B     SETSYSID            INDEX = 12
         B     SETDSN              INDEX = 16
         B     SETDDN              INDEX = 20
         B     SETACC              INDEX = 24
         B     SETUNIT             INDEX = 28
         B     SETVOL              INDEX = 32
         B     SETDSO              INDEX = 36
         B     SETRECFM            INDEX = 40
         B     SETLRECL            INDEX = 44
         B     SETBLKSZ            INDEX = 48
         B     SETEXCP             INDEX = 52
         B     SETJTYPE            INDEX = 56
         B     ERROR047            INDEX = 60
         B     ERROR047            INDEX = 64
         B     ERROR047            INDEX = 68
         B     ERROR047            INDEX = 72
         B     ERROR047            INDEX = 76
         B     ERROR047            INDEX = 80
         B     ERROR047            INDEX = 84
         B     ERROR047            INDEX = 88
         B     ERROR047            INDEX = 92
         B     ERROR047            INDEX = 96
         B     ERROR047            INDEX = 100
         B     ERROR047            INDEX = 104
         B     ERROR047            INDEX = 108
         B     ERROR047            INDEX = 112
         B     ERROR047            INDEX = 116
         B     ERROR047            INDEX = 120
         B     ERROR047            INDEX = 124
         B     ERROR047            INDEX = 128
         B     ERROR047            INDEX = 132
         B     ERROR047            INDEX = 136
         B     ERROR047            INDEX = 140
         B     ERROR047            INDEX = 144
         B     ERROR047            INDEX = 148
         B     ERROR047            INDEX = 152
         B     ERROR047            INDEX = 156
         B     ERROR047            INDEX = 160
         B     ERROR047            INDEX = 164
         B     SETCDAY             INDEX = 168
         B     SETOJDTE            INDEX = 172
         B     SETOTIME            INDEX = 176
         B     SETODAY             INDEX = 180
         B     SETCGDTE            INDEX = 184
         B     SETOGDTE            INDEX = 188
         B     ERROR047            INDEX = 192
PRSETUP3 LA    R1,6(,R1)           INCREMENT TO NEXT TABLE ENTRY
         B     PRSETUP1            LOOP
PRSETUP4 CH    R14,=H'133'         SEE IF EXCEEDS MAXIMUM LENGTH
         BH    ERROR048            YES, ERROR
         B     CHECKIN             NO, GO READ SMF DATA
         EJECT
***********************************************************************
*        SETUP FOR JOB NAME                                           *
***********************************************************************
SETJOBNM MVC   0(8,R2),=CL8'  JOB   '
         MVC   0(8,R3),=CL8'  NAME  '
         LA    R14,8               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR OPEN JULIAN DATE                                   *
***********************************************************************
SETOJDTE MVC   0(8,R2),=CL8'  OPEN  '
         MVC   0(8,R3),=CL8'  DATE  '
         LA    R14,8               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR OPEN GREGORIAN DATE                                *
***********************************************************************
SETOGDTE MVC   0(10,R2),=CL10'   OPEN   '
         MVC   0(10,R3),=CL10'   DATE   '
         LA    R14,10              LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR CLOSE JULIAN DATE                                  *
***********************************************************************
SETCJDTE MVC   0(8,R2),=CL8' CLOSE  '
         MVC   0(8,R3),=CL8'  DATE  '
         LA    R14,8               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR CLOSE GREGORIAN DATE                               *
***********************************************************************
SETCGDTE MVC   0(10,R2),=CL10'  CLOSE   '
         MVC   0(10,R3),=CL10'   DATE   '
         LA    R14,10              LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR OPEN TIME                                          *
***********************************************************************
SETOTIME MVC   0(5,R2),=CL5' OPEN'
         MVC   0(5,R3),=CL5' TIME'
         LA    R14,5               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR CLOSE TIME                                         *
***********************************************************************
SETCTIME MVC   0(5,R2),=CL5'CLOSE'
         MVC   0(5,R3),=CL5' TIME'
         LA    R14,5               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR SYSTEM ID                                          *
***********************************************************************
SETSYSID MVC   0(4,R2),=CL4' SYS'
         MVC   0(4,R3),=CL4' ID '
         LA    R14,4               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR DATASET NAME                                       *
***********************************************************************
SETDSN   MVC   0(44,R2),=CL44'            DATASET'
         MVC   0(44,R3),=CL44'             NAME  '
         LA    R14,44              LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR DD NAME                                            *
***********************************************************************
SETDDN   MVC   0(8,R2),=CL8'   DD   '
         MVC   0(8,R3),=CL8'  NAME  '
         LA    R14,8               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR ACCESS TYPE                                        *
***********************************************************************
SETACC   MVC   0(1,R2),=CL1'A'
         MVC   0(1,R3),=CL1'T'
         LA    R14,1               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR UNIT TYPE                                          *
***********************************************************************
SETUNIT  MVC   0(4,R2),=CL4'UNIT'
         MVC   0(4,R3),=CL4'TYPE'
         LA    R14,4               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR VOLSER                                             *
***********************************************************************
SETVOL   MVC   0(7,R2),=CL7'VOLSER '
         MVC   0(7,R3),=CL7'       '
         LA    R14,7               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR DSORG                                              *
***********************************************************************
SETDSO   MVC   0(3,R2),=CL3'DS '
         MVC   0(3,R3),=CL3'ORG'
         LA    R14,3               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR RECFM                                              *
***********************************************************************
SETRECFM MVC   0(3,R2),=CL3'REC'
         MVC   0(3,R3),=CL3'FM'
         LA    R14,3               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR LRECL                                              *
***********************************************************************
SETLRECL MVC   0(6,R2),=CL6'RECORD'
         MVC   0(6,R3),=CL6'LENGTH'
         LA    R14,6               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR BLKSIZE                                            *
***********************************************************************
SETBLKSZ MVC   0(6,R2),=CL6'BLOCK '
         MVC   0(6,R3),=CL6'LENGTH'
         LA    R14,6               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR TOTAL I/O                                          *
***********************************************************************
SETEXCP  MVC   0(10,R2),=CL10'  TOTAL   '
         MVC   0(10,R3),=CL10'   I/O    '
         LA    R14,10              LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR JOB TYPE                                           *
***********************************************************************
SETJTYPE MVC   0(1,R2),=CL1'T'
         MVC   0(1,R3),=CL1'Y'
         LA    R14,1               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR OPEN DAY-OF-THE-WEEK                               *
***********************************************************************
SETODAY  MVC   0(4,R2),=CL4'ODAY'
         MVC   0(4,R3),=CL4' WK '
         LA    R14,4               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR CLOSE DAY-OF-THE-WEEK                              *
***********************************************************************
SETCDAY  MVC   0(4,R2),=CL4'CDAY'
         MVC   0(4,R3),=CL4' WK '
         LA    R14,4               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP COMMON ROUTINE                                         *
***********************************************************************
SETCOMM  STH   R4,2(R1)            SAVE OFFSET VALUE
         LA    R2,1(R14,R2)        INCREMENT HEAD2A
         LA    R3,1(R14,R3)        INCREMENT HEAD2B
         LA    R4,1(R14,R4)        INCREMENT OFFSET POINTER
         B     PRSETUP3            GO PROCESS NEXT TABLE ENTRY
         EJECT
***********************************************************************
*                                                                     *
*        GET READY TO PROCESS SMF DATA                                *
*                                                                     *
***********************************************************************
CHECKIN  MVC   DDNAME,=CL8'SMFIN'  SET DDNAME TO 'SMFIN'
         L     R15,=V(FINDDN)      LOAD ADDRESS OF TIOT SEARCH ROUTINE
         BALR  R14,R15             GO SEARCH TIOT FOR DDNAME
         LTR   R15,R15             CHECK RETURN CODE
         BNZ   ERROR031            NOT ZERO, ERROR
OPENIN   LA    R3,SMFIN            LOAD ADDRESS OF INPUT DCB
         USING IHADCB,R3           SET ADDRESSABILITY TO INPUT DCB
         OPEN  ((R3),(INPUT))      OPEN INPUT FILE
         LH    R15,DCBLRECL        LOAD LRECL
         STH   R15,LRECL           SAVE LRECL
         LH    R15,DCBBLKSI        LOAD BLKSIZE
         STH   R15,BLKSIZE         SAVE BLKSIZE
         IC    R15,DCBRECFM        LOAD RECFM
         STC   R15,RECFM           SAVE RECFM
         DROP  R3                  DROP ADDRESSABILITY TO DCB
CKOPTION TM    SWITCH,SELSORT      WAS SORTING SELECTED?
         BNO   READIN              NO, BYPASS SORT
         LA    R1,SORTPARM         LOAD ADDRESS OF SORT PARMS
         LINK  EP=SORT             GO TO SORT
         B     ENDJOB              GO END THE JOB
READIN   LA    R15,READRTN         LOAD ADDRESS OF READ SMF ROUTINE
         BALR  R14,R15             GO READ SMF ROUTINE
         TM    SWITCH,ENDFILE      END OF FILE?
         BO    ENDJOB              YES, BRANCH
         L     R15,OUTCNT          LOAD OUTPUT COUNT
         LA    R15,1(,R15)         ADD 1 TO OUTPUT COUNT
         ST    R15,OUTCNT          SAVE NEW OUTPUT COUNT
         TM    SWITCH+3,SELSTCNT   SEE IF STOP COUNT ENTERED
         BNO   READIN1             NO, BRANCH
         C     R15,VALSTCNT        SEE IF EXCEEDS STOP COUNT
         BH    READIN              YES, DROP THIS RECORD
READIN1  LA    R15,FORMAT          LOAD ADDRESS OF FORMAT ROUTINE
         BALR  R14,R15             GO FORMAT PRINT RECORD
         CP    LINECT,=P'55'       SEE IF PAGE IS FULL
         BNH   READIN2             NO, BRANCH
         AP    PAGECT,=P'1'        ADD 1 TO PAGE COUNT
         MVC   OPAGCT,=X'402020202120' MOVE EDIT MASK TO HEAD 1
         ED    OPAGCT,PAGECT       EDIT PAGE COUNT TO HEAD 1
         PUT   SYSPRINT,HEAD1      PRINT HEADING LINE 1
         PUT   SYSPRINT,HEAD2A     PRINT HEADING LINE 2A
         PUT   SYSPRINT,HEAD2B     PRINT HEADING LINE 2B
         ZAP   LINECT,=P'5'        SET LINE COUNT TO 5
         MVI   DETAIL,C'0'         SET NEXT DETAIL TO DOUBLE SPACE
READIN2  PUT   SYSPRINT,DETAIL     PRINT DETAIL LINE
         AP    LINECT,=P'1'        ADD 1 TO LINE COUNT
         MVI   DETAIL,C' '         SET NEXT DETAIL TO SINGLE SPACE
         B     READIN              GO PROCESS NEXT RECORD
         EJECT
***********************************************************************
*                                                                     *
*        WRITE TOTALS                                                 *
*                                                                     *
***********************************************************************
ENDJOB   AP    PAGECT,=P'1'        ADD 1 TO PAGE COUNT
         MVC   OPAGCT,=X'402020202120' MOVE EDIT MASK TO HEAD 1
         ED    OPAGCT,PAGECT       EDIT PAGE COUNT TO HEAD 1
         PUT   SYSPRINT,HEAD1      PRINT HEADING LINE 1
         CALL  DATERTN,(JG,LOWDATE,DATEGREG)
         MVC   WORK(12),=X'402120202020612020612020' SET EDIT MASK
         ED    WORK(12),DATEGREG   EDIT THE LOW DATE
         MVC   HLDATE,WORK+2       MOVE LOW DATE (YY.DDD) TO HEADING
         ICM   R1,15,LOWTIME       LOAD LOW TIME TO REGISTER 1
         L     R15,=V(CNVTIME)     LOAD ADDRESS OF CONVERT TIME ROUTINE
         BALR  R14,R15             GO TO CONVERT TIME ROUTINE
         MVC   HLTIME,OUTTIME+1    MOVE TIME (HH:MM) TO HEADING
         CALL  DATERTN,(JG,HIGHDATE,DATEGREG)
         MVC   WORK(12),=X'402120202020612020612020' SET EDIT MASK
         ED    WORK(12),DATEGREG   EDIT THE LOW DATE
         MVC   HHDATE,WORK+2       MOVE LOW DATE (YY.DDD) TO HEADING
         ICM   R1,15,HIGHTIME      LOAD HIGH TIME TO REGISTER 1
         L     R15,=V(CNVTIME)     LOAD ADDRESS OF CONVERT TIME ROUTINE
         BALR  R14,R15             GO TO CONVERT TIME ROUTINE
         MVC   HHTIME,OUTTIME+1    MOVE TIME (HH:MM) TO HEADING
         PUT   SYSPRINT,HEAD3      PRINT HEADING LINE 3
         PUT   SYSPRINT,HEAD4      PRINT HEADING LINE 4
         MVI   DETAIL,C' '         BLANK ENTIRE
         MVC   DETAIL+1(132),DETAIL   DETAIL LINE
         MVI   DETAIL,C'0'         SET NEXT DETAIL TO DOUBLE SPACE
         SPACE 3
***********************************************************************
*                                                                     *
*        FORMAT THE TOTAL ENTRIES SELECTED.                           *
*                                                                     *
***********************************************************************
         SPACE 3
PACC1    MVC   DETAIL+1(15),=CL15'SELECTED ENTS  '
         MVC   DETAIL+17(36),BIGMASK1 SET EDIT MASK
         ED    DETAIL+17(36),ACC1  EDIT TOTAL TO DETAIL LINE
         PUT   SYSPRINT,DETAIL     WRITE TOTAL LINE
         EJECT
***********************************************************************
*                                                                     *
*        CLOSE FILES AND TERMINATE THE PROGRAM                        *
*                                                                     *
***********************************************************************
CLOSE    ICM   R1,B'1111',JOBNMTBL SEE IF JOBNAME TABLE ALLOCATED
         BZ    CLOSE2              NO, BRANCH
         FREEMAIN R,LV=10010,A=(1) FREE JOBNAME TABLE
CLOSE2   ICM   R1,B'1111',DATETBL  SEE IF DATE TABLE ALLOCATED
         BZ    CLOSE3              NO, BRANCH
         FREEMAIN R,LV=8008,A=(1)  FREE DATE TABLE
CLOSE3   ICM   R1,B'1111',CTIMETBL SEE IF CLOSE TIME TABLE ALLOCATED
         BZ    CLOSE3A             NO, BRANCH
         FREEMAIN R,LV=8008,A=(1)  FREE TIME TABLE
CLOSE3A  ICM   R1,B'1111',OTIMETBL SEE IF OPEN TIME TABLE ALLOCATED
         BZ    CLOSE4              NO, BRANCH
         FREEMAIN R,LV=8008,A=(1)  FREE TIME TABLE
CLOSE4   ICM   R1,B'1111',SYSIDTBL SEE IF SYSID TABLE ALLOCATED
         BZ    CLOSE5              NO, BRANCH
         FREEMAIN R,LV=4004,A=(1)  FREE SYSID TABLE
CLOSE5   ICM   R1,B'1111',DSNTBL   SEE IF DSN TABLE ALLOCATED
         BZ    CLOSE6              NO, BRANCH
         FREEMAIN R,LV=46046,A=(1) FREE DSN TABLE
CLOSE6   ICM   R1,B'1111',DDNTBL   SEE IF DDN TABLE ALLOCATED
         BZ    CLOSE7              NO, BRANCH
         FREEMAIN R,LV=10010,A=(1) FREE DDN TABLE
CLOSE7   ICM   R1,B'1111',ACCTBL   SEE IF ACCESS TYPE TABLE ALLOCATED
         BZ    CLOSE8              NO, BRANCH
         FREEMAIN R,LV=1001,A=(1)  FREE ACCESS TYPE TABLE
CLOSE8   ICM   R1,B'1111',UNITTBL  SEE IF UNIT TYPE TABLE ALLOCATED
         BZ    CLOSE9              NO, BRANCH
         FREEMAIN R,LV=4004,A=(1)  FREE UNIT TYPE TABLE
CLOSE9   ICM   R1,B'1111',VOLTBL   SEE IF VOL TABLE ALLOCATED
         BZ    CLOSE10             NO, BRANCH
         FREEMAIN R,LV=8008,A=(1)  FREE VOL TABLE
CLOSE10  ICM   R1,B'1111',DSORGTBL SEE IF DSORG TABLE ALLOCATED
         BZ    CLOSE11             NO, BRANCH
         FREEMAIN R,LV=3003,A=(1)  FREE DSORG TABLE
CLOSE11  ICM   R1,B'1111',RECFMTBL SEE IF RECFM TABLE ALLOCATED
         BZ    CLOSE12             NO, BRANCH
         FREEMAIN R,LV=3003,A=(1)  FREE RECFM TABLE
CLOSE12  ICM   R1,B'1111',XJOBNTBL SEE IF EXJOBNAME TABLE ALLOCATED
         BZ    CLOSE13             NO, BRANCH
         FREEMAIN R,LV=10010,A=(1) FREE EXJOBNAME TABLE
CLOSE13  ICM   R1,B'1111',XSYSTBL  SEE IF EXSYSID TABLE ALLOCATED
         BZ    CLOSE14             NO, BRANCH
         FREEMAIN R,LV=4004,A=(1)  FREE SYSID TABLE
CLOSE14  ICM   R1,B'1111',XDSNTBL  SEE IF EXDSN TABLE ALLOCATED
         BZ    CLOSE15             NO, BRANCH
         FREEMAIN R,LV=46046,A=(1) FREE DSN TABLE
CLOSE15  ICM   R1,B'1111',XDDNTBL  SEE IF EXDDN TABLE ALLOCATED
         BZ    CLOSE16             NO, BRANCH
         FREEMAIN R,LV=10010,A=(1) FREE DDN TABLE
CLOSE16  ICM   R1,B'1111',XVOLTBL  SEE IF EXVOL TABLE ALLOCATED
         BZ    CLOSE17             NO, BRANCH
         FREEMAIN R,LV=8008,A=(1)  FREE VOL TABLE
CLOSE17  TM    SWITCH+1,OPTOUT     SEE IF OPTIONAL OUTPUT FILE
         BNO   CLOSE18             NO, BRANCH
         CLOSE (DATAOUT)           CLOSE OPTIONAL OUTPUT FILE
CLOSE18  CLOSE (SYSPRINT,,SMFIN)   CLOSE SMF INPUT FILE AND PRINT FILE
         L     R13,4(R13)          RESTORE ORIG REGISTER 13
         RETURN (14,12),RC=0       RETURN TO O/S
         SPACE 3
         LTORG
         EJECT
***********************************************************************
*                                                                     *
*        SORT INPUT PROCEDURE IF SORT OPTION USED                     *
*                                                                     *
***********************************************************************
         DS    0F
         PUSH  USING
E15      STM   R14,R12,12(R13)     SAVE REGISTERS
         USING E15,R9,R10,R11,R12  SET ADDRESSABILITY TO EXIT
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,E15SAVE         LOAD ADDR OF NEW SAVE
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
         LA    R3,SMFIN            LOAD ADDRESS OF INPUT DCB
E15READ  LA    R15,READRTN         LOAD ADDRESS OF READ SMF ROUTINE
         BALR  R14,R15             GO READ SMF ROUTINE
         TM    SWITCH,ENDFILE      END OF FILE?
         BO    E15EOF              YES, BRANCH
E15RET   L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         LA    R15,INREC           POINT TO INPUT RECORD
         ST    R15,24(R13)         STORE ADDRESS OF RECORD IN SAVE
         LM    R14,R12,12(R13)     RESTORE ORIGINAL REGS
         LA    R15,12              SET RETURN CODE TO 12
         BR    R14                 RETURN RECORD TO SORT
E15EOF   L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         LM    R14,R12,12(R13)     RESTORE ORIGINAL REGS
         LA    R15,8               SET RETURN CODE TO 8
         BR    R14                 RETURN TO SORT FOR LAST TIME
E15SAVE  DS    18F                 SORT EXIT E15 SAVE AREA
         DROP  R9,R10,R11,R12
         POP   USING
         EJECT
***********************************************************************
*                                                                     *
*        SORT OUTPUT PROCEDURE IF SORT OPTION USED                    *
*                                                                     *
***********************************************************************
         DS    0F
         PUSH  USING
E35      STM   R14,R12,12(R13)     SAVE REGISTERS
         USING E35,R9,R10,R11,R12  SET ADDRESSABILITY TO EXIT
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,E35SAVE         LOAD ADDR OF NEW SAVE
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
         L     R14,0(R1)           SAVE INPUT RECORD ADDRESS
         LTR   R14,R14             TEST INPUT RECORD ADDRESS
         BZ    E35EOF              ZERO, END OF FILE
         LH    R15,0(R14)          LOAD RECORD LENGTH
         LA    R0,INREC            SET "TO" ADDRESS
         LR    R1,R15              SET "TO" LENGTH
         MVCL  R0,R14              SAVE INPUT RECORD
         L     R15,OUTCNT          LOAD OUTPUT COUNT
         LA    R15,1(,R15)         ADD 1 TO OUTPUT COUNT
         ST    R15,OUTCNT          SAVE NEW OUTPUT COUNT
         TM    SWITCH+3,SELSTCNT   SEE IF STOP COUNT ENTERED
         BNO   E35CONT             NO, BRANCH
         C     R15,VALSTCNT        SEE IF EXCEEDS STOP COUNT
         BH    E35RET              YES, DROP THIS RECORD
E35CONT  LA    R15,FORMAT          LOAD ADDRESS OF FORMAT ROUTINE
         BALR  R14,R15             GO FORMAT PRINT RECORD
         CP    LINECT,=P'55'       SEE IF PAGE IS FULL
         BNH   E35DET              NO, BRANCH
         AP    PAGECT,=P'1'        ADD 1 TO PAGE COUNT
         MVC   OPAGCT,=X'402020202120' MOVE EDIT MASK TO HEAD 1
         ED    OPAGCT,PAGECT       EDIT PAGE COUNT TO HEAD 1
E35HD1   PUT   SYSPRINT,HEAD1      PRINT HEADING LINE 1
E35HD2   PUT   SYSPRINT,HEAD2A     PRINT HEADING LINE 2A
         PUT   SYSPRINT,HEAD2B     PRINT HEADING LINE 2B
         ZAP   LINECT,=P'5'        SET LINE COUNT TO 5
         MVI   DETAIL,C'0'         SET NEXT DETAIL TO DOUBLE SPACE
E35DET   PUT   SYSPRINT,DETAIL     PRINT DETAIL LINE
         AP    LINECT,=P'1'        ADD 1 TO LINE COUNT
         MVI   DETAIL,C' '         SET NEXT DETAIL TO SINGLE SPACE
E35RET   L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         LM    R14,R12,12(R13)     RESTORE ORIGINAL REGS
         LA    R15,4               SET RETURN CODE TO 4
         BR    R14                 RETURN TO SORT FOR ANOTHER RECORD
E35EOF   L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         LM    R14,R12,12(R13)     RESTORE ORIGINAL REGS
         LA    R15,8               SET RETURN CODE TO 8
         BR    R14                 RETURN TO SORT FOR LAST TIME
E35SAVE  DS    18F                 SORT EXIT E35 SAVE AREA
         DROP  R9,R10,R11,R12
         POP   USING
         EJECT
         PUSH  USING
***********************************************************************
*                                                                     *
*        THIS ROUTINE WILL READ THE SMF INPUT FILE UNTIL A PROPER     *
*        SMF RECORD IS FOUND.                                         *
*                                                                     *
*        ON ENTRY THE REGISTERS WILL BE AS FOLLOWS:                   *
*                                                                     *
*        1)  REGISTER 14 ON ENTRY WILL CONTAIN THE ENTRY POINT        *
*        2)  REGISTER 15 ON ENTRY WILL CONTAIN THE RETURN ADDRESS     *
*                                                                     *
*        RECORDS WILL BE FILTERED OUT IF SELECTION CRITERIA WAS       *
*        SPECIFIED ON AN INPUT CONTROL CARD.                          *
*                                                                     *
*        THE SMF TYPE 14 OR 15 RECORD WILL BE REFORMATTED INTO        *
*        A VARIABLE LENGTH RECORD AT LABEL INREC.                     *
*                                                                     *
*        ON EOF, THE ENDFILE INDICATOR WILL BE TURNED ON              *
*                                                                     *
*        RETURN FROM THIS ROUTINE WILL BE MADE TO REGISTER 14         *
*                                                                     *
***********************************************************************
READRTN  STM   R14,R12,12(R13)     SAVE REGISTERS
         USING READRTN,R9,R10,R11,R12 SET ADDRESSABILITY TO ROUTINE
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,SAVE1           LOAD ADDR OF NEW SAVE
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
         B     READ                GO READ SMF RECORD
SAVE1    DS    18F                 ROUTINE SAVE AREA
***********************************************************************
*                                                                     *
*        READ AN SMF TYPE 14 OR 15 RECORD.  REFORMAT IT INTO          *
*        A MORE USABLE RECORD FORMAT.                                 *
*                                                                     *
***********************************************************************
READ     GET   SMFIN               READ SMF INPUT
         ST    R1,RECADDR          SAVE RECORD ADDRESS
         LR    R5,R1               SAVE INPUT RECORD ADDRESS
         USING SMFT14,R5           SET ADDRESSABILITY TO SMF RECORD
         CLI   SMF14DTE,X'19'      SEE IF CORRECT CENTURY
         BE    READ1               YES, OK
         CLI   SMF14DTE,X'20'      SEE IF CORRECT CENTURY
         BE    READ1               YES, OK
         MVI   SMF14DTE,X'19'      ASSUME 20TH CENTURY
         CLI   SMF14DTE+1,X'50'    TEST SEE IF PAST YEAR 50
         BH    READ1               YES, OK
         MVI   SMF14DTE,X'20'      MAKE 21ST CENTURY
READ1    CLC   SMF14DTE,LOWDATE    SEE IF NEW LOW DATE
         BNL   READ2               NO, BRANCH
         MVC   LOWDATE,SMF14DTE    SAVE NEW LOW DATE
         MVC   LOWTIME,SMF14TME    SAVE NEW LOW TIME
         B     READ3               GO SEE IF ALSO NEW HIGH DATE/TIME
READ2    CLC   SMF14DTE,LOWDATE    SEE IF SAME LOW DATE
         BH    READ3               NO, NOT NEW LOW DATE/TIME
         CLC   SMF14TME,LOWTIME    SEE IF NEW LOW TIME
         BNL   READ3               NO, BRANCH
         MVC   LOWTIME,SMF14TME    SAVE NEW LOW TIME
READ3    CLC   SMF14DTE,HIGHDATE   SEE IF NEW HIGH DATE
         BNH   READ4               NO, BRANCH
         MVC   HIGHDATE,SMF14DTE   SAVE NEW HIGH DATE
         MVC   HIGHTIME,SMF14TME   SAVE NEW HIGH TIME
         B     READ5               GET OUT
READ4    CLC   SMF14DTE,HIGHDATE   SEE IF SAME HIGH DATE
         BL    READ5               NO, NOT NEW HIGH DATE/TIME
         CLC   SMF14TME,HIGHTIME   SEE IF NEW HIGH TIME
         BNH   READ5               NO, GET OUT
         MVC   HIGHTIME,SMF14TME   SAVE NEW HIGH TIME
READ5    CLI   SMF14RTY,14         SEE IF TYPE 14 SMF RECORD
         BE    READ6               YES, BRANCH
         CLI   SMF14RTY,15         SEE IF TYPE 15 SMF RECORD
         BE    READ6               YES, BRANCH
         CLI   SMF14RTY,64         SEE IF TYPE 64 SMF RECORD
         BE    READ25              YES, BRANCH
         BNE   READ                NO, BYPASS RECORD
READ6    LA    R7,SMFJFCB1         LOAD ADDRESS OF JFCB
         USING JFCB,R7             SET ADDRESSABILITY TO JFCB
         MVC   INJBN,SMF14JBN      SAVE JOB NAME
         MVC   INCJDATE,SMF14DTE   SAVE CLOSE DATE
         MVC   INOJDATE,SMF14DTE   SET INITIAL JULIAN OPEN DATE
         CALL  DATERTN,(JG,INCJDATE,DATEGREG) CONVERT TO GREGORIAN
         MVC   INCGDATE,DATEGREG   SAVE GREGORIAN CLOSE DATE
         MVC   INOGDATE,DATEGREG   SAVE INITIAL GREGORIAN CLOSE DATE
         MVC   INCTIME,SMF14TME    SAVE CLOSE TIME
         MVC   INOTIME,SMF14TME    SAVE INITIAL OPEN TIME
         MVC   INSID,SMF14SID      SAVE SYSTEM IDENTIFICATION
         MVC   PJDATE,SMF14DTE     SAVE CLOSE DATE
         BAL   R14,WKDAY           GO GET DAY-OF-WEEK
         MVC   INCDAY,DAYOFWK      SAVE CLOSE DAY-OF-WEEK
         MVC   INODAY,DAYOFWK      SAVE INITIAL OPEN DAY-OF-WEEK
         MVC   INDSN,JFCBDSNM      SAVE DATASET NAME
         CLC   INDSN,=44X'04'      IS THIS A FORMAT4 DSCB
         BNE   READ7               NO, BRANCH
         MVC   INDSN,=CL44'FORMAT4.DSCB'
READ7    MVC   INDDN,SMFTIOE5      SAVE DDNAME
         MVI   INACC,C'I'          ASSUME INPUT ACCESS
         CLI   SMF14RTY,14         SEE IF TYPE 14 SMF RECORD
         BE    READ9               YES, INPUT ONLY
         MVI   INACC,C'O'          SET OUTPUT ACCESS
READ9    MVC   INRECFM,=CL3' '     BLANK RECFM
         CLI   JFCRECFM,X'00'      SEE IF ANY RECFM
         BE    READ14              NO, BRANCH
         LA    R15,INRECFM         POINT TO START OF RECFM
         MVI   0(R15),C'U'         ASSUME UNDEFINED
         TM    JFCRECFM,JFCUND     SEE IF RECFM=U
         BO    READ14              YES, DONE
         MVI   0(R15),C'F'         ASSUME FIXED LENGTH
         TM    JFCRECFM,JFCFIX     SEE IF RECFM=F
         BO    READ10              YES, BRANCH
         MVI   0(R15),C'V'         NO, MUST BE VARIABLE LENGTH
READ10   LA    R15,1(,R15)         INCREMENT TO NEXT CHAR RECFM
         TM    JFCRECFM,JFCRFB     SEE IF BLOCKED
         BNO   READ11              NO, BRANCH
         MVI   0(R15),C'B'         SET TO RECFM=.B
         LA    R15,1(,R15)         INCREMENT TO NEXT CHAR RECFM
READ11   TM    JFCRECFM,JFCVAR+JFCRFS SEE IF SPANNED
         BNO   READ12              NO, BRANCH
         MVI   0(R15),C'S'         SET TO RECFM=V.S
         B     READ14              GET OUT
READ12   TM    JFCRECFM,JFCASA     SEE IF ASA CONTROL
         BNO   READ13              NO, BRANCH
         MVI   0(R15),C'A'         SET TO RECFM=..A
         B     READ14              GET OUT
READ13   TM    JFCRECFM,JFCMAC     SEE IF MCH CONTROL
         BNO   READ14              NO, BRANCH
         MVI   0(R15),C'M'         SET TO RECFM=..M
READ14   MVC   INLRECL,JFCLRECL    SAVE LRECL
         MVC   INBLKSZ,JFCBLKSI    SAVE BLKSIZE
         MVI   INTYPE,C'T'         ASSUME TEST JOB
         CLI   INJBN+1,C'0'        SEE IF SECOND CHAR JOBNAME NUMERIC
         BNL   READ15              YES, THIS IS A TEST JOB
         MVI   INTYPE,C'P'         NO,  THIS IS A PRODUCTION JOB
READ15   MVC   INDSO,=CL3'SEQ'     ASSUME PHYSICAL SEQUENTIAL
         TM    JFCDSRG1,JFCORGPS   SEE IF PHYSICAL SEQUENTIAL
         BO    READ16              YES, BRANCH
         MVC   INDSO,=CL3'IS '     ASSUME INDEXED SEQUENTIAL
         TM    JFCDSRG1,JFCORGIS   SEE IF INDEXED SEQUENTIAL
         BO    READ16              YES, BRANCH
         MVC   INDSO,=CL3'DA '     ASSUME DIRECT ACCESSED
         TM    JFCDSRG1,JFCORGDA   SEE IF DIRECT ACCESSED
         BO    READ16              YES, BRANCH
         MVC   INDSO,=CL3'PDS'     ASSUME PARTITIONED
         TM    JFCDSRG1,JFCORGPO   SEE IF PARTITIONED
         BO    READ16              YES, BRANCH
         MVC   INDSO,=CL3'UNK'     SET TO UNKNOWN
         DROP  R7                  DROP ADDRESSABILITY TO JFCB
READ16   LA    R6,SMFDCBDE         POINT TO START OF DCB/DEB SECTION
         SLR   R15,R15             CLEAR REG FOR IC
         IC    R15,SMF14SDC        LOAD SIZE OF DCB/DEB SECTION
         AR    R6,R15              POINT PAST DCB/DEB SECTION TO UCBS
         USING SMF14UCB,R6         SET ADDRESSABILITY TO UCB SECTION
         CLI   SMF14SDC,24         SEE IF UCB SECTION HAS DATE
         BNH   READ16B             NO, OLD FORMAT
         CLI   SMF14NUC,0          TEST NUMBER OF UCB SECIONS
         BE    READ16B             ZERO, NO UCB SECTIONS
         CLI   SMF14RV3+2,X'19'    SEE IF CORRECT CENTURY
         BE    READ16A             YES, OK
         CLI   SMF14RV3+2,X'20'    SEE IF CORRECT CENTURY
         BE    READ16A             YES, OK
         MVI   SMF14RV3+2,X'19'    ASSUME 20TH CENTURY
         CLI   SMF14RV3+2+1,X'50'  TEST SEE IF PAST YEAR 50
         BH    READ16A             YES, OK
         MVI   SMF14RV3+2,X'20'    MAKE 21ST CENTURY
READ16A  MVC   INOJDATE,SMF14RV3+2 SAVE JULIAN OPEN DATE
         CALL  DATERTN,(JG,INOJDATE,DATEGREG) CONVERT TO GREGORIAN
         MVC   INOGDATE,DATEGREG   SAVE GREGORIAN CLOSE DATE
         MVC   INOTIME,SMF14OPE    SAVE OPEN TIME
READ16B  MVC   INUNIT,=CL4'UNKN'   SET UNIT TYPE TO UNKN
         MVC   INVOL,=CL6' '       SET VOLSER TO BLANKS
         SLR   R15,R15             CLEAR REG FOR IC
         IC    R15,SMF14NUC        LOAD NUMBER OF UCB SECTIONS
         LTR   R15,R15             TEST COUNT
         BZ    READ                ZERO, NO VOLUMES
         STH   R15,INVOLCNT        SAVE VOLSER COUNT
         SLR   R14,R14             SET EXCP COUNT TO ZERO
         LA    R7,INVOL            POINT TO FIRST OUTPUT VOLSER
         MVC   INUNIT,=CL4'DISK'   SET TO UNIT=DISK
         TM    SMFUCBTY+2,X'20'    SEE IF DASD DEVICE TYPE
         BO    READ17              YES, BRANCH
         MVC   INUNIT,=CL4'TAPE'   SET TO UNIT=TAPE
         TM    SMFUCBTY+2,X'80'    SEE IF TAPE DEVICE TYPE
         BO    READ17              YES, BRANCH
         MVC   INUNIT,=CL4'UNKN'   SET TO UNIT=UNKN
READ17   MVC   0(6,R7),SMFSRTEV    SAVE VOLSER
         A     R14,SMFEXCP         ACCUMULATE EXCP COUNT
         SLR   R1,R1               CLEAR REG FOR IC
         IC    R1,SMF14SUC         LOAD LENGTH OF UCB SECTION
         AR    R6,R1               POINT TO NEXT UCB SECTION
         LA    R7,6(,R7)           POINT TO NEXT OUTPUT VOLSER
         BCT   R15,READ17          LOOP THROUGH ALL UCB ENTRIES
         DROP  R6                  DROP ADDRESSABILITY TO UCB SECTION
         STCM  R14,B'1111',INTEP   SAVE TOTAL EXCPS
         CLC   INVOLCNT,=H'1'      SEE IF ONLY 1 VOLUME
         BE    PJOBNM              YES, GET OUT
***********************************************************************
*        ZERO OUT DUPLICATE VOLSERS                                   *
***********************************************************************
READ18   LA    R14,INVOL           POINT TO FIRST VOLSER
         LR    R1,R14              SET START ADDRESS
         LH    R15,INVOLCNT        CALCULATE ADDRESS
         MH    R15,=H'6'               OF LAST
         AR    R15,R14                    ENTRY
READ19   LA    R1,6(,R1)           INCREMENT TO NEXT VOLSER
         CR    R1,R15              SEE IF AT END OF VOLSERS
         BNL   READ21              YES, BRANCH
         CLC   0(6,R14),0(R1)      SEE IF MATCHING VOLSER
         BNE   READ20              NO, BRANCH
         MVC   0(6,R1),=8X'00'     ZERO OUT THE DUPLICATE
READ20   B     READ19              LOOP
READ21   LA    R14,6(,R14)         INCREMENT TO NEXT VOLSER
         LR    R1,R14              SET START ADDRESS
         CR    R1,R15              SEE IF AT END OF VOLSERS
         BL    READ19              NO LOOP
***********************************************************************
*        SQUEEZE OUT ZEROED VOLSERS                                   *
***********************************************************************
READ22   LA    R14,INVOL           POINT TO FIRST OUTPUT VOLSER
         LA    R1,INVOL            POINT TO FIRST INPUT VOLSER
         LH    R15,INVOLCNT        LOAD ORIGINAL VOLSER COUNT
         SLR   R6,R6               ZERO NEW VOLSER COUNT
READ23   CLC   0(6,R1),=8X'00'     SEE IF ZEROED ENTRY
         BE    READ24              YES, BYPASS THIS ENTRY
         MVC   0(6,R14),0(R1)      NO, MOVE TO OUTPUT
         CR    R14,R1              SEE IF IDENTICAL ENTRY
         BE    READ23A             YES, BRANCH
         MVC   0(6,R1),=8X'00'     NO, ZERO OUT MOVED ENTRY
READ23A  LA    R14,6(,R14)         INCREMENT TO NEXT OUTPUT VOLSER
         LA    R6,1(,R6)           ADD 1 TO VOLSER COUNT
READ24   LA    R1,6(,R1)           INCREMENT TO NEXT INPUT VOLSER
         BCT   R15,READ23          LOOP THROUGH ALL INPUT VOLSERS
         STH   R6,INVOLCNT         SET NEW VOLSER COUNT
         B     PJOBNM              GO FILTER THE RECORD
         DROP  R5                  DROP ADDRESSABILITY TO SMF RECORD
         USING SMFT64,R5           SET ADDRESSABILITY TO SMF RECORD
READ25   TM    SMF64RIN,X'80'      IS THIS A CLOSE RECORD
         BNO   READ                NO, BYPASS RECORD
         TM    SMF64DTY,X'80'      IS THIS FOR A DATA COMPONENT
         BNO   READ                NO, BYPASS RECORD
         MVC   INJBN,SMF64JBN      SAVE JOB NAME
         MVC   INCJDATE,SMF64DTE   SAVE DATE
         MVC   INOJDATE,SMF64DTE   SET INITIAL JULIAN OPEN DATE
         CALL  DATERTN,(JG,INCJDATE,DATEGREG) CONVERT TO GREGORIAN
         MVC   INCGDATE,DATEGREG   SAVE GREGORIAN CLOSE DATE
         MVC   INOGDATE,DATEGREG   SAVE INITIAL GREGORIAN CLOSE DATE
         MVC   INCTIME,SMF64TME    SAVE CLOSE TIME
         MVC   INOTIME,SMF64TME    SAVE INITIAL OPEN TIME
         MVC   INSID,SMF64SID      SAVE SYSTEM IDENTIFICATION
         MVC   PJDATE,SMF64DTE     SAVE DATE
         BAL   R14,WKDAY           GO GET DAY-OF-WEEK
         MVC   INCDAY,DAYOFWK      SAVE CLOSE DAY-OF-WEEK
         MVC   INODAY,DAYOFWK      SAVE INITIAL OPEN DAY-OF-WEEK
         LA    R7,SMF64FCC         LOAD START OF EXTENT PORTION
         USING SMF64FCC,R7         SET ADDRESSABILITY TO FIRST EXTENT
         MVC   INUNIT,=CL4'DISK'   SET TO DISK UNIT
         TM    SMF64UTY+2,X'20'    SEE IF DASD DEVICE TYPE
         BO    READ26              YES, BRANCH
         MVC   INUNIT,=CL4'TAPE'   SET TO TAPE UNIT
         TM    SMF64UTY+2,X'80'    SEE IF TAPE DEVICE TYPE
         BO    READ26              YES, BRANCH
         MVC   INUNIT,=CL4'UNKN'   SET TO UNKNOWN UNIT TYPE
READ26   LH    R14,SMF64ESL        LOAD LENGTH OF EXTENT PORTION
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         D     R14,=F'26'          DIVIDE BY LEN OF EACH ENTRY FOR CNT
         MVC   LASTVOL,=6X'FF'     SET LAST VOLSER
         SLR   R14,R14             SET VOLUME COUNT TO ZERO
         LA    R6,INVOL            POINT TO FIRST OUTPUT VOLSER
READ27   CLC   SMF64VSN,LASTVOL    SEE IF DIFFERENT VOLSER
         BE    READ28              NO, BRANCH
         MVC   0(6,R6),SMF64VSN    SAVE VOLSER
         LA    R6,6(,R6)           POINT TO NEXT OUTPUT VOLSER
         LA    R14,1(,R14)         ADD 1 TO VOLSER COUNT
         MVC   LASTVOL,SMF64VSN    RESET PREVIOUS VOLSER
READ28   LA    R7,26(,R7)          POINT TO NEXT EXTENT ENTRY
         BCT   R15,READ27          LOOP THROUGH ALL EXTENT ENTRIES
         STH   R14,INVOLCNT        SAVE VOLSER COUNT
         DROP  R7                  DROP ADDRESSABILITY TO EXTENT SECTN
READ29   LA    R7,SMF64FCC         LOAD START OF EXTENT PORTION
         AH    R7,SMF64ESL         ADD LENGTH OF EXTENT PORTION
         USING SMF64STS,R7         SET ADDRESSABILITY TO STATS SECTION
         MVC   INDSN,SMF64CLN      SAVE DATASET NAME
         MVC   INDDN,SMF64DDN      SAVE DDNAME
         MVI   INACC,C'I'          ASSUME INPUT ACCESS
         TM    SMF64MC1,X'04'      SEE IF INPUT PROCESSING
         BO    READ30              YES, INPUT ONLY
         MVI   INACC,C'O'          SET OUTPUT ACCESS
READ30   MVC   INRECFM,=CL3'VB '   SET TO VARIABLE BLOCKED
         MVC   INLRECL,SMF64DLS+2  SAVE LRECL
         MVC   INBLKSZ,SMF64DBS+2  SAVE BLKSIZE
         MVI   INTYPE,C'T'         ASSUME TEST JOB
         CLI   INJBN+1,C'0'        SEE IF SECOND CHAR JOBNAME NUMERIC
         BNL   READ31              YES, THIS IS A TEST JOB
         MVI   INTYPE,C'P'         NO,  THIS IS A PRODUCTION JOB
READ31   MVC   INDSO,=CL3'VS '     SET TO VSAM
***********************************************************************
*                                                                     *
*                         SPECIAL NOTE                                *
*                                                                     *
*        THE BLOCK COUNT FIELD IN THE TYPE 64 RECORD MAY HAVE         *
*        A CORRUPTED VALUE.  SEE APAR OY48286.  THIS SECTION          *
*        OF CODE WILL TEST FOR NEGATIVE VALUES IN ALL OF THE          *
*        FIELDS WHICH MAY BE CORRUPTED.  IF ANY IS NEGATIVE,          *
*        THEN SET THE EXCP COUNT FIELD TO HIGH VALUES WHICH           *
*        WILL BE PRINTED AS A "?" VALUE.                              *
*                                                                     *
***********************************************************************
         MVC   INTEP,=X'FFFFFFFF'  SET TO HIGH VALUES FOR BAD RECORD
         TM    SMF64DDE,X'80'      SEE IF CORRUPTED FIELD
         BO    READ32              YES, GET OUT
         TM    SMF64DIN,X'80'      SEE IF CORRUPTED FIELD
         BO    READ32              YES, GET OUT
         TM    SMF64DUP,X'80'      SEE IF CORRUPTED FIELD
         BO    READ32              YES, GET OUT
         TM    SMF64DRE,X'80'      SEE IF CORRUPTED FIELD
         BO    READ32              YES, GET OUT
         TM    SMF64DCS,X'80'      SEE IF CORRUPTED FIELD
         BO    READ32              YES, GET OUT
         TM    SMF64DAS,X'80'      SEE IF CORRUPTED FIELD
         BO    READ32              YES, GET OUT
         TM    SMF64DEP,X'80'      SEE IF CORRUPTED FIELD
         BO    READ32              YES, GET OUT
         MVC   INTEP,SMF64DEP      SAVE EXCP COUNT
READ32   B     PJOBNM              GO FILTER THE RECORD
         DROP  R7                  DROP ADDRESSABILITY TO STATS SECTION
         EJECT
***********************************************************************
*                                                                     *
*        FILTER THE RECORDS ACCORDING TO ANY INPUT CONTROL            *
*        CARDS.                                                       *
*                                                                     *
***********************************************************************
PJOBNM   TM    SWITCH,SELJOBNM     JOBNAME SELECTION?
         BNO   PDATE               NO, BRANCH
         BAL   R14,CKJOBNM         YES, GO SEE IF MATCH
PDATE    TM    SWITCH,SELDATE      DATE SELECTION?
         BNO   POTIME              NO, BRANCH
         BAL   R14,CKDATE          YES, GO SEE IF MATCH
POTIME   TM    SWITCH,SELOTIME     OPEN TIME SELECTION?
         BNO   PCTIME              NO, BRANCH
         BAL   R14,CKOTME          YES, GO SEE IF MATCH
PCTIME   TM    SWITCH,SELCTIME     CLOSE TIME SELECTION?
         BNO   PSYSID              NO, BRANCH
         BAL   R14,CKCTME          YES, GO SEE IF MATCH
PSYSID   TM    SWITCH,SELSYSID     SYSID SELECTION?
         BNO   PDSN                NO, BRANCH
         BAL   R14,CKSYSID         YES, BRANCH
PDSN     TM    SWITCH+4,SELDSN     DSN SELECTION?
         BNO   PDDN                NO, BRANCH
         BAL   R14,CKDSN           YES, BRANCH
PDDN     TM    SWITCH+4,SELDDN     DDNAME SELECTION?
         BNO   PACC                NO, BRANCH
         BAL   R14,CKDDN           YES, BRANCH
PACC     TM    SWITCH+4,SELACC     ACCESS TYPE SELECTION?
         BNO   PUNIT               NO, BRANCH
         BAL   R14,CKACC           YES, BRANCH
PUNIT    TM    SWITCH+4,SELUNIT    UNIT TYPE SELECTION?
         BNO   PVOL                NO, BRANCH
         BAL   R14,CKUNIT          YES, BRANCH
PVOL     TM    SWITCH+4,SELVOL     CCODE SELECTION?
         BNO   PDSO                NO, BRANCH
         BAL   R14,CKVOL           YES, BRANCH
PDSO     TM    SWITCH+3,SELDSO     DSORG SELECTION?
         BNO   PRECFM              NO, BRANCH
         BAL   R14,CKDSO           YES, BRANCH
PRECFM   TM    SWITCH+4,SELRFM     RECFM SELECTION?
         BNO   PLRLGE              NO, BRANCH
         BAL   R14,CKRECFM         YES, BRANCH
PLRLGE   TM    SWITCH+2,SELLRLGE   LRECL GE SELECTION?
         BNO   PLRLLE              NO, BRANCH
         BAL   R14,CKLRLGE         YES, BRANCH
PLRLLE   TM    SWITCH+2,SELLRLLE   LRECL LE SELECTION?
         BNO   PBSZGE              NO, BRANCH
         BAL   R14,CKLRLLE         YES, BRANCH
PBSZGE   TM    SWITCH+2,SELBSZGE   BLKSIZE GE SELECTION?
         BNO   PBSZLE              NO, BRANCH
         BAL   R14,CKBSZGE         YES, BRANCH
PBSZLE   TM    SWITCH+2,SELBSZLE   BLKSIZE LE SELECTION?
         BNO   PBCGE               NO, BRANCH
         BAL   R14,CKBSZLE         YES, BRANCH
PBCGE    TM    SWITCH+2,SELBCGE    BLOCK COUNT GE SELECTION?
         BNO   PBCLE               NO, BRANCH
         BAL   R14,CKBCGE          YES, BRANCH
PBCLE    TM    SWITCH+2,SELBCLE    BLOCK COUNT LE SELECTION?
         BNO   PJTYPE              NO, BRANCH
         BAL   R14,CKBCLE          YES, BRANCH
PJTYPE   TM    SWITCH+3,SELTYPE    JOB TYPE SELECTION?
         BNO   PODAY               NO, BRANCH
         BAL   R14,CKTYPE          YES, BRANCH
PODAY    TM    SWITCH,SELODAY      OPEN DAY-OF-WEEK SELECTION?
         BNO   PCDAY               NO, BRANCH
         BAL   R14,CKCDAY          YES, BRANCH
PCDAY    TM    SWITCH,SELCDAY      CLOSE DAY-OF-WEEK SELECTION?
         BNO   PEND                NO, BRANCH
         BAL   R14,CKODAY          YES, BRANCH
PEND     B     READRET             RETURN TO CALLER
***********************************************************************
*                                                                     *
*        THESE ARE THE INDIVIDUAL FILTER ROUTINES WHICH WILL BE       *
*        CALLED IF INPUT CONTROL CARDS  REQUESTED IT.                 *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*        CHECK DATE RANGE                                             *
***********************************************************************
CKDATE   ICM   R1,B'1111',DATETBL  LOAD ADDRESS OF DATE TABLE
         BZR   R14                 ZERO, NO DATES, IGNORE THIS CHECK
CKDATE1  CLI   0(R1),X'FF'         SEE IF END OF TABLE
         BE    READ                YES, NO MATCH, BYPASS RECORD
         CP    INOJDATE,0(4,R1)    SEE IF OPEN DATE LT BEGIN DATE
         BL    CKDATE2             YES, FAILED THIS CHECK
         CP    INCJDATE,4(4,R1)    SEE IF CLOSE DATE GT END DATE
         BH    CKDATE2             YES, FAILED THIS CHECK
         BR    R14                 NO,  MATCH DATE RANGE, KEEP THIS ONE
CKDATE2  LA    R1,08(,R1)          INCREMENT TO NEXT DATE ENTRY
         B     CKDATE1             GO CHECK NEXT DATE ENTRY
         SPACE 3
***********************************************************************
*        CHECK OPEN TIME RANGE                                        *
***********************************************************************
CKOTME   ICM   R1,B'1111',OTIMETBL LOAD ADDRESS OF OPEN TIME TABLE
         BZR   R14                 ZERO, NO TIMES, IGNORE THIS CHECK
CKOTME1  CLI   0(R1),X'FF'         SEE IF END OF TABLE
         BE    READ                YES, NO MATCH, BYPASS RECORD
         CLC   INOTIME,0(R1)       SEE IF OPEN TIME LT BEGIN TIME
         BL    CKOTME2             YES, FAILED THIS CHECK
         CLC   INOTIME,4(R1)       SEE IF CLOSE TIME GT END TIME
         BH    CKOTME2             YES, FAILED THIS CHECK
         BR    R14                 NO,  MATCH DATE RANGE, KEEP THIS ONE
CKOTME2  LA    R1,08(,R1)          INCREMENT TO NEXT TIME ENTRY
         B     CKOTME1             GO CHECK NEXT TIME ENTRY
         SPACE 3
***********************************************************************
*        CHECK CLOSE TIME RANGE                                       *
***********************************************************************
CKCTME   ICM   R1,B'1111',CTIMETBL LOAD ADDRESS OF CLOSE TIME TABLE
         BZR   R14                 ZERO, NO TIMES, IGNORE THIS CHECK
CKCTME1  CLI   0(R1),X'FF'         SEE IF END OF TABLE
         BE    READ                YES, NO MATCH, BYPASS RECORD
         CLC   INCTIME,0(R1)       SEE IF OPEN TIME LT BEGIN TIME
         BL    CKCTME2             YES, FAILED THIS CHECK
         CLC   INCTIME,4(R1)       SEE IF CLOSE TIME GT END TIME
         BH    CKCTME2             YES, FAILED THIS CHECK
         BR    R14                 NO,  MATCH DATE RANGE, KEEP THIS ONE
CKCTME2  LA    R1,08(,R1)          INCREMENT TO NEXT TIME ENTRY
         B     CKCTME1             GO CHECK NEXT TIME ENTRY
         SPACE 3
***********************************************************************
*        CHECK JOB NAME                                               *
***********************************************************************
CKJOBNM  ST    R14,RETADD          SAVE RETURN ADDRESS
         ICM   R14,B'1111',JOBNMTBL LOAD ADDRESS OF JOBNAME TABLE
         BZ    CKJOBNM2            ZERO, NO JOBNAMES, IGNORE THIS CHECK
CKJOBNM1 CLI   0(R14),X'FF'        SEE IF END OF TABLE
         BE    READ                YES, BYPASS RECORD
         LA    R1,INJBN            LOAD ADDRESS OF JOB NAME
         SLR   R15,R15             CLEAR REG FOR IC
         IC    R15,1(R14)          LOAD OFFSET VALUE OF THIS JOBNAME
         AR    R1,R15              ADD OFFSET TO ADDRESS
         IC    R15,0(R14)          LOAD LENGTH VALUE OF THIS JOBNAME
         EX    R15,COMPJOB         COMPARE FOR MATCH
         BE    CKJOBNM2            MATCH, SELECT THIS RECORD FOR NOW
         LA    R14,10(,R14)        INCREMENT TO NEXT JOBNAME ENTRY
         B     CKJOBNM1            GO CHECK NEXT JOBNAME ENTRY
CKJOBNM2 ICM   R14,B'1111',XJOBNTBL LOAD ADDRESS OF EXJOBNAME TABLE
         BZ    CKJOBNM4            ZERO, NO JOBNAMES, IGNORE THIS CHECK
CKJOBNM3 CLI   0(R14),X'FF'        SEE IF END OF TABLE
         BE    CKJOBNM4            YES, DO NOT EXCLUDE THIS RECORD
         LA    R1,INJBN            LOAD ADDRESS OF JOB NAME
         SLR   R15,R15             CLEAR REG FOR IC
         IC    R15,1(R14)          LOAD OFFSET VALUE OF THIS JOBNAME
         AR    R1,R15              ADD OFFSET TO ADDRESS
         IC    R15,0(R14)          LOAD LENGTH VALUE OF THIS JOBNAME
         EX    R15,COMPJOB         COMPARE FOR MATCH
         BE    READ                MATCH, BYPASS RECORD
         LA    R14,10(,R14)        INCREMENT TO NEXT JOBNAME ENTRY
         B     CKJOBNM3            GO CHECK NEXT JOBNAME ENTRY
CKJOBNM4 L     R14,RETADD          RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
COMPJOB  CLC   0(0,R1),2(R14)      *****  EXEC ONLY *****
         SPACE 3
***********************************************************************
*        CHECK SMF SYSTEM NAME                                        *
***********************************************************************
CKSYSID  ICM   R15,B'1111',SYSIDTBL LOAD ADDRESS OF SYSID TABLE
         BZ    CKSYSID2            ZERO, NO SYSIDS, IGNORE THIS CHECK
CKSYSID1 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    READ                YES, BYPASS RECORD
         CLC   INSID,0(R15)        SEE IF MATCH ON SYSTEM ID
         BE    CKSYSID2            MATCH, SELECT THIS RECORD FOR NOW
         LA    R15,04(,R15)        INCREMENT TO NEXT SYSID ENTRY
         B     CKSYSID1            GO CHECK NEXT SYSID ENTRY
CKSYSID2 ICM   R15,B'1111',XSYSTBL LOAD ADDRESS OF EXSYSID TABLE
         BZR   R14                 ZERO, NO SYSIDS, IGNORE THIS CHECK
CKSYSID3 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BER   R14                 YES, DO NOT EXCLUDE THIS RECORD
         CLC   INSID,0(R15)        SEE IF MATCH ON SYSTEM ID
         BE    READ                MATCH, BYPASS RECORD
         LA    R15,04(,R15)        INCREMENT TO NEXT SYSID ENTRY
         B     CKSYSID3            GO CHECK NEXT SYSID ENTRY
         SPACE 3
***********************************************************************
*        CHECK DATASET NAME                                           *
***********************************************************************
CKDSN    ICM   R1,B'1111',DSNTBL   LOAD ADDRESS OF DSNAME TABLE
         BZ    CKDSN2              ZERO, NO DSNS, IGNORE THIS CHECK
CKDSN1   CLI   0(R1),X'FF'         END OF TABLE
         BE    READ                YES, NO MATCH, BYPASS RECORD
         LH    R15,0(R1)           LOAD MACHINE LENGTH OF DSN
         EX    R15,COMPDSN         COMPARE FOR MATCH
         BE    CKDSN2              MATCH, SELECT THIS RECORD FOR NOW
         LA    R1,46(,R1)          INCREMENT TO NEXT ENTRY
         B     CKDSN1              LOOP
CKDSN2   ICM   R1,B'1111',XDSNTBL  LOAD ADDRESS OF EXDSNAME TABLE
         BZR   R14                 ZERO, NO DSNS, IGNORE THIS CHECK
CKDSN3   CLI   0(R1),X'FF'         END OF TABLE
         BER   R14                 YES, DO NOT EXCLUDE THIS RECORD
         LH    R15,0(R1)           LOAD MACHINE LENGTH OF DSN
         EX    R15,COMPDSN         COMPARE FOR MATCH
         BE    READ                MATCH, BYPASS RECORD
         LA    R1,46(,R1)          INCREMENT TO NEXT ENTRY
         B     CKDSN3              LOOP
COMPDSN  CLC   INDSN(0),2(R1)      **** EXECUTE ONLY ****
         SPACE 3
***********************************************************************
*        CHECK DD NAME                                                *
***********************************************************************
CKDDN    ICM   R1,B'1111',DDNTBL   LOAD ADDRESS OF DDNAME TABLE
         BZ    CKDDN2              ZERO, NO DDNS, IGNORE THIS CHECK
CKDDN1   CLI   0(R1),X'FF'         END OF TABLE
         BE    READ                YES, NO MATCH, BYPASS RECORD
         LH    R15,0(R1)           LOAD MACHINE LENGTH OF DDN
         EX    R15,COMPDDN         COMPARE FOR MATCH
         BE    CKDDN2              MATCH, SELECT THIS RECORD FOR NOW
         LA    R1,10(,R1)          INCREMENT TO NEXT ENTRY
         B     CKDDN1              LOOP
CKDDN2   ICM   R1,B'1111',XDDNTBL  LOAD ADDRESS OF EXDDNAME TABLE
         BZR   R14                 ZERO, NO DDNS, IGNORE THIS CHECK
CKDDN3   CLI   0(R1),X'FF'         END OF TABLE
         BER   R14                 YES, DO NOT EXCLUDE THIS RECORD
         LH    R15,0(R1)           LOAD MACHINE LENGTH OF DDN
         EX    R15,COMPDDN         COMPARE FOR MATCH
         BE    READ                MATCH, BYPASS RECORD
         LA    R1,10(,R1)          INCREMENT TO NEXT ENTRY
         B     CKDDN3              LOOP
COMPDDN  CLC   INDDN(0),2(R1)      **** EXECUTE ONLY ****
         SPACE 3
***********************************************************************
*        CHECK ACCESS TYPE                                            *
***********************************************************************
CKACC    ICM   R1,B'1111',ACCTBL   LOAD ADDRESS OF ACCESS TYPE TABLE
         BZR   R14                 ZERO, NO ACC, IGNORE THIS CHECK
CKACC1   CLI   0(R1),X'FF'         END OF TABLE
         BE    READ                YES, NO MATCH, BYPASS RECORD
         CLI   0(R1),C'A'          SEE IF ALL ACCESS TYPES
         BER   R14                 YES, CONSIDER THIS A MATCH
         CLC   INACC,0(R1)         SEE IF MATCH ON ACCESS TYPE
         BER   R14                 MATCH, RETURN TO CALLER
         LA    R1,01(,R1)          INCREMENT TO NEXT ENTRY
         B     CKACC1              LOOP
         SPACE 3
***********************************************************************
*        CHECK UNIT TYPE                                              *
***********************************************************************
CKUNIT   ICM   R1,B'1111',UNITTBL  LOAD ADDRESS OF UNIT TYPE TABLE
         BZR   R14                 ZERO, NO UNITS, IGNORE THIS CHECK
CKUNIT1  CLI   0(R1),X'FF'         END OF TABLE
         BE    READ                YES, NO MATCH, BYPASS RECORD
         CLC   INUNIT,0(R1)        SEE IF MATCH ON UNIT TYPE
         BER   R14                 MATCH, RETURN TO CALLER
         LA    R1,04(,R1)          INCREMENT TO NEXT ENTRY
         B     CKUNIT1             LOOP
         SPACE 3
***********************************************************************
*        CHECK VOLSER (ALL VOLUMES IF MULTIVOLUME)                    *
***********************************************************************
CKVOL    ICM   R1,B'1111',VOLTBL   LOAD ADDRESS OF VOLSER TABLE
         BZ    CKVOL2              ZERO, NO VOLS, IGNORE THIS CHECK
CKVOL1   CLI   0(R1),X'FF'         END OF TABLE
         BE    READ                YES, NO MATCH, BYPASS RECORD
         LH    R15,0(R1)           LOAD MACHINE LENGTH OF VOL
         LA    R6,INVOL            LOAD START ADDR OF VOLSERS FOR DSN
         LH    R7,INVOLCNT         LOAD NUMBER OF VOLSERS FOR DSN
CKVOL1A  EX    R15,COMPVOL         COMPARE FOR MATCH
         BE    CKVOL2              MATCH, SELECT THIS RECORD FOR NOW
         LA    R6,6(,R6)           POINT TO NEXT VOLSER FOR DSN
         BCT   R7,CKVOL1A          LOOP THROUGH ALL VOLSERS FOR DSN
         LA    R1,08(,R1)          INCREMENT TO NEXT ENTRY
         B     CKVOL1              LOOP
CKVOL2   ICM   R1,B'1111',XVOLTBL  LOAD ADDRESS OF EXVOLSER TABLE
         BZR   R14                 ZERO, NO VOLS, IGNORE THIS CHECK
CKVOL3   CLI   0(R1),X'FF'         END OF TABLE
         BER   R14                 YES, DO NOT EXCLUDE THIS RECORD
         LH    R15,0(R1)           LOAD MACHINE LENGTH OF VOL
         LA    R6,INVOL            LOAD START ADDR OF VOLSERS FOR DSN
         LH    R7,INVOLCNT         LOAD NUMBER OF VOLSERS FOR DSN
CKVOL3A  EX    R15,COMPVOL         COMPARE FOR MATCH
         BE    READ                MATCH, BYPASS RECORD
         LA    R6,6(,R6)           POINT TO NEXT VOLSER FOR DSN
         BCT   R7,CKVOL3A          LOOP THROUGH ALL VOLSERS FOR DSN
         LA    R1,08(,R1)          INCREMENT TO NEXT ENTRY
         B     CKVOL3              LOOP
COMPVOL  CLC   0(0,R6),2(R1)       **** EXECUTE ONLY ****
         SPACE 3
***********************************************************************
*        CHECK DATASET ORGANIZATION                                   *
***********************************************************************
CKDSO    ICM   R1,B'1111',DSORGTBL LOAD ADDRESS OF DSORG TABLE
         BZR   R14                 ZERO, NO DSORGS, IGNORE THIS CHECK
CKDSO1   CLI   0(R1),X'FF'         END OF TABLE
         BE    READ                YES, NO MATCH, BYPASS RECORD
         CLC   INDSO,0(R1)         SEE IF DSORG MATCHES
         BER   R14                 MATCH, RETURN TO CALLER
         CLC   0(3,R1),=CL3'ALL'   SEE IF ALL DSORGS DESIRED
         BER   R14                 MATCH, RETURN TO CALLER
         LA    R1,03(,R1)          INCREMENT TO NEXT ENTRY
         B     CKDSO1              LOOP
         SPACE 3
***********************************************************************
*        CHECK RECFM                                                  *
***********************************************************************
CKRECFM  ICM   R1,B'1111',RECFMTBL LOAD ADDRESS OF RECFM TABLE
         BZR   R14                 ZERO, NO RECFMS, IGNORE THIS CHECK
CKRECFM1 CLI   0(R1),X'FF'         END OF TABLE
         BE    READ                YES, NO MATCH, BYPASS RECORD
         CLC   INRECFM,0(R1)       SEE IF RECFM MATCHES
         BER   R14                 MATCH, RETURN TO CALLER
         LA    R1,03(,R1)          INCREMENT TO NEXT ENTRY
         B     CKRECFM1            LOOP
         SPACE 3
***********************************************************************
*        CHECK LRECL GE                                               *
***********************************************************************
CKLRLGE  CLC   INLRECL,VALLRGE    SEE IF LRECL GE PARM VALUE
         BL    READ                NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK LRECL LE                                               *
***********************************************************************
CKLRLLE  CLC   INLRECL,VALLRLE    SEE IF LRECL LE PARM VALUE
         BH    READ                NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK BLKSIZE GE                                             *
***********************************************************************
CKBSZGE  CLC   INBLKSZ,VALBSZGE   SEE IF BLKSIZE GE PARM VALUE
         BL    READ                NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK BLKSIZE LE                                             *
***********************************************************************
CKBSZLE  CLC   INBLKSZ,VALBSZLE   SEE IF BLKSIZE LE PARM VALUE
         BH    READ                NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK BLOCK COUNT GE                                         *
***********************************************************************
CKBCGE   CLC   INTEP,=X'FFFFFFFF'  SEE IF EXCP COUNT HIGH VALUES
         BER   R14                 YES, BYPASS TEST
         CLC   INTEP,VALBCGE       SEE IF EXCP COUNT GE PARM VALUE
         BL    READ                NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK BLOCK COUNT LE                                         *
***********************************************************************
CKBCLE   CLC   INTEP,=X'FFFFFFFF'  SEE IF EXCP COUNT HIGH VALUES
         BER   R14                 YES, BYPASS TEST
         CLC   INTEP,VALBCLE       SEE IF EXCP COUNT LE PARM VALUE
         BH    READ                NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK JOB TYPE                                               *
***********************************************************************
CKTYPE   CLC   INTYPE,VALTYPE      SEE IF TYPE MATCHES
         BNE   READ                NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK OPEN DAY-OF-THE-WEEK                                   *
***********************************************************************
CKODAY   LH    R1,INODAY           LOAD OPEN DAY-OF-WEEK
         BCTR  R1,0                MAKE RELATIVE TO ZERO
         SLL   R1,2                MULTIPLY BY 4
         B     CKODAY0(R1)         BRANCH TO PROPER ROUTINE FOR DAY
CKODAY0  B     CKODAY1             INDEX = 00
         B     CKODAY2             INDEX = 01
         B     CKODAY3             INDEX = 02
         B     CKODAY4             INDEX = 03
         B     CKODAY5             INDEX = 04
         B     CKODAY6             INDEX = 05
         B     CKODAY7             INDEX = 06
CKODAY1  TM    ODAYSW,SUN          SEE IF SUNDAY DESIRED
         BNO   READ                NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKODAY2  TM    ODAYSW,MON          SEE IF MONDAY DESIRED
         BNO   READ                NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKODAY3  TM    ODAYSW,TUE          SEE IF TUESDAY DESIRED
         BNO   READ                NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKODAY4  TM    ODAYSW,WED          SEE IF WEDNESDAY DESIRED
         BNO   READ                NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKODAY5  TM    ODAYSW,THU          SEE IF THURSDAY DESIRED
         BNO   READ                NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKODAY6  TM    ODAYSW,FRI          SEE IF FRIDAY DESIRED
         BNO   READ                NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKODAY7  TM    ODAYSW,SAT          SEE IF SATURDAY DESIRED
         BNO   READ                NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK CLOSE DAY-OF-THE-WEEK                                  *
***********************************************************************
CKCDAY   LH    R1,INCDAY           LOAD DAY-OF-WEEK
         BCTR  R1,0                MAKE RELATIVE TO ZERO
         SLL   R1,2                MULTIPLY BY 4
         B     CKCDAY0(R1)         BRANCH TO PROPER ROUTINE FOR DAY
CKCDAY0  B     CKCDAY1             INDEX = 00
         B     CKCDAY2             INDEX = 01
         B     CKCDAY3             INDEX = 02
         B     CKCDAY4             INDEX = 03
         B     CKCDAY5             INDEX = 04
         B     CKCDAY6             INDEX = 05
         B     CKCDAY7             INDEX = 06
CKCDAY1  TM    CDAYSW,SUN          SEE IF SUNDAY DESIRED
         BNO   READ                NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKCDAY2  TM    CDAYSW,MON          SEE IF MONDAY DESIRED
         BNO   READ                NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKCDAY3  TM    CDAYSW,TUE          SEE IF TUESDAY DESIRED
         BNO   READ                NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKCDAY4  TM    CDAYSW,WED          SEE IF WEDNESDAY DESIRED
         BNO   READ                NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKCDAY5  TM    CDAYSW,THU          SEE IF THURSDAY DESIRED
         BNO   READ                NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKCDAY6  TM    CDAYSW,FRI          SEE IF FRIDAY DESIRED
         BNO   READ                NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKCDAY7  TM    CDAYSW,SAT          SEE IF SATURDAY DESIRED
         BNO   READ                NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        END OF INPUT FILE                                            *
***********************************************************************
EOF      OI    SWITCH,ENDFILE      TURN ON END-OF-FILE INDICATOR
         SPACE 3
***********************************************************************
*        CALCULATE THE LENGTH OF INREC                                *
***********************************************************************
READRET  LH    R15,INVOLCNT        LOAD NUMBER OF VOLSERS
         MH    R15,=H'6'           MULTIPLY BY 6 FOR LENGTH OF VAR AREA
         AH    R15,=H'120'         ADD LENGTH OF FIXED AREA
         XC    INRDW,INRDW         ZERO THE FULL RDW
         STH   R15,INRDW           SAVE LENGTH OF RECORD
***********************************************************************
*        RETURN TO CALLER                                             *
***********************************************************************
         L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         ST    R5,40(R13)          SAVE REGISTER 5 INTO SAVE AREA
         LM    R14,R12,12(R13)     RESTORE ORIGINAL REGS
         BR    R14                 RETURN TO CALLER
TRTAB    EQU   *-240
         DC    C'0123456789ABCDEF'
         DROP  R5                  DROP ADDRESSABILITY TO SMF RECORD
         EJECT
***********************************************************************
*                                                                     *
*                              WKDAY                                  *
*                                                                     *
*        DETERMINE THE DAY-OF-WEEK INDEX BASED UPON AN INPUT          *
*        PACKED DECIMAL JULIAN DATE IN THE FORM YYYYDDDS.             *
*                                                                     *
*        THE DATE WILL FIRST BE CONVERTED TO MONTH, DAY, AND          *
*        YEAR.  THIS WILL THEN BE CONVERTED TO A DAY-OF-WEEK          *
*        INDEX FROM 1 - 7 INDICATING SUN - SAT USING A COMPLEX        *
*        EQUATION.                                                    *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*                                                                     *
*        CONVERT JULIAN DATE TO MONTH, DAY, AND YEAR                  *
*                                                                     *
*        THE INPUT JULIAN DATE IS IN FIELD PJDATE                     *
*        THE OUTPUT DATES WILL BE MMB, DDB, AND YYYYB.                *
*                                                                     *
***********************************************************************
WKDAY    ST    R14,WKDAYRET        SAVE RETURN ADDRESS
         TM    PJDATE+1,X'01'      SEE IF ODD YEAR
         BO    WKDAY1              YES, NOT LEAP YEAR
         TM    PJDATE+1,X'12'      MAGIC LEAP YEAR MASK
         BM    WKDAY1              MIXED, NOT LEAP YEAR
         MVC   MDAYTBL+2(2),=H'29' SET FEB TO 29 DAYS
WKDAY1   LA    R2,12               SET LOOP COUNTER
         LA    R3,1                SET MONTH COUNTER
         ZAP   DBL,PJDATE+2(2)     MOVE JULIAN DAY TO WORK
         CVB   R1,DBL              CONVERT DAY TO BINARY
         LA    R15,MDAYTBL         LOAD ADDR OF DAY OF THE MONTH TABLE
WKDAY2   CH    R1,0(R15)           SEE IF DAYS GT DAYS IN THIS MONTH
         BNH   WKDAY3              NO, DONE
         SH    R1,0(R15)           SUBTRACT DAYS IN THIS MONTH FROM TOT
         LA    R3,1(,R3)           ADD 1 TO MONTH COUNTER
         LA    R15,2(,R15)         INCREMENT TO NEXT ENTRY IN DAY TABLE
         BCT   R2,WKDAY2           LOOP
WKDAY3   STH   R3,MMB              SAVE MONTH
         STH   R1,DDB              SAVE DAY
         CLI   PJDATE,X'19'        SEE IF 20TH CENTURY
         BE    WKDAY5              YES, GET OUT
         CLI   PJDATE,X'20'        SEE IF 21ST CENTURY
         BE    WKDAY5              YES, GET OUT
         MVI   PJDATE,X'19'        ASSUME 20TH CENTURY
         CLI   PJDATE+1,X'50'      TEST SEE IF PAST YEAR 50
         BH    WKDAY5              YES, OK
WKDAY4   MVI   PJDATE,X'20'        YES, SET YEAR TO 20
WKDAY5   MVO   DBL,PJDATE(2)       MOVE YEAR TO WORK
         CVB   R1,DBL              CONVERT YEARS TO BINARY
         STH   R1,YYYYB            SAVE YEAR
         EJECT
***********************************************************************
*                                                                     *
*        CALCULATE THE DAY-OF-WEEK INDEX                              *
*                                                                     *
*        THE INPUT FIELDS ARE MMB, DDB, AND YYYYB                     *
*        THE OUTPUT DAY OF THE WEEK WILL BE DAYOFWK                   *
*                                                                     *
*        N = D + 2M + 3(M+1)/5 + Y + Y/4 - Y/100 + Y/400 + 2          *
*                                                                     *
*        WHERE M = 3-14 (JAN AND FEB ARE 13 AND 14 OF Y-1)            *
*                                                                     *
*        N/7 LEAVES REMAINDER 0-6, 0 INDICATING SATURDAY              *
*                                                                     *
*        IF REMAINDER 0 - CHANGE TO 7 FOR ACCURATE DAY INDEX          *
*                                                                     *
***********************************************************************
WKDAY6   LH    R1,DDB              SET N = D
         SPACE
         LH    R15,YYYYB           GET Y
         LH    R14,MMB             GET M
         CH    R14,=H'2'           SEE IF JAN OR FEB
         BH    WKDAY9              NO, BRANCH
         BE    WKDAY7              GO PROCESS FEB
         LA    R14,13              SET M = 13 FOR JAN
         B     WKDAY8              GO REDEFINE Y
WKDAY7   LA    R14,14              SET M = 14 FOR FEB
WKDAY8   BCTR  R15,0               SET Y = Y-1
WKDAY9   LR    R0,R14              COPY M
         ALR   R0,R0               GET 2M
         ALR   R1,R0               SET N= N + 2M
         SPACE
         LR    R0,R15              SAVE REDEFINED Y
         LA    R14,1(,R14)         GET M+1
         MH    R14,=H'3'           GET 3(M+1)
         SRDL  R14,32              SHIFT TO ODD REG OF PAIR
         D     R14,=F'5'           GET 3(M+1)/5 IN R15
         ALR   R1,R15              SET N = N + 3(M+1)/5
         SPACE
         LR    R15,R0              GET Y
         ALR   R1,R15              SET N = N + Y
         SPACE
         SLR   R14,R14             ZERO EVEN REG OF PAIR
         D     R14,=F'4'           GET Y/4
         ALR   R1,R15              SET N = N + Y/4
         SPACE
         LR    R15,R0              GET Y
         SLR   R14,R14             ZERO EVEN REG OF PAIR
         D     R14,=F'100'         GET Y/100
         SLR   R1,R15              SET N = N - Y/100
         SPACE
         LR    R15,R0              GET Y
         SLR   R14,R14             ZERO EVEN REG OF PAIR
         D     R14,=F'400'         GET Y/400
         ALR   R1,R15              SET N = N + Y/400
         SPACE
         LA    R15,2               GET 2
         ALR   R1,R15              SET N = N + 2
         SPACE
         SLR   R0,R0               ZERO EVEN REG OF PAIR
         D     R0,=F'7'            SET N = N/7
         SPACE
         LTR   R1,R0               TEST REMAINDER
         BNZ   WKDAY10             NOT ZERO, CONTINUE
         LA    R1,7                ZERO, SET TO 7
         EJECT
WKDAY10  STH   R1,DAYOFWK          SAVE DAY-OF-WEEK
***********************************************************************
*        RETURN TO CALLER                                             *
***********************************************************************
         L     R14,WKDAYRET        RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        DAY-PER-MONTH TABLE FOR JULIAN DATE CONVERT ROUTINE          *
***********************************************************************
MDAYTBL  DS    0H
         DC    H'31'
         DC    H'28'
         DC    H'31'
         DC    H'30'
         DC    H'31'
         DC    H'30'
         DC    H'31'
         DC    H'31'
         DC    H'30'
         DC    H'31'
         DC    H'30'
         DC    H'31'
         DROP  R9,R10,R11,R12
         POP   USING
         EJECT
         PUSH  USING
***********************************************************************
*                                                                     *
*        THIS ROUTINE WILL FORMAT THE OUTPUT PRINT RECORD FROM THE    *
*        INPUT FIELDS ALREADY SAVED                                   *
*                                                                     *
*        1)  REGISTER 15 ON ENTRY IS THE ROUTINE ENTRY POINT          *
*        2)  REGISTER 14 ON ENTRY IS THE RETURN ADDRESS               *
*                                                                     *
*        RETURN FROM THIS ROUTINE WILL BE MADE TO REGISTER 14         *
*                                                                     *
***********************************************************************
FORMAT   STM   R14,R12,12(R13)     SAVE REGISTERS
         USING FORMAT,R9,R10,R11,R12 SET ADDRESSABILITY TO ROUTINE
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,SAVE2           LOAD ADDR OF NEW SAVE
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
********************************************************************
*        SET OUTPUT JOB NAME                                       *
********************************************************************
         MVC   OJOBNAME,INJBN      MOVE SMF JOBNAME TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT OPEN JULIAN DATE                               *
********************************************************************
         MVC   WORK(9),=X'40212020204B202020' SET EDIT MASK
         ED    WORK(9),INOJDATE    EDIT THE CLOSE DATE
         MVC   OOJDATE,WORK+1      MOVE THE CLOSE DATE TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT OPEN GREGORIAN DATE                            *
********************************************************************
         MVC   WORK(12),=X'402120202020612020612020' SET EDIT MASK
         ED    WORK(12),INOGDATE    EDIT THE CLOSE DATE
         MVC   OOGDATE,WORK+2      MOVE THE CLOSE DATE TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT CLOSE JULIAN DATE                              *
********************************************************************
         MVC   WORK(9),=X'40212020204B202020' SET EDIT MASK
         ED    WORK(9),INCJDATE    EDIT THE CLOSE DATE
         MVC   OCJDATE,WORK+1      MOVE THE CLOSE DATE TO DETAIL
********************************************************************
*        SET OUTPUT CLOSE GREGORIAN DATE                           *
********************************************************************
         MVC   WORK(12),=X'402120202020612020612020' SET EDIT MASK
         ED    WORK(12),INCGDATE    EDIT THE CLOSE DATE
         MVC   OCGDATE,WORK+2      MOVE THE CLOSE DATE TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT OPEN TIME                                      *
********************************************************************
         ICM   R1,15,INOTIME       LOAD TIME TO REGISTER 1
         L     R15,=V(CNVTIME)     LOAD ADDRESS OF CONVERT TIME ROUTINE
         BALR  R14,R15             GO TO CONVERT TIME ROUTINE
         MVC   OOTIME,OUTTIME+1    MOVE TIME (HH.MM) TO DETAIL LINE
         SPACE 3
********************************************************************
*        SET OUTPUT CLOSE TIME                                     *
********************************************************************
         ICM   R1,15,INCTIME       LOAD TIME TO REGISTER 1
         L     R15,=V(CNVTIME)     LOAD ADDRESS OF CONVERT TIME ROUTINE
         BALR  R14,R15             GO TO CONVERT TIME ROUTINE
         MVC   OCTIME,OUTTIME+1    MOVE TIME (HH.MM) TO DETAIL LINE
         SPACE 3
********************************************************************
*        SET OUTPUT SYSTEM ID                                      *
********************************************************************
         MVC   OSYSID,INSID        MOVE SMF SYSTEM ID TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT PROC STEP NAME                                 *
********************************************************************
         MVC   ODSN,INDSN          MOVE DSN TO DETAIL LN
         SPACE 3
********************************************************************
*        SET OUTPUT DDNAME                                         *
********************************************************************
         MVC   ODDN,INDDN          MOVE DDNAME TO DETAIL LN
         SPACE 3
********************************************************************
*        SET OUTPUT ACCESS TYPE                                    *
********************************************************************
         MVC   OACC,INACC          MOVE ACCESS TYPE TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT UNIT TYPE                                      *
********************************************************************
         MVC   OUNIT,INUNIT        MOVE UNIT TYPE TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT VOLSER                                         *
********************************************************************
         MVC   OVOL,INVOL          MOVE VOLSER TO DETAIL
********************************************************************
*        SET OUTPUT DSORG                                          *
********************************************************************
         MVC   ODSO,INDSO          MOVE DSORG TO DETAIL
********************************************************************
*        SET OUTPUT RECFM                                          *
********************************************************************
         MVC   ORECFM,INRECFM      MOVE RECFM TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT LRECL                                          *
********************************************************************
         SLR   R15,R15             CLEAR REG FOR ICM
         ICM   R15,B'0011',INLRECL LOAD LRECL
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   WORK(7),=X'4020206B202020'  SET EDIT MASK
         ED    WORK(7),DOUBLE+5    EDIT LRECL
         MVC   OLRECL,WORK+1       MOVE LRECL TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT BLKSIZE                                        *
********************************************************************
         SLR   R15,R15             CLEAR REG FOR ICM
         ICM   R15,B'0011',INBLKSZ LOAD BLKSIZE
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   WORK(7),=X'4020206B202020'  SET EDIT MASK
         ED    WORK(7),DOUBLE+5    EDIT BLKSIZE
         MVC   OBLKSZ,WORK+1       MOVE BLKSIZE TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT TOTAL EXCP COUNT                               *
********************************************************************
         MVC   WORK+2(10),=CL10'         ?' ASSUME BAD EXCP COUNT
         CLC   INTEP,=X'FFFFFFFF'  SEE IF BAD EXCP COUNT
         BE    FORMAT2             YES, BRANCH
         ICM   R15,B'1111',INTEP   LOAD EXCP COUNT
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   WORK(12),=X'402020206B2020206B202120' SET EDIT MASK
         ED    WORK(12),DOUBLE+3   EDIT EXCP COUNT
FORMAT2  MVC   OEXCPS,WORK+2       MOVE EXCP COUNT TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT JOB TYPE                                       *
********************************************************************
         MVC   OTYPE,INTYPE        MOVE JOB TYPE TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT OPEN DAY-OF-THE-WEEK                           *
********************************************************************
         LH    R1,INODAY           LOAD DAY-OF-WEEK INDEX
         BCTR  R1,0                MAKE RELATIVE TO ZERO
         MH    R1,=H'3'            CALCULATE NAME TABLE OFFSET
         LA    R1,DAYTABLE(R1)     POINT TO NAME OF DAY ENTRY
         MVC   OODAY,0(R1)         SAVE DAY-OF-THE-WEEK
         SPACE 3
********************************************************************
*        SET OUTPUT CLOSE DAY-OF-THE-WEEK                          *
********************************************************************
         LH    R1,INCDAY           LOAD DAY-OF-WEEK INDEX
         BCTR  R1,0                MAKE RELATIVE TO ZERO
         MH    R1,=H'3'            CALCULATE NAME TABLE OFFSET
         LA    R1,DAYTABLE(R1)     POINT TO NAME OF DAY ENTRY
         MVC   OCDAY,0(R1)         SAVE DAY-OF-THE-WEEK
         EJECT
***********************************************************************
*                                                                     *
*        BUILD THE APPROPRIATE DETAIL LINE FROM THE REPORT            *
*        VARIABLES AS DEFINED IN THE PRINT OPTION TABLE.              *
*                                                                     *
***********************************************************************
FMTLINE  L     R1,=V(PRTOPT)       LOAD ADDRESS OF PRINT OPTIONS
         LA    R2,DETAIL           POINT TO DETAIL LINE
FMTLINE1 CLI   0(R1),X'FF'         PHYSICAL END OF TABLE
         BE    FMTLINE4            YES, BRANCH
         CLI   0(R1),C'N'          LOGICAL END OF TABLE
         BE    FMTLINE4            YES, BRANCH
         LH    R15,4(R1)           LOAD BRANCH TABLE OFFSET
         B     FMTLINE2(R15)       BRANCH TO PROPER ROUTINE BY INDEX
FMTLINE2 B     PRTJOBNM            INDEX = 00
         B     PRTCJDTE            INDEX = 04
         B     PRTCTIME            INDEX = 08
         B     PRTSYSID            INDEX = 12
         B     PRTDSN              INDEX = 16
         B     PRTDDN              INDEX = 20
         B     PRTACC              INDEX = 24
         B     PRTUNIT             INDEX = 28
         B     PRTVOL              INDEX = 32
         B     PRTDSO              INDEX = 36
         B     PRTRFM              INDEX = 40
         B     PRTLRECL            INDEX = 44
         B     PRTBLKSZ            INDEX = 48
         B     PRTEXCP             INDEX = 52
         B     PRTTYPE             INDEX = 56
         B     ERROR047            INDEX = 60
         B     ERROR047            INDEX = 64
         B     ERROR047            INDEX = 68
         B     ERROR047            INDEX = 72
         B     ERROR047            INDEX = 76
         B     ERROR047            INDEX = 80
         B     ERROR047            INDEX = 84
         B     ERROR047            INDEX = 88
         B     ERROR047            INDEX = 92
         B     ERROR047            INDEX = 96
         B     ERROR047            INDEX = 100
         B     ERROR047            INDEX = 104
         B     ERROR047            INDEX = 108
         B     ERROR047            INDEX = 112
         B     ERROR047            INDEX = 116
         B     ERROR047            INDEX = 120
         B     ERROR047            INDEX = 124
         B     ERROR047            INDEX = 128
         B     ERROR047            INDEX = 132
         B     ERROR047            INDEX = 136
         B     ERROR047            INDEX = 140
         B     ERROR047            INDEX = 144
         B     ERROR047            INDEX = 148
         B     ERROR047            INDEX = 152
         B     ERROR047            INDEX = 156
         B     ERROR047            INDEX = 160
         B     ERROR047            INDEX = 164
         B     PRTCDAY             INDEX = 168
         B     PRTOJDTE            INDEX = 172
         B     PRTOTIME            INDEX = 176
         B     PRTODAY             INDEX = 180
         B     PRTCGDTE            INDEX = 184
         B     PRTOGDTE            INDEX = 188
         B     ERROR047            INDEX = 192
FMTLINE3 LA    R1,6(,R1)           INCREMENT TO NEXT TABLE ENTRY
         B     FMTLINE1            LOOP
FMTLINE4 B     MVEND               DONE WITH PRINT LINE
         EJECT
***********************************************************************
*        MOVE JOB NAME TO DETAIL                                      *
***********************************************************************
PRTJOBNM LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(8,R2),OJOBNAME    MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE OPEN JULIAN DATE TO DETAIL                              *
***********************************************************************
PRTOJDTE LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(8,R2),OOJDATE     MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE OPEN GREGORIAN DATE TO DETAIL                           *
***********************************************************************
PRTOGDTE LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(10,R2),OOGDATE    MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE CLOSE JULIAN DATE TO DETAIL                             *
***********************************************************************
PRTCJDTE LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(8,R2),OCJDATE     MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE CLOSE GREGORIAN DATE TO DETAIL                          *
***********************************************************************
PRTCGDTE LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(10,R2),OCGDATE    MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE OPEN TIME TO DETAIL                                     *
***********************************************************************
PRTOTIME LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(5,R2),OOTIME      MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE CLOSE TIME TO DETAIL                                    *
***********************************************************************
PRTCTIME LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(5,R2),OCTIME      MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE SYSTEM ID TO DETAIL                                     *
***********************************************************************
PRTSYSID LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(4,R2),OSYSID      MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE DSN TO DETAIL                                           *
***********************************************************************
PRTDSN   LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(44,R2),ODSN       MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE DDNAME TO DETAIL                                        *
***********************************************************************
PRTDDN   LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(8,R2),ODDN        MOVE DDNAME TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE ACCESS TYPE TO DETAIL                                   *
***********************************************************************
PRTACC   LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(1,R2),OACC        MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE UNIT TYPE TO DETAIL                                     *
***********************************************************************
PRTUNIT  LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(4,R2),OUNIT       MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE VOLSER TO DETAIL                                        *
***********************************************************************
PRTVOL   LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(6,R2),OVOL        MOVE FIELD TO DETAIL LINE
         MVI   6(R2),C' '          TURN OFF MULTIVOL INDICATOR
         CLC   INVOLCNT,=H'1'      SEE IF MORE THAN 1 VOLSER
         BE    PRTCOMM             NO, GO GET READY FOR NEXT FIELD
         MVI   6(R2),C'*'          SET MULTIVOL INDICATOR
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE DSORG TO DETAIL                                         *
***********************************************************************
PRTDSO   LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(3,R2),ODSO        MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE RECFM TO DETAIL                                         *
***********************************************************************
PRTRFM   LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(3,R2),ORECFM      MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE LRECL TO DETAIL LINE                                    *
***********************************************************************
PRTLRECL LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(6,R2),OLRECL      MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE BLKSIZE TO DETAIL LINE                                  *
***********************************************************************
PRTBLKSZ LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(6,R2),OBLKSZ      MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE TOTAL I/O TO DETAIL LINE                                *
***********************************************************************
PRTEXCP  LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(10,R2),OEXCPS     MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE JOB TYPE TO DETAIL LINE                                 *
***********************************************************************
PRTTYPE  LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(1,R2),OTYPE       MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE OPEN DAY-OF-THE-WEEK TO DETAIL LINE                     *
***********************************************************************
PRTODAY  LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   1(3,R2),OODAY       MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE CLOSE DAY-OF-THE-WEEK TO DETAIL LINE                    *
***********************************************************************
PRTCDAY  LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   1(3,R2),OCDAY       MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        PRINT COMMON ROUTINE                                         *
***********************************************************************
PRTCOMM  B     FMTLINE3            GO PROCESS NEXT TABLE ENTRY
         SPACE 3
MVEND    AP    ACC1,=P'1'          ADD 1 TO SELECTED RECORD COUNTER
         TM    SWITCH+1,OPTOUT     SEE IF OPTIONAL OUTPUT FILE
         BNO   MVEND2              NO, BRANCH
         PUT   DATAOUT,INREC       YES, WRITE SELECTED RECORD
MVEND2   L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         LM    R14,R12,12(R13)     RESTORE ORIGINAL REGS
         BR    R14                 RETURN TO CALLER
         SPACE 3
         LTORG
SAVE2    DS    18F                 ROUTINE SAVE AREA
         DROP  R9,R10,R11,R12
         POP   USING
         EJECT
***********************************************************************
*                                                                     *
*        ERROR ROUTINES                                               *
*                                                                     *
*        EACH ERROR ROUTINE WILL NORMALLY SET A MESSAGE INDEX         *
*        AND THEN LOAD THE APPROPRIATE MESSAGE FROM A MESSAGE         *
*        TABLE ACCORDING TO THAT INDEX.  THAT MESSAGE WILL BE         *
*        ISSUED AS A WTO AND THE PROGRAM ABENDED WITH A USER          *
*        ABEND WHICH ALSO MATCHES THE MESSAGE INDEX.                  *
*                                                                     *
***********************************************************************
ERROR013 LA    R15,13              LOAD MESSAGE INDEX
         B     ERROR999            GO TO COMMON ERROR ROUTINE
ERROR030 LA    R15,30              LOAD MESSAGE INDEX
         B     ERROR999            GO TO COMMON ERROR ROUTINE
ERROR031 LA    R15,31              LOAD MESSAGE INDEX
         B     ERROR999            GO TO COMMON ERROR ROUTINE
ERROR046 LA    R15,46              LOAD MESSAGE INDEX
         B     ERROR999            GO TO COMMON ERROR ROUTINE
ERROR047 LA    R15,47              LOAD MESSAGE INDEX
         B     ERROR999            GO TO COMMON ERROR ROUTINE
ERROR048 LA    R15,48              LOAD MESSAGE INDEX
         B     ERROR999            GO TO COMMON ERROR ROUTINE
ERROR076 LA    R15,76              LOAD MESSAGE INDEX
         B     ERROR999            GO TO COMMON ERROR ROUTINE
         SPACE 3
ERROR999 ST    R15,ABCODE          SAVE ABEND CODE
         BCTR  R15,0               MAKE ERROR RELATIVE TO ZERO
         MH    R15,=H'120'         MULTIPLY BY LENGTH OF EACH ENTRY
         A     R15,=V(MSGTBL)      CALCULATE ADDRESS OF THIS ENTRY
         MVC   MSGWTO+4(120),0(R15) MOVE MESSAGE TO WTO LIST FORM
         WTO   MF=(E,MSGWTO)       WRITE ERROR MESSGAE
         L     R1,ABCODE           LOAD ABEND CODE
         ABEND (R1),DUMP           ABEND THE PROGRAM
         SPACE 3
MSGWTO   WTO   '123456789 123456789 123456789 123456789 123456789 12345X
               6789 123456789 123456789 123456789 123456789 123456789 1X
               23456789 ',ROUTCDE=11,MF=L
         SPACE 3
         LTORG
         EJECT
         PUSH  USING
***********************************************************************
*                                                                     *
*                              FINDDN                                 *
*                                                                     *
*        THIS ROUTINE WILL SEARCH THE TIOT FOR THE DDNAME SUPPLIED    *
*        IN THE EIGHT (8) BYTE FIELD NAMED DDNAME.                    *
*                                                                     *
*        1)  REGISTER 15 ON ENTRY IS THE ROUTINE ENTRY POINT          *
*        2)  REGISTER 14 ON ENTRY IS THE RETURN ADDRESS               *
*                                                                     *
*        THE SUCCESS OF THE DDNAME SEARCH WILL BE INDICATED BY THE    *
*        RETURN CODE SET IN REGISTER 15.                              *
*                                                                     *
*        REG 15 = 0   - DDNAME FOUND                                  *
*        REG 15 = 4   - DDNAME NOT FOUND                              *
*                                                                     *
*        RETURN FROM THIS ROUTINE WILL BE MADE TO REGISTER 14         *
*                                                                     *
***********************************************************************
FINDDN   CSECT
         STM   R14,R12,12(R13)     SAVE REGISTERS
         USING FINDDN,R9,R10,R11,R12  SET ADDRESSABILITY TO ROUTINE
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,SAVE3           LOAD ADDR OF NEW SAVE
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
         SLR   R15,R15             SET RETURN CODE TO ZERO
         L     R1,16               GET CVT ADDR
         L     R1,0(,R1)           GET TCB PTRS
         L     R1,4(,R1)           GET CURRENT TCB
         L     R1,12(,R1)          GET TIOT ADDR
         LA    R1,24(,R1)          POINT TO DD ENTRIES
         SLR   R0,R0               ZERO REG FOR ICM
FINDDN1  ICM   R0,1,0(R1)          LOAD LENGTH OF DD ENTRY
         BZ    NODDN               ZERO, END OF TIOT ENTRIES
         CLC   DDNAME,4(R1)        SEE IF DDNAME MATCH
         BE    YESDDN              YES, BRANCH
FINDDN2  BXH   R1,R0,FINDDN1       LOOP FOR NEXT ENTRY
NODDN    LA    R15,4               SET RETURN CODE TO 4
YESDDN   L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         L     R14,12(R13)         RESTORE
         LM    R0,R12,20(R13)          ORIGINAL REGS
         BR    R14                 RETURN TO CALLER
         SPACE 3
         LTORG
SAVE3    DS    18F                 ROUTINE SAVE AREA
         DROP  R9,R10,R11,R12
         POP   USING
         EJECT
         PUSH  USING
***********************************************************************
*                                                                     *
*                               CNVTIME                               *
*                                                                     *
*        THIS ROUTINE WILL CONVERT THE FULLWORD BINARY TIME VALUE     *
*        IN THE SMF RECORD TO PRINTABLE TIME OF DAY (HHH.MM.SS.TT)    *
*                                                                     *
*        1)  REGISTER 14 ON ENTRY WILL CONTAIN THE ENTRY POINT        *
*        2)  REGISTER 15 ON ENTRY WILL CONTAIN THE RETURN ADDRESS     *
*        3)  REGISTER 1  ON ENTRY WILL CONTAIN THE BINARY TIME        *
*        4)  THE CONVERTED TIME WILL BE IN THE FIELD OUTTIME IN       *
*            THE FORM HHH:MM:SS.TT                                    *
*                                                                     *
*        RETURN FROM THIS ROUTINE WILL BE MADE TO REGISTER 15         *
*                                                                     *
***********************************************************************
CNVTIME  CSECT
         STM   R14,R12,12(R13)     SAVE REGISTERS
         USING CNVTIME,R9,R10,R11,R12 SET ADDRESSABILITY TO ROUTINE
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,SAVE4           LOAD ADDR OF NEW SAVE
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
         LR    R14,R1              MOVE BINARY TIME TO WORK REG
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         D     R14,=F'360000'      DIVIDE TO FIND HOURS
         CVD   R15,DOUBLE          CONVERT HOURS TO DECIMAL
         UNPK  OUTTIME(3),DOUBLE+6(2)  UNPACK HOURS
         OI    OUTTIME+2,X'F0'     MAKE PRINTABLE
         SRDA  R14,32              SHIFT REMAINDER TO ODD REG
         D     R14,=F'6000'        DIVIDE TO FIND MINUTES
         CVD   R15,DOUBLE          CONVERT MINUTES TO DECIMAL
         UNPK  OUTTIME+3(3),DOUBLE+6(2) UNPACK MINUTES
         OI    OUTTIME+5,X'F0'     MAKE PRINTABLE
         MVI   OUTTIME+3,C':'      SEPARATE HOURS AND MINUTES
         SRDA  R14,32              SHIFT REMAINDER TO ODD REG
         D     R14,=F'100'         DIVIDE TO FIND FULL SECONDS
         CVD   R15,DOUBLE          CONVERT SECONDS TO DECIMAL
         UNPK  OUTTIME+6(3),DOUBLE+6(2)  UNPACK SECONDS
         OI    OUTTIME+8,X'F0'     MAKE PRINTABLE
         MVI   OUTTIME+6,C':'      SEPARATE MINUTES AND SECONDS
         CVD   R14,DOUBLE          CONVERT HUNDRETHS TO DECIMAL
         UNPK  OUTTIME+9(3),DOUBLE+6(2)  UNPACK HUNDRETHS
         OI    OUTTIME+11,X'F0'    MAKE PRINTABLE
         MVI   OUTTIME+9,C'.'      SEPARATE SECONDS AND HUNDRETHS
         L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         LM    R14,R12,12(R13)     RESTORE ORIGINAL REGS
         BR    R14                 RETURN TO CALLER
         SPACE 3
         LTORG
SAVE4    DS    18F                 ROUTINE SAVE AREA
         DROP  R9,R10,R11,R12
         POP   USING
         EJECT
         PUSH  USING
***********************************************************************
*                                                                     *
*                               PRMCHK                                *
*                                                                     *
*        THIS ROUTINE WILL PROCESS THE INPUT SYSIN PARM STATEMENT.    *
*        IT WILL STORE THE PARM VALUE IN THE APPROPRIATE FIELD OR     *
*        THE RETURN CODE WILL BE SET TO A VALUE INDICATING A          *
*        SPECIFIC ERROR.                                              *
*                                                                     *
*        1)  REGISTER 15 ON ENTRY WILL CONTAIN THE ENTRY POINT        *
*        2)  REGISTER 14 ON ENTRY WILL CONTAIN THE RETURN ADDRESS     *
*                                                                     *
*        RETURN FROM THIS ROUTINE WILL BE MADE TO REGISTER 14         *
*                                                                     *
***********************************************************************
PRMCHK   CSECT
         STM   R14,R12,12(R13)     SAVE REGISTERS
         USING PRMCHK,R9,R10,R11,R12 SET ADDRESSABILITY TO ROUTINE
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,SAVE5           LOAD ADDR OF NEW SAVE
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
         LA    R7,CARDAREA         LOAD INPUT RECORD ADDRESS
         SPACE 3
***********************************************************************
*                                                                     *
*        DETERMINE LENGTH OF THE INPUT PARM AND THEN SEARCH           *
*        A KEYWORD TABLE TO FIND A MATCH AND ROUTINE INDEX.           *
*                                                                     *
***********************************************************************
KEYPRM   LR    R1,R7               SAVE RECORD ADDRESS
         SLR   R15,R15             CLEAR COUNTER REG
KEYPRM1  SLR   R3,R3               SET LENGTH TO ZERO
KEYPRM2  CLI   0(R7),C' '          END OF PARM
         BE    KEYPRM3             YES, BRANCH
         CLI   0(R7),C'='          END OF PARM
         BE    KEYPRM3             YES, BRANCH
         CLI   0(R7),C'>'          END OF PARM
         BE    KEYPRM3             YES, BRANCH
         CLI   0(R7),C'<'          END OF PARM
         BE    KEYPRM3             YES, BRANCH
         LA    R3,1(,R3)           ADD 1 TO LENGTH FIELD
         LA    R7,1(,R7)           INCREMENT TO NEXT CHAR OF PARM
         B     KEYPRM2             LOOP
KEYPRM3  LTR   R3,R3               TEST LENGTH
         BZ    ERROR033            ZERO, ERROR
         BCTR  R3,0                MAKE MACHINE LENGTH
         L     R4,=V(OPTKEY)       LOAD ADDRESS OF OPTIONS KEYWORD TBL
KEYPRM4  CLI   0(R4),X'FF'         END OF TABLE
         BE    ERROR001            YES, ERROR, INVALID KEYWORD
         CH    R3,0(R4)            SEE IF LENGTH LT MINIMUM LENGTH
         BL    KEYPRM5             YES, BRANCH
         EX    R3,COMPOKEY         COMPARE OPTION KEYWORD
         BE    KEYPRM6             MATCH, BRANCH
KEYPRM5  LA    R4,34(,R4)          INCREMENT TO NEXT TABLE ENTRY
         B     KEYPRM4             LOOP
KEYPRM6  CLI   16(R4),C'Y'         SEE IF ELIGIBLE SELECT OPTION
         BNE   ERROR001            NO, ERROR
         LH    R15,2(R4)           LOAD OPTION INDEX FROM TABLE
         SPACE 3
***********************************************************************
*                                                                     *
*        GO TO THE PROPER ROUTINE FOR THE KEYWORD ON THE INPUT        *
*        CARD ACCORDING TO THE ROUTINE INDEX IN THE KEYWORD           *
*        TABLE.                                                       *
*                                                                     *
***********************************************************************
         B     KEYEND(R15)         BRANCH TO PROPER ROUTINE BY INDEX
KEYEND   B     PRMJBN              INDEX = 00
         B     PRMDATE             INDEX = 04
         B     PRMCTME             INDEX = 08
         B     PRMSYS              INDEX = 12
         B     PRMDSN              INDEX = 16
         B     PRMDDN              INDEX = 20
         B     PRMACC              INDEX = 24
         B     PRMUNIT             INDEX = 28
         B     PRMVOL              INDEX = 32
         B     PRMDSO              INDEX = 40
         B     PRMRFM              INDEX = 36
         B     PRMLRL              INDEX = 44
         B     PRMBSZ              INDEX = 48
         B     PRMBC               INDEX = 52
         B     PRMTYP              INDEX = 56
         B     PRMSTC              INDEX = 60
         B     PRMSORT             INDEX = 64
         B     PRMPRT              INDEX = 68
         B     XPRMJBN             INDEX = 72
         B     XPRMSYS             INDEX = 76
         B     XPRMDSN             INDEX = 80
         B     XPRMDDN             INDEX = 84
         B     XPRMVOL             INDEX = 88
         B     ERROR001            INDEX = 92
         B     ERROR001            INDEX = 96
         B     ERROR001            INDEX = 100
         B     ERROR001            INDEX = 104
         B     ERROR001            INDEX = 108
         B     ERROR001            INDEX = 112
         B     ERROR001            INDEX = 116
         B     ERROR001            INDEX = 120
         B     ERROR001            INDEX = 124
         B     ERROR001            INDEX = 128
         B     ERROR001            INDEX = 132
         B     ERROR001            INDEX = 136
         B     ERROR001            INDEX = 140
         B     ERROR001            INDEX = 144
         B     ERROR001            INDEX = 148
         B     ERROR001            INDEX = 152
         B     ERROR001            INDEX = 156
         B     ERROR001            INDEX = 160
         B     ERROR001            INDEX = 164
         B     PRMCDAY             INDEX = 168
         B     ERROR001            INDEX = 172
         B     PRMOTME             INDEX = 176
         B     PRMODAY             INDEX = 180
         B     ERROR001            INDEX = 184
         B     ERROR001            INDEX = 188
         B     ERROR001            INDEX = 192
         EJECT
***********************************************************************
*                                                                     *
*                        SELECT BY JOBNAME                            *
*                                                                     *
*        JOBNAME=JJJJJJJJ(NN)                                         *
*                                                                     *
*        INSURE THAT THE PARM IS EXACTLY 1 TO EIGHT ALPHANUMERIC      *
*        CHARACTERS LONG.  THE OPTIONAL INDEX VALUE CAN BE            *
*        SPECIFIED WITHIN PARENTHESIS TO SPECIFY THE OFFSET           *
*        WITHIN THE ACTUAL JOBNAME THAT THE SPECIFIED "JOBNAME"       *
*        IS SUPPOSED TO START.  THE OPTIONAL INDEX VALUE MUST         *
*        CONTAIN 1 TO 2 NUMERIC DIGITS.                               *
*                                                                     *
***********************************************************************
PRMJBN   OI    SWITCH,SELJOBNM     TURN ON SELECT JOBNAME INDICATOR
         MVI   VALJOBNM,X'00'      INITIALIZE
         MVI   VALJOBNM+1,X'00'       JOBNAME
         MVC   VALJOBNM+2(8),=CL8' '     ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         SLR   R15,R15             CLEAR COUNTER REGISTER
PRMJBN1  CLI   0(R7),C' '          END OF JOBNM?
         BE    PRMJBN5             YES, BRANCH
         CLI   0(R7),C'('          START OF OFFSET FIELD?
         BE    PRMJBN2             YES, BRANCH
         LA    R15,1(,R15)         ADD 1 TO LENGTH COUNTER
         LA    R7,1(,R7)           ADD 1 TO JOBNAME POINTER
         B     PRMJBN1             LOOP
PRMJBN2  LTR   R15,R15             TEST LENGTH OF JOBNAME
         BZ    ERROR003            ZERO, ERROR
         CH    R15,=H'8'           SEE IF LENGTH EXCEEDS 8
         BH    ERROR004            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         EX    R15,MVJOBNM         MOVE JOBNAME TO SAVE AREA
         STC   R15,VALJOBNM        SAVE JOBNAME LENGTH
         LA    R7,1(R7)            POINT TO INDEX VALUE
         LR    R1,R7               SAVE INDEX ADDRESS
         SLR   R15,R15             CLEAR COUNTER REG
         CLI   0(R7),C')'          END OF INDEX
         BE    PRMJBN3             YES, BRANCH
         LA    R15,1(,R15)         ADD 1 TO LENGTH COUNTER
         CLI   1(R7),C')'          END OF INDEX
         BE    PRMJBN3             YES, BRANCH
         LA    R15,1(,R15)         ADD 1 TO LENGTH COUNTER
         CLI   2(R7),C')'          END OF INDEX
         BE    PRMJBN3             YES, BRANCH
         B     ERROR005            INDEX LENGTH EXCEEDS 2 CHARACTERS
PRMJBN3  LTR   R15,R15             SEE IF ZERO LENGTH
         BZ    PRMJBN6             YES, NO INDEX
         LR    R14,R15             SAVE INDEX LENGTH
         LR    R2,R7               SAVE INDEX POINTER
PRMJBN4 CLI    0(R2),C'0'          TEST FOR LESS THAN ZERO
         BL    ERROR006            YES, ERROR
         CLI   0(R2),C'9'          TEST FOR GT NINE
         BH    ERROR006            YES, ERROR
         LA    R2,1(,R2)           INDEX TO NEXT CHAR
         BCT   R14,PRMJBN4         LOOP
         BCTR  R15,0               MAKE INDEX LENGTH RELATIVE TO ZERO
         EX    R15,PACKINDX        PACK THE INDEX VALUE
         CVB   R15,DOUBLE          CONVERT INDEX VALUE TO BINARY
         BCTR  R15,0               MAKE INDEX VALUE RELATIVE TO ZERO
         STC   R15,VALJOBNM+1      SAVE INDEX VALUE
         B     PRMJBN6             BRANCH
PRMJBN5  LTR   R15,R15             TEST LENGTH OF JOBNAME
         BZ    ERROR002            ZERO, ERROR
         CH    R15,=H'8'           SEE IF LENGTH EXCEEDS 8
         BH    ERROR003            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         EX    R15,MVJOBNM         MOVE JOBNAME TO SAVE AREA
         STC   R15,VALJOBNM        SAVE JOBNAME LENGTH
         MVI   VALJOBNM+1,X'00'    SET INDEX TO ZERO
PRMJBN6  ICM   R15,B'1111',JOBNMTBL LOAD ADDRESS OF JOBNAME TABLE
         BNZ   PRMJBN7             NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=10010        GET ROOM FOR 1000 JOBNAME ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,JOBNMTBL        STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMJBN7  SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMJBN8  CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMJBN9             YES, GO SAVE NEW ENTRY
         LA    R15,10(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR054            YES, ERROR
         B     PRMJBN8             NO, LOOP
PRMJBN9  MVC   0(10,R15),VALJOBNM  SAVE NEW ENTRY
         MVI   10(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
MVJOBNM  MVC   VALJOBNM+2(0),0(R1) *****  EXEC ONLY *****
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY DATE RANGE                            *
*                                                                     *
*        DATE=SDATE:EDATE                                             *
*                                                                     *
*        SDATE IS THE START DATE FOR SELECTION AND EDATE IS THE       *
*        OPTIONAL ENDING DATE FOR SELECTION.  IF ONLY ONE VALUE       *
*        IS ENTERED, THE DATE SELECTED IS ANY DATE GREATER THAN       *
*        OR EQUAL TO THAT DATE.  EACH DATE CAN BE ANY OF THE          *
*        FOLLOWING FORMATS:                                           *
*                                                                     *
*        YY.DDD                                                       *
*        YYYY.DDD                                                     *
*        MM/DD/YY                                                     *
*        YYYY/MM/DD                                                   *
*                                                                     *
***********************************************************************
PRMDATE  OI    SWITCH,SELDATE      TURN ON SELECT DATE INDICATOR
         MVC   DATES,=P'1900001'   SET DEFAULT LOW DATE
         MVC   DATEE,=P'2099365'   SET DEFAULT HIGH DATE
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
PRMDATE1 LR    R1,R7               SAVE PARM ADDRESS
         BAL   R14,PRMDTT          GO PROCESS THIS DATE
         LTR   R15,R15             TEST RETURN CODE
         BNZ   ERROR007            NOT ZERO, INVALID START DATE
         MVC   DATES,DATEJUL       SAVE START DATE
         CLI   0(R1),C':'          SEE IF DATE RANGE
         BNE   ERROR008            NO, GET OUT
         LA    R1,1(,R1)           YES, INCREMENT PAST ':'
         BAL   R14,PRMDTT          GO PROCESS THIS DATE
         LTR   R15,R15             TEST RETURN CODE
         BNZ   ERROR009            NOT ZERO, INVALID END DATE
         MVC   DATEE,DATEJUL       SAVE END DATE
PRMDATE2 ICM   R15,B'1111',DATETBL  LOAD ADDRESS OF DATE TABLE
         BNZ   PRMDATE3            NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=8008         GET ROOM FOR 1000 DATE ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,DATETBL         STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMDATE3 SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMDATE4 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMDATE5            YES, GO SAVE NEW ENTRY
         LA    R15,08(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR062            YES, ERROR
         B     PRMDATE4            NO, LOOP
PRMDATE5 MVC   0(04,R15),DATES     SAVE NEW START DATE ENTRY
         MVC   4(04,R15),DATEE     SAVE NEW END   DATE ENTRY
         MVI   08(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                              PRMDTT                                 *
*                                                                     *
*        VALIDATE AND CONVERT DATES                                   *
*                                                                     *
*        R1 ON ENTRY POINTS TO THE INPUT DATE                         *
*                                                                     *
*        THE FOLLOWING FORMATS ARE SUPPORTED:                         *
*                                                                     *
*                                                                     *
*        YY.DDD                                                       *
*        YYYY.DDD                                                     *
*        MM/DD/YY                                                     *
*        YYYY/MM/DD                                                   *
*                                                                     *
*        ON EXIT:                                                     *
*                                                                     *
*        R1   POINTS PAST THE INPUT DATE                              *
*        R15  CONTAINS THE RETURN CODE                                *
*             00 - CONVERSION OK                                      *
*             08 - INVALID DATE                                       *
*                                                                     *
*        THE FIELD DATEJUL CONTAINS THE VALIDATED AND CONVERTED       *
*        DATE IN THE FORM YYYYDDDS                                    *
*                                                                     *
***********************************************************************
PRMDTT   STM   R0,R15,SAVEPRMD     SAVE REGISTERS
         LR    R7,R1               SAVE START OF DATE ADDRESS
         CLI   2(R7),C'.'          CHECK FOR JULIAN YY.DDD
         BE    PRMDTT1             YES, BRANCH
         CLI   4(R7),C'.'          CHECK FOR JULIAN YYYY.DDD
         BE    PRMDTT2             YES, BRANCH
         CLI   2(R7),C'/'          CHECK FOR GREGORIAN MM/DD/YY
         BE    PRMDTT3             YES, BRANCH
         CLI   4(R7),C'/'          CHECK FOR GREGORIAN YYYY/MM/DD
         BE    PRMDTT4             YES, BRANCH
         B     PRMDTTE             NO, ERROR
         SPACE 3
***********************************************************************
*        VALIDATE AND CONVERT DATE IN FORM YY.DDD                     *
***********************************************************************
PRMDTT1  CLI   6(R7),C' '          END OF DATE
         BE    PRMDTT1A            YES, BRANCH
         CLI   6(R7),C':'          END OF DATE
         BE    PRMDTT1A            YES, BRANCH
         B     PRMDTTE             NO, ERROR
PRMDTT1A MVC   DATEWORK(2),=C'19'  ASSUME 20TH CENTURY
         CLC   0(2,R7),=C'50'      SEE IF YEAR GT 50
         BH    PRMDTT1B            YES, 20TH CENTURY
         MVC   DATEWORK(2),=C'20'  ASSUME 21TH CENTURY
PRMDTT1B MVC   DATEWORK+2(2),0(R7) SAVE YY
         MVC   DATEWORK+4(3),3(R7) SAVE DDD
         LA    R14,7               SET LENGTH TO 7
         LA    R15,DATEWORK        POINT TO START OF YEAR
PRMDTT1C CLI   0(R15),C'0'         TEST FOR LESS THAN ZERO
         BL    PRMDTTE             YES, ERROR
         CLI   0(R15),C'9'         TEST FOR GT NINE
         BH    PRMDTTE             YES, ERROR
         LA    R15,1(,R15)         INDEX TO NEXT CHAR
         BCT   R14,PRMDTT1C        LOOP
PRMDTT1D PACK  DATEJUL,DATEWORK(7) PACK DATE
         CALL  DATERTN,(JG,DATEJUL,DATEGREG) CONVERT DATE
         LTR   R15,R15             TEST RETURN CODE
         BNZ   PRMDTTE             NOT ZERO, INVALID DATE
         LA    R1,6(,R7)           POINT PAST DATE
         B     PRMDTTOK            GET OUT
         SPACE 3
***********************************************************************
*        VALIDATE AND CONVERT DATE IN FORM YYYY.DDD                   *
***********************************************************************
PRMDTT2  CLI   8(R7),C' '          END OF DATE
         BE    PRMDTT2A            YES, BRANCH
         CLI   8(R7),C':'          END OF DATE
         BE    PRMDTT2A            YES, BRANCH
         B     PRMDTTE             NO, ERROR
PRMDTT2A MVC   DATEWORK+0(4),0(R7) SAVE YYYY
         MVC   DATEWORK+4(3),5(R7) SAVE DDD
         LA    R14,7               SET LENGTH TO 7
         LA    R1,DATEWORK         POINT TO START OF YEAR
PRMDTT2B CLI   0(R1),C'0'          TEST FOR LESS THAN ZERO
         BL    PRMDTTE             YES, ERROR
         CLI   0(R1),C'9'          TEST FOR GT NINE
         BH    PRMDTTE             YES, ERROR
         LA    R1,1(,R1)           INDEX TO NEXT CHAR
         BCT   R14,PRMDTT2B        LOOP
PRMDTT2C PACK  DATEJUL,DATEWORK(7) PACK DATE
         CALL  DATERTN,(JG,DATEJUL,DATEGREG) CONVERT DATE
         LTR   R15,R15             TEST RETURN CODE
         BNZ   PRMDTTE             NOT ZERO, INVALID DATE
         LA    R1,8(,R7)           POINT PAST DATE
         B     PRMDTTOK            GET OUT
         SPACE 3
***********************************************************************
*        VALIDATE AND CONVERT DATE IN FORM MM/DD/YY                   *
***********************************************************************
PRMDTT3  CLI   8(R7),C' '          END OF DATE
         BE    PRMDTT3A            YES, BRANCH
         CLI   8(R7),C':'          END OF DATE
         BE    PRMDTT3A            YES, BRANCH
         B     PRMDTTE             NO, ERROR
PRMDTT3A MVC   DATEWORK(2),=C'19'  ASSUME 20TH CENTURY
         CLC   6(2,R7),=C'50'      SEE IF YEAR GT 50
         BH    PRMDTT3B            YES, 20TH CENTURY
         MVC   DATEWORK(2),=C'20'  ASSUME 21TH CENTURY
PRMDTT3B MVC   DATEWORK+2(2),6(R7) SAVE YY
         MVC   DATEWORK+4(2),0(R7) SAVE MM
         MVC   DATEWORK+6(2),3(R7) SAVE DD
         LA    R14,8               SET LENGTH TO 8
         LA    R15,DATEWORK        POINT TO START OF YEAR
PRMDTT3C CLI   0(R15),C'0'         TEST FOR LESS THAN ZERO
         BL    PRMDTTE             YES, ERROR
         CLI   0(R15),C'9'         TEST FOR GT NINE
         BH    PRMDTTE             YES, ERROR
         LA    R15,1(,R15)         INDEX TO NEXT CHAR
         BCT   R14,PRMDTT3C        LOOP
PRMDTT3D PACK  DATEGREG,DATEWORK(8) PACK DATE
         CALL  DATERTN,(GJ,DATEGREG,DATEJUL) CONVERT DATE
         LTR   R15,R15             TEST RETURN CODE
         BNZ   PRMDTTE             NOT ZERO, INVALID DATE
         LA    R1,8(,R7)           POINT PAST DATE
         B     PRMDTTOK            GET OUT
         SPACE 3
***********************************************************************
*        VALIDATE AND CONVERT DATE IN FORM YYYY/MM/DD                 *
***********************************************************************
PRMDTT4  CLI   10(R7),C' '         END OF DATE
         BE    PRMDTT4A            YES, BRANCH
         CLI   10(R7),C':'         END OF DATE
         BE    PRMDTT4A            YES, BRANCH
         B     PRMDTTE             NO, ERROR
PRMDTT4A MVC   DATEWORK+0(4),0(R7) SAVE YYYY
         MVC   DATEWORK+4(2),5(R7) SAVE MM
         MVC   DATEWORK+6(2),8(R7) SAVE DD
         LA    R14,8               SET LENGTH TO 8
         LA    R15,DATEWORK        POINT TO START OF YEAR
PRMDTT4B CLI   0(R15),C'0'         TEST FOR LESS THAN ZERO
         BL    PRMDTTE             YES, ERROR
         CLI   0(R15),C'9'         TEST FOR GT NINE
         BH    PRMDTTE             YES, ERROR
         LA    R15,1(,R15)         INDEX TO NEXT CHAR
         BCT   R14,PRMDTT4B        LOOP
PRMDTT4C PACK  DATEGREG,DATEWORK(8) PACK DATE
         CALL  DATERTN,(GJ,DATEGREG,DATEJUL) CONVERT DATE
         LTR   R15,R15             TEST RETURN CODE
         BNZ   PRMDTTE             NOT ZERO, INVALID DATE
         LA    R1,10(,R7)          POINT PAST DATE
         B     PRMDTTOK            GET OUT
***********************************************************************
*        GOOD DATE                                                    *
***********************************************************************
PRMDTTOK LA    R15,0               SET RETURN CODE TO ZERO
         B     PRMDTTR             GET OUT
***********************************************************************
*        INVALID DATE                                                 *
***********************************************************************
PRMDTTE  LA    R15,8               SET RETURN CODE TO EIGHT
PRMDTTR  LM    R2,R14,SAVEPRMD+8   RESTORE REGS EXCEPT R0, R1, AND R15
         BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY OPEN TIME RANGE                       *
*                                                                     *
*        OTIME=HH.MM:HH.MM                                            *
*                                                                     *
*        THE FIRST HH.MM IS THE START HOUR AND MINUTE TO SELECT       *
*        AND THE OPTIONAL SECOND HH.MM IS THE END HOUR AND            *
*        MINUTE FOR SELECTION BASED UPON THE TIME OF DAY WHEN THE     *
*        DATASET WAS OPENED.  IF ONLY ONE TIME VALUE IS ENTERED       *
*        THE TIME SELECTED IS ANY OPEN TIME GREATER THAN OR           *
*        EQUAL TO THAT TIME.                                          *
*                                                                     *
***********************************************************************
PRMOTME  OI    SWITCH,SELOTIME     TURN ON SELECT TIME INDICATOR
         MVC   VALTIME(5),=CL5'00.00' INITIALIZE TIME
         MVC   VALTIME+5(5),=CL5'99.99' ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   2(R7),C'.'          CHECK FOR HOUR AND MIN SEPARATOR
         BNE   ERROR014            NOT THERE, ERROR
         LA    R14,2               SET LENGTH TO 2
         LR    R1,R7               SAVE POINTER TO BEGIN HOUR
PRMOTME1 CLI   0(R1),C'0'          TEST FOR LESS THAN ZERO
         BL    ERROR014            YES, ERROR
         CLI   0(R1),C'9'          TEST FOR GT NINE
         BH    ERROR014            YES, ERROR
         LA    R1,1(,R1)           INDEX TO NEXT CHAR
         BCT   R14,PRMOTME1        LOOP
         LA    R14,2               SET LENGTH TO 2
         LA    R1,3(R7)            SAVE POINTER TO BEGIN MIN
PRMOTME2 CLI   0(R1),C'0'          TEST FOR LESS THAN ZERO
         BL    ERROR014            YES, ERROR
         CLI   0(R1),C'9'          TEST FOR GT NINE
         BH    ERROR014            YES, ERROR
         LA    R1,1(,R1)           INDEX TO NEXT CHAR
         BCT   R14,PRMOTME2        LOOP
         MVC   VALTIME(5),0(R7)    SAVE BEGIN TIME
         CLI   5(R7),C' '          ANY ENDING TIME?
         BE    PRMOTME6            NO, END OF TIME
         CLI   5(R7),C':'          PROPER SEPARATOR FOR TIME
         BNE   ERROR015            NO, ERROR
PRMOTME3 LA    R7,6(,R7)           INCREMENT PAST BEGIN TIME
         CLI   2(R7),C'.'          CHECK FOR HOUR AND MIN SEPARATOR
         BNE   ERROR016            NOT THERE, ERROR
         LA    R14,2               SET LENGTH TO 2
         LR    R1,R7               SAVE POINTER TO END HOUR
PRMOTME4 CLI   0(R1),C'0'          TEST FOR LESS THAN ZERO
         BL    ERROR016            YES, ERROR
         CLI   0(R1),C'9'          TEST FOR GT NINE
         BH    ERROR016            YES, ERROR
         LA    R1,1(,R1)           INDEX TO NEXT CHAR
         BCT   R14,PRMOTME4        LOOP
         LA    R14,2               SET LENGTH TO 2
         LA    R1,3(R7)            SAVE POINTER TO END MIN
PRMOTME5 CLI   0(R1),C'0'          TEST FOR LESS THAN ZERO
         BL    ERROR016            YES, ERROR
         CLI   0(R1),C'9'          TEST FOR GT NINE
         BH    ERROR016            YES, ERROR
         LA    R1,1(,R1)           INDEX TO NEXT CHAR
         BCT   R14,PRMOTME5        LOOP
         MVC   VALTIME+5(5),0(R7)  SAVE END TIME
PRMOTME6 MVC   WORK(2),VALTIME     MOVE BEGIN HOUR TO WORK
         PACK  DOUBLE,WORK(2)      CONVERT TO PACKED
         CVB   R14,DOUBLE          CONVERT TO BINARY
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         M     R14,=F'360000'      MULTIPLY BY HUNDRETHS PER HOUR
         LR    R1,R15              SAVE VALUE
         MVC   WORK(2),VALTIME+3   MOVE BEGIN MIN TO WORK
         PACK  DOUBLE,WORK(2)      CONVERT TO PACKED
         CVB   R14,DOUBLE          CONVERT TO BINARY
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         M     R14,=F'6000'        MULTIPLY BY HUNDRETHS PER MIN
         AR    R1,R15              ADD HUNDRETHS FOR HRS AND MINS
         ST    R1,TIMES            SAVE START TIME
         MVC   WORK(2),VALTIME+5   MOVE END HOUR TO WORK
         PACK  DOUBLE,WORK(2)      CONVERT TO PACKED
         CVB   R14,DOUBLE          CONVERT TO BINARY
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         M     R14,=F'360000'      MULTIPLY BY HUNDRETHS PER HOUR
         LR    R1,R15              SAVE VALUE
         MVC   WORK(2),VALTIME+8   MOVE END MIN TO WORK
         PACK  DOUBLE,WORK(2)      CONVERT TO PACKED
         CVB   R14,DOUBLE          CONVERT TO BINARY
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         M     R14,=F'6000'        MULTIPLY BY HUNDRETHS PER MIN
         AR    R1,R15              ADD HUNDRETHS FOR HRS AND MINS
         ST    R1,TIMEE            SAVE END TIME
         ICM   R15,B'1111',OTIMETBL LOAD ADDRESS OF TIME TABLE
         BNZ   PRMOTME7            NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=8008         GET ROOM FOR 1000 TIME ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,OTIMETBL        STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMOTME7 SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMOTME8 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMOTME9            YES, GO SAVE NEW ENTRY
         LA    R15,08(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR056            YES, ERROR
         B     PRMOTME8            NO, LOOP
PRMOTME9 MVC   0(04,R15),TIMES     SAVE NEW START TIME ENTRY
         MVC   4(04,R15),TIMEE     SAVE NEW END   TIME ENTRY
         MVI   08(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY CLOSE TIME RANGE                      *
*                                                                     *
*        CTIME=HH.MM:HH.MM                                            *
*                                                                     *
*        THE FIRST HH.MM IS THE START HOUR AND MINUTE TO SELECT       *
*        AND THE OPTIONAL SECOND HH.MM IS THE END HOUR AND            *
*        MINUTE FOR SELECTION BASED UPON THE TIME OF DAY WHEN THE     *
*        DATASET WAS CLOSED.  IF ONLY ONE TIME VALUE IS ENTERED       *
*        THE TIME SELECTED IS ANY CLOSE TIME GREATER THAN OR          *
*        EQUAL TO THAT TIME.                                          *
*                                                                     *
***********************************************************************
PRMCTME  OI    SWITCH,SELCTIME     TURN ON SELECT TIME INDICATOR
         MVC   VALTIME(5),=CL5'00.00' INITIALIZE TIME
         MVC   VALTIME+5(5),=CL5'99.99' ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   2(R7),C'.'          CHECK FOR HOUR AND MIN SEPARATOR
         BNE   ERROR017            NOT THERE, ERROR
         LA    R14,2               SET LENGTH TO 2
         LR    R1,R7               SAVE POINTER TO BEGIN HOUR
PRMCTME1 CLI   0(R1),C'0'          TEST FOR LESS THAN ZERO
         BL    ERROR017            YES, ERROR
         CLI   0(R1),C'9'          TEST FOR GT NINE
         BH    ERROR017            YES, ERROR
         LA    R1,1(,R1)           INDEX TO NEXT CHAR
         BCT   R14,PRMCTME1        LOOP
         LA    R14,2               SET LENGTH TO 2
         LA    R1,3(R7)            SAVE POINTER TO BEGIN MIN
PRMCTME2 CLI   0(R1),C'0'          TEST FOR LESS THAN ZERO
         BL    ERROR017            YES, ERROR
         CLI   0(R1),C'9'          TEST FOR GT NINE
         BH    ERROR017            YES, ERROR
         LA    R1,1(,R1)           INDEX TO NEXT CHAR
         BCT   R14,PRMCTME2        LOOP
         MVC   VALTIME(5),0(R7)    SAVE BEGIN TIME
         CLI   5(R7),C' '          ANY ENDING TIME?
         BE    PRMCTME6            NO, END OF TIME
         CLI   5(R7),C':'          PROPER SEPARATOR FOR TIME
         BNE   ERROR018            NO, ERROR
PRMCTME3 LA    R7,6(,R7)           INCREMENT PAST BEGIN TIME
         CLI   2(R7),C'.'          CHECK FOR HOUR AND MIN SEPARATOR
         BNE   ERROR019            NOT THERE, ERROR
         LA    R14,2               SET LENGTH TO 2
         LR    R1,R7               SAVE POINTER TO END HOUR
PRMCTME4 CLI   0(R1),C'0'          TEST FOR LESS THAN ZERO
         BL    ERROR019            YES, ERROR
         CLI   0(R1),C'9'          TEST FOR GT NINE
         BH    ERROR019            YES, ERROR
         LA    R1,1(,R1)           INDEX TO NEXT CHAR
         BCT   R14,PRMCTME4        LOOP
         LA    R14,2               SET LENGTH TO 2
         LA    R1,3(R7)            SAVE POINTER TO END MIN
PRMCTME5 CLI   0(R1),C'0'          TEST FOR LESS THAN ZERO
         BL    ERROR019            YES, ERROR
         CLI   0(R1),C'9'          TEST FOR GT NINE
         BH    ERROR019            YES, ERROR
         LA    R1,1(,R1)           INDEX TO NEXT CHAR
         BCT   R14,PRMCTME5        LOOP
         MVC   VALTIME+5(5),0(R7)  SAVE END TIME
PRMCTME6 MVC   WORK(2),VALTIME     MOVE BEGIN HOUR TO WORK
         PACK  DOUBLE,WORK(2)      CONVERT TO PACKED
         CVB   R14,DOUBLE          CONVERT TO BINARY
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         M     R14,=F'360000'      MULTIPLY BY HUNDRETHS PER HOUR
         LR    R1,R15              SAVE VALUE
         MVC   WORK(2),VALTIME+3   MOVE BEGIN MIN TO WORK
         PACK  DOUBLE,WORK(2)      CONVERT TO PACKED
         CVB   R14,DOUBLE          CONVERT TO BINARY
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         M     R14,=F'6000'        MULTIPLY BY HUNDRETHS PER MIN
         AR    R1,R15              ADD HUNDRETHS FOR HRS AND MINS
         ST    R1,TIMES            SAVE START TIME
         MVC   WORK(2),VALTIME+5   MOVE END HOUR TO WORK
         PACK  DOUBLE,WORK(2)      CONVERT TO PACKED
         CVB   R14,DOUBLE          CONVERT TO BINARY
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         M     R14,=F'360000'      MULTIPLY BY HUNDRETHS PER HOUR
         LR    R1,R15              SAVE VALUE
         MVC   WORK(2),VALTIME+8   MOVE END MIN TO WORK
         PACK  DOUBLE,WORK(2)      CONVERT TO PACKED
         CVB   R14,DOUBLE          CONVERT TO BINARY
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         M     R14,=F'6000'        MULTIPLY BY HUNDRETHS PER MIN
         AR    R1,R15              ADD HUNDRETHS FOR HRS AND MINS
         ST    R1,TIMEE            SAVE END TIME
         ICM   R15,B'1111',CTIMETBL LOAD ADDRESS OF TIME TABLE
         BNZ   PRMCTME7            NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=8008         GET ROOM FOR 1000 TIME ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,CTIMETBL        STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMCTME7 SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMCTME8 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMCTME9            YES, GO SAVE NEW ENTRY
         LA    R15,08(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR020            YES, ERROR
         B     PRMCTME8            NO, LOOP
PRMCTME9 MVC   0(04,R15),TIMES     SAVE NEW START TIME ENTRY
         MVC   4(04,R15),TIMEE     SAVE NEW END   TIME ENTRY
         MVI   08(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY SYSTEM ID                             *
*                                                                     *
*        SYSTEM=SSSS                                                  *
*                                                                     *
*        WHERE SSSS IS THE SMF SYSTEM ID.  THIS FIELD ONLY HAS        *
*        MEANING IF THE INPUT SMF DATA HAS COME FROM MULTIPLE         *
*        MVS SYSTEMS.                                                 *
*                                                                     *
***********************************************************************
PRMSYS   OI    SWITCH,SELSYSID     TURN ON SELECT SYSID INDICATOR
         MVC   VALSYSID,=CL4' '    INITIALIZE SYSID
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE SYSID NOT BLANK
         BE    ERROR021            NOT THERE, ERROR
         MVC   VALSYSID(4),0(R7)   SAVE SYS ID
PRMSYS1  ICM   R15,B'1111',SYSIDTBL LOAD ADDRESS OF SYSID TABLE
         BNZ   PRMSYS2             NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=4004         GET ROOM FOR 1000 SYSID ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,SYSIDTBL        STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMSYS2  SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMSYS3  CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMSYS4             YES, GO SAVE NEW ENTRY
         LA    R15,04(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR057            YES, ERROR
         B     PRMSYS3             NO, LOOP
PRMSYS4  MVC   0(04,R15),VALSYSID  SAVE NEW ENTRY
         MVI   04(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY DATASET NAME                          *
*                                                                     *
*        DSN=DDDDDDDD                                                 *
*                                                                     *
*        INSURE THAT THE DATASET NAME IS 1 TO 44 CHARACTERS LONG      *
*        SAVING THE LENGTH FOR A GENERIC COMPARE.                     *
*                                                                     *
***********************************************************************
PRMDSN   OI    SWITCH+4,SELDSN     TURN ON SELECT DATASET NAME IND
         MVC   VALDSN(2),=X'0000'  INITIALIZE DSNAME
         MVC   VALDSN+2(44),=CL44' '    ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE DSNAME NOT BLANK
         BE    ERROR044            NOT THERE, ERROR
         SLR   R15,R15             SET LENGTH TO 0
PRMDSN1  CLI   0(R7),C' '          END OF DSNAME
         BE    PRMDSN2             YES, BRANCH
         LA    R7,1(,R7)           INDEX TO NEXT CHAR
         LA    R15,1(,R15)         ADD 1 TO LENGTH
         B     PRMDSN1             LOOP
PRMDSN2  CH    R15,=H'44'          SEE IF EXCEEDS MAX LENGTH
         BH    ERROR044            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         STH   R15,VALDSN          SAVE LENGTH OF DATASET NAME
         MVC   VALDSN+2(44),0(R1)  SAVE DATASET NAME
PRMDSN3  ICM   R15,B'1111',DSNTBL  LOAD ADDRESS OF DSN TABLE
         BNZ   PRMDSN4             NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=46046        GET ROOM FOR 1000 DSN ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,DSNTBL          STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMDSN4  SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMDSN5  CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMDSN6             YES, GO SAVE NEW ENTRY
         LA    R15,46(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR058            YES, ERROR
         B     PRMDSN5             NO, LOOP
PRMDSN6 MVC    0(46,R15),VALDSN    SAVE NEW ENTRY
         MVI   46(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY DD NAME                               *
*                                                                     *
*        DDN=FFFFFFFF                                                 *
*                                                                     *
*        INSURE THAT THE DD NAME IS A 1 TO 8 CHARACTERS LONG          *
*        SAVING THE LENGTH FOR A GENERIC COMPARE.                     *
*                                                                     *
***********************************************************************
PRMDDN   OI    SWITCH+4,SELDDN     TURN ON SELECT DD NAME IND
         MVC   VALDDN(2),=X'0000'  INITIALIZE DDNAME
         MVC   VALDDN+2(8),=CL8' '     ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE DDNAME NOT BLANK
         BE    ERROR045            NOT THERE, ERROR
         SLR   R15,R15             SET LENGTH TO 0
PRMDDN1  CLI   0(R7),C' '          END OF DDNAME
         BE    PRMDDN2             YES, BRANCH
         LA    R7,1(,R7)           INDEX TO NEXT CHAR
         LA    R15,1(,R15)         ADD 1 TO LENGTH
         B     PRMDDN1             LOOP
PRMDDN2  CH    R15,=H'8'           SEE IF EXCEEDS MAX LENGTH
         BH    ERROR045            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         STH   R15,VALDDN          SAVE LENGTH OF DD NAME
         MVC   VALDDN+2(8),0(R1)   SAVE DD NAME
PRMDDN3  ICM   R15,B'1111',DDNTBL  LOAD ADDRESS OF DDN TABLE
         BNZ   PRMDDN4             NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=10010        GET ROOM FOR 1000 DDN ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,DDNTBL          STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMDDN4  SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMDDN5  CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMDDN6             YES, GO SAVE NEW ENTRY
         LA    R15,10(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR059            YES, ERROR
         B     PRMDDN5             NO, LOOP
PRMDDN6  MVC   0(10,R15),VALDDN    SAVE NEW ENTRY
         MVI   10(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY ACCESS TYPE                           *
*                                                                     *
*        ACCESS=TYPE                                                  *
*                                                                     *
*        INSURE THAT TYPE IS "O" FOR OUTPUT, "I" FOR INPUT, OR        *
*        "A" FOR ALL                                                  *
*                                                                     *
***********************************************************************
PRMACC   OI    SWITCH+4,SELACC     TURN ON SELECT BY ACC TYPE IND
         MVI   VALACC,C' '         INITIALIZE ACCESS TYPE ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE ACCESS TYPE NOT BLANK
         BE    ERROR029            NOT THERE, ERROR
         SLR   R15,R15             SET LENGTH TO 0
PRMACC1  CLI   0(R7),C' '          END OF TYPE
         BE    PRMACC2             YES, BRANCH
         LA    R7,1(,R7)           INDEX TO NEXT CHAR
         LA    R15,1(,R15)         ADD 1 TO LENGTH
         B     PRMACC1             LOOP
PRMACC2  CH    R15,=H'1'           SEE IF EXCEEDS MAX LENGTH
         BH    ERROR029            YES, ERROR
         CLI   0(R1),C'I'          SEE IF INPUT
         BE    PRMACC3             YES, BRANCH
         CLI   0(R1),C'O'          SEE IF OUTPUT
         BE    PRMACC3             YES, BRANCH
         CLI   0(R1),C'A'          SEE IF ALL
         BNE   ERROR029            NO, ERROR
PRMACC3  MVC   VALACC,0(R1)        SAVE ACCESS TYPE
PRMACC4  ICM   R15,B'1111',ACCTBL  LOAD ADDRESS OF ACCESS TYPE TABLE
         BNZ   PRMACC5             NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=1001         GET ROOM FOR 1000 ACCESS TYPE ENTS
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,ACCTBL          STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMACC5  SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMACC6  CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMACC7             YES, GO SAVE NEW ENTRY
         LA    R15,01(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR060            YES, ERROR
         B     PRMACC6             NO, LOOP
PRMACC7  MVC   0(1,R15),VALACC     SAVE NEW ENTRY
         MVI   01(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY UNIT TYPE                             *
*                                                                     *
*        UNIT=UUUU                                                    *
*                                                                     *
*        INSURE THAT UNIT IS "DISK", "TAPE", OR "ALL"                 *
*                                                                     *
***********************************************************************
PRMUNIT  OI    SWITCH+4,SELUNIT    TURN ON SELECT BY UNIT IND
         MVC   VALUNIT,=CL4' '     INITIALIZE UNIT TYPE ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE UNIT NOT BLANK
         BE    ERROR036            NOT THERE, ERROR
         SLR   R15,R15             SET LENGTH TO 0
PRMUNIT1 CLI   0(R7),C' '          END OF UNIT NAME
         BE    PRMUNIT2            YES, BRANCH
         LA    R7,1(,R7)           INDEX TO NEXT CHAR
         LA    R15,1(,R15)         ADD 1 TO LENGTH
         B     PRMUNIT1            LOOP
PRMUNIT2 CH    R15,=H'4'           SEE IF EXCEEDS MAX LENGTH
         BH    ERROR036            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         MVC   VALUNIT,=CL4'ALL '  ASSUME ALL UNITS
         EX    R15,CLCUNIT1        SEE IF MATCH ON UNIT TYPE
         BE    PRMUNIT3            YES, BRANCH
         MVC   VALUNIT,=CL4'DISK'  ASSUME DISK UNITS
         EX    R15,CLCUNIT2        SEE IF MATCH ON UNIT TYPE
         BE    PRMUNIT3            YES, BRANCH
         MVC   VALUNIT,=CL4'TAPE'  ASSUME TAPE UNITS
         EX    R15,CLCUNIT3        SEE IF MATCH ON UNIT TYPE
         BNE   ERROR036            NO, ERROR
PRMUNIT3 ICM   R15,B'1111',UNITTBL LOAD ADDRESS OF UNIT TYPE TABLE
         BNZ   PRMUNIT4            NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=4004         GET ROOM FOR 1000 UNIT TYPE ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,UNITTBL         STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMUNIT4 SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMUNIT5 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMUNIT6            YES, GO SAVE NEW ENTRY
         LA    R15,04(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR061            YES, ERROR
         B     PRMUNIT5            NO, LOOP
PRMUNIT6 MVC   0(4,R15),VALUNIT    SAVE NEW ENTRY
         MVI   04(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 1
CLCUNIT1 CLC   0(0,R1),=C'ALL '    **** EXEC ONLY ****
CLCUNIT2 CLC   0(0,R1),=C'DISK'    **** EXEC ONLY ****
CLCUNIT3 CLC   0(0,R1),=C'TAPE'    **** EXEC ONLY ****
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY VOLSER                                *
*                                                                     *
*        VOL=VVVVVV                                                   *
*                                                                     *
*        INSURE THAT THE DD NAME IS A 1 TO 6 CHARACTERS LONG          *
*        SAVING THE LENGTH FOR A GENERIC COMPARE.                     *
*                                                                     *
***********************************************************************
PRMVOL   OI    SWITCH+4,SELVOL     TURN ON SELECT VOLSER IND
         MVC   VALVOL(2),=X'0000'  INITIALIZE VOLUME
         MVC   VALVOL+2(6),=CL6' '     ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE VOLSER NOT BLANK
         BE    ERROR034            NOT THERE, ERROR
         SLR   R15,R15             SET LENGTH TO 0
PRMVOL1  CLI   0(R7),C' '          END OF VOLSER
         BE    PRMVOL2             YES, BRANCH
         LA    R7,1(,R7)           INDEX TO NEXT CHAR
         LA    R15,1(,R15)         ADD 1 TO LENGTH
         B     PRMVOL1             LOOP
PRMVOL2  CH    R15,=H'6'           SEE IF EXCEEDS MAX LENGTH
         BH    ERROR034            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         STH   R15,VALVOL          SAVE LENGTH OF VOLSER
         MVC   VALVOL+2(6),0(R1)   SAVE VOLSER
PRMVOL3  ICM   R15,B'1111',VOLTBL  LOAD ADDRESS OF VOL TABLE
         BNZ   PRMVOL4             NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=8008         GET ROOM FOR 1000 VOL ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,VOLTBL          STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMVOL4  SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMVOL5  CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMVOL6             YES, GO SAVE NEW ENTRY
         LA    R15,08(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR062            YES, ERROR
         B     PRMVOL5             NO, LOOP
PRMVOL6  MVC   0(08,R15),VALVOL    SAVE NEW ENTRY
         MVI   08(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY DATASET ORGANIZATION                  *
*                                                                     *
*        DSORG=DDD                                                    *
*                                                                     *
*        INSURE THAT DSORG IS EITHER SEQ, PDS, OR ALL                 *
*                                                                     *
***********************************************************************
PRMDSO   OI    SWITCH+3,SELDSO     TURN ON SELECT BY DSORG
         MVC   VALDSO(3),=CL3' '   INITIALIZE DSORG ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE DSORG NOT BLANK
         BE    ERROR027            NOT THERE, ERROR
         SLR   R15,R15             SET LENGTH TO 0
PRMDSO1  MVC   VALDSO,0(R1)        SAVE DSORG
         CLC   VALDSO,=C'SEQ'      SEE IF SEQUENTIAL
         BE    PRMDSO2             YES, BRANCH
         CLC   VALDSO,=C'PDS'      SEE IF PARTITIONED
         BE    PRMDSO2             YES, BRANCH
         CLC   VALDSO,=C'DA '      SEE IF DIRECT
         BE    PRMDSO2             YES, BRANCH
         CLC   VALDSO,=C'IS '      SEE IF INDEXED
         BE    PRMDSO2             YES, BRANCH
         CLC   VALDSO,=C'VS '      SEE IF VSAM
         BE    PRMDSO2             YES, BRANCH
         CLC   VALDSO,=C'UNK'      SEE IF UNKNOWN
         BE    PRMDSO2             YES, BRANCH
         CLC   VALDSO,=C'ALL'      SEE IF ALL
         BNE   ERROR027            NO, ERROR
PRMDSO2  ICM   R15,B'1111',DSORGTBL LOAD ADDRESS OF DSORG TABLE
         BNZ   PRMDSO3             NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=3003         GET ROOM FOR 1000 DSORG ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,DSORGTBL        STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMDSO3  SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMDSO4  CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMDSO5             YES, GO SAVE NEW ENTRY
         LA    R15,03(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR063            YES, ERROR
         B     PRMDSO4             NO, LOOP
PRMDSO5  MVC   0(03,R15),VALDSO    SAVE NEW ENTRY
         MVI   03(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY RECORD FORMAT                         *
*                                                                     *
*        RECFM=RRR                                                    *
*                                                                     *
*        INSURE THAT RECFM IS A VALID VALUE                           *
*                                                                     *
***********************************************************************
PRMRFM   OI    SWITCH+4,SELRFM     TURN ON SELECT BY RECFM IND
         MVC   VALRFM(3),=CL3' '   INITIALIZE RECFM ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE RECFM NOT BLANK
         BE    ERROR035            NOT THERE, ERROR
         SLR   R15,R15             SET LENGTH TO 0
PRMRFM1  CLI   0(R7),C' '          END OF RECFM
         BE    PRMRFM2             YES, BRANCH
         LA    R7,1(,R7)           INDEX TO NEXT CHAR
         LA    R15,1(,R15)         ADD 1 TO LENGTH
         B     PRMRFM1             LOOP
PRMRFM2  CH    R15,=H'3'           SEE IF EXCEEDS MAX LENGTH
         BH    ERROR035            YES, ERROR
PRMRFM3  MVC   VALRFM,0(R1)        SAVE RECFM
         LA    R15,RFMTBL          LOAD START ADDRESS OF TABLE
PRMRFM4  CLI   0(R15),X'FF'        END OF TABLE
         BE    ERROR035            YES, ERROR
         CLC   VALRFM,0(R15)       SEE IF MATCH ON RECFM VALUE
         BE    PRMRFM5             YES, BRANCH
         LA    R15,3(,R15)         INCREMENT TO NEXT RECFM ENTRY
         B     PRMRFM4             LOOP
PRMRFM5  ICM   R15,B'1111',RECFMTBL LOAD ADDRESS OF RECFM TABLE
         BNZ   PRMRFM6             NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=3003         GET ROOM FOR 1000 RECFM ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,RECFMTBL        STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMRFM6  SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMRFM7  CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMRFM8             YES, GO SAVE NEW ENTRY
         LA    R15,03(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR064            YES, ERROR
         B     PRMRFM7             NO, LOOP
PRMRFM8  MVC   0(03,R15),VALRFM    SAVE NEW ENTRY
         MVI   03(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
RFMTBL   DC    CL3'F  '
         DC    CL3'FB '
         DC    CL3'FA '
         DC    CL3'FM '
         DC    CL3'FBA'
         DC    CL3'FBM'
         DC    CL3'V  '
         DC    CL3'VB '
         DC    CL3'VA '
         DC    CL3'VM '
         DC    CL3'VBA'
         DC    CL3'VBM'
         DC    CL3'VBS'
         DC    CL3'U  '
         DC    3X'FF'
         EJECT
***********************************************************************
*                                                                     *
*                   SELECT BY LRECL                                   *
*                                                                     *
*        LRECL>NNNNN                                                  *
*        LRECL<NNNNN                                                  *
*                                                                     *
*        INSURE THAT THE LOGICAL RECORD LENGTH IS A NUMERIC           *
*        FIELD FROM 1 TO 5 DIGITS LONG                                *
*                                                                     *
***********************************************************************
PRMLRL   CLI   0(R7),C' '          MAKE SURE NOT BLANK
         BE    ERROR038            NOT THERE, ERROR
         CLI   0(R7),C'>'          SEE IF GE OPERATOR
         BE    PRMLRL1             YES, BRANCH
         CLI   0(R7),C'<'          SEE IF LE OPERATOR
         BE    PRMLRL4             YES, BRANCH
         B     ERROR032            NO, ERROR
PRMLRL1  OI    SWITCH+2,SELLRLGE   TURN ON SELECT LRECL GE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,5+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMLRL2  CLI   0(R7),C' '          END OF LRECL?
         BE    PRMLRL3             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR038            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR038            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMLRL2         LOOP
         B     ERROR038            TOO LONG ERROR
PRMLRL3  BCTR  R15,0               MAKE LENGTH OF LRECL REL ZERO
         EX    R15,PACKINDX        PACK LRECL
         CVB   R15,DOUBLE          CONVERT TO BINARY
         C     R15,=F'32767'       SEE IF IT EXCEEDS MAX
         BH    ERROR038            YES, ERROR
         STH   R15,VALLRGE         SAVE LRECL GE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
PRMLRL4  OI    SWITCH+2,SELLRLLE   TURN ON SELECT LRECL LE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,5+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMLRL5  CLI   0(R7),C' '          END OF LRECL?
         BE    PRMLRL6             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR038            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR038            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMLRL5         LOOP
         B     ERROR038            TOO LONG ERROR
PRMLRL6  BCTR  R15,0               MAKE LENGTH OF LRECL REL ZERO
         EX    R15,PACKINDX        PACK LRECL
         CVB   R15,DOUBLE          CONVERT TO BINARY
         C     R15,=F'32767'       SEE IF IT EXCEEDS MAX
         BH    ERROR038            YES, ERROR
         STH   R15,VALLRLE         SAVE LRECL LE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                   SELECT BY BLKSIZE                                 *
*                                                                     *
*        BLKSIZE>NNNNN                                                *
*        BLKSIZE<NNNNN                                                *
*                                                                     *
*        INSURE THAT THE PHYSICAL BLOCK LENGTH IS A NUMERIC           *
*        FIELD FROM 1 TO 5 DIGITS LONG                                *
*                                                                     *
***********************************************************************
PRMBSZ   CLI   0(R7),C' '          MAKE SURE NOT BLANK
         BE    ERROR037            NOT THERE, ERROR
         CLI   0(R7),C'>'          SEE IF GE OPERATOR
         BE    PRMBSZ1             YES, BRANCH
         CLI   0(R7),C'<'          SEE IF LE OPERATOR
         BE    PRMBSZ4             YES, BRANCH
         B     ERROR032            NO, ERROR
PRMBSZ1  OI    SWITCH+2,SELBSZGE   TURN ON SELECT BLKSIZE GE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,5+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMBSZ2  CLI   0(R7),C' '          END OF BLKSIZE?
         BE    PRMBSZ3             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR037            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR037            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMBSZ2         LOOP
         B     ERROR037            TOO LONG ERROR
PRMBSZ3  BCTR  R15,0               MAKE LENGTH OF BLKSIZE REL ZERO
         EX    R15,PACKINDX        PACK BLKSIZE
         CVB   R15,DOUBLE          CONVERT TO BINARY
         C     R15,=F'32767'       SEE IF IT EXCEEDS MAX
         BH    ERROR037            YES, ERROR
         STH   R15,VALBSZGE        SAVE BLKSIZE GE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
PRMBSZ4  OI    SWITCH+2,SELBSZLE   TURN ON SELECT BLKSIZE LE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,5+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMBSZ5  CLI   0(R7),C' '          END OF BLKSIZE?
         BE    PRMBSZ6             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR037            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR037            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMBSZ5         LOOP
         B     ERROR037            TOO LONG ERROR
PRMBSZ6  BCTR  R15,0               MAKE LENGTH OF BLKSIZE REL ZERO
         EX    R15,PACKINDX        PACK BLKSIZE
         CVB   R15,DOUBLE          CONVERT TO BINARY
         C     R15,=F'32767'       SEE IF IT EXCEEDS MAX
         BH    ERROR037            YES, ERROR
         STH   R15,VALBSZLE        SAVE BLKSIZE LE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY BLOCK COUNT                           *
*                                                                     *
*        EXCP>NNNNNNNNN                                               *
*        EXCP<NNNNNNNNN                                               *
*                                                                     *
*        INSURE THAT THE BLOCK COUNT IS A NUMERIC FIELD FROM          *
*        1 TO 9 DIGITS LONG.                                          *
*                                                                     *
***********************************************************************
PRMBC    CLI   0(R7),C' '          MAKE SURE NOT BLANK
         BE    ERROR040            NOT THERE, ERROR
         CLI   0(R7),C'>'          SEE IF GE OPERATOR
         BE    PRMBC1              YES, BRANCH
         CLI   0(R7),C'<'          SEE IF LE OPERATOR
         BE    PRMBC4              YES, BRANCH
         B     ERROR032            NO, ERROR
PRMBC1   OI    SWITCH+2,SELBCGE    TURN ON SELECT BLK CNT GE INDICATOR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,9+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMBC2   CLI   0(R7),C' '          END OF COUNT?
         BE    PRMBC3              YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR040            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR040            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMBC2          LOOP
         B     ERROR040            TOO LONG ERROR
PRMBC3   BCTR  R15,0               MAKE LENGTH OF BLK COUNT REL ZERO
         EX    R15,PACKINDX        PACK BLOCK COUNT
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALBCGE         SAVE BLOCK COUNT GE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
PRMBC4   OI    SWITCH+2,SELBCLE    TURN ON SELECT BLK CNT GE INDICATOR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,9+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMBC5   CLI   0(R7),C' '          END OF BLOCK COUNT?
         BE    PRMBC6              YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR040            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR040            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMBC5          LOOP
         B     ERROR040            TOO LONG ERROR
PRMBC6   BCTR  R15,0               MAKE LENGTH OF BLOCK COUNT REL ZERO
         EX    R15,PACKINDX        PACK BLOCK COUNT
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALBCLE         SAVE BLOCK COUNT LE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY JOB TYPE                              *
*                                                                     *
*        JOBTYPE=T/P                                                  *
*                                                                     *
*        INSURE THAT JOBTYPE = T/P (TEST/PRODUCTION)                  *
*                                                                     *
***********************************************************************
PRMTYP   OI    SWITCH+3,SELTYPE    TURN ON SELECT BY TYPE INDICATOR
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE TYPE NOT BLANK
         BE    ERROR042            NOT THERE, ERROR
         CLI   1(R7),C' '          MAKE SURE 1 CHARACTER JOB TYPE
         BNE   ERROR042            NO, ERROR
         CLI   0(R7),C'T'          SEE IF VALID VALUE
         BE    PRMTYP1             YES, BRANCH
         CLI   0(R7),C'P'          SEE IF VALID VALUE
         BNE   ERROR042            NO, ERROR
PRMTYP1  MVC   VALTYPE(1),0(R1)    SAVE JOB TYPE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     HONOR A STOP COUNT                              *
*                                                                     *
*        STOPAFTER=NNNNNNNNN                                          *
*                                                                     *
*        INSURE THAT NNNNNNNNN IS A 1 TO NINE DIGIT NUMBER            *
*                                                                     *
***********************************************************************
PRMSTC   OI    SWITCH+3,SELSTCNT   TURN ON STOP COUNT ENTERED IND
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE TYPE NOT BLANK
         BE    ERROR043            NOT THERE, ERROR
         LA    R14,9+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMSTC1  CLI   0(R7),C' '          END OF PARM?
         BE    PRMSTC2             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR043            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR043            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMSTC1         LOOP
         B     ERROR043            TOO LONG ERROR
PRMSTC2  BCTR  R15,0               MAKE LENGTH OF STOP CNT REL ZERO
         EX    R15,PACKINDX        PACK STOP COUNT
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALSTCNT        SAVE STOP COUNT VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                      ENTER SORT CRITERIA                            *
*                                                                     *
*        SORT=A,B,C,D,E                                               *
*                                                                     *
*        THIS ROUTINE WILL VALIDATE THE LIST OF SORT OPTIONS AND      *
*        GENERATE SORT CONTROL STATEMENTS AND CALL SORT.              *
*                                                                     *
***********************************************************************
PRMSORT OI     SWITCH,SELSORT      TURN ON SELECT SORT INDICATOR
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE SORT SUBPARAMETERS PRESENT
         BE    ERROR022            NONE, ERROR
         LA    R14,SRTFLDS         LOAD ADDRESS OF SORT FIELDS CARD
         SLR   R15,R15             CLEAR COUNTER REG
PRMSORT1 CH    R15,=H'5'           HAVE WE ALREADY PROCESSED 5 PARMS
         BNL   ERROR023            YES, ERROR
         SLR   R3,R3               SET LENGTH TO ZERO
PRMSORT2 CLI   0(R7),C' '          END OF SORT PARM
         BE    PRMSORT3            YES, BRANCH
         CLI   0(R7),C','          END OF SORT PARM
         BE    PRMSORT3            YES, BRANCH
         CLI   0(R7),C'('          END OF SORT PARM
         BE    PRMSORT3            YES, BRANCH
         LA    R3,1(,R3)           ADD 1 TO LENGTH FIELD
         LA    R7,1(,R7)           INCREMENT TO NEXT CHAR OF PARM
         B     PRMSORT2            LOOP
PRMSORT3 LTR   R3,R3               TEST LENGTH
         BZ    ERROR026            ZERO, ERROR
         BCTR  R3,0                MAKE MACHINE LENGTH
         L     R4,=V(OPTKEY)       LOAD ADDRESS OF SORT KEYWORD TBL
PRMSORT4 CLI   0(R4),X'FF'         END OF TABLE
         BE    ERROR024            YES, ERROR, INVALID KEYWORD
         CH    R3,0(R4)            SEE IF LENGTH LT MINIMUM LENGTH
         BL    PRMSORT5            YES, BRANCH
         EX    R3,COMPSPRM         COMPARE SORT PARM
         BE    PRMSORT6            MATCH, BRANCH
PRMSORT5 LA    R4,34(,R4)          INCREMENT TO NEXT TABLE ENTRY
         B     PRMSORT4            LOOP
PRMSORT6 CLI   17(R4),C'Y'         SEE IF ELIGIBLE SORT OPTION
         BNE   ERROR024            NO, ERROR
         MVC   0(11,R14),22(R4)    MOVE SORT PARM FROM TABLE
         CLC   0(3,R7),=C'(D)'     SEE IF FOLLOWED BY "(D)"
         BNE   *+12                NO, BRANCH
         MVI   9(R14),C'D'         SET TO DESCENDING
         LA    R7,3(,R7)           INCREMENT PAST "(D)"
         CLC   0(3,R7),=C'(A)'     SEE IF FOLLOWED BY "(A)"
         BNE   *+8                 NO, BRANCH
         LA    R7,3(,R7)           INCREMENT PAST "(A)"
         LA    R14,11(,R14)        INCREMENT TO NEXT SORT FIELDS SLOT
         LA    R15,1(,R15)         ADD 1 TO FIELDS COUNTER
         CLI   0(R7),C' '          END OF SUBPARAMETERS?
         BE    PRMSORT7            YES, BRANCH
         CLI   0(R7),C','          PROPER SUBPARAMETER SEPARATOR?
         BNE   ERROR025            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST ','
         LR    R1,R7               SET START OF NEXT SUBPARM
         B     PRMSORT1            GO GET NEXT SORT SUBPARAMETER
PRMSORT7 BCTR  R14,0               BACK UP POINTER TO SORT FIELDS CARD
         MVI   0(R14),C')'         PUT CLOSING PARENS ARND SORT FIELDS
         B     PRMEND              GO GET NEXT OPTION CARD
COMPSPRM CLC   0(0,R1),4(R4)       **** EXECUTE ONLY ****
         SPACE 3
***********************************************************************
*                                                                     *
*        DETERMINE LENGTH OF THE PRINT OPTION AND THEN SEARCH         *
*        A KEYWORD TABLE TO FIND A MATCH AND ROUTINE INDEX.           *
*                                                                     *
***********************************************************************
PRMPRT   OI    SWITCH+4,SELPRINT   TURN IF PRINT OPTION SPECIFIED
         LR    R1,R7               SAVE RECORD ADDRESS
         SLR   R15,R15             CLEAR COUNTER REG
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE PRINT PARMS PRESENT
         BE    ERROR053            NONE, ERROR
PRMPRT1  SLR   R3,R3               SET LENGTH TO ZERO
PRMPRT2  CLI   0(R7),C' '          END OF PARM
         BE    PRMPRT3             YES, BRANCH
         CLI   0(R7),C','          END OF PARM
         BE    PRMPRT3             YES, BRANCH
         LA    R3,1(,R3)           ADD 1 TO LENGTH FIELD
         LA    R7,1(,R7)           INCREMENT TO NEXT CHAR OF PARM
         B     PRMPRT2             LOOP
PRMPRT3  LTR   R3,R3               TEST LENGTH
         BZ    ERROR049            ZERO, ERROR
         BCTR  R3,0                MAKE MACHINE LENGTH
         L     R4,=V(OPTKEY)       LOAD ADDRESS OF OPTIONS KEYWORD TBL
PRMPRT4  CLI   0(R4),X'FF'         END OF TABLE
         BE    ERROR050            YES, ERROR, INVALID KEYWORD
         CH    R3,0(R4)            SEE IF LENGTH LT MINIMUM LENGTH
         BL    PRMPRT5             YES, BRANCH
         EX    R3,COMPOKEY         COMPARE OPTION KEYWORD
         BE    PRMPRT6             MATCH, BRANCH
PRMPRT5  LA    R4,34(,R4)          INCREMENT TO NEXT TABLE ENTRY
         B     PRMPRT4             LOOP
PRMPRT6  CLI   18(R4),C'Y'         SEE IF ELIGIBLE PRINT OPTION
         BNE   ERROR050            NO, ERROR
***********************************************************************
*                                                                     *
*        FIND THE NEXT OPEN ENTRY IN THE PRINT OPTION TABLE.          *
*                                                                     *
***********************************************************************
         L     R1,=V(PRTOPT)       LOAD START ADDRESS OF TABLE
PRMPRT7  CLI   0(R1),C'N'          SEE IF EMPTY ENTRY
         BE    PRMPRT8             YES, BRANCH
         CLI   0(R1),X'FF'         PHYSICAL END OF TABLE
         BE    ERROR051            YES, ERROR
         LA    R1,6(,R1)           INCREMENT TO NEXT TABLE ENTRY
         B     PRMPRT7             LOOP
         SPACE 3
***********************************************************************
*                                                                     *
*        SET THE PRINT OPTION IN THE PRINT OPTION TABLE               *
*                                                                     *
*        REG 1 POINTS TO A NEW PRINT OPTION TABLE ENTRY               *
*        REG 4 POINTS TO THE OPTION TABLE ENTRY                       *
*                                                                     *
***********************************************************************
PRMPRT8  MVI   0(R1),C'Y'          TURN ON PRINT INDICATOR
         LH    R15,2(R4)           LOAD OPTION INDEX FROM TABLE
         STH   R15,4(R1)           SAVE INDEX IN PRINT OPTION TABLE
         CLI   0(R7),C' '          END OF SUBPARAMETERS?
         BE    PRMEND              YES, GO GET NEXT OPTION CARD
         CLI   0(R7),C','          PROPER SUBPARAMETER SEPARATOR?
         BNE   ERROR052            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST ','
         LR    R1,R7               SET START OF NEXT SUBPARM
         B     PRMPRT1             GO GET NEXT PRINT SUBPARAMETER
         SPACE 3
***********************************************************************
*                                                                     *
*                       EXCLUDE BY JOBNAME                            *
*                                                                     *
*        EXJOBNAME=JJJJJJJJ(NN)                                       *
*                                                                     *
*        INSURE THAT THE PARM IS EXACTLY 1 TO EIGHT ALPHANUMERIC      *
*        CHARACTERS LONG.  THE OPTIONAL INDEX VALUE CAN BE            *
*        SPECIFIED WITHIN PARENTHESIS TO SPECIFY THE OFFSET           *
*        WITHIN THE ACTUAL JOBNAME THAT THE SPECIFIED "JOBNAME"       *
*        IS SUPPOSED TO START.  THE OPTIONAL INDEX VALUE MUST         *
*        CONTAIN 1 TO 2 NUMERIC DIGITS.                               *
*                                                                     *
***********************************************************************
XPRMJBN  OI    SWITCH,SELJOBNM     TURN ON SELECT JOBNAME INDICATOR
         MVI   VALJOBNM,X'00'      INITIALIZE
         MVI   VALJOBNM+1,X'00'       JOBNAME
         MVC   VALJOBNM+2(8),=CL8' '     ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         SLR   R15,R15             CLEAR COUNTER REGISTER
XPRMJBN1 CLI   0(R7),C' '          END OF JOBNM?
         BE    XPRMJBN5            YES, BRANCH
         CLI   0(R7),C'('          START OF OFFSET FIELD?
         BE    XPRMJBN2            YES, BRANCH
         LA    R15,1(,R15)         ADD 1 TO LENGTH COUNTER
         LA    R7,1(,R7)           ADD 1 TO JOBNAME POINTER
         B     XPRMJBN1            LOOP
XPRMJBN2 LTR   R15,R15             TEST LENGTH OF JOBNAME
         BZ    ERROR028            ZERO, ERROR
         CH    R15,=H'8'           SEE IF LENGTH EXCEEDS 8
         BH    ERROR039            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         EX    R15,MVJOBNM         MOVE JOBNAME TO SAVE AREA
         STC   R15,VALJOBNM        SAVE JOBNAME LENGTH
         LA    R7,1(R7)            POINT TO INDEX VALUE
         LR    R1,R7               SAVE INDEX ADDRESS
         SLR   R15,R15             CLEAR COUNTER REG
         CLI   0(R7),C')'          END OF INDEX
         BE    XPRMJBN3            YES, BRANCH
         LA    R15,1(,R15)         ADD 1 TO LENGTH COUNTER
         CLI   1(R7),C')'          END OF INDEX
         BE    XPRMJBN3            YES, BRANCH
         LA    R15,1(,R15)         ADD 1 TO LENGTH COUNTER
         CLI   2(R7),C')'          END OF INDEX
         BE    XPRMJBN3            YES, BRANCH
         B     ERROR041            INDEX LENGTH EXCEEDS 2 CHARACTERS
XPRMJBN3 LTR   R15,R15             SEE IF ZERO LENGTH
         BZ    XPRMJBN6            YES, NO INDEX
         LR    R14,R15             SAVE INDEX LENGTH
         LR    R2,R7               SAVE INDEX POINTER
XPRMJBN4 CLI   0(R2),C'0'          TEST FOR LESS THAN ZERO
         BL    ERROR065            YES, ERROR
         CLI   0(R2),C'9'          TEST FOR GT NINE
         BH    ERROR065            YES, ERROR
         LA    R2,1(,R2)           INDEX TO NEXT CHAR
         BCT   R14,XPRMJBN4        LOOP
         BCTR  R15,0               MAKE INDEX LENGTH RELATIVE TO ZERO
         EX    R15,PACKINDX        PACK THE INDEX VALUE
         CVB   R15,DOUBLE          CONVERT INDEX VALUE TO BINARY
         BCTR  R15,0               MAKE INDEX VALUE RELATIVE TO ZERO
         STC   R15,VALJOBNM+1      SAVE INDEX VALUE
         B     XPRMJBN6            BRANCH
XPRMJBN5 LTR   R15,R15             TEST LENGTH OF JOBNAME
         BZ    ERROR067            ZERO, ERROR
         CH    R15,=H'8'           SEE IF LENGTH EXCEEDS 8
         BH    ERROR028            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         EX    R15,MVJOBNM         MOVE JOBNAME TO SAVE AREA
         STC   R15,VALJOBNM        SAVE JOBNAME LENGTH
         MVI   VALJOBNM+1,X'00'    SET INDEX TO ZERO
XPRMJBN6 ICM   R15,B'1111',XJOBNTBL LOAD ADDRESS OF EXJOBNAME TABLE
         BNZ   XPRMJBN7            NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=10010        GET ROOM FOR 1000 EXJOBNAME ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,XJOBNTBL        STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
XPRMJBN7 SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
XPRMJBN8 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    XPRMJBN9            YES, GO SAVE NEW ENTRY
         LA    R15,10(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR066            YES, ERROR
         B     XPRMJBN8            NO, LOOP
XPRMJBN9 MVC   0(10,R15),VALJOBNM  SAVE NEW ENTRY
         MVI   10(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                    EXCLUDE BY SYSTEM ID                             *
*                                                                     *
*        EXSYSTEM=SSSS                                                *
*                                                                     *
*        WHERE SSSS IS THE SMF SYSTEM ID.  THIS FIELD ONLY HAS        *
*        MEANING IF THE INPUT SMF DATA HAS COME FROM MULTIPLE         *
*        MVS SYSTEMS.                                                 *
*                                                                     *
***********************************************************************
XPRMSYS  OI    SWITCH,SELSYSID     TURN ON SELECT SYSID INDICATOR
         MVC   VALSYSID,=CL4' '    INITIALIZE SYSID
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE SYSID NOT BLANK
         BE    ERROR068            NOT THERE, ERROR
         MVC   VALSYSID(4),0(R7)   SAVE SYS ID
XPRMSYS1 ICM   R15,B'1111',XSYSTBL  LOAD ADDRESS OF EXSYSID TABLE
         BNZ   XPRMSYS2            NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=4004         GET ROOM FOR 1000 EXSYSID ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,XSYSTBL         STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
XPRMSYS2 SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
XPRMSYS3 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    XPRMSYS4            YES, GO SAVE NEW ENTRY
         LA    R15,04(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR069            YES, ERROR
         B     XPRMSYS3            NO, LOOP
XPRMSYS4 MVC   0(04,R15),VALSYSID  SAVE NEW ENTRY
         MVI   04(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                    EXCLUDE BY DATASET NAME                          *
*                                                                     *
*        EXDSN=DDDDDDDD                                               *
*                                                                     *
*        INSURE THAT THE DATASET NAME IS 1 TO 44 CHARACTERS LONG      *
*        SAVING THE LENGTH FOR A GENERIC COMPARE.                     *
*                                                                     *
***********************************************************************
XPRMDSN  OI    SWITCH+4,SELDSN     TURN ON SELECT DATASET NAME IND
         MVC   VALDSN(2),=X'0000'  INITIALIZE DSNAME
         MVC   VALDSN+2(44),=CL44' '    ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE DSNAME NOT BLANK
         BE    ERROR070            NOT THERE, ERROR
         SLR   R15,R15             SET LENGTH TO 0
XPRMDSN1 CLI   0(R7),C' '          END OF DSNAME
         BE    XPRMDSN2            YES, BRANCH
         LA    R7,1(,R7)           INDEX TO NEXT CHAR
         LA    R15,1(,R15)         ADD 1 TO LENGTH
         B     XPRMDSN1            LOOP
XPRMDSN2 CH    R15,=H'44'          SEE IF EXCEEDS MAX LENGTH
         BH    ERROR070            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         STH   R15,VALDSN          SAVE LENGTH OF DATASET NAME
         MVC   VALDSN+2(44),0(R1)  SAVE DATASET NAME
XPRMDSN3 ICM   R15,B'1111',XDSNTBL LOAD ADDRESS OF EXDSN TABLE
         BNZ   XPRMDSN4            NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=46046        GET ROOM FOR 1000 EXDSN ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,XDSNTBL         STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
XPRMDSN4 SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
XPRMDSN5 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    XPRMDSN6            YES, GO SAVE NEW ENTRY
         LA    R15,46(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR071            YES, ERROR
         B     XPRMDSN5            NO, LOOP
XPRMDSN6 MVC   0(46,R15),VALDSN    SAVE NEW ENTRY
         MVI   46(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                    EXCLUDE BY DD NAME                               *
*                                                                     *
*        EXDDN=FFFFFFFF                                               *
*                                                                     *
*        INSURE THAT THE DD NAME IS A 1 TO 8 CHARACTERS LONG          *
*        SAVING THE LENGTH FOR A GENERIC COMPARE.                     *
*                                                                     *
***********************************************************************
XPRMDDN  OI    SWITCH+4,SELDDN     TURN ON SELECT DD NAME IND
         MVC   VALDDN(2),=X'0000'  INITIALIZE DDNAME
         MVC   VALDDN+2(8),=CL8' '     ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE DDNAME NOT BLANK
         BE    ERROR045            NOT THERE, ERROR
         SLR   R15,R15             SET LENGTH TO 0
XPRMDDN1 CLI   0(R7),C' '          END OF DDNAME
         BE    XPRMDDN2            YES, BRANCH
         LA    R7,1(,R7)           INDEX TO NEXT CHAR
         LA    R15,1(,R15)         ADD 1 TO LENGTH
         B     XPRMDDN1            LOOP
XPRMDDN2 CH    R15,=H'8'           SEE IF EXCEEDS MAX LENGTH
         BH    ERROR045            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         STH   R15,VALDDN          SAVE LENGTH OF DD NAME
         MVC   VALDDN+2(8),0(R1)   SAVE DD NAME
XPRMDDN3 ICM   R15,B'1111',XDDNTBL LOAD ADDRESS OF EXDDN TABLE
         BNZ   XPRMDDN4            NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=10010        GET ROOM FOR 1000 EXDDN ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,XDDNTBL         STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
XPRMDDN4 SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
XPRMDDN5 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    XPRMDDN6            YES, GO SAVE NEW ENTRY
         LA    R15,10(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR059            YES, ERROR
         B     XPRMDDN5            NO, LOOP
XPRMDDN6 MVC   0(10,R15),VALDDN    SAVE NEW ENTRY
         MVI   10(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                    EXCLUDE BY VOLSER                                *
*                                                                     *
*        EXVOL=VVVVVV                                                 *
*                                                                     *
*        INSURE THAT THE DD NAME IS A 1 TO 6 CHARACTERS LONG          *
*        SAVING THE LENGTH FOR A GENERIC COMPARE.                     *
*                                                                     *
***********************************************************************
XPRMVOL  OI    SWITCH+4,SELVOL     TURN ON SELECT VOLSER IND
         MVC   VALVOL(2),=X'0000'  INITIALIZE VOLUME
         MVC   VALVOL+2(6),=CL6' '     ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE VOLSER NOT BLANK
         BE    ERROR074            NOT THERE, ERROR
         SLR   R15,R15             SET LENGTH TO 0
XPRMVOL1 CLI   0(R7),C' '          END OF VOLSER
         BE    XPRMVOL2            YES, BRANCH
         LA    R7,1(,R7)           INDEX TO NEXT CHAR
         LA    R15,1(,R15)         ADD 1 TO LENGTH
         B     XPRMVOL1            LOOP
XPRMVOL2 CH    R15,=H'6'           SEE IF EXCEEDS MAX LENGTH
         BH    ERROR074            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         STH   R15,VALVOL          SAVE LENGTH OF VOLSER
         MVC   VALVOL+2(6),0(R1)   SAVE VOLSER
XPRMVOL3 ICM   R15,B'1111',XVOLTBL LOAD ADDRESS OF EXVOL TABLE
         BNZ   XPRMVOL4            NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=8008         GET ROOM FOR 1000 EXVOL ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,XVOLTBL         STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
XPRMVOL4 SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
XPRMVOL5 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    XPRMVOL6            YES, GO SAVE NEW ENTRY
         LA    R15,08(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR075            YES, ERROR
         B     XPRMVOL5            NO, LOOP
XPRMVOL6 MVC   0(08,R15),VALVOL    SAVE NEW ENTRY
         MVI   08(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*        DETERMINE LENGTH OF THE OPENDAY OPTION THEN SEARCH           *
*        A KEYWORD TABLE TO FIND A MATCH AND ROUTINE INDEX.           *
*                                                                     *
***********************************************************************
PRMODAY  OI    SWITCH+1,SELODAY    TURN SELECTION BY OPEN DAY IND
         LR    R1,R7               SAVE RECORD ADDRESS
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE ODAY PARMS PRESENT
         BE    ERROR010            NONE, ERROR
PRMODAY1 SLR   R3,R3               SET LENGTH TO ZERO
PRMODAY2 CLI   0(R7),C' '          END OF PARM
         BE    PRMODAY3            YES, BRANCH
         CLI   0(R7),C','          END OF PARM
         BE    PRMODAY3            YES, BRANCH
         LA    R3,1(,R3)           ADD 1 TO LENGTH FIELD
         LA    R7,1(,R7)           INCREMENT TO NEXT CHAR OF PARM
         B     PRMODAY2            LOOP
PRMODAY3 LTR   R3,R3               TEST LENGTH
         BZ    ERROR011            ZERO, ERROR
         BCTR  R3,0                MAKE MACHINE LENGTH
         L     R4,=V(OPTKEY)       LOAD ADDRESS OF OPTIONS KEYWORD TBL
PRMODAY4 CLI   0(R4),X'FF'         END OF TABLE
         BE    ERROR012            YES, ERROR, INVALID KEYWORD
         CH    R3,0(R4)            SEE IF LENGTH LT MINIMUM LENGTH
         BL    PRMODAY5            YES, BRANCH
         EX    R3,COMPOKEY         COMPARE OPTION KEYWORD
         BE    PRMODAY6            MATCH, BRANCH
PRMODAY5 LA    R4,34(,R4)          INCREMENT TO NEXT TABLE ENTRY
         B     PRMODAY4            LOOP
PRMODAY6 CLI   19(R4),C'Y'         SEE IF ELIGIBLE DAY OPTION
         BNE   ERROR012            NO, ERROR
         LH    R15,2(R4)           LOAD OPTION INDEX FROM TABLE
***********************************************************************
*                                                                     *
*        GO TO THE PROPER ROUTINE FOR THE OPEN DAY SUBPARAMETER       *
*        ON THE INPUT CARD ACCORDING TO THE ROUTINE INDEX IN THE      *
*        KEYWORD TABLE.                                               *
*                                                                     *
***********************************************************************
         B     PRMODAY7(R15)       BRANCH TO PROPER ROUTINE BY INDEX
PRMODAY7 B     ERROR012            INDEX = 00
         B     ERROR012            INDEX = 04
         B     ERROR012            INDEX = 08
         B     ERROR012            INDEX = 12
         B     ERROR012            INDEX = 16
         B     ERROR012            INDEX = 20
         B     ERROR012            INDEX = 24
         B     ERROR012            INDEX = 28
         B     ERROR012            INDEX = 32
         B     ERROR012            INDEX = 36
         B     ERROR012            INDEX = 40
         B     ERROR012            INDEX = 44
         B     ERROR012            INDEX = 48
         B     ERROR012            INDEX = 52
         B     ERROR012            INDEX = 56
         B     ERROR012            INDEX = 60
         B     ERROR012            INDEX = 64
         B     ERROR012            INDEX = 68
         B     ERROR012            INDEX = 72
         B     ERROR012            INDEX = 76
         B     ERROR012            INDEX = 80
         B     ERROR012            INDEX = 84
         B     ERROR012            INDEX = 88
         B     PRMOSUN             INDEX = 92
         B     PRMONSUN            INDEX = 96
         B     PRMOMON             INDEX = 100
         B     PRMONMON            INDEX = 104
         B     PRMOTUE             INDEX = 108
         B     PRMONTUE            INDEX = 112
         B     PRMOWED             INDEX = 116
         B     PRMONWED            INDEX = 120
         B     PRMOTHU             INDEX = 124
         B     PRMONTHU            INDEX = 128
         B     PRMOFRI             INDEX = 132
         B     PRMONFRI            INDEX = 136
         B     PRMOSAT             INDEX = 140
         B     PRMONSAT            INDEX = 144
         B     PRMOWE              INDEX = 148
         B     PRMONWE             INDEX = 152
         B     PRMOWD              INDEX = 156
         B     PRMONWD             INDEX = 160
         B     PRMOALLD            INDEX = 164
         B     ERROR012            INDEX = 168
         B     ERROR012            INDEX = 172
         B     ERROR012            INDEX = 176
         B     ERROR012            INDEX = 180
         B     ERROR012            INDEX = 184
         B     ERROR012            INDEX = 188
         B     ERROR012            INDEX = 192
PRMODAY8 CLI   0(R7),C' '          END OF SUBPARAMETERS?
         BE    PRMEND              YES, GO GET NEXT OPTION CARD
         CLI   0(R7),C','          PROPER SUBPARAMETER SEPARATOR?
         BNE   ERROR052            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST ','
         LR    R1,R7               SET START OF NEXT SUBPARM
         B     PRMODAY1            GO GET NEXT PRINT SUBPARAMETER
         EJECT
***********************************************************************
*                                                                     *
*                  OPEN DAY-OF-THE-WEEK ROUTINES                      *
*                                                                     *
*        HANDLE THE FOLLOWING ODAY SUBPARAMETERS:                     *
*                                                                     *
*        SUNDAY/NOSUNDAY         SELECT OR BYPASS THIS DAY            *
*        MONDAY/NOMONDAY         SELECT OR BYPASS THIS DAY            *
*        TUESDAY/NOTUESDAY       SELECT OR BYPASS THIS DAY            *
*        WEDNESDAY/NOWEDNESDAY   SELECT OR BYPASS THIS DAY            *
*        THURSDAY/NOTHURSDAY     SELECT OR BYPASS THIS DAY            *
*        FRIDAY/NOFRIDAY         SELECT OR BYPASS THIS DAY            *
*        SATURDAY/NOSATURDAY     SELECT OR BYPASS THIS DAY            *
*                                                                     *
*        WEEKEND/NOWEEKEND       SELECT OR BYPASS SAT AND SUN         *
*        WEEKDAY/NOWEEKDAY       SELECT OR BYPASS MON - FRI           *
*        EVERYDAY/ALLDAYS        SELECT SUN - SAT                     *
*                                                                     *
***********************************************************************
PRMOSUN  OI    ODAYSW,SUN          TURN ON SUNDAY
         B     PRMODAY8            GO TO DAY-OF-WEEK END
         SPACE 3
PRMONSUN NI    ODAYSW,255-SUN      TURN OFF SUNDAY
         B     PRMODAY8            GO TO DAY-OF-WEEK END
         SPACE 3
PRMOMON  OI    ODAYSW,MON          TURN ON MONDAY
         B     PRMODAY8            GO TO DAY-OF-WEEK END
         SPACE 3
PRMONMON NI    ODAYSW,255-MON      TURN OFF MONDAY
         B     PRMODAY8            GO TO DAY-OF-WEEK END
         SPACE 3
PRMOTUE  OI    ODAYSW,TUE          TURN ON TUESDAY
         B     PRMODAY8            GO TO DAY-OF-WEEK END
         SPACE 3
PRMONTUE NI    ODAYSW,255-TUE      TURN OFF TUESDAY
         B     PRMODAY8            GO TO DAY-OF-WEEK END
         SPACE 3
PRMOWED  OI    ODAYSW,WED          TURN ON WEDNESDAY
         B     PRMODAY8            GO TO DAY-OF-WEEK END
         SPACE 3
PRMONWED NI    ODAYSW,255-WED      TURN OFF WEDNESDAY
         B     PRMODAY8            GO TO DAY-OF-WEEK END
         SPACE 3
PRMOTHU  OI    ODAYSW,THU          TURN ON THURSDAY
         B     PRMODAY8            GO TO DAY-OF-WEEK END
         SPACE 3
PRMONTHU NI    ODAYSW,255-THU      TURN OFF THURSDAY
         B     PRMODAY8            GO TO DAY-OF-WEEK END
         SPACE 3
PRMOFRI  OI    ODAYSW,FRI          TURN ON FRIDAY
         B     PRMODAY8            GO TO DAY-OF-WEEK END
         SPACE 3
PRMONFRI NI    ODAYSW,255-FRI      TURN OFF FRIDAY
         B     PRMODAY8            GO TO DAY-OF-WEEK END
         SPACE 3
PRMOSAT  OI    ODAYSW,SAT          TURN ON SATURDAY
         B     PRMODAY8            GO TO DAY-OF-WEEK END
         SPACE 3
PRMONSAT NI    ODAYSW,255-SAT      TURN OFF SATURDAY
         B     PRMODAY8            GO TO DAY-OF-WEEK END
         SPACE 3
PRMOWE   OI    ODAYSW,SAT+SUN      TURN ON SATURDAY AND SUNDAY
         B     PRMODAY8            GO TO DAY-OF-WEEK END
         SPACE 3
PRMONWE  NI    ODAYSW,255-SAT-SUN  TURN OFF SATURDAY AND SUNDAY
         B     PRMODAY8            GO TO DAY-OF-WEEK END
         SPACE 3
PRMOWD   OI    ODAYSW,MON+TUE+WED+THU+FRI TURN ON WEEKDAYS
         B     PRMODAY8            GO TO DAY-OF-WEEK END
         SPACE 3
PRMONWD  NI    ODAYSW,255-MON-TUE-WED-THU-FRI TURN OFF WEEKDAYS
         B     PRMODAY8            GO TO DAY-OF-WEEK END
         SPACE 3
PRMOALLD OI    ODAYSW,SUN+MON+TUE+WED+THU+FRI+SAT TURN ON EVERY DAY
         B     PRMODAY8            GO TO DAY-OF-WEEK END
         EJECT
***********************************************************************
*                                                                     *
*        DETERMINE LENGTH OF THE CLOSEDAY OPTION THEN SEARCH          *
*        A KEYWORD TABLE TO FIND A MATCH AND ROUTINE INDEX.           *
*                                                                     *
***********************************************************************
PRMCDAY  OI    SWITCH+1,SELCDAY    TURN SELECTION BY CLOSE DAY IND
         LR    R1,R7               SAVE RECORD ADDRESS
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE CDAY PARMS PRESENT
         BE    ERROR077            NONE, ERROR
PRMCDAY1 SLR   R3,R3               SET LENGTH TO ZERO
PRMCDAY2 CLI   0(R7),C' '          END OF PARM
         BE    PRMCDAY3            YES, BRANCH
         CLI   0(R7),C','          END OF PARM
         BE    PRMCDAY3            YES, BRANCH
         LA    R3,1(,R3)           ADD 1 TO LENGTH FIELD
         LA    R7,1(,R7)           INCREMENT TO NEXT CHAR OF PARM
         B     PRMCDAY2            LOOP
PRMCDAY3 LTR   R3,R3               TEST LENGTH
         BZ    ERROR078            ZERO, ERROR
         BCTR  R3,0                MAKE MACHINE LENGTH
         L     R4,=V(OPTKEY)       LOAD ADDRESS OF OPTIONS KEYWORD TBL
PRMCDAY4 CLI   0(R4),X'FF'         END OF TABLE
         BE    ERROR079            YES, ERROR, INVALID KEYWORD
         CH    R3,0(R4)            SEE IF LENGTH LT MINIMUM LENGTH
         BL    PRMCDAY5            YES, BRANCH
         EX    R3,COMPOKEY         COMPARE OPTION KEYWORD
         BE    PRMCDAY6            MATCH, BRANCH
PRMCDAY5 LA    R4,34(,R4)          INCREMENT TO NEXT TABLE ENTRY
         B     PRMCDAY4            LOOP
PRMCDAY6 CLI   19(R4),C'Y'         SEE IF ELIGIBLE DAY OPTION
         BNE   ERROR079            NO, ERROR
         LH    R15,2(R4)           LOAD OPTION INDEX FROM TABLE
***********************************************************************
*                                                                     *
*        GO TO THE PROPER ROUTINE FOR THE CLOSE DAY SUBPARAMETER      *
*        ON THE INPUT CARD ACCORDING TO THE ROUTINE INDEX IN THE      *
*        KEYWORD TABLE.                                               *
*                                                                     *
***********************************************************************
         B     PRMCDAY7(R15)       BRANCH TO PROPER ROUTINE BY INDEX
PRMCDAY7 B     ERROR079            INDEX = 00
         B     ERROR079            INDEX = 04
         B     ERROR079            INDEX = 08
         B     ERROR079            INDEX = 12
         B     ERROR079            INDEX = 16
         B     ERROR079            INDEX = 20
         B     ERROR079            INDEX = 24
         B     ERROR079            INDEX = 28
         B     ERROR079            INDEX = 32
         B     ERROR079            INDEX = 36
         B     ERROR079            INDEX = 40
         B     ERROR079            INDEX = 44
         B     ERROR079            INDEX = 48
         B     ERROR079            INDEX = 52
         B     ERROR079            INDEX = 56
         B     ERROR079            INDEX = 60
         B     ERROR079            INDEX = 64
         B     ERROR079            INDEX = 68
         B     ERROR079            INDEX = 72
         B     ERROR079            INDEX = 76
         B     ERROR079            INDEX = 80
         B     ERROR079            INDEX = 84
         B     ERROR079            INDEX = 88
         B     PRMCSUN             INDEX = 92
         B     PRMCNSUN            INDEX = 96
         B     PRMCMON             INDEX = 100
         B     PRMCNMON            INDEX = 104
         B     PRMCTUE             INDEX = 108
         B     PRMCNTUE            INDEX = 112
         B     PRMCWED             INDEX = 116
         B     PRMCNWED            INDEX = 120
         B     PRMCTHU             INDEX = 124
         B     PRMCNTHU            INDEX = 128
         B     PRMCFRI             INDEX = 132
         B     PRMCNFRI            INDEX = 136
         B     PRMCSAT             INDEX = 140
         B     PRMCNSAT            INDEX = 144
         B     PRMCWE              INDEX = 148
         B     PRMCNWE             INDEX = 152
         B     PRMCWD              INDEX = 156
         B     PRMCNWD             INDEX = 160
         B     PRMCALLD            INDEX = 164
         B     ERROR079            INDEX = 168
         B     ERROR079            INDEX = 172
         B     ERROR079            INDEX = 176
         B     ERROR079            INDEX = 180
         B     ERROR079            INDEX = 184
         B     ERROR079            INDEX = 188
         B     ERROR079            INDEX = 192
PRMCDAY8 CLI   0(R7),C' '          END OF SUBPARAMETERS?
         BE    PRMEND              YES, GO GET NEXT OPTION CARD
         CLI   0(R7),C','          PROPER SUBPARAMETER SEPARATOR?
         BNE   ERROR052            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST ','
         LR    R1,R7               SET START OF NEXT SUBPARM
         B     PRMCDAY1            GO GET NEXT PRINT SUBPARAMETER
         EJECT
***********************************************************************
*                                                                     *
*                 CLOSE DAY-OF-THE-WEEK ROUTINES                      *
*                                                                     *
*        HANDLE THE FOLLOWING CDAY SUBPARAMETERS:                     *
*                                                                     *
*        SUNDAY/NOSUNDAY         SELECT OR BYPASS THIS DAY            *
*        MONDAY/NOMONDAY         SELECT OR BYPASS THIS DAY            *
*        TUESDAY/NOTUESDAY       SELECT OR BYPASS THIS DAY            *
*        WEDNESDAY/NOWEDNESDAY   SELECT OR BYPASS THIS DAY            *
*        THURSDAY/NOTHURSDAY     SELECT OR BYPASS THIS DAY            *
*        FRIDAY/NOFRIDAY         SELECT OR BYPASS THIS DAY            *
*        SATURDAY/NOSATURDAY     SELECT OR BYPASS THIS DAY            *
*                                                                     *
*        WEEKEND/NOWEEKEND       SELECT OR BYPASS SAT AND SUN         *
*        WEEKDAY/NOWEEKDAY       SELECT OR BYPASS MON - FRI           *
*        EVERYDAY/ALLDAYS        SELECT SUN - SAT                     *
*                                                                     *
***********************************************************************
PRMCSUN  OI    CDAYSW,SUN          TURN ON SUNDAY
         B     PRMCDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
PRMCNSUN NI    CDAYSW,255-SUN      TURN OFF SUNDAY
         B     PRMCDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
PRMCMON  OI    CDAYSW,MON          TURN ON MONDAY
         B     PRMCDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
PRMCNMON NI    CDAYSW,255-MON      TURN OFF MONDAY
         B     PRMCDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
PRMCTUE  OI    CDAYSW,TUE          TURN ON TUESDAY
         B     PRMCDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
PRMCNTUE NI    CDAYSW,255-TUE      TURN OFF TUESDAY
         B     PRMCDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
PRMCWED  OI    CDAYSW,WED          TURN ON WEDNESDAY
         B     PRMCDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
PRMCNWED NI    CDAYSW,255-WED      TURN OFF WEDNESDAY
         B     PRMCDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
PRMCTHU  OI    CDAYSW,THU          TURN ON THURSDAY
         B     PRMCDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
PRMCNTHU NI    CDAYSW,255-THU      TURN OFF THURSDAY
         B     PRMCDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
PRMCFRI  OI    CDAYSW,FRI          TURN ON FRIDAY
         B     PRMCDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
PRMCNFRI NI    CDAYSW,255-FRI      TURN OFF FRIDAY
         B     PRMCDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
PRMCSAT  OI    CDAYSW,SAT          TURN ON SATURDAY
         B     PRMCDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
PRMCNSAT NI    CDAYSW,255-SAT      TURN OFF SATURDAY
         B     PRMCDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
PRMCWE   OI    CDAYSW,SAT+SUN      TURN ON SATURDAY AND SUNDAY
         B     PRMCDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
PRMCNWE  NI    CDAYSW,255-SAT-SUN  TURN OFF SATURDAY AND SUNDAY
         B     PRMCDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
PRMCWD   OI    CDAYSW,MON+TUE+WED+THU+FRI TURN ON WEEKDAYS
         B     PRMCDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
PRMCNWD  NI    CDAYSW,255-MON-TUE-WED-THU-FRI TURN OFF WEEKDAYS
         B     PRMCDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
PRMCALLD OI    CDAYSW,SUN+MON+TUE+WED+THU+FRI+SAT TURN ON EVERY DAY
         B     PRMCDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
***********************************************************************
*                                                                     *
*                    RETURN TO CALLER                                 *
*                                                                     *
***********************************************************************
PRMEND   SLR   R15,R15             SET RETURN CODE TO ZERO
PRMEND1  L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         RETURN (14,12),RC=(15)    RETURN TO CALLER
COMPOKEY CLC   0(0,R1),4(R4)       **** EXECUTE ONLY ****
PACKINDX PACK  DOUBLE,0(0,R1)      **** EXECUTE ONLY ****
         EJECT
***********************************************************************
*                                                                     *
*        VALIDITY CHECK ANY OF THE TIME PARMS.                        *
*                                                                     *
*        REGISTER 1 ON ENTRY POINTS TO THE INPUT TIME.                *
*                                                                     *
*        THE INPUT TIME MUST BE IN THE FORM HHH.MM.SS                 *
*                                                                     *
*        REGISTER 14 ON ENTRY IS THE RETURN ADDRESS.                  *
*                                                                     *
*        THE VALIDATED TIME IN THE FORM HHHMMSS WILL BE AT            *
*        LABEL TMOUT.                                                 *
*                                                                     *
*        IN AN ERROR IS DETECTED, THE RETURN CODE WILL BE SET         *
*        TO 8.                                                        *
*                                                                     *
***********************************************************************
PARMTM   ST    R14,RETURN          SAVE RETURN ADDRESS
         MVC   TMOUT,=C'0000000'   SET TIME TO ZERO
         LR    R7,R1               SAVE ADDRESS OF INPUT TIME
         CLI   0(R7),C' '          MAKE SURE INPUT TIME NOT BLANK
         BE    PARMTM7             NOT THERE, ERROR
         LR    R1,R7               SAVE ADDR OF TIME
         LA    R14,5+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PARMTM1  CLI   0(R7),C' '          END OF TIME?
         BE    PARMTM2             YES, BRANCH
         CLI   0(R7),C'.'          END OF HOURS?
         BE    PARMTM2             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    PARMTM7             YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    PARMTM7             YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PARMTM1         LOOP
         B     PARMTM7             TOO LONG, ERROR
PARMTM2  BCTR  R15,0               MAKE LENGTH OF TIME REL ZERO
         EX    R15,PACKINDX        PACK TIME
         CP    DOUBLE,=P'999'      SEE IF EXCEEDS 999 HOURS
         BH    PARMTM7             YES, ERROR
         UNPK  WORK(3),DOUBLE+6(2) UNPACK HOURS
         OI    WORK+2,X'F0'        MAKE PRINTABLE
         MVC   TMOUT(3),WORK       SAVE HHH
         CLI   0(R7),C'.'          SEE IF ANY MORE?
         BNE   PARMTM8             NO, DONE
         LA    R7,1(,R7)           INCREMENT PAST '.'
         LR    R1,R7               SAVE ADDRESS OF TIME
         LA    R14,4+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
         CLI   0(R7),C' '          END OF TIME?
         BE    PARMTM8             YES, DONE
PARMTM3  CLI   0(R7),C' '          END OF TIME?
         BE    PARMTM4             YES, BRANCH
         CLI   0(R7),C'.'          END OF MINUTES?
         BE    PARMTM4             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    PARMTM7             YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    PARMTM7             YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PARMTM3         LOOP
         B     PARMTM7             TOO LONG, ERROR
PARMTM4  LTR   R15,R15             TEST FOR ZERO LENGTH MINUTES
         BE    PARMTM7             YES, ERROR
         BCTR  R15,0               MAKE LENGTH OF TIME REL ZERO
         EX    R15,PACKINDX        PACK TIME
         CP    DOUBLE,=P'59'       SEE IF EXCEEDS 59 MINUTES
         BH    PARMTM7             YES, ERROR
         UNPK  WORK(3),DOUBLE+6(2) UNPACK MINUTES
         OI    WORK+2,X'F0'        MAKE PRINTABLE
         MVC   TMOUT+3(2),WORK+1   SAVE MM
         CLI   0(R7),C'.'          SEE IF ANY MORE?
         BNE   PARMTM8             NO, DONE
         LA    R7,1(,R7)           INCREMENT PAST '.'
         LR    R1,R7               SAVE ADDRESS OF TIME
         LA    R14,4+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
         CLI   0(R7),C' '          END OF TIME?
         BE    PARMTM8             YES, DONE
PARMTM5  CLI   0(R7),C' '          END OF TIME?
         BE    PARMTM6             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    PARMTM7             YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    PARMTM7             YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PARMTM5         LOOP
         B     PARMTM7             TOO LONG, ERROR
PARMTM6  LTR   R15,R15             TEST FOR ZERO LENGTH SECONDS
         BE    PARMTM7             YES, ERROR
         BCTR  R15,0               MAKE LENGTH OF TIME REL ZERO
         EX    R15,PACKINDX        PACK ET
         CP    DOUBLE,=P'59'       SEE IF EXCEEDS 59 SECONDS
         BH    PARMTM7             YES, ERROR
         UNPK  WORK(3),DOUBLE+6(2) UNPACK SECONDS
         OI    WORK+2,X'F0'        MAKE PRINTABLE
         MVC   TMOUT+5(2),WORK+1   SAVE SS
         B     PARMTM8             DONE
PARMTM7 LA     R15,8               SET RETURN CODE TO 8
         B     PARMTM9             RETURN TO CALLER
PARMTM8 LA     R15,0               SET RETURN CODE TO 0
PARMTM9  L     R14,RETURN          RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        ERROR ROUTINES FOR PRMCHK ROUTINE                            *
*                                                                     *
***********************************************************************
ERROR001 LA    R15,1               LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR002 LA    R15,2               LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR003 LA    R15,3               LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR004 LA    R15,4               LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR005 LA    R15,5               LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR006 LA    R15,6               LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR007 LA    R15,7               LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR008 LA    R15,8               LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR009 LA    R15,9               LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR010 LA    R15,10              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR011 LA    R15,11              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR012 LA    R15,12              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR014 LA    R15,14              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR015 LA    R15,15              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR016 LA    R15,16              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR017 LA    R15,17              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR018 LA    R15,18              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR019 LA    R15,19              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR020 LA    R15,20              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR021 LA    R15,21              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR022 LA    R15,22              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR023 LA    R15,23              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR024 LA    R15,24              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR025 LA    R15,25              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR026 LA    R15,26              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR027 LA    R15,27              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR028 LA    R15,28              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR029 LA    R15,29              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR032 LA    R15,32              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR033 LA    R15,33              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR034 LA    R15,34              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR035 LA    R15,35              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR036 LA    R15,36              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR037 LA    R15,37              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR038 LA    R15,38              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR039 LA    R15,39              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR040 LA    R15,40              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR041 LA    R15,41              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR042 LA    R15,42              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR043 LA    R15,43              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR044 LA    R15,44              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR045 LA    R15,45              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR049 LA    R15,49              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR050 LA    R15,50              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR051 LA    R15,51              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR052 LA    R15,52              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR053 LA    R15,53              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR054 LA    R15,54              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR055 LA    R15,55              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR056 LA    R15,56              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR057 LA    R15,57              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR058 LA    R15,58              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR059 LA    R15,59              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR060 LA    R15,60              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR061 LA    R15,61              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR062 LA    R15,62              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR063 LA    R15,63              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR064 LA    R15,64              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR065 LA    R15,65              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR066 LA    R15,66              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR067 LA    R15,67              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR068 LA    R15,68              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR069 LA    R15,69              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR070 LA    R15,70              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR071 LA    R15,71              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR072 LA    R15,72              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR073 LA    R15,73              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR074 LA    R15,74              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR075 LA    R15,75              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR077 LA    R15,77              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR078 LA    R15,78              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR079 LA    R15,79              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
         SPACE 3
         LTORG
SAVE5    DS    18F                 ROUTINE SAVE AREA
         DROP  R9,R10,R11,R12
         POP   USING
         EJECT
         PUSH  USING
***********************************************************************
*                                                                     *
*                              DATERTN                                *
*                                                                     *
*                   CONVERT DATES TO OTHER FORMATS                    *
*                                                                     *
*        THIS ROUTINE WILL CONVERT AN INPUT DATE FIELD IN ONE         *
*        DATE FORMAT TO ANOTHER FORMAT IN THE OUTPUT FIELD.           *
*        THE DATE TYPES ARE AS FOLLOWS:                               *
*                                                                     *
*        JULIAN    - 4 DIGIT PACKED DECIMAL DATE (YYYYDDDS)           *
*                                                                     *
*        GREGORIAN - 5 DIGIT PACKED DECIMAL DATE (0YYYYMMDDS)         *
*                                                                     *
*        CENTURY   - 4 BYTE FULLWORD NUMBER OF DAYS SINCE             *
*                    DECEMBER 31, 1899.                               *
*                                                                     *
*                                                                     *
*        REGISTER 1 ON ENTRY TO THIS ROUTINE POINTS TO A LIST OF      *
*        THREE ADDRESSES.  THEY ARE AS FOLLOWS:                       *
*                                                                     *
*        1 - ADDRESS OF A 2 BYTE FIELD IDENTIFYING THE TYPE OF        *
*            CONVERSTION TO PERFORM.  IT WILL BE A CHARACTER          *
*            COMBINATION AS FOLLOWS:                                  *
*                                                                     *
*            JG - CONVERT FIELD 1 FROM JULIAN TO FIELD 2 AS           *
*                 GREGORIAN                                           *
*                                                                     *
*            JC - CONVERT FIELD 1 FROM JULIAN TO FIELD 2 AS           *
*                 CENTURY                                             *
*                                                                     *
*            GJ - CONVERT FIELD 1 FROM GREGORIAN TO FIELD 2 AS        *
*                 JULIAN                                              *
*                                                                     *
*            GC - CONVERT FIELD 1 FROM GREGORIAN TO FIELD 2 AS        *
*                 CENTURY                                             *
*                                                                     *
*            CJ - CONVERT FIELD 1 FROM CENTURY TO FIELD 2 AS          *
*                 JULIAN                                              *
*                                                                     *
*            CG - CONVERT FIELD 1 FROM CENTURY TO FIELD 2 AS          *
*                 GREGORIAN                                           *
*                                                                     *
*        2 - ADDRESS OF THE INPUT FIELD.  THE TYPE OF CONVERSION      *
*            REQUESTED WILL INDICATE THE FORMAT OF THIS FIELD         *
*                                                                     *
*        3 - ADDRESS OF THE OUTPUT FIELD.  THE TYPE OF CONVERSION     *
*            REQUESTED WILL INDICATE THE FORMAT OF THIS FIELD         *
*                                                                     *
*                                                                     *
*                                                                     *
*        REGISTER 15 ON RETURN TO THE CALLER WILL CONTAIN THE         *
*        RETURN CODE FROM CONVERSION.  THE RETURN CODES ARE           *
*        AS FOLLOWS:                                                  *
*                                                                     *
*         0 - CONVERSION WAS SUCCESSFUL                               *
*                                                                     *
*         8 - CONVERSION FAILED DUE TO INVALID INPUT PARM LIST        *
*                                                                     *
*        16 - CONVERSION FAILED DUE TO INVALID INPUT DATE SYNTAX      *
*                                                                     *
***********************************************************************
DATERTN  CSECT
         SAVE  (14,12)             SAVE REGISTERS
         USING DATERTN,R9,R10,R11,R12 SET ADDRESSABILITY TO ROUTINE
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,SAVE6           LOAD ADDR OF NEW SAVE AREA
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
         ST    R1,DTPARM           SAVE ADDRESS OF PARM LIST
***********************************************************************
*                                                                     *
*        VALIDATE THE INPUT PARM LIST                                 *
*                                                                     *
***********************************************************************
DTP      L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,0(R1)            LOAD PARM 1 ADDRESS
         MVC   DTYPE,0(R2)         SAVE DATE TYPE
         CLC   DTYPE,=C'JG'        SEE IF JULIAN/GREGORIAN
         BE    DTPJG               YES, GO DO IT
         CLC   DTYPE,=C'JC'        SEE IF JULIAN/CENTURY
         BE    DTPJC               YES, GO GO IT
         CLC   DTYPE,=C'GJ'        SEE IF GREGORIAN/JULIAN
         BE    DTPGJ               YES, GO DO IT
         CLC   DTYPE,=C'GC'        SEE IF GREGORIAN/CENTURY
         BE    DTPGC               YES, GO GO IT
         CLC   DTYPE,=C'CJ'        SEE IF CENTURY/JULIAN
         BE    DTPCJ               YES, GO DO IT
         CLC   DTYPE,=C'CG'        SEE IF CENTURY/GREGORIAN
         BE    DTPCG               YES, GO DO IT
         B     DTRC8               INVALID, GET OUT RC=8
DTPJG    L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,4(R1)            LOAD PARM 2 ADDRESS
         MVC   DTJUL,0(R2)         SAVE JULIAN DATE
         BAL   R14,DTVJUL          GO VALIDATE JULIAN FORMAT
         BAL   R14,DTJG            GO CONVERT TO GREGORIAN FORMAT
         L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,8(R1)            LOAD PARM 3 ADDRESS
         MVC   0(05,R2),DTGREG     RETURN GREGORIAN DATE
         B     DTRC0               RETURN TO CALLER
DTPJC    L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,4(R1)            LOAD PARM 2 ADDRESS
         MVC   DTJUL,0(R2)         SAVE JULIAN DATE
         BAL   R14,DTVJUL          GO VALIDATE JULIAN FORMAT
         BAL   R14,DTJC            GO CONVERT TO CENTURY FORMAT
         L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,8(R1)            LOAD PARM 3 ADDRESS
         MVC   0(04,R2),DTCENT     RETURN CENTURY DATE
         B     DTRC0               RETURN TO CALLER
DTPGJ    L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,4(R1)            LOAD PARM 2 ADDRESS
         MVC   DTGREG,0(R2)        SAVE GREGORIAN DATE
         BAL   R14,DTVGRG          GO VALIDATE GREGORIAN FORMAT
         BAL   R14,DTGJ            GO CONVERT TO JULIAN FORMAT
         L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,8(R1)            LOAD PARM 3 ADDRESS
         MVC   0(04,R2),DTJUL      RETURN JULIAN DATE
         B     DTRC0               RETURN TO CALLER
DTPGC    L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,4(R1)            LOAD PARM 2 ADDRESS
         MVC   DTGREG,0(R2)        SAVE GREGORIAN DATE
         BAL   R14,DTVGRG          GO VALIDATE GREGORIAN FORMAT
         BAL   R14,DTGJ            GO CONVERT TO JULIAN FORMAT
         BAL   R14,DTJC            GO CONVERT TO CENTURY FORMAT
         L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,8(R1)            LOAD PARM 3 ADDRESS
         MVC   0(04,R2),DTCENT     RETURN CENTURY DATE
         B     DTRC0               RETURN TO CALLER
DTPCJ    L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,4(R1)            LOAD PARM 2 ADDRESS
         MVC   DTCENT,0(R2)        SAVE CENTURY DATE
         BAL   R14,DTVCEN          GO VALIDATE CENTURY FORMAT
         BAL   R14,DTCJ            GO CONVERT TO JULIAN FORMAT
         L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,8(R1)            LOAD PARM 3 ADDRESS
         MVC   0(04,R2),DTJUL      RETURN JULIAN DATE
         B     DTRC0               RETURN TO CALLER
DTPCG    L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,4(R1)            LOAD PARM 2 ADDRESS
         MVC   DTCENT,0(R2)        SAVE CENTURY DATE
         BAL   R14,DTVCEN          GO VALIDATE CENTURY FORMAT
         BAL   R14,DTCJ            GO CONVERT TO JULIAN FORMAT
         BAL   R14,DTJG            GO CONVERT TO GREGORIAN FORMAT
         L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,8(R1)            LOAD PARM 3 ADDRESS
         MVC   0(05,R2),DTGREG     RETURN GREGORIAN DATE
         B     DTRC0               RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        RETURN TO CALLER                                             *
*                                                                     *
***********************************************************************
DTRC0    L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         RETURN (14,12),RC=0       RETURN TO CALLER WITH RC=0
         SPACE 3
DTRC8    L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         RETURN (14,12),RC=8       RETURN TO CALLER WITH RC=8
         SPACE 3
DTRC16   L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         RETURN (14,12),RC=16      RETURN TO CALLER WITH RC=16
         EJECT
***********************************************************************
*                                                                     *
*        VALIDATE THAT JULIAN DATE IS IN FORMAT YYYY.DDD              *
*                                                                     *
***********************************************************************
DTVJUL   UNPK  DTVER,DTJUL         UNPACK JULIAN DATE
         OI    DTVER+7,X'F0'       MAKE PRINTABLE
DTVJUL01 LA    R15,8               SET FIELD LENGTH
         LA    R1,DTVER            POINT TO START OF FIELD
DTVJUL02 CLI   0(R1),C'0'          SEE IF NUMERIC
         BL    DTRC16              NO, GET OUT RC=16
         CLI   0(R1),C'9'          SEE IF NUMERIC
         BH    DTRC16              NO, GET OUT RC=16
DTVJUL03 LA    R1,1(,R1)           POINT TO NEXT CHARACTER IN FIELD
         BCT   R15,DTVJUL02        LOOP
         CLC   DTVER+1(2),=C'19'   TEST CENTURY PORTION OF DATE
         BL    DTRC16              BEFORE 1900, GET OUT RC=16
         CLC   DTVER+1(2),=C'20'   TEST CENTURY PORTION OF DATE
         BH    DTRC16              AFTER 2099, GET OUT RC=16
         NI    DTMISC,255-LEAPYEAR TURN OFF LEAP YEAR INDICATOR
         PACK  DTDBL,DTVER+1(4)    PACK YEAR
         DP    DTDBL,=P'4'         DIVIDE BY 4
         CP    DTDBL+7(1),=P'0'    TEST REMAINDER
         BNZ   DTVJUL04            NOT ZERO, NOT LEAP YEAR
         OI    DTMISC,LEAPYEAR     TURN ON LEAP YEAR INDICATOR
         MVC   DTDAYTBL+2(2),=H'29' SET FEB TO 29 DAYS
DTVJUL04 PACK  DTDBL,DTVER+5(3)    PACK JULIAN DAY
         CVB   R2,DTDBL            CONVERT JULIAN DAY TO BINARY
         LTR   R2,R2               SEE IF JULIAN DAY IS ZERO
         BZ    DTRC16              YES, GET OUT RC=16
         CH    R2,=H'365'          SEE IF JULIAN DAY IS GT 365
         BNH   DTVJUL05            NO, OK
         CH    R2,=H'366'          SEE IF JULIAN DAY IS GT 366
         BH    DTRC16              YES, GET OUT RC=16
         TM    DTMISC,LEAPYEAR     SEE IF LEAP YEAR
         BNO   DTRC16              NO, GET OUT RC=16
DTVJUL05 BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        VALIDATE THAT GREGORIAN DATE IS IN FORMAT YYYY/MM/DD         *
*                                                                     *
***********************************************************************
DTVGRG   UNPK  DTVER,DTGREG        UNPACK GREGORIAN DATE
         OI    DTVER+7,X'F0'       MAKE PRINTABLE
DTVGRG01 LA    R15,8               SET FIELD LENGTH
         LA    R1,DTVER            POINT TO START OF FIELD
DTVGRG02 CLI   0(R1),C'0'          SEE IF NUMERIC
         BL    DTRC16              NO, GET OUT RC=16
         CLI   0(R1),C'9'          SEE IF NUMERIC
         BH    DTRC16              NO, GET OUT RC=16
DTVGRG03 LA    R1,1(,R1)           POINT TO NEXT CHARACTER IN FIELD
         BCT   R15,DTVGRG02        LOOP
         CLC   DTVER(2),=C'19'     TEST CENTURY PORTION OF DATE
         BL    DTRC16              BEFORE 1900, GET OUT RC=16
         CLC   DTVER(2),=C'20'     TEST CENTURY PORTION OF DATE
         BH    DTRC16              AFTER 2099, GET OUT RC=16
         CLC   DTVER+4(2),=C'00' SEE IF MONTH IS ZERO
         BE    DTRC16              YES, GET OUT RC=16
         CLC   DTVER+4(2),=C'12' SEE IF MONTH IS GREATER THAN 12
         BH    DTRC16              YES, GET OUT RC=16
         NI    DTMISC,255-LEAPYEAR TURN OFF LEAP YEAR INDICATOR
         PACK  DTDBL,DTVER(4)      PACK YEAR
         DP    DTDBL,=P'4'         DIVIDE BY 4
         CP    DTDBL+7(1),=P'0'    TEST REMAINDER
         BNZ   DTVGRG04            NOT ZERO, NOT LEAP YEAR
         OI    DTMISC,LEAPYEAR     TURN ON LEAP YEAR INDICATOR
         MVC   DTDAYTBL+2(2),=H'29' SET FEB TO 29 DAYS
DTVGRG04 PACK  DTDBL,DTVER+4(2)    PACK MONTH
         CVB   R2,DTDBL            CONVERT MONTH TO BINARY
         BCTR  R2,0                MAKE RELATIVE TO ZERO
         SLA   R2,1                MULTIPLY BY 2 FOR TABLE OFFSET
         A     R2,=A(DTDAYTBL)     CALCULATE ENTRY IN DAY TABLE
         PACK  DTDBL,DTVER+6(2)    PACK DAY
         CVB   R3,DTDBL            CONVERT DAY TO BINARY
         LTR   R3,R3               SEE IF DAY IS ZERO
         BZ    DTRC16              YES, GET OUT RC=16
         CH    R3,0(R2)            SEE IF DAY EXCEEDS MAX FOR MONTH
         BH    DTRC16              YES, GET OUT RC=16
         BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        VALIDATE THAT CENTURY DATE IS IN FORMAT NNNNNN AND           *
*        NOT GREATER THAN 2 CENTURIES LONG                            *
*                                                                     *
***********************************************************************
DTVCEN   L     R15,DTCENT          LOAD CENTURY DATE
         CH    R15,=H'1'           TEST DATE
         BL    DTRC16              ZERO OR NEGATIVE, GET OUT RC=16
         C     R15,=F'73050'       TEST DATE
         BH    DTRC16              GT 200 YEARS, GET OUT RC=16
         BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        CONVERT JULIAN DATE TO GREGORIAN                             *
*                                                                     *
*        THE INPUT JULIAN DATE IS IN FIELD DTJUL                      *
*        THE OUTPUT GREGORIAN DATE WILL BE IN FIELD DTGREG            *
*                                                                     *
***********************************************************************
DTJG     NI    DTMISC,255-LEAPYEAR TURN OFF LEAP YEAR INDICATOR
         ZAP   DTDBL,DTJUL         MOVE JULIAN DATE TO WORK
         SRP   DTDBL,64-3,0        SHIFT OFF DAY TO LEAVE ONLY YEAR
         ZAP   DTGREG,DTDBL        SET GREGORIAN YEAR
         DP    DTDBL,=P'4'         DIVIDE YEAR BY 4
         CP    DTDBL+7(1),=P'0'    TEST REMAINDER
         BNZ   DTJG01              NOT ZERO, NOT LEAP YEAR
         OI    DTMISC,LEAPYEAR     TURN ON LEAP YEAR INDICATOR
         MVC   DTDAYTBL+2(2),=H'29' SET FEB TO 29 DAYS
DTJG01   LA    R2,12               SET LOOP COUNTER
         LA    R3,1                SET MONTH COUNTER
         ZAP   DTDBL,DTJUL+2(2)    MOVE JULIAN DAY TO WORK
         CVB   R1,DTDBL            CONVERT DAY TO BINARY
         LA    R15,DTDAYTBL        LOAD ADDR OF DAY OF THE MONTH TABLE
DTJG02   CH    R1,0(R15)           SEE IF DAYS GT DAYS IN THIS MONTH
         BNH   DTJG03              NO, DONE
         SH    R1,0(R15)           SUBTRACT DAYS IN THIS MONTH FROM TOT
         LA    R3,1(,R3)           ADD 1 TO MONTH COUNTER
         LA    R15,2(,R15)         INCREMENT TO NEXT ENTRY IN DAY TABLE
         BCT   R2,DTJG02           LOOP
DTJG03   CVD   R3,DTDBL            CONVERT MONTH TO PACKED
         SRP   DTGREG,2,0          SHIFT YEAR FOR MONTH
         AP    DTGREG,DTDBL        ADD MONTH TO GREGORIAN DATE
         CVD   R1,DTDBL            CONVERT DAY TO PACKED
         SRP   DTGREG,2,0          SHIFT YEAR AND MONTH FOR DAY
         AP    DTGREG,DTDBL        ADD DAY TO GREGORIAN DATE
DTJG04   BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        CONVERT GREGORIAN DATE TO JULIAN                             *
*                                                                     *
*        THE INPUT GREGORIAN DATE IS IN FIELD DTGREG                  *
*        THE OUTPUT JULIAN DATE WILL BE IN FIELD DTJUL                *
*                                                                     *
***********************************************************************
DTGJ     NI    DTMISC,255-LEAPYEAR TURN OFF LEAP YEAR INDICATOR
         ZAP   DTDBL,DTGREG        MOVE GREGORIAN DATE TO WORK
         SRP   DTDBL,64-4,0        SHIFT OFF MONTH AND DAY LEAVING YEAR
         ZAP   DTJUL,DTDBL         SET JULIAN YEAR
         DP    DTDBL,=P'4'         DIVIDE BY 4
         CP    DTDBL+7(1),=P'0'    TEST REMAINDER
         BNZ   DTGJ01              NOT ZERO, NOT LEAP YEAR
         OI    DTMISC,LEAPYEAR     TURN ON LEAP YEAR INDICATOR
         MVC   DTDAYTBL+2(2),=H'29' SET FEB TO 29 DAYS
DTGJ01   ZAP   DTDBL,DTGREG+2(3)   MOVE YEAR AND DAY TO WORK
         NI    DTDBL+5,X'0F'       SANITIZE IT
         SRP   DTDBL,64-2,0        SHIFT OFF DAY LEAVING MONTH
         CVB   R2,DTDBL            SET LOOP COUNTER TO MONTH
         SLR   R3,R3               SET JULIAN DAY TO ZERO
         ZAP   DTDBL,DTGREG+3(2)   MOVE DAY TO WORK
         NI    DTDBL+6,X'0F'       SANITIZE IT
         CVB   R1,DTDBL            CONVERT DAY TO BINARY
         AR    R3,R1               ADD GREGORIAN DAY TO JULIAN DAY
         LA    R15,DTDAYTBL        LOAD ADDR OF DAY OF THE MONTH TABLE
         CH    R2,=H'1'            SEE IF JANUARY
         BE    DTGJ03              YES, DO NOT DAYTBL
         BCTR  R2,0                REDUCE LOOP COUNTER BY 1
DTGJ02   AH    R3,0(R15)           ADD DAYS FOR MONTH TO JULIAN DAY
         LA    R15,2(,R15)         INCREMENT TO NEXT ENTRY IN DAY TABLE
         BCT   R2,DTGJ02           LOOP
DTGJ03   CVD   R3,DTDBL            CONVERT DAYS TO PACKED
         SRP   DTJUL,3,0           SHIFT YEAR FOR DAY
         AP    DTJUL,DTDBL         ADD DAY TO JULIAN DATE
DTGJ04   BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        CONVERT JULIAN DATE TO CENTURY                               *
*                                                                     *
*        THE INPUT JULIAN DATE IS IN FIELD DTJUL                      *
*        THE OUTPUT CENTURY DATE WILL BE IN FIELD DTCENT              *
*                                                                     *
*                                                                     *
*        CDATE = ((JULYEAR - 1900) * 365) + JULDAY +                  *
*                ((JULYEAR - 1897) / 4)                               *
*                                                                     *
*                                                                     *
***********************************************************************
DTJC     SLR   R3,R3               ZERO CENTURY YEAR
DTJC01   ZAP   DTDBL,DTJUL         MOVE JULIAN DATE TO WORK
         SRP   DTDBL,64-3,0        SHIFT OFF DAY TO LEAVE ONLY YEAR
         CVB   R2,DTDBL            CONVERT YEAR TO BINARY
         SH    R2,=H'1900'         SUBTRACT 1900
         MH    R2,=H'365'          MULTIPLY BY 365
         AR    R3,R2               ADD SUBTOTAL TO CENTURY DATE
DTJC02   ZAP   DTDBL,DTJUL+2(2)    MOVE JULIAN DAY TO WORK
         CVB   R2,DTDBL            CONVERT DAY TO BINARY
         AR    R3,R2               ADD SUBTOTAL TO CENTURY DATE
DTJC03   ZAP   DTDBL,DTJUL         MOVE JULIAN DATE TO WORK
         SRP   DTDBL,64-3,0        SHIFT OFF DAY TO LEAVE ONLY YEAR
         CVB   R2,DTDBL            CONVERT YEAR TO BINARY
         SH    R2,=H'1897'         SUBTRACT 1897
         SRA   R2,2                DIVIDE BY 4
         AR    R3,R2               ADD SUBTOTAL TO CENTURY DATE
         ST    R3,DTCENT           SAVE CENTURY DATE
DTJC04   BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        CONVERT CENTURY DATE TO JULIAN                               *
*                                                                     *
*        THE INPUT CENTURY DATE IS IN FIELD DTCENT                    *
*        THE OUTPUT JULIAN DATE WILL BE IN FIELD DTJUL                *
*                                                                     *
***********************************************************************
DTCJ     LA    R2,1900             SET YEAR TO 1900
         L     R3,DTCENT           LOAD CENTURY DATE
DTCJ01   LA    R15,365             SET MAX DAYS FOR YEAR TO 365
         CVD   R2,DTDBL            CONVERT YEAR TO PACKED
         DP    DTDBL,=P'4'         DIVIDE BY 4
         CP    DTDBL+7(1),=P'0'    TEST REMAINDER
         BNZ   DTCJ02              NOT ZERO, NOT LEAP YEAR
         LA    R15,366             SET MAX DAYS FOR YEAR TO 366
DTCJ02   CR    R3,R15              SEE IF LAST YEAR
         BNH   DTCJ03              YES, BRANCH
         SR    R3,R15              SUBTRACT DAYS FOR YEAR FROM TOTAL
         LA    R2,1(,R2)           INCREMENT TO NEXT YEAR
         B     DTCJ01              LOOP
DTCJ03   CVD   R2,DTDBL            CONVERT YEAR TO PACKED
         ZAP   DTJUL,DTDBL         MOVE YEAR TO JULIAN DATE
         SRP   DTJUL,3,0           SHIFT YEAR FOR DAYS
DTCJ04   CVD   R3,DTDBL            CONVERT DAYS TO PACKED
         AP    DTJUL,DTDBL         ADD DAYS TO JULIAN DATE
DTCJ05   BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*        CONSTANTS AND WORK AREAS                                     *
***********************************************************************
         LTORG
SAVE6    DS    18F
DTPARM   DS    F                   ADDRESS OF INPUT PARM
DTDBL    DS    D                   DOUBLE WORD WORK AREA
DTVER    DS    D                   DOUBLE WORD WORK AREA
DTYPE    DS    CL2                 INPUT DATE CONVERSION TYPE
DTJUL    DS    PL4                 JULIAN DATE (YYYYDDDS)
DTGREG   DS    PL5                 GREGORIAN DATE (0YYYYNNDDS)
DTCENT   DS    F                   CENTURY DATE (NNNNN)
DTMISC   DC    X'00'               MISCELLANEOUS BIT SWITCHES
LEAPYEAR EQU   X'80'               SPECIFIED YEAR IS A LEAP YEAR
***********************************************************************
*        DAY-PER-MONTH TABLE                                          *
***********************************************************************
DTDAYTBL DS    0H
         DC    H'31'
         DC    H'28'
         DC    H'31'
         DC    H'30'
         DC    H'31'
         DC    H'30'
         DC    H'31'
         DC    H'31'
         DC    H'30'
         DC    H'31'
         DC    H'30'
         DC    H'31'
         DROP  R9,R10,R11,R12
         POP   USING
CONSTANT CSECT
***********************************************************************
*                                                                     *
*        PROGRAM CONSTANTS AND WORK AREAS                             *
*                                                                     *
***********************************************************************
JG       DC    C'JG'               CONVERT DATE CONSTANT
JC       DC    C'JC'               CONVERT DATE CONSTANT
CJ       DC    C'CJ'               CONVERT DATE CONSTANT
CG       DC    C'CG'               CONVERT DATE CONSTANT
GJ       DC    C'GJ'               CONVERT DATE CONSTANT
GC       DC    C'GC'               CONVERT DATE CONSTANT
LOWDATE  DC    PL4'9999999'        LOWEST DATE IN SMF DATA
LOWTIME  DC    X'7FFFFFFF'         LOWEST TIME IN SMF DATA
HIGHDATE DC    PL4'0'              HIGHEST DATE IN SMF DATA
HIGHTIME DC    F'0'                HIGHEST TIME IN SMF DATA
RECADDR  DC    F'0'                ADDRESS OF LAST RECORD
RETURN   DS    F                   SAVE AREA FOR RETURN ADDRESS
SAVEPRMD DS    18F                 SAVE AREA FOR PRMDTT ROUTINE
WKDAYRET DS    F                   SAVE AREA FOR RETURN ADDRESS
DATEJUL  DS    PL4                 JULIAN DATE (YYYYDDDS)
DATEGREG DS    PL5                 GREGORIAN DATE (0YYYYMMDDS)
DATEWORK DS    ZL8                 DATE WORK AREA
ABCODE   DS    F                   PROGRAM USER ABEND CODE
DOUBLE   DS    D                   DOUBLE WORD WORK AREA
WORK     DS    16C                 MISCELLANEOUS WORK AREA
DBL      DS    D                   DOUBLE WORD WORK AREA
PJDATE   DS    XL4                 SMF DATE (YYYYDDDS)
MMB      DS    H                   BINARY MONTH
DDB      DS    H                   BINARY DAY
YYYYB    DS    H                   BINARY YEAR
DAYOFWK  DS    H                   DAY-OF-WEEK NUMBER
         SPACE 3
BIGMASK1 DC    X'40202020202020202020202020202020202020206B2020206B2020X
               206B2020206B202120'
RETADD   DC    F'0'                RETURN ADDRESS FROM CURRENT ROUTINE
VALJOBNM DC    X'00',X'00',CL8' '  DEFAULT JOBNAME VALUE
JOBNMTBL DC    F'0'                JOBNAME TABLE
XJOBNTBL DC    F'0'                EXCLUDED JOBNAME TABLE
DATETBL  DC    F'0'                DATE TABLE
VALTIME  DC    C'00.00',C'99.99'   DEFAULT TIME RANGES
OTIMETBL DC    F'0'                OPEN TIME TABLE
CTIMETBL DC    F'0'                CLOSE TIME TABLE
VALSYSID DC    C'    '             DEFAULT SYSID VALUE
SYSIDTBL DC    F'0'                SYSID TABLE
XSYSTBL  DC    F'0'                EXCLUDED SYSID TABLE
         DS    0H
VALDSN   DC    AL2(0),CL44' '      DEFAULT DATASET NAME VALUE
DSNTBL   DC    F'0'                DSNAME TABLE
XDSNTBL  DC    F'0'                EXCLUDED DSNAME TABLE
         DS    0H
VALDDN   DC    AL2(0),CL8' '       DEFAULT DD NAME VALUE
DDNTBL   DC    F'0'                DDAME TABLE
XDDNTBL  DC    F'0'                EXCLUDED DDAME TABLE
VALACC   DC    C' '                DEFAULT ACCESS TYPE VALUE
ACCTBL   DC    F'0'                ACCESS TYPE TABLE
VALUNIT  DC    CL4' '              DEFAULT UNIT TYPE VALUE
UNITTBL  DC    F'0'                UNIT TYPE TABLE
         DS    0H
VALVOL   DC    AL2(0),CL6' '       DEFAULT VOLSER VALUE
VOLTBL   DC    F'0'                VOLSER TABLE
XVOLTBL  DC    F'0'                EXCLUDED VOLSER TABLE
VALDSO   DC    CL3' '              DEFAULT DSORG VALUE
DSORGTBL DC    F'0'                DSORG TABLE
VALRFM   DC    CL3' '              DEFAULT RECFM VALUE
RECFMTBL DC    F'0'                RECFM TABLE
         DS    0H
VALLRGE  DC    H'0'                DEFAULT LRECL GE VALUE
VALLRLE  DC    H'0'                DEFAULT LRECL LE VALUE
VALBSZGE DC    H'0'                DEFAULT BLKSIZE GE VALUE
VALBSZLE DC    H'0'                DEFAULT BLKSIZE LE VALUE
VALBCGE  DC    F'0'                DEFAULT BLOCK COUNT GE VALUE
VALBCLE  DC    F'0'                DEFAULT BLOCK COUNT LE VALUE
VALTYPE  DC    C' '                DEFAULT JOB TYPE
VALSTCNT DC    F'0'                DEFAULT STOP COUNT
OUTCNT   DC    F'0'                ACTUAL OUTPUT COUNT
DATES    DC    PL4'0'              START DATE
DATEE    DC    PL4'99999'          END DATE
TIMES    DC    F'0'                START TIME
TIMEE    DS    AL4(4096*4096)      END TIME
DDNAME   DS    CL8                 DDNAME FIELD FOR TIOT SEARCH ROUTINE
BLKSIZE  DS    H                   SAVE AREA FOR INPUT BLKSIZE
LRECL    DS    H                   SAVE AREA FOR INPUT LRECL
RECFM    DS    X                   SAVE AREA FOR INPUT RECFM
SWITCH   DC    X'00000000000000'   MULTIPURPOSE BIT SWITCHES
*        SWITCH+0 INDICATORS
ENDFILE  EQU   X'80'               END OF FILE REACHED ON SMFIN
SELSORT  EQU   X'20'               SORT REQUESTED
SELDATE  EQU   X'10'               DATE SELECTION REQUESTED
SELCTIME EQU   X'08'               CLOSE TIME SELECTION REQUESTED
SELJOBNM EQU   X'04'               JOBNAME SELECTION REQUESTED
SELSYSID EQU   X'02'               SYSID SELECTION REQUESTED
SELOTIME EQU   X'01'               OPEN TIME SELECTION REQUESTED
*        SWITCH+1 INDICATORS
SELODAY  EQU   X'80'               OPEN  DAY-OF-WEEK SEL REQUESTED
SELCDAY  EQU   X'40'               CLOSE DAY-OF-WEEK SEL REQUESTED
OPTOUT   EQU   X'20'               OPTIONAL OUTPUT FILE SPECIFIED
*        SWITCH+2 INDICATORS
SELBCGE  EQU   X'80'               SELECT ON BLOCK COUNT GE
SELBCLE  EQU   X'40'               SELECT ON BLOCK COUNT LE
SELLRLGE EQU   X'20'               SELECT ON LRECL GE
SELLRLLE EQU   X'10'               SELECT ON LRECL LE
SELBSZGE EQU   X'08'               SELECT ON BLKSIZE GE
SELBSZLE EQU   X'04'               SELECT ON BLKSIZE LE
*        SWITCH+3 INDICATORS
SELTYPE  EQU   X'80'               SELECT ON JOB TYPE
SELSTCNT EQU   X'40'               SELECT ON STOP COUNT
SELDSO   EQU   X'20'               SELECT ON DSORG
*        SWITCH+4 INDICATORS
SELDSN   EQU   X'80'               SELECT ON DSN
SELDDN   EQU   X'40'               SELECT ON DDNAME
SELACC   EQU   X'20'               SELECT ON ACCESS TYPE
SELUNIT  EQU   X'10'               SELECT ON UNIT TYPE
SELVOL   EQU   X'08'               SELECT ON VOLSER
SELRFM   EQU   X'04'               SELECT ON RECFM
SELPRINT EQU   X'02'               CUSTOMIZED PRINT REPORT REQUESTED
*        SWITCH+5 INDICATORS
*        SWITCH+6 INDICATORS
*
ODAYSW   DC    X'00'               OPEN  DAY-OF-WEEK SWITCHES
CDAYSW   DC    X'00'               CLOSE DAY-OF-WEEK SWITCHES
SUN      EQU   X'80'               SELECT SUNDAY
MON      EQU   X'40'               SELECT MONDAY
TUE      EQU   X'20'               SELECT TUESDAY
WED      EQU   X'10'               SELECT WEDNESDAY
THU      EQU   X'08'               SELECT THURSDAY
FRI      EQU   X'04'               SELECT FRIDAY
SAT      EQU   X'02'               SELECT SATURDAY
LINECT   DC    PL2'99'             LINE COUNTER
PAGECT   DC    PL3'0'              PAGE COUNTER
OUTTIME  DS    CL12                CONVERTED TIME AREA (HHH.MM.SS.TT)
TMOUT    DS    CL7                 CONVERTED TIME AREA (HHHMMSS)
LASTVOL  DS    CL6                 LAST VOLSER PROCESSED FOR DSN
ACC1     DC    PL16'0'             ACCUMULATOR 1  (LINE COUNTER)
DAYTABLE DC    CL21'SUNMONTUEWEDTHUFRISAT' DAYS OF THE WEEK
         DS    0F
SORTPARM DC    X'80',AL3(SORTA)
         DC    H'0'
SORTA    DC    H'28'               LENGTH OF PARAMETER LIST
         DC    A(SORTM)            ADDRESS OF START OF SORT STMT
         DC    A(SORTENDM)         ADDRESS OF END OF SORT STMT
         DC    A(RECM)             ADDRESS OF START OF RECORD STMT
         DC    A(RECENDM)          ADDRESS OF END OF RECORD STMT
         DC    A(E15)              ADDRESS OF E15 EXIT
         DC    A(E35)              ADDRESS OF E35 EXIT
         DC    F'80000'            MAIN STORAGE FOR SORT
SORTM    DC    C' SORT FIELDS=('   START OF SORT FIELDS STMT
SRTFLDS  DC    C'           '      ROOM FOR FIRST SORT FIELD + ','
         DC    C'           '      ROOM FOR SECOND SORT FIELD + ','
         DC    C'           '      ROOM FOR THIRD SORT FIELD + ','
         DC    C'           '      ROOM FOR FOURTH SORT FIELD + ','
         DC    C'           '      ROOM FOR FIFTH SORT FIELD + ')'
SORTENDM DC    C' '                END OF SORT FIELDS STMT
RECM     DC    C' RECORD TYPE=V,LENGTH=(1700,1700,1700,124,124)'
RECENDM  DC    C' '                END OF RECORD STMT
         SPACE 3
HEAD     DS    0CL133              PARM HEADINGS
         DC    C'1'                ANS CONTROL CHARACTER
         DC    30C' '
         DC    CL50'INPUT PARMS SELECTED FOR FLSMFDSN REL 3.0'
         DC    52C' '
         SPACE 3
CARDREC  DS    0CL133              PARM CARDS
         DC    C'0'                ANS CONTROL CHARACTER
         DC    30C' '
CARDAREA DC    80C' '              SAVE AREA FOR INPUT CARD
         DC    22C' '
         SPACE 3
HEAD1    DS    0CL133              HEADING LINE1
         DC    C'1'                ANS CONTROL CHARACTER
         DC    40C' '
         DC    CL50'DATASET ACCESS REPORT'
         DC    31C' '
         DC    CL4'PAGE'
OPAGCT   DC    CL6' '              PAGE COUNT
         DC    C' '
         SPACE 3
HEAD2A   DC    CL1'0',CL132' '     HEADING LINE2A
         SPACE 3
HEAD2B   DC    CL1' ',CL132' '     HEADING LINE2B
         SPACE 3
HEAD3    DC    CL1'0',CL132' '     TOTALS HEADING
         ORG   HEAD3+1
         DC    C'SMF START DATE: '
HLDATE   DS    CL10
         DC    C' '
HLTIME   DS    CL5
         ORG HEAD3+132-30
         DC    C'SMF END DATE: '
HHDATE   DS    CL10
         DC    C' '
HHTIME   DS    CL5
         ORG
HEAD4    DC    CL1'0',CL132' '     TOTALS HEADING
         ORG   HEAD4+17+35-10
         DC    C'TOTALS'
         ORG
         SPACE 3
DETAIL   DC    CL133' '            DETAIL PRINT RECORD
         SPACE 3
OJOBNAME DC    CL8' '              JOBNAME
OOJDATE  DC    CL8' '              OPEN  DATE (YYYY.DDD)
OOGDATE  DC    CL10' '             OPEN  DATE (YYYY/MM/DD)
OCJDATE  DC    CL8' '              CLOSE DATE (YYYY.DDD)
OCGDATE  DC    CL10' '             CLOSE DATE (YYYY/MM/DD)
OOTIME   DC    CL5' '              OPEN  TIME (HH.MM)
OCTIME   DC    CL5' '              CLOSE TIME (HH.MM)
OSYSID   DC    CL4' '              SMF SYSTEM ID
ODSN     DC    CL44' '             DATASET NAME
ODDN     DC    CL8' '              DD NAME
OACC     DC    CL1' '              ACCESS TYPE
OUNIT    DC    CL4' '              UNIT TYPE
OVOL     DC    CL6' '              VOLUME SERIAL NUMBER
ODSO     DC    CL3' '              DATASET ORGANIZATION
ORECFM   DC    CL3' '              RECORD FORMAT
OLRECL   DC    CL6' '              LOGICAL RECORD LENGTH
OBLKSZ   DC    CL6' '              PHYSICAL BLOCK LENGTH
OEXCPS   DC    CL10' '             EXCP COUNT (NN,NNN,NNN)
OTYPE    DC    CL1' '              TEST/PRODUCTION JOB TYPE
OODAY    DC    CL3' '              OPEN DAY-OF-THE-WEEK
OCDAY    DC    CL3' '              CLOSE DAY-OF-THE-WEEK
         EJECT
         PRINT NOGEN
SYSIN    DCB   DDNAME=SYSIN,MACRF=GM,DSORG=PS,EODAD=ENDPARM,LRECL=80
SMFIN    DCB   DDNAME=SMFIN,MACRF=GL,DSORG=PS,EODAD=EOF,BFTEK=A
SYSPRINT DCB   DDNAME=SYSPRINT,MACRF=PM,DSORG=PS,LRECL=133,RECFM=FBA
DATAOUT  DCB   DDNAME=DATAOUT,MACRF=PM,DSORG=PS,LRECL=1700,RECFM=VB
         PRINT GEN
         EJECT
***********************************************************************
*        NEW RECORD CREATED FROM SMF TYPE 14, 15, OR 64 RECORD        *
***********************************************************************
INREC    DS    0CL120
INRDW    DS    XL4              VARIABLE RECORD RDW
INJBN    DS    CL8              5  JOB NAME
INOJDATE DS    PL4              13 OPEN  DATE (YYYYDDDS)
INOTIME  DS    XL4              17 OPEN  TIME (SEC/100)
INCJDATE DS    PL4              21 CLOSE DATE (YYYYDDDS)
INCTIME  DS    XL4              25 CLOSE TIME (SEC/100)
INSID    DS    CL4              29 SMF SYSTEM ID
INDSN    DS    CL44             33 DATASET NAME
INDDN    DS    CL8              77 DDNAME
INACC    DS    CL1              85 ACCESS TYPE
INUNIT   DS    CL4              86 UNIT TYPE
INDSO    DS    CL3              90 DATASET ORGANIZATION
INRECFM  DS    CL3              93 RECORD FORMAT
INTYPE   DS    CL1              96 JOB TYPE (T/P)
INLRECL  DS    XL2              97 LOGICAL RECORD LENGTH
INBLKSZ  DS    XL2              99 BLOCK SIZE
INTEP    DS    XL4             101 EXCPS
INODAY   DS    XL2             105 OPEN DAY-OF-THE-WEEK (1-7)
INCDAY   DS    XL2             107 CLOSEDAY-OF-THE-WEEK (1-7)
INOGDATE DS    PL5             109 OPEN DATE  (0YYYYMMDDS)
INCGDATE DS    PL5             114 CLOSE DATE (0YYYYMMDDS)
INVOLCNT DS    XL2             119 VOLSER COUNT
INVOL    DS    CL6             121 VOLSER
         DS    255CL6           REST OF VOLSERS
         EJECT
SMFT14   DSECT
         IFASMFR 14
         EJECT
SMFT64   DSECT
         IFASMFR 64
         EJECT
JFCB     DSECT
         IEFJFCBN
         EJECT
         DCBD  DSORG=QS,DEVD=DA
         EJECT
***********************************************************************
*                                                                     *
*        THIS IS A TABLE OF ERROR MESSAGES                            *
*                                                                     *
*        EACH ENTRY IS 120 BYTES LONG.  EACH ENTRY CONTAINS THE       *
*        EXACT TEXT TO BE PLACED IN A WTO MESSAGE IF THIS ERROR       *
*        OCCURS.  AN ERROR INDEX WILL BE USED TO SPECIFY WHICH        *
*        ERROR MESSAGE WILL BE USED.  THIS TECHNIQUE PREVENTS         *
*        ALL OF THE ERROR MESSAGES FROM USING UP A LOT OF BASE        *
*        REGISTERS.                                                   *
*                                                                     *
*        AN ERROR INDEX OF 1 WILL CAUSE THE FIRST 120 CHARACTERS      *
*        TO BE USED.  AN ERROR INDEX OF 2 WILL CAUSE THE NEXT         *
*        120 CHARACTERS TO BE USED, ETC.                              *
*                                                                     *
***********************************************************************
MSGTBL   CSECT
         DC    CL120'SMF2001 - INVALID KEYWORD ON INPUT SYSIN CARD     X
                                                                       X
                             '
         DC    CL120'SMF2002 - INVALID JOBNAME VALUE ON SYSIN CARD - MUX
               ST BE 1 TO 8 ALPHANUMERIC CHARACTERS                    X
                             '
         DC    CL120'SMF2003 - INVALID JOBNAME VALUE ON SYSIN CARD - INX
               DEX FIELD WAS NOT PRECEDED BY THE JOBNAME               X
                             '
         DC    CL120'SMF2004 - INVALID JOBNAME VALUE ON SYSIN CARD - JOX
               BNAME EXCEEDS 8 CHARACTERS                              X
                             '
         DC    CL120'SMF2005 - INVALID JOBNAME VALUE ON SYSIN CARD - INX
               DEX LENGTH EXCEEDS 2 CHARACTERS                         X
                             '
         DC    CL120'SMF2006 - INVALID JOBNAME VALUE ON SYSIN CARD - INX
               DEX VALUE IS NOT NUMERIC                                X
                             '
         DC    CL120'SMF2007 - INVALID DATE VALUE ON SYSIN CARD - BEGINX
                DATE NOT IN THE FORM YY.DDD, YYYY.DDD, MM/DD/YY, OR YYYX
               Y/MM/DD       '
         DC    CL120'SMF2008 - INVALID DATE VALUE ON SYSIN CARD - BEGINX
                DATE NOT SEPARATED FROM END DATE BY ":"                X
                             '
         DC    CL120'SMF2009 - INVALID DATE VALUE ON SYSIN CARD - END DX
               ATE NOT IN THE FORM YY.DDD, YYYY.DDD, MM/DD/YY, OR YYYY/X
               MM/DD         '
         DC    CL120'SMF2010 - INVALID ODAY SUBPARAMETER ON SYSIN CARD X
               - NO SUBPARAMETERS ENTERED                              X
                             '
         DC    CL120'SMF2011 - INVALID ODAY SUBPARAMETER ON SYSIN CARD X
               - NULL PARAMETER ENTERED                                X
                             '
         DC    CL120'SMF2012 - INVALID ODAY SUBPARAMETER ON SYSIN CARD X
               - UNKNOWN SUBPARAMETER ENTERED                          X
                             '
         DC    CL120'SMF2013 - INVALID COMBINATION OF OPEN DAY-OF-WEEK X
               SELECT STATEMENTS RESULTING IN NO ELIGIBLE DAYS         X
                             '
         DC    CL120'SMF2014 - INVALID OPEN TIME VALUE ON SYSIN CARD - X
               BEGIN TIME NOT IN THE FORM HH.MM                        X
                             '
         DC    CL120'SMF2015 - INVALID OPEN TIME VALUE ON SYSIN CARD - X
               BEGIN TIME NOT SEPARATED FROM END TIME BY ":"           X
                             '
         DC    CL120'SMF2016 - INVALID OPEN TIME VALUE ON SYSIN CARD - X
               END TIME NOT IN THE FORM HH.MM                          X
                             '
         DC    CL120'SMF2017 - INVALID CLOSE TIME VALUE ON SYSIN CARD -X
                BEGIN TIME NOT IN THE FORM HH.MM                       X
                             '
         DC    CL120'SMF2018 - INVALID CLOSE TIME VALUE ON SYSIN CARD -X
                BEGIN TIME NOT SEPARATED FROM END TIME BY ":"          X
                             '
         DC    CL120'SMF2019 - INVALID CLOSE TIME VALUE ON SYSIN CARD -X
                END TIME NOT IN THE FORM HH.MM                         X
                             '
         DC    CL120'SMF2020 - MORE THAN 1000 CLOSE TIME RANGE SELECT SX
               TATEMENTS ENTERED                                       X
                             '
         DC    CL120'SMF2021 - INVALID SYSTEM VALUE ON SYSIN CARD - MUSX
               T BE 1 TO 4 ALPHANUMERIC CHARACTERS                     X
                             '
         DC    CL120'SMF2022 - INVALID SORT SUBPARAMETER ON SYSIN CARD X
               - NO SUBPARAMETERS ENTERED                              X
                             '
         DC    CL120'SMF2023 - INVALID SORT SUBPARAMETER ON SYSIN CARD X
               - MORE THAN 5 SUBPARAMETERS ENTERED                     X
                             '
         DC    CL120'SMF2024 - INVALID SORT SUBPARAMETER ON SYSIN CARD X
               - UNKNOWN SUBPARAMETER ENTERED                          X
                             '
         DC    CL120'SMF2025 - INVALID SORT SUBPARAMETER ON SYSIN CARD X
               - SUBPARAMETERS NOT SEPARATED BY ","                    X
                             '
         DC    CL120'SMF2026 - INVALID SORT SUBPARAMETER ON SYSIN CARD X
               - NULL PARAMETER ENTERED                                X
                             '
         DC    CL120'SMF2027 - INVALID DATASET ORGANIZATION ON SYSIN CAX
               RD - MUST BE SEQ, PDS, DA, IS, UNK, OR ALL              X
                             '
         DC    CL120'SMF2028 - INVALID EXJOBNAME VALUE ON SYSIN CARD - X
               INDEX FIELD WAS NOT PRECEDED BY THE JOBNAME             X
                             '
         DC    CL120'SMF2029 - INVALID ACCESS TYPE ON SYSIN CARD - MUSTX
                BE I, O, OR A FOR INPUT, OUTPUT, OR ALL TYPES          X
                             '
         DC    CL120'SMF2030 - SYSPRINT DD STATEMENT MISSING - JOB ABORX
               TED                                                     X
                             '
         DC    CL120'SMF2031 - SMFIN DD STATEMENT MISSING - JOB ABORTEDX
                                                                       X
                             '
         DC    CL120'SMF2032 - INVALID KEYWORD OPERATOR ON SYSIN INPUT X
               CARD - NOT VALID FOR THIS KEYWORD                       X
                             '
         DC    CL120'SMF2033 - NULL KEYWORD ON SYSIN INPUT CARD        X
                                                                       X
                             '
         DC    CL120'SMF2034 - INVALID VOLSER ON SYSIN CARD - MUST BE 1X
                TO 6 ALPHANUMERIC DIGITS                               X
                             '
         DC    CL120'SMF2035 - INVALID RECFM ON SYSIN CARD - MUST BE F/X
                FB/FBA/FBM/FA/FM/V/VB/VBA/VBM/VBS/VA/BM/U              X
                             '
         DC    CL120'SMF2036 - INVALID UNIT TYPE ON SYSIN CARD - MUST BX
               E DISK/TAPE/ALL                                         X
                             '
         DC    CL120'SMF2037 - INVALID BLOCK SIZE ON SYSIN CARD - MUST X
               BE 1 TO 5 NUMERIC DIGITS AND NOT EXCEED 32,767          X
                             '
         DC    CL120'SMF2038 - INVALID LOGICAL RECORD LENGTH ON SYSIN CX
               ARD - MUST BE 1 TO 5 NUMERIC DIGITS AND NOT EXCEED 32,76X
               7             '
         DC    CL120'SMF2039 - INVALID EXJOBNAME VALUE ON SYSIN CARD - X
               JOBNAME EXCEEDS 8 CHARACTERS                            X
                             '
         DC    CL120'SMF2040 - INVALID I/O COUNT VALUE ON SYSIN CARD - X
               MUST BE 1 TO 9 NUMERIC DIGITS                           X
                             '
         DC    CL120'SMF2041 - INVALID EXJOBNAME VALUE ON SYSIN CARD - X
               INDEX LENGTH EXCEEDS 2 CHARACTERS                       X
                             '
         DC    CL120'SMF2042 - INVALID JOB TYPE VALUE ON SYSIN CARD - MX
               UST BE "T" OR "P" TO INDICATE TEST OR PRODUCTION        X
                             '
         DC    CL120'SMF2043 - INVALID STOP COUNT VALUE ENTERED ON SYSIX
               N CARD - MUST BE 1 TO 9 NUMERIC DIGITS                  X
                             '
         DC    CL120'SMF2044 - INVALID DATASET NAME ON SYSIN CARD - MUSX
               T BE 1 TO 44 ALPHANUMERIC CHARACTERS                    X
                             '
         DC    CL120'SMF2045 - INDALID DDNAME ON SYSIN CARD - MUST BE 1X
                TO 8 ALPHANUMERIC CHARACTERS                           X
                             '
         DC    CL120'SMF2046 - INTERNAL ERROR - NO FIELDS SELECTED FOR X
               PRINTING                                                X
                             '
         DC    CL120'SMF2047 - INTERNAL ERROR - PRINT SELECTED FOR NON-X
               PRINTABLE OPTION                                        X
                             '
         DC    CL120'SMF2048 - PRINT SPECIFICATION ERROR - THE GENERATEX
               D PRINT LINE EXCEEDS 133 CHARACTERS                     X
                             '
         DC    CL120'SMF2049 - INVALID PRINT SUBPARAMETER ON SYSIN CARDX
                - NULL PARAMETER ENTERED                               X
                             '
         DC    CL120'SMF2050 - INVALID PRINT SUBPARAMETER ON SYSIN CARDX
                - UNKNOWN SUBPARAMETER ENTERED                         X
                             '
         DC    CL120'SMF2051 - INVALID PRINT SUBPARAMETER ON SYSIN CARDX
               - MORE THAN 30 SUBPARAMETERS ENTERED                    X
                             '
         DC    CL120'SMF2052 - INVALID PRINT SUBPARAMETER ON SYSIN CARDX
                - SUBPARAMETERS NOT SEPARATED BY ","                   X
                             '
         DC    CL120'SMF2053 - INVALID PRINT SUBPARAMETER ON SYSIN CARDX
                - NO SUBPARAMETERS ENTERED                             X
                             '
         DC    CL120'SMF2054 - MORE THAN 1000 JOBNAME SELECT STATEMENTSX
                ENTERED                                                X
                             '
         DC    CL120'SMF2055 - MORE THAN 1000 DATE RANGE SELECT STATEMEX
               NTS ENTERED                                             X
                             '
         DC    CL120'SMF2056 - MORE THAN 1000 OPEN TIME RANGE SELECT STX
               ATEMENTS ENTERED                                        X
                             '
         DC    CL120'SMF2057 - MORE THAN 1000 SYSTEM ID NAME SELECT STAX
               TEMENTS ENTERED                                         X
                             '
         DC    CL120'SMF2058 - MORE THAN 1000 DATASET NAME SELECT STATEX
               MENTS ENTERED                                           X
                             '
         DC    CL120'SMF2059 - MORE THAN 1000 DD NAME SELECT STATEMENTSX
                ENTERED                                                X
                             '
         DC    CL120'SMF2060 - MORE THAN 1000 ACCESS TYPE SELECT STATEMX
               ENTS ENTERED                                            X
                             '
         DC    CL120'SMF2061 - MORE THAN 1000 UNIT TYPE SELECT STATEMENX
               TS ENTERED                                              X
                             '
         DC    CL120'SMF2062 - MORE THAN 1000 VOLUME SERIAL NUMBER SELEX
               CT STATEMENTS ENTERED                                   X
                             '
         DC    CL120'SMF2063 - MORE THAN 1000 DATASET ORGANIZATION TYPEX
                SELECT STATEMENTS ENTERED                              X
                             '
         DC    CL120'SMF2064 - MORE THAN 1000 RECORD FORMAT TYPE SELECTX
                STATEMENTS ENTERED                                     X
                             '
         DC    CL120'SMF2065 - INVALID EXJOBNAME VALUE ON SYSIN CARD - X
               INDEX VALUE IS NOT NUMERIC                              X
                             '
         DC    CL120'SMF2066 - MORE THAN 1000 EXJOBNAME SELECT STATEMENX
               TS ENTERED                                              X
                             '
         DC    CL120'SMF2067 - INVALID EXJOBNAME VALUE ON SYSIN CARD - X
               MUST BE 1 TO 8 ALPHANUMERIC CHARACTERS                  X
                             '
         DC    CL120'SMF2068 - INVALID EXSYSTEM VALUE ON SYSIN CARD - MX
               UST BE 1 TO 4 ALPHANUMERIC CHARACTERS                   X
                             '
         DC    CL120'SMF2069 - MORE THAN 1000 EXSYSTEM ID NAME SELECT SX
               TATEMENTS ENTERED                                       X
                             '
         DC    CL120'SMF2070 - INVALID EXDATASET NAME ON SYSIN CARD - MX
               UST BE 1 TO 44 ALPHANUMERIC CHARACTERS                  X
                             '
         DC    CL120'SMF2071 - MORE THAN 1000 EXDATASET NAME SELECT STAX
               TEMENTS ENTERED                                         X
                             '
         DC    CL120'SMF2072 - INDALID EXDDNAME ON SYSIN CARD - MUST BEX
                1 TO 8 ALPHANUMERIC CHARACTERS                         X
                             '
         DC    CL120'SMF2073 - MORE THAN 1000 EXDD NAME SELECT STATEMENX
               TS ENTERED                                              X
                             '
         DC    CL120'SMF2074 - INVALID EXVOLSER ON SYSIN CARD - MUST BEX
                1 TO 6 ALPHANUMERIC DIGITS                             X
                             '
         DC    CL120'SMF2075 - MORE THAN 1000 EXVOLUME SERIAL NUMBER SEX
               LECT STATEMENTS ENTERED                                 X
                             '
         DC    CL120'SMF2076 - INVALID COMBINATION OF CLOSE DAY-OF-WEEKX
                SELECT STATEMENTS RESULTING IN NO ELIGIBLE DAYS        X
                             '
         DC    CL120'SMF2077 - INVALID CDAY SUBPARAMETER ON SYSIN CARD X
               - NO SUBPARAMETERS ENTERED                              X
                             '
         DC    CL120'SMF2078 - INVALID CDAY SUBPARAMETER ON SYSIN CARD X
               - NULL PARAMETER ENTERED                                X
                             '
         DC    CL120'SMF2079 - INVALID CDAY SUBPARAMETER ON SYSIN CARD X
               - UNKNOWN SUBPARAMETER ENTERED                          X
                             '
         EJECT
***********************************************************************
*                                                                     *
*        THIS IS A TABLE OF INPUT OPTIONS                             *
*                                                                     *
*        EACH ENTRY IS 34 BYTES LONG.  AN ENTRY WHICH BEGINS          *
*        WITH A X'FF' INDICATES END OF THE TABLE.                     *
*                                                                     *
*        EACH ENTRY HAS THE FOLLOWING FORMAT:                         *
*                                                                     *
*        1)  HALFWORD MACHINE MINIMUM LENGTH OF THE KEYWORD           *
*            WHICH FOLLOWS.  FOR EXAMPLE - A VALUE OF 2 STATES        *
*            THAT THE FIRST 3 OR MORE CHARACTERS CAN ALSO BE          *
*            CONSIDERED A MATCH PROVIDING ABBREVIATIONS FOR           *
*            SOME OF THE KEYWORDS.                                    *
*                                                                     *
*        2)  HALFWORD INDEX VALUE.  THIS INDEX IS USED IN             *
*            IN SEVERAL PLACES AS A BRANCH TABLE OFFSET FOR           *
*            QUICK ENTRY TO PROCESSING FOR THAT KEYWORD.              *
*            IT IS USED FOR INPUT OPTIONS, SORT OPTIONS,              *
*            HEADING PROCESSING, OUTPUT PROCESSING, AND               *
*            TOTALS PROCESSING.  THE OFFSET FOR A KEYWORD             *
*            IS USED CONSISTANTLY IN EACH BRANCH TABLE.               *
*                                                                     *
*        3)  A 12 CHARACTER KEYWORD.  SHORTER FORMS OF THIS           *
*            VALUE MAY ALSO BE ACCEPTABLE DEPENDING ON THE            *
*            FIRST TWO BYTES OF THIS TABLE ENTRY.                     *
*                                                                     *
*        4)  1 CHARACTER OPTION INDICATOR.  IF THIS POSITION          *
*            CONTAINS A "Y", THEN THIS KEYWORD CAN BE USED AS         *
*            A SELECTION OPTION WITH AN ACCOMPANYING VALUE TO         *
*            BE USED FOR COMPARISONS.                                 *
*                                                                     *
*        5)  1 CHARACTER SORT INDICATOR.  IF THIS POSITION            *
*            CONTAINS A "Y", THEN THIS KEYWORD CAN BE USED AS         *
*            A SORT SUBPARAMETER.                                     *
*                                                                     *
*        6)  1 CHARACTER PRINTABLE INDICATOR.  IF THIS POSITION       *
*            CONTAINS A "Y", THEN THIS KEYWORD CAN BE USED TO         *
*            SELECT A FIELD FOR PRINTING.                             *
*                                                                     *
*        7)  1 CHARACTER DAY INDICATOR.  IF THIS POSITION             *
*            CONTAINS A "Y", THEN THIS KEYWORD CAN BE USED TO         *
*            SET DAY-OF-WEEK INDICATORS.                              *
*                                                                     *
*        8)  1 CHARACTER UNUSED                                       *
*                                                                     *
*        9)  1 DIGIT DEFAULT OUTPUT SEQUENCE NUMBER.  IF NO           *
*            PRINT STATEMENT IS ENTERED, THEN THIS DIGIT              *
*            DETERMINES WHICH OUTPUT FIELDS WILL BE PRINTED           *
*            AND IN WHAT ORDER.  A ZERO INDICATES NOT PRINTED         *
*            BY DEFAULT.  OTHERWISE, THE NUMBER INDICATES A           *
*            SEQUENCE NUMBER FROM 1 TO 30 FOR PRINTING.               *
*                                                                     *
*        10) 12 CHARACTER SORT CONTROL STATEMENT IF THIS              *
*            KEYWORD IS USED AS A SORT SUBPARAMETER.  THIS            *
*            IS USED TO BUILD THE SORT CONTROL STATEMENT.             *
*                                                                     *
***********************************************************************
OPTKEY   CSECT
 DC  AL2(3),AL2(000),C'JOBNAME     ',C'YYYN ',AL1(01),C'005,8,CH,A, '
 DC  AL2(3),AL2(000),C'JOBNM       ',C'YYYN ',AL1(01),C'005,8,CH,A, '
 DC  AL2(3),AL2(004),C'DATE        ',C'YYYN ',AL1(00),C'021,4,BI,A, '
 DC  AL2(3),AL2(004),C'CDATE       ',C'NYYN ',AL1(00),C'021,4,BI,A, '
 DC  AL2(7),AL2(004),C'CLOSEDATE   ',C'NYYN ',AL1(00),C'021,4,BI,A, '
 DC  AL2(1),AL2(004),C'CJDATE      ',C'NYYN ',AL1(00),C'021,4,BI,A, '
 DC  AL2(5),AL2(004),C'CLOSEJDATE  ',C'NYYN ',AL1(00),C'021,4,BI,A, '
 DC  AL2(1),AL2(008),C'TIME        ',C'YYYN ',AL1(03),C'025,4,BI,A, '
 DC  AL2(1),AL2(008),C'CTIME       ',C'YYYN ',AL1(03),C'025,4,BI,A, '
 DC  AL2(5),AL2(008),C'CLOSETIME   ',C'YYYN ',AL1(03),C'025,4,BI,A, '
 DC  AL2(1),AL2(012),C'SYSID       ',C'YYYN ',AL1(00),C'029,4,CH,A, '
 DC  AL2(1),AL2(012),C'SYSTEM      ',C'YYYN ',AL1(00),C'029,4,CH,A, '
 DC  AL2(3),AL2(016),C'DATASET     ',C'YYYN ',AL1(04),C'33,44,CH,A, '
 DC  AL2(2),AL2(016),C'DSNAME      ',C'YYYN ',AL1(04),C'33,44,CH,A, '
 DC  AL2(1),AL2(020),C'DDNAME      ',C'YYYN ',AL1(05),C'077,8,CH,A, '
 DC  AL2(1),AL2(020),C'FILENAME    ',C'YYYN ',AL1(05),C'077,8,CH,A, '
 DC  AL2(1),AL2(024),C'ACCESS      ',C'YYYN ',AL1(06),C'085,1,CH,A, '
 DC  AL2(0),AL2(028),C'UNIT        ',C'YYYN ',AL1(07),C'086,8,CH,A, '
 DC  AL2(0),AL2(032),C'VOLSER      ',C'YYYN ',AL1(08),C'121,6,CH,A, '
 DC  AL2(0),AL2(032),C'VOLUME      ',C'YYYN ',AL1(08),C'121,6,CH,A, '
 DC  AL2(2),AL2(036),C'DSORG       ',C'YYYN ',AL1(09),C'090,3,CH,A, '
 DC  AL2(0),AL2(036),C'ORG         ',C'YYYN ',AL1(09),C'090,3,CH,A, '
 DC  AL2(3),AL2(040),C'RECFM       ',C'YYYN ',AL1(10),C'093,3,CH,A, '
 DC  AL2(0),AL2(044),C'LRECL       ',C'YYYN ',AL1(11),C'097,2,BI,A, '
 DC  AL2(3),AL2(044),C'RECORDLEN   ',C'YYYN ',AL1(11),C'097,2,BI,A, '
 DC  AL2(2),AL2(048),C'BLKSIZE     ',C'YYYN ',AL1(12),C'099,2,BI,A, '
 DC  AL2(5),AL2(048),C'BLOCKLEN    ',C'YYYN ',AL1(12),C'099,2,BI,A, '
 DC  AL2(5),AL2(052),C'BLOCKCNT    ',C'YYYN ',AL1(13),C'101,4,BI,A, '
 DC  AL2(5),AL2(052),C'BLOCKCOUNT  ',C'YYYN ',AL1(13),C'101,4,BI,A, '
 DC  AL2(5),AL2(052),C'BLOCKS      ',C'YYYN ',AL1(13),C'101,4,BI,A, '
 DC  AL2(2),AL2(052),C'EXCPS       ',C'YYYN ',AL1(13),C'101,4,BI,A, '
 DC  AL2(3),AL2(056),C'JOBTYPE     ',C'YYYN ',AL1(14),C'096,1,CH,A, '
 DC  AL2(1),AL2(056),C'JTYPE       ',C'YYYN ',AL1(14),C'096,1,CH,A, '
 DC  AL2(1),AL2(056),C'TYPE        ',C'YYYN ',AL1(14),C'096,1,CH,A, '
 DC  AL2(1),AL2(060),C'STOPAFTER   ',C'YNNN ',AL1(00),C'            '
 DC  AL2(1),AL2(060),C'STOPCNT     ',C'YNNN ',AL1(00),C'            '
 DC  AL2(1),AL2(060),C'STOPCOUNT   ',C'YNNN ',AL1(00),C'            '
 DC  AL2(1),AL2(064),C'SORT        ',C'YNNN ',AL1(00),C'            '
 DC  AL2(0),AL2(068),C'PRINT       ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(072),C'EXJOBNAME   ',C'YNNN ',AL1(00),C'            '
 DC  AL2(1),AL2(072),C'XJOBNAME    ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(072),C'EXJOBNM     ',C'YNNN ',AL1(00),C'            '
 DC  AL2(1),AL2(072),C'XJOBNM      ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(076),C'EXSYSID     ',C'YNNN ',AL1(00),C'            '
 DC  AL2(1),AL2(076),C'XSYSID      ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(076),C'EXSYSTEM    ',C'YNNN ',AL1(00),C'            '
 DC  AL2(1),AL2(076),C'XSYSTEM     ',C'YNNN ',AL1(00),C'            '
 DC  AL2(3),AL2(080),C'EXDATASET   ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(080),C'XDATASET    ',C'YNNN ',AL1(00),C'            '
 DC  AL2(3),AL2(080),C'EXDSNAME    ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(080),C'XDSNAME     ',C'YNNN ',AL1(00),C'            '
 DC  AL2(3),AL2(084),C'EXDDNAME    ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(084),C'XDDNAME     ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(084),C'EXFILENAME  ',C'YNNN ',AL1(00),C'            '
 DC  AL2(1),AL2(084),C'XFILENAME   ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(088),C'EXVOLSER    ',C'YNNN ',AL1(00),C'            '
 DC  AL2(1),AL2(088),C'XVOLSER     ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(088),C'EXVOLUME    ',C'YNNN ',AL1(00),C'            '
 DC  AL2(1),AL2(088),C'XVOLUME     ',C'YNNN ',AL1(00),C'            '
 DC  AL2(1),AL2(092),C'SUNDAY      ',C'NNNY ',AL1(00),C'            '
 DC  AL2(3),AL2(096),C'NOSUNDAY    ',C'NNNY ',AL1(00),C'            '
 DC  AL2(0),AL2(100),C'MONDAY      ',C'NNNY ',AL1(00),C'            '
 DC  AL2(2),AL2(104),C'NOMONDAY    ',C'NNNY ',AL1(00),C'            '
 DC  AL2(1),AL2(108),C'TUESDAY     ',C'NNNY ',AL1(00),C'            '
 DC  AL2(3),AL2(112),C'NOTUESDAY   ',C'NNNY ',AL1(00),C'            '
 DC  AL2(2),AL2(116),C'WEDNESDAY   ',C'NNNY ',AL1(00),C'            '
 DC  AL2(4),AL2(120),C'NOWEDNESDAY ',C'NNNY ',AL1(00),C'            '
 DC  AL2(1),AL2(124),C'THURSDAY    ',C'NNNY ',AL1(00),C'            '
 DC  AL2(3),AL2(128),C'NOTHURSDAY  ',C'NNNY ',AL1(00),C'            '
 DC  AL2(1),AL2(132),C'FRIDAY      ',C'NNNY ',AL1(00),C'            '
 DC  AL2(2),AL2(136),C'NOFRIDAY    ',C'NNNY ',AL1(00),C'            '
 DC  AL2(1),AL2(140),C'SATURDAY    ',C'NNNY ',AL1(00),C'            '
 DC  AL2(3),AL2(144),C'NOSATURDAY  ',C'NNNY ',AL1(00),C'            '
 DC  AL2(4),AL2(148),C'WEEKEND     ',C'NNNY ',AL1(00),C'            '
 DC  AL2(6),AL2(152),C'NOWEEKEND   ',C'NNNY ',AL1(00),C'            '
 DC  AL2(4),AL2(156),C'WEEKDAY     ',C'NNNY ',AL1(00),C'            '
 DC  AL2(6),AL2(160),C'NOWEEKDAY   ',C'NNNY ',AL1(00),C'            '
 DC  AL2(1),AL2(164),C'EVERYDAY    ',C'NNNY ',AL1(00),C'            '
 DC  AL2(1),AL2(164),C'ALLDAYS     ',C'NNNY ',AL1(00),C'            '
 DC  AL2(2),AL2(168),C'DAYOFTHEWEEK',C'YYYN ',AL1(00),C'107,2,BI,A, '
 DC  AL2(3),AL2(168),C'CDAYOFWEEK  ',C'YYYN ',AL1(00),C'107,2,BI,A, '
 DC  AL2(7),AL2(168),C'CLOSEDAY    ',C'YYYN ',AL1(00),C'107,2,BI,A, '
 DC  AL2(3),AL2(172),C'ODATE       ',C'NYYN ',AL1(00),C'013,4,BI,A, '
 DC  AL2(6),AL2(172),C'OPENDATE    ',C'NYYN ',AL1(00),C'013,4,BI,A, '
 DC  AL2(1),AL2(172),C'OJDATE      ',C'NYYN ',AL1(00),C'013,4,BI,A, '
 DC  AL2(4),AL2(172),C'OPENJDATE   ',C'NYYN ',AL1(00),C'013,4,BI,A, '
 DC  AL2(1),AL2(176),C'OTIME       ',C'YYYN ',AL1(00),C'017,4,BI,A, '
 DC  AL2(4),AL2(176),C'OPENTIME    ',C'YYYN ',AL1(00),C'017,4,BI,A, '
 DC  AL2(3),AL2(180),C'ODAYOFWEEK  ',C'YYYN ',AL1(00),C'105,2,BI,A, '
 DC  AL2(6),AL2(180),C'OPENDAY     ',C'YYYN ',AL1(00),C'105,2,BI,A, '
 DC  AL2(1),AL2(184),C'GDATE       ',C'NYYN ',AL1(02),C'114,4,BI,A, '
 DC  AL2(1),AL2(184),C'CGDATE      ',C'NYYN ',AL1(02),C'114,4,BI,A, '
 DC  AL2(5),AL2(184),C'CLOSEGDATE  ',C'NYYN ',AL1(02),C'114,4,BI,A, '
 DC  AL2(1),AL2(188),C'OGDATE      ',C'NYYN ',AL1(00),C'109,4,BI,A, '
 DC  AL2(4),AL2(188),C'OPENGDATE   ',C'NYYN ',AL1(00),C'109,4,BI,A, '
 DC  32X'FF'
         EJECT
***********************************************************************
*                                                                     *
*        THIS IS A TABLE OF PRINT OPTIONS                             *
*                                                                     *
*        EACH ENTRY IS 6 BYTES LONG.  AN ENTRY WHICH BEGINS           *
*        WITH A X'FF' INDICATES END OF THE TABLE.                     *
*                                                                     *
*        EACH ENTRY HAS THE FOLLOWING FORMAT:                         *
*                                                                     *
*        1)  1 BYTE PRINT INDICATOR.  A "Y" INDICATES THAT            *
*            PRINTING IS DESIRED.  ANY OTHER VALUE INDICATES          *
*            NO PRINTING.                                             *
*                                                                     *
*        2)  1 BYTE FILLER                                            *
*                                                                     *
*        3)  A HALFWORD INDEX FROM THE START OF THE DETAIL LINE       *
*            TO PLACE THE OUTPUT VALUE.                               *
*                                                                     *
*        4)  A HALFWORD BRANCH TABLE OFFSET FROM LABEL "PRSETUP2"     *
*            TO PERFORM OUTPUT FIELD PRINT PROCESSING.                *
*                                                                     *
***********************************************************************
PRTOPT   CSECT
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    6X'FF'
         END
