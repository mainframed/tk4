         TITLE 'JOB RESOURCE UTILIZATION REPORT - &SYSDATE'
***********************************************************************
*                                                                     *
*                         F L S M F J O B                             *
*                                                                     *
*        THIS PROGRAM WAS WRITTEN TO FORMAT A REPORT OF SELECTED      *
*        SMF TYPE 30 STEP OR JOB STATISTICS RECORDS.                  *
*                                                                     *
*        IT WAS DEVELOPED TO PROVIDE A REPORT TO THE LARGEST          *
*        RESOURCE USERS OF THE SYSTEM.  BY PRODUCING A LIST           *
*        SORTED IN CPUTIME SEQUENCE OR EXCP COUNT SEQUENCE,           *
*        OR TAPE MOUNTS SEQUENCE, THE TOP GROUP OF JOBS IN            *
*        EACH CATAGORY CAN BE DETERMINED.  BY PRODUCING A             *
*        REPORT WITH NODETAIL AND AVERAGES REQUESTED, A               *
*        PROFILE CAN BE DETERMINED FOR THE SELECTED GROUP             *
*        OF JOBS.  THIS PROGRAM WAS USED TO SIGNIFICANTLY             *
*        REDUCE THE CPU RESOURCES OF OUR PRODUCTION BATCH             *
*        JOBS BY POINTING OUT OUR BIGGEST 'HOGS'.                     *
*                                                                     *
*                                                                     *
*                                                                     *
*        THE FOLLOWING INFORMATION CAN BE WRITTEN IN THE REPORT:      *
*                                                                     *
*        1)  COMPLETION CODE                                          *
*        2)  END DATE                                                 *
*        3)  END DAY OF THE WEEK                                      *
*        4)  END TIME                                                 *
*        5)  JOB NAME                                                 *
*        6)  JOB NUMBER                                               *
*        7)  JOB STEP NAME                                            *
*        8)  JOB TYPE (PRODUCTION OR TEST)                            *
*        9)  NON-SCRATCH TAPE MOUNTS                                  *
*        10) PAGING ACTIVITY TO AUXILLARY STORAGE                     *
*        11) PAGING ACTIVITY TO EXPANDED STORAGE                      *
*        12) PROC STEP NAME                                           *
*        13) PROGRAM NAME                                             *
*        14) SCRATCH TAPE MOUNTS                                      *
*        15) SECURITY USERID                                          *
*        16) SMF SYSTEM-ID                                            *
*        17) START DATE                                               *
*        18) START DAY OF THE WEEK                                    *
*        19) START TIME                                               *
*        20) STEP AVERAGE CPU PERCENT                                 *
*        21) STEP ELAPSED TIME                                        *
*        22) TOTAL CPU FOR STEP                                       *
*        23) TOTAL EXCPS FOR STEP                                     *
*        24) TOTAL REGION ABOVE 16 MEG                                *
*        25) TOTAL REGION BELOW 16 MEG                                *
*        26) TOTAL SERVICE UNITS                                      *
*        27) TOTAL TAPE MOUNTS                                        *
*        28) VIO PAGING                                               *
*                                                                     *
***********************************************************************
*                                                                     *
*                           NOTE                                      *
*                                                                     *
*                                                                     *
*        DAY OF THE WEEK SELECTION CAN BE MADE ON THE ACCORDING       *
*        TO THE DAY OF THE WEEK ACCORDING TO THE DATE THE STEP        *
*        STARTED OR ENDED.  THE KEYWORD SDAY IS USED TO SPECIFY       *
*        WHICH DAYS WILL BE SELECTED BASED UPON START DATE.           *
*        THE KEYWORD EDAY IS USED FOR SELECTION BASED ON STOP         *
*        DATE.  ONE OR MORE SUBPARAMETERS CAN BE SPECIFIED ON         *
*        THE SDAY OR EDAY STATEMENT OR MULTIPLE STATEMENTS            *
*        CAN BE USED.  IN EITHER CASE, THE SUBPARAMETERS ARE          *
*        PROCESSED IN THE ORDER SPECIFIED.  SOME SUBPARAMETERS        *
*        "INCLUDE" ONE OR MORE DAYS WHILE OTHERS "EXCLUDE".           *
*        BECAUSE OF THIS THE ORDER OF ENTRY IS CRITICAL.  AT          *
*        LEAST 1 "INCLUDING" STATEMENT MUST BE USED OR NO DAYS        *
*        WILL BE SELECTED.  THE "INCLUDING' STATEMENTS ARE AS         *
*        FOLLOWS:                                                     *
*                                                                     *
*        1)  SUNDAY           INCLUDE SUNDAY DATA                     *
*        2)  MONDAY           INCLUDE MONDAY DATA                     *
*        3)  TUESDAY          INCLUDE TUESDAY DATA                    *
*        4)  WEDNESDAY        INCLUDE WEDNESDAY DATA                  *
*        5)  THURSDAY         INCLUDE THURSDAY DATA                   *
*        6)  FRIDAY           INCLUDE FRIDAY DATA                     *
*        7)  SATURDAY         INCLUDE SATURDAY DATA                   *
*        8)  WEEKDAY          INCLUDE SAT AND SUN DATA                *
*        9)  WEEKEND          INCLUDE MON THROUGH FRI DATA            *
*        10) ALLDAYS/EVERYDAY INCLUDE DATA FOR ALL DAYS               *
*                                                                     *
*        AFTER "INCLUDING" DATA FOR SOME DAYS OF THE WEEK, ONE        *
*        OR MORE CAN THEN BE "EXCLUDED".  THE "EXCLUDING"             *
*        SUBPARAMETERS ARE AS FOLLOWS:                                *
*                                                                     *
*        1)  NOSUNDAY         EXCLUDE SUNDAY DATA                     *
*        2)  NOMONDAY         EXCLUDE MONDAY DATA                     *
*        3)  NOTUESDAY        EXCLUDE TUESDAY DATA                    *
*        4)  NOWEDNESDAY      EXCLUDE WEDNESDAY DATA                  *
*        5)  NOTHURSDAY       EXCLUDE THURSDAY DATA                   *
*        6)  NOFRIDAY         EXCLUDE FRIDAY DATA                     *
*        7)  NOSATURDAY       EXCLUDE SATURDAY DATA                   *
*        8)  NOWEEKDAY        EXCLUDE SAT AND SUN DATA                *
*        9)  NOWEEKEND        EXCLUDE MON THROUGH FRI DATA            *
*                                                                     *
*        IF NEITHER THE SDAY OR EDAY STATEMENT IS ENTERED, THEN       *
*        ALL DAYS ARE INCLUDED.                                       *
*                                                                     *
*        IT IS POSSIBLE THAT THROUGH AN INVALID COMBINATION OF        *
*        PARAMETERS THAT NO DATA SELECTION MAY OCCUR.  THE            *
*        PARAMETERS ARE PROCESSED IN THE ORDER ENTERED.  FOR          *
*        INSTANCE:                                                    *
*                                                                     *
*        WEEKEND                                                      *
*        NOSATURDAY                                                   *
*        NOSUNDAY                                                     *
*                                                                     *
*        THIS COMBINATION WOULD LOGICALLY EXCLUDE ALL DATA.           *
*                                                                     *
*        LIKEWISE:                                                    *
*                                                                     *
*        NOMONDAY                                                     *
*                                                                     *
*        THIS COMBINATION WOULD LOGICALLY EXCLUDE ALL DATA.           *
*        IF ONLY EXCLUDING PARAMETERS ARE ENTERED, NO SELECTION       *
*        CAN OCCUR.  IT IS PROBABLY SAFER TO ONLY USE INCLUDING       *
*        STATEMENTS.                                                  *
*                                                                     *
***********************************************************************
*                                                                     *
*                                                                     *
*        RECORD SELECTION AND CONTROL IS BY SYSIN CONTROL             *
*        STATEMENTS (IF ANY).  ANY NUMBER OF STATEMENTS CAN           *
*        BE ENTERED WITH THE KEYWORD STARTING IN COLUMN 1             *
*        OF EACH STATEMENT.                                           *
*                                                                     *
*                                                                     *
*        ALLOWABLE INPUT RECORD KEYWORDS ARE AS FOLLOWS:              *
*                                                                     *
*        1)  INTERVAL                                                 *
*                                                                     *
*            REQUESTS THAT THE REPORT BE GENERATED FROM INTERVAL      *
*            RECORDS INSTEAD OF STEP OR JOBLEVEL RECORDS.             *
*            THE SMF TYPE 30 SUBTYPES 2 AND 3 RECORDS WILL            *
*            BE USED INSTEAD OF THE SUBTYPE 4 OR 5 RECORDS.           *
*            NOTE THAT SOME OF THE INFORMATION WILL NOW BE            *
*            MEANINGLESS SUCH AS RETURN CODE.                         *
*                                                                     *
*            ALIASES *NONE*                                           *
*                                                                     *
*        2)  JOBLEVEL                                                 *
*                                                                     *
*            REQUESTS THAT A JOBLEVEL REPORT BE GENERATED             *
*            INSTEAD OF THE STEPLEVEL VERSION.  THE SMF               *
*            TYPE 30 SUBTYPE 5 RECORD WILL BE USED INSTEAD OF         *
*            THE TYPE 30 SUBTYPE 4 RECORD.  NOTE THAT SOME OF         *
*            THE INFORMATION WILL NOW BE BLANK SUCH AS THE STEP       *
*            NAME AND PROGRAM NAME.  SOME INFORMATION WILL BE         *
*            CUMULATIVE AND OTHERS MAXIMUM VALUES DEPENDING ON        *
*            THE FIELD.                                               *
*                                                                     *
*            ALIASES *NONE*                                           *
*                                                                     *
*        3)  JOBNAME=JJJJJJJJ(NN)                                     *
*            WHERE JJJJJJJJ IS A 1 TO 8 CHARACTER JOBNAME             *
*                  N IS THE STARTING POSITION WITHIN THE FULL         *
*                  JOBNAME TO BE USED FOR SELECTION                   *
*                                                                     *
*            ALIASES JOBNM                                            *
*                                                                     *
*            UP TO 1000 JOBNAME CONTROL STATEMENTS MAY BE             *
*            ENTERED                                                  *
*                                                                     *
*        4)  EXJOBNAME=JJJJJJJJ(NN)                                   *
*            WHERE JJJJJJJJ IS A 1 TO 8 CHARACTER JOBNAME             *
*                  N IS THE STARTING POSITION WITHIN THE FULL         *
*                  JOBNAME TO BE EXCLUDED FROM SELECTION              *
*                                                                     *
*            ALIASES XJOBNAME, EXJOBNM, XJOBNM                        *
*                                                                     *
*            UP TO 1000 EXJOBNAME CONTROL STATEMENTS MAY BE           *
*            ENTERED                                                  *
*                                                                     *
*        5)  JOBNO=IIIIIIII                                           *
*            WHERE IIIIIIII IS AN 8 CHARCTER JES2 JOBID IN THE        *
*                  FOLLOWING FORMAT TO BE USED FOR SELECTION:         *
*                                                                     *
*                  JOB..... OR STC..... OR TSU.....                   *
*                                                                     *
*            ALIASES JOBNUMBER, JOBID                                 *
*                                                                     *
*            UP TO 1000 JOBNUMBER CONTROL STATEMENTS MAY BE           *
*            ENTERED                                                  *
*                                                                     *
*        6)  EXJOBNO=IIIIIIII                                         *
*            WHERE IIIIIIII IS AN 8 CHARCTER JES2 JOBID IN THE        *
*                  FOLLOWING FORMAT TO BE EXCLUDED FROM SELECTION:    *
*                                                                     *
*                  JOB..... OR STC..... OR TSU.....                   *
*                                                                     *
*            ALIASES XJOBNO, EXJOBNUMBER, EXJOBID, XJOBID             *
*                                                                     *
*            UP TO 1000 EXJOBNUMBER CONTROL STATEMENTS MAY BE         *
*            ENTERED                                                  *
*                                                                     *
*        7)  DATE=SDATE:EDATE                                         *
*            WHERE SDATE IS THE START DATE AND EDATE IS THE           *
*                  OPTIONAL END DATE.  THE TWO DATES MUST HAVE        *
*                  ONE OF THE FOLLOWING FORMATS:                      *
*                                                                     *
*                  YY.DDD                                             *
*                  YYYY.DDD                                           *
*                  MM/DD/YY                                           *
*                  YYYY/MM/DD                                         *
*                                                                     *
*                                                                     *
*            ALIASES *NONE*                                           *
*                                                                     *
*            UP TO 1000 DATE RANGE CONTROL STATEMENTS MAY BE          *
*            ENTERED                                                  *
*                                                                     *
*        8)  STIME=HH.MM:HH.MM                                        *
*            WHERE HH.MM       IS THE BEGINNING TIME OF THE           *
*                              STEP START TIME RANGE                  *
*                  HH.MM:HH.MM IS THE BEGINNING:END TIME OF THE       *
*                              STEP START TIME RANGE                  *
*                                                                     *
*            ALIASES STARTTIME, TIME                                  *
*                                                                     *
*            UP TO 1000 START TIME RANGE CONTROL STATEMENTS MAY       *
*            BE ENTERED                                               *
*                                                                     *
*        9)  ETIME=HH.MM:HH.MM                                        *
*            WHERE HH.MM       IS THE BEGINNING TIME OF THE           *
*                              STEP STOP TIME RANGE                   *
*                  HH.MM:HH.MM IS THE BEGINNING:END TIME OF THE       *
*                              STEP STOP TIME RANGE                   *
*                                                                     *
*            ALIASES ENDTIME                                          *
*                                                                     *
*            UP TO 1000 STOP TIME RANGE CONTROL STATEMENTS MAY        *
*            BE ENTERED                                               *
*                                                                     *
*        10) SYSTEM=SSSS                                              *
*            WHERE SSSS IS THE 4 CHARACTER SMF SYSTEM ID TO BE        *
*                  USED FOR SELECTION                                 *
*                                                                     *
*            ALIASES SYSID                                            *
*                                                                     *
*            UP TO 1000 SYSTEM ID CONTROL STATEMENTS MAY BE           *
*            ENTERED                                                  *
*                                                                     *
*        11) EXSYSTEM=SSSS                                            *
*            WHERE SSSS IS THE 4 CHARACTER SMF SYSTEM ID TO BE        *
*                  EXCLUDED FROM SELECTION                            *
*                                                                     *
*            ALIASES XSYSTEM, EXSYSID, XSYSID                         *
*                                                                     *
*            UP TO 1000 EXSYSTEM ID CONTROL STATEMENTS MAY BE         *
*            ENTERED                                                  *
*                                                                     *
*        12) PROCSTEP=SSSSSSSS                                        *
*            WHERE SSSSSSSS IS THE STEP NAME ON THE EXECUTE           *
*                  STATEMENT WITHIN A CALLED CATALOGED                *
*                  PROCEDURE TO BE USED FOR SELECTION.                *
*                                                                     *
*            ALIASES PSTEP                                            *
*                                                                     *
*            UP TO 1000 PROCSTEP CONTROL STATEMENTS MAY BE            *
*            ENTERED                                                  *
*                                                                     *
*        13) EXPROCSTEP=SSSSSSSS                                      *
*            WHERE SSSSSSSS IS THE STEP NAME ON THE EXECUTE           *
*                  STATEMENT WITHIN A CALLED CATALOGED                *
*                  PROCEDURE TO BE EXCLUDED FROM SELECTION.           *
*                                                                     *
*            ALIASES XPROCSTEP, EXPSTEP, XPSTEP                       *
*                                                                     *
*            UP TO 1000 EXPROCSTEP CONTROL STATEMENTS MAY BE          *
*            ENTERED                                                  *
*                                                                     *
*        14) JOBSTEP=SSSSSSSS                                         *
*            WHERE SSSSSSSS IS THE STEP NAME ON THE EXECUTE           *
*                  WITHIN THE JOB WHICH EXECUTES THE PROGRAM          *
*                  OR CATALOGED PROCEDURE TO BE USED FOR              *
*                  SELECTION.                                         *
*                                                                     *
*            ALIASES JSTEP                                            *
*                                                                     *
*            UP TO 1000 JOBSTEP CONTROL STATEMENTS MAY BE             *
*            ENTERED                                                  *
*                                                                     *
*        15) EXJOBSTEP=SSSSSSSS                                       *
*            WHERE SSSSSSSS IS THE STEP NAME ON THE EXECUTE           *
*                  WITHIN THE JOB WHICH EXECUTES THE PROGRAM          *
*                  OR CATALOGED PROCEDURE TO BE EXCLUDED FROM         *
*                  SELECTION.                                         *
*                                                                     *
*            ALIASES XJOBSTEP, EXJSTEP, XJSTEP                        *
*                                                                     *
*            UP TO 1000 EXJOBSTEP CONTROL STATEMENTS MAY BE           *
*            ENTERED                                                  *
*                                                                     *
*        16) PROGRAM=PPPPPPPP                                         *
*            WHERE PPPPPPPP IS THE 1 TO 8 CHARACTER PROGRAM NAME      *
*                  TO BE USED FOR SELECTION                           *
*                                                                     *
*            ALIASES PGM                                              *
*                                                                     *
*            UP TO 1000 PROGRAM NAME STATEMENTS MAY BE                *
*            ENTERED                                                  *
*                                                                     *
*        17) EXPROGRAM=PPPPPPPP                                       *
*            WHERE PPPPPPPP IS THE 1 TO 8 CHARACTER PROGRAM NAME      *
*                  TO BE EXCLUDED FROM SELECTION.                     *
*                                                                     *
*            ALIASES XPROGRAM, EXPGM, XPGM                            *
*                                                                     *
*            UP TO 1000 EXPROGRAM NAME STATEMENTS MAY BE              *
*            ENTERED                                                  *
*                                                                     *
*        18) USERID=UUUUUUUU                                          *
*            WHERE UUUUUUUU IS THE 1 TO 8 CHARACTER SECURITY          *
*                  USERID TO BE USED FOR SELECTION                    *
*                                                                     *
*            ALIASES UID                                              *
*                                                                     *
*            UP TO 1000 JOB USERID STATEMENTS MAY BE                  *
*            ENTERED                                                  *
*                                                                     *
*        19) EXUSERID=UUUUUUUU                                        *
*            WHERE UUUUUUUU IS THE 1 TO 8 CHARACTER SECURITY          *
*                  USERID TO BE EXCLUDED FROM SELECTION.              *
*                                                                     *
*            ALIASES XUSERID, EXUID, XUID                             *
*                                                                     *
*            UP TO 1000 JOB EXUSERID STATEMENTS MAY BE                *
*            ENTERED                                                  *
*                                                                     *
*        20) CCODE=CCCCC                                              *
*            WHERE CCCCC IS THE STEP COMPLETION CODE IN THE           *
*                  FOLLOWING FORMAT TO BE USED FOR SELECTION:         *
*                                                                     *
*                  S...   - SYSTEM ABEND CODE                         *
*                  U....  - USER ABEND CODE                           *
*                  ....   - NUMERIC RETURN CODE                       *
*                                                                     *
*            ALIASES *NONE*                                           *
*                                                                     *
*            UP TO 1000 CCODE STATEMENTS MAY BE                       *
*            ENTERED                                                  *
*                                                                     *
*        21) EXCCODE=CCCCC                                            *
*            WHERE CCCCC IS THE STEP COMPLETION CODE IN THE           *
*                  FOLLOWING FORMAT TO BE EXCLUDED FROM SELECTION:    *
*                                                                     *
*                  S...   - SYSTEM ABEND CODE                         *
*                  U....  - USER ABEND CODE                           *
*                  ....   - NUMERIC RETURN CODE                       *
*                                                                     *
*            ALIASES XCCODE                                           *
*                                                                     *
*            UP TO 1000 EXCCODE STATEMENTS MAY BE                     *
*            ENTERED                                                  *
*                                                                     *
*        22) ELAPTIME>HHH.MM.SS                                       *
*            ELAPTIME<HHH.MM.SS                                       *
*            WHERE HHH.MM.SS IS THE ELAPSED TIME FOR THE STEP         *
*                  TO BE USED FOR SELECTION                           *
*                                                                     *
*            ALIASES ELAPSED/ET                                       *
*                                                                     *
*        23) EXCPS>NNNNNNNNN                                          *
*            EXCPS<NNNNNNNNN                                          *
*            WHERE NNNNNNNNN IS THE I/O COUNT FOR THE STEP TO BE      *
*                  USED FOR SELECTION                                 *
*                                                                     *
*            ALIASES BLOCKCOUNT/BLOCKCNT/BLOCKS                       *
*                                                                     *
*        24) CPUTIME>HHHMMSS                                          *
*            CPUTIME<HHHMMSS                                          *
*            WHERE HHHMMSS IS THE CPU TIME FOR THE STEP TO BE         *
*                  USED FOR SELECTION                                 *
*                                                                     *
*            ALIASES CPUTM/CT                                         *
*                                                                     *
*        25) REGIONBELOW>NNNN                                         *
*            REGIONBELOW<NNNN                                         *
*            WHERE NNNN IS THE REGION BELOW THE 16 MEG LIST IN        *
*                  MEGABYTES USED FOR SELECTION                       *
*                                                                     *
*            ALIASES RGNBELOW                                         *
*                                                                     *
*        26) REGIONABOVE>NNNN                                         *
*            REGIONABOVE<NNNN                                         *
*            WHERE NNNN IS THE REGION ABOVE THE 16 MEG LIST IN        *
*                  MEGABYTES USED FOR SELECTION                       *
*                                                                     *
*            ALIASES RGNABOVE                                         *
*                                                                     *
*        27) PERMTAPES>NNNNNN                                         *
*            PERMTAPES<NNNNNN                                         *
*            WHERE NNNNNN IS THE NUMBER OF NON-SCRATCH TAPE           *
*                  MOUNTS TO BE USED FOR SELECTION                    *
*                                                                     *
*            ALIASES NONSCRATCHTP/NONSCRTAPES                         *
*                                                                     *
*        28) SCRTAPES>NNNNNN                                          *
*            SCRTAPES<NNNNNN                                          *
*            WHERE NNNNNN IS THE NUMBER OF SCRATCH TAPE MOUNTS        *
*                  TO BE USED FOR SELECTION                           *
*                                                                     *
*            ALIASES SCRATCHTAPES/SCRATCHTPS                          *
*                                                                     *
*        29) MOUNTS>NNNNNN                                            *
*            MOUNTS<NNNNNN                                            *
*            WHERE NNNNNN IS THE NUMBER OF TAPE MOUNTS TO BE          *
*                  USED FOR SELECTION                                 *
*                                                                     *
*            ALIASES TAPEMOUNTS/TAPES/TOTTAPES                        *
*                                                                     *
*        30) CPUPCT>NNN                                               *
*            CPUPCT<NNN                                               *
*            WHERE NNN IS THE AVERAGE PERCENT CPU BUSY FOR THE        *
*                  STEP TO BE USED FOR SELECTION                      *
*                                                                     *
*            ALIASES CPUPERCENT/CPU%                                  *
*                                                                     *
*        31) JOBTYPE=X                                                *
*            WHERE X IS EITHER A T FOR TEST JOBS OR A P FOR           *
*                  PRODUCTION JOBS TO BE USED FOR SELECTION.          *
*                                                                     *
*            ALIASES JTYPE/TYPE                                       *
*                                                                     *
*        32) STOPAFTER=NNNNNNNNN                                      *
*                                                                     *
*            WHERE NNNNNNNNN IS THE NUMBER OF ITEMS TO INCLUDE        *
*                  ON THE REPORT.  IT WILL THE BE FIRST NNNNNN        *
*                  INPUT TYPE 30 RECORDS IF THE SORT OPTION IS        *
*                  NOT TAKEN OR THE FIRST NNNNNN RECORDS OF THE       *
*                  REQUESTED SORT SEQUENCE.                           *
*                                                                     *
*            ALIASES STOPCOUNT/STOPCNT                                *
*                                                                     *
*        33) NOFLUSH                                                  *
*                                                                     *
*            REQUESTS THAT ALL RECORDS FOR STEPS WHICH WHERE          *
*                  FLUSHED (DID NOT EXECUTE) WILL BE ELIMINATED       *
*                  FROM THE REPORT.                                   *
*                                                                     *
*            ALIASES *NONE*                                           *
*                                                                     *
*        34) NOABEND                                                  *
*                                                                     *
*            REQUESTS THAT ALL RECORDS FOR STEPS WHICH ABENDED        *
*                  WITH EITHER A SYSTEM OR A USER ABEND WILL BE       *
*                  ELIMINATED FROM THE REPORT.                        *
*                                                                     *
*            ALIASES *NONE*                                           *
*                                                                     *
*        35) NOTEST                                                   *
*                                                                     *
*            REQUESTS THAT ALL RECORDS FOR TEST JOBS BE ELIMINATED    *
*                  FROM THE REPORT.                                   *
*                                                                     *
*            ALIASES *NONE*                                           *
*                                                                     *
*        36) NOPRODUCTION                                             *
*                                                                     *
*            REQUESTS THAT ALL RECORDS FOR PRODUCTION JOBS BE         *
*                  ELIMINATED FROM THE REPORT.                        *
*                                                                     *
*            ALIASES *NONE*                                           *
*                                                                     *
*        37) NOSTC                                                    *
*                                                                     *
*            REQUESTS THAT ALL RECORDS FOR STARTED TASKS BE           *
*                  ELIMINATED FROM THE REPORT.                        *
*                                                                     *
*            ALIASES NOSTARTED                                        *
*                                                                     *
*        38) NOTSU                                                    *
*                                                                     *
*            REQUESTS THAT ALL RECORDS FOR TSO USERS BE               *
*                  ELIMINATED FROM THE REPORT.                        *
*                                                                     *
*            ALIASES NOTSO/NOUSERS                                    *
*                                                                     *
*        39) TOTALS                                                   *
*                                                                     *
*            REQUESTS THAT REPORT TOTALS FOR ALL SELECTED             *
*                  NUMERIC FIELDS BE GENERATED AT THE END             *
*                  OF THE REPORT.                                     *
*                                                                     *
*            ALIASES *NONE*                                           *
*                                                                     *
*        40) AVERAGES                                                 *
*                                                                     *
*            REQUESTS THAT REPORT TOTALS AND AVERAGES FOR             *
*                  ALL SELECTED NUMERIC FIELDS BE GENERATED           *
*                  AT THE END OF THE REPORT.                          *
*                                                                     *
*            ALIASES *NONE*                                           *
*                                                                     *
*        41) NODETAIL                                                 *
*                                                                     *
*            REQUESTS THAT THE DETAIL LINES FOR EACH SELECTED         *
*                  STEP NOT BE PRINTED.  ONLY ANY TOTALS AND/OR       *
*                  AVERAGES WILL BE PRINTED.                          *
*                                                                     *
*            ALIASES NOREPORT                                         *
*                                                                     *
*        42) EXPPAGING>NNNNNNNNN                                      *
*            EXPPAGING<NNNNNNNNN                                      *
*            WHERE NNNNNNNNN IS THE TOTAL PAGES TO OR FROM            *
*                  EXPANDED STORAGE FOR THE STEP TO BE USED           *
*                  FOR SELECTION                                      *
*                                                                     *
*            ALIASES EXPANDED                                         *
*                                                                     *
*        43) AUXPAGING>NNNNNNNNN                                      *
*            AUXPAGING<NNNNNNNNN                                      *
*            WHERE NNNNNNNNN IS THE TOTAL PAGES TO OR FROM            *
*                  AUXILLARY STORAGE FOR THE STEP TO BE USED          *
*                  FOR SELECTION                                      *
*                                                                     *
*            ALIASES AUXILLARY                                        *
*                                                                     *
*        44) SERVUNITS>NNNNNNNNN                                      *
*            SERVUNITS<NNNNNNNNN                                      *
*            WHERE NNNNNNNNN IS THE TOTAL NUMBER OF SERVICE           *
*                  UNITS FOR THE STEP (IN K) TO BE USED FOR           *
*                  SELECTION                                          *
*                                                                     *
*            ALIASES SERVICEUNITS/SUS                                 *
*                                                                     *
*        45) VIOPAGING>NNNNNNNNN                                      *
*            VIOPAGING<NNNNNNNNN                                      *
*            WHERE NNNNNNNNN IS THE TOTAL NUMBER OF VIO               *
*                  PAGE IN OR OUT OPERATIONS TO BE USED FOR           *
*                  SELECTION                                          *
*                                                                     *
*            ALIASES *NONE*                                           *
*                                                                     *
*        46) SDAY=OPT1,OPT2,OPT3,OPT4                                 *
*                                                                     *
*            WHERE OPT1 ETC IS A LIST OF OPTIONS WHICH, WHEN          *
*            USED IN COMBINATION, WILL SELECT DATA BASED UPON         *
*            DAY(S) OF THE WHEN WHEN THE JOB OR STEP BEGAN            *
*            EXECUTION                                                *
*                                                                     *
*            SUNDAY/NOSUNDAY                                          *
*            MONDAY/NOMONDAY                                          *
*            TUESDAY/NOTUESDAY                                        *
*            WEDNESDAY/NOWEDNESDAY                                    *
*            THURSDAY/NOTHURSDAY                                      *
*            FRIDAY/NOFRIDAY                                          *
*            SATURDAY/NOSATURDAY                                      *
*            WEEKDAY/NOWEEKDAY                                        *
*            WEEKEND/NOWEEKEND                                        *
*            ALLDAYS/EVERYDAY                                         *
*                                                                     *
*            ALIASES STARTDAY                                         *
*                                                                     *
*            THESE CONTROL STATEMENTS, WHEN USED IN COMBINATION,      *
*            WILL SELECT DATA BASED UPON THE DAY OF THE WEEK          *
*            WHEN THE JOB OR STEP BEGAN EXECUTION.  THE OPTIONS       *
*            ARE PROCESSED IN THE ORDER RECEIVED.  NO DATA IS         *
*            AUTOMATICALLY INCLUDED.  AT LEAST ONE "INCLUDING"        *
*            STATEMENT MUST BE ENTERED IF ANY OF THESE STATEMENTS     *
*            ARE ENTERED.  IF NONE OF THESE STATEMENTS ARE USED,      *
*            ALL DAYS ARE SELECTED.                                   *
*                                                                     *
*        47) EDAY=OPT1,OPT2,OPT3,OPT4                                 *
*                                                                     *
*            WHERE OPT1 ETC IS A LIST OF OPTIONS WHICH, WHEN          *
*            USED IN COMBINATION, WILL SELECT DATA BASED UPON         *
*            DAY(S) OF THE WHEN WHEN THE JOB OR STEP ENDED            *
*            EXECUTION                                                *
*                                                                     *
*            SUNDAY/NOSUNDAY                                          *
*            MONDAY/NOMONDAY                                          *
*            TUESDAY/NOTUESDAY                                        *
*            WEDNESDAY/NOWEDNESDAY                                    *
*            THURSDAY/NOTHURSDAY                                      *
*            FRIDAY/NOFRIDAY                                          *
*            SATURDAY/NOSATURDAY                                      *
*            WEEKDAY/NOWEEKDAY                                        *
*            WEEKEND/NOWEEKEND                                        *
*            ALLDAYS/EVERYDAY                                         *
*                                                                     *
*            ALIASES STARTDAY                                         *
*                                                                     *
*            THESE CONTROL STATEMENTS, WHEN USED IN COMBINATION,      *
*            WILL SELECT DATA BASED UPON THE DAY OF THE WEEK          *
*            WHEN THE JOB OR STEP ENDED EXECUTION.  THE OPTIONS       *
*            ARE PROCESSED IN THE ORDER RECEIVED.  NO DATA IS         *
*            AUTOMATICALLY INCLUDED.  AT LEAST ONE "INCLUDING"        *
*            STATEMENT MUST BE ENTERED IF ANY OF THESE STATEMENTS     *
*            ARE ENTERED.  IF NONE OF THESE STATEMENTS ARE USED,      *
*            ALL DAYS ARE SELECTED.                                   *
*                                                                     *
*        47) SDAY=OPT1,OPT2,OPT3,OPT4                                 *
*                                                                     *
*            WHERE OPT1 ETC IS A LIST OF OPTIONS WHICH, WHEN          *
*            USED IN COMBINATION, WILL SELECT DATA BASED UPON         *
*            DAY(S) OF THE WHEN WHEN THE JOB OR STEP BEGAN            *
*            EXECUTION                                                *
*                                                                     *
*            SUNDAY/NOSUNDAY                                          *
*            MONDAY/NOMONDAY                                          *
*            TUESDAY/NOTUESDAY                                        *
*            WEDNESDAY/NOWEDNESDAY                                    *
*            THURSDAY/NOTHURSDAY                                      *
*            FRIDAY/NOFRIDAY                                          *
*            SATURDAY/NOSATURDAY                                      *
*            WEEKDAY/NOWEEKDAY                                        *
*            WEEKEND/NOWEEKEND                                        *
*            ALLDAYS/EVERYDAY                                         *
*                                                                     *
*            ALIASES STARTDAY                                         *
*                                                                     *
*            THESE CONTROL STATEMENTS, WHEN USED IN COMBINATION,      *
*            WILL SELECT DATA BASED UPON THE DAY OF THE WEEK.         *
*            THEY ARE PROCESSED IN THE ORDER RECEIVED.  NO DATA       *
*            IS AUTOMATICALLY INCLUDED.  AT LEAST ONE "INCLUDING"     *
*            STATEMENT MUST BE ENTERED IF ANY OF THESE STATEMENTS     *
*            ARE ENTERED.  IF NONE OF THESE STATEMENTS ARE USED,      *
*            ALL DAYS ARE SELECTED.                                   *
*                                                                     *
*        48) SORT=OPT1,OPT2,OPT3,OPT4,OPT5                            *
*            WHERE SORTING OF THE INPUT DATA IS REQUESTED IN THE      *
*            ORDER IN WHICH THE FOLLOWING OPTIONS ARE LISTED:         *
*                                                                     *
*            A)  AUXPAGING/AUXILLARY                                  *
*            B)  CCODE                                                *
*            C)  CPUPERCENT/CPUPCT/CPU%                               *
*            D)  CPUTIME/CPUTM/CT                                     *
*            E)  ELAPTIME/ELAPSED/ET                                  *
*            F)  EDATE/ENDDATE/EGDATE/ENDGDATE                        *
*            G)  EDAY/ENDDAY/EDAYOFWEEK                               *
*            H)  ETIME/ENDTIME                                        *
*            I)  EXCPS/BLOCKCOUNT/BLOCKCNT/BLOCKS                     *
*            J)  EXPPAGING/EXPANDED                                   *
*            K)  JOBNAME/JOBNM                                        *
*            L)  JOBNO/JOBNUMBER/JOBID                                *
*            M)  JOBSTEP/JSTEP                                        *
*            N)  MOUNTS/TAPEMOUNTS/TOTAPES/TAPES                      *
*            O)  PERMTAPES/NONSCRATCHTP/NONSCRTAPES                   *
*            P)  PROCSTEP/PSTEP                                       *
*            Q)  PROGRAM/PGM                                          *
*            R)  REGIONABOVE/RGNABOVE                                 *
*            S)  REGIONBELOW/RGNBELOW                                 *
*            T)  SCRTAPES/SCRATCHTAPES/SCRATCHTPS                     *
*            U)  SERVUNITS/SERVICEUNITS/SUS                           *
*            V)  SDATE/STARTDATE/DATE/SGDATE/STARTGDATE               *
*            W)  SDAY/STARTDAY/SDAYOFWEEK/DAYOFTHEWEEK                *
*            X)  STIME/STARTTIME/TIME                                 *
*            Y)  SYSTEM/SYSID                                         *
*            Z)  TYPE/JOBTYPE/JTYPE                                   *
*            AA) USERID/UID                                           *
*            BB) VIOPAGING                                            *
*                                                                     *
*            NOTE THAT EACH KEYWORD CAN BE SUFFIXED BY "(A)" OR       *
*            "(D)" FOR ASCENDING OR DESCENDING SORT SEQUENCE.         *
*            THE DEFAULT IS "(A)" FOR ASCENDING                       *
*                                                                     *
*            A MAXIMUM OF FIVE OF THE ABOVE OPTIONS MAY BE MADE       *
*            ON A GIVEN RUN.                                          *
*                                                                     *
*            IF AN OPTION IS NOT SPECIFIED, NO SORTING ON THAT        *
*            FIELD WILL BE MADE.                                      *
*                                                                     *
*        49) PRINT=FIELD1,FIELD2,FIELD3,FIELD4, ... FIELD.            *
*            WHERE CUSTOM SELECTION OF THE FIELDS TO BE INCLUDED      *
*            ON THE OUTPUT REPORT IS BEING MADE.  THE FIELDS          *
*            WILL BE PRINTED IN THE ORDER SPECIFIED AND INCLUDE       *
*            THE FOLLOWING VALUES:                                    *
*                                                                     *
*            A)  AUXPAGING/AUXILLARY                                  *
*            B)  CCODE                                                *
*            C)  CPUPERCENT/CPUPCT/CPU%                               *
*            D)  CPUTIME/CPUTM/CT                                     *
*            E)  ELAPTIME/ELAPSED/ET                                  *
*            F)  EDATE/ENDDATE                                        *
*            G)  EGDATE/ENDGDATE                                      *
*            H)  EDAY/ENDDAY/EDAYOFWEEK                               *
*            I)  ETIME/ENDTIME                                        *
*            J)  EXCPS/BLOCKCOUNT/BLOCKCNT/BLOCKS                     *
*            K)  EXPPAGING/EXPANDED                                   *
*            L)  JOBNAME/JOBNM                                        *
*            M)  JOBNO/JOBNUMBER/JOBID                                *
*            N)  JOBSTEP/JSTEP                                        *
*            O)  MOUNTS/TAPEMOUNTS/TOTAPES/TAPES                      *
*            P)  PERMTAPES/NONSCRATCHTP/NONSCRTAPES                   *
*            Q)  PROCSTEP/PSTEP                                       *
*            R)  PROGRAM/PGM                                          *
*            S)  REGIONABOVE/RGNABOVE                                 *
*            T)  REGIONBELOW/RGNBELOW                                 *
*            U)  SCRTAPES/SCRATCHTAPES/SCRATCHTPS                     *
*            V)  SERVUNITS/SERVICEUNITS/SUS                           *
*            W)  SDATE/STARTDATE/DATE                                 *
*            X)  SGDATE/STARTGDATE                                    *
*            Y)  SDAY/STARTDAY/SDAYOFWEEK/DAYOFTHEWEEK                *
*            Z)  STIME/STARTTIME/TIME                                 *
*            AA) SYSTEM/SYSID                                         *
*            BB) TYPE/JOBTYPE/JTYPE                                   *
*            CC) USERID/UID                                           *
*            DD) VIOPAGING                                            *
*                                                                     *
*            AS MANY FIELDS MAY BE SELECTED AS WILL FIT IN THE        *
*            133 CHARACTER PRINT LINE.                                *
*                                                                     *
*            MULTIPLE PRINT STATEMENTS CAN BE USED IF THE NUMBER      *
*            OR FIELDS NAMES IS EXCESSIVE.                            *
*                                                                     *
*                                                                     *
*                             *** NOTE ***                            *
*                                                                     *
*        THIS UTILITY HAS ONE SECTION OF CODE THAT IS                 *
*        INSTALLATION DEPENDENT.  BETWEEN THE LABELS SETTYPE          *
*        AND ENDTYPE, CODE MUST BE CUSTOMIZED TO DETERMINE            *
*        WHETHER THIS IS A PRODUCTION OR A TEST JOB.                  *
*                                                                     *
*                                                                     *
*                                                                     *
*        L I N K A G E    E D I T O R    I N F O R M A T I O N        *
*                                                                     *
*        SIZE - 37K                                                   *
*        ATTR - NORENT, NOREUS, NOREFR, AMODE24, RMODE24              *
*                                                                     *
*                                                                     *
*                                                                     *
*        WRITTEN BY:                                                  *
*                   JOHN V. HOOPER                                    *
*                   FOOD LION, INC.                                   *
*                   2110 EXECUTIVE DRIVE                              *
*                   SALISBURY, N.C.  28145-1330                       *
*                                                                     *
*                                                                     *
*                           DISCLAIMER                                *
*                                                                     *
*      THE AUTHORS INCLUDING FOOD LION, ITS OFFICERS,                 *
*      DIRECTORS, AND EMPLOYEES MAKE NO REPRESENTATION OR             *
*      WARRANTY OF ANY KIND WHATSOEVER, INCLUDING, BUT NOT            *
*      LIMITED TO, REPRESENTATIONS OR WARRANTIES, EXPRESS OR          *
*      IMPLIED, OR MERCHANTABILITY, FITNESS FOR USE OR PURPOSE,       *
*      ACCURACY OR COMPLETENESS OF PROCESSES, PROCEDURES,             *
*      DESIGNS, DEFINITIONS, INSTRUCTIONS, INFORMATION, OR            *
*      FUNCTIONING OF ANY PROGRAMS, DOCUMENTS, OR RELATED             *
*      MATERIALS; THE AUTHORS FURTHER EXPRESSLY DISCLAIM ANY          *
*      KNOWLEDGE OF PURPOSE FOR WHICH THESE PROGRAMS,                 *
*      DOCUMENTS, OR RELATED MATERIAL MAY BE UTILIZED OR THEIR        *
*      APPLICABILITY FOR SUCH USE, NOR SHALL THE FACT OF MAKING       *
*      THEM AVAILABLE CONSTITUTE ANY SUCH REPRESENTATION,             *
*      WARRANTY, OR KNOWLEDGE; NOR DO THE AUTHORS ASSUME ANY          *
*      LIABILITY, RESPONSIBILITY, OR OBLIGATION ARISING FROM          *
*      THE USE OR MALFUNCTIONING OF OF THESE COMPUTER PROGRAMS,       *
*      DOCUMENTATION, OR RELATED MATERIALS.                           *
*                                                                     *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*                                                                     *
*                            SAMPLE JCL                               *
*                                                                     *
*       //JOBNAME  JOB ....                                           *
*       //STEP1    EXEC PGM=FLSMFJOB                                  *
*       //SMFIN    DD  DSN=SMF.INPUT.FILE,DISP=SHR                    *
*       //SYSPRINT DD  SYSOUT=*                                       *
*       //SYSOUT   DD  SYSOUT=*                                       *
*       //SYSUDUMP DD  SYSOUT=*                                       *
*       //SYSIN    DD  *                                              *
*       NOTSO                                                         *
*       NOSTC                                                         *
*       NOFLUSH                                                       *
*       NOTEST                                                        *
*       PRINT=ELAP,CPUT,CPUPCT,RGNB,RGNA,PERMT,SCRT,TAPES,EXPP        *
*       PRINT=AUXP,SERV                                               *
*       AVERAGES                                                      *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*                                                                     *
*                        M A C R O S    U S E D                       *
*                                                                     *
*                                                                     *
*        01)  ABEND        SYS1.MACLIB                                *
*        02)  CLOSE        SYS1.MACLIB                                *
*        03)  DCB          SYS1.MACLIB                                *
*        04)  DCBD         SYS1.MACLIB                                *
*        05)  GET          SYS1.MACLIB                                *
*        06)  IFASMFR      SYS1.MACLIB                                *
*        07)  LINK         SYS1.MACLIB                                *
*        08)  OPEN         SYS1.MACLIB                                *
*        09)  PUT          SYS1.MACLIB                                *
*        10)  RETURN       SYS1.MACLIB                                *
*        11)  SAVE         SYS1.MACLIB                                *
*        12)  WTO          SYS1.MACLIB                                *
*                                                                     *
***********************************************************************
         SPACE 3
         EJECT
FLSMFJOB CSECT
***********************************************************************
*                                                                     *
*                         REGISTER EQUATES                            *
*                                                                     *
***********************************************************************
R0       EQU   00
R1       EQU   01
R2       EQU   02
R3       EQU   03
R4       EQU   04
R5       EQU   05
R6       EQU   06
R7       EQU   07
R8       EQU   08                  WORK AREA BASE
R9       EQU   09                  BASE REGISTER 2
R10      EQU   10                  BASE REGISTER 3
R11      EQU   11                  BASE REGISTER 4
R12      EQU   12                  BASE REGISTER 5
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
***********************************************************************
*                                                                     *
*        START OF PROGRAM                                             *
*                                                                     *
***********************************************************************
         SAVE  (14,12),,'FLSMFJOB_&SYSDATE._&SYSTIME'
         USING FLSMFJOB,R9,R10,R11,R12 SET PROGRAM ADDRESSABILITY
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LA    R2,SAVEAREA         LOAD ADDRESS OF NEW SAVE
         ST    R13,4(R2)           SAVE CALLER'S SAVE AREA ADDR
         ST    R2,8(R13)           SAVE MY SAVE AREA ADDRESS
         LR    R13,R2              LOAD REGISTER 13 WITH SAVE AREA
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
         B     CHECKPR             GO CHECK SYSPRINT FILE
SAVEAREA DS    18F                 PROGRAM SAVE AREA
         EJECT
***********************************************************************
*                                                                     *
*        THIS ROUTINE WILL PROCESS THE INPUT SYSIN CONTROL            *
*        STATEMENTS (IF ANY).                                         *
*                                                                     *
***********************************************************************
CHECKPR  MVC   DDNAME,=CL8'SYSPRINT' SET DDNAME TO 'SYSPRINT'
         L     R15,=V(FINDDN)      LOAD ADDRESS OF TIOT SEARCH ROUTINE
         BALR  R14,R15             GO SEARCH TIOT FOR DDNAME
         LTR   R15,R15             CHECK RETURN CODE
         BNZ   ERROR030            NOT ZERO, ERROR
OPENPR   OPEN  (SYSPRINT,(OUTPUT)) OPEN PRINT FILE
         SPACE 3
PROCOUT  MVC   DDNAME,=CL8'DATAOUT' SET DDNAME TO 'DATAOUT'
         L     R15,=V(FINDDN)      LOAD ADDRESS OF TIOT SEARCH ROUTINE
         BALR  R14,R15             GO SEARCH TIOT FOR DDNAME
         LTR   R15,R15             CHECK RETURN CODE
         BNZ   PROCSYS             NOT ZERO, NOT PRESENT
         OPEN  (DATAOUT,(OUTPUT))  OPEN OPTIONAL DATAOUT FILE
         OI    SWITCH+6,OPTOUT     TURN ON OPTIONAL OUTPUT FILE IND
         SPACE 3
PROCSYS  MVC   DDNAME,=CL8'SYSIN'  SET DDNAME TO 'SYSIN'
         L     R15,=V(FINDDN)      LOAD ADDRESS OF TIOT SEARCH ROUTINE
         BALR  R14,R15             GO SEARCH TIOT FOR DDNAME
         LTR   R15,R15             CHECK RETURN CODE
         BZ    OPENSYS             ZERO, GO OPEN INPUT
         WTO   'SMF1000 - OPTIONAL SYSIN DD STATEMENT NOT SPECIFIED, NOX
                OPTIONS SPECIFIED',                                    X
               ROUTCDE=11
         B     NOPARM              ZERO, NO PARM, BRANCH
OPENSYS  OPEN  (SYSIN)             OPEN INPUT SYSIN DATA SET
         PUT   SYSPRINT,HEAD       WRITE THE OPTION HEADINGS
READCARD GET   SYSIN,CARDAREA      READ INPUT OPTIONS
         MVC   CARDAREA+72(8),=CL8' ' BLANK POSSIBLE CARD SEQ NUMBER
         PUT   SYSPRINT,CARDREC    WRITE THE OPTION CARD
         MVI   CARDREC,C' '        SET NEXT LINE TO SINGLE SPACE
         CLI   CARDAREA,C'*'       SEE IF COMMENT STATEMENT
         BE    READCARD            YES, GO READ ANOTHER STATEMENT
         L     R15,=V(PRMCHK)      LOAD ADDRESS OF PARM CHECK ROUTINE
         BALR  R14,R15             GO PROCESS PARM
         LTR   R15,R15             TEST RETURN CODE
         BNZ   ERROR999            NOT ZERO, BAD PARM
         B     READCARD            GO GET ANOTHER SYSIN OPTION CARD
         SPACE 3
***********************************************************************
*        END OF PARMS                                                 *
***********************************************************************
ENDPARM  TM    SWITCH+6,SELSDAY    SEE IF START DAY-OF-WEEK SELECTION
         BNO   ENDPARM1            NO, CONTINUE
         CLI   SDAYSW,0            SEE IF ANY DAYS SELECTED
         BE    ERROR090            NO, ERROR
ENDPARM1 TM    SWITCH+6,SELEDAY    SEE IF END DAY-OF-WEEK SELECTION
         BNO   ENDPARM2            NO, CONTINUE
         CLI   EDAYSW,0            SEE IF ANY DAYS SELECTED
         BE    ERROR013            NO, ERROR
ENDPARM2 CLOSE (SYSIN)             CLOSE SYSIN FILE
         EJECT
NOPARM   DS    0H
***********************************************************************
*                                                                     *
*        SET UP DEFAULT PRINT OPTIONS IF NECESSARY.                   *
*                                                                     *
***********************************************************************
PRDFLT   TM    SWITCH+4,SELPRINT   SEE IF PRINT OPTION SPECIFIED
         BO    PRSETUP             YES, DO NOT SET DEFAULTS
         L     R1,=V(PRTOPT)       LOAD ADDRESS OF PRINT OPTIONS
         L     R2,=V(OPTKEY)       LOAD ADDRESS OF OPTIONS KEYWORD TBL
PRDFLT1  CLI   0(R2),X'FF'         END OF TABLE
         BE    PRSETUP             YES, QUIT
         CLI   19(R2),0            SEE IF PRINT SEQUENCE SPECIFIED
         BNE   PRDFLT3             YES, BRANCH
PRDFLT2  LA    R2,34(,R2)          INCREMENT TO NEXT TABLE ENTRY
         B     PRDFLT1             LOOP
PRDFLT3  SLR   R15,R15             CLEAR REG FOR IC
         IC    R15,21(R2)          LOAD DEFAULT PR SEQUENCE NUMBER
         BCTR  R15,0               MAKE RELATIVE TO ZERO
         MH    R15,=H'6'           MULTIPLY BY LENGTH OF EACH ENTRY
         AR    R15,R1              POINT TO PROPER ENTRY
         MVI   0(R15),C'Y'         TURN ON PRINTABLE INDICATOR
         MVC   4(2,R15),2(R2)      SAVE INDEX FROM OPTION TABLE
         B     PRDFLT2             GO PROCESS NEXT OPTION ENTRY
         EJECT
***********************************************************************
*                                                                     *
*        COMPLETE SETUP FOR THE SPECIFIED OR DEFAULT PRINT            *
*        OPTIONS.  EACH PRINT FIELD HAS A PROCESSING ROUTINE          *
*        TO SET THE HEADING VALUES AND ESTABLISH THE OFFSET           *
*        WITHIN THE DETAIL RECORD FOR OUPTUT PROCESSING.              *
*                                                                     *
***********************************************************************
PRSETUP  L     R1,=V(PRTOPT)       LOAD ADDRESS OF PRINT OPTIONS
         CLI   0(R1),C'Y'          MAKE SURE AT ONE FIELDS PRINTED
         BNE   ERROR046            NO, ERROR
         LA    R2,HEAD2A+1         POINT TO 1ST VARIABLE HEAD LINE
         LA    R3,HEAD2B+1         POINT TO 2ND VARIABLE HEAD LINE
         LA    R4,1                SET LINE LENGTH TO 1
PRSETUP1 CLI   0(R1),X'FF'         PHYSICAL END OF TABLE
         BE    PRSETUP4            YES, BRANCH
         CLI   0(R1),C'N'          LOGICAL END OF TABLE
         BE    PRSETUP4            YES, BRANCH
         LH    R15,4(R1)           LOAD BRANCH TABLE OFFSET
         B     PRSETUP2(R15)       BRANCH TO PROPER ROUTINE BY INDEX
PRSETUP2 B     SETJOBNM            INDEX = 00
         B     SETJOBNO            INDEX = 04
         B     SETSJDTE            INDEX = 08
         B     SETSTIME            INDEX = 12
         B     SETSYSID            INDEX = 16
         B     SETPSTEP            INDEX = 20
         B     SETJSTEP            INDEX = 24
         B     SETPGM              INDEX = 28
         B     SETUID              INDEX = 32
         B     SETCCODE            INDEX = 36
         B     SETELAP             INDEX = 40
         B     SETEXCP             INDEX = 44
         B     SETCPUT             INDEX = 48
         B     SETRGNB             INDEX = 52
         B     SETRGNA             INDEX = 56
         B     SETTAPE             INDEX = 60
         B     SETCPUP             INDEX = 64
         B     SETJTYPE            INDEX = 68
         B     ERROR047            INDEX = 72
         B     ERROR047            INDEX = 76
         B     ERROR047            INDEX = 80
         B     ERROR047            INDEX = 84
         B     ERROR047            INDEX = 88
         B     ERROR047            INDEX = 92
         B     ERROR047            INDEX = 96
         B     ERROR047            INDEX = 100
         B     ERROR047            INDEX = 104
         B     SETPTAPE            INDEX = 108
         B     SETSTAPE            INDEX = 112
         B     SETEXPPG            INDEX = 116
         B     SETAUXPG            INDEX = 120
         B     SETSUS              INDEX = 124
         B     ERROR047            INDEX = 128
         B     ERROR047            INDEX = 132
         B     ERROR047            INDEX = 136
         B     SETVIOPG            INDEX = 140
         B     ERROR047            INDEX = 144
         B     ERROR047            INDEX = 148
         B     ERROR047            INDEX = 152
         B     ERROR047            INDEX = 156
         B     ERROR047            INDEX = 160
         B     ERROR047            INDEX = 164
         B     ERROR047            INDEX = 168
         B     ERROR047            INDEX = 172
         B     ERROR047            INDEX = 176
         B     ERROR047            INDEX = 180
         B     ERROR047            INDEX = 184
         B     ERROR047            INDEX = 188
         B     ERROR047            INDEX = 192
         B     ERROR047            INDEX = 196
         B     ERROR047            INDEX = 200
         B     ERROR047            INDEX = 204
         B     ERROR047            INDEX = 208
         B     ERROR047            INDEX = 212
         B     ERROR047            INDEX = 216
         B     ERROR047            INDEX = 220
         B     ERROR047            INDEX = 224
         B     ERROR047            INDEX = 228
         B     ERROR047            INDEX = 232
         B     ERROR047            INDEX = 236
         B     ERROR047            INDEX = 240
         B     ERROR047            INDEX = 244
         B     ERROR047            INDEX = 248
         B     SETSDAY             INDEX = 252
         B     ERROR047            INDEX = 256
         B     ERROR047            INDEX = 260
         B     SETEJDTE            INDEX = 264
         B     SETETIME            INDEX = 268
         B     SETEDAY             INDEX = 272
         B     SETSGDTE            INDEX = 276
         B     SETEGDTE            INDEX = 280
         B     ERROR047            INDEX = 284
PRSETUP3 LA    R1,6(,R1)           INCREMENT TO NEXT TABLE ENTRY
         B     PRSETUP1            LOOP
PRSETUP4 CH    R14,=H'133'         SEE IF EXCEEDS MAXIMUM LENGTH
         BH    ERROR048            YES, ERROR
         B     CHECKIN             NO, GO READ SMF DATA
         EJECT
***********************************************************************
*        SETUP FOR JOB NAME                                           *
***********************************************************************
SETJOBNM MVC   0(8,R2),=CL8'  JOB   '
         MVC   0(8,R3),=CL8'  NAME  '
         LA    R14,8               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR JOB NUMBER                                         *
***********************************************************************
SETJOBNO MVC   0(8,R2),=CL8'  JOB   '
         MVC   0(8,R3),=CL8' NUMBER '
         LA    R14,8               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR START JULIAN DATE                                  *
***********************************************************************
SETSJDTE MVC   0(8,R2),=CL8' START  '
         MVC   0(8,R3),=CL8' DATE   '
         LA    R14,8               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR END JULIAN DATE                                    *
***********************************************************************
SETEJDTE MVC   0(8,R2),=CL8'  END   '
         MVC   0(8,R3),=CL8' DATE   '
         LA    R14,8               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR START GREGORIAN DATE                               *
***********************************************************************
SETSGDTE MVC   0(10,R2),=CL10'  START   '
         MVC   0(10,R3),=CL10'  DATE    '
         LA    R14,10              LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR END GREGORIAN DATE                                 *
***********************************************************************
SETEGDTE MVC   0(10,R2),=CL10'   END    '
         MVC   0(10,R3),=CL10'  DATE    '
         LA    R14,10              LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR START TIME                                         *
***********************************************************************
SETSTIME MVC   0(5,R2),=CL5'START '
         MVC   0(5,R3),=CL5'TIME'
         LA    R14,5               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR END TIME                                           *
***********************************************************************
SETETIME MVC   0(5,R2),=CL5' END  '
         MVC   0(5,R3),=CL5'TIME'
         LA    R14,5               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR SYSTEM ID                                          *
***********************************************************************
SETSYSID MVC   0(4,R2),=CL4' SYS'
         MVC   0(4,R3),=CL4' ID '
         LA    R14,4               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR PROC STEP NAME                                     *
***********************************************************************
SETPSTEP MVC   0(8,R2),=CL8'  PROC  '
         MVC   0(8,R3),=CL8'  STEP  '
         LA    R14,8               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR JOB STEP NAME                                      *
***********************************************************************
SETJSTEP MVC   0(8,R2),=CL8'  JOB   '
         MVC   0(8,R3),=CL8'  STEP  '
         LA    R14,8               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR PROGRAM NAME                                       *
***********************************************************************
SETPGM   MVC   0(8,R2),=CL8' PROGRAM'
         MVC   0(8,R3),=CL8'  NAME  '
         LA    R14,8               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR SECURITY USERID                                    *
***********************************************************************
SETUID   MVC   0(8,R2),=CL8'  USER  '
         MVC   0(8,R3),=CL8'   ID   '
         LA    R14,8               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR CONDITION CODE                                     *
***********************************************************************
SETCCODE MVC   0(5,R2),=CL5'COND '
         MVC   0(5,R3),=CL5'CODE '
         LA    R14,5               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR ELAPSED TIME                                       *
***********************************************************************
SETELAP  MVC   0(9,R2),=CL9' ELAPSED '
         MVC   0(9,R3),=CL9'  TIME   '
         LA    R14,9               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR TOTAL I/O                                          *
***********************************************************************
SETEXCP  MVC   0(10,R2),=CL10'  TOTAL   '
         MVC   0(10,R3),=CL10'   I/O    '
         LA    R14,10              LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR CPU TIME                                           *
***********************************************************************
SETCPUT  MVC   0(7,R2),=CL7'  CPU     '
         MVC   0(7,R3),=CL7'  TIME    '
         LA    R14,7               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR REGION BELOW                                       *
***********************************************************************
SETRGNB  MVC   0(7,R2),=CL7' REGION   '
         MVC   0(7,R3),=CL7' BELOW    '
         LA    R14,7               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR REGION ABOVE                                       *
***********************************************************************
SETRGNA  MVC   0(7,R2),=CL7' REGION   '
         MVC   0(7,R3),=CL7' ABOVE    '
         LA    R14,7               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR TAPE MOUNTS                                        *
***********************************************************************
SETTAPE  MVC   0(3,R2),=CL3'TOT'
         MVC   0(3,R3),=CL3'TPS'
         LA    R14,3               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR CPU PERCENT                                        *
***********************************************************************
SETCPUP  MVC   0(3,R2),=CL3'CPU'
         MVC   0(3,R3),=CL3' % '
         LA    R14,3               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR JOB TYPE                                           *
***********************************************************************
SETJTYPE MVC   0(1,R2),=CL1'T'
         MVC   0(1,R3),=CL1'Y'
         LA    R14,1               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR NON-SCRATCH TAPES                                  *
***********************************************************************
SETPTAPE MVC   0(3,R2),=CL3'PER'
         MVC   0(3,R3),=CL3'TPS'
         LA    R14,3               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR SCRATCH TAPES                                      *
***********************************************************************
SETSTAPE MVC   0(3,R2),=CL3'SCR'
         MVC   0(3,R3),=CL3'TPS'
         LA    R14,3               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR EXPANDED STORAGE PAGING                            *
***********************************************************************
SETEXPPG MVC   0(8,R2),=CL8'   EXP  '
         MVC   0(8,R3),=CL8'  PAGES '
         LA    R14,8               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR AUXILLARY STORAGE PAGING                           *
***********************************************************************
SETAUXPG MVC   0(8,R2),=CL8'   AUX  '
         MVC   0(8,R3),=CL8'  PAGES '
         LA    R14,8               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR SERVICE UNITS                                      *
***********************************************************************
SETSUS   MVC   0(9,R2),=CL9' SERVICE '
         MVC   0(9,R3),=CL9'  UNITS  '
         LA    R14,9               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR VIO PAGING                                         *
***********************************************************************
SETVIOPG MVC   0(8,R2),=CL8'   VIO  '
         MVC   0(8,R3),=CL8'  PAGES '
         LA    R14,8               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR START DAY-OF-THE-WEEK                              *
***********************************************************************
SETSDAY  MVC   0(4,R2),=CL4'SDAY'
         MVC   0(4,R3),=CL4' WK '
         LA    R14,4               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR END   DAY-OF-THE-WEEK                              *
***********************************************************************
SETEDAY  MVC   0(4,R2),=CL4'EDAY'
         MVC   0(4,R3),=CL4' WK '
         LA    R14,4               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP COMMON ROUTINE                                         *
***********************************************************************
SETCOMM  STH   R4,2(R1)            SAVE OFFSET VALUE
         LA    R2,1(R14,R2)        INCREMENT HEAD2A
         LA    R3,1(R14,R3)        INCREMENT HEAD2B
         LA    R4,1(R14,R4)        INCREMENT OFFSET POINTER
         B     PRSETUP3            GO PROCESS NEXT TABLE ENTRY
         EJECT
***********************************************************************
*                                                                     *
*        GET READY TO PROCESS SMF DATA                                *
*                                                                     *
***********************************************************************
CHECKIN  MVC   DDNAME,=CL8'SMFIN'  SET DDNAME TO 'SMFIN'
         L     R15,=V(FINDDN)      LOAD ADDRESS OF TIOT SEARCH ROUTINE
         BALR  R14,R15             GO SEARCH TIOT FOR DDNAME
         LTR   R15,R15             CHECK RETURN CODE
         BNZ   ERROR031            NOT ZERO, ERROR
OPENIN   OPEN  (SMFIN,(INPUT))     OPEN INPUT FILE
CKOPTION TM    SWITCH,SELSORT      WAS SORTING SELECTED?
         BNO   READIN              NO, BYPASS SORT
         LA    R1,SORTPARM         LOAD ADDRESS OF SORT PARMS
         LINK  EP=SORT             GO TO SORT
         B     ENDJOB              GO END THE JOB
READIN   LA    R15,READRTN         LOAD ADDRESS OF READ SMF ROUTINE
         BALR  R14,R15             GO READ SMF ROUTINE
         TM    SWITCH,ENDFILE      END OF FILE?
         BO    ENDJOB              YES, BRANCH
         L     R15,OUTCNT          LOAD OUTPUT COUNT
         LA    R15,1(,R15)         ADD 1 TO OUTPUT COUNT
         ST    R15,OUTCNT          SAVE NEW OUTPUT COUNT
         TM    SWITCH+3,SELSTCNT   SEE IF STOP COUNT ENTERED
         BNO   READIN1             NO, BRANCH
         C     R15,VALSTCNT        SEE IF EXCEEDS STOP COUNT
         BH    READIN              YES, DROP THIS RECORD
READIN1  LA    R15,FORMAT          LOAD ADDRESS OF FORMAT ROUTINE
         BALR  R14,R15             GO FORMAT PRINT RECORD
         TM    SWITCH+4,SELNODET   SEE IF DETAIL REPORT DESIRED
         BO    READIN              NO, BYPASS THE PRINT ROUTINE
         CP    LINECT,=P'55'       SEE IF PAGE IS FULL
         BNH   PUTDET              NO, BRANCH
         AP    PAGECT,=P'1'        ADD 1 TO PAGE COUNT
         MVC   OPAGCT,=X'402020202120' MOVE EDIT MASK TO HEAD 1
         ED    OPAGCT,PAGECT       EDIT PAGE COUNT TO HEAD 1
PUTHD1   PUT   SYSPRINT,HEAD1      PRINT HEADING LINE 1
PUTHD2   PUT   SYSPRINT,HEAD2A     PRINT HEADING LINE 2A
         PUT   SYSPRINT,HEAD2B     PRINT HEADING LINE 2B
         ZAP   LINECT,=P'5'        SET LINE COUNT TO 5
         MVI   DETAIL,C'0'         SET NEXT DETAIL TO DOUBLE SPACE
PUTDET   PUT   SYSPRINT,DETAIL     PRINT DETAIL LINE
         AP    LINECT,=P'1'        ADD 1 TO LINE COUNT
         MVI   DETAIL,C' '         SET NEXT DETAIL TO SINGLE SPACE
         B     READIN              GO GET ANOTHER INPUT RECORD
         EJECT
***********************************************************************
*                                                                     *
*        WRITE TOTALS AND AVERAGES IF REQUESTED                       *
*                                                                     *
***********************************************************************
ENDJOB   TM    SWITCH+4,SELTOT     SEE IF TOTALS REQUESTED
         BNO   CLOSE               NO, GET OUT
         AP    PAGECT,=P'1'        ADD 1 TO PAGE COUNT
         MVC   OPAGCT,=X'402020202120' MOVE EDIT MASK TO HEAD 1
         ED    OPAGCT,PAGECT       EDIT PAGE COUNT TO HEAD 1
         PUT   SYSPRINT,HEAD1      PRINT HEADING LINE 1
         ZAP   DATEGREG,=P'0'      ZERO THE GREGORIAN DATE
         CALL  DATERTN,(JG,LOWDATE,DATEGREG) CONVERT TO GREGORIAN
         MVC   WORK(12),=X'402120202020612020612020' SET EDIT MASK
         ED    WORK(12),DATEGREG   EDIT THE LOW DATE
         MVC   HLDATE,WORK+2       MOVE LOW DATE TO HEADING
         ICM   R1,15,LOWTIME       LOAD LOW TIME TO REGISTER 1
         L     R15,=V(CNVTIME)     LOAD ADDRESS OF CONVERT TIME ROUTINE
         BALR  R14,R15             GO TO CONVERT TIME ROUTINE
         MVC   HLTIME,OUTTIME+1    MOVE TIME (HH:MM) TO HEADING
         ZAP   DATEGREG,=P'0'      ZERO THE GREGORIAN DATE
         CALL  DATERTN,(JG,HIGHDATE,DATEGREG) CONVERT TO GREGORIAN
         MVC   WORK(12),=X'402120202020612020612020' SET EDIT MASK
         ED    WORK(12),DATEGREG   EDIT THE HIGH DATE
         MVC   HHDATE,WORK+2       MOVE HIGH DATE TO HEADING
         ICM   R1,15,HIGHTIME      LOAD HIGH TIME TO REGISTER 1
         L     R15,=V(CNVTIME)     LOAD ADDRESS OF CONVERT TIME ROUTINE
         BALR  R14,R15             GO TO CONVERT TIME ROUTINE
         MVC   HHTIME,OUTTIME+1    MOVE TIME (HH:MM) TO HEADING
         PUT   SYSPRINT,HEAD3      PRINT HEADING LINE 3
         PUT   SYSPRINT,HEAD4      PRINT HEADING LINE 4
         MVI   DETAIL,C' '         BLANK ENTIRE
         MVC   DETAIL+1(132),DETAIL   DETAIL LINE
         MVI   DETAIL,C'0'         SET NEXT DETAIL TO DOUBLE SPACE
         SPACE 3
***********************************************************************
*                                                                     *
*        GO FORMAT THE TOTALS AND AVERAGES IN THE ORDER               *
*        IN WHICH THE FIELDS WERE PRINTED.  IF NOT PRINTED,           *
*        NO TOTALS WERE KEPT, SO NO TOTALS OR AVERAGES WILL BE        *
*        PRINTED.                                                     *
*                                                                     *
***********************************************************************
         B     PACC1               GO PRINT NUMBER OF SELECTED STEPS
TOTLINE  L     R2,=V(PRTOPT)       LOAD ADDRESS OF PRINT OPTIONS
TOTLINE1 CLI   0(R2),X'FF'         PHYSICAL END OF TABLE
         BE    TOTLINE4            YES, BRANCH
         CLI   0(R2),C'N'          LOGICAL END OF TABLE
         BE    TOTLINE4            YES, BRANCH
         LH    R15,4(R2)           LOAD BRANCH TABLE OFFSET
         B     TOTLINE2(R15)       BRANCH TO PROPER ROUTINE BY INDEX
TOTLINE2 B     TOTLINE3            INDEX = 00
         B     TOTLINE3            INDEX = 04
         B     TOTLINE3            INDEX = 08
         B     TOTLINE3            INDEX = 12
         B     TOTLINE3            INDEX = 16
         B     TOTLINE3            INDEX = 20
         B     TOTLINE3            INDEX = 24
         B     TOTLINE3            INDEX = 28
         B     TOTLINE3            INDEX = 32
         B     TOTLINE3            INDEX = 36
         B     PACC2               INDEX = 40
         B     PACC4               INDEX = 44
         B     PACC3               INDEX = 48
         B     PACC5               INDEX = 52
         B     PACC6               INDEX = 56
         B     PACC7               INDEX = 60
         B     PACC99              INDEX = 64
         B     TOTLINE3            INDEX = 68
         B     TOTLINE3            INDEX = 72
         B     TOTLINE3            INDEX = 76
         B     TOTLINE3            INDEX = 80
         B     TOTLINE3            INDEX = 84
         B     TOTLINE3            INDEX = 88
         B     TOTLINE3            INDEX = 92
         B     TOTLINE3            INDEX = 96
         B     TOTLINE3            INDEX = 100
         B     TOTLINE3            INDEX = 104
         B     PACC8               INDEX = 108
         B     PACC9               INDEX = 112
         B     PACC10              INDEX = 116
         B     PACC11              INDEX = 120
         B     PACC12              INDEX = 124
         B     TOTLINE3            INDEX = 128
         B     TOTLINE3            INDEX = 132
         B     TOTLINE3            INDEX = 136
         B     PACC13              INDEX = 140
         B     TOTLINE3            INDEX = 144
         B     TOTLINE3            INDEX = 148
         B     TOTLINE3            INDEX = 152
         B     TOTLINE3            INDEX = 156
         B     TOTLINE3            INDEX = 160
         B     TOTLINE3            INDEX = 164
         B     TOTLINE3            INDEX = 168
         B     TOTLINE3            INDEX = 172
         B     TOTLINE3            INDEX = 176
         B     TOTLINE3            INDEX = 180
         B     TOTLINE3            INDEX = 184
         B     TOTLINE3            INDEX = 188
         B     TOTLINE3            INDEX = 192
         B     TOTLINE3            INDEX = 196
         B     TOTLINE3            INDEX = 200
         B     TOTLINE3            INDEX = 204
         B     TOTLINE3            INDEX = 208
         B     TOTLINE3            INDEX = 212
         B     TOTLINE3            INDEX = 216
         B     TOTLINE3            INDEX = 220
         B     TOTLINE3            INDEX = 224
         B     TOTLINE3            INDEX = 228
         B     TOTLINE3            INDEX = 232
         B     TOTLINE3            INDEX = 236
         B     TOTLINE3            INDEX = 240
         B     TOTLINE3            INDEX = 244
         B     TOTLINE3            INDEX = 248
         B     TOTLINE3            INDEX = 252
         B     TOTLINE3            INDEX = 256
         B     TOTLINE3            INDEX = 260
         B     TOTLINE3            INDEX = 264
         B     TOTLINE3            INDEX = 268
         B     TOTLINE3            INDEX = 272
         B     TOTLINE3            INDEX = 276
         B     TOTLINE3            INDEX = 280
         B     TOTLINE3            INDEX = 284
TOTLINE3 LA    R2,6(,R2)           INCREMENT TO NEXT TABLE ENTRY
         B     TOTLINE1            LOOP
TOTLINE4 B     CLOSE               DONE WITH TOTALS
         SPACE 3
***********************************************************************
*                                                                     *
*        FORMAT THE TOTALS AND AVERAGES (IF REQUESTED).  IF           *
*        THE NUMBER OF STEPS EXCEEDS 999,999,999, THEN BYPASS         *
*        AVERAGE CALCULATIONS.  IF THE ACCUMULATOR DOES NOT           *
*        HAVE ROOM TO DIVIDE BY A 5 DIGIT NUMBER, THE TOTAL           *
*        WILL ALSO BE BYPASSED.                                       *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*                                                                     *
*        TOTALS/AVG FOR SELECTED STEP COUNT                           *
*                                                                     *
***********************************************************************
PACC1    MVC   DETAIL+1(16),=CL16'SELECTED RECORDS'
         MVC   DETAIL+17(36),BIGMASK1 SET EDIT MASK
         ED    DETAIL+17(36),ACC1  EDIT TOTAL TO DETAIL LINE
         PUT   SYSPRINT,DETAIL     WRITE TOTAL LINE
         ZAP   STEPCNT,=P'0'       SET STEP COUNT TO ZERO
         CP    ACC1,=P'999999999'  SEE IF EXCEEDS MAX
         BH    TOTLINE             YES, GET OUT
         ZAP   STEPCNT,ACC1        SET STEP COUNT
         ZAP   ACCWRK3,STEPCNT     SAVE STEP COUNT
         DP    ACCWRK3,=P'2'       CALCULATE ROUNDING FACTOR
         ZAP   ROUND,ACCWRK3(7)    SAVE ROUNDING FACTOR
         B     TOTLINE             GO PRINT REST OF TOTALS
         SPACE 3
***********************************************************************
*                                                                     *
*        TOTALS/AVG FOR ELAPSED TIME                                  *
*                                                                     *
***********************************************************************
PACC2    MVC   DETAIL+1(16),=CL16'ELAPSED TIME    '
         MVC   DETAIL+17(36),ASTERS1  ASSUME TOO LARGE
         CLC   ACC2(4),=X'00000000' SEE IF ROOM TO DIVIDE
         BNE   PACC2A              NO, SKIP THIS ONE
         ZAP   ACCWRK1,ACC2        MOVE ACCUMULATOR TO WORK
         DP    ACCWRK1,=P'360000'  DIVIDE BY 36000 FOR HOURS
         ZAP   ACCWRK2,ACCWRK1(12) SAVE HOURS
         MP    ACCWRK2,=P'100'   MULTIPLY BY 100
         ZAP   ACCWRK3,ACCWRK1+12(4) SAVE REMAINDER
         DP    ACCWRK3,=P'6000'    DIVIDE BY 6000 FOR MINUTES
         AP    ACCWRK2,ACCWRK3(5)  ADD TO HOURS
         MP    ACCWRK2,=P'100'     MULTIPLY BY 100
         ZAP   ACCWRK4,ACCWRK3+5(3) SAVE REMAINDER
         DP    ACCWRK4,=P'100'     DIVIDE BY 100 FOR SECONDS
         AP    ACCWRK2,ACCWRK4(6)  ADD TO HOURS AND MINUTES
         MVC   DETAIL+17(36),BIGMASK2 SET EDIT MASK
         ED    DETAIL+17(36),ACCWRK2+1  EDIT TOTAL TO DETAIL LINE
PACC2A   TM    SWITCH+4,SELAVG     SEE IF AVERAGES REQUESTED
         BNO   PACC2B              NO, BRANCH
         MVC   DETAIL+17+36+5(26),ASTERS2  ASSUME TOO LARGE
         CP    STEPCNT,=P'0'       SEE IF STEP COUNT ZERO
         BE    PACC2B              YES, NO AVERAGE POSSIBLE
         CLC   ACC2(5),=X'0000000000' ROOM FOR 5 DIGIT DIVISOR
         BNE   PACC2B              NO, NO AVERAGE POSSIBLE
         MVC   ACCWRK2,ACC2        SAVE TOTAL
         AP    ACCWRK2,ROUND       ADD ROUNDING FACTOR
         DP    ACCWRK2,STEPCNT     CALCULATE AVERAGE
         ZAP   ACCWRK1,ACCWRK2(11) SAVE AVERAGE
         DP    ACCWRK1,=P'360000'  DIVIDE BY 36000 FOR HOURS
         ZAP   ACCWRK2,ACCWRK1(12) SAVE HOURS
         MP    ACCWRK2,=P'100'   MULTIPLY BY 100
         ZAP   ACCWRK3,ACCWRK1+12(4) SAVE REMAINDER
         DP    ACCWRK3,=P'6000'    DIVIDE BY 6000 FOR MINUTES
         AP    ACCWRK2,ACCWRK3(5)  ADD TO HOURS
         MP    ACCWRK2,=P'100'     MULTIPLY BY 100
         ZAP   ACCWRK4,ACCWRK3+5(3) SAVE REMAINDER
         DP    ACCWRK4,=P'100'     DIVIDE BY 100 FOR SECONDS
         AP    ACCWRK2,ACCWRK4(6)  ADD TO HOURS AND MINUTES
         MVC   DETAIL+17+36+5(26),BIGMASK5 SET EDIT MASK
         ED    DETAIL+17+36+5(26),ACCWRK2+5  EDIT TOTAL TO DETAIL LINE
PACC2B   PUT   SYSPRINT,DETAIL     WRITE TOTAL LINE
         B     TOTLINE3            GO PROCESS NEXT TOTAL
         SPACE 3
***********************************************************************
*                                                                     *
*        TOTALS/AVG FOR CPU TIME                                      *
*                                                                     *
***********************************************************************
PACC3    MVC   DETAIL+1(16),=CL16'CPU TIME        '
         MVC   DETAIL+17(36),ASTERS1  ASSUME TOO LARGE
         CLC   ACC3(4),=X'00000000' SEE IF ROOM TO DIVIDE
         BNE   PACC3A              NO, SKIP THIS ONE
         ZAP   ACCWRK1,ACC3        MOVE ACCUMULATOR TO WORK
         DP    ACCWRK1,=P'360000'  DIVIDE BY 36000 FOR HOURS
         ZAP   ACCWRK2,ACCWRK1(12) SAVE HOURS
         MP    ACCWRK2,=P'100'   MULTIPLY BY 100
         ZAP   ACCWRK3,ACCWRK1+12(4) SAVE REMAINDER
         DP    ACCWRK3,=P'6000'    DIVIDE BY 6000 FOR MINUTES
         AP    ACCWRK2,ACCWRK3(5)  ADD TO HOURS
         MP    ACCWRK2,=P'100'     MULTIPLY BY 100
         ZAP   ACCWRK4,ACCWRK3+5(3) SAVE REMAINDER
         DP    ACCWRK4,=P'100'     DIVIDE BY 100 FOR SECONDS
         AP    ACCWRK2,ACCWRK4(6)  ADD TO HOURS AND MINUTES
         MVC   DETAIL+17(36),BIGMASK2 SET EDIT MASK
         ED    DETAIL+17(36),ACCWRK2+1  EDIT TOTAL TO DETAIL LINE
PACC3A   TM    SWITCH+4,SELAVG     SEE IF AVERAGES REQUESTED
         BNO   PACC3B              NO, BRANCH
         MVC   DETAIL+17+36+5(26),ASTERS2  ASSUME TOO LARGE
         CP    STEPCNT,=P'0'       SEE IF STEP COUNT ZERO
         BE    PACC3B              YES, NO AVERAGE POSSIBLE
         CLC   ACC3(5),=X'0000000000' ROOM FOR 5 DIGIT DIVISOR
         BNE   PACC3B              NO, NO AVERAGE POSSIBLE
         MVC   ACCWRK2,ACC3        SAVE TOTAL
         AP    ACCWRK2,ROUND       ADD ROUNDING FACTOR
         DP    ACCWRK2,STEPCNT     CALCULATE AVERAGE
         ZAP   ACCWRK1,ACCWRK2(11) SAVE AVERAGE
         DP    ACCWRK1,=P'360000'  DIVIDE BY 36000 FOR HOURS
         ZAP   ACCWRK2,ACCWRK1(12) SAVE HOURS
         MP    ACCWRK2,=P'100'   MULTIPLY BY 100
         ZAP   ACCWRK3,ACCWRK1+12(4) SAVE REMAINDER
         DP    ACCWRK3,=P'6000'    DIVIDE BY 6000 FOR MINUTES
         AP    ACCWRK2,ACCWRK3(5)  ADD TO HOURS
         MP    ACCWRK2,=P'100'     MULTIPLY BY 100
         ZAP   ACCWRK4,ACCWRK3+5(3) SAVE REMAINDER
         DP    ACCWRK4,=P'100'     DIVIDE BY 100 FOR SECONDS
         AP    ACCWRK2,ACCWRK4(6)  ADD TO HOURS AND MINUTES
         MVC   DETAIL+17+36+5(26),BIGMASK5 SET EDIT MASK
         ED    DETAIL+17+36+5(26),ACCWRK2+5  EDIT AVG TO DETAIL LINE
PACC3B   PUT   SYSPRINT,DETAIL     WRITE TOTAL LINE
         B     TOTLINE3            GO PROCESS NEXT TOTAL
         SPACE 3
***********************************************************************
*                                                                     *
*        TOTALS/AVG FOR BLOCK COUNT                                   *
*                                                                     *
***********************************************************************
PACC4    MVC   DETAIL+1(16),=CL16'BLOCK COUNT     '
         MVC   DETAIL+17(36),BIGMASK1 SET EDIT MASK
         ED    DETAIL+17(36),ACC4  EDIT TOTAL TO DETAIL LINE
PACC4A   TM    SWITCH+4,SELAVG     SEE IF AVERAGES REQUESTED
         BNO   PACC4B              NO, BRANCH
         MVC   DETAIL+17+36+5(26),ASTERS2  ASSUME TOO LARGE
         CP    STEPCNT,=P'0'       SEE IF STEP COUNT ZERO
         BE    PACC4B              YES, NO AVERAGE POSSIBLE
         CLC   ACC3(5),=X'0000000000' ROOM FOR 5 DIGIT DIVISOR
         BNE   PACC4B              NO, NO AVERAGE POSSIBLE
         MVC   ACCWRK2,ACC4        SAVE TOTAL
         AP    ACCWRK2,ROUND       ADD ROUNDING FACTOR
         DP    ACCWRK2,STEPCNT     CALCULATE AVERAGE
         ZAP   ACCWRK1,ACCWRK2(11) SAVE AVERAGE
         MVC   DETAIL+17+36+5(26),BIGMASK4 SET EDIT MASK
         ED    DETAIL+17+36+5(26),ACCWRK1+5 EDIT AVG TO DETAIL LINE
PACC4B   PUT   SYSPRINT,DETAIL     WRITE TOTAL LINE
         B     TOTLINE3            GO PROCESS NEXT TOTAL
         SPACE 3
***********************************************************************
*                                                                     *
*        TOTALS/AVG FOR REGION USED BELOW 16 MEG                      *
*                                                                     *
***********************************************************************
PACC5    MVC   DETAIL+1(16),=CL16'RGN BELOW 16M   '
         MVC   DETAIL+17(36),BIGMASK3 SET EDIT MASK
         ED    DETAIL+17(36),ACC5  EDIT TOTAL TO DETAIL LINE
         MVI   DETAIL+17+36,C'M'   SET MEG INDICATOR
PACC5A   TM    SWITCH+4,SELAVG     SEE IF AVERAGES REQUESTED
         BNO   PACC5B              NO, BRANCH
         MVC   DETAIL+17+36+5(26),ASTERS2  ASSUME TOO LARGE
         CP    STEPCNT,=P'0'       SEE IF STEP COUNT ZERO
         BE    PACC5B              YES, NO AVERAGE POSSIBLE
         CLC   ACC3(5),=X'0000000000' ROOM FOR 5 DIGIT DIVISOR
         BNE   PACC5B              NO, NO AVERAGE POSSIBLE
         MVC   ACCWRK2,ACC5        SAVE TOTAL
         AP    ACCWRK2,ROUND       ADD ROUNDING FACTOR
         DP    ACCWRK2,STEPCNT     CALCULATE AVERAGE
         ZAP   ACCWRK1,ACCWRK2(11) SAVE AVERAGE
         MVC   DETAIL+17+36+5(26),BIGMASK6 SET EDIT MASK
         ED    DETAIL+17+36+5(26),ACCWRK1+5 EDIT AVG TO DETAIL LINE
         MVI   DETAIL+17+36+5+26,C'M'   SET MEG INDICATOR
PACC5B   PUT   SYSPRINT,DETAIL     WRITE TOTAL LINE
         MVI   DETAIL+17+36,C' '   BLANK MEG INDICATOR
         MVI   DETAIL+17+36+5+26,C' '   BLANK MEG INDICATOR
         B     TOTLINE3            GO PROCESS NEXT TOTAL
         SPACE 3
***********************************************************************
*                                                                     *
*        TOTALS/AVG FOR REGION USED ABOVE 16 MEG                      *
*                                                                     *
***********************************************************************
PACC6    MVC   DETAIL+1(16),=CL16'RGN ABOVE 16M   '
         MVC   DETAIL+17(36),BIGMASK3 SET EDIT MASK
         ED    DETAIL+17(36),ACC6  EDIT TOTAL TO DETAIL LINE
         MVI   DETAIL+17+36,C'M'   SET MEG INDICATOR
PACC6A   TM    SWITCH+4,SELAVG     SEE IF AVERAGES REQUESTED
         BNO   PACC6B              NO, BRANCH
         MVC   DETAIL+17+36+5(26),ASTERS2  ASSUME TOO LARGE
         CP    STEPCNT,=P'0'       SEE IF STEP COUNT ZERO
         BE    PACC6B              YES, NO AVERAGE POSSIBLE
         CLC   ACC3(5),=X'0000000000' ROOM FOR 5 DIGIT DIVISOR
         BNE   PACC6B              NO, NO AVERAGE POSSIBLE
         MVC   ACCWRK2,ACC6        SAVE TOTAL
         AP    ACCWRK2,ROUND       ADD ROUNDING FACTOR
         DP    ACCWRK2,STEPCNT     CALCULATE AVERAGE
         ZAP   ACCWRK1,ACCWRK2(11) SAVE AVERAGE
         MVC   DETAIL+17+36+5(26),BIGMASK6 SET EDIT MASK
         ED    DETAIL+17+36+5(26),ACCWRK1+5 EDIT AVG TO DETAIL LINE
         MVI   DETAIL+17+36+5+26,C'M'   SET MEG INDICATOR
PACC6B   PUT   SYSPRINT,DETAIL     WRITE TOTAL LINE
         MVI   DETAIL+17+36,C' '   BLANK MEG INDICATOR
         MVI   DETAIL+17+36+5+26,C' '   BLANK MEG INDICATOR
         B     TOTLINE3            GO PROCESS NEXT TOTAL
         SPACE 3
***********************************************************************
*                                                                     *
*        TOTALS/AVG FOR TOTAL TAPES MOUNTED                           *
*                                                                     *
***********************************************************************
PACC7    MVC   DETAIL+1(16),=CL16'TOTAL TAPES     '
         MVC   DETAIL+17(36),BIGMASK1 SET EDIT MASK
         ED    DETAIL+17(36),ACC7  EDIT TOTAL TO DETAIL LINE
PACC7A   TM    SWITCH+4,SELAVG     SEE IF AVERAGES REQUESTED
         BNO   PACC7B              NO, BRANCH
         MVC   DETAIL+17+36+5(26),ASTERS2  ASSUME TOO LARGE
         CP    STEPCNT,=P'0'       SEE IF STEP COUNT ZERO
         BE    PACC7B              YES, NO AVERAGE POSSIBLE
         CLC   ACC3(5),=X'0000000000' ROOM FOR 5 DIGIT DIVISOR
         BNE   PACC7B              NO, NO AVERAGE POSSIBLE
         MVC   ACCWRK2,ACC7        SAVE TOTAL
         AP    ACCWRK2,ROUND       ADD ROUNDING FACTOR
         DP    ACCWRK2,STEPCNT     CALCULATE AVERAGE
         ZAP   ACCWRK1,ACCWRK2(11) SAVE AVERAGE
         MVC   DETAIL+17+36+5(26),BIGMASK4 SET EDIT MASK
         ED    DETAIL+17+36+5(26),ACCWRK1+5 EDIT AVG TO DETAIL LINE
PACC7B   PUT   SYSPRINT,DETAIL     WRITE TOTAL LINE
         B     TOTLINE3            GO PROCESS NEXT TOTAL
         SPACE 3
***********************************************************************
*                                                                     *
*        TOTALS/AVG FOR NON-SCRATCH TAPES MOUNTED                     *
*                                                                     *
***********************************************************************
PACC8    MVC   DETAIL+1(16),=CL16'NON-SCR TAPES   '
         MVC   DETAIL+17(36),BIGMASK1 SET EDIT MASK
         ED    DETAIL+17(36),ACC8  EDIT TOTAL TO DETAIL LINE
PACC8A   TM    SWITCH+4,SELAVG     SEE IF AVERAGES REQUESTED
         BNO   PACC8B              NO, BRANCH
         MVC   DETAIL+17+36+5(26),ASTERS2  ASSUME TOO LARGE
         CP    STEPCNT,=P'0'       SEE IF STEP COUNT ZERO
         BE    PACC8B              YES, NO AVERAGE POSSIBLE
         CLC   ACC3(5),=X'0000000000' ROOM FOR 5 DIGIT DIVISOR
         BNE   PACC8B              NO, NO AVERAGE POSSIBLE
         MVC   ACCWRK2,ACC8        SAVE TOTAL
         AP    ACCWRK2,ROUND       ADD ROUNDING FACTOR
         DP    ACCWRK2,STEPCNT     CALCULATE AVERAGE
         ZAP   ACCWRK1,ACCWRK2(11) SAVE AVERAGE
         MVC   DETAIL+17+36+5(26),BIGMASK4 SET EDIT MASK
         ED    DETAIL+17+36+5(26),ACCWRK1+5 EDIT AVG TO DETAIL LINE
PACC8B   PUT   SYSPRINT,DETAIL     WRITE TOTAL LINE
         B     TOTLINE3            GO PROCESS NEXT TOTAL
         SPACE 3
***********************************************************************
*                                                                     *
*        TOTALS/AVG FOR SCRATCH TAPES MOUNTED                         *
*                                                                     *
***********************************************************************
PACC9    MVC   DETAIL+1(16),=CL16'SCRATCH TAPES   '
         MVC   DETAIL+17(36),BIGMASK1 SET EDIT MASK
         ED    DETAIL+17(36),ACC9  EDIT TOTAL TO DETAIL LINE
PACC9A   TM    SWITCH+4,SELAVG     SEE IF AVERAGES REQUESTED
         BNO   PACC9B              NO, BRANCH
         MVC   DETAIL+17+36+5(26),ASTERS2  ASSUME TOO LARGE
         CP    STEPCNT,=P'0'       SEE IF STEP COUNT ZERO
         BE    PACC9B              YES, NO AVERAGE POSSIBLE
         CLC   ACC3(5),=X'0000000000' ROOM FOR 5 DIGIT DIVISOR
         BNE   PACC9B              NO, NO AVERAGE POSSIBLE
         MVC   ACCWRK2,ACC9        SAVE TOTAL
         AP    ACCWRK2,ROUND       ADD ROUNDING FACTOR
         DP    ACCWRK2,STEPCNT     CALCULATE AVERAGE
         ZAP   ACCWRK1,ACCWRK2(11) SAVE AVERAGE
         MVC   DETAIL+17+36+5(26),BIGMASK4 SET EDIT MASK
         ED    DETAIL+17+36+5(26),ACCWRK1+5 EDIT AVG TO DETAIL LINE
PACC9B   PUT   SYSPRINT,DETAIL     WRITE TOTAL LINE
         B     TOTLINE3            GO PROCESS NEXT TOTAL
         SPACE 3
***********************************************************************
*                                                                     *
*        TOTALS/AVG FOR EXPANDED STORAGE PAGE ACTIVITY                *
*                                                                     *
***********************************************************************
PACC10   MVC   DETAIL+1(16),=CL16'EXP STG PAGES   '
         MVC   DETAIL+17(36),BIGMASK1 SET EDIT MASK
         ED    DETAIL+17(36),ACC10 EDIT TOTAL TO DETAIL LINE
PACC10A  TM    SWITCH+4,SELAVG     SEE IF AVERAGES REQUESTED
         BNO   PACC10B             NO, BRANCH
         MVC   DETAIL+17+36+5(26),ASTERS2  ASSUME TOO LARGE
         CP    STEPCNT,=P'0'       SEE IF STEP COUNT ZERO
         BE    PACC10B             YES, NO AVERAGE POSSIBLE
         CLC   ACC3(5),=X'0000000000' ROOM FOR 5 DIGIT DIVISOR
         BNE   PACC10B             NO, NO AVERAGE POSSIBLE
         MVC   ACCWRK2,ACC10       SAVE TOTAL
         AP    ACCWRK2,ROUND       ADD ROUNDING FACTOR
         DP    ACCWRK2,STEPCNT     CALCULATE AVERAGE
         ZAP   ACCWRK1,ACCWRK2(11) SAVE AVERAGE
         MVC   DETAIL+17+36+5(26),BIGMASK4 SET EDIT MASK
         ED    DETAIL+17+36+5(26),ACCWRK1+5 EDIT AVG TO DETAIL LINE
PACC10B  PUT   SYSPRINT,DETAIL     WRITE TOTAL LINE
         B     TOTLINE3            GO PROCESS NEXT TOTAL
         SPACE 3
***********************************************************************
*                                                                     *
*        TOTALS/AVG FOR AUXILLARY STORAGE PAGE ACTIVITY               *
*                                                                     *
***********************************************************************
PACC11   MVC   DETAIL+1(16),=CL16'AUX STG PAGES   '
         MVC   DETAIL+17(36),BIGMASK1 SET EDIT MASK
         ED    DETAIL+17(36),ACC11 EDIT TOTAL TO DETAIL LINE
PACC11A  TM    SWITCH+4,SELAVG     SEE IF AVERAGES REQUESTED
         BNO   PACC11B             NO, BRANCH
         MVC   DETAIL+17+36+5(26),ASTERS2  ASSUME TOO LARGE
         CP    STEPCNT,=P'0'       SEE IF STEP COUNT ZERO
         BE    PACC11B             YES, NO AVERAGE POSSIBLE
         CLC   ACC3(5),=X'0000000000' ROOM FOR 5 DIGIT DIVISOR
         BNE   PACC11B             NO, NO AVERAGE POSSIBLE
         MVC   ACCWRK2,ACC11       SAVE TOTAL
         AP    ACCWRK2,ROUND       ADD ROUNDING FACTOR
         DP    ACCWRK2,STEPCNT     CALCULATE AVERAGE
         ZAP   ACCWRK1,ACCWRK2(11) SAVE AVERAGE
         MVC   DETAIL+17+36+5(26),BIGMASK4 SET EDIT MASK
         ED    DETAIL+17+36+5(26),ACCWRK1+5 EDIT AVG TO DETAIL LINE
PACC11B  PUT   SYSPRINT,DETAIL     WRITE TOTAL LINE
         B     TOTLINE3            GO PROCESS NEXT TOTAL
         SPACE 3
***********************************************************************
*                                                                     *
*        TOTALS/AVG FOR SERVICE UNITS                                 *
*                                                                     *
***********************************************************************
PACC12   MVC   DETAIL+1(16),=CL16'SERVICE UNITS   '
         MVC   DETAIL+17(36),BIGMASK1 SET EDIT MASK
         ED    DETAIL+17(36),ACC12 EDIT TOTAL TO DETAIL LINE
         MVI   DETAIL+17+36,C'K'   SET K INDICATOR
PACC12A  TM    SWITCH+4,SELAVG     SEE IF AVERAGES REQUESTED
         BNO   PACC12B             NO, BRANCH
         MVC   DETAIL+17+36+5(26),ASTERS2  ASSUME TOO LARGE
         CP    STEPCNT,=P'0'       SEE IF STEP COUNT ZERO
         BE    PACC12B             YES, NO AVERAGE POSSIBLE
         CLC   ACC3(5),=X'0000000000' ROOM FOR 5 DIGIT DIVISOR
         BNE   PACC12B             NO, NO AVERAGE POSSIBLE
         MVC   ACCWRK2,ACC12       SAVE TOTAL
         AP    ACCWRK2,ROUND       ADD ROUNDING FACTOR
         DP    ACCWRK2,STEPCNT     CALCULATE AVERAGE
         ZAP   ACCWRK1,ACCWRK2(11) SAVE AVERAGE
         MVC   DETAIL+17+36+5(26),BIGMASK4 SET EDIT MASK
         ED    DETAIL+17+36+5(26),ACCWRK1+5 EDIT AVG TO DETAIL LINE
         MVI   DETAIL+17+36+5+26,C'K'   SET K INDICATOR
PACC12B  PUT   SYSPRINT,DETAIL     WRITE TOTAL LINE
         MVI   DETAIL+17+36,C' '   BLANK K INDICATOR
         MVI   DETAIL+17+36+5+26,C' '   BLANK K INDICATOR
         B     TOTLINE3            GO PROCESS NEXT TOTAL
         SPACE 3
***********************************************************************
*                                                                     *
*        TOTALS/AVG FOR VIO PAGING                                    *
*                                                                     *
***********************************************************************
PACC13   MVC   DETAIL+1(16),=CL16'VIO PAGES       '
         MVC   DETAIL+17(36),BIGMASK1 SET EDIT MASK
         ED    DETAIL+17(36),ACC13 EDIT TOTAL TO DETAIL LINE
PACC13A  TM    SWITCH+4,SELAVG     SEE IF AVERAGES REQUESTED
         BNO   PACC13B             NO, BRANCH
         MVC   DETAIL+17+36+5(26),ASTERS2  ASSUME TOO LARGE
         CP    STEPCNT,=P'0'       SEE IF STEP COUNT ZERO
         BE    PACC13B             YES, NO AVERAGE POSSIBLE
         CLC   ACC3(5),=X'0000000000' ROOM FOR 5 DIGIT DIVISOR
         BNE   PACC13B             NO, NO AVERAGE POSSIBLE
         MVC   ACCWRK2,ACC13       SAVE TOTAL
         AP    ACCWRK2,ROUND       ADD ROUNDING FACTOR
         DP    ACCWRK2,STEPCNT     CALCULATE AVERAGE
         ZAP   ACCWRK1,ACCWRK2(11) SAVE AVERAGE
         MVC   DETAIL+17+36+5(26),BIGMASK4 SET EDIT MASK
         ED    DETAIL+17+36+5(26),ACCWRK1+5 EDIT AVG TO DETAIL LINE
PACC13B  PUT   SYSPRINT,DETAIL     WRITE TOTAL LINE
         B     TOTLINE3            GO PROCESS NEXT TOTAL
         SPACE 3
***********************************************************************
*                                                                     *
*        TOTALS/AVG FOR CPU PERCENT                                   *
*                                                                     *
***********************************************************************
PACC99   MVC   DETAIL+1(16),=CL16'CPU PERCENT     '
         MVC   DETAIL+17(36),ASTERS1       ASSUME TOO LARGE
         CLC   ACC2(8),=X'0000000000000000' SEE IF ELAP TIME TOO LARGE
         BNE   PACC99A             YES, NO AVERAGE POSSIBLE
         CLC   ACC3(9),=X'000000000000000000' SEE IF CPU TIME TOO LARGE
         BNE   PACC99A             YES, NO AVERAGE POSSIBLE
         CP    ACC2,=P'0'          SEE IF ELAP TIME ZERO
         BE    PACC99A             YES, NO AVERAGE POSSIBLE
         ZAP   ACCWRK2,ACC3        SAVE CPU TIME
         MP    ACCWRK2,=P'1000'    MULTIPLY BY 1000 FOR PERCENT X 10
         DP    ACCWRK2,ACC2+8(8)   DIVIDE BY ELAPSED TIME
         ZAP   ACCWRK1,ACCWRK2(8)  SAVE AVERAGE
         AP    ACCWRK1,=P'5'       ADD ROUNDING FACTOR
         DP    ACCWRK1,=P'10'      DIVIDE BY 10 FOR PERCENT
         ZAP   ACCWRK2,ACCWRK1(14) SAVE PERCENT
         MVC   DETAIL+17(36),BIGMASK1 SET EDIT MASK
         ED    DETAIL+17(36),ACCWRK2  EDIT AVG TO DETAIL LINE
PACC99A  TM    SWITCH+4,SELAVG     SEE IF AVERAGES REQUESTED
         BNO   PACC99B             NO, BRANCH
         MVC   DETAIL+17+36+5(26),DETAIL+17+10 DUPLICATE CPU%
PACC99B  PUT   SYSPRINT,DETAIL     WRITE TOTAL LINE
         B     TOTLINE3            GO PROCESS NEXT TOTAL
         EJECT
***********************************************************************
*                                                                     *
*        CLOSE FILES AND TERMINATE THE PROGRAM                        *
*                                                                     *
***********************************************************************
CLOSE    ICM   R1,B'1111',JOBNMTBL SEE IF JOBNAME TABLE ALLOCATED
         BZ    CLOSE1              NO, BRANCH
         FREEMAIN R,LV=10010,A=(1) FREE JOBNAME TABLE
CLOSE1   ICM   R1,B'1111',JOBNOTBL SEE IF JOB NUMBER TABLE ALLOCATED
         BZ    CLOSE2              NO, BRANCH
         FREEMAIN R,LV=8008,A=(1)  FREE JOB NUMBER TABLE
CLOSE2   ICM   R1,B'1111',DATETBL  SEE IF DATE TABLE ALLOCATED
         BZ    CLOSE3              NO, BRANCH
         FREEMAIN R,LV=8008,A=(1)  FREE DATE TABLE
CLOSE3   ICM   R1,B'1111',STIMETBL SEE IF START TIME TABLE ALLOCATED
         BZ    CLOSE3A             NO, BRANCH
         FREEMAIN R,LV=8008,A=(1)  FREE TIME TABLE
CLOSE3A  ICM   R1,B'1111',ETIMETBL SEE IF END TIME TABLE ALLOCATED
         BZ    CLOSE4              NO, BRANCH
         FREEMAIN R,LV=8008,A=(1)  FREE TIME TABLE
CLOSE4   ICM   R1,B'1111',SYSIDTBL SEE IF SYSID TABLE ALLOCATED
         BZ    CLOSE5              NO, BRANCH
         FREEMAIN R,LV=4004,A=(1)  FREE SYSID TABLE
CLOSE5   ICM   R1,B'1111',PSTEPTBL SEE IF PROC STEP TABLE ALLOCATED
         BZ    CLOSE6              NO, BRANCH
         FREEMAIN R,LV=10010,A=(1) FREE PROC STEP TABLE
CLOSE6   ICM   R1,B'1111',JSTEPTBL SEE IF JOB STEP TABLE ALLOCATED
         BZ    CLOSE7              NO, BRANCH
         FREEMAIN R,LV=10010,A=(1) FREE JOB STEP TABLE
CLOSE7   ICM   R1,B'1111',PGMTBL   SEE IF PGM NAME TABLE ALLOCATED
         BZ    CLOSE8              NO, BRANCH
         FREEMAIN R,LV=10010,A=(1) FREE PGM NAME TABLE
CLOSE8   ICM   R1,B'1111',UIDTBL   SEE IF USERID TABLE ALLOCATED
         BZ    CLOSE9              NO, BRANCH
         FREEMAIN R,LV=10010,A=(1) FREE SECURITY USERID TABLE
CLOSE9   ICM   R1,B'1111',CCTBL    SEE IF CCODE TABLE ALLOCATED
         BZ    CLOSE10             NO, BRANCH
         FREEMAIN R,LV=7007,A=(1)  FREE CCODE TABLE
CLOSE10  ICM   R1,B'1111',XJOBNTBL SEE IF EXJOBNAME TABLE ALLOCATED
         BZ    CLOSE11             NO, BRANCH
         FREEMAIN R,LV=10010,A=(1) FREE EXJOBNAME TABLE
CLOSE11  ICM   R1,B'1111',XJBNOTBL SEE IF EXJOBNO TABLE ALLOCATED
         BZ    CLOSE12             NO, BRANCH
         FREEMAIN R,LV=8008,A=(1)  FREE EXJOBNO TABLE
CLOSE12  ICM   R1,B'1111',XSYSTBL  SEE IF EXYSID TABLE ALLOCATED
         BZ    CLOSE13             NO, BRANCH
         FREEMAIN R,LV=4004,A=(1)  FREE EXSYSID TABLE
CLOSE13  ICM   R1,B'1111',XPSTPTBL SEE IF EXPSTEP TABLE ALLOCATED
         BZ    CLOSE14             NO, BRANCH
         FREEMAIN R,LV=10010,A=(1) FREE EXPSTEP TABLE
CLOSE14  ICM   R1,B'1111',XJSTPTBL SEE IF EXJSTEP TABLE ALLOCATED
         BZ    CLOSE15             NO, BRANCH
         FREEMAIN R,LV=10010,A=(1) FREE EXJSTEP TABLE
CLOSE15  ICM   R1,B'1111',XPGMTBL  SEE IF EXPGM NAME TABLE ALLOCATED
         BZ    CLOSE16             NO, BRANCH
         FREEMAIN R,LV=10010,A=(1) FREE EXPGM NAME TABLE
CLOSE16  ICM   R1,B'1111',XUIDTBL   SEE IF EXUSERID TABLE ALLOCATED
         BZ    CLOSE17             NO, BRANCH
         FREEMAIN R,LV=10010,A=(1) FREE EXSECURITY USERID TABLE
CLOSE17  ICM   R1,B'1111',XCCTBL   SEE IF EXCCODE TABLE ALLOCATED
         BZ    CLOSE18             NO, BRANCH
         FREEMAIN R,LV=7007,A=(1)  FREE EXCCODE TABLE
CLOSE18  TM    SWITCH+6,OPTOUT     SEE IF OPTIONAL OUTPUT FILE
         BNO   CLOSE19             NO, BRANCH
         CLOSE (DATAOUT)           CLOSE OPTIONAL OUTPUT FILE
CLOSE19  CLOSE (SYSPRINT,,SMFIN)   CLOSE SMF INPUT FILE AND PRINT FILE
         L     R13,4(R13)          RESTORE ORIG REGISTER 13
         RETURN (14,12),RC=0       RETURN TO O/S
         SPACE 3
         LTORG
         EJECT
***********************************************************************
*                                                                     *
*        SORT INPUT PROCEDURE IF SORT OPTION USED                     *
*                                                                     *
***********************************************************************
         CNOP  0,4
         PUSH  USING
E15      STM   R14,R12,12(R13)     SAVE REGISTERS
         USING E15,R9,R10,R11,R12  SET ADDRESSABILITY TO EXIT
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,E15SAVE         LOAD ADDR OF NEW SAVE
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
         LA    R3,SMFIN            LOAD ADDRESS OF INPUT DCB
E15READ  LA    R15,READRTN         LOAD ADDRESS OF READ SMF ROUTINE
         BALR  R14,R15             GO READ SMF ROUTINE
         TM    SWITCH,ENDFILE      END OF FILE?
         BO    E15EOF              YES, BRANCH
E15RET   L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         LA    R15,INREC           POINT TO INPUT RECORD
         ST    R15,24(R13)         STORE ADDRESS OF RECORD IN SAVE
         LM    R14,R12,12(R13)     RESTORE ORIGINAL REGS
         LA    R15,12              SET RETURN CODE TO 12
         BR    R14                 RETURN RECORD TO SORT
E15EOF   L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         LM    R14,R12,12(R13)     RESTORE ORIGINAL REGS
         LA    R15,8               SET RETURN CODE TO 8
         BR    R14                 RETURN TO SORT FOR LAST TIME
         SPACE 3
         LTORG
E15SAVE  DS    18F                 SORT EXIT E15 SAVE AREA
         DROP  R9,R10,R11,R12
         POP   USING
         EJECT
***********************************************************************
*                                                                     *
*        SORT OUTPUT PROCEDURE IF SORT OPTION USED                    *
*                                                                     *
***********************************************************************
         CNOP  0,4
         PUSH  USING
E35      STM   R14,R12,12(R13)     SAVE REGISTERS
         USING E35,R9,R10,R11,R12  SET ADDRESSABILITY TO EXIT
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,E35SAVE         LOAD ADDR OF NEW SAVE
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
         L     R5,0(R1)            SAVE INPUT RECORD ADDRESS
         LTR   R5,R5               TEST INPUT RECORD ADDRESS
         BZ    E35EOF              ZERO, END OF FILE
         MVC   INREC,0(R5)         SAVE INPUT RECORD
         L     R15,OUTCNT          LOAD OUTPUT COUNT
         LA    R15,1(,R15)         ADD 1 TO OUTPUT COUNT
         ST    R15,OUTCNT          SAVE NEW OUTPUT COUNT
         TM    SWITCH+3,SELSTCNT   SEE IF STOP COUNT ENTERED
         BNO   E35CONT             NO, BRANCH
         C     R15,VALSTCNT        SEE IF EXCEEDS STOP COUNT
         BH    E35RET              YES, DROP THIS RECORD
E35CONT  LA    R15,FORMAT          LOAD ADDRESS OF FORMAT ROUTINE
         BALR  R14,R15             GO FORMAT PRINT RECORD
         TM    SWITCH+4,SELNODET   SEE IF DETAIL REPORT DESIRED
         BO    E35RET              NO, BYPASS THE PRINT ROUTINE
         CP    LINECT,=P'55'       SEE IF PAGE IS FULL
         BNH   E35DET              NO, BRANCH
         AP    PAGECT,=P'1'        ADD 1 TO PAGE COUNT
         MVC   OPAGCT,=X'402020202120' MOVE EDIT MASK TO HEAD 1
         ED    OPAGCT,PAGECT       EDIT PAGE COUNT TO HEAD 1
E35HD1   PUT   SYSPRINT,HEAD1      PRINT HEADING LINE 1
E35HD2   PUT   SYSPRINT,HEAD2A     PRINT HEADING LINE 2A
         PUT   SYSPRINT,HEAD2B     PRINT HEADING LINE 2B
         ZAP   LINECT,=P'5'        SET LINE COUNT TO 5
         MVI   DETAIL,C'0'         SET NEXT DETAIL TO DOUBLE SPACE
E35DET   PUT   SYSPRINT,DETAIL     PRINT DETAIL LINE
         AP    LINECT,=P'1'        ADD 1 TO LINE COUNT
         MVI   DETAIL,C' '         SET NEXT DETAIL TO SINGLE SPACE
E35RET   L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         LM    R14,R12,12(R13)     RESTORE ORIGINAL REGS
         LA    R15,4               SET RETURN CODE TO 4
         BR    R14                 RETURN TO SORT FOR ANOTHER RECORD
E35EOF   L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         LM    R14,R12,12(R13)     RESTORE ORIGINAL REGS
         LA    R15,8               SET RETURN CODE TO 8
         BR    R14                 RETURN TO SORT FOR LAST TIME
         SPACE 3
         LTORG
E35SAVE  DS    18F                 SORT EXIT E35 SAVE AREA
         DROP  R9,R10,R11,R12
         POP   USING
         EJECT
         PUSH  USING
***********************************************************************
*                                                                     *
*        THIS ROUTINE WILL READ THE SMF INPUT FILE UNTIL A PROPER     *
*        SMF RECORD IS FOUND.                                         *
*                                                                     *
*        ON ENTRY THE REGISTERS WILL BE AS FOLLOWS:                   *
*                                                                     *
*        1)  REGISTER 14 ON ENTRY WILL CONTAIN THE ENTRY POINT        *
*        2)  REGISTER 15 ON ENTRY WILL CONTAIN THE RETURN ADDRESS     *
*                                                                     *
*        RECORDS WILL BE FILTERED OUT IF SELECTION CRITERIA WAS       *
*        SPECIFIED ON AN INPUT CONTROL CARD.                          *
*                                                                     *
*        THE SMF TYPE 30 RECORD WILL BE REFORMATTED INTO A 100        *
*        CHARACTER FIXED LENGTH RECORD AT LABEL INREC.                *
*                                                                     *
*        ON EOF, THE ENDFILE INDICATOR WILL BE TURNED ON              *
*                                                                     *
*        RETURN FROM THIS ROUTINE WILL BE MADE TO REGISTER 14         *
*                                                                     *
***********************************************************************
READRTN  STM   R14,R12,12(R13)     SAVE REGISTERS
         USING READRTN,R9,R10,R11,R12 SET ADDRESSABILITY TO ROUTINE
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,SAVE1           LOAD ADDR OF NEW SAVE
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
         B     READREC             GO READ SMF RECORD
SAVE1    DS    18F                 ROUTINE SAVE AREA
***********************************************************************
*                                                                     *
*        READ AN SMF TYPE 30 SUBTYPE 4 RECORD FOR STANDARD            *
*        PROCESSING.                                                  *
*                                                                     *
*        READ AN SMF TYPE 30 SUBTYPE 5 RECORD FOR JOBLEVEL            *
*        PROCESSING.                                                  *
*                                                                     *
*        READ AN SMF TYPE 30 SUBTYPE 2 OR 3 RECORD FOR INTERVAL       *
*        PROCESSING.                                                  *
*                                                                     *
*        REFORMAT EACH RECORD TYPE INTO A MORE USABLE RECORD          *
*        FORMAT.                                                      *
*                                                                     *
***********************************************************************
READREC  GET   SMFIN               READ SMF INPUT
         LR    R5,R1               SAVE INPUT RECORD ADDRESS
         USING SMFRCD30,R5         SET ADDRESSABILITY TO SMF RECORD
         CLI   SMF30DTE,X'19'      SEE IF CORRECT CENTURY
         BE    READREC1            YES, OK
         CLI   SMF30DTE,X'20'      SEE IF CORRECT CENTURY
         BE    READREC1            YES, OK
         MVI   SMF30DTE,X'19'      ASSUME 20TH CENTURY
         CLI   SMF30DTE+1,X'50'    TEST SEE IF PAST YEAR 50
         BH    READREC1            YES, OK
         MVI   SMF30DTE,X'20'      MAKE 21ST CENTURY
READREC1 CLC   SMF30DTE,LOWDATE    SEE IF NEW LOW DATE
         BNL   READREC2            NO, BRANCH
         MVC   LOWDATE,SMF30DTE    SAVE NEW LOW DATE
         MVC   LOWTIME,SMF30TME    SAVE NEW LOW TIME
         B     READREC3            GO SEE IF ALSO NEW HIGH DATE/TIME
READREC2 CLC   SMF30DTE,LOWDATE    SEE IF SAME LOW DATE
         BH    READREC3            NO, NOT NEW LOW DATE/TIME
         CLC   SMF30TME,LOWTIME    SEE IF NEW LOW TIME
         BNL   READREC3            NO, BRANCH
         MVC   LOWTIME,SMF30TME    SAVE NEW LOW TIME
READREC3 CLC   SMF30DTE,HIGHDATE   SEE IF NEW HIGH DATE
         BNH   READREC4            NO, BRANCH
         MVC   HIGHDATE,SMF30DTE   SAVE NEW HIGH DATE
         MVC   HIGHTIME,SMF30TME   SAVE NEW HIGH TIME
         B     READREC5            GET OUT
READREC4 CLC   SMF30DTE,HIGHDATE   SEE IF SAME HIGH DATE
         BL    READREC5            NO, NOT NEW HIGH DATE/TIME
         CLC   SMF30TME,HIGHTIME   SEE IF NEW HIGH TIME
         BNH   READREC5            NO, BRANCH
         MVC   HIGHTIME,SMF30TME   SAVE NEW HIGH TIME
READREC5 CLI   SMF30RTY,30         SEE IF TYPE 30 SMF RECORD
         BNE   READREC             NO, BYPASS RECORD
         TM    SWITCH+6,SELJOBL    SEE IF WANT JOBLEVEL RECORDS
         BO    READREC6            YES, GO SEE IF SUBTYPE 5 RECORD
         TM    SWITCH+6,SELINT     SEE IF WANT INTERVAL RECORDS
         BO    READREC7            YES, GO SEE IF SUBTYPE 2 OR 3 RECORD
         B     READREC8            NO, GO SEE IF SUBTYPE 4 RECORD
READREC6 CLI   SMF30STP+1,5        SEE IF SUBTYPE 5 RECORD
         BE    READREC9            YES, GO PROCESS RECORD
         B     READREC             NO, BYPASS RECORD
READREC7 CLI   SMF30STP+1,2        SEE IF SUBTYPE 2 RECORD
         BE    READREC9            YES, GO PROCESS RECORD
         CLI   SMF30STP+1,3        SEE IF SUBTYPE 3 RECORD
         BE    READREC9            YES, GO PROCESS RECORD
         B     READREC             NO, BYPASS RECORD
READREC8 CLI   SMF30STP+1,4        SEE IF SUBTYPE 4 RECORD
         BE    READREC9            YES, GO PROCESS RECORD
         B     READREC             NO, BYPASS RECORD
READREC9 ICM   R15,B'0011',SMF30ION LOAD NUMBER OF ID SECTIONS
         BZ    READREC             ZERO, BAD RECORD, BYPASS
         ICM   R15,B'0011',SMF30CON LOAD NUMBER OF PROCESSOR SECTIONS
         BZ    READREC             ZERO, CONTINUATION RECORD, BYPASS
         L     R6,SMF30IOF         LOAD OFFSET TO ID SECTION
         AR    R6,R5               GET ADDRESS OF ID SECTION
         USING SMF30ID,R6          SET ADDRESSABILITY TO ID SECTION
         MVC   INJBN,SMF30JBN      SAVE JOB NAME
         MVC   INJNM,SMF30JNM      SAVE JOB IDENTIFIER
         CLI   SMF30STD,X'19'      SEE IF CORRECT CENTURY
         BE    READRECA            YES, OK
         CLI   SMF30STD,X'20'      SEE IF CORRECT CENTURY
         BE    READRECA            YES, OK
         MVI   SMF30STD,X'19'      ASSUME 20TH CENTURY
         CLI   SMF30STD+1,X'50'    TEST SEE IF PAST YEAR 50
         BH    READRECA            YES, OK
         MVI   SMF30STD,X'20'      MAKE 21ST CENTURY
READRECA MVC   INSJDATE,SMF30STD   SAVE START JULIAN DATE
         CALL  DATERTN,(JG,INSJDATE,DATEGREG) CONVERT TO GREGORIAN
         MVC   INSGDATE,DATEGREG   SAVE START GREGORIAN DATE
         MVC   INSTIME,SMF30SIT    SAVE START TIME
         MVC   INEJDATE,SMF30DTE   SAVE END DATE
         CALL  DATERTN,(JG,INEJDATE,DATEGREG) CONVERT TO GREGORIAN
         MVC   INEGDATE,DATEGREG   SAVE END GREGORIAN DATE
         MVC   INETIME,SMF30TME    SAVE END TIME
         MVC   INSID,SMF30SID      SAVE SYSTEM IDENTIFICATION
         MVC   INPSN,SMF30PSN      SAVE PROC STEP NAME
         MVC   INSTM,SMF30STM      SAVE STEP NAME
         MVC   INPGM,SMF30PGM      SAVE PROGRAM NAME
         MVC   INRUD,SMF30RUD      SAVE SECURITY USERID
         DROP  R6                  DROP ADDRESSABILITY TO ID SECTION
         TM    SWITCH+6,SELINT     SEE IF WANT INTERVAL RECORDS
         BNO   READRECC            NO, BRANCH
         L     R6,SMF30COF         LOAD OFFSET TO PROC SECTION
         AR    R6,R5               GET ADDRESS OF PROC SECTION
         USING SMF30CAS,R6         SET ADDRESSABILITY TO PROC SECTION
         CLI   SMF30IDT,X'19'      SEE IF CORRECT CENTURY
         BE    READRECB            YES, OK
         CLI   SMF30IDT,X'20'      SEE IF CORRECT CENTURY
         BE    READRECB            YES, OK
         MVI   SMF30IDT,X'19'      ASSUME 20TH CENTURY
         CLI   SMF30IDT+1,X'50'    TEST SEE IF PAST YEAR 50
         BH    READRECB            YES, OK
         MVI   SMF30IDT,X'20'      MAKE 21ST CENTURY
READRECB MVC   INSJDATE,SMF30IDT   SAVE INTERVAL START DATE
         CALL  DATERTN,(JG,INSJDATE,DATEGREG) CONVERT TO GREGORIAN
         MVC   INSGDATE,DATEGREG   SAVE START GREGORIAN DATE
         MVC   INSTIME,SMF30IST    SAVE INTERVAL START TIME
         DROP  R6                  DROP ADDRESSABILITY TO PROC SECTION
READRECC MVC   PJDATE,INSJDATE     SAVE START DATE
         BAL   R14,WKDAY           GO GET DAY-OF-WEEK
         MVC   INSDAY,DAYOFWK      SAVE START DAY-OF-WEEK
         MVC   PJDATE,INEJDATE     SAVE END DATE
         BAL   R14,WKDAY           GO GET DAY-OF-WEEK
         MVC   INEDAY,DAYOFWK      SAVE END DAY-OF-WEEK
***********************************************************************
*                                                                     *
*        FORMAT A STEP COMPLETION CODE IN ONE OF THE FOLLOWING        *
*        FORMATS:                                                     *
*                                                                     *
*        CCCC   - STEP CONDITION CODE                                 *
*        SXXX   - SYSTEM ABEND CODE                                   *
*        UNNNN  - USER ABEND CODE                                     *
*        FLUSH  - STEP FLUSHED                                        *
*                                                                     *
***********************************************************************
CCODE    TM    SWITCH+6,SELINT     SEE IF WANT INTERVAL RECORDS
         BO    CCODE3              YES, NO COMPLETION SECTION
         ICM   R15,B'0011',SMF30TON LOAD NUMBER OF COMPL SECTIONS
         BZ    READREC             ZERO, BAD RECORD, BYPASS
         L     R6,SMF30TOF         LOAD OFFSET TO COMPL SECTION
         AR    R6,R5               GET ADDRESS OF COMPL SECTION
         USING SMF30CMP,R6         SET ADDRESSABILITY TO COMPL SECTION
         MVC   INSTPCC,=CL5'FLUSH' ASSUME STEP FLUSHED
         TM    SMF30STI,X'01'      SEE IF STEP WAS FLUSHED
         BO    SELAP               YES, GET OUT
         MVC   INSTPCC,=CL5' '     BLANK THE STEP CONDITION CODE
         TM    SMF30STI,X'02'      SEE IF STEP ABENDED
         BO    CCODE1              YES, BRANCH
         LH    R15,SMF30SCC        LOAD STEP COMPLETION CODE
         CVD   R15,DOUBLE          CONVERT CONDITION CODE TO PACKED
         MVC   WORK(6),=X'F02020202120' SET EDIT MASK
         ED    WORK(6),DOUBLE+5    EDIT CONDITION CODE
         MVC   INSTPCC(4),WORK+2   SAVE STEP CONDITION CODE
         B     SELAP               GET OUT
CCODE1   TM    SMF30SCC,X'80'      SEE IF USER ABEND
         BO    CCODE2              YES, BRANCH
         MVI   INSTPCC,C'S'        SET SYSTEM INDICATOR
         LH    R15,SMF30SCC        LOAD STEP ABEND CODE
         STH   R15,WORK            SAVE INTO WORK AREA
         UNPK  WORK+3(5),WORK(3)   ADD ZONES TO ABEND CODE FIELDS
         TR    WORK+4(3),TRTAB     TRANSLATE TO CHARACTERS
         MVC   INSTPCC+1(3),WORK+4 SAVE ABEND CODE IN HEX
         B     SELAP               GET OUT
CCODE2   MVI   INSTPCC,C'U'        SET SYSTEM INDICATOR
         SLR   R15,R15             CLEAR REG FOR ICM
         ICM   R15,B'0011',SMF30SCC LOAD USER ABEND CODE
         SLL   R15,17              TURN OFF
         SRL   R15,17                  HIGH ORDER BIT
         CVD   R15,DOUBLE          CONVERT ABEND CODE TO PACKED
         MVC   WORK(6),=X'F02020202120' SET EDIT MASK
         ED    WORK(6),DOUBLE+5    EDIT ABEND CODE
         MVC   INSTPCC+1(4),WORK+2 SAVE STEP ABEND CODE
         B     SELAP               GET OUT
         DROP  R6                  DROP ADDRESSABILITY TO COMPL SECTION
CCODE3   MVC   INSTPCC,=C'    '    SET COMPLETION CODE TO BLANKS
***********************************************************************
*                                                                     *
*        CALCULATE STEP ELAPSED TIME IN THE FORM HHHMMSS              *
*                                                                     *
***********************************************************************
SELAP    L     R6,SMF30IOF         LOAD OFFSET TO ID SECTION
         AR    R6,R5               GET ADDRESS OF ID SECTION
         USING SMF30ID,R6          SET ADDRESSABILITY TO ID SECTION
         SLR   R1,R1               ZERO ELAPSED TIME ACCUMULATOR
         CLC   INSJDATE,INEJDATE   SEE IF START AND END SAME DATE
         BE    SELAP6              YES, BRANCH
         CLC   INSJDATE(2),INEJDATE SEE IF SAME YEAR
         BE    SELAP3              YES, BRANCH
***********************************************************************
*        WE WILL ASSUME THAT THE THE DATES ARE ONLY ONE (1) YEAR      *
*        APART                                                        *
***********************************************************************
         LA    R1,365              SET TO 365 DAYS
         TM    INSJDATE+1,X'01'    SEE IF ODD START YEAR
         BO    SELAP3              YES, NOT LEAP YEAR
         TM    INSJDATE+1,X'10'    SEE IF ODD START DECADE YEAR
         BO    SELAP1              YES, BRANCH
         TM    INSJDATE+1,X'02'    SEE IF LOW DIGIT 2 OR 6
         BO    SELAP3              YES, NOT LEAP YEAR
         B     SELAP2              GO PROCESS LEAP YEAR
SELAP1   TM    INSJDATE+1,X'02'    SEE IF LOW DIGIT 2 OR 6
         BNO   SELAP3              NO, NOT LEAP YEAR
SELAP2   LA    R1,366              SET TO 366 DAYS
***********************************************************************
*        GET END DAY                                                  *
***********************************************************************
SELAP3   SLR   R15,R15             CLEAR REGISTER FOR ICM
         ICM   R15,3,INEJDATE+2    LOAD DAY PORTION OF STOP DATE
         ZAP   DOUBLE,=P'0'        ZERO DOUBLE WORK WORK AREA
         STCM  R15,15,DOUBLE+4     SAVE DAY IN DOUBLE WORD
         CVB   R2,DOUBLE           CONVERT DAY TO BINARY
         AR    R1,R2               ADD IT TO ACCUMULATOR
***********************************************************************
*        GET START DAY                                                *
***********************************************************************
         ICM   R15,3,INSJDATE+2    LOAD DAY PORTION OF START DATE
         ZAP   DOUBLE,=P'0'        ZERO DOUBLE WORK WORK AREA
         STCM  R15,15,DOUBLE+4     SAVE DAY IN DOUBLE WORD
         CVB   R2,DOUBLE           CONVERT DAY TO BINARY
         SR    R1,R2               SUBTRACT IT FROM ACCUMULATOR
         LTR   R1,R1               SEE IF NEGATIVE
         BM    SELAP4              NEGATIVE, MAKE MAX
         CH    R1,=H'30'           SEE IF MORE THAN 30 DAYS
         BNH   SELAP5              NO, BRANCH
SELAP4   LA    R1,30               SET TO 30
SELAP5   M     R0,=A(24*60*60*100) MULTIPLY BY HUNDRETHS OF SEC PER DAY
***********************************************************************
*        REG 1 NOW HAS NUMBER OF DAYS TIMES HUNDRETHS OF SECS PER DAY *
***********************************************************************
SELAP6   ICM   R15,15,INETIME     LOAD END TIME
         AR    R1,R15             ADD END TIME TO ACCUMULATOR
         ICM   R15,15,INSTIME     LOAD START TIME
         SR    R1,R15             SUBTRACT START TIME FROM ACCUMULATOR
***********************************************************************
*        REG 1 NOW HAS ELAPSED TIME IN HUNDRETHS OF SECONDS           *
***********************************************************************
         ST    R1,INELAP           SAVE ELAPSED TIME
         DROP  R6                  DROP ADDRESSABILITY TO ID SECTION
***********************************************************************
*                                                                     *
*        SAVE THE REST OF THE NEEDED FIELDS IN THE RECORD             *
*                                                                     *
***********************************************************************
SAVEREST ICM   R15,B'0011',SMF30UON LOAD NUMBER OF I/O SECTIONS
         BZ    READREC             ZERO, BAD RECORD, BYPASS
         L     R6,SMF30UOF         LOAD OFFSET TO I/O SECTION
         AR    R6,R5               GET ADDRESS OF I/O SECTION
         USING SMF30URA,R6         SET ADDRESSABILITY TO I/O SECTION
         MVC   INTEP,SMF30TEP      SAVE TOTAL EXCP COUNTS
         DROP  R6                  DROP ADDRESSABILITY TO I/O SECTION
         ICM   R15,B'0011',SMF30CON LOAD NUMBER OF PROC SECTIONS
         BZ    READREC             ZERO, BAD RECORD, BYPASS
         L     R6,SMF30COF         LOAD OFFSET TO PROC SECTION
         AR    R6,R5               GET ADDRESS OF PROC SECTION
         USING SMF30CAS,R6         SET ADDRESSABILITY TO PROC SECTION
         L     R15,SMF30CPT        STEP CPU TIME UNDER TCB
         A     R15,SMF30CPS        STEP CPU TIME UNDER SRB
         ST    R15,INTOTCPU        SAVE TOTAL CPU USED
         DROP  R6                  DROP ADDRESSABILITY TO PROC SECTION
         ICM   R15,B'0011',SMF30RON LOAD NUMBER OF STG SECTIONS
         BZ    READREC             ZERO, BAD RECORD, BYPASS
         L     R6,SMF30ROF         LOAD OFFSET TO STG SECTION
         AR    R6,R5               GET ADDRESS OF STG SECTION
         USING SMF30SAP,R6         SET ADDRESSABILITY TO STG SECTION
         LH    R15,SMF30PRV        STG FROM BOTTOM OF PVT
         AH    R15,SMF30SYS        CALCULATE TOTAL STG BELOW 16M
         ST    R15,INSTGB16        SAVE TOTAL STG USED BELOW 16M
         L     R15,SMF30EUR        USER STG ABOVE 16M
         A     R15,SMF30EAR        SYS STG ABOVE 16M
         SRA   R15,10              DIVIDE BY 1024 FOR VALUE IN K
         ST    R15,INSTGA16        SAVE TOTAL STG USED ABOVE 16M
         L     R15,SMF30PIE        LOAD UNBLK PGS IN FROM EXP
         A     R15,SMF30POE        ADD UNBLK PGS OUT TO EXP
         A     R15,SMF30BIE        ADD BLK PGS IN FROM EXP
         A     R15,SMF30BOE        ADD BLK PGS OUT TO EXP
         A     R15,SMF30HPI        ADD HIPERSPACE PGS IN FROM EXP
         A     R15,SMF30HPO        ADD HIPERSPACE PGS OUT TO EXP
         ST    R15,INEXPTOT        SAVE TOTAL EXP PAGES
         L     R15,SMF30PGI        LOAD UNBLK PGS IN FROM AUX
         A     R15,SMF30PGO        ADD UNBLK PGS OUT TO AUX
         A     R15,SMF30BIA        ADD BLK PGS IN FROM AUX
         A     R15,SMF30BOA        ADD BLK PGS OUT TO AUX
         ST    R15,INAUXTOT        SAVE TOTAL AUX PAGES
         L     R15,SMF30VPI        LOAD VIO PGS IN
         A     R15,SMF30VPO        ADD VIO PGS OUT
         ST    R15,INVIOTOT        SAVE TOTAL VIO PAGES
         DROP  R6                  DROP ADDRESSABILITY TO STG SECTION
         ICM   R15,B'0011',SMF30OON LOAD NUMBER OF OPER SECTIONS
         BZ    READREC             ZERO, BAD RECORD, BYPASS
         L     R6,SMF30OOF         LOAD OFFSET TO OPER SECTION
         AR    R6,R5               GET ADDRESS OF OPER SECTION
         USING SMF30OPS,R6         SET ADDRESSABILITY TO OPER SECTION
         MVC   INTPR,SMF30TPR      SAVE NUMBER OF NON-STRATCH TAPE MNTS
         MVC   INPTM,SMF30PTM      SAVE NUMBER OF SCRATCH TAPE MNTS
         L     R15,SMF30PTM        LOAD NUMBER OF SCRATCH TAPE MNTS
         A     R15,SMF30TPR        ADD NUMBER OF NON-SCRATCH TAPE MNTS
         ST    R15,INMNTS          SAVE TOTAL NUMBER OF MOUNTS
         XC    INCPP,INCPP         ZERO CPU PERCENT VALUE
         L     R14,INTOTCPU        LOAD CPU TIME
         LTR   R14,R14             TEST CPU TIME
         BZ    SETTYPE             ZERO, CPU PERCENT IS ZERO
         CLC   INELAP,=F'0'        TEST ELAPSED TIME
         BE    SETTYPE             ZERO, CPU PERCENT IS ZERO
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         MH    R15,=H'1000'        MULTIPLY BY 1000 FOR PERCENT X 10
         D     R14,INELAP          DIVIDE BY ELAP TIME FOR PERCENT
         AH    R15,=H'5'           ADD ROUNDING FACTOR
         SLR   R14,R14             CLEAR REG 14
         D     R14,=F'10'          MAKE PERCENT ROUNDED
         ST    R15,INCPP           SAVE CPU PERCENT
SETTYPE  MVI   INTYPE,C'T'         ASSUME TEST JOB
         CLC   INJNM(3),=C'TSU'    SEE IF TSO USER
         BE    ENDTYPE             YES, GET OUT
         CLI   INJBN+1,C'0'        SEE IF TEST BATCH JOB
         BNL   ENDTYPE             YES, GET OUT
         MVI   INTYPE,C'P'         MUST BE PRODUCTION BATCH
ENDTYPE  L     R6,SMF30POF         LOAD OFFSET TO PERFORMANCE SECTION
         AR    R6,R5               GET ADDRESS OF PERFORMANCE SECTION
         USING SMF30PRF,R6         SET ADDRESSABILITY TO PERF SECTION
         MVC   INSRV,SMF30SRV      SAVE SERVICE UNITS
ENDREC   DS    0H                  END OF BUILDING INPUT RECORD
         DROP  R6                  DROP ADDRESSABILITY TO OPER SECTION
         EJECT
***********************************************************************
*                                                                     *
*        FILTER THE RECORDS ACCORDING TO ANY INPUT CONTROL            *
*        CARDS.                                                       *
*                                                                     *
***********************************************************************
PDATE    TM    SWITCH,SELDATE      DATE SELECTION?
         BNO   PSTIME              NO, BRANCH
         BAL   R14,CKDATE          YES, GO SEE IF MATCH
PSTIME   TM    SWITCH,SELSTIME     START TIME SELECTION?
         BNO   PETIME              NO, BRANCH
         BAL   R14,CKSTIME         YES, GO SEE IF MATCH
PETIME   TM    SWITCH+6,SELETIME   STOP TIME SELECTION?
         BNO   PJOBNM              NO, BRANCH
         BAL   R14,CKETIME         YES, GO SEE IF MATCH
PJOBNM   TM    SWITCH,SELJOBNM     JOBNAME SELECTION?
         BNO   PJOBNO              NO, BRANCH
         BAL   R14,CKJOBNM         YES, GO SEE IF MATCH
PJOBNO   TM    SWITCH,SELJOBNO     JOBNO SELECTION?
         BNO   PSYSID              NO, BRANCH
         BAL   R14,CKJOBNO         YES, GO SEE IF MATCH
PSYSID   TM    SWITCH,SELSYSID     SYSID SELECTION?
         BNO   PPSTEP              NO, BRANCH
         BAL   R14,CKSYSID         YES, BRANCH
PPSTEP   TM    SWITCH+4,SELPSTEP   PROC STEP SELECTION?
         BNO   PJSTEP              NO, BRANCH
         BAL   R14,CKPSTEP         YES, BRANCH
PJSTEP   TM    SWITCH+4,SELJSTEP   JOB STEP SELECTION?
         BNO   PPGM                NO, BRANCH
         BAL   R14,CKJSTEP         YES, BRANCH
PPGM     TM    SWITCH,SELPGM       PGM SELECTION?
         BNO   PUID                NO, BRANCH
         BAL   R14,CKPGM           YES, BRANCH
PUID     TM    SWITCH+1,SELUID     UID SELECTION?
         BNO   PCC                 NO, BRANCH
         BAL   R14,CKUID           YES, BRANCH
PCC      TM    SWITCH+1,SELCC      CCODE SELECTION?
         BNO   PETGE               NO, BRANCH
         BAL   R14,CKCC            YES, BRANCH
PETGE    TM    SWITCH+1,SELETGE    ELAPSED TIME GE SELECTION?
         BNO   PETLE               NO, BRANCH
         BAL   R14,CKETGE          YES, BRANCH
PETLE    TM    SWITCH+1,SELETLE    ELAPSED TIME LE SELECTION?
         BNO   PBCGE               NO, BRANCH
         BAL   R14,CKETLE          YES, BRANCH
PBCGE    TM    SWITCH+2,SELBCGE    BLOCK COUNT GE SELECTION?
         BNO   PBCLE               NO, BRANCH
         BAL   R14,CKBCGE          YES, BRANCH
PBCLE    TM    SWITCH+2,SELBCLE    BLOCK COUNT LE SELECTION?
         BNO   PCTGE               NO, BRANCH
         BAL   R14,CKBCLE          YES, BRANCH
PCTGE    TM    SWITCH+1,SELCTGE    CPU TIME GE SELECTION?
         BNO   PCTLE               NO, BRANCH
         BAL   R14,CKCTGE          YES, BRANCH
PCTLE    TM    SWITCH+1,SELCTLE    CPU TIME LE SELECTION?
         BNO   PRBGE               NO, BRANCH
         BAL   R14,CKCTLE          YES, BRANCH
PRBGE    TM    SWITCH+2,SELRBGE    REGION BELOW GE SELECTION?
         BNO   PRBLE               NO, BRANCH
         BAL   R14,CKRBGE          YES, BRANCH
PRBLE    TM    SWITCH+2,SELRBLE    REGION BELOW LE SELECTION?
         BNO   PRAGE               NO, BRANCH
         BAL   R14,CKRBLE          YES, BRANCH
PRAGE    TM    SWITCH+2,SELRAGE    REGION ABOVE GE SELECTION?
         BNO   PRALE               NO, BRANCH
         BAL   R14,CKRAGE          YES, BRANCH
PRALE    TM    SWITCH+2,SELRALE    REGION ABOVE LE SELECTION?
         BNO   PMNTGE              NO, BRANCH
         BAL   R14,CKRALE          YES, BRANCH
PMNTGE   TM    SWITCH+1,SELMNTGE   MOUNT COUNT GE SELECTION?
         BNO   PMNTLE              NO, BRANCH
         BAL   R14,CKMNTGE         YES, BRANCH
PMNTLE   TM    SWITCH+1,SELMNTLE   MOUNT COUNT LE SELECTION?
         BNO   PCPPGE              NO, BRANCH
         BAL   R14,CKMNTLE         YES, BRANCH
PCPPGE   TM    SWITCH+2,SELCPPGE   MOUNT CPU PCT GE SELECTION?
         BNO   PCPPLE              NO, BRANCH
         BAL   R14,CKCPPGE         YES, BRANCH
PCPPLE   TM    SWITCH+2,SELCPPLE   MOUNT CPU PCT LE SELECTION?
         BNO   PTYPE               NO, BRANCH
         BAL   R14,CKCPPLE         YES, BRANCH
PTYPE    TM    SWITCH+3,SELTYPE    TYPE SELECTION?
         BNO   PPTPGE              NO, BRANCH
         BAL   R14,CKTYPE          YES, BRANCH
PPTPGE   TM    SWITCH+5,SELPTPGE   PERM TAPE GE SELECTION?
         BNO   PPTPLE              NO, BRANCH
         BAL   R14,CKPTPGE         YES, BRANCH
PPTPLE   TM    SWITCH+5,SELPTPLE   PERM TAPE LE SELECTION?
         BNO   PSTPGE              NO, BRANCH
         BAL   R14,CKPTPLE         YES, BRANCH
PSTPGE   TM    SWITCH+5,SELSTPGE   SCRATCH TAPE GE SELECTION?
         BNO   PSTPLE              NO, BRANCH
         BAL   R14,CKSTPGE         YES, BRANCH
PSTPLE   TM    SWITCH+5,SELSTPLE   SCRATCH TAPE LE SELECTION?
         BNO   PEPGGE              NO, BRANCH
         BAL   R14,CKSTPLE         YES, BRANCH
PEPGGE   TM    SWITCH+5,SELEPGGE   EXP PAGING GE SELECTION?
         BNO   PEPGLE              NO, BRANCH
         BAL   R14,CKEPGGE         YES, BRANCH
PEPGLE   TM    SWITCH+5,SELEPGLE   EXP PAGING LE SELECTION?
         BNO   PAPGGE              NO, BRANCH
         BAL   R14,CKEPGLE         YES, BRANCH
PAPGGE   TM    SWITCH+5,SELAPGGE   AUX PAGING GE SELECTION?
         BNO   PAPGLE              NO, BRANCH
         BAL   R14,CKAPGGE         YES, BRANCH
PAPGLE   TM    SWITCH+5,SELAPGLE   AUX PAGING LE SELECTION?
         BNO   PSUSGE              NO, BRANCH
         BAL   R14,CKAPGLE         YES, BRANCH
PSUSGE   TM    SWITCH+4,SELSUSGE   SERV UNITS GE SELECTION?
         BNO   PSUSLE              NO, BRANCH
         BAL   R14,CKSUSGE         YES, BRANCH
PSUSLE   TM    SWITCH+4,SELSUSLE   SERV UNITS LE SELECTION?
         BNO   PVIOGE              NO, BRANCH
         BAL   R14,CKSUSLE         YES, BRANCH
PVIOGE   TM    SWITCH+6,SELVIOGE   VIO PAGES GE SELECTION?
         BNO   PVIOLE              NO, BRANCH
         BAL   R14,CKVIOGE         YES, BRANCH
PVIOLE   TM    SWITCH+6,SELVIOLE   SERV UNITS LE SELECTION?
         BNO   PSDAY               NO, BRANCH
         BAL   R14,CKVIOLE         YES, BRANCH
PSDAY    TM    SWITCH+6,SELSDAY    START DAY-OF-WEEK SELECTION?
         BNO   PEDAY               NO, BRANCH
         BAL   R14,CKSDAY          YES, BRANCH
PEDAY    TM    SWITCH+6,SELEDAY    END DAY-OF-WEEK SELECTION?
         BNO   PMISC               NO, BRANCH
         BAL   R14,CKEDAY          YES, BRANCH
PMISC    BAL   R14,CKMISC          GO CHECK MISC OPTIONS
         B     READRET             RETURN TO CALLER
***********************************************************************
*                                                                     *
*        THESE ARE THE INDIVIDUAL FILTER ROUTINES WHICH WILL BE       *
*        CALLED IF INPUT CONTROL CARDS  REQUESTED IT.                 *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*        CHECK DATE RANGE                                             *
***********************************************************************
CKDATE   ICM   R1,B'1111',DATETBL  LOAD ADDRESS OF DATE TABLE
         BZR   R14                 ZERO, NO DATES, IGNORE THIS CHECK
CKDATE1  CLI   0(R1),X'FF'         SEE IF END OF TABLE
         BE    READREC             YES, NO MATCH, BYPASS RECORD
         CP    INSJDATE,0(4,R1)    SEE IF START DATE LT BEGIN FILTER
         BL    CKDATE2             YES, FAILED THIS CHECK
         CP    INEJDATE,4(4,R1)    SEE IF END DATE GT END FILTER
         BH    CKDATE2             YES, FAILED THIS CHECK
         BR    R14                 NO,  MATCH DATE RANGE, KEEP THIS ONE
CKDATE2  LA    R1,08(,R1)          INCREMENT TO NEXT DATE ENTRY
         B     CKDATE1             GO CHECK NEXT DATE ENTRY
         SPACE 3
***********************************************************************
*        CHECK START TIME RANGE                                       *
***********************************************************************
CKSTIME  ICM   R1,B'1111',STIMETBL LOAD ADDRESS OF TIME TABLE
         BZR   R14                 ZERO, NO TIMES, IGNORE THIS CHECK
CKSTIME1 CLI   0(R1),X'FF'         SEE IF END OF TABLE
         BE    READREC             YES, NO MATCH, BYPASS RECORD
         CLC   INSTIME,0(R1)       SEE IF TIME LESS THAN BEGIN TIME
         BL    CKSTIME2            YES, FAILED THIS CHECK
         CLC   INSTIME,4(R1)       SEE IF TIME GREATER THAN END TIME
         BH    CKSTIME2            YES, FAILED THIS CHECK
         BR    R14                 NO,  MATCH DATE RANGE, KEEP THIS ONE
CKSTIME2 LA    R1,08(,R1)          INCREMENT TO NEXT TIME ENTRY
         B     CKSTIME1            GO CHECK NEXT TIME ENTRY
         SPACE 3
***********************************************************************
*        CHECK STOP TIME RANGE                                        *
***********************************************************************
CKETIME  ICM   R1,B'1111',ETIMETBL LOAD ADDRESS OF TIME TABLE
         BZR   R14                 ZERO, NO TIMES, IGNORE THIS CHECK
CKETIME1 CLI   0(R1),X'FF'         SEE IF END OF TABLE
         BE    READREC             YES, NO MATCH, BYPASS RECORD
         CLC   INETIME,0(R1)       SEE IF TIME LESS THAN BEGIN TIME
         BL    CKSTIME2            YES, FAILED THIS CHECK
         CLC   INETIME,4(R1)       SEE IF TIME GREATER THAN END TIME
         BH    CKSTIME2            YES, FAILED THIS CHECK
         BR    R14                 NO,  MATCH DATE RANGE, KEEP THIS ONE
CKETIME2 LA    R1,08(,R1)          INCREMENT TO NEXT TIME ENTRY
         B     CKETIME1            GO CHECK NEXT TIME ENTRY
         SPACE 3
***********************************************************************
*        CHECK JOB NAME AGAINST THE JOBNAME TABLE                     *
***********************************************************************
CKJOBNM  ST    R14,RETADD          SAVE RETURN ADDRESS
         ICM   R14,B'1111',JOBNMTBL LOAD ADDRESS OF JOBNAME TABLE
         BZ    CKJOBNM2            ZERO, NO JOBNAMES, IGNORE THIS CHECK
CKJOBNM1 CLI   0(R14),X'FF'        SEE IF END OF TABLE
         BE    READREC             YES, BYPASS RECORD
         LA    R1,INJBN            LOAD ADDRESS OF JOB NAME
         SLR   R15,R15             CLEAR REG FOR IC
         IC    R15,1(R14)          LOAD OFFSET VALUE OF THIS JOBNAME
         AR    R1,R15              ADD OFFSET TO ADDRESS
         IC    R15,0(R14)          LOAD LENGTH VALUE OF THIS JOBNAME
         EX    R15,COMPJOB         COMPARE FOR MATCH
         BE    CKJOBNM2            MATCH, RETURN TO CALLER
         LA    R14,10(,R14)        INCREMENT TO NEXT JOBNAME ENTRY
         B     CKJOBNM1            GO CHECK NEXT JOBNAME ENTRY
CKJOBNM2 ICM   R14,B'1111',XJOBNTBL LOAD ADDRESS OF EXJOBNAME TABLE
         BZ    CKJOBNM4            ZERO, NO JOBNAMES, IGNORE THIS CHECK
CKJOBNM3 CLI   0(R14),X'FF'        SEE IF END OF TABLE
         BE    CKJOBNM4            YES, DO NOT EXCLUDE THIS RECORD
         LA    R1,INJBN            LOAD ADDRESS OF JOB NAME
         SLR   R15,R15             CLEAR REG FOR IC
         IC    R15,1(R14)          LOAD OFFSET VALUE OF THIS JOBNAME
         AR    R1,R15              ADD OFFSET TO ADDRESS
         IC    R15,0(R14)          LOAD LENGTH VALUE OF THIS JOBNAME
         EX    R15,COMPJOB         COMPARE FOR MATCH
         BE    READREC             MATCH, BYPASS RECORD
         LA    R14,10(,R14)        INCREMENT TO NEXT JOBNAME ENTRY
         B     CKJOBNM3            GO CHECK NEXT JOBNAME ENTRY
CKJOBNM4 L     R14,RETADD          RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
COMPJOB  CLC   0(0,R1),2(R14)      *****  EXEC ONLY *****
         SPACE 3
***********************************************************************
*        CHECK JOB NUMBER                                             *
***********************************************************************
CKJOBNO  ICM   R1,B'1111',JOBNOTBL LOAD ADDRESS OF JOBNO TABLE
         BZ    CKJOBNO2            ZERO, NO JOB NBRS, IGNORE THIS CHECK
CKJOBNO1 CLI   0(R1),X'FF'         SEE IF END OF TABLE
         BE    READREC             YES, BYPASS RECORD
         CLC   INJNM,0(R1)         SEE IF MATCH ON JOBNO
         BE    CKJOBNO2            MATCH, SELECT THIS RECORD FOR NOW
         LA    R1,08(,R1)          INCREMENT TO NEXT JOBNO ENTRY
         B     CKJOBNO1            GO CHECK NEXT JOBNO ENTRY
CKJOBNO2 ICM   R1,B'1111',XJBNOTBL LOAD ADDRESS OF EXJOBNO TABLE
         BZR   R14                 ZERO, NO JOB NBRS, IGNORE THIS CHECK
CKJOBNO3 CLI   0(R1),X'FF'         SEE IF END OF TABLE
         BER   R14                 YES, DO NOT EXCLUDE THIS RECORD
         CLC   INJNM,0(R1)         SEE IF MATCH ON JOBNO
         BE    READREC             MATCH, BYPASS RECORD
         LA    R1,08(,R1)          INCREMENT TO NEXT JOBNO ENTRY
         B     CKJOBNO3            GO CHECK NEXT JOBNO ENTRY
         SPACE 3
***********************************************************************
*        CHECK SMF SYSTEM NAME                                        *
***********************************************************************
CKSYSID  ICM   R15,B'1111',SYSIDTBL LOAD ADDRESS OF SYSID TABLE
         BZ    CKSYSID2            ZERO, NO SYSIDS, IGNORE THIS CHECK
CKSYSID1 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    READREC             YES, BYPASS RECORD
         CLC   INSID,0(R15)        SEE IF MATCH ON SYSTEM ID
         BE    CKSYSID2            MATCH, SELECT THIS RECORD FOR NOW
         LA    R15,04(,R15)        INCREMENT TO NEXT SYSID ENTRY
         B     CKSYSID1            GO CHECK NEXT SYSID ENTRY
CKSYSID2 ICM   R15,B'1111',XSYSTBL  LOAD ADDRESS OF EXSYSID TABLE
         BZR   R14                 ZERO, NO SYSIDS, IGNORE THIS CHECK
CKSYSID3 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BER   R14                 YES, DO NOT EXCLUDE THIS RECORD
         CLC   INSID,0(R15)        SEE IF MATCH ON SYSTEM ID
         BE    READREC             MATCH, BYPASS RECORD
         LA    R15,04(,R15)        INCREMENT TO NEXT SYSID ENTRY
         B     CKSYSID3            GO CHECK NEXT SYSID ENTRY
         SPACE 3
***********************************************************************
*        CHECK PROC STEP NAME                                         *
***********************************************************************
CKPSTEP  ICM   R1,B'1111',PSTEPTBL LOAD ADDRESS OF PROC STEP TABLE
         BZ    CKPSTEP2            ZERO, NO PSTEPS, IGNORE THIS CHECK
CKPSTEP1 CLI   0(R1),X'FF'         END OF TABLE
         BE    READREC             YES, NO MATCH, BYPASS RECORD
         LH    R15,0(R1)           LOAD MACHINE LENGTH OF PSTEP NAME
         EX    R15,COMPPSTP        COMPARE FOR MATCH
         BE    CKPSTEP2            MATCH, SELECT THIS RECORD FOR NOW
         LA    R1,10(,R1)          INCREMENT TO NEXT ENTRY
         B     CKPSTEP1            LOOP
CKPSTEP2 ICM   R1,B'1111',XPSTPTBL LOAD ADDRESS OF EXPSTEP TABLE
         BZR   R14                 ZERO, NO PSTEPS, IGNORE THIS CHECK
CKPSTEP3 CLI   0(R1),X'FF'         END OF TABLE
         BER   R14                 YES, DO NOT EXCLUDE THIS RECORD
         LH    R15,0(R1)           LOAD MACHINE LENGTH OF PSTEP NAME
         EX    R15,COMPPSTP        COMPARE FOR MATCH
         BE    READREC             MATCH, BYPASS RECORD
         LA    R1,10(,R1)          INCREMENT TO NEXT ENTRY
         B     CKPSTEP3            LOOP
COMPPSTP CLC   INPSN(0),2(R1)      **** EXECUTE ONLY ****
         SPACE 3
***********************************************************************
*        CHECK JOB STEP NAME                                          *
***********************************************************************
CKJSTEP  ICM   R1,B'1111',JSTEPTBL LOAD ADDRESS OF JOB STEP TABLE
         BZ    CKJSTEP2            ZERO, NO PGMS, IGNORE THIS CHECK
CKJSTEP1 CLI   0(R1),X'FF'         END OF TABLE
         BE    READREC             YES, NO MATCH, BYPASS RECORD
         LH    R15,0(R1)           LOAD MACHINE LENGTH OF JSTEP NAME
         EX    R15,COMPJSTP        COMPARE FOR MATCH
         BE    CKJSTEP2            MATCH, SELECT THIS RECORD FOR NOW
         LA    R1,10(,R1)          INCREMENT TO NEXT ENTRY
         B     CKJSTEP1            LOOP
CKJSTEP2 ICM   R1,B'1111',XJSTPTBL LOAD ADDRESS OF EXJSTEP TABLE
         BZR   R14                 ZERO, NO PGMS, IGNORE THIS CHECK
CKJSTEP3 CLI   0(R1),X'FF'         END OF TABLE
         BER   R14                 YES, DO NOT EXCLUDE THIS RECORD
         LH    R15,0(R1)           LOAD MACHINE LENGTH OF JSTEP NAME
         EX    R15,COMPJSTP        COMPARE FOR MATCH
         BE    READREC             MATCH, BYPASS RECORD
         LA    R1,10(,R1)          INCREMENT TO NEXT ENTRY
         B     CKJSTEP3            LOOP
COMPJSTP CLC   INSTM(0),2(R1)      **** EXECUTE ONLY ****
         SPACE 3
***********************************************************************
*        CHECK PROGRAM NAME                                           *
***********************************************************************
CKPGM    ICM   R1,B'1111',PGMTBL   LOAD ADDRESS OF PGM NAME TABLE
         BZ    CKPGM2              ZERO, NO PGMS, IGNORE THIS CHECK
CKPGM1   CLI   0(R1),X'FF'         END OF TABLE
         BE    READREC             YES, NO MATCH, BYPASS RECORD
         LH    R15,0(R1)           LOAD MACHINE LENGTH OF PGM NAME
         EX    R15,COMPPGM         COMPARE FOR MATCH
         BE    CKPGM2              MATCH, SELECT THIS RECORD FOR NOW
         LA    R1,10(,R1)          INCREMENT TO NEXT ENTRY
         B     CKPGM1              LOOP
CKPGM2   ICM   R1,B'1111',XPGMTBL  LOAD ADDRESS OF EXPGM NAME TABLE
         BZR   R14                 ZERO, NO PGMS, IGNORE THIS CHECK
CKPGM3   CLI   0(R1),X'FF'         END OF TABLE
         BER   R14                 YES, DO NOT EXCLUDE THIS RECORD
         LH    R15,0(R1)           LOAD MACHINE LENGTH OF PGM NAME
         EX    R15,COMPPGM         COMPARE FOR MATCH
         BE    READREC             MATCH, BYPASS RECORD
         LA    R1,10(,R1)          INCREMENT TO NEXT ENTRY
         B     CKPGM3              LOOP
COMPPGM  CLC   INPGM(0),2(R1)      **** EXECUTE ONLY ****
         SPACE 3
***********************************************************************
*        CHECK SECURITY USERID                                        *
***********************************************************************
CKUID    ICM   R1,B'1111',UIDTBL   LOAD ADDRESS OF UID NAME TABLE
         BZ    CKUID2              ZERO, NO UIDS, IGNORE THIS CHECK
CKUID1   CLI   0(R1),X'FF'         END OF TABLE
         BE    READREC             YES, NO MATCH, BYPASS RECORD
         LH    R15,0(R1)           LOAD MACHINE LENGTH OF UID NAME
         EX    R15,COMPUID         COMPARE FOR MATCH
         BE    CKUID2              MATCH, SELECT THIS RECORD FOR NOW
         LA    R1,10(,R1)          INCREMENT TO NEXT ENTRY
         B     CKUID1              LOOP
CKUID2   ICM   R1,B'1111',XUIDTBL  LOAD ADDRESS OF EXUID NAME TABLE
         BZR   R14                 ZERO, NO UIDS, IGNORE THIS CHECK
CKUID3   CLI   0(R1),X'FF'         END OF TABLE
         BER   R14                 YES, DO NOT EXCLUDE THIS RECORD
         LH    R15,0(R1)           LOAD MACHINE LENGTH OF UID NAME
         EX    R15,COMPUID         COMPARE FOR MATCH
         BE    READREC             MATCH, BYPASS RECORD
         LA    R1,10(,R1)          INCREMENT TO NEXT ENTRY
         B     CKUID3              LOOP
COMPUID  CLC   INRUD(0),2(R1)      **** EXECUTE ONLY ****
         SPACE 3
***********************************************************************
*        CHECK STEP CONDITION CODE                                    *
***********************************************************************
CKCC     ICM   R1,B'1111',CCTBL    LOAD ADDRESS OF CCODE TABLE
         BZ    CKCC2               ZERO, NO CCODES, IGNORE THIS CHECK
CKCC1    CLI   0(R1),X'FF'         END OF TABLE
         BE    READREC             YES, NO MATCH, BYPASS RECORD
         LH    R15,0(R1)           LOAD MACHINE LENGTH OF CCODE
         EX    R15,COMPCC          COMPARE FOR MATCH
         BE    CKCC2               MATCH, SELECT THIS RECORD FOR NOW
         LA    R1,07(,R1)          INCREMENT TO NEXT ENTRY
         B     CKCC1               LOOP
CKCC2    ICM   R1,B'1111',XCCTBL   LOAD ADDRESS OF EXCCODE TABLE
         BZR   R14                 ZERO, NO CCODES, IGNORE THIS CHECK
CKCC3    CLI   0(R1),X'FF'         END OF TABLE
         BER   R14                 YES, DO NOT BYPASS THIS RECORD
         LH    R15,0(R1)           LOAD MACHINE LENGTH OF CCODE
         EX    R15,COMPCC          COMPARE FOR MATCH
         BE    READREC             MATCH, BYPASS RECORD
         LA    R1,07(,R1)          INCREMENT TO NEXT ENTRY
         B     CKCC3               LOOP
COMPCC   CLC   INSTPCC(0),2(R1)    **** EXECUTE ONLY ****
         SPACE 3
***********************************************************************
*        CHECK ELAPSED TIME GE                                        *
***********************************************************************
CKETGE   CLC   INELAP,VALETGE      SEE IF ELAP TIME GE PARM VALUE
         BL    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK ELAPSED TIME LE                                        *
***********************************************************************
CKETLE   CLC   INELAP,VALETLE      SEE IF ELAP TIME LE PARM VALUE
         BH    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK BLOCK COUNT GE                                         *
***********************************************************************
CKBCGE   CLC   INTEP,VALBCGE       SEE IF ELAP TIME GE PARM VALUE
         BL    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK BLOCK COUNT LE                                         *
***********************************************************************
CKBCLE   CLC   INTEP,VALBCLE       SEE IF ELAP TIME LE PARM VALUE
         BH    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK CPU TIME GE                                            *
***********************************************************************
CKCTGE   CLC   INTOTCPU,VALCTGE    SEE IF CPU TIME GE PARM VALUE
         BL    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK CPU TIME LE                                            *
***********************************************************************
CKCTLE   CLC   INTOTCPU,VALCTLE    SEE IF CPU TIME LE PARM VALUE
         BH    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK REGION SIZE BELOW 16M GE                               *
***********************************************************************
CKRBGE   L     R15,INSTGB16        LOAD REGION BELOW VALUE IN "K"
         SRA   R15,10              DIVIDE BY 1024 FOR MEG VALUE
         C     R15,VALRBGE         SEE IF REGION BELOW GE PARM VALUE
         BL    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK REGION SIZE BELOW 16M LE                               *
***********************************************************************
CKRBLE   L     R15,INSTGB16        LOAD REGION BELOW VALUE
         A     R15,=F'1023'        ELIMINATE PARTIAL MEG
         SRA   R15,10              DIVIDE BY 1024 FOR MEG VALUE
         C     R15,VALRBLE         SEE IF REGION BELOW LE PARM VALUE
         BH    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK REGION SIZE ABOVE 16M GE                               *
***********************************************************************
CKRAGE   L     R15,INSTGA16        LOAD REGION ABOVE VALUE
         SRA   R15,10              DIVIDE BY 1024 FOR MEG VALUE
         C     R15,VALRAGE         SEE IF REGION ABOVE GE PARM VALUE
         BL    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK REGION SIZE ABOVE 16M LE                               *
***********************************************************************
CKRALE   L     R15,INSTGA16        LOAD REGION ABOVE VALUE
         A     R15,=F'1023'        ELIMINATE PARTIAL MEG
         SRA   R15,10              DIVIDE BY 1024 FOR MEG VALUE
         C     R15,VALRALE         SEE IF REGION ABOVE LE PARM VALUE
         BH    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK TAPE MOUNTS GE                                         *
***********************************************************************
CKMNTGE  CLC   INMNTS,VALMNTGE     SEE IF MOUNTS GE PARM VALUE
         BL    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK TAPE MOUNTS LE                                         *
***********************************************************************
CKMNTLE  CLC   INMNTS,VALMNTLE     SEE IF MOUNTS LE PARM VALUE
         BH    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK CPU PERCENT GE                                         *
***********************************************************************
CKCPPGE  CLC   INCPP,VALCPPGE      SEE IF CPU PCT GE PARM VALUE
         BL    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK CPU PERCENT LE                                         *
***********************************************************************
CKCPPLE  CLC   INCPP,VALCPPLE      SEE IF CPU PCT LE PARM VALUE
         BH    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK JOB TYPE                                               *
***********************************************************************
CKTYPE   CLC   INTYPE,VALTYPE      SEE IF TYPE MATCHES
         BNE   READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK PERM TAPE MOUNTS GE                                    *
***********************************************************************
CKPTPGE  CLC   INTPR,VALPTPGE      SEE IF PERM TAPES GE PARM VALUE
         BL    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK PERM TAPE MOUNTS LE                                    *
***********************************************************************
CKPTPLE  CLC   INTPR,VALPTPLE      SEE IF PERM TAPES LE PARM VALUE
         BH    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK SCRATCH TAPE MOUNTS GE                                 *
***********************************************************************
CKSTPGE  CLC   INPTM,VALSTPGE      SEE IF SCRATCH TAPES GE PARM VALUE
         BL    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK SCRATCH TAPE MOUNTS LE                                 *
***********************************************************************
CKSTPLE  CLC   INPTM,VALSTPLE      SEE IF SCRATCH TAPES LE PARM VALUE
         BH    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK EXPANDED PAGING GE                                     *
***********************************************************************
CKEPGGE  CLC   INEXPTOT,VALEPGGE   SEE IF EXP PAGING GE PARM VALUE
         BL    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK EXPANDED PAGING LE                                     *
***********************************************************************
CKEPGLE  CLC   INEXPTOT,VALEPGLE   SEE IF EXP PAGING LE PARM VALUE
         BH    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK AUXILLARY PAGING GE                                    *
***********************************************************************
CKAPGGE  CLC   INAUXTOT,VALAPGGE   SEE IF AUX PAGING GE PARM VALUE
         BL    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK AUXILLARY PAGING LE                                    *
***********************************************************************
CKAPGLE  CLC   INAUXTOT,VALAPGLE   SEE IF AUX PAGING LE PARM VALUE
         BH    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK SERVICE UNITS GE                                       *
***********************************************************************
CKSUSGE  L     R15,INSRV           LOAD SERVICE UNITS
         SRA   R15,10              DIVIDE BY 1024 FOR K VALUE
         C     R15,VALSUSGE        SEE IF SERV UNITS GE PARM VALUE
         BL    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK SERVICE UNITS LE                                       *
***********************************************************************
CKSUSLE  L     R15,INSRV           LOAD SERVICE UNITS
         A     R15,=F'1023'        ELIMINATE PARTIAL K
         SRA   R15,10              DIVIDE BY 1024 FOR K VALUE
         C     R15,VALSUSLE        SEE IF SERV UNITS LE PARM VALUE
         BH    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK VIO PAGES GE                                           *
***********************************************************************
CKVIOGE  CLC   INVIOTOT,VALVIOGE   SEE IF VIO PAGING GE PARM VALUE
         BH    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK VIO PAGES LE                                           *
***********************************************************************
CKVIOLE  CLC   INVIOTOT,VALVIOLE   SEE IF VIO PAGING LE PARM VALUE
         BH    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK START DAY-OF-THE-WEEK                                  *
***********************************************************************
CKSDAY   LH    R1,INSDAY           LOAD START DAY-OF-WEEK
         BCTR  R1,0                MAKE RELATIVE TO ZERO
         SLL   R1,2                MULTIPLY BY 4
         B     CKSDAY0(R1)         BRANCH TO PROPER ROUTINE FOR DAY
CKSDAY0  B     CKSDAY1             INDEX = 00
         B     CKSDAY2             INDEX = 01
         B     CKSDAY3             INDEX = 02
         B     CKSDAY4             INDEX = 03
         B     CKSDAY5             INDEX = 04
         B     CKSDAY6             INDEX = 05
         B     CKSDAY7             INDEX = 06
CKSDAY1  TM    SDAYSW,SUN          SEE IF SUNDAY DESIRED
         BNO   READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKSDAY2  TM    SDAYSW,MON          SEE IF MONDAY DESIRED
         BNO   READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKSDAY3  TM    SDAYSW,TUE          SEE IF TUESDAY DESIRED
         BNO   READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKSDAY4  TM    SDAYSW,WED          SEE IF WEDNESDAY DESIRED
         BNO   READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKSDAY5  TM    SDAYSW,THU          SEE IF THURSDAY DESIRED
         BNO   READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKSDAY6  TM    SDAYSW,FRI          SEE IF FRIDAY DESIRED
         BNO   READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKSDAY7  TM    SDAYSW,SAT          SEE IF SATURDAY DESIRED
         BNO   READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK END DAY-OF-THE-WEEK                                    *
***********************************************************************
CKEDAY   LH    R1,INEDAY           LOAD START DAY-OF-WEEK
         BCTR  R1,0                MAKE RELATIVE TO ZERO
         SLL   R1,2                MULTIPLY BY 4
         B     CKEDAY0(R1)         BRANCH TO PROPER ROUTINE FOR DAY
CKEDAY0  B     CKEDAY1             INDEX = 00
         B     CKEDAY2             INDEX = 01
         B     CKEDAY3             INDEX = 02
         B     CKEDAY4             INDEX = 03
         B     CKEDAY5             INDEX = 04
         B     CKEDAY6             INDEX = 05
         B     CKEDAY7             INDEX = 06
CKEDAY1  TM    EDAYSW,SUN          SEE IF SUNDAY DESIRED
         BNO   READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKEDAY2  TM    EDAYSW,MON          SEE IF MONDAY DESIRED
         BNO   READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKEDAY3  TM    EDAYSW,TUE          SEE IF TUEEDAY DESIRED
         BNO   READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKEDAY4  TM    EDAYSW,WED          SEE IF WEDNESDAY DESIRED
         BNO   READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKEDAY5  TM    EDAYSW,THU          SEE IF THURSDAY DESIRED
         BNO   READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKEDAY6  TM    EDAYSW,FRI          SEE IF FRIDAY DESIRED
         BNO   READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKEDAY7  TM    EDAYSW,SAT          SEE IF SATURDAY DESIRED
         BNO   READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK MISCELLANEOUS SWITCHES                                 *
***********************************************************************
CKMISC   TM    SWITCH+3,SELNOFLU   SEE IF NOFLUSH SPECIFIED
         BNO   CKMISC1             NO, BRANCH
         CLC   INSTPCC(5),=C'FLUSH' SEE IF FLUSHED
         BE    READREC             YES, BYPASS RECORD
CKMISC1  TM    SWITCH+3,SELNOABN   SEE IF NOABEND SPECIFIED
         BNO   CKMISC2             NO, BRANCH
         CLI   INSTPCC,C'S'        SEE IF SYSTEM ABEND
         BE    READREC             YES, BYPASS RECORD
         CLI   INSTPCC,C'U'        SEE IF USER ABEND
         BE    READREC             YES, BYPASS RECORD
CKMISC2  TM    SWITCH+3,SELNOTST   SEE IF NOTEST SPECIFIED
         BNO   CKMISC3             NO, BRANCH
         CLI   INTYPE,C'T'         SEE IF TEST
         BE    READREC             YES, BYPASS RECORD
CKMISC3  TM    SWITCH+3,SELNOPRD   SEE IF NOPROD SPECIFIED
         BNO   CKMISC4             NO, BRANCH
         CLI   INTYPE,C'P'         SEE IF PRODUCTION
         BE    READREC             YES, BYPASS RECORD
CKMISC4  TM    SWITCH+3,SELNOSTC   SEE IF NOSTC SPECIFIED
         BNO   CKMISC5             NO, BRANCH
         CLC   INJNM(3),=C'JOB'    SEE IF BATCH JOB
         BE    CKMISC5             YES, OK
         CLC   INJNM(3),=C'TSU'    SEE IF TSO USER
         BNE   READREC             NO, MUST BE STC
CKMISC5  TM    SWITCH+3,SELNOTSU   SEE IF NOTSU SPECIFIED
         BNO   CKMISC6             NO, BRANCH
         CLC   INJNM(3),=C'TSU'    SEE IF TSO USER
         BE    READREC             YES, BYPASS RECORD
CKMISC6  BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        END OF INPUT FILE                                            *
***********************************************************************
EOF      OI    SWITCH,ENDFILE      TURN ON END-OF-FILE INDICATOR
         SPACE 3
***********************************************************************
*        RETURN TO CALLER                                             *
***********************************************************************
READRET  L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         ST    R5,40(R13)          SAVE REGISTER 5 INTO SAVE AREA
         LM    R14,R12,12(R13)     RESTORE ORIGINAL REGS
         BR    R14                 RETURN TO SORT FOR LAST TIME
TRTAB    EQU   *-240
         DC    C'0123456789ABCDEF'
         EJECT
***********************************************************************
*                                                                     *
*                              WKDAY                                  *
*                                                                     *
*        DETERMINE THE DAY-OF-WEEK INDEX BASED UPON AN INPUT          *
*        PACKED DECIMAL JULIAN DATE IN THE FORM 0CYYDDDS.             *
*                                                                     *
*        THE DATE WILL FIRST BE CONVERTED TO MONTH, DAY, AND          *
*        YEAR.  THIS WILL THEN BE CONVERTED TO A DAY-OF-WEEK          *
*        INDEX FROM 1 - 7 INDICATING SUN - SAT USING A COMPLEX        *
*        EQUATION.                                                    *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*                                                                     *
*        CONVERT JULIAN DATE TO MONTH, DAY, AND YEAR                  *
*                                                                     *
*        THE INPUT JULIAN DATE IS IN FIELD PJDATE                     *
*        THE OUTPUT DATES WILL BE MMB, DDB, AND YYYYB.                *
*                                                                     *
***********************************************************************
WKDAY    ST    R14,WKDAYRET        SAVE RETURN ADDRESS
         TM    PJDATE+1,X'01'      SEE IF ODD YEAR
         BO    WKDAY1              YES, NOT LEAP YEAR
         TM    PJDATE+1,X'12'      MAGIC LEAP YEAR MASK
         BM    WKDAY1              MIXED, NOT LEAP YEAR
         MVC   MDAYTBL+2(2),=H'29' SET FEB TO 29 DAYS
WKDAY1   LA    R2,12               SET LOOP COUNTER
         LA    R3,1                SET MONTH COUNTER
         ZAP   DBL,PJDATE+2(2)     MOVE JULIAN DAY TO WORK
         CVB   R1,DBL              CONVERT DAY TO BINARY
         LA    R15,MDAYTBL         LOAD ADDR OF DAY OF THE MONTH TABLE
WKDAY2   CH    R1,0(R15)           SEE IF DAYS GT DAYS IN THIS MONTH
         BNH   WKDAY3              NO, DONE
         SH    R1,0(R15)           SUBTRACT DAYS IN THIS MONTH FROM TOT
         LA    R3,1(,R3)           ADD 1 TO MONTH COUNTER
         LA    R15,2(,R15)         INCREMENT TO NEXT ENTRY IN DAY TABLE
         BCT   R2,WKDAY2           LOOP
WKDAY3   STH   R3,MMB              SAVE MONTH
         STH   R1,DDB              SAVE DAY
         CLI   PJDATE,X'19'        SEE IF 20TH CENTURY
         BE    WKDAY5              YES, GET OUT
         CLI   PJDATE,X'20'        SEE IF 21ST CENTURY
         BE    WKDAY5              YES, GET OUT
         MVI   PJDATE,X'19'        ASSUME 20TH CENTURY
         CLI   PJDATE+1,X'50'      TEST SEE IF PAST YEAR 50
         BH    WKDAY5              YES, OK
WKDAY4   MVI   PJDATE,X'20'        NO,  SET YEAR TO 20
WKDAY5   MVO   DBL,PJDATE(2)       MOVE YEAR TO WORK
         CVB   R1,DBL              CONVERT YEARS TO BINARY
         STH   R1,YYYYB            SAVE YEAR
         EJECT
***********************************************************************
*                                                                     *
*        CALCULATE THE DAY-OF-WEEK INDEX                              *
*                                                                     *
*        THE INPUT FIELDS ARE MMB, DDB, AND YYYYB                     *
*        THE OUTPUT DAY OF THE WEEK WILL BE DAYOFWK                   *
*                                                                     *
*        N = D + 2M + 3(M+1)/5 + Y + Y/4 - Y/100 + Y/400 + 2          *
*                                                                     *
*        WHERE M = 3-14 (JAN AND FEB ARE 13 AND 14 OF Y-1)            *
*                                                                     *
*        N/7 LEAVES REMAINDER 0-6, 0 INDICATING SATURDAY              *
*                                                                     *
*        IF REMAINDER 0 - CHANGE TO 7 FOR ACCURATE DAY INDEX          *
*                                                                     *
***********************************************************************
WKDAY6   LH    R1,DDB              SET N = D
         SPACE
         LH    R15,YYYYB           GET Y
         LH    R14,MMB             GET M
         CH    R14,=H'2'           SEE IF JAN OR FEB
         BH    WKDAY9              NO, BRANCH
         BE    WKDAY7              GO PROCESS FEB
         LA    R14,13              SET M = 13 FOR JAN
         B     WKDAY8              GO REDEFINE Y
WKDAY7   LA    R14,14              SET M = 14 FOR FEB
WKDAY8   BCTR  R15,0               SET Y = Y-1
WKDAY9   LR    R0,R14              COPY M
         ALR   R0,R0               GET 2M
         ALR   R1,R0               SET N= N + 2M
         SPACE
         LR    R0,R15              SAVE REDEFINED Y
         LA    R14,1(,R14)         GET M+1
         MH    R14,=H'3'           GET 3(M+1)
         SRDL  R14,32              SHIFT TO ODD REG OF PAIR
         D     R14,=F'5'           GET 3(M+1)/5 IN R15
         ALR   R1,R15              SET N = N + 3(M+1)/5
         SPACE
         LR    R15,R0              GET Y
         ALR   R1,R15              SET N = N + Y
         SPACE
         SLR   R14,R14             ZERO EVEN REG OF PAIR
         D     R14,=F'4'           GET Y/4
         ALR   R1,R15              SET N = N + Y/4
         SPACE
         LR    R15,R0              GET Y
         SLR   R14,R14             ZERO EVEN REG OF PAIR
         D     R14,=F'100'         GET Y/100
         SLR   R1,R15              SET N = N - Y/100
         SPACE
         LR    R15,R0              GET Y
         SLR   R14,R14             ZERO EVEN REG OF PAIR
         D     R14,=F'400'         GET Y/400
         ALR   R1,R15              SET N = N + Y/400
         SPACE
         LA    R15,2               GET 2
         ALR   R1,R15              SET N = N + 2
         SPACE
         SLR   R0,R0               ZERO EVEN REG OF PAIR
         D     R0,=F'7'            SET N = N/7
         SPACE
         LTR   R1,R0               TEST REMAINDER
         BNZ   WKDAY10             NOT ZERO, CONTINUE
         LA    R1,7                ZERO, SET TO 7
         EJECT
WKDAY10  STH   R1,DAYOFWK          SAVE DAY-OF-WEEK
***********************************************************************
*        RETURN TO CALLER                                             *
***********************************************************************
         L     R14,WKDAYRET        RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        DAY-PER-MONTH TABLE FOR JULIAN DATE CONVERT ROUTINE          *
***********************************************************************
MDAYTBL  DS    0H
         DC    H'31'
         DC    H'28'
         DC    H'31'
         DC    H'30'
         DC    H'31'
         DC    H'30'
         DC    H'31'
         DC    H'31'
         DC    H'30'
         DC    H'31'
         DC    H'30'
         DC    H'31'
         SPACE 3
         DROP  R5                  DROP ADDRESSABILITY TO SMF RECORD
         DROP  R9,R10,R11,R12
         POP   USING
         EJECT
         PUSH  USING
***********************************************************************
*                                                                     *
*        THIS ROUTINE WILL FORMAT THE OUTPUT PRINT RECORD FROM THE    *
*        SMF TYPE 6 RECORD POINTED TO BY REGISTER 5                   *
*                                                                     *
*        1)  REGISTER 15 ON ENTRY IS THE ROUTINE ENTRY POINT          *
*        2)  REGISTER 14 ON ENTRY IS THE RETURN ADDRESS               *
*                                                                     *
*        RETURN FROM THIS ROUTINE WILL BE MADE TO REGISTER 14         *
*                                                                     *
***********************************************************************
FORMAT   STM   R14,R12,12(R13)     SAVE REGISTERS
         USING FORMAT,R9,R10,R11,R12 SET ADDRESSABILITY TO ROUTINE
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,SAVE2           LOAD ADDR OF NEW SAVE
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
********************************************************************
*        SET OUTPUT JOB NAME                                       *
********************************************************************
         MVC   OJOBNAME,INJBN      MOVE SMF JOBNAME TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT JOB NUMBER                                     *
********************************************************************
         MVC   OJOBNO,INJNM        MOVE SMF JOB NO TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT START JULIAN DATE                              *
********************************************************************
         MVC   WORK(9),=X'40212020204B202020' SET EDIT MASK
         ED    WORK(9),INSJDATE    EDIT THE DATE
         MVC   OJSDATE,WORK+1      MOVE THE DATE TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT END JULIAN DATE                                *
********************************************************************
         MVC   WORK(9),=X'40212020204B202020' SET EDIT MASK
         ED    WORK(9),INEJDATE    EDIT THE DATE
         MVC   OJEDATE,WORK+1      MOVE THE DATE TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT START GREGORIAN DATE                           *
********************************************************************
         MVC   WORK(12),=X'402120202020612020612020' SET EDIT MASK
         ED    WORK(12),INSGDATE   EDIT THE DATE
         MVC   OGSDATE,WORK+2      MOVE THE DATE TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT END GREGORIAN DATE                             *
********************************************************************
         MVC   WORK(12),=X'402120202020612020612020' SET EDIT MASK
         ED    WORK(12),INEGDATE   EDIT THE DATE
         MVC   OGEDATE,WORK+2      MOVE THE DATE TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT START TIME                                     *
********************************************************************
         ICM   R1,15,INSTIME       LOAD TIME TO REGISTER 1
         L     R15,=V(CNVTIME)     LOAD ADDRESS OF CONVERT TIME ROUTINE
         BALR  R14,R15             GO TO CONVERT TIME ROUTINE
         MVC   OSTIME,OUTTIME+1    MOVE TIME (HH:MM) TO DETAIL LINE
         SPACE 3
********************************************************************
*        SET OUTPUT END TIME                                       *
********************************************************************
         ICM   R1,15,INETIME       LOAD TIME TO REGISTER 1
         L     R15,=V(CNVTIME)     LOAD ADDRESS OF CONVERT TIME ROUTINE
         BALR  R14,R15             GO TO CONVERT TIME ROUTINE
         MVC   OETIME,OUTTIME+1    MOVE TIME (HH:MM) TO DETAIL LINE
         SPACE 3
********************************************************************
*        SET OUTPUT SYSTEM ID                                      *
********************************************************************
         MVC   OSYSID,INSID        MOVE SMF SYSTEM ID TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT PROC STEP NAME                                 *
********************************************************************
         MVC   OPSTEP,INPSN        MOVE PROC STEP NAME TO DETAIL LN
         SPACE 3
********************************************************************
*        SET OUTPUT JOB STEP NAME                                  *
********************************************************************
         MVC   OJSTEP,INSTM        MOVE JOB STEP NAME TO DETAIL LN
         SPACE 3
********************************************************************
*        SET OUTPUT PROGRAM NAME                                   *
********************************************************************
         MVC   OPGMNM,INPGM        MOVE PGM NAME TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT SECURITY USERID                                *
********************************************************************
         MVC   OUSERID,INRUD       MOVE USERID TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT STEP CONDITION CODE                            *
********************************************************************
         MVC   OCCODE,INSTPCC      MOVE STEP COND CODE TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT ELAPSED TIME                                   *
********************************************************************
         L     R1,INELAP           LOAD ELAPSED TIME (SEC/100)
         AH    R1,=H'50'           ADD ROUNDING FACTOR
         LR    R14,R1              LOAD ELAP TIME (HUNDRETHS OF SECS)
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         D     R14,=F'360000'      DIVIDE TO FIND HOURS
         CVD   R15,DOUBLE          CONVERT HOURS TO PACKED
         UNPK  WORK(3),DOUBLE+6(2) UNPACK HOURS
         OI    WORK+2,X'F0'        MAKE PRINTABLE
         MVC   OELAPTM(3),WORK     MOVE HHH
         SRDA  R14,32              SHIFT REMAIN TO ODD REG OF PAIR
         D     R14,=F'6000'        DIVIDE TO FIND MINUTES
         CVD   R15,DOUBLE          CONVERT MINUTES TO PACKED
         UNPK  WORK(3),DOUBLE+6(2) UNPACK MINUTES
         OI    WORK+2,X'F0'        MAKE PRINTABLE
         MVC   OELAPTM+4(2),WORK+1 MOVE MM
         SRDA  R14,32              SHIFT REMAIN TO ODD REG OF PAIR
         D     R14,=F'100'         DIVIDE TO FIND SECONDS
         CVD   R15,DOUBLE          CONVERT SECONDS TO PACKED
         UNPK  WORK(3),DOUBLE+6(2) UNPACK SECONDS
         OI    WORK+2,X'F0'        MAKE PRINTABLE
         MVC   OELAPTM+7(2),WORK+1 MOVE SS
         MVI   OELAPTM+3,C':'      SET ':'
         MVI   OELAPTM+6,C':'      SET ':'
         SPACE 3
********************************************************************
*        SET OUTPUT CPU TIME                                       *
********************************************************************
         MVC   OCPUTM,=CL7'****:**' ASSUME GT 9999.99
         L     R14,INTOTCPU        LOAD TOTAL CPU TIME
         AH    R14,=H'50'          ADD ROUNDING FACTOR
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         D     R14,=F'6000'        CONVERT TO MINUTES
         CVD   R15,DOUBLE          CONVERT MINUTES TO PACKED
         CP    DOUBLE,=P'9999'     SEE IF CPU TIME GT 9999
         BH    FORMAT1             YES, LEAVE ASTERISKS
         MVC   WORK(6),=X'402020202120' SET EDIT MASK
         ED    WORK(6),DOUBLE+5    EDIT CPU MINUTES
         MVC   OCPUTM(4),WORK+2    MOVE CPU MINUTES TO DETAIL
         SRDA  R14,32              SHIFT SEC/100 TO ODD REG
         D     R14,=F'100'         CONVERT TO SECONDS
         CVD   R15,DOUBLE          CONVERT SECONDS TO PACKED
         MVC   WORK(4),=X'F0202020' SET EDIT MASK
         ED    WORK(4),DOUBLE+6    EDIT CPU SECONDS
         MVC   OCPUTM+5(2),WORK+2  MOVE CPU SECONDS TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT REGION USED BELOW 16 MEG                       *
********************************************************************
FORMAT1  L     R14,INSTGB16        LOAD REGION USED BELOW
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         M     R14,=F'10'          MULTIPLY BY 10
         SRA   R15,10              DIVIDE BY 1024 FOR MEGS USED
         ST    R15,RGNBWRK         SAVE REGION BELOW IN MEG
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   WORK(7),=X'40202020214B20' SET EDIT MASK
         ED    WORK(7),DOUBLE+5    EDIT REGION USED BELOW
         MVC   ORGNB16(6),WORK+1   MOVE REGIONS USED BELOW
         MVI   ORGNB16+6,C'M'      SET MEG INDICATOR
         SPACE 3
********************************************************************
*        SET OUTPUT REGION USED ABOVE 16 MEG                       *
********************************************************************
         L     R14,INSTGA16        LOAD REGION USED ABOVE
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         M     R14,=F'10'          MULTIPLY BY 10
         SRA   R15,10              DIVIDE BY 1024 FOR MEGS USED
         ST    R15,RGNAWRK         SAVE REGION ABOVE IN MEG
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   WORK(7),=X'40202020214B20' SET EDIT MASK
         ED    WORK(7),DOUBLE+5    EDIT REGION USED ABOVE
         MVC   ORGNA16(6),WORK+1   MOVE REGION USED ABOVE TO DETAIL
         MVI   ORGNA16+6,C'M'      SET MEG INDICATOR
         SPACE 3
********************************************************************
*        SET OUTPUT NUMBER OF TAPE MOUNTS                          *
********************************************************************
         L     R15,INMNTS          LOAD NUMBER OF TAPE MOUNTS
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   WORK(4),=X'40202020' SET EDIT MASK
         ED    WORK(4),DOUBLE+6    EDIT NUMBER OF TAPE MOUNTS
         MVC   OMOUNTS,WORK+1      MOVE TAPE MOUNTS TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT TOTAL EXCP COUNT                               *
********************************************************************
         L     R15,INTEP           LOAD EXCP COUNT
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   WORK(12),=X'402020206B2020206B202120' SET EDIT MASK
         ED    WORK(12),DOUBLE+3   EDIT EXCP COUNT
         MVC   OEXCPS,WORK+2       MOVE EXCP COUNT TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT STEP AVERAGE CPU PERCENT                       *
********************************************************************
         L     R15,INCPP           LOAD CPU PERCENT
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   WORK(4),=X'40202120' SET EDIT MASK
         ED    WORK(4),DOUBLE+6    EDIT CPU PERCENT
         MVC   OCPU#,WORK+1        MOVE CPU PERCENT TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT JOB TYPE                                       *
********************************************************************
         MVC   OTYPE,INTYPE        MOVE JOB TYPE TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT NON-SCRATCH TAPE MOUNTS                        *
********************************************************************
         L     R15,INTPR           LOAD NUMBER OF NON-SCR TAPE MNTS
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   WORK(4),=X'40202020' SET EDIT MASK
         ED    WORK(4),DOUBLE+6    EDIT NUMBER OF TAPE MOUNTS
         MVC   OPTAPES,WORK+1      MOVE TAPE MOUNTS TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT SCRATCH TAPE MOUNTS                            *
********************************************************************
         L     R15,INPTM           LOAD NUMBER OF SCRATCH TAPE MNTS
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   WORK(4),=X'40202020' SET EDIT MASK
         ED    WORK(4),DOUBLE+6    EDIT NUMBER OF TAPE MOUNTS
         MVC   OSTAPES,WORK+1      MOVE TAPE MOUNTS TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT EXPANDED STORAGE PAGES                         *
********************************************************************
         MVC   OEXPPAG,=CL8'****,***' ASSUME GT 9999,999
         L     R15,INEXPTOT        LOAD EXPANDED STORAGE PAGES
         C     R15,=F'9999999'     SEE IF EXCEEDS MAX
         BE    FORMAT2             YES, BRANCH
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   WORK(9),=X'40202020206B202120' SET EDIT MASK
         ED    WORK(9),DOUBLE+4    EDIT EXPANDED PAGES
         MVC   OEXPPAG,WORK+1      MOVE EXPANDED PAGES TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT AUXILLARY STORAGE PAGES                        *
********************************************************************
FORMAT2  MVC   OAUXPAG,=CL8'****,***' ASSUME GT 9999,999
         L     R15,INAUXTOT        LOAD AUXILLARY STORAGE PAGES
         C     R15,=F'9999999'     SEE IF EXCEEDS MAX
         BE    FORMAT3             YES, BRANCH
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   WORK(9),=X'40202020206B202120' SET EDIT MASK
         ED    WORK(9),DOUBLE+4    EDIT AUXILLARY PAGES
         MVC   OAUXPAG,WORK+1      MOVE AUXILLARY PAGES TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT SERVICE UNITS                                  *
********************************************************************
FORMAT3  MVC   OSUS,=CL9'****,***K' ASSUME GT 9999,999
         L     R15,INSRV           LOAD SERVICE UNITS
         AH    R15,=H'512'         ADD ROUNDING FACTOR
         SRA   R15,10              DIVIDE BY 1024 FOR K
         ST    R15,SUWRK           SAVE SERVICE UNITS IN K
         C     R15,=F'9999999'     SEE IF EXCEEDS MAX
         BH    FMTLINE             YES, BRANCH
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   WORK(9),=X'40202020206B202120' SET EDIT MASK
         ED    WORK(9),DOUBLE+4    EDIT SERVICE UNITS
         MVC   OSUS(8),WORK+1      MOVE SERVICE UNITS TO DETAIL
         MVI   OSUS+8,C'K'         SET K INDICATOR
         SPACE 3
********************************************************************
*        SET OUTPUT VIO PAGES                                      *
********************************************************************
FORMAT4  MVC   OVIOPAG,=CL8'****,***' ASSUME GT 9999,999
         L     R15,INVIOTOT        LOAD VIO PAGES
         C     R15,=F'9999999'     SEE IF EXCEEDS MAX
         BE    FORMAT5             YES, BRANCH
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   WORK(9),=X'40202020206B202120' SET EDIT MASK
         ED    WORK(9),DOUBLE+4    EDIT VIO PAGES
         MVC   OVIOPAG,WORK+1      MOVE VIO PAGES TO DETAIL
         SPACE 3
********************************************************************
*        SET START DAY-OF-THE-WEEK                                 *
********************************************************************
FORMAT5  LH    R1,INSDAY           LOAD START DAY-OF-WEEK INDEX
         BCTR  R1,0                MAKE RELATIVE TO ZERO
         MH    R1,=H'3'            CALCULATE NAME TABLE OFFSET
         LA    R1,DAYTABLE(R1)     POINT TO NAME OF DAY ENTRY
         MVC   OSDAY,0(R1)         SAVE DAY-OF-THE-WEEK
         SPACE 3
********************************************************************
*        SET END   DAY-OF-THE-WEEK                                 *
********************************************************************
FORMAT6  LH    R1,INEDAY           LOAD START DAY-OF-WEEK INDEX
         BCTR  R1,0                MAKE RELATIVE TO ZERO
         MH    R1,=H'3'            CALCULATE NAME TABLE OFFSET
         LA    R1,DAYTABLE(R1)     POINT TO NAME OF DAY ENTRY
         MVC   OEDAY,0(R1)         SAVE DAY-OF-THE-WEEK
FORMAT7  DS    0H
         EJECT
***********************************************************************
*                                                                     *
*        BUILD THE APPROPRIATE DETAIL LINE FROM THE REPORT            *
*        VARIABLES AS DEFINED IN THE PRINT OPTION TABLE.              *
*                                                                     *
***********************************************************************
FMTLINE  L     R1,=V(PRTOPT)       LOAD ADDRESS OF PRINT OPTIONS
         LA    R2,DETAIL           POINT TO DETAIL LINE
FMTLINE1 CLI   0(R1),X'FF'         PHYSICAL END OF TABLE
         BE    FMTLINE4            YES, BRANCH
         CLI   0(R1),C'N'          LOGICAL END OF TABLE
         BE    FMTLINE4            YES, BRANCH
         LH    R15,4(R1)           LOAD BRANCH TABLE OFFSET
         B     FMTLINE2(R15)       BRANCH TO PROPER ROUTINE BY INDEX
FMTLINE2 B     PRTJOBNM            INDEX = 00
         B     PRTJOBNO            INDEX = 04
         B     PRTSJDTE            INDEX = 08
         B     PRTSTIME            INDEX = 12
         B     PRTSYSID            INDEX = 16
         B     PRTPSTEP            INDEX = 20
         B     PRTJSTEP            INDEX = 24
         B     PRTPGM              INDEX = 28
         B     PRTUID              INDEX = 32
         B     PRTCCODE            INDEX = 36
         B     PRTELAP             INDEX = 40
         B     PRTEXCP             INDEX = 44
         B     PRTCPUT             INDEX = 48
         B     PRTRGNB             INDEX = 52
         B     PRTRGNA             INDEX = 56
         B     PRTTAPE             INDEX = 60
         B     PRTCPUP             INDEX = 64
         B     PRTJTYPE            INDEX = 68
         B     ERROR047            INDEX = 72
         B     ERROR047            INDEX = 76
         B     ERROR047            INDEX = 80
         B     ERROR047            INDEX = 84
         B     ERROR047            INDEX = 88
         B     ERROR047            INDEX = 92
         B     ERROR047            INDEX = 96
         B     ERROR047            INDEX = 100
         B     ERROR047            INDEX = 104
         B     PRTPTAPE            INDEX = 108
         B     PRTSTAPE            INDEX = 112
         B     PRTEXPPG            INDEX = 116
         B     PRTAUXPG            INDEX = 120
         B     PRTSUS              INDEX = 124
         B     ERROR047            INDEX = 128
         B     ERROR047            INDEX = 132
         B     ERROR047            INDEX = 136
         B     PRTVIOPG            INDEX = 140
         B     ERROR047            INDEX = 144
         B     ERROR047            INDEX = 148
         B     ERROR047            INDEX = 152
         B     ERROR047            INDEX = 156
         B     ERROR047            INDEX = 160
         B     ERROR047            INDEX = 164
         B     ERROR047            INDEX = 168
         B     ERROR047            INDEX = 172
         B     ERROR047            INDEX = 176
         B     ERROR047            INDEX = 180
         B     ERROR047            INDEX = 184
         B     ERROR047            INDEX = 188
         B     ERROR047            INDEX = 192
         B     ERROR047            INDEX = 196
         B     ERROR047            INDEX = 200
         B     ERROR047            INDEX = 204
         B     ERROR047            INDEX = 208
         B     ERROR047            INDEX = 212
         B     ERROR047            INDEX = 216
         B     ERROR047            INDEX = 220
         B     ERROR047            INDEX = 224
         B     ERROR047            INDEX = 228
         B     ERROR047            INDEX = 232
         B     ERROR047            INDEX = 236
         B     ERROR047            INDEX = 240
         B     ERROR047            INDEX = 244
         B     ERROR047            INDEX = 248
         B     PRTSDAY             INDEX = 252
         B     ERROR047            INDEX = 256
         B     ERROR047            INDEX = 260
         B     PRTEJDTE            INDEX = 264
         B     PRTETIME            INDEX = 268
         B     PRTEDAY             INDEX = 272
         B     PRTSGDTE            INDEX = 276
         B     PRTEGDTE            INDEX = 280
         B     ERROR047            INDEX = 284
FMTLINE3 LA    R1,6(,R1)           INCREMENT TO NEXT TABLE ENTRY
         B     FMTLINE1            LOOP
FMTLINE4 B     MVEND               DONE WITH PRINT LINE
         EJECT
***********************************************************************
*        MOVE JOB NAME TO DETAIL                                      *
***********************************************************************
PRTJOBNM LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(8,R2),OJOBNAME    MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE JOB NUMBER TO DETAIL                                    *
***********************************************************************
PRTJOBNO LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(8,R2),OJOBNO      MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE START JULIAN DATE TO DETAIL                             *
***********************************************************************
PRTSJDTE LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(8,R2),OJSDATE     MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE END JULIAN DATE TO DETAIL                               *
***********************************************************************
PRTEJDTE LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(8,R2),OJEDATE     MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE START GREGORIAN DATE TO DETAIL                          *
***********************************************************************
PRTSGDTE LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(10,R2),OGSDATE    MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE END GREGORIAN DATE TO DETAIL                            *
***********************************************************************
PRTEGDTE LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(10,R2),OGEDATE    MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE START TIME TO DETAIL                                    *
***********************************************************************
PRTSTIME LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(5,R2),OSTIME      MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE END TIME TO DETAIL                                      *
***********************************************************************
PRTETIME LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(5,R2),OETIME      MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE SYSTEM ID TO DETAIL                                     *
***********************************************************************
PRTSYSID LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(4,R2),OSYSID      MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE PROC STEP NAME TO DETAIL                                *
***********************************************************************
PRTPSTEP LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(8,R2),OPSTEP      MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE JOB STEP NAME TO DETAIL                                 *
***********************************************************************
PRTJSTEP LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(8,R2),OJSTEP      MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE PROGRAM NAME TO DETAIL                                  *
***********************************************************************
PRTPGM   LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(8,R2),OPGMNM      MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE SECURITY USERID TO DETAIL                               *
***********************************************************************
PRTUID   LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(8,R2),OUSERID     MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE CONDITION CODE TO DETAIL                                *
***********************************************************************
PRTCCODE LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(5,R2),OCCODE      MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE ELAPSED TIME TO DETAIL                                  *
***********************************************************************
PRTELAP  LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(9,R2),OELAPTM     MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE TOTAL I/O TO DETAIL LINE                                *
***********************************************************************
PRTEXCP  LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(10,R2),OEXCPS     MOVE FIELD TO DETAIL LINE
         TM    SWITCH+4,SELTOT     SEE IF WANT TOTALS
         BNO   PRTCOMM             NO, GET OUT
         L     R15,INTEP           LOAD TOTAL EXCPS FOR STEP
         CVD   R15,DOUBLE          CONVERT TO PACKED
         AP    ACC4,DOUBLE         ACCUMULATE TOTAL
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE CPU TIME TO DETAIL LINE                                 *
***********************************************************************
PRTCPUT  LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(7,R2),OCPUTM      MOVE FIELD TO DETAIL LINE
         TM    SWITCH+4,SELTOT     SEE IF WANT TOTALS
         BNO   PRTCOMM             NO, GET OUT
         L     R15,INTOTCPU        LOAD TOTAL CPU FOR STEP
         CVD   R15,DOUBLE          CONVERT TO PACKED
         AP    ACC3,DOUBLE         ACCUMULATE TOTAL
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE REGION BELOW TO DETAIL LINE                             *
***********************************************************************
PRTRGNB  LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(7,R2),ORGNB16     MOVE FIELD TO DETAIL LINE
         TM    SWITCH+4,SELTOT     SEE IF WANT TOTALS
         BNO   PRTCOMM             NO, GET OUT
         L     R15,RGNBWRK         LOAD REGION USED BELOW IN MEG
         CVD   R15,DOUBLE          CONVERT TO PACKED
         AP    ACC5,DOUBLE         ACCUMULATE TOTAL
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE REGION ABOVE TO DETAIL LINE                             *
***********************************************************************
PRTRGNA  LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(7,R2),ORGNA16     MOVE FIELD TO DETAIL LINE
         TM    SWITCH+4,SELTOT     SEE IF WANT TOTALS
         BNO   PRTCOMM             NO, GET OUT
         L     R15,RGNAWRK         LOAD REGION USED ABOVE IN MEG
         CVD   R15,DOUBLE          CONVERT TO PACKED
         AP    ACC6,DOUBLE         ACCUMULATE TOTAL
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE TAPE MOUNTS TO DETAIL LINE                              *
***********************************************************************
PRTTAPE  LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(3,R2),OMOUNTS     MOVE FIELD TO DETAIL LINE
         TM    SWITCH+4,SELTOT     SEE IF WANT TOTALS
         BNO   PRTCOMM             NO, GET OUT
         L     R15,INMNTS          LOAD TOTAL TAPE MOUNTS
         CVD   R15,DOUBLE          CONVERT TO PACKED
         AP    ACC7,DOUBLE         ACCUMULATE TOTAL
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE CPU PERCENT TO DETAIL LINE                              *
***********************************************************************
PRTCPUP  LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(3,R2),OCPU#       MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE JOB TYPE TO DETAIL LINE                                 *
***********************************************************************
PRTJTYPE LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(3,R2),OTYPE       MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE NON-SCRATCH TAPE MOUNTS TO DETAIL LINE                  *
***********************************************************************
PRTPTAPE LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(3,R2),OPTAPES     MOVE FIELD TO DETAIL LINE
         TM    SWITCH+4,SELTOT     SEE IF WANT TOTALS
         BNO   PRTCOMM             NO, GET OUT
         L     R15,INTPR           LOAD NON-SCRATCH TAPE MOUNTS
         CVD   R15,DOUBLE          CONVERT TO PACKED
         AP    ACC8,DOUBLE         ACCUMULATE TOTAL
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE SCRATCH TAPE MOUNTS TO DETAIL LINE                      *
***********************************************************************
PRTSTAPE LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(3,R2),OSTAPES     MOVE FIELD TO DETAIL LINE
         TM    SWITCH+4,SELTOT     SEE IF WANT TOTALS
         BNO   PRTCOMM             NO, GET OUT
         L     R15,INPTM           LOAD SCRATCH TAPE MOUNTS
         CVD   R15,DOUBLE          CONVERT TO PACKED
         AP    ACC9,DOUBLE         ACCUMULATE TOTAL
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE EXPANDED STORAGE PAGES TO DETAIL LINE                   *
***********************************************************************
PRTEXPPG LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(8,R2),OEXPPAG     MOVE FIELD TO DETAIL LINE
         TM    SWITCH+4,SELTOT     SEE IF WANT TOTALS
         BNO   PRTCOMM             NO, GET OUT
         L     R15,INEXPTOT        LOAD EXPANDED STG PAGES
         CVD   R15,DOUBLE          CONVERT TO PACKED
         AP    ACC10,DOUBLE        ACCUMULATE TOTAL
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE AUXILLARY STORAGE PAGES TO DETAIL LINE                  *
***********************************************************************
PRTAUXPG LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(8,R2),OAUXPAG     MOVE FIELD TO DETAIL LINE
         TM    SWITCH+4,SELTOT     SEE IF WANT TOTALS
         BNO   PRTCOMM             NO, GET OUT
         L     R15,INAUXTOT        LOAD AUXILLARY STG PAGES
         CVD   R15,DOUBLE          CONVERT TO PACKED
         AP    ACC11,DOUBLE        ACCUMULATE TOTAL
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE SERVICE UNITS TO DETAIL LINE                            *
***********************************************************************
PRTSUS   LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(9,R2),OSUS        MOVE FIELD TO DETAIL LINE
         TM    SWITCH+4,SELTOT     SEE IF WANT TOTALS
         BNO   PRTCOMM             NO, GET OUT
         L     R15,SUWRK           LOAD SERVICE UNITS IN K
         CVD   R15,DOUBLE          CONVERT TO PACKED
         AP    ACC12,DOUBLE        ACCUMULATE TOTAL
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE VIO PAGES TO DETAIL LINE                                *
***********************************************************************
PRTVIOPG LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(8,R2),OVIOPAG     MOVE FIELD TO DETAIL LINE
         TM    SWITCH+4,SELTOT     SEE IF WANT TOTALS
         BNO   PRTCOMM             NO, GET OUT
         L     R15,INVIOTOT        LOAD VIO PAGES
         CVD   R15,DOUBLE          CONVERT TO PACKED
         AP    ACC13,DOUBLE        ACCUMULATE TOTAL
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE START DAY-OF-THE-WEEK TO DETAIL LINE                    *
***********************************************************************
PRTSDAY  LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   1(3,R2),OSDAY       MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE END   DAY-OF-THE-WEEK TO DETAIL LINE                    *
***********************************************************************
PRTEDAY  LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   1(3,R2),OEDAY       MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        PRINT COMMON ROUTINE                                         *
***********************************************************************
PRTCOMM  B     FMTLINE3            GO PROCESS NEXT TABLE ENTRY
         SPACE 3
MVEND    TM    SWITCH+4,SELTOT     SEE IF WANT TOTALS
         BNO   MVEND1              NO, GET OUT
         AP    ACC1,=P'1'          ADD 1 TO SELECTED STEP COUNTER
         L     R15,INELAP          LOAD ELAPSED TIME IN SEC/100
         CVD   R15,DOUBLE          CONVERT TO PACKED
         AP    ACC2,DOUBLE         ACCUMULATE TOTAL
MVEND1   TM    SWITCH+6,OPTOUT     SEE IF OPTIONAL OUTPUT FILE
         BNO   MVEND2              NO, BRANCH
         PUT   DATAOUT,INREC       YES, WRITE SELECTED RECORD
MVEND2   L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         LM    R14,R12,12(R13)     RESTORE ORIGINAL REGS
         BR    R14                 RETURN TO SORT FOR LAST TIME
         SPACE 3
         LTORG
SAVE2    DS    18F                 ROUTINE SAVE AREA
         DROP  R9,R10,R11,R12
         POP   USING
         EJECT
***********************************************************************
*                                                                     *
*        ERROR ROUTINES                                               *
*                                                                     *
*        EACH ERROR ROUTINE WILL NORMALLY SET A MESSAGE INDEX         *
*        AND THEN LOAD THE APPROPRIATE MESSAGE FROM A MESSAGE         *
*        TABLE ACCORDING TO THAT INDEX.  THAT MESSAGE WILL BE         *
*        ISSUED AS A WTO AND THE PROGRAM ABENDED WITH A USER          *
*        ABEND WHICH ALSO MATCHES THE MESSAGE INDEX.                  *
*                                                                     *
***********************************************************************
ERROR013 LA    R15,13              LOAD MESSAGE INDEX
         B     ERROR999            GO TO COMMON ERROR ROUTINE
ERROR030 LA    R15,30              LOAD MESSAGE INDEX
         B     ERROR999            GO TO COMMON ERROR ROUTINE
ERROR031 LA    R15,31              LOAD MESSAGE INDEX
         B     ERROR999            GO TO COMMON ERROR ROUTINE
ERROR046 LA    R15,46              LOAD MESSAGE INDEX
         B     ERROR999            GO TO COMMON ERROR ROUTINE
ERROR047 LA    R15,47              LOAD MESSAGE INDEX
         B     ERROR999            GO TO COMMON ERROR ROUTINE
ERROR048 LA    R15,48              LOAD MESSAGE INDEX
         B     ERROR999            GO TO COMMON ERROR ROUTINE
ERROR090 LA    R15,90              LOAD MESSAGE INDEX
         B     ERROR999            GO TO COMMON ERROR ROUTINE
         SPACE 3
ERROR999 ST    R15,ABCODE          SAVE ABEND CODE
         BCTR  R15,0               MAKE ERROR RELATIVE TO ZERO
         MH    R15,=H'120'         MULTIPLY BY LENGTH OF EACH ENTRY
         A     R15,=V(MSGTBL)      CALCULATE ADDRESS OF THIS ENTRY
         MVC   MSGWTO+4(120),0(R15) MOVE MESSAGE TO WTO LIST FORM
         WTO   MF=(E,MSGWTO)       WRITE ERROR MESSAGE
         L     R1,ABCODE           LOAD ABEND CODE
         ABEND (R1),DUMP           ABEND THE PROGRAM
         SPACE 3
MSGWTO   WTO   '123456789 123456789 123456789 123456789 123456789 12345X
               6789 123456789 123456789 123456789 123456789 123456789 1X
               23456789 ',ROUTCDE=11,MF=L
         SPACE 3
         LTORG
         EJECT
         PUSH  USING
***********************************************************************
*                                                                     *
*        THIS ROUTINE WILL SEARCH THE TIOT FOR THE DDNAME SUPPLIED    *
*        IN THE EIGHT (8) BYTE FIELD NAMED DDNAME.                    *
*                                                                     *
*        1)  REGISTER 15 ON ENTRY IS THE ROUTINE ENTRY POINT          *
*        2)  REGISTER 14 ON ENTRY IS THE RETURN ADDRESS               *
*                                                                     *
*        THE SUCCESS OF THE DDNAME SEARCH WILL BE INDICATED BY THE    *
*        RETURN CODE SET IN REGISTER 15.                              *
*                                                                     *
*        REG 15 = 0   - DDNAME FOUND                                  *
*        REG 15 = 4   - DDNAME NOT FOUND                              *
*                                                                     *
*        RETURN FROM THIS ROUTINE WILL BE MADE TO REGISTER 14         *
*                                                                     *
***********************************************************************
FINDDN   CSECT
         STM   R14,R12,12(R13)     SAVE REGISTERS
         USING FINDDN,R9,R10,R11,R12  SET ADDRESSABILITY TO ROUTINE
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,SAVE3           LOAD ADDR OF NEW SAVE
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
         SLR   R15,R15             SET RETURN CODE TO ZERO
         L     R1,16               GET CVT ADDR
         L     R1,0(,R1)           GET TCB PTRS
         L     R1,4(,R1)           GET CURRENT TCB
         L     R1,12(,R1)          GET TIOT ADDR
         LA    R1,24(,R1)          POINT TO DD ENTRIES
         SLR   R0,R0               ZERO REG FOR ICM
FINDDN1  ICM   R0,1,0(R1)          LOAD LENGTH OF DD ENTRY
         BZ    NODDN               ZERO, END OF TIOT ENTRIES
         CLC   DDNAME,4(R1)        SEE IF DDNAME MATCH
         BE    YESDDN              YES, BRANCH
FINDDN2  BXH   R1,R0,FINDDN1       LOOP FOR NEXT ENTRY
NODDN    LA    R15,4               SET RETURN CODE TO 4
YESDDN   L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         L     R14,12(R13)         RESTORE
         LM    R0,R12,20(R13)          ORIGINAL REGS
         BR    R14                 RETURN TO CALLER
         SPACE 3
         LTORG
SAVE3    DS    18F                 ROUTINE SAVE AREA
         DROP  R9,R10,R11,R12
         POP   USING
         EJECT
         PUSH  USING
***********************************************************************
*                                                                     *
*                                CNVTIME                              *
*                                                                     *
*        THIS ROUTINE WILL CONVERT THE FULLWORD BINARY TIME VALUE     *
*        IN THE SMF RECORD TO PRINTABLE TIME OF DAY (HHH:MM:SS.TT)    *
*                                                                     *
*        1)  REGISTER 15 ON ENTRY WILL CONTAIN THE ENTRY POINT        *
*        2)  REGISTER 14 ON ENTRY WILL CONTAIN THE RETURN ADDRESS     *
*        3)  REGISTER 1  ON ENTRY WILL CONTAIN THE BINARY TIME        *
*        4)  THE CONVERTED TIME WILL BE IN THE FIELD OUTTIME IN       *
*            THE FORM HHH:MM:SS.TT                                    *
*                                                                     *
*        RETURN FROM THIS ROUTINE WILL BE MADE TO REGISTER 14         *
*                                                                     *
***********************************************************************
CNVTIME  CSECT
         STM   R14,R12,12(R13)     SAVE REGISTERS
         USING CNVTIME,R9,R10,R11,R12 SET ADDRESSABILITY TO ROUTINE
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,SAVE4           LOAD ADDR OF NEW SAVE
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
         LR    R14,R1              MOVE BINARY TIME TO WORK REG
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         D     R14,=F'360000'      DIVIDE TO FIND HOURS
         CVD   R15,DOUBLE          CONVERT HOURS TO DECIMAL
         UNPK  OUTTIME(3),DOUBLE+6(2)  UNPACK HOURS
         OI    OUTTIME+2,X'F0'     MAKE PRINTABLE
         SRDA  R14,32              SHIFT REMAINDER TO ODD REG
         D     R14,=F'6000'        DIVIDE TO FIND MINUTES
         CVD   R15,DOUBLE          CONVERT MINUTES TO DECIMAL
         UNPK  OUTTIME+3(3),DOUBLE+6(2) UNPACK MINUTES
         OI    OUTTIME+5,X'F0'     MAKE PRINTABLE
         MVI   OUTTIME+3,C':'      SEPARATE HOURS AND MINUTES
         SRDA  R14,32              SHIFT REMAINDER TO ODD REG
         D     R14,=F'100'         DIVIDE TO FIND FULL SECONDS
         CVD   R15,DOUBLE          CONVERT SECONDS TO DECIMAL
         UNPK  OUTTIME+6(3),DOUBLE+6(2)  UNPACK SECONDS
         OI    OUTTIME+8,X'F0'     MAKE PRINTABLE
         MVI   OUTTIME+6,C':'      SEPARATE MINUTES AND SECONDS
         CVD   R14,DOUBLE          CONVERT HUNDRETHS TO DECIMAL
         UNPK  OUTTIME+9(3),DOUBLE+6(2)  UNPACK HUNDRETHS
         OI    OUTTIME+11,X'F0'    MAKE PRINTABLE
         MVI   OUTTIME+9,C'.'      SEPARATE SECONDS AND HUNDRETHS
         L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         LM    R14,R12,12(R13)     RESTORE ORIGINAL REGS
         BR    R14                 RETURN TO SORT FOR LAST TIME
         SPACE 3
         LTORG
SAVE4    DS    18F                 ROUTINE SAVE AREA
         DROP  R9,R10,R11,R12
         POP   USING
         EJECT
         PUSH  USING
***********************************************************************
*                                                                     *
*                               PRMCHK                                *
*                                                                     *
*        THIS ROUTINE WILL PROCESS THE INPUT SYSIN PARM STATEMENT.    *
*        IT WILL STORE THE PARM VALUE IN THE APPROPRIATE FIELD OR     *
*        THE RETURN CODE WILL BE SET TO A VALUE INDICATING A          *
*        SPECIFIC ERROR.                                              *
*                                                                     *
*        1)  REGISTER 15 ON ENTRY WILL CONTAIN THE ENTRY POINT        *
*        2)  REGISTER 14 ON ENTRY WILL CONTAIN THE RETURN ADDRESS     *
*                                                                     *
*        RETURN FROM THIS ROUTINE WILL BE MADE TO REGISTER 14         *
*                                                                     *
***********************************************************************
PRMCHK   CSECT
         STM   R14,R12,12(R13)     SAVE REGISTERS
         USING PRMCHK,R9,R10,R11,R12 SET ADDRESSABILITY TO ROUTINE
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,SAVE5           LOAD ADDR OF NEW SAVE
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
         LA    R7,CARDAREA         LOAD INPUT RECORD ADDRESS
         SPACE 3
***********************************************************************
*                                                                     *
*        DETERMINE LENGTH OF THE INPUT PARM AND THEN SEARCH           *
*        A KEYWORD TABLE TO FIND A MATCH AND ROUTINE INDEX.           *
*                                                                     *
***********************************************************************
PRMCHK1  LR    R1,R7               SAVE RECORD ADDRESS
         SLR   R15,R15             CLEAR COUNTER REG
PRMCHK2  SLR   R3,R3               SET LENGTH TO ZERO
PRMCHK3  CLI   0(R7),C' '          END OF PARM
         BE    PRMCHK4             YES, BRANCH
         CLI   0(R7),C'='          END OF PARM
         BE    PRMCHK4             YES, BRANCH
         CLI   0(R7),C'>'          END OF PARM
         BE    PRMCHK4             YES, BRANCH
         CLI   0(R7),C'<'          END OF PARM
         BE    PRMCHK4             YES, BRANCH
         LA    R3,1(,R3)           ADD 1 TO LENGTH FIELD
         LA    R7,1(,R7)           INCREMENT TO NEXT CHAR OF PARM
         B     PRMCHK3             LOOP
PRMCHK4  LTR   R3,R3               TEST LENGTH
         BZ    ERROR033            ZERO, ERROR
         BCTR  R3,0                MAKE MACHINE LENGTH
         L     R4,=V(OPTKEY)       LOAD ADDRESS OF OPTIONS KEYWORD TBL
PRMCHK5  CLI   0(R4),X'FF'         END OF TABLE
         BE    ERROR001            YES, ERROR, INVALID KEYWORD
         CH    R3,0(R4)            SEE IF LENGTH LT MINIMUM LENGTH
         BL    PRMCHK6             YES, BRANCH
         EX    R3,COMPOKEY         COMPARE OPTION KEYWORD
         BE    PRMCHK7             MATCH, BRANCH
PRMCHK6  LA    R4,34(,R4)          INCREMENT TO NEXT TABLE ENTRY
         B     PRMCHK5             LOOP
PRMCHK7  CLI   16(R4),C'Y'         SEE IF ELIGIBLE SELECT OPTION
         BNE   ERROR001            NO, ERROR
         LH    R15,2(R4)           LOAD OPTION INDEX FROM TABLE
         SPACE 3
***********************************************************************
*                                                                     *
*        GO TO THE PROPER ROUTINE FOR THE KEYWORD ON THE INPUT        *
*        CARD ACCORDING TO THE ROUTINE INDEX IN THE KEYWORD           *
*        TABLE.                                                       *
*                                                                     *
***********************************************************************
         B     PRMCHK8(R15)        BRANCH TO PROPER ROUTINE BY INDEX
PRMCHK8  B     PRMJBN              INDEX = 00
         B     PRMJNO              INDEX = 04
         B     PRMDATE             INDEX = 08
         B     PRMSTME             INDEX = 12
         B     PRMSYS              INDEX = 16
         B     PRMPST              INDEX = 20
         B     PRMJST              INDEX = 24
         B     PRMPGM              INDEX = 28
         B     PRMUID              INDEX = 32
         B     PRMCC               INDEX = 36
         B     PRMET               INDEX = 40
         B     PRMBC               INDEX = 44
         B     PRMCT               INDEX = 48
         B     PRMRB               INDEX = 52
         B     PRMRA               INDEX = 56
         B     PRMNT               INDEX = 60
         B     PRMCPP              INDEX = 64
         B     PRMTYP              INDEX = 68
         B     PRMNOFL             INDEX = 72
         B     PRMNOAB             INDEX = 76
         B     PRMNOTE             INDEX = 80
         B     PRMNOPR             INDEX = 84
         B     PRMNOST             INDEX = 88
         B     PRMNOTS             INDEX = 92
         B     PRMSTC              INDEX = 96
         B     PRMSORT             INDEX = 100
         B     PRMPRT              INDEX = 104
         B     PRMPTP              INDEX = 108
         B     PRMSTP              INDEX = 112
         B     PRMEPG              INDEX = 116
         B     PRMAPG              INDEX = 120
         B     PRMSUS              INDEX = 124
         B     PRMTOT              INDEX = 128
         B     PRMAVG              INDEX = 132
         B     PRMNOD              INDEX = 136
         B     PRMVIO              INDEX = 140
         B     XPRMJBN             INDEX = 144
         B     XPRMJNO             INDEX = 148
         B     XPRMSYS             INDEX = 152
         B     XPRMPST             INDEX = 156
         B     XPRMJST             INDEX = 160
         B     XPRMPGM             INDEX = 164
         B     XPRMUID             INDEX = 168
         B     XPRMCC              INDEX = 172
         B     ERROR001            INDEX = 176
         B     ERROR001            INDEX = 180
         B     ERROR001            INDEX = 184
         B     ERROR001            INDEX = 188
         B     ERROR001            INDEX = 192
         B     ERROR001            INDEX = 196
         B     ERROR001            INDEX = 200
         B     ERROR001            INDEX = 204
         B     ERROR001            INDEX = 208
         B     ERROR001            INDEX = 212
         B     ERROR001            INDEX = 216
         B     ERROR001            INDEX = 220
         B     ERROR001            INDEX = 224
         B     ERROR001            INDEX = 228
         B     ERROR001            INDEX = 232
         B     ERROR001            INDEX = 236
         B     ERROR001            INDEX = 240
         B     ERROR001            INDEX = 244
         B     ERROR001            INDEX = 248
         B     PRMSDAY             INDEX = 252
         B     PRMJOBL             INDEX = 256
         B     PRMINT              INDEX = 260
         B     ERROR001            INDEX = 264
         B     PRMETME             INDEX = 268
         B     PRMEDAY             INDEX = 272
         B     ERROR001            INDEX = 276
         B     ERROR001            INDEX = 280
         B     ERROR001            INDEX = 284
         EJECT
***********************************************************************
*                                                                     *
*                        SELECT BY JOBNAME                            *
*                                                                     *
*        JOBNAME=JJJJJJJJ(NN)                                         *
*                                                                     *
*        INSURE THAT THE PARM IS EXACTLY 1 TO EIGHT ALPHANUMERIC      *
*        CHARACTERS LONG.  THE OPTIONAL INDEX VALUE CAN BE            *
*        SPECIFIED WITHIN PARENTHESIS TO SPECIFY THE OFFSET           *
*        WITHIN THE ACTUAL JOBNAME THAT THE SPECIFIED "JOBNAME"       *
*        IS SUPPOSED TO START.  THE OPTIONAL INDEX VALUE MUST         *
*        CONTAIN 1 TO 2 NUMERIC DIGITS.                               *
*                                                                     *
***********************************************************************
PRMJBN   OI    SWITCH,SELJOBNM     TURN ON SELECT JOBNAME INDICATOR
         MVI   VALJOBNM,X'00'      INITIALIZE
         MVI   VALJOBNM+1,X'00'       JOBNAME
         MVC   VALJOBNM+2(8),=CL8' '     ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         SLR   R15,R15             CLEAR COUNTER REGISTER
PRMJBN1  CLI   0(R7),C' '          END OF JOBNM?
         BE    PRMJBN5             YES, BRANCH
         CLI   0(R7),C'('          START OF OFFSET FIELD?
         BE    PRMJBN2             YES, BRANCH
         LA    R15,1(,R15)         ADD 1 TO LENGTH COUNTER
         LA    R7,1(,R7)           ADD 1 TO JOBNAME POINTER
         B     PRMJBN1             LOOP
PRMJBN2  LTR   R15,R15             TEST LENGTH OF JOBNAME
         BZ    ERROR003            ZERO, ERROR
         CH    R15,=H'8'           SEE IF LENGTH EXCEEDS 8
         BH    ERROR004            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         EX    R15,MVJOBNM         MOVE JOBNAME TO SAVE AREA
         STC   R15,VALJOBNM        SAVE JOBNAME LENGTH
         LA    R7,1(R7)            POINT TO INDEX VALUE
         LR    R1,R7               SAVE PARM ADDRESS
         SLR   R15,R15             CLEAR COUNTER REG
         CLI   0(R7),C')'          END OF INDEX
         BE    PRMJBN3             YES, BRANCH
         LA    R15,1(,R15)         ADD 1 TO LENGTH COUNTER
         CLI   1(R7),C')'          END OF INDEX
         BE    PRMJBN3             YES, BRANCH
         LA    R15,1(,R15)         ADD 1 TO LENGTH COUNTER
         CLI   2(R7),C')'          END OF INDEX
         BE    PRMJBN3             YES, BRANCH
         B     ERROR005            INDEX LENGTH EXCEEDS 2 CHARACTERS
PRMJBN3  LTR   R15,R15             SEE IF ZERO LENGTH
         BZ    PRMJBN6             YES, NO INDEX
         LR    R14,R15             SAVE INDEX LENGTH
         LR    R2,R7               SAVE INDEX POINTER
PRMJBN4  CLI   0(R2),C'0'          TEST FOR LESS THAN ZERO
         BL    ERROR006            YES, ERROR
         CLI   0(R2),C'9'          TEST FOR GT NINE
         BH    ERROR006            YES, ERROR
         LA    R2,1(,R2)           INDEX TO NEXT CHAR
         BCT   R14,PRMJBN4         LOOP
         BCTR  R15,0               MAKE INDEX LENGTH RELATIVE TO ZERO
         EX    R15,PACKINDX        PACK THE INDEX VALUE
         CVB   R15,DOUBLE          CONVERT INDEX VALUE TO BINARY
         BCTR  R15,0               MAKE INDEX VALUE RELATIVE TO ZERO
         STC   R15,VALJOBNM+1      SAVE INDEX VALUE
         B     PRMJBN6             BRANCH
PRMJBN5  LTR   R15,R15             TEST LENGTH OF JOBNAME
         BZ    ERROR002            ZERO, ERROR
         CH    R15,=H'8'           SEE IF LENGTH EXCEEDS 8
         BH    ERROR002            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         EX    R15,MVJOBNM         MOVE JOBNAME TO SAVE AREA
         STC   R15,VALJOBNM        SAVE JOBNAME LENGTH
         MVI   VALJOBNM+1,X'00'    SET INDEX TO ZERO
PRMJBN6  ICM   R15,B'1111',JOBNMTBL LOAD ADDRESS OF JOBNAME TABLE
         BNZ   PRMJBN7             NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=10010        GET ROOM FOR 1000 JOBNAME ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,JOBNMTBL        STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMJBN7  SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMJBN8  CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMJBN9             YES, GO SAVE NEW ENTRY
         LA    R15,10(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR060            YES, ERROR
         B     PRMJBN8             NO, LOOP
PRMJBN9  MVC   0(10,R15),VALJOBNM  SAVE NEW ENTRY
         MVI   10(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
MVJOBNM  MVC   VALJOBNM+2(0),0(R1) *****  EXEC ONLY *****
         EJECT
***********************************************************************
*                                                                     *
*                        SELECT BY JOBNO                              *
*                                                                     *
*        JOBNO=TTT.....                                               *
*                                                                     *
*        INSURE THAT THE PARM IS EXACTLY 8 CHARACTERS LONG AND        *
*        HAS THE FOLLOWING FORMS:                                     *
*                                                                     *
*        JOB.....  OR  STC.....  OR  TSU.....                         *
*                                                                     *
*        WHERE ..... IS THE NUMERIC JOB/STC/TSU NUMBER                *
*                                                                     *
***********************************************************************
PRMJNO   OI    SWITCH,SELJOBNO     TURN ON SELECT JOBNO INDICATOR
         MVC   VALJOBNO,=CL8' '    INITIALIZE JOB NUMBER ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         MVC   VALJOBNO,0(R7)      SAVE JOBNO VALUE
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE JOBNO NOT BLANK
         BE    ERROR035            NOT THERE, ERROR
         CLC   0(3,R7),=C'JOB'     SEE IF STARTS WITH 'JOB'
         BE    PRMJNO1             YES, BRANCH
         CLC   0(3,R7),=C'STC'     SEE IF STARTS WITH 'STC'
         BE    PRMJNO1             YES, BRANCH
         CLC   0(3,R7),=C'TSU'     SEE IF STARTS WITH 'TSU'
         BNE   ERROR035            NO, ERROR
PRMJNO1  LA    R7,3(,R7)           INCREMENT PAST JOB TYPE
         LA    R14,5               SET LENGTH TO 5
PRMJNO2  CLI   0(R7),C'0'          TEST FOR LESS THAN ZERO
         BL    ERROR035            YES, ERROR
         CLI   0(R7),C'9'          TEST FOR GT NINE
         BH    ERROR035            YES, ERROR
         LA    R7,1(,R7)           INDEX TO NEXT CHAR
         BCT   R14,PRMJNO2         LOOP
         CLI   0(R7),C' '          END OF JOBNO
         BNE   ERROR035            NO, ERROR
PRMJNO3  ICM   R15,B'1111',JOBNOTBL LOAD ADDRESS OF JOB NUMBER TABLE
         BNZ   PRMJNO4             NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=8008         GET ROOM FOR 1000 JOB NUMBER ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,JOBNOTBL        STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMJNO4  SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMJNO5  CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMJNO6             YES, GO SAVE NEW ENTRY
         LA    R15,08(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR061            YES, ERROR
         B     PRMJNO5             NO, LOOP
PRMJNO6  MVC   0(08,R15),VALJOBNO  SAVE NEW ENTRY
         MVI   08(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY DATE RANGE                            *
*                                                                     *
*        DATE=SDATE:EDATE                                             *
*                                                                     *
*        SDATE IS THE START DATE FOR SELECTION AND EDATE IS THE       *
*        OPTIONAL ENDING DATE FOR SELECTION.  IF ONLY ONE VALUE       *
*        IS ENTERED, THE DATE SELECTED IS ANY DATE GREATER THAN       *
*        OR EQUAL TO THAT DATE.  EACH DATE CAN BE ANY OF THE          *
*        FOLLOWING FORMATS:                                           *
*                                                                     *
*        YY.DDD                                                       *
*        YYYY.DDD                                                     *
*        MM/DD/YY                                                     *
*        YYYY/MM/DD                                                   *
*                                                                     *
***********************************************************************
PRMDATE  OI    SWITCH,SELDATE      TURN ON SELECT DATE INDICATOR
         MVC   DATES,=P'1900001'   SET DEFAULT LOW DATE
         MVC   DATEE,=P'2099365'   SET DEFAULT HIGH DATE
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
PRMDATE1 LR    R1,R7               SAVE PARM ADDRESS
         BAL   R14,PRMDTT          GO PROCESS THIS DATE
         LTR   R15,R15             TEST RETURN CODE
         BNZ   ERROR007            NOT ZERO, INVALID START DATE
         MVC   DATES,DATEJUL       SAVE START DATE
         CLI   0(R1),C':'          SEE IF DATE RANGE
         BNE   ERROR008            NO, GET OUT
         LA    R1,1(,R1)           YES, INCREMENT PAST ':'
         BAL   R14,PRMDTT          GO PROCESS THIS DATE
         LTR   R15,R15             TEST RETURN CODE
         BNZ   ERROR009            NOT ZERO, INVALID END DATE
         MVC   DATEE,DATEJUL       SAVE END DATE
PRMDATE2 ICM   R15,B'1111',DATETBL  LOAD ADDRESS OF DATE TABLE
         BNZ   PRMDATE3            NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=8008         GET ROOM FOR 1000 DATE ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,DATETBL         STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMDATE3 SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMDATE4 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMDATE5            YES, GO SAVE NEW ENTRY
         LA    R15,08(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR062            YES, ERROR
         B     PRMDATE4            NO, LOOP
PRMDATE5 MVC   0(04,R15),DATES     SAVE NEW START DATE ENTRY
         MVC   4(04,R15),DATEE     SAVE NEW END   DATE ENTRY
         MVI   08(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                              PRMDTT                                 *
*                                                                     *
*        VALIDATE AND CONVERT DATES                                   *
*                                                                     *
*        R1 ON ENTRY POINTS TO THE INPUT DATE                         *
*                                                                     *
*        THE FOLLOWING FORMATS ARE SUPPORTED:                         *
*                                                                     *
*                                                                     *
*        YY.DDD                                                       *
*        YYYY.DDD                                                     *
*        MM/DD/YY                                                     *
*        YYYY/MM/DD                                                   *
*                                                                     *
*        ON EXIT:                                                     *
*                                                                     *
*        R1   POINTS PAST THE INPUT DATE                              *
*        R15  CONTAINS THE RETURN CODE                                *
*             00 - CONVERSION OK                                      *
*             08 - INVALID DATE                                       *
*                                                                     *
*        THE FIELD DATEJUL CONTAINS THE VALIDATED AND CONVERTED       *
*        DATE IN THE FORM YYYYDDDS                                    *
*                                                                     *
***********************************************************************
PRMDTT   STM   R0,R15,SAVEPRMD     SAVE REGISTERS
         LR    R7,R1               SAVE START OF DATE ADDRESS
         CLI   2(R7),C'.'          CHECK FOR JULIAN YY.DDD
         BE    PRMDTT1             YES, BRANCH
         CLI   4(R7),C'.'          CHECK FOR JULIAN YYYY.DDD
         BE    PRMDTT2             YES, BRANCH
         CLI   2(R7),C'/'          CHECK FOR GREGORIAN MM/DD/YY
         BE    PRMDTT3             YES, BRANCH
         CLI   4(R7),C'/'          CHECK FOR GREGORIAN YYYY/MM/DD
         BE    PRMDTT4             YES, BRANCH
         B     PRMDTTE             NO, ERROR
         SPACE 3
***********************************************************************
*        VALIDATE AND CONVERT DATE IN FORM YY.DDD                     *
***********************************************************************
PRMDTT1  CLI   6(R7),C' '          END OF DATE
         BE    PRMDTT1A            YES, BRANCH
         CLI   6(R7),C':'          END OF DATE
         BE    PRMDTT1A            YES, BRANCH
         B     PRMDTTE             NO, ERROR
PRMDTT1A MVC   DATEWORK(2),=C'19'  ASSUME 20TH CENTURY
         CLC   0(2,R7),=C'50'      SEE IF YEAR GT 50
         BH    PRMDTT1B            YES, 20TH CENTURY
         MVC   DATEWORK(2),=C'20'  ASSUME 21TH CENTURY
PRMDTT1B MVC   DATEWORK+2(2),0(R7) SAVE YY
         MVC   DATEWORK+4(3),3(R7) SAVE DDD
         LA    R14,7               SET LENGTH TO 7
         LA    R15,DATEWORK        POINT TO START OF YEAR
PRMDTT1C CLI   0(R15),C'0'         TEST FOR LESS THAN ZERO
         BL    PRMDTTE             YES, ERROR
         CLI   0(R15),C'9'         TEST FOR GT NINE
         BH    PRMDTTE             YES, ERROR
         LA    R15,1(,R15)         INDEX TO NEXT CHAR
         BCT   R14,PRMDTT1C        LOOP
PRMDTT1D PACK  DATEJUL,DATEWORK(7) PACK DATE
         CALL  DATERTN,(JG,DATEJUL,DATEGREG) CONVERT DATE
         LTR   R15,R15             TEST RETURN CODE
         BNZ   PRMDTTE             NOT ZERO, INVALID DATE
         LA    R1,6(,R7)           POINT PAST DATE
         B     PRMDTTOK            GET OUT
         SPACE 3
***********************************************************************
*        VALIDATE AND CONVERT DATE IN FORM YYYY.DDD                   *
***********************************************************************
PRMDTT2  CLI   8(R7),C' '          END OF DATE
         BE    PRMDTT2A            YES, BRANCH
         CLI   8(R7),C':'          END OF DATE
         BE    PRMDTT2A            YES, BRANCH
         B     PRMDTTE             NO, ERROR
PRMDTT2A MVC   DATEWORK+0(4),0(R7) SAVE YYYY
         MVC   DATEWORK+4(3),5(R7) SAVE DDD
         LA    R14,7               SET LENGTH TO 7
         LA    R1,DATEWORK         POINT TO START OF YEAR
PRMDTT2B CLI   0(R1),C'0'          TEST FOR LESS THAN ZERO
         BL    PRMDTTE             YES, ERROR
         CLI   0(R1),C'9'          TEST FOR GT NINE
         BH    PRMDTTE             YES, ERROR
         LA    R1,1(,R1)           INDEX TO NEXT CHAR
         BCT   R14,PRMDTT2B        LOOP
PRMDTT2C PACK  DATEJUL,DATEWORK(7) PACK DATE
         CALL  DATERTN,(JG,DATEJUL,DATEGREG) CONVERT DATE
         LTR   R15,R15             TEST RETURN CODE
         BNZ   PRMDTTE             NOT ZERO, INVALID DATE
         LA    R1,8(,R7)           POINT PAST DATE
         B     PRMDTTOK            GET OUT
         SPACE 3
***********************************************************************
*        VALIDATE AND CONVERT DATE IN FORM MM/DD/YY                   *
***********************************************************************
PRMDTT3  CLI   8(R7),C' '          END OF DATE
         BE    PRMDTT3A            YES, BRANCH
         CLI   8(R7),C':'          END OF DATE
         BE    PRMDTT3A            YES, BRANCH
         B     PRMDTTE             NO, ERROR
PRMDTT3A MVC   DATEWORK(2),=C'19'  ASSUME 20TH CENTURY
         CLC   6(2,R7),=C'50'      SEE IF YEAR GT 50
         BH    PRMDTT3B            YES, 20TH CENTURY
         MVC   DATEWORK(2),=C'20'  ASSUME 21TH CENTURY
PRMDTT3B MVC   DATEWORK+2(2),6(R7) SAVE YY
         MVC   DATEWORK+4(2),0(R7) SAVE MM
         MVC   DATEWORK+6(2),3(R7) SAVE DD
         LA    R14,8               SET LENGTH TO 8
         LA    R15,DATEWORK        POINT TO START OF YEAR
PRMDTT3C CLI   0(R15),C'0'         TEST FOR LESS THAN ZERO
         BL    PRMDTTE             YES, ERROR
         CLI   0(R15),C'9'         TEST FOR GT NINE
         BH    PRMDTTE             YES, ERROR
         LA    R15,1(,R15)         INDEX TO NEXT CHAR
         BCT   R14,PRMDTT3C        LOOP
PRMDTT3D PACK  DATEGREG,DATEWORK(8) PACK DATE
         CALL  DATERTN,(GJ,DATEGREG,DATEJUL) CONVERT DATE
         LTR   R15,R15             TEST RETURN CODE
         BNZ   PRMDTTE             NOT ZERO, INVALID DATE
         LA    R1,8(,R7)           POINT PAST DATE
         B     PRMDTTOK            GET OUT
         SPACE 3
***********************************************************************
*        VALIDATE AND CONVERT DATE IN FORM YYYY/MM/DD                 *
***********************************************************************
PRMDTT4  CLI   10(R7),C' '         END OF DATE
         BE    PRMDTT4A            YES, BRANCH
         CLI   10(R7),C':'         END OF DATE
         BE    PRMDTT4A            YES, BRANCH
         B     PRMDTTE             NO, ERROR
PRMDTT4A MVC   DATEWORK+0(4),0(R7) SAVE YYYY
         MVC   DATEWORK+4(2),5(R7) SAVE MM
         MVC   DATEWORK+6(2),8(R7) SAVE DD
         LA    R14,8               SET LENGTH TO 8
         LA    R15,DATEWORK        POINT TO START OF YEAR
PRMDTT4B CLI   0(R15),C'0'         TEST FOR LESS THAN ZERO
         BL    PRMDTTE             YES, ERROR
         CLI   0(R15),C'9'         TEST FOR GT NINE
         BH    PRMDTTE             YES, ERROR
         LA    R15,1(,R15)         INDEX TO NEXT CHAR
         BCT   R14,PRMDTT4B        LOOP
PRMDTT4C PACK  DATEGREG,DATEWORK(8) PACK DATE
         CALL  DATERTN,(GJ,DATEGREG,DATEJUL) CONVERT DATE
         LTR   R15,R15             TEST RETURN CODE
         BNZ   PRMDTTE             NOT ZERO, INVALID DATE
         LA    R1,10(,R7)          POINT PAST DATE
         B     PRMDTTOK            GET OUT
***********************************************************************
*        GOOD DATE                                                    *
***********************************************************************
PRMDTTOK LA    R15,0               SET RETURN CODE TO ZERO
         B     PRMDTTR             GET OUT
***********************************************************************
*        INVALID DATE                                                 *
***********************************************************************
PRMDTTE  LA    R15,8               SET RETURN CODE TO EIGHT
PRMDTTR  LM    R2,R14,SAVEPRMD+8   RESTORE REGS EXCEPT R0, R1, AND R15
         BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY START TIME RANGE                      *
*                                                                     *
*        STIME=HH.MM:HH.MM                                            *
*                                                                     *
*        THE FIRST HH.MM IS THE START HOUR AND MINUTE TO SELECT       *
*        AND THE OPTIONAL SECOND HH.MM IS THE END HOUR AND            *
*        MINUTE FOR SELECTION BASED UPON THE TIME OF DAY WHEN THE     *
*        STEP BEGAN EXECUTION. IF ONLY ONE TIME VALUE IS ENTERED      *
*        THE TIME SELECTED IS ANY STEP START TIME GREATER THAN OR     *
*        EQUAL TO THAT TIME.                                          *
*                                                                     *
***********************************************************************
PRMSTME  OI    SWITCH,SELSTIME     TURN ON SELECT TIME INDICATOR
         MVC   VALTIME(5),=CL5'00.00' INITIALIZE TIME
         MVC   VALTIME+5(5),=CL5'99.99' ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   2(R7),C'.'          CHECK FOR HOUR AND MIN SEPARATOR
         BNE   ERROR014            NOT THERE, ERROR
         LA    R14,2               SET LENGTH TO 2
         LR    R1,R7               SAVE POINTER TO BEGIN HOUR
PRMSTME1 CLI   0(R1),C'0'          TEST FOR LESS THAN ZERO
         BL    ERROR014            YES, ERROR
         CLI   0(R1),C'9'          TEST FOR GT NINE
         BH    ERROR014            YES, ERROR
         LA    R1,1(,R1)           INDEX TO NEXT CHAR
         BCT   R14,PRMSTME1        LOOP
         LA    R14,2               SET LENGTH TO 2
         LA    R1,3(R7)            SAVE POINTER TO BEGIN MIN
PRMSTME2 CLI   0(R1),C'0'          TEST FOR LESS THAN ZERO
         BL    ERROR014            YES, ERROR
         CLI   0(R1),C'9'          TEST FOR GT NINE
         BH    ERROR014            YES, ERROR
         LA    R1,1(,R1)           INDEX TO NEXT CHAR
         BCT   R14,PRMSTME2        LOOP
         MVC   VALTIME(5),0(R7)    SAVE BEGIN TIME
         CLI   5(R7),C' '          ANY ENDING TIME?
         BE    PRMSTME6            NO, END OF TIME
         CLI   5(R7),C':'          PROPER SEPARATOR FOR TIME
         BNE   ERROR015            NO, ERROR
PRMSTME3 LA    R7,6(,R7)           INCREMENT PAST BEGIN TIME
         CLI   2(R7),C'.'          CHECK FOR HOUR AND MIN SEPARATOR
         BNE   ERROR016            NOT THERE, ERROR
         LA    R14,2               SET LENGTH TO 2
         LR    R1,R7               SAVE POINTER TO END HOUR
PRMSTME4 CLI   0(R1),C'0'          TEST FOR LESS THAN ZERO
         BL    ERROR016            YES, ERROR
         CLI   0(R1),C'9'          TEST FOR GT NINE
         BH    ERROR016            YES, ERROR
         LA    R1,1(,R1)           INDEX TO NEXT CHAR
         BCT   R14,PRMSTME4        LOOP
         LA    R14,2               SET LENGTH TO 2
         LA    R1,3(R7)            SAVE POINTER TO END MIN
PRMSTME5 CLI   0(R1),C'0'          TEST FOR LESS THAN ZERO
         BL    ERROR016            YES, ERROR
         CLI   0(R1),C'9'          TEST FOR GT NINE
         BH    ERROR016            YES, ERROR
         LA    R1,1(,R1)           INDEX TO NEXT CHAR
         BCT   R14,PRMSTME5        LOOP
         MVC   VALTIME+5(5),0(R7)  SAVE END TIME
PRMSTME6 MVC   WORK(2),VALTIME     MOVE BEGIN HOUR TO WORK
         PACK  DOUBLE,WORK(2)      CONVERT TO PACKED
         CVB   R14,DOUBLE          CONVERT TO BINARY
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         M     R14,=F'360000'      MULTIPLY BY HUNDRETHS PER HOUR
         LR    R1,R15              SAVE VALUE
         MVC   WORK(2),VALTIME+3   MOVE BEGIN MIN TO WORK
         PACK  DOUBLE,WORK(2)      CONVERT TO PACKED
         CVB   R14,DOUBLE          CONVERT TO BINARY
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         M     R14,=F'6000'        MULTIPLY BY HUNDRETHS PER MIN
         AR    R1,R15              ADD HUNDRETHS FOR HRS AND MINS
         ST    R1,TIMES            SAVE START TIME
         MVC   WORK(2),VALTIME+5   MOVE END HOUR TO WORK
         PACK  DOUBLE,WORK(2)      CONVERT TO PACKED
         CVB   R14,DOUBLE          CONVERT TO BINARY
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         M     R14,=F'360000'      MULTIPLY BY HUNDRETHS PER HOUR
         LR    R1,R15              SAVE VALUE
         MVC   WORK(2),VALTIME+8   MOVE END MIN TO WORK
         PACK  DOUBLE,WORK(2)      CONVERT TO PACKED
         CVB   R14,DOUBLE          CONVERT TO BINARY
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         M     R14,=F'6000'        MULTIPLY BY HUNDRETHS PER MIN
         AR    R1,R15              ADD HUNDRETHS FOR HRS AND MINS
         ST    R1,TIMEE            SAVE END TIME
         ICM   R15,B'1111',STIMETBL LOAD ADDRESS OF TIME TABLE
         BNZ   PRMSTME7            NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=8008         GET ROOM FOR 1000 TIME ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,STIMETBL        STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMSTME7 SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMSTME8 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMSTME9            YES, GO SAVE NEW ENTRY
         LA    R15,08(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR056            YES, ERROR
         B     PRMSTME8            NO, LOOP
PRMSTME9 MVC   0(04,R15),TIMES     SAVE NEW START TIME ENTRY
         MVC   4(04,R15),TIMEE     SAVE NEW END   TIME ENTRY
         MVI   08(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY STOP TIME RANGE                       *
*                                                                     *
*        ETIME=HH.MM:HH.MM                                            *
*                                                                     *
*        THE FIRST HH.MM IS THE END HOUR AND MINUTE TO SELECT         *
*        AND THE OPTIONAL SECOND HH.MM IS THE END HOUR AND            *
*        MINUTE FOR SELECTION BASED UPON THE TIME OF DAY WHEN THE     *
*        STEP ENDED EXECUTION. IF ONLY ONE TIME VALUE IS ENTERED      *
*        THE TIME SELECTED IS ANY STEP END TIME GREATER THAN OR       *
*        EQUAL TO THAT TIME.                                          *
*                                                                     *
***********************************************************************
PRMETME  OI    SWITCH+6,SELETIME   TURN ON SELECT TIME INDICATOR
         MVC   VALTIME(5),=CL5'00.00' INITIALIZE TIME
         MVC   VALTIME+5(5),=CL5'99.99' ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   2(R7),C'.'          CHECK FOR HOUR AND MIN SEPARATOR
         BNE   ERROR017            NOT THERE, ERROR
         LA    R14,2               SET LENGTH TO 2
         LR    R1,R7               SAVE POINTER TO BEGIN HOUR
PRMETME1 CLI   0(R1),C'0'          TEST FOR LESS THAN ZERO
         BL    ERROR017            YES, ERROR
         CLI   0(R1),C'9'          TEST FOR GT NINE
         BH    ERROR017            YES, ERROR
         LA    R1,1(,R1)           INDEX TO NEXT CHAR
         BCT   R14,PRMETME1        LOOP
         LA    R14,2               SET LENGTH TO 2
         LA    R1,3(R7)            SAVE POINTER TO BEGIN MIN
PRMETME2 CLI   0(R1),C'0'          TEST FOR LESS THAN ZERO
         BL    ERROR017            YES, ERROR
         CLI   0(R1),C'9'          TEST FOR GT NINE
         BH    ERROR017            YES, ERROR
         LA    R1,1(,R1)           INDEX TO NEXT CHAR
         BCT   R14,PRMETME2        LOOP
         MVC   VALTIME(5),0(R7)    SAVE BEGIN TIME
         CLI   5(R7),C' '          ANY ENDING TIME?
         BE    PRMETME6            NO, END OF TIME
         CLI   5(R7),C':'          PROPER SEPARATOR FOR TIME
         BNE   ERROR018            NO, ERROR
PRMETME3 LA    R7,6(,R7)           INCREMENT PAST BEGIN TIME
         CLI   2(R7),C'.'          CHECK FOR HOUR AND MIN SEPARATOR
         BNE   ERROR019            NOT THERE, ERROR
         LA    R14,2               SET LENGTH TO 2
         LR    R1,R7               SAVE POINTER TO END HOUR
PRMETME4 CLI   0(R1),C'0'          TEST FOR LESS THAN ZERO
         BL    ERROR019            YES, ERROR
         CLI   0(R1),C'9'          TEST FOR GT NINE
         BH    ERROR019            YES, ERROR
         LA    R1,1(,R1)           INDEX TO NEXT CHAR
         BCT   R14,PRMETME4        LOOP
         LA    R14,2               SET LENGTH TO 2
         LA    R1,3(R7)            SAVE POINTER TO END MIN
PRMETME5 CLI   0(R1),C'0'          TEST FOR LESS THAN ZERO
         BL    ERROR019            YES, ERROR
         CLI   0(R1),C'9'          TEST FOR GT NINE
         BH    ERROR019            YES, ERROR
         LA    R1,1(,R1)           INDEX TO NEXT CHAR
         BCT   R14,PRMETME5        LOOP
         MVC   VALTIME+5(5),0(R7)  SAVE END TIME
PRMETME6 MVC   WORK(2),VALTIME     MOVE BEGIN HOUR TO WORK
         PACK  DOUBLE,WORK(2)      CONVERT TO PACKED
         CVB   R14,DOUBLE          CONVERT TO BINARY
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         M     R14,=F'360000'      MULTIPLY BY HUNDRETHS PER HOUR
         LR    R1,R15              SAVE VALUE
         MVC   WORK(2),VALTIME+3   MOVE BEGIN MIN TO WORK
         PACK  DOUBLE,WORK(2)      CONVERT TO PACKED
         CVB   R14,DOUBLE          CONVERT TO BINARY
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         M     R14,=F'6000'        MULTIPLY BY HUNDRETHS PER MIN
         AR    R1,R15              ADD HUNDRETHS FOR HRS AND MINS
         ST    R1,TIMES            SAVE END TIME
         MVC   WORK(2),VALTIME+5   MOVE END HOUR TO WORK
         PACK  DOUBLE,WORK(2)      CONVERT TO PACKED
         CVB   R14,DOUBLE          CONVERT TO BINARY
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         M     R14,=F'360000'      MULTIPLY BY HUNDRETHS PER HOUR
         LR    R1,R15              SAVE VALUE
         MVC   WORK(2),VALTIME+8   MOVE END MIN TO WORK
         PACK  DOUBLE,WORK(2)      CONVERT TO PACKED
         CVB   R14,DOUBLE          CONVERT TO BINARY
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         M     R14,=F'6000'        MULTIPLY BY HUNDRETHS PER MIN
         AR    R1,R15              ADD HUNDRETHS FOR HRS AND MINS
         ST    R1,TIMEE            SAVE END TIME
         ICM   R15,B'1111',ETIMETBL LOAD ADDRESS OF TIME TABLE
         BNZ   PRMETME7            NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=8008         GET ROOM FOR 1000 TIME ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,ETIMETBL        STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMETME7 SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMETME8 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMETME9            YES, GO SAVE NEW ENTRY
         LA    R15,08(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR020            YES, ERROR
         B     PRMETME8            NO, LOOP
PRMETME9 MVC   0(04,R15),TIMES     SAVE NEW END TIME ENTRY
         MVC   4(04,R15),TIMEE     SAVE NEW END   TIME ENTRY
         MVI   08(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY SYSTEM ID                             *
*                                                                     *
*        SYSTEM=SSSS                                                  *
*                                                                     *
*        WHERE SSSS IS THE SMF SYSTEM ID.  THIS FIELD ONLY HAS        *
*        MEANING IF THE INPUT SMF DATA HAS COME FROM MULTIPLE         *
*        MVS SYSTEMS.                                                 *
*                                                                     *
***********************************************************************
PRMSYS   OI    SWITCH,SELSYSID     TURN ON SELECT SYSID INDICATOR
         MVC   VALSYSID,=CL4' '    INITIALIZE SYSID
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE SYSID NOT BLANK
         BE    ERROR021            NOT THERE, ERROR
         MVC   VALSYSID(4),0(R7)   SAVE SYS ID
PRMSYS1  ICM   R15,B'1111',SYSIDTBL LOAD ADDRESS OF SYSID TABLE
         BNZ   PRMSYS2             NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=4004         GET ROOM FOR 1000 SYSID ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,SYSIDTBL        STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMSYS2  SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMSYS3  CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMSYS4             YES, GO SAVE NEW ENTRY
         LA    R15,04(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR064            YES, ERROR
         B     PRMSYS3             NO, LOOP
PRMSYS4  MVC   0(04,R15),VALSYSID  SAVE NEW ENTRY
         MVI   04(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY PROCSTEP NAME                         *
*                                                                     *
*        PROCSTEP=SSSSSSSS                                            *
*                                                                     *
*        INSURE THAT THE PROC STEP NAME IS 1 TO 8 CHARACTERS LONG     *
*        SAVING THE LENGTH FOR A GENERIC COMPARE.                     *
*                                                                     *
***********************************************************************
PRMPST   OI    SWITCH+4,SELPSTEP   TURN ON SELECT PROC STEP IND
         MVC   VALPSTEP(2),=X'0000' INITIALIZE PROC STEP
         MVC   VALPSTEP+2(8),=CL8' '  NAME ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE PROC STEP NAME NOT BLANK
         BE    ERROR044            NOT THERE, ERROR
         SLR   R15,R15             SET LENGTH TO 0
PRMPST1  CLI   0(R7),C' '          END OF PROC STEP NAME
         BE    PRMPST2             YES, BRANCH
         LA    R7,1(,R7)           INDEX TO NEXT CHAR
         LA    R15,1(,R15)         ADD 1 TO LENGTH
         B     PRMPST1             LOOP
PRMPST2  CH    R15,=H'8'           SEE IF EXCEEDS MAX LENGTH
         BH    ERROR044            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         STH   R15,VALPSTEP        SAVE LENGTH OF PROC STEP NAME
         MVC   VALPSTEP+2(8),0(R1) SAVE PROC STEP NAME
PRMPST3  ICM   R15,B'1111',PSTEPTBL LOAD ADDRESS OF PROC STEP TABLE
         BNZ   PRMPST4             NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=10010        GET ROOM FOR 1000 PSTEP ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,PSTEPTBL        STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMPST4  SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMPST5  CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMPST6             YES, GO SAVE NEW ENTRY
         LA    R15,10(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR065            YES, ERROR
         B     PRMPST5             NO, LOOP
PRMPST6  MVC   0(10,R15),VALPSTEP  SAVE NEW ENTRY
         MVI   10(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY JOBSTEP NAME                          *
*                                                                     *
*        JOBSTEP=SSSSSSSS                                             *
*                                                                     *
*        INSURE THAT THE JOB STEP NAME IS 1 TO 8 CHARACTERS LONG      *
*        SAVING THE LENGTH FOR A GENERIC COMPARE.                     *
*                                                                     *
***********************************************************************
PRMJST   OI    SWITCH+4,SELJSTEP   TURN ON SELECT JOB STEP IND
         MVC   VALJSTEP(2),=X'0000' INITIALIZE JOB STEP
         MVC   VALJSTEP+2(8),=CL8' '  NAME ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE JOB STEP NAME NOT BLANK
         BE    ERROR045            NOT THERE, ERROR
         SLR   R15,R15             SET LENGTH TO 0
PRMJST1  CLI   0(R7),C' '          END OF JOB STEP NAME
         BE    PRMJST2             YES, BRANCH
         LA    R7,1(,R7)           INDEX TO NEXT CHAR
         LA    R15,1(,R15)         ADD 1 TO LENGTH
         B     PRMJST1             LOOP
PRMJST2  CH    R15,=H'8'           SEE IF EXCEEDS MAX LENGTH
         BH    ERROR045            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         STH   R15,VALJSTEP        SAVE LENGTH OF JOB STEP NAME
         MVC   VALJSTEP+2(8),0(R1) SAVE JOB STEP NAME
PRMJST3  ICM   R15,B'1111',JSTEPTBL LOAD ADDRESS OF JOB STEP TABLE
         BNZ   PRMJST4             NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=10010        GET ROOM FOR 1000 JSTEP ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,JSTEPTBL        STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMJST4  SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMJST5  CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMJST6             YES, GO SAVE NEW ENTRY
         LA    R15,10(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR066            YES, ERROR
         B     PRMJST5             NO, LOOP
PRMJST6  MVC   0(10,R15),VALJSTEP  SAVE NEW ENTRY
         MVI   10(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY PROGRAM NAME                          *
*                                                                     *
*        PROGRAM=PPPPPPPP                                             *
*                                                                     *
*        INSURE THAT THE PROGRAM NAME IS 1 TO 8 CHARACTERS LONG       *
*        SAVING THE LENGTH FOR A GENERIC COMPARE.                     *
*                                                                     *
***********************************************************************
PRMPGM   OI    SWITCH,SELPGM       TURN ON SELECT PGM INDICATOR
         MVC   VALPGM(2),=X'0000'  INITIALIZE PROGRAM
         MVC   VALPGM+2(8),=CL8' '    NAME ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE PGM NAME NOT BLANK
         BE    ERROR037            NOT THERE, ERROR
         SLR   R15,R15             SET LENGTH TO 0
PRMPGM1  CLI   0(R7),C' '          END OF PROGRAM NAME
         BE    PRMPGM2             YES, BRANCH
         LA    R7,1(,R7)           INDEX TO NEXT CHAR
         LA    R15,1(,R15)         ADD 1 TO LENGTH
         B     PRMPGM1             LOOP
PRMPGM2  CH    R15,=H'8'           SEE IF EXCEEDS MAX LENGTH
         BH    ERROR037            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         STH   R15,VALPGM          SAVE LENGTH OF PROGRAM NAME
         MVC   VALPGM+2(8),0(R1)   SAVE PROGRAM NAME
PRMPGM3  ICM   R15,B'1111',PGMTBL  LOAD ADDRESS OF PGM NAME TABLE
         BNZ   PRMPGM4             NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=10010        GET ROOM FOR 1000 PGM NAME ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,PGMTBL          STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMPGM4  SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMPGM5  CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMPGM6             YES, GO SAVE NEW ENTRY
         LA    R15,10(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR067            YES, ERROR
         B     PRMPGM5             NO, LOOP
PRMPGM6  MVC   0(10,R15),VALPGM    SAVE NEW ENTRY
         MVI   10(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY SECURITY USERID                       *
*                                                                     *
*        USERID=UUUUUUUU                                              *
*                                                                     *
*        INSURE THAT THE USERID NAME IS 1 TO 8 CHARACTERS LONG        *
*        SAVING THE LENGTH FOR A GENERIC COMPARE.                     *
*                                                                     *
***********************************************************************
PRMUID   OI    SWITCH+1,SELUID     TURN ON SELECT USERID INDICATOR
         MVC   VALUID(2),=X'0000'  INITIALIZE SECURITY
         MVC   VALUID+2(8),=CL8' '    USERID ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE USERID NOT BLANK
         BE    ERROR039            NOT THERE, ERROR
         SLR   R15,R15             SET LENGTH TO 0
PRMUID1  CLI   0(R7),C' '          END OF USERID
         BE    PRMUID2             YES, BRANCH
         LA    R7,1(,R7)           INDEX TO NEXT CHAR
         LA    R15,1(,R15)         ADD 1 TO LENGTH
         B     PRMUID1             LOOP
PRMUID2  CH    R15,=H'8'           SEE IF EXCEEDS MAX LENGTH
         BH    ERROR039            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         STH   R15,VALUID          SAVE LENGTH OF USERID
         MVC   VALUID+2(8),0(R1)   SAVE USERID
PRMUID3  ICM   R15,B'1111',UIDTBL  LOAD ADDRESS OF UID NAME TABLE
         BNZ   PRMUID4             NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=10010        GET ROOM FOR 1000 UID NAME ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,UIDTBL          STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMUID4  SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMUID5  CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMUID6             YES, GO SAVE NEW ENTRY
         LA    R15,10(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR068            YES, ERROR
         B     PRMUID5             NO, LOOP
PRMUID6  MVC   0(10,R15),VALUID    SAVE NEW ENTRY
         MVI   10(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY CONDITION CODE                        *
*                                                                     *
*        CCODE=CCCCC                                                  *
*                                                                     *
*        INSURE THAT THE CONDITION CODE IS 1 TO 5 CHARACTERS LONG     *
*        SAVING THE LENGTH FOR A GENERIC COMPARE.                     *
*                                                                     *
***********************************************************************
PRMCC    OI    SWITCH+1,SELCC      TURN ON SELECT CCODE INDICATOR
         MVC   VALCC(2),=X'0000'   INITIALIZE CONDITION
         MVC   VALCC+2(5),=CL5' '     CODE ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE CCODE NOT BLANK
         BE    ERROR041            NOT THERE, ERROR
         SLR   R15,R15             SET LENGTH TO 0
PRMCC1   CLI   0(R7),C' '          END OF CCODE
         BE    PRMCC2              YES, BRANCH
         LA    R7,1(,R7)           INDEX TO NEXT CHAR
         LA    R15,1(,R15)         ADD 1 TO LENGTH
         B     PRMCC1              LOOP
PRMCC2   CH    R15,=H'5'           SEE IF EXCEEDS MAX LENGTH
         BH    ERROR041            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         STH   R15,VALCC           SAVE LENGTH OF CCODE
         MVC   VALCC+2(5),0(R1)    SAVE CCODE
PRMCC3   ICM   R15,B'1111',CCTBL   LOAD ADDRESS OF CCODE TABLE
         BNZ   PRMCC4              NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=7007         GET ROOM FOR 1000 CCODE ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,CCTBL           STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMCC4   SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMCC5   CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMCC6              YES, GO SAVE NEW ENTRY
         LA    R15,07(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR069            YES, ERROR
         B     PRMCC5              NO, LOOP
PRMCC6   MVC   0(07,R15),VALCC     SAVE NEW ENTRY
         MVI   07(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY ELAPSED TIME                          *
*                                                                     *
*        ELAPTIME>HHH.MM.SS                                           *
*        ELAPTIME<HHH.MM.SS                                           *
*                                                                     *
*        INSURE THAT THE ELAPSED TIME FIELD IS IN THE CORRECT         *
*        FORMAT WITH HOURS NOT EXCEEDING 999, MINUTES NOT             *
*        EXCEEDING 59, AND SECONDS NOT EXCEEDING 59.  THE             *
*        FIRST NUMBER ENTERED IS HOURS, THE SECOND MINUTES,           *
*        AND THE LAST SECONDS BUT MAY BE ENTERED AS A ZERO            *
*        VALUE TO MEET THE FORMAT REQUIREMENTS.                       *
*                                                                     *
***********************************************************************
PRMET    CLI   0(R7),C' '          MAKE SURE NOT BLANK
         BE    ERROR027            NOT THERE, ERROR
         CLI   0(R7),C'>'          SEE IF GE OPERATOR
         BE    PRMET1              YES, BRANCH
         CLI   0(R7),C'<'          SEE IF LE OPERATOR
         BE    PRMET2              YES, BRANCH
         B     ERROR032            NO, ERROR
PRMET1   OI    SWITCH+1,SELETGE    TURN ON SELECT ELAPTIME GE INDICATOR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         BAL   R14,PARMTM          GO PROCESS TIME
         LTR   R15,R15             TEST RETURN CODE
         BNZ   ERROR027            NOT ZERO, ERROR
         MVC   VALETGE,TMOUT       SAVE CONVERTED TIME
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
PRMET2   OI    SWITCH+1,SELETLE    TURN ON SELECT ELAPTIME LE INDICATOR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         BAL   R14,PARMTM          GO PROCESS TIME
         LTR   R15,R15             TEST RETURN CODE
         BNZ   ERROR027            NOT ZERO, ERROR
         MVC   VALETLE,TMOUT       SAVE CONVERTED TIME
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY BLOCK COUNT                           *
*                                                                     *
*        EXCP>NNNNNNNNN                                               *
*        EXCP<NNNNNNNNN                                               *
*                                                                     *
*        INSURE THAT THE BLOCK COUNT IS A NUMERIC FIELD FROM          *
*        1 TO 9 DIGITS LONG.                                          *
*                                                                     *
***********************************************************************
PRMBC    CLI   0(R7),C' '          MAKE SURE NOT BLANK
         BE    ERROR040            NOT THERE, ERROR
         CLI   0(R7),C'>'          SEE IF GE OPERATOR
         BE    PRMBC1              YES, BRANCH
         CLI   0(R7),C'<'          SEE IF LE OPERATOR
         BE    PRMBC2              YES, BRANCH
         B     ERROR032            NO, ERROR
PRMBC1   OI    SWITCH+2,SELBCGE    TURN ON SELECT BLK CNT GE INDICATOR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,9+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMBC1A  CLI   0(R7),C' '          END OF COUNT?
         BE    PRMBC1B             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR040            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR040            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMBC1A         LOOP
         B     ERROR040            TOO LONG ERROR
PRMBC1B  BCTR  R15,0               MAKE LENGTH OF BLK COUNT REL ZERO
         EX    R15,PACKINDX        PACK BLOCK COUNT
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALBCGE         SAVE BLOCK COUNT GE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
PRMBC2   OI    SWITCH+2,SELBCLE    TURN ON SELECT BLK CNT GE INDICATOR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,9+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMBC2A  CLI   0(R7),C' '          END OF BLOCK COUNT?
         BE    PRMBC2B             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR040            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR040            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMBC2A         LOOP
         B     ERROR040            TOO LONG ERROR
PRMBC2B  BCTR  R15,0               MAKE LENGTH OF BLOCK COUNT REL ZERO
         EX    R15,PACKINDX        PACK BLOCK COUNT
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALBCLE         SAVE BLOCK COUNT LE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                   SELECT BY CPU TIME                                *
*                                                                     *
*        CPUTIME>NNNNNN                                               *
*        CPUTIME<NNNNNN                                               *
*                                                                     *
*        INSURE THAT THE CPU TIME (IN MINUTES) IS A NUMERIC FIELD     *
*        FROM 1 TO 6 DIGITS LONG                                      *
*                                                                     *
***********************************************************************
PRMCT    CLI   0(R7),C' '          MAKE SURE NOT BLANK
         BE    ERROR028            NOT THERE, ERROR
         CLI   0(R7),C'>'          SEE IF GE OPERATOR
         BE    PRMCT1              YES, BRANCH
         CLI   0(R7),C'<'          SEE IF LE OPERATOR
         BE    PRMCT2              YES, BRANCH
         B     ERROR032            NO, ERROR
PRMCT1   OI    SWITCH+1,SELCTGE    TURN ON SELECT CPUTIME GE INDICATOR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMCT1A  CLI   0(R7),C' '          END OF TIME?
         BE    PRMCT1B             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR028            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR028            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMCT1A         LOOP
         B     ERROR028            TOO LONG ERROR
PRMCT1B  BCTR  R15,0               MAKE LENGTH OF TIME REL ZERO
         EX    R15,PACKINDX        PACK TIME
         CVB   R14,DOUBLE          CONVERT TO BINARY
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         M     R14,=F'6000'        CONVERT MINUTES TO SEC/100
         ST    R15,VALCTGE         SAVE CPU TIME GE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
PRMCT2   OI    SWITCH+1,SELCTLE    TURN ON SELECT CPUTIME LE INDICATOR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMCT2A  CLI   0(R7),C' '          END OF TIME?
         BE    PRMCT2B             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR028            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR028            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMCT2A         LOOP
         B     ERROR028            TOO LONG ERROR
PRMCT2B  BCTR  R15,0               MAKE LENGTH OF TIME REL ZERO
         EX    R15,PACKINDX        PACK TIME
         CVB   R14,DOUBLE          CONVERT TO BINARY
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         M     R14,=F'6000'        CONVERT MINUTES TO SEC/100
         ST    R15,VALCTLE         SAVE CPU TIME LE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                   SELECT BY REGION BELOW 16M                        *
*                                                                     *
*        REGIONB>NNNNN                                                *
*        REGIONB<NNNNN                                                *
*                                                                     *
*        INSURE THAT THE REGION SIZE BELOW (IN MEGABYTES) IS A        *
*        NUMERIC FIELD FROM 1 TO 5 DIGITS LONG                        *
*                                                                     *
***********************************************************************
PRMRB    CLI   0(R7),C' '          MAKE SURE NOT BLANK
         BE    ERROR038            NOT THERE, ERROR
         CLI   0(R7),C'>'          SEE IF GE OPERATOR
         BE    PRMRB1              YES, BRANCH
         CLI   0(R7),C'<'          SEE IF LE OPERATOR
         BE    PRMRB2              YES, BRANCH
         B     ERROR032            NO, ERROR
PRMRB1   OI    SWITCH+2,SELRBGE    TURN ON SELECT RGN BELOW GE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,5+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMRB1A  CLI   0(R7),C' '          END OF REGION BELOW?
         BE    PRMRB1B             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR038            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR038            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMRB1A         LOOP
         B     ERROR038            TOO LONG ERROR
PRMRB1B  BCTR  R15,0               MAKE LENGTH OF REGION BELOW REL ZERO
         EX    R15,PACKINDX        PACK REGION BELOW
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALRBGE         SAVE REGION BELOW GE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
PRMRB2   OI    SWITCH+2,SELRBLE    TURN ON SELECT RGN BELOW GE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,5+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMRB2A  CLI   0(R7),C' '          END OF REGION BELOW?
         BE    PRMRB2B             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR038            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR038            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMRB2A         LOOP
         B     ERROR038            TOO LONG ERROR
PRMRB2B  BCTR  R15,0               MAKE LENGTH OF RGN BELOW REL ZERO
         EX    R15,PACKINDX        PACK REGION BELOW
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALRBLE         SAVE REGION BELOW LE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                   SELECT BY REGION BELOW 16M                        *
*                                                                     *
*        REGIONA>NNNNN                                                *
*        REGIONA<NNNNN                                                *
*                                                                     *
*        INSURE THAT THE REGION SIZE ABOVE (IN MEGABYTES) IS A        *
*        NUMERIC FIELD FROM 1 TO 5 DIGITS LONG                        *
*                                                                     *
***********************************************************************
PRMRA    CLI   0(R7),C' '          MAKE SURE NOT BLANK
         BE    ERROR036            NOT THERE, ERROR
         CLI   0(R7),C'>'          SEE IF GE OPERATOR
         BE    PRMRA1              YES, BRANCH
         CLI   0(R7),C'<'          SEE IF LE OPERATOR
         BE    PRMRA2              YES, BRANCH
         B     ERROR032            NO, ERROR
PRMRA1   OI    SWITCH+2,SELRAGE    TURN ON SELECT RGN ABOVE GE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,5+1             LOAD MAXIMUM LENGTH+1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMRA1A  CLI   0(R7),C' '          END OF REGION ABOVE?
         BE    PRMRA1B             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR036            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR036            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMRA1A         LOOP
         B     ERROR036            TOO LONG ERROR
PRMRA1B  BCTR  R15,0               MAKE LENGTH OF REGION ABOVE REL ZERO
         EX    R15,PACKINDX        PACK REGION ABOVE
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALRAGE         SAVE REGION ABOVE GE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
PRMRA2   OI    SWITCH+2,SELRALE    TURN ON SELECT RGN ABOVE GE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,5+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMRA2A  CLI   0(R7),C' '          END OF REGION ABOVE?
         BE    PRMRA2B             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR036            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR036            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMRA2A         LOOP
         B     ERROR036            TOO LONG ERROR
PRMRA2B  BCTR  R15,0               MAKE LENGTH OF RGN ABOVE REL ZERO
         EX    R15,PACKINDX        PACK REGION ABOVE
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALRALE         SAVE REGION ABOVE LE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                   SELECT BY TAPE MOUNTS                             *
*                                                                     *
*        TAPES>NNNNNN                                                 *
*        TAPES<NNNNNN                                                 *
*                                                                     *
*        INSURE THAT THE NUMBER OF TAPE MOUNTS IS A NUMERIC FIELD     *
*        FROM 1 TO 6 DIGITS LONG                                      *
*                                                                     *
***********************************************************************
PRMNT    CLI   0(R7),C' '          MAKE SURE NOT BLANK
         BE    ERROR029            NOT THERE, ERROR
         CLI   0(R7),C'>'          SEE IF GE OPERATOR
         BE    PRMNT1              YES, BRANCH
         CLI   0(R7),C'<'          SEE IF LE OPERATOR
         BE    PRMNT2              YES, BRANCH
         B     ERROR032            NO, ERROR
PRMNT1   OI    SWITCH+1,SELMNTGE   TURN ON SELECT MOUNT GE INDICATOR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMNT1A  CLI   0(R7),C' '          END OF COUNT?
         BE    PRMNT1B             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR029            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR029            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMNT1A         LOOP
         B     ERROR029            TOO LONG ERROR
PRMNT1B  BCTR  R15,0               MAKE LENGTH OF COUNT REL ZERO
         EX    R15,PACKINDX        PACK MOUNT COUNT
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALMNTGE        SAVE MOUNT COUNT GE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
PRMNT2   OI    SWITCH+1,SELMNTLE   TURN ON SELECT MOUNT LE INDICATOR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMNT2A  CLI   0(R7),C' '          END OF COUNT?
         BE    PRMNT2B             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR029            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR029            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMNT2A         LOOP
         B     ERROR029            TOO LONG ERROR
PRMNT2B  BCTR  R15,0               MAKE LENGTH OF COUNT REL ZERO
         EX    R15,PACKINDX        PACK MOUNT COUNT
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALMNTLE        SAVE MOUNT COUNT LE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                   SELECT BY CPU PERCENT                             *
*                                                                     *
*        CPUPCT>NNN                                                   *
*        CPUPCT<NNN                                                   *
*                                                                     *
*        INSURE THAT THE PERCENT IS A NUMERIC FIELD FROM 1 TO 3       *
*        DIGITS LONG                                                  *
*                                                                     *
***********************************************************************
PRMCPP   CLI   0(R7),C' '          MAKE SURE NOT BLANK
         BE    ERROR034            NOT THERE, ERROR
         CLI   0(R7),C'>'          SEE IF GE OPERATOR
         BE    PRMCPP1             YES, BRANCH
         CLI   0(R7),C'<'          SEE IF LE OPERATOR
         BE    PRMCPP2             YES, BRANCH
         B     ERROR032            NO, ERROR
PRMCPP1  OI    SWITCH+2,SELCPPGE   TURN ON SELECT CPU PCT GE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,3+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMCPP1A CLI   0(R7),C' '          END OF PARM?
         BE    PRMCPP1B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR034            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR034            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMCPP1A        LOOP
         B     ERROR034            TOO LONG ERROR
PRMCPP1B BCTR R15,0                MAKE LENGTH OF CPU PCT REL ZERO
         EX    R15,PACKINDX        PACK PERCENT CPU
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALCPPGE        SAVE PERCENT CPU GE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
PRMCPP2  OI    SWITCH+2,SELCPPLE   TURN ON SELECT CPU PCT LE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,3+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMCPP2A CLI   0(R7),C' '          END OF PARM?
         BE    PRMCPP2B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR034            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR034            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMCPP2A        LOOP
         B     ERROR034            TOO LONG ERROR
PRMCPP2B BCTR R15,0                MAKE LENGTH OF PERCENT REL ZERO
         EX    R15,PACKINDX        PACK PERCENT CPU
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALCPPLE        SAVE PERCENT CPU LE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY JOB TYPE                              *
*                                                                     *
*        JOBTYPE=T/P                                                  *
*                                                                     *
*        INSURE THAT JOBTYPE = T/P (TEST/PRODUCTION)                  *
*                                                                     *
***********************************************************************
PRMTYP   OI    SWITCH+3,SELTYPE    TURN ON SELECT BY TYPE INDICATOR
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE TYPE NOT BLANK
         BE    ERROR042            NOT THERE, ERROR
         CLI   1(R7),C' '          MAKE SURE 1 CHARACTER JOB TYPE
         BNE   ERROR042            NO, ERROR
         CLI   0(R7),C'T'          SEE IF VALID VALUE
         BE    PRMTYP1             YES, BRANCH
         CLI   0(R7),C'P'          SEE IF VALID VALUE
         BNE   ERROR042            NO, ERROR
PRMTYP1  MVC   VALTYPE(1),0(R1)    SAVE JOB TYPE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     HONOR A STOP COUNT                              *
*                                                                     *
*        STOPAFTER=NNNNNNNNN                                          *
*                                                                     *
*        INSURE THAT NNNNNNNNN IS A 1 TO NINE DIGIT NUMBER            *
*                                                                     *
***********************************************************************
PRMSTC   OI    SWITCH+3,SELSTCNT   TURN ON STOP COUNT ENTERED IND
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE TYPE NOT BLANK
         BE    ERROR043            NOT THERE, ERROR
         LA    R14,9+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMSTC1  CLI   0(R7),C' '          END OF PARM?
         BE    PRMSTC2             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR043            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR043            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMSTC1         LOOP
         B     ERROR043            TOO LONG ERROR
PRMSTC2  BCTR  R15,0               MAKE LENGTH OF STOP CNT REL ZERO
         EX    R15,PACKINDX        PACK STOP COUNT
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALSTCNT        SAVE STOP COUNT VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     NOFLUSH OPTION                                  *
*                                                                     *
*        TURN ON THE CORRECT OPTION BIT                               *
*                                                                     *
***********************************************************************
PRMNOFL  OI    SWITCH+3,SELNOFLU   TURN ON NOFLUSH IND
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
***********************************************************************
*                                                                     *
*                     NOABEND OPTION                                  *
*                                                                     *
*        TURN ON THE CORRECT OPTION BIT                               *
*                                                                     *
***********************************************************************
PRMNOAB  OI    SWITCH+3,SELNOABN   TURN ON NOABEND IND
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
***********************************************************************
*                                                                     *
*                     NOTEST OPTION                                   *
*                                                                     *
*        TURN ON THE CORRECT OPTION BIT                               *
*                                                                     *
***********************************************************************
PRMNOTE OI     SWITCH+3,SELNOTST   TURN ON NOTEST IND
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
***********************************************************************
*                                                                     *
*                     NOPROD OPTION                                   *
*                                                                     *
*        TURN ON THE CORRECT OPTION BIT                               *
*                                                                     *
***********************************************************************
PRMNOPR  OI    SWITCH+3,SELNOPRD   TURN ON NOPROD IND
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
***********************************************************************
*                                                                     *
*                     NOSTC OPTION                                    *
*                                                                     *
*        TURN ON THE CORRECT OPTION BIT                               *
*                                                                     *
***********************************************************************
PRMNOST  OI    SWITCH+3,SELNOSTC   TURN ON NOSTC IND
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
***********************************************************************
*                                                                     *
*                     NOTSU OPTION                                    *
*                                                                     *
*        TURN ON THE CORRECT OPTION BIT                               *
*                                                                     *
***********************************************************************
PRMNOTS  OI    SWITCH+3,SELNOTSU   TURN ON NOTSU IND
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
         EJECT
***********************************************************************
*                                                                     *
*                      ENTER SORT CRITERIA                            *
*                                                                     *
*        SORT=A,B,C,D,E                                               *
*                                                                     *
*        THIS ROUTINE WILL VALIDATE THE LIST OF SORT OPTIONS AND      *
*        GENERATE SORT CONTROL STATEMENTS AND CALL SORT.              *
*                                                                     *
***********************************************************************
PRMSORT  OI    SWITCH,SELSORT      TURN ON SELECT SORT INDICATOR
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE SORT SUBPARAMETERS PRESENT
         BE    ERROR022            NONE, ERROR
         LA    R14,SRTFLDS         LOAD ADDRESS OF SORT FIELDS CARD
         SLR   R15,R15             CLEAR COUNTER REG
PRMSORT1 CH    R15,=H'5'           HAVE WE ALREADY PROCESSED 5 PARMS
         BNL   ERROR023            YES, ERROR
         SLR   R3,R3               SET LENGTH TO ZERO
PRMSORT2 CLI   0(R7),C' '          END OF SORT PARM
         BE    PRMSORT3            YES, BRANCH
         CLI   0(R7),C','          END OF SORT PARM
         BE    PRMSORT3            YES, BRANCH
         CLI   0(R7),C'('          END OF SORT PARM
         BE    PRMSORT3            YES, BRANCH
         LA    R3,1(,R3)           ADD 1 TO LENGTH FIELD
         LA    R7,1(,R7)           INCREMENT TO NEXT CHAR OF PARM
         B     PRMSORT2            LOOP
PRMSORT3 LTR   R3,R3               TEST LENGTH
         BZ    ERROR026            ZERO, ERROR
         BCTR  R3,0                MAKE MACHINE LENGTH
         L     R4,=V(OPTKEY)       LOAD ADDRESS OF SORT KEYWORD TBL
PRMSORT4 CLI   0(R4),X'FF'         END OF TABLE
         BE    ERROR024            YES, ERROR, INVALID KEYWORD
         CH    R3,0(R4)            SEE IF LENGTH LT MINIMUM LENGTH
         BL    PRMSORT5            YES, BRANCH
         EX    R3,COMPSPRM         COMPARE SORT PARM
         BE    PRMSORT6            MATCH, BRANCH
PRMSORT5 LA    R4,34(,R4)          INCREMENT TO NEXT TABLE ENTRY
         B     PRMSORT4            LOOP
PRMSORT6 CLI   17(R4),C'Y'         SEE IF ELIGIBLE SORT OPTION
         BNE   ERROR024            NO, ERROR
         MVC   0(11,R14),22(R4)    MOVE SORT PARM FROM TABLE
         CLC   0(3,R7),=C'(D)'     SEE IF FOLLOWED BY "(D)"
         BNE   *+12                NO, BRANCH
         MVI   9(R14),C'D'         SET TO DESCENDING
         LA    R7,3(,R7)           INCREMENT PAST "(D)"
         CLC   0(3,R7),=C'(A)'     SEE IF FOLLOWED BY "(A)"
         BNE   *+8                 NO, BRANCH
         LA    R7,3(,R7)           INCREMENT PAST "(A)"
         LA    R14,11(,R14)        INCREMENT TO NEXT SORT FIELDS SLOT
         LA    R15,1(,R15)         ADD 1 TO FIELDS COUNTER
         CLI   0(R7),C' '          END OF SUBPARAMETERS?
         BE    PRMSORT7            YES, BRANCH
         CLI   0(R7),C','          PROPER SUBPARAMETER SEPARATOR?
         BNE   ERROR025            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST ','
         LR    R1,R7               SET START OF NEXT SUBPARM
         B     PRMSORT1            GO GET NEXT SORT SUBPARAMETER
PRMSORT7 BCTR  R14,0               BACK UP POINTER TO SORT FIELDS CARD
         MVI   0(R14),C')'         PUT CLOSING PARENS ARND SORT FIELDS
         B     PRMEND              GO GET NEXT OPTION CARD
COMPSPRM CLC   0(0,R1),4(R4)       **** EXECUTE ONLY ****
         SPACE 3
***********************************************************************
*                                                                     *
*        DETERMINE LENGTH OF THE PRINT OPTION AND THEN SEARCH         *
*        A KEYWORD TABLE TO FIND A MATCH AND ROUTINE INDEX.           *
*                                                                     *
***********************************************************************
PRMPRT   OI    SWITCH+4,SELPRINT   TURN IF PRINT OPTION SPECIFIED
         LR    R1,R7               SAVE RECORD ADDRESS
         SLR   R15,R15             CLEAR COUNTER REG
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE PRINT PARMS PRESENT
         BE    ERROR053            NONE, ERROR
PRMPRT1  SLR   R3,R3               SET LENGTH TO ZERO
PRMPRT2  CLI   0(R7),C' '          END OF PARM
         BE    PRMPRT3             YES, BRANCH
         CLI   0(R7),C','          END OF PARM
         BE    PRMPRT3             YES, BRANCH
         LA    R3,1(,R3)           ADD 1 TO LENGTH FIELD
         LA    R7,1(,R7)           INCREMENT TO NEXT CHAR OF PARM
         B     PRMPRT2             LOOP
PRMPRT3  LTR   R3,R3               TEST LENGTH
         BZ    ERROR049            ZERO, ERROR
         BCTR  R3,0                MAKE MACHINE LENGTH
         L     R4,=V(OPTKEY)       LOAD ADDRESS OF OPTIONS KEYWORD TBL
PRMPRT4  CLI   0(R4),X'FF'         END OF TABLE
         BE    ERROR050            YES, ERROR, INVALID KEYWORD
         CH    R3,0(R4)            SEE IF LENGTH LT MINIMUM LENGTH
         BL    PRMPRT5             YES, BRANCH
         EX    R3,COMPOKEY         COMPARE OPTION KEYWORD
         BE    PRMPRT6             MATCH, BRANCH
PRMPRT5  LA    R4,34(,R4)          INCREMENT TO NEXT TABLE ENTRY
         B     PRMPRT4             LOOP
PRMPRT6  CLI   18(R4),C'Y'         SEE IF ELIGIBLE PRINT OPTION
         BNE   ERROR050            NO, ERROR
***********************************************************************
*                                                                     *
*        FIND THE NEXT OPEN ENTRY IN THE PRINT OPTION TABLE.          *
*                                                                     *
***********************************************************************
         L     R1,=V(PRTOPT)       LOAD START ADDRESS OF TABLE
PRMPRT7  CLI   0(R1),C'N'          SEE IF EMPTY ENTRY
         BE    PRMPRT8             YES, BRANCH
         CLI   0(R1),X'FF'         PHYSICAL END OF TABLE
         BE    ERROR051            YES, ERROR
         LA    R1,6(,R1)           INCREMENT TO NEXT TABLE ENTRY
         B     PRMPRT7             LOOP
         SPACE 3
***********************************************************************
*                                                                     *
*        SET THE PRINT OPTION IN THE PRINT OPTION TABLE               *
*                                                                     *
*        REG 1 POINTS TO A NEW PRINT OPTION TABLE ENTRY               *
*        REG 4 POINTS TO THE OPTION TABLE ENTRY                       *
*                                                                     *
***********************************************************************
PRMPRT8  MVI   0(R1),C'Y'          TURN ON PRINT INDICATOR
         LH    R15,2(R4)           LOAD OPTION INDEX FROM TABLE
         STH   R15,4(R1)           SAVE INDEX IN PRINT OPTION TABLE
         CLI   0(R7),C' '          END OF SUBPARAMETERS?
         BE    PRMEND              YES, GO GET NEXT OPTION CARD
         CLI   0(R7),C','          PROPER SUBPARAMETER SEPARATOR?
         BNE   ERROR052            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST ','
         LR    R1,R7               SET START OF NEXT SUBPARM
         B     PRMPRT1             GO GET NEXT PRINT SUBPARAMETER
         EJECT
***********************************************************************
*                                                                     *
*        DETERMINE LENGTH OF THE STARTDAY OPTION THEN SEARCH          *
*        A KEYWORD TABLE TO FIND A MATCH AND ROUTINE INDEX.           *
*                                                                     *
***********************************************************************
PRMSDAY  OI    SWITCH+6,SELSDAY    TURN SELECTION BY START DAY IND
         LR    R1,R7               SAVE RECORD ADDRESS
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE SDAY PARMS PRESENT
         BE    ERROR010            NONE, ERROR
PRMSDAY1 SLR   R3,R3               SET LENGTH TO ZERO
PRMSDAY2 CLI   0(R7),C' '          END OF PARM
         BE    PRMSDAY3            YES, BRANCH
         CLI   0(R7),C','          END OF PARM
         BE    PRMSDAY3            YES, BRANCH
         LA    R3,1(,R3)           ADD 1 TO LENGTH FIELD
         LA    R7,1(,R7)           INCREMENT TO NEXT CHAR OF PARM
         B     PRMSDAY2            LOOP
PRMSDAY3 LTR   R3,R3               TEST LENGTH
         BZ    ERROR011            ZERO, ERROR
         BCTR  R3,0                MAKE MACHINE LENGTH
         L     R4,=V(OPTKEY)       LOAD ADDRESS OF OPTIONS KEYWORD TBL
PRMSDAY4 CLI   0(R4),X'FF'         END OF TABLE
         BE    ERROR012            YES, ERROR, INVALID KEYWORD
         CH    R3,0(R4)            SEE IF LENGTH LT MINIMUM LENGTH
         BL    PRMSDAY5            YES, BRANCH
         EX    R3,COMPOKEY         COMPARE OPTION KEYWORD
         BE    PRMSDAY6            MATCH, BRANCH
PRMSDAY5 LA    R4,34(,R4)          INCREMENT TO NEXT TABLE ENTRY
         B     PRMSDAY4            LOOP
PRMSDAY6 CLI   19(R4),C'Y'         SEE IF ELIGIBLE DAY OPTION
         BNE   ERROR012            NO, ERROR
         LH    R15,2(R4)           LOAD OPTION INDEX FROM TABLE
***********************************************************************
*                                                                     *
*        GO TO THE PROPER ROUTINE FOR THE START DAY SUBPARAMETER      *
*        ON THE INPUT CARD ACCORDING TO THE ROUTINE INDEX IN THE      *
*        KEYWORD TABLE.                                               *
*                                                                     *
***********************************************************************
         B     PRMSDAY7(R15)       BRANCH TO PROPER ROUTINE BY INDEX
PRMSDAY7 B     ERROR012            INDEX = 00
         B     ERROR012            INDEX = 04
         B     ERROR012            INDEX = 08
         B     ERROR012            INDEX = 12
         B     ERROR012            INDEX = 16
         B     ERROR012            INDEX = 20
         B     ERROR012            INDEX = 24
         B     ERROR012            INDEX = 28
         B     ERROR012            INDEX = 32
         B     ERROR012            INDEX = 36
         B     ERROR012            INDEX = 40
         B     ERROR012            INDEX = 44
         B     ERROR012            INDEX = 48
         B     ERROR012            INDEX = 52
         B     ERROR012            INDEX = 56
         B     ERROR012            INDEX = 60
         B     ERROR012            INDEX = 64
         B     ERROR012            INDEX = 68
         B     ERROR012            INDEX = 72
         B     ERROR012            INDEX = 76
         B     ERROR012            INDEX = 80
         B     ERROR012            INDEX = 84
         B     ERROR012            INDEX = 88
         B     ERROR012            INDEX = 92
         B     ERROR012            INDEX = 96
         B     ERROR012            INDEX = 100
         B     ERROR012            INDEX = 104
         B     ERROR012            INDEX = 108
         B     ERROR012            INDEX = 112
         B     ERROR012            INDEX = 116
         B     ERROR012            INDEX = 120
         B     ERROR012            INDEX = 124
         B     ERROR012            INDEX = 128
         B     ERROR012            INDEX = 132
         B     ERROR012            INDEX = 136
         B     ERROR012            INDEX = 140
         B     ERROR012            INDEX = 144
         B     ERROR012            INDEX = 148
         B     ERROR012            INDEX = 152
         B     ERROR012            INDEX = 156
         B     ERROR012            INDEX = 160
         B     ERROR012            INDEX = 164
         B     ERROR012            INDEX = 168
         B     ERROR012            INDEX = 172
         B     SDSSUN              INDEX = 176
         B     SDSNSUN             INDEX = 180
         B     SDSMON              INDEX = 184
         B     SDSNMON             INDEX = 188
         B     SDSTUE              INDEX = 192
         B     SDSNTUE             INDEX = 196
         B     SDSWED              INDEX = 200
         B     SDSNWED             INDEX = 204
         B     SDSTHU              INDEX = 208
         B     SDSNTHU             INDEX = 212
         B     SDSFRI              INDEX = 216
         B     SDSNFRI             INDEX = 220
         B     SDSSAT              INDEX = 224
         B     SDSNSAT             INDEX = 228
         B     SDSWE               INDEX = 232
         B     SDSNWE              INDEX = 236
         B     SDSWD               INDEX = 240
         B     SDSNWD              INDEX = 244
         B     SDSALLD             INDEX = 248
         B     ERROR012            INDEX = 252
         B     ERROR012            INDEX = 256
         B     ERROR012            INDEX = 260
         B     ERROR012            INDEX = 264
         B     ERROR012            INDEX = 268
         B     ERROR012            INDEX = 272
         B     ERROR012            INDEX = 276
         B     ERROR012            INDEX = 280
         B     ERROR012            INDEX = 284
PRMSDAY8 CLI   0(R7),C' '          END OF SUBPARAMETERS?
         BE    PRMEND              YES, GO GET NEXT OPTION CARD
         CLI   0(R7),C','          PROPER SUBPARAMETER SEPARATOR?
         BNE   ERROR052            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST ','
         LR    R1,R7               SET START OF NEXT SUBPARM
         B     PRMSDAY1            GO GET NEXT PRINT SUBPARAMETER
         EJECT
***********************************************************************
*                                                                     *
*        DETERMINE LENGTH OF THE ENDDAY OPTION THEN SEARCH            *
*        A KEYWORD TABLE TO FIND A MATCH AND ROUTINE INDEX.           *
*                                                                     *
***********************************************************************
PRMEDAY  OI    SWITCH+6,SELEDAY    TURN SELECTION BY START DAY IND
         LR    R1,R7               SAVE RECORD ADDRESS
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE EDAY PARMS PRESENT
         BE    ERROR092            NONE, ERROR
PRMEDAY1 SLR   R3,R3               SET LENGTH TO ZERO
PRMEDAY2 CLI   0(R7),C' '          END OF PARM
         BE    PRMEDAY3            YES, BRANCH
         CLI   0(R7),C','          END OF PARM
         BE    PRMEDAY3            YES, BRANCH
         LA    R3,1(,R3)           ADD 1 TO LENGTH FIELD
         LA    R7,1(,R7)           INCREMENT TO NEXT CHAR OF PARM
         B     PRMEDAY2            LOOP
PRMEDAY3 LTR   R3,R3               TEST LENGTH
         BZ    ERROR093            ZERO, ERROR
         BCTR  R3,0                MAKE MACHINE LENGTH
         L     R4,=V(OPTKEY)       LOAD ADDRESS OF OPTIONS KEYWORD TBL
PRMEDAY4 CLI   0(R4),X'FF'         END OF TABLE
         BE    ERROR094            YES, ERROR, INVALID KEYWORD
         CH    R3,0(R4)            SEE IF LENGTH LT MINIMUM LENGTH
         BL    PRMEDAY5            YES, BRANCH
         EX    R3,COMPOKEY         COMPARE OPTION KEYWORD
         BE    PRMEDAY6            MATCH, BRANCH
PRMEDAY5 LA    R4,34(,R4)          INCREMENT TO NEXT TABLE ENTRY
         B     PRMEDAY4            LOOP
PRMEDAY6 CLI   19(R4),C'Y'         SEE IF ELIGIBLE DAY OPTION
         BNE   ERROR094            NO, ERROR
         LH    R15,2(R4)           LOAD OPTION INDEX FROM TABLE
***********************************************************************
*                                                                     *
*        GO TO THE PROPER ROUTINE FOR THE START DAY SUBPARAMETER      *
*        ON THE INPUT CARD ACCORDING TO THE ROUTINE INDEX IN THE      *
*        KEYWORD TABLE.                                               *
*                                                                     *
***********************************************************************
         B     PRMEDAY7(R15)       BRANCH TO PROPER ROUTINE BY INDEX
PRMEDAY7 B     ERROR094            INDEX = 00
         B     ERROR094            INDEX = 04
         B     ERROR094            INDEX = 08
         B     ERROR094            INDEX = 12
         B     ERROR094            INDEX = 16
         B     ERROR094            INDEX = 20
         B     ERROR094            INDEX = 24
         B     ERROR094            INDEX = 28
         B     ERROR094            INDEX = 32
         B     ERROR094            INDEX = 36
         B     ERROR094            INDEX = 40
         B     ERROR094            INDEX = 44
         B     ERROR094            INDEX = 48
         B     ERROR094            INDEX = 52
         B     ERROR094            INDEX = 56
         B     ERROR094            INDEX = 60
         B     ERROR094            INDEX = 64
         B     ERROR094            INDEX = 68
         B     ERROR094            INDEX = 72
         B     ERROR094            INDEX = 76
         B     ERROR094            INDEX = 80
         B     ERROR094            INDEX = 84
         B     ERROR094            INDEX = 88
         B     ERROR094            INDEX = 92
         B     ERROR094            INDEX = 96
         B     ERROR094            INDEX = 100
         B     ERROR094            INDEX = 104
         B     ERROR094            INDEX = 108
         B     ERROR094            INDEX = 112
         B     ERROR094            INDEX = 116
         B     ERROR094            INDEX = 120
         B     ERROR094            INDEX = 124
         B     ERROR094            INDEX = 128
         B     ERROR094            INDEX = 132
         B     ERROR094            INDEX = 136
         B     ERROR094            INDEX = 140
         B     ERROR094            INDEX = 144
         B     ERROR094            INDEX = 148
         B     ERROR094            INDEX = 152
         B     ERROR094            INDEX = 156
         B     ERROR094            INDEX = 160
         B     ERROR094            INDEX = 164
         B     ERROR094            INDEX = 168
         B     ERROR094            INDEX = 172
         B     EDSSUN              INDEX = 176
         B     EDSNSUN             INDEX = 180
         B     EDSMON              INDEX = 184
         B     EDSNMON             INDEX = 188
         B     EDSTUE              INDEX = 192
         B     EDSNTUE             INDEX = 196
         B     EDSWED              INDEX = 200
         B     EDSNWED             INDEX = 204
         B     EDSTHU              INDEX = 208
         B     EDSNTHU             INDEX = 212
         B     EDSFRI              INDEX = 216
         B     EDSNFRI             INDEX = 220
         B     EDSSAT              INDEX = 224
         B     EDSNSAT             INDEX = 228
         B     EDSWE               INDEX = 232
         B     EDSNWE              INDEX = 236
         B     EDSWD               INDEX = 240
         B     EDSNWD              INDEX = 244
         B     EDSALLD             INDEX = 248
         B     ERROR094            INDEX = 252
         B     ERROR094            INDEX = 256
         B     ERROR094            INDEX = 260
         B     ERROR094            INDEX = 264
         B     ERROR094            INDEX = 268
         B     ERROR094            INDEX = 272
         B     ERROR094            INDEX = 276
         B     ERROR094            INDEX = 280
         B     ERROR094            INDEX = 284
PRMEDAY8 CLI   0(R7),C' '          END OF SUBPARAMETERS?
         BE    PRMEND              YES, GO GET NEXT OPTION CARD
         CLI   0(R7),C','          PROPER SUBPARAMETER SEPARATOR?
         BNE   ERROR052            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST ','
         LR    R1,R7               SET START OF NEXT SUBPARM
         B     PRMEDAY1            GO GET NEXT PRINT SUBPARAMETER
         EJECT
***********************************************************************
*                                                                     *
*                   SELECT BY PERM TAPE MOUNTS                        *
*                                                                     *
*        PERMTAPES>NNNNNN                                             *
*        PERMTAPES<NNNNNN                                             *
*                                                                     *
*        INSURE THAT THE NUMBER OF TAPE MOUNTS IS A NUMERIC FIELD     *
*        FROM 1 TO 6 DIGITS LONG                                      *
*                                                                     *
***********************************************************************
PRMPTP   CLI   0(R7),C' '          MAKE SURE NOT BLANK
         BE    ERROR054            NOT THERE, ERROR
         CLI   0(R7),C'>'          SEE IF GE OPERATOR
         BE    PRMPTP1             YES, BRANCH
         CLI   0(R7),C'<'          SEE IF LE OPERATOR
         BE    PRMPTP2             YES, BRANCH
         B     ERROR032            NO, ERROR
PRMPTP1  OI    SWITCH+5,SELPTPGE   TURN ON SELECT PERM MOUNT GE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMPTP1A CLI   0(R7),C' '          END OF COUNT?
         BE    PRMPTP1B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR054            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR054            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMPTP1A        LOOP
         B     ERROR054            TOO LONG ERROR
PRMPTP1B BCTR  R15,0               MAKE LENGTH OF COUNT REL ZERO
         EX    R15,PACKINDX        PACK MOUNT COUNT
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALPTPGE        SAVE MOUNT COUNT GE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
PRMPTP2  OI    SWITCH+5,SELPTPLE   TURN ON SELECT MOUNT LE INDICATOR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMPTP2A CLI   0(R7),C' '          END OF COUNT?
         BE    PRMPTP2B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR054            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR054            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMPTP2A        LOOP
         B     ERROR054            TOO LONG ERROR
PRMPTP2B BCTR  R15,0               MAKE LENGTH OF COUNT REL ZERO
         EX    R15,PACKINDX        PACK MOUNT COUNT
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALPTPLE        SAVE MOUNT COUNT LE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                   SELECT BY SCRATCH TAPE MOUNTS                     *
*                                                                     *
*        SCRTAPES>NNNNNN                                              *
*        SCRTAPES<NNNNNN                                              *
*                                                                     *
*        INSURE THAT THE NUMBER OF TAPE MOUNTS IS A NUMERIC FIELD     *
*        FROM 1 TO 6 DIGITS LONG                                      *
*                                                                     *
***********************************************************************
PRMSTP   CLI   0(R7),C' '          MAKE SURE NOT BLANK
         BE    ERROR055            NOT THERE, ERROR
         CLI   0(R7),C'>'          SEE IF GE OPERATOR
         BE    PRMSTP1             YES, BRANCH
         CLI   0(R7),C'<'          SEE IF LE OPERATOR
         BE    PRMSTP2             YES, BRANCH
         B     ERROR032            NO, ERROR
PRMSTP1  OI    SWITCH+5,SELSTPGE   TURN ON SELECT PERM MOUNT GE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMSTP1A CLI   0(R7),C' '          END OF COUNT?
         BE    PRMSTP1B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR055            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR055            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMSTP1A        LOOP
         B     ERROR055            TOO LONG ERROR
PRMSTP1B BCTR  R15,0               MAKE LENGTH OF COUNT REL ZERO
         EX    R15,PACKINDX        PACK MOUNT COUNT
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALSTPGE        SAVE MOUNT COUNT GE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
PRMSTP2  OI    SWITCH+5,SELSTPLE   TURN ON SELECT MOUNT LE INDICATOR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMSTP2A CLI   0(R7),C' '          END OF COUNT?
         BE    PRMSTP2B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR055            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR055            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMSTP2A        LOOP
         B     ERROR055            TOO LONG ERROR
PRMSTP2B BCTR  R15,0               MAKE LENGTH OF COUNT REL ZERO
         EX    R15,PACKINDX        PACK MOUNT COUNT
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALSTPLE        SAVE MOUNT COUNT LE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                SELECT BY EXPANDED STORAGE PAGE COUNT                *
*                                                                     *
*        EXPAGING>NNNNNNNNN                                           *
*        EXPAGING<NNNNNNNNN                                           *
*                                                                     *
*        INSURE THAT THE NUMBER OF PAGES IS A NUMERIC FIELD FROM      *
*        1 TO 9 DIGITS LONG                                           *
*                                                                     *
***********************************************************************
PRMEPG   CLI   0(R7),C' '          MAKE SURE NOT BLANK
         BE    ERROR056            NOT THERE, ERROR
         CLI   0(R7),C'>'          SEE IF GE OPERATOR
         BE    PRMEPG1             YES, BRANCH
         CLI   0(R7),C'<'          SEE IF LE OPERATOR
         BE    PRMEPG2             YES, BRANCH
         B     ERROR032            NO, ERROR
PRMEPG1  OI    SWITCH+5,SELEPGGE   TURN ON SELECT EXP PAGING GE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMEPG1A CLI   0(R7),C' '          END OF COUNT?
         BE    PRMEPG1B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR056            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR056            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMEPG1A        LOOP
         B     ERROR056            TOO LONG ERROR
PRMEPG1B BCTR  R15,0               MAKE LENGTH OF COUNT REL ZERO
         EX    R15,PACKINDX        PACK PAGE COUNT
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALEPGGE        SAVE PAGE COUNT GE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
PRMEPG2  OI    SWITCH+5,SELEPGLE   TURN ON SELECT EXP PAGING LE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMEPG2A CLI   0(R7),C' '          END OF COUNT?
         BE    PRMEPG2B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR056            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR056            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMEPG2A        LOOP
         B     ERROR056            TOO LONG ERROR
PRMEPG2B BCTR  R15,0               MAKE LENGTH OF COUNT REL ZERO
         EX    R15,PACKINDX        PACK PAGE COUNT
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALEPGLE        SAVE PAGE COUNT LE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                SELECT BY AUXILLARY STORAGE PAGE COUNT               *
*                                                                     *
*        AUXAGING>NNNNNNNNN                                           *
*        AUXAGING<NNNNNNNNN                                           *
*                                                                     *
*        INSURE THAT THE NUMBER OF PAGES IS A NUMERIC FIELD FROM      *
*        1 TO 9 DIGITS LONG                                           *
*                                                                     *
***********************************************************************
PRMAPG   CLI   0(R7),C' '          MAKE SURE NOT BLANK
         BE    ERROR057            NOT THERE, ERROR
         CLI   0(R7),C'>'          SEE IF GE OPERATOR
         BE    PRMAPG1             YES, BRANCH
         CLI   0(R7),C'<'          SEE IF LE OPERATOR
         BE    PRMAPG2             YES, BRANCH
         B     ERROR032            NO, ERROR
PRMAPG1  OI    SWITCH+5,SELAPGGE   TURN ON SELECT AUX PAGING GE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMAPG1A CLI   0(R7),C' '          END OF COUNT?
         BE    PRMAPG1B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR057            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR057            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMAPG1A        LOOP
         B     ERROR057            TOO LONG ERROR
PRMAPG1B BCTR  R15,0               MAKE LENGTH OF COUNT REL ZERO
         EX    R15,PACKINDX        PACK PAGE COUNT
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALAPGGE        SAVE PAGE COUNT GE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
PRMAPG2  OI    SWITCH+5,SELAPGLE   TURN ON SELECT AUX PAGING LE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMAPG2A CLI   0(R7),C' '          END OF COUNT?
         BE    PRMAPG2B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR057            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR057            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMAPG2A        LOOP
         B     ERROR057            TOO LONG ERROR
PRMAPG2B BCTR  R15,0               MAKE LENGTH OF COUNT REL ZERO
         EX    R15,PACKINDX        PACK PAGE COUNT
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALAPGLE        SAVE PAGE COUNT LE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                   SELECT BY SERVICE UNIT COUNT                      *
*                                                                     *
*        SERVUNIT>NNNNNNNNN                                           *
*        SERVUNIT<NNNNNNNNN                                           *
*                                                                     *
*        INSURE THAT THE NUMBER OF SERVICE UNITS IS A NUMERIC         *
*        FIELD FROM 1 TO 9 DIGITS LONG                                *
*                                                                     *
***********************************************************************
PRMSUS   CLI   0(R7),C' '          MAKE SURE NOT BLANK
         BE    ERROR058            NOT THERE, ERROR
         CLI   0(R7),C'>'          SEE IF GE OPERATOR
         BE    PRMSUS1             YES, BRANCH
         CLI   0(R7),C'<'          SEE IF LE OPERATOR
         BE    PRMSUS2             YES, BRANCH
         B     ERROR032            NO, ERROR
PRMSUS1  OI    SWITCH+4,SELSUSGE   TURN ON SELECT SERV UNIT GE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMSUS1A CLI   0(R7),C' '          END OF COUNT?
         BE    PRMSUS1B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR058            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR058            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMSUS1A        LOOP
         B     ERROR058            TOO LONG ERROR
PRMSUS1B BCTR  R15,0               MAKE LENGTH OF COUNT REL ZERO
         EX    R15,PACKINDX        PACK SERVICE UNITS
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALSUSGE        SAVE SERV UNIT GE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
PRMSUS2  OI    SWITCH+4,SELSUSLE   TURN ON SELECT SERV UNIT LE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMSUS2A CLI   0(R7),C' '          END OF COUNT?
         BE    PRMSUS2B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR058            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR058            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMSUS2A        LOOP
         B     ERROR058            TOO LONG ERROR
PRMSUS2B BCTR  R15,0               MAKE LENGTH OF COUNT REL ZERO
         EX    R15,PACKINDX        PACK SERVICE UNITS
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALSUSLE        SAVE SERV UNIT LE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                   SELECT BY VIO PAGE COUNT                          *
*                                                                     *
*        VIOPAGING>NNNNNNNNN                                          *
*        VIOPAGING<NNNNNNNNN                                          *
*                                                                     *
*        INSURE THAT THE NUMBER OF VIO PAGES IS A NUMERIC FIELD       *
*        FROM 1 TO 9 DIGITS LONG                                      *
*                                                                     *
***********************************************************************
PRMVIO   CLI   0(R7),C' '          MAKE SURE NOT BLANK
         BE    ERROR059            NOT THERE, ERROR
         CLI   0(R7),C'>'          SEE IF GE OPERATOR
         BE    PRMVIO1             YES, BRANCH
         CLI   0(R7),C'<'          SEE IF LE OPERATOR
         BE    PRMVIO2             YES, BRANCH
         B     ERROR032            NO, ERROR
PRMVIO1  OI    SWITCH+6,SELVIOGE   TURN ON SELECT SERV UNIT GE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMVIO1A CLI   0(R7),C' '          END OF COUNT?
         BE    PRMVIO1B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR059            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR059            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMVIO1A        LOOP
         B     ERROR059            TOO LONG ERROR
PRMVIO1B BCTR  R15,0               MAKE LENGTH OF COUNT REL ZERO
         EX    R15,PACKINDX        PACK SERVICE UNITS
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALVIOGE        SAVE SERV UNIT GE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
PRMVIO2  OI    SWITCH+6,SELVIOLE   TURN ON SELECT SERV UNIT LE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMVIO2A CLI   0(R7),C' '          END OF COUNT?
         BE    PRMVIO2B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR059            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR059            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMVIO2A        LOOP
         B     ERROR059            TOO LONG ERROR
PRMVIO2B BCTR  R15,0               MAKE LENGTH OF COUNT REL ZERO
         EX    R15,PACKINDX        PACK SERVICE UNITS
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALVIOLE        SAVE SERV UNIT LE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     TOTALS OPTION                                   *
*                                                                     *
*        TURN ON THE CORRECT OPTION BIT                               *
*                                                                     *
***********************************************************************
PRMTOT   OI    SWITCH+4,SELTOT     TURN ON TOTALS IND
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
***********************************************************************
*                                                                     *
*                     AVERAGES OPTION                                 *
*                                                                     *
*        TURN ON THE CORRECT OPTION BIT                               *
*                                                                     *
***********************************************************************
PRMAVG   OI    SWITCH+4,SELTOT+SELAVG TURN ON AVERAGE IND
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
***********************************************************************
*                                                                     *
*                     NODETAIL OPTION                                 *
*                                                                     *
*        TURN ON THE NO DETAIL REPORT OPTION BIT                      *
*                                                                     *
***********************************************************************
PRMNOD   OI    SWITCH+4,SELNODET+SELTOT TURN ON NO DETAIL IND
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                       EXCLUDE BY JOBNAME                            *
*                                                                     *
*        EXJOBNAME=JJJJJJJJ(NN)                                       *
*                                                                     *
*        INSURE THAT THE PARM IS EXACTLY 1 TO EIGHT ALPHANUMERIC      *
*        CHARACTERS LONG.  THE OPTIONAL INDEX VALUE CAN BE            *
*        SPECIFIED WITHIN PARENTHESIS TO SPECIFY THE OFFSET           *
*        WITHIN THE ACTUAL JOBNAME THAT THE SPECIFIED "JOBNAME"       *
*        IS SUPPOSED TO START.  THE OPTIONAL INDEX VALUE MUST         *
*        CONTAIN 1 TO 2 NUMERIC DIGITS.                               *
*                                                                     *
***********************************************************************
XPRMJBN  OI    SWITCH,SELJOBNM     TURN ON SELECT JOBNAME INDICATOR
         MVI   VALJOBNM,X'00'      INITIALIZE
         MVI   VALJOBNM+1,X'00'       JOBNAME
         MVC   VALJOBNM+2(8),=CL8' '     ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         SLR   R15,R15             CLEAR COUNTER REGISTER
XPRMJBN1 CLI   0(R7),C' '          END OF JOBNM?
         BE    XPRMJBN5            YES, BRANCH
         CLI   0(R7),C'('          START OF OFFSET FIELD?
         BE    XPRMJBN2            YES, BRANCH
         LA    R15,1(,R15)         ADD 1 TO LENGTH COUNTER
         LA    R7,1(,R7)           ADD 1 TO JOBNAME POINTER
         B     XPRMJBN1            LOOP
XPRMJBN2 LTR   R15,R15             TEST LENGTH OF JOBNAME
         BZ    ERROR071            ZERO, ERROR
         CH    R15,=H'8'           SEE IF LENGTH EXCEEDS 8
         BH    ERROR072            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         EX    R15,MVJOBNM         MOVE JOBNAME TO SAVE AREA
         STC   R15,VALJOBNM        SAVE JOBNAME LENGTH
         LA    R7,1(R7)            POINT TO INDEX VALUE
         LR    R1,R7               SAVE PARM ADDRESS
         SLR   R15,R15             CLEAR COUNTER REG
         CLI   0(R7),C')'          END OF INDEX
         BE    XPRMJBN3            YES, BRANCH
         LA    R15,1(,R15)         ADD 1 TO LENGTH COUNTER
         CLI   1(R7),C')'          END OF INDEX
         BE    XPRMJBN3            YES, BRANCH
         LA    R15,1(,R15)         ADD 1 TO LENGTH COUNTER
         CLI   2(R7),C')'          END OF INDEX
         BE    XPRMJBN3            YES, BRANCH
         B     ERROR073            INDEX LENGTH EXCEEDS 2 CHARACTERS
XPRMJBN3 LTR   R15,R15             SEE IF ZERO LENGTH
         BZ    XPRMJBN6            YES, NO INDEX
         LR    R14,R15             SAVE INDEX LENGTH
         LR    R2,R7               SAVE INDEX POINTER
XPRMJBN4 CLI   0(R2),C'0'          TEST FOR LESS THAN ZERO
         BL    ERROR074            YES, ERROR
         CLI   0(R2),C'9'          TEST FOR GT NINE
         BH    ERROR074            YES, ERROR
         LA    R2,1(,R2)           INDEX TO NEXT CHAR
         BCT   R14,XPRMJBN4        LOOP
         BCTR  R15,0               MAKE INDEX LENGTH RELATIVE TO ZERO
         EX    R15,PACKINDX        PACK THE INDEX VALUE
         CVB   R15,DOUBLE          CONVERT INDEX VALUE TO BINARY
         BCTR  R15,0               MAKE INDEX VALUE RELATIVE TO ZERO
         STC   R15,VALJOBNM+1      SAVE INDEX VALUE
         B     XPRMJBN6            BRANCH
XPRMJBN5 LTR   R15,R15             TEST LENGTH OF JOBNAME
         BZ    ERROR070            ZERO, ERROR
         CH    R15,=H'8'           SEE IF LENGTH EXCEEDS 8
         BH    ERROR070            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         EX    R15,MVJOBNM         MOVE JOBNAME TO SAVE AREA
         STC   R15,VALJOBNM        SAVE JOBNAME LENGTH
         MVI   VALJOBNM+1,X'00'    SET INDEX TO ZERO
XPRMJBN6 ICM   R15,B'1111',XJOBNTBL LOAD ADDRESS OF EXJOBNAME TABLE
         BNZ   XPRMJBN7            NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=10010        GET ROOM FOR 1000 EXJOBNAME ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,XJOBNTBL        STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
XPRMJBN7 SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
XPRMJBN8 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    XPRMJBN9            YES, GO SAVE NEW ENTRY
         LA    R15,10(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR075            YES, ERROR
         B     XPRMJBN8            NO, LOOP
XPRMJBN9 MVC   0(10,R15),VALJOBNM  SAVE NEW ENTRY
         MVI   10(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                       EXCLUDE BY JOBNO                              *
*                                                                     *
*        EXJOBNO=TTT.....                                             *
*                                                                     *
*        INSURE THAT THE PARM IS EXACTLY 8 CHARACTERS LONG AND        *
*        HAS THE FOLLOWING FORMS:                                     *
*                                                                     *
*        JOB.....  OR  STC.....  OR  TSU.....                         *
*                                                                     *
*        WHERE ..... IS THE NUMERIC JOB/STC/TSU NUMBER                *
*                                                                     *
***********************************************************************
XPRMJNO  OI    SWITCH,SELJOBNO     TURN ON SELECT JOBNO INDICATOR
         MVC   VALJOBNO,=CL8' '    INITIALIZE JOB NUMBER ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         MVC   VALJOBNO,0(R7)      SAVE JOBNO VALUE
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE JOBNO NOT BLANK
         BE    ERROR076            NOT THERE, ERROR
         CLC   0(3,R7),=C'JOB'     SEE IF STARTS WITH 'JOB'
         BE    XPRMJNO1            YES, BRANCH
         CLC   0(3,R7),=C'STC'     SEE IF STARTS WITH 'STC'
         BE    XPRMJNO1            YES, BRANCH
         CLC   0(3,R7),=C'TSU'     SEE IF STARTS WITH 'TSU'
         BNE   ERROR076            NO, ERROR
XPRMJNO1 LA    R7,3(,R7)           INCREMENT PAST JOB TYPE
         LA    R14,5               SET LENGTH TO 5
XPRMJNO2 CLI   0(R7),C'0'          TEST FOR LESS THAN ZERO
         BL    ERROR076            YES, ERROR
         CLI   0(R7),C'9'          TEST FOR GT NINE
         BH    ERROR076            YES, ERROR
         LA    R7,1(,R7)           INDEX TO NEXT CHAR
         BCT   R14,XPRMJNO2        LOOP
         CLI   0(R7),C' '          END OF JOBNO
         BNE   ERROR076            NO, ERROR
XPRMJNO3 ICM   R15,B'1111',XJBNOTBL LOAD ADDRESS OF EXJOBNO TABLE
         BNZ   XPRMJNO4            NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=8008         GET ROOM FOR 1000 EXJOBNO ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,XJBNOTBL        STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
XPRMJNO4 SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
XPRMJNO5 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    XPRMJNO6            YES, GO SAVE NEW ENTRY
         LA    R15,08(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR077            YES, ERROR
         B     XPRMJNO5            NO, LOOP
XPRMJNO6 MVC   0(08,R15),VALJOBNO  SAVE NEW ENTRY
         MVI   08(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                    EXCLUDE BY SYSTEM ID                             *
*                                                                     *
*        EXSYSTEM=SSSS                                                *
*                                                                     *
*        WHERE SSSS IS THE SMF SYSTEM ID.  THIS FIELD ONLY HAS        *
*        MEANING IF THE INPUT SMF DATA HAS COME FROM MULTIPLE         *
*        MVS SYSTEMS.                                                 *
*                                                                     *
***********************************************************************
XPRMSYS  OI    SWITCH,SELSYSID     TURN ON SELECT SYSID INDICATOR
         MVC   VALSYSID,=CL4' '    INITIALIZE SYSID
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE SYSID NOT BLANK
         BE    ERROR078            NOT THERE, ERROR
         MVC   VALSYSID(4),0(R7)   SAVE SYS ID
XPRMSYS1 ICM   R15,B'1111',XSYSTBL LOAD ADDRESS OF EXSYSID TABLE
         BNZ   XPRMSYS2            NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=4004         GET ROOM FOR 1000 EXSYSID ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,XSYSTBL         STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
XPRMSYS2 SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
XPRMSYS3 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    XPRMSYS4            YES, GO SAVE NEW ENTRY
         LA    R15,04(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR079            YES, ERROR
         B     XPRMSYS3            NO, LOOP
XPRMSYS4 MVC   0(04,R15),VALSYSID  SAVE NEW ENTRY
         MVI   04(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                    EXCLUDE BY PROCSTEP NAME                         *
*                                                                     *
*        EXPROCSTEP=SSSSSSSS                                          *
*                                                                     *
*        INSURE THAT THE PROC STEP NAME IS 1 TO 8 CHARACTERS LONG     *
*        SAVING THE LENGTH FOR A GENERIC COMPARE.                     *
*                                                                     *
***********************************************************************
XPRMPST  OI    SWITCH+4,SELPSTEP   TURN ON SELECT PROC STEP IND
         MVC   VALPSTEP(2),=X'0000' INITIALIZE PROC STEP
         MVC   VALPSTEP+2(8),=CL8' '  NAME ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE PROC STEP NAME NOT BLANK
         BE    ERROR080            NOT THERE, ERROR
         SLR   R15,R15             SET LENGTH TO 0
XPRMPST1 CLI   0(R7),C' '          END OF PROC STEP NAME
         BE    XPRMPST2            YES, BRANCH
         LA    R7,1(,R7)           INDEX TO NEXT CHAR
         LA    R15,1(,R15)         ADD 1 TO LENGTH
         B     XPRMPST1            LOOP
XPRMPST2 CH    R15,=H'8'           SEE IF EXCEEDS MAX LENGTH
         BH    ERROR080            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         STH   R15,VALPSTEP        SAVE LENGTH OF PROC STEP NAME
         MVC   VALPSTEP+2(8),0(R1) SAVE PROC STEP NAME
XPRMPST3 ICM   R15,B'1111',XPSTPTBL LOAD ADDRESS OF EXPSTEP TABLE
         BNZ   XPRMPST4            NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=10010        GET ROOM FOR 1000 EXPSTEP ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,XPSTPTBL        STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
XPRMPST4 SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
XPRMPST5 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    XPRMPST6            YES, GO SAVE NEW ENTRY
         LA    R15,10(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR081            YES, ERROR
         B     XPRMPST5            NO, LOOP
XPRMPST6 MVC   0(10,R15),VALPSTEP  SAVE NEW ENTRY
         MVI   10(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                    EXCLUDE BY JOBSTEP NAME                          *
*                                                                     *
*        EXJOBSTEP=SSSSSSSS                                           *
*                                                                     *
*        INSURE THAT THE JOB STEP NAME IS 1 TO 8 CHARACTERS LONG      *
*        SAVING THE LENGTH FOR A GENERIC COMPARE.                     *
*                                                                     *
***********************************************************************
XPRMJST  OI    SWITCH+4,SELJSTEP   TURN ON SELECT JOB STEP IND
         MVC   VALJSTEP(2),=X'0000' INITIALIZE JOB STEP
         MVC   VALJSTEP+2(8),=CL8' '  NAME ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE JOB STEP NAME NOT BLANK
         BE    ERROR082            NOT THERE, ERROR
         SLR   R15,R15             SET LENGTH TO 0
XPRMJST1 CLI   0(R7),C' '          END OF JOB STEP NAME
         BE    XPRMJST2            YES, BRANCH
         LA    R7,1(,R7)           INDEX TO NEXT CHAR
         LA    R15,1(,R15)         ADD 1 TO LENGTH
         B     XPRMJST1            LOOP
XPRMJST2 CH    R15,=H'8'           SEE IF EXCEEDS MAX LENGTH
         BH    ERROR082            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         STH   R15,VALJSTEP        SAVE LENGTH OF JOB STEP NAME
         MVC   VALJSTEP+2(8),0(R1) SAVE JOB STEP NAME
XPRMJST3 ICM   R15,B'1111',XJSTPTBL LOAD ADDRESS OF EXJSTEP TABLE
         BNZ   XPRMJST4            NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=10010        GET ROOM FOR 1000 EXJSTEP ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,XJSTPTBL        STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
XPRMJST4 SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
XPRMJST5 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    XPRMJST6            YES, GO SAVE NEW ENTRY
         LA    R15,10(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR083            YES, ERROR
         B     XPRMJST5            NO, LOOP
XPRMJST6 MVC   0(10,R15),VALJSTEP  SAVE NEW ENTRY
         MVI   10(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                    EXCLUDE BY PROGRAM NAME                          *
*                                                                     *
*        EXPROGRAM=PPPPPPPP                                           *
*                                                                     *
*        INSURE THAT THE PROGRAM NAME IS 1 TO 8 CHARACTERS LONG       *
*        SAVING THE LENGTH FOR A GENERIC COMPARE.                     *
*                                                                     *
***********************************************************************
XPRMPGM  OI    SWITCH,SELPGM       TURN ON SELECT PGM INDICATOR
         MVC   VALPGM(2),=X'0000'  INITIALIZE PROGRAM
         MVC   VALPGM+2(8),=CL8' '    NAME ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE PGM NAME NOT BLANK
         BE    ERROR084            NOT THERE, ERROR
         SLR   R15,R15             SET LENGTH TO 0
XPRMPGM1 CLI   0(R7),C' '          END OF PROGRAM NAME
         BE    XPRMPGM2            YES, BRANCH
         LA    R7,1(,R7)           INDEX TO NEXT CHAR
         LA    R15,1(,R15)         ADD 1 TO LENGTH
         B     XPRMPGM1            LOOP
XPRMPGM2 CH    R15,=H'8'           SEE IF EXCEEDS MAX LENGTH
         BH    ERROR084            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         STH   R15,VALPGM          SAVE LENGTH OF PROGRAM NAME
         MVC   VALPGM+2(8),0(R1)   SAVE PROGRAM NAME
XPRMPGM3 ICM   R15,B'1111',XPGMTBL LOAD ADDRESS OF EXPGM NAME TABLE
         BNZ   XPRMPGM4            NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=10010        GET ROOM FOR 1000 EXPGM NAME ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,XPGMTBL         STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
XPRMPGM4 SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
XPRMPGM5 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    XPRMPGM6            YES, GO SAVE NEW ENTRY
         LA    R15,10(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR085            YES, ERROR
         B     XPRMPGM5            NO, LOOP
XPRMPGM6 MVC   0(10,R15),VALPGM    SAVE NEW ENTRY
         MVI   10(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                    EXCLUDE BY SECURITY USERID                       *
*                                                                     *
*        EXUSERID=UUUUUUUU                                            *
*                                                                     *
*        INSURE THAT THE USERID NAME IS 1 TO 8 CHARACTERS LONG        *
*        SAVING THE LENGTH FOR A GENERIC COMPARE.                     *
*                                                                     *
***********************************************************************
XPRMUID  OI    SWITCH+1,SELUID     TURN ON SELECT USERID INDICATOR
         MVC   VALUID(2),=X'0000'  INITIALIZE SECURITY
         MVC   VALUID+2(8),=CL8' '    USERID ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE USERID NOT BLANK
         BE    ERROR086            NOT THERE, ERROR
         SLR   R15,R15             SET LENGTH TO 0
XPRMUID1 CLI   0(R7),C' '          END OF USERID
         BE    XPRMUID2            YES, BRANCH
         LA    R7,1(,R7)           INDEX TO NEXT CHAR
         LA    R15,1(,R15)         ADD 1 TO LENGTH
         B     XPRMUID1            LOOP
XPRMUID2 CH    R15,=H'8'           SEE IF EXCEEDS MAX LENGTH
         BH    ERROR086            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         STH   R15,VALUID          SAVE LENGTH OF USERID
         MVC   VALUID+2(8),0(R1)   SAVE USERID
XPRMUID3 ICM   R15,B'1111',XUIDTBL LOAD ADDRESS OF EXUID NAME TABLE
         BNZ   XPRMUID4            NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=10010        GET ROOM FOR 1000 EXUID NAME ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,XUIDTBL         STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
XPRMUID4 SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
XPRMUID5 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    XPRMUID6            YES, GO SAVE NEW ENTRY
         LA    R15,10(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR087            YES, ERROR
         B     XPRMUID5            NO, LOOP
XPRMUID6 MVC   0(10,R15),VALUID    SAVE NEW ENTRY
         MVI   10(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                    EXCLUDE BY CONDITION CODE                        *
*                                                                     *
*        EXCCODE=CCCCC                                                *
*                                                                     *
*        INSURE THAT THE CONDITION CODE IS 1 TO 5 CHARACTERS LONG     *
*        SAVING THE LENGTH FOR A GENERIC COMPARE.                     *
*                                                                     *
***********************************************************************
XPRMCC   OI    SWITCH+1,SELCC      TURN ON SELECT CCODE INDICATOR
         MVC   VALCC(2),=X'0000'   INITIALIZE CONDITION
         MVC   VALCC+2(5),=CL5' '     CODE ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE CCODE NOT BLANK
         BE    ERROR088            NOT THERE, ERROR
         SLR   R15,R15             SET LENGTH TO 0
XPRMCC1  CLI   0(R7),C' '          END OF CCODE
         BE    XPRMCC2             YES, BRANCH
         LA    R7,1(,R7)           INDEX TO NEXT CHAR
         LA    R15,1(,R15)         ADD 1 TO LENGTH
         B     XPRMCC1             LOOP
XPRMCC2  CH    R15,=H'5'           SEE IF EXCEEDS MAX LENGTH
         BH    ERROR088            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         STH   R15,VALCC           SAVE LENGTH OF CCODE
         MVC   VALCC+2(5),0(R1)    SAVE CCODE
XPRMCC3  ICM   R15,B'1111',XCCTBL  LOAD ADDRESS OF EXCCODE TABLE
         BNZ   XPRMCC4             NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=7007         GET ROOM FOR 1000 EXCCODE ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,XCCTBL          STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
XPRMCC4  SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
XPRMCC5  CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    XPRMCC6             YES, GO SAVE NEW ENTRY
         LA    R15,07(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR089            YES, ERROR
         B     XPRMCC5             NO, LOOP
XPRMCC6  MVC   0(07,R15),VALCC     SAVE NEW ENTRY
         MVI   07(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                 START DAY-OF-THE-WEEK ROUTINES                      *
*                                                                     *
*        HANDLE THE FOLLOWING SDAY SUBPARAMETERS:                     *
*                                                                     *
*        SUNDAY/NOSUNDAY         SELECT OR BYPASS THIS DAY            *
*        MONDAY/NOMONDAY         SELECT OR BYPASS THIS DAY            *
*        TUESDAY/NOTUESDAY       SELECT OR BYPASS THIS DAY            *
*        WEDNESDAY/NOWEDNESDAY   SELECT OR BYPASS THIS DAY            *
*        THURSDAY/NOTHURSDAY     SELECT OR BYPASS THIS DAY            *
*        FRIDAY/NOFRIDAY         SELECT OR BYPASS THIS DAY            *
*        SATURDAY/NOSATURDAY     SELECT OR BYPASS THIS DAY            *
*                                                                     *
*        WEEKEND/NOWEEKEND       SELECT OR BYPASS SAT AND SUN         *
*        WEEKDAY/NOWEEKDAY       SELECT OR BYPASS MON - FRI           *
*        EVERYDAY/ALLDAYS        SELECT SUN - SAT                     *
*                                                                     *
***********************************************************************
SDSSUN   OI    SDAYSW,SUN          TURN ON SUNDAY
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
SDSNSUN  NI    SDAYSW,255-SUN      TURN OFF SUNDAY
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
SDSMON   OI    SDAYSW,MON          TURN ON MONDAY
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
SDSNMON  NI    SDAYSW,255-MON      TURN OFF MONDAY
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
SDSTUE   OI    SDAYSW,TUE          TURN ON TUESDAY
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
SDSNTUE  NI    SDAYSW,255-TUE      TURN OFF TUESDAY
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
SDSWED   OI    SDAYSW,WED          TURN ON WEDNESDAY
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
SDSNWED  NI    SDAYSW,255-WED      TURN OFF WEDNESDAY
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
SDSTHU   OI    SDAYSW,THU          TURN ON THURSDAY
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
SDSNTHU  NI    SDAYSW,255-THU      TURN OFF THURSDAY
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
SDSFRI   OI    SDAYSW,FRI          TURN ON FRIDAY
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
SDSNFRI  NI    SDAYSW,255-FRI      TURN OFF FRIDAY
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
SDSSAT   OI    SDAYSW,SAT          TURN ON SATURDAY
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
SDSNSAT  NI    SDAYSW,255-SAT      TURN OFF SATURDAY
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
SDSWE    OI    SDAYSW,SAT+SUN      TURN ON SATURDAY AND SUNDAY
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
SDSNWE   NI    SDAYSW,255-SAT-SUN  TURN OFF SATURDAY AND SUNDAY
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
SDSWD    OI    SDAYSW,MON+TUE+WED+THU+FRI TURN ON WEEKDAYS
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
SDSNWD   NI    SDAYSW,255-MON-TUE-WED-THU-FRI TURN OFF WEEKDAYS
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
SDSALLD  OI    SDAYSW,SUN+MON+TUE+WED+THU+FRI+SAT TURN ON EVERY DAY
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         EJECT
***********************************************************************
*                                                                     *
*                   END DAY-OF-THE-WEEK ROUTINES                      *
*                                                                     *
*        HANDLE THE FOLLOWING EDAY SUBPARAMETERS:                     *
*                                                                     *
*        SUNDAY/NOSUNDAY         SELECT OR BYPASS THIS DAY            *
*        MONDAY/NOMONDAY         SELECT OR BYPASS THIS DAY            *
*        TUESDAY/NOTUESDAY       SELECT OR BYPASS THIS DAY            *
*        WEDNESDAY/NOWEDNESDAY   SELECT OR BYPASS THIS DAY            *
*        THURSDAY/NOTHURSDAY     SELECT OR BYPASS THIS DAY            *
*        FRIDAY/NOFRIDAY         SELECT OR BYPASS THIS DAY            *
*        SATURDAY/NOSATURDAY     SELECT OR BYPASS THIS DAY            *
*                                                                     *
*        WEEKEND/NOWEEKEND       SELECT OR BYPASS SAT AND SUN         *
*        WEEKDAY/NOWEEKDAY       SELECT OR BYPASS MON - FRI           *
*        EVERYDAY/ALLDAYS        SELECT SUN - SAT                     *
*                                                                     *
***********************************************************************
EDSSUN   OI    EDAYSW,SUN          TURN ON SUNDAY
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
EDSNSUN  NI    EDAYSW,255-SUN      TURN OFF SUNDAY
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
EDSMON   OI    EDAYSW,MON          TURN ON MONDAY
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
EDSNMON  NI    EDAYSW,255-MON      TURN OFF MONDAY
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
EDSTUE   OI    EDAYSW,TUE          TURN ON TUESDAY
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
EDSNTUE  NI    EDAYSW,255-TUE      TURN OFF TUESDAY
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
EDSWED   OI    EDAYSW,WED          TURN ON WEDNESDAY
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
EDSNWED  NI    EDAYSW,255-WED      TURN OFF WEDNESDAY
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
EDSTHU   OI    EDAYSW,THU          TURN ON THURSDAY
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
EDSNTHU  NI    EDAYSW,255-THU      TURN OFF THURSDAY
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
EDSFRI   OI    EDAYSW,FRI          TURN ON FRIDAY
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
EDSNFRI  NI    EDAYSW,255-FRI      TURN OFF FRIDAY
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
EDSSAT   OI    EDAYSW,SAT          TURN ON SATURDAY
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
EDSNSAT  NI    EDAYSW,255-SAT      TURN OFF SATURDAY
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
EDSWE    OI    EDAYSW,SAT+SUN      TURN ON SATURDAY AND SUNDAY
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
EDSNWE   NI    EDAYSW,255-SAT-SUN  TURN OFF SATURDAY AND SUNDAY
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
EDSWD    OI    EDAYSW,MON+TUE+WED+THU+FRI TURN ON WEEKDAYS
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
EDSNWD   NI    EDAYSW,255-MON-TUE-WED-THU-FRI TURN OFF WEEKDAYS
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
EDSALLD  OI    EDAYSW,SUN+MON+TUE+WED+THU+FRI+SAT TURN ON EVERY DAY
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         EJECT
***********************************************************************
*                                                                     *
*                     JOBLEVEL OPTION                                 *
*                                                                     *
*        TURN ON THE CORRECT OPTION BIT                               *
*                                                                     *
***********************************************************************
PRMJOBL  TM    SWITCH+6,SELINT     SEE IF INTERVAL ALSO SPECIFIED
         BO    ERROR091            YES, ERROR
         OI    SWITCH+6,SELJOBL    TURN ON JOBLEVEL IND
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     INTERVAL OPTION                                 *
*                                                                     *
*        TURN ON THE CORRECT OPTION BIT                               *
*                                                                     *
***********************************************************************
PRMINT   TM    SWITCH+6,SELJOBL    SEE IF JOBLEVEL ALSO SPECIFIED
         BO    ERROR091            YES, ERROR
         OI    SWITCH+6,SELINT     TURN ON INTERVAL IND
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                    RETURN TO CALLER                                 *
*                                                                     *
***********************************************************************
PRMEND   SLR   R15,R15             SET RETURN CODE TO ZERO
PRMEND1  L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         RETURN (14,12),RC=(15)    RETURN TO CALLER
COMPOKEY CLC   0(0,R1),4(R4)       **** EXECUTE ONLY ****
PACKINDX PACK  DOUBLE,0(0,R1)      **** EXECUTE ONLY ****
         EJECT
***********************************************************************
*                                                                     *
*        VALIDITY CHECK ANY OF THE TIME PARMS.                        *
*                                                                     *
*        REGISTER 1 ON ENTRY POINTS TO THE INPUT TIME.                *
*                                                                     *
*        THE INPUT TIME MUST BE IN THE FORM HHH.MM.SS                 *
*                                                                     *
*        REGISTER 14 ON ENTRY IS THE RETURN ADDRESS.                  *
*                                                                     *
*        THE VALIDATED TIME IN THE FORM HHHMMSS WILL BE AT            *
*        LABEL TMOUT.                                                 *
*                                                                     *
*        IN AN ERROR IS DETECTED, THE RETURN CODE WILL BE SET         *
*        TO 8.                                                        *
*                                                                     *
***********************************************************************
PARMTM   ST    R14,RETURN          SAVE RETURN ADDRESS
         XC    TMOUTH,TMOUTH       SET HOURS TO ZERO
         XC    TMOUTM,TMOUTM       SET MINUTES TO ZERO
         XC    TMOUTS,TMOUTS       SET SECONDS TO ZERO
         XC    TMOUT,TMOUT         SET TIME TO ZERO
         LR    R7,R1               SAVE ADDRESS OF INPUT TIME
         CLI   0(R7),C' '          MAKE SURE INPUT TIME NOT BLANK
         BE    PARMTM8             NOT THERE, ERROR
         LR    R1,R7               SAVE ADDR OF TIME
         LA    R14,5+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PARMTM1  CLI   0(R7),C' '          END OF TIME?
         BE    PARMTM2             YES, BRANCH
         CLI   0(R7),C'.'          END OF HOURS?
         BE    PARMTM2             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    PARMTM8             YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    PARMTM8             YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PARMTM1         LOOP
         B     PARMTM8             TOO LONG, ERROR
PARMTM2  BCTR  R15,0               MAKE LENGTH OF TIME REL ZERO
         EX    R15,PACKINDX        PACK TIME
         CP    DOUBLE,=P'999'      SEE IF EXCEEDS 999 HOURS
         BH    PARMTM8             YES, ERROR
         CVB   R15,DOUBLE          CONVERT HOURS TO BINARY
         ST    R15,TMOUTH          SAVE HOURS
         CLI   0(R7),C'.'          SEE IF ANY MORE?
         BNE   PARMTM7             NO, DONE
         LA    R7,1(,R7)           INCREMENT PAST '.'
         LR    R1,R7               SAVE ADDRESS OF TIME
         LA    R14,4+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
         CLI   0(R7),C' '          END OF TIME?
         BE    PARMTM7             YES, DONE
PARMTM3  CLI   0(R7),C' '          END OF TIME?
         BE    PARMTM4             YES, BRANCH
         CLI   0(R7),C'.'          END OF MINUTES?
         BE    PARMTM4             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    PARMTM8             YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    PARMTM8             YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PARMTM3         LOOP
         B     PARMTM8             TOO LONG, ERROR
PARMTM4  LTR   R15,R15             TEST FOR ZERO LENGTH MINUTES
         BE    PARMTM8             YES, ERROR
         BCTR  R15,0               MAKE LENGTH OF TIME REL ZERO
         EX    R15,PACKINDX        PACK TIME
         CP    DOUBLE,=P'59'       SEE IF EXCEEDS 59 MINUTES
         BH    PARMTM8             YES, ERROR
         CVB   R15,DOUBLE          CONVERT MINUTES TO BINARY
         ST    R15,TMOUTM          SAVE MINUTES
         CLI   0(R7),C'.'          SEE IF ANY MORE?
         BNE   PARMTM7             NO, DONE
         LA    R7,1(,R7)           INCREMENT PAST '.'
         LR    R1,R7               SAVE ADDRESS OF TIME
         LA    R14,4+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
         CLI   0(R7),C' '          END OF TIME?
         BE    PARMTM7             YES, DONE
PARMTM5  CLI   0(R7),C' '          END OF TIME?
         BE    PARMTM6             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    PARMTM8             YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    PARMTM8             YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PARMTM5         LOOP
         B     PARMTM8             TOO LONG, ERROR
PARMTM6  LTR   R15,R15             TEST FOR ZERO LENGTH SECONDS
         BE    PARMTM8             YES, ERROR
         BCTR  R15,0               MAKE LENGTH OF TIME REL ZERO
         EX    R15,PACKINDX        PACK ET
         CP    DOUBLE,=P'59'       SEE IF EXCEEDS 59 SECONDS
         BH    PARMTM8             YES, ERROR
         CVB   R15,DOUBLE          CONVERT SECONDS TO BINARY
         ST    R15,TMOUTS          SVE SECONDS
PARMTM7  SLR   R15,R15             CLEAR TIME VALUE
         L     R14,TMOUTH          LOAD HOURS
         MH    R14,=H'3600'        MULTIPLY BY SECONDS/HOUR
         AR    R15,R14             ADD TO ACCUMULATOR
         L     R14,TMOUTM          LOAD MINUTES
         MH    R14,=H'60'          MULTIPLY BY SECONDS/MINUTE
         AR    R15,R14             ADD TO ACCUMULATOR
         A     R15,TMOUTS          ADD SECONDS TO ACCUMULATOR
         MH    R15,=H'100'         MULTIPLY BY 100 FOR HUNDRETHS
         ST    R15,TMOUT           SAVE TIME IN HUNDRETHS OF A SECOND
         B     PARMTM9             DONE
PARMTM8  LA    R15,8               SET RETURN CODE TO 8
         B     PARMTM10            RETURN TO CALLER
PARMTM9  LA    R15,0               SET RETURN CODE TO 0
PARMTM10 L     R14,RETURN          RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        ERROR ROUTINES FOR PRMCHK ROUTINE                            *
*                                                                     *
***********************************************************************
ERROR001 LA    R15,1               LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR002 LA    R15,2               LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR003 LA    R15,3               LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR004 LA    R15,4               LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR005 LA    R15,5               LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR006 LA    R15,6               LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR007 LA    R15,7               LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR008 LA    R15,8               LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR009 LA    R15,9               LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR010 LA    R15,10              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR011 LA    R15,11              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR012 LA    R15,12              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR014 LA    R15,14              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR015 LA    R15,15              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR016 LA    R15,16              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR017 LA    R15,17              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR018 LA    R15,18              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR019 LA    R15,19              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR020 LA    R15,20              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR021 LA    R15,21              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR022 LA    R15,22              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR023 LA    R15,23              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR024 LA    R15,24              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR025 LA    R15,25              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR026 LA    R15,26              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR027 LA    R15,27              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR028 LA    R15,28              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR029 LA    R15,29              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR032 LA    R15,32              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR033 LA    R15,33              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR034 LA    R15,34              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR035 LA    R15,35              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR036 LA    R15,36              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR037 LA    R15,37              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR038 LA    R15,38              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR039 LA    R15,39              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR040 LA    R15,40              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR041 LA    R15,41              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR042 LA    R15,42              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR043 LA    R15,43              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR044 LA    R15,44              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR045 LA    R15,45              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR049 LA    R15,49              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR050 LA    R15,50              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR051 LA    R15,51              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR052 LA    R15,52              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR053 LA    R15,53              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR054 LA    R15,54              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR055 LA    R15,55              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR056 LA    R15,56              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR057 LA    R15,57              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR058 LA    R15,58              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR059 LA    R15,59              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR060 LA    R15,60              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR061 LA    R15,61              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR062 LA    R15,62              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR063 LA    R15,63              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR064 LA    R15,64              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR065 LA    R15,65              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR066 LA    R15,66              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR067 LA    R15,67              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR068 LA    R15,68              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR069 LA    R15,69              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR070 LA    R15,70              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR071 LA    R15,71              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR072 LA    R15,72              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR073 LA    R15,73              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR074 LA    R15,74              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR075 LA    R15,75              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR076 LA    R15,76              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR077 LA    R15,77              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR078 LA    R15,78              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR079 LA    R15,79              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR080 LA    R15,80              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR081 LA    R15,81              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR082 LA    R15,82              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR083 LA    R15,83              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR084 LA    R15,84              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR085 LA    R15,85              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR086 LA    R15,86              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR087 LA    R15,87              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR088 LA    R15,88              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR089 LA    R15,89              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR091 LA    R15,91              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR092 LA    R15,92              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR093 LA    R15,93              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR094 LA    R15,94              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
         SPACE 3
         LTORG
SAVE5    DS    18F                 ROUTINE SAVE AREA
         DROP  R9,R10,R11,R12
         POP   USING
         EJECT
         PUSH  USING
***********************************************************************
*                                                                     *
*                              DATERTN                                *
*                                                                     *
*                   CONVERT DATES TO OTHER FORMATS                    *
*                                                                     *
*        THIS ROUTINE WILL CONVERT AN INPUT DATE FIELD IN ONE         *
*        DATE FORMAT TO ANOTHER FORMAT IN THE OUTPUT FIELD.           *
*        THE DATE TYPES ARE AS FOLLOWS:                               *
*                                                                     *
*        JULIAN    - 4 DIGIT PACKED DECIMAL DATE (YYYYDDDS)           *
*                                                                     *
*        GREGORIAN - 5 DIGIT PACKED DECIMAL DATE (0YYYYMMDDS)         *
*                                                                     *
*        CENTURY   - 4 BYTE FULLWORD NUMBER OF DAYS SINCE             *
*                    DECEMBER 31, 1899.                               *
*                                                                     *
*                                                                     *
*        REGISTER 1 ON ENTRY TO THIS ROUTINE POINTS TO A LIST OF      *
*        THREE ADDRESSES.  THEY ARE AS FOLLOWS:                       *
*                                                                     *
*        1 - ADDRESS OF A 2 BYTE FIELD IDENTIFYING THE TYPE OF        *
*            CONVERSTION TO PERFORM.  IT WILL BE A CHARACTER          *
*            COMBINATION AS FOLLOWS:                                  *
*                                                                     *
*            JG - CONVERT FIELD 1 FROM JULIAN TO FIELD 2 AS           *
*                 GREGORIAN                                           *
*                                                                     *
*            JC - CONVERT FIELD 1 FROM JULIAN TO FIELD 2 AS           *
*                 CENTURY                                             *
*                                                                     *
*            GJ - CONVERT FIELD 1 FROM GREGORIAN TO FIELD 2 AS        *
*                 JULIAN                                              *
*                                                                     *
*            GC - CONVERT FIELD 1 FROM GREGORIAN TO FIELD 2 AS        *
*                 CENTURY                                             *
*                                                                     *
*            CJ - CONVERT FIELD 1 FROM CENTURY TO FIELD 2 AS          *
*                 JULIAN                                              *
*                                                                     *
*            CG - CONVERT FIELD 1 FROM CENTURY TO FIELD 2 AS          *
*                 GREGORIAN                                           *
*                                                                     *
*        2 - ADDRESS OF THE INPUT FIELD.  THE TYPE OF CONVERSION      *
*            REQUESTED WILL INDICATE THE FORMAT OF THIS FIELD         *
*                                                                     *
*        3 - ADDRESS OF THE OUTPUT FIELD.  THE TYPE OF CONVERSION     *
*            REQUESTED WILL INDICATE THE FORMAT OF THIS FIELD         *
*                                                                     *
*                                                                     *
*                                                                     *
*        REGISTER 15 ON RETURN TO THE CALLER WILL CONTAIN THE         *
*        RETURN CODE FROM CONVERSION.  THE RETURN CODES ARE           *
*        AS FOLLOWS:                                                  *
*                                                                     *
*         0 - CONVERSION WAS SUCCESSFUL                               *
*                                                                     *
*         8 - CONVERSION FAILED DUE TO INVALID INPUT PARM LIST        *
*                                                                     *
*        16 - CONVERSION FAILED DUE TO INVALID INPUT DATE SYNTAX      *
*                                                                     *
***********************************************************************
DATERTN  CSECT
         SAVE  (14,12)             SAVE REGISTERS
         USING DATERTN,R9,R10,R11,R12 SET ADDRESSABILITY TO ROUTINE
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,SAVE6           LOAD ADDR OF NEW SAVE AREA
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
         ST    R1,DTPARM           SAVE ADDRESS OF PARM LIST
***********************************************************************
*                                                                     *
*        VALIDATE THE INPUT PARM LIST                                 *
*                                                                     *
***********************************************************************
DTP      L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,0(R1)            LOAD PARM 1 ADDRESS
         MVC   DTYPE,0(R2)         SAVE DATE TYPE
         CLC   DTYPE,=C'JG'        SEE IF JULIAN/GREGORIAN
         BE    DTPJG               YES, GO DO IT
         CLC   DTYPE,=C'JC'        SEE IF JULIAN/CENTURY
         BE    DTPJC               YES, GO GO IT
         CLC   DTYPE,=C'GJ'        SEE IF GREGORIAN/JULIAN
         BE    DTPGJ               YES, GO DO IT
         CLC   DTYPE,=C'GC'        SEE IF GREGORIAN/CENTURY
         BE    DTPGC               YES, GO GO IT
         CLC   DTYPE,=C'CJ'        SEE IF CENTURY/JULIAN
         BE    DTPCJ               YES, GO DO IT
         CLC   DTYPE,=C'CG'        SEE IF CENTURY/GREGORIAN
         BE    DTPCG               YES, GO DO IT
         B     DTRC8               INVALID, GET OUT RC=8
DTPJG    L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,4(R1)            LOAD PARM 2 ADDRESS
         MVC   DTJUL,0(R2)         SAVE JULIAN DATE
         BAL   R14,DTVJUL          GO VALIDATE JULIAN FORMAT
         BAL   R14,DTJG            GO CONVERT TO GREGORIAN FORMAT
         L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,8(R1)            LOAD PARM 3 ADDRESS
         MVC   0(05,R2),DTGREG     RETURN GREGORIAN DATE
         B     DTRC0               RETURN TO CALLER
DTPJC    L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,4(R1)            LOAD PARM 2 ADDRESS
         MVC   DTJUL,0(R2)         SAVE JULIAN DATE
         BAL   R14,DTVJUL          GO VALIDATE JULIAN FORMAT
         BAL   R14,DTJC            GO CONVERT TO CENTURY FORMAT
         L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,8(R1)            LOAD PARM 3 ADDRESS
         MVC   0(04,R2),DTCENT     RETURN CENTURY DATE
         B     DTRC0               RETURN TO CALLER
DTPGJ    L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,4(R1)            LOAD PARM 2 ADDRESS
         MVC   DTGREG,0(R2)        SAVE GREGORIAN DATE
         BAL   R14,DTVGRG          GO VALIDATE GREGORIAN FORMAT
         BAL   R14,DTGJ            GO CONVERT TO JULIAN FORMAT
         L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,8(R1)            LOAD PARM 3 ADDRESS
         MVC   0(04,R2),DTJUL      RETURN JULIAN DATE
         B     DTRC0               RETURN TO CALLER
DTPGC    L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,4(R1)            LOAD PARM 2 ADDRESS
         MVC   DTGREG,0(R2)        SAVE GREGORIAN DATE
         BAL   R14,DTVGRG          GO VALIDATE GREGORIAN FORMAT
         BAL   R14,DTGJ            GO CONVERT TO JULIAN FORMAT
         BAL   R14,DTJC            GO CONVERT TO CENTURY FORMAT
         L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,8(R1)            LOAD PARM 3 ADDRESS
         MVC   0(04,R2),DTCENT     RETURN CENTURY DATE
         B     DTRC0               RETURN TO CALLER
DTPCJ    L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,4(R1)            LOAD PARM 2 ADDRESS
         MVC   DTCENT,0(R2)        SAVE CENTURY DATE
         BAL   R14,DTVCEN          GO VALIDATE CENTURY FORMAT
         BAL   R14,DTCJ            GO CONVERT TO JULIAN FORMAT
         L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,8(R1)            LOAD PARM 3 ADDRESS
         MVC   0(04,R2),DTJUL      RETURN JULIAN DATE
         B     DTRC0               RETURN TO CALLER
DTPCG    L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,4(R1)            LOAD PARM 2 ADDRESS
         MVC   DTCENT,0(R2)        SAVE CENTURY DATE
         BAL   R14,DTVCEN          GO VALIDATE CENTURY FORMAT
         BAL   R14,DTCJ            GO CONVERT TO JULIAN FORMAT
         BAL   R14,DTJG            GO CONVERT TO GREGORIAN FORMAT
         L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,8(R1)            LOAD PARM 3 ADDRESS
         MVC   0(05,R2),DTGREG     RETURN GREGORIAN DATE
         B     DTRC0               RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        RETURN TO CALLER                                             *
*                                                                     *
***********************************************************************
DTRC0    L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         RETURN (14,12),RC=0       RETURN TO CALLER WITH RC=0
         SPACE 3
DTRC8    L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         RETURN (14,12),RC=8       RETURN TO CALLER WITH RC=8
         SPACE 3
DTRC16   L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         RETURN (14,12),RC=16      RETURN TO CALLER WITH RC=16
         EJECT
***********************************************************************
*                                                                     *
*        VALIDATE THAT JULIAN DATE IS IN FORMAT YYYY.DDD              *
*                                                                     *
***********************************************************************
DTVJUL   UNPK  DTVER,DTJUL         UNPACK JULIAN DATE
         OI    DTVER+7,X'F0'       MAKE PRINTABLE
DTVJUL01 LA    R15,8               SET FIELD LENGTH
         LA    R1,DTVER            POINT TO START OF FIELD
DTVJUL02 CLI   0(R1),C'0'          SEE IF NUMERIC
         BL    DTRC16              NO, GET OUT RC=16
         CLI   0(R1),C'9'          SEE IF NUMERIC
         BH    DTRC16              NO, GET OUT RC=16
DTVJUL03 LA    R1,1(,R1)           POINT TO NEXT CHARACTER IN FIELD
         BCT   R15,DTVJUL02        LOOP
         CLC   DTVER+1(2),=C'19'   TEST CENTURY PORTION OF DATE
         BL    DTRC16              BEFORE 1900, GET OUT RC=16
         CLC   DTVER+1(2),=C'20'   TEST CENTURY PORTION OF DATE
         BH    DTRC16              AFTER 2099, GET OUT RC=16
         NI    DTMISC,255-LEAPYEAR TURN OFF LEAP YEAR INDICATOR
         PACK  DTDBL,DTVER+1(4)    PACK YEAR
         DP    DTDBL,=P'4'         DIVIDE BY 4
         CP    DTDBL+7(1),=P'0'    TEST REMAINDER
         BNZ   DTVJUL04            NOT ZERO, NOT LEAP YEAR
         OI    DTMISC,LEAPYEAR     TURN ON LEAP YEAR INDICATOR
         MVC   DTDAYTBL+2(2),=H'29' SET FEB TO 29 DAYS
DTVJUL04 PACK  DTDBL,DTVER+5(3)    PACK JULIAN DAY
         CVB   R2,DTDBL            CONVERT JULIAN DAY TO BINARY
         LTR   R2,R2               SEE IF JULIAN DAY IS ZERO
         BZ    DTRC16              YES, GET OUT RC=16
         CH    R2,=H'365'          SEE IF JULIAN DAY IS GT 365
         BNH   DTVJUL05            NO, OK
         CH    R2,=H'366'          SEE IF JULIAN DAY IS GT 366
         BH    DTRC16              YES, GET OUT RC=16
         TM    DTMISC,LEAPYEAR     SEE IF LEAP YEAR
         BNO   DTRC16              NO, GET OUT RC=16
DTVJUL05 BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        VALIDATE THAT GREGORIAN DATE IS IN FORMAT YYYY/MM/DD         *
*                                                                     *
***********************************************************************
DTVGRG   UNPK  DTVER,DTGREG        UNPACK GREGORIAN DATE
         OI    DTVER+7,X'F0'       MAKE PRINTABLE
DTVGRG01 LA    R15,8               SET FIELD LENGTH
         LA    R1,DTVER            POINT TO START OF FIELD
DTVGRG02 CLI   0(R1),C'0'          SEE IF NUMERIC
         BL    DTRC16              NO, GET OUT RC=16
         CLI   0(R1),C'9'          SEE IF NUMERIC
         BH    DTRC16              NO, GET OUT RC=16
DTVGRG03 LA    R1,1(,R1)           POINT TO NEXT CHARACTER IN FIELD
         BCT   R15,DTVGRG02        LOOP
         CLC   DTVER(2),=C'19'     TEST CENTURY PORTION OF DATE
         BL    DTRC16              BEFORE 1900, GET OUT RC=16
         CLC   DTVER(2),=C'20'     TEST CENTURY PORTION OF DATE
         BH    DTRC16              AFTER 2099, GET OUT RC=16
         CLC   DTVER+4(2),=C'00' SEE IF MONTH IS ZERO
         BE    DTRC16              YES, GET OUT RC=16
         CLC   DTVER+4(2),=C'12' SEE IF MONTH IS GREATER THAN 12
         BH    DTRC16              YES, GET OUT RC=16
         NI    DTMISC,255-LEAPYEAR TURN OFF LEAP YEAR INDICATOR
         PACK  DTDBL,DTVER(4)      PACK YEAR
         DP    DTDBL,=P'4'         DIVIDE BY 4
         CP    DTDBL+7(1),=P'0'    TEST REMAINDER
         BNZ   DTVGRG04            NOT ZERO, NOT LEAP YEAR
         OI    DTMISC,LEAPYEAR     TURN ON LEAP YEAR INDICATOR
         MVC   DTDAYTBL+2(2),=H'29' SET FEB TO 29 DAYS
DTVGRG04 PACK  DTDBL,DTVER+4(2)    PACK MONTH
         CVB   R2,DTDBL            CONVERT MONTH TO BINARY
         BCTR  R2,0                MAKE RELATIVE TO ZERO
         SLA   R2,1                MULTIPLY BY 2 FOR TABLE OFFSET
         A     R2,=A(DTDAYTBL)     CALCULATE ENTRY IN DAY TABLE
         PACK  DTDBL,DTVER+6(2)    PACK DAY
         CVB   R3,DTDBL            CONVERT DAY TO BINARY
         LTR   R3,R3               SEE IF DAY IS ZERO
         BZ    DTRC16              YES, GET OUT RC=16
         CH    R3,0(R2)            SEE IF DAY EXCEEDS MAX FOR MONTH
         BH    DTRC16              YES, GET OUT RC=16
         BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        VALIDATE THAT CENTURY DATE IS IN FORMAT NNNNNN AND           *
*        NOT GREATER THAN 2 CENTURIES LONG                            *
*                                                                     *
***********************************************************************
DTVCEN   L     R15,DTCENT          LOAD CENTURY DATE
         CH    R15,=H'1'           TEST DATE
         BL    DTRC16              ZERO OR NEGATIVE, GET OUT RC=16
         C     R15,=F'73050'       TEST DATE
         BH    DTRC16              GT 200 YEARS, GET OUT RC=16
         BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        CONVERT JULIAN DATE TO GREGORIAN                             *
*                                                                     *
*        THE INPUT JULIAN DATE IS IN FIELD DTJUL                      *
*        THE OUTPUT GREGORIAN DATE WILL BE IN FIELD DTGREG            *
*                                                                     *
***********************************************************************
DTJG     NI    DTMISC,255-LEAPYEAR TURN OFF LEAP YEAR INDICATOR
         ZAP   DTDBL,DTJUL         MOVE JULIAN DATE TO WORK
         SRP   DTDBL,64-3,0        SHIFT OFF DAY TO LEAVE ONLY YEAR
         ZAP   DTGREG,DTDBL        SET GREGORIAN YEAR
         DP    DTDBL,=P'4'         DIVIDE YEAR BY 4
         CP    DTDBL+7(1),=P'0'    TEST REMAINDER
         BNZ   DTJG01              NOT ZERO, NOT LEAP YEAR
         OI    DTMISC,LEAPYEAR     TURN ON LEAP YEAR INDICATOR
         MVC   DTDAYTBL+2(2),=H'29' SET FEB TO 29 DAYS
DTJG01   LA    R2,12               SET LOOP COUNTER
         LA    R3,1                SET MONTH COUNTER
         ZAP   DTDBL,DTJUL+2(2)    MOVE JULIAN DAY TO WORK
         CVB   R1,DTDBL            CONVERT DAY TO BINARY
         LA    R15,DTDAYTBL        LOAD ADDR OF DAY OF THE MONTH TABLE
DTJG02   CH    R1,0(R15)           SEE IF DAYS GT DAYS IN THIS MONTH
         BNH   DTJG03              NO, DONE
         SH    R1,0(R15)           SUBTRACT DAYS IN THIS MONTH FROM TOT
         LA    R3,1(,R3)           ADD 1 TO MONTH COUNTER
         LA    R15,2(,R15)         INCREMENT TO NEXT ENTRY IN DAY TABLE
         BCT   R2,DTJG02           LOOP
DTJG03   CVD   R3,DTDBL            CONVERT MONTH TO PACKED
         SRP   DTGREG,2,0          SHIFT YEAR FOR MONTH
         AP    DTGREG,DTDBL        ADD MONTH TO GREGORIAN DATE
         CVD   R1,DTDBL            CONVERT DAY TO PACKED
         SRP   DTGREG,2,0          SHIFT YEAR AND MONTH FOR DAY
         AP    DTGREG,DTDBL        ADD DAY TO GREGORIAN DATE
DTJG04   BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        CONVERT GREGORIAN DATE TO JULIAN                             *
*                                                                     *
*        THE INPUT GREGORIAN DATE IS IN FIELD DTGREG                  *
*        THE OUTPUT JULIAN DATE WILL BE IN FIELD DTJUL                *
*                                                                     *
***********************************************************************
DTGJ     NI    DTMISC,255-LEAPYEAR TURN OFF LEAP YEAR INDICATOR
         ZAP   DTDBL,DTGREG        MOVE GREGORIAN DATE TO WORK
         SRP   DTDBL,64-4,0        SHIFT OFF MONTH AND DAY LEAVING YEAR
         ZAP   DTJUL,DTDBL         SET JULIAN YEAR
         DP    DTDBL,=P'4'         DIVIDE BY 4
         CP    DTDBL+7(1),=P'0'    TEST REMAINDER
         BNZ   DTGJ01              NOT ZERO, NOT LEAP YEAR
         OI    DTMISC,LEAPYEAR     TURN ON LEAP YEAR INDICATOR
         MVC   DTDAYTBL+2(2),=H'29' SET FEB TO 29 DAYS
DTGJ01   ZAP   DTDBL,DTGREG+2(3)   MOVE YEAR AND DAY TO WORK
         NI    DTDBL+5,X'0F'       SANITIZE IT
         SRP   DTDBL,64-2,0        SHIFT OFF DAY LEAVING MONTH
         CVB   R2,DTDBL            SET LOOP COUNTER TO MONTH
         SLR   R3,R3               SET JULIAN DAY TO ZERO
         ZAP   DTDBL,DTGREG+3(2)   MOVE DAY TO WORK
         NI    DTDBL+6,X'0F'       SANITIZE IT
         CVB   R1,DTDBL            CONVERT DAY TO BINARY
         AR    R3,R1               ADD GREGORIAN DAY TO JULIAN DAY
         LA    R15,DTDAYTBL        LOAD ADDR OF DAY OF THE MONTH TABLE
         CH    R2,=H'1'            SEE IF JANUARY
         BE    DTGJ03              YES, DO NOT DAYTBL
         BCTR  R2,0                REDUCE LOOP COUNTER BY 1
DTGJ02   AH    R3,0(R15)           ADD DAYS FOR MONTH TO JULIAN DAY
         LA    R15,2(,R15)         INCREMENT TO NEXT ENTRY IN DAY TABLE
         BCT   R2,DTGJ02           LOOP
DTGJ03   CVD   R3,DTDBL            CONVERT DAYS TO PACKED
         SRP   DTJUL,3,0           SHIFT YEAR FOR DAY
         AP    DTJUL,DTDBL         ADD DAY TO JULIAN DATE
DTGJ04   BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        CONVERT JULIAN DATE TO CENTURY                               *
*                                                                     *
*        THE INPUT JULIAN DATE IS IN FIELD DTJUL                      *
*        THE OUTPUT CENTURY DATE WILL BE IN FIELD DTCENT              *
*                                                                     *
*                                                                     *
*        CDATE = ((JULYEAR - 1900) * 365) + JULDAY +                  *
*                ((JULYEAR - 1897) / 4)                               *
*                                                                     *
*                                                                     *
***********************************************************************
DTJC     SLR   R3,R3               ZERO CENTURY YEAR
DTJC01   ZAP   DTDBL,DTJUL         MOVE JULIAN DATE TO WORK
         SRP   DTDBL,64-3,0        SHIFT OFF DAY TO LEAVE ONLY YEAR
         CVB   R2,DTDBL            CONVERT YEAR TO BINARY
         SH    R2,=H'1900'         SUBTRACT 1900
         MH    R2,=H'365'          MULTIPLY BY 365
         AR    R3,R2               ADD SUBTOTAL TO CENTURY DATE
DTJC02   ZAP   DTDBL,DTJUL+2(2)    MOVE JULIAN DAY TO WORK
         CVB   R2,DTDBL            CONVERT DAY TO BINARY
         AR    R3,R2               ADD SUBTOTAL TO CENTURY DATE
DTJC03   ZAP   DTDBL,DTJUL         MOVE JULIAN DATE TO WORK
         SRP   DTDBL,64-3,0        SHIFT OFF DAY TO LEAVE ONLY YEAR
         CVB   R2,DTDBL            CONVERT YEAR TO BINARY
         SH    R2,=H'1897'         SUBTRACT 1897
         SRA   R2,2                DIVIDE BY 4
         AR    R3,R2               ADD SUBTOTAL TO CENTURY DATE
         ST    R3,DTCENT           SAVE CENTURY DATE
DTJC04   BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        CONVERT CENTURY DATE TO JULIAN                               *
*                                                                     *
*        THE INPUT CENTURY DATE IS IN FIELD DTCENT                    *
*        THE OUTPUT JULIAN DATE WILL BE IN FIELD DTJUL                *
*                                                                     *
***********************************************************************
DTCJ     LA    R2,1900             SET YEAR TO 1900
         L     R3,DTCENT           LOAD CENTURY DATE
DTCJ01   LA    R15,365             SET MAX DAYS FOR YEAR TO 365
         CVD   R2,DTDBL            CONVERT YEAR TO PACKED
         DP    DTDBL,=P'4'         DIVIDE BY 4
         CP    DTDBL+7(1),=P'0'    TEST REMAINDER
         BNZ   DTCJ02              NOT ZERO, NOT LEAP YEAR
         LA    R15,366             SET MAX DAYS FOR YEAR TO 366
DTCJ02   CR    R3,R15              SEE IF LAST YEAR
         BNH   DTCJ03              YES, BRANCH
         SR    R3,R15              SUBTRACT DAYS FOR YEAR FROM TOTAL
         LA    R2,1(,R2)           INCREMENT TO NEXT YEAR
         B     DTCJ01              LOOP
DTCJ03   CVD   R2,DTDBL            CONVERT YEAR TO PACKED
         ZAP   DTJUL,DTDBL         MOVE YEAR TO JULIAN DATE
         SRP   DTJUL,3,0           SHIFT YEAR FOR DAYS
DTCJ04   CVD   R3,DTDBL            CONVERT DAYS TO PACKED
         AP    DTJUL,DTDBL         ADD DAYS TO JULIAN DATE
DTCJ05   BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*        CONSTANTS AND WORK AREAS                                     *
***********************************************************************
         LTORG
SAVE6    DS    18F
DTPARM   DS    F                   ADDRESS OF INPUT PARM
DTDBL    DS    D                   DOUBLE WORD WORK AREA
DTVER    DS    D                   DOUBLE WORD WORK AREA
DTYPE    DS    CL2                 INPUT DATE CONVERSION TYPE
DTJUL    DS    PL4                 JULIAN DATE (YYYYDDDS)
DTGREG   DS    PL5                 GREGORIAN DATE (0YYYYNNDDS)
DTCENT   DS    F                   CENTURY DATE (NNNNN)
DTMISC   DC    X'00'               MISCELLANEOUS BIT SWITCHES
LEAPYEAR EQU   X'80'               SPECIFIED YEAR IS A LEAP YEAR
***********************************************************************
*        DAY-PER-MONTH TABLE                                          *
***********************************************************************
DTDAYTBL DS    0H
         DC    H'31'
         DC    H'28'
         DC    H'31'
         DC    H'30'
         DC    H'31'
         DC    H'30'
         DC    H'31'
         DC    H'31'
         DC    H'30'
         DC    H'31'
         DC    H'30'
         DC    H'31'
         DROP  R9,R10,R11,R12
         POP   USING
CONSTANT CSECT
***********************************************************************
*                                                                     *
*        PROGRAM CONSTANTS AND WORK AREAS                             *
*                                                                     *
***********************************************************************
JG       DC    C'JG'               CONVERT DATE CONSTANT
JC       DC    C'JC'               CONVERT DATE CONSTANT
CJ       DC    C'CJ'               CONVERT DATE CONSTANT
CG       DC    C'CG'               CONVERT DATE CONSTANT
GJ       DC    C'GJ'               CONVERT DATE CONSTANT
GC       DC    C'GC'               CONVERT DATE CONSTANT
LOWDATE  DC    PL4'9999999'        LOWEST DATE IN SMF DATA
LOWTIME  DC    X'7FFFFFFF'         LOWEST TIME IN SMF DATA
HIGHDATE DC    PL4'0'              HIGHEST DATE IN SMF DATA
HIGHTIME DC    F'0'                HIGHEST TIME IN SMF DATA
ABCODE   DS    F                   SAVE AREA FOR USER ABEND CODE
RETURN   DS    F                   SAVE AREA FOR ROUTINE ADDRESS
SAVEPRMD DS    18F                 SAVE AREA FOR PRMDTT ROUTINE
WKDAYRET DS    F                   RETURN ADDRESS FROM WKDAY
DATEJUL  DS    PL4                 JULIAN DATE (YYYYDDDS)
DATEGREG DS    PL5                 GREGORIAN DATE (0YYYYMMDDS)
DATEWORK DS    ZL8                 DATE WORK AREA
DOUBLE   DS    D                   DOUBLE WORD WORK AREA
WORK     DS    16C                 MISCELLANEOUS WORK AREA
DBL      DS    D                   DOUBLE WORD WORK AREA
PJDATE   DS    XL4                 SMF DATE (YYYYDDDS)
MMB      DS    H                   BINARY MONTH
DDB      DS    H                   BINARY DAY
YYYYB    DS    H                   BINARY YEAR
DAYOFWK  DS    H                   DAY-OF-WEEK NUMBER
         SPACE 3
BIGMASK1 DC    X'40202020202020202020202020202020202020206B2020206B2020X
               206B2020206B202120'
BIGMASK2 DC    X'4040202020202020202020202020202020206B2020206B2020206BX
               2021207A20207A2020'
BIGMASK3 DC    X'402020202020202020202020202020202020202020206B2020206BX
               2020206B2021204B20'
BIGMASK4 DC    X'40402020202020202020202020206B2020206B2020206B202120'
BIGMASK5 DC    X'4020202020202020202020206B2020206B2021207A20207A2020'
BIGMASK6 DC    X'4020202020202020202020206B2020206B2020206B2021204B20'
ASTERS1  DC    C'               ****************     '
ASTERS2  DC    C'     ****************     '
RETADD   DC    F'0'                RETURN ADDRESS FROM CURRENT ROUTINE
VALJOBNM DC    X'00',X'00',CL8' '  DEFAULT JOBNAME VALUE
JOBNMTBL DC    F'0'                JOBNAME TABLE
XJOBNTBL DC    F'0'                EXCLUDED JOBNAME TABLE
VALJOBNO DC    CL8' '              DEFAULT JOBNO VALUE
JOBNOTBL DC    F'0'                JOB NUMBER TABLE
XJBNOTBL DC    F'0'                EXCLUDED JOB NUMBER TABLE
DATETBL  DC    F'0'                DATE TABLE
VALTIME  DC    C'00.00',C'99.99'   DEFAULT TIME RANGES
STIMETBL DC    F'0'                START TIME TABLE
ETIMETBL DC    F'0'                STOP  TIME TABLE
VALSYSID DC    C'    '             DEFAULT SYSID VALUE
SYSIDTBL DC    F'0'                SYSID TABLE
XSYSTBL  DC    F'0'                EXCLUDED SYSID TABLE
VALPSTEP DC    AL2(0),CL8' '       DEFAULT PROC STEP VALUE
PSTEPTBL DC    F'0'                PROC STEP NAME TABLE
XPSTPTBL DC    F'0'                EXCLUDED PROC STEP NAME TABLE
VALJSTEP DC    AL2(0),CL8' '       DEFAULT JOB  STEP VALUE
JSTEPTBL DC    F'0'                JOB STEP NAME TABLE
XJSTPTBL DC    F'0'                EXCLUDED JOB STEP NAME TABLE
VALPGM   DC    AL2(0),CL8' '       DEFAULT PROGRAM VALUE
PGMTBL   DC    F'0'                PROGRAM NAME TABLE
XPGMTBL  DC    F'0'                EXCLUDED PROGRAM NAME TABLE
VALUID   DC    AL2(0),CL8' '       DEFAULT USERID VALUE
UIDTBL   DC    F'0'                USERID NAME TABLE
XUIDTBL  DC    F'0'                EXCLUDED USERID NAME TABLE
VALCC    DC    AL2(0),CL5' '       DEFAULT CCODE VALUE
CCTBL    DC    F'0'                CONDITION CODE TABLE
XCCTBL   DC    F'0'                EXCLUDED CONDITION CODE TABLE
VALETGE  DC    F'0'                DEFAULT ELAPTIME GE VALUE
VALETLE  DC    F'0'                DEFAULT ELAPTIME LE VALUE
VALBCGE  DC    F'0'                DEFAULT BLOCK COUNT GE VALUE
VALBCLE  DC    F'0'                DEFAULT BLOCK COUNT LE VALUE
VALCTGE  DC    F'0'                DEFAULT CPUTIME GE VALUE
VALCTLE  DC    F'0'                DEFAULT CPUTIME LE VALUE
VALRBGE  DC    F'0'                DEFAULT REGION BELOW GE VALUE
VALRBLE  DC    F'0'                DEFAULT REGION BELOW LE VALUE
VALRAGE  DC    F'0'                DEFAULT REGION ABOVE GE VALUE
VALRALE  DC    F'0'                DEFAULT REGION ABOVE LE VALUE
VALMNTGE DC    F'0'                DEFAULT MOUNTS GE VALUE
VALMNTLE DC    F'0'                DEFAULT MOUNTS LE VALUE
VALCPPGE DC    F'0'                DEFAULT CPUPCT GE VALUE
VALCPPLE DC    F'0'                DEFAULT CPUPCT LE VALUE
VALTYPE  DC    C' '                DEFAULT JOB TYPE
VALSTCNT DC    F'0'                DEFAULT STOP COUNT
VALPTPGE DC    F'0'                DEFAULT PERM TAPE GE VALUE
VALPTPLE DC    F'0'                DEFAULT PERM TAPE LE VALUE
VALSTPGE DC    F'0'                DEFAULT SCRATCH TAPE GE VALUE
VALSTPLE DC    F'0'                DEFAULT SCRATCH TAPE LE VALUE
VALEPGGE DC    F'0'                DEFAULT EXT STG PAGING GE VALUE
VALEPGLE DC    F'0'                DEFAULT EXT STG PAGING LE VALUE
VALAPGGE DC    F'0'                DEFAULT AUX STG PAGING GE VALUE
VALAPGLE DC    F'0'                DEFAULT AUX STG PAGING LE VALUE
VALSUSGE DC    F'0'                DEFAULT SERV UNITS GE VALUE
VALSUSLE DC    F'0'                DEFAULT SERV UNITS LE VALUE
VALVIOGE DC    F'0'                DEFAULT VIO PAGES GE VALUE
VALVIOLE DC    F'0'                DEFAULT VIO PAGES LE VALUE
OUTCNT   DC    F'0'                ACTUAL OUTPUT COUNT
DATES    DC    PL4'0'              START DATE
DATEE    DC    PL4'99999'          END DATE
TIMES    DC    F'0'                START TIME
TIMEE    DC    AL4(4096*4096)      END TIME
SWITCH   DC    X'00000000000000'   MULTIPURPOSE BIT SWITCHES
*        SWITCH+0 INDICATORS
ENDFILE  EQU   X'80'               END OF FILE REACHED ON SMFIN
SELSORT  EQU   X'40'               SORT REQUESTED
SELDATE  EQU   X'20'               DATE SELECTION REQUESTED
SELSTIME EQU   X'10'               START TIME SELECTION REQUESTED
SELJOBNM EQU   X'08'               JOBNAME SELECTION REQUESTED
SELJOBNO EQU   X'04'               JOB NUMBER SELECTION REQUESTED
SELSYSID EQU   X'02'               SYSID SELECTION REQUESTED
SELPGM   EQU   X'01'               PROGRAM NAME SELECTION REQUESTED
*        SWITCH+1 INDICATORS
SELETGE  EQU   X'80'               SELECT ON ELAPTIME GE
SELETLE  EQU   X'40'               SELECT ON ELAPTIME LE
SELCTGE  EQU   X'20'               SELECT ON CPUTIME GE
SELCTLE  EQU   X'10'               SELECT ON CPUTIME LE
SELMNTGE EQU   X'08'               SELECT ON MOUNTS GE
SELMNTLE EQU   X'04'               SELECT ON MOUNTS LE
SELUID   EQU   X'02'               USERID SELECTION REQUESTED
SELCC    EQU   X'01'               CONDITION CODE SELECTION REQUESTED
*        SWITCH+2 INDICATORS
SELBCGE  EQU   X'80'               SELECT ON BLOCK COUNT GE
SELBCLE  EQU   X'40'               SELECT ON BLOCK COUNT LE
SELRBGE  EQU   X'20'               SELECT ON REGION BELOW GE
SELRBLE  EQU   X'10'               SELECT ON REGION BELOW LE
SELRAGE  EQU   X'08'               SELECT ON REGION ABOVE GE
SELRALE  EQU   X'04'               SELECT ON REGION ABOVE LE
SELCPPGE EQU   X'02'               SELECT ON CPU PERCENT GE
SELCPPLE EQU   X'01'               SELECT ON CPU PERCENT LE
*        SWITCH+3 INDICATORS
SELTYPE  EQU   X'80'               SELECT ON JOB TYPE
SELNOFLU EQU   X'40'               SELECT NO STEPS WHICH FLUSHED
SELNOABN EQU   X'20'               SELECT NO STEPS WHICH ABENDED
SELNOTST EQU   X'10'               SELECT NO TEST JOBS
SELNOPRD EQU   X'08'               SELECT NO PRODUCTION JOBS
SELNOSTC EQU   X'04'               SELECT NO STARTED TASKS
SELNOTSU EQU   X'02'               SELECT NO TSO USERS
SELSTCNT EQU   X'01'               SELECT ON STOP COUNT
*        SWITCH+4 INDICATORS
SELPSTEP EQU   X'80'               SELECT ON PROC STEP
SELJSTEP EQU   X'40'               SELECT ON JOB STEP
SELSUSGE EQU   X'20'               SELECT ON SERV UNITS GE
SELSUSLE EQU   X'10'               SELECT ON SERV UNITS LE
SELTOT   EQU   X'08'               WANT ACCUMULATED TOTALS
SELAVG   EQU   X'04'               WANT AVERAGES OF TOTALS
SELNODET EQU   X'02'               DO NOT WANT DETAIL REPORT
SELPRINT EQU   X'01'               SELECTIVE PRINT
*        SWITCH+5 INDICATORS
SELPTPGE EQU   X'80'               SELECT ON PERM TAPES GE
SELPTPLE EQU   X'40'               SELECT ON PERM TAPES LE
SELSTPGE EQU   X'20'               SELECT ON SCRATCH TAPES GE
SELSTPLE EQU   X'10'               SELECT ON SCRATCH TAPES LE
SELEPGGE EQU   X'08'               SELECT ON EXP PAGING GE
SELEPGLE EQU   X'04'               SELECT ON EXP PAGING LE
SELAPGGE EQU   X'02'               SELECT ON AUX PAGING GE
SELAPGLE EQU   X'01'               SELECT ON AUX PAGING LE
*        SWITCH+6 INDICATORS
SELVIOGE EQU   X'80'               SELECT ON VIO PAGES GE
SELVIOLE EQU   X'40'               SELECT ON VIO PAGES LE
SELSDAY  EQU   X'20'               SELECT ON START DAY-OF-WEEK
SELEDAY  EQU   X'10'               SELECT ON END   DAY-OF-WEEK
SELJOBL  EQU   X'08'               SELECT JOBLEVEL RECORDS ONLY
OPTOUT   EQU   X'04'               OPTIONAL OUTPUT FILE SPECIFIED
SELINT   EQU   X'02'               SELECT INTERVAL RECORDS ONLY
SELETIME EQU   X'01'               STOP TIME SELECTION REQUESTED
*
SDAYSW   DC    X'00'               START DAY-OF-WEEK SWITCHES
EDAYSW   DC    X'00'               END   DAY-OF-WEEK SWITCHES
SUN      EQU   X'80'               SELECT SUNDAY
MON      EQU   X'40'               SELECT MONDAY
TUE      EQU   X'20'               SELECT TUESDAY
WED      EQU   X'10'               SELECT WEDNESDAY
THU      EQU   X'08'               SELECT THURSDAY
FRI      EQU   X'04'               SELECT FRIDAY
SAT      EQU   X'02'               SELECT SATURDAY
*
***********************************************************************
*        FIXED LENGTH RECORD CREATED FROM SMF TYPE 30 RECORD          *
***********************************************************************
         CNOP  0,4
INREC    DS    0CL140
INJBN    DS    CL8              1  JOB NAME
INJNM    DS    CL8              9  JOB ID
INSJDATE DS    PL4              17 START JULIAN DATE
INSTIME  DS    F                21 START TIME (SEC/100)
INEJDATE DS    PL4              25 END JULIAN DATE
INETIME  DS    F                29 END TIME (SEC/100)
INSID    DS    CL4              33 SMF SYSTEM ID
INPSN    DS    CL8              37 PROC STEP NAME
INSTM    DS    CL8              45 JOB STEP NAME
INPGM    DS    CL8              53 PROGRAM NAME
INRUD    DS    CL8              61 SECURITY USERID
INSDAY   DS    H                69 START DAY-OF-THE-WEEK (1-7)
INEDAY   DS    H                71 END   DAY-OF-THE-WEEK (1-7)
INSTPCC  DS    CL5              73 STEP CONDITION CODE
INSGDATE DS    PL5              78 START GREGORIAN DATE
INEGDATE DS    PL5              83 END   GREGORIAN DATE
INTYPE   DS    C                88 JOB TYPE (T/P)
INELAP   DS    F                89 ELAPSED TIME (SEC/100)
INTEP    DS    F                93 STEP TOTAL EXCPS
INTOTCPU DS    F                97 STEP TOTAL CPU
INSTGB16 DS    F               101 STEP REGION USED BELOW 16M
INSTGA16 DS    F               105 STEP REGION USED ABOVE 16M
INTPR    DS    F               109 STEP TOTAL SPECIFIC TAPE MOUNTS
INPTM    DS    F               113 STEP TOTAL SCRATCH TAPE MOUNTS
INMNTS   DS    F               117 STEP TOTAL TAPE MOUNTS
INCPP    DS    F               121 STEP CPU PERCENT BUSY
INEXPTOT DS    F               125 STEP EXP STG PAGE TOTAL
INAUXTOT DS    F               129 STEP AUX STG PAGE TOTAL
INSRV    DS    F               133 STEP TOTAL SERVICE UNITS
INVIOTOT DS    F               137 STEP VIO PAGE TOTAL
         DC    CL20' '
*
DDNAME   DS    CL8                 DDNAME FIELD FOR TIOT SEARCH ROUTINE
RGNBWRK  DC    F'0'                REGION BELOW (IN M)    WORK AREA
RGNAWRK  DC    F'0'                REGION ABOVE (IN M)    WORK AREA
SUWRK    DC    F'0'                SERVICE UNITS (IN K)   WORK AREA
LINECT   DC    PL2'99'             LINE COUNTER
PAGECT   DC    PL3'0'              PAGE COUNTER
OUTTIME  DS    CL12                CONVERTED TIME AREA (HHH:MM:SS.TT)
TMOUT    DS    F                   CONVERTED TIME AREA IN SEC/100
TMOUTH   DS    F                   CONVERTED TIME (HOURS PORTION)
TMOUTM   DS    F                   CONVERTED TIME (MINUTES PORTION)
TMOUTS   DS    F                   CONVERTED TIME (SECONDS PORTION)
ACC1     DC    PL16'0'             ACCUMULATOR 1  (LINE COUNTER)
ACC2     DC    PL16'0'             ACCUMULATOR 2  (ELAP TIME)
ACC3     DC    PL16'0'             ACCUMULATOR 3  (CPU TIME)
ACC4     DC    PL16'0'             ACCUMULATOR 4  (EXCPS)
ACC5     DC    PL16'0'             ACCUMULATOR 5  (REGION BELOW)
ACC6     DC    PL16'0'             ACCUMULATOR 6  (REGION ABOVE)
ACC7     DC    PL16'0'             ACCUMULATOR 7  (TOTAL TAPES)
ACC8     DC    PL16'0'             ACCUMULATOR 8  (NON-SCRATCH TAPES)
ACC9     DC    PL16'0'             ACCUMULATOR 9  (SCRATCH TAPES)
ACC10    DC    PL16'0'             ACCUMULATOR 10 (EXP PAGING)
ACC11    DC    PL16'0'             ACCUMULATOR 11 (AUX PAGING)
ACC12    DC    PL16'0'             ACCUMULATOR 12 (SERVICE UNITS)
ACC13    DC    PL16'0'             ACCUMULATOR 13 (VIO PAGING)
ACCWRK1  DC    PL16'0'             ACCUMULATOR WORK AREA
ACCWRK2  DC    PL16'0'             ACCUMULATOR WORK AREA
ACCWRK3  DC    PL08'0'             ACCUMULATOR WORK AREA
ACCWRK4  DC    PL08'0'             ACCUMULATOR WORK AREA
STEPCNT  DC    PL05'0'             SELECTED STEP COUNT
ROUND    DC    PL05'0'             CALCULATION ROUNDING FACTOR
DAYTABLE DC    CL21'SUNMONTUEWEDTHUFRISAT' DAYS OF THE SEEK
         CNOP  0,4
SORTPARM DC    X'80',AL3(SORTA)
         DC    H'0'
SORTA    DC    H'28'               LENGTH OF PARAMETER LIST
         DC    A(SORTM)            ADDRESS OF START OF SORT STMT
         DC    A(SORTENDM)         ADDRESS OF END OF SORT STMT
         DC    A(RECM)             ADDRESS OF START OF RECORD STMT
         DC    A(RECENDM)          ADDRESS OF END OF RECORD STMT
         DC    A(E15)              ADDRESS OF E15 EXIT
         DC    A(E35)              ADDRESS OF E35 EXIT
         DC    F'80000'            MAIN STORAGE FOR SORT
SORTM    DC    C' SORT FIELDS=('   START OF SORT FIELDS STMT
SRTFLDS  DC    C'           '      ROOM FOR FIRST SORT FIELD + ','
         DC    C'           '      ROOM FOR SECOND SORT FIELD + ','
         DC    C'           '      ROOM FOR THIRD SORT FIELD + ','
         DC    C'           '      ROOM FOR FOURTH SORT FIELD + ','
         DC    C'           '      ROOM FOR FIFTH SORT FIELD + ')'
SORTENDM DC    C' '                END OF SORT FIELDS STMT
RECM     DC    C' RECORD TYPE=F,LENGTH=140'
RECENDM  DC    C' '                END OF RECORD STMT
         SPACE 3
HEAD     DS    0CL133              PARM HEADINGS
         DC    C'1'                ANS CONTROL CHARACTER
         DC    30C' '
         DC    CL50'INPUT PARMS SELECTED FOR FLSMFJOB REL 3.0'
         DC    52C' '
         SPACE 3
CARDREC  DS    0CL133              PARM CARDS
         DC    C'0'                ANS CONTROL CHARACTER
         DC    30C' '
CARDAREA DC    80C' '              SAVE AREA FOR INPUT CARD
         DC    22C' '
         SPACE 3
HEAD1    DS    0CL133              HEADING LINE1
         DC    C'1'                ANS CONTROL CHARACTER
         DC    40C' '
         DC    CL50'JOB RESOURCE UTILIZATION REPORT'
         DC    31C' '
         DC    CL4'PAGE'
OPAGCT   DC    CL6' '              PAGE COUNT
         DC    C' '
         SPACE 3
HEAD2A   DC    CL1'0',CL132' '     HEADING LINE2A
         SPACE 3
HEAD2B   DC    CL1' ',CL132' '     HEADING LINE2B
         SPACE 3
HEAD3    DC    CL1'0',CL132' '     TOTALS HEADING
         ORG   HEAD3+1
         DC    C'SMF START DATE: '
HLDATE   DS    CL10
         DC    C' '
HLTIME   DS    CL5
         ORG HEAD3+132-30
         DC    C'SMF END DATE: '
HHDATE   DS    CL10
         DC    C' '
HHTIME   DS    CL5
         ORG
HEAD4    DC    CL1'0',CL132' '     TOTALS HEADING
         ORG   HEAD4+17+35-10
         DC    C'TOTALS'
         ORG   HEAD4+17+35+5+25-12
         DC    C'AVERAGES'
         ORG
         SPACE 3
DETAIL   DC    CL133' '            DETAIL PRINT RECORD
         SPACE 3
OJOBNAME DC    CL8' '              JOBNAME
OJOBNO   DC    CL8' '              JOBNUMBER
OJSDATE  DC    CL8' '              START JULIAN DATE (YYYY.DDD)
OJEDATE  DC    CL8' '              END   JULIAN DATE (YYYY.DDD)
OGSDATE  DC    CL10' '             START GREGORIAN DATE (YYYY/MM/DD)
OGEDATE  DC    CL10' '             END   GREGORIAN DATE (YYYY/MM/DD)
OSTIME   DC    CL5' '              START TIME (HH:MM)
OETIME   DC    CL5' '              END   TIME (HH:MM)
OSYSID   DC    CL4' '              SMF SYSTEM ID
OPSTEP   DC    CL8' '              PROC STEP NAME
OJSTEP   DC    CL8' '              JOB STEP NAME
OPGMNM   DC    CL8' '              PROGRAM NAME
OUSERID  DC    CL8' '              USERID
OCCODE   DC    CL5' '              STEP CONDITION CODE
OELAPTM  DC    CL9' '              STEP ELAPSED TIME (HHH:MM:SS)
OCPUTM   DC    CL7' '              STEP CPU TIME (MMMM.SS)
ORGNB16  DC    CL7' '              REGION USED BELOW 16M (NNNN.NM)
ORGNA16  DC    CL7' '              REGION USED ABOVE 16M (NNNN.NM)
OMOUNTS  DC    CL3' '              TOTAL NUMBER OF TAPE MOUNTS
OEXCPS   DC    CL10' '             STEP TOTAL EXCP COUNT (NN,NNN,NNN)
OCPU#    DC    CL3' '              STEP AVERAGE CPU PERCENT
OTYPE    DC    CL1' '              TEST/PRODUCTION JOB TYPE
OPTAPES  DC    CL3' '              TOTAL NUMBER OF PERM TAPE MOUNTS
OSTAPES  DC    CL3' '              TOTAL NUMBER OF SCRATCH TAPE MOUNTS
OEXPPAG  DC    CL8' '              PAGES TO/FROM EXP STORAGE
OAUXPAG  DC    CL8' '              PAGES TO/FROM AUX STORAGE
OSUS     DC    CL9' '              SERVICE UNITS (IN K)
OVIOPAG  DC    CL8' '              PAGES TO/FROM AUX STORAGE
OSDAY    DC    CL3' '              START DAY-OF-THE-WEEK
OEDAY    DC    CL3' '              END   DAY-OF-THE-WEEK
         EJECT
         PRINT NOGEN
SYSIN    DCB   DDNAME=SYSIN,MACRF=GM,DSORG=PS,EODAD=ENDPARM,LRECL=80
SMFIN    DCB   DDNAME=SMFIN,MACRF=GL,DSORG=PS,EODAD=EOF,BFTEK=A
SYSPRINT DCB   DDNAME=SYSPRINT,MACRF=PM,DSORG=PS,LRECL=133,RECFM=FBA
DATAOUT  DCB   DDNAME=DATAOUT,MACRF=PM,DSORG=PS,LRECL=140,RECFM=FB
         PRINT GEN
         EJECT
SMFT6    DSECT
         IFASMFR 30
         EJECT
         DCBD  DSORG=QS,DEVD=DA
         EJECT
***********************************************************************
*                                                                     *
*        THIS IS A TABLE OF ERROR MESSAGES                            *
*                                                                     *
*        EACH ENTRY IS 120 BYTES LONG.  EACH ENTRY CONTAINS THE       *
*        EXACT TEXT TO BE PLACED IN A WTO MESSAGE IF THIS ERROR       *
*        OCCURS.  AN ERROR INDEX WILL BE USED TO SPECIFY WHICH        *
*        ERROR MESSAGE WILL BE USED.  THIS TECHNIQUE PREVENTS         *
*        ALL OF THE ERROR MESSAGES FROM USING UP A LOT OF BASE        *
*        REGISTERS.                                                   *
*                                                                     *
*        AN ERROR INDEX OF 1 WILL CAUSE THE FIRST 120 CHARACTERS      *
*        TO BE USED.  AN ERROR INDEX OF 2 WILL CAUSE THE NEXT         *
*        120 CHARACTERS TO BE USED, ETC.                              *
*                                                                     *
***********************************************************************
MSGTBL   CSECT
         DC    CL120'SMF1001 - INVALID KEYWORD ON INPUT SYSIN CARD     X
                                                                       X
                             '
         DC    CL120'SMF1002 - INVALID JOBNAME VALUE ON SYSIN CARD - MUX
               ST 1 TO 8 ALPHANUMERIC CHARACTERS                       X
                             '
         DC    CL120'SMF1003 - INVALID JOBNAME VALUE ON SYSIN CARD - INX
               DEX FIELD WAS NOT PRECEDED BY THE JOBNAME               X
                             '
         DC    CL120'SMF1004 - INVALID JOBNAME VALUE ON SYSIN CARD - JOX
               BNAME EXCEEDS 8 CHARACTERS                              X
                             '
         DC    CL120'SMF1005 - INVALID JOBNAME VALUE ON SYSIN CARD - INX
               DEX LENGTH EXCEEDS 2 CHARACTERS                         X
                             '
         DC    CL120'SMF1006 - INVALID JOBNAME VALUE ON SYSIN CARD - INX
               DEX VALUE IS NOT NUMERIC                                X
                             '
         DC    CL120'SMF1007 - INVALID DATE VALUE ON SYSIN CARD - BEGINX
                DATE NOT IN THE FORM YY.DDD, YYYY.DDD, MM/DD/YY, OR YYYX
               Y/MM/DD       '
         DC    CL120'SMF1008 - INVALID DATE VALUE ON SYSIN CARD - BEGINX
                DATE NOT SEPARATED FROM END DATE BY ":"                X
                             '
         DC    CL120'SMF1009 - INVALID DATE VALUE ON SYSIN CARD - END DX
               ATE NOT IN THE FORM YY.DDD, YYYY.DDD, MM/DD/YY, OR YYYY/X
               MM/DD         '
         DC    CL120'SMF1010 - INVALID SDAY SUBPARAMETER ON SYSIN CARD X
               - NO SUBPARAMETERS ENTERED                              X
                             '
         DC    CL120'SMF1011 - INVALID SDAY SUBPARAMETER ON SYSIN CARD X
               - NULL PARAMETER ENTERED                                X
                             '
         DC    CL120'SMF1012 - INVALID SDAY SUBPARAMETER ON SYSIN CARD X
               - UNKNOWN SUBPARAMETER ENTERED                          X
                             '
         DC    CL120'SMF1013 - INVALID COMBINATION OF END DAY-OF-WEEK SX
               ELECT STATEMENTS RESULTING IN NO ELIGIBLE DAYS          X
                             '
         DC    CL120'SMF1014 - INVALID START TIME VALUE ON SYSIN CARD -X
                BEGIN TIME NOT IN THE FORM HH.MM                       X
                             '
         DC    CL120'SMF1015 - INVALID START TIME VALUE ON SYSIN CARD -X
                BEGIN TIME NOT SEPARATED FROM END TIME BY ":"          X
                             '
         DC    CL120'SMF1016 - INVALID START TIME VALUE ON SYSIN CARD -X
                END TIME NOT IN THE FORM HH.MM                         X
                             '
         DC    CL120'SMF1017 - INVALID STOP TIME VALUE ON SYSIN CARD - X
               BEGIN TIME NOT IN THE FORM HH.MM                        X
                             '
         DC    CL120'SMF1018 - INVALID STOP TIME VALUE ON SYSIN CARD - X
               BEGIN TIME NOT SEPARATED FROM END TIME BY ":"           X
                             '
         DC    CL120'SMF1019 - INVALID STOP TIME VALUE ON SYSIN CARD - X
               END TIME NOT IN THE FORM HH.MM                          X
                             '
         DC    CL120'SMF1020 - MORE THAN 1000 STOP TIME RANGE SELECT STX
               ATEMENTS ENTERED                                        X
                             '
         DC    CL120'SMF1021 - INVALID SYSTEM VALUE ON SYSIN CARD - MUSX
               T BE 1 TO 4 ALPHANUMERIC CHARACTERS                     X
                             '
         DC    CL120'SMF1022 - INVALID SORT SUBPARAMETER ON SYSIN CARD X
               - NO SUBPARAMETERS ENTERED                              X
                             '
         DC    CL120'SMF1023 - INVALID SORT SUBPARAMETER ON SYSIN CARD X
               - MORE THAN 5 SUBPARAMETERS ENTERED                     X
                             '
         DC    CL120'SMF1024 - INVALID SORT SUBPARAMETER ON SYSIN CARD X
               - UNKNOWN SUBPARAMETER ENTERED                          X
                             '
         DC    CL120'SMF1025 - INVALID SORT SUBPARAMETER ON SYSIN CARD X
               - SUBPARAMETERS NOT SEPARATED BY ","                    X
                             '
         DC    CL120'SMF1026 - INVALID SORT SUBPARAMETER ON SYSIN CARD X
               - NULL PARAMETER ENTERED                                X
                             '
         DC    CL120'SMF1027 - INVALID ELAPSED TIME VALUE ON SYSIN CARDX
                - MUST BE IN THE FORM OF HHH.MM.SS                     X
                             '
         DC    CL120'SMF1028 - INVALID CPU TIME VALUE ON SYSIN CARD - MX
               UST BE NUMERIC NUMBER OF MINUTES                        X
                             '
         DC    CL120'SMF1029 - INVALID TOTAL TAPE MOUNT VALUE ON SYSIN X
               CARD - MUST BE 1 TO 6 NUMERIC DIGITS                    X
                             '
         DC    CL120'SMF1030 - SYSPRINT DD STATEMENT MISSING - JOB ABORX
               TED                                                     X
                             '
         DC    CL120'SMF1031 - SMFIN DD STATEMENT MISSING - JOB ABORTEDX
                                                                       X
                             '
         DC    CL120'SMF1032 - INVALID KEYWORD OPERATOR ON SYSIN INPUT X
               CARD - NOT VALID FOR THIS KEYWORD                       X
                             '
         DC    CL120'SMF1033 - NULL KEYWORD ON SYSIN INPUT CARD        X
                                                                       X
                             '
         DC    CL120'SMF1034 - INVALID CPU PERCENT VALUE ON SYSIN CARD X
               - MUST BE 1 TO 3 NUMERIC DIGITS                         X
                             '
         DC    CL120'SMF1035 - INVALID JOBNO VALUE ON SYSIN CARD - MUSTX
                START WITH JOB/STC/TSU FOLLOWED BY A 5 DIGIT JOB NUMBERX
                             '
         DC    CL120'SMF1036 - INVALID REGION SIZE ABOVE VALUE ON SYSINX
                CARD - MUST BE 1 TO 5 NUMERIC DIGITS (IN MEG)          X
                             '
         DC    CL120'SMF1037 - INVALID PROGRAM NAME VALUE ON SYSIN CARDX
                - MUST BE 1 TO 8 ALPHANUMERIC CHARACTERS               X
                             '
         DC    CL120'SMF1038 - INVALID REGION SIZE BELOW VALUE ON SYSINX
                CARD - MUST BE 1 TO 5 NUMERIC DIGITS (IN MEG)          X
                             '
         DC    CL120'SMF1039 - INVALID USERID VALUE ON SYSIN CARD - MUSX
               T BE 1 TO 8 ALPHANUMERIC CHARACTERS                     X
                             '
         DC    CL120'SMF1040 - INVALID I/O COUNT VALUE ON SYSIN CARD - X
               MUST BE 1 TO 9 NUMERIC DIGITS                           X
                             '
         DC    CL120'SMF1041 - INVALID CONDITION CODE VALUE ON SYSIN CAX
               RD - MUST BE 1 TO 5 ALPHANUMERIC CHARACTERS             X
                             '
         DC    CL120'SMF1042 - INVALID JOB TYPE VALUE ON SYSIN CARD - MX
               UST BE "T" OR "P" TO INDICATE TEST OR PRODUCTION        X
                             '
         DC    CL120'SMF1043 - INVALID STOP COUNT VALUE ENTERED ON SYSIX
               N CARD - MUST BE 1 TO 9 NUMERIC DIGITS                  X
                             '
         DC    CL120'SMF1044 - INVALID PROC STEP NAME ON SYSIN CARD - MX
               UST BE 1 TO 8 ALPHANUMERIC CHARACTERS                   X
                             '
         DC    CL120'SMF1045 - INVALID JOB STEP NAME ON SYSIN CARD - MUX
               ST BE 1 TO 8 ALPHANUMERIC CHARACTERS                    X
                             '
         DC    CL120'SMF1046 - INTERNAL ERROR - NO FIELDS SELECTED FOR X
               PRINTING                                                X
                             '
         DC    CL120'SMF1047 - INTERNAL ERROR - PRINT SELECTED FOR NON-X
               PRINTABLE OPTION                                        X
                             '
         DC    CL120'SMF1048 - PRINT SPECIFICATION ERROR - THE GENERATEX
               D PRINT LINE EXCEEDS 133 CHARACTERS                     X
                             '
         DC    CL120'SMF1049 - INVALID PRINT SUBPARAMETER ON SYSIN CARDX
                - NULL PARAMETER ENTERED                               X
                             '
         DC    CL120'SMF1050 - INVALID PRINT SUBPARAMETER ON SYSIN CARDX
                - UNKNOWN SUBPARAMETER ENTERED                         X
                             '
         DC    CL120'SMF1051 - INVALID PRINT SUBPARAMETER ON SYSIN CARDX
               - MORE THAN 30 SUBPARAMETERS ENTERED                    X
                             '
         DC    CL120'SMF1052 - INVALID PRINT SUBPARAMETER ON SYSIN CARDX
                - SUBPARAMETERS NOT SEPARATED BY ","                   X
                             '
         DC    CL120'SMF1053 - INVALID PRINT SUBPARAMETER ON SYSIN CARDX
                - NO SUBPARAMETERS ENTERED                             X
                             '
         DC    CL120'SMF1054 - INVALID NON-SCRATCH TAPE MOUNT VALUE ON X
               SYSIN CARD - MUST BE 1 TO 6 NUMERIC DIGITS              X
                             '
         DC    CL120'SMF1055 - INVALID SCRATCH TAPE MOUNT VALUE ON SYSIX
               N CARD - MUST BE 1 TO 6 NUMERIC DIGITS                  X
                             '
         DC    CL120'SMF1056 - INVALID EXPANDED STORAGE PAGE COUNT VALUX
               E ON SYSIN CARD - MUST BE 1 TO 9 NUMERIC DIGITS         X
                             '
         DC    CL120'SMF1057 - INVALID AUXILLARY STORAGE PAGE COUNT VALX
               UE ON SYSIN CARD - MUST BE 1 TO 9 NUMERIC DIGITS        X
                             '
         DC    CL120'SMF1058 - INVALID SERVICE UNIT COUNT VALUE ON SYSIX
               N CARD - MUST BE 1 TO 9 NUMERIC DIGITS                  X
                             '
         DC    CL120'SMF1059 - INVALID VIO PAGE COUNT VALUE ON SYSIN CAX
               RD - MUST BE 1 TO 9 NUMERIC DIGITS                      X
                             '
         DC    CL120'SMF1060 - MORE THAN 1000 JOBNAME SELECT STATEMENTSX
                ENTERED                                                X
                             '
         DC    CL120'SMF1061 - MORE THAN 1000 JOB NUMBER SELECT STATEMEX
               NTS ENTERED                                             X
                             '
         DC    CL120'SMF1062 - MORE THAN 1000 DATE RANGE SELECT STATEMEX
               NTS ENTERED                                             X
                             '
         DC    CL120'SMF1063 - MORE THAN 1000 START TIME RANGE SELECT SX
               TATEMENTS ENTERED                                       X
                             '
         DC    CL120'SMF1064 - MORE THAN 1000 SYSTEM ID NAME SELECT STAX
               TEMENTS ENTERED                                         X
                             '
         DC    CL120'SMF1065 - MORE THAN 1000 PROC STEP NAME SELECT STAX
               TEMENTS ENTERED                                         X
                             '
         DC    CL120'SMF1066 - MORE THAN 1000 JOB STEP NAME SELECT STATX
               EMENTS ENTERED                                          X
                             '
         DC    CL120'SMF1067 - MORE THAN 1000 PROGRAM NAME SELECT STATEX
               MENTS ENTERED                                           X
                             '
         DC    CL120'SMF1068 - MORE THAN 1000 SECURITY USERID SELECT STX
               ATEMENTS ENTERED                                        X
                             '
         DC    CL120'SMF1069 - MORE THAN 1000 COMPLETION CODE SELECT STX
               ATEMENTS ENTERED                                        X
                             '
         DC    CL120'SMF1070 - INVALID EXJOBNAME VALUE ON SYSIN CARD - X
               MUST BE 1 TO 8 ALPHANUMERIC CHARACTERS                  X
                             '
         DC    CL120'SMF1071 - INVALID EXJOBNAME VALUE ON SYSIN CARD - X
               INDEX FIELD WAS NOT PRECEDED BY THE JOBNAME             X
                             '
         DC    CL120'SMF1072 - INVALID EXJOBNAME VALUE ON SYSIN CARD - X
               JOBNAME EXCEEDS 8 CHARACTERS                            X
                             '
         DC    CL120'SMF1073 - INVALID EXJOBNAME VALUE ON SYSIN CARD - X
               INDEX LENGTH EXCEEDS 2 CHARACTERS                       X
                             '
         DC    CL120'SMF1074 - INVALID EXJOBNAME VALUE ON SYSIN CARD - X
               INDEX VALUE IS NOT NUMERIC                              X
                             '
         DC    CL120'SMF1075 - MORE THAN 1000 EXJOBNAME SELECT STATEMENX
               TS ENTERED                                              X
                             '
         DC    CL120'SMF1076 - INVALID EXJOBNO VALUE ON SYSIN CARD - MUX
               ST START WITH JOB/STC/TSU FOLLOWED BY A 5 DIGIT JOB NUMBX
                ER           '
         DC    CL120'SMF1077 - MORE THAN 1000 EXJOBNUMBER SELECT STATEMX
               ENTS ENTERED                                            X
                             '
         DC    CL120'SMF1078 - INVALID EXSYSTEM VALUE ON SYSIN CARD - MX
               UST BE 1 TO 4 ALPHANUMERIC CHARACTERS                   X
                             '
         DC    CL120'SMF1079 - MORE THAN 1000 EXSYSTEM ID NAME SELECT SX
               TATEMENTS ENTERED                                       X
                             '
         DC    CL120'SMF1080 - INVALID EXPSTEP NAME ON SYSIN CARD - MUSX
               T BE 1 TO 8 ALPHANUMERIC CHARACTERS                     X
                             '
         DC    CL120'SMF1081 - MORE THAN 1000 EXPSTEP NAME SELECT STATEX
               MENTS ENTERED                                           X
                             '
         DC    CL120'SMF1082 - INVALID EXJSTEP NAME ON SYSIN CARD - MUSX
               T BE 1 TO 8 ALPHANUMERIC CHARACTERS                     X
                             '
         DC    CL120'SMF1083 - MORE THAN 1000 EXJSTEP NAME SELECT STATEX
               MENTS ENTERED                                           X
                             '
         DC    CL120'SMF1084 - INVALID EXPROGRAM NAME VALUE ON SYSIN CAX
               RD - MUST BE 1 TO 8 ALPHANUMERIC CHARACTERS             X
                             '
         DC    CL120'SMF1085 - MORE THAN 1000 EXPROGRAM NAME SELECT STAX
               TEMENTS ENTERED                                         X
                             '
         DC    CL120'SMF1086 - INVALID EXUSERID VALUE ON SYSIN CARD - MX
               UST BE 1 TO 8 ALPHANUMERIC CHARACTERS                   X
                             '
         DC    CL120'SMF1087 - MORE THAN 1000 EXUSERID SELECT STATEMENTX
               S ENTERED                                               X
                             '
         DC    CL120'SMF1088 - INVALID EXCONDITION CODE VALUE ON SYSIN X
               CARD - MUST BE 1 TO 5 ALPHANUMERIC CHARACTERS           X
                             '
         DC    CL120'SMF1089 - MORE THAN 1000 EXCOMPLETION CODE SELECT X
               STATEMENTS ENTERED                                      X
                             '
         DC    CL120'SMF1090 - INVALID COMBINATION OF START DAY-OF-WEEKX
                SELECT STATEMENTS RESULTING IN NO ELIGIBLE DAYS        X
                             '
         DC    CL120'SMF1091 - JOBLEVEL AND INTERVAL KEYWORDS ARE MUTUAX
               LLY EXCLUSIVE                                           X
                             '
         DC    CL120'SMF1092 - INVALID EDAY SUBPARAMETER ON SYSIN CARD X
               - NO SUBPARAMETERS ENTERED                              X
                             '
         DC    CL120'SMF1093 - INVALID EDAY SUBPARAMETER ON SYSIN CARD X
               - NULL PARAMETER ENTERED                                X
                             '
         DC    CL120'SMF1094 - INVALID EDAY SUBPARAMETER ON SYSIN CARD X
               - UNKNOWN SUBPARAMETER ENTERED                          X
                             '
         EJECT
***********************************************************************
*                                                                     *
*        THIS IS A TABLE OF INPUT OPTIONS                             *
*                                                                     *
*        EACH ENTRY IS 34 BYTES LONG.  AN ENTRY WHICH BEGINS          *
*        WITH A X'FF' INDICATES END OF THE TABLE.                     *
*                                                                     *
*        EACH ENTRY HAS THE FOLLOWING FORMAT:                         *
*                                                                     *
*        1)  HALFWORD MACHINE MINIMUM LENGTH OF THE KEYWORD           *
*            WHICH FOLLOWS.  FOR EXAMPLE - A VALUE OF 2 STATES        *
*            THAT THE FIRST 3 OR MORE CHARACTERS CAN ALSO BE          *
*            CONSIDERED A MATCH PROVIDING ABBREVIATIONS FOR           *
*            SOME OF THE KEYWORDS.                                    *
*                                                                     *
*        2)  HALFWORD INDEX VALUE.  THIS INDEX IS USED IN             *
*            IN SEVERAL PLACES AS A BRANCH TABLE OFFSET FOR           *
*            QUICK ENTRY TO PROCESSING FOR THAT KEYWORD.              *
*            IT IS USED FOR INPUT OPTIONS, SORT OPTIONS,              *
*            HEADING PROCESSING, OUTPUT PROCESSING, AND               *
*            TOTALS PROCESSING.  THE OFFSET FOR A KEYWORD             *
*            IS USED CONSISTANTLY IN EACH BRANCH TABLE.               *
*                                                                     *
*        3)  A 12 CHARACTER KEYWORD.  SHORTER FORMS OF THIS           *
*            VALUE MAY ALSO BE ACCEPTABLE DEPENDING ON THE            *
*            FIRST TWO BYTES OF THIS TABLE ENTRY.                     *
*                                                                     *
*        4)  1 CHARACTER OPTION INDICATOR.  IF THIS POSITION          *
*            CONTAINS A "Y", THEN THIS KEYWORD CAN BE USED AS         *
*            A SELECTION OPTION WITH AN ACCOMPANYING VALUE TO         *
*            BE USED FOR COMPARISONS.                                 *
*                                                                     *
*        5)  1 CHARACTER SORT INDICATOR.  IF THIS POSITION            *
*            CONTAINS A "Y", THEN THIS KEYWORD CAN BE USED AS         *
*            A SORT SUBPARAMETER.                                     *
*                                                                     *
*        6)  1 CHARACTER PRINTABLE INDICATOR.  IF THIS POSITION       *
*            CONTAINS A "Y", THEN THIS KEYWORD CAN BE USED TO         *
*            SELECT A FIELD FOR PRINTING.                             *
*                                                                     *
*        7)  1 CHARACTER DAY INDICATOR.  IF THIS POSITION             *
*            CONTAINS A "Y", THEN THIS KEYWORD CAN BE USED TO         *
*            SET DAYS-OF-THE-WEEK INDICATORS.                         *
*                                                                     *
*        8)  1 CHARACTER UNUSED.                                      *
*                                                                     *
*        8)  1 DIGIT DEFAULT OUTPUT SEQUENCE NUMBER.  IF NO           *
*            PRINT STATEMENT IS ENTERED, THEN THIS DIGIT              *
*            DETERMINES WHICH OUTPUT FIELDS WILL BE PRINTED           *
*            AND IN WHAT ORDER.  A ZERO INDICATES NOT PRINTED         *
*            BY DEFAULT.  OTHERWISE, THE NUMBER INDICATES A           *
*            SEQUENCE NUMBER FROM 1 TO 30 FOR PRINTING.               *
*                                                                     *
*        10) 12 CHARACTER SORT CONTROL STATEMENT IF THIS              *
*            KEYWORD IS USED AS A SORT SUBPARAMETER.  THIS            *
*            IS USED TO BUILD THE SORT CONTROL STATEMENT.             *
*                                                                     *
***********************************************************************
OPTKEY   CSECT
 DC  AL2(4),AL2(000),C'JOBNAME     ',C'YYYN ',AL1(01),C'001,8,CH,A, '
 DC  AL2(4),AL2(000),C'JOBNM       ',C'YYYN ',AL1(01),C'001,8,CH,A, '
 DC  AL2(4),AL2(004),C'JOBNO       ',C'YYYN ',AL1(02),C'009,8,CH,A, '
 DC  AL2(4),AL2(004),C'JOBNUMBER   ',C'YYYN ',AL1(02),C'009,8,CH,A, '
 DC  AL2(3),AL2(004),C'JOBID       ',C'YYYN ',AL1(02),C'009,8,CH,A, '
 DC  AL2(1),AL2(008),C'SJDATE      ',C'NYYN ',AL1(00),C'017,4,BI,A, '
 DC  AL2(5),AL2(008),C'STARTJDATE  ',C'NYYN ',AL1(00),C'017,4,BI,A, '
 DC  AL2(2),AL2(008),C'DATE        ',C'YYYN ',AL1(00),C'017,4,BI,A, '
 DC  AL2(3),AL2(008),C'SDATE       ',C'NYYN ',AL1(00),C'017,4,BI,A, '
 DC  AL2(7),AL2(008),C'STARTDATE   ',C'NYYN ',AL1(00),C'017,4,BI,A, '
 DC  AL2(1),AL2(012),C'TIME        ',C'YYYN ',AL1(04),C'021,4,BI,A, '
 DC  AL2(2),AL2(012),C'STIME       ',C'YYYN ',AL1(04),C'021,4,BI,A, '
 DC  AL2(5),AL2(012),C'STARTTIME   ',C'YYYN ',AL1(04),C'021,4,BI,A, '
 DC  AL2(1),AL2(016),C'SYSTEM      ',C'YYYN ',AL1(05),C'033,4,CH,A, '
 DC  AL2(1),AL2(016),C'SYSID       ',C'YYYN ',AL1(05),C'033,4,CH,A, '
 DC  AL2(3),AL2(020),C'PROCSTEP    ',C'YYYN ',AL1(06),C'037,8,CH,A, '
 DC  AL2(1),AL2(020),C'PSTEP       ',C'YYYN ',AL1(06),C'037,8,CH,A, '
 DC  AL2(3),AL2(024),C'JOBSTEP     ',C'YYYN ',AL1(07),C'045,8,CH,A, '
 DC  AL2(1),AL2(024),C'JSTEP       ',C'YYYN ',AL1(07),C'045,8,CH,A, '
 DC  AL2(3),AL2(028),C'PROGRAM     ',C'YYYN ',AL1(08),C'053,8,CH,A, '
 DC  AL2(1),AL2(028),C'PGM         ',C'YYYN ',AL1(08),C'053,8,CH,A, '
 DC  AL2(0),AL2(032),C'USERID      ',C'YYYN ',AL1(09),C'061,8,CH,A, '
 DC  AL2(0),AL2(032),C'UID         ',C'YYYN ',AL1(09),C'061,8,CH,A, '
 DC  AL2(1),AL2(036),C'CCODE       ',C'YYYN ',AL1(10),C'073,5,CH,A, '
 DC  AL2(1),AL2(040),C'ELAPTIME    ',C'YYYN ',AL1(11),C'089,4,BI,A, '
 DC  AL2(1),AL2(040),C'ELAPSED     ',C'YYYN ',AL1(11),C'089,4,BI,A, '
 DC  AL2(1),AL2(040),C'ELTIME      ',C'YYYN ',AL1(11),C'089,4,BI,A, '
 DC  AL2(3),AL2(044),C'EXCPS       ',C'YYYN ',AL1(15),C'093,4,BI,A, '
 DC  AL2(0),AL2(044),C'BLOCKCOUNT  ',C'YYYN ',AL1(15),C'093,4,BI,A, '
 DC  AL2(0),AL2(044),C'BLOCKCNT    ',C'YYYN ',AL1(15),C'093,4,BI,A, '
 DC  AL2(0),AL2(044),C'BLOCKS      ',C'YYYN ',AL1(15),C'093,4,BI,A, '
 DC  AL2(3),AL2(048),C'CPUTIME     ',C'YYYN ',AL1(12),C'097,4,BI,A, '
 DC  AL2(3),AL2(048),C'CPUTM       ',C'YYYN ',AL1(12),C'097,4,BI,A, '
 DC  AL2(1),AL2(048),C'CT          ',C'YYYN ',AL1(12),C'097,4,BI,A, '
 DC  AL2(6),AL2(052),C'REGIONBELOW ',C'YYYN ',AL1(13),C'101,4,BI,A, '
 DC  AL2(3),AL2(052),C'RGNBELOW    ',C'YYYN ',AL1(13),C'101,4,BI,A, '
 DC  AL2(6),AL2(056),C'REGIONABOVE ',C'YYYN ',AL1(14),C'105,4,BI,A, '
 DC  AL2(3),AL2(056),C'RGNABOVE    ',C'YYYN ',AL1(14),C'105,4,BI,A, '
 DC  AL2(2),AL2(060),C'MOUNTS      ',C'YYYN ',AL1(00),C'117,4,BI,A, '
 DC  AL2(1),AL2(060),C'TAPEMOUNTS  ',C'YYYN ',AL1(00),C'117,4,BI,A, '
 DC  AL2(3),AL2(060),C'TOTTAPES    ',C'YYYN ',AL1(00),C'117,4,BI,A, '
 DC  AL2(1),AL2(060),C'TAPES       ',C'YYYN ',AL1(00),C'117,4,BI,A, '
 DC  AL2(3),AL2(064),C'CPUPCT      ',C'YYYN ',AL1(16),C'121,4,BI,A, '
 DC  AL2(3),AL2(064),C'CPUPERCENT  ',C'YYYN ',AL1(16),C'121,4,BI,A, '
 DC  AL2(3),AL2(064),C'CPU%        ',C'YYYN ',AL1(16),C'121,4,BI,A, '
 DC  AL2(3),AL2(068),C'JOBTYPE     ',C'YYYN ',AL1(17),C'088,1,CH,A, '
 DC  AL2(1),AL2(068),C'TYPE        ',C'YYYN ',AL1(17),C'088,1,CH,A, '
 DC  AL2(1),AL2(068),C'JTYPE       ',C'YYYN ',AL1(17),C'088,1,CH,A, '
 DC  AL2(3),AL2(072),C'NOFLUSH     ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(076),C'NOABEND     ',C'YNNN ',AL1(00),C'            '
 DC  AL2(3),AL2(080),C'NOTEST      ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(084),C'NOPRODUCTION',C'YNNN ',AL1(00),C'            '
 DC  AL2(3),AL2(088),C'NOSTC       ',C'YNNN ',AL1(00),C'            '
 DC  AL2(3),AL2(088),C'NOSTARTED   ',C'YNNN ',AL1(00),C'            '
 DC  AL2(3),AL2(092),C'NOTSU       ',C'YNNN ',AL1(00),C'            '
 DC  AL2(3),AL2(092),C'NOTSO       ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(092),C'NOUSERS     ',C'YNNN ',AL1(00),C'            '
 DC  AL2(1),AL2(096),C'STOPAFTER   ',C'YNNN ',AL1(00),C'            '
 DC  AL2(1),AL2(096),C'STOPCOUNT   ',C'YNNN ',AL1(00),C'            '
 DC  AL2(1),AL2(096),C'STOPCNT     ',C'YNNN ',AL1(00),C'            '
 DC  AL2(1),AL2(100),C'SORT        ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(104),C'PRINT       ',C'YNNN ',AL1(00),C'            '
 DC  AL2(1),AL2(108),C'PERMTAPES   ',C'YYYN ',AL1(00),C'109,4,BI,A, '
 DC  AL2(2),AL2(108),C'NONSCRATCHTP',C'YYYN ',AL1(00),C'109,4,BI,A, '
 DC  AL2(2),AL2(108),C'NONSCRTAPES ',C'YYYN ',AL1(00),C'109,4,BI,A, '
 DC  AL2(1),AL2(112),C'SCRATCHTAPES',C'YYYN ',AL1(00),C'113,4,BI,A, '
 DC  AL2(1),AL2(112),C'SCRATCHTPS  ',C'YYYN ',AL1(00),C'113,4,BI,A, '
 DC  AL2(1),AL2(112),C'SCRTAPES    ',C'YYYN ',AL1(00),C'113,4,BI,A, '
 DC  AL2(3),AL2(116),C'EXPPAGING   ',C'YYYN ',AL1(00),C'125,4,BI,A, '
 DC  AL2(3),AL2(116),C'EXPANDED    ',C'YYYN ',AL1(00),C'125,4,BI,A, '
 DC  AL2(1),AL2(120),C'AUXPAGING   ',C'YYYN ',AL1(00),C'129,4,BI,A, '
 DC  AL2(1),AL2(120),C'AUXILLARY   ',C'YYYN ',AL1(00),C'129,4,BI,A, '
 DC  AL2(1),AL2(124),C'SERVICEUNITS',C'YYYN ',AL1(00),C'133,4,BI,A, '
 DC  AL2(1),AL2(124),C'SERVUNITS   ',C'YYYN ',AL1(00),C'133,4,BI,A, '
 DC  AL2(2),AL2(124),C'SUS         ',C'YYYN ',AL1(00),C'133,4,BI,A, '
 DC  AL2(3),AL2(128),C'TOTALS      ',C'YNNN ',AL1(00),C'            '
 DC  AL2(1),AL2(132),C'AVERAGES    ',C'YNNN ',AL1(00),C'            '
 DC  AL2(1),AL2(132),C'AVGS        ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(136),C'NODETAIL    ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(136),C'NOREPORT    ',C'YNNN ',AL1(00),C'            '
 DC  AL2(0),AL2(140),C'VIOPAGING   ',C'YYYN ',AL1(00),C'137,4,BI,A, '
 DC  AL2(6),AL2(144),C'EXJOBNAME   ',C'YNNN ',AL1(00),C'            '
 DC  AL2(5),AL2(144),C'XJOBNAME    ',C'YNNN ',AL1(00),C'            '
 DC  AL2(6),AL2(144),C'EXJOBNM     ',C'YNNN ',AL1(00),C'            '
 DC  AL2(5),AL2(144),C'XJOBNM      ',C'YNNN ',AL1(00),C'            '
 DC  AL2(6),AL2(148),C'EXJOBNO     ',C'YNNN ',AL1(00),C'            '
 DC  AL2(5),AL2(148),C'XJOBNO      ',C'YNNN ',AL1(00),C'            '
 DC  AL2(6),AL2(148),C'EXJOBNUMBER ',C'YNNN ',AL1(00),C'            '
 DC  AL2(5),AL2(148),C'XJOBNUMBER  ',C'YNNN ',AL1(00),C'            '
 DC  AL2(5),AL2(148),C'EXJOBID     ',C'YNNN ',AL1(00),C'            '
 DC  AL2(4),AL2(148),C'XJOBID      ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(152),C'EXSYSTEM    ',C'YNNN ',AL1(00),C'            '
 DC  AL2(1),AL2(152),C'XSYSTEM     ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(152),C'EXSYSID     ',C'YNNN ',AL1(00),C'            '
 DC  AL2(1),AL2(152),C'XSYSID      ',C'YNNN ',AL1(00),C'            '
 DC  AL2(5),AL2(156),C'EXPROCSTEP  ',C'YNNN ',AL1(00),C'            '
 DC  AL2(4),AL2(156),C'XPROCSTEP   ',C'YNNN ',AL1(00),C'            '
 DC  AL2(3),AL2(156),C'EXPSTEP     ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(156),C'XPSTEP      ',C'YNNN ',AL1(00),C'            '
 DC  AL2(5),AL2(160),C'EXJOBSTEP   ',C'YNNN ',AL1(00),C'            '
 DC  AL2(4),AL2(160),C'XJOBSTEP    ',C'YNNN ',AL1(00),C'            '
 DC  AL2(3),AL2(160),C'EXJSTEP     ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(160),C'XJSTEP      ',C'YNNN ',AL1(00),C'            '
 DC  AL2(5),AL2(164),C'EXPROGRAM   ',C'YNNN ',AL1(00),C'            '
 DC  AL2(4),AL2(164),C'XPROGRAM    ',C'YNNN ',AL1(00),C'            '
 DC  AL2(3),AL2(164),C'EXPGM       ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(164),C'XPGM        ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(168),C'EXUSERID    ',C'YNNN ',AL1(00),C'            '
 DC  AL2(1),AL2(168),C'XUSERID     ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(168),C'EXUID       ',C'YNNN ',AL1(00),C'            '
 DC  AL2(1),AL2(168),C'XUID        ',C'YNNN ',AL1(00),C'            '
 DC  AL2(3),AL2(172),C'EXCCODE     ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(172),C'XCCODE      ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(176),C'SUNDAY      ',C'NNNY ',AL1(00),C'            '
 DC  AL2(3),AL2(180),C'NOSUNDAY    ',C'NNNY ',AL1(00),C'            '
 DC  AL2(2),AL2(184),C'MONDAY      ',C'NNNY ',AL1(00),C'            '
 DC  AL2(2),AL2(188),C'NOMONDAY    ',C'NNNY ',AL1(00),C'            '
 DC  AL2(1),AL2(192),C'TUESDAY     ',C'NNNY ',AL1(00),C'            '
 DC  AL2(3),AL2(196),C'NOTUESDAY   ',C'NNNY ',AL1(00),C'            '
 DC  AL2(2),AL2(200),C'WEDNESDAY   ',C'NNNY ',AL1(00),C'            '
 DC  AL2(4),AL2(204),C'NOWEDNESDAY ',C'NNNY ',AL1(00),C'            '
 DC  AL2(1),AL2(208),C'THURSDAY    ',C'NNNY ',AL1(00),C'            '
 DC  AL2(3),AL2(212),C'NOTHURSDAY  ',C'NNNY ',AL1(00),C'            '
 DC  AL2(1),AL2(216),C'FRIDAY      ',C'NNNY ',AL1(00),C'            '
 DC  AL2(3),AL2(220),C'NOFRIDAY    ',C'NNNY ',AL1(00),C'            '
 DC  AL2(1),AL2(224),C'SATURDAY    ',C'NNNY ',AL1(00),C'            '
 DC  AL2(3),AL2(228),C'NOSATURDAY  ',C'NNNY ',AL1(00),C'            '
 DC  AL2(4),AL2(232),C'WEEKEND     ',C'NNNY ',AL1(00),C'            '
 DC  AL2(6),AL2(236),C'NOWEEKEND   ',C'NNNY ',AL1(00),C'            '
 DC  AL2(4),AL2(240),C'WEEKDAY     ',C'NNNY ',AL1(00),C'            '
 DC  AL2(6),AL2(244),C'NOWEEKDAY   ',C'NNNY ',AL1(00),C'            '
 DC  AL2(1),AL2(248),C'EVERYDAY    ',C'NNNY ',AL1(00),C'            '
 DC  AL2(1),AL2(248),C'ALLDAYS     ',C'NNNY ',AL1(00),C'            '
 DC  AL2(2),AL2(252),C'DAYOFTHEWEEK',C'YYYN ',AL1(00),C'069,2,BI,A, '
 DC  AL2(3),AL2(252),C'SDAYOFWEEK  ',C'YYYN ',AL1(00),C'069,2,BI,A, '
 DC  AL2(7),AL2(252),C'STARTDAY    ',C'YYYN ',AL1(00),C'069,2,BI,A, '
 DC  AL2(3),AL2(256),C'JOBLEVEL    ',C'YNNN ',AL1(00),C'            '
 DC  AL2(0),AL2(260),C'INTERVAL    ',C'YNNN ',AL1(00),C'            '
 DC  AL2(3),AL2(264),C'EDATE       ',C'NYYN ',AL1(00),C'025,4,BI,A, '
 DC  AL2(5),AL2(264),C'ENDDATE     ',C'NYYN ',AL1(00),C'025,4,BI,A, '
 DC  AL2(1),AL2(264),C'EJDATE      ',C'NYYN ',AL1(00),C'025,4,BI,A, '
 DC  AL2(3),AL2(264),C'ENDJDATE    ',C'NYYN ',AL1(00),C'025,4,BI,A, '
 DC  AL2(2),AL2(268),C'ETIME       ',C'YYYN ',AL1(00),C'029,4,BI,A, '
 DC  AL2(3),AL2(268),C'ENDTIME     ',C'YYYN ',AL1(00),C'029,4,BI,A, '
 DC  AL2(5),AL2(272),C'ENDDAY      ',C'YYYN ',AL1(00),C'071,2,BI,A, '
 DC  AL2(3),AL2(272),C'EDAYOFWEEK  ',C'YYYN ',AL1(00),C'071,2,BI,A, '
 DC  AL2(1),AL2(276),C'GDATE       ',C'NYYN ',AL1(03),C'017,4,BI,A, '
 DC  AL2(1),AL2(276),C'SGDATE      ',C'NYYN ',AL1(03),C'017,4,BI,A, '
 DC  AL2(5),AL2(276),C'STARTGDATE  ',C'NYYN ',AL1(03),C'017,4,BI,A, '
 DC  AL2(1),AL2(280),C'EGDATE      ',C'NYYN ',AL1(00),C'025,4,BI,A, '
 DC  AL2(3),AL2(280),C'ENDGDATE    ',C'NYYN ',AL1(00),C'025,4,BI,A, '
 DC  34X'FF'
         EJECT
***********************************************************************
*                                                                     *
*        THIS IS A TABLE OF PRINT OPTIONS                             *
*                                                                     *
*        EACH ENTRY IS 6 BYTES LONG.  AN ENTRY WHICH BEGINS           *
*        WITH A X'FF' INDICATES END OF THE TABLE.                     *
*                                                                     *
*        EACH ENTRY HAS THE FOLLOWING FORMAT:                         *
*                                                                     *
*        1)  1 BYTE PRINT INDICATOR.  A "Y" INDICATES THAT            *
*            PRINTING IS DESIRED.  ANY OTHER VALUE INDICATES          *
*            NO PRINTING.                                             *
*                                                                     *
*        2)  1 BYTE FILLER                                            *
*                                                                     *
*        3)  A HALFWORD INDEX FROM THE START OF THE DETAIL LINE       *
*            TO PLACE THE OUTPUT VALUE.                               *
*                                                                     *
*        4)  A HALFWORD BRANCH TABLE OFFSET FROM LABEL "PRSETUP2"     *
*            TO PERFORM OUTPUT FIELD PRINT PROCESSING.                *
*                                                                     *
***********************************************************************
PRTOPT   CSECT
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    6X'FF'
         END
