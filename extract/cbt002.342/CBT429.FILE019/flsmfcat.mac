         TITLE 'ICF CATALOG ACTIVITY REPORT - &SYSDATE'
***********************************************************************
*                                                                     *
*                          F L S M F C A T                            *
*                                                                     *
*                                                                     *
*        THIS PROGRAM WAS WRITTEN TO FORMAT A REPORT OF SELECTED      *
*        SMF TYPE 61, 65, AND 66 RECORDS.  THE FOLLOWING              *
*        INFORMATION CAN BE WRITTEN IN THE REPORT:                    *
*                                                                     *
*        1)  CATALOG NAME                                             *
*        2)  DATASET NAME                                             *
*        3)  DATASET TYPE                                             *
*        4)  DATE                                                     *
*        5)  DAY OF THE WEEK                                          *
*        6)  JOB TYPE                                                 *
*        7)  JOBNAME                                                  *
*        8)  OPERATION NAME                                           *
*        9)  SMF SYSTEM-ID                                            *
*        10) TIME                                                     *
*                                                                     *
***********************************************************************
*                                                                     *
*                           NOTE                                      *
*                                                                     *
*                                                                     *
*        DAY OF THE WEEK SELECTION CAN INVOLVE THE USE OF SEVERAL     *
*        CONTROL STATEMENTS.  WHEN USED, AT LEASE 1 "INCLUDING"       *
*        STATEMENT MUST BE USED.  THE "INCLUDING" STATEMENTS ARE      *
*        AS FOLLOWS:                                                  *
*                                                                     *
*        1)  SUNDAY           INCLUDE SUNDAY DATA                     *
*        2)  MONDAY           INCLUDE MONDAY DATA                     *
*        3)  TUESDAY          INCLUDE TUESDAY DATA                    *
*        4)  WEDNESDAY        INCLUDE WEDNESDAY DATA                  *
*        5)  THURSDAY         INCLUDE THURSDAY DATA                   *
*        6)  FRIDAY           INCLUDE FRIDAY DATA                     *
*        7)  SATURDAY         INCLUDE SATURDAY DATA                   *
*        8)  WEEKDAY          INCLUDE SAT AND SUN DATA                *
*        9)  WEEKEND          INCLUDE MON THROUGH FRI DATA            *
*        10) ALLDAYS/EVERYDAY INCLUDE DATA FOR ALL DAYS               *
*                                                                     *
*        AFTER "INCLUDING" DATA FOR SOME DAYS OF THE WEEK, ONE        *
*        OR MORE CAN THEN BE "EXCLUDED".  THE "EXCLUDING"             *
*        STATEMENTS ARE AS FOLLOWS:                                   *
*                                                                     *
*        1)  NOSUNDAY         EXCLUDE SUNDAY DATA                     *
*        2)  NOMONDAY         EXCLUDE MONDAY DATA                     *
*        3)  NOTUESDAY        EXCLUDE TUESDAY DATA                    *
*        4)  NOWEDNESDAY      EXCLUDE WEDNESDAY DATA                  *
*        5)  NOTHURSDAY       EXCLUDE THURSDAY DATA                   *
*        6)  NOFRIDAY         EXCLUDE FRIDAY DATA                     *
*        7)  NOSATURDAY       EXCLUDE SATURDAY DATA                   *
*        8)  NOWEEKDAY        EXCLUDE SAT AND SUN DATA                *
*        9)  NOWEEKEND        EXCLUDE MON THROUGH FRI DATA            *
*                                                                     *
*        IF NONE OF THE "INCLUDING" OR "EXCLUDING" STATEMENTS         *
*        ARE ENTERED, THEN ALL DAYS ARE INCLUDED.                     *
*                                                                     *
*        IT IS POSSIBLE THAT THROUGH AN INVALID COMBINATION OF        *
*        STATEMENTS THAT NO DATA SELECTION MAY OCCUR.  THE            *
*        STATEMENTS ARE PROCESSED IN THE ORDER ENTERED.  FOR          *
*        INSTANCE:                                                    *
*                                                                     *
*        WEEKEND                                                      *
*        NOSATURDAY                                                   *
*        NOSUNDAY                                                     *
*                                                                     *
*        THIS COMBINATION WOULD LOGICALLY EXCLUDE ALL DATA.           *
*                                                                     *
*        LIKEWISE:                                                    *
*                                                                     *
*        NOMONDAY                                                     *
*                                                                     *
*        THIS COMBINATION WOULD LOGICALLY EXCLUDE ALL DATA.           *
*        IF ONLY EXCLUDING STATEMENTS ARE ENTERED, NO SELECTION       *
*        CAN OCCUR.  IT IS PROBABLY SAFER TO ONLY USE INCLUDING       *
*        STATEMENTS.                                                  *
*                                                                     *
***********************************************************************
*                                                                     *
*                                                                     *
*        RECORD SELECTION AND CONTROL IS BY SYSIN CONTROL             *
*        STATEMENTS (IF ANY).  ANY NUMBER OF STATEMENTS CAN           *
*        BE ENTERED WITH THE KEYWORD STARTING IN COLUMN 1             *
*        OF EACH STATEMENT.                                           *
*                                                                     *
*                                                                     *
*        ALLOWABLE INPUT RECORD KEYWORDS ARE AS FOLLOWS:              *
*                                                                     *
*        1)  JOBNAME=JJJJJJJJ(NN)                                     *
*            WHERE JJJJJJJJ IS A 1 TO 8 CHARACTER JOBNAME             *
*                  N IS THE STARTING POSITION WITHIN THE FULL         *
*                  JOBNAME TO BE USED FOR SELECTION                   *
*                                                                     *
*            ALIASES JOBNM                                            *
*                                                                     *
*            UP TO 1000 JOBNAME CONTROL STATEMENTS MAY BE             *
*            ENTERED                                                  *
*                                                                     *
*        2)  EXJOBNAME=JJJJJJJJ(NN)                                   *
*            WHERE JJJJJJJJ IS A 1 TO 8 CHARACTER JOBNAME             *
*                  N IS THE STARTING POSITION WITHIN THE FULL         *
*                  JOBNAME TO BE EXCLUDED FROM SELECTION.             *
*                                                                     *
*            ALIASES XJOBNAME, EXJOBNM, XJOBNM                        *
*                                                                     *
*            UP TO 1000 EXJOBNAME CONTROL STATEMENTS MAY BE           *
*            ENTERED                                                  *
*                                                                     *
*        3)  DATE=YY.DDD:YY.DDD                                       *
*            WHERE YY.DDD IS THE JULIAN START DATE                    *
*                  YY.DDD:YY.DDD IS THE JULIAN START:END DATE         *
*                                                                     *
*            ALIASES *NONE*                                           *
*                                                                     *
*            UP TO 1000 DATE RANGE CONTROL STATEMENTS MAY BE          *
*            ENTERED                                                  *
*                                                                     *
*        4)  TIME=HH.MM:HH.MM                                         *
*            WHERE HH.MM IS THE START TIME                            *
*                  HH.MM:HH.MM IS THE START:END TIME                  *
*                                                                     *
*            ALIASES *NONE*                                           *
*                                                                     *
*            UP TO 1000 TIME RANGE CONTROL STATEMENTS MAY BE          *
*            ENTERED                                                  *
*                                                                     *
*        5)  SYSTEM=SSSS                                              *
*            WHERE SSSS IS THE 4 CHARACTER SMF SYSTEM ID TO BE        *
*                  USED FOR SELECTION                                 *
*                                                                     *
*            ALIASES SYSID                                            *
*                                                                     *
*            UP TO 1000 SYSTEM ID CONTROL STATEMENTS MAY BE           *
*            ENTERED                                                  *
*                                                                     *
*        6)  EXSYSTEM=SSSS                                            *
*            WHERE SSSS IS THE 4 CHARACTER SMF SYSTEM ID TO BE        *
*                  EXCLUDED FROM SELECTION                            *
*                                                                     *
*            ALIASES EXSYSID, XSYSTEM, XSYSID                         *
*                                                                     *
*            UP TO 1000 EXSYSTEM ID CONTROL STATEMENTS MAY BE         *
*            ENTERED                                                  *
*                                                                     *
*        7)  DSN=DDDDDDDDD                                            *
*            WHERE DDDDDDDD IS THE DATASET NAME BEING PROCESSED       *
*                  TO BE USED FOR SELECTION                           *
*                                                                     *
*            ALIASES DATASET                                          *
*                                                                     *
*            UP TO 1000 DATASET NAME CONTROL STATEMENTS MAY BE        *
*            ENTERED                                                  *
*                                                                     *
*        8)  EXDSNAME=DDDDDDDDD                                       *
*            WHERE DDDDDDDD IS THE DATASET NAME BEING PROCESSED       *
*                  TO BE EXCLUDED FROM SELECTION                      *
*                                                                     *
*            ALIASES EXDATASET, XDSNAME, XDATASET                     *
*                                                                     *
*            UP TO 1000 EXDATASET NAME CONTROL STATEMENTS MAY BE      *
*            ENTERED                                                  *
*                                                                     *
*        9)  CATNAME=CCCCCCCCC                                        *
*            WHERE CCCCCCCC IS THE CATALOG NAME WHICH CONTAINED       *
*                  TO ENTRY BEING MODIFIED TO BE USED FOR             *
*                  SELECTION                                          *
*                                                                     *
*            ALIASES CATALOG                                          *
*                                                                     *
*            UP TO 1000 CATNAME CONTROL STATEMENTS MAY BE             *
*            ENTERED                                                  *
*                                                                     *
*        10) EXCATNAME=CCCCCCCCC                                      *
*            WHERE CCCCCCCC IS THE CATALOG NAME WHICH CONTAINED       *
*                  TO ENTRY BEING MODIFIED TO BE EXCLUDED FROM        *
*                  SELECTION                                          *
*                                                                     *
*            ALIASES XCATNAME, EXCATALOG, XCATALOG                    *
*                                                                     *
*            UP TO 1000 EXCATNAME CONTROL STATEMENTS MAY BE           *
*            ENTERED                                                  *
*                                                                     *
*        11) DSTYPE=TTTTTTTTT                                         *
*            WHERE TTTTTTT IS ONE OF THE FOLLOWING DATASET            *
*                  TYPES TO BE USED FOR SELECTION:                    *
*                                                                     *
*                  NONVSAM GDG     CLUSTER DATA    AIX                *
*                  INDEX   MCAT    PAGESPC PATH    UCAT               *
*                  VOLUME  ALIAS   UPGRADE UNKN                       *
*                                                                     *
*            ALIASES DATASETYPE, DTYPE                                *
*                                                                     *
*        12) OPERATION=OOOOOOO                                        *
*            WHERE OOOOOOO IS ONE OF THE FOLLOWING CATALOG            *
*                  OPERATIONS TO BE USED FOR SELECTION:               *
*                                                                     *
*                  DEFINE  DELETE  SCRATCH RENAME  ALTER              *
*                                                                     *
*            ALIASES *NONE*                                           *
*                                                                     *
*        13) JOBTYPE=X                                                *
*            WHERE X IS EITHER A T FOR TEST JOBS OR A P FOR           *
*                  PRODUCTION JOBS TO BE USED FOR SELECTION.          *
*                                                                     *
*            ALIASES JTYPE/TYPE                                       *
*                                                                     *
*        14) STOPAFTER=NNNNNNNNN                                      *
*                                                                     *
*            WHERE NNNNNNNNN IS THE NUMBER OF ITEMS TO INCLUDE        *
*                  ON THE REPORT.  IT WILL THE BE FIRST NNNNNN        *
*                  INPUT TYPE 14, 15, OR 64 RECORDS IF THE SORT       *
*                  OPTION IS NOT TAKEN OR THE FIRST NNNNNN            *
*                  RECORDS OF THE REQUESTED SORT SEQUENCE.            *
*                                                                     *
*            ALIASES STOPCOUNT/STOPCNT                                *
*                                                                     *
*        15) SUNDAY/NOSUNDAY                                          *
*            MONDAY/NOMONDAY                                          *
*            TUESDAY/NOTUESDAY                                        *
*            WEDNESDAY/NOWEDNESDAY                                    *
*            THURSDAY/NOTHURSDAY                                      *
*            FRIDAY/NOFRIDAY                                          *
*            SATURDAY/NOSATURDAY                                      *
*            WEEKDAY/NOWEEKDAY                                        *
*            WEEKEND/NOWEEKEND                                        *
*            ALLDAYS/EVERYDAY                                         *
*                                                                     *
*            THESE CONTROL STATEMENTS, WHEN USED IN COMBINATION,      *
*            WILL SELECT DATA BASED UPON THE DAY OF THE WEEK.         *
*            THEY ARE PROCESSED IN THE ORDER RECEIVED.  NO DATA       *
*            IS AUTOMATICALLY INCLUDED.  AT LEAST ONE "INCLUDING"     *
*            STATEMENT MUST BE ENTERED IF ANY OF THESE STATEMENTS     *
*            ARE ENTERED.  IF NONE OF THESE STATEMENTS ARE USED,      *
*            ALL DAYS ARE SELECTED.                                   *
*                                                                     *
*        16) SORT=OPT1,OPT2,OPT3,OPT4,OPT5                            *
*            WHERE SORTING OF THE INPUT DATA IS REQUESTED IN THE      *
*            ORDER IN WHICH THE FOLLOWING OPTIONS ARE LISTED:         *
*                                                                     *
*            A)  CATNAME                                              *
*            B)  DATE                                                 *
*            C)  DAYOFTHEWEEK                                         *
*            D)  DSNAME/DATASET                                       *
*            E)  DSTYPE                                               *
*            F)  JOBNAME/JOBNM                                        *
*            G)  JOBTYPE/JTYPE/TYPE                                   *
*            H)  OPERATION                                            *
*            I)  SYSTEM/SYSID                                         *
*            J)  TIME                                                 *
*                                                                     *
*            NOTE THAT EACH KEYWORD CAN BE SUFFIXED BY "(A)" OR       *
*            "(D)" FOR ASCENDING OR DESCENDING SORT SEQUENCE.         *
*            THE DEFAULT IS "(A)" FOR ASCENDING                       *
*                                                                     *
*            A MAXIMUM OF FIVE OF THE ABOVE OPTIONS MAY BE MADE       *
*            ON A GIVEN RUN.                                          *
*                                                                     *
*            IF AN OPTION IS NOT SPECIFIED, NO SORTING ON THAT        *
*            FIELD WILL BE MADE.                                      *
*                                                                     *
*        24) PRINT=FIELD1,FIELD2,FIELD3,FIELD4, ... FIELD.            *
*            WHERE CUSTOM SELECTION OF THE FIELDS TO BE INCLUDED      *
*            ON THE OUTPUT REPORT IS BEING MADE.  THE FIELDS          *
*            WILL BE PRINTED IN THE ORDER SPECIFIED AND INCLUDE       *
*            THE FOLLOWING VALUES:                                    *
*                                                                     *
*            A)  CATNAME                                              *
*            B)  DATE                                                 *
*            C)  DAYOFTHEWEEK                                         *
*            D)  DSNAME/DATASET                                       *
*            E)  DSTYPE                                               *
*            F)  JOBNAME/JOBNM                                        *
*            G)  JOBTYPE/JTYPE/TYPE                                   *
*            H)  OPERATION                                            *
*            I)  SYSTEM/SYSID                                         *
*            J)  TIME                                                 *
*                                                                     *
*            AS MANY FIELDS MAY BE SELECTED AS WILL FIT IN THE        *
*            133 CHARACTER PRINT LINE.                                *
*                                                                     *
*            MULTIPLE PRINT STATEMENTS CAN BE USED IF THE NUMBER      *
*            OR FIELDS NAMES IS EXCESSIVE.                            *
*                                                                     *
*                                                                     *
*                                                                     *
*        L I N K A G E    E D I T O R    I N F O R M A T I O N        *
*                                                                     *
*        SIZE - 25K                                                   *
*        ATTR - NORENT, NOREUS, NOREFR, AMODE24, RMODE24              *
*                                                                     *
*                                                                     *
*                                                                     *
*        WRITTEN BY:                                                  *
*                   JOHN V. HOOPER                                    *
*                   FOOD LION, INC.                                   *
*                   2110 EXECUTIVE DRIVE                              *
*                   SALISBURY, N.C.  28145-1330                       *
*                                                                     *
*                                                                     *
*                           DISCLAIMER                                *
*                                                                     *
*      THE AUTHORS INCLUDING FOOD LION, ITS OFFICERS,                 *
*      DIRECTORS, AND EMPLOYEES MAKE NO REPRESENTATION OR             *
*      WARRANTY OF ANY KIND WHATSOEVER, INCLUDING, BUT NOT            *
*      LIMITED TO, REPRESENTATIONS OR WARRANTIES, EXPRESS OR          *
*      IMPLIED, OR MERCHANTABILITY, FITNESS FOR USE OR PURPOSE,       *
*      ACCURACY OR COMPLETENESS OF PROCESSES, PROCEDURES,             *
*      DESIGNS, DEFINITIONS, INSTRUCTIONS, INFORMATION, OR            *
*      FUNCTIONING OF ANY PROGRAMS, DOCUMENTS, OR RELATED             *
*      MATERIALS; THE AUTHORS FURTHER EXPRESSLY DISCLAIM ANY          *
*      KNOWLEDGE OF PURPOSE FOR WHICH THESE PROGRAMS,                 *
*      DOCUMENTS, OR RELATED MATERIAL MAY BE UTILIZED OR THEIR        *
*      APPLICABILITY FOR SUCH USE, NOR SHALL THE FACT OF MAKING       *
*      THEM AVAILABLE CONSTITUTE ANY SUCH REPRESENTATION,             *
*      WARRANTY, OR KNOWLEDGE; NOR DO THE AUTHORS ASSUME ANY          *
*      LIABILITY, RESPONSIBILITY, OR OBLIGATION ARISING FROM          *
*      THE USE OR MALFUNCTIONING OF OF THESE COMPUTER PROGRAMS,       *
*      DOCUMENTATION, OR RELATED MATERIALS.                           *
*                                                                     *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*                                                                     *
*                           SAMPLE JCL                                *
*                                                                     *
*       //JOBNAME  JOB ....                                           *
*       //STEP1    EXEC PGM=FLSMFCAT                                  *
*       //SMFIN    DD  DSN=SMF.INPUT.FILE,DISP=SHR                    *
*       //SYSPRINT DD  SYSOUT=*                                       *
*       //SYSOUT   DD  SYSOUT=*                                       *
*       //SYSUDUMP DD  SYSOUT=*                                       *
*       //SYSIN    DD  *                                              *
*       DSN=TCAT                                                      *
*       SORT=DSN                                                      *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*                                                                     *
*                        M A C R O S    U S E D                       *
*                                                                     *
*                                                                     *
*        01)  ABEND        SYS1.MACLIB                                *
*        02)  CLOSE        SYS1.MACLIB                                *
*        03)  DCB          SYS1.MACLIB                                *
*        04)  GET          SYS1.MACLIB                                *
*        05)  IFASMFI6     SYS1.MACLIB                                *
*        06)  LINK         SYS1.MACLIB                                *
*        07)  OPEN         SYS1.MACLIB                                *
*        08)  PUT          SYS1.MACLIB                                *
*        09)  RETURN       SYS1.MACLIB                                *
*        10)  SAVE         SYS1.MACLIB                                *
*        11)  WTO          SYS1.MACLIB                                *
*                                                                     *
***********************************************************************
         SPACE 3
         EJECT
FLSMFCAT CSECT
***********************************************************************
*                                                                     *
*                         REGISTER EQUATES                            *
*                                                                     *
***********************************************************************
R0       EQU   00
R1       EQU   01
R2       EQU   02
R3       EQU   03
R4       EQU   04
R5       EQU   05
R6       EQU   06
R7       EQU   07
R8       EQU   08                  WORK AREA BASE
R9       EQU   09                  BASE REGISTER 2
R10      EQU   10                  BASE REGISTER 3
R11      EQU   11                  BASE REGISTER 4
R12      EQU   12                  BASE REGISTER 5
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
***********************************************************************
*                                                                     *
*        START OF PROGRAM                                             *
*                                                                     *
***********************************************************************
         SAVE  (14,12),,'FLSMFCAT_&SYSDATE._&SYSTIME'
         USING FLSMFCAT,R9,R10,R11,R12 SET PROGRAM ADDRESSABILITY
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LA    R2,SAVEAREA         LOAD ADDRESS OF NEW SAVE
         ST    R13,4(R2)           SAVE CALLER'S SAVE AREA ADDR
         ST    R2,8(R13)           SAVE MY SAVE AREA ADDRESS
         LR    R13,R2              LOAD REGISTER 13 WITH SAVE AREA
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
         B     CHECKPR             GO CHECK SYSPRINT FILE
SAVEAREA DS    18F                 PROGRAM SAVE AREA
         EJECT
***********************************************************************
*                                                                     *
*        THIS ROUTINE WILL PROCESS THE INPUT SYSIN CONTROL            *
*        STATEMENTS (IF ANY).                                         *
*                                                                     *
***********************************************************************
CHECKPR  MVC   DDNAME,=CL8'SYSPRINT' SET DDNAME TO 'SYSPRINT'
         L     R15,=V(FINDDN)      LOAD ADDRESS OF TIOT SEARCH ROUTINE
         BALR  R14,R15             GO SEARCH TIOT FOR DDNAME
         LTR   R15,R15             CHECK RETURN CODE
         BNZ   ERROR029            NOT ZERO, ERROR
OPENPR   OPEN  (SYSPRINT,(OUTPUT)) OPEN PRINT FILE
         SPACE 3
PROCSYS  MVC   DDNAME,=CL8'SYSIN'  SET DDNAME TO 'SYSIN'
         L     R15,=V(FINDDN)      LOAD ADDRESS OF TIOT SEARCH ROUTINE
         BALR  R14,R15             GO SEARCH TIOT FOR DDNAME
         LTR   R15,R15             CHECK RETURN CODE
         BZ    OPENSYS             ZERO, GO OPEN INPUT
         WTO   'SMF3000 - OPTIONAL SYSIN DD STATEMENT NOT SPECIFIED, NOX
                OPTIONS SPECIFIED',                                    X
               ROUTCDE=11
         B     NOPARM              ZERO, NO PARM, BRANCH
OPENSYS  OPEN  (SYSIN)             OPEN INPUT SYSIN DATA SET
         PUT   SYSPRINT,HEAD       WRITE THE OPTION HEADINGS
READSYS  GET   SYSIN,CARDAREA      READ INPUT OPTIONS
         MVC   CARDAREA+72(8),=CL8' ' BLANK POSSIBLE CARD SEQ NUMBER
         PUT   SYSPRINT,CARDREC    WRITE THE OPTION CARD
         MVI   CARDREC,C' '        SET NEXT LINE TO SINGLE SPACE
         CLI   CARDAREA,C'*'       SEE IF COMMENT STATEMENT
         BE    READSYS             YES, GO READ ANOTHER STATEMENT
         L     R15,=V(PRMCHK)      LOAD ADDRESS OF PARM CHECK ROUTINE
         BALR  R14,R15             GO PROCESS PARM
         LTR   R15,R15             TEST RETURN CODE
         BNZ   ERROR999            NOT ZERO, BAD PARM
         B     READSYS             GO GET ANOTHER SYSIN OPTION CARD
         SPACE 3
***********************************************************************
*        END OF PARMS                                                 *
***********************************************************************
ENDPARM  TM    SWITCH,SELDAY       SEE IF DAY-OF-THE-WEEK SELECTION
         BNO   ENDPARM1            NO, CONTINUE
         CLI   DAYSW,0             SEE IF ANY DAYS SELECTED
         BE    ERROR063            NO, ERROR
ENDPARM1 CLOSE (SYSIN)             CLOSE SYSIN FILE
         EJECT
NOPARM   DS    0H
***********************************************************************
*                                                                     *
*        SET UP DEFAULT PRINT OPTIONS IF NECESSARY.                   *
*                                                                     *
***********************************************************************
PRDFLT   TM    SWITCH+1,SELPRINT   SEE IF PRINT OPTION SPECIFIED
         BO    PRSETUP             YES, DO NOT SET DEFAULTS
         L     R1,=V(PRTOPT)       LOAD ADDRESS OF PRINT OPTIONS
         L     R2,=V(OPTKEY)       LOAD ADDRESS OF OPTIONS KEYWORD TBL
PRDFLT1  CLI   0(R2),X'FF'         END OF TABLE
         BE    PRSETUP             YES, QUIT
         CLI   19(R2),0            SEE IF PRINT SEQUENCE SPECIFIED
         BNE   PRDFLT3             YES, BRANCH
PRDFLT2  LA    R2,32(,R2)          INCREMENT TO NEXT TABLE ENTRY
         B     PRDFLT1             LOOP
PRDFLT3  SLR   R15,R15             CLEAR REG FOR IC
         IC    R15,19(R2)          LOAD DEFAULT PR SEQUENCE NUMBER
         BCTR  R15,0               MAKE RELATIVE TO ZERO
         MH    R15,=H'6'           MULTIPLY BY LENGTH OF EACH ENTRY
         AR    R15,R1              POINT TO PROPER ENTRY
         MVI   0(R15),C'Y'         TURN ON PRINTABLE INDICATOR
         MVC   4(2,R15),2(R2)      SAVE INDEX FROM OPTION TABLE
         B     PRDFLT2             GO PROCESS NEXT OPTION ENTRY
         EJECT
***********************************************************************
*                                                                     *
*        COMPLETE SETUP FOR THE SPECIFIED OR DEFAULT PRINT            *
*        OPTIONS.  EACH PRINT FIELD HAS A PROCESSING ROUTINE          *
*        TO SET THE HEADING VALUES AND ESTABLISH THE OFFSET           *
*        WITHIN THE DETAIL RECORD FOR OUPTUT PROCESSING.              *
*                                                                     *
***********************************************************************
PRSETUP  L     R1,=V(PRTOPT)       LOAD ADDRESS OF PRINT OPTIONS
         CLI   0(R1),C'Y'          MAKE SURE AT ONE FIELDS PRINTED
         BNE   ERROR041            NO, ERROR
         LA    R2,HEAD2A+1         POINT TO 1ST VARIABLE HEAD LINE
         LA    R3,HEAD2B+1         POINT TO 2ND VARIABLE HEAD LINE
         LA    R4,1                SET LINE LENGTH TO 1
PRSETUP1 CLI   0(R1),X'FF'         PHYSICAL END OF TABLE
         BE    PRSETUP4            YES, BRANCH
         CLI   0(R1),C'N'          LOGICAL END OF TABLE
         BE    PRSETUP4            YES, BRANCH
         LH    R15,4(R1)           LOAD BRANCH TABLE OFFSET
         B     PRSETUP2(R15)       BRANCH TO PROPER ROUTINE BY INDEX
PRSETUP2 B     SETJOBNM            INDEX = 00
         B     SETDATE             INDEX = 04
         B     SETTIME             INDEX = 08
         B     SETSYSID            INDEX = 12
         B     SETDSN              INDEX = 16
         B     SETCNAME            INDEX = 20
         B     SETDTYP             INDEX = 24
         B     SETOP               INDEX = 28
         B     SETJTYPE            INDEX = 32
         B     ERROR042            INDEX = 36
         B     ERROR042            INDEX = 40
         B     ERROR042            INDEX = 44
         B     ERROR042            INDEX = 48
         B     ERROR042            INDEX = 52
         B     ERROR042            INDEX = 56
         B     ERROR042            INDEX = 60
         B     ERROR042            INDEX = 64
         B     ERROR042            INDEX = 68
         B     ERROR042            INDEX = 72
         B     ERROR042            INDEX = 76
         B     ERROR042            INDEX = 80
         B     ERROR042            INDEX = 84
         B     ERROR042            INDEX = 88
         B     ERROR042            INDEX = 92
         B     ERROR042            INDEX = 96
         B     ERROR042            INDEX = 100
         B     ERROR042            INDEX = 104
         B     ERROR042            INDEX = 108
         B     ERROR042            INDEX = 112
         B     ERROR042            INDEX = 116
         B     ERROR042            INDEX = 120
         B     ERROR042            INDEX = 124
         B     ERROR042            INDEX = 128
         B     ERROR042            INDEX = 132
         B     ERROR042            INDEX = 136
         B     SETDAY              INDEX = 140
         B     ERROR042            INDEX = 144
PRSETUP3 LA    R1,6(,R1)           INCREMENT TO NEXT TABLE ENTRY
         B     PRSETUP1            LOOP
PRSETUP4 CH    R14,=H'133'         SEE IF EXCEEDS MAXIMUM LENGTH
         BH    ERROR043            YES, ERROR
         B     CHECKIN             NO, GO READ SMF DATA
         EJECT
***********************************************************************
*        SETUP FOR JOB NAME                                           *
***********************************************************************
SETJOBNM MVC   0(8,R2),=CL8'  JOB   '
         MVC   0(8,R3),=CL8'  NAME  '
         LA    R14,8               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR DATE                                               *
***********************************************************************
SETDATE  MVC   0(6,R2),=CL6'START '
         MVC   0(6,R3),=CL6'DATE'
         LA    R14,6               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR TIME                                               *
***********************************************************************
SETTIME  MVC   0(5,R2),=CL5'START '
         MVC   0(5,R3),=CL5'TIME'
         LA    R14,5               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR SYSTEM ID                                          *
***********************************************************************
SETSYSID MVC   0(4,R2),=CL4' SYS'
         MVC   0(4,R3),=CL4' ID '
         LA    R14,4               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR DATASET NAME                                       *
***********************************************************************
SETDSN   MVC   0(49,R2),=CL49'            DATASET'
         MVC   0(49,R3),=CL49'             NAME  '
         LA    R14,49              LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR CATALOG NAME                                       *
***********************************************************************
SETCNAME MVC   0(44,R2),=CL44'            CATALOG'
         MVC   0(44,R3),=CL44'             NAME  '
         LA    R14,44              LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR DATASET TYPE                                       *
***********************************************************************
SETDTYP  MVC   0(7,R2),=CL7'DATASET'
         MVC   0(7,R3),=CL7' TYPE  '
         LA    R14,7               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR OPERATION NAME                                     *
***********************************************************************
SETOP    MVC   0(7,R2),=CL7' OPER  '
         MVC   0(7,R3),=CL7' ATION '
         LA    R14,7               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR JOB TYPE                                           *
***********************************************************************
SETJTYPE MVC   0(1,R2),=CL1'T'
         MVC   0(1,R3),=CL1'Y'
         LA    R14,1               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR DAY-OF-THE-WEEK                                    *
***********************************************************************
SETDAY   MVC   0(3,R2),=CL3'DAY'
         MVC   0(3,R3),=CL3'WK '
         LA    R14,3               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP COMMON ROUTINE                                         *
***********************************************************************
SETCOMM  STH   R4,2(R1)            SAVE OFFSET VALUE
         LA    R2,1(R14,R2)        INCREMENT HEAD2A
         LA    R3,1(R14,R3)        INCREMENT HEAD2B
         LA    R4,1(R14,R4)        INCREMENT OFFSET POINTER
         B     PRSETUP3            GO PROCESS NEXT TABLE ENTRY
         EJECT
***********************************************************************
*                                                                     *
*        GET READY TO PROCESS SMF DATA                                *
*                                                                     *
***********************************************************************
CHECKIN  MVC   DDNAME,=CL8'SMFIN'  SET DDNAME TO 'SMFIN'
         L     R15,=V(FINDDN)      LOAD ADDRESS OF TIOT SEARCH ROUTINE
         BALR  R14,R15             GO SEARCH TIOT FOR DDNAME
         LTR   R15,R15             CHECK RETURN CODE
         BNZ   ERROR030            NOT ZERO, ERROR
OPENIN   OPEN  (SMFIN,(INPUT))     OPEN INPUT FILE
CKOPTION TM    SWITCH,SELSORT      WAS SORTING SELECTED?
         BNO   READIN              NO, BYPASS SORT
         LA    R1,SORTPARM         LOAD ADDRESS OF SORT PARMS
         LINK  EP=SORT             GO TO SORT
         B     ENDJOB              GO END THE JOB
READIN   LA    R15,READRTN         LOAD ADDRESS OF READ SMF ROUTINE
         BALR  R14,R15             GO READ SMF ROUTINE
         TM    SWITCH,ENDFILE      END OF FILE?
         BO    ENDJOB              YES, BRANCH
         L     R15,OUTCNT          LOAD OUTPUT COUNT
         LA    R15,1(,R15)         ADD 1 TO OUTPUT COUNT
         ST    R15,OUTCNT          SAVE NEW OUTPUT COUNT
         TM    SWITCH+1,SELSTCNT   SEE IF STOP COUNT ENTERED
         BNO   READIN1             NO, BRANCH
         C     R15,VALSTCNT        SEE IF EXCEEDS STOP COUNT
         BH    READIN              YES, DROP THIS RECORD
READIN1  LA    R15,FORMAT          LOAD ADDRESS OF FORMAT ROUTINE
         BALR  R14,R15             GO FORMAT PRINT RECORD
         CP    LINECT,=P'55'       SEE IF PAGE IS FULL
         BNH   READIN2             NO, BRANCH
         AP    PAGECT,=P'1'        ADD 1 TO PAGE COUNT
         MVC   OPAGCT,=X'402020202120' MOVE EDIT MASK TO HEAD 1
         ED    OPAGCT,PAGECT       EDIT PAGE COUNT TO HEAD 1
         PUT   SYSPRINT,HEAD1      PRINT HEADING LINE 1
         PUT   SYSPRINT,HEAD2A     PRINT HEADING LINE 2A
         PUT   SYSPRINT,HEAD2B     PRINT HEADING LINE 2B
         ZAP   LINECT,=P'5'        SET LINE COUNT TO 5
         MVI   DETAIL,C'0'         SET NEXT DETAIL TO DOUBLE SPACE
READIN2  PUT   SYSPRINT,DETAIL     PRINT DETAIL LINE
         AP    LINECT,=P'1'        ADD 1 TO LINE COUNT
         MVI   DETAIL,C' '         SET NEXT DETAIL TO SINGLE SPACE
         B     READIN              GO PROCESS NEXT RECORD
         EJECT
***********************************************************************
*                                                                     *
*        WRITE TOTALS                                                 *
*                                                                     *
***********************************************************************
ENDJOB   AP    PAGECT,=P'1'        ADD 1 TO PAGE COUNT
         MVC   OPAGCT,=X'402020202120' MOVE EDIT MASK TO HEAD 1
         ED    OPAGCT,PAGECT       EDIT PAGE COUNT TO HEAD 1
         PUT   SYSPRINT,HEAD1      PRINT HEADING LINE 1
         MVC   WORK(7),=X'4021204B202020' SET EDIT MASK
         ED    WORK(7),LOWDATE+1   EDIT THE LOW DATE
         MVC   HLDATE,WORK+1       MOVE LOW DATE (YY.DDD) TO HEADING
         ICM   R1,15,LOWTIME       LOAD LOW TIME TO REGISTER 1
         L     R15,=V(CNVTIME)     LOAD ADDRESS OF CONVERT TIME ROUTINE
         BALR  R14,R15             GO TO CONVERT TIME ROUTINE
         MVC   HLTIME,OUTTIME+1    MOVE TIME (HH:MM) TO HEADING
         MVC   WORK(7),=X'4021204B202020' SET EDIT MASK
         ED    WORK(7),HIGHDATE+1  EDIT THE HIGH DATE
         MVC   HHDATE,WORK+1       MOVE HIGH DATE (YY.DDD) TO HEADING
         ICM   R1,15,HIGHTIME      LOAD HIGH TIME TO REGISTER 1
         L     R15,=V(CNVTIME)     LOAD ADDRESS OF CONVERT TIME ROUTINE
         BALR  R14,R15             GO TO CONVERT TIME ROUTINE
         MVC   HHTIME,OUTTIME+1    MOVE TIME (HH:MM) TO HEADING
         PUT   SYSPRINT,HEAD3      PRINT HEADING LINE 3
         PUT   SYSPRINT,HEAD4      PRINT HEADING LINE 4
         MVI   DETAIL,C' '         BLANK ENTIRE
         MVC   DETAIL+1(132),DETAIL   DETAIL LINE
         MVI   DETAIL,C'0'         SET NEXT DETAIL TO DOUBLE SPACE
         SPACE 3
***********************************************************************
*                                                                     *
*        FORMAT THE TOTAL ENTRIES SELECTED.                           *
*                                                                     *
***********************************************************************
         SPACE 3
PACC1    MVC   DETAIL+1(15),=CL15'SELECTED ENTS  '
         MVC   DETAIL+17(36),BIGMASK1 SET EDIT MASK
         ED    DETAIL+17(36),ACC1  EDIT TOTAL TO DETAIL LINE
         PUT   SYSPRINT,DETAIL     WRITE TOTAL LINE
         EJECT
***********************************************************************
*                                                                     *
*        CLOSE FILES AND TERMINATE THE PROGRAM                        *
*                                                                     *
***********************************************************************
CLOSE    ICM   R1,B'1111',JOBNMTBL SEE IF JOBNAME TABLE ALLOCATED
         BZ    CLOSE2              NO, BRANCH
         FREEMAIN R,LV=10010,A=(1) FREE JOBNAME TABLE
CLOSE2   ICM   R1,B'1111',DATETBL  SEE IF DATE TABLE ALLOCATED
         BZ    CLOSE3              NO, BRANCH
         FREEMAIN R,LV=8008,A=(1)  FREE DATE TABLE
CLOSE3   ICM   R1,B'1111',TIMETBL  SEE IF TIME TABLE ALLOCATED
         BZ    CLOSE4              NO, BRANCH
         FREEMAIN R,LV=8008,A=(1)  FREE TIME TABLE
CLOSE4   ICM   R1,B'1111',SYSIDTBL SEE IF SYSID TABLE ALLOCATED
         BZ    CLOSE5              NO, BRANCH
         FREEMAIN R,LV=4004,A=(1)  FREE SYSID TABLE
CLOSE5   ICM   R1,B'1111',DSNTBL   SEE IF DSN TABLE ALLOCATED
         BZ    CLOSE6              NO, BRANCH
         FREEMAIN R,LV=46046,A=(1) FREE DSN TABLE
CLOSE6   ICM   R1,B'1111',CNMTBL   SEE IF CATALOG NAME TABLE ALLOCATED
         BZ    CLOSE7              NO, BRANCH
         FREEMAIN R,LV=46046,A=(1) FREE CATALOG NAME TABLE
CLOSE7   ICM   R1,B'1111',XJOBNTBL SEE IF EXJOBNAME TABLE ALLOCATED
         BZ    CLOSE8              NO, BRANCH
         FREEMAIN R,LV=10010,A=(1) FREE EXJOBNAME TABLE
CLOSE8   ICM   R1,B'1111',XSYSTBL  SEE IF EXSYSID TABLE ALLOCATED
         BZ    CLOSE9              NO, BRANCH
         FREEMAIN R,LV=4004,A=(1)  FREE SYSID TABLE
CLOSE9   ICM   R1,B'1111',XDSNTBL  SEE IF EXDSN TABLE ALLOCATED
         BZ    CLOSE10             NO, BRANCH
         FREEMAIN R,LV=46046,A=(1) FREE DSN TABLE
CLOSE10  ICM   R1,B'1111',XCNMTBL  SEE IF EXCATNAME TABLE ALLOCATED
         BZ    CLOSE11             NO, BRANCH
         FREEMAIN R,LV=46046,A=(1) FREE EXCATNAME TABLE
CLOSE11  CLOSE (SYSPRINT,,SMFIN)   CLOSE SMF INPUT FILE AND PRINT FILE
         L     R13,4(R13)          RESTORE ORIG REGISTER 13
         RETURN (14,12),RC=0       RETURN TO O/S
         SPACE 3
         LTORG
         EJECT
***********************************************************************
*                                                                     *
*        SORT INPUT PROCEDURE IF SORT OPTION USED                     *
*                                                                     *
***********************************************************************
         DS    0F
         PUSH  USING
E15      STM   R14,R12,12(R13)     SAVE REGISTERS
         USING E15,R9,R10,R11,R12  SET ADDRESSABILITY TO EXIT
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,E15SAVE         LOAD ADDR OF NEW SAVE
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
         LA    R3,SMFIN            LOAD ADDRESS OF INPUT DCB
E15READ  LA    R15,READRTN         LOAD ADDRESS OF READ SMF ROUTINE
         BALR  R14,R15             GO READ SMF ROUTINE
         TM    SWITCH,ENDFILE      END OF FILE?
         BO    E15EOF              YES, BRANCH
E15RET   L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         LA    R15,INREC           POINT TO INPUT RECORD
         ST    R15,24(R13)         STORE ADDRESS OF RECORD IN SAVE
         LM    R14,R12,12(R13)     RESTORE ORIGINAL REGS
         LA    R15,12              SET RETURN CODE TO 12
         BR    R14                 RETURN RECORD TO SORT
E15EOF   L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         LM    R14,R12,12(R13)     RESTORE ORIGINAL REGS
         LA    R15,8               SET RETURN CODE TO 8
         BR    R14                 RETURN TO SORT FOR LAST TIME
E15SAVE  DS    18F                 SORT EXIT E15 SAVE AREA
         DROP  R9,R10,R11,R12
         POP   USING
         EJECT
***********************************************************************
*                                                                     *
*        SORT OUTPUT PROCEDURE IF SORT OPTION USED                    *
*                                                                     *
***********************************************************************
         DS    0F
         PUSH  USING
E35      STM   R14,R12,12(R13)     SAVE REGISTERS
         USING E35,R9,R10,R11,R12  SET ADDRESSABILITY TO EXIT
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,E35SAVE         LOAD ADDR OF NEW SAVE
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
         L     R14,0(R1)           SAVE INPUT RECORD ADDRESS
         LTR   R14,R14             TEST INPUT RECORD ADDRESS
         BZ    E35EOF              ZERO, END OF FILE
         MVC   INREC,0(R14)        SAVE INPUT RECORD
         L     R15,OUTCNT          LOAD OUTPUT COUNT
         LA    R15,1(,R15)         ADD 1 TO OUTPUT COUNT
         ST    R15,OUTCNT          SAVE NEW OUTPUT COUNT
         TM    SWITCH+1,SELSTCNT   SEE IF STOP COUNT ENTERED
         BNO   E35CONT             NO, BRANCH
         C     R15,VALSTCNT        SEE IF EXCEEDS STOP COUNT
         BH    E35RET              YES, DROP THIS RECORD
E35CONT  LA    R15,FORMAT          LOAD ADDRESS OF FORMAT ROUTINE
         BALR  R14,R15             GO FORMAT PRINT RECORD
         CP    LINECT,=P'55'       SEE IF PAGE IS FULL
         BNH   E35DET              NO, BRANCH
         AP    PAGECT,=P'1'        ADD 1 TO PAGE COUNT
         MVC   OPAGCT,=X'402020202120' MOVE EDIT MASK TO HEAD 1
         ED    OPAGCT,PAGECT       EDIT PAGE COUNT TO HEAD 1
E35HD1   PUT   SYSPRINT,HEAD1      PRINT HEADING LINE 1
E35HD2   PUT   SYSPRINT,HEAD2A     PRINT HEADING LINE 2A
         PUT   SYSPRINT,HEAD2B     PRINT HEADING LINE 2B
         ZAP   LINECT,=P'5'        SET LINE COUNT TO 5
         MVI   DETAIL,C'0'         SET NEXT DETAIL TO DOUBLE SPACE
E35DET   PUT   SYSPRINT,DETAIL     PRINT DETAIL LINE
         AP    LINECT,=P'1'        ADD 1 TO LINE COUNT
         MVI   DETAIL,C' '         SET NEXT DETAIL TO SINGLE SPACE
E35RET   L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         LM    R14,R12,12(R13)     RESTORE ORIGINAL REGS
         LA    R15,4               SET RETURN CODE TO 4
         BR    R14                 RETURN TO SORT FOR ANOTHER RECORD
E35EOF   L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         LM    R14,R12,12(R13)     RESTORE ORIGINAL REGS
         LA    R15,8               SET RETURN CODE TO 8
         BR    R14                 RETURN TO SORT FOR LAST TIME
E35SAVE  DS    18F                 SORT EXIT E35 SAVE AREA
         DROP  R9,R10,R11,R12
         POP   USING
         EJECT
         PUSH  USING
***********************************************************************
*                                                                     *
*        THIS ROUTINE WILL READ THE SMF INPUT FILE UNTIL A PROPER     *
*        SMF RECORD IS FOUND.                                         *
*                                                                     *
*        ON ENTRY THE REGISTERS WILL BE AS FOLLOWS:                   *
*                                                                     *
*        1)  REGISTER 14 ON ENTRY WILL CONTAIN THE ENTRY POINT        *
*        2)  REGISTER 15 ON ENTRY WILL CONTAIN THE RETURN ADDRESS     *
*                                                                     *
*        RECORDS WILL BE FILTERED OUT IF SELECTION CRITERIA WAS       *
*        SPECIFIED ON AN INPUT CONTROL CARD.                          *
*                                                                     *
*        THE SMF TYPE 61, 65 AND 65 RECORDS WILL BE REFORMATTED       *
*        INTO A FIXED LENGTH RECORD AT LABEL INREC.                   *
*                                                                     *
*        ON EOF, THE ENDFILE INDICATOR WILL BE TURNED ON              *
*                                                                     *
*        RETURN FROM THIS ROUTINE WILL BE MADE TO REGISTER 14         *
*                                                                     *
***********************************************************************
READRTN  STM   R14,R12,12(R13)     SAVE REGISTERS
         USING READRTN,R9,R10,R11,R12 SET ADDRESSABILITY TO ROUTINE
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,SAVE1           LOAD ADDR OF NEW SAVE
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
         B     READ                GO READ SMF RECORD
SAVE1    DS    18F                 ROUTINE SAVE AREA
***********************************************************************
*                                                                     *
*        READ AN SMF TYPE 14 OR 15 RECORD.  REFORMAT IT INTO          *
*        A MORE USABLE RECORD FORMAT.                                 *
*                                                                     *
***********************************************************************
READ     TM    SWITCH,RECORD2      SEE IF SECOND RENAME RECORD NEEDED
         BO    READ17              YES, GO DO IT
         GET   SMFIN               READ SMF INPUT
         ST    R1,RECADDR          SAVE RECORD ADDRESS
         LR    R5,R1               SAVE INPUT RECORD ADDRESS
         USING SMFT61,R5           SET ADDRESSABILITY TO SMF RECORD
READ1    CLC   SMF61DTE,LOWDATE    SEE IF NEW LOW DATE
         BNL   READ2               NO, BRANCH
         MVC   LOWDATE,SMF61DTE    SAVE NEW LOW DATE
         MVC   LOWTIME,SMF61TME    SAVE NEW LOW TIME
         B     READ3               GO SEE IF ALSO NEW HIGH DATE/TIME
READ2    CLC   SMF61DTE,LOWDATE    SEE IF SAME LOW DATE
         BH    READ3               NO, NOT NEW LOW DATE/TIME
         CLC   SMF61TME,LOWTIME    SEE IF NEW LOW TIME
         BNL   READ3               NO, BRANCH
         MVC   LOWTIME,SMF61TME    SAVE NEW LOW TIME
READ3    CLC   SMF61DTE,HIGHDATE   SEE IF NEW HIGH DATE
         BNH   READ4               NO, BRANCH
         MVC   HIGHDATE,SMF61DTE   SAVE NEW HIGH DATE
         MVC   HIGHTIME,SMF61TME   SAVE NEW HIGH TIME
         B     READ5               GET OUT
READ4    CLC   SMF61DTE,HIGHDATE   SEE IF SAME HIGH DATE
         BL    READ5               NO, NOT NEW HIGH DATE/TIME
         CLC   SMF61TME,HIGHTIME   SEE IF NEW HIGH TIME
         BNH   READ5               NO, GET OUT
         MVC   HIGHTIME,SMF61TME   SAVE NEW HIGH TIME
READ5    CLI   SMF61RTY,61         SEE IF TYPE 61 SMF RECORD
         BE    READ6               YES, BRANCH
         CLI   SMF61RTY,65         SEE IF TYPE 65 SMF RECORD
         BE    READ9               YES, BRANCH
         CLI   SMF61RTY,66         SEE IF TYPE 66 SMF RECORD
         BE    READ13              YES, BRANCH
         BNE   READ                NO, BYPASS RECORD
         SPACE 3
***********************************************************************
*                                                                     *
*        PROCESS THE SMF TYPE 61 RECORD                               *
*                                                                     *
*        CREATED FOR ICF DEFINE ACTIVITY                              *
*                                                                     *
***********************************************************************
READ6    MVC   INJBN,SMF61JNM      SAVE JOB NAME
         MVC   INSTD,SMF61DTE      SAVE DATE
         MVC   INSIT,SMF61TME      SAVE TIME
         MVC   INSID,SMF61SID      SAVE SYSTEM IDENTIFICATION
         MVC   PJDATE,SMF61DTE     SAVE DATE
         BAL   R14,WKDAY           GO GET DAY-OF-WEEK
         MVC   INDAY,DAYOFWK       SAVE DAY-OF-WEEK
         MVC   INDSN,SMF61ENM      SAVE DATASET NAME
         MVC   INCNM,SMF61CNM      SAVE CATALOG NAME
         MVC   INDTYP,=CL7'NONVSAM' ASSUME NONVSAM
         CLI   SMF61TYP,C'A'       SEE IF TRUE
         BE    READ7               YES, GET OUT
         CLI   SMF61TYP,C'H'       SEE IF TRUE (GDG)
         BE    READ7               YES, GET OUT
         MVC   INDTYP,=CL7'GDG    ' ASSUME GDG
         CLI   SMF61TYP,C'B'       SEE IF TRUE
         BE    READ7               YES, GET OUT
         MVC   INDTYP,=CL7'CLUSTER' ASSUME CLUSTER
         CLI   SMF61TYP,C'C'       SEE IF TRUE
         BE    READ7               YES, GET OUT
         MVC   INDTYP,=CL7'DATA   ' ASSUME DATA
         CLI   SMF61TYP,C'D'       SEE IF TRUE
         BE    READ7               YES, GET OUT
         MVC   INDTYP,=CL7'AIX    ' ASSUME AIX
         CLI   SMF61TYP,C'G'       SEE IF TRUE
         BE    READ7               YES, GET OUT
         MVC   INDTYP,=CL7'INDEX  ' ASSUME INDEX
         CLI   SMF61TYP,C'I'       SEE IF TRUE
         BE    READ7               YES, GET OUT
         MVC   INDTYP,=CL7'MCAT   ' ASSUME MCAT
         CLI   SMF61TYP,C'M'       SEE IF TRUE
         BE    READ7               YES, GET OUT
         MVC   INDTYP,=CL7'PAGEDS ' ASSUME PAGEDS
         CLI   SMF61TYP,C'P'       SEE IF TRUE
         BE    READ7               YES, GET OUT
         MVC   INDTYP,=CL7'PATH   ' ASSUME PATH
         CLI   SMF61TYP,C'R'       SEE IF TRUE
         BE    READ7               YES, GET OUT
         MVC   INDTYP,=CL7'UCAT   ' ASSUME UCAT
         CLI   SMF61TYP,C'U'       SEE IF TRUE
         BE    READ7               YES, GET OUT
         MVC   INDTYP,=CL7'VOLUME ' ASSUME VOLUME
         CLI   SMF61TYP,C'V'       SEE IF TRUE
         BE    READ7               YES, GET OUT
         MVC   INDTYP,=CL7'ALIAS  ' ASSUME ALIAS
         CLI   SMF61TYP,C'X'       SEE IF TRUE
         BE    READ7               YES, GET OUT
         MVC   INDTYP,=CL7'UPGRADE' ASSUME UPGRADE
         CLI   SMF61TYP,C'Y'       SEE IF TRUE
         BE    READ7               YES, GET OUT
         MVC   INDTYP,=CL7'UNKN   ' UNKNOWN DATASET TYPE
READ7    MVC   INOP,=CL7'DEFINE'   SET TO DEFINE ACTIVITY
         MVI   INTYPE,C'T'         ASSUME TEST JOB
         CLI   INJBN+1,C'0'        SEE IF SECOND CHAR JOBNAME NUMERIC
         BNL   READ8               YES, THIS IS A TEST JOB
         MVI   INTYPE,C'P'         NO,  THIS IS A PRODUCTION JOB
READ8    MVI   INRTYP,C' '         BLANK RENAME TYPE
         B     PJOBNM              GO FILTER THE RECORD
         DROP  R5                  DROP ADDRESSABILITY TO SMF RECORD
         SPACE 3
***********************************************************************
*                                                                     *
*        PROCESS THE SMF TYPE 65 RECORD                               *
*                                                                     *
*        CREATED FOR ICF DELETE ACTIVITY                              *
*                                                                     *
***********************************************************************
         USING SMFT65,R5           SET ADDRESSABILITY TO SMF RECORD
READ9    MVC   INJBN,SMF65JNM      SAVE JOB NAME
         MVC   INSTD,SMF65DTE      SAVE DATE
         MVC   INSIT,SMF65TME      SAVE TIME
         MVC   INSID,SMF65CPU      SAVE SYSTEM IDENTIFICATION
         MVC   PJDATE,SMF65DTE     SAVE DATE
         BAL   R14,WKDAY           GO GET DAY-OF-WEEK
         MVC   INDAY,DAYOFWK       SAVE DAY-OF-WEEK
         MVC   INDSN,SMF65ENM      SAVE DATASET NAME
         MVC   INCNM,SMF65CNM      SAVE CATALOG NAME
         MVC   INDTYP,=CL7'NONVSAM' ASSUME NONVSAM
         CLI   SMF65TYP,C'A'       SEE IF TRUE
         BE    READ10              YES, GET OUT
         CLI   SMF65TYP,C'H'       SEE IF TRUE (GDG)
         BE    READ10              YES, GET OUT
         MVC   INDTYP,=CL7'GDG    ' ASSUME GDG
         CLI   SMF65TYP,C'B'       SEE IF TRUE
         BE    READ10              YES, GET OUT
         MVC   INDTYP,=CL7'CLUSTER' ASSUME CLUSTER
         CLI   SMF65TYP,C'C'       SEE IF TRUE
         BE    READ10              YES, GET OUT
         MVC   INDTYP,=CL7'DATA   ' ASSUME DATA
         CLI   SMF65TYP,C'D'       SEE IF TRUE
         BE    READ10              YES, GET OUT
         MVC   INDTYP,=CL7'AIX    ' ASSUME AIX
         CLI   SMF65TYP,C'G'       SEE IF TRUE
         BE    READ10              YES, GET OUT
         MVC   INDTYP,=CL7'INDEX  ' ASSUME INDEX
         CLI   SMF65TYP,C'I'       SEE IF TRUE
         BE    READ10              YES, GET OUT
         MVC   INDTYP,=CL7'MCAT   ' ASSUME MCAT
         CLI   SMF65TYP,C'M'       SEE IF TRUE
         BE    READ10              YES, GET OUT
         MVC   INDTYP,=CL7'PAGEDS ' ASSUME PAGEDS
         CLI   SMF65TYP,C'P'       SEE IF TRUE
         BE    READ10              YES, GET OUT
         MVC   INDTYP,=CL7'PATH   ' ASSUME PATH
         CLI   SMF65TYP,C'R'       SEE IF TRUE
         BE    READ10              YES, GET OUT
         MVC   INDTYP,=CL7'UCAT   ' ASSUME UCAT
         CLI   SMF65TYP,C'U'       SEE IF TRUE
         BE    READ10              YES, GET OUT
         MVC   INDTYP,=CL7'VOLUME ' ASSUME VOLUME
         CLI   SMF65TYP,C'V'       SEE IF TRUE
         BE    READ10              YES, GET OUT
         MVC   INDTYP,=CL7'ALIAS  ' ASSUME ALIAS
         CLI   SMF65TYP,C'X'       SEE IF TRUE
         BE    READ10              YES, GET OUT
         MVC   INDTYP,=CL7'UPGRADE' ASSUME UPGRADE
         CLI   SMF65TYP,C'Y'       SEE IF TRUE
         BE    READ10              YES, GET OUT
         MVC   INDTYP,=CL7'UNKN   ' UNKNOWN DATASET TYPE
READ10   MVC   INOP,=CL7'SCRATCH'  ASSUME SCRATCH ACTIVITY
         CLI   SMF65FNC,C'S'       SEE IF REALLY SCRATCH
         BE    READ11              YES, BRANCH
         MVC   INOP,=CL7'UNCATLG'  NO, SET TO UNCATALOG ACTIVITY
READ11   MVI   INTYPE,C'T'         ASSUME TEST JOB
         CLI   INJBN+1,C'0'        SEE IF SECOND CHAR JOBNAME NUMERIC
         BNL   READ12              YES, THIS IS A TEST JOB
         MVI   INTYPE,C'P'         NO,  THIS IS A PRODUCTION JOB
READ12   MVI   INRTYP,C' '         BLANK RENAME TYPE
         B     PJOBNM              GO FILTER THE RECORD
         DROP  R5                  DROP ADDRESSABILITY TO SMF RECORD
         SPACE 3
***********************************************************************
*                                                                     *
*        PROCESS THE SMF TYPE 66 RECORD                               *
*                                                                     *
*        CREATED FOR ICF ALTER ACTIVITY                               *
*                                                                     *
***********************************************************************
         USING SMFT66,R5           SET ADDRESSABILITY TO SMF RECORD
READ13   MVC   INJBN,SMF66JNM      SAVE JOB NAME
         MVC   INSTD,SMF66DTE      SAVE DATE
         MVC   INSIT,SMF66TME      SAVE TIME
         MVC   INSID,SMF66SID      SAVE SYSTEM IDENTIFICATION
         MVC   PJDATE,SMF66DTE     SAVE DATE
         BAL   R14,WKDAY           GO GET DAY-OF-WEEK
         MVC   INDAY,DAYOFWK       SAVE DAY-OF-WEEK
         MVC   INDSN,SMF66ENM      SAVE DATASET NAME
         MVC   INCNM,SMF66CNM      SAVE CATALOG NAME
         MVC   INDTYP,=CL7'NONVSAM' ASSUME NONVSAM
         CLI   SMF66TYP,C'A'       SEE IF TRUE
         BE    READ14              YES, GET OUT
         CLI   SMF66TYP,C'H'       SEE IF TRUE (GDG)
         BE    READ14              YES, GET OUT
         MVC   INDTYP,=CL7'GDG    ' ASSUME GDG
         CLI   SMF66TYP,C'B'       SEE IF TRUE
         BE    READ14              YES, GET OUT
         MVC   INDTYP,=CL7'CLUSTER' ASSUME CLUSTER
         CLI   SMF66TYP,C'C'       SEE IF TRUE
         BE    READ14              YES, GET OUT
         MVC   INDTYP,=CL7'DATA   ' ASSUME DATA
         CLI   SMF66TYP,C'D'       SEE IF TRUE
         BE    READ14              YES, GET OUT
         MVC   INDTYP,=CL7'AIX    ' ASSUME AIX
         CLI   SMF66TYP,C'G'       SEE IF TRUE
         BE    READ14              YES, GET OUT
         MVC   INDTYP,=CL7'INDEX  ' ASSUME INDEX
         CLI   SMF66TYP,C'I'       SEE IF TRUE
         BE    READ14              YES, GET OUT
         MVC   INDTYP,=CL7'MCAT   ' ASSUME MCAT
         CLI   SMF66TYP,C'M'       SEE IF TRUE
         BE    READ14              YES, GET OUT
         MVC   INDTYP,=CL7'PAGEDS ' ASSUME PAGEDS
         CLI   SMF66TYP,C'P'       SEE IF TRUE
         BE    READ14              YES, GET OUT
         MVC   INDTYP,=CL7'PATH   ' ASSUME PATH
         CLI   SMF66TYP,C'R'       SEE IF TRUE
         BE    READ14              YES, GET OUT
         MVC   INDTYP,=CL7'UCAT   ' ASSUME UCAT
         CLI   SMF66TYP,C'U'       SEE IF TRUE
         BE    READ14              YES, GET OUT
         MVC   INDTYP,=CL7'VOLUME ' ASSUME VOLUME
         CLI   SMF66TYP,C'V'       SEE IF TRUE
         BE    READ14              YES, GET OUT
         MVC   INDTYP,=CL7'ALIAS  ' ASSUME ALIAS
         CLI   SMF66TYP,C'X'       SEE IF TRUE
         BE    READ14              YES, GET OUT
         MVC   INDTYP,=CL7'UPGRADE' ASSUME UPGRADE
         CLI   SMF66TYP,C'Y'       SEE IF TRUE
         BE    READ14              YES, GET OUT
         MVC   INDTYP,=CL7'UNKN   ' UNKNOWN DATASET TYPE
READ14   MVI   INTYPE,C'T'         ASSUME TEST JOB
         CLI   INJBN+1,C'0'        SEE IF SECOND CHAR JOBNAME NUMERIC
         BNL   READ15              YES, THIS IS A TEST JOB
         MVI   INTYPE,C'P'         NO,  THIS IS A PRODUCTION JOB
***********************************************************************
*        CREATE ALTER RECORD                                          *
***********************************************************************
READ15   CLI   SMF66FNC,C'R'       SEE IF RENAME ACTIVITY
         BE    READ16              YES, BRANCH
         MVC   INOP,=CL7'ALTER  '  SET TO ALTER ACTIVITY
         B     PJOBNM              GO FILTER THE RECORD
***********************************************************************
*        CREATE FIRST RECORD OF RENAME PAIR                           *
***********************************************************************
READ16   MVC   INOP,=CL7'RENAME '  SET TO RENAME ACTIVITY
         MVI   INRTYP,C'F'         SET TO RENAME "FROM" RECORD
         OI    SWITCH,RECORD2      INDICATE 2ND RECORD NEEDED
         B     PJOBNM              GO FILTER THE RECORD
***********************************************************************
*        CREATE SECOND RECORD OF RENAME PAIR                          *
***********************************************************************
READ17   L     R5,RECADDR          RESTORE RECORD ADDRESS
         MVC   INDSN,SMF66NNM      SAVE NEW DATASET NAME
         MVI   INRTYP,C'T'         SET TO RENAME "TO  " RECORD
         NI    SWITCH,255-RECORD2  INDICATE 2ND RECORD NO LONGER NEEDED
         B     PJOBNM              GO FILTER THE RECORD
         DROP  R5                  DROP ADDRESSABILITY TO SMF RECORD
         EJECT
***********************************************************************
*                                                                     *
*        FILTER THE RECORDS ACCORDING TO ANY INPUT CONTROL            *
*        CARDS.                                                       *
*                                                                     *
***********************************************************************
PJOBNM   TM    SWITCH,SELJOBNM     JOBNAME SELECTION?
         BNO   PDATE               NO, BRANCH
         BAL   R14,CKJOBNM         YES, GO SEE IF MATCH
PDATE    TM    SWITCH,SELDATE      DATE SELECTION?
         BNO   PTIME               NO, BRANCH
         BAL   R14,CKDATE          YES, GO SEE IF MATCH
PTIME    TM    SWITCH,SELTIME      TIME SELECTION?
         BNO   PSYSID              NO, BRANCH
         BAL   R14,CKTIME          YES, GO SEE IF MATCH
PSYSID   TM    SWITCH,SELSYSID     SYSID SELECTION?
         BNO   PDSN                NO, BRANCH
         BAL   R14,CKSYSID         YES, BRANCH
PDSN     TM    SWITCH+1,SELDSN     DSN SELECTION?
         BNO   PCNM                NO, BRANCH
         BAL   R14,CKDSN           YES, BRANCH
PCNM     TM    SWITCH+1,SELCNM     CATNAME SELECTION?
         BNO   PDTYP               NO, BRANCH
         BAL   R14,CKCNM           YES, BRANCH
PDTYP    TM    SWITCH+1,SELDTYP    DATASET TYPE SELECTION?
         BNO   POP                 NO, BRANCH
         BAL   R14,CKDTYP          YES, BRANCH
POP      TM    SWITCH+1,SELOP      CATALOG OPERATION NAME SELECTION?
         BNO   PJTYPE              NO, BRANCH
         BAL   R14,CKOP            YES, BRANCH
PJTYPE   TM    SWITCH+1,SELTYPE    JOB TYPE SELECTION?
         BNO   PDAY                NO, BRANCH
         BAL   R14,CKTYPE          YES, BRANCH
PDAY     TM    SWITCH,SELDAY       DAY-OF-WEEK SELECTION?
         BNO   PEND                NO, BRANCH
         BAL   R14,CKDAY           YES, BRANCH
PEND     B     READRET             RETURN TO CALLER
***********************************************************************
*                                                                     *
*        THESE ARE THE INDIVIDUAL FILTER ROUTINES WHICH WILL BE       *
*        CALLED IF INPUT CONTROL CARDS  REQUESTED IT.                 *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*        CHECK DATE RANGE                                             *
***********************************************************************
CKDATE   ICM   R1,B'1111',DATETBL  LOAD ADDRESS OF DATE TABLE
         BZR   R14                 ZERO, NO DATES, IGNORE THIS CHECK
CKDATE1  CLI   0(R1),X'FF'         SEE IF END OF TABLE
         BE    READ                YES, NO MATCH, BYPASS RECORD
         CP    INSTD,0(4,R1)       SEE IF DATE LESS THAN BEGIN DATE
         BL    CKDATE2             YES, FAILED THIS CHECK
         CP    INSTD,4(4,R1)       SEE IF DATE GREATER THAN END DATE
         BH    CKDATE2             YES, FAILED THIS CHECK
         BR    R14                 NO,  MATCH DATE RANGE, KEEP THIS ONE
CKDATE2  LA    R1,08(,R1)          INCREMENT TO NEXT DATE ENTRY
         B     CKDATE1             GO CHECK NEXT DATE ENTRY
         SPACE 3
***********************************************************************
*        CHECK TIME RANGE                                             *
***********************************************************************
CKTIME   ICM   R1,B'1111',TIMETBL  LOAD ADDRESS OF TIME TABLE
         BZR   R14                 ZERO, NO TIMES, IGNORE THIS CHECK
CKTIME1  CLI   0(R1),X'FF'         SEE IF END OF TABLE
         BE    READ                YES, NO MATCH, BYPASS RECORD
         CLC   INSIT,0(R1)         SEE IF TIME LESS THAN BEGIN TIME
         BL    CKTIME2             YES, FAILED THIS CHECK
         CLC   INSIT,4(R1)         SEE IF TIME GREATER THAN END TIME
         BH    CKTIME2             YES, FAILED THIS CHECK
         BR    R14                 NO,  MATCH DATE RANGE, KEEP THIS ONE
CKTIME2  LA    R1,08(,R1)          INCREMENT TO NEXT TIME ENTRY
         B     CKTIME1             GO CHECK NEXT TIME ENTRY
         SPACE 3
***********************************************************************
*        CHECK JOB NAME                                               *
***********************************************************************
CKJOBNM  ST    R14,RETADD          SAVE RETURN ADDRESS
         ICM   R14,B'1111',JOBNMTBL LOAD ADDRESS OF JOBNAME TABLE
         BZ    CKJOBNM2            ZERO, NO JOBNAMES, IGNORE THIS CHECK
CKJOBNM1 CLI   0(R14),X'FF'        SEE IF END OF TABLE
         BE    READ                YES, BYPASS RECORD
         LA    R1,INJBN            LOAD ADDRESS OF JOB NAME
         SLR   R15,R15             CLEAR REG FOR IC
         IC    R15,1(R14)          LOAD OFFSET VALUE OF THIS JOBNAME
         AR    R1,R15              ADD OFFSET TO ADDRESS
         IC    R15,0(R14)          LOAD LENGTH VALUE OF THIS JOBNAME
         EX    R15,COMPJOB         COMPARE FOR MATCH
         BE    CKJOBNM2            MATCH, SELECT THIS RECORD FOR NOW
         LA    R14,10(,R14)        INCREMENT TO NEXT JOBNAME ENTRY
         B     CKJOBNM1            GO CHECK NEXT JOBNAME ENTRY
CKJOBNM2 ICM   R14,B'1111',XJOBNTBL LOAD ADDRESS OF EXJOBNAME TABLE
         BZ    CKJOBNM4            ZERO, NO JOBNAMES, IGNORE THIS CHECK
CKJOBNM3 CLI   0(R14),X'FF'        SEE IF END OF TABLE
         BE    CKJOBNM4            YES, DO NOT EXCLUDE THIS RECORD
         LA    R1,INJBN            LOAD ADDRESS OF JOB NAME
         SLR   R15,R15             CLEAR REG FOR IC
         IC    R15,1(R14)          LOAD OFFSET VALUE OF THIS JOBNAME
         AR    R1,R15              ADD OFFSET TO ADDRESS
         IC    R15,0(R14)          LOAD LENGTH VALUE OF THIS JOBNAME
         EX    R15,COMPJOB         COMPARE FOR MATCH
         BE    READ                MATCH, BYPASS RECORD
         LA    R14,10(,R14)        INCREMENT TO NEXT JOBNAME ENTRY
         B     CKJOBNM3            GO CHECK NEXT JOBNAME ENTRY
CKJOBNM4 L     R14,RETADD          RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
COMPJOB  CLC   0(0,R1),2(R14)      *****  EXEC ONLY *****
         SPACE 3
***********************************************************************
*        CHECK SMF SYSTEM NAME                                        *
***********************************************************************
CKSYSID  ICM   R15,B'1111',SYSIDTBL LOAD ADDRESS OF SYSID TABLE
         BZ    CKSYSID2            ZERO, NO SYSIDS, IGNORE THIS CHECK
CKSYSID1 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    READ                YES, BYPASS RECORD
         CLC   INSID,0(R15)        SEE IF MATCH ON SYSTEM ID
         BE    CKSYSID2            MATCH, SELECT THIS RECORD FOR NOW
         LA    R15,04(,R15)        INCREMENT TO NEXT SYSID ENTRY
         B     CKSYSID1            GO CHECK NEXT SYSID ENTRY
CKSYSID2 ICM   R15,B'1111',XSYSTBL LOAD ADDRESS OF EXSYSID TABLE
         BZR   R14                 ZERO, NO SYSIDS, IGNORE THIS CHECK
CKSYSID3 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BER   R14                 YES, DO NOT EXCLUDE THIS RECORD
         CLC   INSID,0(R15)        SEE IF MATCH ON SYSTEM ID
         BE    READ                MATCH, BYPASS RECORD
         LA    R15,04(,R15)        INCREMENT TO NEXT SYSID ENTRY
         B     CKSYSID3            GO CHECK NEXT SYSID ENTRY
         SPACE 3
***********************************************************************
*        CHECK DATASET NAME                                           *
***********************************************************************
CKDSN    ICM   R1,B'1111',DSNTBL   LOAD ADDRESS OF DSNAME TABLE
         BZ    CKDSN2              ZERO, NO DSNS, IGNORE THIS CHECK
CKDSN1   CLI   0(R1),X'FF'         END OF TABLE
         BE    READ                YES, NO MATCH, BYPASS RECORD
         LH    R15,0(R1)           LOAD MACHINE LENGTH OF DSN
         EX    R15,COMPDSN         COMPARE FOR MATCH
         BE    CKDSN2              MATCH, SELECT THIS RECORD FOR NOW
         LA    R1,46(,R1)          INCREMENT TO NEXT ENTRY
         B     CKDSN1              LOOP
CKDSN2   ICM   R1,B'1111',XDSNTBL  LOAD ADDRESS OF EXDSNAME TABLE
         BZR   R14                 ZERO, NO DSNS, IGNORE THIS CHECK
CKDSN3   CLI   0(R1),X'FF'         END OF TABLE
         BER   R14                 YES, DO NOT EXCLUDE THIS RECORD
         LH    R15,0(R1)           LOAD MACHINE LENGTH OF DSN
         EX    R15,COMPDSN         COMPARE FOR MATCH
         BE    READ                MATCH, BYPASS RECORD
         LA    R1,46(,R1)          INCREMENT TO NEXT ENTRY
         B     CKDSN3              LOOP
COMPDSN  CLC   INDSN(0),2(R1)      **** EXECUTE ONLY ****
         SPACE 3
***********************************************************************
*        CHECK CATALOG NAME                                           *
***********************************************************************
CKCNM    ICM   R1,B'1111',CNMTBL   LOAD ADDRESS OF CATNAME TABLE
         BZ    CKCNM2              ZERO, NO DSNS, IGNORE THIS CHECK
CKCNM1   CLI   0(R1),X'FF'         END OF TABLE
         BE    READ                YES, NO MATCH, BYPASS RECORD
         LH    R15,0(R1)           LOAD MACHINE LENGTH OF DSN
         EX    R15,COMPCNM         COMPARE FOR MATCH
         BE    CKCNM2              MATCH, SELECT THIS RECORD FOR NOW
         LA    R1,46(,R1)          INCREMENT TO NEXT ENTRY
         B     CKCNM1              LOOP
CKCNM2   ICM   R1,B'1111',XCNMTBL  LOAD ADDRESS OF EXCATNAME TABLE
         BZR   R14                 ZERO, NO DSNS, IGNORE THIS CHECK
CKCNM3   CLI   0(R1),X'FF'         END OF TABLE
         BER   R14                 YES, DO NOT EXCLUDE THIS RECORD
         LH    R15,0(R1)           LOAD MACHINE LENGTH OF DSN
         EX    R15,COMPCNM         COMPARE FOR MATCH
         BE    READ                MATCH, BYPASS RECORD
         LA    R1,46(,R1)          INCREMENT TO NEXT ENTRY
         B     CKCNM3              LOOP
COMPCNM  CLC   INCNM(0),2(R1)      **** EXECUTE ONLY ****
         SPACE 3
***********************************************************************
*        CHECK DATASET TYPE                                           *
***********************************************************************
CKDTYP   CLC   INDTYP,=C'NONVSAM'  SEE IF NONVSAM
         BE    CKDTYP01            YES, BRANCH
         CLC   INDTYP,=C'GDG    '  SEE IF GDG
         BE    CKDTYP02            YES, BRANCH
         CLC   INDTYP,=C'CLUSTER'  SEE IF CLUSTER
         BE    CKDTYP03            YES, BRANCH
         CLC   INDTYP,=C'DATA   '  SEE IF DATA
         BE    CKDTYP04            YES, BRANCH
         CLC   INDTYP,=C'AIX    '  SEE IF AIX
         BE    CKDTYP05            YES, BRANCH
         CLC   INDTYP,=C'INDEX  '  SEE IF INDEX
         BE    CKDTYP06            YES, BRANCH
         CLC   INDTYP,=C'MCAT   '  SEE IF MCAT
         BE    CKDTYP07            YES, BRANCH
         CLC   INDTYP,=C'PAGESPC'  SEE IF PAGESPC
         BE    CKDTYP08            YES, BRANCH
         CLC   INDTYP,=C'PATH   '  SEE IF PATH
         BE    CKDTYP09            YES, BRANCH
         CLC   INDTYP,=C'UCAT   '  SEE IF UCAT
         BE    CKDTYP10            YES, BRANCH
         CLC   INDTYP,=C'VOLUME '  SEE IF VOLUME
         BE    CKDTYP11            YES, BRANCH
         CLC   INDTYP,=C'ALIAS  '  SEE IF ALIAS
         BE    CKDTYP12            YES, BRANCH
         CLC   INDTYP,=C'GDG    '  SEE IF UPGRADE
         BE    CKDTYP13            YES, BRANCH
         B     CKDTYP14            NO,  BRANCH
CKDTYP01 TM    VALDTYP,NONVSAM     WANT NONVSAM
         BNO   READ                NO,  BYPASS RECORD
         BR    R14                 YES, RETURN TO CALLER
CKDTYP02 TM    VALDTYP,GDG         WANT GDG
         BNO   READ                NO,  BYPASS RECORD
         BR    R14                 YES, RETURN TO CALLER
CKDTYP03 TM    VALDTYP,CLUSTER     WANT CLUSTER
         BNO   READ                NO,  BYPASS RECORD
         BR    R14                 YES, RETURN TO CALLER
CKDTYP04 TM    VALDTYP,DATA        WANT DATA
         BNO   READ                NO,  BYPASS RECORD
         BR    R14                 YES, RETURN TO CALLER
CKDTYP05 TM    VALDTYP,AIX         WANT AIX
         BNO   READ                NO,  BYPASS RECORD
         BR    R14                 YES, RETURN TO CALLER
CKDTYP06 TM    VALDTYP,INDEX       WANT INDEX
         BNO   READ                NO,  BYPASS RECORD
         BR    R14                 YES, RETURN TO CALLER
CKDTYP07 TM    VALDTYP,MCAT        WANT MCAT
         BNO   READ                NO,  BYPASS RECORD
         BR    R14                 YES, RETURN TO CALLER
CKDTYP08 TM    VALDTYP,PAGESPC     WANT PAGESPC
         BNO   READ                NO,  BYPASS RECORD
         BR    R14                 YES, RETURN TO CALLER
CKDTYP09 TM    VALDTYP+1,PATH      WANT PATH
         BNO   READ                NO,  BYPASS RECORD
         BR    R14                 YES, RETURN TO CALLER
CKDTYP10 TM    VALDTYP+1,UCAT      WANT UCAT
         BNO   READ                NO,  BYPASS RECORD
         BR    R14                 YES, RETURN TO CALLER
CKDTYP11 TM    VALDTYP+1,VOLUME    WANT VOLUME
         BNO   READ                NO,  BYPASS RECORD
         BR    R14                 YES, RETURN TO CALLER
CKDTYP12 TM    VALDTYP+1,ALIAS     WANT ALIAS
         BNO   READ                NO,  BYPASS RECORD
         BR    R14                 YES, RETURN TO CALLER
CKDTYP13 TM    VALDTYP+1,UPGRADE   WANT UPGRADE
         BNO   READ                NO,  BYPASS RECORD
         BR    R14                 YES, RETURN TO CALLER
CKDTYP14 TM    VALDTYP+1,UNKN      WANT UNKN
         BNO   READ                NO,  BYPASS RECORD
         BR    R14                 YES, RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK CATALOG OPERATION NAME                                 *
***********************************************************************
CKOP     CLC   INOP,=C'DEFINE '    SEE IF DEFINE
         BE    CKOP01              YES, BRANCH
         CLC   INOP,=C'UNCATLG'    SEE IF UNCATLG
         BE    CKOP02              YES, BRANCH
         CLC   INOP,=C'SCRATCH'    SEE IF SCRATCH
         BE    CKOP03              YES, BRANCH
         CLC   INOP,=C'RENAME '    SEE IF RENAME
         BE    CKOP04              YES, BRANCH
         CLC   INOP,=C'ALTER  '    SEE IF ALTER
         BE    CKOP05              YES, BRANCH
         B     READ                NO,  UNKNOWN, BYPASS RECORD
CKOP01   TM    VALOP,DEFINE        WANT DEFINE
         BNO   READ                NO,  BYPASS RECORD
         BR    R14                 YES, RETURN TO CALLER
CKOP02   TM    VALOP,DELETE        WANT DELETE
         BNO   READ                NO,  BYPASS RECORD
         BR    R14                 YES, RETURN TO CALLER
CKOP03   TM    VALOP,SCRATCH       WANT SCRATCH
         BNO   READ                NO,  BYPASS RECORD
         BR    R14                 YES, RETURN TO CALLER
CKOP04   TM    VALOP,RENAME        WANT RENAME
         BNO   READ                NO,  BYPASS RECORD
         BR    R14                 YES, RETURN TO CALLER
CKOP05   TM    VALOP,ALTER         WANT ALTER
         BNO   READ                NO,  BYPASS RECORD
         BR    R14                 YES, RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK JOB TYPE                                               *
***********************************************************************
CKTYPE   CLC   INTYPE,VALTYPE      SEE IF TYPE MATCHES
         BNE   READ                NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK DAY-OF-THE-WEEK                                        *
***********************************************************************
CKDAY    LH    R1,INDAY            LOAD DAY-OF-WEEK
         BCTR  R1,0                MAKE RELATIVE TO ZERO
         SLL   R1,2                MULTIPLY BY 4
         B     CKDAY0(R1)          BRANCH TO PROPER ROUTINE FOR DAY
CKDAY0   B     CKDAY1              INDEX = 00
         B     CKDAY2              INDEX = 01
         B     CKDAY3              INDEX = 02
         B     CKDAY4              INDEX = 03
         B     CKDAY5              INDEX = 04
         B     CKDAY6              INDEX = 05
         B     CKDAY7              INDEX = 06
CKDAY1   TM    DAYSW,SUN           SEE IF SUNDAY DESIRED
         BNO   READ                NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKDAY2   TM    DAYSW,MON           SEE IF MONDAY DESIRED
         BNO   READ                NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKDAY3   TM    DAYSW,TUE           SEE IF TUESDAY DESIRED
         BNO   READ                NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKDAY4   TM    DAYSW,WED           SEE IF WEDNESDAY DESIRED
         BNO   READ                NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKDAY5   TM    DAYSW,THU           SEE IF THURSDAY DESIRED
         BNO   READ                NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKDAY6   TM    DAYSW,FRI           SEE IF FRIDAY DESIRED
         BNO   READ                NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKDAY7   TM    DAYSW,SAT           SEE IF SATURDAY DESIRED
         BNO   READ                NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        END OF INPUT FILE                                            *
***********************************************************************
EOF      OI    SWITCH,ENDFILE      TURN ON END-OF-FILE INDICATOR
         SPACE 3
***********************************************************************
*        RETURN TO CALLER                                             *
***********************************************************************
READRET  L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         ST    R5,40(R13)          SAVE REGISTER 5 INTO SAVE AREA
         LM    R14,R12,12(R13)     RESTORE ORIGINAL REGS
         BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*                              WKDAY                                  *
*                                                                     *
*        DETERMINE THE DAY-OF-WEEK INDEX BASED UPON AN INPUT          *
*        PACKED DECIMAL JULIAN DATE IN THE FORM 0CYYDDDS.             *
*                                                                     *
*        THE DATE WILL FIRST BE CONVERTED TO MONTH, DAY, AND          *
*        YEAR.  THIS WILL THEN BE CONVERTED TO A DAY-OF-WEEK          *
*        INDEX FROM 1 - 7 INDICATING SUN - SAT USING A COMPLEX        *
*        EQUATION.                                                    *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*                                                                     *
*        CONVERT JULIAN DATE TO MONTH, DAY, AND YEAR                  *
*                                                                     *
*        THE INPUT JULIAN DATE IS IN FIELD PJDATE                     *
*        THE OUTPUT DATES WILL BE MMB, DDB, AND YYYYB.                *
*                                                                     *
***********************************************************************
WKDAY    ST    R14,WKDAYRET        SAVE RETURN ADDRESS
         TM    PJDATE+1,X'01'      SEE IF ODD YEAR
         BO    WKDAY1              YES, NOT LEAP YEAR
         TM    PJDATE+1,X'12'      MAGIC LEAP YEAR MASK
         BM    WKDAY1              MIXED, NOT LEAP YEAR
         MVC   MDAYTBL+2(2),=H'29' SET FEB TO 29 DAYS
WKDAY1   LA    R2,12               SET LOOP COUNTER
         LA    R3,1                SET MONTH COUNTER
         ZAP   DBL,PJDATE+2(2)     MOVE JULIAN DAY TO WORK
         CVB   R1,DBL              CONVERT DAY TO BINARY
         LA    R15,MDAYTBL         LOAD ADDR OF DAY OF THE MONTH TABLE
WKDAY2   CH    R1,0(R15)           SEE IF DAYS GT DAYS IN THIS MONTH
         BNH   WKDAY3              NO, DONE
         SH    R1,0(R15)           SUBTRACT DAYS IN THIS MONTH FROM TOT
         LA    R3,1(,R3)           ADD 1 TO MONTH COUNTER
         LA    R15,2(,R15)         INCREMENT TO NEXT ENTRY IN DAY TABLE
         BCT   R2,WKDAY2           LOOP
WKDAY3   STH   R3,MMB              SAVE MONTH
         STH   R1,DDB              SAVE DAY
         CLI   PJDATE,X'00'        SEE IF CENTURY 0 (19..)
         BNE   WKDAY4              NO, BRANCH
         MVI   PJDATE,X'19'        YES, SET YEAR TO 19
         B     WKDAY5              GO PROCESS YEAR
WKDAY4   MVI   PJDATE,X'20'        YES, SET YEAR TO 20
WKDAY5   MVO   DBL,PJDATE(2)       MOVE YEAR TO WORK
         CVB   R1,DBL              CONVERT YEARS TO BINARY
         STH   R1,YYYYB            SAVE YEAR
         EJECT
***********************************************************************
*                                                                     *
*        CALCULATE THE DAY-OF-WEEK INDEX                              *
*                                                                     *
*        THE INPUT FIELDS ARE MMB, DDB, AND YYYYB                     *
*        THE OUTPUT DAY OF THE WEEK WILL BE DAYOFWK                   *
*                                                                     *
*        N = D + 2M + 3(M+1)/5 + Y + Y/4 - Y/100 + Y/400 + 2          *
*                                                                     *
*        WHERE M = 3-14 (JAN AND FEB ARE 13 AND 14 OF Y-1)            *
*                                                                     *
*        N/7 LEAVES REMAINDER 0-6, 0 INDICATING SATURDAY              *
*                                                                     *
*        IF REMAINDER 0 - CHANGE TO 7 FOR ACCURATE DAY INDEX          *
*                                                                     *
***********************************************************************
WKDAY6   LH    R1,DDB              SET N = D
         SPACE
         LH    R15,YYYYB           GET Y
         LH    R14,MMB             GET M
         CH    R14,=H'2'           SEE IF JAN OR FEB
         BH    WKDAY9              NO, BRANCH
         BE    WKDAY7              GO PROCESS FEB
         LA    R14,13              SET M = 13 FOR JAN
         B     WKDAY8              GO REDEFINE Y
WKDAY7   LA    R14,14              SET M = 14 FOR FEB
WKDAY8   BCTR  R15,0               SET Y = Y-1
WKDAY9   LR    R0,R14              COPY M
         ALR   R0,R0               GET 2M
         ALR   R1,R0               SET N= N + 2M
         SPACE
         LR    R0,R15              SAVE REDEFINED Y
         LA    R14,1(,R14)         GET M+1
         MH    R14,=H'3'           GET 3(M+1)
         SRDL  R14,32              SHIFT TO ODD REG OF PAIR
         D     R14,=F'5'           GET 3(M+1)/5 IN R15
         ALR   R1,R15              SET N = N + 3(M+1)/5
         SPACE
         LR    R15,R0              GET Y
         ALR   R1,R15              SET N = N + Y
         SPACE
         SLR   R14,R14             ZERO EVEN REG OF PAIR
         D     R14,=F'4'           GET Y/4
         ALR   R1,R15              SET N = N + Y/4
         SPACE
         LR    R15,R0              GET Y
         SLR   R14,R14             ZERO EVEN REG OF PAIR
         D     R14,=F'100'         GET Y/100
         SLR   R1,R15              SET N = N - Y/100
         SPACE
         LR    R15,R0              GET Y
         SLR   R14,R14             ZERO EVEN REG OF PAIR
         D     R14,=F'400'         GET Y/400
         ALR   R1,R15              SET N = N + Y/400
         SPACE
         LA    R15,2               GET 2
         ALR   R1,R15              SET N = N + 2
         SPACE
         SLR   R0,R0               ZERO EVEN REG OF PAIR
         D     R0,=F'7'            SET N = N/7
         SPACE
         LTR   R1,R0               TEST REMAINDER
         BNZ   WKDAY10             NOT ZERO, CONTINUE
         LA    R1,7                ZERO, SET TO 7
         EJECT
WKDAY10  STH   R1,DAYOFWK          SAVE DAY-OF-WEEK
***********************************************************************
*        RETURN TO CALLER                                             *
***********************************************************************
         L     R14,WKDAYRET        RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        DAY-PER-MONTH TABLE FOR JULIAN DATE CONVERT ROUTINE          *
***********************************************************************
MDAYTBL  DS    0H
         DC    H'31'
         DC    H'28'
         DC    H'31'
         DC    H'30'
         DC    H'31'
         DC    H'30'
         DC    H'31'
         DC    H'31'
         DC    H'30'
         DC    H'31'
         DC    H'30'
         DC    H'31'
         DROP  R9,R10,R11,R12
         POP   USING
         EJECT
         PUSH  USING
***********************************************************************
*                                                                     *
*        THIS ROUTINE WILL FORMAT THE OUTPUT PRINT RECORD FROM THE    *
*        INPUT FIELDS ALREADY SAVED                                   *
*                                                                     *
*        1)  REGISTER 15 ON ENTRY IS THE ROUTINE ENTRY POINT          *
*        2)  REGISTER 14 ON ENTRY IS THE RETURN ADDRESS               *
*                                                                     *
*        RETURN FROM THIS ROUTINE WILL BE MADE TO REGISTER 14         *
*                                                                     *
***********************************************************************
FORMAT   STM   R14,R12,12(R13)     SAVE REGISTERS
         USING FORMAT,R9,R10,R11,R12 SET ADDRESSABILITY TO ROUTINE
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,SAVE2           LOAD ADDR OF NEW SAVE
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
********************************************************************
*        SET OUTPUT JOB NAME                                       *
********************************************************************
         MVC   OJOBNAME,INJBN      MOVE SMF JOBNAME TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT DATE                                           *
********************************************************************
         MVC   WORK(7),=X'4021204B202020' SET EDIT MASK
         ED    WORK(7),INSTD+1     EDIT THE DATE
         MVC   ODATE,WORK+1        MOVE THE DATE TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT TIME                                           *
********************************************************************
         ICM   R1,15,INSIT         LOAD TIME TO REGISTER 1
         L     R15,=V(CNVTIME)     LOAD ADDRESS OF CONVERT TIME ROUTINE
         BALR  R14,R15             GO TO CONVERT TIME ROUTINE
         MVC   OTIME,OUTTIME+1     MOVE TIME (HH.MM) TO DETAIL LINE
         SPACE 3
********************************************************************
*        SET OUTPUT SYSTEM ID                                      *
********************************************************************
         MVC   OSYSID,INSID        MOVE SMF SYSTEM ID TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT PROC STEP NAME                                 *
********************************************************************
         MVC   ODSN,INDSN          MOVE DSN TO DETAIL LN
         SPACE 3
********************************************************************
*        SET OUTPUT CATALOG NAME                                   *
********************************************************************
         MVC   OCNM,INCNM          MOVE CATNAME TO DETAIL LN
         SPACE 3
********************************************************************
*        SET DATASET TYPE                                          *
********************************************************************
         MVC   ODTYP,INDTYP        MOVE DATASET TYPE TO DETAIL
         SPACE 3
********************************************************************
*        SET CATALOG OPERATION NAME                                *
********************************************************************
         MVC   OOP,INOP            MOVE OPERATION NAME TO DETAIL
         SPACE 3
********************************************************************
*        SET RENAME OPERATION TYPE                                 *
********************************************************************
         MVC   ORTYP,INRTYP        MOVE RENAME TYPE TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT JOB TYPE                                       *
********************************************************************
         MVC   OTYPE,INTYPE        MOVE JOB TYPE TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT DAY-OF-THE-WEEK                                *
********************************************************************
         LH    R1,INDAY            LOAD DAY-OF-WEEK INDEX
         BCTR  R1,0                MAKE RELATIVE TO ZERO
         MH    R1,=H'3'            CALCULATE NAME TABLE OFFSET
         LA    R1,DAYTABLE(R1)     POINT TO NAME OF DAY ENTRY
         MVC   ODAY,0(R1)          SAVE DAY-OF-THE-WEEK
         EJECT
***********************************************************************
*                                                                     *
*        BUILD THE APPROPRIATE DETAIL LINE FROM THE REPORT            *
*        VARIABLES AS DEFINED IN THE PRINT OPTION TABLE.              *
*                                                                     *
***********************************************************************
FMTLINE  L     R1,=V(PRTOPT)       LOAD ADDRESS OF PRINT OPTIONS
         LA    R2,DETAIL           POINT TO DETAIL LINE
FMTLINE1 CLI   0(R1),X'FF'         PHYSICAL END OF TABLE
         BE    FMTLINE4            YES, BRANCH
         CLI   0(R1),C'N'          LOGICAL END OF TABLE
         BE    FMTLINE4            YES, BRANCH
         LH    R15,4(R1)           LOAD BRANCH TABLE OFFSET
         B     FMTLINE2(R15)       BRANCH TO PROPER ROUTINE BY INDEX
FMTLINE2 B     PRTJOBNM            INDEX = 00
         B     PRTDATE             INDEX = 04
         B     PRTTIME             INDEX = 08
         B     PRTSYSID            INDEX = 12
         B     PRTDSN              INDEX = 16
         B     PRTCNM              INDEX = 20
         B     PRTDTYP             INDEX = 24
         B     PRTOP               INDEX = 28
         B     PRTTYPE             INDEX = 32
         B     ERROR042            INDEX = 36
         B     ERROR042            INDEX = 40
         B     ERROR042            INDEX = 44
         B     ERROR042            INDEX = 48
         B     ERROR042            INDEX = 52
         B     ERROR042            INDEX = 56
         B     ERROR042            INDEX = 60
         B     ERROR042            INDEX = 64
         B     ERROR042            INDEX = 68
         B     ERROR042            INDEX = 72
         B     ERROR042            INDEX = 76
         B     ERROR042            INDEX = 80
         B     ERROR042            INDEX = 84
         B     ERROR042            INDEX = 88
         B     ERROR042            INDEX = 92
         B     ERROR042            INDEX = 96
         B     ERROR042            INDEX = 100
         B     ERROR042            INDEX = 104
         B     ERROR042            INDEX = 108
         B     ERROR042            INDEX = 112
         B     ERROR042            INDEX = 116
         B     ERROR042            INDEX = 120
         B     ERROR042            INDEX = 124
         B     ERROR042            INDEX = 128
         B     ERROR042            INDEX = 132
         B     ERROR042            INDEX = 136
         B     PRTDAY              INDEX = 140
         B     ERROR042            INDEX = 144
FMTLINE3 LA    R1,6(,R1)           INCREMENT TO NEXT TABLE ENTRY
         B     FMTLINE1            LOOP
FMTLINE4 B     MVEND               DONE WITH PRINT LINE
         EJECT
***********************************************************************
*        MOVE JOB NAME TO DETAIL                                      *
***********************************************************************
PRTJOBNM LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(8,R2),OJOBNAME    MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE DATE TO DETAIL                                          *
***********************************************************************
PRTDATE  LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(6,R2),ODATE       MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE TIME TO DETAIL                                          *
***********************************************************************
PRTTIME  LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(5,R2),OTIME       MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE SYSTEM ID TO DETAIL                                     *
***********************************************************************
PRTSYSID LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(4,R2),OSYSID      MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE DSN TO DETAIL                                           *
***********************************************************************
PRTDSN   LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(5,R2),=CL5'FROM ' SET RENAME FIELD TO "FROM"
         CLI   ORTYP,C'F'          SEE IF "FROM"
         BE    PRTDSN1             YES, BRANCH
         MVC   0(5,R2),=CL5'TO   ' SET RENAME FIELD TO "TO  "
         CLI   ORTYP,C'T'          SEE IF "TO"
         BE    PRTDSN1             YES, BRANCH
         MVC   0(5,R2),=CL5'     ' SET RENAME FIELD TO BLANK
PRTDSN1  MVC   5(44,R2),ODSN       MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE CATALOG NAME TO DETAIL                                  *
***********************************************************************
PRTCNM   LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   5(44,R2),OCNM       MOVE CATNAME TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE DATASET TYPE TO DETAIL                                  *
***********************************************************************
PRTDTYP  LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(7,R2),ODTYP       MOVE DATASET TYPE TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE OPERATION NAME TO DETAIL                                *
***********************************************************************
PRTOP    LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(7,R2),OOP         MOVE OPERATION NAME TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE JOB TYPE TO DETAIL LINE                                 *
***********************************************************************
PRTTYPE  LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(1,R2),OTYPE       MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE DAY-OF-THE-WEEK TO DETAIL LINE                          *
***********************************************************************
PRTDAY   LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(3,R2),ODAY        MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        PRINT COMMON ROUTINE                                         *
***********************************************************************
PRTCOMM  B     FMTLINE3            GO PROCESS NEXT TABLE ENTRY
         SPACE 3
MVEND    AP    ACC1,=P'1'          ADD 1 TO SELECTED RECORD COUNTER
MVEND1   L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         LM    R14,R12,12(R13)     RESTORE ORIGINAL REGS
         BR    R14                 RETURN TO CALLER
         SPACE 3
         LTORG
SAVE2    DS    18F                 ROUTINE SAVE AREA
         DROP  R9,R10,R11,R12
         POP   USING
         EJECT
***********************************************************************
*                                                                     *
*        ERROR ROUTINES                                               *
*                                                                     *
*        EACH ERROR ROUTINE WILL NORMALL SET A MESSAGE INDEX          *
*        AND THEN LOAD THE APPROPRIATE MESSAGE FROM A MESSAGE         *
*        TABLE ACCORDING TO THAT INDEX.  THAT MESSAGE WILL BE         *
*        ISSUED AS A WTO AND THE PROGRAM ABENDED WITH A USER          *
*        ABEND WHICH ALSO MATCHES THE MESSAGE INDEX.                  *
*                                                                     *
***********************************************************************
ERROR029 LA    R15,29              LOAD MESSAGE INDEX
         B     ERROR999            GO TO COMMON ERROR ROUTINE
ERROR030 LA    R15,30              LOAD MESSAGE INDEX
         B     ERROR999            GO TO COMMON ERROR ROUTINE
ERROR041 LA    R15,41              LOAD MESSAGE INDEX
         B     ERROR999            GO TO COMMON ERROR ROUTINE
ERROR042 LA    R15,42              LOAD MESSAGE INDEX
         B     ERROR999            GO TO COMMON ERROR ROUTINE
ERROR043 LA    R15,43              LOAD MESSAGE INDEX
         B     ERROR999            GO TO COMMON ERROR ROUTINE
ERROR063 LA    R15,63              LOAD MESSAGE INDEX
         B     ERROR999            GO TO COMMON ERROR ROUTINE
         SPACE 3
ERROR999 ST    R15,ABCODE          SAVE ABEND CODE
         BCTR  R15,0               MAKE ERROR RELATIVE TO ZERO
         MH    R15,=H'120'         MULTIPLY BY LENGTH OF EACH ENTRY
         A     R15,=V(MSGTBL)      CALCULATE ADDRESS OF THIS ENTRY
         MVC   MSGWTO+4(120),0(R15) MOVE MESSAGE TO WTO LIST FORM
         WTO   MF=(E,MSGWTO)       WRITE ERROR MESSGAE
         L     R1,ABCODE           LOAD ABEND CODE
         ABEND (R1),DUMP           ABEND THE PROGRAM
         SPACE 3
MSGWTO   WTO   '123456789 123456789 123456789 123456789 123456789 12345X
               6789 123456789 123456789 123456789 123456789 123456789 1X
               23456789 ',ROUTCDE=11,MF=L
         SPACE 3
         LTORG
         EJECT
         PUSH  USING
***********************************************************************
*                                                                     *
*                              FINDDN                                 *
*                                                                     *
*        THIS ROUTINE WILL SEARCH THE TIOT FOR THE DDNAME SUPPLIED    *
*        IN THE EIGHT (8) BYTE FIELD NAMED DDNAME.                    *
*                                                                     *
*        1)  REGISTER 15 ON ENTRY IS THE ROUTINE ENTRY POINT          *
*        2)  REGISTER 14 ON ENTRY IS THE RETURN ADDRESS               *
*                                                                     *
*        THE SUCCESS OF THE DDNAME SEARCH WILL BE INDICATED BY THE    *
*        RETURN CODE SET IN REGISTER 15.                              *
*                                                                     *
*        REG 15 = 0   - DDNAME FOUND                                  *
*        REG 15 = 4   - DDNAME NOT FOUND                              *
*                                                                     *
*        RETURN FROM THIS ROUTINE WILL BE MADE TO REGISTER 14         *
*                                                                     *
***********************************************************************
FINDDN   CSECT
         STM   R14,R12,12(R13)     SAVE REGISTERS
         USING FINDDN,R9,R10,R11,R12  SET ADDRESSABILITY TO ROUTINE
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,SAVE3           LOAD ADDR OF NEW SAVE
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
         SLR   R15,R15             SET RETURN CODE TO ZERO
         L     R1,16               GET CVT ADDR
         L     R1,0(,R1)           GET TCB PTRS
         L     R1,4(,R1)           GET CURRENT TCB
         L     R1,12(,R1)          GET TIOT ADDR
         LA    R1,24(,R1)          POINT TO DD ENTRIES
         SLR   R0,R0               ZERO REG FOR ICM
FINDDN1  ICM   R0,1,0(R1)          LOAD LENGTH OF DD ENTRY
         BZ    NODDN               ZERO, END OF TIOT ENTRIES
         CLC   DDNAME,4(R1)        SEE IF DDNAME MATCH
         BE    YESDDN              YES, BRANCH
FINDDN2  BXH   R1,R0,FINDDN1       LOOP FOR NEXT ENTRY
NODDN    LA    R15,4               SET RETURN CODE TO 4
YESDDN   L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         L     R14,12(R13)         RESTORE
         LM    R0,R12,20(R13)          ORIGINAL REGS
         BR    R14                 RETURN TO CALLER
         SPACE 3
         LTORG
SAVE3    DS    18F                 ROUTINE SAVE AREA
         DROP  R9,R10,R11,R12
         POP   USING
         EJECT
         PUSH  USING
***********************************************************************
*                                                                     *
*                               CNVTIME                               *
*                                                                     *
*        THIS ROUTINE WILL CONVERT THE FULLWORD BINARY TIME VALUE     *
*        IN THE SMF RECORD TO PRINTABLE TIME OF DAY (HHH.MM.SS.TT)    *
*                                                                     *
*        1)  REGISTER 14 ON ENTRY WILL CONTAIN THE ENTRY POINT        *
*        2)  REGISTER 15 ON ENTRY WILL CONTAIN THE RETURN ADDRESS     *
*        3)  REGISTER 1  ON ENTRY WILL CONTAIN THE BINARY TIME        *
*        4)  THE CONVERTED TIME WILL BE IN THE FIELD OUTTIME IN       *
*            THE FORM HHH:MM:SS.TT                                    *
*                                                                     *
*        RETURN FROM THIS ROUTINE WILL BE MADE TO REGISTER 15         *
*                                                                     *
***********************************************************************
CNVTIME  CSECT
         STM   R14,R12,12(R13)     SAVE REGISTERS
         USING CNVTIME,R9,R10,R11,R12 SET ADDRESSABILITY TO ROUTINE
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,SAVE4           LOAD ADDR OF NEW SAVE
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
         LR    R14,R1              MOVE BINARY TIME TO WORK REG
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         D     R14,=F'360000'      DIVIDE TO FIND HOURS
         CVD   R15,DOUBLE          CONVERT HOURS TO DECIMAL
         UNPK  OUTTIME(3),DOUBLE+6(2)  UNPACK HOURS
         OI    OUTTIME+2,X'F0'     MAKE PRINTABLE
         SRDA  R14,32              SHIFT REMAINDER TO ODD REG
         D     R14,=F'6000'        DIVIDE TO FIND MINUTES
         CVD   R15,DOUBLE          CONVERT MINUTES TO DECIMAL
         UNPK  OUTTIME+3(3),DOUBLE+6(2) UNPACK MINUTES
         OI    OUTTIME+5,X'F0'     MAKE PRINTABLE
         MVI   OUTTIME+3,C':'      SEPARATE HOURS AND MINUTES
         SRDA  R14,32              SHIFT REMAINDER TO ODD REG
         D     R14,=F'100'         DIVIDE TO FIND FULL SECONDS
         CVD   R15,DOUBLE          CONVERT SECONDS TO DECIMAL
         UNPK  OUTTIME+6(3),DOUBLE+6(2)  UNPACK SECONDS
         OI    OUTTIME+8,X'F0'     MAKE PRINTABLE
         MVI   OUTTIME+6,C':'      SEPARATE MINUTES AND SECONDS
         CVD   R14,DOUBLE          CONVERT HUNDRETHS TO DECIMAL
         UNPK  OUTTIME+9(3),DOUBLE+6(2)  UNPACK HUNDRETHS
         OI    OUTTIME+11,X'F0'    MAKE PRINTABLE
         MVI   OUTTIME+9,C'.'      SEPARATE SECONDS AND HUNDRETHS
         L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         LM    R14,R12,12(R13)     RESTORE ORIGINAL REGS
         BR    R14                 RETURN TO CALLER
         SPACE 3
         LTORG
SAVE4    DS    18F                 ROUTINE SAVE AREA
         DROP  R9,R10,R11,R12
         POP   USING
         EJECT
         PUSH  USING
***********************************************************************
*                                                                     *
*                               PRMCHK                                *
*                                                                     *
*        THIS ROUTINE WILL PROCESS THE INPUT SYSIN PARM STATEMENT.    *
*        IT WILL STORE THE PARM VALUE IN THE APPROPRIATE FIELD OR     *
*        THE RETURN CODE WILL BE SET TO A VALUE INDICATING A          *
*        SPECIFIC ERROR.                                              *
*                                                                     *
*        1)  REGISTER 15 ON ENTRY WILL CONTAIN THE ENTRY POINT        *
*        2)  REGISTER 14 ON ENTRY WILL CONTAIN THE RETURN ADDRESS     *
*                                                                     *
*        RETURN FROM THIS ROUTINE WILL BE MADE TO REGISTER 14         *
*                                                                     *
***********************************************************************
PRMCHK   CSECT
         STM   R14,R12,12(R13)     SAVE REGISTERS
         USING PRMCHK,R9,R10,R11,R12 SET ADDRESSABILITY TO ROUTINE
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,SAVE5           LOAD ADDR OF NEW SAVE
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
         LA    R7,CARDAREA         LOAD INPUT RECORD ADDRESS
         SPACE 3
***********************************************************************
*                                                                     *
*        DETERMINE LENGTH OF THE INPUT PARM AND THEN SEARCH           *
*        A KEYWORD TABLE TO FIND A MATCH AND ROUTINE INDEX.           *
*                                                                     *
***********************************************************************
KEYPRM   LR    R1,R7               SAVE RECORD ADDRESS
         SLR   R15,R15             CLEAR COUNTER REG
KEYPRM1  SLR   R3,R3               SET LENGTH TO ZERO
KEYPRM2  CLI   0(R7),C' '          END OF PARM
         BE    KEYPRM3             YES, BRANCH
         CLI   0(R7),C'='          END OF PARM
         BE    KEYPRM3             YES, BRANCH
         CLI   0(R7),C'>'          END OF PARM
         BE    KEYPRM3             YES, BRANCH
         CLI   0(R7),C'<'          END OF PARM
         BE    KEYPRM3             YES, BRANCH
         LA    R3,1(,R3)           ADD 1 TO LENGTH FIELD
         LA    R7,1(,R7)           INCREMENT TO NEXT CHAR OF PARM
         B     KEYPRM2             LOOP
KEYPRM3  LTR   R3,R3               TEST LENGTH
         BZ    ERROR032            ZERO, ERROR
         BCTR  R3,0                MAKE MACHINE LENGTH
         L     R4,=V(OPTKEY)       LOAD ADDRESS OF OPTIONS KEYWORD TBL
KEYPRM4  CLI   0(R4),X'FF'         END OF TABLE
         BE    ERROR001            YES, ERROR, INVALID KEYWORD
         CH    R3,0(R4)            SEE IF LENGTH LT MINIMUM LENGTH
         BL    KEYPRM5             YES, BRANCH
         EX    R3,COMPOKEY         COMPARE OPTION KEYWORD
         BE    KEYPRM6             MATCH, BRANCH
KEYPRM5  LA    R4,32(,R4)          INCREMENT TO NEXT TABLE ENTRY
         B     KEYPRM4             LOOP
KEYPRM6  CLI   16(R4),C'Y'         SEE IF ELIGIBLE SELECT OPTION
         BNE   ERROR001            NO, ERROR
         LH    R15,2(R4)           LOAD OPTION INDEX FROM TABLE
         SPACE 3
***********************************************************************
*                                                                     *
*        GO TO THE PROPER ROUTINE FOR THE KEYWORD ON THE INPUT        *
*        CARD ACCORDING TO THE ROUTINE INDEX IN THE KEYWORD           *
*        TABLE.                                                       *
*                                                                     *
***********************************************************************
         B     KEYEND(R15)         BRANCH TO PROPER ROUTINE BY INDEX
KEYEND   B     PRMJBN              INDEX = 00
         B     PRMDATE             INDEX = 04
         B     PRMTIME             INDEX = 08
         B     PRMSYS              INDEX = 12
         B     PRMDSN              INDEX = 16
         B     PRMCNM              INDEX = 20
         B     PRMDTYP             INDEX = 24
         B     PRMOP               INDEX = 28
         B     PRMTYP              INDEX = 32
         B     PRMSTC              INDEX = 36
         B     PRMSORT             INDEX = 40
         B     PRMPRT              INDEX = 44
         B     XPRMJBN             INDEX = 48
         B     XPRMSYS             INDEX = 52
         B     XPRMDSN             INDEX = 56
         B     XPRMCNM             INDEX = 60
         B     PRMSUN              INDEX = 64
         B     PRMNSUN             INDEX = 68
         B     PRMMON              INDEX = 72
         B     PRMNMON             INDEX = 76
         B     PRMTUE              INDEX = 80
         B     PRMNTUE             INDEX = 84
         B     PRMWED              INDEX = 88
         B     PRMNWED             INDEX = 92
         B     PRMTHU              INDEX = 96
         B     PRMNTHU             INDEX = 100
         B     PRMFRI              INDEX = 104
         B     PRMNFRI             INDEX = 108
         B     PRMSAT              INDEX = 112
         B     PRMNSAT             INDEX = 116
         B     PRMWE               INDEX = 120
         B     PRMNWE              INDEX = 124
         B     PRMWD               INDEX = 128
         B     PRMNWD              INDEX = 132
         B     PRMALLD             INDEX = 136
         B     ERROR001            INDEX = 140
         B     ERROR001            INDEX = 144
         EJECT
***********************************************************************
*                                                                     *
*                        SELECT BY JOBNAME                            *
*                                                                     *
*        JOBNAME=JJJJJJJJ(NN)                                         *
*                                                                     *
*        INSURE THAT THE PARM IS EXACTLY 1 TO EIGHT ALPHANUMERIC      *
*        CHARACTERS LONG.  THE OPTIONAL INDEX VALUE CAN BE            *
*        SPECIFIED WITHIN PARENTHESIS TO SPECIFY THE OFFSET           *
*        WITHIN THE ACTUAL JOBNAME THAT THE SPECIFIED "JOBNAME"       *
*        IS SUPPOSED TO START.  THE OPTIONAL INDEX VALUE MUST         *
*        CONTAIN 1 TO 2 NUMERIC DIGITS.                               *
*                                                                     *
***********************************************************************
PRMJBN   OI    SWITCH,SELJOBNM     TURN ON SELECT JOBNAME INDICATOR
         MVI   VALJOBNM,X'00'      INITIALIZE
         MVI   VALJOBNM+1,X'00'       JOBNAME
         MVC   VALJOBNM+2(8),=CL8' '     ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR031            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         SLR   R15,R15             CLEAR COUNTER REGISTER
PRMJBN1  CLI   0(R7),C' '          END OF JOBNM?
         BE    PRMJBN5             YES, BRANCH
         CLI   0(R7),C'('          START OF OFFSET FIELD?
         BE    PRMJBN2             YES, BRANCH
         LA    R15,1(,R15)         ADD 1 TO LENGTH COUNTER
         LA    R7,1(,R7)           ADD 1 TO JOBNAME POINTER
         B     PRMJBN1             LOOP
PRMJBN2  LTR   R15,R15             TEST LENGTH OF JOBNAME
         BZ    ERROR003            ZERO, ERROR
         CH    R15,=H'8'           SEE IF LENGTH EXCEEDS 8
         BH    ERROR004            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         EX    R15,MVJOBNM         MOVE JOBNAME TO SAVE AREA
         STC   R15,VALJOBNM        SAVE JOBNAME LENGTH
         LA    R7,1(R7)            POINT TO INDEX VALUE
         LR    R1,R7               SAVE INDEX ADDRESS
         SLR   R15,R15             CLEAR COUNTER REG
         CLI   0(R7),C')'          END OF INDEX
         BE    PRMJBN3             YES, BRANCH
         LA    R15,1(,R15)         ADD 1 TO LENGTH COUNTER
         CLI   1(R7),C')'          END OF INDEX
         BE    PRMJBN3             YES, BRANCH
         LA    R15,1(,R15)         ADD 1 TO LENGTH COUNTER
         CLI   2(R7),C')'          END OF INDEX
         BE    PRMJBN3             YES, BRANCH
         B     ERROR005            INDEX LENGTH EXCEEDS 2 CHARACTERS
PRMJBN3  LTR   R15,R15             SEE IF ZERO LENGTH
         BZ    PRMJBN6             YES, NO INDEX
         LR    R14,R15             SAVE INDEX LENGTH
         LR    R2,R7               SAVE INDEX POINTER
PRMJBN4 CLI    0(R2),C'0'          TEST FOR LESS THAN ZERO
         BL    ERROR006            YES, ERROR
         CLI   0(R2),C'9'          TEST FOR GT NINE
         BH    ERROR006            YES, ERROR
         LA    R2,1(,R2)           INDEX TO NEXT CHAR
         BCT   R14,PRMJBN4         LOOP
         BCTR  R15,0               MAKE INDEX LENGTH RELATIVE TO ZERO
         EX    R15,PACKINDX        PACK THE INDEX VALUE
         CVB   R15,DOUBLE          CONVERT INDEX VALUE TO BINARY
         BCTR  R15,0               MAKE INDEX VALUE RELATIVE TO ZERO
         STC   R15,VALJOBNM+1      SAVE INDEX VALUE
         B     PRMJBN6             BRANCH
PRMJBN5  LTR   R15,R15             TEST LENGTH OF JOBNAME
         BZ    ERROR002            ZERO, ERROR
         CH    R15,=H'8'           SEE IF LENGTH EXCEEDS 8
         BH    ERROR003            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         EX    R15,MVJOBNM         MOVE JOBNAME TO SAVE AREA
         STC   R15,VALJOBNM        SAVE JOBNAME LENGTH
         MVI   VALJOBNM+1,X'00'    SET INDEX TO ZERO
PRMJBN6  ICM   R15,B'1111',JOBNMTBL LOAD ADDRESS OF JOBNAME TABLE
         BNZ   PRMJBN7             NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=10010        GET ROOM FOR 1000 JOBNAME ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,JOBNMTBL        STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMJBN7  SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMJBN8  CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMJBN9             YES, GO SAVE NEW ENTRY
         LA    R15,10(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR049            YES, ERROR
         B     PRMJBN8             NO, LOOP
PRMJBN9  MVC   0(10,R15),VALJOBNM  SAVE NEW ENTRY
         MVI   10(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
MVJOBNM  MVC   VALJOBNM+2(0),0(R1) *****  EXEC ONLY *****
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY DATE RANGE                            *
*                                                                     *
*        TIME=YY.DDD:YY.DDD                                           *
*                                                                     *
*        THE FIRST YY.DDD IS THE START YEAR AND DAY TO SELECT         *
*        AND THE OPTIONAL SECOND YY.DDD IS THE STOP YEAR AND          *
*        DAY FOR SELECTION.  IF ONLY ONE DATE VALUE IS ENTERED        *
*        THE DATE SELECTED IS ANY DATE GREATER THAN OR EQUAL TO       *
*        THAT DATE.                                                   *
*                                                                     *
***********************************************************************
PRMDATE  OI    SWITCH,SELDATE      TURN ON SELECT DATE INDICATOR
         MVC   VALDATE(6),=CL6'00.000' INITIALIZE DATE
         MVC   VALDATE+6(6),=CL6'99.999' ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR031            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   2(R7),C'.'          CHECK FOR YEAR AND DAY SEPARATOR
         BNE   ERROR007            NOT THERE, ERROR
         LA    R14,2               SET LENGTH TO 2
         LR    R1,R7               SAVE POINTER TO BEGIN YEAR
PRMDATE1 CLI   0(R1),C'0'          TEST FOR LESS THAN ZERO
         BL    ERROR008            YES, ERROR
         CLI   0(R1),C'9'          TEST FOR GT NINE
         BH    ERROR008            YES, ERROR
         LA    R1,1(,R1)           INDEX TO NEXT CHAR
         BCT   R14,PRMDATE1        LOOP
         LA    R14,3               SET LENGTH TO 3
         LA    R1,3(R7)            SAVE POINTER TO BEGIN DAY
PRMDATE2 CLI   0(R1),C'0'          TEST FOR LESS THAN ZERO
         BL    ERROR009            YES, ERROR
         CLI   0(R1),C'9'          TEST FOR GT NINE
         BH    ERROR009            YES, ERROR
         LA    R1,1(,R1)           INDEX TO NEXT CHAR
         BCT   R14,PRMDATE2        LOOP
         MVC   VALDATE(6),0(R7)    SAVE BEGIN DATE
         CLI   6(R7),C' '          ANY ENDING DATE?
         BE    PRMDATE6            NO, END OF DATE
         CLI   6(R7),C':'          PROPER SEPARATOR FOR DATES
         BNE   ERROR010            NO, ERROR
PRMDATE3 LA    R7,7(,R7)           INCREMENT PAST BEGIN DATE
         CLI   2(R7),C'.'          CHECK FOR YEAR AND DAY SEPARATOR
         BNE   ERROR011            NOT THERE, ERROR
         LA    R14,2               SET LENGTH TO 2
         LR    R1,R7               SAVE POINTER TO END YEAR
PRMDATE4 CLI   0(R1),C'0'          TEST FOR LESS THAN ZERO
         BL    ERROR012            YES, ERROR
         CLI   0(R1),C'9'          TEST FOR GT NINE
         BH    ERROR012            YES, ERROR
         LA    R1,1(,R1)           INDEX TO NEXT CHAR
         BCT   R14,PRMDATE4        LOOP
         LA    R14,3               SET LENGTH TO 3
         LA    R1,3(R7)            SAVE POINTER TO END DAY
PRMDATE5 CLI   0(R1),C'0'          TEST FOR LESS THAN ZERO
         BL    ERROR013            YES, ERROR
         CLI   0(R1),C'9'          TEST FOR GT NINE
         BH    ERROR013            YES, ERROR
         LA    R1,1(,R1)           INDEX TO NEXT CHAR
         BCT   R14,PRMDATE5        LOOP
         MVC   VALDATE+6(6),0(R7)  SAVE END DATE
PRMDATE6 MVC   WORK(2),VALDATE     MOVE YEAR TO WORK
         MVC   WORK+2(3),VALDATE+3 MOVE DAY TO WORK
         PACK  DATES,WORK(5)       PACK JULIAN DATE
         MVC   WORK(2),VALDATE+6   MOVE YEAR TO WORK
         MVC   WORK+2(3),VALDATE+9 MOVE DAY TO WORK
         PACK  DATEE,WORK(5)       PACK JULIAN DATE
         ICM   R15,B'1111',DATETBL  LOAD ADDRESS OF DATE TABLE
         BNZ   PRMDATE7            NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=8008         GET ROOM FOR 1000 DATE ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,DATETBL         STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMDATE7 SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMDATE8 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMDATE9            YES, GO SAVE NEW ENTRY
         LA    R15,08(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR050            YES, ERROR
         B     PRMDATE8            NO, LOOP
PRMDATE9 MVC   0(04,R15),DATES     SAVE NEW START DATE ENTRY
         MVC   4(04,R15),DATEE     SAVE NEW END   DATE ENTRY
         MVI   08(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY TIME RANGE                            *
*                                                                     *
*        TIME=HH.MM:HH.MM                                             *
*                                                                     *
*        THE FIRST HH.MM IS THE START HOUR AND MINUTE TO SELECT       *
*        AND THE OPTIONAL SECOND HH.MM IS THE STOP HOUR AND           *
*        MINUTE FOR SELECTION.  IF ONLY ONE TIME VALUE IS ENTERED     *
*        THE TIME SELECTED IS ANY TIME GREATER THAN OR EQUAL TO       *
*        THAT TIME.                                                   *
*                                                                     *
***********************************************************************
PRMTIME  OI SWITCH,SELTIME      TURN ON SELECT TIME INDICATOR
         MVC   VALDATE(5),=CL5'00.00' INITIALIZE TIME
         MVC   VALDATE+5(5),=CL5'99.99' ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR031            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   2(R7),C'.'          CHECK FOR HOUR AND MIN SEPARATOR
         BNE   ERROR014            NOT THERE, ERROR
         LA    R14,2               SET LENGTH TO 2
         LR    R1,R7               SAVE POINTER TO BEGIN HOUR
PRMTIME1 CLI   0(R1),C'0'          TEST FOR LESS THAN ZERO
         BL    ERROR015            YES, ERROR
         CLI   0(R1),C'9'          TEST FOR GT NINE
         BH    ERROR015            YES, ERROR
         LA    R1,1(,R1)           INDEX TO NEXT CHAR
         BCT   R14,PRMTIME1        LOOP
         LA    R14,2               SET LENGTH TO 2
         LA    R1,3(R7)            SAVE POINTER TO BEGIN MIN
PRMTIME2 CLI   0(R1),C'0'          TEST FOR LESS THAN ZERO
         BL    ERROR016            YES, ERROR
         CLI   0(R1),C'9'          TEST FOR GT NINE
         BH    ERROR016            YES, ERROR
         LA    R1,1(,R1)           INDEX TO NEXT CHAR
         BCT   R14,PRMTIME2        LOOP
         MVC   VALTIME(5),0(R7)    SAVE BEGIN TIME
         CLI   5(R7),C' '          ANY ENDING TIME?
         BE    PRMTIME6            NO, END OF TIME
         CLI   5(R7),C':'          PROPER SEPARATOR FOR TIME
         BNE   ERROR017            NO, ERROR
PRMTIME3 LA    R7,6(,R7)           INCREMENT PAST BEGIN TIME
         CLI   2(R7),C'.'          CHECK FOR HOUR AND MIN SEPARATOR
         BNE   ERROR018            NOT THERE, ERROR
         LA    R14,2               SET LENGTH TO 2
         LR    R1,R7               SAVE POINTER TO END HOUR
PRMTIME4 CLI   0(R1),C'0'          TEST FOR LESS THAN ZERO
         BL    ERROR019            YES, ERROR
         CLI   0(R1),C'9'          TEST FOR GT NINE
         BH    ERROR019            YES, ERROR
         LA    R1,1(,R1)           INDEX TO NEXT CHAR
         BCT   R14,PRMTIME4        LOOP
         LA    R14,2               SET LENGTH TO 2
         LA    R1,3(R7)            SAVE POINTER TO END MIN
PRMTIME5 CLI   0(R1),C'0'          TEST FOR LESS THAN ZERO
         BL    ERROR020            YES, ERROR
         CLI   0(R1),C'9'          TEST FOR GT NINE
         BH    ERROR020            YES, ERROR
         LA    R1,1(,R1)           INDEX TO NEXT CHAR
         BCT   R14,PRMTIME5        LOOP
         MVC   VALTIME+5(5),0(R7)  SAVE END TIME
PRMTIME6 MVC   WORK(2),VALTIME     MOVE BEGIN HOUR TO WORK
         PACK  DOUBLE,WORK(2)      CONVERT TO PACKED
         CVB   R14,DOUBLE          CONVERT TO BINARY
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         M     R14,=F'360000'      MULTIPLY BY HUNDRETHS PER HOUR
         LR    R1,R15              SAVE VALUE
         MVC   WORK(2),VALTIME+3   MOVE BEGIN MIN TO WORK
         PACK  DOUBLE,WORK(2)      CONVERT TO PACKED
         CVB   R14,DOUBLE          CONVERT TO BINARY
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         M     R14,=F'6000'        MULTIPLY BY HUNDRETHS PER MIN
         AR    R1,R15              ADD HUNDRETHS FOR HRS AND MINS
         ST    R1,TIMES            SAVE START TIME
         MVC   WORK(2),VALTIME+5   MOVE END HOUR TO WORK
         PACK  DOUBLE,WORK(2)      CONVERT TO PACKED
         CVB   R14,DOUBLE          CONVERT TO BINARY
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         M     R14,=F'360000'      MULTIPLY BY HUNDRETHS PER HOUR
         LR    R1,R15              SAVE VALUE
         MVC   WORK(2),VALTIME+8   MOVE END MIN TO WORK
         PACK  DOUBLE,WORK(2)      CONVERT TO PACKED
         CVB   R14,DOUBLE          CONVERT TO BINARY
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         M     R14,=F'6000'        MULTIPLY BY HUNDRETHS PER MIN
         AR    R1,R15              ADD HUNDRETHS FOR HRS AND MINS
         ST    R1,TIMEE            SAVE END TIME
         ICM   R15,B'1111',TIMETBL  LOAD ADDRESS OF TIME TABLE
         BNZ   PRMTIME7            NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=8008         GET ROOM FOR 1000 TIME ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,TIMETBL         STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMTIME7 SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMTIME8 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMTIME9            YES, GO SAVE NEW ENTRY
         LA    R15,08(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR051            YES, ERROR
         B     PRMTIME8            NO, LOOP
PRMTIME9 MVC   0(04,R15),TIMES     SAVE NEW START TIME ENTRY
         MVC   4(04,R15),TIMEE     SAVE NEW END   TIME ENTRY
         MVI   08(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY SYSTEM ID                             *
*                                                                     *
*        SYSTEM=SSSS                                                  *
*                                                                     *
*        WHERE SSSS IS THE SMF SYSTEM ID.  THIS FIELD ONLY HAS        *
*        MEANING IF THE INPUT SMF DATA HAS COME FROM MULTIPLE         *
*        MVS SYSTEMS.                                                 *
*                                                                     *
***********************************************************************
PRMSYS   OI    SWITCH,SELSYSID     TURN ON SELECT SYSID INDICATOR
         MVC   VALSYSID,=CL4' '    INITIALIZE SYSID
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR031            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE SYSID NOT BLANK
         BE    ERROR021            NOT THERE, ERROR
         MVC   VALSYSID(4),0(R7)   SAVE SYS ID
PRMSYS1  ICM   R15,B'1111',SYSIDTBL LOAD ADDRESS OF SYSID TABLE
         BNZ   PRMSYS2             NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=4004         GET ROOM FOR 1000 SYSID ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,SYSIDTBL        STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMSYS2  SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMSYS3  CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMSYS4             YES, GO SAVE NEW ENTRY
         LA    R15,04(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR052            YES, ERROR
         B     PRMSYS3             NO, LOOP
PRMSYS4  MVC   0(04,R15),VALSYSID  SAVE NEW ENTRY
         MVI   04(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY DATASET NAME                          *
*                                                                     *
*        DSN=DDDDDDDD                                                 *
*                                                                     *
*        INSURE THAT THE DATASET NAME IS 1 TO 44 CHARACTERS LONG      *
*        SAVING THE LENGTH FOR A GENERIC COMPARE.                     *
*                                                                     *
***********************************************************************
PRMDSN   OI    SWITCH+1,SELDSN     TURN ON SELECT DATASET NAME IND
         MVC   VALDSN(2),=X'0000'  INITIALIZE DSNAME
         MVC   VALDSN+2(44),=CL44' '    ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR031            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE DSNAME NOT BLANK
         BE    ERROR040            NOT THERE, ERROR
         SLR   R15,R15             SET LENGTH TO 0
PRMDSN1  CLI   0(R7),C' '          END OF DSNAME
         BE    PRMDSN2             YES, BRANCH
         LA    R7,1(,R7)           INDEX TO NEXT CHAR
         LA    R15,1(,R15)         ADD 1 TO LENGTH
         B     PRMDSN1             LOOP
PRMDSN2  CH    R15,=H'44'          SEE IF EXCEEDS MAX LENGTH
         BH    ERROR040            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         STH   R15,VALDSN          SAVE LENGTH OF DATASET NAME
         MVC   VALDSN+2(44),0(R1)  SAVE DATASET NAME
PRMDSN3  ICM   R15,B'1111',DSNTBL  LOAD ADDRESS OF DSN TABLE
         BNZ   PRMDSN4             NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=46046        GET ROOM FOR 1000 DSN ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,DSNTBL          STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMDSN4  SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMDSN5  CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMDSN6             YES, GO SAVE NEW ENTRY
         LA    R15,46(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR053            YES, ERROR
         B     PRMDSN5             NO, LOOP
PRMDSN6 MVC    0(46,R15),VALDSN    SAVE NEW ENTRY
         MVI   46(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY CATALOG NAME                          *
*                                                                     *
*        CATNAME=CCCCCCCC                                             *
*                                                                     *
*        INSURE THAT THE CATALOG NAME IS 1 TO 44 CHARACTERS LONG      *
*        SAVING THE LENGTH FOR A GENERIC COMPARE.                     *
*                                                                     *
***********************************************************************
PRMCNM   OI    SWITCH+1,SELCNM     TURN ON SELECT CATNAME IND
         MVC   VALCNM(2),=X'0000'  INITIALIZE DSNAME
         MVC   VALCNM+2(44),=CL44' '    ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR031            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE CATNAME NOT BLANK
         BE    ERROR033            NOT THERE, ERROR
         SLR   R15,R15             SET LENGTH TO 0
PRMCNM1  CLI   0(R7),C' '          END OF CATALOG NAME?
         BE    PRMCNM2             YES, BRANCH
         LA    R7,1(,R7)           INDEX TO NEXT CHAR
         LA    R15,1(,R15)         ADD 1 TO LENGTH
         B     PRMCNM1             LOOP
PRMCNM2  CH    R15,=H'44'          SEE IF EXCEEDS MAX LENGTH
         BH    ERROR033            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         STH   R15,VALCNM          SAVE LENGTH OF CATALOG NAME
         MVC   VALCNM+2(44),0(R1)  SAVE CATALOG NAME
PRMCNM3  ICM   R15,B'1111',CNMTBL  LOAD ADDRESS OF CATNAME TABLE
         BNZ   PRMCNM4             NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=46046        GET ROOM FOR 1000 CATNAME ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,CNMTBL          STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMCNM4  SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMCNM5  CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMCNM6             YES, GO SAVE NEW ENTRY
         LA    R15,46(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR054            YES, ERROR
         B     PRMCNM5             NO, LOOP
PRMCNM6  MVC   0(46,R15),VALCNM    SAVE NEW ENTRY
         MVI   46(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY DATASET TYPE                          *
*                                                                     *
*        DTYPE=TTTTTT                                                 *
*                                                                     *
*        INSURE THAT DTYPE IS ONE OF THE POSSIBLE VALUES              *
*                                                                     *
***********************************************************************
PRMDTYP  OI    SWITCH+1,SELDTYP    TURN ON SELECT BY DSORG
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR031            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         SLR   R3,R3               SET PARAMETER LENGTH TO ZERO
PRMDTYP1 CLI   0(R1),C' '          END OF PARAMETER
         BE    PRMDTYP2            YES, BRANCH
         LA    R1,1(,R1)           INCREMENT TO NEXT CHAR OF PARAMETER
         LA    R3,1(,R3)           ADD 1 TO PARAMETER LENGTH
         B     PRMDTYP1            LOOP
PRMDTYP2 LTR   R3,R3               TEST LENGTH
         BZ    ERROR027            ZERO, ERROR
         BCTR  R3,0                MAKE MACHINE LENGTH
         LA    R4,DTYPTBL          LOAD ADDRESS OF DTYPE TABLE
PRMDTYP3 CLI   0(R4),X'FF'         END OF TABLE
         BE    ERROR027            YES, ERROR, INVALID PARAMETER
         CH    R3,0(R4)            SEE IF LENGTH LT MINIMUM LENGTH
         BL    PRMDTYP4            YES, BRANCH
         EX    R3,COMPDTYP         COMPARE OPTION KEYWORD
         BE    PRMDTYP5            MATCH, BRANCH
PRMDTYP4 LA    R4,14(,R4)          INCREMENT TO NEXT TABLE ENTRY
         B     PRMDTYP3            LOOP
PRMDTYP5 LH    R15,12(R4)          LOAD INDEX FROM TABLE
         SPACE 3
***********************************************************************
*                                                                     *
*        GO TO THE PROPER ROUTINE FOR THE DATASET TYPE ON THE         *
*        INPUT CARD ACCORDING TO THE INDEX IN THE TABLE.              *
*                                                                     *
***********************************************************************
         B     PRMDTYP6(R15)       BRANCH TO PROPER ROUTINE BY INDEX
PRMDTYP6 B     PRMDTYPA            INDEX = 00 - NONVSAM
         B     PRMDTYPB            INDEX = 04 - GDG
         B     PRMDTYPC            INDEX = 08 - CLUSTER
         B     PRMDTYPD            INDEX = 12 - DATA
         B     PRMDTYPE            INDEX = 16 - AIX
         B     PRMDTYPF            INDEX = 20 - INDEX
         B     PRMDTYPG            INDEX = 24 - MCAT
         B     PRMDTYPH            INDEX = 28 - PAGESPC
         B     PRMDTYPI            INDEX = 32 - PATH
         B     PRMDTYPJ            INDEX = 36 - UCAT
         B     PRMDTYPK            INDEX = 40 - VOLUME
         B     PRMDTYPL            INDEX = 44 - ALIAS
         B     PRMDTYPM            INDEX = 48 - UPGRADE
         B     PRMDTYPN            INDEX = 52 - UNKN
PRMDTYPA OI    VALDTYP,NONVSAM     TURN ON NONVSAM BIT
         B     PRMEND              GO GET NEXT OPTION CARD
PRMDTYPB OI    VALDTYP,GDG         TURN ON GDG BIT
         B     PRMEND              GO GET NEXT OPTION CARD
PRMDTYPC OI    VALDTYP,CLUSTER     TURN ON CLUSTER BIT
         B     PRMEND              GO GET NEXT OPTION CARD
PRMDTYPD OI    VALDTYP,DATA        TURN ON DATA BIT
         B     PRMEND              GO GET NEXT OPTION CARD
PRMDTYPE OI    VALDTYP,AIX         TURN ON AIX BIT
         B     PRMEND              GO GET NEXT OPTION CARD
PRMDTYPF OI    VALDTYP,INDEX       TURN ON INDEX BIT
         B     PRMEND              GO GET NEXT OPTION CARD
PRMDTYPG OI    VALDTYP,MCAT        TURN ON MCAT BIT
         B     PRMEND              GO GET NEXT OPTION CARD
PRMDTYPH OI    VALDTYP,PAGESPC     TURN ON PAGESPC BIT
         B     PRMEND              GO GET NEXT OPTION CARD
PRMDTYPI OI    VALDTYP+1,PATH      TURN ON PATH BIT
         B     PRMEND              GO GET NEXT OPTION CARD
PRMDTYPJ OI    VALDTYP+1,UCAT      TURN ON UCAT BIT
         B     PRMEND              GO GET NEXT OPTION CARD
PRMDTYPK OI    VALDTYP+1,VOLUME    TURN ON VOLUME BIT
         B     PRMEND              GO GET NEXT OPTION CARD
PRMDTYPL OI    VALDTYP+1,ALIAS     TURN ON ALIAS BIT
         B     PRMEND              GO GET NEXT OPTION CARD
PRMDTYPM OI    VALDTYP+1,UPGRADE   TURN ON UPGRADE BIT
         B     PRMEND              GO GET NEXT OPTION CARD
PRMDTYPN OI    VALDTYP+1,UNKN      TURN ON UNKN BIT
         B     PRMEND              GO GET NEXT OPTION CARD
COMPDTYP CLC   2(0,R4),0(R7)       **** EXECUTE ONLY ****
         EJECT
***********************************************************************
*                                                                     *
*        THIS IS A TABLE OF DATASET TYPE SELECT NAMES                 *
*                                                                     *
*        EACH ENTRY IS 14 BYTES LONG.  AN ENTRY WHICH BEGINS          *
*        WITH A X'FF' INDICATES END OF THE TABLE.                     *
*                                                                     *
*        EACH ENTRY HAS THE FOLLOWING FORMAT:                         *
*                                                                     *
*        1)  HALFWORD MACHINE MINIMUM LENGTH OF THE NAME              *
*            WHICH FOLLOWS.  FOR EXAMPLE - A VALUE OF 2 STATES        *
*            THAT THE FIRST 3 OR MORE CHARACTERS CAN ALSO BE          *
*            CONSIDERED A MATCH PROVIDING ABBREVIATIONS FOR           *
*            SOME OF THE KEYWORDS.                                    *
*                                                                     *
*        2)  10 BYTE DATASET TYPE NAME.                               *
*                                                                     *
*        3)  A HALFWORD BRANCH TABLE OFFSET FROM LABEL "PRMDTYP6"     *
*            TO PERFORM DATASET TYPE PARM PROCESSING.                 *
*                                                                     *
***********************************************************************
DTYPTBL  DS    0H
         DC    AL2(00),CL10'NONVSAM   ',AL2(00)
         DC    AL2(00),CL10'NVSAM     ',AL2(00)
         DC    AL2(00),CL10'GDG       ',AL2(04)
         DC    AL2(00),CL10'CLUSTER   ',AL2(08)
         DC    AL2(00),CL10'DATASET   ',AL2(12)
         DC    AL2(01),CL10'AIX       ',AL2(16)
         DC    AL2(00),CL10'INDEX     ',AL2(20)
         DC    AL2(00),CL10'MCAT      ',AL2(24)
         DC    AL2(00),CL10'MASTERCAT ',AL2(24)
         DC    AL2(02),CL10'PAGESPC   ',AL2(28)
         DC    AL2(02),CL10'PATH      ',AL2(32)
         DC    AL2(01),CL10'UCAT      ',AL2(36)
         DC    AL2(01),CL10'USERCAT   ',AL2(36)
         DC    AL2(00),CL10'VOLUME    ',AL2(40)
         DC    AL2(01),CL10'ALIAS     ',AL2(44)
         DC    AL2(01),CL10'UPGRADE   ',AL2(48)
         DC    AL2(01),CL10'UNKNOWN   ',AL2(52)
         DC    X'FF'
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY CATALOG OPERATION                     *
*                                                                     *
*        OPERATION=OOOOOOO                                            *
*                                                                     *
*        INSURE THAT OPERATION IS ONE OF THE POSSIBLE VALUES          *
*                                                                     *
***********************************************************************
PRMOP    OI    SWITCH+1,SELOP      TURN ON SELECT BY OPERATION
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR031            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         SLR   R3,R3               SET PARAMETER LENGTH TO ZERO
PRMOP1   CLI   0(R1),C' '          END OF PARAMETER
         BE    PRMOP2              YES, BRANCH
         LA    R1,1(,R1)           INCREMENT TO NEXT CHAR OF PARAMETER
         LA    R3,1(,R3)           ADD 1 TO PARAMETER LENGTH
         B     PRMOP1              LOOP
PRMOP2   LTR   R3,R3               TEST LENGTH
         BZ    ERROR034            ZERO, ERROR
         BCTR  R3,0                MAKE MACHINE LENGTH
         LA    R4,OPTBL            LOAD ADDRESS OF OPERATION TABLE
PRMOP3   CLI   0(R4),X'FF'         END OF TABLE
         BE    ERROR034            YES, ERROR, INVALID PARAMETER
         CH    R3,0(R4)            SEE IF LENGTH LT MINIMUM LENGTH
         BL    PRMOP4              YES, BRANCH
         EX    R3,COMPOP           COMPARE OPTION KEYWORD
         BE    PRMOP5              MATCH, BRANCH
PRMOP4   LA    R4,14(,R4)          INCREMENT TO NEXT TABLE ENTRY
         B     PRMOP3              LOOP
PRMOP5   LH    R15,12(R4)          LOAD INDEX FROM TABLE
         SPACE 3
***********************************************************************
*                                                                     *
*        GO TO THE PROPER ROUTINE FOR THE OPERATION NAME ON THE       *
*        INPUT CARD ACCORDING TO THE INDEX IN THE TABLE.              *
*                                                                     *
***********************************************************************
         B     PRMOP6(R15)         BRANCH TO PROPER ROUTINE BY INDEX
PRMOP6   B     PRMOPA              INDEX = 00 - DEFINE
         B     PRMOPB              INDEX = 04 - DELETE
         B     PRMOPC              INDEX = 08 - SCRATCH
         B     PRMOPD              INDEX = 12 - RENAME
         B     PRMOPE              INDEX = 16 - ALTER
PRMOPA   OI    VALOP,DEFINE        TURN ON DEFINE BIT
         B     PRMEND              GO GET NEXT OPTION CARD
PRMOPB   OI    VALOP,DELETE        TURN ON DELETE BIT
         B     PRMEND              GO GET NEXT OPTION CARD
PRMOPC   OI    VALOP,SCRATCH       TURN ON SCRATCH BIT
         B     PRMEND              GO GET NEXT OPTION CARD
PRMOPD   OI    VALOP,RENAME        TURN ON RENAME BIT
         B     PRMEND              GO GET NEXT OPTION CARD
PRMOPE   OI    VALOP,ALTER         TURN ON ALTER BIT
         B     PRMEND              GO GET NEXT OPTION CARD
COMPOP   CLC   2(0,R4),0(R7)       **** EXECUTE ONLY ****
         EJECT
***********************************************************************
*                                                                     *
*        THIS IS A TABLE OF OPERATION SELECT NAMES                    *
*                                                                     *
*        EACH ENTRY IS 14 BYTES LONG.  AN ENTRY WHICH BEGINS          *
*        WITH A X'FF' INDICATES END OF THE TABLE.                     *
*                                                                     *
*        EACH ENTRY HAS THE FOLLOWING FORMAT:                         *
*                                                                     *
*        1)  HALFWORD MACHINE MINIMUM LENGTH OF THE NAME              *
*            WHICH FOLLOWS.  FOR EXAMPLE - A VALUE OF 2 STATES        *
*            THAT THE FIRST 3 OR MORE CHARACTERS CAN ALSO BE          *
*            CONSIDERED A MATCH PROVIDING ABBREVIATIONS FOR           *
*            SOME OF THE KEYWORDS.                                    *
*                                                                     *
*        2)  10 BYTE CATALOG OPERATION NAME.                          *
*                                                                     *
*        3)  A HALFWORD BRANCH TABLE OFFSET FROM LABEL "PRMOP6"       *
*            TO PERFORM OPERATION PARM PROCESSING.                    *
*                                                                     *
***********************************************************************
OPTBL    DS    0H
         DC    AL2(02),CL10'DEFINE    ',AL2(00)
         DC    AL2(02),CL10'DELETE    ',AL2(04)
         DC    AL2(00),CL10'UNCATALOG ',AL2(04)
         DC    AL2(00),CL10'SCRATCH   ',AL2(08)
         DC    AL2(00),CL10'RENAME    ',AL2(12)
         DC    AL2(00),CL10'ALTER     ',AL2(16)
         DC    X'FF'
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY JOB TYPE                              *
*                                                                     *
*        JOBTYPE=T/P                                                  *
*                                                                     *
*        INSURE THAT JOBTYPE = T/P (TEST/PRODUCTION)                  *
*                                                                     *
***********************************************************************
PRMTYP   OI    SWITCH+1,SELTYPE    TURN ON SELECT BY TYPE INDICATOR
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR031            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE TYPE NOT BLANK
         BE    ERROR038            NOT THERE, ERROR
         CLI   1(R7),C' '          MAKE SURE 1 CHARACTER JOB TYPE
         BNE   ERROR038            NO, ERROR
         CLI   0(R7),C'T'          SEE IF VALID VALUE
         BE    PRMTYP1             YES, BRANCH
         CLI   0(R7),C'P'          SEE IF VALID VALUE
         BNE   ERROR038            NO, ERROR
PRMTYP1  MVC   VALTYPE(1),0(R1)    SAVE JOB TYPE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     HONOR A STOP COUNT                              *
*                                                                     *
*        STOPAFTER=NNNNNNNNN                                          *
*                                                                     *
*        INSURE THAT NNNNNNNNN IS A 1 TO NINE DIGIT NUMBER            *
*                                                                     *
***********************************************************************
PRMSTC   OI    SWITCH+1,SELSTCNT   TURN ON STOP COUNT ENTERED IND
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR031            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE TYPE NOT BLANK
         BE    ERROR039            NOT THERE, ERROR
         LA    R14,9+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMSTC1  CLI   0(R7),C' '          END OF PARM?
         BE    PRMSTC2             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR039            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR039            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMSTC1         LOOP
         B     ERROR039            TOO LONG ERROR
PRMSTC2  BCTR  R15,0               MAKE LENGTH OF STOP CNT REL ZERO
         EX    R15,PACKINDX        PACK STOP COUNT
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALSTCNT        SAVE STOP COUNT VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                      ENTER SORT CRITERIA                            *
*                                                                     *
*        SORT=A,B,C,D,E                                               *
*                                                                     *
*        THIS ROUTINE WILL VALIDATE THE LIST OF SORT OPTIONS AND      *
*        GENERATE SORT CONTROL STATEMENTS AND CALL SORT.              *
*                                                                     *
***********************************************************************
PRMSORT OI     SWITCH,SELSORT      TURN ON SELECT SORT INDICATOR
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR031            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE SORT SUBPARAMETERS PRESENT
         BE    ERROR022            NONE, ERROR
         LA    R14,SRTFLDS         LOAD ADDRESS OF SORT FIELDS CARD
         SLR   R15,R15             CLEAR COUNTER REG
PRMSORT1 CH    R15,=H'5'           HAVE WE ALREADY PROCESSED 5 PARMS
         BNL   ERROR023            YES, ERROR
         SLR   R3,R3               SET LENGTH TO ZERO
PRMSORT2 CLI   0(R7),C' '          END OF SORT PARM
         BE    PRMSORT3            YES, BRANCH
         CLI   0(R7),C','          END OF SORT PARM
         BE    PRMSORT3            YES, BRANCH
         CLI   0(R7),C'('          END OF SORT PARM
         BE    PRMSORT3            YES, BRANCH
         LA    R3,1(,R3)           ADD 1 TO LENGTH FIELD
         LA    R7,1(,R7)           INCREMENT TO NEXT CHAR OF PARM
         B     PRMSORT2            LOOP
PRMSORT3 LTR   R3,R3               TEST LENGTH
         BZ    ERROR026            ZERO, ERROR
         BCTR  R3,0                MAKE MACHINE LENGTH
         L     R4,=V(OPTKEY)       LOAD ADDRESS OF SORT KEYWORD TBL
PRMSORT4 CLI   0(R4),X'FF'         END OF TABLE
         BE    ERROR024            YES, ERROR, INVALID KEYWORD
         CH    R3,0(R4)            SEE IF LENGTH LT MINIMUM LENGTH
         BL    PRMSORT5            YES, BRANCH
         EX    R3,COMPSPRM         COMPARE SORT PARM
         BE    PRMSORT6            MATCH, BRANCH
PRMSORT5 LA    R4,32(,R4)          INCREMENT TO NEXT TABLE ENTRY
         B     PRMSORT4            LOOP
PRMSORT6 CLI   17(R4),C'Y'         SEE IF ELIGIBLE SORT OPTION
         BNE   ERROR024            NO, ERROR
         MVC   0(11,R14),20(R4)    MOVE SORT PARM FROM TABLE
         CLC   0(3,R7),=C'(D)'     SEE IF FOLLOWED BY "(D)"
         BNE   *+12                NO, BRANCH
         MVI   9(R14),C'D'         SET TO DESCENDING
         LA    R7,3(,R7)           INCREMENT PAST "(D)"
         CLC   0(3,R7),=C'(A)'     SEE IF FOLLOWED BY "(A)"
         BNE   *+8                 NO, BRANCH
         LA    R7,3(,R7)           INCREMENT PAST "(A)"
         LA    R14,11(,R14)        INCREMENT TO NEXT SORT FIELDS SLOT
         LA    R15,1(,R15)         ADD 1 TO FIELDS COUNTER
         CLI   0(R7),C' '          END OF SUBPARAMETERS?
         BE    PRMSORT7            YES, BRANCH
         CLI   0(R7),C','          PROPER SUBPARAMETER SEPARATOR?
         BNE   ERROR025            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST ','
         LR    R1,R7               SET START OF NEXT SUBPARM
         B     PRMSORT1            GO GET NEXT SORT SUBPARAMETER
PRMSORT7 BCTR  R14,0               BACK UP POINTER TO SORT FIELDS CARD
         MVI   0(R14),C')'         PUT CLOSING PARENS ARND SORT FIELDS
         B     PRMEND              GO GET NEXT OPTION CARD
COMPSPRM CLC   0(0,R1),4(R4)       **** EXECUTE ONLY ****
         SPACE 3
***********************************************************************
*                                                                     *
*        DETERMINE LENGTH OF THE PRINT OPTION AND THEN SEARCH         *
*        A KEYWORD TABLE TO FIND A MATCH AND ROUTINE INDEX.           *
*                                                                     *
***********************************************************************
PRMPRT   OI    SWITCH+1,SELPRINT   TURN IF PRINT OPTION SPECIFIED
         LR    R1,R7               SAVE RECORD ADDRESS
         SLR   R15,R15             CLEAR COUNTER REG
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR031            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE PRINT PARMS PRESENT
         BE    ERROR048            NONE, ERROR
PRMPRT1  SLR   R3,R3               SET LENGTH TO ZERO
PRMPRT2  CLI   0(R7),C' '          END OF PARM
         BE    PRMPRT3             YES, BRANCH
         CLI   0(R7),C','          END OF PARM
         BE    PRMPRT3             YES, BRANCH
         LA    R3,1(,R3)           ADD 1 TO LENGTH FIELD
         LA    R7,1(,R7)           INCREMENT TO NEXT CHAR OF PARM
         B     PRMPRT2             LOOP
PRMPRT3  LTR   R3,R3               TEST LENGTH
         BZ    ERROR044            ZERO, ERROR
         BCTR  R3,0                MAKE MACHINE LENGTH
         L     R4,=V(OPTKEY)       LOAD ADDRESS OF OPTIONS KEYWORD TBL
PRMPRT4  CLI   0(R4),X'FF'         END OF TABLE
         BE    ERROR045            YES, ERROR, INVALID KEYWORD
         CH    R3,0(R4)            SEE IF LENGTH LT MINIMUM LENGTH
         BL    PRMPRT5             YES, BRANCH
         EX    R3,COMPOKEY         COMPARE OPTION KEYWORD
         BE    PRMPRT6             MATCH, BRANCH
PRMPRT5  LA    R4,32(,R4)          INCREMENT TO NEXT TABLE ENTRY
         B     PRMPRT4             LOOP
PRMPRT6  CLI   18(R4),C'Y'         SEE IF ELIGIBLE PRINT OPTION
         BNE   ERROR045            NO, ERROR
***********************************************************************
*                                                                     *
*        FIND THE NEXT OPEN ENTRY IN THE PRINT OPTION TABLE.          *
*                                                                     *
***********************************************************************
         L     R1,=V(PRTOPT)       LOAD START ADDRESS OF TABLE
PRMPRT7  CLI   0(R1),C'N'          SEE IF EMPTY ENTRY
         BE    PRMPRT8             YES, BRANCH
         CLI   0(R1),X'FF'         PHYSICAL END OF TABLE
         BE    ERROR046            YES, ERROR
         LA    R1,6(,R1)           INCREMENT TO NEXT TABLE ENTRY
         B     PRMPRT7             LOOP
         SPACE 3
***********************************************************************
*                                                                     *
*        SET THE PRINT OPTION IN THE PRINT OPTION TABLE               *
*                                                                     *
*        REG 1 POINTS TO A NEW PRINT OPTION TABLE ENTRY               *
*        REG 4 POINTS TO THE OPTION TABLE ENTRY                       *
*                                                                     *
***********************************************************************
PRMPRT8  MVI   0(R1),C'Y'          TURN ON PRINT INDICATOR
         LH    R15,2(R4)           LOAD OPTION INDEX FROM TABLE
         STH   R15,4(R1)           SAVE INDEX IN PRINT OPTION TABLE
         CLI   0(R7),C' '          END OF SUBPARAMETERS?
         BE    PRMEND              YES, GO GET NEXT OPTION CARD
         CLI   0(R7),C','          PROPER SUBPARAMETER SEPARATOR?
         BNE   ERROR047            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST ','
         LR    R1,R7               SET START OF NEXT SUBPARM
         B     PRMPRT1             GO GET NEXT PRINT SUBPARAMETER
         SPACE 3
***********************************************************************
*                                                                     *
*                       EXCLUDE BY JOBNAME                            *
*                                                                     *
*        EXJOBNAME=JJJJJJJJ(NN)                                       *
*                                                                     *
*        INSURE THAT THE PARM IS EXACTLY 1 TO EIGHT ALPHANUMERIC      *
*        CHARACTERS LONG.  THE OPTIONAL INDEX VALUE CAN BE            *
*        SPECIFIED WITHIN PARENTHESIS TO SPECIFY THE OFFSET           *
*        WITHIN THE ACTUAL JOBNAME THAT THE SPECIFIED "JOBNAME"       *
*        IS SUPPOSED TO START.  THE OPTIONAL INDEX VALUE MUST         *
*        CONTAIN 1 TO 2 NUMERIC DIGITS.                               *
*                                                                     *
***********************************************************************
XPRMJBN  OI    SWITCH,SELJOBNM     TURN ON SELECT JOBNAME INDICATOR
         MVI   VALJOBNM,X'00'      INITIALIZE
         MVI   VALJOBNM+1,X'00'       JOBNAME
         MVC   VALJOBNM+2(8),=CL8' '     ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR031            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         SLR   R15,R15             CLEAR COUNTER REGISTER
XPRMJBN1 CLI   0(R7),C' '          END OF JOBNM?
         BE    XPRMJBN5            YES, BRANCH
         CLI   0(R7),C'('          START OF OFFSET FIELD?
         BE    XPRMJBN2            YES, BRANCH
         LA    R15,1(,R15)         ADD 1 TO LENGTH COUNTER
         LA    R7,1(,R7)           ADD 1 TO JOBNAME POINTER
         B     XPRMJBN1            LOOP
XPRMJBN2 LTR   R15,R15             TEST LENGTH OF JOBNAME
         BZ    ERROR028            ZERO, ERROR
         CH    R15,=H'8'           SEE IF LENGTH EXCEEDS 8
         BH    ERROR036            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         EX    R15,MVJOBNM         MOVE JOBNAME TO SAVE AREA
         STC   R15,VALJOBNM        SAVE JOBNAME LENGTH
         LA    R7,1(R7)            POINT TO INDEX VALUE
         LR    R1,R7               SAVE INDEX ADDRESS
         SLR   R15,R15             CLEAR COUNTER REG
         CLI   0(R7),C')'          END OF INDEX
         BE    XPRMJBN3            YES, BRANCH
         LA    R15,1(,R15)         ADD 1 TO LENGTH COUNTER
         CLI   1(R7),C')'          END OF INDEX
         BE    XPRMJBN3            YES, BRANCH
         LA    R15,1(,R15)         ADD 1 TO LENGTH COUNTER
         CLI   2(R7),C')'          END OF INDEX
         BE    XPRMJBN3            YES, BRANCH
         B     ERROR037            INDEX LENGTH EXCEEDS 2 CHARACTERS
XPRMJBN3 LTR   R15,R15             SEE IF ZERO LENGTH
         BZ    XPRMJBN6            YES, NO INDEX
         LR    R14,R15             SAVE INDEX LENGTH
         LR    R2,R7               SAVE INDEX POINTER
XPRMJBN4 CLI   0(R2),C'0'          TEST FOR LESS THAN ZERO
         BL    ERROR056            YES, ERROR
         CLI   0(R2),C'9'          TEST FOR GT NINE
         BH    ERROR056            YES, ERROR
         LA    R2,1(,R2)           INDEX TO NEXT CHAR
         BCT   R14,XPRMJBN4        LOOP
         BCTR  R15,0               MAKE INDEX LENGTH RELATIVE TO ZERO
         EX    R15,PACKINDX        PACK THE INDEX VALUE
         CVB   R15,DOUBLE          CONVERT INDEX VALUE TO BINARY
         BCTR  R15,0               MAKE INDEX VALUE RELATIVE TO ZERO
         STC   R15,VALJOBNM+1      SAVE INDEX VALUE
         B     XPRMJBN6            BRANCH
XPRMJBN5 LTR   R15,R15             TEST LENGTH OF JOBNAME
         BZ    ERROR058            ZERO, ERROR
         CH    R15,=H'8'           SEE IF LENGTH EXCEEDS 8
         BH    ERROR028            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         EX    R15,MVJOBNM         MOVE JOBNAME TO SAVE AREA
         STC   R15,VALJOBNM        SAVE JOBNAME LENGTH
         MVI   VALJOBNM+1,X'00'    SET INDEX TO ZERO
XPRMJBN6 ICM   R15,B'1111',XJOBNTBL LOAD ADDRESS OF EXJOBNAME TABLE
         BNZ   XPRMJBN7            NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=10010        GET ROOM FOR 1000 EXJOBNAME ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,XJOBNTBL        STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
XPRMJBN7 SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
XPRMJBN8 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    XPRMJBN9            YES, GO SAVE NEW ENTRY
         LA    R15,10(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR057            YES, ERROR
         B     XPRMJBN8            NO, LOOP
XPRMJBN9 MVC   0(10,R15),VALJOBNM  SAVE NEW ENTRY
         MVI   10(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                    EXCLUDE BY SYSTEM ID                             *
*                                                                     *
*        EXSYSTEM=SSSS                                                *
*                                                                     *
*        WHERE SSSS IS THE SMF SYSTEM ID.  THIS FIELD ONLY HAS        *
*        MEANING IF THE INPUT SMF DATA HAS COME FROM MULTIPLE         *
*        MVS SYSTEMS.                                                 *
*                                                                     *
***********************************************************************
XPRMSYS  OI    SWITCH,SELSYSID     TURN ON SELECT SYSID INDICATOR
         MVC   VALSYSID,=CL4' '    INITIALIZE SYSID
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR031            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE SYSID NOT BLANK
         BE    ERROR059            NOT THERE, ERROR
         MVC   VALSYSID(4),0(R7)   SAVE SYS ID
XPRMSYS1 ICM   R15,B'1111',XSYSTBL  LOAD ADDRESS OF EXSYSID TABLE
         BNZ   XPRMSYS2            NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=4004         GET ROOM FOR 1000 EXSYSID ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,XSYSTBL         STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
XPRMSYS2 SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
XPRMSYS3 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    XPRMSYS4            YES, GO SAVE NEW ENTRY
         LA    R15,04(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR060            YES, ERROR
         B     XPRMSYS3            NO, LOOP
XPRMSYS4 MVC   0(04,R15),VALSYSID  SAVE NEW ENTRY
         MVI   04(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                    EXCLUDE BY DATASET NAME                          *
*                                                                     *
*        EXDSN=DDDDDDDD                                               *
*                                                                     *
*        INSURE THAT THE DATASET NAME IS 1 TO 44 CHARACTERS LONG      *
*        SAVING THE LENGTH FOR A GENERIC COMPARE.                     *
*                                                                     *
***********************************************************************
XPRMDSN  OI    SWITCH+1,SELDSN     TURN ON SELECT DATASET NAME IND
         MVC   VALDSN(2),=X'0000'  INITIALIZE DSNAME
         MVC   VALDSN+2(44),=CL44' '    ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR031            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE DSNAME NOT BLANK
         BE    ERROR061            NOT THERE, ERROR
         SLR   R15,R15             SET LENGTH TO 0
XPRMDSN1 CLI   0(R7),C' '          END OF DSNAME
         BE    XPRMDSN2            YES, BRANCH
         LA    R7,1(,R7)           INDEX TO NEXT CHAR
         LA    R15,1(,R15)         ADD 1 TO LENGTH
         B     XPRMDSN1            LOOP
XPRMDSN2 CH    R15,=H'44'          SEE IF EXCEEDS MAX LENGTH
         BH    ERROR061            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         STH   R15,VALDSN          SAVE LENGTH OF DATASET NAME
         MVC   VALDSN+2(44),0(R1)  SAVE DATASET NAME
XPRMDSN3 ICM   R15,B'1111',XDSNTBL LOAD ADDRESS OF EXDSN TABLE
         BNZ   XPRMDSN4            NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=46046        GET ROOM FOR 1000 EXDSN ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,XDSNTBL         STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
XPRMDSN4 SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
XPRMDSN5 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    XPRMDSN6            YES, GO SAVE NEW ENTRY
         LA    R15,46(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR062            YES, ERROR
         B     XPRMDSN5            NO, LOOP
XPRMDSN6 MVC   0(46,R15),VALDSN    SAVE NEW ENTRY
         MVI   46(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                    EXCLUDE BY CATALOG NAME                          *
*                                                                     *
*        EXCATNAME=CCCCCCCC                                           *
*                                                                     *
*        INSURE THAT THE CATALOG NAME IS 1 TO 44 CHARACTERS LONG      *
*        SAVING THE LENGTH FOR A GENERIC COMPARE.                     *
*                                                                     *
***********************************************************************
XPRMCNM  OI    SWITCH+1,SELCNM     TURN ON SELECT CATNAME IND
         MVC   VALCNM(2),=X'0000'  INITIALIZE DSNAME
         MVC   VALCNM+2(44),=CL44' '    ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR031            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE CATNAME NOT BLANK
         BE    ERROR035            NOT THERE, ERROR
         SLR   R15,R15             SET LENGTH TO 0
XPRMCNM1 CLI   0(R7),C' '          END OF CATALOG NAME?
         BE    XPRMCNM2            YES, BRANCH
         LA    R7,1(,R7)           INDEX TO NEXT CHAR
         LA    R15,1(,R15)         ADD 1 TO LENGTH
         B     XPRMCNM1            LOOP
XPRMCNM2 CH    R15,=H'44'          SEE IF EXCEEDS MAX LENGTH
         BH    ERROR035            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         STH   R15,VALCNM          SAVE LENGTH OF CATALOG NAME
         MVC   VALCNM+2(44),0(R1)  SAVE CATALOG NAME
XPRMCNM3 ICM   R15,B'1111',XCNMTBL LOAD ADDRESS OF EXCATNAME TABLE
         BNZ   XPRMCNM4            NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=46046        GET ROOM FOR 1000 EXCATNAME ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,XCNMTBL         STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
XPRMCNM4 SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
XPRMCNM5 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    XPRMCNM6            YES, GO SAVE NEW ENTRY
         LA    R15,46(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR055            YES, ERROR
         B     XPRMCNM5            NO, LOOP
XPRMCNM6 MVC   0(46,R15),VALCNM    SAVE NEW ENTRY
         MVI   46(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                    DAY-OF-THE-WEEK ROUTINES                         *
*                                                                     *
*        HANDLE THE FOLLOWING PARAMTERS                               *
*                                                                     *
*        SUNDAY/NOSUNDAY         SELECT OR BYPASS THIS DAY            *
*        MONDAY/NOMONDAY         SELECT OR BYPASS THIS DAY            *
*        TUESDAY/NOTUESDAY       SELECT OR BYPASS THIS DAY            *
*        WEDNESDAY/NOWEDNESDAY   SELECT OR BYPASS THIS DAY            *
*        THURSDAY/NOTHURSDAY     SELECT OR BYPASS THIS DAY            *
*        FRIDAY/NOFRIDAY         SELECT OR BYPASS THIS DAY            *
*        SATURDAY/NOSATURDAY     SELECT OR BYPASS THIS DAY            *
*                                                                     *
*        WEEKEND/NOWEEKEND       SELECT OR BYPASS SAT AND SUN         *
*        WEEKDAY/NOWEEKDAY       SELECT OR BYPASS MON - FRI           *
*        EVERYDAY/ALLDAYS        SELECT SUN - SAT                     *
*                                                                     *
***********************************************************************
PRMSUN   OI    DAYSW,SUN           TURN ON SUNDAY
         B     PRMDAYND            GO TO DAY-OF-WEEK END
         SPACE 3
PRMNSUN  NI    DAYSW,255-SUN       TURN OFF SUNDAY
         B     PRMDAYND            GO TO DAY-OF-WEEK END
         SPACE 3
PRMMON   OI    DAYSW,MON           TURN ON MONDAY
         B     PRMDAYND            GO TO DAY-OF-WEEK END
         SPACE 3
PRMNMON  NI    DAYSW,255-MON       TURN OFF MONDAY
         B     PRMDAYND            GO TO DAY-OF-WEEK END
         SPACE 3
PRMTUE   OI    DAYSW,TUE           TURN ON TUESDAY
         B     PRMDAYND            GO TO DAY-OF-WEEK END
         SPACE 3
PRMNTUE  NI    DAYSW,255-TUE       TURN OFF TUESDAY
         B     PRMDAYND            GO TO DAY-OF-WEEK END
         SPACE 3
PRMWED   OI    DAYSW,WED           TURN ON WEDNESDAY
         B     PRMDAYND            GO TO DAY-OF-WEEK END
         SPACE 3
PRMNWED  NI    DAYSW,255-WED       TURN OFF WEDNESDAY
         B     PRMDAYND            GO TO DAY-OF-WEEK END
         SPACE 3
PRMTHU   OI    DAYSW,THU           TURN ON THURSDAY
         B     PRMDAYND            GO TO DAY-OF-WEEK END
         SPACE 3
PRMNTHU  NI    DAYSW,255-THU       TURN OFF THURSDAY
         B     PRMDAYND            GO TO DAY-OF-WEEK END
         SPACE 3
PRMFRI   OI    DAYSW,FRI           TURN ON FRIDAY
         B     PRMDAYND            GO TO DAY-OF-WEEK END
         SPACE 3
PRMNFRI  NI    DAYSW,255-FRI       TURN OFF FRIDAY
         B     PRMDAYND            GO TO DAY-OF-WEEK END
         SPACE 3
PRMSAT   OI    DAYSW,SAT           TURN ON SATURDAY
         B     PRMDAYND            GO TO DAY-OF-WEEK END
         SPACE 3
PRMNSAT  NI    DAYSW,255-SAT       TURN OFF SATURDAY
         B     PRMDAYND            GO TO DAY-OF-WEEK END
         SPACE 3
PRMWE    OI    DAYSW,SAT+SUN       TURN ON SATURDAY AND SUNDAY
         B     PRMDAYND            GO TO DAY-OF-WEEK END
         SPACE 3
PRMNWE   NI    DAYSW,255-SAT-SUN   TURN OFF SATURDAY AND SUNDAY
         B     PRMDAYND            GO TO DAY-OF-WEEK END
         SPACE 3
PRMWD    OI    DAYSW,MON+TUE+WED+THU+FRI TURN ON WEEKDAYS
         B     PRMDAYND            GO TO DAY-OF-WEEK END
         SPACE 3
PRMNWD   NI    DAYSW,255-MON-TUE-WED-THU-FRI TURN OFF WEEKDAYS
         B     PRMDAYND            GO TO DAY-OF-WEEK END
         SPACE 3
PRMALLD  OI    DAYSW,SUN+MON+TUE+WED+THU+FRI+SAT TURN ON EVERY DAY
         SPACE 3
PRMDAYND CLI   0(R7),C' '          INSURE NO LOGICAL SEPARATOR
         BNE   ERROR031            YES, ERROR
         OI    SWITCH,SELDAY       TURN SELECTION BY DAY INDICATOR
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
***********************************************************************
*                                                                     *
*                    RETURN TO CALLER                                 *
*                                                                     *
***********************************************************************
PRMEND   SLR   R15,R15             SET RETURN CODE TO ZERO
PRMEND1  L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         RETURN (14,12),RC=(15)    RETURN TO CALLER
COMPOKEY CLC   0(0,R1),4(R4)       **** EXECUTE ONLY ****
PACKINDX PACK  DOUBLE,0(0,R1)      **** EXECUTE ONLY ****
         EJECT
***********************************************************************
*                                                                     *
*        VALIDITY CHECK ANY OF THE TIME PARMS.                        *
*                                                                     *
*        REGISTER 1 ON ENTRY POINTS TO THE INPUT TIME.                *
*                                                                     *
*        THE INPUT TIME MUST BE IN THE FORM HHH.MM.SS                 *
*                                                                     *
*        REGISTER 14 ON ENTRY IS THE RETURN ADDRESS.                  *
*                                                                     *
*        THE VALIDATED DATE IN THE FORM HHHMMSS WILL BE AT            *
*        LABEL TMOUT.                                                 *
*                                                                     *
*        IN AN ERROR IS DETECTED, THE RETURN CODE WILL BE SET         *
*        TO 8.                                                        *
*                                                                     *
***********************************************************************
PARMTM   ST    R14,RETURN          SAVE RETURN ADDRESS
         MVC   TMOUT,=C'0000000'   SET TIME TO ZERO
         LR    R7,R1               SAVE ADDRESS OF INPUT TIME
         CLI   0(R7),C' '          MAKE SURE INPUT TIME NOT BLANK
         BE    PARMTM7             NOT THERE, ERROR
         LR    R1,R7               SAVE ADDR OF TIME
         LA    R14,5+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PARMTM1  CLI   0(R7),C' '          END OF TIME?
         BE    PARMTM2             YES, BRANCH
         CLI   0(R7),C'.'          END OF HOURS?
         BE    PARMTM2             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    PARMTM7             YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    PARMTM7             YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PARMTM1         LOOP
         B     PARMTM7             TOO LONG, ERROR
PARMTM2  BCTR  R15,0               MAKE LENGTH OF TIME REL ZERO
         EX    R15,PACKINDX        PACK TIME
         CP    DOUBLE,=P'999'      SEE IF EXCEEDS 999 HOURS
         BH    PARMTM7             YES, ERROR
         UNPK  WORK(3),DOUBLE+6(2) UNPACK HOURS
         OI    WORK+2,X'F0'        MAKE PRINTABLE
         MVC   TMOUT(3),WORK       SAVE HHH
         CLI   0(R7),C'.'          SEE IF ANY MORE?
         BNE   PARMTM8             NO, DONE
         LA    R7,1(,R7)           INCREMENT PAST '.'
         LR    R1,R7               SAVE ADDRESS OF TIME
         LA    R14,4+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
         CLI   0(R7),C' '          END OF TIME?
         BE    PARMTM8             YES, DONE
PARMTM3  CLI   0(R7),C' '          END OF TIME?
         BE    PARMTM4             YES, BRANCH
         CLI   0(R7),C'.'          END OF MINUTES?
         BE    PARMTM4             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    PARMTM7             YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    PARMTM7             YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PARMTM3         LOOP
         B     PARMTM7             TOO LONG, ERROR
PARMTM4  LTR   R15,R15             TEST FOR ZERO LENGTH MINUTES
         BE    PARMTM7             YES, ERROR
         BCTR  R15,0               MAKE LENGTH OF TIME REL ZERO
         EX    R15,PACKINDX        PACK TIME
         CP    DOUBLE,=P'59'       SEE IF EXCEEDS 59 MINUTES
         BH    PARMTM7             YES, ERROR
         UNPK  WORK(3),DOUBLE+6(2) UNPACK MINUTES
         OI    WORK+2,X'F0'        MAKE PRINTABLE
         MVC   TMOUT+3(2),WORK+1   SAVE MM
         CLI   0(R7),C'.'          SEE IF ANY MORE?
         BNE   PARMTM8             NO, DONE
         LA    R7,1(,R7)           INCREMENT PAST '.'
         LR    R1,R7               SAVE ADDRESS OF TIME
         LA    R14,4+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
         CLI   0(R7),C' '          END OF TIME?
         BE    PARMTM8             YES, DONE
PARMTM5  CLI   0(R7),C' '          END OF TIME?
         BE    PARMTM6             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    PARMTM7             YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    PARMTM7             YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PARMTM5         LOOP
         B     PARMTM7             TOO LONG, ERROR
PARMTM6  LTR   R15,R15             TEST FOR ZERO LENGTH SECONDS
         BE    PARMTM7             YES, ERROR
         BCTR  R15,0               MAKE LENGTH OF TIME REL ZERO
         EX    R15,PACKINDX        PACK ET
         CP    DOUBLE,=P'59'       SEE IF EXCEEDS 59 SECONDS
         BH    PARMTM7             YES, ERROR
         UNPK  WORK(3),DOUBLE+6(2) UNPACK SECONDS
         OI    WORK+2,X'F0'        MAKE PRINTABLE
         MVC   TMOUT+5(2),WORK+1   SAVE SS
         B     PARMTM8             DONE
PARMTM7 LA     R15,8               SET RETURN CODE TO 8
         B     PARMTM9             RETURN TO CALLER
PARMTM8 LA     R15,0               SET RETURN CODE TO 0
PARMTM9  L     R14,RETURN          RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        ERROR ROUTINES FOR PRMCHK ROUTINE                            *
*                                                                     *
***********************************************************************
ERROR001 LA    R15,1               LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR002 LA    R15,2               LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR003 LA    R15,3               LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR004 LA    R15,4               LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR005 LA    R15,5               LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR006 LA    R15,6               LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR007 LA    R15,7               LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR008 LA    R15,8               LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR009 LA    R15,9               LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR010 LA    R15,10              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR011 LA    R15,11              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR012 LA    R15,12              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR013 LA    R15,13              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR014 LA    R15,14              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR015 LA    R15,15              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR016 LA    R15,16              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR017 LA    R15,17              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR018 LA    R15,18              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR019 LA    R15,19              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR020 LA    R15,20              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR021 LA    R15,21              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR022 LA    R15,22              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR023 LA    R15,23              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR024 LA    R15,24              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR025 LA    R15,25              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR026 LA    R15,26              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR027 LA    R15,27              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR028 LA    R15,28              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR031 LA    R15,31              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR032 LA    R15,32              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR033 LA    R15,33              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR034 LA    R15,34              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR035 LA    R15,35              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR036 LA    R15,36              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR037 LA    R15,37              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR038 LA    R15,38              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR039 LA    R15,39              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR040 LA    R15,40              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR044 LA    R15,44              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR045 LA    R15,45              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR046 LA    R15,46              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR047 LA    R15,47              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR048 LA    R15,48              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR049 LA    R15,49              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR050 LA    R15,50              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR051 LA    R15,51              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR052 LA    R15,52              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR053 LA    R15,53              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR054 LA    R15,54              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR055 LA    R15,55              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR056 LA    R15,56              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR057 LA    R15,57              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR058 LA    R15,58              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR059 LA    R15,59              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR060 LA    R15,60              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR061 LA    R15,61              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR062 LA    R15,72              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
         SPACE 3
         LTORG
SAVE5    DS    18F                 ROUTINE SAVE AREA
         DROP  R9,R10,R11,R12
         POP   USING
CONSTANT CSECT
***********************************************************************
*                                                                     *
*        PROGRAM CONSTANTS AND WORK AREAS                             *
*                                                                     *
***********************************************************************
LOWDATE  DC    PL4'9999999'        LOWEST DATE IN SMF DATA
LOWTIME  DC    X'7FFFFFFF'         LOWEST TIME IN SMF DATA
HIGHDATE DC    PL4'0'              HIGHEST DATE IN SMF DATA
HIGHTIME DC    F'0'                HIGHEST TIME IN SMF DATA
RECADDR  DC    F'0'                ADDRESS OF LAST RECORD
RETURN   DS    F                   SAVE AREA FOR RETURN ADDRESS
WKDAYRET DS    F                   SAVE AREA FOR RETURN ADDRESS
ABCODE   DS    F                   PROGRAM USER ABEND CODE
DOUBLE   DS    D                   DOUBLE WORD WORK AREA
WORK     DS    16C                 MISCELLANEOUS WORK AREA
DBL      DS    D                   DOUBLE WORD WORK AREA
PJDATE   DS    XL4                 SMF DATE (0CYYDDDS)
MMB      DS    H                   BINARY MONTH
DDB      DS    H                   BINARY DAY
YYYYB    DS    H                   BINARY YEAR
DAYOFWK  DS    H                   DAY-OF-WEEK NUMBER
         SPACE 3
BIGMASK1 DC    X'40202020202020202020202020202020202020206B2020206B2020X
               206B2020206B202120'
RETADD   DC    F'0'                RETURN ADDRESS FROM CURRENT ROUTINE
VALJOBNM DC    X'00',X'00',CL8' '  DEFAULT JOBNAME VALUE
JOBNMTBL DC    F'0'                JOBNAME TABLE
XJOBNTBL DC    F'0'                EXCLUDED JOBNAME TABLE
VALDATE  DC    C'00.000',C'99.999' DEFAULT DATE RANGES
DATETBL  DC    F'0'                DATE TABLE
VALTIME  DC    C'00.00',C'99.99'   DEFAULT TIME RANGES
TIMETBL  DC    F'0'                TIME TABLE
VALSYSID DC    C'    '             DEFAULT SYSID VALUE
SYSIDTBL DC    F'0'                SYSID TABLE
XSYSTBL  DC    F'0'                EXCLUDED SYSID TABLE
         DS    0H
VALDSN   DC    AL2(0),CL44' '      DEFAULT DATASET NAME VALUE
DSNTBL   DC    F'0'                DSNAME TABLE
XDSNTBL  DC    F'0'                EXCLUDED DSNAME TABLE
         DS    0H
VALCNM   DC    AL2(0),CL44' '      DEFAULT CATALOG NAME VALUE
CNMTBL   DC    F'0'                CATALOG NAME TABLE
XCNMTBL  DC    F'0'                EXCLUDED CATALOG NAME TABLE
         DS    0H
VALTYPE  DC    C' '                DEFAULT JOB TYPE
VALSTCNT DC    F'0'                DEFAULT STOP COUNT
OUTCNT   DC    F'0'                ACTUAL OUTPUT COUNT
DATES    DC    PL4'0'              START DATE
DATEE    DC    PL4'99999'          END DATE
TIMES    DC    F'0'                START TIME
TIMEE    DS    AL4(4096*4096)      END TIME
DDNAME   DS    CL8                 DDNAME FIELD FOR TIOT SEARCH ROUTINE
*
VALOP    DC    X'00'               CATALOG OPERATION BIT SWITCHES
*        VALOP+0 INDICATORS
DEFINE   EQU   X'80'               DEFINE  ACTIVITY REQUESTED
DELETE   EQU   X'40'               DELETE  ACTIVITY REQUESTED
SCRATCH  EQU   X'20'               SCRATCH ACTIVITY REQUESTED
RENAME   EQU   X'10'               RENAME  ACTIVITY REQUESTED
ALTER    EQU   X'08'               ALTER   ACTIVITY REQUESTED
*
VALDTYP  DC    X'0000'             DATASET TYPE BIT SWITCHES
*        VALDTYP+0 INDICATORS
NONVSAM  EQU   X'80'               NONVSAM ENTRIES REQUESTED
GDG      EQU   X'40'               GDG     ENTRIES REQUESTED
CLUSTER  EQU   X'20'               CLUSTER ENTRIES REQUESTED
DATA     EQU   X'10'               DATA    ENTRIES REQUESTED
AIX      EQU   X'08'               AIX     ENTRIES REQUESTED
INDEX    EQU   X'04'               INDEX   ENTRIES REQUESTED
MCAT     EQU   X'02'               MCAT    ENTRIES REQUESTED
PAGESPC  EQU   X'01'               PAGESPC ENTRIES REQUESTED
*        VALDTYP+1 INDICATORS
PATH     EQU   X'80'               PATH    ENTRIES REQUESTED
UCAT     EQU   X'40'               UCAT    ENTRIES REQUESTED
VOLUME   EQU   X'20'               VOLUME  ENTRIES REQUESTED
ALIAS    EQU   X'10'               ALIAS   ENTRIES REQUESTED
UPGRADE  EQU   X'08'               UPGRADE ENTRIES REQUESTED
UNKN     EQU   X'04'               UNKNOWN ENTRIES REQUESTED
*
SWITCH   DC    X'00000000000000'   MULTIPURPOSE BIT SWITCHES
*        SWITCH+0 INDICATORS
ENDFILE  EQU   X'80'               END OF FILE REACHED ON SMFIN
RECORD2  EQU   X'40'               RECORD 2 OF A RENAME PAIR NEEDED
SELSORT  EQU   X'20'               SORT REQUESTED
SELDATE  EQU   X'10'               DATE SELECTION REQUESTED
SELTIME  EQU   X'08'               TIME SELECTION REQUESTED
SELJOBNM EQU   X'04'               JOBNAME SELECTION REQUESTED
SELSYSID EQU   X'02'               SYSID SELECTION REQUESTED
SELDAY   EQU   X'01'               DAY-OF-WEEK SELECTION REQUESTED
*        SWITCH+1 INDICATORS
SELTYPE  EQU   X'80'               SELECT ON JOB TYPE
SELSTCNT EQU   X'40'               SELECT ON STOP COUNT
SELDTYP  EQU   X'20'               SELECT ON DATASET TYPE
SELOP    EQU   X'10'               SELECT ON CATALOG OPERATION
SELDSN   EQU   X'08'               SELECT ON DSN
SELCNM   EQU   X'04'               SELECT ON CATALOG NAME
SELPRINT EQU   X'02'               CUSTOMIZED PRINT REPORT REQUESTED
*        SWITCH+2 INDICATORS
*        SWITCH+3 INDICATORS
*        SWITCH+4 INDICATORS
*        SWITCH+5 INDICATORS
*        SWITCH+6 INDICATORS
*
DAYSW    DC    X'00'               DAY-OF-WEEK SWITCHES
SUN      EQU   X'80'               SELECT SUNDAY
MON      EQU   X'40'               SELECT MONDAY
TUE      EQU   X'20'               SELECT TUESDAY
WED      EQU   X'10'               SELECT WEDNESDAY
THU      EQU   X'08'               SELECT THURSDAY
FRI      EQU   X'04'               SELECT FRIDAY
SAT      EQU   X'02'               SELECT SATURDAY
LINECT   DC    PL2'99'             LINE COUNTER
PAGECT   DC    PL3'0'              PAGE COUNTER
OUTTIME  DS    CL12                CONVERTED TIME AREA (HHH.MM.SS.TT)
TMOUT    DS    CL7                 CONVERTED TIME AREA (HHHMMSS)
ACC1     DC    PL16'0'             ACCUMULATOR 1  (LINE COUNTER)
DAYTABLE DC    CL21'SUNMONTUEWEDTHUFRISAT' DAYS OF THE WEEK
         DS    0F
SORTPARM DC    X'80',AL3(SORTA)
         DC    H'0'
SORTA    DC    H'28'               LENGTH OF PARAMETER LIST
         DC    A(SORTM)            ADDRESS OF START OF SORT STMT
         DC    A(SORTENDM)         ADDRESS OF END OF SORT STMT
         DC    A(RECM)             ADDRESS OF START OF RECORD STMT
         DC    A(RECENDM)          ADDRESS OF END OF RECORD STMT
         DC    A(E15)              ADDRESS OF E15 EXIT
         DC    A(E35)              ADDRESS OF E35 EXIT
         DC    F'80000'            MAIN STORAGE FOR SORT
SORTM    DC    C' SORT FIELDS=('   START OF SORT FIELDS STMT
SRTFLDS  DC    C'           '      ROOM FOR FIRST SORT FIELD + ','
         DC    C'           '      ROOM FOR SECOND SORT FIELD + ','
         DC    C'           '      ROOM FOR THIRD SORT FIELD + ','
         DC    C'           '      ROOM FOR FOURTH SORT FIELD + ','
         DC    C'           '      ROOM FOR FIFTH SORT FIELD + ')'
SORTENDM DC    C' '                END OF SORT FIELDS STMT
RECM     DC    C' RECORD TYPE=F,LENGTH=126'
RECENDM  DC    C' '                END OF RECORD STMT
         SPACE 3
HEAD     DS    0CL133              PARM HEADINGS
         DC    C'1'                ANS CONTROL CHARACTER
         DC    30C' '
         DC    CL50'INPUT PARMS SELECTED FOR FLSMFCAT REL 2.0'
         DC    52C' '
         SPACE 3
CARDREC  DS    0CL133              PARM CARDS
         DC    C'0'                ANS CONTROL CHARACTER
         DC    30C' '
CARDAREA DC    80C' '              SAVE AREA FOR INPUT CARD
         DC    22C' '
         SPACE 3
HEAD1    DS    0CL133              HEADING LINE1
         DC    C'1'                ANS CONTROL CHARACTER
         DC    40C' '
         DC    CL50'CATALOG ACTIVITY REPORT'
         DC    31C' '
         DC    CL4'PAGE'
OPAGCT   DC    CL6' '              PAGE COUNT
         DC    C' '
         SPACE 3
HEAD2A   DC    CL1'0',CL132' '     HEADING LINE2A
         SPACE 3
HEAD2B   DC    CL1' ',CL132' '     HEADING LINE2B
         SPACE 3
HEAD3    DC    CL1'0',CL132' '     TOTALS HEADING
         ORG   HEAD3+1
         DC    C'SMF START DATE: '
HLDATE   DS    CL6
         DC    C' '
HLTIME   DS    CL5
         ORG HEAD3+132-26
         DC    C'SMF END DATE: '
HHDATE   DS    CL6
         DC    C' '
HHTIME   DS    CL5
         ORG
HEAD4    DC    CL1'0',CL132' '     TOTALS HEADING
         ORG   HEAD4+17+35-10
         DC    C'TOTALS'
         ORG
         SPACE 3
DETAIL   DC    CL133' '            DETAIL PRINT RECORD
         SPACE 3
OJOBNAME DC    CL8' '              JOBNAME
ODATE    DC    CL6' '              DATE (YY.DDD)
OTIME    DC    CL5' '              TIME (HH.MM)
OSYSID   DC    CL4' '              SMF SYSTEM ID
ODSN     DC    CL44' '             DATASET NAME
OCNM     DC    CL44' '             CATALOG NAME
ODTYP    DC    CL7' '              DATASET TYPE
OOP      DC    CL7' '              CATALOG OPERATION NAME
OTYPE    DC    CL1' '              TEST/PRODUCTION JOB TYPE
ORTYP    DC    CL1' '              RENAME TYPE
ODAY     DC    CL3' '              DAY OF THE WEEK
         EJECT
         PRINT NOGEN
SYSIN    DCB   DDNAME=SYSIN,MACRF=GM,DSORG=PS,EODAD=ENDPARM,LRECL=80
SMFIN    DCB   DDNAME=SMFIN,MACRF=GL,DSORG=PS,EODAD=EOF,BFTEK=A
SYSPRINT DCB   DDNAME=SYSPRINT,MACRF=PM,DSORG=PS,LRECL=133,RECFM=FBA
         PRINT GEN
         EJECT
***********************************************************************
*        NEW RECORD CREATED FROM SMF TYPE 14, 15, OR 64 RECORD        *
***********************************************************************
INREC    DS    0CL126
INJBN    DS    CL8              1   JOB NAME
INSTD    DS    PL4              9   DATE
INSIT    DS    XL4              13  TIME (SEC/100)
INSID    DS    CL4              17  SMF SYSTEM ID
INDSN    DS    CL44             21  DATASET NAME
INCNM    DS    CL44             65  CATALOG NAME
INDTYP   DS    CL7              109 DATASET TYPE
INOP     DS    CL7              116 OPERATION
INTYPE   DS    CL1              123 JOB TYPE (T/P)
INRTYP   DS    C                124 RENAME TYPE (F=FROM T=TO)
INDAY    DS    XL2              125 DAY-OF-THE-WEEK (1-7)
         EJECT
SMFT61   DSECT
         IFASMFI6 61
         EJECT
SMFT65   DSECT
         IFASMFI6 65
         EJECT
SMFT66   DSECT
         IFASMFI6 66
         EJECT
***********************************************************************
*                                                                     *
*        THIS IS A TABLE OF ERROR MESSAGES                            *
*                                                                     *
*        EACH ENTRY IS 120 BYTES LONG.  EACH ENTRY CONTAINS THE       *
*        EXACT TEXT TO BE PLACED IN A WTO MESSAGE IF THIS ERROR       *
*        OCCURS.  AN ERROR INDEX WILL BE USED TO SPECIFY WHICH        *
*        ERROR MESSAGE WILL BE USED.  THIS TECHNIQUE PREVENTS         *
*        ALL OF THE ERROR MESSAGES FROM USING UP A LOT OF BASE        *
*        REGISTERS.                                                   *
*                                                                     *
*        AN ERROR INDEX OF 1 WILL CAUSE THE FIRST 120 CHARACTERS      *
*        TO BE USED.  AN ERROR INDEX OF 2 WILL CAUSE THE NEXT         *
*        120 CHARACTERS TO BE USED, ETC.                              *
*                                                                     *
***********************************************************************
MSGTBL   CSECT
         DC    CL120'SMF3001 - INVALID KEYWORD ON INPUT SYSIN CARD     X
                                                                       X
                             '
         DC    CL120'SMF3002 - INVALID JOBNAME VALUE ON SYSIN CARD - MUX
               ST BE 1 TO 8 ALPHANUMERIC CHARACTERS                    X
                             '
         DC    CL120'SMF3003 - INVALID JOBNAME VALUE ON SYSIN CARD - INX
               DEX FIELD WAS NOT PRECEDED BY THE JOBNAME               X
                             '
         DC    CL120'SMF3004 - INVALID JOBNAME VALUE ON SYSIN CARD - JOX
               BNAME EXCEEDS 8 CHARACTERS                              X
                             '
         DC    CL120'SMF3005 - INVALID JOBNAME VALUE ON SYSIN CARD - INX
               DEX LENGTH EXCEEDS 2 CHARACTERS                         X
                             '
         DC    CL120'SMF3006 - INVALID JOBNAME VALUE ON SYSIN CARD - INX
               DEX VALUE IS NOT NUMERIC                                X
                             '
         DC    CL120'SMF3007 - INVALID DATE VALUE ON SYSIN CARD - BEGINX
                DATE NOT IN THE FORM YY.DDD                            X
                             '
         DC    CL120'SMF3008 - INVALID DATE VALUE ON SYSIN CARD - BEGINX
                YEAR NOT NUMERIC                                       X
                             '
         DC    CL120'SMF3009 - INVALID DATE VALUE ON SYSIN CARD - BEGINX
                DAY NOT NUMERIC                                        X
                             '
         DC    CL120'SMF3010 - INVALID DATE VALUE ON SYSIN CARD - BEGINX
                DATE NOT SEPARATED FROM END DATE BY ":"                X
                             '
         DC    CL120'SMF3011 - INVALID DATE VALUE ON SYSIN CARD - END DX
               ATE NOT IN THE FORM YY.DDD                              X
                             '
         DC    CL120'SMF3012 - INVALID DATE VALUE ON SYSIN CARD - END YX
               EAR NOT NUMERIC                                         X
                             '
         DC    CL120'SMF3013 - INVALID DATE VALUE ON SYSIN CARD - END DX
               AY NOT NUMERIC                                          X
                             '
         DC    CL120'SMF3014 - INVALID TIME VALUE ON SYSIN CARD - BEGINX
                TIME NOT IN THE FORM HH.MM                             X
                             '
         DC    CL120'SMF3015 - INVALID TIME VALUE ON SYSIN CARD - BEGINX
                HOUR NOT NUMERIC                                       X
                             '
         DC    CL120'SMF3016 - INVALID TIME VALUE ON SYSIN CARD - BEGINX
                MINUTES NOT NUMERIC                                    X
                             '
         DC    CL120'SMF3017 - INVALID TIME VALUE ON SYSIN CARD - BEGINX
                TIME NOT SEPARATED FROM END TIME BY ":"                X
                             '
         DC    CL120'SMF3018 - INVALID TIME VALUE ON SYSIN CARD - END TX
               IME NOT IN THE FORM HH.MM                               X
                             '
         DC    CL120'SMF3019 - INVALID TIME VALUE ON SYSIN CARD - END HX
               OUR NOT NUMERIC                                         X
                             '
         DC    CL120'SMF3020 - INVALID TIME VALUE ON SYSIN CARD - END MX
               INUTE NOT NUMERIC                                       X
                             '
         DC    CL120'SMF3021 - INVALID SYSTEM VALUE ON SYSIN CARD - MUSX
               T BE 1 TO 4 ALPHANUMERIC CHARACTERS                     X
                             '
         DC    CL120'SMF3022 - INVALID SORT SUBPARAMETER ON SYSIN CARD X
               - NO SUBPARAMETERS ENTERED                              X
                             '
         DC    CL120'SMF3023 - INVALID SORT SUBPARAMETER ON SYSIN CARD X
               - MORE THAN 5 SUBPARAMETERS ENTERED                     X
                             '
         DC    CL120'SMF3024 - INVALID SORT SUBPARAMETER ON SYSIN CARD X
               - UNKNOWN SUBPARAMETER ENTERED                          X
                             '
         DC    CL120'SMF3025 - INVALID SORT SUBPARAMETER ON SYSIN CARD X
               - SUBPARAMETERS NOT SEPARATED BY ","                    X
                             '
         DC    CL120'SMF3026 - INVALID SORT SUBPARAMETER ON SYSIN CARD X
               - NULL PARAMETER ENTERED                                X
                             '
         DC    CL120'SMF3027 - INVALID DATASET TYPE ON SYSIN CARD      X
                                                                       X
                             '
         DC    CL120'SMF3028 - INVALID EXJOBNAME VALUE ON SYSIN CARD - X
               INDEX FIELD WAS NOT PRECEDED BY THE JOBNAME             X
                             '
         DC    CL120'SMF3029 - SYSPRINT DD STATEMENT MISSING - JOB ABORX
               TED                                                     X
                             '
         DC    CL120'SMF3030 - SMFIN DD STATEMENT MISSING - JOB ABORTEDX
                                                                       X
                             '
         DC    CL120'SMF3031 - INVALID KEYWORD OPERATOR ON SYSIN INPUT X
               CARD - NOT VALID FOR THIS KEYWORD                       X
                             '
         DC    CL120'SMF3032 - NULL KEYWORD ON SYSIN INPUT CARD        X
                                                                       X
                             '
         DC    CL120'SMF3033 - INVALID CATALOG NAME ON SYSIN CARD - MUSX
               T BE 1 TO 44 ALPHANUMERIC DIGITS                        X
                             '
         DC    CL120'SMF3034 - INVALID CATALOG OPERATION NAME ON SYSIN X
               CARD - MUST BE DEFINE, DELETE, SCRATCH, RENAME, OR ALTERX
                             '
         DC    CL120'SMF3035 - INVALID EXCATALOG NAME ON SYSIN CARD - MX
               UST BE 1 TO 44 ALPHANUMERIC DIGITS                      X
                             '
         DC    CL120'SMF3036 - INVALID EXJOBNAME VALUE ON SYSIN CARD - X
               JOBNAME EXCEEDS 8 CHARACTERS                            X
                             '
         DC    CL120'SMF3037 - INVALID EXJOBNAME VALUE ON SYSIN CARD - X
               INDEX LENGTH EXCEEDS 2 CHARACTERS                       X
                             '
         DC    CL120'SMF3038 - INVALID JOB TYPE VALUE ON SYSIN CARD - MX
               UST BE "T" OR "P" TO INDICATE TEST OR PRODUCTION        X
                             '
         DC    CL120'SMF3039 - INVALID STOP COUNT VALUE ENTERED ON SYSIX
               N CARD - MUST BE 1 TO 9 NUMERIC DIGITS                  X
                             '
         DC    CL120'SMF3040 - INVALID DATASET NAME ON SYSIN CARD - MUSX
               T BE 1 TO 44 ALPHANUMERIC CHARACTERS                    X
                             '
         DC    CL120'SMF3041 - INTERNAL ERROR - NO FIELDS SELECTED FOR X
               PRINTING                                                X
                             '
         DC    CL120'SMF3042 - INTERNAL ERROR - PRINT SELECTED FOR NON-X
               PRINTABLE OPTION                                        X
                             '
         DC    CL120'SMF3043 - PRINT SPECIFICATION ERROR - THE GENERATEX
               D PRINT LINE EXCEEDS 133 CHARACTERS                     X
                             '
         DC    CL120'SMF3044 - INVALID PRINT SUBPARAMETER ON SYSIN CARDX
                - NULL PARAMETER ENTERED                               X
                             '
         DC    CL120'SMF3045 - INVALID PRINT SUBPARAMETER ON SYSIN CARDX
                - UNKNOWN SUBPARAMETER ENTERED                         X
                             '
         DC    CL120'SMF3046 - INVALID PRINT SUBPARAMETER ON SYSIN CARDX
               - MORE THAN 30 SUBPARAMETERS ENTERED                    X
                             '
         DC    CL120'SMF3047 - INVALID PRINT SUBPARAMETER ON SYSIN CARDX
                - SUBPARAMETERS NOT SEPARATED BY ","                   X
                             '
         DC    CL120'SMF3048 - INVALID PRINT SUBPARAMETER ON SYSIN CARDX
                - NO SUBPARAMETERS ENTERED                             X
                             '
         DC    CL120'SMF3049 - MORE THAN 1000 JOBNAME SELECT STATEMENTSX
                ENTERED                                                X
                             '
         DC    CL120'SMF3050 - MORE THAN 1000 DATE RANGE SELECT STATEMEX
               NTS ENTERED                                             X
                             '
         DC    CL120'SMF3051 - MORE THAN 1000 TIME RANGE SELECT STATEMEX
               NTS ENTERED                                             X
                             '
         DC    CL120'SMF3052 - MORE THAN 1000 SYSTEM ID NAME SELECT STAX
               TEMENTS ENTERED                                         X
                             '
         DC    CL120'SMF3053 - MORE THAN 1000 DATASET NAME SELECT STATEX
               MENTS ENTERED                                           X
                             '
         DC    CL120'SMF3054 - MORE THAN 1000 CATALOG NAME SELECT STATEX
               MENTS ENTERED                                           X
                             '
         DC    CL120'SMF3055 - MORE THAN 1000 EXCATALOG NAME SELECT STAX
               TEMENTS ENTERED                                         X
                             '
         DC    CL120'SMF3056 - INVALID EXJOBNAME VALUE ON SYSIN CARD - X
               INDEX VALUE IS NOT NUMERIC                              X
                             '
         DC    CL120'SMF3057 - MORE THAN 1000 EXJOBNAME SELECT STATEMENX
               TS ENTERED                                              X
                             '
         DC    CL120'SMF3058 - INVALID EXJOBNAME VALUE ON SYSIN CARD - X
               MUST BE 1 TO 8 ALPHANUMERIC CHARACTERS                  X
                             '
         DC    CL120'SMF3059 - INVALID EXSYSTEM VALUE ON SYSIN CARD - MX
               UST BE 1 TO 4 ALPHANUMERIC CHARACTERS                   X
                             '
         DC    CL120'SMF3060 - MORE THAN 1000 EXSYSTEM ID NAME SELECT SX
               TATEMENTS ENTERED                                       X
                             '
         DC    CL120'SMF3061 - INVALID EXDATASET NAME ON SYSIN CARD - MX
               UST BE 1 TO 44 ALPHANUMERIC CHARACTERS                  X
                             '
         DC    CL120'SMF3062 - MORE THAN 1000 EXDATASET NAME SELECT STAX
               TEMENTS ENTERED                                         X
                             '
         DC    CL120'SMF3063 - INVALID COMBINATION OF DAY-OF-WEEK SELECX
               T STATEMENTS RESULTING IN NO ELIGIBLE DAYS              X
                             '
         EJECT
***********************************************************************
*                                                                     *
*        THIS IS A TABLE OF INPUT OPTIONS                             *
*                                                                     *
*        EACH ENTRY IS 32 BYTES LONG.  AN ENTRY WHICH BEGINS          *
*        WITH A X'FF' INDICATES END OF THE TABLE.                     *
*                                                                     *
*        EACH ENTRY HAS THE FOLLOWING FORMAT:                         *
*                                                                     *
*        1)  HALFWORD MACHINE MINIMUM LENGTH OF THE KEYWORD           *
*            WHICH FOLLOWS.  FOR EXAMPLE - A VALUE OF 2 STATES        *
*            THAT THE FIRST 3 OR MORE CHARACTERS CAN ALSO BE          *
*            CONSIDERED A MATCH PROVIDING ABBREVIATIONS FOR           *
*            SOME OF THE KEYWORDS.                                    *
*                                                                     *
*        2)  HALFWORD INDEX VALUE.  THIS INDEX IS USED IN             *
*            IN SEVERAL PLACES AS A BRANCH TABLE OFFSET FOR           *
*            QUICK ENTRY TO PROCESSING FOR THAT KEYWORD.              *
*            IT IS USED FOR INPUT OPTIONS, SORT OPTIONS,              *
*            HEADING PROCESSING, OUTPUT PROCESSING, AND               *
*            TOTALS PROCESSING.  THE OFFSET FOR A KEYWORD             *
*            IS USED CONSISTANTLY IN EACH BRANCH TABLE.               *
*                                                                     *
*        3)  A 12 CHARACTER KEYWORD.  SHORTER FORMS OF THIS           *
*            VALUE MAY ALSO BE ACCEPTABLE DEPENDING ON THE            *
*            FIRST TWO BYTES OF THIS TABLE ENTRY.                     *
*                                                                     *
*        4)  1 CHARACTER OPTION INDICATOR.  IF THIS POSITION          *
*            CONTAINS A "Y", THEN THIS KEYWORD CAN BE USED AS         *
*            A SELECTION OPTION WITH AN ACCOMPANYING VALUE TO         *
*            BE USED FOR COMPARISONS.                                 *
*                                                                     *
*        5)  1 CHARACTER SORT INDICATOR.  IF THIS POSITION            *
*            CONTAINS A "Y", THEN THIS KEYWORD CAN BE USED AS         *
*            A SORT SUBPARAMETER.                                     *
*                                                                     *
*        6)  1 CHARACTER PRINTABLE INDICATOR.  IF THIS POSITION       *
*            CONTAINS A "Y", THEN THIS KEYWORD CAN BE USED TO         *
*            SELECT A FIELD FOR PRINTING.                             *
*                                                                     *
*        7)  1 DIGIT DEFAULT OUTPUT SEQUENCE NUMBER.  IF NO           *
*            PRINT STATEMENT IS ENTERED, THEN THIS DIGIT              *
*            DETERMINES WHICH OUTPUT FIELDS WILL BE PRINTED           *
*            AND IN WHAT ORDER.  A ZERO INDICATES NOT PRINTED         *
*            BY DEFAULT.  OTHERWISE, THE NUMBER INDICATES A           *
*            SEQUENCE NUMBER FROM 1 TO 30 FOR PRINTING.               *
*                                                                     *
*        8)  12 CHARACTER SORT CONTROL STATEMENT IF THIS              *
*            KEYWORD IS USED AS A SORT SUBPARAMETER.  THIS            *
*            IS USED TO BUILD THE SORT CONTROL STATEMENT.             *
*                                                                     *
***********************************************************************
OPTKEY   CSECT
 DC    AL2(3),AL2(000),C'JOBNAME     ',C'YYY',AL1(01),C'001,8,CH,A, '
 DC    AL2(3),AL2(000),C'JOBNM       ',C'YYY',AL1(01),C'001,8,CH,A, '
 DC    AL2(3),AL2(004),C'DATE        ',C'YYY',AL1(02),C'009,4,BI,A, '
 DC    AL2(1),AL2(008),C'TIME        ',C'YYY',AL1(03),C'013,4,BI,A, '
 DC    AL2(1),AL2(012),C'SYSID       ',C'YYY',AL1(04),C'017,4,CH,A, '
 DC    AL2(1),AL2(012),C'SYSTEM      ',C'YYY',AL1(04),C'017,4,CH,A, '
 DC    AL2(3),AL2(016),C'DATASET     ',C'YYY',AL1(07),C'21,44,CH,A, '
 DC    AL2(2),AL2(016),C'DSNAME      ',C'YYY',AL1(07),C'21,44,CH,A, '
 DC    AL2(0),AL2(020),C'CATNAME     ',C'YYY',AL1(00),C'65,44,CH,A, '
 DC    AL2(0),AL2(020),C'CATALOG     ',C'YYY',AL1(00),C'65,44,CH,A, '
 DC    AL2(7),AL2(024),C'DATASETTYPE ',C'YYY',AL1(06),C'109,7,CH,A, '
 DC    AL2(2),AL2(024),C'DSTYPE      ',C'YYY',AL1(06),C'109,7,CH,A, '
 DC    AL2(1),AL2(024),C'DTYPE       ',C'YYY',AL1(06),C'109,7,CH,A, '
 DC    AL2(1),AL2(028),C'OPERATION   ',C'YYY',AL1(05),C'116,7,CH,A, '
 DC    AL2(3),AL2(032),C'JOBTYPE     ',C'YYY',AL1(08),C'123,1,CH,A, '
 DC    AL2(1),AL2(032),C'JTYPE       ',C'YYY',AL1(08),C'123,1,CH,A, '
 DC    AL2(1),AL2(032),C'TYPE        ',C'YYY',AL1(08),C'123,1,CH,A, '
 DC    AL2(1),AL2(036),C'STOPAFTER   ',C'YNN',AL1(00),C'            '
 DC    AL2(1),AL2(036),C'STOPCNT     ',C'YNN',AL1(00),C'            '
 DC    AL2(1),AL2(036),C'STOPCOUNT   ',C'YNN',AL1(00),C'            '
 DC    AL2(1),AL2(040),C'SORT        ',C'YNN',AL1(00),C'            '
 DC    AL2(0),AL2(044),C'PRINT       ',C'YNN',AL1(00),C'            '
 DC    AL2(2),AL2(048),C'EXJOBNAME   ',C'YNN',AL1(00),C'            '
 DC    AL2(1),AL2(048),C'XJOBNAME    ',C'YNN',AL1(00),C'            '
 DC    AL2(2),AL2(048),C'EXJOBNM     ',C'YNN',AL1(00),C'            '
 DC    AL2(1),AL2(048),C'XJOBNM      ',C'YNN',AL1(00),C'            '
 DC    AL2(2),AL2(052),C'EXSYSID     ',C'YNN',AL1(00),C'            '
 DC    AL2(1),AL2(052),C'XSYSID      ',C'YNN',AL1(00),C'            '
 DC    AL2(2),AL2(052),C'EXSYSTEM    ',C'YNN',AL1(00),C'            '
 DC    AL2(1),AL2(052),C'XSYSTEM     ',C'YNN',AL1(00),C'            '
 DC    AL2(3),AL2(056),C'EXDATASET   ',C'YNN',AL1(00),C'            '
 DC    AL2(2),AL2(056),C'XDATASET    ',C'YNN',AL1(00),C'            '
 DC    AL2(3),AL2(056),C'EXDSNAME    ',C'YNN',AL1(00),C'            '
 DC    AL2(2),AL2(056),C'XDSNAME     ',C'YNN',AL1(00),C'            '
 DC    AL2(2),AL2(060),C'EXCATNAME   ',C'YNN',AL1(00),C'            '
 DC    AL2(1),AL2(060),C'XCATNAME    ',C'YNN',AL1(00),C'            '
 DC    AL2(2),AL2(060),C'EXCATALOG   ',C'YNN',AL1(00),C'            '
 DC    AL2(1),AL2(060),C'XCATALOG    ',C'YNN',AL1(00),C'            '
 DC    AL2(1),AL2(064),C'SUNDAY      ',C'YNN',AL1(00),C'            '
 DC    AL2(3),AL2(068),C'NOSUNDAY    ',C'YNN',AL1(00),C'            '
 DC    AL2(0),AL2(072),C'MONDAY      ',C'YNN',AL1(00),C'            '
 DC    AL2(2),AL2(076),C'NOMONDAY    ',C'YNN',AL1(00),C'            '
 DC    AL2(1),AL2(080),C'TUESDAY     ',C'YNN',AL1(00),C'            '
 DC    AL2(3),AL2(084),C'NOTUESDAY   ',C'YNN',AL1(00),C'            '
 DC    AL2(2),AL2(088),C'WEDNESDAY   ',C'YNN',AL1(00),C'            '
 DC    AL2(4),AL2(092),C'NOWEDNESDAY ',C'YNN',AL1(00),C'            '
 DC    AL2(1),AL2(096),C'THURSDAY    ',C'YNN',AL1(00),C'            '
 DC    AL2(3),AL2(100),C'NOTHURSDAY  ',C'YNN',AL1(00),C'            '
 DC    AL2(1),AL2(104),C'FRIDAY      ',C'YNN',AL1(00),C'            '
 DC    AL2(2),AL2(108),C'NOFRIDAY    ',C'YNN',AL1(00),C'            '
 DC    AL2(1),AL2(112),C'SATURDAY    ',C'YNN',AL1(00),C'            '
 DC    AL2(3),AL2(116),C'NOSATURDAY  ',C'YNN',AL1(00),C'            '
 DC    AL2(4),AL2(120),C'WEEKEND     ',C'YNN',AL1(00),C'            '
 DC    AL2(6),AL2(124),C'NOWEEKEND   ',C'YNN',AL1(00),C'            '
 DC    AL2(4),AL2(128),C'WEEKDAY     ',C'YNN',AL1(00),C'            '
 DC    AL2(6),AL2(132),C'NOWEEKDAY   ',C'YNN',AL1(00),C'            '
 DC    AL2(1),AL2(136),C'EVERYDAY    ',C'YNN',AL1(00),C'            '
 DC    AL2(1),AL2(136),C'ALLDAYS     ',C'YNN',AL1(00),C'            '
 DC    AL2(2),AL2(140),C'DAYOFTHEWEEK',C'NYY',AL1(00),C'125,2,BI,A, '
 DC    32X'FF'
         EJECT
***********************************************************************
*                                                                     *
*        THIS IS A TABLE OF PRINT OPTIONS                             *
*                                                                     *
*        EACH ENTRY IS 6 BYTES LONG.  AN ENTRY WHICH BEGINS           *
*        WITH A X'FF' INDICATES END OF THE TABLE.                     *
*                                                                     *
*        EACH ENTRY HAS THE FOLLOWING FORMAT:                         *
*                                                                     *
*        1)  1 BYTE PRINT INDICATOR.  A "Y" INDICATES THAT            *
*            PRINTING IS DESIRED.  ANY OTHER VALUE INDICATES          *
*            NO PRINTING.                                             *
*                                                                     *
*        2)  1 BYTE FILLER                                            *
*                                                                     *
*        3)  A HALFWORD INDEX FROM THE START OF THE DETAIL LINE       *
*            TO PLACE THE OUTPUT VALUE.                               *
*                                                                     *
*        4)  A HALFWORD BRANCH TABLE OFFSET FROM LABEL "PRSETUP2"     *
*            TO PERFORM OUTPUT FIELD PRINT PROCESSING.                *
*                                                                     *
***********************************************************************
PRTOPT   CSECT
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    6X'FF'
         END
