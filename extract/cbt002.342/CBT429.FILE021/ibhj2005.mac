$DP      TITLE 'IBHJ2$DP - $ D P - JES2 COMMAND PROCESSOR - EXIT 5'
***************************************************************
*
*  JES2 COMMAND PREPROCESSOR (EXIT05)
*
*  PURPOSE = SUPPORT IN-HOUSE $DP COMMAND. THE $DP COMMAND DISPLAYS
*            JOBNAME, QUEUE, FORM, ROUTE AND NUMBER OF LINES. INPUT
*            IS AS FOLLOWS:
*
*    $DP (,F=XXXXXXXX) (,R=RXXX (-RYYY)) (,Q=X) (,J=JXXX (-XXX))
*                                                   SXXX   XXX
*                                                   TXXX   XXX
*
*    REGISTER CONVENTIONS:
*
*       R0-R4   =  WORK
*       R5      =  ADDRESS OF CURRENT OPERAND / LINK REGISTER
*       R6      =  INCREMENT VALUE OF 4
*       R7      =  ADDRESS OF LAST OPERAND
*       R8      =  ADDRESSABILITY TO WORK AREA
*       R9      =  ADDRESSABILITY TO QUEUE NAME TABLE (QTAB)
*       R10     =  ADDRESSABILITY TO THE JOT
*       R11     =  A(HCT)    USING FOR HCT SET UP IN HCTDSECT
*       R12     =  BASE REGISTER
*       R13     =  A(HASPCOMM PCE)
*       R14     =  RETURN ADDRESS
*       R15     =  ENTRY ADDRESS
*
*       LINKAGE = STANDARD JES2 EXIT LINKAGE
*
*       INPUT = SEE JES2 SPL FOR EXIT 05
*
*       OUTPUT = DETAIL LINES TO CONSOLE THRU $CWTO MACRO
*
*       RETURN CODE = SEE BELOW
*
*          0 - TELL JES2 TO CONTINUE PROCESSING.
*          4 - NOT USED BY THIS EXIT
*          8 - RETURN TO JES AND BYPASS COMMAND PROCESSING
*         12 - NOT USED BY THIS EXIT
*         16 - NOT USED BY THIS EXIT
*
***************************************************************
*
***  COPY HASP GLOBALS
*
         COPY  $HASPGBL            COPY HASP GLOBALS
         EJECT
BHEXITS  $MODULE NOTICE=NONE,      CREATE MODULE INFO TABLE            X
               $HASPEQU,           GENERATE JES2 EQUATES               X
               RESPA,              NEEDED BY $COMWORK                  X
               $BUFFER,            NEEDED FOR $JCT                     X
               $JCT,               NEEDED BY ALL ROUTINES              X
               $JQE,               NEEDED BY ALL ROUTINES              X
               $JOE,                                                   X
               $JOT,                                                   X
               $MIT,               NEEDED BY ALL ROUTINES              X
               $PCE,               NEEDED BY ALL ROUTINES              X
               $CAT,               NEEDED BY ALL ROUTINES              X
               $CMB,                                                   X
               $COMWORK,                                               X
               $HCT,               NEEDED BY ALL ROUTINES              X
               $RAT,$COM,SYSP=(GEN,GEN,DATA,GEN,GEN)
         EJECT
X05$$DP $ENTRY BASE=R12,CSECT=YES     DEFINE EXIT ENTRY POINT
         SPACE 1
        $SAVE
         LR    R12,R15                 LOAD BASE REGISTER
         SPACE 1
         CLC   $USER4(4),=F'0'
         BE    X05$$DP1
         L     R1,$USER4
         DOM   MSG=(R1)
         XC    $USER4(4),$USER4
X05$$DP1 CLC   COMVERB(2),=CL2'DA'
         BE    X05$$DA
         CLC   COMVERB(2),=CL2'DP'     SEE IF $DP COMMAND
         BNE   X05$RC00                EXIT RC=00 IF NOT
         EJECT
***************************************************************
* GET WORK AREA
***************************************************************
        $GETBUF TYPE=HASP,WAIT=YES    GET WORK AREA
         LR    R8,R1                  LOAD R8 WITH A(WORK AREA)
         USING X05$WORK,R8
***************************************************************
* INITIALIZE WORK AREA
***************************************************************
         MVC   $DPFORM,=CL4' '         CLEAR FORM NAME
         MVI   $DPQUEUE,X'00'          CLEAR QUEUE NAME
         XC    $DPJOBH,$DPJOBH         CLEAR JOB # HIGH LIMIT
         XC    $DPJOBL,$DPJOBL         CLEAR JOB # LOW LIMIT
         MVI   $DPSWTCH,X'00'          CLEAR SWITCH
         ZAP   $WORKLCT,=P'0'          ZERO DISP COUNTER
* INIT ROUTE CODES BASED ON COFRTD ROUTINE IN HASPCOMM
         L     R1,COMJROUT             PICK UP DEFAULT ROUTE CODE
         LR    R0,R1                   COPY TO R0
         TM    COMFLAG,CMBFLAGW        THIS REMOTE WORKSTATION
         BO    X05$001                 LOOK AT RMT WRKSTATION IF YES
*        AL    R0,=A($MAXRJE)          LOCAL CONSOLES DEFAULT TO
*                                      LOCAL JOBS.
         B     X05$002                 STORE VALUES
X05$001  CLM   R1,B'1100',$OWNNODE     THIS OUR NODE
         BNE   X05$002                 STORE VALUES IF NOT
         LH    R1,COMJRMT              LOAD REMOTE NUMBER
         BCTR  R1,0                    REDUCE BY ONE
         MH    R1,=Y(RATTLE)           GET OFFSET
         AL    R1,$RATABLE             POINT TO RAT ELEMENT
         L     R0,RATROUTE-RATDSECT(,R1) PICK UP RMT ROUTING
         LR    R1,R0                   MAKE A COPY OF IT
X05$002  ST    R0,$DPRNHI              STORE HIGH BOUND REMOTE
         ST    R1,$DPRNLO              STORE LOW BOUND REMOTE
         EJECT
***************************************************************
* LOOP TO PROCESS INPUT COMMAND
*     R5 = A(A(FIRST OPERAND))         -----
*     R6 = 4 (USED FOR BXH INCREMENT)       ×>> ALL PASSED FROM JES
*     R7 = A(A(LAST OPERAND))          -----
*
* EX:   $DP,J=J42,Q=A         × A(J=J42) × A(Q=A) × DUMMY ×
*                             2A0        2A4      2A8
*
*       R5=0002A0 R6=000004 R7=0002A4
***************************************************************
X05$I01  BXH   R5,R6,X05$O00           LOOP UNTIL R5 = R7
         L     R1,0(,R5)               R1 = A(CURRENT OPERAND)
         CLI   1(R1),C'='              SEE IF CORRECT FORMAT
         BNE   X05$INVL                INVALID IF NOT
***************************************************************
* SEARCH FOR KEYWORD
***************************************************************
         LA    R15,KEYWTAB             GET ADDRESS OF KEYWORD TABLE
X05$I02  CLC   0(1,R15),0(R1)          SEE IF KEYWORD MATCH
         BNE   X05$I03                 BRANCH IF NO MATCH
         L     R14,0(,R15)             R14 = A(RTN TO PROCESS KEYWORD)
         BR    R14                     PROCESS KEYWORD
X05$I03  LA    R15,4(,R15)             BUMP TO NEXT ENTRY
         CLI   0(R15),X'FF'            AT END OF TABLE?
         BNE   X05$I02                 LOOP IF NOT AT END
         B     X05$INVL                KEYWORD NOT FOUND IF AT END
*
KEYWTAB  DS    0H
         DC    CL1'F',AL3(X05$F00)
         DC    CL1'Q',AL3(X05$Q00)
         DC    CL1'R',AL3(X05$R00)
         DC    CL1'J',AL3(X05$J00)
         DC    2X'FF'
         EJECT
***************************************************************
*** PROCESS F= KEYWORD
***************************************************************
X05$F00  DS    0H
         OI    $DPSWTCH,$DPSWFRM       F= OPERAND FOUND
         LA    R1,2(,R1)               BUMP PAST 'F='
         LA    R2,$DPFORM              ADDRESS TO STORE FORM NAME
         LA    R3,8                    LIMIT OF 8 CHARACTERS
         L     R4,4(,R5)               ADDRESS OF NEXT OPERAND
         BCTR  R4,0                    ADDRESS OF DELIMITER
X05$F01  CLR   R1,R4                   SEE IF AT END OF OPERAND
         BNL   X05$F00X                EXIT IF AT END
         MVC   0(1,R2),0(R1)           MOVE INPUT TO FORM NAME AREA
         LA    R1,1(,R1)               BUMP TO NEXT INPUT CHAR
         LA    R2,1(,R2)               BUMP TO NEXT STORE ADDRESS
         BCT   R3,X05$F01              BRANCH TO NEXT CHARACTER
X05$F00X B     X05$I01                 BRANCH TO MAIN INPUT LOOP
***************************************************************
*** PROCESS Q= KEYWORD    (SIMPLE)
***************************************************************
X05$Q00  DS    0H
         OI    $DPSWTCH,$DPSWQUE       Q= OPERAND FOUND
         MVC   $DPQUEUE,2(R1)          MOVE INPUT TO STORE AREA
         B     X05$I01                 RETURN TO MAIN INPUT LOOP
***************************************************************
*** PROCESS R= KEYWORD
*
*  (STOLEN FROM JES2 MODS TAPE -- $LF COMMAND -- NORTHWESTERN BANK)
*
*    RANGES ALLOWED  -    ONLY ASCENDING RANGES ARE PERMITTED
*    --------------
*    NNNNNRNNNN (-RMMMM)
*    NNNN.RNNNN (-RMMMM)
*    NAME.RNNNN (-RMMMM)
*                      -  RANGE OF REMOTES AT A GIVEN NODE
*                        (NAME IS 8-BYTE EBCDIC FROM A DESTID CARD
*    NNNNN(-NMMMM)     -  RANGE OF ALL REMOTES/UNITS AT GIVEN NODE
*    UNNNN(-UMMMM)     -  RANGE OF UNITS AT THE LOCAL NODE ONLY
*    RNNNN(-RMMMM)     -  RANGE OF REMOTES AT THE LOCAL NODE ONLY
*    NAME1(-NAME2)     -  AS ANY ONE OF THE ABOVE, BUT NO OTHERS
*    LOCAL             -  ALL SPECIAL LOCAL
*
***********************************************************************
X05$R00  L     R3,0(,R5)           POINT TO OPERAND
         LA    R3,2(,R3)           INCREMENT PAST 'R='
         SLR   R1,R1               SET ZERO LENGTH
         LR    R4,R3               SAVE START OF OPERAND
         OI    $DPSWTCH,$DPSWRMT       R= OPERAND FOUND
         MVC   $DPDST11,=CL10' '   BLANK DEST1 PART1
         MVC   $DPDST12,=CL10' '   BLANK DEST1 PART2
         MVC   $DPDST21,=CL10' '   BLANK DEST2 PART1
X05$R01  CLI    0(R4),C'-'         END OF FIRST OPERAND
         BE    X05$R03             YES, BRANCH
         CLI   0(R4),C','          END OF LAST OPERAND
         BE    X05$R03             YES, BRANCH
         CLI   0(R4),C' '          END OF LAST OPERAND
         BE    X05$R03             YES, BRANCH
         CLI   0(R4),C'.'          TWO PART DESTINATION
         BE    X05$R02             YES, BRANCH
         LA    R4,1(,R4)           INCREMENT TO NEXT CHAR OF DEST
         LA    R1,1(,R1)           ADD 1 TO LENGTH
         B     X05$R01             LOOP UNTIL DONE
X05$R02  OI    $DPSWTCH,TWOPART    SET TWO PART DEST INDICATION
         CLI   $DPDST11,C' '       HAS FIRST ALREADY BEEN SPECIFIED
         BNE   X05$INVL            YES, ERROR
X05$R03  LTR   R1,R1               CHECK LENGTH OF DEST
         BZ    X05$INVL            ZERO, ERROR
         CH    R1,=H'10'           CHECK LENGTH OF DEST
         BH    X05$INVL            GREATER THAN 10, ERROR
         BCTR  R1,0                MAKE MACHINE LENGTH
         CLI   $DPDST11,C' '       HAS PART1 ALREADY BEEN SPECIFIED
         BNE   X05$R04             YES, BRANCH
         EX    R1,MVC$D11          MOVE DEST1 PART1
         B     X05$R06             GET OUT
X05$R04  TM    $DPSWTCH,TWOPART    SEE IF TWO PART DEST INDICATION
         BZ    X05$R05             NO, BRANCH
         CLI   $DPDST12,C' '       SEE IF PART2 ALREADY BEEN SPECIFIED
         BNE   X05$R05             YES, THIS IS THE SECOND DEST
         EX    R1,MVC$D12          MOVE DEST1 PART2
         B     X05$R06             GET OUT
X05$R05  CLI   $DPDST21,C' '       SEE IF DEST2 ALREADY BEEN SPECIFIED
         BNE   X05$INVL            YES, ERROR
         EX    R1,MVC$D21          MOVE DEST2 PART1
         B     X05$R06             GET OUT
MVC$D11  MVC   $DPDST11(0),0(R3)   MOVE DEST1 PART1   *EXECUTE*
MVC$D12  MVC   $DPDST12(0),0(R3)   MOVE DEST1 PART2   *EXECUTE*
MVC$D21  MVC   $DPDST21(0),0(R3)   MOVE DEST2 PART1   *EXECUTE*
X05$R06  CLI   0(R4),C'-'          SEE IF DESTINATION RANGE SPECIFIED
         BE    X05$R07             YES, BRANCH
         CLI   0(R4),C'.'          SEE IF TWO PART DEST SPECIFIED
         BE    X05$R07             YES, BRANCH
         B     X05$R08             GO CONVERT DEST TO ROUTE CODES
X05$R07  LA    R4,1(,R4)           INCREMENT PAST '-' OR '.'
         LR    R3,R4               SAVE START ADDRESS
         SLR   R1,R1               RESET LENGTH TO ZERO
         B     X05$R01             LOOP FOR NEXT DESTINATION
X05$R08  MVC   COMDWORK(2),COMJNOD SET DEFAULT NODE
         $DEST $DPDST11,COMDWORK,LEN=10 CONVERT DEST1 PART1
         BZ    X05$INVL            BAD DEST, ERROR
         ST    R1,$DPRNLO          SAVE ROUTE CODE
         CLI   $DPDST12,C' '       CHECK IF TWO PART DEST
         BE    X05$R09             NO, BRANCH
         CLM   R1,B'0011',$ZEROES  SEE IF NODAL DESTINATION ONLY
         BNE   X05$INVL            NO, ERROR
         CLM   R1,B'1100',$ZEROES  SEE IF NODE NUMBER SET
         BE    X05$INVL            NO, ERROR
         ST    R1,COMDWORK         SET DEFAULT NODE FOR SECOND PART
         $DEST $DPDST12,COMDWORK,LEN=10 CONVERT DEST1 PART2
         BZ    X05$INVL            BAD DEST, ERROR
         ST    R1,$DPRNLO          SAVE ROUTE CODE
         CLM   R1,B'1100',COMDWORK MAKE SURE NODE DEFAULTED
         BNE   X05$INVL            NO, ERROR
X05$R09  MVC   $DPRNHI,$DPRNLO     SET DEST RANGE TO EQUAL VALUES
         CLI   $DPDST21,C' '       WAS DEST RANGE SPECIFIED
         BE    X05$R00X            NO, BRANCH
         $DEST $DPDST21,COMDWORK,LEN=10 CONVERT DEST2 PART1
         BZ    X05$INVL            BAD DEST, ERROR
         ST    R1,$DPRNHI          SAVE ROUTE CODE
         CLC   $DPRNHI,$DPRNLO     CHECK FOR ASCENDING RANGE
         BL    X05$INVL            NO, ERROR
X05$R00X B     X05$I01             LOOP TO NEXT SPECIFICATION
***************************************************************
*** PROCESS J= KEYWORD
***************************************************************
X05$J00  DS    0H
         OI    $DPSWTCH,$DPSWJRG       J= OPERAND FOUND
         CLI   3(R1),C'0'              SEE IF VALID JOB NUMBER
         BL    X05$INVL                BRANCH IF INVALID
         CLI   3(R1),C'9'              SEE IF VALID JOB NUMBER
         BH    X05$INVL                BRANCH IF INVALID
         SPACE 1
         CLI   2(R1),C'J'              IF JOB (J=J123)
         BE    X05$J01                  BRANCH TO CONVERT TO BINARY
         CLI   2(R1),C'S'              IF STC (J=S123)
         BE    X05$J01                  BRANCH
         CLI   2(R1),C'T'              TSO USER (J=T123)?
         BNE   X05$INVL                 BRANCH TO INVALID IF NOT TSO
         SPACE 1
X05$J01  LA    R1,3(,R1)               BUMP PAST J=J OF J=JXXX
         L     R4,4(,R5)               R4 = A(NEXT OPERAND)
         BCTR  R4,0                    R4 = A(DELIMITER)
         SLR   R0,R0                   CLEAR R0
         SLR   R15,R15                 CLEAR R15
         ST    R0,COMFWORK             CLEAR FULL WORK AREA
         SPACE 1
X05$J02  MVN   COMFWORK+1(1),0(R1)     LOOP - MOVE NUMERIC PORTION
         MH    R0,=H'10'               MULTIPLY FOR TENS
         AH    R0,COMFWORK             ADD UNITS
         CH    R0,=H'9999'             SEE IF JOB NUMBER TOO HIGH
         BH    X05$INVL                BRANCH TO ERROR IF TOO HIGH
X05$J03  LA    R1,1(,R1)               BUMP TO NEXT INPUT CHAR
         CLR   R1,R4                   IF AT END OF OPERAND
         BNL   X05$J05                  BRANCH OUT OF LOOP
         CLI   0(R1),C'0'              SEE IF VALID NUMBER
         BL    X05$J04                  BRANCH TO SEE IF CHAR IS '-'
         CLI   0(R1),C'9'              SEE IF VALID NUMBER
         BH    X05$INVL                 BRANCH IF INVALID NUMBER
         B     X05$J02                 PROCESS THIS VALID NUMBER
X05$J04  CLI   0(R1),C'-'              SEE IF LOW-HIGH RANGE SPECIFIED
         BNE   X05$INVL                 BRANCH TO ERROR IF NOT
         LTR   R15,R15                 SEE IF WE'VE BEEN HERE BEFORE
         BNZ   X05$INVL                 BRANCH TO ERROR IF WE HAVE
         LR    R15,R0                  PUT LOW RANGE IN R15
         SLR   R0,R0                   CLEAR R0
         B     X05$J03                 CHECK OUT NEXT CHARACTER
         SPACE 1
X05$J05  LTR   R15,R15                 SEE IF LOW-HIGH RANGE SPECIFIED
         BNZ   X05$J06                 BRANCH IF BOTH MAY BE SPECIFIED
         XR    R15,R0                  SWITCH R15 AND R0 CONTENTS
         XR    R0,R15                       SO R15 HAS LOW
         XR    R15,R0                            RANGE VALUE
X05$J06  STH   R15,$DPJOBL             STORE LOW RANGE JOB NUMBER
         STH   R0,$DPJOBH              STORE HIGH RANGE JOB NUMBER
         SPACE 1
         B     X05$I01                 BRANCH TO MAIN INPUT LOOP
         EJECT
***************************************************************
*** OUTPUT ROUTINES
***************************************************************
QTAB     DC    C'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',2X'FF'
X05$O00  DS    0H
         TM    COMFLAG,CMBFLAGW        THIS REMOTE WORKSTATION
         BO    X05$O00A                YES, THEN NO OPERANDS REQUIRED
         TM    $DPSWTCH,$DPSWOPS       WERE ANY OPERANDS SPECIFIED?
         BZ    X05$INVL                NO, TELL OPER SORRY
X05$O00A L     R10,$JOTABLE            ADDRESSABILITY TO JOT
         USING JOTDSECT,R10
         LA    R9,QTAB-1               A(QUEUE NAMES - 1)
***************************************************************
*** FIND QUEUE HEADER FOR LOCAL AND REMOTE QUEUES
***************************************************************
X05$O01  LA    R9,1(,R9)               BUMP TO NEXT QUEUE NAME
         CLI   0(R9),X'FF'             IF AT END,
         BE    X05$DONE                   WE ARE DONE!!!
        $#JOE  Q=(R9),R=2,DEST=LOC     GET ADDRESS OF LOCAL JOE HEADER
         BAL   R5,X05$O02              GO PROCESS LOCAL QUEUE
        $#JOE  Q=(R9),R=2,DEST=RMT     GET ADDRESS OF REMOTE JOE HEADER
         BAL   R5,X05$O02              GO PROCESS REMOTE QUEUE
         B     X05$O01                 LOOP TO GET NEXT QUEUE NAME
         USING JOEDSECT,R2
***************************************************************
*** STUMBLE THRU ALL JOES OF THIS PARTICULAR QUEUE (R2)
***************************************************************
X05$O02  LA    R2,0(,R2)               CLEAR HIGH BYTE
         ICM   R2,B'0111',JOENEXTB     GET OFFSET OF NEXT JOE
         BZR   R5                      BR TO NEXT Q IF LAST JOE IN Q
         ALR   R2,R10                  ADD OFFSET TO JOT
         TM    JOEFLAG,$JOEBUSY        SEE IF JOE IS BUSY RIGHT NOW
         BNZ   X05$O02                  BRANCH TO NEXT IF BEING PRINTED
*
*** CHECK TO SEE IF QUEUE WAS SPECIFIED
*
         CLI   $DPQUEUE,X'00'          SEE IF QUEUE SPECIFIED
         BE    X05$O03                  BRANCH AROUND FOR ALL QUEUES
         CLC   JOECURCL,$DPQUEUE       ARE WE IN THE QUEUE WE WANT
         BNE   X05$O02                  BRANCH IF NOT
*
*** CHECK TO SEE IF REMOTE RANGE SPECIFIED
*
X05$O03  CLC   JOEROUT,$DPRNLO         SEE IF WITHIN ROUTE RANGE
         BL    X05$O02                  BRANCH IF NOT
         CLC   JOEROUT,$DPRNHI         SEE IF WITHIN ROUTE RANGE
         BH    X05$O02                  BRANCH IF NOT
***************************************************************
*** GET CHARACTERISTIC JOE FOR FORM NAME (R3)
***************************************************************
         LA    R3,0(,R3)               CLEAR HIGH BYTE
         ICM   R3,B'0111',JOECHARB     GET OFFSET OF CHARACTERISTIC JOE
         BZ    X05$O02                 GET NEXT JOE IF NO CHAR JOE
         ALR   R3,R10                  GET OFFSET INTO JOT
         CLI   $DPFORM,C' '            SEE IF FORM SPECIFIED
         BE    X05$O04                  BRANCH AROUND FOR ALL FORMS
         CLC   $DPFORM,JOEFORM-JOEDSECT(R3)  SEE IF FORM MATCHES
         BNE   X05$O02                 GET NEXT JOE IN QUEUE IF NOT
***************************************************************
*** GET JQE FOR JOB NUMBER AND NAME (R4)
***************************************************************
         USING JQEDSECT,R4
X05$O04  LA    R4,0(,R4)               CLEAR HIGH BYTE
         ICM   R4,B'0111',JOEJQEB      GET JQE OFFSET
         BZ    X05$O02                 GET NEXT JOE IF NO JQE
         AL    R4,$JOBQPTR             GET ADDRESS OF PROPER JQE
         CLC   $DPJOBL,=H'0'           SEE IF NO JOB SPECIFIED
         BE    X05$O06                  BRANCH FOR ALL JOBS
         CLC   $DPJOBH,=H'0'           SEE IF HIGH RANGE SPECIFIED
         BE    X05$O05                  BRANCH IF NOT RANGE REQUEST
         CLC   $DPJOBH,JQEJOBNO        SEE IF > RANGE
         BL    X05$O02                  GET NXT JOE IF TOO HIGH
         CLC   $DPJOBL,JQEJOBNO        SEE IF < RANGE
         BH    X05$O02                  GET NXT JOE IF TOO LOW
         B     X05$O06                  CONTINUE IF PASSED TEST
X05$O05  CLC   $DPJOBL,JQEJOBNO        SEE IF JOB # MATCH
         BNE   X05$O02                  GET NEXT JOE IF NO MATCH
         EJECT
***************************************************************
*** FORMAT MESSAGE FOR WRITE TO OPERATOR
***************************************************************
X05$O06  MVC   $DPOLINE(L'X05$MSG),X05$MSG    MOVE IN SKELETON MESSAGE
*
*** MOVE IN JOB NAME FROM JQE (R4)
*
         MVC   $DPOJN,JQEJNAME                MOVE IN JOB NAME
*
*** MOVE IN JOB NUMBER FORM JQE (R4)
*
         SLR   R1,R1                          CLEAR R1 FOR WORK
         LH    R1,JQEJOBNO                    GET BINARY HASP JOB #
         TM    JQEFLAG3,QUEJOB                SEE IF JOB
         BZ    X05$O06A                       BRANCH IF JOB
         MVC   $DPOJ#(3),=CL3'STC'            MOVE IN STC
         TM    JQEFLAG3,QUESTC                SEE IF STC
         BO    X05$O06A                       BRANCH IF STC
         MVC   $DPOJ#(3),=CL3'TSU'            MUST BE TSO USER
X05$O06A CVD   R1,COMDWORK                    PUT IN LOW END OF DWORK
         MVC   COMDWORK-1(6),=X'402020202120' PUT EDIT MASK IN HIGH END
         ED    COMDWORK-1(6),COMDWORK+5       EDIT FROM LOW TO HIGH
         MVC   $DPOJ#+3(5),COMDWORK           MOVE IN JOB #
         SPACE 1
* SET JOB HELD (HJ) INDICATOR IF APPLICABLE
         TM    JQEFLAGS,QUEHOLDA+QUEHOLD1     JOB HELD?
         BZ    *+10                           NO
         MVC   $DPOHJ,=C'H'                   INDICATE JOB IS HELD
         DROP  R4
*
*** MOVE IN FORM NAME FORM CHARACTERISTIC JOE (R3)
*
         MVC   $DPOF,JOEFORM-JOEDSECT(R3)  MOVE IN FORM NAME
*
*** MOVE IN QUEUE NAME FROM JOE (R2)
*
         MVC   $DPOQ,JOECURCL          MOVE IN QUEUE CLASS
*
*** MOVE IN PRIORITY FROM JOE (R2)
*
         LH    R1,JOEPRIO              GET JOE PRIORITY
         SRA   R1,4                    BASE OFF 15 MAX
         CVD   R1,COMDWORK             CONVERT TO DECIMAL
         MVC   $DPOP,=X'40212020'
         ED    $DPOP,COMDWORK+6   PUT PRIO INTO MSG
         MVC   $DPOP(2),=C'P='
         CLI   $DPOP+2,C'0'
         BNE   *+8
         MVI   $DPOP+2,C' '      MAKE PRIO MORE REDABLE
*
*** MOVE IN GROUP HELD INDICATOR FROM JOE (R2)
*
         TM    JOEFLAG2,$JOESLEC       IS THIS JOE (GROUP) SELECTABLE
         BZ    *+10                    YES
         MVC   $DPOHG,=C'NS'           INDICATE THIS GROUP IS HELD
*
*** MOVE IN REMOTE NAME FROM JOE (R2)
*
         LA    R1,$DPOR                R1 = A(REMOTE MESSAGE FIELD)
         SLR   R0,R0                   R0 = ZERO
         CLC   $OWNNODE,JOERNODE       IS THIS OUR NODE
         BE    X05$O06C                YES, DO NOT SHOW NODE NUMBER
         MVI   0(R1),C'N'              INDICATE NODE IN MESSAGE
         ICM   R0,B'0011',JOERNODE     GET NODE NUMBER
         BNZ   X05$O06D                SKIP IF NOT SPECIAL UNIT
         MVI   0(R1),C'U'              REPLACE R=R WITH R=U
X05$O06C ICM   R0,B'0011',JOEREMOT     GET REMOTE NUMBER
         BNZ   X05$O06D                CONVERT IT IF REMOTE
         MVC   0(5,R1),=CL5'LOCAL'     ELSE SAY IT IS LOCAL
         B     X05$O07                 AND CONTINUE
X05$O06D CVD   R0,COMDWORK             CONVERT TO DECIMAL
         UNPK  1(5,R1),COMDWORK        AND CONVERT TO READABLE
         OI    5(R1),C'0'              SET ZONE
X05$O06E CLI   1(R1),C'0'              SEE IF LEADING ZEROS
         BNE   X05$O06F                CONTINUE IF NOT
         MVC   1(5,R1),2(R1)           MOVE NUMBER LEFT
         B     X05$O06E                LOOP IT
X05$O06F CLI   0(R1),C'N'              SEE IF NODE PUT OUT
         BNE   X05$O07                 CONTINUE IF NOT
         ICM   R0,B'0011',JOEREMOT     GET REMOTE NUMBER
         BZ    X05$O07                 CONTINUE IF NO REMOTE
X05$O06G LA    R1,1(,R1)               BUMP TO NEXT CHAR
         CLI   R1,C' '                 IS IT BLANK
         BNE   X05$O06G                NO, LOOK SOME MORE
         MVI   0(R1),C'R'              MOVE IN REMOTE
         B     X05$O06D                DO IT AGAIN
*
*** MOVE IN NUMBER OF LINES FROM JOE (R2)
*
X05$O07  DS    0H
         L     R0,JOERECCT             GET RECORD COUNT
         TM    JOEFLAG,$JOECKV         SEE IF SOME PRINTED ALREADY
         BNO   X05$O06B                BRANCH IF NONE PRINTED
         S     R0,JOEWRECN             SUBTRACT LINES PRINTED
         BP    X05$O06B                BRANCH IF LINES LEFT > 0
         SLR   R0,R0                   MAKE LINES LEFT = 0
X05$O06B CVD   R0,COMDWORK             CONVERT TO DECIMAL (CVD)
         MVC   $DPOL#,=X'40206B2020206B202120'  PUT IN EDIT MASK
         ED    $DPOL#,COMDWORK+4                  PUT OUT LINES
         SPACE 1
***************************************************************
*** DO THE WRITE TO OPERATOR FROM $COMWORK COMMAND AREA
***************************************************************
         BAL   R14,CHKAREA             GET AREA FOR MCS DISPLAY
         LA    R0,X05$MSGL             GET X05$MSG LENGTH
         LA    R1,$DPOLINE             R1 = A(THE MESSAGE)
        $CWTO  MSG=(R1),L=(R0),MSGID=999,JOB=YES
         SPACE 1
         CP    $WORKLCT,=P'50'
         BH    X05$XIT1
         AP    $WORKLCT,=P'1'
         B     X05$O02                 LOOP FOR NEXT JOE IN QUEUE
         SPACE 1
*********************************************************************
****************IF YOU CHANGE THIS MESSAGE, CHANGE THE DSECT TOO!****
X05$MSG DC  C'JOB##### JXXXXXXX Q=X F=XXXXXXX P=XX RXXXX   0,000,000   X
                 '
X05$MSGL EQU *-X05$MSG
*********************************************************************
         SPACE 1
         DROP  R2
         EJECT
***************************************************************
*** ALL DONE
***************************************************************
X05$DONE BAL   R14,CHKAREA             GET AREA FOR MCS DISPLAY
         $CWTO MSG='$DP DISPLAY COMPLETED',MSGID=999
         B     X05$RC8                 EXIT RC=8
***************************************************************
*** MAX LINE DISPLAY > 50
***************************************************************
X05$XIT1 BAL   R14,CHKAREA             GET AREA FOR MCS DISPLAY
         $CWTO MSG='$DP DISPLAY COMPLETED - 50 JOBS LISTED',MSGID=999
         B     X05$RC8                 EXIT RC=8
***************************************************************
*** ERROR ERROR
***************************************************************
X05$INVL L     R1,0(,R5)               GET ADDRESS OF CURRENT KEYWORD
         MVC   COMMAND(2),0(R1)        PUT CURRENT KEYWORD IN MSG
         MVC   COMMAND+2(L'X05$EMSG),X05$EMSG
         LA    R0,X05$EMSL             SAVE LENGTH OF MSG
        $CWTO  L=(R0),MSGID=999
         B     X05$RC8                 EXIT RC=8
         SPACE 1
X05$EMSG DC  C' INVALID OR MISSING OPERAND(S)'
X05$EMSL EQU *-X05$EMSG+2
***************************************************************
*** IF JES2 IS DRAINING, SAY SO THEN EXIT
***************************************************************
X05$$DA  DS    0H
         BAL   R4,X05$$DAR
         B     X05$RC00
X05$$DAR DS    0H
         CLC   $USER4(4),=F'0'
         BNE   X05$$DAX
         TM    $STATUS,$DRAINED        SYSTEM DRAINING ?
         BNOR  R4                      NO, EXIT
         WTO   'HASP999 **** JES2 IS DRAINING ****',DESC=(2),          X
               ROUTCDE=(1,2,3,5,7,8)
         ST    R1,$USER4
X05$$DAX BR    R4
***************************************************************
*** EXIT ROUTINES
***************************************************************
X05$RC00 DS    0H
         BAL   R4,X05$$DAR
         SLR   R15,R15                 EXIT WITH ZERO RETURN CODE
         B     X05$RTRN
         SPACE 1
X05$RC8  DS    0H
        $FREEBUF (R8)                  FREE THE WORK AREA
         BAL   R4,X05$$DAR
         LA    R15,8
         B     X05$RTRN
         SPACE 1
X05$RTRN DS    0H                       RETURN WITH RC IN R15
         $RETURN RC=(R15)               RETURN WITH RC IN R15
         SPACE 2
         EJECT
CHKAREA  DS    0H                     CHECK FOR MCS AREA
*
*  METHOD OF OPERATION:
*  GET THE ADDRESS OF THE EXTENDED COM PCE FROM THE HCT.
*  THIS AREA CONATAINS A TABLE THAT HAS DATA ABOUT MCS CONSOLES.
*  THE TABLE CONATINS THE MCS CONSOLE ID, AND THE AREA OR AREAS
*  THAT IT CONTAINS.  PARSE THE TABLE FOR THE CONSOLE ID, AND SEE
*  IF IT HAS AN AREA, IF SO PLACE THE AREA IN THE COMWORK PCE FIELD
*  'COMUCMA', THEN SET THE MLWTO DATA STREAM SWITH ON.
*
*
         TM    COMFLAG,CMBFLAGU       MCS/UCM CONSOLE
         BNOR  R14                    RETURN NOR MCS
         STM   R14,R13,$WORKSAV       SAVE REGS
         L     R15,$COMEXTN           GET ADDRESS OF WORK COM WORK
         USING COMDSECT,R15           AND MAKE ADDRESSABLE
         SR    R1,R1                  CLEAR WORK REG
         SR    R2,R2                  CLEAR WORK REG
         LH    R2,COMOCON             GET NUMBER OF CONSOLES
         M     R2,=F'16'              COMPUTE TABLE LENGTH
         LA    R3,COMRESP(R3)         GET END OF TABLE
         LA    R2,COMRESP             GET BEGINING OF TABLE
CHKAREA1 DS    0H
         CLC   0(1,R2),COMUCM         CHECK FOR CONSOLE ID
         BH    CHKAREAX               EXIT IF HIGH
         BE    CHKAREA2               CHECK FOR CONSOLE AREA
         LA    R2,16(,R2)             UP TABLE ADDRESS
         CR    R2,R3                  END OF TABLE ?
         BH    CHKAREAX               YES, EXIT
         B     CHKAREA1               LOOP AGAIN
CHKAREA2 DS    0H
         CLC   COMVERB(2),=CL2'DA'
         BNE   CHKAREA3
         CLI   0(R2),0
         BE    CHKAREAX
         MVC   COMUCMA,0(R2)          PUT IN AREA
         MVI   COMLINET,X'20'         SET DATA STREAM SWITH(MLWTO)
CHKAREA3 DS    0H
         CLI   3(R2),0                VALID AREA ?
         BE    CHKAREAX               NO, EXIT
         MVC   COMUCMA,3(R2)          PUT IN AREA
         MVI   COMLINET,X'20'         SET DATA STREAM SWITH(MLWTO)
CHKAREAX DS    0H
         LM    R14,R13,$WORKSAV       RESTORE REGS
         BR    R14                    RETURN TO CALLER
         EJECT
         LTORG
X05$LEN  EQU   *-X05$$DP
         DROP  R12,R8,R10
X05$WORK DSECT
$DPRNHI  DS    F                   HIGH REMOTE RANGE
$DPRNLO  DS    F                   LOW REMOTE RANGE
$DPJOBH  DS    H                   HIGH JOB NUMBER RANGE
$DPJOBL  DS    H                   LOW JOB NUMBER RANGE
$DPFORM  DS    CL4                 FORM NAME
$DPQUEUE DS    CL1                 QUEUE NAME
$DPDST11 DS    CL10                DEST 1 PART 1
$DPDST12 DS    CL10                DEST 1 PART 2
$DPDST21 DS    CL10                DEST 2 PART 1
$DPSWTCH DS    XL1                 INDICATOR
$DPSWOPS EQU   X'0F'               ALL OPERANDS
$DPSWQUE EQU   X'01'               Q= OPERAND
$DPSWFRM EQU   X'02'               F= OPERAND
$DPSWJRG EQU   X'04'               J= OPERAND
$DPSWRMT EQU   X'08'               R= OPERAND
TWOPART  EQU   X'80'
*X05$MSG DC  C'JOB##### JXXXXXXX Q=X F=XXXXXXX P=XX RXXXX   0,000,000
*              H NS'
$DPOLINE DS    0CL59
$DPOJ#   DC    CL8'JOB#####',C' '
$DPOJN   DC    CL8'JXXXXXXX',C' ',C'Q='
$DPOQ    DC    CL1'X',C' ',C'F='
$DPOF    DC    CL8'XXXXXXXX'
$DPOP    DC    CL4'P=XX',C' '
$DPOR    DC    CL5'RXXXX',C'  '
$DPOL#   DC    CL10' 0,000,000',C' '
$DPOHJ   DC    C' ',C' '
$DPOHG   DC    C'  '
$WORKSAV DS    18F
$WORKLCT DS    PL3
$OLDCMB  DS    CL256
X05$$DP  CSECT
         EJECT
         $MODEND
         END
