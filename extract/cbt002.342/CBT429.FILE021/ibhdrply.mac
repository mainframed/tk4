         TITLE 'IBHDRPLY --- AUTOMATIC REPLY ROUTINE'
*
*-------------------------------------------------------------------*
*                                                                   *
*     THE PURPOSE OF THIS PROGRAM IS TO AUTOMATICALLY REPLY TO      *
*  WTORS THAT THE USER SECIFIES.  THIS PROGRAM MUST BE RUN AS A     *
*  STARTED TASK, OR AT SUNGARD.                                     *
*                                                                   *
*     THE WTORS THAT YOU WANT TO HAVE AUTOMATIC REPLIES TO ARE      *
*  SPECIFIED IN A DATASET THAT IS POINTED TO BE THE IBHDRIN DCB.    *
*  THE RECORD FORMAT CAN BE FIXED OR FIXED-BLOCKED, AND THE RECORD  *
*  SIZE MUST BE 80.                                                 *
*                                                                   *
*     RECORD LAYOUT:                                                *
*                                                                   *
*      1-8  ----> JOBNAME MASK                                      *
*      9-16 ----> MSG ID MASK                                       *
*      17-80 ---> REPLY                                             *
*                                                                   *
*                                                                   *
*     IBHDRPLY CALCULATES THE LENGTH OF EACH ENTRY IN THE           *
*  RECORD FOR A SPACE TO DETERMINE THE LENGTH OF THE JOBNAME,       *
*  MESSAGE ID MASK, AND THE LENGTH OF THE REPLY.                    *
*                                                                   *
*     EVERY 4 SECONDS IBHDRPLY WAKES UP AND SEARCHES FOR THE        *
*  JOBNAMES INDICATED, THEN HE CALLS IBHWTORG TO CHECK FOR          *
*  OUTSTANDING REPLIES.  IF THE REPLY MATCHES THE MESSAGE ID        *
*  AN INTERNAL REPLY IS GENERATED.                                  *
*                                                                   *
*     IBHDRPLY CAN HANDLE A MXIMUM OF 20 JOB/MSGID COMBINATIONS,    *
*  THIS CAN EASILY BE CHANGED.                                      *
*                                                                   *
*                                                                   *
*-------------------------------------------------------------------*
*                                                                   *
*    THIS MODULE MUST BE APF AUTHORIZED, AND RUNS IN KEY 0.         *
*                                                                   *
*-------------------------------------------------------------------*
*
          SPACE 1
*
*-------------------------------------------------------------------*
*                                                                   *
*                      D I S C L A I M E R                          *
*                                                                   *
*  BELL AND HOWELL COMPANY MAKES NO WARRANTY EXPRESSED OR IMPLIED   *
*  AS TO THE FITNESS OF THIS CODE UNDER YOUR ENVIRONMENT.  THIS     *
*  EXIT SHOULD BE COMPREHENSIVELY TESTED BEFORE IT IS PLACED INTO   *
*  YOUR PRODUCTION ENVIRONMENT.  IF YOU HAVE ANY QUESTIONS CONTACT: *
*                                                                   *
*           ROBERT M. SIRKIS                                        *
*           TECHNICAL SUPPORT SPECIALIST                            *
*           BELL AND HOWELL COMPANY                                 *
*           2231 WEST HOWARD STREET                                 *
*           EVANSTON, IL 60202                                      *
*           (312) 570-4687                                          *
*                                                                   *
*-------------------------------------------------------------------*
*
          SPACE 1
         EJECT
         PRINT GEN
         @     IBHDRPLY
         REGS
TCBJSCB  EQU   X'B4'                     POINTER TO TCBS JSCB
JSCBSSIB EQU   X'13C'                    POINTER TO JSCBS SSIB
SSIBID   EQU   0                         OFFSET TO SSIBID
SSIBJBID EQU   X'0C'                     OFFSET TO SSIB JOBID
SMFPTR   EQU   196                       POINTER TO SMF  CTL BLOCKS
SMFID    EQU   16                        OFFSET TO SMFID
IBHDRPLY ENTER BASE=R12,ID=IBHDRPLY,RENT=YES,WKBYTES=8128
         LA    R2,72(,R13)               GET ADDRESS OF WORK AREA
         USING WORKAREA,R2               MAKE ADDRESSABLE
         EJECT
         PRINT NOGEN
         ST    R2,@WORK                  SAVE ADDRESS OF WORK
         ST    R1,@PARM                  SAVE PARM ADDRESS
         MVC   WTOLNG,=AL2(72)           INIT WTO AREA
         MVC   WTOFLG,=XL2'8400'                     X
         MVC   WTOFLAG2,=XL4'40004000'               X
         MVC   WTOMSG,$SPACES                        X
         MVC   WTOMSG,MSG0                           X
         LA    R1,WTOX                               X
         WTO   MF=(E,(R1))               LET THEM KNOW WE STARTED
*
*        SEE IF THIS IS A STARTED TASK OR WE ARE AT SUNGARD
*
         L     R1,CVTPTR                 GET ADDR OF CVT
         L     R1,SMFPTR(R1)             GET ADDR OF SMF CONTROL BLOCKS
         LTR   R1,R1                     ARE THE THERE
         BZ    NOTAUTH                   NO, CANT CONTINUE
         CLC   =C'SRS',SMFID(R1)         SUNGARD ID ?
         BE    IBHDR00C                  YUP
         L     R1,CVTPTR                 GET ADDR OF CVT
         L     R1,0(R1)                  GET ADDR OF TCB WORDS
         L     R1,4(R1)                  GET OUR TCB
         ICM   R1,15,TCBJSCB(R1)         GET JSCB
         BZ    NOTAUTH                   ABEND
         ICM   R1,15,JSCBSSIB(R1)        GET SSIB
         BZ    NOTAUTH                   ABEND
         CLC   =C'SSIB',SSIBID(R1)       SOMETHING WRONG
         BNE   NOTAUTH                   ABEND
         CLC   =C'STC',SSIBJBID(R1)      STC  ?
         BNE   NOTAUTH                   ABEND
         B     IBHDR00C                  CONTINUE
NOTAUTH  MVC   WTOMSG,MSG1               BUILD MESSGAE INDICATING
         LA    R1,WTOX                   USER IS NOT AUTHORIZED
         WTO   MF=(E,(R1))               AND SEND TO MASTER CONSOLE
         MVC   WTOMSG,MSG5               SEND ABEND MESSAGE
         LA    R1,WTOX                   TO MASTER CONSOLE
         WTO   MF=(E,(R1))               X
         LA    R15,4                     SETUP ABEND CODE
         B     KILL                      AND GO DIE
         EJECT
IBHDR00C DS    0H
*
* BUILD DCB INFORMATION
*
         MVC   IBHDRIN(DMYDCBL),DMYDCB   PRIME DCB
         MVC   OPENX(DMYOPNL),DMYOPEN    PRIME OPEN
         MVC   CLOSEX(DMYCLOSL),DMYCLOS  PRIME CLOSE
         MVC   RJFCBX(DMYRDJFL),DMYRDJF  PRIME RDJFCB
         LA    R1,IBHDRIN
         USING IHADCB,R1
         LA    R15,JFCBDATA              GET ADDRESS OF JFCB AREA
         ST    R15,JFCBTYPE              STORE IN LIST
         MVI   JFCBTYPE,X'87'            READ A JFCB
         LA    R15,JFCBLIST              BUILD EXLST ADDR
         ST    R15,DCBEXLST              PLACE IT IN DCB
         ST    R1,RJFCBX                 REPLACE DCB ADDRS
         MVI   RJFCBX,X'80'              X
         ST    R1,OPENX                  REPLACE DCB ADDRS
         MVI   OPENX,X'80'               X
         ST    R1,CLOSEX                 REPLACE DCB ADDRS
         MVI   CLOSEX,X'80'              X
         LA    R15,RJFCBX                GET ADDRESS OF RDJFCB LIST
         RDJFCB MF=(E,(15))              THE READ THE JFCB
         LTR   R15,R15                   DCB PRESENT ?
         BZ    IBHDR000                  YES
         MVC   WTOMSG,MSG2               BUILD MESSAGE INDICATING
         LA    R1,WTOX                   DCB IS NOT PRESENT
         WTO   MF=(E,(R1))               AND SEND IT
         MVC   WTOMSG,MSG5               BUILD ABEND MESSAGE
         LA    R1,WTOX                   AND SEND IT
         WTO   MF=(E,(R1))               X
         LA    R15,4                     SET UP ABEND CODE
         B     KILL                      AND DIE
         EJECT
IBHDR000 DS    0H
         OPEN  MF=(E,OPENX)              OPEN INPUT DATA SET
         MVC   WTOMSG,MSG6               BUILD MESSAGE WITH INPUT
         MVC   WTOMSG+20(44),JFCBDSNM    DATASET NAME ON IT
         LA    R1,WTOX                   AND DISPLY THE NAME
         WTO   MF=(E,(R1))               OF IT
         MVC   WTOMSG,MSG7               BUILD MESSAGE WITH INPUT
         MVC   WTOMSG+20(8),JFCBELNM     DATASET NAME ON IT
         LA    R1,WTOX                   AND DISPLY THE NAME
         WTO   MF=(E,(R1))               OF IT
         BAL   R10,INIT                  INITIALIZE THE JOB TABLE
         MVI   SYSJOBE,X'FF'             END OF SYSJOBS TABLE
*
*        LOAD IBHWTORG
*
         MODESET KEY=ZERO                GO SUPER MODE
         LOAD  EP=IBHWTORG,ERRET=IBHDRNOL,GLOBAL=(YES,P)
         ST    R0,@WTORG                 SAVE ADDRESS OF MODULE
         MODESET KEY=NZERO               GO PROB MODE
         B     IBHDRLUP
         SPACE 5
IBHDRNOL DS    0H
         LR    R5,R15                    SAVE RETUN CODE
         WTO   'IBHDR001A --- IBHWTORG MODULE NOT FOUND',              X
               ROUTCDE=(1,2,3),DESC=(2)
         LR    R15,R5                    RESTORE RETURN CODE
         B     KILLDUMP                  BURN BABY BURN
         EJECT
IBHDRLUP DS    0H
*
*        FIND THE JES2 POINTERS
*
         L     R1,CVTPTR                GET CVT PTR
         USING CVT,R1                   ADDRESS CVT SYMBOLICALLY
         L     R1,CVTJESCT              GET JESCT PTR
         USING JESCT,R1                 ADDRESS JESCT SYMBOLICALLY
         L     R1,JESSSCT               GET SSCT PTR
         USING SSCT,R1                  ADDRESS SSCT SYMBOLICALLY
         L     R1,SSCTSSVT              GET JES2 SVT
         L     R6,X'2CC'(,R1)           GET SJB ADDRESS
         USING SJBDSECT,R6              ADDRESS SJB ENTRY SYMBOLICALLY
         SR    R3,R3                     CLEAR R3
         DROP  R1
         SPACE 2
         LA    R7,SYSJOBS               GET SYSJOBS TABLE
         USING JOBTAB,R7
IBHDRLU1 DS    0H
         LA    R4,20                    MAX JOB/MSG TABLE SIZE
         LA    R5,JOBTABLE
         USING JOBENT,R5
IBHDRLU2 DS    0H
         CLI   JOBNMLNG,X'FF'            END OF TABLE ?
         BE    GETNXTP                   YES, SEE IF JOBS ACTIVE
         IC    R3,JOBNMLNG               GET LENGTH OF JOBNAME
         EX    R3,JOBSCLC                JOBNAME MATCH
         BE    FLIPITF                   YES, PUT IN SYSJOB TABLE
         LA    R3,83(,R3)                JOBENT TABLE POP
         BCT   R4,IBHDRLU2               LOOP
GETNXTP  DS    0H
         ICM   R6,B'0111',SJBXQCHN+1     GET NEXT PIT
         BNZ   IBHDRLU1                  LOOP IF THERE
         B     IBHDRASC                  GO CHECK ASCBS
JOBSCLC  CLC   JOBNAME(*-*),SJBJOBNM
FLIPITF  DS    0H
         MVC   JOBASID,SJBASID           GET ASID
         MVC   JOBNME,SJBJOBNM           GET JOBNAME
         MVC   JOBID,SJBJOBID            GET JOBID
         LA    R7,18(,R7)                POP SYSJOBS TABLE
         CLI   JOBNME,X'FF'              LAST ENTRY ?
         BE    IBHDRASC                  CHECK ASCBS
         MVC   JOBNME(18),$LOVALU CLEAR NEW ENTRY
         B     IBHDRAS0 AND LOOP
         EJECT
IBHDRASC DS    0H
         MVI   JOBNME,X'00'              SET LOGICAL END OF TABLE
         LA    R7,SYSJOBS                GET ADDR OF SYSJOBS TABLE
         USING JOBTAB,R7
IBHDRAS0 DS    0H
         CLI   JOBNME,X'FF'              END OF TABLE ?
         BE    IBHDRWTG                  GO CHECK FOR REPLIES
         CLI   JOBNME,X'00'              LOGICAL END
         BE    IBHDRWTG                  GO CHECK FOR REPLIES
         L     R1,CVTPTR                 GET CVT PTR
         USING CVT,R1                    ADDRESS CVT SYMBOLICALLY
         L     R1,CVTASVT                GET ASVT PTR
         USING ASVT,R1                   ADDRESS ASVT SYMBOLICALLY
         SPACE 1
IXTASIDN DS    0H
         SR    R6,R6
         LH    R6,JOBASID                GET SAVED ASID
         SLL   R6,2                      MULTIPLY BY 4
         LA    R6,ASVTENTY-4(R6)         POINT AT ASID ENTRY
         TM    0(R6),X'80'               IS THIS ASID AVAILABLE
         BNO   IBHDRAS1                  NOPE, ITS GOOD
         DROP  R1
BADASID  DS    0H
         XC    JOBASID,JOBASID           INDICATE ASID NOT VALID
         LA    R7,18(,R7)                POP TABLE
         B     IBHDRAS0                  GO DO NEXT
         SPACE 1
IBHDRAS1 DS    0H
         L     R6,0(R6)                  GET ASCB PTR
         USING ASCB,R6                   ADDRESS ASCB SYMBOLICALLY
         ICM   R8,B'0111',ASCBJBNI+1     GET JOBNAME PTR
         BZ    BADASID                   WE GOT TROUBLES
         CLC   JOBNME,8(R8)              CORRECT JOB ?
         BNE   BADASID                   NOPE
         LA    R7,18(,R7)                POP TABLE
         B     IBHDRAS0                  AND START AGAIN
         SPACE 1
         EJECT
IBHDRWTG DS    0H
         LA    R7,SYSJOBS                GET SYSJOBS TABLE
IBHDRW00 DS    0H
         CLI   JOBNME,X'FF'              END OF TABLE ?
         BE    IBHDRWAT                  GO WAIT 4 SECONDS
         CLI   JOBNAME,X'00'             END OF TABLE ?
         BE    IBHDRWAT                  GO WAIT 4 SECONDS
         MODESET KEY=ZERO                GO SUPER
         L     R15,@WTORG                GET ADDRESS OF ROUTINE
         LA    R8,JOBID                  GET PARMS
         LA    R9,WTORTEXT                       X
         CALL  (15),((R8),(R9))          AND CALL HIME
         LR    R9,R15                    SAVE RETURN CODE
         MODESET KEY=NZERO               GO PROBLEM
         LTR   R9,R9                     NO WTOR ?
         BNZ   IBHDRW10                  GO CHECK NEXT
         EJECT
*
*        BUILD REPLY
*
         LA    R3,10
         SR    R8,R8
         LA    R6,JOBTABLE
         USING JOBENTRY,R6
IBHDRW02 DS    0H
         IC    R8,JOBNMLNG
         EX    R8,CJOBCLC
         BNE   IBHDRW03
         IC    R8,MSGIDLNG
         EX    R8,CMSGCLC
         BNE   IBHDRW03
         SR    R3,R3
         IC    R3,REPLYLNG
         MVC   CIBBUF(L'$RPLMASK),$RPLMASK
         EX    R3,MVCREPLY
         AH    R3,=H'4'
         STH   R3,CIBLNG
         SR    R0,R0
         MODESET KEY=ZERO,MODE=SUP
         MVC   CIBUFRID(2),WTORTEXT
         LA    R1,CIBCIB
         SVC   34
         MODESET KEY=NZERO,MODE=PROB
         B     IBHDRW10
MVCREPLY MVC   CIBUFRPL(*-*),REPLY
CJOBCLC  CLC   JOBNAME(*-*),JOBNME
CMSGCLC  CLC   MSGID(*-*),WTORMSGI
IBHDRW03 DS    0H
         LA    R6,83(,R6)
         BCT   R3,IBHDRW02
IBHDRW10 DS    0H
         LA    R7,18(R7)        POP TABLE
         B     IBHDRW00         AND DO NEXT
IBHDRWAT DS    0H
         STIMER WAIT,BINTVL=SEC4
         LA    R5,@ANS
         EXTRACT (R5),FIELDS=COMM
         L     R5,@ANS
         USING COMLIST,R5
         L     R3,COMCIBPT
         USING CIBNEXT,R3
         CLI   CIBVERB,CIBSTART
         BNE   SETCOUNT
         QEDIT ORIGIN=COMCIBPT,BLOCK=(R3)
SETCOUNT QEDIT ORIGIN=COMCIBPT,CIBCTR=2
         CLI   CIBVERB,CIBSTOP
         BE    IBHDRPLX
         AP    CNTR2,=P'1'
         CP    CNTR2,=P'225'
         BNH   IBHDRLUP
         ZAP   CNTR2,=P'1'
         WTO   'IBHDRPLY -- STILL ACTIVE',ROUTCDE=(1,2,3,4),           X
               DESC=(2)
         B     IBHDRLUP
IBHDRPLX DS    0H                        EXIT PGM
         MODESET KEY=ZERO
         DELETE EP=IBHWTORG
         MODESET KEY=NZERO
         WTO   'IBHDRPLY -- TERMINATES NORMALLY',ROUTCDE=(1,2,3,4),    X
               DESC=(2)
         SR    R15,R15
         LEAVE RC=(R15)
         EJECT
INIT     DS    0D
         ZAP   CNTR1,=P'1'
         ZAP   CNTR2,=P'0'
         ZAP   CNTR3,=P'0'
         ZAP   CNTR4,=P'0'
         ZAP   CNTR5,=P'0'
         LA    R11,JOBTABLE
         LA    R15,20
LOOP1    DS    0H
         USING JOBENT,R11
         MVI   JOBNMLNG,X'FF'
         MVI   MSGIDLNG,X'FF'
         MVI   REPLYLNG,X'FF'
         MVC   JOBNAME,$SPACES
         MVC   MSGID,$SPACES
         MVC   REPLY,$SPACES
         LA    R11,83(,R11)
         BCT   R15,LOOP1
         LA    R11,JOBTABLE
GETCARD  GET   IBHDRIN
         LR    R5,R1
         CLI   0(R5),C'*'
         BE    GETCARD
         CLC   0(8,R5),$SPACES
         BE    GETCARD
         CLC   8(8,R5),$SPACES
         BE    GETCARD
         CLC   16(64,R5),$SPACES
         BE    GETCARD
         CP    CNTR1,=P'20'
         BL    GETCARD1
GETCARD1 LA    R3,8
         BAL   R4,PARS
         STC   R3,JOBNMLNG
         EX    R3,JOBMVC
         B     MSG
JOBMVC   MVC   JOBNAME(*-*),0(R5)
MSG      LA    R3,8
         LA    R5,8(,R5)
         BAL   R4,PARS
         STC   R3,MSGIDLNG
         EX    R3,MSGMVC
         B     RPLY
MSGMVC   MVC   MSGID(*-*),0(R5)
RPLY     LA    R3,64
         LA    R5,8(,R5)
         BAL   R4,PARS
         STC   R3,REPLYLNG  '
         EX    R3,RPLYMVC
         AP    CNTR1,=P'1'
         LA    R11,83(,R11)
         B     GETCARD
RPLYMVC  MVC   REPLY(*-*),0(R5)
PARS     LR    R6,R5                     SAVE ADDRESS OF DATA TO PARSE
         LR    R7,R3                     SAVE LOOP COUNTER
PARS1    CLI   0(R6),X'40'               SPACE ?
         BE    PARS2                     YES COMPUTE LENGTH
         LA    R6,1(,R6)                 POP DATA ADDRESS UP BY 1
         BCT   R3,PARS1                  AND LOOP
PARS2    DS    0H
         SR    R7,R3                     COMPUTE LENGTH
         BCTR  R7,0                      AND SUBTRACT 1 FOR MACHINE
         LR    R3,R7                     PUT RESULTS IN R3
         BR    R4                        AND RETURN
INITXIT  DS    0H
         CLOSE MF=(E,CLOSEX)
WTOLUP   DS    0H
         MVC   WTOMSG,MSG3
         LA    R1,WTOX
         WTO   MF=(E,(R1))
         LA    R3,10
         LA    R11,JOBTABLE
WTOLUP1  DS    0H
         MVC   WTOMSG+12(8),$SPACES
         MVC   WTOMSG+28(8),$SPACES
         MVC   WTOMSG+38(8),$SPACES
         CLI   JOBNMLNG,X'FF'
         BE    INITRET
         IC    R7,JOBNMLNG
         EX    R7,JOBMV1
         IC    R7,MSGIDLNG
         EX    R7,MSGIDMV1
         MVC   WTOMSG+35(16),REPLY
         LA    R1,WTOX
         WTO   MF=(E,(R1))
         LA    R11,83(,R11)
         BCT   R3,WTOLUP1
INITRET  BR    R10
JOBMV1   MVC   WTOMSG+12(*-*),JOBNAME
MSGIDMV1 MVC   WTOMSG+24(*-*),MSGID
         PRINT GEN
         DC    C'IBDRPLY_&SYSDATE_&SYSTIME'
         PRINT NOGEN
KILL     ABEND (R15)
KILLDUMP ABEND (R15),DUMP
SEC4     DC    A(60*4)
DMYDCB   DCB   DSORG=PS,DDNAME=IBHDRIN,MACRF=(GL),EODAD=INITXIT
DMYDCBL  EQU   *-DMYDCB
DMYOPEN  OPEN  (DMYDCB,(INPUT)),TYPE=J,MF=L
DMYOPNL  EQU   *-DMYOPEN
DMYCLOS  CLOSE (DMYDCB),MF=L
DMYCLOSL EQU   *-DMYCLOS
DMYRDJF  RDJFCB DMYDCB,MF=L
DMYRDJFL EQU   *-DMYRDJF
$SPACES  DC    CL80' '
$LOVALU  DC    20XL1'00'
$RPLMASK DC    C'R XX,'
MSG0     DC    CL70'IBHDRPLY -- STARTED'
MSG1     DC    CL70'IBHDRPLY -- UNAUTHORIZED USE'
MSG2     DC    CL70'IBHDRPLY -- IBHDRIN DD STATEMENT MISSING'
MSG3     DC    CL70'IBHDRPLY -- JOBNAME       MSGID     REPLY'
MSG4     DC    CL70'IBHDRPLY -- TERMINATES NORMALLY'
MSG5     DC    CL70'IBHDRPLY -- ABENDED'
MSG6     DC    CL70'IBHDRPLY -- PARMLIB='
MSG7     DC    CL70'IBHDRPLY -- MEMBER='
         LTORG ,
*
         TITLE 'IBHDRPLY ---- WORKAREA DSECT'
WORKAREA DSECT
         @     WORKAREA
@WORK    DS    F                         ADDRESS OF WORK AREA
@WTORG   DS    F
@ANS     DS    F
@DATAREA DS    4F
CIBCIB   DS    0F
CIBLNG   DS    H
CIBLL    DS    H
CIBBUF   DS    CL69
CIBUFRID EQU   CIBBUF+2
CIBUFRPL EQU   CIBBUF+6
SAVE18F  DS    18F                       18 FULLWORD SAVE AREA
CNTR1    DS    PL3
CNTR2    DS    PL3
CNTR3    DS    PL3
CNTR4    DS    PL3
CNTR5    DS    PL3
WTORTEXT DS    CL130
WTORMSGI EQU   WTORTEXT+6
WTOX     DS    0F
WTOLNG   DS    H
WTOFLG   DS    H
WTOMSG   DS    CL70
WTOFLAG2 DS    XL4
@PARM    DS    F                         ADDRESS OF PARM AREA
OPENX    OPEN  (DMYDCB,(INPUT)),TYPE=J,MF=L
CLOSEX   CLOSE (DMYDCB),MF=L
RJFCBX   RDJFCB DMYDCB,MF=L
IBHDRIN  DCB   DSORG=PS,DDNAME=IBHDRIN,MACRF=(GL),EODAD=INITXIT
JFCBLIST DS    0F
JFCBTYPE DS    X
@JFCBDAT DS    AL3
JFCBDATA DS    0F
         IEFJFCBN LIST=YES
JOBTABLE DS    20CL83
         DS    0F
SYSJOBS  DS    20CL18
SYSJOBE  DS    X
         EJECT
JOBENT   DSECT
JOBENTRY DS    0CL83
JOBNMLNG DS    X                         LENGTH OF JOBNAME MASK
JOBNAME  DS    CL8
MSGIDLNG DS    X                         LENGTH OF MESSAGE ID
MSGID    DS    CL8
REPLYLNG DS    X                         LENGTH OF REPLY
REPLY    DS    CL64
JOBTAB   DSECT
JOBNME   DS    CL8
JOBID    DS    CL8
JOBASID  DS    H
         PRINT NOGEN
         DCBD  DEVD=DA,DSORG=PS
**       S Y S T E M   M A P P I N G   M A C R O S
         SPACE 2
         IHAASCB
         SPACE 2
         IHAASVT
CVT      DSECT
         CVT   DSECT=YES
         SPACE 2
         IEFJESCT TYPE=DSECT
         SPACE 2
         IEFJSCVT
         SPACE 2
         $SJB
         SPACE
         DSECT
         IEZCOM
         DSECT
         IEZCIB
         END   IBHDRPLY
