**********************************************************************
**********  SMP RELEASE-INDEPENDENT PUT-TAPE TOOLS    ************   *
**********************************************************************
*                                                                    *
*  Documentation  -  S. GOLOB -               - 09/30/87             *
*                                                                    *
*                              SAM GOLOB                             *
*                              (845) 362-1996                        *
*                                                                    *
*                                                                    *
*   This file, which consists of several programs and sample JCL,    *
*     allows the systems programmer to pre-view and index,           *
*     and thoroughly keep track of his PUT tapes BEFORE SMP has      *
*     a chance to look at them.  Full FORFMID capability is          *
*     provided, external to SMP.  Since this processing has          *
*     nothing to do with SMP, it is completely release-independent,  *
*     and can be used with SMP/4 as well as with SMP/E.              *
*                                                                    *
*        *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *        *
*                                                                    *
*   The core of this file is the PUTXREF program from Jerry Lawson   *
*     of the Hartford Insurance Group, which was slightly modified   *
*     by me.  This program sorts all SYSMODS in a SMPPTFIN file      *
*     by owning FMID.  The output of Jerry's PUTXREF program is a    *
*     report showing the FMID name and the sysmods belonging to it   *
*     listed afterwards.  (See FILE 033 of the CBT tape for          *
*     another modification of PUTXREF, which allows selectivity      *
*     by FMID and other criteria.  That one is by Gene Cray of       *
*     the New Jersey Treasury Department in Trenton.)                *
*                                                                    *
*        *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *        *
*                                                                    *
*   My program SMPFMUPV takes the output of the PUTXREF program      *
*     and makes it "inputable" to an SMP job.  Output of SMPFMUPV    *
*     looks like:                                                    *
*                                                                    *
  ./  ADD  NAME=EBB1102
      UY04130 /*  FMID - EBB1102 - FROM PUT TAPE - DONE 09/15/87  */
      UY09531 /*  FMID - EBB1102 - FROM PUT TAPE - DONE 09/15/87  */
      UY10163 /*  FMID - EBB1102 - FROM PUT TAPE - DONE 09/15/87  */
      UY10354 /*  FMID - EBB1102 - FROM PUT TAPE - DONE 09/15/87  */
      UY10882 /*  FMID - EBB1102 - FROM PUT TAPE - DONE 09/15/87  */
  ./  ADD  NAME=EDM1102
      UY10582 /*  FMID - EDM1102 - FROM PUT TAPE - DONE 09/15/87  */
*                                                                    *
*     You can obviously use this as input to another SMP job, and    *
*     this gives you full FORFMID power for each PUT tape.           *
*                                                                    *
*        *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *        *
*                                                                    *
*   The third feature of this processing is my SMPUPD program,       *
*     which allows the breaking up of a SMPPTFIN file into a PDS,    *
*     whose members are the separate SYSMODS.  Support is provided   *
*     for APAR, USERMOD, and FUNCTION sysmods as well as for PTFs.   *
*     This program is a rather quick-and-dirty way of doing things,  *
*     but it gets its job done superbly, and that's what counts.     *
*     Basically, it looks in a file for ++ PTF or ++ APAR or         *
*     ++ USERMOD etc.  It parses for the 7-character sysmod number.  *
*     In the process of making a temporary copy of the SMPPTFIN      *
*     file, it inserts a card in front of each sysmod, with the      *
*     format:                                                        *
  ./  ADD  NAME=sysmdno
*                                                                    *
*     In addition, all "./" strings in columns 1 to 2 of the copied  *
*     sysmod file are changed to "><".  Then the PDSLOAD program     *
*     (from File 316 of the CBT tape) can be used to load all the    *
*     sysmods separately into PDS members, and to convert the "><"   *
*     strings within the sysmods, back to "./" .                     *
*                                                                    *
*   A sample jobstream, called SMPUPDJ in this pds, will show yet    *
*     another step at the end.  It may not be widely publicized      *
*     yet, but the PDS command processor (from FILE 182 of the       *
*     CBT tape) starting with version 8.0, has the capability of     *
*     supplying full ISPF statistics to a source pds member. This    *
*     can also be done in batch mode.  I add a step at the end       *
*     of the jobstream SMPUPDJ which runs TSO in batch, and          *
*     adds ISPF statistics to all the sysmods, so you know how       *
*     many lines each one has.  Once the PTFS or other sysmods       *
*     have been separated, you may inquire about them by browsing    *
*     or editing them individually.  Also, since this jobstream is   *
*     a quick and reproducible process (it takes 3.5 minutes to run  *
*     on my machine), you can leave the output dataset on a work     *
*     pack for a few hours if you're short of permanent disk space.  *
*     Then you can recreate it again the next day.                   *
*                                                                    *
*   One more note.  Sometimes IBM will send out duplicate PTFs       *
*     on the same PUT tape.  This will obviously create deleted      *
*     members on your output library, since the second load of       *
*     a PDS member will delete the first member that has the         *
*     same name.  Therefore, I use another capability of the PDS     *
*     program, which is the RESTORE function to resurrect deleted    *
*     members.  The deleted members are put back under the names     *
*     $PTF0001, $PTF0002, etc. so they can be browsed and compared   *
*     to the "real" ones which had the same name.  (Actually, in a   *
*     RECEIVE job, the deleted version would be received, since it   *
*     occurs first in the file.)  The PDS command in PDS version     *
*     8.0 which does this is:                                        *
*                                                                    *
*        RESTORE $PTF repeat noprompt                                *
*                                                                    *
*   Please browse the sample jobs for their commentary material.     *
*     I would appreciate getting calls and comment from users or     *
*     prospective users of these tools.  This kind of interaction    *
*     leads to improvement and progress, usually.  Thanks much.      *
*                                                                    *
*   Please don't forget to look at Gene Cray's code in File 033.     *
*                                                                    *
*   If you have an SMP4 environment, look at the additional          *
*     tools in File 428.                                             *
*                                                                    *
