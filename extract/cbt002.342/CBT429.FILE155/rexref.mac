/*--REXX REXREF--------------------------------------------------------*
/*                                                                     *
/*   09/15/99 Copied from REXXREF and removed code for cross ref       *
/*            Only good for reformating and restructuring              *
/*            all lines of the program.                                *
/*                                                                     *
/*--REXX REXXREF-------------------------------------------------------*
/** REXXREF - XEDIT macro to reformat and cross reference REXX execs ***
/*^^ **NB**  There are 'NOT' (^) symbols in lines 2, 3, 4, 48, 245,    *
/*^^ **NB**  253, 275, 284, 370, 373, 505, 536, 549, 551, 554, 606,    *
/*^^ **NB**  616, 720, 734                                             *
/*×× **NB**  There are vertical bars (×) in lines 5, 6, 7, 8, 9, 10,   *
/*×× **NB**  37, 95, 96, 157, 199, 200, 208, 400, 403, 433, 435,       *
/*×× **NB**  438, 447, 449, 454, 467, 477, 496, 499, 534, 538, 629,    *
/*×× **NB**  632, 638, 642, 646, 679, 687, 695, 698, 734, 742, 748,    *
/*×× **NB**  751, 788, 797, 801, 865, 868, 874, 876, 879, 895, 899,    *
/*×× **NB**  905, 907, 910, 933, 937, 941, 945, 1021, 1022, 1024       *
/*--REXX REXXREF-------------------------------------------------------*

   Signal Off ERROR; Signal On NOVALUE; Signal On SYNTAX

/**** Get a buffer for garbage collection.  Will be dropped at end *****
/* address command 'MAKEBUF'; buf1 = rc */

/************************** Start of program ***************************
START: Trace n
   Address isredit
   "MACRO (parm) PROCESS"

   "(curline)=line .zcsr"          /* Get the line where the cursor is *
   line.1=curline
   eof.1='OFF'
   Do
      If (eof.1='ON') Then line.1 = line.1 - 1
   End
   start_line = line.1                           /* Line we started on *
   first_line = line.1                     /* Line to begin processing *

/***************** Set various variables and switches ******************
   switch.debug = 0                                   /* Debugging aid *
   debug_cnt = 1
   If (switch.debug) Then Say 'At START'
/* if (cmsflag('CMSTYPE')) then typeflag = 'RT';  else typeflag = 'HT' *
                                 /* Save TYPEFLAG to be restored later *
   rtncode = 0        /* Holds return code to be passed back to system *
   switch.set = 1                      /* For setting switches to TRUE *
   switch.reset = 0
   left_margin = 0
   c_squote = "'"                               /* Character constants *
   c_dquote = '"'
   c_astslash = '*' ×× '/'
   c_slashast = '/' ×× '*'
/** 'keywords.scantok' & 'keywords.primary' are used in 'SCANTOKEN', ***
/************* but defined here for execution efficiency. **************
   keywords.scantok = ' do to end if then else' ,
     ' say iterate leave while until forever' ,
     ' select when otherwise nop' ,
     ' parse upper arg var external source pull push queue' ,
     ' address value arg call drop exit return interpret' ,
     ' signal on off error halt novalue syntax trace' ,
     ' procedure expose by for' ,
     ' numeric digits form scientific engineering fuzz'
   /*
   /*  This code segment was included by Don Hughes, presumably */
   /*  for future expansion. */
   keywords.primary = ' ADDRESS ARG CALL DO DROP EXIT IF',
     ' INTERPRET ITERATE LEAVE NOP NUMERIC PARSE PROCEDURE',
     ' PULL PUSH QUEUE RETURN SAY SELECT SIGNAL',
     ' TRACE UPPER'
   parent.value='ADDRESS PARSE SIGNAL TRACE'
   parent.to='DO';parent.by='DO';parent.for='DO';parent.while='DO'
   parent.until='DO';parent.forever='DO';parent.then='IF SELECT'
   parent.else='IF';parent.digits='NUMERIC';parent.form='NUMERIC'
   parent.scientific='NUMERIC';parent.engineering='NUMERIC'
   parent.fuzz='NUMERIC';parent.arg='PARSE';parent.external='PARSE'
   parent.numeric='PARSE';parent.pull='PARSE';parent.source='PARSE'
   parent.with='PARSE';parent.var='PARSE';parent.expose='PROCEDURE'
   parent.when='SELECT';parent.otherwise='SELECT'
   parent.on='SIGNAL';parent.off='SIGNAL';parent.error='SIGNAL'
   parent.halt='SIGNAL';parent.novalue='SIGNAL';parent.syntax='SIGNAL'
   */

/************ 'keywords.func' is used in routine 'FUNCTION' ************
   keywords.func = ' abbrev abs address arg bitand bitor bitxor' ,
     ' center centre cmsflag compare copies c2d c2x' ,
     ' datatype date delstr delword diag diagrc d2c d2x errortext' ,
     ' externals find format index insert justify lastpos' ,
     ' left length linesize max min overlay pos' ,
     ' queued random reverse right right sign sourceline' ,
     ' space storage strip substr subword symbol time' ,
     ' trace translate trunc userid value verify word' ,
     ' wordindex wordlength words xrange x2c x2d' ,
     ' watrxf '
/* VM/SP Release 6 added the following: */
   keywords.func = keywords.func 'digits form fuzz wordpos' ,
     'dbadjust dbbracket dbcenter dbcentre dbcjustify dbtodbcs dbtosbcs'
     'dbleft dbright dbrleft dbrright dbunbracket dbvalidate dbwidth'

/******* Here are the switches that control the various options ********

   switch.append = switch.reset             /* Append to previous XREF *
   switch.xref = switch.reset              /* Create XREF file;  Print *
   /******* COML = SET => Leave comments alone; RESET => INDENT ********
   switch.coml = switch.set
   /** COMRJUST = SET => Right justify comments. RESET => Leave alone **
   switch.comrjust = switch.set
   switch.variable_case = switch.set           /* Change variable case *
   switch.label_case = switch.set                 /* Change label case *
   switch.function_case = switch.set           /* Change function case *
   switch.keyword_case = switch.set             /* Change keyword case *
   switch.colin = switch.reset  /* Colin's 'standard' for case setting *
   switch.lcc   = switch.set      /* lcc's 'standard' for case setting *
   switch.signalonoffv = 0   /* Signal on×off×value .. being processed *
   switch.noniterativedo = switch.reset
   switch.type = switch.reset     /* Control typing of XREF when done. *

/************** Get right margin for justifying comments ***************
   /* 'COMMAND EXTRACT /LRECL' */
   "(recl)=lrecl"
   lrecl.1=recl
   right_margin = lrecl.1
   If (right_margin>73) Then right_margin = 73
                                             /* 63 is used by EXECUPDT *
   refresh = 1                        /* Issue 'REFRESH' at every line *
   continue_indent = 2     /* Number of spaces to indent continuations *
   thenelse_indent = 2     /* Number of spaces to indent hanging thens *
   indent_thenelse = 0    /* Current value of hanging then/else indent *
   switch.thenelse = switch.reset  /* For processing hanging then/else *
   switch.comment_only = switch.reset
   switch.skip = switch.reset                        /* Skip indenting *
   switch.skipend = switch.reset             /* For non-iterative DO's *
   last_delim = ''               /* Ending delimiter for previous line *
/************************** Search parameters **************************
   switch.search = switch.reset; search_key = ''
   switch.literal = switch.reset            /* last item was a literal *
   searchkey_cnt. = 0                   /* Nesting level of delimiters *
   searchkey_list. = ''            /* Line-number stack for delimiters *

/******** 'com.' variables are also passed to called functions *********
   com.linenum = 0                              /* Current line number *
   com.tokennum = 0                            /* Current token number *
   com.last_key_num = 0                /* Token number of last keyword *
   com.last_keyword = ''                           /* Previous keyword *
   com.last_token = ''                               /* Previous token *
   com.dolist = ''         /* line-number stack for DO's and SELECTS's *
   com.endlist = ''                     /* Line-number stack for END's *
   com.delim = ''                                 /* Current delimiter *
   com.nest = 1                 /* Current nesting level for indenting *
   com.indent = 3                        /* Number of spaces to indent *
   com.offset = 0                                    /* Current offset *

   xref. = 0                                 /* Cross reference tables *

/************************ Check input arguments ************************
   /* parse arg args */
   args=parm           /* From first ISREDIT ststement above(on entry) *
   If ('WORD'(args,1)='?') Then Signal EXPLAIN
/* if (args='' × left(args,1)='(') then args = '1' args */
   If (args='' × 'LEFT'(args,1)='(') Then args = 'All ' args
   If (CAPS('WORD'(args,1))='ALL' ×,
     'LEFT'(CAPS('WORD'(args,1)),4)='ALL(') Then Do
      args = '*' 'SUBSTR'(args,4)
      first_line = 1
      "(lastln) = LINENUM .ZLAST"
      last_line = lastln
   End
/* push args
   'MACRO PARSE 1 TARGET LINE'
   parse pull temp
   if (temp<=0 × temp>2) then signal PARSE_ERROR
   parse pull loc1 len1
   target = substr(args,loc1,len1) */
   Parse Var args target opts
/* opts = ''
   if (temp=2) then do
      parse pull loc1 len1
      opts = space(CAPS(substr(args,loc1,len1)))
   end */
   opts = 'SPACE'(CAPS(opts))
   If (opts<>'') Then Do              /* Ensure options begin with '(' *
      If ('LEFT'(opts,1)='(') Then opts = 'SUBSTR'(opts,2)    /* Strip '
      Else Signal PARSE_ERROR                /* If no '(', then error. *
   End
   valid_opts = ' 3APPEND 5COLIN 5DEBUG 2INDENT 7NODEBUG 3LCC',
     '2LM 2LEFTMARGIN 3NOTYPE 3NOXREF 2REFRESH 2RM 2RIGHTMARGIN',
     '1TYPE 1XREF'
   Do While (opts<>'')
      Parse Var opts . opts 1 optword temp2 .
      optword = GETOPTWORD(optword,valid_opts)
      If (optword='LM') Then optword = 'LEFTMARGIN'
      If (optword='RM') Then optword = 'RIGHTMARGIN'
      Select
         When (optword='APPEND') Then Do
            switch.append = switch.set
         End
         When (optword='COLIN') Then Do
            switch.colin = switch.set
            switch.lcc   = switch.reset
         End
         When (optword='LCC') Then Do
            switch.colin = switch.reset
            switch.lcc   = switch.set
         End
         When (optword='DEBUG') Then Do
            switch.debug = switch.set
         End
         When (optword='INDENT') Then Do
            Parse Var opts com.indent opts        /* Extract argument. *
            If (^'DATATYPE'(com.indent,'N')) Then Do
               Say  "INDENT operand  '"com.indent"'  is not numeric."
               Signal EXIT16                       /* Take error exit. *
            End
         End
         When (optword='LEFTMARGIN') Then Do
            Parse Var opts left_margin opts       /* Extract argument. *
            If (^'DATATYPE'(left_margin,'N')) Then Do
               Say  "LEFTMARGIN operand  '"left_margin"'  is not numeric
               Signal EXIT16                       /* Take error exit. *
            End
            If (left_margin<1) Then Do
               Say  "LEFTMARGIN operand  '"left_margin"'  must be positi
                 "and non-zero."
               Signal EXIT16                       /* Take error exit. *
            End
         End
         When (optword='NODEBUG') Then Do
            switch.debug = switch.reset
         End
         When (optword='NOTYPE') Then Do
            switch.type = switch.reset
         End
         When (optword='NOXREF') Then Do
            switch.xref = switch.reset
         End
         When (optword='REFRESH') Then Do
            Parse Var opts refresh opts           /* Extract argument. *
            If (^'DATATYPE'(refresh,'N')) Then Do
               Say ' REFRESH operand '''refresh'''',
                 'is not numeric.'
               Signal EXIT16                       /* Take error exit. *
            End
            If (refresh<1) Then refresh=99999999    /* 'Never' refresh *
         End
         When (optword='RIGHTMARGIN') Then Do
            Parse Var opts right_margin opts      /* Extract argument. *
            If (^'DATATYPE'(right_margin,'N')) Then Do
               Say ' RIGHTMARGIN operand '''right_margin'''',
                 'is not numeric.'
               Signal EXIT16                       /* Take error exit. *
            End
         End
         When (optword='TYPE') Then Do
            switch.type = switch.set
         End
         When (optword='XREF') Then Do
            switch.xref = switch.set
         End
         Otherwise
         Say ' Invalid option '''optword'''.'
         Signal EXIT16                                        /* Exit. *
      End
   End

/************ Adjust Leftmargin value, if it was specified *************
   If (left_margin>0) Then left_margin = left_margin - com.indent - 1

/*********************** Get the range of lines ************************
/*********************** Setup XEDIT environment ***********************
   got_varcurl = switch.reset        /* XEDIT does not support VARCURL *
   curlmin = 3                        /* First screen line we can use. *
   curlmax = 23                        /* Last screen line we can use. *
   curll = curlmin

/****************** This is the main processing loop *******************
   Do linecnt=first_line To last_line
      If (linecnt=first_line+debug_cnt) Then
        switch.debug = switch.reset
      switch.endtoken = switch.set      /* Check if end is first token *
      switch.comment_only = switch.reset
      "(rawline) = line" linecnt
      raw_line = rawline
      curline.3=raw_line
      If (raw_line='') Then Do
         If (^got_varcurl) Then curll = curll + 1
         Iterate linecnt
      End
      If (^switch.search) Then s = 'STRIP'(raw_line); Else s = raw_line
      com.linenum = linecnt          /* Line number to be used in XREF *
      out_string = ''                     /* Work area for output line *
      com.delim = ''                              /* Current delimiter *
      com.offset = left_margin + com.indent*com.nest,/* Current offset *
        + indent_thenelse
      p. = ''; pindex = 1                     /* Tokenized output line *
      Do While (s<>'')
         If (switch.search) Then Do
            Parse Var s s1 (search_key) s +0
            If (search_key==c_astslash) Then Do
               /************* check for '/./' possibility **************
               Do While (s<>'' & 'RIGHT'(s1,1)='/')
                  /** Search Found an imbedded comment instead of end **
                  Parse Var s +1 s
                  Parse Var s s2 (search_key) s +0
                  s1 = s1'*'s2
               End
               Parse Var s1 . (c_slashast) s2 +0
               Do While (s2<>'')
                  /************* Found an imbedded comment *************
                  searchkey_cnt.search_key = searchkey_cnt.search_key +
                  searchkey_list.search_key = linecnt,
                    searchkey_list.search_key
                  Parse Var s2 (c_slashast) (c_slashast) s2 +0
               End
            End
            p.pindex = p.pindex ×× s1
            If (s<>'') Then Do
               /************** Found the ending delimiter **************
               p.pindex = p.pindex ×× search_key
               s = 'SUBSTR'(s,'LENGTH'(search_key)+1)
               searchkey_cnt.search_key = searchkey_cnt.search_key - 1
               searchkey_list.search_key =,
                 'DELWORD'(searchkey_list.search_key,1,1)
               If (searchkey_cnt.search_key<=0) Then Do
                  If (search_key==c_astslash) Then pindex = pindex + 1
                  Else Do
                     com.delim = search_key
                     switch.literal = switch.set
                     com.tokennum = com.tokennum + 1
                     com.last_token = s1
                  End
                  switch.search = switch.reset; search_key = ''
               End
            End
            Iterate
         End
         /**************** looking for comment or quote ****************
         Parse Var s s1a (c_slashast) s1b +0
         Parse Var s s2a (c_squote) s2b +0
         Parse Var s s3a (c_dquote) s3b +0
         Select
            When ('LENGTH'(s1a)<'LENGTH'(s2a) & ,
              'LENGTH'(s1a)<'LENGTH'(s3a)) Then
              Do
               /************* Found the start of a comment *************
               switch.search = switch.set; search_key = c_astslash
               searchkey_cnt.search_key = searchkey_cnt.search_key + 1
               searchkey_list.search_key = linecnt,
                 searchkey_list.search_key
               p.pindex = p.pindex ×× SCAN(s1a)
               pindex = pindex + 1
               p.pindex = p.pindex ×× c_slashast
               s = 'SUBSTR'(s1b,3)
            End
            When ('LENGTH'(s3a)<'LENGTH'(s2a) × s2b<>'') Then Do
               /********* Found the start of a literal string **********
               If ('LENGTH'(s3a)<'LENGTH'(s2a)) Then Do
                  search_key = c_dquote
                  s2a = s3a
                  s2b = s3b
               End
               Else search_key = c_squote
               Parse Var s2b (search_key) s1 (search_key) s +0
               p.pindex = p.pindex ×× SCAN(s2a) ×× search_key ×× s1
               If (s<>'') Then Do
                  p.pindex = p.pindex ×× search_key
                  s = 'SUBSTR'(s,2)
                  com.delim = search_key
                  switch.literal = switch.set
                  com.tokennum = com.tokennum + 1
                  com.last_token = search_key ×× s1 ×× search_key
                  search_key = ''
                  If ('LEFT'(s,1)='(') Then s1 = FUNCTION(s1)
               End
               Else Do
                  searchkey_cnt.search_key = searchkey_cnt.search_key +
                  searchkey_list.search_key = linecnt,
                    searchkey_list.search_key
                  switch.search = switch.set
               End
               switch.signalonoffv = switch.reset
            End
            Otherwise                        /* Just process remainder *
            p.pindex = p.pindex ×× SCAN(s)
            s = ''
         End
      End
      If (p.pindex='') Then pindex = pindex - 1

      If (switch.debug) Then Say 'One line scanned:' raw_line

      /****************** Check for continuation line ******************
      If (last_delim==',') Then com.offset = com.offset + continue_inden
      If (com.offset<0 × switch.skip) Then com.offset = 0

      /* No further indenting if still searching for ending delimiter **
      If (switch.search) Then switch.skip = switch.set

      /****************** Justify comments as needed *******************
      If (p.1='' & p.2<>'') Then Do
         If (switch.coml) Then Do
            com.offset = 0
            switch.skip = switch.set   /* Do not adjust comment indent *
            p.1 = 'LEFT'('','LENGTH'(raw_line)-'LENGTH'('STRIP'(raw_line
         End
         Else Do
            /******* Do not re-indent already indented comments. *******
            If ('SUBSTR'(raw_line,com.offset+1,2)==c_slashast) Then
              switch.skip = switch.set
         End
      End

      p.1 = 'LEFT'('',com.offset) ×× p.1
      out_string = ''
      Do i=1 To pindex
         out_string = out_string ×× p.i
      End

      len1 = 'LENGTH'(out_string)
      If (len1>1) Then Do
         If ('SUBSTR'(out_string,len1-1,2)==c_astslash &,
           switch.comrjust & ^switch.search) Then Do
            If (s1a='') Then switch.comment_only = switch.set
            /****************** Right Adjust Comment *******************
            i='INDEX'(out_string,c_slashast)
            If (i>1) Then Do           /* '/.' is to right of column 1 *
               comment='SUBSTR'(out_string,i)
               line='STRIP'('SUBSTR'(out_string,1,i-1),'T')
               If (line<>'') Then Do       /* More than just a comment *
                  i='LENGTH'(line)
                  If (i+'LENGTH'(comment)<right_margin) Then Do
                     out_string = line,    /* Adjust comment when room *
                       'RIGHT'(comment,right_margin-'LENGTH'(line)-1)
                  End
               End
            End
         End
      End

      /***************** Replace the line in the file ******************
      If (out_string/==raw_line) Then Do
         outstr= out_string
         "line (linecnt) = (outstr)"
         /******** Check if new line was too long for the file *********
         If (rc>0) Then Do
            "line (linecnt) = (rawline)"
         End
      End

      If ((pindex>2 × p.1<>'')) Then last_delim = com.delim
      If (com.delim<>',') Then Do
         If (^switch.comment_only) Then Do
            switch.thenelse = ,
              ((com.last_keyword='then' × com.last_keyword='else'),
              & com.tokennum=com.last_key_num)
            If (switch.thenelse) Then
              indent_thenelse = indent_thenelse + thenelse_indent
            Else indent_thenelse = 0
         End
         switch.signalonoffv = switch.reset
         com.tokennum = 0
         com.last_key_num = 0
         com.last_keyword = ''
         com.last_token = ''
         If (^switch.search) Then switch.skip = switch.reset
      End
      Else If (^switch.thenelse) Then indent_thenelse = 0
      If (switch.debug) Then Say 'One line processed:' out_string
      Else Do
         If (^got_varcurl) Then Do
            curll = curll + 1
            If (curll>curlmax) Then curll = curlmin
          /*'COMMAND SET CURLINE ON' curll */
         End
    /*if (linecnt%refresh=linecnt/refresh) then 'COMMAND REFRESH' */
      End
   End linecnt                                        /* End main loop *

/*************************** Done processing ***************************

/* 'COMMAND :'start_line */       /* Re-position to line we started at *
/* 'COMMAND RESTORE' */
   If (got_varcurl) Then 'COMMAND SET VARCURL' varcurl.1 varcurl.2     /
                                     Only at Waterloo, you say?  Pity! *
   If (switch.xref) Then 'COMMAND MSG Sorting XREF ...'
/* 'COMMAND REFRESH' */

/******************* Check for Unbalanced delimiters *******************
   If (com.endlist<>'') Then
     Say  "Unbalanced  END's detected at:" com.endlist
   If (com.dolist<>'') Then Do
      temp = ''
      Do i=1 To 'WORDS'(com.dolist)
         temp = 'WORD'(com.dolist,i) temp
      End
      Say  "Unbalanced  DO's or  SELECT's at:" temp
   End
   If (searchkey_list.c_astslash<>'') Then Do
      temp = ''
      Do i=1 To 'WORDS'(searchkey_list.c_astslash)
         temp = 'WORD'(searchkey_list.c_astslash,i) temp
      End
      Say  "Unbalanced comments at:" temp
   End
   If (searchkey_list.c_squote<>'') Then Do
      temp = ''
      Do i=1 To 'WORDS'(searchkey_list.c_squote)
         temp = 'WORD'(searchkey_list.c_squote,i) temp
      End
      Say  "Unbalanced  ""'"" s at:" temp
   End
   If (searchkey_list.c_dquote<>'') Then Do
      temp = ''
      Do i=1 To 'WORDS'(searchkey_list.c_dquote)
         temp = 'WORD'(searchkey_list.c_dquote,i) temp
      End
      Say ' Unbalanced ''"''s At:' temp
   End

   Signal EXIT

/******************* Internal routines and functions *******************

/******* SCAN - Look for delimiters and break line into tokens. ********
/** Delimiters such as <> will not be recognized as such, but we are ***
/********** not checking syntax, only looking for delimiters. **********

SCAN: Procedure Expose switch. com. xref. keywords.
   Parse Arg string
   If (switch.debug) Then Say 'At SCAN:' string
   If (string='') Then Return string
   delims = ',=()^×&+-;:></%* '
   return_string = ''
   switch.eot = switch.reset
   Do While (string<>'')
      iw = 'VERIFY'(string,delims,'M')
      If (iw=0) Then Do
         com.delim = ''
         switch.eot = switch.set
         return_string = return_string ×× SCANTOKEN(string)
         string = ''
      End
      Else Do
         com.delim = 'SUBSTR'(string,iw,1)
         Parse Var string token (com.delim) string
         return_string = return_string ×× SCANTOKEN(token) ×× com.delim
         iw = 'VERIFY'(string'a',delims)
         If (iw>1) Then Do
            return_string = return_string ×× 'SUBSTR'(string,1,iw-1)
            com.delim = 'RIGHT'('STRIP'(return_string,'T'),1)
            If ('POS'(com.delim,delims)=0) Then com.delim = ''
            string = 'SUBSTR'(string,iw)
         End
         If (com.delim==';') Then Do
            switch.signalonoffv = switch.reset
            com.tokennum = 0
            com.last_keyword = ''
            com.last_key_num = 0
            com.last_token = ''
         End
      End
      switch.literal = switch.reset
   End
   Return return_string

/* SCANTOKEN - Classify TOKEN as KEYWORD, VARIABLE, LABEL, or FUNCTION.
   Currently, keywords are not scanned exactly as the language
   specifies,  ie. 'FUZZ' is always considered a keyword, not just
   when if follows 'NUMERIC'.
   Keywords are checked for last, in case a label or function has the
   same name as a keyword.
   Additional tables are provided if you wish to be more exacting.     *

SCANTOKEN: Procedure Expose switch. com. xref. keywords.
   Parse Arg string
   If (switch.debug) Then Say 'At SCANTOKEN:' string
   If (string='') Then Return string
   return_string = ''

   If (LOWER(string)<>'end') Then
     switch.endtoken = switch.reset     /* END token not first on line *
   Do i=1 To 'WORDS'(string)
      com.tokennum = com.tokennum + 1
      word1 = 'SUBWORD'(string,i); temp = LOWER(word1)
      Select
         When ('DATATYPE'(word1)='NUM' × 'SYMBOL'(word1)='BAD') Then
           /* Ignore whatever it is */
           return_string = return_string word1
         When (com.delim=':') Then
           /* Things before ':'s are assumed to be LABELs */
           return_string = return_string LABEL(word1)
         When (com.delim='(') Then
           /* Things before '(' (no BLANKs) are assumed to be FUNCTIONs*
           return_string = return_string FUNCTION(word1)
         When ((com.last_token=='signal' × com.last_token=='call'),
           & com.tokennum>com.last_key_num) Then Do
           /* Things after 'SIGNAL' and 'CALL' are assumed to be LABELs*
            If (com.last_token=='signal' & ,
              (temp=='on' × temp=='off' × temp=='value')) Then Do
               switch.signalonoffv = switch.set
               return_string = return_string KEYWORD(word1)
            End
            Else return_string = return_string LABEL(word1)
         End
         When ('FIND'(keywords.scantok,temp)<>0) Then Do
            If (switch.signalonoffv) Then Do
               switch.signalonoffv = switch.reset
               return_string = return_string LABEL(word1)
            End
            Else return_string = return_string KEYWORD(word1)
         End
         Otherwise return_string = return_string VARIABLE(word1)
         switch.signalonoffv = switch.reset
      End
      com.last_token = temp
      switch.literal = switch.reset
   End
   return_string = 'STRIP'(return_string)
   Return return_string

KEYWORD: Procedure Expose switch. com. xref. keywords.
   Parse Arg word1
   If (switch.debug) Then Say 'At KEYWORD:' word1
   keyword = LOWER(word1)
   com.last_keyword = keyword
   com.last_key_num = com.tokennum
   If (switch.keyword_case) Then Do
      If (switch.colin) Then word1 = CAPS(word1)
      Else If (switch.lcc) Then Do
         word1 = LOWER(word1)
         temp = 'SUBSTR'(word1,1,1)
         Upper temp
         word1 = 'OVERLAY'(temp,word1,1,1)
      End
      Else word1 = LOWER(word1)
   End
   Select
      When (keyword='do') Then Do
         If (switch.noniterativedo & switch.eot) Then
           switch.skipend = switch.set
         Else com.nest = com.nest + 1
         com.dolist = com.linenum com.dolist
      End
      When (keyword='select') Then Do
         com.nest = com.nest + 1
         com.dolist = com.linenum com.dolist
      End
      When (keyword='end') Then Do
         If (switch.skipend) Then switch.skipend = switch.reset
         Else com.nest = com.nest - 1
         If (switch.endtoken) Then com.offset = com.offset - com.indent
         If (com.dolist='') Then com.endlist = com.endlist com.linenum
         Else com.dolist = 'DELWORD'(com.dolist,1,1)
      End
      Otherwise Nop
   End
   Return word1

VARIABLE: Procedure Expose switch. com. xref. keywords.
   Parse Arg word1
   If (switch.debug) Then Say 'At VARIABLE:' word1
   If (switch.variable_case) Then word1 = LOWER(word1)
   sortkey = ' 4' ×× word1
   If (xref.cnt.sortkey=0) Then Do
      xref.labcnt = xref.labcnt + 1
      temp = 'LAB.' ×× xref.labcnt
      xref.temp = sortkey
   End
   xref.cnt.sortkey = xref.cnt.sortkey + 1
   temp2 = com.linenum
   If (com.tokennum=1) Then Do
      temp = 'REF.' ×× sortkey ×× '.' ×× 0
      /* Flag lines where variable is the first token (an assignment) **
      temp2 = '*' ×× temp2
      xref.temp = temp2
   End
   temp = 'REF.' ×× sortkey ×× '.' ×× xref.cnt.sortkey
   xref.temp = temp2
   Return word1

LABEL: Procedure Expose switch. com. xref. keywords.
   Parse Arg word1
   If (switch.debug) Then Say ' At LABEL:' word1
   If (switch.label_case) Then Do
      If (switch.colin) Then Do
         word1 = LOWER(word1)
         temp = 'SUBSTR'(word1,1,1)
         Upper temp
         word1 = 'OVERLAY'(temp,word1,1,1)
      End
      Else word1 = CAPS(word1)
   End
   sortkey = ' 5' ×× word1
   If (com.tokennum<=1) Then com.offset = 0
   If (xref.cnt.sortkey=0) Then Do
      xref.labcnt = xref.labcnt + 1
      temp = 'LAB.' ×× xref.labcnt
      xref.temp = sortkey
   End
   xref.cnt.sortkey = xref.cnt.sortkey + 1
   temp2 = com.linenum
   If (com.delim==':') Then Do
      temp = 'REF.' ×× sortkey ×× '.' ×× 0
      /******* Flag line for possible use as FUNCTION definition *******
      temp2 = '*' ×× temp2
      If (xref.temp=0) Then xref.temp = temp2
   End
   temp = 'REF.' ×× sortkey ×× '.' ×× xref.cnt.sortkey
   xref.temp = temp2
   Return word1

FUNCTION: Procedure Expose switch. com. xref. keywords.
   Parse Arg word1
   If (switch.debug) Then Say ' At FUNCTION:' word1
   If (switch.function_case) Then Do
      word1 = LOWER(word1)
      /************** Check for system defined functions ***************
      If ('FIND'(keywords.func,word1)=0) Then Do
         If (switch.colin) Then Do
            temp  = CAPS(word1)
            word1 = 'OVERLAY'(temp,word1,1,1)
         End
         Else word1 = CAPS(word1)
      End
      Else If (switch.lcc) Then Do
         temp  = CAPS(word1)
         word1 = 'OVERLAY'(temp,word1,1,1)
         If ('VERIFY'('LEFT'(word1,1),'"''')) Then Do
            /* Put system functions in quotes */
            word1 = "'"CAPS(word1)"'"
            If (switch.literal) Then word1 = '××'word1
         End
      End
   End
   If ('LEFT'(word1,2)='××') Then sortkey = ' 6'××'SUBSTR'(word1,3)
   Else sortkey = ' 6'word1
   If (xref.cnt.sortkey=0) Then Do
      xref.labcnt = xref.labcnt + 1
      temp = 'LAB.' ×× xref.labcnt
      xref.temp = sortkey
   End
   xref.cnt.sortkey = xref.cnt.sortkey + 1
   temp = 'REF.' ×× sortkey ×× '.' ×× xref.cnt.sortkey
   xref.temp = com.linenum
   Return word1

CAPS: Procedure
   Parse Upper Arg args
   Return args

LOWER: Procedure
   Parse Arg args
   args = 'TRANSLATE'(args,,
     'abcdefghijklmnopqrstuvwxyz',,
     'ABCDEFGHIJKLMNOPQRSTUVWXYZ')
   Return args

/***********************************************************************
 *                                                                     *
 *     Internal function 'GETOPTWORD'                                  *
 *        Arguments are - single token, possibly abbreviated,          *
 *                      - string of valid full-length operands with    *
 *                        the length coded as the first character.     *
 *        If first argument is found, the full-length token is         *
 *        returned.  If not found, return original first argument.     *
 *                                                                     *
\***********************************************************************
GETOPTWORD: Procedure
   Parse Arg option, template
   nwords = 'WORDS'(template)
   Do k=1 To nwords
      optword = 'WORD'(template,k)
      len = 'LEFT'(optword,1)
      optword = 'SUBSTR'(optword,2)
      If ('LENGTH'(option)>'LENGTH'(optword)) Then Iterate
      If ('ABBREV'(optword,option,len)) Then Return optword
   End
   Return option

EXIT16:
   rtncode = 16
EXIT:
   Exit rtncode

EXPLAIN:
   Signal EXPLAIN2
EXPLAIN2:
   Do i=sigl+7 While ('WORD'('SOURCELINE'(i),1)<>c_astslash)
      Say 'SOURCELINE'(i)
   End
   Signal EXIT
/*
This XEDIT macro reformats REXX EXEC's.

REXXREF target (options

Where target is: (i)   (null) - process ALL  lines.  Target can not be n
                 when options are specified.

                 (ii)  ALL    - process complete file

current options are (minimum abbrev in upper case, default first):

      COLIN          - Capitalize keywords/variables/labels the way
                       Colin thinks it should be done.
      INdent nn      - Number of spaces to indent loops. Default is 3.
      LEftmargin nn  - Create left margin such that the first non-commen
                       line begins in column 'nn'.  Useful when
                       REXXREF'ing subsections of a program.
      NODEBUG×DEBUG  - Generate a debugging trace.
      RIghtmargin nn - Column for right-aligning comments.  Default is 7

***** NOTE *****
In the following discussion '/*' is given as '/.' and '*/' as './'
This is because REXX treats the above as an imbedded comment even though
the comment delimiters are in quotes.  There would have to be matching
delimiters on each line, which confuses the discussion.
**********

Lines containing 'DO' or 'SELECT' are indented, while lines containing
'END' are un-indented.  Continuation lines are indented additional
space(s).  Indenting is supressed for lines containing a label.

Lines begining with '/.' can be either left alone or indented
(switch.coml).  The default is to leave alone.
Where possible, lines which end in a comment ('./') will be adjusted
so that the '/' will fall in column 73 (right_margin).

Blanks are not removed from the left of comments to avoid messing up
tables such as this.  However, comments that have already been indented
are not additionally indented.; so that you can REXXREF a file that has
already been REXXREFed.

If the modified line exceeds the LRECL of the original file, the
line is left unmodified.

Keywords are not scanned exactly as the language specifies.
'FUZZ', for example, is always considered a keyword, not just when it
follows 'NUMERIC'.
Keywords are checked for last, in case a label or function has the
same name as a keyword.
Keywords are listed in 'keywords.scantok' and an additional table is
provided if you wish to be more exacting.  Keywords are changed to
lower case (switch.keyword_case).

Builtin functions are treated as keywords.  Builtin functions are listed
in keywords.scantok.

Labels and user functions are changed to upper case (switch.label_case).
These are strings that preceed ':' or '(', or follow 'SIGNAL' or 'CALL'.

Variables are changed to lower case (switch.variable_case).

Comments and literal strings are left unchanged.

The cross reference has three parts.  The first part lists the
variables in alphabetical order (by the first 20 characters) and each
line that they were found on.  If the variable appeared more than once
on a line, then that line number will be repeated.  Line numbers where
the variable was the first token are preceeded by an '*' (these are
assumed to be assignments).

The second part lists the labels.  The line number where they are define
is preceeded by an '*'.

The third part lists the functions.  A name may appear as both a label
and a function; and, for those that do, the line number where the
function is defined is preceeded by an '*' and prefixed to the LABELs
list.

The MACRO has the following subroutines:
1) SCAN:      Looks for delimiters and breaks a line into tokens.
2) SCANTOKEN: Clasifies a token as a keyword, variable, label, or functi
3) KEYWORD:   Processed keywords.
4) VARIABLE:  Processes variables.
5) LABEL:     Processes labels.
6) FUNCTION:  Processes functions.
7) CAPS:      Changes a token to upper case.
8) LOWER:     Changes a token to lower case.
9) EXPLAIN:   What you are reading now.
*/

PARSE_ERROR:
   Say ' reset while parsing arguments:' args
   Signal EXIT16

SORT_ERROR:
   rtncode = rc
   'SET CMSTYPE RT'
   Address xedit  Say ' Error' rtncode 'in line' sigl-1,
     'during SORT phase.'
   Signal EXIT

NOVALUE:
   Say 'NOVALUE'
   rtncode = 1
   temp_sigl = sigl
   Signal ERROR2

ERROR:
   Say 'ERROR'
   rtncode = 1
   temp_sigl = sigl
   Signal ERROR2

SYNTAX:
   Say 'SYNTAX'
   rtncode = rc
   temp_sigl = sigl

ERROR2:
   Call 'TRACE'('O')
   Address command 'DROPBUF 0'
   typeflag = 'RT'
   temp = 'REXX error' rtncode 'in line' temp_sigl ':' 'ERRORTEXT'(rtnco
   Say temp
   Say '***> You should definitely NOT be here.  Call SYSTEM support.'
   /* Signal EXIT                                                      *

/********************* For more serious debugging **********************
   Say 'SOURCELINE'(temp_sigl)
/* Trace ?r; Nop                                                       *
   Call 'TRACE'('O')
   Parse Source . . fn ft .
   Push 'COMMAND :'temp_sigl
   Push 'COMMAND EMSG' temp
   'XEDIT' fn ft
   Signal Off NOVALUE
   If ('SYMBOL'(buf1)='LIT') Then buf1 = '1'
   If ('SYMBOL'(typeflag)='LIT') Then typeflag = 'HT'
   Signal EXIT
