/*-REXX REXX80--------------------------------------------------------*/
/*   11/17/99 Fixed bug when continuing a litteral. Added "××" at the */
/*            end so no blank will be put into the litteral on the    */
/*            continuation. i. e. "RECFM(F"××,                        */
/*   11/17/99 Fixed bug in  CHECK_FOR_MORE when either apost or quote */
/*            is not in the line, POS=0                               */
/*   09/28/99 Reformat REXX program into 80 col lines by breaking up  */
/*            lines longer than 80 into continuation lines.           */
/*            The lines are broken following the last " "(blank) on   */
/*            the statement. If no blank exists then the break will   */
/*            occur at the last ")", "(", "=", "'", in that order. If */
/*            non of these characters are in the line then the line   */
/*            will be left unmodified and a comment inserted. The     */
/*            comment will be "/* REXX80 line too long */"            */
/* Run this exec from ISPF edit and then move the edited file to a    */
/* FB-80 PDS. Let the truncation happen, its OK everything past col   */
/* 80 is now blank.                                                   */
/* Run REXREF or REXXREF after moving the modified exec to the FB-80  */
/* file to make it look nice.                                         */
/*-REXX REXX80--------------------------------------------------------*/

/**************************    start of program ************************
START: Trace Off
   Address isredit
   "MACRO (parm) PROCESS"

   first_line = 1                          /* Line to begin processing *
   "(lastln) = LINENUM .ZLAST"
   max_line = 80 /* Max length wanted for FB file of target rexx execs *
   c_comma=','                           /* Used to append comma to ln *
   c_quote='"'                           /* Used to find litterals     *
   c_apost="'"                           /* Used to find litterals     *
   litteral_end=''                       /* Used to find litteral end  *
   prev_litteral=0 /* Used to indicate leading litteral needed on
continued lines */
   comment_line=0  /* Used to indicate a line with no blanks before col
   rexx80_comment="   /* REXX80 line to long */" /* Mark problem lines *
   bad_line=0         /* Switch, give message if any lines tooooo long *

   "(recl)=lrecl"         /* Get the length of the records in the file *
   If max_line>recl Then Do
      Say 'MAX_LINE='max_line ' RECL='recl
      Say 'records cannot be longer than' recl
      Exit 16
   End

/************* this is the main processing loop *******************/

   linecnt=0                           /* Current line being worked on *
   Do Forever
      linecnt=linecnt+1
      If linecnt>lastln Then Leave                         /* All done *
      "(rawline) = line" linecnt          /* Get the line from ISREDIT *
      If (rawline='') Then Iterate
      outstr='STRIP'(rawline,t) /* remove trailing blanks to shorten lin
      If 'LENGTH'(outstr)>max_line Then Do
/* Found a long line(comment out the following "Say" if you like) */
         Say 'Line No.' linecnt 'is longer than' max_line
         replace_line=1       /* First iteration will replace the line *
         long_line=outstr                    /* Move line to work area *
         comment_line=0
         Do Until long_line=''            /* Now process the long line *
            If 'LENGTH'(long_line)>max_line Then Do /* not the last seg
               max_col='LASTPOS'(' ','SUBSTR'(long_line,1,(max_line-5)))
               If max_col=0 Then             /* No blank, look for ")" *
                 max_col='LASTPOS'(')','SUBSTR'(long_line,1,(max_line-5)
               If max_col=0 Then             /* No blank, look for "(" *
                 max_col='LASTPOS'('(','SUBSTR'(long_line,1,(max_line-5)
               If max_col=0 Then             /* No blank, look for "=" *
                 max_col='LASTPOS'('=','SUBSTR'(long_line,1,(max_line-5)
               If max_col=0 Then             /* No blank, look for "=" *
                 max_col='LASTPOS'("'",'SUBSTR'(long_line,1,(max_line-5)
               If max_col=0 Then Do /* No break found, insert the commen
                  If prev_litteral × , /* If working on a litteral line
                    'POS'('/*',outstr)>0 Then /* - or - If there is a co
                    max_col=max_line-5        /* break it up at col 75 *
                  Else Do   /* Were stumped, insert the rexx80 comment *
                     max_col='LENGTH'(long_line)
                     "line_after (linecnt) = '"rexx80_comment"'"
                     lastln=lastln+1 /* Reset to new end of file for "DO
                     bad_line=1  /* Switch, at least one line was too lo
                  End
               End
               outstr='SUBSTR'(long_line,1,max_col)
               If 'POS'('/*',outstr)>0 Then
                 comment_line=1
               If 'POS'('*/',outstr)>0 Then
                 comment_line=0

               If outstr>' ' Then Do  /* May have split into blank seg *
                  If prev_litteral Then   /* Add continuation litteral *
                    outstr=litteral_end××outstr
                  prev_litteral=0
                  Call CHECK_FOR_LITTERAL  /* Check line for litterals *
                  If comment_line Then Nop       /* Do not add a comma *
                  Else
                    outstr=outstr××c_comma   /* add cont comma to Line *
               End

long_line='SUBSTR'(long_line,max_col+1,('LENGTH'(long_line)-max_col))
            End
            Else Do                 /* Its last line segment, no comma *
               max_col='LENGTH'(long_line)         /* Must be last seg *
               outstr='SUBSTR'(long_line,1,max_col)
               If prev_litteral Then      /* Add continuation litteral *
                 outstr=litteral_end××outstr
               prev_litteral=0
               long_line=''                           /* No more to do *
            End

/* Now replace/insert the new line */
            If replace_line Then Do /* First time, replace the current l
               "line (linecnt) = (outstr)"
               replace_line=0

/* Check if new line was too long for the file (should not happen) */
               If (rc>0) Then Do
                  "line (linecnt) = (rawline)"
                  Say "Error building continuation lines"
                  Say outstr
                  Exit 16
               End
            End
            Else Do                  /* For the rest, insert new lines *
               "line_after (linecnt) = (outstr)"
               linecnt=linecnt+1  /* Set line pointer to line inserted *
               lastln=lastln+1    /* Reset to new end of file for "DO" *
            End
         End
      End
   End

   If bad_line Then Do             /* If one or more lines was to long *
      Say 'One or more lines could not be broken.'
      Say 'Press ENTER to continue'
      Pull junk
      "FIND '"rexx80_comment"'"
   End
   Exit

CHECK_FOR_LITTERAL:                    /* Check for litteral continued *
   quote_loc='POS'(c_quote,outstr,1)             /* locate first quote *
   apost_loc='POS'(c_apost,outstr,1)             /* locate first apost *
CHECK_FOR_MORE:
   If quote_loc+apost_loc=0 Then Return /* If niether are there, out-a-h
   Select
      When apost_loc=0 Then Do
         litteral_end=c_quote  /* Quote was there, it defines litteral *
         start_litteral=quote_loc+1       /* Remember where it started *
      End
      When quote_loc=0 Then Do
         litteral_end=c_apost  /* Apost was there, it defines litteral *
         start_litteral=apost_loc+1       /* Remember where it started *
      End
   /* See who is first */
      When quote_loc<apost_loc Then Do
         litteral_end=c_quote  /* Apost was first, it defines litteral *
         start_litteral=quote_loc+1       /* Remember where it started *
      End
      When apost_loc<quote_loc Then Do
         litteral_end=c_apost  /* Apost was first, it defines litteral *
         start_litteral=apost_loc+1       /* Remember where it started *
      End
   End
   end_litteral='POS'(litteral_end,outstr,start_litteral) /* Find end of
litteral */
   If end_litteral=0 Then Do   /* Not on this segment of the long line *
      prev_litteral=1     /* Set switch, next line need start litteral *
      outstr=outstr××litteral_end"××" /* Add litteral end to the line */
      Return
   End
   /* A match to the litteral start was found, now check for more */
   quote_loc='POS'(c_quote,outstr,end_litteral+1)             /* locate
first quote */
   apost_loc='POS'(c_apost,outstr,end_litteral+1)             /* locate
first apost */
   Signal CHECK_FOR_MORE
   Return
