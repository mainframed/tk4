./ ADD NAME=BDAMFMT  0100-99056-99056-1500-00227-00227-00000-FX-REL1

         TITLE 'FXFORMAT   Master file (BDAM) formatter'
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: BDAMFMT                                               *
*                                                                     *
*   The master file may be either BDAM or VSAM linear.                *
*                                                                     *
*   FX expects the master file to be pre-formatted, this module       *
*   provides this function for BDAM.                                  *
*                                                                     *
*   Since all records must be written, QSAM is used instead of BDAM   *
*   for the formatting.                                               *
*                                                                     *
* ------------------------------------------------------------------- *
FXFORMAT CSECT
FXFORMAT AMODE 24
FXFORMAT RMODE 24
         STM   R14,R12,12(R13)       SAVE REGS
         LR    R12,R15               COPY BASE ADDRESS
         USING FXFORMAT,R12          DEFINE BASE
         LA    R1,SAVEAREA           OUR SAVE AREA ADDRESS
         ST    R1,8(R13)             CHAIN TO CALLER'S
         ST    R13,4(R1)             CHAIN CALLERS TO OURS
         LR    R13,R1                SET SAVE AREA ADDRESS
         OPEN  (FXIN,INPUT)          OPEN CONTROL STATEMENT FILE
         OPEN  (FXPRINT,OUTPUT)      OPEN PRINT FILE
         BAL   R10,HEAD0000          PRINT HEADING
INIT0010 DS    0H
         GET   FXIN,CTLSTMT          READ A CONTROL STATEMENT
         MVC   MSG01TXT(CTLSTMTL),CTLSTMT
         MVC   PLINE(MSG01L),MSG01   COPY MESSAGE
         BAL   R10,PRT0000           PRINT MESSAGE
         CLI   CTLSTMT,C'*'          COMMENT?
         BE    INIT0010              YES
         CLC   RECSSTMT,CTLSTMT      RECORDS STATEMENT?
         BE    RECS0000              YES
         MVC   PLINE(MSG02L),MSG02   INVALID STATEMENT
         OI    FLAGS,$ERROR          INDICATE ERROR
         BAL   R10,PRT0000           PRINT ERROR STATEMENT
         B     INIT0010              READ NEXT STATEMENT
RECS0000 DS    0H
         LA    R1,CTLSTMT+L'RECSSTMT FIRST DIGIT IN NUMBER OF RECORDS
         LA    R2,7                  MAXIMUM NUMBER OF DIGITS
         MVC   NBRIN,NBRIN-1         INITIALIZE TO ZEROS
RECS0010 DS    0H
         CLI   0(R1),C' '            END OF VALUE?
         BE    RECS0020              YES
         CLI   0(R1),C'0'            INVALID DIGIT?
         BL    RECS0030              YES
         CLI   0(R1),C'9'            INVALID DIGIT?
         BH    RECS0030              YES
         MVC   NBRIN(L'NBRIN-1),NBRIN+1   SHIFT LEFT 1 DIGIT
         MVC   NBRIN+L'NBRIN-1(1),0(R1)   COPY DIGIT
         LA    R1,1(R1)              NEXT DIGIT
         BCT   R2,RECS0010           LOOP
         CLI   0(R1),C' '            BLANK?
         BNE   RECS0040              TOO MANY DIGITS
RECS0020 DS    0H
         PACK  DWORD,NBRIN           PACK NUMBER OF RECORDS
         CVB   R1,DWORD              CONVERT TO BINARY
         LTR   R1,R1                 ZERO?
         BZ    RECS0050              YES.. INVALID
         ST    R1,RECORDS            SET NUMBER OF RECORDS
         OI    FLAGS,$RECORDS        NUMBER OF RECORDS HAS BEEN SET
         B     INIT0010              READ NEXT CONTROL STATEMENT
RECS0030 DS    0H
         MVC   PLINE(MSG03L),MSG03   INVALID DIGIT
         OI    FLAGS,$ERROR          INDICATE ERROR
         BAL   R10,PRT0000           PRINT ERROR STATEMENT
         B     INIT0010              READ NEXT STATEMENT
RECS0040 DS    0H
         MVC   PLINE(MSG04L),MSG04   TOO MANY DIGITS
         OI    FLAGS,$ERROR          INDICATE ERROR
         BAL   R10,PRT0000           PRINT ERROR STATEMENT
         B     INIT0010              READ NEXT STATEMENT
RECS0050 DS    0H
         MVC   PLINE(MSG05L),MSG05   RECORDS=0
         OI    FLAGS,$ERROR          INDICATE ERROR
         BAL   R10,PRT0000           PRINT ERROR STATEMENT
         B     INIT0010              READ NEXT STATEMENT
PROC0000 DS    0H
         TM    FLAGS,$ERROR          ANY ERRORS?
         BNO   PROC0010              NO
         MVC   PLINE(MSG06L),MSG06   COPY MESSAGE
         BAL   R10,PRT0000           PRINT MESSAGE
         B     EXIT0000              AND EXIT
PROC0010 DS    0H
         TM    FLAGS,$RECORDS        NUMBER OF RECORDS GIVEN?
         BO    PROC0020              YES
         MVC   PLINE(MSG07L),MSG07   COPY MESSAGE
         BAL   R10,PRT0000           PRINT MESSAGE
         B     EXIT0000              AND EXIT
PROC0020 DS    0H
         OPEN  (MASTER,OUTPUT)       OPEN MASTER FILE
         L     R9,RECORDS            NUMBER OF RECORDS TO FORMAT
         MINIT BLANKS,P0,0,R2        INITIALIZE FIELDS
MSTR0010 DS    0H
         AP    RECCNT,P1             ADD 1 TO RECORD COUNTER
         MVC   RECWORK,=X'F02020202021'
         ED    RECWORK,RECCNT        EDIT RECORD NUMBER
         MVC   REQREC#,RECWORK+1     SET RECORD NUMBER
         TM    FLAGS,$CNTL           CONTROL RECORD WRITTEN
         BO    MSTR0020              YES
         OI    FLAGS,$CNTL           CONTROL RECORD WRITTEN
         MVI   REQSTAT,$REQCNTL      INDICATE THIS IS CONTROL RECORD
         MVC   REQFSIZE,RECORDS      SAVE SIZE OF FILE
         B     MSTR0030
MSTR0020 DS    0H
         MVI   REQSTAT,0             STATUS IS 'UNUSED'
         XC    REQFSIZE,REQFSIZE     CLEAR FILE SIZE
MSTR0030 DS    0H
         PUT   MASTER,REQBLOK        WRITE THE RECORD
         BCT   R9,MSTR0010           INITIALIZE ALL RECORDS
         CLOSE MASTER                CLOSE MASTER FILE
         B     EXIT0000              EXIT
PRT0000  DS    0H
         PUT   FXPRINT,PLINE         WRITE TO FXPRINT
         AP    LINECT,P1             ADD 1 TO LINE COUNT
         CLI   PLINE,C' '            SINGLE SPACE?
         BE    PRT0010               YES
         AP    LINECT,P1             ADD 1 TO LINE COUNT
         CLI   PLINE,C'0'            DOUBLE SPACE?
         BE    PRT0010               YES
         AP    LINECT,P1             ADD 1 TO LINE COUNT
PRT0010  DS    0H
         MVC   PLINE,PLINE-1         CLEAR PRINT AREA
         CP    LINECT,MAXLINE        TIME FOR HEADING?
         BLR   R10                   NO
HEAD0000 DS    0H
         AP    PAGECT,P1             ADD 1 TO PAGE COUNT
         MVC   HEADPAGE,=X'40202120' INITIALIZE EDIT WORD
         ED    HEADPAGE,PAGECT       EDIT PAGE NUMBER
         MVC   PLINE(HEADINGL),HEADING
         PUT   FXPRINT,PLINE         PRINT HEADING
         MVC   PLINE,PLINE-1         CLEAR PRINT I/O AREA
         ZAP   LINECT,P1             RESET LINE COUNT
         BR    R10
* ------------------------------------------------------------------- *
*        EXIT                                                         *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         CLOSE FXIN
         CLOSE FXPRINT
         L     R13,4(R13)            RESTORE REGISTER 13
         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS
         SR    R15,R15               GIVE GOOD RETURN CODE
         BR    R14                   RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DWORD    DC    D'0'
SAVEAREA DS    18F
RECORDS  DC    F'0'
MASTER   DCB   DSORG=PS,             MASTER FILE DCB                   +
               DDNAME=MASTER,        .. DD NAME                        +
               RECFM=F,              .. FIXED/UNBLOCKED RECORDS        +
               LRECL=REQBLOKL,       .. RECORD SIZE                    +
               BLKSIZE=REQBLOKL,     .. BLOCK SIZE                     +
               MACRF=PM              .. PUT/MOVE MODE
RECCNT   DC    PL3'0'
LINECT   DC    PL2'0'
PAGECT   DC    PL2'0'
P0       DC    P'0'
P1       DC    P'1'
MAXLINE  DC    P'&MAXL'
RECWORK  DC    CL6' '
FLAGS    DC    X'00'
$RECORDS EQU   X'80'
$ERROR   EQU   X'40'
$CNTL    EQU   X'20'
BLANKS   DC    CL44' '
HEXCHAR  DC    C'0123456789ABCDEF'
         SPACE 1
         DC    C'0'
NBRIN    DC    CL7'0000000'
         SPACE 1
         DC    C' '
PLINE    DC    CL133' '
CTLSTMT  DC    CL80' '
CTLSTMTL EQU   *-CTLSTMT
         SPACE 1
HEADING  DS    0C
         DC    CL50' '
         DC    C'FX MASTER FILE FORMATTER'
         DC    CL50' '
         DC    C'PAGE'
HEADPAGE DC    CL4' '
HEADINGL EQU   *-HEADING
MSG01    DS    0C
         DC    C' FXFORMAT01I   CONTROL STATEMENT:'
MSG01TXT DS    (CTLSTMTL)C
MSG01L   EQU   *-MSG01
MSG02    DC    C' FXFORMAT02E * INVALID CONTROL STATEMENT'
MSG02L   EQU   *-MSG02
MSG03    DC    C' FXFORMAT03E * INVALID DIGIT IN RECORDS VALUE'
MSG03L   EQU   *-MSG03
MSG04    DC    C' FXFORMAT04E * TOO MANY DIGITS IN RECORDS VALUE'
MSG04L   EQU   *-MSG04
MSG05    DC    C' FXFORMAT05E * RECORDS VALUE MAY NOT BE ZERO'
MSG05L   EQU   *-MSG05
MSG06    DC    C'-FXFORMAT06E * ERROR(S) DETECTED, EXECUTION ABORTED'
MSG06L   EQU   *-MSG06
MSG07    DC    C'-FXFORMAT07E * NUMBER OF RECORDS NOT GIVEN'
MSG07L   EQU   *-MSG07
RECSSTMT DC    C'RECORDS='
FXIN     DCB   DDNAME=FXIN,             CONTROL STATEMENT DCB          +
               DSORG=PS,                .. SEQUENTIAL                  +
               LRECL=80,                .. 80 BYTE RECORDS             +
               RECFM=FB,                .. FIXED, BLOCKED RECORDS      +
               EODAD=PROC0000,          .. END OF DATA                 +
               MACRF=GM                 .. GET/MOVE MODE
FXPRINT  DCB   DDNAME=FXPRINT,          SYSOUT DCB                     +
               DSORG=PS,                .. SEQUENTIAL                  +
               LRECL=L'PLINE,           .. RECORD SIZE                 +
               RECFM=FBA,               .. FIXED, BLOCKED, ASA         +
               MACRF=PM
         LTORG
         REQBLOK DSECT=NO
* ------------------------------------------------------------------- *
*                                                                     *
*              EQUATES                                                *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY REGEQU
./ ADD NAME=BDAMMSTR 0100-99056-99056-1500-00229-00229-00000-FX-REL1

         TITLE 'FXSMSTR   Master file access using BDAM'
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: BDAMMSTR                                              *
*                                                                     *
*   The master file may be either a BDAM or a VSAM linear data set.   *
*   If the master file is BDAM, this module provides the I/O for      *
*   all FX functions.                                                 *
*                                                                     *
* ------------------------------------------------------------------- *
FXSMSTR  CSECT
FXSMSTR  AMODE 24
FXSMSTR  RMODE 24
         STM   R14,R12,12(R13)       SAVE CALLER'S REGISTERS
         LR    R12,R15               COPY BASE ADDRESS
         USING FXSMSTR,R12           DEFINE BASE
         USING FXSCOMM,R11           DEFINE COMM AREA BASE
         B     MSTR0000              SKIP EYECATCHER
         DC    ((PFXMODNM-MODPRFX)-(*-FXSMSTR))X'00'
         DC    CL8'MSTRBDAM'         MODULE NAME
         DC    C'&SYSDATE'           DATE OF ASSEMBLY
         DC    C'&SYSTIME'           TIME OF ASSEMBLY
MSTR0000 DS    0H
         LR    R9,R1                 COPY PARM LIST ADDRESS
         USING MSTRREQ,R9            DEFINE BASE
         ICM   R1,15,COMMIOWK        WORK AREA ACQUIRED?
         BNZ   MSTR0010              YES
         GETMAIN RU,                 ACQUIRE WORK AREA                 +
               LV=WKL,               .. SIZE                           +
               LOC=BELOW             .. FROM BELOW THE LINE
         ST    R1,COMMIOWK           SET WORK AREA ADDRESS
         LR    R2,R1                 COPY WORK AREA ADDRESS
         LR    R0,R1                 COPY WORK AREA ADDRESS
         LA    R1,WKL                SIZE
         SR    R14,R14               CLEAR ADDRESS 2
         SR    R15,R15               CLEAR LENGTH 2
         MVCL  R0,R14                CLEAR WORK AREA
         ST    R13,4(R2)             SAVE CALLER'S SAVE AREA ADDRESS
         ST    R2,8(R13)             CHAIN OUR WORK AREA TO CALLER'S
         LR    R13,R2                SET SAVE AREA ADDRESS
         USING WK,R13                DEFINE BASE
         ITRACE ID=INIT
         MVI   WKFLAG,0              INITIALIZE STATUS FLAGS
         MVI   PRTCC,C' '            INITIALIZE PRINT I/O AREA
         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC
         CLI   MSTRCMD,$MSTRCLS      END-OF-JOB?
         BE    EXIT0000              YES
         MVC   WKDCB(DCBL),DCBI      INITIALIZE DCB
         MVC   WKOC(OPENL),OPENI     COPY OPEN PARM LIST
         MVC   WKREAD(READL),READI   INITIALIZE READ
         MVC   WKWRITE(WRITEL),WRITEI   AND WRITE
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         OPEN  (WKDCB,UPDAT),MF=(E,WKOC)
         OI    WKFLAG,$OPEN          DCB IS OPEN
         XC    WKBLOCK,WKBLOCK       SET BLOCK TO ZERO (1ST RECORD)
         LA    R4,REQBLOK            OUR I/O AREA ADDRESS
         USING REQBLOK,R4            DEFINE REQBLOK BASE
         READ  WKREAD,               READ CONTROL RECORD               +
               DI,                   .. READ DATA BY KEY               +
               WKDCB,                .. DCB                            +
               (R4),                 .. I/O AREA                       +
               REQBLOKL,             .. BLOCK SIZE                     +
               0,                    .. NO KEY ADDRESS                 +
               WKBLOCK,              .. BLOCK NUMBER                   +
               MF=(E,WKREAD)
         CHECK WKREAD                WAIT FOR AND COMPLETE THE I/O
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         MVC   COMMRECS,REQFSIZE     SAVE NUMBER OF RECORDS IN MASTER
         DROP  R4
         B     MSTR0020
MSTR0010 DS    0H
         ST    R13,4(R1)             SAVE CALLER'S SAVE AREA ADDRESS
         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO CALLER'S
         LR    R13,R1                SET SAVE AREA ADDRESS
MSTR0020 DS    0H
         ITRACE ID=ENTRY,                                              +
               RDATA1=R9,            .. ADDRESS OF REQUEST BLOCK       +
               DATA2=MSTRREQ         .. DATA IN REQUEST BLOCK
         CLI   MSTRCMD,$MSTRCLS      SHUTDOWN?
         BE    EXIT0000              YES.. EXIT
         CLI   MSTRCMD,$MSTROPN      OPEN?
         BE    EXIT0010              YES.. EXIT
MSTR0030 DS    0H
         MVC   WKBLOCK+1(2),MSTRREC# COPY BLOCK NUMBER
         MVI   WKBLOCK,0             FIRST BYTE IS ALWAYS ZERO
         CLI   MSTRCMD,$MSTRRD       READ A RECORD?
         BE    MSTR0040              YES
         CLI   MSTRCMD,$MSTRWRT      WRITE A RECORD?
         BE    MSTR0050              YES
         ABEND $U0006,DUMP,,USER
MSTR0040 DS    0H
         ITRACE ID=READ
         LA    R4,REQBLOK            I/O AREA ADDRESS
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         READ  WKREAD,               READ THE MASTER FILE              +
               DI,                   .. READ DATA BY KEY               +
               WKDCB,                .. DCB                            +
               (R4),                 .. I/O AREA                       +
               REQBLOKL,             .. BLOCK SIZE                     +
               0,                    .. NO KEY ADDRESS                 +
               WKBLOCK,              .. BLOCK NUMBER                   +
               MF=(E,WKREAD)
         CHECK WKREAD                WAIT FOR AND COMPLETE THE I/O
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         LA    R0,MSTRRECD           USER'S I/O AREA ADDRESS
         LA    R1,REQBLOKL           LENGTH
         LR    R5,R1                 COPY LENGTH
         MVCL  R0,R4                 COPY RECORD TO USER
         B     EXIT0010              AND EXIT
MSTR0050 DS    0H
         ITRACE ID=WRITE
         LA    R0,MSTRRECD           USER'S I/O AREA ADDRESS
         LA    R1,REQBLOKL           LENGTH
         LA    R4,REQBLOK            I/O AREA ADDRESS
         LR    R5,R1                 LENGTH
         MVCL  R4,R0                 COPY RECORD TO I/O AREA
         LA    R4,REQBLOK            RESTORE I/O AREA ADDRESS
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         WRITE WKWRITE,              WRITE A RECORD                    +
               DI,                   .. WRITE DATA BY KEY              +
               WKDCB,                .. DCB                            +
               (R4),                 .. I/O AREA                       +
               REQBLOKL,             .. BLOCK SIZE                     +
               0,                    .. NO KEY ADDRESS                 +
               WKBLOCK,              .. BLOCK NUMBER                   +
               MF=(E,WKWRITE)
         CHECK WKWRITE               WAIT FOR AND COMPLETE THE I/O
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         B     EXIT0010              EXIT
* ------------------------------------------------------------------- *
*        PRINTING                                                     *
* ------------------------------------------------------------------- *
PRT0000  DS    0H
         FXCALL PRTQ,PRINT           ADD REQUEST TO PRINT QUEUE
         BR    R8                    RETURN
* ------------------------------------------------------------------- *
*        EXIT                                                         *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=CLEANUP           EXITING MASTER FILE I/O MODULE
         TM    WKFLAG,$OPEN          IS THE DCB OPEN?
         BNO   EXIT0010              NO
         MVC   WKOC(CLOSEL),CLOSEI   INITIALIZE CLOSE PARM LIST
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         CLOSE (WKDCB),MF=(E,WKOC)   CLOSE THE DCB
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         ITRACE ID=EXIT              EXITING MASTER FILE I/O MODULE
         NI    WKFLAG,255-$OPEN      RESET OPEN FLAG
         LR    R1,R13                COPY WORK AREA ADDRESS
         L     R13,4(R13)            RESTORE CALLER'S SAVE AREA ADDRESS
         FREEMAIN RU,A=(1),LV=WKL    FREE WORK AREA
         XC    COMMIOWK,COMMIOWK     CLEAR WORK AREA ADDRESS
         B     EXIT0020
EXIT0010 DS    0H
         ITRACE ID=EXIT              EXITING MASTER FILE I/O MODULE
         L     R13,4(R13)            RESTORE REGISTER 13
EXIT0020 DS    0H
         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS
         SR    R15,R15               GIVE GOOD RETURN CODE
         BR    R14                   RETURN TO CALLER
AM24     DS    0H
         LA    R15,0(R15)            CLEAR HIGH BITS
         BSM   R0,R15                RETURN IN 24-BIT MODE
AM31     DS    0H
         LA    R15,0(R15)            CLEAR HIGH BITS
         O     R15,X80               SET HIGH BIT
         BSM   R0,R15                RETURN IN 31-BIT MODE
* ------------------------------------------------------------------- *
*                                                                     *
*        Constants                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
X80      DC    A(X'80000000')
OPENI    OPEN  (*,UPDAT),MF=L
OPENL    EQU   *-OPENI
CLOSEI   CLOSE (*),MF=L
CLOSEL   EQU   *-CLOSEI
DCBI     DCB   DSORG=DA,             MASTER FILE DCB                   +
               DDNAME=MASTER,        .. DDNAME                         +
               BLKSIZE=REQBLOKL,     .. BLOCK SIZE                     +
               MACRF=(RIC,WIC),      .. READ/WRITE BY BLOCK NUMBER     +
               OPTCD=R               .. KEY IS BLOCK NUMBER
DCBL     EQU   *-DCBI
READI    READ  READDECB,             BDAM READ                         +
               DI,                   .. READ DATA (AND KEY)            +
               *,                    .. DCB                            +
               *,                    .. I/O AREA                       +
               REQBLOKL,             .. BLOCK SIZE                     +
               0,                    .. NO KEY ADDRESS                 +
               *,                    .. BLOCK NUMBER                   +
               MF=L
READL    EQU   *-READI
WRITEI   WRITE WRTDECB,              WRITE A RECORD                    +
               DI,                   .. WRITE DATA (AND KEY)           +
               *,                    .. DCB                            +
               *,                    .. I/O AREA                       +
               REQBLOKL,             .. BLOCK SIZE                     +
               0,                    .. NO KEY ADDRESS                 +
               *,                    .. BLOCK NUMBER                   +
               MF=L
WRITEL   EQU   *-WRITEI
         LTORG
* ------------------------------------------------------------------- *
*        Work areas                                                   *
* ------------------------------------------------------------------- *
WK       DSECT
WKSAVE   DS    18F                   REGISTER SAVE AREA
WKOC     DS    (OPENL)X              OPEN (AND CLOSE) PARM LIST
WKDCB    DS    (DCBL)X               DCB
WKREAD   DS    (READL)X              READ
WKWRITE  DS    (WRITEL)X             WRITE
WKBLOCK  DS    XL3                   RELATIVE BLOCK NUMBER
WKFLAG   DS    X                     FLAGS/INDICATORS
$OPEN    EQU   X'80'                 .. DCB IS OPEN
         PRTBLOK DSECT=NO
* --- REQBLOK needs to remain last, a separate base is established -- *
         REQBLOK DSECT=NO
WKL      EQU   *-WK
         MSTRREQ DSECT=YES
* ------------------------------------------------------------------- *
*              Common data map                                        *
* ------------------------------------------------------------------- *
         FXSCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*              Equates                                                *
* ------------------------------------------------------------------- *
         COPY REGEQU
         ABCODES
./ ADD NAME=FXACB    0100-99056-99056-1500-00020-00020-00000-FX-REL1

* ------------------------------------------------------------------- *
*                                                                     *
*  NAME: FXACB                                                        *
*                                                                     *
*  This module is only a list of ACB names for the TSO and batch      *
*  users to use to communicate with the STC.  The only two methods    *
*  of providing these ACB names I could think of is to assemble them  *
*  into a module (like this), or to have them in a parm data set and  *
*  read them at execution time.  I chose to use the load module       *
*  because you don't have to allocate, open, read, interpret and      *
*  edit-check, close, and de-allocate the parm data set.              *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY  OPTIONS
FXACB    CSECT
FXACB    AMODE 31
FXACB    RMODE ANY
         GENACB
         END   FXACB
./ ADD NAME=FXBCOMM  0100-99056-99056-1500-00013-00013-00000-FX-REL1

* ------------------------------------------------------------------- *
*                                                                     *
*  Name: FXBCOMM                                                      *
*                                                                     *
*  Batch interface common data and trace table manager                *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY  OPTIONS
         FXBCOMM TYPE=CSECT
         REQBLOK  DSECT=YES
         COPY  REGEQU
         END   FXBCOMM
./ ADD NAME=FXBMAIN  0100-99056-99056-1500-00156-00156-00000-FX-REL1

* ------------------------------------------------------------------- *
*                                                                     *
*  Name: FXBMAIN                                                      *
*                                                                     *
*  Batch interface mainline.                                          *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY  OPTIONS
FXBMAIN  CSECT
FXBMAIN  AMODE 31
FXBMAIN  RMODE ANY
         USING FXBMAIN,R12          DEFINE BASE
         STM   R14,R12,12(R13)      SAVE ENTRY REGISTERS
         LR    R12,R15              COPY BASE
         B     @@000001             BRANCH AROUND EYECATCHER
         DC    ((PFXMODNM-MODPRFX)-(*-FXBMAIN))X'00'
MODID    DC    CL8'FXBMAIN'         MODULE NAME
         DC    CL8'&SYSDATE'        DATE OF ASSEMBLY
         DC    CL6'&SYSTIME'        TIME OF ASSEMBLY
@@000001 DS    0H
* ------------------------------------------------------------------- *
*        Acquire storage for work areas                               *
* ------------------------------------------------------------------- *
         L     R3,DXDSIZE           WORK AREA SIZE
         GETMAIN RU,                ACQUIRE WORK AREA STORAGE          +
               LV=(R3),             .. WORK AREA SIZE IS IN R3         +
               LOC=ANY              .. MAY BE ABOVE OR BELOW
         LR    R4,R1                COPY STORAGE ADDRESS
         LR    R10,R1               COPY STORAGE ADDRESS
         LR    R2,R1                COPY WORK AREA ADDRESS
         SR    R1,R1                CLEAR REGISTER
         MVCL  R2,R0                CLEAR WORK AREA
         A     R10,DXDSTART         PLUS DISPLACEMENT TO OUR PORTION
         USING DXDBMAIN,R10         DEFINE WORK AREA BASE
         MVC   DXDID,MODID          IDENTIFY WORK AREA OWNER
         LA    R2,DXDSAVE           OUR SAVE AREA ADDRESS
         ST    R13,4(R2)            CHAIN CALLER'S SAVE AREA TO OURS
         ST    R2,8(R13)            OUR SAVE AREA TO CALLER'S
         LR    R13,R2               SET SAVE AREA ADDRESS
* ------------------------------------------------------------------- *
*        Load common data module  (FXBCOMM)                           *
* ------------------------------------------------------------------- *
         LOAD  EP=FXBCOMM           LOAD COMMON DATA MODULE
         LR    R11,R0               COPY TO PERMANENT BASE
         USING FXBCOMM,R11          DEFINE COMMON AREA BASE
         ST    R12,ABMAIN           SET MAINLINE'S ADDRESS IN COMMON
         ST    R4,COMMDXDA          SET DYNAMIC WORK AREA ADDRESS
         MVC   ABREQE,VBREQE        SET REQUEST ENTRY PROCSSOR ADDR
         MVC   ABREQI,VBREQI        SET REQUEST INQUIRY PROCESSOR ADDR
         LOAD  EP=FXUSER            LOAD USER INTERFACE SUBOUTINE
         ST    R0,AUSER             SET USER INTERFACE SUBROUTINE ADDR
         LOAD  EP=FXBPRT            PRINT MODULE
         ST    R0,ABPRT             SET PRINT MODULE ENTRY POINT
* ------------------------------------------------------------------- *
*        Acquire storage for trace table                              *
* ------------------------------------------------------------------- *
         L     R3,TRSIZE            TRACE TABLE SIZE
         GETMAIN RU,                ACQUIRE STORAGE FOR TRACE TABLE    +
               LV=(R3),             .. SIZE IS IN R3                   +
               LOC=ANY              .. MAY BE ABOVE OR BELOW
         ST    R1,TRADDR            SAVE TRACE TABLE STORAGE ADDRESS
         SR    R0,R0                ASSUME ON A 32-BYTE BOUNDARY
         TM    TRADDR+3,X'07'       ALREADY ON 32-BYTE BOUNDARY?
         BNO   INIT0010             YES
         SRL   R1,5                 SHIFT OUT LOW BITS ..
         SLL   R1,5                 .. TO ROUND TO 32-BYTE BOUNDARY
         LA    R1,32(R1)            PLUS 32
         LA    R0,TRENTRYL          1 LESS TRACE ENTRY AVAILABLE
INIT0010 DS    0H
         ST    R1,TRFIRST           FIRST TRACE ENTRY
         ST    R1,TRCURR            CURRENT TRACE ENTRY
         A     R1,TRSIZE            LAST ENTRY IN TABLE
         SH    R1,=Y(TRENTRYL)      MINUS 1 ENTRY
         SR    R1,R0                MINUS 1 MORE IF NECESSARY
         ST    R1,TRLAST            LAST TRACE ENTRY ADDRESS
* ------------------------------------------------------------------- *
*        Call parameter module                                        *
* ------------------------------------------------------------------- *
MAIN0010 DS    0H
         ITRACE ID=CALLPARM
         LOAD  EP=FXBPARM           LOAD PARAMETER CONVERTER
         LR    R15,R0               COPY ENTRY POINT ADDRESS
         BALR  R14,R15              LINK TO PARAMETER MODULE
         DELETE EP=FXBPARM          DELETE PARAMETER CONVERTER
         TM    COMMFLAG,$ABORT      ERRORS IN DURING FXBPARM?
         BO    ERR0010              YES
* ------------------------------------------------------------------- *
*        Call request processor                                       *
* ------------------------------------------------------------------- *
MAIN0020 DS    0H
         ICM   R15,15,COMMPROC      PROCESSOR ENTRY POINT (SET BY PARM)
         BZ    EXIT0000             NO PROCESSOR ADDRESS
         ITRACE ID=CALLPROC,        CALLING THE PROCESSOR              +
               RDATA1=R15
         BALR  R14,R15              LINK TO PROCESSOR
         B     EXIT0000             AND EXIT
ERR0010  DS    0H
         ITRACE ID=BADPARM          ERROR(S) IN PARM(S)
         MVI   COMMRC,100           SET RETURN CODE TO 100
         B     EXIT0000             AND EXIT
EXIT0000 DS    0H
         ITRACE ID=EXIT
         TM    COMMFLAG,$ABEND      ABEND FLAG SET?
         BO    EXIT0010             YES
         OI    COMMFLAG,$EOJ        SET EOJ
         L     R15,ABPRT            PRINT MODULE ENTRY POINT
         BALR  R14,R15              SHUTDOWN PRINT
         DELETE EP=FXBPRT           DELETE PRINT MODULE
         DELETE EP=FXUSER           DELETE USER INTERFACE SUBROUTINE
         L     R0,TRSIZE            TRACE TABLE SIZE
         L     R1,TRADDR            TRACE TABLE STORAGE ADDRESS
         FREEMAIN RU,A=(1),LV=(0)   FREEMAIN TRACE TABLE STORAGE
         L     R2,COMMDXDA          SAVE WORK AREA STORAGE ADDRESS
         SR    R3,R3                CLEAR REGISTER
         IC    R3,COMMRC            LOAD RETURN CODE
         DELETE EP=FXBCOMM          DELETE COMMON MODULE
         L     R0,DXDSIZE           WORK AREA STORAGE SIZE
         L     R13,4(R13)           RESTORE CALLER'S SAVE AREA ADDRESS
         FREEMAIN RU,A=(2),LV=(0)   FREEMAIN WORK AREA STORAGE
         L     R14,12(R13)          RESTORE R14
         LR    R15,R3               SET RETURN CODE
         LM    R0,R12,20(R13)       RESTORE REMAINING REGISTERS
         BR    R14                  EXIT
EXIT0010 DS    0H
         ABEND $U0086,DUMP,,USER
* ------------------------------------------------------------------- *
*                                                                     *
*        Constants                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSTART DC    Q(DXDBMAIN)          DISPLACEMENT TO WORK AREA
DXDSIZE  CXD                        WORK AREA TOTAL SIZE
VBREQE   DC    V(FXBREQE)           TRANSMISSION REQUEST ENTRY
VBREQI   DC    V(FXBREQI)           TRANSMISSION REQUEST INQUIRY
H8       DC    H'8'
HEX0000  DC    8X'00'
HEXCHAR  DC    C'0123456789ABCDEF'
         LTORG
* ------------------------------------------------------------------- *
*                                                                     *
*        Work area                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
DXDBMAIN DSECT
DXDID    DS    CL8                  WORK AREA OWNER
DXDSAVE  DS    18F                  REGISTER SAVE AREA
* ------------------------------------------------------------------- *
*                                                                     *
*        Common data module                                           *
*                                                                     *
* ------------------------------------------------------------------- *
         FXBCOMM TYPE=DSECT
         COPY  REGEQU
         ABCODES
         END   FXBMAIN
./ ADD NAME=FXBPARM  0100-99056-99056-1500-00918-00918-00000-FX-REL1

         TITLE 'FXBPARM   PARAMETER INTERPRETER'
         MACRO
&NAME    STMT  &KW,&RTN
         LCLA  &LEN
         AIF   (T'&KW EQ 'O').NOKEY
         AIF   (T'&RTN EQ 'O').NORTN
&LEN     SETA  K'&KW-2
         DC    AL1(&LEN)           LENGTH OF KEYWORD
         DC    AL4(&RTN)           ADDRESS OF ROUTINE
&NAME    DC    C&KW                KEYWORD
         MEXIT
.NOKEY   MNOTE 12,'NO KEYWORD'
         MEXIT
.NORTN   MNOTE 12,'NO PROCESSING ROUTINE'
         MEND
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXBPARM                                               *
*                                                                     *
*  Batch interface control statement interpreter.                     *
*                                                                     *
* ------------------------------------------------------------------- *
FXBPARM  CSECT
FXBPARM  AMODE 31
FXBPARM  RMODE 24
         USING FXBPARM,R12,R8        DEFINE BASE
         USING FXBCOMM,R11           DEFINE BASE
         USING WORK,R10              DEFINE BASE
         STM   R14,R12,12(R13)       SAVE CALLER'S REGISTERS
         LR    R12,R15               SET BASE
         LA    R8,2048(R12)          SET BASE 2
         LA    R8,2048(R8)           SET BASE 2
         B     PARM0000
         DC    ((PFXMODNM-MODPRFX)-(*-FXBPARM))X'00'
         DC    CL8'FXBPARM'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
PARM0000 DS   0H
         GETMAIN RU,                 ACQUIRE STORAGE FOR WORK AREA     +
               LV=WORKL,             .. AMOUNT OF STORAGE REQUIRED     +
               LOC=BELOW             .. FROM BELOW THE LINE
         LR    R10,R1                COPY WORK AREA ADDRESS
         LA    R1,WORKSAVE           SAVE AREA ADDRESS IN WORK AREA
         ST    R1,8(R13)             CHAIN TO PREVIOUS SAVE AREA
         ST    R13,4(R1)             CHAIN PREVIOUS TO OURS
         LR    R13,R1                SET SAVE AREA ADDRESS
         MVI   PRTCC,C' '            INITIALIZE PRINT
         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC
         MVC   WKDCB(DCBL),DCBI      INITIALIZE DCB
         MVC   WKOC(OPENL),OPENI     INITIALIZE OPEN
         LA    R2,WKDCB              DCB ADDRESS
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         OPEN  ((R2),INPUT),MF=(E,WKOC)
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
PARM0010 DS   0H
         ITRACE ID=READCARD          READ A CONTROL STATEMENT
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         GET   WKDCB,CARDDATA        READ A CONTROL RECORD
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         MVC   PRTMSGID(MSG01L),MSG01
         MVC   PRTMSGID+(MSG01D-MSG01)(L'MSG01D),CARDDATA
         BAL   R9,PRT0000            PRINT CONTROL STATEMENT
         LA    R1,STMTTBLE           STATEMENT/ROUTINE TABLE
         SR    R15,R15               CLEAR REGISTER
         USING STMTDSCT,R1           DEFINE BASE
PARM0020 DS    0H
         CLI   STMTLEN,X'FF'         END OF TABLE?
         BE    PARM0040              YES
         IC    R15,STMTLEN           LENGTH OF KEYWORD
         BCTR  R15,0                 MINUS 1
         EX    R15,STMTCLC           CONTROL KEYWORD FOUND?
         BE    PARM0030              YES
         LA    R1,STMTL+1(R1,R15)    NEXT STMT TABLE ENTRY
         B     PARM0020              LOOP
PARM0030 DS    0H
         ICM   R15,15,STMTADDR       PROCESSING ROUTINE ADDRESS
         BR    R15                   ENTER THE ROUTINE
PARM0040 DS    0H
         ITRACE ID=INVALID           INVALID STATEMENT
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG02L),MSG02
         BAL   R9,PRT0000            PRINT ERROR MESSAGE
         B     PARM0010              READ NEXT CONTROL STATEMENT
STMTCLC  CLC   STMTKYWD(0),CARDDATA
PARM0100 DS    0H
         BAL   R15,AM31              RETURN TO 31-BIT MODE
         TM    DXDFLAG,$XMIT+$STAT   BOTH XMIT AND STATUS?
         BO    PARM0120              YES
         TM    DXDFLAG,$XMIT         XMIT REQUEST?
         BO    PARM0110              YES
         TM    DXDFLAG,$STAT         STATUS REQUEST?
         BO    PARM0140              YES
         OI    COMMFLAG,$ABORT       SET ABORT
         MVC   PRTMSGID(MSG03L),MSG03
         BAL   R9,PRT0000            PRINT MESSAGE
         B     EXIT0000              AND EXIT
PARM0110 DS    0H
         TM    COMMFLAG,$ABORT       ABORT FLAG SET?
         BO    EXIT0000              YES.. EXIT NOW
         MVC   COMMPROC,ABREQE       SET PROCESSOR ADDRESS
         CLC   COMMFX,COMMBLKS       FX STC APPL NAME BLANK?
         BNE   PARM0130              NO
         MVC   PRTMSGID(MSG04L),MSG04
         BAL   R9,PRT0000            PRINT MESSAGE
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
PARM0120 DS    0H
         OI    COMMFLAG,$ABORT       SET ABORT
         MVC   PRTMSGID(MSG05L),MSG05
         BAL   R9,PRT0000            PRINT MESSAGE
         B     EXIT0000              AND EXIT
PARM0130 DS    0H
         MVC   COMMPROC,ABREQE       SET PROCESSOR ADDRESS
         B     EXIT0000              AND EXIT
PARM0140 DS    0H
         MVC   COMMPROC,ABREQI       SET PROCESSOR ADDRESS
         B     EXIT0000              AND EXIT
*---------------------------------------------------------------------*
*        Process ABEND statement                                      *
*---------------------------------------------------------------------*
ABND0000 DS    0H
         ITRACE ID=SETABEND          ABEND STATEMENT PROCESSED
         OI    COMMFLAG,$ABEND       SET ABEND FLAG
         B     PARM0010              READ NEXT STATEMENT
*---------------------------------------------------------------------*
*        Process ALIAS statement                                      *
*---------------------------------------------------------------------*
ALIAS000 DS    0H
         ITRACE ID=ALIAS
         CLI   COMMALAS,C' '         ALIAS ALREADY GIVEN?
         BE    ALIAS010              YES
         MVI   COMMALAS,C'Y'         SET SEND ALIASES
         B     PARM0010
ALIAS010 DS    0H
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG06L),MSG06       DUPLICATED ALIAS STATEMENT
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
*---------------------------------------------------------------------*
*        Process ATTEMPTS statement                                   *
*---------------------------------------------------------------------*
ATTM0000 DS    0H
         ITRACE ID=ATTEMPTS          ATTEMPTS STATEMENT PROCESSED
         CLC   UNLIMIT,CARDDATA+L'ATTMSTMT
         BE    ATTM0030              NO LIMIT TO ATTEMPTS
         LA    R1,CARDDATA+L'ATTMSTMT FIRST DIGIT
         MVC   DXDWORK(3),=C'000'    INITIALIZE TO ZERO
         LA    R2,3                  MAXIMUM DIGITS
ATTM0010 DS    0H
         CLI   0(R1),C' '            END OF DIGITS?
         BE    ATTM0020              YES
         CLI   0(R1),C'0'            INVALID DIGIT?
         BL    ATTM0040              YES
         CLI   0(R1),C'9'            INVALID DIGIT?
         BH    ATTM0040              YES
         MVC   DXDWORK(2),DXDWORK+1  SHIFT LEFT 1 DIGIT
         MVC   DXDWORK+2(1),0(R1)    COPY DIGIT
         LA    R1,1(R1)              NEXT DIGIT
         BCT   R2,ATTM0010           LOOP
ATTM0020 DS    0H
         CLI   0(R1),C' '            BLANK?
         BNE   ATTM0050              NO.. TOO MANY DIGITS
         PACK  COMMDWRD,DXDWORK(3)   PACK NUMBER OF ATTEMPTS
         CVB   R1,COMMDWRD           CONVERT TO BINARY
         LTR   R1,R1                 NUMBER OF ATTEMPTS ZERO?
         BZ    ATTM0060              YES
         ITRACE ID=ATTEMP#,          SETTING NUMBER OF ATTEMPTS        +
               RDATA1=R1
         STH   R1,COMMATTM           SAVE NUMBER OF ATTEMPTS
         B     PARM0010              READ NEXT CONTROL STATEMENT
ATTM0030 DS    0H
         OI    COMMFLAG,$NOLIMIT     INDICATE NO LIMIT TO ATTEMPTS
         B     PARM0010              READ NEXT STATEMENT
ATTM0040 DS    0H
         ITRACE ID=BADDIGIT          BAD DIGIT
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG07L),MSG07       BAD DIGIT IN ATTEMPTS
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
ATTM0050 DS    0H
         ITRACE ID=LONGATTM          TOO MANY DIGITS
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG08L),MSG08       TOO MANY DIGITS
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
ATTM0060 DS    0H
         ITRACE ID=ATTMZERO          NUMBER OF ATTEMPTS IS ZERO
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG09L),MSG09       NUMBER OF ATTEMPTS IS ZERO
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
*---------------------------------------------------------------------*
*        Process FX statement                                         *
*---------------------------------------------------------------------*
FX0000   DS    0H
         ITRACE ID=FX                FX STATEMENT BEING PROCESSED
         TM    DXDFLAG,$FX           FX APPL ALREADY SPECIFIED?
         BO    FX0030                YES
         OI    DXDFLAG,$FX           SET FX STATEMENT FLAG
         LA    R1,CARDDATA+L'FXSTMT FIRST CHARACTER OF APPL NAME
         ST    R1,PARSEIN            SET INPUT DATA ADDRESS
         LA    R1,72-L'FXSTMT        MAXIMUM INPUT LENGTH
         STH   R1,PARSEIL            SET INPUT LENGTH
         LA    R1,8                  MAXIMUM CHARACTERS IN NAME
         STH   R1,PARSEOL            SET MAXIMUM OUTPUT LENGTH
         BAL   R9,PARSE000           LINK TO PARSE
         OC    PARSEOL,PARSEOL       NAME LENGTH ZERO?
         BZ    FX0010                YES
         CLI   PARSEDLM,C' '         STOPPED ON A BLANK?
         BNE   FX0020                NO.. NAME IS TOO LONG
         ITRACE ID=GOODFX            FX NAME IS OK (AS FAR AS LENGTH)
         MVC   COMMFX,PARSEOUT       SAVE FX STC APPL NAME
         B     PARM0010              READ NEXT STATEMENT
FX0010   DS    0H
         ITRACE ID=NOFX              FX STC APPL NAME OMITTED
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG10L),MSG10       APPL NAME OMITTED
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
FX0020   DS    0H
         ITRACE ID=LONGFX            FX STC APPL NAME IS TOO LONG
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG11L),MSG11       APPL NAME IS TOO LONG
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
FX0030   DS    0H
         ITRACE ID=DUPFX             DUPLICATE FX STATEMENT
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG12L),MSG12
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
*---------------------------------------------------------------------*
*        Process DATASET statement                                    *
*---------------------------------------------------------------------*
DSN1000  DS    0H
         ITRACE ID=DSN1
         OI    DXDFLAG,$XMIT         NEW XMIT REQUEST
         TM    DXDFLAG2,$DXDDSN1     DATA SET NAME ALREADY GIVEN?
         BO    DSN1010               YES
         OI    DXDFLAG2,$DXDDSN1     DATA SET NAME STATEMENT FOUND
         LA    R1,CARDDATA+L'DSN1STMT
         ST    R1,PARSEIN            PARSE INPUT STARTING ADDRESS
         LA    R1,72-L'DSN1STMT      LENGTH OF DATA LEFT ON STATEMENT
         STH   R1,PARSEIL            SET DATA LENGTH
         LA    R1,44                 MAXIMUM DATASET NAME LENGTH
         STH   R1,PARSEOL            SET MAXIMUM OUTPUT LENGTH
         BAL   R9,PARSE000           LINK TO PARSE
         OC    PARSEOL,PARSEOL       OUTPUT LENGTH ZERO?
         BZ    DSN1020               YES
         MVC   COMMODSN,PARSEOUT     SAVE DATASET NAME
         B     PARM0010              READ NEXT STATEMENT
DSN1010  DS    0H
         ITRACE ID=DUPDSN
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG13L),MSG13       DUPLICATE DSN STATEMENT
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
DSN1020  DS    0H
         ITRACE ID=NODSN
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG14L),MSG14       DATASET NAME OMITTED
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
*---------------------------------------------------------------------*
*        PROCESS NEW DSN STATEMENT                                    *
*---------------------------------------------------------------------*
DSN2000  DS    0H
         ITRACE ID=DSN2
         OI    DXDFLAG,$XMIT         NEW XMIT REQUEST
         TM    DXDFLAG2,$DXDDSN2     NEW DSN ALREADY GIVEN?
         BO    DSN2010               YES
         OI    DXDFLAG2,$DXDDSN2     NEW DSN STATEMENT FOUND
         LA    R1,CARDDATA+L'DSN2STMT
         ST    R1,PARSEIN            PARSE INPUT STARTING ADDRESS
         LA    R1,72-L'DSN2STMT      LENGTH OF DATA LEFT ON STATEMENT
         STH   R1,PARSEIL            SET DATA LENGTH
         LA    R1,44                 MAXIMUM DATASET NAME LENGTH
         STH   R1,PARSEOL            SET MAXIMUM OUTPUT LENGTH
         BAL   R9,PARSE000           LINK TO PARSE
         OC    PARSEOL,PARSEOL       OUTPUT LENGTH ZERO?
         BZ    DSN2020               YES
         MVC   COMMDDSN,PARSEOUT     SAVE NEWNAME NAME
         B     PARM0010              READ NEXT STATEMENT
DSN2010  DS    0H
         ITRACE ID=DUPDSN
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG15L),MSG15       DUPLICATE DSN STATEMENT
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
DSN2020  DS    0H
         ITRACE ID=NODSN
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG16L),MSG16       DATASET NAME OMITTED
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
*---------------------------------------------------------------------*
*        Process MEMBER statement                                     *
*---------------------------------------------------------------------*
MEM1000  DS    0H
         ITRACE ID=MEM1
         OI    DXDFLAG,$XMIT         NEW XMIT REQUEST
         TM    DXDFLAG2,$DXDMEM1     MEMBER NAME ALREADY GIVEN?
         BO    MEM1010               YES
         OI    DXDFLAG2,$DXDMEM1     MEMBER NAME GIVEN
         LA    R1,CARDDATA+L'MEM1STMT
         ST    R1,PARSEIN            PARSE INPUT STARTING ADDRESS
         LA    R1,72-L'MEM1STMT      LENGTH OF DATA LEFT ON STATEMENT
         STH   R1,PARSEIL            SET DATA LENGTH
         LA    R1,8                  MAXIMUM NAME LENGTH
         STH   R1,PARSEOL            SET MAXIMUM OUTPUT LENGTH
         BAL   R9,PARSE000           LINK TO PARSE
         OC    PARSEOL,PARSEOL       OUTPUT LENGTH ZERO?
         BZ    DSN1020               YES
         MVC   COMMOMEM,PARSEOUT     COPY MEMBER NAME
         B     PARM0010
MEM1010  DS    0H
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG17L),MSG17       DUPLICATE MEMBER NAME
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
MEM1020  DS    0H
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG18L),MSG18       MEMBER NAME OMITTED
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
*---------------------------------------------------------------------*
*        Process NEW MEM statement                                    *
*---------------------------------------------------------------------*
MEM2000  DS    0H
         OI    DXDFLAG,$XMIT         NEW XMIT REQUEST
         TM    DXDFLAG2,$DXDMEM2     NEW MEMBER NAME ALREADY GIVEN?
         BO    MEM2010               YES
         OI    DXDFLAG2,$DXDMEM2     NEW MEMBER NAME GIVEN
         LA    R1,CARDDATA+L'MEM2STMT
         ST    R1,PARSEIN            PARSE INPUT STARTING ADDRESS
         LA    R1,72-L'MEM2STMT      LENGTH OF DATA LEFT ON STATEMENT
         STH   R1,PARSEIL            SET DATA LENGTH
         LA    R1,8                  MAXIMUM NAME LENGTH
         STH   R1,PARSEOL            SET MAXIMUM OUTPUT LENGTH
         BAL   R9,PARSE000           LINK TO PARSE
         OC    PARSEOL,PARSEOL       OUTPUT LENGTH ZERO?
         BZ    DSN2020               YES
         MVC   COMMDMEM,PARSEOUT     COPY MEMBER NAME
         B     PARM0010
MEM2010  DS    0H
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG19L),MSG19       DUPLICATE MEMBER NAME
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
MEM2020  DS    0H
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG18L),MSG18       MEMBER NAME OMITTED
         BAL   R9,PRT0000            PRINT
*---------------------------------------------------------------------*
*        Process DEST statement                                       *
*---------------------------------------------------------------------*
DEST0000 DS    0H
         ITRACE ID=DEST
         OI    DXDFLAG,$XMIT         NEW XMIT REQUEST
         LA    R1,CARDDATA+L'DESTSTMT
         ST    R1,PARSEIN            PARSE INPUT STARTING ADDRESS
         LA    R1,72-L'DESTSTMT      LENGTH OF DATA LEFT ON STATEMENT
         STH   R1,PARSEIL            SET DATA LENGTH
         LA    R1,8                  MAXIMUM DESTINATION NAME LENGTH
         STH   R1,PARSEOL            SET MAXIMUM OUTPUT LENGTH
         BAL   R9,PARSE000           LINK TO PARSE
         OC    PARSEOL,PARSEOL       OUTPUT LENGTH ZERO?
         BZ    DEST0050              YES
         LH    R1,COMMNDE#           NUMBER OF NODES
         CH    R1,=Y($MAXNODE)       TOO MANY DESTINATIONS?
         BE    DEST0060              YES
         LA    R1,1(R1)              ADD 1 TO DESTINATIONS
         STH   R1,COMMNDE#           SAVE TOTAL
         LA    R2,COMMDEST           FIRST DESTINATION
DEST0010 DS    0H
         CLC   0(L'COMMDEST,R2),COMMBLKS AVALABLE ENTRY?
         BE    DEST0020                  YES
         CLC   0(L'COMMDEST,R2),PARSEOUT DUPLICATED DESTINATION?
         BE    DEST0070                  YES
         LA    R2,L'COMMDEST(R2)         NEXT DESTINATION
         B     DEST0010                  LOOP
DEST0020 DS    0H
         MVC   0(L'COMMDEST,R2),PARSEOUT SAVE DESTINATION NAME
         B     PARM0010              READ NEXT CONTROL STATEMENT
DEST0050 DS    0H
         ITRACE ID=NODEST            DESTINATION NAME OMITTED
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG20L),MSG20
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010              READ NEXT CONTROL STATEMENT
DEST0060 DS    0H
         ITRACE ID=TOOMANY           TOO MANY DESTINATIONS
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG21L),MSG21
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010              READ NEXT CONTROL STATEMENT
DEST0070 DS    0H
         ITRACE ID=DUPDEST           DUPLICATED DESTINATION DEFINITION
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG22L),MSG22
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010              READ NEXT CONTROL STATEMENT
*---------------------------------------------------------------------*
*        Process INTERVAL statement                                   *
*---------------------------------------------------------------------*
INTV0000 DS    0H
         ITRACE ID=INTERVAL          INTERVAL STATEMENT PROCESSED
         TM    DXDFLAG2,$DXDINTV     INTERVAL STATEMENT ALREADY FOUND?
         BO    INTV0060              YES
         OI    DXDFLAG2,$DXDINTV     INTERVAL STATEMENT FOUND
         LA    R1,CARDDATA+L'INTVSTMT FIRST DIGIT
         MVC   DXDWORK(3),=C'000'    INITIALIZE TO ZERO
         LA    R2,3                  MAXIMUM DIGITS
INTV0010 DS    0H
         CLI   0(R1),C' '            END OF DIGITS?
         BE    INTV0020              YES
         CLI   0(R1),C'0'            INVALID DIGIT?
         BL    INTV0040              YES
         CLI   0(R1),C'9'            INVALID DIGIT?
         BH    INTV0040              YES
         MVC   DXDWORK(2),DXDWORK+1  SHIFT LEFT 1 DIGIT
         MVC   DXDWORK+2(1),0(R1)    COPY DIGIT
         LA    R1,1(R1)              NEXT DIGIT
         BCT   R2,INTV0010           LOOP
INTV0020 DS    0H
         CLI   0(R1),C' '            BLANK?
         BNE   INTV0050              NO.. TOO MANY DIGITS
         PACK  COMMDWRD,DXDWORK(3)   PACK NUMBER OF ATTEMPTS
         CVB   R1,COMMDWRD           CONVERT TO BINARY
         LTR   R1,R1                 ZERO?
         BZ    INTV0030              YES
         MH    R1,H100               MULTIPLY BY 100
         ST    R1,COMMINTV           SET INTERVAL
         ITRACE ID=INTVVAL,          SETTING INTERVAL VALUE            +
               RDATA1=R1
         B     PARM0010              READ NEXT CONTROL STATEMENT
INTV0030 DS    0H
         ITRACE ID=INTVZERO          INTERVAL IS ZERO
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG23L),MSG23       INTERVAL IS ZERO
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
INTV0040 DS    0H
         ITRACE ID=BADDIGIT          BAD DIGIT
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG24L),MSG24       BAD DIGIT IN INTERVAL
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
INTV0050 DS    0H
         ITRACE ID=LONGINTV          TOO MANY DIGITS
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG25L),MSG25       TOO MANY DIGITS
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
INTV0060 DS    0H
         ITRACE ID=DUPINTV           DUPLICATE INTERVAL STATEMENT
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG26L),MSG26       TOO MANY DIGITS
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
*---------------------------------------------------------------------*
*        Process REPLACE statement                                    *
*---------------------------------------------------------------------*
REPL0000 DS    0H
         ITRACE ID=REPLACE
         CLI   COMMREPL,C' '         REPLACE ALREADY GIVEN?
         BE    REPL0010              YES
         MVI   COMMREPL,C'Y'         SET DO REPLACE
         B     PARM0010
REPL0010 DS    0H
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG27L),MSG27     DUPLICATED REPLACE STATEMENT
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
*---------------------------------------------------------------------*
*        Process STATUS statement                                     *
*---------------------------------------------------------------------*
STAT0000 DS    0H
         ITRACE ID=STATUS            XMITFX STATEMENT BEING PROCESSED
         OI    DXDFLAG,$STAT         STATUS REQUEST
         OC    COMMNBR,COMMNBR       STATUS STATEMENT ALREADY FOUND?
         BNE   STAT0020              YES
         LA    R1,CARDDATA+L'STATSTMT FIRST DIGIT OF REQUEST NUMBER
         ST    R1,PARSEIN            SET INPUT DATA ADDRESS
         LA    R1,72-L'STATSTMT      MAXIMUM INPUT LENGTH
         STH   R1,PARSEIL            SET INPUT LENGTH
         LA    R1,8                  MAXIMUM CHARACTERS IN NODE NAME
         STH   R1,PARSEOL            SET MAXIMUM OUTPUT LENGTH
         BAL   R9,PARSE000           LINK TO PARSE
         OC    PARSEOL,PARSEOL       NAME LENGTH ZERO?
         BZ    STAT0060              YES
         CLI   PARSEDLM,C','         STOPPED ON A COMMA?
         BNE   STAT0030              NO.. INVALID
         MVC   COMMNODE,PARSEOUT     COPY NODE NAME
         LA    R1,9                  MAXIMUM DIGITS IN REQUEST NUMBER
         STH   R1,PARSEOL            SET MAXIMUM OUTPUT LENGTH
         BAL   R9,PARSE000           LINK TO PARSE
         OC    PARSEOL,PARSEOL       REQUEST NUMBER LENGTH ZERO?
         BZ    STAT0030
         CLI   PARSEDLM,C' '         STOPPED ON A BLANK?
         BNE   STAT0040              NO.. REQUEST NUMBER IS TOO LONG
         LA    R1,PARSEOUT           FIRST DIGIT
         LH    R2,PARSEOL            NUMBER OF DIGITS
STAT0010 DS    0H
         CLI   0(R1),C'0'            VALID DIGIT?
         BL    STAT0050              NO
         CLI   0(R1),C'9'            VALID DIGIT?
         BH    STAT0050              NO
         LA    R1,1(R1)              NEXT DIGIT
         BCT   R2,STAT0010           LOOP
         LH    R2,PARSEOL            LENGTH (AGAIN)
         BCTR  R2,0                  ADJUST FOR EX
         EX    R2,STATPACK           PACK REQUEST NUMBER
         CVB   R1,COMMDWRD           CONVERT TO BINARY
         ST    R1,COMMNBR            SET REQUEST NUMBER
         MVC   COMMDDSN,PARSEOUT     SAVE NEWNAME NAME
         B     PARM0010              READ NEXT STATEMENT
STAT0020 DS    0H
         OI    COMMFLAG,$ABORT       SET ABORT
         MVC   PRTMSGID(MSG28L),MSG28       DUPLICATE STATUS STMT
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
STAT0030 DS    0H
         OI    COMMFLAG,$ABORT       SET ABORT
         MVC   PRTMSGID(MSG29L),MSG29       REQUEST NUMBER OMITTED
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
STAT0040 DS    0H
         OI    COMMFLAG,$ABORT       SET ABORT
         MVC   PRTMSGID(MSG30L),MSG30       REQUEST NUMBER TOO LONG
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
STAT0050 DS    0H
         OI    COMMFLAG,$ABORT       SET ABORT
         MVC   PRTMSGID(MSG31L),MSG31       BAD DIGIT IN IN REQUEST #
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
STAT0060 DS    0H
         OI    COMMFLAG,$ABORT       SET ABORT
         MVC   PRTMSGID(MSG32L),MSG32       NODE NAME OMITTED
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
STATPACK PACK  COMMDWRD,PARSEOUT(1)  PACK REQUEST NUMBER
*---------------------------------------------------------------------*
*        Process XMITFX statement                                     *
*---------------------------------------------------------------------*
XMIT0000 DS    0H
         ITRACE ID=XMITFX            XMITFX STATEMENT BEING PROCESSED
         OI    DXDFLAG,$XMIT         NEW XMIT REQUEST
         CLC   COMMTNDE,COMMBLKS     XMITFX ALREADY SPECIFIED?
         BNE   XMIT0030              YES
         LA    R1,CARDDATA+L'FXSTMT FIRST CHARACTER OF APPL NAME
         ST    R1,PARSEIN            SET INPUT DATA ADDRESS
         LA    R1,72-L'FXSTMT        MAXIMUM INPUT LENGTH
         STH   R1,PARSEIL            SET INPUT LENGTH
         LA    R1,8                  MAXIMUM CHARACTERS IN NAME
         STH   R1,PARSEOL            SET MAXIMUM OUTPUT LENGTH
         BAL   R9,PARSE000           LINK TO PARSE
         OC    PARSEOL,PARSEOL       NAME LENGTH ZERO?
         BZ    XMIT0010              YES
         CLI   PARSEDLM,C' '         STOPPED ON A BLANK?
         BNE   XMIT0020              NO.. NAME IS TOO LONG
         ITRACE ID=GOODXMIT          FX NAME IS OK (AS FAR AS LENGTH)
         MVC   COMMTNDE,PARSEOUT     SAVE XMITFX NAME
         B     PARM0010              READ NEXT STATEMENT
XMIT0010 DS    0H
         ITRACE ID=NOXMIT            XMITFX STC APPL NAME OMITTED
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG33L),MSG33       APPL NAME OMITTED
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
XMIT0020 DS    0H
         ITRACE ID=LONGXMIT          XMITFX STC APPL NAME IS TOO LONG
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG34L),MSG34      XMIT APPL NAME IS TOO LONG
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
XMIT0030 DS    0H
         ITRACE ID=DUPXMIT           DUPLICATE XMITFX STATEMENT
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG35L),MSG35
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
* ------------------------------------------------------------------- *
*                                                                     *
*  Parsing                                                            *
*                                                                     *
*  At entry:                                                          *
*     PARSEIN  must be set to the data starting address               *
*     PARSEIL  must be set to the data length                         *
*     PARSEOL  must be set to the maximum output length               *
*                                                                     *
*  At exit:                                                           *
*     PARSEIN  will be set the address of the byte following the      *
*              delimiter that stopped the scan                        *
*     PARSEIL  will be set to the length of the data following the    *
*              delimiter                                              *
*     PARSEOUT will be the data up to but not including the delimiter *
*     PARSEOL  will be set to the length of the data in PARSEOUT      *
*     PARSEDLM will be set to the delimiter that stopped the scan or  *
*              to a null if the scan stopped due to end of data       *
*                                                                     *
* ------------------------------------------------------------------- *
PARSE000 DS    0H
         ITRACE ID=PARSE,            STARTING A PARSE                  +
               DATA1=PARSEIN,        .. STARTING ADDRESS               +
               DATA2=PARSEIL         .. INPUT AND OUTPUT LENGTHS
         MVC   PARSEOUT,COMMBLKS     CLEAR OUTPUT DATA
         LH    R1,PARSEIL            INPUT DATA LENGTH
         LH    R2,PARSEOL            MAXIMUM OUTPUT LENGTH
         L     R3,PARSEIN            INPUT DATA ADDRESS
         LA    R4,PARSEOUT           OUTPUT DATA ADDRESS
         SR    R5,R5                 INITIALIZE FOR OUTPUT LENGTH
         MVI   PARSEDLM,0            SET DELIMITER TO A NULL
         LTR   R1,R1                 ANY DATA LEFT?
         BZ    PARSE050              NO
PARSE010 DS    0H
         CLI   0(R3),C' '            BLANK?
         BNE   PARSE020              NO
         LA    R3,1(R3)              NEXT
         BCT   R1,PARSE010           LOOP
         B     PARSE050
PARSE020 DS    0H
         CLI   0(R3),C' '            BLANK?
         BE    PARSE040              YES
         CLI   0(R3),C','            COMMA?
         BE    PARSE040              YES
         MVC   0(1,R4),0(R3)         COPY TO OUTPUT
         LA    R3,1(R3)              NEXT
         LA    R4,1(R4)              NEXT
         LA    R5,1(R5)              PLUS 1 BYTE OF LENGTH
         BCT   R1,PARSE030           MINUS 1 BYTE OF INPUT
         B     PARSE050              FORCE EXIT
PARSE030 DS    0H
         BCT   R2,PARSE020           LOOP
         CLI   0(R3),C' '            BLANK?
         BE    PARSE040              YES
         CLI   0(R3),C','            COMMA?
         BNE   PARSE050              NO
PARSE040 DS    0H
         MVC   PARSEDLM,0(R3)        SAVE DELIMITER
         LA    R3,1(R3)              SKIP DELIMITER
         BCTR  R1,0                  MINUS BYTE USED BY DELIMITER
PARSE050 DS    0H
         STH   R1,PARSEIL            SAVE INPUT LENGTH LEFT
         STH   R5,PARSEOL            SAVE OUTPUT LENGTH
         ST    R3,PARSEIN            SAVE INPUT ENDING POINT
         ITRACE ID=PARSEOUT,         PARSE ENDING                      +
               DATA1=PARSEOUT,       .. PART OF OUTPUT DATA            +
               DATA2=PARSEOL         .. OUTPUT LENGTH
         LM    R1,R5,PARSESAV        RESTORE SAVED REGISTERS
         BR    R9                    EXIT
* ------------------------------------------------------------------- *
*        PRINTING                                                     *
* ------------------------------------------------------------------- *
PRT0000  DS    0H
         ITRACE ID=PRINT
         MVI   PRTCMD,$PRTPRT        SET COMMAND
         LA    R1,PRTBLOK            PRINT PARAMETERS
         L     R15,ABPRT             PRINT ENTRY POINT
         BALR  R14,R15               LINK TO PRINT
         MVI   PRTCC,C' '            CLEAR PRINT AREA
         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC
         BR    R9                    RETURN
* ------------------------------------------------------------------- *
*        EXIT                                                         *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         MVC   WKOC(CLOSEL),CLOSEI   COPY CLOSE
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         LA    R2,WKDCB              DCB ADDRESS
         CLOSE ((R2)),MF=(E,WKOC)    CLOSE DCB
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         ITRACE ID=EXIT              EXITING PARAMETER CONVERTER
         LR    R1,R13                SAVE SAVE AREA ADDRESS
         L     R13,4(R13)            RESTORE REGISTER 13
         FREEMAIN RU,A=(1),LV=WORKL  FREEMAIN WORK AREA
         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS
         SR    R15,R15               GIVE GOOD RETURN CODE
         BR    R14                   RETURN TO CALLER
AM24     DS    0H
         LA    R15,0(R15)            CLEAR HIGH BIT(S)
         BSM   R0,R15                SWITCH TO 24-BIT MODE
AM31     DS    0H
         LA    R15,0(R15)            CLEAR HIGH BIT(S)
         O     R15,X80               TURN ON 31-BIT MODE BIT
         BSM   R0,R15                SWITCH TO 31-BIT MODE
* ------------------------------------------------------------------ *
*                                                                    *
*        CONSTANTS                                                   *
*                                                                    *
* ------------------------------------------------------------------ *
X80      DC    A(X'80000000')
H8       DC    H'8'                  CONSTANT
H15      DC    H'15'                 CONSTANT
H100     DC    H'100'                CONSTANT
STMTTBLE DS    0C
         STMT  'ABEND',ABND0000
         STMT  'ALIAS',ALIAS000
ATTMSTMT STMT  'ATTEMPTS=',ATTM0000
DESTSTMT STMT  'DEST=',DEST0000
DSN1STMT STMT  'DSN=',DSN1000
FXSTMT   STMT  'FX=',FX0000
INTVSTMT STMT  'INTERVAL=',INTV0000
MEM1STMT STMT  'MEMBER=',MEM1000
DSN2STMT STMT  'NEW DSN=',DSN2000
MEM2STMT STMT  'NEW MEM=',MEM2000
         STMT  'REPLACE ',REPL0000
STATSTMT STMT  'STATUS=',STAT0000
         STMT  'XMITFX=',XMIT0000
         DC    X'FF'
UNLIMIT  DC    C'UNLIMITED '         UNLIMITED NUMBER OF WAITS
MSG01    DS    0C
         DC    CL11'FXBPARM01I'
         DC    C'CONTROL STATEMENT:'
         DC    C' '
MSG01D   DC    CL80' '
MSG01L   EQU   *-MSG01
MSG02    DS    0C
         DC    CL11'FXBPARM02E'
         DC    C'INVALID CONTROL STATEMENT'
MSG02L   EQU   *-MSG02
MSG03    DS    0C
         DC    CL11'FXBPARM03E'
         DC    C'NO NEW XMIT REQUEST OR STATUS REQUEST FOUND'
MSG03L   EQU   *-MSG03
MSG04    DS    0C
         DC    CL11'FXBPARM04E'
         DC    C'REQUIRED PARAMETER ''FX'' NOT SPECIFIED OR BLANK'
MSG04L   EQU    *-MSG04
MSG05    DS    0C
         DC    CL11'FXBPARM05E'
         DC    C'BOTH XMIT REQUEST AND STATUS REQUEST FOUND'
MSG05L   EQU   *-MSG05
MSG06    DS    0C
         DC    CL11'FXBPARM06E'
         DC    C'DUPLICATE ALIAS STATEMENT'
MSG06L   EQU   *-MSG06
MSG07    DS    0C
         DC    CL11'FXBPARM07E'
         DC    C'INVALID DIGIT IN ATTEMPTS VALUE'
MSG07L   EQU    *-MSG07
MSG08    DS    0C
         DC    CL11'FXBPARM08E'
         DC    C'TOO MANY DIGITS IN ATTEMPTS VALUE'
MSG08L   EQU    *-MSG08
MSG09    DS    0C
         DC    CL11'FXBPARM09E'
         DC    C'NUMBER OF ATTEMPTS MAY NOT BE ZERO'
MSG09L   EQU   *-MSG09
MSG10    DS    0C
         DC    CL11'FXBPARM10E'
         DC    C'FX STC NAME OMITTED'
MSG10L   EQU   *-MSG10
MSG11    DS    0C
         DC    CL11'FXBPARM11E'
         DC    C'FX STC APPLID IS TOO LONG (MAX IS 8 CHARACTERS)'
MSG11L   EQU   *-MSG11
MSG12    DS    0C
         DC    CL11'FXBPARM12E'
         DC    C'DUPLICATE FX STC APPL ID STATEMENT'
MSG12L   EQU   *-MSG12
MSG13    DS    0C
         DC    CL11'FXBPARM13E'
         DC    C'DUPLICATE DSN= STATEMENT'
MSG13L   EQU    *-MSG13
MSG14    DS    0C
         DC    CL11'FXBPARM14E'
         DC    C'DATASET NAME OMITTED'
MSG14L   EQU    *-MSG14
MSG15    DS    0C
         DC    CL11'FXBPARM15E'
         DC    C'DUPLICATE NEW DSN= STATEMENT'
MSG15L   EQU    *-MSG15
MSG16    DS    0C
         DC    CL11'FXBPARM16E'
         DC    C'NEW NAME OMITTED'
MSG16L   EQU    *-MSG16
MSG17    DS    0C
         DC    CL11'FXBPARM17E'
         DC    C'DUPLICATE MEM= STATEMENT'
MSG17L   EQU   *-MSG17
MSG18    DS    0C
         DC    CL11'FXBPARM18E'
         DC    C'MEMBER NAME OMITTED'
MSG18L   EQU   *-MSG18
MSG19    DS    0C
         DC    CL11'FXBPARM19E'
         DC    C'DUPLICATE NEW MEM= STATEMENT'
MSG19L   EQU   *-MSG19
MSG20    DS    0C
         DC    CL11'FXBPARM20E'
         DC    C'DESTINATION NAME OMITTED'
MSG20L   EQU   *-MSG20
MSG21    DS    0C
         DC    CL11'FXBPARM21E'
         DC    C'TOO MANY DESTINATIONS'
MSG21L   EQU   *-MSG21
MSG22    DS    0C
         DC    CL11'FXBPARM22E'
         DC    C'DUPLICATED DESTINATION DEFINITION'
MSG22L   EQU   *-MSG22
MSG23    DS    0C
         DC    CL11'FXBPARM23E'
         DC    C'INTERVAL MAY NOT BE ZERO'
MSG23L   EQU   *-MSG23
MSG24    DS    0C
         DC    CL11'FXBPARM24E'
         DC    C'INVALID DIGIT IN INTERVAL'
MSG24L   EQU   *-MSG24
MSG25    DS    0C
         DC    CL11'FXBPARM25E'
         DC    C'INTERVAL HAS TOO MANY DIGITS (3 IS MAX)'
MSG25L   EQU   *-MSG25
MSG26    DS    0C
         DC    CL11'FXBPARM26E'
         DC    C'DUPLICATE INTERVAL STATEMENT'
MSG26L   EQU   *-MSG26
MSG27    DS    0C
         DC    CL11'FXBPARM27E'
         DC    C'DUPLICATE REPLACE STATEMENT'
MSG27L   EQU   *-MSG27
MSG28    DS    0C
         DC    CL11'FXBPARM28E'
         DC    C'DUPLICATE STATUS REQUEST'
MSG28L   EQU   *-MSG28
MSG29    DS    0C
         DC    CL11'FXBPARM29E'
         DC    C'REQUEST NUMBER OMITTED'
MSG29L   EQU   *-MSG29
MSG30    DS    0C
         DC    CL11'FXBPARM30E'
         DC    C'REQUEST NUMBER IS TOO LONG (9 DIGITS MAX)'
MSG30L   EQU   *-MSG30
MSG31    DS    0C
         DC    CL11'FXBPARM31E'
         DC    C'INVALID DIGIT IN REQUEST NUMBER'
MSG31L   EQU   *-MSG31
MSG32    DS    0C
         DC    CL11'FXBPARM32E'
         DC    C'NODE NAME OMITTED ON A STATUS REQUEST'
MSG32L   EQU   *-MSG32
MSG33    DS    0C
         DC    CL11'FXBPARM33E'
         DC    C'XMITFX NAME OMITTED'
MSG33L   EQU   *-MSG33
MSG34    DS    0C
         DC    CL11'FXBPARM34E'
         DC    C'XMITFX NAME IS TOO LONG'
MSG34L   EQU   *-MSG34
MSG35    DS    0C
         DC    CL11'FXBPARM35E'
         DC    C'DUPLICATE XMITFX STATEMENT'
MSG35L   EQU   *-MSG35
DCBI     DCB   DDNAME=FXIN,          CONTROL STATEMENT DCB             +
               DSORG=PS,             .. SEQUENTIAL                     +
               EODAD=PARM0100,       .. END OF DATA                    +
               LRECL=80,             .. 80-BYTE RECORDS    0H          +
               RECFM=FB,             .. FIXED/BLOCKED                  +
               MACRF=GM              .. GET/MOVE MODE
DCBL     EQU   *-DCBI
OPENI    OPEN  (*,INPUT),MF=L
OPENL    EQU   *-OPENI
CLOSEI   CLOSE (*),MF=L
CLOSEL   EQU   *-CLOSEI
         LTORG
* ------------------------------------------------------------------- *
*                                                                     *
*        WORK AREAS                                                   *
*                                                                     *
* ------------------------------------------------------------------- *
WORK     DSECT
WORKSAVE DS    18F                   REGISTER SAVE AREA
PARSESAV DS    5F                    REGISTER SAVE AREA FOR PARSE
PARSEIN  DS    A                     PARSE DATA INPUT ADDRESS
PARSEIL  DS    H                     LENGTH OF DATA AT PARSE IN
PARSEOL  DS    H                     LENGTH OF DATA IN PARSE OUT
DXDLEN   DS    H                     WORK LENGTH
DXDFLAG  DS    X                     FLAGS
$XMIT    EQU   X'80'                 NEW XMIT REQUEST
$STAT    EQU   X'40'                 STATUS REQUEST
$FX      EQU   X'20'                 FX STATEMENT PROCESSED
DXDFLAG2 DS    X
$DXDDSN1 EQU   X'80'
$DXDDSN2 EQU   X'40'
$DXDMEM1 EQU   X'20'
$DXDMEM2 EQU   X'10'
$DXDINTV EQU   X'08'
PARSEOUT DS    CL80                  OUTPUT FROM PARSE
PARSEDLM DS    C                     DELIMITER THAT STOPPED PARSE
DXDWORK  DS    CL44                  WORK AREA
         PRTBLOK  DSECT=NO
CARDDATA DS    CL80
WKDCB    DS    (DCBL)X
WKOC     DS    (OPENL)X
WORKL    EQU   *-WORK
* ------------------------------------------------------------------- *
*              CONTROL STATEMENT TABLE MAP                            *
* ------------------------------------------------------------------- *
STMTDSCT DSECT
STMTLEN  DS    X                     KEYWORD LENGTH
STMTADDR DS    AL4                   PROCESSING ROUTINE ADDRESS
STMTKYWD DS    0C                    KEYWORD
STMTL    EQU   *-STMTDSCT            FIXED LENGTH PER ENTRY
* ------------------------------------------------------------------- *
*              COMMON DATA MAP                                        *
* ------------------------------------------------------------------- *
         FXBCOMM   TYPE=DSECT
* ------------------------------------------------------------------- *
*              REQUEST BLOCK                                          *
* ------------------------------------------------------------------- *
         REQBLOK   DSECT=YES
* ------------------------------------------------------------------- *
*              EQUATES                                                *
* ------------------------------------------------------------------- *
         COPY REGEQU
         END  FXBPARM
./ ADD NAME=FXBPRT   0100-99056-99056-1500-00236-00236-00000-FX-REL1

         TITLE 'FXBPRT    BATCH PRINT'
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXBPRT                                                *
*                                                                     *
*   This module allows a common point for printing.  Also most of     *
*   the code is 24-bit, I/O still must be done from 24-bit storage,   *
*   so this module is linked separately with RMODE 24.                *
*                                                                     *
* ------------------------------------------------------------------- *
FXBPRT   CSECT
FXBPRT   AMODE 31
FXBPRT   RMODE 24
         USING FXBPRT,R12            DEFINE BASE
         USING FXBCOMM,R11           DEFINE BASE
         STM   R14,R12,12(R13)       CHAIN REGISTERS
         LR    R12,R15               COPY ENTRY POINT ADDRESS
         LR    R7,R1                 COPY PRINT BLOCK ADDRESS
         USING PRTBLOK,R7            DEFINE BASE
         B     PRT0000
         DC    ((PFXMODNM-MODPRFX)-(*-FXBPRT))X'00'
         DC    CL8'FXBPRT'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
PRT0000  DS    0H
         ICM   R1,15,COMMPRTW        WORK AREA ACQUIRED?
         BNZ   PRT0010               YES
         GETMAIN RU,                 ACQUIRE WORK AREA                 +
               LV=WORKL,             .. AREA SIZE                      +
               LOC=BELOW             .. FROM 24-BIT AREA
         USING WORKAREA,R1           DEFINE BASE
         ST    R1,COMMPRTW           SAVE WORK AREA ADDRESS
         XC    WORKAREA+000(256),WORKAREA+000
         XC    WORKAREA+256(WORKL-256),WORKAREA+000
PRT0010  DS    0H
         ST    R13,4(R1)             CHAIN PREVIOUS SAVE AREA TO OURS
         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO PREVIOUS
         LR    R13,R1                COPY WORK AREA ADDRESS
         ITRACE ID=ENTRY
         DROP  R1
         USING WORKAREA,R13          DEFINE BASE
         TM    WKFLAG,$OPEN          IS DCB OPEN?
         BO    PRT0020               YES
         ITRACE ID=INIT
         MVC   WKDCB(DCBL),DCBI      INITIALIZE DCB IN WORK AREA
         MVI   WKCC,C' '             INITIALIZE CARRIAGE CONTROL
         MVC   WKDATE(PRTLRECL-1),WKCC
         MVC   WKOCPL(OCPLL),OCPLI   INITIALIZE OPEN/CLOSE PARM LIST
         ZAP   WKLINE,P0             INITIALIZE LINE COUNT
         ZAP   WKPAGE,P0             INITIALIGE PAGE COUNT
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         OPEN  (WKDCB,OUTPUT),MF=(E,WKOCPL)
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         OI    WKFLAG,$OPEN          INDICATE DCB IS OPEN
         BAL   R9,PRT0200            PRINT INITIAL HEADING
PRT0020  DS    0H
         TM    COMMFLAG,$EOJ         SHUTDOWN?
         BO    EXIT0000              YES
         CLI   PRTCMD,$PRTHEAD       FORCED HEADING?
         BE    PRT0090               YES
         MVC   WKCC,PRTCC            COPY CARRIAGE CONTROL
         TIME  DEC
         STM   R0,R1,WKTIMDAY        SAVE TIME AND DATE
         MVC   WKTIME,TIMEEDWD       INITIALIZE WITH EDIT WORD
         ED    WKTIME,WKTIMDAY       EDIT TIME
         MVC   WKDATE,DATEEDWD       INITIALIZE WITH EDIT WORD
         ED    WKDATE,WKTIMDAY+5     EDIT DATE
         MVC   WKMSGID,PRTMSGID      COPY MESSAGE ID
         LA    R1,WKMSGID+(L'WKMSGID-1)
PRT0030  DS    0H
         CLI   0(R1),C' '            BLANK?
         BNE   PRT0040               NO
         BCT   R1,PRT0030            LOOP
PRT0040  DS    0H
         CLI   0(R1),C'E'            'ERROR' MESSAGE
         BNE   PRT0050
         MVI   WKMSGERR,C'*'         FLAG ERROR MESSAGE
PRT0050  DS    0H
         LA    R1,WKDATA             FIRST PRINT AREA BYTE
         LA    R2,PRTDATA            PRINT OUTPUT AREA BYTE
         LA    R3,L'PRTDATA          MAXIMUM LOOPS
PRT0060  DS    0H
         CLC   COMMBLKS(2),0(R2)     2 BLANKS IN A ROW?
         BE    PRT0070               YES
         MVC   0(1,R1),0(R2)         COPY TO OUTPUT AREA
         LA    R1,1(R1)              NEXT OUTPUT BYTE
PRT0070  DS    0H
         LA    R2,1(R2)              NEXT INPUT BYTE
         BCT   R3,PRT0060            LOOPS
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         PUT   WKDCB,WKCC            PRINT
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         AP    WKLINE,P1             ADD 1 TO LINE COUNT
         CLI   WKCC,C' '             SINGLE SPACE
         BE    PRT0080               YES
         AP    WKLINE,P1             ADD 1 TO LINE COUNT
         CLI   WKCC,C'0'             DOUBLE SPACE?
         BE    PRT0080               YES
         AP    WKLINE,P1             ADD 1 TO LINE COUNT
PRT0080  DS    0H
         MVI   WKCC,C' '             INITIALIZE CARRIAGE CONTROL
         MVC   WKDATE(PRTLRECL-1),WKCC
         CP    WKLINE,MAXLINE        TIME FOR HEADING?
         BNH   EXIT0000              NOT YET
         BAL   R9,PRT0200            PRINT HEADING
         B     EXIT0000              EXIT
PRT0090  DS    0H
         ITRACE ID=FORCEHD
         BAL   R9,PRT0200            PRINT HEADING
         B     EXIT0000              AND EXIT
PRT0200  DS    0H
         AP    WKPAGE,P1             ADD 1 TO PAGE COUNT
         MVC   WKDATA(HEADINGL),HEADING
         MVC   WKDATA+(HEADPAGE-HEADING)(L'HEADPAGE),PAGEEDWD
         ED    WKDATA+(HEADPAGE-HEADING)(L'HEADPAGE),WKPAGE
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         PUT   WKDCB,WKCC            PRINT
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         ZAP   WKLINE,P1             RESET LINE COUNT
         MVI   WKCC,C' '             INITIALIZE CARRIAGE CONTROL
         MVC   WKDATE(PRTLRECL-1),WKCC
         BR    R9                    RETURN
* ------------------------------------------------------------------- *
*        ADDRESSING MODE SWITCHING                                    *
* ------------------------------------------------------------------- *
AM24     DS    0H
         LA    R15,0(R15)            CLEAR HIGH BIT(S)
         BSM   R0,R15                RETURN IN 24-BIT MODE
AM31     DS    0H
         LA    R15,0(R15)            CLEAR HIGH BIT(S)
         O     R15,X80               SET HIGH BIT ON
         BSM   R0,R15                RETURN IN 31-BIT MODE
* ------------------------------------------------------------------- *
*        EXIT                                                         *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         TM    COMMFLAG,$EOJ         SHUTDOWN?
         BNO   EXIT0010              NO
         ITRACE ID=CLOSE
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         CLOSE WKDCB,MF=(E,WKOCPL)   CLOSE DCB
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         LR    R1,R13                COPY WORK AREA ADDRESS
         L     R13,4(R13)            RESTORE REGISTER 13
         FREEMAIN R,A=(1),LV=WORKL   FREE WORK AREA
         XC    COMMPRTW,COMMPRTW     CLEAR PRINT WORK AREA ADDRESS
         B     EXIT0020
EXIT0010 DS    0H
         L     R13,4(R13)            RESTORE CALLER'S SAVE AREA ADDRESS
EXIT0020 DS    0H
         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS
         SR    R15,R15               GIVE GOOD RETURN CODE
         BR    R14                   RETURN TO CALLER
PRTMVC   MVC   WKDATE(0),PRTDATA     COPY PRINT DATA
* ------------------------------------------------------------------- *
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
X80      DC    A(X'80000000')
DATEEDWD DC    X'4021204B202020'
TIMEEDWD DC    X'4021204B20204B2020'
PAGEEDWD DC    X'402020202120'
P0       DC    P'0'
P1       DC    P'1'
MAXLINE  DC    P'&MAXL'
HEADING  DS    0C
         DC    48C' '
         DC    C'BATCH FX LOG'
         DC    48C' '
         DC    C'PAGE '
HEADPAGE DC    CL6' '
HEADINGL EQU   *-HEADING
DCBI     DCB   DSORG=PS,                                               +
               DDNAME=FXPRT,                                           +
               RECFM=FBA,                                              +
               LRECL=PRTLRECL,                                         +
               MACRF=PM
DCBL     EQU   *-DCBI
OCPLI    OPEN  (*,OUTPUT),MF=L
OCPLL    EQU   *-OCPLI
         LTORG
* ------------------------------------------------------------------- *
*                                                                     *
*        WORK AREAS                                                   *
*                                                                     *
* ------------------------------------------------------------------- *
WORKAREA DSECT
WORKSAVE DS    18F                   REGISTER SAVE AREA
WKTIMDAY DS    2F                    TIME/DATE
WKLINE   DS    PL3
WKPAGE   DS    PL3
WKFLAG   DS    X                     FLAGS/INDICATORS
$OPEN    EQU   X'80'                 .. PRINT DCB IS OPEN
WKCC     DS    C                     CARRIAGE CONTROL
WKDATE   DS    CL7                   DATE
         DS    C
WKTIME   DS    CL9                   TIME
         DS    C
WKMSGID  DS    CL11                  MESSAGE ID
         DS    C
WKMSGERR DS    C                     ERROR MESSAGE FLAG
         DS    C
WKDATA   DS    CL120                 PRINT DATA
PRTLRECL EQU   *-WKCC
WKDCB    DS    0A,(DCBL)X            RESERVE SPACE FOR DCB
WKOCPL   DS    (OCPLL)X
WORKL    EQU   *-WORKAREA
* ------------------------------------------------------------------- *
*                                                                     *
*              COMMON DATA MAP                                        *
*                                                                     *
* ------------------------------------------------------------------- *
         FXBCOMM TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
*              REQUEST BLOCK                                          *
*                                                                     *
* ------------------------------------------------------------------- *
         REQBLOK  DSECT=YES
* ------------------------------------------------------------------- *
*                                                                     *
*              PRINT REQUEST BLOCK                                    *
*                                                                     *
* ------------------------------------------------------------------- *
         PRTBLOK
* ------------------------------------------------------------------- *
*                                                                     *
*              EQUATES                                                *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY REGEQU
         END  FXBPRT
./ ADD NAME=FXBREQE  0100-99056-99056-1500-00103-00103-00000-FX-REL1

         TITLE 'FXBREQE  BATCH TRANSMISSION REQUEST ENTRY'
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  MODULE NAME: FXBREQE                                               *
*                                                                     *
*  Batch interface transmission request entry:                        *
*   1) Build the request                                              *
*   2) Send request to FX                                             *
*   3) Print message returned by FX STC                               *
*   4) Set return code for mainline                                   *
*                                                                     *
* ------------------------------------------------------------------- *
BREQE    FXPRFX 'BATCH INTERFACE TRANSMISSION REQUEST ENTRY',          +
               COMM=FXBCOMM
FXBREQE  AMODE 31
FXBREQE  RMODE ANY
         CLC   DXDID,MODID           WORK AREA INITIALIZED?
         BE    BREQ0010              YES
         ITRACE ID=INIT
         MVC   DXDID,MODID           WORK AREA INITIALIZED
         MVI   PRTCC,C' '            INITIALIZE PRINT I/O AREA
         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC
BREQ0010 DS    0H
         ITRACE ID=BLDREQ
         MVC   PARMFX,COMMFX         SET NODE WHERE REQUEST WAS ENTERED
         MVC   PARMXFX,COMMFX        ASSUME SAME FX WILL TRANSMIT
         CLC   COMMTNDE,COMMBLKS     NODE NAME GIVEN BY USER?
         BE    BREQ0020              NO
         MVC   PARMXFX,COMMTNDE      OVER-RIDE NODE NAME
BREQ0020 DS    0H
         MVC   PARMODSN,COMMODSN     SET ORIGINAL DATASET'S NAME
         MVC   PARMOMEM,COMMOMEM     SET ORIGINAL MEMBER NAME
         MVC   PARMDDSN,COMMDDSN     SET DATASET NAME AT DESTINATION(S)
         MVC   PARMDMEM,COMMDMEM     SET MEMBER NAME AT DESTINATION(S)
         MVC   PARMREPL,COMMREPL     SET REPLACE INDICATOR
         MVC   PARMALAS,COMMALAS     SET ALIAS INDICATOR
         MVC   PARMNDE#,COMMNDE#     SET NUMBER OF NODES
         LA    R1,PARMNDNM           FIRST DESTINATION NODE NAME
         USING PARMNDNM,R1           DEFINE TEMP BASE
         LA    R2,COMMDEST           FIRST DESTINATION
         LA    R3,&MAXNDE            NUMBER OF NODES
BREQ0030 DS    0H
         MVC   PARMNDNM,0(R2)        COPY DESTINATION NAME
         LA    R1,PARMNDL(R1)        NEXT NODE
         LA    R2,L'COMMDEST(R2)     NEXT NODE
         BCT   R3,BREQ0030           LOOP
         DROP  R1
         MVI   PARMCMD,$ENTER        ENTER A REQUEST
         LH    R4,COMMATTM           NUMBER OF ATTEMPTS
BREQ0040 DS    0H
         LA    R1,USERPARM           PARM LIST
         L     R15,AUSER             FXUSER ENTRY POINT
         BALR  R14,R15               CALL FXUSER
         CLC   PARMRC,H100           PARTNER NOT READY?
         BNE   BREQ0060              FALSE
         TM    COMMFLAG,$NOLIMIT     UNLIMITED ATTEMPTS?
         BO    BREQ0050              YES
         BCT   R4,BREQ0050           MINUS 1 ATTEMPT
         B     BREQ0060              ALL ATTEMPTS HAVE FAILED
BREQ0050 DS    0H
         STIMER WAIT,BINTVL=COMMINTV WAIT FOR SPECIFIED AMOUNT OF TIME
         B     BREQ0040              TRY AGAIN
BREQ0060 DS    0H
         MVC   COMMRC,PARMRC+1       SET RETURN CODE
         MVC   PRTMSGID(L'PARMMSG),PARMMSG
         MVI   PRTCMD,$PRTPRT        SET COMMAND (PRINT)
         LA    R1,PRTBLOK            PRINT REQUST BLOCK ADDRESS
         L     R15,ABPRT             PRINT MODULE ENTRY POINT
         BALR  R14,R15               LINK TO PRINT MODULE
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS
         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS
         BR    R14                   RETURN
* ------------------------------------------------------------------- *
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSTART DC    Q(DXDBREQE)           DISPLACEMENT TO WORK AREA
H100     DC    H'100'
         LTORG
* ------------------------------------------------------------------- *
*                                                                     *
*        WORK AREAS                                                   *
*                                                                     *
* ------------------------------------------------------------------- *
DXDBREQE DSECT
DXDID    DS    CL8
DXDSAVE  DS    18F
         PRTBLOK  DSECT=NO
         USERPARM DSECT=NO
* ------------------------------------------------------------------- *
*              COMMON DATA MAP                                        *
* ------------------------------------------------------------------- *
         FXBCOMM TYPE=DSECT
* ------------------------------------------------------------------- *
*              EQUATES                                                *
* ------------------------------------------------------------------- *
         COPY REGEQU
         END  FXBREQE
./ ADD NAME=FXBREQI  0100-99056-99056-1500-00130-00130-00000-FX-REL1

         TITLE 'FXBREQI  BATCH TRANSMISSION REQUEST INQUIRY'
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXBREQI                                               *
*                                                                     *
*  Batch interface transmission request inquiry.                      *
*   1) Send inquiry request using the criteria (request entry node    *
*      and request number) to the FX STC                              *
*   2) Print the data returned by the STC                             *
*                                                                     *
* ------------------------------------------------------------------- *
BREQI    FXPRFX 'BATCH INTERFACE TRANSMISSION REQUEST INQUIRY',        +
               COMM=FXBCOMM
FXBREQI  AMODE 31
FXBREQI  RMODE ANY
         CLC   DXDID,MODID           WORK AREA INITIALIZED?
         BE    BREQ0010              YES
         ITRACE ID=INIT
         MVC   DXDID,MODID           WORK AREA INITIALIZED
         MVI   PRTCC,C' '            INITIALIZE PRINT I/O AREA
         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC
BREQ0010 DS    0H
         ITRACE ID=BLDREQ
         MVI   PARMCMD,$INQUIRE      INQUIRE ON A REQUEST
         MVC   PARMFX,COMMFX         SET FX STC APPL NAME
         MVC   PARMENDE,COMMNODE     SET REQUEST ENTRY NODE NAME
         MVC   PARMNBR,COMMNBR       SET REQUEST NUMBER
         MVC   PARMNDE#,=Y(&MAXNDE)  MAXIMUM NUMBER OF RETURNED NODES
BREQ0020 DS    0H
         LA    R1,USERPARM           PARM LIST
         L     R15,AUSER             FXUSER ENTRY POINT
         BALR  R14,R15               CALL FXUSER
         MVC   COMMRC,PARMRC+1       SET RETURN CODE
         ITRACE ID=USERRC,           TRACE RETURN FROM FXUSER          +
               DATA1=PARMRC,         .. RETURN CODE                    +
               DATA2=PARMMSG+6       .. PORTION OF THE MESSAGE
         CLC   H100,PARMRC           STC NOT READY?
         BNE   BREQ0040              FALSE
         TM    COMMFLAG,$NOLIMIT     UNLIMITED ATTEMPTS?
         BO    BREQ0030              YES
         BCT   R4,BREQ0030           MINUS 1 ATTEMPT
         B     BREQ0040
BREQ0030 DS    0H
         STIMER WAIT,BINTVL=COMMINTV WAIT FOR SPECIFIED AMOUNT OF TIME
         B     BREQ0020              TRY AGAIN
BREQ0040 DS    0H
         CLI   COMMRC,4              SUCCESSFUL?
         BH    BREQ0070              NO
         CLI   COMMRC,0              DATA TRUNCATED?
         BE    BREQ0050              NO
         MVC   PRTMSGID(MSG01L),MSG01
         BAL   R8,PRT0000            PRINT
BREQ0050 DS    0H
         MVC   PRTMSGID(MSG02L),MSG02
         MVC   PRTMSGID+(MSG02ST-MSG02)(L'MSG02ST),PARMSTAT
         BAL   R8,PRT0000            PRINT
         LA    R2,PARMNDNM           FIRST DESTINATION
         USING PARMNDNM,R2           DEFINE BASE
         SR    R3,R3                 CLEAR REGISTER
         ICM   R3,3,PARMNDE#         NUMBER OF NODES
         BZ    EXIT0000              NO NODES
BREQ0060 DS    0H
         MVC   PRTMSGID(MSG03L),MSG03
         MVC   PRTMSGID+(MSG03NDE-MSG03)(L'MSG03NDE),PARMNDNM
         MVC   PRTMSGID+(MSG03ST-MSG03)(L'MSG03ST),PARMNDST
         BAL   R8,PRT0000            PRINT THE MESSAGE
         LA    R2,PARMNDL(R2)        NEXT NODE
         BCT   R3,BREQ0060           LOOP
         B     EXIT0000              EXIT
         DROP  R2
BREQ0070 DS    0H
         MVC   PRTMSGID(L'PARMMSG),PARMMSG   COPY MESSAGE FROM STC
         BAL   R8,PRT0000            PRINT
         B     EXIT0000              AND EXIT
PRT0000  DS    0H
         MVI   PRTCMD,$PRTPRT        SET COMMAND (PRINT)
         LA    R1,PRTBLOK            PRINT REQUST BLOCK ADDRESS
         L     R15,ABPRT             PRINT MODULE ENTRY POINT
         BALR  R14,R15               LINK TO PRINT MODULE
         BR    R8
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS
         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS
         BR    R14                   RETURN
* ------------------------------------------------------------------- *
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSTART DC    Q(DXDBREQI)           DISPLACEMENT TO WORK AREA
H100     DC    H'100'
MSG01    DS    0C
         DC    CL11'FXBREQI01W'
         DC    C'NODE DATA TRUNCATED DUE TO USER AREA SIZE'
MSG01L   EQU   *-MSG01
MSG02    DS    0C
         DC    CL11'FXBREQI02I'
         DC    C'OVER-ALL STATUS IS: '
MSG02ST  DC    CL25' '
MSG02L   EQU   *-MSG02
MSG03    DS    0C
         DC    CL11'FXBREQI03I'
         DC    C'STATUS TO DESTINATION '
MSG03NDE DC    CL08' '
         DC    C' IS: '
MSG03ST  DC    CL25' '
MSG03L   EQU   *-MSG03
         LTORG
* ------------------------------------------------------------------- *
*                                                                     *
*        WORK AREAS                                                   *
*                                                                     *
* ------------------------------------------------------------------- *
DXDBREQI DSECT
DXDID    DS    CL8
DXDSAVE  DS    18F
         PRTBLOK  DSECT=NO
         USERPARM DSECT=NO
* ------------------------------------------------------------------- *
*              COMMON DATA MAP                                        *
* ------------------------------------------------------------------- *
         FXBCOMM TYPE=DSECT
* ------------------------------------------------------------------- *
*              EQUATES                                                *
* ------------------------------------------------------------------- *
         COPY REGEQU
         END  FXBREQI
./ ADD NAME=FXDSNVER 0100-99056-99056-1500-00155-00155-00000-FX-REL1

         TITLE 'DSNVER  verify data set names are valid'
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXDSNVER                                              *
*                                                                     *
*  Verify data set names follow proper conventions.                   *
*                                                                     *
*  1) Each qualifier must begin with an alpha or national character   *
*  2) No qualifier is more than 8 characters long                     *
*  3) No qualifier is zero characters long (abcd..efgh)               *
*  4) No imbedded blanks                                              *
*  5) No special characters                                           *
*  6) No member or GDG relative generations                           *
*                                                                     *
*                                                                     *
*  This may be more restrictive than JCL requires, but it is close    *
*  to the "SPF" restrictions.                                         *
*                                                                     *
* ------------------------------------------------------------------- *
FXDSNVER CSECT
FXDSNVER AMODE 31
FXDSNVER RMODE ANY
         STM   R14,R12,12(R13)       SAVE REGISTERS
         LR    R12,R15               COPY BASE
         USING FXDSNVER,R12          DEFINE BASE
         LR    R8,R1                 COPY PARM BLOCK ADDRESS
         USING DSNREQ,R8             DEFINE BASE
         L     R7,DSNADDR            DATA SET NAME'S ADDRESS
DSN0000  DS    0H
         MVI   DSNMSG,C' '           CLEAR MESSAGE
         MVC   DSNMSG+1(L'DSNMSG-1),DSNMSG
         SR    R2,R2                 CLEAR FOR QUALIFIER LENGTH
         LA    R3,44                 STARTING LENGTH
DSN0010  DS    0H
         CLI   0(R7),C' '            BLANK?
         BE    DSN0090               YES
         CLI   0(R7),C'.'            DELIMITER?
         BE    DSN0030               YES
         CLI   0(R7),C'@'            AT-SIGN?
         BE    DSN0020               YES
         CLI   0(R7),C'#'            POUND SIGN?
         BE    DSN0020               YES
         CLI   0(R7),C'$'            DOLLAR SIGN?
         BE    DSN0020               YES
         CLI   0(R7),X'C1'           POSSIBLY A-I?
         BL    DSN0050               NO
         CLI   0(R7),X'CA'           DEFINELTY A-I?
         BL    DSN0020               YES
         CLI   0(R7),X'D1'           POSSIBLY J-R?
         BL    DSN0050               NO
         CLI   0(R7),X'DA'           DEFINETLY J-R?
         BL    DSN0020               YES
         CLI   0(R7),X'E2'           POSSIBLY S-Z?
         BL    DSN0050               NO
         CLI   0(R7),X'EA'           DEFINETLY S-Z?
         BL    DSN0020               YES
         LTR   R2,R2                 FIRST CHARACTER OF QUALIFIER?
         BZ    DSN0050               NO.. INVALID FIRST CHARACTER
         CLI   0(R7),C'0'            POSSIBLY 0-9?
         BL    DSN0060               NO
         CLI   0(R7),C'9'            POSSIBLY 0-9?
         BH    DSN0060               NO
DSN0020  DS    0H
         LA    R2,1(R2)              ADD 1 TO QUALIFIER LENGTH
         B     DSN0040
DSN0030  DS    0H
         LTR   R2,R2                 LAST QUALIFIER LENGTH = ZERO?
         BZ    DSN0080               YES
         CH    R2,H8                 QUALIFIER LENGTH > 8?
         BH    DSN0070               YES
         SR    R2,R2                 RESET QUALIFIER LENGTH
DSN0040  DS    0H
         LA    R7,1(R7)              NEXT CHARACTER IN DSN
         BCT   R3,DSN0010            LOOP
         CH    R2,H8                 QUALIFIER TOO LONG?
         BH    DSN0070               YES
         MVI   DSNSTAT,$DSNOK        GOOD
         B     EXIT0000              AND EXIT
DSN0050  DS    0H
         LTR   R2,R2                 FIRST QUALIFIER?
         BNZ   DSN0060               NO
         MVI   DSNSTAT,$DSNBAD       NO GOOD
         MVC   DSNMSG(MSG01L),MSG01  SET MESSAGE
         B     EXIT0000
DSN0060  DS    0H
         MVI   DSNSTAT,$DSNBAD       NO GOOD
         MVC   DSNMSG(MSG02L),MSG02  SET MESSAGE
         B     EXIT0000
DSN0070  DS    0H
         MVI   DSNSTAT,$DSNBAD       NO GOOD
         MVC   DSNMSG(MSG03L),MSG03  SET MESSAGE
         B     EXIT0000
DSN0080  DS    0H
         MVI   DSNSTAT,$DSNBAD       NO GOOD
         MVC   DSNMSG(MSG04L),MSG04  SET MESSAGE
         B     EXIT0000
DSN0090  DS    0H
         LTR   R2,R2                 LAST QUALIFIER ZERO?
         BZ    DSN0080               YES
         CH    R2,H8                 LAST QUALIFIER TOO LONG?
         BH    DSN0070               YES
         LTR   R3,R3                 ANY LENGTH REMAINING?
         BZ    EXIT0000              NO
         BCTR  R3,0                  MINUS 1
         EX    R3,DSNCLC             IS THE REST BLANK?
         BE    DSN0100               YES
         MVI   DSNSTAT,$DSNBAD
         MVC   DSNMSG(MSG05L),MSG05  NO IMBEDDED BLANKS ALLOWED
         B     EXIT0000
DSN0100  DS    0H
         MVI   DSNSTAT,$DSNOK        DATA SET NAME IS OK
EXIT0000 DS    0H
         LM    R14,R12,12(R13)       RESTORE REGISTERS
         BR    R14                   RETURN TO CALLER
DSNCLC   CLC   BLANKS(0),0(R7)
* ------------------------------------------------------------------- *
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
H8       DC    H'8'
BLANKS   DC    CL44' '
MSG01    DS    0C
         DC    CL11'FXDSNVER01E'
         DC    C' EACH QUALIFIER OF DSN MUST BEGIN WITH ALPHA OR NATION+
               AL'
MSG01L   EQU   *-MSG01
MSG02    DS    0C
         DC    CL11'FXDSNVER02E'
         DC    C' INVALID CHARACTER IN DATA SET NAME'
MSG02L   EQU   *-MSG02
MSG03    DS    0C
         DC    CL11'FXDSNVER03E'
         DC    C' QUALIFIER IN DSN IS TOO LONG'
MSG03L   EQU   *-MSG03
MSG04    DS    0C
         DC    CL11'FXDSNVER04E'
         DC    C' NULL QUALIFIER IN DSN'
MSG04L   EQU   *-MSG04
MSG05    DS    0C
         DC    CL11'FXDSNVER05E'
         DC    C' DATA SET NAME MAY NOT CONTAIN BLANKS'
MSG05L   EQU   *-MSG05
* ------------------------------------------------------------------- *
*              DSN REQUEST BLOCK                                      *
* ------------------------------------------------------------------- *
         DSNREQ DSECT=YES
* ------------------------------------------------------------------- *
*                                                                     *
*              EQUATES                                                *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY REGEQU
         END  FXDSNVER
./ ADD NAME=FXFORMAT 0100-99056-99056-1500-00013-00013-00000-FX-REL1

         TITLE 'FXFORMAT   MASTER FILE FORMATTER'
         COPY  OPTIONS
         AIF   ('&MSTRACC' EQ 'BDAM').BDAM
         AIF   ('&MSTRACC' EQ 'VSAM').VSAM
         MNOTE 12,'INVALID MASTER FILE ORGANIZATION'
.BDAM    ANOP
         COPY  BDAMFMT
         AGO   .END
.VSAM    ANOP
         COPY  VSAMFMT
.END     ANOP
         END  FXFORMAT
./ ADD NAME=FXLERAD  0100-99056-99056-1500-00056-00056-00000-FX-REL1

         TITLE 'VTAM LERAD EXIT'
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXLERAD                                               *
*                                                                     *
*  VTAM LERAD exit                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
FXLERAD  CSECT
FXLERAD  AMODE 31
FXLERAD  RMODE ANY
         USING FXLERAD,R15           DEFINE BASE
         B     LERAD010              SKIP ADDRESS AND EYECATCHER
         DC    CL8'FXLERAD'          MODULE NAME
         DC    C'&SYSDATE'           DATE OF ASSEMBLY
         DC    C'&SYSTIME'           TIME OF ASSEMBLY
LERAD010 DS    0H
         USING IFGRPL,R1             DEFINE BASE
         L     R2,RPLAAREA           RPL EXTENSION ADDRESS
         USING ISTRPL6X,R2           DEFINE BASE
         LA    R3,GOODRC             GOOD RETURN CODES TABLE
LERAD020 DS    0H
         CLI   0(R3),X'FF'           END OF TABLE
         BE    LERAD030              NO GOOD
         CLC   RPL6RC,0(R3)          ACCEPTABLE?
         BE    EXIT0000              YES, EXIT
         LA    R3,4(R3)              NEXT CODE
         B     LERAD020              LOOP
LERAD030 DS    0H
         L     R4,RPL6RC             MAKE RC EASY TO FIND
         DC    H'0'
* ------------------------------------------------------------------- *
*             EXIT                                                    *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         BR    R14                   RETURN TO CALLER
* ------------------------------------------------------------------ *
*                                                                    *
*              CONSTANTS                                             *
*                                                                    *
* ------------------------------------------------------------------ *
GOODRC   DS    0C
         DC    X'00000000'           GOOD
         DC    X'00000001'           CNOS ACCEPTED BY PARTNER
         DC    X'FF'
         IFGRPL AM=VTAM
* ------------------------------------------------------------------ *
*                                                                    *
*              EQUATES                                               *
*                                                                    *
* ------------------------------------------------------------------ *
         COPY REGEQU
         ABCODES
         END  FXLERAD
./ ADD NAME=FXMCOMM  0100-99056-99056-1500-00018-00018-00000-FX-REL1

* ------------------------------------------------------------------- *
*                                                                     *
*  Name: FXMCOMM                                                      *
*                                                                     *
*  File maintenance common data and trace manager                     *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY  OPTIONS
         FXMCOMM  TYPE=CSECT
FXMCOMM  CSECT
         FXMTDATA DSECT=NO
FXMVTBLE DS    0C
         VDEF  BASE=FXMTDATA
         FXMVARS GEN=YES
         DC    X'FF'
         COPY  REGEQU
         END   FXMCOMM
./ ADD NAME=FXMEMVER 0100-99056-99056-1500-00114-00114-00000-FX-REL1

         TITLE 'MEMVER  verify member names are valid'
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXMEMVER                                              *
*                                                                     *
*                                                                     *
*  1) Member name must begin with an alpha or national character      *
*  2) No imbedded blanks                                              *
*  3) No special characters                                           *
*                                                                     *
* ------------------------------------------------------------------- *
FXMEMVER CSECT
FXMEMVER AMODE 31
FXMEMVER RMODE ANY
         STM   R14,R12,12(R13)       SAVE REGISTERS
         LR    R12,R15               COPY BASE
         USING FXMEMVER,R12          DEFINE BASE
         LR    R8,R1                 COPY PARM BLOCK ADDRESS
         USING MEMREQ,R8             DEFINE BASE
         L     R7,MEMADDR            DATA SET NAME'S ADDRESS
MEM0000  DS    0H
         MVI   MEMMSG,C' '           CLEAR MESSAGE
         MVC   MEMMSG+1(L'MEMMSG-1),MEMMSG
         LA    R3,8                  STARTING LENGTH
         SR    R2,R2                 CLEAR FOR LENGTH
MEM0010  DS    0H
         CLI   0(R7),C' '            BLANK?
         BE    MEM0060               YES
         CLI   0(R7),C'@'            AT-SIGN?
         BE    MEM0020               YES
         CLI   0(R7),C'#'            POUND SIGN?
         BE    MEM0020               YES
         CLI   0(R7),C'$'            DOLLAR SIGN?
         BE    MEM0020               YES
         CLI   0(R7),X'C1'           POSSIBLY A-I?
         BL    MEM0030               NO
         CLI   0(R7),X'CA'           DEFINELTY A-I?
         BL    MEM0020               YES
         CLI   0(R7),X'D1'           POSSIBLY J-R?
         BL    MEM0030               NO
         CLI   0(R7),X'DA'           DEFINETLY J-R?
         BL    MEM0020               YES
         CLI   0(R7),X'E2'           POSSIBLY S-Z?
         BL    MEM0030               NO
         CLI   0(R7),X'EA'           DEFINETLY S-Z?
         BL    MEM0020               YES
         LTR   R2,R2                 FIRST CHARACTER OF NAME?
         BZ    MEM0030               NO.. INVALID FIRST CHARACTER
         CLI   0(R7),C'0'            POSSIBLY 0-9?
         BL    MEM0040               NO
         CLI   0(R7),C'9'            POSSIBLY 0-9?
         BH    MEM0040               NO
MEM0020  DS    0H
         LA    R2,1(R2)              ADD 1 TO LENGTH
         LA    R7,1(R7)              NEXT CHARACTER IN NAME
         BCT   R3,MEM0010            LOOP
         MVI   MEMSTAT,$MEMOK        GOOD
         B     EXIT0000              AND EXIT
MEM0030  DS    0H
         LTR   R2,R2                 FIRST?
         BNZ   MEM0040               NO
         MVI   MEMSTAT,$MEMBAD       NO GOOD
         MVC   MEMMSG(MSG01L),MSG01  SET MESSAGE
         B     EXIT0000
MEM0040  DS    0H
         MVI   MEMSTAT,$MEMBAD       NO GOOD
         MVC   MEMMSG(MSG02L),MSG02  SET MESSAGE
         B     EXIT0000
MEM0060  DS    0H
         LTR   R3,R3                 ANY LENGTH REMAINING?
         BZ    EXIT0000              NO
         BCTR  R3,0                  MINUS 1
         EX    R3,MEMCLC             IS THE REST BLANK?
         BE    MEM0070               YES
         MVI   MEMSTAT,$MEMBAD
         MVC   MEMMSG(MSG03L),MSG03  NO IMBEDDED BLANKS ALLOWED
         B     EXIT0000
MEM0070  DS    0H
         MVI   MEMSTAT,$MEMOK        MEMBER NAME IS OK
EXIT0000 DS    0H
         LM    R14,R12,12(R13)       RESTORE REGISTERS
         BR    R14                   RETURN TO CALLER
MEMCLC   CLC   BLANKS(0),0(R7)
* ------------------------------------------------------------------- *
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
H8       DC    H'8'
BLANKS   DC    CL8' '
MSG01    DS    0C
         DC    CL11'FXMEMVER01E'
         DC    C' FIRST CHARACTER OF MEMBER NAME NOT ALPHA OR NATIONAL'
MSG01L   EQU   *-MSG01
MSG02    DS    0C
         DC    CL11'FXMEMVER02E'
         DC    C' INVALID CHARACTER IN MEMBER NAME'
MSG02L   EQU   *-MSG02
MSG03    DS    0C
         DC    CL11'FXMEMVER03E'
         DC    C' MEMBER NAME MAY NOT CONTAIN BLANKS'
MSG03L   EQU   *-MSG03
* ------------------------------------------------------------------- *
*              MEMBER REQUEST BLOCK                                   *
* ------------------------------------------------------------------- *
         MEMREQ DSECT=YES
* ------------------------------------------------------------------- *
*                                                                     *
*              EQUATES                                                *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY REGEQU
         END  FXMEMVER
./ ADD NAME=FXMMAIN  0100-99056-99056-1500-00649-00649-00000-FX-REL1

         TITLE 'FXMMAIN  MASTER FILE MAINTENANCE'
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXMMAIN                                               *
*                                                                     *
*   File maintenace utility mainline.                                 *
*                                                                     *
*   Things are bound to happen and at times the master file is going  *
*   to be botched.  If the master file is "botched", the STC may not  *
*   be able to come up without abending.  This file maintenace        *
*   utility allows most any field to be updated, and it makes litte   *
*   assumption about "consistency" of the data (like the number of    *
*   nodes not matching the number of names in the destination list).  *
*   Just make sure you know what you are doing before updating the    *
*   master file with this utility.                                    *
*                                                                     *
* ------------------------------------------------------------------- *
FXMMAIN  CSECT
FXMMAIN  AMODE 31
FXMMAIN  RMODE ANY
         USING FXMMAIN,R12,R9        DEFINE BASE
         STM   R14,R12,12(R13)       SAVE REGISTERS
         LR    R12,R15               COPY BASE ADDRESS
         LA    R9,2048(R12)          INITIALIZE..
         LA    R9,2048(R9)             ..2ND BASE REGISTER
         B     @@000001              BRANCH AROUND EYECATCHER
         DC    ((PFXMODNM-MODPRFX)-(*-FXMMAIN))X'00'
MODID    DC    CL8'FXMMAIN'          MODULE NAME
         DC    CL8'&SYSDATE'         DATE OF ASSEMBLY
         DC    CL6'&SYSTIME'         TIME OF ASSEMBLY
@@000001 DS    0H
* ------------------------------------------------------------------- *
*        ACQUIRE STORAGE FOR WORK AREAS                               *
* ------------------------------------------------------------------- *
         L     R3,DXDSIZE            WORK AREA SIZE
         GETMAIN RU,                 ACQUIRE WORK AREA                 +
               LV=(R3),              .. SIZE OF AREA                   +
               LOC=ANY               .. FROM ANY AREA
         LR    R4,R1                 COPY STORAGE ADDRESS
         LR    R10,R1                COPY STORAGE ADDRESS
         LR    R2,R1                 COPY WORK AREA ADDRESS
         SR    R1,R1                 CLEAR LENGTH 2
         MVCL  R2,R0                 CLEAR WORK AREA
         A     R10,DXDSTART          PLUS DISPLACEMENT TO OUR PORTION
         USING DXDMMAIN,R10          DEFINE WORK AREA BASE
         MVC   DXDID,MODID           IDENTIFY WORK AREA OWNER
         LA    R2,DXDSAVE            OUR SAVE AREA ADDRESS
         ST    R13,4(R2)             CHAIN CALLER'S SAVE AREA TO OURS
         ST    R2,8(R13)             CHAIN OUR SAVE AREA TO CALLER'S
         LR    R13,R2                SET SAVE AREA ADDRESS
* ------------------------------------------------------------------- *
*        Load common data module (FXMCOMM)                            *
* ------------------------------------------------------------------- *
         LOAD  EP=FXMCOMM            LOAD COMMON DATA MODULE
         LR    R11,R0                COPY TO PERMANENT BASE
         USING FXMCOMM,R11           DEFINE BASE
         ST    R12,AMAINT            SET MAINLINE'S ADDRESS IN COMMON
         ST    R4,COMMDXDA           SET DYNAMIC WORK AREA ADDRESS
         MVC   ATVAR,VTVAR           SET TSO/SPF VARIABLE MANAGER ADDR
         MVC   ATNODE,VTNODE         SET NODE DISPLAY MODULE ADDRESS
* ------------------------------------------------------------------- *
*        Acquire storage for trace table                              *
* ------------------------------------------------------------------- *
         L     R3,TRSIZE             TRACE TABLE SIZE
         GETMAIN RU,                 ACQUIRE STOAGE FOR TRACE TABLE    +
               LV=(R3),              .. SIZE IS IN R3                  +
               LOC=ANY               .. MAY BE ABOVE OR BELOW
         ST    R1,TRADDR             SAVE TRACE TABLE STORAGE ADDRESS
         SR    R0,R0                 ASSUME A 32-BYTE BOUNDARY
         TM    TRADDR+3,X'07'        ALREADY ON A 32-BYTE BOUNDARY?
         BNO   INIT0010              YES
         SLR   R1,5                  SHIFT OUT LOW BITS..
         SLL   R1,5                  .. TO ROUND TO 32-BYTE BOUNDARY
         LA    R1,32(R1)             PLUS 32
         LA    R0,TRENTRYL           1 LESS TRACE ENTRY AVAILABLE
INIT0010 DS    0H
         ST    R1,TRFIRST            FIRST TRACE ENTRY AVAILABLE
         ST    R1,TRCURR             CURRENT TRACE ENTRY
         A     R1,TRSIZE             LAST ENTRY IN TABLE
         SH    R1,=Y(TRENTRYL)       MINUS 1 ENTRY
         SR    R1,R0                 MINUS 1 MORE IF NECESSARY
         ST    R1,TRLAST             SET LAST TRACE ENTRY ADDRESS
         ITRACE ID=INITIAL           INITIAL TRACE ENTRY
         LOAD  EP=ISPLINK            LOAD SPF INTERFACE
         ST    R0,DXDSPFEP           SAVE SPF INTERFACE ADDRESS
         LOAD  EP=FXSMSTR            LOAD MASTER FILE I/O
         ST    R0,AMSTR              SAVE MASTER I/O MODULE ADDRESS
*---------------------------------------------------------------------*
*        OPEN MASTER FILE                                             *
*---------------------------------------------------------------------*
         ITRACE ID=OPENMSTR
         FXCALL FXSMSTR,OPEN         OPEN MASTER FILE
*---------------------------------------------------------------------*
*        DEFINE VARIABLES TO SPF                                      *
*---------------------------------------------------------------------*
MSTR0010 DS    0H
         ITRACE ID=VDEFINE           ISSUING DIV MAP
         MVI   VARCMD,$VARDEFA       SET COMMAND (DEFINE ALL)
         LA    R1,FXMTDATA           DATA
         ST    R1,VARAREA            PASS DATA AREA ADDRESS
         LA    R1,FXMVTBLE           CONTROL DATA ADDRESS
         ST    R1,VARTBLE            PASS CONTROL DATA ADDRESS
         LA    R1,VARREQ             VARIABLE REQUEST BLOCK
         L     R15,VTVAR             VARIABLE MANAGER ENTRY POINT
         BALR  R14,R15               LINK TO VARIABLE MANAGER
         MVC   FXMKEY,BLANKS         INITIALIZE KEY
         MVC   FXMMSG,BLANKS         INITIALIZE MESSAGE
         MVC   ZCMD,BLANKS           INITIALIZE COMMAND
*---------------------------------------------------------------------*
*        DISPLAY MAINTENANCE PANEL                                    *
*---------------------------------------------------------------------*
MSTR0020 DS    0H
         ITRACE ID=DISPLAY           DISPLAYING FIRST PANEL
         LA    R1,DISPLAY            SPF COMMAND
         ST    R1,DXDSPFP1           SET ADDRESS
         LA    R1,PANLNAME           PANEL NAME
         ST    R1,DXDSPFP2           SET ADDRESS
         OI    DXDSPFP2,X'80'        FLAG END OF LIST
         LA    R1,DXDSPFP            SPF PARM LIST ADDRESS
         L     R15,DXDSPFEP          SPF INTERFACE ADDRESS
         BALR  R14,R15               LINK TO SPF
         ITRACE ID=DISPRC,           DISPLAY RETURN CODE               +
               RDATA1=R15
         CH    R15,H8                END?
         BE    EXIT0000              YES
         OC    ZCMD,BLANKS           FORCE UPPER CASE
         MVC   FXMMSG,BLANKS         INITIALIZE MESSAGE
         ITRACE ID=KEY,              RECORD NUMBER REQUESTED           +
               DATA1=FXMKEY
         LA    R1,FXMKEY             RECORD KEY
         LA    R2,5                  NUMBER OF DIGITS
         LA    R15,ERR0010           ERROR ROUTINE ADDRESS
         BAL   R14,NUMR0000          TEST FOR NUMERIC
         PACK  COMMDWRD,FXMKEY       PACK RECORD KEY
         CVB   R14,COMMDWRD          CONVERT TO BINARY
         LTR   R14,R14               RECORD ZERO?
         BZ    ERR0020               YES
         C     R14,COMMRECS          BEYOND MAXIMUM?
         BH    ERR0020               YES
         BCTR  R14,0                 MINUS 1
         FXCALL FXSMSTR,READ,(R14)   READ MASTER FILE
         LA    R6,MSTRRECD           REQUEST BLOCK IN PARM AREA
         USING REQBLOK,R6            DEFINE BASE
         CLC   FXMREC,REQREC#        SAME RECORD AS IN I/O AREA?
         BNE   MSTR0400              NO
         NI    DXDFLAG,255-$UPDATE   TURN OFF UPDATE FLAG
         CLC   REQENODE,FXMENODE     SAME NODE?
         BE    MSTR0030              YES
         MVC   REQENODE,FXMENODE     CHANGE NODE
         OI    DXDFLAG,$UPDATE       RECORD WAS UDPATED
MSTR0030 DS    0H
         LA    R1,FXMNBR             FIRST DIGIT
         LA    R2,L'FXMNBR           NUMBER OF DIGITS
         LA    R15,ERR0100           ERROR ROUTINE ADDRESS
         BAL   R14,NUMR0000          CHECK FOR NUMERIC
         PACK  COMMDWRD,FXMNBR       PACK REQUEST NUMBER
         CVB   R1,COMMDWRD           CONVERT TO BINARY
         CLM   R1,15,REQNBR          SAME REQUEST NUMBER?
         BE    MSTR0040              YES
         STCM  R1,15,REQNBR          SAVE REQUEST NUMBER
         OI    DXDFLAG,$UPDATE       SET UPDATE FLAG
MSTR0040 DS    0H
         CLC   REQESTOR,FXMESTOR     REQUESTOR UPDATED?
         BE    MSTR0050              NO
         MVC   REQESTOR,FXMESTOR     CHANGE REQUESTOR
         OI    DXDFLAG,$UPDATE       RECORD WAS UPDATED
MSTR0050 DS    0H
         CLC   REQJOB,FXMJOB         SAME JOB NAME?
         BE    MSTR0060              YES
         MVC   REQJOB,FXMJOB         CHANGE JOB NAME
         OI    DXDFLAG,$UPDATE       RECORD WAS UPDATED
MSTR0060 DS    0H
         CLI   FXMEDATE+4,C'.'       PERIOD STILL PRESENT?
         BNE   ERR0030               NO
         LA    R1,FXMEDATE           FIRST DIGIT
         LA    R2,4                  NUMBER OF DIGITS
         LA    R15,ERR0040           ERROR ROUTINE ADDRESS
         BAL   R14,NUMR0000          CHECK FOR NUMERIC
         LA    R1,FXMEDATE+5         FIRST DIGIT
         LA    R2,3                  NUMBER OF DIGITS
         BAL   R14,NUMR0000          CHECK FOR NUMERIC
         PACK  DXDWORK(3),FXMEDATE(5) PACK FIRST 4 DIGITS
         PACK  DXDWORK+2(2),FXMEDATE+5(3) PACK LAST 3 DIGITS
         CLC   REQEDATE,DXDWORK      SAME DATE?
         BE    MSTR0070              YES
         MVC   REQEDATE,DXDWORK      COPY NEW DATE
         OI    DXDFLAG,$UPDATE       RECORD WAS UPDATED
MSTR0070 DS    0H
         LA    R1,FXMETIME           FIRST DIGIT
         LA    R2,8                  NUMBER OF DIGITS
         LA    R15,ERR0050           ERROR ROUTINE
         BAL   R14,NUMR0000          CHECK FOR NUMERIC
         MVC   DXDWORK(8),FXMETIME   COPY TIME
         NC    DXDWORK(8),HEX1F      PREPARE FOR PACKING
         TR    DXDWORK(8),CHARHEX    TRANSLATE FOR PACKING
         PACK  COMMDWRD(5),DXDWORK(9) PACK TIME
         CLC   REQETIME,COMMDWRD     SAME TIME?
         BE    MSTR0080              YES
         MVC   REQETIME,COMMDWRD     CHANGE TIME
         OI    DXDFLAG,$UPDATE       RECORD WAS UPDATED
MSTR0080 DS    0H
         CLI   FXMCDATE+4,C'.'       PERIOD STILL PRESENT?
         BNE   ERR0030               NO
         LA    R1,FXMCDATE           FIRST DIGIT
         LA    R2,4                  NUMBER OF DIGITS
         LA    R15,ERR0040           ERROR ROUTINE ADDRESS
         BAL   R14,NUMR0000          CHECK FOR NUMERIC
         LA    R1,FXMCDATE+5         FIRST DIGIT
         LA    R2,3                  NUMBER OF DIGITS
         BAL   R14,NUMR0000          CHECK FOR NUMERIC
         PACK  DXDWORK(3),FXMCDATE(5) PACK FIRST 4 DIGITS
         PACK  DXDWORK+2(2),FXMCDATE+5(3) PACK LAST 3 DIGITS
         CLC   REQCDATE,DXDWORK      SAME DATE?
         BE    MSTR0090              YES
         MVC   REQCDATE,DXDWORK      COPY NEW DATE
         OI    DXDFLAG,$UPDATE       RECORD WAS UPDATED
MSTR0090 DS    0H
         LA    R1,FXMCTIME           FIRST DIGIT
         LA    R2,8                  NUMBER OF DIGITS
         LA    R15,ERR0050           ERROR ROUTINE
         BAL   R14,NUMR0000          CHECK FOR NUMERIC
         MVC   DXDWORK(8),FXMCTIME   COPY TIME
         NC    DXDWORK(8),HEX1F      PREPARE FOR PACKING
         TR    DXDWORK(8),CHARHEX    TRANSLATE FOR PACKING
         PACK  COMMDWRD(5),DXDWORK(9) PACK TIME
         CLC   REQCTIME,COMMDWRD     SAME TIME?
         BE    MSTR0100              YES
         MVC   REQCTIME,COMMDWRD     CHANGE TIME
         OI    DXDFLAG,$UPDATE       RECORD WAS UPDATED
MSTR0100 DS    0H
         CLC   REQTNODE,FXMTNODE     SAME NODE?
         BE    MSTR0110              YES
         MVC   REQTNODE,FXMTNODE     CHANGE NODE
         OI    DXDFLAG,$UPDATE       RECORD WAS UDPATED
MSTR0110 DS    0H
         LA    R1,FXMST              FIRST DIGIT OF STATUS
         LA    R15,ERR0060           ERROR ROUTINE ADDRESS
         BAL   R14,HEX0000           CHECK FOR VALID HEX
         MVC   DXDWORK(2),FXMST      COPY STATUS
         NC    DXDWORK(2),HEX1F      PREPARE FOR PACKING
         TR    DXDWORK,CHARHEX       TRANSLATE FOR PACKING
         PACK  DXDWORK+4(2),DXDWORK(3) PACK STATUS
         CLC   REQSTAT,DXDWORK+4     SAME STATUS?
         BE    MSTR0140              YES
         MVC   REQSTAT,DXDWORK+4     CHANGE STATUS
         OI    DXDFLAG,$UPDATE       RECORD WAS UDPATED
         LA    R1,REQMSG             FIRST STATUS MESSAGE
MSTR0120 DS    0H
         CLI   0(R1),X'FF'           END OF TABLE?
         BE    ERR0140               YES
         CLC   REQSTAT,0(R1)         STATUS LOCATED?
         BE    MSTR0130              YES
         LA    R1,26(R1)             NEXT STATUS
         B     MSTR0120              LOOP
MSTR0130 DS    0H
         MVC   FXMSTI,1(R1)          COPY STATUS MESSAGE
MSTR0140 DS    0H
         LA    R1,FXMUT              FIRST DIGIT OF UTILITY
         LA    R15,ERR0090           ERROR ROUTINE ADDRESS
         BAL   R14,HEX0000           CHECK FOR VALID HEX
         MVC   DXDWORK(2),FXMUT      COPY UTILITY
         NC    DXDWORK(2),HEX1F      PREPARE FOR PACKING
         TR    DXDWORK,CHARHEX       TRANSLATE FOR PACKING
         PACK  DXDWORK+4(2),DXDWORK(3) PACK UTILITY
         CLC   REQUTIL,DXDWORK+4     SAME UTILITY?
         BE    MSTR0150              YES
         MVC   REQUTIL,DXDWORK+4     CHANGE UTILITY
         OI    DXDFLAG,$UPDATE       RECORD WAS UPDATED
MSTR0150 DS    0H
         LA    R1,FXMFSIZE           FIRST DIGIT
         LA    R2,L'FXMFSIZE         NUMBER OF DIGITS
         LA    R15,ERR0110           ERROR ROUTINE ADDRESS
         BAL   R14,NUMR0000          CHECK FOR NUMERIC
         PACK  COMMDWRD,FXMFSIZE     PACK FILE SIZE
         CVB   R1,COMMDWRD           CONVERT TO BINARY
         CLM   R1,15,REQFSIZE        SAME FILE SIZE?
         BE    MSTR0160              YES
         STCM  R1,15,REQFSIZE        SAVE FILE SIZE
         OI    DXDFLAG,$UPDATE       SET UPDATE FLAG
MSTR0160 DS    0H
         LA    R8,REQODSNM           FIRST DATASET NAME
         LA    R2,FXMODSN            FIRST DATASET NAME
         LA    R3,5                  NUMBER OF DATASET NAMES
MSTR0180 DS    0H
         CLC   0(L'REQODSNM,R8),0(R2) SAME DATASET NAME?
         BE    MSTR0190               YES
         MVC   0(L'REQODSNM,R8),0(R2) CHANGE DATASET NAME
         OI    DXDFLAG,$UPDATE        RECORD WAS UPDATED
MSTR0190 DS    0H
         LA    R8,L'REQODSNM(R8)     NEXT DATASET NAME
         LA    R2,L'REQODSNM(R2)     NEXT DATASET NAME
         BCT   R3,MSTR0180           LOOP
         CLC   REQOMEM,FXMOMEM       SAME ORIGINAL MEMBER NAME?
         BE    MSTR0200              YES
         MVC   REQOMEM,FXMOMEM       CHANGE MEMBER NAME
         OI    DXDFLAG,$UPDATE       RECORD WAS UDPATED
MSTR0200 DS    0H
         CLC   REQDMEM,FXMDMEM       SAME DESTINATION MEMBER NAME?
         BE    MSTR0210              YES
         MVC   REQDMEM,FXMDMEM       CHANGE MEMBER NAME
         OI    DXDFLAG,$UPDATE       RECORD WAS UPDATED
MSTR0210 DS    0H
         CLI   FXMREPL,C'Y'          VALID REPLACE FLAG?
         BE    MSTR0220              YES
         CLI   FXMREPL,C'N'          VALID REPLACE FLAG?
         BNE   ERR0120               NO
MSTR0220 DS    0H
         CLC   REQREPL,FXMREPL       SAME FLAG?
         BE    MSTR0230              YES
         MVC   REQREPL,FXMREPL       CHANGE REPLACE INDICATOR
         OI    DXDFLAG,$UPDATE       RECORD HAS BEEN UPDATED
MSTR0230 DS    0H
         CLI   FXMALIAS,C'Y'         VALID ALIAS FLAG?
         BE    MSTR0240              YES
         CLI   FXMALIAS,C'N'         VALID ALIAS FLAG?
         BNE   ERR0150               NO
MSTR0240 DS    0H
         CLC   REQALIAS,FXMALIAS     SAME FLAG?
         BE    MSTR0250              YES
         MVC   REQALIAS,FXMALIAS     CHANGE ALIAS INDICATOR
         OI    DXDFLAG,$UPDATE       RECORD HAS BEEN UPDATED
MSTR0250 DS    0H
         LA    R1,FXMNDE             FIRST DIGIT
         LA    R2,3                  NUMBER OF DIGITS
         LA    R15,ERR0070           ERROR ROUTINE ADDRESS
         BAL   R14,NUMR0000          CHECK FOR NUMERIC
         PACK  COMMDWRD,FXMNDE       PACK NUMBER OF NODES
         CVB   R1,COMMDWRD           CONVERT TO BINARY
         CLM   R1,3,REQNDE#          SAME NUMBER OF NODES?
         BE    MSTR0260              YES
         STCM  R1,3,REQNDE#          SAVE NUMBER OF NODES
         OI    DXDFLAG,$UPDATE       SET UPDATE FLAG
MSTR0260 DS    0H
         TM    DXDFLAG,$UPDATE       RECORD UPDATED?
         BNO   MSTR0300              NO
         BAL   R5,SAVE0000           SAVE UPDATED RECORD
         B     MSTR0400
MSTR0300 DS    0H
         CLC   ZCMD,BLANKS           COMMAND AREA BLANK?
         BE    MSTR0400              YES
         CLC   NODES,ZCMD            DISPLAY NODES?
         BNE   ERR0130               NO
         MVC   ZCMD,BLANKS           RESET COMMAND AREA
         MVI   TNODECMD,$TNODEU      ALLOW UPDATING
         ST    R6,TNODEREQ           PASS REQBLOK ADDRESS
         LA    R1,ZCMD               SPF ZCMD AREA ADDRESS
         ST    R1,TNODEZCM           PASS ADDRESS TO NODE DISPLAY
         LA    R1,TNODEPRM           NODE DISPLAY PARM LIST
         L     R15,ATNODE            NODE DISPLAY ENTRY POINT
         BALR  R14,R15               LINK TO NODE DISPLAY
         CLI   TNODESTA,$TNODEM      I/O AREA MODIFIED BY FXTNODE?
         BNE   MSTR0400              NO
         BAL   R5,SAVE0000           SAVE UPDATED RECORD
MSTR0400 DS    0H
         ITRACE ID=FORMAT            EDIT/FORMAT DATA FOR PANEL
         MVC   FXMREC,REQREC#        COPY RECORD ID
         MVC   FXMENODE,REQENODE     COPY NODE NAME
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,COMMDWRD           CONVERT TO DECIMAL
         MVC   DXDWORK(8),=X'F020202020202020'
         ED    DXDWORK(8),COMMDWRD+4 EDIT REQUEST NUMBER
         MVC   FXMNBR,DXDWORK+1      COPY EDITED REQUEST NUMBER
         MVC   FXMESTOR,REQESTOR     COPY REQUESTOR NAME
         MVC   FXMJOB,REQJOB         COPY JOB NAME
         MVC   DXDWORK(L'DATEEDWD),DATEEDWD
         ED    DXDWORK(L'DATEEDWD),REQEDATE    EDIT DATE ENTERED
         MVC   FXMEDATE,DXDWORK+1    COPY DATE ENTERED
         UNPK  DXDWORK(9),REQETIME(5) UNPACK TIME ENTERED
         MVZ   DXDWORK(8),NULLS      REMOVE ZONES
         TR    DXDWORK(8),HEXCHAR    MAKE PRINTABLE
         MVC   FXMETIME,DXDWORK      COPY TIME ENTERED
         MVC   DXDWORK(L'DATEEDWD),DATEEDWD
         ED    DXDWORK(L'DATEEDWD),REQCDATE    EDIT COMPLETION DATE
         MVC   FXMCDATE,DXDWORK+1    COPY DATE COMPLETED
         UNPK  DXDWORK(9),REQCTIME(5) UNPACK TIME COMPLETED
         MVZ   DXDWORK(8),NULLS      REMOVE ZONES
         TR    DXDWORK(8),HEXCHAR    MAKE PRINTABLE
         MVC   FXMCTIME,DXDWORK      COPY TIME COMPLETED
         MVC   FXMTNODE,REQTNODE     COPY TRANSMITTING NODE
         UNPK  DXDWORK(3),REQSTAT(2) UNPACK STATUS
         MVZ   DXDWORK(2),NULLS      REMOVE ZONES
         TR    DXDWORK(2),HEXCHAR    MAKE PRINTABLE
         MVC   FXMST,DXDWORK         COPY STATUS
         LA    R1,REQMSG             FIRST STATUS MESSAGE
MSTR0410 DS    0H
         CLI   0(R1),X'FF'           END OF TABLE?
         BE    MSTR0420              YES
         CLC   REQSTAT,0(R1)         STATUS LOCATED?
         BE    MSTR0420              YES
         LA    R1,26(R1)             NEXT STATUS
         B     MSTR0410              LOOP
MSTR0420 DS    0H
         MVC   FXMSTI,1(R1)          COPY STATUS MESSAGE
         UNPK  DXDWORK(3),REQUTIL(2) UNPACK UTILITY
         MVZ   DXDWORK(2),NULLS      REMOVE ZONES
         TR    DXDWORK(2),HEXCHAR    MAKE PRINTABLE
         MVC   FXMUT,DXDWORK         COPY UTILITY
         ICM   R1,15,REQFSIZE        FILE SIZE
         CVD   R1,COMMDWRD           CONVERT TO DECIMAL
         MVC   DXDWORK(L'SIZEEDWD),SIZEEDWD
         ED    DXDWORK,COMMDWRD+3    EDIT FILE SIZE
         MVC   FXMFSIZE,DXDWORK+1    COPY FILE SIZE
         MVC   FXMODSN,REQODSNM      COPY ORIGINAL DATASET NAME
         MVC   FXMOMEM,REQOMEM       COPY ORIGINAL MEMBER NAME
         MVC   FXMDDSN,REQDDSNM      COPY DESTINATION DATASET NAME
         MVC   FXMDMEM,REQDMEM       COPY DESTINATION MEMBER NAME
         MVC   FXMWDSN,REQWDSNM      COPY STAGING DATASET NAME
         MVC   FXMIDSN,REQIDSNM      COPY SYSIN DATASET NAME
         MVC   FXMSDSN,REQSDSNM      COPY SYSOUT DATASET NAME
         CLI   REQREPL,C'Y'          REPLACE AT DESTINATION?
         BE    MSTR0430              YES
         MVC   FXMREPL,NO            INDICATE 'NO'
         B     MSTR0440
MSTR0430 DS    0H
         MVC   FXMREPL,YES           INDICATE 'YES'
MSTR0440 DS    0H
         CLI   REQALIAS,C'Y'         TRANSMIT ALIASES?
         BE    MSTR0450              YES
         MVC   FXMALIAS,NO           INDICATE 'NO'
         B     MSTR0460
MSTR0450 DS    0H
         MVC   FXMALIAS,YES          INDICATE 'YES'
MSTR0460 DS    0H
         SR    R1,R1                 CLEAR REGISTER
         ICM   R1,3,REQNDE#          NUMBER OF NODES
         CVD   R1,COMMDWRD           CONVERT TO DECIMAL
         MVC   DXDWORK(L'NODEEDWD),NODEEDWD
         ED    DXDWORK(L'NODEEDWD),COMMDWRD+6
         MVC   FXMNDE,DXDWORK+1      COPY NUMBER OF NODES
         B     MSTR0020              RE-DISPLAY
         DROP  R6
SAVE0000 DS    0H
         ITRACE ID=UPDATE            RECORD WAS UPDATED, SAVE DIV OBJEC
         FXCALL FXSMSTR,WRITE        RE-WRITE MASTER FILE RECORD
         BR    R5                    RETURN
NUMR0000 DS    0H
         CLI   0(R1),C'0'            VALID DIGIT?
         BLR   R15                   NO
         CLI   0(R1),C'9'            VALID DIGIT?
         BHR   R15                   NO
         LA    R1,1(R1)              NEXT DIGIT
         BCT   R2,NUMR0000           CHECK ALL DIGITS
         BR    R14                   DONE
HEX0000  DS    0H
         LA    R7,2                  NUMBER OF DIGITS
HEX0010  DS    0H
         CLI   0(R1),C'A'            VALID DIGIT?
         BLR   R15                   NO
         CLI   0(R1),C'F'            VALID DIGIT?
         BNH   HEX0020               YES
         CLI   0(R1),C'0'            VALID DIGIT?
         BLR   R15                   NO
         CLI   0(R1),C'9'            VALID DIGIT?
         BHR   R15                   NO
HEX0020  DS    0H
         LA    R1,1(R1)              NEXT DIGIT
         BCT   R7,HEX0010            CHECK ALL DIGITS
         BR    R14                   DONE
* ------------------------------------------------------------------- *
*        ERROR ROUTINES                                               *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         ITRACE ID=KEYNUMER,         KEY NOT NUMERIC                   +
               DATA1=FXMKEY
         MVC   FXMMSG(MSG01L),MSG01  SET MESSAGE
         B     MSTR0020              DISPLAY PANEL WITH MESSAGE
ERR0020  DS    0H
         ITRACE ID=KEYRANGE,         KEY OUT OF RANGE                  +
               DATA1=FXMKEY
         MVC   FXMMSG(MSG02L),MSG02  SET MESSAGE
         B     MSTR0020              DISPLAY PANEL WITH MESSAGE
ERR0030  DS    0H
         ITRACE ID=DATEDELM          PERIOD NOT IN DATE
         MVC   FXMMSG(MSG03L),MSG03  SET MESSAGE
         B     MSTR0020              DISPLAY PANEL WITH MESSAGE
ERR0040  DS    0H
         ITRACE ID=DATENUM           DATE NOT NUMERIC
         MVC   FXMMSG(MSG04L),MSG04  SET MESSAGE
         B     MSTR0020              DISPLAY PANEL WITH MESSAGE
ERR0050  DS    0H
         ITRACE ID=TIMENUM           TIME NOT NUMERIC
         MVC   FXMMSG(MSG05L),MSG05  SET MESSAGE
         B     MSTR0020              DISPLAY PANEL WITH MESSAGE
ERR0060  DS    0H
         ITRACE ID=BADSTAT           STATUS NOT VALID HEX
         MVC   FXMMSG(MSG06L),MSG06  SET MESSAGE
         B     MSTR0020              DISPLAY PANEL WITH MESSAGE
ERR0070  DS    0H
         ITRACE ID=NODENUM           NUMBER OF NODES NOT NUMERIC
         MVC   FXMMSG(MSG07L),MSG07  SET MESSAGE
         B     MSTR0020              DISPLAY PANEL WITH MESSAGE
ERR0080  DS    0H
         ITRACE ID=BADNSTAT          NODE STATUS NOT VALID HEX
         MVC   FXMMSG(MSG08L),MSG08  SET MESSAGE
         B     MSTR0020              DISPLAY PANEL WITH MESSAGE
ERR0090  DS    0H
         ITRACE ID=BADUTIL           UTILITY  NOT VALID HEX
         MVC   FXMMSG(MSG09L),MSG09  SET MESSAGE
         B     MSTR0020              DISPLAY PANEL WITH MESSAGE
ERR0100  DS    0H
         ITRACE ID=REQ#NUM           REQUEST NUMBER NOT NUMERIC
         MVC   FXMMSG(MSG10L),MSG10  SET MESSAGE
         B     MSTR0020              DISPLAY PANEL WITH MESSAGE
ERR0110  DS    0H
         ITRACE ID=FSIZENUM          FILE SIZE NOT NUMERIC
         MVC   FXMMSG(MSG11L),MSG11  SET MESSAGE
         B     MSTR0020              DISPLAY PANEL WITH MESSAGE
ERR0120  DS    0H
         ITRACE ID=BADREPL           REPLACE INDICATOR NOT 'Y' OR 'N'
         MVC   FXMMSG(MSG13L),MSG13  SET MESSAGE
         B     MSTR0020              DISPLAY PANEL WITH MESSAGE
ERR0130  DS    0H
         ITRACE ID=BADCMD            BAD COMMAND IN ZCMD AREA
         MVC   FXMMSG(MSG14L),MSG14  SET MESSAGE
         B     MSTR0020              DISPLAY PANEL WITH MESSAGE
ERR0140  DS    0H
         ITRACE ID=BADSTAT,          STATUS NOT DEFINED                +
               DATA1=FXMST
         MVC   FXMMSG(MSG15L),MSG15  SET MESSAGE
         B     MSTR0020              DISPLAY PANEL WITH MESSAGE
ERR0150  DS    0H
         ITRACE ID=BADALIAS          ALIAS INDICATOR NOT 'Y' OR 'N'
         MVC   FXMMSG(MSG16L),MSG16  SET MESSAGE
         B     MSTR0020              DISPLAY PANEL WITH MESSAGE
* ------------------------------------------------------------------- *
*        EXIT                                                         *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=VAREOJ
         MVI   VARCMD,$VAREOJ        SET COMMAND (EOJ CLEAN-UP)
         LA    R1,VARREQ             VARIABLE REQUEST BLOCK
         L     R15,VTVAR             VARIABLE MANAGER ENTRY POINT
         BALR  R14,R15               LINK TO VARIABLE MANAGER
         DELETE EP=ISPLINK           DELETE SPF INTERFACE
         FXCALL FXSMSTR,CLOSE        CLOSE MASTER FILE
         DELETE EP=FXSMSTR           DELETE MASTER FILE I/O
         L     R1,TRADDR             TRACE TABLE ADDRESS
         L     R3,TRSIZE             TRACE TABLE SIZE
         FREEMAIN RU,A=(1),LV=(R3)   FREE TRACE TABLE
         L     R3,DXDSIZE            DYNAMIC WORK AREA SIZE
         L     R4,COMMDXDA           DYNAMIC WORK AREA ADDRESS
         DELETE EP=FXMCOMM           DELETE COMMON DATA MODULE
         L     R13,4(R13)            RESTORE REGISTER 13
         FREEMAIN RU,A=(4),LV=(3)    FREEMAIN WORK AREA
         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS
         SR    R15,R15               GIVE GOOD RETURN CODE
         BR    R14                   RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSIZE  CXD
DXDSTART DC    Q(DXDMMAIN)
VTVAR    DC    V(FXTVAR)             VARIABLE MANAGER
VTNODE   DC    V(FXTNODE)            NODE (DESTINATION LIST) DISPLAY
H8       DC    H'8'
NULLS    DC    8X'00'
BLANKS   DC    CL80' '
NODES    DC    C'NODES'
HEX1F    DC    8X'1F'
HEXCHAR  DC    C'0123456789ABCDEF'
*                 0 1 2 3 4 5 6 7 8 9 A B C D E F
CHARHEX  DC    X'000A0B0C0D0E0F000000000000000000'  X'00-0F'
         DC    X'00010203040506070809000000000000'  X'10-1F'
DATEEDWD DC    X'F0212020204B202020'
NODEEDWD DC    X'F0202020'
SIZEEDWD DC    X'F0202020202020202120'
NO       DC    CL3'NO '
YES      DC    CL3'YES'
DISPLAY  DC    CL8'DISPLAY'
PANLNAME DC    CL8'FXMAINT1'
MSG01    DC    C'INVALID DIGIT IN RECORD KEY'
MSG01L   EQU   *-MSG01
MSG02    DC    C'RECORD KEY OUT OF RANGE'
MSG02L   EQU   *-MSG02
MSG03    DC    C'PERIOD NOT PRESENT IN DATE'
MSG03L   EQU   *-MSG03
MSG04    DC    C'INVALID DIGIT IN DATE'
MSG04L   EQU   *-MSG04
MSG05    DC    C'INVALID DIGIT IN TIME'
MSG05L   EQU   *-MSG05
MSG06    DC    C'INVALID HEX DIGIT IN STATUS'
MSG06L   EQU   *-MSG06
MSG07    DC    C'INVALID DIGIT IN NUMBER OF NODES'
MSG07L   EQU   *-MSG07
MSG08    DC    C'INVALID HEX DIGIT IN NODE STATUS'
MSG08L   EQU   *-MSG08
MSG09    DC    C'INVALID HEX DIGIT IN UTILITY'
MSG09L   EQU   *-MSG09
MSG10    DC    C'INVALID DIGIT IN REQUEST NUMBER'
MSG10L   EQU   *-MSG10
MSG11    DC    C'INVALID DIGIT IN FILE SIZE'
MSG11L   EQU   *-MSG11
MSG13    DC    C'INVALID REPLACE FLAG'
MSG13L   EQU   *-MSG13
MSG14    DC    C'INVALID COMMAND'
MSG14L   EQU   *-MSG14
MSG15    DC    C'INVALID STATUS VALUE'
MSG15L   EQU   *-MSG15
MSG16    DC    C'INVALID ALIAS FLAG'
MSG16L   EQU   *-MSG16
         LTORG
REQMSG   DS    0C
         COPY  REQMSG
* ------------------------------------------------------------------- *
*        Work areas                                                   *
* ------------------------------------------------------------------- *
DXDMMAIN DSECT
DXDID    DS    CL8
DXDSAVE  DS    18F                   REGISTER SAVE AREA
DXDSPFEP DS    A
         SPACE 1
DXDSPFP  DS    0A                    ISPF PARAMETER LIST
DXDSPFP1 DS    A                     PARAMETER 1
DXDSPFP2 DS    A                     PARAMETER 2
DXDSPFP3 DS    A                     PARAMETER 3
DXDSPFP4 DS    A                     PARAMETER 4
DXDSPFP5 DS    A                     PARAMETER 5
DXDFLAG  DS    X                     STATUS FLAGS
$UPDATE  EQU   X'80'                 .. RECORD UPDATED
DXDWORK  DS    CL10
         VARREQ   DSECT=NO
         TNODEPRM DSECT=NO
         MSTRREQ  DSECT=NO
* ------------------------------------------------------------------- *
*        Master file record                                           *
* ------------------------------------------------------------------- *
         REQBLOK DSECT=YES
* ------------------------------------------------------------------- *
*        Common data                                                  *
* ------------------------------------------------------------------- *
         FXMCOMM TYPE=DSECT
         COPY    XTRRECD
* ------------------------------------------------------------------- *
*        Data for SPF variables                                       *
* ------------------------------------------------------------------- *
FXMCOMM  DSECT
         FXMTDATA DSECT=NO
FXMVTBLE DS    0C
         VDEF  BASE=FXMTDATA
         FXMVARS GEN=YES
* ------------------------------------------------------------------- *
*              Equates                                                *
* ------------------------------------------------------------------- *
         COPY REGEQU
         END  FXMMAIN
./ ADD NAME=FXNTBLE  0100-99056-99056-1500-00024-00024-00000-FX-REL1

* ------------------------------------------------------------------- *
* Module name: FXNTBLE                                                *
*                                                                     *
* Node display module SPF variable control data.  Each entry in this  *
* table is used to define and delete an SPF variable.  Module FXTVAR  *
* uses the data to convert the internal variable id to the SPF        *
* variable name, locate the storage associated with that variable,    *
* determine the variable's data format and length, and sets flags to  *
* indicate which variables are defined at any given time.  Since      *
* flags are set (the data in the table is updated), this module may   *
* not be linked re-entrant... therefore is is linked as a separate    *
* load module.                                                        *
*                                                                     *
* ------------------------------------------------------------------- *
FXNTBLE  CSECT
FXNTBLE  AMODE 31
FXNTBLE  RMODE ANY
         VDEF    BASE=FXNDATA
         FXNVARS GEN=YES
         DC    X'FF'
FXNDATA  DSECT
         COPY  FXNDATA
         END   FXNTBLE
./ ADD NAME=FXPCOMM  0100-99056-99056-1500-00014-00014-00000-FX-REL1

* ------------------------------------------------------------------- *
*                                                                     *
*  Name: FXPCOMM                                                      *
*                                                                     *
*  TSO interface common data and trace table manager                  *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY  OPTIONS
         FXPCOMM TYPE=CSECT
FXPCOMM  CSECT
         DC    X'FF'
         COPY  REGEQU
         END   FXPCOMM
./ ADD NAME=FXPURGE  0100-99056-99056-1500-00598-00598-00000-FX-REL1

         TITLE 'FXPURGE  PURGE OLD REQUESTS FROM MASTER FILE'
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXPURGE                                               *
*                                                                     *
*   Purge old requests from master file.  This prevents the master    *
*   file from "filling up".  A request may be purged in one of        *
*   two states.  If the request has been "completed", the retention   *
*   period is specified by the RETPDC keyword.  If a request is in    *
*   an uncompleted state (if some destination node has not become     *
*   available for a long period of time for some reason), the         *
*   request will be purged based on the RETPDU keyword.               *
*                                                                     *
*   A secondary function is to create a "sequentialized" master file. *
*   If this function is used, no records are purged from the master   *
*   file, all records whether in use or not are copied to the output  *
*   file.                                                             *
*                                                                     *
*   When records are purged, you may want to either create a GDG      *
*   and have each run generate a new generation with the records      *
*   purged during that run.  On the other hand you may want to        *
*   keep a cumulative history of purged records, taking the output    *
*   from each purge run and feeding that back in and appending        *
*   the records being purged on the current run.  To allow this,      *
*   the OLDSEQ DD is the "previous data" and is copied to the NEWSEQ  *
*   data set before any new records are purged.  If you do not want   *
*   a cumulative history, allocate the OLDSEQ with a "DD DUMMY".      *
*                                                                     *
* ------------------------------------------------------------------- *
FXPURGE  CSECT
FXPURGE  AMODE 31
FXPURGE  RMODE 24
         STM   R14,R12,12(R13)       SAVE REGS
         LR    R12,R15               COPY BASE ADDRESS
         USING FXPURGE,R12           DEFINE BASE
         B     @@000001              BRANCH AROUND EYECATCHER
         DC    ((PFXMODNM-MODPRFX)-(*-FXPURGE))X'00'
         DC    CL8'FXMMAIN'          MODULE NAME
         DC    CL8'&SYSDATE'         DATE OF ASSEMBLY
         DC    CL6'&SYSTIME'         TIME OF ASSEMBLY
@@000001 DS    0H
         LA    R1,SAVEAREA           OUR SAVE AREA ADDRESS
         ST    R1,8(R13)             CHAIN TO CALLER'S
         ST    R13,4(R1)             CHAIN CALLERS TO OURS
         LR    R13,R1                SET SAVE AREA ADDRESS
         USING SAVEAREA,R13          DEFINE 2ND BASE
         LOAD  EP=FXPCOMM            LOAD COMMON MODULE
         LR    R11,R0                SET BASE
         USING FXPCOMM,R11           DEFINE BASE
         ST    R12,AMAIN             SET MAIN MODULE ADDRESS
         LOAD  EP=FXSMSTR            LOAD MASTER FILE I/O
         ST    R0,AMSTR              SAVE MASTER FILE I/O ENTRY POINT
         L     R3,TRSIZE             TRACE TABLE SIZE
         GETMAIN RU,                 ACQUIRE STOAGE FOR TRACE TABLE    +
               LV=(R3),              .. SIZE IS IN R3                  +
               LOC=ANY               .. MAY BE ABOVE OR BELOW
         ST    R1,TRADDR             SAVE TRACE TABLE STORAGE ADDRESS
         SR    R0,R0                 ASSUME A 32-BYTE BOUNDARY
         TM    TRADDR+3,X'07'        ALREADY ON A 32-BYTE BOUNDARY
         BNO   INIT0000              YES
         SLR   R1,5                  SHIFT OUT LOW BITS..
         SLL   R1,5                  .. TO ROUND TO 32-BYTE BOUNDARY
         LA    R1,32(R1)             PLUS 32
         LA    R0,TRENTRYL           1 LESS TRACE ENTRY AVAILABLE
INIT0000 DS    0H
         ST    R1,TRFIRST            FIRST TRACE ENTRY AVAILABLE
         ST    R1,TRCURR             CURRENT TRACE ENTRY
         A     R1,TRSIZE             LAST ENTRY IN TABLE
         SH    R1,=Y(TRENTRYL)       MINUS 1 ENTRY
         SR    R1,R0                 MINUS 1 MORE IF NECESSARY
         ST    R1,TRLAST             SET LAST TRACE ENTRY ADDRESS
         ITRACE ID=INITIAL
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         OPEN  (FXIN,INPUT)          OPEN CONTROL STATEMENT FILE
         OPEN  (FXPRINT,OUTPUT)      OPEN PRINT FILE
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         BAL   R10,HEAD0000          PRINT HEADING
INIT0010 DS    0H
         ITRACE ID=READCTL           READING A CONTROL STATEMENT
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         GET   FXIN,CTLSTMT          READ A CONTROL STATEMENT
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         MVC   MSG01TXT(CTLSTMTL),CTLSTMT
         MVC   PLINE(MSG01L),MSG01   COPY MESSAGE
         BAL   R10,PRT0000           PRINT CONTROL STATEMENT
         CLI   CTLSTMT,C'*'          COMMENT?
         BE    INIT0010              YES
         ITRACE ID=CTLSTMT,                                            +
               DATA1=CTLSTMT,                                          +
               DATA2=CTLSTMT+8
         CLC   COPYSTMT,CTLSTMT      COPY STATEMENT?
         BE    COPY0000              YES
         CLC   RETCSTMT,CTLSTMT      RETPDC STATEMENT?
         BE    RETC0000              YES
         CLC   RETUSTMT,CTLSTMT      RETPDU STATEMENT?
         BE    RETU0000              YES
         MVC   PLINE(MSG02L),MSG02   INVALID STATEMENT
         BAL   R10,PRT0000           PRINT MESSAGE
         OI    PROCFLAG,$ERROR       SET ERROR FLAG
         B     INIT0010              READ NEXT CONTROL STATEMENT
COPY0000 DS    0H
         ITRACE ID=COPY
         TM    PROCFLAG,$COPY        COPY ALREADY REQUESTED?
         BO    COPY0010              YES
         OI    PROCFLAG,$COPY        SET COPY FLAG
         B     INIT0010              READ NEXT CONTROL STATEMENT
COPY0010 DS    0H
         ITRACE ID=DUPCOPY
         MVC   PLINE(MSG03L),MSG03   DUPLICATED COPY STATEMENT
         BAL   R10,PRT0000           PRINT MESSAGE
         OI    PROCFLAG,$ERROR       SET ERROR FLAG
         B     INIT0010              READ NEXT CONTROL STATEMENT
RETC0000 DS    0H
         ITRACE ID=RETC,                                               +
               DATA1=CTLSTMT+L'RETCSTMT
         TM    PROCFLAG,$RETPDC      ALREADY HAVE A RETPDC?
         BO    RETC0010              YES
         OI    PROCFLAG,$RETPDC      INDICATE RETPDC PRESENT
         LA    R7,RETPDC             OUTPUT FIELD'S ADDRESS
         LA    R1,CTLSTMT+L'RETCSTMT FIRST DIGIT
         B     RETP0000              PROCESS A RETENTION PERIOD
RETC0010 DS    0H
         ITRACE ID=DUPRETC
         MVC   PLINE(MSG04L),MSG04   DUPLICATED RETPDC VALUE
         BAL   R10,PRT0000           PRINT MESSAGE
         OI    PROCFLAG,$ERROR       SET ERROR FLAG
         B     INIT0010              READ NEXT CONTROL STATEMENT
RETU0000 DS    0H
         ITRACE ID=RETU,                                               +
               DATA1=CTLSTMT+L'RETUSTMT
         TM    PROCFLAG,$RETPDU      ALREADY HAVE A RETPDU?
         BO    RETU0010              YES
         OI    PROCFLAG,$RETPDU      INDICATE RETPDU PRESENT
         LA    R7,RETPDU             OUTPUT FIELD'S ADDRESS
         LA    R1,CTLSTMT+L'RETUSTMT FIRST DIGIT
         B     RETP0000              PROCESS A RETENTION PERIOD
RETU0010 DS    0H
         ITRACE ID=DUPRETU
         MVC   PLINE(MSG05L),MSG05   DUPLICATED RETPDU VALUE
         BAL   R10,PRT0000           PRINT MESSAGE
         OI    PROCFLAG,$ERROR       SET ERROR FLAG
         B     INIT0010              READ NEXT CONTROL STATEMENT
RETP0000 DS    0H
         MVC   NBRIN,=C'000'         INITIALIZE TO ZERO
         LA    R2,3                  NUMBER OF DIGITS
RETP0010 DS    0H
         CLI   0(R1),C' '            BLANK?
         BE    RETP0020              YES
         CLI   0(R1),C'0'            VALID DIGIT?
         BL    RETP0030              NO
         CLI   0(R1),C'9'            VALID DIGIT?
         BH    RETP0030              NO
         MVC   NBRIN(2),NBRIN+1      SHIFT LEFT 1 DIGIT
         MVC   NBRIN+2(1),0(R1)      COPY DIGIT
         LA    R1,1(R1)              NEXT DIGIT
         BCT   R2,RETP0010           LOOP
         CLI   0(R1),C' '            BLANK?
         BNE   RETP0040              NO
RETP0020 DS    0H
         PACK  DWORD,NBRIN           PACK NUMBER OF DAYS
         CVB   R1,DWORD              CONVERT TO BINARY
         LTR   R1,R1                 VALUE ZERO?
         BZ    RETP0050              YES
         STH   R1,0(R7)              SAVE RETENTION PERIOD
         B     INIT0010              READ NEXT CONTROL STATEMENT
RETP0030 DS    0H
         MVC   PLINE(MSG06L),MSG06   INVALID DIGIT IN RETPD VALUE
         BAL   R10,PRT0000           PRINT MESSAGE
         OI    PROCFLAG,$ERROR       SET ERROR FLAG
         B     INIT0010              READ NEXT CONTROL STATEMENT
RETP0040 DS    0H
         MVC   PLINE(MSG07L),MSG07   TOO MANY DIGITS IN RETPD VALUE
         BAL   R10,PRT0000           PRINT MESSAGE
         OI    PROCFLAG,$ERROR       SET ERROR FLAG
         B     INIT0010              READ NEXT CONTROL STATEMENT
RETP0050 DS    0H
         MVC   PLINE(MSG08L),MSG08   RETPD IS ZERO DAYS
         BAL   R10,PRT0000           PRINT MESSAGE
         OI    PROCFLAG,$ERROR       SET ERROR FLAG
         B     INIT0010              READ NEXT CONTROL STATEMENT
PROC0000 DS    0H
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         ITRACE ID=CTLEOF
         TM    PROCFLAG,$ERROR       ERROR ALREADY SET?
         BO    EXIT0000              YES
         TM    PROCFLAG,$COPY        WAS COPY REQUESTED?
         BO    PROC0010              YES
         TM    PROCFLAG,$RETPDC+$RETPDU   BOTH RETPDC AND RETPDU GIVEN?
         BO    PROC0020              YES
         MVC   PLINE(MSG09L),MSG09   RETPDC AND RETPDU ARE REQUIRED
         BAL   R10,PRT0000           PRINT MESSAGE
         OI    PROCFLAG,$ERROR       SET ERROR FLAG
         B     EXIT0000              EXIT
PROC0010 DS    0H
         TM    PROCFLAG,$RETPDC+$RETPDU   RETPDC OR RETPDU GIVEN?
         BZ    PROC0020              NO
         MVC   PLINE(MSG10L),MSG10   COPY AND PURGE IN ONE EXECUTION
         BAL   R10,PRT0000           PRINT MESSAGE
         OI    PROCFLAG,$ERROR       SET ERROR FLAG
         B     EXIT0000              EXIT
PROC0020 DS    0H
         ITRACE ID=OPENNEW
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         OPEN  (NEWSEQ,OUTPUT)       OPEN OUTPUT DATASET
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         TM    PROCFLAG,$COPY        COPYING RECORDS?
         BO    PROC0060              YES
         ITRACE ID=OPENOLD
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         OPEN  (OLDSEQ,INPUT)        OPEN PREVIOUS DATASET
         B     PROC0040              SWITCH TO 31-BIT MODE
PROC0030 DS    0H
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
PROC0040 DS    0H
         GET   OLDSEQ,REQBLOK        READ FROM PREVIOUS FILE
         AP    OLDCT,P1              ADD 1 TO NUMBER OF OLD RECORDS
         PUT   NEWSEQ,REQBLOK        COPY TO NEW FILE
         AP    NEWCT,P1              ADD 1 TO NUMBER OF NEW RECORDS
         B     PROC0030              COPY ALL RECORDS
PROC0050 DS    0H
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
PROC0060 DS    0H
         XC    DWORD,DWORD           CLEAR WORK AREA
         TIME  DEC
         LR    R0,R1                 SAVE DATE IN JULIAN FORMAT
         SRL   R1,12                 SHIFT DATE TO LOW NIBBLES
         STCM  R1,3,DWORD+6          SAVE CYY (AND HIGH BYTE OF DAY)
         OI    DWORD+7,X'0F'         FORCE LAST DIGIT TO SIGN
         CVB   R1,DWORD              CONVERT YEAR TO BINARY
         MH    R1,H365               TIMES DAYS PER YEAR
         STCM  R0,3,DWORD+6          SAVE DAY
         CVB   R0,DWORD              CONVERT DAY
         AR    R1,R0                 DAYS SINCE JAN 1, 1900
         ST    R1,CURRDAY            SAVE CURRENT DAY
         LA    R5,DYNRB              DYNALLOC REQUEST BLOCK'S ADDRESS
         USING S99RB,R5              DEFINE BASE
         MVI   S99RBLN,S99RBEND-S99RB
         LA    R1,DYNPARM            DDNAME PARM
         ST    R1,S99TXTPP           SET FIRST TEXT UNIT ADDRESS
         FXCALL FXSMSTR,OPEN         OPEN MASTER FILE
         L     R9,COMMRECS           NUMBER OF RECORDS IN MASTER FILE
         XC    MSTRREC#,MSTRREC#     FIRST RECORD NUMBER
PURG0010 DS    0H
         ITRACE ID=READMSTR,                                           +
               DATA1=MSTRREC#,                                         +
               RDATA2=R9
         FXCALL FXSMSTR,READ         READ A RECORD
         TM    PROCFLAG,$COPY        COPYING ONLY?
         BO    PURG0070              YES
         CLI   REQSTAT,X'FF'         CONTROL RECORD?
         BE    PURG0080              YES.. NEVER PURGE IT
         CLI   REQSTAT,$REQDUMP      NEVER USED, FREE, OR INIT STATE?
         BL    PURG0080              YES.. SKIP IT
         ICM   R1,15,REQEDATE        DATE IN JULIAN FORMAT
         LR    R0,R1                 SAVE DATE IN JULIAN FORMAT
         SRL   R1,12                 SHIFT DATE TO LOW NIBBLES
         STCM  R1,3,DWORD+6          SAVE CYY (AND HIGH BYTE OF DAY)
         OI    DWORD+7,X'0F'         FORCE LAST DIGIT TO SIGN
         CVB   R1,DWORD              CONVERT YEAR TO BINARY
         MH    R1,H365               TIMES DAYS PER YEAR
         STCM  R0,3,DWORD+6          SAVE DAY
         CVB   R0,DWORD              CONVERT DAY
         AR    R1,R0                 DAYS SINCE JAN 1, 1900
         L     R0,CURRDAY            CURRENT DAY
         SR    R0,R1                 DAYS SINCE REQUEST WAS ENTERED
         CLI   REQSTAT,$REQDONE      IN 'COMPLETE' (OR ERROR) STATUS?
         BL    PURG0020              NO
         CH    R0,RETPDC             TIME TO PURGE AS COMPLETED?
         BL    PURG0080              NO
         AP    PURGECCT,P1           ADD 1 TO COMPLETE-STATE PURGES
         B     PURG0030
PURG0020 DS    0H
         CH    R0,RETPDU             TIME TO PURGE?
         BL    PURG0080              NO
         AP    PURGEUCT,P1           ADD 1 TO INCOMPLETE-STATE PURGES
PURG0030 DS    0H
         CLC   REQWDSNM,BLANKS       WORK DATASET PRESENT?
         BE    PURG0040              NO
         MVC   DSNAME,REQWDSNM       SET DSNAME
         BAL   R10,DAIR0000          DELETE THE DATASET
PURG0040 DS    0H
         CLC   REQIDSNM,BLANKS       SYSIN DATASET PRESENT?
         BE    PURG0050              NO
         MVC   DSNAME,REQIDSNM       SET DSNAME
         BAL   R10,DAIR0000          DELETE THE DATASET
PURG0050 DS    0H
         CLC   REQSDSNM,BLANKS       SYSPRINT DATASET PRESENT?
         BE    PURG0060              NO
         MVC   DSNAME,REQSDSNM       SET DSNAME
         BAL   R10,DAIR0000          DELETE THE DATASET
PURG0060 DS    0H
         MVC   MSG11NDE,REQENODE     COPY ENTRY POINT NODE
         MVC   MSG11NBR,=X'4021202020202020'
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DWORD              CONVERT TO DECIMAL
         ED    MSG11NBR,DWORD+4      EDIT REQUEST NUMBER
         MVC   PLINE(MSG11L),MSG11   COPY MESSAGE
         BAL   R10,PRT0000           PRINT MESAGE
PURG0070 DS    0H
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         PUT   NEWSEQ,REQBLOK        WRITE TO SEQUENTIAL FILE
         AP    NEWCT,P1              ADD 1 TO NEW RECORDS
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         TM    PROCFLAG,$COPY        COPYING RECORDS?
         BO    PURG0080              YES
         MINIT BLANKS,P0,$REQFREE,R14 RESET MASTER FILE RECORD
         FXCALL FXSMSTR,WRITE        RE-WRITE MASTER FILE RECORD
PURG0080 DS    0H
         SR    R1,R1                 CLEAR REGISTER
         ICM   R1,3,MSTRREC#         CURRENT RECORD NUMBER
         LA    R1,1(R1)              NEXT RECORD NUMBER
         STCM  R1,3,MSTRREC#         SAVE RECORD NUMBER
         BCT   R9,PURG0010           TEST ALL RECORDS
         ITRACE ID=CLOSENEW
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         CLOSE NEWSEQ                OPEN OUTPUT FILE
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         B     EXIT0000              EXIT
DAIR0000 DS    0H
         MVI   S99VERB,S99VRBAL      SET VERB (ALLOCATE)
         NI    DYNPARM,X'7F'         RESET END-OF-LIST
         LA    R1,DYNRBA             POINTER'S ADDRESS
         DYNALLOC                    ALLOCATE THE DATASET
         LTR   R15,R15               ALLOCATE SUCCESSFUL?
         BNZ   DAIR0010              NO
         MVI   S99VERB,S99VRBUN      SET VERB (DE-ALLOCATE)
         OI    DYNPARM,X'80'         SET END-OF-LIST
         LA    R1,DYNRBA             POINTER'S ADDRESS
         DYNALLOC                    DE-ALLOCATE THE DATASET
         LTR   R15,R15               DE-ALLOCATE SUCCESSFUL?
         BZR   R10                   YES
DAIR0010 DS    0H
         CLC   X1708,S99ERROR        DATA SET NOT FOUND?
         BER   R10                   NOT, FOUND (ACCEPTABLE)
         ST    R15,DWORD             SAVE RETURN CODE
         UNPK  MSG13R15(5),DWORD+2(3) UNPACK R15
         MVZ   MSG13R15,HEXZERO       CLEAR ZONES
         TR    MSG13R15,HEXCHAR       TRANSLATE TO PRINTABLE
         MVI   MSG13R15+4,C' '        RESTORE BLANK
         UNPK  MSG13ERR(5),S99ERROR(3)
         MVZ   MSG13ERR,HEXZERO      CLEAR ZONES
         TR    MSG13ERR,HEXCHAR      TRANSLATE TO PRINTABLE
         MVI   MSG13ERR+4,C' '       RESTORE BLANK
         UNPK  MSG13INF(5),S99INFO(3)
         MVZ   MSG13INF,HEXZERO      CLEAR ZONES
         TR    MSG13INF,HEXCHAR      TRANSLATE TO PRINTABLE
         MVI   MSG13INF+4,C' '       RESTORE BLANK
         MVC   PLINE(MSG13L),MSG13   COPY MESSAGE
         BAL   R10,PRT0000           PRINT IT
         DC    H'0'
         B     EXIT0000              AND EXIT
PRT0000  DS    0H
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         PUT   FXPRINT,PLINE         PRINT
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         AP    LINECT,P1             ADD 1 TO LINE COUNT
         CLI   PLINE,C' '            SINGLE SPACE?
         BE    PRT0010               YES
         AP    LINECT,P1             ADD 1 TO LINE COUNT
         CLI   PLINE,C'0'            DOUBLE SPACE?
         BE    PRT0010               YES
         AP    LINECT,P1             ADD 1 TO LINE COUNT
PRT0010  DS    0H
         MVC   PLINE,PLINE-1         CLEAR PRINT I/O AREA
         CP    LINECT,MAXLINE        TIME FOR HEADING?
         BLR   R10                   NO
HEAD0000 DS    0H
         AP    PAGECT,P1             ADD 1 TO PAGE COUNT
         MVC   HEADPAGE,=X'40202120' INITIALIZE WITH EDIT WORD
         ED    HEADPAGE,PAGECT       EDIT PAGE COUNT
         MVC   PLINE(HEADINGL),HEADING
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         PUT   FXPRINT,PLINE         PRINT HEADING
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         MVC   PLINE,PLINE-1         CLEAR PRINT I/O AREA
         ZAP   LINECT,P1             RESET LINE COUNT
         BR    R10
AM24     DS    0H
         LA    R15,0(R15)            CLEAR HIGH BIT(S)
         BSM   R0,R15                RETURN IN 24-BIT MODE
AM31     DS    0H
         LA    R15,0(R15)            CLEAR HIGH BIT(S)
         O     R15,X80               SET 31-BIT MODE
         BSM   R0,R15                RETURN IN 24-BIT MODE
* ------------------------------------------------------------------- *
*        EXIT                                                         *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ED    MSG16CT,OLDCT         EDIT OLD FILE RECORD COUNT
         MVC   PLINE(MSG16L),MSG16   COPY MESSAGE
         BAL   R10,PRT0000           PRINT MESSAGE
         ED    MSG17CT,NEWCT         EDIT NEW FILE RECORD COUNT
         MVC   PLINE(MSG17L),MSG17   COPY MESSAGE
         BAL   R10,PRT0000           PRINT MESSAGE
         ED    MSG18CT,PURGEUCT      EDIT UNCOMPLETE-STATE PURGES
         MVC   PLINE(MSG18L),MSG18   COPY MESSAGE
         BAL   R10,PRT0000           PRINT MESSAGE
         ED    MSG19CT,PURGECCT      EDIT COMPLETED-STATE PURGES
         MVC   PLINE(MSG19L),MSG19   COPY MESSAGE
         BAL   R10,PRT0000           PRINT MESSAGE
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         CLOSE FXIN
         CLOSE FXPRINT
         TM    PROCFLAG,$ERROR       ERRORS?
         BO    EXIT0010              YES
         CLOSE NEWSEQ                CLOSE OUTPUT FILE
         TM    PROCFLAG,$COPY        COPYING?
         BO    EXIT0010              YES
         CLOSE OLDSEQ                CLOSE
EXIT0010 DS    0H
         BAL   R15,AM31              RETURN TO 31-BIT MODE
         FXCALL FXSMSTR,CLOSE        CLOSE MASTER FILE
         ITRACE ID=EXIT
         L     R0,TRSIZE             TRACE TABLE SIZE
         L     R1,TRADDR             TRACE TABLE ADDRESS
         FREEMAIN RU,A=(1),LV=(0)    FREEMAIN TRACE TABLE
         DELETE EP=FXPCOMM           DELETE COMMON
         DELETE EP=FXSMSTR           DELETE MASTER FILE I/O MODULE
         L     R13,4(R13)            RESTORE REGISTER 13
         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS
         SR    R15,R15               GIVE GOOD RETURN CODE
         BR    R14                   RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DWORD    DC    D'0'
SAVEAREA DS    18F
X80      DC    X'80000000'
X1708    DC    X'1708'
CURRDAY  DC    F'0'                   CURRENT DAY SINCE JAN 1, 1900
CURRDISP DC    F'0'                   CURRENT RECORD DISPLACEMENT
RETPDC   DC    H'0'
RETPDU   DC    H'0'
H365     DC    H'365'
RECCNT   DC    PL3'0'
P0       DC    P'0'
P1       DC    P'1'
MAXLINE  DC    P'&MAXL'
OLDCT    DC    PL5'0'
NEWCT    DC    PL5'0'
PURGEUCT DC    PL5'0'
PURGECCT DC    PL5'0'
LINECT   DC    PL2'0'
PAGECT   DC    PL2'0'
PROCFLAG DC    X'00'                  MAIN PROCESSING FLAGS
$ERROR   EQU   X'80'                  .. ERROR(S) IN CONTROL STATEMENTS
$RETPDC  EQU   X'40'                  .. RETPDC VALUE GIVEN
$RETPDU  EQU   X'20'                  .. RETPDU VALUE GIVEN
$COPY    EQU   X'10'                  .. FILE COPY REQUESTED
HEXZERO  DC    8X'00'
BLANKS   DC    CL44' '
HEXCHAR  DC    C'0123456789ABCDEF'
NBRIN    DC    CL3'000'
RETCSTMT DC    C'RETPDC='
RETUSTMT DC    C'RETPDU='
COPYSTMT DC    C'COPY '
HEADING  DS    0C
         DC    C'1'
         DC    CL51' '
         DC    C'FX MASTER FILE PURGE'
         DC    CL52' '
         DC    C'PAGE'
HEADPAGE DC    CL4' '
HEADINGL EQU   *-HEADING
MSG01    DS    0C
         DC    C' '
         DC    C'FXPURGE01I   '
         DC    C'CONTROL STATEMENT: '
MSG01TXT DS    (CTLSTMTL)C
MSG01L   EQU   *-MSG01
MSG02    DC    C' FXPURGE02E * INVALID STATEMENT'
MSG02L   EQU   *-MSG02
MSG03    DC    C' FXPURGE03E * DUPLICATE COPY STATEMENT'
MSG03L   EQU   *-MSG03
MSG04    DC    C' FXPURGE04E * DUPLICATE RETPDC STATEMENT'
MSG04L   EQU   *-MSG04
MSG05    DC    C' FXPURGE05E * DUPLICATE RETPDU STATEMENT'
MSG05L   EQU   *-MSG05
MSG06    DC    C' FXPURGE06E * INVALID DIGIT IN RETPD VALUE'
MSG06L   EQU   *-MSG06
MSG07    DC    C' FXPURGE07E * TOO MANY DIGITS IN RETPD VALUE'
MSG07L   EQU   *-MSG07
MSG08    DC    C' FXPURGE08E * RETENTION PERIOD MAY NOT BE ZERO DAYS'
MSG08L   EQU   *-MSG08
MSG09    DC    C' FXPURGE09E * BOTH RETPDC AND RETPDU ARE REQUIRED'
MSG09L   EQU   *-MSG09
MSG10    DC    C' FXPURGE10E * COPY IS NOT ALLOWED WITH RETPDC OR RETPU+
               '
MSG10L   EQU   *-MSG10
MSG11    DS    0C
         DC    C' '
         DC    C'FXPURGE11I   REQUEST '
MSG11NDE DC    CL8' '
MSG11NBR DC    CL8' '
         DC    C' PURGED'
MSG11L   EQU   *-MSG11
MSG13    DS    0C
         DC    C'-'
         DC    C'FXPURGE13E * DYNAMIC ALLOCATION ERROR, R15='
MSG13R15 DC    CL4' '
         DC    C' ERROR='
MSG13ERR DC    CL4' '
         DC    C' INFO='
MSG13INF DC    CL4' '
         DC    C' '
MSG13L   EQU   *-MSG13
MSG16    DS    0C
         DC    C'0'
         DC    C'FXPURGE16I   RECORDS COPIED FROM OLDSEQ         '
MSG16CT  DC    X'402020206B2020206B202120'
MSG16L   EQU   *-MSG16
MSG17    DS    0C
         DC    C'0'
         DC    C'FXPURGE17I   RECORDS WRITTEN TO NEWSEQ          '
MSG17CT  DC    X'402020206B2020206B202120'
MSG17L   EQU   *-MSG17
MSG18    DS    0C
         DC    C'0'
         DC    C'FXPURGE18I   RECORDS PURGED IN IN-COMPLETE STATE'
MSG18CT  DC    X'402020206B2020206B202120'
MSG18L   EQU   *-MSG18
MSG19    DS    0C
         DC    C'0'
         DC    C'FXPURGE19I   RECORDS PURGED IN COMPLETED STATE  '
MSG19CT  DC    X'402020206B2020206B202120'
MSG19L   EQU   *-MSG19
         SPACE 1
         DC    C' '
PLINE    DC    CL133' '
PLINEL   EQU   *-PLINE
         SPACE 1
CTLSTMT  DS    CL80
CTLSTMTL EQU   *-CTLSTMT
         SPACE 1
DYNRBA   DC    A(DYNRB+X'80000000')
DYNRB    DC    (S99RBEND-S99RB)X'00'
DYNPARM  DC    A(DDNAMEP)
         DC    A(DSNAMEP)
         DC    A(DISPIP)
         DC    A(DISPNP+X'80000000')
DDNAMEP  DC    AL2(DALDDNAM)         DDNAME PARMS
         DC    AL2(1)
         DC    AL2(8)
         DC    CL8'SCRDD'            DDNAME
DSNAMEP  DC    AL2(DALDSNAM)         DATASET NAME PARMS
         DC    AL2(1)
         DC    AL2(44)
DSNAME   DC    CL44' '               DATASET NAME
DISPIP   DC    AL2(DALSTATS)         INITIAL DISPOSITION PARMS
         DC    AL2(1)
         DC    AL2(1)
         DC    X'01'                 INITIAL DISPOSITION (OLD)
DISPNP   DC    AL2(DALNDISP)         NORMAL DISPOSITION PARMS
         DC    AL2(1)
         DC    AL2(1)
         DC    X'04'                 NORMAL DISPOSITION  (DELETE)
         SPACE 1
FXIN     DCB   DDNAME=FXIN,              CONTROL STATEMENT FILE        +
               DSORG=PS,                 .. SEQUENTIAL FILE            +
               RECFM=FB,                 .. FIXED BLOCK RECORDS        +
               LRECL=CTLSTMTL,           .. RECORD SIZE                +
               EODAD=PROC0000,           .. END OF DATA                +
               MACRF=GM                  .. GET/MOVE MODE
FXPRINT DCB    DDNAME=FXPRINT,           PRINT FILE                    +
               DSORG=PS,                 .. SEQUENTIAL FILE            +
               RECFM=FBA,                .. FIXED BLOCK RECORDS        +
               LRECL=PLINEL,             .. RECORD SIZE                +
               MACRF=PM                  .. PUT/MOVE MODE
OLDSEQ   DCB   DDNAME=OLDSEQ,            PREVIOUS OUTPUT FILE          +
               DSORG=PS,                 .. SEQUENTIAL FILE            +
               RECFM=FB,                 .. FIXED BLOCK RECORDS        +
               EODAD=PROC0050,           .. END OF DATA                +
               MACRF=GM                  .. GET/MOVE MODE
NEWSEQ   DCB   DDNAME=NEWSEQ,            OUTPUT FILE                   +
               DSORG=PS,                 .. SEQUENTIAL FILE            +
               RECFM=FB,                 .. FIXED BLOCK RECORDS        +
               LRECL=REQBLOKL,           .. RECORD SIZE                +
               BLKSIZE=REQBLOKL*20,      .. RECORD SIZE                +
               MACRF=PM                  .. PUT/MOVE MODE
         LTORG
         MSTRREQ DSECT=NO
         ORG     MSTRRECD
         REQBLOK DSECT=NO
* ------------------------------------------------------------------- *
*              Common data map                                        *
* ------------------------------------------------------------------- *
         FXPCOMM TYPE=DSECT
* ------------------------------------------------------------------- *
*              EQUATES                                                *
* ------------------------------------------------------------------- *
         COPY REGEQU
         IEFZB4D0
         IEFZB4D2
         END  FXPURGE
./ ADD NAME=FXSATTN  0100-99056-99056-1500-00366-00366-00000-FX-REL1

         TITLE 'VTAM ATTN EXIT'
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXSATTN                                               *
*                                                                     *
*  VTAM ATTN exit.                                                    *
*                                                                     *
*   Register usage:                                                   *
*                                                                     *
*      R3   CONVREQ/SESSREQ block address                             *
*      R4   FMH5 address                                              *
*      R5   Return address                                            *
*      R6   CONVBLOK address                                          *
*      R7   SESSBLOK address                                          *
*      R8   RPL extension address                                     *
*      R9   RPL address                                               *
*      R10  Parameter list passed by VTAM (EXITPARM DSECT)            *
*      R11  FXSCOMM address                                           *
*      R12  Program base                                              *
*                                                                     *
*  -----------------------------------------------------------------  *
*                                                                     *
*  For session establishment (FMH5 calls)                             *
*    A) For an FX-to-FX link                                          *
*         1) The SESSBLOK for the FX STC that is allocating the       *
*            conversation should already be on the SESSBLOK chain,    *
*            if not the conversation is rejected.                     *
*         2) If the SESSBLOK for the partner FX is found, a CONVBLOK  *
*            is added to the chain.                                   *
*         3) A message is printed to log the conversation.            *
*    B) For a user                                                    *
*         1) The user's LU name must not also be defined as an FXNODE.*
*         2) A SESSBLOK is added to the SESSBLOK chain.               *
*         3) A CONVBLOK is chained from the new SESSBLOK.             *
*         4) A message is printed to log the conversation.            *
*                                                                     *
*  For session termination (LOSS calls)                               *
*    The "error pending" flag is set in the SESSBLOK.  The CONVBLOK   *
*    (and for user sessions the SESSBLOK) is deleted by FXSLOSS.      *
*                                                                     *
* ------------------------------------------------------------------- *
FXSATTN  CSECT
FXSATTN  AMODE 31
FXSATTN  RMODE ANY
         LR    R12,R15               LOAD BASE
         USING FXSATTN,R12           DEFINE BASE
         LR    R10,R1                COPY PARAMETER LIST ADDRESS
         USING EXITPARM,R10          DEFINE BASE
         LR    R5,R14                SAVE RETURN ADDRESS
         B     ATTN0010              SKIP ADDRESS AND EYECATCHER
         DC    ((PFXMODNM-MODPRFX)-(*-FXSATTN))X'00'
         DC    CL8'FXSATTN'          MODULE NAME
         DC    C'&SYSDATE'           DATE OF ASSEMBLY
         DC    C'&SYSTIME'           TIME OF ASSEMBLY
ATTN0010 DS    0H
         GETMAIN RU,LV=72,LOC=BELOW  ACQUIRE A SAVE AREA
         LR    R13,R1                SAVE AREA ADDRESS
         L     R1,EXITACB            ACB'S ADDRESS
         USING IFGACB,R1             DEFINE BASE
         L     R11,ACBUSER           COMMON DATA ADDRESS
         USING FXSCOMM,R11           DEFINE BASE
         L     R9,EXITRPL            RPL'S ADDRESS
         USING IFGRPL,R9             DEFINE BASE
         L     R8,RPLAAREA           RPL EXTENSTION'S ADDRESS
         USING ISTRPL6X,R8           DEFINE BASE
         ITRACE ID=ENTRY,                                              +
               DATA1=EXITTYPE,       .. REASON FOR CALL                +
               DATA2=RPL6LU          .. LU INVOLVED
         ICM   R7,15,COMMSESS        FIRST SESSION BLOCK
         USING SESSBLOK,R7           DEFINE BASE
         BZ    ATTN0030              UNKNOWN LU
ATTN0020 DS    0H
         CLC   RPL6LU,SESSNAME       SESSION BLOCK LOCATED?
         BE    ATTN0030              YES
         ICM   R7,15,SESSNEXT        NEXT SESSION BLOCK
         BNZ   ATTN0020              LOOP
ATTN0030 DS    0H
         CLC   EXITTYPE,CNOSTYPE     CNOS CALL?
         BE    CNOS0000              YES
         CLC   EXITTYPE,FMH5TYPE     FMH5 CALL?
         BE    FMH50000              YES
         CLC   EXITTYPE,LOSSTYPE     LOSS CALL?
         BE    LOSS0000              YES
         B     EXIT0000              OTHERWISE EXIT
* ------------------------------------------------------------------- *
*             CNOS                                                    *
* ------------------------------------------------------------------- *
CNOS0000 DS    0H
         ITRACE ID=CNOS,             CNOS                              +
               DATA1=SESSNAME,       .. LU NAME                        +
               RDATA2=R7             .. SESSION BLOCK'S ADDRESS
         B     EXIT0000              EXIT
* ------------------------------------------------------------------- *
*             FMH5                                                    *
* ------------------------------------------------------------------- *
FMH50000 DS    0H
         ITRACE ID=FMH5,             FMH5 RECEIVED                     +
               DATA1=RPL6LU          .. LU'S NAME
         GETMAIN RU,                 ACQUIRE STORAGE FOR AN RPL        +
               LV=RPLL,              .. SIZE                           +
               LOC=BELOW             .. FROM BELOW THE LINE
         LR    R9,R1                 COPY RPL ADDRESS
         MVC   0(RPLL,R9),RPLI       INITIALIZE RPL
         GETMAIN RU,                 ACQUIRE STORAGE FOR RPL EXTENSION +
               LV=RPLEXTL,           .. SIZE                           +
               LOC=BELOW             .. FROM BELOW THE LINE
         LR    R8,R1                 COPY ADDRESS
         MVC   0(RPLEXTL,R8),RPLEXTI INITIALIZE RPL EXTENSION
         ST    R8,RPLAAREA           SET EXTENSION ADDRESS IN THE RPL
         MVC   RPLDACB,EXITACB       SET ACB ADDRESS
         GETMAIN RU,                 ACQUIRE STORAGE FOR FMH5          +
               LV=FMH5L,             .. SIZE                           +
               LOC=BELOW             .. FROM BELOW THE LINE
         LR    R4,R1                 COPY FMH5 STORAGE ADDRESS
         USING FMH5,R4               DEFINE BASE
         ITRACE ID=RECVFMH5
         APPCCMD CONTROL=RCVFMH5,    RECEIVE THE FMH5                  +
               RPL=(R9),             .. RPL ADDRESS                    +
               CONMODE=CS,           .. CONTINUE SPECIFIC              +
               AREA=(R4),            .. FMH5 STORAGE ADDRESS           +
               AREALEN=FMH5L,        .. FMH5 STORAGE SIZE              +
               OPTCD=SYN             .. FORCE IT TO BE SYNCHRONOUS
         OC    RPL6RC,RPL6RC         SUCCESSFUL?
         BNZ   FMH50050              NO
         LTR   R7,R7                 KNOWN SESSION?
         BZ    FMH50010              NO
         CLC   USER,FMH5TRAN         USER SESSION?
         BE    FMH50060              YES.. BAD NEWS
         ITRACE ID=NEWFX             NEW FX-TO-FX SESSION
         MVI   SESSSTAT,$SESSRDY     SESSION STATUS IS 'READY'
         GETMAIN RU,LV=CONVREQL      ACQUIRE STORAGE FOR REQUEST BLOCK
         LR    R3,R1                 COPY STORAGE ADDRESS
         USING CONVREQ,R3            DEFINE BASE
         FXCALL FXSCONV,ADD,,(R7)    ADD A CONVERSATION BLOCK
         L     R6,CONVADDR           RETURNED CONVERSATION BLOCK'S ADDR
         USING CONVBLOK,R6           DEFINE BASE
         MVI   CONVTYPE,$CONVTS      SECONDARY END OF FX CONVERSATION
         MVI   CONVSTAT,$CONVRDY     CONVERSATION STATUS IS 'READY'
         FREEMAIN RU,A=(R3),LV=CONVREQL   FREEMAIN PARM BLOCK
         B     FMH50020              FREE STORAGE AND EXIT
FMH50010 DS    0H
         CLC   USER,FMH5TRAN         USER TRANSACTION?
         BNE   FMH50070              NO.. BAD NEWS
         ITRACE ID=NEWUSER           NEW USER SESSION
         GETMAIN RU,LV=SESSREQL      ACQUIRE STORAGE FOR REQUEST BLOCK
         LR    R3,R1                 COPY STORAGE ADDRESS
         USING SESSREQ,R3            DEFINE BASE
         ITRACE ID=ADDSESS           ADDING A SESSION BLOCK
         FXCALL FXSSESS,ADD,RPL6LU   ADD A SESSION BLOCK
         LTR   R15,R15               ADD SUCCESSFUL?
         BNZ   ERR0010               NO.. INTERNAL ERROR
         L     R7,SESSADDR           NEW SESSION BLOCK'S ADDRESS
         MVI   SESSTYPE,$SESSUSR     INDICATE USER SESSION
         FREEMAIN RU,A=(3),LV=SESSREQL
         GETMAIN RU,LV=CONVREQL      ACQUIRE STORAGE FOR REQUEST BLOCK
         LR    R3,R1                 COPY STORAGE ADDRESS
         USING CONVREQ,R3            DEFINE BASE
         FXCALL FXSCONV,ADD,,(R7)    ADD A CONVERSATION BLOCK
         L     R6,CONVADDR           RETURNED CONVERSATION BLOCK'S ADDR
         FREEMAIN RU,A=(R3),LV=CONVREQL   FREEMAIN PARM BLOCK
         USING CONVBLOK,R6           DEFINE BASE
         MVI   CONVTYPE,$CONVTU      USER SESSION
         MVI   CONVSTAT,$CONVRDY     CONVERSATION STATUS IS 'READY'
FMH50020 DS    0H
         ITRACE ID=CID,              TRACE CONVERSATION ID'S           +
               DATA1=RPL6CNVD        .. SAVE CONVERSATION ID
         MVC   CONVCID,RPL6CNVD      SAVE CONVERSATION ID
         MVI   SESSSTAT,$SESSRDY     SESSION STATUS IS 'READY'
         NI    SESSSTAT,255-$SESSERR
         FREEMAIN RU,A=(R4),LV=FMH5L FREE FMH5 STORAGE
         FREEMAIN RU,A=(R8),LV=RPLEXTL
         FREEMAIN RU,A=(R9),LV=RPLL
         GETMAIN RU,                 ACQUIRE STORAGE FOR PRTBLOK       +
               LV=PRTBLOKL           .. ACQUIRE STORAGE FOR PRINT BLOCK
         USING PRTBLOK,R1            DEFINE BASE
         MVI   PRTCC,C' '            INITIALIZE CARRIAGE CONTROL
         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC
         MVC   PRTMSGID(MSG01L),MSG01 SET MESSAGE
         MVC   PRTMSGID+(MSG01NDE-MSG01)(L'MSG01NDE),SESSNAME
         CLI   SESSTYPE,$SESSFX      FX-TO-FX SESSION?
         BE    FMH50030              YES
         MVC   PRTMSGID+(MSG01TYP-MSG01)(L'MSG01TYP),USER
         B     FMH50040
FMH50030 DS    0H
         MVC   PRTMSGID+(MSG01TYP-MSG01)(L'MSG01TYP),FX
FMH50040 DS    0H
         FXCALL PRTQ,PRINT           ADD REQUEST TO PRINT QUEUE
         FREEMAIN RU,A=(1),LV=PRTBLOKL
         POST  COMMVECB              THERE IS WORK TO DO
         B     EXIT0000              EXIT
FMH50050 DS    0H
         ITRACE ID=RCVFMH5F
         LR    R2,R15                COPY RETURN CODE
         ABEND $U0026,DUMP,,USER     ABEND
FMH50060 DS    0H
         ITRACE ID=BADFXTR           BAD TRANSACTION NAME FROM FX
         ABEND $U0027,DUMP,,USER     ABEND
FMH50070 DS    0H
         ITRACE ID=BADSESS           SESSION REQUEST FROM UNKNOWN USER
         APPCCMD CONTROL=REJECT,     ISSUE APPC COMMAND                +
               QUALIFY=SESSION,      .. REJECT THE SESSION             +
               DEACTYP=HEX0F,        .. DEACTIVATE TYPE (CLEAN-UP)     +
               RPL=(R9),             .. RPL ADDRESS                    +
               OPTCD=SYN             .. FORCE IT TO BE SYNCHRONOUS
         OC    RPL6RC,RPL6RC         SUCCESSFUL?
         BNZ   FMH50080              NO
         FREEMAIN RU,A=(R4),LV=FMH5L FREE FMH5 STORAGE
         FREEMAIN RU,A=(R8),LV=RPLEXTL
         FREEMAIN RU,A=(R9),LV=RPLL
         L     R9,EXITRPL            RPL PASSED BY VTAM
         L     R8,RPLAAREA           RPL PASSED BY VTAM
         GETMAIN RU,                 ACQUIRE STORAGE FOR PRTBLOK       +
               LV=PRTBLOKL           .. ACQUIRE STORAGE FOR PRINT BLOCK
         USING PRTBLOK,R1            DEFINE BASE
         MVI   PRTCC,C' '            INITIALIZE CARRIAGE CONTROL
         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC
         MVC   PRTMSGID(MSG02L),MSG02 SET MESSAGE
         MVC   PRTMSGID+(MSG02NDE-MSG02)(L'MSG02NDE),RPL6LU
         FXCALL PRTQ,PRINT           ADD PRINT REQUEST TO QUEUE
         FREEMAIN RU,A=(1),LV=PRTBLOKL
         B     EXIT0000              EXIT
FMH50080 DS    0H
         ITRACE ID=DACTFAIL,         SESSION REJECT FAILED             +
               DATA1=RPL6RC          .. RETURN CODE FROM RPL EXTENSION
         ABEND $U0028,DUMP,,USER     ABEND
* ------------------------------------------------------------------- *
*             LOSS                                                    *
* ------------------------------------------------------------------- *
LOSS0000 DS    0H
         ITRACE ID=LOSS,             LOSS OF SESSION                   +
               DATA1=SESSNAME        .. LU NAME
         GETMAIN RU,                 ACQUIRE STORAGE FOR PRTBLOK       +
               LV=PRTBLOKL           .. ACQUIRE STORAGE FOR PRINT BLOCK
         USING PRTBLOK,R1            DEFINE BASE
         MVI   PRTCC,C' '            INITIALIZE CARRIAGE CONTROL
         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC
         MVC   PRTMSGID(MSG03L),MSG03 SET MESSAGE
         MVC   PRTMSGID+(MSG03NDE-MSG03)(L'MSG03NDE),RPL6LU
         LTR   R7,R7                 UNKNOWN LU?
         BE    LOSS0020              YES
         CLI   SESSTYPE,$SESSUSR     USER SESSION?
         BE    LOSS0010              YES
         MVC   PRTMSGID+(MSG03TYP-MSG03)(L'MSG03TYP),FX
         B     LOSS0030
LOSS0010 DS    0H
         MVC   PRTMSGID+(MSG03TYP-MSG03)(L'MSG03TYP),USER
         B     LOSS0030
LOSS0020 DS    0H
         MVC   PRTMSGID+(MSG03TYP-MSG03)(L'MSG03TYP),UNKN
LOSS0030 DS    0H
         FXCALL PRTQ,PRINT           ADD REQUEST TO PRINT QUEUE
         FREEMAIN RU,A=(1),LV=PRTBLOKL
         LTR   R7,R7                 FOR A KNOWN LU?
         BZ    LOSS0050              NO
LOSS0040 DS    0H
         ITRACE ID=ERRPND            ERROR PENDING FOR THIS SESSION
         MVI   SESSSTAT,$SESSERR+$SESSPND   STATUS IS 'ERROR-PENDING'
         B     EXIT0000              AND EXIT
LOSS0050 DS    0H
         ITRACE ID=UNKNLOSS          UNKNOWN SESSION LOST
         B     EXIT0000              AND EXIT
* ------------------------------------------------------------------- *
*        SERIOUS ERRORS                                               *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         ABEND $U0055,DUMP,,USER     ADD SESSBLOK FAILED
ERR0020  DS    0H
         ABEND $U0056,DUMP,,USER     DELETE SESSBLOK FAILED
* ------------------------------------------------------------------- *
*             EXIT                                                    *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT              EXITING
         FREEMAIN RU,A=(13),LV=72    FREEMAIN REGISTER SAVE AREA
         BR    R5                    RETURN TO CALLER
* ------------------------------------------------------------------ *
*                                                                    *
*        CONSTANTS                                                   *
*                                                                    *
* ------------------------------------------------------------------ *
HEX0F    DC    X'0F'
CNOSTYPE DC    CL4'CNOS'             CHANGE NUMBER OF SESSIONS
FMH5TYPE DC    CL4'FMH5'             FMH5
LOSSTYPE DC    CL4'LOSS'             LOSS OF SESSION
USER     DC    CL4'USER'
FX       DC    CL4'FX '
UNKN     DC    CL4'UNKN'
SESSID   DC    CL8'SESSBLOK'
RPLI     RPL   AM=VTAM
RPLL     EQU   *-RPLI
RPLEXTI  ISTRPL6
RPLEXTL  EQU   *-RPLEXTI
MSG01    DS    0C
         DC    CL11'FXSATTN01I'
         DC    C'SESSION WITH '
MSG01TYP DC    CL4' '
         DC    C' NODE '
MSG01NDE DC    CL8' '
         DC    C' ESTABLISHED'
MSG01L   EQU   *-MSG01
MSG02    DS    0C
         DC    CL11'FXSATTN02E'
         DC    C'SESSION REJECTED, LU NAME '
MSG02NDE DC    CL8' '
MSG02L   EQU   *-MSG02
MSG03    DS    0C
         DC    CL11'FXSATTN03I'
         DC    C'SESSION LOST TO '
MSG03TYP DC    CL4' '
         DC    C' NODE '
MSG03NDE DC    CL8' '
MSG03L   EQU   *-MSG03
* ------------------------------------------------------------------ *
*              COMMON DATA MAP                                       *
* ------------------------------------------------------------------ *
         FXSCOMM  TYPE=DSECT
* ------------------------------------------------------------------ *
*              SESSION BLOCK ADD/DELETE REQUEST BLOCK                *
* ------------------------------------------------------------------ *
         SESSREQ  DSECT=YES
* ------------------------------------------------------------------ *
*              VTAM SESSION BLOCK                                    *
* ------------------------------------------------------------------ *
         SESSBLOK DSECT=YES
* ------------------------------------------------------------------ *
*              CONVERSATION BLOCK ADD/DELETE REQUEST BLOCK           *
* ------------------------------------------------------------------ *
         CONVREQ  DSECT=YES
* ------------------------------------------------------------------ *
*              VTAM CONVERSATION BLOCK                               *
* ------------------------------------------------------------------ *
         CONVBLOK DSECT=YES
* ------------------------------------------------------------------ *
*              PRINT INTERFACE BLOCK                                 *
* ------------------------------------------------------------------ *
         PRTBLOK  DSECT=YES
* ------------------------------------------------------------------ *
*              FMH5                                                  *
* ------------------------------------------------------------------ *
         FMH5     DSECT=YES
* ------------------------------------------------------------------ *
*              PARAMETER LIST                                        *
* ------------------------------------------------------------------ *
EXITPARM DSECT
EXITACB  DS   A                      ACB ADDRESS
         DS   A                      RESERVED
         DS   A                      RESERVED
EXITTYPE DS   CL4                    TYPE OF CALL
EXITRPL  DS   A                      RPL ADDRESS
         DS   A                      RESERVED
* ------------------------------------------------------------------ *
*              ACB DSECT                                             *
* ------------------------------------------------------------------ *
         IFGACB AM=VTAM
* ------------------------------------------------------------------ *
*              RPL AND RPL EXTENSION DSECTS                          *
* ------------------------------------------------------------------ *
         IFGRPL AM=VTAM
* ------------------------------------------------------------------ *
*              EQUATES                                               *
* ------------------------------------------------------------------ *
         COPY REGEQU
         ABCODES
         END  FXSATTN
./ ADD NAME=FXSCOMM  0100-99056-99056-1500-00012-00012-00000-FX-REL1

* ------------------------------------------------------------------- *
*                                                                     *
*  Name: FXSCOMM                                                      *
*                                                                     *
*  Started task common data and trace table manager                   *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY  OPTIONS
         FXSCOMM TYPE=CSECT
         COPY  REGEQU
         END   FXSCOMM
./ ADD NAME=FXSCONS  0100-99056-99056-1500-00462-00462-00000-FX-REL1

         TITLE 'CONSOLE COMMUNICATION'
         COPY  OPTIONS
         MACRO
         CMD   &TEXT,&ADDR
         LCLA  &LEN
         AIF   (T'&TEXT EQ 'O').ERR0010
         AIF   (T'&ADDR EQ 'O').ERR0020
&LEN     SETA  K'&TEXT
         DC    AL1(&LEN)
         DC    AL4(&ADDR)
         DC    C'&TEXT'
         MEXIT
.ERR0010 ANOP
         MNOTE 12,'COMMAND TEXT IS REQUIRED'
         MEXIT
.ERR0020 ANOP
         MNOTE 12,'COMMAND PROCESSOR ADDRESS IS REQUIRED'
         MEND
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXSCONS                                               *
*                                                                     *
*  This module allows some commands to be entered via an MVS console. *
*  Mostly this would be to allow an operator (or an automation        *
*  product) to issue commands to shutdown FX.                         *
*                                                                     *
*    Commands allowed are                                             *
*      "F xxx,ACTIVE" Displays the active FX-to-FX and FX-to-USER     *
*                     activity.                                       *
*      "F xxx,SNAP"   Snap shots the FX STC control blocks and trace  *
*                     table.                                          *
*      "P xxx"        Stops the FX STC.                               *
*                                                                     *
* ------------------------------------------------------------------- *
SCONS    FXPRFX 'CONSOLE COMMUNICATION'
FXSCONS  AMODE 31
FXSCONS  RMODE ANY
         USING FXSCONS,R12           DEFINE BASE REGISTER
         CLC   DXDID,MODID           WORK AREA INITIALIZED?
         BE    CONS0100              YES
         ITRACE ID=INIT
         MVC   DXDID,MODID           WORK AREA INITIALIZED
         GETMAIN RU,                 ACQUIRE STORAGE FOR EXTRACT       +
               LV=EXTRACTL+4,        .. LENGTH                         +
               LOC=BELOW             .. 24-BIT AREA
         LR    R2,R1                 SAVE THE ADDRESS
         LA    R3,EXTRACTL(R2)       RETURNED DATA ADDRESS
         MVC   0(EXTRACTL,R2),EXTRACTI
         EXTRACT (R3),               EXTRACT THE COMM LIST ADDRESS     +
               FIELDS=COMM,          .. RETURN COMLIST ADDRESS         +
               MF=(E,(R2))           .. EXECUTE FORM, LIST FORM ADDRESS
         L     R9,0(R3)              COMM LIST ADDRESS
         FREEMAIN RU,A=(2),LV=EXTRACTL+4   FREE THE EXTRACT WORK AREA
         ITRACE ID=COMLIST,          TRACE COMLIST ADDRESS             +
               RDATA1=R9
         ST    R9,DXDCOMM            SAVE COMLIST ADDRESS
         USING COMLIST,R9            DEFINE COMLIST BASE
         MVC   COMMCECB,COMECBPT     PASS COMM ECB BACK TO MAINLINE
CONS0010 DS    0H
         ICM   R8,15,COMCIBPT        FIRST CIB
         BZ    CONS0040              NO CIB'S
         USING CIB,R8                DEFINE CIB BASE
CONS0020 DS    0H
         ITRACE ID=INITCIB,          TRACE EACH CIB                    +
               RDATA1=R8,            .. CIB ADDRESS                    +
               DATA2=CIBVERB         .. VERB FROM CIB
         CLI   CIBVERB,CIBSTART      START COMMAND?
         BE    CONS0030              YES
         MVC   DXDCID+3(1),CIBCONID  COPY CONSOLE ID
         MVC   DXDWTO(WTO01L),WTO01  COPY WTO
         WTO   MF=(E,DXDWTO),        ISSUE WTO                         +
               CONSID=DXDCID         .. BACK TO SAME CONSOLE
CONS0030 DS    0H
         L     R2,CIBNEXT            NEXT CIB
         QEDIT ORIGIN=COMCIBPT,      FREE THIS CIB                     +
               BLOCK=(R8)
         LTR   R15,R15               QEDIT SUCCESSFUL?
         BNZ   ERR0010               NO
         LTR   R8,R2                 NEXT CIB'S ADDRESS
         BNZ   CONS0020              LOOP
CONS0040 DS    0H
         ITRACE ID=SETCTR            SETTING CIB LIMIT
         QEDIT ORIGIN=COMCIBPT,      SET CIB LIMIT                     +
               CIBCTR=2              .. ALLOW 2 CIBS
         LTR   R15,R15               SUCCESSFUL?
         BNZ   ERR0020               NO
         B     EXIT0000              AND EXIT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
CONS0100 DS    0H
         ITRACE ID=PROCLIST          PROCESSING CIB LIST
         L     R9,DXDCOMM            COMM LIST ADDRESS
         ICM   R8,15,COMCIBPT        FIRST CIB ADDRESS
         BZ    EXIT0000              STRANGE..
CONS0110 DS    0H
         ITRACE ID=PROCCIB,          TRACE EACH CIB                    +
               RDATA1=R8,            .. CIB ADDRESS                    +
               DATA2=CIBVERB         .. VERB FROM CIB
         MVC   DXDCID+3(1),CIBCONID  SET CONSOLE ID
         CLI   CIBVERB,CIBSTOP       STOP COMMAND?
         BE    CONS0700              YES
         CLI   CIBVERB,CIBMODFY      MODIFY?
         BE    CONS0130              YES
         MVC   DXDWTO(WTO02L),WTO02  COPY WTO
         WTO   MF=(E,DXDWTO),        ISSUE WTO                         +
               CONSID=DXDCID         .. TO SAME CONSOLE
CONS0120 DS    0H
         L     R2,CIBNEXT            NEXT CIB ADDRESS
         QEDIT ORIGIN=COMCIBPT,      FREE THIS CIB                     +
               BLOCK=(R8)
         LTR   R15,R15               SUCCESSFUL?
         BNZ   ERR0010               NO
         LTR   R8,R2                 NEXT CIB ADDRESS
         BNZ   CONS0110              PROCESS IT
         B     EXIT0000              EXIT AT END OF CHAIN
CONS0130 DS    0H
         SR    R7,R7                 CLEAR REGISTER
         ICM   R7,3,CIBDATLN         LENGTH OF DATA
         LA    R6,CMDTBLE            OUR LIST OF COMMANDS
         USING CMDDSECT,R6           DEFINE BASE
         SR    R1,R1                 CLEAR REGISTER
CONS0140 DS    0H
         CLI   0(R6),X'FF'           END OF TABLE?
         BE    CONS0160              YES
         IC    R1,CMDTXTL            TEXT LENGTH
         CLR   R7,R1                 LENGTH CORRECT?
         BNE   CONS0150              NO
         BCTR  R1,0                  MINUS 1 FOR EXECUTE
         EX    R1,CMDCLC             COMMAND FOUND?
         BE    CONS0170              YES
         LA    R1,1(R1)              RESTORE LENGTH
CONS0150 DS    0H
         LA    R6,CMDL(R6,R1)        NEXT COMMAND
         B     CONS0140              LOOP
CMDCLC   CLC   CMDTXT,CIBDATA        COMMAND LOCATED?
CONS0160 DS    0H
         MVC   DXDWTO(WTO03L),WTO03  COPY WTO
         WTO   MF=(E,DXDWTO),        ISSUE WTO                         +
               CONSID=DXDCID         .. TO SAME CONSOLE
         B     CONS0120              RELEASE THIS CIB
CONS0170 DS    0H
         ICM   R15,15,CMDADDR        COMMAND PROCESSOR ADDRESS
         BR    R15                   PROCESS THE COMMAND
* ------------------------------------------------------------------- *
*   Display the active work                                           *
*                                                                     *
*   Data displayed is the status of the SESSBLOKs and the CONVBLOKs   *
* ------------------------------------------------------------------- *
CONS0300 DS    0H
         ITRACE ID=ACTIVE
         ICM   R7,15,COMMSESS        FIRST SESSION BLOCK
         USING SESSBLOK,R7           DEFINE SESSBLOK BASE
         BZ    CONS0510              NO SESSION BLOCKS
CONS0310 DS    0H
         MVC   DXDWTO(WTO07L),WTO07  COPY WTO
         LA    R1,DXDWTO             WTO ADDRESS
         USING WPL,R1                DEFINE WTO PARM LIST BASE
         MVC   WPLTXT(MSG01L),MSG01  COPY MESSAGE TO WTO
         MVC   WPLTXT+(MSG01LU-MSG01)(L'MSG01TYP),SESSNAME
         CLI   SESSTYPE,$SESSFX      FX-TO-FX SESSION?
         BE    CONS0320              YES
         MVC   WPLTXT+(MSG01TYP-MSG01)(L'MSG01TYP),USER
         MVC   WPLTXT+(MSG01SMF-MSG01)(L'MSG01SMF),SESSSMF
         MVC   WPLTXT+(MSG01USR-MSG01)(L'MSG01USR),SESSUSER
         MVC   WPLTXT+(MSG01JOB-MSG01)(L'MSG01JOB),SESSJOB
         B     CONS0330
CONS0320 DS    0H
         MVC   WPLTXT+(MSG01TYP-MSG01)(L'MSG01TYP),FX
         MVC   WPLTXT+(MSG01USR-MSG01)(L'MSG01USR),NA
         MVC   WPLTXT+(MSG01JOB-MSG01)(L'MSG01JOB),NA
CONS0330 DS    0H
         TM    SESSSTAT,$SESSRDY     SESSION READY?
         BO    CONS0340              YES
         TM    SESSSTAT,$SESSCS      CNOS SENT?
         BO    CONS0350              YES
         TM    SESSSTAT,$SESSINQ     INQUIRE SENT?
         BO    CONS0360              YES
         MVC   WPLTXT+(MSG01ST-MSG01)(L'MSG01ST),INITIAL
         B     CONS0370
CONS0340 DS    0H
         MVC   WPLTXT+(MSG01ST-MSG01)(L'MSG01ST),READY
         B     CONS0370
CONS0350 DS    0H
         MVC   WPLTXT+(MSG01ST-MSG01)(L'MSG01ST),CNOS
         B     CONS0370
CONS0360 DS    0H
         MVC   WPLTXT+(MSG01ST-MSG01)(L'MSG01ST),INQUIRE
CONS0370 DS    0H
         TM    SESSSTAT,$SESSPND     FUNCTION PENDING?
         BNO   CONS0380              NO
         MVC   WPLTXT+(MSG01PND-MSG01)(L'MSG01PND),PENDING
CONS0380 DS    0H
         WTO   MF=(E,DXDWTO),        ISSUE THE WTO                     +
               CONSID=DXDCID         .. TO THE SAME CONSOLE
         ICM   R6,15,SESSCONV        FIRST CONVERSATION
         USING CONVBLOK,R6           DEFINE CONVBLOK BASE
         BZ    CONS0500              NO CONVERSATIONS
CONS0390 DS    0H
         MVC   DXDWTO(WTO07L),WTO07  INITIALIZE WTO CONSTANTS
         LA    R1,DXDWTO             WTO CONSTANTS
         MVC   WPLTXT(MSG02L),MSG02  INITIALIZE MESSAGE
         UNPK  WPLTXT+(MSG02CID-MSG02)(9),CONVCID(5)
         MVZ   WPLTXT+(MSG02CID-MSG02)(9),HEXZERO
         TR    WPLTXT+(MSG02CID-MSG02)(9),HEXCHAR
         MVI   WPLTXT+(MSG02CID-MSG02)+8,C' '
         CLI   CONVTYPE,$CONVTP      PRIMARY END?
         BE    CONS0400              YES
         CLI   CONVTYPE,$CONVTS      SECONDARY END?
         BE    CONS0410              YES
         MVC   WPLTXT+(MSG02TYP-MSG02)(L'MSG02TYP),USER
         B     CONS0420
CONS0400 DS    0H
         MVC   WPLTXT+(MSG02TYP-MSG02)(L'MSG02TYP),PRIMARY
         B     CONS0420
CONS0410 DS    0H
         MVC   WPLTXT+(MSG02TYP-MSG02)(L'MSG02TYP),SECNDARY
         B     CONS0420
CONS0420 DS    0H
         CLI   CONVSTAT,$CONVRDY     CONVERSATION READY?
         BE    CONS0430              YES
         CLI   CONVSTAT,$CONVALO     ALLOC SENT OR RECEIVED?
         BE    CONS0425              YES
         MVC   WPLTXT+(MSG02ST-MSG02)(L'MSG02ST),INITIAL
         B     CONS0490
CONS0425 DS    0H
         MVC   WPLTXT+(MSG02ST-MSG02)(L'MSG02ST),ALLOC
         B     CONS0480
CONS0430 DS    0H
         MVC   WPLTXT+(MSG02ST-MSG02)(L'MSG02ST),READY
         CLI   CONVFUNC,$CONVFB      BSAM FUNCTION?
         BE    CONS0440              YES
         CLI   CONVFUNC,$CONVFC      VTAM SEND CONFIRMED?
         BE    CONS0450              YES
         CLI   CONVFUNC,$CONVFD      DEALLOCATE WITH CONFIRM?
         BE    CONS0460              YES
         CLI   CONVFUNC,$CONVFR      VTAM RECEIVE?
         BE    CONS0470              YES
         CLI   CONVFUNC,$CONVFR      VTAM SEND?
         BNE   CONS0480              NO
         MVC   WPLTXT+(MSG02FNC-MSG02)(L'MSG02FNC),SEND
         B     CONS0480
CONS0440 DS    0H
         MVC   WPLTXT+(MSG02FNC-MSG02)(L'MSG02FNC),BSAM
         B     CONS0480
CONS0450 DS    0H
         MVC   WPLTXT+(MSG02FNC-MSG02)(L'MSG02FNC),CONFIRM
         B     CONS0480
CONS0460 DS    0H
         MVC   WPLTXT+(MSG02FNC-MSG02)(L'MSG02FNC),DEALLOC
         B     CONS0480
CONS0470 DS    0H
         MVC   WPLTXT+(MSG02FNC-MSG02)(L'MSG02FNC),RECEIVE
CONS0480 DS    0H
         TM    CONVSTAT,$CONVPND     PENDING?
         BNO   CONS0490              NO
         MVC   WPLTXT+(MSG02PND-MSG02)(L'MSG02PND),PENDING
CONS0490 DS    0H
         WTO   MF=(E,DXDWTO),        ISSUE THE WTO                     +
               CONSID=DXDCID         .. TO THE SAME CONSOLE
         ICM   R6,15,CONVNEXT        NEXT CONVERSATION
         BNZ   CONS0390
CONS0500 DS    0H
         ICM   R7,15,SESSNEXT        NEXT SESSION BLOCK
         BNZ   CONS0310
CONS0510 DS    0H
         B     CONS0120              RELEASE THIS CIB
* ------------------------------------------------------------------- *
*   Snap shot the STC control blocks                                  *
* ------------------------------------------------------------------- *
CONS0600 DS    0H
         ITRACE ID=SNAP
         SR    R7,R7                 NO SESSBLOK TO FXSSNAP
         LOAD  EP=FXSSNAP            LOAD SNAP SHOT MODULE
         LR    R15,R0                COPY FXSSNAP ENTRY PONT
         BALR  R14,R15               LINK TO FXSSNAP
         DELETE EP=FXSSNAP           DELETE SNAP SHOT MODULE
         MVC   DXDWTO(WTO04L),WTO04  COPY WTO
         WTO   MF=(E,DXDWTO),        ISSUE WTO                         +
               CONSID=DXDCID         .. TO SAME CONSOLE
         B     CONS0120              FREE THIS CIB
* ------------------------------------------------------------------- *
*   Shutdown the STC                                                  *
* ------------------------------------------------------------------- *
CONS0700 DS    0H
         ITRACE ID=STOP
         TM    COMMEOJ,$EOJ1         EOJ ALREADY IN PROGRESS?
         BO    CONS0710              YES
         OI    COMMEOJ,$EOJ1         SET EOJ FLAG
         MVC   DXDWTO(WTO05L),WTO05  COPY WTO
         WTO   MF=(E,DXDWTO),        ISSUE WTO                         +
               CONSID=DXDCID         .. TO SAME CONSOLE
         B     CONS0120              RELEASE THIS CIB
CONS0710 DS    0H
         MVC   DXDWTO(WTO06L),WTO06  COPY WTO
         WTO   MF=(E,DXDWTO),        ISSUE WTO                         +
               CONSID=DXDCID         .. TO SAME CONSOLE
         B     CONS0120              RELEASE THIS CIB
* ------------------------------------------------------------------- *
*        Error routines                                               *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         ITRACE ID=CIBDELF,          QEDIT (DELETE CIB) FAILED         +
               RDATA1=R15            .. RETURN CODE
         ABEND $U0108,DUMP,,USER
ERR0020  DS    0H
         ITRACE ID=CIBCTRF,          QEDIT (SET CIB LIMIT) FAILED      +
               RDATA1=R15            .. RETURN CODE
         ABEND $U0109,DUMP,,USER
* ------------------------------------------------------------------- *
*        Exit                                                         *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(R13)            CALLER'S SAVE AREA ADDRESS
         LM    R14,R12,12(R13)       RESTORE CALLER'S REGISTERS
         SR    R15,R15               ALWAYS A GOOD RETURN CODE
         BR    R14                   RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSTART DC    Q(DXDSCONS)           DISPLACEMENT TO WORK AREA
EXTRACTI EXTRACT *,                  EXTRACT LIST FORM                 +
               FIELDS=COMM,          .. COMLIST ADDRESS PLEASE         +
               MF=L
EXTRACTL EQU   *-EXTRACTI
WTO01    WTO   'FXCONS01E * COMMAND NOT PROCESSED, FX INITIALIZATION NO+
               T COMPLETE',                                            +
               CONSID=,                                                +
               MF=L
WTO01L   EQU   *-WTO01
WTO02    WTO   'FXCONS02E * INVALID CIB VERB, CIB IGNORED',            +
               CONSID=,                                                +
               MF=L
WTO02L   EQU   *-WTO02
WTO03    WTO   'FXCONS03E * INVALID COMMAND',                          +
               CONSID=,                                                +
               MF=L
WTO03L   EQU   *-WTO03
WTO04    WTO   'FXCONS06I   SNAP SHOT COMPLETE',                       +
               CONSID=,                                                +
               MF=L
WTO04L   EQU   *-WTO04
WTO05    WTO   'FXCONS07I   FX SHUTDOWN STARTING',                     +
               CONSID=,                                                +
               MF=L
WTO05L   EQU   *-WTO05
WTO06    WTO   'FXCONS07E   SHUTDOWN ALREADY IN PROGRESS',             +
               CONSID=,                                                +
               MF=L
WTO06L   EQU   *-WTO06
WTO07    WTO   '                                                       +
                                                                     ',+
               CONSID=,                                                +
               MF=L
WTO07L   EQU   *-WTO07
MSG01    DS    0C
         DC    C'FXSCONS08I  SESSION WITH LU '
MSG01LU  DC    CL8' '
         DC    C' TYPE='
MSG01TYP DC    CL8' '
         DC    C' SMFID/USERID/JOB='
MSG01SMF DC    CL4' '
         DC    C'/'
MSG01USR DC    CL8' '
         DC    C'/'
MSG01JOB DC    CL8'**NONE**'
         DC    C' STATUS='
MSG01ST  DC    CL8' '
         DC    C' '
MSG01PND DC    CL8' '
MSG01L   EQU   *-MSG01
MSG02    DS    0C
         DC    C'FXSCONS09I  CID='
MSG02CID DC    CL8' '
         DC    C' TYPE='
MSG02TYP DC    CL8' '
         DC    C' STATUS='
MSG02ST  DC    CL8' '
         DC    C' LAST FUNCTION='
MSG02FNC DC    CL8' '
         DC    C' '
MSG02PND DC    CL8' '
MSG02L   EQU   *-MSG02
ALLOC    DC    CL8'ALLOCATE'
BSAM     DC    CL8'BSAM'
CNOS     DC    CL8'CNOS'
CONFIRM  DC    CL8'CONFIRM'
DEALLOC  DC    CL8'DEALLOC'
FX       DC    CL8'FX-TO-FX'
HEXZERO  DC    XL8'0000000000000000'
HEXCHAR  DC    C'0123456789ABCDEF'
INITIAL  DC    CL8'INITIAL'
INQUIRE  DC    CL8'INQUIRE'
NA       DC    CL8'** NA **'
PENDING  DC    CL8'PENDING'
PRIMARY  DC    CL8'PRIMARY'
READY    DC    CL8'READY'
RECEIVE  DC    CL8'RECEIVE'
SECNDARY DC    CL8'SECNDARY'
SEND     DC    CL8'SEND'
USER     DC    CL8'USER'
* ------------------------------------------------------------------- *
*              COMMANDS TABLE                                         *
* ------------------------------------------------------------------- *
CMDTBLE  DS    0C
         CMD   ACTIVE,CONS0300       DISPLAY ACTIVE PROCESSES
         CMD   SHUT,CONS0700         SHUT (SHUTDOWN THE STC)
         CMD   SNAP,CONS0600         SNAP SHOT
         CMD   STOP,CONS0700         STOP (SHUTDOWN THE STC)
         DC    X'FF'
* ------------------------------------------------------------------- *
*              WORK AREA                                              *
* ------------------------------------------------------------------- *
DXDSCONS DSECT
DXDID    DS   CL8                    WORK AREA OWNER EYECATCHER
DXDSAVE  DS   18F                    REGISTER SAVE AREA
DXDCOMM  DS   F                      ADDRESS OF COMM LIST
DXDCID   DS   F                      CONSOLE ID
DXDWTO   DS   0F,CL200
* ------------------------------------------------------------------- *
*              COMMAND TABLE MAP                                      *
* ------------------------------------------------------------------- *
CMDDSECT DSECT
CMDTXTL  DS   X                      COMMAND TEXT LENGTH
CMDADDR  DS   AL4                    COMMAND PROCESSOR ENTRY POINT
CMDL     EQU  *-CMDDSECT
CMDTXT   DS   C                      COMMAND TEXT
* ------------------------------------------------------------------- *
*              COMMON DATA MAP                                        *
* ------------------------------------------------------------------- *
         FXSCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*              VTAM SESSION BLOCK                                     *
* ------------------------------------------------------------------- *
         SESSBLOK DSECT=YES
* ------------------------------------------------------------------- *
*              VTAM CONVERSATION BLOCK                                *
* ------------------------------------------------------------------- *
         CONVBLOK DSECT=YES
* ------------------------------------------------------------------- *
*              COMM LIST                                              *
* ------------------------------------------------------------------- *
         IEZCOM
* ------------------------------------------------------------------- *
*              COMMAND INPUT BUFFER                                   *
* ------------------------------------------------------------------- *
CIB      DSECT
         IEZCIB
* ------------------------------------------------------------------- *
*              WTO PARM LIST                                          *
* ------------------------------------------------------------------- *
         IEZWPL DSECT=YES
* ------------------------------------------------------------------- *
*              EQUATES                                                *
* ------------------------------------------------------------------- *
         COPY REGEQU
         ABCODES
         END  FXSCONS
./ ADD NAME=FXSCONV  0100-99056-99056-1500-00190-00190-00000-FX-REL1

         TITLE 'CONV  ADD AND DELETE CONVERSATION BLOCKS'
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXSCONV                                               *
*                                                                     *
*  PURPOSE: Add and delete CONVBLOKs.  Other FX STC nodes and users   *
*           are represented by SESSBLOKs.  Conversations with the     *
*           other FX nodes and users are represented by a CONVBLOK    *
*           chained from the SESSBLOK.  This code runs as a           *
*           subroutine, it does not follow "normal" FX linkage,       *
*           it must not use a "DXD" type work area because it may     *
*           be executed concurrently by multiple tasks.  This module  *
*           does not establish its own save area, no macros can be    *
*           issued that may require a save area, including ITRACE.    *
*                                                                     *
*                                                                     *
*     Register usage:                                                 *
*       R1  Work register                                             *
*       R2  Work register                                             *
*       R3  RPL address                                               *
*       R6  CONVBLOK address                                          *
*       R7  SESSBLOK address                                          *
*       R10 Parameters passed by caller (CONVREQ DSECT)               *
*       R11 FXSCOMM address                                           *
*       R12 Program base                                              *
*                                                                     *
* ------------------------------------------------------------------- *
FXSCONV  CSECT
FXSCONV  AMODE 31
FXSCONV  RMODE ANY
         STM   R14,R12,12(R13)       SAVE REGISTERS
         LR    R12,R15               LOAD BASE
         USING FXSCONV,R12           DEFINE BASE
         USING FXSCOMM,R11           DEFINE BASE
         B     CONV0000              SKIP EYECATCHER
         DC    CL8'FXSCONV'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
         DC    C'ADD/DELETE CONVERSATION BLOCKS'
CONV0000 DS    0H
         LR    R10,R1                COPY PARM BLOCK ADDRESS
         USING CONVREQ,R10           DEFINE BASE
         L     R7,CONVSESS           SESSION BLOCK'S ADDRESS
         USING SESSBLOK,R7           DEFINE BASE
         CLI   CONVCMD,$CONVDEL      DELETE A CONVERSATION?
         BE    CONV0100              YES
*---------------------------------------------------------------------*
*                                                                     *
*        INITIALIZE A NEW CONVBLOK                                    *
*                                                                     *
*---------------------------------------------------------------------*
         LA    R2,SESSCONV           CONVERSATION BLOCK ANCHOR POINT
         ICM   R6,15,SESSCONV        FIRST CONVERSATION BLOCK'S ADDRESS
         USING CONVBLOK,R6           DEFINE BASE
         BZ    CONV0020              NO CONVERSATIONS
CONV0010 DS    0H
         LA    R2,CONVNEXT           CHAIN POINT
         ICM   R7,15,CONVNEXT        NEXT CONVERSATION BLOCK'S ADDRESS
         BNZ   CONV0010              LOOP
CONV0020 DS    0H
         GETMAIN RU,LV=CONVL         ACQUIRE STORAGE FOR CONVBLOK
         ST    R1,0(R2)              ADD NEW BLOCK TO CHAIN
         ST    R1,CONVADDR           PASS ADDRESS BACK TO CALLER
         LR    R6,R1                 COPY STORAGE ADDRESS
         XC    0(CONVL,R6),0(R6)     CLEAR STORAGE
         MVC   CONVEYE,CONVID        IDENTIFY THE BLOCK
         GETMAIN RU,                 ACQUIRE STORAGE FOR RPL           +
               LV=RPLL+4,            .. SIZE                           +
               LOC=BELOW             .. FROM BELOW THE LINE
         ST    R1,CONVRPL            SET RPL'S ADDRESS
         MVC   0(RPLL,R1),RPLI       INITIALIZE RPL
         LR    R3,R1                 COPY RPL ADDRESS
         USING IFGRPL,R3             DEFINE BASE
         MVC   RPLDACB,COMMACB       SET ACB ADDRESS IN RPL
         ST    R6,RPLL(R1)           SET POINTER BACK TO CONVBLOK
         GETMAIN RU,                 ACQUIRE STORAGE FOR RPL EXTENSION +
               LV=RPLEXTL,           .. SIZE                           +
               LOC=BELOW             .. FROM BELOW THE LINE
         ST    R1,CONVRPLX           SET RPL EXTENSION'S ADDRESS
         MVC   0(RPLEXTL,R1),RPLEXTI INITIALIZE RPL EXTENSION
         ST    R1,RPLAAREA           SET RPL EXTENSION ADDRESS
         USING ISTRPL6X,R1           DEFINE BASE
         GETMAIN RU,                 ACQUIRE STORAGE FOR DCB           +
               LV=DCBL,              .. SIZE                           +
               LOC=BELOW             .. FROM BELOW THE LINE
         ST    R1,CONVDCB            SET DCB'S ADDRESS
         XC    0(DCBL,R1),0(R1)      CLEAR THE STORAGE
         GETMAIN RU,                 ACQUIRE STORAGE FOR DECB          +
               LV=DECBL,             .. SIZE                           +
               LOC=BELOW             .. FROM BELOW THE LINE
         ST    R1,CONVDECB           SET DECB'S ADDRESS
         MVC   0(DECBL,R1),DECBI     INITIALIZE DECB
         GETMAIN RU,                 ACQUIRE STORAGE FOR I/O AREA      +
               LV=COMMIOSZ,          .. SIZE                           +
               LOC=BELOW             .. FROM BELOW THE LINE
         ST    R1,CONVIOA            SET I/O AREA'S ADDRESS
         B     EXIT0000              AND EXIT
*---------------------------------------------------------------------*
*                                                                     *
*        DELETE A CONVBLOK                                            *
*                                                                     *
*---------------------------------------------------------------------*
CONV0100 DS    0H
         LA    R2,SESSCONV           CHAIN POINT
         ICM   R6,15,SESSCONV        FIRST CONVERSATION BLOCK'S ADDRESS
         BZ    CONV0120              BLOCK WAS NOT FOUND
CONV0110 DS    0H
         CLM   R6,15,CONVADDR        CONVERSATION BLOCK LOCATED?
         BE    CONV0130              YES
         LA    R2,CONVNEXT           CHAIN POINT
         ICM   R6,15,CONVNEXT        NEXT CONVERSATION BLOCK
         BNZ   CONV0110              LOOP
CONV0120 DS    0H
         ABEND $U0065,DUMP,,USER     CRASH AND BURN
CONV0130 DS    0H
         MVC   0(4,R2),CONVNEXT      CHAIN AROUND THIS BLOCK
         L     R1,CONVIOA            I/O AREA ADDRESS
         FREEMAIN RU,A=(1),LV=COMMIOSZ
         L     R1,CONVDECB           DECB'S ADDRESS
         FREEMAIN RU,A=(1),LV=DECBL  FREEMAIN DECB
         L     R1,CONVDCB            DCB'S ADDRESS
         FREEMAIN RU,A=(1),LV=DCBL   FREEMAIN DCB
         L     R1,CONVRPLX           RPL EXTENSION'S ADDRESS
         FREEMAIN RU,A=(1),LV=RPLEXTL
         L     R1,CONVRPL            RPL'S ADDRESS
         FREEMAIN RU,A=(1),LV=RPLL+4 FREEMAIN RPL
         FREEMAIN RU,A=(6),LV=CONVL  FREEMAIN CONVERSATION BLOCK
EXIT0000 DS    0H
         L     R14,12(R13)           RESTORE R14
         LM    R0,R12,20(R13)        RESTORE REMAINING REGISTERS
         BR    R14                   RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
CONVID   DC    C'CONVBLOK'
RPLI     RPL   AM=VTAM,                                                +
               AAREA=RPLEXTI
RPLL     EQU   *-RPLI
RPLEXTI  ISTRPL6
RPLEXTL  EQU   *-RPLEXTI
DUMMYDCB DCB   DSORG=PS,                                               +
               DDNAME=DUMMY,                                           +
               EODAD=*,                                                +
               MACRF=R
DCBL     EQU   *-DUMMYDCB
DECBI    READ  BSAMECB,                                                +
               SF,                                                     +
               *,                                                      +
               *,                                                      +
               'S',                                                    +
               MF=L
DECBL    EQU   *-DECBI
* ------------------------------------------------------------------- *
*              COMMON DATA MAP                                        *
* ------------------------------------------------------------------- *
         FXSCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*              CONVERSATION BLOCK ADD/DELETE REQUEST BLOCK            *
* ------------------------------------------------------------------- *
         CONVREQ
* ------------------------------------------------------------------- *
*              VTAM SESSION BLOCK                                     *
* ------------------------------------------------------------------- *
         SESSBLOK DSECT=YES
* ------------------------------------------------------------------- *
*              VTAM CONVERSATION BLOCK                                *
* ------------------------------------------------------------------- *
         CONVBLOK DSECT=YES
* ------------------------------------------------------------------- *
*              ACB DSECT                                              *
* ------------------------------------------------------------------- *
         IFGACB   AM=VTAM
* ------------------------------------------------------------------- *
*              EXIT LIST DSECT                                        *
* ------------------------------------------------------------------- *
         IFGEXLST AM=VTAM
* ------------------------------------------------------------------- *
*              RPL AND RPL EXTENSION DSECTS                           *
* ------------------------------------------------------------------- *
         IFGRPL   AM=VTAM
* ------------------------------------------------------------------- *
*              EQUATES                                                *
* ------------------------------------------------------------------- *
         COPY REGEQU
         ABCODES
         END  FXSCONV
./ ADD NAME=FXSCOPY  0100-99056-99056-1500-00520-00520-00000-FX-REL1

         TITLE 'FXSCOPY   IEBCOPY DUMP/RESTORE SUBTASK'
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXSCOPY                                               *
*                                                                     *
*   Drive the IEBCOPY DUMPs and RESTOREs.                             *
*   IEBCOPY functions are done in a subtask to allow over-lap with    *
*   other functions (like transmitting or receiving of data).         *
*                                                                     *
* ------------------------------------------------------------------- *
FXSCOPY  CSECT
FXSCOPY  AMODE 31
FXSCOPY  RMODE 24
         USING FXSCOPY,R12           DEFINE BASE
         USING DRREQ,R9              DEFINE BASE
         USING FXSCOMM,R11           DEFINE BASE
         STM   R14,R12,12(R13)       CHAIN REGISTERS
         LR    R12,R15               COPY ENTRY POINT ADDRESS
         L     R11,0(R1)             LOAD FXSCOMM'S ADDRESS
         GETMAIN R,LV=WORKL          ACQUIRE STORAGE FOR WORK AREA
         B     COPY0000
         DC    ((PFXMODNM-MODPRFX)-(*-FXSCOPY))X'00'
         DC    CL8'FXSCOPY'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
COPY0000 DS    0H
         USING WORKAREA,R1           DEFINE BASE
         XC    WORKAREA+000(256),WORKAREA
         XC    WORKAREA+256(WORKL-256),WORKAREA+256
         ST    R13,4(R1)             CHAIN PREVIOUS SAVE AREA TO OURS
         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO PREVIOUS
         LR    R13,R1                COPY WORK AREA ADDRESS
         DROP  R1
         USING WORKAREA,R13          DEFINE BASE
         ST    R12,ACOPY             SET OUR ENTRY POINT IN COMMON
         MVC   WKCDCB(CDCBL),CDCBI   INITIALIZE CTL STMT DCB
         MVC   WKPDCB(PDCBL),PDCBI   INITIALIZE PDS DIRECTORY DCB
         MVC   WKCCW1,CCW1           INITIALIZE SEARCH CCW
         MVC   WKCCW2,CCW2           INITIALIZE TIC CCW
         LA    R1,WKCCW1             SEARCH CCW ADDRESS
         STCM  R1,7,WKCCW2+1         RE-LOCATE TIC ADDRESS
         MVC   WKCCW3,CCW3           INITIALIZE READ CCW
         MVI   CARDAREA,C' '         INITIALIZE
         MVC   CARDAREA+1(L'CARDAREA-1),CARDAREA
         LOAD  EP=IEBCOPY            LOAD IEBCOPY INITIAL MODULE
         ST    R0,WKCOPYEP           SAVE ENTRY POINT ADDRESS
         ITRACE ID=ENTRY
         B     COPY0020              ENTER MAIN LOGIC
COPY0010 DS    0H
         ITRACE ID=WORKWAIT          WAITING FOR WORK
         TM    COPYWORK,X'40'        ECB POSTED?
         BO    COPY0020              YES.. SKIP WAITING
         LA    R1,COPYWORK           WORK TO DO ECB
         WAIT  1,ECB=(1)             WAIT FOR WORK TO DO ECB
         ITRACE ID=WOKEUP            TIME TO RISE AND SHINE
         XC    COPYWORK,COPYWORK     RESET ECB
COPY0020 DS    0H
         TM    COMMEOJ,$EOJ1         SHUTDOWN PHASE 1?
         BO    EXIT0000              YES.. IT'S MILLER TIME
         ICM   R9,15,COPYREQ         REQUEST BLOCK'S ADDRESS
         BZ    COPY0010              FALSE ALARM.. GO WAIT
         CLI   DRSTAT,0              PROCESSING STARTED OR COMPLETED?
         BNE   COPY0010              YES.. GO WAIT
         ITRACE ID=PROCESS,RDATA1=R9
         OI    DRSTAT,$DRSTRT        PROCESSING STARTED
         CLC   COMMAPLN,REQTNODE     ARE WE SENDING END?
         BE    DUMP0000              YES
         B     RSTR0000              WE'RE RECEIVING END
COPY0030 DS    0H
         OI    DRSTAT,$DRDONE        PROCESSING COMPLETED
         LA    R1,COPYECB            WE'RE DONE ECB
         POST  (1),(R15)             POST THE ECB
         B     COPY0010              WAIT FOR MORE WORK
* ------------------------------------------------------------------- *
*                                                                     *
*        DUMP MEMBER                                                  *
*                                                                     *
* ------------------------------------------------------------------- *
DUMP0000 DS    0H
         ITRACE ID=DUMP
         MVI   REQSTAT,$REQDUMP      STATUS IS 'DUMP IN PROGRESS'
         LA    R2,WKCDCB             DCB IN WORK AREA
         USING IHADCB,R2             DEFINE BASE
         MVC   DCBDDNAM,DRINDD       SET DDNAME ASSIGNED
         MVC   WKOC(OPENOL),OPENOI   INITIALIZE OPEN
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         OPEN  ((R2),OUTPUT),        OPEN DATASET FOR OUTPUT           +
               MF=(E,WKOC)           .. EXECUTE FORM, LIST FORM ADDRESS
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         MVC   CARDAREA(COPY1L),COPY1
         MVC   CARDAREA+(COPY1IN-COPY1)(L'COPY1IN),DRPDS
         MVC   CARDAREA+(COPY1OUT-COPY1)(L'COPY1OUT),DRSTAGE
         BAL   R8,PUNCH000           IEBCOPY CONTROL STATEMENT
DUMP0010 DS    0H
         LA    R3,WKPDCB             PDS DIRECTORY DCB
         USING IHADCB,R3             DEFINE BASE
         MVC   DCBDDNAM,DRPDS        SET DDNAME
         MVC   WKOC(OPENIL),OPENII   INITIALIZE OPEN
         ITRACE ID=OPENDIR
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         OPEN  ((R3),INPUT),         OPEN THE PDS DIRECTORY            +
               MF=(E,WKOC)           .. EXECUTE FORM, LIST FORM ADDRESS
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         SR    R0,R0                 CLEAR REGISTER
         ICM   R0,3,WKCCW3+6         I/O AREA SIZE
         GETMAIN RU,                 ACQUIRE STORAGE FOR I/O AREA      +
               LV=(0),               .. MAJOR DUTY SIZE I/O AREA       +
               LOC=BELOW             .. 24-BIT AREA
         STCM  R1,7,WKCCW3+1         SET I/O AREA ADDRESS
         GETMAIN RU,                 ACQUIRE STORAGE FOR IOB           +
               LV=IOBLEN,            .. IOB LENGTH                     +
               LOC=BELOW             .. 24-BIT AREA
         LR    R4,R1                 SAVE IOB'S ADDRESS
         USING IOB,R4                DEFINE BASE
         LA    R1,IOBCC              CYLINDER NUMBER'S ADDRESS
         STCM  R1,7,WKCCW1+1         RE-LOCATE CYLINDER ADDRESS
         ST    R4,DCBIOBAD           SET IOB ADDRESS IN DCB
         XC    0(IOBLEN,R4),0(R4)    CLEAR IOB
         MVI   IOBFLAG1,X'02'        SET FLAG BYTE 1
         ST    R3,IOBDCBPT           SET DCB ADDRESS IN IOB
         LA    R1,WKECB              I/O ECB ADDRESS
         STCM  R1,7,IOBECBPB         SET ECB ADDRESS IN IOB
         LA    R1,WKCCW1             SRCH CCW'S ADDRESS
         ST    R1,IOBSTART           SET CCW ADDRESS IN IOB
         SR    R5,R5                 CLEAR REGISTER
         ICM   R5,7,DCBDEBAD+1       DEB ADDRESS
         SH    R5,=Y(DEBBASIC-DEB)   MINUS PREFIX LENGTH
         USING DEB,R5                DEFINE BASE
         OI    WKFLAG,$LOCATE        STARTING MEMBER LOCATE
         NI    WKFLAG,255-$FOUND     MEMBER NOT FOUND YET
         MVC   WKUCBA+1(3),DEBSUCBB  COPY UCB ADDRESS
         MVC   WKDEVT(DEVTL),DEVTI   INITIALIZE DEVT LIST FORM
         DEVTYPE ,(WKDEVTA,24),      REQUEST DEVICE INFO               +
               UCBLIST=(WKUCBA,1),   .. UCB ADDRESS LIST/ # IN LIST    +
               MF=(E,WKDEVT)         .. EXECUTE FORM, LIST FORM ADDRESS
         LTR   R15,R15               DEVTYPE SUCCESSFUL?
         BNZ   ERR0020               NO
         ITRACE ID=DEVTOK,                                             +
               DATA1=WKDEVT0,        .. WORDS 0 AND 1                  +
               DATA2=WKDEVT2         .. WORDS 2 AND 3
DUMP0020 DS    0H
         LA    R1,DEBBASND           DASD EXTENSION OF THE DEB
         USING DEBDASD,R1            DEFINE BASE
         MVC   IOBCC,DEBSTRCC        SET STARTING CYLINDER
         MVC   IOBHH,DEBSTRHH        SET STARTING HEAD
         MVI   IOBR,0                ALWAYS READ FULL TRACKS
DUMP0030 DS    0H
         ITRACE ID=EXCP,                                               +
               DATA1=IOBCC           .. I/O ADDRESS
         XC    WKECB,WKECB           CLEAR THE ECB
         EXCP  IOBSTDRD              READ A TRACK
         WAIT  ECB=WKECB             WAIT FOR I/O COMPLETION
         CLI   WKECB,X'44'           RETRY THE I/O?
         BE    DUMP0020              YES
         CLI   WKECB,X'7F'           SUCCESSFUL?
         BNE   ERR0010               NO
         SR    R1,R1                 CLEAR REGISTER
         SR    R7,R7                 CLEAR REGISTER
         ICM   R7,3,WKCCW3+6         TOTAL LENGTH
         ICM   R1,3,IOBSTDRD+14      RESIDUAL LENGTH
         SR    R7,R1                 LENGTH READ
         ITRACE ID=DIRLEN,                                             +
               RDATA1=R7
         SR    R6,R6                 CLEAR REGISTER
         ICM   R6,7,WKCCW3+1         I/O AREA ADDRESS
DUMP0040 DS    0H
         ITRACE ID=NEWBLOCK,                                           +
               RDATA1=R6,            .. DATA ADDRESS                   +
               RDATA2=R7             .. LENGTH REMAINING
         STM   R6,R7,WKCURAL         SAVE CURRENT ADDRESS AND LENGTH
         USING COUNT,R6              DEFINE BASE
         SR    R1,R1                 CLEAR REGISTER
         IC    R1,COUNTKL            KEY LENGTH
         LA    R6,COUNTL(R1,R6)      DATA ADDRESS
         LH    R7,0(R6)              LENGTH OF DATA IN RECORD
         SH    R7,H2                 MINUS LENGTH OF LENGTH
         LA    R6,2(R6)              SKIP LENGTH
         USING DIRDSECT,R6           DEFINE BASE
DUMP0050 DS    0H
         ITRACE ID=DIRENTRY,                                           +
               RDATA1=R6,            .. DATA ADDRESS                   +
               DATA2=0(R6)           .. DATA
         CLC   DIRNAME,X'FF'         END OF DIRECTORY?
         BE    DUMP0100              YES
         TM    WKFLAG,$LOCATE        LOCATING REQUESTED MEMBER?
         BO    DUMP0060              YES
         CLC   DIRTTR,WKTTR          SAME TTR?
         BE    DUMP0070              YES
         B     DUMP0080
DUMP0060 DS    0H
         CLC   DIRNAME,REQOMEM       MEMBER LOCATED?
         BNE   DUMP0080              NO
         ITRACE ID=MEMFOUND,                                           +
               DATA1=DIRTTR
         MVC   WKTTR,DIRTTR          SAVE TTR OF REQUEST MEMBER
         NI    WKFLAG,255-$LOCATE    TURN OFF LOCATE FLAG
         OI    WKFLAG,$FOUND         MEMBER WAS FOUND
         CLI   REQALIAS,C'Y'         TRANSMIT ALIASES?
         BE    DUMP0020              RE-START DIRECTORY SCAN
         MVC   CARDAREA(COPY2L),COPY2
         MVC   CARDAREA+(COPY2MEM-COPY2)(L'COPY2MEM),REQOMEM
         BAL   R8,PUNCH000           IEBCOPY CONTROL STATEMENT
         B     DUMP0100              EXIT
DUMP0070 DS    0H
         MVC   CARDAREA(COPY2L),COPY2
         MVC   CARDAREA+(COPY2MEM-COPY2)(L'COPY2MEM),DIRNAME
         BAL   R8,PUNCH000           IEBCOPY CONTROL STATEMENT
DUMP0080 DS    0H
         NI    DIRC,X'1F'            CLEAR ALL FLAGS
         SR    R1,R1                 CLEAR REGISTER
         IC    R1,DIRC               NUMBER OF USER HALFWORDS
         LA    R1,DIRUSER-DIRDSECT(R1,R1)
         AR    R6,R1                 NEXT DIRECTORY ENTRY
         SR    R7,R1                 MINUS LENGTH OF THIS ENTRY
         BH    DUMP0050              LOOP
         LM    R6,R7,WKCURAL         RESTORE CURRENT BUFFER DATA
         USING COUNT,R6              DEFINE BASE
         SR    R1,R1                 CLEAR REGISTER
         IC    R1,COUNTKL            KEY LENGTH
         AH    R1,COUNTDL            PLUS DATA LENGTH
         LA    R1,8(R1)              PLUS COUNT LENGTH
         AR    R6,R1                 NEXT BLOCK FROM DIRECTORY TRACK
         SR    R7,R1                 MINUS LENGTH USED
         BH    DUMP0040              LOOP
         SR    R1,R1                 CLEAR REGISTER
         ICM   R1,3,IOBHH            CURRENT HEAD NUMBER
         LA    R1,1(R1)              PLUS 1
         CLM   R1,3,WKDEVT2+2        TIME FOR NEXT CYLINDER?
         BE    DUMP0090              YES
         STCM  R1,3,IOBHH            SET NEW HEAD NUMBER
         B     DUMP0030              READ NEXT TRACK
DUMP0090 DS    0H
         ICM   R1,3,IOBCC            CURRENT CYLINDER NUMBER
         LA    R1,1(R1)              PLUS 1
         STCM  R1,3,IOBCC            SET NEW CYLINDER NUMBER
         XC    IOBHH,IOBHH           RESET HEAD NUMBER
         B     DUMP0030              READ NEXT TRACK
DUMP0100 DS    0H
         MVC   WKOC(CLOSEL),CLOSEI   INITIALIZE PARM LIST
         ITRACE ID=CLOSEDIR
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         CLOSE ((R3)),               CLOSE DIRECTORY DCB               +
               MF=(E,WKOC)           .. EXECUTE FORM, LIST FORM ADDRESS
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         SR    R1,R1                 CLEAR REGISTER
         ICM   R1,7,WKCCW3+1         I/O AREA ADDRESS
         SR    R0,R0                 CLEAR REGISTER
         ICM   R0,3,WKCCW3+6         I/O AREA SIZE
         FREEMAIN RU,A=(1),LV=(0)    FREE I/O AREA
         FREEMAIN RU,A=(R4),LV=IOBLEN
         TM    WKFLAG,$FOUND         MEMBER EVER FOUND?
         BO    DUMP0110              YES
         OI    DRSTAT,$DRMEMX        MEMBER NOT FOUND
DUMP0110 DS    0H
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         MVC   WKOC(CLOSEL),CLOSEI   INITIALIZE PARM LIST
         CLOSE ((R2)),               CLOSE IEBCOPY INPUT FILE          +
               MF=(E,WKOC)           .. EXECUTE FORM, LIST FORM ADDRESS
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         TM    DRSTAT,$DRMEMX        MEMBER NOT FOUND?
         BO    COPY0030              NOT FOUND
         LA    R1,COPYPARM           PARM TO PASS TO IEBCOPY
         L     R15,WKCOPYEP          ENTRY POINT ADDRESS
         BASSM R14,R15               LINK TO IEBCOPY
         LR    R1,R15                SAVE RETURN CODE
         BAL   R15,AM31              FORCE AMODE TO 31
         ITRACE ID=DUMPDONE,RDATA1=R1
         STCM  R1,3,DRR15            PASS BACK IEBCOPY RETURN CODE
         B     COPY0030
* ------------------------------------------------------------------- *
*                                                                     *
*        Copy member to output PDS                                    *
*                                                                     *
* ------------------------------------------------------------------- *
RSTR0000 DS    0H
         ITRACE ID=RESTORE
         LA    R2,WKCDCB             DCB IN WORK AREA
         USING IHADCB,R2             DEFINE BASE
         MVC   DCBDDNAM,DRINDD       SET DDNAME ASSIGNED
         MVC   WKOC(OPENOL),OPENOI   INITIALIZE OPEN
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         OPEN  ((R2),OUTPUT),        OPEN DATASET FOR OUTPUT           +
               MF=(E,WKOC)           .. EXECUTE FORM, LIST FORM ADDRESS
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         MVC   CARDAREA(COPY1L),COPY1
         LA    R1,CARDAREA+(COPY1IN-COPY1)
         CLI   REQREPL,C'Y'          REPLACE?
         BNE   RSTR0010              NO
         MVC   0(2,R1),=C'(('        INSERT OPEN PARENS
         LA    R1,2(R1)              ACCOUNT FOR PARENS
RSTR0010 DS    0H
         MVC   0(8,R1),DRSTAGE       INSERT INPUT DDNAME
         LA    R1,8(R1)              UPDATE OUTPUT ADDRESS
         CLI   REQREPL,C'Y'          REPLACE?
         BNE   RSTR0020              NO
         MVC   0(2,R1),=C',R'        INSERT "REPLACE" INDICATOR
         LA    R1,2(R1)
RSTR0020 DS    0H
         CLI   REQREPL,C'Y'          REPLACE?
         BNE   RSTR0030              NO
         MVC   0(2,R1),=C'))'        INSERT CLOSING PARENS
         LA    R1,2(R1)              ACCOUNT FOR PARENS
RSTR0030 DS    0H
         MVC   0(7,R1),=C',OUTDD='   INSERT OUTPUT DD KEYWORD
         MVC   7(8,R1),DRPDS         INSERT OUTPUT DD NAME
         BAL   R8,PUNCH000           PUNCH IEBCOPY CONTROL STATEMENT
         CLC   REQDMEM,BLANKS        NEW MEMBER NAME?
         BE    RSTR0080              NO
         MVC   CARDAREA(COPY2L),COPY2
         LA    R1,CARDAREA+(COPY2MEM-COPY2)
         MVC   0(2,R1),=C'(('        INSERT OPEN PARENTHESIS
         LA    R1,2(R1)              UPDATE OUTPUT ADDRESS
         MVC   0(L'REQOMEM,R1),REQOMEM
RSTR0040 DS    0H
         CLI   0(R1),C' '            BLANK?
         BE    RSTR0050              YES
         LA    R1,1(R1)              UPDATE OUTPUT ADDRESS
         B     RSTR0040              LOOP
RSTR0050 DS    0H
         MVI   0(R1),C','            INSERT COMMA
         LA    R1,1(R1)              UPDATE OUTPUT ADDRESS
         MVC   0(L'REQDMEM,R1),REQDMEM
RSTR0060 DS    0H
         CLI   0(R1),C' '            BLANK?
         BE    RSTR0070              YES
         LA    R1,1(R1)              UPDATE OUTPUT ADDRESS
         B     RSTR0060              LOOP
RSTR0070 DS    0H
         MVC   0(2,R1),=C'))'        INSERT CLOSING PARENTHESIS
         BAL   R8,PUNCH000           PUNCH IEBCOPY CONTROL STATEMENT
RSTR0080 DS    0H
         MVC   WKOC(CLOSEL),CLOSEI   INITIALIZE PARM LIST
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         CLOSE ((R2)),               CLOSE IEBCOPY INPUT FILE          +
               MF=(E,WKOC)           .. EXECUTE FORM, LIST FORM ADDRESS
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         ITRACE ID=DRRSTR
         LA    R1,COPYPARM           PARM PASSED TO IEBCOPY
         L     R15,WKCOPYEP          ENTRY POINT ADDRESS
         BASSM R14,R15               LINK TO IEBCOPY
         LR    R1,R15                SAVE RETURN CODE
         BAL   R15,AM31              FORCE AMODE TO 31
         ITRACE ID=RSTRDONE,RDATA1=R1
         STCM  R1,3,DRR15            PASS BACK IEBCOPY RETURN CODE
         B     COPY0030
*---------------------------------------------------------------------*
*        WRITE CONTROL STATEMENTS                                     *
*---------------------------------------------------------------------*
PUNCH000 DS    0H
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         PUT   (R2),CARDAREA         PUNCH IEBCOPY CONTROL STATEMENT
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         MVI   CARDAREA,C' '         RE-INITIALIZE
         MVC   CARDAREA+1(L'CARDAREA-1),CARDAREA
         BR    R8                    RETURN
* ------------------------------------------------------------------- *
*        ADDRESSING MODE SWITCHING                                    *
* ------------------------------------------------------------------- *
AM24     DS    0H
         LA    R15,0(R15)            CLEAR HIGH BIT(S)
         BSM   R0,R15                RETURN IN 24-BIT MODE
AM31     DS    0H
         LA    R15,0(R15)            CLEAR HIGH BIT(S)
         O     R15,X80               SET HIGH BIT ON
         BSM   R0,R15                RETURN IN 31-BIT MODE
* ------------------------------------------------------------------- *
*        Unrecoverable errors                                         *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         ITRACE ID=IOERROR,          I/O ERROR                         +
               DATA1=WKECB,          .. ECB                            +
               RDATA2=R4             .. IOB ADDRESS
         ABEND $U0100,DUMP,,USER
ERR0020  DS    0H
         ITRACE ID=DEVTFAIL,         DEVTYPE FAILED                    +
               DATA1=WKUCBA,         .. UCB ADDRESS                    +
               RDATA2=R15            .. DEVTYPE RETURN CODE
         ABEND $U0101,DUMP,,USER
* ------------------------------------------------------------------- *
*        EXIT                                                         *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT              EXITING PRINT MODULE
         DELETE EP=IEBCOPY           RELEASE IEBCOPY
         LR    R1,R13                COPY WORK AREA ADDRESS
         L     R13,4(R13)            RESTORE REGISTER 13
         FREEMAIN R,A=(1),LV=WORKL   FREE WORK AREA
         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS
         SR    R15,R15               GIVE GOOD RETURN CODE
         BR    R14                   RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
CCW1     CCW   X'31',*,CCWCC,5       SEARCH CCW
CCW2     CCW   X'08',CCW1,0,0        TIC CCW
CCW3     CCW   X'5E',*,CCWSILI,65535 READ (COUNT, KEY, DATA/MULTIPLE)
X80      DC    A(X'80000000')        31-BIT MODE
* ------------------- PARMS FOR IEBCOPY ----------------------------- *
         SPACE 1
COPYPARM DC    A(OPTLIST+X'80000000')
         NOPR  0
OPTLIST  DC    H'0'                  OPTIONS LIST
         NOPR  0
DDLIST   DC    H'0'                  DDNAME LIST
         NOPR  0
HDNGLIST DC    H'0'                  HEADING LIST
         SPACE 1
CDCBI    DCB   DSORG=PS,             IEBCOPY CONTROL STATEMENT DCB     +
               DDNAME=SYSIN,                                           +
               LRECL=80,                                               +
               BLKSIZE=3120,                                           +
               MACRF=PM
CDCBL    EQU   *-CDCBI
PDCBI    DCB   DSORG=PS,             IEBCOPY CONTROL STATEMENT DCB     +
               DDNAME=PDSDIR,                                          +
               DEVD=DA,                                                +
               MACRF=EXCP
PDCBL    EQU   *-PDCBI
OPENII   OPEN  (*,INPUT),MF=L
OPENIL   EQU   *-OPENII
OPENOI   OPEN  (*,OUTPUT),MF=L
OPENOL   EQU   *-OPENOI
CLOSEI   CLOSE (*),MF=L
CLOSEL   EQU   *-CLOSEI
DEVTI    DEVTYPE ,(*,24),UCBLIST=(*,1),MF=L
DEVTL    EQU   *-DEVTI
H2       DC    H'2'
COPY1    DC    C' COPY INDD='
COPY1IN  DC    CL8' '
         DC    C',OUTDD='
COPY1OUT DC    CL8' '
COPY1L   EQU   *-COPY1
COPY2    DC    C' S M='
COPY2MEM DC    CL8' '
COPY2L   EQU   *-COPY2
BLANKS   DC    CL44' '
         LTORG
* ------------------------------------------------------------------- *
*                                                                     *
*        WORK AREAS                                                   *
*                                                                     *
* ------------------------------------------------------------------- *
WORKAREA DSECT
WORKSAVE DS    18F                   REGISTER SAVE AREA
WKCCW1   DS    XL8                   SEARCH CCW
WKCCW2   DS    XL8                   TIC CCW
WKCCW3   DS    XL8                   READ CCW
WKECB    DS    F                     I/O ECB
WKCURAL  DS    2F
WKCOPYEP DS    A                     IEBCOPY ENTRY POINT
* ------------------------------------------------------------------- *
WKDEVTA  DS    0F                    DEVT DATA
WKDEVT0  DS    F
WKDEVT1  DS    F
WKDEVT2  DS    F
WKDEVT3  DS    F
WKDEVT4  DS    F
WKDEVT5  DS    F
* ------------------------------------------------------------------- *
WKUCBA   DS    A                     ADDRESS OF UCB
WKCDCB   DS    0A,(CDCBL)X           RESERVE SPACE FOR CTL STMT DCB
WKPDCB   DS    0A,(PDCBL)X           RESERVE SPACE FOR PDS DIR DCB
WKOC     DS    (OPENIL)X             OPEN LIST FORM
WKDEVT   DS    0A,(DEVTL)X           RESERVE DEVT LIST FORM STORAGE
CARDAREA DS    CL80
WKFLAG   DS    X                     FLAGS/INDICATORS
$LOCATE  EQU   X'80'                 .. LOCATING MEMBER
$FOUND   EQU   X'40'                 .. MEMBER FOUND DURING "LOCATE"
WKTTR    DS    XL3                   TTR OF REQUESTED MEMBER
WORKL    EQU   *-WORKAREA
         DRREQ    DSECT=YES
         ORG      DRRECD
         REQBLOK  DSECT=NO
* ------------------------------------------------------------------- *
*              COMMON DATA MAP                                        *
* ------------------------------------------------------------------- *
         FXSCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*              DCB DSECT                                              *
* ------------------------------------------------------------------- *
         DCBD   DSORG=PS
* ------------------------------------------------------------------- *
*              DEB DSECT                                              *
* ------------------------------------------------------------------- *
         IEZDEB LIST=YES
* ------------------------------------------------------------------- *
*              IOB DSECT                                              *
* ------------------------------------------------------------------- *
         IEZIOB DSECT=YES
IOBLEN   EQU   *-IOB
* ------------------------------------------------------------------- *
*              DASD COUNT                                             *
* ------------------------------------------------------------------- *
COUNT    DSECT
COUNTCC  DS    XL2
COUNTHH  DS    XL2
COUNTR   DS    X
COUNTKL  DS    X
COUNTDL  DS    XL2
COUNTL   EQU   *-COUNT
* ------------------------------------------------------------------- *
*              PDS DIRECTORY ENTRY                                    *
* ------------------------------------------------------------------- *
DIRDSECT DSECT
DIRNAME  DS    CL8
DIRTTR   DS    CL3
DIRC     DS    X
DIRUSER  DS    0C
* ------------------------------------------------------------------- *
*              EQUATES                                                *
* ------------------------------------------------------------------- *
         COPY REGEQU
         ABCODES
CCWCC    EQU   X'40'
CCWSILI  EQU   X'20'
         END  FXSCOPY
./ ADD NAME=FXSDAIR  0100-99056-99056-1500-00364-00364-00000-FX-REL1

         TITLE 'FXSDAIR  DYNAMIC ALLOCATION/DE-ALLOCATION'
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXSDAIR                                               *
*                                                                     *
*   Interface with MVS's dynamic allocation interface routine (DAIR)  *
*   to allocate or de-allocate the datasets being transmitted,        *
*   staging datasets, or sysout data sets.                            *
*                                                                     *
*   The interface block is DAIRREQ.                                   *
*                                                                     *
* ------------------------------------------------------------------- *
SDAIR    FXPRFX 'DYNAMIC ALLOACTION/DE-ALLOCATION'
FXSDAIR  AMODE 31
FXSDAIR  RMODE ANY
         LR    R9,R1                 COPY PARAMETER BLOCK ADDRESS
         USING DAIRREQ,R9            DEFINE BASE
         USING S99RB,R2              DEFINE BASE
         CLC   DXDID,MODID           WORK AREA INITIALIZED?
         BE    DAIR0010              YES
         ITRACE ID=INIT
         MVC   DXDID,MODID           WORK AREA INITIALIZED
         LA    R2,DXDRB              SVC 99 REQUEST BLOCK'S ADDRESS
         ST    R2,DXDRBA             SET POINTER
         OI    DXDRBA,X'80'          SET END OF LIST
         MVC   DXDDDP(DAIRPL),DAIRPI INITIALIZE PARAMETERS
DAIR0010 DS    0H
         CLI   DAIRCMD,$DAIRALO      ALLOCATION?
         BE    DAIR1000              YES
         CLI   DAIRCMD,$DAIRREL      RELEASE?
         BE    DAIR2000              YES
         CLI   DAIRCMD,$DAIRDEL      DELETE?
         BE    DAIR3000              YES
         ITRACE ID=BADCMD
         ABEND $U0003,DUMP,,USER     SORRY
DAIR1000 DS    0H
         ITRACE ID=ALLOCATE
         CLI   DAIRTYPE,$DAIRCPY     IEBCOPY SYSIN/SYSPRINT DATA SET?
         BE    DAIR1020              YES
         CLI   DAIRTYPE,$DAIRDSN     EXISTING DATASET?
         BE    DAIR1010              YES
         CLI   DAIRTYPE,$DAIRDSS     SYSIN/SYSPRINT DATA SET?
         BE    DAIR1030              YES
         CLI   DAIRTYPE,$DAIRPRT     SYSOUT DATA SET?
         BE    DAIR1080              YES
         CLI   DAIRTYPE,$DAIRSTG     STAGING DATASET?
         BE    DAIR1030              YES
         ABEND $U0004,DUMP,,USER     SORRY AGAIN
DAIR1010 DS    0H
         ITRACE ID=ALOCDSN
         AP    COMMDD#,P1            ADD 1 TO DD NUMBER
         LA    R2,DXDRB              REQUEST BLOCK'S ADDRESS
         MVC   DXDDD,DDEDWD          INITIALIZE WITH EDIT WORD
         ED    DXDDD,COMMDD#         EDIT DD NUMBER
         MVI   DXDDD,C'D'            SET DD NAME PREFIX "D"
         MVC   DAIRDDN,DXDDD         PASS DD NAME BACK TO CALLER
         MVC   DXDDSN,DAIRDSN        SET DATASET NAME
         MVI   DXDDSPI,X'08'         SET DISPOSITION 'SHR'
         XC    DXDRB(S99RBEND-S99RB),DXDRB
         MVI   S99VERB,S99VRBAL      SET VERB
         LA    R15,DXDDDP            DDNAME PARAMETER
         ST    R15,DXDTXTP1          SET PARAMETER 1 ADDRESS
         LA    R15,DXDDSNP           DDNAME PARAMETER
         ST    R15,DXDTXTP2          SET PARAMETER 2 ADDRESS
         LA    R15,DXDDSPIP          DISPOSITION PARAMETER
         ST    R15,DXDTXTP3          SET PARAMETER 3 ADDRESS
         OI    DXDTXTP3,X'80'        FLAG END OF LIST
         BAL   R8,DAIR4000           GO ISSUE SVC 99
         B     EXIT0000              AND EXIT
DAIR1020 DS    0H
         ITRACE ID=COPYSYS           IEBCOPY SYSIN OR SYSPRINT
         MVC   DXDDD,DAIRDDN         SET DDNAME
DAIR1030 DS    0H
         ITRACE ID=SYSOUT            STAGING OR SYSIN/SYSPRINT
         LA    R2,DXDRB              REQUEST BLOCK'S ADDRESS
         CLI   DAIRTYPE,$DAIRCPY     IEBCOPY SYSIN/SYSPRINT DATA SET?
         BE    DAIR1040              YES.. DDNAME PROVIDED BY CALLER
         AP    COMMDD#,P1            ADD 1 TO DD NUMBER
         MVC   DXDDD,DDEDWD          INITIALIZE WITH EDIT WORD
         ED    DXDDD,COMMDD#         EDIT DD NUMBER
         MVI   DXDDD,C'D'            SET DD NAME PREFIX "D"
         MVC   DAIRDDN,DXDDD         PASS DD NAME BACK TO CALLER
DAIR1040 DS    0H
         MVC   DAIRDSN,COMMBLKS      INITIALIZE DATASET NAME
         LH    R1,COMMPREL           STAGING DATASET PREFIX LENGTH
         BCTR  R1,0                  MINUS 1
         EX    R1,PRFXMVC            MOVE PREFIX
         LA    R3,DAIRDSN+1(R1)      END OF PREFIX
         TIME  DEC                   GET DATE AND TIME
         STCM  R1,15,DXDWORK         SAVE DATE
         MVC   1(6,R3),DAYEDWD       INITIALIZE WITH EDIT WORD
         ED    1(6,R3),DXDWORK+1     EDIT DATE
         MVC   0(2,R3),=C'.D'        SET DELIMITER AND "DAY" PREFIX
         MVC   7(2,R3),=C'.T'        SET DELIMITER AND "TIME" PREFIX
         STCM  R0,15,DXDWORK         SAVE TIME
         UNPK  9(7,R3),DXDWORK(4)    UNPACK TIME
         MVZ   9(6,R3),HEX0000       MOVE ZONES
         TR    9(6,R3),HEXCHAR       TRANSLATE TO PRINTABLE
         MVI   15(R3),C'.'           SET DELIMITER
         MVC   16(8,R3),DAIRDDN      SET LAST QUALIFIER
         MVC   DXDDSN,DAIRDSN        SET DATASET NAME
         MVI   DXDDSPI,X'04'         SET INITIAL DISP 'NEW'
         MVI   DXDDSPN,X'02'         SET NORMAL DISP 'CATLG'
         XC    DXDRB(S99RBEND-S99RB),DXDRB
         MVI   S99VERB,S99VRBAL      SET VERB
         LA    R15,DXDDDP            DDNAME PARAMETER
         ST    R15,DXDTXTP1          SET PARAMETER 1 ADDRESS
         LA    R15,DXDDSNP           DATASET NAME PARAMETER
         ST    R15,DXDTXTP2          SET PARAMETER 2 ADDRESS
         LA    R15,DXDDSPIP          INITIAL DISPOSITION
         ST    R15,DXDTXTP3          SET PARAMETER 3 ADDRESS
         LA    R15,DXDDSPNP          NORMAL DISPOSITION
         ST    R15,DXDTXTP4          SET PARAMETER 4 ADDRESS
         LA    R15,DXDUNITP          UNIT PARAMETERS
         ST    R15,DXDTXTP5          SET PARAMETER 5 ADDRESS
         LA    R15,DXDVOLP           VOLSER PARAMETERS
         ST    R15,DXDTXTP6          SET PARAMETER 6 ADDRESS
         LA    R15,DXDTRKSP          TRACKS PARAMETER
         ST    R15,DXDTXTP7          SET PARAMETER 7 ADDRESS
         LA    R15,DXDPRIP           PRIMARY SPACE PARAMETER
         ST    R15,DXDTXTP8          SET PARAMETER 8 ADDRESS
         LA    R15,DXDSECP           SECONDARY SPACE PARAMETER
         ST    R15,DXDTXTP9          SET PARAMETER 9 ADDRESS
         LA    R15,DXDRELP           RELEASE UNUSED SPACE
         ST    R15,DXDTXTPA          SET PARAMETER 10 ADDRESS
         OI    DXDTXTPA,X'80'        FLAG END OF LIST
         ICM   R7,15,COMMSTGE        FIRST STAGING DEVICE
         USING STGEDEV,R7            DEFINE BASE
         BZ    EXIT0000              NO DEVICES?
DAIR1050 DS    0H
         CLI   DAIRTYPE,$DAIRCPY     IEBCOPY SYSIN/SYSPRINT?
         BE    DAIR1060              YES
         CLI   DAIRTYPE,$DAIRDSS     SYSIN/SYSPRINT?
         BE    DAIR1060              YES
         ITRACE ID=ALOCSTG,                                            +
               DATA1=DAIRSIZE
         MVI   VTOCCMD,$VTOCTRK      SET COMMAND (CONVERT TO TRACKS)
         ST    R7,VTOCDEV            SET STAGE DEVICE BLOCK ADDRESS
         MVC   VTOCDSSZ,DAIRSIZE     SET DATASET SIZE IN BYTES
         LA    R1,VTOCREQ            VTOC MODULE INTERFACE BLOCK
         L     R15,AVTOC             VTOC MODULE ENTRY POINT
         BALR  R14,R15               CONVERT SIZE TO TRACKS
         MVC   DXDPRI,VTOCTRKP+1     SET PRIMARY SIZE
         MVC   DXDSEC,VTOCTRKS+1     SET SECONDARY SIZE
         B     DAIR1070
DAIR1060 DS    0H
         ITRACE ID=ONETRACK
         MVC   DXDPRI,X000001        SET NUMBER OF TRACKS TO 1
         MVC   DXDSEC,X000001        SET NUMBER OF TRACKS TO 1
DAIR1070 DS    0H
         MVC   DXDVOL,STGEVOL        SET VOLSER
         BAL   R8,DAIR4000           GO ISSUE SVC 99
         OC    DAIRR15,DAIRR15       SUCCESSFUL?
         BZ    EXIT0000              YES
         ICM   R7,15,STGENEXT        NEXT STAGING DEVICE
         BNZ   DAIR1050              CHECK THIS DEVICE
         B     EXIT0000              AND EXIT
DAIR1080 DS    0H
         ITRACE ID=ALOCPRT
         MVC   DXDDD,DAIRDDN         SET DDNAME
         LA    R2,DXDRB              REQUEST BLOCK'S ADDRESS
         XC    DXDRB(S99RBEND-S99RB),DXDRB
         MVI   S99VERB,S99VRBAL      SET VERB
         LA    R15,DXDDDP            DDNAME PARAMETER
         ST    R15,DXDTXTP1          SET PARAMETER 1 ADDRESS
         LA    R15,DXDPRTP           SYSOUT PARAMETER
         ST    R15,DXDTXTP2          SET PARAMETER 2 ADDRESS
         MVC   DXDPRTC,COMMSNPC      SET SNAPSHOT SYSOUT CLASS
         LA    R15,DXDFREEP          FREE=CLOSE PARAMETER
         ST    R15,DXDTXTP3          SET PARAMETER 3 ADDRESS
         OI    DXDTXTP3,X'80'        FLAG END-OF-LIST
         BAL   R8,DAIR4000           ALLOCATE THE SYSOUT DATA SET
         B     EXIT0000              AND EXIT
DAIR2000 DS    0H
         ITRACE ID=RELEASE
         LA    R2,DXDRB              REQUEST BLOCK'S ADDRESS
         MVC   DXDDD,DAIRDDN         SET DDNAME TO RELEASE
         MVI   S99VERB,S99VRBUN      SET VERB
         LA    R15,DXDDDP            DDNAME PARAMETER
         ST    R15,DXDTXTP1          SET PARAMETER 1 ADDRESS
         OI    DXDTXTP1,X'80'        FLAG END OF LIST
         BAL   R8,DAIR4000           GO ISSUE SVC 99
         B     EXIT0000              AND EXIT
DAIR3000 DS    0H
         ITRACE ID=DELETE
         AP    COMMDD#,P1            ADD 1 TO DD NUMBER
         LA    R2,DXDRB              REQUEST BLOCK'S ADDRESS
         MVC   DXDDD,DDEDWD          INITIALIZE WITH EDIT WORD
         ED    DXDDD,COMMDD#         EDIT DD NUMBER
         MVI   DXDDD,C'D'            SET DD NAME PREFIX "D"
         MVC   DAIRDDN,DXDDD         PASS DD NAME BACK TO CALLER
         MVC   DXDDSN,DAIRDSN        SET DATASET NAME
         MVI   DXDDSPI,X'01'         SET DISPOSITION 'OLD'
         MVI   DXDDSPN,X'04'         SET DISPOSITION 'DELETE'
         XC    DXDRB(S99RBEND-S99RB),DXDRB
         MVI   S99VERB,S99VRBAL      SET VERB
         LA    R15,DXDDDP            DDNAME PARAMETER
         ST    R15,DXDTXTP1          SET PARAMETER 1 ADDRESS
         LA    R15,DXDDSNP           DSN PARAMETER
         ST    R15,DXDTXTP2          SET PARAMETER 2 ADDRESS
         LA    R15,DXDDSPIP          INITIAL DISPOSITION PARAMETER
         ST    R15,DXDTXTP3          SET PARAMETER 3 ADDRESS
         LA    R15,DXDDSPNP          NORMAL DISPOSITION PARAMETER
         ST    R15,DXDTXTP4          SET PARAMETER 4 ADDRESS
         OI    DXDTXTP4,X'80'        FLAG END OF LIST
         BAL   R8,DAIR4000           GO ISSUE SVC 99
         LTR   R15,R15               ALLOCATE SUCCESSFUL?
         BNZ   EXIT0000              NO
         MVI   S99VERB,S99VRBUN      SET VERB
         LA    R15,DXDDDP            DDNAME PARAMETER
         ST    R15,DXDTXTP1          SET PARAMETER 1 ADDRESS
         OI    DXDTXTP1,X'80'        FLAG END OF LIST
         BAL   R8,DAIR4000           ISSUE SVC 99
         B     EXIT0000              AND EXIT
DAIR4000 DS    0H
         MVI   S99RBLN,S99RBEND-S99RB
         LA    R1,DXDTXTP1           FIRST TEXT UNIT POINTER
         ST    R1,S99TXTPP           SET TEXT ADDRESS
         LA    R1,DXDRBA             REQUEST BLOCK POINTER'S ADDRESS
         ITRACE ID=SVC99,RDATA1=R1
         SVC   99                    ISSUE SVC
         ITRACE ID=SVC99RC,                                            +
               RDATA1=R15
         STCM  R15,3,DAIRR15         PASS RETURN CODE BACK TO CALLER
         MVC   DAIRERR,S99ERROR      PASS ERROR CODE BACK TO CALLER
         MVC   DAIRINFO,S99INFO      PASS INFO CODE BACK TO CALLER
         BR    R8                    RETURN
* ------------------------------------------------------------------- *
*             EXECUTED INSTRUCTIONS                                   *
* ------------------------------------------------------------------- *
PRFXMVC  MVC   DAIRDSN(0),COMMPREF   MOVE PREFIX
* ------------------------------------------------------------------- *
*             EXIT                                                    *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT              EXITING PRINT MODULE
         L     R13,4(R13)            RESTORE REGISTER 13
         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS
         SR    R15,R15               GIVE GOOD RETURN CODE
         BR    R14                   RETURN TO CALLER
* ------------------------------------------------------------------ *
*                                                                    *
*        CONSTANTS                                                   *
*                                                                    *
* ------------------------------------------------------------------ *
DXDSTART DC    Q(DXDSDAIR)           DISPLACEMENT TO WORK AREA
DDEDWD   DC    X'F02120202020202020' DD NUMBER EDIT WORD
DAYEDWD  DC    X'F02020202020'
X000001  DC    X'000001'             CONSTANT
HEX0000  DC    8X'00'
HEXCHAR  DC    C'0123456789ABCDEF'
P1       DC    P'1'
DAIRPI   DC    AL2(DALDDNAM)         DDNAME PARMS
         DC    AL2(1)
         DC    AL2(8)
         DC    CL8' '                DDNAME
         DC    AL2(DALDSNAM)         DATASET NAME PARMS
         DC    AL2(1)
         DC    AL2(44)
         DC    CL44' '               DATASET NAME
         DC    AL2(DALSTATS)         INITIAL DISPOSITION PARMS
         DC    AL2(1)
         DC    AL2(1)
         DC    X'00'                 INITIAL DISPOSITION
         DC    AL2(DALNDISP)         NORMAL DISPOSITION PARMS
         DC    AL2(1)
         DC    AL2(1)
         DC    X'00'                 NORMAL DISPOSITION
         DC    AL2(DALUNIT)          UNIT PARAMETERS
         DC    AL2(1)
         DC    AL2(8)
         DC    CL8'SYSALLDA'         UNIT NAME
         DC    AL2(DALVLSER)         VOLSER PARAMETERS
         DC    AL2(1)
         DC    AL2(6)
         DC    CL6' '                VOLSER
         DC    AL2(DALTRK)           ALLOCATION UNITS (TRACKS)
         DC    AL2(0)
         DC    AL2(DALPRIME)         PRIMARY SPACE PARAMETERS
         DC    AL2(1)
         DC    AL2(3)
         DC    XL3'0'                PRIMARY SPACE (IN TRACKS)
         DC    AL2(DALSECND)         SECONDARY SPACE PARAMETERS
         DC    AL2(1)
         DC    AL2(3)
         DC    XL3'0'                SECONDARY SPACE (IN TRACKS)
         DC    AL2(DALRLSE)          RELEASE UNUSED SPACE
         DC    AL2(0)
         DC    AL2(DALSYSOU)         ALLOCATE SYSOUT
         DC    AL2(1)
         DC    AL2(1)
         DC    C'O'                  SYSOUT CLASS
         DC    AL2(DALCLOSE)         SAME AS FREE=CLOSE ON A DD STMT
         DC    AL2(0)
DAIRPL   EQU   *-DAIRPI
         LTORG
* ------------------------------------------------------------------ *
*                                                                    *
*        WORK AREAS                                                  *
*                                                                    *
* ------------------------------------------------------------------ *
DXDSDAIR DSECT
DXDID    DS    CL8                   WORK AREA OWNER ID
DXDSAVE  DS    18F                   REGISTER SAVE AREA
DXDRBA   DS    A                     REQUEST BLOCK'S ADDRESS
DXDTXTP1 DS    A                     TEXT UNIT 1'S ADDRESS
DXDTXTP2 DS    A                     TEXT UNIT 2'S ADDRESS
DXDTXTP3 DS    A                     TEXT UNIT 3'S ADDRESS
DXDTXTP4 DS    A                     TEXT UNIT 4'S ADDRESS
DXDTXTP5 DS    A                     TEXT UNIT 5'S ADDRESS
DXDTXTP6 DS    A                     TEXT UNIT 6'S ADDRESS
DXDTXTP7 DS    A                     TEXT UNIT 7'S ADDRESS
DXDTXTP8 DS    A                     TEXT UNIT 8'S ADDRESS
DXDTXTP9 DS    A                     TEXT UNIT 9'S ADDRESS
DXDTXTPA DS    A                     TEXT UNIT 10'S ADDRESS
DXDRB    DS    (S99RBEND-S99RB)X     RESERVE SPACE FOR REQUEST BLOCK
DXDDDP   DS    AL2,AL2,AL2           DDNAME PARMS
DXDDD    DS    CL8                   DDNAME
DXDDSNP  DS    AL2,AL2,AL2           DATASET NAME PARMS
DXDDSN   DS    CL44                  DATASET NAME
DXDDSPIP DS    AL2,AL2,AL2           INITIAL DISPOSITION PARMS
DXDDSPI  DS    X                     INITIAL DISPOSITION
DXDDSPNP DS    AL2,AL2,AL2           NORMAL DISPOSITION PARMS
DXDDSPN  DS    X                     NORMAL DISPOSITION
DXDUNITP DS    AL2,AL2,AL2           UNIT PARAMETERS
DXDUNIT  DS    CL8                   UNIT NAME
DXDVOLP  DS    AL2,AL2,AL2           VOLSER PARAMETERS
DXDVOL   DS    CL6                   VOLSER
DXDTRKSP DS    AL2,AL2               ALLOCATION UNITS (TRACKS)
DXDPRIP  DS    AL2,AL2,AL2           PRIMARY SPACE PARAMETERS
DXDPRI   DS    XL3                   PRIMARY SPACE (IN TRACKS)
DXDSECP  DS    AL2,AL2,AL2           SECONDARY SPACE PARAMETERS
DXDSEC   DS    XL3                   SECONDARY SPACE (IN TRACKS)
DXDRELP  DS    AL2,AL2               RELEASE UNUSED SPACE (RLSE)
DXDPRTP  DS    AL2,AL2,AL2           SYSOUT PARAMETERS
DXDPRTC  DS    C                     SYSOUT CLASS
DXDFREEP DS    AL2,AL2               FREE AT DE-ALLOCATION
DXDPL    EQU   *-DXDDDP
DXDWORK  DS    CL16
         VTOCREQ DSECT=NO
* ------------------------------------------------------------------ *
*              DAIR INTEFACE BLOCK                                   *
* ------------------------------------------------------------------ *
         DAIRREQ  DSECT=YES
* ------------------------------------------------------------------ *
*              COMMON DATA MAP                                       *
* ------------------------------------------------------------------ *
         FXSCOMM  TYPE=DSECT
* ------------------------------------------------------------------ *
*              STAGING DEVICE BLOCK                                  *
* ------------------------------------------------------------------ *
         STGEDEV  DSECT=YES
* ------------------------------------------------------------------ *
*                                                                    *
*              EQUATES                                               *
*                                                                    *
* ------------------------------------------------------------------ *
         COPY REGEQU
         ABCODES
         IEFZB4D0
         IEFZB4D2
         END  FXSDAIR
./ ADD NAME=FXSDSS   0100-99056-99056-1500-00391-00391-00000-FX-REL1

         TITLE 'FXSDSS    DF/DSS DUMP/RESTORE SUBTASK'
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXSDSS                                                *
*                                                                     *
*   Drive the DF/DSS DUMPs and RESTOREs.                              *
*   DF/DSS functions are done in a subtask to allow over-lap with     *
*   other functions (like transmitting or receiving of data).         *
*                                                                     *
* ------------------------------------------------------------------- *
FXSDSS   CSECT
FXSDSS   AMODE 31
FXSDSS   RMODE 24
         USING FXSDSS,R12            DEFINE BASE
         USING DRREQ,R9              DEFINE BASE
         USING REQBLOK,R7            DEFINE BASE
         USING FXSCOMM,R11           DEFINE BASE
         STM   R14,R12,12(R13)       CHAIN REGISTERS
         LR    R12,R15               COPY ENTRY POINT ADDRESS
         L     R11,0(R1)             LOAD FXSCOMM'S ADDRESS
         GETMAIN R,LV=WORKL          ACQUIRE STORAGE FOR WORK AREA
         B     DSS0000
         DC    ((PFXMODNM-MODPRFX)-(*-FXSDSS))X'00'
         DC    CL8'FXSDSS'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
DSS0000  DS    0H
         USING WORKAREA,R1           DEFINE BASE
         XC    WORKAREA+000(256),WORKAREA
         XC    WORKAREA+256(WORKL-256),WORKAREA+256
         ST    R13,4(R1)             CHAIN PREVIOUS SAVE AREA TO OURS
         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO PREVIOUS
         LR    R13,R1                COPY WORK AREA ADDRESS
         DROP  R1
         USING WORKAREA,R13          DEFINE BASE
         ITRACE ID=FINDSS            ENTRY
         ST    R12,ADSS              SET OUR ENTRY POINT IN COMMON
         MVC   WKDCB(DCBL),DCBI      INITIALIZE DCB IN WORK AREA
         MVI   CARDAREA,C' '         RE-INITIALIZE
         MVC   CARDAREA+1(L'CARDAREA-1),CARDAREA
         MVI   WKDDLIST+1,48         SET DDLIST LENGTH
         LA    R1,H0                 OPTIONS PARAMETER
         ST    R1,WKPARMS+0          SET OPTIONS ADDRESS
         LA    R1,WKDDLIST           DDNAMES LIST ADDRESS
         ST    R1,WKPARMS+4          SET DDNAMES LIST ADDRESS
         OI    WKPARMS+4,X'80'       FLAG END OF LIST
         OI    WKOC,X'80'            SET END OF LIST
         LOAD  EP=ADRDSSU            LOAD DF/DSS INITIAL MODULE
         ST    R0,WKDSSEP            SAVE ENTRY POINT ADDRESS
         ITRACE ID=FINDSMS           ATTEMPTING TO LOCATE SSCT ENTRY
         L     R1,CVTPTR             CVT ADDRESS
         USING CVT,R1                DEFINE CVT BASE
         L     R2,CVTJESCT           JES SSCT ADDRESS
         USING JESCT,R2              DEFINE BASE
         ICM   R3,15,JESSSCT         FIRST SUBSYSTEM ENTRY
         USING SSCT,R3               DEFINE SSCT BASE
DSS0010  DS    0H
         CLC   SSCTSNAM,SMS          SMS SUBSYSTEM ENTRY LOCATED?
         BE    DSS0020               YES
         ICM   R3,15,SSCTSCTA        NEXT SUBSYSTEM ADDRESS
         BNZ   DSS0010               LOOP
         B     DSS0040
DSS0020  DS    0H
         ITRACE ID=SMSACTIV
         OI    WKFLAG,$SMS           SMS IS ACTIVE
         B     DSS0040               ENTER MAIN LOGIC
DSS0030  DS    0H
         ITRACE ID=WORKWAIT          WAITING FOR WORK
         TM    DSSWORK,X'40'         ECB POSTED?
         BO    DSS0040               YES.. SKIP WAITING
         LA    R1,DSSWORK            WORK TO DO ECB
         WAIT  1,ECB=(1)             WAIT FOR WORK TO DO ECB
         ITRACE ID=WOKEUP            TIME TO RISE AND SHINE
         XC    DSSWORK,DSSWORK       RESET ECB
DSS0040  DS    0H
         TM    COMMEOJ,$EOJ1         SHUTDOWN PHASE 1?
         BO    EXIT0000              YES.. IT'S MILLER TIME
         ICM   R9,15,DSSREQ          REQUEST BLOCK'S ADDRESS
         BZ    DSS0030               FALSE ALARM.. GO WAIT
         CLI   DRSTAT,0              PROCESSING STARTED OR COMPLETE?
         BNE   DSS0030               YES.. GO WAIT
         ITRACE ID=PROCESS,RDATA1=R9
         LA    R7,DRRECD             SET REQUEST BLOCK BASE
         OI    DRSTAT,$DRSTRT        PROCESSING STARTED
         CLC   COMMAPLN,REQTNODE     ARE WE SENDING END?
         BE    DUMP0000              YES
         B     RSTR0000              WE'RE RECEIVING END
DSS0050  DS    0H
         OI    DRSTAT,$DRDONE        PROCESSING COMPLETED
         LA    R1,DSSECB             WE'RE DONE ECB
         POST  (1),(R15)             POST THE ECB
         B     DSS0030               WAIT FOR MORE WORK
* ------------------------------------------------------------------- *
*                                                                     *
*        DUMP DATASET TO STAGING DATASET                              *
*                                                                     *
* ------------------------------------------------------------------- *
DUMP0000 DS    0H
         ITRACE ID=DUMP
         MVI   REQSTAT,$REQDUMP      STATUS IS 'DUMP IN PROGRESS'
         LA    R2,WKDCB              DCB IN WORK AREA
         USING IHADCB,R2             DEFINE BASE
         MVC   DCBDDNAM,DRINDD       SET DDNAME ASSIGNED
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         MVC   WKOC(OPENL),OPENI     INITIALIZE OPEN PARM LIST
         OPEN  ((R2),OUTPUT),        OPEN DATASET FOR OUTPUT           +
               MF=(E,WKOC)           .. EXECUTE FORM, LIST FORM ADDRESS
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         MVC   CARDAREA(DUMP1L),DUMP1
         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT
         MVC   CARDAREA(DUMP2L),DUMP2
         MVC   CARDAREA+(DUMP2DDN-DUMP2)(L'DRSTAGE),DRSTAGE
         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT
         MVC   CARDAREA(DUMP3L),DUMP3
         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT
         MVC   CARDAREA(DUMP4L),DUMP4
         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT
         MVC   CARDAREA(DUMP5L),DUMP5
         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT
         MVC   CARDAREA(DUMP6L),DUMP6
         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT
         MVC   CARDAREA(DUMP7L),DUMP7
         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT
         MVC   CARDAREA+15(L'REQODSNM),REQODSNM
         MVI   CARDAREA+15+L'REQODSNM+2,C'-'
         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT
         MVC   CARDAREA(DUMP8L),DUMP8
         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         MVC   WKOC(CLOSEL),CLOSEI   INITIALIZE CLOSE PARM LIST
         CLOSE ((R2)),               CLOSE DF/DSS INPUT FILE           +
               MF=(E,WKOC)           .. EXECUTE FORM, LIST FORM ADDRESS
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         ITRACE ID=DSSDUMP
         MVC   WKINDD,DRINDD         SET SYSIN DD NAME
         MVC   WKPRTDD,DRPRTDD       SET SYSPRINT DD NAME
         LA    R1,WKPARMS            DF/DSS PARAMETER LIST ADDRESS
         L     R15,WKDSSEP           ENTRY POINT ADDRESS
         BALR  R14,R15               LINK TO DF/DSS
         ITRACE ID=DUMPDONE,RDATA1=R15
         STCM  R15,3,DRR15           PASS BACK DF/DSS RETURN CODE
         B     DSS0050
* ------------------------------------------------------------------- *
*                                                                     *
*        RESTORE DATASET FROM STAGING DATASET                         *
*                                                                     *
* ------------------------------------------------------------------- *
RSTR0000 DS    0H
         ITRACE ID=RESTORE
         LA    R2,WKDCB              DCB IN WORK AREA
         USING IHADCB,R2             DEFINE BASE
         MVC   DCBDDNAM,DRINDD       SET DDNAME ASSIGNED
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         OPEN  ((R2),OUTPUT),        OPEN DATASET FOR OUTPUT           +
               MF=(E,WKOC)           .. EXECUTE FORM, LIST FORM ADDRESS
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         MVC   CARDAREA(RSTR1L),RSTR1
         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT
         MVC   CARDAREA(RSTR2L),RSTR2
         MVC   CARDAREA+(RSTR2DDN-RSTR2)(L'DRSTAGE),DRSTAGE
         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT
         MVC   CARDAREA(RSTR3L),RSTR3
         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT
         ICM   R3,15,DRRSTR          RESTORE BLOCK'S ADDRESS
         BZ    ERR0010               BETTER NOT HAPPEN
         USING RSTRBLOK,R3           DEFINE BASE
         LH    R4,RSTRVOL#           NUMBER OF VOLUMES IN THE LIST
         LA    R5,RSTRVOL            FIRST VOLUME IN LIST
RSTR0010 DS    0H
         MVC   CARDAREA(RSTR4L),RSTR4
         MVC   CARDAREA+(RSTR4VOL-RSTR4)(L'RSTR4VOL),0(R5)
RSTR0020 DS    0H
         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT
         LA    R5,L'RSTRVOL(R5)      NEXT VOLUME
         BCT   R4,RSTR0010           LOOP
         MVC   CARDAREA(RSTR5L),RSTR5
         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT
         MVC   CARDAREA(RSTR6L),RSTR6
         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT
         MVC   CARDAREA(RSTR7L),RSTR7
         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT
         TM    WKFLAG,$SMS           IS SMS IN THE SYSTEM?
         BNO   RSTR0030              NO
         MVC   CARDAREA(RSTR8L),RSTR8
         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT
         MVC   CARDAREA(RSTR9L),RSTR9
         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT
RSTR0030 DS    0H
         CLI   REQREPL,C'Y'          REPLACE IF IT ALREADY EXISTS?
         BNE   RSTR0040              NO
         MVC   CARDAREA(RSTR10L),RSTR10
         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT
RSTR0040 DS    0H
         MVC   CARDAREA(RSTR11L),RSTR11
         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT
         MVC   CARDAREA+15(L'REQODSNM),REQODSNM
         MVI   CARDAREA+17+L'REQODSNM,C'-'
         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT
         MVC   CARDAREA(RSTR5L),RSTR5
         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT
         CLC   REQDDSNM,COMMBLKS     NEW NAME REQUESTED?
         BE    RSTR0070              NO
         MVC   CARDAREA(RSTR5L),RSTR5
         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT
         MVC   CARDAREA(RSTR12L),RSTR12
         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT
         MVC   CARDAREA+15(L'REQODSNM),REQODSNM
         LA    R1,CARDAREA+15+L'REQODSNM
RSTR0050 DS    0H
         CLI   0(R1),C' '            END OF NAME FOUND?
         BNE   RSTR0060              YES
         BCT   R1,RSTR0050           LOOP
RSTR0060 DS    0H
         MVI   1(R1),C','            INSERT COMMA
         MVI   CARDAREA+17+L'REQODSNM,C'-'
         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT
         MVC   CARDAREA+15(L'REQDDSNM),REQDDSNM
         MVI   CARDAREA+15+L'REQDDSNM+2,C'-'
         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT
         MVC   CARDAREA(RSTR5L),RSTR5
         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT
RSTR0070 DS    0H
         MVC   CARDAREA(RSTR13L),RSTR13
         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         CLOSE ((R2)),               CLOSE DF/DSS INPUT FILE           +
               MF=(E,WKOC)           .. EXECUTE FORM, LIST FORM ADDRESS
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         ITRACE ID=DRRSTR
         MVC   WKINDD,DRINDD         SET SYSIN DD NAME
         MVC   WKPRTDD,DRPRTDD       SET SYSPRINT DD NAME
         LA    R1,WKPARMS            DF/DSS PARAMETER LIST ADDRESS
         L     R15,WKDSSEP           ENTRY POINT ADDRESS
         BALR  R14,R15               LINK TO DF/DSS
         ITRACE ID=RSTRDONE,RDATA1=R15
         STCM  R15,3,DRR15           PASS BACK DF/DSS RETURN CODE
         B     DSS0050
*---------------------------------------------------------------------*
*        WRITE DF/DSS CONTROL STATEMENTS                              *
*---------------------------------------------------------------------*
PUNCH000 DS    0H
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         PUT   (R2),CARDAREA         PUNCH DF/DSS CONTROL STATEMENT
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         MVI   CARDAREA,C' '         RE-INITIALIZE
         MVC   CARDAREA+1(L'CARDAREA-1),CARDAREA
         BR    R8                    RETURN
* ------------------------------------------------------------------- *
*        ADDRESSING MODE SWITCHING                                    *
* ------------------------------------------------------------------- *
AM24     DS    0H
         LA    R15,0(R15)            CLEAR HIGH BIT(S)
         BSM   R0,R15                RETURN IN 24-BIT MODE
AM31     DS    0H
         LA    R15,0(R15)            CLEAR HIGH BIT(S)
         O     R15,X80               SET HIGH BIT ON
         BSM   R0,R15                RETURN IN 31-BIT MODE
* ------------------------------------------------------------------- *
*        EXIT                                                         *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT              EXITING PRINT MODULE
         DELETE EP=ADRDSSU           RELEASE DF/DSS
         LR    R1,R13                COPY WORK AREA ADDRESS
         L     R13,4(R13)            RESTORE REGISTER 13
         FREEMAIN R,A=(1),LV=WORKL   FREE WORK AREA
         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS
         SR    R15,R15               GIVE GOOD RETURN CODE
         BR    R14                   RETURN TO CALLER
* ------------------------------------------------------------------- *
*        ERRORS                                                       *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         ITRACE ID=NORSTR            NO RESTORE BLOCK
         ABEND $U0008,DUMP,,USER     TIME TO FIX FX
* ------------------------------------------------------------------- *
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
X80      DC    A(X'80000000')
H0       DC    H'0'                  NO-OVERRIDDEN OPTIONS
OPENI    OPEN  (*,OUTPUT),MF=L
OPENL    EQU   *-OPENI
CLOSEI   CLOSE (*),MF=L
CLOSEL   EQU   *-CLOSEI
DCBI     DCB   DSORG=PS,                                               +
               DDNAME=DSSIN,                                           +
               LRECL=80,                                               +
               BLKSIZE=3120,                                           +
               MACRF=PM
DCBL     EQU   *-DCBI
SMS      DC    CL4'SMS'              SMS SUBSYSTEM NAME
DUMP1    DC    C' DUMP -'
DUMP1L   EQU   *-DUMP1
DUMP2    DC    C' OUTDDNAME ('
DUMP2DDN DC    CL8' '
         DC    C' ) -'
DUMP2L   EQU   *-DUMP2
DUMP3    DC    C' ALLEXCP -'
DUMP3L   EQU   *-DUMP3
DUMP4    DC    C' ALLDATA (*) -'
DUMP4L   EQU   *-DUMP4
DUMP5    DC    C' COMPRESS -'
DUMP5L   EQU   *-DUMP5
DUMP6    DC    C' TOLERATE (ENQFAILURE) -'
DUMP6L   EQU   *-DUMP6
DUMP7    DC    C' DATASET ( INCLUDE ( -'
DUMP7L   EQU   *-DUMP7
DUMP8    DC    C'         ))'
DUMP8L   EQU   *-DUMP8
RSTR1    DC    C' RESTORE -'
RSTR1L   EQU   *-RSTR1
RSTR2    DC    C' INDDNAME ( '
RSTR2DDN DC    CL8' '
         DC    C' ) -'
RSTR2L   EQU   *-RSTR2
RSTR3    DC    C' OUTDYNAM ( -'
RSTR3L   EQU   *-RSTR3
RSTR4    DC    C'           ('
RSTR4VOL DC    CL06' '
         DC    C',SYSALLDA) -'
RSTR4L   EQU   *-RSTR4
RSTR5    DC    C'             ) -'
RSTR5L   EQU   *-RSTR5
RSTR6    DC    C' CATALOG -'
RSTR6L   EQU   *-RSTR6
RSTR7    DC    C' SHARE -'
RSTR7L   EQU   *-RSTR7
RSTR8    DC    C' NULLMGMTCLAS -'
RSTR8L   EQU   *-RSTR8
RSTR9    DC    C' NULLSTORCLAS -'
RSTR9L   EQU   *-RSTR9
RSTR10   DC    C' REPLACE -'
RSTR10L  EQU   *-RSTR10
RSTR11   DC    C' DATASET ( INCLUDE ( -'
RSTR11L  EQU   *-RSTR11
RSTR12   DC    C' RENAMEUNCONDITIONAL (( -'
RSTR12L  EQU   *-RSTR12
RSTR13   DC    C'             )'
RSTR13L  EQU   *-RSTR13
         LTORG
* ------------------------------------------------------------------- *
*                                                                     *
*        WORK AREAS                                                   *
*                                                                     *
* ------------------------------------------------------------------- *
WORKAREA DSECT
WORKSAVE DS    18F                   REGISTER SAVE AREA
WKDSSEP  DS    A                     DF/DSS ENTRY POINT
WKPARMS  DS    0A
         DS    A                     OPTIONS LIST ADDRESS
         DS    A                     DDNAME LIST ADDRESS
WKDDLIST DS    H                     LENGTH OF LIST
         DC    XL8'0000000000000000' NOT USED
         DC    XL8'0000000000000000' NOT USED
         DC    XL8'0000000000000000' NOT USED
         DC    XL8'0000000000000000' NOT USED
WKINDD   DC    CL8' '                SYSIN DDNAME
WKPRTDD  DC    CL8' '                SYSPRINT DD NAME
CARDAREA DS    CL80
WKDCB    DS    0A,(DCBL)X            RESERVE SPACE FOR DCB
WKOC     DS    (OPENL)X              RESERVE SPACE FOR OPEN/CLOSE
WKFLAG   DS    X                     FLAGS/INDICATORS
$SMS     EQU   X'80'                 .. SMS IS ACTIVE
WORKL    EQU   *-WORKAREA
         REQBLOK  DSECT=YES
         DRREQ    DSECT=YES
         RSTRBLOK DSECT=YES
* ------------------------------------------------------------------- *
*              COMMON DATA MAP                                        *
* ------------------------------------------------------------------- *
         FXSCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*              DCB DSECT                                              *
* ------------------------------------------------------------------- *
         DCBD   DSORG=PS
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         CVT   DSECT=YES,LIST=NO
         IEFJESCT
         IEFJSCVT
* ------------------------------------------------------------------- *
*              EQUATES                                                *
* ------------------------------------------------------------------- *
         COPY REGEQU
         ABCODES
         END  FXSDSS
./ ADD NAME=FXSLOSS  0100-99056-99056-1500-00385-00385-00000-FX-REL1

         TITLE 'CLEAN-UP AFTER A VTAM LOSS'
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXSLOSS                                               *
*                                                                     *
*  If a VTAM session is lost, any activity in progress on any         *
*  conversation with that node is interrupted.  FX is notified of     *
*  these lost sessions via the ATTN exit.                             *
*                                                                     *
*  The ATTN exit does not do the clean-up.  FX has no enqueue/dequeue *
*  mechanism to prevent multiple tasks from updating the same master  *
*  file record at the same time.  FX relies on all master file        *
*  updates to be done from the same MVS task, and the ATTN exit runs  *
*  under an IRB... a separately dispatchable unit of work.  The ATTN  *
*  exit sets the error flag in the SESSBLOK, and when the main task   *
*  finds the error set, it performs the clean-up.                     *
*                                                                     *
* ------------------------------------------------------------------- *
SLOSS    FXPRFX 'CLEAN-UP AFTER A VTAM LOSS'
FXSLOSS  AMODE 31
FXSLOSS  RMODE ANY
         USING FXSLOSS,R12           DEFINE BASE REGISTER
         LR    R8,R1                 COPY PARM ADDRESS
         USING VTAMBLOK,R8           DEFINE BASE
         L     R7,VTAMSESS           SESSION BLOCK'S ADDRESS
         ITRACE ID=LOSTSESS,         SESSION LOST                      +
               RDATA1=R7             .. SESSION BLOCK'S ADDRESS
         USING SESSBLOK,R7           DEFINE BASE
         CLC   DXDID,MODID           WORK AREA INITIALIZED?
         BE    LOSS0010              YES
         MVC   DXDID,MODID           WORK AREA INITIALIZED
         MVI   PRTCC,C' '            INITIALIZE PRINT I/O AREA
         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC
         GETMAIN RU,                 ACQUIRE 24-BIT PARM BLOCK         +
               LV=FX24L,             .. AREA SIZE                      +
               LOC=BELOW             .. FROM BELOW THE LINE
         ST    R1,DXD24              SAVE 24-BIT WORK AREA ADDRESS
*---------------------------------------------------------------------*
*                                                                     *
*        Scan the conversations.                                      *
*                                                                     *
*        If a FX-TO-FX session was lost, reset the master file        *
*        status so the process can/will be restarted when the         *
*        session can be re-established.                               *
*                                                                     *
*---------------------------------------------------------------------*
LOSS0010 DS    0H
         L     R9,DXD24              24-BIT WORK AREA'S ADDRESS
         USING FX24PRM,R9            DEFINE BASE
         TM    COMMEOJ,$EOJ3         EOJ PHASE 3?
         BO    EXIT0000              YES
LOSS0020 DS    0H
         ICM   R6,15,SESSCONV        FIRST CONVERSATION BLOCK'S ADDRESS
         BZ    LOSS0200              NO SESSIONS EXIST
         USING CONVBLOK,R6           DEFINE BASE
         CLI   SESSTYPE,$SESSUSR     IS THIS A USER SESSION?
         BE    LOSS0160              YES
         CLI   CONVTYPE,$CONVTS      RECEIVING END OF FX-TO-FX?
         BE    LOSS0080              YES
*---------------------------------------------------------------------*
*                                                                     *
*        We were SENDing end of FX-to-FX conversation                 *
*                                                                     *
*---------------------------------------------------------------------*
         MVI   MSTRCMD,$MSTRRD       SET MASTER FILE COMMAND (READ)
         MVC   MSTRREC#,CONVREC#     SET MASTER FILE RECORD NUMBER
         BAL   R3,MSTR0000           READ MASTER FILE RECORD
         LA    R5,MSTRRECD           MASTER FILE RECORD DATA ADDRESS
         USING REQBLOK,R5            DEFINE BASE
         SR    R1,R1                 CLEAR REGISTER
         ICM   R1,3,REQNDE#          NUMBER OF NODES IN TRANSMIT LIST
         LA    R4,REQNDENM           FIRST NODE NAME IN TRAMSMIT LIST
         USING REQNDENM,R4           DEFINE BASE
LOSS0030 DS    0H
         CLC   REQNDENM,SESSNAME     SENDING TO THIS NODE?
         BE    LOSS0040              YES
         LA    R4,REQNDEL(R4)        NEXT NODE
         BCT   R1,LOSS0030           LOOP
         ABEND $U0066,DUMP,,USER
LOSS0040 DS    0H
         CLI   REQNDEST,0            ALREADY BEEN RESET?
         BE    LOSS0170              DELETE THIS CONVERSATION BLOCK
         CLI   REQNDEST,$REQNDET     TRANSMITTING?
         BE    LOSS0050              YES
         CLI   REQNDEST,$REQNDEC     TRANSMISSION COMPLETE?
         BE    LOSS0050              YES
         ABEND $U0067,DUMP,,USER
*---------------------------------------------------------------------*
*                                                                     *
*        A file transmission was lost.                                *
*                                                                     *
*        1) Find the node's name in the node list.                    *
*        2) If the last function was a BSAM read, issue a wait.       *
*        3) Close the DCB used to read the staging dataset.           *
*        4) Deallocate the staging dataset.                           *
*        5) Reset the node's status to 'initial'.                     *
*        6) Print the 'transmission lost' message.                    *
*        7) Delete the conversation block.                            *
*                                                                     *
*---------------------------------------------------------------------*
LOSS0050 DS    0H
         ITRACE ID=XMITLOST,         FILE TRANSMISSION WAS LOST        +
               RDATA1=R7,            .. SESSION BLOCK'S ADDRESS        +
               RDATA2=R6             .. CONVERSATION BLOCK'S ADDRESS
         CLI   REQNDEST,$REQNDEC     TRANSMISSION COMPLETE?
         BE    LOSS0075              YES
         CLI   CONVFUNC,$CONVFB      LAST FUNCTION A 'READ'?
         BNE   LOSS0060              NO
         L     R1,CONVDECB           DECB'S ADDRESS
         TM    0(R1),X'40'           HAS READ COMPLETED?
         BO    LOSS0060              YES
         WAIT  1,ECB=(1)             WAIT FOR THE I/O TO COMPLETE
LOSS0060 DS    0H
         L     R2,CONVDCB            DCB'S ADDRESS
         USING IHADCB,R2             DEFINE BASE
         OC    DCBDDNAM,DCBDDNAM     WAS DCB EVER INITIALIZED?
         BZ    LOSS0070              NO.. SKIP CLOSE AND RELEASE
         ITRACE ID=XMITCLOS          CLOSE THE DCB
         ST    R2,DCB24              SET DCB'S ADDRESS
         FX24  $CLOSE                CLOSE THE DCB
         FXCALL FXSDAIR,RELEASE,,    RELEASE THE DATASET               +
               DCBDDNAM              .. DDNAME TO RELEASE
         OC    DAIRR15,DAIRR15       RELEASE SUCCESSFUL?
         BNZ   ERR0010               NO
LOSS0070 DS    0H
         MVI   REQNDEST,$REQNDEI     RESET STATUS
         MVC   PRTMSGID(MSG01L),MSG01
         MVC   PRTMSGID+(MSG01NDE-MSG01)(L'MSG01NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG01NBR-MSG01)(L'MSG01NBR),DXDDWORD+4
         BAL   R3,PRT0000            QUEUE MESSAGE TO PRINT
         MVI   MSTRCMD,$MSTRWRT      SET MASTER FILE COMMAND (WRITE)
         BAL   R3,MSTR0000           UPDATE MASTER FILE RECORD
         B     LOSS0170              DELETE THIS CONVERSATION BLOCK
LOSS0075 DS    0H
         MVC   PRTMSGID(MSG03L),MSG03
         MVC   PRTMSGID+(MSG03NDE-MSG03)(L'MSG03NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG03NBR-MSG03)(L'MSG03NBR),DXDDWORD+4
         BAL   R3,PRT0000            QUEUE MESSAGE TO PRINT
         B     LOSS0170              DELETE THIS CONVERSATION BLOCK
         DROP  R4
*---------------------------------------------------------------------*
*                                                                     *
*        A dataset receive was interrupted.                           *
*                                                                     *
*        1) If the last function was a BSAM write, issue a WAIT.      *
*        2) Close the DCB used to write to the staging dataset.       *
*        3) If no checkpoints have been taken:                        *
*             a) delete the stage data set                            *
*             b) reset master file record to "FREE" status            *
*           If checkpoints have been taken:                           *
*             set master file status to "INITIAL".                    *
*        4) Print the 'RECEIVE LOST' message.                         *
*        5) Delete the conversation block.                            *
*                                                                     *
*---------------------------------------------------------------------*
LOSS0080 DS    0H
         ITRACE ID=RECVLOST,         A DATASET RECEIVE WAS LOST        +
               RDATA1=R7,            .. SESSION BLOCK'S ADDRESS        +
               RDATA2=R6             .. CONVERSATION BLOCK'S ADDRESS
         MVI   MSTRCMD,$MSTRRD       SET MASTER FILE COMMAND (READ)
         MVC   MSTRREC#,CONVREC#     SET MASTER FILE RECORD NUMBER
         BAL   R3,MSTR0000           READ MASTER FILE RECORD
         LA    R5,MSTRRECD           MASTER FILE RECORD DATA ADDRESS
         USING REQBLOK,R5            DEFINE BASE
         CLI   REQSTAT,$REQRECV      DATASET BEING RECEIVED?
         BE    LOSS0090              YES
         CLI   CONVFUNC,0            ANY FUNCTION EVER STARTED?
         BE    LOSS0170              NO.. LOST BEFORE RECEIVE BEGAN
         ABEND $U0068,DUMP,,USER
LOSS0090 DS    0H
         MVC   PRTMSGID(MSG02L),MSG02
         MVC   PRTMSGID+(MSG02NDE-MSG02)(L'MSG02NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG02NBR-MSG02)(L'MSG02NBR),DXDDWORD+4
         BAL   R3,PRT0000            QUEUE MESSAGE TO PRINT
         CLI   CONVFUNC,$CONVFB      LAST FUNCTION A BSAM WRITE?
         BNE   LOSS0100              NO
         L     R1,CONVDECB           DECB'S ADDRESS
         TM    0(R1),X'40'           WRITE COMPLETED?
         BO    LOSS0100              YES
         WAIT  1,ECB=(1)             ISSUE A WAIT
LOSS0100 DS    0H
         L     R2,CONVDCB            DCB'S ADDRESS
         USING IHADCB,R2             DEFINE BASE
         OC    DCBDDNAM,DCBDDNAM     WAS DCB EVER INITIALIZED?
         BZ    LOSS0140              NO
         ITRACE ID=RECVCLOS          CLOSING DCB
         ST    R2,DCB24              SET DCB'S ADDRESS
         FX24  $CLOSE                CLOSE THE DCB
         SR    R1,R1                 CLEAR REGISTER
         ICM   R1,3,REQNDE#          NUMBER OF NODES IN TRANSMIT LIST
         LA    R4,REQNDENM           FIRST NODE NAME IN TRAMSMIT LIST
         USING REQNDENM,R4           DEFINE BASE
LOSS0110 DS    0H
         CLC   REQNDENM,COMMAPLN     IS THIS US?
         BE    LOSS0120              YES
         LA    R4,REQNDEL(R4)        NEXT NODE
         BCT   R1,LOSS0110           LOOP
         ABEND $U0112,DUMP,,USER
LOSS0120 DS    0H
         OC    REQNDECR,REQNDECR     CHECKPOINT DATA PRESENT?
         BZ    LOSS0130              NO
         MVI   REQNDEST,$REQNDEI     RESET TO 'INITIAL' STATE
         B     LOSS0150              UPDATE MASTER FILE RECORD
         DROP  R4
LOSS0130 DS    0H
         FXCALL FXSDAIR,DELETE,,     DELETE THE DATASET                +
               DCBDDNAM,             .. DDNAME                         +
               REQWDSNM              .. DATASET NAME
         OC    DAIRR15,DAIRR15       DELETE SUCCESSFUL?
         BNZ   ERR0020               NO
LOSS0140 DS    0H
         MINIT COMMBLKS,P0,$REQFREE,R14 RESET MASTER FILE STATUS
LOSS0150 DS    0H
         MVI   MSTRCMD,$MSTRWRT      SET MASTER FILE COMMAND (WRITE)
         BAL   R3,MSTR0000           UPDATE MASTER FILE RECORD
         B     LOSS0170              DELETE THIS CONVERSATION BLOCK
*---------------------------------------------------------------------*
*                                                                     *
*        A user session was lost.                                     *
*                                                                     *
*        No clean-up is needed for user sessions.                     *
*                                                                     *
*---------------------------------------------------------------------*
LOSS0160 DS    0H
         ITRACE ID=USERLOST,         USER SESSION LOST (OR DEALLOCATED)+
               RDATA1=R7,            .. SESSION BLOCK'S ADDRESS        +
               RDATA2=R6             .. CONVERSATION BLOCK'S ADDRESS
*---------------------------------------------------------------------*
*                                                                     *
*        Delete the conversation block.                               *
*                                                                     *
*---------------------------------------------------------------------*
LOSS0170 DS    0H
         ITRACE ID=DELCONV,          DELETING THE CONVERSATION BLOCK   +
               RDATA1=R6             .. CONVBLOK'S ADDRESS
         FXCALL FXSCONV,DELETE,      DELETE A CONVERSATION BLOCK       +
               (R6),                 .. CONVBLOK'S ADDRESS             +
               (R7)                  .. ASSOCIATED SESSBLOK'S ADDRESS
         B     LOSS0020              PROCESS NEXT CONVERSATION
*---------------------------------------------------------------------*
*                                                                     *
*        All conversations for this session have been cleaned-up      *
*        and the CONVBLOK's have been deleted.  Now if the session    *
*        was for a FX-TO-FX link, reset the '$SESSPND' flag.    If    *
*        the session was for a user session, delete the SESSBLOK.     *
*                                                                     *
*---------------------------------------------------------------------*
LOSS0200 DS    0H
         MVC   VTAMSESS,SESSNEXT     SET NEXT SESSION BLOCK'S ADDRESS
         CLI   SESSTYPE,$SESSUSR     USER SESSION?
         BE    LOSS0210              YES
         NI    SESSSTAT,255-$SESSPND RESET 'PENDING' FLAG
         B     EXIT0010              AND EXIT
LOSS0210 DS    0H
         ITRACE ID=DELSESS,          DELETING A SESSION BLOCK          +
               DATA1=SESSNAME,       .. LU'S NAME                      +
               RDATA2=R7             .. SESSION BLOCK'S ADDRESS
         FXCALL FXSSESS,DELETE,SESSNAME  DELETE THE SESSION BLOCK
         B     EXIT0010              AND EXIT
*---------------------------------------------------------------------*
*        ERROR SITUATIONS                                             *
*---------------------------------------------------------------------*
ERR0010  DS    0H
         ITRACE ID=STGERELF,         STAGE FILE RELEASE FAILED         +
               DATA1=DAIRR15         .. ERROR CODES
         ABEND $U0069,DUMP,,USER
ERR0020  DS    0H
         ITRACE ID=STGEDELF,         STAGE FILE RELEASE FAILED         +
               DATA1=DAIRR15         .. ERROR CODES
         ABEND $U0070,DUMP,,USER
* ------------------------------------------------------------------- *
*                                                                     *
*        Read or write master file records                            *
*                                                                     *
* ------------------------------------------------------------------- *
MSTR0000 DS    0H
         ITRACE ID=MSTRIO
         FXCALL FXSMSTR              LINK TO MASTER FILE I/O
         BR    R3                    RETURN
* ------------------------------------------------------------------- *
*                                                                     *
*        PRINT                                                        *
*                                                                     *
* ------------------------------------------------------------------- *
PRT0000  DS    0H
         ITRACE ID=PRINT
         FXCALL PRTQ,PRINT           ADD REQUEST TO PRINT QUEUE
         BR    R3                    DONE
* ------------------------------------------------------------------- *
*                                                                     *
*        EXIT                                                         *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         FREEMAIN RU,A=(9),LV=FX24L FREEMAIN 24-BIT WORK AREA
EXIT0010 DS    0H
         ITRACE ID=EXIT
         L     R13,4(R13)            CALLER'S SAVE AREA ADDRESS
         LM    R14,R12,12(R13)       RESTORE CALLER'S REGISTERS
         SR    R15,R15               ALWAYS A GOOD RETURN CODE
         BR    R14                   RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSTART DC    Q(DXDSLOSS)           DISPLACEMENT TO WORK AREA
P0       DC    P'0'
MSG01    DS    0C
         DC    CL11'FXSLOSS01I'
         DC    C'TRANSMISSION REQUEST '
MSG01NDE DC    CL8' '
MSG01NBR DC    XL8'4021202020202020'
         DC    C' INTERRUPTED BY LOSS OF VTAM CONVERSATION'
MSG01L   EQU   *-MSG01
MSG02    DS    0C
         DC    CL11'FXSLOSS02I'
         DC    C'RECEIVE OF REQUEST '
MSG02NDE DC    CL8' '
MSG02NBR DC    XL8'F021202020202020'
         DC    C' INTERRUPTED BY LOSS OF VTAM CONVERSATION'
MSG02L   EQU   *-MSG02
MSG03    DS    0C
         DC    CL11'FXSLOSS03I'
         DC    C'TRANSMISSION LOST AFTER TRANSMISSION COMPLETED '
MSG03NDE DC    CL8' '
MSG03NBR DC    XL8'F021202020202020'
MSG03L   EQU   *-MSG03
* ------------------------------------------------------------------- *
*              WORK AREA                                              *
* ------------------------------------------------------------------- *
DXDSLOSS DSECT
DXDID    DS   CL8                    WORK AREA OWNER EYECATCHER
DXDSAVE  DS   18F                    REGISTER SAVE AREA
DXDDWORD DS   D                      CVD/CVB WORK AREA
DXD24    DS   A                      24-BIT PARM AREA ADDRESS
         PRTBLOK  DSECT=NO
         MSTRREQ  DSECT=NO
         DAIRREQ  DSECT=NO
         SESSREQ  DSECT=NO
         CONVREQ  DSECT=NO
* ------------------------------------------------------------------- *
*              COMMON DATA MAP                                        *
* ------------------------------------------------------------------- *
         VTAMBLOK DSECT=YES
* ------------------------------------------------------------------- *
*              COMMON DATA MAP                                        *
* ------------------------------------------------------------------- *
         FXSCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*              24-BIT MODULE PARAMETER BLOCK                          *
* ------------------------------------------------------------------- *
         FX24PRM DSECT=YES
* ------------------------------------------------------------------- *
*              VTAM SESSION BLOCK                                     *
* ------------------------------------------------------------------- *
         SESSBLOK DSECT=YES
* ------------------------------------------------------------------- *
*              VTAM CONVERSATION BLOCK                                *
* ------------------------------------------------------------------- *
         CONVBLOK DSECT=YES
* ------------------------------------------------------------------- *
*              MASTER FILE RECORD                                     *
* ------------------------------------------------------------------- *
         REQBLOK  DSECT=YES
* ------------------------------------------------------------------- *
*              DCB                                                    *
* ------------------------------------------------------------------- *
         DCBD   DSORG=PS
* ------------------------------------------------------------------- *
*                                                                     *
*              EQUATES                                                *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY REGEQU
         ABCODES
         END  FXSLOSS
./ ADD NAME=FXSMAIN  0100-99056-99056-1500-00875-00875-00000-FX-REL1

* ------------------------------------------------------------------- *
*                                                                     *
*  Name: FXSMAIN                                                      *
*                                                                     *
*  Purpose: STC Mainline                                              *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY  OPTIONS
FXSMAIN  CSECT
FXSMAIN  AMODE 31
FXSMAIN  RMODE ANY
         USING FXSMAIN,R12,R9       DEFINE BASE
         STM   R14,R12,12(R13)      SAVE ENTRY REGISTERS
         LR    R12,R15              COPY BASE
         LA    R9,2048(R12)         SET 2ND..
         LA    R9,2048(R9)          .. BASE REGISTER
         B     @@000001             BRANCH AROUND EYECATCHER
         DC    ((PFXMODNM-MODPRFX)-(*-FXSMAIN))X'00'
MODID    DC    CL8'FXSMAIN'         MODULE NAME
         DC    CL8'&SYSDATE'        DATE OF ASSEMBLY
         DC    CL6'&SYSTIME'        TIME OF ASSEMBLY
@@000001 DS    0H
* ------------------------------------------------------------------- *
*        ACQUIRE STORAGE FOR WORK AREAS                               *
* ------------------------------------------------------------------- *
         L     R3,DXDSIZE           WORK AREA SIZE
         GETMAIN RU,                ACQUIRE WORK AREA STORAGE          +
               LV=(R3),             .. WORK AREA SIZE IS IN R3         +
               LOC=ANY              .. MAY BE ABOVE OR BELOW
         LR    R4,R1                COPY STORAGE ADDRESS
         LR    R10,R1               COPY STORAGE ADDRESS
         LR    R2,R1                COPY WORK AREA ADDRESS
         SR    R1,R1                CLEAR REGISTER
         MVCL  R2,R0                CLEAR WORK AREA
         A     R10,DXDSTART         PLUS DISPLACEMENT TO OUR PORTION
         USING DXDSMAIN,R10         DEFINE WORK AREA BASE
         MVC   DXDID,MODID          IDENTIFY WORK AREA OWNER
         LA    R2,DXDSAVE           OUR SAVE AREA ADDRESS
         ST    R13,4(R2)            CHAIN CALLER'S SAVE AREA TO OURS
         ST    R2,8(R13)            OUR SAVE AREA TO CALLER'S
         LR    R13,R2               SET SAVE AREA ADDRESS
* ------------------------------------------------------------------- *
*        Load common data module  (FXSCOMM)                           *
* ------------------------------------------------------------------- *
         LOAD  EP=FXSCOMM           LOAD COMMON DATA MODULE
         LR    R11,R0               COPY TO PERMANENT BASE
         USING FXSCOMM,R11          DEFINE COMMON AREA BASE
         ST    R12,AMAIN            SET MAINLINE'S ADDRESS IN COMMON
         ST    R4,COMMDXDA          SET DYNAMIC WORK AREA ADDRESS
* ------------------------------------------------------------------- *
*        Load master file I/O module (FXSMSTR)                        *
* ------------------------------------------------------------------- *
         LOAD  EP=FXSMSTR           LOAD MASTER FILE I/O MODULE
         ST    R0,AMSTR             SET ADDRESS IN COMMON AREA
         MVC   AATTN,VATTN          SET VTAM ATTN EXIT ADDRESS
         MVC   ACONV,VCONV          SET CONVBLOK ADD/DELETE ADDRESS
         MVC   ACONS,VCONS          SET CONSOLE COMMUNICATION ADDR
         MVC   ADAIR,VDAIR          SET DAIR MODULE ADDRESS
         MVC   ALERAD,VLERAD        SET LERAD EXIT ADDRESS
         MVC   ALOSS,VLOSS          SET VTAM LOSS CLEAN-UP ADDRESS
         MVC   APRTQ,VPRTQ          SET PRINTER QUEUEING MODULE ADDR
         MVC   ARECV,VRECV          SET FILE RECEIVE MODULE ADDRESS
         MVC   AREQE,VREQE          SET REQUEST ENTRY PROCESSOR
         MVC   AREQI,VREQI          SET REQUEST INQUIRY PROCESSOR
         MVC   ARPLX,VRPLX          SET RPL EXIT ADDRESS
         MVC   ASEND,VSEND          SET FILE SEND MODULE ADDRESS
         MVC   ASESS,VSESS          SET SESSION BLOCK ADD/DELETE
         MVC   ASHUT,VSHUT          SET STARTED TASK SHUTDOWN ADDR
         MVC   ASTGE,VSTGE          SET STAGE/DESTAGE MODULE ADDRESS
         MVC   ATIMER,VTIMER        SET TIMER EXIT ADDRESS
         MVC   AUID,VUID            SET USER IDENTIFICATION
         MVC   AVTAM,VVTAM          SET VTAM MODULE ADDRESS
         MVC   AVSUB,VVSUB          SET VTAM SUB-FUNCTION MODULE ADDR
         MVC   AVTOC,VVTOC          SET VTOC MODULE ADDRESS
* ------------------------------------------------------------------- *
*        LOAD 24-BIT MODE MODULE  (FXS24)                             *
* ------------------------------------------------------------------- *
         LOAD  EP=FX24              24-BIT MODE MODULE
         ST    R0,A24               SET ADDRESS IN COMMON MODULE
* ------------------------------------------------------------------- *
*        ACQUIRE STORAGE FOR TRACE TABLE                              *
* ------------------------------------------------------------------- *
         L     R3,TRSIZE            TRACE TABLE SIZE
         GETMAIN RU,                ACQUIRE STORAGE FOR TRACE TABLE    +
               LV=(R3),             .. SIZE IS IN R3                   +
               LOC=ANY              .. MAY BE ABOVE OR BELOW
         ST    R1,TRADDR            SAVE TRACE TABLE STORAGE ADDRESS
         SR    R0,R0                ASSUME ON A 32-BYTE BOUNDARY
         TM    TRADDR+3,X'07'       ALREADY ON 32-BYTE BOUNDARY?
         BNO   INIT0010             YES
         SRL   R1,5                 SHIFT OUT LOW BITS ..
         SLL   R1,5                 .. TO ROUND TO 32-BYTE BOUNDARY
         LA    R1,32(R1)            PLUS 32
         LA    R0,TRENTRYL          1 LESS TRACE ENTRY AVAILABLE
INIT0010 DS    0H
         ST    R1,TRFIRST           FIRST TRACE ENTRY
         ST    R1,TRCURR            CURRENT TRACE ENTRY
         A     R1,TRSIZE            LAST ENTRY IN TABLE
         SH    R1,=Y(TRENTRYL)      MINUS 1 ENTRY
         SR    R1,R0                MINUS 1 MORE IF NECESSARY
         ST    R1,TRLAST            LAST TRACE ENTRY ADDRESS
* ------------------------------------------------------------------- *
*        Determine DD's present                                       *
* ------------------------------------------------------------------- *
         USING PSA,R0               DEFINE BASE
         L     R1,PSATNEW           OUR TCB ADDRESS FROM PSA
         USING TCB,R1               DEFINE TCB BASE
         L     R2,TCBTIO            TIOT ADDRESS FROM OUR TCB
         USING TIOT1,R2             DEFINE TIOT BASE
         LA    R3,TIOENTRY          FIRST TIOT ENTRY
         USING TIOENTRY,R3          DEFINE TIOT ENTRY BASE
         SR    R4,R4                CLEAR FOR LENGTHS
INIT0020 DS    0H
         ICM   R4,1,TIOELNGH        LENGTH OF THIS ENTRY
         BZ    INIT0060             END OF TABLE
         ITRACE ID=TIOTDDNM,        TRACE EACH TIOT ENTRY              +
               DATA1=TIOEDDNM
         LA    R5,DDTBLE            REQUIRED DDNAMES TABLE
         USING DDDSECT,R5           DEFINE BASE
INIT0030 DS    0H
         CLI   0(R5),X'FF'          END OF TABLE?
         BE    INIT0050             YES, NOT IN TABLE
         CLC   TIOEDDNM,DDNAME      DD NAME FOUND?
         BE    INIT0040             YES
         LA    R5,DDL(R5)           NEXT DD
         B     INIT0030             LOOP
INIT0040 DS    0H
         ITRACE ID=SETDDID,         SETTING DD ID                      +
               DATA1=TIOEDDNM,      .. DDNAME                          +
               DATA2=DDID           .. FLAG VALUE
         OC    DXDDD,DDID           TURN ON MATCHING ID
INIT0050 DS    0H
         AR    R3,R4                NEXT ENTRY
         B     INIT0020             LOOP
INIT0060 DS    0H
         ITRACE ID=TIOTDONE,        TIOT SCAN COMPLETE                 +
               DATA1=DXDDD          .. INCLUDE FLAG BYTE
         TM    DXDDD,X'40'          PRINT DD PRESENT?
         BO    INIT0070             YES
         GETMAIN RU,                ACQUIRE STORAGE FOR WTO            +
               LV=WTO01L,           .. STORAGE SIZE REQUIRED           +
               LOC=BELOW            .. FROM BELOW THE LINE
         LR    R2,R1                COPY STORAGE ADDRESS
         MVC   0(WTO01L,R2),WTO01   COPY WTO
         WTO   MF=(E,(R2))          ISSUE WTO
         FREEMAIN RU,A=(R2),LV=WTO01L
         ABEND $U0062,DUMP,,USER
* ------------------------------------------------------------------- *
*        ATTACH print sub-task                                        *
* ------------------------------------------------------------------- *
INIT0070 DS    0H
         MVC   DXDATTCH(ATTCHL),ATTCHI
         MVC   DXDTASK,PRINT        TASK BEING ATTACHED
         LA    R2,PRTTERM           TERMINATION ECB'S ADDRESS
         LA    R3,DXDAPARM          PARM LIST ADDRESS
         ITRACE ID=ATCHPRT          ATTACHING PRINT SUBTASK
         ATTACH EP=FXSPRTS,         ATTACH PRINT SUBTASK               +
               PARAM=((R11)),       .. PARAMETER IS COMMON MODULE ADDR +
               ECB=(R2),            .. TERMINATION ECB'S ADDRESS       +
               PURGE=QUIESCE,       .. FINISH UP I/O IN PROGRESS       +
               MF=(E,(R3)),         .. SUBTASK PARM LIST               +
               SF=(E,DXDATTCH)      .. EXECUTE FORM, LIST FORM ADDRESS
         LTR   R15,R15              ATTACH SUCCESSFUL?
         BNZ   ERR0030              NO
         ST    R1,COMMPRT           SET TCB'S ADDRESS IN COMMON
         ITRACE ID=PRTOK,           PRINT SUBTASK ATTACH SUCCESSFUL    +
               RDATA1=R1            .. INCLUDE TCB ADDRESS IN TRACE
         OI    COMMFLAG,$COMMPRT    PRINT SUBTASK IS ACTIVE
* ------------------------------------------------------------------- *
*        Print start-up messages                                      *
* ------------------------------------------------------------------- *
         MVI   PRTCC,C' '           SINGLE SPACE
         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC
         FXCALL PRTQ,HEADING        ADD HEADING REQUEST TO QUEUE
         MVC   PRTMSGID(MSG02L),MSG02
         BAL   R8,PRT0000           PRINT MESSAGE
         MVC   PRTMSGID(MSG03L),MSG03
         BAL   R8,PRT0000           PRINT MESSAGE
* ------------------------------------------------------------------- *
*        Make sure all required DD's are present                      *
* ------------------------------------------------------------------- *
         LA    R5,DDTBLE            FIRST DDNAME
         SR    R2,R2                CLEAR REGISTER
INIT0080 DS    0H
         TM    DDFLAG,$DDREQ        IS THIS A REQUIRED DD?
         BNO   INIT0090             NO
         IC    R2,DDID              INSERT DD ID
         EX    R2,DDTM              IS DD PRESENT?
         BO    INIT0090             YES
         MVC   PRTMSGID(MSG04L),MSG04
         MVC   PRTMSGID+(MSG04D-MSG04)(L'MSG04D),DDNAME
         BAL   R8,PRT0000           PRINT MESSAGE
         OI    COMMFLAG,$ABORT      SET ABORT FLAG
INIT0090 DS    0H
         LA    R5,DDL(R5)           NEXT DD
         CLI   0(R5),X'FF'          END OF TABLE?
         BNE   INIT0080             NO
         TM    COMMFLAG,$ABORT      ABORT FLAG SET?
         BNO   INIT0100             NO
         MVC   PRTMSGID(MSG05L),MSG05
         BAL   R8,PRT0000           PRINT MESSAGE
         B     EXIT0000             EXIT
DDTM     TM    DXDDD,X'00'          TEST FOR PRESENCE OF DD
* ------------------------------------------------------------------- *
*        ATTACH external trace subtask if FXSXTR DD was present       *
* ------------------------------------------------------------------- *
INIT0100 DS    0H
         TM    DXDDD,X'04'          EXTERNAL TRACE (FXSXTR) DD PRESENT?
         BNO   INIT0110             NO
         MVC   DXDATTCH(ATTCHL),ATTCHI
         MVC   DXDTASK,XTR          TASK BEING ATTACHED
         LA    R2,XTRTERM           TERMINATION ECB'S ADDRESS
         LA    R3,DXDAPARM          PARM LIST ADDRESS
         ITRACE ID=ATCHXTR          ATTACHING EXTERNAL TRACE SUBTASK
         ATTACH EP=FXSXTR,          ATTACH EXTERNAL TRACE SUBTASK      +
               PARAM=((R11)),       .. PARAMETER IS COMMON MODULE ADDR +
               ECB=(R2),            .. TERMINATION ECB'S ADDRESS       +
               PURGE=QUIESCE,       .. FINISH UP I/O IN PROGRESS       +
               MF=(E,(R3)),         .. SUBTASK PARM LIST               +
               SF=(E,DXDATTCH)      .. EXECUTE FORM, LIST FORM ADDRESS
         LTR   R15,R15              ATTACH SUCCESSFUL?
         BNZ   ERR0030              NO
         ST    R1,COMMXTR           SET TCB'S ADDRESS IN COMMON
         ITRACE ID=XTROK,           EXTERNAL TRACE ATTACH SUCCESSFUL   +
               RDATA1=R1            .. INCLUDE TCB ADDRESS IN TRACE
         OI    XTRFLAG,$XTR         EXTERNAL TRACE SUBTASK IS ACTIVE
         MVC   PRTMSGID(MSG06L),MSG06
         BAL   R8,PRT0000           PRINT MESSAGE
* ------------------------------------------------------------------- *
*        Call parameter interpreter                                   *
* ------------------------------------------------------------------- *
INIT0110 DS    0H
         LOAD  EP=FXSPARM           LOAD PARM CONVERTER
         LR    R15,R0               PARAMETER MODULE ENTRY POINT
         BALR  R14,R15              LINK TO PARAMETER INTERPRETER
         DELETE EP=FXSPARM          DELETE PARAMETER CONVERTER
         TM    COMMFLAG,$ABORT      ERRORS IN PARAMETERS?
         BO    ERR0010              YES
* ------------------------------------------------------------------- *
*        Call VTOC module to determine staging device characteristics *
* ------------------------------------------------------------------- *
         MVI   VTOCCMD,$VTOCDEV     SET COMMAND
         LA    R1,VTOCREQ           INTERFACE BLOCK'S ADDRESS
         L     R15,AVTOC            VTOC MODULE ENTRY POINT
         BALR  R14,R15              LINK TO VTOC MODULE
* ------------------------------------------------------------------- *
*        Open master file                                             *
* ------------------------------------------------------------------- *
         ITRACE ID=OPENMSTR
         FXCALL FXSMSTR,OPEN        OPEN MASTER FILE
* ------------------------------------------------------------------- *
*        Call master file initialization                              *
* ------------------------------------------------------------------- *
         LOAD  EP=FXSMINIT          LOAD MASTER FILE INITIALIZATION
         LR    R15,R0               COPY ENTRY POINT
         BALR  R14,R15              LINK TO MASTER FILE INITIALIZATION
         DELETE EP=FXSMINIT         DELETE MASTER FILE INITIALIZER
         TM    COMMFLAG,$ABORT      ABORT FLAG SET?
         BO    ERR0060              YES
         MVC   PRTMSGID(MSG07L),MSG07
         BAL   R8,PRT0000           PRINT MESSAGE
* ------------------------------------------------------------------- *
*        ATTACH DF/DSS dump/restore sub-task                          *
* ------------------------------------------------------------------- *
         LA    R2,DSSTERM           TERMINATION ECB'S ADDRESS
         LA    R3,DXDAPARM          PARM LIST ADDRESS
         ITRACE ID=ATCHDSS          ATTACHING DF/DSS SUBTASK
         MVC   DXDTASK,DFDSS        TASK BEING ATTACHED
         ATTACH EP=FXSDSS,          ATTACH DF/DSS SUBTASK              +
               PARAM=((R11)),       .. PARAMETER IS COMMON MODULE ADDR +
               ECB=(R2),            .. TERMINATION ECB'S ADDRESS       +
               PURGE=QUIESCE,       .. FINISH UP I/O IN PROGRESS       +
               MF=(E,(R3)),         .. SUBTASK PARM LIST               +
               SF=(E,DXDATTCH)      .. EXECUTE FORM, LIST FORM ADDRESS
         LTR   R15,R15              ATTACH SUCCESSFUL?
         BNZ   ERR0030              NO
         ST    R1,COMMDSS           SET TCB'S ADDRESS IN COMMON
         ITRACE ID=DSSOK,           DF/DSS SUBTASK ATTACH SUCCESSFUL   +
               RDATA1=R1            .. INCLUDE TCB ADDRESS IN TRACE
         OI    COMMFLAG,$COMMDSS    DF/DSS SUBTASK ACTIVE
         MVC   PRTMSGID(MSG08L),MSG08
         BAL   R8,PRT0000           PRINT MESSAGE
* ------------------------------------------------------------------- *
*        ATTACH IEBCOPY dump/restore sub-task                         *
* ------------------------------------------------------------------- *
         LA    R2,COPYTERM          TERMINATION ECB'S ADDRESS
         LA    R3,DXDAPARM          PARM LIST ADDRESS
         ITRACE ID=ATCHCOPY         ATTACHING IEBCOPY SUBTASK
         MVC   DXDTASK,IEBCOPY      TASK BEING ATTACHED
         ATTACH EP=FXSCOPY,         ATTACH IEBCOPY SUBTASK             +
               PARAM=((R11)),       .. PARAMETER IS COMMON MODULE ADDR +
               ECB=(R2),            .. TERMINATION ECB'S ADDRESS       +
               PURGE=QUIESCE,       .. FINISH UP I/O IN PROGRESS       +
               MF=(E,(R3)),         .. SUBTASK PARM LIST               +
               SF=(E,DXDATTCH)      .. EXECUTE FORM, LIST FORM ADDRESS
         LTR   R15,R15              ATTACH SUCCESSFUL?
         BNZ   ERR0030              NO
         ST    R1,COMMCOPY          SET TCB'S ADDRESS IN COMMON
         ITRACE ID=COPYOK,          IEBCOPY SUBTASK ATTACH SUCCESSFUL  +
               RDATA1=R1            .. INCLUDE TCB ADDRESS IN TRACE
         OI    COMMFLAG,$COMMCPY    IEBCOPY SUBTASK IS ACTIVE
         MVC   PRTMSGID(MSG09L),MSG09
         BAL   R8,PRT0000           PRINT MESSAGE
         L     R15,ACONS            CONSOLE COMMUNCATION ENTRY POINT
         BALR  R14,R15              ALLOW CONSOLE MODULE TO INITIALIZE
         GETMAIN RU,                ACQUIRE STORAGE FOR WTO            +
               LV=WTO14L,           .. STORAGE SIZE REQUIRED           +
               LOC=BELOW            .. FROM BELOW THE LINE
         LR    R2,R1                COPY STORAGE ADDRESS
         MVC   0(WTO14L,R2),WTO14   COPY WTO
         WTO   MF=(E,(R2))          ISSUE WTO
         FREEMAIN RU,A=(R2),LV=WTO14L
* ------------------------------------------------------------------- *
*        Call console communication                                   *
* ------------------------------------------------------------------- *
PROC0000 DS    0H
         L     R1,COMMCECB          COMMUNICATION ECB
         ITRACE ID=CALLCONS,        TRACE CONSOLE ECB                  +
               DATA1=0(R1)
         TM    0(R1),X'40'          ECB POSTED?
         BNO   PROC0010             NO
         L     R15,ACONS            CONSOLE MODULE ENTRY POINT
         BALR  R14,R15              LINK TO FXSCONS
* ------------------------------------------------------------------- *
*        Call stage/destage                                           *
* ------------------------------------------------------------------- *
PROC0010 DS    0H
         POST  XTRWORK              POST EXTERNAL TRACE SUBTASK
         ITRACE ID=CALLSTGE         CALL STAGE/DE-STAGE
         L     R15,ASTGE            STAGE/DE-STAGE ENTRY POINT
         BALR  R14,R15              LINK TO STAGE/DE-STAGE
* ------------------------------------------------------------------- *
*        Call VTAM module                                             *
* ------------------------------------------------------------------- *
         ITRACE ID=CALLVTAM         CALL VTAM MODULE
         POST  XTRWORK              POST EXTERNAL TRACE SUBTASK
         TM    COMMEOJ,$EOJ1        SHUTDOWN STARTED?
         BNO   PROC0020             NO
         OI    COMMEOJ,$EOJ2        ASSUME NO ACTIVITY IN PROGRESS
PROC0020 DS    0H
         L     R15,AVTAM            VTAM MODULE ENTRY POINT
         BALR  R14,R15              LINK TO VTAM MODULE
         TM    COMMFLAG,$ABORT      ABORT FLAG SET?
         BO    ERR0050              YES
         TM    COMMEOJ,$EOJ2        SHUTDOWN PHASE 2?
         BO    EXIT0000             YES
* ------------------------------------------------------------------- *
*        Check the DF/DSS subtask, IEBCOPY subtask, and VTAM          *
*        control block chains for any work that may have completed    *
*        before issuing a wait.                                       *
* ------------------------------------------------------------------- *
PROC0030 DS    0H
         ITRACE ID=WORKSRCH
         SR    R4,R4                CLEAR FOR COUNTER
         OC    DSSREQ,DSSREQ        DF/DSS REQUEST PRESENT?
         BZ    PROC0040             NO REQUEST PRESENT
         TM    DSSECB,X'40'         ECB POSTED?
         BO    PROC0000             YES
         LA    R4,1(R4)             PLUS 1 ECB
PROC0040 DS    0H
         OC    COPYREQ,COPYREQ      IEBCOPY REQUEST PRESENT?
         BZ    PROC0050             NO REQUEST PRESENT
         TM    COPYECB,X'40'        ECB POSTED?
         BO    PROC0000             YES
         LA    R4,1(R4)             PLUS 1 ECB
PROC0050 DS    0H
         TM    COMMVECB,X'40'       ATTN EXIT ECB POSTED?
         BO    PROC0000             YES
         ICM   R7,15,COMMSESS       FIRST SESSION BLOCK
         USING SESSBLOK,R7          DEFINE BASE
         BZ    PROC0130             NO SESSIONS
PROC0060 DS    0H
         CLI   SESSSTAT,$SESSRDY    SESSION IN READY STATUS?
         BE    PROC0070             YES
         TM    SESSSTAT,$SESSPND    ANYTHING PENDING?
         BNO   PROC0120             NO
         LA    R4,1(R4)             PLUS 1 ECB
         B     PROC0120             NEXT SESSION
PROC0070 DS    0H
         ICM   R6,15,SESSCONV       FIRST CONVERSATION BLOCK
         USING CONVBLOK,R6          DEFINE BASE
         BZ    PROC0120             NO CONVERSATIONS ACTIVE
PROC0080 DS    0H
         CLI   CONVFUNC,$CONVFB     BSAM FUNCTION?
         BE    PROC0090             YES
         TM    CONVSTAT,$CONVPND    ANYTHING PENDING?
         BNO   PROC0000             NO.. MUST BE COMPLETE
         B     PROC0100             NO ECB FOR VTAM FUNCTIONS
PROC0090 DS    0H
         L     R1,CONVDECB          ECB ADDRESS
         TM    0(R1),X'40'          I/O COMPLETE?
         BO    PROC0000             YES
         LA    R4,1(R4)             PLUS 1 ECB
PROC0100 DS    0H
         ICM   R6,15,CONVNEXT       NEXT CONVERSATION'S ADDRESS
         BNZ   PROC0080             CHECK THIS CONVERSATION
PROC0120 DS    0H
         ICM   R7,15,SESSNEXT       NEXT SESSION
         BNZ   PROC0060             LOOP
* ------------------------------------------------------------------- *
*        At the present time there is no work to do.                  *
*        Build a ECB list and issue a wait.                           *
* ------------------------------------------------------------------- *
PROC0130 DS    0H
         LA    R4,3(R4)             PLUS 3 FOR TIMER, CONSOLE, AND ATTN
         ITRACE ID=WAITECBS,        NUMBER OF ECBS IN WAIT LIST        +
               RDATA1=R4
         SLL   R4,2                 MULTIPLY BY 4
         GETMAIN RU,LV=(R4)         ACQUIRE WAIT LIST STORAGE
         LR    R2,R1                COPY ADDRESS
         ICM   R14,15,COMMCECB      CONSOLE ECB
         BZ    PROC013A             NOT PRESENT
         TM    0(R14),X'40'         POSTED NOW?
         BO    PROC0240             YES..
         ST    R14,0(R1)            SET ECB ADDRESS
         LA    R1,4(R1)             NEXT ECB ADDRESS
PROC013A DS    0H
         LA    R14,COMMTECB         ECB POSTED BY TIMER EXIT
         TM    0(R14),X'40'         POSTED NOW?
         BO    PROC0240             YES
         ST    R14,0(R1)            SET ECB ADDRESS
         LA    R1,4(R1)             NEXT ECB ADDRESS
         LA    R14,COMMVECB         ECB POSTED BY ATTN EXIT
         TM    0(R14),X'40'         POSTED NOW?
         BO    PROC0240             YES
         ST    R14,0(R1)            SET ECB ADDRESS
         LA    R1,4(R1)             NEXT ECB ADDRESS
         OC    DSSREQ,DSSREQ        DF/DSS REQUEST PRESENT?
         BZ    PROC0140             NO DF/DSS REQUEST IN PROGRESS
         LA    R14,DSSECB           ECB'S ADDRESS
         TM    0(R14),X'40'         POSTED NOW?
         BO    PROC0240             YES
         ST    R14,0(R1)            SET ADDRESS IN WAIT LIST
         LA    R1,4(R1)             NEXT ECB ADDRESS
PROC0140 DS    0H
         OC    COPYREQ,COPYREQ      IEBCOPY REQUEST PRESENT?
         BZ    PROC0150             NO IEBCOPY REQUEST IN PROGRESS
         LA    R14,COPYECB          ECB'S ADDRESS
         TM    0(R14),X'40'         POSTED NOW?
         BO    PROC0240             YES
         ST    R14,0(R1)            SET ADDRESS IN WAIT LIST
         LA    R1,4(R1)             NEXT ECB ADDRESS
PROC0150 DS    0H
         ICM   R7,15,COMMSESS       FIRST SESSION BLOCK
         BZ    PROC0230             NO SESSIONS
PROC0160 DS    0H
         CLI   SESSSTAT,$SESSRDY    SESSION IN READY STATUS?
         BNE   PROC0220             NO
PROC0170 DS    0H
         ICM   R6,15,SESSCONV       FIRST CONVERSATION BLOCK
         BZ    PROC0220             NO CONVERSATIONS
PROC0180 DS    0H
         CLI   CONVFUNC,$CONVFB     BSAM I/O?
         BE    PROC0190             YES
         TM    CONVSTAT,$CONVPND    ANYTHING PENDING?
         BNO   PROC0240             NO
         B     PROC0210             NO ECB FOR VTAM FUNCTIONS
PROC0190 DS    0H
         L     R14,CONVDECB         BSAM ECB'S ADDRESS
         TM    0(R14),X'40'         POSTED?
         BO    PROC0240             YES.. BYPASS WAIT
         ST    R14,0(R1)            SET ADDRESS IN WAIT LIST
         LA    R1,4(R1)             NEXT ECB ADDRESS
PROC0210 DS    0H
         ICM   R6,15,CONVNEXT       NEXT CONVERSATION
         BNZ   PROC0180             CHECK THIS CONVERSATION
PROC0220 DS    0H
         ICM   R7,15,SESSNEXT       NEXT SESSION
         BNZ   PROC0160             LOOP
PROC0230 DS    0H
         SH    R1,H4                BACK-UP TO LAST ECB
         OI    0(R1),X'80'          SET END-OF-LIST
         TM    COMMVECB,X'40'       POSTED NOW?
         BO    PROC0240             YES.. BYPASS WAIT
         XC    COMMVECB,COMMVECB    RESET ATTN EXIT ECB
         L     R3,ATIMER            TIMER EXIT ENTRY POINT
         XC    COMMTECB,COMMTECB    CLEAR ECB
         STIMER REAL,               SET TIMER                          +
               (R3),                .. EXIT'S ADDRESS                  +
               BINTVL=WAITTIME      .. TIME INTERVAL
         ITRACE ID=WAIT,            WAITING FOR WORK                   +
               RDATA1=R2
         WAIT  1,ECBLIST=(R2)       WAIT FOR AN ECB TO BE POSTED
         ITRACE ID=WOKEUP
         TTIMER CANCEL              CANCEL TIMER EXIT IF PENDING
PROC0240 DS    0H
         ITRACE ID=BYPWAIT,         BYPASSING WAIT                     +
               RDATA1=R14           ADDRESS OF ECB THAT WAS POSTED
PROC0250 DS    0H
         XC    COMMTECB,COMMTECB    CLEAR ECB
         XC    COMMVECB,COMMVECB    CLEAR ECB
         FREEMAIN RU,A=(R2),LV=(R4) FREEMAIN ECB LIST
         B     PROC0000             RE-DRIVE MAIN LOOP
* ------------------------------------------------------------------- *
*        ERROR ROUTINES                                               *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         MVC   PRTMSGID(MSG10L),MSG10       ERRORS IN PARAMETERS
         BAL   R8,PRT0000           PRINT MESSAGE
         B     EXIT0000             AND EXIT
ERR0030  DS    0H
         ITRACE ID=ATCHFAIL         SUBTASK ATTACH FAILED
         STH   R15,DXDRC            SAVE RETURN CODE
         MVC   PRTMSGID(MSG11L),MSG11
         MVC   PRTMSGID+(MSG11T-MSG11)(L'MSG11T),DXDTASK
         UNPK  PRTMSGID+(MSG11R-MSG11)(5),DXDRC(3)
         MVZ   PRTMSGID+(MSG11R-MSG11)(L'MSG11R),HEX0000
         TR    PRTMSGID+(MSG11R-MSG11)(L'MSG11R),HEXCHAR
         MVI   PRTMSGID+(MSG11R-MSG11)+4,C' '
         BAL   R8,PRT0000           PRINT MESSAGE
         ABEND $U0006,DUMP,,USER    TIME TO FIX FX
ERR0040  DS    0H
         ITRACE ID=DATCHFL          DF/DSS SUBTASK DETACH FAILED
         STH   R15,DXDRC            SAVE RETURN CODE
         MVC   PRTMSGID(MSG12L),MSG12
         MVC   PRTMSGID+(MSG12T-MSG12)(L'MSG12T),DXDTASK
         UNPK  PRTMSGID+(MSG12R-MSG12)(5),DXDRC(3)
         MVZ   PRTMSGID+(MSG12R-MSG12)(L'MSG12R),HEX0000
         TR    PRTMSGID+(MSG12R-MSG12)(L'MSG12R),HEXCHAR
         MVI   PRTMSGID+(MSG12R-MSG12)+4,C' '
         BAL   R8,PRT0000           PRINT MESSAGE
         ABEND $U0007,DUMP,,USER    TIME TO FIX FX
ERR0050  DS    0H
         ITRACE ID=VTAMERR          VTAM ERROR..
         ABEND $U0031,DUMP,,USER    ABEND
ERR0060  DS    0H
         ITRACE ID=MINITFL          MASTER FILE INITIALIZATION FAILED
         MVC   PRTMSGID(MSG13L),MSG13
         BAL   R8,PRT0000           PRINT MESSAGE
         ABEND $U0025,DUMP,,USER
PRT0000  DS    0H
         ITRACE ID=PRINT
         FXCALL PRTQ,PRINT          ADD REQUEST TO PRINT QUEUE
         BR    R8                   COMPLETE
EXIT0000 DS    0H
         ITRACE ID=STARTEOJ
         MVC   PRTMSGID(MSG90L),MSG90
         BAL   R8,PRT0000           PRINT MESSAGE
         OI    COMMEOJ,$EOJ1+$EOJ2  SET SHUTDOWN PHASE 1 AND 2
         TM    COMMFLAG,$COMMDSS    DF/DSS SUBTASK ACTIVE?
         BNO   EXIT0020             NO
         OC    DSSTERM,DSSTERM      HAS DF/DSS SUBTASK TERMINATED?
         BNZ   EXIT0010             YES
         LA    R1,DSSWORK           DF/DSS SUBTASK ECB ADDRESS
         POST  (1)                  WAKE SUBTASK FOR TERMINATION
         LA    R1,DSSTERM           ECB POSTED WHEN SUBTASK COMPLETES
         WAIT  1,ECB=(1)            WAIT FOR SUBTASK TO TERMINATE
EXIT0010 DS    0H
         MVC   PRTMSGID(MSG91L),MSG91
         UNPK  PRTMSGID+(MSG91E-MSG91)(9),DSSTERM(5)
         MVZ   PRTMSGID+(MSG91E-MSG91)(8),HEX0000
         TR    PRTMSGID+(MSG91E-MSG91)(8),HEXCHAR
         MVI   PRTMSGID+(MSG91E-MSG91)+8,C' '
         BAL   R8,PRT0000           PRINT SUBTASK TERMINATION MSG
         MVC   DXDTASK,DFDSS        TASK BEING DETACHED
         LA    R1,COMMDSS           DF/DSS SUBTASK TCB ADDRESS
         DETACH (1)                 DETACH DF/DSS SUBTASK
         LTR   R15,R15              DETACH SUCCESSFUL?
         BNZ   ERR0040              NO
         MVC   PRTMSGID(MSG92L),MSG92
         BAL   R8,PRT0000           PRINT MESSAGE
EXIT0020 DS    0H
         TM    COMMFLAG,$COMMCPY    IEBCOPY SUBTASK ACTIVE?
         BNO   EXIT0050             NO
         OC    COPYTERM,COPYTERM    HAS IEBCOPY SUBTASK TERMINATED?
         BNZ   EXIT0040             YES
         LA    R1,COPYWORK          IEBCOPY SUBTASK ECB ADDRESS
         POST  (1)                  WAKE IEBCOPY FOR TERMINATION
         LA    R1,COPYTERM          ECB POSTED WHEN SUBTASK COMPLETES
         WAIT  1,ECB=(1)            WAIT FOR SUBTASK TO TERMINATE
EXIT0040 DS    0H
         MVC   PRTMSGID(MSG93L),MSG93
         UNPK  PRTMSGID+(MSG93E-MSG93)(9),COPYTERM(5)
         MVZ   PRTMSGID+(MSG93E-MSG93)(8),HEX0000
         TR    PRTMSGID+(MSG93E-MSG93)(8),HEXCHAR
         MVI   PRTMSGID+(MSG93E-MSG93)+8,C' '
         BAL   R8,PRT0000           PRINT SUBTASK TERMINATION MSG
         MVC   DXDTASK,IEBCOPY      TASK BEING DETACHED
         LA    R1,COMMCOPY          IEBCOPY SUBTASK TCB ADDRESS
         DETACH (1)                 DETACH IEBCOPY SUBTASK
         LTR   R15,R15              DETACH SUCCESSFUL?
         BNZ   ERR0040              NO
         MVC   PRTMSGID(MSG94L),MSG94
         BAL   R8,PRT0000           PRINT MESSAGE
EXIT0050 DS    0H
         TM    COMMFLAG,$ABEND      ABEND REQUESTED?
         BNO   EXIT0060             NO
         ITRACE ID=ABEND
         ABEND 1,DUMP,,USER         ABEND
EXIT0060 DS    0H
         ICM   R1,15,COMMRSTR       FIRST RESTORE BLOCK
         USING RSTRBLOK,R1          DEFINE BASE
         BZ    EXIT0080             NO RESTORE BLOCKS
EXIT0070 DS    0H
         L     R2,RSTRNEXT          NEXT RESTORE BLOCK
         ITRACE ID=FREERSTR,RDATA1=R1  FREEING A RESTORE BLOCK
         FREEMAIN RU,A=(1),LV=RSTRL FREE RESTORE BLOCK
         LTR   R1,R2                COPY NEXT BLOCK'S ADDRESS
         BNZ   EXIT0070             FREE THIS BLOCK
EXIT0080 DS    0H
         ICM   R1,15,COMMSTGE       FIRST STAGING VOLUME BLOCK
         USING STGEDEV,R1           DEFINE BASE
         BZ    EXIT0100             NO STAGING VOLUME BLOCKS
EXIT0090 DS    0H
         L     R2,STGENEXT          NEXT STAGING VOLUME BLOCK
         ITRACE ID=FREESTGE,RDATA1=R1
         FREEMAIN RU,A=(1),LV=STGEL
         LTR   R1,R2                COPY NEXT BLOCK'S ADDRESS
         BNZ   EXIT0090             FREE THIS BLOCK
EXIT0100 DS    0H
         OI    COMMEOJ,$EOJ3        SIGNAL SHUTDOWN PHASE 3
         ITRACE ID=MSTRCLS          CLOSING MASTER FILE
         MVC   PRTMSGID(MSG95L),MSG95
         BAL   R8,PRT0000           PRINT MESSAGE
         FXCALL FXSMSTR,CLOSE       CLOSE MASTER FILE
         DELETE EP=FXSMSTR          DELETE MASTER FILE I/O MODULE
         ITRACE ID=MSTRCLSD         MASTER FILE IS CLOSED
         MVC   PRTMSGID(MSG96L),MSG96
         BAL   R8,PRT0000           PRINT MESSAGE
         MVC   PRTMSGID(MSG99L),MSG99
         BAL   R8,PRT0000           PRINT MESSAGE
         L     R15,ALOSS            LOSS CLEAN-UP ENTRY POINT
         BALR  R14,R15              ALLOW CLEAN-UP
         L     R15,ARECV            FILE RECEIVE ENTRY POINT
         BALR  R14,R15              ALLOW CLEAN-UP
         L     R15,ASEND            FILE SEND ENTRY POINT
         BALR  R14,R15              ALLOW CLEAN-UP
         L     R15,AVTAM            VTAM FUNCTION ENTRY POINT
         BALR  R14,R15              ALLOW VTAM CLEAN-UP
         L     R15,ASESS            SESSION BLOCK ADD/DELETE
         BALR  R14,R15              DELETE ALL SESSION BLOCKS
         L     R15,ASTGE            STAGE/DE-STAGE ENTRY POINT
         BALR  R14,R15              ALLOW FXSSTGE TO CLEAN-UP
         L     R15,AVTOC            VTOC FUNCTION ENTRY POINT
         BALR  R14,R15              ALLOW CLEAN-UP
         OI    COMMEOJ,$EOJ4        SIGNAL SHUDOWN PHASE 4
         ITRACE ID=PRTEOJ           SHUTTING DOWN PRINT
         POST  PRTWORK              SHUTDOWN PRINT TASK
         WAIT  1,ECB=PRTTERM        WAIT FOR PRINT SUBTASK TERMINATION
         LA    R1,COMMPRT           PRINT SUBTASK TCB ADDRESS
         ITRACE ID=DTCHPRT,         DETACHING PRINT SUBTASK            +
               RDATA1=R1            .. PRINT SUBTASK'S TCB ADDRESS
         MVC   DXDTASK,PRINT        TASK BEING DETACHED
         DETACH (1)                 DETACH PRINT SUBTASK
         TM    XTRFLAG,$XTR         EXTERNAL TRACE ACTIVE?
         BNO   EXIT0120             NO
         OC    XTRTERM,XTRTERM      HAS EXTERNAL TRACE ENDED?
         BNZ   EXIT0110             YES
         OI    XTRFLAG,$XTREOJ      SET EOJ FLAG
         POST  XTRWORK              WAKE-UP EXTERNAL TRACE
         WAIT  1,ECB=XTRTERM        WAIT FOR EXTERNAL TRACE TERMINATION
EXIT0110 DS    0H
         LA    R1,COMMXTR           EXTERNAL TRACE TCB ADDRESS
         ITRACE ID=DTCHXTR,         DETACHING EXTERNAL TRACE           +
               RDATA1=R1            .. EXTERNAL TRACE'S TCB ADDRESS
         MVC   DXDTASK,XTR          TASK BEING DETACHED
         DETACH (1)                 DETACH EXTERNAL TRACE SUBTASK
EXIT0120 DS    0H
         L     R0,TRSIZE            TRACE TABLE SIZE
         L     R1,TRADDR            TRACE TABLE STORAGE ADDRESS
         FREEMAIN RU,A=(1),LV=(0)   FREEMAIN TRACE TABLE STORAGE
         L     R2,COMMDXDA          SAVE WORK AREA STORAGE ADDRESS
         DELETE EP=FXSCOMM          DELETE COMMON MODULE
         DELETE EP=FX24             DELETE "BELOW THE LINE" MODULE
         L     R0,DXDSIZE           WORK AREA STORAGE SIZE
         L     R13,4(R13)           RESTORE CALLER'S SAVE AREA ADDRESS
         FREEMAIN RU,A=(2),LV=(0)   FREEMAIN WORK AREA STORAGE
         LM    R14,R12,12(R13)      RESTORE CALLER'S REGISTERS
         SR    R15,R15              CLEAR REGISTER
         BR    R14                  EXIT
* ------------------------------------------------------------------- *
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSTART DC    Q(DXDSMAIN)          DISPLACEMENT TO WORK AREA
DXDSIZE  CXD                        WORK AREA TOTAL SIZE
VATTN    DC    V(FXSATTN)           VTAM ATTENTION EXIT ENTRY POINT
VCONS    DC    V(FXSCONS)           CONSOLE COMMUNICATION
VCONV    DC    V(FXSCONV)           CONVBLOK ADD/DELETE
VDAIR    DC    V(FXSDAIR)           DAIR MODULE ENTRY POINT
VLERAD   DC    V(FXLERAD)           VTAM LERAD EXIT ENTRY POINT
VLOSS    DC    V(FXSLOSS)           VTAM LOSS CLEAN-UP
VPRTQ    DC    V(FXSPRTQ)           PRINTER MODULE ENTRY POINT
VRECV    DC    V(FXSRECV)           FILE RECEIVE ENTRY POINT
VRPLX    DC    V(FXSRPLX)           RPL EXIT ENTRY POINT
VSEND    DC    V(FXSSEND)           FILE SEND ENTRY POINT
VSESS    DC    V(FXSSESS)           SESSION BLOCK ADD/DELETE
VSTGE    DC    V(FXSSTGE)           STAGE/DE-STAGE MODULE ENTRY POINT
VTIMER   DC    V(FXSTIMER)          TIMER EXIT ENTRY POINT
VUID     DC    V(FXSUID)            USER IDENTIFICATION
VREQE    DC    V(FXSREQE)           TRANSMISSSION REQUEST ENTRY
VREQI    DC    V(FXSREQI)           TRANSMISSION REQUEST INQUIRY
VSHUT    DC    V(FXSSHUT)           STARTED TASK SHUTDOWN
VVTAM    DC    V(FXSVTAM)           VTAM MODULE ENTRY POINT
VVSUB    DC    V(FXSVSUB)           VTAM SUB-FUNCTION MODULE
VVTOC    DC    V(FXSVTOC)           VTOC MODULE ENTRY POINT
WAITTIME DC    F'1500'              WAIT TIME (15 SECONDS)
H4       DC    H'4'
HEX0000  DC    8X'00'
HEXCHAR  DC    C'0123456789ABCDEF'
DDTBLE   DS    0C
         DC    CL8'FXIN',AL1($DDREQ),X'80'
         DC    CL8'FXPRT',AL1($DDREQ),X'40'
         DC    CL8'MASTER',AL1($DDREQ),X'20'
         DC    CL8'IDCI',AL1($DDREQ),X'10'
         DC    CL8'IDCP',AL1($DDREQ),X'08'
         DC    CL8'FXSXTR',AL1(0),X'04'
         DC    X'FF'
DFDSS    DC    CL8'DF/DSS'
IEBCOPY  DC    CL8'IEBCOPY'
PRINT    DC    CL8'PRINT'
XTR      DC    CL8'XTR'
WTO01    WTO   'FXSMAIN01E * FXPRT DD STATEMENT IS NOT PRESENT',MF=L
WTO01L   EQU   *-WTO01
MSG02    DS    0C
         DC    CL11'FXSMAIN02I'
         DC    C'PRINT SUBTASK ATTACHED'
MSG02L   EQU   *-MSG02
MSG03    DS    0C
         DC    CL11'FXSMAIN03I'
         DC    C'INITIALIZATION STARTING'
MSG03L   EQU   *-MSG03
MSG04    DS    0C
         DC    CL11'FXSMAIN04E'
         DC    C'REQUIRED DD '
MSG04D   DC    CL8' '
         DC    C' IS NOT PRESENT'
MSG04L   EQU   *-MSG04
MSG05    DS    0C
         DC    CL11'FXSMAIN05E'
         DC    C'ADD REQUIRED DD(S) TO YOUR JCL AND RE-SUBMIT'
MSG05L   EQU   *-MSG05
MSG06    DS    0C
         DC    CL11'FXSMAIN06I'
         DC    C'EXTERNAL TRACE SUBTASK ATTACHED'
MSG06L   EQU   *-MSG06
MSG07    DS    0C
         DC    CL11'FXSMAIN07I'
         DC    C'MASTER FILE INITIALIZATION COMPLETE'
MSG07L   EQU   *-MSG07
MSG08    DS    0C
         DC    CL11'FXSMAIN08I'
         DC    C'DF/DSS SUBTASK ATTACHED'
MSG08L   EQU   *-MSG08
MSG09    DS    0C
         DC    CL11'FXSMAIN09I'
         DC    C'IEBCOPY SUBTASK ATTACHED'
MSG09L   EQU   *-MSG09
MSG10    DS    0C
         DC    CL11'FXSMAIN10E'
         DC    C'ERROR(S) DETECTED IN CONTROL STATEMENTS, EXECUTION ABO+
               RTED'
MSG10L   EQU   *-MSG10
MSG11    DS    0C
         DC    CL11'FXSMAIN11E'
MSG11T   DC    CL8' '
         DC    C' SUBTASK ATTACH FAILED, RC='
MSG11R   DC    CL4' '
         DC    C' EXECUTION ABORTED'
MSG11L   EQU   *-MSG11
MSG12    DS    0C
         DC    CL11'FXSMAIN12E'
MSG12T   DC    CL8' '
         DC    C' SUBTASK DETACH FAILED, RC='
MSG12R   DC    CL4' '
         DC    C' '
MSG12L   EQU   *-MSG12
MSG13    DS    0C
         DC    CL11'FXSMAIN13E'
         DC    C'MASTER FILE INITIALIZATION FAILED'
MSG13L   EQU   *-MSG13
WTO14    WTO   'FXSMAIN14I FXSTC INITIALIZATION COMPLETE',MF=L
WTO14L   EQU   *-WTO14
MSG90    DS    0C
         DC    CL11'FXSMAIN90I'
         DC    C'TERMINATION BEGINNING'
MSG90L   EQU   *-MSG90
MSG91    DS    0C
         DC    CL11'FXSMAIN91I'
         DC    C'DF/DSS SUBTASK TERMINATED, ECB ='
MSG91E   DC    CL8' '
         DC    C' '
MSG91L   EQU   *-MSG91
MSG92    DS    0C
         DC    CL11'FXSMAIN92I'
         DC    C'DF/DSS SUBTASK DETACHED'
MSG92L   EQU   *-MSG92
MSG93    DS    0C
         DC    CL11'FXSMAIN93I'
         DC    C'IEBCOPY SUBTASK TERMINATED, ECB ='
MSG93E   DC    CL8' '
         DC    C' '
MSG93L   EQU   *-MSG93
MSG94    DS    0C
         DC    CL11'FXSMAIN94I'
         DC    C'IEBCOPY SUBTASK DETACHED'
MSG94L   EQU   *-MSG94
MSG95    DS    0C
         DC    CL11'FXSMAIN95I'
         DC    C'STARTING MASTER FILE CLOSE'
MSG95L   EQU   *-MSG95
MSG96    DS    0C
         DC    CL11'FXSMAIN96I'
         DC    C'MASTER FILE CLOSED'
MSG96L   EQU   *-MSG96
MSG99    DS    0C
         DC    CL11'FXSMAIN99I'
         DC    C'TERMINATION COMPLETE'
MSG99L   EQU   *-MSG99
ATTCHI   ATTACH EP=FXDSS,           ATTACH LIST FORM                   +
               ECB=*,               .. TERMINATION ECB'S ADDRESS       +
               PURGE=QUIESCE,       .. FINISH UP I/O IN PROGRESS       +
               SF=L                 .. LIST FORM
ATTCHL   EQU   *-ATTCHI
         LTORG
* ------------------------------------------------------------------- *
*                                                                     *
*        WORK AREA                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSMAIN DSECT
DXDID    DS    CL8                  WORK AREA OWNER
DXDSAVE  DS    18F                  REGISTER SAVE AREA
DXDAPARM DS    A                    ATTACH PARM
DXDATTCH DS    (ATTCHL)X            RESERVE ROOM FOR ATTACH LIST FORM
DXDRC    DS    H                    RETURN CODE FROM SYSTEM MACRO
DXDDD    DS    X                    DD'S PRESENT
DXDTASK  DS    CL8                  SUBTASK BEING ATTACH/DETACHED
         PRTBLOK  DSECT=NO
         VTOCREQ  DSECT=NO
         MSTRREQ  DSECT=NO
* ------------------------------------------------------------------- *
*        MASTER FILE RECORD FORMAT                                    *
* ------------------------------------------------------------------- *
         REQBLOK DSECT=YES
* ------------------------------------------------------------------- *
*        RESTORE BLOCK                                                *
* ------------------------------------------------------------------- *
         RSTRBLOK DSECT=YES
* ------------------------------------------------------------------- *
*        STAGING DEVICE BLOCK                                         *
* ------------------------------------------------------------------- *
         STGEDEV  DSECT=YES
* ------------------------------------------------------------------- *
*        VTAM SESSION BLOCK                                           *
* ------------------------------------------------------------------- *
         SESSBLOK DSECT=YES
* ------------------------------------------------------------------- *
*        VTAM CONVERSATION BLOCK                                      *
* ------------------------------------------------------------------- *
         CONVBLOK DSECT=YES
* ------------------------------------------------------------------- *
*        COMMON MODULE                                                *
* ------------------------------------------------------------------- *
         FXSCOMM TYPE=DSECT
* ------------------------------------------------------------------- *
*        DD TABLE DSECT                                               *
* ------------------------------------------------------------------- *
DDDSECT  DSECT
DDNAME   DS    CL8
DDFLAG   DS    X
$DDREQ   EQU   X'80'
DDID     DS    X
DDL      EQU   *-DDDSECT
* ------------------------------------------------------------------- *
*        PSA, TCB, TIOT                                               *
* ------------------------------------------------------------------- *
         IHAPSA LIST=NO
         IKJTCB LIST=NO
         IEFTIOT1
         COPY  REGEQU
         ABCODES
         END   FXSMAIN
./ ADD NAME=FXSMINIT 0100-99056-99056-1500-00394-00394-00000-FX-REL1

         TITLE 'FXSMINIT  MASTER FILE INITIALIZATION'
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXSMINIT                                              *
*                                                                     *
*   At start-up time FX must determine if "in progress" work needs    *
*   to be backed-out.  For example a file may have been in the        *
*   DUMP state (DF/DSS or IEBCOPY was dumping the data to a staging   *
*   dataset) at the time FX or the system failed.                     *
*                                                                     *
*   The master file status will be reset to the state the request     *
*   was in just before the interrupted activity began.                *
*                                                                     *
*   For an interrupted dump, the stage/sysin/sysprint data sets are   *
*   scratched and the master file status is reset to "initial".       *
*                                                                     *
*   For an interrupted RESTORE, the master file status is reset to    *
*   "received".                                                       *
*                                                                     *
*   For an interrupted SEND, the status for the node is reset, and    *
*   the transmission date and time are zeroed.                        *
*                                                                     *
*   For an interrupted RECEIVE, the stage data set is scratched, and  *
*   the master file record release (status is set to "free").         *
*                                                                     *
* ------------------------------------------------------------------- *
FXSMINIT CSECT
FXSMINIT AMODE 31
FXSMINIT RMODE ANY
         USING FXSMINIT,R12          DEFINE BASE
         USING FXSCOMM,R11           DEFINE BASE
         USING WORKAREA,R10          DEFINE BASE
         STM   R14,R12,12(R13)       SAVE CALLER'S REGISTERS
         LR    R12,R15               SET BASE
         B     INIT0000
         DC    ((PFXMODNM-MODPRFX)-(*-FXSMINIT))X'00'
         DC    CL8'FXSMINIT'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
INIT0000 DS    0H
         GETMAIN RU,                 ACQUIRE STORAGE FOR WORK AREA     +
               LV=WORKL,             .. SIZE                           +
               LOC=BELOW             .. FROM BELOW THE LINE
         LR    R10,R1                COPY WORK AREA ADDRESS
         LA    R1,WORKSAVE           SAVE AREA ADDRESS IN WORK AREA
         ST    R1,8(R13)             CHAIN TO PREVIOUS SAVE AREA
         ST    R13,4(R1)             CHAIN PREVIOUS TO OURS
         LR    R13,R1                SET SAVE AREA ADDRESS
         ITRACE ID=INIT
         MVI   PRTCC,C' '            INITIALIZE PRINT
         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC
         LA    R7,MSTRRECD           I/O AREA ADDRESS
         USING REQBLOK,R7            DEFINE REQBLOK BASE
         LA    R1,1                  INITIAL RECORD NUMBER
INIT0010 DS    0H
         ITRACE ID=READ,                                               +
               RDATA1=R1
         STCM  R1,3,MSTRREC#         SET RECORD NUMBER WANTED
         MVI   MSTRCMD,$MSTRRD       SET MASTER FILE I/O COMMAND
         BAL   R9,MSTR0000           REQUEST RECORD
         ITRACE ID=MSTRRECD,         TRACE ALL MASTER RECORDS EXAMINED +
               DATA1=REQREC#,        .. RECORD NUMBER                  +
               DATA2=REQSTAT         .. STATUS
         NI    WORKFLAG,255-$UPDATE  RESET UPDATED FLAG
         CLI   REQSTAT,0             UNUSED RECORD?
         BE    EXIT0000              YES, LOOK NO FURTHER
         CLI   REQSTAT,$REQDUMP      DATASET BEING DUMPED?
         BE    DUMP0000              YES
         CLI   REQSTAT,$REQRSTR      DATASET BEING RESTORED?
         BE    RSTR0000              YES
         CLI   REQSTAT,$REQRECV      BEING RECEIVED?
         BE    RECV0000              YES
         CLI   REQSTAT,$REQXRDY      READY FOR TRANSMISSION?
         BNE   INIT0050              NO.. NEXT RECORD
         CLC   REQTNODE,COMMAPLN     REQUEST FROM THIS NODE?
         BNE   INIT0040              NO, WE'RE RECEIVE END
         SR    R6,R6                 CLEAR REGISTER
         ICM   R6,3,REQNDE#          NUMBER OF NODES IN TRANSMIT LIST
         ITRACE ID=NDESTAT,          CHECKING NODE'S STATUS            +
               RDATA1=R6
         LA    R5,REQNDENM           FIRST NODE IN TRANSMIT LIST
         USING REQNDENM,R5           DEFINE BASE
INIT0020 DS    0H
         ITRACE ID=CHECKNDE,         CHECKING NODES STATUS             +
               DATA1=REQNDENM,       .. NODE NAME                      +
               DATA2=REQNDEST        .. STATUS
         CLI   REQNDEST,$REQNDEE     ERROR DURING TRANSMISSION?
         BE    INIT0030              YES.. DON'T BOTHER IT
         CLI   REQNDEST,$REQNDET     TRANSMISSION STARTED?
         BNE   INIT0030              NO
* ------------------------------------------------------------------- *
*        Interrupted during TRANSMIT                                  *
* ------------------------------------------------------------------- *
         OI    WORKFLAG,$UPDATE      RECORD UPDATED
         MVI   REQNDEST,$REQNDEI     RESET TO INITIAL STATUS
         ZAP   REQNDETD,P0           RESET TRANSMISSION DATE
         XC    REQNDETT,REQNDETT     RESET TRANSMISSION TIME
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,COMMDWRD           CONVERT RECORD NUMBER TO DECIMAL
         MVC   PRTMSGID(MSG01L),MSG01
         MVC   PRTMSGID+(MSG01NDE-MSG01)(L'MSG01NDE),REQENODE
         ED    PRTMSGID+(MSG01NBR-MSG01)(L'MSG01NBR),COMMDWRD+4
         BAL   R9,PRT0000            PRINT MESSAGE
         MVC   PRTMSGID(MSG02L),MSG02 SET MESSAGE
         BAL   R9,PRT0000            PRINT MESSAGE
INIT0030 DS    0H
         LA    R5,REQNDEL(R5)        NEXT NODE
         BCT   R6,INIT0020           CHECK ALL DESTINATIONS
         DROP  R5
INIT0040 DS    0H
         TM    WORKFLAG,$UPDATE      RECORD UPDATED?
         BNO   INIT0050              NO
         ITRACE ID=UPDATE            UPDATING MASTER FILE
         MVI   MSTRCMD,$MSTRWRT      SET MASTER FILE I/O COMMAND
         BAL   R9,MSTR0000           UPDATE RECORD
INIT0050 DS    0H
         ITRACE ID=TESTNBR
         SR    R1,R1                 CLEAR REGISTER
         ICM   R1,3,MSTRREC#         RECORD NUMBER
         LA    R1,1(R1)              NEXT RECORD NUMBER
         C     R1,COMMRECS           AT END OF DATASET?
         BNE   INIT0010              NO
         MVC   PRTMSGID(MSG03L),MSG03 SET MESSAGE
         BAL   R9,PRT0000            PRINT MESSAGE
         B     EXIT0000              AND EXIT
* ------------------------------------------------------------------- *
*        Interrupted during a DUMP operation                          *
* ------------------------------------------------------------------- *
DUMP0000 DS    0H
         ITRACE ID=DUMP              DUMP PROCESS WAS INTERRUPTED
         OI    WORKFLAG,$UPDATE      RECORD UPDATED
         MVC   PRTMSGID(MSG04L),MSG04
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,COMMDWRD           CONVERT RECORD NUMBER TO DECIMAL
         MVC   PRTMSGID+(MSG04NDE-MSG04)(L'MSG04NDE),REQENODE
         ED    PRTMSGID+(MSG04NBR-MSG04)(L'MSG04NBR),COMMDWRD+4
         BAL   R9,PRT0000            PRINT MESSAGE
         BAL   R8,DEL0000            DELETE STAGE, SYSIN, AND SYSPRINT
         MVI   REQSTAT,$REQINIT      INITIAL STATUS
         OI    WORKFLAG,$UPDATE      SET UPDATE FLAG
         B     INIT0040              UPDATE THE RECORD
* ------------------------------------------------------------------- *
*        Interrupted during a RESTORE operation                       *
* ------------------------------------------------------------------- *
RSTR0000 DS    0H
         ITRACE ID=RESTORE           RESTORE PROCESS WAS INTERRUPTED
         OI    WORKFLAG,$UPDATE      RECORD UPDATED
         MVC   PRTMSGID(MSG05L),MSG05
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,COMMDWRD           CONVERT RECORD NUMBER TO DECIMAL
         MVC   PRTMSGID+(MSG05NDE-MSG05)(L'MSG05NDE),REQENODE
         ED    PRTMSGID+(MSG05NBR-MSG05)(L'MSG05NBR),COMMDWRD+4
         BAL   R9,PRT0000            PRINT MESSAGE
         BAL   R8,DEL0000            DELETE SYSIN, AND SYSPRINT
         MVI   REQSTAT,$REQRCVD      RESET TO 'RECEIVED' STATUS
         OI    WORKFLAG,$UPDATE      SET UPDATE FLAG
         B     INIT0040              UPDATE THE RECORD
* ------------------------------------------------------------------- *
*        DATASET BEING RECEIVED WAS INTERRUPTED                       *
* ------------------------------------------------------------------- *
RECV0000 DS    0H
         ITRACE ID=RECV              DATASET RECEIVE WAS INTERRUPTED
         OI    WORKFLAG,$UPDATE      RECORD UPDATED
         MVC   PRTMSGID(MSG06L),MSG06
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,COMMDWRD           CONVERT RECORD NUMBER TO DECIMAL
         MVC   PRTMSGID+(MSG06NDE-MSG06)(L'MSG06NDE),REQENODE
         ED    PRTMSGID+(MSG06NBR-MSG06)(L'MSG06NBR),COMMDWRD+4
         BAL   R9,PRT0000            PRINT MESSAGE
         LA    R5,REQNDENM           NODE NAME
         USING REQNDENM,R5           DEFINE BASE
RECV0010 DS    0H
         CLC   COMMAPLN,REQNDENM     NODE FOUND?
         BE    RECV0020              YES
         LA    R5,REQNDEL(R5)        NEXT NODE
         B     RECV0010              LOOP
RECV0020 DS    0H
         OC    REQNDECR,REQNDECR     CHECKPOINT DATA PRESENT?
         BNZ   INIT0040              YES.. KEEP RECORD FOR RESTART
         BAL   R8,DEL0000            DELETE STAGE, SYSIN, AND SYSPRINT
         MINIT COMMBLKS,P0,$REQFREE,R14 INITIALIZE ALL FIELDS
         OI    WORKFLAG,$UPDATE      SET UPDATE FLAG
         B     INIT0040              UPDATE THE RECORD
* ------------------------------------------------------------------- *
*        DELETE STAGE, SYSIN, AND SYSPRINT DATASETS                   *
* ------------------------------------------------------------------- *
DEL0000  DS    0H
         MVI   DAIRCMD,$DAIRDEL      SET COMMAND
         CLC   REQWDSNM,COMMBLKS     NAME BLANK?
         BE    DEL0020               YES.. NOTHING TO DELETE
         CLI   REQSTAT,$REQRSTR      RESTORE INTERRUPTED?
         BE    DEL0020               YES.. DON'T DELETE STAGE DATA SET
         MVC   WORKDSC,STAGING       DELETING STAGING DATASET
         FXCALL FXSDAIR,,,,REQWDSNM  DELETE THE DATA SET
         OC    DAIRR15(6),DAIRR15    DATASET DELETED?
         BZ    DEL0010               YES
         CLC   DAIRERR,X1708         DATASET NOT FOUND?
         BNE   DEL0060               NO..
DEL0010  DS    0H
         MVC   PRTMSGID(MSG07L),MSG07
         MVC   PRTMSGID+(MSG07DSC-MSG07)(L'MSG07DSC),WORKDSC
         MVC   PRTMSGID+(MSG07DSN-MSG07)(L'MSG07DSN),REQWDSNM
         BAL   R9,PRT0000            PRINT MESSAGE
         MVC   REQWDSNM,COMMBLKS     CLEAR WORK DATASET NAME
DEL0020  DS    0H
         CLC   REQIDSNM,COMMBLKS     DATA SET NAME BLANK?
         BE    DEL0040               YES.. NOTHING TO DELETE
         MVC   WORKDSC,SYSIN         DELETING SYSIN DATASET
         FXCALL FXSDAIR,,,,REQIDSNM  DELETE THE DATA SET
         OC    DAIRR15(6),DAIRR15    DATASET DELETED?
         BZ    DEL0030               YES
         CLC   DAIRERR,X1708         DATASET NOT FOUND?
         BNE   DEL0060               NO..
DEL0030  DS    0H
         MVC   PRTMSGID(MSG07L),MSG07
         MVC   PRTMSGID+(MSG07DSC-MSG07)(L'MSG07DSC),WORKDSC
         MVC   PRTMSGID+(MSG07DSN-MSG07)(L'MSG07DSN),REQIDSNM
         BAL   R9,PRT0000            PRINT MESSAGE
         MVC   REQIDSNM,COMMBLKS     CLEAR WORK SYSIN DATASET NAME
DEL0040  DS    0H
         CLC   REQSDSNM,COMMBLKS     DATASET NAME BLANK?
         BER   R8                    YES.. NOTHING TO DELETE
         MVC   WORKDSC,SYSPRINT      DELETING SYSPRINT DATASET
         FXCALL FXSDAIR,,,,REQSDSNM  DELETE THE DATA SET
         OC    DAIRR15(6),DAIRR15    DATASET DELETED?
         BZ    DEL0050               YES
         CLC   DAIRERR,X1708         DATASET NOT FOUND?
         BNE   DEL0060               NO..
DEL0050  DS    0H
         MVC   PRTMSGID(MSG07L),MSG07
         MVC   PRTMSGID+(MSG07DSC-MSG07)(L'MSG07DSC),WORKDSC
         MVC   PRTMSGID+(MSG07DSN-MSG07)(L'MSG07DSN),REQSDSNM
         BAL   R9,PRT0000            PRINT MESSAGE
         MVC   REQSDSNM,COMMBLKS     CLEAR SYSPRINT DATASET NAME
         BR    R8                    DONE
DEL0060  DS    0H
         ITRACE ID=DELFAIL           DELETE FAILED
         MVC   PRTMSGID(MSG08L),MSG08
         MVC   PRTMSGID+(MSG08DSC-MSG08)(L'MSG08DSC),WORKDSC
         MVC   PRTMSGID+(MSG08DSN-MSG08)(L'MSG08DSN),DAIRDSN
         UNPK  PRTMSGID+(MSG08R15-MSG08)(5),DAIRR15(3)
         MVZ   PRTMSGID+(MSG08R15-MSG08)(4),HEX0000
         TR    PRTMSGID+(MSG08R15-MSG08)(4),HEXCHAR
         MVI   PRTMSGID+(MSG08R15-MSG08)+4,C' '
         UNPK  PRTMSGID+(MSG08ERR-MSG08)(5),DAIRERR(3)
         MVZ   PRTMSGID+(MSG08ERR-MSG08)(4),HEX0000
         TR    PRTMSGID+(MSG08ERR-MSG08)(4),HEXCHAR
         MVI   PRTMSGID+(MSG08ERR-MSG08)+4,C' '
         UNPK  PRTMSGID+(MSG08INF-MSG08)(5),DAIRINFO(3)
         MVZ   PRTMSGID+(MSG08INF-MSG08)(4),HEX0000
         TR    PRTMSGID+(MSG08INF-MSG08)(4),HEXCHAR
         MVI   PRTMSGID+(MSG08INF-MSG08)+4,C' '
         BAL   R9,PRT0000            PRINT MESSAGE
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         DC    H'1'
         B     INIT0050              GO ON TO NEXT MASTER FILE RECORD
* ------------------------------------------------------------------- *
*        MASTER FILE I/O                                              *
* ------------------------------------------------------------------- *
MSTR0000 DS    0H
         FXCALL FXSMSTR              LINK TO MASTER FILE I/O
         BR    R9                    RETURN
* ------------------------------------------------------------------- *
*        PRINTING                                                     *
* ------------------------------------------------------------------- *
PRT0000  DS    0H
         ITRACE ID=PRINT
         FXCALL PRTQ,PRINT           ADD REQUEST TO PRINT QUEUE
         BR    R9                    RETURN
* ------------------------------------------------------------------- *
*        EXIT                                                         *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT              EXITING MASTER FILE INITIALIZATION
         LR    R1,R13                SAVE SAVE AREA ADDRESS
         L     R13,4(R13)            RESTORE REGISTER 13
         FREEMAIN RU,A=(1),LV=WORKL  FREEMAIN WORK AREA
         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS
         SR    R15,R15               GIVE GOOD RETURN CODE
         BR    R14                   RETURN TO CALLER
* ------------------------------------------------------------------ *
*                                                                    *
*        CONSTANTS                                                   *
*                                                                    *
* ------------------------------------------------------------------ *
P0       DC    P'0'
RECDEDWD DC    X'4020202020202120'
X1708    DC    X'1708'
STAGING  DC    CL8'STAGING'
SYSIN    DC    CL8'SYSIN'
SYSPRINT DC    CL8'SYSPRINT'
HEX0000  DC    8X'00'
HEXCHAR  DC    C'0123456789ABCDEF'
MSG01    DS    0C
         DC    CL11'FXSMINIT01I'
         DC    C'TRANSMISSION OF '
MSG01NDE DC    CL8' '
         DC    C' '
MSG01NBR DC    XL8'4021202020202020'
         DC    C' INTERRUPTED'
MSG01L   EQU   *-MSG01
MSG02    DS    0C
         DC    CL11'FXSMINIT02I'
         DC    C'TRANSMISSION WILL BE RETRIED'
MSG02L   EQU   *-MSG02
MSG03    DS    0C
         DC    CL11'FXSMINIT03I'
         DC    C'MASTER FILE INTIALIZATION STOPPED AT END OF MASTER FIL+
               E'
MSG03L   EQU   *-MSG03
MSG04    DS    0C
         DC    CL11'FXSMINIT04I'
         DC    C'DUMP FOR REQEUST '
MSG04NDE DC    CL8' '
         DC    C' '
MSG04NBR DC    XL8'4021202020202020'
         DC    C' INTERRUPTED'
MSG04L   EQU   *-MSG04
MSG05    DS    0C
         DC    CL11'FXSMINIT05I'
         DC    C'RESTORE FOR REQEUST '
MSG05NDE DC    CL8' '
         DC    C' '
MSG05NBR DC    XL8'4021202020202020'
         DC    C' INTERRUPTED'
MSG05L   EQU   *-MSG05
MSG06    DS    0C
         DC    CL11'FXSMINIT06I'
         DC    C'RECEIVE OF '
MSG06NDE DC    CL8' '
         DC    C' '
MSG06NBR DC    XL8'4021202020202020'
         DC    C' INTERRUPTED'
MSG06L   EQU   *-MSG06
MSG07    DS    0C
         DC    CL11'FXSMINIT07I '
MSG07DSC DC    CL8' '
         DC    C' DATASET '
MSG07DSN DC    CL44' '
         DC    C' SUCCESSFULLY DELETED'
MSG07L   EQU   *-MSG07
MSG08    DS    0C
         DC    CL11'FXSMINIT08E'
         DC    C'DELETE FAILED '
MSG08DSC DC    CL8' '
         DC    C' '
MSG08DSN DS    CL44' '
         DC    C' SVC99 R15='
MSG08R15 DS    CL4' '
         DC    C' ERROR='
MSG08ERR DC    CL04' '
         DC    C' INFO='
MSG08INF DC    CL04' '
         DC    C' '
MSG08L   EQU   *-MSG08
         LTORG
* ------------------------------------------------------------------ *
*                                                                    *
*        Work areas                                                  *
*                                                                    *
* ------------------------------------------------------------------ *
WORKAREA DSECT
WORKSAVE DS    18F                   REGISTER SAVE AREA
WORKFLAG DS    X                     FLAGS/INDICATORS
$UPDATE  EQU   X'80'                 .. MASTER FILE RECORD UPDATED
WORKDSC  DS    CL8
* ------------------------------------------------------------------ *
*              Printer interface block                               *
* ------------------------------------------------------------------ *
         PRTBLOK  DSECT=NO
* ------------------------------------------------------------------ *
*              Master file I/O request block                         *
* ------------------------------------------------------------------ *
         MSTRREQ DSECT=NO
* ------------------------------------------------------------------ *
*              DAIR interface                                        *
* ------------------------------------------------------------------ *
         DAIRREQ  DSECT=NO
WORKL    EQU   *-WORKAREA
* ------------------------------------------------------------------ *
*              Master file record format                             *
* ------------------------------------------------------------------ *
         REQBLOK DSECT=NO
* ------------------------------------------------------------------ *
*              Common data map                                       *
* ------------------------------------------------------------------ *
         FXSCOMM  TYPE=DSECT
* ------------------------------------------------------------------ *
*              Equates                                               *
* ------------------------------------------------------------------ *
         COPY REGEQU
         END  FXSMINIT
./ ADD NAME=FXSMSTR  0100-99056-99056-1500-00013-00013-00000-FX-REL1

         TITLE 'FXFORMAT   MASTER FILE FORMATTER'
         COPY  OPTIONS
         AIF   ('&MSTRACC' EQ 'BDAM').BDAM
         AIF   ('&MSTRACC' EQ 'VSAM').VSAM
         MNOTE 12,'INVALID MASTER FILE ORGANIZATION'
.VSAM    ANOP
         COPY  VSAMMSTR
         AGO   .END
.BDAM    ANOP
         COPY  BDAMMSTR
.END     ANOP
         END  FXSMSTR
./ ADD NAME=FXSPARM  0100-99056-99056-1500-01166-01166-00000-FX-REL1

         TITLE 'FXSPARM   PARAMETER INTERPRETER'
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXSPARM                                               *
*                                                                     *
*   This module interprets the control statements entered via FXIN.   *
*   Since the control statements are only read once, this module is   *
*   linked separately.  FXSMAIN issue a LOAD, then calls this module, *
*   and then DELETEs it.  This frees up the storage that would        *
*   otherwise be wasted by having code that is only used at start-up  *
*   in the region.                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
FXSPARM  CSECT
FXSPARM  AMODE 31
FXSPARM  RMODE ANY
         USING FXSPARM,R12,R8        DEFINE BASE
         USING FXSCOMM,R11           DEFINE BASE
         USING WORKAREA,R10          DEFINE BASE
         STM   R14,R12,12(R13)       SAVE CALLER'S REGISTERS
         LR    R12,R15               SET BASE
         LA    R8,2048(R12)          SET BASE 2
         LA    R8,2048(R8)           SET BASE 2
         B     PARM0000
         DC    ((PFXMODNM-MODPRFX)-(*-FXSPARM))X'00'
         DC    CL8'FXSPARM'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
PARM0000 DS    0H
         GETMAIN RU,                 ACQUIRE STORAGE FOR WORK AREA     +
               LV=WORKL,             .. AMOUNT OF STORAGE REQUIRED     +
               LOC=BELOW             .. FROM BELOW THE LINE
         LR    R10,R1                COPY WORK AREA ADDRESS
         LA    R1,WORKSAVE           SAVE AREA ADDRESS IN WORK AREA
         ST    R1,8(R13)             CHAIN TO PREVIOUS SAVE AREA
         ST    R13,4(R1)             CHAIN PREVIOUS TO OURS
         LR    R13,R1                SET SAVE AREA ADDRESS
         MVI   PRTCC,C' '            INITIALIZE PRINT
         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC
         MVC   WORKDCB(DCBL),DCBI    INITIALIZE DCB
         XC    FX24PRM(CMD24-FX24PRM),FX24PRM
         LA    R1,WORKDCB            DCB'S ADDRESS
         ST    R1,DCB24              PASS ADDRESS TO 24-BIT MODULE
         LA    R1,CARDDATA           I/O AREA ADDRESS
         ST    R1,IOA24              PASS ADDRESS TO 24-BIT MODULE
         LA    R1,PARM0100           EOF ADDRESS
         ST    R1,EOF24              PASS ADDRESS TO 24-BIT MODULE
         OI    EOF24,X'80'           SET 31-BIT MODE
         FX24  $OPENI                OPEN THE DCB
PARM0010 DS    0H
         ITRACE ID=READCARD          READ A CONTROL STATEMENT
         FX24  $GETM                 MOVE MODE GET
         MVC   PRTMSGID(MSG01L),MSG01
         MVC   PRTMSGID+(MSG01D-MSG01)(L'MSG01D),CARDDATA
         BAL   R9,PRT0000            PRINT CONTROL STATEMENT
         CLI   CARDDATA,C'*'         COMMENT?
         BE    PARM0010              YES
         CLC   ABNDSTMT,CARDDATA     ABEND STATEMENT?
         BE    ABND0000              YES
         CLC   APPLSTMT,CARDDATA     APPLID STATEMENT?
         BE    APPL0000              YES
         CLC   DESTSTMT,CARDDATA     DESTINATION STATEMENT?
         BE    DEST0000              YES
         CLC   MAXSTMT,CARDDATA      MAX SIZE STATEMENT?
         BE    MAX0000               YES
         CLC   MEMSTMT,CARDDATA      (PDS) MEMBER SIZE STATEMENT?
         BE    MEM0000               YES
         CLC   NODESTMT,CARDDATA     NODE STATEMENT?
         BE    NODE0000              YES
         CLC   RSTRSTMT,CARDDATA     RESTORE STATEMENT?
         BE    RSTR0000              YES
         CLC   STGESTMT,CARDDATA     STAGE VOLUME STATEMENT?
         BE    STGE0000              YES
         CLC   PRFXSTMT,CARDDATA     STAGE DATASET PREFIX STATEMENT?
         BE    PRFX0000              YES
         CLC   SNPCSTMT,CARDDATA     SNAP SHOT SYSOUT CLASS STATEMENT?
         BE    SNPC0000              YES
         CLC   SYSNSTMT,CARDDATA     SYSTEM NAME STATEMENT?
         BE    SYSN0000              YES
         CLC   XUSRSTMT,CARDDATA     EXTERNAL USER STATEMENT?
         BE    XUSR0000              YES
         ITRACE ID=INVALID           INVALID STATEMENT
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG02L),MSG02
         BAL   R9,PRT0000            PRINT ERROR MESSAGE
         B     PARM0010              READ NEXT CONTROL STATEMENT
PARM0100 DS    0H
         FX24  $CLOSE                CLOSE THE DCB
         TM    COMMFLAG,$ABORT       ABORT FLAG SET?
         BO    EXIT0000              YES.. EXIT NOW
         CLC   COMMAPLN,COMMBLKS     APPL NAME BLANK?
         BNE   PARM0110              NO
         MVC   PRTMSGID(MSG03L),MSG03
         BAL   R9,PRT0000            PRINT MESSAGE
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
PARM0110 DS    0H
         OC    COMMSTGE,COMMSTGE     ANY STAGING VOLUMES DEFINED?
         BNZ   PARM0120              YES
         MVC   PRTMSGID(MSG04L),MSG04
         BAL   R9,PRT0000            PRINT MESSAGE
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
PARM0120 DS    0H
         CLC   COMMPREF,COMMBLKS     PREFIX BLANK?
         BNE   EXIT0000              NO
         MVC   PRTMSGID(MSG05L),MSG05
         BAL   R9,PRT0000            PRINT MESSAGE
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         B     EXIT0000              AND EXIT
*---------------------------------------------------------------------*
*        Process ABEND statement                                      *
*---------------------------------------------------------------------*
ABND0000 DS    0H
         ITRACE ID=SETABEND          ABEND STATEMENT PROCESSED
         OI    COMMFLAG,$ABEND       SET ABEND FLAG
         MVC   PRTMSGID(MSG06L),MSG06
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
*---------------------------------------------------------------------*
*        Process APPLID statement                                     *
*---------------------------------------------------------------------*
APPL0000 DS    0H
         ITRACE ID=APPLID            APPLID STATEMENT BEING PROCESSED
         CLC   COMMAPLN,COMMBLKS     APPLID ALREADY SPECIFIED?
         BNE   APPL0030              YES
         LA    R1,CARDDATA+L'APPLSTMT FIRST CHARACTER OF APPL NAME
         ST    R1,PARSEIN            SET INPUT DATA ADDRESS
         LA    R1,72-L'APPLSTMT      MAXIMUM INPUT LENGTH
         STH   R1,PARSEIL            SET INPUT LENGTH
         LA    R1,8                  MAXIMUM CHARACTERS IN NAME
         STH   R1,PARSEOL            SET MAXIMUM OUTPUT LENGTH
         BAL   R9,PARSE000           LINK TO PARSE
         OC    PARSEOL,PARSEOL       NAME LENGTH ZERO?
         BZ    APPL0010              YES
         CLI   PARSEDLM,C' '         STOPPED ON A BLANK?
         BNE   APPL0020              NO.. NAME IS TOO LONG
         ITRACE ID=GOODAPPL          APPL NAME IS OK (AS FAR AS LENGTH)
         MVC   COMMAPLN,PARSEOUT     SAVE APPL NAME
         MVC   PRTMSGID(MSG07L),MSG07
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010              READ NEXT STATEMENT
APPL0010 DS    0H
         ITRACE ID=NOAPPL            APPL NAME OMITTED
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG08L),MSG08       APPL NAME OMITTED
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
APPL0020 DS    0H
         ITRACE ID=LONGAPPL          APPL NAME IS TOO LONG
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG09L),MSG09       APPL NAME IS TOO LONG
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
APPL0030 DS    0H
         ITRACE ID=DUPAPPL           DUPLICATE APPL STATEMENT
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG10L),MSG10
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
*---------------------------------------------------------------------*
*        Process DESTINATION statement                                *
*---------------------------------------------------------------------*
DEST0000 DS    0H
         ITRACE ID=DEST
         LA    R1,CARDDATA+L'DESTSTMT
         ST    R1,PARSEIN            PARSE INPUT STARTING ADDRESS
         LA    R1,72-L'DESTSTMT      LENGTH OF DATA LEFT ON STATEMENT
         STH   R1,PARSEIL            SET DATA LENGTH
         LA    R1,8                  MAXIMUM DESTINATION NAME LENGTH
         STH   R1,PARSEOL            SET MAXIMUM OUTPUT LENGTH
         BAL   R9,PARSE000           LINK TO PARSE
         OC    PARSEOL,PARSEOL       OUTPUT LENGTH ZERO?
         BZ    DEST0050              YES
         CLI   PARSEDLM,0            DID PARSE STOP DUE TO END-OF-DATA?
         BE    DEST0050              YES.. BAD
         CLI   PARSEDLM,C' '         DID PARSE STOP DUE TO A BLANK?
         BE    DEST0060              YES.. BAD
         MVC   WORKWORK,PARSEOUT     SAVE DESTINATION NAME
         LA    R1,8                  MAXIMUM NODE NAME LENGTH
         STH   R1,PARSEOL            SET MAXIMUM OUTPUT LENGTH
         BAL   R9,PARSE000           LINK TO PARSE
         OC    PARSEOL,PARSEOL       OUTPUT LENGTH ZERO?
         BZ    DEST0060              YES
         LA    R2,COMMDEST           DESTINATION CHAIN POINT
DEST0010 DS    0H
         ICM   R3,15,0(R2)           NEXT DESTINATION BLOCK
         BZ    DEST0020              NO MORE DESTINATIONS
         USING DESTBLOK,R3           DEFINE BASE
         CLC   WORKWORK,DESTNAME     DUPLICATED DESTINATION?
         BE    DEST0070              YES
         LA    R2,DESTNEXT           CHAIN POINT
         B     DEST0010              LOOP
DEST0020 DS    0H
         ICM   R4,15,COMMSESS        FIRST SESSION BLOCK
         USING SESSBLOK,R4           DEFINE BASE
DEST0030 DS    0H
         BZ    DEST0080              NODE IS NOT VALID
         CLC   SESSNAME,PARSEOUT     NODE NAME FOUND?
         BE    DEST0040              YES
         ICM   R4,15,SESSNEXT        NEXT SESSION BLOCK
         B     DEST0030              LOOP
DEST0040 DS    0H
         GETMAIN RU,                 ACQUIRE STORAGE FOR DESTINATION   +
               LV=DESTL              .. SIZE REQUIRED
         ITRACE ID=NEWDEST,          NEW DESTINATION BLOCK             +
               DATA1=WORKWORK,       .. DESTINATION NAME               +
               RDATA2=R1             .. DESTINATION BLOCK'S ADDRESS
         ST    R1,0(R2)              ADD DESTINATION TO CHAIN
         LR    R3,R1                 COPY STORAGE ADDRESS
         MVC   DESTEYE,DESTID        INITIALIZE EYECATCHER
         XC    DESTNEXT,DESTNEXT     CLEAR 'NEXT' POINTER
         MVC   DESTNAME,WORKWORK     SAVE DESTINATION NAME
         MVC   DESTNODE,PARSEOUT     SAVE NODE NAME
         MVC   PRTMSGID(MSG11L),MSG11
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010              READ NEXT CONTROL STATEMENT
DEST0050 DS    0H
         ITRACE ID=NODEST            DESTINATION NAME OMITTED
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG12L),MSG12
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010              READ NEXT CONTROL STATEMENT
DEST0060 DS    0H
         ITRACE ID=NONODE            NODE NAME OMITTED
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG13L),MSG13
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010              READ NEXT CONTROL STATEMENT
DEST0070 DS    0H
         ITRACE ID=DUPDEST           DUPLICATED DESTINATION DEFINITION
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG14L),MSG14
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010              READ NEXT CONTROL STATEMENT
DEST0080 DS    0H
         ITRACE ID=BADNODE           NODE REFERENCED IS NOT DEFINED
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG15L),MSG15
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010              READ NEXT CONTROL STATEMENT
*---------------------------------------------------------------------*
*        Process MAX SIZE statement                                   *
*---------------------------------------------------------------------*
MAX0000  DS    0H
         ITRACE ID=MAXSIZE
         LA    R1,CARDDATA+L'MAXSTMT  FIRST DIGIT
         MVC   WORKWORK(9),=C'000000000'
         LA    R2,9                  MAXIMUM DIGITS
MAX0010  DS    0H
         CLI   0(R1),C' '            END OF DIGITS?
         BE    MAX0020               YES
         CLI   0(R1),C'0'            INVALID DIGIT?
         BL    MAX0040               YES
         CLI   0(R1),C'9'            INVALID DIGIT?
         BH    MAX0040               YES
         MVC   WORKWORK(8),WORKWORK+1 SHIFT LEFT 1 DIGIT
         MVC   WORKWORK+8(1),0(R1)   COPY DIGIT
         LA    R1,1(R1)              NEXT DIGIT
         BCT   R2,MAX0010            LOOP
MAX0020  DS    0H
         CLI   0(R1),C' '            BLANK?
         BNE   MAX0050               NO.. TOO MANY DIGITS
         PACK  COMMDWRD,WORKWORK(9)  PACK NUMBER OF ATTEMPTS
         CVB   R1,COMMDWRD           CONVERT TO BINARY
         LTR   R1,R1                 ZERO?
         BZ    MAX0030               YES
         ST    R1,COMMMAX            SET MAX FILE SIZE
         ITRACE ID=MAXVAL,           SETTING MAX FILE SIZE VALUE       +
               RDATA1=R1
         MVC   PRTMSGID(MSG16L),MSG16       MAX SIZE SET
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT CONTROL STATEMENT
MAX0030  DS    0H
         ITRACE ID=MAXZERO           MAX SIZE IS ZERO
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG17L),MSG17       MAX SIZE IS ZERO
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
MAX0040  DS    0H
         ITRACE ID=BADDIGIT          BAD DIGIT
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG18L),MSG18       BAD DIGIT IN MAX SIZE
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
MAX0050  DS    0H
         ITRACE ID=MAXLONG           TOO MANY DIGITS
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG19L),MSG19       TOO MANY DIGITS
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
*---------------------------------------------------------------------*
*        Process MEM SIZE statement                                   *
*                                                                     *
* Normally FX determines the size of a staging data set by examining  *
* the VTOC's of the volumes where the data set resides.  PDS members  *
* are not so easy.  The only way I could think of to be sure of the   *
* size would be to read the member once and use the TTR in the        *
* directory for the starting point and the TTR when the end of the    *
* member is reached to calculate the size.  This would mean reading   *
* the member an additional time just to compute stage data set size.  *
* Rather than do this, I opted to use a "generic" or "one size fits   *
* all" size for any PDS member.  FX always allocates the stage        *
* data sets with the RLSE parameter, so unused space is released,     *
* but if the member is too large, FX will not be able to transmit it. *
* The MEM SIZE specifies a size in bytes that is converted to an      *
* equivalent number of tracks on the stage device (the calculation    *
* is strictly by track size and does not factor in the wasted space   *
* due to inter-record gaps).  The SPACE parameter will use one tenth  *
* (1/10) of this size for the secondary quantity.                     *
*                                                                     *
*---------------------------------------------------------------------*
MEM0000  DS    0H
         ITRACE ID=MEMSTMT
         LA    R1,CARDDATA+L'MEMSTMT  FIRST DIGIT
         MVC   WORKWORK(9),=C'000000000'
         LA    R2,9                  MAXIMUM DIGITS
MEM0010  DS    0H
         CLI   0(R1),C' '            END OF DIGITS?
         BE    MEM0020               YES
         CLI   0(R1),C'0'            INVALID DIGIT?
         BL    MEM0040               YES
         CLI   0(R1),C'9'            INVALID DIGIT?
         BH    MEM0040               YES
         MVC   WORKWORK(8),WORKWORK+1 SHIFT LEFT 1 DIGIT
         MVC   WORKWORK+8(1),0(R1)   COPY DIGIT
         LA    R1,1(R1)              NEXT DIGIT
         BCT   R2,MEM0010            LOOP
MEM0020  DS    0H
         CLI   0(R1),C' '            BLANK?
         BNE   MEM0050               NO.. TOO MANY DIGITS
         PACK  COMMDWRD,WORKWORK(9)  PACK NUMBER OF ATTEMPTS
         CVB   R1,COMMDWRD           CONVERT TO BINARY
         LTR   R1,R1                 ZERO?
         BZ    MEM0030               YES
         ST    R1,COMMMEM            SET MAX FILE SIZE
         ITRACE ID=MEMSIZE,          SETTING MAX FILE SIZE VALUE       +
               RDATA1=R1
         MVC   PRTMSGID(MSG20L),MSG20       PDS MEMBER STAGE SIZE SET
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT CONTROL STATEMENT
MEM0030  DS    0H
         ITRACE ID=MEMZERO           PDS MEMBER STAGE SIZE IS ZERO
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG21L),MSG21       MAX SIZE IS ZERO
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
MEM0040  DS    0H
         ITRACE ID=BADDIGIT          BAD DIGIT
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG22L),MSG22       BAD DIGIT IN MAX SIZE
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
MEM0050  DS    0H
         ITRACE ID=MEMLONG           TOO MANY DIGITS
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG23L),MSG23       TOO MANY DIGITS
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
*---------------------------------------------------------------------*
*        Process FXNODE statement                                     *
*---------------------------------------------------------------------*
NODE0000 DS    0H
         ITRACE ID=NODE              FXNODE STATEMENT BEING PROCESSED
         LA    R1,CARDDATA+L'NODESTMT FIRST CHARACTER OF NODE NAME
         ST    R1,PARSEIN            SAVE PARSE STARTING POINT
         LA    R1,72-L'NODESTMT      MAXIMUM INPUT TO SCAN
         STH   R1,PARSEIL            SET INPUT LENGTH
         LA    R1,8                  MAXIMUM OUTPUT LENGTH
         STH   R1,PARSEOL            SET MAXIMUM OUTPUT LENGTH
         BAL   R9,PARSE000           LINK TO PARSE
         OC    PARSEOL,PARSEOL       LENGTH ZERO?
         BZ    NODE0040              YES.. NAME OMITTED
         CLI   PARSEDLM,C' '         STOPPED ON A BLANK?
         BE    NODE0060              YES.. SMF ID OMITTED
         CLI   PARSEDLM,C','         STOPPED DUE TO A COMMA?
         BNE   NODE0050              NO.. NAME TOO LONG
         MVC   WORKWORK,PARSEOUT     SAVE NODE LU NAME
         LA    R1,4                  MAXIMUM OUTPUT LENGTH
         STH   R1,PARSEOL            MAXIMUM OUTPUT LENGTH
         BAL   R9,PARSE000           LINK TO PARSE
         CLI   PARSEDLM,C' '         STOPPED ON A BLANK?
         BNE   NODE0070              NO.. SMFID IS TOO LONG
NODE0020 DS    0H
         ITRACE ID=ADDSESS,          DEFINING A NEW SESSION            +
               DATA1=PARSEOUT        .. LU'S NAME
         FXCALL FXSSESS,ADD,WORKWORK ADD THE SESSBLOK
         LTR   R15,R15               DUPLICATE SESSION BLOCK?
         BNZ   NODE0030              YES
         L     R4,SESSADDR           RETURNED SESSION BLOCK'S ADDRESS
         MVI   SESSTYPE,$SESSFX      THIS IS A FX-TO-FX DEFINITION
         MVC   SESSSMF,PARSEOUT      COPY NODE SMF ID
         MVC   PRTMSGID(MSG24L),MSG24
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
NODE0030 DS    0H
         ITRACE ID=DUPNODE           DUPLICATED NODE DEFINITION
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG25L),MSG25
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
NODE0040 DS    0H
         ITRACE ID=NONAME            NODE NAME OMITTED
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG26L),MSG26
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
NODE0050 DS    0H
         ITRACE ID=BADNODE           NODE NAME TOO LONG
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG27L),MSG27
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
NODE0060 DS    0H
         ITRACE ID=NOSMFID           SMFID OMITTED
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG48L),MSG48
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
NODE0070 DS    0H
         ITRACE ID=BADSMFID          SMFID TOO LONG
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG49L),MSG49
         BAL   R9,PRT0000            PRINT
         B     PARM0010              READ NEXT STATEMENT
*---------------------------------------------------------------------*
*        PROCESS STAGE DATASET PREFIX STATEMENT                       *
*---------------------------------------------------------------------*
PRFX0000 DS    0H
         ITRACE ID=PREFIX            PREFIX STATEMENT BEING PROCESSED
         CLC   COMMPREF,COMMBLKS     PREFIX ALREADY GIVEN?
         BNE   PRFX0010              YES
         LA    R1,CARDDATA+L'PRFXSTMT FIRST CHARACTER OF PREFIX
         ST    R1,PARSEIN            PARSE STARTING POINT
         LA    R1,72-L'PRFXSTMT      MAXIMUM INPUT LENGTH
         STH   R1,PARSEIL            SET INPUT DATA LENGTH
         LA    R1,20                 MAXIMUM CHARACTERS IN PREFIX
         STH   R1,PARSEOL            SET MAXIMUM OUTPUT LENGTH
         BAL   R9,PARSE000           LINK TO PARSE
         OC    PARSEOL,PARSEOL       PREFIX LENGTH ZERO?
         BZ    PRFX0020              YES
         CLI   PARSEDLM,C' '         STOP ON A BLANK?
         BNE   PRFX0030              NO.. NAME IS TOO LONG
         MVC   COMMPREF,PARSEOUT     COPY PREFIX
         MVC   COMMPREL,PARSEOL      SAVE LENGTH
         ITRACE ID=GOODPRFX          STAGE PREFIX SUCCESSFUL
         MVC   PRTMSGID(MSG28L),MSG28
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010              READ NEXT CONTROL STATEMENT
PRFX0010 DS    0H
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG29L),MSG29
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010              READ NEXT CONTROL STATEMENT
PRFX0020 DS    0H
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG30L),MSG30
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010              READ NEXT CONTROL STATEMENT
PRFX0030 DS    0H
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG31L),MSG31
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010              READ NEXT CONTROL STATEMENT
*---------------------------------------------------------------------*
*        PROCESS RESTORE STATEMENT                                    *
*---------------------------------------------------------------------*
RSTR0000 DS    0H
         ITRACE ID=RESTORE           RESTORE STATEMENT BEING PROCESSED
         LA    R1,CARDDATA+L'RSTRSTMT
         ST    R1,PARSEIN            PARSE STARTING POINT
         LA    R1,72-L'RSTRSTMT      MAX INPUT LENGTH
         STH   R1,PARSEIL            SET STARTING LENGTH
         LA    R1,44                 MAXIMUM OUTPUT LENGTH
         STH   R1,PARSEOL            SET MAX OUTPUT LENGTH
         BAL   R9,PARSE000           LINK TO PARSE
         OC    PARSEOL,PARSEOL       LENGTH ZERO?
         BZ    RSTR0060              YES
         CLI   PARSEDLM,C','         STOP ON A COMMA?
         BNE   RSTR0070              NO
         MVC   WORKWORK,PARSEOUT     SAVE DATASET PREFIX
         MVC   WORKLEN,PARSEOL       SAVE OUTPUT LENGTH
         LA    R1,6                  MAXIMUM OUTPUT LENGTH
         STH   R1,PARSEOL            SET OUTPUT LENGTH
         BAL   R9,PARSE000           LINK TO PARSE
         OC    PARSEOL,PARSEOL       LENGTH ZERO?
         BZ    RSTR0080              YES
         CLC   PARSEOL,H6            LENGTH > 6?
         BH    RSTR0090              YES.. TOO LONG
RSTR0010 DS    0H
         LA    R7,COMMRSTR           CHAIN ADDRESS
         ICM   R6,15,COMMRSTR        RESTORE CONTROL CHAIN ANCHOR
         USING RSTRBLOK,R6           DEFINE BASE
         BZ    RSTR0050              NO RESTORE BLOCKS
RSTR0020 DS    0H
         ITRACE ID=RSTRSRCH,RDATA1=R6
         CLC   WORKLEN,RSTRDSNL      LENGTH LESS THAN IN RSTRBLOK?
         BL    RSTR0040              YES, KEEP LOOKING
         LH    R1,RSTRDSNL           COPY LENGTH IN EXISTING BLOCK
         BCTR  R1,0                  MINUS 1 FOR EXECUTE
         EX    R1,RSTRDCLC           CHECK NAME
         BNE   RSTR0040              NOT THE SAME
         CLC   WORKLEN,RSTRDSNL      LENGTHS EQUAL?
         BNE   RSTR0040              NO, KEEP LOOKING
         ITRACE ID=ADDVOL
         LH    R1,RSTRVOL#           NUMBER OF VOLUMES IN LIST
         CH    R1,MAXVOLS            LIST ALREADY FULL?
         BE    RSTR0030              YES
         LA    R1,1(R1)              PLUS 1
         STH   R1,RSTRVOL#           SAVE NEW VOLUME COUNT
         BCTR  R1,0                  RE-ADJUST FOR RELATIVE TO ZERO
         MH    R1,=Y(L'RSTRVOL)      TIMES LENGTH OF VOLSER
         LA    R1,RSTRVOL(R1)        ADDRESS OF NEXT VOLSER
         MVC   0(L'RSTRVOL,R1),PARSEOUT ADD NEW VOLSER TO LIST
         MVC   PRTMSGID(MSG32L),MSG32
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010              READ NEXT CONTROL STATEMENT
RSTR0030 DS    0H
         ITRACE ID=OVERFLOW
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG33L),MSG33
         BAL   R9,PRT0000            PRINT MESSAGE
RSTR0040 DS    0H
         LA    R7,RSTRNEXT           CHAIN ADDRESS
         ICM   R6,15,RSTRNEXT        NEXT RESTORE BLOCK'S ADDRESS
         BNZ   RSTR0020              LOOP
RSTR0050 DS    0H
         GETMAIN RU,LV=RSTRL         ACQUIRE A NEW RESTORE BLOCK
         LR    R6,R1                 SET BASE
         ST    R6,0(R7)              CHAIN TO PREVIOUS BLOCK
         ITRACE ID=NEWRSTR,RDATA1=R6
         XC    RSTRBLOK(RSTRL),RSTRBLOK
         MVC   RSTREYE,RSTRID        SET EYECATCHER
         MVC   RSTRDSNL,WORKLEN      SET PREFIX'S LENGTH
         MVC   RSTRDSN,WORKWORK      INITIALIZE DATASET NAME
         MVI   RSTRVOL#+1,1          INITIALIZE VOLSER COUNT TO 1
         MVC   RSTRVOL,PARSEOUT      INITIALIZE VOLSER
         MVC   PRTMSGID(MSG34L),MSG34
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010
RSTR0060 DS    0H
         ITRACE ID=NODSN
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG35L),MSG35
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010              READ NEXT CONTROL STATEMENT
RSTR0070 DS    0H
         ITRACE ID=NODSNDLM
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG36L),MSG36
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010              READ NEXT CONTROL STATEMENT
RSTR0080 DS    0H
         ITRACE ID=NOVOL
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG37L),MSG37
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010              READ NEXT CONTROL STATEMENT
RSTR0090 DS    0H
         ITRACE ID=LONGVOL
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG38L),MSG38
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010              READ NEXT CONTROL STATEMENT
RSTRDCLC CLC   RSTRDSN(0),WORKWORK   SAME DATASET NAME PREFIX?
RSTRVOLM MVC   RSTRVOL(0),0(R4)      COPY VOLSER TO RESTORE BLOCK
*---------------------------------------------------------------------*
*        PROCESS SNAPCLASS STATEMENT                                  *
*---------------------------------------------------------------------*
SNPC0000 DS    0H
         ITRACE ID=SNAPCLAS          SNAPSHOT SYSOUT CLASS
         CLI   CARDDATA+L'SNPCSTMT,C' '   BLANK?
         BE    SNPC0010                   YES.. INVALID
         CLI   CARDDATA+L'SNPCSTMT+1,C' ' BLANK?
         BNE   SNPC0020                   NO.. INVALID
         MVC   COMMSNPC,CARDDATA+L'SNPCSTMT
         MVC   PRTMSGID(MSG39L),MSG39
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010              READ NEXT CONTROL STATEMENT
SNPC0010 DS    0H
         ITRACE ID=SNAPBLNK
         MVC   PRTMSGID(MSG40L),MSG40
         BAL   R9,PRT0000            PRINT MESSAGE
         MVI   COMMFLAG,$ABORT       SET ABORT FLAG
         B     PARM0010              READ NEXT CONTROL STATEMENT
SNPC0020 DS    0H
         ITRACE ID=SNAPLONG
         MVC   PRTMSGID(MSG41L),MSG41
         BAL   R9,PRT0000            PRINT MESSAGE
         MVI   COMMFLAG,$ABORT       SET ABORT FLAG
         B     PARM0010              READ NEXT CONTROL STATEMENT
*---------------------------------------------------------------------*
*        PROCESS SYSNAME STATEMENT                                    *
*---------------------------------------------------------------------*
SYSN0000 DS    0H
         ITRACE ID=SYSNAME           SYSTEM NAME
         CLC   CARDDATA+L'SYSNSTMT(20),COMMBLKS  BLANK?
         BE    SYSN0010              YES
         MVC   COMMSYSN,CARDDATA+L'SYSNSTMT
         MVC   PRTMSGID(MSG42L),MSG42
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010              READ NEXT CONTROL STATEMENT
SYSN0010 DS    0H
         MVC   PRTMSGID(MSG43L),MSG43
         BAL   R9,PRT0000            PRINT MESSAGE
         MVI   COMMFLAG,$ABORT       SET ABORT FLAG
         B     PARM0010              READ NEXT CONTROL STATEMENT
*---------------------------------------------------------------------*
*        PROCESS STAGE DEVICE STATEMENT                               *
*---------------------------------------------------------------------*
STGE0000 DS    0H
         ITRACE ID=STAGE             STAGE STATEMENT BEING PROCESSED
         MVC   WORKWORK,COMMBLKS     INITIALIZE VOLSER IN WORK AREA
         LA    R1,CARDDATA+L'STGESTMT FIRST CHARACTER OF VOLSER
         ST    R1,PARSEIN            SET PARSE STARTING POINT
         LA    R1,6                  MAXIMUM OUTPUT LENGTH
         STH   R1,PARSEOL            SET OUTPUT
         BAL   R9,PARSE000           LINK TO PARSE
         OC    PARSEOL,PARSEOL       LENGTH ZERO?
         BZ    STGE0050              YES
         CLC   PARSEOL,H6            TOO LONG?
         BH    STGE0040              YES
         LA    R3,COMMSTGE           STAGING BLOCK ANCHOR ADDRESS
STGE0010 DS    0H
         ICM   R4,15,0(R3)           NEXT BLOCK'S ADDRESS
         USING STGEDEV,R4            DEFINE BASE
         BZ    STGE0020              END OF CHAIN FOUND
         CLC   STGEVOL,WORKWORK      DUPLICATED STAGING DEVICE?
         BE    STGE0030              YES
         LA    R3,STGENEXT           CHAIN POINTER ADDRESS
         B     STGE0010              LOOP
STGE0020 DS    0H
         GETMAIN RU,LV=STGEL         ACQUIRE STORAGE FOR VOLUME
         ITRACE ID=NEWSTGE,          TRACE NEW STAGING BLOCK           +
               RDATA1=R3,            .. CHAIN POINTER ADDRESS          +
               RDATA2=R1             .. NEW BLOCK'S ADDRESS
         ST    R1,0(R3)              CHAIN TO PREVIOUS BLOCK
         LR    R4,R1                 SET BASE
         XC    STGEDEV(STGEL),STGEDEV
         MVC   STGEEYE,STGEID        SET EYECATCHER
         MVC   STGEVOL,PARSEOUT      COPY VOLSER
         MVC   PRTMSGID(MSG44L),MSG44
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010              READ NEXT CONTROL STATEMENT
STGE0030 DS    0H
         MVC   PRTMSGID(MSG45L),MSG45
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010              READ NEXT CONTROL STATEMENT
STGE0040 DS    0H
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG46L),MSG46
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010              READ NEXT CONTROL STATEMENT
STGE0050 DS    0H
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG47L),MSG47
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010              READ NEXT CONTROL STATEMENT
*---------------------------------------------------------------------*
*        PROCESS XUSER STATEMENT                                      *
*---------------------------------------------------------------------*
XUSR0000 DS    0H
         ITRACE ID=XUSER             EXTERNAL USER STATEMENT PROCESSED
         LA    R1,CARDDATA+L'XUSRSTMT
         ST    R1,PARSEIN            PARSE STARTING POINT
         LA    R1,72-L'XUSRSTMT      MAX INPUT LENGTH
         STH   R1,PARSEIL            SET STARTING LENGTH
         LA    R1,4                  MAXIMUM OUTPUT LENGTH
         STH   R1,PARSEOL            SET MAX OUTPUT LENGTH
         BAL   R9,PARSE000           LINK TO PARSE
         OC    PARSEOL,PARSEOL       LENGTH ZERO?
         BZ    XUSR0050              YES
         CLI   PARSEDLM,C' '         STOP ON A BLANK?
         BE    XUSR0070              YES
         CLI   PARSEDLM,C','         STOP ON A COMMA?
         BNE   XUSR0060              NO
         MVC   WORKWORK(4),PARSEOUT  SAVE SMF ID
         LA    R1,8                  MAXIMUM OUTPUT LENGTH
         STH   R1,PARSEOL            SET OUTPUT LENGTH
         BAL   R9,PARSE000           LINK TO PARSE
         OC    PARSEOL,PARSEOL       LENGTH ZERO?
         BZ    XUSR0070              YES
         CLI   PARSEDLM,C' '         STOP ON A BLANK?
         BE    XUSR0090              YES
         CLI   PARSEDLM,C','         STOP ON A COMMA?
         BNE   XUSR0080              NO
         MVC   WORKWORK+4(8),PARSEOUT   SAVE USER ID
         LA    R1,8                  MAXIMUM OUTPUT LENGTH
         STH   R1,PARSEOL            SET OUTPUT LENGTH
         BAL   R9,PARSE000           LINK TO PARSE
         OC    PARSEOL,PARSEOL       LENGTH ZERO?
         BZ    XUSR0090              YES
         CLI   PARSEDLM,C' '         STOP ON A BLANK?
         BNE   XUSR0100              NO
         ICM   R4,15,COMMSESS        FIRST SESSION BLOCK
         USING SESSBLOK,R4           DEFINE BASE
         BZ    XUSR0110              NO SESSBLOKS
XUSR0010 DS    0H
         CLC   SESSSMF,WORKWORK      SMF ID MATCH?
         BE    XUSR0020              YES
         ICM   R4,15,SESSNEXT        NEXT SESSBLOK
         BZ    XUSR0110              NO MORE SESSBLOK'S
         B     XUSR0010              LOOP
XUSR0020 DS    0H
         ITRACE ID=NEWXUSR           ADDING A NEW XUSRBLOK
         GETMAIN RU,                 ACQUIRING A NEW XUSER BLOCK       +
               LV=XUSRL,             .. SIZE                           +
               LOC=ANY               .. FROM ANY AREA
         LA    R14,COMMXUSR          CHAIN POINT
         USING XUSRBLOK,R5           DEFINE XUSRBLOK BASE
XUSR0030 DS    0H
         ICM   R5,15,0(R14)          NEXT XUSR BLOCK
         BZ    XUSR0040              END OF CHAIN
         LA    R14,XUSRNEXT          CHAIN POINT
         B     XUSR0030              LOOP
XUSR0040 DS    0H
         ST    R1,0(R14)             ADD NEW BLOCK TO CHAIN
         LR    R5,R1                 SET BASE
         XC    XUSRBLOK(XUSRL),XUSRBLOK
         MVC   XUSREYE,XUSRID        SET EYECATCHER
         MVC   XUSRSMF,WORKWORK      COPY SMF ID
         MVC   XUSRID1,WORKWORK+4    COPY ID ON OTHER SYSTEM
         MVC   XUSRID2,PARSEOUT      COPY ID ON OUR SYSTEM
         MVC   PRTMSGID(MSG50L),MSG50
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010              READ NEXT CONTROL STATEMENT
XUSR0050 DS    0H
         ITRACE ID=NOSMF
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG51L),MSG51
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010              READ NEXT CONTROL STATEMENT
XUSR0060 DS    0H
         ITRACE ID=SMFLONG
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG52L),MSG52
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010              READ NEXT CONTROL STATEMENT
XUSR0070 DS    0H
         ITRACE ID=NOID1
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG53L),MSG53
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010              READ NEXT CONTROL STATEMENT
XUSR0080 DS    0H
         ITRACE ID=ID1LONG
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG54L),MSG54
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010              READ NEXT CONTROL STATEMENT
XUSR0090 DS    0H
         ITRACE ID=NOID2
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG55L),MSG55
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010              READ NEXT CONTROL STATEMENT
XUSR0100 DS    0H
         ITRACE ID=ID2LONG
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG56L),MSG56
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010              READ NEXT CONTROL STATEMENT
XUSR0110 DS    0H
         ITRACE ID=BADSMF
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         MVC   PRTMSGID(MSG57L),MSG57
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010              READ NEXT CONTROL STATEMENT
* ------------------------------------------------------------------- *
*                                                                     *
*  Parsing                                                            *
*                                                                     *
*  At entry:                                                          *
*     PARSEIN  must be set to the data starting address               *
*     PARSEIL  must be set to the data length                         *
*     PARSEOL  must be set to the maximum output length               *
*                                                                     *
*  At exit:                                                           *
*     PARSEIN  will be set the address of the byte following the      *
*              delimiter that stopped the scan                        *
*     PARSEIL  will be set to the length of the data following the    *
*              delimiter                                              *
*     PARSEOUT will be the data up to but not including the delimiter *
*     PARSEOL  will be set to the length of the data in PARSEOUT      *
*     PARSEDLM will be set to the delimiter that stopped the scan or  *
*              to a null if the scan stopped due to end of data       *
*                                                                     *
* ------------------------------------------------------------------- *
PARSE000 DS    0H
         ITRACE ID=PARSE,            STARTING A PARSE                  +
               DATA1=PARSEIN,        .. STARTING ADDRESS               +
               DATA2=PARSEIL         .. INPUT AND OUTPUT LENGTHS
         MVC   PARSEOUT,COMMBLKS     CLEAR OUTPUT DATA
         LH    R1,PARSEIL            INPUT DATA LENGTH
         LH    R2,PARSEOL            MAXIMUM OUTPUT LENGTH
         L     R3,PARSEIN            INPUT DATA ADDRESS
         LA    R4,PARSEOUT           OUTPUT DATA ADDRESS
         SR    R5,R5                 INITIALIZE FOR OUTPUT LENGTH
         MVI   PARSEDLM,0            SET DELIMITER TO A NULL
         LTR   R1,R1                 ANY DATA LEFT?
         BZ    PARSE050              NO
PARSE010 DS    0H
         CLI   0(R3),C' '            BLANK?
         BNE   PARSE020              NO
         LA    R3,1(R3)              NEXT
         BCT   R1,PARSE010           LOOP
         B     PARSE050
PARSE020 DS    0H
         CLI   0(R3),C' '            BLANK?
         BE    PARSE040              YES
         CLI   0(R3),C','            COMMA?
         BE    PARSE040              YES
         MVC   0(1,R4),0(R3)         COPY TO OUTPUT
         LA    R3,1(R3)              NEXT
         LA    R4,1(R4)              NEXT
         LA    R5,1(R5)              PLUS 1 BYTE OF LENGTH
         BCT   R1,PARSE030           MINUS 1 BYTE OF INPUT
         B     PARSE050              FORCE EXIT
PARSE030 DS    0H
         BCT   R2,PARSE020           LOOP
         CLI   0(R3),C' '            BLANK?
         BE    PARSE040              YES
         CLI   0(R3),C','            COMMA?
         BNE   PARSE050              NO
PARSE040 DS    0H
         MVC   PARSEDLM,0(R3)        SAVE DELIMITER
         LA    R3,1(R3)              SKIP DELIMITER
         BCTR  R1,0                  MINUS BYTE USED BY DELIMITER
PARSE050 DS    0H
         STH   R1,PARSEIL            SAVE INPUT LENGTH LEFT
         STH   R5,PARSEOL            SAVE OUTPUT LENGTH
         ST    R3,PARSEIN            SAVE INPUT ENDING POINT
         ITRACE ID=PARSEOUT,         PARSE ENDING                      +
               DATA1=PARSEOUT,       .. PART OF OUTPUT DATA            +
               DATA2=PARSEOL         .. OUTPUT LENGTH
         LM    R1,R5,PARSESAV        RESTORE SAVED REGISTERS
         BR    R9                    EXIT
* ------------------------------------------------------------------- *
*        PRINTING                                                     *
* ------------------------------------------------------------------- *
PRT0000  DS    0H
         ITRACE ID=PRINT
         FXCALL PRTQ,PRINT           ADD REQUEST TO PRINT QUEUE
         BR    R9                    RETURN
* ------------------------------------------------------------------- *
*        EXIT                                                         *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT              EXITING PARAMETER CONVERTER
         LR    R1,R13                SAVE SAVE AREA ADDRESS
         L     R13,4(R13)            RESTORE REGISTER 13
         FREEMAIN RU,A=(1),LV=WORKL  FREEMAIN WORK AREA
         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS
         SR    R15,R15               GIVE GOOD RETURN CODE
         BR    R14                   RETURN TO CALLER
* ------------------------------------------------------------------ *
*                                                                    *
*        CONSTANTS                                                   *
*                                                                    *
* ------------------------------------------------------------------ *
DCBI     DCB   DSORG=PS,                                               +
               DDNAME=FXIN,                                            +
               RECFM=FB,                                               +
               LRECL=80,                                               +
               EODAD=PARM0100,                                         +
               MACRF=GM
DCBL     EQU   *-DCBI
MAXVOLS  DC    Y(RSTRMAX)            MAX VOLSER IN RESTORE LIST
H6       DC    H'6'                  CONSTANT
DESTID   DC    CL8'DESTBLOK'
RSTRID   DC    CL8'RSTRBLOK'
STGEID   DC    CL8'STGEDEV '
XUSRID   DC    CL8'XUSRBLOK'
ABNDSTMT DC    C'ABEND'              ABEND CONTROL STATEMENT
APPLSTMT DC    C'APPLID='            APPLID STATEMENT
DESTSTMT DC    C'DESTINATION='       DESTINATION STATEMENT
MAXSTMT  DC    C'MAX SIZE='          MAXIMUM FILE SIZE STATEMENT
MEMSTMT  DC    C'MEM SIZE='          PDS MEMBER STAGE SPACE STATEMENT
NODESTMT DC    C'FXNODE='            FX NODE STATEMENT
PRFXSTMT DC    C'STAGEPRFX='         STAGE DATASET DSN PREFIX STATEMENT
RSTRSTMT DC    C'RESTORE='           RESTORE STATEMENT
STGESTMT DC    C'STAGE='             STAGE DATASET VOLSER STATEMENT
SNPCSTMT DC    C'SNAPCLASS='         SNAPSHOT SYSOUT CLASS STATEMENT
SYSNSTMT DC    C'SYSNAME='           SYSTEM NAME STATEMENT
XUSRSTMT DC    C'XUSER='             EXTERNAL USER STATEMENT
MSG01    DS    0C
         DC    CL11'FXSPARM01I'
         DC    C'CONTROL STATEMENT:'
         DC    C' '
MSG01D   DC    CL80' '
MSG01L   EQU   *-MSG01
MSG02    DS    0C
         DC    CL11'FXSPARM02E'
         DC    C'INVALID CONTROL STATEMENT'
MSG02L   EQU   *-MSG02
MSG03    DS    0C
         DC    CL11'FXSPARM03E'
         DC    C'REQUIRED PARAMETER ''APPLID'' NOT SPECIFIED OR BLANK'
MSG03L   EQU    *-MSG03
MSG04    DS    0C
         DC    CL11'FXSPARM04E'
         DC    C'NO STAGING VOLUMES DEFINED'
MSG04L   EQU   *-MSG04
MSG05    DS    0C
         DC    CL11'FXSPARM05E'
         DC    C'STAGING DATASET PREFIX NOT GIVEN'
MSG05L   EQU   *-MSG05
MSG06    DS    0C
         DC    CL11'FXSPARM06I'
         DC    C'ABEND FLAG SET'
MSG06L   EQU   *-MSG06
MSG07    DS    0C
         DC    CL11'FXSPARM07I'
         DC    C'APPLID STATEMENT PROCESSED SUCCESSFULLY'
MSG07L   EQU   *-MSG07
MSG08    DS    0C
         DC    CL11'FXSPARM08E'
         DC    C'APPL NAME OMITTED'
MSG08L   EQU   *-MSG08
MSG09    DS    0C
         DC    CL11'FXSPARM09E'
         DC    C'APPLID IS TOO LONG (MAX IS 8 CHARACTERS)'
MSG09L   EQU   *-MSG09
MSG10    DS    0C
         DC    CL11'FXSPARM10E'
         DC    C'DUPLICATE APPL ID STATEMENT'
MSG10L   EQU   *-MSG10
MSG11    DS    0C
         DC    CL11'FXSPARM11I'
         DC    C'DESTINATION DEFINED SUCCESSFULLY'
MSG11L   EQU   *-MSG11
MSG12    DS    0C
         DC    CL11'FXSPARM12E'
         DC    C'DESTINATION NAME OMITTED'
MSG12L   EQU   *-MSG12
MSG13    DS    0C
         DC    CL11'FXSPARM13E'
         DC    C'NODE NAME OMITTED'
MSG13L   EQU   *-MSG13
MSG14    DS    0C
         DC    CL11'FXSPARM14E'
         DC    C'DUPLICATED DESTINATION DEFINITION'
MSG14L   EQU   *-MSG14
MSG15    DS    0C
         DC    CL11'FXSPARM15E'
         DC    C'SPECIFIED NODE IS NOT DEFINED'
MSG15L   EQU   *-MSG15
MSG16    DS    0C
         DC    CL11'FXSPARM16I'
         DC    C'MAX FILE SIZE SET'
MSG16L   EQU   *-MSG16
MSG17    DS    0C
         DC    CL11'FXSPARM17E'
         DC    C'MAX FILE SIZE MAY NOT BE ZERO'
MSG17L   EQU   *-MSG17
MSG18    DS    0C
         DC    CL11'FXSPARM18E'
         DC    C'INVALID DIGIT IN MAX SIZE VALUE'
MSG18L   EQU   *-MSG18
MSG19    DS    0C
         DC    CL11'FXSPARM19E'
         DC    C'MAX SIZE VALUE HAS TOO MANY DIGITS (9 MAX)'
MSG19L   EQU   *-MSG19
MSG20    DS    0C
         DC    CL11'FXSPARM20I'
         DC    C'PDS MEMBER STAGE SPACE SET'
MSG20L   EQU   *-MSG20
MSG21    DS    0C
         DC    CL11'FXSPARM21E'
         DC    C'PDS MEMBER SPACE MAY NOT BE ZERO'
MSG21L   EQU   *-MSG21
MSG22    DS    0C
         DC    CL11'FXSPARM22E'
         DC    C'INVALID DIGIT IN PDS MEMBER SPACE'
MSG22L   EQU   *-MSG22
MSG23    DS    0C
         DC    CL11'FXSPARM23E'
         DC    C'PDS MEMBER SPACE HAS TOO MANY DIGITS (9 MAX)'
MSG23L   EQU   *-MSG23
MSG24    DS    0C
         DC    CL11'FXSPARM24I'
         DC    C'FX NODE DEFINED SUCCESSFULLY'
MSG24L   EQU   *-MSG24
MSG25    DS    0C
         DC    CL11'FXSPARM25E'
         DC    C'FX NODE IS DUPLICATELY DEFINED'
MSG25L   EQU   *-MSG25
MSG26    DS    0C
         DC    CL11'FXSPARM26E'
         DC    C'NODE NAME OMITTED'
MSG26L   EQU   *-MSG26
MSG27    DS    0C
         DC    CL11'FXSPARM27E'
         DC    C'FX NODE NAME IS TOO LONG'
MSG27L   EQU   *-MSG27
MSG28    DS    0C
         DC    CL11'FXSPARM28I'
         DC    C'STAGING DATASET PREFIX PROCESSED SUCCESSFULLY'
MSG28L   EQU   *-MSG28
MSG29    DS    0C
         DC    CL11'FXSPARM29E'
         DC    C'STAGING DATASET PREFIX ALREADY GIVEN'
MSG29L   EQU   *-MSG29
MSG30    DS    0C
         DC    CL11'FXSPARM30E'
         DC    C'PREFIX NAME OMITTED'
MSG30L   EQU   *-MSG30
MSG31    DS    0C
         DC    CL11'FXSPARM31E'
         DC    C'STAGING DATASET PREFIX TOO LONG'
MSG31L   EQU   *-MSG31
MSG32    DS    0C
         DC    CL11'FXSPARM32I'
         DC    C'VOLSER ADDED TO LIST'
MSG32L   EQU   *-MSG32
MSG33    DS    0C
         DC    CL11'FXSPARM33E'
         DC    C'MORE THAN 20 VOLUMES ASSIGNED TO SAME DSN'
MSG33L   EQU   *-MSG33
MSG34    DS    0C
         DC    CL11'FXSPARM34I'
         DC    C'NEW DATASET PREFIX ADDED TO LIST'
MSG34L   EQU   *-MSG34
MSG35    DS    0C
         DC    CL11'FXSPARM35E'
         DC    C'DSN AND VOLSER MISSING'
MSG35L   EQU   *-MSG35
MSG36    DS    0C
         DC    CL11'FXSPARM36E'
         DC    C'DSN PREFIX ENDING DELIMITER MISSING'
MSG36L   EQU   *-MSG36
MSG37    DS    0C
         DC    CL11'FXSPARM37E'
         DC    C'VOLSER MISSING'
MSG37L   EQU   *-MSG37
MSG38    DS    0C
         DC    CL11'FXSPARM38E'
         DC    C'VOLSER IS TOO LONG'
MSG38L   EQU   *-MSG38
MSG39    DS    0C
         DC    CL11'FXSPARM39I'
         DC    C'SNAPSHOT SYSOUT CLASS SET'
MSG39L   EQU   *-MSG39
MSG40    DS    0C
         DC    CL11'FXSPARM40E'
         DC    C'SNAPSHOT SYSOUT CANNOT BE BLANK'
MSG40L   EQU   *-MSG40
MSG41    DS    0C
         DC    CL11'FXSPARM41E'
         DC    C'SNAPSHOT SYSOUT CLASS TOO LONG'
MSG41L   EQU   *-MSG41
MSG42    DS    0C
         DC    CL11'FXSPARM42I'
         DC    C'SYSTEM NAME SET'
MSG42L   EQU   *-MSG42
MSG43    DS    0C
         DC    CL11'FXSPARM43E'
         DC    C'SYSTEM NAME BLANK'
MSG43L   EQU   *-MSG43
MSG44    DS    0C
         DC    CL11'FXSPARM44I'
         DC    C'STAGING VOLUME ADDED TO LIST'
MSG44L   EQU   *-MSG44
MSG45    DS    0C
         DC    CL11'FXSPARM45E'
         DC    C'DUPLICATED STAGING VOLUME DEFINITION'
MSG45L   EQU   *-MSG45
MSG46    DS    0C
         DC    CL11'FXSPARM46E'
         DC    C'STAGING VOLUME VOLSER IS TOO LONG'
MSG46L   EQU   *-MSG46
MSG47    DS    0C
         DC    CL11'FXSPARM47E'
         DC    C'VOLSER OMITTED'
MSG47L   EQU   *-MSG47
MSG48    DS    0C
         DC    CL11'FXSPARM48E'
         DC    C'SMF ID OMITTED'
MSG48L   EQU   *-MSG48
MSG49    DS    0C
         DC    CL11'FXSPARM49E'
         DC    C'SMF ID IS TOO LONG'
MSG49L   EQU   *-MSG49
MSG50    DS    0C
         DC    CL11'FXSPARM50I'
         DC    C'EXTERNAL USER DEFINED SUCCESSFULLY'
MSG50L   EQU   *-MSG50
MSG51    DS    0C
         DC    CL11'FXSPARM51E'
         DC    C'SMF ID OMITTED'
MSG51L   EQU   *-MSG51
MSG52    DS    0C
         DC    CL11'FXSPARM52E'
         DC    C'SMF ID TOO LONG'
MSG52L   EQU   *-MSG52
MSG53    DS    0C
         DC    CL11'FXSPARM53E'
         DC    C'EXTERNAL USER ID OMITTED'
MSG53L   EQU   *-MSG53
MSG54    DS    0C
         DC    CL11'FXSPARM54E'
         DC    C'EXTERNAL USER ID TOO LONG'
MSG54L   EQU   *-MSG54
MSG55    DS    0C
         DC    CL11'FXSPARM55E'
         DC    C'LOCAL USER ID OMITTED'
MSG55L   EQU   *-MSG55
MSG56    DS    0C
         DC    CL11'FXSPARM56E'
         DC    C'LOCAL USER ID TOO LONG'
MSG56L   EQU   *-MSG56
MSG57    DS    0C
         DC    CL11'FXSPARM57E'
         DC    C'NO FXNODE WITH MATCHING SMFID'
MSG57L   EQU   *-MSG57
         LTORG
* ------------------------------------------------------------------ *
*                                                                    *
*        WORK AREAS                                                  *
*                                                                    *
* ------------------------------------------------------------------ *
WORKAREA DSECT
WORKSAVE DS    18F                   REGISTER SAVE AREA
PARSESAV DS    5F                    REGISTER SAVE AREA FOR PARSE
PARSEIN  DS    A                     PARSE DATA INPUT ADDRESS
PARSEIL  DS    H                     LENGTH OF DATA AT PARSE IN
PARSEOL  DS    H                     LENGTH OF DATA IN PARSE OUT
WORKLEN  DS    H                     WORK LENGTH
PARSEOUT DS    CL80                  OUTPUT FROM PARSE
CARDDATA DS    CL80                  CONTROL STATEMENT I/O AREA
PARSEDLM DS    C                     DELIMITER THAT STOPPED PARSE
WORKWORK DS    CL44                  WORK AREA
WORKDCB  DS    0F,(DCBL)X            FXIN DCB
         PRTBLOK  DSECT=NO
         SESSREQ  DSECT=NO
         FX24PRM  DSECT=NO
WORKL    EQU   *-WORKAREA
* ------------------------------------------------------------------ *
*              DESTINATION CONTROL BLOCK                             *
* ------------------------------------------------------------------ *
         DESTBLOK DSECT=YES
* ------------------------------------------------------------------ *
*              SESSION CONTROL BLOCK                                 *
* ------------------------------------------------------------------ *
         SESSBLOK DSECT=YES
* ------------------------------------------------------------------ *
*              RESTORE CONTROL BLOCK                                 *
* ------------------------------------------------------------------ *
         RSTRBLOK DSECT=YES
* ------------------------------------------------------------------ *
*              STAGING VOLUME BLOCK                                  *
* ------------------------------------------------------------------ *
         STGEDEV  DSECT=YES
* ------------------------------------------------------------------ *
*              EXTERNAL USER BLOCK                                   *
* ------------------------------------------------------------------ *
         XUSRBLOK DSECT=YES
* ------------------------------------------------------------------ *
*              COMMON DATA MAP                                       *
* ------------------------------------------------------------------ *
         FXSCOMM  TYPE=DSECT
* ------------------------------------------------------------------ *
*              EQUATES                                               *
* ------------------------------------------------------------------ *
         COPY REGEQU
         END  FXSPARM
./ ADD NAME=FXSPRTQ  0100-99056-99056-1500-00091-00091-00000-FX-REL1

         TITLE 'FXSPRTQ  QUEUE WORK TO PRINT SUB-TASK'
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXSPRTQ                                               *
*                                                                     *
*  Function:                                                          *
*   Print may be generated under multiple tasks.  Print is done by    *
*   a separate subtask.  This is a subroutine to add elements to the  *
*   print subtask work queue.  This module does not follow the        *
*   "normal" FX linkage or work area usage.  Any work areas must be   *
*   allocated and released dynamically.                               *
*                                                                     *
*   At entry this routine expects                                     *
*     R1  - PRTBLOK Address                                           *
*     R11 - FXSCOMM address                                           *
*     R13 - Callers save area address                                 *
*     R14 - Return address                                            *
*     R15 - Entry point address                                       *
*                                                                     *
* ------------------------------------------------------------------- *
FXSPRTQ  CSECT
FXSPRTQ  AMODE 31
FXSPRTQ  RMODE ANY
         STM   R14,R12,12(R13)       SAVE CALLER'S REGISTERS
         LR    R12,R15               COPY BASE ADDRESS
         USING FXSPRTQ,R12           DEFINE BASE
         USING FXSCOMM,R11           DEFINE BASE
         LR    R10,R1                COPY PRTBLOK ADDRESS
         USING PRTBLOK,R10           DEFINE BASE
         B     PRT0000               SKIP EYECATCHERS
         DC    ((PFXMODNM-MODPRFX)-(*-FXSPRTQ))X'00'
         DC    CL8'FXSPRTQ'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
         DC    C'QUEUE WORK TO PRINT SUBTASK'
PRT0000  DS    0H
         GETMAIN RU,LV=72            ACQUIRE STORAGE FOR SAVE AREA
         ST    R13,4(R1)             SAVE SAVE AREA ADDRESS
         ST    R1,8(R13)             CHAIN TO PREVIOUS SAVE AREA
         LR    R13,R1                SET SAVE AREA ADDRESS
         ITRACE ID=ENTRY
         GETMAIN RU,                 ACQUIRE STORAGE FOR PRINT BLOCK   +
               LV=PRTBLOKL           .. SIZE
         MVC   0(PRTBLOKL,R1),PRTBLOK
         MVI   PRTCC,C' '            CLEAR CARRIAGE CONTROL
         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC
         LR    R10,R1                COPY BLOCK'S ADDRESS
         MVC   PRTEYE,PRTID          SET EYECATCHER
PRT0010  DS    0H
         L     R2,PRTREQ             FIRST REQUEST BLOCK'S ADDRESS
         ST    R2,PRTNEXT            SET CHAIN POINTER
         CS    R2,R10,PRTREQ         ADD NEW BLOCK TO CHAIN
         BNE   PRT0010               UNSUCCESSFUL.. TRY AGAIN
         ITRACE ID=QUEUED,           NEW BLOCK IS ON THE QUEUE         +
               RDATA1=R10,           .. NEW BLOCK'S ADDRESS            +
               RDATA2=R2             .. PREVIOUS BLOCK'S ADDRESS
         POST  PRTWORK               POST PRINT TASK ECB
* ------------------------------------------------------------------- *
*             EXIT                                                    *
* ------------------------------------------------------------------- *
         ITRACE ID=EXIT
         LR    R1,R13                COPY SAVE AREA ADDRESS
         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS
         FREEMAIN RU,A=(1),LV=72     FREEMAIN SAVE AREA
         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS
         SR    R15,R15               GIVE GOOD RETURN CODE
         BR    R14                   RETURN TO CALLER
* ------------------------------------------------------------------ *
*                                                                    *
*        CONSTANTS                                                   *
*                                                                    *
* ------------------------------------------------------------------ *
PRTID    DC    CL8'PRTBLOK'
         LTORG
* ------------------------------------------------------------------ *
*              PRINT REQUEST BLOCK                                   *
* ------------------------------------------------------------------ *
         PRTBLOK  DSECT=YES
* ------------------------------------------------------------------ *
*              COMMON DATA MAP                                       *
* ------------------------------------------------------------------ *
         FXSCOMM  TYPE=DSECT
* ------------------------------------------------------------------ *
*                                                                    *
*              EQUATES                                               *
*                                                                    *
* ------------------------------------------------------------------ *
         COPY REGEQU
         END  FXSPRTQ
./ ADD NAME=FXSPRTS  0100-99056-99056-1500-00238-00238-00000-FX-REL1

         TITLE 'FXSPRTS    PRINT SUBTASK'
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXSPRTS                                               *
*                                                                     *
*   FX consists of multiple tasks and has asynchronous exits.  It is  *
*   possible that multiple tasks would try to print at the same time. *
*   Instead of trying to serialize a DCB, print was moved to this     *
*   subtask.  Any other subtask or exit may queue work for this task  *
*   from PRTREQ in the common area.                                   *
*                                                                     *
* ------------------------------------------------------------------- *
FXSPRTS  CSECT
FXSPRTS  AMODE 31
FXSPRTS  RMODE 24
         USING FXSPRTS,R12           DEFINE BASE
         USING PRTBLOK,R7            DEFINE BASE
         USING FXSCOMM,R11           DEFINE BASE
         STM   R14,R12,12(R13)       CHAIN REGISTERS
         LR    R12,R15               COPY ENTRY POINT ADDRESS
         L     R11,0(R1)             LOAD FXSCOMM'S ADDRESS
         GETMAIN R,LV=WORKL          ACQUIRE STORAGE FOR WORK AREA
         B     PRT0000
         DC    ((PFXMODNM-MODPRFX)-(*-FXSPRTS))X'00'
         DC    CL8'FXSPRTS'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
PRT0000  DS    0H
         USING WORKAREA,R1           DEFINE BASE
         XC    WORKAREA+000(256),WORKAREA+000
         XC    WORKAREA+256(WORKL-256),WORKAREA+000
         ST    R13,4(R1)             CHAIN PREVIOUS SAVE AREA TO OURS
         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO PREVIOUS
         LR    R13,R1                COPY WORK AREA ADDRESS
         DROP  R1
         USING WORKAREA,R13          DEFINE BASE
         ST    R12,APRTS             SET OUR ENTRY POINT IN COMMON
         ITRACE ID=INIT
         MVC   WKDCB(DCBL),DCBI      INITIALIZE DCB IN WORK AREA
         MVI   WKCC,C' '             INITIALIZE CARRIAGE CONTROL
         MVC   WKDATE(PRTLRECL-1),WKCC
         MVC   WKOCPL(OCPLL),OCPLI   INITIALIZE OPEN/CLOSE PARM LIST
         ZAP   WKLINE,P0             INITIALIZE LINE COUNT
         ZAP   WKPAGE,P0             INITIALIGE PAGE COUNT
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         OPEN  (WKDCB,OUTPUT),MF=(E,WKOCPL)
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
PRT0010  DS    0H
         TM    PRTWORK,X'40'         ECB ALREADY POSTED?
         BO    PRT0020               GET BUSY
         LA    R1,PRTWORK            WORK TO DO ECB
         ITRACE ID=WORKWAIT,         WAITING FOR WORK                  +
               RDATA1=R1             .. ECB'S ADDRESS
         WAIT  1,ECB=(1)             WAIT FOR WORK TO DO ECB
         ITRACE ID=WOKEUP
PRT0020  DS    0H
         XC    PRTWORK,PRTWORK       RESET ECB
         SR    R1,R1                 CLEAR REGISTER
PRT0030  DS    0H
         ICM   R10,15,PRTREQ         FIRST REQUEST BLOCK
         BZ    PRT0210               NOTHING ON CHAIN
         CS    R10,R1,PRTREQ         GET REQUEST CHAIN
         BNE   PRT0030
         USING PRTBLOK,R10           DEFINE BASE
         ITRACE ID=HAVEQ,            WE HAVE THE QUEUE                 +
               RDATA1=R10            .. FIRST (LAST) QUEUE BLOCK
PRT0040  DS    0H
         L     R2,PRTNEXT            NEXT BLOCK'S ADDRESS
         ST    R1,PRTNEXT            SET POINTER
         LR    R1,R10                SWITCH
         LTR   R10,R2                SWITCH
         BNZ   PRT0040               LOOP
         LR    R10,R1                COPY FIRST BLOCK'S ADDRESS
PRT0050  DS    0H
         CLI   PRTCMD,$PRTHEAD       FORCED HEADING?
         BE    PRT0120               YES
         MVC   WKCC,PRTCC            COPY CARRIAGE CONTROL
         TIME  DEC
         STM   R0,R1,WKTIMDAY        SAVE TIME AND DATE
         MVC   WKTIME,TIMEEDWD       INITIALIZE WITH EDIT WORD
         ED    WKTIME,WKTIMDAY       EDIT TIME
         MVC   WKDATE,DATEEDWD       INITIALIZE WITH EDIT WORD
         ED    WKDATE,WKTIMDAY+5     EDIT DATE
         MVC   WKMSGID,PRTMSGID      COPY MESSAGE ID
         LA    R1,WKMSGID+(L'WKMSGID-1)
PRT0060  DS    0H
         CLI   0(R1),C' '            BLANK?
         BNE   PRT0070               NO
         BCT   R1,PRT0060            LOOP
PRT0070  DS    0H
         CLI   0(R1),C'E'            'ERROR' MESSAGE
         BNE   PRT0080
         MVI   WKMSGERR,C'*'         FLAG ERROR MESSAGE
PRT0080  DS    0H
         LA    R1,WKDATA             FIRST PRINT AREA BYTE
         LA    R2,PRTDATA            PRINT OUTPUT AREA BYTE
         LA    R3,L'PRTDATA          MAXIMUM LOOPS
PRT0090  DS    0H
         CLC   COMMBLKS(2),0(R2)     2 BLANKS IN A ROW?
         BE    PRT0100               YES
         MVC   0(1,R1),0(R2)         COPY TO OUTPUT AREA
         LA    R1,1(R1)              NEXT OUTPUT BYTE
PRT0100  DS    0H
         LA    R2,1(R2)              NEXT INPUT BYTE
         BCT   R3,PRT0090            LOOPS
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         PUT   WKDCB,WKCC            PRINT
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         AP    WKLINE,P1             ADD 1 TO LINE COUNT
         CLI   WKCC,C' '             SINGLE SPACE
         BE    PRT0110               YES
         AP    WKLINE,P1             ADD 1 TO LINE COUNT
         CLI   WKCC,C'0'             DOUBLE SPACE?
         BE    PRT0110               YES
         AP    WKLINE,P1             ADD 1 TO LINE COUNT
PRT0110  DS    0H
         MVI   WKCC,C' '             INITIALIZE CARRIAGE CONTROL
         MVC   WKDATE(PRTLRECL-1),WKCC
         CP    WKLINE,COMMMAXL       TIME FOR HEADING?
         BNH   PRT0200               NOT YET
PRT0120  DS    0H
         AP    WKPAGE,P1             ADD 1 TO PAGE COUNT
         MVC   WKDATA(HEADINGL),HEADING
         MVC   WKDATA+(HEADPAGE-HEADING)(L'HEADPAGE),PAGEEDWD
         ED    WKDATA+(HEADPAGE-HEADING)(L'HEADPAGE),WKPAGE
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         PUT   WKDCB,WKCC            PRINT
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         ZAP   WKLINE,P1             RESET LINE COUNT
         MVI   WKCC,C' '             INITIALIZE CARRIAGE CONTROL
         MVC   WKDATE(PRTLRECL-1),WKCC
PRT0200  DS    0H
         LR    R1,R10                COPY PRTBLOK ADDRESS
         L     R10,PRTNEXT           NEXT BLOCK'S ADDRESS
         FREEMAIN RU,A=(1),LV=PRTBLOKL
         LTR   R10,R10               ANY MORE PRINT BLOCKS?
         BNZ   PRT0050               YES
PRT0210  DS    0H
         TM    COMMEOJ,$EOJ3         SHUTDOWN PHASE 3?
         BO    EXIT0000              YES.. IT'S MILLER TIME
         B     PRT0010               NO, WAIT
* ------------------------------------------------------------------- *
*        ADDRESSING MODE SWITCHING                                    *
* ------------------------------------------------------------------- *
AM24     DS    0H
         LA    R15,0(R15)            CLEAR HIGH BIT(S)
         BSM   R0,R15                RETURN IN 24-BIT MODE
AM31     DS    0H
         LA    R15,0(R15)            CLEAR HIGH BIT(S)
         O     R15,X80               SET HIGH BIT ON
         BSM   R0,R15                RETURN IN 31-BIT MODE
* ------------------------------------------------------------------- *
*        EXIT                                                         *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         CLOSE WKDCB,MF=(E,WKOCPL)   CLOSE DCB
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         LR    R1,R13                COPY WORK AREA ADDRESS
         L     R13,4(R13)            RESTORE REGISTER 13
         FREEMAIN R,A=(1),LV=WORKL   FREE WORK AREA
         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS
         SR    R15,R15               GIVE GOOD RETURN CODE
         BR    R14                   RETURN TO CALLER
PRTMVC   MVC   WKDATE(0),PRTDATA     COPY PRINT DATA
* ------------------------------------------------------------------- *
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
X80      DC    A(X'80000000')
DATEEDWD DC    X'4021204B202020'
TIMEEDWD DC    X'4021204B20204B2020'
PAGEEDWD DC    X'402020202120'
P0       DC    P'0'
P1       DC    P'1'
HEADING  DS    0C
         DC    51C' '
         DC    C'FX LOG'
         DC    51C' '
         DC    C'PAGE '
HEADPAGE DC    CL6' '
HEADINGL EQU   *-HEADING
DCBI     DCB   DSORG=PS,                                               +
               DDNAME=FXPRT,                                           +
               RECFM=FBA,                                              +
               LRECL=PRTLRECL,                                         +
               MACRF=PM
DCBL     EQU   *-DCBI
OCPLI    OPEN  (*,OUTPUT),MF=L
OCPLL    EQU   *-OCPLI
         LTORG
* ------------------------------------------------------------------- *
*                                                                     *
*        WORK AREAS                                                   *
*                                                                     *
* ------------------------------------------------------------------- *
WORKAREA DSECT
WORKSAVE DS    18F                   REGISTER SAVE AREA
WKTIMDAY DS    2F                    TIME/DATE
WKLINE   DS    PL3
WKPAGE   DS    PL3
WKCC     DS    C                     CARRIAGE CONTROL
WKDATE   DS    CL7                   DATE
         DS    C
WKTIME   DS    CL9                   TIME
         DS    C
WKMSGID  DS    CL11                  MESSAGE ID
         DS    C
WKMSGERR DS    C                     ERROR MESSAGE FLAG
         DS    C
WKDATA   DS    CL120                 PRINT DATA
PRTLRECL EQU   *-WKCC
WKDCB    DS    0A,(DCBL)X            RESERVE SPACE FOR DCB
WKOCPL   DS    (OCPLL)X
WORKL    EQU   *-WORKAREA
* ------------------------------------------------------------------- *
*                                                                     *
*              COMMON DATA MAP                                        *
*                                                                     *
* ------------------------------------------------------------------- *
         FXSCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
*              PRINT REQUEST BLOCK                                    *
*                                                                     *
* ------------------------------------------------------------------- *
         PRTBLOK
* ------------------------------------------------------------------- *
*                                                                     *
*              EQUATES                                                *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY REGEQU
         END  FXSPRTS
./ ADD NAME=FXSRECV  0100-99056-99056-1500-01177-01177-00000-FX-REL1

         TITLE 'FILE TRANSMISSION RECEIVE'
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXSRECV                                               *
*                                                                     *
*       A partner node has either a new dataset to transmit to us     *
*       or a dataset we have previously transmitted to the partner    *
*       has been RESTORED.                                            *
*                                                                     *
*       If this is a new dataset being received, the first record is  *
*       the control record from the sender's master file.  We must    *
*       locate an available record in our master file to record the   *
*       request.  The control record contains the size of the         *
*       staging dataset.  The staging dataset is allocated and the    *
*       DCB used to write to it is opened.  On each successive        *
*       iteration the next block is received and written to the       *
*       stage dataset.  When the last block has been received, the    *
*       sender will notify us by a "LAST" indicator.                  *
*                                                                     *
*       When a dataset we previously transmitted to a partner has     *
*       been restored by the partner, we will be notified of the      *
*       success or failure of the RESTORE.  The partner will send     *
*       the request's identification number and the status of the     *
*       restore.  We must update the status of the request to this    *
*       node.  If this is the last (or only) node to respond with     *
*       the RESTORE status, the request can be flagged complete.      *
*                                                                     *
* ------------------------------------------------------------------- *
SRECV    FXPRFX 'FILE TRANSMISSION RECEIVE'
FXSRECV  AMODE 31
FXSRECV  RMODE ANY
         B     RECV0000
DXDSTART DC    Q(DXDSRECV)           DISPLACEMENT TO WORK AREA
RECV0000 DS    0H
         LA    R4,2048(R12)          SET 2ND BASE
         LA    R4,2048(R4)           SET 2ND BASE
         USING FXSRECV,R12,R4        DEFINE BASE REGISTER
         LR    R8,R1                 COPY PARM ADDRESS
         USING VTAMBLOK,R8           DEFINE BASE
         L     R7,VTAMSESS           SESSION BLOCK'S ADDRESS
         USING SESSBLOK,R7           DEFINE BASE
         L     R6,VTAMCONV           CONVERSATION BLOCK'S ADDRESS
         USING CONVBLOK,R6           DEFINE BASE
         CLC   DXDID,MODID           WORK AREA INITIALIZED?
         BE    RECV0010              YES
         MVC   DXDID,MODID           WORK AREA INITIALIZED
         MVI   PRTCC,C' '            INITIALIZE PRINT I/O AREA
         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC
         GETMAIN RU,                 ACQUIRE 24-BIT PARM BLOCK         +
               LV=FX24L,             .. AREA SIZE                      +
               LOC=BELOW             .. FROM BELOW THE LINE
         ST    R1,DXD24              SAVE 24-BIT WORK AREA ADDRESS
         ITRACE ID=FX24PRM,          24-BIT WORK AREA ACQUIRED         +
               RDATA1=R1             .. SAVE WORK AREA'S ADDRESS
*---------------------------------------------------------------------*
*                                                                     *
*        This is a receive conversation.                              *
*                                                                     *
*---------------------------------------------------------------------*
RECV0010 DS    0H
         TM    COMMEOJ,$EOJ3         SHUTDOWN PHASE 3?
         BO    EXIT0000              YES
         L     R9,DXD24              24-BIT PARM AREA ADDRESS
         USING FX24PRM,R9            DEFINE BASE
         ITRACE ID=LASTFUNC,         TRACE 'LAST FUNCTION'             +
               DATA1=CONVFUNC        ..
         CLI   CONVFUNC,0            ANY FUNCTION?
         BNE   RECV0020              YES
         ITRACE ID=1STRECV           STARTING A NEW RECEIVE PROCESS
         L     R1,CONVDCB            DCB'S ADDRESS
         L     R15,ADCBWI            'WRITE' DCB ADDRESS
         MVC   0(DCBWL,R1),0(R15)    INITIALIZE 'WRITE' DCB
         B     RECV0290
RECV0020 DS    0H
         ITRACE ID=RECVCONT,         CONTINUATION OF RECEIVE END       +
               DATA1=SESSNAME,       .. LU NAME                        +
               RDATA2=R6             .. CONVERSATION BLOCK'S ADDRESS
         CLI   CONVFUNC,$CONVFC      LAST FUNCTION A SEND CONFIRM?
         BE    RECV0530              YES
         CLI   CONVFUNC,$CONVFR      LAST FUNCTION A VTAM RECEIVE?
         BE    RECV0050              YES
         CLI   CONVFUNC,$CONVFS      LAST FUNCTION A VTAM SEND?
         BE    RECV0280              YES..
         L     R2,CONVDECB           DECB ADDRESS
         TM    0(R2),X'40'           ECB POSTED?
         BNO   EXIT0010              NO.. NOTHING FURTHER TO DO HERE
         ST    R2,DECB24             SET DECB ADDRESS
         FX24  $CHECK                ISSUE CHECK
         ITRACE ID=BSAMWTDN          BSAM WRITE COMPLETE
         NI    CONVSTAT,255-$CONVPND WRITE IS NO LONGER PENDING
         ICM   R1,15,CONVCKPT        NUMBER OF WRITES
         LA    R1,1(R1)              PLUS 1
         STCM  R1,15,CONVCKPT        SAVE TOTAL WRITES
         SR    R0,R0                 CLEAR REGISTER
         D     R0,F100               DIVIDE BY 100
         LTR   R0,R0                 TIME FOR A CHECKPOINT?
         BNZ   RECV0290              NO
         MVC   DCB24,CONVDCB         SET DCB ADDRESS
         FX24  $NOTE                 ISSUE NOTE
         MVI   MSTRCMD,$MSTRRD       SET COMMAND (READ)
         MVC   MSTRREC#,CONVREC#     SET RECORD NUMBER
         BAL   R14,MSTR0000          READ MASTER FILE RECORD
         USING REQBLOK,R5            DEFINE BASE
         LA    R3,REQNDENM           FIRST NODE NAME
         USING REQNDENM,R3           DEFINE BASE
RECV0030 DS    0H
         CLC   REQNDENM,COMMAPLN     RIGHT NODE?
         BE    RECV0040              YES
         LA    R3,REQNDEL(R3)        NEXT NODE
         B     RECV0030              LOOP
RECV0040 DS    0H
         MVC   REQNDECR,CONVCKPT     SAVE RECORD NUMBER
         MVC   REQNDECT,TTR24        SAVE TTR
         MVI   MSTRCMD,$MSTRWRT      SET COMMAND (WRITE)
         BAL   R14,MSTR0000          READ MASTER FILE RECORD
         B     RECV0290              ISSUE ANOTHER RECEIVE
         DROP  R3
*---------------------------------------------------------------------*
*        A RECEIVE is pending.                                        *
*---------------------------------------------------------------------*
RECV0050 DS    0H
         TM    CONVSTAT,$CONVPND     STILL PENDING?
         BO    EXIT0010              YES.. NOTHING FURTHER TO DO NOW
         MVI   VTAMCMD,$VTAMCHK      SET COMMAND (ISSUE A CHECK)
         BAL   R14,VSUB0000          LINK TO VSUB
         L     R1,CONVRPLX           RPL EXTENSION'S ADDRESS
         USING ISTRPL6X,R1           DEFINE BASE
         OC    RPL6RC,RPL6RC         ALL ZEROS?
         BNZ   ERR0010               NO
         L     R2,CONVIOA            I/O AREA ADDRESS
         USING USERREQ,R2            DEFINE BASE
         ITRACE ID=RECVDONE,         VTAM RECEIVE COMPLETED            +
               DATA1=USERMOD         .. DATA FROM THE RECEIVE
         CLC   RESTART,USERMOD       RESTART?
         BE    RECV0320              YES
         CLC   RESTORE,USERMOD       RESTORE NOTIFICATION?
         BE    RECV0400              YES
         CLC   LAST,USERMOD          LAST RECORD?
         BE    RECV0260              YES
         CLC   XFER,USERMOD          REQUEST BEING TRANSFERRED TO US?
         BE    RECV0230              YES
         CLC   NULL,USERMOD          NULL (USED TO ASK FOR A CONFIRMED)
         BE    RECV0270              YES
         TM    RPL6RCV1,RPL6WDAL     DE-ALLOCATE RECEIVED?
         BO    RECV0300              YES.. ERROR
         CLC   FIRST,USERMOD         FIRST RECORD?
         BE    RECV0060              YES
*---------------------------------------------------------------------*
*        Another DATA record has been received.                       *
*        Start the WRITE to the staging dataset.                      *
*---------------------------------------------------------------------*
         ITRACE ID=RECVDATA
         MVC   DCB24,CONVDCB         SET DCB ADDRESS
         SR    R0,R0                 CLEAR REGISTER
         ICM   R0,3,USERLEN          DATA LENGTH
         SH    R0,=Y(USERIO-USERREQ) MINUS CONTROL DATA LENGTH
         STCM  R0,3,LRECL24          PASS LENGTH TO FX24
         LA    R0,USERIO             DATA ADDRESS
         ST    R0,IOA24              SET I/O AREA ADDRESS
         MVC   DECB24,CONVDECB       SET DECB ADDRESS
         FX24  $WRITE                START WRITE
         MVI   CONVFUNC,$CONVFB      LAST FUNCTION WAS BSAM
         OI    CONVSTAT,$CONVPND     WRITE IS PENDING
         B     EXIT0010              EXIT
*---------------------------------------------------------------------*
*        This is the first record for a new dataset being transmitted *
*        to us.  First locate an available record on the master file  *
*        to save the master file record in the I/O area, then         *
*        allocate the staging dataset and open the DCB.               *
*---------------------------------------------------------------------*
RECV0060 DS    0H
         ITRACE ID=RECV1ST
         XC    MSTRREC#,MSTRREC#     INITIALIZE RECORD NUMBER
         B     RECV0080
RECV0070 DS    0H
         SR    R1,R1                 CLEAR REGISTER
         ICM   R1,3,MSTRREC#         CURRENT MASTER FILE RECORD NUMBER
         LA    R1,1(R1)              NEXT MASTER FILE NUMBER
         STCM  R1,3,MSTRREC#         SAVE NEW RECORD NUMBER
RECV0080 DS    0H
         MVI   MSTRCMD,$MSTRRD       SET COMMAND (READ)
         BAL   R14,MSTR0000          READ MASTER FILE RECORD
         USING REQBLOK,R5            DEFINE BASE
         L     R2,CONVIOA            I/O AREA ADDRESS
         LA    R2,USERDATA+DCBWL                  REQUEST BLOCK ADDRESS
         ITRACE ID=XREQBLOK,RDATA1=R2
         CLC   COMMAPLN,REQENODE-REQBLOK(R2)   ORIGINALLY ENTERED HERE?
         BNE   RECV0090                        NO.. FIND AVAILABLE RECD
         CLC   REQENODE,REQENODE-REQBLOK(R2)   ENTRY NODES MATCH?
         BNE   RECV0070                        NO
         CLC   REQNBR,REQNBR-REQBLOK(R2)       ID'S MATCH?
         BNE   RECV0070                        NO
         MVC   REQFSIZE,REQFSIZE-REQBLOK(R2)   SAVE STAGE DATASET SIZE
         MVC   REQUTIL,REQUTIL-REQBLOK(R2)     SAVE UTILITY USED
         B     RECV0110
RECV0090 DS    0H
         CLI   REQSTAT,$REQFREE      AVAILABLE RECORD?
         BH    RECV0070              NO
         LA    R0,REQESTOR-REQBLOK(R2)   DATA ADDRESS (INPUT)
         LA    R1,REQNDENM-REQESTOR  LENGTH
         LA    R14,REQESTOR          DATA ADDRESS (OUTPUT)
         LR    R15,R1                DATA LENGTH
         MVCL  R14,R0                COPY DATA TO MASTER FILE
         LA    R14,REQNDENM-REQBLOK(R2)
         LA    R3,REQNDENM           FIRST OUTPUT NODE NAME
         USING REQNDENM,R3           DEFINE BASE
         LA    R15,$MAXNODE          NUMBER OF NODES
RECV0100 DS    0H
         MVC   REQNDENM,0(R14)       COPY NODE NAME
         MVI   REQNDEST,0            INITIALIZE NODE STATUS
         ZAP   REQNDETD,P0           INITIALIZE TRANSMISSION DATE
         XC    REQNDETT,REQNDETT     INITIALIZE TRANSMISSION TIME
         ZAP   REQNDERD,P0           INITIALIZE RESTORE NOTIFY DATE
         XC    REQNDERT,REQNDERT     INITIALIZE RESTORE NOTIFY TIME
         XC    REQNDECR,REQNDECR     INITIALIZE CHECKPOINT RECORD
         XC    REQNDECT,REQNDECT     INITIALIZE CHECKPOINT TTR
         LA    R3,REQNDEL(R3)        NEXT NODE
         LA    R14,REQNDEL(R14)      NEXT NODE
         BCT   R15,RECV0100          LOOP
         DROP  R3
RECV0110 DS    0H
         MVC   CONVREC#,MSTRREC#     SAVE MASTER FILE RECORD NUMBER
         MVI   REQSTAT,$REQRECV      DATA SET BEING RECEIVED
         MVC   REQIDSNM,COMMBLKS     CLEAR SYSIN DATASET NAME
         MVC   REQSDSNM,COMMBLKS     CLEAR SYSPRINT DATASET NAME
*---------------------------------------------------------------------*
*                                                                     *
*      Before accepting the request:                                  *
*        1) Make sure the data set does not exceed our MAXSIZE        *
*        2) Convert external userids to local ids                     *
*        3) Make sure the user has access to the data set being       *
*           received.                                                 *
*        4) If this is a full data set transmit:                      *
*           a) if REPLACE=N, make sure the data set is not already    *
*              cataloged.                                             *
*           b) make sure there is a RESTORE statement that covers     *
*              the data set name.                                     *
*                                                                     *
*---------------------------------------------------------------------*
         CLC   REQFSIZE,COMMMAX      TOO LARGE?
         BH    ERR0100               YES
         ICM   R15,15,COMMXUSR       FIRST EXTERNAL ID BLOCK
         BZ    RECV0150              NO EXTERNAL ID BLOCKS
         USING XUSRBLOK,R15          DEFINE XUSRBLOK BASE
RECV0120 DS    0H
         CLC   XUSRSMF,SESSSMF       SMF ID MATCH?
         BNE   RECV0130              NO
         CLC   XUSRID1,REQESTOR      USER ID MATCH?
         BE    RECV0140              YES
RECV0130 DS    0H
         ICM   R15,15,XUSRNEXT       NEXT EXTERNAL USER BLOCK
         BZ    RECV0150              NO MATCHES
         B     RECV0120              LOOP
RECV0140 DS    0H
         MVC   REQESTOR,XUSRID2      CHANGE TO LOCAL ID
RECV0150 DS    0H
         L     R1,ARACL              RACF LIST FORM ADDRESS
         MVC   DXDRACL(RACLL),0(R1)  COPY LIST FORM
         STM   R2,R5,DXDRACSV        SAVE REGISTERS USED BY RACROUTE
         LA    R2,DSCLASS            'CLASS'
         LA    R3,REQODSNM           'RESOURCE'
         CLC   REQDDSNM,COMMBLKS     DESTINATION NAME BLANK?
         BE    RECV0160              YES
         LA    R3,REQDDSNM           CHANGE TO DESTINATION NAME
RECV0160 DS    0H
         LA    R15,REQESTOR          'USER ID' (THIRD PARTY CHECK)
         LA    R5,SAFWORK            SAF WORK AREA ADDRESS
         CLC   REQOMEM,COMMBLKS      PDS MEMBER?
         BE    RECV0170              NO
         RACROUTE REQUEST=AUTH,      CHECK USER'S ACCESS AUTHORITY     +
               ATTR=UPDATE,          .. UPDATE LEVEL REQUIRED          +
               CLASS=(R2),           .. CLASS                          +
               ENTITY=((R3)),        .. RESOURCE                       +
               USERID=(R15),         .. USER ID (THIRD PARTY CHECK)    +
               WORKA=(R5),           .. SAF WORK AREA                  +
               RELEASE=1.8.1,        .. 1.8.1 PARM LIST FORMAT         +
               MF=(E,DXDRACL)        .. EXECUTE FORM/LIST FORM ADDRESS
         B     RECV0180
RECV0170 DS    0H
         RACROUTE REQUEST=AUTH,      CHECK USER'S ACCESS AUTHORITY     +
               ATTR=ALTER,           .. ALTER LEVEL REQUIRED           +
               CLASS=(R2),           .. CLASS                          +
               ENTITY=((R3)),        .. RESOURCE                       +
               USERID=(R15),         .. USER ID (THIRD PARTY CHECK)    +
               WORKA=(R5),           .. SAF WORK AREA                  +
               RELEASE=1.8.1,        .. 1.8.1 PARM LIST FORMAT         +
               MF=(E,DXDRACL)        .. EXECUTE FORM/LIST FORM ADDRESS
RECV0180 DS    0H
         LM    R2,R5,DXDRACSV        RESTORE REGISTERS
         ITRACE ID=AUTHRC,           TRACE RETURN CODE                 +
               RDATA1=R15            .. RETURN CODE
         CH    R15,H4                0=AUTHORIZED, 4=UNPROTECTED
         BH    ERR0110               .. USER DOES NOT HAVE ACCESS
         CLC   REQOMEM,COMMBLKS      MEMBER NAME PRESENT?
         BNE   RECV0220              YES.. NOT A FULL DATA SET
         MVC   DSN24,REQODSNM        ASSUME NO NEW NAME
         CLC   REQDDSNM,COMMBLKS     NEW NAME PRESENT?
         BE    RECV0190              NO
         MVC   DSN24,REQDDSNM        USE NEW NAME
RECV0190 DS    0H
         CLI   REQREPL,C'Y'          REPLACE?
         BE    RECV0200              YES
         FX24  $LOCATE               ISSUE LOCATE
         ITRACE ID=LOCATERC,         TRACE LOCATE RETURN CODE          +
               RDATA1=R15
         LTR   R15,R15               SUCCESSFUL?
         BZ    ERR0130               YES.. DATA SET ALREADY EXISTS
RECV0200 DS    0H
         ICM   R15,15,COMMRSTR       FIRST RESTORE BLOCK
         BZ    ERR0120               NO RESTORE BLOCKS
         USING RSTRBLOK,R15          DEFINE RSTRBLOK BASE
RECV0210 DS    0H
         CLC   DEFAULT,RSTRDSN       IS THIS THE DEFAULT ENTRY?
         BE    RECV0220              YES.. MATCHES ANY DATA SET
         LH    R1,RSTRDSNL           DATA SET NAME PREFIX LENGTH
         BCTR  R1,0                  MINUS 1
         EX    R1,DSNCLC             DATA SET PREFIX MATCH?
         BE    RECV0220              YES
         ICM   R15,15,RSTRNEXT       NEXT RESTORE BLOCK
         BZ    ERR0120               NO RESTORE BLOCK
         B     RECV0210              LOOP
DSNCLC   CLC   RSTRDSN(0),DSN24      CHECK DATA SET NAME PREFIX
RECV0220 DS    0H
         FXCALL FXSDAIR,ALLOCATE,    CALL FXSDAIR TO ALLOCATE          +
               STAGING,              .. TYPE IS STAGING                +
               ,,                    .. DDNAME AND DSN OMITTED         +
               REQFSIZE              .. SIZE IN TRACKS
         OC    DAIRR15,DAIRR15       STAGING DATASET ALLOCATED?
         BNZ   ERR0020               NO
         MVC   REQWDSNM,DAIRDSN      SAVE STAGING DATASET NAME
         MVI   MSTRCMD,$MSTRWRT      SET COMMAND (WRITE)
         BAL   R14,MSTR0000          UPDATE MASTER FILE RECORD
         L     R2,CONVIOA            I/O AREA ADDRESS
         USING USERREQ,R2            DEFINE BASE
         LA    R1,USERDATA           INPUT DCB PASSED BY OTHER END
         ITRACE ID=OPENOPUT,         OPENING STAGING FILE              +
               DATA1=DAIRDDN         .. DD NAME RETURNED BY DAIR
         L     R14,CONVDCB           DCB'S ADDRESS
         USING IHADCB,R14            DEFINE BASE
         MVC   DCBDDNAM,DAIRDDN      SET DDNAME
         MVC   DCBBLKSI,DCBBLKSI-IHADCB(R1)    COPY BLOCK SIZE
         MVC   DCBLRECL,DCBBLKSI-IHADCB(R1)    SAME LRECL AS BLOCK SIZE
         MVC   DCBRECFM,DCBRECFM-IHADCB(R1)    COPY RECORD FORMAT
         ST    R14,DCB24             SET DCB ADDRESS
         FX24  $OPENO                OPEN THE DCB
         XC    CONVCKPT,CONVCKPT     INITIALIZE NUMBER OF WRITES
         L     R1,AMSG01             MESSAGE ADDRESS
         MVC   PRTMSGID(MSG01L),0(R1)
         MVC   PRTMSGID+(MSG01NDE-MSG01)(L'MSG01NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG01NBR-MSG01)(L'MSG01NBR),DXDDWORD+4
         MVC   PRTMSGID+(MSG01NDT-MSG01)(L'MSG01NDT),REQTNODE
         BAL   R14,PRT0000           PRINT MESSAGE
         L     R2,CONVIOA            I/O AREA ADDRESS
         USING USERREQ,R2            DEFINE BASE
         MVI   USERRC,0              SET RETURN CODE
         MVI   VTAMCMD,$VTAMSND      SET COMMAND (SEND)
         BAL   R14,VSUB0000          LINK TO VSUB TO ISSUE SEND
         B     EXIT0010              AND EXIT
*---------------------------------------------------------------------*
*        This is a request for us to transmit that was entered at     *
*        another node and is now being transferred to us.             *
*---------------------------------------------------------------------*
RECV0230 DS    0H
         ITRACE ID=RECVXFER
         TM    RPL6RCV1,RPL6WDAL     DE-ALLOCATE RECEIVED?
         BNO   ERR0060               NO.. ERROR
         TM    RPL6RCV1,RPL6WCFM     CONFIRM REQUEST RECEIVED?
         BNO   ERR0080               NO.. ERROR
         XC    MSTRREC#,MSTRREC#     INITIALIZE RECORD NUMBER
         B     RECV0250
RECV0240 DS    0H
         SR    R1,R1                 CLEAR REGISTER
         ICM   R1,3,MSTRREC#         CURRENT MASTER FILE RECORD NUMBER
         LA    R1,1(R1)              NEXT MASTER FILE NUMBER
         STCM  R1,3,MSTRREC#         SAVE NEW RECORD NUMBER
RECV0250 DS    0H
         MVI   MSTRCMD,$MSTRRD       SET COMMAND (READ)
         BAL   R14,MSTR0000          READ MASTER FILE RECORD
         USING REQBLOK,R5            DEFINE BASE
         CLI   REQSTAT,$REQFREE      AVAILABLE RECORD?
         BH    RECV0240              NO
         MVC   CONVREC#,MSTRREC#     SAVE MASTER FILE RECORD NUMBER
         L     R2,CONVIOA            I/O AREA ADDRESS
         LA    R0,USERDATA+L'REQREC# DATA ADDRESS (INPUT)
         LA    R1,REQBLOKL-L'REQREC# LENGTH MINUS LENGTH OF RECORD #
         LA    R14,REQBLOK+L'REQREC# DATA ADDRESS (OUTPUT)
         LR    R15,R1                DATA LENGTH
         MVCL  R14,R0                COPY DATA TO MASTER FILE
         MVI   REQSTAT,$REQINIT      CHANGE STATUS TO 'INITIAL'
         MVI   MSTRCMD,$MSTRWRT      SET COMMAND (WRITE)
         BAL   R14,MSTR0000          UPDATE MASTER FILE RECORD
         L     R1,AMSG02             MESSAGE ADDRESS
         MVC   PRTMSGID(MSG02L),0(R1)
         MVC   PRTMSGID+(MSG02NDE-MSG02)(L'MSG02NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG02NBR-MSG02)(L'MSG02NBR),DXDDWORD+4
         BAL   R14,PRT0000           PRINT MESSAGE
         B     RECV0520              EXIT
*---------------------------------------------------------------------*
*        The LAST record for a dataset has been received.             *
*        Close the DCB, de-allocate the staging dataset, and          *
*        flag the request in the master file.                         *
*---------------------------------------------------------------------*
RECV0260 DS    0H
         ITRACE ID=RECVLAST
         TM    RPL6RCV1,RPL6WDAL     DE-ALLOCATE RECEIVED?
         BNO   ERR0060               NO.. ERROR
         TM    RPL6RCV1,RPL6WCFM     CONFIRM REQUEST RECEIVED?
         BNO   ERR0080               NO.. ERROR
         MVC   DCB24,CONVDCB         COPY DCB ADDRESS
         FX24  $CLOSE                SET COMMAND
         L     R14,CONVDCB           DCB'S ADDRESS
         USING IHADCB,R14            DEFINE BASE
         FXCALL FXSDAIR,RELEASE,,DCBDDNAM   RELEASE THE DATA SET
         OC    DAIRR15,DAIRR15       RELEASE SUCCESSFUL?
         BNZ   ERR0040               NO
         MVC   MSTRREC#,CONVREC#     SET RECORD NUMBER
         MVI   MSTRCMD,$MSTRRD       SET COMMAND (READ)
         BAL   R14,MSTR0000          READ MASTER FILE
         USING REQBLOK,R5            DEFINE BASE
         MVI   REQSTAT,$REQRCVD      DATASET STATUS IS RECEIVED
         MVI   MSTRCMD,$MSTRWRT      SET COMMAND (WRITE)
         BAL   R14,MSTR0000          LINK TO MASTER FILE MODULE
         L     R1,AMSG03             MESSAGE ADDRESS
         MVC   PRTMSGID(MSG03L),0(R1)
         MVC   PRTMSGID+(MSG03NDE-MSG03)(L'MSG03NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG03NBR-MSG03)(L'MSG03NBR),DXDDWORD+4
         MVC   PRTMSGID+(MSG03NDT-MSG03)(L'MSG03NDT),REQTNODE
         BAL   R14,PRT0000           PRINT MESSAGE
         MVI   VTAMCMD,$VTAMCFM      ISSUE A SEND CONFIRMED
         BAL   R14,VSUB0000          LINK TO VSUB TO ISSUE RECEIVE
         B     EXIT0010              AND EXIT
*---------------------------------------------------------------------*
*        A 'NULL' record has been received.                           *
*---------------------------------------------------------------------*
RECV0270 DS    0H
         ITRACE ID=RECVNULL
         TM    RPL6RCV1,RPL6WDAL     DE-ALLOCATE RECEIVED?
         BNO   ERR0060               NO.. ERROR
         TM    RPL6RCV1,RPL6WCFM     CONFIRM REQUEST RECEIVED?
         BNO   ERR0080               NO.. ERROR
         MVI   VTAMCMD,$VTAMCFM      ISSUE A SEND CONFIRMED
         BAL   R14,VSUB0000          LINK TO VSUB TO ISSUE RECEIVE
         B     EXIT0010              AND EXIT
*---------------------------------------------------------------------*
*        SEND (reply to initial (1ST ) record) has completed          *
*---------------------------------------------------------------------*
RECV0280 DS    0H
         TM    CONVSTAT,$CONVPND     STILL PENDING?
         BO    EXIT0010              YES.. NOTHING FURTHER TO DO NOW
         ITRACE ID=SENDDONE
         MVI   VTAMCMD,$VTAMCHK      SET COMMAND (CHECK)
         BAL   R14,VSUB0000          LINK TO VSUB TO ISSUE CHECK
         L     R1,CONVRPLX           RPL EXTENSION'S ADDRESS
         USING ISTRPL6X,R1           DEFINE BASE
         OC    RPL6RC,RPL6RC         ALL ZEROS?
         BNZ   ERR0010               NO
         L     R2,CONVIOA            I/O AREA ADDRESS
*---------------------------------------------------------------------*
*        Issue another RECEIVE on the conversation                    *
*---------------------------------------------------------------------*
RECV0290 DS    0H
         ITRACE ID=RECEIVE
         MVI   VTAMCMD,$VTAMRCV      SET COMMAND (RECEIVE)
         BAL   R14,VSUB0000          LINK TO VSUB TO ISSUE RECEIVE
         B     EXIT0010              AND EXIT
*---------------------------------------------------------------------*
*        The primary end has de-allocated the conversation.           *
*        Receive was not complete.  Delete the stage dataset          *
*        and set the status in the master file.                       *
*---------------------------------------------------------------------*
RECV0300 DS    0H
         ITRACE ID=DEALLOC
         OC    CONVREC#,CONVREC#     MASTER FILE RECORD PRESENT?
         BZ    RECV0310              NO
         L     R1,AMSG04             MESSAGE ADDRESS
         MVC   PRTMSGID(MSG04L),0(R1) INITIALIZE MESSAGE
         MVC   PRTMSGID+(MSG04NDE-MSG04)(L'MSG04NDE),SESSNAME
         BAL   R14,PRT0000           PRINT MESSAGE
         OC    CONVREC#,CONVREC#     MASTER FILE RECORD PRESENT?
         BZ    RECV0310              NO
         L     R14,CONVDCB           DCB'S ADDRESS
         USING IHADCB,R14            DEFINE BASE
         ST    R14,DCB24             COPY DCB ADDRESS
         FX24  $CLOSE                SET COMMAND
         FXCALL FXSDAIR,DELETE,,DCBDDNAM  DELETE THE DATA SET
         OC    DAIRR15,DAIRR15       DELETE SUCCESSFUL?
         BNZ   ERR0050               NO
         MVC   MSTRREC#,CONVREC#     SET RECORD NUMBER
         MVI   MSTRCMD,$MSTRRD       SET COMMAND (READ)
         BAL   R14,MSTR0000          READ MASTER FILE
         USING REQBLOK,R5            DEFINE BASE
         MVI   REQSTAT,$REQRCVE      ERROR DURING RECEIVE
         MVI   MSTRCMD,$MSTRWRT      SET COMMAND (WRITE)
         BAL   R14,MSTR0000          LINK TO MASTER FILE MODULE
         L     R1,AMSG05             MESSAGE ADDRESS
         MVC   PRTMSGID(MSG05L),0(R1) INITIALIZE MESSAGE
         MVC   PRTMSGID+(MSG05NDE-MSG05)(L'MSG05NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG05NBR-MSG05)(L'MSG05NBR),DXDDWORD+4
         BAL   R14,PRT0000           PRINT MESSAGE
RECV0310 DS    0H
         MVC   VTAMCONV,CONVNEXT     SET 'NEXT' ADDRESS FOR FXVTAM
         FXCALL FXSCONV,DELETE,      DELETE THE CONVERSATION BLOCK     +
               (R6),                 .. CONVBLOK'S ADDRESS             +
               (R7)                  .. SESSBLOK'S ADDRESS
         B     EXIT0020              AND EXIT
*---------------------------------------------------------------------*
*        A session was lost previously.  The sender is now restarting *
*        the transmission.  The sender and receivers checkpoint every *
*        100 records.  First we must locate the master record for     *
*        request.  The stage data set was allocated when the transmit *
*        originally started.  Once we have found the master record,   *
*        the checkpoint data can be used to POINT to the corresponding*
*        stage data set record, and we can begin the receive again.   *
*---------------------------------------------------------------------*
RECV0320 DS    0H
         ITRACE ID=RESTART
         XC    MSTRREC#,MSTRREC#     INITIALIZE RECORD NUMBER
         B     RECV0340
RECV0330 DS    0H
         SR    R1,R1                 CLEAR REGISTER
         ICM   R1,3,MSTRREC#         CURRENT MASTER FILE RECORD NUMBER
         LA    R1,1(R1)              NEXT MASTER FILE NUMBER
         STCM  R1,3,MSTRREC#         SAVE NEW RECORD NUMBER
RECV0340 DS    0H
         MVI   MSTRCMD,$MSTRRD       SET COMMAND (READ)
         BAL   R14,MSTR0000          READ MASTER FILE RECORD
         USING REQBLOK,R5            DEFINE BASE
         CLI   REQSTAT,0             UNUSED RECORD?
         BE    ERR0090               YES.. NOT ON MASTER FILE
         L     R2,CONVIOA            I/O AREA ADDRESS
         LA    R2,USERDATA+DCBWL     REQUEST BLOCK ADDRESS
         ITRACE ID=XREQBLOK,RDATA1=R2
         CLC   REQENODE,REQENODE-REQBLOK(R2)   ENTRY NODES MATCH?
         BNE   RECV0330                        NO
         CLC   REQNBR,REQNBR-REQBLOK(R2)       ID'S MATCH?
         BNE   RECV0330                        NO
         MVC   CONVREC#,MSTRREC#     SAVE MASTER FILE RECORD NUMBER
         LA    R3,REQNDENM           FIRST NODE
         USING REQNDENM,R3           DEFINE BASE
RECV0350 DS    0H
         CLC   REQNDENM,COMMAPLN     RIGHT DESTINATION?
         BE    RECV0360              YES
         LA    R3,REQNDEL(R3)        NEXT NODE
         B     RECV0350              LOOP
RECV0360 DS    0H
         LA    R14,REQNDENM-REQBLOK(R2)   FIRST NODE IN RESTART DATA
RECV0370 DS    0H
         CLC   COMMAPLN,0(R14)       RIGHT DESTINATION?
         BE    RECV0380              YES
         LA    R14,REQNDEL(R14)      NEXT DESTINATION
         B     RECV0370              LOOP
RECV0380 DS    0H
         ST    R14,DXDNDEDA          SAVE NODE DATA ADDRESS
         FXCALL FXSDAIR,ALLOCATE,    CALL FXSDAIR TO ALLOCATE          +
               DATASET,              .. TYPE IS EXISTING DATA SET      +
               ,                     .. DDNAME WILL BE GENERATED       +
               REQWDSNM              .. DATA SET NAME
         L     R14,CONVDCB           DCB ADDRESS
         ST    R14,DCB24              SET DCB ADDRESS
         MVC   DCBDDNAM,DAIRDDN      COPY DD NAME
         L     R1,CONVIOA            I/O AREA ADDRESS
         LA    R1,USERDATA-USERREQ(R1) INPUT DCB PASSED BY OTHER END
         MVC   DCBDDNAM,DAIRDDN      SET DDNAME
         MVC   DCBBLKSI,DCBBLKSI-IHADCB(R1)    COPY BLOCK SIZE
         MVC   DCBLRECL,DCBBLKSI-IHADCB(R1)    SAME AS BLOCK SIZE
         MVC   DCBRECFM,DCBRECFM-IHADCB(R1)    COPY RECORD FORMAT
         FX24  $OPENO                OPEN THE DCB
         L     R14,DXDNDEDA          RESTORE NODE DATA ADDRESS
         CLC   REQNDECR,REQNDECR-REQNDENM(R14)  CHECKPOINT DATA MATCH?
         BNE   RECV0390              NO
         ITRACE ID=GOSTRT            RESTART IS A GO
         MVC   TTR24,REQNDECT        COPY CHECK POINT DATA
         MVC   CONVCKPT,REQNDECR     COPY CHECK POINT RECORD NUMBER
         FX24  $POINT                ISSUE POINT TO RE-POSITION
         L     R1,AMSG11             MESSAGE ADDRESS
         MVC   PRTMSGID(MSG11L),0(R1)
         MVC   PRTMSGID+(MSG11NDE-MSG11)(L'MSG11NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG11NBR-MSG11)(L'MSG11NBR),DXDDWORD+4
         MVC   PRTMSGID+(MSG11NDT-MSG11)(L'MSG11NDT),REQTNODE
         ICM   R1,15,REQNDECR-REQNDENM(R14)     CHECKPOINT RECORD #
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG11REC-MSG11)(L'MSG11REC),DXDDWORD+4
         BAL   R14,PRT0000           PRINT MESSAGE
         L     R2,CONVIOA            I/O AREA ADDRESS
         MVI   USERRC,0              RETURN 'GO' STATUS
         MVI   VTAMCMD,$VTAMSND      SET COMMAND (SEND)
         BAL   R14,VSUB0000          LINK TO VSUB TO ISSUE SEND
         B     EXIT0010              AND EXIT
RECV0390 DS    0H
         ITRACE ID=NOGOSTRT          RESTART IS A NO-GO
         XC    REQNDECR,REQNDECR     CLEAR CHECKPOINT RECORD
         XC    REQNDECT,REQNDECT     CLEAR CHECKPOINT TTR
         MVI   MSTRCMD,$MSTRWRT      SET COMMAND (WRITE)
         BAL   R14,MSTR0000          UPDATE MASTER FILE
         L     R1,AMSG13             MESSAGE ADDRESS
         MVC   PRTMSGID(MSG13L),0(R1)
         MVC   PRTMSGID+(MSG13NDE-MSG13)(L'MSG13NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG13NBR-MSG13)(L'MSG13NBR),DXDDWORD+4
         MVC   PRTMSGID+(MSG13NDT-MSG13)(L'MSG13NDT),REQTNODE
         BAL   R14,PRT0000           PRINT MESSAGE
         L     R2,CONVIOA            I/O AREA ADDRESS
         MVI   USERRC,8              RETURN 'NO-GO' STATUS
         MVI   VTAMCMD,$VTAMSND      SET COMMAND (SEND)
         BAL   R14,VSUB0000          LINK TO VSUB TO ISSUE SEND
         B     EXIT0010              AND EXIT
         DROP  R3
*---------------------------------------------------------------------*
*        A restore notification has been received.  Update the        *
*        master file with the success or failure indication.          *
*                                                                     *
*        If this is the last node to return the restore status,       *
*        the over-all status may be set to 'complete'.                *
*---------------------------------------------------------------------*
RECV0400 DS    0H
         ITRACE ID=RSTRRECV
         TM    RPL6RCV1,RPL6WDAL     DE-ALLOCATE RECEIVED?
         BNO   ERR0060               NO.. ERROR
         TM    RPL6RCV1,RPL6WCFM     CONFIRM REQUEST RECEIVED?
         BNO   ERR0080               NO.. ERROR
         L     R2,CONVIOA            I/O AREA ADDRESS
         LA    R2,USERDATA           MASTER RECORD RETURNED
         XC    MSTRREC#,MSTRREC#     START AT FIRST RECORD
         MVI   MSTRCMD,$MSTRRD       SET COMMAND (READ)
RECV0410 DS    0H
         BAL   R14,MSTR0000          READ MASTER FILE
         USING REQBLOK,R5            DEFINE BASE
         CLI   REQSTAT,$REQFREE      UNUSED RECORD?
         BL    RECV0510              RECORD IS NOT ON FILE
         CLC   REQENODE,REQENODE-REQBLOK(R2)    SAME ENTRY NODE?
         BNE   RECV0420                         NO
         CLC   REQNBR,REQNBR-REQBLOK(R2)        SAME REQUEST NUMBER?
         BE    RECV0430                         YES.. MUST BE IT
RECV0420 DS    0H
         SR    R1,R1                 CLEAR REGISTER
         ICM   R1,3,MSTRREC#         CURRENT MASTER RECORD NUMBER
         LA    R1,1(R1)              PLUS 1
         STCM  R1,3,MSTRREC#         SAVE UPDATED NUMBER
         B     RECV0410              READ NEXT MASTER RECORD
RECV0430 DS    0H
         LA    R3,REQNDENM           FIRST NODE NAME
         USING REQNDENM,R3           DEFINE BASE
         SR    R15,R15               CLEAR REGISTER
         ICM   R15,3,REQNDE#         NUMBER OF NODES
RECV0440 DS    0H
         CLC   SESSNAME,REQNDENM     FOR THIS NODE?
         BE    RECV0450              YES
         LA    R3,REQNDEL(R3)        NEXT NODE
         BCT   R15,RECV0440          LOOP
         B     ERR0070               NODE NOT IN DESTINATION LIST
RECV0450 DS    0H
         TIME  DEC
         STCM  R1,15,REQNDERD        SET RESTORE NOTIFICATION DATE
         STCM  R0,15,REQNDERT        SET RESTORE NOTIFICATION TIME
         CLI   REQSTAT-REQBLOK(R2),$REQRSTC RESTORE SUCCESSFUL?
         BE    RECV0460              YES
         MVI   REQNDEST,$REQNDEX     ERROR DURING RESTORE
         L     R1,AMSG06             MESSAGE ADDRESS
         MVC   PRTMSGID(MSG06L),0(R1)
         MVC   PRTMSGID+(MSG06NDE-MSG06)(L'MSG06NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG06NBR-MSG06)(L'MSG06NBR),DXDDWORD+4
         MVC   PRTMSGID+(MSG06NDR-MSG06)(L'MSG06NDR),REQNDENM
         BAL   R14,PRT0000           PRINT MESSAGE
         B     RECV0470
RECV0460 DS    0H
         MVI   REQNDEST,$REQNDER     RESTORE SUCCESSFUL
         L     R1,AMSG07             MESSAGE ADDRESS
         MVC   PRTMSGID(MSG07L),0(R1)
         MVC   PRTMSGID+(MSG07NDE-MSG07)(L'MSG07NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG07NBR-MSG07)(L'MSG07NBR),DXDDWORD+4
         MVC   PRTMSGID+(MSG07NDR-MSG07)(L'MSG07NDR),REQNDENM
         BAL   R14,PRT0000           PRINT MESSAGE
RECV0470 DS    0H
         DROP  R3
         LA    R3,REQNDENM           FIRST NODE NAME
         USING REQNDENM,R3           RE-DEFINE BASE
         SR    R15,R15               CLEAR REGISTER
         ICM   R15,3,REQNDE#         NUMBER OF NODES
RECV0480 DS    0H
         CLI   REQNDEST,$REQNDEC     COMPLETE OR ERROR?
         BL    RECV0500              NO.. NOT YET COMPLETED
RECV0490 DS    0H
         LA    R3,REQNDEL(R3)        NEXT NODE
         BCT   R15,RECV0480          KEEP CHECKING
         MVI   REQSTAT,$REQDONE      ALL NODES ARE COMPLETE
         TIME  DEC
         STCM  R1,15,REQCDATE        SET DATE COMPLETED
         STCM  R0,15,REQCTIME        SET TIME COMPLETED
         L     R1,AMSG08             MESSAGE ADDRESS
         MVC   PRTMSGID(MSG08L),0(R1)
         MVC   PRTMSGID+(MSG08NDE-MSG08)(L'MSG08NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG08NBR-MSG08)(L'MSG08NBR),DXDDWORD+4
         BAL   R14,PRT0000           PRINT MESSAGE
RECV0500 DS    0H
         MVI   MSTRCMD,$MSTRWRT      SET COMMAND (WRITE)
         BAL   R14,MSTR0000          LINK TO MASTER FILE MODULE
         B     RECV0520              SEND CONFIRMED
RECV0510 DS    0H
         L     R1,AMSG09             MESSAGE ADDRESS
         MVC   PRTMSGID(MSG09L),0(R1)
         MVC   PRTMSGID+(MSG09NDE-MSG09)(L'MSG09NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG09NBR-MSG09)(L'MSG09NBR),DXDDWORD+4
         BAL   R14,PRT0000           PRINT MESSAGE
RECV0520 DS    0H
         MVI   VTAMCMD,$VTAMCFM      ISSUE A SEND CONFIRMED
         BAL   R14,VSUB0000          LINK TO VSUB TO ISSUE SEND/CONFRMD
         B     EXIT0010              AND EXIT
*---------------------------------------------------------------------*
*        Confirmation to DEALLOCATE/CONFIRM has completed             *
*---------------------------------------------------------------------*
RECV0530 DS    0H
         TM    CONVSTAT,$CONVPND     STILL PENDING?
         BO    EXIT0010              YES.. EXIT
         ITRACE ID=CONFIRMD
         MVI   VTAMCMD,$VTAMCHK      ISSUE A A CHECK
         BAL   R14,VSUB0000          LINK TO VSUB TO ISSUE CHECK
         MVC   VTAMCONV,CONVNEXT     SET 'NEXT' ADDRESS FOR FXVTAM
         FXCALL FXSCONV,DELETE,      DELETE THE CONVERSATION BLOCK     +
               (R6),                 .. CONVBLOK'S ADDRESS             +
               (R7)                  .. SESSBLOK'S ADDRESS
         POST  COMMVECB              SIGNAL FXVTAM TO RE-SCAN SESSIONS
         B     EXIT0020              EXIT
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
ERR0010  DS    0H
         USING ISTRPL6X,R1           DEFINE BASE
         ITRACE ID=VTAMERR,          VTAM ERROR OF SOME SORT           +
               DATA1=RPL6RC          .. ERROR CODES
         ABEND $U0057,DUMP,,USER
ERR0020  DS    0H
         ITRACE ID=STGEFAIL,         STAGING DATASET ALLOCATE FAILED   +
               RDATA1=R6,            .. CONVERSATION BLOCK'S ADDRESS   +
               DATA2=MSTRREC#        .. MASTER FILE RECORD NUMBER
         CLC   DAIRERR,=X'4714'      INSUFFICIENT SPACE AVAILABLE?
         BNE   ERR0030               NO.. SOME OTHER ERROR
         BAL   R14,MINIT000          RESET THIS MASTER RECORD
         XC    CONVREC#,CONVREC#     CLEAR RECORD NUMBER
         L     R2,CONVIOA            I/O AREA ADDRESS
         MVI   USERDATA,$REQNDES     INSUFFICIENT STAGING SPACE
         MVI   USERRC,8              SET RETURN CODE
         MVC   USERMSG,COMMBLKS      CLEAR AREA FOR MESSAGE
         L     R1,AMSG10             MESSAGE ADDRESS
         MVC   USERMSG(MSG10L),0(R1) SET MESSAGE
         MVI   VTAMCMD,$VTAMSND      SET COMMAND (SEND)
         BAL   R14,VSUB0000          LINK TO VSUB TO ISSUE SEND
         B     EXIT0010              AND EXIT
ERR0030  DS    0H
         ABEND 2001,DUMP,,USER
ERR0040  DS    0H
         ITRACE ID=DAIRRELF,         DAIR RELEASE FAILED               +
               RDATA1=R6,            .. CONVERSATION BLOCK'S ADDRESS   +
               DATA2=MSTRREC#        .. MASTER FILE RECORD NUMBER
         ABEND 2002,DUMP,,USER
ERR0050  DS    0H
         ITRACE ID=DAIRDELF,         DAIR DELETE FAILED                +
               RDATA1=R6,            .. CONVERSATION BLOCK'S ADDRESS   +
               DATA2=MSTRREC#        .. MASTER FILE RECORD NUMBER
         ABEND 2003,DUMP,,USER
ERR0060  DS    0H
         ITRACE ID=NODEALLO,         'LAST'/'NULL'/'XFER' WITHOUT DALO +
               RDATA1=R6,            .. CONVERSATION BLOCK'S ADDRESS   +
               DATA2=MSTRREC#        .. MASTER FILE RECORD NUMBER
         ABEND 2004,DUMP,,USER
ERR0070  DS    0H
         ITRACE ID=BADNODE,          'RSTR' FROM NODE NOT IN NODE LIST +
               RDATA1=R7,            .. SESSION BLOCK ADDRESS          +
               DATA2=MSTRREC#        .. MASTER FILE RECORD NUMBER
         ABEND 2005,DUMP,,USER
ERR0080  DS    0H
         ITRACE ID=NCONFIRM,         'LAST'/'NULL'/'XFER' WITHOUT CNFRM+
               RDATA1=R6,            .. CONVERSATION BLOCK'S ADDRESS   +
               DATA2=MSTRREC#        .. MASTER FILE RECORD NUMBER
         ABEND $U0064,DUMP,,USER
ERR0090  DS    0H
         ITRACE ID=NOTSTART,         MASTER RECORD NOT FOUND ON RESTART+
               DATA1=0(R2),          .. DATA SENT FROM OTHER END       +
               DATA2=8(R2)           .. MORE OF THE DATA
         L     R2,CONVIOA            I/O AREA ADDRESS
         MVI   USERDATA,$REQNDE2     MASTER RECORD NOT FOUND
         MVC   USERMSG,COMMBLKS      CLEAR AREA FOR MESSAGE
         L     R1,AMSG12             MESSAGE ADDRESS
         MVC   USERMSG(MSG12L),0(R1) SET MESSAGE
         MVI   VTAMCMD,$VTAMSND      SET COMMAND (SEND)
         BAL   R14,VSUB0000          LINK TO VSUB TO ISSUE SEND
         B     EXIT0010              AND EXIT
ERR0100  DS    0H
         ITRACE ID=TOOLARGE          DATA SET EXCEEDS MAXSIZE
         XC    CONVREC#,CONVREC#     CLEAR RECORD NUMBER
         L     R2,CONVIOA            I/O AREA ADDRESS
         MVI   USERRC,8              SET RETURN CODE
         MVI   USERDATA,$REQNDEL     TOO LARGE
         MVC   USERMSG,COMMBLKS      CLEAR AREA FOR MESSAGE
         L     R1,AMSG14             MESSAGE ADDRESS
         MVC   USERMSG(MSG14L),0(R1) SET MESSAGE
         MVC   USERMSG+(MSG14NDE-MSG14)(L'MSG14NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    USERMSG+(MSG14NBR-MSG14)(L'MSG14NBR),DXDDWORD+4
         BAL   R14,MINIT000          INITIALIZE MASTER RECORD
         MVI   VTAMCMD,$VTAMSND      SET COMMAND (SEND)
         BAL   R14,VSUB0000          LINK TO VSUB TO ISSUE SEND
         B     EXIT0010              AND EXIT
ERR0110  DS    0H
         ITRACE ID=RACFAIL           INSUFFICIENT RACF ACCESS
         XC    CONVREC#,CONVREC#     CLEAR RECORD NUMBER
         L     R2,CONVIOA            I/O AREA ADDRESS
         MVI   USERRC,8              SET RETURN CODE
         MVI   USERDATA,$REQNDEA     INSUFFICIENT ACCESS
         MVC   USERMSG,COMMBLKS      CLEAR AREA FOR MESSAGE
         L     R1,AMSG15             MESSAGE ADDRESS
         MVC   USERMSG(MSG15L),0(R1) SET MESSAGE
         MVC   USERMSG+(MSG15NDE-MSG15)(L'MSG15NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    USERMSG+(MSG15NBR-MSG15)(L'MSG15NBR),DXDDWORD+4
         BAL   R14,MINIT000          INITIALIZE MASTER RECORD
         MVI   VTAMCMD,$VTAMSND      SET COMMAND (SEND)
         BAL   R14,VSUB0000          LINK TO VSUB TO ISSUE SEND
         B     EXIT0010              AND EXIT
ERR0120  DS    0H
         ITRACE ID=NORSTR            NO RESTORE DEFINITION
         XC    CONVREC#,CONVREC#     CLEAR RECORD NUMBER
         L     R2,CONVIOA            I/O AREA ADDRESS
         MVI   USERRC,8              SET RETURN CODE
         MVI   USERDATA,$REQNDEW     NO RESTORE DEFINITION
         MVC   USERMSG,COMMBLKS      CLEAR AREA FOR MESSAGE
         L     R1,AMSG16             MESSAGE ADDRESS
         MVC   USERMSG(MSG16L),0(R1)    SET MESSAGE
         MVC   USERMSG+(MSG16NDE-MSG16)(L'MSG16NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    USERMSG+(MSG16NBR-MSG16)(L'MSG16NBR),DXDDWORD+4
         BAL   R14,MINIT000          INITIALIZE MASTER RECORD
         MVI   VTAMCMD,$VTAMSND      SET COMMAND (SEND)
         BAL   R14,VSUB0000          LINK TO VSUB TO ISSUE SEND
         B     EXIT0010              AND EXIT
ERR0130  DS    0H
         ITRACE ID=DUPCAT            INSUFFICIENT RACF ACCESS
         XC    CONVREC#,CONVREC#     CLEAR RECORD NUMBER
         L     R2,CONVIOA            I/O AREA ADDRESS
         MVI   USERRC,8              SET RETURN CODE
         MVI   USERDATA,$REQNDED     DUPLICATE DATA SET
         MVC   USERMSG,COMMBLKS      CLEAR AREA FOR MESSAGE
         L     R1,AMSG17             MESSAGE ADDRESS
         MVC   USERMSG(MSG17L),0(R1)    SET MESSAGE
         MVC   USERMSG+(MSG17NDE-MSG17)(L'MSG17NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    USERMSG+(MSG17NBR-MSG17)(L'MSG17NBR),DXDDWORD+4
         BAL   R14,MINIT000          INITIALIZE MASTER RECORD
         MVI   VTAMCMD,$VTAMSND      SET COMMAND (SEND)
         BAL   R14,VSUB0000          LINK TO VSUB TO ISSUE SEND
         B     EXIT0010              AND EXIT
* ------------------------------------------------------------------- *
*                                                                     *
*        INITIALIZE MASTER FILE RECORD                                *
*                                                                     *
* ------------------------------------------------------------------- *
         DROP  R3
MINIT000 DS    0H
         ST    R14,DXDLINK           SAVE RETURN ADDRESS
         MINIT COMMBLKS,P0,$REQFREE,R14 RESET THIS MASTER RECORD
         L     R14,DXDLINK           RESTORE RETURN ADDRESS
         BR    R14                   RETURN
* ------------------------------------------------------------------- *
*                                                                     *
*        LINK TO VSUB                                                 *
*                                                                     *
* ------------------------------------------------------------------- *
VSUB0000 DS    0H
         ST    R14,DXDLINK           SAVE RETURN ADDRESS
         ITRACE ID=VSUB,             LINKING TO VSUB                   +
               DATA1=VTAMCMD         .. COMMAND
         LR    R1,R8                 PARM BLOCK'S ADDRESS
         L     R15,AVSUB             VSUB ENTRY POINT
         BALR  R14,R15               LINK TO VSUB
         L     R14,DXDLINK           RESTORE RETURN ADDRESS
         BR    R14                   RETURN
* ------------------------------------------------------------------- *
*                                                                     *
*        Read or write master file records                            *
*                                                                     *
* ------------------------------------------------------------------- *
MSTR0000 DS    0H
         ST    R14,DXDLINK           SAVE RETURN ADDRESS
         ITRACE ID=MSTRIO
         FXCALL FXSMSTR              LINK TO MASTER FILE I/O
         LA    R5,MSTRRECD           SET DATA ADDRESS
         L     R14,DXDLINK           RESTORE RETURN ADDRESS
         BR    R14                   RETURN
* ------------------------------------------------------------------- *
*                                                                     *
*        PRINT                                                        *
*                                                                     *
* ------------------------------------------------------------------- *
PRT0000  DS    0H
         ST    R14,DXDLINK           SAVE RETURN ADDRESS
         ITRACE ID=PRINT
         FXCALL PRTQ,PRINT           ADD REQUEST TO PRINT QUEUE
         L     R14,DXDLINK           RESTORE RETURN ADDRESS
         BR    R14                   DONE
* ------------------------------------------------------------------- *
*                                                                     *
*        EXIT                                                         *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=FREE24
         ICM   R1,15,DXD24           24-BIT PARM AREA ADDRESS
         BZ    EXIT0010              NO ADDRESS
         FREEMAIN RU,A=(1),LV=FX24L FREEMAIN 24-BIT PARM AREA
         XC    DXD24,DXD24           CLEAR 24-BIT WORK AREA ADDRESS
         B     EXIT0020              AND EXIT
EXIT0010 DS    0H
         MVC   VTAMCONV,CONVNEXT     SET 'NEXT' ADDRESS FOR FXVTAM
EXIT0020 DS    0H
         ITRACE ID=EXIT
         L     R13,4(R13)            CALLER'S SAVE AREA ADDRESS
         LM    R14,R12,12(R13)       RESTORE CALLER'S REGISTERS
         SR    R15,R15               ALWAYS A GOOD RETURN CODE
         BR    R14                   RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
ADCBWI   DC    A(DCBWI)
ARACL    DC    A(RACLI)
AMSG01   DC    A(MSG01)
AMSG02   DC    A(MSG02)
AMSG03   DC    A(MSG03)
AMSG04   DC    A(MSG04)
AMSG05   DC    A(MSG05)
AMSG06   DC    A(MSG06)
AMSG07   DC    A(MSG07)
AMSG08   DC    A(MSG08)
AMSG09   DC    A(MSG09)
AMSG10   DC    A(MSG10)
AMSG11   DC    A(MSG11)
AMSG12   DC    A(MSG12)
AMSG13   DC    A(MSG13)
AMSG14   DC    A(MSG14)
AMSG15   DC    A(MSG15)
AMSG16   DC    A(MSG16)
AMSG17   DC    A(MSG17)
F100     DC    F'100'
H4       DC    H'4'
H8       DC    H'8'
DSCLASS  DC    AL1(7),CL7'DATASET'
DATEEDWD DC    X'40202020204B202020'
P0       DC    P'0'
DATA     DC    CL4'DATA'
DEFAULT  DC    C'DEFAULT '
FIRST    DC    CL4'1ST'
LAST     DC    CL4'LAST'
NULL     DC    CL4'NULL'
RESTORE  DC    CL4'RSTR'
RESTART  DC    CL4'STRT'
VOLSER   DC    CL6'VOLSER'
XFER     DC    CL4'XFER'
         LTORG
DCBWI    DCB   DSORG=PS,                                               +
               DDNAME=DDNAME,                                          +
               MACRF=WP
DCBWL    EQU   *-DCBWI
RACLI    RACROUTE REQUEST=AUTH,      RACF AUTHORITY CHECK              +
               USERID=*,             .. WILL BE THIRD PARTY CHECK      +
               GENERIC=ASIS,         .. CHECK FOR GENERIC PROFILE      +
               VOLSER=VOLSER,        .. VOLSER                         +
               RELEASE=1.8.1,        .. 1.8.1 PARM LIST FORMAT         +
               LOG=NONE,             .. DON'T LOG FAILURES             +
               MF=L                  .. LIST FORM
RACLL    EQU   *-RACLI
MSG01    DS    0C
         DC    CL11'FXSRECV01I'
         DC    C'RECEIVE OF REQUEST '
MSG01NDE DC    CL8' '
MSG01NBR DC    XL8'4021202020202020'
         DC    C' FROM NODE '
MSG01NDT DC    CL8' '
         DC    C' STARTED'
MSG01L   EQU   *-MSG01
MSG02    DS    0C
         DC    CL11'FXSRECV02I'
         DC    C'TRANSFER OF REQUEST '
MSG02NDE DC    CL8' '
MSG02NBR DC    XL8'4021202020202020'
         DC    C' COMPLETE'
MSG02L   EQU   *-MSG02
MSG03    DS    0C
         DC    CL11'FXSRECV03I'
         DC    C'RECEIVE OF REQUEST '
MSG03NDE DC    CL8' '
MSG03NBR DC    XL8'4021202020202020'
         DC    C' FROM NODE '
MSG03NDT DC    CL8' '
         DC    C' COMPLETE'
MSG03L   EQU   *-MSG03
MSG04    DS    0C
         DC    CL11'FXSRECV04I'
         DC    C'CONVERSATION WITH NODE '
MSG04NDE DC    CL08' '
         DC    C' DEALLOCATED BY PRIMARY END'
MSG04L   EQU   *-MSG04
MSG05    DS    0C
         DC    CL11'FXSRECV05E'
         DC    C'CONVERSATION DEALLOCATED DURING RECEIVE OF REQUEST '
MSG05NDE DC    CL8' '
MSG05NBR DC    XL8'4021202020202020'
MSG05L   EQU   *-MSG05
MSG06    DC    CL11'FXSRECV06E'
         DC    C'RESTORE FAILED AT NODE '
MSG06NDR DC    CL08' '
         DC    C' FOR REQUEST '
MSG06NDE DC    CL8' '
MSG06NBR DC    XL8'4021202020202020'
MSG06L   EQU   *-MSG06
MSG07    DC    CL11'FXSRECV07I'
         DC    C'RESTORE SUCCESSFUL AT NODE '
MSG07NDR DC    CL08' '
         DC    C' FOR REQUEST '
MSG07NDE DC    CL8' '
MSG07NBR DC    XL8'4021202020202020'
MSG07L   EQU   *-MSG07
MSG08    DC    CL11'FXSRECV08I'
         DC    C'PROCESSING COMPLETE FOR REQUEST '
MSG08NDE DC    CL8' '
MSG08NBR DC    XL8'4021202020202020'
MSG08L   EQU   *-MSG08
MSG09    DC    CL11'FXSRECV09I'
         DC    C'RESTORE STATUS RECEIVED FOR REQUEST '
MSG09NDE DC    CL8' '
MSG09NBR DC    XL8'4021202020202020'
         DC    C', MASTER RECORD NOT FOUND'
MSG09L   EQU   *-MSG09
MSG10    DS    0C
         DC    CL11'FXSRECV10E'
         DC    C'INSUFFICIENT SPACE ON STAGE DEVICES'
MSG10L   EQU   *-MSG10
MSG11    DS    0C
         DC    CL11'FXSRECV11I'
         DC    C'RECEIVE OF REQUEST '
MSG11NDE DC    CL8' '
MSG11NBR DC    XL8'4021202020202020'
         DC    C' FROM NODE '
MSG11NDT DC    CL8' '
         DC    C' RESTARTED FROM BLOCK'
MSG11REC DC    X'4020202020202021'
MSG11L   EQU   *-MSG11
MSG12    DS    0C
         DC    CL11'FXSRECV12E'
         DC    C'REQUEST NOT FOUND ON MASTER FILE'
MSG12L   EQU   *-MSG12
MSG13    DS    0C
         DC    CL11'FXSRECV13I'
         DC    C'RESTART OF REQUEST '
MSG13NDE DC    CL8' '
MSG13NBR DC    XL8'4021202020202020'
         DC    C' FROM NODE '
MSG13NDT DC    CL8' '
         DC    C' FAILED, RESTART FROM BEGINNING'
MSG13L   EQU   *-MSG13
MSG14    DS    0C
         DC    CL11'FXSRECV14E'
         DC    C'DATA SET IS TOO LARGE FOR '
MSG14NDE DC    CL8' '
MSG14NBR DC    XL8'4021202020202020'
MSG14L   EQU   *-MSG14
MSG15    DS    0C
         DC    CL11'FXSRECV15E'
         DC    C'INSUFFICIENT ACCESS TO RESTORE '
MSG15NDE DC    CL8' '
MSG15NBR DC    XL8'4021202020202020'
MSG15L   EQU   *-MSG15
MSG16    DS    0C
         DC    CL11'FXSRECV16E'
         DC    C'NO RESTORE BLOCK FOR '
MSG16NDE DC    CL8' '
MSG16NBR DC    XL8'4021202020202020'
MSG16L   EQU   *-MSG16
MSG17    DS    0C
         DC    CL11'FXSRECV17E'
         DC    C'DATA SET ALREADY CATALOGED'
MSG17NDE DC    CL8' '
MSG17NBR DC    XL8'4021202020202020'
MSG17L   EQU   *-MSG17
* ------------------------------------------------------------------- *
*              WORK AREA                                              *
* ------------------------------------------------------------------- *
DXDSRECV DSECT
DXDID    DS   CL8                    WORK AREA OWNER EYECATCHER
DXDSAVE  DS   18F                    REGISTER SAVE AREA
DXDDWORD DS   D                      CVD/CVB WORK AREA
DXD24    DS   A                      24-BIT PARM AREA ADDRESS
DXDLINK  DS   A                      BAL/BR SAVE AREA
DXDNDEDA DS   A                      NODE DATA ADDRESS
DXDRACSV DS   4F                     RACROUTE REGISTER SAVE AREA
DXDRACL  DS   (RACLL)X               RACROUTE LIST FORM
         PRTBLOK  DSECT=NO
         MSTRREQ  DSECT=NO
         DAIRREQ  DSECT=NO
         CONVREQ  DSECT=NO
SAFWORK  DS   512X
* ------------------------------------------------------------------- *
*              COMMON DATA MAP                                        *
* ------------------------------------------------------------------- *
         VTAMBLOK DSECT=YES
* ------------------------------------------------------------------- *
*              COMMON DATA MAP                                        *
* ------------------------------------------------------------------- *
         FXSCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*              24-BIT MODULE PARAMETER BLOCK                          *
* ------------------------------------------------------------------- *
         FX24PRM DSECT=YES
* ------------------------------------------------------------------- *
*              VTAM SESSION BLOCK                                     *
* ------------------------------------------------------------------- *
         SESSBLOK DSECT=YES
* ------------------------------------------------------------------- *
*              VTAM CONVERSATION BLOCK                                *
* ------------------------------------------------------------------- *
         CONVBLOK DSECT=YES
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         USERREQ  DSECT=YES
* ------------------------------------------------------------------- *
*              MASTER FILE RECORD                                     *
* ------------------------------------------------------------------- *
         REQBLOK  DSECT=YES
* ------------------------------------------------------------------- *
*              RESTORE BLOCK                                          *
* ------------------------------------------------------------------- *
         RSTRBLOK DSECT=YES
* ------------------------------------------------------------------- *
*              EXTERNAL USERS CONVERSION BLOCK                        *
* ------------------------------------------------------------------- *
         XUSRBLOK DSECT=YES
* ------------------------------------------------------------------- *
*              RPL AND RPL EXTENSION DSECTS                           *
* ------------------------------------------------------------------- *
         IFGRPL AM=VTAM
* ------------------------------------------------------------------- *
*              DCB                                                    *
* ------------------------------------------------------------------- *
         DCBD   DSORG=PS
* ------------------------------------------------------------------- *
*                                                                     *
*              EQUATES                                                *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY REGEQU
         ABCODES
         END  FXSRECV
./ ADD NAME=FXSREQE  0100-99056-99056-1500-00448-00448-00000-FX-REL1

         TITLE 'FXSREQE NEW TRANSMISSION REQUESTS'
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXSREQE                                               *
*                                                                     *
*  New transmission request entry.  This module is the complement of  *
*  FXBREQE and FXTREQE.  As much edit checking as possible is done on *
*  the requestor's end (to keep the STC from becoming the focal point *
*  of performance problems and so the work is charged to the user and *
*  not the STC).                                                      *
*                                                                     *
*  Once a request is received, further checking is done.  All         *
*  destinations are verified to be valid (they were defined via       *
*  FXNODE or DESTINATION statements at start-up).  A check is made    *
*  to make sure no destination is duplicated.  The transmit node may  *
*  not also be a destination.  If all edit checks are satisfied,      *
*  an available master file record is found and used to record the    *
*  request.  The submittor is notified of the acceptance or rejection.*
*                                                                     *
* ------------------------------------------------------------------- *
SREQE    FXPRFX 'NEW TRANSMISSION REQUESTS'
FXSREQE  AMODE 31
FXSREQE  RMODE ANY
         USING SESSBLOK,R7           ADDRESS PASSED BY FXVTAM
         USING CONVBLOK,R6           ADDRESS PASSED BY FXVTAM
         CLC   DXDID,MODID           WORK AREA INITIALIZED?
         BE    REQE0010              YES
         ITRACE ID=INIT
         MVC   DXDID,MODID           WORK AREA INITIALIZED
         MVI   PRTCC,C' '            INITIALIZE CARRIAGE CONTROL
         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC
REQE0010 DS    0H
         CLI   SESSUATH,0            IS USER AUTHORIZED TO USE FX?
         BE    REQE0240              NO
         L     R5,CONVIOA            COPY USERID
         USING USERREQ,R5            DEFINE BASE
         LA    R9,USERDATA           DATA ADDRESS
         USING REQBLOK,R9            DEFINE BASE
* ------------------------------------------------------------------- *
*                                                                     *
*        Verify that the transmitting node is valid                   *
*                                                                     *
* ------------------------------------------------------------------- *
         CLC   REQTNODE,COMMAPLN     ARE WE TRANSMITTING?
         BE    REQE0070              YES.. THAT'S VALID
         ICM   R3,15,COMMSESS        FIRST SESSION BLOCK
         BZ    REQE0030              NOT VALID
REQE0020 DS    0H
         CLC   REQTNODE,SESSNAME-SESSBLOK(R3)           NODE FOUND?
         BE    REQE0070              YES.. VALID
         ICM   R3,15,SESSNEXT-SESSBLOK(R3)
         BNZ   REQE0020              KEEP LOOKING
REQE0030 DS    0H
         ICM   R3,15,COMMDEST        FIRST DESTINATION BLOCK
         BZ    REQE0050              NOT VALID
REQE0040 DS    0H
         CLC   REQTNODE,DESTNAME-DESTBLOK(R3)
         BE    REQE0060              VALID
         ICM   R3,15,DESTNEXT-DESTBLOK(R3)
         BNZ   REQE0040              LOOP
REQE0050 DS    0H
         ITRACE ID=BADTNODE,         BAD TRANSMITTING NODE NAME        +
               DATA1=REQTNODE        .. INCLUDE NODE'S NAME
         MVI   USERRC,8              SET RETURN CODE
         MVC   USERMSG,COMMBLKS      INITIALIZE MESSAGE
         MVC   USERMSG(MSG01L),MSG01 COPY INITIAL MESSAGE
         MVC   USERMSG+(MSG01NDE-MSG01)(L'MSG01NDE),REQTNODE
         B     EXIT0000              AND EXIT
REQE0060 DS    0H
         MVC   REQTNODE,DESTNODE-DESTBLOK(R3)         CHANGE TO NODE
* ------------------------------------------------------------------- *
*                                                                     *
*        Verify that all destinations are valid                       *
*                                                                     *
* ------------------------------------------------------------------- *
REQE0070 DS    0H
         LA    R4,REQNDENM           FIRST NODE NAME
         SR    R15,R15               CLEAR REGISTER
         ICM   R15,3,REQNDE#         NUMBER OF NODES
* ------------------------------------------------------------------- *
*        Scan the nodes                                               *
* ------------------------------------------------------------------- *
REQE0080 DS    0H
         CLC   COMMAPLN,0(R4)        ARE WE THE DESTINATION?
         BE    REQE0140              YES.. THAT'S VALID
         ICM   R3,15,COMMSESS        FIRST SESSION BLOCK
         BZ    REQE0100              INVALID NODE NAME
REQE0090 DS    0H
         CLC   0(L'SESSNAME,R4),SESSNAME-SESSBLOK(R3)   NODE FOUND?
         BE    REQE0140              YES.. NODE NAME IS VALID
         ICM   R3,15,SESSNEXT-SESSBLOK(R3)   NEXT SESSION BLOCK
         BNZ   REQE0090              CHECK AGAIN
* ------------------------------------------------------------------- *
*        Scan the destinations                                        *
* ------------------------------------------------------------------- *
REQE0100 DS    0H
         ICM   R3,15,COMMDEST        FIRST DESTINATION BLOCK
         BZ    REQE0120              NO DESTINATIONS DEFINED
REQE0110 DS    0H
         CLC   0(L'DESTNAME,R4),DESTNAME-DESTBLOK(R3)   FOUND?
         BE    REQE0130              YES
         ICM   R3,15,DESTNEXT-DESTBLOK(R3)
         BNZ   REQE0110              CHECK ALL DEFINED DESTINATIONS
REQE0120 DS    0H
         ITRACE ID=BADNODE,          INVALID NODE NAME                 +
               DATA1=0(R4)           .. NODE NAME
         MVI   USERRC,8              SET RETURN CODE
         MVC   USERMSG,COMMBLKS      INITIALIZE MESSAGE
         MVC   USERMSG(MSG02L),MSG02 COPY INITIAL MESSAGE
         MVC   USERMSG+(MSG02NDE-MSG02)(L'MSG02NDE),0(R4)
         B     EXIT0000              AND EXIT
REQE0130 DS    0H
         MVC   0(L'DESTNAME,R4),DESTNODE-DESTBLOK(R3) CHANGE TO NODE
REQE0140 DS    0H
         LA    R4,REQNDEL(R4)        NEXT NODE
         BCT   R15,REQE0080          CHECK ALL NODES
* ------------------------------------------------------------------- *
*                                                                     *
*        Check for duplicated destination                             *
*                                                                     *
* ------------------------------------------------------------------- *
         LA    R3,REQNDENM           FIRST NODE NAME
         LA    R4,REQNDEL(R3)        NEXT NODE NAME
         SR    R15,R15               CLEAR REGISTER
         ICM   R15,3,REQNDE#         NUMBER OF NODES
REQE0150 DS    0H
         LR    R14,R15               COPY NUMBER OF NODES
REQE0160 DS    0H
         CH    R14,H2                STILL HAVE 2 OR MORE?
         BL    REQE0170              NO
         CLC   0(L'REQNDENM,R3),0(R4)
         BE    REQE0250              DUPLICATED NODE NAME
         LA    R4,REQNDEL(R4)        NEXT NODE NAME
         BCT   R14,REQE0160          LOOP
REQE0170 DS    0H
         LA    R3,REQNDEL(R3)        NEXT NODE NAME
         BCT   R15,REQE0150          LOOP
* ------------------------------------------------------------------- *
*                                                                     *
*        Make sure transmitting node is not also a destination        *
*                                                                     *
* ------------------------------------------------------------------- *
         LA    R3,REQNDENM           FIRST NODE NAME
         SR    R15,R15               CLEAR REGISTER
         ICM   R15,3,REQNDE#         NUMBER OF NODES
REQE0180 DS    0H
         CLC   REQTNODE,0(R3)        IS TRANSMITTOR ALSO A DESTINATION?
         BE    REQE0270              YES
         LA    R3,REQNDEL(R3)        NEXT NODE NAME
         BCT   R15,REQE0180          LOOP
* ------------------------------------------------------------------- *
*                                                                     *
*        If the request is for a PDS member, make sure the            *
*        MEM SIZE parameter was specified at start-up.                *
*                                                                     *
* ------------------------------------------------------------------- *
         CLC   REQOMEM,COMMBLKS      MEMBER NAME PRESENT?
         BE    REQE0190              NO
         OC    COMMMEM,COMMMEM       MEMBER SIZE ZERO?
         BNZ   REQE0190              YES
         ITRACE ID=NOMEMSZ           MEMBER SIZE NOT GIVEN
         MVI   USERRC,8              SET RETURN CODE
         MVC   USERMSG,COMMBLKS      INITIALIZE MESSAGE
         MVC   USERMSG(MSG03L),MSG03 COPY MESSAGE
         B     EXIT0000              AND EXIT
* ------------------------------------------------------------------- *
*                                                                     *
*        Check requestor's access to the requested data set           *
*                                                                     *
* ------------------------------------------------------------------- *
REQE0190 DS    0H
         MVC   DXDRACL(RACLL),RACLI  COPY LIST FORM
         LA    R2,DSCLASS            'CLASS'
         LA    R3,REQODSNM           'RESOURCE'
         LA    R4,SESSUSER           'USER ID' (THIRD PARTY CHECK)
         LA    R8,SAFWORK            SAF WORK AREA ADDRESS
         RACROUTE REQUEST=AUTH,      CHECK USER'S ACCESS AUTHORITY     +
               ATTR=READ,            .. READ LEVEL REQUIRED            +
               CLASS=(R2),           .. CLASS                          +
               ENTITY=((R3)),        .. RESOURCE                       +
               USERID=(R4),          .. USER ID (THIRD PARTY CHECK)    +
               WORKA=(R8),           .. SAF WORK AREA                  +
               RELEASE=1.8.1,        .. 1.8.1 PARM LIST FORMAT         +
               MF=(E,DXDRACL)        .. EXECUTE FORM/LIST FORM ADDRESS
         ITRACE ID=AUTHRC,           TRACE RETURN CODE                 +
               RDATA1=R15            .. RETURN CODE
         CH    R15,H4                0=AUTHORIZED, 4=UNPROTECTED
         BH    REQE0260              .. USER DOES NOT HAVE ACCESS
* ------------------------------------------------------------------- *
*                                                                     *
*        Find an available master file record                         *
*                                                                     *
* ------------------------------------------------------------------- *
         ITRACE ID=SRCHMSTR          STARTING MASTER FILE SEARCH
         XC    MSTRREC#,MSTRREC#     INITIALIZE FOR RECORD NUMBER
         FXCALL FXSMSTR,READ         READ MASTER FILE
         MVC   CONVREC#,MSTRREC#     SAVE MASTER RECORD NUMBER
         LA    R4,MSTRRECD           RETURNED MASTER FILE RECORD
         DROP  R9
         USING REQBLOK,R4            DEFINE NEW BASE
         CLI   REQSTAT,$REQCNTL      CONTROL RECORD STILL INTACT?
         BNE   ERR0010               NO..
         ICM   R1,15,REQNBR          LAST REQUEST NUMBER USED
         LA    R1,1(R1)              PLUS 1
         STCM  R1,15,REQNBR          SAVE UPDATED NUMBER
         ST    R1,DXDREQ#            SAVE REQUEST NUMBER
         FXCALL FXSMSTR,WRITE        RE-WRITE MASTER RECORD
         ITRACE ID=REQNBR,           TRACE REQUEST NUMBER ASSIGNED     +
               DATA1=REQNBR          .. REQUEST NUMBER
         MVI   MSTRCMD,$MSTRRD       SET COMMAND (READ)
REQE0200 DS    0H
         SR    R1,R1                 CLEAR REGISTER
         ICM   R1,3,MSTRREC#         CURRENT RECORD NUMBER
         LA    R1,1(R1)              PLUS 1
         FXCALL FXSMSTR,,(R1)        READ MASTER FILE
         LA    R4,MSTRRECD           RETURNED MASTER FILE RECORD
         MVC   CONVREC#,MSTRREC#     SAVE MASTER RECORD NUMBER
         CLI   REQSTAT,$REQFREE      UNUSED OR FREE?
         BH    REQE0200              NO
         SR    R1,R1                 CLEAR REGISTER
         MVC   REQESTOR,SESSUSER     SET REQUESTOR ID
         MVC   REQJOB,SESSJOB        SET JOB NAME
         TIME  DEC                   REQUEST DATE AND TIME
         STCM  R1,15,REQEDATE        SET DATE OF REQUEST
         STCM  R0,15,REQETIME        SET TIME OF REQUEST
         MVC   REQENODE,REQENODE-REQBLOK(R9)    COPY ENTRY POINT NODE
         MVC   REQNBR,DXDREQ#                   SET REQUEST NUMBER
         MVC   REQTNODE,REQTNODE-REQBLOK(R9)    COPY XMIT NODE
         MVI   REQSTAT,$REQINIT      REQUEST IS IN INITIAL STATE
         CLC   REQENODE,REQTNODE     TO BE XMITTED BY A DIFFERENT NODE
         BE    REQE0210              NO..
         MVI   REQSTAT,$REQXRDY      STATUS IS 'READY TO TRANSMIT'
REQE0210 DS    0H
         MVC   REQODSNM,REQODSNM-REQBLOK(R9)    SET ORIGINAL DSN
         MVC   REQOMEM,REQOMEM-REQBLOK(R9)      SET ORIGINAL MEM NAME
         MVC   REQDDSNM,REQDDSNM-REQBLOK(R9)    SET NEW DATA SET NAME
         MVC   REQDMEM,REQDMEM-REQBLOK(R9)      SET NEW MEMBER NAME
         MVC   REQREPL,REQREPL-REQBLOK(R9)      SET REPLACE INDICATOR
         MVC   REQALIAS,REQALIAS-REQBLOK(R9)    SET ALIAS INDICATOR
         MVC   REQNDE#,REQNDE#-REQBLOK(R9)      SET NUMBER OF NODES
         LA    R1,REQNDENM           FIRST NODE
         LA    R14,REQNDENM-REQBLOK(R9)
         LA    R15,$MAXNODE          NUMBER OF NODES
REQE0220 DS    0H
         MVC   REQNDENM-REQNDENM(L'REQNDENM,R1),0(R14)
         MVI   REQNDEST-REQNDENM(R1),0
         ZAP   REQNDETD-REQNDENM(L'REQNDETD,R1),P0
         XC    REQNDETT-REQNDENM(L'REQNDETT,R1),REQNDETT-REQNDENM(R1)
         ZAP   REQNDERD-REQNDENM(L'REQNDERD,R1),P0
         XC    REQNDERT-REQNDENM(L'REQNDERT,R1),REQNDERT-REQNDENM(R1)
         LA    R1,REQNDEL(R1)        NEXT NODE
         LA    R14,REQNDEL(R14)      NEXT NODE
         BCT   R15,REQE0220          LOOP
         MVI   USERRC,0              SET RETURN CODE
         MVC   USERMSG,COMMBLKS      INITIALIZE MESSAGE
         MVC   USERMSG(MSG04L),MSG04 SET MESSAGE
         MVC   USERMSG+(MSG04NDE-MSG04)(L'MSG04NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST'S NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    USERMSG+(MSG04NBR-MSG04)(L'MSG04NBR),DXDDWORD+4
         MVC   PRTMSGID(MSG04L),USERMSG
         BAL   R8,PRT0000            PRINT
         MVC   PRTMSGID(MSG05L),MSG05 SET MESSAGE
         MVC   PRTMSGID+(MSG05REC-MSG05)(L'MSG05REC),REQREC#
         MVC   PRTMSGID+(MSG05USR-MSG05)(L'MSG05USR),REQESTOR
         MVC   PRTMSGID+(MSG05DSN-MSG05)(L'MSG05DSN),REQODSNM
         BAL   R8,PRT0000            PRINT
         MVC   PRTMSGID(MSG06L),MSG06 SET MESSAGE
         LA    R4,REQNDENM           FIRST NODE NAME
         LA    R3,5                  ONLY 5 WILL BE IN THE MESSAGE
         LA    R2,PRTMSGID+(MSG06NDE-MSG06)
REQE0230 DS    0H
         MVC   0(L'REQNDENM,R2),0(R4)
         LA    R4,REQNDEL(R4)        NEXT NODE
         LA    R2,L'REQNDENM+1(R2)    NEXT NODE
         BCT   R3,REQE0230           LOOP
         BAL   R8,PRT0000            PRINT
         FXCALL FXSMSTR,WRITE        RE-WRITE MASTER FILE RECORD
         B     EXIT0000              AND EXIT
REQE0240 DS    0H
         ITRACE ID=NOTAUTH
         MVI   USERRC,20             SET RETURN CODE
         MVC   USERMSG,COMMBLKS      INITIALIZE MESSAGE
         MVC   USERMSG(MSG07L),MSG07 SET MESSAGE
         B     EXIT0000              AND EXIT
REQE0250 DS    0H
         ITRACE ID=DUPNODE,          INVALID NODE NAME                 +
               DATA1=0(R3)           .. NODE NAME
         MVI   USERRC,8              SET RETURN CODE
         MVC   USERMSG,COMMBLKS      INITIALIZE MESSAGE
         MVC   USERMSG(MSG08L),MSG08 COPY INITIAL MESSAGE
         MVC   USERMSG+(MSG08NDE-MSG08)(L'MSG08NDE),0(R3)
         B     EXIT0000              AND EXIT
REQE0260 DS    0H
         ITRACE ID=AUTHFAIL,         AUTH CHECK FAILED                 +
               DATA1=0(R15)          .. RACF RETURN CODE
         MVI   USERRC,8              SET RETURN CODE
         MVC   USERMSG,COMMBLKS      INITIALIZE MESSAGE
         MVC   USERMSG(MSG09L),MSG09 COPY INITIAL MESSAGE
         B     EXIT0000              AND EXIT
REQE0270 DS    0H
         ITRACE ID=TNODEDEST         TRANSMITTING NODE IS A DESTINATION
         MVI   USERRC,8              SET RETURN CODE
         MVC   USERMSG,COMMBLKS      INITIALIZE MESSAGE
         MVC   USERMSG(MSG10L),MSG10 COPY INITIAL MESSAGE
         B     EXIT0000              AND EXIT
PRT0000  DS    0H
         FXCALL PRTQ,PRINT           ADD REQUEST TO PRINT QUEUE
         BR    R8                    RETURN
ERR0010  DS    0H
         ITRACE ID=CNTLBAD,          CONTROL RECORD IS BAD             +
               RDATA1=R4,            .. ADDRESS OF MASTER FILE RECORD  +
               DATA2=REQSTAT         .. STATUS IN THE RECORD
         ABEND $U0083,DUMP,,USER
EXIT0000 DS    0H
         ITRACE ID=EXIT              EXITING PRINT MODULE
         L     R13,4(R13)            RESTORE REGISTER 13
         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS
         SR    R15,R15               GIVE GOOD RETURN CODE
         BR    R14                   RETURN TO CALLER
* ------------------------------------------------------------------ *
*                                                                    *
*        CONSTANTS                                                   *
*                                                                    *
* ------------------------------------------------------------------ *
DXDSTART DC    Q(DXDSREQE)           DISPLACEMENT TO WORK AREA
RACLI    RACROUTE REQUEST=AUTH,      RACF AUTHORITY CHECK              +
               USERID=*,             .. WILL BE THIRD PARTY CHECK      +
               GENERIC=ASIS,         .. CHECK FOR GENERIC PROFILE      +
               VOLSER=VOLSER,        .. VOLSER                         +
               RELEASE=1.8.1,        .. 1.8.1 PARM LIST FORMAT         +
               LOG=NONE,             .. DON'T LOG FAILURES             +
               MF=L                  .. LIST FORM
RACLL    EQU   *-RACLI
H2       DC    H'2'
H4       DC    H'4'
P0       DC    P'0'
         SPACE 1
DSCLASS  DS    0C
         DC    AL1(7)
         DC    CL7'DATASET'
         SPACE 1
VOLSER   DC    C'VOLSER'
MSG01    DS    0C
         DC    CL11'FXSREQE01E'
MSG01NDE DC    CL8' '
         DC    C' IS NOT A VALID TRANSMITTING NODE NAME'
MSG01L   EQU   *-MSG01
MSG02    DS    0C
         DC    CL11'FXSREQE02E'
         DC    C'NODE '
MSG02NDE DC    CL8' '
         DC    C' IS INVALID'
MSG02L   EQU   *-MSG02
MSG03    DS    0C
         DC    CL11'FXSREQE03E'
         DC    C'MEM SIZE NOT DEFINED, PDS MEMBER TRANSMISSION NOT AVAI+
               LABLE'
MSG03L   EQU   *-MSG03
MSG04    DS    0C
         DC    CL11'FXSREQE04I'
         DC    C'TRANSMISSION REQUEST '
MSG04NDE DC    CL08' '
MSG04NBR DC    XL08'4021202020202020'
         DC    C' ACCEPTED'
MSG04L   EQU   *-MSG04
MSG05    DS    0C
         DC    CL11'FXSREQE05I'
         DC    C'MASTER FILE RECORD '
MSG05REC DC    CL05' '
         DC    C' REQUESTOR '
MSG05USR DC    CL8' '
         DC    C' DATASET '
MSG05DSN DC    CL44' '
MSG05L   EQU   *-MSG05
MSG06    DS    0C
         DC    CL11'FXSREQE06I'
         DC    C'TO NODES (ONLY FIRST FIVE WILL BE LISTED) '
MSG06NDE DC    CL45' '
MSG06L   EQU   *-MSG06
MSG07    DS    0C
         DC    CL11'FXSREQE07E'
         DC    C'YOU ARE NOT AUTHORIZED TO USE FX'
MSG07L   EQU   *-MSG07
MSG08    DS    0C
         DC    CL11'FXSREQE08E'
         DC    C'NODE '
MSG08NDE DC    CL8' '
         DC    C' IS DUPLICATED'
MSG08L   EQU   *-MSG08
MSG09    DS    0C
         DC    CL11'FXSREQE09E'
         DC    C'YOU DO NOT HAVE READ LEVEL ACCESS TO REQUESTED DATA SE+
               T'
MSG09L   EQU   *-MSG09
MSG10    DS    0C
         DC    CL11'FXSREQE10E'
         DC    C'TRANSMITTING NODE CANNOT ALSO BE A DESTINATION'
MSG10L   EQU   *-MSG10
         LTORG
* ------------------------------------------------------------------ *
*                                                                    *
*        WORK AREAS                                                  *
*                                                                    *
* ------------------------------------------------------------------ *
DXDSREQE DSECT
DXDID    DS    CL8                   WORK AREA OWNER ID
DXDSAVE  DS    18F                   REGISTER SAVE AREA
DXDDWORD DS    D                     CVD/CVB WORK AREA
DXDREQ#  DS    F                     NEW REQUEST'S REQUEST NUMBER
DXDRACL  DS    (RACLL)X              RACROUTE PARM LIST
SAFWORK  DS    (512)X                SAF WORK AREA
DXDDSNL  DS    X                     DATA SET NAME LENGTH
DXDDSN   DS    CL44                  DATA SET NAME
         PRTBLOK  DSECT=NO
         MSTRREQ  DSECT=NO
* ------------------------------------------------------------------ *
*              USER REQUEST/RESPONSE BLOCK                           *
* ------------------------------------------------------------------ *
         USERREQ
* ------------------------------------------------------------------ *
*              COMMON DATA MAP                                       *
* ------------------------------------------------------------------ *
         FXSCOMM  TYPE=DSECT
* ------------------------------------------------------------------ *
*              SESSION BLOCK                                         *
* ------------------------------------------------------------------ *
         SESSBLOK DSECT=YES
* ------------------------------------------------------------------ *
*              CONVERSATION BLOCK                                    *
* ------------------------------------------------------------------ *
         CONVBLOK DSECT=YES
* ------------------------------------------------------------------ *
*              DESTINATION BLOCK                                     *
* ------------------------------------------------------------------ *
         DESTBLOK DSECT=YES
* ------------------------------------------------------------------ *
*              MASTER FILE RECORD                                    *
* ------------------------------------------------------------------ *
         REQBLOK  DSECT=YES
* ------------------------------------------------------------------ *
*              EQUATES                                               *
* ------------------------------------------------------------------ *
         COPY REGEQU
         ABCODES
         END  FXSREQE
./ ADD NAME=FXSREQI  0100-99056-99056-1500-00567-00567-00000-FX-REL1

         TITLE 'FXSREQI  TRANSMISSION REQUEST INQUIRY'
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXSREQI                                               *
*                                                                     *
*  Allow the users or administrators to check on the status of        *
*  requests.  'Normal' users may only check on the status of their    *
*  status of their own requests, and may CANCEL them if they wish.    *
*  CANCELing a request does not remove the request from the master    *
*  file, the request is flagged CANCELed.  FX will perform no further *
*  transmissions of a request that has been CANCELed.  CANCELed       *
*  requests will be removed from the master file according to the     *
*  RETPDC (retention period for completed requests) criteria when     *
*  the purge utility is run.  Administrator users may check on the    *
*  status of any requests, and may CANCEL or DELETE them.  DELETEing  *
*  a request removes the request from the master file immediately,    *
*  no record of the deletion will exist.                              *
*                                                                     *
* ------------------------------------------------------------------- *
SREQI    FXPRFX 'TRANSMISSION REQUEST INQUIRY (AND UPDATE)'
FXSREQI  AMODE 31
FXSREQI  RMODE ANY
         USING SESSBLOK,R7           ADDRESS PASSED BY FXSVTAM
         USING CONVBLOK,R6           ADDRESS PASSED BY FXSVTAM
         CLC   DXDID,MODID           WORK AREA INITIALIZED?
         BE    REQI0010              YES
         ITRACE ID=INIT
         MVC   DXDID,MODID           WORK AREA INITIALIZED
         MVI   PRTCC,C' '            INITIALIZE PRINT AREA
         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC
REQI0010 DS    0H
         ITRACE ID=ENTRY             TRACE ENTRY
         GETMAIN RU,                 ACQUIRE 24-BIT PARM AREA          +
               LV=FX24L,             .. SIZE OF AREA                   +
               LOC=BELOW             .. FROM 24-BIT AREA
         ST    R1,DXD24              SAVE 24-BIT WORK AREA ADDRESS
         LR    R8,R1                 COPY ADDRESS
         USING FX24PRM,R8            DEFINE BASE
         CLI   SESSUATH,0            IS USER AUTHORIZED TO USE FX?
         BE    REQI0220              NO
         L     R5,CONVIOA            I/O AREA ADDRESS
         USING USERREQ,R5            DEFINE BASE
         ITRACE ID=CMD1,                                               +
               DATA1=USERCMD,        .. CAPTURE COMMAND                +
               DATA2=USERIDI         .. AND USER ID
         ITRACE ID=CMD2,                                               +
               DATA1=USERNODE,       .. CAPTURE ENTRY NODE             +
               DATA2=USERNBR         .. AND REQUEST NUMBER
         MVC   MSTRREC#,USERREC#     SET STARTING RECORD NUMBER
         CLI   USERCMD,$USERINQ      GENERAL INQUIRY
         BE    REQI0020              YES
         CLI   USERCMD,$USERSTA      STATUS INQUIRY
         BNE   REQI0040              NO.. UPDATE SPECIFIC RECORD
         MVC   DXDUSER,COMMBLKS      ALLOW REQUEST TO BELONG TO ANYONE
         B     REQI0040              START SEARCHING
REQI0020 DS    0H
         MVC   DXDUSER,SESSUSER      ASSUME ONLY USER'S OWN RECORDS
         CLI   SESSUATH,3            ADMINISTRATOR OR HIGHER?
         BL    REQI0040              NO
         MVC   DXDUSER,USERIDI       SAVE ID PROVIDED BY CALLER
         B     REQI0040              START SEARCH
REQI0030 DS    0H
         SR    R1,R1                 CLEAR REGISTER
         ICM   R1,3,MSTRREC#         CURRENT RECORD NUMBER
         LA    R1,1(R1)              PLUS 1
         STCM  R1,3,MSTRREC#         SAVE UPDATED RECORD NUMBER
REQI0040 DS    0H
         ITRACE ID=READMSTR,         READ MASTER FILE                  +
               DATA1=MSTRREC#,       .. RECORD NUMBER                  +
               DATA2=DXDUSER         .. USER WE'RE LOOKING FOR
         MVI   MSTRCMD,$MSTRRD       SET MASTER FILE COMMAND (READ)
         BAL   R9,MSTR0000           READ MASTER FILE
         USING REQBLOK,R2            DEFINE BASE
         CLI   REQSTAT,X'FF'         CONTROL RECORD?
         BE    REQI0030              YES.. NEVER RETURN IT
         CLI   USERCMD,$USERPRT      RETURN SYSPRINT OUTPUT?
         BE    REQI0250              YES
         CLI   USERCMD,$USERINQ      GENERAL INQUIRY?
         BE    REQI0050              YES
         CLI   USERCMD,$USERSTA      STATUS INQUIRY?
         BNE   REQI0090              NO.. MUST BE AN UPDATE
REQI0050 DS    0H
         CLI   REQSTAT,0             END OF RECORDS?
         BE    REQI0080              YES
         CLI   REQSTAT,$REQFREE      FREE RECORD?
         BE    REQI0030              YES
         CLC   DXDUSER,COMMBLKS      ANY USER?
         BE    REQI0060              YES
         CLC   DXDUSER,REQESTOR      CORRECT USER?
         BNE   REQI0030              NO
REQI0060 DS    0H
         CLI   USERCMD,$USERINQ      GENERAL INQUIRY?
         BE    REQI0070              YES.. ACCEPTABLE RECORD FOUND
         CLC   USERNODE,REQENODE     ENTRY NODES MATCH?
         BNE   REQI0030              NO
         CLC   USERNBR,REQNBR        REQUEST NUMBERS MATCH?
         BNE   REQI0030              NO
REQI0070 DS    0H
         ITRACE ID=RECFND            ACCEPTABLE RECORD FOUND
         MVI   USERRC,0              SET RETURN CODE
         LA    R1,(USERDATA-USERREQ)+REQBLOKL
         STH   R1,USERLEN            SET LENGTH
         LA    R0,USERDATA           1ST BYTE OF USER DATA
         LA    R1,REQBLOKL           LENGTH
         LR    R3,R1                 LENGTH
         MVCL  R0,R2                 COPY RECORD TO I/O AREA
         B     EXIT0000              AND EXIT
REQI0080 DS    0H
         ITRACE ID=RECNTFND          NO ACCEPTABLE RECORD FOUND
         MVI   USERRC,8              SET RETURN CODE
         LA    R1,USERDATA-USERREQ   LENGTH TO RETURN
         B     EXIT0000              AND EXIT
REQI0090 DS    0H
         CLI   SESSUATH,1            MORE THAN A 'NORMAL' USER?
         BH    REQI0100              YES..
         CLI   USERCMD,$USERDEL      DELETE?
         BE    REQI0210              NOT ALLOWED TO DELETE
         CLC   REQESTOR,DXDUSER      IS IT USER'S OWN REQUEST?
         BNE   REQI0210              NO.. MAY NOT CANCEL OR DELETE
REQI0100 DS    0H
         CLI   USERCMD,$USERCAN      CANCEL THE REQUEST?
         BE    REQI0200              YES
* ------------------------------------------------------------------- *
*                                                                     *
*    Request DELETE.  Before allowing the deletion, we must make      *
*    sure no other activity is using the request.  Things to check    *
*    are the DF/DSS and IEBCOPY subtasks, and the records associated  *
*    with CONV blocks.                                                *
*                                                                     *
* ------------------------------------------------------------------- *
         ITRACE ID=DELREQ            DELETING A REQUEST
         ICM   R14,15,DSSREQ         REQUEST DF/DSS IS WORKING ON
         BZ    REQI0110              NO REQUEST PRESENT
         USING DRREQ,R14             DEFINE BASE
         CLC   REQREC#,DRRECD+(REQREC#-REQBLOK)
         BE    REQI0240              RECORD IS IN USE
REQI0110 DS    0H
         ICM   R14,15,COPYREQ        REQUEST IEBCOPY IS WORKING ON
         BZ    REQI0120              NO REQUEST PRESENT
         CLC   REQREC#,DRRECD+(REQREC#-REQBLOK)
         BE    REQI0240              RECORD IS IN USE
REQI0120 DS    0H
         STM   R6,R7,DXDDELSV        SAVE SESS AND CONV BLOCK ADDRESSES
         ICM   R7,15,COMMSESS        FIRST SESSION BLOCK
         BZ    REQI0160              NO SESSIONS
REQI0130 DS    0H
         ICM   R6,15,SESSCONV        FIRST CONVERSATION
         BZ    REQI0150              NO CONVERSATIONS
         C     R6,DXDDELSV           MY OWN CONVERSATION?
         BE    REQI0150              YES
REQI0140 DS    0H
         CLC   MSTRREC#,CONVREC#     RECORD IN USE?
         BE    REQI0230              YES
         ICM   R6,15,CONVNEXT        NEXT CONVERSATION
         BNZ   REQI0140              LOOP
REQI0150 DS    0H
         ICM   R7,15,SESSNEXT        NEXT SESSION BLOCK
         BNZ   REQI0130              LOOP
REQI0160 DS    0H
         LM    R6,R7,DXDDELSV        RESTORE OUR SESS AND CONV BLOCK
         CLC   REQWDSNM,COMMBLKS     STAGING DATASET ALLOCATED?
         BE    REQI0170              NO
         MVC   DAIRDSN,REQWDSNM      SET DATASET NAME
         MVI   DAIRCMD,$DAIRDEL      SET COMMAND (DELETE)
         BAL   R9,DAIR0000           LINK TO DAIR MODULE TO DELETE
         CLC   X1708,DAIRERR         FILE NOT FOUND?
         BE    REQI0170              NOT FOUND.. ACCEPTABLE
         MVC   PRTMSGID(MSG01L),MSG01
         MVC   PRTMSGID+(MSG01NDE-MSG01)(L'MSG01NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG01NBR-MSG01)(L'MSG01NBR),DXDDWORD+4
         MVC   PRTMSGID+(MSG01DSC-MSG01)(L'STAGING),STAGING
         MVC   PRTMSGID+(MSG01DSN-MSG01)(L'MSG01DSN),REQWDSNM
         BAL   R9,PRT0000            QUEUE MESSAGE TO PRINT
REQI0170 DS    0H
         CLC   REQIDSNM,COMMBLKS     SYSIN DATASET ALLOCATED?
         BE    REQI0180              NO
         MVC   DAIRDSN,REQIDSNM      SET DATASET NAME
         MVI   DAIRCMD,$DAIRDEL      SET COMMAND (DELETE)
         BAL   R9,DAIR0000           LINK TO DAIR MODULE TO DELETE
         CLC   X1708,DAIRERR         FILE NOT FOUND?
         BE    REQI0180              NOT FOUND.. ACCEPTABLE
         MVC   PRTMSGID(MSG01L),MSG01
         MVC   PRTMSGID+(MSG01NDE-MSG01)(L'MSG01NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG01NBR-MSG01)(L'MSG01NBR),DXDDWORD+4
         MVC   PRTMSGID+(MSG01DSC-MSG01)(L'SYSIN),SYSIN
         MVC   PRTMSGID+(MSG01DSN-MSG01)(L'MSG01DSN),REQIDSNM
         BAL   R9,PRT0000            QUEUE MESSAGE TO PRINT
REQI0180 DS    0H
         CLC   REQSDSNM,COMMBLKS     SYSPRINT DATASET ALLOCATED?
         BE    REQI0190              NO
         MVC   DAIRDSN,REQSDSNM      SET DATASET NAME
         MVI   DAIRCMD,$DAIRDEL      SET COMMAND (DELETE)
         BAL   R9,DAIR0000           LINK TO DAIR MODULE TO DELETE
         CLC   X1708,DAIRERR         FILE NOT FOUND?
         BE    REQI0190              NOT FOUND.. ACCEPTABLE
         MVC   PRTMSGID(MSG01L),MSG01
         MVC   PRTMSGID+(MSG01NDE-MSG01)(L'MSG01NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG01NBR-MSG01)(L'MSG01NBR),DXDDWORD+4
         MVC   PRTMSGID+(MSG01DSC-MSG01)(L'SYSPRINT),SYSPRINT
         MVC   PRTMSGID+(MSG01DSN-MSG01)(L'MSG01DSN),REQSDSNM
         BAL   R9,PRT0000            QUEUE MESSAGE TO PRINT
REQI0190 DS    0H
         MVC   PRTMSGID(MSG02L),MSG02
         MVC   PRTMSGID+(MSG02NDE-MSG02)(L'MSG02NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG02NBR-MSG02)(L'MSG02NBR),DXDDWORD+4
         BAL   R9,PRT0000            QUEUE MESSAGE TO PRINT
         MINIT COMMBLKS,P0,$REQFREE,R14 INITIALIZE REQUEST
         MVI   MSTRCMD,$MSTRWRT      SET COMMAND (WRITE)
         BAL   R9,MSTR0000           UPDATE MASTER FILE RECORD
         LA    R1,(USERDATA-USERREQ) TOTAL LENGTH
         STH   R1,USERLEN            SET LENGTH
         MVI   USERRC,0              SET RETURN CODE
         B     EXIT0000              EXIT
REQI0200 DS    0H
         ITRACE ID=CANREQ            CANCELLING A REQUEST
         MVI   REQSTAT,$REQUCAN      SET STATUS TO CANCELLED
         MVI   MSTRCMD,$MSTRWRT      SET COMMAND
         BAL   R9,MSTR0000           UPDATE MASTER FILE
         MVC   PRTMSGID(MSG03L),MSG03
         MVC   PRTMSGID+(MSG03NDE-MSG03)(L'MSG03NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG03NBR-MSG03)(L'MSG03NBR),DXDDWORD+4
         BAL   R9,PRT0000            QUEUE MESSAGE TO PRINT
         LA    R1,(USERDATA-USERREQ) TOTAL LENGTH
         MVI   USERRC,0              SET RETURN CODE
         B     EXIT0000              EXIT
REQI0210 DS    0H
         ITRACE ID=NOTALLOW          REQUEST NOT ALLOWED
         LA    R1,(USERDATA-USERREQ) TOTAL LENGTH
         MVI   USERRC,8              SET RETURN CODE
         B     EXIT0000              EXIT
REQI0220 DS    0H
         ITRACE ID=NOTAUTH           USER NOT AUTHORIZED TO USE FX
         LA    R1,(USERDATA-USERREQ) TOTAL LENGTH
         STH   R1,USERLEN            SET LENGTH
         MVI   USERRC,20             'USER NOT AUTHORIZED'
         B     EXIT0000              EXIT
REQI0230 DS    0H
         LM    R6,R7,DXDDELSV        RESTORE OUR SESS AND CONV BLOCKS
REQI0240 DS    0H
         ITRACE ID=INUSE             RECORD IN USE, CANNOT DELETE
         LA    R1,(USERDATA-USERREQ) TOTAL LENGTH
         STH   R1,USERLEN            SET LENGTH
         MVI   USERRC,12             'RECORD IN USE'
         B     EXIT0000              EXIT
REQI0250 DS    0H
         ITRACE ID=SYSPRINT          RETURN SYSPRINT TO USER
         CLC   REQSDSNM,COMMBLKS     DATASET ALLOCATED?
         BE    REQI0350              NO
         FXCALL FXSDAIR,ALLOCATE,    CALL FXSDAIR TO ALLOCATE          +
               DATASET,              .. EXISTING DATA SET              +
               ,                     .. DDNAME WILL BE GENERATED       +
               REQSDSNM              .. DATA SET NAME
         CLC   X1708,DAIRERR         DATASET NOT FOUND?
         BE    REQI0340              NOT FOUND...
         OC    DAIRR15,DAIRR15       DAIR SUCCESSFUL?
         BNZ   ERR0010               NO
         USING PSA,R0                DEFINE PSA BASE
         L     R14,PSATNEW           OUR TCB'S ADDRESS
         USING TCB,R14               DEFINE TCB BASE
         L     R15,TCBTIO            TIOT ADDRESS
         USING TIOT1,R15             DEFINE BASE
         LA    R1,TIOENTRY           FIRST TIOT ENTRY
         USING TIOENTRY,R1           DEFINE BASE
         SR    R14,R14               CLEAR REGISTER
REQI0260 DS    0H
         ICM   R14,1,TIOELNGH        LENGTH OF THIS ENTRY
         BZ    ERR0030               TIOT ENTRY NOT FOUND
         CLC   TIOEDDNM,DAIRDDN      TIOT ENTRY FOUND?
         BE    REQI0270              YES
         AR    R1,R14                NEXT TIOT ENTRY
         B     REQI0260              LOOP
REQI0270 DS    0H
         SR    R15,R15               CLEAR REGISTER
         ICM   R15,7,TIOEFSRT        UCB ADDRESS
         USING UCBOB,R15             DEFINE UCB BASE
         MVC   DSN24,DAIRDSN         COPY DATA SET NAME
         MVC   VOL24,UCBVOLI         SET VOLSER
         FX24  $CAMLSTN              OBTAIN VTOC DATA BY DATA SET NAME
         LTR   R15,R15               CAMLST SUCCESSFUL?
         BNZ   ERR0040               NO
         LA    R14,VTOC24            RETURNED VTOC DATA
         USING DSCB,R14              DEFINE BASE
         OC    DS1BLKL,DS1BLKL       BLOCK SIZE = ZERO?
         BZ    REQI0360              YES.. DATA SET NOT READY
         L     R2,CONVDCB            DCB ADDRESS
         MVC   0(DCBIL,R2),DCBI      INITIALIZE THE DCB
         USING IHADCB,R2             DEFINE BASE
         MVC   DCBDDNAM,DAIRDDN      SET DDNAME IN DCB
         ST    R2,DCB24              SET DCB ADDRESS
         FX24  $OPENI                OPEN THE DCB INPUT
         MVC   USERRCSZ,DCBLRECL     COPY RECORD SIZE FROM DCB
         MVC   USERBLKZ,DCBBLKSI     COPY BLOCK SIZE FROM DCB
         MVC   USERRCFM,DCBRECFM     COPY RECORD FORMAT FROM DCB
         LA    R3,USERLST-USERREQ    INITIAL LENGTH
         LA    R4,USERLST            INITIAL OUTPUT ADDRESS
         LA    R1,REQI0320           EOF ADDRESS
         ST    R1,EOF24              SET EOF ADDRESS FOR FXS24
         L     R9,=A(COMMIOSZ)       FULL I/O AREA SIZE
         SR    R9,R3                 MINUS PREFIX DATA LENGTH
         SH    R9,DCBLRECL           MINUS 1 RECORD FOR GOOD MEASURE
REQI0280 DS    0H
         ST    R4,IOA24              I/O AREA ADDRESS
         FX24  $GETM                 READ/MOVE A RECORD
         ITRACE ID=LISTLEN,RDATA1=R3
         SR    R1,R1                 CLEAR REGISTER
         TM    DCBRECFM,DCBRECV      VARIABLE LENGTH RECORDS?
         BO    REQI0290              YES
         ICM   R1,3,DCBLRECL         USE RECORD SIZE FROM DCB
         B     REQI0300
REQI0290 DS    0H
         ICM   R1,3,0(R4)            USE SIZE FROM I/O AREA
REQI0300 DS    0H
         AR    R3,R1                 PLUS SIZE OF THIS RECORD
         SR    R9,R1                 MINUS LENGTH FROM AMOUNT LEFT
         BNH   REQI0310              I/O AREA IS FULL.. FORCE EXIT
         AR    R4,R1                 NEXT RECORD IN I/O AREA
         B     REQI0280              READ ANOTHER RECORD
REQI0310 DS    0H
         ITRACE ID=FORCEOF
         B     REQI0330
REQI0320 DS    0H
         ITRACE ID=LISTEOF
REQI0330 DS    0H
         FX24  $CLOSE
         FXCALL FXSDAIR,RELEASE      RELEASE THE DATA SET
         OC    DAIRR15,DAIRR15       DAIR SUCCESSFUL?
         BNZ   ERR0020
         ITRACE ID=LISTTOT,RDATA1=R3
         STCM  R3,3,USERLEN          SET TOTAL LENGTH
         MVI   USERRC,0              SET RETURN CODE
         B     EXIT0000              EXIT
REQI0340 DS    0H
         LA    R1,MSG04L             SET LRECL
         STH   R1,USERRCSZ           SET RECORD SIZE
         LA    R1,4(R1)              PLUS 4
         STH   R1,USERBLKZ           SET BLOCK SIZE
         MVI   USERRCFM,DCBRECV+DCBRECBR
         MVC   USERLST(MSG04L),MSG04 SET MESSAGE
         LA    R3,(USERLST-USERREQ)+MSG04L   TOTAL LENGTH
         STCM  R3,3,USERLEN          SET TOTAL LENGTH
         MVI   USERRC,0              SET RETURN CODE
         B     EXIT0000              EXIT
REQI0350 DS    0H
         ITRACE ID=NOLIST            LIST DATASET NOT ALLOCATED
         LA    R1,MSG05L             SET LRECL
         STH   R1,USERRCSZ           SET RECORD SIZE
         LA    R1,4(R1)              PLUS 4
         STH   R1,USERBLKZ           SET BLOCK SIZE
         MVI   USERRCFM,DCBRECV+DCBRECBR
         MVC   USERLST(MSG05L),MSG05 SET MESSAGE
         LA    R3,(USERLST-USERREQ)+MSG05L   TOTAL LENGTH
         STCM  R3,3,USERLEN          SET TOTAL LENGTH
         MVI   USERRC,0              SET RETURN CODE
         B     EXIT0000              EXIT
REQI0360 DS    0H
         ITRACE ID=LSTNOPEN          LIST DATASET NEVER OPENED
         FXCALL FXSDAIR,RELEASE      RELEASE THE DATA SET
         OC    DAIRR15,DAIRR15       DAIR SUCCESSFUL?
         BNZ   ERR0020               NO
         LA    R1,MSG06L             SET LRECL
         STH   R1,USERRCSZ           SET RECORD SIZE
         LA    R1,4(R1)              PLUS 4
         STH   R1,USERBLKZ           SET BLOCK SIZE
         MVI   USERRCFM,DCBRECV+DCBRECBR
         MVC   USERLST(MSG06L),MSG06 SET MESSAGE
         LA    R3,(USERLST-USERREQ)+MSG06L   TOTAL LENGTH
         STCM  R3,3,USERLEN          SET TOTAL LENGTH
         MVI   USERRC,0              SET RETURN CODE
         B     EXIT0000              EXIT
MSTR0000 DS    0H
         ITRACE ID=MASTERIO
         FXCALL FXSMSTR              MASTER FILE I/O PARM BLOCK ADDR
         LA    R2,MSTRRECD           RETURNED MASTER FILE RECORD ADDR
         USING REQBLOK,R2            DEFINE BASE
         MVC   CONVREC#,MSTRREC#     SAVE RECORD NUMBER
         BR    R9                    RETURN
PRT0000  DS    0H
         ITRACE ID=PRINT
         FXCALL PRTQ,PRINT           ADD REQUEST TO PRINT QUEUE
         BR    R9                    RETURN
DAIR0000 DS    0H
         ITRACE ID=CALLDAIR
         FXCALL FXSDAIR              LINK TO FXSDAIR
         OC    DAIRR15,DAIRR15       DAIR SUCCESSFUL?
         BZR   R9                    YES, RETURN
         CLC   X1708,DAIRERR         DATASET NOT FOUND?
         BER   R9                    YES, RETURN
         ITRACE ID=DAIRFAIL,         DAIR PROBLEMS                     +
               DATA1=DAIRR15         .. TRACE R15, ERR, AND INFO CODES
         ABEND $U0016,DUMP,,USER     OOPS
ERR0010  DS    0H
         ITRACE ID=DSSAFAIL,         SYSPRINT LIST FILE ALLOCATE FAILED+
               DATA1=DAIRR15         TRACE R15, ERR, AND INFO
         ABEND $U0079,DUMP,,USER
ERR0020  DS    0H
         ITRACE ID=RLSEFAIL,         SYSPRINT FILE RELEASE FAILED      +
               DATA1=DAIRR15         TRACE R15, ERR, AND INFO
         ABEND $U0080
ERR0030  DS    0H
         ITRACE ID=NOTIOT,           DDNAME NOT FOUND IN TIOT          +
               DATA1=DAIRDDN
         ABEND $U0114,DUMP,,USER
ERR0040  DS    0H
         ITRACE ID=CAMLSTF,          CAMLST FAILED FOR PRINT DSN       +
               RDATA1=R15,           .. CAMLST RETURN CODE             +
               RDATA2=R8             .. FX24 PARM BLOCK ADDRESS
         ABEND $U0115,DUMP,,USER
EXIT0000 DS    0H
         ITRACE ID=EXIT              EXITING PRINT MODULE
         ICM   R1,15,DXD24           24-BIT AREA ACQUIRED?
         BZ    EXIT0010              NO
         FREEMAIN RU,A=(1),LV=FX24L FREEMAIN 24-BIT WORK AREA
         XC    DXD24,DXD24           CLEAR THE ADDRESS
EXIT0010 DS    0H
         L     R13,4(R13)            RESTORE REGISTER 13
         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS
         SR    R15,R15               GIVE GOOD RETURN CODE
         BR    R14                   RETURN TO CALLER
* ------------------------------------------------------------------ *
*                                                                    *
*        CONSTANTS                                                   *
*                                                                    *
* ------------------------------------------------------------------ *
DXDSTART DC    Q(DXDSREQI)           DISPLACEMENT TO WORK AREA
P0       DC    P'0'
X1708    DC    X'1708'
STAGING  DC    C'STAGING'
SYSIN    DC    C'SYSIN'
SYSPRINT DC    C'SYSPRINT'
MSG01    DS    0C
         DC    CL11'FXSREQI01I'
MSG01DSC DC    CL8' '
         DC    C' DATASET '
MSG01DSN DC    CL44' '
         DC    C' DELETED FOR REQUEST '
MSG01NDE DC    CL8' '
MSG01NBR DC    XL8'4021202020202020'
MSG01L   EQU   *-MSG01
MSG02    DS    0C
         DC    CL11'FXSREQI02I'
         DC    C'REQUEST '
MSG02NDE DC    CL8' '
MSG02NBR DC    XL8'4021202020202020'
         DC    C' DELETED'
MSG02L   EQU   *-MSG02
MSG03    DS    0C
         DC    CL11'FXSREQI03I'
         DC    C'REQUEST '
MSG03NDE DC    CL8' '
MSG03NBR DC    XL8'4021202020202020'
         DC    C' CANCELLED'
MSG03L   EQU   *-MSG03
MSG04    DS    0C
         DC    AL2(MSG04L)
         DC    AL2(0)
         DC    C'*** SYSPRINT FILE HAS BEEN DELETED ***'
MSG04L   EQU   *-MSG04
MSG05    DS    0C
         DC    AL2(MSG05L)
         DC    AL2(0)
         DC    C'*** SYSPRINT FILE HAS NOT BEEN ALLOCATED ***'
MSG05L   EQU   *-MSG05
MSG06    DS    0C
         DC    AL2(MSG06L)
         DC    AL2(0)
         DC    C'*** SYSPRINT FILE HAS NOT BEEN OPENED ***'
MSG06L   EQU   *-MSG06
DCBI     DCB   DDNAME=DDNAME,            MODEL DCB TO READ DF/DSS LIST +
               DSORG=PS,                 .. SEQUENTIAL                 +
               EODAD=*,                  .. EOF ADDRESS                +
               MACRF=GM                  .. GET/MOVE MODE
DCBIL    EQU   *-DCBI
         LTORG
* ------------------------------------------------------------------ *
*                                                                    *
*        WORK AREAS                                                  *
*                                                                    *
* ------------------------------------------------------------------ *
DXDSREQI DSECT
DXDID    DS    CL8                   WORK AREA OWNER ID
DXDSAVE  DS    18F                   REGISTER SAVE AREA
DXDDWORD DS    D                     CVD/CVB WORK AREA
DXDDELSV DS    2F                    SESS AND CONV BLOCK ADDR SAVE AREA
DXD24    DS    A                     24-BIT WORK AREA ADDRESS
DXDUSER  DS    CL8                   USERID REQUESTED
         PRTBLOK DSECT=NO
         DAIRREQ DSECT=NO
* ------------------------------------------------------------------ *
*              PRINT MODULE INTERFACE BLOCK                          *
* ------------------------------------------------------------------ *
         MSTRREQ DSECT=NO
* ------------------------------------------------------------------ *
*              USER REQUEST/RESPONSE BLOCK                           *
* ------------------------------------------------------------------ *
         USERREQ
USERCMD  DS    C               COMMAND FROM FXTREQI
$USERINQ EQU   C'I'            .. INQUIRE
$USERCAN EQU   C'C'            .. CANCEL REQUEST
$USERDEL EQU   C'D'            .. DELETE REQUEST
$USERPRT EQU   C'O'            .. RETURN DF/DSS LIST FILE
$USERSTA EQU   C'S'            .. RETURN STATUS OF SPECIFIC REQUEST
USERREC# DS    XL2             STARTING RECORD NUMBER
USERIDI  DS    CL8             USER ID (FOR SPECIFIC USER REQUESTS)
USERNODE DS    CL8             NODE NAME (FOR SPECIFIC REQUESTS)
USERNBR  DS    XL4             REQUEST NUMBER (FOR SPECIFIC REQUESTS)
USERRCSZ DS    XL2             LRECL FROM DCB USED TO READ DF/DSS LIST
USERBLKZ DS    XL2             BLKSZ FROM DCB USED TO READ DF/DSS LIST
USERRCFM DS    X               RECFM FROM DCB USED TO READ DF/DSS LIST
USERLST  DS    0C
* ------------------------------------------------------------------ *
*              COMMON DATA MAP                                       *
* ------------------------------------------------------------------ *
         FXSCOMM  TYPE=DSECT
* ------------------------------------------------------------------ *
*              SESSION BLOCK                                         *
* ------------------------------------------------------------------ *
         SESSBLOK DSECT=YES
* ------------------------------------------------------------------ *
*              CONVERSATION BLOCK                                    *
* ------------------------------------------------------------------ *
         CONVBLOK DSECT=YES
* ------------------------------------------------------------------ *
*              MASTER FILE RECORD                                    *
* ------------------------------------------------------------------ *
         REQBLOK  DSECT=YES
* ------------------------------------------------------------------ *
*              DUMP/RESTORE REQUEST BLOCK                            *
* ------------------------------------------------------------------ *
         DRREQ    DSECT=YES
* ------------------------------------------------------------------ *
*              24-BIT PARM AREA                                      *
* ------------------------------------------------------------------ *
         FX24PRM  DSECT=YES
* ------------------------------------------------------------------ *
*              DCB DSECT                                             *
* ------------------------------------------------------------------ *
         DCBD     DSORG=PS
* ------------------------------------------------------------------ *
*                                                                    *
* ------------------------------------------------------------------ *
         IHAPSA   DSECT=YES,LIST=NO
         IKJTCB   DSECT=YES,LIST=NO
TIOT     DSECT
         IEFTIOT1
         IEFUCBOB LIST=NO
DSCB     DSECT
         IECSDSL1 1
* ------------------------------------------------------------------ *
*                                                                    *
*              EQUATES                                               *
*                                                                    *
* ------------------------------------------------------------------ *
         COPY REGEQU
         ABCODES
         END  FXSREQI
./ ADD NAME=FXSRPLX  0100-99056-99056-1500-00116-00116-00000-FX-REL1

         TITLE 'VTAM RPL EXIT'
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXSRPLX                                               *
*                                                                     *
*  VTAM RPL exit                                                      *
*                                                                     *
*  When the storage for the RPLs associated with SESSBLOKs and        *
*  CONVBLOKs is acquired, 4 bytes is added to the size to allow for   *
*  a "pointer" that points back to the control block the RPL belongs  *
*  to.  The pointer immediately follows the RPLs.  This prevents      *
*  this exit from having to "scan" the SESSBLOKs and CONVBLOKs.       *
*                                                                     *
* ------------------------------------------------------------------- *
FXSRPLX  CSECT
FXSRPLX  AMODE 31
FXSRPLX  RMODE ANY
         LR    R12,R15               LOAD BASE
         USING FXSRPLX,R12           DEFINE BASE
         LR    R10,R1                COPY PARAMETER LIST ADDRESS
         USING IFGRPL,R10            DEFINE BASE
         LR    R5,R14                SAVE RETURN ADDRESS
         B     RPLX0010              SKIP ADDRESS AND EYECATCHER
         DC    ((PFXMODNM-MODPRFX)-(*-FXSRPLX))X'00'
         DC    CL8'FXSRPLX'          MODULE NAME
         DC    C'&SYSDATE'           DATE OF ASSEMBLY
         DC    C'&SYSTIME'           TIME OF ASSEMBLY
RPLX0010 DS    0H
         GETMAIN RU,LV=72,LOC=BELOW  ACQUIRE A SAVE AREA
         LR    R13,R1                SAVE AREA ADDRESS
         L     R1,RPLDACB            ACB'S ADDRESS
         USING IFGACB,R1             DEFINE BASE
         L     R11,ACBUSER           COMMON DATA ADDRESS
         USING FXSCOMM,R11           DEFINE BASE
         L     R7,RPLL(R10)          SESSBLOK OR CONVBLOK ADDRESS
         ITRACE ID=ENTRY,                                              +
               RDATA1=R10,           .. RPL'S ADDRESS                  +
               RDATA2=R7             .. SESSBLOK OR CONVBLOK ADDRESS
         USING SESSBLOK,R7           DEFINE BASE
         CLC   SESSEYE,SESSID        IS THIS A SESSBLOK?
         BNE   RPLX0020              NO
         C     R10,SESSRPL           RPL BELONG TO THIS SESSBLOK?
         BNE   ERR0010               ERROR
         TM    SESSSTAT,$SESSPND     FUNCTION PENDING?
         BNO   ERR0020               NO.. WE'RE LOST AGAIN
         NI    SESSSTAT,255-$SESSPND RESET 'PENDING' INDICATOR
         POST  COMMVECB              POST 'VTAM' ECB
         B     EXIT0000              AND EXIT
RPLX0020 DS    0H
         L     R6,RPLL(R10)
         USING CONVBLOK,R6           DEFINE BASE
         CLC   CONVEYE,CONVID        IS THIS A CONVBLOK?
         BNE   ERR0010               NO
         C     R10,CONVRPL           RPL BELONG TO THIS CONVBLOK?
         BNE   ERR0010               NO
         TM    CONVSTAT,$CONVPND     FUNCTION PENDING?
         BNO   ERR0030               NO.. LOST AGAIN
         NI    CONVSTAT,255-$CONVPND RESET 'PENDING' INDICATOR
         POST  COMMVECB              POST 'VTAM' ECB
         B     EXIT0000              AND EXIT
* ------------------------------------------------------------------- *
*        SERIOUS ERRORS                                               *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         ITRACE ID=UNKNRPL
         ABEND $U0087,DUMP,,USER     RPL DOES NOT BELONG TO US
ERR0020  DS    0H
         ITRACE ID=NOSESSP
         ABEND $U0088,DUMP,,USER     SESS LEVEL WITH NOTHING PENDING
ERR0030  DS    0H
         ITRACE ID=NOCONVP
         ABEND $U0089,DUMP,,USER     CONV LEVEL WITH NOTHING PENDING
* ------------------------------------------------------------------- *
*             EXIT                                                    *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT              EXITING
         FREEMAIN RU,A=(13),LV=72    FREEMAIN REGISTER SAVE AREA
         BR    R5                    RETURN TO CALLER
* ------------------------------------------------------------------ *
*                                                                    *
*        CONSTANTS                                                   *
*                                                                    *
* ------------------------------------------------------------------ *
         LTORG
SESSID   DC    CL8'SESSBLOK'
CONVID   DC    CL8'CONVBLOK'
* ------------------------------------------------------------------ *
*              COMMON DATA MAP                                       *
* ------------------------------------------------------------------ *
         FXSCOMM  TYPE=DSECT
* ------------------------------------------------------------------ *
*              VTAM SESSION BLOCK                                    *
* ------------------------------------------------------------------ *
         SESSBLOK DSECT=YES
* ------------------------------------------------------------------ *
*              VTAM CONVERSATION BLOCK                               *
* ------------------------------------------------------------------ *
         CONVBLOK DSECT=YES
* ------------------------------------------------------------------ *
*              ACB DSECT                                             *
* ------------------------------------------------------------------ *
         IFGACB AM=VTAM
* ------------------------------------------------------------------ *
*              RPL AND RPL EXTENSION DSECTS                          *
* ------------------------------------------------------------------ *
         IFGRPL AM=VTAM
RPLL     EQU   *-IFGRPL
* ------------------------------------------------------------------ *
*              EQUATES                                               *
* ------------------------------------------------------------------ *
         COPY REGEQU
         ABCODES
         END  FXSRPLX
./ ADD NAME=FXSSEND  0100-99056-99056-1500-00905-00905-00000-FX-REL1

         TITLE 'FILE TRANSMISSION SEND'
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXSSEND                                               *
*                                                                     *
*        Earlier we found a request to transmit a dataset or a        *
*        previously received dataset 'RESTORE' has completed.         *
*                                                                     *
*        The partner node is active and the conversation has been     *
*        allocated.                                                   *
*                                                                     *
*        If this is a data set transmission request, this module      *
*        performs the SEND end of transmission.  The data set has     *
*        already been "dumped" by DF/DSS or IEBCOPY.  The dump        *
*        data set is allocated, and the DCB used to read it is open.  *
*        On each successive iteration, the next block will be read    *
*        from the "dump" data set and transmitted to the other end.   *
*        At EOD, a "last" record is transmitted to notify the         *
*        receiver that the transmission is complete.                  *
*                                                                     *
*        If a RESTORE has completed, we need to inform the originator *
*        of the success or failure of the RESTORE.                    *
*                                                                     *
* ------------------------------------------------------------------- *
SSEND    FXPRFX 'FILE TRANSMISSION SEND'
FXSSEND  AMODE 31
FXSSEND  RMODE ANY
         USING FXSSEND,R12           DEFINE BASE REGISTER
         LR    R8,R1                 COPY PARAMETER BLOCK ADDRESS
         USING VTAMBLOK,R8           DEFINE BASE
         L     R7,VTAMSESS           SESSION BLOCK'S ADDRESS
         USING SESSBLOK,R7           DEFINE BASE
         L     R6,VTAMCONV           CONVERSATION BLOCK'S ADDRESS
         USING CONVBLOK,R6           DEFINE BASE
         CLC   DXDID,MODID           WORK AREA INITIALIZED?
         BE    SEND0010              YES
         MVC   DXDID,MODID           WORK AREA INITIALIZED
         MVI   PRTCC,C' '            INITIALIZE PRINT I/O AREA
         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC
         GETMAIN RU,                 ACQUIRE 24-BIT PARM BLOCK         +
               LV=FX24L,             .. AREA SIZE                      +
               LOC=BELOW             .. FROM BELOW THE LINE
         ST    R1,DXD24              SAVE 24-BIT PARM AREA ADDRESS
SEND0010 DS    0H
         TM    COMMEOJ,$EOJ3         TIME TO CLEAN-UP?
         BO    EXIT0000              YES
         L     R9,DXD24              24-BIT PARM AREA ADDRESS
         USING FX24PRM,R9            DEFINE BASE
         CLI   CONVFUNC,0            ANY FUNCTION?
         BNE   SEND0100              YES
         ITRACE ID=STRTXMIT,         STARTING TRANSMISSION             +
               DATA1=SESSNAME,       .. LU NAME                        +
               DATA2=CONVREC#        .. MASTER FILE RECORD NUMBER
         MVC   MSTRREC#,CONVREC#     SET RECORD NUMBER
         MVI   MSTRCMD,$MSTRRD       SET COMMAND (READ)
         BAL   R4,MSTR0000           READ MASTER FILE
         USING REQBLOK,R5            DEFINE BASE
         CLI   REQSTAT,$REQRSTC      RESTORE COMPLETE?
         BE    SEND0090              YES
         TM    REQSTAT,$REQNFYE      ERROR REQUIRING SENDER NOTIFY?
         BO    SEND0090              YES
         CLC   REQTNODE,SESSNAME     TO BE TRANSMITTED BY PARTNER?
         BE    SEND0080              YES
* ------------------------------------------------------------------- *
*                                                                     *
*        We have a data set to transmit.                              *
*                                                                     *
*        Verify this node is in the destination list.                 *
*                                                                     *
*        If the checkpoint data for this node is zero, this is the    *
*        start of a new transmission.  If the checkpoint data is not  *
*        zero, this is a transmission restart.                        *
*                                                                     *
* ------------------------------------------------------------------- *
         SR    R1,R1                 CLEAR REGISTER
         ICM   R1,3,REQNDE#          NUMBER OF NODES
         BZ    ERR0030               BAD NEWS
         LA    R3,REQNDENM           FIRST NODE NAME
         USING REQNDENM,R3           DEFINE BASE
SEND0020 DS    0H
         CLC   REQNDENM,SESSNAME     IS THIS THE RIGHT NODE?
         BE    SEND0030              YES
         LA    R3,REQNDEL(R3)        NEXT NODE
         BCT   R1,SEND0020           CHECK NEXT NODE
         B     ERR0030               NODE NOT FOUND
SEND0030 DS    0H
         MVI   REQNDEST,$REQNDET     STATUS IS 'BEING TRANSMITTED'
         OC    REQNDECR,REQNDECR     CHECKPOINT DATA ZERO?
         BNZ   SEND0040              NO.. THIS IS A RESTART
         DROP  R3
* ------------------------------------------------------------------- *
*                                                                     *
*        Starting a new data set transmission.                        *
*                                                                     *
*        Issue a message to log the transmission starting.            *
*        Allocate the staging data set.                               *
*        Open the DCB to be used to read the data set.                *
*        Send the control record to the receiving node.               *
*                                                                     *
* ------------------------------------------------------------------- *
         OI    DXDFLAG,$DXDNEW       NEW TRANSMISSION
         MVC   PRTMSGID(MSG01L),MSG01
         MVC   PRTMSGID+(MSG01NDE-MSG01)(L'MSG01NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG01NBR-MSG01)(L'MSG01NBR),DXDDWORD+4
         MVC   PRTMSGID+(MSG01NDT-MSG01)(L'MSG01NDT),SESSNAME
         B     SEND0050
* ------------------------------------------------------------------- *
*                                                                     *
*        Restarting a transmission.                                   *
*                                                                     *
*        Both sending and receiving nodes "checkpoint" every 100      *
*        stage data set physical blocks.  To restart:                 *
*          1) Issue a message to log the restart.                     *
*          2) Allocate the stage data set.                            *
*          3) Open the DCB to read the data set.                      *
*          4) Issue a POINT to re-position into the stage data set.   *
*          5) Send a restart record to the receiver.                  *
*                                                                     *
*        When the receiver receives the restart record, it will       *
*        verify that it also checkpointed on the same physical        *
*        block.  If the checkpoint record matches, the restart        *
*        will proceed.  If the checkpoint data does not match,        *
*        the receiver (and we) will restart the transmission from     *
*        the beginning.                                               *
*                                                                     *
* ------------------------------------------------------------------- *
SEND0040 DS    0H
         NI    DXDFLAG,255-$DXDNEW   NOT A NEW TRANSMISSION
         MVC   PRTMSGID(MSG08L),MSG08
         MVC   PRTMSGID+(MSG08NDE-MSG08)(L'MSG08NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG08NBR-MSG08)(L'MSG08NBR),DXDDWORD+4
         MVC   PRTMSGID+(MSG08NDT-MSG08)(L'MSG08NDT),SESSNAME
         ICM   R1,15,REQNDECR        CHECKPOINT RECORD NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG08REC-MSG08)(L'MSG08REC),DXDDWORD+3
SEND0050 DS    0H
         BAL   R4,PRT0000            PRINT MESSAGE
         FXCALL FXSDAIR,ALLOCATE,    ALLOCATE THE DATA SET             +
               DATASET,              .. EXISTING DATA SET              +
               ,                     .. DD NAME WILL BE GENERATED      +
               REQWDSNM              .. DATA SET NAME
         OC    DAIRR15,DAIRR15       ALLOCATION SUCCESSFUL?
         BNZ   ERR0020               NO
         L     R14,CONVDCB           DCB'S ADDRESS
         MVC   0(DCBRL,R14),DCBRI    COPY 'READ' DCB
         USING IHADCB,R14            DEFINE BASE
         MVC   DCBDDNAM,DAIRDDN      SET DDNAME
         ST    R14,DCB24             SET DCB ADDRESS
         FX24  $OPENI                OPEN DCB
         L     R2,CONVIOA            I/O AREA ADDRESS
         USING USERREQ,R2            DEFINE BASE
         LA    R0,(USERDATA-USERREQ)+DCBRL+REQBLOKL
         STH   R0,USERLEN            SET LENGTH
         TM    DXDFLAG,$DXDNEW       NEW TRANSMISSION?
         BO    SEND0060              YES
         MVC   USERMOD,RESTART       SET RECORD TYPE 'STRT' (RESTART)
         B     SEND0070
SEND0060 DS    0H
         MVC   USERMOD,FIRST         SET RECORD TYPE '1ST '
SEND0070 DS    0H
         MVC   USERDATA(DCBRL),0(R14) COPY INPUT DCB
         LA    R14,USERDATA+DCBRL    END OF PREFIX AND DCB
         LA    R15,REQBLOKL          REQUEST BLOCK'S SIZE
         LA    R0,MSTRRECD           REQUEST BLOCK'S ADDRESS
         LR    R1,R15                REQUEST BLOCK'S SIZE
         MVCL  R14,R0                COPY REQUEST BLOCK
         MVI   MSTRCMD,$MSTRWRT      SET COMMAND
         BAL   R4,MSTR0000           UPDATE MASTER FILE
         B     SEND0310              SEND 1ST BLOCK
* ------------------------------------------------------------------- *
*                                                                     *
*        We have a request entered at this node, but is to be         *
*        transmitted by another node (the node in the SESSBLOK        *
*        passed to us by FXVTAM).                                     *
*                                                                     *
* ------------------------------------------------------------------- *
SEND0080 DS    0H
         ITRACE ID=STRTXFER          STARTING TRANSFER TO XMIT NODE
         L     R2,CONVIOA            I/O AREA ADDRESS
         LA    R0,(USERDATA-USERREQ)+REQBLOKL
         STH   R0,USERLEN            SET LENGTH
         MVC   USERMOD,XFER          SET RECORD TYPE 'XFER'
         LA    R14,USERDATA          END OF PREFIX
         LA    R15,REQBLOKL          REQUEST BLOCK'S SIZE
         LA    R0,MSTRRECD           REQUEST BLOCK'S ADDRESS
         LR    R1,R15                REQUEST BLOCK'S SIZE
         MVCL  R14,R0                COPY REQUEST BLOCK
         B     SEND0310              SEND 'XFER'
* ------------------------------------------------------------------- *
*                                                                     *
*        A restore has completed (or failed).  It is time to          *
*        notify the sender of the success or failure.                 *
*                                                                     *
* ------------------------------------------------------------------- *
SEND0090 DS    0H
         L     R2,CONVIOA            I/O AREA ADDRESS
         LA    R0,(USERDATA-USERREQ)+REQBLOKL
         STH   R0,USERLEN            SET THE LENGTH
         MVC   USERMOD,RSTR          SET RECORD TYPE
         LA    R14,USERDATA          MASTER RECORD AREA
         LA    R15,REQBLOKL          MASTER RECORD SIZE
         LA    R0,MSTRRECD           MASTER FILE RECORD ADDRESS
         LR    R1,R15                COPY MASTER RECORD SIZE
         MVCL  R14,R0                COPY MASTER RECORD TO I/O AREA
         B     SEND0310              SEND NOTIFICATION TO ORIGINATOR
*---------------------------------------------------------------------*
*        This is a continuation of an established SEND.               *
*                                                                     *
*           If last function was a VTAM SEND and the VTAM ECB         *
*           has been POSTed, start the READ for the next record       *
*           from the stage dataset.                                   *
*                                                                     *
*           If last function was a BDAM READ and the BDAM ECB         *
*           has been posted, start the VTAM SEND.                     *
*                                                                     *
*           At EOD on the stage dataset, we will send a "LAST"        *
*           notification to the secondary end.  When the "LAST"       *
*           has been processed, we can update the master file         *
*           file to indicate that the dataset has been transmitted,   *
*           and search the master file for another request for this   *
*           node.                                                     *
*---------------------------------------------------------------------*
SEND0100 DS    0H
         ITRACE ID=SENDCONT
         CLI   CONVFUNC,$CONVFD      WAS LAST FUNCTION A DE-ALLOCATE?
         BE    SEND0380              YES
         CLI   CONVFUNC,$CONVFR      WAS LAST FUNCTION A RECEIVE?
         BE    SEND0130              YES
         CLI   CONVFUNC,$CONVFS      WAS LAST FUNCTION A SEND?
         BE    SEND0110              YES
         L     R3,CONVDECB           DECB'S ADDRESS
         TM    0(R3),X'40'           HAS BSAM ECB BEEN POSTED?
         BNO   EXIT0010              NO.. EXIT
         ITRACE ID=RDCHECK           CHECKING READ COMPLETION
         ST    R3,DECB24             SET DECB'S ADDRESS
         LA    R1,SEND0280           EOF ADDRESS
         ST    R1,EOF24              SET ADDRESS
         OI    EOF24,X'80'           TURN ON 31-BIT MODE BIT
         FX24  $CHECK                CALL CHECK IN 24-BIT MODULE
         NI    CONVSTAT,255-$CONVPND READ IS NO LONGER PENDING
         L     R14,CONVDCB           DCB'S ADDRESS
         SR    R3,R3                 CLEAR REGISTER
         ICM   R3,3,DCBBLKSI         BLOCK SIZE FROM DCB
         SR    R1,R1                 CLEAR REGISTER
         ICM   R1,7,DCBIOBA+1        IOB ADDRESS
         LA    R1,IOBBSAMN-IOB(R1)   PLUS PREFIX LENGTH
         USING IOBSTDRD,R1           DEFINE IOBSTDRD BASE
         SH    R3,IOBSTDRD+14        MINUS RESIDUAL LENGTH
         ITRACE ID=READLEN,          TRACE RECORD SIZE                 +
               RDATA1=R3
         L     R2,CONVIOA            I/O AREA ADDRESS
         LA    R3,USERIO-USERREQ(R3) PLUS PREFIX LENGTH
         STCM  R3,3,USERLEN          SET RECORD SIZE
         MVC   USERMOD,DATA          SET COMMAND
         B     SEND0310              SEND THE DATA
SEND0110 DS    0H
         TM    CONVSTAT,$CONVPND     STILL PENDING?
         BO    EXIT0010              YES.. EXIT
         MVI   VTAMCMD,$VTAMCHK      SET COMMAND (ISSUE A CHECK)
         BAL   R4,VSUB0000           LINK TO VSUB
         ITRACE ID=SENDDONE          VTAM SEND COMPLETE
         L     R1,CONVRPLX           RPL EXTENSION'S ADDRESS
         USING ISTRPL6X,R1           DEFINE BASE
         OC    RPL6RC,RPL6RC         ALL ZEROS?
         BNZ   ERR0010               NO
         L     R2,CONVIOA            I/O AREA ADDRESS
         CLC   FIRST,USERMOD         '1ST ' RECORD?
         BE    SEND0120              YES
         CLC   RESTART,USERMOD       'STRT' RECORD?
         BE    SEND0120              YES
         CLC   RSTR,USERMOD          RESTORE NOTIFICATION COMPLETE?
         BE    SEND0320              YES
         CLC   XFER,USERMOD          'XFER' SEND COMPLETE?
         BE    SEND0370              YES
         CLC   LAST,USERMOD          LAST SEND COMPLETE?
         BE    SEND0250              YES
         CLC   NULL,USERMOD          NULL SEND COMPLETE?
         BE    SEND0260              YES
         CLC   DATA,USERMOD          DATA SEND COMPLETE?
         BE    SEND0210              YES
         ABEND $U0085,DUMP,,USER
*---------------------------------------------------------------------*
*                                                                     *
*      We have either just sent the first (1ST) or restart (STRT)     *
*      record to the receiver.                                        *
*         1) Issue a CHECK to complete the SEND.                      *
*         2) Issue the RECEIVE to receive the GO/NOGO response from   *
*            the receiver.                                            *
*                                                                     *
*---------------------------------------------------------------------*
SEND0120 DS    0H
         ITRACE ID=RCVSTAT1
         MVI   VTAMCMD,$VTAMCHK      SET COMMAND (CHECK)
         BAL   R4,VSUB0000           LINK TO VSUB TO ISSUE CHECK
         L     R1,CONVRPLX           RPL EXTENSION'S ADDRESS
         OC    RPL6RC,RPL6RC         ALL ZEROS?
         BNZ   ERR0010               NO
         MVI   VTAMCMD,$VTAMRCV      SET COMMAND (ISSUE RECEIVE)
         BAL   R4,VSUB0000           LINK TO VSUB TO ISSUE RECEIVE
         B     EXIT0010              AND EXIT
*---------------------------------------------------------------------*
*                                                                     *
*        We have sent the first (1ST) or restart (STRT) record to     *
*        the receiver and are now waiting to receive the GO/NOGO      *
*        response.                                                    *
*                                                                     *
*---------------------------------------------------------------------*
SEND0130 DS    0H
         TM    CONVSTAT,$CONVPND     STILL PENDING?
         BO    EXIT0010              YES.. EXIT
         ITRACE ID=RCVSTAT2          STATUS HAS BEEN RECEIVED
         MVI   VTAMCMD,$VTAMCHK      SET COMMAND (CHECK)
         BAL   R4,VSUB0000           LINK TO VSUB TO ISSUE CHECK
         L     R1,CONVRPLX           RPL EXTENSION'S ADDRESS
         OC    RPL6RC,RPL6RC         ALL ZEROS?
         BNZ   ERR0010               NO
         MVC   MSTRREC#,CONVREC#     SET RECORD NUMBER
         MVI   MSTRCMD,$MSTRRD       SET COMMAND (READ)
         BAL   R4,MSTR0000           READ MASTER FILE RECORD
         SR    R15,15                CLEAR REGISTER
         ICM   R15,3,REQNDE#         NUMBER OF NODES
         BZ    ERR0030               BAD NEWS
         LA    R3,REQNDENM           FIRST NODE NAME
         USING REQNDENM,R3           DEFINE BASE
SEND0140 DS    0H
         CLC   REQNDENM,SESSNAME     IS THIS THE RIGHT NODE?
         BE    SEND0150              YES
         LA    R3,REQNDEL(R3)        NEXT NODE
         BCT   R15,SEND0140          CHECK NEXT NODE
         B     ERR0030               NODE NOT FOUND
SEND0150 DS    0H
         L     R2,CONVIOA            I/O AREA ADDRESS
         CLI   USERRC,0              PERMISSION TO PROCEED?
         BNE   SEND0160              NO
         CLC   RESTART,USERMOD       WAS THIS A RESTART?
         BE    SEND0190              YES.. ISSUE POINT
         B     SEND0210              ISSUE A READ
SEND0160 DS    0H
         CLC   RESTART,USERMOD       WAS THIS A RESTART?
         BE    SEND0200              YES.. RESTART FROM BEGINNING
*---------------------------------------------------------------------*
*                                                                     *
*   A destination has rejected receiving a data set.                  *
*   We need to:                                                       *
*      We need to update the status for this destination              *
*      If this was the last destination to respond, the over-all      *
*         status should be set to COMPLETE                            *
*      Close and release the stage data set we were going to transmit *
*      Print the message returned by the rejecting node               *
*                                                                     *
*---------------------------------------------------------------------*
         MVC   REQNDEST,USERDATA     SET STATUS
         DROP  R3
         LA    R3,REQNDENM           FIRST NODE
         LH    R15,REQNDE#           NUMBER OF NODES
SEND0170 DS    0H
         CLI   REQNDEST,$REQNDEC     COMPLETE OR IN ERROR?
         BL    SEND0180              NO
         LA    R3,REQNDEL(R3)        NEXT NODE
         BCT   R15,SEND0170          LOOP
         MVI   REQSTAT,$REQDONE      OVER-ALL STATUS IS COMPLETE
SEND0180 DS    0H
         MVI   MSTRCMD,$MSTRWRT      SET COMMAND (WRITE)
         BAL   R4,MSTR0000           UPDATE MASTER FILE RECORD
         MVC   DCB24,CONVDCB         SET DCB'S ADDRESS
         FX24  $CLOSE                CALL CLOSE IN 24-BIT MODULE
         L     R14,CONVDCB           DCB'S ADDRESS
         USING IHADCB,R14            DEFINE BASE
         MVC   DAIRDDN,DCBDDNAM      SET DDNAME
         FXCALL FXSDAIR,RELEASE,,DCBDDNAM
         OC    DAIRR15,DAIRR15       RELEASE SUCCESSFUL?
         BNZ   ERR0040               NO
         MVC   PRTMSGID(MSG02L),MSG02
         MVC   PRTMSGID+(MSG02NDE-MSG02)(L'MSG02NDE),SESSNAME
         ICM   R15,15,REQNBR         REQUEST NUMBER
         CVD   R15,DXDDWORD          CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG02NBR-MSG02)(L'MSG02NBR),DXDDWORD+4
         MVC   PRTMSGID+(MSG02NDT-MSG02)(L'MSG02NDT),SESSNAME
         MVC   PRTMSGID+(MSG02MSG-MSG02)(L'MSG02MSG),USERMSG
         BAL   R4,PRT0000            PRINT MESSAGE
         ITRACE ID=SENDNULL
         MVC   USERMOD,NULL          SET TYPE TO NULL
         MVI   VTAMCMD,$VTAMSND      SET COMMAND (ISSUE A SEND)
         BAL   R4,VSUB0000           LINK TO VSUB
         B     EXIT0010              AND EXIT
*---------------------------------------------------------------------*
*                                                                     *
*    We have a GO response from the receiver.  If this is the start   *
*    of a new transmission, just start reading the stage data set.    *
*    If this is a restart, issue the POINT to reposition within the   *
*    stage data set.                                                  *
*                                                                     *
*---------------------------------------------------------------------*
SEND0190 DS    0H
         ITRACE ID=RESTART
         MVC   DCB24,CONVDCB         SET DCB ADDRESS
         MVC   TTR24,REQNDECT        SET TTR FOR POINT
         FX24  $POINT                ISSUE POINT
         LTR   R15,R15               POINT SUCCESSFUL?
         BNZ   ERR0070               NO
         B     SEND0240              START READING THE DATA SET
*---------------------------------------------------------------------*
*                                                                     *
*    We have a NOGO response to a restart.                            *
*       1) Issue a message.                                           *
*       2) Clear the restart data.                                    *
*       3) Start the read/transmit.                                   *
*                                                                     *
*---------------------------------------------------------------------*
SEND0200 DS    0H
         ITRACE ID=STRTOVER          STARTING ALL-OVER
         MVC   PRTMSGID(MSG09L),MSG09
         MVC   PRTMSGID+(MSG09NDE-MSG09)(L'MSG09NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG09NBR-MSG09)(L'MSG09NBR),DXDDWORD+4
         MVC   PRTMSGID+(MSG09NDT-MSG09)(L'MSG09NDT),SESSNAME
         BAL   R4,PRT0000            PRINT MESSAGE
         XC    REQNDECR,REQNDECR     CLEAR RESTART RECORD NUMBER
         XC    REQNDECT,REQNDECT     CLEAR RESTART TTR
         B     SEND0240              START READING MASTER FILE
SEND0210 DS    0H
         L     R2,CONVIOA            I/O AREA ADDRESS
         CLC   DATA,USERMOD          DATA BLOCK JUST SENT?
         BNE   SEND0240              NO
         ICM   R1,15,CONVCKPT        NUMBER OF BLOCKS SENT
         LA    R1,1(R1)              PLUS 1
         STCM  R1,15,CONVCKPT        SAVE TOTAL
         SR    R0,R0                 CLEAR REGISTER
         D     R0,F100               DIVIDE BY 100
         LTR   R0,R0                 TIME TO CHECKPOINT?
         BNZ   SEND0240              NO
         MVC   DCB24,CONVDCB         SET DCB ADDRESS
         FX24  $NOTE                 ISSUE NOTE
         LTR   R15,R15               NOTE SUCCESSFUL?
         BNZ   ERR0080               NO
         MVC   MSTRREC#,CONVREC#     SET RECORD NUMBER
         MVI   MSTRCMD,$MSTRRD       SET COMMAND (READ)
         BAL   R4,MSTR0000           READ MASTER FILE
         LA    R3,REQNDENM           FIRST NODE NAME
         USING REQNDENM,R3           DEFINE BASE
SEND0220 DS    0H
         CLC   REQNDENM,SESSNAME     RIGHT NODE?
         BE    SEND0230              YES
         LA    R3,REQNDEL(R3)        NEXT NODE
         B     SEND0220              LOOP
SEND0230 DS    0H
         MVC   REQNDECR,CONVCKPT     SAVE RECORD NUMBER
         MVC   REQNDECT,TTR24        SAVE TTR
         MVI   MSTRCMD,$MSTRWRT      SET COMMAND
         BAL   R4,MSTR0000           UPDATE MASTER FILE
         DROP  R3
SEND0240 DS    0H
         ITRACE ID=BSAMREAD
         MVC   DCB24,CONVDCB         DCB ADDRESS
         L     R2,CONVIOA            I/O AREA ADDRESS
         LA    R1,USERIO             PLUS DATA ADDRESS
         ST    R1,IOA24              SET I/O AREA ADDRESS
         LA    R1,SEND0280           EOF ADDRESS
         ST    R1,EOF24              SET ADDRESS
         OI    EOF24,X'80'           SET EOF ADDRESS
         MVC   DECB24,CONVDECB       DECB ADDRESS
         FX24  $READ                 CALL BSAM READ IN 24-BIT MODULE
         MVI   CONVFUNC,$CONVFB      LAST FUNCTION WAS BSAM
         OI    CONVSTAT,$CONVPND     READ IS PENDING
         B     EXIT0010              AND EXIT
* ------------------------------------------------------------------- *
*    The send for the last record of a file has just been sent.       *
*    De-allocate the conversation.                                    *
* ------------------------------------------------------------------- *
SEND0250 DS    0H
         ITRACE ID=LSTSNDDN          LAST SEND DONE
         B     SEND0270
* ------------------------------------------------------------------- *
*    The send for a 'NULL' has completed.                             *
*    De-allocate the conversation.                                    *
* ------------------------------------------------------------------- *
SEND0260 DS    0H
         ITRACE ID=NULLDONE          NULL SEND DONE
SEND0270 DS    0H
         MVI   VTAMCMD,$VTAMDLO      DE-ALLOCATE THE CONVERSATION
         BAL   R4,VSUB0000           LINK TO VSUB
         POST  COMMVECB              SIGNAL FXSVTAM TO SCAN SESSIONS
         B     EXIT0010              EXIT
SEND0280 DS    0H
         ITRACE ID=STAGEEOF          EOF ON STAGING DATASET
         NI    CONVSTAT,255-$CONVPND READ IS NO LONGER PENDING
         MVC   MSTRREC#,CONVREC#     SET RECORD NUMBER
         MVI   MSTRCMD,$MSTRRD       SET COMMAND (READ)
         BAL   R4,MSTR0000           READ MASTER FILE RECORD
         SR    R1,R1
         ICM   R1,3,REQNDE#          NUMBER OF NODES
         BZ    ERR0030               BAD NEWS
         LA    R3,REQNDENM           FIRST NODE NAME
         USING REQNDENM,R3           DEFINE BASE
SEND0290 DS    0H
         CLC   REQNDENM,SESSNAME     WAS SEND TO THIS NODE?
         BE    SEND0300              YES
         LA    R3,REQNDEL(R3)        NEXT NODE
         BCT   R1,SEND0290           LOOP
         B     ERR0030               BAD NEWS
SEND0300 DS    0H
         MVI   REQNDEST,$REQNDEC     TRANSMISSION TO THIS NODE COMPLETE
         MVI   MSTRCMD,$MSTRWRT      SET COMMAND (WRITE)
         BAL   R4,MSTR0000           WRITE MASTER FILE RECORD
         DROP  R3
         MVC   PRTMSGID(MSG03L),MSG03
         MVC   PRTMSGID+(MSG03NDE-MSG03)(L'MSG03NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG03NBR-MSG03)(L'MSG03NBR),DXDDWORD+4
         MVC   PRTMSGID+(MSG03NDT-MSG03)(L'MSG03NDT),SESSNAME
         BAL   R4,PRT0000            PRINT MESSAGE
         ITRACE ID=CLSEINPT          CLOSING INPUT DCB
         MVC   DCB24,CONVDCB         SET DCB'S ADDRESS
         FX24  $CLOSE                CALL CLOSE IN 24-BIT MODULE
         L     R14,CONVDCB           DCB'S ADDRESS
         USING IHADCB,R14            DEFINE BASE
         FXCALL FXSDAIR,RELEASE,,DCBDDNAM
         OC    DAIRR15,DAIRR15       RELEASE SUCCESSFUL?
         BNZ   ERR0040               NO
         L     R2,CONVIOA            I/O AREA ADDRESS
         LA    R1,USERDATA-USERREQ   LENGTH
         STH   R1,USERLEN            SET LENGTH TO
         MVC   USERMOD,LAST          SET RECORD TYPE
* ------------------------------------------------------------------- *
*                                                                     *
*    The reason for immediately issuing a receive when the "FIRST"    *
*    block has just been sent is that the send does not cause the     *
*    sender to be placed into receive state, VTAM expects us to issue *
*    a command that causes us to go into receive state.  The send     *
*    followed by the receive is valid, VTAM flushes the buffer,       *
*    and posts the ECB when the receive completes.                    *
*                                                                     *
* ------------------------------------------------------------------- *
SEND0310 DS    0H
         ITRACE ID=SEND,             SENDING DATA                      +
               DATA1=SESSNAME        .. LU NAME
         MVI   VTAMCMD,$VTAMSND      SET COMMAND
         BAL   R4,VSUB0000           LINK TO VSUB TO ISSUE SEND
         B     EXIT0010              AND EXIT
SEND0320 DS    0H
         NI    CONVSTAT,255-$CONVPND SEND IS NO LONGER PENDING
         MVC   MSTRREC#,CONVREC#     SET RECORD NUMBER
         MVI   MSTRCMD,$MSTRRD       SET COMMAND (READ)
         BAL   R4,MSTR0000           READ MASTER FILE RECORD
         CLC   REQTNODE,SESSNAME     REPLY SENT TO TRANSMITTING NODE?
         BNE   SEND0350              NO
         SR    R1,R1
         ICM   R1,3,REQNDE#          NUMBER OF NODES
         BZ    ERR0030               BAD NEWS
         LA    R3,REQNDENM           FIRST NODE NAME
         USING REQNDENM,R3           DEFINE BASE
SEND0330 DS    0H
         CLC   REQNDENM,COMMAPLN     WAS SEND TO THIS NODE?
         BE    SEND0340              YES
         LA    R3,REQNDEL(R3)        NEXT NODE
         BCT   R1,SEND0330           LOOP
         B     ERR0030               BAD NEWS
SEND0340 DS    0H
         MVI   REQNDEST,$REQNDEN     SENDER HAS BEEN NOTIFIED
         B     SEND0360
         DROP  R3
SEND0350 DS    0H
         CLC   REQENODE,SESSNAME     REPLY SENT TO ENTRY NODE?
         BNE   ERR0060               WE'RE LOST
         MVI   REQENST,X'FF'         REPLY HAS BEEN SENT
SEND0360 DS    0H
         MVI   MSTRCMD,$MSTRWRT      SET COMMAND (WRITE)
         BAL   R4,MSTR0000           WRITE MASTER FILE RECORD
         MVC   PRTMSGID(MSG04L),MSG04
         MVC   PRTMSGID+(MSG04NDE-MSG04)(L'MSG04NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG04NBR-MSG04)(L'MSG04NBR),DXDDWORD+4
         MVC   PRTMSGID+(MSG04NDT-MSG04)(L'MSG04NDT),SESSNAME
         BAL   R4,PRT0000            PRINT MESSAGE
         MVI   VTAMCMD,$VTAMDLO      DE-ALLOCATE THE CONVERSATION
         BAL   R4,VSUB0000           LINK TO VSUB
         POST  COMMVECB              SIGNAL FXSVTAM TO SCAN SESSIONS
         B     EXIT0010              EXIT
SEND0370 DS    0H
         NI    CONVSTAT,255-$CONVPND SEND IS NO LONGER PENDING
         MVC   MSTRREC#,CONVREC#     SET RECORD NUMBER
         MVI   MSTRCMD,$MSTRRD       SET COMMAND (READ)
         BAL   R4,MSTR0000           READ MASTER FILE RECORD
         MVI   REQSTAT,$REQXFRD      TRANSFERRED TO TRANSMITTER
         MVI   MSTRCMD,$MSTRWRT      SET COMMAND (WRITE)
         BAL   R4,MSTR0000           WRITE MASTER FILE RECORD
         MVC   PRTMSGID(MSG05L),MSG05
         MVC   PRTMSGID+(MSG05NDE-MSG05)(L'MSG05NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG05NBR-MSG05)(L'MSG05NBR),DXDDWORD+4
         MVC   PRTMSGID+(MSG05NDT-MSG05)(L'MSG05NDT),SESSNAME
         BAL   R4,PRT0000            PRINT MESSAGE
         MVI   VTAMCMD,$VTAMDLO      DE-ALLOCATE THE CONVERSATION
         BAL   R4,VSUB0000           LINK TO VSUB
         POST  COMMVECB              SIGNAL FXSVTAM TO SCAN SESSIONS
         B     EXIT0010              EXIT
SEND0380 DS    0H
         TM    CONVSTAT,$CONVPND     STILL PENDING?
         BO    EXIT0010              YES.. EXIT
         ITRACE ID=DALODONE,         DE-ALLOCATE DONE                  +
               RDATA1=R7,            .. SESSION BLOCK ADDRESS          +
               RDATA2=R6             .. CONVERSATION BLOCK'S ADDRESS
         MVI   VTAMCMD,$VTAMCHK      SET COMMAND (ISSUE A CHECK)
         BAL   R4,VSUB0000           LINK TO VSUB
         L     R1,CONVRPLX           RPL EXTENSION'S ADDRESS
         OC    RPL6RC,RPL6RC         DE-ALLOCATE SUCCESSFUL?
         BNZ   ERR0050               NO
         MVC   PRTMSGID(MSG06L),MSG06   INITIALIZE MESSAGE
         MVC   PRTMSGID+(MSG06NDE-MSG06)(L'MSG06NDE),SESSNAME
         UNPK  PRTMSGID+(MSG06CID-MSG06)(9),CONVCID(5)
         MVZ   PRTMSGID+(MSG06CID-MSG06)(8),HEX0000
         TR    PRTMSGID+(MSG06CID-MSG06)(8),HEXCHAR
         MVI   PRTMSGID+(MSG06CID-MSG06)+8,C' '
         MVC   VTAMCONV,CONVNEXT     SET 'NEXT' ADDRESS FOR FXSVTAM
         FXCALL FXSCONV,DELETE,      DELETE THE CONVERSATION BLOCK     +
               (R6),                 .. CONVBLOK'S ADDRESS             +
               (R7)                  .. ASSOCIATED SESSBLOK'S ADDRESS
         BAL   R4,PRT0000            QUEUE MESSAGE TO PRINT TASK
         B     EXIT0020              AND EXIT (VTAMCONV ALREADY SET)
*---------------------------------------------------------------------*
*        ERROR SITUATIONS                                             *
*---------------------------------------------------------------------*
ERR0010  DS    0H
         USING ISTRPL6X,R1           DEFINE BASE
         ITRACE ID=VTAMERR,          VTAM ERROR OF SOME SORT           +
               DATA1=RPL6RC          .. ERROR CODES
         ABEND $U0057,DUMP,,USER
ERR0020  DS    0H
         ITRACE ID=ALOCFAIL,         WORK FILE ALLOCATION FAILED       +
               DATA1=REQREC#,        .. MASTER FILE RECORD NUMBER      +
               DATA2=DAIRR15         .. DAIR REGISTER 15
         MVC   PRTMSGID(MSG07L),MSG07 SET MESSAGE
         MVC   PRTMSGID+(MSG07NDE-MSG07)(L'MSG07NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG07NBR-MSG07)(L'MSG07NBR),DXDDWORD+4
         UNPK  PRTMSGID+(MSG07R15-MSG07)(L'MSG07R15+1),DAIRR15(3)
         MVZ   PRTMSGID+(MSG07R15-MSG07)(L'MSG07R15),HEX0000
         TR    PRTMSGID+(MSG07R15-MSG07)(L'MSG07R15),HEXCHAR
         MVI   PRTMSGID+(MSG07R15-MSG07)+L'MSG07R15,C' '
         UNPK  PRTMSGID+(MSG07ERR-MSG07)(L'MSG07ERR+1),DAIRERR(3)
         MVZ   PRTMSGID+(MSG07ERR-MSG07)(L'MSG07ERR),HEX0000
         TR    PRTMSGID+(MSG07ERR-MSG07)(L'MSG07ERR),HEXCHAR
         MVI   PRTMSGID+(MSG07ERR-MSG07)+L'MSG07ERR,C' '
         UNPK  PRTMSGID+(MSG07INF-MSG07)(L'MSG07INF+1),DAIRINFO(3)
         MVZ   PRTMSGID+(MSG07INF-MSG07)(L'MSG07INF),HEX0000
         TR    PRTMSGID+(MSG07INF-MSG07)(L'MSG07INF),HEXCHAR
         MVI   PRTMSGID+(MSG07INF-MSG07)+L'MSG07INF,C' '
         BAL   R4,PRT0000            PRINT MESSAGE
         ABEND $U0105,DUMP,,USER
ERR0030  DS    0H
         ITRACE ID=BADNODE,          NODE NAME NOT FOUND               +
               RDATA1=R7,            .. SESSION BLOCK ADDRESS          +
               DATA2=MSTRREC#        .. MASTER FILE RECORD NUMBER
         ABEND $U0084,DUMP,,USER
ERR0040  DS    0H
         ITRACE ID=DAIRRELF,         DAIR RELEASE FAILED               +
               RDATA1=R7,            .. SESSION BLOCK ADDRESS          +
               DATA2=MSTRREC#        .. MASTER FILE RECORD NUMBER
         ABEND 2002,DUMP,,USER
ERR0050  DS    0H
         ITRACE ID=DALOFAIL,         SESSION DEALLOCATION FAILED       +
               RDATA1=R7,            .. SESSION BLOCK ADDRESS          +
               DATA2=RPL6RC          .. RETURN CODES
         ABEND $U0063,DUMP,,USER
ERR0060  DS    0H
         ITRACE ID=BADNOTFY,         BAD RESTORE NOTIFICATION RECEIVED +
               RDATA1=R7,            .. SESSION BLOCK ADDRESS          +
               DATA2=SESSNAME        .. NODE THAT SEND THE NOTIFY
         ABEND $U0090,DUMP,,USER
ERR0070  DS    0H
         ITRACE ID=PNTFAIL,          POINT FAILED ON A RESTART         +
               RDATA1=R15,           .. POINT RETURN CODE              +
               RDATA2=R7             .. SESSBLOK
         ABEND $U0110,DUMP,,USER
ERR0080  DS    0H
         ITRACE ID=NOTEFAIL,         NOTE FAILED DURING A CHECKPOINT   +
               RDATA1=R15,           .. POINT RETURN CODE              +
               RDATA2=R7             .. SESSBLOK
         ABEND $U0111,DUMP,,USER
* ------------------------------------------------------------------- *
*                                                                     *
*        Link to VSUB                                                 *
*                                                                     *
* ------------------------------------------------------------------- *
VSUB0000 DS    0H
         ITRACE ID=VSUB,             LINKING TO VSUB                   +
               DATA1=VTAMCMD         .. COMMAND
         LR    R1,R8                 PARM BLOCK'S ADDRESS
         L     R15,AVSUB             VSUB ENTRY POINT
         BALR  R14,R15               LINK TO VSUB
         BR    R4                    RETURN
* ------------------------------------------------------------------- *
*                                                                     *
*        Read or write master file records                            *
*                                                                     *
* ------------------------------------------------------------------- *
MSTR0000 DS    0H
         ITRACE ID=MSTRIO
         FXCALL FXSMSTR              LINK TO MASTER FILE I/O
         LA    R5,MSTRRECD           SET DATA ADDRESS
         BR    R4                    RETURN
* ------------------------------------------------------------------- *
*                                                                     *
*        PRINT                                                        *
*                                                                     *
* ------------------------------------------------------------------- *
PRT0000  DS    0H
         ITRACE ID=PRINT
         FXCALL PRTQ,PRINT           ADD REQUEST TO PRINT QUEUE
         BR    R4                    DONE
* ------------------------------------------------------------------- *
*                                                                     *
*        EXIT                                                         *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ICM   R1,15,DXD24           24-BIT PARM AREA ADDRESS
         BZ    EXIT0010              NO ADDRESS
         FREEMAIN RU,A=(1),LV=FX24L FREEMAIN 24-BIT PARM AREA
         B     EXIT0020              AND EXIT
EXIT0010 DS    0H
         MVC   VTAMCONV,CONVNEXT     SET 'NEXT' ADDRESS FOR FXSVTAM
EXIT0020 DS    0H
         ITRACE ID=EXIT
         L     R13,4(R13)            CALLER'S SAVE AREA ADDRESS
         LM    R14,R12,12(R13)       RESTORE CALLER'S REGISTERS
         SR    R15,R15               ALWAYS A GOOD RETURN CODE
         BR    R14                   RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSTART DC    Q(DXDSSEND)           DISPLACEMENT TO WORK AREA
F100     DC    F'100'
X80      DC    X'80000000'
H8       DC    H'8'
HEX0000  DC    8X'00'
HEXCHAR  DC    C'0123456789ABCDEF'
FIRST    DC    CL4'1ST '
XFER     DC    CL4'XFER'
DATA     DC    CL4'DATA'
LAST     DC    CL4'LAST'
NULL     DC    CL4'NULL'
RSTR     DC    CL4'RSTR'
RESTART  DC    CL4'STRT'
MSG01    DS    0C
         DC    CL11'FXSSEND01I'
         DC    C'TRANSMISSION OF REQUEST '
MSG01NDE DC    CL08' '
MSG01NBR DC    XL08'4021202020202020'
         DC    C' TO NODE '
MSG01NDT DC    CL8' '
         DC    C' STARTED'
MSG01L   EQU   *-MSG01
MSG02    DC    CL11'FXSSEND02E'
         DC    C'REQUEST '
MSG02NDE DC    CL08' '
MSG02NBR DC    XL08'4021202020202020'
         DC    C' REJECTED BY NODE '
MSG02NDT DC    CL08' '
         DC    C' '
MSG02MSG DC    CL65' '
MSG02L   EQU   *-MSG02
MSG03    DS    0C
         DC    CL11'FXSSEND03I'
         DC    C'TRANSMISSION OF REQUEST '
MSG03NDE DC    CL08' '
MSG03NBR DC    XL08'4021202020202020'
         DC    C' TO NODE '
MSG03NDT DC    CL8' '
         DC    C' COMPLETE'
MSG03L   EQU   *-MSG03
MSG04    DC    CL11'FXSSEND04I'
         DC    C'RESTORE NOTIFICATION SENT FOR REQUEST '
MSG04NDE DC    CL08' '
MSG04NBR DC    XL08'4021202020202020'
         DC    C' TO NODE '
MSG04NDT DC    CL08' '
         DC    C' REQUEST COMPLETE'
MSG04L   EQU   *-MSG04
MSG05    DC    CL11'FXSSEND05I'
         DC    C'REQUEST '
MSG05NDE DC    CL08' '
MSG05NBR DC    XL08'4021202020202020'
         DC    C' TRANSFERRED TO NODE '
MSG05NDT DC    CL08' '
MSG05L   EQU   *-MSG05
MSG06    DC    CL11'FXSSEND06I'
         DC    C'CONVERSATION WITH NODE '
MSG06NDE DC    CL08' '
         DC    C' DEALLOCATED, CID='
MSG06CID DC    CL08' '
         DC    C' '
MSG06L   EQU   *-MSG06
MSG07    DS    0C
         DC    CL11'FXSSEND07E'
         DC    C'WORK FILE ALLOCATION FAILED '
MSG07NDE DC    CL08' '
MSG07NBR DC    XL08'4021202020202020'
         DC    C' R15='
MSG07R15 DC    CL4' '
         DC    C' ERROR='
MSG07ERR DC    CL4' '
         DC    C' INFO='
MSG07INF DC    CL4' '
         DC    C' '
MSG07L   EQU   *-MSG07
MSG08    DS    0C
         DC    CL11'FXSSEND08I'
         DC    C'TRANSMISSION OF REQUEST '
MSG08NDE DC    CL08' '
MSG08NBR DC    XL08'4021202020202020'
         DC    C' TO NODE '
MSG08NDT DC    CL8' '
         DC    C' RESTARTED FROM RECORD '
MSG08REC DC    XL10'40202020202020202120'
MSG08L   EQU   *-MSG08
MSG09    DS    0C
         DC    CL11'FXSSEND09I'
         DC    C'RESTART OF REQUEST '
MSG09NDE DC    CL08' '
MSG09NBR DC    XL08'4021202020202020'
         DC    C' TO NODE '
MSG09NDT DC    CL8' '
         DC    C' FAILED, WILL RE-SEND FROM BEGINNING'
MSG09L   EQU   *-MSG09
DCBRI    DCB   DSORG=PS,                                               +
               DDNAME=DDNAME,                                          +
               EODAD=*,                                                +
               MACRF=RP
DCBRL    EQU   *-DCBRI
* ------------------------------------------------------------------- *
*              WORK AREA                                              *
* ------------------------------------------------------------------- *
DXDSSEND DSECT
DXDID    DS   CL8                    WORK AREA OWNER EYECATCHER
DXDSAVE  DS   18F                    REGISTER SAVE AREA
DXDDWORD DS   D                      CVD/CVB WORK AREA
DXD24    DS   A                      24-BIT PARM AREA
DXDFLAG  DS   X FLAGS
$DXDNEW  EQU  X'80'                  .. NEW TRANSMISSION
         PRTBLOK  DSECT=NO
         MSTRREQ  DSECT=NO
         DAIRREQ  DSECT=NO
         CONVREQ  DSECT=NO
* ------------------------------------------------------------------- *
*              VTAM INTER-COMMUNICATION                               *
* ------------------------------------------------------------------- *
         VTAMBLOK DSECT=YES
* ------------------------------------------------------------------- *
*              COMMON DATA MAP                                        *
* ------------------------------------------------------------------- *
         FXSCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*              24-BIT MODULE                                          *
* ------------------------------------------------------------------- *
         FX24PRM DSECT=YES
* ------------------------------------------------------------------- *
*              VTAM SESSION BLOCK                                     *
* ------------------------------------------------------------------- *
         SESSBLOK DSECT=YES
* ------------------------------------------------------------------- *
*              VTAM CONVERSATION BLOCK                                *
* ------------------------------------------------------------------- *
         CONVBLOK DSECT=YES
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         USERREQ  DSECT=YES
* ------------------------------------------------------------------- *
*              MASTER FILE RECORD                                     *
* ------------------------------------------------------------------- *
         REQBLOK  DSECT=YES
* ------------------------------------------------------------------- *
*              RPL AND RPL EXTENSION DSECTS                           *
* ------------------------------------------------------------------- *
         IFGRPL AM=VTAM
* ------------------------------------------------------------------- *
*              DCB                                                    *
* ------------------------------------------------------------------- *
         DCBD   DSORG=PS
* ------------------------------------------------------------------- *
*              IOB                                                    *
* ------------------------------------------------------------------- *
         IEZIOB
* ------------------------------------------------------------------- *
*                                                                     *
*              EQUATES                                                *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY REGEQU
         ABCODES
         END  FXSSEND
./ ADD NAME=FXSSESS  0100-99056-99056-1500-00213-00213-00000-FX-REL1

         TITLE 'SESS  ADD AND DELETE SESSION BLOCKS'
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXSSESS                                               *
*                                                                     *
*  Add and delete SESSBLOKs.  A SESSBLOK is used to represent and     *
*  control communication with other nodes.  Other FX nodes are        *
*  defined by FXNODE statements at parameter initialization time.     *
*  User nodes are defined dynamically as users log on and off.        *
*  This module is a subroutine, it does not follow "normal" FX        *
*  linkage, it must not use a "DXD" type work area because it may     *
*  be executed concurrently by multiple tasks.  This module does      *
*  not establish its own save area, no macros can be issued that      *
*  may require a save area.                                           *
*                                                                     *
* ------------------------------------------------------------------- *
FXSSESS  CSECT
FXSSESS  AMODE 31
FXSSESS  RMODE ANY
         STM   R14,R12,12(R13)       SAVE REGISTERS
         LR    R12,R15               LOAD BASE
         USING FXSSESS,R12           DEFINE BASE
         USING FXSCOMM,R11           DEFINE BASE
         B     SESS0000              SKIP EYECATCHER
         DC    CL8'FXSSESS'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
         DC    C'ADD/DELETE SESSION BLOCKS'
SESS0000 DS    0H
         LR    R10,R1                COPY PARM BLOCK ADDRESS
         USING SESSREQ,R10           DEFINE BASE
         OC    COMMACB,COMMACB       ACB ALLOCATED?
         BNZ   SESS0010              YES
         GETMAIN RU,                 GET STORAGE FOR THE ACB           +
               LV=ACBL,              .. SIZE                           +
               LOC=BELOW             .. FROM BELOW THE LINE
         ST    R1,COMMACB            SAVE ACB'S ADDRESS
         LR    R2,R1                 SAVE ACB'S ADDRESS
         MVC   0(ACBL,R2),ACBI       INITIALIZE ACB
         USING IFGACB,R2             DEFINE BASE
         GETMAIN RU,                 GET STORAGE FOR THE EXIT LIST     +
               LV=EXLSTL,            .. SIZE                           +
               LOC=BELOW             .. FROM BELOW THE LINE
         MVC   0(EXLSTL,R1),EXLSTI   INITIALIZE EXIT LIST
         ST    R11,ACBUSER           SET USER FIELD TO COMM AREA ADDR
         LA    R0,COMMAPLL           APPLID LENGTH/APPLID ADDRESS
         ST    R0,ACBAPID            SET APPLID LENGTH/NAME IN ACB
         ST    R1,COMMXLST           SAVE EXIT LIST ADDRESS
         ST    R1,ACBEXLST           SET EXIT LIST IN ACB
         USING IFGEXLST,R1           DEFINE BASE
         MVC   EXLATTNP,AATTN        SET ATTN EXIT ADDRESS
         MVC   EXLLERP,ALERAD        SET LERAD EXIT ADDRESS
SESS0010 DS    0H
         TM    COMMEOJ,$EOJ3         SHUTDOWN PHASE 3?
         BO    SESS0100              YES.. DELETE THE SESSBLOKS
         CLI   SESSCMD,$SESSDEL      DELETE A SESSION?
         BE    SESS0100              YES
*---------------------------------------------------------------------*
*                                                                     *
*        Initialize a new SESSBLOK                                    *
*                                                                     *
*---------------------------------------------------------------------*
         LA    R2,COMMSESS           CHAIN POINT
         ICM   R7,15,COMMSESS        FIRST SESSION BLOCK
         USING SESSBLOK,R7           DEFINE BASE
         BZ    SESS0030              NO SESSION BLOCKS
SESS0020 DS    0H
         CLC   SESSNAME,SESSNODE     DUPLICATED NODE?
         BE    SESS0040              YES.. DON'T ALLOW
         LA    R2,SESSNEXT           CHAIN POINT
         ICM   R7,15,SESSNEXT        NEXT SESSION BLOCK
         BNZ   SESS0020              LOOP
SESS0030 DS    0H
         GETMAIN RU,LV=SESSL         ACQUIRE STORAGE
         ST    R1,0(R2)              ADD NEW BLOCK TO CHAIN
         ST    R1,SESSADDR           PASS ADDRESS BACK TO CALLER
         LR    R7,R1                 COPY STORAGE ADDRESS
         XC    0(SESSL,R7),0(R7)     CLEAR STORAGE
         MVC   SESSEYE,SESSID        IDENTIFY THE BLOCK
         MVC   SESSNAME,SESSNODE     SET NODE NAME
         GETMAIN RU,                 ACQUIRE STORAGE FOR RPL           +
               LV=RPLL+4,            .. SIZE                           +
               LOC=BELOW             .. FROM BELOW THE LINE
         ST    R1,SESSRPL            SET RPL'S ADDRESS
         MVC   0(RPLL,R1),RPLI       INITIALIZE RPL
         LR    R3,R1                 COPY RPL ADDRESS
         USING IFGRPL,R3             DEFINE BASE
         MVC   RPLDACB,COMMACB       SET ACB ADDRESS IN RPL
         ST    R7,RPLL(R1)           SET POINTER BACK TO SESSBLOK
         GETMAIN RU,                 ACQUIRE STORAGE FOR RPL EXTENSION +
               LV=RPLEXTL,           .. SIZE                           +
               LOC=BELOW             .. FROM BELOW THE LINE
         ST    R1,SESSRPLX           SET RPL EXTENSION'S ADDRESS
         MVC   0(RPLEXTL,R1),RPLEXTI INITIALIZE RPL EXTENSION
         ST    R1,RPLAAREA           SET RPL EXTENSION ADDRESS
         USING ISTRPL6X,R1           DEFINE BASE
         GETMAIN RU,                 ACQUIRE STORAGE FOR NIB           +
               LV=NIBL,              .. SIZE                           +
               LOC=BELOW             .. FROM BELOW THE LINE
         ST    R1,SESSNIB            SET NIB'S ADDRESS
         MVC   0(NIBL,R1),NIBI       INITIALIZE NIB
         SR    R15,R15               SET RETURN CODE
         B     EXIT0000              AND EXIT
SESS0040 DS    0H
         LA    R15,8                 SET RETURN CODE
         B     EXIT0000              EXIT
*---------------------------------------------------------------------*
*                                                                     *
*        Delete a SESSBLOK                                            *
*                                                                     *
*---------------------------------------------------------------------*
SESS0100 DS    0H
         LA    R2,COMMSESS           CHAIN POINT
         ICM   R7,15,COMMSESS        FIRST SESSION BLOCK ADDRESS
         BZ    SESS0120              BLOCK WAS NOT FOUND
SESS0110 DS    0H
         TM    COMMEOJ,$EOJ3         SHUTDOWN PHASE 3?
         BO    SESS0130              YES.. DELETE ALL BLOCKS
         CLC   SESSNAME,SESSNODE     SESSION BLOCK LOCATED?
         BE    SESS0130              YES
         LA    R2,SESSNEXT           CHAIN POINT
         ICM   R7,15,SESSNEXT        NEXT BLOCK
         BNZ   SESS0110              LOOP
SESS0120 DS    0H
         TM    COMMEOJ,$EOJ3         SHUTDOWN PHASE 3?
         BO    SESS0140              YES
         LA    R15,8                 SET RETURN CODE
         B     EXIT0000              AND EXIT
SESS0130 DS    0H
         MVC   0(4,R2),SESSNEXT      CHAIN AROUND THIS BLOCK
         L     R1,SESSNIB            NIB'S ADDRESS
         FREEMAIN RU,A=(1),LV=NIBL   FREEMAIN NIB
         L     R1,SESSRPLX           RPL EXTENSION'S ADDRESS
         FREEMAIN RU,A=(1),LV=RPLEXTL
         L     R1,SESSRPL            RPL'S ADDRESS
         FREEMAIN RU,A=(1),LV=RPLL+4 FREEMAIN RPL
         FREEMAIN RU,A=(7),LV=SESSL  FREEMAIN SESSION BLOCK
         TM    COMMEOJ,$EOJ3         SHUTDOWN PHASE 3?
         BO    SESS0100              YES
SESS0140 DS    0H
         SR    R15,R15               SET RETURN CODE
EXIT0000 DS    0H
         TM    COMMEOJ,$EOJ3         SHUTDOWN PHASE 3?
         BNO   EXIT0010              NO
         ICM   R1,15,COMMACB         ACB'S ADDRESS
         BZ    EXIT0010              ACB NOT ACQUIRED
         FREEMAIN RU,A=(1),LV=ACBL   FREEMAIN ACB
         L     R1,COMMXLST           EXIT LIST'S ADDRESS
         FREEMAIN RU,A=(1),LV=EXLSTL FREEMAIN EXIT LIST
EXIT0010 DS    0H
         L     R14,12(R13)           RESTORE R14
         LM    R0,R12,20(R13)        RESTORE REMAINING REGISTERS
         BR    R14                   RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
SESSID   DC    C'SESSBLOK'
ACBI     ACB   AM=VTAM,                                                +
               MACRF=LOGON,                                            +
               EXLST=*,                                                +
               APPLID=*
ACBL     EQU   *-ACBI
EXLSTI   EXLST AM=VTAM,                                                +
               ATTN=*,                                                 +
               LERAD=*
EXLSTL   EQU   *-EXLSTI
RPLI     RPL   AM=VTAM,                                                +
               AAREA=RPLEXTI
RPLL     EQU   *-RPLI
RPLEXTI  ISTRPL6
RPLEXTL  EQU   *-RPLEXTI
NIBI     NIB   MODE=RECORD,                                            +
               NAME=FX
NIBL     EQU   *-NIBI
* ------------------------------------------------------------------- *
*              COMMON DATA MAP                                        *
* ------------------------------------------------------------------- *
         FXSCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*              SESSION BLOCK ADD/DELETE REQUEST BLOCK                 *
* ------------------------------------------------------------------- *
         SESSREQ
* ------------------------------------------------------------------- *
*              VTAM SESSION BLOCK                                     *
* ------------------------------------------------------------------- *
         SESSBLOK DSECT=YES
* ------------------------------------------------------------------- *
*              ACB DSECT                                              *
* ------------------------------------------------------------------- *
         IFGACB   AM=VTAM
* ------------------------------------------------------------------- *
*              EXIT LIST DSECT                                        *
* ------------------------------------------------------------------- *
         IFGEXLST AM=VTAM
* ------------------------------------------------------------------- *
*              RPL AND RPL EXTENSION DSECTS                           *
* ------------------------------------------------------------------- *
         IFGRPL   AM=VTAM
* ------------------------------------------------------------------- *
*              NIB DSECT                                              *
* ------------------------------------------------------------------- *
         ISTDNIB
* ------------------------------------------------------------------- *
*                                                                     *
*              EQUATES                                                *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY REGEQU
         END  FXSSESS
./ ADD NAME=FXSSHUT  0100-99056-99056-1500-00122-00122-00000-FX-REL1

         TITLE 'FXSSHUT  SHUTDOWN FX STARTED TASK'
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXSSHUT                                               *
*                                                                     *
*  Shutdown FX started task                                           *
*                                                                     *
* ------------------------------------------------------------------- *
SSHUT    FXPRFX 'SHUTDOWN FX STARTED TASK'
FXSSHUT  AMODE 31
FXSSHUT  RMODE ANY
         USING SESSBLOK,R7           ADDRESS PASSED BY FXSVTAM
         USING CONVBLOK,R6           ADDRESS PASSED BY FXSVTAM
         CLC   DXDID,MODID           WORK AREA INITIALIZED?
         BE    SHUT0010              YES
         ITRACE ID=INIT
         MVC   DXDID,MODID           WORK AREA INITIALIZED
         MVI   PRTCC,C' '            INITIALIZE CARRIAGE CONTROL
         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC
SHUT0010 DS    0H
         L     R2,CONVIOA            I/O AREA ADDRESS
         USING USERREQ,R2            DEFINE BASE
         MVC   USERMSG,COMMBLKS      CLEAR MESSAGE
         CLI   SESSUATH,2            OPERATOR?
         BE    SHUT0020              YES
         CLI   SESSUATH,4            MASTER ID?
         BNE   SHUT0040              NOT AUTHORIZED TO ISSUE SHUTDOWN
SHUT0020 DS    0H
         CLI   COMMEOJ,0             EOJ ALREADY UNDER WAY?
         BNE   SHUT0030              YES
         ITRACE ID=SHUTDOWN,         STARTING SHUTDOWN                 +
               DATA1=SESSUSER        .. REQUESTING USER
         OI    COMMEOJ,$EOJ1         START SHUTDOWN PHASE 1
         MVC   PRTMSGID(MSG01L),MSG01
         MVC   PRTMSGID+(MSG01USR-MSG01)(L'MSG01USR),SESSUSER
         MVC   USERMSG(MSG01L),PRTMSGID
         BAL   R9,PRT0000            PRINT SHUTDOWN MESSAGE
         B     EXIT0000              ALL DONE
SHUT0030 DS    0H
         ITRACE ID=DUPSHUT,          SHUTDOWN ALREADY IN PROGRESS      +
               DATA1=SESSUSER        .. REQUESTING USER
         MVC   USERMSG(MSG02L),MSG02 SHUTDOWN ALREADY STARTED
         B     EXIT0000              EXIT
SHUT0040 DS    0H
         ITRACE ID=NOTAUTH,          USER NOT AUTHORIZED               +
               DATA1=SESSUSER        .. REQUESTING USER
         MVC   PRTMSGID(MSG03L),MSG03
         MVC   PRTMSGID+(MSG03USR-MSG03)(L'MSG03USR),SESSUSER
         BAL   R9,PRT0000            PRINT MESSAGE
         MVC   USERMSG(MSG04L),MSG04 SET USER'S MESSAGE
         B     EXIT0000              EXIT
PRT0000  DS    0H
         FXCALL PRTQ,PRINT           ADD REQUEST TO PRINT QUEUE
         BR    R9                    RETURN
EXIT0000 DS    0H
         ITRACE ID=EXIT              EXITING PRINT MODULE
         LA    R0,(USERDATA-USERREQ) TOTAL LENGTH
         STH   R0,USERLEN            SET LENGTH
         L     R13,4(R13)            RESTORE REGISTER 13
         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS
         SR    R15,R15               GIVE GOOD RETURN CODE
         BR    R14                   RETURN TO CALLER
* ------------------------------------------------------------------ *
*                                                                    *
*        CONSTANTS                                                   *
*                                                                    *
* ------------------------------------------------------------------ *
DXDSTART DC    Q(DXDSSHUT)           DISPLACEMENT TO WORK AREA
MSG01    DS    0C
         DC    CL11'FXSSHUT01I'
         DC    C'SHUTDOWN STARTED, REQUESTED BY '
MSG01USR DC    CL8' '
MSG01L   EQU   *-MSG01
MSG02    DS    0C
         DC    CL11'FXSSHUT02E'
         DC    C'SHUTDOWN ALREADY IN PROGRESS'
MSG02L   EQU   *-MSG02
MSG03    DS    0C
         DC    CL11'FXSSHUT03E'
         DC    C'SHUTDOWN REQUEST FROM USER '
MSG03USR DC    CL8' '
         DC    C' REJECTED, INSUFFICIENT AUTHORITY'
MSG03L   EQU   *-MSG03
MSG04    DS    0C
         DC    CL11'FXSSHUT04E'
         DC    C'YOU ARE NOT AUTHORIZED TO SHUTDOWN FX'
MSG04L   EQU   *-MSG04
* ------------------------------------------------------------------ *
*                                                                    *
*        WORK AREAS                                                  *
*                                                                    *
* ------------------------------------------------------------------ *
DXDSSHUT DSECT
DXDID    DS    CL8                   WORK AREA OWNER ID
DXDSAVE  DS    18F                   REGISTER SAVE AREA
         PRTBLOK  DSECT=NO
         LTORG
* ------------------------------------------------------------------ *
*              SESSION BLOCK                                         *
* ------------------------------------------------------------------ *
         SESSBLOK DSECT=YES
* ------------------------------------------------------------------ *
*              CONVERSATION BLOCK                                    *
* ------------------------------------------------------------------ *
         CONVBLOK DSECT=YES
* ------------------------------------------------------------------ *
*              USER REQUEST/RESPONSE BLOCK                           *
* ------------------------------------------------------------------ *
         USERREQ
* ------------------------------------------------------------------ *
*              COMMON DATA MAP                                       *
* ------------------------------------------------------------------ *
         FXSCOMM  TYPE=DSECT
* ------------------------------------------------------------------ *
*                                                                    *
*              EQUATES                                               *
*                                                                    *
* ------------------------------------------------------------------ *
         COPY REGEQU
         END  FXSSHUT
./ ADD NAME=FXSSNAP  0100-99056-99056-1500-00793-00793-00000-FX-REL1

         TITLE 'FXSSNAP  SNAP SHOT FX STARTED TASK'
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXSSNAP                                               *
*                                                                     *
*  This module is designed to reside 24-bit mode because it does a    *
*  lot of I/O related stuff that has to be done in 24-bit mode        *
*  anyway.                                                            *
*                                                                     *
*  Debugging FX problems are difficult enough, trying to follow       *
*  control block chains in storage doesn't make this any easier.      *
*  At times you may want to "look" at what is going on without        *
*  shutting down the STC or abending it to get a dump.  This gives    *
*  an on-the-fly snap shot at most of the control blocks while the    *
*  STC is running.                                                    *
*                                                                     *
*  To keep from duplicating this code, the VTAM communication and     *
*  console communication drivers both use this module for the SNAP    *
*  function.  To inform us which driver called us, R7 will be set     *
*  to a SESSBLOK address if invoked by the VTAM driver or to zero     *
*  if invoked by the console driver.                                  *
*                                                                     *
* ------------------------------------------------------------------- *
FXSSNAP  CSECT
FXSSNAP  AMODE 31
FXSSNAP  RMODE 24
         USING FXSCOMM,R11           DEFINE BASE
         USING SESSBLOK,R7           ADDRESS PASSED BY FXSVTAM
         USING CONVBLOK,R6           ADDRESS PASSED BY FXSVTAM
         STM   R14,R12,12(R13)       SAVE CALLER'S REGISTERS
         LR    R12,R15               COPY ENTRY POINT ADDRESS
         USING FXSSNAP,R12           DEFINE BASE
         LA    R3,WORKL              WORK AREA SIZE
         GETMAIN R,LV=(3)            ACQUIRE WORK AREA
         B     SNAP0000              SKIP EYECATCHERS
         DC    ((PFXMODNM-MODPRFX)-(*-FXSSNAP))X'00'
         DC    CL8'FXSSNAP'
         DC    CL8'&SYSDATE'         DATE OF ASSEMBLY
         DC    CL6'&SYSTIME'         TIME OF ASSEMBLY
SNAP0000 DS    0H
         LR    R4,R13                SAVE SAVE AREA ADDRESS
         ST    R1,8(R13)             CHAIN OUR WORK AREA TO CALLER'S
         LR    R13,R1                COPY WORK AREA ADDRESS
         LR    R2,R1                 COPY WORK AREA ADDRESS
         SR    R0,R0                 CLEAR REGISTER
         SR    R1,R1                 CLEAR REGISTER
         MVCL  R2,R0                 CLEAR WORK AREA
         USING WORK,R13              DEFINE BASE
         ST    R4,WORK+4             SAVE SAVE AREA ADDRESS
         ITRACE ID=INIT
         MVC   WKDCB(DCBL),DCBI      INITIALIZE SNAP DCB
         MVC   WKPLINE,COMMBLKS      PRINT AREA
         MVC   WKOC(OPENL),OPENI     COPY OPEN LIST FORM
         ZAP   WKPAGE,P0             INITIALIZE PAGE NUMBER
         ZAP   WKLINE,P0             INITIALIZE LINE NUMBER
SNAP0010 DS    0H
         LTR   R7,R7                 WERE WE INVOKED FROM A CONSOLE?
         BZ    SNAP0020              YES
         L     R8,CONVIOA            I/O AREA ADDRESS
         USING USERREQ,R8            DEFINE BASE
         MVC   USERMSG,COMMBLKS      CLEAR MESSAGE
         CLI   SESSUATH,2            OPERATOR?
         BE    SNAP0020              YES
         CLI   SESSUATH,4            MASTER ID?
         BNE   ERR0010               NOT AUTHORIZED TO ISSUE SNAP
SNAP0020 DS    0H
         ITRACE ID=SNAPSHOT          STARTING A SNAP SHOT
         FXCALL FXSDAIR,ALLOCATE,    ALLOCATE THE SYSOUT DATA SET      +
               SYSOUT,               .. SYSOUT                         +
               FXSNAP                .. DDNAME
         OC    DAIRR15,DAIRR15       ALLOCATE SUCCESSFUL?
         BNZ   ERR0020               NO
         OI    WKFLAG,$WKALOC        FXSNAP IS ALLOCATED
         BAL   R14,AM24              SWITCH TO 24-BIT MODE
         LA    R2,WKDCB              DCB ADDRESS
         OPEN  ((R2),OUTPUT),MF=(E,WKOC)
         BAL   R14,AM31              SWITCH TO 31-BIT MODE
         OI    WKFLAG,$WKOPEN        FXSNAP IS OPEN
         MVI   WKCC,C'1'             NEW PAGE
         LTR   R7,R7                 INVOKED FROM A CONSOLE?
         BZ    SNAP0025              YES
         MVC   USERMSG(MSG01L),MSG01
         MVC   USERMSG+(MSG01USR-MSG01)(L'MSG01USR),SESSUSER
SNAP0025 DS    0H
         BAL   R9,HEAD0000           PRINT HEADING
         LR    R5,R11                SET BASE FOR FORMATTER
         LA    R4,COMM4MAT           COMMON AREA FORMATTING PARMS
         BAL   R3,FMT0000            FORMAT DATA FROM COMMON AREA
         ICM   R5,15,COMMRSTR        FIRST RESTORE BLOCK'S ADDRESS
         BZ    SNAP0030              NO RESTORE BLOCKS
         LA    R4,RSTR4MAT           RESTORE BLOCK FORMATTING PARMS
         BAL   R3,FMT0000            FORMAT RESTORE BLOCKS
SNAP0030 DS    0H
         ICM   R5,15,COMMSESS        FIRST SESSION BLOCK CHAIN
         BZ    SNAP0040              NO SESSIONS
         LA    R4,SESS4MAT           SESSBLOK FORMATTING PARMS
         BAL   R3,FMT0000            FORMAT SESSBLOKS AND CONVBLOKS
SNAP0040 DS    0H
         ICM   R5,15,COMMSTGE        FIRST STAGE DEVICE
         BZ    SNAP0050              NO STAGE DEVICES
         LA    R4,STGE4MAT           STGEDEV FORMATTING PARMS
         BAL   R3,FMT0000            FORMAT STGEDEV BLOCKS
SNAP0050 DS    0H
         ICM   R5,15,COMMDEST        FIRST DESTINATION NAME BLOCK
         BZ    SNAP0055              NO DESTINATION BLOCKS
         LA    R4,DEST4MAT           DESTBLOK FORMATTING DATA PARMS
         BAL   R3,FMT0000            FORMAT DESTBLOKS
SNAP0055 DS    0H
         ICM   R5,15,COMMXUSR        FIRST EXTERNAL USER BLOCK
         BZ    SNAP0060              NO DESTINATION BLOCKS
         LA    R4,XUSR4MAT           XUSRBLOK FORMATTING DATA PARMS
         BAL   R3,FMT0000            FORMAT XUSRBLOKS
SNAP0060 DS    0H
         ICM   R5,15,DSSREQ          DF/DSS REQUEST BLOCK
         BZ    SNAP0070              NO DF/DSS REQUEST
         LA    R4,DR4MAT             DRREQ FORMATTING PARMS
         BAL   R3,FMT0000            FORMAT DRREQ
SNAP0070 DS    0H
         ICM   R5,15,COPYREQ         IEBCOPY REQUEST BLOCK
         BZ    SNAP0080              NO IEBCOPY REQUEST
         LA    R4,DR4MAT             DRREQ FORMATTING PARMS
         BAL   R3,FMT0000            FORMAT DRREQ
SNAP0080 DS    0H
         ICM   R5,15,PRTREQ          FIRST PRTBLOK
         BZ    SNAP0090              NO PRTBLOKS
         LA    R4,PRT4MAT            PRTBLOK FORMATTING PARMS
         BAL   R3,FMT0000            FORMAT PRTBLOKS
SNAP0090 DS    0H
         ICM   R5,15,XTRREQ          FIRST EXTERNAL TRACE BLOCK
         BZ    SNAP0100              NO EXTERNAL TRACE BLOCKS
         LA    R4,XTR4MAT            EXTERNAL TRACE FORMATTING PARMS
         BAL   R3,FMT0000            FORMAT EXTERNAL TRACE BLOCKS
* ------------------------------------------------------------------- *
*                                                                     *
*     Format the trace table.  The table is not "unwrapped", that is  *
*     it is printed in the way it appears in storage and not in       *
*     chronological order.  The current entry is indicated.           *
*                                                                     *
*     Note that the trace data is copied before unpacking.  To get    *
*     8 bytes of hex, 5 bytes are unpacked at a time.  When the last  *
*     trace entry is being processed, this can cause a reference 1    *
*     byte beyond the end of the trace table.  To prevent this S0C4   *
*     I copy the data before unpacking.  I copied DATA1 just so both  *
*     DATA1 and DATA2 are handled in the same manner.                 *
*                                                                     *
* ------------------------------------------------------------------- *
SNAP0100 DS    0H
         ICM   R5,15,TRFIRST         FIRST TRACE TABLE ENTRY
         BZ    EXIT0000
         USING TRENTRY,R5            DEFINE BASE
         MVI   WKCC,C'0'             DOUBLE SPACE
         MVI   WKPDATA,C'-'          INSERT A HYPHEN
         MVC   WKPDATA+1(L'WKPDATA-1),WKPDATA
         MVC   WKPDATA+60(11),=C'TRACE TABLE'
         BAL   R9,PRT0000            PRINT TRACE TABLE HEADING
SNAP0110 DS    0H
         MVC   WKTR(WKTRL),COMMBLKS  CLEAR TRACE FORMAT WORK AREA
         MVC   WKTRMOD,TREMOD        COPY MODULE NAME
         MVC   WKTRID,TREID          COPY TRACE ID
         MVC   WKTR1C,TREDATA1       COPY TRACE DATA 1
         MVC   WKDWORD,TREDATA1      COPY DATA
         UNPK  WKTR1H+0(9),WKDWORD+0(5)  UNPACK TRDATA 1
         UNPK  WKTR1H+8(9),WKDWORD+4(5)  UNPACK TRDATA 1
         MVZ   WKTR1H,HEX0000        CLEAR ZONES
         TR    WKTR1H,HEXCHAR        TRANSLATE TO PRINTABLE
         MVI   WKTR1H+16,C' '        RESTORE BLANK
         MVC   WKTR2C,TREDATA2       COPY TRACE DATA 2
         MVC   WKDWORD,TREDATA2      COPY DATA
         UNPK  WKTR2H+0(9),WKDWORD+0(5)  UNPACK TRDATA 2
         UNPK  WKTR2H+8(9),WKDWORD+4(5)  UNPACK TRDATA 2
         MVZ   WKTR2H,HEX0000        CLEAR ZONES
         TR    WKTR2H,HEXCHAR        TRANSLATE TO PRINTABLE
         MVI   WKTR2H+16,C' '        RESTORE BLANK
         C     R5,TRCURR             CURRENT TRACE ENTRY?
         BNE   SNAP0120              NO
         MVC   WKTRCURR,=C'<--- CURRENT ENTRY'
SNAP0120 DS    0H
         MVC   WKPDATA(WKTRL),WKTR   COPY EDITED DATA
         BAL   R9,PRT0000            PRINT
         C     R5,TRLAST             JUST PRINT LAST ENTRY?
         BE    EXIT0000              YES
         LA    R5,TRENTRYL(R5)       NEXT TRACE ENTRY
         B     SNAP0110              LOOP
         B     EXIT0000              EXIT
         DROP  R5
* ------------------------------------------------------------------- *
*                                                                     *
*  This routine formats the fields in a control block.  If the block  *
*  is a "chain" type block (like the SESSBLOKs), it will format       *
*  all the blocks on the chain.  If a field is a "pointer" field,     *
*  the blocks on that chain will be run before formatting the next    *
*  block on the base chain.  For example the SESSBLOKs are a chain    *
*  type block, the SESSBLOKs point to CONVBLOKs (CONVBLOKs are also   *
*  a chain type block), so if                                         *
*                                                                     *
*          SESSBLOK "A" points to SESSBLOK "B" on the SESSBLOK chain  *
*          and SESSBLOK "A" points to CONVBLOK "1" and CONVBLOK "2",  *
*          and SESSBLOK "B" points to CONVBLOK "3", the output would  *
*          look like:                                                 *
*                                                                     *
*          ------------ SESSBLOK at xxxxxxxx --------                 *
*                         .                                           *
*                         .   SESSBLOK "A"s fields                    *
*                         .                                           *
*          ------------ CONVBLOK at xxxxxxxx --------                 *
*                         .                                           *
*                         .   CONVBLOK "1"s fields                    *
*                         .                                           *
*          ------------ CONVBLOK at xxxxxxxx --------                 *
*                         .                                           *
*                         .   CONVBLOK "2"s fields                    *
*                         .                                           *
*          ------------ SESSBLOK at xxxxxxxx --------                 *
*                         .                                           *
*                         .   SESSBLOK "B"s fields                    *
*                         .                                           *
*          ------------ CONVBLOK at xxxxxxxx --------                 *
*                         .                                           *
*                         .   CONVBLOK "3"s fields                    *
*                         .                                           *
*                                                                     *
*  Up to 10 nested chains are allowed.                                *
*                                                                     *
*                                                                     *
*                                                                     *
*  At entry:                                                          *
*            R3 is the return address                                 *
*            R4 points to the formatting data for the control block   *
*            R5 points to the first (or only block)                   *
*                                                                     *
* ------------------------------------------------------------------- *
FMT0000  DS    0H
         STM   R0,R15,FMTSAVE        SAVE ALL REGISTERS
         MVC   CURBLKNM,0(R4)        SAVE CURRENT BLOCK'S NAME
         LA    R4,8(R4)              SKIP BLOCK NAME
FMT0010  DS    0H
         ST    R4,CURFMTDA           SAVE CURRENT BLOCK'S FMT DATA ADDR
         ST    R5,CURCBA             SAVE CURRENT CONTROL BLOCK ADDRESS
         USING FDMPDATA,R4           DEFINE BASE
         XC    CURNEXT,CURNEXT       CLEAR 'NEXT' ON CHAIN ADDRESS
         XC    CURSBFDA,CURSBFDA     CLEAR SUB-CHAIN FORMAT DATA ADDR
         XC    CURSBCBA,CURSBCBA     CLEAR SUB-CHAIN CONTROL BLOCK ADDR
         MVC   WKFMT,COMMBLKS        CLEAR WORK AREA
         MVI   WKCC,C'0'             DOUBLE SPACE
         MVI   WKPDATA,C'-'          INSERT A HYPHEN
         MVC   WKPDATA+1(L'WKPDATA-1),WKPDATA
         ST    R5,WKDWORD            SAVE CURRENT BLOCK'S ADDRESS
         MVC   WKFIELD,CURBLKNM      SET BLOCK NAME
         UNPK  WKDATA(9),WKDWORD(5)  UNPACK THIS BLOCK'S ADDRESS
         MVZ   WKDATA(8),HEX0000     TURN OFF ZONES
         TR    WKDATA(8),HEXCHAR     TRANSLATE TO PRINTABLE
         MVC   WKPDATA+56(17),WKFIELD
         BAL   R9,PRT0000            PRINT BLOCK HEADING
         LA    R14,WKPDATA           FIRST OUTPUT AREA
         LA    R15,L'WKPDATA         PRINT SPACE AVAILABLE
FMT0020  DS    0H
         CLI   0(R4),X'FF'           END OF FIELDS FOR THIS BLOCK?
         BE    FMT9000               YES.. EXIT FOR NOW
         MVC   WKFIELD,FDMPFLDN      COPY FIELD NAME
         SR    R6,R6                 CLEAR REGISTER
         ICM   R6,3,FDMPLEN          SOURCE FIELD'S LENGTH
         SR    R7,R7                 CLEAR REGISTER
         ICM   R7,3,FDMPDISP         DISPLACEMENT TO DATA
         AR    R7,R5                 ADDRESS OF DATA
         TM    FDMPFLAG,$FLAGCH      CHAIN FIELD?
         BNO   FMT0030               NO
         MVC   CURNEXT,0(R7)         COPY NEXT BLOCK'S ADDRESS
FMT0030  DS    0H
         CLC   FDMPPTR,HEX0000       SUB-CHAIN POINTER?
         BE    FMT0040               NO
         MVC   CURSBFDA,FDMPPTR      COPY FORMAT DATA ADDRESS
         MVC   CURSBCBA,0(R7)        COPY CONTROL BLOCK ADDRESS
FMT0040  DS    0H
         CLI   FDMPFMT,$FMTBIN       IS THIS A BINARY FIELD?
         BE    FMT0050               YES
         CLI   FDMPFMT,$FMTCHAR      IS THIS A CHARACTER FIELD?
         BE    FMT0060               YES
         CLI   FDMPFMT,$FMTDEC       IS THIS A DECIMAL FIELD?
         BE    FMT0070               YES
         CLI   FDMPFMT,$FMTHEX       IS THIS A HEX FIELD?
         BE    FMT0080               YES
         ABEND $U0074,DUMP,,USER     BAD NEWS
FMT0050  DS    0H
         XC    WKBIN,WKBIN           CLEAR BINARY WORK AREA
         BCTR  R6,0                  ADJUST FOR EXECUTES
         LA    R2,WKBIN+3            END OF FIELD
         SR    R2,R6                 MINUS ADJUSTED LENGTH
         EX    R6,FMTMVC1            COPY
         L     R1,WKBIN              LOAD UP THE NUMBER
         CVD   R1,WKDWORD            CONVERT IT TO DECIMAL
         MVC   WKDATA(L'BINEDWD),BINEDWD
         ED    WKDATA(L'BINEDWD),WKDWORD+2
         LA    R6,21                 TOTAL OUTPUT LENGTH
         B     FMT0100               ADD DATA TO PRINT AREA
FMTMVC1  MVC   0(0,R2),0(R7)         COPY DATA
FMT0060  DS    0H
         BCTR  R6,R0                 MINUS 1
         EX    R6,FMTMVC2            COPY DATA
         LA    R6,10(R6)             TOTAL OUTPUT LENGTH
         B     FMT0100               ADD DATA TO PRINT AREA
FMTMVC2  MVC   WKDATA(0),0(R7)       COPY DATA
FMT0070  DS    0H
         BCTR  R6,R0                 MINUS 1
         EX    R6,FMTZAP1            COPY TO DOUBLE WORD
         MVC   WKDATA(L'BINEDWD),BINEDWD
         ED    WKDATA(L'BINEDWD),WKDWORD+2
         LA    R6,21                 TOTAL OUTPUT LENGTH
         B     FMT0100               ADD DATA TO PRINT AREA
FMTZAP1  ZAP   WKDWORD,0(0,R7)       COPY PACKED DECIMAL
FMT0080  DS    0H
         LA    R1,WKDATA             OUTPUT AREA
FMT0090  DS    0H
         UNPK  0(3,R1),0(2,R7)       UNPACK DATA
         MVZ   0(2,R1),HEX0000       CLEAR ZONES
         TR    0(2,R1),HEXCHAR       TRANSLATE TO PRINTABLE
         LA    R1,2(R1)              NEXT IN OUTPUT
         LA    R7,1(R7)              NEXT IN INPUT
         BCT   R6,FMT0090            LOOP
         ICM   R6,3,FDMPLEN          RESTORE FIELD LENGTH
         LA    R6,9(R6,R6)           TOTAL OUTPUT LENGTH
FMT0100  DS    0H
         CR    R15,R6                ENOUGH ROOM LEFT?
         BH    FMT0110               YES
         BAL   R9,PRT0000            PRINT
         LA    R14,WKPDATA           RESET OUTPUT ADDRESS
         LA    R15,L'WKPDATA         RESET SPACE AVAILABLE
FMT0110  DS    0H
         BCTR  R6,R0                 ADJUST FOR EXECUTE
         EX    R6,FMTMVC3            COPY DATA TO PRINT AREA
         LA    R6,3(R6)              TOTAL LENGTH (PLUS 2 BLANKS)
         AR    R14,R6                NEXT OUTPUT AREA ADDRESS
         SR    R15,R6                SPACE STILL AVAILABLE
         LA    R4,FDMPDATAL(R4)      NEXT FIELD FORMAT DATA
         B     FMT0020               FORMAT THIS FIELD
FMTMVC3  MVC   0(0,R14),WKFMT        COPY FORMATTED DATA
FMT9000  DS    0H
         CH    R15,=Y(L'WKPDATA)     SOMETHING IN THE PRINT LINE?
         BE    FMT9010               NO
         BAL   R9,PRT0000            PRINT PARTIAL LINE
FMT9010  DS    0H
         OC    CURSBCBA,CURSBCBA     A SUB-CHAIN?
         BZ    FMT9030               NO
         LA    R1,9                  NUMBER OF LOOPS
         LA    R2,CURBLKNM+(8*CURCTLL)    9TH ENTRY
FMT9020  DS    0H
         MVC   CURCTLL(CURCTLL,R2),0(R2)  COPY NTH TO N+1TH ENTRY
         SH    R2,=Y(CURCTLL)             MINUS 1 ENTRY
         BCT   R1,FMT9020                 LOOP
         XC    CURBLKNM(CURCTLL),CURFMTDA CLEAR 1ST ENTRY
         L     R4,CURSBFDA+CURCTLL        FORMATTING DATA ADDRESS
         MVC   CURBLKNM,0(R4)             SET CONTROL BLOCK NAME
         LA    R4,8(R4)                   SKIP CONTROL BLOCK NAME
         ST    R4,CURFMTDA                SET DATA FORMATTING ADDRESS
         L     R5,CURSBCBA+CURCTLL        SUB-BLOCKS' ADDRESS
         ST    R5,CURCBA                  SAVE CONTROL BLOCK ADDRESS
         B     FMT0010                    FORMAT THIS CHAIN
FMT9030  DS    0H
         OC    CURNEXT,CURNEXT       A 'NEXT' BLOCK?
         BZ    FMT9040               NO
         L     R4,CURFMTDA           RESET FORMAT DATA ADDRESS
         L     R5,CURNEXT            NEXT BLOCK'S ADDRESS
         B     FMT0010               FORMAT THIS BLOCK ALSO
FMT9040  DS    0H
         OC    CURBLKNM+CURCTLL(CURCTLL),CURBLKNM+CURCTLL
         BZ    FMT9999               NOTHING IN STACK
         MVC   CURBLKNM(9*CURCTLL),CURBLKNM+CURCTLL
         XC    CURBLKNM+(9*CURCTLL)(CURCTLL),CURBLKNM+(9*CURCTLL)
         B     FMT9030               CHECK FOR NEXT ON SAME LEVEL
FMT9999  DS    0H
         LM    R0,R15,FMTSAVE        RESTORE REGISTERS
         BR    R3                    EXIT
ERR0010  DS    0H
         ITRACE ID=NOTAUTH,          USER NOT AUTHORIZED               +
               DATA1=SESSUSER        .. REQUESTING USER
         MVC   USERMSG(MSG02L),MSG02 SET USER'S MESSAGE
         B     EXIT0000              EXIT
ERR0020  DS    0H
         ITRACE ID=ALOCFAIL,         SYSOUT ALLOCATION FAILED          +
               DATA1=DAIRR15         DAIR RETURN CODE
         ABEND $U0072,DUMP,,USER
ERR0030  DS    0H
         ITRACE ID=DALOFAIL,         SYSOUT DE-ALLOCATION FAILED       +
               DATA1=DAIRR15         DAIR RETURN CODE
         ABEND $U0073,DUMP,,USER
PRT0000  DS    0H
         TR    WKPLINE,PRTABLE       MAKE SURE ALL IS PRINTABLE
         BAL   R14,AM24              SWITCH TO 24-BIT MODE
         PUT   WKDCB,WKPLINE         WRITE TO SNAP SHOT DATASET
         BAL   R14,AM31              SWITCH TO 31-BIT MODE
         CLI   WKCC,C'+'             NO SPACING?
         BE    PRT0010               YES
         AP    WKLINE,P1             ADD 1 TO LINE COUNT
         CLI   WKCC,C' '             SINGLE SPACE?
         BE    PRT0010               YES
         AP    WKLINE,P1             ADD 1 TO LINE COUNT
         CLI   WKCC,C'0'             DOUBLE SPACE?
         BE    PRT0010               YES
         AP    WKLINE,P1             ADD 1 TO LINE COUNT
PRT0010  DS    0H
         MVC   WKPLINE,COMMBLKS      CLEAR PRINT AREA
         CP    WKLINE,COMMMAXL       TIME FOR A HEADING?
         BNHR  R9                    NO.. RETURN
HEAD0000 DS    0H
         TIME  DEC
         STM   R0,R1,WKTMDT          SAVE TIME AND DATE
         MVC   WKPLINE(HEADINGL),HEADING
         UNPK  WKPLINE+(HDTIME-HEADING)+0(3),WKTM+0(2) UNPACK HOURS
         UNPK  WKPLINE+(HDTIME-HEADING)+3(3),WKTM+1(2) UNPACK MINUTES
         UNPK  WKPLINE+(HDTIME-HEADING)+6(3),WKTM+2(2) UNPACK SECONDS
         MVI   WKPLINE+(HDTIME-HEADING)+2,C':'
         MVI   WKPLINE+(HDTIME-HEADING)+5,C':'
         MVI   WKPLINE+(HDTIME-HEADING)+8,C' '
         AP    WKDT,P1900000         ADD 19TH CENTURY
         MVC   WKPLINE+(HDDATE-HEADING)(L'HDDATE),DATEEDWD
         ED    WKPLINE+(HDDATE-HEADING)(L'HDDATE),WKDT
         LTR   R7,R7                 INVOKED FROM A CONSOLE?
         BZ    HEAD0010              YES
         MVC   WKPLINE+(HDUSER-HEADING)(L'HDUSER),SESSUSER
         B     HEAD0020
HEAD0010 DS    0H
         MVC   WKPLINE+(HDUSER-HEADING)(L'HDUSER),OPERATOR
HEAD0020 DS    0H
         MVC   WKPLINE+(HDSYSN-HEADING)(L'HDSYSN),COMMSYSN
         AP    WKPAGE,P1             ADD 1 TO PAGE COUNT
         MVC   WKPLINE+(HDPAGE-HEADING)(L'HDPAGE),PAGEEDWD
         ED    WKPLINE+(HDPAGE-HEADING)(L'HDPAGE),WKPAGE
         BAL   R14,AM24              SWITCH TO 24-BIT MODE
         PUT   WKDCB,WKPLINE         WRITE HEADING
         BAL   R14,AM31              SWITCH TO 31-BIT MODE
         MVC   WKPLINE,COMMBLKS      CLEAR PRINT AREA
         BAL   R14,AM24              SWITCH TO 24-BIT MODE
         PUT   WKDCB,WKPLINE         WRITE HEADING
         BAL   R14,AM31              SWITCH TO 31-BIT MODE
         ZAP   WKLINE,P1             RESET LINE COUNT
         BR    R9                    RETURN
EXIT0000 DS    0H
         ITRACE ID=EXIT              EXITING SNAP SHOT MODULE
         TM    WKFLAG,$WKOPEN        IS FXSNAP OPEN?
         BNO   EXIT0010              NO
         ITRACE ID=CLOSE
         MVC   WKOC(CLOSEL),CLOSEI   COPY CLOSE LIST FORM
         BAL   R14,AM24              SWITCH TO 24-BIT MODE
         LA    R2,WKDCB              DCB ADDRESS
         CLOSE ((R2)),MF=(E,WKOC)    CLOSE THE DCB
         BAL   R14,AM31              SWITCH TO 31-BIT MODE
EXIT0010 DS    0H
***
***   It is not necessary to issue a "DE-ALLOCATE" request for the
***   FXSNAP DD because FXDAIR allocates it with "FREE=CLOSE".
***
         LTR   R7,R7                 INVOKED VIA A CONSOLE?
         BZ    EXIT0020              YES
         LA    R0,(USERDATA-USERREQ) TOTAL LENGTH
         STH   R0,USERLEN            SET LENGTH
EXIT0020 DS    0H
         LR    R1,R13                COPY WORK AREA ADDRESS
         L     R13,4(R13)            RESTORE REGISTER 13
         FREEMAIN R,A=(1),LV=WORKL   FREEMAIN WORK AREA
         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS
         SR    R15,R15               GIVE GOOD RETURN CODE
         BR    R14                   RETURN TO CALLER
AM24     DS    0H
         LA    R14,0(R14)            CLEAR HIGH ORDER BIT(S)
         BSM   R0,R14                RETURN IN 24-BIT MODE
AM31     DS    0H
         LA    R14,0(R14)            CLEAR HIGH ORDER BIT(S)
         O     R14,X80               TURN ON HIGH ORDER BIT
         BSM   R0,R14                RETURN IN 31-BIT MODE
* ------------------------------------------------------------------ *
*                                                                    *
*        CONSTANTS                                                   *
*                                                                    *
* ------------------------------------------------------------------ *
X80      DC    A(X'80000000')
HEX0000  DC    16X'00'
HEXCHAR  DC    C'0123456789ABCDEF'
BINEDWD  DC    X'402120202020202020202020'
DATEEDWD DC    X'40202020204B202020'
PAGEEDWD DC    X'40202120'
P0       DC    P'0'
P1       DC    P'1'
P1900000 DC    P'1900000'
FXSNAP   DC    CL8'FXSNAP'
OPERATOR DC    CL8'OPERATOR'
MSG01    DS    0C
         DC    CL11'FXSSNAP01I'
         DC    C'SNAP SHOT REQUESTED BY '
MSG01USR DC    CL8' '
MSG01L   EQU   *-MSG01
MSG02    DS    0C
         DC    CL11'FXSSNAP02E'
         DC    C'YOU ARE NOT AUTHORIZED TO SNAP SHOT FX'
MSG02L   EQU   *-MSG02
HEADING  DS    0C
         DC    C'FX STC SNAPSHOT OF '
HDSYSN   DC    CL20' '
         DC    C' TAKEN AT:'
HDDATE   DC    CL9' '
         DC    C' '
HDTIME   DC    CL8' '
         DC    C'   REQUESTED BY '
HDUSER   DC    CL8' '
         DC    C'     PAGE '
HDPAGE   DC    CL4' '
HEADINGL EQU   *-HEADING
OPENI    OPEN  (*,OUTPUT),MF=L
OPENL    EQU   *-OPENI
CLOSEI   CLOSE (*),MF=L
CLOSEL   EQU   *-CLOSEI
DCBI     DCB   DDNAME=FXSNAP,                                          +
               DSORG=PS,                                               +
               RECFM=FBA,                                              +
               LRECL=133,                                              +
               MACRF=PM
DCBL     EQU   *-DCBI
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
PRTABLE  DC    X'40404040404040404040404040404040'  X'00'-X'0F'
         DC    X'40404040404040404040404040404040'  X'10'-X'1F'
         DC    X'40404040404040404040404040404040'  X'20'-X'2F'
         DC    X'40404040404040404040404040404040'  X'30'-X'3F'
         DC    X'404040404040404040404A4B4C4D4E4F'  X'40'-X'4F'
         DC    X'504040404040404040405A5B5C5D5E5F'  X'50'-X'5F'
         DC    X'60614040404040404040406B6C404040'  X'60'-X'6F'
         DC    X'404040404040404040407A7B7C7D7E7F'  X'70'-X'7F'
         DC    X'40818283848586878889404040404040'  X'80'-X'8F'
         DC    X'40919293949596979899404040404040'  X'90'-X'9F'
         DC    X'4040A2A3A4A5A6A7A8A9404040404040'  X'A0'-X'AF'
         DC    X'40404040404040404040404040404040'  X'B0'-X'BF'
         DC    X'C0C1C2C3C4C5C6C7C8C9404040404040'  X'C0'-X'CF'
         DC    X'D0D1D2D3D4D5D6D7D8D9404040404040'  X'D0'-X'DF'
         DC    X'4040E2E3E4E5E6E7E8E9404040404040'  X'E0'-X'EF'
         DC    X'F0F1F2F3F4F5F6F7F8F9404040404040'  X'F0'-X'FF'
         LTORG
RSTR4MAT SNAPFMT TYPE=BASE,FIELD=RSTRBLOK
         SNAPFMT FIELD=RSTRNEXT,FORMAT=HEX,CHAIN=YES
         SNAPFMT FIELD=RSTRDSNL,FORMAT=BIN
         SNAPFMT FIELD=RSTRDSN,FORMAT=CHAR
         SNAPFMT FIELD=RSTRVOL#,FORMAT=BIN
         SNAPFMT FIELD=RSTRVOL,FORMAT=CHAR,LENGTH=60
         DC      X'FF'
STGE4MAT SNAPFMT TYPE=BASE,FIELD=STGEDEV
         SNAPFMT FIELD=STGENEXT,FORMAT=HEX,CHAIN=YES
         SNAPFMT FIELD=STGETRSZ,FORMAT=BIN
         SNAPFMT FIELD=STGETRCL,FORMAT=BIN
         SNAPFMT FIELD=STGEVOL,FORMAT=CHAR
         DC      X'FF'
DEST4MAT SNAPFMT TYPE=BASE,FIELD=DESTBLOK
         SNAPFMT FIELD=DESTNEXT,FORMAT=HEX,CHAIN=YES
         SNAPFMT FIELD=DESTNAME,FORMAT=CHAR
         SNAPFMT FIELD=DESTNODE,FORMAT=CHAR
         DC      X'FF'
XUSR4MAT SNAPFMT TYPE=BASE,FIELD=XUSRBLOK
         SNAPFMT FIELD=XUSRNEXT,FORMAT=HEX,CHAIN=YES
         SNAPFMT FIELD=XUSRSMF,FORMAT=CHAR
         SNAPFMT FIELD=XUSRID1,FORMAT=CHAR
         SNAPFMT FIELD=XUSRID2,FORMAT=CHAR
         DC      X'FF'
XTR4MAT  SNAPFMT TYPE=BASE,FIELD=XTRRECD
         SNAPFMT FIELD=XTRNEXT,FORMAT=HEX,CHAIN=YES
         SNAPFMT FIELD=XTRDATA,FORMAT=HEX,LENGTH=8
         DC      X'FF'
DR4MAT   SNAPFMT TYPE=BASE,FIELD=DRREQ
         SNAPFMT FIELD=DRRSTR,FORMAT=HEX
         SNAPFMT FIELD=DRR15,FORMAT=HEX
         SNAPFMT FIELD=DRINDD,FORMAT=CHAR
         SNAPFMT FIELD=DRSTAT,FORMAT=HEX
         SNAPFMT FIELD=DRPRTDD,FORMAT=CHAR
         SNAPFMT FIELD=DRSTAGE,FORMAT=CHAR
         SNAPFMT FIELD=DRPDS,FORMAT=CHAR
         SNAPFMT FIELD=DRRECD,FORMAT=HEX,LENGTH=100
         DC      X'FF'
PRT4MAT  SNAPFMT TYPE=BASE,FIELD=PRTBLOK
         SNAPFMT FIELD=PRTNEXT,FORMAT=HEX,CHAIN=YES
         SNAPFMT FIELD=PRTCMD,FORMAT=CHAR
         SNAPFMT FIELD=PRTCC,FORMAT=CHAR
         SNAPFMT FIELD=PRTMSGID,FORMAT=CHAR
         SNAPFMT FIELD=PRTDATA,FORMAT=CHAR
         DC      X'FF'
SESS4MAT SNAPFMT TYPE=BASE,FIELD=SESSBLOK
         SNAPFMT FIELD=SESSNEXT,FORMAT=HEX,CHAIN=YES
         SNAPFMT FIELD=SESSPREV,FORMAT=HEX
         SNAPFMT FIELD=SESSCONV,FORMAT=HEX,POINTER=CONV4MAT
         SNAPFMT FIELD=SESSRPL,FORMAT=HEX
         SNAPFMT FIELD=SESSRPLX,FORMAT=HEX
         SNAPFMT FIELD=SESSNIB,FORMAT=HEX
         SNAPFMT FIELD=SESSTIME,FORMAT=HEX
         SNAPFMT FIELD=SESSDATE,FORMAT=HEX
         SNAPFMT FIELD=SESSNAME,FORMAT=CHAR
         SNAPFMT FIELD=SESSSMF,FORMAT=CHAR
         SNAPFMT FIELD=SESSUSER,FORMAT=CHAR
         SNAPFMT FIELD=SESSTYPE,FORMAT=CHAR
         SNAPFMT FIELD=SESSUATH,FORMAT=HEX
         SNAPFMT FIELD=SESSREC#,FORMAT=BIN
         SNAPFMT FIELD=SESSSTAT,FORMAT=HEX
         DC      X'FF'
CONV4MAT SNAPFMT TYPE=BASE,FIELD=CONVBLOK
         SNAPFMT FIELD=CONVNEXT,FORMAT=HEX,CHAIN=YES
         SNAPFMT FIELD=CONVRPL,FORMAT=HEX
         SNAPFMT FIELD=CONVRPLX,FORMAT=HEX
         SNAPFMT FIELD=CONVDCB,FORMAT=HEX
         SNAPFMT FIELD=CONVDECB,FORMAT=HEX
         SNAPFMT FIELD=CONVIOA,FORMAT=HEX
         SNAPFMT FIELD=CONVREC#,FORMAT=BIN
         SNAPFMT FIELD=CONVTYPE,FORMAT=HEX
         SNAPFMT FIELD=CONVSTAT,FORMAT=HEX
         SNAPFMT FIELD=CONVFUNC,FORMAT=CHAR
         SNAPFMT FIELD=CONVCID,FORMAT=HEX
         DC      X'FF'
* ------------------------------------------------------------------ *
*            FORMATTING TABLE FOR FXSCOMM                            *
* ------------------------------------------------------------------ *
COMM4MAT SNAPFMT TYPE=BASE,FIELD=FXSCOMM
         SNAPFMT FIELD=AATTN,FORMAT=HEX
         SNAPFMT FIELD=ACOMM,FORMAT=HEX
         SNAPFMT FIELD=ACONV,FORMAT=HEX
         SNAPFMT FIELD=ADAIR,FORMAT=HEX
         SNAPFMT FIELD=ADSS,FORMAT=HEX
         SNAPFMT FIELD=ALERAD,FORMAT=HEX
         SNAPFMT FIELD=ALOSS,FORMAT=HEX
         SNAPFMT FIELD=AMAIN,FORMAT=HEX
         SNAPFMT FIELD=AMSTR,FORMAT=HEX
         SNAPFMT FIELD=APRTQ,FORMAT=HEX
         SNAPFMT FIELD=APRTS,FORMAT=HEX
         SNAPFMT FIELD=ARECV,FORMAT=HEX
         SNAPFMT FIELD=ASEND,FORMAT=HEX
         SNAPFMT FIELD=ASESS,FORMAT=HEX
         SNAPFMT FIELD=ASTGE,FORMAT=HEX
         SNAPFMT FIELD=ATIMER,FORMAT=HEX
         SNAPFMT FIELD=AVTAM,FORMAT=HEX
         SNAPFMT FIELD=AVSUB,FORMAT=HEX
         SNAPFMT FIELD=AVTOC,FORMAT=HEX
         SNAPFMT FIELD=AXTR,FORMAT=HEX
         SNAPFMT FIELD=AUID,FORMAT=HEX
         SNAPFMT FIELD=AREQE,FORMAT=HEX
         SNAPFMT FIELD=AREQI,FORMAT=HEX
         SNAPFMT FIELD=ASHUT,FORMAT=HEX
         SNAPFMT FIELD=A24,FORMAT=HEX
         SNAPFMT FIELD=TRFIRST,FORMAT=HEX
         SNAPFMT FIELD=TRLAST,FORMAT=HEX
         SNAPFMT FIELD=TRCURR,FORMAT=HEX
         SNAPFMT FIELD=TRADDR,FORMAT=HEX
         SNAPFMT FIELD=COMMXTR,FORMAT=HEX
         SNAPFMT FIELD=XTRREQ,FORMAT=HEX
         SNAPFMT FIELD=XTRTERM,FORMAT=HEX
         SNAPFMT FIELD=XTRWORK,FORMAT=HEX
         SNAPFMT FIELD=COMMDXDA,FORMAT=HEX
         SNAPFMT FIELD=COMMACB,FORMAT=HEX
         SNAPFMT FIELD=COMMXLST,FORMAT=HEX
         SNAPFMT FIELD=COMMRSTR,FORMAT=HEX
         SNAPFMT FIELD=COMMSTGE,FORMAT=HEX
         SNAPFMT FIELD=COMMSESS,FORMAT=HEX
         SNAPFMT FIELD=COMMDEST,FORMAT=HEX
         SNAPFMT FIELD=COMMTECB,FORMAT=HEX
         SNAPFMT FIELD=COMMVECB,FORMAT=HEX
         SNAPFMT FIELD=COMMMAX,FORMAT=BIN
         SNAPFMT FIELD=COMMRECS,FORMAT=BIN
         SNAPFMT FIELD=COMMPREL,FORMAT=BIN
         SNAPFMT FIELD=COMMAPLL,FORMAT=BIN
         SNAPFMT FIELD=COMMAPLN,FORMAT=CHAR
         SNAPFMT FIELD=COMMPREF,FORMAT=CHAR
         SNAPFMT FIELD=COMMMAXL,FORMAT=DEC
         SNAPFMT FIELD=COMMDD#,FORMAT=DEC
         SNAPFMT FIELD=COMMFLAG,FORMAT=HEX
         SNAPFMT FIELD=COMMEOJ,FORMAT=HEX
         SNAPFMT FIELD=COMMDSS,FORMAT=HEX
         SNAPFMT FIELD=DSSREQ,FORMAT=HEX
         SNAPFMT FIELD=DSSTERM,FORMAT=HEX
         SNAPFMT FIELD=DSSWORK,FORMAT=HEX
         SNAPFMT FIELD=COMMPRT,FORMAT=HEX
         SNAPFMT FIELD=PRTREQ,FORMAT=HEX
         SNAPFMT FIELD=PRTTERM,FORMAT=HEX
         SNAPFMT FIELD=PRTWORK,FORMAT=HEX
         DC      X'FF'
* ------------------------------------------------------------------ *
*                                                                    *
*        WORK AREAS                                                  *
*                                                                    *
* ------------------------------------------------------------------ *
WORK     DSECT
WORKSAVE DS    18F                   REGISTER SAVE AREA
FMTSAVE  DS    16F
WKDWORD  DS    D                     DOUBLE WORD WORK AREA
         SPACE 1
WKTMDT   DS    0F                    TIME AND DATE
WKTM     DS    F                     TIME (HHMMSSTH)
WKDT     DS    F                     DATE (0CYYDDDS)
         SPACE 1
WKBIN    DS    F
WKOC     DS    (OPENL)X
WKDCB    DS    (DCBL)X
         SPACE 1
         DS    0F                    FORCE ALIGNMENT
         SPACE 1
CURBLKNM DS    CL8                   CURRENT BLOCK'S NAME
CURFMTDA DS    A                     CURRENT BLOCK'S FORMAT DATA
CURCBA   DS    A                     CURRENT CONTROL BLOCK'S ADDRESS
CURNEXT  DS    A                     NEXT BLOCK ON CHAIN
CURSBFDA DS    A                     SUB CHAIN FORMAT DATA ADDRESS
CURSBCBA DS    A                     SUB CHAIN CONTROL BLOCK ADDRESS
CURCTLL  EQU   *-CURBLKNM            CONTROL DATA PER CONTROL BLOCK
         DS    (9*CURCTLL)X          9 MORE CONTROL ENTRIES
         SPACE 1
WKFLAG   DS    X
$WKALOC  EQU   X'80'                 FXSNAP ALLOCATED
$WKOPEN  EQU   X'40'                 FXSNAP OPENED
WKPAGE   DS    PL2                   PAGE NUMBER
WKLINE   DS    PL2                   LINE NUMBER
         SPACE 1
WKFMT    DS    0CL132
WKFIELD  DS    CL8                   FIELD NAME
         DS    C
WKDATA   DS    CL123                 FIELD VALUE
         SPACE 1
WKTR     DS    0C
WKTRMOD  DS    CL8                   MODULE NAME
         DS    CL5
WKTRID   DS    CL8                   TRACE ID
         DS    CL5
WKTR1C   DS    CL8                   TRACE DATA1 OR RDATA1 IN CHARACTER
         DS    C
WKTR1H   DS    CL16                  TRACE DATA1 OR RDATA1 IN HEX
         DS    CL5
WKTR2C   DS    CL8                   TRACE DATA2 OR RDATA2 IN CHARACTER
         DS    C
WKTR2H   DS    CL16                  TRACE DATA2 OR RDATA2 IN HEX
         DS    C
WKTRCURR DS    CL18
WKTRL    EQU   *-WKTR
         SPACE 1
WKPLINE  DS    0CL133
WKCC     DS    C
WKPDATA  DS    CL132
         SPACE 1
         DAIRREQ  DSECT=NO
WORKL    EQU   *-WORK
* ------------------------------------------------------------------ *
*              SESSION BLOCK                                         *
* ------------------------------------------------------------------ *
         SESSBLOK DSECT=YES
* ------------------------------------------------------------------ *
*              CONVERSATION BLOCK                                    *
* ------------------------------------------------------------------ *
         CONVBLOK DSECT=YES
* ------------------------------------------------------------------ *
*              USER REQUEST/RESPONSE BLOCK                           *
* ------------------------------------------------------------------ *
         USERREQ
* ------------------------------------------------------------------ *
*              COMMON DATA MAP                                       *
* ------------------------------------------------------------------ *
         FXSCOMM  TYPE=DSECT
* ------------------------------------------------------------------ *
*              CONTROL BLOCK FORMATTING DATA                         *
* ------------------------------------------------------------------ *
         COPY  FDMPDATA
* ------------------------------------------------------------------ *
*              RESTORE BLOCKS                                        *
* ------------------------------------------------------------------ *
         RSTRBLOK DSECT=YES
* ------------------------------------------------------------------ *
*              STAGE DEVICE BLOCKS                                   *
* ------------------------------------------------------------------ *
         STGEDEV  DSECT=YES
* ------------------------------------------------------------------ *
*              DESTINATION NAME BLOCKS                               *
* ------------------------------------------------------------------ *
         DESTBLOK DSECT=YES
* ------------------------------------------------------------------ *
*              DF/DSS REQUEST BLOCKS                                 *
* ------------------------------------------------------------------ *
         DRREQ    DSECT=YES
* ------------------------------------------------------------------ *
*              EXTERNAL USER BLOCKS                                  *
* ------------------------------------------------------------------ *
         XUSRBLOK DSECT=YES
* ------------------------------------------------------------------ *
*              PRINT REQUEST BLOCKS                                  *
* ------------------------------------------------------------------ *
         PRTBLOK  DSECT=YES
* ------------------------------------------------------------------ *
*              TRANSMISSION REQUEST BLOCK                            *
* ------------------------------------------------------------------ *
         REQBLOK  DSECT=YES
* ------------------------------------------------------------------ *
*                                                                    *
*              EQUATES                                               *
*                                                                    *
* ------------------------------------------------------------------ *
         COPY REGEQU
         ABCODES
         END  FXSSNAP
./ ADD NAME=FXSSTGE  0100-99056-99056-1500-01449-01449-00000-FX-REL1

         TITLE 'FXSSTGE  STAGE/DE-STAGE'
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXSSTGE                                               *
*                                                                     *
*  Function:                                                          *
*                                                                     *
*     1) Determine status of DF/DSS and IEBCOPY subtasks              *
*        a) If work has been scheduled to DF/DSS subtask              *
*              is the process complete?                               *
*                 yes.. update master file,                           *
*                       free dump/restore request block               *
*                 no..  indicate DF/DSS subtask is busy               *
*        b) If work has been scheduled to IEBCOPY subtask             *
*              is the process complete?                               *
*                 yes.. update master file,                           *
*                       free dump/restore request block               *
*                 no..  indicate IEBCOPY subtask is busy              *
*     2) If both subtasks are busy..                                  *
*           exit                                                      *
*     3) Scan the master file                                         *
*       For a request in 'initial' state:                             *
*        A) verify that the data set exists (is must be cataloged)    *
*        b) verify that the data set is on disk                       *
*        c) if the request specified a member name                    *
*              verify that the DSORG is PO                            *
*                 if DSORG = PO                                       *
*                    set data set size to "MEM SIZE" value            *
*                    go to "e"                                        *
*                 if DSORG not = PO                                   *
*                    set status to "error"                            *
*                    go to "3" to find another request                *
*        d) if the request did not specify a member:                  *
*           determine how large the data set is                       *
*        e) allocate the staging dataset, and data sets to be used    *
*           for DF/DSS or IEBCOPY SYSIN and SYSPRINT.                 *
*        f) Drive the DF/DSS or IEBCOPY subtask to have the data set  *
*           or member "dumped".                                       *
*                                                                     *
*       For data sets received:                                       *
*        a) allocate the data sets for DF/DSS or IEBCOPY SYSIN and    *
*           SYSPRINT.                                                 *
*        2) Drive the DF/DSS or IEBCOPY subtask to have the data set  *
*           or member "restored".                                     *
*                                                                     *
* ------------------------------------------------------------------- *
SSTGE    FXPRFX 'STAGE/DE-STAGE'
FXSSTGE  AMODE 31
FXSSTGE  RMODE ANY
         USING REQBLOK,R7            DEFINE BASE
         USING DRREQ,R4              DEFINE BASE
         B     INIT0000
DXDSTART DC    Q(DXDSSTGE)           DISPLACEMENT TO WORK AREA
INIT0000 DS    0H
         LA    R9,2048(R12)          SET 2ND BASE
         LA    R9,2048(R9)           SET 2ND BASE
         DROP  R12
         USING FXSSTGE,R12,R9        DEFINE BOTH BASE'S
         CLC   DXDID,MODID           WORK AREA INITIALIZED?
         BE    STGE0010              YES
         ITRACE ID=INIT
         MVC   DXDID,MODID           WORK AREA INITIALIZED
         LOAD  EP=IDCAMS             LOAD IDCAMS
         ST    R0,DXDIDCEP           SAVE IDCAMS ENTRY POINT ADDRESS
         GETMAIN RU,                 ACQUIRE STORAGE FOR IDCAMS SYSIN  +
               LV=IDCIL,             .. AMOUNT OF STORAGE REQUIRED     +
               LOC=BELOW             .. FROM BELOW THE LINE
         ST    R1,DXDIDCI            SAVE SYSIN DCB ADDRESS
         GETMAIN RU,                 ACQUIRE STORAGE FOR IDCAMS PRINT  +
               LV=IDCPL,             .. AMOUNT OF STORAGE REQUIRED     +
               LOC=BELOW             .. FROM BELOW THE LINE
         ST    R1,DXDIDCP            SAVE SYSIN DCB ADDRESS
         GETMAIN RU,                 ACQUIRE 24-BIT MODULE PARM AREA   +
               LV=FX24L,             .. AREA SIZE                      +
               LOC=BELOW             .. FROM BELOW THE LINE
         ST    R1,DXD24              SAVE 24-BIT PARM LIST ADDRESS
         USING FX24PRM,R1            DEFINE BASE
         MVI   IO24,C' '              CLEAR FIRST BYTE
         MVC   IO24+1(L'IO24-1),IO24  CLEAR I/O AREA
         DROP  R1
         MVI   PRTCC,C' '            INITIALIZE CARRIAGE CONTROL
         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC
STGE0010 DS    0H
         TM    COMMEOJ,$EOJ3         SHUTDOWN PHASE 3?
         BO    EXIT0000              YES
         L     R8,DXD24              24-BIT PARM AREA ADDRESS
         USING FX24PRM,R8            DEFINE BASE
         NI    DXDFLAG,255-$DSS-$COPY  ASSUME BOTH ARE AVAILABLE
*---------------------------------------------------------------------*
*                                                                     *
*   Check on status of DF/DSS subtask                                 *
*                                                                     *
*---------------------------------------------------------------------*
         ITRACE ID=CHECKDSS          CHECKING ON STATUS OF DF/DSS
         OC    DSSTERM,DSSTERM       HAS THE DF/DSS SUBTASK ABENDED?
         BZ    STGE0020              NO
         ITRACE ID=DSSABEND,         DF/DSS SUBTASK HAS ABENDED        +
               DATA1=DSSTERM         .. INCLUDE REASON IN TRACE
         ABEND $U0096,DUMP,,USER
STGE0020 DS    0H
         ICM   R4,15,DSSREQ          REQUEST BLOCK'S ADDRESS
         BZ    STGE0040              NO REQUEST BLOCK
         TM    DSSECB,X'40'          ECB POSTED?
         BNO   STGE0030              NO
         XC    DSSECB,DSSECB         RESET THE ECB
         XC    DSSREQ,DSSREQ         CLEAR THE REQUEST BLOCK ADDRESS
         ITRACE ID=DSSDONE,          DF/DSS COMPLETE                   +
               DATA1=DRRECD,         .. TRACE MASTER FILE RECORD NUMBER+
               DATA2=DRR15           .. AND DF/DSS R15
         BAL   R5,FREE0000           FREE STAGE DATA SETS AND DRREQ
         ITRACE ID=FREEDR1,          RELEASING A DUMP/RESTORE BLOCK    +
               RDATA1=R4             .. BLOCK'S ADDRESS
         FREEMAIN RU,A=(4),LV=DRREQL FREE DUMP/RESTORE REQUEST BLOCK
         B     STGE0040              CHECK ON IEBCOPY
STGE0030 DS    0H
         ITRACE ID=DSSBUSY           DF/DSS SUBTASK IS BUSY
         OI    DXDFLAG,$DSS          SET DSS BUSY INDICATOR
         NI    COMMEOJ,255-$EOJ2     DON'T TERMINATE UNTILL IT'S DONE
*---------------------------------------------------------------------*
*                                                                     *
*   Check on status of IEBCOPY subtask                                *
*                                                                     *
*---------------------------------------------------------------------*
STGE0040 DS    0H
         ITRACE ID=CHKCOPY           CHECKING ON STATUS OF IEBCOPY
         OC    COPYTERM,COPYTERM     HAS IEBCOPY SUBTASK ABENDED?
         BZ    STGE0060              NOT YET!
         ICM   R1,3,COPYTERM+1       INSERT SYSTEM ABEND CODE
         SRL   R1,4                  SHFIT TO LOW BITS
         STCM  R1,3,DXDWORK          SAVE SYSTEM ABEND CODE
         CLI   DXDWORK+1,X'37'       X37 ABEND?
         BE    STGE0050              YES
         ITRACE COPYABND,            IEBCOPY HAS ABENDED               +
               DATA1=COPYTERM        .. INCLUDE REASON IN TRACE
         ABEND $U0097,DUMP,,USER
STGE0050 DS    0H
         ICM   R4,15,COPYREQ         REQUEST BLOCK'S ADDRESS
         BZ    ERR0080               NO REQUEST BLOCK
         LA    R7,DRRECD             SAVED RECORD IN REQUEST BLOCK
         MVC   PRTMSGID(MSG01L),MSG01
         MVC   PRTMSGID+(MSG01NDE-MSG01)(L'MSG01NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG01NBR-MSG01)(L'MSG01NBR),DXDDWORD+4
         MVC   PRTMSGID+(MSG01DSN-MSG01)(L'MSG01DSN),REQODSNM
         MVC   PRTMSGID+(MSG01MEM-MSG01)(L'MSG01MEM),REQOMEM
         BAL   R6,PRT0000            PRINT MESSAGE
         LA    R1,COMMCOPY           IEBCOPY SUBTASK TCB ADDRESS
         DETACH (R1)                 DETACH THE SUBTASK
         XC    COPYTERM,COPYTERM     CLEAR TERMINATION ECB
         LA    R2,COPYTERM           TERMINATION ECB'S ADDRESS
         LA    R3,DXDAPARM           PARM LIST ADDRESS
         ITRACE ID=ATCHCOPY          ATTACHING IEBCOPY SUBTASK
         ATTACH EP=FXSCOPY,          ATTACH IEBCOPY SUBTASK            +
               PARAM=((R11)),        .. PARAMETER IS COMMON MODULE ADDR+
               ECB=(R2),             .. TERMINATION ECB'S ADDRESS      +
               PURGE=QUIESCE,        .. FINISH UP I/O IN PROGRESS      +
               MF=(E,(R3)),          .. SUBTASK PARM LIST              +
               SF=(E,DXDATTCH)       .. EXECUTE FORM, LIST FORM ADDRESS
         LTR   R15,R15               ATTACH SUCCESSFUL?
         BNZ   ERR0090               NO
         ST    R1,COMMCOPY           SAVE SUBTASK'S TCB ADDRESS
         ITRACE ID=COPYOK,                                             +
               RDATA1=R1
         MVC   PRTMSGID(MSG02L),MSG02
         BAL   R6,PRT0000            PRINT MESSAGE
         MVI   DRR15,X'FF'           SET ABEND X37 FLAG
         B     STGE0070              PROCESS AS IF COMPLETED
STGE0060 DS    0H
         ICM   R4,15,COPYREQ         REQUEST BLOCK'S ADDRESS
         BZ    STGE0090              NO REQUEST BLOCK
         TM    COPYECB,X'40'         ECB POSTED?
         BNO   STGE0080              NO
STGE0070 DS    0H
         XC    COPYECB,COPYECB       RESET THE ECB
         XC    COPYREQ,COPYREQ       CLEAR THE REQUEST BLOCK ADDRESS
         ITRACE ID=COPYDONE,         IEBCOPY COMPLETE                  +
               DATA1=DRRECD,         .. TRACE MASTER FILE RECORD NUMBER+
               DATA2=DRR15           .. AND IEBCOPY R15
         BAL   R5,FREE0000           FREE STAGE DATA SETS AND DRREQ
         ITRACE ID=FREEDR2,          RELEASING A DUMP/RESTORE BLOCK    +
               RDATA1=R4             .. BLOCK'S ADDRESS
         FREEMAIN RU,A=(4),LV=DRREQL FREE DUMP/RESTORE REQUEST BLOCK
         B     STGE0090
STGE0080 DS    0H
         ITRACE ID=COPYBUSY          IEBCOPY SUBTASK IS BUSY
         OI    DXDFLAG,$COPY         SET COPY BUSY INDICATOR
         NI    COMMEOJ,255-$EOJ2     DON'T TERMINATE UNTILL IT'S DONE
* ------------------------------------------------------------------- *
*                                                                     *
*        Scan the master file for requests that need to be queued     *
*                                                                     *
* ------------------------------------------------------------------- *
STGE0090 DS    0H
         TM    COMMEOJ,$EOJ1         SHUT-DOWN IN PROGRESS?
         BO    EXIT0040              YES.. DON'T SCHEDULE MORE WORK
         TM    DXDFLAG,$DSS+$COPY    BOTH SUBTASKS BUSY?
         BO    EXIT0040              YES.. CANNOT SCHEDULE ANY WORK
         ITRACE ID=SCANMSTR          STARTING MASTER FILE SCAN
         XC    DXDREC#,DXDREC#       INITIALIZE FOR RECORD NUMBER
         B     STGE0110              START READING MASTER FILE
STGE0100 DS    0H
         LH    R1,DXDREC#            CURRENT RECORD NUMBER
         LA    R1,1(R1)              UPDATE RECORD COUNTER
         STH   R1,DXDREC#            SAVE UPDATED RECORD NUMBER
         C     R1,COMMRECS           AT END OF MASTER FILE?
         BE    EXIT0040              YES
         ITRACE ID=NEXTMSTR,         TRACE READS                       +
               DATA1=DXDREC#         .. RECORD NUMBER
STGE0110 DS    0H
         MVI   MSTRCMD,$MSTRRD       READ A RECORD
         BAL   R6,MSTR0000           LINK TO MASTER FILE I/O
         CLI   REQSTAT,0             UNUSED RECORD?
         BE    EXIT0040              YES
         CLI   REQSTAT,$REQRCVD      RECEIVED AND READY FOR RESTORE?
         BE    STGE0340              YES
         CLI   REQSTAT,$REQINIT      INITIAL STATUS?
         BNE   STGE0100              NO
         CLC   COMMAPLN,REQTNODE     ARE WE SENDING END?
         BE    STGE0120              YES
         ABEND $U0035,DUMP,,USER     SHOULDN'T HAPPEN
STGE0120 DS    0H
         CLC   REQOMEM,COMMBLKS      IEBCOPY NEEDED?
         BNE   STGE0130              YES
         TM    DXDFLAG,$DSS          DF/DSS ALREADY BUSY?
         BO    STGE0100              YES.. SEARCH FOR ANOTHER REQUEST
         B     STGE0140              START 'DUMP' PROCESSING
STGE0130 DS    0H
         TM    DXDFLAG,$COPY         IEBCOPY ALREADY BUSY?
         BO    STGE0100              YES.. SEARCH FOR ANOTHER REQEUST
* ------------------------------------------------------------------- *
*                                                                     *
*        We have a data set that needs to be "DUMP"ed                 *
*                                                                     *
* ------------------------------------------------------------------- *
STGE0140 DS    0H
         ITRACE ID=LISTCAT
         L     R1,DXDIDCI            IDCAMS SYSIN DCB ADDRESS
         L     R15,AIDCII            SYSIN DCB
         MVC   0(IDCIL,R1),0(R15)    COPY DCB
         ST    R1,DCB24              SET DCB ADDRESS
         FX24  $OPENO                CALL OPEN OUTPUT
         MVC   IO24(LISTC1L),LISTC1  LISTCAT STATEMENT
         BAL   R6,PUNCH000           WRITE LISTCAT STATEMENT
         MVC   IO24(LISTC2L),LISTC2
         MVC   IO24+(LISTC2NM-LISTC2)(L'LISTC2NM),REQODSNM
         BAL   R6,PUNCH000           WRITE LISTCAT STATEMENT
         MVC   IO24(LISTC3L),LISTC3
         BAL   R6,PUNCH000           WRITE LISTCAT STATEMENT
         FX24  $CLOSE                CALL CLOSE
         GETMAIN RU,                 ACQUIRE STORAGE FOR PARM LIST     +
               LV=IDCPRML,           .. SIZE                           +
               LOC=BELOW             .. FROM BELOW THE LINE
         ST    R1,PARM24             SET PARM LIST ADDRESS
         LR    R2,R1                 COPY STORAGE ADDRESS
         MVC   0(IDCPRML,R2),IDCPRM  COPY PARM LIST
         LA    R0,H0-IDCPRM(R2)      OPTIONS ADDRESS
         ST    R0,0(R2)              SET OPTIONS ADDRESS
         LA    R0,DDNLIST-IDCPRM(R2) DDNAMES LIST ADDRESS
         ST    R0,4(R2)              SET DDNAMES LIST ADDRESS
         OI    4(R2),X'80'           FLAG END OF LIST
         MVC   EP24,DXDIDCEP         IDCAMS ENTRY POINT
         FX24  $CALL                 LINK TO 24-BIT CALL
         L     R1,DXDIDCP            IDCAMS SYSPRINT DCB ADDRESS
         L     R15,AIDCPI            PRINT DCB
         MVC   0(IDCPL,R1),0(R15)    COPY DCB
         ST    R1,DCB24              SET DCB ADDRESS
         FX24  $OPENI                CALL OPEN INPUT
         MVI   DXDFLAG,0             RESET ALL FLAGS
         XC    DXDDSNSZ,DXDDSNSZ     CLEAR TOTAL SIZE
STGE0150 DS    0H
         ITRACE ID=LISTREAD
         LA    R0,STGE0310           EOF ROUTINE ADDRESS
         ST    R0,EOF24              SET EOF ADDRESS
         OI    EOF24,X'80'           SET 31-BIT MODE FLAG
         FX24  $GETL                 CALL GET-LOCATE
         L     R1,IOA24              RETURNED DATA ADDRESS
         SR    R2,R2                 CLEAR REGISTER
         ICM   R2,3,0(R1)            LENGTH OF RECORD
         LA    R1,5(R1)              SKIP LENGTH AND CARRIAGE CONTROL
         SH    R2,H5                 MINUS LENGTH
         BZ    STGE0150              READ NEXT RECORD
STGE0160 DS    0H
         CLI   0(R1),C' '            BLANK?
         BNE   STGE0170              NO
         LA    R1,1(R1)              NEXT
         BCT   R2,STGE0160           LOOP
         B     STGE0150              READ NEXT RECORD
STGE0170 DS    0H
         CLC   SUMMARY,0(R1)         BEGINNING OF IDCAMS SUMMARY?
         BE    STGE0310              FORCE EOF
         CLC   IDC3012I,0(R1)        DATASET NOT FOUND (NOT CATALOGED)?
         BE    ERR0040               YES
         CLC   NONVSAM,0(R1)         A 'NON-VSAM' DATA SET RECORD?
         BE    STGE0180              YES
         CLC   DATA,0(R1)            A 'DATA' COMPONENT RECORD?
         BE    STGE0190              YES
         CLC   INDEX,0(R1)           AN 'INDEX' COMPONENT RECORD?
         BE    STGE0200              YES
         CLC   VOLSER,0(R1)          A VOLSER RECORD?
         BE    STGE0240              YES
         B     STGE0150              READ NEXT RECORD
STGE0180 DS    0H
         ITRACE ID=NONVSAM           DATA SET IS NON-VSAM
         OI    DXDFLAG,$NONVSAM      DATA SET IS NON-VSAM
         LA    R1,L'NONVSAM(R1)      SKIP KEYWORD
         SH    R2,=Y(L'NONVSAM)      MINUS LENGTH OF KEYWORD
         BZ    ERR0030               ERROR NO LENGTH LEFT
         B     STGE0210
STGE0190 DS    0H
         ITRACE ID=DATA              DATA COMPONENT FOUND
         OI    DXDFLAG,$DATA         DATA COMPONENT FOUND
         LA    R1,L'DATA(R1)         SKIP KEYWORD
         SH    R2,=Y(L'DATA)         MINUS LENGTH OF KEYWORD
         BZ    ERR0030               ERROR NO LENGTH LEFT
         B     STGE0210
STGE0200 DS    0H
         ITRACE ID=INDEX             INDEX COMPONENT FOUND
         OI    DXDFLAG,$INDEX        INDEX COMPONENT FOUND
         LA    R1,L'INDEX(R1)        SKIP KEYWORD
         SH    R2,=Y(L'INDEX)        MINUS LENGTH OF KEYWORD
         BZ    ERR0030               ERROR NO LENGTH LEFT
STGE0210 DS    0H
         CLC   =C'- ',0(R1)          END OF HYPENS?
         BE    STGE0220              YES
         LA    R1,1(R1)              NEXT
         BCT   R2,STGE0210           LOOP
         B     ERR0030               ERROR IF NEVER FOUND
STGE0220 DS    0H
         LA    R1,2(R1)              DSN OR COMPONENT NAME'S ADDRESS
         SH    R2,H2                 MINUS LENGTH
         BZ    ERR0030               ERROR IF NOTHING LEFT
         CH    R2,H44                MORE THAN 44?
         BNH   STGE0230              NO
         LH    R2,H44                LIMIT TO 44
STGE0230 DS    0H
         ITRACE ID=DATANAME,                                           +
               DATA1=0(R1),          .. FIRST 8 BYTES OF NAME          +
               DATA2=8(R1)           .. NEXT 8 BYTES OF NAME
         MVC   DXDDSN,COMMBLKS       INITIALIZE DATA SET NAME
         BCTR  R2,0                  FOR EXECUTE
         EX    R2,DSNMVC             MOVE DATA SET NAME
         B     STGE0150              READ NEXT RECORD
DSNMVC   MVC   DXDDSN(0),0(R1)       SAVE DATA SET NAME
STGE0240 DS    0H
         ITRACE ID=VOLSER
         TM    DXDFLAG,$NONVSAM+$DATA+$INDEX   ANY ONE OF THE ABOVE?
         BZ    ERR0010               NO.. SERIOUS PROBLEM
         LA    R1,L'VOLSER(R1)       SKIP KEYWORD
         SH    R2,=Y(L'VOLSER)       MINUS LENGTH OF KEYWORD
         BZ    ERR0110               NO LENGTH LEFT
STGE0250 DS    0H
         CLI   0(R1),C'-'            HYPHEN?
         BNE   STGE0260              NO
         LA    R1,1(R1)              NEXT
         BCT   R2,STGE0250           LOOP
         B     ERR0110               VOLSER NOT FOUND
STGE0260 DS    0H
         L     R15,CVTPTR            CVT ADDRESS
         USING CVT,R15               DEFINE BASE
         CLC   RESVOL,0(R1)          SYSRES? ('******')
         BNE   STGE026A              NO
         L     R14,CVTSYSAD          SYSRES DEVICE ADDRESS
         USING UCBOB,R14             DEFINE BASE
         LA    R1,UCBVOLI            VOLSER ADDRESS IN THE UCB
         B     STGE0270
STGE026A DS    0H
         ICM   R14,15,CVTUCBA        FIRST UCB
STGE026B DS    0H
         CLC   UCBVOLI,0(R1)         DEVICE LOCATED?
         BE    STGE026C              YES
         ICM   R14,15,UCBNXUCB       NEXT UCB
         BNZ   STGE026B              LOOP
         B     ERR0140               VOLUME NOT FOUND
STGE026C DS    0H
         TM    UCBTBYT3,UCB3DACC     DASD DEVICE?
         BNO   ERR0160               NO
         TM    UCBSTAT,UCBONLI       IS DEVICE ONLINE?
         BNO   ERR0170               NO
STGE0270 DS    0H
         ST    R1,VTOCVOL            SET VOLSER ADDRESS
         LA    R1,DXDDSN             DATA SET NAME'S ADDRESS
         ST    R1,VTOCDSN            SET DSN ADDRESS
         CLC   REQOMEM,COMMBLKS      PDS MEMBER?
         BNE   STGE0280              YES
         MVI   VTOCCMD,$VTOCXNT      SET COMMAND (SCAN EXTENTS)
         B     STGE0290
STGE0280 DS    0H
         FX24  $CLOSE                CLOSE THE DCB NOW
         MVI   VTOCCMD,$VTOCDSO      SET COMMAND (DETERMINE DSORG)
STGE0290 DS    0H
         LA    R1,VTOCREQ            VTOC INTERFACE BLOCK ADDRESS
         L     R15,AVTOC             VTOC MODULE ENTRY POINT
         BALR  R14,R15               LINK TO VTOC MODULE
         CLI   VTOCDSO,$VTOCIS       ISAM FILE?
         BE    ERR0020               YES.. NOT SUPPORTED
         CLC   REQOMEM,COMMBLKS      PDS MEMBER?
         BNE   STGE0300              YES
         L     R1,DXDDSNSZ           SIZE SO FAR
         A     R1,VTOCDSSZ           PLUS ADDITIONAL SIZE
         ST    R1,DXDDSNSZ           SAVE TOTAL SIZE
         B     STGE0150              READ NEXT IDCAMS PRINT LINE
STGE0300 DS    0H
         CLI   VTOCDSO,$VTOCPO       DSORG = PO?
         BNE   ERR0100               NO..
         ITRACE ID=PDSVERIF          DATA SET ORGANIZATION IS PO
         MVC   DXDDSNSZ,COMMMEM      SET SIZE
         B     STGE0320
* ------------------------------------------------------------------- *
*        All IDCAMS SYSPRINT has been read (or in the case of a PDS   *
*        member all that we are going to read), the data set size     *
*        has been determined.                                         *
* ------------------------------------------------------------------- *
STGE0310 DS    0H
         ITRACE ID=LISTEOF           EOF ON IDCAMS LIST
         FX24  $CLOSE                CLOSE THE DCB NOW
STGE0320 DS    0H
         OC    DXDDSNSZ,DXDDSNSZ     DATA SET SIZE ZERO?
         BZ    ERR0050               YES..
         CLC   DXDDSNSZ,COMMMAX      LARGER THAN MAX ALLOWED?
         BH    ERR0060               YES
         MVI   DAIRCMD,$DAIRALO      SET COMMAND (ALLOCATE)
         MVI   DAIRTYPE,$DAIRSTG     SET TYPE (STAGING)
         MVC   DAIRSIZE,DXDDSNSZ     SET DATA SET SIZE IN BYTES
         MVC   DXDWORK,STAGING       SET DATA SET TYPE
         BAL   R6,DAIR0000           LINK TO DAIR
         OC    DAIRR15,DAIRR15       STAGING DATA SET ALLOCATED?
         BNZ   STGE0480              NO
         MVC   REQWDSNM,DAIRDSN      SAVE STAGING DATA SET'S NAME
         MVC   DXDSTAGE,DAIRDDN      SAVE DDNAME
         CLC   REQOMEM,COMMBLKS      PDS MEMBER?
         BNE   STGE0330              YES
         MVI   REQUTIL,$REQDSS       SET UTILITY USED TO DF/DSS
         B     STGE0410
STGE0330 DS    0H
         MVI   REQUTIL,$REQCOPY      SET UTILITY USED TO IEBCOPY
         MVI   DAIRTYPE,$DAIRDSN     SET TYPE EXISTING DATA SET
         MVC   DAIRDSN,REQODSNM      SET DATA SET NAME
         MVC   DXDWORK,PDS           SET DATA SET TYPE FOR MESSAGES
         BAL   R6,DAIR0000           ALLOCATE THE PDS
         OC    DAIRR15,DAIRR15       DATA SET SET ALLOCATED?
         BNZ   STGE0490              NO
         MVC   DXDPDS,DAIRDDN        SAVE PDS DD NAME
         B     STGE0410
* ------------------------------------------------------------------- *
*                                                                     *
*        Restore                                                      *
*                                                                     *
* ------------------------------------------------------------------- *
STGE0340 DS    0H
         ITRACE ID=RESTORE
         CLI   REQUTIL,$REQCOPY      IEBCOPY?
         BE    STGE034A              YES
         TM    DXDFLAG,$DSS          DF/DSS ALREADY BUSY?
         BO    STGE0100              YES.. SEARCH FOR ANOTHER REQUEST
         B     STGE034Z
STGE034A DS    0H
         TM    DXDFLAG,$COPY         IEBCOPY ALREADY BUSY?
         BO    STGE0100              YES.. SEARCH FOR ANOTHER REQUEST
         B     STGE0390              SKIP RSTRBLOK SEARCH
STGE034Z DS    0H
         MVC   DXDDSN,REQODSNM       ASSUME ORIGINAL NAME
         CLC   REQDDSNM,COMMBLKS     DESTINATION NAME BLANK?
         BE    STGE0350              YES
         MVC   DXDDSN,REQDDSNM       SET NAME TO DESTINATION NAME
STGE0350 DS    0H
         ICM   R3,15,COMMRSTR        FIRST RESTORE BLOCK
         USING RSTRBLOK,R3           DEFINE BASE
         BZ    STGE0370              VOLUME NOT DEFINED
STGE0360 DS    0H
         CLC   DEFAULT,RSTRDSN       'DEFAULT' RESTORE ENTRY?
         BE    STGE0380              YES.. MATCHES EVERYTHING
         LH    R1,RSTRDSNL           DATA SET NAME PREFIX LENGTH
         BCTR  R1,0                  MINUS 1
         EX    R1,RSTRCLC            PREFIX MATCH?
         BE    STGE0380              YES
         ICM   R3,15,RSTRNEXT        NEXT RESTORE BLOCK
         BNZ   STGE0360              SEARCH ALL OF THEM
STGE0370 DS    0H
         MVI   REQSTAT,$REQNRVL      NO RESTORE VOLUME DEFINED
         MVC   PRTMSGID(MSG03L),MSG03 SET MESSAGE
         MVC   PRTMSGID+(MSG03NDE-MSG03)(L'MSG03NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG03NBR-MSG03)(L'MSG03NBR),DXDDWORD+4
         MVC   PRTMSGID+(MSG03DSN-MSG03)(L'MSG03DSN),DXDDSN
         BAL   R6,PRT0000            PRINT MESSAGE
         B     STGE0580              UPDATE MASTER FILE
STGE0380 DS    0H
         ITRACE ID=RSTRFND,          RESTORE BLOCK LOCATED             +
               RDATA1=R3
         ST    R3,DXDRSTR            SAVE RESTORE BLOCK'S ADDRESS
         CLI   REQREPL,C'Y'          REPLACE?
         BNE   STGE0390              NO
         MVC   DAIRDSN,REQODSNM      ASSUME ORIGINAL NAME
         CLC   REQDDSNM,COMMBLKS     NEW DATA SET GIVEN?
         BE    STGE0385              NO
         MVC   DAIRDSN,REQDDSNM      CHANGE TO NEW NAME
STGE0385 DS    0H
         FXCALL DAIR,DELETE          DELETE THE DATA SET (IF IT EXISTS)
STGE0390 DS    0H
         MVI   DAIRCMD,$DAIRALO      SET COMMAND (ALLOCATE)
         MVI   DAIRTYPE,$DAIRDSN     AN EXISTING DATA SET
         MVC   DAIRDSN,REQWDSNM      SET DATA SET NAME
         MVC   DXDWORK,STAGING       SET DATA SET TYPE
         BAL   R6,DAIR0000           LINK TO DAIR
         OC    DAIRR15,DAIRR15       STAGING DATA SET ALLOCATED?
         BNZ   ERR0130               NO.. SERIOUS NEWS
         MVC   DXDSTAGE,DAIRDDN      SAVE DDNAME
         CLI   REQUTIL,$REQCOPY      IEBCOPY?
         BNE   STGE0410              NO
         MVI   DAIRCMD,$DAIRALO      SET COMMAND (ALLOCATE)
         MVI   DAIRTYPE,$DAIRDSN     AN EXISTING DATA SET
         MVC   DAIRDSN,REQODSNM      SET OUTPUT DATA SET NAME
         CLC   REQDDSNM,COMMBLKS     DESTINATION DSN BLANK?
         BE    STGE0400              YES
         MVC   DAIRDSN,REQDDSNM      CHANGE TO NEW NAME
STGE0400 DS    0H
         MVC   DXDWORK,PDS           SET DATA SET TYPE
         BAL   R6,DAIR0000           LINK TO DAIR
         OC    DAIRR15,DAIRR15       OUTPUT PDS ALLOCATED?
         BNZ   STGE0500              NO
         MVC   DXDPDS,DAIRDDN        SAVE DDNAME
* ------------------------------------------------------------------- *
*                                                                     *
*        Dump processing joins restore processing at this point       *
*                                                                     *
* ------------------------------------------------------------------- *
STGE0410 DS    0H
         ITRACE ID=ALOCIN            ALLOCATING SYSIN DATA SET
         MVI   DAIRCMD,$DAIRALO      SET COMMAND (ALLOCATE)
         CLI   REQUTIL,$REQCOPY      USING IEBCOPY?
         BE    STGE0420              YES
         MVI   DAIRTYPE,$DAIRDSS     SET TYPE (DF/DSS SYSIN/SYSPRINT)
         B     STGE0430
STGE0420 DS    0H
         MVI   DAIRTYPE,$DAIRCPY     SET TYPE (IEBCOPY SYSIN/SYSPRINT)
         MVC   DAIRDDN,SYSIN         SET DD NAME TO 'SYSIN'
STGE0430 DS    0H
         BAL   R6,DAIR0000           LINK TO DAIR TO ALLOCATE SYSIN
         OC    DAIRR15,DAIRR15       SYSIN ALLOCATED?
         BNZ   STGE0510              NO
         MVC   DXDINDD,DAIRDDN       COPY SYSIN DDNAME
         MVC   REQIDSNM,DAIRDSN      COPY SYSIN DATA SET NAME
         ITRACE ID=ALOCPRT           ALLOCATING DF/DSS SYSPRINT DATASET
         CLI   REQUTIL,$REQCOPY      USING IEBCOPY?
         BNE   STGE0440              NO
         MVC   DAIRDDN,SYSPRINT      SET DDNAME
STGE0440 DS    0H
         BAL   R6,DAIR0000           LINK TO DAIR TO ALLOCATE SYSPRINT
         OC    DAIRR15,DAIRR15       SYSPRINT ALLOCATED?
         BNZ   STGE0530              NO
STGE0450 DS    0H
         MVC   DXDPRTDD,DAIRDDN      COPY SYSPRINT DDNAME
         MVC   REQSDSNM,DAIRDSN      COPY SYSPRINT DATA SET NAME
* ------------------------------------------------------------------- *
*                                                                     *
*        For a DUMP operation, the STAGING, SYSIN, and SYSPRINT       *
*        data sets have been allocated. For a RESTORE operation,      *
*        the STAGING data set was allocated by FXSVTAM during the     *
*        receiving process, and the SYSIN and SYSPRINT have just      *
*        been allocated.                                              *
*                                                                     *
*        Now allocate a DRREQ block, initialize it, and set the       *
*        address in the common area.                                  *
*                                                                     *
* ------------------------------------------------------------------- *
         GETMAIN RU,                 ACQUIRE A DRREQ                   +
               LV=DRREQL             .. LENGTH OF BLOCK
         ITRACE ID=NEWDRREQ,         NEW DUMP/RESTORE REQUEST BLOCK    +
               RDATA1=R1             .. TRACE ITS ADDRESS
         LR    R4,R1                 SET BASE
         XC    DRREQ(DRRECD-DRREQ),DRREQ
         MVC   DREYE,DRREQID         SET EYECATCHER
         MVC   DRINDD,DXDINDD        SET SYSIN DD
         MVC   DRPRTDD,DXDPRTDD      SET SYSPRINT DD
         MVC   DRSTAGE,DXDSTAGE      SET STAGING DATA SET DD
         MVC   DRPDS,DXDPDS          SET PDS DATA SET DD
         MVC   DRRSTR,DXDRSTR        SET RESTORE BLOCK'S ADDRESS
         LA    R0,DRRECD             DATA ADDRESS IN DSS BLOCK
         LA    R1,REQBLOKL           DATA LENGTH
         LA    R14,REQBLOK           MASTER FILE RECORD ADDRESS
         LR    R15,R1                COPY LENGTH
         MVCL  R0,R14                COPY RECORD TO DSS BLOCK
         CLI   REQUTIL,$REQCOPY      IEBCOPY?
         BE    STGE0460              YES
         ST    R4,DSSREQ             SET ADDRESS IN COMMON AREA
         OI    DXDFLAG,$DSS          DF/DSS IS BUSY
         LA    R1,DSSWORK            DF/DSS SUBTASK'S ECB
         ITRACE ID=POSTDSS,          WAKING UP DF/DSS SUBTASK          +
               RDATA1=R4             .. REQUEST BLOCK'S ADDRESS
         POST  (1)                   WAKE UP DF/DSS SUBTASK
         B     STGE0470
STGE0460 DS    0H
         ST    R4,COPYREQ            SET ADDRESS IN COMMON AREA
         OI    DXDFLAG,$COPY         IEBCOPY IS BUSY
         LA    R1,COPYWORK           IEBCOPY SUBTASK'S ECB
         ITRACE ID=POSTCOPY,         WAKING UP IEBCOPY SUBTASK         +
               RDATA1=R4             .. REQUEST BLOCK ADDRESS
         POST  (1)                   WAKE UP IEBCOPY SUBTASK
STGE0470 DS    0H
         CLI   REQSTAT,$REQINIT      REQUEST IN INITIAL STATUS?
         BE    STGE0560              YES
         CLI   REQSTAT,$REQRCVD      RECEIVED AND READY FOR RESTORE?
         BE    STGE0570              YES
         ABEND $U0036,DUMP,,USER     SHOULDN'T HAPPEN
STGE0480 DS    0H
         MVI   REQSTAT,$REQSTGD      ERROR ALLOCATING STAGE (DUMP)
         B     STGE0550
STGE0490 DS    0H
         MVI   REQSTAT,$REQPDSD      ERROR SOURCE PDS (DUMP)
         B     STGE0550
STGE0500 DS    0H
         MVI   REQSTAT,$REQPDSR      ERROR OUTPUT PDS (RESTORE)
         B     STGE0550
STGE0510 DS    0H
         MVC   DXDWORK,SYSIN         SET DATA SET TYPE
         CLI   REQSTAT,$REQRCVD      RECEIVED AND READY FOR RESTORE?
         BE    STGE0520              YES
         MVI   REQSTAT,$REQIND       ERROR ALLOCATING SYSIN (DUMP)
         B     STGE0550
STGE0520 DS    0H
         MVI   REQSTAT,$REQINR       ERROR ALLOCATING SYSIN (RESTORE)
         B     STGE0550
STGE0530 DS    0H
         MVC   DXDWORK,SYSPRINT      SET DATA SET TYPE
         CLI   REQSTAT,$REQRCVD      RECEIVED AND READY FOR RESTORE?
         BE    STGE0540              YES
         MVI   REQSTAT,$REQPRTD      ERROR ALLOCATING SYSPRINT (DUMP)
         B     STGE0550
STGE0540 DS    0H
         MVI   REQSTAT,$REQPRTR      ERROR ALLOCATING SYSOUT (RESTORE)
STGE0550 DS    0H
         MVC   PRTMSGID(MSG04L),MSG04
         MVC   PRTMSGID+(MSG04DD-MSG04)(L'MSG04DD),DXDWORK
         UNPK  PRTMSGID+(MSG04R15-MSG04)(5),DAIRR15(3)
         MVZ   PRTMSGID+(MSG04R15-MSG04)(4),HEX0000
         TR    PRTMSGID+(MSG04R15-MSG04)(4),HEXCHAR
         MVI   PRTMSGID+(MSG04R15-MSG04)+4,C' '
         UNPK  PRTMSGID+(MSG04ERR-MSG04)(5),DAIRERR(3)
         MVZ   PRTMSGID+(MSG04ERR-MSG04)(4),HEX0000
         TR    PRTMSGID+(MSG04ERR-MSG04)(4),HEXCHAR
         MVI   PRTMSGID+(MSG04ERR-MSG04)+4,C' '
         UNPK  PRTMSGID+(MSG04INF-MSG04)(5),DAIRINFO(3)
         MVZ   PRTMSGID+(MSG04INF-MSG04)(4),HEX0000
         TR    PRTMSGID+(MSG04INF-MSG04)(4),HEXCHAR
         MVI   PRTMSGID+(MSG04INF-MSG04)+4,C' '
         BAL   R6,PRT0000            PRINT MESSAGE
         B     STGE0580
STGE0560 DS    0H
         MVC   REQFSIZE,DXDDSNSZ     DATA SET'S SIZE
         MVC   PRTMSGID(MSG05L),MSG05 COPY MESSAGE
         MVC   PRTMSGID+(MSG05NDE-MSG05)(L'MSG05NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG05NBR-MSG05)(L'MSG05NBR),DXDDWORD+4
         BAL   R6,PRT0000            PRINT MESSAGE
         MVI   REQSTAT,$REQDUMP      DATA SET IS BEING DUMPED
         B     STGE0580
STGE0570 DS    0H
         MVC   PRTMSGID(MSG06L),MSG06 COPY MESSAGE
         MVC   PRTMSGID+(MSG06NDE-MSG06)(L'MSG06NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG06NBR-MSG06)(L'MSG06NBR),DXDDWORD+4
         BAL   R6,PRT0000            PRINT MESSAGE
         MVI   REQSTAT,$REQRSTR      DATA SET IS BEING RESTORED
STGE0580 DS    0H
         MVI   MSTRCMD,$MSTRWRT      'WRITE' A RECORD
         BAL   R6,MSTR0000           WRITE MASTER FILE RECORD
         TM    DXDFLAG,$DSS+$COPY    BOTH UTILITIES BUSY?
         BO    EXIT0040              YES.. CAN NOT DO ANY MORE
         B     STGE0100              READ NEXT RECORD
*---------------------------------------------------------------------*
*                                                                     *
*   Release stage data set, sysin, and sysprint data sets.            *
*   If the utility used was IEBCOPY, then the input or output PDS     *
*   will also need to be released.                                    *
*                                                                     *
*   If the operation was a 'DUMP' for a PDS member and the member     *
*   was not found, the stage data set, sysin, and sysprint data sets  *
*   will be DELETED (not just released) because no data was written   *
*   to any of them.  This would cause an abend in the inquiry         *
*   programs if the user selected the 'O' option to view the sysout.  *
*   Also since no data is in these data sets, there is no need to     *
*   tie up the disk space.                                            *
*                                                                     *
*---------------------------------------------------------------------*
FREE0000 DS    0H
         PACK  COMMDWRD,DRRECD+(REQREC#-REQBLOK)(L'REQREC#)
         CVB   R1,COMMDWRD           CONVERT TO BINARY
         BCTR  R1,0                  RELATIVE TO ZERO
         STH   R1,DXDREC#            SET RECORD NUMBER
         MVI   MSTRCMD,$MSTRRD       'READ' A RECORD
         BAL   R6,MSTR0000           READ MASTER FILE RECORD
FREE0010 DS    0H
         MVI   DAIRCMD,$DAIRREL      SET COMMAND (RELEASE)
         MVC   DAIRDDN,DRINDD        SET DDNAME
         MVC   DAIRDSN,REQIDSNM      SET DATA SET NAME
         MVC   DXDWORK,SYSIN         TYPE BEING RELEASED
         BAL   R6,DAIR0000           LINK TO DAIR TO RELEASE SYSIN
         OC    DAIRR15,DAIRR15       SUCCESSFUL?
         BNZ   ERR0070               NO
         TM    DRSTAT,$DRMEMX        MEMBER NOT FOUND?
         BNO   FREE0020              NO
         MVI   DAIRCMD,$DAIRDEL      SET COMMAND (DELETE)
         BAL   R6,DAIR0000           LINK TO DAIR TO DELETE SYSIN
         OC    DAIRR15,DAIRR15       SUCCESSFUL?
         BNZ   ERR0120               NO
FREE0020 DS    0H
         MVI   DAIRCMD,$DAIRREL      SET COMMAND (RELEASE)
         MVC   DAIRDDN,DRPRTDD       SET DDNAME
         MVC   DAIRDSN,REQSDSNM      SET DATA SET NAME
         MVC   DXDWORK,SYSPRINT      TYPE BEING RELEASED
         BAL   R6,DAIR0000           LINK TO DAIR TO RELEASE SYSPRINT
         OC    DAIRR15,DAIRR15       SUCCESSFUL?
         BNZ   ERR0070               NO
         TM    DRSTAT,$DRMEMX        MEMBER NOT FOUND?
         BNO   FREE0030              NO
         MVI   DAIRCMD,$DAIRDEL      SET COMMAND (DELETE)
         BAL   R6,DAIR0000           LINK TO DAIR TO DELETE SYSPRINT
         OC    DAIRR15,DAIRR15       SUCCESSFUL?
         BNZ   ERR0120               NO
FREE0030 DS    0H
         MVI   DAIRCMD,$DAIRREL      SET COMMAND (RELEASE)
         MVC   DAIRDDN,DRSTAGE       SET DDNAME
         MVC   DAIRDSN,REQWDSNM      SET DATA SET NAME
         MVC   DXDWORK,STAGING       TYPE BEING RELEASED
         BAL   R6,DAIR0000           LINK TO DAIR TO RELEASE STAGE
         OC    DAIRR15,DAIRR15       SUCCESSFUL?
         BNZ   ERR0070               NO
         TM    DRSTAT,$DRMEMX        MEMBER NOT FOUND?
         BNO   FREE0040              NO
         MVI   DAIRCMD,$DAIRDEL      SET COMMAND (DELETE)
         BAL   R6,DAIR0000           LINK TO DAIR TO DELETE STAGE
         OC    DAIRR15,DAIRR15       SUCCESSFUL?
         BNZ   ERR0120               NO
FREE0040 DS    0H
         CLI   REQUTIL,$REQCOPY      IEBCOPY?
         BNE   FREE0050              NO
         MVI   DAIRCMD,$DAIRREL      SET COMMAND (RELEASE)
         MVC   DAIRDDN,DRPDS         PDS DD NAME
         MVC   DXDWORK,PDS           TYPE BEING RELEASED
         BAL   R6,DAIR0000           LINK TO DAIR TO RELEASE PDS
         OC    DAIRR15,DAIRR15       SUCCESSFUL?
         BNZ   ERR0070               NO
FREE0050 DS    0H
         CLI   REQSTAT,$REQRSTR      WAS PROCESS A 'RESTORE'?
         BE    FREE0090              YES
         CLI   DRR15,X'FF'           DUMP ABEND?
         BE    FREE0060
         TM    DRSTAT,$DRMEMX        PDS MEMBER NOT FOUND?
         BO    FREE0080              RIGHT
         CLC   DRR15,H4              DUMP SUCCESSFUL?
         BH    FREE0070              NO
         MVI   REQSTAT,$REQXRDY      READY FOR TRANSMITTING
         MVC   PRTMSGID(MSG07L),MSG07 DUMP SUCCESSFUL
         MVC   PRTMSGID+(MSG07NDE-MSG07)(L'MSG07NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG07NBR-MSG07)(L'MSG07NBR),DXDDWORD+4
         B     FREE0120
FREE0060 DS    0H
         MVI   REQSTAT,$REQMBIG      MEMBER SIZE > MEM SIZE PARAMETER
         MVC   PRTMSGID(MSG08L),MSG08 DUMP SUCCESSFUL
         MVC   PRTMSGID+(MSG08NDE-MSG08)(L'MSG08NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG08NBR-MSG08)(L'MSG08NBR),DXDDWORD+4
         MVC   PRTMSGID+(MSG08DSN-MSG08)(L'MSG08DSN),REQODSNM
         MVC   PRTMSGID+(MSG08MEM-MSG08)(L'MSG08MEM),REQOMEM
         B     FREE0120
FREE0070 DS    0H
         MVI   REQSTAT,$REQDERR      ERROR DURING DUMP
         MVC   PRTMSGID(MSG09L),MSG09 DUMP FAILED
         MVC   PRTMSGID+(MSG09NDE-MSG09)(L'MSG09NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG09NBR-MSG09)(L'MSG09NBR),DXDDWORD+4
         B     FREE0120
FREE0080 DS    0H
         MVI   REQSTAT,$REQMEMX      MEMBER NOT FOUND
         MVC   PRTMSGID(MSG10L),MSG10
         MVC   PRTMSGID+(MSG10NDE-MSG10)(L'MSG10NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG10NBR-MSG10)(L'MSG10NBR),DXDDWORD+4
         MVC   PRTMSGID+(MSG10DSN-MSG10)(L'MSG10DSN),REQODSNM
         MVC   PRTMSGID+(MSG10MEM-MSG10)(L'MSG10MEM),REQOMEM
         B     FREE0120
FREE0090 DS    0H
         CLI   DRR15,X'FF'           RESTORE ABEND?
         BE    FREE0100              YES
         CLC   DRR15,H4              RESTORE SUCCESSFUL?
         BH    FREE0110              NO
         MVI   REQSTAT,$REQRSTC      RESTORE COMPLETE
         TIME  DEC
         STCM  R1,15,REQCDATE        SET DATE COMPLETED
         STCM  R0,15,REQCTIME        SET TIME COMPLETED
         MVC   PRTMSGID(MSG11L),MSG11 RESTORE SUCCESSFUL
         MVC   PRTMSGID+(MSG11NDE-MSG11)(L'MSG11NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG11NBR-MSG11)(L'MSG11NBR),DXDDWORD+4
         B     FREE0120
FREE0100 DS    0H
         MVI   REQSTAT,$REQPFUL      OUTPUT PDS IS FULL
         MVC   PRTMSGID(MSG12L),MSG12 RESTORE SUCCESSFUL
         MVC   PRTMSGID+(MSG12NDE-MSG12)(L'MSG12NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG12NBR-MSG12)(L'MSG12NBR),DXDDWORD+4
         MVC   PRTMSGID+(MSG12DSN-MSG12)(L'MSG12DSN),REQDDSNM
         MVC   PRTMSGID+(MSG12MEM-MSG12)(L'MSG12MEM),REQOMEM
         B     FREE0120
FREE0110 DS    0H
         MVI   REQSTAT,$REQRERR      ERROR DURING RESTORE
         MVC   PRTMSGID(MSG13L),MSG13 RESTORE FAILED
         MVC   PRTMSGID+(MSG13NDE-MSG13)(L'MSG13NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG13NBR-MSG13)(L'MSG13NBR),DXDDWORD+4
FREE0120 DS    0H
         BAL   R6,PRT0000            PRINT MESSAGE
         MVI   MSTRCMD,$MSTRWRT      'WRITE' A RECORD
         BAL   R6,MSTR0000           LINK TO MASTER FILE I/O
         BR    R5                    RETURN
* ------------------------------------------------------------------- *
*                                                                     *
*        Punch DF/DSS or IEBCOPY control statements                   *
*                                                                     *
* ------------------------------------------------------------------- *
PUNCH000 DS    0H
         LA    R0,IO24                DATA TO BE PUNCHED
         ST    R0,IOA24               SET I/O AREA ADDRESS
         FX24  $PUT                   CALL PUT
         MVI   IO24,C' '              CLEAR FIRST BYTE
         MVC   IO24+1(L'IO24-1),IO24  CLEAR I/O AREA
         BR    R6
* ------------------------------------------------------------------- *
*                                                                     *
*        Link to FXSDAIR                                              *
*                                                                     *
* ------------------------------------------------------------------- *
DAIR0000 DS    0H
         ITRACE ID=CALLDAIR,         CALLING DAIR                      +
               DATA1=DAIRREQ
         FXCALL FXSDAIR              LINK TO FXSDAIR
         BR    R6                    RETURN
* ------------------------------------------------------------------- *
*                                                                     *
*        Master file I/O                                              *
*                                                                     *
* ------------------------------------------------------------------- *
MSTR0000 DS    0H
         ITRACE ID=CALLMSTR,         TRACE CALLS TO MASTER FILE        +
               DATA1=DXDREC#,        .. ADDRESS OF REQUEST BLOCK       +
               DATA2=MSTRCMD         .. COMMAND
         FXCALL FXSMSTR,,DXDREC#     LINK TO MASTER FILE I/O
         LA    R7,MSTRRECD           DATA'S ADDRESS
         BR    R6                    RETURN
* ------------------------------------------------------------------- *
*                                                                     *
*        Printing                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
PRT0000  DS    0H
         ITRACE ID=PRINT
         FXCALL PRTQ,PRINT           ADD REQUEST TO PRINT QUEUE
         BR    R6                    RETURN
* ------------------------------------------------------------------- *
*        Error routines                                               *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         ITRACE ID=NODSN             VOLSER WITH NO KNOWN DATA SET NAME
         ABEND $U0012,DUMP,,USER     DON'T CONTINUE FURTHER
ERR0020  DS    0H
         ITRACE ID=BADDSORG          DATA SET ORG IS NOT SUPPORTED
         MVI   REQSTAT,$REQXORG      SET STATUS
         MVI   MSTRCMD,$MSTRWRT      SET COMMAND (WRITE)
         BAL   R6,MSTR0000           UPDATE MASTER RECORD
         MVC   PRTMSGID(MSG14L),MSG14
         MVC   PRTMSGID+(MSG14NDE-MSG14)(L'MSG14NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG14NBR-MSG14)(L'MSG14NBR),DXDDWORD+4
         MVC   PRTMSGID+(MSG14DSN-MSG14)(L'MSG14DSN),DXDDSN
         BAL   R6,PRT0000            PRINT MESSAGE
         B     STGE0100              READ NEXT MASTER FILE RECORD
ERR0030  DS    0H
         ITRACE ID=DSNMINUS          DSN NAME LENGTH IS ZERO OR MINUS
         MVI   REQSTAT,$REQDSN0      SET STATUS
         MVI   MSTRCMD,$MSTRWRT      SET COMMAND (WRITE)
         BAL   R6,MSTR0000           UPDATE MASTER RECORD
         MVC   PRTMSGID(MSG15L),MSG15
         MVC   PRTMSGID+(MSG15NDE-MSG15)(L'MSG15NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG15NBR-MSG15)(L'MSG15NBR),DXDDWORD+4
         MVC   PRTMSGID+(MSG15DSN-MSG15)(L'MSG15DSN),REQODSNM
         BAL   R6,PRT0000            PRINT MESSAGE
         B     STGE0100              READ NEXT MASTER FILE RECORD
ERR0040  DS    0H
         ITRACE ID=DSNOTFND          DATA SET NOT FOUND (NOT CATALOGED)
         FX24  $CLOSE                CALL CLOSE
         MVI   REQSTAT,$REQDSNF      SET STATUS
         MVI   MSTRCMD,$MSTRWRT      SET COMMND (WRITE)
         BAL   R6,MSTR0000           UPDATE MASTER RECORD
         MVC   PRTMSGID(MSG16L),MSG16
         MVC   PRTMSGID+(MSG16NDE-MSG16)(L'MSG16NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG16NBR-MSG16)(L'MSG16NBR),DXDDWORD+4
         MVC   PRTMSGID+(MSG16DSN-MSG16)(L'MSG16DSN),REQODSNM
         BAL   R6,PRT0000            PRINT MESSAGE
         B     STGE0100              READ NEXT MASTER FILE RECORD
ERR0050  DS    0H
         ITRACE ID=DSNSZ0            DATA SET SIZE IS ZERO..
         ABEND $U0060,DUMP,,USER     TIME TO FIND OUT WHY
ERR0060  DS    0H
         ITRACE ID=TOOBIG            DATA SET SIZE EXCEEDS MAX ALLOWED
         MVI   REQSTAT,$REQBIG       SET STATUS
         MVI   MSTRCMD,$MSTRWRT      SET COMMND (WRITE)
         BAL   R6,MSTR0000           UPDATE MASTER RECORD
         MVC   PRTMSGID(MSG17L),MSG17
         MVC   PRTMSGID+(MSG17NDE-MSG17)(L'MSG17NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG17NBR-MSG17)(L'MSG17NBR),DXDDWORD+4
         MVC   PRTMSGID+(MSG17DSN-MSG17)(L'MSG17DSN),REQODSNM
         BAL   R6,PRT0000            PRINT MESSAGE
         B     STGE0100              READ NEXT MASTER FILE RECORD
ERR0070  DS    0H
         ITRACE ID=FREEFAIL          UN-ALLOCATE FAILED
         MVC   PRTMSGID(MSG18L),MSG18
         MVC   PRTMSGID+(MSG18DD-MSG18)(L'MSG18DD),DXDWORK
         UNPK  PRTMSGID+(MSG18R15-MSG18)(5),DAIRR15(3)
         MVZ   PRTMSGID+(MSG18R15-MSG18)(4),HEX0000
         TR    PRTMSGID+(MSG18R15-MSG18)(4),HEXCHAR
         MVI   PRTMSGID+(MSG18R15-MSG18)+4,C' '
         UNPK  PRTMSGID+(MSG18ERR-MSG18)(5),DAIRERR(3)
         MVZ   PRTMSGID+(MSG18ERR-MSG18)(4),HEX0000
         TR    PRTMSGID+(MSG18ERR-MSG18)(4),HEXCHAR
         MVI   PRTMSGID+(MSG18ERR-MSG18)+4,C' '
         UNPK  PRTMSGID+(MSG18INF-MSG18)(5),DAIRINFO(3)
         MVZ   PRTMSGID+(MSG18INF-MSG18)(4),HEX0000
         TR    PRTMSGID+(MSG18INF-MSG18)(4),HEXCHAR
         MVI   PRTMSGID+(MSG18INF-MSG18)+4,C' '
         BAL   R6,PRT0000            PRINT MESSAGE
         ABEND $U0094,DUMP,,USER
ERR0080  DS    0H
         ITRACE ID=NOREQX37          IEBCOPY X37 WITH NO DRREQ
         ABEND $U0098,DUMP,,USER
ERR0090  DS    0H
         ITRACE ID=ATTCHFAIL         IEBCOPY ATTACH FAILED
         ABEND $U0099,DUMP,,USER
ERR0100  DS    0H
         ITRACE ID=NOTPDS            DATA SET NOT A PDS
         MVI   REQSTAT,$REQNPDS      SET STATUS
         MVI   MSTRCMD,$MSTRWRT      SET COMMND (WRITE)
         BAL   R6,MSTR0000           UPDATE MASTER RECORD
         MVC   PRTMSGID(MSG19L),MSG19
         MVC   PRTMSGID+(MSG19NDE-MSG19)(L'MSG19NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG19NBR-MSG19)(L'MSG19NBR),DXDDWORD+4
         MVC   PRTMSGID+(MSG19DSN-MSG19)(L'MSG19DSN),REQODSNM
         MVC   PRTMSGID+(MSG19MEM-MSG19)(L'MSG19MEM),REQOMEM
         BAL   R6,PRT0000            PRINT MESSAGE
         B     STGE0100              READ NEXT MASTER FILE RECORD
ERR0110  DS    0H
         ITRACE ID=VOLZERO           VOLSER NOT FOUND
         ABEND $U0102,DUMP,,USER
ERR0120  DS    0H
         ITRACE ID=DELFAIL           DELETE FAILED
         MVC   PRTMSGID(MSG20L),MSG20
         MVC   PRTMSGID+(MSG20DD-MSG20)(L'MSG20DD),DXDWORK
         UNPK  PRTMSGID+(MSG20R15-MSG20)(5),DAIRR15(3)
         MVZ   PRTMSGID+(MSG20R15-MSG20)(4),HEX0000
         TR    PRTMSGID+(MSG20R15-MSG20)(4),HEXCHAR
         MVI   PRTMSGID+(MSG20R15-MSG20)+4,C' '
         UNPK  PRTMSGID+(MSG20ERR-MSG20)(5),DAIRERR(3)
         MVZ   PRTMSGID+(MSG20ERR-MSG20)(4),HEX0000
         TR    PRTMSGID+(MSG20ERR-MSG20)(4),HEXCHAR
         MVI   PRTMSGID+(MSG20ERR-MSG20)+4,C' '
         UNPK  PRTMSGID+(MSG20INF-MSG20)(5),DAIRINFO(3)
         MVZ   PRTMSGID+(MSG20INF-MSG20)(4),HEX0000
         TR    PRTMSGID+(MSG20INF-MSG20)(4),HEXCHAR
         MVI   PRTMSGID+(MSG20INF-MSG20)+4,C' '
         BAL   R6,PRT0000            PRINT MESSAGE
         ABEND $U0103,DUMP,,USER
ERR0130  DS    0H
         MVC   PRTMSGID(MSG21L),MSG21
         MVC   PRTMSGID+(MSG21DD-MSG21)(L'MSG21DD),DXDWORK
         UNPK  PRTMSGID+(MSG21R15-MSG21)(5),DAIRR15(3)
         MVZ   PRTMSGID+(MSG21R15-MSG21)(4),HEX0000
         TR    PRTMSGID+(MSG21R15-MSG21)(4),HEXCHAR
         MVI   PRTMSGID+(MSG21R15-MSG21)+4,C' '
         UNPK  PRTMSGID+(MSG21ERR-MSG21)(5),DAIRERR(3)
         MVZ   PRTMSGID+(MSG21ERR-MSG21)(4),HEX0000
         TR    PRTMSGID+(MSG21ERR-MSG21)(4),HEXCHAR
         MVI   PRTMSGID+(MSG21ERR-MSG21)+4,C' '
         UNPK  PRTMSGID+(MSG21INF-MSG21)(5),DAIRINFO(3)
         MVZ   PRTMSGID+(MSG21INF-MSG21)(4),HEX0000
         TR    PRTMSGID+(MSG21INF-MSG21)(4),HEXCHAR
         MVI   PRTMSGID+(MSG21INF-MSG21)+4,C' '
         ABEND $U0104,DUMP,,USER
ERR0140  DS    0H
         ITRACE ID=NODEV             VOLSER NOT ON ANY DEVICE
         CLC   MIGRAT,0(R1)          MIGRATED?
         BE    ERR0150               YES
         MVI   REQSTAT,$REQNDEV      SET STATUS
         MVI   MSTRCMD,$MSTRWRT      SET COMMND (WRITE)
         BAL   R6,MSTR0000           UPDATE MASTER RECORD
         MVC   PRTMSGID(MSG22L),MSG22
         MVC   PRTMSGID+(MSG22NDE-MSG22)(L'MSG22NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG22NBR-MSG22)(L'MSG22NBR),DXDDWORD+4
         MVC   PRTMSGID+(MSG22DSN-MSG22)(L'MSG22DSN),REQODSNM
         BAL   R6,PRT0000            PRINT MESSAGE
         B     STGE0100              READ NEXT MASTER FILE RECORD
ERR0150  DS    0H
         ITRACE ID=MIGRAT            DATA IS MIGRATED
         MVI   REQSTAT,$REQMIG       SET STATUS
         MVI   MSTRCMD,$MSTRWRT      SET COMMND (WRITE)
         BAL   R6,MSTR0000           UPDATE MASTER RECORD
         MVC   PRTMSGID(MSG23L),MSG23
         MVC   PRTMSGID+(MSG23NDE-MSG23)(L'MSG23NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG23NBR-MSG23)(L'MSG23NBR),DXDDWORD+4
         MVC   PRTMSGID+(MSG23DSN-MSG23)(L'MSG23DSN),REQODSNM
         BAL   R6,PRT0000            PRINT MESSAGE
         B     STGE0100              READ NEXT MASTER FILE RECORD
ERR0160  DS    0H
         ITRACE ID=NOTDASD           DATA NOT ON A DASD DEVICE
         MVI   REQSTAT,$REQNDA       SET STATUS
         MVI   MSTRCMD,$MSTRWRT      SET COMMND (WRITE)
         BAL   R6,MSTR0000           UPDATE MASTER RECORD
         MVC   PRTMSGID(MSG24L),MSG24
         MVC   PRTMSGID+(MSG24NDE-MSG24)(L'MSG24NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG24NBR-MSG24)(L'MSG24NBR),DXDDWORD+4
         MVC   PRTMSGID+(MSG24DSN-MSG24)(L'MSG24DSN),REQODSNM
         BAL   R6,PRT0000            PRINT MESSAGE
         B     STGE0100              READ NEXT MASTER FILE RECORD
ERR0170  DS    0H
         ITRACE ID=OFFLINE           VOLUME IS OFFLINE
         MVI   REQSTAT,$REQOFFL      SET STATUS
         MVI   MSTRCMD,$MSTRWRT      SET COMMND (WRITE)
         BAL   R6,MSTR0000           UPDATE MASTER RECORD
         MVC   PRTMSGID(MSG25L),MSG25
         MVC   PRTMSGID+(MSG25NDE-MSG25)(L'MSG25NDE),REQENODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         ED    PRTMSGID+(MSG25NBR-MSG25)(L'MSG25NBR),DXDDWORD+4
         MVC   PRTMSGID+(MSG25DSN-MSG25)(L'MSG25DSN),REQODSNM
         BAL   R6,PRT0000            PRINT MESSAGE
         B     STGE0100              READ NEXT MASTER FILE RECORD
* ------------------------------------------------------------------- *
*        Exit                                                         *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         OC    DXDIDCEP,DXDIDCEP     IDCAMS LOADED?
         BZ    EXIT0010              NO
         ITRACE ID=DELIDCAMS
         DELETE EP=IDCAMS            DELETE IDCAMS
         XC    DXDIDCEP,DXDIDCEP     CLEAR ADDRESS
EXIT0010 DS    0H
         ICM   R1,15,DXDIDCI         IDCAMS SYSIN DCB ADDRESS
         BZ    EXIT0020              NO ADDRESS
         FREEMAIN RU,A=(1),LV=IDCIL  FREEMAIN DCB
EXIT0020 DS    0H
         ICM   R1,15,DXDIDCP         IDCAMS SYSPRINT DCB ADDRESS
         BZ    EXIT0030              NO ADDRESS
         FREEMAIN RU,A=(1),LV=IDCPL  FREEMAIN DCB
EXIT0030 DS    0H
         ICM   R8,15,DXD24           24-BIT PARM AREA ADDRESS
         BZ    EXIT0040              NO ADDRESS
         FREEMAIN RU,A=(R8),LV=FX24L
EXIT0040 DS    0H
         ITRACE ID=EXIT              EXITING PRINT MODULE
         L     R13,4(R13)            RESTORE REGISTER 13
         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS
         SR    R15,R15               GIVE GOOD RETURN CODE
         BR    R14                   RETURN TO CALLER
RSTRCLC  CLC   RSTRDSN(0),DXDDSN     PREFIX MATCH?
* ------------------------------------------------------------------- *
*                                                                     *
*        Constants                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
AIDCII   DC    A(IDCII)              SYSIN DCB ADDRESS
AIDCPI   DC    A(IDCPI)              SYSPRINT DCB ADDRESS
IDCPRM   DS    0A
         DC    A(H0)
         DC    A(DDNLIST+X'80000000')
H0       DC    H'0'
DDNLIST  DC    AL2(DDNLISTL)
         DC    XL8'00000000'
         DC    XL8'00000000'
         DC    XL8'00000000'
         DC    XL8'00000000'
         DC    CL8'IDCI'
         DC    CL8'IDCP'
DDNLISTL EQU   *-DDNLIST
IDCPRML  EQU   *-IDCPRM
H2       DC    H'2'
H4       DC    H'4'
H5       DC    H'5'
H21      DC    H'21'
H44      DC    H'44'
ATTCHI   ATTACH EP=FXSCOPY,           ATTACH LIST FORM                 +
               ECB=*,                 .. TERMINATION ECB'S ADDRESS     +
               PURGE=QUIESCE,         .. FINISH UP I/O IN PROGRESS     +
               SF=L                   .. LIST FORM
ATTCHL   EQU   *-ATTCHI
HEX0000  DC    8X'00'
HEXCHAR  DC    C'0123456789ABCDEF'
IDC3012I DC    C'IDC3012I'
NONVSAM  DC    C'NONVSAM -'
DATA     DC    C'DATA -'
DEFAULT  DC    C'DEFAULT'
INDEX    DC    C'INDEX -'
VOLSER   DC    C'VOLSER-'
RESVOL   DC    CL6'******'
DRREQID  DC    CL8'DRREQ'
MIGRAT   DC    CL6'MIGRAT'
PDS      DC    CL8'PDS'
STAGING  DC    CL8'STAGING'
SYSIN    DC    CL8'SYSIN'
SYSPRINT DC    CL8'SYSPRINT'
SUMMARY  DC    C'THE NUMBER OF ENTRIES PROCESSED WAS:'
LISTC1   DC    C' LISTCAT -'
LISTC1L  EQU   *-LISTC1
LISTC2   DC    C'    ENTRIES ( '
LISTC2NM DC    CL44' '
         DC    C' ) -'
LISTC2L  EQU   *-LISTC2
LISTC3   DC    C'    VOLUMES'
LISTC3L  EQU   *-LISTC3
MSG01    DS    0C
         DC    CL11'FXSSTGE01I'
         DC    C'IEBCOPY ABENDED X37 ON REQUEST '
MSG01NDE DC    CL8' '
         DC    C' '
MSG01NBR DC    X'4021202020202020'
         DC    C' '
MSG01DSN DC    CL44' '
         DC    C' '
MSG01MEM DC    CL8' '
MSG01L   EQU   *-MSG01
MSG02    DS    0C
         DC    CL11'FXSSTGE02I'
         DC    C'IEBCOPY SUBTASK RE-ATTACHED'
MSG02L   EQU   *-MSG02
MSG03    DS    0C
         DC    CL11'FXSSTGE03E'
         DC    C'NO ''RESTORE'' STATEMENT FOUND FOR REQEUEST '
MSG03NDE DC    CL8' '
MSG03NBR DC    XL8'4021202020202020'
         DC    C' '
MSG03DSN DC    CL44' '
MSG03L   EQU   *-MSG03
MSG04    DS    0C
         DC    CL11'FXSSTGE04E'
         DC    C'ERROR ALLOCATING '
MSG04DD  DC    CL8' '
         DC    C' DAIR R15='
MSG04R15 DC    CL4' '
         DC    C' ERROR='
MSG04ERR DC    CL4' '
         DC    C' INFO='
MSG04INF DC    CL4' '
         DC    C' '
MSG04L   EQU   *-MSG04
MSG05    DS    0C
         DC    CL11'FXSSTGE05I'
         DC    C'DUMP FOR REQUEST '
MSG05NDE DC    CL8' '
MSG05NBR DC    XL8'4021202020202020'
         DC    C' QUEUED TO DUMP SUBTASK'
MSG05L   EQU   *-MSG05
MSG06    DS    0C
         DC    CL11'FXSSTGE06I'
         DC    C'RESTORE FOR REQUEST '
MSG06NDE DC    CL8' '
MSG06NBR DC    XL8'4021202020202020'
         DC    C' QUEUED TO RESTORE SUBTASK'
MSG06L   EQU   *-MSG06
MSG07    DS    0C
         DC    CL11'FXSSTGE07I'
         DC    C'DUMP SUCCESSFUL FOR REQUEST '
MSG07NDE DC    CL8' '
MSG07NBR DC    XL8'4021202020202020'
MSG07L   EQU   *-MSG07
MSG08    DS    0C
         DC    CL11'FXSSTGE08I'
         DC    C'MEMBER SIZE EXCEEDS MEM SIZE PARAMETER '
MSG08NDE DC    CL8' '
MSG08NBR DC    XL8'4021202020202020'
         DC    C' '
MSG08DSN DC    CL44' '
         DC    C' '
MSG08MEM DC    CL8' '
MSG08L   EQU   *-MSG08
MSG09    DS    0C
         DC    CL11'FXSSTGE09E'
         DC    C'DUMP FAILED FOR REQUEST '
MSG09NDE DC    CL8' '
MSG09NBR DC    XL8'4021202020202020'
MSG09L   EQU   *-MSG09
MSG10    DS    0C
         DC    CL11'FXSSTGE10E'
         DC    C'MEMBER NOT FOUND '
MSG10NDE DC    CL8' '
MSG10NBR DC    XL8'4021202020202020'
         DC    C' '
MSG10DSN DC    CL44' '
         DC    C' '
MSG10MEM DC    CL8' '
MSG10L   EQU   *-MSG10
MSG11    DS    0C
         DC    CL11'FXSSTGE11I'
         DC    C'RESTORE SUCCESSFUL FOR REQUEST '
MSG11NDE DC    CL8' '
MSG11NBR DC    XL8'4021202020202020'
MSG11L   EQU   *-MSG11
MSG12    DS    0C
         DC    CL11'FXSSTGE12I'
         DC    C'OUTPUT DATA SET FULL '
MSG12NDE DC    CL8' '
MSG12NBR DC    XL8'4021202020202020'
         DC    C' '
MSG12DSN DC    CL44' '
         DC    C' '
MSG12MEM DC    CL8' '
MSG12L   EQU   *-MSG12
MSG13    DS    0C
         DC    CL11'FXSSTGE13E'
         DC    C'RESTORE FAILED FOR REQUEST '
MSG13NDE DC    CL8' '
MSG13NBR DC    XL8'4021202020202020'
MSG13L   EQU   *-MSG13
MSG14    DS    0C
         DC    CL11'FXSSTGE14E'
         DC    C'UNSUPPORTED DATA SET ORG '
MSG14NDE DC    CL8' '
MSG14NBR DC    XL8'4021202020202020'
         DC    C', DSN='
MSG14DSN DC    CL44' '
MSG14L   EQU   *-MSG14
MSG15    DS    0C
         DC    CL11'FXSSTGE15E'
         DC    C'DATA SET NAME LENGTH IS ZERO OR NEGATIVE '
MSG15NDE DC    CL8' '
MSG15NBR DC    XL8'4021202020202020'
         DC    C', DSN='
MSG15DSN DC    CL44' '
MSG15L   EQU   *-MSG15
MSG16    DS    0C
         DC    CL11'FXSSTGE16E'
         DC    C'DATA SET NOT CATALOGED, REQUEST '
MSG16NDE DC    CL8' '
MSG16NBR DC    XL8'4021202020202020'
         DC    C' '
MSG16DSN DC    CL44' '
         DC    C' CANCELLED'
MSG16L   EQU   *-MSG16
MSG17    DS    0C
         DC    CL11'FXSSTGE17E'
         DC    C'DATA SET SIZE EXCEEDS MAX ALLOWED, REQUEST '
MSG17NDE DC    CL8' '
MSG17NBR DC    XL8'4021202020202020'
         DC    C' '
MSG17DSN DC    CL44' '
         DC    C' CANCELLED'
MSG17L   EQU   *-MSG17
MSG18    DS    0C
         DC    CL11'FXSSTGE18E'
         DC    C'ERROR DEALLOCATING '
MSG18DD  DC    CL8' '
         DC    C' DAIR R15='
MSG18R15 DC    CL4' '
         DC    C' ERROR='
MSG18ERR DC    CL4' '
         DC    C' INFO='
MSG18INF DC    CL4' '
         DC    C' '
MSG18L   EQU   *-MSG18
MSG19    DS    0C
         DC    CL11'FXSSTGE19E'
         DC    C'DATA SET IS NOT A PDS '
MSG19NDE DC    CL8' '
MSG19NBR DC    XL8'4021202020202020'
         DC    C' '
MSG19DSN DC    CL44' '
         DC    C' '
MSG19MEM DC    CL8' '
MSG19L   EQU   *-MSG19
MSG20    DS    0C
         DC    CL11'FXSSTGE20E'
         DC    C'ERROR DELETING '
MSG20DD  DC    CL8' '
         DC    C' DAIR R15='
MSG20R15 DC    CL4' '
         DC    C' ERROR='
MSG20ERR DC    CL4' '
         DC    C' INFO='
MSG20INF DC    CL4' '
         DC    C' '
MSG20L   EQU   *-MSG20
MSG21    DS    0C
         DC    CL11'FXSSTGE221'
         DC    C'ERROR ALLOCATING '
MSG21DD  DC    CL8' '
         DC    C' FOR READ-BACK, DAIR R15='
MSG21R15 DC    CL4' '
         DC    C' ERROR='
MSG21ERR DC    CL4' '
         DC    C' INFO='
MSG21INF DC    CL4' '
         DC    C' '
MSG21L   EQU   *-MSG21
MSG22    DS    0C
         DC    CL11'FXSSTGE22E'
         DC    C'VOLUME CONTAINING THE DATA IS NOT ON ANY DEVICE '
MSG22NDE DC    CL8' '
MSG22NBR DC    XL8'4021202020202020'
         DC    C' '
MSG22DSN DC    CL44' '
         DC    C' CANCELLED'
MSG22L   EQU   *-MSG22
MSG23    DS    0C
         DC    CL11'FXSSTGE23E'
         DC    C'DATA SET IS MIGRATED '
MSG23NDE DC    CL8' '
MSG23NBR DC    XL8'4021202020202020'
         DC    C' '
MSG23DSN DC    CL44' '
         DC    C' CANCELLED'
MSG23L   EQU   *-MSG23
MSG24    DS    0C
         DC    CL11'FXSSTGE24E'
         DC    C'DATA SET IS NOT ON A DASD DEVICE '
MSG24NDE DC    CL8' '
MSG24NBR DC    XL8'4021202020202020'
         DC    C' '
MSG24DSN DC    CL44' '
         DC    C' CANCELLED'
MSG24L   EQU   *-MSG24
MSG25    DS    0C
         DC    CL11'FXSSTGE25E'
         DC    C'DATA SET IS ON AN OFFLINE DEVICE '
MSG25NDE DC    CL8' '
MSG25NBR DC    XL8'4021202020202020'
         DC    C' '
MSG25DSN DC    CL44' '
         DC    C' CANCELLED'
MSG25L   EQU   *-MSG25
         LTORG
IDCII    DCB   DSORG=PS,             IDCAMS SYSIN DCB                  +
               DDNAME=IDCI,                                            +
               RECFM=FB,                                               +
               LRECL=80,                                               +
               BLKSIZE=3120,                                           +
               MACRF=PM
IDCIL    EQU   *-IDCII
IDCPI    DCB   DSORG=PS,             IDCAMS SYSPRINT DCB               +
               DDNAME=IDCP,                                            +
               RECFM=VBA,                                              +
               LRECL=125,                                              +
               BLKSIZE=3120,                                           +
               EODAD=*,                                                +
               MACRF=GL
IDCPL    EQU   *-IDCPI
* ------------------------------------------------------------------- *
*                                                                     *
*        Work areas                                                   *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSSTGE DSECT
DXDID    DS    CL8                   WORK AREA OWNER ID
DXDSAVE  DS    18F                   REGISTER SAVE AREA
DXDDWORD DS    D                     CVD/CVB WORK AREA
DXDAPARM DS    A                     ATTACH PARM
DXDIDCEP DS    A                     IDCAMS ENTRY POINT ADDRESS
DXDIDCI  DS    A                     IDCAMS SYSIN DCB ADDRESS
DXDIDCP  DS    A                     IDCAMS SYSPRINT DCB ADDRESS
DXD24    DS    A                     24-BIT PARM LIST ADDRESS
DXDRSTR  DS    A                     RESTORE BLOCK'S ADDRESS
DXDDSNSZ DS    F                     DATA SET SIZE IN BYTES
DXDATTCH DS    (ATTCHL)X             RESERVE ROOM FOR ATTACH LIST FORM
DXDREC#  DS    H                     CURRENT RECORD NUMBER
DXDFLAG  DS    X'00'
$NONVSAM EQU   X'80'                 .. NONVSAM DATA SET
$CLUSTER EQU   X'40'                 .. VSAM CLUSTER
$DATA    EQU   X'20'                 .. DATA COMPONENT FOUND
$INDEX   EQU   X'10'                 .. INDEX FOUND
$DSS     EQU   X'08'                 .. DF/DSS SUBTASK IS BUSY
$COPY    EQU   X'04'                 .. IEBCOPY SUBTASK IS BUSY
DXDSTAGE DS    CL8                   STAGING DATA SET'S DDNAME
DXDPDS   DS    CL8                   PDS DATA SET'S DDNAME (IEBCOPY)
DXDINDD  DS    CL8                   DF/DSS SYSIN DATA SET DDNAME
DXDPRTDD DS    CL8                   DF/DSS SYSPRINT DATA SET DDNAME
DXDDSN   DS    CL44                  DATA SET NAME
DXDWORK  DS    CL8
         DAIRREQ  DSECT=NO
         MSTRREQ  DSECT=NO
         PRTBLOK  DSECT=NO
         VTOCREQ  DSECT=NO
* ------------------------------------------------------------------- *
*              Master file record format                              *
* ------------------------------------------------------------------- *
         REQBLOK  DSECT=YES
* ------------------------------------------------------------------- *
*              DF/DSS Dump/Restore request block                      *
* ------------------------------------------------------------------- *
         DRREQ    DSECT=YES
* ------------------------------------------------------------------- *
*              Common data map                                        *
* ------------------------------------------------------------------- *
         FXSCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*              Restore block map                                      *
* ------------------------------------------------------------------- *
         RSTRBLOK DSECT=YES
* ------------------------------------------------------------------- *
*              24-bit module parm list                                *
* ------------------------------------------------------------------- *
         FX24PRM DSECT=YES
* ------------------------------------------------------------------- *
*              CVT                                                    *
* ------------------------------------------------------------------- *
         CVT      DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*              UCB                                                    *
* ------------------------------------------------------------------- *
         IEFUCBOB LIST=NO
* ------------------------------------------------------------------- *
*              EQUATES                                                *
* ------------------------------------------------------------------- *
         COPY REGEQU
         ABCODES
         END  FXSSTGE
./ ADD NAME=FXSTIMER 0100-99056-99056-1500-00096-00096-00000-FX-REL1

         TITLE 'TIMER EXIT'
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXSTIMER                                              *
*                                                                     *
*  Timer exit.  If FX has a request to send to a destination that is  *
*  not available, the status to that node is set to 'error'.  FX will *
*  not try to contact that node again for 1 minute.  Each time a VTAM *
*  event occurs, or a dump or restore completes, FX scans the master  *
*  file looking for requests that it has in transmit ready state. If  *
*  no users are logged on, no FX-to-FX send or receive is active, and *
*  no dump or restore activity is in progress, FX needs to be "woke   *
*  up" periodically to find out if the destination has become active. *
*  Just before the mainline issues its WAIT, it sets the TIMER, and   *
*  has an ECB in the wait list for this exit to POST.  If some other  *
*  event occurs first, the mainline will cancel the timer.  If no     *
*  event occurs, this exit is scheduled by the system.  This exit     *
*  posts the ECB in the wait list to wake-up the mainline.            *
*                                                                     *
* ------------------------------------------------------------------- *
FXSTIMER CSECT
FXSTIMER AMODE 31
FXSTIMER RMODE ANY
         STM   R14,R12,12(R13)       SAVE CALLER'S REGISTERS
         LR    R12,R15               COPY BASE ADDRESS
         USING FXSTIMER,R12          DEFINE BASE
         B     TIMER010              SKIP ADDRESS AND EYECATCHER
         DC    ((PFXMODNM-MODPRFX)-(*-FXSTIMER))X'00'
         DC    CL8'FXSTIMER'         MODULE NAME
         DC    C'&SYSDATE'           DATE OF ASSEMBLY
         DC    C'&SYSTIME'           TIME OF ASSEMBLY
TIMER010 DS    0H
         GETMAIN RU,LV=72            ACQUIRE REGISTER SAVE AREA
         ST    R1,8(R13)             CHAIN NEW TO OLD
         ST    R13,4(R1)             CHAIN OLD TO NEW
         LR    R13,R1                SET SAVE AREA ADDRESS
         USING PSA,R0                DEFINE BASE
         L     R1,PSATNEW            OUR TCB'S ADDRESS
         USING TCB,R1                DEFINE BASE
         SR    R2,R2                 CLEAR REGISTER
         ICM   R2,7,TCBJPQB          LAST (FIRST) CDE
         USING CDENTRY,R2            DEFINE BASE
TIMER020 DS    0H
         CLC   CDNAME,COMMNAME       FXSCOMM?
         BE    TIMER030              YES
         ICM   R2,15,CDCHAIN         NEXT CDE ENTRY
         BNZ   TIMER020              CONTINUE
         ABEND $U0030,DUMP,,USER     FXSCOMM ENTRY NOT FOUND
TIMER030 DS    0H
         L     R11,CDENTPT           FXSCOMM ENTRY POINT ADDRESS
         LA    R11,0(R11)            CLEAR HIGH BIT
         USING FXSCOMM,R11           DEFINE BASE
         C     R11,ACOMM             ADDRESS MATCH?
         BNE   TIMER040              NO.. BAD NEWS
         ITRACE ID=TIME
         LA    R1,COMMTECB           ECB'S ADDRESS
         POST  (1)                   POST THE ECB
         LR    R1,R13                COPY REGISTER SAVE AREA ADDRESS
         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS
         FREEMAIN RU,A=(1),LV=72     FREE REGISTER SAVE AREA
         LM    R14,R12,12(R13)       RESTORE REGISTERS
         SR    R15,R15               SET RETURN CODE
         BR    R14                   RETURN TO CALLER
TIMER040 DS    0H
         ABEND $U0037,DUMP,,USER
* ------------------------------------------------------------------ *
*                                                                    *
*        CONSTANTS                                                   *
*                                                                    *
* ------------------------------------------------------------------ *
COMMNAME DC    CL8'FXSCOMM'
* ------------------------------------------------------------------ *
*              COMMON DATA MAP                                       *
* ------------------------------------------------------------------ *
         FXSCOMM  TYPE=DSECT
* ------------------------------------------------------------------ *
*              PSA                                                   *
* ------------------------------------------------------------------ *
         IHAPSA   DSECT=YES,LIST=NO
* ------------------------------------------------------------------ *
*              TCB                                                   *
* ------------------------------------------------------------------ *
         IKJTCB   DSECT=YES,LIST=NO
* ------------------------------------------------------------------ *
*              CDE                                                   *
* ------------------------------------------------------------------ *
         IHACDE
* ------------------------------------------------------------------ *
*                                                                    *
*              EQUATES                                               *
*                                                                    *
* ------------------------------------------------------------------ *
         COPY REGEQU
         ABCODES
         END  FXSTIMER
./ ADD NAME=FXSUID   0100-99056-99056-1500-00231-00231-00000-FX-REL1

         TITLE 'FXSUID   USER IDENTIFICATION'
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXSUID                                                *
*                                                                     *
*   FX has several "classes" or levels of users.   This identification*
*   is done by the STC end to prevent someone logging on to FX and    *
*   "lying" about their authority or RACF id.  The user's ID and      *
*   authority are used at both ends.  On the user interface end, the  *
*   user will receive different menus depending upon his/her          *
*   authority.  On the STC end the ID is used to verify that the user *
*   has access to datasets requested for transmission.                *
*                                                                     *
*   As of now there are only 3 types of users, 'normal', 'operator',  *
*   and administrator.  READ level access to the resource will give   *
*   the user 'normal' level authority.  UPDATE or CONTROL level       *
*   access will give the user operator authority.  ALTER level access *
*   will give the user administrator authority.                       *
*                                                                     *
* ------------------------------------------------------------------- *
SUID     FXPRFX 'USER IDENTIFICATION'
FXSUID   AMODE 31
FXSUID   RMODE ANY
         USING SESSBLOK,R7           ADDRESS PASSED BY FXSVTAM
         USING CONVBLOK,R6           ADDRESS PASSED BY FXSVTAM
         CLC   DXDID,MODID           WORK AREA INITIALIZED?
         BE    UID0010               YES
         ITRACE ID=INIT
         MVC   DXDID,MODID           WORK AREA INITIALIZED
         MVC   DXDRACL(RACLL),RACLI  INITIALIZE RACLIST
         MVI   PRTCC,C' '            INITIALIZE CARRIAGE CONTROL
         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC
UID0010  DS    0H
         L     R2,CONVIOA            I/O AREA ADDRESS
         USING USERREQ,R2            DEFINE BASE
         MVC   SESSSMF,USERSMF       COPY SMF ID
         MVC   SESSUSER,USERID       COPY USERID
         MVC   SESSJOB,USERJOB       COPY JOB NAME
         ICM   R15,15,COMMXUSR       FIRST EXTERNAL USER BLOCK
         BZ    UID0050               NO EXTERNAL USER BLOCKS
         USING XUSRBLOK,R15          DEFINE BASE
UID0020  DS    0H
         CLC   XUSRSMF,SESSSMF       SAME SMF ID?
         BNE   UID0030               NO
         CLC   XUSRID1,SESSUSER      SAME USER ID?
         BE    UID0040               YES
UID0030  DS    0H
         ICM   R15,15,XUSRNEXT       NEXT EXTERNAL USER ID BLOCK
         BNZ   UID0020               LOOP
         B     UID0050
UID0040  DS    0H
         MVC   SESSUSER,XUSRID2      CHANGE TO LOCAL USER ID
UID0050  DS    0H
         LA    R3,SESSUSER           USER ID ADDRESS
         LA    R4,SAFWORK            SAF WORK AREA ADDRESS
         LA    R5,AUTHCLSL           CLASS LENGTH
         LA    R6,AUTHENT            ENTITY
         ITRACE ID=CHKALTER
         RACROUTE REQUEST=AUTH,      CHECK FOR AUTHORIZATION           +
               ATTR=ALTER,           .. AT ALTER LEVEL                 +
               CLASS=(R5),           .. CLASS                          +
               ENTITY=((R6)),        .. ENTITY                         +
               USERID=(R3),          .. THIRD PARTY CHECK              +
               WORKA=(R4),           .. SAF WORK AREA                  +
               RELEASE=1.8.1,        .. RACF RELEASE                   +
               MF=(E,DXDRACL)        .. EXECUTE FORM/LIST FORM ADDRESS
         ITRACE ID=ALTERRC,          TRACE RETURN FROM ALTER           +
               RDATA1=R15
         LTR   R15,R15               ZERO?
         BNZ   UID0060               NO
         ITRACE ID=ALTEROK
         MVI   SESSUATH,4            SET AUTH LEVEL TO 4
         B     UID0100               PRINT USER AND AUTH LEVEL
UID0060  DS    0H
         ITRACE ID=CHKCONTR
         RACROUTE REQUEST=AUTH,      CHECK FOR AUTHORIZATION           +
               ATTR=CONTROL,         .. AT CONTROL LEVEL               +
               CLASS=(R5),           .. CLASS                          +
               ENTITY=((R6)),        .. ENTITY                         +
               USERID=(R3),          .. THIRD PARTY CHECK              +
               WORKA=(R4),           .. SAF WORK AREA                  +
               RELEASE=1.8.1,        .. RACF RELEASE                   +
               MF=(E,DXDRACL)        .. EXECUTE FORM/LIST FORM ADDRESS
         ITRACE ID=CONTRLRC,         TRACE RETURN FROM CONTROL         +
               RDATA1=R15
         LTR   R15,R15               ZERO?
         BNZ   UID0070               NO
         ITRACE ID=CONTRLOK
         MVI   SESSUATH,2            SET AUTH LEVEL TO 2
         B     UID0100               PRINT USER AND AUTH LEVEL
UID0070  DS    0H
         ITRACE ID=CHKUPDAT
         RACROUTE REQUEST=AUTH,      CHECK FOR AUTHORIZATION           +
               ATTR=UPDATE,          .. AT UPDATE LEVEL                +
               CLASS=(R5),           .. CLASS                          +
               ENTITY=((R6)),        .. ENTITY                         +
               USERID=(R3),          .. THIRD PARTY CHECK              +
               WORKA=(R4),           .. SAF WORK AREA                  +
               RELEASE=1.8.1,        .. RACF RELEASE                   +
               MF=(E,DXDRACL)        .. EXECUTE FORM/LIST FORM ADDRESS
         ITRACE ID=UPDATERC,         TRACE RETURN FROM UPDATE          +
               RDATA1=R15
         LTR   R15,R15               ZERO?
         BNZ   UID0080               NO
         ITRACE ID=UPDATEOK
         MVI   SESSUATH,2            SET AUTH LEVEL TO 2
         B     UID0100               PRINT USER AND AUTH LEVEL
UID0080  DS    0H
         ITRACE ID=CHKREAD
         RACROUTE REQUEST=AUTH,      CHECK FOR AUTHORIZATION           +
               ATTR=READ,            .. AT READ LEVEL                  +
               CLASS=(R5),           .. CLASS                          +
               ENTITY=((R6)),        .. ENTITY                         +
               USERID=(R3),          .. THIRD PARTY CHECK              +
               WORKA=(R4),           .. SAF WORK AREA                  +
               RELEASE=1.8.1,        .. RACF RELEASE                   +
               MF=(E,DXDRACL)        .. EXECUTE FORM/LIST FORM ADDRESS
         ITRACE ID=READRC,           TRACE RETURN FROM READ            +
               RDATA1=R15
         LTR   R15,R15               ZERO?
         BNZ   UID0090               NO
         ITRACE ID=READOK
         MVI   SESSUATH,1            SET AUTH LEVEL TO 1
         B     UID0100               PRINT USER AND AUTH LEVEL
UID0090  DS    0H
         ITRACE ID=AUTHZERO          AUTH LEVEL IS 0
         MVI   SESSUATH,0            SET AUTH LEVEL
UID0100  DS    0H
         MVC   PRTMSGID(MSG01L),MSG01 SET MESSSAGE
         MVC   PRTMSGID+(MSG01USR-MSG01)(L'MSG01USR),SESSUSER
         MVC   PRTMSGID+(MSG01NDE-MSG01)(L'MSG01NDE),SESSNAME
         CLI   SESSUATH,1            NORMAL USER?
         BE    UID0110               YES
         CLI   SESSUATH,2            OPERATOR USER?
         BE    UID0120               YES
         MVC   PRTMSGID+(MSG01ATH-MSG01)(L'MSG01ATH),ADMIN
         B     UID0130
UID0110  DS    0H
         MVC   PRTMSGID+(MSG01ATH-MSG01)(L'MSG01ATH),NORMAL
         B     UID0130
UID0120  DS    0H
         MVC   PRTMSGID+(MSG01ATH-MSG01)(L'MSG01ATH),OPERATOR
UID0130  DS    0H
         FXCALL PRTQ,PRINT           ADD REQUEST TO PRINT QUEUE
EXIT0000 DS    0H
         ITRACE ID=EXIT              EXITING PRINT MODULE
         LA    R0,IDL
         STH   R0,USERLEN            SET LENGTH
         MVC   USERAUTH,SESSUATH     PASS USER AUTH BACK
         MVC   USERSYSN,COMMSYSN     PASS SYSTEM'S NAME BACK ALSO
         MVC   USERID,SESSUSER       RETURN USER ID
         L     R13,4(R13)            RESTORE REGISTER 13
         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS
         SR    R15,R15               GIVE GOOD RETURN CODE
         BR    R14                   RETURN TO CALLER
* ------------------------------------------------------------------ *
*                                                                    *
*        CONSTANTS                                                   *
*                                                                    *
* ------------------------------------------------------------------ *
DXDSTART DC    Q(DXDSUID)            DISPLACEMENT TO WORK AREA
RACLI    RACROUTE REQUEST=AUTH,      RACF AUTHORIZATION INQUIRY        +
               USERID=*,             .. WILL BE A THIRD PARTY CHECK    +
               RELEASE=1.8.1,        .. RACF 1.8.1 FORMAT              +
               LOG=NONE,             .. DON'T LOG FAILURES             +
               MF=L                  .. LIST FORM
RACLL    EQU   *-RACLI
AUTHCLSL DC    AL1(AUTHCLL)          RACF CLASS LENGTH
         DC    C&RACFC               RACF CLASS
AUTHCLL  EQU   *-AUTHCLSL-1
AUTHENT  DC    CL8&RACFE               RACF ENTITY
NORMAL   DC    C'NORMAL       '
OPERATOR DC    C'OPERATOR     '
ADMIN    DC    C'ADMINISTRATOR'
MSG01    DS    0C
         DC    CL11'FXSUID01I'
         DC    C'USER '
MSG01USR DC    CL8' '
         DC    C' ON NODE '
MSG01NDE DC    CL8' '
         DC    C' HAS '
MSG01ATH DC    C'             '
         DC    C' LEVEL AUTHORITY'
MSG01L   EQU   *-MSG01
* ------------------------------------------------------------------ *
*                                                                    *
*        WORK AREAS                                                  *
*                                                                    *
* ------------------------------------------------------------------ *
DXDSUID  DSECT
DXDID    DS    CL8                   WORK AREA OWNER ID
DXDSAVE  DS    18F                   REGISTER SAVE AREA
DXDRACL  DS    (RACLL)X              RACLIST PARM LIST
SAFWORK  DS    (512)X                SAF WORK ARA
         PRTBLOK  DSECT=NO
         LTORG
* ------------------------------------------------------------------ *
*              SESSION BLOCK                                         *
* ------------------------------------------------------------------ *
         SESSBLOK DSECT=YES
* ------------------------------------------------------------------ *
*              CONVERSATION BLOCK                                    *
* ------------------------------------------------------------------ *
         CONVBLOK DSECT=YES
* ------------------------------------------------------------------ *
*              EXTERNAL USER ID BLOCK                                *
* ------------------------------------------------------------------ *
         XUSRBLOK DSECT=YES
* ------------------------------------------------------------------ *
*              USER REQUEST/RESPONSE BLOCK                           *
* ------------------------------------------------------------------ *
         USERREQ
USERSMF  DS    CL4                   USER'S SYSTEM SMFID
USERID   DS    CL8                   USER'S ID
USERJOB  DS    CL8                   JOB NAME IF BATCH
USERAUTH DS    X                     USER AUTHORIZATION LEVEL
USERSYSN DS    CL20                  SYSTEM'S NAME
IDL      EQU   *-USERREQ
* ------------------------------------------------------------------ *
*              COMMON DATA MAP                                       *
* ------------------------------------------------------------------ *
         FXSCOMM  TYPE=DSECT
* ------------------------------------------------------------------ *
*                                                                    *
*              EQUATES                                               *
*                                                                    *
* ------------------------------------------------------------------ *
         COPY REGEQU
         END  FXSUID
./ ADD NAME=FXSVSUB  0100-99056-99056-1500-00447-00447-00000-FX-REL1

         TITLE 'VTAM SUB-FUNCTIONS'
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXSVSUB                                               *
*                                                                     *
*  The VTAM module was very large and cluttered with the actual VTAM  *
*  commands.  Also some of the sub-function modules (request entry,   *
*  request query, shutdown, etc) need to issue VTAM commands.  This   *
*  module contains the actual VTAM macros.                            *
*                                                                     *
* ------------------------------------------------------------------- *
SVSUB    FXPRFX 'VTAM SUBFUNCTIONS'
FXSVSUB  AMODE 31
FXSVSUB  RMODE ANY
         USING SESSBLOK,R7           DEFINE BASE (PASSED BY FXSVTAM)
         USING CONVBLOK,R6           DEFINE BASE (PASSED BY FXSVTAM)
         LR    R8,R1                 COPY PARM BLOCK ADDRESS
         USING VTAMBLOK,R8           DEFINE BASE
         CLC   DXDID,MODID           WORK AREA INITIALIZED?
         BE    VTAM0010              YES
         MVC   DXDID,MODID           WORK AREA INITIALIZED
         MVI   PRTCC,C' '            INITIALIZE PRINT I/O AREA
         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC
         GETMAIN RU,                 ACQUIRE STORAGE FOR RPL           +
               LV=RPLL,              .. SIZE                           +
               LOC=BELOW             .. FROM BELOW THE LINE
         ST    R1,DXDRPL             SAVE RPL'S ADDRESS
         MVC   0(RPLL,R1),RPLI       INITIALIZE RPL
         GETMAIN RU,                 ACQUIRE STORAGE FOR RPL EXTENSION +
               LV=RPLEXTL,           .. SIZE                           +
               LOC=BELOW             .. FROM BELOW THE LINE
         ST    R1,DXDRPLX            SAVE RPL EXTENSION'S ADDRESS
         MVC   0(RPLEXTL,R1),RPLEXTI INITIALIZE RPL EXTENSION
         L     R3,DXDRPL             RPL'S ADDRESS
         USING IFGRPL,R3             DEFINE BASE
         ST    R1,RPLAAREA           SET RPL EXTENSION'S ADDRESS
         L     R2,COMMACB            ACB'S ADDRESS
         ST    R2,RPLDACB            SET ACB'S ADDRESS
         ITRACE ID=OPENACB           OPENING ACB
         MVC   DXDFUNC,OPENACB       LAST FUNCTION IS OPEN
         GETMAIN RU,                 ACQUIRE STORAGE FOR OPEN          +
               LV=OPENL,             .. AREA SIZE                      +
               LOC=BELOW             .. FROM BELOW THE LINE
         LR    R3,R1                 COPY ADDRESS
         MVC   0(OPENL,R3),OPENI     COPY OPEN LIST FORM
         OPEN  ((R2)),MF=(E,(R3))    OPEN ACB
         LR    R2,R15                SAVE RETURN CODE
         FREEMAIN RU,A=(3),LV=OPENL  FREEMAIN OPEN PARM LIST
         LTR   R15,R2                OPEN SUCCESSFUL?
         BNZ   ERR0010               NO
         MVC   PRTMSGID(MSG01L),MSG01 SET MESSAGE
         BAL   R5,PRT0000            PRINT MESSAGE
         ITRACE ID=SETLOGON          ISSUING SETLOGON
         MVC   DXDFUNC,SETLOGON      LAST FUNCTION
         L     R2,COMMACB            ACB'S ADDRESS
         L     R3,DXDRPL             RPL'S ADDRESS
         SETLOGON ACB=(R2),          ISSUE SETLOGON                    +
               RPL=(R3),             .. RPL FOR REQUEST                +
               OPTCD=START           .. ENABLE EXIT
         LTR   R15,R15               SET LOGON SUCCESSFUL?
         BNZ   ERR0010               NO
         LA    R1,DXDSLIM            SESSION LIMIT BLOCK ADDRESS
         USING ISTSLCNS,R1           DEFINE BASE
         XC    ISTSLCNS(SLIML),ISTSLCNS
         MVC   SLCSESSL,H1           SET SESSION LIMIT
         MVC   SLCMCWL,H1            SET OUR SESSION WINNER LIMIT
         MVI   SLCPARMS,SLCSSLU      DO NOT ALLOW PARALLEL SESSIONS
         ITRACE ID=INITDONE
*---------------------------------------------------------------------*
*                                                                     *
*        Process the requested function                               *
*                                                                     *
*---------------------------------------------------------------------*
VTAM0010 DS    0H
         TM    COMMEOJ,$EOJ3         VTAM CLOSE-UP TIME?
         BO    EXIT0000              YES
         CLI   VTAMCMD,$VTAMINT      INITIALIZE?
         BE    EXIT9900              YES
         CLI   VTAMCMD,$VTAMINQ      ISSUE INQUIRE?
         BE    INQ0000               YES
         CLI   VTAMCMD,$VTAMCNS      ISSUE CNOS?
         BE    CNOS0000              YES
         CLI   VTAMCMD,$VTAMALO      ALLOCATE A CONVERSATION?
         BE    ALOC0000              YES
         CLI   VTAMCMD,$VTAMSND      ISSUE A SEND?
         BE    SEND0000              YES
         CLI   VTAMCMD,$VTAMRCV      ISSUE A RECEIVE?
         BE    RECV0000              YES
         CLI   VTAMCMD,$VTAMDLO      DEALLOCATE A CONVERSATION
         BE    DALO0000              YES
         CLI   VTAMCMD,$VTAMCHK      ISSUE A CHECK?
         BE    CHECK000              YES
         CLI   VTAMCMD,$VTAMCFM      ISSUE A SEND/CONFIRM
         BE    CONF0000              YES
         ABEND $U0034,DUMP,,USER     INVALID COMAND
*---------------------------------------------------------------------*
*                                                                     *
*        Issue an INQUIRE                                             *
*                                                                     *
*---------------------------------------------------------------------*
INQ0000  DS    0H
         ITRACE ID=INQUIRE,          ISSUE INQUIRE                     +
               DATA1=SESSNAME        .. LU NAME
         L     R2,SESSNIB            NIB'S ADDRESS
         USING ISTDNIB,R2            DEFINE BASE
         MVC   NIBSYM,SESSNAME       PARTNER LU'S NAME
         MVC   DXDFUNC,INQUIRE       FUNCTION ATTEMPTED
         L     R3,SESSRPL            RPL'S ADDRESS
         L     R5,ARPLX              RPL EXIT'S ADDRESS
         MVI   SESSSTAT,$SESSINQ+$SESSPND   INQUIRE SENT AND PENDING
         INQUIRE RPL=(R3),           IS PARTNER AVAILABLE?             +
               NIB=(R2),             .. NIB FOR REQUEST                +
               EXIT=(R5),            .. EXIT'S ADDRESS                 +
               OPTCD=(ASY,APPSTAT)   .. WE WANT PARTNER'S STATUS
         LTR   R15,R15               INQUIRE SUCCESSFUL?
         BNZ   ERR0010               NO
         B     EXIT9900              AND EXIT
*---------------------------------------------------------------------*
*                                                                     *
*        Issue a CNOS                                                 *
*                                                                     *
*---------------------------------------------------------------------*
CNOS0000 DS    0H
         ITRACE ID=CNOS,             ISSUE CNOS                        +
               DATA1=SESSNAME        .. LU NAME
         MVC   DXDFUNC,CNOS          LAST FUNCTION
         L     R1,SESSRPLX           RPL EXTENSION'S ADDRESS
         USING ISTRPL6X,R1           DEFINE BASE
         MVC   RPL6LU,SESSNAME       SET PARTNER'S LU NAME
         XC    RPL6RC,RPL6RC         FORCE RETURN CODE
         LA    R2,DXDSLIM            SESSION LIMITS BLOCK ADDRESS
         L     R3,SESSRPL            RPL'S ADDRESS
         L     R5,ARPLX              EXIT'S ADDRESS
         MVI   SESSSTAT,$SESSCS+$SESSPND  CNOS SENT AND PENDING
         APPCCMD CONTROL=OPRCNTL,    ISSUE APPC COMMAND                +
               QUALIFY=CNOS,         .. CHANGE NUMBER OF SESSIONS      +
               RPL=(R3),             .. RPL'S ADDRESS                  +
               AREA=(R2),            .. SESSION LIMIT BLOCK'S ADDRESS  +
               RECLEN=SLIML,         .. SESSION LIMIT BLOCK'S LENGTH   +
               EXIT=(R5),            .. EXIT'S ADDRESS                 +
               OPTCD=ASY,            .. ASYNCHRONOUS                   +
               LOGMODE=LU62P         .. LOGMODE
         L     R1,SESSRPLX           RPL EXTENSION'S ADDRESS
         ITRACE ID=CNOS2,            TEMP TRACE POINT                  +
               DATA1=RPL6RC,         ..                                +
               DATA2=RPLFDBK         ..
         B     EXIT9900              AND EXIT
*---------------------------------------------------------------------*
*                                                                     *
*        Allocate a session                                           *
*                                                                     *
*---------------------------------------------------------------------*
ALOC0000 DS    0H
         ITRACE ID=ALLOCATE,         ALLOCATE A CONVERSATION           +
               DATA1=SESSNAME        .. PARTNER'S NAME
         MVC   DXDFUNC,ALLOC         LAST FUNCTION
         L     R1,CONVRPLX           RPL EXTENSION'S ADDRESS
         MVC   RPL6LU,SESSNAME       SET LU NAME
         L     R2,CONVIOA            I/O AREA ADDRESS
         L     R3,CONVRPL            RPL'S ADDRESS
         L     R5,ARPLX              RPL EXIT'S ADDRESS
         MVC   0(FMH5L,R2),FMH5      COPY FMH TO I/O AREA
         MVI   CONVSTAT,$CONVALO+$CONVPND  ALLOC SENT AND PENDING
         APPCCMD CONTROL=ALLOC,      ISSUE APPC COMMAND                +
               QUALIFY=ALLOCD,       .. ALLOCATE A CONVERSATION        +
               RPL=(R3),             .. RPL'S ADDRESS                  +
               AREA=(R2),            .. FMH-5'S ADDRESS                +
               RECLEN=FMH5L,         .. FMH-5'S LENGTH                 +
               CONMODE=CS,           .. CONTINUE SPECIFIC              +
               EXIT=(R5),            .. EXIT'S ADDRESS                 +
               OPTCD=ASY,            .. ASYNCHRONOUS                   +
               LOGMODE=LU62P         .. LOGMODE
         B     EXIT9900              YES
*---------------------------------------------------------------------*
*                                                                     *
*        Issue a SEND                                                 *
*                                                                     *
*---------------------------------------------------------------------*
SEND0000 DS    0H
         ITRACE ID=SEND,             ISSUE A SEND                      +
               DATA1=SESSNAME        LU'S NAME
         L     R2,CONVIOA            I/O AREA ADDRESS
         L     R3,CONVRPL            RPL'S ADDRESS
         SR    R4,R4                 CLEAR REGISTER
         ICM   R4,3,0(R2)            TOTAL DATA LENGTH
         L     R5,ARPLX              RPL EXIT'S ADDRESS
         MVC   DXDFUNC,SEND          LAST FUNCTION IS SEND
         OI    CONVSTAT,$CONVPND     SEND IS PENDING
         MVI   CONVFUNC,$CONVFS      FUNCTION IS A SEND
         APPCCMD CONTROL=SEND,       ISSUE APPC CMD                    +
               QUALIFY=DATA,         .. SEND DATA                      +
               RPL=(R3),             .. RPL ADDRESS                    +
               AREA=(R2),            .. I/O AREA                       +
               RECLEN=(R4),          .. LENGTH OF DATA                 +
               CONMODE=CS,           .. CONTINUE SPECIFIC              +
               CONVID=CONVCID,       .. CONVERSATION ID                +
               EXIT=(R5),            .. EXIT'S ADDRESS                 +
               OPTCD=ASY             .. ASYNCHRONOUS
         B     EXIT9900              EXIT
*---------------------------------------------------------------------*
*                                                                     *
*        Issue a SEND/CONFIRMED                                       *
*                                                                     *
*---------------------------------------------------------------------*
CONF0000 DS    0H
         ITRACE ID=SENDCFMD,         ISSUE A SEND/CONFIRM              +
               DATA1=SESSNAME        LU'S NAME
         L     R3,CONVRPL            RPL'S ADDRESS
         L     R5,ARPLX              RPL EXIT'S ADDRESS
         MVC   DXDFUNC,SEND          LAST FUNCTION IS SEND
         MVI   CONVFUNC,$CONVFC      FUNCTION IS A SEND/CONFIRMED
         OI    CONVSTAT,$CONVPND     SEND IS PENDING
         APPCCMD CONTROL=SEND,       ISSUE APPC CMD                    +
               QUALIFY=CONFRMD,      .. SEND CONFIRMATION              +
               RPL=(R3),             .. RPL ADDRESS                    +
               CONMODE=CS,           .. CONTINUE SPECIFIC              +
               CONVID=CONVCID,       .. CONVERSATION ID                +
               EXIT=(R5),            .. EXIT'S ADDRESS                 +
               OPTCD=ASY             .. ASYNCHRONOUS
         B     EXIT9900              EXIT
*---------------------------------------------------------------------*
*                                                                     *
*        Issue a RECEIVE                                              *
*                                                                     *
*---------------------------------------------------------------------*
RECV0000 DS    0H
         ITRACE ID=RECEIVE,          ISSUE A RECEIVE                   +
               DATA1=SESSNAME        .. LU'S NAME
         L     R2,CONVIOA            I/O AREA ADDRESS
         L     R3,CONVRPL            RPL'S ADDRESS
         L     R4,=A(COMMIOSZ)       MAXIMUM I/O AREA SIZE
         L     R5,ARPLX              RPL EXIT'S ADDRESS
         MVC   DXDFUNC,RECEIVE       LAST FUNCTION IS RECEIVE
         OI    CONVSTAT,$CONVPND     RECEIVE IS PENDING
         MVI   CONVFUNC,$CONVFR      LAST FUNCTION WAS RECEIVE
         APPCCMD CONTROL=RECEIVE,    ISSUE A RECEIVE                   +
               QUALIFY=SPEC,         .. FOR SPECIFIC CONVERSATION      +
               RPL=(R3),             .. RPL'S ADDRESS                  +
               FILL=LL,              .. ONLY 1 LOGICAL RECORD          +
               AREA=(R2),            .. I/O AREA ADDRESS               +
               AREALEN=(R4),         .. I/O AREA SIZE                  +
               CONMODE=CS,           .. CONTINUE SPECIFIC              +
               CONVID=CONVCID,       .. CONVERSATION ID                +
               EXIT=(R5),            .. EXIT'S ADDRESS                 +
               OPTCD=ASY             .. ASYNCHRONOUS
         B     EXIT9900              AND EXIT
*---------------------------------------------------------------------*
*                                                                     *
*        Deallocate a conversation                                    *
*                                                                     *
*---------------------------------------------------------------------*
DALO0000 DS    0H
         ITRACE ID=DEALLOC,          DEALOCATE A CONVERSATION          +
               DATA1=SESSNAME        .. LU'S NAME
         L     R3,CONVRPL            RPL'S ADDRESS
         L     R5,ARPLX              RPL EXIT'S ADDRESS
         MVC   DXDFUNC,DEALLOC       LAST FUNCTION IS DEALLOC
         MVI   CONVFUNC,$CONVFD      LAST FUNCTION WAS DEALLOCATE
         OI    CONVSTAT,$CONVPND     DEALLOCATE IS PENDING
         APPCCMD CONTROL=DEALLOC,    DE-ALLOCATE THE CONVERSATION      +
               QUALIFY=CONFIRM,      .. REQUIRE A CONFIRM FROM PARNTER +
               RPL=(R3),             .. RPL'S ADDRESS                  +
               CONVID=CONVCID,       .. CONVERSATION ID                +
               EXIT=(R5),            .. EXIT'S ADDRESS                 +
               OPTCD=ASY             .. ASYNCHRONOUSLY
         B     EXIT9900              AND EXIT
*---------------------------------------------------------------------*
*                                                                     *
*        Issue a CHECK                                                *
*                                                                     *
*---------------------------------------------------------------------*
CHECK000 DS    0H
         CLI   SESSSTAT,$SESSRDY     SESSION IN READY STATE?
         BE    CHECK010              YES
         ITRACE ID=SESSCHEK,         ISSUE A CHECK FOR SESSION REQUEST +
               DATA1=SESSNAME        .. LU'S NAME
         L     R3,SESSRPL            RPL'S ADDRESS
         APPCCMD CONTROL=CHECK,      COMPLETE ASYNCHRONOUS EVENT       +
               RPL=(R3)              .. RPL'S ADDRESS
         B     EXIT9900              NO, EXIT
CHECK010 DS    0H
         ITRACE ID=CONVCHEK,         ISSUE A CHECK FOR A CONVERSATION  +
               DATA1=SESSNAME        .. LU'S NAME
         L     R3,CONVRPL            CONVERSATION'S RPL
         APPCCMD CONTROL=CHECK,      COMPLETE ASYNCHRONOUS EVENT       +
               RPL=(R3)              .. RPL'S ADDRESS
         B     EXIT9900              NO, EXIT
*---------------------------------------------------------------------*
*                                                                     *
*        ERROR ROUTINES                                               *
*                                                                     *
*---------------------------------------------------------------------*
ERR0010  DS    0H
         ITRACE ID=VTAMERR,          VTAM REQUEST FAILED               +
               RDATA1=R15,           .. REGISTER 15                    +
               RDATA2=R0             .. REGISTER 0
         STH   R15,COMMDWRD          SAVE RETURN CODE
         MVC   PRTMSGID(MSG02L),MSG02 SET MESSAGE
         MVC   PRTMSGID+(MSG02FNC-MSG02)(L'MSG02FNC),DXDFUNC
         UNPK  PRTMSGID+(MSG02RC-MSG02)(L'MSG02RC+1),COMMDWRD(3)
         MVZ   PRTMSGID+(MSG02RC-MSG02)(L'MSG02RC),HEX0000
         TR    PRTMSGID+(MSG02RC-MSG02)(L'MSG02RC),HEXCHAR
         MVI   PRTMSGID+(MSG02RC-MSG02)+L'MSG02RC,C' '
         BAL   R5,PRT0000            PRINT MESSAGE
         OI    COMMFLAG,$ABORT       SET ABORT INDICATOR
         B     EXIT9900              AND EXIT
* ------------------------------------------------------------------- *
*                                                                     *
*        PRINT                                                        *
*                                                                     *
* ------------------------------------------------------------------- *
PRT0000  DS    0H
         ITRACE ID=PRINT
         FXCALL PRTQ,PRINT           ADD REQUEST TO PRINT QUEUE
         BR    R5                    DONE
EXIT0000 DS    0H
         ITRACE ID=VTAMCLSE          CLOSEING UP
         ICM   R1,15,DXDRPL          RPL'S ADDRESS
         BZ    EXIT0010              NO RPL
         ITRACE ID=FREERPL           FREEING RPL
         FREEMAIN RU,A=(1),LV=RPLL   FREEMAIN RPL
EXIT0010 DS    0H
         ICM   R1,15,DXDRPLX         RPL EXTENSION'S ADDRESS
         BZ    EXIT9900              NO RPL EXTENSION
         ITRACE ID=FREERPLX          FREEING RPL EXTENSION
         FREEMAIN RU,A=(1),LV=RPLEXTL FREEMAIN RPL EXTENSION
         L     R2,COMMACB            ACB'S ADDRESS
         GETMAIN RU,                 ACQUIRE STORAGE FOR CLOSE         +
               LV=CLOSEL,            .. SIZE OF AREA                   +
               LOC=BELOW             .. FROM 24-BIT AREA
         LR    R3,R1                 COPY STORAGE ADDRESS
         MVC   0(CLOSEL,R3),CLOSEI   INITIALIZE CLOSE LIST FORM
         CLOSE ((R2)),MF=(E,(R3))    CLOSE THE ACB
         FREEMAIN RU,A=(3),LV=CLOSEL FREE THE CLOSE PARM LIST
         MVC   PRTMSGID(MSG03L),MSG03 SET MESSAGE
         BAL   R5,PRT0000            PRINT MESSAGE
EXIT9900 DS    0H
         ITRACE ID=EXIT
         L     R13,4(R13)            CALLER'S SAVE AREA ADDRESS
         LM    R14,R12,12(R13)       RESTORE CALLER'S REGISTERS
         SR    R15,R15               ALWAYS A GOOD RETURN CODE
         BR    R14                   RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSTART DC    Q(DXDSVSUB)           DISPLACEMENT TO WORK AREA
OPENI    OPEN  (*,INPUT),MF=L
OPENL    EQU   *-OPENI
CLOSEI   CLOSE (*),MF=L
CLOSEL   EQU   *-CLOSEI
H1       DC    H'1'
HEX0000  DC    8X'00'
HEXCHAR  DC    C'0123456789ABCDEF'
SESSID   DC    C'SESSBLOK'
OPENACB  DC    CL10'OPEN ACB'
SETLOGON DC    CL10'SETLOGON'
INQUIRE  DC    CL10'INQUIRE'
CNOS     DC    CL10'CNOS'
ALLOC    DC    CL10'ALLOCATE'
SEND     DC    CL10'SEND'
SENDCFM  DC    CL10'SEND CONF'
RECEIVE  DC    CL10'RECEIVE'
DEALLOC  DC    CL10'DEALLOC'
MSG01    DS    0C
         DC    CL11'FXSVSUB01I'
         DC    C'ACB OPENED'
MSG01L   EQU   *-MSG01
MSG02    DS    0C
         DC    CL11'FXSVSUB02E'
MSG02FNC DC    CL10' '
         DC    C' FAILED RC='
MSG02RC  DC    CL4' '
         DC    C' '
MSG02L   EQU   *-MSG02
MSG03    DS    0C
         DC    CL11'FXSVSUB03I'
         DC    C'ACB CLOSED'
MSG03L   EQU   *-MSG03
         FMH5  DSECT=NO,TRAN=FX      GENERATE FMH5
         SPACE 2
RPLI     RPL   AM=VTAM,                                                +
               AAREA=RPLEXTI
RPLL     EQU   *-RPLI
RPLEXTI  ISTRPL6
RPLEXTL  EQU   *-RPLEXTI
* ------------------------------------------------------------------- *
*              WORK AREA                                              *
* ------------------------------------------------------------------- *
DXDSVSUB DSECT
DXDID    DS   CL8                    WORK AREA OWNER EYECATCHER
DXDSAVE  DS   18F                    REGISTER SAVE AREA
DXDRPL   DS   A                      ADDRESS OF RPL
DXDRPLX  DS   A                      ADDRESS OF RPL EXTENSION
DXDSLIM  DS   (SLIML)X               RESERVE SPACE FOR CNOS LIMIT BLOCK
DXDFUNC  DS   CL10                   LAST FUNCTION ATTEMPTED
         PRTBLOK DSECT=NO
* ------------------------------------------------------------------- *
*              INTERFACE BLOCK                                        *
* ------------------------------------------------------------------- *
         VTAMBLOK DSECT=YES
* ------------------------------------------------------------------- *
*              COMMON DATA MAP                                        *
* ------------------------------------------------------------------- *
         FXSCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*              VTAM SESSION BLOCK                                     *
* ------------------------------------------------------------------- *
         SESSBLOK DSECT=YES
* ------------------------------------------------------------------- *
*              VTAM CONVERSATION BLOCK                                *
* ------------------------------------------------------------------- *
         CONVBLOK DSECT=YES
* ------------------------------------------------------------------- *
*              ACB DSECT                                              *
* ------------------------------------------------------------------- *
         IFGACB AM=VTAM
* ------------------------------------------------------------------- *
*              RPL AND RPL EXTENSION DSECTS                           *
* ------------------------------------------------------------------- *
         IFGRPL AM=VTAM
* ------------------------------------------------------------------- *
*              EXLIST                                                 *
* ------------------------------------------------------------------- *
         IFGEXLST AM=VTAM
* ------------------------------------------------------------------- *
*              NIB                                                    *
* ------------------------------------------------------------------- *
         ISTDNIB
* ------------------------------------------------------------------- *
*              SESSION LIMITS BLOCK                                   *
* ------------------------------------------------------------------- *
         ISTSLCNS
SLIML    EQU   *-ISTSLCNS
* ------------------------------------------------------------------- *
*              DCB DSECT                                              *
* ------------------------------------------------------------------- *
         DCBD DSORG=PS
* ------------------------------------------------------------------- *
*              EQUATES                                                *
* ------------------------------------------------------------------- *
         COPY REGEQU
         ABCODES
         END  FXSVSUB
./ ADD NAME=FXSVTAM  0100-99056-99056-1500-00586-00586-00000-FX-REL1

         TITLE 'VTAM COMMUNICATION'
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXSVTAM                                               *
*                                                                     *
*           FX communicates with other FX's or users via the LU 6.2   *
*           protocol.  This module is the main communication driver.  *
*           Communication functions (like XMIT, RECV, or USER) are    *
*           sub-functions of this module.                             *
*                                                                     *
*           At FX start-up time the APPLID parameter defines the      *
*           node name FX will use to identify itself to VTAM.  FXNODE *
*           statements identify other FX's on your network.   All     *
*           remote FX's must be defined by FXNODE statements. If      *
*           another FX attempts to start a session and its name is    *
*           not defined, the session will be rejected (this is an     *
*           attempt to prevent an unwanted or unauthorized program    *
*           to receive or transmit data to FX).                       *
*                                                                     *
*           Users via TSO or batch can request a data set be          *
*           transmitted or they may inquire on the status of a        *
*           previous request.  Authorized users may inquire on the    *
*           status of FX and issue FX commands (like shutting down    *
*           FX).   The user interface also uses the LU 6.2 protocol.  *
*                                                                     *
* ------------------------------------------------------------------- *
SVTAM    FXPRFX 'VTAM COMMUNICATION MASTER'
FXSVTAM  AMODE 31
FXSVTAM  RMODE ANY
         USING FXSVTAM,R12           DEFINE BASE REGISTER
         CLC   DXDID,MODID           WORK AREA INITIALIZED?
         BE    VTAM0010              YES
         CLI   COMMEOJ,0             SHUTTING DOWN?
         BNE   EXIT0010              YES.. BYPASS COMPLETELY
         MVC   DXDID,MODID           WORK AREA INITIALIZED
         MVI   PRTCC,C' '            INITIALIZE PRINT I/O AREA
         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC
         MVI   VTAMCMD,$VTAMINT      SET COMMAND (INITIALIZE)
         BAL   R8,VSUB0000           CALL VSUB
*---------------------------------------------------------------------*
*                                                                     *
*        Scan the session blocks.                                     *
*                                                                     *
*---------------------------------------------------------------------*
VTAM0010 DS    0H
         TM    COMMEOJ,$EOJ3         CLEAN-UP TIME?
         BO    EXIT0000              YES
         XC    COMMVECB,COMMVECB     CLEAR ECB POSTED BY ATTN EXIT
         ITRACE ID=SCANSESS          STARTING SESSION BLOCK SCAN
         ICM   R7,15,COMMSESS        FIRST SESSION BLOCK
         USING SESSBLOK,R7           DEFINE BASE
         BZ    EXIT0010              NO SESSION BLOCKS
         NI    DXDFLAG,255-$ACTIVE   RESET ACTIVE SESSION INDICATOR
VTAM0020 DS    0H
         ST    R7,VTAMSESS           SET SESSION BLOCK ADDRESS
         CLI   SESSSTAT,$SESSERR+$SESSPND     IS AN ERROR PENDING?
         BE    LOSS0000              YES
         ICM   R6,15,SESSCONV        FIRST CONVERSATION BLOCK'S ADDRESS
         USING CONVBLOK,R6           DEFINE BASE
         BZ    VTAM0040              NO CONVERSATIONS
VTAM0030 DS    0H
         ST    R6,VTAMCONV           SET CONVERSATION BLOCK ADDRESS
         CLI   SESSSTAT,$SESSERR+$SESSPND     IS AN ERROR PENDING?
         BE    LOSS0000              YES
         ITRACE ID=CONVCONT,         CONTINUING AN EXITING CONVERSATION+
               RDATA1=R7,            .. SESSION BLOCK'S ADDRESS        +
               RDATA2=R6             .. CONVERSATION BLOCK'S ADDRESS
         CLI   CONVTYPE,$CONVTU      USER SESSION?
         BE    USER0000              YES
         NI    COMMEOJ,255-$EOJ2     SOME ACTIVITY STILL IN PROGRESS
         CLI   CONVTYPE,$CONVTP      PRIMARY END?
         BE    SEND0000              YES
         CLI   CONVTYPE,$CONVTS      SECONDARY END?
         BE    RECV0000              YES
         ABEND $U0017,DUMP,,USER     CONVERSATION IN AN UNKNOWN STATE
*---------------------------------------------------------------------*
*        We have a defined node with no current activity.  Scan       *
*        the master file to determine if we have any pending requests *
*        to send data to this node.                                   *
*---------------------------------------------------------------------*
VTAM0040 DS    0H
         TM    COMMEOJ,$EOJ1         SHUTDOWN IN PROGRESS?
         BO    NEXT0000              YES.. DON'T START NEW ACTIVITY
         ITRACE ID=SENDSCAN,         STARTING MASTER FILE SCAN         +
               DATA1=SESSNAME        .. NODE NAME THAT IS AVAILABLE
         XC    MSTRREC#,MSTRREC#     INITIALIZE RECORD NUMBER
         B     VTAM0060
VTAM0050 DS    0H
         SR    R1,R1                 CLEAR REGISTER
         ICM   R1,3,MSTRREC#         CURRENT MASTER FILE RECORD NUMBER
         LA    R1,1(R1)              NEXT MASTER FILE NUMBER
         STCM  R1,3,MSTRREC#         SAVE NEW RECORD NUMBER
VTAM0060 DS    0H
         MVI   MSTRCMD,$MSTRRD       SET COMMAND (READ)
         BAL   R8,MSTR0000           READ MASTER FILE
         USING REQBLOK,R5            DEFINE BASE
         CLI   REQSTAT,0             END OF ACTIVE RECORDS?
         BE    NEXT0000              YES, LOOK NO FURTHER
         CLI   REQSTAT,$REQRSTC      RESTORE COMPLETED?
         BE    VTAM0100              YES
         TM    REQSTAT,$REQNFYE      ERROR REQUIRING SENDER NOTIFY?
         BO    VTAM0100              YES
         CLI   REQSTAT,$REQXRDY      READY FOR TRANSMITTING?
         BNE   VTAM0050              NO
VTAM0070 DS    0H
         ITRACE ID=XREADY,           REQUEST IS READY TO TRANSMIT      +
               DATA1=REQREC#         .. RECORD NUMBER
         CLC   REQTNODE,SESSNAME     TO BE TRANSMITTED BY THIS NODE?
         BE    VTAM0140              YES
         CLC   REQTNODE,COMMAPLN     ARE WE THE TRANSMITTER?
         BNE   VTAM0050              NO
         SR    R1,R1                 CLEAR REGISTER
         ICM   R1,3,REQNDE#          NUMBER OF NODES
         BZ    VTAM0050              NO NODES?
         LA    R2,REQNDENM           FIRST NODE NAME
         USING REQNDENM,R2           DEFINE BASE
VTAM0080 DS    0H
         CLC   REQNDENM,SESSNAME     SEND TO THIS NODE?
         BE    VTAM0090              YES
         LA    R2,REQNDEL(R2)        NEXT NODE
         BCT   R1,VTAM0080           LOOP
         B     VTAM0050              NOT FOR THIS NODE
VTAM0090 DS    0H
         CLI   REQNDEST,$REQNDEI     IN INITIAL STATUS?
         BE    VTAM0140              YES
         B     VTAM0050
         DROP  R2
VTAM0100 DS    0H
         CLC   REQTNODE,SESSNAME     WAS THIS THE TRANSMITTING NODE?
         BNE   VTAM0130              NO
         SR    R1,R1                 CLEAR REGISTER
         ICM   R1,3,REQNDE#          NUMBER OF NODES
         BZ    VTAM0050              NO NODES?
         LA    R2,REQNDENM           FIRST NODE NAME
         USING REQNDENM,R2           DEFINE BASE
VTAM0110 DS    0H
         CLC   REQNDENM,COMMAPLN     IS THIS NODE US?
         BE    VTAM0120              YES
         LA    R2,REQNDEL(R2)        NEXT NODE
         BCT   R1,VTAM0110           LOOP
         B     VTAM0050              NOT FOR THIS NODE
VTAM0120 DS    0H
         CLI   REQNDEST,$REQNDEN     SENDER ALREADY NOTIFIED?
         BE    VTAM0050              YES
         B     VTAM0140              SEND RESTORE NOTIFICATION
VTAM0130 DS    0H
         CLC   REQENODE,SESSNAME     WAS THIS THE ENTRY NODE?
         BNE   VTAM0050              NO
         CLI   REQENST,0             HAS ENTRY NODE BEEN NOTIFIED?
         BNE   VTAM0050              YES
         DROP  R2
*---------------------------------------------------------------------*
*        We have a transmission request to this node.                 *
*        If there was an error on the link, or the partner LU was     *
*        not ready the last time a session was attempted, do not      *
*        attempt a session again unless the interval value has past.  *
*---------------------------------------------------------------------*
VTAM0140 DS    0H
         TIME  BIN
         TM    SESSSTAT,$SESSERR     ERROR OR NOT READY LAST TIME?
         BNO   VTAM0150              NO.. TRY THE SEND NOW
         C     R1,SESSDATE           SAME DATE?
         BNE   VTAM0150              NO
         LR    R2,R0                 COPY TIME IN SECONDS
         S     R2,SESSTIME           CALCULATE ELAPSED TIME IN SECONDS
         C     R2,COMMINTV           HAS INTERVAL ELAPSED?
         BL    NEXT0000              NO, TRY NEXT NODE
VTAM0150 DS    0H
         STM   R0,R1,SESSTIME        SAVE TIME AND DATE OF LAST ATTEMPT
         NI    SESSSTAT,255-$SESSERR RESET ERROR FLAG
         CLI   SESSSTAT,$SESSRDY     SESSION READY FOR CONVERSATIONS?
         BE    VTAM0210              YES.. ALLOCATE A CONVERSATION
         TM    SESSSTAT,$SESSCS      CNOS SENT?
         BO    VTAM0190              YES.. TEST FOR CNOS PENDING
         TM    SESSSTAT,$SESSINQ     INQUIRE SENT?
         BO    VTAM0160              YES.. TEST FOR INQUIRE PENDING
         ITRACE ID=INQUIRE,          INQUIRE'ING ON PARTNER'S STATUS   +
               DATA1=SESSNAME        .. PARTNER'S LU NAME
         MVI   VTAMCMD,$VTAMINQ      SET COMMAND (INQUIRE)
         BAL   R8,VSUB0000           LINK TO VSUB TO ISSUE INQUIRE
         B     NEXT0010              ON TO NEXT SESSION
VTAM0160 DS    0H
         TM    SESSSTAT,$SESSPND     INQUIRE PENDING?
         BO    NEXT0010              YES
         ITRACE ID=INQDONE           INQUIRE DONE
         L     R3,SESSRPL            RPL'S ADDRESS
         USING IFGRPL,R3             DEFINE BASE
         CHECK RPL=(R3)              ISSUE CHECK (NON-APPC TYPE)
         ITRACE ID=INQFDBK,          INQUIRE FEED BACK                 +
               DATA1=RPLFDBK         .. FEEDBACK FROM INQUIRE
         CLC   X144C,RPLFDBK         DEFINED TO VTAM?
         BE    VTAM0170              NO
         CLI   RPLFDB3,0             PARTNER READY?
         BE    VTAM0180              YES
         ITRACE ID=NOTREADY,         PARTNER NOT READY                 +
               DATA1=SESSNAME        .. PARTNER'S NAME
         NI    SESSSTAT,255-$SESSINQ-$SESSPND  RESET INQ AND PENDING
         OI    SESSSTAT,$SESSERR     PARTNER NOT READY
         MVC   PRTMSGID(MSG01L),MSG01
         MVC   PRTMSGID+(MSG01LU-MSG01)(L'MSG01LU),SESSNAME
         BAL   R8,PRT0000            PRINT MESSAGE
         B     NEXT0010              ON TO NEXT SESSION
VTAM0170 DS    0H
         ITRACE ID=NOTDEF,           PARTNER IS NOT DEFINED TO VTAM    +
               DATA1=SESSNAME        .. PARTNER'S NAME
         NI    SESSSTAT,255-$SESSINQ-$SESSPND  RESET INQ AND PENDING
         OI    SESSSTAT,$SESSERR     PARTNER NOT READY
         MVC   PRTMSGID(MSG02L),MSG02
         MVC   PRTMSGID+(MSG02LU-MSG02)(L'MSG02LU),SESSNAME
         BAL   R8,PRT0000            PRINT MESSAGE
         B     NEXT0010              ON TO NEXT SESSION
VTAM0180 DS    0H
         TM    VTAMCMD,$SESSCS       CNOS ALREADY SENT?
         BO    VTAM0190              YES
         ITRACE ID=CNOS,             CHANGING NUMBER OF SESSIONS       +
               DATA1=SESSNAME        .. PARTNER'S LU NAME
         MVI   VTAMCMD,$VTAMCNS      SET COMMAND (CNOS)
         BAL   R8,VSUB0000           LINK TO VSUB TO ISSUE CNOS
         B     NEXT0010              ON TO NEXT SESSION
VTAM0190 DS    0H
         TM    SESSSTAT,$SESSPND     CNOS PENDING?
         BO    NEXT0010              YES
         MVI   VTAMCMD,$VTAMCHK      SET COMMAND (ISSUE A CHECK)
         BAL   R8,VSUB0000           LINK TO VSUB
         L     R1,SESSRPLX           RPL EXTENSION'S ADDRESS
         USING ISTRPL6X,R1           DEFINE BASE
         ITRACE ID=CNOSDONE,         CNOS COMPLETED                    +
               DATA1=RPL6RC          .. SAVE RETURN CODE FROM CNOS
         CLC   RPL6RC,X00001         ACCEPTED?
         BE    VTAM0200              YES
         CLC   RPL6RC,X002C001C      SINGLE SESSION MODE ALREADY ESTAB?
         BNE   ERR0010               NO
VTAM0200 DS    0H
         ITRACE ID=SESSRDY,          SESSION IS NOW READY              +
               DATA1=SESSNAME        .. NODE THAT IS NOW READY
         MVI   SESSSTAT,$SESSRDY     SESSION IS NOW IN 'READY' STATUS
         MVC   PRTMSGID(MSG03L),MSG03
         MVC   PRTMSGID+(MSG03LU-MSG03)(L'MSG03LU),SESSNAME
         BAL   R8,PRT0000            PRINT MESSAGE
VTAM0210 DS    0H
         ITRACE ID=ADDCONV           ADDING A CONVERSATION BLOCK
         FXCALL FXSCONV,ADD,,(R7)    ADD A CONVERSATION BLOCK
         L     R6,CONVADDR           RETURNED CONVBLOK'S ADDRESS
         MVC   CONVREC#,MSTRREC#     SAVE MASTER FILE RECORD NUMBER
         MVI   CONVTYPE,$CONVTP      PRIMARY (SENDING) END
         ITRACE ID=ALLOC,            ALLOCATING A SESSION              +
               DATA1=SESSNAME        .. PARTNER'S LU NAME
         MVI   VTAMCMD,$VTAMALO      SET COMMAND (ALLOCATE A SESSION)
         BAL   R8,VSUB0000           LINK TO VSUB TO ALLOCATE SESSION
         B     NEXT0010              ON TO NEXT SESSION
*---------------------------------------------------------------------*
*        Process file transmission SENDing                            *
*---------------------------------------------------------------------*
SEND0000 DS    0H
         TM    CONVSTAT,$CONVRDY     CONVERSATION IN READY STATE?
         BO    SEND0030              YES
         TM    CONVSTAT,$CONVPND     ALLOCATE STILL PENDING?
         BO    NEXT0000              YES.. ON TO NEXT SESSION
         MVI   VTAMCMD,$VTAMCHK      SET COMMAND (ISSUE A CHECK)
         BAL   R8,VSUB0000           LINK TO VSUB
         ITRACE ID=ALOCDONE          ALLOCATE COMPLETE
         L     R1,CONVRPLX           RPL EXTENSION'S ADDRESS
         OC    RPL6RC,RPL6RC         ALL ZEROS?
         BNZ   ERR0010               NO
         MVC   CONVCID,RPL6CNVD      SAVE CONVERSATION ID
         MVI   CONVSTAT,$CONVRDY     CONVERSATION IS READY
         ITRACE ID=CONVRDY,          SESSION READY                     +
               DATA1=SESSNAME,       .. LU'S NAME                      +
               DATA2=CONVCID         .. CONVERSATION ID
         MVC   PRTMSGID(MSG04L),MSG04
         MVC   PRTMSGID+(MSG04LU-MSG04)(L'MSG04LU),SESSNAME
         UNPK  PRTMSGID+(MSG04CID-MSG04)(9),CONVCID(5)
         MVZ   PRTMSGID+(MSG04CID-MSG04)(8),HEX0F0F
         TR    PRTMSGID+(MSG04CID-MSG04)(8),HEXCHAR
         MVI   PRTMSGID+(MSG04CID-MSG04)+8,C' '
         BAL   R8,PRT0000            PRINT MESSAGE
*---------------------------------------------------------------------*
*   If the conversation is to a destination, update the XMIT start    *
*   date and time.  If we were a destination, the conversation is     *
*   to the entry or transmit node (node won't be in the dest list).   *
*---------------------------------------------------------------------*
         MVC   MSTRREC#,CONVREC#     SET RECORD NUMBER
         MVI   MSTRCMD,$MSTRRD       SET COMMAND (READ)
         BAL   R8,MSTR0000           READ MASTER FILE
         CLC   REQTNODE,COMMAPLN     ARE WE THE TRANSMITTER?
         BNE   SEND0030              NO.. DON'T UPDATE XMIT DATE/TIME
         CLI   REQSTAT,$REQRSTC      ABOUT TO NOTIFY OF RESTORE?
         BE    SEND0030              YES..
         TM    REQSTAT,$REQNFYE      ABOUT TO NOTIFY OF ERROR?
         BO    SEND0030              YES
         LA    R2,REQNDENM           FIRST NODE
         USING REQNDENM,R2           DEFINE BASE
         SR    R1,R1                 CLEAR REGISTER
         ICM   R1,3,REQNDE#          NUMBER OF NODES
SEND0010 DS    0H
         CLC   SESSNAME,REQNDENM     SENDING TO THIS NODE?
         BE    SEND0020              YES
         LA    R2,REQNDEL(R2)        NEXT NODE
         BCT   R1,SEND0010           LOOP
         ABEND $U0095,DUMP,,USER     BAD NEWS
SEND0020 DS    0H
         TIME  DEC                   GET THE TIME AND DATE
         STCM  R1,15,REQNDETD        SET DATE TRANSMIT STARTED
         STCM  R0,15,REQNDETT        SET TIME TRANSMIT STARTED
         MVI   MSTRCMD,$MSTRWRT      SET COMMAND (WRITE)
         BAL   R8,MSTR0000           UPDATE MASTER FILE
SEND0030 DS    0H
         ITRACE ID=CALLSEND
         LA    R1,VTAMBLOK           SET PARM ADDRESS
         L     R15,ASEND             SEND PROCESSOR ENTRY POINT
         BALR  R14,R15               CALL SEND
         ICM   R6,15,VTAMCONV        NEXT CONVERSATION BLOCK'S ADDRESS
         BNZ   VTAM0030              CHECK THIS CONVERSATION
         B     NEXT0010              GO ON TO NEXT SESSION
*---------------------------------------------------------------------*
*        Process file transmissiton RECEIVEing                        *
*---------------------------------------------------------------------*
RECV0000 DS    0H
         ITRACE ID=CALLRECV
         LA    R1,VTAMBLOK           SET PARM ADDRESS
         L     R15,ARECV             RECV PROCESSOR ENTRY POINT
         BALR  R14,R15               CALL RECV
         ICM   R6,15,VTAMCONV        NEXT CONVERSATION BLOCK'S ADDRESS
         BNZ   VTAM0030              CHECK THIS CONVERSATION
         B     NEXT0010              GO ON TO NEXT SESSION
*---------------------------------------------------------------------*
*        Process sessions that have had a 'VTAM LOSS'                 *
*---------------------------------------------------------------------*
LOSS0000 DS    0H
         ITRACE ID=LOSS
         LA    R1,VTAMBLOK           SET PARM ADDRESS
         L     R15,ALOSS             LOST SESSION CLEAN-UP ENTRY POINT
         BALR  R14,R15               CALL FXSLOSS
         ICM   R7,15,VTAMSESS        NEXT SESSION BLOCK ADDRESS
         BNZ   VTAM0020              GO ON TO NEXT SESSION
         B     NEXT0020              CONTINUE AS IF NORMAL NEXT SESSION
*---------------------------------------------------------------------*
*        User conversation processing                                 *
*---------------------------------------------------------------------*
USER0000 DS    0H
         ITRACE ID=USERCONV          USER CONVERSATION
         CLI   CONVFUNC,0            ANY FUNCTION ACTIVE?
         BE    USER0070              NO.. ISSUE FIRST RECEIVE
         CLI   CONVFUNC,$CONVFR      RECEIVE?
         BE    USER0010              YES
         CLI   CONVFUNC,$CONVFS      SEND?
         BE    USER0060              YES
         ITRACE ID=INVUSTAT
         ABEND $U0042,DUMP,,USER     INVALID USER CONVERSATION STAT
USER0010 DS    0H
         TM    CONVSTAT,$CONVPND     STILL PENDING?
         BO    NEXT0000              YES
         MVI   VTAMCMD,$VTAMCHK      ISSUE A CHECK
         BAL   R8,VSUB0000           LINK TO VSUB
         ITRACE ID=RECVDONE
         L     R1,CONVRPLX           RPL EXTENSION'S ADDRESS
         OC    RPL6RC,RPL6RC         RECEIVE SUCCESSFUL?
         BNE   ERR0010               NO
         TM    RPL6RCV1,RPL6WDAL     DE-ALLOCATE RECEIVED?
         BO    LOSS0000              YES.. SESSION SHUTTING DOWN
         L     R1,CONVIOA            I/O AREA ADDRESS
         USING USERREQ,R1            DEFINE BASE
         CLC   =C'SNAP',USERMOD      SNAP SHOT REQUEST?
         BE    USER0040              YES..
*---------------------------------------------------------------------*
*                                                                     *
* This routine is sensitive to the module names being in a certain    *
* format:                                                             *
*                                                                     *
*        bytes 1-3   module prefix                                    *
*              4-7   function name                                    *
*              8-8   suffix                                           *
*                                                                     *
* If the module name structure is changed, the code will have to be   *
* changed to test for the function name accordingly.                  *
*                                                                     *
*---------------------------------------------------------------------*
         LA    R15,COMMUMOD          FIRST USER COMMAND PROCESSOR
USER0020 DS    0H
         CLC   USERMOD,3(R15)        MODULE FOUND?
         BE    USER0030              YES
         LA    R15,12(R15)           NEXT MODULE
         B     USER0020              LOOP
USER0030 DS    0H
         L     R15,8(R15)            USER FUNCTION ENTRY POINT
         ITRACE ID=CALLUFNC,                                           +
               DATA1=0(R1),          .. REQUEST CODE                   +
               RDATA2=R15            .. USER FUNCTION ENTRY POINT
         BALR  R14,R15               LINK TO REQUESTED FUNCTION
         B     USER0050
USER0040 DS    0H
         ITRACE ID=CALLSNAP
         LOAD  EP=FXSSNAP            LOAD SNAP SHOT MODULE
         LR    R15,R0                COPY ENTRY POINT
         BALR  R14,R15               LINK TO SNAP SHOT MODULE
         DELETE EP=FXSSNAP           DELETE SNAP SHOT MODULE
USER0050 DS    0H
         MVI   VTAMCMD,$VTAMSND      SET COMMAND (SEND)
         BAL   R8,VSUB0000           SEND DATA BACK TO USER
         B     USER0090              SET 'ACTIVE' INDICATOR
USER0060 DS    0H
         TM    CONVSTAT,$CONVPND     STILL PENDING?
         BO    USER0090              YES
         MVI   VTAMCMD,$VTAMCHK      ISSUE A CHECK
         BAL   R8,VSUB0000           LINK TO VSUB
         ITRACE ID=SENDDONE
         B     USER0080
USER0070 DS    0H
         ITRACE ID=1STRECV
USER0080 DS    0H
         MVI   VTAMCMD,$VTAMRCV      SET COMMAND (RECEIVE)
         BAL   R8,VSUB0000           ISSUE A NEW RECEIVE
         B     NEXT0000              ON TO NEXT CONVERSATION
USER0090 DS    0H
         OI    DXDFLAG,$ACTIVE       CONVERSATION ACTIVE
         B     NEXT0000              ON TO NEXT CONVERSATION
*---------------------------------------------------------------------*
*        Last session was not ready or another asynchronous event     *
*        has been started, continue with next conversation/session.   *
*---------------------------------------------------------------------*
NEXT0000 DS    0H
         ITRACE ID=NEXTCONV,         ADVANCING TO NEXT CONVERSATION    +
               RDATA1=R7,            .. SESSION BLOCK ADDRESS          +
               RDATA2=R6             .. CONVERSATION BLOCK'S ADDRESS
         LTR   R6,R6                 ANY CONVERSATION NOW?
         BZ    NEXT0010              NO
         ICM   R6,15,CONVNEXT        NEXT CONVERSATION BLOCK'S ADDRESS
         BNZ   VTAM0030              CHECK THIS CONVERSATION
NEXT0010 DS    0H
         ITRACE ID=NEXTSESS
         ICM   R7,15,SESSNEXT        NEXT SESSION BLOCK'S ADDRESS
         BNZ   VTAM0020              CHECK THIS SESSION
NEXT0020 DS    0H
         TM    DXDFLAG,$ACTIVE       ANY ACTIVE SESSIONS?
         BO    NEXT0030              YES
         TM    COMMEOJ,$EOJ1         SHUTDOWN IN PROGRESS?
         BO    EXIT0010              YES
NEXT0030 DS    0H
         TM    COMMVECB,X'40'        VTAM ECB POSTED AGAIN?
         BO    VTAM0010              YES, RE-SCAN SESSIONS
         B     EXIT0010              NO MORE SESSIONS, EXIT
*---------------------------------------------------------------------*
*        ERROR SITUATIONS                                             *
*---------------------------------------------------------------------*
ERR0010  DS    0H
         USING ISTRPL6X,R1           DEFINE BASE
         ITRACE ID=VTAMERR,          VTAM ERROR OF SOME SORT           +
               DATA1=RPL6RC          .. ERROR CODES
*****
*****
*****  IF FX IS NOT ABENDED, THE CONVBLOK SHOULD BE DELETED
*****
*****
         ABEND $U0057,DUMP,,USER
* ------------------------------------------------------------------- *
*                                                                     *
*        LINK TO VSUB                                                 *
*                                                                     *
* ------------------------------------------------------------------- *
VSUB0000 DS    0H
         ITRACE ID=VSUB,             LINKING TO VSUB                   +
               DATA1=VTAMCMD         .. COMMAND
         LA    R1,VTAMBLOK           PARM BLOCK'S ADDRESS
         L     R15,AVSUB             VSUB ENTRY POINT
         BALR  R14,R15               LINK TO VSUB
         BR    R8                    RETURN
* ------------------------------------------------------------------- *
*                                                                     *
*        Read or write master file records                            *
*                                                                     *
* ------------------------------------------------------------------- *
MSTR0000 DS    0H
         ITRACE ID=MSTRIO
         FXCALL FXSMSTR              LINK TO MASTER FILE I/O
         LA    R5,MSTRRECD           SET DATA ADDRESS
         BR    R8                    RETURN
* ------------------------------------------------------------------- *
*                                                                     *
*        PRINT                                                        *
*                                                                     *
* ------------------------------------------------------------------- *
PRT0000  DS    0H
         ITRACE ID=PRINT
         FXCALL PRTQ,PRINT           ADD REQUEST TO PRINT QUEUE
         BR    R8                    DONE
* ------------------------------------------------------------------- *
*                                                                     *
*        EXIT                                                         *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=VTAMCLSE          CLOSING UP VTAM STUFF
         L     R15,AVSUB             SUB-FUNCTION ENTRY POINT
         BALR  R14,R15               LINK TO VSUB
EXIT0010 DS    0H
         ITRACE ID=EXIT
         L     R13,4(R13)            CALLER'S SAVE AREA ADDRESS
         LM    R14,R12,12(R13)       RESTORE CALLER'S REGISTERS
         SR    R15,R15               ALWAYS A GOOD RETURN CODE
         BR    R14                   RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSTART DC    Q(DXDSVTAM)           DISPLACEMENT TO WORK AREA
F6000    DC    F'6000'               ONE MINUTE IN 100'THS OF SECONDS
X00001   DC    X'00000001'
X002C001C DC    X'002C001C'          NICE TO HAVE THE H ASSEMBLER
X144C    DC    X'144C'
HEX0F0F  DC    8X'0F'
HEXCHAR  DC    C'0123456789ABCDEF'
MSG01    DS    0C
         DC    CL11'FXSVTAM01W'
         DC    C'FX NODE '
MSG01LU  DC    CL8' '
         DC    C' NOT READY'
MSG01L   EQU   *-MSG01
MSG02    DS    0C
         DC    CL11'FXSVTAM02W'
         DC    C'FX NODE '
MSG02LU  DC    CL8' '
         DC    C' NOT DEFINED TO VTAM'
MSG02L   EQU   *-MSG02
MSG03    DS    0C
         DC    CL11'FXSVTAM03I'
         DC    C'FX NODE '
MSG03LU  DC    CL8' '
         DC    C' NOW READY'
MSG03L   EQU   *-MSG03
MSG04    DS    0C
         DC    CL11'FXSVTAM04I'
         DC    C'CONVERSATION TO NODE '
MSG04LU  DC    CL8' '
         DC    C' READY, CID='
MSG04CID DC    CL8' '
         DC    C' '
MSG04L   EQU   *-MSG04
         SPACE 2
* ------------------------------------------------------------------- *
*              WORK AREA                                              *
* ------------------------------------------------------------------- *
DXDSVTAM DSECT
DXDID    DS   CL8                    WORK AREA OWNER EYECATCHER
DXDSAVE  DS   18F                    REGISTER SAVE AREA
DXDFLAG  DS   X                      FLAGS/INDICATORS
$ACTIVE  EQU  X'80'                  SOME SESSION IS ACTIVE
         PRTBLOK  DSECT=NO
         MSTRREQ  DSECT=NO
         DAIRREQ  DSECT=NO
         VTAMBLOK DSECT=NO
         CONVREQ  DSECT=NO
* ------------------------------------------------------------------- *
*              COMMON DATA MAP                                        *
* ------------------------------------------------------------------- *
         FXSCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*              VTAM SESSION BLOCK                                     *
* ------------------------------------------------------------------- *
         SESSBLOK DSECT=YES
* ------------------------------------------------------------------- *
*              VTAM CONVERSATION BLOCK                                *
* ------------------------------------------------------------------- *
         CONVBLOK DSECT=YES
* ------------------------------------------------------------------- *
*              USER RESPONSE/REQUEST BLOCK                            *
* ------------------------------------------------------------------- *
         USERREQ
* ------------------------------------------------------------------- *
*              MASTER FILE RECORD                                     *
* ------------------------------------------------------------------- *
         REQBLOK  DSECT=YES
* ------------------------------------------------------------------- *
*              RPL AND RPL EXTENSION DSECTS                           *
* ------------------------------------------------------------------- *
         IFGRPL AM=VTAM
* ------------------------------------------------------------------- *
*                                                                     *
*              EQUATES                                                *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY REGEQU
         ABCODES
         END  FXSVTAM
./ ADD NAME=FXSVTOC  0100-99056-99056-1500-00312-00312-00000-FX-REL1

         TITLE 'FXSVTOC  VTOC functions'
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXSVTOC                                               *
*                                                                     *
*  Functions:                                                         *
*   '1' Determine staging device characteristics                      *
*   '2' Determine data set size in bytes by examining the extents on  *
*       the specified volume.                                         *
*   '3' Convert a data set size in bytes to an equivalent number of   *
*       tracks.                                                       *
*   '4' Determine data set organization.                              *
*                                                                     *
*   The interface block is VTOCREQ.                                   *
*                                                                     *
* ------------------------------------------------------------------- *
SVTOC    FXPRFX 'VTOC FUNCTIONS'
FXSVTOC  AMODE 31
FXSVTOC  RMODE ANY
         LR    R8,R1                 COPY PARAMETER BLOCK ADDRESS
         USING VTOCREQ,R8            DEFINE BASE
         CLC   DXDID,MODID           WORK AREA INITIALIZED?
         BE    VTOC0010              YES
         ITRACE ID=INIT
         MVC   DXDID,MODID           WORK AREA INITIALIZED
         GETMAIN RU,                 ACQUIRE STORAGE FOR 24-BIT PARMS  +
               LV=FX24L,             .. SIZE OF AREA                   +
               LOC=BELOW             .. FROM BELOW THE LINE
         ST    R1,DXD24              SAVE 24-BIT PARM AREA ADDRESS
VTOC0010 DS    0H
         L     R9,DXD24              24-BIT PARM AREA ADDRESS
         USING FX24PRM,R9            DEFINE BASE
         TM    COMMEOJ,$EOJ3         CLEAN-UP TIME?
         BO    EXIT0000              YES
         CLI   VTOCCMD,$VTOCDEV      STAGE DEVICE CHARACTERISTICS?
         BE    VTOC0100              YES
         CLI   VTOCCMD,$VTOCXNT      DETERMINE DATA SET SIZE?
         BE    VTOC0200              YES
         CLI   VTOCCMD,$VTOCTRK      CONVERT SIZE TO TRACKS?
         BE    VTOC0400              YES
         CLI   VTOCCMD,$VTOCDSO      DETERMINE DATA SET ORGANIZATION?
         BE    VTOC0210              YES
         ITRACE ID=BADCMD
         ABEND $U0018,DUMP,,USER     SORRY
VTOC0100 DS    0H
         ITRACE ID=VTOCDEV
         ICM   R6,15,COMMSTGE        FIRST STAGE DEVICE BLOCK
         USING STGEDEV,R6            DEFINE BASE
         BZ    ERR0010               SHOULD NEVER HAPPEN
VTOC0110 DS    0H
         MVC   VOL24,STGEVOL         COPY VOLSER
         MVC   DSN24,FMT4NAME        FORMAT-4 DATA SET'S NAME
         ITRACE ID=STGEFMT4          ABOUT TO READ FMT-4
         FX24  $CAMLSTN              LINK TO OBTAIN
         LTR   R15,R15               OBTAIN SUCCESSFUL?
         BNZ   ERR0020               NO
         LA    R2,VTOC24             FORMAT-4 DATA
         USING DSCB,R2               DEFINE BASE
         CLI   DS4IDFMT,C'4'         FORMAT-4 ID PRESENT?
         BNE   ERR0030               NO
         MVC   STGETRCL,DS4DEVSZ+2   COPY TRACKS PER CYLINDER
         XC    STGETRSZ,STGETRSZ     CLEAR ALL 4 BYTES
         MVC   STGETRSZ+2(2),DS4DEVTK COPY TRACK SIZE
         ICM   R6,15,STGENEXT        NEXT STAGING DEVICE BLOCK
         BNZ   VTOC0110              PROCESS ALL STAGING DEVICES
         B     EXIT0010              EXIT
*---------------------------------------------------------------------*
*        CALCULATE DATA SET SIZE ON SPECIFIED VOLUME                  *
*---------------------------------------------------------------------*
VTOC0200 DS    0H
         ITRACE ID=FILESIZE          CALCULATING DATA SET SIZE
         L     R1,VTOCVOL            VOLSER ADDRESS
         MVC   VOL24,0(R1)           SET VOLSER
         MVC   DSN24,FMT4NAME        FORMAT-4 DATA SET'S NAME
         ITRACE ID=READFMT4          ABOUT TO READ FMT-4
         FX24  $CAMLSTN              LINK TO OBTAIN
         LTR   R15,R15               OBTAIN SUCCESSFUL?
         BNZ   ERR0040               NO
         LA    R2,VTOC24             FORMAT-4 DATA IN WORK AREA
         USING DSCB,R2               DEFINE BASE
         CLI   DS4IDFMT,C'4'         FORMAT-4 ID PRESENT?
         BNE   ERR0050               NO
         MVC   DXDTRCYL,DS4DEVSZ+2   COPY TRACKS PER CYLINDER
         XC    DXDTRSZ,DXDTRSZ       CLEAR ALL 4 BYTES
         MVC   DXDTRSZ+2(2),DS4DEVTK COPY TRACK SIZE
         ITRACE ID=DEVSIZE,          TRACE DEVICE SIZE                 +
               DATA1=DXDTRCYL,       .. TRACKS PER CYLINDER            +
               DATA2=DXDTRSZ         .. TRACK SIZE
         B     VTOC0220
*---------------------------------------------------------------------*
*        Determine data set organization
*---------------------------------------------------------------------*
VTOC0210 DS    0H
         ITRACE ID=DSORG             DETERMINING DATA SET ORGANIZATION
         L     R1,VTOCVOL            VOLSER ADDRESS
         MVC   VOL24,0(R1)           SET VOLSER
VTOC0220 DS    0H
         ITRACE ID=READFMT1          ABOUT TO READ FMT-1
         L     R1,VTOCDSN            DATA SET NAME ADDRESS
         MVC   DSN24,0(R1)           SET DATA SET NAME
         FX24  $CAMLSTN              LINK TO OBTAIN
         LTR   R15,R15               OBTAIN SUCCESSFUL?
         BNZ   ERR0060               NO
         LA    R2,VTOC24             VTOC DATA IN WORK AREA
         CLI   DS1FMTID,C'1'         FORMAT-1 ID PRESENT?
         BNE   ERR0070               NO
         TM    DS1DSORG,DS1DSGIS     ISAM?
         BO    ERR0080               YES.. NOT SUPPORTED
         TM    DS1DSORG,DS1DSGDA     DA?
         BO    VTOC0230              YES
         TM    DS1DSORG,DS1DSGPO     PDS?
         BO    VTOC0240              YES
         TM    DS1DSORG,DS1DSGPS     SEQUENTIAL?
         BO    VTOC0250              YES
         TM    DS1DSORG+1,DS1ACBM    VSAM?
         BO    VTOC0260              YES
         MVI   VTOCDSO,$VTOCUKN      DSORG IS UNKOWN
         B     VTOC0270
VTOC0230 DS    0H
         MVI   VTOCDSO,$VTOCDA       DSORG IS DA
         B     VTOC0270
VTOC0240 DS    0H
         MVI   VTOCDSO,$VTOCPO       DSORG IS PO (PDS)
         B     VTOC0270
VTOC0250 DS    0H
         MVI   VTOCDSO,$VTOCPS       DSORG IS PS
         B     VTOC0270
VTOC0260 DS    0H
         MVI   VTOCDSO,$VTOCVS       DSORG IS VSAM
         B     VTOC0270
VTOC0270 DS    0H
         CLI   VTOCCMD,$VTOCDSO      DETERMINE DATA SET ORGANIZATION?
         BE    EXIT0010              YES
         SR    R3,R3                 CLEAR FOR TOTAL TRACKS
         LA    R4,DS1EXT1            FIRST EXTENT
         LA    R5,3                  NUMBER OF EXTENTS
         BAL   R7,VTOC0300           CALCULATE NUMBER OF TRACKS
         OC    DS1PTRDS,DS1PTRDS     FORMAT-3 ADDRESS PRESENT?
         BZ    VTOC0290              NO
         MVC   CCHHR24,DS1PTRDS      SET ADDRESS
VTOC0280 DS    0H
         ITRACE ID=READFMT3          ABOUT TO READ FMT-3
         FX24  $CAMLSTA              LINK TO OBTAIN
         LTR   R15,R15               OBTAIN SUCCESSFUL?
         BNZ   ERR0090               NO
         LA    R2,VTOC24             VTOC DATA IN WORK AREA
         CLI   DS3FMTID,C'3'         FORMAT-3 ID PRESENT?
         BNE   ERR0100               NO
         LA    R4,DS3EXTNT           FIRST EXTENT
         LA    R5,4                  NUMBER OF EXTENTS
         BAL   R7,VTOC0300           CALCULATE NUMBER OF TRACKS
         LA    R4,DS3ADEXT           FIRST EXTENT
         LA    R5,9                  NUMBER OF EXTENTS
         BAL   R7,VTOC0300           CALCULATE NUMBER OF TRACKS
         OC    DS3PTRDS,DS3PTRDS     FORMAT-3 ADDRESS PRESENT?
         BZ    VTOC0290              NO
         MVC   CCHHR24,DS3PTRDS      SET ADDRESS
         B     VTOC0280              PROCESS THIS FORMAT-3
* ------------------------------------------------------------------- *
*        EXTENTS IN TRACKS SHOULD BE IN REGISTER 3                    *
* ------------------------------------------------------------------- *
VTOC0290 DS    0H
         ITRACE ID=XTNTEOV           END OF EXTENTS ON THIS VOLUME
         SR    R2,R2                 CLEAR FOR MULTIPLICATION
         M     R2,DXDTRSZ            COMPUTE TOTAL NUMBER OF BYTES
         ST    R3,VTOCDSSZ           RETURN SIZE IN BYTES
         B     EXIT0010              AND EXIT
* ------------------------------------------------------------------- *
*        CALCULATE TRACKS IN EXTENTS                                  *
* ------------------------------------------------------------------- *
VTOC0300 DS    0H
         OC    0(L'DS1EXT1,R4),0(R4)  ALL ZEROS?
         BZR   R7                     YES
         ITRACE ID=EXTENT,            TRACE EACH EXTENT                +
               DATA1=2(R4)            .. LOW/HIGH CYLINDER/HEAD
         LH    R0,2(R4)               LOW CYLINDER NUMBER
         MH    R0,DXDTRCYL            TIMES TRACKS PER CYLINDER
         AH    R0,4(R4)               PLUS HEAD NUMBER
         LH    R1,6(R4)               HIGH CYLINDER NUMBER
         MH    R1,DXDTRCYL            TIMES TRACKS PER CYLINDER
         AH    R1,8(R4)               PLUS HEAD NUMBER
         SR    R1,R0                  NUMBER TRACKS (MINUS 1)
         LA    R3,1(R1,R3)            ADD TRACKS IN EXTENT TO TOTAL
         LA    R4,L'DS1EXT1(R4)       NEXT EXTENT
         BCT   R5,VTOC0300            PROCESS ALL EXTENTS
         BR    R7                     RETURN
* ------------------------------------------------------------------- *
*        CONVERT DATA SET SIZE IN BYTES TO EQUIVALENT NUMBER OF       *
*        TRACKS.                                                      *
* ------------------------------------------------------------------- *
VTOC0400 DS    0H
         ITRACE ID=CONVTRKS
         L     R6,VTOCDEV            STAGING DEVICE BLOCK'S ADDRESS
         SR    R0,R0                 CLEAR REGISTER
         L     R1,VTOCDSSZ           DATA SET SIZE (IN BYTES)
         D     R0,STGETRSZ           COMPUTE NUMBER OF TRACKS
         LTR   R0,R0                 ANY REMAINDER?
         BZ    VTOC0410              NO
         LA    R1,1(R1)              ADD 1 TRACK
VTOC0410 DS    0H
         STCM  R1,15,VTOCTRKP        SET PRIMARY TRACKS
         SR    R0,R0                 CLEAR FOR DIVIDE
         D     R0,F10                COMPUTE 10 PERCENT OF SIZE
         LTR   R0,R0                 ANY REMAINDER?
         BZ    VTOC0420              NO
         LA    R1,1(R1)              ADD 1 TRACK
VTOC0420 DS    0H
         STCM  R1,15,VTOCTRKS        SET SECONDARY TRACKS
         ITRACE ID=CONVTRKX,                                           +
               DATA1=VTOCDSSZ,       .. DATA SET SIZE IN BYTES         +
               DATA2=VTOCTRKP        .. PRIMARY SIZE
         B     EXIT0010              AND EXIT
* ------------------------------------------------------------------- *
*        ERROR ROUTINES                                               *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         ITRACE ID=NODEV
         ABEND $U0013,DUMP,,USER     ABEND
ERR0020  DS    0H
         ITRACE ID=DEVFMT4O          OBTAIN FAILED
         ABEND $U0014,DUMP,,USER     ABEND
ERR0030  DS    0H
         ITRACE ID=DEVFMT4I          FORMAT-4 DOES NOT HAVE CORRECT ID
         ABEND $U0015,DUMP,,USER     ABEND
ERR0040  DS    0H
         ITRACE ID=DSNFMT4O          OBTAIN FAILED
         ABEND $U0019,DUMP,,USER     ABEND
ERR0050  DS    0H
         ITRACE ID=DSNFMT4I          FORMAT-4 DOES NOT HAVE CORRECT ID
         ABEND $U0020,DUMP,,USER     ABEND
ERR0060  DS    0H
         ITRACE ID=DSNFMT1O          OBTAIN FAILED
         ABEND $U0021,DUMP,,USER     ABEND
ERR0070  DS    0H
         ITRACE ID=DSNFMT1I          FORMAT-1 DOES NOT HAVE CORRECT ID
         ABEND $U0022,DUMP,,USER     ABEND
ERR0080  DS    0H
         ITRACE ID=ISAM
         MVI   VTOCDSO,$VTOCIS       DATA SET IS ISAM, NOT SUPPORTED
         B     EXIT0010              EXIT
ERR0090  DS    0H
         ITRACE ID=DSNFMT1O          OBTAIN FAILED
         ABEND $U0023,DUMP,,USER     ABEND
ERR0100  DS    0H
         ITRACE ID=DSNFMT1I          FORMAT-3 DOES NOT HAVE CORRECT ID
         ABEND $U0024,DUMP,,USER     ABEND
* ------------------------------------------------------------------- *
*        EXIT                                                         *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         L     R9,DXD24              24-BIT PARM LIST ADDRESS
         FREEMAIN RU,A=(R9),LV=FX24L
EXIT0010 DS    0H
         ITRACE ID=EXIT              EXITING PRINT MODULE
         L     R13,4(R13)            RESTORE REGISTER 13
         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS
         SR    R15,R15               GIVE GOOD RETURN CODE
         BR    R14                   RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSTART DC    Q(DXDSVTOC)           DISPLACEMENT TO WORK AREA
F1       DC    F'1'
F10      DC    F'10'
FMT4NAME DC    44X'04'
         LTORG
* ------------------------------------------------------------------- *
*                                                                     *
*        WORK AREAS                                                   *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSVTOC DSECT
DXDID    DS    CL8                   OWNING MODULE NAME
DXDSAVE  DS    18F                   REGISTER SAVE AREA
DXD24    DS    A                     24-BIT PARM AREA ADDRESS
DXDTRSZ  DS    F                     TRACKS PER CYLINDER
DXDTRCYL DS    H                     TRACK SIZE
* ------------------------------------------------------------------- *
*              COMMON DATA MAP                                        *
* ------------------------------------------------------------------- *
         FXSCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*              24-BIT MODULE MAP                                      *
* ------------------------------------------------------------------- *
         FX24PRM  DSECT=YES
* ------------------------------------------------------------------- *
*              STAGING DEVICE BLOCK                                   *
* ------------------------------------------------------------------- *
         STGEDEV  DSECT=YES
* ------------------------------------------------------------------- *
*              VTOC INTERFACE BLOCK                                   *
* ------------------------------------------------------------------- *
         VTOCREQ  DSECT=YES
* ------------------------------------------------------------------- *
*              VTOC RECORD FORMATS                                    *
* ------------------------------------------------------------------- *
DSCB     DSECT
         IECSDSL1 1                 FORMAT-1 RECORD
         ORG DS1DSNAM
         IECSDSL1 3                 FORMAT-3 RECORD
         ORG DS1FMTID
         IECSDSL1 4                 FORMAT-4 RECORD
* ------------------------------------------------------------------- *
*              EQUATES                                                *
* ------------------------------------------------------------------- *
         COPY REGEQU
         ABCODES
         END  FXSVTOC
./ ADD NAME=FXSXTR   0100-99056-99056-1500-00150-00150-00000-FX-REL1

         TITLE 'FXSXTR     EXTERNAL TRACE SUBTASK'
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXSXTR                                                *
*                                                                     *
*  Function:                                                          *
*   If the FXSXTR DD statement is present in the start-up JCL,        *
*   FXSMAIN ATTACH's this subtask.   All internal trace entries as    *
*   well as other key items will be written to the external trace.    *
*                                                                     *
* *** WARNING This module cannot use the ITRACE macro.                *
*                                                                     *
* ------------------------------------------------------------------- *
FXSXTR   CSECT
FXSXTR   AMODE 31
FXSXTR   RMODE 24
         USING FXSXTR,R12            DEFINE BASE
         USING XTRRECD,R7            DEFINE BASE
         USING FXCOMMON,R11          DEFINE BASE
         STM   R14,R12,12(R13)       CHAIN REGISTERS
         LR    R12,R15               COPY ENTRY POINT ADDRESS
         L     R11,0(R1)             LOAD COMMON DATA ADDRESS
         GETMAIN R,LV=WORKL          ACQUIRE STORAGE FOR WORK AREA
         B     XTR0000
         DC    CL8'FXSXTR'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
XTR0000  DS    0H
         USING WORKAREA,R1           DEFINE BASE
         XC    WORKAREA(WORKL),WORKAREA
         ST    R13,4(R1)             CHAIN PREVIOUS SAVE AREA TO OURS
         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO PREVIOUS
         LR    R13,R1                COPY WORK AREA ADDRESS
         DROP  R1
         USING WORKAREA,R13          DEFINE BASE
         ST    R12,AXTR              SET OUR ENTRY POINT IN COMMON
         MVC   WKDCB(DCBL),DCBI      INITIALIZE DCB IN WORK AREA
         MVC   WKOCPL(OCPLL),OCPLI   INITIALIZE OPEN/CLOSE PARM LIST
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         OPEN  (WKDCB,OUTPUT),MF=(E,WKOCPL)
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         TM    XTRWORK,X'40'         ECB ALREADY POSTED?
         BO    XTR0020               GET BUSY
XTR0010  DS    0H
         LA    R1,XTRWORK            WORK TO DO ECB
         XC    XTRWORK,XTRWORK       RESET ECB
         WAIT  1,ECB=(1)             WAIT FOR WORK TO DO ECB
XTR0020  DS    0H
         SR    R1,R1                 CLEAR REGISTER
XTR0030  DS    0H
         ICM   R10,15,XTRREQ         FIRST REQUEST BLOCK
         BZ    XTR0060               NOTHING ON CHAIN
         CS    R10,R1,XTRREQ         GET REQUEST CHAIN
         BNE   XTR0030
         USING XTRRECD,R10           DEFINE BASE
XTR0040  DS    0H
         L     R2,XTRNEXT            NEXT BLOCK'S ADDRESS
         ST    R1,XTRNEXT            SET POINTER
         LR    R1,R10                SWITCH
         LTR   R10,R2                SWITCH
         BNZ   XTR0040               LOOP
         LR    R10,R1                COPY FIRST BLOCK'S ADDRESS
XTR0050  DS    0H
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         PUT   WKDCB,XTRTIME         WRITE TO EXTERNAL TRACE
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         LR    R1,R10                COPY XTRRECD ADDRESS
         L     R10,XTRNEXT           NEXT BLOCK'S ADDRESS
         FREEMAIN RU,A=(1),LV=XTRRECDL
         LTR   R10,R10               ANY MORE PRINT BLOCKS?
         BNZ   XTR0050               YES
         OC    XTRWORK,XTRWORK       ECB POSTED AGAIN?
         BNZ   XTR0020               YES, PROCESS QUEUE
XTR0060  DS    0H
         TM    XTRFLAG,$XTREOJ       SHUTDOWN?
         BO    EXIT0000              YES.. IT'S MILLER TIME
         B     XTR0010               NO, WAIT
* ------------------------------------------------------------------- *
*        ADDRESSING MODE SWITCHING                                    *
* ------------------------------------------------------------------- *
AM24     DS    0H
         LA    R15,0(R15)            CLEAR HIGH BIT(S)
         BSM   R0,R15                RETURN IN 24-BIT MODE
AM31     DS    0H
         LA    R15,0(R15)            CLEAR HIGH BIT(S)
         O     R15,X80               SET HIGH BIT ON
         BSM   R0,R15                RETURN IN 31-BIT MODE
* ------------------------------------------------------------------- *
*        EXIT                                                         *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         CLOSE WKDCB,MF=(E,WKOCPL)   CLOSE DCB
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         LR    R1,R13                COPY WORK AREA ADDRESS
         L     R13,4(R13)            RESTORE REGISTER 13
         FREEMAIN R,A=(1),LV=WORKL   FREE WORK AREA
         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS
         SR    R15,R15               GIVE GOOD RETURN CODE
         BR    R14                   RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
X80      DC    A(X'80000000')
DCBI     DCB   DSORG=PS,                                               +
               DDNAME=FXSXTR,                                          +
               RECFM=FB,                                               +
               LRECL=XTRDATAL,                                         +
               BLKSIZE=100*XTRDATAL,                                   +
               MACRF=PM
DCBL     EQU   *-DCBI
OCPLI    OPEN  (*,OUTPUT),MF=L
OCPLL    EQU   *-OCPLI
         LTORG
* ------------------------------------------------------------------- *
*                                                                     *
*        WORK AREAS                                                   *
*                                                                     *
* ------------------------------------------------------------------- *
WORKAREA DSECT
WORKSAVE DS    18F                   REGISTER SAVE AREA
WKDCB    DS    0A,(DCBL)X            RESERVE SPACE FOR DCB
WKOCPL   DS    (OCPLL)X
WORKL    EQU   *-WORKAREA
* ------------------------------------------------------------------- *
*              COMMON DATA MAP                                        *
* ------------------------------------------------------------------- *
FXCOMMON DSECT
         COMMCOMM COMMNAME=FXCOMMON
* ------------------------------------------------------------------- *
*              INTERNAL TRACE RECORD                                  *
* ------------------------------------------------------------------- *
         COPY  TRENTRY
* ------------------------------------------------------------------- *
*              EXTERNAL TRACE RECORD                                  *
* ------------------------------------------------------------------- *
         XTRRECD
* ------------------------------------------------------------------- *
*              MODULE PREFIX                                          *
* ------------------------------------------------------------------- *
         FXPRFX TYPE=DSECT
* ------------------------------------------------------------------- *
*              EQUATES                                                *
* ------------------------------------------------------------------- *
         COPY REGEQU
         END  FXSXTR
./ ADD NAME=FXTCOMM  0100-99056-99056-1500-00014-00014-00000-FX-REL1

* ------------------------------------------------------------------- *
*                                                                     *
*  Name: FXTCOMM                                                      *
*                                                                     *
*  TSO interface common data and trace table manager                  *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY  OPTIONS
         FXTCOMM TYPE=CSECT
FXTCOMM  CSECT
         DC    X'FF'
         COPY  REGEQU
         END   FXTCOMM
./ ADD NAME=FXTINIT  0100-99056-99056-1500-00366-00366-00000-FX-REL1

         TITLE 'FXTINIT TSO INTERFACE INITIALIZATION'
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  MODULE NAME: FXTINIT                                               *
*                                                                     *
*  TSO interface initialization                                       *
*   1) Acquire storage for ACB, RPL, etc                              *
*   2) Determine an available user interface ACB name and open the    *
*      ACB.                                                           *
*   3) Determine the user's FX user authority.                        *
*   4) Define the SPF variables                                       *
*                                                                     *
* ------------------------------------------------------------------- *
TINIT    FXPRFX 'TSO INTERFACE INITIALIZATION',COMM=FXTCOMM
FXTINIT  AMODE 31
FXTINIT  RMODE ANY
         ITRACE ID=INIT
         MVC   DXDID,MODID           WORK AREA INITIALIZED
         LA    R0,ACBL               ACB'S SIZE
         ST    R0,COMMACBL           SET ACB SIZE
         GETMAIN RU,                 ACQUIRE STORAGE FOR AN ACB        +
               LV=(0),               .. SIZE                           +
               LOC=BELOW             .. FROM BELOW THE LINE
         ST    R1,COMMACB            SAVE ACB'S ADDRESS
         LR    R2,R1                 COPY ACB ADDRESS
         USING IFGACB,R2             DEFINE BASE
         MVC   0(ACBL,R1),ACBI       INITIALIZE ACB
         ST    R11,ACBUSER           SET FXTCOMM ADDRESS IN ACB
         LA    R0,EXLSTL             EXLST SIZE
         ST    R0,COMMXLSL           SET EXLST'S SIZE
         GETMAIN RU,                 ACQUIRE STORAGE FOR AN EXIT LIST  +
               LV=(0),               .. SIZE                           +
               LOC=BELOW             .. FROM BELOW THE LINE
         MVC   0(EXLSTL,R1),EXLSTI   INITIALIZE EXIT LIST
         ST    R1,COMMXLST           SAVE EXIT LIST'S ADDRESS
         LA    R0,COMMAPLL           APPLID'S LENGTH ADDRESS
         ST    R0,ACBAPID            SET APPLID ADDRESS IN ACB
         ST    R1,ACBEXLST           SET EXLST'S ADDRESS
         USING IFGEXLST,R1           DEFINE BASE
         XC    EXLATTNP,EXLATTNP     NO ATTN EXIT
         MVC   EXLLERP,ALERAD        SET LERAD EXIT ADDRESS
         LA    R0,RPLL               RPL'S SIZE
         ST    R0,COMMRPLL           SET RPL SIZE
         GETMAIN RU,                 ACQUIRE STORAGE FOR RPL           +
               LV=(0),               .. SIZE                           +
               LOC=BELOW             .. FROM BELOW THE LINE
         ST    R1,COMMRPL            SAVE RPL'S ADDRESS
         MVC   0(RPLL,R1),RPLI       INITIALIZE RPL
         LA    R0,RPLEXTL            RPL EXTENSION SIZE
         ST    R0,COMMRPXL           SET RPL EXTENSION'S SIZE
         GETMAIN RU,                 ACQUIRE STORAGE FOR RPL EXTENSION +
               LV=(0),               .. SIZE                           +
               LOC=BELOW             .. FROM BELOW THE LINE
         ST    R1,COMMRPLX           SAVE RPL'S ADDRESS
         LR    R5,R1                 COPY RPL EXTENSION'S ADDRESS
         MVC   0(RPLEXTL,R1),RPLEXTI INITIALIZE RPL EXTENSION
         L     R3,COMMRPL            RPL'S ADDRESS
         USING IFGRPL,R3             DEFINE BASE
         ST    R1,RPLAAREA           SET RPL EXTENSION'S ADDRESS
         MVC   RPLDACB,COMMACB       SET ACB'S ADDRESS
         LA    R0,NIBL               NIB'S SIZE
         ST    R0,COMMNIBL           SET NIB'S SIZE
         GETMAIN RU,                 ACQUIRE STORAGE FOR NIB           +
               LV=(0),               .. SIZE                           +
               LOC=BELOW             .. FROM BELOW THE LINE
         MVC   0(NIBL,R1),NIBI       INITIALIZE NIB
         ST    R1,COMMNIB            SET NIB'S ADDRESS
         LR    R4,R1                 COPY NIB'S ADDRESS
         GETMAIN RU,                 ACQUIRE STORAGE FOR I/O AREA      +
               LV=COMMIOSZ,          .. SIZE                           +
               LOC=BELOW             .. FROM BELOW THE LINE
         ST    R1,COMMIOA            SAVE I/O AREA ADDRESS
         LR    R6,R1                 SET I/O AREA ADDRESS
         USING USERREQ,R6            DEFINE BASE
         GETMAIN RU,                 ACQUIRE STORAGE FOR OPEN/CLOSE    +
               LV=OCPLL,             .. SIZE                           +
               LOC=BELOW             .. FROM BELOW THE LINE
         LR    R7,R1                 COPY STORAGE ADDRESS
         MVC   0(OCPLL,R7),OCPLI     COPY OPEN/CLOSE PARM LIST
         ITRACE ID=OPENACB           OPENING ACB
         MVC   DXDFUNC,OPENACB       LAST FUNCTION IS OPEN
         LOAD  EP=FXACB              LOAD ACB NAMES MODULE
         LR    R8,R0                 COPY ACB NAMES ADDRESS
TINIT010 DS    0H
         ITRACE ID=ACBNAME,          TRACE EACH OPEN ATTEMPT           +
               DATA1=0(R8)           .. TRACE THE NAME
         MVC   COMMAPLN,0(R8)        COPY ACB NAME
         OPEN  ((R2)),MF=(E,(R7))    OPEN ACB
         ITRACE ID=OPENRC,           RETURN CODE FROM OPEN             +
               RDATA1=R15            .. TRACE RETURN CODE
         LTR   R15,R15               OPEN SUCCESSFUL?
         BZ    TINIT020              YES
         LA    R8,8(R8)              NEXT ACB NAME
         CLI   0(R8),X'FF'           END OF TABLE?
         BNE   TINIT010              NO
         DELETE EP=FXACB             DELETE ACB NAMES MODULE
         ITRACE ID=NOAPPL
         LA    R2,MSG01L             MESSAGE LENGTH
         GETMAIN RU,                 ACQUIRE STORAGE FOR TPUT          +
               LV=(R2),              .. SIZE OF AREA                   +
               LOC=BELOW             .. FROM BELOW THE LINE
         LR    R3,R1                 COPY STORAGE ADDRESS
         MVC   0(MSG01L,R3),MSG01    COPY MESSAGE
         TPUT  (R3),(R2)             ISSUE TPUT
         FREEMAIN RU,A=(3),LV=MSG01L FREE MESSAGE STORAGE
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         B     EXIT0000              EXIT
TINIT020 DS    0H
         DELETE EP=FXACB             DELETE ACB NAMES MODULE
         OI    COMMFLAG,$ACBOPEN     ACB IS OPEN
         FREEMAIN RU,A=(R7),LV=OCPLL FREEMAIN OPEN/CLOSE PARM LIST
         ITRACE ID=SETLOGON          OPENING ACB
         MVC   DXDFUNC,SETLOGON      LAST FUNCTION
         SETLOGON ACB=(R2),          ISSUE SETLOGON                    +
               RPL=(R3),             .. RPL FOR REQUEST                +
               OPTCD=START           .. ENABLE EXIT
         LTR   R15,R15               SET LOGON SUCCESSFUL?
         BZ    TINIT030              YES
         ITRACE ID=LOGONF,           SET LOGON FAILED                  +
               RDATA1=R15            .. TRACE RETURN CODE
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         B     EXIT0000              EXIT
TINIT030 DS    0H
         USING ISTDNIB,R4            DEFINE BASE
         MVC   NIBSYM,COMMFX         SET FX STC'S APPL NAME
         ITRACE ID=INQUIRE
         MVC   DXDFUNC,INQUIRE       SET LAST COMMAND
         INQUIRE RPL=(R3),           ISSUE INQUIRE                     +
               NIB=(R4),             .. NIB'S ADDRESS                  +
               OPTCD=APPSTAT         .. WE WANT PARTNER'S STATUS
         CLI   RPLFDB3,0             PARTNER READY?
         BE    TINIT040              YES
         ITRACE ID=FXNTRDY           FX STC IS NOT READY
         LA    R2,MSG02L             MESSAGE LENGTH
         GETMAIN RU,                 ACQUIRE STORAGE FOR TPUT          +
               LV=(R2),              .. SIZE OF AREA                   +
               LOC=BELOW             .. FROM BELOW THE LINE
         LR    R3,R1                 COPY STORAGE ADDRESS
         MVC   0(MSG02L,R3),MSG02    COPY MESSAGE
         TPUT  (R3),(R2)             ISSUE TPUT
         FREEMAIN RU,A=(3),LV=MSG02L FREE MESSAGE STORAGE
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         B     EXIT0000              EXIT
TINIT040 DS    0H
         ITRACE ID=CNOS
         MVC   DXDFUNC,CNOS          LAST FUNCTION ATTEMPTED
         USING ISTRPL6X,R5           DEFINE BASE
         MVC   RPL6LU,COMMFX         SET PARTNER'S LU NAME
         APPCCMD CONTROL=OPRCNTL,    ISSUE APPC COMMAND                +
               QUALIFY=CNOS,         .. CHANGE NUMBER OF SESSIONS      +
               RPL=(R3),             .. RPL'S ADDRESS                  +
               LOGMODE=LU62P         .. LOGMODE
         CLC   RPL6RC,X000001        CNOS ACCEPTED?
         BE    TINIT050              YES
         ITRACE ID=CNOSFAIL,         CNOS FAILED                       +
               DATA1=RPL6RC          .. TRACE RETURN CODES
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         B     EXIT0000              AND EXIT
TINIT050 DS    0H
         ITRACE ID=ALLOC             ALLOCATE A SESSION
         MVC   DXDFUNC,ALLOCATE      LAST FUNCTION
         MVC   0(FMH5L,R6),FMH5      COPY FMH5 TO I/O AREA
         APPCCMD CONTROL=ALLOC,      ISSUE APPC COMMAND                +
               QUALIFY=ALLOCD,       .. ALLOCATE A SESSION             +
               RPL=(R3),             .. RPL'S ADDRESS                  +
               AREA=(R6),            .. FMH'S ADDRESS                  +
               RECLEN=FMH5L,         .. FMH'S LENGTH                   +
               LOGMODE=LU62P         .. LOGMODE
         OC    RPL6RC,RPL6RC         ALL ZEROS?
         BZ    TINIT060              YES
         ITRACE ID=ALOCFAIL,         ALLOCATE FAILED                   +
               DATA1=RPL6RC          .. TRACE RETURN CODES
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         B     EXIT0000              AND EXIT
TINIT060 DS    0H
         ITRACE ID=CONVID,                                             +
               DATA1=RPL6CNVD        CONVERSATION ID
         OI    COMMFLAG,$SESSALO     SESSION IS ALLOCATED
         MVC   COMMCID,RPL6CNVD      SAVE CONVERSATION ID
         L     R1,CVTPTR             CVT ADDRESS
         USING CVT,R1                DEFINE BASE
         ICM   R15,15,CVTSMCA        SMF AREA ADDRESS
         BZ    ERR0010               SMF NOT ACTIVE!
         USING SMCABASE,R15          DEFINE BASE
         MVC   USERSMF,SMCASID       COPY SMF ID
         USING PSA,R0                DEFINE BASE
         L     R1,PSAANEW            OUR ASCB'S ADDRESS
         USING ASCB,R1               DEFINE BASE
         L     R14,ASCBASXB          ASXB ADDRESS
         USING ASXB,R14              DEFINE ASCB BASE
         L     R15,ASXBSENV          ACEE'S ADDRESS
         USING ACEE,R15              DEFINE ACEE BASE
         SR    R1,R1                 CLEAR REGISTER
         IC    R1,ACEEUSRL           USER ID LENGTH
         BCTR  R1,0                  MINUS 1
         MVC   USERID,COMMBLKS       INITIALIZE USERID
         EX    R1,UIDMVC             COPY USER ID
         ITRACE ID=IDENTIFY          IDENTIFY USER TYPE
         LA    R7,IDL                DATA LENGTH
         STH   R7,USERLEN            SET LENGTH
         MVC   USERJOB,COMMBLKS      SET JOB NAME TO BLANKS
         MVC   USERMOD,UID           SET PROCESSING MODULE'S SUFFIX
         MVC   DXDFUNC,SEND          LAST COMMAND
         APPCCMD CONTROL=SEND,       ISSUE APPC COMMAND                +
               QUALIFY=DATA,         .. SEND DATA                      +
               RPL=(R3),             .. RPL'S ADDRESS                  +
               AREA=(R6),            .. I/O AREA'S ADDRESS             +
               RECLEN=(R7),          .. I/O LENGTH                     +
               CONVID=COMMCID        .. CONVERSATION ID
         ITRACE ID=RECVID            RECEIVE RESPONSE FROM FX STC
         MVC   DXDFUNC,RECEIVE       LAST COMMAND ATTEMPTED
         L     R8,=A(COMMIOSZ)       I/O AREA SIZE
         APPCCMD CONTROL=RECEIVE,    ISSUE APPC COMMAND                +
               QUALIFY=SPEC,         .. SPECIFIC CONVERSATION          +
               RPL=(R3),             .. RPL'S ADDRESS                  +
               FILL=LL,              .. ONLY 1 LOGICAL RECORD          +
               AREA=(R6),            .. I/O AREA                       +
               AREALEN=(R8),         .. I/O AREA SIZE                  +
               CONMODE=CS,           .. CONTINUE SPECIFIC              +
               CONVID=COMMCID        .. CONVERSATION ID
         OC    RPL6RC,RPL6RC         ALL ZEROS?
         BZ    TINIT080              YES
         ITRACE ID=RECVIDF,          RECEIVE IDENTIFY FAILED           +
               DATA1=RPL6RC          .. TRACE RETURN CODES
         B     EXIT0000              AND EXIT
TINIT080 DS    0H
         CLI   USERAUTH,0            IS USER AUTHORIZED TO USE FX?
         BE    EXIT0000              NO
         MVC   COMMUATH,USERAUTH     SAVE USER'S AUTHORITY LEVEL
         MVC   COMMSYSN,USERSYSN     FX SYSTEM'S NAME
         MVC   COMMUID,USERID        COPY USER'S ID
         ITRACE ID=USERAUTH,                                           +
               DATA1=COMMUATH
         ITRACE ID=VARDEF            DEFINING ISPF VARIABLES
         MVI   VARCMD,$VARDEFA       SET COMMAND (DEFINE ALL)
         LA    R1,COMMSYSN           VARIABLE DATA BASE
         ST    R1,VARAREA            PASS DATA ADDRESS
         LA    R1,FXTVTBLE           VARIABLE CONTROL DATA
         ST    R1,VARTBLE            PASS CONTROL DATA ADDRESS
         LA    R1,VARREQ             VAR PARM BLOCK ADDRESS
         L     R15,ATVAR             FXTVAR ENTRY POINT
         BALR  R14,R15               LINK TO FXVAR
         B     EXIT0000              AND EXIT
ERR0010  DS    0H
         ITRACE ID=NOSMF
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS
         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS
         BR    R14                   RETURN
UIDMVC   MVC   USERID(0),ACEEUSRI    COPY USER ID
* ------------------------------------------------------------------- *
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSTART DC    Q(DXDTINIT)           DISPLACEMENT TO WORK AREA
ALERAD   DC    V(FXLERAD)            LERAD EXIT ADDRESS
X000001  DC    X'00000001'
OPENACB  DC    CL8'OPENACB'
SETLOGON DC    CL8'SETLOGON'
INQUIRE  DC    CL8'INQUIRE'
CNOS     DC    CL8'CNOS'
ALLOCATE DC    CL8'ALLOCATE'
SEND     DC    CL8'SEND'
RECEIVE  DC    CL8'RECEIVE'
UID      DC    CL4'UID'
OCPLI    OPEN  (*,INPUT),MF=L        OPEN/CLOSE PARM LIST
OCPLL    EQU   *-OCPLI
ACBI     ACB   AM=VTAM,              GENERATE VTAM ACB                 +
               MACRF=LOGON,                                            +
               EXLST=*,                                                +
               APPLID=*
ACBL     EQU   *-ACBI
EXLSTI   EXLST AM=VTAM,              GENERATE VTAM EXIT LIST           +
               ATTN=*,                                                 +
               LERAD=*
EXLSTL   EQU   *-EXLSTI
NIBI     NIB   MODE=RECORD,          GENERATE VTAM NIB                 +
               NAME=FX
NIBL     EQU   *-NIBI
RPLI     RPL   AM=VTAM,              GENERATE VTAM RPL                 +
               AAREA=RPLEXTI
RPLL     EQU   *-RPLI
RPLEXTI  ISTRPL6
RPLEXTL  EQU   *-RPLEXTI
         FMH5  DSECT=NO,TRAN=USER    GENERATE FMH5
MSG01    DC    C'FXTINIT01E * ALL USER INTERFACE APPLID''S ARE BUSY, TR+
               Y LATER'
MSG01L   EQU   *-MSG01
MSG02    DC    C'FXTINIT02E * FX IS NOT ACTIVE'
MSG02L   EQU   *-MSG02
         LTORG
* ------------------------------------------------------------------- *
*                                                                     *
*        WORK AREAS                                                   *
*                                                                     *
* ------------------------------------------------------------------- *
DXDTINIT DSECT
DXDID    DS    CL8
DXDSAVE  DS    18F
DXDFUNC  DC    CL8' '                LAST FUNCTION ATTEMPTED
         VARREQ  DSECT=NO
* ------------------------------------------------------------------- *
*              COMMON DATA MAP                                        *
* ------------------------------------------------------------------- *
         FXTCOMM TYPE=DSECT
* ------------------------------------------------------------------- *
*              USER REQUEST/RESPONSE BLOCK                            *
* ------------------------------------------------------------------- *
         USERREQ
USERSMF  DS    CL4
USERID   DS    CL8
USERJOB  DS    CL8
USERAUTH DS    X
USERSYSN DS    CL20
IDL      EQU   *-USERREQ
* ------------------------------------------------------------------- *
*              ACB                                                    *
* ------------------------------------------------------------------- *
         IFGACB AM=VTAM
* ------------------------------------------------------------------- *
*              RPL                                                    *
* ------------------------------------------------------------------- *
         IFGRPL AM=VTAM
* ------------------------------------------------------------------- *
*              EXLST                                                  *
* ------------------------------------------------------------------- *
         IFGEXLST AM=VTAM
* ------------------------------------------------------------------- *
*              NIB                                                    *
* ------------------------------------------------------------------- *
         ISTDNIB
* ------------------------------------------------------------------- *
*              PSA                                                    *
* ------------------------------------------------------------------- *
         IHAPSA   DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*              CVT                                                    *
* ------------------------------------------------------------------- *
         CVT      DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*              ASCB                                                   *
* ------------------------------------------------------------------- *
         IHAASCB  DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*              ASXB                                                   *
* ------------------------------------------------------------------- *
         IHAASXB  DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*              ACEE                                                   *
* ------------------------------------------------------------------- *
         IHAACEE
* ------------------------------------------------------------------- *
*              SMF                                                    *
* ------------------------------------------------------------------- *
         IEESMCA
* ------------------------------------------------------------------- *
*              EQUATES                                                *
* ------------------------------------------------------------------- *
         COPY REGEQU
         ABCODES
         END  FXTINIT
./ ADD NAME=FXTMAIN  0100-99056-99056-1500-00320-00320-00000-FX-REL1

* ------------------------------------------------------------------- *
*                                                                     *
*  Name: FXTMAIN                                                      *
*                                                                     *
*  TSO interface mainline.                                            *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY  OPTIONS
FXTMAIN  CSECT
FXTMAIN  AMODE 31
FXTMAIN  RMODE ANY
         USING FXTMAIN,R12          DEFINE BASE
         STM   R14,R12,12(R13)      SAVE ENTRY REGISTERS
         LR    R12,R15              COPY BASE
         B     @@000001             BRANCH AROUND EYECATCHER
         DC    ((PFXMODNM-MODPRFX)-(*-FXTMAIN))X'00'
MODID    DC    CL8'FXTMAIN'         MODULE NAME
         DC    CL8'&SYSDATE'        DATE OF ASSEMBLY
         DC    CL6'&SYSTIME'        TIME OF ASSEMBLY
@@000001 DS    0H
* ------------------------------------------------------------------- *
*        ACQUIRE STORAGE FOR WORK AREAS                               *
* ------------------------------------------------------------------- *
         LTR   R1,R1                PARAMETER PASSED?
         BZ    ERR0010              NO
         ICM   R9,15,0(R1)          PARAMETER ADDRESS
         BZ    ERR0010              NO PARAMETER
         L     R3,DXDSIZE           WORK AREA SIZE
         GETMAIN RU,                ACQUIRE WORK AREA STORAGE          +
               LV=(R3),             .. WORK AREA SIZE IS IN R3         +
               LOC=ANY              .. MAY BE ABOVE OR BELOW
         LR    R4,R1                COPY STORAGE ADDRESS
         LR    R10,R1               COPY STORAGE ADDRESS
         LR    R2,R1                COPY WORK AREA ADDRESS
         SR    R1,R1                CLEAR REGISTER
         MVCL  R2,R0                CLEAR WORK AREA
         A     R10,DXDSTART         PLUS DISPLACEMENT TO OUR PORTION
         USING DXDTMAIN,R10         DEFINE WORK AREA BASE
         MVC   DXDID,MODID          IDENTIFY WORK AREA OWNER
         LA    R2,DXDSAVE           OUR SAVE AREA ADDRESS
         ST    R13,4(R2)            CHAIN CALLER'S SAVE AREA TO OURS
         ST    R2,8(R13)            OUR SAVE AREA TO CALLER'S
         LR    R13,R2               SET SAVE AREA ADDRESS
* ------------------------------------------------------------------- *
*        LOAD COMMON DATA MODULE  (FXTCOMM)                           *
* ------------------------------------------------------------------- *
         LOAD  EP=FXTCOMM           LOAD COMMON DATA MODULE
         LR    R11,R0               COPY TO PERMANENT BASE
         USING FXTCOMM,R11          DEFINE COMMON AREA BASE
         ST    R12,ATMAIN           SET MAINLINE'S ADDRESS IN COMMON
         ST    R4,COMMDXDA          SET DYNAMIC WORK AREA ADDRESS
         SR    R2,R2                CLEAR REGISTER
         ICM   R2,3,0(R9)           PARAMETER LENGTH
         BZ    ERR0010              NO PARAMETER
         CH    R2,H8                TOO LONG?
         BH    ERR0020              YES
         BCTR  R2,0                 FOR EXECUTE
         EX    R2,APPLMVC           COPY FX STC'S APPL NAME
         MVC   ADSNVER,VDSNVER      SET DATA SET NAME VERIFICATION ADDR
         MVC   AMEMVER,VMEMVER      SET MEMBER NAME VERIFICATION ADDR
         MVC   ATINIT,VTINIT        SET INITIALIZATION MODULE ADDRESS
         MVC   ATNODE,VTNODE        SET NODE DISPLAY MODULE ADDRESS
         MVC   ATREQE,VTREQE        SET REQUEST ENTRY PROCSSOR ADDR
         MVC   ATREQI,VTREQI        SET REQUEST INQUIRY PROCESSOR ADDR
         MVC   ATSHUT,VTSHUT        SET FX SHUTDOWN PROCESSOR ADDR
         MVC   ATSNAP,VTSNAP        SET FX SNAP SHOT PROCESSOR ADDR
         MVC   ATTERM,VTTERM        SET TERMINATION MODULE ADDRESS
         MVC   ATVAR,VTVAR          SET SPF VARIABLE DEFINE/DELETE ADDR
         LOAD  EP=FX24              24-BIT MODE MODULE
         ST    R0,A24               SAVE 24-BIT MODE MODULE ADDRESS
* ------------------------------------------------------------------- *
*        ACQUIRE STORAGE FOR TRACE TABLE                              *
* ------------------------------------------------------------------- *
         L     R3,TRSIZE            TRACE TABLE SIZE
         GETMAIN RU,                ACQUIRE STORAGE FOR TRACE TABLE    +
               LV=(R3),             .. SIZE IS IN R3                   +
               LOC=ANY              .. MAY BE ABOVE OR BELOW
         ST    R1,TRADDR            SAVE TRACE TABLE STORAGE ADDRESS
         SR    R0,R0                ASSUME ON A 32-BYTE BOUNDARY
         TM    TRADDR+3,X'07'       ALREADY ON 32-BYTE BOUNDARY?
         BNO   INIT0010             YES
         SRL   R1,5                 SHIFT OUT LOW BITS ..
         SLL   R1,5                 .. TO ROUND TO 32-BYTE BOUNDARY
         LA    R1,32(R1)            PLUS 32
         LA    R0,TRENTRYL          1 LESS TRACE ENTRY AVAILABLE
INIT0010 DS    0H
         ST    R1,TRFIRST           FIRST TRACE ENTRY
         ST    R1,TRCURR            CURRENT TRACE ENTRY
         A     R1,TRSIZE            LAST ENTRY IN TABLE
         SH    R1,=Y(TRENTRYL)      MINUS 1 ENTRY
         SR    R1,R0                MINUS 1 MORE IF NECESSARY
         ST    R1,TRLAST            LAST TRACE ENTRY ADDRESS
* ------------------------------------------------------------------- *
*        LOAD SPF INTERFACE MODULE                                    *
* ------------------------------------------------------------------- *
         ITRACE ID=LOADSPF
         LOAD  EP=ISPLINK           LOAD SPF INTERFACE MODULE
         ST    R0,AISPLINK          SET ADDRESS IN COMMON AREA
* ------------------------------------------------------------------- *
*        CALL INITIALIZATION MODULE                                   *
* ------------------------------------------------------------------- *
         ITRACE ID=CALLINIT
         L     R15,ATINIT           INITIALIZATION MODULE ENTRY POINT
         BALR  R14,R15              LINK TO INITIALIZATION MODULE
         TM    COMMFLAG,$ABORT      ERRORS IN DURING FXTINIT?
         BO    TERM0010             YES
         CLI   COMMUATH,0           USER AUTHORIZED TO USE FX?
         BE    ERR0030              NO
MAIN0010 DS    0H
         ITRACE ID=DISPMENU         DISPLAY MENU
         MVC   COMMPANL,MENU1       ASSUME 'NORMAL' USER
         CLI   COMMUATH,$COMMUS3    AN 'ADMINISTRATOR'?
         BL    MAIN0020             NO
         MVC   COMMPANL,MENU2       CHANGE TO MENU 2
MAIN0020 DS    0H
         LA    R1,DISPLAY           COMMAND'S ADDRESS
         ST    R1,WKSPFP1           SET ADDRESS IN PARM LIST
         LA    R1,COMMPANL          PANEL NAME'S ADDRESS
         ST    R1,WKSPFP2           SET ADDRESS IN PARM LIST
         OI    WKSPFP2,X'80'        FLAG END-OF-LIST
         LA    R1,WKSPFPRM          PARM LIST'S ADDRESS
         L     R15,AISPLINK         SPF INTERFACE ENTRY POINT
         BALR  R14,R15              LINK TO SPF TO DISPLAY MENU
         CH    R15,H8               END?
         BE    TERM0010             YES, BEGIN TERMINATION
         TM    COMMFLAG,$SHUT       STC SHUTDOWN?
         BO    TERM0000             FORCE EXIT
         MVC   COMMMSG,COMMBLKS     INITIALIZE MESSAGE
         MVC   DXDFNC,COMMFNC       COPY FUNCTION CODE
         MVI   COMMFNC,C' '         RESET FUNCTION CODE
         CLI   DXDFNC,C'1'          ENTER A NEW REQUEST?
         BE    MAIN0040             YES
         CLI   DXDFNC,C'2'          CHECK ON PREVIOUS REQUEST?
         BE    MAIN0050             YES
         CLI   DXDFNC,C'X'          EXIT?
         BE    TERM0010             YES
         CLI   COMMUATH,$COMMUS3    'ADMINISTRATOR' USER?
         BL    MAIN0030             NO
         CLI   DXDFNC,C'3'          FX STC SNAPSHOT?
         BE    MAIN0060             YES
         CLI   DXDFNC,C'4'          SHUTDOWN FX STC?
         BE    MAIN0070             YES
MAIN0030 DS    0H
         MVC   COMMMSG(MSG01L),MSG01 SET MESSAGE
         B     MAIN0020             RE-SEND MENU
MAIN0040 DS    0H
         ITRACE ID=ENTERREQ         ENTER A NEW REQUEST
         L     R15,ATREQE           REQUEST ENTRY PROCESSOR ENTRY POINT
         BALR  R14,R15              LINK TO PROCESSOR
         TM    COMMFLAG,$ABORT      WAS ABORT FLAG SET?
         BO    ERR0040              YES
         B     MAIN0020             RE-SEND MENU
MAIN0050 DS    0H
         ITRACE ID=REQSTAT          CHECK ON A REQUEST'S STATUS
         L     R15,ATREQI           REQUEST INQUIRY PROCESSOR
         BALR  R14,R15              LINK TO PROCESSOR
         TM    COMMFLAG,$ABORT      WAS ABORT FLAG SET?
         BO    ERR0050              YES
         B     MAIN0020             RE-SEND MENU
MAIN0060 DS    0H
         ITRACE ID=STCSNAP          SNAP/SHOT FX STC
         L     R15,ATSNAP           SNAP SHOT MODULE ENTRY POINT
         BALR  R14,R15              LINK TO PROCESSOR
         TM    COMMFLAG,$ABORT      WAS ABORT FLAG SET?
         BO    ERR0060              YES
         B     MAIN0020             RE-SEND MENU
MAIN0070 DS    0H
         ITRACE ID=STCSHUT          SHUTDOWN FX STC
         L     R15,ATSHUT           STC SHUTDOWN PROCESSOR ENTRY POINT
         BALR  R14,R15              LINK TO PROCESSOR
         TM    COMMFLAG,$ABORT      WAS ABORT FLAG SET?
         BO    ERR0070              YES
         B     MAIN0020             RE-SEND MENU
TERM0000 DS    0H
         ITRACE ID=SHUTDOWN         STC WAS SHUTDOWN, FORCING EXIT
         LA    R2,MSG02             MESSAGE TEXT'S ADDRESS
         LA    R3,MSG02L            MESSAGE'S LENGTH
         BAL   R9,TPUT0000          ISSUE 'NOT AUTHORIZED' MESSAGE
TERM0010 DS    0H
         ITRACE ID=TERM             TERMINATION BEGINNING
         NI    COMMFLAG,255-$ABORT  RESET ABORT FLAG (IF IT'S ON)
         L     R15,ATTERM           TERMINATION MODULE ENTRY POINT
         BALR  R14,R15              LINK TO TERMINATION MODULE
         TM    COMMFLAG,$ABORT      ABORT FLAG SET?
         BNO   EXIT0000             NO
         ITRACE ID=TERMFAIL
         ABEND $U0048,DUMP,,USER
ERR0010  DS    0H
         ITRACE ID=NOPARM
         LA    R2,MSG03             NO PARM MESSAGE
         LA    R3,MSG03L            MESSAGE'S LENGTH
         BAL   R9,TPUT0000          ISSUE MESSAGE
         LA    R3,12                SET RETURN CODE
         B     EXIT0020             AND EXIT
ERR0020  DS    0H
         ITRACE ID=PARMLONG
         LA    R2,MSG04             PARM TOO LONG MESSAGE
         LA    R3,MSG04L            MESSAGE'S LENGTH
         BAL   R9,TPUT0000          ISSUE MESSAGE
         MVI   COMMRC,14            SET RETURN CODE
         B     EXIT0010             AND EXIT
ERR0030  DS    0H
         ITRACE ID=NOTAUTH          USER IS NOT AUTHORIZED TO USE FX
         LA    R2,MSG05             MESSAGE TEXT'S ADDRESS
         LA    R3,MSG05L            MESSAGE'S LENGTH
         BAL   R9,TPUT0000          ISSUE 'NOT AUTHORIZED' MESSAGE
         MVI   COMMRC,20            SET RETURN CODE
         B     TERM0010             AND EXIT
ERR0040  DS    0H
         ITRACE ID=TREQFAIL         ERROR IN FXTREQ
         ABEND $U0044,DUMP,,USER
ERR0050  DS    0H
         ITRACE ID=RSTATF           ERROR IN FXTREQS
         ABEND $U0045,DUMP,,USER
ERR0060  DS    0H
         ITRACE ID=SNAPF            ERROR IN FXTSNAP
         ABEND $U0047,DUMP,,USER
ERR0070  DS    0H
         ITRACE ID=SHUTF            ERROR IN FXTSHUT
         ABEND $U0071,DUMP,,USER
TPUT0000 DS    0H
         GETMAIN RU,                ACQUIRE STORAGE FOR MESSAGE TEXT   +
               LV=(R3),             .. SIZE OF MESSAGE                 +
               LOC=BELOW            .. FROM BELOW THE LINE
         BCTR  R3,0                 FOR EXECUTE
         EX    R3,TPUTMVC           MOVE MESSAGE TEXT
         LR    R2,R1                COPY MESSAGE ADDRESS
         LA    R3,1(R3)             RESTORE FULL LENGTH
         TPUT  (R2),(R3)            ISSUE MESSAGE
         FREEMAIN RU,A=(2),LV=(3)   FREE MESSAGE AREA
         BR    R9                   RETURN
TPUTMVC  MVC   0(0,R1),0(R2)        COPY MESSAGE
EXIT0000 DS    0H
         ITRACE ID=EXIT
         DELETE EP=FX24             DELETE 24-BIT MODE MODULE
         L     R0,TRSIZE            TRACE TABLE SIZE
         L     R1,TRADDR            TRACE TABLE STORAGE ADDRESS
         FREEMAIN RU,A=(1),LV=(0)   FREEMAIN TRACE TABLE STORAGE
EXIT0010 DS    0H
         L     R2,COMMDXDA          SAVE WORK AREA STORAGE ADDRESS
         SR    R3,R3                CLEAR REGISTER
         IC    R3,COMMRC            LOAD RETURN CODE
         DELETE EP=FXTCOMM          DELETE COMMON MODULE
         L     R0,DXDSIZE           WORK AREA STORAGE SIZE
         L     R13,4(R13)           RESTORE CALLER'S SAVE AREA ADDRESS
         FREEMAIN RU,A=(2),LV=(0)   FREEMAIN WORK AREA STORAGE
EXIT0020 DS    0H
         L     R14,12(R13)          RESTORE R14
         LR    R15,R3               SET RETURN CODE
         LM    R0,R12,20(R13)       RESTORE REMAINING REGISTERS
         BR    R14                  EXIT
APPLMVC  MVC   COMMFX(0),2(R9)      MOVE APPL NAME TO COMMON AREA
* ------------------------------------------------------------------- *
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSTART DC    Q(DXDTMAIN)          DISPLACEMENT TO WORK AREA
DXDSIZE  CXD                        WORK AREA TOTAL SIZE
VDSNVER  DC    V(FXDSNVER)          DATA SET NAME VERIFICATION
VMEMVER  DC    V(FXMEMVER)          MEMBER NAME VERIFICATION
VTINIT   DC    V(FXTINIT)           INITIALIZATION
VTNODE   DC    V(FXTNODE)           NODE DISPLAY
VTREQE   DC    V(FXTREQE)           TRANSMISSION REQUEST ENTRY
VTREQI   DC    V(FXTREQI)           TRANSMISSION REQUEST INQUIRY
VTSHUT   DC    V(FXTSHUT)           STC SHUTDOWN
VTSNAP   DC    V(FXTSNAP)           STC SNAP SHOT
VTTERM   DC    V(FXTTERM)           TERMINATION
VTVAR    DC    V(FXTVAR)            SPF VARIABLE DEFINE/DELETE
H8       DC    H'8'
HEX0000  DC    8X'00'
HEXCHAR  DC    C'0123456789ABCDEF'
MENU1    DC    CL8'FXMENU1'
MENU2    DC    CL8'FXMENU2'
DISPLAY  DC    CL8'DISPLAY'
MSG01    DS    0C
         DC    CL11'FXTMAIN01E'
         DC    C'INVALID FUNCTION CODE'
MSG01L   EQU   *-MSG01
MSG02    DC    C'FXTMAIN02I * FX STC WAS SHUT DOWN, EXIT HAS BEEN FORCE+
               D'
MSG02L   EQU   *-MSG02
MSG03    DC    C'FXTMAIN03E * THE FX APPLID IS A REQUIRED PARAMETER'
MSG03L   EQU   *-MSG03
MSG04    DC    C'FXTMAIN04E * FX APPLID SPECIFIED IS MORE THAN 8 CHARAC+
               TERS LONG'
MSG04L   EQU   *-MSG04
MSG05    DC    C'FXTMAIN05E * YOU ARE NOT AUTHORIZED TO USE FX'
MSG05L   EQU   *-MSG05
         LTORG
* ------------------------------------------------------------------- *
*                                                                     *
*        WORK AREA                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
DXDTMAIN DSECT
DXDID    DS    CL8                  WORK AREA OWNER
DXDSAVE  DS    18F                  REGISTER SAVE AREA
DXDACOMM DS    A                    ADDRESS OF COMM AREA
WKSPFPRM DS    0A
WKSPFP1  DS    A                    PARM 1'S ADDRESS
WKSPFP2  DS    A                    PARM 2'S ADDRESS
WKSPFP3  DS    A                    PARM 3'S ADDRESS
WKSPFP4  DS    A                    PARM 4'S ADDRESS
WKSPFP5  DS    A                    PARM 5'S ADDRESS
DXDFNC   DS    C                    USER'S FUNCTION
* ------------------------------------------------------------------- *
*        MASTER FILE RECORD FORMAT                                    *
* ------------------------------------------------------------------- *
         REQBLOK DSECT=YES
* ------------------------------------------------------------------- *
*                                                                     *
*        COMMON MODULE                                                *
*                                                                     *
* ------------------------------------------------------------------- *
         FXTCOMM TYPE=DSECT
         COPY  REGEQU
         ABCODES
         END   FXTMAIN
./ ADD NAME=FXTNODE  0100-99056-99056-1500-00893-00893-00000-FX-REL1

         TITLE 'FXTNODE  DISPLAY NODES LIST'
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXTNODE                                               *
*                                                                     *
*  Manage the dynamic area displays of the node list.  The maximum    *
*  number of nodes is an installation option.  Since the number of    *
*  nodes can vary, I did not want to have SPF panels hard coded with  *
*  a given number of destinations.  The only two alternatives I could *
*  come up with were an SPF table or a dynamic area.  The dynamic     *
*  seems more flexible and gives the user more control so I chose     *
*  that method.  Also the file maintenance utility, the request entry,*
*  and request inquiry all need to display the node list.  Rather     *
*  duplicate the code necessary to manipulate the dynamic area and to *
*  edit/de-edit the data, this module is a "common" display facility. *
*  Because it is common to more than one FX load module, it cannot    *
*  use much of the "FXxCOMM" area.                                    *
*                                                                     *
* ------------------------------------------------------------------- *
TNODE    FXPRFX 'Node list display',                                   +
               COMM=FXMCOMM
FXTNODE  AMODE 31
FXTNODE  RMODE ANY
         CLC   DXDID,MODID           WORK AREA INITIALIZED?
         BE    DISP0010              YES
         ITRACE ID=INIT
         MVC   DXDID,MODID           WORK AREA INITIALIZED
DISP0010 DS    0H
         LR    R9,R1                 COPY PARAMETER BLOCK ADDRESS
         USING TNODEPRM,R9           DEFINE BASE
         L     R8,TNODEREQ           REQBLOK ADDRESS
         USING REQBLOK,R8            DEFINE BASE
         LOAD  EP=ISPLINK            LOAD SPF INTERFACE MODULE
         ST    R0,DXDSPFEP           SAVE ENTRY POINT ADDRESS
*---------------------------------------------------------------------*
*        Define SPF variables                                         *
*---------------------------------------------------------------------*
         ITRACE ID=DEFSPF
         MVI   VARCMD,$VARDEFA       SET COMMAND (DEFINE ALL)
         LA    R1,FXNDATA            DISPLAY DATA
         ST    R1,VARAREA            PASS DATA AREA ADDRESS
         LOAD  EP=FXNTBLE            LOAD VARIABLE CONTROL TABLE
         ST    R0,VARTBLE            SET TABLE ADDRESS
         LA    R1,VARREQ             VARIABLE REQUEST PARM BLOCK ADDR
         L     R15,VTVAR             VARIABLE MANAGER ENTRY POINT
         BALR  R14,R15               DEFINE VARIABLES
         MVC   DXDPANL,FXNODES1      SET DEFAULT PANEL NAME
         NI    DXDFLAG,255-$D2       SET DEFAULT PANEL FLAG
         BAL   R3,DYNAM000           ISSUE PQUERY
         MVC   LVLINE,VDEPTH         ASSUME ALL LINES ARE VISIBLE
         XC    DXDOFF,DXDOFF         CLEAR NODE OFFSET
         XC    DXDREL,DXDREL         CLEAR RELATIVE NODE NUMBER
         NI    DXDFLAG,255-$UPDATE   RESET 'UPDATED' FLAG
         LA    R1,$MAXNODE           MAXIMUM NUMBER OF NODES
         CLI   TNODECMD,$TNODEU      FULL UPDATE MODE?
         BE    DISP0030              YES
         CLI   TNODECMD,$TNODEE      NODE NAME ENTRY?
         BE    DISP0030              YES
         ICM   R1,3,REQNDE#          NUMBER OF NODES IN REQUEST
DISP0030 DS    0H
         STH   R1,DXDNODES           SAVE NUMBER TO DISPLAY
*---------------------------------------------------------------------*
*        Build dynamic area                                           *
*---------------------------------------------------------------------*
DISP0100 DS    0H
         ITRACE ID=BLDVDATA          BUILDING DYNAMIC AREA DATA
         L     R0,DXDVDA             DYNAMIC AREA ADDRESS
         L     R1,DXDVDL             DYNAMIC AREA SIZE
         SR    R14,R14               CLEAR REGISTER
         SR    R15,R15               CLEAR REGISTER
         ICM   R15,8,BLANKS          SET PAD CHARACTER
         MVCL  R0,R14                CLEAR DYNAMIC AREA STORAGE
         LA    R7,REQNDENM           TEXT'S ADDRESS
         USING REQNDENM,R7           DEFINE BASE
         AH    R7,DXDOFF             PLUS OFFSET
         LH    R1,DXDREL             RELATIVE NODE NUMBER ON FIRST LINE
         LA    R1,1(R1)              CONVERT TO ACTUAL NODE NUMBER
         CVD   R1,COMMDWRD           CONVERT TO DECIMAL
         ZAP   DXDNDE#,COMMDWRD      COPY FIRST NODE'S NUMBER
         LH    R4,DXDNODES           NUMBER OF NODES TO DISPLAY
         SH    R4,DXDREL             MINUS RELATIVE LINE NUMBER
         C     R4,LVLINE             MORE THAN ARE DISPLAYABLE?
         BNH   DISP0110              NO
         L     R4,LVLINE             OTHERWIZE LIMIT TO DISPLAY SIZE
DISP0110 DS    0H
         STH   R4,DXDVLINE           SAVE NUMBER OF LINES VISIBLE
         L     R5,DXDVDA             DYNAMIC AREA ADDRESS
         L     R6,VWIDTH             SCREEN WIDTH
DISP0120 DS    0H
         TM    DXDFLAG,$D2           BUILD SCREEN 2?
         BO    DISP0190              YES
         ITRACE ID=BLDD1             BUILDING DETAIL LINE TYPE 1
         USING D1,R5                 DEFINE BASE
         MVC   DXDWORK(4),=X'40202021'
         ED    DXDWORK(4),DXDNDE#    EDIT NODE NUMBER
         MVC   D1NDE#,DXDWORK+1      COPY EDITED NODE NUMBER
         MVC   D1NDENM,REQNDENM      COPY NODE NAME
         CLI   TNODECMD,$TNODEE      NODE NAME ENTRY ONLY?
         BE    DISP0180              YES
         UNPK  DXDWORK(3),REQNDEST(2)  UNPACK STATUS
         MVZ   DXDWORK(2),HEX0F      CLEAR ZONES
         TR    DXDWORK(2),HEXCHAR    CONVERT TO CHARACTER
         MVC   D1NDESH,DXDWORK       COPY STATUS IN HEX
         LA    R1,NODEMSG            NODE STATUS/MESSAGE TABLE
         USING NDESTAT,R1            DEFINE BASE
DISP0130 DS    0H
         CLI   NDEST,X'FF'           END OF TABLE?
         BE    DISP0140              YES
         CLC   NDEST,REQNDEST        STATUS MATCH?
         BE    DISP0140              YES
         LA    R1,NDESTATL(R1)       NEXT STATUS
         B     DISP0130              LOOP
DISP0140 DS    0H
         MVC   D1NDEST,NDEMSG        COPY STATUS MESSAGE
         CP    REQNDETD,P0           TRANSMIT DATE ZERO?
         BE    DISP0150              YES
         MVC   DXDWORK,=X'F0202021204B202020'
         ED    DXDWORK,REQNDETD      EDIT TRANSMISSION DATE
         MVC   D1NDETD,DXDWORK+1     COPY EDITED DATE
         UNPK  DXDWORK(9),REQNDETT(5) UNPACK TIME
         MVC   D1NDETT,DXDWORK       COPY UNPACKED TIME
DISP0150 DS    0H
         CP    REQNDERD,P0           RESTORE DATE ZERO?
         BE    DISP0160              YES
         MVC   DXDWORK,=X'F0202021204B202020'
         ED    DXDWORK,REQNDERD      EDIT RESTORE NOTIFICATION DATE
         MVC   D1NDERD,DXDWORK+1     COPY EDITED DATE
         UNPK  DXDWORK(9),REQNDERT(5) UNPACK TIME
         MVC   D1NDERT,DXDWORK       COPY UNPACKED TIME
DISP0160 DS    0H
         CLI   TNODECMD,$TNODED      DISPLAY ONLY?
         BE    DISP0170              YES
         ITRACE ID=ATTRUPDT
         MVI   D1ATTR1,1             SET ATTRIBUTE
         MVI   D1ATTR2,3             SET ATTRIBUTE
         MVI   D1ATTR3,3             SET ATTRIBUTE
         MVI   D1ATTR4,1             SET ATTRIBUTE
         MVI   D1ATTR5,3             SET ATTRIBUTE
         MVI   D1ATTR6,3             SET ATTRIBUTE
         MVI   D1ATTR7,3             SET ATTRIBUTE
         MVI   D1ATTR8,3             SET ATTRIBUTE
         MVI   D1ATTR9,1             SET ATTRIBUTE
         B     DISP0200
DISP0170 DS    0H
         ITRACE ID=ATTRDISP
         MVI   D1ATTR1,1             SET ATTRIBUTE
         MVI   D1ATTR2,1             SET ATTRIBUTE
         MVI   D1ATTR3,1             SET ATTRIBUTE
         MVI   D1ATTR4,1             SET ATTRIBUTE
         MVI   D1ATTR5,1             SET ATTRIBUTE
         MVI   D1ATTR6,1             SET ATTRIBUTE
         MVI   D1ATTR7,1             SET ATTRIBUTE
         MVI   D1ATTR8,1             SET ATTRIBUTE
         MVI   D1ATTR9,1             SET ATTRIBUTE
         B     DISP0200
DISP0180 DS    0H
         ITRACE ID=ATTRNTRY
         MVI   D1ATTR1,1             SET ATTRIBUTE
         MVI   D1ATTR2,3             SET ATTRIBUTE
         MVI   D1ATTR3,1             SET ATTRIBUTE
         MVI   D1ATTR4,1             SET ATTRIBUTE
         MVI   D1ATTR5,1             SET ATTRIBUTE
         MVI   D1ATTR6,1             SET ATTRIBUTE
         MVI   D1ATTR7,1             SET ATTRIBUTE
         MVI   D1ATTR8,1             SET ATTRIBUTE
         MVI   D1ATTR9,1             SET ATTRIBUTE
         B     DISP0200
DISP0190 DS    0H
         ITRACE ID=BLDD2             BUILD DETAIL LINE TYPE 2
         USING D2,R5                 DEFINE BASE
         MVC   DXDWORK(4),=X'40202021'
         ED    DXDWORK(4),DXDNDE#    EDIT NODE NUMBER
         MVC   D2NDE#,DXDWORK+1      COPY EDITED NODE NUMBER
         MVC   D2NDENM,REQNDENM      COPY NODE NAME
         ICM   R1,15,REQNDECR        CHECKPOINT RECORD NUMBER
         CVD   R1,COMMDWRD           CONVERT TO DECIMAL
         MVC   DXDWORK(8),=X'F020202020202020'
         ED    DXDWORK,COMMDWRD+4    EDIT CHECKPOINT RECORD NUMBER
         MVC   D2CKPTR,DXDWORK+1     COPY EDITED RECORD NUMBER
         UNPK  DXDWORK(7),REQNDECT(4) UNPACK CHECKPOINT TTR
         MVZ   DXDWORK(6),HEX0F      CLEAR ZONES
         TR    DXDWORK(6),HEXCHAR    TRANSLATE TO PRINTABLE
         MVC   D2CKPTT,DXDWORK       COPY CHECKPOINT TTR
         MVI   D2ATTR1,1             SET ATTRIBUTE
         MVI   D2ATTR2,1             SET ATTRIBUTE
         MVI   D2ATTR3,1             SET ATTRIBUTE
         MVI   D2ATTR4,1             SET ATTRIBUTE
         DROP  R5
DISP0200 DS    0H
         AP    DXDNDE#,P1            ADD 1 TO NODE NUMBER
         LA    R7,REQNDEL(R7)        NEXT NODE
DISP0210 DS    0H
         AR    R5,R6                 NEXT LINE ON DISPLAY
         BCT   R4,DISP0120
* --------------------------------------------------------------------*
*        Display panel                                                *
*---------------------------------------------------------------------*
DISP0220 DS    0H
         ITRACE ID=DISPLAY
         LA    R1,DISPLAY            COMMAND'S ADDRESS
         ST    R1,DXDSPF1            SET ADDRESS IN PARM LIST
         LA    R1,DXDPANL            PANEL'S NAME
         ST    R1,DXDSPF2            SET ADDRESS IN PARM LIST
         OI    DXDSPF2,X'80'         FLAG END-OF-LIST
         LA    R1,DXDSPF             PARM LIST ADDRESS
         L     R15,DXDSPFEP          SPF INTERFACE ENTRY POINT ADDR
         BALR  R14,R15               LINK TO SPF TO DISPLAY PANEL
         MVC   NMSG,BLANKS           CLEAR MESSAGE
         L     R1,TNODEZCM           ZCMD ADDRESS
         OC    0(80,R1),BLANKS       FORCE UPPER CASE
         ITRACE ID=DISPRC,           TRACE RETURN FROM SPF             +
               RDATA1=R15,           .. INCLUDE RETURN CODE            +
               DATA2=0(R1)           .. AND NEW COMMAND
         STH   R15,DXDRC             SAVE RETURN CODE
         CH    R15,H8                EXIT?
         BE    DISP1000              YES
         CLI   0(R1),C'X'            EXIT?
         BE    DISP1000              YES
         CLI   0(R1),C' '            COMMAND BLANK?
         BE    DISP0250              YES
         CLC   MAIN,0(R1)            RETURN TO MAIN PANEL?
         BE    DISP1000              YES
         CLC   CKPT,0(R1)            DISPLAY CHECKPOINT PANEL?
         BE    DISP0230              YES
         CLC   STAT,0(R1)            DISPLAY STATUS PANEL?
         BE    DISP0240              YES
         ITRACE ID=INVCMD            INVALID PRIMARY COMMAND
         MVC   NMSG(MSG01L),MSG01    SET MESSAGE
         B     DISP0220              RE-DISPLAY WITH MESSAGE
DISP0230 DS    0H
         OI    DXDFLAG,$D2           SET DISPLAY PANEL 2 FLAG
         MVC   DXDPANL,FXNODES2      SET PANEL NAME
         MVC   0(80,R1),BLANKS       CLEAR THE COMMAND
         BAL   R3,DYNAM000           ISSUE PQUERY
         B     DISP0100              BUILD THE DATA
DISP0240 DS    0H
         NI    DXDFLAG,255-$D2       RESET DISPLAY PANEL 2 FLAG
         MVC   DXDPANL,FXNODES1      SET PANEL NAME
         MVC   0(80,R1),BLANKS       CLEAR THE COMMAND
         BAL   R3,DYNAM000           ISSUE PQUERY
         B     DISP0100              BUILD THE DATA
*---------------------------------------------------------------------*
*        If updating was allowed, verify that all fields are valid    *
*---------------------------------------------------------------------*
DISP0250 DS    0H
         CLI   TNODECMD,$TNODED      DISPLAY ONLY?
         BE    DISP0410              YES
         TM    DXDFLAG,$D2           SCREEN 2?
         BO    DISP0410              YES
         ITRACE ID=EDITNEW           EDITING NEW DATA
         LH    R1,DXDREL             RELATIVE NODE ON LINE 1
         LA    R1,1(R1)              PLUS 1
         CVD   R1,COMMDWRD           CONVERT TO DECIMAL
         ZAP   DXDNDE#,COMMDWRD      COPY NODE ON LINE 1
         L     R5,DXDVDA             FIRST NODE IN DISPLAY AREA
         USING D1,R5                 DEFINE D1 BASE
         DROP  R7
         LA    R7,REQNDENM           FIRST NODE IN REQBLOK
         AH    R7,DXDOFF             PLUS OFFSET
         USING REQNDENM,R7           DEFINE BASE
         LH    R4,DXDVLINE           NUMBER OF LINES VISIBLE
         NI    DXDFLAG,255-$ERROR-$REBUILD    RESET FLAGS
DISP0260 DS    0H
         ITRACE ID=EDITNODE,         TRACE EACH LOOP                   +
               DATA1=DXDNDE#         .. NODE NUMBER
         OC    D1NDENM,BLANKS        FORCE UPPER CASE
         OC    D1NDESH,BLANKS        FORCE UPPER CASE
         CLC   D1NDENM,REQNDENM      SAME NODE NAME?
         BE    DISP0270              YES
         MVC   REQNDENM,D1NDENM      CHANGE NODE NAME
         OI    DXDFLAG,$UPDATE+$REBUILD       RECORD UPDATED
DISP0270 DS    0H
         CLI   TNODECMD,$TNODEE      NODE NAME ENTRY ONLY?
         BE    DISP0400              YES
         CLI   D1NDESH,C'A'          VALID HEX?
         BL    ERR0020               NO
         CLI   D1NDESH,C'G'          VALID HEX?
         BL    DISP0280              YES
         CLI   D1NDESH,C'0'          VALID HEX?
         BL    ERR0020               NO
         CLI   D1NDESH,C'9'          VALID HEX?
         BH    ERR0020               NO
DISP0280 DS    0H
         CLI   D1NDESH+1,C'A'        VALID HEX?
         BL    ERR0020               NO
         CLI   D1NDESH+1,C'G'        VALID HEX?
         BL    DISP0290              YES
         CLI   D1NDESH+1,C'0'        VALID HEX?
         BL    ERR0020               NO
         CLI   D1NDESH+1,C'9'        VALID HEX?
         BH    ERR0020               NO
DISP0290 DS    0H
         MVC   DXDWORK(2),D1NDESH    COPY STATUS
         NC    DXDWORK(2),HEX1F      PREPARE FOR TRANSLATE
         TR    DXDWORK(2),CHARHEX    TRANSLATE FOR PACKING
         PACK  DXDWORK+3(2),DXDWORK(3)  PACK STATUS
         LA    R1,NODEMSG            NODE STATUS/MESSAGE TABLE
         USING NDESTAT,R1            DEFINE BASE
DISP0300 DS    0H
         CLI   0(R1),X'FF'           END OF TABLE?
         BE    ERR0030               YES.. INVALID STATUS
         CLC   NDEST,DXDWORK+3       STATUS LOCATED?
         BE    DISP0310              YES
         LA    R1,NDESTATL(R1)       NEXT STATUS
         B     DISP0300              LOOP
DISP0310 DS    0H
         CLC   REQNDEST,DXDWORK+3    SAME STATUS?
         BE    DISP0320              YES
         MVC   REQNDEST,DXDWORK+3    COPY NEW STATUS
         MVC   D1NDEST,NDEMSG        COPY NEW STATUS MESSAGE
         OI    DXDFLAG,$UPDATE+$REBUILD  RECORD UPDATED
DISP0320 DS    0H
         CLC   D1NDETD,BLANKS        DATE BLANK?
         BE    DISP0330              YES
         CLI   D1NDETD+4,C'.'        PERIOD STILL PRESENT?
         BNE   ERR0040               NO
         LA    R1,D1NDETD            FIRST DIGIT OF YEAR
         LA    R2,4                  NUMBER OF DIGITS
         LA    R14,ERR0050           ERROR ROUTINE ADDRESS
         BAL   R15,NUMR0000          TEST FOR NUMERIC
         LA    R1,D1NDETD+5          FIRST DIGIT OF DAY
         LA    R2,3                  NUMBER OF DIGITS
         BAL   R15,NUMR0000          TEST FOR NUMERIC
         PACK  DXDWORK(3),D1NDETD(5)      PACK FIRST 4 DIGITS
         PACK  DXDWORK+2(2),D1NDETD+5(3) PACK LAST 3 DIGITS
         CLC   REQNDETD,DXDWORK      SAME DATE?
         BE    DISP0340              YES
         MVC   REQNDETD,DXDWORK      COPY UPDATED DATE
         OI    DXDFLAG,$UPDATE+$REBUILD  RECORD UPDATED
         B     DISP0340
DISP0330 DS    0H
         CP    REQNDETD,P0           TRANSMIT DATE ALREADY ZERO?
         BE    DISP0340              YES
         ZAP   REQNDETD,P0           SET TRANSMIT DATE TO ZERO
         OI    DXDFLAG,$UPDATE+$REBUILD  RECORD UPDATED
DISP0340 DS    0H
         CLC   D1NDETT,BLANKS        TRANSMIT TIME BLANK?
         BE    DISP0350              YES
         LA    R1,D1NDETT            TRANSMISSION TIME
         LA    R2,L'D1NDETT          NUMBER OF DIGITS
         LA    R14,ERR0060           ERROR ROUTINE
         BAL   R15,NUMR0000          TEST FOR VALID NUMERIC
         MVC   DXDWORK(8),D1NDETT    COPY TIME
         NC    DXDWORK(8),HEX1F      PREPARE FRO PACKING
         TR    DXDWORK(8),CHARHEX    TRANSLATE FOR PACKING
         PACK  COMMDWRD(5),DXDWORK(9) PACK TIME
         CLC   REQNDETT,COMMDWRD     SAME TIME?
         BE    DISP0360              YES
         MVC   REQNDETT,COMMDWRD     COPY NEW TIME
         OI    DXDFLAG,$UPDATE+$REBUILD  RECORD UPDATED
         B     DISP0360
DISP0350 DS    0H
         OC    REQNDETT,REQNDETT     TRANSMIT TIME ALREADY ZERO?
         BZ    DISP0360              YES
         XC    REQNDETT,REQNDETT     SET TRANSMIT TIME TO ZERO
         OI    DXDFLAG,$UPDATE+$REBUILD  RECORD UPDATED
DISP0360 DS    0H
         CLC   D1NDERD,BLANKS        RESTORE DATE BLANK?
         BE    DISP0370              YES
         CLI   D1NDERD+4,C'.'        PERIOD STILL PRESENT?
         BNE   ERR0040               NO
         LA    R1,D1NDERD            FIRST DIGIT OF YEAR
         LA    R2,4                  NUMBER OF DIGITS
         LA    R14,ERR0050           ERROR ROUTINE ADDRESS
         BAL   R15,NUMR0000          TEST FOR NUMERIC
         LA    R1,D1NDERD+5          FIRST DIGIT OF DAY
         LA    R2,3                  NUMBER OF DIGITS
         BAL   R15,NUMR0000          TEST FOR NUMERIC
         PACK  DXDWORK(3),D1NDERD(5)      PACK FIRST 4 DIGITS
         PACK  DXDWORK+2(2),D1NDERD+5(3) PACK LAST 3 DIGITS
         CLC   REQNDERD,DXDWORK      SAME DATE?
         BE    DISP0380              YES
         MVC   REQNDERD,DXDWORK      COPY UPDATED DATE
         OI    DXDFLAG,$UPDATE+$REBUILD  RECORD UPDATED
         B     DISP0380
DISP0370 DS    0H
         CP    REQNDERD,P0           RESTORE DATE ALREADY ZERO?
         BE    DISP0380              YES
         ZAP   REQNDERD,P0           SET DATE TO ZERO
         OI    DXDFLAG,$UPDATE+$REBUILD  RECORD UPDATED
DISP0380 DS    0H
         CLC   D1NDERT,BLANKS        RESTORE TIME BLANK?
         BE    DISP0390              YES
         LA    R1,D1NDERT            RESTORE NOTIFICATION TIME
         LA    R2,L'D1NDERT          NUMBER OF DIGITS
         LA    R14,ERR0060           ERROR ROUTINE
         BAL   R15,NUMR0000          TEST FOR VALID NUMERIC
         MVC   DXDWORK(8),D1NDERT    COPY TIME
         NC    DXDWORK(8),HEX1F      PREPARE FOR PACKING
         TR    DXDWORK(8),CHARHEX    TRANSLATE FOR PACKING
         PACK  COMMDWRD(5),DXDWORK(9) PACK TIME
         CLC   REQNDERT,COMMDWRD     SAME TIME?
         BE    DISP0400              YES
         MVC   REQNDERT,COMMDWRD     COPY NEW TIME
         OI    DXDFLAG,$UPDATE+$REBUILD  RECORD UPDATED
         B     DISP0400
DISP0390 DS    0H
         OC    REQNDERT,REQNDERT     RESTORE ALREADY ZERO?
         BZ    DISP0400              YES
         XC    REQNDERT,REQNDERT     SET RESTORE TIME TO ZERO
         OI    DXDFLAG,$UPDATE+$REBUILD  RECORD UPDATED
DISP0400 DS    0H
         LA    R7,REQNDEL(R7)        NEXT NODE
         AP    DXDNDE#,P1            ADD 1 TO NODE NUMBER
         A     R5,VWIDTH             NEXT LINE
         BCT   R4,DISP0260           LOOP
         TM    DXDFLAG,$REBUILD      REBUILD DYNAMIC AREA?
         BNO   DISP0410              NO
         ITRACE ID=REBUILD           REBUILD DUE TO UPDATED DATA
         B     DISP0100
*---------------------------------------------------------------------*
*        Request scroll parameters                                    *
*---------------------------------------------------------------------*
DISP0410 DS    0H
         ITRACE ID=SCROLL
         NI    DXDFLAG,255-$DXDVPUT  RESET VPUT FLAG
DISP0420 DS    0H
         ITRACE ID=VGET              REQUESTING SCROLL VARIABLES
         LA    R1,VGET               COMMAND'S ADDRESS
         ST    R1,DXDSPF1            SET ADDRESS IN PARM LIST
         LA    R1,VGETVARS           VARIABLES WE'RE INTERESTED IN
         ST    R1,DXDSPF2            SET ADDRESS IN PARM LIST
         LA    R1,SHARED             FROM SHARED POOL
         ST    R1,DXDSPF3            SET ADDRESS IN PARM LIST
         OI    DXDSPF3,X'80'         SET END-OF-LIST
         LA    R1,DXDSPF             PARM LIST ADDRESS
         L     R15,DXDSPFEP          SPF INTERFACE ENTRY POINT ADDR
         BALR  R14,R15               LINK TO SPF TO DISPLAY PANEL
         ITRACE ID=VGETRC,           VGET COMPLETE                     +
               RDATA1=R15            .. INCLUDE RETURN CODE
         LTR   R15,R15               VGET SUCCESSFUL?
         BZ    DISP0430              YES
         TM    DXDFLAG,$DXDVPUT      VPUT ALREADY ISSUED?
         BO    DISP0430              YES
*---------------------------------------------------------------------*
*        Issue VPUT, try VGET again                                   *
*---------------------------------------------------------------------*
         ITRACE ID=VPUT
         LA    R1,VPUT               COMMAND'S ADDRESS
         ST    R1,DXDSPF1            SET ADDRESS IN PARM LIST
         LA    R1,VGETVARS           VARIABLES WE'RE INTERESTED IN
         ST    R1,DXDSPF2            SET ADDRESS IN PARM LIST
         LA    R1,SHARED             FROM SHARED POOL
         ST    R1,DXDSPF3            SET ADDRESS IN PARM LIST
         OI    DXDSPF3,X'80'         SET END-OF-LIST
         LA    R1,DXDSPF             PARM LIST ADDRESS
         L     R15,DXDSPFEP          SPF INTERFACE ENTRY POINT ADDR
         BALR  R14,R15               LINK TO SPF TO DISPLAY PANEL
         ITRACE ID=VPUTRC,           VPUT COMPLETE                     +
               RDATA1=R15            .. INCLUDE RETURN CODE
         B     DISP0420
*---------------------------------------------------------------------*
*        Process command or scroll                                    *
*---------------------------------------------------------------------*
DISP0430 DS    0H
         ITRACE ID=CHKVERB,          CHECKING VERB FOR SCROLL          +
               DATA1=ZVERB           .. TRACE VERB VALUE
         L     R2,ZSCROLLN           NUMBER OF LINES TO SCROLL
         CLI   ZVERB,C'U'            SCROLL UP?
         BE    DISP0500              YES
         CLI   ZVERB,C'D'            SCROLL DOWN?
         BE    DISP0600              YES
         CLI   ZVERB,C'R'            SCROLL RIGHT?
         BE    DISP0100              YES
         CLI   ZVERB,C'L'            SCROLL LEFT?
         BE    DISP0100              YES
         B     DISP0220              MUST NOT BE A SCROLL COMMAND
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DISP0500 DS    0H
         ITRACE ID=SCROLLUP
         L     R1,ZSCROLLN           NUMBER OF LINES TO SCROLL
         MH    R1,=Y(REQNDEL)        TIMES NODE DATA LENGTH
         LH    R2,DXDOFF             CURRENT OFFSET
         CR    R1,R2                 SCROLL PAST FIRST LINE?
         BNH   DISP0510              NO
         LR    R2,R1                 LIMIT TO 1ST LINE
DISP0510 DS    0H
         SR    R2,R1                 NEW OFFSET
         LH    R1,DXDREL             RELATIVE LINE NUMBER
         S     R1,ZSCROLLN           MINUS NUMBER SCROLLED
         BP    DISP0520
         SR    R1,R1                 RESET TO ZERO IF NEGATIVE
DISP0520 DS    0H
         STH   R1,DXDREL             SAVE RELATIVE LINE NUMBER
         STH   R2,DXDOFF             SAVE OFFSET INTO TEXT
         B     DISP0100              RE-BUILD DYNAMIC AREA DATA
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DISP0600 DS    0H
         ITRACE ID=SCROLLDN
         L     R1,ZSCROLLN           NUMBER OF LINES TO SCROLL
         AH    R1,DXDREL             PLUS RELATIVE NUMBER NOW
         CH    R1,DXDNODES           SCROLL BEYOND END OF DATA?
         BE    DISP0610              YES
         BNH   DISP0620              NO
DISP0610 DS    0H
         LH    R1,DXDNODES           NUMBER OF NODES TO DISPLAY
         BCTR  R1,0                  ADJUST FOR RELATIVE
         STH   R1,DXDREL             SAVE RELATIVE NUMBER
         MH    R1,=Y(REQNDEL)        TIMES LENGTH FOR EACH NODE
         STH   R1,DXDOFF             OFFSET TO LAST NODE
         B     DISP0100              RE-BUILD DYNAMIC AREA
DISP0620 DS    0H
         STH   R1,DXDREL             SAVE NEW RELATIVE LINE
         MH    R1,=Y(REQNDEL)        TIMES LENGTH FOR EACH NODE
         STH   R1,DXDOFF             OFFSET TO DATA
         B     DISP0100              RE-BUILD DYNAMIC AREA
*---------------------------------------------------------------------*
*        Clean-up                                                     *
*---------------------------------------------------------------------*
DISP1000 DS    0H
         MVI   TNODESTA,C' '         INITIALIZE STATUS
         TM    DXDFLAG,$UPDATE       ANY UPDATES?
         BNO   DISP1040              NO
         TM    DXDFLAG,$ERROR        ERRORS PENDING?
         BO    ERR0070               YES
         SR    R1,R1                 CLEAR REGISTER
         DROP  R7
         LA    R7,REQNDENM           FIRST NODE NAME
         LR    R14,R7                COPY 'CURRENT' ADDRESS
         LA    R15,$MAXNODE          MAXIMUM NUMBER OF NODES
         USING REQNDENM,R7           DEFINE BASE
DISP1010 DS    0H
         CLC   REQNDENM,BLANKS       NAME BLANK?
         BE    DISP1030              YES
         CR    R14,R7                SAME ADDRESS?
         BE    DISP1020              YES
         MVC   0(L'REQNDENM,R14),REQNDENM
         MVC   REQNDENM,BLANKS       CLEAR THIS ENTRY
DISP1020 DS    0H
         LA    R1,1(R1)              PLUS 1 TO NUMBER OF NODES
         LA    R14,REQNDEL(R14)      NEXT NODE
DISP1030 DS    0H
         LA    R7,REQNDEL(R7)        NEXT NODE
         BCT   R15,DISP1010          LOOP
         STCM  R1,3,REQNDE#          SET NUMBER OF NODES
         MVI   TNODESTA,$TNODEM      RETURN 'UPDATED' STATUS
DISP1040 DS    0H
         ITRACE ID=CLEANUP
         LA    R1,VDELETE            COMMAND'S ADDRESS
         ST    R1,DXDSPF1            SET IN PARM LIST
         LA    R1,VDATA              VARIABLE'S NAME
         ST    R1,DXDSPF2            SET IN PARM LIST
         OI    DXDSPF2,X'80'         SET END-OF-LIST
         LA    R1,DXDSPF             PARM LIST'S ADDRESS
         L     R15,DXDSPFEP          SPF INTERFACE ENTRY POINT
         BALR  R14,R15               LINK TO SPF TO DELETE 'VDATA'
         LTR   R15,R15               VDELETE OK?
         BNZ   ERR0080               YES
         ITRACE ID=FREEVDA
         ICM   R1,15,DXDVDA          DYNAMIC AREA ADDRESS
         BZ    EXIT0000              NO ADDRESS.. EXIT
         L     R0,DXDVDL             DYNAMIC AREA SIZE
         FREEMAIN RU,A=(1),LV=(0)    FREEMAIN DYNAMIC AREA
         XC    DXDVDA,DXDVDA         CLEAR ADDRESS
         XC    DXDVDL,DXDVDL         CLEAR SIZE
         L     R1,TNODEZCM           ZCMD ADDRESS
         MVC   0(80,R1),BLANKS       CLEAR ZCMD
         B     EXIT0000              AND EXIT
*---------------------------------------------------------------------*
*                                                                     *
*        Acquire storage for dynamic area and define "VDATA" to SPF.  *
*                                                                     *
*          1) Issue PQUERY to determine screen characteristics        *
*          2) If a "previous" VDATA area exists,                      *
*                a) Free the storage                                  *
*                b) VDELETE the variable                              *
*          3) Calculate the VDATA storage size                        *
*          4) Acquire storage for VDATA                               *
*          5) VDEFINE "VDATA" to SPF                                  *
*                                                                     *
*---------------------------------------------------------------------*
DYNAM000 DS    0H
         ICM   R1,15,DXDVDA          DYNAMIC AREA ADDRESS
         BZ    DYNAM010              NOT ACQUIRED
         ITRACE ID=FREVDATA          FREEING VDATA AREA
         L     R0,DXDVDL             AREA SIZE
         FREEMAIN RU,A=(1),LV=(0)    FREE PREVIOUS DYNAMIC AREA
         LA    R1,VDELETE            COMMAND'S ADDRESS
         ST    R1,DXDSPF1            SET ADDRESS IN PARM LIST
         LA    R1,VDATA              VARIABLE NAME ADDRESS
         ST    R1,DXDSPF2            SET ADDRESS IN PARM LIST
         OI    DXDSPF2,X'80'         FLAG END-OF-LIST
         LA    R1,DXDSPF             SPF PARM LIST ADDRESS
         L     R15,DXDSPFEP          SPF ENTRY POINT
         BALR  R14,R15               DELETE 'VDATA'
         LTR   R15,R15               DELETE SUCCESSFUL?
         BNZ   ERR0080               NO
DYNAM010 DS    0H
         ITRACE ID=PQUERY
         LA    R1,PQUERY             COMMAND'S ADDRESS
         ST    R1,DXDSPF1            SET IN PARM LIST
         LA    R1,DXDPANL            PANEL NAME'S ADDRESS
         ST    R1,DXDSPF2            SET IN PARM LIST
         LA    R1,CVDATA             AREA NAME WITHIN THE PANEL
         ST    R1,DXDSPF3            SET IN PARM LIST
         LA    R1,CVTYPE             AREA TYPE
         ST    R1,DXDSPF4            SET IN PARM LIST
         LA    R1,CVWIDTH            SCREEN DEPTH
         ST    R1,DXDSPF5            SET IN PARM LIST
         LA    R1,CVDEPTH            SCREEN WIDTH
         ST    R1,DXDSPF6            SET IN PARM LIST
         LA    R1,CVROW              SCREEN ROW
         ST    R1,DXDSPF7            SET IN PARM LIST
         LA    R1,CVCOL              SCREEN COLUMN
         ST    R1,DXDSPF8            SET IN PARM LIST
         OI    DXDSPF8,X'80'         FLAG 'END-OF-LIST'
         LA    R1,DXDSPF             PQUERY PARM LIST ADDRESS
         L     R15,DXDSPFEP          SPF INTERFACE'S ADDRESS
         BALR  R14,R15               ISSUE QUERY
         LTR   R15,R15               PQUERY SUCCESSFUL?
         BNZ   ERR0090               NO
         L     R0,VWIDTH             SCREEN WIDTH
         MH    R0,VDEPTH+2           COMPUTE DYNAMIC AREA STORAGE SIZE
         ST    R0,DXDVDL             SAVE DYNAMIC STORAGE AREA SIZE
         GETMAIN RU,                 ACQUIRE STORAGE FOR DYNAMIC AREA  +
               LV=(0),               .. SIZE OF AREA                   +
               LOC=ANY               .. FROM ANY AREA
         ITRACE ID=VDA,                                                +
               RDATA1=R1
         ST    R1,DXDVDA             SAVE DYNAMIC AREA ADDRESS
         ITRACE ID=DEFVDATA          DEFINING 'VDATA'                  +
               DATA1=DXDVDA,         .. STORAGE ADDRESS                +
               DATA2=DXDVDL          .. STORAGE SIZE
         LA    R1,VDEFINE            COMMAND'S ADDRESS
         ST    R1,DXDSPF1            SET ADDRESS IN PARM LIST
         LA    R1,VDATA              VARIABLE NAME ADDRESS
         ST    R1,DXDSPF2            SET ADDRESS IN PARM LIST
         MVC   DXDSPF3,DXDVDA        SET ADDRESS IN PARM LIST
         LA    R1,CHARFORM           DATA FORMAT ADDRESS
         ST    R1,DXDSPF4            SET ADDRESS IN PARM LIST
         LA    R1,DXDVDL             ADDRESS OF LENGTH
         ST    R1,DXDSPF5            SET ADDRESS IN PARM LIST
         OI    DXDSPF5,X'80'         FLAG END-OF-LIST
         LA    R1,DXDSPF             SPF PARM LIST ADDRESS
         L     R15,DXDSPFEP          SPF ENTRY POINT
         BALR  R14,R15               DEFINE 'VDATA'
         LTR   R15,R15               DEFINE SUCCESSFUL?
         BNZ   ERR0010               NO
         BR    R3                    RETURN
* ------------------------------------------------------------------- *
*                                                                     *
*   Test for valid numeric fields                                     *
*                                                                     *
*    At entry:  R1  address of data                                   *
*               R2  number of digits                                  *
*               R14 error routine address                             *
*               R15 Return address                                    *
*                                                                     *
* ------------------------------------------------------------------- *
NUMR0000 DS    0H
         CLI   0(R1),C'0'            VALID DIGIT?
         BLR   R14                   NO
         CLI   0(R1),C'9'            VALID DIGIT?
         BHR   R14                   NO
         LA    R1,1(R1)              NEXT DIGIT
         BCT   R2,NUMR0000           LOOP
         BR    R15                   ALL OK.. RETURN
* ------------------------------------------------------------------- *
*        ERROR ROUTINES                                               *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         ITRACE ID=VDEFFAIL,         VDEFINE FAILED                    +
               RDATA1=R15            .. VDEFINE RETURN CODE
         ABEND $U0093,DUMP,,USER
ERR0020  DS    0H
         OI    DXDFLAG,$ERROR        TURN ON ERROR FLAG
         MVC   NMSG(MSG02L),MSG02    COPY MESSAGE
         ED    NMSG+(MSG02#-MSG02)(L'MSG02#),DXDNDE#
         B     DISP0220              RE-DISPLAY WITH MESSAGE
ERR0030  DS    0H
         OI    DXDFLAG,$ERROR        TURN ON ERROR FLAG
         MVC   NMSG(MSG03L),MSG03    COPY MESSAGE
         ED    NMSG+(MSG03#-MSG03)(L'MSG03#),DXDNDE#
         B     DISP0220              RE-DISPLAY WITH MESSAGE
ERR0040  DS    0H
         OI    DXDFLAG,$ERROR        TURN ON ERROR FLAG
         MVC   NMSG(MSG04L),MSG04    COPY MESSAGE
         ED    NMSG+(MSG04#-MSG04)(L'MSG04#),DXDNDE#
         B     DISP0220              RE-DISPLAY WITH MESSAGE
ERR0050  DS    0H
         OI    DXDFLAG,$ERROR        TURN ON ERROR FLAG
         MVC   NMSG(MSG05L),MSG05    COPY MESSAGE
         ED    NMSG+(MSG05#-MSG05)(L'MSG05#),DXDNDE#
         B     DISP0220              RE-DISPLAY WITH MESSAGE
ERR0060  DS    0H
         OI    DXDFLAG,$ERROR        TURN ON ERROR FLAG
         MVC   NMSG(MSG06L),MSG06    COPY MESSAGE
         ED    NMSG+(MSG06#-MSG06)(L'MSG06#),DXDNDE#
         B     DISP0220              RE-DISPLAY WITH MESSAGE
ERR0070  DS    0H
         MVC   NMSG(MSG07L),MSG07    COPY MESSAGE
         B     DISP0220              RE-DISPLAY WITH MESSAGE
ERR0080  DS    0H
         ITRACE ID=VDELVAIL,                                           +
               RDATA1=R15
         ABEND $U0092,DUMP,,USER
ERR0090  DS    0H
         ITRACE ID=PQRYFAIL,         PQUERY FAILED                     +
               RDATA1=R15            .. PQUERY RETURN CODE
         ABEND $U0091,DUMP,,USER
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         DELETE EP=ISPLINK           DELETE SPF INTERFACE MODULE
         XC    DXDSPFEP,DXDSPFEP     CLEAR THE ADDRESS
         ITRACE ID=EXIT
         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS
         LH    R15,DXDRC             SET RETURN CODE
         L     R14,12(R13)           RESTORE R14
         LM    R0,R12,20(R13)        RESTORE REMAINING REGISTERS
         BR    R14                   RETURN
* ------------------------------------------------------------------- *
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSTART DC    Q(DXDTNODE)           DISPLACEMENT TO WORK AREA
VTVAR    DC    V(FXTVAR)             VARIABLE MANAGER
         SPACE 1
* ------------------------------------------------------------------- *
*      The following is a positionally dependant parm list            *
* ------------------------------------------------------------------- *
VGETVARS DC    F'3'                  NUMBER OF VARIABLE NAMES
         DC    F'0'                  UNPROTECTED STORAGE
         DC    CL8'ZVERB'            VARIABLE NAME
         DC    CL8'ZSCROLLA'         VARIABLE NAME
         DC    CL8'ZSCROLLN'         VARIABLE NAME
* ------------------------------------------------------------------- *
         SPACE 1
H8       DC    H'8'                  CONSTANT
P0       DC    P'0'
P1       DC    P'1'
HEX0F    DC    8X'0F'
HEX1F    DC    8X'1F'
         SPACE 1
* ------------------------------------------------------------------- *
*   The following two lines are a positionally dependant table        *
* ------------------------------------------------------------------- *
CHARHEX  DC    X'00AABBCCDDEEFF000000000000000000'
         DC    X'00010203040506070809000000000000'
* ------------------------------------------------------------------- *
         SPACE 1
HEXCHAR  DC    C'0123456789ABCDEF'
VDATA    DC    CL8'VDATA'            VARIABLE NAME
VDEFINE  DC    CL8'VDEFINE'
VDELETE  DC    CL8'VDELETE'
DISPLAY  DC    CL8'DISPLAY'
VGET     DC    CL8'VGET'
VPUT     DC    CL8'VPUT'
SHARED   DC    CL8'SHARED'
CHARFORM DC    CL4'CHAR'
PQUERY   DC    CL8'PQUERY'
CVDATA   DC    CL8'VDATA'
CVTYPE   DC    CL8'VTYPE'
CVWIDTH  DC    CL8'VWIDTH'
CVDEPTH  DC    CL8'VDEPTH'
CVROW    DC    CL8'VROW'
CVCOL    DC    CL8'VCOL'
CKPT     DC    C'CKPT'
MAIN     DC    C'MAIN'
STAT     DC    C'STAT'
FXNODES1 DC    CL8'FXNODES1'
FXNODES2 DC    CL8'FXNODES2'
BLANKS   DC    CL80' '
MSG01    DS    0C
         DC    C'FXTNODE01E  INVALID COMMAND'
MSG01L   EQU   *-MSG01
MSG02    DS    0C
         DC    C'FXTNODE02E  INVALID HEX VALUE IN STATUS ON NODE #'
MSG02#   DC    X'40202021'
MSG02L   EQU   *-MSG02
MSG03    DS    0C
         DC    C'FXTNODE03E  INVALID STATUS VALUE ON NODE #'
MSG03#   DC    X'40202021'
MSG03L   EQU   *-MSG03
MSG04    DS    0C
         DC    C'FXTNODE04E  NO PERIOD IN DATE ON NODE #'
MSG04#   DC    X'40202021'
MSG04L   EQU   *-MSG04
MSG05    DS    0C
         DC    C'FXTNODE05E  INVALID DIGIT IN DATE ON NODE #'
MSG05#   DC    X'40202021'
MSG05L   EQU   *-MSG05
MSG06    DS    0C
         DC    C'FXTNODE06E  INVALID DIGIT IN TIME ON NODE #'
MSG06#   DC    X'40202021'
MSG06L   EQU   *-MSG06
MSG07    DS    0C
         DC    C'FXTNODE07E  EXIT NOT ALLOWED UNTIL ERROR(S) ARE CORREC+
               TED'
MSG07L   EQU   *-MSG07
NODEMSG  DS    0C
         COPY  NODEMSG
         LTORG
* ------------------------------------------------------------------- *
*        Our parameter block                                          *
* ------------------------------------------------------------------- *
         TNODEPRM DSECT=YES
* ------------------------------------------------------------------- *
*        Dynamic area detail lines                                    *
* ------------------------------------------------------------------- *
D1       DSECT
D1ATTR1  DS    CL01
D1NDE#   DS    CL03                NODE NUMBER
D1ATTR2  DS    CL01
D1NDENM  DS    CL08                NODE NAME
D1ATTR3  DS    CL01
D1NDESH  DS    CL02                STATUS IN HEX
D1ATTR4  DS    CL01
D1NDEST  DS    CL25                STATUS
D1ATTR5  DS    CL01
D1NDETD  DS    CL08                TRANSMISSION DATE
D1ATTR6  DS    CL01
D1NDETT  DS    CL08                TRANSMISSION TIME
D1ATTR7  DS    CL01
D1NDERD  DS    CL08                RESTORE NOTIFCATION DATE
D1ATTR8  DS    CL01
D1NDERT  DS    CL08                RESTORE NOTIFICATION TIME
D1ATTR9  DS    CL01
D1L      EQU   *-D1
D2       DSECT
D2ATTR1  DS    CL01
D2NDE#   DS    CL03                NODE NUMBER
D2ATTR2  DS    CL01
D2NDENM  DS    CL08                NODE NAME
D2ATTR3  DS    CL01
D2CKPTR  DS    CL07                CHECKPOINT RECORD NUMBER
D2ATTR4  DS    CL01
D2CKPTT  DS    CL06                CHECKPOINT TTR
D2L      EQU   *-D2
* ------------------------------------------------------------------- *
*        Work areas                                                   *
* ------------------------------------------------------------------- *
DXDTNODE DSECT
DXDID    DS    CL8
DXDSAVE  DS    18F
DXDSPFEP DS    A                   SPF INTERFACE ENTRY POINT
DXDSPF   DS    0A                  ISPF PARM LIST
DXDSPF1  DS    A                   PARM 1 ADDRESS
DXDSPF2  DS    A                   PARM 2 ADDRESS
DXDSPF3  DS    A                   PARM 3 ADDRESS
DXDSPF4  DS    A                   PARM 4 ADDRESS
DXDSPF5  DS    A                   PARM 5 ADDRESS
DXDSPF6  DS    A                   PARM 6 ADDRESS
DXDSPF7  DS    A                   PARM 7 ADDRESS
DXDSPF8  DS    A                   PARM 8 ADDRESS
DXDVDA   DS    F                   DYNAMIC AREA DATA (VDATA) ADDRESS
DXDVDL   DS    F                   DYNAMIC AREA SIZE
DXDOFF   DS    H                   OFFSET TO NODE DATA
DXDREL   DS    H                   RELATIVE NODE NUMBER ON FIRST LINE
DXDVLINE DS    H                   NUMBER OF LINES VISIBLE ON SCREEN
DXDRC    DS    H                   RETURN CODE FROM DISPLAY
DXDNODES DS    H                   NUMBER OF NODES TO DISPLAY
DXDNDE#  DS    PL2                 NODE NUMBER ON FIRST LINE
DXDFLAG  DS    X                   INTERNAL FLAGS
$DXDVPUT EQU   X'80'               .. VPUT HAS BEEN ISSUED
$ERROR   EQU   X'40'               .. ERROR IN USER'S DATA
$UPDATE  EQU   X'20'               .. RECORD UPDATED
$REBUILD EQU   X'10'               .. RE-BUILD DYNAMIC AREA
$D2      EQU   X'08'               .. WORKING WITH SCREEN 2
DXDPANL  DS    CL8                 PANEL NAME
DXDWORK  DS    CL10
FXNDATA  DS    0F
         COPY  FXNDATA             NODE DISPLAY DATA
         VARREQ DSECT=NO
* ------------------------------------------------------------------- *
*              Common data area                                       *
* ------------------------------------------------------------------- *
         FXMCOMM TYPE=DSECT
* ------------------------------------------------------------------- *
*              REQUEST BLOCK                                          *
* ------------------------------------------------------------------- *
         REQBLOK DSECT=YES
* ------------------------------------------------------------------- *
*              Node status messages                                   *
* ------------------------------------------------------------------- *
NDESTAT  DSECT
NDEST    DS   X
NDEMSG   DS   CL25
NDESTATL EQU  *-NDESTAT
* ------------------------------------------------------------------- *
*              Equates                                                *
* ------------------------------------------------------------------- *
         COPY REGEQU
         ABCODES
         END  FXTNODE
./ ADD NAME=FXTREQE  0100-99056-99056-1500-00352-00352-00000-FX-REL1

         TITLE 'FXTREQE  TRANSMISSION REQUEST ENTRY'
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXTREQE                                               *
*                                                                     *
*  TSO interface transmission request entry processor                 *
*                                                                     *
* ------------------------------------------------------------------- *
TREQE    FXPRFX 'TSO INTERFACE TRANSMISSION REQUEST ENTRY',            +
               COMM=FXTCOMM
FXTREQE  AMODE 31
FXTREQE  RMODE ANY
         CLC   DXDID,MODID           WORK AREA INITIALIZED?
         BE    TREQ0000              YES
         ITRACE ID=INIT
         MVC   DXDID,MODID           WORK AREA INITIALIZED
         LA    R1,DISPLAY            DISPLAY COMMAND ADDRESS
         ST    R1,DXDSPF1            SET ADDRESS IN PARM LIST
         LA    R1,PANLNAME           PANEL NAME'S ADDRESS
         ST    R1,DXDSPF2            SET ADDRESS IN PARM LIST
         LA    R1,COMMBLKS           NO MESSAGE ID
         ST    R1,DXDSPF3            SET ADDRESS IN PARM LIST
         LA    R1,DXDCSR             FIELD NAME FOR CURSOR
         ST    R1,DXDSPF4            SET ADDRESS IN PARM LIST
         LA    R1,F1                 FIRST POSITION OF FIELD
         ST    R1,DXDSPF5            SET PARM
         OI    DXDSPF5,X'80'         FLAG END OF LIST
TREQ0000 DS    0H
         MVC   DXDCSR,PODSN          DEFAULT TO DATA SET NAME
         L     R8,COMMIOA            I/O AREA'S ADDRESS
         USING USERREQ,R8            DEFINE BASE
         MINIT COMMBLKS,P0,$REQINIT,R14 INITIALIZE REQUEST AREA
         CLC   DEFDEST,COMMBLKS      DEFAULT DESTINATION DEFINED?
         BE    TREQ0010              NO
         MVC   REQNDENM,DEFDEST      SET DEFAULT DESTINATION
         MVC   REQNDE#,F1+2          SET NUMBER OF NODES TO 1
TREQ0010 DS    0H
         ITRACE ID=DISPLAY
         LA    R1,DXDSPF             DISPLAY PARMS
         L     R15,AISPLINK          SPF INTERFACE PARMS
         BALR  R14,R15               LINK TO DISPLAY
         MVC   COMMMSG,COMMBLKS      CLEAR MESSAGE
         CH    R15,H8                'END' PRESSED?
         BE    EXIT0000              YES
         MVC   DXDCSR,PFNC           DEFAULT TO COMMAND AREA
         CLC   COMMODSN,COMMBLKS     DATASET NAME ENTERED?
         BNE   TREQ0020              YES
         ITRACE ID=NOODSN
         MVC   COMMMSG(MSG01L),MSG01 DATASET NOT ENTERED
         MVC   DXDCSR,PODSN          PUT CURSOR ON DATA SET NAME
         B     TREQ0010              RE-SEND WITH MESSAGE
TREQ0020 DS    0H
         LA    R1,COMMODSN           FIRST CHARACTER OF NAME
         ST    R1,DSNADDR            SET DSN ADDRESS
         LA    R1,DSNREQ             DSN SUBROUTINE PARM
         L     R15,ADSNVER           DSN SUBROUTINE ENTRY POINT
         BALR  R14,R15               CHECK DATA SET NAME
         CLI   DSNSTAT,$DSNOK        DSN OK?
         BE    TREQ0030              YES
         MVC   COMMMSG(L'DSNMSG),DSNMSG
         MVC   DXDCSR,PODSN          PUT CURSOR ON DATA SET NAME
         B     TREQ0010              RESEND WITH MESSAGE
TREQ0030 DS    0H
         CLC   COMMDDSN,COMMBLKS     NEW NAME BLANK?
         BE    TREQ0040              YES
         LA    R1,COMMDDSN           FIRST CHARACTER OF NAME
         ST    R1,DSNADDR            SET DSN ADDRESS
         LA    R1,DSNREQ             DSN SUBROUTINE PARM
         L     R15,ADSNVER           DSN SUBROUTINE ENTRY POINT
         BALR  R14,R15               CHECK DATA SET NAME
         CLI   DSNSTAT,$DSNOK        DSN OK?
         BE    TREQ0040              YES
         MVC   COMMMSG(L'DSNMSG),DSNMSG
         MVC   DXDCSR,PDDSN          PUT CURSOR ON DATA SET NAME
         B     TREQ0010              RESEND WITH MESSAGE
TREQ0040 DS    0H
         OC    COMMOMEM,COMMBLKS     FORCE UPPER CASE
         OC    COMMDMEM,COMMBLKS     FORCE UPPER CASE
         CLC   COMMOMEM,COMMBLKS     MEMBER NAME BLANK?
         BE    TREQ0060              YES
         LA    R1,COMMOMEM           MEMBER NAME ADDRESS
         ST    R1,MEMADDR            SET MEMBER NAME ADDRESS
         LA    R1,MEMREQ             MEMBER NAME VERIFICATION PARM
         L     R15,AMEMVER           MEMBER NAME VERIFICATION ADDR
         BALR  R14,R15               CHECK MEMBER NAME
         CLI   MEMSTAT,$MEMOK        MEMBER NAME OK?
         BE    TREQ0050              YES
         MVC   COMMMSG(L'MEMMSG),MEMMSG
         MVC   DXDCSR,POMEM          PUT CURSOR ON MEMBER NAME
         B     TREQ0010              RESEND WITH MESSAGE
TREQ0050 DS    0H
         CLC   COMMDMEM,COMMBLKS     NEW MEMBER NAME BLANK?
         BE    TREQ0070              YES
         LA    R1,COMMDMEM           NEW MEMBER NAME ADDRESS
         ST    R1,MEMADDR            SET MEMBER NAME ADDRESS
         LA    R1,MEMREQ             MEMBER NAME REQUEST PARMS ADDR
         L     R15,AMEMVER           MEMBER NAME VERIFICATION ADDR
         BALR  R14,R15               VERIFY MEMBER NAME IS VALID
         CLI   MEMSTAT,$MEMOK        MEMBER NAME OK?
         BE    TREQ0070              YES
         MVC   COMMMSG(L'MEMMSG),MEMMSG
         MVC   DXDCSR,PDMEM          PUT CURSOR ON MEMBER NAME
         B     TREQ0010              RE-DISPLAY WITH MESSAGE
TREQ0060 DS    0H
         CLC   COMMDMEM,COMMBLKS     NEW NAME BLANK?
         BNE   ERR0050               NO.. NOT VALID
TREQ0070 DS    0H
         OC    COMMREPL,COMMBLKS     FORCE UPPER CASE
         CLC   COMMREPL,COMMBLKS     REPLACE BLANK?
         BE    TREQ0080              YES.. ASSUME NO
         CLC   NO,COMMREPL           REPLACE = NO?
         BE    TREQ0080              YES
         CLC   YES,COMMREPL          REPLACE = YES?
         BE    TREQ0090              YES
         MVC   COMMMSG(MSG02L),MSG02 NOT VALID
         MVC   DXDCSR,PREPL          PUT CURSOR ON REPLACE FLAG
         B     TREQ0010              DISPLAY WITH MESSAGE
TREQ0080 DS    0H
         MVI   REQREPL,C'N'          SET REPLACE FLAG
         MVC   COMMREPL,NO           FORCE "NX" TO "NO"
         B     TREQ0100
TREQ0090 DS    0H
         MVI   REQREPL,C'Y'          SET REPLACE FLAG
         MVC   COMMREPL,YES          FORCE "YXX" TO "YES"
TREQ0100 DS    0H
         OC    COMMALAS,COMMBLKS     FORCE UPPER CASE
         CLC   COMMALAS,COMMBLKS     ALIAS BLANK?
         BE    TREQ0110              YES
         CLC   NO,COMMALAS           ALIAS = NO?
         BE    TREQ0110              YES
         CLC   YES,COMMALAS          ALIAS = YES?
         BE    TREQ0120              YES
         MVC   COMMMSG(MSG03L),MSG03 NOT VALID
         MVC   DXDCSR,PALAS          PUT CURSOR ON ALIAS FLAG
         B     TREQ0010              DISPLAY WITH MESSAGE
TREQ0110 DS    0H
         MVI   REQALIAS,C'N'         SET ALIAS FLAG
         MVC   COMMALAS,NO           FORCE 'NXX' TO 'NO '
         B     TREQ0150
TREQ0120 DS    0H
         MVC   COMMALAS,YES          FORCE 'YXX' TO 'YES'
         MVI   REQALIAS,C'Y'         SET ALIAS FLAG
         CLC   COMMDMEM,COMMBLKS     NEW MEMBER NAME ALSO?
         BNE   TREQ0130              YES.. NOT ALLOWED
         CLC   COMMOMEM,COMMBLKS     MEMBER NAME BLANK?
         BE    TREQ0140              YES.. NOT ALLOWED
         B     TREQ0150
TREQ0130 DS    0H
         MVC   COMMMSG(MSG04L),MSG04 NOT VALID
         MVC   DXDCSR,PALAS          PUT CURSOR ON ALIAS FLAG
         B     TREQ0010              DISPLAY WITH MESSAGE
TREQ0140 DS    0H
         MVC   COMMMSG(MSG05L),MSG05 NOT VALID
         MVC   DXDCSR,PALAS          PUT CURSOR ON ALIAS FLAG
         B     TREQ0010              DISPLAY WITH MESSAGE
TREQ0150 DS    0H
         CLC   COMMFNC,COMMBLKS      ANY COMMAND?
         BE    TREQ0010              NO
         CLI   COMMFNC,C'L'          NODE LIST DISPLAY?
         BE    TREQ0160              YES
         CLI   COMMFNC,C'S'          SUBMIT THE REQUEST?
         BE    TREQ0170              YES
         MVC   COMMMSG(MSG06L),MSG06
         B     TREQ0010              RESEND WITH MESSAGE
TREQ0160 DS    0H
         MVC   COMMZCMD,COMMBLKS     CLEAR ZCMD
         MVC   COMMFNC,COMMBLKS      CLEAR OUR COMMAND
         MVI   TNODECMD,$TNODEE      NODE NAME ONLY ENTRY
         LA    R1,USERDATA           REQBLOK'S ADDRESS
         ST    R1,TNODEREQ           PASS ADDRESS TO NODE DISPLAY
         LA    R1,COMMZCMD           SPF ZCMD AREA ADDRESS
         ST    R1,TNODEZCM           PASS ADDRESS TO NODE DISPLAY
         LA    R1,TNODEPRM           NODE DISPLAY PARM LIST ADDRESS
         L     R15,ATNODE            NODE DISPLAY ENTRY POINT
         BALR  R14,R15               LINK TO NODE DISPLAY
         B     TREQ0010              DISPLAY MENU AGAIN
TREQ0170 DS    0H
         LA    R1,REQNDENM           FIRST NODE NAME
         USING REQNDENM,R1           DEFINE BASE
         LA    R15,$MAXNODE          MAXIMUM NUMBER OF NODES
TREQ0180 DS    0H
         CLC   REQNDENM,COMMBLKS     NODE NAME BLANK?
         BNE   TREQ0190              NO
         LA    R1,REQNDEL(R1)        NEXT NODE
         BCT   R15,TREQ0180          LOOP
         MVC   COMMMSG(MSG07L),MSG07 NO DESTINATIONS GIVEN
         B     TREQ0010              RE-SEND WITH MESSAGE
TREQ0190 DS    0H
         ITRACE ID=BLDREQ
         LA    R1,(USERDATA-USERREQ)+REQBLOKL
         STH   R1,USERLEN            SET TOTAL DATA LENGTH
         MVC   USERMOD,REQE          PROCESSING MODULE SUFFIX
         MVC   REQODSNM,COMMODSN     SET ORIGINAL DATASET'S NAME
         MVC   REQOMEM,COMMOMEM      SET ORIGINAL MEMBER NAME
         MVC   REQDDSNM,COMMDDSN     SET DATASET NAME AT DESTINATION
         MVC   REQDMEM,COMMDMEM      SET NEW MEMBER NAME
         MVC   REQENODE,COMMFX       SET NODE WHERE REQUEST WAS ENTERED
         MVC   REQTNODE,COMMFX       ASSUME SAME FX WILL TRANSMIT
         CLC   COMMTNDE,COMMBLKS     NODE NAME GIVEN BY USER?
         BE    TREQ0200              NO
         MVC   REQTNODE,COMMTNDE     OVER-RIDE NODE NAME
TREQ0200 DS    0H
         MVC   REQREPL,COMMREPL      SET REPLACE INDICATOR
         MVC   REQALIAS,COMMALAS     SET ALIAS INDICATOR
         L     R3,COMMRPL            RPL ADDRESS
         L     R4,COMMRPLX           RPL EXTENSION ADDRESS
         USING ISTRPL6X,R4           DEFINE BASE
         LH    R6,USERLEN            I/O LENGTH
         APPCCMD CONTROL=SEND,       ISSUE SEND                        +
               QUALIFY=DATA,         .. SEND DATA                      +
               RPL=(R3),             .. RPL'S ADDRESS                  +
               AREA=(R8),            .. I/O AREA ADDRESS               +
               RECLEN=(R6),          .. I/O LENGTH                     +
               CONMODE=CS,           .. CONTINUE SPECIFIC              +
               CONVID=COMMCID        .. CONVERSATION ID
         OC    RPL6RC,RPL6RC         SEND OK?
         BNZ   ERR0010               NO
         L     R6,=A(COMMIOSZ)       I/O AREA SIZE
         APPCCMD CONTROL=RECEIVE,    ISSUE RECEIVE                     +
               QUALIFY=SPEC,         .. FOR A SPECIFIC SESSION         +
               RPL=(R3),             .. RPL'S ADDRESS                  +
               FILL=LL,              .. ONLY 1 LOGICAL RECORD          +
               AREA=(R8),            .. I/O AREA ADDRESS               +
               AREALEN=(R6),         .. I/O AREA SIZE                  +
               CONVID=COMMCID        .. CONVERSATION ID
         OC    RPL6RC,RPL6RC         RECEIVE OK?
         BNZ   ERR0020               NO
         MVC   COMMMSG,USERMSG       SET MESSAGE
         CLI   USERRC,0              REQUEST ACCEPTED?
         BE    EXIT0000              YES, RETURN TO MENU
         B     TREQ0010              RESEND WITH MESSAGE
ERR0010  DS    0H
         ITRACE ID=SENDFAIL,         SEND FAILED                       +
               DATA1=RPL6RC          .. RETURN CODE
         ABEND $U0051,DUMP,,USER
ERR0020  DS    0H
         ITRACE ID=RECVFAIL,         RECEIVE FAILED                    +
               DATA1=RPL6RC          .. RETURN CODE
         ABEND $U0052,DUMP,,USER
ERR0050  DS    0H
         ITRACE ID=NOOMEM            NEW MEMBER NAME, NO ORIGINAL NAME
         MVC   COMMMSG(MSG08L),MSG08
         B     TREQ0010              RESEND WITH MESSAGE
EXIT0000 DS    0H
         ITRACE ID=EXIT
         MVI   COMMFNC,C' '          CLEAR FUNCTION CODE
         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS
         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS
         BR    R14                   RETURN
* ------------------------------------------------------------------- *
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSTART DC    Q(DXDTREQE)           DISPLACEMENT TO WORK AREA
F1       DC    F'1'
H8       DC    H'8'
P0       DC    P'0'
DEFDEST  DC    CL8'&DDEST'
PFNC     DC    CL8'PFNC'
PODSN    DC    CL8'PODSN'
PDDSN    DC    CL8'PDDSN'
POMEM    DC    CL8'POMEM'
PDMEM    DC    CL8'PDMEM'
PREPL    DC    CL8'PREPL'
PALAS    DC    CL8'PALAS'
REQE     DC    CL4'REQE'
DISPLAY  DC    CL8'DISPLAY'
PANLNAME DC    CL8'FXREQE'
NO       DC    C'NO '
YES      DC    C'YES'
MSG01    DS    0C
         DC    CL11'FXTREQE01E'
         DC    C'DATASET NAME IS REQUIRED'
MSG01L   EQU   *-MSG01
MSG02    DS    0C
         DC    CL11'FXTREQE02E'
         DC    C'REPLACE MUST SPECIFY EITHER YES OR NO'
MSG02L   EQU   *-MSG02
MSG03    DS    0C
         DC    CL11'FXTREQE03E'
         DC    C'ALIAS MUST SPECIFIY EITHER YES OR NO'
MSG03L   EQU   *-MSG03
MSG04    DS    0C
         DC    CL11'FXTREQE04E'
         DC    C'NEW MEMBER NAME NOT ALLOWED WHEN SENDING ALIASES'
MSG04L   EQU   *-MSG04
MSG05    DS    0C
         DC    CL11'FXTREQE05E'
         DC    C'MEMBER NAME REQUIRED WHEN SENDING ALIASES'
MSG05L   EQU   *-MSG05
MSG06    DS    0C
         DC    CL11'FXTREQE06E'
         DC    C'INVALID COMMAND'
MSG06L   EQU   *-MSG06
MSG07    DS    0C
         DC    CL11'FXTREQE07E'
         DC    C'NO DESTINATIONS HAVE BEEN ENTERED'
MSG07L   EQU   *-MSG07
MSG08    DS    0C
         DC    CL11'FXTREQE08E'
         DC    C'NEW MEMBER NAME NOT VALID WITHOUT ORIGINAL MEMBER NAME+
               '
MSG08L   EQU   *-MSG08
         LTORG
* ------------------------------------------------------------------- *
*                                                                     *
*        WORK AREAS                                                   *
*                                                                     *
* ------------------------------------------------------------------- *
DXDTREQE DSECT
DXDID    DS    CL8
DXDSAVE  DS    18F
         SPACE 1
* ------------------------------------------------------------------- *
DXDSPF   DS    0A
DXDSPF1  DS    A
DXDSPF2  DS    A                     SPF FUNCTION PARM LIST
DXDSPF3  DS    A
DXDSPF4  DS    A
DXDSPF5  DS    A
* ------------------------------------------------------------------- *
DXDCSR   DS    CL8
         SPACE 1
         TNODEPRM DSECT=NO
         DSNREQ   DSECT=NO
         MEMREQ   DSECT=NO
* ------------------------------------------------------------------- *
*              COMMON DATA MAP                                        *
* ------------------------------------------------------------------- *
         FXTCOMM TYPE=DSECT
* ------------------------------------------------------------------- *
*              USER INTERFACE REQUEST BLOCK                           *
* ------------------------------------------------------------------- *
         USERREQ
         REQBLOK  DSECT=NO
* ------------------------------------------------------------------- *
*              ACB                                                    *
* ------------------------------------------------------------------- *
         IFGACB   AM=VTAM
* ------------------------------------------------------------------- *
*              RPL                                                    *
* ------------------------------------------------------------------- *
         IFGRPL   AM=VTAM
* ------------------------------------------------------------------- *
*              EQUATES                                                *
* ------------------------------------------------------------------- *
         COPY REGEQU
         ABCODES
         END  FXTREQE
./ ADD NAME=FXTREQI  0100-99056-99056-1500-00466-00466-00000-FX-REL1

         TITLE 'FXTREQI TRANSMISSION REQUEST INQUIRY (AND UPDATE)'
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  MODULE NAME: FXTREQI                                               *
*                                                                     *
*  TSO interface transmission request inquiry (and update) processor. *
*                                                                     *
* ------------------------------------------------------------------- *
TREQI    FXPRFX 'TSO INTERFACE TRANSMISSION REQUEST INQUIRY',          +
               COMM=FXTCOMM
FXTREQI  AMODE 31
FXTREQI  RMODE ANY
         CLC   DXDID,MODID           WORK AREA INITIALIZED?
         BE    TREQ0010              YES
         ITRACE ID=INIT
         MVC   DXDID,MODID           WORK AREA INITIALIZED
         MVC   DXDPANL,FXREQI1       ASSUME MINIMAL INFO PANEL
         CLI   COMMUATH,3            ADMINISTRATOR OR GREATER?
         BL    TREQ0010              NO
         MVC   DXDPANL,FXREQI2       FULL FUNCTION PANEL
TREQ0010 DS    0H
         MVI   DXDFLAG,0             INITIALIZE ALL FLAGS
         GETMAIN RU,                 ACQUIRE STORAGE FOR 24-BIT STUFF  +
               LV=FX24L,             .. SIZE OF AREA                   +
               LOC=BELOW             .. FROM 24-BIT STORAGE
         ST    R1,DXD24              SAVE 24-BIT WORK AREA ADDRESS
         LR    R9,R1                 COPY WORK AREA ADDRESS
         USING FX24PRM,R9            DEFINE BASE
         GETMAIN RU,                 ACQUIRE STORAGE FOR DCB           +
               LV=DCBIL,             .. SIZE OF AREA                   +
               LOC=BELOW             .. FROM BELOW THE LINE
         ST    R1,DCB24              SAVE DCB ADDRESS
         MVC   0(DCBIL,R1),DCBI      INITIALIZE THE DCB
         NI    DXDFLAG,255-$FOUND    RESET 'FOUND' FLAG
         MVC   DXDUSER,COMMRID       SAVE USER ID FROM MENU
         XC    DXDREC#,DXDREC#       INITIALIZE RECORD NUMBER
         L     R7,COMMIOA            I/O AREA ADDRESS
         USING USERREQ,R7            DEFINE BASE
         L     R6,COMMRPL            RPL ADDRESS
         L     R5,COMMRPLX           RPL EXTENSION ADDRESS
         USING ISTRPL6X,R5           DEFINE BASE
         B     TREQ0030
TREQ0020 DS    0H
         NI    DXDFLAG,255-$DELETE   RESET DELETED FLAG
         SR    R1,R1                 CLEAR REGISTER
         ICM   R1,3,DXDREC#          CURRENT RECORD NUMBER
         LA    R1,1(R1)              NEXT RECORD NUMBER
         STCM  R1,3,DXDREC#          SAVE NEW RECORD NUMBER
TREQ0030 DS    0H
         ITRACE ID=INQUIRE,          SENDING AN INQUIRY TO FX STC      +
               DATA1=DXDREC#,        .. STARTING RECORD NUMBER         +
               DATA2=DXDUSER         .. USER ID
         MVI   USERCMD,$USERINQ      SET COMMAND (REQUEST INQUIRY)
TREQ0040 DS    0H
         LA    R2,USERXL             TOTAL LENGTH
         STH   R2,USERLEN            SET LENGTH
         MVC   USERMOD,REQI          PROCESSING MODULE SUFFIX
         MVC   USERREC#,DXDREC#      SET RECORD NUMBER
         MVC   USERIDI,DXDUSER       SET USERID
         MVC   DXDCMD,USERCMD        SAVE COMMAND
         ITRACE ID=SEND              SENDING
         APPCCMD CONTROL=SEND,       ISSUE SEND                        +
               QUALIFY=DATA,         .. SEND DATA                      +
               RPL=(R6),             .. RPL'S ADDRESS                  +
               AREA=(R7),            .. I/O AREA ADDRESS               +
               RECLEN=(R2),          .. I/O LENGTH                     +
               CONMODE=CS,           .. CONTINUE SPECIFIC              +
               CONVID=COMMCID        .. CONVERSATION ID
         OC    RPL6RC,RPL6RC         SEND OK?
         BNZ   ERR0010               NO
         ITRACE ID=RECEIVE           RECEIVING
         L     R2,=A(COMMIOSZ)       I/O AREA SIZE
         APPCCMD CONTROL=RECEIVE,    ISSUE RECEIVE                     +
               QUALIFY=SPEC,         .. FOR A SPECIFIC SESSION         +
               RPL=(R6),             .. RPL'S ADDRESS                  +
               FILL=LL,              .. ONLY 1 LOGICAL RECORD          +
               AREA=(R7),            .. I/O AREA ADDRESS               +
               AREALEN=(R2),         .. I/O AREA SIZE                  +
               CONVID=COMMCID        .. CONVERSATION ID
         OC    RPL6RC,RPL6RC         RECEIVE OK?
         BNZ   ERR0020               NO
         CLI   USERRC,20             USER NOT AUTHORIZED TO USER FX?
         BE    ERR0030               NOT AUTHORIZED
         CLI   USERRC,12             RECORD IN USE?
         BE    ERR0070               YES
         CLI   USERRC,8              MATCHING RECORD?
         BE    TREQ0210              NO..
         CLI   DXDCMD,$USERPRT       WAS COMMAND DISPLAY SYSPRINT?
         BE    TREQ0160              YES
         CLI   DXDCMD,$USERINQ       WAS COMMAND INQUIRE?
         BNE   TREQ0230              NO
         ITRACE ID=EDITDATA          STARTING DATA EDIT
         LA    R4,USERDATA
         USING REQBLOK,R4            DEFINE BASE
         OI    DXDFLAG,$FOUND        A RECORD WAS FOUND FOR THE USER
         PACK  COMMDWRD,REQREC#      PACK RECORD NUMBER
         CVB   R1,COMMDWRD           CONVERT TO BINARY
         BCTR  R1,0                  MINUS 1 (RELATIVE TO ZERO)
         STH   R1,DXDREC#            SAVE RETURNED RECORD NUMBER
         CLI   REQSTAT,$REQCNTL      CONTROL RECORD?
         BE    TREQ0020              YES.. DON'T DISPLAY IT
         MVC   COMMRID,REQESTOR      SET USER ID
         MVC   DXDWORK(L'DATEEDWD),DATEEDWD
         ED    DXDWORK(L'DATEEDWD),REQEDATE
         MVC   COMMEDTE,DXDWORK+1    COPY DATE ENTERED
         MVC   DXDWORK(L'TIMEEDWD),TIMEEDWD
         ED    DXDWORK,REQETIME      EDIT TIME ENTERED
         MVC   COMMETME,DXDWORK+1    COPY TIME ENTERED
         MVC   DXDWORK(L'DATEEDWD),DATEEDWD
         ED    DXDWORK(L'DATEEDWD),REQCDATE
         MVC   COMMCDTE,DXDWORK+1    COPY DATE COMPLETED
         MVC   DXDWORK(L'TIMEEDWD),TIMEEDWD
         ED    DXDWORK,REQCTIME      EDIT TIME COMPLETED
         MVC   COMMCTME,DXDWORK+1    COPY TIME COMPLETED
         MVC   COMMENDE,REQENODE     COPY ORIGINATING NODE
         ICM   R1,15,REQNBR          REQUEST NUMBER
         CVD   R1,DXDDWORD           CONVERT TO DECIMAL
         MVC   DXDWORK(8),=X'F020202020202020'
         ED    DXDWORK(8),DXDDWORD+4 EDIT REQUEST NUMBER
         MVC   COMMNBR,DXDWORK+1     COPY EDITED REQUEST NUMBER
         MVC   COMMTNDE,REQTNODE     COPY TRANSMITTING NODE
         MVC   COMMJOB,REQJOB        JOB NAME IF VIA BATCH
         LA    R1,REQMSG             STATUS MESSAGES TABLE
TREQ0050 DS    0H
         CLC   REQSTAT,0(R1)         STATUS MESSAGE LOCATED?
         BE    TREQ0060              YES
         LA    R1,L'REQSTAT+L'COMMSTAT(R1)
         CLI   0(R1),X'FF'           END OF TABLE?
         BNE   TREQ0050              NO
TREQ0060 DS    0H
         MVC   COMMSTAT,1(R1)        COPY STATUS MESSAGE
         MVC   COMMODSN,REQODSNM     COPY ORIGINAL DATASET NAME
         MVC   COMMOMEM,REQOMEM      COPY ORIGINAL MEMBER NAME
         MVC   COMMDDSN,REQDDSNM     COPY DESTINATION DATASET NAME
         MVC   COMMDMEM,REQDMEM      COPY NEW MEMBER NAME
         MVC   COMMWDSN,REQWDSNM     COPY STAGING DATASET NAME
         MVC   COMMIDSN,REQIDSNM     COPY SYSIN DATASET NAME
         MVC   COMMSDSN,REQSDSNM     COPY SYSPRINT DATASET NAME
         CLI   REQREPL,C'N'          DON'T REPLACE?
         BE    TREQ0070              RIGHT
         MVC   COMMREPL,YES          INDICATE REPLACE=YES
         B     TREQ0080
TREQ0070 DS    0H
         MVC   COMMREPL,NO           INDICATE REPLACE=NO
TREQ0080 DS    0H
         CLI   REQALIAS,C'N'         DON'T SEND ALIASES?
         BE    TREQ0090              RIGHT
         MVC   COMMALAS,YES          INDICATE ALIAS=YES
         B     TREQ0100
TREQ0090 DS    0H
         MVC   COMMALAS,NO           INDICATE ALIAS=NO
TREQ0100 DS    0H
         ITRACE ID=DISPLAY
         MVI   COMMFNC,C' '          CLEAR COMMAND
         LA    R1,DISPLAY            DISPLAY COMMAND ADDRESS
         ST    R1,DXDSPFP1           SET SPF PARM ADDRESS 1
         LA    R1,DXDPANL            PANEL NAME
         ST    R1,DXDSPFP2           SET ADDRESS IN PARM LIST
         OI    DXDSPFP2,X'80'        FLAG 'END-OF-LIST'
         LA    R1,DXDSPFP1           DISPLAY PARMS
         L     R15,AISPLINK          SPF INTERFACE PARMS
         BALR  R14,R15               LINK TO DISPLAY
         MVC   COMMMSG,COMMBLKS      CLEAR MESSAGE
         CH    R15,H8                'END' PRESSED?
         BE    EXIT0000              YES
         CLI   COMMFNC,C'N'          NEXT RECORD?
         BE    TREQ0020              YES.. REQUEST NEXT RECORD
         TM    DXDFLAG,$DELETE       REQUEST DELETED?
         BO    ERR0060               YES
         CLI   COMMFNC,C'C'          CANCEL THIS REQUEST?
         BE    TREQ0120              YES
         CLI   COMMFNC,C'D'          DELETE THIS REQUEST?
         BE    TREQ0130              YES
         CLI   COMMFNC,C'L'          DISPLAY NODE LIST?
         BE    TREQ0140              YES
         CLI   COMMFNC,C'O'          DISPLAY SYSPRINT?
         BE    TREQ0150              YES
         CLI   COMMFNC,C' '          REFRESH INFO ON THIS REQUEST?
         BE    TREQ0030              YES
TREQ0110 DS    0H
         ITRACE ID=INVLDCMD          USER ENTERED AN INVALID COMMAND
         MVC   COMMMSG(MSG01L),MSG01 SET MESSAGE
         B     TREQ0080              DISPLAY WITH MESSAGE
TREQ0120 DS    0H
         ITRACE ID=CANCEL
         MVI   USERCMD,$USERCAN      SET COMMAND (CANCEL)
         B     TREQ0040              SEND COMMAND TO FX
TREQ0130 DS    0H
         CLI   COMMUATH,3            ADMINISTRATOR OR GREATER?
         BL    TREQ0110              NO
         ITRACE ID=DELETE
         OI    DXDFLAG,$DELETE       INDICATE REQUEST HAS BEEN DELETED
         MVI   USERCMD,$USERDEL      SET COMMAND (DELETE)
         B     TREQ0040              SEND COMMAND TO FX
TREQ0140 DS    0H
         ITRACE ID=NODEDISP
         MVC   COMMZCMD,COMMBLKS     CLEAR SPF COMMAND
         MVC   COMMFNC,COMMBLKS      CLEAR OUR COMMAND
         MVI   TNODECMD,$TNODED      DISPLAY NODE LIST
         ST    R4,TNODEREQ           SET REQBLOK ADDRESS
         LA    R1,COMMZCMD           SPF ZCMD DATA ADDRESS
         ST    R1,TNODEZCM           PASS ADDRESS TO NODE DISPLAY
         LA    R1,TNODEPRM           NODE DISPLAY PARM LIST ADDRESS
         L     R15,ATNODE            NODE DISPLAY ENTRY POINT
         BALR  R14,R15               DISPLAY NODE LIST
         B     TREQ0080              RE-DISPLAY
TREQ0150 DS    0H
         ITRACE ID=PRINT1
         MVI   USERCMD,$USERPRT      SET COMMAND (RETURN SYSPRINT)
         B     TREQ0040              SEND COMMAND TO FX
TREQ0160 DS    0H
         ITRACE ID=PRINT2
         L     R2,DCB24              DCB'S ADDRESS
         USING IHADCB,R2             DEFINE BASE
         MVC   DCBLRECL,USERRCSZ     COPY RECORD SIZE
         MVC   DCBBLKSI,USERBLKZ     COPY BLOCK SIZE
         MVC   DCBRECFM,USERRCFM     COPY RECORD FORMAT
         FX24  $OPENO                OPEN THE DCB FOR OUTPUT
         SR    R3,R3                 CLEAR REGISTER
         ICM   R3,3,USERLEN          TOTAL LENGTH RETURNED
         SH    R3,=Y(USERPRT-USERREQ) MINUS PREFIX LENGTH
         LA    R4,USERPRT            FIRST LINE OF SYSPRINT
TREQ0170 DS    0H
         ST    R4,IOA24              SET I/O AREA ADDRESS
         FX24  $PUT                  WRITE A RECORD TO TEMP FILE
         SR    R1,R1                 CLEAR REGISTER
         TM    DCBRECFM,DCBRECV      VARIABLE LENGTH RECORDS?
         BO    TREQ0180              YES
         ICM   R1,3,DCBLRECL         USE RECORD SIZE FROM DCB
         B     TREQ0190
TREQ0180 DS    0H
         ICM   R1,3,0(R4)            USE RECORD SIZE FROM I/O AREA
TREQ0190 DS    0H
         SR    R3,R1                 MINUS LENGTH OF THIS RECORD
         BZ    TREQ0200              END OF DATA
         AR    R4,R1                 NEXT RECORD
         B     TREQ0170              LOOP
TREQ0200 DS    0H
         ITRACE ID=LISTEOD           END OF LIST DATA
         FX24  $CLOSE                CLOSE THE TEMP FILE
         XC    DXDSPFP1(DXDSPFPL),DXDSPFP1
         LA    R1,LMINIT             LMINIT COMMAND NAME ADDRESS
         ST    R1,DXDSPFP1           SET IN PARM LIST
         LA    R1,DID                VARIABLE NAME OF DID VALUE
         ST    R1,DXDSPFP2           SET IN PARM LIST
         LA    R1,DCBDDNAM           DDNAME ADDRESS
         ST    R1,DXDSPFPA           SET IN PARM LIST
         OI    DXDSPFPA,X'80'        SET 'END-OF-LIST'
         LA    R1,DXDSPFP1           FIRST LMINIT PARM
         L     R15,AISPLINK          SPF INTERFACE ENTRY POINT
         BALR  R14,R15               LINK TO SPF
         LTR   R15,R15               LMINIT SUCCESSFUL?
         BNZ   ERR0040               NO
         XC    DXDSPFP1(DXDSPFPL),DXDSPFP1
         LA    R1,BROWSE             BROWSE COMMAND NAME
         ST    R1,DXDSPFP1           SET IN PARM LIST
         LA    R1,COMMDID            DATA ID
         ST    R1,DXDSPFP6           SET ADDRESS IN PARM LIST
         OI    DXDSPFP6,X'80'        FLAG 'END-OF-LIST'
         LA    R1,DXDSPFP1           PARM LIST ADDRESS
         L     R15,AISPLINK          SPF INTERFACE ADDRESS
         BALR  R14,R15               LINK TO SPF
         LTR   R15,R15               BROWSE SUCCESSFUL?
         BNZ   ERR0050               NO
         B     TREQ0030              REQUEST 'REFRESHED' DATA
TREQ0210 DS    0H
         ITRACE ID=MSTREOF           END OF MASTER FILE RECORDS
         TM    DXDFLAG,$FOUND        ANY RECORDS FOUND AT ALL?
         BNO   TREQ0220              NO
         MVC   COMMMSG(MSG02L),MSG02 SET MESSAGE
         B     EXIT0000              EXIT
TREQ0220 DS    0H
         MVC   COMMMSG(MSG03L),MSG03 SET MESSAGE
         B     EXIT0000              AND EXIT
TREQ0230 DS    0H
         CLI   USERRC,0              SUCCESSFUL?
         BNE   TREQ0240              NO
         MVC   COMMMSG(MSG04L),MSG04 SET MESSAGE
         B     TREQ0080              DISPLAY WITH MESSAGE
TREQ0240 DS    0H
         MVC   COMMMSG(MSG05L),MSG05 SET MESSAGE
         B     TREQ0080              DISPLAY WITH MESSAGE
ERR0010  DS    0H
         ITRACE ID=SENDFAIL,         SEND FAILED                       +
               DATA1=RPL6RC          .. RETURN CODE
         ABEND $U0053,DUMP,,USER
ERR0020  DS    0H
         ITRACE ID=RECVFAIL,         RECEIVE FAILED                    +
               DATA1=RPL6RC          .. RETURN CODE
         ABEND $U0054,DUMP,,USER
ERR0030  DS    0H
         ITRACE ID=NOTAUTH           USER IS NOT AUTHORIZED TO USE FX
         MVC   COMMMSG(MSG06L),MSG06 SET MESSAGE
         B     EXIT0000              AND EXIT
ERR0040  DS    0H
         ITRACE ID=LMINITF,          LMINIT FAILED                     +
               DATA1=R15             .. RETURN CODE
         ABEND $U0081,DUMP,,USER
ERR0050  DS    0H
         ITRACE ID=BROWSEF,          BROWSE FAILED                     +
               DATA1=R15             .. RETURN CODE
         ABEND $U0082,DUMP,,USER
ERR0060  DS    0H
         MVC   COMMMSG(MSG07L),MSG07
         B     TREQ0080              DISPLAY WITH MESSAGE
ERR0070  DS    0H
         ITRACE ID=INUSE             USER IS NOT AUTHORIZED TO USE FX
         MVC   COMMMSG(MSG08L),MSG08 SET MESSAGE
         B     EXIT0000              AND EXIT
EXIT0000 DS    0H
         ITRACE ID=EXIT
         ICM   R9,15,DXD24           24-BIT STORAGE AREA ADDRESS
         BZ    EXIT0020              NOT PRESENT
         ICM   R1,15,DCB24           DCB ADDRESS
         BZ    EXIT0010              NOT ACQUIRED
         FREEMAIN RU,A=(1),LV=DCBIL  FREEMAIN DCB
EXIT0010 DS    0H
         FREEMAIN RU,A=(9),LV=FX24L FREEMAIN 24-BIT WORK AREA
         XC    DXD24,DXD24           CLEAR THE ADDRESS
EXIT0020 DS    0H
         MVC   COMMRID,DXDUSER       RESET ID
         MVI   COMMFNC,C' '          CLEAR COMMAND
         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS
         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS
         BR    R14                   RETURN
* ------------------------------------------------------------------- *
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSTART DC    Q(DXDTREQI)           DISPLACEMENT TO WORK AREA
H8       DC    H'8'
DID      DC    CL8'DID'
REQI     DC    CL4'REQI'
DISPLAY  DC    CL8'DISPLAY'
NO       DC    C'NO '
YES      DC    C'YES'
LMINIT   DC    C'LMINIT'
BROWSE   DC    C'BROWSE'
FXREQI1  DC    CL8'FXREQI1'
FXREQI2  DC    CL8'FXREQI2'
DATEEDWD DC    X'F0212020204B202020'
TIMEEDWD DC    X'F021204B20204B20204B2020'
NODEEDWD DC    X'40202021'
DCBI     DCB   DDNAME=FXUT1,         DCB USED TO WRITE TO TEMP FILE    +
               DSORG=PS,             .. SEQUENTIAL FILE                +
               MACRF=PM              .. PUT/MOVE MODE
DCBIL    EQU   *-DCBI                LENGTH OF DCB
MSG01    DS    0C
         DC    CL11'FXTREQI01E'
         DC    C'INVALID COMMAND'
MSG01L   EQU   *-MSG01
MSG02    DS    0C
         DC    CL11'FXTREQI02I'
         DC    C'NO MORE REQUESTS FOUND'
MSG02L   EQU   *-MSG02
MSG03    DS    0C
         DC    CL11'FXTREQI03I'
         DC    C'NO REQUESTS FOUND'
MSG03L   EQU   *-MSG03
MSG04    DS    0C
         DC    CL11'FXTREQI04I'
         DC    C'REQUEST COMPLETE'
MSG04L   EQU   *-MSG04
MSG05    DS    0C
         DC    CL11'FXTREQI05E'
         DC    C'UPDATE NOT ALLOWED'
MSG05L   EQU   *-MSG05
MSG06    DS    0C
         DC    CL11'FXTREQI06E'
         DC    C'YOU ARE NOT AUTHORIZED TO USE FX'
MSG06L   EQU   *-MSG06
MSG07    DS    0C
         DC    CL11'FXTREQI07I'
         DC    C'REQUEST HAS BEEN DELETED, ACTION ABORTED'
MSG07L   EQU   *-MSG07
MSG08    DS    0C
         DC    CL11'FXTREQI08E'
         DC    C'REQUEST IS IN USE, CANNOT DELETE AT THIS TIME'
MSG08L   EQU   *-MSG08
REQMSG   DS    0C
         COPY  REQMSG
NODEMSG  DS    0C
         COPY  NODEMSG
         LTORG
* ------------------------------------------------------------------- *
*                                                                     *
*        WORK AREAS                                                   *
*                                                                     *
* ------------------------------------------------------------------- *
DXDTREQI DSECT
DXDID    DS    CL8
DXDSAVE  DS    18F
DXDDWORD DS    D
DXD24    DS    A              24-BIT WORK AREA ADDRESS
DXDSPFP1 DS    A              ISPF PARM 1
DXDSPFP2 DS    A              ISPF PARM 2
DXDSPFP3 DS    A              ISPF PARM 3
DXDSPFP4 DS    A              ISPF PARM 4
DXDSPFP5 DS    A              ISPF PARM 5
DXDSPFP6 DS    A              ISPF PARM 6
DXDSPFP7 DS    A              ISPF PARM 7
DXDSPFP8 DS    A              ISPF PARM 8
DXDSPFP9 DS    A              ISPF PARM 9
DXDSPFPA DS    A              ISPF PARM 10
DXDSPFPL EQU   *-DXDSPFP1     LENGTH OF MAX PARM LIST
DXDREC#  DS    H              CURRENT MASTER FILE RECORD NUMBER
DXDFLAG  DS    X              FLAGS/INDICATORS
$FOUND   EQU   X'80'          .. AT LEAST 1 RECORD WAS FOUND FOR USER
$DELETE  EQU   X'40'          .. REQUEST HAS BEEN DELETED
DXDUSER  DS    CL8            USER ID FROM MAIN MENU
DXDPANL  DS    CL8
DXDWORK  DS    CL16
DXDCMD   DS    C              LAST COMMAND SENT TO FX
         TNODEPRM DSECT=NO
* ------------------------------------------------------------------- *
*              COMMON DATA MAP                                        *
* ------------------------------------------------------------------- *
         FXTCOMM TYPE=DSECT
* ------------------------------------------------------------------- *
*              MASTER FILE RECORD                                     *
* ------------------------------------------------------------------- *
         REQBLOK  DSECT=YES
* ------------------------------------------------------------------- *
*              USER INTERFACE REQUEST BLOCK                           *
* ------------------------------------------------------------------- *
         USERREQ
USERCMD  DS    C               COMMAND TO FXUREQI
$USERINQ EQU   C'I'            .. INQUIRE
$USERCAN EQU   C'C'            .. CANCEL REQUEST
$USERDEL EQU   C'D'            .. DELETE REQUEST
$USERPRT EQU   C'O'            .. RETURN SYSPRINT
$USERSTA EQU   C'S'            .. RETURN STATUS OF SPECIFIC REQUEST
USERREC# DS    XL2             MASTER FILE RECORD NUMBER
USERIDI  DS    CL8             USER ID (FOR SPECIFIC USER REQUESTS)
USERNODE DS    CL8             NODE NAME (FOR READ SPECIFIC)
USERNBR  DS    XL4             REQUEST NUMBER (FOR READ SPECIFIC)
USERXL   EQU   *-USERREQ       TOTAL LENGTH
USERRCSZ DS    XL2             LRECL FROM SENDER'S DCB
USERBLKZ DS    XL2             BLOCK SIZE FROM SENDER'S DCB
USERRCFM DS    X               RECORD FORMAT FROM SENDER'S DCB
USERPRT  DS    0C              SYSPRINT OUTPUT DATA
* ------------------------------------------------------------------- *
*             24-BIT MODULE PARAMETER BLOCK                           *
* ------------------------------------------------------------------- *
         FX24PRM   DSECT=YES
* ------------------------------------------------------------------- *
*              ACB                                                    *
* ------------------------------------------------------------------- *
         IFGACB   AM=VTAM
* ------------------------------------------------------------------- *
*              RPL                                                    *
* ------------------------------------------------------------------- *
         IFGRPL   AM=VTAM
* ------------------------------------------------------------------- *
*              DCB                                                    *
* ------------------------------------------------------------------- *
         DCBD     DSORG=PS
* ------------------------------------------------------------------- *
*              EQUATES                                                *
* ------------------------------------------------------------------- *
         COPY REGEQU
         ABCODES
         END  FXTREQI
./ ADD NAME=FXTSHUT  0100-99056-99056-1500-00104-00104-00000-FX-REL1

         TITLE 'FXTSHUT  SHUTDOWN FX STARTED TASK'
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXTSHUT                                               *
*                                                                     *
*   Provide the TSO "operator" or "master" level users a method of    *
*   shutting down (terminating) the FX started task.                  *
*                                                                     *
* ------------------------------------------------------------------- *
TSHUT    FXPRFX 'TSO INTERFACE FX STARTED TASK SHUTDOWN',              +
               COMM=FXTCOMM
FXTSHUT  AMODE 31
FXTSHUT  RMODE ANY
         CLC   DXDID,MODID           WORK AREA INITIALIZED?
         BE    SHUT0010              YES
         ITRACE ID=INIT
         MVC   DXDID,MODID           WORK AREA INITIALIZED
SHUT0010 DS    0H
         ITRACE ID=BLDREQ
         L     R5,COMMIOA            I/O AREA'S ADDRESS
         USING USERREQ,R5            DEFINE BASE
         LA    R1,USERDATA-USERREQ   TOTAL DATA LENGTH
         STH   R1,USERLEN            SET TOTAL DATA LENGTH
         MVC   USERMOD,SHUT          PROCESSING MODULE SUFFIX
         MVC   USERMSG,COMMBLKS      CLEAR MESSAGE
         L     R3,COMMRPL            RPL ADDRESS
         L     R4,COMMRPLX           RPL EXTENSION ADDRESS
         USING ISTRPL6X,R4           DEFINE BASE
         LH    R6,0(R5)              I/O LENGTH
         APPCCMD CONTROL=SEND,       ISSUE SEND                        +
               QUALIFY=DATA,         .. SEND DATA                      +
               RPL=(R3),             .. RPL'S ADDRESS                  +
               AREA=(R5),            .. I/O AREA ADDRESS               +
               RECLEN=(R6),          .. I/O LENGTH                     +
               CONMODE=CS,           .. CONTINUE SPECIFIC              +
               CONVID=COMMCID        .. CONVERSATION ID
         OC    RPL6RC,RPL6RC         SEND OK?
         BNZ   ERR0010               NO
         L     R6,=A(COMMIOSZ)       I/O AREA SIZE
         APPCCMD CONTROL=RECEIVE,    ISSUE RECEIVE                     +
               QUALIFY=SPEC,         .. FOR A SPECIFIC SESSION         +
               RPL=(R3),             .. RPL'S ADDRESS                  +
               FILL=LL,              .. ONLY 1 LOGICAL RECORD          +
               AREA=(R5),            .. I/O AREA ADDRESS               +
               AREALEN=(R6),         .. I/O AREA SIZE                  +
               CONVID=COMMCID        .. CONVERSATION ID
         OC    RPL6RC,RPL6RC         RECEIVE OK?
         BNZ   ERR0020               NO
         MVC   COMMMSG,USERMSG       SET RETURNED MESSAGE
         OI    COMMFLAG,$SHUT        STC WAS SHUT DOWN
         B     EXIT0000              EXIT
ERR0010  DS    0H
         ITRACE ID=SENDFAIL,         SEND FAILED                       +
               DATA1=RPL6RC          .. RETURN CODE
         ABEND $U0058,DUMP,,USER
ERR0020  DS    0H
         ITRACE ID=RECVFAIL,         RECEIVE FAILED                    +
               DATA1=RPL6RC          .. RETURN CODE
         ABEND $U0059,DUMP,,USER
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS
         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS
         BR    R14                   RETURN
* ------------------------------------------------------------------- *
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSTART DC    Q(DXDTSHUT)           DISPLACEMENT TO WORK AREA
SHUT     DC    CL4'SHUT'
         LTORG
* ------------------------------------------------------------------- *
*                                                                     *
*        WORK AREAS                                                   *
*                                                                     *
* ------------------------------------------------------------------- *
DXDTSHUT DSECT
DXDID    DS    CL8
DXDSAVE  DS    18F
* ------------------------------------------------------------------- *
*              COMMON DATA MAP                                        *
* ------------------------------------------------------------------- *
         FXTCOMM TYPE=DSECT
* ------------------------------------------------------------------- *
*              USER INTERFACE REQUEST BLOCK                           *
* ------------------------------------------------------------------- *
         USERREQ
* ------------------------------------------------------------------- *
*              ACB                                                    *
* ------------------------------------------------------------------- *
         IFGACB   AM=VTAM
* ------------------------------------------------------------------- *
*              RPL                                                    *
* ------------------------------------------------------------------- *
         IFGRPL   AM=VTAM
* ------------------------------------------------------------------- *
*              EQUATES                                                *
* ------------------------------------------------------------------- *
         COPY REGEQU
         ABCODES
         END  FXTSHUT
./ ADD NAME=FXTSNAP  0100-99056-99056-1500-00106-00106-00000-FX-REL1

         TITLE 'FXTSNAP  SNAPSHOT FX STARTED TASK'
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXTSNAP                                               *
*                                                                     *
*   Provide the TSO "operator" or "master" level users a method of    *
*   requesting a snapshot of the FX started task.   The STC will      *
*   dynamically allocate a "sysout" data set, write the snapshot      *
*   and de-allocate the data set before responding to this request.   *
*   This may cause the TSO user to be "hung" for some period of time. *
*                                                                     *
* ------------------------------------------------------------------- *
TSNAP    FXPRFX 'TSO INTERFACE SNAPSHOT FX STARTED TASK',              +
               COMM=FXTCOMM
FXTSNAP  AMODE 31
FXTSNAP  RMODE ANY
         CLC   DXDID,MODID           WORK AREA INITIALIZED?
         BE    SNAP0010              YES
         ITRACE ID=INIT
         MVC   DXDID,MODID           WORK AREA INITIALIZED
SNAP0010 DS    0H
         ITRACE ID=BLDREQ
         L     R5,COMMIOA            I/O AREA'S ADDRESS
         USING USERREQ,R5            DEFINE BASE
         LA    R1,USERDATA-USERREQ   TOTAL DATA LENGTH
         STH   R1,USERLEN            SET TOTAL DATA LENGTH
         MVC   USERMOD,SNAP          PROCESSING MODULE SUFFIX
         MVC   USERMSG,COMMBLKS      CLEAR MESSAGE
         L     R3,COMMRPL            RPL ADDRESS
         L     R4,COMMRPLX           RPL EXTENSION ADDRESS
         USING ISTRPL6X,R4           DEFINE BASE
         LH    R6,0(R5)              I/O LENGTH
         APPCCMD CONTROL=SEND,       ISSUE SEND                        +
               QUALIFY=DATA,         .. SEND DATA                      +
               RPL=(R3),             .. RPL'S ADDRESS                  +
               AREA=(R5),            .. I/O AREA ADDRESS               +
               RECLEN=(R6),          .. I/O LENGTH                     +
               CONMODE=CS,           .. CONTINUE SPECIFIC              +
               CONVID=COMMCID        .. CONVERSATION ID
         OC    RPL6RC,RPL6RC         SEND OK?
         BNZ   ERR0010               NO
         L     R6,=A(COMMIOSZ)       I/O AREA SIZE
         APPCCMD CONTROL=RECEIVE,    ISSUE RECEIVE                     +
               QUALIFY=SPEC,         .. FOR A SPECIFIC SESSION         +
               RPL=(R3),             .. RPL'S ADDRESS                  +
               FILL=LL,              .. ONLY 1 LOGICAL RECORD          +
               AREA=(R5),            .. I/O AREA ADDRESS               +
               AREALEN=(R6),         .. I/O AREA SIZE                  +
               CONVID=COMMCID        .. CONVERSATION ID
         OC    RPL6RC,RPL6RC         RECEIVE OK?
         BNZ   ERR0020               NO
         MVC   COMMMSG,USERMSG       SET RETURNED MESSAGE
         B     EXIT0000              EXIT
ERR0010  DS    0H
         ITRACE ID=SENDFAIL,         SEND FAILED                       +
               DATA1=RPL6RC          .. RETURN CODE
         ABEND $U0058,DUMP,,USER
ERR0020  DS    0H
         ITRACE ID=RECVFAIL,         RECEIVE FAILED                    +
               DATA1=RPL6RC          .. RETURN CODE
         ABEND $U0059,DUMP,,USER
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS
         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS
         BR    R14                   RETURN
* ------------------------------------------------------------------- *
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSTART DC    Q(DXDTSNAP)           DISPLACEMENT TO WORK AREA
SNAP     DC    CL4'SNAP'
         LTORG
* ------------------------------------------------------------------- *
*                                                                     *
*        WORK AREAS                                                   *
*                                                                     *
* ------------------------------------------------------------------- *
DXDTSNAP DSECT
DXDID    DS    CL8
DXDSAVE  DS    18F
* ------------------------------------------------------------------- *
*              COMMON DATA MAP                                        *
* ------------------------------------------------------------------- *
         FXTCOMM TYPE=DSECT
* ------------------------------------------------------------------- *
*              USER INTERFACE REQUEST BLOCK                           *
* ------------------------------------------------------------------- *
         USERREQ
* ------------------------------------------------------------------- *
*              ACB                                                    *
* ------------------------------------------------------------------- *
         IFGACB   AM=VTAM
* ------------------------------------------------------------------- *
*              RPL                                                    *
* ------------------------------------------------------------------- *
         IFGRPL   AM=VTAM
* ------------------------------------------------------------------- *
*              EQUATES                                                *
* ------------------------------------------------------------------- *
         COPY REGEQU
         ABCODES
         END  FXTSNAP
./ ADD NAME=FXTTERM  0100-99056-99056-1500-00140-00140-00000-FX-REL1

         TITLE 'FXTTERM TSO INTERFACE TERMINATION'
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXTTERM                                               *
*                                                                     *
*  TSO interface termination                                          *
*   1) Delete SPF variables                                           *
*   2) Close the ACB                                                  *
*   3) Free the ACB, RPL, RPL extension, etc                          *
*                                                                     *
* ------------------------------------------------------------------- *
TTERM    FXPRFX 'TSO INTERFACE TERMINATION',COMM=FXTCOMM
FXTTERM  AMODE 31
FXTTERM  RMODE ANY
         ITRACE ID=INIT
         MVC   DXDID,MODID           WORK AREA INITIALIZED
         ITRACE ID=DELVAR            DELETING VARIABLES
         MVI   VARCMD,$VAREOJ        SET COMMAND (DELETE ALL)
         LA    R1,FXTVTBLE           CONTROL DATA ADDRESS
         ST    R1,VARTBLE            PASS ADDRESS TO FXTVAR
         LA    R1,VARREQ             PARM BLOCK ADDRESS
         L     R15,ATVAR             VARIABLE DEFINE/DELETE ADDRESS
         BALR  R14,R15               DELETE VARIABLES
         TM    COMMFLAG,$SESSALO     CONVERSATION ALLOCATED?
         BNO   TERM0010              NO
         ITRACE ID=DEALLOC           DEALLOCATING THE SESSION
         L     R3,COMMRPL            RPL'S ADDRESS
         APPCCMD CONTROL=DEALLOC,    DE-ALLOCATE A SESSION             +
               QUALIFY=FLUSH,        .. FLUSH BUFFERS                  +
               RPL=(R3),             .. RPL'S ADDRESS                  +
               CONVID=COMMCID        .. CONVERSATION ID
         L     R1,COMMRPLX           RPL EXTENSION'S ADDRESS
         USING ISTRPL6X,R1           DEFINE BASE
         OC    RPL6RC,RPL6RC         DE-ALLOCATE SUCCESSFUL?
         BNZ   ERR0010               NO
TERM0010 DS    0H
         TM    COMMFLAG,$ACBOPEN     ACB OPENED?
         BNO   TERM0020              NO
         GETMAIN RU,                 ACQUIRE STORAGE FOR OPEN/CLOSE    +
               LV=OCPLL,             .. SIZE                           +
               LOC=BELOW             .. FROM BELOW THE 16-MEG LINE
         LR    R2,R1                 COPY OPEN/CLOSE ADDRESS
         MVC   0(OCPLL,R2),OCPLI     INITIALIZE OPEN/CLOSE PARM LIST
         L     R3,COMMACB            ACB'S ADDRESS
         CLOSE ((R3)),MF=(E,(R2))    CLOSE THE ACB
         FREEMAIN RU,A=(R2),LV=OCPLL FREEMAIN OPEN/CLOSE PARM LIST
TERM0020 DS    0H
         ICM   R1,15,COMMACB         ACB'S ADDRESS
         BZ    TERM0030              NOT ACQUIRED
         L     R2,COMMACBL           ACB'S LENGTH
         ITRACE ID=FREEACB,          FREEMAIN ACB                      +
               RDATA1=R1,            .. ACB'S ADDRESS                  +
               RDATA2=R2             .. ACB'S LENGTH
         FREEMAIN RU,A=(1),LV=(2)    FREEMAIN ACB
TERM0030 DS    0H
         ICM   R1,15,COMMRPL         RPL'S ADDRESS
         BZ    TERM0040              NOT ACQUIRED
         L     R2,COMMRPLL           RPL'S LENGTH
         ITRACE ID=FREERPL,          FREEMAIN RPL                      +
               RDATA1=R1,            .. RPL'S ADDRESS                  +
               RDATA2=R2             .. RPL'S LENGTH
         FREEMAIN RU,A=(1),LV=(2)    FREEMAIN RPL
TERM0040 DS    0H
         ICM   R1,15,COMMRPLX        RPL EXTENSION'S ADDRESS
         BZ    TERM0050              NOT ACQUIRED
         L     R2,COMMRPXL           RPL EXTENSION'S LENGTH
         ITRACE ID=FREERPLX,         FREEMAIN RPL                      +
               RDATA1=R1,            .. RPL EXTENSION'S ADDRESS        +
               RDATA2=R2             .. RPL EXTENSION'S LENGTH
         FREEMAIN RU,A=(1),LV=(2)    FREEMAIN RPL EXTENSION
TERM0050 DS    0H
         ICM   R1,15,COMMNIB         NIB'S ADDRESS
         BZ    TERM0060              NOT ACQUIRED
         L     R2,COMMNIBL           NIB'S LENGTH
         ITRACE ID=FREENIB,          FREEMAIN NIB                      +
               RDATA1=R1,            .. NIB'S ADDRESS                  +
               RDATA2=R2             .. NIB'S LENGTH
         FREEMAIN RU,A=(1),LV=(2)    FREEMAIN NIB
TERM0060 DS    0H
         ICM   R1,15,COMMXLST        EXLST'S ADDRESS
         BZ    TERM0070              NOT ACQUIRED
         L     R2,COMMXLSL           EXLST'S LENGTH
         ITRACE ID=FREEXLST,         FREEMAIN EXLST                    +
               RDATA1=R1,            .. EXLST'S ADDRESS                +
               RDATA2=R2             .. EXLST'S LENGTH
         FREEMAIN RU,A=(1),LV=(2)
TERM0070 DS    0H
         ICM   R1,15,COMMIOA         I/O AREA ADDRESS
         BZ    EXIT0000              NOT ACQUIRED
         ITRACE ID=FREEIO,           FREEMAIN I/O AREA                 +
               RDATA1=R1             .. I/O AREA'S ADDRESS
         FREEMAIN RU,A=(1),LV=COMMIOSZ
         B     EXIT0000              AND EXIT
ERR0010  DS    0H
         ITRACE ID=DALOFAIL,         SESSION DE-ALLOCATE FAILED        +
               DATA1=RPL6RC          .. DE-ALLOCATE RETURN CODES
         ABEND $U0050,DUMP,,USER
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS
         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS
         BR    R14                   RETURN
* ------------------------------------------------------------------- *
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSTART DC    Q(DXDTTERM)           DISPLACEMENT TO WORK AREA
OCPLI    CLOSE *,MF=L
OCPLL    EQU   *-OCPLI
         LTORG
* ------------------------------------------------------------------- *
*                                                                     *
*        WORK AREAS                                                   *
*                                                                     *
* ------------------------------------------------------------------- *
DXDTTERM DSECT
DXDID    DS    CL8
DXDSAVE  DS    18F
         VARREQ DSECT=NO
* ------------------------------------------------------------------- *
*              COMMON DATA MAP                                        *
* ------------------------------------------------------------------- *
         FXTCOMM TYPE=DSECT
* ------------------------------------------------------------------- *
*              ACB                                                    *
* ------------------------------------------------------------------- *
         IFGACB   AM=VTAM
* ------------------------------------------------------------------- *
*              RPL                                                    *
* ------------------------------------------------------------------- *
         IFGRPL   AM=VTAM
* ------------------------------------------------------------------- *
*              EQUATES                                                *
* ------------------------------------------------------------------- *
         COPY REGEQU
         ABCODES
         END  FXTTERM
./ ADD NAME=FXTVAR   0100-99056-99056-1500-00212-00212-00000-FX-REL1

         TITLE 'FXTVAR   Define or delete SPF variables'
*---------------------------------------------------------------------*
*                                                                     *
*  MODULE NAME: FXTVAR                                                *
*                                                                     *
*  Define or delete SPF variables.                                    *
*                                                                     *
* ------------------------------------------------------------------- *
TVAR     FXPRFX 'TSO/SPF VARIABLE MANAGER',                            +
               COMM=FXMCOMM
FXTVAR   AMODE 31
FXTVAR   RMODE ANY
         LR    R9,R1                 SAVE PARM LIST ADDRESS
         USING VARREQ,R9             DEFINE BASE
         MVC   DXDID,MODID           IDENTIFY AREA
         ITRACE ID=ENTRY,            TRACE ENTRY                       +
               DATA1=VARCMD          .. SAVE THE COMMAND
         LOAD  EP=ISPLINK            LOAD SPF INTERFACE MODULE
         ST    R0,DXDISPF            SAVE SPF INTERFACE ADDRESS
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
VAR0010  DS    0H
         CLI   VARCMD,$VARDEFA       DEFINE ALL VARIABLES?
         BE    VAR0100               YES
         CLI   VARCMD,$VARDEFS       DEFINE SPECIFIC VARIABLES?
         BE    VAR0100               YES
         CLI   VARCMD,$VARDEL        DELETE VARIABLE?
         BE    VAR0200               YES
         CLI   VARCMD,$VAREOJ        DELETE ALL VARIABLES?
         BE    VAR0300               YES
         ITRACE ID=BADCMD
         ABEND $U0075,DUMP,,USER     BAD COMMAND
* ------------------------------------------------------------------- *
*        PROCESS DEFINE COMMANDS                                      *
* ------------------------------------------------------------------- *
VAR0100  DS    0H
         LA    R1,VDEFINE            COMMAND'S ADDRESS
         ST    R1,DXDSPF1            SET ADDRESS IN PARM LIST
         L     R8,VARIDS             LIST OF ID'S
         LH    R7,VARNBR             NUMBER OF ID'S
         ITRACE ID=DEFINE,           DEFINE VARIABLES                  +
               RDATA1=R8,            .. FIRST VARIABLE ID              +
               RDATA2=R7             .. NUMBER OF VARIABLES
         CLI   VARCMD,$VARDEFS       DEFINE SPECIFIC VARIABLES?
         BE    VAR0110               YES
         L     R6,VARTBLE            FIRST VARIABLE
         B     VAR0120               ENTER LOOP
VAR0110  DS    0H
         BAL   R15,LOC0000           LOCATE VARIABLE
VAR0120  DS    0H
         USING VARDSECT,R6           DEFINE BASE
         TM    VARFLAG,$VDEFINE      VARIABLE ALREADY DEFINED?
         BO    VAR0130               YES
         LA    R1,VARNAME            VARIABLE'S NAME
         ST    R1,DXDSPF2            SET NAME'S ADDRESS IN PARM LIST
         SR    R1,R1                 CLEAR REGISTER
         ICM   R1,3,VARDISP          DISPLACEMENT TO DATA IN FXTCOMM
         A     R1,VARAREA            PLUS BASE ADDRESS
         ST    R1,DXDSPF3            SET ADDRESS IN PARM LIST
         LA    R1,VARFORM            DATA FORMAT
         ST    R1,DXDSPF4            SET ADDRESS IN PARM LIST
         LA    R1,VARLEN             VARIABLE LENGTH
         ST    R1,DXDSPF5            SET ADDRESS IN PARM LIST
         OI    DXDSPF5,X'80'         SET END-OF-LIST
         ITRACE ID=VDEF,             DEFINING A VARIABLE               +
               DATA1=VARNAME,        .. VARIABLE'S NAME                +
               DATA2=DXDSPF3         .. ADDRESS OF DATA
         LA    R1,DXDSPFP            SPF PARM LIST ADDRESS
         L     R15,DXDISPF           SPF LINK ENTRY POINT ADDRESS
         BALR  R14,R15               LINK TO SPF
         LTR   R15,R15               VDEFINE SUCCESSFUL?
         BNZ   ERR0020               NO
         OI    VARFLAG,$VDEFINE      VARIABLE HAS BEEN DEFINED
VAR0130  DS    0H
         CLI   VARCMD,$VARDEFA       DEFINE ALL VARIABLES?
         BE    VAR0140               YES
         LA    R8,2(R8)              NEXT VARIABLE ID
         BCT   R7,VAR0110            LOOP
VAR0140  DS    0H
         LA    R6,VARL(R6)           NEXT VARIABLE
         CLI   0(R6),X'FF'           END OF TABLE?
         BNE   VAR0120               NO
         B     EXIT0000              ALL PROCESSED
* ------------------------------------------------------------------- *
*        PROCESS DELETE COMMANDS                                      *
* ------------------------------------------------------------------- *
VAR0200  DS    0H
         LA    R1,VDELETE            COMMAND'S ADDRESS
         ST    R1,DXDSPF1            SET ADDRESS IN PARM LIST
         L     R8,VARIDS             LIST OF ID'S
         LH    R7,VARNBR             NUMBER OF ID'S
         ITRACE ID=DELETE,           DEFINE VARIABLES                  +
               RDATA1=R8,            .. FIRST VARIABLE ID              +
               RDATA2=R7             .. NUMBER OF VARIABLES
VAR0210  DS    0H
         BAL   R15,LOC0000           LOCATE VARIABLE
         TM    VARFLAG,$VDEFINE      VARIABLE DEFINED?
         BNO   VAR0220               NO
         ST    R6,DXDSPF2            SET VARIABLE NAME ADDRESS
         OI    DXDSPF2,X'80'         FLAG END-OF-LIST
         ITRACE ID=DELETE,           DELETING A VARIABLE               +
               DATA1=VARNAME         .. VARIABLE NAME
         LA    R1,DXDSPFP            PARM LIST'S ADDRESS
         L     R15,DXDISPF           SPF ENTRY POINT
         BALR  R14,R15               LINK TO SPF
         LTR   R15,R15               VDELETE SUCCESSFUL?
         BNZ   ERR0030               NO
         NI    VARFLAG,255-$VDEFINE  RESET 'DEFINED' INDICATOR
VAR0220  DS    0H
         LA    R8,2(R8)              NEXT VARIABLE ID
         BCT   R7,VAR0210            PROCESS NEXT VARIABLE
         B     EXIT0000              EXIT
* ------------------------------------------------------------------- *
*        PROCESS END-OF-JOB CLEAN UP                                  *
* ------------------------------------------------------------------- *
VAR0300  DS    0H
         ITRACE ID=EOJ               DELETING ALL VARIABLES
         LA    R1,VDELETE            COMMAND'S ADDRESS
         ST    R1,DXDSPF1            SET ADDRESS IN PARM LIST
         L     R6,VARTBLE            START WITH FIRST VARIABLE
VAR0310  DS    0H
         CLI   0(R6),X'FF'           END OF TABLE?
         BE    EXIT0000              YES
         TM    VARFLAG,$VDEFINE      VARIABLE DEFINED?
         BNO   VAR0320               NO
         ST    R6,DXDSPF2            SET VARIABLE NAME ADDRESS
         OI    DXDSPF2,X'80'         FLAG END-OF-LIST
         ITRACE ID=EOJDEL,           DELETING A VARIABLE               +
               DATA1=VARNAME         .. VARIABLE NAME
         LA    R1,DXDSPFP            PARM LIST'S ADDRESS
         L     R15,DXDISPF           SPF ENTRY POINT
         BALR  R14,R15               LINK TO SPF
         LTR   R15,R15               VDELETE SUCCESSFUL?
         BNZ   ERR0030               NO
VAR0320  DS    0H
         LA    R6,VARL(R6)           NEXT VARIABLE
         B     VAR0310               PROCESS ALL VARIABLES
* ------------------------------------------------------------------- *
*        LOCATE VARIABLES IN VARIABLE TABLE                           *
* ------------------------------------------------------------------- *
LOC0000  DS    0H
         L     R6,VARTBLE            FIRST VARIABLE
LOC0010  DS    0H
         CLI   0(R6),X'FF'           END OF TABLE?
         BE    ERR0010               YES.. INVALID VARIABLE ID
         CLC   VARID,0(R8)           VARIABLE LOCATED?
         BE    LOC0020               YES
         LA    R6,VARL(R6)           NEXT VARIABLE
         B     LOC0010               LOOP
LOC0020  DS    0H
         BR    R15                   RETURN
* ------------------------------------------------------------------- *
*        ERROR ROUTINES                                               *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         ITRACE ID=NOTFOUND
         ABEND $U0076,DUMP,,USER
ERR0020  DS    0H
         ITRACE ID=VDEFFAIL,                                           +
               RDATA1=R15
         ABEND $U0077,DUMP,,USER
ERR0030  DS    0H
         ABEND $U0078,DUMP,,USER
         ITRACE ID=VDELFAIL,                                           +
               RDATA1=R15
EXIT0000 DS    0H
         ITRACE ID=EXIT
         DELETE EP=ISPLINK           DELETE SPF INTERFACE MODULE
         XC    DXDISPF,DXDISPF       CLEAR THE ADDRESS
         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS
         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS
         BR    R14                   RETURN
* ------------------------------------------------------------------- *
*        CONSTANTS                                                    *
* ------------------------------------------------------------------- *
DXDSTART DC    Q(DXDTVAR)
VDEFINE  DC    CL8'VDEFINE'
VDELETE  DC    CL8'VDELETE'
         LTORG
* ------------------------------------------------------------------- *
*        WORK AREA                                                    *
* ------------------------------------------------------------------- *
DXDTVAR  DSECT
DXDID    DC    CL8' '
DXDSAVE  DS    18F
DXDISPF  DS    A                     ISPF INTERFACE ENTRY POINT
DXDSPFP  DS    0A                    ISPF PARM LIST
DXDSPF1  DS    A                     PARM 1 ADDRESS
DXDSPF2  DS    A                     PARM 2 ADDRESS
DXDSPF3  DS    A                     PARM 3 ADDRESS
DXDSPF4  DS    A                     PARM 4 ADDRESS
DXDSPF5  DS    A                     PARM 5 ADDRESS
* ------------------------------------------------------------------- *
*              COMMON DATA                                            *
* ------------------------------------------------------------------- *
         FXMCOMM TYPE=DSECT
* ------------------------------------------------------------------- *
*              VARIABLE TABLE ENTRIES                                 *
* ------------------------------------------------------------------- *
         COPY  VARDSECT
* ------------------------------------------------------------------- *
*              INTERFACE BLOCK                                        *
* ------------------------------------------------------------------- *
         VARREQ   DSECT=YES
* ------------------------------------------------------------------- *
*              EQUATES                                                *
* ------------------------------------------------------------------- *
         COPY REGEQU
         ABCODES
         END  FXTVAR
./ ADD NAME=FXUSER   0100-99056-99056-1500-00934-00934-00000-FX-REL1

         TITLE 'FXUSER  ALLOW USERS TO ENTER/INQUIRE REQUESTS'
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXUSER                                                *
*                                                                     *
*  Allows users to enter or inquire on requests via a subroutine type *
*  call.                                                              *
*                                                                     *
*  For a new request entry the user must supply:                      *
*   A.  For full data set transmissions                               *
*     1) The original data set name.                                  *
*     2) If the data set is to be restored with a different name,     *
*        the user must supply the new name.                           *
*     3) Whether or not the restore operation should replace an       *
*        existing data set at the destinations.                       *
*     4) At least 1 destination.                                      *
*   B.  For PDS member transmissions                                  *
*     1) The source data set name.                                    *
*     2) The original member name.                                    *
*     3) If the member is to be restored to a PDS with a different    *
*        name than the source PDS, the user must supply the new       *
*        data set name.                                               *
*     4) If the member is to be restored with a new name, the user    *
*        must supply the new name.                                    *
*     5) Whether or not to replace the member at each destination.    *
*     6) Whether or not to send the aliases if any.                   *
*     7) At least 1 destination.                                      *
*  ** If a new member name is given, the original member name must    *
*     be given.                                                       *
*  ** If a new member name is given, the alias flag must be blank or  *
*     'N' (FX will not transmit a PDS member with its aliases and     *
*     also rename the member).                                        *
*                                                                     *
*  For request inquiries the user must supply:                        *
*        The request id (enode nbr).                                  *
*                                                                     *
*                                                                     *
*  For both request entry and inquiry, the number of nodes the user   *
*  has allowed for must be set in field PARMNDE#.  This field will    *
*  be modified before return to the user with the actual number of    *
*  nodes in the request entered or queried.  If the user makes        *
*  multiple calls, PARMNDE# should be reset to the number of nodes    *
*  in the users parm list before each call.  If the number of nodes   *
*  returned on a query would exceed the size of the users parm list   *
*  area, the nodes status will be truncated, and the return code set  *
*  to 4 to notify the user of the truncation.                         *
*                                                                     *
* ------------------------------------------------------------------- *
FXUSER   CSECT
FXUSER   AMODE 31
FXUSER   RMODE ANY
         STM   R14,R12,12(R13)       SAVE CALLER'S REGISTERS
         LR    R11,R15               COPY BASE
         LA    R12,2048(R11)         INITIALIZE 2ND BASE REGISTER
         LA    R12,2048(R12)         INITIALIZE 2ND BASE REGISTER
         USING FXUSER,R11,R12        DEFINE BASE
         B     INIT0000
         DC    CL8'FXUSER'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
INIT0000 DS    0H
         LR    R10,R1                COPY PARM LIST
         USING USERPARM,R10          DEFINE BASE
         GETMAIN RU,                 ACQUIRE A SAVE AREA               +
               LV=WKL,               .. AREA SIZE                      +
               LOC=BELOW             .. ALLOW FOR 24-BIT CALLERS
         ST    R13,4(R1)             SAVE CALLER'S SAVE AREA ADDRESS
         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO CALLER'S
         LR    R13,R1                COPY WORK AREA ADDRESS
         USING WK,R13                DEFINE BASE
         MVI   PARMMSG,C' '
         MVC   PARMMSG+1(L'PARMMSG-1),PARMMSG
         XC    PARMRC,PARMRC         ZERO RETURN CODE TO ZERO
         OC    PARMNDE#,PARMNDE#     ANY NODES IN USER'S AREA?
         BZ    INIT0020              NO.. NOT VALID
         CLC   PARMNDE#,=Y($MAXNODE) MORE THAN IN MASTER FILE?
         BNH   INIT0010              NO
         MVC   PARMNDE#,=Y($MAXNODE) LIMIT TO NUMBER IN MASTER FILE
INIT0010 DS    0H
         CLI   PARMCMD,$ENTER        ENTER A NEW REQUEST?
         BE    USER0000              YES
         CLI   PARMCMD,$INQUIRE      INQUIRE ON A PREVIOUS REQUEST?
         BE    USER0300              YES.. SKIP ENTRY EDIT CHECKS
         MVC   PARMMSG(MSG01L),MSG01 INVALID COMMAND
         MVC   PARMRC,H32            SET RETURN CODE
         B     EXIT0000              AND EXIT
INIT0020 DS    0H
         MVC   PARMMSG(MSG02L),MSG02 SET MESSAGE
         MVC   PARMRC,H8             SET RETURN CODE
         B     EXIT0000              AND EXIT
* ------------------------------------------------------------------- *
*                                                                     *
*  This is a new request entry, parameters must be verified.          *
*                                                                     *
*    1) Original data set name must be given.                         *
*    2) Original data set name must be in correct format.             *
*    3) If member name is present, it must be valid.                  *
*    4) If a new member name is present, it must be valid.            *
*    5) If a new member name is present, the original name must be    *
*       present.                                                      *
*    6) If a new member name is present, the ALIAS flag must not      *
*       be 'Y'.                                                       *
*    7) The REPLACE flag must be either 'Y', 'N', or blank.           *
*    8) The ALIAS flag must be either 'Y', 'N', or blank.             *
*    9) If ALIAS flag = 'Y', the original member name must be present.*
*   10) At least 1 destination must be given.                         *
*                                                                     *
* ------------------------------------------------------------------- *
USER0000 DS    0H
         CLC   PARMODSN,BLANKS       DATA SET NAME BLANK?
         BE    USER0100              YES
         LA    R1,PARMODSN           DATA SET NAME'S ADDRESS
         ST    R1,DSNADDR            PASS ADDRESS TO FXDSNVER
         LA    R1,DSNREQ             DSNVER PARMS
         L     R15,VDSNVER           DATA SET NAME VERIFIER ENTRY POINT
         BALR  R14,R15               LINK TO DSN VERIFIER
         CLI   DSNSTAT,$DSNOK        DATA SET NAME VALID?
         BNE   USER0110              NO
         CLC   PARMOMEM,BLANKS       ORIGINAL MEMBER NAME BLANK?
         BE    USER0010              YES
         LA    R1,PARMOMEM           MEMBER NAME'S ADDRESS
         ST    R1,MEMADDR            PASS ADDRESS TO FXMEMVER
         LA    R1,MEMREQ             DSNMEM PARMS
         L     R15,VMEMVER           MEMBER NAME VERIFIER ENTRY POINT
         BALR  R14,R15               LINK TO MEMBER NAME VERIFIER
         CLI   MEMSTAT,$DSNOK        MEMBER NAME VALID?
         BNE   USER0120              NO
         CLC   PARMDMEM,BLANKS       DESTINATION NAME BLANK?
         BE    USER0010              YES
         LA    R1,PARMDMEM           MEMBER NAME'S ADDRESS
         ST    R1,MEMADDR            PASS ADDRESS TO FXMEMVER
         LA    R1,MEMREQ             DSNMEM PARMS
         L     R15,VMEMVER           MEMBER NAME VERIFIER ENTRY POINT
         BALR  R14,R15               LINK TO MEMBER NAME VERIFIER
         CLI   MEMSTAT,$DSNOK        MEMBER NAME VALID?
         BNE   USER0130              NO
         CLI   PARMALAS,C'Y'         SEND ALIASES?
         BE    USER0140              YES.. NOT VALID WITH NEW NAME
USER0010 DS    0H
         CLC   PARMDDSN,BLANKS       DESTINATION NAME BLANK?
         BE    USER0020              YES
         LA    R1,PARMDDSN           DATA SET NAME'S ADDRESS
         ST    R1,DSNADDR            PASS ADDRESS TO FXDSNVER
         LA    R1,DSNREQ             DSNVER PARMS
         L     R15,VDSNVER           DATA SET NAME VERIFIER ENTRY POINT
         BALR  R14,R15               LINK TO DSN VERIFIER
         CLI   DSNSTAT,$DSNOK        DATA SET NAME VALID?
         BNE   USER0150              NO
USER0020 DS    0H
         CLI   PARMREPL,C'N'         DON'T REPLACE?
         BE    USER0030              YES.. OK
         CLI   PARMREPL,C'Y'         DO REPLACE?
         BE    USER0030              YES.. OK
         CLI   PARMREPL,C' '         BLANK (DON'T REPLACE)?
         BNE   USER0160              NO.. NOT VALID
USER0030 DS    0H
         CLI   PARMALAS,C'N'         DON'T SEND ALIASES?
         BE    USER0050              YES.. OK
         CLI   PARMALAS,C'Y'         DO SEND ALIASES?
         BE    USER0040              YES.. OK IF MEMBER NAME PRESENT
         CLI   PARMALAS,C' '         BLANK (DON'T SEND ALIASES)?
         BNE   USER0170              NO.. NOT VALID
         B     USER0050
USER0040 DS    0H
         CLC   PARMOMEM,BLANKS       MEMBER NAME PRESENT?
         BE    USER0190              NO.. NOT VALID
USER0050 DS    0H
         CLC   PARMDMEM,BLANKS       NEW MEMBER NAME BLANK?
         BE    USER0060              YES
         CLC   PARMOMEM,BLANKS       ORIGINAL MEMBER NAME BLANK?
         BE    USER0200              YES.. NOT VALID
USER0060 DS    0H
         SR    R1,R1                 CLEAR FOR COUNTER
         LA    R14,PARMNDNM          FIRST DESTINATION
         USING PARMNDNM,R14          DEFINE BASE
         LR    R2,R14                SAVE FIRST NODE NAME'S ADDRESS
         SR    R15,R15               CLEAR REGISTER
         ICM   R15,3,PARMNDE#        NUMBER OF NODES
USER0070 DS    0H
         CLC   PARMNDNM,BLANKS       NODE NAME BLANK?
         BE    USER0090              YES
         CLR   R2,R14                SAME ADDRESS?
         BE    USER0080              YES
         MVC   0(L'PARMNDNM,R2),PARMNDNM
         MVC   PARMNDNM,BLANKS       CLEAR NAME
USER0080 DS    0H
         LA    R1,1(R1)              ADD 1 TO NUMBER OF NODES
         LA    R2,PARMNDL(R2)        NEXT OUTPUT NODE NAME
USER0090 DS    0H
         LA    R14,PARMNDL(R14)      NEXT INPUT NODE NAME
         BCT   R15,USER0070          LOOP
         LTR   R1,R1                 ANY NODES?
         BZ    USER0180              NO
         STCM  R1,3,PARMNDE#         SET NUMBER OF NODES IN REQUEST
         B     USER0300              BUILD REQUEST AND SUBMIT IT
         DROP  R14
USER0100 DS    0H
         MVC   PARMMSG(MSG03L),MSG03 SET MESSAGE
         MVC   PARMRC,H8             SET RETURN CODE
         B     EXIT0000              AND EXIT
USER0110 DS    0H
         MVC   PARMMSG(MSG04L),MSG04     SET MESSAGE
         MVC   PARMRC,H8             SET RETURN CODE
         B     EXIT0000              AND EXIT
USER0120 DS    0H
         MVC   PARMMSG(MSG05L),MSG05 SET MESSAGE
         MVC   PARMRC,H8             SET RETURN CODE
         B     EXIT0000              AND EXIT
USER0130 DS    0H
         MVC   PARMMSG(MSG06L),MSG06 SET MESSAGE
         MVC   PARMRC,H8             SET RETURN CODE
         B     EXIT0000              AND EXIT
USER0140 DS    0H
         MVC   PARMMSG(MSG07L),MSG07 SET MESSAGE
         MVC   PARMRC,H8             SET RETURN CODE
         B     EXIT0000              AND EXIT
USER0150 DS    0H
         MVC   PARMMSG(MSG08L),MSG08 SET MESSAGE
         MVC   PARMRC,H8             SET RETURN CODE
         B     EXIT0000              AND EXIT
USER0160 DS    0H
         MVC   PARMMSG(MSG09L),MSG09 SET MESSAGE
         MVC   PARMRC,H8             SET RETURN CODE
         B     EXIT0000              AND EXIT
USER0170 DS    0H
         MVC   PARMMSG(MSG10L),MSG10 SET MESSAGE
         MVC   PARMRC,H8             SET RETURN CODE
         B     EXIT0000              AND EXIT
USER0180 DS    0H
         MVC   PARMMSG(MSG11L),MSG11 SET MESSAGE
         MVC   PARMRC,H8             SET RETURN CODE
         B     EXIT0000              AND EXIT
USER0190 DS    0H
         MVC   PARMMSG(MSG12L),MSG12 SET MESSAGE
         MVC   PARMRC,H8             SET RETURN CODE
         B     EXIT0000              AND EXIT
USER0200 DS    0H
         MVC   PARMMSG(MSG13L),MSG13 SET MESSAGE
         MVC   PARMRC,H8             SET RETURN CODE
         B     EXIT0000              AND EXIT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
USER0300 DS    0H
         MVC   WKACB(ACBL),ACBI      INITIALIZE ACB
         LA    R2,WKACB              COPY ACB ADDRESS
         USING IFGACB,R2             DEFINE BASE
         MVI   WKAPLL,8              SET APPLID'S LENGTH
         LA    R0,WKAPLL             APPLID'S LENGTH ADDRESS
         ST    R0,ACBAPID            SET APPLID ADDRESS IN ACB
         MVC   WKEXLST(EXLSTL),EXLSTI INITIALIZE EXIT LIST
         LA    R1,WKEXLST            EXIT LIST'S ADDRESS
         ST    R1,ACBEXLST           SET EXLST'S ADDRESS
         USING IFGEXLST,R1           DEFINE BASE
         XC    EXLATTNP,EXLATTNP     NO ATTN EXIT
         MVC   WKRPL(RPLL),RPLI      INITIALIZE RPL
         LA    R3,WKRPL              RPL'S ADDRESS
         USING IFGRPL,R3             DEFINE BASE
         MVC   WKRPLEXT(RPLEXTL),RPLEXTI INITIALIZE RPL EXTENSION
         LA    R5,WKRPLEXT           RPL EXTENSION'S ADDRESS
         ST    R5,RPLAAREA           SET RPL EXTENSION'S ADDRESS
         ST    R2,RPLDACB            SET ACB'S ADDRESS
         MVC   WKNIB(NIBL),NIBI      INITIALIZE NIB
         LA    R4,WKNIB              COPY NIB'S ADDRESS
         USING ISTDNIB,R4            DEFINE BASE
         MVC   NIBSYM,PARMFX         SET FX STC'S APPL NAME
         MVC   WKOC(OPENL),OPENI     COPY OPEN/CLOSE PARM LIST
         MVC   WKFUNC,OPENACB        LAST FUNCTION IS OPEN
         LOAD  EP=FXACB              LOAD ACB NAMES TABLE
         LR    R8,R0                 COPY ACB NAMES TABLE ADDRESS
USER0310 DS    0H
         MVC   WKAPLN,0(R8)          COPY ACB NAME
         OPEN  ((R2)),MF=(E,WKOC)    OPEN ACB
         LTR   R15,R15               OPEN SUCCESSFUL?
         BZ    USER0320              YES
         LA    R8,8(R8)              NEXT ACB NAME
         CLI   0(R8),X'FF'           END OF TABLE?
         BNE   USER0310              NO
         DELETE EP=FXACB
         MVC   PARMMSG(MSG14L),MSG14 COPY MESSAGE
         MVC   PARMRC,H32            SET RETURN CODE
         B     EXIT0000              EXIT
USER0320 DS    0H
         DELETE EP=FXACB
         OI    WKFLAG,$ACBOPEN       ACB IS OPEN
         MVC   WKFUNC,SETLOGON       LAST FUNCTION
         SETLOGON ACB=(R2),          ISSUE SETLOGON                    +
               RPL=(R3),             .. RPL FOR REQUEST                +
               OPTCD=START           .. ENABLE EXIT
         LTR   R15,R15               SET LOGON SUCCESSFUL?
         BZ    USER0330              YES
         STH   R15,WKDWORD           SAVE RETURN CODE
         MVC   PARMMSG(MSG15L),MSG15 COPY MESSAGE
         UNPK  PARMMSG+(MSG15RC-MSG15)(5),WKDWORD(3)
         MVZ   PARMMSG+(MSG15RC-MSG15),HEX0F0F
         TR    PARMMSG+(MSG15RC-MSG15),HEXCHAR
         MVI   PARMMSG+(MSG15RC-MSG15)+4,C' '
         MVC   PARMRC,H32            SET RETURN CODE
         B     USER0900              CLOSE ACB AND EXIT
USER0330 DS    0H
         MVC   WKFUNC,INQUIRE        SET LAST COMMAND
         INQUIRE RPL=(R3),           ISSUE INQUIRE                     +
               NIB=(R4),             .. NIB'S ADDRESS                  +
               OPTCD=APPSTAT         .. WE WANT PARTNER'S STATUS
         CLC   X144C,RPLFDBK         PARTNER DEFINED TO VTAM?
         BE    USER0340              NO
         CLC   X1453,RPLFDBK         PARTNER NAME INVALID?
         BE    USER0340              YES
         CLI   RPLFDB3,0             PARTNER READY?
         BE    USER0360              YES
         MVC   PARMRC,H100           SET RETURN CODE
         B     USER0350
USER0340 DS    0H
         MVC   PARMRC,H32            SET RETURN CODE
USER0350 DS    0H
         MVC   PARMMSG(MSG16L),MSG16 SET MESSAGE
         B     USER0900              CLOSE ACB AND EXIT
USER0360 DS    0H
         MVC   WKFUNC,CNOS           LAST FUNCTION ATTEMPTED
         USING ISTRPL6X,R5           DEFINE BASE
         MVC   RPL6LU,PARMFX         SET PARTNER'S LU NAME
         APPCCMD CONTROL=OPRCNTL,    ISSUE APPC COMMAND                +
               QUALIFY=CNOS,         .. CHANGE NUMBER OF SESSIONS      +
               RPL=(R3),             .. RPL'S ADDRESS                  +
               LOGMODE=LU62P         .. LOGMODE
         CLC   RPL6RC,X000001        CNOS ACCEPTED?
         BE    USER0370              YES
         MVC   PARMMSG(MSG17L),MSG17 COPY MESSAGE
         UNPK  PARMMSG+(MSG17RC-MSG17)(9),WKDWORD(5)
         MVZ   PARMMSG+(MSG17RC-MSG17),HEX0F0F
         TR    PARMMSG+(MSG17RC-MSG17),HEXCHAR
         MVI   PARMMSG+(MSG17RC-MSG17)+8,C' '
         MVC   PARMRC,H32            SET RETURN CODE
         B     USER0900              CLOSE ACB AND EXIT
USER0370 DS    0H
         LA    R6,WKIO               I/O AREA ADDRESS
         USING USERREQ,R6            DEFINE BASE
         MVC   WKFUNC,ALLOCATE       LAST FUNCTION
         MVC   0(FMH5L,R6),FMH5      COPY FMH5 TO I/O AREA
         APPCCMD CONTROL=ALLOC,      ISSUE APPC COMMAND                +
               QUALIFY=ALLOCD,       .. ALLOCATE A SESSION             +
               RPL=(R3),             .. RPL'S ADDRESS                  +
               AREA=(R6),            .. FMH'S ADDRESS                  +
               RECLEN=FMH5L,         .. FMH'S LENGTH                   +
               LOGMODE=LU62P         .. LOGMODE
         OC    RPL6RC,RPL6RC         ALL ZEROS?
         BZ    USER0380              YES
         MVC   PARMMSG(MSG18L),MSG18 COPY MESSAGE
         UNPK  PARMMSG+(MSG18RC-MSG18)(9),WKDWORD(5)
         MVZ   PARMMSG+(MSG18RC-MSG18),HEX0F0F
         TR    PARMMSG+(MSG18RC-MSG18),HEXCHAR
         MVI   PARMMSG+(MSG18RC-MSG18)+8,C' '
         MVC   PARMRC,H32            SET RETURN CODE
         B     USER0900              CLOSE ACB AND EXIT
USER0380 DS    0H
         OI    WKFLAG,$SESSALO       SESSION IS ALLOCATED
         MVC   WKCID,RPL6CNVD        SAVE CONVERSATION ID
         LA    R7,USERIDL            DATA LENGTH FOR 'IDENITIFY'
         STCM  R7,3,USERLEN          SET LENGTH
         L     R1,CVTPTR             CVT'S ADDRESS
         USING CVT,R1                DEFINE BASE
         ICM   R15,15,CVTSMCA        SMF AREA ADDRESS
         BZ    ERR0040               SMF NOT ACTIVE!
         USING SMCABASE,R15          DEFINE BASE
         MVC   USERSMF,SMCASID       COPY SMF ID
         USING PSA,R0                DEFINE BASE
         L     R1,PSAAOLD            OUR ASCB'S ADDRESS
         USING ASCB,R1               DEFINE BASE
         L     R2,ASCBJBNI           JOB NAME ADDRESS
         L     R1,ASCBASXB           OUR ASXB'S ADDRESS
         USING ASXB,R1               DEFINE BASE
         ICM   R1,15,ASXBSENV        ACEE'S ADDRESS
         USING ACEE,R1               DEFINE BASE
         BNZ   USER0390              NAME PRESENT
         MVC   PARMMSG(MSG19L),MSG19 COPY MESSAGE
         MVC   PARMRC,H32            SET RETURN CODE
         B     USER0900              CLOSE ACB AND EXIT
USER0390 DS    0H
         MVC   USERID,BLANKS         INITIALIZE ID
         SR    R15,R15               CLEAR REGISTER
         IC    R15,ACEEUSRL          USER ID LENGTH
         BCTR  R15,0                 MINUS 1
         EX    R15,USERMVC           MOVE USER ID
         MVC   WKUSERID,USERID       COPY USER ID
         MVC   USERJOB,0(R2)         COPY JOB NAME
         MVC   USERMOD,UID           SET PROCESSING MODULE'S SUFFIX
         MVC   WKFUNC,SEND           LAST COMMAND
         APPCCMD CONTROL=SEND,       ISSUE APPC COMMAND                +
               QUALIFY=DATA,         .. SEND DATA                      +
               RPL=(R3),             .. RPL'S ADDRESS                  +
               AREA=(R6),            .. I/O AREA'S ADDRESS             +
               RECLEN=(R7),          .. I/O LENGTH                     +
               CONVID=WKCID          .. CONVERSATION ID
         OC    RPL6RC,RPL6RC         SUCCESSFUL?
         BNZ   ERR0010               NO
         MVC   WKFUNC,RECEIVE        LAST COMMAND ATTEMPTED
         LA    R7,WKIOL              I/O AREA SIZE
         APPCCMD CONTROL=RECEIVE,    ISSUE APPC COMMAND                +
               QUALIFY=SPEC,         .. SPECIFIC CONVERSATION          +
               RPL=(R3),             .. RPL'S ADDRESS                  +
               FILL=LL,              .. ONLY 1 LOGICAL RECORD          +
               AREA=(R6),            .. I/O AREA                       +
               AREALEN=(R7),         .. I/O AREA SIZE                  +
               CONMODE=CS,           .. CONTINUE SPECIFIC              +
               CONVID=WKCID          .. CONVERSATION ID
         OC    RPL6RC,RPL6RC         ALL ZEROS?
         BNZ   ERR0020               NO
         CLI   USERAUTH,0            IS USER AUTHORIZED TO USE FX?
         BH    USER0400              YES
         MVC   PARMMSG(MSG20L),MSG20 COPY MESSAGE
         MVC   PARMRC,H32            SET RETURN CODE
         B     USER0900              CLOSE ACB AND EXIT
USERMVC  MVC   USERID(0),ACEEUSRI    COPY USER'S TSO ID
USER0400 DS    0H
         MVC   WKAUTH,USERAUTH       SAVE AUTH LEVEL
         CLI   PARMCMD,$INQUIRE      STATUS INQUIRY?
         BE    USER0600              YES
* ------------------------------------------------------------------- *
*                                                                     *
*  Request entry.                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
USER0500 DS    0H
         MINIT BLANKS,P0,0,R14       INITIALIZE REQUEST BLOCK AREA
         LA    R7,WKIOL              I/O AREA SIZE
         STH   R7,USERLEN            SET LENGTH
         MVC   USERMOD,REQE          SET PROCESSING MODULE NAME
         MVC   REQENODE,PARMFX       SET NODE WHERE REQUEST WAS ENTERED
         MVC   REQTNODE,PARMFX       ASSUME SAME NODE WILL TRANSMIT
         CLC   PARMXFX,BLANKS        DIFFERENT TRANSMIT NODE?
         BE    USER0510              NO
         MVC   REQTNODE,PARMXFX      SET TRANSMIT NODE
USER0510 DS    0H
         MVC   REQODSNM,PARMODSN     SET ORIGINAL DATASET NAME
         MVC   REQOMEM,PARMOMEM      SET ORIGINAL MEMBER NAME
         MVC   REQDDSNM,PARMDDSN     SET DESTINATION DATASET NAME
         MVC   REQDMEM,PARMDMEM      SET DESTINATION MEMBER NAME
         MVC   REQREPL,PARMREPL      SET REPLACE INDICATOR
         MVC   REQALIAS,PARMALAS     SET ALIAS INDICATOR
         LA    R2,REQNDENM           FIRST DESTINATION NAME
         USING REQNDENM,R2           DEFINE BASE
         LA    R14,PARMNDNM          FIRST DESTINATION
         USING PARMNDNM,R14          DEFINE BASE
         SR    R15,R15               CLEAR REGISTER
         ICM   R15,3,PARMNDE#        NUMBER OF NODES
USER0520 DS    0H
         MVC   REQNDENM,PARMNDNM     COPY NODE NAME
         LA    R2,REQNDEL(R2)        NEXT NODE
         LA    R14,PARMNDL(R14)      NEXT NODE
         BCT   R15,USER0520          LOOP
         DROP  R2,R14
         MVC   REQNDE#,PARMNDE#      SET NUMBER OF NODES
         BAL   R9,USER0800           DO SEND/RECEIVE
         MVC   PARMRC+1(1),USERRC    COPY RETURN CODE
         MVC   PARMMSG(L'USERMSG),USERMSG
         B     USER0900              TIME TO GET OUT OF DODGE
* ------------------------------------------------------------------- *
*     Request inquiry.                                                *
* ------------------------------------------------------------------- *
USER0600 DS    0H
         MVI   USERCMD,$USERSTA      SET COMMAND TO 'STATUS INQUIRY'
         MVC   USERMOD,REQI          SET PROCESSING MODULE NAME
         XC    USERREC#,USERREC#     START AT BEGINNING OF MASTER FILE
         MVC   USERIDI,WKUSERID      ASSUME USER'S OWN USER ID
         CLI   WKAUTH,1              'NORMAL' LEVEL USER?
         BE    USER0610              YES
         MVC   USERIDI,PARMUSER      USE USERID PROVIDED BY CALLER
USER0610 DS    0H
         MVC   USERENDE,PARMENDE     SET ENTRY NODE
         MVC   USERNBR,PARMNBR       SET REQUEST NUMBER
         BAL   R9,USER0800           DO SEND/RECEIVE
         CLI   USERRC,0              RECORD FOUND?
         BNE   USER0700              NO
         CLI   REQSTAT,$REQINIT      END OF FILE REACHED?
         BE    USER0700              YES.. RECORD NOT FOUND
         MVI   USERRC,0              SET RETURN CODE
         MVC   PARMENDE,REQENODE     ENTRY NODE
         MVC   PARMXFX,REQTNODE      TRANSMIT NODE
         MVC   PARMODSN,REQODSNM     ORIGINAL DATA SET NAME
         MVC   PARMOMEM,REQOMEM      ORIGINAL MEMBER NAME
         MVC   PARMDDSN,REQDDSNM     DESTINATION DATA SET NAME
         MVC   PARMDMEM,REQDMEM      DESTINATION MEMBER NAME
         MVC   PARMREPL,REQREPL      REPLACE FLAG
         MVC   PARMALAS,REQALIAS     ALIAS FLAG
         LA    R1,STATMSG1           FIRST STATUS MESSAGE
         USING STAT,R1               DEFINE BASE
USER0620 DS    0H
         CLI   0(R1),X'FF'           END OF TABLE?
         BE    USER0630              YES
         CLC   REQSTAT,STATST        CORRECT ENTRY?
         BE    USER0630              YES
         LA    R1,STATL(R1)          NEXT STATUS
         B     USER0620
USER0630 DS    0H
         MVC   PARMSTAT,STATMSG      RETURN REQUEST'S STATUS
         LA    R14,PARMNDNM          FIRST USER'S NODE NAME
         USING PARMNDNM,R14          DEFINE BASE
         SR    R15,R15               CLEAR REGISTER
         ICM   R15,3,PARMNDE#        NUMBER OF NODES IN USER AREA
USER0640 DS    0H
         MVC   PARMNDST,BLANKS       CLEAR STATUS TO BLANKS
         ZAP   PARMNDTD,P0           INITIALIZE TRANSMIT DATE
         XC    PARMNDTT,PARMNDTT     INITIALIZE TRANSMIT TIME
         ZAP   PARMNDRD,P0           INITIALIZE RESTORE NOTIFY DATE
         XC    PARMNDRT,PARMNDRT     INITIALIZE RESTORE NOTIFY TIME
         LA    R14,PARMNDL(R14)      NEXT NODE
         BCT   R15,USER0640          LOOP
         DROP  R14
         SR    R15,R15               CLEAR REGISTER
         ICM   R15,3,REQNDE#         NUMBER IN QUERIED REQEUST
         CLM   R15,3,PARMNDE#        MORE THAN USER ALLOWED FOR?
         BNH   USER0650              NO
         ICM   R15,3,PARMNDE#        LIMIT TO NUMBER USER ALLOWS
         MVC   PARMRC,H4             SET RETURN CODE TO 4
USER0650 DS    0H
         STCM  R15,3,PARMNDE#        NUMBER OF NODES RETURNED
         LA    R2,REQNDENM           FIRST NODE NAME
         USING REQNDENM,R2           DEFINE BASE
         LA    R14,PARMNDNM          FIRST USER'S NODE NAME
         USING PARMNDNM,R14          DEFINE BASE
         LTR   R15,R15               ANY DESTINATIONS?
         BZ    USER0690              NO DESTINATIONS
USER0660 DS    0H
         MVC   PARMNDNM,REQNDENM     COPY NODE NAME
         LA    R1,STATMSG2           FIRST STATUS MESSAGE
         USING STAT,R1               DEFINE BASE
USER0670 DS    0H
         CLI   STATST,X'FF'          END OF TABLE?
         BE    USER0680              YES
         CLC   STATST,REQNDEST       CORRECT STATUS?
         BE    USER0680              YES
         LA    R1,STATL(R1)          NEXT STATUS
         B     USER0670              LOOP
USER0680 DS    0H
         MVC   PARMNDST,STATMSG      COPY STATUS
         MVC   WKDATE,DATEEDWD       INITIALIZE WITH EDIT WORD
         ED    WKDATE,REQNDETD       EDIT TRANSMIT DATE
         MVC   PARMNDTD,WKDATE+1     COPY EDITED TRANSMIT DATE
         MVC   WKTIME,TIMEEDWD       INITIALIZE WITH EDIT WORD
         ED    WKTIME,REQNDETT       EDIT TRANSMIT TIME
         MVC   PARMNDTT,WKTIME+1     COPY EDITED TRANSMIT TIME
         MVC   WKDATE,DATEEDWD       INITIALIZE WITH EDIT WORD
         ED    WKDATE,REQNDERD       EDIT RESTORE NOTIFY DATE
         MVC   PARMNDRD,WKDATE+1     COPY EDITED RESTORE NOTIFY DATE
         MVC   WKTIME,TIMEEDWD       INITIALIZE WITH EDIT WORD
         ED    WKTIME,REQNDERT       EDIT RESTORE NOTIFY TIME
         MVC   PARMNDRT,WKTIME+1     COPY EDITED RESTORE NOTIFY TIME
         LA    R2,REQNDEL(R2)        NEXT NODE
         LA    R14,PARMNDL(R14)      NEXT NODE
         BCT   R15,USER0660          LOOP
         DROP  R2,R14
USER0690 DS    0H
         MVC   PARMMSG(MSG21L),MSG21 STATUS REQUEST COMPLETE
         B     USER0900              CLEAN-UP AND EXIT
USER0700 DS    0H
         MVC   PARMRC+1(1),USERRC    SET RETURN CODE
         MVC   PARMMSG(MSG22L),MSG22 RECORD NOT FOUND
         B     USER0900              CLEAN-UP AND EXIT
* ------------------------------------------------------------------- *
*     Send/Receive                                                    *
* ------------------------------------------------------------------- *
USER0800 DS    0H
         LA    R7,WKIOL              LENGTH
         STH   R7,USERLEN            SET LENGTH
         APPCCMD CONTROL=SEND,       ISSUE SEND                        +
               QUALIFY=DATA,         .. SEND DATA                      +
               RPL=(R3),             .. RPL'S ADDRESS                  +
               AREA=(R6),            .. I/O AREA ADDRESS               +
               RECLEN=(R7),          .. I/O LENGTH                     +
               CONMODE=CS,           .. CONTINUE SPECIFIC              +
               CONVID=WKCID          .. CONVERSATION ID
         OC    RPL6RC,RPL6RC         SEND OK?
         BNZ   ERR0010               NO
         LA    R7,WKIOL              I/O AREA SIZE
         APPCCMD CONTROL=RECEIVE,    ISSUE RECEIVE                     +
               QUALIFY=SPEC,         .. FOR A SPECIFIC SESSION         +
               RPL=(R3),             .. RPL'S ADDRESS                  +
               FILL=LL,              .. ONLY 1 LOGICAL RECORD          +
               AREA=(R6),            .. I/O AREA ADDRESS               +
               AREALEN=(R7),         .. I/O AREA SIZE                  +
               CONVID=WKCID          .. CONVERSATION ID
         OC    RPL6RC,RPL6RC         RECEIVE OK?
         BNZ   ERR0020               NO
         BR    R9                    RETURN
* ------------------------------------------------------------------- *
*  VTAM clean-up.                                                     *
* ------------------------------------------------------------------- *
USER0900 DS    0H
         TM    WKFLAG,$SESSALO       CONVERSATION ALLOCATED?
         BNO   USER0910              NO
         APPCCMD CONTROL=DEALLOC,    DE-ALLOCATE A SESSION             +
               QUALIFY=FLUSH,        .. FLUSH BUFFERS                  +
               RPL=(R3),             .. RPL'S ADDRESS                  +
               CONVID=WKCID          .. CONVERSATION ID
         OC    RPL6RC,RPL6RC         DE-ALLOCATE SUCCESSFUL?
         BNZ   ERR0030               NO
USER0910 DS    0H
         TM    WKFLAG,$ACBOPEN       ACB OPENED?
         BNO   USER0920              NO
         MVC   WKOC(CLOSEL),CLOSEI   INITIALIZE CLOSE PARM LIST
         LA    R2,WKACB              ACB'S ADDRESS
         CLOSE ((R2)),MF=(E,WKOC)    CLOSE THE ACB
USER0920 DS    0H
         B     EXIT0000              AND EXIT
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         MVC   PARMMSG(MSG23L),MSG23
         UNPK  PARMMSG+(MSG23RC-MSG23)(9),RPL6RC   UNPACK RC
         MVZ   PARMMSG+(MSG23RC-MSG23)(8),HEX0F0F CLEAR ZONES
         TR    PARMMSG+(MSG23RC-MSG23)(8),HEXCHAR TRANSLATE
         MVI   PARMMSG+(MSG23RC-MSG23)+8,C' '
         MVC   PARMRC,H32            SET RETURN CODE
         B     USER0900              CLOSE ACB AND EXIT
ERR0020  DS    0H
         MVC   PARMMSG(MSG24L),MSG24
         UNPK  PARMMSG+(MSG24RC-MSG24)(9),RPL6RC   UNPACK RC
         MVZ   PARMMSG+(MSG24RC-MSG24)(8),HEX0F0F CLEAR ZONES
         TR    PARMMSG+(MSG24RC-MSG24)(8),HEXCHAR TRANSLATE
         MVI   PARMMSG+(MSG24RC-MSG24)+8,C' '
         MVC   PARMRC,H32            SET RETURN CODE
         B     USER0900              CLOSE ACB AND EXIT
ERR0030  DS    0H
         MVC   PARMMSG(MSG25L),MSG25
         UNPK  PARMMSG+(MSG25RC-MSG25)(9),RPL6RC   UNPACK RC
         MVZ   PARMMSG+(MSG25RC-MSG25)(8),HEX0F0F CLEAR ZONES
         TR    PARMMSG+(MSG25RC-MSG25)(8),HEXCHAR TRANSLATE
         MVI   PARMMSG+(MSG25RC-MSG25)+8,C' '
         B     USER0910              CLOSE ACB AND EXIT
ERR0040  DS    0H
         ABEND $U0116,DUMP,,USER
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         LR    R1,R13                COPY SAVE AREA ADDRESS
         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS
         FREEMAIN RU,A=(R1),LV=WKL   FREEMAIN WORK AREA
         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS
         SR    R15,R15               SET RETURN CODE
         BR    R14                   RETURN
ATTN0000 DS    0H
         ABEND $U0106,DUMP,,USER
* ------------------------------------------------------------------- *
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
VDSNVER  DC    V(FXDSNVER)           DSN FORMAT VERIFIER
VMEMVER  DC    V(FXMEMVER)           MEMBER NAME VERIFIER
H4       DC    H'4'
H8       DC    H'8'
H32      DC    H'32'
H100     DC    H'100'
P0       DC    P'0'
X000001  DC    X'00000001'
X144C    DC    X'144C'
HEX0F0F  DC    8X'0F'
HEXCHAR  DC    C'0123456789ABCDEF'
DATEEDWD DC    X'F0212020204B202020'
TIMEEDWD DC    X'F021207A20207A2020'
BLANKS   DC    CL44' '
REQE     DC    CL4'REQE'
REQI     DC    CL4'REQI'
OPENACB  DC    CL8'OPENACB'
SETLOGON DC    CL8'SETLOGON'
INQUIRE  DC    CL8'INQUIRE'
CNOS     DC    CL8'CNOS'
ALLOCATE DC    CL8'ALLOCATE'
SEND     DC    CL8'SEND'
RECEIVE  DC    CL8'RECEIVE'
UID      DC    CL4'UID'
OPENI    OPEN  (*,INPUT),MF=L        OPEN PARM LIST
OPENL    EQU   *-OPENI
CLOSEI   CLOSE (*),MF=L
CLOSEL   EQU   *-CLOSEI
ACBI     ACB   AM=VTAM,              GENERATE VTAM ACB                 +
               MACRF=LOGON,                                            +
               EXLST=*,                                                +
               APPLID=*
ACBL     EQU   *-ACBI
EXLSTI   EXLST AM=VTAM,              GENERATE VTAM EXIT LIST           +
               ATTN=ATTN0000,                                          +
               LERAD=LERAD000
EXLSTL   EQU   *-EXLSTI
NIBI     NIB   MODE=RECORD,          GENERATE VTAM NIB                 +
               NAME=FX
NIBL     EQU   *-NIBI
RPLI     RPL   AM=VTAM,              GENERATE VTAM RPL                 +
               AAREA=RPLEXTI
RPLL     EQU   *-RPLI
RPLEXTI  ISTRPL6
RPLEXTL  EQU   *-RPLEXTI
         FMH5  DSECT=NO,TRAN=USER    GENERATE FMH5
MSG01    DC    CL11'FXUSER01E'
         DC    C'INVALID COMMAND'
MSG01L   EQU   *-MSG01
MSG02    DC    CL11'FXUSER02E'
         DC    C'NUMBER OF NODES IN USER AREA IS ZERO'
MSG02L   EQU   *-MSG02
MSG03    DC    CL11'FXUSER03E'
         DC    C'DATA SET NAME IS BLANK'
MSG03L   EQU   *-MSG03
MSG04    DC    CL11'FXUSER04E'
         DC    C'DATA SET NAME IS INVALID'
MSG04L   EQU   *-MSG04
MSG05    DC    CL11'FXUSER05E'
         DC    C'MEMBER NAME IS INVALID'
MSG05L   EQU   *-MSG05
MSG06    DC    CL11'FXUSER06E'
         DC    C'NEW MEMBER NAME IS INVALID'
MSG06L   EQU   *-MSG06
MSG07    DC    CL11'FXUSER07E'
         DC    C'ALIAS=Y NOT VALID WITH NEW MEMBER NAME'
MSG07L   EQU   *-MSG07
MSG08    DC    CL11'FXUSER08E'
         DC    C'NEW DATA SET NAME IS INVALID'
MSG08L   EQU   *-MSG08
MSG09    DC    CL11'FXUSER09E'
         DC    C'REPLACE FLAG IS INVALID'
MSG09L   EQU   *-MSG09
MSG10    DC    CL11'FXUSER10E'
         DC    C'ALIAS FLAG IS INVALID'
MSG10L   EQU   *-MSG10
MSG11    DC    CL11'FXUSER11E'
         DC    C'AT LEAST 1 DESTINATION IS REQUIRED'
MSG11L   EQU   *-MSG11
MSG12    DC    CL11'FXUSER12E'
         DC    C'ALIAS NOT VALID WITHOUT A MEMBER NAME'
MSG12L   EQU   *-MSG12
MSG13    DC    CL11'FXUSER13E'
         DC    C'NEW MEMBER NAME NOT VALID WITHOUT ORIGINAL MEMBER NAME+
               '
MSG13L   EQU   *-MSG13
MSG14    DC    CL11'FXUSER14E'
         DC    C'ALL USER INTERFACE APPLID''S ARE BUSY, TRY LATER'
MSG14L   EQU   *-MSG14
MSG15    DC    CL11'FXUSER15E'
         DC    C'SETLOGON FAILED, RC='
MSG15RC  DC    CL4' '
         DC    C' '
MSG15L   EQU   *-MSG15
MSG16    DC    CL11'FXUSER16E'
         DC    C'FX STC IS NOT ACTIVE'
MSG16L   EQU   *-MSG16
MSG17    DC    CL11'FXUSER17E'
         DC    C'CNOS FAILED, RC='
MSG17RC  DC    CL8' '
         DC    C' '
MSG17L   EQU   *-MSG17
MSG18    DC    CL11'FXUSER18E'
         DC    C'ALLOCD FAILED, RC='
MSG18RC  DC    CL8' '
         DC    C' '
MSG18L   EQU   *-MSG18
MSG19    DC    CL11'FXUSER19E'
         DC    C'COULD NOT DETERMINE YOUR USER ID'
MSG19L   EQU   *-MSG19
MSG20    DC    CL11'FXUSER20E'
         DC    C'YOU ARE NOT AUTHORIZED TO USE FX'
MSG20L   EQU   *-MSG20
MSG21    DC    CL11'FXUSER21I   STATUS INQUIRY COMPLETE'
         DC    C'STATUS INQUIRY COMPLETE'
MSG21L   EQU   *-MSG21
MSG22    DC    CL11'FXUSER22E'
         DC    C'REQUEST NOT FOUND'
MSG22L   EQU   *-MSG22
MSG23    DC    CL11'FXUSER23E'
         DC    C'VTAM SEND FAILED, RPL6RC='
MSG23RC  DC    CL8' '
         DC    C' '
MSG23L   EQU   *-MSG23
MSG24    DC    CL11'FXUSER24E'
         DC    C'VTAM RECEIVE FAILED, RPL6RC='
MSG24RC  DC    CL8' '
         DC    C' '
MSG24L   EQU   *-MSG24
MSG25    DC    CL11'FXUSER25E'
         DC    C'CONVERSATION DEALLOCATE FAILED, RPL6RC='
MSG25RC  DC    CL8' '
         DC    C' '
MSG25L   EQU   *-MSG25
STATMSG1 DS    0C
         COPY  REQMSG
STATMSG2 DS    0C
         COPY  NODEMSG
         LTORG
LERAD000 DS    0H
         USING LERAD000,R15
         SH    R15,LERADDSP
         DROP  R15
         USING FXUSER,R15            RE-DEFINE BASE
         DROP  R3
         USING IFGRPL,R1
         CLC   X1453,RPLFDBK         UNKNOWN OR INVALID LU NAME IN NIB?
         BE    LERAD010              CORRECT
         ABEND $U0107,DUMP,,USER
LERAD010 DS    0H
         OI    WKFLAG,$BADLU         LU NAME IN NIB IS BAD
         BR    R14
LERADDSP DC    Y(LERAD000-FXUSER)
X1453    DC    X'1453'
* ------------------------------------------------------------------- *
*                                                                     *
*        WORK AREAS                                                   *
*                                                                     *
* ------------------------------------------------------------------- *
WK       DSECT
WKSAVE   DS    18F
WKDWORD  DS    D
WKFLAG   DS    X                     FLAGS/INDICATORS
$ACBOPEN EQU   X'80'                 .. ACB IS OPEN
$SESSALO EQU   X'40'                 .. SESSION IS ALLOCATED
$BADLU   EQU   X'20'                 .. LU NAME IN NIB IS INVALID
WKAPLL   DS    X                     OUR APPLID'S LENGTH
WKAPLN   DS    CL8                   OUR APPL NAME
WKFUNC   DS    CL8                   LAST FUNCTION ATTEMPTED
WKCID    DS    XL4                   CONVERSATION ID
WKDATE   DS    CL9
WKTIME   DS    CL9
WKOC     DS    0A,(OPENL)X           OPEN (AND CLOSE) PARM LIST
WKACB    DS    0A,(ACBL)X            ACB
WKEXLST  DS    0A,(EXLSTL)X          EXIT LIST
WKRPL    DS    0A,(RPLL)X            RPL
WKRPLEXT DS    0A,(RPLEXTL)X         RPL EXTENSION
WKNIB    DS    0A,(NIBL)X            NIB
WKUSERID DS    CL8
WKAUTH   DS    X
         DSNREQ DSECT=NO
         MEMREQ DSECT=NO
* ------------------------------------------------------------------- *
*              USER REQUEST/RESPONSE BLOCK                            *
* ------------------------------------------------------------------- *
WKIO     DS    0X
         USERREQ DSECT=NO,IOAREA=NO
* ------------------------------------------------------------------- *
*              USER IDENTIFICATION DATA (AND REPLY DATA)              *
* ------------------------------------------------------------------- *
USERSMF  DS    CL4
USERID   DS    CL8
USERJOB  DS    CL8
USERIDL  EQU   *-USERREQ
         ORG   USERDATA
USERAUTH DS    X
USERSYSN DS    CL20
* ------------------------------------------------------------------- *
*              REQUEST INQUIRY DATA                                   *
* ------------------------------------------------------------------- *
         ORG   USERDATA
USERCMD  DS    C               COMMAND FROM FXTREQI
$USERINQ EQU   C'I'            .. INQUIRE
$USERCAN EQU   C'C'            .. CANCEL REQUEST
$USERDEL EQU   C'D'            .. DELETE REQUEST
$USERPRT EQU   C'O'            .. RETURN DF/DSS OR IEBCOPY SYSPRINT
$USERSTA EQU   C'S'            .. RETURN STATUS OF SPECIFIC REQUEST
USERREC# DS    XL2             STARTING RECORD NUMBER
USERIDI  DS    CL8             USER ID (FOR SPECIFIC USER REQUESTS)
USERENDE DS    CL8             NODE NAME (FOR SPECIFIC REQUESTS)
USERNBR  DS    XL4             REQUEST NUMBER (FOR SPECIFIC REQUESTS)
USERRCSZ DS    XL2             LRECL OF DF/DSS OR IEBCOPY SYSPRINT
USERBLKZ DS    XL2             BLKSZ OF DF/DSS OR IEBCOPY SYSPRINT
USERRCFM DS    X               RECFM OF DF/DSS OR IEBCOPY SYSPRINT
USERPRT  DS    0C
* ------------------------------------------------------------------- *
*              REQUEST BLOCK                                          *
* ------------------------------------------------------------------- *
         ORG   USERDATA
         REQBLOK  DSECT=NO
WKIOL    EQU   *-WKIO
WKL      EQU   *-WK
* ------------------------------------------------------------------- *
*              PARM LIST                                              *
* ------------------------------------------------------------------- *
         USERPARM DSECT=YES
* ------------------------------------------------------------------- *
*              OVER-ALL STATUS                                        *
* ------------------------------------------------------------------- *
STAT     DSECT
STATST   DS    X
STATMSG  DS    CL25
STATL    EQU   *-STAT
* ------------------------------------------------------------------- *
*              ACB                                                    *
* ------------------------------------------------------------------- *
         IFGACB AM=VTAM
* ------------------------------------------------------------------- *
*              RPL                                                    *
* ------------------------------------------------------------------- *
         IFGRPL AM=VTAM
* ------------------------------------------------------------------- *
*              EXLST                                                  *
* ------------------------------------------------------------------- *
         IFGEXLST AM=VTAM
* ------------------------------------------------------------------- *
*              NIB                                                    *
* ------------------------------------------------------------------- *
         ISTDNIB
* ------------------------------------------------------------------- *
*              PSA                                                    *
* ------------------------------------------------------------------- *
         IHAPSA   DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*              CVT                                                    *
* ------------------------------------------------------------------- *
         CVT      DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*              SMF                                                    *
* ------------------------------------------------------------------- *
         IEESMCA
* ------------------------------------------------------------------- *
*              ASCB                                                   *
* ------------------------------------------------------------------- *
         IHAASCB  DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*              ASXB                                                   *
* ------------------------------------------------------------------- *
         IHAASXB  DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*              ACEE                                                   *
* ------------------------------------------------------------------- *
         IHAACEE
* ------------------------------------------------------------------- *
*              EQUATES                                                *
* ------------------------------------------------------------------- *
         COPY REGEQU
         ABCODES
         END  FXUSER
./ ADD NAME=FX24     0100-99056-99056-1500-00360-00360-00000-FX-REL1

* ------------------------------------------------------------------- *
*                                                                     *
*  Name: FX24                                                         *
*                                                                     *
*  This is a set of 24-bit macros.  The callers provide the           *
*  parameters needed for each function in a 24-bit area.  The         *
*  requested macro is issued, and the status returned to the caller.  *
*  This is to allow most of the code to remain in 31-bit storage.     *
*                                                                     *
*  Functions available are:                                           *
*    $OPEN      (open a DCB for input)                                *
*    $OPEN      (open a DCB for output)                               *
*    $CLOSE     (close a DCB)                                         *
*    $GETM      (QSAM GET, move mode)                                 *
*    $GETL      (QSAM GET, locate mode)                               *
*    $LOCATE    (Extract catalog data by data set name)               *
*    $POINT     (BSAM POINT)                                          *
*    $PUT       (QSAM PUT, move mode)                                 *
*    $READ      (BSAM READ)                                           *
*    $WRITE     (BSAM WRITE)                                          *
*    $CHECK     (I/O CHECK)                                           *
*    $CALL      (CALL a subroutine)                                   *
*    $CAMLSTA   (OBTAIN with read-by-address CAMLST)                  *
*    $CAMLSTN   (OBTAIN with read-by-DSN CAMLST)                      *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY  OPTIONS
FX24     CSECT
FX24     AMODE 24
FX24     RMODE 24
         USING FXCOMM,R11            DEFINE BASE
         USING FX24PRM,R1            DEFINE BASE
         STM   R0,R14,SAVE24A        SAVE CALLER'S REGISTERS
         LR    R12,R15               COPY BASE ADDRESS
         USING FX24,R12              DEFINE BASE
         LR    R9,R1                 COPY PARM BLOCK ADDRESS
         DROP  R1
         USING FX24PRM,R9            DEFINE BASE
         B     INIT0000              SKIP EYECATCHERS
         DC    ((PFXMODNM-MODPRFX)-(*-FX24))X'00'
         DC    CL8'FX24'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
INIT0000 DS    0H
         ITRACE ID=ENTRY,                                              +
               DATA1=CMD24
         LA    R13,SAVE24B           SET SAVE AREA ADDRESS
         CLI   CMD24,$CALL           CALL?
         BE    CALL0000              YES
         CLI   CMD24,$CAMLSTA        OBTAIN WITH READ-BY-ADDRESS CAMLST
         BE    CAMA0000              YES
         CLI   CMD24,$CAMLSTN        OBTAIN WITH READ-BY-DSN CAMLST
         BE    CAMN0000              YES
         CLI   CMD24,$CHECK          CHECK?
         BE    CHECK000              YES
         CLI   CMD24,$CLOSE          CLOSE?
         BE    CLOSE000              YES
         CLI   CMD24,$GETM           GET (MOVE MODE)?
         BE    GETM0000              YES
         CLI   CMD24,$GETL           GET (LOCATE MODE)?
         BE    GETL0000              YES
         CLI   CMD24,$LOCATE         ISSUE LOCATE?
         BE    LOCATE00              YES
         CLI   CMD24,$NOTE           ISSUE NOTE?
         BE    NOTE0000              YES
         CLI   CMD24,$OPENI          OPEN INPUT?
         BE    OPENI000              YES
         CLI   CMD24,$OPENO          OPEN OUTPUT?
         BE    OPENO000              YES
         CLI   CMD24,$POINT          POINT?
         BE    POINT000              YES
         CLI   CMD24,$PUT            PUT?
         BE    PUT0000               YES
         CLI   CMD24,$READ           BSAM READ?
         BE    READ0000              YES
         CLI   CMD24,$WRITE          BSAM WRITE?
         BE    WRITE000              YES
         ABEND $U0061,DUMP,,USER     INVALID COMMAND
CALL0000 DS    0H
         ITRACE ID=CALL,             CALLING 24-BIT PROGRAM            +
               DATA1=EP24,           .. CALLED MODULE ENTRY POINT      +
               DATA2=PARM24          .. PARAMETER LIST ADDRESS
         L     R1,PARM24             PARAMETER LIST ADDRESS
         L     R15,EP24              ROUTINE ENTRY POINT
         BASSM R14,R15               LINK TO ROUTINE
         BAL   R10,AM31              FORCE 31-BIT MODE
         B     EXIT0000              AND EXIT
CAMA0000 DS    0H
         ITRACE ID=CAMLSTA,          ISSING OBTAIN BY DISK ADDRESS     +
               DATA1=CCHHR24,        .. DISK ADDRESS                   +
               DATA2=VOL24           .. VOLSER
         MVC   CAMLST24(CAMLSTAL),CAMLSTA
         LA    R0,CCHHR24            CYLINDER/HEAD/RECORD'S ADDRESS
         ST    R0,CAMLST24+4         SET ADDRESS IN PARM LIST
         LA    R0,VOL24              VOLSER'S ADDRESS
         ST    R0,CAMLST24+8         SET ADDRESS IN PARM LIST
         LA    R0,VTOC24             VTOC DATA ADDRESS
         ST    R0,CAMLST24+12        SET ADDRESS IN PARM LIST
         LA    R1,CAMLST24           OBTAIN PARM LIST
         BAL   R10,AM24              SWITCH TO 24-BIT MODE
         OBTAIN (1)                  ISSUE OBTAIN
         BAL   R10,AM31              SWITCH TO 31-BIT MODE
         B     EXIT0000              AND EXIT
CAMN0000 DS    0H
         ITRACE ID=CAMLSTN,          ISSUING OBTAIN BY DATASET NAME    +
               DATA1=DSN24,          .. DATASET'S NAME                 +
               DATA2=VOL24           .. VOLSER
         MVC   CAMLST24(CAMLSTNL),CAMLSTN
         LA    R0,DSN24              DATASET NAME'S ADDRESS
         ST    R0,CAMLST24+4         SET ADDRESS IN PARM LIST
         LA    R0,VOL24              VOLSER'S ADDRESS
         ST    R0,CAMLST24+8         SET ADDRESS IN PARM LIST
         LA    R0,VTOC24+44          VTOC DATA ADDRESS
         ST    R0,CAMLST24+12        SET ADDRESS IN PARM LIST
         LA    R1,CAMLST24           OBTAIN PARM LIST
         BAL   R10,AM24              SWITCH TO 24-BIT MODE
         OBTAIN (1)                  ISSUE OBTAIN
         BAL   R10,AM31              SWITCH TO 31-BIT MODE
         B     EXIT0000              AND EXIT
CHECK000 DS    0H
         ITRACE ID=CHECK,            ISSUING A CHECK                   +
               DATA1=DECB24          .. DECB'S ADDRESS
         L     R4,DECB24             DECB'S ADDRESS
         BAL   R10,AM24              SWITCH TO 24-BIT MODE
         CHECK (R4)                  CHECK I/O
         BAL   R10,AM31              SWITCH TO 31-BIT MODE
         B     EXIT0000              AND EXIT
CLOSE000 DS    0H
         ITRACE ID=CLOSE,            CLOSING DCB                       +
               DATA1=DCB24           .. DCB'S ADDRESS
         GETMAIN RU,                 ACQUIRE STORAGE FOR OPEN/CLOSE    +
               LV=OCPLL,             .. SIZE OF AREA                   +
               LOC=BELOW             .. FROM BELOW THE LINE
         LR    R2,R1                 COPY OPEN/CLOSE PARM LIST ADDRESS
         MVC   0(OCPLL,R2),CLOSEL    COPY CLOSE LIST FORM
         L     R3,DCB24              DCB'S ADDRESS
         BAL   R10,AM24              SWITCH TO 24-BIT MODE
         CLOSE ((R3)),MF=(E,(R2))    ISSUE CLOSE
         BAL   R10,AM31              SWITCH TO 31-BIT MODE
         FREEMAIN RU,A=(2),LV=OCPLL  FREEMAIN OPEN/CLOSE PARM LIST
         B     EXIT0000              AND EXIT
GETL0000 DS    0H
         ITRACE ID=GETL,             ISSUING GET (LOCATE MODE)         +
               DATA1=DCB24           .. DCB'S ADDRESS
         L     R3,DCB24              DCB'S ADDRESS
         BAL   R10,AM24              SWITCH TO 24-BIT MODE
         GET   (R3)                  ISSUE GET
         BAL   R10,AM31              SWITCH TO 31-BIT MODE
         ST    R1,IOA24              RETURN I/O AREA ADDRESS
         ITRACE ID=GETLDATA,         DATA RETURNED BY GET              +
               RDATA1=R1,            .. I/O AREA ADDRESS               +
               DATA2=0(R1)           .. 1ST 8 BYTES
         B     EXIT0000              AND EXIT
GETM0000 DS    0H
         ITRACE ID=GETM,             ISSUING GET (MOVE MODE)           +
               DATA1=DCB24,          .. DCB'S ADDRESS                  +
               DATA2=IOA24           .. I/O AREA'S ADDRESS
         L     R3,DCB24              DCB'S ADDRESS
         L     R4,IOA24              I/O AREA'S ADDRESS
         BAL   R10,AM24              SWITCH TO 24-BIT MODE
         GET   (R3),(R4)             ISSUE GET
         BAL   R10,AM31              SWITCH TO 31-BIT MODE
         ITRACE ID=GETMDATA,         DATA RETURNED BY GET              +
               DATA1=0(R4),          .. 1ST 8 BYTES                    +
               DATA2=8(R4)           .. NEXT 8 BYTES
         B     EXIT0000              AND EXIT
LOCATE00 DS    0H
         ITRACE ID=LOCATE,           ISSUING NOTE                      +
               DATA1=DSN24           .. DATA SET NAME
         MVC   CAMLST24(CAMLOCL),CAMLOC
         LA    R0,DSN24              DATASET NAME'S ADDRESS
         ST    R0,CAMLST24+4         SET ADDRESS IN PARM LIST
         GETMAIN RU,                 ACQUIRE STORAGE FOR LOCATE DATA   +
               LV=265,               .. SIZE                           +
               LOC=BELOW             .. MUST BE 24-BIT AREA
         ST    R1,CAMLST24+12        SET WORK AREA ADDRESS
         LA    R1,CAMLST24           OBTAIN PARM LIST
         BAL   R10,AM24              SWITCH TO 24-BIT MODE
         LOCATE (1)                  ISSUE LOCATE
         LR    R2,R15                SAVE RETURN CODE
         L     R1,CAMLST24+12        WORK AREA ADDRESS
         FREEMAIN RU,A=(1),LV=265    FREE WORK AREA
         LR    R15,R2                RESTORE RETURN CODE
         BAL   R10,AM31              SWITCH TO 31-BIT MODE
         B     EXIT0000              AND EXIT
NOTE0000 DS    0H
         ITRACE ID=NOTE,             ISSUING NOTE                      +
               DATA1=DCB24           .. DCB'S ADDRESS
         L     R3,DCB24              DCB ADDRESS
         BAL   R10,AM24              SWITCH TO 24-BIT MODE
         NOTE  (R3),                 REQUEST CURRENT DATA SET POSITION +
               TYPE=REL              .. RELATIVE TTR
         BAL   R10,AM31              SWITCH TO 31-BIT MODE
         STCM  R1,15,TTR24           SAVE RETURNED TTR
         B     EXIT0000              EXIT
OPENI000 DS    0H
         ITRACE ID=OPENI,            OPEN DCB INPUT                    +
               DATA1=DCB24           .. DCB'S ADDRESS
         GETMAIN RU,                 ACQUIRE STORAGE FOR OPEN/CLOSE    +
               LV=OCPLL,             .. SIZE OF AREA                   +
               LOC=BELOW             .. FROM BELOW THE LINE
         LR    R2,R1                 COPY OPEN/CLOSE PARM LIST ADDRESS
         MVC   0(OCPLL,R2),OPENIL    COPY OPEN INPUT LIST FORM
         L     R3,DCB24              DCB'S ADDRESS
         USING IHADCB,R3             DEFINE BASE
         LA    R1,EOF0000            EOF ADDRESS
         STCM  R1,7,DCBEODA          SET EOF ADDRESS
         BAL   R10,AM24              SWITCH TO 24-BIT MODE
         OPEN  ((R3)),MF=(E,(R2))
         BAL   R10,AM31              SWITCH TO 31-BIT MODE
         FREEMAIN RU,A=(2),LV=OCPLL  FREEMAIN OPEN/CLOSE PARM LIST
         B     EXIT0000              AND EXIT
OPENO000 DS    0H
         ITRACE ID=OPENO,            OPENING DCB OUTPUT                +
               DATA1=DCB24           .. DCB'S ADDRESS
         GETMAIN RU,                 ACQUIRE STORAGE FOR OPEN/CLOSE    +
               LV=OCPLL,             .. SIZE OF AREA                   +
               LOC=BELOW             .. FROM BELOW THE LINE
         LR    R2,R1                 COPY OPEN/CLOSE PARM LIST ADDRESS
         MVC   0(OCPLL,R2),OPENOL    COPY OPEN OUTPUT LIST FORM
         L     R3,DCB24              DCB'S ADDRESS
         BAL   R10,AM24              SWITCH TO 24-BIT MODE
         OPEN  ((R3)),MF=(E,(R2))
         BAL   R10,AM31              SWITCH TO 31-BIT MODE
         FREEMAIN RU,A=(2),LV=OCPLL  FREEMAIN OPEN/CLOSE PARM LIST
         B     EXIT0000              AND EXIT
POINT000 DS    0H
         ITRACE ID=POINT,            ISSUING POINT                     +
               DATA1=DCB24,          .. DCB'S ADDRESS                  +
               DATA2=TTR24           .. RELATIVE TTR
         L     R3,DCB24              DCB ADDRESS
         LA    R4,TTR24              TTR ADDRESS
         BAL   R10,AM24              SWITCH TO 24-BIT MODE
         POINT (R3),                 SET STARTING POINT                +
               (R4),                 .. TTR ADDRESS                    +
               TYPE=REL              .. RELATIVE TTR
         BAL   R10,AM31              SWITCH TO 31-BIT MODE
         ITRACE ID=POINTRC,                                            +
               RDATA1=R15
         LTR   R15,R15               POINT SUCCESSFUL?
         BNZ   POINT010              NO
         B     EXIT0000              EXIT
POINT010 DS    0H
         ITRACE ID=POINTERR,                                           +
               RDATA1=R15
         ABEND $U0113,DUMP,,USER
PUT0000  DS    0H
         ITRACE ID=PUT,              ISSUING PUT                       +
               DATA1=DCB24,          .. DCB'S ADDRESS                  +
               DATA2=IOA24           .. I/O AREA'S ADDRESS
         L     R3,DCB24              DCB'S ADDRESS
         L     R4,IOA24              I/O AREA'S ADDRESS
         BAL   R10,AM24              SWITCH TO 24-BIT MODE
         PUT   (R3),(R4)             ISSUE PUT
         BAL   R10,AM31              SWITCH TO 24-BIT MODE
         B     EXIT0000              AND EXIT
READ0000 DS    0H
         ITRACE ID=READ,             ISSUING BSAM READ                 +
               DATA1=DCB24,          .. DCB'S ADDRESS                  +
               DATA2=DECB24          .. DECB'S ADDRESS
         L     R3,DCB24              DCB'S ADDRESS
         L     R4,DECB24             DECB'S ADDRESS
         L     R5,IOA24              I/O AREA ADDRESS
         XC    0(4,R4),0(R4)         CLEAR THE ECB
         BAL   R10,AM24              SWITCH TO 24-BIT MODE
         READ  (R4),                 START BSAM I/O                    +
               SF,                   .. SEQUENTIALLY FORWARD           +
               (R3),                 .. DCB ADDRESS                    +
               (R5),                 .. I/O AREA ADDRESS               +
               'S',                  ..                                +
               MF=E                  .. EXECUTE FORM
         BAL   R10,AM31              SWITCH TO 31-BIT MODE
         B     EXIT0000              AND EXIT
EOF0000  DS    0H
         BAL   R10,AM31              SWITCH TO 31-BIT MODE
         ITRACE ID=EOF,              EOF                               +
               DATA1=DCB24,          .. DCB'S ADDRESS                  +
               DATA2=EOF24           .. CALLER'S EOF ADDRESS
         MVC   SAVE24A+(R14*4)(4),EOF24  REPLACE RETURN ADDRESS
         B     EXIT0000              AND EXIT
WRITE000 DS    0H
         ITRACE ID=WRITE,            ISSUING BSAM WRITE                +
               DATA1=DCB24,          .. DCB'S ADDRESS                  +
               DATA2=DECB24          .. DECB'S ADDRESS
         L     R3,DCB24              DCB'S ADDRESS
         L     R4,DECB24             DECB'S ADDRESS
         L     R5,IOA24              I/O AREA ADDRESS
         SR    R6,R6                 CLEAR REGISTER
         ICM   R6,3,LRECL24          RECORD SIZE
         XC    0(4,R4),0(R4)         CLEAR THE ECB
         BAL   R10,AM24              SWITCH TO 24-BIT MODE
         WRITE (R4),                 START BSAM I/O                    +
               SF,                   .. SEQUENTIALLY FORWARD           +
               (R3),                 .. DCB ADDRESS                    +
               (R5),                 .. I/O AREA ADDRESS               +
               (R6),                 .. RECORD SIZE                    +
               MF=E                  .. EXECUTE FORM
         BAL   R10,AM31              SWITCH TO 31-BIT MODE
EXIT0000 DS    0H
         ITRACE ID=EXIT,             EXITING                           +
               RDATA1=R15            .. RETURN CODE
         LM    R0,R14,SAVE24A        RESTORE ALL EXCEPT R15
         BR    R14                   RETURN TO CALLER
AM24     DS    0H
         LA    R10,0(R10)            CLEAR HIGH BIT(S)
         BSM   R0,R10                RETURN IN 24-BIT MODE
AM31     DS    0H
         LA    R10,0(R10)            CLEAR HIGH BIT(S)
         O     R10,X80               TURN ON 31-BIT MODE BIT
         BSM   R0,R10                RETURN IN 24-BIT MODE
* ------------------------------------------------------------------ *
*                                                                    *
*        CONSTANTS                                                   *
*                                                                    *
* ------------------------------------------------------------------ *
X80      DC    A(X'80000000')        31-BIT MODE INDICATOR
CAMLOC   CAMLST NAME,                EXTRACT VTOC INFO BY DSN          +
               *,                    .. DATA SET NAME'S ADDRESS        +
               ,                     .. NO CVOL VOLER                  +
               *                     .. RETURNED DATA ADDRESS
CAMLOCL  EQU   *-CAMLOC
CAMLSTA  CAMLST SEEK,                READ VTOC BY DISK ADDRESS         +
               *,                    .. DISK ADDRESS'S ADDRESS         +
               *,                    .. VOLSER'S ADDRESS               +
               *                     .. RETURNED DATA ADDRESS
CAMLSTAL EQU   *-CAMLSTA
CAMLSTN  CAMLST SEARCH,              READ VTOC BY DATASET NAME         +
               *,                    .. DATASET NAME'S ADDRESS         +
               *,                    .. VOLSER'S ADDRESS               +
               *                     .. RETURNED DATA ADDRESS
CAMLSTNL EQU   *-CAMLSTN
OPENIL   OPEN  (*,INPUT),MF=L        OPEN INPUT LIST FORM
OCPLL    EQU   *-OPENIL
OPENOL   OPEN  (*,OUTPUT),MF=L       OPEN OUTPUT LIST FORM
CLOSEL   CLOSE (*),MF=L              CLOSE LIST FORM
* ------------------------------------------------------------------ *
*        PARAMETER BLOCK                                             *
* ------------------------------------------------------------------ *
         FX24PRM DSECT=YES
* ------------------------------------------------------------------ *
*        COMMON DATA                                                 *
* ------------------------------------------------------------------ *
FXCOMM   DSECT
         COMMCOMM COMMNAME=FXCOMM
         COPY   TRENTRY
         FXPRFX TYPE=DSECT
         XTRRECD
* ------------------------------------------------------------------ *
*        DCB DSECT                                                   *
* ------------------------------------------------------------------ *
         DCBD DSORG=PS
* ------------------------------------------------------------------ *
*                                                                    *
*              EQUATES                                               *
*                                                                    *
* ------------------------------------------------------------------ *
         ABCODES
         COPY REGEQU
         END  FX24
./ ADD NAME=TESTUSER 0100-99056-99056-1500-00030-00030-00000-FX-REL1

TESTUSER CSECT
         COPY  OPTIONS
TESTUSER AMODE 31
TESTUSER RMODE ANY
         STM   R14,R12,12(R13)       SAVE CALLER'S REGISTERS
         LR    R12,R15               COPY BASE
         USING TESTUSER,R12          DEFINE BASE
         LA    R1,SAVEAREA
         ST    R13,4(R1)             SAVE CALLER'S SAVE AREA ADDRESS
         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO CALLER'S
         LR    R13,R1                COPY WORK AREA ADDRESS
         MVI   PARMCMD,$INQUIRE      SET COMMAND INQUIRE
         MVC   PARMFX,=CL8'BVFXT1'   SET ENTRY NODE
         MVC   PARMENDE,=CL8'BVFXT1' SET ENTRY NODE
         MVC   PARMNBR,=F'65'        SET REQUEST NUMBER
         MVC   PARMNDE#,=AL2(2)
         LOAD  EP=FXUSER             LOAD USER INTERFACE MODULE
         LR    R15,R0                COPY ENTRY POINT
         LA    R1,USERPARM           POINT TO PARMS
         BALR  R14,R15               LINK TO FXUSER
         DC    H'0'                  CAUSE A DUMP
         LTORG
SAVEAREA DS    18F
* ------------------------------------------------------------------- *
*              PARM LIST                                              *
* ------------------------------------------------------------------- *
         USERPARM DSECT=NO
         COPY REGEQU
         END  TESTUSER
./ ADD NAME=VSAMFMT  0100-99056-99056-1500-00421-00421-00000-FX-REL1

         TITLE 'FXFORMAT   MASTER FILE FORMATTER'
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: VSAMFMT                                               *
*                                                                     *
*   The master file may be either BDAM or a VSAM linear data set.     *
*                                                                     *
*   FX expects the master file to be pre-formatted, this module       *
*   provides this function for the VSAM linear type.                  *
*                                                                     *
* ------------------------------------------------------------------- *
FXFORMAT CSECT
FXFORMAT AMODE 31
FXFORMAT RMODE 24
         USING REQBLOK,R11           DEFINE BASE
         STM   R14,R12,12(R13)       SAVE REGS
         LR    R12,R15               COPY BASE ADDRESS
         USING FXFORMAT,R12          DEFINE BASE
         LA    R1,SAVEAREA           OUR SAVE AREA ADDRESS
         ST    R1,8(R13)             CHAIN TO CALLER'S
         ST    R13,4(R1)             CHAIN CALLERS TO OURS
         LR    R13,R1                SET SAVE AREA ADDRESS
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         OPEN  (FXIN,INPUT)          OPEN CONTROL STATEMENT FILE
         OPEN  (FXPRINT,OUTPUT)      OPEN PRINT FILE
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         BAL   R10,HEAD0000          PRINT HEADING
INIT0010 DS    0H
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         GET   FXIN,CTLSTMT          READ A CONTROL STATEMENT
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         MVC   MSG01TXT(CTLSTMTL),CTLSTMT
         MVC   PLINE(MSG01L),MSG01   COPY MESSAGE
         BAL   R10,PRT0000           PRINT MESSAGE
         CLI   CTLSTMT,C'*'          COMMENT?
         BE    INIT0010              YES
         CLC   RECSSTMT,CTLSTMT      RECORDS STATEMENT?
         BE    RECS0000              YES
         MVC   PLINE(MSG02L),MSG02   INVALID STATEMENT
         OI    STATFLAG,$ERROR       INDICATE ERROR
         BAL   R10,PRT0000           PRINT ERROR STATEMENT
         B     INIT0010              READ NEXT STATEMENT
RECS0000 DS    0H
         LA    R1,CTLSTMT+L'RECSSTMT FIRST DIGIT IN NUMBER OF RECORDS
         LA    R2,7                  MAXIMUM NUMBER OF DIGITS
         MVC   NBRIN,NBRIN-1         INITIALIZE TO ZEROS
RECS0010 DS    0H
         CLI   0(R1),C' '            END OF VALUE?
         BE    RECS0020              YES
         CLI   0(R1),C'0'            INVALID DIGIT?
         BL    RECS0030              YES
         CLI   0(R1),C'9'            INVALID DIGIT?
         BH    RECS0030              YES
         MVC   NBRIN(L'NBRIN-1),NBRIN+1   SHIFT LEFT 1 DIGIT
         MVC   NBRIN+L'NBRIN-1(1),0(R1)   COPY DIGIT
         LA    R1,1(R1)              NEXT DIGIT
         BCT   R2,RECS0010           LOOP
         CLI   0(R1),C' '            BLANK?
         BNE   RECS0040              TOO MANY DIGITS
RECS0020 DS    0H
         PACK  DWORD,NBRIN           PACK NUMBER OF RECORDS
         CVB   R1,DWORD              CONVERT TO BINARY
         LTR   R1,R1                 ZERO?
         BZ    RECS0050              YES.. INVALID
         ST    R1,DATABLKS           SET NUMBER OF BLOCKS
         OI    STATFLAG,$RECORDS     NUMBER OF RECORDS HAS BEEN SET
         B     INIT0010              READ NEXT CONTROL STATEMENT
RECS0030 DS    0H
         MVC   PLINE(MSG03L),MSG03   INVALID DIGIT
         OI    STATFLAG,$ERROR       INDICATE ERROR
         BAL   R10,PRT0000           PRINT ERROR STATEMENT
         B     INIT0010              READ NEXT STATEMENT
RECS0040 DS    0H
         MVC   PLINE(MSG04L),MSG04   TOO MANY DIGITS
         OI    STATFLAG,$ERROR       INDICATE ERROR
         BAL   R10,PRT0000           PRINT ERROR STATEMENT
         B     INIT0010              READ NEXT STATEMENT
RECS0050 DS    0H
         MVC   PLINE(MSG05L),MSG05   RECORDS=0
         OI    STATFLAG,$ERROR       INDICATE ERROR
         BAL   R10,PRT0000           PRINT ERROR STATEMENT
         B     INIT0010              READ NEXT STATEMENT
PROC0000 DS    0H
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         TM    STATFLAG,$ERROR       ERROR FLAG ON?
         BO    ERR0010               YES.. EXIT
         TM    STATFLAG,$RECORDS     NUMBER OF RECORDS SET?
         BNO   ERR0050               NO..
         MVC   MSG07FNC,IDENTIFY     LAST DIV FUNCTION REQUESTED
         DIV   IDENTIFY,             CONNECT TO MASTER FILE            +
               TYPE=DA,              .. PERMANENT TYPE                 +
               ID=OBJID,             .. RETURNED OBJECT ID             +
               DDNAME=MASTER         .. DIV DATASET'S DD NAME
         STH   R15,RC                SAVE RETURN CODE
         LTR   R15,R15               SUCESSFUL?
         BNZ   ERR0020               NO
         OI    STATFLAG,$STATID      IDENTIFY COMPLETE
         MVC   MSG07FNC,ACCESS       LAST FUNCTION ATTEMPTED
         DIV   ACCESS,               CONNECT TO DIV OBJECT             +
               ID=OBJID,             .. OBJECT'S NAME                  +
               MODE=UPDATE           .. WE'RE GOING TO UPDATE IT
         STH   R15,RC                SAVE RETURN CODE
         LTR   R15,R15               SUCESSFUL?
         BNZ   ERR0020               NO
         OI    STATFLAG,$STATACC     ACCESS COMPLETE
         MVC   MSG09FNC,CREATE       FUNCTION ATTEMPTED
         DSPSERV CREATE,             CREATE A MASTER FILE DATASPACE    +
               NAME=MSTRDATA,        .. DATASPACE'S NAME               +
               STOKEN=DSTOKEN,       .. RETURN SPACE TOKEN             +
               BLOCKS=DATABLKS       .. DATA SPACE SIZE IN 4K BLOCKS
         STH   R15,RC                SAVE RETURN CODE
         LTR   R15,R15               SUCESSFUL?
         BNZ   ERR0040               NO
         OI    STATFLAG,$STATCRE     DATASPACE CREATE COMPLETE
         MVC   MSG08FNC,ADD          FUNCTION ATTEMPTED
         ALESERV ADD,                ADD AN ENTRY TO ACCESS LIST       +
               STOKEN=DSTOKEN,       .. DATA SPACE'S TOKEN             +
               ALET=DSALET           .. RETURNED ALET
         STH   R15,RC                SAVE RETURN CODE
         LTR   R15,R15               SUCESSFUL?
         BNZ   ERR0030               NO
         OI    STATFLAG,$STATADD     ALET ADD COMPLETE
         MVC   MSG07FNC,MAP          FUNCTION ATTEMPTED
         DIV   MAP,                  ASSOCIATE DIV OBJECT WITH STORAGE +
               ID=OBJID,             .. DIV OBJECT NAME                +
               AREA=ZERO,            .. BASE ADDRESS IS ZERO           +
               OFFSET=*,             .. START WITH FIRST BLOCK         +
               SPAN=DATABLKS,        .. NUMBER OF BLOCKS IN DATASET    +
               STOKEN=DSTOKEN        .. DATASPACE'S TOKEN
         STH   R15,RC                SAVE RETURN CODE
         LTR   R15,R15               SUCESSFUL?
         BNZ   ERR0020               NO
         OI    STATFLAG,$STATMAP     MAP COMPLETE
         L     R9,DATABLKS           NUMBER OF DATA BLOCKS
         MH    R9,H4096              TIMES SIZE OF EACH BLOCK
         SR    R8,R8                 CLEAR REGISTER
         D     R8,=A(REQBLOKL)       CALCULATE NUMBER OF REQUESTS
         CVD   R9,DWORD              CONVERT TO DECIMAL
         MVC   MSG10NBR,=X'4020202020202120'
         ED    MSG10NBR,DWORD+4      NUMBER OF REQUESTS IN MASTER FILE
         MVC   PLINE(MSG10L),MSG10   COPY MESSAGE
         BAL   R10,PRT0000           PRINT MESSAGE
         SR    R11,R11               FIRST RECORD IS AT ADDRESS 0
         LAM   R2,R2,DSALET          DATASPACE'S ALET
         LAM   R11,R11,DSALET        DATASPACE'S ALET
         SAC   512                   SWITCH TO AR MODE
MSTR0010 DS    0H
         AP    RECCNT,P1             ADD 1 TO RECORD COUNTER
         MVC   RECWORK,=X'F02020202021'
         ED    RECWORK,RECCNT        EDIT RECORD NUMBER
         MVC   REQREC#,RECWORK+1     SET RECORD NUMBER
         MINIT BLANKS,P0,0,R2        INITIALIZE REMAINING FIELDS
         LTR   R11,R11               CONTROL RECORD?
         BNZ   MSTR0020              NO
         MVI   REQSTAT,$REQCNTL      INDICATE THIS IS CONTROL RECORD
MSTR0020 DS    0H
         LA    R11,REQBLOKL(R11)     NEXT BLOCK
         BCT   R9,MSTR0010           INITIALIZE ALL RECORDS
         SAC   0                     RETURN TO PRIMARY MODE
         DIV   SAVE,ID=OBJID         SAVE THE DATA
         B     EXIT0000              EXIT
PRT0000  DS    0H
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         PUT   FXPRINT,PLINE         WRITE TO FXPRINT
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         AP    LINECT,P1             ADD 1 TO LINE COUNT
         CLI   PLINE,C' '            SINGLE SPACE?
         BE    PRT0010               YES
         AP    LINECT,P1             ADD 1 TO LINE COUNT
         CLI   PLINE,C'0'            DOUBLE SPACE?
         BE    PRT0010               YES
         AP    LINECT,P1             ADD 1 TO LINE COUNT
PRT0010  DS    0H
         MVC   PLINE,PLINE-1         CLEAR PRINT AREA
         CP    LINECT,MAXLINE        TIME FOR HEADING?
         BLR   R10                   NO
HEAD0000 DS    0H
         AP    PAGECT,P1             ADD 1 TO PAGE COUNT
         MVC   HEADPAGE,=X'40202120' INITIALIZE EDIT WORD
         ED    HEADPAGE,PAGECT       EDIT PAGE NUMBER
         MVC   PLINE(HEADINGL),HEADING
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         PUT   FXPRINT,PLINE         PRINT HEADING
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         MVC   PLINE,PLINE-1         CLEAR PRINT I/O AREA
         ZAP   LINECT,P1             RESET LINE COUNT
         BR    R10
* ------------------------------------------------------------------- *
*        ERROR ROUTINES                                               *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         MVC   PLINE(MSG06L),MSG06   SET MESSAGE
         BAL   R10,PRT0000           PRINT MESSAGE
         B     EXIT0000              AND EXIT
ERR0020  DS    0H
         ST    R1,DWORD              SAVE RETURN CODE
         UNPK  MSG07RC(5),DWORD+6(2) UNPACK RETURN CODE
         MVZ   MSG07RC,HEX0000       TURN OFF ZONES
         TR    MSG07RC,HEXCHAR       TRANSLATE TO PRINTABLE
         MVI   MSG07RC+4,C' '        RESTORE BLANK
         MVC   PLINE(MSG07L),MSG07   COPY MESSAGE
         BAL   R10,PRT0000           PRINT MESSAGE
         B     EXIT0000              AND EXIT
ERR0030  DS    0H
         ST    R1,DWORD              SAVE RETURN CODE
         UNPK  MSG08RC(5),DWORD+6(2) UNPACK RETURN CODE
         MVZ   MSG08RC,HEX0000       TURN OFF ZONES
         TR    MSG08RC,HEXCHAR       TRANSLATE TO PRINTABLE
         MVI   MSG08RC+4,C' '        RESTORE BLANK
         MVC   PLINE(MSG08L),MSG08   COPY MESSAGE
         BAL   R10,PRT0000           PRINT MESSAGE
         B     EXIT0000              AND EXIT
ERR0040  DS    0H
         ST    R1,DWORD              SAVE RETURN CODE
         UNPK  MSG09RC(5),DWORD+6(2) UNPACK RETURN CODE
         MVZ   MSG09RC,HEX0000       TURN OFF ZONES
         TR    MSG09RC,HEXCHAR       TRANSLATE TO PRINTABLE
         MVI   MSG09RC+4,C' '        RESTORE BLANK
         MVC   PLINE(MSG09L),MSG09   COPY MESSAGE
         BAL   R10,PRT0000           PRINT MESSAGE
         B     EXIT0000              AND EXIT
ERR0050  DS    0H
         MVC   PLINE(MSG11L),MSG11   SET MESSAGE
         BAL   R10,PRT0000           PRINT MESSAGE
         B     ERR0010               PRINT SECONDARY MESSAGE
* ------------------------------------------------------------------- *
*        EXIT                                                         *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         TM    STATFLAG,$STATMAP     MAP FUNCTION COMPLETE?
         BNO   EXIT0010              NO
         NI    STATFLAG,255-$STATMAP PREVENT LOOP DURING EXIT
         MVC   MSG07FNC,UNMAP        FUNCTION ATTEMPTED
         DIV   UNMAP,                UNMAP DIV OBJECT                  +
               ID=OBJID,             .. DIV OBJECT NAME                +
               AREA=ZERO,            .. BASE ADDRESS IS ZERO           +
               STOKEN=DSTOKEN        .. DATASPACE'S TOKEN
         STH   R15,RC                SAVE RETURN CODE
         LTR   R15,R15               SUCESSFUL?
         BNZ   ERR0020               NO
EXIT0010 DS    0H
         TM    STATFLAG,$STATACC     ACCESS FUNCTION COMPLETE?
         BNO   EXIT0020              NO
         NI    STATFLAG,255-$STATACC PREVENT LOOP DURING EXIT
         MVC   MSG07FNC,UNACC        FUNCTION ATTEMPTED
         DIV   UNACCESS,             RELEASE ACCESS                    +
               ID=OBJID              .. DIV OBJECT NAME
         STH   R15,RC                SAVE RETURN CODE
         LTR   R15,R15               SUCESSFUL?
         BNZ   ERR0020               NO
EXIT0020 DS    0H
         TM    STATFLAG,$STATID      IDENTIFY FUNCTION COMPLETE?
         BNO   EXIT0030              NO
         NI    STATFLAG,255-$STATID  PREVENT LOOP DURING EXIT
         MVC   MSG07FNC,UNID         FUNCTION ATTEMPTED
         DIV   UNIDENTIFY,           DISCONNECT FROM OBJECT            +
               ID=OBJID              .. DIV OBJECT NAME
         STH   R15,RC                SAVE RETURN CODE
         LTR   R15,R15               SUCESSFUL?
         BNZ   ERR0020               NO
EXIT0030 DS    0H
         TM    STATFLAG,$STATADD     ALET FUNCTION COMPLETE?
         BNO   EXIT0040              NO
         NI    STATFLAG,255-$STATADD  PREVENT LOOP DURING EXIT
         MVC   MSG08FNC,DLETALET     FUNCTION ATTEMPTED
         ALESERV DELETE,             DELETE ALET ENTRY FOR DATASPACE   +
               ALET=DSALET           .. ALET TO DELETE
         STH   R15,RC                SAVE RETURN CODE
         LTR   R15,R15               SUCESSFUL?
         BNZ   ERR0030               NO
EXIT0040 DS    0H
         TM    STATFLAG,$STATCRE     DATASPACE CREATED?
         BNO   EXIT0050              NO
         NI    STATFLAG,255-$STATCRE PREVENT LOOP DURING EXIT
         MVC   MSG09FNC,DLETDSPC     FUNCTION ATTEMPTED
         DSPSERV DELETE,             DELETE DATASPACE                  +
               STOKEN=DSTOKEN        .. DATASPACE'S SPACE TOKEN
         STH   R15,RC                SAVE RETURN CODE
         LTR   R15,R15               SUCESSFUL?
         BNZ   ERR0040               NO
EXIT0050 DS    0H
         BAL   R15,AM24              SWITCH TO 24-BIT MODE
         CLOSE FXIN
         CLOSE FXPRINT
         BAL   R15,AM31              SWITCH TO 31-BIT MODE
         L     R13,4(R13)            RESTORE REGISTER 13
         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS
         SR    R15,R15               GIVE GOOD RETURN CODE
         BR    R14                   RETURN TO CALLER
AM24     DS    0H
         LA    R15,0(R15)            CLEAR HIGH BIT(S)
         BSM   R0,R15                RETURN IN 24-BIT MODE
AM31     DS    0H
         LA    R15,0(R15)            CLEAR HIGH BIT(S)
         O     R15,X80               TURN ON 31-BIT MODE
         BSM   R0,R15                RETURN IN 31-BIT MODE
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DWORD    DC    D'0'
SAVEAREA DS    18F
X80      DC    A(X'80000000')
ZERO     DC    F'0'
OBJSIZE  DC    F'0'
DSALET   DC    F'0'
DATABLKS DC    F'0'
H4096    DC    H'4096'
RC       DC    H'0'
OBJID    DC    CL8' '
DSTOKEN  DS    CL8' '
FNC      DC    CL8' '
RECCNT   DC    PL3'0'
LINECT   DC    PL2'0'
PAGECT   DC    PL2'0'
P0       DC    P'0'
P1       DC    P'1'
MAXLINE  DC    P'&MAXL'
RECWORK  DC    CL6' '
STATFLAG DC    X'00'
$STATID  EQU   X'80'
$STATACC EQU   X'40'
$STATCRE EQU   X'20'
$STATADD EQU   X'10'
$STATMAP EQU   X'08'
$RECORDS EQU   X'02'
$ERROR   EQU   X'01'
HEX0000  DC    8X'00'
BLANKS   DC    CL44' '
HEXCHAR  DC    C'0123456789ABCDEF'
         SPACE 1
         DC    C'0'
NBRIN    DC    CL7'0000000'
         SPACE 1
         DC    C' '
PLINE    DC    CL133' '
CTLSTMT  DC    CL80' '
CTLSTMTL EQU   *-CTLSTMT
         SPACE 1
HEADING  DS    0C
         DC    CL50' '
         DC    C'FX MASTER FILE FORMATTER'
         DC    CL50' '
         DC    C'PAGE'
HEADPAGE DC    CL4' '
HEADINGL EQU   *-HEADING
MSG01    DS    0C
         DC    C' FXFORMAT01I   CONTROL STATEMENT:'
MSG01TXT DS    (CTLSTMTL)C
MSG01L   EQU   *-MSG01
MSG02    DC    C' FXFORMAT02E * INVALID CONTROL STATEMENT'
MSG02L   EQU   *-MSG02
MSG03    DC    C' FXFORMAT03E * INVALID DIGIT IN RECORDS VALUE'
MSG03L   EQU   *-MSG03
MSG04    DC    C' FXFORMAT04E * TOO MANY DIGITS IN RECORDS VALUE'
MSG04L   EQU   *-MSG04
MSG05    DC    C' FXFORMAT05E * RECORDS VALUE MAY NOT BE ZERO'
MSG05L   EQU   *-MSG05
MSG06    DC    C'-FXFORMAT06E * ERROR(S) DETECTED, EXECUTION ABORTED'
MSG06L   EQU   *-MSG06
MSG07    DS    0C
         DC    C' FXFORMAT07E * DIV FUNCTION '
MSG07FNC DC    CL8' '
         DC    C' FAILED, RC='
MSG07RC  DC    CL4' '
         DC    C' '
MSG07L   EQU   *-MSG07
MSG08    DS    0C
         DC    C' FXFORMAT08E * ALESERV FUNCTION '
MSG08FNC DC    CL8' '
         DC    C' FAILED, RC='
MSG08RC  DC    CL4' '
         DC    C' '
MSG08L   EQU   *-MSG08
MSG09    DS    0C
         DC    C' FXFORMAT09E * DSPSERV FUNCTION '
MSG09FNC DC    CL8' '
         DC    C' FAILED, RC='
MSG09RC  DC    CL4' '
         DC    C' '
MSG09L   EQU   *-MSG09
MSG10    DS    0C
         DC    C' FXFORMAT10I   NUMBER OF REQUESTS IN MASTER FILE IS'
MSG10NBR DC    CL8' '
MSG10L   EQU   *-MSG10
MSG11    DC    C' FXFORMAT11E   NUMBER OF RECORDS NOT GIVEN'
MSG11L   EQU   *-MSG11
RECSSTMT DC    C'RECORDS='
IDENTIFY DC    CL8'IDENTIFY'
ACCESS   DC    CL8'ACCESS'
CREATE   DC    CL8'CREATE'
ADD      DC    CL8'ADD'
MAP      DC    CL8'MAP'
UNMAP    DC    CL8'UNMAP'
UNACC    DC    CL8'UNACC'
UNID     DC    CL8'UNID'
DLETALET DC    CL8'DLETALET'
DLETDSPC DC    CL8'DLETDSPC'
MASTER   DC    AL1(6),CL8'MASTER'
MSTRDATA DC    CL8'MSTRDATA'
FXIN     DCB   DDNAME=FXIN,             CONTROL STATEMENT DCB          +
               DSORG=PS,                .. SEQUENTIAL                  +
               LRECL=80,                .. 80 BYTE RECORDS             +
               RECFM=FB,                .. FIXED, BLOCKED RECORDS      +
               EODAD=PROC0000,          .. END OF DATA                 +
               MACRF=GM                 .. GET/MOVE MODE
FXPRINT  DCB   DDNAME=FXPRINT,          SYSOUT DCB                     +
               DSORG=PS,                .. SEQUENTIAL                  +
               LRECL=L'PLINE,           .. RECORD SIZE                 +
               RECFM=FBA,               .. FIXED, BLOCKED, ASA         +
               MACRF=PM
         LTORG
         REQBLOK DSECT=YES
* ------------------------------------------------------------------- *
*                                                                     *
*              EQUATES                                                *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY REGEQU
./ ADD NAME=VSAMMSTR 0100-99056-99056-1500-00378-00378-00000-FX-REL1

         TITLE 'FXSMSTR   MASTER FILE I/O'
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: FXSMSTR                                               *
*                                                                     *
*   The master file may be either a BDAM or a VSAM linear data set.   *
*   If the master file is VSAM linear, this module provides the       *
*   "access method".  A data space is created and is associated with  *
*   the data set.                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
         TITLE  'Master file access (VSAM LINEAR)'
FXSMSTR  CSECT
FXSMSTR  AMODE 31
FXSMSTR  RMODE ANY
         USING FXSMSTR,R12           DEFINE BASE
         USING FXSCOMM,R11           DEFINE BASE
         STM   R14,R12,12(R13)       SAVE CALLER'S REGISTERS
         LR    R12,R15               COPY BASE ADDRESS
         B     MSTR000A
         DC    ((PFXMODNM-MODPRFX)-(*-FXSMSTR))X'00'
         DC    CL8'MSTRVSAM'         MODULE NAME
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MSTR000A DS    0H
         USING MSTRREQ,R9            DEFINE BASE
         LR    R9,R1                 SAVE REQUEST BLOCK'S ADDRESS
         ICM   R1,15,COMMIOWK        WORK AREA ACQUIRED?
         BNZ   MSTR0000              YES
         GETMAIN RU,                 ACQUIRE WORK AREA                 +
               LV=WKL,               .. SIZE                           +
               LOC=ANY               .. FROM ANY AREA
         ST    R1,COMMIOWK           SAVE WORK AREA ADDRESS
         LR    R2,R1                 SAVE WORK AREA ADDRESS
         LR    R0,R1                 COPY ADDRESS
         LA    R1,WKL                LENGTH
         SR    R14,R14               CLEAR ADDRESS 2
         SR    R15,R15               CLEAR LENGTH 2
         MVCL  R0,R14                CLEAR WORK AREA
         ST    R13,4(R2)             SAVE CALLER'S SAVE AREA ADDRESS
         ST    R2,8(R13)             CHAIN OUR SAVE AREA TO CALLER'S
         LR    R13,R2                SET WORK AREA BASE
         USING WK,R13                DEFINE BASE
         ITRACE ID=INIT
         MVI   WKFLAG,0              INITIALIZE STATUS FLAGS
         MVI   PRTCC,C' '            INITIALIZE PRINT I/O AREA
         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC
         CLI   MSTRCMD,$MSTRCLS      END-OF-JOB?
         BE    EXIT0000              YES
         MVC   WKDSP(DSPL),DSPI      INITIALIZE DSPSERV LIST FORM
         MVC   WKALESRV(ALESRVL),ALESRVI
         ITRACE ID=IDENTIFY
         MVC   WKFNC,IDENTIFY        LAST DIV FUNCTION REQUESTED
         XC    WKDIV(DIVL),WKDIV     CLEAR PARMLIST IN WORK AREA
         DIV   IDENTIFY,             IDENTIFY DIV OBJECT               +
               TYPE=DA,              .. PERMANENT TYPE                 +
               DDNAME=MASTER,        .. DDNAME                         +
               ID=WKOBJID,           .. DIV OBJECT ID RETURNED         +
               MF=(E,WKDIV)          .. EXECUTE FORM, LIST FORM ADDRESS
         STH   R15,WKRC              SAVE RETURN CODE
         LTR   R15,R15               SUCESSFUL?
         BNZ   ERR0010               NO
         OI    WKFLAG,$WKID          IDENTIFY COMPLETE
         ITRACE ID=ACCESS
         MVC   WKFNC,ACCESS          LAST FUNCTION ATTEMPTED
         XC    WKDIV(DIVL),WKDIV     CLEAR PARMLIST IN WORK AREA
         DIV   ACCESS,               CONNECT TO DIV OBJECT             +
               ID=WKOBJID,           .. OBJECT'S NAME                  +
               MODE=UPDATE,          .. WE'RE GOING TO UPDATE IT       +
               SIZE=WKOBJSZ,         .. REQUEST SIZE TO BE RETURNED    +
               MF=(E,WKDIV)          .. EXECUTE FORM, LIST FORM ADDRESS
         STH   R15,WKRC              SAVE RETURN CODE
         LTR   R15,R15               SUCESSFUL?
         BNZ   ERR0010               NO
         L     R1,WKOBJSZ            NUMBER OF BLOCKS IN MASTER FILE
         MH    R1,=Y(4096/REQBLOKL)  NUMBER OF RECORDS PER BLOCK
         ST    R1,COMMRECS           SET MAXIMUM RECORD IN COMM AREA
         OI    WKFLAG,$WKACC         ACCESS COMPLETE
         MVC   WKFNC,CREATE          FUNCTION ATTEMPTED
         ITRACE ID=CREATE
         DSPSERV CREATE,             CREATE A MASTER FILE DATASPACE    +
               NAME=MSTRDATA,        .. DATASPACE'S NAME               +
               STOKEN=WKSTOKEN,      .. RETURN SPACE TOKEN             +
               BLOCKS=WKOBJSZ,       .. DATA SPACE SIZE IN 4K BLOCKS   +
               MF=(E,WKDSP)
         STH   R15,WKRC              SAVE RETURN CODE
         LTR   R15,R15               SUCESSFUL?
         BNZ   ERR0020               NO
         OI    WKFLAG,$WKCRE         DATASPACE CREATE COMPLETE
         ITRACE ID=ALETADD
         MVC   WKFNC,ADD             FUNCTION ATTEMPTED
         ALESERV ADD,                ADD AN ENTRY TO ACCESS LIST       +
               STOKEN=WKSTOKEN,      .. DATA SPACE'S TOKEN             +
               ALET=WKALET,          .. RETURNED ALET                  +
               MF=(E,WKALESRV)       .. EXECUTE FORM, LIST FORM ADDRESS
         STH   R15,WKRC              SAVE RETURN CODE
         LTR   R15,R15               SUCESSFUL?
         BNZ   ERR0020               NO
         OI    WKFLAG,$WKALET        ALET COMPLETE
         MVC   WKFNC,MAP             FUNCTION ATTEMPTED
         ITRACE ID=MAP
         XC    WKDIV(DIVL),WKDIV     CLEAR PARMLIST IN WORK AREA
         DIV   MAP,                  ASSOCIATE DIV OBJECT WITH STORAGE +
               ID=WKOBJID,           .. DIV OBJECT NAME                +
               STOKEN=WKSTOKEN,      .. DATASPACE'S TOKEN              +
               AREA=ZERO,            .. STARTING AT ADDRESS ZERO       +
               OFFSET=*,             .. STARTING WITH BLOCK ZERO       +
               MF=(E,WKDIV)          .. EXECUTE FORM, LIST FORM ADDRESS
         STH   R15,WKRC              SAVE RETURN CODE
         LTR   R15,R15               SUCESSFUL?
         BNZ   ERR0010               NO
         OI    WKFLAG,$WKMAP         MAP COMPLETE
         B     MSTR0010
MSTR0000 DS    0H
         ST    R13,4(R1)             SAVE CALLER'S SAVE AREA ADDRESS
         ST    R1,8(R13)             CHAIN OUR WORK AREA TO CALLER'S
         LR    R13,R1                SET WORK AREA BASE
MSTR0010 DS    0H
         ITRACE ID=ENTRY,                                              +
               RDATA1=R9,            .. ADDRESS OF REQUEST BLOCK       +
               DATA2=MSTRREQ         .. DATA IN REQUEST BLOCK
         CLI   MSTRCMD,$MSTRCLS      SHUTDOWN?
         BE    EXIT0000              YES.. EXIT
         CLI   MSTRCMD,$MSTROPN      OPEN?
         BE    EXIT0060              YES.. EXIT
MSTR0020 DS    0H
         SR    R2,R2                 CLEAR REGISTER
         ICM   R2,3,MSTRREC#         RECORD NUMBER REFERENCED
         MH    R2,=Y(REQBLOKL)       DISPLACEMENT TO RECORD REFERENCED
         LAM   R2,R2,WKALET          DATASPACE'S ALET
         LA    R3,REQBLOKL           DATA LENGTH
         LA    R4,MSTRRECD           USER'S I/O AREA ADDRESS
         LR    R5,R3                 DATA LENGTH
         CLI   MSTRCMD,$MSTRRD       READ A RECORD?
         BE    MSTR0030              YES
         CLI   MSTRCMD,$MSTRWRT      WRITE A RECORD?
         BE    MSTR0040              YES
         ABEND $U0006,DUMP,,USER
MSTR0030 DS    0H
         ITRACE ID=READ
         SAC   512                   SWITCH TO AR MODE
         MVCL  R4,R2                 COPY DATA TO USER
         SAC   0                     RETURN TO PRIMARY MODE
         B     EXIT0060              AND EXIT
MSTR0040 DS    0H
         ITRACE ID=WRITE
         SAC   512                   SWITCH TO AR MODE
         MVCL  R2,R4                 COPY DATA TO DATASPACE
         SAC   0                     RETURN TO PRIMARY MODE
         XC    WKDIV(DIVL),WKDIV     CLEAR PARMLIST IN WORK AREA
         DIV   SAVE,                 SAVE CHANGES                      +
               ID=WKOBJID,           .. DIV OBJECT'S NAME              +
               MF=(E,WKDIV)          .. EXECUTE FORM, LIST FORM ADDRESS
         STH   R15,WKRC              SAVE RETURN CODE
         LTR   R15,R15               SAVE SUCCESSFUL?
         BNZ   ERR0010               NO
         B     EXIT0060              EXIT
* ------------------------------------------------------------------- *
*        ERROR ROUTINES                                               *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         ITRACE ID=DIVERROR,         DIV ERROR                         +
               DATA1=WKFNC,          .. FUNCTION ATTEMPTED             +
               RDATA2=R15            .. RETURN CODE
         MVC   PRTMSGID(MSG01L),MSG01
         MVC   PRTMSGID+(MSG01-MSG01F)(L'MSG01F),WKFNC
         UNPK  PRTMSGID+(MSG01-MSG01R)(5),WKRC(3)
         MVZ   PRTMSGID+(MSG01-MSG01R)(4),HEX0000
         TR    PRTMSGID+(MSG01-MSG01R)(4),HEXCHAR
         MVI   PRTMSGID+(MSG01-MSG01R)+4,C' '
         BAL   R8,PRT0000            PRINT THE MESSAGE
         ABEND $U0007,DUMP,,USER
ERR0020  DS    0H
         ITRACE ID=DSPERROR,         DIV ERROR                         +
               DATA1=WKFNC,          .. FUNCTION ATTEMPTED             +
               RDATA2=R15            .. RETURN CODE
         MVC   PRTMSGID(MSG02L),MSG02
         MVC   PRTMSGID+(MSG02-MSG02F)(L'MSG02F),WKFNC
         UNPK  PRTMSGID+(MSG02-MSG02R)(5),WKRC(3)
         MVZ   PRTMSGID+(MSG02-MSG02R)(4),HEX0000
         TR    PRTMSGID+(MSG02-MSG02R)(4),HEXCHAR
         MVI   PRTMSGID+(MSG02-MSG02R)+4,C' '
         BAL   R8,PRT0000            PRINT THE MESSAGE
         ABEND $U0010,DUMP,,USER
ERR0030  DS    0H
         ITRACE ID=ALEERROR,         DIV ERROR                         +
               DATA1=WKFNC,          .. FUNCTION ATTEMPTED             +
               RDATA2=R15            .. RETURN CODE
         MVC   PRTMSGID(MSG03L),MSG03
         MVC   PRTMSGID+(MSG03-MSG03F)(L'MSG03F),WKFNC
         UNPK  PRTMSGID+(MSG03-MSG03R)(5),WKRC(3)
         MVZ   PRTMSGID+(MSG03-MSG03R)(4),HEX0000
         TR    PRTMSGID+(MSG03-MSG03R)(4),HEXCHAR
         MVI   PRTMSGID+(MSG03-MSG03R)+4,C' '
         BAL   R8,PRT0000            PRINT THE MESSAGE
         ABEND $U0011,DUMP,,USER
* ------------------------------------------------------------------- *
*        PRINTING                                                     *
* ------------------------------------------------------------------- *
PRT0000  DS    0H
         FXCALL PRTQ,PRINT           ADD REQUEST TO PRINT QUEUE
         BR    R8                    RETURN
* ------------------------------------------------------------------- *
*        EXIT                                                         *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         TM    WKFLAG,$WKMAP         MAP FUNCTION COMPLETE?
         BNO   EXIT0010              NO
         NI    WKFLAG,255-$WKMAP     PREVENT LOOP DURING EXIT
         MVC   WKFNC,UNMAP           FUNCTION ATTEMPTED
         ITRACE ID=UNMAP
         XC    WKDIV(DIVL),WKDIV     CLEAR PARMLIST IN WORK AREA
         DIV   UNMAP,                UNMAP DIV OBJECT                  +
               ID=WKOBJID,           .. DIV OBJECT NAME                +
               AREA=ZERO,            .. STARTING AT ADDRESS ZERO       +
               STOKEN=WKSTOKEN,      .. DATASPACE'S TOKEN              +
               MF=(E,WKDIV)          .. EXECUTE FORM, LIST FORM ADDRESS
         STH   R15,WKRC              SAVE RETURN CODE
         LTR   R15,R15               SUCESSFUL?
         BNZ   ERR0010               NO
EXIT0010 DS    0H
         TM    WKFLAG,$WKACC         ACCESS FUNCTION COMPLETE?
         BNO   EXIT0020              NO
         NI    WKFLAG,255-$WKACC     PREVENT LOOP DURING EXIT
         MVC   WKFNC,UNACC           FUNCTION ATTEMPTED
         ITRACE ID=UNACC
         XC    WKDIV(DIVL),WKDIV     CLEAR PARMLIST IN WORK AREA
         DIV   UNACCESS,             RELEASE ACCESS                    +
               ID=WKOBJID,           .. DIV OBJECT NAME                +
               MF=(E,WKDIV)          .. EXECUTE FORM, LIST FORM ADDRESS
         STH   R15,WKRC              SAVE RETURN CODE
         LTR   R15,R15               SUCESSFUL?
         BNZ   ERR0010               NO
EXIT0020 DS    0H
         TM    WKFLAG,$WKID          ACCESS FUNCTION COMPLETE?
         BNO   EXIT0030              NO
         NI    WKFLAG,255-$WKID      PREVENT LOOP DURING EXIT
         MVC   WKFNC,UNID            FUNCTION ATTEMPTED
         ITRACE ID=UNID
         XC    WKDIV(DIVL),WKDIV     CLEAR PARMLIST IN WORK AREA
         DIV   UNIDENTIFY,           DISCONNECT FROM OBJECT            +
               ID=WKOBJID,           .. DIV OBJECT NAME                +
               MF=(E,WKDIV)          .. EXECUTE FORM, LIST FORM ADDRESS
         STH   R15,WKRC              SAVE RETURN CODE
         LTR   R15,R15               SUCESSFUL?
         BNZ   ERR0010               NO
EXIT0030 DS    0H
         TM    WKFLAG,$WKALET        ALET FUNCTION COMPLETE?
         BNO   EXIT0040              NO
         NI    WKFLAG,255-$WKALET    PREVENT LOOP DURING EXIT
         MVC   WKFNC,DLETALET        FUNCTION ATTEMPTED
         ALESERV DELETE,             DELETE ALET ENTRY FOR DATASPACE   +
               ALET=WKALET,          .. ALET TO DELETE                 +
               MF=(E,WKALESRV)       .. EXECUTE FORM, LIST FORM ADDRESS
         STH   R15,WKRC              SAVE RETURN CODE
         LTR   R15,R15               SUCESSFUL?
         BNZ   ERR0030               NO
EXIT0040 DS    0H
         TM    WKFLAG,$WKCRE         DATASPACE CREATED?
         BNO   EXIT0050              NO
         NI    WKFLAG,255-$WKCRE     PREVENT LOOP DURING EXIT
         MVC   WKFNC,DLETDSPC        FUNCTION ATTEMPTED
         DSPSERV DELETE,             DELETE DATASPACE                  +
               STOKEN=WKSTOKEN,      .. DATASPACE'S SPACE TOKEN        +
               MF=(E,WKDSP)          .. EXECUTE FORM, LIST FORM ADDRESS
         STH   R15,WKRC              SAVE RETURN CODE
         LTR   R15,R15               SUCESSFUL?
         BNZ   ERR0020               NO
EXIT0050 DS    0H
         ITRACE ID=EXIT
         LR    R1,R13                COPY WORK AREA ADDRESS
         L     R13,4(R13)            RESTORE CALLER'S SAVE AREA ADDRESS
         FREEMAIN RU,A=(1),LV=WKL    FREEMAIN WORK AREA
         XC    COMMIOWK,COMMIOWK     CLEAR ADDRESS IN COMM AREA
         B     EXIT0070
EXIT0060 DS    0H
         ITRACE ID=EXIT              EXITING MASTER FILE I/O MODULE
         L     R13,4(R13)            RESTORE REGISTER 13
EXIT0070 DS    0H
         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS
         SR    R15,R15               GIVE GOOD RETURN CODE
         BR    R14                   RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
ZERO     DC    F'0'
HEX0000  DC    8X'00'
HEXCHAR  DC    C'0123456789ABCDEF'
IDENTIFY DC    CL8'IDENTIFY'
ACCESS   DC    CL8'ACCESS'
CREATE   DC    CL8'CREATE'
ADD      DC    CL8'ADD'
MAP      DC    CL8'MAP'
UNMAP    DC    CL8'UNMAP'
UNACC    DC    CL8'UNACC'
UNID     DC    CL8'UNID'
DLETALET DC    CL8'DLETALET'
DLETDSPC DC    CL8'DLETDSPC'
MSTRDATA DC    CL8'MSTRDATA'         NAME OF MASTER FILE DATASPACE
MASTER   DC    AL1(6),CL8'MASTER'    MASTER FILE DDNAME
DIVI     DIV   IDENTIFY,             CONNECT TO MASTER FILE            +
               TYPE=DA,              .. PERMANENT TYPE                 +
               ID=*,                 .. RETURNED OBJECT ID             +
               DDNAME=MASTER,        .. DIV DATASET'S DD NAME          +
               MF=L                  .. MACRO FORM
DIVL     EQU   *-DIVI                DIV FUNCTIONS LIST FORM
DSPI     DSPSERV MF=(L,DSP)          DATASPACE SERVICES LIST FORM
ALESRVI  ALESERV MF=L
ALESRVL  EQU   *-ALESRVI
MSG01    DS    0C
         DC    CL11'FXSMSTR01E'
         DC    C'DIV FUNCTION'
MSG01F   DC    CL8' '
         DC    C' FAILED, R15='
MSG01R   DC    CL4' '
         DC    C' '
MSG01L   EQU   *-MSG01
MSG02    DS    0C
         DC    CL11'FXSMSTR02E'
         DC    C'DSPSERV FUNCTION FAILED '
MSG02F   DC    CL8' '
         DC    C' FAILED, R15='
MSG02R   DC    CL4' '
         DC    C' '
MSG02L   EQU   *-MSG02
MSG03    DS    0C
         DC    CL11'FXSMSTR03E'
         DC    C'ALESERV FUNCTION '
MSG03F   DC    CL8' '
         DC    C' FAILED, R15='
MSG03R   DC    CL4' '
         DC    C' '
MSG03L   EQU   *-MSG03
         LTORG
* ------------------------------------------------------------------- *
*                                                                     *
*        WORK AREAS                                                   *
*                                                                     *
* ------------------------------------------------------------------- *
WK       DSECT
WKSAVE   DS    18F                   REGISTER SAVE AREA
WKDIV    DS    (DIVL)X               DIV LIST FORM
WKDSP    DS    (DSPL)X               DSPSERV LIST FORM
WKALESRV DS    (ALESRVL)X            ALESERV LIST FORM
WKOBJSZ  DS    F                     DIV OBJECT SIZE IN PAGES
WKALET   DS    F                     DATASPACE'S ALET
WKRC     DS    H                     DIV RETURN CODE
WKSTOKEN DS    CL8                   DATASPACE'S SPACE TOKEN
WKOBJID  DS    CL8                   GENERATED DIV OBJECT NAME
WKFNC    DS    CL8                   LAST DIV OR DSPSERV FUNCTION
WKFLAG   DS    X                     STATUS FLAGS
$WKID    EQU   X'80'                 .. IDENTIFY COMPLETE
$WKACC   EQU   X'40'                 .. ACCESS COMPLETE
$WKCRE   EQU   X'20'                 .. DATASPACE CREATE COMPLETE
$WKALET  EQU   X'10'                 .. ALET COMPLETE
$WKMAP   EQU   X'08'                 .. MAP COMPLETE
         PRTBLOK DSECT=NO
WKL      EQU   *-WK
* ------------------------------------------------------------------- *
*              MASTER FILE RECORD                                     *
* ------------------------------------------------------------------- *
         REQBLOK DSECT=YES
* ------------------------------------------------------------------- *
*              MASTER FILE REQUEST                                    *
* ------------------------------------------------------------------- *
         MSTRREQ DSECT=YES
* ------------------------------------------------------------------- *
*              COMMON DATA MAP                                        *
* ------------------------------------------------------------------- *
         FXSCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*              EQUATES                                                *
* ------------------------------------------------------------------- *
         COPY REGEQU
         ABCODES
