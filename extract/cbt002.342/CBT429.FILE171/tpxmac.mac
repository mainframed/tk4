./ ADD NAME=ABCODES  0100-95102-95102-1953-00030-00030-00000-TPXEXIT
         MACRO
         ABCODES
* ------------------------------------------------------------------- *
*                                                                     *
*           TPX STC ABEND CODES                                       *
*                                                                     *
* ------------------------------------------------------------------- *
$U0001   EQU  1        SYSPRINT DD STATEMENT NOT PRESENT
$U0002   EQU  2
$U0003   EQU  3        ATTACH FOR PRINT SUBTASK FAILED
$U0004   EQU  4        ABEND REQUESTED VIA CONTROL STATEMENTS
$U0005   EQU  5        RECVFMH5 FAILED IN ATTENTION EXIT
$U0006   EQU  6        ADD CONVBLOK FAILED IN ATTENTION EXIT
$U0007   EQU  7        INVALID COMMAND PASSED TO TPXCONV
$U0008   EQU  8        TPXCONV COULD NOT LOCATE REQUESTED CONVBLOK
$U0009   EQU  9        INVALID COMMAND PASSED TO TPXVSUB
$U0010   EQU  10       CONVERSATION IN AN UNKOWN STATE IN TPXVTAM
$U0011   EQU  11       UNKNOWN RECORD TYPE RECEIVED BY TPXVTAM
$U0012   EQU  12       DE-ALLOCATE FAILED IN TPXVTAM
$U0013   EQU  13       RACROUTE ENVIR=VERIFY FAILED IN TPXVTAM
$U0014   EQU  14       RACROUTE ENVIR=DELETE FAILED IN TPXVTAM
$U0015   EQU  15       ACB OPEN ERROR
* ------------------------------------------------------------------- *
*                                                                     *
*           TPX LOGON/LOGOFF EXIT ABEND CODES                         *
*                                                                     *
* ------------------------------------------------------------------- *
$U1000   EQU  1000     CNOS RECEIVED BY LOGON EXIT
$U1001   EQU  1001     FMH5 RECEIVED BY LOGON EXIT
         MEND
./ ADD NAME=AUTHREC  0100-95102-95102-1953-00014-00014-00000-TPXEXIT
AUTHREC  DS      0H
AUTHLL   DS      H               LENGTH OF AUTH RECORD
AUTHAUTH DS      CL4             RECORD IDENTIFIER
AUTHUIDL DS      X               LENGTH OF USER ID
AUTHUID  DS      CL8             USERID
AUTHPSWL DS      X               LENGTH OF PASSWORD
AUTHPSWD DS      CL8             PASSWORD
AUTHNPSL DS      X               LENGTH OF NEW PASSWORD
AUTHNPSW DS      CL8             NEW PASSWORD
AUTHTERM DS      CL8             USER'S TERMINAL ID
AUTHSTAT DS      X               STATUS RETURNED BY STC
AUTHRTCD DS      XL4             RACF RETURN CODE
AUTHRSCD DS      XL4             RACF REASON CODE
AUTHRECL EQU     *-AUTHREC
./ ADD NAME=AUTHSTAT 0100-95102-95102-1953-00023-00023-00000-TPXEXIT
         MACRO
         AUTHSTAT &RTCD=,&RSCD=,&EXITCD=,&MSG=
         AIF   (T'&RSCD EQ 'O').LBL0010
         DC    AL1($STATRS)       FLAGS
         AGO   .LBL0020
.LBL0010 ANOP
         DC    AL1(0)             FLAGS
.LBL0020 ANOP
         DC    AL4(X'&RTCD')         RETURN CODE
         AIF   (T'&RSCD EQ 'O').LBL0030
         DC    AL4(X'&RSCD')         REASON CODE
         AGO   .LBL0040
.LBL0030 ANOP
         DC    AL4(0)             REASON CODE DOES NOT APPLY
.LBL0040 ANOP
         DC    AL1(&EXITCD)       CODE EXIT SHOULD EXIT WITH
         AIF   (T'&MSG EQ 'O').LBL0050
         DC    CL80&MSG           MESSAGE
         AGO   .LBL0060
.LBL0050 ANOP
         DC    CL80' '            NO MESSAGE
.LBL0060 ANOP
         MEND
./ ADD NAME=CONVBLOK 0100-95102-95102-1953-00050-00050-00000-TPXEXIT
         MACRO
         CONVBLOK &DSECT=
* ------------------------------------------------------------------- *
*                                                                     *
*      VTAM COMMUNICATION STATUS BLOCK                                *
*                                                                     *
*      CONVBLOK's are chained from SUTLCOMM.                          *
*                                                                     *
*      CONVBLOKs are created when the ATTN exit is driven with an     *
*      FMH-5.  As soon as the FMH-5 is processed, the VTAM module,    *
*      SUTLVTAM, will issue the first RECEIVE on the conversation.    *
*      When the user ends the conversation, we will receive a         *
*      DEALLOC indicator in the RPL6.  When the DEALLOC is received   *
*      the CONVBLOK will be freed.                                    *
*                                                                     *
* ------------------------------------------------------------------- *
         AIF  (T'&DSECT EQ 'O').ERR0010
         AIF  ('&DSECT' EQ 'NO').CSECT00
         AIF  ('&DSECT' EQ 'YES').DSECT00
         MNOTE 12,'INVALID ''DSECT'', MUST BE ''YES'' OR ''NO'' '
         MEXIT
.ERR0010 ANOP
         MNOTE 12,'''DSECT'' PARAMETER IS REQUIRED'
         MEXIT
.CSECT00 ANOP
CONVBLOK DS   0F
         AGO  .COMMON
.DSECT00 ANOP
CONVBLOK DSECT
.COMMON  ANOP
CONVNEXT DS   A                    NEXT CONVERSATION BLOCK ADDRESS
CONVPREV DS   A                    PREVIOUS CONVERSATION BLOCK ADDRESS
CONVEYE  DS   CL8                  EYECATCHER
CONVECB  DS   A                    ECB FOR THIS CONVERSATION
CONVRPL  DS   A                    RPL'S ADDRESS
CONVRPLX DS   A                    RPL EXTENSION'S ADDRESS
CONVIOA  DS   A                    I/O AREA ADDRESS
CONVSTAT DS   X                    CONVERSATION STATUS
$CONVERR EQU  X'80'                .. ERROR HAS OCCURRED
$CONVEOJ EQU  X'40'                .. EOJ REQUESTED
CONVFUNC DS   C                    LAST FUNCTION ON THIS CONVERSATION
$CONVFR  EQU  C'R'                 .. VTAM RECEIVE
$CONVFS  EQU  C'S'                 .. VTAM SEND
$CONVFD  EQU  C'D'                 .. DEALLOCATE SESSION
CONVLU   DS   CL8                  PARTNER'S LU NAME
CONVCID  DS   CL4                  CONVERSATION ID
CONVUSER DS   CL8                  USER'S RACF ID
CONVAUTH DS   X                    USER'S AUTHORITY LEVEL
CONVL    EQU  *-CONVBLOK
         MEND
./ ADD NAME=CONVREQ  0100-95102-95102-1953-00014-00014-00000-TPXEXIT
         MACRO
         CONVREQ &DSECT=YES
         AIF   ('&DSECT' EQ 'NO').LBL0010
CONVREQ  DSECT
         AGO  .LBL0020
.LBL0010 ANOP
CONVREQ  DS   0A
.LBL0020 ANOP
CONVADDR DS   A                   CONVERSATION BLOCK'S ADDRESS
CONVCMD  DS   X                   COMMAND
$CONVADD EQU  X'01'               .. ADD A NEW CONVERSATION BLOCK
$CONVDEL EQU  X'02'               .. DELETE A CONERSATION BLOCK
CONVREQL EQU  *-CONVREQ
         MEND
./ ADD NAME=EXITGBL  0100-95102-95102-1953-00122-00122-00000-TPXEXIT
         MACRO
         EXITGBL  &TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
*                 USER EXIT GLOBAL DATA                               *
*                                                                     *
* ------------------------------------------------------------------- *
         AIF    ('&TYPE' EQ 'DSECT').DSECT00
EXITGBL  CSECT
         USING    EXITGBL,R9     DEFINE BASE
         AGO      .COMM00
.DSECT00 ANOP
EXITGBL  DSECT
.COMM00  ANOP
GBLSTC   DC    AL4(0)             STARTED TASK NAME CHAIN ANCHOR
GBLSTAT  DC    X'00'              STATUS
$ATTN    EQU   X'80'              .. ATTENTION EXIT IS PRESENT
$LERAD   EQU   X'40'              .. LERAD EXIT IS PRESENT
$OPEN    EQU   X'20'              .. ACB IS OPEN
GBLERROR DC    X'00'              ERROR INDICATOR
$XLERAD  EQU   X'01'              .. LERAD EXIT NOT AVAILABLE
$XATTN   EQU   X'02'              .. ATTENTION EXIT NOT AVAILABLE
$XOPEN   EQU   X'04'              .. ACB OPEN ERROR OCCURRED
$XSYS    EQU   X'08'              .. COULD NOT DETERMINE SYSTEM
GBLCID   DC    XL4'00'            OUR CONVERSATION ID
GBLAPPL  DC    X'00'              EXIT APPLID LENGTH
GBLAPPN  DC    CL8' '             EXIT APPLID
COMMBLKS DC    CL80' '            CONSTANT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
GBLACB   ACB   AM=VTAM,           GENERATE VTAM ACB                    +
               MACRF=LOGON,                                            +
               EXLST=*,                                                +
               APPLID=*
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
GBLEXLST EXLST AM=VTAM,           GENERATE VTAM EXIT LIST              +
               ATTN=*,                                                 +
               LERAD=*
* ------------------------------------------------------------------- *
*              TRACE CONTROL                                          *
* ------------------------------------------------------------------- *
         DC    CL4'BASE'          BASE ADDRESS OF TRACE TABLE
TRADDR   DC    A(0)
         DC    CL4'1STX'          FIRST TRACE TABLE ENTRY ADDRESS
TRFIRST  DC    A(0)
         DC    CL4'LAST'          LAST TRACE TABLE ENTRY ADDRESS
TRLAST   DC    A(0)
         DC    CL4'CURR'          CURRENT (LAST USED) ENTRY ADDRESS
TRCURR   DC    A(0)
TRDATA1  DC    CL8' '
TRDATA2  DC    CL8' '
*---------------------------------------------------------------------*
*                                                                     *
*          ADD TRACE ENTRY                                            *
*                                                                     *
*  During program initialization EXITMAIN acquires storage for the    *
*  trace table and sets TRFIRST, TRLAST, and TRCURR.  EXITMAIN        *
*  also sets R11 to the address of TPXCOMM and all other modules      *
*  depend on this remaining unchanged.  Any module except this        *
*  module may call the trace routine.  Macro ITRACE generates the     *
*  calling sequence.  R14 is the only register altered by the trace   *
*  macro.                                                             *
*                                                                     *
*  The trace table is a "wrap-around" table.  TRFIRST is the first    *
*  entry's address, TRLAST is the last entry's address, and           *
*  TRCURR is the address of the last entry added to the table.        *
*  When a trace entry is added to the table, the calling module's     *
*  name, an 8-byte ID, and up to 2 8-byte fields are captured.        *
*                                                                     *
*                                                                     *
*                                                                     *
*      This code depends on:                                          *
*           R9   'EXITGBL' address                                    *
*           R12  current module's base address                        *
*           R14  trace id's address and R14 + 8 will be the return    *
*                address                                              *
*                                                                     *
*---------------------------------------------------------------------*
TRACE000 DS    0H
         USING MODPRFX,R12         DEFINE BASE
         USING TRENTRY,R8          DEFINE BASE
         STM   R14,R12,12(R13)     SAVE ALL REGISTERS
TRACE010 DS    0H
         ICM   R8,15,TRCURR        CURRENT TRACE ENTRY
         BZ    TRACE030            NO TRACE TABLE
         LR    R2,R8               SAVE STARTING VALUE
         OC    0(TRENTRYL,R8),0(R8)    EMPTY ENTRY?
         BZ    TRACE020            YES.. USE THIS ENTRY
         LA    R8,TRENTRYL(R8)     NEXT TRACE ENTRY
         C     R8,TRLAST           BEYOND END OF TABLE?
         BNH   TRACE020            NO
         L     R8,TRFIRST          'WRAP' TRACE TABLE
TRACE020 DS    0H
         CS    R2,R8,TRCURR        ALLOCATE THE ENTRY
         BNE   TRACE010            CHANGED.. TRY AGAIN
         ST    R8,TRCURR           SAVE CURRENT TRACE ENTRY ADDRESS
         MVC   TREMOD,PFXMODNM     COPY MODULE NAME
         MVC   TREID,0(R14)        COPY TRACE ID
         MVC   TREDATA1,TRDATA1    COPY TRACE DATA 1
         MVC   TREDATA2,TRDATA2    COPY TRACE DATA 2
         XC    TRDATA1,TRDATA1     CLEAR TRACE DATA
         XC    TRDATA2,TRDATA2     CLEAR TRACE DATA
TRACE030 DS    0H
         LM    R14,R12,12(R13)     RESTORE ALL REGISTERS
         B     8(R14)              RETURN
GBLL     EQU      *-EXITGBL
*---------------------------------------------------------------------*
*                                                                     *
*          TRACE TABLE ENTRY                                          *
*                                                                     *
*---------------------------------------------------------------------*
TRENTRY  DSECT
TREMOD   DS    CL8                 MODULE NAME
TREID    DS    CL8                 TRACE ID
TREDATA1 DS    CL8                 TRACE DATA 1
TREDATA2 DS    CL8                 TRACE DATA 2
TRENTRYL EQU   *-TRENTRY           ENTRY LENGTH
         EXITPRFX TYPE=DSECT
         MEND
./ ADD NAME=EXITPRFX 0100-95102-95102-1953-00042-00042-00000-TPXEXIT
.* ------------------------------------------------------------------ *
.*                                                                    *
.*       All modules start with a common prefix set of instructions   *
.*       and eyecatcher.  This allows the trace routine to determine  *
.*       which module is in control.                                  *
.*                                                                    *
.* ------------------------------------------------------------------ *
         MACRO
&NAME    EXITPRFX &DESC,                                               +
               &TYPE=CSECT
         AIF   ('&TYPE' EQ 'DSECT').L0010
         AIF   (T'&DESC EQ 'O').ERR0010
         AIF   (T'&NAME EQ 'O').ERR0020
EXIT&NAME CSECT
         USING EXIT&NAME,R12
         USING EXITGBL,R9
         STM   R14,R12,12(R13)     SAVE ENTRY REGISTERS
         LR    R12,R15             LOAD PERMANENT BASE
         B     @@000001            BYPASS ID/TIME/DESCRIPTION
MODID    DC    CL8'EXIT&NAME'      MODULE NAME
         DC    CL8'&SYSDATE'       DATE OF ASSEMBLY
         DC    CL6'&SYSTIME'       TIME OF ASSEMBLY
         DC    C&DESC
@@000001 DS    0H
         MEXIT
.L0010   ANOP
MODPRFX  DSECT
         STM   R14,R12,12(R13)     SAVE ENTRY REGISTERS
         LR    R12,R15             LOAD PERMANENT BASE
         B     0(R0)               BRANCH AROUND MOD NAME/TIME/DESC
PFXMODNM DS    CL8                 MODULE NAME
PFXMODDT DS    CL8                 ASSEMBLY DATE
PFXMODTM DS    CL6                 ASSEMBLY TIME
PFXMODDS DS    C                   DESCRIPTION
         MEXIT
.ERR0010 ANOP
         MNOTE 12,'DESCRIPTION IS REQUIRED'
         MEXIT
.ERR0020 ANOP
         MNOTE 12,'CSECT NAME IS REQUIRED'
         MEXIT
         MEND
./ ADD NAME=FMH5     0100-95102-95102-1953-00035-00035-00000-TPXEXIT
         MACRO
         FMH5  &DSECT=,&TRAN=
         LCLA  &LEN
         AIF   ('&DSECT' EQ 'YES').DSECT00
         AIF   ('&DSECT' EQ 'NO').CSECT00
         MNOTE 12,'''DSECT'' IS INVALID, MUST BE ''YES'' OR ''NO'' '
         MEXIT
.DSECT00 ANOP
FMH5     DSECT
         AGO   .COMM
.CSECT00 ANOP
FMH5     DS    0A
.COMM    ANOP
         DC    AL1(FMH5L)            FMH LENGTH
         DC    X'05'                 FMH TYPE
         DC    XL2'02FF'             ATTACH COMMAND CODE
         DC    X'00'                 FLAG BYTE
         DC    X'03'                 LENGTH OF FIXED PARAMETERS FIELD
         DC    X'D0'                 CONVERSATION TYPE (BASIC)
         DC    X'00'                 RESERVED
         DC    X'40'                 ALLOW CONFIRMS
         AIF   ('&DSECT' EQ 'YES').DSECT01
&LEN     SETA  K'&TRAN
FMH5TRNL DC    AL1(&LEN)             TRANSACTION NAME LENGTH
FMH5TRAN DC    C'&TRAN'              TRANSACTION NAME
         AGO   .CSECT01
.DSECT01 ANOP
FMH5TRNL DS    X                     TRANSACTION NAME LENGTH
FMH5TRAN DS    CL8                   TRANSACTION NAME
.CSECT01 ANOP
         DC    X'00'                 LENGTH OF SECURITY INFORMATION
         DC    X'00'                 LENGTH OF LUW IDENTIFIER
         DC    X'00'                 LENGTH OF CONVERSATION CORRELATOR
FMH5L    EQU   *-FMH5                FMH LENGTH
         MEND
./ ADD NAME=ITRACE   0100-95102-95102-1953-00071-00071-00000-TPXEXIT
.* ------------------------------------------------------------------*
.*                                                                   *
.*                        TRACE MACRO                                *
.*                                                                   *
.*       THE TRACE FUNCTION ALWAYS CAPTURES THE CSECT NAME (TAKEN    *
.*       FROM THE MODULE PREFIX DATA) AND A TRACE ID (SPECIFIED ON   *
.*       THIS MACRO OR "**NOID**" IF THE ID PARAMETER IS OMITTED.    *
.*                                                                   *
.*       ONE OR TWO DATA ELEMENTS (8 BYTES EACH) MAY BE CAPTURED AT  *
.*       ANY TRACE POINT.  THE DATA TO BE CAPTURED MAY BE SPECIFIED  *
.*       IN EITHER OF TWO WAYS: DATA1 OR RDATA1 AND DATA2 OR RDATA2. *
.*       DATA1 AND RDATA1 ARE MUTUALLY EXCLUSIVE AS ARE DATA2 AND    *
.*       RDATA2.  DATA1 AND DATA2 SPECIFY THE ADDRESS OF DATA TO BE  *
.*       CAPTURED, RDATA1 AND RDATA2 SPECIFY A REGISTER WHOSE        *
.*       CONTENTS ARE TO BE CAPTURED.                                *
.*                                                                   *
.*       FOR EXAMPLE:                                                *
.*                                                                   *
.*                 ITRACE ID=POINTA,DATA1=VALUE1,RDATA2=R4           *
.*                                                                   *
.*          IN THIS CASE THE TRACE ENTRY WOULD INCLUDE THE CSECT     *
.*          NAME, THE ID DATA "POINTA", 8 BYTES OF DATA BEGINNING    *
.*          AT VALUE1'S ADDRESS AND THE CONTENTS OF REGISTER 4.      *
.*                                                                   *
.* ------------------------------------------------------------------*
         MACRO
&NAME    ITRACE &ID=,&DATA1=,&DATA2=,&RDATA1=,&RDATA2=
         GBLC  &TROPT
         AIF   (T'&DATA1 NE 'O' AND T'&RDATA1 NE 'O').ERR0010
         AIF   (T'&DATA2 NE 'O' AND T'&RDATA2 NE 'O').ERR0020
         AIF   ('&TROPT' EQ 'OFF').MEXIT
         AIF   (T'&DATA1 EQ 'O').DATA020
         AIF   ('&DATA1'(1,1) EQ '(').DATA010
         LA    R14,&DATA1         DATA ADDRESS
         MVC   TRDATA1,0(R14)     MOVE DATA
         AGO   .DATA030
.DATA010 ANOP
         MVC   TRDATA1,0&DATA1    MOVE DATA
         AGO   .DATA030
.DATA020 ANOP
         AIF   (T'&RDATA1 EQ 'O').DATA030
         STCM  &RDATA1,15,TRDATA1
.DATA030 ANOP
         AIF   (T'&DATA2 EQ 'O').DATA050
         AIF   ('&DATA2'(1,1) EQ '(').DATA040
         LA    R14,&DATA2         DATA ADDRESS
         MVC   TRDATA2,0(R14)     MOVE DATA
         AGO   .DATA060
.DATA040 ANOP
         MVC   TRDATA2,0&DATA2    MOVE DATA
         AGO   .DATA060
.DATA050 ANOP
         AIF   (T'&RDATA2 EQ 'O').DATA060
         STCM  &RDATA2,15,TRDATA2
.DATA060 ANOP
         BAL   R14,TRACE000       ENTER TRACE ROUTINE
         AIF      (T'&ID EQ 'O').NOID
&NAME    DC    CL8'&ID'           TRACE ID
         AGO   .ID
.NOID    ANOP
&NAME    DC    CL8'**NOID**'
.ID      ANOP
         MEXIT
.ERR0010 ANOP
         MNOTE 12,'DATA1 AND RDATA1 ARE MUTUALLY EXCLUSIVE'
         MEXIT
.ERR0020 ANOP
         MNOTE 12,'DATA2 AND RDATA2 ARE MUTUALLY EXCLUSIVE'
.MEXIT   ANOP
         MEXIT
         MEND
./ ADD NAME=MOD      0100-95102-95102-1953-00022-00022-00000-TPXEXIT
         MACRO
         MOD   &NAME,&LABEL,&TYPE=DEFINE
         GBLC  &MODTYPE
         AIF   ('&TYPE' EQ 'MAIN').MOD0030
         AIF   ('&TYPE' EQ 'DSECT').MOD0040
         DC    CL8'&NAME'         FUNCTION IDENTIFIER
         AIF   ('&MODTYPE' EQ 'DSECT').MOD0020
         AIF   ('&NAME' EQ 'TPXPRTS').MOD0010
         DC    VL4(&NAME)         ENTRY POINT ADDRESS
         MEXIT
.MOD0010 ANOP
         DC    AL4(0)             ENTRY POINT ADDRESS
         MEXIT
.MOD0020 ANOP
&LABEL   DC    AL4(0)             ENTRY POINT ADDRESS
         MEXIT
.MOD0030 ANOP
&MODTYPE SETC  'MAIN'
         MEXIT
.MOD0040 ANOP
&MODTYPE SETC  'DSECT'
         MEND
./ ADD NAME=PRTBLOK  0100-95102-95102-1953-00024-00024-00000-TPXEXIT
*---------------------------------------------------------------------*
*                                                                     *
*        PRINTER REQUEST BLOCK                                        *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         PRTBLOK &DSECT=YES
         AIF   ('&DSECT' EQ 'YES').LBL0010
PRTBLOK  DS    0A
         AGO   .LBL0020
.LBL0010 ANOP
PRTBLOK  DSECT
.LBL0020 ANOP
PRTEYE   DS    CL8                 EYECATCHER
PRTNEXT  DS    A                   NEXT BLOCK ON THE CHAIN
PRTCMD   DS    C                   COMMAND
$PRTHEAD EQU   C'H'                .. PRINT HEADING
$PRTPRT  EQU   C'P'                .. PRINT
$PRTASIS EQU   C'A'                .. PRINT AS IS (NO COMPRESSION)
PRTCC    DS    C                   CARRIAGE CONTROL
PRTMSGID DS    CL11                MESSAGE ID
PRTDATA  DS    CL120               PRINT DATA
PRTBLOKL EQU   *-PRTBLOK
         MEND
./ ADD NAME=REGEQU   0100-95102-95102-1953-00016-00016-00000-TPXEXIT
R0       EQU    0
R1       EQU    1
R2       EQU    2
R3       EQU    3
R4       EQU    4
R5       EQU    5
R6       EQU    6
R7       EQU    7
R8       EQU    8
R9       EQU    9
R10      EQU    10
R11      EQU    11
R12      EQU    12
R13      EQU    13
R14      EQU    14
R15      EQU    15
./ ADD NAME=STCDSCT  0100-95102-95102-1953-00010-00010-00000-TPXEXIT
STCDSCT  DSECT
STCNEXT  DS   A                NEXT STC APPLID BLOCK ADDRESS
STCSTCK  DS   XL8              TIME STAMP OF LAST 'INQUIRE'
STCFLAG  DS   X                STC'S STATUS
$STCERR  EQU  X'80'            .. ERROR HAS OCCURRED
$STCXRDY EQU  X'40'            .. STC WAS NOT READY
$STCCNOS EQU  X'20'            .. CNOS HAS BEEN ISSUED
STCNAMEL DS   X                STC APPLID NAME LENGTH
STCNAME  DS   CL8              STC APPLID
STCDSCTL EQU  *-STCDSCT
./ ADD NAME=TPXCOMM  0100-95102-95102-1953-00160-00160-00000-TPXEXIT
*---------------------------------------------------------------------*
*                                                                     *
*          COMMON AREA MAPPING MACRO                                  *
*                                                                     *
*     This macro will generate either the 'common' module CSECT or    *
*     a DSECT to map the 'common' module.  'Common' is used for       *
*     constants and work areas that are required by several modules   *
*     allowing some elimination of duplicated data and to allow       *
*     inter-module communication.                                     *
*                                                                     *
*     The trace table code is also incorporated into the 'TPXCOMM'.   *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         TPXCOMM &TYPE=
         AIF   ('&TYPE' EQ 'CSECT').CSECT
         AIF   ('&TYPE' EQ 'DSECT').DSECT
         MNOTE 12,'INVALID TYPE'
         MEXIT
.CSECT   ANOP
TPXCOMM CSECT
TPXCOMM AMODE 31
TPXCOMM RMODE ANY
         AGO   .NODSECT
.DSECT   ANOP
TPXCOMM DSECT
.NODSECT ANOP
*---------------------------------------------------------------------*
*                                                                     *
*          Double word for CVB/CVD                                    *
*                                                                     *
*---------------------------------------------------------------------*
COMMDWRD DC    D'0'
*---------------------------------------------------------------------*
*                                                                     *
*          MODULE ENTRY POINTS                                        *
*                                                                     *
*---------------------------------------------------------------------*
TPXMODS  DS    0A
         MOD   TYPE=DSECT
         COPY  TPXMODS
*---------------------------------------------------------------------*
*                                                                     *
*        PRINT SUBTASK CONTROL                                        *
*                                                                     *
*---------------------------------------------------------------------*
COMMPRT  DC    A(0)                PRINT SUBTASK'S TCB ADDRESS
PRTREQ   DC    A(0)                PRINT SUBTASK REQUEST QUEUE
PRTTERM  DC    A(0)                PRINT SUBTASK TERMINATION ECB
PRTWORK  DC    A(0)                PRINT WORK TO DO ECB
*---------------------------------------------------------------------*
*                                                                     *
*          TRACE CONTROL                                              *
*                                                                     *
*---------------------------------------------------------------------*
         DS    0A
         DC    CL4'1STX'           FIRST TRACE ENTRY
TRFIRST  DC    A(0)
         DC    CL4'LAST'           LAST TRACE ENTRY
TRLAST   DC    A(0)
         DC    CL4'CURR'           CURRENT TRACE ENTRY
TRCURR   DC    A(0)
TRADDR   DC    A(0)                TRACE TABLE STORAGE ADDRESS
TRDATA1  DC    CL8' '              TRACE DATA ITEM 1
TRDATA2  DC    CL8' '              TRACE DATA ITEM 2
TRSIZE   DC    A(500*TRENTRYL)     TRACE TABLE SIZE
*---------------------------------------------------------------------*
*                                                                     *
*          GLOBAL DATA                                                *
*                                                                     *
*---------------------------------------------------------------------*
COMMDXDA DC    A(0)                WORK AREA BASE ADDRESS
COMMPARM DC    A(0)                ADDRESS OF PARM FROM EXEC STATEMENT
COMMACB  DC    A(0)                ACB'S ADDRESS
COMMXLST DC    A(0)                EXIT LIST'S ADDRESS
COMMCONV DC    A(0)                VTAM CONVERSATION BLOCK CHAIN
COMMVECB DC    A(0)                ECB POSTED BY ATTN EXIT
COMMAPLL DC    AL1(L'COMMAPLN)     LENGTH OF APPL ID
COMMAPLN DC    CL8' '              OUR VTAM APPL ID
COMMMAXL DC    PL3'60'             LINES PER PAGE ON SYSOUT DATASETS
COMMFLAG DC    X'00'               GLOBAL FLAGS
$ABEND   EQU   X'80'               .. ABEND AT END OF JOB
$ABORT   EQU   X'40'               .. SERIOUS ERROR, ABORT
$COMMPRT EQU   X'20'               .. PRINT SUBTASK ATTACHED
COMMEOJ  DC    X'00'               EOJ INDICATORS
$EOJ1    EQU   X'80'               .. EOJ STAGE 1 STARTED
$EOJ2    EQU   X'40'               .. EOJ STAGE 2 STARTED
COMMBLKS DC    CL140' '            CONSTANT
COMMIOSZ EQU   100                 I/O AREA SIZE PER CONVERSATION
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*          ADD TRACE ENTRY                                            *
*                                                                     *
*  During program initialization TPXMAIN acquires storage for the     *
*  trace table and sets TRFIRST, TRLAST, and TRCURR.  TPXMAIN         *
*  also sets R11 to the address of TPXCOMM and all other modules      *
*  depend on this remaining unchanged.  Any module except this        *
*  module may call the trace routine.  Macro ITRACE generates the     *
*  calling sequence.  R14 is the only register altered by the trace   *
*  macro.                                                             *
*                                                                     *
*  The trace table is a "wrap-around" table.  TRFIRST is the first    *
*  entry's address, TRLAST is the last entry's address, and           *
*  TRCURR is the address of the last entry added to the table.        *
*  When a trace entry is added to the table, the calling module's     *
*  name, an 8-byte ID, and up to 2 8-byte fields are captured.        *
*                                                                     *
*                                                                     *
*                                                                     *
*      This code depends on:                                          *
*           R11  'TPXCOMM' address                                    *
*           R12  current module's base address                        *
*           R14  trace id's address and R14 + 8 will be the return    *
*                address                                              *
*                                                                     *
*---------------------------------------------------------------------*
TRACE000 DS    0H
         USING MODPRFX,R12         DEFINE BASE
         USING TPXCOMM,R11         DEFINE BASE
         USING TRENTRY,R9          DEFINE BASE
         STM   R14,R12,12(R13)     SAVE ALL REGISTERS
TRACE010 DS    0H
         ICM   R9,15,TRCURR        CURRENT TRACE ENTRY
         BZ    TRACE030            NO TRACE TABLE
         LR    R2,R9               SAVE STARTING VALUE
         OC    0(TRENTRYL,R9),0(R9)    EMPTY ENTRY?
         BZ    TRACE020            YES.. USE THIS ENTRY
         LA    R9,TRENTRYL(R9)     NEXT TRACE ENTRY
         C     R9,TRLAST           BEYOND END OF TABLE?
         BNH   TRACE020            NO
         L     R9,TRFIRST          'WRAP' TRACE TABLE
TRACE020 DS    0H
         CS    R2,R9,TRCURR        ALLOCATE THE ENTRY
         BNE   TRACE010            CHANGED.. TRY AGAIN
         ST    R9,TRCURR           SAVE CURRENT TRACE ENTRY ADDRESS
         MVC   TREMOD,PFXMODNM     COPY MODULE NAME
         MVC   TREID,0(R14)        COPY TRACE ID
         MVC   TREDATA1,TRDATA1    COPY TRACE DATA 1
         MVC   TREDATA2,TRDATA2    COPY TRACE DATA 2
         XC    TRDATA1,TRDATA1     CLEAR TRACE DATA
         XC    TRDATA2,TRDATA2     CLEAR TRACE DATA
TRACE030 DS    0H
         LM    R14,R12,12(R13)     RESTORE ALL REGISTERS
         B     8(R14)              RETURN
COMMEND  EQU   *
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
*          TRACE TABLE ENTRY                                          *
*                                                                     *
*---------------------------------------------------------------------*
TRENTRY  DSECT
TREMOD   DS    CL8                 MODULE NAME
TREID    DS    CL8                 TRACE ID
TREDATA1 DS    CL8                 TRACE DATA 1
TREDATA2 DS    CL8                 TRACE DATA 2
TRENTRYL EQU   *-TRENTRY           ENTRY LENGTH
         TPXPRFX TYPE=DSECT
         MEND
./ ADD NAME=TPXMODS  0100-95102-95102-1953-00009-00009-00000-TPXEXIT
         MOD   TPXATTN,AATTN       ATTENTION EXIT
         MOD   TPXCONV,ACONV       ADD/DELETE CONVERSATION BLOCKS
         MOD   TPXLERAD,ALERAD     VTAM LERAD EXIT
         MOD   TPXLOSS,ALOSS       LOST CONVERSATION CLEAN-UP
         MOD   TPXMAIN,AMAIN       MAIN LINE
         MOD   TPXPRTQ,APRTQ       PRINT QUEUING
         MOD   TPXPRTS,APRTS       PRINT SUBTASK
         MOD   TPXVSUB,AVSUB       VTAM SUBFUNCTIONS
         MOD   TPXVTAM,AVTAM       VTAM COMMUNICATION
./ ADD NAME=TPXPRFX  0100-95102-95102-1953-00056-00056-00000-TPXEXIT
.* ------------------------------------------------------------------ *
.*                                                                    *
.*       ALL MODULES START WITH A COMMON PREFIX SET OF INSTRUCTIONS   *
.*       AND EYECATCHER.  THIS ALLOWS THE TRACE ROUTINE AND THE       *
.*       ABEND EXITS TO DETERMINE WHICH MODULE IS IN CONTROL.         *
.*                                                                    *
.* ------------------------------------------------------------------ *
         MACRO
&NAME    TPXPRFX &DESC,                                                +
               &TYPE=CSECT,                                            +
               &COMM=TPXCOMM
         AIF   ('&TYPE' EQ 'DSECT').L0010
         AIF   (T'&DESC EQ 'O').ERR0010
         AIF   (T'&NAME EQ 'O').ERR0020
TPX&NAME CSECT
         USING TPX&NAME,R12
         USING &COMM,R11
         STM   R14,R12,12(R13)     SAVE ENTRY REGISTERS
         LR    R12,R15             LOAD PERMANENT BASE
         L     R10,COMMDXDA        WORK AREA ADDRESS (ABOVE THE LINE)
         A     R10,DXDSTART        PLUS DISPLACEMENT TO OUR AREA
         USING DXD&NAME,R10        DEFINE BASE
         LR    R2,R13              SAVE OLD REGISTER SAVE AREA ADDRESS
         LA    R13,DXDSAVE         POINT TO OUR SAVE AREA
         ST    R13,8(R2)           CHAIN FORWARD
         ST    R2,4(R13)           CHAIN BACKWARD
         B     @@000001            BYPASS ID/TIME/DESCRIPTION
MODID    DC    CL8'TPX&NAME'       MODULE NAME
         DC    CL8'&SYSDATE'       DATE OF ASSEMBLY
         DC    CL6'&SYSTIME'       TIME OF ASSEMBLY
         DC    C&DESC
@@000001 DS    0H
         MEXIT
.L0010   ANOP
MODPRFX  DSECT
         STM   R14,R12,12(R13)     SAVE ENTRY REGISTERS
         LR    R12,R15             LOAD PERMANENT BASE
         L     R10,COMMDXDA        WORK AREA ADDRESS
         A     R10,0               PLUS DISPLACEMENT TO OUR AREA
         LR    R2,R13              SAVE OLD REGISTER SAVE AREA ADDRESS
         LA    R13,0               POINT TO SAVE AREA
         ST    R13,8(R2)           CHAIN FORWARD
         ST    R2,4(R13)           CHAIN BACKWARD
         B     0(R0)               BRANCH AROUND MOD NAME/TIME/DESC
PFXMODNM DS    CL8                 MODULE NAME
PFXMODDT DS    CL8                 ASSEMBLY DATE
PFXMODTM DS    CL6                 ASSEMBLY TIME
PFXMODDS DS    C                   DESCRIPTION
         MEXIT
.ERR0010 ANOP
         MNOTE 12,'DESCRIPTION IS REQUIRED'
         MEXIT
.ERR0020 ANOP
         MNOTE 12,'CSECT NAME IS REQUIRED'
         MEXIT
         MEND
./ ADD NAME=VTAMBLOK 0100-95102-95102-1953-00030-00030-00000-TPXEXIT
         MACRO
         VTAMBLOK &DSECT=
* ------------------------------------------------------------------- *
*                                                                     *
*      VTAM SUB-FUNCTION COMMAND BLOCK                                *
*                                                                     *
* ------------------------------------------------------------------- *
         AIF  (T'&DSECT EQ 'O').ERR0010
         AIF  ('&DSECT' EQ 'NO').CSECT00
         AIF  ('&DSECT' EQ 'YES').DSECT00
         MNOTE 12,'INVALID ''DSECT'', MUST BE ''YES'' OR ''NO'' '
         MEXIT
.ERR0010 ANOP
         MNOTE 12,'''DSECT'' PARAMETER IS REQUIRED'
         MEXIT
.CSECT00 ANOP
VTAMBLOK DS   0F
         AGO  .COMMON
.DSECT00 ANOP
VTAMBLOK DSECT
.COMMON  ANOP
VTAMCONV DS   A                    ADDRESS OF CONVERSATION BLOCK
VTAMCMD  DS   X                    COMMAND
$VTAMSND EQU  X'01'                .. ISSUE A SEND
$VTAMRCV EQU  X'02'                .. ISSUE A RECEIVE
$VTAMDLO EQU  X'03'                .. DEALLOCATE SESSION
$VTAMCHK EQU  X'04'                .. ISSUE A CHECK
$VTAMCFM EQU  X'05'                .. ISSUE SEND/CONFIRMED
VTAML    EQU  *-VTAMBLOK
         MEND
