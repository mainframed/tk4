./ ADD NAME=$$$DOC
See the comments in TMAPMAIN for an over-all description of the utility.

To install TAPEMAP
    1) Rename either TAPEMVSO or TAPEUSRO to TAPEEXCP in this library.

       TAPEMVSO uses normal MVS OPEN and CLOSE.  If your shop allows BLP
       tape processing, you may want to use this module, it follows
       "the rules".  Using normal OPEN invokes RACF and any tape
       management system you may have.  Normal open also generates SMF
       records, so "tracks" are left behind when TAPEMAP is used.  If
       your shop does not allow BLP processing and a tape is standard
       labelled, normal MVS open (with RACF, tape management systems,
       JES3, etc) may not allow you to read the tape (you may have
       to know the volser and dataset names in advance).  Since only
       standard methods are used, TAPEMAP does not have to be APF
       authorized.

       TAPEUSRO bypasses MVS open.  This has some advantages and dis-
       advantages.  Since MVS open is not used, RACF, tape management
       systems, and JES checking is avoided.  This means that BLP
       processing does not have to be allowed in order to read a
       standard labelled tape without knowing the dataset names.  It
       means RACF cannot prevent unauthorized users from reading tapes
       they should not have access to.  It means SMF records are not
       generated, so there is no evidence TAPEMAP was used to read a
       tape.  Bypassing OPEN requires the use MVS services restricted
       to APF authorized programs, so TAPEMAP must be in an APF library
       and link edited with AC=1.

    2) Edit the TMAPASM JCL, change the dataset names to match the
       source, maclib, and loadlib names at your shop.  If TAPEUSRO
       is used to do the I/O, the loadlib must be an APF authorized
       library and link edit must specify AC=1.

    3) Edit the TAPEMAP JCL member, change the dataset in the steplib
       to your loadlib name.

    4) If you want to run TAPEMAP as a started task, edit the TMAPSTC
       JCL and add it to one of your proclibs.
./ ADD NAME=TAPEMVSO 0100-99298-99298-1542-00891-00896-00000-SBGOLOB
          TITLE 'TAPEMVSO - EXCP LEVEL TAPE I/O SUBROUTINE WITH MVS OPE+
               N'
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: TAPEMVSO                                              *
*                                                                     *
*  Function:                                                          *
*  This program is a subroutine that performs tape I/O at the EXCP    *
*  level.  Normal MVS "OPEN" is used.  This module can replace        *
*  "TAPEEXCP" for those installations that have security concerns     *
*  bypassing MVS OPEN.  If this module is used instead of TAPEEXCP,   *
*  your system must allow "BLP" for tapes.                            *
*                                                                     *
*  The CSECT name will be TAPEEXCP.  This allows the link edit and    *
*  "VCON" references to always use the same module names.             *
*                                                                     *
*  The "tape is recorded at xxxx density" message always shows 38K    *
*  for some reason.  If anyone figures out how to correct this        *
*  let us know.                                                       *
*                                                                     *
*  This program supports only reads, no tape output is performed.     *
*  The program's parameter list is mapped by the TAPEBLOK macro.      *
*                                                                     *
*  The same TAPEBLOK should be used for all calls to TAPEMVSO.        *
*                                                                     *
*  Functions provided are:                                            *
*     OPEN   TCMD = $TCMDOPN                                          *
*     READ   TCMD = $TCMDRD                                           *
*     CLOSE  TCMD = $TCMDCLS                                          *
*                                                                     *
*   All functions require the "DDNAME" to be specified.  On an OPEN   *
*   call, the tape unit is verified as a being a supported device,    *
*   the I/O area for the tape is allocated, and a REWIND command is   *
*   issued to position the tape to load point. On a READ call, the    *
*   next physical block of the tape will be read and the I/O area     *
*   address and data length will be returned to the caller.  On a     *
*   CLOSE call, the I/O area will be freed.                           *
*                                                                     *
*   If a tapemark or the end of tape is reached, no data will be      *
*   returned.                                                         *
*                                                                     *
*   In the event of an I/O error, TAPEMVSO will try to issue a sense  *
*   command and return the sense info in TSENSE in the parameter      *
*   block.                                                            *
*                                                                     *
*   Multiple tapes may be OPEN at the same time, TAPEMVSO keeps track *
*   of the tapes by DDNAME.  You must specify the DDNAME on each call.*
*                                                                     *
*   This module has all its work areas in the TAPEBLOK data area, so  *
*   it is re-entrant.  MVS still does not allow I/O from above the    *
*   16-meg line, so the program is written as 24-bit.                 *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
         EJECT
* ------------------------------------------------------------------- *
*                                                                     *
*                         TRACE MACRO                                 *
*                                                                     *
*        THE TRACE FUNCTION CAPTURES AN 8-BYTE 'ID' AND UP TO 3 8-    *
*        BYTE DATA ELEMENTS.                                          *
*                                                                     *
* ------------------------------------------------------------------- *
         MACRO
&NAME    TAPETR &ID=,                                                  +
               &DATA1=,&RDATA1=,                                       +
               &DATA2=,&RDATA2=,                                       +
               &DATA3=,&RDATA3=
         AIF   (T'&DATA1 NE 'O' AND T'&RDATA1 NE 'O').ERR0010
         AIF   (T'&DATA2 NE 'O' AND T'&RDATA2 NE 'O').ERR0020
         AIF   (T'&DATA3 NE 'O' AND T'&RDATA3 NE 'O').ERR0030
         AIF   (T'&ID EQ 'O').ERR0040
         AIF   ((T'&DATA3 EQ 'O') AND (T'&RDATA3 EQ 'O')).DATA010
         AIF   (T'&DATA1 EQ 'O' AND T'&RDATA1 EQ 'O').ERR0050
         AIF   (T'&DATA2 EQ 'O' AND T'&RDATA2 EQ 'O').ERR0050
         AIF   ('&SYSPARM' EQ 'NOTRACE').MEXIT
.DATA010 ANOP
         AIF   ((T'&DATA2 EQ 'O') AND (T'&RDATA2 EQ 'O')).DATA020
         AIF   (T'&DATA1 EQ 'O' AND T'&RDATA1 EQ 'O').ERR0060
.DATA020 ANOP
         AIF   (T'&DATA1 EQ 'O').DATA040
         AIF   ('&DATA1'(1,1) EQ '(').DATA030
         LA    R14,&DATA1         DATA ADDRESS
         MVC   TTRDATA1,0(R14)    MOVE DATA
         AGO   .DATA050
.DATA030 ANOP
         MVC   TTRDATA1,0&DATA1   MOVE DATA
         AGO   .DATA050
.DATA040 ANOP
         AIF   (T'&RDATA1 EQ 'O').DATA050
         STCM  &RDATA1,15,TTRDATA1
.DATA050 ANOP
         AIF   (T'&DATA2 EQ 'O').DATA070
         AIF   ('&DATA2'(1,1) EQ '(').DATA060
         LA    R14,&DATA2         DATA ADDRESS
         MVC   TTRDATA2,0(R14)    MOVE DATA
         AGO   .DATA080
.DATA060 ANOP
         MVC   TTRDATA2,0&DATA2   MOVE DATA
         AGO   .DATA080
.DATA070 ANOP
         AIF   (T'&RDATA2 EQ 'O').DATA080
         STCM  &RDATA2,15,TTRDATA2
.DATA080 ANOP
         AIF   (T'&DATA3 EQ 'O').DATA100
         AIF   ('&DATA3'(1,1) EQ '(').DATA090
         LA    R14,&DATA3         DATA ADDRESS
         MVC   TTRDATA3,0(R14)    MOVE DATA
         AGO   .DATA110
.DATA090 ANOP
         MVC   TTRDATA3,0&DATA3   MOVE DATA
         AGO   .DATA110
.DATA100 ANOP
         AIF   (T'&RDATA3 EQ 'O').DATA110
         STCM  &RDATA3,15,TTRDATA3
.DATA110 ANOP
         BAL   R14,TRACE000       ENTER TRACE ROUTINE
&NAME    DC    CL8'&ID'           TRACE ID
         MEXIT
.ERR0010 ANOP
         MNOTE 12,'DATA1 AND RDATA1 ARE MUTUALLY EXCLUSIVE'
         MEXIT
.ERR0020 ANOP
         MNOTE 12,'DATA2 AND RDATA2 ARE MUTUALLY EXCLUSIVE'
         MEXIT
.ERR0030 ANOP
         MNOTE 12,'DATA3 AND RDATA3 ARE MUTUALLY EXCLUSIVE'
         MEXIT
.ERR0040 ANOP
         MNOTE 12,'ID PARAMETER IS REQUIRED'
         MEXIT
.ERR0050 ANOP
         MNOTE 12,'DATA3/RDATA3 IS NOT VALID UNLESS BOTH DATA1/RDATA1 A+
               ND DATA2/RDATA2 ARE SPECIFIED'
         MEXIT
.ERR0060 ANOP
         MNOTE 12,'DATA2/RDATA2 IS NOT VALID UNLESS DATA1/RDATA1 IS SPE+
               CIFIED'
.MEXIT   ANOP
         MEXIT
         MEND
         EJECT
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
TAPEEXCP CSECT
TAPEEXCP AMODE 24
TAPEEXCP RMODE 24
         USING TAPEEXCP,R12
         USING PSA,R0                DEFINE PSA BASE
         USING CMDBLOK,R10           DEFINE PARAMETER BLOCK BASE
         USING IOBLK,R9              DEFINE BASE
         STM   R14,R12,12(R13)       SAVE REGS
         LR    R12,R15               SET BASE REG
         LR    R10,R1                COPY PARAMETER BLOCK ADDRESS
         LA    R1,TSAVE              OUR SAVE AREA ADDRESS
         ST    R13,TSAVE+4           SAVE SAVE AREA ADDRESS
         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO CALLER'S
         LA    R13,TSAVE             SET SAVE AREA ADDRESS
         B     TAPE0000              SKIP EYECATCHER
         DC    CL8'TAPEMVSO'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
TAPE0000 DS    0H
         TAPETR ID=ENTRY,            TRACE CALLS                       +
               DATA1=TDDNAME,        .. FOR DDNAME                     +
               DATA2=TCMD            .. COMMAND
         CLI   TCMD,$TCMDOPN         OPEN TAPE DCB?
         BE    OPEN0000              YES
         CLI   TCMD,$TCMDRD          READ A BLOCK?
         BE    READ0000              YES
         CLI   TCMD,$TCMDCLS         CLOSE DCB?
         BE    CLOSE000              YES
         MVI   TSTAT,$TSTATIC        INVALID COMMAND
         B     TAPE9900              EXIT
         EJECT
* ------------------------------------------------------------------- *
*                                                                     *
*             OPEN TAPE DCB                                           *
*                                                                     *
* ------------------------------------------------------------------- *
OPEN0000 DS    0H
         TAPETR ID=OPEN
         ICM   R9,15,TCHAIN          FIRST I/O BLOCK ON THE CHAIN
         BZ    OPEN0020              NO BLOCK ON CHAIN
OPEN0010 DS    0H
         CLC   IODDNAME,TDDNAME      I/O BLOCK ALREADY ON THE CHAIN?
         BE    OPEN0170              YES.. CANNOT ALLOW A DUPLICATE
         ICM   R9,15,IONEXT          NEXT BLOCK ON CHAIN
         BNZ   OPEN0010              PROCESS ALL OF THEM
* ------------------------------------------------------------------- *
*             DETERMINE ADDRESS SPACE TYPE                            *
* ------------------------------------------------------------------- *
OPEN0020 DS    0H
         L     R1,PSAANEW            OUR ASCB ADDRESS
         USING ASCB,R1               DEFINE BASE
         L     R15,ASCBJBNI          JOB NAME ADDRESS
         LA    R15,0(R15)            CLEAR HIGH BIT(S)
         LTR   R15,R15               JOB NAME PRESENT?
         BNZ   OPEN0030              YES
         L     R1,ASCBOUCB           OUR OUCB ADDRESS
         USING OUCB,R1               DEFINE BASE
         BAL   R14,AM31              SWITCH TO 31-BIT MODE
         TAPETR ID=OUCBYFL,                                            +
               RDATA1=R1,                                              +
               DATA2=OUCBYFL
         TM    OUCBYFL,OUCBSTT       IS THIS A STARTED TASK?
         BNO   OPEN0030              NO
         OI    TASTYPE,$TASSTC       ADDRESS SPACE IS AN STC
         TAPETR ID=ASIDSTC
OPEN0030 DS    0H
         BAL   R14,AM24              SWITCH TO 24-BIT MODE
         XC    UCBTOKEN,UCBTOKEN     CLEAR THE TOKEN
         XC    UCBWORK,UCBWORK       CLEAR THE WORKAREA TOO
* ------------------------------------------------------------------- *
*             LOCATE UCB FOR REQUESTED DEVICE TYPE                    *
* ------------------------------------------------------------------- *
OPEN0035 DS    0H
         MODESET MODE=SUP,KEY=ZERO   ENTER SUPERVISOR STATE, KEY ZERO
         UCBSCAN ADDRESS,            .. RETURN ADDRESS OF UCB          +
               UCBPTR=UCBADDR,       .. RETURNED ADDRESS               +
               WORKAREA=UCBWORK,     .. WORKAREA FOR UCBSCAN           +
               DEVCLASS=TAPE,        .. ONLY NEED TAPE UCB'S           +
               DYNAMIC=YES,          .. INCLUDE DYNAMICALLY ADDED      +
               PIN,                  .. DON'T ALLOW IT TO BE DELETED   +
               TEXT=UCBTEXT,         .. REASON FOR PIN                 +
               PTOKEN=UCBTOKEN       .. TOKEN
         MODESET MODE=PROB,KEY=NZERO PROBLEM STATE, PROBLEM KEY
         ICM   R3,15,UCBADDR         UCB'S ADDRESS
         BZ    OPEN0070              NO DEVICE FOUND
         USING UCBOB,R3              DEFINE BASE
OPEN0040 DS    0H
         TM    UCBSTAT,UCBONLI       IS THIS DEVICE ONLINE?
         BNO   OPEN0035              NO
         TM    UCBSTAT,UCBALOC       IS IT ALREADY ALLOCATED?
         BO    OPEN0035              YES
         TM    UCBTBYT3,UCB3TAPE     IS DEVICE A TAPE UNIT?
         BNO   OPEN0035              NO
         CLI   UCBTBYT4,UCB3480      IS IT A 3480?
         BE    OPEN0060              YES
         CLI   TDEVT,$T3480          3480 WANTED?
         BE    OPEN0035              YES
         CLI   TDEVT,$T3420B         6250 BPI WANTED?
         BE    OPEN0050              YES
         TM    UCBTBYT1,UCBD1600     1600 BPI DRIVE?
         BO    OPEN0090              YES
         TM    UCBTBYT2,UCBDUDN1     800/1650 DRIVE?
         BO    OPEN0090              YES
         TM    UCBTBYT2,UCBDUDN2     1600/6250 DRIVE?
         BO    OPEN0090              YES
         B     OPEN0035              OTHERWISE LOOK FOR ANOTHER UNIT
OPEN0050 DS    0H
         TM    UCBTBYT1,UCBD6250     6250 BPI DRIVE?
         BO    OPEN0080              YES
         TM    UCBTBYT2,UCBDUDN2     1600/6250 DRIVE?
         BO    OPEN0080              YES
         B     OPEN0035              OTHERWISE LOOK FOR ANOTHER UNIT
OPEN0060 DS    0H
         CLI   TDEVT,$T3480          3480 WANTED?
         BNE   OPEN0035              NO
         MVI   TDENSITY,$DEN3480     SET FOR 3480 DENSITY
         B     OPEN0100
OPEN0070 DS    0H
         MVI   TSTAT,$TSTATNU        NO UNIT AVAILABLE
         B     TAPE9900              AND EXIT
OPEN0080 DS    0H
         MVI   TDENSITY,$DEN6250     SET FOR 6250 BPI DENSITY
         B     OPEN0100
OPEN0090 DS    0H
         MVI   TDENSITY,$DEN1600     SET FOR 1600 BPI DENSITY
         B     OPEN0100
* ------------------------------------------------------------------- *
*             UCB LOCATED                                             *
* ------------------------------------------------------------------- *
OPEN0100 DS    0H
         TAPETR ID=UCBLOC,           UCB HAS BEEN LOCATED              +
               RDATA1=R3             .. INCLUDE UCB'S ADDRESS
* ------------------------------------------------------------------- *
*             ALLOCATE THE UNIT                                       *
* ------------------------------------------------------------------- *
         LA    R2,T99RB              DAIR REQUEST BLOCK ADDRESS
         USING S99RB,R2              DEFINE BASE
         ST    R2,T99RBA             SET ADDRESS IN POINTER
         OI    T99RBA,X'80'          SET END OF LIST
         XC    T99RB(T99RBL),T99RB   CLEAR REQUEST BLOCK
         MVI   S99RBLN,T99RBL        SET LENGTH
         MVI   S99VERB,S99VRBAL      SET VERB (ALLOCATE)
         LA    R1,T99DDPA            FIRST TEXT UNIT POINTER
         ST    R1,S99TXTPP           SET TEXT POINTER ADDRESS
         LA    R1,T99DDP             DD PARAMETER'S ADDRESS
         ST    R1,T99DDPA            SET ADDRESS
         LA    R1,T99DNP             DSN PARAMETER'S ADDRESS
         ST    R1,T99DNPA            SET ADDRESS
         LA    R1,T99LBP             LABEL TYPE PARAMETER'S ADDRESS
         ST    R1,T99LBPA            SET ADDRESS
         LA    R1,T99DSP             DATASET SEQUENCE # PARAMETERS
         ST    R1,T99DSPA            SET ADDRESS
         LA    R1,T99UTP             UNIT PARAMETER'S ADDRESS
         ST    R1,T99UTPA            SET ADDRESS
         LA    R1,T99VLP             UNIT PARAMETER'S ADDRESS
         ST    R1,T99VLPA            SET ADDRESS
         LA    R1,T99STP             STATUS (DISP=NEW)
         ST    R1,T99STPA            SET ADDRESS
         LA    R1,T99DPP             DISPOSITION (DISP=KEEP)
         ST    R1,T99DPPA            SET ADDRESS
         LA    R1,T99DMP             DEFERRED MOUNT PARAMETER
         ST    R1,T99DMPA            SET ADDRESS
         OI    T99DMPA,X'80'         SET END OF LIST ADDRESS
         MVC   T99DDP(T99L),T99      INITIALIZE ALL PARAMETERS
         MVC   T99DD,TDDNAME         SET DDNAME
         MVC   T99DN,TDDNAME         SET DSN
         MVC   T99UT(3),UCBNAME      SET UNIT
         MVC   T99VL(3),VOLPRFX      SET VOLSER PREFIX
         MVC   T99VL+3(3),UCBNAME    SET VOLSER
         LA    R1,T99RBA             POINTER'S ADDRESS
         DYNALLOC                    ALLOCATE THE DRIVE
         STH   R15,T99RC             SET RETURN CODE
         LTR   R15,R15               ALLOCATED SUCCESSFULLY?
         BNZ   OPEN0180              NO
* ------------------------------------------------------------------- *
*             ACQUIRE I/O CONTROL BLOCK                               *
* ------------------------------------------------------------------- *
         GETMAIN R,LV=IOBLKL         ACQUIRE CONTROL BLOCK STORAGE
         LR    R9,R1                 COPY STORAGE ADDRESS
         LA    R14,TCHAIN            INITIALIZE 'CURRENT' POINTER
         ICM   R15,15,TCHAIN         FIRST BLOCK ON CHAIN
         BZ    OPEN0120              END OF CHAIN FOUND
OPEN0110 DS    0H
         LR    R14,R15               COPY CURRENT BLOCK'S ADDRESS
         ICM   R15,15,IONEXT-IOBLK(R15) NEXT ON CHAIN
         BNZ   OPEN0110              FIND END OF CHAIN
OPEN0120 DS    0H
         ST    R14,IOPREV            SET 'PREVIOUS' POINTER
         XC    IONEXT,IONEXT         ZERO 'NEXT' POINTER
         ST    R9,IONEXT-IOBLK(R14) 'NEXT' IN PREVIOUS BLOCK
         MVC   IODDNAME,TDDNAME      SET DD NAME
* ------------------------------------------------------------------- *
*             ACQUIRE I/O AREA                                        *
* ------------------------------------------------------------------- *
         GETMAIN R,LV=$MAXLEN        ACQUIRE I/O AREA
         ST    R1,IOAREA             SAVE I/O AREA ADDRESS
         TAPETR ID=NEWIOBLK,                                           +
               RDATA1=R9,            .. I/O BLOCK'S ADDRESS            +
               RDATA2=R1             .. I/O AREA'S ADDRESS
* ------------------------------------------------------------------- *
*             INITIALIZE CCW'S                                        *
* ------------------------------------------------------------------- *
         MVC   IOREAD,READCCW        INITIALIZE READ CCW
         MVC   IOREW,REWCCW          INITIALIZE REW CCW
         MVC   IOSENSE,SENSECCW      INITIALIZE SENSE CCW
         L     R1,IOAREA             I/O AREA ADDRESS
         STCM  R1,7,IOREAD+1         INITIALIZE I/O AREA ADDRESS
         STCM  R1,7,IOREW+1
         LA    R1,TSENSE             SENSE DATA ADDRESS
         STCM  R1,7,IOSENSE+1        INITIALIZE SENSE DATA ADDRESS
* ------------------------------------------------------------------- *
*             INITIALIZE SENSE INFO                                   *
* ------------------------------------------------------------------- *
         XC    TSENSE,TSENSE         INITIALIZE SENSE DATA
         LA    R5,IOIOB              IOB STORAGE ADDRESS
         LA    R6,IODCB              DCB STORAGE ADDRESS
         USING IOB,R5
         USING IHADCB,R6
         USING DEB,R7
* ------------------------------------------------------------------- *
*           INITIALIZE IOB                                            *
* ------------------------------------------------------------------- *
         XC    IOIOB(IOBL),IOIOB     CLEAR IOB STORAGE
         MVI   IOBFLAG1,X'02'        SET FLAG BYTE 1
         ST    R6,IOBDCBPT           SET DCB ADDRESS
* ------------------------------------------------------------------- *
*           INITIALIZE DCB                                            *
* ------------------------------------------------------------------- *
         MVC   IODCB(DCBL),INITDCB   INITIALIZE DCB
         MVC   DCBDDNAM,TDDNAME      SET DD NAME
         GETMAIN R,LV=OPENL
         LR    R11,R1                COPY STORAGE ADDRESS
         MVC   0(OPENL,R11),OPENI    COPY OPEN LIST FORM
         OPEN  ((R6),INPUT),MF=(E,(R11))
         FREEMAIN R,A=(R11),LV=OPENL FREEMAIN OPEN PARM LIST
         TAPETR ID=OPENREW
         LA    R1,IOREW              REWIND CCW
         BAL   R11,IO0000            REWIND THE TAPE
         TAPETR ID=OPENDONE
         B     TAPE9900              AND EXIT
OPEN0160 DS    0H
         TAPETR ID=NOCCOM
         MVI   TSTAT,$TSTATNC        NO CONSOLE COMMUNICATION BLOCK
         B     TAPE9900              AND EXIT
OPEN0170 DS    0H
         TAPETR ID=DUPOPEN
         MVI   TSTAT,$TSTATOP        TAPE IS ALREADY OPEN
         B     TAPE9900              AND EXIT
OPEN0180 DS    0H
         TAPETR ID=ALOCFAIL
         MVI   TSTAT,$TSTAT99        DAIR FAILURE
         B     TAPE9900              AND EXIT
         EJECT
* ------------------------------------------------------------------- *
*                                                                     *
*             READ A BLOCK                                            *
*                                                                     *
* ------------------------------------------------------------------- *
READ0000 DS    0H
         TAPETR ID=READ
         ICM   R9,15,TCHAIN          FIRST BLOCK ON CHAIN
READ0010 DS    0H
         BZ    READ0070              I/O BLOCK NOT FOUND
         CLC   IODDNAME,TDDNAME      CORRECT I/O BLOCK FOUND?
         BE    READ0020              YES
         ICM   R9,15,IONEXT          NEXT ON CHAIN
         B     READ0010              KEEP LOOKING
READ0020 DS    0H
         LA    R5,IOIOB              IOB ADDRESS
         LA    R6,IODCB              DCB ADDRESS
         L     R7,DCBDEBAD           DEB ADDRESS
         LA    R1,IOREAD             READ CCW'S ADDRESS
         BAL   R11,IO0000            LINK TO I/O ROUTINE
         CLI   TSTAT,$TSTATOK        I/O SUCCESSFUL?
         BNE   TAPE9900              NO.. GET OUTTA HERE
         SR    R0,R0                 CLEAR REGISTER
         SR    R1,R1                 CLEAR REGISTER
         ICM   R0,3,IOREAD+6         LENGTH ATTEMPTED
         ICM   R1,3,IOBSTDRD+14      RESIDUAL LENGTH
         SR    R0,R1                 LENGTH READ
         STCM  R0,3,TLENGTH          SET LENGTH
         MVC   TIOAREA,IOAREA        SET I/O AREA ADDRESS
         TAPETR ID=READOK,           READ COMPLETE                     +
               DATA1=TIOAREA,        .. I/O AREA ADDRESS               +
               DATA2=TLENGTH         .. DATA LENGTH
         TM    IOFLAG,$IODEN         DENSITY DETERMINED?
         BO    TAPE9900              YES
         OI    IOFLAG,$IODEN         DENSITY WILL BE DETERMINED
         CLI   DEBSDVM,$DEN3480      3480 TAPE DRIVE?
         BE    READ0050              YES
         LA    R1,IOSENSE            SENSE CCW
         BAL   R11,IO0000            ISSUE SENSE COMMAND
         CLI   TSTAT,$TSTATOK        I/O SUCCESSFUL?
         BNE   TAPE9900              NO.. BYPASS DENSITY STUFF
         TM    TSENSE+3,$SENSEPE     PE MODE?
         BO    READ0030              YES
         TM    TSENSE+9,$SENSE62     6250 CAPABLE?
         BO    READ0040              YES
         MVI   IODEN,2               DENSITY IS 800 BPI
         B     READ0060
READ0030 DS    0H
         TAPETR ID=MODE3
         MVI   IODEN,3               DENSITY IS 1600 BPI
         B     READ0060
READ0040 DS    0H
         TAPETR ID=MODE4
         MVI   IODEN,4               DENSITY IS 6250 BPI
         B     READ0060
READ0050 DS    0H
         TAPETR ID=MODE5
         MVI   IODEN,5               TAPE IS A 3480
READ0060 DS    0H
         MVC   TDENSITY,IODEN        COPY DENSITY
         B     TAPE9900              AND EXIT
READ0070 DS    0H
         TAPETR ID=NOTOPEN
         MVI   TSTAT,$TSTATNO        TAPE IS NOT OPEN
         B     TAPE9900              AND EXIT
         EJECT
* ------------------------------------------------------------------- *
*                                                                     *
*             PERFORM I/O                                             *
*                                                                     *
* ------------------------------------------------------------------- *
IO0000   DS    0H
         TAPETR ID=IO,               STARTING I/O                      +
               DATA1=(R1)            .. CCW BEING ISSUED
         CLI   0(R1),CCWCMDRW        IS COMMAND REWIND?
         BE    IO0010                YES
         CLI   0(R1),CCWCMDRU        IS COMMAND REWIND/UNLOAD?
         BE    IO0010                YES
         TM    IOFLAG,$IOEOT         TAPE AT PHYSICAL EOT?
         BO    IO0100                YES..
IO0010   DS    0H
         ST    R1,IOBSTART           SET CCW STRING ADDRESS
         LA    R1,IOECB              ECB'S ADDRESS
         STCM  R1,7,IOBECBPB         SET ECB ADDRESS
         LA    R1,IODCB              DCB'S ADDRESS
         ST    R1,IOBDCBPT           SET DCB ADDRESS
IO0020   DS    0H
         TAPETR ID=EXCP
         XC    IOECB,IOECB           CLEAR THE ECB
         EXCP  IOBSTDRD              START THE I/O
         WAIT  ECB=IOECB             WAIT FOR I/O COMPLETION
         TAPETR ID=EXCPDONE,         I/O COMPLETED                     +
               DATA1=IOECB           .. SAVE ECB
         CLI   IOECB,X'44'           RETRY THE I/O?
         BE    IO0020                YES
         CLI   IOECB,X'7F'           SUCCESSFUL?
         BNE   IO0050                NO
         L     R1,IOBSTART           FIRST CCW
         CLI   0(R1),CCWCMDRW        REWIND?
         BE    IO0030                YES
         CLI   0(R1),CCWCMDRU        REWIND/UNLOAD?
         BNE   IO0040                NO
IO0030   DS    0H
         TAPETR ID=REWOUND
         NI    IOFLAG,255-$IOEOT     RESET EOT FLAG
IO0040   DS    0H
         TAPETR ID=GOODIO
         MVI   TSTAT,$TSTATOK        I/O WAS SUCCESSFUL
         BR    R11                   AND RETURN
IO0050   DS    0H
         TAPETR ID=BADIO
         L     R1,IOBSTART           FIRST CCW IN STRING
         CLI   0(R1),CCWCMDSE        WAS I/O A SENSE COMMAND?
         BE    IO0120                YES.. SENSE FAILED
         NI    IOFLAG,255-$IOUEX     TURN OFF UNIT EXCEPTION FLAG
         TM    IOBFLAG1,IOBIOERR     UNIT EXCEPTION?
         BNO   IO0060                NO
         OI    IOFLAG,$IOUEX         INDICATE UNIT EXCEPTION OCCURRED
         TAPETR ID=UNITEXPT
IO0060   DS    0H
         LA    R1,IOSENSE            SENSE CCW'S ADDRESS
         ST    R1,IOBSTART           SET CCW STRING ADDRESS
IO0070   DS    0H
         XC    IOECB,IOECB           CLEAR THE ECB
         TAPETR ID=SENSEIO
         EXCP  IOBSTDRD              START THE I/O
         WAIT  ECB=IOECB             WAIT FOR I/O COMPLETION
         TAPETR ID=SNSEDONE,         SENSE HAS COMPLETED               +
               DATA1=IOECB
         CLI   IOECB,X'44'           RETRY THE I/O?
         BE    IO0070                YES
         CLI   IOECB,X'7F'           SUCCESSFUL?
         BNE   IO0110                NO
         TAPETR ID=GOODSNSE,         SENSE SUCCESSFUL                  +
               DATA1=TSENSE,         .. FIRST 8 BYTES OF SENSE DATA    +
               DATA2=TSENSE+8        .. NEXT 8 BYTES
         TM    IOFLAG,$IOUEX         UNIT EXEPTION ON ORIGINAL I/O?
         BO    IO0080                YES
         TAPETR ID=IOEWSNSE
         MVI   TSTAT,$TSTATIE        I/O ERROR WITH SENSE AVAILABLE
         BR    R11                   RETURN
IO0080   DS    0H
         TM    TSENSE+4,$SENSETI     TAPE AT PHYSICAL EOT?
         BO    IO0090                YES
         TAPETR ID=TAPEMARK
         MVI   TSTAT,$TSTATTM        TAPE MARK REACHED
         BR    R11                   EXIT
IO0090   DS    0H
         TAPETR ID=PEOT
         OI    IOFLAG,$IOEOT         TAPE IS AT EOT
IO0100   DS    0H
         TAPETR ID=PEOT
         MVI   TSTAT,$TSTATPE        EOT REACHED (PHYSICAL END)
         BR    R11                   EXIT
IO0110   DS    0H
         TAPETR ID=SFAIL1
         MVI   TSTAT,$TSTATIX        SENSE FAILED AFTER AN I/O ERROR
         BR    R11                   EXIT
IO0120   DS    0H
         TAPETR ID=SFAIL2
         MVI   TSTAT,$TSTATSF        SENSE FAILED
         BR    R11                   EXIT
         EJECT
* ------------------------------------------------------------------- *
*                                                                     *
*             CLOSE TAPE DCB                                          *
*                                                                     *
* ------------------------------------------------------------------- *
CLOSE000 DS    0H
         TAPETR ID=CLOSE
         ICM   R9,15,TCHAIN          FIRST BLOCK ON CHAIN
CLOSE010 DS    0H
         BZ    CLOSE060              I/O BLOCK NOT FOUND
         CLC   IODDNAME,TDDNAME      CORRECT I/O BLOCK FOUND?
         BE    CLOSE020              YES
         ICM   R9,15,IONEXT          NEXT ON CHAIN
         B     CLOSE010              KEEP LOOKING
CLOSE020 DS    0H
         TAPETR ID=IOBLKFD,          I/O BLOCK LOCATED                 +
               RDATA1=R9             .. I/O BLOCK'S ADDRESS
* ------------------------------------------------------------------- *
*             CLOSE THE DCB                                           *
* ------------------------------------------------------------------- *
         LA    R6,IODCB              DCB ADDRESS
         GETMAIN R,LV=CLOSEL
         LR    R11,R1                COPY STORAGE ADDRESS
         MVC   0(CLOSEL,R11),CLOSEI  COPY LIST FORM
         CLOSE ((R6)),MF=(E,(R11))   CLOSE TH ECB
         FREEMAIN R,A=(R11),LV=CLOSEL FREE THE CLOSE PARM LIST
* ------------------------------------------------------------------- *
*             DE-ALLOCATE THE DEVICE                                  *
* ------------------------------------------------------------------- *
         LA    R2,T99RB              REQUEST BLOCK ADDRESS
         MVI   S99VERB,S99VRBUN      SET VERB (UNALLOCATE)
         MVC   T99DD,TDDNAME         SET DDNAME
         OI    T99DDPA,X'80'         SET END OF LIST
         LA    R1,T99RBA             POINTER'S ADDRESS
         DYNALLOC                    FREE THE UNIT
         STH   R1,T99RC              SAVE RETURN CODE
         LTR   R15,R15               SUCCESSFUL?
         BZ    CLOSE030              YES
         TAPETR ID=FREEFAIL,                                           +
               RDATA1=R15
         MVI   TSTAT,$TSTAT99        SVC 99 FAILED
         B     TAPE9900              EXIT
* ------------------------------------------------------------------- *
*             REMOVE THIS I/O BLOCK FROM THE CHAIN                    *
* ------------------------------------------------------------------- *
CLOSE030 DS    0H
         TAPETR ID=UNCHAIN
         ICM   R1,15,IOPREV          PREVIOUS BLOCK ON THE CHAIN
         BZ    CLOSE040              NO PREVIOUS BLOCK
         MVC   IONEXT-IOBLK(4,R1),IONEXT   CHAIN PREVIOUS TO NEXT
CLOSE040 DS    0H
         ICM   R1,15,IONEXT          NEXT BLOCK ON CHAIN
         BZ    CLOSE050              NO NEXT BLOCK
         MVC   IOPREV-IOBLK(4,R1),IOPREV   CHAIN NEXT TO PREVIOUS
CLOSE050 DS    0H
         TAPETR ID=FREEIO
         L     R1,IOAREA             I/O AREA ADDRESS
         FREEMAIN R,A=(1),LV=$MAXLEN FREE I/O AREA
         FREEMAIN R,A=(9),LV=IOBLKL  FREE I/O BLOCK
         TAPETR ID=CLSEDONE
         MVI   TSTAT,$TSTATOK        STATUS
         B     TAPE9900              AND EXIT
CLOSE060 DS    0H
         TAPETR ID=NOTOPEN
         MVI   TSTAT,$TSTATNO        TAPE IS NOT OPEN
         B     TAPE9900              AND EXIT
TAPE9900 DS    0H
         TAPETR ID=EXIT,             TRACE EXITS                       +
               DATA1=TDDNAME,        .. FOR DDNAME                     +
               DATA2=TCMD            .. COMMAND
         CLI   TCMD,$TCMDCLS         CLOSE COMMAND?
         BNE   TAPE9910              NO
         OC    TCHAIN,TCHAIN         ANYTHING ON CHAIN?
         BNZ   TAPE9910              YES
         ICM   R1,15,TTR1ST          FIRST TRACE ENTRY
         BZ    TAPE9910              NO TABLE TO FREE
         L     R0,TTRSIZE            TRACE TABLE SIZE
         FREEMAIN R,A=(1),LV=(0)     RELEASE TRACE TABLE STORAGE
         XC    TTR1ST,TTR1ST         CLEAR TRACE TABLE 1ST ENTRY
         XC    TTRLAST,TTRLAST       CLEAR TRACE TABLE LAST ENTRY
         XC    TTRCURR,TTRCURR       CLEAR TRACE TABLE CURRENT ENTRY
TAPE9910 DS    0H
         L     R13,4(R13)            RESTORE REGISTER 13
         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS
         SR    R15,R15               GIVE GOOD RETURN CODE
         BR    R14                   RETURN TO CALLER
*--------------------------------------------------------------------*
*                                                                    *
*              ADDRESS MODE SWITCHING                                *
*                                                                    *
*--------------------------------------------------------------------*
AM24     DS    0H
         LA    R14,0(R14)            CLEAR HIGH BIT(S)
         BSM   R0,R14                SWITCH TO 24-BIT MODE AND EXIT
AM31     DS    0H
         LA    R14,0(R14)            CLEAR HIGH BIT(S)
         O     R14,X80               TURN ON HIGH BIT
         BSM   R0,R14                SWITCH TO 31-BIT MODE AND EXIT
*--------------------------------------------------------------------*
*                                                                    *
*              TRACE ROUTINE                                         *
*                                                                    *
*--------------------------------------------------------------------*
TRACE000 DS    0H
         USING TRENTRY,R1            DEFINE BASE
         STM   R0,R15,TTRSAVE        SAVE ALL REGISTERS
         ICM   R1,15,TTRCURR         CURRENT ENTRY
         BNZ   TRACE010              BUILD TRACE ENTRY
         L     R2,TTRSIZE            TRACE TABLE SIZE
         GETMAIN R,LV=(R2)           ACQUIRE TRACE TABLE STORAGE
         ST    R1,TTR1ST             SAVE TRACE TABLE STORAGE
         ST    R1,TTRCURR
         AR    R2,R1                 PLUS TOTAL SIZE
         SH    R2,=Y(TRENTRYL)       MINUS 1 ENTRY'S LENGTH
         ST    R2,TTRLAST            SET LAST ENTRY ADDRESS
         L     R0,TTR1ST             FIRST ENTRY
         L     R1,TTRSIZE            TOTAL SIZE
         SR    R2,R2                 CLEAR REGISTER
         SR    R3,R3                 CLEAR REGISTER
         MVCL  R0,R2                 INITIALIZE TABLE
         L     R1,TTR1ST             RESET TO 1ST ENTRY
         B     TRACE030
TRACE010 DS    0H
         C     R1,TTRLAST            USING LAST ENTRY?
         BNE   TRACE020              NO
         L     R1,TTR1ST             'WRAP' TABLE
TRACE020 DS    0H
         OC    0(TRENTRYL,R1),0(R1)  EMPTY?
         BZ    TRACE030              YES
         LA    R1,TRENTRYL(R1)       NEXT ENTRY
TRACE030 DS    0H
         MVC   TREID,0(R14)          SET ID
         MVC   TREF1,TTRDATA1        SET DATA 1
         MVC   TREF2,TTRDATA2        SET DATA 2
         MVC   TREF3,TTRDATA3        SET DATA 3
         XC    TTRDATA1(24),TTRDATA1 CLEAR DATA 1, 2, AND 3
         ST    R1,TTRCURR            SAVE FOR NEXT CALL
         LM    R0,R15,TTRSAVE        RESTORE REGISTERS
         B     8(R14)                RETURN
*--------------------------------------------------------------------*
*                                                                    *
*              CONSTANTS                                             *
*                                                                    *
*--------------------------------------------------------------------*
READCCW  CCW   CCWCMDRF,*,X'20',$MAXLEN   READ FORWARD
REWCCW   CCW   CCWCMDRW,*,X'20',1         REWIND THE TAPE
SENSECCW CCW   CCWCMDSE,*,X'20',16        SENSE CCW
TTRSIZE  DC    A(500*TRENTRYL)       TRACE TABLE SIZE
X80      DC    A(X'80000000')
OPENI    OPEN  (*,INPUT),MF=L
OPENL    EQU   *-OPENI
CLOSEI   CLOSE (*),MF=L
CLOSEL   EQU   *-CLOSEI
INITDCB  DCB   MACRF=EXCP,           INITIAL TAPE DCB                  +
               DDNAME=TAPEDDNM,      .. DD NAME SUPPLIED ON 'OPEN'     +
               DEVD=TA,              .. JUST WORRY ABOUT TAPES         +
               DSORG=PS              .. USE SEQUENTIAL DSORG
VOLPRFX  DC    CL3'VOL'
UCBTEXT  DC    CL58'PINNED BY TAPEMAP'
         LTORG
*--------------------------------------------------------------------*
*                                                                    *
*              EQUATES                                               *
*                                                                    *
*--------------------------------------------------------------------*
         COPY REGEQU
$DEN1600 EQU  X'C3'                  1600 BPI
$DEN6250 EQU  X'D3'                  6250 BPI
$DEN3480 EQU  X'00'                  3480 BPI
$MAXLEN  EQU  65535
$SENSETI EQU  X'20'                  TAPE INDICATE
$SENSEPE EQU  X'04'                  PE MODE
$SENSE62 EQU  X'08'                  8303-2 (6250 CAPABLE)
T99      DS   0C
         DC   AL2(DALDDNAM),AL2(1),AL2(8)     DDNAME PARAMETERS
         DC   CL8' '
         DC   AL2(DALDSNAM),AL2(1),AL2(8)     DSN PARAMETERS
         DC   CL8' '
         DC   AL2(DALLABEL),AL2(1),AL2(1)     LABEL TYPE PARAMETERS
         DC   X'10'                           .. 'BLP'
         DC   AL2(DALDSSEQ),AL2(1),AL2(2)     DATASET SEQUENCE NUMBER
         DC   XL2'0001'                       .. 1ST DATASET
         DC   AL2(DALUNIT),AL2(1),AL2(8)      UNIT PARAMETERS
         DC   CL8' '
         DC   AL2(DALVLSER),AL2(1),AL2(6)     VOLSER PARAMETERS
         DC   CL6' '
         DC   AL2(DALSTATS),AL2(1),AL2(1)     INITIALIZE STATUS
         DC   X'04'
         DC   AL2(DALNDISP),AL2(1),AL2(1)     FINAL STATUS
         DC   X'08'
         DC   AL2(DALDEFER),AL2(0),AL2(0)     DEFERRED MOUNT
T99L     EQU  *-T99
         COPY TAPECMDS
*--------------------------------------------------------------------*
*                                                                    *
*              COMMAND/STATUS BLOCK                                  *
*                                                                    *
*--------------------------------------------------------------------*
CMDBLOK  TAPEBLOK TYPE=DSECT
         SPACE 2
*--------------------------------------------------------------------*
*                                                                    *
*              I/O BLOCK                                             *
*                                                                    *
*              THERE IS 1 I/O BLOCK PER 'OPEN' TAPE                  *
*                                                                    *
*--------------------------------------------------------------------*
IOBLK    DSECT
IONEXT   DS    A                     NEXT BLOCK ON CHAIN
IOPREV   DS    A                     PREVIOUS BLOCK ON CHAIN
IOECB    DS    F                     ECB
IOAREA   DS    A                     I/O AREA ADDRESS
IODDNAME DS    CL8                   DD NAME
IODCB    DS    (DCBL)X               DCB
         DS    0D
IOIOB    DS    (IOBL)X'00'           IOB
IOREAD   CCW   X'02',*,X'20',$MAXLEN READ FORWARD
IOREW    CCW   X'07',*,X'20',1       REWIND THE TAPE
IOSENSE  CCW   X'04',*,X'20',16      SENSE CCW
IOFLAG   DC    X'00'                 CONTROL FLAGS
$IOEOT   EQU   X'80'                 TAPE IS AT EOT
$IODEN   EQU   X'40'                 RECORDING DENSITY DETERMINED
$IOUEX   EQU   X'20'                 UNIT EXCEPTION OCCURRED
IODEN    DC    X'00'                 RECORDING DENSITY
IOBLKL   EQU   *-IOBLK
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*              MVS COMMUNICATIONS VECTOR TABLE                       *
*                                                                    *
*--------------------------------------------------------------------*
         PRINT NOGEN
         CVT   DSECT=YES
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*              MVS UNIT CONTROL BLOCK                                *
*                                                                    *
*--------------------------------------------------------------------*
         IEFUCBOB
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*              MVS IOB DSECT                                         *
*                                                                    *
*--------------------------------------------------------------------*
         IEZIOB
IOBL     EQU  *-IOB
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*              MVS DCB DSECT                                         *
*                                                                    *
*--------------------------------------------------------------------*
         DCBD  DSORG=PS,                                               +
               DEVD=TA
DCBL     EQU   *-IHADCB
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*              MVS PSA DSECT                                         *
*                                                                    *
*--------------------------------------------------------------------*
         IHAPSA DSECT=YES,LIST=NO
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*              MVS TCB DSECT                                         *
*                                                                    *
*--------------------------------------------------------------------*
         IKJTCB LIST=NO
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*              MVS DEB DSECT                                         *
*                                                                    *
*--------------------------------------------------------------------*
         IEZDEB
*--------------------------------------------------------------------*
*                                                                    *
*              MVS TIOT DSECT                                        *
*                                                                    *
*--------------------------------------------------------------------*
TIOT     DSECT
         IEFTIOT1
*--------------------------------------------------------------------*
*                                                                    *
*              TRACE TABLE ENTRIES                                   *
*                                                                    *
*--------------------------------------------------------------------*
TRENTRY  DSECT
TREID    DS   CL8          TRACE ID
TREF1    DS   CL8          TRACE FIELD 1
TREF2    DS   CL8          TRACE FIELD 2
TREF3    DS   CL8          TRACE FIELD 3
TRENTRYL EQU  *-TRENTRY    TRACE ENTRY SIZE
*--------------------------------------------------------------------*
*                                                                    *
*              COMMUNICATION PARAMETER LIST                          *
*                                                                    *
*--------------------------------------------------------------------*
CCOM     DSECT
         IEZCOM
*--------------------------------------------------------------------*
*                                                                    *
*              CONSOLE INPUT BUFFER                                  *
*                                                                    *
*--------------------------------------------------------------------*
CIB      IEZCIB
*--------------------------------------------------------------------*
*                                                                    *
*              ASCB                                                  *
*                                                                    *
*--------------------------------------------------------------------*
         IHAASCB
*--------------------------------------------------------------------*
*                                                                    *
*              OUCB                                                  *
*                                                                    *
*--------------------------------------------------------------------*
         IRAOUCB
         IEFZB4D0
         IEFZB4D2
         END  TAPEEXCP
./ ADD NAME=TAPEUSRO 0100-99298-99298-1542-01006-01011-00000-SBGOLOB
          TITLE 'TAPEUSRO - EXCP LEVEL TAPE I/O SUBROUTINE WITH USER OP+
               N'
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: TAPEUSRO                                              *
*                                                                     *
*  Function:                                                          *
*  This program is a subroutine that performs tape I/O at the EXCP    *
*  level.  MVS "OPEN" is bypassed, therefore 1) this module must run  *
*  APF authorized, 2) there is no data set access RACF checking (you  *
*  can read any data set without having RACF access to it), 3) the    *
*  tape my be labelled or non-labelled, 4) there are no SMF data set  *
*  activity records made to log access to the tape's data sets.       *
*  Since no RACF access check is made to any of the tape's data sets  *
*  and no SMF records are produced, access to this program should be  *
*  restricted.                                                        *
*                                                                     *
*  The CSECT name will be TAPEEXCP.  This allows the link edit        *
*  and "VCON" references to always use the same module names.         *
*                                                                     *
*  This program supports only reads, no tape output is performed.     *
*  The program's parameter list is mapped by the TAPEBLOK macro.      *
*                                                                     *
*  The same TAPEBLOK should be used for all calls to TAPEUSRO.        *
*                                                                     *
*  Functions provided are:                                            *
*     OPEN   TCMD = $TCMDOPN                                          *
*     READ   TCMD = $TCMDRD                                           *
*     CLOSE  TCMD = $TCMDCLS                                          *
*                                                                     *
*   All functions require the "DDNAME" to be specified.  On an OPEN   *
*   call, the tape unit is verified as a being a supported device,    *
*   the I/O area for the tape is allocated, and a REWIND command is   *
*   issued to position the tape to load point. On a READ call, the    *
*   next physical block of the tape will be read and the I/O area     *
*   address and data length will be returned to the caller.  On a     *
*   CLOSE call, the I/O area will be freed.                           *
*                                                                     *
*   If a tapemark or the end of tape is reached, no data will be      *
*   returned.                                                         *
*                                                                     *
*   In the event of an I/O error, TAPEUSRO will try to issue a sense  *
*   command and return the sense info in TSENSE in the parameter      *
*   block.                                                            *
*                                                                     *
*   Multiple tapes may be OPEN at the same time, TAPEUSRO keeps track *
*   of the tapes by DDNAME.  You must specify the DDNAME on each call.*
*                                                                     *
*   This module has all its work areas in the TAPEBLOK data area, so  *
*   it is re-entrant.  MVS still does not allow I/O from above the    *
*   16-meg line, so the program is written as 24-bit.                 *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
         EJECT
* ------------------------------------------------------------------- *
*                                                                     *
*                         TRACE MACRO                                 *
*                                                                     *
*        THE TRACE FUNCTION CAPTURES AN 8-BYTE 'ID' AND UP TO 3 8-    *
*        BYTE DATA ELEMENTS.                                          *
*                                                                     *
* ------------------------------------------------------------------- *
         MACRO
&NAME    TAPETR &ID=,                                                  +
               &DATA1=,&RDATA1=,                                       +
               &DATA2=,&RDATA2=,                                       +
               &DATA3=,&RDATA3=
         AIF   (T'&DATA1 NE 'O' AND T'&RDATA1 NE 'O').ERR0010
         AIF   (T'&DATA2 NE 'O' AND T'&RDATA2 NE 'O').ERR0020
         AIF   (T'&DATA3 NE 'O' AND T'&RDATA3 NE 'O').ERR0030
         AIF   (T'&ID EQ 'O').ERR0040
         AIF   ((T'&DATA3 EQ 'O') AND (T'&RDATA3 EQ 'O')).DATA010
         AIF   (T'&DATA1 EQ 'O' AND T'&RDATA1 EQ 'O').ERR0050
         AIF   (T'&DATA2 EQ 'O' AND T'&RDATA2 EQ 'O').ERR0050
         AIF   ('&SYSPARM' EQ 'NOTRACE').MEXIT
.DATA010 ANOP
         AIF   ((T'&DATA2 EQ 'O') AND (T'&RDATA2 EQ 'O')).DATA020
         AIF   (T'&DATA1 EQ 'O' AND T'&RDATA1 EQ 'O').ERR0060
.DATA020 ANOP
         AIF   (T'&DATA1 EQ 'O').DATA040
         AIF   ('&DATA1'(1,1) EQ '(').DATA030
         LA    R14,&DATA1         DATA ADDRESS
         MVC   TTRDATA1,0(R14)    MOVE DATA
         AGO   .DATA050
.DATA030 ANOP
         MVC   TTRDATA1,0&DATA1   MOVE DATA
         AGO   .DATA050
.DATA040 ANOP
         AIF   (T'&RDATA1 EQ 'O').DATA050
         STCM  &RDATA1,15,TTRDATA1
.DATA050 ANOP
         AIF   (T'&DATA2 EQ 'O').DATA070
         AIF   ('&DATA2'(1,1) EQ '(').DATA060
         LA    R14,&DATA2         DATA ADDRESS
         MVC   TTRDATA2,0(R14)    MOVE DATA
         AGO   .DATA080
.DATA060 ANOP
         MVC   TTRDATA2,0&DATA2   MOVE DATA
         AGO   .DATA080
.DATA070 ANOP
         AIF   (T'&RDATA2 EQ 'O').DATA080
         STCM  &RDATA2,15,TTRDATA2
.DATA080 ANOP
         AIF   (T'&DATA3 EQ 'O').DATA100
         AIF   ('&DATA3'(1,1) EQ '(').DATA090
         LA    R14,&DATA3         DATA ADDRESS
         MVC   TTRDATA3,0(R14)    MOVE DATA
         AGO   .DATA110
.DATA090 ANOP
         MVC   TTRDATA3,0&DATA3   MOVE DATA
         AGO   .DATA110
.DATA100 ANOP
         AIF   (T'&RDATA3 EQ 'O').DATA110
         STCM  &RDATA3,15,TTRDATA3
.DATA110 ANOP
         BAL   R14,TRACE000       ENTER TRACE ROUTINE
&NAME    DC    CL8'&ID'           TRACE ID
         MEXIT
.ERR0010 ANOP
         MNOTE 12,'DATA1 AND RDATA1 ARE MUTUALLY EXCLUSIVE'
         MEXIT
.ERR0020 ANOP
         MNOTE 12,'DATA2 AND RDATA2 ARE MUTUALLY EXCLUSIVE'
         MEXIT
.ERR0030 ANOP
         MNOTE 12,'DATA3 AND RDATA3 ARE MUTUALLY EXCLUSIVE'
         MEXIT
.ERR0040 ANOP
         MNOTE 12,'ID PARAMETER IS REQUIRED'
         MEXIT
.ERR0050 ANOP
         MNOTE 12,'DATA3/RDATA3 IS NOT VALID UNLESS BOTH DATA1/RDATA1 A+
               ND DATA2/RDATA2 ARE SPECIFIED'
         MEXIT
.ERR0060 ANOP
         MNOTE 12,'DATA2/RDATA2 IS NOT VALID UNLESS DATA1/RDATA1 IS SPE+
               CIFIED'
.MEXIT   ANOP
         MEXIT
         MEND
         EJECT
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
TAPEEXCP CSECT
TAPEEXCP AMODE 24
TAPEEXCP RMODE 24
         USING TAPEEXCP,R12
         USING PSA,R0                DEFINE PSA BASE
         USING CMDBLOK,R10           DEFINE PARAMETER BLOCK BASE
         USING IOBLK,R9              DEFINE BASE
         STM   R14,R12,12(R13)       SAVE REGS
         LR    R12,R15               SET BASE REG
         LR    R10,R1                COPY PARAMETER BLOCK ADDRESS
         LA    R1,TSAVE              OUR SAVE AREA ADDRESS
         ST    R13,TSAVE+4           SAVE SAVE AREA ADDRESS
         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO CALLER'S
         LA    R13,TSAVE             SET SAVE AREA ADDRESS
         B     TAPE0000              SKIP EYECATCHER
         DC    CL8'TAPEUSRO'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
TAPE0000 DS    0H
         TAPETR ID=ENTRY,            TRACE CALLS                       +
               DATA1=TDDNAME,        .. FOR DDNAME                     +
               DATA2=TCMD            .. COMMAND
         CLI   TCMD,$TCMDOPN         OPEN TAPE DCB?
         BE    OPEN0000              YES
         CLI   TCMD,$TCMDRD          READ A BLOCK?
         BE    READ0000              YES
         CLI   TCMD,$TCMDCLS         CLOSE DCB?
         BE    CLOSE000              YES
         MVI   TSTAT,$TSTATIC        INVALID COMMAND
         B     TAPE9900              EXIT
         EJECT
* ------------------------------------------------------------------- *
*                                                                     *
*             OPEN TAPE DCB                                           *
*                                                                     *
* ------------------------------------------------------------------- *
OPEN0000 DS    0H
         TAPETR ID=OPEN
         ICM   R9,15,TCHAIN          FIRST I/O BLOCK ON THE CHAIN
         BZ    OPEN0020              NO BLOCK ON CHAIN
OPEN0010 DS    0H
         CLC   IODDNAME,TDDNAME      I/O BLOCK ALREADY ON THE CHAIN?
         BE    OPEN0190              YES.. CANNOT ALLOW A DUPLICATE
         ICM   R9,15,IONEXT          NEXT BLOCK ON CHAIN
         BNZ   OPEN0010              PROCESS ALL OF THEM
* ------------------------------------------------------------------- *
*             DETERMINE ADDRESS SPACE TYPE                            *
* ------------------------------------------------------------------- *
OPEN0020 DS    0H
         L     R1,PSAANEW            OUR ASCB ADDRESS
         USING ASCB,R1               DEFINE BASE
         L     R15,ASCBJBNI          JOB NAME ADDRESS
         LA    R15,0(R15)            CLEAR HIGH BIT(S)
         LTR   R15,R15               JOB NAME PRESENT?
         BNZ   OPEN0030              YES
         L     R1,ASCBOUCB           OUR OUCB ADDRESS
         USING OUCB,R1               DEFINE BASE
         BAL   R14,AM31              SWITCH TO 31-BIT MODE
         TAPETR ID=OUCBYFL,                                            +
               RDATA1=R1,                                              +
               DATA2=OUCBYFL
         TM    OUCBYFL,OUCBSTT       IS THIS A STARTED TASK?
         BNO   OPEN0030              NO
         OI    TASTYPE,$TASSTC       ADDRESS SPACE IS AN STC
         TAPETR ID=ASIDSTC
OPEN0030 DS    0H
         BAL   R14,AM24              SWITCH TO 24-BIT MODE
         XC    UCBTOKEN,UCBTOKEN     CLEAR THE TOKEN
         XC    UCBWORK,UCBWORK       CLEAR THE WORK AREA TOO
* ------------------------------------------------------------------- *
*             LOCATE UCB FOR REQUESTED DEVICE TYPE                    *
* ------------------------------------------------------------------- *
OPEN0035 DS    0H
         MODESET MODE=SUP,KEY=ZERO   SUPERVISOR STATE, KEY ZERO
         UCBSCAN ADDRESS,            .. RETURN ADDRESS OF THE UCB      +
               UCBPTR=UCBADDR,       .. RETURNED ADDRESS               +
               WORKAREA=UCBWORK,     .. WORKAREA FOR UCBSCAN           +
               DEVCLASS=TAPE,        .. ONLY NEED TAPE UCB'S           +
               DYNAMIC=YES,          .. INCLUDE DYNAMICALLY ADDED      +
               PIN,                  .. DON'T LET ANYONE DELETE IT YET +
               TEXT=UCBTEXT,         .. REASON FOR PIN                 +
               PTOKEN=UCBTOKEN       .. TOKEN
         MODESET MODE=PROB,KEY=NZERO PROBLEM STATE, PROBLEM KEY
         ICM   R3,15,UCBADDR         FIRST UCB'S ADDRESS
         USING UCBOB,R3              DEFINE BASE
         BZ    OPEN0070              NO MORE DEVICES
OPEN0040 DS    0H
         TM    UCBSTAT,UCBONLI       IS THIS DEVICE ONLINE?
         BNO   OPEN0035              NO
         TM    UCBSTAT,UCBALOC       IS IT ALREADY ALLOCATED?
         BO    OPEN0035              YES
         TM    UCBTBYT3,UCB3TAPE     IS DEVICE A TAPE UNIT?
         BNO   OPEN0035              NO
         CLI   UCBTBYT4,UCB3480      IS IT A 3480?
         BE    OPEN0060              YES
         CLI   TDEVT,$T3480          3480 WANTED?
         BE    OPEN0035              YES
         CLI   TDEVT,$T3420B         6250 BPI WANTED?
         BE    OPEN0050              YES
         TM    UCBTBYT1,UCBD1600     1600 BPI DRIVE?
         BO    OPEN0090              YES
         TM    UCBTBYT2,UCBDUDN1     800/1650 DRIVE?
         BO    OPEN0090              YES
         TM    UCBTBYT2,UCBDUDN2     1600/6250 DRIVE?
         BO    OPEN0090              YES
         B     OPEN0035              OTHERWISE LOOK FOR ANOTHER UNIT
OPEN0050 DS    0H
         TM    UCBTBYT1,UCBD6250     6250 BPI DRIVE?
         BO    OPEN0080              YES
         TM    UCBTBYT2,UCBDUDN2     1600/6250 DRIVE?
         BO    OPEN0080              YES
         B     OPEN0035              OTHERWISE LOOK FOR ANOTHER UNIT
OPEN0060 DS    0H
         CLI   TDEVT,$T3480          3480 WANTED?
         BNE   OPEN0035              NO
         MVI   TDENSITY,$DEN3480     SET FOR 3480 DENSITY
         B     OPEN0100
OPEN0070 DS    0H
         MVI   TSTAT,$TSTATNU        NO UNIT AVAILABLE
         B     TAPE9900              AND EXIT
OPEN0080 DS    0H
         MVI   TDENSITY,$DEN6250     SET FOR 6250 BPI DENSITY
         B     OPEN0100
OPEN0090 DS    0H
         MVI   TDENSITY,$DEN1600     SET FOR 1600 BPI DENSITY
         B     OPEN0100
* ------------------------------------------------------------------- *
*             UCB LOCATED                                             *
* ------------------------------------------------------------------- *
OPEN0100 DS    0H
         TAPETR ID=UCBLOC,           UCB HAS BEEN LOCATED              +
               RDATA1=R3             .. INCLUDE UCB'S ADDRESS
* ------------------------------------------------------------------- *
*             ALLOCATE THE UNIT                                       *
* ------------------------------------------------------------------- *
         LA    R2,T99RB              DAIR REQUEST BLOCK ADDRESS
         USING S99RB,R2              DEFINE BASE
         ST    R2,T99RBA             SET ADDRESS IN POINTER
         OI    T99RBA,X'80'          SET END OF LIST
         XC    T99RB(T99RBL),T99RB   CLEAR REQUEST BLOCK
         MVI   S99RBLN,T99RBL        SET LENGTH
         MVI   S99VERB,S99VRBAL      SET VERB (ALLOCATE)
         LA    R1,T99DDPA            FIRST TEXT UNIT POINTER
         ST    R1,S99TXTPP           SET TEXT POINTER ADDRESS
         LA    R1,T99DDP             DD PARAMETER'S ADDRESS
         ST    R1,T99DDPA            SET ADDRESS
         LA    R1,T99DNP             DSN PARAMETER'S ADDRESS
         ST    R1,T99DNPA            SET ADDRESS
         LA    R1,T99LBP             LABEL TYPE PARAMETER'S ADDRESS
         ST    R1,T99LBPA            SET ADDRESS
         LA    R1,T99DSP             DATASET SEQUENCE # PARAMETERS
         ST    R1,T99DSPA            SET ADDRESS
         LA    R1,T99UTP             UNIT PARAMETER'S ADDRESS
         ST    R1,T99UTPA            SET ADDRESS
         LA    R1,T99VLP             UNIT PARAMETER'S ADDRESS
         ST    R1,T99VLPA            SET ADDRESS
         LA    R1,T99STP             STATUS (DISP=NEW)
         ST    R1,T99STPA            SET ADDRESS
         LA    R1,T99DPP             DISPOSITION (DISP=KEEP)
         ST    R1,T99DPPA            SET ADDRESS
         LA    R1,T99DMP             DEFERRED MOUNT PARAMETER
         ST    R1,T99DMPA            SET ADDRESS
         OI    T99DMPA,X'80'         SET END OF LIST ADDRESS
         MVC   T99DDP(T99L),T99      INITIALIZE ALL PARAMETERS
         MVC   T99DD,TDDNAME         SET DDNAME
         MVC   T99DN,TDDNAME         SET DSN
         MVC   T99UT(3),UCBNAME      SET UNIT
         MVC   T99VL(3),VOLPRFX      SET VOLSER PREFIX
         MVC   T99VL+3(3),UCBNAME    SET VOLSER SUFFIX
         LA    R1,T99RBA             POINTER'S ADDRESS
         DYNALLOC                    ALLOCATE THE DRIVE
         STH   R15,T99RC             SET RETURN CODE
         LTR   R15,R15               ALLOCATED SUCCESSFULLY?
         BNZ   OPEN0200              NO
* ------------------------------------------------------------------- *
*             ACQUIRE I/O CONTROL BLOCK                               *
* ------------------------------------------------------------------- *
         GETMAIN R,LV=IOBLKL         ACQUIRE CONTROL BLOCK STORAGE
         LR    R9,R1                 COPY STORAGE ADDRESS
         LA    R14,TCHAIN            INITIALIZE 'CURRENT' POINTER
         ICM   R15,15,TCHAIN         FIRST BLOCK ON CHAIN
         BZ    OPEN0120              END OF CHAIN FOUND
OPEN0110 DS    0H
         LR    R14,R15               COPY CURRENT BLOCK'S ADDRESS
         ICM   R15,15,IONEXT-IOBLK(R15) NEXT ON CHAIN
         BNZ   OPEN0110              FIND END OF CHAIN
OPEN0120 DS    0H
         ST    R14,IOPREV            SET 'PREVIOUS' POINTER
         XC    IONEXT,IONEXT         ZERO 'NEXT' POINTER
         ST    R9,IONEXT-IOBLK(R14) 'NEXT' IN PREVIOUS BLOCK
         MVC   IODDNAME,TDDNAME      SET DD NAME
* ------------------------------------------------------------------- *
*             ACQUIRE I/O AREA                                        *
* ------------------------------------------------------------------- *
         GETMAIN R,LV=$MAXLEN        ACQUIRE I/O AREA
         ST    R1,IOAREA             SAVE I/O AREA ADDRESS
         TAPETR ID=NEWIOBLK,                                           +
               RDATA1=R9,            .. I/O BLOCK'S ADDRESS            +
               RDATA2=R1             .. I/O AREA'S ADDRESS
* ------------------------------------------------------------------- *
*             INITIALIZE CCW'S                                        *
* ------------------------------------------------------------------- *
         MVC   IOREAD,READCCW        INITIALIZE READ CCW
         MVC   IOREW,REWCCW          INITIALIZE REW CCW
         MVC   IOSENSE,SENSECCW      INITIALIZE SENSE CCW
         L     R1,IOAREA             I/O AREA ADDRESS
         STCM  R1,7,IOREAD+1         INITIALIZE I/O AREA ADDRESS
         STCM  R1,7,IOREW+1
         LA    R1,TSENSE             SENSE DATA ADDRESS
         STCM  R1,7,IOSENSE+1        INITIALIZE SENSE DATA ADDRESS
* ------------------------------------------------------------------- *
*             INITIALIZE SENSE INFO                                   *
* ------------------------------------------------------------------- *
         XC    TSENSE,TSENSE         INITIALIZE SENSE DATA
         LA    R5,IOIOB              IOB STORAGE ADDRESS
         LA    R6,IODCB              DCB STORAGE ADDRESS
         LA    R7,IODEB              DEB STORAGE ADDRESS
         USING IOB,R5
         USING IHADCB,R6
         USING DEB,R7
* ------------------------------------------------------------------- *
*           INITIALIZE IOB                                            *
* ------------------------------------------------------------------- *
         XC    IOIOB(IOBL),IOIOB     CLEAR IOB STORAGE
         MVI   IOBFLAG1,X'02'        SET FLAG BYTE 1
         ST    R6,IOBDCBPT           SET DCB ADDRESS
* ------------------------------------------------------------------- *
*           INITIALIZE DCB                                            *
* ------------------------------------------------------------------- *
         MVC   IODCB(DCBL),INITDCB   INITIALIZE DCB
         MVC   DCBDDNAM,TDDNAME      SET DD NAME
         LA    R1,DEBBASIC           DEB BASIC SECTION ADDRESS
         ST    R1,DCBDEBAD           INSERT DEB ADDRESS
         ST    R5,DCBIOBAD           INSERT IOB ADDRESS
         MVC   DCBMACRF,DCBMACR      COPY DCB MACRO FORMAT PARAMETERS
         MVC   DCBIFLGS,DCBIFLG      COPY I/O ERROR FLAGS
         OI    DCBOFLGS,DCBOFOPN     DCB IS OPEN
* ------------------------------------------------------------------- *
*           INITIALIZE DEB                                            *
* ------------------------------------------------------------------- *
         XC    DEBPREFX(DEBPREFE-DEBPREFX),DEBPREFX  CLEAR PREFIX
         XC    DEBBASIC(DEBBASND-DEBBASIC),DEBBASIC  CLEAR BASIC
         MVC   DEBTCBAD,PSATNEW      SET TCB ADDRESS
         MVI   DEBAMLNG,16           SET ACCESS METHOD SECTION LENGTH
         MVI   DEBOFLGS,DEBDSOLD     DISPOSITION 'OLD'
         MVI   DEBOPATB,DEBLEAVE+DEBINPUT
         MVI   DEBNMEXT,1            SET NUMBER OF EXTENTS
         MVI   DEBPRIOR,X'EB'        IT WORKS
         ST    R6,DEBDCBAD           INSERT ASSOCIATED DCB ADDRESS
         MVI   DEBDEBID,X'0F'        IDENTIFY THIS AS A DEB
         STCM  R3,7,DEBSUCBA+1       ASSOCIATED UCB ADDRESS
         L     R1,CVTPTR             CVT ADDRESS
         USING CVT,R1                DEFINE CVT BASE
         MVC   DEBAPPAD,CVTXAPG      I/O APPENDAGE VECTOR TABLE ADDR
         MVC   DEBSDVM,TDENSITY      SET DENSITY
* ------------------------------------------------------------------- *
*           ADD DEB TO DEBCHAIN FROM TCB AND TO DEBTABLE              *
* ------------------------------------------------------------------- *
         MODESET MODE=SUP,KEY=ZERO   SUPERVISOR STATE, KEY ZERO
         L     R1,PSATNEW            OUR TCB ADDRESS FROM THE PSA
         USING TCB,R1                DEFINE BASE
         L     R15,TCBDEB            FIRST DEB ON DEB CHAIN
         LA    R2,DEBBASIC           'BASIC' PORTION OF DEB
OPEN0130 DS    0H
         STCM  R15,7,DEBDEBB         INSERT PREVIOUS ADDRESS
         CS    R15,R2,TCBDEB         ADD OUR DEB TO CHAIN
         BNE   OPEN0130              UNSUCCESSFUL... TRY AGAIN
         DEBCHK (R6),                USE DEBCHK (REFERENCE DCB NOT DEB)+
               AM=EXCP,              .. EXCP ACCESS METHOD             +
               TYPE=ADD              .. ADD A DEB TO DEBTABLE
         LR    R2,R15                SAVE RETURN CODE
         MODESET MODE=PROB,KEY=NZERO PROBLEM STATE, PROBLEM KEY
         LTR   R2,R2                 DEB ADDED SUCCESSFULLY?
         BZ    OPEN0140              YES
         MVI   TSTAT,$TSTATAF        DEB ADD FAILED
         STC   R2,TDEBRC             RETURN RETURN CODE
         B     TAPE9900              AND EXIT
OPEN0140 DS    0H
         TM    TASTYPE,$TASSTC       RUNNING AS A STARTED TASK?
         BNO   OPEN0160              NO
         TAPETR ID=STCWTO
         ICM   R1,15,TCOMM           COMMUNICATION PARM LIST PRESENT?
         BNZ   OPEN0150              YES
         LA    R15,TCOMM             OUTPUT AREA FOR EXTRACT
         EXTRACT (R15),FIELDS=COMM   'EXTRACT' COMMUNCATION BLOCK ADDR
         ICM   R1,15,TCOMM           COMMUNICATION BLOCK ADDRESS
OPEN0150 DS    0H
         BZ    OPEN0180              NO
         USING CCOM,R1               DEFINE BASE
         L     R1,COMCIBPT           CIB ADDRESS FROM COMM PARM LIST
         USING CIB,R1                DEFINE CIB BASE
         XC    TCID,TCID             CLEAR CONSOLE ID
         MVC   TCID+3,CIBCONID       SAVE CONSOLE ID
         GETMAIN R,LV=WTO1L          ACQUIRE STORAGE FOR WTO
         LR    R5,R1                 COPY WTO ADDRESS
         MVC   0(WTO1L,R5),WTO1I     INITIALIZE WTO MESSAGE
         MVC   15(6,R5),TAPEVOL      SET VOLSER INTO WTO
         MVC   33(8,R5),TDDNAME      SET DDNAME INTO WTO
         MVC   51(3,R5),UCBNAME      SET DEVICE NAME INTO WTO
         WTO   MF=(E,(R5)),          ISSUE WTO                         +
               CONSID=TCID           .. TO THIS CONSOLE
         FREEMAIN R,A=(R5),LV=WTO1L  RELEASE WTO STORAGE
         B     OPEN0170
OPEN0160 DS    0H
         TAPETR ID=BATCHWTO
         GETMAIN R,LV=WTO2L          ACQUIRE STORAGE FOR WTO
         LR    R5,R1                 COPY WTO ADDRESS
         MVC   0(WTO2L,R5),WTO2I     INITIALIZE WTO MESSAGE
         MVC   36(3,R5),UCBNAME      SET DEVICE NAME INTO WTO
         WTO   MF=(E,(R5))           ISSUE WTO
         FREEMAIN R,A=(R5),LV=WTO2L  RELEASE WTO STORAGE
OPEN0170 DS    0H
         TAPETR ID=OPENREW
         LA    R1,IOREW              REWIND CCW
         BAL   R11,IO0000            REWIND THE TAPE
         TAPETR ID=OPENDONE
         B     TAPE9900              AND EXIT
OPEN0180 DS    0H
         TAPETR ID=NOCCOM
         MVI   TSTAT,$TSTATNC        NO CONSOLE COMMUNICATION BLOCK
         B     TAPE9900              AND EXIT
OPEN0190 DS    0H
         TAPETR ID=DUPOPEN
         MVI   TSTAT,$TSTATOP        TAPE IS ALREADY OPEN
         B     TAPE9900              AND EXIT
OPEN0200 DS    0H
         TAPETR ID=ALOCFAIL
         MVI   TSTAT,$TSTAT99        DAIR FAILURE
         B     TAPE9900              AND EXIT
         EJECT
* ------------------------------------------------------------------- *
*                                                                     *
*             READ A BLOCK                                            *
*                                                                     *
* ------------------------------------------------------------------- *
READ0000 DS    0H
         TAPETR ID=READ
         ICM   R9,15,TCHAIN          FIRST BLOCK ON CHAIN
READ0010 DS    0H
         BZ    READ0070              I/O BLOCK NOT FOUND
         CLC   IODDNAME,TDDNAME      CORRECT I/O BLOCK FOUND?
         BE    READ0020              YES
         ICM   R9,15,IONEXT          NEXT ON CHAIN
         B     READ0010              KEEP LOOKING
READ0020 DS    0H
         LA    R5,IOIOB              IOB ADDRESS
         LA    R6,IODCB              DCB ADDRESS
         LA    R7,IODEB              DEB ADDRESS
         LA    R1,IOREAD             READ CCW'S ADDRESS
         BAL   R11,IO0000            LINK TO I/O ROUTINE
         CLI   TSTAT,$TSTATOK        I/O SUCCESSFUL?
         BNE   TAPE9900              NO.. GET OUTTA HERE
         SR    R0,R0                 CLEAR REGISTER
         SR    R1,R1                 CLEAR REGISTER
         ICM   R0,3,IOREAD+6         LENGTH ATTEMPTED
         ICM   R1,3,IOBSTDRD+14      RESIDUAL LENGTH
         SR    R0,R1                 LENGTH READ
         STCM  R0,3,TLENGTH          SET LENGTH
         MVC   TIOAREA,IOAREA        SET I/O AREA ADDRESS
         TAPETR ID=READOK,           READ COMPLETE                     +
               DATA1=TIOAREA,        .. I/O AREA ADDRESS               +
               DATA2=TLENGTH         .. DATA LENGTH
         TM    IOFLAG,$IODEN         DENSITY DETERMINED?
         BO    TAPE9900              YES
         OI    IOFLAG,$IODEN         DENSITY WILL BE DETERMINED
         CLI   DEBSDVM,$DEN3480      3480 TAPE DRIVE?
         BE    READ0050              YES
         LA    R1,IOSENSE            SENSE CCW
         BAL   R11,IO0000            ISSUE SENSE COMMAND
         CLI   TSTAT,$TSTATOK        I/O SUCCESSFUL?
         BNE   TAPE9900              NO.. BYPASS DENSITY STUFF
         TM    TSENSE+3,$SENSEPE     PE MODE?
         BO    READ0030              YES
         TM    TSENSE+9,$SENSE62     6250 CAPABLE?
         BO    READ0040              YES
         MVI   IODEN,2               DENSITY IS 800 BPI
         B     READ0060
READ0030 DS    0H
         TAPETR ID=MODE3
         MVI   IODEN,3               DENSITY IS 1600 BPI
         B     READ0060
READ0040 DS    0H
         TAPETR ID=MODE4
         MVI   IODEN,4               DENSITY IS 6250 BPI
         B     READ0060
READ0050 DS    0H
         TAPETR ID=MODE5
         MVI   IODEN,5               TAPE IS A 3480
READ0060 DS    0H
         MVC   TDENSITY,IODEN        COPY DENSITY
         B     TAPE9900              AND EXIT
READ0070 DS    0H
         TAPETR ID=NOTOPEN
         MVI   TSTAT,$TSTATNO        TAPE IS NOT OPEN
         B     TAPE9900              AND EXIT
         EJECT
* ------------------------------------------------------------------- *
*                                                                     *
*             PERFORM I/O                                             *
*                                                                     *
* ------------------------------------------------------------------- *
IO0000   DS    0H
         TAPETR ID=IO,               STARTING I/O                      +
               DATA1=(R1)            .. CCW BEING ISSUED
         CLI   0(R1),CCWCMDRW        IS COMMAND REWIND?
         BE    IO0010                YES
         CLI   0(R1),CCWCMDRU        IS COMMAND REWIND/UNLOAD?
         BE    IO0010                YES
         TM    IOFLAG,$IOEOT         TAPE AT PHYSICAL EOT?
         BO    IO0100                YES..
IO0010   DS    0H
         ST    R1,IOBSTART           SET CCW STRING ADDRESS
         LA    R1,IOECB              ECB'S ADDRESS
         STCM  R1,7,IOBECBPB         SET ECB ADDRESS
         LA    R1,IODCB              DCB'S ADDRESS
         ST    R1,IOBDCBPT           SET DCB ADDRESS
IO0020   DS    0H
         TAPETR ID=EXCP
         XC    IOECB,IOECB           CLEAR THE ECB
         EXCP  IOBSTDRD              START THE I/O
         WAIT  ECB=IOECB             WAIT FOR I/O COMPLETION
         TAPETR ID=EXCPDONE,         I/O COMPLETED                     +
               DATA1=IOECB           .. SAVE ECB
         CLI   IOECB,X'44'           RETRY THE I/O?
         BE    IO0020                YES
         CLI   IOECB,X'7F'           SUCCESSFUL?
         BNE   IO0050                NO
         L     R1,IOBSTART           FIRST CCW
         CLI   0(R1),CCWCMDRW        REWIND?
         BE    IO0030                YES
         CLI   0(R1),CCWCMDRU        REWIND/UNLOAD?
         BNE   IO0040                NO
IO0030   DS    0H
         TAPETR ID=REWOUND
         NI    IOFLAG,255-$IOEOT     RESET EOT FLAG
IO0040   DS    0H
         TAPETR ID=GOODIO
         MVI   TSTAT,$TSTATOK        I/O WAS SUCCESSFUL
         BR    R11                   AND RETURN
IO0050   DS    0H
         TAPETR ID=BADIO
         L     R1,IOBSTART           FIRST CCW IN STRING
         CLI   0(R1),CCWCMDSE        WAS I/O A SENSE COMMAND?
         BE    IO0120                YES.. SENSE FAILED
         NI    IOFLAG,255-$IOUEX     TURN OFF UNIT EXCEPTION FLAG
         TM    IOBFLAG1,IOBIOERR     UNIT EXCEPTION?
         BNO   IO0060                NO
         OI    IOFLAG,$IOUEX         INDICATE UNIT EXCEPTION OCCURRED
         TAPETR ID=UNITEXPT
IO0060   DS    0H
         LA    R1,IOSENSE            SENSE CCW'S ADDRESS
         ST    R1,IOBSTART           SET CCW STRING ADDRESS
IO0070   DS    0H
         XC    IOECB,IOECB           CLEAR THE ECB
         TAPETR ID=SENSEIO
         EXCP  IOBSTDRD              START THE I/O
         WAIT  ECB=IOECB             WAIT FOR I/O COMPLETION
         TAPETR ID=SNSEDONE,         SENSE HAS COMPLETED               +
               DATA1=IOECB
         CLI   IOECB,X'44'           RETRY THE I/O?
         BE    IO0070                YES
         CLI   IOECB,X'7F'           SUCCESSFUL?
         BNE   IO0110                NO
         TAPETR ID=GOODSNSE,         SENSE SUCCESSFUL                  +
               DATA1=TSENSE,         .. FIRST 8 BYTES OF SENSE DATA    +
               DATA2=TSENSE+8        .. NEXT 8 BYTES
         TM    IOFLAG,$IOUEX         UNIT EXEPTION ON ORIGINAL I/O?
         BO    IO0080                YES
         TAPETR ID=IOEWSNSE
         MVI   TSTAT,$TSTATIE        I/O ERROR WITH SENSE AVAILABLE
         BR    R11                   RETURN
IO0080   DS    0H
         TM    TSENSE+4,$SENSETI     TAPE AT PHYSICAL EOT?
         BO    IO0090                YES
         TAPETR ID=TAPEMARK
         MVI   TSTAT,$TSTATTM        TAPE MARK REACHED
         BR    R11                   EXIT
IO0090   DS    0H
         TAPETR ID=PEOT
         OI    IOFLAG,$IOEOT         TAPE IS AT EOT
IO0100   DS    0H
         TAPETR ID=PEOT
         MVI   TSTAT,$TSTATPE        EOT REACHED (PHYSICAL END)
         BR    R11                   EXIT
IO0110   DS    0H
         TAPETR ID=SFAIL1
         MVI   TSTAT,$TSTATIX        SENSE FAILED AFTER AN I/O ERROR
         BR    R11                   EXIT
IO0120   DS    0H
         TAPETR ID=SFAIL2
         MVI   TSTAT,$TSTATSF        SENSE FAILED
         BR    R11                   EXIT
         EJECT
* ------------------------------------------------------------------- *
*                                                                     *
*             CLOSE TAPE DCB                                          *
*                                                                     *
* ------------------------------------------------------------------- *
CLOSE000 DS    0H
         TAPETR ID=CLOSE
         ICM   R9,15,TCHAIN          FIRST BLOCK ON CHAIN
CLOSE010 DS    0H
         BZ    CLOSE110              I/O BLOCK NOT FOUND
         CLC   IODDNAME,TDDNAME      CORRECT I/O BLOCK FOUND?
         BE    CLOSE020              YES
         ICM   R9,15,IONEXT          NEXT ON CHAIN
         B     CLOSE010              KEEP LOOKING
* ------------------------------------------------------------------- *
*             REMOVE THIS I/O BLOCK FROM THE CHAIN                    *
* ------------------------------------------------------------------- *
CLOSE020 DS    0H
         TAPETR ID=IOBLKFD,          I/O BLOCK LOCATED                 +
               RDATA1=R9             .. I/O BLOCK'S ADDRESS
         LA    R2,T99RB              REQUEST BLOCK ADDRESS
         MVI   S99VERB,S99VRBUN      SET VERB (UNALLOCATE)
         MVC   T99DD,TDDNAME         SET DDNAME
         OI    T99DDPA,X'80'         SET END OF LIST
         LA    R1,T99RBA             POINTER'S ADDRESS
         DYNALLOC                    FREE THE UNIT
         STH   R1,T99RC              SAVE RETURN CODE
         LTR   R15,R15               SUCCESSFUL?
         BZ    CLOSE030              YES
         TAPETR ID=FREEFAIL,                                           +
               RDATA1=R15
         MVI   TSTAT,$TSTAT99        SVC 99 FAILED
         B     TAPE9900              EXIT
CLOSE030 DS    0H
         TAPETR ID=UNCHAIN
         ICM   R1,15,IOPREV          PREVIOUS BLOCK ON THE CHAIN
         BZ    CLOSE040              NO PREVIOUS BLOCK
         MVC   IONEXT-IOBLK(4,R1),IONEXT   CHAIN PREVIOUS TO NEXT
CLOSE040 DS    0H
         ICM   R1,15,IONEXT          NEXT BLOCK ON CHAIN
         BZ    CLOSE050              NO NEXT BLOCK
         MVC   IOPREV-IOBLK(4,R1),IOPREV   CHAIN NEXT TO PREVIOUS
CLOSE050 DS    0H
         LA    R5,IOIOB              IOB ADDRESS
         LA    R6,IODCB              DCB ADDRESS
         LA    R7,IODEB              DEB ADDRESS
* ------------------------------------------------------------------- *
*             SIMULATE "CLOSE"                                        *
* ------------------------------------------------------------------- *
         MODESET MODE=SUP,KEY=ZERO   SUPERVISOR STATE, KEY ZERO
         DEBCHK (R6),                USE DEBCHK (REFERENCE DCB NOT DEB)+
               TYPE=DELETE           .. TO DELETE THE DEB FROM DEBTABLE
         LTR   R15,R15               DEBCHK SUCCESSFUL?
         BNZ   CLOSE100              NO
         TAPETR ID=DEBDELOK
CLOSE060 DS    0H
         LA    R2,DEBBASIC           BASIC PORTION OF DEB
         L     R1,PSATNEW            CURRENT TCB ADDRESS FROM PSA
         USING TCB,R1                DEFINE DCB BASE
         SR    R3,R3                 CLEAR REGISTER
         ICM   R3,7,TCBDEB+1         1ST DEB ON DEB CHAIN
         LA    R4,TCBDEB             ADDRESS'S ADDRESS
CLOSE070 DS    0H
         CR    R3,R2                 IS THIS THE CORRECT DEB?
         BE    CLOSE080              YES
         LA    R4,DEBDEBAD-DEBBASIC(R3)   NEXT DEB ADDRESS ADDRESS
         ICM   R3,7,DEBDEBB-DEBBASIC(R3)  NEXT DEB
         BNZ   CLOSE070              CHECK AGAIN
         B     CLOSE090              COULDN'T FIND THE DEB
CLOSE080 DS    0H
         ICM   R2,7,DEBDEBB          NEXT DEB ON CHAIN
         ICM   R2,8,0(R4)            SAVE ACCESS METHOD SECTION LENGTH
         ICM   R3,15,0(R4)           CS WILL USE ALL 4 BYTES
         CS    R3,R2,0(R4)           REMOVE DEB FROM DEB CHAIN
         BNE   CLOSE060              SOMETHING CHANGED, TRY AGAIN
         MODESET MODE=PROB,KEY=NZERO RETURN TO OUR NORMAL SELF
         TAPETR ID=FREEIO
         L     R1,IOAREA             I/O AREA ADDRESS
         FREEMAIN R,A=(1),LV=$MAXLEN FREE I/O AREA
         FREEMAIN R,A=(9),LV=IOBLKL  FREE I/O BLOCK
         TAPETR ID=CLSEDONE
         MVI   TSTAT,$TSTATOK        STATUS
         B     TAPE9900              AND EXIT
CLOSE090 DS    0H
         TAPETR ID=NODEB
         MVI   TSTAT,$TSTATXD        DEB NOT FOUND
         MODESET MODE=PROB,KEY=NZERO RETURN TO OUR NORMAL SELF
         B     TAPE9900              AND EXIT
CLOSE100 DS    0H
         TAPETR ID=DEBDELF
         MVI   TSTAT,$TSTATDF        DEBCHK TYPE=DELETE FAILED
         STC   R15,TDEBRC            RETURN RETURN CODE
         MODESET MODE=PROB,KEY=NZERO RETURN TO OUR NORMAL SELF
         B     TAPE9900              AND EXIT
CLOSE110 DS    0H
         TAPETR ID=NOTOPEN
         MVI   TSTAT,$TSTATNO        TAPE IS NOT OPEN
         B     TAPE9900              AND EXIT
TAPE9900 DS    0H
         TAPETR ID=EXIT,             TRACE EXITS                       +
               DATA1=TDDNAME,        .. FOR DDNAME                     +
               DATA2=TCMD            .. COMMAND
         CLI   TCMD,$TCMDCLS         CLOSE COMMAND?
         BNE   TAPE9910              NO
         OC    TCHAIN,TCHAIN         ANYTHING ON CHAIN?
         BNZ   TAPE9910              YES
         ICM   R1,15,TTR1ST          FIRST TRACE ENTRY
         BZ    TAPE9910              NO TABLE TO FREE
         L     R0,TTRSIZE            TRACE TABLE SIZE
         FREEMAIN R,A=(1),LV=(0)     RELEASE TRACE TABLE STORAGE
         XC    TTR1ST,TTR1ST         CLEAR TRACE TABLE 1ST ENTRY
         XC    TTRLAST,TTRLAST       CLEAR TRACE TABLE LAST ENTRY
         XC    TTRCURR,TTRCURR       CLEAR TRACE TABLE CURRENT ENTRY
TAPE9910 DS    0H
         L     R13,4(R13)            RESTORE REGISTER 13
         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS
         SR    R15,R15               GIVE GOOD RETURN CODE
         BR    R14                   RETURN TO CALLER
*--------------------------------------------------------------------*
*                                                                    *
*              ADDRESS MODE SWITCHING                                *
*                                                                    *
*--------------------------------------------------------------------*
AM24     DS    0H
         LA    R14,0(R14)            CLEAR HIGH BIT(S)
         BSM   R0,R14                SWITCH TO 24-BIT MODE AND EXIT
AM31     DS    0H
         LA    R14,0(R14)            CLEAR HIGH BIT(S)
         O     R14,X80               TURN ON HIGH BIT
         BSM   R0,R14                SWITCH TO 31-BIT MODE AND EXIT
*--------------------------------------------------------------------*
*                                                                    *
*              TRACE ROUTINE                                         *
*                                                                    *
*--------------------------------------------------------------------*
TRACE000 DS    0H
         USING TRENTRY,R1            DEFINE BASE
         STM   R0,R15,TTRSAVE        SAVE ALL REGISTERS
         ICM   R1,15,TTRCURR         CURRENT ENTRY
         BNZ   TRACE010              BUILD TRACE ENTRY
         L     R2,TTRSIZE            TRACE TABLE SIZE
         GETMAIN R,LV=(R2)           ACQUIRE TRACE TABLE STORAGE
         ST    R1,TTR1ST             SAVE TRACE TABLE STORAGE
         ST    R1,TTRCURR
         AR    R2,R1                 PLUS TOTAL SIZE
         SH    R2,=Y(TRENTRYL)       MINUS 1 ENTRY'S LENGTH
         ST    R2,TTRLAST            SET LAST ENTRY ADDRESS
         L     R0,TTR1ST             FIRST ENTRY
         L     R1,TTRSIZE            TOTAL SIZE
         SR    R2,R2                 CLEAR REGISTER
         SR    R3,R3                 CLEAR REGISTER
         MVCL  R0,R2                 INITIALIZE TABLE
         L     R1,TTR1ST             RESET TO 1ST ENTRY
         B     TRACE030
TRACE010 DS    0H
         C     R1,TTRLAST            USING LAST ENTRY?
         BNE   TRACE020              NO
         L     R1,TTR1ST             'WRAP' TABLE
TRACE020 DS    0H
         OC    0(TRENTRYL,R1),0(R1)  EMPTY?
         BZ    TRACE030              YES
         LA    R1,TRENTRYL(R1)       NEXT ENTRY
TRACE030 DS    0H
         MVC   TREID,0(R14)          SET ID
         MVC   TREF1,TTRDATA1        SET DATA 1
         MVC   TREF2,TTRDATA2        SET DATA 2
         MVC   TREF3,TTRDATA3        SET DATA 3
         XC    TTRDATA1(24),TTRDATA1 CLEAR DATA 1, 2, AND 3
         ST    R1,TTRCURR            SAVE FOR NEXT CALL
         LM    R0,R15,TTRSAVE        RESTORE REGISTERS
         B     8(R14)                RETURN
*--------------------------------------------------------------------*
*                                                                    *
*              CONSTANTS                                             *
*                                                                    *
*--------------------------------------------------------------------*
READCCW  CCW   CCWCMDRF,*,X'20',$MAXLEN   READ FORWARD
REWCCW   CCW   CCWCMDRW,*,X'20',1         REWIND THE TAPE
SENSECCW CCW   CCWCMDSE,*,X'20',16        SENSE CCW
TTRSIZE  DC    A(500*TRENTRYL)       TRACE TABLE SIZE
X80      DC    A(X'80000000')
INITDCB  DCB   MACRF=EXCP,           INITIAL TAPE DCB                  +
               DDNAME=TAPEDDNM,      .. DD NAME SUPPLIED ON 'OPEN'     +
               DEVD=TA,              .. JUST WORRY ABOUT TAPES         +
               DSORG=PS              .. USE SEQUENTIAL DSORG
wTO1I    WTO   'MOUNT TAPE XXXXXX FOR DDNAME XXXXXXXX ON DRIVE XXX',   +
               CONSID=,                                                +
               DESC=2,                                                 +
               MF=L
WTO1L    EQU   *-WTO1I               LIST FORM'S TOTAL LENGTH
WTO2I    WTO   'MOUNT TAPE FOR TAPEMAP ON DRIVE XXX',                  +
               ROUTCDE=3,                                              +
               MF=L
WTO2L    EQU   *-WTO2I               LIST FORM'S TOTAL LENGTH
VOLPRFX  DC    C'VOL'
UCBTEXT  DC    CL58'PINNED BY TAPEMAP'
         LTORG
*--------------------------------------------------------------------*
*                                                                    *
*              EQUATES                                               *
*                                                                    *
*--------------------------------------------------------------------*
         COPY REGEQU
$DEN1600 EQU  X'C3'                  1600 BPI
$DEN6250 EQU  X'D3'                  6250 BPI
$DEN3480 EQU  X'00'                  3480 BPI
$MAXLEN  EQU  65535
$SENSETI EQU  X'20'                  TAPE INDICATE
$SENSEPE EQU  X'04'                  PE MODE
$SENSE62 EQU  X'08'                  8303-2 (6250 CAPABLE)
T99      DS   0C
         DC   AL2(DALDDNAM),AL2(1),AL2(8)     DDNAME PARAMETERS
         DC   CL8' '
         DC   AL2(DALDSNAM),AL2(1),AL2(8)     DSN PARAMETERS
         DC   CL8' '
         DC   AL2(DALLABEL),AL2(1),AL2(1)     LABEL TYPE PARAMETERS
         DC   X'10'                           .. 'BLP'
         DC   AL2(DALDSSEQ),AL2(1),AL2(2)     DATASET SEQUENCE NUMBER
         DC   XL2'0001'                       .. 1ST DATASET
         DC   AL2(DALUNIT),AL2(1),AL2(8)      UNIT PARAMETERS
         DC   CL8' '
         DC   AL2(DALVLSER),AL2(1),AL2(6)     VOLSER PARAMETERS
         DC   CL6' '
         DC   AL2(DALSTATS),AL2(1),AL2(1)     INITIALIZE STATUS
         DC   X'04'
         DC   AL2(DALNDISP),AL2(1),AL2(1)     FINAL STATUS
         DC   X'08'
         DC   AL2(DALDEFER),AL2(0),AL2(0)     DEFERRED MOUNT
T99L     EQU  *-T99
         COPY TAPECMDS
*--------------------------------------------------------------------*
*                                                                    *
*              COMMAND/STATUS BLOCK                                  *
*                                                                    *
*--------------------------------------------------------------------*
CMDBLOK  TAPEBLOK TYPE=DSECT
         SPACE 2
*--------------------------------------------------------------------*
*                                                                    *
*              I/O BLOCK                                             *
*                                                                    *
*              THERE IS 1 I/O BLOCK PER 'OPEN' TAPE                  *
*                                                                    *
*--------------------------------------------------------------------*
IOBLK    DSECT
IONEXT   DS    A                     NEXT BLOCK ON CHAIN
IOPREV   DS    A                     PREVIOUS BLOCK ON CHAIN
IOECB    DS    F                     ECB
IOAREA   DS    A                     I/O AREA ADDRESS
IODDNAME DS    CL8                   DD NAME
IODCB    DS    (DCBL)X               DCB
IODEB    DS    128X'00'              DEB
         DS    0D
IOIOB    DS    (IOBL)X'00'           IOB
IOREAD   CCW   X'02',*,X'20',$MAXLEN READ FORWARD
IOREW    CCW   X'07',*,X'20',1       REWIND THE TAPE
IOSENSE  CCW   X'04',*,X'20',16      SENSE CCW
IOFLAG   DC    X'00'                 CONTROL FLAGS
$IOEOT   EQU   X'80'                 TAPE IS AT EOT
$IODEN   EQU   X'40'                 RECORDING DENSITY DETERMINED
$IOUEX   EQU   X'20'                 UNIT EXCEPTION OCCURRED
IODEN    DC    X'00'                 RECORDING DENSITY
IOBLKL   EQU   *-IOBLK
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*              MVS COMMUNICATIONS VECTOR TABLE                       *
*                                                                    *
*--------------------------------------------------------------------*
         PRINT NOGEN
         CVT   DSECT=YES
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*              MVS UNIT CONTROL BLOCK                                *
*                                                                    *
*--------------------------------------------------------------------*
         IEFUCBOB
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*              MVS IOB DSECT                                         *
*                                                                    *
*--------------------------------------------------------------------*
         IEZIOB
IOBL     EQU  *-IOB
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*              MVS DCB DSECT                                         *
*                                                                    *
*--------------------------------------------------------------------*
         DCBD  DSORG=PS,                                               +
               DEVD=TA
DCBL     EQU   *-IHADCB
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*              MVS PSA DSECT                                         *
*                                                                    *
*--------------------------------------------------------------------*
         IHAPSA DSECT=YES,LIST=NO
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*              MVS TCB DSECT                                         *
*                                                                    *
*--------------------------------------------------------------------*
         IKJTCB LIST=NO
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*              MVS DEB DSECT                                         *
*                                                                    *
*--------------------------------------------------------------------*
         IEZDEB
*--------------------------------------------------------------------*
*                                                                    *
*              MVS TIOT DSECT                                        *
*                                                                    *
*--------------------------------------------------------------------*
TIOT     DSECT
         IEFTIOT1
*--------------------------------------------------------------------*
*                                                                    *
*              TRACE TABLE ENTRIES                                   *
*                                                                    *
*--------------------------------------------------------------------*
TRENTRY  DSECT
TREID    DS   CL8          TRACE ID
TREF1    DS   CL8          TRACE FIELD 1
TREF2    DS   CL8          TRACE FIELD 2
TREF3    DS   CL8          TRACE FIELD 3
TRENTRYL EQU  *-TRENTRY    TRACE ENTRY SIZE
*--------------------------------------------------------------------*
*                                                                    *
*              COMMUNICATION PARAMETER LIST                          *
*                                                                    *
*--------------------------------------------------------------------*
CCOM     DSECT
         IEZCOM
*--------------------------------------------------------------------*
*                                                                    *
*              CONSOLE INPUT BUFFER                                  *
*                                                                    *
*--------------------------------------------------------------------*
CIB      IEZCIB
*--------------------------------------------------------------------*
*                                                                    *
*              ASCB                                                  *
*                                                                    *
*--------------------------------------------------------------------*
         IHAASCB
*--------------------------------------------------------------------*
*                                                                    *
*              OUCB                                                  *
*                                                                    *
*--------------------------------------------------------------------*
         IRAOUCB
         IEFZB4D0
         IEFZB4D2
         END  TAPEEXCP
./ ADD NAME=TMAPCBT
          TITLE 'TMAPCBT - CBT COMPRESSED FILES PROCESSOR'
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: TMAPCBT - CBT compressed files processor              *
*                                                                     *
*  Function:                                                          *
*                                                                     *
* ------------------------------------------------------------------- *
TMAPCBT  CSECT
         USING TMAPCBT,R12
         USING TMAPCOMM,R11
         STM   R14,R12,12(R13)     SAVE REGS
         LR    R12,R15             SET BASE REG
         B     CBT0000             SKIP EYECATCHER
         DC    CL8'TMAPCBT'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
CBT0000  DS    0H
         LA    R15,CBTSAVE         OUR SAVE AREA ADDRESS
         ST    R13,4(R15)          CHAIN CALLER'S SAVE AREA TO OURS
         ST    R15,8(R13)          CHAIN OUR SAVE AREA TO CALLER'S
         LR    R13,R15             SET SAVE AREA ADDRESS
         TMAPTR ID=ENTRY,          TRACE ENTRY                         +
               DATA1=COMMFLAG,                                         +
               DATA2=COMMRECA
         TM    COMMFLAG,$COMMLST   'CLEAN-UP' CALL?
         BO    CBT0200             YES
         L     R10,COMMRECA        TAPE I/O AREA'S ADDRESS
         SR    R9,R9               CLEAR FOR LENGTH
         ICM   R9,3,COMMRECL       PHYSICAL BLOCK SIZE
         TM    COMMFLAG,$COMMINQ   INQUIRE CALL?
         BNO   CBT0100             NO
* ------------------------------------------------------------------- *
*                                                                     *
*     RECFM of CBT compressed records is VB with min LRECL 14 and     *
*     max LRECL 94.                                                   *
*                                                                     *
*     Testing process for CBT data sets is:                           *
*                                                                     *
*     Verify that the record fits VB format and LRECL of all records  *
*     in the first tape block is in the range 14 to 94.               *
*                                                                     *
*     Verify bitmap matches data.                                     *
*                                                                     *
* ------------------------------------------------------------------- *
         TMAPTR ID=INQCALL
         CLM   R9,3,0(R10)         RECORD LENGTH MATCH LENGTH IN BDW?
         BNE   EXIT0008            NO
         OC    2(2,R10),2(R10)     BB PORTION OF BDW VALID?
         BNZ   EXIT0008            NO
         OC    6(2,R10),6(R10)     BB PORTION OF RDW VALID?
         BNZ   EXIT0008            NO
         LA    R10,4(R10)          SKIP BDW
         SH    R9,H4               MINUS BDW LENGTH
         BNH   EXIT0008            NO GOOD
         SR    R2,R2               CLEAR FOR RECORD LENGTH'S
CBT0010  DS    0H
         ICM   R2,3,0(R10)         RECORD LENGTH FROM RDW
         CH    R2,H14              TOO LOW?
         BL    EXIT0008            YES.. NO GOOD
         CH    R2,H94              TOO LARGE?
         BH    EXIT0008            YES.. NO GOOD
         LR    R3,R2               COPY RECORD SIZE
         SH    R3,H14              MINUS LENGTH AND BITMAP SIZES
         BZ    CBT0050             NO DATA
         LA    R4,4(R10)           FIRST BITMAP BYTE
         SR    R1,R1               CLEAR REGISTER
         LA    R5,10               NUMBER OF BITMAP BYTES
CBT0020  DS    0H
         LA    R6,8                BITS PER BYTE
         ICM   R1,8,0(R4)          INSERT CURRENT BITMAP BYTE
CBT0030  DS    0H
         LTR   R1,R1               BIT ON?
         BNM   CBT0040             NO, CORRESPONDS TO A BLANK
         BCTR  R3,0                MINUS 1
CBT0040  DS    0H
         SLL   R1,1                SHIFT 1 BIT
         BCT   R6,CBT0030          LOOP
         LA    R4,1(R4)            NEXT BIT MAP BYTE
         BCT   R5,CBT0020          LOOP
         LTR   R3,R3               MUST BE ZERO..
         BNZ   EXIT0008            SORRY, IT DOESN'T MATCH
CBT0050  DS    0H
         AR    R10,R2              NEXT RDW'S ADDRESS
         SR    R9,R2               MINUS LAST RECORD'S LENGTH
         BM    EXIT0008            WRONG
         BZ    CBT0060             IT ALL ADD'S UP
         BH    CBT0010             TRY NEXT RECORD
CBT0060  DS    0H
         MVC   PRTDATA(HEADINGL),HEADING
         BAL   R8,PRT0000          PRINT SUB HEADING
         OI    COMMFLAG,$COMMSUB   SET SUB-FUNCTION FLAG FOR TMAPUPDT
         L     R15,AUPDT           IEBUPDTE PROCESSOR ENTRY POINT
         BALR  R14,R15             CALL IEBUPDTE PROCESSOR
         B     EXIT0000            AND EXIT
* ------------------------------------------------------------------- *
*                                                                     *
*      R9 Length left in block                                        *
*      R8 Address of current logical record                           *
*      R7 Current bit map address in current logical record           *
*      R6 Current data address in current logical record              *
*      R5 Data length in current logical record                       *
*      R4 Output address                                              *
*                                                                     *
* ------------------------------------------------------------------- *
CBT0100  DS    0H
         TMAPTR ID=NEWBLOCK
         TM    CBTFLAG,$ERROR      ERROR FLAG ON?
         BO    EXIT0000            YES
         LA    R8,4(R10)           FIRST RDW IN THE BLOCK
         SH    R9,H4               MINUS BDW LENGTH
CBT0110  DS    0H
         TMAPTR ID=NEWRECD,        TRACE EACH RECORD                   +
               RDATA1=R8           .. RECORD ADDRESS
         LA    R7,4(R8)            FIRST BIT MAP BYTE
         LA    R6,14(R8)           FIRST DATA BYTE
         SR    R5,R5               CLEAR FOR LENGTH
         IC    R5,1(R8)            LENGTH OF THIS RECORD
         SH    R5,H14              MINUS RDW AND BIT MAP SIZES
         LA    R4,EXPNDATA         FIRST BYTE IN EXPANDED AREA
         MVC   EXPNDATA,EXPNDATA-1 CLEAR TO ALL BLANKS
         SR    R1,R1               INITIALIZE REGISTER
         LA    R3,10               BIT MAP LOOP COUNTER
CBT0120  DS    0H
         LA    R2,8                BITS PER BYTE
         ICM   R1,8,0(R7)          CURRENT BIT MAP BYTE
CBT0130  DS    0H
         LTR   R1,R1               TEST REGISTER
         BNM   CBT0140             IF ZERO OR POSITIVE, BIT IS OFF
         MVC   0(1,R4),0(R6)       COPY DATA BYTE
         LA    R6,1(R6)            NEXT BYTE IN DATA
         BCTR  R5,0                MINUS 1 USED
CBT0140  DS    0H
         LA    R4,1(R4)            NEXT BYTE IN OUTPUT AREA
         SLL   R1,1                SHIFT REGISTER LEFT 1 BIT
         BCT   R2,CBT0130          LOOP
         LA    R7,1(R7)            NEXT BIT MAP BYTE
         BCT   R3,CBT0120          LOOP
         LTR   R5,R5               ALL DATA BYTES USED?
         BNZ   ERR0010             NO.. SERIOUS PROBLEM
         TMAPTR ID=CALLSUB         TRACE CALLS TO SUB-FUNCTION (UPDT)
         LA    R1,EXPNDATA         EXPANDED DATA AREA
         ST    R1,COMMRECA         SET ADDRESS FOR SUB-FUNCTION
         L     R15,AUPDT           IEBUPDTE FILE PROCESSOR ENTRY POINT
         BALR  R14,R15             LINK TO SUB-FUNCTION
         LH    R1,0(R8)            CURRENT RECORD'S LENGTH
         AR    R8,R1               NEXT LOGICAL RECORD
         SR    R9,R1               MINUS LENGTH OF LAST RECORD
         BH    CBT0110             PROCESS THIS RECORD
         B     EXIT0000            END OF BLOCK, EXIT
*---------------------------------------------------------------------*
*                                                                     *
*              END-OF-FILE CLEAN-UP                                   *
*                                                                     *
*---------------------------------------------------------------------*
CBT0200  DS    0H
         NI    COMMFLAG,255-$COMMSUB
         B     EXIT0000            END OF BLOCK, EXIT
*---------------------------------------------------------------------*
*                                                                     *
*              ERROR SITUATIONS                                       *
*                                                                     *
*---------------------------------------------------------------------*
ERR0010  DS    0H
         MVC   PRTDATA(MSG1L),MSG1 SET MESSAGE
         BAL   R8,PRT0000          PRINT MESSAGE
         OI    COMMFLAG,$ERROR     SET ERROR FLAG
         B     EXIT0000            AND EXIT
*---------------------------------------------------------------------*
*                                                                     *
*              PRINTING                                               *
*                                                                     *
*---------------------------------------------------------------------*
PRT0000  DS    0H
         MVI   PRTCMD,$PRTPRT      REQUEST PRINT
         MVI   PRTCC,C' '          SINGLE SPACE
         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK
         L     R15,APRT            PRINT MODULE ENTRY POINT
         BALR  R14,R15             LINK TO PRINT MODULE
         BR    R8                  RETURN
* ------------------------------------------------------------------- *
*                                                                     *
*             EXIT                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS   0H
         TMAPTR ID=EXIT0000         EXITING, RC=0
         SR    R15,R15              SET RETURN CODE TO ZERO
         B     CBT9900              AND RETURN
EXIT0008 DS    0H
         TMAPTR ID=EXIT0008         EXITING, RC=8
         LA    R15,8                SET RETURN CODE TO 8
CBT9900  DS    0H
         L     R13,4(R13)           RESTORE REGISTER 13
         L     R14,12(R13)          RESTORE REGISTER 14
         LM    R0,R12,20(R13)       RESTORE ALL OTHER REGISTERS
         BR    R14                  RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
*              WORK AREAS                                             *
*                                                                     *
* ------------------------------------------------------------------- *
CBTSAVE  DC    18F'0'               REGISTER SAVE AREA
H4       DC    H'4'                 BDW LENGTH
H14      DC    H'14'                MIN RECORD LENGTH
H94      DC    H'94'                MAX RECORD LENGTH
CBTFLAG  DC    X'00'                FLAGS
$ERROR   EQU   X'80'                .. SERIOUS ERROR HAS OCCURRED
         SPACE 1
         DC    C' '
EXPNDATA DC    CL80' '
         SPACE 1
HEADING  DC    C'DATA SET IS A CBT COMPRESSED UNLOAD'
HEADINGL EQU   *-HEADING
MSG1     DC    C'** BIT-MAP/DATA LENGTH MIS-MATCH'
MSG1L    EQU   *-MSG1
* ------------------------------------------------------------------- *
*                                                                     *
*              PRINT MODULE INTERFACE BLOCK                           *
*                                                                     *
* ------------------------------------------------------------------- *
PRTBLOK  PRTBLOK  TYPE=CSECT
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*              LITERALS                                               *
*                                                                     *
* ------------------------------------------------------------------- *
         LTORG
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*              COMMON DATA MAP                                        *
*                                                                     *
* ------------------------------------------------------------------- *
TMAPCOMM TMAPCOMM TYPE=DSECT
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*              EQUATES                                                *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY REGEQU
         END  TMAPCBT
./ ADD NAME=TMAPCOMM 0100-99298-99298-1542-00209-00214-00000-SBGOLOB
*---------------------------------------------------------------------*
*                                                                     *
*          COMMON AREA MAPPING MACRO                                  *
*                                                                     *
*     This macro will generate either the 'common' module CSECT or    *
*     a DSECT to map the 'common' module.  'Common' is used for       *
*     constants and work areas that are required by several modules   *
*     allowing some elimination of duplicated data and to allow       *
*     inter-module communication.                                     *
*                                                                     *
*     The trace table code is also incorporated into the 'TMAPCOMM'.  *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
&NAME    TMAPCOMM &TYPE=
         AIF   (T'&NAME EQ 'O').NONAME
         AIF   ('&TYPE' EQ 'CSECT').CSECT
         AIF   ('&TYPE' EQ 'DSECT').DSECT
         MNOTE 12,'INVALID TYPE'
         MEXIT
.CSECT   ANOP
&NAME    CSECT
         AGO   .NODSECT
.DSECT   ANOP
&NAME    DSECT
.NODSECT ANOP
*---------------------------------------------------------------------*
*                                                                     *
*          ADDRESS CONSTANTS                                          *
*                                                                     *
*---------------------------------------------------------------------*
         DC    CL8'TMAPCOMM'
ACOMM    DC    A(TMAPCOMM)         COMMON MODULE
         DC    CL8'TAPEDCB'
ADCB     DC    V(TMAPDCB)          DCB INFO CONVERTER
         DC    CL8'TAPEEXCP'
ATAPEIO  DC    V(TAPEEXCP)         TAPE I/O MODULE ADDRESS
         DC    CL8'TMAPMAIN'
AMAIN    DC    V(TMAPMAIN)         MAINLINE MODULE ADDRESS
         DC    CL8'TMAPPARM'
APARM    DC    V(TMAPPARM)         PARAMETER CONVERTER
         DC    CL8'TMAPPRT'
APRT     DC    V(TMAPPRT)          PRINT MODULE ADDRESS
*---------------------------------------------------------------------*
*                                                                     *
*          File processor table                                       *
*                                                                     *
*     On the first record following a tapemark, the main line         *
*     program calls each module in the following list until one       *
*     of them signals that it 'recognizes' the data.  The search      *
*     stops when the first module signals it 'knows' the data.        *
*     If a file may be detected by more than one file processor       *
*     like SMP/E MCS files, the order of search will determine        *
*     the file type.                                                  *
*                                                                     *
*---------------------------------------------------------------------*
PROCTBLE DS    0A
         TMAPPROC TMAPCBT            CBT COMPRESSED DATASETS
         TMAPPROC TMAPCOPY           IEBCOPY
         TMAPPROC TMAPDSS            DF/DSS BACK-UPS
         TMAPPROC TMAPFDR            FDR BACK-UPS
         TMAPPROC TMAPLABL           STANDARD LABELS
         TMAPPROC TMAPMOVE           IEHMOVE
         TMAPPROC TMAPMCS            SMP/E MCS
AUPDT    TMAPPROC TMAPUPDT           IEBUPDTE
         DC    X'FF'                 END OF LIST
*---------------------------------------------------------------------*
*                                                                     *
*          CURRENT RECORD ADDRESS AND LENGTH                          *
*                                                                     *
*---------------------------------------------------------------------*
COMMRECA DC    A(0)                CURRENT RECORD'S ADDRESS
COMMRECL DC    AL2(0)              CURRENT RECORD'S LENGTH
*---------------------------------------------------------------------*
*                                                                     *
*          TRACE CONTROL                                              *
*                                                                     *
*---------------------------------------------------------------------*
         DS    0A
         DC    CL4'1ST'            FIRST TRACE ENTRY
TR1ST    DC    A(0)
         DC    CL4'LAST'           LAST TRACE ENTRY
TRLAST   DC    A(0)
         DC    CL4'CURR'           CURRENT TRACE ENTRY
TRCURR   DC    A(0)
TRADDR   DC    A(0)                TRACE TABLE STORAGE ADDRESS
TRR14    DC    A(0)                REGISTER 14 SAVE AREA
TRDATA1  DC    CL8' '              TRACE DATA ITEM 1
TRDATA2  DC    CL8' '              TRACE DATA ITEM 2
TRSIZE   DC    A(1000*TRENTRYL)    TRACE TABLE SIZE
*---------------------------------------------------------------------*
*                                                                     *
*          GLOBAL DATA                                                *
*                                                                     *
*---------------------------------------------------------------------*
COMMCFPE DC    A(0)                CURRENT FILE PROCESSOR TABLE ENTRY
COMMPARM DC    A(0)                ADDRESS OF EXEC STATEMENT PARM DATA
COMMMEML DC    H'0'                LENGTH OF MEMBER ON PRINT LINE
COMMMEM# DC    H'0'                NUMBER OF MEMBERS PER LINE
COMMFLAG DC    X'00'               GLOBAL CONTROL FLAGS
$COMMINQ EQU   X'80'               .. 'INQUIRY' CALLS IN PROGRESS
$COMM1ST EQU   X'40'               .. FIRST RECORD OF FILE
$COMMLST EQU   X'20'               .. 'CLEAN-UP' IN PROGRESS
$COMMSUB EQU   X'10'               .. 'SUB-FUNCTION' CALL
$COMMNOM EQU   X'08'               .. NO PDS MEMBERS
$ABORT   EQU   X'04'               .. SERIOUS ERROR, ABORT
$COMMFUL EQU   X'02'               .. MAP FULL TAPE
$ABEND   EQU   X'01'               .. ABEND ON EXIT
COMMVOL  DC    CL6'XXXXXX'         VOLSER FOR WTO
COMMDEVT DC    C' '                TAPE DEVICE TYPE
COMMSUBH DC    CL120' '            SUB HEADING
*---------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
COMMMAXL DC    PL3'60'             MAXIMUM LINES PER PAGE
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*          ADD TRACE ENTRY                                            *
*                                                                     *
*  During program initialization, TMAPMAIN acquires storage for the   *
*  trace table and sets COMM1ST, COMMLAST, and COMMCURR.  TMAPMAIN    *
*  also sets R11 to the address of TMAPCOMM and all other modules     *
*  depend on this remaining unchanged.  Any module except this        *
*  module may call the trace routine.  Macro TMAPTR generates the     *
*  calling sequence.  R14 is the only register altered by the trace   *
*  macro.                                                             *
*                                                                     *
*  The trace table is a "wrap-around" table.  COMM1ST is the first    *
*  entry's address, COMMLAST is the last entry's address, and         *
*  COMMCURR is the address of the last entry added to the table.      *
*  When a trace entry is added to the table, the calling module's     *
*  name, an 8-byte ID, and up to 2 8-byte fields are captured.        *
*                                                                     *
*                                                                     *
*                                                                     *
*      This code depends on:                                          *
*           R11  'TMAPCOMM' address                                   *
*           R12  current module's base address                        *
*                and the module's name must be at 10 bytes (0A hex)   *
*                into the module                                      *
*           R14  trace id's address and R14 + 8 will be the return    *
*                address                                              *
*                                                                     *
*---------------------------------------------------------------------*
TRACE000 DS    0H
         USING &NAME,R11           DEFINE BASE
         USING TRENTRY,R1          DEFINE BASE
         STM   R0,R15,TRCESAVE     SAVE ALL REGISTERS
         L     R1,TRCURR           CURRENT TRACE ENTRY
         OC    0(TRENTRYL,R1),0(R1)    EMPTY ENTRY?
         BZ    TRACE010            YES.. USE THIS ENTRY
         LA    R1,TRENTRYL(R1)     NEXT TRACE ENTRY
         C     R1,TRLAST           BEYOND END OF TABLE?
         BNH   TRACE010            NO
         L     R1,TR1ST            'WRAP' TRACE TABLE
TRACE010 DS    0H
         ST    R1,TRCURR           SAVE CURRENT TRACE ENTRY ADDRESS
         MVC   TREMOD,10(R12)      COPY MODULE NAME
         MVC   TREID,0(R14)        COPY TRACE ID
         MVC   TREDATA1,TRDATA1    COPY TRACE DATA 1
         MVC   TREDATA2,TRDATA2    COPY TRACE DATA 2
         XC    TRDATA1,TRDATA1     CLEAR TRACE DATA
         XC    TRDATA2,TRDATA2     CLEAR TRACE DATA
         LM    R0,R15,TRCESAVE     RESTORE ALL REGISTERS
         B     8(R14)              RETURN
TRCESAVE DS    16F                 REGISTER SAVE AREA
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
*          TRACE TABLE ENTRY                                          *
*                                                                     *
*---------------------------------------------------------------------*
TRENTRY  DSECT
TREMOD   DS    CL8                 MODULE NAME
TREID    DS    CL8                 TRACE ID
TREDATA1 DS    CL8                 TRACE DATA 1
TREDATA2 DS    CL8                 TRACE DATA 2
TRENTRYL EQU   *-TRENTRY           ENTRY LENGTH
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
*          File processor table entries                               *
*                                                                     *
*---------------------------------------------------------------------*
PROCDSCT DSECT
PROCNAME DS    CL8                 MODULE'S NAME
PROCEPA  DS    AL4                 MODULE'S ENTRY POINT
PROCL    EQU   *-PROCDSCT          LENGTH OF EACH ENTRY
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
*          ABEND REASON CODES                                         *
*                                                                     *
*---------------------------------------------------------------------*
ABEND001 EQU   1                   ABEND DUE TO STATUS FROM TAPEEXCP
ABEND002 EQU   2                   UNKNOWN STATUS CODE FROM TAPEEXCP
ABEND003 EQU   3                   ERROR DURING TAPE I/O CLOSE
ABEND004 EQU   4                   UNKNOWN COMMAND PASSED TO TMAPPRT
ABEND005 EQU   5                   UNKNOWN VTOC RECORD TYPE IN TMAPDSS
ABEND006 EQU   6                   LENGTH NEGATIVE IN 'NEXTTRAK' (DSS)
         MEXIT
.NONAME  ANOP
         MNOTE 12,'NAME IS REQUIRE WHEN TYPE=DSECT'
.MEXIT   ANOP
         MEXIT
         MEND
TMAPCOMM TMAPCOMM TYPE=CSECT
         YREGS
         END
./ ADD NAME=TMAPCOPY
          TITLE 'TMAPCOPY - IEBCOPY FILES PROCESSOR'
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: TMAPCOPY - IEBCOPY files processor                    *
*                                                                     *
*  Function:                                                          *
*     This module prints DSORG, RECFM, BLKSIZE, LRECL, and names of   *
*     the members in the unloaded PDS.                                *
*                                                                     *
*---------------------------------------------------------------------*
TMAPCOPY CSECT
         USING TMAPCOPY,R12
         USING TMAPCOMM,R11
         STM   R14,R12,12(R13)     SAVE REGS
         LR    R12,R15             SET BASE REG
         B     COPY0000            SKIP EYECATCHER
         DC    CL8'TMAPCOPY'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
COPY0000 DS    0H
         LA    R15,COPYSAVE        OUR SAVE AREA ADDRESS
         ST    R13,4(R15)          CHAIN CALLER'S SAVE AREA TO OURS
         ST    R15,8(R13)          CHAIN OUR SAVE AREA TO CALLER'S
         LR    R13,R15             SET SAVE AREA ADDRESS
         L     R10,COMMRECA        CURRENT RECORD'S ADDRESS
         TMAPTR ID=ENTRY,          TRACE ENTRY                         +
               DATA1=COMMFLAG
         TM    COMMFLAG,$COMMLST   'CLEAN-UP' CALL?
         BO    COPY0200            YES
         TM    COMMFLAG,$COMMINQ   INQUIRE CALL?
         BNO   COPY0100            NO
         TMAPTR ID=INQCALL,DATA1=0(R10)
         CLC   COPYID1(COPYIDL),0(R10) IEBCOPY DATA?
         BE    COPY0010            NO
         CLC   COPYID2(COPYIDL),0(R10) IEBCOPY DATA?
         BNE   EXIT0008            NO
COPY0010 DS    0H
         MVC   PRTDATA(HEADINGL),HEADING
         BAL   R9,PRT0000          PRINT SUB-HEADING
         ST    R10,DCBRECA         SET RECORD ADDRESS
         MVC   DCBDSOD,H12         DISPLACEMENT TO DSORG
         MVC   DCBRFMD,H18         DISPLACEMENT TO RECORD FORMAT
         MVC   DCBBSZD,H14         DISPLACEMENT TO BLOCK SIZE
         MVC   DCBRSZD,H16         DISPLACEMENT TO RECORD SIZE
         MVC   DCBUNTD,H27         DISPLACEMENT TO DEVICE TYPE
         LA    R1,DCBBLOK          DCB CONVERTER INTERFACE PARMS
         L     R15,ADCB            DCB CONVERTER ENTRY POINT
         BALR  R14,R15             CONVERT DCB INFO
         MVC   PRDSO,DCBDSO        COPY DATA SET ORGANIZATION
         MVC   PRRFM,DCBRFM        COPY RECORD FORMAT
         MVC   PRBSZ,DCBBSZ        COPY BLOCK SIZE
         MVC   PRRSZ,DCBRSZ        COPY RECORD SIZE
         MVC   PRUNT,DCBUNT        COPY UNIT TYPE
         MVC   PRTDATA(DCBMSGL),DCBMSG
         BAL   R9,PRT0000          PRINT DCB MESSAGE
         TM    COMMFLAG,$COMMNOM   NO-MEMBERS?
         BO    EXIT0000            SKIP SUB-HEADING
         MVC   COMMMEML,H10        SET PRINT OUTPUT LENGTH
         MVC   COMMMEM#,H12        SET NUMBER PER LINE
         MVC   COMMSUBH(MEMHEADL),MEMHEAD
         MVC   PRTDATA(MEMHEADL),MEMHEAD
         BAL   R9,PRT0000          PRINT HEADING
         B     EXIT0000            AND EXIT
*---------------------------------------------------------------------*
*                                                                     *
*              PRINT MEMBERS                                          *
*                                                                     *
*---------------------------------------------------------------------*
COPY0100 DS    0H
         TMAPTR ID=MEMBER
         TM    COMMFLAG,$COMMNOM   NO-MEMBERS?
         BO    EXIT0000            EXIT
         TM    COMMFLAG,$COMM1ST   FIRST RECORD OF DATASET?
         BO    COPY0150            YES
         TM    COPYFLAG,$COPYBYP   BYPASSED 2ND BLOCK YET?
         BNO   COPY0140            NO... WELL, DO IT
         TM    COPYFLAG,$COPYEND   END OF DIRECTORY FOUND?
         BO    EXIT0000            YES... EXIT
         LA    R2,8(R10)           SKIP BDW
         LH    R3,COMMRECL         RECORD SIZE (TOTAL)
         SH    R3,H8               MINUS BDW LENGTH
COPY0110 DS    0H
         LA    R4,22(R2)           FIRST MEMBER NAME
         LH    R5,20(R2)           AMOUNT USED
         SH    R5,H2               MINUS LENGTH'S LENGTH
         SR    R6,R6               INITIALIZE REGISTER
COPY0120 DS    0H
         CLC   XFFFF,0(R4)         END OF DIRECTORY?
         BE    COPY0130            YES
         MVC   PRTDATA(8),0(R4)    MOVE MEMBER NAME
         MVI   PRTCMD,$PRTMEM      SET COMMAND FOR TMAPPRT
         LA    R1,PRTBLOK          PRINT MODULE INTERFACE BLOCK
         L     R15,APRT            PRINT MODULE ENTRY POINT
         BALR  R14,R15             LINK TO PRINT MODULE
         NI    11(R4),X'1F'        TURN OFF ALL BUT LENGTH BITS
         IC    R6,11(R4)           LOAD LENGTH (IN HALF WORDS)
         LA    R6,12(R6,R6)        DOUBLE LENGTH + 12
         AR    R4,R6               NEXT MEMBER
         SR    R5,R6               MINUS LENGTH USED
         BP    COPY0120            PROCESS ALL OF DIRECTORY BLOCK
         AH    R2,DIRBLKSZ         PLUS LENGTH OF DIRECTORY + CNTL DATA
         SH    R3,DIRBLKSZ         MINUS LENGTH
         BP    COPY0110            IF MORE DATA, PROCESS IT
         B     EXIT0000            OTHERWISE EXIT
COPY0130 DS    0H
         TMAPTR ID=DIREND
         OI    COPYFLAG,$COPYEND   SET END OF DIRECTORY FLAG
         B     EXIT0000            AND EXIT
COPY0140 DS    0H
         TMAPTR ID=BYPASS
         OI    COPYFLAG,$COPYBYP   SET BYPASSED FLAG
         B     EXIT0000            AND EXIT
COPY0150 DS    0H
         TMAPTR ID=1STPASS
         NI    COPYFLAG,255-$COPYEND
         NI    COPYFLAG,255-$COPYBYP
         B     EXIT0000            EXIT
*---------------------------------------------------------------------*
*                                                                     *
*              'CLEAN-UP'                                             *
*                                                                     *
*---------------------------------------------------------------------*
COPY0200 DS    0H
         MVI   PRTCMD,$PRTMEM      REQUEST PRINT
         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK
         L     R15,APRT            PRINT MODULE ENTRY POINT
         BALR  R14,R15             LINK TO PRINT MODULE
         B     EXIT0000            EXIT
*---------------------------------------------------------------------*
*                                                                     *
*              PRINTING                                               *
*                                                                     *
*---------------------------------------------------------------------*
PRT0000  DS    0H
         MVI   PRTCMD,$PRTPRT      REQUEST PRINT
         MVI   PRTCC,C' '          SINGLE SPACE
         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK
         L     R15,APRT            PRINT MODULE ENTRY POINT
         BALR  R14,R15             LINK TO PRINT MODULE
         BR    R9                  RETURN
* ------------------------------------------------------------------- *
*                                                                     *
*             EXIT                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         TMAPTR ID=EXIT0000          EXITING, RC=0
         SR    R15,R15               SET RETURN CODE TO ZERO
         B     COPY9900              AND RETURN
EXIT0008 DS    0H
         TMAPTR ID=EXIT0008          EXITING, RC=8
         LA    R15,8                 SET RETURN CODE TO 8
COPY9900 DS    0H
         L     R13,4(R13)            RESTORE REGISTER 13
         L     R14,12(R13)           RESTORE REGISTER 14
         LM    R0,R12,20(R13)        RESTORE ALL OTHER REGISTERS
         BR    R14                   RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
*              WORK AREAS                                             *
*                                                                     *
* ------------------------------------------------------------------- *
COPYSAVE DC    18F'0'                REGISTER SAVE AREA
H2       DC    H'2'                  CONSTANT
H8       DC    H'8'                  CONSTANT
H10      DC    H'10'                 CONSTANT
H12      DC    H'12'                 CONSTANT
H14      DC    H'14'                 CONSTANT
H16      DC    H'16'                 CONSTANT
H18      DC    H'18'                 CONSTANT
H27      DC    H'27'                 CONSTANT
DIRBLKSZ DC    Y(256+12+8)           SIZE OF DIRECTORY BLOCK + CNTL
COPYID1  DC    H'60,0,56,0'            --- ONE OF THESE IS  ---
COPYIDL  EQU   *-COPYID1               --- NORMALLY PRESENT ---
COPYID2  DC    H'64,0,60,0'            --- IN IEBCOPY FILES ---
XFFFF    DC    X'FFFFFFFF'           END OF DIRECTORY MARKER
COPYFLAG DC    X'00'                 FLAGS/SWITCHES
$COPYEND EQU   X'80'                 .. END OF DIRECTORY FOUND
$COPYBYP EQU   X'40'                 .. 2ND BLOCK BYPASSED
HEADING  DC    C'THIS IS AN IEBCOPY UNLOADED DATASET'
HEADINGL EQU   *-HEADING
DCBMSG   DS    0C
         DC    C'DATA SET ORG:'
PRDSO    DC    CL4' '
         DC    C'   RECORD FORMAT:'
PRRFM    DC    CL4' '
         DC    C'   BLOCK SIZE:'
PRBSZ    DC    CL6' '
         DC    C'   RECORD SIZE:'
PRRSZ    DC    CL6' '
         DC    C'   DEVICE TYPE:'
PRUNT    DC    CL6' '
DCBMSGL  EQU   *-DCBMSG
MEMHEAD  DC    C'UNLOADED MEMBERS:'
MEMHEADL EQU   *-MEMHEAD
MEMMSG   DS    0C
PRMEM    DC    CL08' '
MEMMSGL  EQU   *-MEMMSG
* ------------------------------------------------------------------- *
*                                                                     *
*              PRINT MODULE INTERFACE BLOCK                           *
*                                                                     *
* ------------------------------------------------------------------- *
PRTBLOK  PRTBLOK  TYPE=CSECT
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*              DCB CONVERTER INTERFACE BLOCK                          *
*                                                                     *
* ------------------------------------------------------------------- *
DCBBLOK  DCBBLOK  TYPE=CSECT
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*              COMMON DATA MAP                                        *
*                                                                     *
* ------------------------------------------------------------------- *
TMAPCOMM TMAPCOMM TYPE=DSECT
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*              EQUATES                                                *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY REGEQU
         END  TMAPCOPY
./ ADD NAME=TMAPDCB
          TITLE 'TMAPDCB - DCB INFO CONVERTER'
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: TMAPDCB  - DCB info converter                         *
*                                                                     *
*  Function:                                                          *
*     Converts DSORG, RECFM, BLKSIZE, LRECL, and device type.         *
*                                                                     *
* ------------------------------------------------------------------- *
TMAPDCB  CSECT
         USING TMAPDCB,R12
         USING TMAPCOMM,R11
         USING DCBBLOK,R10
         STM   R14,R12,12(R13)     SAVE REGS
         LR    R12,R15             SET BASE REG
         B     DCB0000             SKIP EYECATCHER
         DC    CL8'TMAPDCB'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
DCB0000  DS    0H
         LR    R10,R1              COPY PARAMETER BLOCK ADDRESS
         LA    R15,DCBSAVE         OUR SAVE AREA
         ST    R13,4(R15)          CHAIN CALLER'S SAVE AREA TO OURS
         ST    R15,8(R13)          CHAIN OUR SAVE AREA TO CALLER'S
         LR    R13,R15             SET SAVE AREA ADDRESS
         TMAPTR ID=ENTRY           TRACE ENTRY
*---------------------------------------------------------------------*
*              CONVERT DSORG                                          *
*---------------------------------------------------------------------*
         SR    R2,R2               CLEAR REGISTER
         ICM   R2,3,DCBDSOD        DISPLACEMENT TO DSORG
         BZ    DCB0040             NO DISPLACEMENT
         A     R2,DCBRECA          PLUS RECORD'S BASE ADDRESS
         LA    R1,DSORGTBL         DSORG TABLE ADDRESS
         USING DSORGD,R1           DEFINE BASE
         SR    R15,R15             CLEAR WORK REGISTER
DCB0010  DS    0H
         CLI   0(R1),X'FF'         END OF TABLE?
         BE    DCB0030             YES.. TRY VSAM
         IC    R15,DSORGID         DSORG ID
         EX    R15,DSORGTM         IS IT THIS ORGANIZATION?
         BO    DCB0020             YES
         LA    R1,DSORGL(R1)       NEXT ENTRY
         B     DCB0010             LOOP
DSORGTM  TM    0(R2),0             TEST DSORG
DCB0020  DS    0H
         MVC   DCBDSO,DSORGNM      MOVE DSORG NAME
         B     DCB0050             CONVERT RECORD FORMAT
DCB0030  DS    0H
         CLC   VSAMID,0(R2)        IS THIS A VSAM DATASET?
         BNE   DCB0040             NO
         MVC   DCBDSO,VSAM         DSORG IS VSAM
         B     DCB0050             CONVERT RECORD FORMAT
DCB0040  DS    0H
         MVC   DCBDSO,UNKN         DSORG IS UNKNOWN
         DROP  R1
*---------------------------------------------------------------------*
*              CONVERT RECORD FORMAT                                  *
*---------------------------------------------------------------------*
DCB0050  DS    0H
         SR    R2,R2               CLEAR REGISTER
         ICM   R2,3,DCBRFMD        RECORD FORMAT DISPLACEMENT
         BZ    DCB0080             NO DISPLACEMENT
         A     R2,DCBRECA          RECORD FORMAT ADDRESS
         LA    R1,RECFMTBL         RECORD FORMAT TABLE ADDRESS
         USING RECFMD,R1           DEFINE BASE
DCB0060  DS    0H
         CLI   0(R1),X'FF'         END OF TABLE?
         BE    DCB0080             YES
         CLC   RECFMID,0(R2)       ID LOCATED?
         BE    DCB0070             YES
         LA    R1,RECFML(R1)       NEXT ENTRY
         B     DCB0060             LOOP
DCB0070  DS    0H
         MVC   DCBRFM,RECFMNM      SET RECORD FORMAT
         B     DCB0090             CONVERT BLOCK SIZE
DCB0080  DS    0H
         MVC   DCBRFM,UNKN         RECORD FORMAT IS UNKNOWN
         DROP  R1
*---------------------------------------------------------------------*
*              CONVERT BLOCK SIZE                                     *
*---------------------------------------------------------------------*
DCB0090  DS    0H
         SR    R2,R2               CLEAR REGISTER
         ICM   R2,3,DCBBSZD        BLOCK SIZE DISPLACEMENT
         BZ    DCB0100             NO DISPLACEMENT
         A     R2,DCBRECA          BLOCK SIZE'S ADDRESS
         SR    R1,R1               CLEAR REGISTER
         ICM   R1,3,0(R2)          BLOCK SIZE IN BINARY
         CVD   R1,DWORD            CONVERT TO DECIMAL
         MVC   DCBBSZ,EDWORD       INITIALIZE WITH EDIT WORD
         ED    DCBBSZ,DWORD+5      EDIT BLOCK SIZE
         B     DCB0110             CONVERT RECORD SIZE
DCB0100  DS    0H
         MVC   DCBBSZ,UNKN         BLOCK SIZE IS UNKNOWN
*---------------------------------------------------------------------*
*              CONVERT RECORD SIZE                                    *
*---------------------------------------------------------------------*
DCB0110  DS    0H
         SR    R2,R2               CLEAR REGISTER
         ICM   R2,3,DCBRSZD        RECORD SIZE DISPLACEMENT
         BZ    DCB0120             NO DISPLACEMENT
         A     R2,DCBRECA          RECORD SIZE'S ADDRESS
         SR    R1,R1               CLEAR REGISTER
         ICM   R1,3,0(R2)          RECORD SIZE IN BINARY
         CVD   R1,DWORD            CONVERT TO DECIMAL
         MVC   DCBRSZ,EDWORD       INITIALIZE WITH EDIT WORD
         ED    DCBRSZ,DWORD+5      EDIT RECORD SIZE
         B     DCB0130             CONVERT RECORD SIZE
DCB0120  DS    0H
         MVC   DCBRSZ,UNKN         BLOCK SIZE IS UNKNOWN
*---------------------------------------------------------------------*
*              CONVERT DEVICE TYPE                                    *
*---------------------------------------------------------------------*
DCB0130  DS    0H
         SR    R2,R2               CLEAR REGISTER
         ICM   R2,3,DCBUNTD        UNIT TYPE DISPLACEMENT
         BZ    DCB0160             NO DISPLACEMENT
         A     R2,DCBRECA          UNIT TYPE'S ADDRESS
         LA    R1,UNITTBL          UNIT TYPE TABLE
         USING UNITD,R1            DEFINE BASE
DCB0140  DS    0H
         CLI   0(R1),X'FF'         END OF TABLE?
         BE    DCB0160             YES
         CLC   UNITID,0(R2)        UNIT ID LOCATED?
         BE    DCB0150             YES
         LA    R1,UNITL(R1)        NEXT UNIT
         B     DCB0140             LOOP
DCB0150  DS    0H
         MVC   DCBUNT,UNITNAME     SET UNIT NAME
         B     EXIT0000            AND EXIT
DCB0160  DS    0H
         MVC   DCBUNT,UNKN         UNIT TYPE IS UNKNOWN
* ------------------------------------------------------------------- *
*                                                                     *
*             EXIT                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         TMAPTR ID=EXIT0000          EXITING, RC=0
         SR    R15,R15               SET RETURN CODE TO ZERO
         B     DCB9900               AND RETURN
EXIT0008 DS    0H
         TMAPTR ID=EXIT0008          EXITING, RC=8
         LA    R15,8                 SET RETURN CODE TO 8
DCB9900  DS    0H
         L     R13,4(R13)            RESTORE REGISTER 13
         L     R14,12(R13)           RESTORE REGISTER 14
         LM    R0,R12,20(R13)        RESTORE ALL OTHER REGISTERS
         BR    R14                   RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
*              WORK AREAS                                             *
*                                                                     *
* ------------------------------------------------------------------- *
DWORD    DC     D'0'                  DOUBLE WORD WORK AREA
DCBSAVE  DC     18F'0'                REGISTER SAVE AREA
VSAMID   DC     X'0008'               VSAM DSORG ID
VSAM     DC     CL4'VSAM'             CONSTANT
UNKN     DC     CL6'UNKN'             CONSTANT
EDWORD   DC     XL6'402020202120'     EDIT WORD
* ------------------------------------------------------------------- *
*              DSORG TABLE                                            *
* ------------------------------------------------------------------- *
DSORGTBL DS     0C
         DC     AL1(DS1DSGIS),CL4'ISAM'
         DC     AL1(DS1DSGPS),CL4'PS'
         DC     AL1(DS1DSGDA),CL4'DA'
         DC     AL1(DS1DSGPO),CL4'PO'
         DC     X'FF'
         SPACE
* ------------------------------------------------------------------- *
*              RECORD FORMAT TABLE                                    *
* ------------------------------------------------------------------- *
RECFMTBL DS     0C
         DC     AL1(DS1RECFF),CL4'F'
         DC     AL1(DS1RECFV),CL4'V'
         DC     AL1(DS1RECFU),CL4'U'
         DC     AL1(DS1RECFT),CL4'T'
         DC     AL1(DS1RECFF+DS1RECFB),CL4'FB'
         DC     AL1(DS1RECFV+DS1RECFB),CL4'VB'
         DC     AL1(DS1RECFT+DS1RECFB),CL4'TB'
         DC     AL1(DS1RECFF+DS1RECFS),CL4'FS'
         DC     AL1(DS1RECFV+DS1RECFS),CL4'VS'
         DC     AL1(DS1RECFT+DS1RECFS),CL4'TS'
         DC     AL1(DS1RECFF+DS1RECFB+DS1RECFS),CL4'FBS'
         DC     AL1(DS1RECFV+DS1RECFB+DS1RECFS),CL4'VBS'
         DC     AL1(DS1RECFT+DS1RECFB+DS1RECFS),CL4'TBS'
         DC     AL1(DS1RECFF+DS1RECFA),CL4'FA'
         DC     AL1(DS1RECFV+DS1RECFA),CL4'VA'
         DC     AL1(DS1RECFT+DS1RECFA),CL4'TA'
         DC     AL1(DS1RECFF+DS1RECFB+DS1RECFA),CL4'FBA'
         DC     AL1(DS1RECFV+DS1RECFB+DS1RECFA),CL4'VBA'
         DC     AL1(DS1RECFT+DS1RECFB+DS1RECFA),CL4'TBA'
         DC     AL1(DS1RECFF+DS1RECFB+DS1RECFA+DS1RECFS),CL4'FBAS'
         DC     AL1(DS1RECFV+DS1RECFB+DS1RECFA+DS1RECFS),CL4'VBAS'
         DC     AL1(DS1RECFT+DS1RECFB+DS1RECFA+DS1RECFS),CL4'TBAS'
         DC     AL1(DS1RECFF+DS1RECMC),CL4'FM'
         DC     AL1(DS1RECFV+DS1RECMC),CL4'VM'
         DC     AL1(DS1RECFT+DS1RECMC),CL4'TM'
         DC     AL1(DS1RECFF+DS1RECFB+DS1RECMC),CL4'FBM'
         DC     AL1(DS1RECFV+DS1RECFB+DS1RECMC),CL4'VBM'
         DC     AL1(DS1RECFT+DS1RECFB+DS1RECMC),CL4'TBM'
         DC     AL1(DS1RECFF+DS1RECFB+DS1RECMC+DS1RECFS),CL4'FBMS'
         DC     AL1(DS1RECFV+DS1RECFB+DS1RECMC+DS1RECFS),CL4'VBMS'
         DC     AL1(DS1RECFT+DS1RECFB+DS1RECMC+DS1RECFS),CL4'TBMS'
         DC     X'FF'
         SPACE
* ------------------------------------------------------------------- *
*              DEVICE TYPE TABLE                                      *
* ------------------------------------------------------------------- *
UNITTBL  DS     0C
         DC     AL1(DCP23052),CL6'2305-2'
         DC     AL1(DCP3330),CL6'3330'
         DC     AL1(DCP33301),CL6'3330-1'
         DC     AL1(DCP3340),CL6'3340'
         DC     AL1(DCP3350),CL6'3350'
         DC     AL1(DCP3375),CL6'3375'
         DC     AL1(DCP3380),CL6'3380'
* CODES NOT DEFINED BY CBDZDCP MACRO
         DC     X'01',CL06'2311'
         DC     X'02',CL06'2301'
         DC     X'03',CL06'2303'
         DC     X'04',CL06'2302'
         DC     X'05',CL06'2321'
         DC     X'06',CL06'2305-1'
         DC     X'08',CL06'2314'
         DC     X'0F',CL06'3390'
         DC     X'FF'
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*              DSORG TABLE                                            *
*                                                                     *
* ------------------------------------------------------------------- *
DSORGD   DSECT
DSORGID  DS    X                     DSORG ID
DSORGNM  DS    CL4                   DSORG NAME
DSORGL   EQU   *-DSORGD
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*              RECORD FORMAT TABLE                                    *
*                                                                     *
* ------------------------------------------------------------------- *
RECFMD   DSECT
RECFMID  DS    X                     RECORD FORMAT ID
RECFMNM  DS    CL4                   RECORD FORMAT NAME
RECFML   EQU   *-RECFMD
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*              UNIT TYPE TABLE                                        *
*                                                                     *
* ------------------------------------------------------------------- *
UNITD    DSECT
UNITID   DS    X                     UNIT TYPE ID
UNITNAME DS    CL6                   UNIT TYPE NAME
UNITL    EQU   *-UNITD
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*              INTERFACE BLOCK                                        *
*                                                                     *
* ------------------------------------------------------------------- *
DCBBLOK  DCBBLOK  TYPE=DSECT
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*              COMMON DATA MAP                                        *
*                                                                     *
* ------------------------------------------------------------------- *
TMAPCOMM TMAPCOMM TYPE=DSECT
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*              EQUATES                                                *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY REGEQU
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*              FORMAT-1 DSCB                                          *
*                                                                     *
* ------------------------------------------------------------------- *
         IECSDSL1 1
* ------------------------------------------------------------------- *
*                                                                     *
*              DEVICE CHARACTERISTICS AND PARAMETERS                  *
*                                                                     *
* ------------------------------------------------------------------- *
CBDZDCP  DSECT
         CBDZDCP
         END  TMAPDCB
./ ADD NAME=TMAPDSS
          TITLE 'TMAPDSS - DF/DSS BACKUP-UPS PROCESSOR'
* ------------------------------------------------------------------- *
*                                                                     *
*     Module name: TMAPDSS - DF/DSS back-ups processor                *
*                                                                     *
*     Function:                                                       *
*     This module prints the DASD's volser, device type, date the     *
*     back-up was taken and the names of the data sets backed-up.     *
*                                                                     *
*     ** This program does not support ISAM.  If any ISAM files are   *
*     ** on the back-up, no info will be printed and there will be    *
*     ** no warning messages issued.                                  *
*                                                                     *
*     ** This program does not support the DF/DSS COMPRESS option.    *
*                                                                     *
* ------------------------------------------------------------------- *
TMAPDSS  CSECT
         USING TMAPDSS,R12
         USING TMAPCOMM,R11
         USING DSSPRFX,R10
         USING DATADSCT,R9
         STM   R14,R12,12(R13)     SAVE REGS
         LR    R12,R15             SET BASE REG
         B     DSS0000             SKIP EYECATCHER
DSSNAME  DC    CL8'TMAPDSS'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
DSS0000  DS    0H
         LA    R15,DSSSAVE         OUR SAVE AREA ADDRESS
         ST    R13,4(R15)          CHAIN CALLER'S SAVE AREA TO OURS
         ST    R15,8(R13)          CHAIN OUR SAVE AREA TO CALLER'S
         LR    R13,R15             SET SAVE AREA ADDRESS
         TMAPTR ID=ENTRY,          TRACE ENTRY                         +
               DATA1=COMMFLAG,                                         +
               DATA2=COMMRECA
         TM    COMMFLAG,$COMMLST   'CLEAN-UP' CALL?
         BO    DSS1000             YES
         L     R10,COMMRECA        FIRST SEGMENT'S ADDRESS
         SR    R8,R8               CLEAR FOR LENGTH
         ICM   R8,3,COMMRECL       PHYSICAL BLOCK SIZE
         TM    COMMFLAG,$COMMINQ   INQUIRE CALL?
         BNO   DSS0020             NO
* ------------------------------------------------------------------- *
*                                                                     *
*     Testing process for DF/DSS data sets is:                        *
*                                                                     *
*     1) Bytes 1-4 of each record is a sequence number, first record  *
*        should be #1, so bytes 1-4 should be X'00000001'.            *
*     2) The julian date of the back up is in the first record in     *
*        bytes 41-43.  The last digit should have a positive sign,    *
*        X'F'.                                                        *
*     3) The volser is in the first record in bytes 33-38.  All 6     *
*        bytes should be in the range X'40' to X'F9'.                 *
*                                                                     *
* ------------------------------------------------------------------- *
         TMAPTR ID=INQCALL
         CLC   DSSSEG#,SEG1        POSSIBLY DF/DSS?
         BNE   EXIT0008            NO
         TM    42(R10),X'0F'       TEST SIGN OF CREATION DATE
         BNO   EXIT0008            NOT DF/DSS
         LA    R1,6                NUMBER OF CHARACTERS IN VOLSER
         LA    R2,32(R10)          FIRST CHARACTER OF VOLSER
DSS0010  DS    0H
         CLI   0(R2),X'40'         TOO LOW?
         BL    EXIT0008            YES.. NOT VALID
         CLI   0(R2),X'F9'         TOO HIGH?
         BH    EXIT0008            YES.. NOT VALID
         LA    R2,1(R2)            NEXT
         BCT   R1,DSS0010          CHECK ALL OF THEM
         TMAPTR ID=HEADING
         MVI   DSSFLAG,0           RESET ALL FLAGS
         XC    DCBDSOD,DCBDSOD     SET DATA SET ORG DISP
         XC    DCBRFMD,DCBRFMD     SET RECORD FORMAT DISP
         XC    DCBBSZD,DCBBSZD     SET BLOCK SIZE DISP
         XC    DCBRSZD,DCBRSZD     SET RECORD SIZE DISP
         MVC   DCBUNTD,UNTD        OFFSET TO UNIT TYPE
         ST    R10,DCBRECA         PASS RECORD ADDRESS
         LA    R1,DCBBLOK          DCB CONVERTER PARMS
         L     R15,ADCB            DCB CONVERTER ENTRY POINT
         BALR  R14,R15             LINK TO DCB CONVERTER
         MVC   HEADUNIT,DCBUNT     COPY UNIT TYPE
         MVC   HEADVOL,32(R10)     MOVE VOLSER
         MVC   HEADDATE,DATEEDWD   INITIALIZE EDIT WORD
         ED    HEADDATE,40(R10)    EDIT CREATION DATE
         MVC   PRTDATA(HEADINGL),HEADING
         BAL   R7,PRT0000          PRINT HEADING
         MVC   COMMSUBH(SUBHEADL),SUBHEAD
         MVC   PRTDATA(SUBHEADL),SUBHEAD
         BAL   R7,PRT0000          PRINT SUB HEADING
         B     EXIT0000            AND EXIT
* ------------------------------------------------------------------- *
*                                                                     *
*  Split the segments out into the logical records.                   *
*                                                                     *
* ------------------------------------------------------------------- *
DSS0020  DS    0H
         TM    DSSFLAG,$ERROR       ERROR FLAG ON?
         BO    EXIT0000             YES
         CLC   DSSSEG#,SEG1         SEGMENT 1?
         BE    EXIT0000             YES.. DON'T WORRY ABOUT IT
         CH    R8,H22               END OF BACK-UP RECORD?
         BE    EXIT0000             YES
         CLI   DSSSEGSQ,1           FIRST SEGMENT IN LOGICAL RECORD?
         BNE   DSS0050              NO.. ADD TO EXISTING BLOCK
         SR    R3,R3                CLEAR REGISTER
         ICM   R3,3,DSSLEN          LENGTH OF THIS SEGMENT
         SH    R3,=Y(DSSPRFXL)      MINUS DSS PREFIX LENGTH
         AH    R3,=Y(DATAL)         PLUS DATA BLOCK PREFIX LENGTH
         GETMAIN R,LV=(R3)          ACQUIRE STORAGE
         TMAPTR ID=NEWDATA,         TRACE NEW 'DATA' BLOCKS            +
               RDATA1=R1,           .. NEW BLOCK'S ADDRESS             +
               RDATA2=R3            .. NEW BLOCK'S LENGTH
         LA    R14,DATA1ST          INTIALIZE 'LAST' POINTER
         ICM   R9,15,DATA1ST        FIRST ON CHAIN
         BZ    DSS0040              END OF CHAIN FOUND
DSS0030  DS    0H
         LR    R14,R9               SET 'LAST' POINTER
         ICM   R9,15,DATANEXT       NEXT ON CHAIN
         BNZ   DSS0030              LOOP
* ------------------------------------------------------------------- *
*                                                                     *
* R1   POINTS TO NEW STORAGE                                          *
* R14  POINTS TO LAST BLOCK ON THE CHAIN                              *
*                                                                     *
* ------------------------------------------------------------------- *
DSS0040  DS    0H
         LR    R9,R1                COPY STORAGE ADDRESS
         ST    R9,DATANEXT-DATADSCT(R14)  SET FORWARD POINTER IN PREV
         XC    DATANEXT,DATANEXT    CLEAR FORWARD POINTER IN NEW
         ST    R14,DATAPREV         SET BACKWARD POINTER IN NEW
         ST    R3,DATALEN           SET BLOCK LENGTH
         SR    R15,R15              CLEAR REGISTER
         IC    R15,DSSSEGS          NUMBER OF SEGMENTS
         STH   R15,DATASEGS         SET NUMBER OF SEGMENTS
         MVC   DATASEGF,=X'0001'    NUMBER OF SEGMENTS FOUND
         L     R1,DSSSEG#           THIS SEGMENT'S SEGMENT NUMBER
         ST    R1,DATASEGL          SET LOW SEGEMENT NUMBER
         BCTR  R15,0                MINUS 1
         AR    R1,R15               PLUS ADDITIONAL SEGEMENTS
         ST    R1,DATASEGH          HIGH SEGMENT NUMBER
         ICM   R15,3,DSSLEN         THIS SEGMENT'S LENGTH
         SH    R15,=Y(DSSPRFXL)     MINUS PREFIX'S LENGTH
         ST    R15,DATADLEN         SET LENGTH
         LR    R1,R15               SET LENGTH
         LA    R0,DSSDATA2          START OF DATA
         LA    R14,DATADATA         DITTO
         MVCL  R14,R0               COPY DATA
         B     DSS0110              FIND NEXT SEGMENT
DSS0050  DS    0H
         TMAPTR ID=ADDDATA          TRACE ADDITIONS TO 'DATA' BLOCKS
         ICM   R9,15,DATA1ST        FIRST BLOCK ON THE CHAIN
DSS0060  DS    0H
         BZ    ERR0080              SERIOUS PROBLEM
         CLC   DSSSEG#,DATASEGL     TOO LOW?
         BL    DSS0070              YES
         CLC   DSSSEG#,DATASEGH     TOO HIGH?
         BH    DSS0070              YES
         B     DSS0080              BLOCK LOCATED
DSS0070  DS    0H
         ICM   R9,15,DATANEXT       NEXT BLOCK
         B     DSS0060              LOOP
DSS0080  DS    0H
         SR    R3,R3                CLEAR REGISTER
         ICM   R3,3,DSSLEN          SEGMENT'S LENGTH
         SH    R3,=Y(DSSPRFXS)      MINUS PREFIX'S LENGTH
         A     R3,DATALEN           PLUS PREVIOUS BLOCK'S LENGTH
         GETMAIN R,LV=(R3)          ACQUIRE NEW STORAGE
         TMAPTR ID=ADDDATA2,        TRACE NEW 'DATA' BLOCKS            +
               RDATA1=R1,           .. NEW BLOCK'S ADDRESS             +
               RDATA2=R3            .. NEW BLOCK'S LENGTH
         LR    R2,R1                COPY STORAGE ADDRESS
         ICM   R1,15,DATANEXT       NEXT BLOCK'S ADDRESS
         BZ    DSS0090              NO 'NEXT' BLOCK
         ST    R2,DATAPREV-DATADSCT(R1)   SET BACKWARD IN NEXT BLOCK
DSS0090  DS    0H
         ICM   R1,15,DATAPREV             PREVIOUS BLOCK'S ADDRESS
         BZ    DSS0100                    NO 'PREVIOUS' BLOCK
         ST    R2,DATANEXT-DATADSCT(R1)   SET FORWARD IN PREVIOUS
DSS0100  DS    0H
         MVC   0(DATAL,R2),DATADSCT       COPY PREFIX TO NEW BLOCK
         ST    R3,DATALEN-DATADSCT(R2)    SET BLOCK LENGTH
         SH    R3,=Y(DATAL)               DATA'S LENGTH
         ST    R3,DATADLEN-DATADSCT(R2)   SET DATA LENGTH
         LH    R1,DATASEGF-DATADSCT(R2)   NUMBER OF SEGMENTS FOUND
         LA    R1,1(R1)                   PLUS 1
         STH   R1,DATASEGF-DATADSCT(R2)   TOTAL FOUND
         LA    R0,DATADATA                DATA IN OLD BLOCK
         L     R1,DATADLEN                DATA LENGTH IN OLD BLOCK
         LA    R14,DATADATA-DATADSCT(R2)  DATA IN NEW BLOCK
         LR    R15,R1                     SET LENGTH
         MVCL  R14,R0                     COPY TO NEW BLOCK
         LA    R0,DSSDATA1                DATA IN TAPE BUFFER
         SR    R1,R1                      CLEAR REGISTER
         ICM   R1,3,DSSLEN                DATA LENGTH
         SH    R1,=Y(DSSPRFXS)            MINUS PREFIX LENGTH
         LR    R15,R1                     SET LENGTH
         MVCL  R14,R0                     COPY NEW DATA
         L     R0,DATALEN                 OLD BLOCK'S LENGTH
         FREEMAIN R,A=(R9),LV=(R0)        FREE OLD BLOCK
DSS0110  DS    0H
         SR    R1,R1               CLEAR REGISTER
         ICM   R1,3,DSSLEN         SEGMENT'S LENGTH
         AR    R10,R1              NEXT SEGMENT'S ADDRESS
         SR    R8,R1               MINUS SEGMENT'S LENGTH
         BH    DSS0020             MORE TO DO
* ------------------------------------------------------------------- *
*                                                                     *
*     The segments in the current tape buffer have been split up      *
*     and chained together.  We can now process any logical record    *
*     that has all of its segments present.                           *
*                                                                     *
* ------------------------------------------------------------------- *
DSS0120  DS    0H
         BAL   R7,DSS0700          FIND FIRST COMPLETE BLOCK
         B     DSS0140
DSS0130  DS    0H
         BAL   R7,DSS0720          FIND NEXT COMPLETE BLOCK
DSS0140  DS    0H
         LTR   R9,R9               BLOCK FOUND?
         BZ    EXIT0000            NO
         L     R8,DATADLEN         DATA LENGTH
         TMAPTR ID=EXAMDATA,       COMPLETED BLOCK FOUND, EXAMINE IT   +
               RDATA1=R9,                                              +
               RDATA2=R8
         LA    R10,DATADATA        DSS DATA OF THIS BLOCK
         USING VTOCDATA,R10        DEFINE BASE
DSS0150  DS    0H
         CLC   DATASEGL,SEG3       SEGMENT 3?
         BL    DSS0180             NO.. TOO LOW
         BH    DSS0190             NO.. TOO HIGH
*---------------------------------------------------------------------*
*      RECORD 3 HAS CYLINDER 0'S DATA (INCLUDING THE VTOC POINTER)    *
*---------------------------------------------------------------------*
DSS0160  DS    0H
         TMAPTR ID=REC3SRCH,       SEARCHING FOR VTOC POINTER          +
               DATA1=VTOCCKD       .. CURRENT RECORD'S COUNT DATA
         CLC   VTOCPTRA,VTOCCKD    VTOC POINTER RECORD?
         BE    DSS0170             YES
         BAL   R7,DSS0500          NEXT TRACK
         LTR   R8,R8               MORE DATA?
         BNZ   DSS0160             KEEP LOOKING FOR RECORD 3
         B     ERR0020             RECORD 3 NOT FOUND!
DSS0170  DS    0H
         TMAPTR ID=VTOCPTR,        VTOC POINTER FOUND                  +
               DATA1=16(R10),      .. VOLSER FROM POINTER              +
               DATA2=23(R10)       .. VTOC'S ADDRESS
         OI    DSSFLAG,$VTOC1      VTOC POINTER HAS BEEN LOCATED
         CLC   HEADVOL,16(R10)     VOLSER MATCH?
         BNE   ERR0030             NO...
         MVC   VTOCLOW,23(R10)     SAVE VTOC'S ADDRESS
DSS0180  DS    0H
         L     R10,DATANEXT        NEXT BLOCK ON THE CHAIN
         BAL   R7,DSS0600          FREE THIS DATA BLOCK
         LTR   R9,R10              ANOTHER BLOCK AVAILABLE?
         BZ    EXIT0000            NO
         BAL   R7,DSS0710          FIND NEXT COMPLETE BLOCK
         B     DSS0140
*---------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
DSS0190  DS    0H
         CLC   VTOCDSKA,VTOCLOW    START OF VTOC?
         BL    DSS0250             NO
         BE    DSS0230             YES
         TM    DSSFLAG,$VTOC2      VTOC EVER STARTED?
         BNO   DSS0250             NO
         TM    DSSFLAG,$VTOC3      VTOC COMPLETED?
         BO    DSS0250             YES
         CLC   VTOCDSKA(4),VTOCHIGH BEYOND END OF VTOC?
         BH    DSS0240             YES
         CLI   DS1FMTID,0          UNUSED RECORD?
         BE    DSS0360             YES
         CLI   DS1FMTID,C'1'       FORMAT-1 RECORD?
         BE    DSS0200             YES
         CLI   DS1FMTID,C'2'       FORMAT-2 RECORD?
         BE    DSS0360             YES
         CLI   DS1FMTID,C'3'       FORMAT-3 RECORD?
         BE    DSS0200             YES
         CLI   DS1FMTID,C'5'       FORMAT-5 RECORD?
         BE    DSS0360             YES
         TMAPTR ID=UNKNVTOC        UNKNOWN VTOC RECORD TYPE
         ABEND ABEND005,DUMP,,USER ABEND
DSS0200  DS    0H
         GETMAIN R,LV=VTOCL        ACQUIRE STORAGE FOR NEW RECORD
         OC    VTOC1ST,VTOC1ST     ANYTHING ON THE CHAIN?
         BNZ   DSS0210             YES
         ST    R1,VTOC1ST          SET FIRST ON CHAIN
DSS0210  DS    0H
         ICM   R15,15,VTOCLAST     LAST ON CHAIN
         BZ    DSS0220             NO 'LAST ON CHAIN'
         ST    R1,VTOCNEXT-VTOCDATA(R15)
DSS0220  DS    0H
         ST    R1,VTOCLAST
         MVC   0(VTOCNEXT-VTOCDATA,R1),VTOCDATA
         XC    VTOCNEXT-VTOCDATA(4,R1),VTOCNEXT-VTOCDATA(R1)
         MVI   VTOCFLAG-VTOCDATA(R1),0   CLEAR ALL FLAGS
         B     DSS0360             SKIP TO NEXT RECORD ON THE TRACK
DSS0230  DS    0H
         CLI   DS1FMTID,C'4'       FORMAT-4 RECORD?
         BNE   ERR0040             FIRST RECORD NOT FORMAT-4
         OI    DSSFLAG,$VTOC2      VTOC STARTED
         MVC   VTOCHIGH,DS4VTOCE+6 SAVE VTOC ENDING ADDRESS
         TMAPTR ID=VTOCFND,        VTOC FOUND                          +
               DATA1=VTOCHIGH
         B     DSS0360             SKIP TO NEXT RECORD ON THE TRACK
DSS0240  DS    0H
         TMAPTR ID=VTOCDONE
         OI    DSSFLAG,$VTOC3      VTOC COMPLETE
*---------------------------------------------------------------------*
*                                                                     *
*      All VTOC records are now in a chain.  The next step is to      *
*      locate the type 3 records that go with the type 1's.           *
*                                                                     *
*      The procedure used is:                                         *
*        1) Scan for type 1 records that have a disk address for a    *
*           type 3 record, when the end of the chain is reached,      *
*           resume processing tape records.                           *
*        2) Scan the chain for the type 3 with the corresponding      *
*           disk address.                                             *
*        3) Over-store the disk address with the type 3's storage     *
*           address.                                                  *
*        4) Test for a further type 3 disk address (type 3 chained    *
*           from another type 3), if no address is present, go to     *
*           step 1, if an address is present, go to step 2.           *
*                                                                     *
*---------------------------------------------------------------------*
DSS0250  DS    0H
         TM    DSSFLAG,$VTOC3      VTOC COMPLETED YET?
         BNO   DSS0130             NO, CANNOT PROCESS YET
         TM    DSSFLAG,$FORMAT3    FORMAT-3 STUFF ALREADY DONE?
         BO    DSS0310             YES
         OI    DSSFLAG,$FORMAT3    SET FORMAT-3 FLAG
         TMAPTR ID=FMT3SRCH
         ST    R10,FMT3SV10        SAVE REGISTER 10
         ICM   R10,15,VTOC1ST      FIRST VTOC RECORD ON THE CHAIN
         BZ    ERR0050             NO VTOC CHAIN?
DSS0260  DS    0H
         CLI   DS1FMTID,C'1'       TYPE 1 RECORD?
         BNE   DSS0300             NO, TRY NEXT ONE
         OC    DS1PTRDS,DS1PTRDS   FORMAT-2 OR 3 ADDRESS
         BZ    DSS0300             NO TYPE 2 OR 3 ADDRESS
         TM    DS1DSORG,DS1DSGIS   IS IT AN ISAM FILE?
         BO    DSS0300             FORGET ISAM
         LR    R15,R10             COPY FORMAT-1'S ADDRESS
DSS0270  DS    0H
         ICM   R1,15,VTOC1ST       FIRST ON CHAIN
DSS0280  DS    0H
         CLC   VTOCDSKA-VTOCDATA(L'VTOCDSKA,R1),DS1PTRDS-VTOCDATA(R15)
         BE    DSS0290             FORMAT 3 LOCATED
         ICM   R1,15,VTOCNEXT-VTOCDATA(R1)
         BNZ   DSS0280             KEEP LOOKING
         B     ERR0060             FORMAT-3 NOT FOUND
DSS0290  DS    0H
         TMAPTR ID=CHAIN-F3,       FORMAT-3 LOCATED                    +
               RDATA1=R15,         .. FORMAT-1 (OR FORMAT-3'S) ADDRESS +
               RDATA2=R1           .. FORMAT-3'S ADDRESS
         ST    R1,DS1PTRDS-VTOCDATA(R15) OVER-STORE DISK ADDRESS
         LR    R15,R1              COPY FORMAT-3'S ADDRESS
         OC    DS1PTRDS-VTOCDATA(L'DS1PTRDS,R15),DS1PTRDS-VTOCDATA(R15)
         BNZ   DSS0270             SEARCH FOR CHAINED FORMAT-3
DSS0300  DS    0H
         ICM   R10,15,VTOCNEXT     NEXT ON CHAIN
         BNZ   DSS0260             PROCESS ENTIRE CHAIN
         L     R10,FMT3SV10        RESTORE DATA ADDRESS
*---------------------------------------------------------------------*
*                                                                     *
*   VTOC records are all read and chained, FORMAT-3 records have been *
*   chained to FORMAT-1 (or FORMAT-3).  Now check each record to find *
*   out which dataset it belongs to.                                  *
*                                                                     *
*---------------------------------------------------------------------*
DSS0310  DS    0H
         TMAPTR ID=FINDFILE,       SEARCHING FOR FILE                  +
               DATA1=0(R10)        .. CAPTURE DISK ADDRESS
         ICM   R2,15,VTOC1ST       FIRST VTOC RECORD ON CHAIN
DSS0320  DS    0H
         CLI   DS1FMTID-VTOCDATA(R2),C'1'   FORMAT-1 VTOC RECORD?
         BNE   DSS0340                      NO
         LA    R14,DS1EXT1-VTOCDATA(R2)     1ST EXTENT
         LA    R15,3               NUMBER OF EXTENTS
         BAL   R7,DSS0370          SEARCH THESE EXTENTS
         LTR   R15,R15             FILE FOUND?
         BNZ   DSS0350             YES
         ICM   R3,15,DS1PTRDS-VTOCDATA(R2)  FORMAT-3 ADDRESS
DSS0330  DS    0H
         BZ    DSS0340             NO FORMAT-3
         LA    R14,DS3EXTNT-VTOCDATA(R3) FIRST 4 EXTENTS IN FORMAT-3
         LA    R15,4               NUMBER OF EXTENTS
         BAL   R7,DSS0370          SEARCH THESE EXTENTS
         LTR   R15,R15             FILE FOUND?
         BNZ   DSS0350             YES
         LA    R14,DS3ADEXT-VTOCDATA(R3) LAST 9 EXTENTS
         LA    R15,9               NUMBER OF EXTENTS
         BAL   R7,DSS0370          SEARCH THESE EXTENTS
         LTR   R15,R15             FILE FOUND?
         BNZ   DSS0350             YES
         ICM   R3,15,DS3PTRDS-VTOCDATA(R3)
         B     DSS0330             LOOP
DSS0340  DS    0H
         ICM   R2,15,VTOCNEXT-VTOCDATA(R2) NEXT VTOC ENTRY
         BNZ   DSS0320             CHECK IT OUT
         B     ERR0070             NEVER FOUND?
DSS0350  DS    0H
         TMAPTR ID=FILEFND,        FILE FOUND                          +
               RDATA1=R2           FORMAT-1'S ADDRESS
         TM    VTOCFLAG-VTOCDATA(R2),$VTOCFND   ALREADY FOUND?
         BO    DSS0360                          YES
         OI    VTOCFLAG-VTOCDATA(R2),$VTOCFND   SET 'FOUND' FLAG
         MVC   PRDSN,DS1DSNAM-VTOCDATA(R2)      SET DATASET NAME
         ST    R2,DCBRECA          SET RECORD ADDRESS
         MVC   DCBDSOD,DSOD        SET DATA SET ORG DISP
         MVC   DCBRFMD,RFMD        SET RECORD FORMAT DISP
         MVC   DCBBSZD,BSZD        SET BLOCK SIZE DISP
         MVC   DCBRSZD,RSZD        SET RECORD SIZE DISP
         XC    DCBUNTD,DCBUNTD     NO UNIT TYPE TO PASS OVER
         LA    R1,DCBBLOK          DCB CONVERTER PARMS
         L     R15,ADCB            DCB CONVERTER ENTRY POINT
         BALR  R14,R15             LINK TO DCB CONVERTER
         MVC   PRDSO,DCBDSO        SET DSORG
         MVC   PRRFM,DCBRFM        SET RECORD FORMAT
         MVC   PRBSZ,DCBBSZ        SET BLOCK SIZE
         MVC   PRRSZ,DCBRSZ        SET RECORD SIZE
         MVC   PRTDATA(DSMSGL),DSMSG      MOVE DATA
         BAL   R7,PRT0000          PRINT DATASET MESSAGE
DSS0360  DS    0H
         BAL   R7,DSS0500          NEXT TRACK'S DATA
         LTR   R8,R8               ANY DATA?
         BNZ   DSS0150             MORE DATA
         ICM   R10,15,DATANEXT     NEXT BLOCK ON CHAIN
         BAL   R7,DSS0600          FREE THIS BLOCK
         LTR   R9,R10              ANY MORE BLOCKS?
         BZ    EXIT0000            NO
         BAL   R7,DSS0710          FIND NEXT COMPLETE BLOCK
         B     DSS0140
*---------------------------------------------------------------------*
*                                                                     *
*   Search for extent                                                 *
*                                                                     *
*    R9  Return address                                               *
*    R10 Current track's data address                                 *
*    R14 First extent's address                                       *
*    R15 Number of extents/return code                                *
*                                                                     *
*    Return codes in R15: zero = extent not found                     *
*                         non-zero = extent found                     *
*                                                                     *
*---------------------------------------------------------------------*
DSS0370  DS    0H
         CLC   VTOCCKD(4),2(R14)   TOO LOW?
         BL    DSS0380             YES.. NOT IN THIS EXTENT
         CLC   VTOCCKD(4),6(R14)   TOO HIGH?
         BH    DSS0380             YES.. NOT IN THIS EXTENT
         BR    R7                  RETURN
DSS0380  DS    0H
         LA    R14,10(R14)         NEXT EXTENT
         BCT   R15,DSS0370         LOOP
         BR    R7                  RETURN
*---------------------------------------------------------------------*
*                                                                     *
*   "DEBLOCK" RECORDS 1 TRACK AT A TIME                               *
*                                                                     *
*    R7  RETURN ADDRESS                                               *
*    R8  LENGTH LEFT TO PROCESS                                       *
*    R10 SET TO 'NEXT' TRACK DATA ADDRESS                             *
*    R14 WORK REGISTER                                                *
*    R15 WORK REGISTER                                                *
*                                                                     *
*---------------------------------------------------------------------*
DSS0500  DS    0H
         TMAPTR ID=NEXTTRAK,       ENTER A TRACE ENTRY                 +
               RDATA1=(R10),       .. CURRENT ADDRESS                  +
               RDATA2=(R8)         .. LENGTH REMAINING
         USING COUNT,R10           DEFINE BASE
         SR    R14,R14             CLEAR REGISTER
         SR    R15,R15             CLEAR REGISTER
         IC    R14,COUNTKL         CURRENT RECORD'S KEY LENGTH
         ICM   R15,3,COUNTDL       CURRENT RECORD'S DATA LENGTH
         LA    R14,COUNTL(R14,R15) TOTAL LENGTH
         AR    R10,R14             NEXT TRACK'S DATA
         SR    R8,R14              MINUS LENGTH USED
         BM    DSS0510             OOPS
         BR    R7                  RETURN
DSS0510  DS    0H
         TMAPTR ID=LENNEG,         LENGTH WENT NEGATIVE                +
               RDATA1=R8
         ABEND ABEND006,DUMP,,USER
*---------------------------------------------------------------------*
*                                                                     *
*     Free data blocks.                                               *
*                                                                     *
*     R7  return address                                              *
*     R9  address of data block to be freed                           *
*                                                                     *
*---------------------------------------------------------------------*
DSS0600  DS    0H
         TMAPTR ID=FREEDATA,       FREE A DATA BLOCK                   +
               RDATA1=R9
         ICM   R1,15,DATANEXT      NEXT BLOCK ON THE CHAIN
         BZ    DSS0610             NO NEXT BLOCK
         MVC   DATAPREV-DATADSCT(4,R1),DATAPREV
DSS0610  DS    0H
         ICM   R1,15,DATAPREV      PREVIOUS BLOCK ON CHAIN
         BZ    DSS0620             NO PREVIOUS BLOCK
         MVC   DATANEXT-DATADSCT(4,R1),DATANEXT
DSS0620  DS    0H
         L     R0,DATALEN          LENGTH OF THE BLOCK
         FREEMAIN R,A=(R9),LV=(0)  FREE THE BLOCK
         BR    R7
*---------------------------------------------------------------------*
*                                                                     *
*     Find next complete block                                        *
*                                                                     *
*     R7  return address                                              *
*     R9  address of current data block or zero                       *
*                                                                     *
*---------------------------------------------------------------------*
DSS0700  DS    0H
         TMAPTR ID=NEXTDATA,              LOCATING NEXT 'DATA' BLOCK   +
               RDATA1=R9
         ICM   R9,15,DATA1ST              FIRST DATA BLOCK
         BZR   R7                         NONE ON CHAIN
DSS0710  DS    0H
         CLC   DATASEGS,DATASEGF          ALL SEGMENTS FOUND?
         BER   R7                         YES
DSS0720  DS    0H
         ICM   R9,15,DATANEXT             NEXT DATA BLOCK
         BZR   R7                         END OF CHAIN
         B     DSS0710                    CHECK FOR ALL SEGMENTS
*---------------------------------------------------------------------*
*                                                                     *
*              Free any blocks on "DATA" chain                        *
*                                                                     *
*---------------------------------------------------------------------*
DSS1000  DS    0H
         TMAPTR ID=CLEANUP                TRACE POINT
         XC    VTOCLOW,VTOCLOW            CLEAR VTOC LOW LIMIT
         XC    VTOCHIGH,VTOCHIGH          CLEAR VTOC HIGH LIMIT
         L     R9,DATA1ST                 FIRST 'DATA' BLOCK
DSS1010  DS    0H
         LTR   R9,R9                      ADDRESS ZERO?
         BZ    DSS1020                    END OF CHAIN
         LR    R1,R9                      COPY CURRENT BLOCK'S ADDR
         L     R0,DATALEN                 LENGTH OF THIS BLOCK
         TMAPTR ID=FREEDATA,              TRACE FREE'S                 +
               RDATA1=R1,                 .. BLOCK ADDRESS             +
               RDATA2=R0                  .. BLOCK SIZE
         L     R9,DATANEXT                 NEXT BLOCK
         FREEMAIN R,A=(1),LV=(0)          FREE THIS BLOCK
         B     DSS1010                    CHECK FOR MORE
DSS1020  DS    0H
         XC    DATA1ST,DATA1ST            CLEAR '1ST' POINTER
         L     R2,VTOC1ST                 FIRST VTOC BLOCK
DSS1030  DS    0H
         LTR   R2,R2                      ADDRESS ZERO?
         BZ    DSS1040                    YES END OF CHAIN
         LR    R1,R2                      COPY BLOCK'S ADDRESS
         TMAPTR ID=FREEVTOC,              TRACE FREE'S                 +
               RDATA1=R2                  .. BLOCK'S ADDRESS
         L     R2,VTOCNEXT-VTOCDATA(R2)   NEXT BLOCK
         FREEMAIN R,A=(1),LV=VTOCL        FREE THIS BLOCK
         B     DSS1030                    CHECK FOR MORE
DSS1040  DS    0H
         XC    VTOC1ST,VTOC1ST            CLEAR VTOC 1ST POINTER
         XC    VTOCLAST,VTOCLAST          CLEAR VTOC LAST POINTER
         XC    VTOCXTNT,VTOCXTNT          CLEAR VTOC EXTENT INFO
         B     EXIT0000                   EXIT
*---------------------------------------------------------------------*
*                                                                     *
*              SERIOUS ERRORS                                         *
*                                                                     *
*---------------------------------------------------------------------*
ERR0010  DS    0H
         TMAPTR ID=R3SHORT,        RECORD #3'S LENGTH IS < 40          +
               DATA1=COMMRECL,     .. RECORD LENGTH FROM 'COMM'        +
               DATA2=COMMRECA      .. RECORD ADDRESS FROM 'COMM'
         MVC   PRTDATA(MSG01L),MSG01
         BAL   R7,PRT0000          PRINT MESSAGE
         OI    DSSFLAG,$ERROR      SET ERROR FLAG
         B     EXIT0000            AND EXIT
ERR0020  DS    0H
         TMAPTR ID=NOVTCPTR,       VTOC POINTER NOT FOUND IN RECORD 3  +
               DATA1=COMMRECL,     .. RECORD LENGTH FROM 'COMM'        +
               DATA2=COMMRECA      .. RECORD ADDRESS FROM 'COMM'
         MVC   PRTDATA(MSG02L),MSG02
         BAL   R7,PRT0000          PRINT MESSAGE
         OI    DSSFLAG,$ERROR      SET ERROR FLAG
         B     EXIT0000            AND EXIT
ERR0030  DS    0H
         TMAPTR ID=XVOLSER,        VOLSER'S DON'T MATCH (REC 1/VTOCPTR)+
               DATA1=HEADVOL,      .. VOLSER FROM RECORD 1             +
               DATA2=COMMRECA      .. RECORD ADDRESS FROM 'COMM'
         MVC   PRTDATA(MSG03L),MSG03
         BAL   R7,PRT0000          PRINT MESSAGE
         OI    DSSFLAG,$ERROR      SET ERROR FLAG
         B     EXIT0000            AND EXIT
ERR0040  DS    0H
         TMAPTR ID=XVTOCADR        FIRST RECORD FROM VTOC NOT FORMAT-3
         MVC   PRTDATA(MSG04L),MSG04
         BAL   R7,PRT0000          PRINT MESSAGE
         OI    DSSFLAG,$ERROR      SET ERROR FLAG
         B     EXIT0000            AND EXIT
ERR0050  DS    0H
         TMAPTR ID=NOCHAIN         NO VTOC CHAIN AT END OF VTOC
         MVC   PRTDATA(MSG05L),MSG05
         BAL   R7,PRT0000          PRINT MESSAGE
         OI    DSSFLAG,$ERROR      SET ERROR FLAG
         B     EXIT0000            AND EXIT
ERR0060  DS    0H
         TMAPTR ID=NOFMT-3,        FORMAT-3 NOT FOUND                  +
               RDATA1=R2           .. FORMAT-1'S ADDRESS
         MVC   PRTDATA(MSG06L),MSG06
         BAL   R7,PRT0000          PRINT MESSAGE
         OI    DSSFLAG,$ERROR      SET ERROR FLAG
         B     EXIT0000            AND EXIT
ERR0070  DS    0H
         TMAPTR ID=NOFILE,         NO EXTENT IN VTOC TO MATCH          +
               DATA1=0(R10)        .. CAPTURE DISK ADDRESS
         MVC   PRTDATA(MSG07L),MSG07
         BAL   R7,PRT0000          PRINT MESSAGE
         OI    DSSFLAG,$ERROR      SET ERROR FLAG
         DC    H'0'
         B     EXIT0000            AND EXIT
ERR0080  DS    0H
         TMAPTR ID=ORPHAN,         ORPHAN SEGMENT LOCATED              +
               RDATA1=R10          .. SEGMENTS ADDRESS
         MVC   PRTDATA(MSG08L),MSG08
         BAL   R7,PRT0000          PRINT MESSAGE
         OI    DSSFLAG,$ERROR      SET ERROR FLAG
         B     EXIT0000            AND EXIT
*---------------------------------------------------------------------*
*                                                                     *
*              PRINTING                                               *
*                                                                     *
*---------------------------------------------------------------------*
PRT0000  DS    0H
         MVI   PRTCMD,$PRTPRT      REQUEST PRINT
         MVI   PRTCC,C' '          SINGLE SPACE
         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK
         L     R15,APRT            PRINT MODULE ENTRY POINT
         BALR  R14,R15             LINK TO PRINT MODULE
         BR    R7                  RETURN
* ------------------------------------------------------------------- *
*                                                                     *
*             EXIT                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS   0H
         TMAPTR ID=EXIT0000         EXITING, RC=0
         SR    R15,R15              SET RETURN CODE TO ZERO
         B     DSS9900              AND RETURN
EXIT0008 DS    0H
         TMAPTR ID=EXIT0008         EXITING, RC=8
         LA    R15,8                SET RETURN CODE TO 8
DSS9900  DS    0H
         L     R13,4(R13)           RESTORE REGISTER 13
         L     R14,12(R13)          RESTORE REGISTER 14
         LM    R0,R12,20(R13)       RESTORE ALL OTHER REGISTERS
         BR    R14                  RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
*              WORK AREAS                                             *
*                                                                     *
* ------------------------------------------------------------------- *
DSSSAVE  DC    18F'0'               REGISTER SAVE AREA
VTOC1ST  DC    A(0)                 FIRST VTOC RECORD ON CHAIN
VTOCLAST DC    A(0)                 LAST VTOC RECORD ON CHAIN
DATA1ST  DC    A(0)                 DATA CHAIN ANCHOR
         DC    A(0)
FMT3SV10 DC    A(0)                 REG 10 SAVED DURING FMT-3 CHAINING
H22      DC    H'22'                CONSTANT
DSOD     DC    Y(DS1DSORG-VTOCDATA) DISPLACEMENT TO DSORG
RFMD     DC    Y(DS1RECFM-VTOCDATA) DISPLACEMENT TO RECORD FORMAT
BSZD     DC    Y(DS1BLKL-VTOCDATA)  DISPLACEMENT TO BLOCK SIZE
RSZD     DC    Y(DS1LRECL-VTOCDATA) DISPLACEMENT TO RECORD SIZE
UNTD     DC    H'50'                DISPLACEMENT TO UNIT TYPE
DSSFLAG  DC    X'00'                FLAGS
$ERROR   EQU   X'80'                .. SERIOUS ERROR HAS OCCURRED
$FORMAT3 EQU   X'40'                .. FORMAT-3 CHAINING COMPLETE
$VTOC1   EQU   X'20'                .. VTOC POINTER LOCATED
$VTOC2   EQU   X'10'                .. VTOC LOCATED
$VTOC3   EQU   X'08'                .. VTOC PROCESSING COMPLETED
DATEEDWD DC    X'4021204B202020'    DATE EDIT WORD
SEG1     DC    X'00000001'          SEGMENT NUMBER 1
SEG3     DC    X'00000003'          SEGMENT NUMBER 3
SEG4     DC    X'00000004'          SEGMENT NUMBER 4
VTOCPTRA DC    X'0000000003'        VTOC POINTER'S DISK ADDRESS
* ------------------------------------------------------------------- *
VTOCXTNT DS    0XL10                VTOC EXTENT
VTOCLOW  DC    XL5'00'              .. VTOC LOWER EXTENT LIMIT
VTOCHIGH DC    XL5'00'              .. VTOC HIGH EXTENT LIMIT
* ------------------------------------------------------------------- *
HEADING  DC    C'THIS DATA SET IS A DF/DSS BACK-UP, DEVICE TYPE WAS '
HEADUNIT DC    CL06' '
         DC    C' VOLSER WAS '
HEADVOL  DS    CL06' '
         DC    C' CREATED ON'
HEADDATE DS    CL07' '
HEADINGL EQU   *-HEADING
SUBHEAD  DS    0C
         DC    C'DATA SETS BACKED-UP ARE:'
SUBHEADL EQU   *-SUBHEAD
DSMSG    DS    0C
         DC    C'DSN='
PRDSN    DC    CL44' '
         DC    C'   DSORG:'
PRDSO    DC    CL4' '
         DC    C'   RECFM:'
PRRFM    DC    CL4' '
         DC    C'   BLKSZ:'
PRBSZ    DC    CL6' '
         DC    C'   LRECL:'
PRRSZ    DC    CL6' '
DSMSGL   EQU   *-DSMSG
MSG01    DC    C'*** RECORD #3''S LENGTH IS < 40, CANNOT BE CYL 0, TRAC+
               K 0, PROCESSING ABORTED'
MSG01L   EQU   *-MSG01
MSG02    DC    C'*** VTOC POINTER NOT FOUND IN RECORD #3, PROCESSING AB+
               ORTED'
MSG02L   EQU   *-MSG02
MSG03    DC    C'*** VOLSER IN RECORD 1 DOES NOT MATCH VOLSER FROM VTOC+
                POINTER, PROCESSING ABORTED'
MSG03L   EQU   *-MSG03
MSG04    DC    C'*** FIRST RECORD IN VTOC NOT FORMAT-4'
MSG04L   EQU   *-MSG04
MSG05    DC    C'*** INTERNAL ERROR, NO VTOC CHAIN AT END OF VTOC EXTEN+
               T'
MSG05L   EQU   *-MSG05
MSG06    DC    C'*** FORMAT-3 NOT LOCATED'
MSG06L   EQU   *-MSG06
MSG07    DC    C'*** NO EXTENT FOUND IN VTOC TO MATCH A DATA RECORD''S +
               DISK ADDRESS, PROCESSING ABORTED'
MSG07L   EQU   *-MSG07
MSG08    DC    C'*** INTERNAL ERROR, ORPHAN DF/DSS RECORD SEGMENT FOUND+
               '
MSG08L   EQU   *-MSG08
* ------------------------------------------------------------------- *
*                                                                     *
*              PRINT MODULE INTERFACE BLOCK                           *
*                                                                     *
* ------------------------------------------------------------------- *
PRTBLOK  PRTBLOK  TYPE=CSECT
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*              DCB CONVERTER INTERFACE BLOCK                          *
*                                                                     *
* ------------------------------------------------------------------- *
DCBBLOK  DCBBLOK  TYPE=CSECT
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*              LITERALS                                               *
*                                                                     *
* ------------------------------------------------------------------- *
         LTORG
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*              COMMON DATA MAP                                        *
*                                                                     *
* ------------------------------------------------------------------- *
TMAPCOMM TMAPCOMM TYPE=DSECT
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*              DF/DSS RECORD PREFIX                                   *
*                                                                     *
* ------------------------------------------------------------------- *
DSSPRFX  DSECT
DSSSEG#  DS    XL4              SEGMENT NUMBER
DSSSEGS  DS    X                NUMBER OF SEGMENTS TO LOGICAL RECORD
DSSSEGSQ DS    X                SEQUENCE NUMBER WITHIN LOGICAL RECORD
DSSLEN   DS    XL2              LENGTH OF THIS SEGMENT
         DS    XL8
DSSPRFXS EQU   *-DSSPRFX        SHORT PREFIX LENGTH
DSSDATA1 DS    0X
         DS    XL24
DSSPRFXL EQU   *-DSSPRFX        LONG PREFIX LENGTH
DSSDATA2 DS    0X
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
VTOCDATA DSECT
VTOCCKD  DS    0XL8             VTOC RECORD'S DISK ADDRESS
VTOCDSKA DS    XL5              DISK ADDRESS OF THIS RECORD
VTOCCNT  DS    XL3              COUNT DATA
         IECSDSL1 1             GENERATE FORMAT 1 LABEL
VTOCNEXT DS    A                NEXT ON CHAIN
VTOCFLAG DS    X                FLAGS/SWITCHES
$VTOCFND EQU   X'80'            .. BACK-UP RECORD FOR THIS D/S FOUND
VTOCL    EQU   *-VTOCDATA       LENGTH OF TABLE ENTRIES
         ORG    DS1DSNAM        RESET ADDRESS TO DATA SET NAME
         IECSDSL1 3             GENERATE FORMAT 3 LABEL
         ORG    DS1FMTID        RESET ADDRESS TO FORMAT ID
         IECSDSL1 4             GENERATE FORMAT 4 LABEL
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
COUNT    DSECT
COUNTADR DS    0XL5             DASD ADDRESS
COUNTCYL DS    XL2              .. CYLINDER NUMBER
COUNTHD  DS    XL2              .. HEAD NUMBER
COUNTREC DS    X                .. RECORD NUMBER
COUNTKL  DS    X                KEY LENGTH
COUNTDL  DS    XL2              DATA LENGTH
COUNTL   EQU   *-COUNT          LENGTH OF COUNT INFO
* ------------------------------------------------------------------- *
*                                                                     *
*  DF/DSS breaks up the data into 'records' made up of 'segments'.    *
*  The first 4 bytes of each segment is the segment's sequence number.*
*  The next 2 bytes specify the number of segments in the logical     *
*  record and the sequence of each segment within that logical record.*
*                                                                     *
*  Before any one logical record can be processed, all of its segments*
*  must be located and moved into contiguous storage.  All of the     *
*  segments may not be in the same physical tape record.  The way I   *
*  am going to process them is to make a chain of the logical records.*
*  When a new tape block is read, the segments will be broken up into *
*  the logical records they belong to.  When all segments in the tape *
*  block have been broken out, any complete logical records are then  *
*  scanned to determine which data sets the data belonged to when the *
*  back-up was taken.                                                 *
*                                                                     *
* ------------------------------------------------------------------- *
DATADSCT DSECT
DATANEXT DS    A                  NEXT BLOCK ON THE CHAIN
DATAPREV DS    A                  PREVIOUS BLOCK ON CHAIN
DATALEN  DS    A                  LENGTH OF THIS BLOCK
DATADLEN DS    A                  LENGTH OF DATA
DATASEGL DS    CL4                LOW SEGMENT NUMBER
DATASEGH DS    CL4                HIGH SEGMENT NUMBER
DATASEGS DS    AL2                NUMBER OF SEGMENTS TO LOGICAL RECORD
DATASEGF DS    AL2                NUMBER OF SEGMENTS FOUND
DATAL    EQU   *-DATADSCT         LENGTH PREFIX
DATADATA DS    0C                 START OF DATA
DATACKD  DS    XL8                DASD ADDRESS OF RECORD
* ------------------------------------------------------------------- *
*                                                                     *
*              EQUATES                                                *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY REGEQU
         END  TMAPDSS
./ ADD NAME=TMAPFDR
          TITLE 'TMAPFDR - FDR BACK-UPS PROCESSOR'
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: TMAPFDR - FDR back-ups processor                      *
*                                                                     *
*  Function:                                                          *
*     Print the data sets and DCB info for each data set in the       *
*     back-up.                                                        *
*                                                                     *
* ------------------------------------------------------------------- *
TMAPFDR  CSECT
         USING TMAPFDR,R12
         USING TMAPCOMM,R11
         USING FDRPRFX,R10
         STM   R14,R12,12(R13)     SAVE REGS
         LR    R12,R15             SET BASE REG
         B     FDR0000             SKIP EYECATCHER
FDRNAME  DC    CL8'TMAPFDR'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
FDR0000  DS    0H
         LA    R15,FDRSAVE         OUR SAVE AREA ADDRESS
         ST    R13,4(R15)          CHAIN CALLER'S SAVE AREA TO OURS
         ST    R15,8(R13)          CHAIN OUR SAVE AREA TO CALLER'S
         LR    R13,R15             SET SAVE AREA ADDRESS
         TMAPTR ID=ENTRY,          TRACE ENTRY                         +
               DATA1=COMMFLAG,                                         +
               DATA2=COMMRECA
         TM    COMMFLAG,$COMMLST   'CLEAN-UP' CALL?
         BO    EXIT0000            YES
         L     R10,COMMRECA        FIRST SEGMENT'S ADDRESS
         SR    R9,R9               CLEAR FOR LENGTH
         ICM   R9,3,COMMRECL       PHYSICAL BLOCK SIZE
         TM    COMMFLAG,$COMMINQ   INQUIRE CALL?
         BNO   FDR0020             NO
* ------------------------------------------------------------------- *
*                                                                     *
*     Testing process for FDR data sets is:                           *
*                                                                     *
*     The string 'THATS ALL FOLKS' shoudl be at offset +5 in the      *
*     first record.                                                   *
*                                                                     *
* ------------------------------------------------------------------- *
         TMAPTR ID=INQCALL
         CLC   FDRID,5(R10)        POSSIBLY FDR?
         BNE   EXIT0008            NO
         MVC   PRTDATA(HEADINGL),HEADING
         BAL   R6,PRT0000          PRINT HEADING
         MVC   COMMSUBH(SUBHEADL),SUBHEAD
         MVC   PRTDATA(SUBHEADL),SUBHEAD
         BAL   R6,PRT0000          PRINT SUB HEADING
         B     EXIT0000            AND EXIT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
FDR0020  DS    0H
         TM    FDRFLAG,$ERROR      ERROR FLAG ON?
         BO    EXIT0000            YES
         TM    COMMFLAG,$COMM1ST   FIRST CALL?
         BO    EXIT0000            YES
         CLC   DUMMYDSF,FDRDSF     'DUMMYDSF' PRESENT?
         BNE   EXIT0000            NO
         CLC   VSAMDFEF,FDRDATA    VSAMDFEF RECORD?
         BE    FDR0050             YES
         CLC   TRACKTAB,FDRDATA    TRACK TABLE?
         BE    FDR0060             YES
         LA    R8,FDRDATA          FIRST DSCB RECORD
         USING FMT1,R8             DEFINE BASE
         LH    R7,FDRDSCB          NUMBER OF DSCB'S
         TMAPTR ID=DSCBRECD,                                           +
               RDATA1=R8,                                              +
               RDATA2=R7
FDR0030  DS    0H
         CLI   DS1FMTID,C'1'       FORMAT-1 RECORD?
         BNE   FDR0040             NO
         TMAPTR ID=FMT1,           FORMAT-1 RECORD FOUND               +
               RDATA1=R8           .. FORMAT-1'S ADDRESS
         MVC   PRDSN,DS1DSNAM      SET DATASET NAME
         ST    R8,DCBRECA          SET RECORD ADDRESS
         MVC   DCBDSOD,DSOD        SET DATA SET ORG DISP
         MVC   DCBRFMD,RFMD        SET RECORD FORMAT DISP
         MVC   DCBBSZD,BSZD        SET BLOCK SIZE DISP
         MVC   DCBRSZD,RSZD        SET RECORD SIZE DISP
         XC    DCBUNTD,DCBUNTD     NO UNIT TYPE TO PASS OVER
         LA    R1,DCBBLOK          DCB CONVERTER PARMS
         L     R15,ADCB            DCB CONVERTER ENTRY POINT
         BALR  R14,R15             LINK TO DCB CONVERTER
         MVC   PRDSO,DCBDSO        SET DSORG
         MVC   PRRFM,DCBRFM        SET RECORD FORMAT
         MVC   PRBSZ,DCBBSZ        SET BLOCK SIZE
         MVC   PRRSZ,DCBRSZ        SET RECORD SIZE
         MVC   PRTDATA(DSMSGL),DSMSG      MOVE DATA
         BAL   R6,PRT0000          PRINT DATASET MESSAGE
FDR0040  DS    0H
         LA    R8,FMT1L(R8)        NEXT FORMAT-1
         BCT   R7,FDR0030          LOOP
         B     EXIT0000            END OF DSCB'S
FDR0050  DS    0H
         TMAPTR ID=VSAMDFEF        VSAMDFEF RECORD FOUND
         B     EXIT0000            EXIT
FDR0060  DS    0H
         TMAPTR ID=TRACKTAB        TRACKTAB RECORD FOUND
         B     EXIT0000            EXIT
*---------------------------------------------------------------------*
*                                                                     *
*              PRINTING                                               *
*                                                                     *
*---------------------------------------------------------------------*
PRT0000  DS    0H
         MVI   PRTCMD,$PRTPRT      REQUEST PRINT
         MVI   PRTCC,C' '          SINGLE SPACE
         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK
         L     R15,APRT            PRINT MODULE ENTRY POINT
         BALR  R14,R15             LINK TO PRINT MODULE
         BR    R6                  RETURN
* ------------------------------------------------------------------- *
*                                                                     *
*             EXIT                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS   0H
         TMAPTR ID=EXIT0000         EXITING, RC=0
         SR    R15,R15              SET RETURN CODE TO ZERO
         B     FDR9900              AND RETURN
EXIT0008 DS    0H
         TMAPTR ID=EXIT0008         EXITING, RC=8
         LA    R15,8                SET RETURN CODE TO 8
FDR9900  DS    0H
         L     R13,4(R13)           RESTORE REGISTER 13
         L     R14,12(R13)          RESTORE REGISTER 14
         LM    R0,R12,20(R13)       RESTORE ALL OTHER REGISTERS
         BR    R14                  RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
*              WORK AREAS                                             *
*                                                                     *
* ------------------------------------------------------------------- *
FDRSAVE  DC    18F'0'               REGISTER SAVE AREA
DSOD     DC    Y(DS1DSORG-FMT1)     DISPLACEMENT TO DSORG
RFMD     DC    Y(DS1RECFM-FMT1)     DISPLACEMENT TO RECORD FORMAT
BSZD     DC    Y(DS1BLKL-FMT1)      DISPLACEMENT TO BLOCK SIZE
RSZD     DC    Y(DS1LRECL-FMT1)     DISPLACEMENT TO RECORD SIZE
FDRFLAG  DC    X'00'                FLAGS
$ERROR   EQU   X'80'                .. SERIOUS ERROR HAS OCCURRED
FDRID    DC    C'THATS ALL FOLKS'
DUMMYDSF DC    C'DUMMYDSF'
VSAMDFEF DC    C'VSAMDFEF'
TRACKTAB DC    C'TRACKTAB'
HEADING  DC    C'THIS DATA SET IS AN FDR BACK-UP'
HEADINGL EQU   *-HEADING
SUBHEAD  DS    0C
         DC    C'DATA SETS BACKED-UP ARE:'
SUBHEADL EQU   *-SUBHEAD
DSMSG    DS    0C
         DC    C'DSN='
PRDSN    DC    CL44' '
         DC    C'   DSORG:'
PRDSO    DC    CL4' '
         DC    C'   RECFM:'
PRRFM    DC    CL4' '
         DC    C'   BLKSZ:'
PRBSZ    DC    CL6' '
         DC    C'   LRECL:'
PRRSZ    DC    CL6' '
DSMSGL   EQU   *-DSMSG
* ------------------------------------------------------------------- *
*                                                                     *
*              PRINT MODULE INTERFACE BLOCK                           *
*                                                                     *
* ------------------------------------------------------------------- *
PRTBLOK  PRTBLOK  TYPE=CSECT
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*              DCB CONVERTER INTERFACE BLOCK                          *
*                                                                     *
* ------------------------------------------------------------------- *
DCBBLOK  DCBBLOK  TYPE=CSECT
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*              LITERALS                                               *
*                                                                     *
* ------------------------------------------------------------------- *
         LTORG
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*              COMMON DATA MAP                                        *
*                                                                     *
* ------------------------------------------------------------------- *
TMAPCOMM TMAPCOMM TYPE=DSECT
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*              FDR RECORD PREFIX                                      *
*                                                                     *
* ------------------------------------------------------------------- *
FDRPRFX  DSECT
         DS    XL4              LENGTH OF THIS RECORD
         DS    CL8
FDRDSF   DS    CL8              'DUMMYDSF'
         DS    CL10
FDRDSCB  DS    H                NUMBER OF DSCB'S IN THIS BLOCK
FDRPRFXL EQU   *-FDRPRFX        PREFIX LENGTH
FDRDATA  DS    0C
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
FMT1     DSECT
FMT1CKD  DS    0XL8             VTOC RECORD'S DISK ADDRESS
FMT1DSKA DS    XL5              DISK ADDRESS OF THIS RECORD
FMT1CNT  DS    XL3              COUNT DATA
         IECSDSL1 1             GENERATE FORMAT 1 LABEL
FMT1L    EQU   *-FMT1
* ------------------------------------------------------------------- *
*                                                                     *
*              EQUATES                                                *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY REGEQU
         END  TMAPFDR
./ ADD NAME=TMAPLABL
          TITLE 'TMAPLABL - STANDARD LABELS PROCESSOR'
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: TMAPLABL                                              *
*                                                                     *
*  Function:                                                          *
*     Interprets selected data from IBM standard labels.              *
*                                                                     *
* ------------------------------------------------------------------- *
TMAPLABL CSECT
         USING TMAPLABL,R12
         USING TMAPCOMM,R11
         STM   R14,R12,12(R13)       SAVE REGS
         LR    R12,R15               SET BASE REG
         B     LABL0000              SKIP EYECATCHER
         DC    CL8'TMAPLABL'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
LABL0000 DS    0H
         LA    R15,LABLSAVE        OUR SAVE AREA ADDRESS
         ST    R13,4(R15)          CHAIN CALLER'S SAVE AREA TO OURS
         ST    R15,8(R13)          CHAIN OUR SAVE AREA TO CALLER'S
         LR    R13,R15             SET SAVE AREA ADDRESS
         TMAPTR ID=ENTRY
         TM    COMMFLAG,$COMMLST   'CLEAN-UP' CALL?
         BO    EXIT0000            YES.. EXIT
         L     R10,COMMRECA        CURRENT RECORD'S ADDRESS
         LA    R2,LABLTBLE         LABEL TABLE
         USING LABLDSCT,R2         DEFINE BASE
LABL0010 DS    0H
         CLI   0(R2),X'FF'         END OF TABLE?
         BE    LABL0030            YES
         CLC   LABLDATA,0(R10)     LABEL DATA LOCATED?
         BE    LABL0020            YES
         LA    R2,LABLL(R2)        NEXT ENTRY
         B     LABL0010            LOOP
LABL0020 DS    0H
         TM    COMMFLAG,$COMMINQ   INQUIRE CALL?
         BO    EXIT0000            YES
         L     R15,LABLRTN         PROCESSING ROUTINE'S ADDRESS
         BR    R15                 GO TO PROCESSING ROUTINE
LABL0030 DS    0H
         TM    COMMFLAG,$COMMINQ   INQUIRE CALL?
         BO    EXIT0008            YES
         MVC   UNKNMSGD,0(R10)     COPY DATA TO MESSAGE
         MVC   PRTDATA(UNKNMSGL),UNKNMSG
         BAL   R9,PRT0000          PRINT MESSAGE
         B     EXIT0000            AND EXIT
*---------------------------------------------------------------------*
*                                                                     *
*              HDR1 RECORD PROCESSING                                 *
*                                                                     *
*---------------------------------------------------------------------*
HDR10000 DS    0H
         USING HDR1,R10            DEFINE DSECT BASE
         TMAPTR ID=HDR1            TRACE HDR1
         MVC   PRDSN,HDR1DSN       DATASET NAME
         MVC   PRVSEQ,HDR1VSEQ     VOLUME SEQUENCE
         MVC   PRDSEQ,HDR1DSEQ     DATASET SEQUENCE
         MVC   PRCDTE,HDR1CDTE     CREATE DATE
         MVC   PREXPD,HDR1EXPD     EXPIRATION DATE
         MVC   PRTDATA(HDR1MSGL),HDR1MSG
         BAL   R9,PRT0000          PRINT LABEL DATA
         B     EXIT0000            AND EXIT
*---------------------------------------------------------------------*
*                                                                     *
*              EOF1 RECORD PROCESSING                                 *
*                                                                     *
*---------------------------------------------------------------------*
EOF10000 DS    0H
         TMAPTR ID=EOF1            TRACE EOF1
         MVC   PRBLKC,HDR1BLKC     BLOCK COUNT
         MVC   PRTDATA(EOF1MSGL),EOF1MSG
         BAL   R9,PRT0000          PRINT LABEL DATA
         B     EXIT0000            AND EXIT
*---------------------------------------------------------------------*
*                                                                     *
*              EOV1 RECORD PROCESSING                                 *
*                                                                     *
*---------------------------------------------------------------------*
EOV10000 DS    0H
         TMAPTR ID=EOV1            TRACE EOV1
         MVC   PRTDATA(L'EOV1MSG),EOV1MSG
         BAL   R9,PRT0000          PRINT LABEL DATA
         B     EXIT0000            AND EXIT
*---------------------------------------------------------------------*
*                                                                     *
*              HDR2 RECORD PROCESSING                                 *
*                                                                     *
*---------------------------------------------------------------------*
HDR20000 DS    0H
         USING HDR2,R10            DEFINE DSECT BASE
         TMAPTR ID=HDR2            TRACE HDR2
         MVC   PRRF,HDR2RF         RECORD FORMAT
         MVC   PRBLSZ,HDR2BLSZ     BLOCK SIZE
         MVC   PRRSZ,HDR2RSZ       RECORD SIZE
         MVC   PRDEN,HDR2DEN       TAPE DENSITY
         MVC   PRJOB,HDR2JOB       JOB/JOB STEP
         MVC   PRTDATA(HDR2MSGL),HDR2MSG
         BAL   R9,PRT0000          PRINT LABEL DATA
         B     EXIT0000            AND EXIT
*---------------------------------------------------------------------*
*                                                                     *
*              EOF2 RECORD PROCESSING                                 *
*                                                                     *
*---------------------------------------------------------------------*
EOF20000 DS    0H
         TMAPTR ID=EOF2            TRACE EOF2
         MVC   PRTDATA(L'EOF2MSG),EOF2MSG
         BAL   R9,PRT0000          PRINT LABEL DATA
         B     EXIT0000            AND EXIT
*---------------------------------------------------------------------*
*                                                                     *
*              EOV2 RECORD PROCESSING                                 *
*                                                                     *
*---------------------------------------------------------------------*
EOV20000 DS    0H
         TMAPTR ID=EOV2            TRACE EOV2
         MVC   PRTDATA(L'EOV2MSG),EOV2MSG
         BAL   R9,PRT0000          PRINT LABEL DATA
         B     EXIT0000            AND EXIT
*---------------------------------------------------------------------*
*                                                                     *
*              PRINTING                                               *
*                                                                     *
*---------------------------------------------------------------------*
PRT0000  DS    0H
         MVI   PRTCMD,$PRTPRT      REQUEST PRINT
         MVI   PRTCC,C' '          SINGLE SPACE
         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK
         L     R15,APRT            PRINT MODULE ENTRY POINT
         BALR  R14,R15             LINK TO PRINT MODULE
         BR    R9                  RETURN
* ------------------------------------------------------------------- *
*                                                                     *
*             EXIT                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         TMAPTR ID=EXIT0000          EXITING, RC=0
         SR    R15,R15               SET RETURN CODE TO ZERO
         B     LABL9900              AND RETURN
EXIT0008 DS    0H
         TMAPTR ID=EXIT0008          EXITING, RC=8
         LA    R15,8                 SET RETURN CODE TO 8
LABL9900 DS    0H
         L     R13,4(R13)            RESTORE REGISTER 13
         L     R14,12(R13)           RESTORE REGISTER 14
         LM    R0,R12,20(R13)        RESTORE ALL OTHER REGISTERS
         BR    R14                   RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
*              WORK AREAS                                             *
*                                                                     *
* ------------------------------------------------------------------- *
LABLSAVE DC    18F'0'                REGISTER SAVE AREA
UNKNMSG  DC    C'** UNKNOWN DATA IN HDR, EOF, OR EOV:'
UNKNMSGD DC    CL80' '
UNKNMSGL EQU   *-UNKNMSG
HDR1MSG  DS    0C
         DC    C'HDR1 DSN='
PRDSN    DC    CL17' '
         DC    C' VOLSEQ='
PRVSEQ   DC    CL4' '
         DC    C' DATASET SEQ='
PRDSEQ   DC    CL4' '
         DC    C' CREATE DATE='
PRCDTE   DC    CL6' '
         DC    C' EXPIRE DATE='
PREXPD   DC    CL6' '
HDR1MSGL EQU   *-HDR1MSG
HDR2MSG  DS    0C
         DC    C'HDR2 RECORD FORMAT='
PRRF     DC    C' '
         DC    C' BLOCK SIZE='
PRBLSZ   DC    CL5' '
         DC    C' RECORD SIZE='
PRRSZ    DC    CL5' '
         DC    C' DENSITY='
PRDEN    DC    C' '
         DC    C' JOB/JOBSTEP='
PRJOB    DC    CL17' '
HDR2MSGL EQU   *-HDR2MSG
EOF1MSG  DS    0C
         DC    C'EOF1 BLOCK COUNT='
PRBLKC   DC    CL6' '
EOF1MSGL EQU   *-EOF1MSG
EOF2MSG  DC    C'EOF2'
EOV1MSG  DC    C'EOV1'
EOV2MSG  DC    C'EOV2'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
LABLTBLE DS    0A
         DC    C'VOL1',A(EXIT0000)
         DC    C'HDR1',A(HDR10000)
         DC    C'HDR2',A(HDR20000)
         DC    C'EOF1',A(EOF10000)
         DC    C'EOF2',A(EOF20000)
         DC    C'EOV1',A(EOV10000)
         DC    C'EOV2',A(EOV20000)
         DC    X'FFFFFFFF'
* ------------------------------------------------------------------- *
*                                                                     *
*              PRINT MODULE INTERFACE BLOCK                           *
*                                                                     *
* ------------------------------------------------------------------- *
PRTBLOK  PRTBLOK  TYPE=CSECT
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*              LABEL TABLE MAP                                        *
*                                                                     *
* ------------------------------------------------------------------- *
LABLDSCT DSECT
LABLDATA DS    CL4                  IDENTIFYING DATA
LABLRTN  DS    A                    PROCESSING ROUTINE
LABLL    EQU   *-LABLDSCT
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*              COMMON DATA MAP                                        *
*                                                                     *
* ------------------------------------------------------------------- *
TMAPCOMM TMAPCOMM TYPE=DSECT
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
*              TAPE LABEL DSECTS                                      *
*                                                                     *
*---------------------------------------------------------------------*
         COPY  TAPELABL
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*              EQUATES                                                *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY REGEQU
         END  TMAPLABL
./ ADD NAME=TMAPMAIN 0100-99298-99298-1542-00579-00584-00000-SBGOLOB
          TITLE 'TMAPMAIN - MAINLINE'
* ------------------------------------------------------------------- *
*                                                                     *
*                   TAPE MAP UTILITY                                  *
*                                                                     *
*  This utility reads a tape and prints a "map" or "tape vtoc".       *
*  Normally the "mapping" stops when 2 consecutive tape marks are     *
*  encountered.  The 'FULLTAPE' option will scan the tape until the   *
*  reflective marker is found or if the tape has not been formatted   *
*  with data it will run off the end of the reel.                     *
*                                                                     *
*  Tape labels, both header and trailer records, will be "watched"    *
*  for and printed as such whether the tape fits the standard-labelled*
*  format or not.  For example if a tape has multiple files and was   *
*  written over, the first file may be non-labelled while other files *
*  further down the tape may still have their labels intact.  If you  *
*  need to recover one of these files the label information may be    *
*  helpful.                                                           *
*                                                                     *
*  All parameters are passed via the PARM operand of the EXEC         *
*  statement.  The type of tape unit is required as a parameter on    *
*  each execution.  See the comments in the TMAPPARM source for valid *
*  parameters.                                                        *
*                                                                     *
*  TAPEMAP utilizes an I/O module that bypasses system opens.  This   *
*  requires APF authorization.  Also since OPEN is bypassed, no RACF  *
*  access to tape data sets is required.  RACF checking is bypassed,  *
*  so you can read any tape data set, but access to this program      *
*  should be restricted for the same reason.                          *
*                                                                     *
*                                                                     *
*  Throughout this utility several coding conventions have been       *
*  followed:                                                          *
*                                                                     *
*      R10  is the current tape record's address                      *
*      R11  is the common data area (TMAPCOMM) address                *
*      R12  is the base address of the various modules                *
*                                                                     *
*  SAMPLE JCL:                                                        *
*   //..... JOB ...                                                   *
*   //TAPEMAP  EXEC PGM=TAPEMAP,REGION=4M,PARM='3420'                 *
*   //STEPLIB  DD DSN=xxxxxx,DISP=SHR     (if not in a LNKLST library)*
*   //SYSPRINT DD SYSOUT=x                                            *
*                                                                     *
*   You may want to put TAPEMAP in a PROC so it can be run as a       *
*   started task.                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
        SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*        This macro generates the 'TAPEEXCP' status code control      *
*        table.  The status code is equated to a message and a byte   *
*        of control flags for special conditions.                     *
*                                                                     *
*        The macro parameters are:                                    *
*             CODE - the TAPEEXCP status code                         *
*             OPT  - optional special condition flags                 *
*             TEXT - text for the message to be printed for the       *
*                    value of CODE                                    *
*                                                                     *
* ------------------------------------------------------------------- *
         MACRO
         STATMSG &CODE,&OPT,&TEXT
         LCLA  &ELEN,&MLEN
&MLEN    SETA  K'&TEXT-2
&ELEN    SETA  &MLEN+6
         DC    AL2(&ELEN)           LENGTH OF THIS ENTRY
         DC    AL2(&MLEN)           LENGTH OF MESSAGE TEXT
         AIF   (T'&OPT EQ 'O').NOOPT
         DC    AL1(&OPT)            PROCESSING OPTIONS
         AGO   .OPTBYP
.NOOPT   ANOP
         DC    AL1(0)               PROCESSING OPTIONS
.OPTBYP  ANOP
         DC    AL1(&CODE)           STATUS CODE
         DC    C&TEXT               MESSAGE TEXT
         MEND
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
TMAPMAIN CSECT
         USING TMAPMAIN,R12
         USING TMAPCOMM,R11
         STM   R14,R12,12(R13)       SAVE REGS
         LR    R12,R15               SET BASE REG
         B     MAIN0000              SKIP EYECATCHER
         DC    CL8'TMAPMAIN'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MAIN0000 DS    0H
         L     R11,VCOMM             TMAPCOMM'S ADDRESS
         MVC   COMMPARM,0(R1)        SAVE PARAMETER LIST ADDRESS
         LA    R1,TAPESAVE           OUR SAVE AREA ADDRESS
         ST    R13,4(R1)             CHAIN CALLER'S SAVE AREA TO OURS
         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO CALLER'S
         LR    R13,R1                SET SAVE AREA ADDRESS
         L     R2,TRSIZE             TRACE TABLE'S SIZE
         LA    R2,32(R2)             FOR BOUNDARY ROUNDING
         GETMAIN R,LV=(R2)           ACQUIRE STORAGE FOR TRACE TABLE
         ST    R1,TRADDR             SAVE TRACE TABLE ADDRESS
         LA    R1,32(R1)             PLUS 32
         SRL   R1,5                  ROUND THE ADDRESS TO...
         SLL   R1,5                  ...NEAREST MULTIPLE OF 32
         ST    R1,TR1ST              SET FIRST TRACE ENTRY ADDRESS
         ST    R1,TRCURR             SET CURRENT TRACE ENTRY ADDRESS
         XC    0(TRENTRYL,R1),0(R1)  INITIALIZE FIRST ENTRY
         A     R1,TRSIZE             PLUS USED PORTION'S SIZE
         ST    R1,TRLAST             INITIALIZE LAST ENTRY ADDRESS
         TMAPTR ID=INIT,             INITIAL TRACE ENTRY               +
               DATA1=TR1ST,          .. FIRST TRACE TABLE ENTRY ADDR   +
               DATA2=TRLAST          .. LAST TRACE TABLE ENTRY ADDR
         MVI   PRTCMD,$PRTHEAD       SET COMMAND
         LA    R1,PRTBLOK            PRINT MODULE INTERFACE BLOCK
         L     R15,APRT              PRINT MODULE ENTRY POINT
         BALR  R14,R15               PRINT
* ------------------------------------------------------------------- *
*                                                                     *
*             CALL PARAMETER CONVERTER                                *
*                                                                     *
* ------------------------------------------------------------------- *
         TMAPTR ID=CALLPARM          CALLING PARAMETER CONVERTER
         L     R15,APARM             PARAMETER CONVERTER'S ADDRESS
         BALR  R14,R15               CALL PARAMETER CONVERTER
         TM    COMMFLAG,$ABORT       ABORT FLAG SET?
         BNO   MAIN0010              NO, CONTINUE
         TMAPTR ID=BADPARMS
         MVC   PRTDATA(MSG01L),MSG01 MOVE MESSAGE
         BAL   R9,PRT0000            PRINT MESSAGE
         B     MAIN9900              AND EXIT
* ------------------------------------------------------------------- *
*                                                                     *
*             OPEN TAPE DCB                                           *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0010 DS    0H
         TMAPTR ID=OPENTAPE
         MVC   TDDNAME,TMAPDD        SET DDNAME
         MVC   TAPEVOL,COMMVOL       COPY VOLSER FOR MOUNT WTO
         MVI   TCMD,$TCMDOPN         SET COMMAND
         MVC   TDEVT,COMMDEVT        SET DEVICE TYPE
         LA    R1,TAPEBLOK           TAPE I/O INTERFACE BLOCK ADDRESS
         L     R15,ATAPEIO           TAPE I/O MODULE ENTRY POINT
         BALR  R14,R15               LINK TO TAPE I/O MODULE
         TMAPTR ID=OPENSTAT,         TRACE TAPE OPENING                +
               DATA1=TDDNAME,        .. DDNAME OPENED                  +
               DATA2=TSTAT           .. STATUS CODE FROM TAPEEXCP
         CLI   TSTAT,$TSTATOK        OPEN SUCCESSFUL?
         BNE   MAIN0500              NO..
* ------------------------------------------------------------------- *
*                                                                     *
*             READ TAPE                                               *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0020 DS    0H
         MVI   TCMD,$TCMDRD          SET COMMAND
         LA    R1,TAPEBLOK           TAPE I/O INTERFACE BLOCK ADDRESS
         L     R15,ATAPEIO           TAPE I/O MODULE ENTRY POINT
         BALR  R14,R15               LINK TO TAPE I/O MODULE
         TMAPTR ID=TAPEREAD,         TRACE TAPE READS                  +
               DATA1=TDDNAME,        .. DDNAME READ                    +
               DATA2=TSTAT           .. STATUS CODE FROM TAPEEXCP
         CLI   TSTAT,$TSTATTM        TAPE MARK READ?
         BE    MAIN0200              YES
         CLI   TSTAT,$TSTATPE        PHYSICAL END OF TAPE?
         BE    MAIN0300              YES
         CLI   TSTAT,$TSTATOK        READ SUCCESSFUL?
         BNE   MAIN0500              NO..
         L     R10,TIOAREA           CURRENT RECORD'S ADDRESS
         ST    R10,COMMRECA          CURRENT RECORD'S ADDRESS
         MVC   COMMRECL,TLENGTH      COPY RECORD'S LENGTH
         TM    TAPEFLAG,$TAPEDTA     ANY DATA ALREADY READ?
         BO    MAIN0040              YES
         OI    TAPEFLAG,$TAPEDTA     INDICATE DATA HAS BEEN FOUND
         TMAPTR ID=DENSITY,                                            +
               DATA1=TSENSE,                                           +
               DATA2=TSENSE+8
         MVC   DENDENID,TDENSITY     COPY DENSITY
         OI    DENDENID,X'F0'        MAKE DENSITY PRINTABLE
         SR    R1,R1                 CLEAR REGISTER
         IC    R1,TDENSITY           DENSITY ID
         SH    R1,H2                 RELATIVE TO ZERO
         SLL   R1,2                  MULTIPLY BY 4
         LA    R1,DENTABLE(R1)       BPI EQUIVALENT MESSAGE'S ADDRESS
         MVC   DENBPI,0(R1)          MOVE BPI TEXT TO DENSITY MESSAGE
         MVC   PRTDATA(DENMSGL),DENMSG
         BAL   R9,PRT0000            PRINT TAPE DENSITY MESSAGE
         CLC   VOL1ID,0(R10)         VOLSER RECORD?
         BE    MAIN0030              YES
         TMAPTR ID=NOVOLSER          FIRST RECORD IS NOT VOLSER
         MVC   PRTDATA(VOLMSG1L),VOLMSG1
         BAL   R9,PRT0000            PRINT MESSAGE
         B     MAIN0100              DETERMINE FILE CONTENTS
MAIN0030 DS    0H
         TMAPTR ID=VOLSER,           VOLSER FOUND                      +
               DATA1=4(R10)          .. COPY VOLSER FROM I/O AREA
         MVC   VOLMSG2V,4(R10)       SET VOLSER IN MESSAGE
         MVC   PRTDATA(VOLMSG2L),VOLMSG2
         BAL   R9,PRT0000            PRINT MESSAGE
         B     MAIN0100              DETERMINE FILE CONTENTS
MAIN0040 DS    0H
         TM    TAPEFLAG,$TAPETM      WAS LAST RECORD A TAPE MARK?
         BO    MAIN0100              YES... CHECK FOR TAPE LABEL RECORD
MAIN0050 DS    0H
         NI    TAPEFLAG,255-$TAPETM  TURN OFF TAPE MARK FLAG
         ICM   R15,15,MAINPROC       PROCESSING MODULE ADDRESS
         BZ    MAIN0060              NO RECORD PROCESSOR
         BALR  R14,R15               LINK TO RECORD PROCESSOR
MAIN0060 DS    0H
         NI    COMMFLAG,255-$COMM1ST RESET 'FIRST' RECORD FLAG
         B     MAIN0020              READ NEXT RECORD
* ------------------------------------------------------------------- *
*                                                                     *
*   A NEW PHYSICAL FILE HAS BEEN FOUND.                               *
*                                                                     *
*   DETERMINE WHAT THE FILE'S CONTENTS ARE IF POSSIBLE.               *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0100 DS    0H
         TMAPTR ID=NEWFILE
         MVI   COMMSUBH,C' '         CLEAR SUB-HEADING
         MVC   COMMSUBH+1(L'COMMSUBH-1),COMMSUBH
         MVC   FILEMSGN,=X'4020206B202120'
         ED    FILEMSGN,FILENBR      EDIT PHYSICAL FILE NUMBER
         MVC   PRTDATA(FILEMSGL),FILEMSG
         BAL   R9,PRT0000            PRINT PHYSICAL FILE MESSAGE
         LA    R2,PROCTBLE           FILE PROCESSOR TABLE'S ADDRESS
         USING PROCDSCT,R2           DEFINE BASE
         OI    COMMFLAG,$COMMINQ     BEGINNING 'INQUIRY' CALLS
MAIN0110 DS    0H
         CLI   0(R2),X'FF'           END OF TABLE?
         BE    MAIN0140              DATA IN THIS FILE IS UNKNOWN
         ICM   R15,15,PROCEPA        MODULE'S ENTRY POINT ADDRESS
         BZ    MAIN0120              .. TEMPORARY 'TILL ALL CODED
         BALR  R14,R15               ALLOW THIS MODULE TO TEST
         LTR   R15,R15               KNOWN BY THIS MODULE?
         BZ    MAIN0130              YES
MAIN0120 DS    0H
         LA    R2,PROCL(R2)          NEXT ENTRY
         B     MAIN0110              LOOP
MAIN0130 DS    0H
         NI    COMMFLAG,255-$COMMINQ TURN OFF 'INQUIRY' FLAG
         ST    R2,COMMCFPE           SAVE CURRENT FILE PROCESSOR ENTRY
         MVC   MAINPROC,PROCEPA      SET PROCESSING MODULE ADDRESS
         TMAPTR ID=PROCKNWN,         PROCESSING MODULE IS KNOWN        +
               DATA1=PROCNAME,       .. TRACE PROCESSING MODULE NAME   +
               DATA2=PROCEPA         .. AND ENTRY POINT
         OI    COMMFLAG,$COMM1ST     FIRST RECORD
         B     MAIN0050              ENTER NORMAL RECORD PROCESSING
MAIN0140 DS    0H
         TMAPTR ID=UNKNOWN
         MVC   PRTDATA(UNKNMSGL),UNKNMSG
         BAL   R9,PRT0000            PRINT MESSAGE
         NI    COMMFLAG,255-$COMMINQ TURN OF 'INQUIRY' FLAG
         OI    COMMFLAG,$COMM1ST     FIRST RECORD
         B     MAIN0050              ENTER NORMAL RECORD PROCESSING
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*   TAPE MARK OR EOT HAS BEEN FOUND                                   *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0200 DS    0H
         TMAPTR ID=TAPEMARK,         TRACE TAPE MARK                   +
               DATA1=TDDNAME         .. DDNAME READ
         AP    FILENBR,P1            ADD 1 TO FILE NUMBER
         BAL   R9,MAIN0400           PERFORM 'CLEAN-UP'
         TM    TAPEFLAG,$TAPEDTA     ANY DATA READ?
         BO    MAIN0220              YES
MAIN0210 DS    0H
         OI    TAPEFLAG,$TAPETM      SET TAPE MARK FLAG
         MVC   PRTDATA(TMMSG1L),TMMSG1 SET MESSAGE
         BAL   R9,PRT0000            PRINT THE MESSAGE
         B     MAIN0020              READ NEXT BLOCK
MAIN0220 DS    0H
         TM    TAPEFLAG,$TAPETM      WAS LAST THING A TAPE MARK?
         BO    MAIN0240              YES..
         OI    TAPEFLAG,$TAPETM      SET TAPE MARK FLAG
MAIN0230 DS    0H
         MVI   PRTCC,C'0'            DOUBLE SPACE
         MVC   PRTDATA(TMMSG2L),TMMSG2 SET MESSAGE
         BAL   R9,PRT0000            PRINT THE MESSAGE
         B     MAIN0020              READ NEXT BLOCK
MAIN0240 DS    0H
         TM    TAPEFLAG,$TAPEEOT     EOT MESSAGE ALREADY ISSUED?
         BO    MAIN0230              YES
         OI    TAPEFLAG,$TAPEEOT     SET LEOT FLAG
         MVI   PRTCC,C'0'            DOUBLE SPACE
         MVC   PRTDATA(LEOTMSGL),LEOTMSG   SET MESSAGE
         BAL   R9,PRT0000            PRINT THE MESSAGE
         TM    COMMFLAG,$COMMFUL     FULL TAPE REQUESTED?
         BNO   MAIN9900              NO.. EXIT NOW
         B     MAIN0020              READ NEXT BLOCK
MAIN0300 DS    0H
         TMAPTR ID=EOT,              TRACE END-OF-TAPE                 +
               DATA1=TDDNAME         .. DDNAME READ
         BAL   R9,MAIN0400           PERFORM 'CLEAN-UP'
         MVI   PRTCC,C'0'            DOUBLE SPACE
         MVC   PRTDATA(EOTMSGL),EOTMSG  SET MESSAGE
         BAL   R9,PRT0000            PRINT THE MESSAGE
         B     MAIN9900              AND EXIT
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*             'CLEAN-UP'                                              *
*                                                                     *
*   Some TAPEMAP modules print members when the data set is a PDS.    *
*   The last line may not have been filled up, so we need to allow    *
*   the last line to be printed if necessary.  Any 'end-of-file'      *
*   processing should also be done at this time.                      *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0400 DS    0H
         TMAPTR ID=CLEAN-UP
         ICM   R15,15,MAINPROC       ANY PROCESSOR ADDRESS?
         BZ    MAIN0410              NO
         OI    COMMFLAG,$COMMLST     SET 'LAST' FLAG
         BALR  R14,R15               LINK TO ALLOW 'CLEAN-UP'
         NI    COMMFLAG,255-$COMMLST RESET 'LAST' FLAG
         XC    MAINPROC,MAINPROC     clear record processor
         BR    R9                    RETURN
MAIN0410 DS    0H
         TMAPTR ID=NOCLEAN
         BR    R9                    RETURN
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*             CONVERT STATUS CODE TO MESSAGE TEXT                     *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0500 DS    0H
         TMAPTR ID=BADSTAT,          BAD STATUS FROM TAPEEXCP          +
               DATA1=TDDNAME,        .. DDNAME READ,                   +
               DATA2=TCMD            .. TRACE COMMAND AND STATUS
         LA    R2,STATT              STATUS MESSAGES TABLE
         USING STATD,R2              DEFINE BASE
MAIN0510 DS    0H
         CLI   STATCODE,X'FF'        END OF STATUS MESSAGES?
         BE    MAIN0540              UNKNOWN STATUS CODE
         CLC   TSTAT,STATCODE        STATUS CODE LOCATED?
         BE    MAIN0520              YES
         AH    R2,STATL              NEXT STATUS MESSAGE
         B     MAIN0510              LOOP
MAIN0520 DS    0H
         LH    R1,STATML             MESSAGE TEXT'S LENGTH
         BCTR  R1,0                  FOR EXECUTE
         EX    R1,STATMVC            MOVE STATUS MESSAGE TEXT
         BAL   R9,PRT0000            PRINT MESSAGE
         CLI   TSTAT,$TSTAT99        WAS IT A SVC-99 FAILURE?
         BNE   MAIN0530              NO
         LA    R1,T99RB              REQUEST BLOCK'S ADDRESS
         USING S99RB,R1              DEFINE BASE
         UNPK  SVC99RC(5),T99RC(3)   UNPACK REG 15
         MVZ   SVC99RC,HEX0F0F       TURN OFF ZONES
         TR    SVC99RC,HEXCHAR       TRANSLATE TO PRINTABLE
         UNPK  SVC99EC(5),S99ERROR(3) UNPACK ERROR CODE
         MVZ   SVC99EC,HEX0F0F       TURN OFF ZONES
         TR    SVC99EC,HEXCHAR       TRANSLATE TO PRINTABLE
         UNPK  SVC99IF(5),S99INFO(3) UNPACK UNFO CODE
         MVZ   SVC99IF,HEX0F0F       TURN OFF ZONES
         TR    SVC99IF,HEXCHAR       TRANSLATE TO PRINTABLE
         MVI   SVC99RC+4,C' '        RESTORE BLANK
         MVI   SVC99EC+4,C' '        RESTORE BLANK
         MVI   SVC99IF+4,C' '        RESTORE BLANK
         MVC   PRTDATA(S99MSGL),S99MSG
         BAL   R9,PRT0000            PRINT MESSAGE
MAIN0530 DS    0H
         TM    STATOPT,$ABEND        ABEND ON THIS STATUS?
         BNO   MAIN9900              NO
         ABEND ABEND001,DUMP,,USER   ABEND DUE TO STATUS FROM TAPEEXCP
STATMVC  MVC   PRTDATA(0),STATM      MOVE STATUS MESSAGE
MAIN0540 DS    0H
         ABEND ABEND002,DUMP,,USER   UNKNOWN STATUS CODE FROM TAPEEXCP
* ------------------------------------------------------------------- *
*                                                                     *
*             PRINTING                                                *
*                                                                     *
* ------------------------------------------------------------------- *
PRT0000  DS    0H
         MVI   PRTCMD,$PRTPRT        SET COMMAND
         LA    R1,PRTBLOK            PRINT MODULE INTERFACE BLOCK
         L     R15,APRT              PRINT MODULE ENTRY POINT
         BALR  R14,R15               PRINT
         BR    R9                    RETURN
MAIN9900 DS    0H
         MVI   TCMD,$TCMDCLS         SET COMMAND
         LA    R1,TAPEBLOK           TAPE INTERFACE BLOCK
         L     R15,ATAPEIO           TAPE I/O MODULE ENTRY POINT
         BALR  R14,R15               ALLOW TAPE MODULE TO CLOSE
         TMAPTR ID=TAPECLSE,         TAPE CLOSED                       +
               DATA1=TDDNAME,        .. DDNAME CLOSED                  +
               DATA2=TSTAT           .. TRACE STATUS
         CLI   TSTAT,$TSTATOK        TAPE CLOSE SUCCESSFUL?
         BE    MAIN9910              YES
         CLI   TSTAT,$TSTATNO        TAPE NOT OPEN?
         BE    MAIN9910              ALLOWABLE
         TMAPTR ID=CLSEFAIL,         TAPE CLOSE FAILED                 +
               DATA1=TDDNAME,        .. DDNAME CLOSED                  +
               DATA2=TSTAT           .. TRACE STATUS
         ABEND ABEND003,DUMP,,USER
MAIN9910 DS    0H
         TM    COMMFLAG,$ABEND       ABEND ON EXIT?
         BO    MAIN9920              YES
         TMAPTR ID=EOJ               PROGRAM TERMINATING
         MVI   PRTCMD,$PRTCLS        SET COMMAND
         LA    R1,PRTBLOK            PRINT MODULE INTERFACE BLOCK
         L     R15,APRT              PRINT MODULE ENTRY POINT
         BALR  R14,R15               ALLOW PRINT TO CLOSE FILES
         L     R2,TRSIZE             TRACE TABLE'S SIZE
         LA    R2,32(R2)             FOR BOUNDARY ROUNDING
         L     R1,TRADDR             TRACE TABLE'S ADDRESS
         FREEMAIN R,A=(R1),LV=(R2)   RELEASE TRACE TABLE STORAGE
         L     R13,4(R13)            RESTORE REGISTER 13
         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS
         SR    R15,R15               GIVE GOOD RETURN CODE
         BR    R14                   RETURN TO CALLER
MAIN9920 DS    0H
         ABEND 100,DUMP,,USER        ABEND
*---------------------------------------------------------------------*
*                                                                     *
*              WORK AREAS                                             *
*                                                                     *
*---------------------------------------------------------------------*
TAPESAVE DC    18F'0'                REGISTER SAVE AREA
VCOMM    DC    V(TMAPCOMM)           COMMON DATA ADDRESS
MAINPROC DC    A(0)                  RECORD PROCESSOR ADDRESS
H2       DC    H'2'                  CONSTANT
H8       DC    H'8'                  CONSTANT
TAPEFLAG DC    X'00'                 FLAGS/SWITCHES
$TAPEDTA EQU   X'80'                 .. DATA FOUND
$TAPETM  EQU   X'40'                 .. LAST READ FOUND A TAPE MARK
$TAPEEOT EQU   X'20'                 .. LOGICAL EOT MESSAGE PRINTED
FILENBR  DC    PL3'1'                FILE NUMBER
P1       DC    P'1'                  CONSTANT
TMAPDD   DC    CL8'TMAPTAPE'         TAPE'S DD NAME
VOL1ID   DC    C'VOL1'               CONSTANT
HEX0F0F  DC    8X'0F'                CONSTANT
HEXCHAR  DC    C'0123456789ABCDEF'   CONSTANT
MSG01    DC    C'** ERROR DETECTED BY PARAMETER CONVERTER, PROCESSING A+
               BORTED'
MSG01L   EQU   *-MSG01
DENMSG   DC    C'TAPE IS RECORDED AT DENSITY '
DENDENID DC    C' '
         DC    C' ('
DENBPI   DC    CL4' '
         DC    C'BPI)'
DENMSGL  EQU   *-DENMSG
VOLMSG1  DC    C'** FIRST RECORD ON TAPE IS NOT VOL1 RECORD, TAPE VOLSE+
               R IS UNKNOWN'
VOLMSG1L EQU   *-VOLMSG1
VOLMSG2  DS    0C
         DC    C'TAPE VOLSER IS:'
VOLMSG2V DC    CL6' '
VOLMSG2L EQU   *-VOLMSG2
FILEMSG  DS    0C
         DC    CL27' * * * * * * * * * * * * * '
         DC    CL27' * * * * * * * * * * * * * '
         DC    CL15'PHYSICAL FILE #'
FILEMSGN DC    CL07' '
         DC    CL27' * * * * * * * * * * * * * '
         DC    CL27' * * * * * * * * * * * * * '
FILEMSGL EQU   *-FILEMSG
UNKNMSG  DC    C'DATA NOT RECOGNIZED'
UNKNMSGL EQU   *-UNKNMSG
TMMSG1   DC    CL20'* LEADING TAPE MARK '
         DC    CL20'* LEADING TAPE MARK '
         DC    CL20'* LEADING TAPE MARK '
         DC    CL20'* LEADING TAPE MARK '
         DC    CL20'* LEADING TAPE MARK '
TMMSG1L  EQU   *-TMMSG1
TMMSG2   DC    CL20'* * * TAPE MARK * * '
         DC    CL20'* * * TAPE MARK * * '
         DC    CL20'* * * TAPE MARK * * '
         DC    CL20'* * * TAPE MARK * * '
         DC    CL20'* * * TAPE MARK * * '
         DC    CL20'* * * TAPE MARK * * '
TMMSG2L  EQU   *-TMMSG2
LEOTMSG  DC    CL20'*LOGICAL END OF TAPE'
         DC    CL20'*LOGICAL END OF TAPE'
         DC    CL20'*LOGICAL END OF TAPE'
         DC    CL20'*LOGICAL END OF TAPE'
         DC    CL20'*LOGICAL END OF TAPE'
         DC    CL20'*LOGICAL END OF TAPE'
LEOTMSGL EQU   *-LEOTMSG
EOTMSG   DC    CL20'* * END OF TAPE * * '
         DC    CL20'* * END OF TAPE * * '
         DC    CL20'* * END OF TAPE * * '
         DC    CL20'* * END OF TAPE * * '
         DC    CL20'* * END OF TAPE * * '
         DC    CL20'* * END OF TAPE * * '
EOTMSGL  EQU   *-EOTMSG
S99MSG   DC    C'** DYNAMIC ALLOCATION FAILURE, R15='
SVC99RC  DC    CL4' '
         DC    C'  S99ERROR='
SVC99EC  DC    CL4' '
         DC    C'  S99INFO='
SVC99IF  DC    CL4' '
         DC    C' '
S99MSGL  EQU   *-S99MSG
*---------------------------------------------------------------------*
*                                                                     *
*              COMMAND/STATUS BLOCK                                   *
*                                                                     *
*---------------------------------------------------------------------*
TAPEBLOK TAPEBLOK TYPE=CSECT
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
*              PRINT MODULE INTERFACE BLOCK                           *
*                                                                     *
*---------------------------------------------------------------------*
PRTBLOK  PRTBLOK  TYPE=CSECT
         SPACE 2
*---------------------------------------------------------------------*
*              TAPE DENSITY ID/BPI EQUIVALENTS TABLE                  *
*---------------------------------------------------------------------*
DENTABLE DS    0C
         DC    CL04'800 '              DENSITY ID 2
         DC    CL04'1600'              DENSITY ID 3
         DC    CL04'6250'              DENSITY ID 4
         DC    CL04'38K '              DENSITY ID 5
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
*              TAPEEXCP STATUS CODE/MESSAGE TABLE                     *
*                                                                     *
*---------------------------------------------------------------------*
STATT    DS    0C
         STATMSG $TSTATAF,$ABEND,'DEBCHK TYPE=ADD FAILED'
         STATMSG $TSTATND,,'DD NOT FOUND'
         STATMSG $TSTATOP,,'TAPE DD ALREADY OPEN'
         STATMSG $TSTATNO,,'TAPE DD NOT OPEN'
         STATMSG $TSTATTM,,'TAPE MARK READ'
         STATMSG $TSTATPE,,'PHYSICAL END OF TAPE REACHED'
         STATMSG $TSTATIE,$ABEND,'I/O ERROR OCCURRED'
         STATMSG $TSTATXD,$ABEND,'DEB NOT FOUND DURING CLOSE'
         STATMSG $TSTATDF,$ABEND,'DEBCHK TYPE=DELETE FAILED'
         STATMSG $TSTATIX,$ABEND,'I/O ERROR, SENSE NOT AVAILABLE'
         STATMSG $TSTATIC,,'TCMD WAS INVALID'
         STATMSG $TSTATSF,,'SENSE COMMAND FAILED, DENSITY NOT AVAILABLE+
               '
         STATMSG $TSTATNC,$ABEND,'NO CONSOLE COMMUNICATION BLOCK AVAILA+
               BLE WHILE RUNNING AS A STARTED TASK'
         STATMSG $TSTATNU,,'NO SUITABLE UNIT IS AVAILABLE'
         STATMSG $TSTAT99,$ABEND,'DYNAMIC ALLOCATE/DE-ALLOCATE FAILED'
         DC      X'FF'
         LTORG
*---------------------------------------------------------------------*
*                                                                     *
*              TAPEEXCP STATUS CODE/MESSAGE TEXT TABLE                *
*                                                                     *
*---------------------------------------------------------------------*
STATD    DSECT
STATL    DS   AL2                    LENGTH OF THIS ENTRY
STATML   DS   AL2                    MESSAGE TEXT'S LENGTH
STATOPT  DS   X                      PROCESSING OPTIONS
STATCODE DS   X                      STATUS CODE
STATM    DS   C                      TEXT FOR THIS STATUS CODE
*---------------------------------------------------------------------*
*                                                                     *
*              COMMON DATA MAP                                        *
*                                                                     *
*---------------------------------------------------------------------*
TMAPCOMM TMAPCOMM TYPE=DSECT
*---------------------------------------------------------------------*
*                                                                     *
*              EQUATES                                                *
*                                                                     *
*---------------------------------------------------------------------*
         COPY REGEQU
         IEFZB4D0
         IEFZB4D2
         END  TMAPMAIN
./ ADD NAME=TMAPMCS
          TITLE 'TMAPMCS - SMP/E MCS FILE PROCESSOR'
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: TMAPMCS                                               *
*                                                                     *
*  Function:                                                          *
*     This module inteprets SMP/E MCS files, FUNCTIONs, PTFs,         *
*     APARs, and USERMODs will be listed.                             *
*                                                                     *
* ------------------------------------------------------------------- *
TMAPMCS  CSECT
         USING TMAPMCS,R12
         USING TMAPCOMM,R11
         STM   R14,R12,12(R13)     SAVE REGS
         LR    R12,R15             SET BASE REG
         B     MCS0000             SKIP EYECATCHER
         DC    CL8'TMAPMCS'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MCS0000  DS    0H
         LA    R15,MCSSAVE         OUR SAVE AREA ADDRESS
         ST    R13,4(R15)          CHAIN CALLER'S SAVE AREA TO OURS
         ST    R15,8(R13)          CHAIN OUR SAVE AREA TO CALLER'S
         LR    R13,R15             SET SAVE AREA ADDRESS
         L     R10,COMMRECA        CURRENT RECORD'S ADDRESS
         TMAPTR ID=ENTRY,          TRACE ENTRY                         +
               DATA1=COMMFLAG
         TM    COMMFLAG,$COMMLST   'CLEAN-UP' CALL?
         BO    MCS0600
         TM    COMMFLAG,$COMMINQ   INQUIRE CALL?
         BNO   MCS0100             NO
         TMAPTR ID=INQCALL
         SR    R2,R2               CLEAR REGISTER
         SR    R3,R3               CLEAR REGISTER
         ICM   R3,3,COMMRECL       CURRENT RECORD'S LENGTH
         D     R2,F80              DIVIDE BY 80
         LTR   R2,R2               REMAINDER = ZERO?
         BNZ   EXIT0008            NO..
         LA    R2,72               NUMBER OF COLUMNS TO SCAN
         LR    R4,R10              FIRST BYTE OF FIRST RECORD
         BAL   R9,MCS0400          FIND FIRST NON BLANK
         LTR   R4,R4               NON-BLANK FOUND?
         BZ    EXIT0008            NO
         CLC   =C'++',0(R4)        SMP/E CONTROL STATEMENT?
         BNE   EXIT0008            NO
         LA    R4,2(R4)            SKIP '++'
         SH    R2,H2               MINUS LENGTH
         BNH   EXIT0008            EXIT IF NEGATIVE
         BAL   R9,MCS0400          FIND NEXT NON-BLANK
         LTR   R4,R4               NON-BLANK FOUND?
         BZ    EXIT0008            NO
         BAL   R9,MCS0400          FIND NEXT
         CLC   APAR,0(R4)          AN APAR?
         BE    MCS0010             YES
         CLC   PTF,0(R4)           A PTF?
         BE    MCS0010             YES
         CLC   FUNCTION,0(R4)      A FUNCTION?
         BE    MCS0010             YES
         CLC   USERMOD,0(R4)       A USERMOD?
         BE    MCS0010             YES
         B     EXIT0008            OTHERWISE ASSUME WE DON'T KNOW
MCS0010  DS    0H
         TMAPTR ID=HEADING
         MVI   MCSFLAG,0           RESET ALL FLAGS
         MVC   COMMMEML,MCSMEML    SET OUTPUT LENGTH PER MEMBER
         MVC   COMMMEM#,MCSMEM#    SET MEMBERS PER LINE
         MVC   PRTDATA(HEADINGL),HEADING
         BAL   R9,PRT0000          PRINT HEADING
         TM    COMMFLAG,$COMMNOM   NO-MEMBERS?
         BO    EXIT0000            SKIP SUBHEADING
         MVC   COMMSUBH(SUBHEADL),SUBHEAD
         MVC   PRTDATA(SUBHEADL),SUBHEAD
         BAL   R9,PRT0000          PRINT SUB HEADING
         B     EXIT0000            AND EXIT
*---------------------------------------------------------------------*
*                                                                     *
*           PROCESS SMP/E CONTROL STATEMENTS                          *
*                                                                     *
*---------------------------------------------------------------------*
MCS0100  DS    0H
         TMAPTR ID=NEWBLOCK
         TM    MCSFLAG,$ERROR      ERROR OCCURRED?
         BO    EXIT0000            YES, EXIT
         TM    COMMFLAG,$COMMNOM   NO-MEMBERS?
         BO    EXIT0000            EXIT
         SR    R2,R2               CLEAR REGISTER
         SR    R3,R3               CLEAR REGISTER
         ICM   R3,3,COMMRECL       CURRENT RECORD'S LENGTH
         D     R2,F80              DIVIDE BY 80
         LTR   R2,R2               REMAINDER = ZERO?
         BNZ   MCS0500             NO... ERROR
* ------------------------------------------------------------------- *
*                                                                     *
*      PROCESS EACH RECORD OF THE BLOCK                               *
*                                                                     *
* ------------------------------------------------------------------- *
MCS0110  DS    0H
         LA    R2,72               LENGTH TO SCAN
         LR    R4,R10              FIRST BYTE TO SCAN
         BAL   R9,MCS0400          FIND FIRST NON-BLANK
         LTR   R4,R4               NON-BLANK FOUND?
         BZ    MCS0300             NO, GO TO NEXT STATEMENT
         TM    MCSFLAG,$COMMENT    PROCESSING A COMMENT?
         BO    MCS0280             YES
* ------------------------------------------------------------------- *
*                                                                     *
*      SEARCH FOR SMP/E CONTROL STATEMENT DELIMITER (++)              *
*                                                                     *
* ------------------------------------------------------------------- *
MCS0130  DS    0H
         TM    MCSFLAG,$SMPE       ARE WE READING AN SMP/E STATEMENT?
         BO    MCS0250             YES.. FIND END OF STATEMENT
MCS0140  DS    0H
         CLC   =C'++',0(R4)        IS THIS AN SMP/E CONTROL STATEMENT?
         BE    MCS0150             YES
         LA    R4,1(R4)            NEXT BYTE
         BCT   R2,MCS0140          SEARCH FOR ++
         B     MCS0300             NO MORE DATA, NEED ANOTHER RECORD
MCS0150  DS    0H
         OI    MCSFLAG,$SMPE       SMP/E STATEMENT UNDER WAY
         TMAPTR ID=SMPEFND,        SMP/E STATEMENT FOUND               +
               DATA1=0(R4),        .. FIRST 8 BYTES INTO TRACE TABLE   +
               DATA2=8(R4)         .. NEXT 8 BYTES ALSO
         LA    R4,2(R4)            SKIP DELIMITER
         SH    R2,H2               MINUS DELIMITER LENGTH
         BZ    MCS0300             END OF STATEMENT?
         BM    MCS0300             END OF STATEMENT?
         BAL   R9,MCS0400          FIND NEXT NON-BLANK
         LTR   R4,R4               NON-BLANK FOUND?
         BZ    MCS0300             NO
         MVC   SYSMODT,BLANKS      CLEAR SYSMOD TYPE
         CLC   APAR,0(R4)          AN APAR?
         BE    MCS0160             YES
         CLC   PTF,0(R4)           A PTF?
         BE    MCS0170             YES
         CLC   FUNCTION,0(R4)      A FUNCTION?
         BE    MCS0180             YES
         CLC   USERMOD,0(R4)       A USERMOD?
         BE    MCS0190             YES
         B     MCS0300             DON'T KNOW WHAT IT IS
MCS0160  DS    0H
         MVC   SYSMODT(4),APAR     LET'EM KNOW IT'S AN APAR
         LA    R4,4(R4)            SKIP APAR DELIMITER
         SH    R2,H4               MINUS APAR DELIMITER LENGTH
         BZ    MCS0300             NO MORE DATA
         BM    MCS0300             NO MORE DATA
         B     MCS0200
MCS0170  DS    0H
         MVC   SYSMODT(3),PTF      LET'EM KNOW IT'S A PTF
         LA    R4,3(R4)            SKIP PTF DELIMITER
         SH    R2,H3               MINUS PTF DELIMITER LENGTH
         BZ    MCS0300             NO MORE DATA
         BM    MCS0300             NO MORE DATA
         B     MCS0200
MCS0180  DS    0H
         MVC   SYSMODT(8),FUNCTION LET'EM KNOW IT'S A FUNCTION
         LA    R4,8(R4)            SKIP FUNCTION DELIMITER
         SH    R2,H8               MINUS FUNCTION DELIMITER LENGTH
         BZ    MCS0300             NO MORE DATA
         BM    MCS0300             NO MORE DATA
         B     MCS0200
MCS0190  DS    0H
         MVC   SYSMODT(7),USERMOD  LET'EM KNOW IT'S A USERMOD
         LA    R4,7(R4)            SKIP USERMOD DELIMITER
         SH    R2,H7               MINUS USERMOD DELIMITER LENGTH
         BZ    MCS0300             NO MORE DATA
         BM    MCS0300             NO MORE DATA
MCS0200  DS    0H
         BAL   R9,MCS0400          FIND NEXT NON-BLANK
         LTR   R4,R4               NON-BLANK FOUND?
         BZ    MCS0300             NO.. GIVE UP
         CLI   0(R4),C'('          OPENING PARENTHESIS?
         BNE   MCS0300             NO... GIVE UP
         LA    R4,1(R4)            SKIP OPENING PARENTHESIS
         BCT   R2,MCS0210          MINUS PARENTHESIS LENGTH
         B     MCS0300             NO DATA?
MCS0210  DS    0H
         BAL   R9,MCS0400          FIND NEXT NON-BLANK
         LTR   R4,R4               NON-BLANK FOUND?
         BZ    MCS0300             NO.. GIVE UP
         MVC   SYSMODN,BLANKS      CLEAR SYSMOD NAME
         LA    R1,SYSMODN          SYSMOD NAME
         CH    R2,H8               MORE THAN 8 CHARACTERS LEFT?
         BNH   MCS0220             NO
         LH    R2,H8               LIMIT TO 8
MCS0220  DS    0H
         CLI   0(R4),C' '          BLANK?
         BE    MCS0230             YES
         CLI   0(R4),C')'          ENDING PARENTHESIS?
         BE    MCS0230             YES
         MVC   0(1,R1),0(R4)       COPY TO PRINT AREA
         LA    R1,1(R1)            NEXT
         LA    R4,1(R4)            NEXT
         BCT   R2,MCS0220          LOOP
MCS0230  DS    0H
         MVI   PRTCMD,$PRTMEM      SET COMMAND FOR TMAPPRT
         MVC   PRTDATA(SYSMODL),SYSMOD
         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK
         L     R15,APRT            PRINT MODULE ENTRY POINT
         BALR  R14,R15             LINK TO PRINT
*---------------------------------------------------------------------*
*                                                                     *
*      FIND END OF STATEMENT                                          *
*                                                                     *
*---------------------------------------------------------------------*
MCS0250  DS    0H
         CLC   =C'/*',0(R4)        START OF A COMMENT?
         BE    MCS0260             YES
         CLI   0(R4),C'.'          END OF STATEMENT?
         BE    MCS0270             YES
         LA    R4,1(R4)            NEXT
         BCT   R2,MCS0250          KEEP LOOKING
         B     MCS0300             NEED ANOTHER RECORD
MCS0260  DS    0H
         OI    MCSFLAG,$COMMENT    COMMENT IN PROGRESS
         TMAPTR ID=COMMENT
         B     MCS0280             FIND END OF THE COMMENT
MCS0270  DS    0H
         NI    MCSFLAG,255-$SMPE   TURN OFF SMP/E STATEMENT FLAG
         TMAPTR ID=SMPEEND
         B     MCS0300             NEED ANOTHER RECORD
* ------------------------------------------------------------------- *
*                                                                     *
*      A COMMENT IS BEING SEARCHED FOR THE ENDING DELIMITER (*/)      *
*                                                                     *
* ------------------------------------------------------------------- *
MCS0280  DS    0H
         CLC   =C'*/',0(R4)        ENDING DELIMITER FOUND?
         BE    MCS0290             YES
         LA    R4,1(R4)            NEXT BYTE
         BCT   R2,MCS0280          KEEP SCANNING
         B     MCS0300             END OF DATA, NEED ANOTHER RECORD
MCS0290  DS    0H
         NI    MCSFLAG,255-$COMMENT TURN OFF COMMENT FLAG
         TMAPTR ID=COMMTEND
         LA    R4,2(R4)            SKIP ENDING DELIMITER
         SH    R2,H2               MINUS DELIMITER LENGTH
         BZ    MCS0300             NO MORE DATA, GET ANOTHER RECORD
         BM    MCS0300             NO MORE DATA, GET ANOTHER RECORD
         BAL   R9,MCS0400          FIND NEXT NON-BLANK
         LTR   R4,R4
         BNZ   MCS0250             FIND END OF STATEMENT
*---------------------------------------------------------------------*
*                                                                     *
*      NEED NEXT RECORD FROM CURRENT TAPE BLOCK                       *
*                                                                     *
*---------------------------------------------------------------------*
MCS0300  DS    0H
         LA    R10,80(R10)         NEXT RECORD
         BCT   R3,MCS0110          PROCESS THIS RECORD
         B     EXIT0000            ALL LOGICAL RECORDS PROCESSED
*---------------------------------------------------------------------*
*                                                                     *
*              FIND FIRST NON-BLANK                                   *
*                                                                     *
*           R2  LENGTH TO SCAN                                        *
*           R4  FIRST BYTE TO SCAN                                    *
*           R9  RETURN ADDRESS                                        *
*                                                                     *
*---------------------------------------------------------------------*
MCS0400  DS    0H
         LTR   R2,R2
         BNM   MCS0410
         DC    H'0'
MCS0410  DS    0H
         CLI   0(R4),C' '          BLANK?
         BHR   R9                  NO.. RETURN
         LA    R4,1(R4)            NEXT BYTE
         BCT   R2,MCS0400          LOOP
         SR    R4,R4               NOT FOUND
         BR    R9                  RETURN
*---------------------------------------------------------------------*
*                                                                     *
*              SERIOUS ERROR CONDITIONS                               *
*                                                                     *
*---------------------------------------------------------------------*
MCS0500  DS    0H
         TMAPTR ID=INVBLKSZ,       BLOCK SIZE IS NOT A MULTIPLE OF 80  +
               DATA1=COMMRECL      .. INCLUDE BLOCK SIZE IN TRACE
         OI    MCSFLAG,$ERROR      SET ERROR FLAG
         MVC   PRTDATA(MSG01L),MSG01
         BAL   R9,PRT0000          PRINT MESSAGE
         B     EXIT0000            AND EXIT
*---------------------------------------------------------------------*
*                                                                     *
*              CLEAN-UP                                               *
*                                                                     *
*---------------------------------------------------------------------*
MCS0600  DS    0H
         TMAPTR ID=CLEAN-UP
         MVI   PRTCMD,$PRTMEM      MEMBER PRINT
         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK
         L     R15,APRT            PRINT MODULE ENTRY POINT
         BALR  R14,R15             LINK TO PRINT MODULE
         B     EXIT0000            EXIT
*---------------------------------------------------------------------*
*                                                                     *
*              PRINTING                                               *
*                                                                     *
*---------------------------------------------------------------------*
PRT0000  DS    0H
         MVI   PRTCMD,$PRTPRT      REQUEST PRINT
         MVI   PRTCC,C' '          SINGLE SPACE
         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK
         L     R15,APRT            PRINT MODULE ENTRY POINT
         BALR  R14,R15             LINK TO PRINT MODULE
         BR    R9                  RETURN
* ------------------------------------------------------------------- *
*                                                                     *
*             EXIT                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS   0H
         TMAPTR ID=EXIT0000          EXITING, RC=0
         SR    R15,R15               SET RETURN CODE TO ZERO
         B     MCS9900               AND RETURN
EXIT0008 DS    0H
         TMAPTR ID=EXIT0008          EXITING, RC=8
         LA    R15,8                 SET RETURN CODE TO 8
MCS9900  DS    0H
         L     R13,4(R13)            RESTORE REGISTER 13
         L     R14,12(R13)           RESTORE REGISTER 14
         LM    R0,R12,20(R13)        RESTORE ALL OTHER REGISTERS
         BR    R14                   RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
*              WORK AREAS                                             *
*                                                                     *
* ------------------------------------------------------------------- *
MCSSAVE  DC    18F'0'                REGISTER SAVE AREA
F80      DC    F'80'                 CONSTANT
H2       DC    H'2'                  CONSTANT
H3       DC    H'3'                  CONSTANT
H4       DC    H'4'                  CONSTANT
H7       DC    H'7'                  CONSTANT
H8       DC    H'8'                  CONSTANT
MCSMEML  DC    Y(SYSMODL)            OUTPUT LENGTH PER MEMBER
MCSMEM#  DC    Y(L'PRTDATA/SYSMODL)  NUMBER PER LINE
MCSFLAG  DC    X'00'                 FLAGS
$ERROR   EQU   X'80'                 .. SERIOUS ERROR HAS OCCURRED
$SMPE    EQU   X'40'                 .. SMP/E STATEMENT FOUND
$COMMENT EQU   X'20'                 .. COMMENT FOUND
BLANKS   DC    CL08' '               CONSTANT
APAR     DC    C'APAR'               CONSTANT
PTF      DC    C'PTF'                CONSTANT
FUNCTION DC    C'FUNCTION'           CONSTANT
USERMOD  DC    C'USERMOD'            CONSTANT
HEADING  DC    C'THIS DATASET CONTAINS SMP/E MCS RECORDS'
HEADINGL EQU   *-HEADING
SUBHEAD  DS    0C
         DC    CL11'SYSMOD TYPE'
         DC    CL02' '
         DC    CL11'SYSMOD NAME'
         DC    CL06' '
         DC    CL11'SYSMOD TYPE'
         DC    CL02' '
         DC    CL11'SYSMOD NAME'
         DC    CL06' '
         DC    CL11'SYSMOD TYPE'
         DC    CL02' '
         DC    CL11'SYSMOD NAME'
         DC    CL06' '
         DC    CL11'SYSMOD TYPE'
         DC    CL02' '
         DC    CL11'SYSMOD NAME'
SUBHEADL EQU   *-SUBHEAD
SYSMOD   DS    0C
         DC    CL02' '
SYSMODT  DC    CL08' '               SYSMOD TYPE
         DC    CL05' '
SYSMODN  DC    CL08' '               SYSMOD NAME
         DC    CL07' '
SYSMODL  EQU   *-SYSMOD
MSG01    DC    C'*** BLOCK FOUND WITH LENGTH NOT A MULTIPLE OF 80, REMA+
               INDER OF FILE WILL BE BYPASSED'
MSG01L   EQU   *-MSG01
* ------------------------------------------------------------------- *
*                                                                     *
*              PRINT MODULE INTERFACE BLOCK                           *
*                                                                     *
* ------------------------------------------------------------------- *
PRTBLOK  PRTBLOK  TYPE=CSECT
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*              LITERALS                                               *
*                                                                     *
* ------------------------------------------------------------------- *
         LTORG
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*              COMMON DATA MAP                                        *
*                                                                     *
* ------------------------------------------------------------------- *
TMAPCOMM TMAPCOMM TYPE=DSECT
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*              EQUATES                                                *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY REGEQU
         END  TMAPMCS
./ ADD NAME=TMAPMOVE
          TITLE 'TMAPMOVE - IEHMOVE UNLOAD PROCESSOR'
*---------------------------------------------------------------------*
*                                                                     *
*  MODULE NAME: TMAPMOVE - IEHMOVE UNLOAD PROCESSOR                   *
*                                                                     *
*  Function:                                                          *
*     Print DSORG, RECFM, BLKSIZE, LRECL, DSN, and names of the       *
*     members of unloaded PDS's.                                      *
*                                                                     *
* ------------------------------------------------------------------- *
TMAPMOVE CSECT
         USING TMAPMOVE,R12
         USING TMAPCOMM,R11
         STM   R14,R12,12(R13)     SAVE REGS
         LR    R12,R15             SET BASE REG
         B     MOVE0000            SKIP EYECATCHER
         DC    CL8'TMAPMOVE'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOVE0000 DS    0H
         LA    R15,MOVESAVE        OUR SAVE AREA ADDRESS
         ST    R13,4(R15)          CHAIN CALLER'S SAVE AREA TO OURS
         ST    R15,8(R13)          CHAIN OUR SAVE AREA TO CALLER'S
         LR    R13,R15             SET SAVE AREA ADDRESS
         L     R10,COMMRECA        CURRENT RECORD'S ADDRESS
         TMAPTR ID=ENTRY,          TRACE ENTRY                         +
               DATA1=COMMFLAG
         TM    COMMFLAG,$COMMLST   'CLEAN-UP' CALL?
         BO    MOVE0400            YES
         TM    COMMFLAG,$COMMINQ   INQUIRE CALL?
         BNO   MOVE0100            NO
         TMAPTR ID=INQCALL
         CLC   MOVEID,5(R10)       LOOK LIKE IEHMOVE DATA?
         BNE   EXIT0008            NO
         MVI   MOVEFLAG,0          RESET ALL FLAGS
         MVC   PRTDATA(HEADINGL),HEADING
         BAL   R9,PRT0000          PRINT HEADING
         ST    R10,DCBRECA         SET RECORD ADDRESS
         MVC   DCBDSOD,DSODISP     DISPLACEMENT TO DSORG
         MVC   DCBRFMD,RFMDISP     DISPLACEMENT TO RECORD FORMAT
         MVC   DCBBSZD,BSZDISP     DISPLACEMENT TO BLOCK SIZE
         MVC   DCBRSZD,RSZDISP     DISPLACEMENT TO RECORD SIZE
         MVC   DCBUNTD,UNTDISP     DISPLACEMENT TO DEVICE TYPE
         LA    R1,DCBBLOK          DCB CONVERTER PARMS ADDRESS
         L     R15,ADCB            DCB CONVERTER ENTRY POINT
         BALR  R14,R15             LINK TO DCB CONVERTER
         MVC   PRDSO,DCBDSO        SET DATA SET ORG
         MVC   PRRFM,DCBRFM        SET RECORD FORMAT
         MVC   PRBSZ,DCBBSZ        SET BLOCK SIZE
         MVC   PRRSZ,DCBRSZ        SET RECORD SIZE
         MVC   PRTDATA(DCBMSGL),DCBMSG
         BAL   R9,PRT0000          PRINT DCB MESSAGE
         MVC   COMMMEML,H10        SET OUTPUT LENGTH
         MVC   COMMMEM#,H12        SET NUMBER PER LINE
         L     R15,ADCB            DCB INFO CONVERTER
         BALR  R14,R15             CONVERT DCB INFO
         LA    R1,85(R10)          FORMAT-1 DSCB INFO ADDRESS
         MVC   DSNNAME,85(R10)     MOVE DATASET NAME
         MVC   PRTDATA(DSNMSGL),DSNMSG
         BAL   R9,PRT0000          PRINT DATASET NAME
         TM    COMMFLAG,$COMMNOM   NO-MEMBERS?
         BO    EXIT0000            SKIP
         AH    R10,DSODISP         BASE + DSORG DISPLACEMENT
         TM    0(R10),DS1DSGPO     IS THIS A PARTITIONED DATA SET?
         BNO   EXIT0000            NO
         OI    MOVEFLAG,$PDS       SET PDS FLAG
         MVC   PRTDATA(SUBHEADL),SUBHEAD
         BAL   R9,PRT0000          PRINT SUBHEADING
         MVC   COMMSUBH(SUBHEADL),SUBHEAD
         B     EXIT0000            AND EXIT
*---------------------------------------------------------------------*
*                                                                     *
*              PRINT MEMBERS                                          *
*                                                                     *
*---------------------------------------------------------------------*
MOVE0100 DS    0H
         TM    MOVEFLAG,$ERROR     SERIOUS ERROR OCCURRED?
         BO    EXIT0000            YES EXIT
         TM    COMMFLAG,$COMMNOM   NO-MEMBERS?
         BO    EXIT0000            SKIP
         TM    MOVEFLAG,$PDS       IS CURRENT DATASET A PDS?
         BNO   EXIT0000            NO.. EXIT
         TMAPTR ID=MEMBER
         SR    R8,R8               CLEAR FOR LENGTH
         ICM   R8,3,COMMRECL       CURRENT RECORD LENGTH
         TM    COMMFLAG,$COMM1ST   FIRST PASS?
         BO    MOVE0110            YES
         L     R2,CURRBUFF         RESTORE CURRENT BUFFER ADDRESS
         B     MOVE0160            RESUME LOGIC
*---------------------------------------------------------------------*
*              SKIP TO RECORD #4                                      *
*---------------------------------------------------------------------*
MOVE0110 DS    0H
         TMAPTR ID=1STPASS
         LA    R3,5                SET LOOP CONTROL
MOVE0120 DS    0H
         TMAPTR ID=SKIPSEG,                                            +
               RDATA1=R3
         BAL   R9,MOVE0200         GET NEXT SEGEMENTS
         BCT   R3,MOVE0120         LOOP
         LA    R2,BUFFER1+44       FIRST MEMBER DATA
         USING RECPRFX,R2          DEFINE BASE
         CLI   RECTYPE,$RECTDIR    DIRECTORY ENTRY?
         BNE   MOVE0500            NO... ERROR
MOVE0130 DS    0H
         TMAPTR ID=DIRSRCH,                                            +
               DATA1=RECTYPE,                                          +
               DATA2=RECTYPE+8
         CLI   RECTYPE,$RECTDIR    DIRECTORY ENTRY
         BNE   MOVE0140            NO
         MVC   PRTDATA(8),RECDATA  COPY MEMBER NAME
         MVI   PRTCMD,$PRTMEM      SET COMMAND FOR TMAPPRT
         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK
         L     R15,APRT            PRINT MODULE ENTRY POINT
         BALR  R14,R15             LINK TO PRINT
MOVE0140 DS    0H
         AH    R2,RECLEN              PLUS DATA LENGTH
         LA    R2,RECDATA-RECPRFX(R2) PLUS PREFIX LENGTH
MOVE0150 DS    0H
         C     R2,ABUFFER2         ADDRESS BEYOND END OF BUFFER 1?
         BL    MOVE0130            NO
MOVE0160 DS    0H
         BAL   R9,MOVE0200         GET NEXT SEGMENT
         SH    R2,$BUFSIZE         MINUS 1 BUFFER LENGTH
         B     MOVE0150            LOOP
*---------------------------------------------------------------------*
*              DE-BLOCK NEXT SEGEMENT                                 *
*---------------------------------------------------------------------*
MOVE0200 DS    0H
         TMAPTR ID=NEXTSEG,        TRACE SEGMENTS                      +
               RDATA1=R10,         .. CURRENT TAPE I/O ADDRESS         +
               RDATA2=R8           .. TAPE I/O AREA LEFT
         LTR   R8,R8               ANY DATA LEFT IN THIS TAPE BLOCK?
         BZ    MOVE0210            NO..
         MVC   BUFFER1,BUFFER2     COPY BUFFER 2 TO BUFFER 1
         MVC   BUFFER2,2(R10)      COPY I/O BUFFER TO BUFFER 2
         AH    R10,$RECSIZE        NEXT TAPE BUFFER RECORD
         SH    R8,$RECSIZE         MINUS RECORD SIZE
         BR    R9                  RETURN
MOVE0210 DS    0H
         ST    R2,CURRBUFF         SAVE CURRENT BUFFER ADDRESS
         B     EXIT0000            AND EXIT
*---------------------------------------------------------------------*
*                                                                     *
*              'CLEAN-UP'                                             *
*                                                                     *
*---------------------------------------------------------------------*
MOVE0400 DS    0H
         MVI   PRTCMD,$PRTMEM      REQUEST PRINT
         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK
         L     R15,APRT            PRINT MODULE ENTRY POINT
         BALR  R14,R15             LINK TO PRINT MODULE
         B     EXIT0000            EXIT
*---------------------------------------------------------------------*
*              SERIOUS ERRORS                                         *
*---------------------------------------------------------------------*
MOVE0500 DS    0H
         TMAPTR ID=BADMEM1         FIRST DIRECTORY ENTRY MISSING
         MVC   PRTDATA(MSG01L),MSG01
         BAL   R9,PRT0000          PRINT MESSAGE
         OI    MOVEFLAG,$ERROR     SET ERROR FLAG
         B     EXIT0000            EXIT
*---------------------------------------------------------------------*
*                                                                     *
*              PRINTING                                               *
*                                                                     *
*---------------------------------------------------------------------*
PRT0000  DS    0H
         MVI   PRTCMD,$PRTPRT      REQUEST PRINT
         MVI   PRTCC,C' '          SINGLE SPACE
         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK
         L     R15,APRT            PRINT MODULE ENTRY POINT
         BALR  R14,R15             LINK TO PRINT MODULE
         BR    R9                  RETURN
* ------------------------------------------------------------------- *
*                                                                     *
*             EXIT                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         TMAPTR ID=EXIT0000          EXITING, RC=0
         SR    R15,R15               SET RETURN CODE TO ZERO
         B     MOVE9900              AND RETURN
EXIT0008 DS    0H
         TMAPTR ID=EXIT0008          EXITING, RC=8
         LA    R15,8                 SET RETURN CODE TO 8
MOVE9900 DS    0H
         L     R13,4(R13)            RESTORE REGISTER 13
         L     R14,12(R13)           RESTORE REGISTER 14
         LM    R0,R12,20(R13)        RESTORE ALL OTHER REGISTERS
         BR    R14                   RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
*              WORK AREAS                                             *
*                                                                     *
* ------------------------------------------------------------------- *
MOVESAVE DC    18F'0'                REGISTER SAVE AREA
ABUFFER2 DC    A(BUFFER2)            ADDRESS OF BUFFER 2
CURRBUFF DC    A(0)                  CURRENT BUFFER ADDRESS
DSODISP  DC    AL2(DS1DSORG-IECSDSL1+80+5+2) DISP TO DSORG
RFMDISP  DC    AL2(DS1RECFM-IECSDSL1+80+5+2) DISP TO RECORD FORMAT
BSZDISP  DC    AL2(DS1BLKL-IECSDSL1+80+5+2)  DISP TO BLOCK SIZE
RSZDISP  DC    AL2(DS1LRECL-IECSDSL1+80+5+2) DISP TO RECORD SIZE
UNTDISP  DC    AL2(285)              DISPLACEMENT TO UNIT TYPE
H10      DC    H'10'                 CONSTANT
H12      DC    H'12'                 CONSTANT
$BUFSIZE DC    Y(L'BUFFER1)          LENGTH OF BUFFERS
$RECSIZE DC    Y(80)                 LENGTH OF RECORD (BUFFER+SEQ#)
MOVEFLAG DC    X'00'                 FLAGS/SWITCHES
$ERROR   EQU   X'80'                 .. SERIOUS ERROR HAS OCCURRED
$PDS     EQU   X'40'                 .. CURRENT DATA SET IS A PDS
MOVEID   DC    C'THIS IS AN UNLOADED DATA SET'
HEADING  DC    C'THIS DATA SET WAS CREATED BY IEHMOVE'
HEADINGL EQU   *-HEADING
DCBMSG   DS    0C
         DC    C'DATA SET ORG:'
PRDSO    DC    CL4' '
         DC    C'   RECORD FORMAT:'
PRRFM    DC    CL4' '
         DC    C'   BLOCK SIZE:'
PRBSZ    DC    CL6' '
         DC    C'   RECORD SIZE:'
PRRSZ    DC    CL6' '
         DC    C'   DEVICE TYPE:'
PRUNT    DC    CL6' '
DCBMSGL  EQU   *-DCBMSG
DSNMSG   DC    C'DATASET''S NAME WAS: '
DSNNAME  DS    CL44' '
DSNMSGL  EQU   *-DSNMSG
SUBHEAD  DC    C'UNLOADED MEMBERS:'
SUBHEADL EQU   *-SUBHEAD
MSG01    DC    C'*** FIRST DIRECTORY BLOCK COULD NOT BE LOCATED, REMAIN+
               DER OF THIS DATA SET WILL BE BYPASSED'
MSG01L   EQU   *-MSG01
BUFFER1  DS    CL78
BUFFER2  DS    CL78
* ------------------------------------------------------------------- *
*                                                                     *
*               PRINT MODULE INTERFACE BLOCK                          *
*                                                                     *
* ------------------------------------------------------------------- *
PRTBLOK  PRTBLOK  TYPE=CSECT
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*               DCB CONVERTER INTERFACE BLOCK                         *
*                                                                     *
* ------------------------------------------------------------------- *
DCBBLOK  DCBBLOK  TYPE=CSECT
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*              COMMON DATA MAP                                        *
*                                                                     *
* ------------------------------------------------------------------- *
TMAPCOMM TMAPCOMM TYPE=DSECT
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*               FORMAT-1 DSCB                                         *
*                                                                     *
* ------------------------------------------------------------------- *
FORMAT1  DSECT
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*               RECORD PREFIX                                         *
*                                                                     *
* ------------------------------------------------------------------- *
RECPRFX  DSECT
RECLEN   DS   H                    LENGTH OF THIS RECORD
RECTYPE  DS   X                    RECORD TYPE
$RECTEND EQU  X'0A'                .. END OF DATASET
$RECTDMY EQU  X'C4'                .. DUMMY RECORD
$RECTDIR EQU  X'C8'                .. DIRECTORY ENTRY
$RECTNTE EQU  X'D0'                .. NOTE LIST RECORD
$RECTDTA EQU  X'E0'                .. DATA RECORD
RECTTR   DS   XL3                  TTR
RECDATA  DS   0C
         IECSDSL1 1
* ------------------------------------------------------------------- *
*                                                                     *
*               EQUATES                                               *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY REGEQU
         END  TMAPMOVE
./ ADD NAME=TMAPPARM 0100-99298-99298-1542-00378-00383-00000-SBGOLOB
          TITLE 'TMAPPARM - PARAMETER CONVERTER'
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: TMAPPARM - parameter converter                        *
*                                                                     *
*  Function:                                                          *
*   The mainline module is complicated enough without having the      *
*   parameter conversion code.  Moving it here also keeps the main-   *
*   line from being too large for 1 base register.                    *
*                                                                     *
*   All parameters are passed via the PARM operand on the EXEC        *
*   statement.                                                        *
*                                                                     *
*   Valid parameters are:                                             *
*                                                                     *
*       KEYWORD           MEANING                                     *
*       1600              Requests a 3420 1600 BPI capable drive.     *
*                                                                     *
*       TAPE              Requests a 3420 6250 BPI capable drive.     *
*                                                                     *
*       6250              Requests a 3420 6250 BPI capable drive.     *
*                                                                     *
*       3420              Requests a 3420 6250 BPI capable drive.     *
*                                                                     *
*       CART              Requests a 3480 drive.                      *
*                                                                     *
*       3480              Requests a 3480 drive.                      *
*                                                                     *
*       MAXLINES=         Specifies a maximum line count for the      *
*                         SYSPRINT output.  MAXLINES must be 2 digits *
*                         or less.  Minimum line count allowed is 5.  *
*                         Default line count is 60.                   *
*                                                                     *
*       NO MEM            Suppresses printing of member names when    *
*         or              the data set is an unloaded PDS, SMP/E      *
*       NO-MEM            MCS records, or IEBUPDTE control records.   *
*                                                                     *
*       FULLTAPE          Input tape will be scanned until the        *
*                         reflective marker is reached or the tape    *
*                         runs off the end of the reel.               *
*                                                                     *
*       VOL=VOLSER        VOLSER OF TAPE.  THE *ONLY* THING THIS      *
*                         IS USED FOR IS THE WTO WHICH TELLS THE      *
*                         OPERATOR WHICH TAPE TO MOUNT.   SOME PEOPLE *
*                         HAVE COMPLAINED THAT THE WTO WAS TOO        *
*                         GENERIC/NON-DESCRIPT.  THIS PARAMETER IS    *
*                         IS OPTIONAL.  IF OMITTED, THE VOLSER IN THE *
*                         WTO WILL BE LITERALLY "XXXXXX".             *
*                                                                     *
* ------------------------------------------------------------------- *
TMAPPARM CSECT
         USING TMAPPARM,R12
         USING TMAPCOMM,R11          DEFINE TMAPCOMM BASE
         STM   R14,R12,12(R13)       SAVE REGS
         LR    R12,R15               SET BASE REG
         B     PARM0000              SKIP EYECATCHER
         DC    CL8'TMAPPARM'
ASMDATE  DC    C'&SYSDATE'
ASMTIME  DC    C'&SYSTIME'
PARM0000 DS    0H
         LR    R10,R1                COPY PARM BLOCK ADDRESS
         LA    R1,PARMSAVE           OUR SAVE AREA ADDRESS
         ST    R13,4(R1)             CHAIN CALLER'S SAVE AREA TO OURS
         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO CALLER'S
         LR    R13,R1                SET SAVE AREA ADDRESS
         TMAPTR ID=ENTRY             TRACE PRINT MODULE ENTRY
         L     R3,COMMPARM           PARAMETER'S ADDRESS
         SR    R4,R4                 CLEAR REGISTER
         ICM   R4,3,0(R3)            PARAMETER'S LENGTH
         BZ    PARM0200              NO PARAMETERS
         CH    R4,MAXPLEN            PARM TOO LONG?
         BNH   PARM0010              NO
         LH    R4,MAXPLEN            LIMIT PARM LENGTH
         MVC   PRTDATA(MSG01L),MSG01 SET MESSAGE
         BAL   R9,PRT0000            PRINT MESSAGE
PARM0010 DS    0H
         TM    PARMFLAG,$HEADING     HEADING ALREADY ISSUED?
         BO    PARM0020              YES
         OI    PARMFLAG,$HEADING     SET HEADING FLAG
         MVC   PRTDATA(HEADINGL),HEADING
         MVC   COMMSUBH(HEADINGL),HEADING
         BAL   R9,PRT0000            PRINT CONTROL STATEMENT HEADING
         LR    R1,R4                 COPY LENGTH
         BCTR  R1,0                  ADJUST FOR EXECUTE
         EX    R1,PARMMVC            MOVE PARM FOR PRINTING
         BAL   R9,PRT0000            PRINT PARAMETERS
         LA    R3,2(R3)              SKIP LENGTH
*---------------------------------------------------------------------*
*                                                                     *
*   R3 IS ADDRESS OF PARAMETER STRING                                 *
*   R4 IS LENGTH OF STRING                                            *
*                                                                     *
*---------------------------------------------------------------------*
PARM0020 DS    0H
         CLC   NOMEM1,0(R3)          NO-MEMBERS CONTROL STATEMENT?
         BE    PARM0030              YES
         CLC   NOMEM2,0(R3)          NO-MEMBERS CONTROL STATEMENT?
         BE    PARM0030              YES
         CLC   MAXLINES,0(R3)        MAXLINES CONTROL STATEMENT?
         BE    PARM0040              YES
         CLC   FULLTAPE,0(R3)        FULLTAPE CONTROL STATEMENT?
         BE    PARM0080              YES
         CLC   TAPE1600,0(R3)        1600 (1600 BPI 3420)?
         BE    PARM0090              YES
         CLC   TAPE6250,0(R3)        1600 (6250 BPI 3420)?
         BE    PARM0100              YES
         CLC   TAPETAPE,0(R3)        TAPE (6250 BPI 3420)?
         BE    PARM0100              YES
         CLC   TAPE3420,0(R3)        3420 (6250 BPI 3420)?
         BE    PARM0100              YES
         CLC   TAPECART,0(R3)        CARTRIDGE (3480)?
         BE    PARM0110              YES
         CLC   TAPE3480,0(R3)        3480?
         BE    PARM0110              YES
         CLC   COMPTIME,0(R3)        COMPILE DATE AND TIME?
         BE    PARM0120              YES
         CLC   ABEND,0(R3)           ABEND AT EXIT?
         BE    PARM0130              YES
         CLC   VOL,0(R3)             VOLSER?
         BE    PARM0140              YES
         B     ERR0010               INVALID CONTROL STATEMENT
PARM0030 DS    0H
         TMAPTR ID=NOMEMBER
         TM    COMMFLAG,$COMMNOM     FLAG ALREADY SET?
         BO    ERR0020               YES
         OI    COMMFLAG,$COMMNOM     SET NO-MEMBER FLAG
         MVC   PRTDATA(MSG02L),MSG02 MOVE MESSAGE
         BAL   R9,PRT0000            PRINT MESSAGE
         LA    R2,6                  SET LENGTH
         B     PARM0150
PARM0040 DS    0H
         TMAPTR ID=MAXLINES
         CLI   09(R3),C'0'           VALID DIGIT?
         BL    ERR0040               NO
         CLI   09(R3),C'9'           VALID DIGIT?
         BH    ERR0040               NO
         CH    R4,H10                1 DIGIT VALUE?
         BE    PARM0060              YES
         CLI   10(R3),C' '           1 DIGIT VALUE?
         BE    PARM0060              YES
         CLI   10(R3),C','           1 DIGIT VALUE?
         BE    PARM0060              YES
         CLI   10(R3),C'0'           VALID DIGIT?
         BL    ERR0040               NO
         CLI   10(R3),C'9'           VALID DIGIT?
         BH    ERR0040               NO
         CLI   11(R3),C' '           2 DIGIT VALUE?
         BE    PARM0050              YES
         CLI   11(R3),C','           2 DIGIT VALUE?
         BNE   ERR0030               NO.. INVALID
PARM0050 DS    0H
         CLC   =C'05',09(R3)         TOO LOW A VALUE?
         BL    ERR0060               YES, REJECT IT
         PACK  COMMMAXL,09(2,R3)     PACK LINE COUNT LIMIT
         LA    R2,11                 TOTAL LENGTH
         B     PARM0070
PARM0060 DS    0H
         CLI   09(R3),C'5'           TOO LOW A VALUE?
         BE    ERR0060               YES, REJECT IT
         PACK  COMMMAXL,09(1,R3)     PACK LINE COUNT LIMIT
         LA    R2,10                 TOTAL LENGTH
PARM0070 DS    0H
         MVC   PRTDATA(MSG03L),MSG03 MOVE MESSAGE
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0150
PARM0080 DS    0H
         TMAPTR ID=FULLTAPE
         OI    COMMFLAG,$COMMFUL     SET FULL TAPE FLAG
         MVC   PRTDATA(MSG04L),MSG04 MOVE MESSAGE
         BAL   R9,PRT0000            PRINT MESSAGE
         LA    R2,8                  TOTAL LENGTH
         B     PARM0150
PARM0090 DS    0H
         TMAPTR ID=TAPE1600
         CLI   COMMDEVT,C' '         DEVICE TYPE ALREADY GIVEN?
         BNE   ERR0050               YES
         MVI   COMMDEVT,$T3420A      SET DEVICE TYPE
         MVC   PRTDATA(MSG05L),MSG05 SET MESSAGE
         BAL   R9,PRT0000            PRINT MESSAGE
         LA    R2,4                  TOTAL LENGTH
         B     PARM0150
PARM0100 DS    0H
         TMAPTR ID=TAPE6250
         CLI   COMMDEVT,C' '         DEVICE TYPE ALREADY GIVEN?
         BNE   ERR0050               YES
         MVI   COMMDEVT,$T3420B      SET DEVICE TYPE
         MVC   PRTDATA(MSG06L),MSG06 SET MESSAGE
         BAL   R9,PRT0000            PRINT MESSAGE
         LA    R2,4                  TOTAL LENGTH
         B     PARM0150
PARM0110 DS    0H
         TMAPTR ID=TAPE3480
         CLI   COMMDEVT,C' '         DEVICE TYPE ALREADY GIVEN?
         BNE   ERR0050               YES
         MVI   COMMDEVT,$T3480       SET DEVICE TYPE
         MVC   PRTDATA(MSG07L),MSG07 SET MESSAGE
         BAL   R9,PRT0000            PRINT MESSAGE
         LA    R2,4                  TOTAL LENGTH
         B     PARM0150
PARM0120 DS    0H
         TMAPTR ID=COMPTIME
         MVC   MSG08DTE,ASMDATE
         MVC   MSG08TME,ASMTIME
         MVC   PRTDATA(MSG08L),MSG08 SET MESSAGE
         BAL   R9,PRT0000            PRINT MESSAGE
         LA    R2,8                  TOTAL LENGTH
         B     PARM0150
PARM0130 DS    0H
         TMAPTR ID=ABEND
         TM    COMMFLAG,$ABEND       ABEND FLAG ALREADY ON?
         BO    ERR0070               YES
         OI    COMMFLAG,$ABEND       SET ABEND FLAG
         MVC   PRTDATA(MSG09L),MSG09 SET MESSAGE
         BAL   R9,PRT0000            PRINT MESSAGE
         LA    R2,5                  TOTAL LENGTH
         B     PARM0150
PARM0140 DS    0H
         TMAPTR ID=VOLSER
         MVC   COMMVOL,4(R3)         COPY VOLSER
         LA    R2,10                 TOTAL LENGTH
PARM0150 DS    0H
         AR    R3,R2                 PLUS LENGTH
         SR    R4,R2                 MINUS LENGTH
         BNH   PARM0200              END OF PARMS
         CLI   0(R3),C' '            END OF PARMS?
         BE    PARM0200              YES
         CLI   0(R3),C','            DELIMITER?
         BNE   ERR0010               NO
         LA    R3,1(R3)              SKIP DELIMITER
         BCT   R4,PARM0020           PROCESS REMAINING PARMS
PARM0200 DS    0H
         CLI   COMMDEVT,C' '         DEVICE TYPE GIVEN?
         BNE   PARM9900              NO
         MVC   PRTDATA(EMSG99L),EMSG99
         BAL   R9,PRT0000            PRINT MESSAGE
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         B     PARM9900              AND EXIT
PRT0000  DS    0H
         MVI   PRTCMD,$PRTPRT        SET COMMAND
         LA    R1,PRTBLOK            PRINT MODULE INTERFACE BLOCK
         L     R15,APRT              PRINT MODULE ADDRESS
         BALR  R14,R15               LINK TO PRINT
         BR    R9                    RETURN
ERR0010  DS    0H
         MVC   PRTDATA(EMSG01L),EMSG01
         B     ERR1000               PRINT MESSAGE
ERR0020  DS    0H
         MVC   PRTDATA(EMSG02L),EMSG02
         B     ERR1000               PRINT MESSAGE
ERR0030  DS    0H
         MVC   PRTDATA(EMSG03L),EMSG03
         B     ERR1000               PRINT MESSAGE
ERR0040  DS    0H
         MVC   PRTDATA(EMSG04L),EMSG04
         B     ERR1000               PRINT MESSAGE
ERR0050  DS    0H
         MVC   PRTDATA(EMSG05L),EMSG05
         B     ERR1000               PRINT MESSAGE
ERR0060  DS    0H
         MVC   PRTDATA(EMSG06L),EMSG06
         B     ERR1000               PRINT MESSAGE
ERR0070  DS    0H
         MVC   PRTDATA(EMSG07L),EMSG07
ERR1000  DS    0H
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         BAL   R9,PRT0000            PRINT MESSAGE
* ------------------------------------------------------------------- *
*             EXIT                                                    *
* ------------------------------------------------------------------- *
PARM9900 DS    0H
         TMAPTR ID=EXIT              EXITING PRINT MODULE
         L     R13,4(R13)            RESTORE REGISTER 13
         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS
         SR    R15,R15               GIVE GOOD RETURN CODE
         BR    R14                   RETURN TO CALLER
PARMMVC  MVC   PRTDATA(0),2(R3)      MOVE EXECUTE STATEMENT PARMS
* ------------------------------------------------------------------ *
*                                                                    *
*              WORK AREAS                                            *
*                                                                    *
* ------------------------------------------------------------------ *
PARMSAVE DC    18F'0'                REGISTER SAVE AREA
H10      DC    H'10'                 CONSTANT
MAXPLEN  DC    Y(L'PRTDATA)          MAXIMIM PARM LENGTH
PARMFLAG DC    X'00'                 FLAGS/SWITCHES
$HEADING EQU   X'80'                 .. HEADING HAS BEEN PRINTED
NOMEM1   DC    C'NO MEM'             NO MEMBER STATEMENT KEYWORD
NOMEM2   DC    C'NO-MEM'             NO MEMBER STATEMENT KEYWORD
MAXLINES DC    C'MAXLINES='          PAGE LINE COUNT STATEMENT KEYWORD
FULLTAPE DC    C'FULLTAPE'           MAP FULL TAPE
TAPE1600 DC    C'1600'               1600 BPI 3420
TAPE6250 DC    C'6250'               6250 BPI 3420
TAPE3420 DC    C'3420'               6250 BPI 3420
TAPETAPE DC    C'TAPE'               6250 BPI 3420
TAPE3480 DC    C'3480'               3480
TAPECART DC    C'CART'               3480
COMPTIME DC    C'COMPTIME'           DATE AND TIME ASSEMBLED
ABEND    DC    C'ABEND'              ABEND AT EXIT
VOL      DC    C'VOL='               VOLSER PARAMETER KEYWORD
CTLSTMT  DC    CL80' '
CTLSTMTL EQU   *-CTLSTMT
HEADING  DS    0C
         DC    C'*'
         DC    29C'-'
         DC    CL20' CONTROL PARAMETERS '
         DC    29C'-'
         DC    C'*'
HEADINGL EQU   *-HEADING
MSG01    DC    C'>> PARAMETER LENGTH EXCEEDED 120, WILL BE TRUNCATED'
MSG01L   EQU   *-MSG01
MSG02    DC    C'''NO MEMBERS'' IS IN EFFECT'
MSG02L   EQU   *-MSG02
MSG03    DC    C'MAXLINES SET SUCCESSFULLY'
MSG03L   EQU   *-MSG03
MSG04    DC    C'FULL TAPE IN EFFECT'
MSG04L   EQU   *-MSG04
MSG05    DC    C'DEVICE REQUESTED IS A 3420 AT 1600BPI'
MSG05L   EQU   *-MSG05
MSG06    DC    C'DEVICE REQUESTED IS A 3420 AT 6250BPI'
MSG06L   EQU   *-MSG06
MSG07    DC    C'DEVICE REQUESTED IS A 3480'
MSG07L   EQU   *-MSG07
MSG08    DC    C'TMAPPARM COMPILE DATE:'
MSG08DTE DC    CL8' '
         DC    C' TIME:'
MSG08TME DC    CL5' '
MSG08L   EQU   *-MSG08
MSG09    DC    C'ABEND FLAG SET'
MSG09L   EQU   *-MSG09
EMSG01   DC    C'** INVALID CONTROL STATEMENT'
EMSG01L  EQU   *-EMSG01
EMSG02   DC    C'** ''NO MEMBERS'' HAS ALREADY BEEN REQUESTED'
EMSG02L  EQU   *-EMSG02
EMSG03   DC    C'** MAXLINES MUST BE 2 DIGITS OR LESS'
EMSG03L  EQU   *-EMSG03
EMSG04   DC    C'** NON-NUMERIC DIGIT'
EMSG04L  EQU   *-EMSG04
EMSG05   DC    C'** DEVICE TYPE IS DUPLICATELY SPECIFIED'
EMSG05L  EQU   *-EMSG05
EMSG06   DC    C'** MAXLINES MUST SPECIFY A VALUE OF 5 OR GREATER'
EMSG06L  EQU   *-EMSG06
EMSG07   DC    C'** ABEND FLAG ALREADY REQUESTED'
EMSG07L  EQU   *-EMSG07
EMSG99   DC    C'** DEVICE TYPE WAS NOT SPECIFIED'
EMSG99L  EQU   *-EMSG99
* ------------------------------------------------------------------ *
*                                                                    *
*              PRINT MODULE INTERFACE BLOCK                          *
*                                                                    *
* ------------------------------------------------------------------ *
PRTBLOK  PRTBLOK  TYPE=CSECT
         SPACE 2
* ------------------------------------------------------------------ *
*                                                                    *
*              COMMON MODULE                                         *
*                                                                    *
* ------------------------------------------------------------------ *
TMAPCOMM TMAPCOMM TYPE=DSECT
* ------------------------------------------------------------------ *
*                                                                    *
*              TAPE I/O MODULE INTERFACE BLOCK                       *
*                                                                    *
* ------------------------------------------------------------------ *
TAPEBLOK TAPEBLOK TYPE=DSECT
         SPACE 2
* ------------------------------------------------------------------ *
*                                                                    *
*              EQUATES                                               *
*                                                                    *
* ------------------------------------------------------------------ *
         COPY REGEQU
         IEFZB4D0
         IEFZB4D2
         END  TMAPPARM
./ ADD NAME=TMAPPRT
          TITLE 'TMAPPRT - PRINTING MODULE'
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: TMAPPRT - Printing module                             *
*                                                                     *
*  Function:                                                          *
*   TAPEMAP has only 1 print output DD.  This module "owns" the print *
*   DCB and centralizes all printing.  By having a separate print     *
*   module, all other modules may use the same interface and the line *
*   counting/heading/spacing is not duplicated.  Any module except    *
*   the trace code in TMAPCOMM may call this module.                  *
*                                                                     *
*   The interface block is PRTBLOK.                                   *
*                                                                     *
* ------------------------------------------------------------------- *
TMAPPRT  CSECT
         USING TMAPPRT,R12
         USING TMAPCOMM,R11
         USING PRTBLOK,R10           DEFINE PARAMETER BLOCK BASE
         STM   R14,R12,12(R13)       SAVE REGS
         LR    R12,R15               SET BASE REG
         B     PRT0000               SKIP EYECATCHER
         DC    CL8'TMAPPRT'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
PRT0000  DS    0H
         LA    R15,PRTSAVE           OUR SAVE AREA ADDRESS
         ST    R13,4(R15)            CHAIN CALLER'S SAVE AREA TO OURS
         ST    R15,8(R13)            CHAIN OUR SAVE AREA TO CALLER'S
         LR    R13,R15               SET SAVE AREA ADDRESS
         LR    R10,R1                COPY PARM BLOCK ADDRESS
         TMAPTR ID=ENTRY,            TRACE PRINT MODULE ENTRY          +
               DATA1=PRTCMD          .. TRACE COMMAND
         CLI   PRTCMD,$PRTCLS        CLOSE FILES?
         BE    PRT0300               YES
         TM    PRTFLAG,$PRTOPEN      IS PRINT FILE OPEN?
         BO    PRT0010               YES
         TMAPTR ID=PRTOPEN           TRACE PRINT DCB OPENING
         OPEN  (SYSPRINT,OUTPUT)     OPEN SYSPRINT
         OI    PRTFLAG,$PRTOPEN      SET 'OPEN' FLAG
PRT0010  DS    0H
         CLI   PRTCMD,$PRTHEAD       PRINT HEADING?
         BE    PRT0150               YES
         CLI   PRTCMD,$PRTPRT        PRINT DATA?
         BE    PRT0070               YES
         CLI   PRTCMD,$PRTMEM        NEW MEMBER?
         BE    PRT0020               YES
         ABEND ABEND004,DUMP,,USER   ABEND
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*             PROCESS MEMBERS                                         *
*                                                                     *
*   Various TAPEMAP file processors will "watch" for PDS's and will   *
*   print the members.  Members will be added to the current line     *
*   until the line is full.  When the ending tapemark is read,        *
*   TMAPMAIN sets the $COMMLST flag in COMMFLAG and calls the current *
*   file processor to allow it to do any end-of-file finish-up, at    *
*   this time those file processors that print members will call this *
*   module to allow the last line (which may not be full) to be       *
*   printed.  Member spacing and number of members per line is        *
*   determined by the file processor.  Field COMMMEM# is set to the   *
*   number of members per line and field COMMMEML is set to the       *
*   length of each member's output length.                            *
*                                                                     *
* ------------------------------------------------------------------- *
PRT0020  DS    0H
         TMAPTR ID=MEMBER,           ADD A MEMBER TO CURRENT LINE      +
               DATA1=PRTDATA         .. SAVE MEMBER NAME IN TRACE
         OC    MEMNBR,MEMNBR         MEMBERS AVAILABLE = ZERO?
         BNZ   PRT0030               NO
         MVC   MEMNBR+2(2),COMMMEM#  INITIALIZE NUMBER AVAILABLE
PRT0030  DS    0H
         LM    R2,R3,MEMINFO         LOAD MEMBER SPACING INFO
         TM    COMMFLAG,$COMMLST     PRINT LAST LINE?
         BO    PRT0050               YES
         LH    R1,COMMMEML           MEMBER OUTPUT LENGTH
         BCTR  R1,0                  MINUS 1 FOR EXECUTE
         EX    R1,MEMMVC             MOVE DATA TO "MEMBER" LINE
         LA    R2,1(R1,R2)           PLUS OUTPUT LENGTH
         BCT   R3,PRT0040            ACCOUNT FOR USED MEMBER
         TMAPTR ID=MEMFULL           MEMBER LINE IS FULL
         B     PRT0060               FORCE PRINT
MEMMVC   MVC   0(0,R2),PRTDATA       MOVE MEMBER NAME TO PRINT AREA
PRT0040  DS    0H
         STM   R2,R3,MEMINFO         SAVE CURRENT ADDR AND # AVAILABLE
         B     PRT9900               EXIT
PRT0050  DS    0H
         TMAPTR ID=LASTLINE
         XC    MEMNBR,MEMNBR         RESET NUMBER AVAILABLE
         CLC   MEMLINE,MEMLINE-1     ANYTHING IN PRINT LINE?
         BE    PRT9900               NO
PRT0060  DS    0H
         MVC   PRTDATA(MEMLINEL),MEMLINE
         MVC   MEMLINE,MEMLINE-1     CLEAR MEMBER LINE
         LA    R2,MEMLINE            FIRST MEMBER ADDRESS
         ST    R2,MEMADDR            RESET MEMBER ADDRESS
         TM    COMMFLAG,$COMMLST     'CLEAN-UP' IN PROGRESS?
         BO    PRT0070               YES
         MVC   MEMNBR+2(2),COMMMEM#  RESET NUMBER AVAILABLE
* ------------------------------------------------------------------- *
*                                                                     *
*   Either the command was $CMDPRT or the current line for $CMDMEM    *
*   is full.                                                          *
*                                                                     *
* ------------------------------------------------------------------- *
PRT0070  DS    0H
         ZAP   LINEWORK,P1           SET WORK TO 1
         CLI   PRTCC,C' '            SINGLE SPACE?
         BE    PRT0080               YES
         AP    LINEWORK,P1           ADD 1 TO WORK
         CLI   PRTCC,C'0'            DOUBLE SPACE
         BE    PRT0080               YES
         AP    LINEWORK,P1           ADD 1 TO WORK
PRT0080  DS    0H
         AP    LINEWORK,LINECT       NEW LINE COUNT
         CP    LINEWORK,COMMMAXL     WILL PAGE OVERFLOW?
         BNH   PRT0090               NO
         TMAPTR ID=PAGEFULL          PAGE IS FULL
         BAL   R9,PRT0200            PRINT HEADING
PRT0090  DS    0H
         TMAPTR ID=PRINT             PRINTING DATA
         PUT   SYSPRINT,PRTCC        PRINT
         AP    LINECT,P1             ADD 1 TO LINE COUNT
         CLI   PRTCC,C' '            SINGLE SPACE?
         BE    PRT0100               YES
         AP    LINECT,P1             ADD 1 TO LINE COUNT
         CLI   PRTCC,C'0'            DOUBLE SPACE
         BE    PRT0100               YES
         AP    LINECT,P1             ADD 1 TO LINE COUNT
PRT0100  DS    0H
         MVI   PRTDATA,C' '          INTIALIZE PRINT
         MVC   PRTDATA+1(L'PRTDATA-1),PRTDATA
         B     PRT9900               EXIT
* ------------------------------------------------------------------- *
*             FORCED HEADINGS                                         *
* ------------------------------------------------------------------- *
PRT0150  DS    0H
         TMAPTR ID=FORCEDHD          FORCED HEADING
         BAL   R9,PRT0200            PRINT HEADING
         B     PRT9900               AND EXIT
* ------------------------------------------------------------------- *
*             PRINT HEADING                                           *
* ------------------------------------------------------------------- *
PRT0200  DS    0H
         TMAPTR ID=PRTHEAD           PRINTING HEADING
         AP    PAGECT,P1             ADD 1 TO PAGE COUNT
         MVC   HEADPAGE,PAGEEDWD     SET EDIT WORD
         ED    HEADPAGE,PAGECT       EDIT PAGE NUMBER
         PUT   SYSPRINT,HEADING      WRITE HEADING
         ZAP   LINECT,P1             SET LINE COUNT TO 1
         CLI   COMMSUBH,C' '         BLANK?
         BNE   PRT0210               NO
         CLC   COMMSUBH+1(L'COMMSUBH-1),COMMSUBH
         BER   R9                    NO SUBHEADING
PRT0210  DS    0H
         MVC   SUBHWORK,COMMSUBH     COPY SUBHEADING
         PUT   SYSPRINT,SUBHCC       PRINT SUBHEADING
         AP    LINECT,P1             ADD 1 TO LINE COUNT
         BR    R9
* ------------------------------------------------------------------- *
*             CLOSE PRINTER                                           *
* ------------------------------------------------------------------- *
PRT0300  DS    0H
         TMAPTR ID=PRTCLOSE          CLOSING PRINT DCB
         TM    PRTFLAG,$PRTOPEN      PRINTER OPEN?
         BNO   PRT9900               NO.. EXIT
         CLOSE SYSPRINT              CLOSE PRINTER
         NI    PRTFLAG,255-$PRTOPEN  TURN OPEN FLAG OFF
* ------------------------------------------------------------------- *
*             EXIT                                                    *
* ------------------------------------------------------------------- *
PRT9900  DS    0H
         TMAPTR ID=EXIT              EXITING PRINT MODULE
         L     R13,4(R13)            RESTORE REGISTER 13
         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS
         SR    R15,R15               GIVE GOOD RETURN CODE
         BR    R14                   RETURN TO CALLER
* ------------------------------------------------------------------ *
*                                                                    *
*              WORK AREAS                                            *
*                                                                    *
* ------------------------------------------------------------------ *
PRTSAVE  DC    18F'0'                REGISTER SAVE AREA
         SPACE 1
* ------------------------------------------------------------------- *
*                                                                     *
*   When the command is $PRTMEM, an entry is added to the current     *
*   MEMLINE.  When MEMLINE is full, the line is printed and the       *
*   the control data is reset to start another MEMLINE.               *
*                                                                     *
*   The "file processor" modules set COMMMEML to the length of each   *
*   "member" in the print line and COMMMEM# to the number to print    *
*   per line.                                                         *
*                                                                     *
* ------------------------------------------------------------------- *
MEMINFO  DS    0A                    MEMBER SPACE INFO
MEMADDR  DC    A(MEMLINE)            .. CURRENT ADDRESS
MEMNBR   DC    A(0)                  .. NUMBER AVAILABLE
* ------------------------------------------------------------------- *
         SPACE 1
PRTFLAG  DC    X'00'
$PRTOPEN EQU   X'80'
P1       DC    P'1'                  CONSTANT
LINECT   DC    PL3'0'                LINE COUNT
LINEWORK DC    PL3'0'                LINES ADDED BY THIS I/O
PAGECT   DC    PL3'0'                PAGE COUNT
PAGEEDWD DC    X'402020202120'       CONSTANT
HEADING  DS    0C
         DC    CL01'1'
         DC    CL47' '
         DC    CL15'TAPEMAP UTILITY'
         DC    CL48' '
         DC    CL04'PAGE'
HEADPAGE DC    CL06' '
SUBHCC   DC    C' '
SUBHWORK DC    CL120' '
         SPACE 1
         DC    C' '
MEMLINE  DC    CL120' '
MEMLINEL EQU   *-MEMLINE
         SPACE 1
SYSPRINT DCB   DSORG=PS,             PRINTER DCB                       +
               RECFM=FBA,            .. RECORD FORMAT                  +
               LRECL=121,            .. RECORD LENGTH                  +
               DDNAME=SYSPRINT,      .. DD NAME                        +
               MACRF=PM              .. MACRO FORMAT
* ------------------------------------------------------------------ *
*                                                                    *
*              PRINT MODULE INTERFACE BLOCK                          *
*                                                                    *
* ------------------------------------------------------------------ *
PRTBLOK  PRTBLOK  TYPE=DSECT
         SPACE 2
* ------------------------------------------------------------------ *
*                                                                    *
*              COMMON DATA MAP                                       *
*                                                                    *
* ------------------------------------------------------------------ *
TMAPCOMM TMAPCOMM TYPE=DSECT
* ------------------------------------------------------------------ *
*                                                                    *
*              EQUATES                                               *
*                                                                    *
* ------------------------------------------------------------------ *
         COPY REGEQU
         END  TMAPPRT
./ ADD NAME=TMAPUPDT
          TITLE 'TMAPUPDT - IEBUPDTE FILE PROCESSOR'
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: TMAPUPDT  - IEBUPDTE file processor                   *
*                                                                     *
*  Function:                                                          *
*     This module prints the IEBUPDTE function (add, change, replace) *
*     and the member name(s).                                         *
*                                                                     *
* ------------------------------------------------------------------- *
TMAPUPDT CSECT
         USING TMAPUPDT,R12
         USING TMAPCOMM,R11
         STM   R14,R12,12(R13)     SAVE REGS
         LR    R12,R15             SET BASE REG
         B     UPDT0000            SKIP EYECATCHER
         DC    CL8'TMAPUPDT'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
UPDT0000 DS    0H
         LA    R15,UPDTSAVE        OUR SAVE AREA ADDRESS
         ST    R13,4(R15)          CHAIN CALLER'S SAVE AREA TO OURS
         ST    R15,8(R13)          CHAIN OUR SAVE AREA TO CALLER'S
         LR    R13,R15             SET SAVE AREA ADDRESS
         L     R10,COMMRECA        CURRENT RECORD'S ADDRESS
         TMAPTR ID=ENTRY,          TRACE ENTRY                         +
               DATA1=COMMFLAG
         TM    COMMFLAG,$COMMLST   'CLEAN-UP' CALL?
         BO    UPDT0500            YES
         TM    COMMFLAG,$COMMINQ   INQUIRE CALL?
         BNO   UPDT0100            NO
         TMAPTR ID=INQCALL
         TM    COMMFLAG,$COMMSUB   SUB-FUNCTION?
         BO    UPDT0010            YES
* ------------------------------------------------------------------- *
*     I AM ASSUMING 80-BYTE CONTROL STATEMENTS                        *
* ------------------------------------------------------------------- *
         SR    R2,R2               CLEAR REGISTER
         SR    R3,R3               CLEAR REGISTER
         ICM   R3,3,COMMRECL       CURRENT RECORD'S LENGTH
         D     R2,F80              DIVIDE BY 80
         LTR   R2,R2               REMAINDER = ZERO?
         BNZ   EXIT0008            NO..
         BAL   R9,UPDT0200         FIND UPDTE CONTROL STATEMENT
         TM    UPDTFLAG,$CTLSTMT   CONTROL STATEMENT FOUND?
         BNO   EXIT0008            NO... SET RETURN CODE TO 8
         MVC   PRTDATA(HEADINGL),HEADING
         BAL   R9,PRT0000          PRINT HEADING
UPDT0010 DS    0H
         TM    COMMFLAG,$COMMNOM   NO-MEMBERS?
         BO    EXIT0000            SKIP SUB-HEADING
         MVC   COMMSUBH(SUBHEADL),SUBHEAD
         MVC   PRTDATA(SUBHEADL),SUBHEAD
         BAL   R9,PRT0000          PRINT SUBHEADING
         MVC   COMMMEML,MEML       SET OUTPUT LENGTH PER MEMBER
         MVC   COMMMEM#,MEM#       SET NUMBER PER LINE
         B     EXIT0000            EXIT WITH RETURN CODE ZERO
*---------------------------------------------------------------------*
*                                                                     *
*     PROCESS CONTROL STATEMENTS                                      *
*                                                                     *
*---------------------------------------------------------------------*
UPDT0100 DS    0H
         TMAPTR ID=NEWBLOCK
         TM    UPDTFLAG,$ERROR     ERROR OCCURRED?
         BO    EXIT0000            YES, EXIT
         TM    COMMFLAG,$COMMNOM   NO-MEMBERS?
         BO    EXIT0000            SKIP
         TM    COMMFLAG,$COMMSUB   SUB-FUNCTION CALL?
         BO    UPDT0110            YES
         SR    R2,R2               CLEAR REGISTER
         SR    R3,R3               CLEAR REGISTER
         ICM   R3,3,COMMRECL       CURRENT RECORD'S LENGTH
         D     R2,F80              DIVIDE BY 80
         LTR   R2,R2               REMAINDER = ZERO?
         BNZ   UPDT0400            NO... ERROR
         B     UPDT0120            PROCESS ALL RECORDS
*---------------------------------------------------------------------*
*                                                                     *
*     PROCESS RECORDS AS A SUB-FUNCTION                               *
*                                                                     *
*  Some files have iebupdte control statements imbedded in them       *
*  (like cbt compressed data sets).  This module is called as a       *
*  sub-part of the actual file processor.  In sub-function mode,      *
*  this module will receive only 1 record at a time.                  *
*                                                                     *
*---------------------------------------------------------------------*
UPDT0110 DS    0H
         LA    R3,1                SET NUMBER OF RECORDS TO 1
* ------------------------------------------------------------------- *
*                                                                     *
*      PROCESS EACH RECORD OF THE BLOCK                               *
*                                                                     *
* ------------------------------------------------------------------- *
UPDT0120 DS    0H
         BAL   R9,UPDT0200         FIND UPDTE CONTROL STATEMENTS
         B     UPDT0140            CHECK RESULTS
UPDT0130 DS    0H
         BAL   R9,UPDT0210         RESUME AT NEXT CONTROL STATEMENT
UPDT0140 DS    0H
         TM    UPDTFLAG,$CTLSTMT   CONTROL STATEMENT FOUND?
         BNO   EXIT0000            NO.. EXIT
         MVC   PRTDATA(UPDTMSGL),UPDTMSG
         MVI   PRTCMD,$PRTMEM      SET COMMAND (ADD A MEMBER)
         LA    R1,PRTBLOK          PRINT MODULE INTERFACE
         L     R15,APRT            PRINT MODULE ENTRY POINT
         BALR  R14,R15             LINK TO PRINT MODULE
         MVC   UPDTMSG(UPDTMSGL),UPDTMSG-1   RESET TO BLANKS
         LTR   R3,R3               ANY MORE STATEMENTS TO SCAN?
         BNZ   UPDT0130            YES, CONTINUE
         B     EXIT0000            OTHERWISE EXIT
*---------------------------------------------------------------------*
*                                                                     *
*              FIND IEBUPDTE CONTROL STATMENTS                        *
*                                                                     *
*           R2  WORK REGISTER                                         *
*           R3  NUMBER OF 80-BYTE RECORDS TO SCAN                     *
*           R4  WORK REGISTER                                         *
*           R9  RETURN ADDRESS                                        *
*           R10 FIRST STATEMENT TO SCAN                               *
*           R15 WORK REGISTER                                         *
*                                                                     *
*---------------------------------------------------------------------*
UPDT0200 DS    0H
         NI    UPDTFLAG,255-$CTLSTMT
         CLC   =C'./ ',0(R10)      IEBUPDTE CONTROL ID?
         BE    UPDT0220            YES
         CLC   =C'>< ',0(R10)      NESTED CONTROL ID?
         BE    UPDT0220            YES
UPDT0210 DS    0H
         LA    R10,80(R10)         NEXT STATEMENT
         BCT   R3,UPDT0200         LOOP
         BR    R9                  ALL STATEMENTS PROCESSED
UPDT0220 DS    0H
         LA    R2,69               COLUMNS LEFT ON THIS STATEMENT
         LA    R4,3(R10)           SKIP CONTROL ID
         BAL   R15,UPDT0340        FIND FIRST NON-BLANK
         LTR   R4,R4               NON-BLANK FOUND?
         BZ    UPDT0210            NO
         CLC   ADD,0(R4)           ADD STATEMENT?
         BE    UPDT0230            YES
         CLC   CHANGE,0(R4)        CHANGE STATEMENT?
         BE    UPDT0240            YES
         CLC   DELETE,0(R4)        DELETE STATEMENT?
         BE    UPDT0250            YES
         CLC   REPL,0(R4)          REPLACE STATEMENT?
         BE    UPDT0260            YES
         CLC   REPRO,0(R4)         REPRO STATMENT?
         BE    UPDT0270            YES
         B     UPDT0210            NEXT STATEMENT
UPDT0230 DS    0H
         MVC   UPDTCMD(L'ADD),ADD  SET FUNCTION
         LA    R4,4(R4)            SKIP 'ADD '
         SH    R2,H4               MINUS LENGTH OF 'ADD '
         B     UPDT0280            CONTINUE
UPDT0240 DS    0H
         MVC   UPDTCMD(L'CHANGE),CHANGE
         LA    R4,7(R4)            SKIP 'CHANGE '
         SH    R2,H7               MINUS LENGTH OF 'CHANGE '
         B     UPDT0280            CONTINUE
UPDT0250 DS    0H
         MVC   UPDTCMD(L'DELETE),DELETE
         LA    R4,7(R4)            SKIP 'DELETE '
         SH    R2,H7               MINUS LENGTH OF 'DELETE '
         B     UPDT0280            CONTINUE
UPDT0260 DS    0H
         MVC   UPDTCMD(L'REPL),REPL
         LA    R4,5(R4)            SKIP 'REPL '
         SH    R2,H5               MINUS LENGTH OF 'REPL '
         B     UPDT0280            CONTINUE
UPDT0270 DS    0H
         MVC   UPDTCMD(L'REPRO),REPRO
         LA    R4,6(R4)            SKIP 'REPRO '
         SH    R2,H6               MINUS LENGTH OF 'REPRO '
UPDT0280 DS    0H
         CH    R2,H6               ENOUGH DATA FOR NAME=X ?
         BNH   UPDT0210            NO
         BAL   R15,UPDT0340        FIND NEXT NON-BLANK
         LTR   R4,R4               NON-BLANK FOUND?
         BZ    UPDT0210            NO
UPDT0290 DS    0H
         CLC   =C'NAME=',0(R4)     NAME= PARAMETER?
         BE    UPDT0300            YES
         LA    R4,1(R4)            NEXT OVER
         BCT   R2,UPDT0290         LOOP
         B     UPDT0210            NAME= NOT FOUND
UPDT0300 DS    0H
         LA    R4,5(R4)            SKIP 'NAME='
         SH    R2,H5               MINUS LENGTH OF 'NAME='
         BNH   UPDT0210            NAME NOT FOUND
         CH    R2,H8               MORE THAN 8 LEFT?
         BNH   UPDT0310            NO
         LH    R2,H8               LIMIT LENGTH TO 8
UPDT0310 DS    0H
         LA    R1,UPDTNAME
UPDT0320 DS    0H
         CLI   0(R4),C' '          END OF NAME?
         BE    UPDT0330            YES
         CLI   0(R4),C','          END OF NAME?
         BE    UPDT0330            YES
         MVC   0(1,R1),0(R4)       MOVE TO NAME
         LA    R1,1(R1)            NEXT
         LA    R4,1(R4)            NEXT
         BCT   R2,UPDT0320         LOOP
UPDT0330 DS    0H
         OI    UPDTFLAG,$CTLSTMT   SET CONTROL STATEMENT FOUND FLAG
         BR    R9                  RETURN
UPDT0340 DS    0H
         CLI   0(R4),C' '          BLANK?
         BHR   R15                 NO.. RETURN
         LA    R4,1(R4)            NEXT BYTE
         BCT   R2,UPDT0340         LOOP
         SR    R4,R4               NOT FOUND
         BR    R15                 RETURN
*---------------------------------------------------------------------*
*                                                                     *
*              SERIOUS ERROR CONDITIONS                               *
*                                                                     *
*---------------------------------------------------------------------*
UPDT0400 DS    0H
         TMAPTR ID=INVBLKSZ,       BLOCK SIZE IS NOT A MULTIPLE OF 80  +
               DATA1=COMMRECL      .. INCLUDE BLOCK SIZE IN TRACE
         OI    UPDTFLAG,$ERROR     SET ERROR FLAG
         MVC   PRTDATA(MSG01L),MSG01
         BAL   R9,PRT0000          PRINT MESSAGE
         B     EXIT0000            AND EXIT
*---------------------------------------------------------------------*
*                                                                     *
*              CLEAN-UP                                               *
*                                                                     *
*---------------------------------------------------------------------*
UPDT0500 DS    0H
         TMAPTR ID=CLEAN-UP
         MVI   PRTCMD,$PRTMEM      MEMBER PRINT
         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK
         L     R15,APRT            PRINT MODULE ENTRY POINT
         BALR  R14,R15             LINK TO PRINT MODULE
         B     EXIT0000            EXIT
*---------------------------------------------------------------------*
*                                                                     *
*              PRINTING                                               *
*                                                                     *
*---------------------------------------------------------------------*
PRT0000  DS    0H
         MVI   PRTCMD,$PRTPRT      REQUEST PRINT
         MVI   PRTCC,C' '          SINGLE SPACE
         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK
         L     R15,APRT            PRINT MODULE ENTRY POINT
         BALR  R14,R15             LINK TO PRINT MODULE
         BR    R9                  RETURN
* ------------------------------------------------------------------- *
*                                                                     *
*             EXIT                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS   0H
         TMAPTR ID=EXIT0000          EXITING, RC=0
         SR    R15,R15               SET RETURN CODE TO ZERO
         B     UPDT9900              AND RETURN
EXIT0008 DS    0H
         TMAPTR ID=EXIT0008          EXITING, RC=8
         LA    R15,8                 SET RETURN CODE TO 8
UPDT9900 DS    0H
         L     R13,4(R13)            RESTORE REGISTER 13
         L     R14,12(R13)           RESTORE REGISTER 14
         LM    R0,R12,20(R13)        RESTORE ALL OTHER REGISTERS
         BR    R14                   RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
*              WORK AREAS                                             *
*                                                                     *
* ------------------------------------------------------------------- *
UPDTSAVE DC    18F'0'                REGISTER SAVE AREA
F80      DC    F'80'                 CONSTANT
H4       DC    H'4'                  CONSTANT
H5       DC    H'5'                  CONSTANT
H6       DC    H'6'                  CONSTANT
H7       DC    H'7'                  CONSTANT
H8       DC    H'8'                  CONSTANT
MEML     DC    Y(UPDTMSGL)           OUTPUT LENGTH PER MEMBER
MEM#     DC    Y(120/UPDTMSGL)       OUTPUT MEMBERS PER LINE
UPDTFLAG DC    X'00'                 FLAGS
$ERROR   EQU   X'80'                 .. SERIOUS ERROR HAS OCCURRED
$CTLSTMT EQU   X'40'                 .. UPDTE STATEMENT FOUND
BLANKS   DC    CL08' '               CONSTANT
ADD      DC    C'ADD '               CONSTANT
CHANGE   DC    C'CHANGE '            CONSTANT
DELETE   DC    C'DELETE '            CONSTANT
REPL     DC    C'REPL '              CONSTANT
REPRO    DC    C'REPRO '             CONSTANT
HEADING  DC    C'THIS DATASET CONTAINS IEBUPDTE CONTROL STATEMENTS'
HEADINGL EQU   *-HEADING
SUBHEAD  DS    0C
         DC    CL08'FUNCTION'
         DC    CL01' '
         DC    CL08'ELEMENT'
         DC    CL03' '
         DC    CL08'FUNCTION'
         DC    CL01' '
         DC    CL08'ELEMENT'
         DC    CL03' '
         DC    CL08'FUNCTION'
         DC    CL01' '
         DC    CL08'ELEMENT'
         DC    CL03' '
         DC    CL08'FUNCTION'
         DC    CL01' '
         DC    CL08'ELEMENT'
         DC    CL03' '
         DC    CL08'FUNCTION'
         DC    CL01' '
         DC    CL08'ELEMENT'
         DC    CL03' '
         DC    CL08'FUNCTION'
         DC    CL01' '
         DC    CL08'ELEMENT'
         DC    CL03' '
SUBHEADL EQU   *-SUBHEAD
         DC    C' '
UPDTMSG  DS    0C
UPDTCMD  DC    CL08' '               UPDTE FUNCTION (ADD, CHANGE, REPL)
         DC    CL01' '
UPDTNAME DC    CL08' '               ELEMENT'S NAME
         DC    CL03' '
UPDTMSGL EQU   *-UPDTMSG
MSG01    DC    C'*** BLOCK FOUND WITH LENGTH NOT A MULTIPLE OF 80, REMA+
               INDER OF FILE WILL BE BYPASSED'
MSG01L   EQU   *-MSG01
* ------------------------------------------------------------------- *
*                                                                     *
*              PRINT MODULE INTERFACE BLOCK                           *
*                                                                     *
* ------------------------------------------------------------------- *
PRTBLOK  PRTBLOK  TYPE=CSECT
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*              LITERALS                                               *
*                                                                     *
* ------------------------------------------------------------------- *
         LTORG
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*              COMMON DATA MAP                                        *
*                                                                     *
* ------------------------------------------------------------------- *
TMAPCOMM TMAPCOMM TYPE=DSECT
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*              EQUATES                                                *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY REGEQU
         END  TMAPUPDT
