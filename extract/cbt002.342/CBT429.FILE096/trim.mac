TRIM     PLIARRV CSECT=ONLY,COPYRT=(1982,1984)
TRIM     TITLE   'PL/1 STRING TRIM SUBROUTINE'
         SPACE   1
***********************************************************************
*                    TRIM  -  ASSEMBLER SUBROUTINE                    *
*                                                                     *
*  FUNCTION - TRIMS OFF PRECEDING AND TRAILING BLANKS (HEX'40') AND/OR*
*    NULLS (HEX'00') FROM A CHARACTER ARGUMENT FOR A PL/1 PROCEDURE.  *
*    THIS ROUTINE MUST NOT BE DECLARED AS "OPTIONS(ASM)" AS IT        *
*    USES THE PL/1 STRING LOCATOR/DESCRIPTORS FOR THE ARGUMENTS       *
*    PASSED TO DETERMINE THE STRING TYPE (FIXED OR VARYING LENGTH).   *
*                                                                     *
*  THE ADVANTAGE TO USING THIS SUBROUTINE IS THAT STRING LENGTHS OF   *
*    UP TO 32767 CAN BE ACCOMODATED FOR THE RETURN FIELD.  ALSO, IT   *
*    IS MORE EFFICIENT THAN THE CORRESPONDING PL/1 ROUTINE.           *
*                                                                     *
*  USE: (IN A PL/1 PROCEDURE)                                         *
*       USE THIS (WHERE THE LENGTH OF THE RETURN FIELD MAY VARY):     *
*    DCL TRIM ENTRY(*,CHAR(*) VAR);                                   *
*         .                                                           *
*         .                                                           *
*         .                                                           *
*   CALL TRIM(STRING1,STRING2);  /* STRING1 CAN BE EITHER A FIXED  */ *
*                                /* OR VARYING LENGTH CHAR. STRING,*/ *
*                                /* STRING2 MUST BE VARYING, BUT   */ *
*                                /* CAN BE IDENTICAL TO STRING1.   */ *
*       USE THIS (WHERE THE MAXIMUM LENGTH OF THE RETURN FIELD IS     *
*         KNOWN TO BE "MAXLEN"):                                      *
*   DCL TRIM ENTRY(*) RETURNS(CHAR("MAXLEN") VAR);                    *
*         .                                                           *
*         .                                                           *
*         .                                                           *
*   STRING2 = TRIM(STRING1);    /* STRING1 AND STRING2 AS ABOVE */    *
*                                                                     *
*                                                                     *
*  NOTE:  THE STRING PASSED MUST BE A CHARACTER STRING, AND CAN       *
*    BE DECLARED (REPLACE THE "*" WITH EITHER "CHAR(*)" OR            *
*    "CHAR(*) VAR") IF DESIRED.                                       *
*                                                                     *
*  THE SUBROUTINE CAN ONLY BE USED IN ONE OF THE MANNERS SHOWN ABOVE  *
*    IN ANY GIVEN PL/1 PROCEDURE OR BEGIN BLOCK.  TO GET AROUND THIS, *
*    TWO ADDITIONAL ENTRY POINTS ("TRIM1" AND "TRIM2") ARE DEFINED,   *
*    AND MAY BE USED AS ABOVE.  IN PL/1 ERROR MESSAGES, HOWEVER,      *
*    THE ENTRY POINT WILL BE GIVEN AS "TRIM", REGARDLESS OF THE ALIAS *
*    USED.                                                            *
*                                                                     *
*  THE ENTRY POINT MUST NOT BE DECLARED AS AN ASSEMBLER ENTRY POINT   *
*    (I.E., DO NOT USE "OPTIONS(ASM)" OR "OPTIONS(ASSEMBLER)").       *
*                                                                     *
* MACROS:                                                             *
*   PLIARRV, PLIRETN, EQUREGS.                                        *
*                                                                     *
* REGISTER USAGE:                                                     *
*   R0, R1 - GENERAL WORK REGISTERS USED IN PROLOGUE CODE ONLY.       *
*   R2 - NOT USED.                                                    *
*   R3 - BASE REGISTER, ALWAYS POINTS TO ENTRY POINT "TRIM".          *
*   R4 - POINTS TO SOURCE STRING LOCATOR/DESCRIPTOR.                  *
*   R5 - POINTS TO DESTINATION STRING LOCATOR/DESCRIPTOR.             *
*   R6 - POINTS TO FIRST CHARACTER (OR FIRST NONBLANK) IN SOURCE      *
*        STRING.                                                      *
*   R7 - CONTAINS THE NUMBER OF CHARACTERS BETWEEN THE FIRST AND LAST *
*        NONBLANK CHARACTERS IN THE SOURCE STRING, INCLUSIVE.         *
*   R8 - POINTS TO START OF DESTINATION STRING.                       *
*   R9 - LENGTH OF DESTINATION STRING.                                *
*   R10 - CONSTANT 1 FOR LOOP.                                        *
*   R11 - POINTS TO LAST NONBLANK CHARACTER IN SOURCE STRING.         *
*   R12 - PL/1 USE (NOT CHANGED BY THIS ROUTINE).                     *
*   R13 - POINTS TO THE DSA                                           *
*   R14 - LINK REGISTER.                                              *
*   R15 - LINK REGISTER.                                              *
*                                                                     *
* THIS ROUTINE WAS WRITTEN ON 01/08/82 BY BILL WARRINER, VETERINARY   *
*   DIAGNOSTIC LABORATORY, ROOM D-104, UMC CAMPUS (882-6811).         *
* MODIFIED 02/05/82 TO ALLOW UNALIGNED CHARACTER STRINGS TO BE        *
*   HANDLED.                                                          *
* MODIFIED 03/12/84 TO USE MVCL INSTRUCTION INSTEAD OF BAL TO         *
*   IELCGMV SUBROUTINE.                                               *
*                                                                     *
***********************************************************************
         EJECT
TRIM     PLIARRV CSECT=YES,MULTEP=NO,ALIAS=(TRIM1,TRIM2),DSASIZE=96
         SPACE 1
*        PROLOGUE DONE (DSA SET UP, BASE REGISTER SET, ETC.)
         SPACE 1
         USING TRIM,R3                   ESTABLISH ADDRESSABILITY
         EJECT
         L     R4,0(R1)                  @ OF L/D FOR SOURCE STRING
         L     R5,4(R1)                  @ OF L/D FOR DEST. STRING
         L     R6,0(R4)                  ADDRESS OF SOURCE STRING.
         LH    R11,4(R4)                 SET COUNTER TO STRING LENGTH.
         TM    6(R4),X'80'               IS STRING VARYING?
         BZ    SRCNTVAR                  BRANCH IF NOT.
         MVC   88(2,R13),0(R6)           USE CURRENT LENGTH (COPY IN
         LH    R11,88(R13)               CASE NOT ALIGNED).
         LA    R6,2(R6)                  BUMP PAST LENGTH FIELD.
SRCNTVAR LTR   R11,R11                   ANY CHARS. IN SOURCE?
         BNP   RETN0                     RETURN NULL STRING IF NO.
         EJECT
         LA    R10,1                     SET UP LOOP #1.
         AR    R11,R6                    CALCULATE ADDRESS OF LAST
         BCTR  R11,0                     CHAR. IN SOURCE (IN R11).
*                                        CALCULATION: # OF CHARS. +
*                                        @(FIRST CHAR.) - 1 =
*                                        @(LAST CHAR.)
         SPACE 2
*** FIRST LOOP - FIND FIRST NONBLANK CHARACTER IN SOURCE STRING.    ***
*** IN THIS LOOP, R6 POINTS AT THE CURRENT CHARACTER, R10 IS THE    ***
*** INCREMENT REGISTER (SET TO 1), AND R11 IS THE LIMIT REGISTER.   ***
*** FUNCTION IS TO FIND THE FIRST NONBLANK, AND SET ITS ADDRESS     ***
*** IN REGISTER R6.                                                 ***
         SPACE 1
LOOP     CLI   0(R6),X'40'               TEST CHAR. FOR BLANK
         BE    TRYNXT1                   IF IT IS, GO TO NEXT CHAR.
         CLI   0(R6),X'00'               TEST CHAR. FOR NULL
         BNE   NBLANK1                   IF NOT, FOUND FIRST CHAR.
TRYNXT1  BXLE  R6,R10,LOOP               CHECK NEXT CHARACTER.
***                                      (END OF FIRST LOOP).       ***
         B     RETN0                     NO NONBLANK CHARS - RETURN
*                                        A NULL STRING.
         SPACE 5
*** SECOND LOOP - FIND LAST NONBLANK CHARACTER IN SOURCE STRING.    ***
*** IN THIS LOOP, R11 POINTS AT THE CURRENT CHARACTER, -1 IS THE    ***
*** INCREMENT (CONSTANT), AND 0 IS THE LIMIT (CONSTANT).            ***
*** FUNCTION IS TO FIND THE LAST NONBLANK, AND SET ITS ADDRESS      ***
*** IN REGISTER R11.                                                ***
         SPACE 1
NBLANK1  CLI   0(R11),X'40'              IS THIS CHAR. BLANK?
         BE    TRYNXT2                   IF YES, TRY NEXT CHAR.
         CLI   0(R11),X'00'              IS IT NULL?
TRYNXT2  BNE   NBLANK2                   (NO. LEAVE LOOP).
         BCT   R11,NBLANK1               DECREMENT R11 AND TRY AGAIN.
***                                      (END OF SECOND LOOP).      ***
         SPACE 2
*** (NO CHARACTERS TO COPY - RETURN A NULL OR BLANK STRING)         ***
RETN0    SR    R7,R7                     0 CHARS. TO COPY.
         B     MOVECOMP                  TO COMPARE & COPY STRING.
         SPACE 1
***  (NOW PERFORM THE COPY OPERATION FROM FIRST TO LAST NONBLANK)   ***
         SPACE 1
NBLANK2  LR    R7,R11                    CALC. # OF CHARS. TO COPY
         SR    R7,R6                     IN R7 (END CHAR. LOCN. -
         LA    R7,1(R7)                  START CHAR. LOCN. + 1)
MOVECOMP C     R6,0(R5)                  ANY COPY TO PERFORM?
         BNE   MOVECHRS                  IF YES, GO DO IT.
         SPACE 1
*** AT THIS POINT, A "TRIM IN PLACE" WAS REQUESTED BUT NOT REQUIRED.***
*** SIMPLY SET THE LENGTH FIELD AND RETURN.                         ***
         SPACE 1
         L     R8,0(R5)                  @ OF DEST. STRING LENGTH FIELD
         STH   R7,88(R13)                SAVE NEW LENGTH VALUE VIA DSA
         MVC   0(2,R8),88(R13)           (IN CASE UNALIGNED), AND
         B     RETURN                    RETURN TO CALLER (ALL DONE).
         SPACE 3
*** AT THIS POINT, THE TRIMMED STRING WILL BE COPIED INTO THE DEST. ***
*** STRING.                                                         ***
         SPACE 1
MOVECHRS EQU   *
         LH    R9,4(R5)                  MAX. DEST. LENGTH
         CR    R9,R7                     ENOUGH SPACE TO COPY?
         BNL   *+6                       BRANCH IF YES.
         LR    R7,R9                     TRUNCATE IF NECESSARY.
         L     R8,0(R5)                  ADDRESS OF DEST.
         STH   R7,88(R13)                SET LENGTH FIELD.
         MVC   0(2,R8),88(R13)            (USE MVC IN CASE UNALIGNED).
         LR    R9,R7                     DO NOT PAD.
         LA    R8,2(R8)                  BUMP PAST LENGTH FIELD.
         MVCL  R8,R6                     COPY STRING.
         SPACE 1
RETURN   PLIRETN                         RETURN TO CALLER
         SPACE 4
         EQUREGS
         SPACE 4
         LTORG                           LITERAL POOL
         END
