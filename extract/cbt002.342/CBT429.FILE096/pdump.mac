 PDUMP:    PROC(PTR,LEN,TITLE) REORDER;
 PDUMPNP:  ENTRY(PTR,LEN,TITLE);
 %SKIP;
 /********************************************************************/
 /* P D U M P      -  EXTERNAL PL/I SUBROUTINE                       */
 /* P D U M P N P  -  EXTERNAL PL/I SUBROUTINE                       */
 /* P D U M P S P  -  EXTERNAL PL/I SUBROUTINE                       */
 /*                                                                  */
 /* FUNCTION - PRODUCES A FORMATTED, LABELED DUMP OF AN AREA TO FILE */
 /*   SYSPRINT.                                                      */
 /*                                                                  */
 /* PARAMETERS:                                                      */
 /*   PTR - POINTER - POINTS TO THE START OF THE AREA TO BE DUMPED.  */
 /*   LEN - FIXED BIN(31) - THE LENGTH OF THE AREA TO BE DUMPED.     */
 /*   TITLE - CHAR(*) - THE TITLE TO BE PLACED AT THE TOP OF EACH    */
 /*         PAGE OF THE DUMP.                                        */
 /*                                                                  */
 /* LOGIC - THE STARTING ADDRESS (PTR) IS TRANSLATED TO HEXADECIMAL  */
 /*   AND PRINTED FIRST.  THE AREA IS TREATED AS A BASED CHARACTER   */
 /*   STRING AND IS TRANSLATED TO HEXADECIMAL AND DUMPED, 32 CHARS.  */
 /*   PER LINE.  EACH LINE OF THE DUMP IS PRECEDED BY THE OFFSET OF  */
 /*   THE FIRST CHARACTER IN THAT LINE FROM THE STARTING LOCATION,   */
 /*   IN HEXADECIMAL.                                                */
 /*                                                                  */
 /* NOTE: UNLIKE A SNAP DUMP, THE STARTING LOCATION OF EACH LINE     */
 /*   HAS NO RELATION TO DOUBLEWORD BOUNDARIES.  THE FIRST LINE      */
 /*   STARTS AS OFFSET 0 AS THE LEFTMOST CHARACTER.  CHARACTERS      */
 /*   FOLLOWING THE RIGHTMOST POSITION ARE NOT PRINTED NOR ADDRESSED.*/
 /*   THE RIGHTHAND SIDE OF THE PAGE WILL CONTAIN ONLY PRINTABLE     */
 /*   CHARACTERS (UPPER AND LOWER CASE) WITH ALL OTHERS REPRESENTED  */
 /*   AS PERIODS.                                                    */
 /*                                                                  */
 /* WRITTEN DECEMBER 1981 BY BILL WARRINER, VETERINARY DIAGNOSTIC    */
 /*   LAB, UNIVERSITY OF MISSOURI, 882-6811.                         */
 /*                                                                  */
 /* UPDATED 4/25/84 BY BILL WARRINER, UMCHC COMPUTER CENTER - ADDED  */
 /*   PDUMPSP ENTRY POINT AND TRANSLATION OF CHARACTER DUMP TO       */
 /*   PRINTABLE CHARACTERS ONLY.                                     */
 /*                                                                  */
 /********************************************************************/
 %PAGE;
           DCL PTR POINTER;
           DCL LEN FIXED BIN(31);
           DCL TITLE CHAR(*);
           DCL STRING1 CHAR(16) BASED(S1PTR);
           DCL STRING2 CHAR(16) BASED(S2PTR);
           DCL LASTSTR CHAR(32) INIT((32)' ');
           DCL (S1PTR,S2PTR) POINTER;
           DCL FAKEOUT FIXED BIN(31) BASED(ADDR(PTR2));
           DCL FAKEOUT1 FIXED BIN(31) BASED(ADDR(PTR));
           DCL MASK CHAR(1) BASED(ADDR(PTR2));
           DCL PTR2 POINTER;
           DCL FAKE1 FIXED BIN(31) BASED(ADDR(S1PTR));
           DCL FAKE2 FIXED BIN(31) BASED(ADDR(S2PTR));
           DCL (ADDR,SUBSTR,LENGTH,LOW,TRANSLATE) BUILTIN;
           DCL I FIXED BIN(15);
           DCL SYSPRINT FILE PRINT STREAM OUTPUT EXT;
           DCL POSITION FIXED BIN(31);
           DCL $POS(4) CHAR(1) BASED(ADDR(POSITION));
           DCL IPG FIXED DEC(4,0) STATIC INIT(1);
           DCL (SAME1,SAME2) CHAR(8) INIT((8)' ');
           DCL PRTCHARS CHAR(256) STATIC INIT('.........................
 ....................................... .........Ö.<(+×&.........!$*);^
 -/........|,%_>?..........:#@''=".abcdefghi.......jklmnopqr.......~stuv
 wxyz......................{ABCDEFGHI......}JKLMNOPQR......\.STUVWXYZ...
 ...0123456789......');
  %SKIP(2);
           ON ENDPAGE(SYSPRINT) BEGIN;
               PUT FILE(SYSPRINT) PAGE EDIT(TITLE,'PAGE',IPG)
                 (A,COL(110),A(5),F(4));
               PUT FILE(SYSPRINT) SKIP(2);
               IPG = IPG + 1;
               END;
           SIGNAL ENDPAGE(SYSPRINT);
           GO TO DMPSTRT;
 %PAGE;
 PDUMPSP:  ENTRY(PTR,LEN,TITLE);
 %SKIP;
 /********************************************************************/
 /* P D U M P S P  -  ALTERNATE ENTRY POINT TO PDUMP                 */
 /*                                                                  */
 /* FUNCTION - PRODUCES THE SAME DUMP AS DOES PDUMP, BUT DOES NOT    */
 /*   START THE DUMP ON A NEW PAGE.                                  */
 /*                                                                  */
 /********************************************************************/
  %SKIP(2);
           ON ENDPAGE(SYSPRINT) BEGIN;
               PUT FILE(SYSPRINT) PAGE EDIT(TITLE,'PAGE',IPG)
                 (A,COL(110),A(5),F(4));
               PUT FILE(SYSPRINT) SKIP(2);
               IPG = IPG + 1;
               END;
           PUT FILE(SYSPRINT) SKIP(3) EDIT(TITLE)(A);
 %SKIP(2);
 DMPSTRT:  POSITION = FAKEOUT1;
           PUT FILE(SYSPRINT) SKIP(2) EDIT('### STARTING POSITION IS ',
             'HEX ''',XPOS,'''.')(A,A,A,A);
           POSITION = 0;
           PUT FILE(SYSPRINT) SKIP(2);
           PTR2 = PTR;
           MASK = LOW(1);
 XSTART:   FAKE1 = FAKEOUT + POSITION; /* FIRST CHARACTER */
           IF (FAKEOUT+LEN)<(FAKE1+32) THEN GO TO LASTPRT;
           FAKE2 = FAKE1 + 16; /* START OF 2D. HALF PAGE */
           IF LASTSTR=STRING1××STRING2
           THEN IF SAME1=(8)' '
                THEN SAME1 = XPOS;
                ELSE SAME2 = XPOS;
           ELSE DO;
               IF SAME1^=(8)' '
               THEN IF SAME2^=(8)' '
                    THEN PUT FILE(SYSPRINT) SKIP EDIT('LINES ',SAME1,
                      ' - ',SAME2,' SAME AS ABOVE.')(X(11),(5)A);
                    ELSE PUT FILE(SYSPRINT) SKIP EDIT('LINE ',SAME1,
                      ' SAME AS ABOVE.')(X(11),(3)A);
               ELSE;
               SAME1,SAME2 = (8)' ';
               LASTSTR = STRING1 ×× STRING2;
               PUT FILE(SYSPRINT) SKIP EDIT(XPOS,
                 XCHARS(STRING1),XCHARS(STRING2),
                 ' *',TRANSLATE(STRING1,PRTCHARS),
                 TRANSLATE(STRING2,PRTCHARS),'*')
                 (A(8),X(3),A(36),X(2),A(36),A(2),A(16),A(16),A(1));
               END;
           POSITION = POSITION + 32; /* NEXT 32 CHARACTERS */
           GO TO XSTART;
 LASTPRT:  IF SAME1^=(8)' '
           THEN IF SAME2^=(8)' '
                THEN PUT FILE(SYSPRINT) SKIP EDIT('LINES ',SAME1,
                  ' - ',SAME2,' SAME AS ABOVE.')(X(11),(5)A);
                ELSE PUT FILE(SYSPRINT) SKIP EDIT('LINE ',SAME1,
                  ' SAME AS ABOVE.')(X(11),(3)A);
           ELSE;
           I = LEN - POSITION; /* # OF CHARS LEFT TO PRINT */
           IF I<1 THEN GO TO ALLDONE;
           IF I>16 THEN DO;
               FAKE2 = FAKE1 + 16;
               PUT FILE(SYSPRINT) SKIP EDIT(XPOS,
                 XCHARS(STRING1),XCHARS(SUBSTR(STRING2,1,I-16)),
                 ' *',TRANSLATE(STRING1,PRTCHARS),
                 TRANSLATE(SUBSTR(STRING2,1,I-16),PRTCHARS),'*')
                 (A(8),X(3),A(36),X(2),A(36),A(2),A(16),A(16),A(1));
               END;
           ELSE
             PUT FILE(SYSPRINT) SKIP EDIT(XPOS,
               XCHARS(SUBSTR(STRING1,1,I)),' *',
               TRANSLATE(SUBSTR(STRING1,1,I),PRTCHARS),'*')
               (A(8),X(3),A(36),X(2),X(36),A(2),A(16),X(16),A(1));
 ALLDONE:  PUT FILE(SYSPRINT) SKIP;
           RETURN;
  %PAGE;
 XCHARS:   PROC(STRING) RETURNS(CHAR(36)) REORDER;
 %SKIP;
 /********************************************************************/
 /* X C H A R S  -  INTERNAL PL/I FUNCTION (INTERNAL TO PDUMP)       */
 /*                                                                  */
 /* FUNCTION - TRANSLATES A CHARACTER STRING TO HEXADECIMAL DUMP     */
 /*    FORMAT.                                                       */
 /*                                                                  */
 /********************************************************************/
 %SKIP(3);
           DCL STRING CHAR(*);
           DCL XSTRING CHAR(36) VAR INIT('');
           DCL TRANSLATE BUILTIN;
           DCL T1 CHAR(256) INIT('00000000000000001111111111111111222222
 22222222223333333333333333444444444444444455555555555555556666666666666
 666777777777777777788888888888888889999999999999999AAAAAAAAAAAAAAAABBBB
 BBBBBBBBBBBBCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEEFFFFFFFFFFF
 FFFFF') STATIC;
           DCL T2 CHAR(256) INIT((16)'0123456789ABCDEF') STATIC;
           DCL ARRY(16) CHAR(1) DEF STRING POS(1);
           DCL (I,L) FIXED BIN(15);
           DCL (LENGTH,SUBSTR,REPEAT) BUILTIN;
 %PAGE;
           L = LENGTH(STRING);
           IF L=0 THEN RETURN((36)' ');
           IF L>16 THEN L = 16;
           DO I=1 TO L;
               XSTRING = XSTRING ×× TRANSLATE(ARRY(I),T1) ××
                 TRANSLATE(ARRY(I),T2);
               SELECT(I);
                   WHEN(4,8,12,16) XSTRING = XSTRING ×× ' ';
                   OTHERWISE;
                   END;
               END;
           IF L<16 THEN DO I=L+1 TO 16;
               SELECT(I);
                   WHEN(4,8,12,16) XSTRING = XSTRING ×× '   ';
                   OTHERWISE XSTRING = XSTRING ×× '  ';
                   END;
               END;
           RETURN(XSTRING);
           %SKIP(3);
 XPOS:     ENTRY RETURNS(CHAR(8));
 %SKIP;
 /********************************************************************/
 /* X P O S  -  PL/I INTERNAL ENTRY POINT (INTERNAL TO PDUMP)        */
 /*                                                                  */
 /* FUNCTION - TRANSLATES A FULLWORD BINARY INTEGER TO HEXADECIMAL.  */
 /*                                                                  */
 /********************************************************************/
 %SKIP(3);
           XSTRING = '';
           DO I=1 TO 4;
               XSTRING = XSTRING ×× TRANSLATE($POS(I),T1) ××
                 TRANSLATE($POS(I),T2);
               END;
           RETURN(XSTRING);
           END XCHARS;
  %SKIP(3);
           END PDUMP;
