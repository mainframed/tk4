         TITLE '*** SECEXIT - PANEXEC SECURITY EVENT'
         PRINT NOGEN
***********************************************************************
*  MODULE  -  PANEXEC SECURITY EXIT. ELEMENT AND COMMAND
*             LEVEL VALIDATION VIA INTERFACE TO TOP SECRET
* METHODS  -  USE PSEUDO-DATASET RESOURCE & USE RACHECK TO INVOKE TS *
*   INPUT  -  REGISTER 1 -> PARAMETER LIST                           *
*  OUTPUT  -  RETURN CODE R15=MUST ALWAYS BE 0
*             STATUS RETURNED IN EVENTBLK
* LKED     -  RENT
* DETAILS  -  BUILD PSEUDO-DSNAME & USE RACHECK                 *
*             MAX LOAD LIBRARY DSN LENGTH IS 20!!!!!!!!!!!      *
* PSEUDO-DSNAME FORMAT:      $PANX.DSNAME.GROUP.ELEMENT               *
***********************************************************************
R0       EQU   0
R1       EQU   1 THE ADDR OF THE PAN PARAMETER LIST
R2       EQU   2    BASE FOR THE EVENT BLOCK
R3       EQU   3    BASE FOR THE EVIRON BLOCK
R4       EQU   4    BASE FOR THE DATA  BLOCK
R5       EQU   5    BASE REGISTER FOR ALL DATA LIST ENTRIES
R6       EQU   6
R7       EQU   7     BASE FOR GETMAINED WORKAREA
R8       EQU   8     ADDR OF DATA-ID NAME
R9       EQU   9     ADDR OF DATA-ITEM VALUE
R10      EQU   10    BAL REG FROM MAIN EVENT
R11      EQU   11    BAL REG TO GETDATA
R12      EQU   12    PROGRAM BASE
R13      EQU   13
R14      EQU   14
R15      EQU   15
*        EXIT PARAMETER LIST
EXITPLST DSECT
EXEVENT  DS    A             EVENT -- THE ADDRESS OF THE EVENT BLOCK
EXENVIR  DS    A             ENVIRONMENT -- THE ADDRESS OF THE ENVIRN
EXDATA   DS    A             DATA LIST -- THE ADDRESS OF THE DATA
*                            LIST BLOCK (THE HIGH ORDER BIT IS SET
*                       TO INDICATE THE END OF THE PARAMETER ADDR LIST)
*        EVENT BLOCK
EVENTBLK DSECT
EVEVENT  DS    CL8           EVENT-ID -- THE NAME OF THE EVENT
*                            (E.G. INIT,$OPEN000,$EXEC000,TERM ETC...)
EVEXTYPE DS    CL8           EXIT TYPE -- ANY USER EXIT IDENTIFIER
*                            (GIVEN ON THE EXIT TYPE= MACRO OR BLANKS)
EVRESPON DS    CL1        RESPONSE CODE- INITIALLY 'C', SET BY EXIT TO:
CONTINUE EQU   C'C'          'C' - CONTINUE NORMAL PROCESSING
ABORT    EQU   C'A'          'A' - ABORT PANEXEC PROCESSING
TERMINAT EQU   C'T'          'T' - TERMINATE THIS EXIT
*                      SEE MANUAL CHAPTER 12 'EXITS' FOR DETAILS
VERIFY   EQU   C'V'          'V' - ACTIVATE VERIFICATION
*                                  (VALID ONLY FROM THE INIT EVENT;
*                                  SEE THE INIT EVENT FOR DETAILS)
         DS    CL3           RESERVED
EVUSER   DS    F             USER FULLWORD -- INITIALLY ZEROES; TO BE
*                            USED BY USER AS DESIRED (E.G. ADDRESS OF
*                            A WORK AREA ETC...); THIS FIELD IS UNIQUE
*                            TO EACH EXIT DEFINED BY A EXIT MACRO
*        ENVIRONMENT BLOCK
ENVIRBLK DSECT
ENPRODID DS    CL10          PRODUCT NAME -- VALUE IS ALWAYS "PANEXEC"
ENPRODOP DS    CL10          PRODUCT OPTION -- VALUE IS ALWAYS BLANK
ENPRODVR DS    CL4           PRODUCT VERSION -- THE RELEASE OF THE
*                            PRODUCT (I.E. PANEXEC 5.0 = "0500")
ENOPSYS  DS    CL10          OPERATING SYSTEM -- THE OPERATING SYSTEM
*  UNDER WHICH PRODUCT IS RUNNING ("OS/MVS" OR "OS/VS1" OR "OS/MVS/XA")
ENDCMON  DS    CL10          DC MONITOR -- VALUE IS BLANK OR "CICS"
ENDBMGR  DS    CL10          DB MANAGER -- VALUE IS ALWAYS BLANK
         DS    XL2           RESERVED
ENDCPARM DS    A             ADDRESS OF CICS ENVIRONMENT BLOCK OR ZERO
ENDBPARM DS    A             ALWAYS ZEROES
*
*        DATA LIST BLOCK
DATALIST DSECT
DLCOUNT  DS    F             DATA LIST COUNT -- THE NUMBER OF DATA
*                            LIST ENTRIES (0 TO N) FOLLOWING:
DLFIRST  DS    0X            FIRST DATA LIST ENTRY
*        DATA LIST ENTRY
DLENTRY  DSECT               DATA LIST ENTRY:
DLEID    DS    CL8           DATA ID -- THE NAME OF THE DATA ITEM
*                            (E.G. ELEMFILE, JOBNAME ETC...)
DLESTAT  DS    CL1           DATA ITEM STATUS -- VALUES ARE:
ACTIVE   EQU   C'A'          'A' - ACTIVE
INACTIVE EQU   C'I'          'I' - INACTIVE
         DS    CL3           RESERVED
DLEITEM  DS    A             DATA ITEM ADDRESS -- THE ADDR OF THE ITEM
DLENEXT  DS    0X            BEGINNING OF NEXT ENTRY
*
*        PANEXEC ELEMENT NAME
DATA0000 DSECT
ELEMNAME DS    CL8
*        PANEXEC ELEMENT MODE
DATA0001 DSECT
ELEMMODE DS    CL8
*        LIBRARY VOLUME SERIAL
DATA0002 DSECT
LIBVOL   DS    CL6
*        PANEXEC FUNCTION
DATA0003 DSECT
FUNCTION DS    CL8
*        PANVALET ELEMENT MODE
DATA0004 DSECT
PVMODE   DS    CL2
DISABLED EQU   C'D'    PANVALET ELEMENT STATUS EQUATE
*
         TITLE '*** SECEXIT <==> PROCESSING ***'
SECEXIT  CSECT
         SAVE  (14,12),T,*
         LR    R12,R15        BASE REG=R12
         USING SECEXIT,R12    SET UP ADDRESSABILITY
         USING EXITPLST,R1
         L     R2,EXEVENT
         USING EVENTBLK,R2
         L     R3,EXENVIR
         USING ENVIRBLK,R3
         L     R4,EXDATA
         USING DATALIST,R4
         USING DLENTRY,R5
* IF EVENT = 'INIT'
         CLC   EVEVENT,=CL8'INIT'
         BNE   GETWKADR
         GETMAIN R,LV=LWORK   YES - GETMAIN A WORK AREA  <========
         LR    R6,R1    STORE THE SAVE AREA ADDRESS IN THE EVENT BLOCK
         ST    R6,EVUSER
         B     LINKSAVE
*     GET ADDRESS OF EXIT SAVE AREA STORED IN THE EVENT BLOCK
GETWKADR L     R6,EVUSER
*
* LINK EXIT SAVE AREA TO SAVE AREA CHAIN
LINKSAVE ST    R6,8(R13)
         ST    R13,4(R6)
* SET NEW SAVE AREA AS THE CURRENT SAVE AREA
         LR    R13,R6
         LR    R7,R6        SET UP R7 AS BASE OF THE GETMAINED WORKAREA
         USING WORKAREA,R7
* IF EVENT = '$EXEC000'
         CLC   EVEVENT,=CL8'$EXEC000'
         BNE   CHKELEM0
         BAL   R11,$EXEC000
*        FETCH DOES NOT WORK FOR PSEUOD-DATASETS
*        MVI   TSSACC,$AFETCH   MOVE IN FETCH ACCESS CODE
*        BAL   R11,TSSCHECK     CHECK FOR TOP SECRET ACCESS
         B     RSETSAVE
*
CHKELEM0 CLC   EVEVENT,=CL8'$ELEM000'
         BNE   CHKELEM1
         BAL   R11,$ELEM000
         LA    R8,=CL8'PENDACT'   GET PENDING ACTION
         BAL   R10,GETDATA
         MVI   TSSACC,$AREAD    SET READ ACCESS AS DEFAULT
         CLI   0(R9),C'W'       IS ACCESS WRITE
         BNE   DOTSSCHK             NO
         MVI   TSSACC,$AUPDATE  YES-UPDATE
DOTSSCHK BAL   R11,TSSCHECK     CHECK FOR TOP SECRET ACCESS
         B     RSETSAVE
*
CHKELEM1 CLC   EVEVENT,=CL8'$ELEM001'
         BNE   CHKCMND0
         BAL   R11,$ELEM001
         MVI   TSSACC,$AREAD    MOVE IN READ ACCESS CODE
         BAL   R11,TSSPANCK     CHECK FOR TOP SECRET ACCESS
         B     RSETSAVE
*
CHKCMND0 CLC   EVEVENT,=CL8'$CMND000'
         BNE   RSETSAVE
         BAL   R11,$CMND000
         B     RSETSAVE
* RESET CALLER'S SAVE AREA AS THE CURRENT SAVE AREA
RSETSAVE LR    R6,R13
         L     R13,4(R6)
* REMOVE EXIT SAVE AREA FROM THE SAVE AREA CHAIN
         XC    8(4,R13),8(R13)
         XC    4(4,R6),8(R6)
         CLC   EVEVENT,=CL8'TERM'
         BNE   RETURN
         FREEMAIN R,LV=LWORK,A=(R7)    FREE GETMAINED WORKAREA
         XR    R7,R7
         ST    R7,EVUSER
RETURN   RETURN (14,12),T,RC=0
         TITLE '*** SECEXIT <==> INTERNAL SUBROUTINES ***'
* SUBROUTINE DISALLOWS EXECUTION OF INACTIVE OR DISABLED ELEMENTS
* GET MODE OF ELEMENT TO BE EXECUTED
$EXEC000 LA    R8,=CL8'ELEMMODE'
         BAL   R10,GETDATA
         USING ELEMMODE,R9
* IF ELEMENT MODE IS INACTIVE OR DISABLED
         CLI   ELEMMODE,INACTIVE
         BE    INACXELM
         CLI   ELEMMODE,DISABLED
         BNER  R11
*     INACTIVATE ELEMENT MODE TO DISALLOW EXECUTION
INACXELM MVI   DLESTAT,INACTIVE
         BR    R11
*
* SUBROUTINE ALLOWS ACCESS TO ANY ELEMENT THRU DIRSTAT COMMAND
* SUBROUTINE DISALLOWS REMOVAL OF ACTIVE ELEMENTS FROM A PANEXEC LIB
* GET CURRENT COMMAND BEING EXECUTED
$ELEM000 LA    R8,=CL8'FUNCTION'
         BAL   R10,GETDATA
         USING FUNCTION,R9
* IF CURRENT COMMAND IS REMOVE
         CLC   FUNCTION,=CL8'DIRSTAT'   IF COMMAND IS DIRSTAT
         BE    RSETSAVE                 ACCESS IS OK - EXIT
         CLC   FUNCTION,=CL8'REMOVE'
         BNER  R11
*     GET MODE OF ELEMENT BEING REMOVED
         LA    R8,=CL8'ELEMMODE'
         BAL   R10,GETDATA
         USING ELEMMODE,R9
*     IF ELEMENT MODE IS ACTIVE
         CLI   ELEMMODE,ACTIVE
         BNER  R11
*   INACTIVATE ELEMENT MODE TO DISALLOW REMOVE OF ACTIVE ELEMENT
         MVI   DLESTAT,INACTIVE
         BR    R11
*
* SUBROUTINE DISALLOWS WRITING OF INACTIVE OR DISABLED ELEMENTS FROM
* A PANVALET LIBRARY
* GET CURRENT COMMAND BEING EXECUTED
$ELEM001 LA    R8,=CL8'FUNCTION'
         BAL   R10,GETDATA
         USING FUNCTION,R9
* IF CURRENT COMMAND IS WRITE
         CLC   FUNCTION,=CL8'WRITE'
         BNER  R11
*     GET MODE OF ELEMENT BEING REMOVED
         LA    R8,=CL8'PVMODE'
         BAL   R10,GETDATA
         USING PVMODE,R9
*     IF ELEMENT MODE IS INACTIVE OR DISABLED
         CLI   PVMODE,INACTIVE
         BE    INACPELM
         CLI   PVMODE+1,DISABLED
         BNER  R11
*    INACTIVATE ELEMENT MODE TO DISALLOW REMOVE OF ACTIVE ELEMENT
INACPELM MVI   DLESTAT,INACTIVE
         BR    R11
*
* SUBROUTINE DISALLOWS USE OF THE FILEOPT, CREATE AND STATUS COMMAND
* AND THE ACCESS, ALTER AND OVERRIDE SECURITY COMMANDS
* FOR THOSE WHO DO NOT HAVE UPDATE ACCESS TO THE PANESRL LIBRARY.
* GET CURRENT COMMAND BEING EXECUTED
$CMND000 LA    R8,=CL8'ELEMNAME'
         BAL   R10,GETDATA
         USING ELEMNAME,R9
         CLC   ELEMNAME,=CL8'FILEOPT'  IS CMD = FILEOPT
         BE    CMNDCHK                 YES - CHECK IF ALLOWED
         CLC   ELEMNAME,=CL8'STATUS'  IS CMD = STATUS
         BE    CMNDCHK                 YES - CHECK IF ALLOWED
         CLC   ELEMNAME,=CL8'CREATE'   IS CMD = CREATE
         BE    CMNDCHK                 YES - CHECK IF ALLOWED
         CLC   ELEMNAME,=CL8'ACCESS'   IS CMD = ACCESS
         BE    CMNDCHK                 YES - CHECK IF ALLOWED
         CLC   ELEMNAME,=CL8'ALTER'    IS CMD = ALTER
         BE    CMNDCHK                 YES - CHECK IF ALLOWED
         CLC   ELEMNAME,=CL8'OVERRIDE' IS CMD = OVERRIDE
         BNER  R11                     NO - OK
CMNDCHK  MVI   TSSACC,$AUPDATE         MOVE IN UPDATE ACC CODE
         BAL   R10,TSSCHECK            YES - CHECK IF ALLOWED
         BR    R11
*
GETDATA  DS    0H  GET DATA ITEM FROM THE DATA LIST
* INVOCATION SEQUENCE: R8 --> DATA LIST IDENTIFIER (CL8)
*                      BAL   R10,GETDATA
*                      R5 --> DATA LIST ENTRY
*                      R9 --> DATA VALUE
* IF THE DATA ID IS NOT FOUND (INDICATING AN INTERNAL ERROR IN THE
* EXIT), THIS SUBROUTINE WILL SET THE RESPONSE CODE AS "ABORT" AND
* RETURN DIRECTLY TO THE MAINLINE ROUTINE VIA R11
*
* GET FIRST ENTRY IN THE DATA LIST
         L     R6,DLCOUNT
         LA    R5,DLFIRST
* DO WHILE ENTRIES TO BE SEARCHED AND DATA ID NOT FOUND
CHKNEXT  LTR   R6,R6
         BZ    CHKSRCH
         CLC   DLEID,0(R8)
         BE    CHKSRCH
*     GET NEXT ENTRY IN THE DATA LIST
         LA    R5,DLENEXT
         BCTR  R6,R0
         B     CHKNEXT
*
* IF DATA ID FOUND
CHKSRCH  LTR   R6,R6
         BZ    NOTFOUND
*     POINT R9 AT THE DATA ITEM VALUE
         L     R9,DLEITEM
         BR    R10
         SPACE 3
TSSCHECK MVC   PSEUDONM,$PANX      ---------> SET $PANX. IN PSEUDONM
         LA    R8,=CL8'LIBNAME'   GET LIBRARY DSN
         BAL   R10,GETDATA
         MVC   PSEUDONM+6(44-6),0(R9)  -----> $PANX.DSNAME
         LA    R8,=CL8'ELEMGRP'          GET ELEMNT GRP NAME
         BAL   R10,GETDATA
         TRT   PSEUDONM(44-9),FINDEND    FIND END OF DSNAME
         BZ    TOOLONG     IF DSN WAS TOO LARGE- CHK HIGH QUALIF ONLY
         MVI   0(R1),C'.'          -------------> $PANX.DSN.
         MVC   1(8,R1),0(R9)       -------------> $PANX.DSN.GRPNAME
         LA    R8,=CL8'ELEMNAME'         GET ELEMNT NAME
RACHK1   BAL   R10,GETDATA
         TRT   PSEUDONM(44-9),FINDEND    FIND END OF GRPNAME(DSN)
         BZ    TOOLONG IF $PANX.DSN.GRPNM TOO LARGE-CHK HIGH QUALIF ONY
         MVI   0(R1),C'.'    --> $PANX.DSN.GRPNAME.($PAN.DSN.)
         MVC   1(8,R1),0(R9) --> $PANX.DSN.GRPNAME.ELEMNAME($PAN..MEMB)
TOOLONG  EQU   *
         MVC   DATASETX(9),XDATASET X'09',C'DATASETX' FOLLOWD BY ACCESS
         MVC   FEEDBACK,XFEEDB     INIT 16-BYTE FEEDBACK AREA
         MVC   RACHECK,RACKLIST    MOVE RACHECK SKELETON
         MVC   TSSVOL,=C'PANEXE'     FILL IN PHONY VOLSER 'PANEXE'
         RACHECK CLASS=DATASETX,ENTITY=PSEUDONM,VOLSER=TSSVOL,         .
               INSTLN=FEEDBACK,MF=(E,RACHECK)
*              CODE LOG=NOSTAT ON THE RACHECK FOR NO TSS VIOLAT LOGGING
         LTR   R15,R15             RETURN CODE FROM TOP SECRET
         BZR   R11                 BR IF ZERO
         MVI   DLESTAT,INACTIVE  NO- SET MEMBER STATUS TO I(INACTIVE)
*        RESPONSE CODE IS ALREADY SET TO C TO CONTINUE BUT CURRENT
*        FUNCTION (MEMBER ACCESS) TERMINATES WITH A SECURITY VIOLATION
         BR    R11
*
TSSPANCK MVC   PSEUDONM,$PAN       ---------> SET $PAN. IN PSEUDONM
         LA    R8,=CL8'LIBNAME'   GET LIBRARY DSN
         BAL   R10,GETDATA
         MVC   PSEUDONM+5(44-9-5),0(R9)  -----> $PAN.DSN
         LA    R8,=CL8'SUPERSET'         GET MEMBER NAME
         B     RACHK1                    AND USE TSSCHECK RTN
*
*     SET RESPONSE CODE AS ABORT
NOTFOUND MVI   EVRESPON,ABORT
         BR    R11
         SPACE 2
RACKLIST RACHECK  MF=L
XFEEDB   DC    C'TSSF',X'10',XL11'00'
XDATASET DC    X'09',C'DATASETX'  THIS MOVED TO 1ST 9 BYTES OF DATASETX
$PAN     DC    CL44'$PAN.'       FIXED $PAN. PREFIX
$PANX    DC    CL44'$PANX.'       FIXED $PANX. PREFIX
FINDEND  DC    256X'00'            TRANSLATE TABLE
         ORG   FINDEND+C' '        TO LOCATE
         DC    X'FF'               END OF DSNAME
         ORG   FINDEND+256         (FIRST BLANK)
         LTORG
         SPACE 4
WORKAREA DSECT
SAVEAREA DS    18F     REGISTER SAVE AREA-MUST BE FIRST ITEM IN DSECT
PSEUDONM DS    CL44             PSEUDO DSNAME
         DS    CL8      SLACK IN CASE PSEUDO-NAME IS TOO LONG
TSSVOL   DS    CL6              VOLUME SERIAL
DATASETX DS    CL9  -XDATASET   CLASSNAME-THIS FIELD & TSSACC CONTIG
TSSACC   DS    X                ACCESS LEVEL: UPDATE=X'60' READ=X'40'
*
RACHECK  DS    CL32             RACHECK AREA
FEEDBACK DS    XL16           FEEDBACK:
LWORK    EQU   *-WORKAREA
         SPACE 4
$AFETCH  EQU   X'80'              FETCH-ONLY
$AREAD   EQU   X'40'              READ
$AWRITE  EQU   X'20'              WRITE-ONLY
$AUPDATE EQU   $AREAD+$AWRITE     I-O (UPDATE)
$ACREATE EQU   X'10'              CREATE
$ASCRTCH EQU   X'08'              SCRATCH
$ANONE   EQU   X'00'              NO ACCESS
$AALL    EQU   X'FF'              EVERYTHING
         END
