/*  REXX calculator and storage dumper.  Read the disclaimer at end.*/
   NUMERIC DIGITS 30
   arg !!temp1
   call INITIALIZE
   interpret "trace" result
   signal on error
   if address() = 'TSO' × address() = 'MVS' then signal on failure
   signal on syntax
READY:
   SAY 'Ready for commands.  Use "EXIT" to exit. Use "HELP" for help.'
   DO UNTIL !!curr1 = 'EXIT'
     pull !!curr1
     if !!back then do
       say
       say  !!curr1
       say
     end
     PARSE VAR !!curr1 !!do !!rest
     SELECT
       WHEN !!do = 'LET' THEN
         call WHENLET
       WHEN !!do = 'SAY' × !!do = 'DO' THEN
         INTERPRET !!curr1
       WHEN !!do = 'REXX' then
         INTERPRET !!rest
       WHEN !!curr1 = 'EXIT' THEN
         iterate
       WHEN !!curr1 = 'END' THEN
         !!curr1= 'EXIT'
       WHEN !!curr1 = '' THEN
         if !!back then !!curr1 = 'EXIT'
       WHEN !!do = 'DELETE' then
         call WHENDELETE
       WHEN !!curr1 = 'SORT' then
         call WHENSORT
       WHEN !!curr1 = 'VARTABLE' then
         call WHENVARTABLE
       WHEN !!do = 'DUMP' then
         call WHENDUMP
       WHEN !!do = 'TIMESTAMP' then
         call WHENTIME
       WHEN !!do = 'HELP' THEN
         CALL WHENHELP
       WHEN !!do = 'VERBOSE' THEN
         CALL WHENVERBOSE
       WHEN !!curr1 = "NEG" THEN
         do
           !!neg = !!true
          say "Hex display of negative values will be in 2's complement"
         end
       WHEN !!curr1 = "POS" THEN
         do
           !!neg = \!!true
           say "Hex display will be absolute value of decimal number"
         end
       WHEN !!curr1 = "TRACE" THEN
         TRACE ?i
       WHEN !!do = 'TRACE' THEN
         INTERPRET !!curr1
       OTHERWISE
         call WHENOTHERWISE
     END   /* of SELECT */
   END /* of main loop */
   EXIT 0
WHENOTHERWISE:
   interpret "!!!CURR = " !!curr1
   if datatype(!!!curr,'N') then
     do
       curr = !!!curr/1
       !!!curr=HEXFMT(curr)
     end
   if length(!!!curr) > 78 then !!dunder = ">"
   else !!dunder = ""
   !!!curr = left(!!!curr,78) ×× !!dunder
   if !!!curr \= ' ' then say !!!curr
   return 0
HEXFMT:
   procedure expose !!max !!min !!minfrac !!hexmax !!neg !!verbose
   curr = arg(1)
   if abs(curr) <= !!hexmax then
     do
       temp = trunc(curr)
       temp = abs(temp)
       if !!neg & curr<0 then temp = d2x(!!hexmax + 1 - temp)
       else temp = D2X(temp)
       tempx = RIGHT(temp,16,'0')
       tempx = insert(' ',tempx,8)
     end
   else
     tempx = copies(' ',17)
   return TEMPX comma(CURR)
COMMA: /* put commas into number and format it correctly */
   procedure expose !!max !!min  !!minfrac !!verbose
   curr = arg(1)
   select
     when abs(curr) < !!minfrac & curr \= 0 then
       return format(curr,,,,16)
     when curr > !!max then
       return ' ' ×× format(curr,,29,,20)
     when curr < -1*!!max/10 then  /* neg numbers have xtra char */
       return format(curr,,29,,19)
     when abs(curr) < !!min then
       return format(curr,,29,,20)
     otherwise
       nop
   end /* of select */
   int = trunc(curr)
   fraction = curr - int
   if int = '' then int = 0
   int = format(int,20)
   /*  17 = 20-3  */
   do i = 17 to 1 by -3 while datatype(substr(int,i,1),'N')
     int = insert(',',int,i)
   end
   int = right(int,26) /* 26 = 20 + int(20-1/3) */
   select
     when fraction = '' then nop
     when fraction = 0 then fraction = ''
     otherwise nop
   end   /* of select */
   if length(fraction) > 0 then do
     parse var fraction . '.' fraction
     fraction = '.'fraction
   end /* of IF */
   if int = 0 then
     if curr < 0 then int = right('-0',26)
   ret = int ×× fraction
   return ret
H:
X:
   PROCEDURE EXPOSE !!verbose
   ARG TEMP
   RETURN X2D(TEMP)
S:            /* signed hex number */
   PROCEDURE EXPOSE !!verbose
   arg temp
   neg = verify(left(temp,1),'89ABCDEFabcdef')
   if neg = 0 then do
     len = length(temp)
     two = 1 ×× copies('0',len) /* 2**n greater than temp */
     two = x2d(two)
     return -1*(two-x2d(temp))
   end
   else return x2d(temp)
B:  /* binary numbers */
   procedure expose !!verbose
   arg temp
   temp = strip(temp)
   temp = strip(temp,'L','0')
   if verify(temp,'01 ') > 0 then do
     say 'Binary numbers are made up of zeros and ones'
     return 0
   end
   power = 1
   value = 0
   do i = length(temp) to 1 by -1
     temp2 = substr(temp,i,1)
     if temp2 = 1 then
       value = value + power
     if temp2 \= ' ' then
       power = power * 2
   end
   return value
WHENLET:
   INTERPRET !!rest
   parse var !!rest !!variable '=' !!rest
   if !!rest \= '' then do /* if '=' in command */
     !!variable = strip(!!variable)
     if symbol(!!variable) = 'VAR' then do
       if datatype(value(!!variable),'N') then do
         curr = value(!!variable)
         curr = curr / 1
         result = hexfmt(curr)
         if length(result) > 78 then !!dunder = ">"
         else !!dunder = ""
         say left(result,78) ×× !!dunder
       end /* of if datatype ... */
       !!temp = !!vartble.!!variable
       if !!temp = 0 then do
         !!varnum = !!varnum + 1
         !!vartble.!!varnum = !!variable
         !!vartble.!!variable = !!varnum
       end /* of if !!temp ... */
     end /* of if symbol ... */
   end /* of if !!rest ... */
   return 0
WHENVARTABLE:
   do !!x = 1 to !!varnum
     if !!vartble.!!x = !!deleted then iterate
     !!curr = value(!!vartble.!!x)
     if datatype(!!curr,'N') then do
       result=left(hexfmt(!!curr),54)
       say result !!vartble.!!x
     end
     else do
       say left(!!curr,54) !!vartble.!!x
     end
   end
   return 0
WHENDUMP:
   parse var !!rest !!address !!len
   interpret '!!address =' !!address
   !!address = value(!!address)
   if length(!!len) > 0 then do
     interpret '!!len = ' !!len
     !!len = value(!!len)
   end
   call dump !!address !!len
   return 0
WHENSORT:
   do !!i = 1 to !!varnum-1
     do !!j = !!i+1 to !!varnum
       if !!vartble.!!i > !!vartble.!!j then do
         !!x = !!vartble.!!i
         !!vartble.!!i = !!vartble.!!j
         !!vartble.!!j = !!x
       end /* of IF */
     end /* of do !!j */
     !!y = !!vartble.!!i
     !!vartble.!!y = !!i
   end /* of !!i */
   do !!i = !!varnum to 1 by -1 while !!vartble.!!i = !!deleted
   end
   !!varnum = !!i
   !!y = !!vartble.!!i
   !!vartble.!!y = !!i
   return 0
WHENDELETE:
   !!var1 = strip(!!rest)
   DO WHILE !!var1 \= ''
     parse var !!var1 !!variable !!var1
     !!temp = !!vartble.!!variable
     if !!temp = 0 then do
       say 'Variable "'!!variable'" is not in the table'
     end
     else do
       !!vartble.!!temp = !!deleted
       !!vartble.!!variable = 0
       interpret 'drop' !!variable
     end
   end /* of DO WHILE */
   return 0
WHENTIME:
   parse var !!rest !!stamp !!gmt !!dec
   interpret '!!stamp =' !!stamp
   if !!gmt = '' then !!gmt = 'GMT'
   if !!dec = '' then !!dec = 'DECIMAL'
   call 'IEBTIM' !!stamp ' ' !!gmt ' ' !!dec
   return
FRAC:
   PROCEDURE EXPOSE !!verbose
   ARG curr
   temp = curr-trunc(curr)
   temp = temp / 1
   return temp
DUMP2:   /*  display dump format of up to 16 bytes of storage  */
   PROCEDURE EXPOSE !!verbose
   parse arg address len
   if len = '' then len = 16
   address = d2x(address)
   temp = storage(address,len)
   temp2 = left(c2x(temp),32)
   temp2 = insert(' ',temp2,24)
   temp2 = insert('  ',temp2,16)
   temp2 = insert(' ',temp2,8)
   temp = "×" left(temp,16) "×" temp2 "×"
   TEMP = RIGHT(address,8,'0') "   " temp
   return temp
DUMP:   /*  display dump format of storage  */
   PROCEDURE EXPOSE !!verbose
   parse arg address len
   if len = '' then len = 16
   lastgroup = address + len - 16
   do i= address by 16 while i <= lastgroup
     say dump2(i)
   end
   len = len//16
   if len > 0 then say dump2(i len)
   return 0
STG:   /*  return dec value of storage  */
   PROCEDURE EXPOSE !!verbose
   parse arg address len
   if len = '' then len = 4
   address = d2x(address)
   temp = storage(address,len)
   temp = c2d(temp)
   return temp
BIN16:  /*  return printable form of a number converted to binary */
BIT16:  /*  return printable form of a number converted to binary */
   PROCEDURE EXPOSE !!verbose !!hexmax !!neg
   i=arg(1)
   j = bin(i,16)
   return j
BIN:   /*  say printable form of a number converted to binary */
   PROCEDURE EXPOSE !!verbose !!hexmax !!neg
   a = trunc(arg(1))
   if !!neg & a<0 then a = d2x(!!hexmax + 1 + a)
   else a = D2X(abs(a))
   b = arg(2)
   if b = '' then b = 0
   b = min(b,16)
   if b > length(a) then a = right(a,b,0)
   if length(a) > 16 then
     do
       say 'truncated to rightmost 16 hex digits'
       a = right(a,16,0)
     end
   if length(a)//2 \=0 then a = '0' ×× a
   b = ' '
   do i = 0 to length(a)/2
     do j = 1 to 2
       b = b ×× '  ' ×× substr(a,2*i+j,1) ×× ' '
     end /* do j */
     b = b ×× ' '
     if i = 3 then b = b ×× '   '
   end
   say left(b,79)
   x=!!bit(a)
   if datatype(x,'N') then
     do
       say x
       return ' '
     end
   else
     return !!bit(a)
!!BIT:  /*  return printable form of a number converted to binary */
   PROCEDURE EXPOSE !!verbose
   a = arg(1)
   lena = min(length(a),16)
   if lena//2 \= 0 then do
     lena = lena + 1
     a = '0' ×× a
   end
   bin! = ''
   do i = 1 to 9 by 8
     do j = i to i+6 by 2 while j < lena
       digit = substr(a,j,2)
       do k = 7 to 0 by -1
         if and1(2**k,x2d(digit)) = 0 then bin! = bin! ×× 0
         else bin! = bin! ×× 1
       end /* of do k */
       bin! = bin! ×× ' '
     end  /* of do j */
     bin! = bin! ×× '   '
   end  /* of do i */
   return bin!
OR:     /*  return 2 values logically ORed together */
   PROCEDURE EXPOSE !!verbose
   i = right(d2c(arg(1)),16,'0'x)
   j = right(d2c(arg(2)),16,'0'x)
   k = bitor(i,j,'0'x)
   return c2d(k)
XOR:    /*  return 2 values logically XORed together */
   PROCEDURE EXPOSE !!verbose
   i = right(d2c(arg(1)),16,'0'x)
   j = right(d2c(arg(2)),16,'0'x)
   k = bitxor(i,j,'0'x)
   return c2d(k)
AND:    /*  return 2 values logically ANDed together */
   PROCEDURE EXPOSE !!verbose
   i = right(d2c(arg(1)),16,'0'x)
   j = right(d2c(arg(2)),16,'0'x)
   k = bitand(i,j,'0'x)
   return c2d(k)
NOT:    /*  return one's complement of a number */
   PROCEDURE EXPOSE !!verbose
   i = arg(1)
   j = x2d(copies('F',16))
   k = xor(i,j)
   return k
AND1:    /*  return 2 1-digit values logically ANDed together */
   PROCEDURE EXPOSE !!verbose
   i = right(d2c(arg(1)),1)
   j = right(d2c(arg(2)),1)
   k = bitand(i,j,'0'x)
   return c2d(k)
C:  /* Combination function */
   PROCEDURE expose !!!. !!verbose
   first = arg(1)
   second = arg(2)
   if \datatype(first,'W') × \datatype(second,'W') then
     return 'Combination function requires whole numbers'
   if first < second then
     return 'First argument must be no less than the second'
   return format(!(first)/( !(second) * !(first-second) ),,0)
!:  /* Factorial */
   PROCEDURE expose !!!. !!verbose
   NUMBER = ARG(1)
   select
     when datatype(!!!.number,'N') then
       nop
     when \datatype(number,'W') × number < 0 then
       !!!.number = ,
           'Factorial function requires non-negative whole numbers.'
     otherwise
       nop
   end /* of select */
   if !!!.number \= '!!!.'number then return !!!.number
   if number > 40 then
     do
       nminus40 = number - 40
       !!!.nminus40 = !(nminus40)
     end
   nminus1 = number - 1
   !!!.number = number * !(nminus1)
   return !!!.number
   /*  The structure of "!" is this so that the restriction of 250
       levels of nesting will allow maximum factorial computation. */
CLOCK:
FROMHMS:
   PROCEDURE EXPOSE !!verbose
   tod = ARG(1)
   parse var tod hh '.' mm '.' ss
   if ss = '' then do
     ss = mm
     mm = hh
     hh = 0
   end
   if ss = '' then do
     ss = mm
     mm = 0
   end
   if ss > 59 × mm > 59 then
     say 'value greater than 59 in minutes or seconds - possible error'
   return ss + (60* (mm + 60*hh))
UNCLOCK:
TOHMS:
   PROCEDURE EXPOSE !!verbose
   tod = ARG(1)
   hh = tod % (60*60)
   tod = tod - hh*60*60
   mm = tod % 60
   ss = tod - mm*60
   if hh < 10 then hcolon = "0"
   else hcolon = ""
   if mm < 10 then mcolon = ".0"
   else mcolon = "."
   if ss < 10 then scolon = ".0"
   else scolon = "."
   return  hcolon ×× hh ×× mcolon ×× mm ×× scolon ×× ss
WHENVERBOSE:
   PROCEDURE EXPOSE !!rest !!verbose !!false !!true
   push !!rest
   pull rest  /* now in upper case */
   if abbrev('OFF',rest,1) then
     do
       !!verbose = !!false
       say 'VERBOSE error messages are off.'
     end
   else
     do
       !!verbose = !!true
       say 'VERBOSE error messages are on.'
     end
   return
WHENHELP:
   PROCEDURE EXPOSE CURR !!rest !!verbose !!endcomment
   push !!rest
   pull rest  /* now in upper case */
   select
     when abbrev('FUNCTIONS',rest,1) then
       call helpfunc
     when abbrev('TIME',rest,1) × abbrev('CLOCK',rest,1) then
       call helptime
     when abbrev('DUMP',rest,1) × abbrev("STORAGE",rest,1) ,
          × rest="STG" then
       call helpdump
     when abbrev('REXX',rest,1) × abbrev('LOOP',rest,1) × rest='DO' then
       call helprexx
     when abbrev('TABLE',rest,1) then
       call helptable
     when abbrev('NUMBERS',rest,1) then
       call helpnumber
     otherwise
       call helpgenl
   end /* of select */
   return
SAYHELP:
   do !!!i = sigl + 2
     if sourceline(!!!i) = !!endcomment then leave !!!i
     say strip(sourceline(!!!i),"T")
   end
   return
HELPGENL:
   call sayhelp
/*
    This is a decimal and hexadecimal calculator.  You can type in a
number or an expression, and the result will be displayed in both
decimal and hex.  Positive hex numbers are typed as either "H(nnnnn)" or
"X(nnnnn)".  Signed hex numbers are typed as "S(nnnnn)".  The value
displayed is always in the variable "CURR".  All values are kept in
decimal for internal use.  The hex value displayed for each is
re-computed each time from the integer part of the actual value (note:
integer part, not rounded).
    Values can be displayed in binary by either of BIN(var-name) or
BIN16(var-name).  BIN is a variable length display, and BIN16 is fixed
length.
    You can set variables by using the keyword "LET" as in:  "LET A =
CURR + 5" which would set "A" to 5 more than the currently displayed
value.
    You can turn on extra information in case of error with the VERBOSE
command and turn it back off with "VERBOSE OFF".
    For further help enter HELP with an operand of:
FUNCTIONS, CLOCK, DUMP, NUMBERS, TABLE, or REXX.

    You exit this facility by typing "END" or "EXIT".
*/
    return
HELPFUNC:
say 'Here is how to get help for commands and functions you can use: '
say ' '
  temp = left('Function   Help operand ',25)
  say temp ×× '  ' ×× temp ×× '  ' ×× temp
  say ' '
  queue '!           NUMBERS '
  queue 'AND         NUMBERS '
  queue 'B           NUMBERS '
  queue 'BIN         NUMBERS '
  queue 'BIN16       NUMBERS '
  queue 'C           NUMBERS '
  queue 'DELETE      TABLE '
  queue 'DO          REXX '
  queue 'DUMP        DUMP '
  queue 'END         (none) '
  queue 'EXIT        (none) '
  queue 'FACTORIAL   NUMBERS '
  queue 'FRAC        NUMBERS '
  queue 'FROMHMS     CLOCK '
  queue 'H           NUMBERS '
  queue 'LET         (none) '
  queue 'NEG         NUMBERS '
  queue 'NOT         NUMBERS '
  queue 'OR          NUMBERS '
  queue 'POS         NUMBERS '
  queue 'REXX        REXX '
  queue 'S           NUMBERS '
  queue 'SAY         REXX '
  queue 'SORT        TABLE '
  queue 'STG         DUMP '
  queue 'TIMESTAMP   CLOCK '
  queue 'TOHMS       CLOCK '
  queue 'TRACE       REXX '
  queue 'TRUNC       NUMBERS '
  queue 'VARTABLE    TABLE '
  queue 'VERBOSE     (none) '
  queue 'X           NUMBERS '
  queue 'XOR         NUMBERS '
  queue ' '  /* this space before the null is important */
  queue ''
  do i = 1
    parse pull msg.i
    if msg.i == '' then leave i
    msg.i = left(msg.i,25)
  end
  max=i - i//3   /* max is greatest multiple of 3 <= i */
  long = max/3
  do i = 1 to long
    j = i + long
    k = j + long
    say msg.i ×× '  ' ×× msg.j ×× '  ' ×× msg.k
  end
say ' '
say '    You exit this facility by typing "END" or "EXIT". '
    return
HELPTABLE:
   call sayhelp
/*
   You can list all variables you have set with the VARTABLE command,
sort the variable names alphabetically with the SORT command, and delete
variables with "DELETE var-names".
*/
    return
HELPNUMBER:
   call sayhelp
/*
    This is a decimal and hexadecimal calculator.  You can type in a
number or an expression, and the result will be displayed in both
decimal and hex.  Positive hex numbers are typed as "H(nnnnn)".  Signed
hex numbers are typed as "S(nnnnn)".  Binary numbers are typed as
"B(nnnnn)"; nnnnn is made up of zeros and ones, and blanks are ignored.
The value displayed is always in the variable "CURR".  All values are
kept in decimal for internal use.  The hex value displayed for each is
re-computed each time from the integer part of the actual value (note:
integer part, not rounded).
    Values can be displayed in binary by either of BIN(var-name) or
BIN16(var-name).  BIN is a variable length display, and BIN16 is fixed
length.
    You can do logical bit operations on numbers with AND, OR, NOT, and
XOR. An example of the syntax is "AND(5,6)" which will yield 4.
    FRAC will return the fractional part of a value, while TRUNC will
return the integer part.
    "!(n)" will return n factorial and "C(m,n)" will return
combination(m,n) which is also known as "m choose n" and is the number
of ways of picking a subset of n objects from m objects.  These are used
in probability and statistics.
    NEG will cause negative hex values to print in 2's complement, until
you use POS to print the absolute value of hex numbers.
*/
   return
HELPREXX:
   call sayhelp
/*
   You can perform any valid REXX command by prefixing the command with
"REXX".  SAY, DO and TRACE are also recognized without having to prefix
the command with "REXX".  (Note: TRACE with no operands will be
interpreted as TRACE ?I).
   There is a primitive looping capability in that you can start any
command with "DO" and it will also be interpreted as a REXX command.
You could print the cubes of 1-12 with the command
     "do i = 1 to 12; queue i**3; end"
   The semicolon is a REXX command seperator and must be used if you are
entering multiple REXX commands on one line.
*/
   return
HELPTIME:
   call sayhelp
/*
     You can print a number of seconds as HH.MM.SS with the function
TOHMS(number). You can convert from HH.MM.SS to a decimal number of
seconds with FROMHMS(HH.MM.SS). If there is only one period, FROMHMS
assumes you are entering MM.SS; with no periods it assumes SS only.
These functions are useful for clock arithmetic.

     TOHMS(FROMHMS(05.04.03)-FROMHMS(4.5.6) will yield 00.58.57 showing
58 minutes and 57 seconds between 04:05:06 and 05:04:03.

     TIMESTAMP will call the external routine IEBTIM which displays a
timestamp (such as is used in VSAM) in date and time format.  IEBTIM
assumes that the number coming in is HEX unless otherwise specified;
TIMESTAMP will otherwise specify for you unless you use other operands.
SYNTAX:
     TIMESTAMP value    GMT × gmtval     HEX
       value is any value.  If it is a hex value, you must code both GMT
       or gmtval and HEX (these are positional operands).  GMT (default)
       will only work on MVS.  It tells IEBTIM to check the systems GMT
       offset and compute based upon that.  Otherwise you can put the
       GMT offset value in.
     EXAMPLES:
TIMESTAMP A401CA8B80240000 gmt hex     TIMESTAMP 11817949597696000000
TIMESTAMP A401CA8B80240000 0   hex     TIMESTAMP 11817949597696000000  0
*/
   return
HELPDUMP:
   call sayhelp
/*
    "STG(n)" will return the 4 bytes at location n.  "DUMP n" will
format a dump of data at location n.  You can also code "DUMP n length"
where length is the number of bytes to dump.  An example to print the
CVT prefix area (an MVS area):
  let a = stg(16)    (or let a = stg(h(10))  (or let a = !cvt)
  dump a-40 40
An example to print the current LPALST concatenation (MVS):

  let cvte=stg(!cvt+h(4ac))
  let lpat=stg(cvte+h(38))
  let numdsn = stg(lpat+7 1)    note optional length on stg
  dump lpat numdsn*45+9
  let name = lpat+9
  do i = name by 45 for numdsn; say storage(d2x(i),44); end

Note:  These functions may only be available under MVS.
*/
   return
SYNTAX:
   sigl2 = sigl
   !!temp = 'SYNTAX'
   !!temp2 = "SYNTAX error" rc
   signal ERRRTN
ERROR:
   sigl2 = sigl
   !!temp = 'ERROR' rc
   !!temp2 = !!temp
   signal ERRRTN
FAILURE:
   sigl2 = sigl
   !!temp = 'FAILURE' rc
   !!temp2 = !!temp
   signal ERRRTN
ERRRTN:
   if !!inproc = '!!INPROC' then do
     if !!verbose then do
       say !!temp2 'in procedure (at line' sigl2')- ignored'
       say 'Error' rc 'means "' ×× errortext(rc) ×× '"'
       say 'Line' sigl2 'is:'
       return strip(sourceline(sigl2),'T')
     end
     else return !!temp2 'in procedure (at line' sigl2')- ignored'
   end
   else do
     say !!temp2 'in command (at line' sigl2')- ignored'
     if !!verbose then do
       say 'Error' rc 'means "' ×× errortext(rc) ×× '"'
       say 'Line' sigl2 'is:'
       say sourceline(sigl2)
     end
     interpret 'signal on' !!temp
     signal ready
   end
INITIALIZE:
   do while !!temp1 \= ''
     parse var !!temp1 !!temp2 !!temp1
    if pos('=',!!temp2) = 0 then
      do
        !!temp2 = translate(!!temp2," ","_")
        queue !!temp2
      end
    else interpret !!temp2
   end
   if debug = "TRACE" then trace ?i
   else if debug \= "DEBUG" then trace i
   curr=0
   !!endcomment = "*" ×× "/"
   !!hexmax = x2d(copies('F',16))
   !!max = 99999999999999999999
   !!min = -9999999999999999999
   !!minfrac = 10**-33  /* Smallest number I'll express without
                           going to scientific notation  */
   drop debug
   !!varnum = 0
   !!vartble. = 0
   !!deleted = x2c(fffffe) /* delete variable value */
   !!true = 0=0
   !!false= \!!true
   !!verbose = !!false
   !!!.0 = 1
   !!!.1 = 1
   !!inproc = 'NO'  /* are we in a 'procedure'? */
   !!neg = !!false  /* all hex numbers are positive */
   !!temp = address()
   SELECT
     WHEN !!temp = 'TSO' then
       do
         if sysvar('SYSENV') = 'FORE' then
           !!back = !!false
         else
           !!back = !!true
         !cvt = stg(16)
       end
     WHEN !!temp = 'MVS' then
       do
         !!back = !!true
         !cvt = stg(16)
       end
     OTHERWISE  /* eg under 'CMS' or pc-rexx */
       !!back = !!false
   end   /* of select */
   return trace()
 /*  Written by Art Tansky at
       SunGard
       600 Laurel Oak Road
       Voorhees, NJ 08043

       Phone:  (609) 566-3611

     If you find any bugs or have any suggestions for improvements or
     additions, you can contact me at the address and phone number
     above.  Please do not distribute modified versions of this code.
     DO NOT REMOVE THE DISCLAIMER!

  DISCLAIMER Disclaimer DISCLAIMER disclaimer DISCLAIMER Disclaimer:

  This code has worked at Sungard.  There is no guarantee that the
  code will work anywhere else.  Neither Sungard nor the author may be
  held reponsible for any damage caused by this code.



  Version 1.19 updates:
    Use ! instead of # as some REXX implementations do not allow #.
    Use \ for not instead of a not sign for same above reasons.
    Put 1st line comment in column 1 because OS/2 REXX requires it.
    Replace "upper" with a push and pull because not all REXX's have
      the "upper" command.

  Version 1.20 updates:
    Re-do HELP so that the exec can be line numbered.
    Allow operands on the CALCR command to be queued to CALCR (as long
      as they have no "=".  Since spaces delimit operands, underscores
      (_'s) will be translated to spaces.

 */
